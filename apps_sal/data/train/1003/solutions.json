["t=eval(input())\nfor i in range(0,t):\n    x=input()\n    nm=x.split(' ')\n    nm[0]=int(nm[0])\n    nm[1]=int(nm[1])\n    csoint=[]\n    lsoint=[]\n    csofloat=[]\n    lsofloat=[]\n    for j in range(0,nm[0]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csoint.append(b[0])\n        lsoint.append(b[1])\n    for k in range(0,nm[1]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csofloat.append(b[0])\n        lsofloat.append(b[1])\n    chakra=0\n\n##    for j in range(0,nm[0]):\n##        if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##        for k in range(0,nm[1]):\n##            if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##            if lsoint[j]==lsofloat[k]:\n##                if csoint[j]>csofloat[k]:\n##                    csoint[j]-=csofloat[k]\n##                    csofloat[k]=0\n##                    lsofloat[k]=0\n##                elif csofloat[k]>csoint[j]:\n##                    if lsoint.count(lsoint[j])==1==lsofloat.count(lsofloat[k]):\n##                        chakra+=csofloat[k]-csoint[j]\n##                        csoint[j]=csofloat[k]\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                    elif lsoint.count(lsoint[j])==1 and lsofloat.count(lsofloat[k])>lsoint.count(lsoint[j]):\n##                        csoint[j]=csofloat[k]+1\n##                        chakra+=csofloat[k]-csoint[j]+1\n##                        csoint[j]=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n##                    else:\n##                        csofloat[k]-=csoint[j]\n##                        csoint[j]=0\n##                        lsoint[j]=0\n##                        break\n##                else:\n##                    if lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])>=lsofloat.count(lsofloat[k]):\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                        break\n##                    elif lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])<lsofloat.count(lsofloat[k]):\n##                        csoint[j]=1\n##                        chakra+=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n    l=min(lsoint)-1\n    ci=[]\n    for a in range(l+1,max(lsoint)+1):\n        c=0\n        l+=1\n        if l not in lsoint:\n            continue\n        for j in range(0,nm[0]):\n           if lsoint[j]==l:\n               c+=csoint[j]\n        ci.append(c)\n    \n    l=min(lsofloat)-1\n    cf=[]\n    for a in range(l+1,max(lsofloat)+1):\n        c=0\n        l+=1\n        if l not in lsofloat:\n            continue\n        for j in range(0,nm[1]):\n            if lsofloat[j]==l:\n                c+=csofloat[j]\n        cf.append(c)\n\n    for i in range(0,len(ci)):\n        if ci[i]<cf[i]:\n            chakra+=cf[i]-ci[i]\n    print(chakra)\n", "t=eval(input())\nfor i in range(0,t):\n    x=input()\n    nm=x.split(' ')\n    nm[0]=int(nm[0])\n    nm[1]=int(nm[1])\n    csoint=[]\n    lsoint=[]\n    csofloat=[]\n    lsofloat=[]\n    for j in range(0,nm[0]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csoint.append(b[0])\n        lsoint.append(b[1])\n    for k in range(0,nm[1]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csofloat.append(b[0])\n        lsofloat.append(b[1])\n    chakra=0\n\n##    for j in range(0,nm[0]):\n##        if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##        for k in range(0,nm[1]):\n##            if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##            if lsoint[j]==lsofloat[k]:\n##                if csoint[j]>csofloat[k]:\n##                    csoint[j]-=csofloat[k]\n##                    csofloat[k]=0\n##                    lsofloat[k]=0\n##                elif csofloat[k]>csoint[j]:\n##                    if lsoint.count(lsoint[j])==1==lsofloat.count(lsofloat[k]):\n##                        chakra+=csofloat[k]-csoint[j]\n##                        csoint[j]=csofloat[k]\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                    elif lsoint.count(lsoint[j])==1 and lsofloat.count(lsofloat[k])>lsoint.count(lsoint[j]):\n##                        csoint[j]=csofloat[k]+1\n##                        chakra+=csofloat[k]-csoint[j]+1\n##                        csoint[j]=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n##                    else:\n##                        csofloat[k]-=csoint[j]\n##                        csoint[j]=0\n##                        lsoint[j]=0\n##                        break\n##                else:\n##                    if lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])>=lsofloat.count(lsofloat[k]):\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                        break\n##                    elif lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])<lsofloat.count(lsofloat[k]):\n##                        csoint[j]=1\n##                        chakra+=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n    l=min(lsoint)-1\n    ci=[]\n    for a in range(l+1,max(lsoint)+1):\n        c=0\n        l+=1\n        if l not in lsoint:\n            continue\n        for j in range(0,nm[0]):\n           if lsoint[j]==l:\n               c+=csoint[j]\n        ci.append(c)\n    \n    l=min(lsofloat)-1\n    cf=[]\n    for a in range(l+1,max(lsofloat)+1):\n        c=0\n        l+=1\n        if l not in lsofloat:\n            continue\n        for j in range(0,nm[1]):\n            if lsofloat[j]==l:\n                c+=csofloat[j]\n        cf.append(c)\n\n    for i in range(0,len(ci)):\n        if ci[i]<cf[i]:\n            chakra+=cf[i]-ci[i]\n    print(chakra)\n", "chakra = 0\nt = eval(input())\nfor a in range (0, t) :\n    chakra = 0\n    s = input()\n    l=s.split()\n    n = int (l[0])\n    m = int (l[1])\n    lnew = []\n    soint = []\n    sofloat = []\n    for i in range (0, n):\n        s = input()\n        l=s.split()\n        soint += [[int (l[0]), int (l[1])]]\n    for i in range (0, m):\n        s = input()\n        l=s.split()\n        sofloat += [[int (l[0]), int (l[1])]]\n    for i in range (0, n) :\n        sumi = 0\n        sumf = 0\n        if not(soint[i][1] in lnew) :\n            lnew+=[soint[i][1]]\n            for j in range (i, n) :\n                if soint[i][1] == soint[j][1] :\n                    sumi+=soint[j][0]\n            for k in range (0, m) :\n                if soint[i][1] == sofloat[k][1] :\n                    sumf+=sofloat[k][0]\n            if sumi <= sumf :\n                chakra += sumf - sumi\n    print(chakra)", "\n\ndef main():\n  t=int(input())\n  while t :\n    t=t-1\n    n,m=input().split()\n    x=100*[0]\n    for i in range(int(n)):\n      y=input().split()\n      c=int(y[0])\n      l=int(y[1])\n      x[l-1]=x[l-1]+c\n    z=100*[0]\n    for i in range(int(m)):\n      y=input().split()\n      c=int(y[0])\n      l=int(y[1])\n      z[l-1]=z[l-1]+c\n    s=0\n    for i in range(100):\n      if z[i]>x[i] :\n        s=s+(z[i]-x[i])\n    print(s)\n    \n\ndef __starting_point():\n  main()\n__starting_point()", "chakra = 0\nt = eval(input())\nfor a in range (0, t) :\n    chakra = 0\n    s = input()\n    l=s.split()\n    n = int (l[0])\n    m = int (l[1])\n    lnew = []\n    soint = []\n    sofloat = []\n    for i in range (0, n):\n        s = input()\n        l=s.split()\n        soint += [[int (l[0]), int (l[1])]]\n    for i in range (0, m):\n        s = input()\n        l=s.split()\n        sofloat += [[int (l[0]), int (l[1])]]\n    for i in range (0, n) :\n        sumi = 0\n        sumf = 0\n        if not(soint[i][1] in lnew) :\n            lnew+=[soint[i][1]]\n            for j in range (i, n) :\n                if soint[i][1] == soint[j][1] :\n                    sumi+=soint[j][0]\n            for k in range (0, m) :\n                if soint[i][1] == sofloat[k][1] :\n                    sumf+=sofloat[k][0]\n            if sumi <= sumf :\n                chakra += sumf - sumi\n    print(chakra)\n", "t=eval(input())\nfor i in range(0,t):\n    x=input()\n    nm=x.split(' ')\n    nm[0]=int(nm[0])\n    nm[1]=int(nm[1])\n    csoint=[]\n    lsoint=[]\n    csofloat=[]\n    lsofloat=[]\n    for j in range(0,nm[0]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csoint.append(b[0])\n        lsoint.append(b[1])\n    for k in range(0,nm[1]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csofloat.append(b[0])\n        lsofloat.append(b[1])\n    chakra=0\n\n##    for j in range(0,nm[0]):\n##        if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##        for k in range(0,nm[1]):\n##            if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##            if lsoint[j]==lsofloat[k]:\n##                if csoint[j]>csofloat[k]:\n##                    csoint[j]-=csofloat[k]\n##                    csofloat[k]=0\n##                    lsofloat[k]=0\n##                elif csofloat[k]>csoint[j]:\n##                    if lsoint.count(lsoint[j])==1==lsofloat.count(lsofloat[k]):\n##                        chakra+=csofloat[k]-csoint[j]\n##                        csoint[j]=csofloat[k]\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                    elif lsoint.count(lsoint[j])==1 and lsofloat.count(lsofloat[k])>lsoint.count(lsoint[j]):\n##                        csoint[j]=csofloat[k]+1\n##                        chakra+=csofloat[k]-csoint[j]+1\n##                        csoint[j]=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n##                    else:\n##                        csofloat[k]-=csoint[j]\n##                        csoint[j]=0\n##                        lsoint[j]=0\n##                        break\n##                else:\n##                    if lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])>=lsofloat.count(lsofloat[k]):\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                        break\n##                    elif lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])<lsofloat.count(lsofloat[k]):\n##                        csoint[j]=1\n##                        chakra+=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n    l=min(lsoint)-1\n    ci=[]\n    for a in range(l+1,max(lsoint)+1):\n        c=0\n        l+=1\n        if l not in lsoint:\n            continue\n        for j in range(0,nm[0]):\n           if lsoint[j]==l:\n               c+=csoint[j]\n        ci.append(c)\n    \n    l=min(lsofloat)-1\n    cf=[]\n    for a in range(l+1,max(lsofloat)+1):\n        c=0\n        l+=1\n        if l not in lsofloat:\n            continue\n        for j in range(0,nm[1]):\n            if lsofloat[j]==l:\n                c+=csofloat[j]\n        cf.append(c)\n\n    for i in range(0,len(ci)):\n        if ci[i]<cf[i]:\n            chakra+=cf[i]-ci[i]\n    print(chakra)\n", "t=eval(input())\nfor i in range(0,t):\n    x=input()\n    nm=x.split(' ')\n    nm[0]=int(nm[0])\n    nm[1]=int(nm[1])\n    csoint=[]\n    lsoint=[]\n    csofloat=[]\n    lsofloat=[]\n    for j in range(0,nm[0]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csoint.append(b[0])\n        lsoint.append(b[1])\n    for k in range(0,nm[1]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csofloat.append(b[0])\n        lsofloat.append(b[1])\n    chakra=0\n\n##    for j in range(0,nm[0]):\n##        if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##        for k in range(0,nm[1]):\n##            if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##            if lsoint[j]==lsofloat[k]:\n##                if csoint[j]>csofloat[k]:\n##                    csoint[j]-=csofloat[k]\n##                    csofloat[k]=0\n##                    lsofloat[k]=0\n##                elif csofloat[k]>csoint[j]:\n##                    if lsoint.count(lsoint[j])==1==lsofloat.count(lsofloat[k]):\n##                        chakra+=csofloat[k]-csoint[j]\n##                        csoint[j]=csofloat[k]\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                    elif lsoint.count(lsoint[j])==1 and lsofloat.count(lsofloat[k])>lsoint.count(lsoint[j]):\n##                        csoint[j]=csofloat[k]+1\n##                        chakra+=csofloat[k]-csoint[j]+1\n##                        csoint[j]=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n##                    else:\n##                        csofloat[k]-=csoint[j]\n##                        csoint[j]=0\n##                        lsoint[j]=0\n##                        break\n##                else:\n##                    if lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])>=lsofloat.count(lsofloat[k]):\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                        break\n##                    elif lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])<lsofloat.count(lsofloat[k]):\n##                        csoint[j]=1\n##                        chakra+=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n    l=min(lsoint)-1\n    ci=[]\n    for a in range(l+1,max(lsoint)+1):\n        c=0\n        l+=1\n        if l not in lsoint:\n            continue\n        for j in range(0,nm[0]):\n           if lsoint[j]==l:\n               c+=csoint[j]\n        ci.append(c)\n    \n    l=min(lsofloat)-1\n    cf=[]\n    for a in range(l+1,max(lsofloat)+1):\n        c=0\n        l+=1\n        if l not in lsofloat:\n            continue\n        for j in range(0,nm[1]):\n            if lsofloat[j]==l:\n                c+=csofloat[j]\n        cf.append(c)\n\n    for i in range(0,len(ci)):\n        if ci[i]<cf[i]:\n            chakra+=cf[i]-ci[i]\n    print(chakra)\n", "t=eval(input())\nfor i in range(0,t):\n    x=input()\n    nm=x.split(' ')\n    nm[0]=int(nm[0])\n    nm[1]=int(nm[1])\n    csoint=[]\n    lsoint=[]\n    csofloat=[]\n    lsofloat=[]\n    for j in range(0,nm[0]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csoint.append(b[0])\n        lsoint.append(b[1])\n    for k in range(0,nm[1]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csofloat.append(b[0])\n        lsofloat.append(b[1])\n    chakra=0\n\n##    for j in range(0,nm[0]):\n##        if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##        for k in range(0,nm[1]):\n##            if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##            if lsoint[j]==lsofloat[k]:\n##                if csoint[j]>csofloat[k]:\n##                    csoint[j]-=csofloat[k]\n##                    csofloat[k]=0\n##                    lsofloat[k]=0\n##                elif csofloat[k]>csoint[j]:\n##                    if lsoint.count(lsoint[j])==1==lsofloat.count(lsofloat[k]):\n##                        chakra+=csofloat[k]-csoint[j]\n##                        csoint[j]=csofloat[k]\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                    elif lsoint.count(lsoint[j])==1 and lsofloat.count(lsofloat[k])>lsoint.count(lsoint[j]):\n##                        csoint[j]=csofloat[k]+1\n##                        chakra+=csofloat[k]-csoint[j]+1\n##                        csoint[j]=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n##                    else:\n##                        csofloat[k]-=csoint[j]\n##                        csoint[j]=0\n##                        lsoint[j]=0\n##                        break\n##                else:\n##                    if lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])>=lsofloat.count(lsofloat[k]):\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                        break\n##                    elif lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])<lsofloat.count(lsofloat[k]):\n##                        csoint[j]=1\n##                        chakra+=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n    l=min(lsoint)-1\n    ci=[]\n    for a in range(l+1,max(lsoint)+1):\n        c=0\n        l+=1\n        if l not in lsoint:\n            continue\n        for j in range(0,nm[0]):\n           if lsoint[j]==l:\n               c+=csoint[j]\n        ci.append(c)\n    \n    l=min(lsofloat)-1\n    cf=[]\n    for a in range(l+1,max(lsofloat)+1):\n        c=0\n        l+=1\n        if l not in lsofloat:\n            continue\n        for j in range(0,nm[1]):\n            if lsofloat[j]==l:\n                c+=csofloat[j]\n        cf.append(c)\n\n    for i in range(0,len(ci)):\n        if ci[i]<cf[i]:\n            chakra+=cf[i]-ci[i]\n    print(chakra)\n", "t=eval(input())\nfor i in range(0,t):\n    x=input()\n    nm=x.split(' ')\n    nm[0]=int(nm[0])\n    nm[1]=int(nm[1])\n    csoint=[]\n    lsoint=[]\n    csofloat=[]\n    lsofloat=[]\n    for j in range(0,nm[0]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csoint.append(b[0])\n        lsoint.append(b[1])\n    for k in range(0,nm[1]):\n        a=input()\n        b=a.split(' ')\n        b[0]=int(b[0])\n        b[1]=int(b[1])\n        csofloat.append(b[0])\n        lsofloat.append(b[1])\n    chakra=0\n\n##    for j in range(0,nm[0]):\n##        if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##        for k in range(0,nm[1]):\n##            if csofloat==[0]*nm[1]:\n##                print chakra\n##                break\n##            if lsoint[j]==lsofloat[k]:\n##                if csoint[j]>csofloat[k]:\n##                    csoint[j]-=csofloat[k]\n##                    csofloat[k]=0\n##                    lsofloat[k]=0\n##                elif csofloat[k]>csoint[j]:\n##                    if lsoint.count(lsoint[j])==1==lsofloat.count(lsofloat[k]):\n##                        chakra+=csofloat[k]-csoint[j]\n##                        csoint[j]=csofloat[k]\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                    elif lsoint.count(lsoint[j])==1 and lsofloat.count(lsofloat[k])>lsoint.count(lsoint[j]):\n##                        csoint[j]=csofloat[k]+1\n##                        chakra+=csofloat[k]-csoint[j]+1\n##                        csoint[j]=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n##                    else:\n##                        csofloat[k]-=csoint[j]\n##                        csoint[j]=0\n##                        lsoint[j]=0\n##                        break\n##                else:\n##                    if lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])>=lsofloat.count(lsofloat[k]):\n##                        csoint[j]=0\n##                        csofloat[k]=0\n##                        lsoint[j]=0\n##                        lsofloat[k]=0\n##                        break\n##                    elif lsoint.count(lsoint[j])==1 and lsoint.count(lsoint[j])<lsofloat.count(lsofloat[k]):\n##                        csoint[j]=1\n##                        chakra+=1\n##                        csofloat[k]=0\n##                        lsofloat[k]=0\n    l=min(lsoint)-1\n    ci=[]\n    for a in range(l+1,max(lsoint)+1):\n        c=0\n        l+=1\n        if l not in lsoint:\n            continue\n        for j in range(0,nm[0]):\n           if lsoint[j]==l:\n               c+=csoint[j]\n        ci.append(c)\n    \n    l=min(lsofloat)-1\n    cf=[]\n    for a in range(l+1,max(lsofloat)+1):\n        c=0\n        l+=1\n        if l not in lsofloat:\n            continue\n        for j in range(0,nm[1]):\n            if lsofloat[j]==l:\n                c+=csofloat[j]\n        cf.append(c)\n\n    for i in range(0,len(ci)):\n        if ci[i]<cf[i]:\n            chakra+=cf[i]-ci[i]\n    print(chakra)\n", "# fierce battles - codechef oct 2012 - drgnbool.py\n\nt = int(input())\n\nfor testCase in range(t):\n    n,m = list(map(int, input().split()))\n    chakra = [0]*101\n    for i in range(n):\n        c,l = list(map(int, input().split()))\n        chakra[l] += c\n    for i in range(m):\n        p,l = list(map(int, input().split()))\n        chakra[l] -= p\n    boost = 0\n    for c in chakra:\n        boost += max(0, -c)\n    print(boost)\n    \n", "T = int(input())\nchef = []\nwhile (T>0):\n    T-=1\n    NM = input().split()\n    N = int(NM[0])\n    M = int(NM[1])\n\n    soints = dict()\n    sofloats = dict()\n\n    for i in range(0,N):\n        CL = input().split()\n        C = int(CL[0])\n        L = int(CL[1])\n        if L in soints:\n            soints[L]+=C\n        else:\n            soints[L] = C\n\n    for i in range(0,M):\n        CL = input().split()\n        C = int(CL[0])\n        L = int(CL[1])\n        if L in sofloats:\n            sofloats[L]+=C\n        else:\n            sofloats[L] = C\n\n    chef_val = 0\n    for i in soints:\n        if sofloats[i] - soints[i] > 0:\n            chef_val += sofloats[i] - soints[i]\n                    \n    chef.append(chef_val)\nfor i in chef:\n    print(i)\n", "'''\nCreated on Oct 9, 2012\n\n@author: Nitish\n'''\n\ndef solve():\n    levels = {}\n    power = 0\n    N, M = list(map(int, input().split()))\n    for i in range(N):\n        C, L = list(map(int, input().split()))\n        if L in levels:\n            levels[L] += C \n        else:\n            levels[L] = C\n    for f in range(M):\n        C, L = list(map(int, input().split()))\n        levels[L] -= C\n    \n    for key, value in list(levels.items()):\n        if value < 0:\n            power += value\n    \n    print(abs(power))    \n\ndef __starting_point():\n    T = int(input())\n    while T > 0:\n        solve()\n        T -= 1\n__starting_point()", "from functools import reduce\ndef add(x, y):\n    a = n_d[y] - m_d[y]\n    return a+x if a>0 else x\n\na = int(input())\nfor u in range(a):\n    m, n = list(map(int, input().split()))\n    m_d = {}\n    n_d = {}\n    for v in range(m):\n        k, j = list(map(int, input().split()))\n        if(j in m_d):\n            m_d[j] += k\n        else:m_d[j] = k\n    for w in range(n):\n        k, j = list(map(int, input().split()))\n        if(j in n_d):\n            n_d[j] += k\n        else:n_d[j] = k\n    print(reduce(add, iter(m_d.keys()), 0))\n\n", "from sys import stdin\nt=(stdin.readline())\nlevels=[0]*101\nfor i in range(int(t)):\n   sochef=0\n   warriors = stdin.readline()\n   n,m = warriors.split()\n   for i in range(int(n)):\n      x=stdin.readline()\n      c,l=x.split()\n      levels[int(l)]+=int(c)\n   for i in range(int(m)):\n      x=stdin.readline()\n      c,l=x.split()\n      levels[int(l)]-=int(c)\n   for i in range(101):\n      if levels[i]<0:\n         sochef+=levels[i]\n      levels[i] = 0\n   print(abs(sochef))\n", "from sys import stdin\nt=(stdin.readline())\nlevels=[0]*101\nfor i in range(int(t)):\n   sochef=0\n   warriors = stdin.readline()\n   n,m = warriors.split()\n   for i in range(int(n)):\n      x=stdin.readline()\n      c,l=x.split()\n      levels[int(l)]+=int(c)\n   for i in range(int(m)):\n      x=stdin.readline()\n      c,l=x.split()\n      levels[int(l)]-=int(c)\n   for i in range(101):\n      if levels[i]<0:\n         sochef+=levels[i]\n      levels[i] = 0\n   print(abs(sochef))\n", "t=int(input())\nlevels=[0]*101\nfor i in range(t):\n   sochef=0\n   warriors = input()\n   n,m = warriors.split()\n   for i in range(int(n)):\n      x=input()\n      c,l=x.split()\n      levels[int(l)]+=int(c)\n   for i in range(int(m)):\n      x=input()\n      c,l=x.split()\n      levels[int(l)]-=int(c)\n   for i in range(101):\n      if levels[i]<0:\n         sochef+=levels[i]\n      levels[i] = 0\n   print(abs(sochef))\n", "T = int(input())\n\nfor t in range(0, T):\n    N, M = input().split()\n\n    I = []\n    F = []\n    \n    for n in range(0, int(N)):\n        C, L = input().split()\n        I.append((int(C), int(L)))\n        \n    for n in range(0, int(M)):\n        C, L = input().split()\n        F.append((int(C), int(L)))\n\n    chakra = 0\n\n    for l in set([i[1] for i in I]):\n        Cil = [i[0] for i in I if i[1] == l]\n        Cfl = [f[0] for f in F if f[1] == l]\n        temp = (sum(Cfl) - sum(Cil)) \n        if temp > 0:\n            chakra += temp\n\n    print(chakra)\n", "from functools import reduce\ndef add(x, y):\n    a = n_d[y] - m_d[y]\n    return a+x if a>0 else x\n\na = int(input())\nfor u in range(a):\n    m, n = [int(x) for x in input().split(' ')]\n    m_d = {}\n    n_d = {}\n    for v in range(m):\n        k, j = [int(x) for x in input().split(' ')]\n        if(j in m_d):\n            m_d[j] += k\n        else:m_d[j] = k\n    for w in range(n):\n        k, j = [int(x) for x in input().split(' ')]\n        if(j in n_d):\n            n_d[j] += k\n        else:n_d[j] = k\n    print(reduce(add, iter(m_d.keys()), 0))\n\n", "from functools import reduce\ndef add(x, y):\n    a = n_d[y] - m_d[y]\n    return a+x if a>0 else x\n\na = int(input())\nwhile(a):\n    m, n = [int(x) for x in input().split(' ')]\n    m_d = {}\n    n_d = {}\n    while(m):\n        k, j = [int(x) for x in input().split(' ')]\n        if(j in m_d):\n            m_d[j] += k\n        else:m_d[j] = k\n        m-=1\n    while(n):\n        k, j = [int(x) for x in input().split(' ')]\n        if(j in n_d):\n            n_d[j] += k\n        else:n_d[j] = k\n        n-=1\n    a-=1\n    print(reduce(add, iter(m_d.keys()), 0))\n\n", "chakra = 0\nt = eval(input())\nfor a in range (0, t) :\n    chakra = 0\n    s = input()\n    l=s.split()\n    n = int (l[0])\n    m = int (l[1])\n    lnew = []\n    soint = []\n    sofloat = []\n    for i in range (0, n):\n        s = input()\n        l=s.split()\n        soint += [[int (l[0]), int (l[1])]]\n    for i in range (0, m):\n        s = input()\n        l=s.split()\n        sofloat += [[int (l[0]), int (l[1])]]\n    for i in range (0, n) :\n        sumi = 0\n        sumf = 0\n        if not(soint[i][1] in lnew) :\n            lnew+=[soint[i][1]]\n            for j in range (i, n) :\n                if soint[i][1] == soint[j][1] :\n                    sumi+=soint[j][0]\n            for k in range (0, m) :\n                if soint[i][1] == sofloat[k][1] :\n                    sumf+=sofloat[k][0]\n            if sumi <= sumf :\n                chakra += sumf - sumi\n    print(chakra)", "# ******************************************************************************\n# Problem: Fierce Battles\n# Link: http://www.codechef.com/OCT12/problems/DRGNBOOL\n# Author: Deepak Antony - \"deebee\" \"drunkbeast\" \"dAbeAst\"\n# Solution: simple; sum up the total for each level and subtract from the \n# sofloats total capacity for that level; in the end sum up all levels with\n# positive diff's\n# ******************************************************************************\n\n# Uncomment this line if the judge supports psyco\n# import psyco\n# psyco.full()\n\nimport time\nimport sys\n\ndef timeElapsed(fn):\n    \"\"\" A time elapsed decorator \"\"\"\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        res = fn(*args, **kwargs)\n        sys.stderr.write(\"Time Elapsed: %f seconds\\n\"%(time.time()-start))\n        return res\n    return wrapper\n\ndef solveFierceBattles():\n    T = int(input())\n    for test in range(T):\n        N, M = tuple( int(x) for x in input().split() )\n        soints = {}\n        for ints in range(N):\n            chakra, level = tuple( int(x) for x in input().split() )\n            if level not in soints:\n                soints[level] = chakra\n            else:\n                soints[level] += chakra\n        sofloats = {}\n        for floats in range(M):\n            chakra, level = tuple( int(x) for x in input().split() )\n            if level not in sofloats:\n                sofloats[level] = chakra\n            else:\n                sofloats[level] += chakra\n        res = 0\n        for level, chakra in soints.items():\n\n            if chakra < sofloats[level]:\n                res += sofloats[level]-chakra\n        print(res)\n        \n\n@timeElapsed\ndef main():\n    \"\"\" Main controller \"\"\"\n    # solve a problem here\n    solveFierceBattles()\n\ndef __starting_point():\n    main()\n\n__starting_point()", "seq = int(input())\nwhile seq>0:\n    level = [0]*101\n    n,m = input().split()\n    m = int(m)\n    n = int(n)\n    power =0\n    while n>0:\n        c,l = input().split()\n        c = int(c)\n        l = int(l)\n        level[l] = level[l] + c\n        n = n -1;\n    while m>0:\n        c,l = input().split()\n        c = int(c)\n        l = int(l)\n        level[l] = level[l] - c\n        m = m -1;\n    for no in level:\n        if no<0:\n            power = power + (-no)\n    print(power)\t\n    seq =seq - 1\n", "seq = int(input())\nwhile seq>0:\n    level = [0]*101\n    n,m = input().split()\n    m = int(m)\n    n = int(n)\n    power =0\n    while n>0:\n        c,l = input().split()\n        c = int(c)\n        l = int(l)\n        level[l] = level[l] + c\n        n = n -1;\n    while m>0:\n        c,l = input().split()\n        c = int(c)\n        l = int(l)\n        level[l] = level[l] - c\n        m = m -1;\n    for no in level:\n        if no<0:\n            power = power + (-no)\n    print(power)\t\n    seq =seq - 1\n", "seq = int(input())\nwhile seq>0:\n    level = [0]*101\n    n,m = input().split()\n    m = int(m)\n    n = int(n)\n    power =0\n    while n>0:\n        c,l = input().split()\n        c = int(c)\n        l = int(l)\n        level[l] = level[l] + c\n        n = n -1;\n    while m>0:\n        c,l = input().split()\n        c = int(c)\n        l = int(l)\n        level[l] = level[l] - c\n        m = m -1;\n    for no in level:\n        if no<0:\n            power = power + (-no)\n    print(power)\t\n    seq =seq - 1\n", "def go():\n    n,m = list(map(int, input().split()))\n    d = [0]*101\n    for i in range(n):\n        c,l = list(map(int, input().split()))\n        d[l] += c\n    for i in range(m):\n        c,l = list(map(int, input().split()))\n        d[l] -= c\n    print(sum(-i for i in d if i<0))\n\nfor t in range(eval(input())): go()\n"]