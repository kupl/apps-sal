["import itertools\n\ndef permutations(string):\n    return list(\"\".join(p) for p in set(itertools.permutations(string)))", "    return map(''.join, set(itertools.permutations(s)))\n", "def permutations(string):\n  if len(string) == 1: return set(string)\n  first = string[0]\n  rest = permutations(string[1:])\n  result = set()\n  for i in range(0, len(string)):\n    for p in rest:\n      result.add(p[0:i] + first + p[i:])\n  return result", "import itertools\ndef permutations(string):\n    return set(''.join(x) for x in itertools.permutations(string, r=len(string)))", "def permutations(s):\n    if len(s) == 0:\n        return []\n    elif len(s) == 1:\n        return [s]\n    else:\n        return set(s[i]+p for i in range(len(s)) for p in permutations(s[:i] + s[i+1:]))", "import itertools\n\ndef permutations(s):\n    return list(set([''.join(x) for x in itertools.permutations(list(s))]))\n", "def permutations(s):        \n    if(len(s)==1): return [s]\n    result=[]\n    for i,v in enumerate(s):\n        result += [v+p for p in permutations(s[:i]+s[i+1:])]\n    return list(set(result))", "import itertools\n\ndef permutations(s):\n    return list(set(''.join(p) for p in itertools.permutations(s)))\n", "def permutations(string):\n    from itertools import permutations\n    a=[''.join(x) for x in permutations(string)]\n    return list(set(a))", "from itertools import permutations as pm\npermutations=lambda s: map(''.join, set(pm(s)))", "def permutations(word):\n    if len(word)<=1:\n        return [word]\n\n    perms=permutations(word[1:])\n    char=word[0]\n    result=[]\n    for perm in perms:\n        for i in range(len(perm)+1):\n            result.append(perm[:i] + char + perm[i:])\n    return set(result)\n    \n\n"]