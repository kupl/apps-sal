["from collections import deque\nt=int(input())\n\nfor i in range(t):\n n=int(input())\n N=[i for i in range(1, n+1)]\n w=list(map(int, input().split()))\n max_sweetness=max(w)\n sizes=[]\n cnt=0\n for i in range(n):\n  if w[i]!=max_sweetness:\n   cnt+= 1 \n  else:\n   sizes.append(cnt)\n   cnt=0\n \n if cnt!=0:\n  sizes[0]=(cnt+sizes[0])\n \n res=0\n for i in range(len(sizes)):\n  res+=max(sizes[i]-n//2+1, 0)\n \n print(res)", "# cook your dish here\nt=int(input())\nfor i in range(t):\n a=int(input())\n cho =list(map(int, input().split()))\n maxc=max(cho)\n start=cho.index(maxc)\n mid =int(len(cho)/2)\n for j in range(len(cho)-1, 0, -1):\n  if(cho[j]==maxc):\n   end = j\n   break\n ans =((len(cho))-end)-(mid-start)\n print(max(0,ans))", "# cook your dish here\ndef answer():\n m=max(w)\n count=[]\n c=0\n for i in w:\n  if(i==m):\n   count.append(c)\n   c=-1\n  c+=1\n\n if(c):\n  count.append(c)\n\n first=(w[0]!=m)\n last=(w[-1]!=m)\n\n if(first and last):\n  count[0]+=count[-1]\n  count.pop()\n\n k=0 \n for i in count:\n  if(i >= n//2):\n   k+=i-n//2+1\n return k\n \n   \n\nfor T in range(int(input())):\n n=int(input())\n w=list(map(int,input().split()))\n\n print(answer())\n", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n = int(input())\n arr = list(map(int, input().split()))\n maxi = max(arr)\n for i in range(n-1,-1,-1):\n  if(arr[i]==maxi):\n   r = i\n   break\n for i in range(n):\n  if(arr[i]==maxi):\n   r = r-i\n   break\n if((n//2)-r<0):\n  print(0)\n else:\n  print((n//2)-r)", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n = int(input())\n arr = list(map(int, input().split()))\n maxi = max(arr)\n for i in range(n-1,-1,-1):\n  if(arr[i]==maxi):\n   r = i\n   break\n for i in range(n):\n  if(arr[i]==maxi):\n   r = r-i\n   break\n if((n//2)-r<0):\n  print(0)\n else:\n  print((n//2)-r)\n", "t=int(input())\nwhile(t>0):\n t-=1\n n=int(input())\n l=list(map(int,input().split()))\n m=max(l)\n a=[]\n for i in range(n):\n  if(m==l[i]):\n   a.append(i+1)\n b=[]\n for i in range(1,len(a)):\n  b.append(a[i]-a[i-1])\n if(len(a)>1):\n  b.append(n-a[-1]+a[0])\n  k=max(b)\n  if(k>=n//2):\n   print(k-(n//2))\n  else:\n   print(0)\n else:\n  print((n+1)//2)\n\n", "from sys import maxsize, stdout, stdin\nmod = int(1e9 + 7)\ndef I(): return int(stdin.readline())\ndef lint(): return [int(x) for x in stdin.readline().split()]\ndef S(): return input().strip()\ndef grid(r, c): return [lint() for i in range(r)]\nfor _ in range(I()):\n n = I()\n ls = lint()\n cnt =0\n arr =[0]*n\n m = max(ls)\n idx = ls.index(m)\n ideal = n//2\n shift = ideal - idx\n for i in range(n):\n  arr[i]= (ls[(i-shift)%n])\n if m in arr[:n//2 ]:\n  print(0)\n else:\n  for j in range(n-1,n//2 -1 ,-1):\n   if arr[j]!=m:\n    cnt+=1\n   else:break\n  print(cnt+1)\n", "# cook your dish here\nfor _ in range(int(input())):\n q = int(input())\n arr = list(map(int,input().split()))\n t = max(arr)\n for i in range(q-1,-1,-1):\n  if(arr[i]==t):\n   r = i\n   break\n for i in range(q):\n  if(arr[i]==t):\n   r = r-i\n   break\n if((q//(1+1))-r < 0):\n  print(0)\n else:\n  print((q//(1+1))-r)", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n mid=n//2-1\n max_beg=max(l)\n f_o=l.index(max_beg)\n l.reverse()\n l_o=l.index(max_beg)\n l_o=n-1-l_o\n if l_o-f_o>=mid:\n  print(0)\n else:\n  if f_o==l_o:\n   f_o=mid \n   print(n-1-f_o)\n  else:\n   gap=l_o-f_o \n   f_o=mid \n   l_o=f_o+gap \n   print(n-1-l_o)\n \n  \n", "# cook your dish here\ntry:\n T = int(input())\n while T>0:\n  N = int(input())\n  midway = (N//2) - 1\n  num = list(map(int, input().split()[:N]))\n  max_beg = max(num)\n  first_occr = num.index(max_beg)\n  num.reverse()\n  last_occr = num.index(max_beg)\n  last_occr = N-1-last_occr\n  \n  if last_occr-first_occr >= midway:\n   print(0)\n  else:\n   if first_occr==last_occr:\n    first_occr=midway\n    print(N-1-first_occr)\n   else:\n    gap = last_occr-first_occr\n    first_occr=midway\n    last_occr=first_occr+gap\n    print(N-1-last_occr)\n  T-=1\n\nexcept EOFError as e:\n print(\"\")", "try:\n T = int(input())\n while T>0:\n  N = int(input())\n  midway = (N//2) - 1\n  num = list(map(int, input().split()[:N]))\n  max_beg = max(num)\n  first_occr = num.index(max_beg)\n  num.reverse()\n  last_occr = num.index(max_beg)\n  last_occr = N-1-last_occr\n  \n  if last_occr-first_occr >= midway:\n   print(0)\n  else:\n   if first_occr==last_occr:\n    first_occr=midway\n    print(N-1-first_occr)\n   else:\n    gap = last_occr-first_occr\n    first_occr=midway\n    last_occr=first_occr+gap\n    print(N-1-last_occr)\n  T-=1\n\nexcept EOFError as e:\n print(\"\")", "for _ in range(int(input())):\n n = int(input())\n w = (*map(int, input().split()),)\n m = 0\n for i in range(n):\n  if w[i] > w[m]: m = i\n count = 0\n gap = 0\n for i in range(m+1, m+n+1):\n  if w[i%n] == w[m]:\n   count += max(0,gap-n//2+1)\n   gap = 0\n  else: gap += 1\n print(count)", "for _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n u=[]\n k=0\n t=max(l)\n for i in range(n):\n  if l[i]==t:\n   break\n y=i+1\n while y!=i:\n  if l[y] !=t:\n   k+=1\n  else:\n   u.append(k)\n   k=0\n  y=(y+1)%n\n if k!=0:\n  u.append(k)\n s=0\n for i in range(len(u)):\n  s+=max(0,u[i]-n//2+1)\n print(s)", "for _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n u=[]\n k=0\n t=max(l)\n for i in range(n):\n  if l[i]==t:\n   break\n y=i+1\n while y!=i:\n  if l[y] !=t:\n   k+=1\n  else:\n   u.append(k)\n   k=0\n  y=(y+1)%n\n if k!=0:\n  u.append(k)\n s=0\n for i in range(len(u)):\n  s+=max(0,u[i]-n//2+1)\n print(s)", "for _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n u=[]\n k=0\n t=max(l)\n for i in range(n):\n  if l[i]==t:\n   break\n y=i+1\n while y!=i:\n  if l[y] !=t:\n   k+=1\n  else:\n   u.append(k)\n   k=0\n  y=(y+1)%n\n if k!=0:\n  u.append(k)\n s=0\n for i in range(len(u)):\n  s+=max(0,u[i]-n//2+1)\n print(s)", "for _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n u=[]\n k=0\n t=max(l)\n for i in range(n):\n  if l[i]==t:\n   break\n y=i+1\n while y!=i:\n  if l[y] !=t:\n   k+=1\n  else:\n   u.append(k)\n   k=0\n  y=(y+1)%n\n if k!=0:\n  u.append(k)\n s=0\n for i in range(len(u)):\n  s+=max(0,u[i]-n//2+1)\n print(s)\n", "t = int(input())\nwhile t>0:\n t -= 1\n n = int(input())\n a = [int(x) for x in input().split()]\n m = max(a)\n ind = []\n for i in range(n):\n  if a[i] == m:\n   ind.append(i)\n if len(ind) == 1:\n  print(n//2)\n  continue\n f = ind[0]\n l = ind[-1]\n width = l-f+1\n if width > n//2:\n  print(0)\n else:\n  print(n//2-width+1)\n# cook your dish here\n", "t = int(input())\nwhile t>0:\n t -= 1\n n = int(input())\n a = [int(x) for x in input().split()]\n m = max(a)\n ind = []\n for i in range(n):\n  if a[i] == m:\n   ind.append(i)\n if len(ind) == 1:\n  print(n//2)\n  continue\n f = ind[0]\n l = ind[-1]\n width = l-f+1\n if width > n//2:\n  print(0)\n else:\n  print(n//2-width+1)\n\n\n\n\n\n\n\n\n", "test = int(input())\nfor _ in range(test):\n n=int(input())\n array = list(map(int, input().split()))\n maxi = max(array)\n index=[]\n for i in range(n):\n  if array[i]==maxi:\n   index.append(i)\n   \n if len(index)==1:\n  print(n//2)\n else:\n  if index[len(index)-1]-index[0]>=n//2:\n   print(0)\n  else:\n   print(n//2 - (index[len(index)-1]-index[0]))", "t = int(input())\n#for each test cases\nfor i in range(t):\n n=int(input())\n s=list(map(int,input().split()))\n m=max(s)\n c=[]\n for i in range(n):\n  if(s[i]==m):\n   c.append(i)\n if (len(c)==1):\n  print(n//2)\n else:\n  if (c[-1]-c[0]+1>n//2):\n   print(0)\n  else:\n   x=c[-1]-c[0]\n   print(n//2-x)", "for _ in range(int(input())):\n N = int(input())\n seq = list(map(int,input().split()))\n maxx = max(seq)\n count = 0\n seq = seq+seq\n max_cont = 0\n for i in range(2*N):\n  if seq[i] != maxx:\n   count +=1\n  else:\n   if count > max_cont:\n    max_cont = count\n   count = 0\n if count > max_cont:\n  max_cont = count\n print(max(max_cont-N//2+1,0))", "from collections import defaultdict\ntest=int(input())\nfor _ in range(test):\n r=int(input())\n s=list(map(int,input().split()))\n m=max(s)\n l=int(r/2)\n step=0\n index=[]\n for i in range(len(s)):\n  if s[i]==m:\n    index.append(i)\n if len(index)==1:\n  print(l)\n else:\n  diff=index[-1]-index[0]\n  if diff+1 > l:\n   print(0)\n  else:\n   print(l-diff)", "class node:\n def __init__(self, size, elements):\n  self.size = size\n  self.elements = elements\n\n\ndef solve(ele, s):\n m = max(ele)\n i, j = 0, 0\n flag = True\n for k in range(s):\n  if ele[k] == m:\n   j = k\n   if flag:\n    flag = False\n    i = k\n if i == j:\n  return s//2\n elif (j-i) >= s//2:\n  return 0\n else:\n  i, j = s//2, j + s//2 - i\n  return s-j\n\n\ndef __starting_point():\n t = int(input())\n inputs = []\n for i in range(t):\n  inputs.append(node(int(input()), list(map(int, input().split()))))\n for i in inputs:\n  print(solve(i.elements, i.size))\n\n__starting_point()"]