["try:\n    def countsubsetsum(S,arr,n):\n        k=[[0 for i in range(S+1)] for i in range(n+1)]\n        for i in range(n+1):\n            for j in range(S+1):\n                if(j==0):\n                    k[i][j]=1\n                elif(i==0):\n                    k[i][j]=0\n                elif(arr[i-1]<=j):\n                    k[i][j]=k[i-1][j-arr[i-1]]+k[i-1][j]\n                else:\n                    k[i][j]=k[i-1][j]\n        return k[n][S]\n    for _ in range(int(input())):\n        m=int(input())\n        S=int(input())  \n        arr=[int(i) for i in input().split()]\n      \n        n=len(arr)\n\n        print(countsubsetsum(S, arr,  n))\nexcept EOFError as e:\n    pass", "# cook your dish here\ntry:\n    def countsubsetsum(S,arr,n):\n        k=[[0 for i in range(S+1)] for i in range(n+1)]\n        for i in range(n+1):\n            for j in range(S+1):\n                if(j==0):\n                    k[i][j]=1\n                elif(i==0):\n                    k[i][j]=0\n                elif(arr[i-1]<=j):\n                    k[i][j]=k[i-1][j-arr[i-1]]+k[i-1][j]\n                else:\n                    k[i][j]=k[i-1][j]\n        return k[n][S]\n    for _ in range(int(input())):\n        m=int(input())\n        S=int(input())  \n        arr=[int(i) for i in input().split()]\n      \n        n=len(arr)\n\n        print(countsubsetsum(S, arr,  n))\nexcept EOFError as e:\n    pass", "class Solution:\n    def solve(self, A, target):\n        A.sort()\n        self.count = 0\n        self.count_sixlets(A, 0, target)\n        return self.count\n        \n    def count_sixlets(self, A, _sum, target):\n        if _sum==target:\n            self.count += 1\n            return\n        \n        for i in range(0, len(A)):\n            if _sum+A[i]>target:\n                break\n            self.count_sixlets(A[i+1:], _sum+A[i], target)\n\n\nt = int(input())\nobj = Solution()\nwhile t>0:\n    n = int(input())\n    _sum = int(input())\n    _list = list(map(int, input().split()))\n    obj.solve(_list, _sum)\n    print(obj.count)\n    t -= 1", "# cook your dish here\r\ndef countsubsetsum(S,arr,n):\r\n    k=[[0 for i in range(S+1)] for i in range(n+1)]\r\n    for i in range(n+1):\r\n        for j in range(S+1):\r\n            if(j==0):\r\n                k[i][j]=1\r\n            elif(i==0):\r\n                k[i][j]=0\r\n            elif(arr[i-1]<=j):\r\n                k[i][j]=k[i-1][j-arr[i-1]]+k[i-1][j]\r\n            else:\r\n                k[i][j]=k[i-1][j]\r\n    return k[n][S]\r\nfor _ in range(int(input())):\r\n    m=int(input())\r\n    S=int(input())\r\n    arr=[int(i) for i in input().split()]\r\n    n=len(arr)\r\n    print(countsubsetsum(S, arr,  n))", "# cook your dish here\ndef countsubsetsum(S,arr,n):\n    k=[[0 for i in range(S+1)] for i in range(n+1)]\n    for i in range(n+1):\n        for j in range(S+1):\n            if(j==0):\n                k[i][j]=1\n            elif(i==0):\n                k[i][j]=0\n            elif(arr[i-1]<=j):\n                k[i][j]=k[i-1][j-arr[i-1]]+k[i-1][j]\n            else:\n                k[i][j]=k[i-1][j]\n    return k[n][S]\nfor _ in range(int(input())):\n    m=int(input())\n    S=int(input())\n    arr=[int(i) for i in input().split()]\n    n=len(arr)\n    print(countsubsetsum(S, arr,  n))", "# cook your dish here\ndef countsubsetsum(S,arr,n):\n    k=[[0 for i in range(S+1)] for i in range(n+1)]\n    for i in range(n+1):\n        for j in range(S+1):\n            if(j==0):\n                k[i][j]=1\n            elif(i==0):\n                k[i][j]=0\n            elif(arr[i-1]<=j):\n                k[i][j]=k[i-1][j-arr[i-1]]+k[i-1][j]\n            else:\n                k[i][j]=k[i-1][j]\n    return k[n][S]\nfor _ in range(int(input())):\n    m=int(input())\n    S=int(input())\n    arr=[int(i) for i in input().split()]\n    n=len(arr)\n    print(countsubsetsum(S, arr,  n))", "def solve(l,i,n,m):\n\t# print(i,m)\n\tif(m == 0):\n\t\treturn 1\n\telif(i >= n):\n\t\treturn 0\n\telif(m < 0):\n\t\treturn 0\n\telse:\n\t\treturn solve(l,i+1,n,m-l[i]) + solve(l,i+1,n,m)\n\nT = int(input())\nfor _ in range(T):\n\tN = int(input())\n\tM = int(input())\n\tl = list(map(int, input().split()))\n\tprint(solve(l,0,len(l),M))\n", "# cook your dish here\ndef subset_sum(numbers, target, partial=[]):\n    count=0\n    s = sum(partial)\n\n    # check if the partial sum is equals to target\n    if s == target: \n        count+=1\n        return 1\n    if s >= target:\n        return 0# if we reach the number why bother to continue\n\n    for i in range(len(numbers)):\n        n = numbers[i]\n        remaining = numbers[i+1:]\n        count+=subset_sum(remaining, target, partial + [n]) \n    return count\n\nt=int(input())\nfor i in range(t):\n    input()\n    n=int(input())\n    s=list(map(int,input().split()))\n    print(subset_sum(s,n))\n\n", "# cook your dish here\ntry:\n    def um(a,r,x):\n        z=[[0 for i in range(a+1)] for i in range(x+1)]\n        for i in range(x+1):\n            for j in range(a+1):\n                if(j==0):\n                    z[i][j]=1\n                elif(i==0):\n                    z[i][j]=0\n                elif(r[i-1]<=j):\n                    z[i][j]=z[i-1][j-r[i-1]]+z[i-1][j]\n                else:\n                    z[i][j]=z[i-1][j]\n        return z[x][a]\n    for _ in range(int(input())):\n        b=int(input())\n        a=int(input())  \n        r=[int(i) for i in input().split()]\n      \n        x=len(r)\n\n        print(um(a,r,x))\nexcept EOFError as y:\n    pass", "# cook your dish here\ntry:\n    def countsubsetsum(S,arr,n):\n        k=[[0 for i in range(S+1)] for i in range(n+1)]\n        for i in range(n+1):\n            for j in range(S+1):\n                if(j==0):\n                    k[i][j]=1\n                elif(i==0):\n                    k[i][j]=0\n                elif(arr[i-1]<=j):\n                    k[i][j]=k[i-1][j-arr[i-1]]+k[i-1][j]\n                else:\n                    k[i][j]=k[i-1][j]\n        return k[n][S]\n    for _ in range(int(input())):\n        m=int(input())\n        S=int(input())  \n        arr=[int(i) for i in input().split()]\n      \n        n=len(arr)\n\n        print(countsubsetsum(S, arr,  n))\nexcept EOFError as e:\n    pass", "try:\r\n    def countsubsetsum(S,arr,n):\r\n        k=[[0 for i in range(S+1)] for i in range(n+1)]\r\n        for i in range(n+1):\r\n            for j in range(S+1):\r\n                if(j==0):\r\n                    k[i][j]=1\r\n                elif(i==0):\r\n                    k[i][j]=0\r\n                elif(arr[i-1]<=j):\r\n                    k[i][j]=k[i-1][j-arr[i-1]]+k[i-1][j]\r\n                else:\r\n                    k[i][j]=k[i-1][j]\r\n        return k[n][S]\r\n    for _ in range(int(input())):\r\n        m=int(input())\r\n        S=int(input())  \r\n        arr=[int(i) for i in input().split()]\r\n      \r\n        n=len(arr)\r\n\r\n        print(countsubsetsum(S, arr,  n))\r\nexcept EOFError as e:\r\n    pass", "try:\r\n    def help(a,s): \r\n          \r\n            dp = [[0 for i in range(len(a))] for j in range(0,s+1)] \r\n            for i in range(len(a)): \r\n                dp[0][i] = 1\r\n            for i in range(1,s+1): \r\n                if i == a[0]: \r\n                    dp[i][0] = 1\r\n            for i in range(1, s+1): \r\n                for j in range(1, len(a)): \r\n                    if a[j]<=i: \r\n                            dp[i][j] = dp[i][j-1] + dp[i-a[j]][j-1] \r\n                    else: \r\n                            dp[i][j] = dp[i][j-1] \r\n            return dp[s][len(a)-1]\r\n        \r\n    test = int(input())\r\n    for i in range(test):\r\n        no1 = int(input())\r\n\r\n        s = int(input())\r\n\r\n        a = []\r\n\r\n        a = [int(x) for x in input().split()]\r\n\r\n        print(help(a,s)) \r\nexcept EOFError:\r\n    pass\r\n\r\n\r\n", "def isSubsetSum(set,n, sum) : \r\n    if (sum == 0) : \r\n        return 1\r\n    if (n == 0 and sum != 0) : \r\n        return 0\r\n    if (set[n - 1] > sum) : \r\n        return isSubsetSum(set, n - 1, sum) \r\n    return isSubsetSum(set, n-1, sum) + isSubsetSum(set, n-1, sum-set[n-1]) \r\n\r\ndef __starting_point():\r\n    t=int(input())\r\n    while(t>0):\r\n        n = int(input())\r\n        m = int(input())\r\n        arr = list(map(int,input().split()))\r\n        print(isSubsetSum(arr,n,m))\r\n        t-=1\n__starting_point()", "def isSubsetSum(set,n, sum) : \r\n    if (sum == 0) : \r\n        return 1\r\n    if (n == 0 and sum != 0) : \r\n        return 0\r\n    if (set[n - 1] > sum) : \r\n        return isSubsetSum(set, n - 1, sum) \r\n    return isSubsetSum(set, n-1, sum) + isSubsetSum(set, n-1, sum-set[n-1]) \r\n\r\ndef __starting_point():\r\n    t=int(input())\r\n    while(t>0):\r\n        n = int(input())\r\n        m = int(input())\r\n        arr = list(map(int,input().split()))\r\n        print(isSubsetSum(arr,n,m))\r\n        t-=1\n__starting_point()", "def help(a,s): \n      \n        dp = [[0 for i in range(len(a))] for j in range(0,s+1)] \n        for i in range(len(a)): \n            dp[0][i] = 1\n        for i in range(1,s+1): \n            if i == a[0]: \n                dp[i][0] = 1\n        for i in range(1, s+1): \n            for j in range(1, len(a)): \n                if a[j]<=i: \n                        dp[i][j] = dp[i][j-1] + dp[i-a[j]][j-1] \n                else: \n                        dp[i][j] = dp[i][j-1] \n        return dp[s][len(a)-1] \n# cook your dish here\nfor _ in range ( int(input())):\n    n=int(input())\n    s=int(input())\n    a=list(map(int,input().split()))\n    print(help(a,s))"]