["import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9+7\nS = readline().strip().split('1')\nif len(S) == 1:\n    print(len(S[0]))\nelse:\n    S = [len(s)+1 for s in S]\n    ans = S[0]*S[-1]\n    S = S[1:-1]\n    \n    dp = [0]*(max(S)+2)\n    dp[0] = 1\n    for ai in S:\n        res = 0\n        rz = 0\n        for i in range(ai+1):\n            res = (res + dp[i])%MOD\n            rz = (rz + (ai-i)*dp[i])%MOD\n            dp[i] = 0\n        dp[0] = rz\n        dp[ai] = res\n    aaa = 0\n    for d in dp:\n        aaa = (aaa+d)%MOD\n    print(aaa*ans%MOD)\n", "from itertools import groupby\n\ns=input()\nn=len(s)\ns=[s[i] for i in range(n)]\nmod=10**9+7\n\ndata=groupby(s)\ndata=[(key,len(list(group))) for key,group in data]\nStart=1\nEnd=1\nif data[0][0]==\"0\":\n    Start+=data[0][1]\n    data=data[1:]\nif not data:\n    print(Start-1)\n    return\n\nif data[-1][0]==\"0\":\n    End+=data[-1][1]\n    data.pop()\n\ncomp=[0]*len(data)\nfor i in range(len(data)):\n    comp[i]=data[i][1]\n\nn=len(comp)\nif n==1:\n    print(comp[0]*Start*End)\n    return\n\nodd=[comp[i] for i in range(n) if i%2==1]\nN=len(odd)\nN0 = 2**(N-1).bit_length()\ndata = [None]*(2*N0)\nINF = (-1, 0)\n# \u533a\u9593[l, r+1)\u306e\u5024\u3092v\u306b\u66f8\u304d\u63db\u3048\u308b\n# v\u306f(t, value)\u3068\u3044\u3046\u5024\u306b\u3059\u308b (\u65b0\u3057\u3044\u5024\u307b\u3069t\u306f\u5927\u304d\u304f\u306a\u308b)\ndef update(l, r, v):\n    L = l + N0; R = r + N0\n    while L < R:\n        if R & 1:\n            R -= 1\n            data[R-1] = v\n\n        if L & 1:\n            data[L-1] = v\n            L += 1\n        L >>= 1; R >>= 1\n# a_i\u306e\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\ndef _query(k):\n    k += N0-1\n    s = INF\n    while k >= 0:\n        if data[k]:\n            s = max(s, data[k])\n        k = (k - 1) // 2\n    return s\n# \u3053\u308c\u3092\u547c\u3073\u51fa\u3059\ndef query(k):\n    return _query(k)[1]\n\nID=[-1]*n\nfor i in range(N):\n    start=0\n    end=N\n    while end-start>1:\n        test=(end+start)//2\n        if query(test)>=odd[i]:\n            start=test\n        else:\n            end=test\n    #print(i,start,odd[i])\n    if start!=0:\n        ID[2*i+1]=start\n        update(start+1,i+1,(i,odd[i]))\n    else:\n        if query(0)>=odd[i]:\n            ID[2*i+1]=start\n            update(start+1,i+1,(i,odd[i]))\n        else:\n            ID[2*i+1]=-1\n            update(0,i+1,(i,odd[i]))\n\n\n\ndp=[0]*n\ndp[0]=comp[0]\npre=[0]*n\nfor i in range(2,n,2):\n    id=ID[i-1]\n    if id==-1:\n        res=comp[i-1]*dp[i-2]\n        pre[i-1]=res\n        #prel[i-1]=1\n    else:\n        j=2*id+1\n        #res=(comp[i-1]*dp[i-2]+(comp[j]-comp[i-1])*premono[j])%mod\n        res=(comp[i-1]*dp[i-2]+pre[j]-comp[i-1]*dp[j-1])%mod\n        pre[i-1]=res\n        #prel[i-1]=prel[j]+1\n    dp[i]=(comp[i]*res+dp[i-2]+comp[i])%mod\n#print(pre)\n#print(dp)\nprint((dp[-1]*Start*End)%mod)\n", "import sys\nreadline = sys.stdin.readline\n\nMOD = 10**9+7\nS = readline().strip().split('1')\nif len(S) == 1:\n    print(len(S[0]))\nelse:\n    S = [len(s)+1 for s in S]\n    ans = S[0]*S[-1]\n    S = S[1:-1]\n    \n    dp = [0]*(max(S)+2)\n    dp[0] = 1\n    for ai in S:\n        res = 0\n        rz = 0\n        for i in range(ai+1):\n            res = (res + dp[i])%MOD\n            rz = (rz + (ai-i)*dp[i])%MOD\n            dp[i] = 0\n        dp[0] = rz\n        dp[ai] = res\n    aaa = 0\n    for d in dp:\n        aaa = (aaa+d)%MOD\n    print(aaa*ans%MOD)\n", "import sys\nreadline = sys.stdin.readline\nMOD = 10**9+7;S = readline().strip().split('1')\nif len(S) == 1:print(len(S[0]))\nelse:\n    S = [len(s)+1 for s in S];ans = S[0]*S[-1];S = S[1:-1];dp = [0]*(max(S)+2);dp[0] = 1\n    for ai in S:\n        res = 0;rz = 0\n        for i in range(ai+1):res = (res + dp[i])%MOD;rz = (rz + (ai-i)*dp[i])%MOD;dp[i] = 0\n        dp[0] = rz;dp[ai] = res\n    aaa = 0\n    for d in dp:aaa = (aaa+d)%MOD\n    print(aaa*ans%MOD)        ", "from itertools import groupby\n\ns=input()\nn=len(s)\ns=[s[i] for i in range(n)]\nmod=10**9+7\n\ndata=groupby(s)\ndata=[(key,len(list(group))) for key,group in data]\nStart=1\nEnd=1\nif data[0][0]==\"0\":\n    Start+=data[0][1]\n    data=data[1:]\nif not data:\n    print(Start-1)\n    return\n\nif data[-1][0]==\"0\":\n    End+=data[-1][1]\n    data.pop()\n\ncomp=[0]*len(data)\nfor i in range(len(data)):\n    comp[i]=data[i][1]\n\nn=len(comp)\nif n==1:\n    print(comp[0]*Start*End)\n    return\n\nodd=[(comp[i],i//2) for i in range(n) if i%2==1]\n#print(odd)\nN=len(odd)\nID=[-1]*n\nstack=[]\nfor i in range(N):\n    while stack and stack[-1][0]<odd[i][0]:\n        stack.pop()\n    if stack:\n        ID[2*i+1]=stack[-1][1]\n    stack.append(odd[i])\n\n#print(ID[1::2])\ndp=[0]*n\ndp[0]=comp[0]\npre=[0]*n\nfor i in range(2,n,2):\n    id=ID[i-1]\n    if id==-1:\n        res=comp[i-1]*dp[i-2]\n        pre[i-1]=res\n        #prel[i-1]=1\n    else:\n        j=2*id+1\n        #res=(comp[i-1]*dp[i-2]+(comp[j]-comp[i-1])*premono[j])%mod\n        res=(comp[i-1]*dp[i-2]+pre[j]-comp[i-1]*dp[j-1])%mod\n        pre[i-1]=res\n        #prel[i-1]=prel[j]+1\n    dp[i]=(comp[i]*res+dp[i-2]+comp[i])%mod\n#print(pre)\n#print(dp)\nprint((dp[-1]*Start*End)%mod)\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tMOD = int(1e9+7)\n\twas = set()\n\ts = list(map(int, minp()))\n\tn = len(s)\n\n\tfirst, last = None, None\n\n\tfor i in range(n):\n\t\tv = s[i]\n\t\tif v == 1:\n\t\t\tfirst = i\n\t\t\tbreak\n\tif first is None:\n\t\tprint(n)\n\t\treturn\n\n\tdp = [0]*n\n\tdp[first] = 1\n\tst = []\n\tstv = []\n\tr = 0\n\ti = first\n\twhile i < n:\n\t\tj = i + 1\n\t\twhile j < n and s[j] == 0:\n\t\t\tj += 1\n\t\tr = (r + dp[i]) % MOD\n\t\tif j == n:\n\t\t\tlast = i\n\t\t\tbreak\n\t\tc = j - i - 1\n\t\tadd = 0\n\t\tst.append(0)\n\t\tstv.append(dp[i])\n\t\twhile len(st) > 0 and st[-1] <= c:\n\t\t\tv = st.pop()\n\t\t\td = stv.pop()\n\t\t\tdp[j] = (dp[j] + d*(c - v + 1)) % MOD\n\t\t\tadd += d\n\t\tif len(st) > 0 and st[-1] == c + 1:\n\t\t\tstv[-1] = (stv[-1] + add) % MOD\n\t\telse:\n\t\t\tst.append(c + 1)\n\t\t\tstv.append(add)\n\t\ti = j\n\tprint((r * (first+1) * (n-last)) % MOD)\n\nsolve()\n", "import sys\n\nMOD = 1000000007\n\n\ndef red(x):\n    return x if x < MOD else x - MOD\n\n\nS = input()\nn = len(S)\n\ni = 0\nwhile i < n and S[i] == '0':\n    i += 1\nif i == n:\n    print (n)\n    return\nj = n\nwhile j and S[j - 1] == '0':\n    j -= 1\n\nfac = (i + 1) * (n - j + 1)\nS = S[i:j]\nn = len(S)\n\ncount0 = [+(c == '0') for c in S]\nfor i in reversed(range(n - 1)):\n    if count0[i]:\n        count0[i] += count0[i + 1]\n\nways0 = 1\nways1 = 0\n\nbuckets = [0] * (n + 1)\nbuckets[0] = 1\nfor i in reversed(range(n)):\n    if count0[i]:\n        c = count0[i]\n        ways0 = red(ways0 - buckets[c] + MOD)\n\n        buckets[c] = ways1\n        ways0 = red(ways0 + ways1)\n    else:\n        ways1 = red(ways1 + ways0)\nprint (ways1 * fac % MOD)", "MOD = 1000000007\ndef main():\n    s = input()\n    n = len(s)\n    zero = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            zero[i] = zero[i-1] + 1 if i else 1\n    nxt, dp = [0] * (n+2), [0] * (n+2)\n    for i in range(n+1):\n        nxt[i] = n\n    for i in range(n-1, -1, -1):\n        dp[i] = ((zero[i] <= zero[n-1]) + dp[nxt[0]] + dp[nxt[zero[i] + 1]]) % MOD\n        nxt[zero[i]] = i\n    ans = n if nxt[0] >= n else dp[nxt[0]] * (nxt[0] + 1) % MOD\n    print(ans)\n\nmain()"]