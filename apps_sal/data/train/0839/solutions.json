["def isSubsetSum(arr, n, sum): \n    subset = [ [False for j in range(sum + 1)] for i in range(3) ]    \n    for i in range(n + 1): \n        for j in range(sum + 1): \n            if (j == 0):subset[i % 2][j] = True\n            elif (i == 0):subset[i % 2][j] = False\n            elif (arr[i - 1] <= j):subset[i % 2][j] = subset[(i + 1) % 2][j - arr[i - 1]] or subset[(i + 1)% 2][j] \n            else:subset[i % 2][j] = subset[(i + 1) % 2][j]                   \n    return subset[n % 2][sum]  \nfor _ in range(int(input())):\n    k,n,a = int(input()),int(input()),list(map(int,input().split()))\n    if sum(a) < k or k < min(a):print(0);continue\n    print(1) if isSubsetSum(a, n, k) else print(0)", "def isSubsetSum(arr, n, sum): \n     \n    # The value of subset[i%2][j] will be true  \n    # if there exists a subset of sum j in  \n    # arr[0, 1, ...., i-1] \n    subset = [ [False for j in range(sum + 1)] for i in range(3) ] \n   \n    for i in range(n + 1): \n        for j in range(sum + 1): \n            # A subset with sum 0 is always possible  \n            if (j == 0): \n                subset[i % 2][j] = True\n   \n            # If there exists no element no sum  \n            # is possible  \n            elif (i == 0): \n                subset[i % 2][j] = False\n            elif (arr[i - 1] <= j): \n                subset[i % 2][j] = subset[(i + 1) % 2][j - arr[i - 1]] or subset[(i + 1)  \n                                                                               % 2][j] \n            else: \n                subset[i % 2][j] = subset[(i + 1) % 2][j] \n                  \n    return subset[n % 2][sum]  \n\t\t\n# Driver program to test above function \nfor _ in range(int(input())):\n    k = int(input())\n    n = int(input())\n    a = list(map(int,input().split()))\n    if sum(a) < k or k < min(a):\n        print(0)\n        continue\n    if (isSubsetSum(a, n, k) == True): \n\t    print(1) \n    else: \n\t    print(0)", "def isSubsetSum(set, n, sum):\r\n    # The value of subset[i][j] will be\r\n    # true if there is a \r\n    # subset of set[0..j-1] with sum equal to i \r\n    subset = ([[False for i in range(sum + 1)]\r\n               for i in range(n + 1)])\r\n\r\n    # If sum is 0, then answer is true  \r\n    for i in range(n + 1):\r\n        subset[i][0] = True\r\n\r\n    # If sum is not 0 and set is empty,  \r\n    # then answer is false  \r\n    for i in range(1, sum + 1):\r\n        subset[0][i] = False\r\n\r\n    # Fill the subset table in botton up manner \r\n    for i in range(1, n + 1):\r\n        for j in range(1, sum + 1):\r\n            if j < set[i - 1]:\r\n                subset[i][j] = subset[i - 1][j]\r\n            if j >= set[i - 1]:\r\n                subset[i][j] = (subset[i - 1][j] or\r\n                                subset[i - 1][j - set[i - 1]])\r\n\r\n                # uncomment this code to print table\r\n    # for i in range(n + 1): \r\n    # for j in range(sum + 1): \r\n    # print(subset[i][j], end =\" \") \r\n    # print() \r\n    return subset[n][sum]\r\n\r\nfor _ in range(int(input())):\r\n    K = int(input())\r\n    N = int(input())\r\n    array = list(map(int, input().split()))\r\n    if K > sum(array):\r\n        print(0)\r\n    elif isSubsetSum(array, N , K):\r\n        print(1)\r\n    else:\r\n        print(0)"]