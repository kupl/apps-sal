["'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\nt=int(input())\nfor _ in range(t):\n n=int(input())\n a=[int(x) for x in input().split()]\n ans=0\n dp=[-1 for i in range(0,n+1)]\n for i in a:\n  var1=dp[i]\n  var2=ans\n  ans=max(ans,var1+1)\n  dp[i]=max(dp[i],var2+1)\n print(n-ans)", "t = int(input())\nfor _ in range(t):\n n = int(input())\n l = list(map(int, input().split()))\n dp = [-1] * (n + 1)\n dp[0] = 0\n\n for k in l:\n  even = dp[0]\n  odd = dp[k]\n  dp[k] = max(odd, even + 1)\n  dp[0] = max(even, odd + 1)\n print(n - dp[0])\n", "t = int(input())\nfor _ in range(t):\n n = int(input())\n arr = list(map(int, input().split()))\n dp = [-1]*(n+1)\n dp[0] = 0\n for e in arr:\n  even=dp[0]\n  odd=dp[e]\n  dp[e]=max(odd,even+1)\n  dp[0]=max(even,odd+1)\n print(n-dp[0])\n", "t = int(input())\n\nfor _ in range(t):\n n = int(input())\n l = list(map(int,input().split()))\n \n s = set()\n \n count = 0\n for i in l:\n  if i in s:\n   count += 2\n   s.clear()\n  else:\n   s.add(i)\n \n print(n-count)", "t = int(input())\n\nfor _ in range(t):\n n = int(input())\n l = list(map(int,input().split()))\n \n li = []\n \n count = 0\n for i in l:\n  if i in li:\n   count += 2\n   li = []\n  else:\n   li.append(i)\n \n print(n-count)", "# evens\ndef solve(s):\n seen = set()\n out = 0\n for c in s:\n  if c in seen:\n   out += len(seen)-1\n   seen = set()\n  else:\n   seen.add(c)\n return out + len(seen)\n \nfor tc in range(int(input())):\n input()\n s = [int(x) for x in input().strip().split(' ')]\n print(solve(s))\n \n \n", "for _ in range(int(input())):\n n = int(input())\n l = list(map(int, input().split()))\n isContinuing = set()\n ans=0\n for i in l:\n  lengthOfSet = len(isContinuing)\n  isContinuing.add(i)\n  if(lengthOfSet==len(isContinuing)):\n   ans+=2\n   isContinuing.clear()\n print(n-ans)", "'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\nt=int(input())\nfor _ in range(t):\n n=int(input())\n a=[int(x) for x in input().split()]\n ans=0\n dp=[-1 for i in range(0,n+1)]\n for i in a:\n  var1=dp[i]\n  var2=ans\n  ans=max(ans,var1+1)\n  dp[i]=max(dp[i],var2+1)\n print(n-ans)", "\"\"\"\nCode Chef :: December 2020 Lunchtime :: Even Sequence Problem Code: EVSTR\nhttps://www.codechef.com/LTIME91B/problems/EVSTR\n\"\"\"\nimport sys\nfrom math import inf\n\n\ndef solve(A):\n dp = [-inf for _ in range(len(A)+1)]\n dp[0] = 0\n for i, a in enumerate(A):\n  even = dp[0]\n  odd = dp[a]\n  dp[a] = max(dp[a], even + 1)\n  dp[0] = max(dp[0], odd + 1)\n\n return len(A) - dp[0]\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n test_cases = int(sys.stdin.readline())\n for _ in range(test_cases):\n  N = int(sys.stdin.readline())\n  A = [int(i) for i in sys.stdin.readline().split()]\n  soln = solve(A)\n  print(soln)\n\n\ndef __starting_point():\n main()\n\n__starting_point()", "\"\"\"\nCode Chef :: December 2020 Lunchtime :: Even Sequence Problem Code: EVSTR\nhttps://www.codechef.com/LTIME91B/problems/EVSTR\n\"\"\"\nimport sys\nfrom math import inf\n\n\ndef solve(A):\n prev = 0\n count = 0\n ops = 0\n for i, a in enumerate(A):\n  if a == prev:\n   count += 1\n  else:\n   if count % 2:\n    # I can fix this for on op or delete me for one op.\n    if i + 1 < len(A) and A[i+1] == prev:\n     # If delete me is the same as fixing it, delete me\n     ops += 1\n    else:\n     # Fix it\n     ops += 1\n     count = 1\n     prev = a\n   else:\n    count = 1\n    prev = a\n if count % 2:\n  ops += 1\n\n return ops\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n sys.setrecursionlimit(pow(10, 9))\n test_cases = int(sys.stdin.readline())\n for _ in range(test_cases):\n  N = int(sys.stdin.readline())\n  A = [int(i) for i in sys.stdin.readline().split()]\n  soln = solve(A)\n  print(soln)\n\n\ndef __starting_point():\n main()\n\n__starting_point()", "\"\"\"\nCode Chef :: December 2020 Lunchtime :: Even Sequence Problem Code: EVSTR\nhttps://www.codechef.com/LTIME91B/problems/EVSTR\n\"\"\"\nimport sys\nfrom math import inf\n\n\ndef solve(i, prev, cnt, ops, A, acc):\n # Base Case\n if i >= len(A):\n  if cnt % 2 == 0:\n   return ops\n  else:\n   return inf\n\n if cnt >= acc:\n  return acc\n\n result = acc\n if A[i] == prev:\n  result = min(result, solve(i + 1, prev, cnt + 1, ops, A, result))\n else:\n  if cnt % 2:\n   # If cnt is odd, we can\n   # (1) Fix it and add current.  It will cost on op to fix.\n   result = min(result, solve(i + 1, A[i], 1, ops + 1, A, result))\n   # (2) Not fix it and delete current.\n   result = min(result, solve(i + 1, prev, cnt, ops + 1, A, result))\n  else:\n   # If cnt is even, we can\n   # (1) Delete current\n   result = min(result, solve(i + 1, prev, cnt, ops + 1, A, result))\n   # (2) Add current\n   result = min(result, solve(i + 1, A[i], 1, ops, A, result))\n return result\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n sys.setrecursionlimit(pow(10, 9))\n test_cases = int(sys.stdin.readline())\n for _ in range(test_cases):\n  N = int(sys.stdin.readline())\n  A = [int(i) for i in sys.stdin.readline().split()]\n  soln = solve(0, 0, 0, 0, A, inf)\n  print(soln)\n\n\ndef __starting_point():\n main()\n\n__starting_point()", "import sys\nfrom functools import partial\n\nSAMPLE_IN = 'sample.in'\nSAMPLE_ANS = 'sample.ans'\n\n\ndef read_int(f) -> int:\n return int(f.readline())\n\ndef read_ints(f) -> list:\n return [int(x) for x in f.readline().split()]\n\ndef read_case(f=sys.stdin) -> tuple:\n n = read_int(f)\n nums = read_ints(f)\n return n, nums\n\n\ndef solve(n, nums):\n even = 0\n odd = [-1] * (n+1)\n for x in nums:\n  even, odd[x] = max(even, odd[x] + 1), even + 1\n return n - even\n\n\ndef make_submission(fin=sys.stdin, fout=sys.stdout):\n output = partial(print, file=fout)\n n_cases = int(fin.readline())\n for t in range(1, n_cases + 1):\n  case = read_case(fin)\n  answer = solve(*case)\n  output(answer)\n\n\ndef __starting_point():\n import os\n if os.getenv('GCJ_LOCAL'):\n  with open(SAMPLE_IN) as s:\n   make_submission(s)\n else:\n  make_submission()\n\n__starting_point()", "\"\"\"\nCode Chef :: December 2020 Lunchtime :: Even Sequence Problem Code: EVSTR\nhttps://www.codechef.com/LTIME91B/problems/EVSTR\n\"\"\"\nimport sys\nfrom math import inf\n\n\ndef solve(i, prev, cnt, ops, A):\n # Base Case\n if i >= len(A):\n  if cnt % 2 == 0:\n   return ops\n  else:\n   return inf\n\n result = inf\n if A[i] == prev:\n  result = min(result, solve(i + 1, prev, cnt + 1, ops, A))\n else:\n  if cnt % 2:\n   # If cnt is odd, we can\n   # (1) Fix it and add current.  It will cost on op to fix.\n   result = min(result, solve(i + 1, A[i], 1, ops + 1, A))\n   # (2) Not fix it and delete current.\n   result = min(result, solve(i + 1, prev, cnt, ops + 1, A))\n  else:\n   # If cnt is even, we can\n   # (1) Delete current\n   result = min(result, solve(i + 1, prev, cnt, ops + 1, A))\n   # (2) Add current\n   result = min(result, solve(i + 1, A[i], 1, ops, A))\n return result\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n sys.setrecursionlimit(pow(10, 9))\n test_cases = int(sys.stdin.readline())\n for _ in range(test_cases):\n  N = int(sys.stdin.readline())\n  A = [int(i) for i in sys.stdin.readline().split()]\n  soln = solve(0, 0, 0, 0, A)\n  print(soln)\n\n\ndef __starting_point():\n main()\n\n__starting_point()", "\"\"\"\nCode Chef :: December 2020 Lunchtime :: Even Sequence Problem Code: EVSTR\nhttps://www.codechef.com/LTIME91B/problems/EVSTR\n\"\"\"\nimport sys\nfrom math import inf\n\n\ndef solve(i, prev, cnt, ops, A):\n # Base Case\n if i >= len(A):\n  if cnt % 2 == 0:\n   return ops\n  else:\n   return inf\n\n result = inf\n if A[i] == prev:\n  result = min(result, solve(i + 1, prev, cnt + 1, ops, A))\n else:\n  if cnt % 2:\n   # If cnt is odd, we can\n   # (1) Fix it and add current.  It will cost on op to fix.\n   result = min(result, solve(i + 1, A[i], 1, ops + 1, A))\n   # (2) Not fix it and delete current.\n   result = min(result, solve(i + 1, prev, cnt, ops + 1, A))\n  else:\n   # If cnt is even, we can\n   # (1) Delete current\n   result = min(result, solve(i + 1, prev, cnt, ops + 1, A))\n   # (2) Add current\n   result = min(result, solve(i + 1, A[i], 1, ops, A))\n return result\n\n\ndef main():\n \"\"\"Main program.\"\"\"\n test_cases = int(sys.stdin.readline())\n for _ in range(test_cases):\n  N = int(sys.stdin.readline())\n  A = [int(i) for i in sys.stdin.readline().split()]\n  soln = solve(0, 0, 0, 0, A)\n  print(soln)\n\n\ndef __starting_point():\n main()\n\n__starting_point()", "from collections import defaultdict as dd\nfor t in range(int(input())):\n n = int(input())\n a = list(map(int,input().split()))\n stacks = dd(lambda: -10**9)\n c = temp = 0\n for i in a:\n  temp = c\n  c = max(c,stacks[i]+1)\n  stacks[i] = max(stacks[i], temp+1)\n print(n-c)", "# cook your dish here\nimport sys\nT=int(input())\nfor i in range(T):\n n=int(input())\n seq=list(map(int,input().split(\" \")))\n t=[-sys.maxsize-1 for i in range(n+1)]\n t[0]=0\n for x in seq:\n  even=t[0]\n  odd=t[x]\n  \n  t[x]=max(odd,even+1)\n  t[0]=max(even,odd+1)\n  \n print(n-t[0])\n   \n \n", "# cook your dish here\nimport sys\nT=int(input())\nfor i in range(T):\n n=int(input())\n seq=list(map(int,input().split(\" \")))\n t=[-sys.maxsize-1 for i in range(n)]\n t[0]=0\n for x in seq:\n  even=t[0]\n  odd=t[x]\n  \n  t[x]=max(odd,even+1)\n  t[0]=max(even,odd+1)\n  \n print(n-t[0])\n   \n \n", "# cook your dish here\nimport sys\nT=int(input())\nfor i in range(T):\n n=int(input())\n seq=list(map(int,input().split(\" \")))\n t=[-sys.maxsize-1 for i in range(n)]\n t[0]=0\n for i in seq:\n  x=i\n  even=t[0]\n  odd=t[x]\n  \n  t[x]=max(odd,even+1)\n  t[0]=max(even,odd+1)\n  \n print(n-t[0])\n   \n \n", "# cook your dish here\nimport sys\nT=int(input())\nfor i in range(T):\n n=int(input())\n seq=list(map(int,input().split(\" \")))\n t=[-sys.maxsize-1 for i in range(n)]\n t[0]=0\n even=t[0]\n odd=-sys.maxsize-1\n for i in seq:\n  x=i\n  even=t[0]\n  odd=t[x]\n  \n  t[x]=max(odd,even+1)\n  t[0]=max(even,odd+1)\n  \n print(n-t[0])\n   \n \n", "'''Author- Akshit Monga'''\nfrom sys import stdin, stdout\ninput = stdin.readline\n\ndef f(arr):\n ans = 0\n val = 0\n s = -1\n for i in arr:\n  if i != s:\n   ans += val % 2\n   val = 1\n   s = i\n  else:\n   val += 1\n ans += val % 2\n return ans\nt = int(input())\nfor _ in range(t):\n n=int(input())\n arr=[int(x) for x in input().split()]\n if n>18:\n  print(f(arr))\n  continue\n ans=float('inf')\n for mask in range(0,1<<n):\n  vals=[]\n  c=0\n  for i in range(n):\n   if mask & (1<<i):\n    vals.append(arr[i])\n   else:\n    c+=1\n  ans=min(ans,c+f(vals))\n stdout.write(str(ans)+'\\n')", "import sys\nsys.setrecursionlimit(1000000)\n\ndef LCES(l, prevSel, parity, ind, length):\n if(ind==len(l)):\n  if(parity==0):\n   return length\n  else:\n   return -1\n else:\n  if(parity==0):\n   # if(dp.get(str(parity)+\" \"+str(ind))):\n   #     return dp[str(parity)+\" \"+str(ind)]\n   left = LCES(l, l[ind], 1, ind+1, length+1)\n   right = LCES(l, prevSel, 0, ind+1, length)\n   return max(left, right)\n   # return dp[str(parity)+\" \"+str(ind)]\n  else:\n   if(prevSel!=l[ind]):\n    return LCES(l, prevSel, 1, ind+1, length)\n   else:\n    left = LCES(l, l[ind], 0, ind+1, length+1)\n    return left\nfor _ in range(int(input())):\n n = int(input())\n l = list(map(int, input().split()))\n dp = {}\n left = LCES(l, l[0], 1, 1, 1)\n right = LCES(l, -1, 0, 1, 0)\n print(n-max(left, right))\n", "for _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n l=0\n d=[]\n for i in range(n+1):\n  d.append(-1)\n for i in a:\n  l,d[i]=max(l,d[i]+1),max(d[i],l+1)\n print(n-l)\n     \n"]