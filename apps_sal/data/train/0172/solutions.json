["class Solution:\n    def maxDiff(self, num: int) -> int:\n        if num < 10: return 8\n        a = b = str(num)\n        i = 0\n        while i < len(a):\n            if a[i] == '9':\n                i += 1\n            else:\n                a = a.replace(a[i], '9')\n                break\n\n        if b[0] != '1':\n            b = b.replace(b[0], '1')\n        else:\n            i = 1\n            while i < len(b):\n                if b[i] == '1' or b[i] == '0':\n                    i += 1\n                else:\n                    b = b.replace(b[i], '0')\n                    break\n        #print(a,b)\n        return int(a) - int(b)", "class Solution:\n    def maxDiff(self, num: int) -> int:\n        num = [int(c) for c in str(num)]\n        max_num, min_num = num[:], num[:]\n        \n        for v in num:\n            if v < 9:\n                max_num = [digit if digit != v else 9 for digit in num]\n                break\n                \n        if num[0] != 1:\n            min_num = [digit if digit != num[0] else 1 for digit in num]\n        else:\n            for v in num[1:]:\n                if v > 1:\n                    min_num = [digit if digit != v else 0 for digit in num]\n                    break\n                    \n        print((max_num, min_num))\n        return int(''.join([str(digit) for digit in max_num]))-int(''.join([str(digit) for digit in min_num]))\n        \n", "class Solution:\n    def maxDiff(self, num: int) -> int:\n        replaces = []\n        num = str(num)\n        for i in range(0, 10):\n            for j in range(0, 10):\n                rep_num = num.replace(str(i), str(j))\n                if rep_num[0] != '0':\n                    replaces.append(int(rep_num))\n        return max(replaces) - min(replaces)\n", "class Solution:\n    def maxDiff(self, num: int) -> int:\n        numStr1 = list(str(num))\n        numStr2 = list(str(num))\n        numStrLen = len(numStr1)\n        firstChar = numStr1[0]\n        for i, char in enumerate(numStr1):\n            if char != firstChar and char > '0':\n                for j in range(i, numStrLen):\n                    if numStr1[j] == char:\n                        numStr1[j] = '0'\n                break\n            if char == firstChar and char > '1':\n                for j in range(i, numStrLen):\n                    if numStr1[j] == char:\n                        numStr1[j] = '1'\n                break\n        for i, char in enumerate(numStr2):\n            if char < '9':\n                for j in range(i, numStrLen):\n                    if numStr2[j] == char:\n                        numStr2[j] = '9'\n                break\n        # print(numStr1, numStr2)\n        return int(''.join(numStr2)) - int(''.join(numStr1))", "class Solution:\n    def maxDiff(self, num: int) -> int:\n        return self.findMax(num) - self.findMin(num)\n        \n    def findMax(self, num):\n        s = str(num)\n        org = None\n        new_s = ''\n        for c in s:\n            if c == '9':\n                new_s += c\n                continue\n            if org is None:\n                org = c\n            if c == org:\n                new_s += '9'\n            else:\n                new_s += c\n        return int(new_s)\n    \n    def findMin(self, num):\n        s = str(num)\n        org = None\n        rep = None\n        new_s = ''\n        \n        for i in range(len(s)):\n            if s[i] == '0':\n                new_s += s[i]\n                continue\n            if i == 0:\n                if s[0] == '1':\n                    new_s += s[0]\n                else:\n                    org = s[0]\n                    rep = '1'\n                    new_s += rep\n            else:\n                if org is None and s[i] != '1':\n                    org = s[i]\n                    rep = '0'\n                    new_s += rep\n                elif s[i] == org:\n                    new_s += rep\n                else:\n                    new_s += s[i]\n        \n        return int(new_s)\n", "class Solution:\n    def maxDiff(self, num: int) -> int:\n        s = str(num)\n        \n        a = True\n        i = 0\n        while i<len(s):\n            if a and int(s[i])<9:\n                n = s[i]\n                a = False\n            if not a:\n                if s[i] == n:\n                    s = s[:i]+'9'+s[i+1:]\n            i+=1\n        \n        n1 = int(s)\n        s = str(num)\n        \n        a = True\n        if int(s[0])>1:\n            n = s[0]\n            y = '1'\n            s = y+s[1:]\n            a = False\n        i = 1\n        while i<len(s):\n            if a and int(s[i])>0:\n                if s[i]!=s[0]:\n                    n = s[i]\n                    y = '0'\n                    a = False\n            if not a:\n                if s[i] == n:\n                    s = s[:i]+y+s[i+1:]\n            i+=1\n            \n        n2 = int(s)\n        return n1-n2\n        \n        \n", "class Solution:\n    def maxDiff(self, num: int) -> int:\n        if num<10:\n            return 8\n        \n        numStr=str(num)\n\n        a,b=[],[]\n        for i in range(len(numStr)):\n            a.append(numStr[i])\n            b.append(numStr[i])\n        \n        for i in range(len(a)):\n            temp=a[i]\n\n            if not a[i]=='9':\n                for j in range(len(a)):\n                    if a[j]==temp:\n                        a[j]='9'\n                break\n        \n        for i in range(len(b)):\n            if i==0:\n                temp=b[0]\n                if not b[0]=='1':\n                    for j in range(len(b)):\n                        if b[j]==temp:\n                            b[j]='1'\n                    break\n            else:\n                temp=b[i]\n                if not b[i]=='0' and not b[i]=='1':\n                    for j in range(len(b)):\n                        if b[j]==temp:\n                            b[j]='0'\n\n                    break\n                \n        c,d='',''\n        for i in range(len(numStr)):\n            c,d=c+a[i],d+b[i]\n        \n        return int(c)-int(d)\n        \n        \n        \n", "class Solution:\n    def maxDiff(self, num: int) -> int:\n        \n        maxi = '-inf'\n        mini = 'inf'\n        \n        num = str(num)\n        leading = num[0]\n        \n        for a in set(num):\n            a = str(a)\n            for b in range(10):\n                \n                if (not b) and (a == leading):\n                    continue\n                b = str(b)\n                \n                temp = num.replace(a, b)\n                mini = min(mini, temp)\n                maxi = max(maxi, temp)\n        \n        return int(maxi) - int(mini)", "class Solution:\n    def maxDiff(self, num: int) -> int:\n        a = []\n        s = str(num)\n        for i in range(0, 10):\n            for j in s:\n                n = s.replace(j, str(i))\n                m = int(n)\n                if m != 0 and n[0] != '0':\n                    a.append(m)\n        diff = max(a) - min(a)\n        return diff"]