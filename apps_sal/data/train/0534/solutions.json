["def detect_triangle(adj): \n    for x in range(len(adj)):\n     for y in adj[x]:\n      if not set(adj[x]).isdisjoint(adj[y]):\n       return True\n\n \nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    graph=[[] for i in range(n)]\n    for i in range(m):\n     u,v=list(map(int,input().split()))\n     graph[u-1].append(v-1)\n     graph[v-1].append(u-1)\n    h=[]    \n    for i in range(len(graph)):\n     h.append(len(graph[i]))\n    h1=max(h)    \n    if h1>=3:\n     print(h1)\n     continue\n    if detect_triangle(graph):\n     print(3)\n     continue\n    print(h1)    # cook your dish here\n", "# cook your dish here\ndef detect_triangle(adj): \n    for x in range(len(adj)):\n     for y in adj[x]:\n      if not set(adj[x]).isdisjoint(adj[y]):\n       return True\n\n \nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    graph=[[] for i in range(n)]\n    for i in range(m):\n     u,v=map(int,input().split())\n     graph[u-1].append(v-1)\n     graph[v-1].append(u-1)\n    h=[]    \n    for i in range(len(graph)):\n     h.append(len(graph[i]))\n    h1=max(h)    \n    if h1>=3:\n     print(h1)\n     continue\n    if detect_triangle(graph):\n     print(3)\n     continue\n    print(h1)    ", "# cook your dish here\ndef detect_triangle(adj): \n    for x in range(len(adj)):\n     for y in adj[x]:\n      if not set(adj[x]).isdisjoint(adj[y]):\n       return True\n\n \nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    graph=[[] for i in range(n)]\n    for i in range(m):\n     u,v=map(int,input().split())\n     graph[u-1].append(v-1)\n     graph[v-1].append(u-1)\n    h=[]    \n    for i in range(len(graph)):\n     h.append(len(graph[i]))\n    h1=max(h)    \n    if h1>=3:\n     print(h1)\n     continue\n    if detect_triangle(graph):\n     print(3)\n     continue\n    print(h1)    ", "def detect_triangle(adj): \n    for x in range(len(adj)):\n     for y in adj[x]:\n      if not set(adj[x]).isdisjoint(adj[y]):\n       return True\n\n \nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    graph=[[] for i in range(n)]\n    for i in range(m):\n     u,v=list(map(int,input().split()))\n     graph[u-1].append(v-1)\n     graph[v-1].append(u-1)\n    h=[]    \n    for i in range(len(graph)):\n     h.append(len(graph[i]))\n    h1=max(h)    \n    if h1>=3:\n     print(h1)\n     continue\n    if detect_triangle(graph):\n     print(3)\n     continue\n    print(h1)    \n", "import sys\n#sys.stdin = open(\"i\",\"r\")\n\nfor _ in range( int(input()) ):\n\n    n, m = list(map(int,  input().split()))\n    adj = [ [] for _ in range(n+1) ]\n\n    for _ in range(m):\n     src, dest = list(map(int,  input().split()))\n     adj[src].append(dest)\n     adj[dest].append(src)\n\n    print(( max( max( [len(a) for a in adj] ) , 3    \\\n  if any( not set(adj[x]).isdisjoint(adj[y])     \\\n  for x in range(len(adj)) for y in adj[x] )     \\\n  else max( [len(a) for a in adj] ) ) ))\n"]