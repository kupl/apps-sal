["import sys\ninput = sys.stdin.readline\n\ndef solve(ax,ay,bx,by,cx,cy):\n    x = ax+bx+cx\n    y = ay+by+cy\n    x -= x//3+1\n    y -= y//3+1\n    if x==y:\n        return x if 0 <= x <= 1 else abs(x)+1\n    else:\n        return max(abs(x), abs(y))\n\nT = int(input())\nfor _ in range(T):\n    ax,ay,bx,by,cx,cy = map(int,input().split())\n    print(solve(ax,ay,bx,by,cx,cy))", "\nfor _ in range(int(input())):\n  Z = list(map(int, input().split()))\n  X = sum(Z[::2])\n  Y = sum(Z[1::2])\n  \n  if sum(Z[:4]) % 2 == 0:\n    X += Z[4]\n    Y += Z[5]\n    \n  elif sum(Z[2:]) % 2 == 0:\n    X += Z[0]\n    Y += Z[1]\n    \n  else:\n    X += Z[2]\n    Y += Z[3]\n  \n  if X != Y:\n    print((max(abs((X - 1) // 2), abs((Y - 1) // 2))))\n    \n  else:\n    \n    if X == 1 and Y == 1:\n      print((0))\n      \n    elif X == 3 and Y == 3:\n      print((1))\n      \n    else:\n      print((max(abs((X - 1) // 2), abs((Y - 1) // 2)) + 1))\n    \n", "T, *I = map(int, open(0).read().split())\n\nfor ax, ay, bx, by, cx, cy in zip(*[iter(I)] * 6):\n    x = ax + bx + cx\n    y = ay + by + cy\n    dx = abs(x - x // 3 - 1)\n    dy = abs(y - y // 3 - 1)\n\n    print(max(dx, dy) + (x == y and x // 3 != 0))", "T = int(input())\n\ndef calc(ax,ay,bx,by,cx,cy):\n    GL = min(ax,bx,cx)\n    GU = min(ay,by,cy)\n    #X\u8ef8\u5408\u308f\u305b\u3092\u512a\u5148\n    xcnt = {}\n    for x in (ax,bx,cx):\n        xcnt[x] = xcnt.get(x,0)+1\n    ycnt = {}\n    for y in (ay,by,cy):\n        ycnt[y] = ycnt.get(y,0)+1\n\n    if GL==0 and GU==0:\n        if xcnt[0]==2 and ycnt[0]==2:\n            ret = 0\n        else:\n            ret = 1\n    else:\n        #\u59ff\u52e2\u3092\u8abf\u6574\n        ret = int(GL>0)\n        #\u659c\u3081\u306b\u52d5\u304f\n        ret += min(abs(GL),abs(GU))*2\n        if abs(GU)>abs(GL):\n            ret += 1\n        ret += max(0,abs(abs(GU)-abs(GL))*2-1)\n        #\u59ff\u52e2\u3092\u8abf\u6574\n        if abs(GU)>=abs(GL):\n            #\u6700\u5f8c\u306b\u4e0a\u4e0b\u306b\u52d5\u3044\u305f\n            if GU>0:\n                #\u6700\u5f8c\u306b\u4e0b\u306b\u52d5\u3044\u305f\n                if ycnt[GU] == 1:\n                    ret += 1\n            else:\n                #\u6700\u5f8c\u306b\u4e0a\u306b\u52d5\u3044\u305f\n                if ycnt[GU] == 2:\n                    ret += 1\n        else:\n            #\u6700\u5f8c\u306b\u5de6\u53f3\u306b\u52d5\u3044\u305f\n            if GL>0:\n                if xcnt[GL] == 1:\n                    ret += 1\n            else:\n                if xcnt[GL] == 2:\n                    ret += 1\n    return ret\n\nfor _ in range(T):\n    ax,ay,bx,by,cx,cy = map(int,input().split())\n\n    ans0 = calc(ax,ay,bx,by,cx,cy)\n    ans1 = calc(ay,ax,by,bx,cy,cx)\n\n    ans = min(ans0,ans1)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (a, b, c, d, e, f) = list(map(int, input().split()))\n    x = -max({a, c, e}) + a + c + e\n    y = -max({b, d, f}) + b + d + f\n    print((max(abs(x), abs(y)) + (x == y and x and x != 1)))\n", "import sys\nfrom collections import deque\n\nT = int(input())\n# 0 L\n# 1 |-\n# 2 -|\n# 3 _|\ndef ku_state(p1, p2, p3):\n    xb = min([p[0] for p in [p1, p2, p3]])\n    yb = min([p[1] for p in [p1, p2, p3]])\n    s = set([(p[0] - xb, p[1] - yb) for p in [p1, p2, p3]])\n    if len(s) != 3 or max([x[0] for x in s]) != 1 or max([x[1] for x in s]) != 1:\n        return None\n    if (1, 1) not in s:\n        return 0\n    elif (1, 0) not in s:\n        return 1\n    elif (0, 0) not in s:\n        return 2\n    elif (0, 1) not in s:\n        return 3\n    else:\n        return None\n\nfor _ in range(T):\n    ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n    ps = [(ax, ay), (bx, by), (cx, cy)]\n    ku = (ku_state(*ps))\n    xb = min(ax, bx, cx)\n    yb = min(ay, by, cy)\n    xd = int(abs(xb + 0.5))\n    yd = int(abs(yb + 0.5))\n    if xb == 0 and yb == 0:\n        print((int(ku != 0)))\n        continue\n    if ku == 0:\n        ans = max(abs(xb), abs(yb)) * 2\n        if xb == yb:\n            ans += 1\n    elif ku == 1:\n        ans = max(abs(xb) * 2, 2 * yd + 1)\n        ans = max(1, ans)\n    elif ku == 2:\n        if xb == 0 and yb == 0:\n            ans = 1\n        else:\n            ans = max(xd, yd)*2+1\n            if xb == yb:\n                ans += 1\n    elif ku == 3:\n        ans = max(abs(yb) * 2, 2 * xd + 1)\n        ans = max(1, ans)\n    print(ans)\n", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n  ax, ay, bx, by, cx, cy = map(int, input().split())\n  x = (ax + bx + cx)\n  y = (ay + by + cy)\n  if x == 1 and y == 1:\n    print(0)\n    continue\n  if x == 2 and y == 2:\n    print(1)\n    continue\n  if x == y:\n    print(abs(x) - abs(x) // 3 + (x < 0))\n    continue\n  if x < 0:\n    x = abs(x)\n    x -= x // 3\n    x += 1\n  else: x -= x // 3\n  if y < 0:\n    y = abs(y)\n    y -= y // 3\n    y += 1\n  else: y -= y // 3\n  print(max(x, y) - 1)", "T = int(input())\n\ndef nasu(a, b, c):\n  mi = min(a, b, c)\n  ma = max(a, b, c)\n  f = False\n  if mi >= 0:\n    f = True\n    t = (ma - 1) * 2\n    if a + b + c == ma * 2 + mi:\n      t += 1\n    return t, f\n  else:\n    t = -mi * 2 - 1\n    if a + b + c == mi * 2 + ma:\n      t += 1\n    return t, f\n\ndef main():\n  ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n  ans = 0\n  x, xf = nasu(ax, bx, cx)\n  y, yf = nasu(ay, by, cy)\n  ans += max(x, y)\n  if xf and yf and x == y and x >= 2:\n    ans += 1\n  if not xf and not yf and x == y and x >= 1:\n    ans += 1\n  print(ans)\n\nfor i in range(T):\n  main()\n", "def solve(*args):\n    sx = sum(args[::2])\n    sy = sum(args[1::2])\n    dx = sx - sx // 3 - 1\n    dy = sy - sy // 3 - 1\n    ans = max(abs(dx), abs(dy))\n    if sx == sy and sx // 3 != 0:\n        ans += 1\n    return ans\n\n\nt = int(input())\nfor i in range(t):\n    print((solve(*list(map(int, input().split())))))\n", "def get_center(ps):\n    xs, ys = list(zip(*ps))\n    xs, ys = list(xs), list(ys)\n    xs.sort()\n    ys.sort()\n    return xs[1], ys[1]\n    \n\ndef get_shape(ps):\n    \"\"\"\n    0: #.  1: ##  2: .#  3: ##\n       ##     #.     ##     .#\n    \"\"\"\n    xs, ys = list(zip(*ps))\n    xs, ys = list(xs), list(ys)\n    xs.sort()\n    ys.sort()\n    if xs[0] == xs[1] and ys[0] == ys[1]:\n        return 0\n    elif xs[0] == xs[1] and ys[1] == ys[2]:\n        return 1\n    elif xs[1] == xs[2] and ys[0] == ys[1]:\n        return 2\n    else:\n        return 3\n\n    \nt = int(input())\n\n\nfor _ in range(t):\n    x1, y1, x2, y2, x3, y3 = map(int, input().split())\n    ps = [(x1, y1), (x2, y2), (x3, y3)]\n    \n    cx, cy = get_center(ps)\n    shape = get_shape(ps)\n\n    if cx == 0 and cy == 0:\n        if shape == 0: print(0)\n        elif shape == 1: print(1)\n        elif shape == 2: print(1)\n        else: print(2)\n    elif cx == 1 and cy == 1:\n        if shape == 0: print(3)\n        elif shape == 1: print(2)\n        elif shape == 2: print(2)\n        else: print(1)\n    elif cx == cy:\n        if cx > 0:\n            if shape == 0: print(2 * cx + 1)\n            else: print(2 * cx)\n        else:\n            if shape == 3: print(2 - 2 * cx)\n            else: print(1 - 2 * cx)\n    else:\n        if abs(cx) > abs(cy) and cx > 0:\n            if shape == 0 or shape == 1: print(cx * 2)\n            else: print(cx * 2 - 1)\n        elif abs(cx) >= abs(cy) and cx < 0:\n            if shape == 0 or shape == 1: print(-cx * 2)\n            else: print(-cx * 2 + 1)\n        elif abs(cx) < abs(cy) and cy > 0:\n            if shape == 0 or shape == 2: print(cy * 2)\n            else: print(cy * 2 - 1)\n        else:\n            if shape == 0 or shape == 2: print(-cy * 2)\n            else: print(-cy * 2 + 1)", "def form(ax,ay,bx,by,cx,cy):\n    # (\u5411\u304d, \u4e2d\u5fc3\u306ex\u5ea7\u6a19, \u4e2d\u5fc3\u306ey\u5ea7\u6a19) \u306etuple\u3092\u4f5c\u308b\n    P=[(ax,ay),(bx,by),(cx,cy)]\n    Q=[(0,0)]\n    for i in range(3):\n        x0,y0=P[i][0],P[i][1]\n        x1,y1=P[(i-1)%3][0],P[(i-1)%3][1]\n        x2,y2=P[(i+1)%3][0],P[(i+1)%3][1]\n        if abs(x0-x1)+abs(y0-y1)==1 and abs(x0-x2)+abs(y0-y2)==1:\n            Q.append(((x1-x0),(y1-y0)))\n            Q.append(((x2-x0),(y2-y0)))\n            break\n    else: return -1\n    Q.sort()\n    if Q==[(0, 0), (0, 1), (1, 0)]: return 11, x0,y0\n    elif Q==[(-1, 0), (0, -1), (0, 0)]: return 00, x0,y0\n    elif Q==[(0, -1), (0, 0), (1, 0)]: return 10, x0,y0\n    elif Q==[(-1, 0), (0, 0), (0, 1)]: return 1, x0,y0\n\ndef move(f,x,y):\n    # \u9077\u79fb\u53ef\u80fd\u5834\u6240\u3092\u8fd4\u3059\n    if f==11:\n        return [(00,x+1,y+1), (10,x,y),(1,x,y),(10,x,y+1),(00,x,y+1),(1,x+1,y),(00,x+1,y)]\n    elif f==00:\n        return [(11,x-1,y-1), (1,x,y),(10,x,y),(1,x,y-1),(11,x,y-1),(10,x-1,y),(11,x-1,y)]\n    elif f==10:\n        return [(1,x+1,y-1), (11,x,y),(00,x,y),(11,x,y-1),(1,x,y-1),(00,x+1,y),(1,x+1,y)]\n    elif f==1:\n        return [(10,x-1,y+1), (00,x,y),(11,x,y),(00,x,y+1),(10,x,y+1),(11,x-1,y),(10,x-1,y)]\n\ndef same_angle(f0,x0,y0,f1,x1,y1):\n    if x1>=x0 and y1>=y0 and (f0==f1==11 or f0==f1==00): return 1\n    if x1<x0 and y1>=y0 and (f0==f1==1 or f0==f1==10): return 1\n    if x1>=x0 and y1<y0 and (f0==f1==1 or f0==f1==10): return 1\n    if x1<x0 and y1<y0 and (f0==f1==11 or f0==f1==00): return 1\n    return 0\n\ndef next_set(f,x,y):\n    # 3\u56de\u306e\u79fb\u52d5\u3067\u79fb\u52d5\u3067\u304d\u308b\u5834\u6240\u3092\u5168\u5217\u6319\n    P=[(f,x,y)]\n    res=[(f,x,y,0)]\n    for t in range(2):\n        Q=[]\n        for f,x,y in P:\n            Q.extend(move(f,x,y))\n        P=Q\n        for f,x,y in P:\n            res.append((f,x,y,t+1))\n    return res\n\ndef main():\n    ax,ay,bx,by,cx,cy=list(map(int,input().split()))\n    res=float(\"inf\")\n    f,x,y=form(ax,ay,bx,by,cx,cy)\n    for f0,x0,y0,time0 in next_set(11,0,0):\n        for f1,x1,y1,time1 in next_set(f,x,y):\n            if same_angle(f0,x0,y0,f1,x1,y1) and max(abs(x0-x1),abs(y0-y1))>0: continue\n            if f0==f1:\n                tmp=max(abs(x0-x1),abs(y0-y1))*2+(time0+time1)\n                if res>tmp:\n                    res=tmp\n                    # print(f0,x0,y0,time0,f1,x1,y1,time1)\n    print(res)\n\n\nT=int(input())\nfor _ in range(T):\n    main()\n", "for t in range(int(input())):\n a,b,c,d,e,f=map(int,input().split());g=a+c+e-max([a,c,e]);h=b+d+f-max([b,d,f]);print(max([abs(g),abs(h)])+(g*(g-1)and g==h))", "from collections import deque\n\ndef di(x,y,z,w):\n    return abs(x-z) + abs(y-w)\n\ndef convert(a,b,c,d,e,f):\n    if di(c,d,a,b)==1 and di(c,d,e,f)==1:\n        a,b,c,d = c,d,a,b\n    elif di(e,f,c,d)==1 and di(e,f,a,b)==1:\n        a,b,e,f = e,f,a,b\n    if c==a:\n        if d==b+1:\n            if e==a+1:\n                a,b,c,d,e,f = a,b,a+1,b,a,b+1\n            else:\n                a,b,c,d,e,f = a,b,a,b+1,a-1,b\n        else:\n            if e==a+1:\n                a,b,c,d,e,f = a,b,a+1,b,a,b-1\n            else:\n                a,b,c,d,e,f = a,b,a-1,b,a,b-1\n    elif c==a+1:\n        if f==b+1:\n            a,b,c,d,e,f = a,b,a+1,b,a,b+1\n        else:\n            a,b,c,d,e,f = a,b,a+1,b,a,b-1\n    else:\n        if f==b+1:\n            a,b,c,d,e,f = a,b,a,b+1,a-1,b\n        else:\n            a,b,c,d,e,f = a,b,a-1,b,a,b-1\n    return (a,b,c,d,e,f)\n\ndist = {}\npos = (0,0,1,0,0,1)\ndeq = deque([pos])\ndist[pos] = 0\nwhile deq:\n    a,b,c,d,e,f = deq.popleft()\n    D = dist[a,b,c,d,e,f]\n    if D==10:\n        continue\n\n    nx,ny = 1,1\n\n    if (c,d)==(a+1,b) and (e,f)==(a+1,b):\n        nx,ny = 1,1\n    elif (c,d)==(a,b+1) and (e,f)==(a-1,b):\n        nx,ny = -1,1\n        c,d,e,f = e,f,c,d\n    elif (c,d)==(a-1,b) and (e,f)==(a,b-1):\n        nx,ny =-1,-1\n    elif (c,d)==(a+1,b) and (e,f)==(a,b-1):\n        nx,ny = 1,-1\n\n    if convert(a+nx,b+ny,e,f,c,d) not in dist:\n        dist[convert(a+nx,b+ny,e,f,c,d)] = D + 1\n        deq.append(convert(a+nx,b+ny,e,f,c,d))\n\n    if convert(e,f,e-nx,f,a,b) not in dist:\n        dist[convert(e,f,e-nx,f,a,b)] = D + 1\n        deq.append(convert(e,f,e-nx,f,a,b))\n    if convert(a,b,e,f,a-nx,b) not in dist:\n        dist[convert(a,b,e,f,a-nx,b)] = D + 1\n        deq.append(convert(a,b,e,f,a-nx,b))\n    if convert(e,f,e+nx,f,a,b) not in dist:\n        dist[convert(e,f,e+nx,f,a,b)] = D + 1\n        deq.append(convert(e,f,e+nx,f,a,b))\n\n    if convert(c,d,a,b,c,d-ny) not in dist:\n        dist[convert(c,d,a,b,c,d-ny)] = D + 1\n        deq.append(convert(c,d,a,b,c,d-ny))\n    if convert(a,b,c,d,a,b-ny) not in dist:\n        dist[convert(a,b,c,d,a,b-ny)] = D + 1\n        deq.append(convert(a,b,c,d,a,b-ny))\n    if convert(c,d,c,d+ny,a,b) not in dist:\n        dist[convert(c,d,c,d+ny,a,b)] = D + 1\n        deq.append(convert(c,d,c,d+ny,a,b))\n\n#print(dist)\n#return\n\nimport sys\n\ninput = sys.stdin.readline\n\nans = []\nfor _ in range(int(input())):\n    a,b,c,d,e,f = map(int,input().split())\n    if di(c,d,a,b)==1 and di(c,d,e,f)==1:\n        a,b,c,d = c,d,a,b\n    elif di(e,f,c,d)==1 and di(e,f,a,b)==1:\n        a,b,e,f = e,f,a,b\n    if c==a:\n        if d==b+1:\n            if e==a+1:\n                a,b,c,d,e,f = a,b,a+1,b,a,b+1\n            else:\n                a,b,c,d,e,f = a,b,a,b+1,a-1,b\n        else:\n            if e==a+1:\n                a,b,c,d,e,f = a,b,a+1,b,a,b-1\n            else:\n                a,b,c,d,e,f = a,b,a-1,b,a,b-1\n    elif c==a+1:\n        if f==b+1:\n            a,b,c,d,e,f = a,b,a+1,b,a,b+1\n        else:\n            a,b,c,d,e,f = a,b,a+1,b,a,b-1\n    else:\n        if f==b+1:\n            a,b,c,d,e,f = a,b,a,b+1,a-1,b\n        else:\n            a,b,c,d,e,f = a,b,a-1,b,a,b-1\n\n    res = 10**18\n\n    if (c,d,e,f)==(a+1,b,a,b+1):\n        if a*b>=0 and a and a==b:\n            res = 2 * max(abs(a),abs(b)) + 1\n        else:\n            res = 2 * max(abs(a),abs(b))\n    elif (c,d,e,f)==(a,b+1,a-1,b):\n        if a>=0 and b>=0:\n            if (a,b)==(0,0):\n                res = 1\n            elif b>=a:\n                res = 2 * b\n            else:\n                res = 2 * a - 1\n        elif a>=0 and b<0:\n            if -b>=a:\n                res = 2 * -b\n            else:\n                res = 2 * a - 1\n        elif a<0 and b>=0:\n            if b>-a:\n                res = 2 * b\n            else:\n                res = 2 * (-a) + 1\n        else:\n            if -b > -a:\n                res = 2 * -b\n            else:\n                res = 2 * (-a) + 1\n    elif (c,d,e,f)==(a+1,b,a,b-1):\n        if a>=0 and b>=0:\n            if (a,b)==(0,0):\n                res = 1\n            elif a>=b:\n                res = 2 * a\n            else:\n                res = 2 * b - 1\n        elif a>=0 and b<0:\n            if a>-b:\n                res = 2 * a\n            else:\n                res = 2 * (-b) + 1\n        elif a<0 and b>=0:\n            if -a>=b:\n                res = 2 * (-a)\n            else:\n                res = 2 * b - 1\n        else:\n            if -a>-b:\n                res = 2 * (-a)\n            else:\n                res = 2 * (-b) + 1\n    else:\n        if a>=0 and b>=0:\n            if (a,b)==(0,0):\n                res = 2\n            elif b>a:\n                res = 2 * b - 1\n            elif a>b:\n                res = 2 * a - 1\n            else:\n                if a==1:\n                    res = 1\n                else:\n                    res = 2 * a\n        elif a>=0 and b<0:\n            if -b>=a:\n                res = 2 * (-b) + 1\n            else:\n                res = 2 * a - 1\n        elif a<0 and b>=0:\n            if -a>=b:\n                res = 2 * (-a) + 1\n            else:\n                res = 2 * b - 1\n        else:\n            if a!=b:\n                res = 2 * max(-a,-b) + 1\n            else:\n                res = 2 + 2 * abs(a)\n    ans.append(res)\n\nprint(*ans,sep=\"\\n\")\n", "import sys\ninput = sys.stdin.readline\nn = int(input())\nC = [list(map(int,input().split())) for i in range(n)]\n\nbig = 10**5\nl = 7\nD = [[[big] * 4 for i in range(l)] for j in range(l)]\nmi = 3\n\nD[mi][mi][0] = 0\n\nL = [(0,1,1),(1,0,3),(1,1,2),(0,1,2),(1,0,2),(0,0,3),(0,0,1)]\nLL = [(0,1,1),(1,0,3),(1,1,2),(0,1,2),(1,0,2),(0,0,3),(0,0,1),(0,0,0)]\n\n\nQ = [(mi,mi,0,0)]\ns = 0\nwhile s < len(Q):\n    x,y,t,d = Q[s]\n    for nx,ny,nt in L:\n        for k in range(t):\n            nx, ny = ny, -nx\n        tt = (nt+t)%4\n        xx = x+nx\n        yy = y+ny\n        if 0<=xx<l and 0<=yy<l and D[xx][yy][tt] == big:\n            D[xx][yy][tt] = d+1\n            Q.append((xx,yy,tt,d+1))\n    s += 1\n\n# ANS = []\n# print(D[mi+1][mi-1])\nfor i in range(n):\n    t = -1\n    Xs = [C[i][0],C[i][2],C[i][4]]\n    Ys = [C[i][1],C[i][3],C[i][5]]\n    Xs.sort()\n    Ys.sort()\n    MX = max(Xs)\n    mX = min(Xs)\n    MY = max(Ys)\n    mY = min(Ys)\n    if Xs[1] == MX and Ys[1] == MY:\n        t = 2\n    elif Xs[1] == mX and Ys[1] == mY:\n        t = 0\n    elif Xs[1] == MX and Ys[1] == mY:\n        t = 3\n    else:\n        t = 1\n    cx,cy = Xs[1],Ys[1]\n    ans = float(\"inf\")\n    c = 0\n    for nx,ny,nt in LL:\n        for k in range(t):\n            nx, ny = ny,-nx\n        tt = (nt+t)%4\n        xx = cx+nx\n        yy = cy+ny\n        for j in range(l):\n            for k in range(l):\n                if (tt%2==0 and (j-mi - xx)*(k-mi - yy)<=0) or (tt%2==1 and (j-mi - xx)*(k-mi - yy)>=0):\n                    dx = abs(j-mi - xx)\n                    dy = abs(k-mi - yy)\n                    Md = max(dx,dy)\n                    p = 0\n                    if c != len(LL)-1:\n                        p = 1\n                    nans = D[j][k][tt] + Md*2 + p\n                    ans = min(ans,nans)\n        c += 1\n    print(ans)\n\n\n", "flip = {\n    0 : {0:1, 1:0, 2:3, 3:2},\n    1 : {0:3, 1:2, 2:1, 3:0},\n    2 : {0:0, 1:3, 2:2, 3:1},\n}\nv = [(0, 0), (1, 0), (1, 1), (0, 1)]\ndef solve(ax, ay, bx, by, cx, cy):\n    points = {(ax, ay), (bx, by), (cx, cy)}\n    xm = min(ax, bx, cx)\n    ym = min(ay, by, cy)\n    rs = 2\n    for i, (vx, vy) in enumerate(v):\n        if (xm+vx, ym+vy) not in points:\n            rt = i\n            break\n    \n    if xm == ym == 0:\n        if rt == 2:\n            return 0\n        else:\n            return 1\n\n    if xm < 0:\n        xm = -xm\n        rs = flip[0][rs]\n        rt = flip[0][rt]\n    if ym < 0:\n        ym = -ym\n        rs = flip[1][rs]\n        rt = flip[1][rt]\n    if xm < ym:\n        xm, ym = ym, xm\n        rs = flip[2][rs]\n        rt = flip[2][rt]\n    \n    if xm == ym:\n        res = 2 * xm\n        if rs == 2:\n            if rt == 0:\n                res += 2\n            else:\n                res += 1\n        elif rs in (1, 3):\n            if rt in (0, flip[2][rs]):\n                res += 1\n        else:\n            if rt == 0:\n                res += 1\n    \n    else:\n        res = 2 * ym + 1\n        res += (xm - ym - 1) * 2\n        if rs in (1, 2):\n            res += 1\n        if rt in (0, 3):\n            res += 1\n    \n    return res\n\nT = int(input())\nans = []\nfor i in range(T):\n    ans.append(solve(*list(map(int, input().split()))))\n\nprint(*ans, sep='\\n')\n", "import sys\nfrom collections import defaultdict, Counter, namedtuple, deque\nimport itertools\nimport functools\nimport bisect\nimport heapq\nimport math\nimport copy\n\n# from fractions import gcd\n\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n# sys.setrecursionlimit(10**8)\n\nT = int(input())\nfor t in range(T):\n    A = list(map(int, input().split()))\n    mc = []\n    for i in [0, 2, 4]:\n        x, y = A[i], A[i+1]\n        c = 0\n        if y == x:\n            c = 2*x-1 if x > 0 else 2*(-x)\n        elif y == -x+1:\n            c = 2*x-2 if x > 0 else 2*(-x)\n        elif y > x:\n            if y > -x+1:\n                c = 2*y - 2\n            else:\n                c = 2*(-x)-1\n        elif y < x:\n            if y > -x + 1:\n                c = 2*x-2\n            else:\n                c = 2*(-y)-1\n\n        mc.append(c)\n\n    vmax = max(mc)\n    if vmax == 0:\n        print((0))\n    elif vmax == 1 and mc.count(0) == 2:\n        print((1))\n    elif mc.count(vmax) == 3:\n        print((vmax+2))\n    elif mc.count(vmax) == 2:\n        print((vmax+1))\n    elif mc.count(vmax-1) == 2:\n        print((vmax+1))\n    else:\n        print(vmax)\n\n", "import sys\n\ninput = sys.stdin.readline\nt = int(input())\ncases = [tuple(map(int, input().split())) for _ in range(t)]\nans = []\nfor ax, ay, bx, by, cx, cy in cases:\n    abcx = ax + bx + cx\n    abcy = ay + by + cy\n    xd, xm = divmod(abcx, 3)\n    yd, ym = divmod(abcy, 3)\n    x = xd * 2 + xm - 1\n    y = yd * 2 + ym - 1\n    a = max(abs(x), abs(y))\n    if x == y and (x >= 2 or x <= -1):\n        a += 1\n    ans.append(a)\nprint(*ans, sep=\"\\n\")", "# arc109d\n\ndef coord1d(a, b, c):\n    m = max(a, max(b, c))\n    ct = 0\n    if a == m:\n        ct += 1\n    if b == m:\n        ct += 1\n    if c == m:\n        ct += 1\n\n    if ct == 1:\n        return m * 2 - 1\n    else:\n        return m * 2\n\n\ndef coord(ax, ay, bx, by, cx, cy):\n    newx = coord1d(ax, bx, cx)\n    newy = coord1d(ay, by, cy)\n    return newx, newy\n\n\nT = int(input())\nfor _ in range(T):\n    ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n    nx, ny = coord(ax, ay, bx, by, cx, cy)\n    ans = 0\n    if (nx == ny) and not(nx == 1 or nx == 2):\n        ans = abs(nx - 1) + 1\n    else:\n        ans = max(abs(nx - 1), abs(ny - 1))\n    print(ans)", "from collections import defaultdict\nT=int(input())\nfor _ in range(T):\n    ax,ay,bx,by,cx,cy=list(map(int,input().split()))\n    X=defaultdict(int)\n    Y=defaultdict(int)\n    X[ax]+=1\n    X[bx]+=1\n    X[cx]+=1\n    Y[ay]+=1\n    Y[by]+=1\n    Y[cy]+=1\n    x=min(X)\n    y=min(Y)\n    r=None\n    if X[x]==1 and Y[y]==1:\n        r=0\n    elif X[x]==1 and Y[y]==2:\n        r=3\n    elif X[x]==2 and Y[y]==1:\n        r=1\n    else:\n        r=2\n    if r==0:\n        ans=max(abs(2*x+1),abs(2*y+1))\n        if x==y and x!=0:\n            ans+=1\n        print(ans)\n    elif r==1:\n        t=None\n        ans=None\n        if y>=0:\n            t=abs(y)-abs(x)\n        else:\n            t=abs(y+1)-abs(x)\n        if t>=0:\n            if y>=0:\n                ans=2*abs(y)+1\n            else:\n                ans=2*abs(y)-1\n        else:\n            ans=2*abs(x)\n        print(ans)\n    elif r==3:\n        t=None\n        ans=None\n        if x>=0:\n            t=abs(x)-abs(y)\n        else:\n            t=abs(x+1)-abs(y)\n        if t>=0:\n            if x>=0:\n                ans=2*abs(x)+1\n            else:\n                ans=2*abs(x)-1\n        else:\n            ans=2*abs(y)\n        print(ans)\n    else:\n        ans=2*max(abs(x),abs(y))\n        if x==y and x!=0:\n            ans+=1\n        print(ans)\n", "from math import floor\n\ndef repos(x, y):\n    x = int(floor(x)) + int(round(x))\n    y = int(floor(y)) + int(round(y))\n    return x, y\n\nT = int(input())\nfor _ in range(T):\n    Ax, Ay, Bx, By, Cx, Cy = list(map(int, input().split()))\n    x = (Ax+Bx+Cx) / 3\n    y = (Ay+By+Cy) / 3\n    x, y = repos(x, y)\n    if x == y:\n        if x == 0:\n            print((0))\n        elif x == 1:\n            print((1))\n        else:\n            ans = abs(x) + 1\n            print(ans)\n    else:\n        ans = max(abs(x), abs(y))\n        print(ans)\n", "abs = lambda x:max(x, -x)\n\nt = int(input())\nfor i in range(t):\n    ax,ay,bx,by,cx,cy = list(map(int, input().split()))\n    x = ax + bx + cx\n    y = ay + by + cy\n    xv = x // 3\n    xp = x % 3\n    yv = y // 3\n    yp = y % 3\n\n    nx = xv * 2 + xp - 1\n    ny = yv * 2 + yp - 1\n\n    if nx == ny:\n        if  nx == 1:\n            print((1))\n        elif nx == 0:\n            print((0))\n        else:\n            print((abs(nx) + 1))\n    else:\n        print((max(abs(nx), abs(ny))))\n", "\n\"\"\"\n\n\u7b97\u6570\n\u304b\u306a\u308a\u5acc\n\n\u4e09\u89d2\u5f62\u3092\u30d1\u30bf\u30d1\u30bf\u3057\u305f\u5834\u5408\u306e\u6700\u77ed\u8ddd\u96e2\n\u91cd\u5fc3\u3067\u8003\u3048\u308b\n\u3068\u3001\u304b\u306a\u308a\u5909\u306a\u5f62\n\n\u3068\u308a\u3042\u3048\u305a\u5b9a\u5f0f\u5316\u3059\u308b\n\n(0,0) \u30b9\u30bf\u30fc\u30c8\n\naxay\u2026\u3092\u3053\u308c\u306b\u843d\u3068\u3057\u8fbc\u307f\u305f\u3044\n\n0  11  22  3\n00 1    2 33\n\nans \u304b\u3089\u6e1b\u3089\u3059\n\n10\n1 1 1 2 2 1\n\n\u304c3\u306b\u306a\u308b\u5fc5\u8981\u6027\n\n\"\"\"\n\nimport sys\nfrom sys import stdin\n\nTT = int(stdin.readline())\n\nt0 = tuple( sorted([(0,0),(0,1),(1,0)]) )\nt1 = tuple( sorted([(0,0),(0,1),(1,1)]) )\nt2 = tuple( sorted([(0,1),(1,0),(1,1)]) )\nt3 = tuple( sorted([(0,0),(1,0),(1,1)]) )\n\nfor loop in range(TT):\n\n    ax,ay,bx,by,cx,cy = list(map(int,stdin.readline().split()))\n    \n    mx = min(ax,bx,cx)\n    my = min(ay,by,cy)\n\n    ox = 2 * mx\n    oy = 2 * my\n\n    setz = tuple(sorted([ (ax-mx , ay-my) , (bx-mx , by-my) , (cx-mx , cy-my) ]))\n    #print (setz)\n\n    if setz == t0:\n        ox += 0\n        oy += 0\n    elif setz == t1:\n        ox += 0\n        oy += 1\n    elif setz == t2:\n        ox += 1\n        oy += 1\n    else:\n        ox += 1\n        oy += 0\n\n    #print (ox,oy,file=sys.stderr)\n\n    if ox != oy:\n        print((abs(ox)+abs(oy)-min(abs(ox),abs(oy))))\n    else:\n\n        if 0 <= ox <= 1:\n            print (ox)\n        else:\n            print((abs(ox)+abs(oy)-min(abs(ox),abs(oy)) + 1))\n    \n", "def solve(x, y, xd, yd):\n\n    if x + y > 0:\n        if x - y > 0:\n            return 2 * x + (xd == 1)\n        elif x - y < 0:\n            return 2 * y + (yd == 1)\n        else:\n            return 1 + 2 * x + (xd == 1 and yd == 1)\n    elif x + y < 0:\n        if x - y > 0:\n            return -y * 2 - 1 + (yd == 2)\n        elif x - y < 0:\n            return -x * 2 - 1 + (xd == 2)\n        else:\n            return -2 * x + (xd == 2 and yd == 2)\n    else:\n        if x - y > 0:\n            return 2 * x + (xd == 1)\n        elif x - y < 0:\n            return -2 * x + (yd == 1)\n        else:\n            if xd == 2 and yd == 2:\n                return 0\n            else:\n                return 1\n\n\n\ndef main():\n\n    t = int(input())\n    ans_list = []\n\n    for i in range(t):\n        ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n        x, y = (min(ax, bx, cx), min(ay, by, cy))\n        xd = (ax == x) + (bx == x) + (cx == x)\n        yd = (ay == y) + (by == y) + (cy == y)\n        ans_list.append(solve(x, y, xd, yd))\n\n    for i in range(t):\n        print((ans_list[i]))\n\n\nmain()\n", "# coding: utf-8\n# Your code here!\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\n\n#a = int(readline())\n#n,k = map(int, readline().split())\n\ndef solve1(a,b,c,d,e,f,cx,cy,x,y):\n    if x==y:\n        if x==0:\n            if cx==cy==0:\n                return 0\n            else:\n                return 1\n        elif cx==cy==x+1:\n            return 2*x+2\n        else:\n            return 2*x+1\n    elif x < y:\n        if cy==y:\n            return 2*y\n        else:\n            return 2*y+1\n    else:\n        if cx==x:\n            return 2*x\n        else:\n            return 2*x+1\n\ndef solve2(a,b,c,d,e,f):\n    cx = sorted([a,c,e])[1]\n    cy = sorted([b,d,f])[1]\n    x = min(a,c,e)\n    y = min(b,d,f)\n    if x > y:\n        if cx==x:\n            return 2*x\n        else:\n            return 2*x+1\n    else:\n        if cy==y:\n            return 2*y+1\n        else:\n            return 2*y+2\n        \n\ndef solve3(a,b,c,d,e,f):\n    cx = sorted([a,c,e])[1]\n    cy = sorted([b,d,f])[1]\n    x = min(a,c,e)\n    y = min(b,d,f)\n    if x != y:\n        v = max(x,y)\n        if cx == v+1 or cy == v+1:\n            return 2*(v+1)\n        else:\n            return 2*(v+1)-1\n    else:\n        if cx == cy == x+1:\n            return 2*(x+1)+1\n        else:\n            return 2*(x+1)\n\n\ndef solve():\n    a,b,c,d,e,f = list(map(int, readline().split()))\n    cx = sorted([a,c,e])[1]\n    cy = sorted([b,d,f])[1]\n    x = min(a,c,e)\n    y = min(b,d,f)\n    \n    if x >= 0 and y >= 0:\n        return solve1(a,b,c,d,e,f,cx,cy,x,y),1\n    elif x >= 0:\n        return solve2(a,-b,c,-d,e,-f),2\n    elif y >= 0:\n        return solve2(b,-a,d,-c,f,-e),22\n    else:\n        return solve3(-a,-b,-c,-d,-e,-f),3\n            \n\n\nT = int(readline())\nfor _ in range(T):\n    print((solve()[0]))\n\n\n\n", "t = int(input())\nfor _ in range(t):\n    ax, ay, bx, by, cx, cy = map(int, input().split())\n    x, y = ax + bx + cx, ay + by + cy\n    if x > 0:\n        x = x - x // 3 - 1\n    else:\n        x = x + (2 - x) // 3 - 1\n    if y > 0:\n        y = y - y // 3 - 1\n    else:\n        y = y + (2 - y) // 3 - 1\n    if x == y == 0:\n        print(0)\n    elif x == y == 1:\n        print(1)\n    else:\n        print(max(x, -x, y, -y) + int(x == y))", "def solve(x,y):\n    x=x-x//3 if x>0 else x+(2-x)//3\n    y=y-y//3 if y>0 else y+(2-y)//3\n    x-=1\n    y-=1\n    if (x,y)==(0,0):\n        return 0\n    if (x,y)==(1,1):\n        return 1\n    return max(abs(x),abs(y))+(1 if x==y else 0)\nT=int(input())\nfor _ in range(T):\n    ax,ay,bx,by,cx,cy=list(map(int,input().split()))\n    print((solve(ax+bx+cx,ay+by+cy)))\n", "exec(\"a=list(map(int,input().split()));g=sum(a[::2])-max(a[::2]);h=sum(a[1::2])-max(a[1::2]);print(max([abs(g),abs(h)])+(g*(g-1)and g==h));\"*int(input()))", "for t in range(int(input())):\n a,b,c,d,e,f=map(int,input().split());g=a+c+e-max([a,c,e]);h=b+d+f-max([b,d,f]);print(max([abs(g),abs(h)])+((g<0 or g>1)and g==h))", "t = int(input())\nfor _ in range(t):\n    ax,ay,bx,by,cx,cy = map(int,input().split())\n    x = ax+bx+cx\n    y = ay+by+cy\n    xv,xp = divmod(x,3)\n    yv,yp = divmod(y,3)\n    nx = xv*2+xp-1\n    ny = yv*2+yp-1\n    if nx == ny:\n        if nx == 0:\n            print(0)\n        elif nx == 1:\n            print(1)\n        else:\n            print(abs(nx)+1)\n    else:\n        print(max(abs(nx),abs(ny)))", "def main():\n    ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n    min_y = min(ay, by, cy)\n    min_x = min(ax, bx, cx)\n    if [ay, by, cy].count(min_y) == 1:\n        yy = min_y + 1\n    else:\n        yy = min_y\n    if [ax, bx, cx].count(min_x) == 1:\n        xx = min_x + 1\n    else:\n        xx = min_x\n    if xx == yy == 0 and min_x == min_y == 0:\n        print((0))\n        return\n    if xx == yy == 1 and min_x == min_y == 0:\n        print((1))\n        return\n    if min_y < xx:\n        x_same = max(abs(xx), abs(min_y)) * 2 - 1\n    else:\n        x_same = max(abs(xx), abs(min_y)) * 2\n    if min_x < yy:\n        y_same = max(abs(min_x), abs(yy)) * 2 - 1\n    else:\n        y_same = max(abs(min_x), abs(yy)) * 2\n    #print(x_same, y_same)\n    ans = max(x_same, y_same)\n\n    if x_same == y_same:\n        ans += 1\n    print(ans)\n\nfor _ in range(int(input())):\n    main()\n", "#ARC109-D-600\nT=int(input())\nfor _ in range(T):\n    ax, ay, bx, by, cx, cy = map(int,input().split())\n    if ax == bx:\n        x, xx = ax, cx\n    if bx == cx:\n        x, xx = bx, ax\n    if cx == ax:\n        x, xx = cx, bx\n    if ay == by:\n        y, yy = ay, cy\n    if by == cy:\n        y, yy = by, ay\n    if cy == ay:\n        y, yy = cy, by\n    xx, yy = xx-x, yy-y\n    if x == y == 0:\n        if xx == yy == 1:\n            g = 0\n        elif xx*yy == 1:\n            g = 2\n        else:\n            g = 1\n    elif x == 0:\n        if y > 0:\n            g = 2*y-(yy==-1)\n        else:\n            g = -2*y+(yy==-1)\n    elif y == 0:\n        if x > 0:\n            g = 2*x-(xx==-1)\n        else:\n            g = -2*x+(xx==-1)\n    elif x > 0 and y > 0:\n        if x == y == 1:\n            if xx == yy == -1:\n                g = 1\n            elif -1 in {xx,yy}:\n                g = 2\n            else:\n                g = 3\n        elif x == y:\n            if -1 in {xx,yy}:\n                g = 2*max(x,y)\n            else:\n                g = 2*max(x,y)+1\n        elif x > y:\n            if xx == 1:\n                g = 2*x\n            else:\n                g = 2*x-1\n        elif y > x:\n            x, y, xx, yy = y, x, yy, xx\n            if xx == 1:\n                g = 2*x\n            else:\n                g = 2*x-1\n    elif x < 0 and y > 0:\n        if x+y == 0:\n            if xx == 1:\n                g = 2*y\n            else:\n                g = 2*y+1\n        if x+y > 0:\n            if yy == -1:\n                g = 2*y-1\n            else:\n                g = 2*y\n        if x + y < 0:\n            if xx == 1:\n                g = -2*x\n            else:\n                g = -2*x+1\n    elif x > 0 and y < 0:\n        x, y, xx, yy = y, x, yy, xx\n        if x+y == 0:\n            if xx == 1:\n                g = 2*y\n            else:\n                g = 2*y+1\n        if x+y > 0:\n            if yy == -1:\n                g = 2*y-1\n            else:\n                g = 2*y\n        if x + y < 0:\n            if xx == 1:\n                g = -2*x\n            else:\n                g = -2*x+1\n    else:\n        if x == y:\n            if xx == yy == -1:\n                g = -2*x+2\n            else:\n                g = -2*x+1\n        else:\n            if x < y:\n                if xx == 1:\n                    g = -2*x\n                else:\n                    g = -2*x+1\n            if y < x:\n                if yy == 1:\n                    g = -2*y\n                else:\n                    g = -2*y+1\n    print(g)", "T = int(input())\n\ndef solve(X, Y):\n  if X > 0:\n    x = X - int(X/3)\n  else:\n    x = X + int((2-X)/3)\n  x -= 1\n  \n  if Y > 0:\n    y = Y - int(Y/3)\n  else:\n    y = Y + int((2-Y)/3)\n  y -= 1\n  \n  if x == 0 and y == 0:\n    return 0\n  if x == 1 and y == 1:\n    return 1\n  \n  ans = max([x, -x, y, -y])\n  if x == y:\n    ans += 1\n  return ans\n\nfor i in range(T):\n  ax,ay,bx,by,cx,cy = list(map(int, input().split()))\n  X = ax + bx + cx\n  Y = ay + by + cy\n  print((solve(X, Y)))\n  \n  \n  \n", "\ncost = {}\ntip = {}\n\n# cost[(1, 0, 0)] = 0\n\n# cost[(2, 0, 0)] = 1\n# cost[(2, 1, 0)] = 1\n# cost[(2, 0, 1)] = 2\n# cost[(2, 1, 1)] = 2\n# cost[(2, 0, -1)] = 2\n# cost[(2, -1, 0)] = 2\n# cost[(2, -1, -1)] = 3\n\n# cost[(3, 1, 1)] = 1\n# cost[(3, 0, 0)] = 2\n# cost[(3, 0, 1)] = 1\n# cost[(3, 1, 0)] = 1\n\n# cost[(4, 0, 0)] = 1\n# cost[(4, 1, 1)] = 2\n# cost[(4, 0, 1)] = 1\n# cost[(4, 1, 0)] = 2\n\n\nd = {\n\t1 : [(2, 1, 0), (3, 1, 0), (4, 0, 0), (3, 0, 1), (2, 0, 0), (4, 0, 1), (3, 1, 1)],\n\t2 : [(1, 0, 0), (3, 0, 1), (4, 0, 1), (1, -1, 0), (3, 0, 0), (4, -1, 0), (4, -1, 1)],\n\t3 : [(2, 0, 0), (1, -1, 0), (4, -1, 0), (4, 0, 0), (1, 0, -1), (2, 0, -1), (1, -1, -1)],\n\t4 : [(1, 0, -1), (2, 0, -1), (3, 0, 0), (1, 0, 0), (2, 1, 0), (3, 1, 0), (2, 1, -1)]\n}\n\n\ndef dfs(t, x, y, dist, cost):\n\tif dist >= 4:\n\t\treturn []\n\n\tif (t, x, y) in cost:\n\t\tcost[(t, x, y)] = min(cost[(t, x, y)], dist)\n\telse:\n\t\tcost[(t, x, y)] = dist\n\n\tfor e in d[t]:\n\t\tdfs(e[0], x + e[1], y + e[2], dist + 1, cost)\n\n\ntip[((0, 1),(1, 0))] = 1\ntip[((1, 0),(0, 1))] = 1\n\ntip[((0, -1),(1, 0))] = 4\ntip[((1, 0),(0, -1))] = 4\n\ntip[((0, 1),(-1, 0))] = 2\ntip[((-1, 0),(0, 1))] = 2\n\ntip[((0, -1),(-1, 0))] = 3\ntip[((-1, 0),(0, -1))] = 3\n\n\ndef test(a, b, c):\n\tif b[0] != c[0] and b[1] != c[1]:\n\t\treturn True\n\treturn False\n\n\ndef dd(a, b):\n\treturn (b[0] - a[0], b[1] - a[1])\n\ndef conv(coords):\n\n\ta = (coords[0], coords[1])\n\tb = (coords[2], coords[3])\n\tc = (coords[4], coords[5])\n\n\tcenter = a\n\to1 = b\n\to2 = c\n\n\tif test(b, a, c):\n\t\tcenter = b\n\t\to1 = a\n\t\to2 = c\n\n\tif test(c, a, b):\n\t\tcenter = c\n\t\to1 = a\n\t\to2 = b\n\n\ttp = tip[(dd(center, o1), dd(center, o2))]\n\t(x, y) = center\n\t# print(center, dd(center, o1), dd(center, o2))\n\treturn (tp, x, y)\n\ndef sgn(tp, dx, dy):\n\tif tp == 1 or tp == 3:\n\t\tif dx * dy <= 0:\n\t\t\treturn 0\n\t\treturn 1\n\n\tif dx * dy <= 0:\n\t\treturn 1\n\treturn 0\n\ndef get_cost(tp, x, y, xf, yf):\n\tdiag = min(abs(x - xf), abs(y - yf))\n\tlin = max(abs(x - xf), abs(y - yf))\n\n\treturn 2 * lin + sgn(tp, x - xf, y - yf) * 10\n\n\ndef solve(coords):\n\n\t(t, x, y) = conv(coords)\n\n\tto = {}\n\n\tdfs(t, x, y, 0, to)\n\n\t# print(t, x, y)\n\n\tans = 1e18\n\t\n\tfor e in cost:\n\t\tfor f in to:\n\t\t\tif f[0] == e[0]:\n\t\t\t\tans = min(ans, cost[e] + to[f] + get_cost(e[0], e[1], e[2], f[1], f[2]))\n\n\treturn ans\n\n\nlst = dfs(1, 0, 0, 0, cost)\n\n\n# print(len(cost))\n\nn = int(input())\nfor i in range(n):\n\tcoords = list(map(int, input().split()))\n\tprint((solve(coords)))\n\n\n\n", "def solve(x, y, xd, yd):\n\n    if x + y > 0:\n        if x - y > 0:\n            return 2 * x + (xd == 1)\n        elif x - y < 0:\n            return 2 * y + (yd == 1)\n        else:\n            return 1 + 2 * x + (xd == 1 and yd == 1)\n    elif x + y < 0:\n        if x - y > 0:\n            return -y * 2 - 1 + (yd == 2)\n        elif x - y < 0:\n            return -x * 2 - 1 + (xd == 2)\n        else:\n            return -2 * x + (xd == 2 and yd == 2)\n    else:\n        if x - y > 0:\n            return 2 * x + (xd == 1)\n        elif x - y < 0:\n            return -2 * x + (yd == 1)\n        else:\n            if xd == 2 and yd == 2:\n                return 0\n            else:\n                return 1\n\n\n\ndef main():\n\n    t = int(input())\n    ans_list = []\n\n    for i in range(t):\n        ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n        x, y = (min(ax, bx, cx), min(ay, by, cy))\n        xd = (ax == x) + (bx == x) + (cx == x)\n        yd = (ay == y) + (by == y) + (cy == y)\n        ans_list.append(solve(x, y, xd, yd))\n\n    for i in range(t):\n        print((ans_list[i]))\n\n\nmain()\n", "ansl=[]\nfor q in range(int(input())):\n    ax,ay,bx,by,cx,cy = map(int, input().split())\n    fs = [(0,0),(0,1),(1,0)]\n    # -1 0 0 0 0 -1\n    fs2 = [(-1,0),(0,0),(0,-1)]\n    if (ax,ay) in fs and (bx,by) in fs and (cx,cy) in fs:\n        ansl.append(0)\n        continue\n    if (ax,ay) in fs2 and (bx,by) in fs2 and (cx,cy) in fs2:\n        ansl.append(2)\n        continue\n    if (ax,ay) == (0,0) or (bx,by) == (0,0) or (cx,cy) == (0,0):\n        ans = 0\n        if (ax,ay) not in fs:\n            ans+=1\n        if (bx,by) not in fs:\n            ans+=1\n        if (cx,cy) not in fs:\n            ans+=1\n        ansl.append(ans)\n        continue\n\n\n    if abs(ax)<=abs(ay) and abs(bx)<=abs(by) and abs(cx)<=abs(cy):\n        ax,ay=ay,ax\n        bx,by=by,bx\n        cx,cy=cy,cx\n    if abs(ax)>=abs(ay) and abs(bx)>=abs(by) and abs(cx)>=abs(cy):\n        miny = min(ay,by,cy)\n        ay-=miny\n        by-=miny\n        cy-=miny\n        samex = 0\n        if ax==bx:\n            samex=ax\n            difx=cx\n        elif bx==cx:\n            samex=bx\n            difx=ax\n        else:\n            samex=cx\n            difx=bx\n        if difx < samex:\n            dist = difx*2+1\n        else:\n            dist = samex*2\n        dist = max(dist,dist*(-1))\n        # print(q,dist)\n        ansl.append(dist)\n\n    else:\n        xp = 0\n        if abs(ax)==abs(ay):\n            xp = ax\n            yp = ay\n            if xp >= 0 and yp>=0:\n                if max(ay,by,cy) == yp:\n                    if ax==1:\n                        dist=1\n                    else:\n                        dist = abs(xp)*2\n                else:\n                    dist = abs(xp)*2+1\n            elif xp < 0 and yp <0:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2+2\n                else:\n                    dist = abs(xp)*2+1\n            elif xp >= 0 and yp <0:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2+1\n                else:\n                    dist = abs(xp)*2 \n            else:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2\n                else:\n                    dist = abs(xp)*2 +1 \n\n        elif abs(bx)==abs(by):\n            xp = bx\n            yp = by\n            if xp >= 0 and yp>=0:\n                if max(ay,by,cy) == yp:\n                    if bx==1:\n                        dist=1\n                    else:\n                        dist = abs(xp)*2\n                else:\n                    dist = abs(xp)*2+1\n            elif xp < 0 and yp <0:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2+2\n                else:\n                    dist = abs(xp)*2+1\n            elif xp >= 0 and yp <0:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2+1\n                else:\n                    dist = abs(xp)*2\n            else:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2\n                else:\n                    dist = abs(xp)*2 +1 \n        elif abs(cx)==abs(cy):\n            xp = cx\n            yp = cy\n            if xp >= 0 and yp>=0:\n                if max(ay,by,cy) == yp:\n                    if cx==1:\n                        dist=1\n                    else:\n                        dist = abs(xp)*2\n                else:\n                    dist = abs(xp)*2+1\n            elif xp < 0 and yp <0:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2+2\n                else:\n                    dist = abs(xp)*2+1\n            elif xp >= 0 and yp <0:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2+1\n                else:\n                    dist = abs(xp)*2\n            else:\n                if max(ay,by,cy)==yp:\n                    dist = abs(xp)*2\n                else:\n                    dist = abs(xp)*2 +1 \n        # dist = abs(xp)*2+1\n        # print('---', q, (ax,ay,bx,by,cx,cy))\n        # print(q,dist)\n        ansl.append(dist)\n    \nfor a in ansl:print(a)", "from math import ceil, floor\n\n\ndef angle(a, b, c, d, e, f):\n    res = []\n    if a != c and b != d:\n        center = (e, f)\n        p = (a, b)\n        q = (c, d)\n    elif a != e and b != f:\n        center = (c, d)\n        p = (a, b)\n        q = (e, f)\n    else:\n        center = (a, b)\n        p = (c, d)\n        q = (e, f)\n\n    if center[0] == p[0]:\n        if center[0] > q[0]:\n            res.append(\"r\")\n        else:\n            res.append(\"l\")\n    elif center[0] == q[0]:\n        if center[0] > p[0]:\n            res.append(\"r\")\n        else:\n            res.append(\"l\")\n    if center[1] == p[1]:\n        if center[1] < q[1]:\n            res.append(\"d\")\n        else:\n            res.append(\"u\")\n    elif center[1] == q[1]:\n        if center[1] < p[1]:\n            res.append(\"d\")\n        else:\n            res.append(\"u\")\n    return res\n\n\ndef test():\n    ax, ay, bx, by, cx, cy = map(int, input().split())\n    if set([(ax, ay), (bx, by), (cx, cy)]) == set([(0, 0), (0, 1), (1, 0)]):\n        return 0\n    XX = (ax + bx + cx) / 3\n    YY = (ay + by + cy) / 3\n    ang = angle(ax, ay, bx, by, cx, cy)\n    if XX > 0 and YY > 0:\n        x = ceil(XX)\n        y = ceil(YY)\n        if (x, y) == (1, 1):\n            return 1\n        if x == y:\n            tmp = x * 2 - 1\n            if \"r\" in ang and \"u\" in ang:\n                return tmp + 1\n            return tmp\n        tmp = (max(x, y) - 1) * 2\n        if x > y and \"r\" in ang:\n            return tmp + 1\n        elif y > x and \"u\" in ang:\n            return tmp + 1\n        return tmp\n    elif XX < 0 and YY > 0:\n        x = floor(XX)\n        y = ceil(YY)\n        x = abs(x)\n        if x >= y:\n            tmp = x * 2 - 1\n            if \"l\" in ang:\n                return tmp + 1\n            return tmp\n        else:\n            tmp = (y - 1) * 2\n            if \"u\" in ang:\n                return tmp + 1\n            return tmp\n    elif XX > 0 and YY < 0:\n        x = ceil(XX)\n        y = floor(YY)\n        y = abs(y)\n        if y >= x:\n            tmp = y * 2 - 1\n            if \"d\" in ang:\n                return tmp + 1\n            return tmp\n        else:\n            tmp = (x - 1) * 2\n            if \"r\" in ang:\n                return tmp + 1\n            return tmp\n    else:\n        x = floor(XX)\n        y = floor(YY)\n        x = abs(x)\n        y = abs(y)\n        if x == y:\n            tmp = 2 * x\n            if \"d\" in ang and \"l\" in ang:\n                return tmp + 1\n            return tmp\n        tmp = max(x, y) * 2 - 1\n        if x > y and \"l\" in ang:\n            return tmp + 1\n        if y > x and \"d\" in ang:\n            return tmp + 1\n        return tmp\n\n\nt = int(input())\nfor _ in range(t):\n    print(test())", "exec(\"a,b,c,d,e,f=map(int,input().split());g=a+c+e-max([a,c,e]);h=b+d+f-max([b,d,f]);print(max([abs(g),abs(h)])+(g*~-g and g==h));\"*int(input()))", "exec(\"a,b,c,d,e,f=map(int,input().split());g=a+c+e-max([a,c,e]);h=b+d+f-max([b,d,f]);print(max([abs(g),abs(h)])+(g*(g-1)and g==h));\"*int(input()))", "from queue import deque\n\ndef move(ku):\n\tx, y, dx, dy = ku\n\treturn (\n\t\t(x + dx, y + dy, -dx, -dy),\n\t\t(x, y, -dx, dy),\n\t\t(x, y + dy, -dx, -dy),\n\t\t(x, y + dy, dx, -dy),\n\t\t(x, y, dx, -dy),\n\t\t(x + dx, y, -dx, dy),\n\t\t(x + dx, y, -dx, -dy),\n\t)\n\ndef calc(x, y, dx, dy):\n\tif dx == 1 and dy == 1:\n\t\tif x == 0 and y == 0:\n\t\t\treturn 0\n\t\telif x == y:\n\t\t\treturn abs(x) * 2 + 1\n\t\telse:\n\t\t\treturn max(abs(x), abs(y)) * 2\n\telif dx == -1 and dy == 1:\n\t\tif x == 0 and y == 0:\n\t\t\treturn 1\n\t\telif abs(x) - abs(y) == 0:\n\t\t\tif x < 0:\n\t\t\t\treturn abs(x) * 2 + 1\n\t\t\telse:\n\t\t\t\treturn abs(y) * 2\n\t\telif abs(x) - abs(y) < 0:\n\t\t\treturn abs(y) * 2\n\t\telse:\n\t\t\tif x < 0:\n\t\t\t\treturn abs(x) * 2 + 1\n\t\t\telse:\n\t\t\t\treturn abs(x) * 2 - 1\n\telif dx == 1 and dy == -1:\n\t\tif y <= 0:\n\t\t\tif abs(x) - abs(y) <= 0:\n\t\t\t\treturn abs(y) * 2 + 1\n\t\t\telse:\n\t\t\t\treturn abs(x) * 2\n\t\telse:\n\t\t\tif abs(x) - abs(y) < 0:\n\t\t\t\treturn abs(y) * 2 - 1\n\t\t\telse:\n\t\t\t\treturn abs(x) * 2\n\telse:\n\t\tif x == 0 and y == 0:\n\t\t\treturn 2\n\t\telif x == 1 and y == 1:\n\t\t\treturn 1\n\t\telif y < 0:\n\t\t\tif x < 0:\n\t\t\t\tif abs(x) - abs(y) == 0:\n\t\t\t\t\treturn abs(x) * 2 + 2\n\t\t\t\telif abs(x) - abs(y) < 0:\n\t\t\t\t\treturn abs(y) * 2 + 1\n\t\t\t\telse:\n\t\t\t\t\treturn abs(x) * 2 + 1\n\t\t\telse:\n\t\t\t\tif abs(x) - abs(y) == 0:\n\t\t\t\t\treturn abs(x) * 2 + 1\n\t\t\t\telif abs(x) - abs(y) < 0:\n\t\t\t\t\treturn abs(y) * 2 + 1\n\t\t\t\telse:\n\t\t\t\t\treturn abs(x) * 2 - 1\n\t\telse:\n\t\t\tif x < 0:\n\t\t\t\tif abs(x) - abs(y) < -1:\n\t\t\t\t\treturn abs(y) * 2 - 1\n\t\t\t\telse:\n\t\t\t\t\treturn abs(x) * 2 + 1\n\t\t\telse:\n\t\t\t\tif abs(x) - abs(y) == 0:\n\t\t\t\t\treturn abs(x) * 2\n\t\t\t\telif abs(x) - abs(y) < 0:\n\t\t\t\t\treturn abs(y) * 2 - 1\n\t\t\t\telse:\n\t\t\t\t\treturn abs(x) * 2 - 1\n\nT = int(input())\n\nfor _ in range(T):\n\tax, ay, bx, by, cx, cy = list(map(int, input().split()))\n\t\n\tif ax == bx:\n\t\tgx = ax\n\telif bx == cx:\n\t\tgx = bx\n\telse:\n\t\tgx = cx\n\t\n\tif ay == by:\n\t\tgy = ay\n\telif by == cy:\n\t\tgy = by\n\telse:\n\t\tgy = cy\n\t\n\txs = [ax, bx, cx]\n\txs.remove(gx)\n\txs.remove(gx)\n\t\n\tys = [ay, by, cy]\n\tys.remove(gy)\n\tys.remove(gy)\n\t\n\tdx = xs[0] - gx\n\tdy = ys[0] - gy\n\t\n#\tgoal = (gx, gy, dx, dy)\n\t\n\tprint((calc(gx, gy, dx, dy)))\n\t\n", "t = int(input())\nfor _ in range(t):\n  ax,ay,bx,by,cx,cy = map(int,input().split())\n  mnx = min(ax,bx,cx)\n  mny = min(ay,by,cy)\n  tp = ((ax,ay),(bx,by),(cx,cy))\n  ans = 0\n  if (mnx+1,mny+1) not in tp:\n    if mnx == mny and mnx != 0:\n      ans += 1\n    ans += max(abs(mnx),abs(mny))*2\n    print(ans)\n  elif (mnx+1,mny) not in tp:\n    mnx = abs(mnx)\n    if mny < 0:\n      mny = abs(mny+1)\n    if mnx > mny:\n      print(mnx*2)\n    else:\n      print(mny*2+1)\n  elif (mnx,mny+1) not in tp:\n    mny = abs(mny)\n    if mnx < 0:\n      mnx = abs(mnx+1)\n    if mny > mnx:\n      print(mny*2)\n    else:\n      print(mnx*2+1)\n  else:\n    ans += 1\n    if mnx == mny and mnx != 0:\n      ans += 1\n    if mnx < 0:\n      mnx = abs(mnx+1)\n    if mny < 0:\n      mny = abs(mny+1)\n    ans += max(abs(mnx),abs(mny))*2\n    print(ans)", "def func(ary):\n  a=ary[0:2]\n  b=ary[2:4]\n  c=ary[4:6]\n  x=a[0]+b[0]+c[0]\n  y=a[1]+b[1]+c[1]\n  if x>0:\n    x-=x//3\n  else:\n    x+=1+abs(x)//3\n  if y>0:\n    y-=y//3\n  else:\n    y+=1+abs(y)//3\n  if x!=y:\n    t=max(abs(x-1),abs(y-1))\n    return t\n  else:\n    if x>0:\n      x-=1\n      if x==0:return 0\n      if x==1:return 1\n      return x+1\n    else:return abs(x-1)+1\n          \n\n\nt=int(input())\nquery=[list(map(int,input().split())) for _ in range(t)]\nfor x in query:print((func(x)))\n", "import numpy as np\nimport sys\nfrom sys import stdin\n\ndef short(v):\n  x=(v[0]+v[2]+v[4])//3*2+(v[0]+v[2]+v[4])%3-1\n  y=(v[1]+v[3]+v[5])//3*2+(v[1]+v[3]+v[5])%3-1\n  s=0\n  M=max(abs(x),abs(y))\n  s=s+M\n  if(x==y and x*(x-1)!=0):\n    s=s+1\n  print(s)\n  return\n  \n\ndef main():\n  for i in range(t):\n    short(c[i])\n  return\n\ninput = sys.stdin.readline\nt=int(input())\nc=[list(map(int,input().split())) for _ in range(t)]\nmain()", "ansl=[]\nfor q in range(int(input())):\n    ax,ay,bx,by,cx,cy = map(int, input().split())\n    fs = [(0,0),(0,1),(1,0)]\n    fs2 = [(-1,0),(0,0),(0,-1)]\n    if (ax,ay) in fs and (bx,by) in fs and (cx,cy) in fs:\n        ansl.append(0)\n        continue\n    if (ax,ay) in fs2 and (bx,by) in fs2 and (cx,cy) in fs2:\n        ansl.append(2)\n        continue\n    if (ax,ay) == (0,0) or (bx,by) == (0,0) or (cx,cy) == (0,0):\n        ans = 0\n        if (ax,ay) not in fs:\n            ans+=1\n        if (bx,by) not in fs:\n            ans+=1\n        if (cx,cy) not in fs:\n            ans+=1\n        ansl.append(ans)\n        continue\n\n\n    if abs(ax)<=abs(ay) and abs(bx)<=abs(by) and abs(cx)<=abs(cy):\n        ax,ay=ay,ax\n        bx,by=by,bx\n        cx,cy=cy,cx\n    if abs(ax)>=abs(ay) and abs(bx)>=abs(by) and abs(cx)>=abs(cy):\n        miny = min(ay,by,cy)\n        ay-=miny\n        by-=miny\n        cy-=miny\n        samex = 0\n        if ax==bx:\n            samex=ax\n            difx=cx\n        elif bx==cx:\n            samex=bx\n            difx=ax\n        else:\n            samex=cx\n            difx=bx\n        if difx < samex:\n            dist = difx*2+1\n        else:\n            dist = samex*2\n        dist = max(dist,dist*(-1))\n        ansl.append(dist)\n\n    else:\n        xp = 0\n        yp = 0\n        if abs(ax)==abs(ay):\n            xp = ax\n            yp = ay\n        elif abs(bx)==abs(by):\n            xp = bx\n            yp = by\n        elif abs(cx)==abs(cy):\n            xp = cx\n            yp = cy\n            \n        if xp >= 0 and yp>=0:\n            if max(ay,by,cy) == yp:\n                if xp==1:\n                    dist=1\n                else:\n                    dist = abs(xp)*2\n            else:\n                dist = abs(xp)*2+1    \n        elif xp < 0 and yp <0:\n            if max(ay,by,cy)==yp:\n                dist = abs(xp)*2+2\n            else:\n                dist = abs(xp)*2+1\n        elif xp >= 0 and yp <0:\n            if max(ay,by,cy)==yp:\n                dist = abs(xp)*2+1\n            else:\n                dist = abs(xp)*2 \n        else:\n            if max(ay,by,cy)==yp:\n                dist = abs(xp)*2\n            else:\n                dist = abs(xp)*2 +1 \n        ansl.append(dist)\n    \nfor a in ansl:print(a)", "def solv(x,y):\n    if x > 0:\n        x = x-(x//3) -1\n    else:\n        x = x+(2-x)//3 -1\n    if y > 0:\n        y = y-(y//3) -1\n    else:\n        y = y+(2-y)//3 -1    \n\n    if (x==0 and y==0): return 0\n    if (x==1 and y==1): return 1\n    return max({x,-x,y,-y}) + (x==y)\n \nT = int(input())\nfor i in range(T):\n    x,y = 0,0\n    ax,ay,bx,by,cx,cy = list(map(int, input().split()))\n    x = ax+bx+cx\n    y = ay+by+cy\n    print((solv(x,y)))\n", "t = int(input())\nfor i in range(t):\n    ax, ay, bx, by, cx, cy = map(int, input().split())\n    x = min(ax, bx, cx)\n    y = min(ay, by, cy)\n    ans = 0\n    if x >= 0 and y >= 0:\n        if x == 0 and y == 0:\n            pass\n        else:\n            ans += 1\n    num = abs(abs(x) - abs(y))\n    if x >= 0:\n        if y >= 0:\n            ans += max(num - 1, 0)\n        else:\n            if abs(x) > abs(y):\n                ans += num\n            else:\n                ans += max(num - 1, 0)\n    else:\n        if y >= 0:\n            if abs(y) > abs(x):\n                ans += num\n            else:\n                ans += max(num - 1, 0)\n        else:\n            ans += max(num - 1, 0)\n    ans += abs(x) + abs(y)\n    if x >= 0:\n        if y >= 0:\n            if round((ax + bx + cx) / 3) == max(ax, bx, cx) and round((ay + by + cy) / 3) == max(ay, by, cy):\n                ans += 1\n            else:\n                if abs(x) > abs(y):\n                    if round((ax + bx + cx) / 3) == max(ax, bx, cx):\n                        ans += 1\n                elif abs(y) > abs(x):\n                    if round((ay + by + cy) / 3) == max(ay, by, cy):\n                        ans += 1\n                elif x == 0 and y == 0:\n                    if round((ax + bx + cx) / 3) == max(ax, bx, cx) or round((ay + by + cy) / 3) == max(ay, by, cy):\n                        ans += 1\n        else:\n            if round((ax + bx + cx) / 3) == max(ax, bx, cx) and round((ay + by + cy) / 3) == min(ay, by, cy):\n                ans += 1\n            else:\n                if abs(x) >= abs(y):\n                    if round((ax + bx + cx) / 3) == max(ax, bx, cx):\n                        ans += 1\n                elif abs(y) > abs(x):\n                    if round((ay + by + cy) / 3) == min(ay, by, cy):\n                        ans += 1\n    else:\n        if y >= 0:\n            if round((ax + bx + cx) / 3) == min(ax, bx, cx) and round((ay + by + cy) / 3) == max(ay, by, cy):\n                ans += 1\n            else:\n                if abs(x) > abs(y):\n                    if round((ax + bx + cx) / 3) == min(ax, bx, cx):\n                        ans += 1\n                elif abs(y) >= abs(x):\n                    if round((ay + by + cy) / 3) == max(ay, by, cy):\n                        ans += 1\n        else:\n            if round((ax + bx + cx) / 3) == min(ax, bx, cx) and round((ay + by + cy) / 3) == min(ay, by, cy):\n                ans += 1\n            else:\n                if abs(x) > abs(y):\n                    if round((ax + bx + cx) / 3) == min(ax, bx, cx):\n                        ans += 1\n                elif abs(y) > abs(x):\n                    if round((ay + by + cy) / 3) == min(ay, by, cy):\n                        ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    ax,ay,bx,by,cx,cy = map(int,input().split())\n    x = ax+bx+cx\n    y = ay+by+cy\n    xv,xp = divmod(x,3)\n    yv,yp = divmod(y,3)\n    nx = xv*2+xp-1\n    ny = yv*2+yp-1\n    if nx == ny:\n        if nx == 0:\n            print(0)\n        elif nx == 1:\n            print(1)\n        else:\n            print(abs(nx)+1)\n    else:\n        print(max(abs(nx),abs(ny)))", "T = int(input())\n\nfor _ in range(T):\n    ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n    mx = min(ax, bx, cx)\n    dx = (ax + bx + cx) % 3 - 1\n    x = 2 * mx + dx\n    my = min(ay, by, cy)\n    dy = (ay + by + cy) % 3 - 1\n    y = 2 * my + dy\n    print((max(abs(x), abs(y)) + (1 if x == y and (mx != 0 or my != 0) else 0)))\n", "from collections import deque\ninpl = lambda: list(map(int,input().split()))\ndef sign(x):\n    return (x > 0) - (x < 0)\n# s, x, y\ntrans = {(1,0,0),(1,1,0),(2,1,0),(2,0,1),(2,1,1),(3,0,0),(3,0,1)}\nall_trans = [trans]\nfor i in range(3):\n    w = set()\n    for s, x, y in all_trans[-1]:\n        ns = (s+1) % 4\n        nx = -y\n        ny = x\n        w.add((ns,nx,ny))\n    all_trans.append(w)\n\n#print(all_trans)\nV = {(1,1):0, (-1,1):1, (-1,-1):2, (1,-1):3}\n\nque = deque([(0,0,0,0)])\nbfs = dict()\nbfs[(0,0,0)] = 0\nwhile que:\n    s, x, y, d = que.popleft()\n    if d > 10:\n        break\n    for ns, dx, dy in all_trans[s]:\n        nx = x + dx\n        ny = y + dy\n        if not (ns,nx,ny) in bfs:\n            que.append((ns, nx, ny, d+1))\n            bfs[(ns,nx,ny)] = d+1\n\nT = int(input())\nfor _ in range(T):\n    ax, ay, bx, by, cx, cy = inpl()\n    if ax == bx:\n        px, qx = ax, cx\n    elif ax == cx:\n        px, qx = ax, bx\n    else:\n        px, qx = bx, ax\n    if ay == by:\n        py, qy = ay, cy\n    elif ay == cy:\n        py, qy = ay, by\n    else:\n        py, qy = by, ay\n    ps = V[(qx-px, qy-py)]\n\n    ans = 0\n    th1, th2 = 3, 3\n    if abs(px) + abs(py) > th1:\n        k = min(abs(px),abs(py))\n        l = abs(abs(px)-abs(py))\n        if l < th1:\n            k -= (th1-l+1)//2\n        px -= sign(px)*k\n        py -= sign(py)*k\n        ans += k*2\n        if abs(px) > th2:\n            m = abs(px) - th2\n            px -= sign(px)*m\n            ans += m*2\n        elif abs(py) > th2:\n            m = abs(py) - th2\n            py -= sign(py)*m\n            ans += m*2\n    \n    # print(px,px,py,bfs[(ps,px,py)])\n    ans += bfs[(ps,px,py)]\n    print(ans)\n", "exec(\"a,b,c,d,e,f=map(int,input().split());g=a+c+e-max([a,c,e]);h=b+d+f-max([b,d,f]);print(max([abs(g),abs(h)])+((g<0 or g>1)and g==h));\"*int(input()))", "#3\u70b9\u306e\u914d\u7f6e\u3068\u305d\u306e\u91cd\u5fc3\u306f\u4e00\u5bfe\u4e00\u5bfe\u5fdc\nN, *PQRSTU = [int(_) for _ in open(0).read().split()]\nP, Q, R, S, T, U = [PQRSTU[_::len('PQRSTU')] for _ in range(len('PQRSTU'))]\n\n\ndef calc(x1, y1, x2, y2, x3, y3):\n    gx = x1 + x2 + x3\n    gy = y1 + y2 + y3\n    if gx > gy:\n        gx, gy = gy, gx\n    x, dx = divmod(gx, 3)\n    y, dy = divmod(gy, 3)\n    #gx=3*x+dx(dx=1 or 2)\n    if x == y:\n        if x == 0:\n            ret = 1 - (dx * dy == 1)\n        elif x > 0:\n            ret = 2 * y + 1 + (dx == dy == 2)\n        else:\n            ret = -2 * y + (dx * dy == 1)\n    elif x + abs(y) < 0:\n        ret = -2 * x - (dx == 2)\n    else:\n        ret = 2 * y + (dy == 2)\n    return ret\n\n\nans = []\nfor p, q, r, s, t, u in zip(P, Q, R, S, T, U):\n    ans += [calc(p, q, r, s, t, u)]\nprint(('\\n'.join(map(str, ans))))\n", "T = int(input())\nfor t in range(T):\n    ax, ay, bx, by, cx, cy = [int(i) for i in input().split()]\n    [ax, ay], [bx, by], [cx, cy] = sorted([[ax, ay],[bx, by],[cx, cy]], key=lambda x:x[1])\n    [ax, ay], [bx, by], [cx, cy] = sorted([[ax, ay],[bx, by],[cx, cy]], key=lambda x:x[0])\n\n    if [ax, ay, bx, by, cx, cy] == [0,0,0,1,1,0]:\n        print(0)\n        continue\n    elif [ax, ay, bx, by, cx, cy] == [0,1,1,0,1,1]:\n        print(1)\n        continue\n\n    if [bx,by-1] == [ax, ay] and [cx-1,cy] == [ax, ay]: # 1\n        g = [bx+cx -1 , by+cy -1 ]\n    if [bx,by-1] == [ax, ay] and [cx-1,cy-1] == [ax, ay]: # 2\n        g = [ax+cx -1 , ay+cy ]\n    if [bx-1,by+1] == [ax, ay] and [cx-1,cy] == [ax, ay]: # 3\n        g = [ax+bx , ay+by ]\n    if [bx-1,by] == [ax, ay] and [cx-1,cy-1] == [ax, ay]: # 4\n        g = [ax+cx , ay+cy -1 ]\n    \n    ans = max([abs(x) for x in g]) + (g[0] == g[1])\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    ax,ay,bx,by,cx,cy = map(int,input().split())\n    xdis = (ax+bx+cx)-1\n    ydis = (ay+by+cy)-1\n    if xdis % 3 == 0:\n        xneed = abs(xdis)*2//3\n    if xdis % 3 == 1:\n        xneed = (abs(xdis)*2+1)//3\n    if xdis % 3 == 2:\n        xneed = (abs(xdis)*2+2)//3\n    if ydis % 3 == 0:\n        yneed = abs(ydis)*2//3\n    if ydis % 3 == 1:\n        yneed = (abs(ydis)*2+1)//3\n    if ydis % 3 == 2:\n        yneed = (abs(ydis)*2+2)//3\n    if xdis*ydis > 1 and xneed == yneed:\n        print(xneed+1)\n    else:\n        print(max(xneed,yneed))", "#3\u70b9\u306e\u914d\u7f6e\u3068\u305d\u306e\u91cd\u5fc3\u306f\u4e00\u5bfe\u4e00\u5bfe\u5fdc\nN, *PQRSTU = [int(_) for _ in open(0).read().split()]\nP, Q, R, S, T, U = [PQRSTU[_::len('PQRSTU')] for _ in range(len('PQRSTU'))]\n\n\ndef calc(x1, y1, x2, y2, x3, y3):\n    gx = x1 + x2 + x3\n    gy = y1 + y2 + y3\n    if gx > gy:\n        gx, gy = gy, gx\n    x, dx = divmod(gx, 3)\n    y, dy = divmod(gy, 3)\n    #gx=3*x+dx(dx=1 or 2)\n    if x == y == 0:\n        ret = 1 - (dx * dy == 1)\n    elif 0 < x and x == y:\n        ret = 2 * y + 1 + (dx == dy == 2)\n    elif x == y:\n        ret = -2 * y + (dx * dy == 1)\n    elif x + abs(y) < 0:\n        ret = -2 * x - (dx == 2)\n    else:\n        ret = 2 * y + (dy == 2)\n    return ret\n\n\nans = []\nfor p, q, r, s, t, u in zip(P, Q, R, S, T, U):\n    ans += [calc(p, q, r, s, t, u)]\nprint(('\\n'.join(map(str, ans))))\n", "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(T, case):\n    def solver(X, Y):\n        X = (X - X // 3 if X > 0 else X + (2 - X) // 3) - 1\n        Y = (Y - Y // 3 if Y > 0 else Y + (2 - Y) // 3) - 1\n        if X == Y == 0: return 0\n        if X == Y == 1: return 1\n        return max(X, -X, Y, -Y) + (X == Y)\n\n    for ax, ay, bx, by, cx, cy in case:\n        print((solver(ax + bx + cx, ay + by + cy)))\n\n\ndef __starting_point():\n    T = int(input())\n    case = [[int(i) for i in input().split()] for _ in range(T)]\n    solve(T, case)\n\n    # # test\n    # from random import randint\n    # from func import random_str, random_ints\n    # solve()\n\n__starting_point()", "t = int(input())\nbuf = []\nfor _ in range(t):\n    ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n\n    mx = min(ax, bx, cx)\n    my = min(ay, by, cy)\n\n    dx = (ax == mx) + (bx == mx) + (cx == mx)\n    dy = (ay == my) + (by == my) + (cy == my)\n\n    if mx == 0 and my == 0:\n        if dx == 2 and dy == 2:\n            buf.append(0)\n        else:\n            buf.append(1)\n        continue\n\n    rx, ry = False, False\n    if mx < 0:\n        mx = -mx\n        dx = 3 - dx\n        rx = True\n    if my < 0:\n        my = -my\n        dy = 3 - dy\n        ry = True\n\n    ans = 2 * max(mx, my)\n\n    if mx == my:\n        ans += 1\n        if rx or ry:\n            ans -= 1\n            if (rx == False and dx == 1) or (ry == False and dy == 1):\n                ans += 1\n            elif rx and ry and dx == 1 and dy == 1:\n                ans += 1\n        elif dx == 1 and dy == 1:\n            ans += 1\n    elif mx > my:\n        if rx:\n            ans -= 1\n        if dx == 1:\n            ans += 1\n    elif mx < my:\n        if ry:\n            ans -= 1\n        if dy == 1:\n            ans += 1\n\n    # print(_, mx, my, dx, dy, ans)\n\n    buf.append(ans)\n\nprint(('\\n'.join(map(str, buf))))\n", "def scorec(x,y):\n  if x==y and x>0:\n    score=2*x-1\n  elif x==y and x<0:\n    score=2*abs(x)\n  else:\n    if y+x>0:\n      score=2*max(abs(x),abs(y))-2\n    else:\n      score=2*max(abs(x),abs(y))-1\n  return max(0,score)\nt=int(input())\n\nfor _ in range(t):\n  ax,ay,bx,by,cx,cy=list(map(int,input().split()))\n  overlap=0\n  ans1=scorec(ax,ay)\n  if ans1<=0:\n    overlap+=1\n  ans2=scorec(bx,by)\n  if ans2<=0:\n    overlap+=1\n  ans3=scorec(cx,cy)\n  if ans3<=0:\n    overlap+=1\n  ans=min(ans1,ans2,ans3)\n  if overlap>=2:\n    print((3-overlap))\n    continue\n  if (ans+2==ans1 and ans+2==ans2) or (ans+2==ans2 and ans+2==ans3) or (ans+2==ans1 and ans+2==ans3):\n    ans+=1\n  print((ans+2))\n", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n_turnx = {\n    1: 4,\n    2: 3,\n    3: 2,\n    4: 1\n}\n_turn90 = {\n    1: 4,\n    2: 3,\n    3: 1,\n    4: 2\n}\ndef subx(a,b,d):\n    if isinstance(a, tuple):\n        return min(subx(item,b,d) for item in a)\n    if d<0:\n        return subx(_turnx[a], _turnx[b], -d)\n    return suby(_turn90[a], _turn90[b], d)\n_turny = {\n    1: 3,\n    2: 4,\n    3: 1,\n    4: 2,\n}\ndef suby(a,b,d):\n    if isinstance(a, tuple):\n        return min(suby(item,b,d) for item in a)\n    if d<0:\n        return suby(_turny[a], _turny[b], -d)\n    elif d==0:\n        if a==b:\n            return 0\n        else:\n            return 1\n    elif d==1:\n        if a in (2,3) and b in (1,4):\n            return 1\n        elif a in (1,4) and b in (2,3):\n            return 3\n        else:\n            return 2\n    else:\n        ans = 2*(d-2)\n        if a in (1,4):\n            ans += 3\n        else:\n            ans += 2\n        if b in (1,4):\n            ans += 1\n        else:\n            ans += 2\n    return ans\nans = float(\"inf\")\nt = int(input())\nfor ind in range(t):\n    ax,ay,bx,by,cx,cy = list(map(int, input().split()))\n    if ax!=bx:\n        if bx==cx:\n            ax,ay,cx,cy = cx,cy,ax,ay\n        else:\n            bx,by,cx,cy = cx,cy,bx,by\n    if cx>ax:\n        if cy==max(ay,by):\n            k = 3\n        else:\n            k = 1\n    else:\n        if cy==max(ay,by):\n            k = 2\n        else:\n            k = 4\n    tx,ty = min(ax,bx,cx), min(ay,by,cy)\n    if tx==0:\n        if ty==0:\n            ans = suby(1,k,0)\n        else:\n            ans = suby(1,k,ty)\n    elif ty==0:\n        ans = subx(1,k,tx)\n    else:\n        if tx>0 and ty>0:\n            ans = 2*min(tx,ty) + 1\n            if tx>ty:\n                ans += subx((1,3,4),k,tx-ty)\n            elif ty>tx:\n                ans += suby((1,3,4),k,ty-tx)\n            else:\n                ans += suby((1,3,4),k,0)\n        elif tx>0 and ty<0:\n            tx,ty = abs(tx), abs(ty)\n            ans = 2*min(tx,ty)\n            if tx>ty:\n                ans += subx((1,3),k,tx-ty)\n            elif ty>tx:\n                ans += suby((1,3),k,tx-ty)\n            else:\n                ans += suby((1,3),k,0)\n        elif tx<0 and ty>0:\n            tx,ty = abs(tx), abs(ty)\n            ans = 2*min(tx,ty)\n            if tx>ty:\n                ans += subx((1,4),k,-tx+ty)\n            elif ty>tx:\n                ans += suby((1,4),k,-tx+ty)\n            else:\n                ans += suby((1,4),k,0)\n        else:\n            tx, ty = abs(tx), abs(ty)\n            ans = 2*min(tx,ty)\n            if tx>ty:\n                ans += subx((2,3,4),k,ty-tx)\n            elif ty>tx:\n                ans += suby((2,3,4),k,tx-ty)\n            else:\n                ans += suby((2,3,4),k,0)\n    print(ans)", "X = [[(0, 0, 1), (1, 0, 1), (0, 1, 2), (1, 0, 2), (1, 1, 2), (0, 0, 3), (0, 1, 3)], [(0, 0, 2), (0, 1, 2), (-1, 0, 3), (0, 1, 3), (-1, 1, 3), (0, 0, 0), (-1, 0, 0)], [(0, 0, 3), (-1, 0, 3), (0, -1, 0), (-1, 0, 0), (-1, -1, 0), (0, 0, 1), (0, -1, 1)], [(0, 0, 0), (0, -1, 0), (1, 0, 1), (0, -1, 1), (1, -1, 1), (0, 0, 2), (1, 0, 2)]]\nA = [[(0, 0, 0)], [(0, 0, 1), (1, 0, 1), (0, 1, 2), (1, 0, 2), (1, 1, 2), (0, 0, 3), (0, 1, 3)], [(0, 0, 2), (-1, 0, 3), (-1, 1, 3), (-1, 0, 0), (1, 1, 3), (1, 0, 0), (-1, 1, 3), (-1, 1, 0), (-1, 0, 0), (0, 1, 1), (1, 0, 3), (1, -1, 0), (0, -1, 0), (1, -1, 1), (1, 1, 3), (1, 0, 0), (0, 1, 0), (1, 1, 1), (0, -1, 0), (0, -1, 1), (1, -1, 1), (0, 0, 2), (0, 1, 0), (1, 1, 1)]]\nT = int(input())\nfor _ in range(T):\n    ax, ay, bx, by, cx, cy = map(int, input().split())\n    sx = ax + bx + cx\n    sy = ay + by + cy\n    sx3, sy3 = sx % 3, sy % 3\n    tp = [0, 3, 1, 2][(sx3 - 1) * 2 + (sy3 - 1)]\n    x, y = (sx + 1) // 3, (sy + 1) // 3\n    x0, y0, tp0 = 0, 0, 0\n    if (x, y, tp) == (x0, y0, tp0):\n        print(0)\n        continue\n    if (x, y, tp) in X[tp0]:\n        print(1)\n        continue\n    B = [[(x, y, tp)], [], []]\n    for i in range(2):\n        for x, y, tp in B[i]:\n            for dx, dy, ntp in X[tp]:\n                B[i+1].append((x+dx, y+dy, ntp))\n\n    mi = 10 ** 30\n    for i in range(3):\n        for x1, y1, t1 in A[i]:\n            for j in range(3):\n                for x2, y2, t2 in B[j]:\n                    if t1 == t2:\n                        d = max(abs(x1 - x2), abs(y1 - y2)) * 2 + i + j\n                        p = (x1 - x2) * (y1 - y2)\n                        if (p >= 0 and (t1 % 2)) or (p <= 0 and (t1 % 2 == 0)):\n                            if d < mi:\n                                mi = d\n    print(mi)        ", "# x, y 0\u4ee5\u4e0a\ndef dp1(x, y):\n    if x == 0 and y == 0:\n        return 0\n    if x == y:\n        return 2 * x - 1\n    else:\n        return (max(x, y) - 1) * 2\n\n\n# x\u304c\u8ca0\ndef dp2(x, y):\n    if x >= y:\n        return 2 * x - 1\n    else:\n        return 2 * y - 2\n\n\n# x, y\u304c\u8ca0\ndef dp3(x, y):\n    if x == y:\n        return 2 * x\n    else:\n        return 2 * max(x, y) - 1\n\n\ndef dp(x, y):\n    if x >= 0 and y >= 0:\n        return dp1(x, y)\n    if x < 0 and y < 0:\n        return dp3(-x, -y)\n    if x < 0:\n        return dp2(-x, y)\n    return dp2(-y, x)\n\n\ndef solve(ax, ay, bx, by, cx, cy):\n    a = dp(ax, ay)\n    b = dp(bx, by)\n    c = dp(cx, cy)\n    d = max(a, b, c)\n    if d == 0:\n        return 0\n    count = 0\n    if a == d:\n        count += 1\n    if b == d:\n        count += 1\n    if c == d:\n        count += 1\n    if count == 1:\n        if a + b + c == 3 * d - 2 and d > 1:\n            return d + 1\n        else:\n            return d\n    else:\n        return d + 1\n\n\ndef main(in_file):\n    f = open(in_file)\n    t = int(f.readline())\n    for _ in range(t):\n        ax, ay, bx, by, cx, cy = [int(x) for x in f.readline().split()]\n        print(solve(ax, ay, bx, by, cx, cy))\n\n\ndef __starting_point():\n    main(0)\n__starting_point()", "# URL : https://atcoder.jp/contests/arc109/tasks/arc109_d\nT = int(input())\nfor _ in range(T):\n    ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n    x = ax + bx + cx\n    y = ay + by + cy\n    if x == y:\n        if x == 1:\n            print((0))\n        elif x == 2:\n            print((1))\n        elif x > 0:\n            if x % 3 == 2:\n                print(((x + 1) // 3 * 2))\n            else:\n                print(((x - 1) // 3 * 2 + 1))\n        else:\n            x = -x\n            if x % 3 == 2:\n                print(((x + 1) // 3 * 2 + 1))\n            else:\n                print(((x + 2) // 3 * 2))\n    else:\n        res = 0\n        for d in (x, y):\n            if d % 3 == 2:\n                if d > 0:\n                    res = max(res, (d - 2) // 3 * 2 + 1)\n                else:\n                    res = max(res, (-d - 1) // 3 * 2 + 1)\n            else:\n                if d > 0:\n                    res = max(res, (d - 1) // 3 * 2)\n                else:\n                    res = max(res, (-d + 1) // 3 * 2)\n        print(res)\n", "import sys\nfrom math import floor\ndef input(): return sys.stdin.readline().strip()\n\ndef sub(ax, ay, bx, by, cx, cy):\n    mx, my = (ax + bx + cx) / 3, (ay + by + cy) / 3\n    mx, my = floor(mx * 2), floor(my * 2)\n    k = max(abs(mx), abs(my))\n    if k == 0:\n        return 0\n    if k <= 1:\n        return 1 if (mx, my) != (-1, -1) else 2\n    return k if mx != my else k + 1\n\ndef main():\n    T = int(input())\n    ans_list = []\n    \"\"\"\n    L\u5b57\u306e\u91cd\u5fc3\u3092\u8003\u3048\u308b\u3053\u3068\u3067\u3001L\u5b57\u3092\u70b9\u3068\u3057\u3066\u6271\u3048\u308b\u3002\n    \u7279\u306b\u5404\u30de\u30b9\u30922x2\u306b4\u7b49\u5206\u3059\u308b\u3053\u3068\u3067\u3001\u70b9\u306e\u79fb\u52d5\u65b9\u6cd5\u3082\u660e\u78ba\u306b\u8996\u899a\u5316\u3067\u304d\u308b\u3002\n    \"\"\"\n    for _ in range(T):\n        ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n        ans_list.append(sub(ax, ay, bx, by, cx, cy))\n    for ans in ans_list: print(ans)\n\ndef __starting_point():\n    main()\n\n\n\n\n\n__starting_point()", "from collections import defaultdict\nT=int(input())\nfor _ in range(T):\n    ax,ay,bx,by,cx,cy=list(map(int,input().split()))\n    X=defaultdict(int)\n    Y=defaultdict(int)\n    X[ax]+=1\n    X[bx]+=1\n    X[cx]+=1\n    Y[ay]+=1\n    Y[by]+=1\n    Y[cy]+=1\n    x=min(X)\n    y=min(Y)\n    r=None\n    if X[x]==1 and Y[y]==1:\n        r=0\n    elif X[x]==1 and Y[y]==2:\n        r=3\n    elif X[x]==2 and Y[y]==1:\n        r=1\n    else:\n        r=2\n    if r==0:\n        ans=max(abs(2*x+1),abs(2*y+1))\n        if x==y and x!=0:\n            ans+=1\n        print(ans)\n    elif r==1:\n        t=None\n        ans=None\n        if y>=0:\n            t=abs(y)-abs(x)\n        else:\n            t=abs(y+1)-abs(x)\n        if t>=0:\n            if y>=0:\n                ans=2*abs(y)+1\n            else:\n                ans=2*abs(y)-1\n        else:\n            ans=2*abs(x)\n        print(ans)\n    elif r==3:\n        t=None\n        ans=None\n        if x>=0:\n            t=abs(x)-abs(y)\n        else:\n            t=abs(x+1)-abs(y)\n        if t>=0:\n            if x>=0:\n                ans=2*abs(x)+1\n            else:\n                ans=2*abs(x)-1\n        else:\n            ans=2*abs(y)\n        print(ans)\n    else:\n        ans=2*max(abs(x),abs(y))\n        if x==y and x!=0:\n            ans+=1\n        print(ans)\n", "T = int(input())\nA = []\ndef direction(inp):\n\tif inp.count(min(inp)) == 1:\n\t\treturn 1\n\telse:\n\t\treturn 0\n\nfor i in range(T):\n\tx1, y1, x2, y2, x3, y3 = map(int,input().split())\n\tx = [x1,x2,x3]\n\ty = [y1,y2,y3]\n\tdst = [min(x)*2 + direction(x), min(y)*2 + direction(y)]\n\tstep = max(abs(dst[0]),abs(dst[1]))\n\tif dst == [0,0]:\n\t\tstep = 0\n\telif dst == [1,1]:\n\t\tstep = 1\n\telif dst[0] == dst[1]:\n\t\tstep += 1\n\tA += [step]\nfor i in A:\n\tprint(str(i))", "import math\nimport collections\nfor z in range(int(input())):\n    a = [tuple for i in range(3)]\n    A = list(map(int, input().strip().split()))\n    X, Y = 0, 0\n    j = 0\n    for i in range(3):\n        x, y = A[2 * i], A[2 * i + 1]\n        X += x\n        Y += y\n        j += 1\n    Z = - X\n    if X > 0:\n        X -= (X // 3)\n    else:\n        X += (2 - X) // 3\n    Z = - Y\n    if Y > 0:\n        Y -= (Y // 3)\n    else:\n        Y += (2 - Y) // 3\n    if X == 1 and Y == 1:\n        print((0))\n    elif X == 2 and Y == 2:\n        print((1))\n    elif X == Y:\n        print((max(abs(X - 1), abs(Y - 1)) + 1))\n    else:\n        print((max(abs(X - 1), abs(Y - 1))))\n\n", "T = int(input())\nfor _ in range(T):\n    ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n    ldx = min(ax, bx, cx)\n    ldy = min(ay, by, cy)\n    isleft = int((ax, bx, cx).count(ldx) == 2)\n    if ldx > 0:\n        transx = ldx + (1 - isleft)\n    elif ldx < 0:\n        transx = abs(ldx) + isleft - 1\n    else:\n        transx = 1 - isleft\n\n    isdown = int((ay, by, cy).count(ldy) == 2)\n    if ldy > 0:\n        transy = ldy + (1 - isdown)\n    elif ldy < 0:\n        transy = abs(ldy) + isdown - 1\n    else:\n        transy = 1 - isdown\n    \n    \n    # print(ldx, ldy, transx, transy)\n    ans = 0\n    if ldx == ldy != 0 and (isdown == isleft):\n        ans += 1\n    # transy = max( transy, abs(ldx))\n    # transx = max(transx , (ldy))\n    ans += max(transy + abs(ldy), transx + abs(ldx))\n    print(ans)\n    # print((ax, bx, cx).count(curx) , (ay, by, cy).count(cury))\n", "#!/usr/bin/env python3\n\ndef solve2(p):\n    P = (sum(p[0::2]), sum(p[1::2]))\n    x = (P[0] // 3) * 2 + (P[0] - 1) % 3\n    y = (P[1] // 3) * 2 + (P[1] - 1) % 3\n    if x == y:\n        if x == 0:\n            print((0))\n            return '0'\n        elif x == 1:\n            print((1))\n            return '1'\n        elif x > 0:\n            print((x + 1))\n            return str(x + 1)\n        else:\n            print((-x + 1))\n            return str(1 - x)\n    else:\n        print((max(abs(x), abs(y))))\n        return str(max(abs(x), abs(y)))\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools\n# (tips: You use the default template now. You can remove this line by\n# using your custom template)\n\n\ndef main():\n    N = int(input())\n    Ps = [list(map(int, input().split())) for _ in range(N)]\n    for P in Ps:\n        solve2(P)\n\n    # Failed to predict input format\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "for _ in range(int(input())):\n    ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n\n    x = min(ax, bx, cx)\n    y = min(ay, by, cy)\n\n    if [x, y] not in [[ax, ay], [bx, by], [cx, cy]]:\n      x = 2*x + 1\n      y = 2*y + 1\n    elif [x+1, y] not in [[ax, ay], [bx, by], [cx, cy]]:\n        x *= 2\n        y = 2*y + 1\n    elif [x, y+1] not in [[ax, ay], [bx, by], [cx, cy]]:\n        x = 2*x + 1\n        y *= 2\n    else:\n        x *= 2\n        y *= 2\n    \n        \n    if x != y:\n      print((max(abs(x), abs(y))))\n    elif x == 0 or x == 1:\n      print(x)\n    else:\n      print((abs(x)+1))\n\n", "def count(x,y,p,q):\n    res = 0\n    if x==0 and y==0:\n        if p==-1 and q==-1:\n            return 0\n        else:\n            return 1\n    if x==0 or y==0:\n        if y==0:\n            x,y = y,x\n            p,q = q,p\n        if y>0:\n            res += 2*y\n            if q==+1:\n                res += 1\n        if y<0:\n            res += -2*y-1\n            if q==-1:\n                res += 1\n        return res\n    p0,q0 = -1, -1\n    if x < 0:\n        x = -x\n        p = -p\n        p0 = -p0\n    if y < 0:\n        y = -y\n        q = -q\n        q0 = -q0\n    if x > y:\n        x,y = y,x\n        p,q = q,p\n        p0,q0 = q0,p0\n\n    res += 2*x\n    if x==y:\n        if p0*q0==-1 and p*q==-1:\n            if p0!=p or q0!=q:\n                res += 1\n        if p0+q0==-2:\n            res += 1\n        if p+q==2:\n            res += 1\n        return res\n    if p0+q0==-2:\n        res += 1\n    if p0==1 and q0==-1:\n        res += 1\n    res += 2*(y-x)-1\n    if q==+1:\n        res += 1\n    return res\n\nT = int(input())\nxy = [list(map(int,input().split())) for _ in range(T)]\n\nfor t in range(T):\n    ax,ay,bx,by,cx,cy = xy[t]\n    x = sum(list(set([ax,bx,cx])))\n    y = sum(list(set([ay,by,cy])))\n    if (ax+bx+cx)/3 - x/2 > 0:\n        p = 1\n    else:\n        p = -1\n    if (ay+by+cy)/3 - y/2 > 0:\n        q = 1\n    else:\n        q = -1\n    ans = count((x-1)//2, (y-1)//2, p, q)\n    print(ans)\n\n"]