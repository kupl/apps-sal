["class Solution:\n     def decodeString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         stack = []\n         stack.append([\"\", 1])\n         num = \"\"\n         for ch in s:\n             if ch.isdigit():\n               num += ch\n             elif ch == '[':\n                 stack.append([\"\", int(num)])\n                 num = \"\"\n             elif ch == ']':\n                 st, k = stack.pop()\n                 stack[-1][0] += st*k\n             else:\n                 stack[-1][0] += ch\n         return stack[0][0]\n \n", "class Solution:\n     def decodeString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         m = len(s)\n         if m == 0:\n             return ''\n         result = []\n         for i in s:\n             if i != ']':\n                 result.append(i)\n             else:\n                 char_temp = []            \n                 r1m = len(result)            \n                 for j in range(r1m-1, -1, -1):\n                     if result[j] != '[':\n                         char_temp.insert(0, result.pop())\n                     else:\n                         result.pop()\n                         break\n \n                 digit_char = []\n                 r2m = len(result)\n                 for j in range(r2m-1, -1, -1):\n                     if result[j].isdigit():\n                         digit_char.insert(0, result.pop())\n                     else:\n                         break\n                 result += char_temp*(int(''.join(digit_char)))\n         return ''.join(result)\n             \n                     \n", "class Solution:\n     def decodeString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         stack_num = []\n         stack_str = []\n         num = ''\n         string = ''\n         for c in s:\n             if c.isdigit():\n                 if num == '':\n                     stack_str.append(string)\n                     string = ''\n                 num += c\n             elif c == '[':\n                 stack_num.append(int(num))\n                 num = ''\n             elif c == ']':\n                 string = stack_str.pop() + string * stack_num.pop()\n             else:\n                 string += c\n         return string\n", "class Solution:\n     def decodeString(self, s):\n         count = ''\n         res = ''\n         count_stack = []\n         res_stack = []\n \n         for i in range(len(s)):\n             if ord('0') <= ord(s[i]) <= ord('9'):\n                 count += s[i]\n             elif s[i] == '[':\n                 count_stack.append(int(count) if count else 0)\n                 res_stack.append(res)\n                 count = ''\n                 res = ''\n             elif s[i] == ']':\n                 res = res_stack.pop() + res * count_stack.pop()\n             else:\n                 res += s[i]\n         return res\n", "class Solution:\n     def decodeString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if len(s) == 0:\n             return \"\"\n         idx = 0\n         while s[idx].isdigit():\n             idx += 1\n         if idx > 0:\n             k = int(s[:idx])\n             idx += 1\n             idx_from = idx\n             bracket_count = 1\n             while bracket_count > 0:\n                 if s[idx] == \"[\":\n                     bracket_count += 1\n                 elif s[idx] == \"]\":\n                     bracket_count -= 1\n                 idx += 1\n             return self.decodeString(s[idx_from:idx-1]) * k + self.decodeString(s[idx:])\n         return s[0] + self.decodeString(s[1:])", "class Solution:\n     def decodeString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         stack = []\n         stack.append([\"\", 1])\n         num = \"\"\n         for ch in s:\n             if ch.isdigit():\n                 num += ch\n             elif ch == '[':\n                 stack.append([\"\", int(num)])\n                 num = \"\"\n             elif ch == ']':\n                 st, k = stack.pop()\n                 stack[-1][0] += st*k\n             else:\n                 stack[-1][0] += ch\n         return stack[0][0]\n \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n         \n \n \n \n # def decodeString(self, s):\n #     while '[' in s:\n #         s = re.sub(r'(\\d+)\\[([a-z]*)\\]', lambda m: int(m.group(1)) * m.group(2), s)\n #     return s            \n"]