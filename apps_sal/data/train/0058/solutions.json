["mem = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\n\ndef f(n, m, k):\n    if mem[n][m][k]:\n        return mem[n][m][k]\n    if (n*m == k) or (k == 0):\n        return 0\n    cost = 10**9\n    for x in range(1, n//2 + 1):\n        for z in range(k+1):\n            cost = min(cost, m*m + f(n-x, m, k-z) + f(x, m, z))\n    for y in range(1, m//2 + 1):\n        for z in range(k+1):\n            cost = min(cost, n*n + f(n, m-y, k-z) + f(n, y, z))\n    mem[n][m][k] = cost\n    return cost\n\n\nt = int(input())\nfor i in range(t):\n    n, m, k = list(map(int, input().split()))\n    print(f(n, m, k))\n\n", "import sys\n\n# sys.stdin = open('ivo.in')\n\nmem = []\nfor i in range(32):\n    mem.append([[-1] * 52 for u in range(32)])\n\ndef solve(x, y, z):\n    if x > y:\n        mem[x][y][z] = solve(y, x, z)\n        return mem[x][y][z]\n    if x * y == z or z == 0:\n        mem[x][y][z] = 0\n        return 0\n    if x * y < z:\n        mem[x][y][z] = -2\n        return -2\n    res = -2\n    for i in range(1, x//2 + 1):\n        for eaten in range(z + 1):\n            t1 = mem[i][y][eaten] if mem[i][y][eaten] != -1 else solve(i, y, eaten)\n            if t1 == -2:\n                continue\n            t2 = mem[x - i][y][z - eaten] if mem[x - i][y][z - eaten] != -1 else solve(x - i, y, z - eaten)\n            if t2 == -2:\n                continue\n            if res == -2 or res > t1 + t2 + y * y:\n                res = t1 + t2 + y * y\n\n    for j in range(1, y//2 + 1):\n        for eaten in range(z + 1):\n            t1 = mem[x][j][eaten] if mem[x][j][eaten] != -1 else solve(x, j, eaten)\n            if t1 == -2:\n                continue\n            t2 = mem[x][y - j][z - eaten] if mem[x][y - j][z - eaten] != -1 else solve(x, y - j, z - eaten)\n            if t2 == -2:\n                continue\n            if res == -2 or res > t1 + t2 + x * x:\n                res = t1 + t2 + x * x\n\n    mem[x][y][z] = res\n    return mem[x][y][z]\n\nt = int(sys.stdin.readline())\nfor it in range(t):\n    n, m, k = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, m, k))\n\n\n", "d = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\n\ndef rec(n, m, k):\n    nonlocal d\n    if n*m == k or k == 0:\n        return 0\n    if d[n][m][k] > 0:\n        return d[n][m][k]\n    if n*m<k:\n        return 10**10\n    cost = 10**10\n    for i in range(1, n // 2 + 1):\n        for j in range(k+1):\n            cost = min(cost, m*m + rec(n-i, m, k-j) + rec(i, m, j))\n    for i in range(1, m // 2 + 1):\n        for j in range(k+1):\n            cost = min(cost, n*n + rec(n, m-i, k-j) + rec(n, i, j))\n    d[n][m][k] = cost\n    return cost\n\np = []\nt = int(input())\nfor i in range(t):\n    n, m, k = list(map(int, input().split()))\n    p.append(rec(n, m, k))\nprint('\\n'.join(str(x) for x in p))\n", "d = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\n\ndef rec(n, m, k):\n    nonlocal d\n    if n*m == k or k == 0:\n        return 0\n    if d[n][m][k] > 0:\n        return d[n][m][k]\n    if n*m<k:\n        return 10**10\n    cost = 10**10\n    for i in range(1, n // 2 + 1):\n        for j in range(k+1):\n            cost = min(cost, m*m + rec(n-i, m, k-j) + rec(i, m, j))\n    for i in range(1, m // 2 + 1):\n        for j in range(k+1):\n            cost = min(cost, n*n + rec(n, m-i, k-j) + rec(n, i, j))\n    d[n][m][k] = cost\n    return cost\n\np = []\nt = int(input())\nfor i in range(t):\n    n, m, k = list(map(int, input().split()))\n    #p.append(rec(n, m, k))\n    print(rec(n, m, k))\n#print('\\n'.join(str(x) for x in p))\n", "d = [0] * 49011\n\ndef g(n, m, k):\n    t = 1e9\n    for i in range(1, m // 2 + 1):\n        for j in range(k + 1):\n            t = min(t, f(n, m - i, k - j) + f(n, i, j))\n    return n * n + t\n\ndef f(n, m, k):\n    if n > m: n, m = m, n\n    k = min(k, n * m - k)\n    if k == 0: return 0\n    if k < 0: return 1e9\n    q = n + 31 * m + 961 * k\n    if d[q] == 0: d[q] = min(g(n, m, k), g(m, n, k))\n    return d[q]\n\nfor q in range(int(input())):\n    n, m, k = map(int, input().split())\n    print(f(n, m, k))", "d = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\n\ndef rec(n, m, k):\n    nonlocal d\n    if n*m == k or k == 0:\n        return 0\n    if d[n][m][k] > 0:\n        return d[n][m][k]\n    if n*m<k:\n        return 10**10\n    cost = 10**10\n    for i in range(1, n // 2 + 1):\n        for j in range(k+1):\n            cost = min(cost, m*m + rec(n-i, m, k-j) + rec(i, m, j))\n    for i in range(1, m // 2 + 1):\n        for j in range(k+1):\n            cost = min(cost, n*n + rec(n, m-i, k-j) + rec(n, i, j))\n    d[n][m][k] = cost\n    return cost\n\np = []\nt = int(input())\nfor i in range(t):\n    n, m, k = map(int, input().split())\n    p.append(rec(n, m, k))\nprint('\\n'.join(str(x) for x in p))", "d = [ [ [ 0 for i in range(51) ] for j in range(31) ] for g in range(31)]\ndef rec(n, m ,k):\n    nonlocal d\n    if k == 0 or n*m == k:\n        return 0\n    if d[n][m][k] > 0 :\n        return d[n][m][k]\n    if n * m < k:\n        return 10 ** 10\n    cost  = 10**10\n    for i in range(1, n//2 +1):\n        for j in range(k+1):\n            cost = min(cost, m**2 + rec(i, m, j) + rec(n-i, m, k-j))\n    for i in range(1, m//2 +1):\n        for j in range(0, k+1):\n            cost = min(cost, n**2 + rec(n, i, j) + rec(n, m-i, k-j))\n    d[n][m][k] = cost\n    return cost\nt = int(input())\na = []\nfor c in range(t):\n    n, m ,k = map(int, input().split())\n    a.append(rec(n,m,k))\nprint('\\n'.join(str(x) for x in a))", "t=int(input())\nd=[]\nfor i in range(31):\n    dd=[]\n    for j in range(31):\n        dd.append([0]*51)\n    d.append(dd)\nd[1][1][1]=0\nfor i in range(1,31):\n    for j in range(1,31):\n        for k in range(1,min(i*j,50)+1):\n            if k>i*j//2:\n                d[i][j][k]=d[i][j][i*j-k]\n            elif i>j:\n                d[i][j][k]=d[j][i][k]\n            elif (i,j)!=(1,1):\n                k=min(k,i*j-k)\n                kk=i*j-k\n                jj=(i**2*j)*(j**2)*i\n                for l in range(1,i):\n                    if k<=l*j:\n                        jj=min(jj,d[l][j][k]+j**2)\n                    else:\n                        k1=k-l*j\n                        jj=min(jj,d[i-l][j][k1]+j**2)\n                    if kk<=l*j:\n                        if kk<=50:\n                            jj=min(jj,d[l][j][kk]+j**2)\n                    else:\n                        kk1=kk-l*j\n                        if kk1<=50:\n                            jj=min(jj,d[i-l][j][kk1]+j**2)\n                for l in range(1,j):\n                    if k<=l*i:\n                        jj=min(jj,d[i][l][k]+i**2)\n                    else:\n                        k1=k-l*i\n                        jj=min(jj,d[i][j-l][k1]+i**2)\n                    if kk<=l*i:\n                        if kk<=50:\n                            jj=min(jj,d[i][l][kk]+i**2)\n                    else:\n                        kk1=kk-l*i\n                        if kk1<=50:\n                            jj=min(jj,d[i][j-l][kk1]+i**2)\n                d[i][j][k]=jj\nfor i in range(t):\n    n,m,k=list(map(int,input().split()))\n    jj=d[n][m][k]\n    print(jj)\n", "mem = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\n\ndef f(n, m, k):\n    if mem[n][m][k]:\n        return mem[n][m][k]\n    if (n*m == k) or (k == 0):\n        return 0\n    cost = 10**9\n    for x in range(1, n//2 + 1):\n        for z in range(k+1):\n            cost = min(cost, m*m + f(n-x, m, k-z) + f(x, m, z))\n    for y in range(1, m//2 + 1):\n        for z in range(k+1):\n            cost = min(cost, n*n + f(n, m-y, k-z) + f(n, y, z))\n    mem[n][m][k] = cost\n    return cost\n\n\nt = int(input())\nfor i in range(t):\n    n, m, k = map(int, input().split())\n    print(f(n, m, k))", "t = int(input())\n\ndp = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\ndef cost(n, m, k):\n    if (dp[n][m][k] or k == 0 or n * m == k): return dp[n][m][k]\n    c = 10**9\n    for i in range(1, n // 2 + 1):\n        for j in range(k + 1):\n            c = min(c, cost(n - i, m, k - j) + cost(i, m, j) + m * m)\n    for i in range(1, m // 2 + 1):\n        for j in range(k + 1):\n            c = min(c, cost(n, m - i, k - j) + cost(n, i, j) + n * n)\n    dp[n][m][k] = c\n    return c\n\nfor _ in range(t):\n    n, m, k = list(map(int, input().split()))\n    print(cost(n, m, k))\n\n# mem = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\n\n# def f(n, m, k):\n#     if mem[n][m][k]:\n#         return mem[n][m][k]\n#     if (n*m == k) or (k == 0):\n#         return 0\n#     cost = 10**9\n#     for x in range(1, n//2 + 1):\n#         for z in range(k+1):\n#             cost = min(cost, m*m + f(n-x, m, k-z) + f(x, m, z))\n#     for y in range(1, m//2 + 1):\n#         for z in range(k+1):\n#             cost = min(cost, n*n + f(n, m-y, k-z) + f(n, y, z))\n#     mem[n][m][k] = cost\n#     return cost\n\n\n# t = int(input())\n# for i in range(t):\n#     n, m, k = map(int, input().split())\n#     print(f(n, m, k))\n", "t = int(input())\n\ndp = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\ndef cost(n, m, k):\n    if (dp[n][m][k] or k == 0 or n * m == k): return dp[n][m][k]\n    c = 10**9\n    for i in range(1, n // 2 + 1):\n        for j in range(k + 1):\n            c = min(c, cost(i, m, j) + cost(n - i, m, k - j) + m * m)\n    for i in range(1, m // 2 + 1):\n        for j in range(k + 1):\n            c = min(c, cost(n, i, j) + cost(n, m - i, k - j) + n * n)\n    dp[n][m][k] = c\n    return c\n\nfor _ in range(t):\n    n, m, k = list(map(int, input().split()))\n    print(cost(n, m, k))\n\n", "D = {}\n\n\ndef h(m,n,answ,k):\n    x = answ\n    for i in range(1,(n+2)//2):\n        if k >= i*m:\n            if m**2+ans(m,n-i,k-i*m) < x:\n                x = m**2+ans(m,n-i,k-i*m)\n        if k <= (n-i)*m:\n            if m**2+ans(m,n-i,k) < x:\n                x = m**2+ans(m,n-i,k)\n        if k >= (n-i)*m:\n            if m**2+ans(m,i,k-(n-i)*m) < x:\n                x = m**2+ans(m,i,k-(n-i)*m)\n        if k <= i*m:\n            if m**2+ans(m,i,k) < x :\n                x = m**2+ans(m,i,k)\n    return x\ndef ans(m,n,k):\n    if k == 0:\n        D[(m,n,k)] = 0\n        D[(n,m,k)] = 0\n        return 0\n    if m*n == k:\n        D[(m,n,k)] = 0\n        D[(n,m,k)] = 0\n        return 0\n    elif m == 1:\n        D[(m,n,k)] = 1\n        D[(n,m,k)] = 1\n        return 1\n    elif n == 1:\n        D[(m,n,k)] = 1\n        D[(n,m,k)] = 1\n        return 1\n    elif (m,n,k) in D:\n        return D[(m,n,k)]\n    else:\n        answ = (n**2)*m\n        t = h(m,n,answ,k)\n        if t < answ:\n            answ = t\n        s = h(n,m,answ,k)\n        if s < answ:\n            answ = s\n        D[(m,n,k)] = answ\n        D[(n,m,k)] = answ\n        return answ\n\nfor i in range(30,0,-1):\n    for j in range(i,0,-1):\n        for k in range(0,min(i*j,50)+1):\n            ans(i,j,k)\n\nt = int(input())\n\nfor i in range(t):\n    m,n,k = [int(x) for x in input().split()]\n    print(D[(m,n,k)])", "import sys\ninput=sys.stdin.readline\ndef main():\n\tans=[]\n\tmemo=[[[-1 for _ in range(51)] for _ in range(31)] for _ in range(31)]\n\tdef  solve(n, m , k) :\n\t\tif n*m == k or k==0: return 0\n\t\tif memo[n][m][k] > -1 : return memo[n][m][k]\n\t\tif memo[m][n][k] > -1 : memo[n][m][k]=memo[m][n][k] ; return memo[n][m][k]\n\t\tr=float('inf')\n\t\tfor i in range(k+1):\n\t\t\tfor j in range(1,max(m,n)):\n\t\t\t\tif m > j :\n\t\t\t\t\tr=min(r,n**2+solve(j,n,i)+solve(m-j,n,k-i))\n\t\t\t\tif n > j :\n\t\t\t\t\tr=min(r,m**2+solve(m,j,i)+solve(m,n-j,k-i))\n\t\tmemo[n][m][k] = r\n\t\treturn r\n\tfor _ in range(int(input())):\n\t\tn,m,k = map(int,input().split())\n\t\tans.append(str(solve(n,m,k)))\n\tprint('\\n'.join(ans))\nmain()", "t = int(input())\nd = []\nfor i in range(31):\n    dd = []\n    for j in range(31):\n        dd.append([0] * 51)\n    d.append(dd)\nd[1][1][1] = 0\nfor i in range(1, 31):\n    for j in range(1, 31):\n        for k in range(1, min(i * j, 50) + 1):\n            if k > i * j // 2:\n                d[i][j][k] = d[i][j][i * j - k]\n            elif i > j:\n                d[i][j][k] = d[j][i][k]\n            elif (i, j) != (1, 1):\n                k = min(k, i * j - k)\n                kk = i * j - k\n                jj = (i ** 2 * j) * (j ** 2) * i\n                for l in range(1, i):\n                    if k <= l * j:\n                        jj = min(jj, d[l][j][k] + j ** 2)\n                    else:\n                        k1 = k - l * j\n                        jj = min(jj, d[i - l][j][k1] + j ** 2)\n                    # if kk <= l * j:\n                    #     if kk <= 50:\n                    #         jj = min(jj, d[l][j][kk] + j ** 2)\n                    # else:\n                    #     kk1 = kk - l * j\n                    #     if kk1 <= 50:\n                    #         jj = min(jj, d[i - l][j][kk1] + j ** 2)\n                for l in range(1, j):\n                    if k <= l * i:\n                        jj = min(jj, d[i][l][k] + i ** 2)\n                    else:\n                        k1 = k - l * i\n                        jj = min(jj, d[i][j - l][k1] + i ** 2)\n                    # if kk <= l * i:\n                    #     if kk <= 50:\n                    #         jj = min(jj, d[i][l][kk] + i ** 2)\n                    # else:\n                    #     kk1 = kk - l * i\n                    #     if kk1 <= 50:\n                    #         jj = min(jj, d[i][j - l][kk1] + i ** 2)\n                d[i][j][k] = jj\nfor i in range(t):\n    n, m, k = list(map(int, input().split()))\n    jj = d[n][m][k]\n    print(jj)\n# print(d[3][3][2])\n", "dp = {}\n\n\ndef getDP(n, m, k):\n    if (n, m, k) in dp:\n        return dp[(n, m, k)]\n    elif (m, n, k) in dp:\n        return dp[(m, n, k)]\n    return None\n\n\ndef solve(n, m, k):\n    if n == 2 and m == 3 and k == 5:\n        h = 5\n    if k == m * n or k == 0:\n        dp[(n, m, k)] = 0\n    elif k % min(n, m) == 0:\n        dp[(n, m, k)] = min(n, m) ** 2\n    elif k == 1:\n        dp[(n, m, k)] = min(n, m) ** 2 + 1\n    elif getDP(n, m, k) is not None:\n        return getDP(n, m, k)\n    else:\n        bestAns = float('inf')\n        for i in range(1, n):\n            if k <= i * m:\n                bestAns = min(bestAns, getDP(i, m, k) + m ** 2)\n            else:\n                bestAns = min(bestAns, getDP(n - i, m, k - i * m) + m ** 2)\n\n        for i in range(1, m):\n            if k <= i * n:\n                bestAns = min(bestAns, getDP(i, n, k) + n ** 2)\n            else:\n                bestAns = min(bestAns, getDP(m - i, n, k - i * n) + n ** 2)\n        dp[(n, m, k)] = bestAns\n\n\nfor i in range(1, 31):\n    for j in range(1, 31):\n        for k in range(min(i * j, 50) + 1):\n            solve(i, j, k)\ntoPrint = []\nt = int(input())\nfor i in range(t):\n    n, m, k = [int(x) for x in input().split(\" \")]\n    toPrint.append(getDP(n, m, k))\n\nfor x in toPrint:\n    print(x)\n", "import sys\ninput = sys.stdin.readline\n\nd={}\ntestnumber = int(input())\n\ndef calc(n, m, k):\n    if k <= 0 or k == m*n:\n        return 0\n    if k > n*m:\n        return 1000_000_000\n\n    nonlocal d\n    if n < m:\n        n, m = m, n\n    \n    if k > (m*n - m):\n        return m*m + 1\n    if k < m:\n        return m*m + 1\n    if k % m == 0:\n        return m*m\n\n    if (n, m, k) in d:\n        return d[ (n, m, k)]\n\n    d[ (n, m, k) ] = min( calc2(n, m, k), calc2(m, n, k) )\n\n    return d[ (n, m, k) ]\n\ndef calc2(n, m, k):\n    m2 = m*m\n    ans = m2*2 + 1\n    for i in range(1, n):\n        if i*m >= k:\n            ans = min(ans, m2 + calc(m, i, k) )\n        else:\n            ans = min(ans, m2 + calc(m, n-i, k - i*m))\n    \n    return ans\n\nfor ntest in range(testnumber):\n    n, m, k = map( int, input().split() )\n    if k == n*m:\n        print(0)\n        continue\n\n    print( calc(n, m, k) )", "import sys\ninput = sys.stdin.readline\n\nd={}\ntestnumber = int(input())\n\ndef calc(n, m, k):\n    if k <= 0 or k == m*n:\n        return 0\n    if k > n*m:\n        return 1000_000_000\n\n    nonlocal d\n    if n < m:\n        n, m = m, n\n    \n    if k > (m*n - m):\n        return m*m + 1\n    if k < m:\n        return m*m + 1\n    if k % m == 0:\n        return m*m\n\n    if (n, m, k) in d:\n        return d[ (n, m, k)]\n\n    d[ (n, m, k) ] = min( calc2(n, m, k), calc2(m, n, k) )\n\n    return d[ (n, m, k) ]\n\ndef calc2(n, m, k):\n    m2 = m*m\n    ans = m2*2 + 1\n    for i in range(1, n):\n        if i*m >= k:\n            ans = min(ans, m2 + calc(m, i, k) )\n        else:\n            ans = min(ans, m2 + calc(m, n-i, k - i*m))\n    \n    return ans\n\nfor ntest in range(testnumber):\n    n, m, k = map( int, input().split() )\n    if k == n*m:\n        print(0)\n        continue\n\n    print( calc(n, m, k) )", "d=[[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\nfor i in range(31):\n    d.append([])\n    for j in range(31):\n        d[i].append([])\n        for k in range(50):\n            d[i][j].append(0)\n\n    \ndef rec(n,m,k):\n    nonlocal d\n    if n*m==k or k==0:\n        return 0\n    if d[n][m][k]>0:\n        return d[n][m][k]\n    if n*m<k:\n        return 10**10\n    cost=10**10\n    for i in range(1,n//2+1):\n        for j in range(k+1):\n            cost=min(cost,m*m+rec(n-i,m,k-j)+rec(i,m,j))\n    for i in range(1,m//2+1):\n        for j in range(k+1):\n            cost=min(cost,n*n+rec(n,m-i,k-j)+rec(n,i,j))\n            \n    d[n][m][k]=cost\n    return cost\n    \nfor i in range(int(input())):\n    a,b,c=list(map(int,input().split()))\n    print(rec(a,b,c))\n", "d=[[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n    \ndef rec(n,m,k):\n    nonlocal d\n    if n*m==k or k==0:\n        return 0\n    if d[n][m][k]>0:\n        return d[n][m][k]\n    if n*m<k:\n        return 10**10\n    cost=10**10\n    for i in range(1,n//2+1):\n        for j in range(k+1):\n            cost=min(cost,m*m+rec(n-i,m,k-j)+rec(i,m,j))\n    for i in range(1,m//2+1):\n        for j in range(k+1):\n            cost=min(cost,n*n+rec(n,m-i,k-j)+rec(n,i,j))\n            \n    d[n][m][k]=cost\n    return cost\n    \nfor i in range(int(input())):\n    a,b,c=list(map(int,input().split()))\n    print(rec(a,b,c))\n"]