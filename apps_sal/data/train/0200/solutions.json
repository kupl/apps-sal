["class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        fib = [1, 1] # initializing a Fibonacci table with F[0] and F[1]\n        i = 1 # index that will represent the last filled index of table\n        temp = fib[0] + fib[1] # initial value of values to be appended\n        while temp < k: # we keep filling table until temp >= k\n            fib.append(temp) # add the current value to the table\n            i += 1 # increase i by 1 to keep track of the last filled index\n            temp = fib[i] + fib[i-1] # calculate new temp\n        fib.append(temp) # to cover case temp == k, we append the last value >= k\n    \n        ans = 0 # initializing answer value with 0\n        j = -1 # placeholder to represent last checked Fibonacci table index\n        while k > 0: # keep repeating until k <= 0\n            temp = fib[j] # get the biggest number available \n            j -= 1 # decrease j by 1 since we tried the last number\n            \n            if temp <= k:\n                ans+=1\n                k-=temp\n      \n        return ans", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        a = b = 1\n        fibo = [a,b]\n      \n        res = 0\n        while a + b <= k:\n            fibo.append(a + b)\n            a, b = b, a+b\n        for i in fibo[::-1]:\n            if k >= i:\n                k -= i\n                res +=1\n        return res\n            \n            \n        \n", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        f = []\n        f.append(1)\n        f.append(1)\n        while 1:\n            if max(f) <= k:\n                f.append(f[len(f)-1] + f[len(f)-2])\n            else:\n                break\n        f.remove(f[len(f)-1])\n\n        number = 0\n        while k != 0:\n            if f[len(f)-1] <= k:\n                k -= f[len(f)-1]\n                f.remove(max(f))\n                number += 1\n            else:\n                f.remove(max(f))\n\n        return number", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        first = 1\n        second = 1\n        \n        fib = []\n        \n        i = 0\n        while True:\n            if i == 0:\n                fib.append(1)\n            elif i == 1:\n                fib.append(1)\n            else:\n                val = fib[i - 1] + fib[i - 2]\n                if val > k: break\n                fib.append(val)\n            i += 1\n        print(fib)\n        accum = 0\n        ct = 0\n        for i in range(len(fib) - 1, -1 , -1):\n            accum += fib[i]\n            if accum == k:\n                ct += 1\n                break\n            elif accum > k:\n                accum -= fib[i]\n            else:\n                ct += 1\n        return ct", "\nclass Solution:\n      \n    def findMinFibonacciNumbers(self, k: int) -> int:\n      grid = [1,1]\n      last = 1\n      while last < k:\n        target = grid[-1] + grid[-2]\n        if target > k: break\n        else:\n          grid.append(grid[-1] + grid[-2])\n          last = grid[-1]\n      res = 0\n      ends = len(grid)-1\n      while k > 0:\n        while grid[ends] > k: ends -= 1\n        k -= grid[ends]\n        ends -= 1\n        res += 1\n      return res\n", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        if k < 2:\n            return k\n        f1, f2 = 1, 1\n        while f2 <= k:\n            f1, f2 = f2, f1 + f2\n        t = 0\n        while k:\n            # print(f1, f2, k, t)\n            if f2 <= k:\n                k -= f2\n                t += 1\n            else:\n                f1, f2 = f2 - f1, f1\n        return t\n", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        \n        a,b = 1,1\n        while b<=k:\n            a,b = b, a+b\n        \n        res = 0\n        while a > 0:\n            if k >= a:\n                k -= a\n                res += 1\n            a,b = b-a, a \n            \n        \n        return res\n        \n        \n        \n        \n#         if k == 0:\n#             return 0\n        \n#         a,b = 1, 1\n#         while b <= k:  # O( (logk)^2 )  \n#             a,b = b, a+b\n#         return self.findMinFibonacciNumbers(k-a)+1\n    \n    # First recursion, logk. Second resursion logK - 1, third entry logK - 2.\n        \n        \n#         arr = [1, 1]\n#         while arr[-1] <= k:\n#             arr.append( arr[-1]+arr[-2] )   # O(n) space\n        \n#         d = k-arr[-2]\n        \n#         cnt = 1\n        \n#         while d > 0:\n#             ind = bisect.bisect_right(arr, d)  # O(n log n) \n#             d -= arr[ind-1]\n#             cnt += 1\n        \n#         return cnt\n        \n", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        fibo=[]\n        fibo.append(1)\n        fibo.append(1)\n        lenn=2\n        while fibo[-1]<=k:\n            fibo.append(fibo[lenn-1]+fibo[lenn-2])\n            lenn+=1\n        \n        nums=k\n        cnt=0\n        for i in range(len(fibo)-1, -1, -1):\n            while nums>=fibo[i]:\n                nums-=fibo[i]\n                cnt+=1\n            if nums==0:\n                break\n        return cnt", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        \n        if k == 0:\n            return 0\n        \n        a,b = 1, 1\n        while b <= k:\n            a,b = b, a+b\n        return self.findMinFibonacciNumbers(k-a)+1\n        \n        \n#         arr = [1, 1]\n#         while arr[-1] <= k:\n#             arr.append( arr[-1]+arr[-2] )   # O(n) space\n        \n#         d = k-arr[-2]\n        \n#         cnt = 1\n        \n#         while d > 0:\n#             ind = bisect.bisect_right(arr, d)  # O(n log n) \n#             d -= arr[ind-1]\n#             cnt += 1\n        \n#         return cnt\n        \n", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        count=0\n        while(k>=0):\n            arr=[]\n            arr.append(1)\n            arr.append(1)\n            while(arr[-1]+arr[-2]<=k):\n                arr.append(arr[-1]+arr[-2])\n            \n            k-=arr[-1]\n            count+=1\n            \n        return count-1", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        fib = [1,1]\n        while(fib[-1]<k):\n            fib.append(fib[-1]+fib[-2])\n        print(fib)\n        if k in fib:\n            return 1\n        cnt =0\n        for i in range(len(fib)-1,-1,-1):\n            print(('cnt ',cnt,'i ',i, fib[i],'k ',k))\n            if fib[i]<=k:\n                k = k-fib[i]\n                cnt+=1\n            if k==0:\n                break\n        return cnt\n            \n        \n", "class Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        fib = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,\n               987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, \n               75025, 121393, 196418, 317811, 514229, 832040, 1346269, \n               2178309, 3524578, 5702887, 9227465, 14930352, 24157817, \n               39088169, 63245986, 102334155, 165580141, 267914296, \n               433494437, 701408733]\n        ans = 0\n        j= -1\n        while k>0:\n            tmp = fib[j]\n            j-=1\n            if tmp<=k:\n                ans+=1\n                k-=tmp\n        return ans"]