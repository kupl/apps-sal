["t = int(input())\nwhile t != 0:\n    M = 1000000007\n    n, m = list(map(int, input().split())) \n    ans = 1\n    tt = n//2\n    tt = tt * (tt + 1)\n    \n    ans = pow(m, tt, M)\n    \n    print(ans)\n    t -= 1\n    \n    \n", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n    nm = list(map(int,input().split()))\n    if nm[0]==1 or nm[1]==1:\n        print(1)\n    else:\n        k = nm[0]//2\n        print(pow(nm[1],k*(k+1),10**9 + 7))", "for _ in range(int(input())):\r\n    n,m=list(map(int,input().split()))\r\n    n=n//2\r\n    n=n*(n+1)\r\n    n=int(n)\r\n    print(pow(m,n,1000000007))\r\n", "from sys import stdin, stdout\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef inp(): return stdin.readline().strip()\ndef out(var, end=\"\\n\"): stdout.write(str(var)+\"\\n\")\ndef outa(*var, end=\"\\n\"): stdout.write(' '.join(map(str, var)) + end)\ndef lmp(): return list(mp())\ndef mp(): return list(map(int, inp().split()))\ndef smp(): return list(map(str, inp().split()))\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\ndef remadd(x, y): return 1 if x%y else 0\ndef ceil(a,b): return (a+b-1)//b\n\ndef isprime(x):\n    if x<=1: return False\n    if x in (2, 3): return True\n    if x%2 == 0: return False\n    for i in range(3, int(sqrt(x))+1, 2):\n        if x%i == 0: return False\n    return True\n    \nfor _ in range(int(inp())):\n    n, m = mp()\n    x = n//2\n    print(pow(m, x*(x+1), mod))\n", "'''\r\n      ___           ___                         ___                       ___           ___                         ___\r\n     /\\__\\         /\\  \\         _____         /\\  \\                     /\\  \\         /\\  \\                       /\\__\\\r\n    /:/ _/_        \\:\\  \\       /::\\  \\        \\:\\  \\       ___         /::\\  \\       |::\\  \\         ___         /:/ _/_\r\n   /:/ /\\  \\        \\:\\  \\     /:/\\:\\  \\        \\:\\  \\     /\\__\\       /:/\\:\\__\\      |:|:\\  \\       /\\__\\       /:/ /\\  \\\r\n  /:/ /::\\  \\   ___  \\:\\  \\   /:/  \\:\\__\\   ___ /::\\  \\   /:/__/      /:/ /:/  /    __|:|\\:\\  \\     /:/  /      /:/ /::\\  \\\r\n /:/_/:/\\:\\__\\ /\\  \\  \\:\\__\\ /:/__/ \\:|__| /\\  /:/\\:\\__\\ /::\\  \\     /:/_/:/__/___ /::::|_\\:\\__\\   /:/__/      /:/_/:/\\:\\__\\\r\n \\:\\/:/ /:/  / \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\/:/  \\/__/ \\/\\:\\  \\__  \\:\\/:::::/  / \\:\\~~\\  \\/__/  /::\\  \\      \\:\\/:/ /:/  /\r\n  \\::/ /:/  /   \\:\\  /:/  /   \\:\\  /:/  /   \\::/__/       ~~\\:\\/\\__\\  \\::/~~/~~~~   \\:\\  \\       /:/\\:\\  \\      \\::/ /:/  /\r\n   \\/_/:/  /     \\:\\/:/  /     \\:\\/:/  /     \\:\\  \\          \\::/  /   \\:\\~~\\        \\:\\  \\      \\/__\\:\\  \\      \\/_/:/  /\r\n     /:/  /       \\::/  /       \\::/  /       \\:\\__\\         /:/  /     \\:\\__\\        \\:\\__\\          \\:\\__\\       /:/  /\r\n     \\/__/         \\/__/         \\/__/         \\/__/         \\/__/       \\/__/         \\/__/           \\/__/       \\/__/\r\n\r\n'''\r\n\"\"\"\r\n\u2591\u2591\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2588\r\n\u2591\u2584\u2580\u2591\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2591\u2588\u2591\r\n\u2591\u2588\u2591\u2584\u2591\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2591\u2584\u2591\u2588\u2591\r\n\u2591\u2588\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2591\r\n\u2591\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2591\r\n\u2584\u2588\u2580\u2588\u2580\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2580\u2580\u2588\u2588\u2588\r\n\u2588\u2588\u2591\u2591\u2580\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2580\u2591\u2591\u2588\u2588\r\n\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2580\u2591\u2591\u2591\u2591\u2580\u2588\u2591\u2591\u2591\u2591\u2588\u2588\r\n\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2584\u2588\u2588\u2588\r\n\u2591\u2580\u2588\u2588\u2588\u2584\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2584\u2588\u2588\u2588\u2580\u2591\r\n\u2591\u2591\u2591\u2580\u2588\u2588\u2584\u2591\u2580\u2588\u2588\u2580\u2591\u2584\u2588\u2588\u2580\u2591\u2591\u2591\r\n\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2591\u2591\u2591\u2591\u2591\u2591\r\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\r\n\"\"\"\r\nimport sys\r\nimport math\r\nimport collections\r\nimport operator as op\r\nfrom collections import deque\r\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\r\nfrom bisect import bisect_right, bisect_left, bisect\r\n\r\n# sys.stdin = open('input.txt', 'r')\r\n# sys.stdout = open('output.txt', 'w')\r\n\r\nfrom functools import reduce\r\nfrom sys import stdin, stdout, setrecursionlimit\r\nsetrecursionlimit(2**20)\r\n\r\n\r\ndef ncr(n, r):\r\n    r = min(r, n - r)\r\n    numer = reduce(op.mul, list(range(n, n - r, -1)), 1)\r\n    denom = reduce(op.mul, list(range(1, r + 1)), 1)\r\n    return numer // denom  # or / in Python 2\r\n\r\n\r\ndef prime_factors(n):\r\n    i = 2\r\n    factors = []\r\n    while i * i <= n:\r\n        if n % i:\r\n            i += 1\r\n        else:\r\n            n //= i\r\n            factors.append(i)\r\n    if n > 1:\r\n        factors.append(n)\r\n    return (list(factors))\r\n\r\n\r\ndef isPowerOfTwo(x):\r\n    return (x and (not(x & (x - 1))))\r\n\r\nMOD = 1000000007  # 10^9 + 7\r\nPMOD = 998244353\r\nN = 10**18 + 1\r\nLOGN = 30\r\nalp = 'abcdefghijklmnopqrstuvwxyz'\r\nT = 1\r\nT = int(stdin.readline())\r\nfor _ in range(T):\r\n    n, m = list(map(int, stdin.readline().rstrip().split()))\r\n    # n = int(stdin.readline())\r\n    # a = list(map(int, stdin.readline().rstrip().split()))\r\n    # b = list(map(int, stdin.readline().rstrip().split()))\r\n    # s = str(stdin.readline().strip('\\n'))\r\n    # s = list(stdin.readline().strip('\\n'))\r\n    # m = int(stdin.readline())\r\n    # c = list(map(int, stdin.readline().rstrip().split()))\r\n    p = (n * (n + 1)) // 2 - (ceil(n / 2))**2\r\n    print(pow(m, p, MOD))\r\n", "# cook your dish here\np = (int)(1e9+7) \nfor _ in range(int(input())):\n    n,m =map(int,input().split())\n    if n%2!=0:\n        n=(n-1)//2\n    else:\n        n=n//2\n    b=n*(n+1)\n    ans=pow(m,b,p)\n    print(ans)", "for _ in range(int(input())):\r\n    mod=(10**9)+7\r\n    n,m=map(int,input().split())\r\n    n=n-(n%2)\r\n    num=n//2\r\n    ##print(num)\r\n    tot=(num*((2*num)+2))//2\r\n\r\n    print(pow(m,tot,mod))", "# cook your dish here\nmod=10**9+7\nfor _ in range (int(input())):\n    n,m=map(int,input().split())\n    num=n//2\n    tot=(num*(2+2*num))//2\n    print(pow(m,tot,mod))", "# cook your dish here\ndef pw(x,n):\n    if x==0:\n        return 1\n    r=1\n    while n>0:\n        if n%2:\n            r=(r*x)%1000000007\n        x=(x*x)%1000000007\n        n//=2\n    return r%1000000007\nt=int(input())\nwhile t>0:\n    n,m=list(map(int,input().split()))\n    n//=2\n    n*=n+1\n    print(pw(m,n))\n    t-=1\n\n", "MOD = 10 ** 9 + 7\r\nfor _ in range(int(input())):\r\n    n, m = list(map(int, input().split()))\r\n    x = n // 2\r\n\r\n    print(pow(m, (x * (x + 1)), MOD))\r\n", "t=int(input())\r\nmod=10**9+7\r\nfor _ in range(t):\r\n    a,b=list(map(int,input().split()))\r\n    x=a//2\r\n    d = (x*(x+1))\r\n    ans  =pow(b,d,mod)\r\n    print(ans)\r\n"]