["MOD = 998244353\n\nn = int(input())\n\na = list(map(int, input().split()))\ntot = sum(a)\n\ndef inv(x):\n    return pow(x, MOD - 2, MOD)\n\nl = [0, pow(n, tot, MOD) - 1]\n\nfor i in range(1, tot):\n    aC = i\n    cC = (n - 1) * (tot - i)\n    curr = (aC + cC) * l[-1]\n    curr -= tot * (n - 1)\n    curr -= aC * l[-2]\n    curr *= inv(cC)\n    curr %= MOD\n    l.append(curr)\n\nout = 0\nfor v in a:\n    out += l[tot - v]\n    out %= MOD\n\nzero = l[tot]\nout -= (n - 1) * zero\nout *= inv(n)\nprint(out % MOD)\n", "import sys\n\ndef II(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\nclass mint:\n    def __init__(self, x):\n        self.__x = x % md\n\n    def __repr__(self):\n        return str(self.__x)\n\n    def __neg__(self):\n        return mint(-self.__x)\n\n    def __add__(self, other):\n        if isinstance(other, mint): other = other.__x\n        return mint(self.__x + other)\n\n    def __sub__(self, other):\n        if isinstance(other, mint): other = other.__x\n        return mint(self.__x - other)\n\n    def __rsub__(self, other):\n        return mint(other - self.__x)\n\n    def __mul__(self, other):\n        if isinstance(other, mint): other = other.__x\n        return mint(self.__x * other)\n\n    __radd__ = __add__\n    __rmul__ = __mul__\n\n    def __truediv__(self, other):\n        if isinstance(other, mint): other = other.__x\n        return mint(self.__x * pow(other, md - 2, md))\n\n    def __rtruediv__(self, other):\n        return mint(other * pow(self.__x, md - 2, md))\n\n    def __pow__(self, power, modulo=None):\n        return mint(pow(self.__x, power, md))\n\nmd = 998244353\n\ndef main():\n    n=II()\n    aa=LI()\n    sa=sum(aa)\n    # dp[i]...ev from i-1 to i\n    dp=[mint(0)]*(sa+1)\n    for i in range(1,sa+1):\n        dp[i]=((i-1)*dp[i-1]+sa)*(n-1)/(sa+1-i)\n    #print(*dp)\n\n    for i in range(sa):dp[i+1]+=dp[i]\n\n    ans=-(n-1)*dp[-1]\n    for a in aa:ans+=dp[sa]-dp[a]\n    print(ans/n)\n\nmain()"]