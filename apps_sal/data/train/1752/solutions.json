["from itertools import product\n\nADJACENTS = ('08', '124', '2135', '326', '4157', '52468', '6359', '748', '85790', '968')\n\ndef get_pins(observed):\n    return [''.join(p) for p in product(*(ADJACENTS[int(d)] for d in observed))]", "def get_pins(observed):\n  map = [['8','0'], ['1','2','4'], ['1','2','3','5'], ['2','3','6'], ['1','4','5','7'], ['2','4','5','6','8'],\n         ['3','5','6','9'], ['4','7','8'], ['5','7','8','9','0'], ['6','8','9']]\n  return map[int(observed[0])] if len(observed) == 1 else [x + y for x in map[int(observed[0])] for y in get_pins(observed[1:])]", "adjacents = {\n  '1': ['2', '4'],\n  '2': ['1', '5', '3'],\n  '3': ['2', '6'],\n  '4': ['1', '5', '7'],\n  '5': ['2', '4', '6', '8'],\n  '6': ['3', '5', '9'],\n  '7': ['4', '8'],\n  '8': ['5', '7', '9', '0'],\n  '9': ['6', '8'],\n  '0': ['8'],\n}\n\ndef get_pins(observed):\n  if len(observed) == 1:\n    return adjacents[observed] + [observed]\n  return [a + b for a in adjacents[observed[0]] + [observed[0]] for b in get_pins(observed[1:])]", "from itertools import product\n\n\nPIN = {'1': ('1', '2', '4'), \n       '2': ('1', '2', '3', '5'), \n       '3': ('2', '3', '6'), \n       '4': ('1', '4', '5', '7'), \n       '5': ('2', '4', '5', '6', '8'), \n       '6': ('5', '6', '9', '3'), \n       '7': ('4', '7', '8'), \n       '8': ('7', '5', '8', '9', '0'), \n       '9': ('6', '8', '9'), '0': ('0', '8')}\n\n\ndef get_pins(observed):\n    return [''.join(a) for a in product(*(PIN[b] for b in observed))]", "from itertools import product\n\n# Map a keypad number to the nearby numbers (including the number itself).\nkeypad_neighbors = {\n    '1': ['1', '2', '4'],\n    '2': ['1', '2', '3', '5'],\n    '3': ['2', '3', '6'],\n    '4': ['1', '4', '5', '7'],\n    '5': ['2', '4', '5', '6', '8'],\n    '6': ['3', '5', '6', '9'],\n    '7': ['4', '7', '8'],\n    '8': ['0', '5', '7', '8', '9'],\n    '9': ['6', '8', '9'],\n    '0': ['0', '8']\n}\n\ndef get_pins(observed):\n    # Build a 2D array of possibilities\n    # Each row in the array is an entry\n    # Each column is a possible number.\n    pins = []\n    for num in observed:\n        pins.append(keypad_neighbors[num])\n    \n    # Generate every permutation of the possible numbers.\n    for tup in product(*pins):\n        yield ''.join(tup)", "from itertools import product\n\nPINS = {'1': '124', '2': '1253', '3': '236', '4': '1457', '5': '24568',\n        '6': '3569', '7': '478', '8': '57890', '9': '689', '0': '08'}\n\n\ndef get_pins(observed):\n    return list(map(''.join, product(*[PINS[num] for num in observed])))\n", "def combos(ls):\n    if len(ls) == 1:\n        return ls[0]\n    else:\n        ans = []\n        for s1 in combos(ls[1:]):\n            for s2 in ls[0]:\n                ans.append(s2+s1)\n        return ans\n\ndef get_pins(observed):\n    could_be = {\n        '1': ['1', '2', '4'],\n        '2': ['1', '2', '3', '5'],\n        '3': ['2', '3', '6'],\n        '4': ['1', '4', '5', '7'],\n        '5': ['2', '4', '5', '6', '8'],\n        '6': ['3', '5', '6', '9'],\n        '7': ['4', '7', '8'],\n        '8': ['5', '7', '8', '9', '0'],\n        '9': ['6', '8', '9'],\n        '0': ['8', '0']\n    }\n    return combos([could_be[c] for c in observed])", "def get_pins(observed):\n\n    numbers = {\n        '1': [1,4,2],\n        '2': [1,2,3,5],\n        '3': [2,3,6],\n        '4': [1,4,5,7],\n        '5': [2,4,5,6,8],\n        '6': [3,5,6,9],\n        '7': [4,7,8],\n        '8': [0,5,7,8,9],\n        '9': [6,8,9],\n        '0': [0,8]\n    }\n    \n    from itertools import product\n    possible = [numbers[o] for o in observed]\n    return [''.join(map(str, p)) for p in product(*possible)]", "from itertools import product\n\n\nADJACENT = {'1': '124', '2': '1235', '3': '236', '4': '1475', '5': '24568',\n            '6': '3569', '7': '478', '8': '05789', '9': '689', '0': '08'}\n\n\ndef get_pins(observed):\n    return [''.join(a) for a in product(*(ADJACENT[b] for b in observed))]\n", "from itertools import product\nget_pins = lambda o: map(lambda x: ''.join(x), product(*\n ['08 124 1235 236 1457 24568 3569 478 05789 689'.split(' ')\n [int(e)] for e in o]))"]