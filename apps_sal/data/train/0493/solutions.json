["class Solution:\n     def findTargetSumWays(self, nums, S):\n         \"\"\"\n         :type nums: List[int]\n         :type S: int\n         :rtype: int\n         \"\"\"\n         c = [0]*1001\n         c[0] = 1\n         T = sum(nums)\n         A = T+S\n         if T<S or A&1:\n             return 0\n         A>>=1\n         nums = sorted(nums)\n         temp = 0\n         for ind, v in enumerate(nums):\n             temp += v\n             for i in range(min(temp, A), v-1, -1):\n                 c[i] += c[i-v]\n         return c[A]", "class Solution:\n     def findTargetSumWays(self, nums, S):\n         \"\"\"\n         :type nums: List[int]\n         :type S: int\n         :rtype: int\n         \"\"\"\n         total = sum(nums)\n         if total < S or (total + S) & 1:\n             return 0\n         target = (S + total) // 2\n         dp = [0] * (target + 1)\n         dp[0] = 1\n         for n in nums:\n             for i in range(target, n-1, -1):\n                 dp[i] += dp[i - n]\n         return dp[target]", "class Solution:\n     def findTargetSumWays(self, nums, S):\n         \"\"\"\n         :type nums: List[int]\n         :type S: int\n         :rtype: int\n         \"\"\"\n         def findTargetNumber(nums, target):\n             print(nums, target)\n             dp = [0 for _ in range(target + 1)]\n             dp[0] = 1\n             for n in nums:\n                 for i in range(target, n - 1, -1):\n                     dp[i] += dp[i - n]\n             return dp[-1]\n         \n         sumResult = sum(nums)\n         if (S + sumResult) % 2 != 0 or sumResult < S:\n             return 0\n         else:\n             return findTargetNumber(nums, int((sumResult + S) / 2))", "class Solution:\n     def findTargetSumWays(self, nums, S):\n         sum_ = sum(nums)\n         if S > sum_: return 0\n         target = sum_ - S\n         if target % 2: return 0\n         target = target // 2\n \n         dp = [1] + [0] * target\n         for n in nums:\n             i = target  \n             while(i>=n):  \n                 dp[i] += dp[i-n]  \n                 i -= 1 \n         return dp[target]\n         \n", "class Solution:\n     def findTargetSumWays(self, nums, S):\n         \"\"\"\n         :type nums: List[int]\n         :type S: int\n         :rtype: int\n         \"\"\"\n         if sum(nums)<S:  \n             return 0  \n         if (S+sum(nums))%2==1:  \n             return 0  \n         target = (S+sum(nums))//2  \n         dp = [0]*(target+1)  \n         dp[0] = 1  \n         for n in nums:  \n             i = target  \n             while(i>=n):  \n                 dp[i] = dp[i] + dp[i-n]  \n                 i = i-1  \n         return dp[target] \n", "class Solution:\n     def findTargetSumWays(self, nums, S):\n         \"\"\"\n         :type nums: List[int]\n         :type S: int\n         :rtype: int\n         \"\"\"\n         # A: postive set. B: negative set\n         # A - B = S\n         # A + B = sum(nums)\n         # => A = (S + sum(nums)) / 2\n         target = S + sum(nums)\n         if target % 2 == 1 or sum(nums) < S:\n             return 0\n         target //= 2\n         # 0-1 knapsack\n         dp = [0 for i in range(target + 1)]\n         dp[0] = 1\n         for curNum in nums:\n             for cap in range(len(dp) - 1, -1, -1):\n                 if cap >= curNum:\n                     dp[cap] += dp[cap - curNum]\n         return dp[-1]"]