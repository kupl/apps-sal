["import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\nAns = [None]*T\nfor qu in range(T):\n    S = [1 if s == 'A' else 0 for s in readline().strip()]\n    stack = []\n    for s in S:\n        if s:\n            stack.append(s)\n        else:\n            if stack and stack[-1] == 1:\n                stack.pop()\n            else:\n                stack.append(s)\n    stack2 = []\n    for s in stack:\n        if s:\n            stack2.append(s)\n        else:\n            if stack2 and stack2[-1] == 0:\n                stack2.pop()\n            else:\n                stack2.append(s)\n    Ans[qu] = len(stack2)\n\nprint('\\n'.join(map(str, Ans)))\n", "def main():\n    # n = int(input())\n    # arr = list(map(int, input().split()))\n    # x1, y1, x2, y2 = map(int, input().split())\n    s = input()\n    arr = []\n    for i in range(len(s)):\n        if len(arr) != 0 and s[i] == 'B':\n            arr.pop()\n        else:\n            arr.append(s[i])\n    print(len(arr))\n\n\n# for _ in range(1):\nfor _ in range(int(input())):\n    main()\n", "gans = []\nfor _ in range(int(input())):\n    s = list(input())\n    n = len(s)\n    cur = 0\n    ans = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == 'B':\n            cur += 1\n        else:\n            if cur > 0:\n                cur -= 1\n                ans -= 2\n    ans -= cur - cur % 2\n    gans.append(ans)\nprint('\\n'.join(map(str, gans)))\n        \n", "for t in range(int(input())):\n    s=input()\n    stack=[]\n    for i in s:\n        if i=='A':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                stack.append(i)\n    print(len(stack))", "import sys\nimport random\n# import numpy as np\nimport math\nimport copy\nfrom heapq import heappush, heappop, heapify\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\n\n# sys.setrecursionlimit(1000000)\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = float(\"inf\")\n\nMOD = 10 ** 9 + 7\ndivide = lambda x: pow(x, MOD - 2, MOD)\n\n\ndef solve():\n    S = getS()\n    n = len(S)\n\n    ans = 0\n    bs = 0\n    for c in reversed(S):\n        if c == \"A\":\n            if bs:\n                ans += 2\n                bs -= 1\n        else:\n            bs += 1\n\n    ans += (bs // 2) * 2\n\n    print(n - ans)\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n    return\n\n\ndef __starting_point():\n    main()\n    # solve()\n\n__starting_point()", "t=int(input())\n\nfor i in range(t):\n\n    s=input()\n    stack=[]\n\n    for i in range(len(s)):\n\n        if len(stack)==0:\n\n            stack.append(s[i])\n\n        \n\n        elif s[i]=='B' and (stack[-1]=='A' or stack[-1]=='B'):\n\n                stack.pop()\n\n        else:\n            stack.append(s[i])\n    print(len(stack))\n                \n", "def solve():\n    s = input()\n    n = len(s)\n    acnt = 0\n    bcnt = 0\n    ans = 0\n    for i in s:\n        if i == \"B\":\n            if acnt:\n                acnt -= 1\n            else:\n                bcnt += 1\n        if i == \"A\":\n            acnt += 1\n    print(acnt + bcnt % 2)\nfor i in range(int(input())):\n    solve()", "from math import *\nfrom bisect import *\nfrom collections import *\nfrom random import *\nfrom decimal import *\nfrom itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return list(map(int,input().split()))\nt=inp()\nwhile(t):\n    t-=1\n    s=st()\n    stack=[]\n    for i in range(len(s)):\n        stack.append(s[i])\n        while(len(stack)!=0 and len(stack)-1):\n            x=stack[-1]\n            y=stack[-2]\n            if(x==y=='B' or (x=='B' and y=='A')):\n                stack.pop()\n                stack.pop()\n            else:\n                break\n    print(len(stack))\n"]