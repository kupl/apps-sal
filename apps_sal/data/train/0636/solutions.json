["# cook your dish here\nfrom itertools import combinations\na = list(map(int, input().split()))\nn = a[0]\nt = a[1]\nq = list(combinations(a[2:], 4))\ntotal = 0\nfor i in q:\n    if sum(i) == t:\n        total += 1\nprint(total)\n", "from itertools import combinations\ndef rSubset(arr, r):  \n    return list(combinations(arr, r))\narr=[]\narr=list(map(int,input().split()))\nN,T=arr[0],arr[1]\narr.remove(N)\narr.remove(T)\narr=rSubset(arr,4)\nsum=0\nfor i in range(0,len(arr)):\n    a=list(arr[i])\n    if a[0]+a[1]+a[2]+a[3]==T:\n        sum+=1\nprint(sum)        ", "# code\ninp = list(map(int, input().split()))\na = inp[2::]\nt = inp[1]\n\nq = []\nextra = 0\ndef printCombination(arr, n, r):\n\n    data = [0]*r\n\n    combinationUtil(arr, data, 0,\n                    n - 1, 0, r)\n\ndef combinationUtil(arr, data, start,\n                    end, index, r):\n\n    nonlocal q\n    nonlocal extra\n    if (index == r):\n        if sum(data) == t:\n            extra += 1\n        return\n\n\n    i = start\n    while(i <= end and end - i + 1 >= r - index):\n        data[index] = arr[i]\n        combinationUtil(arr, data, i + 1,\n                        end, index + 1, r)\n        i += 1\n\nprintCombination(a, inp[0], 4)\nprint(extra)\n", "# code\ninp = list(map(int, input().split()))\na = inp[2::]\nt = inp[1]\n\np = []\nq = []\ndef printCombination(arr, n, r):\n\n    data = [0]*r\n\n    combinationUtil(arr, data, 0,\n                    n - 1, 0, r)\n\ndef combinationUtil(arr, data, start,\n                    end, index, r):\n\n    nonlocal q\n    nonlocal p\n    if (index == r):\n        p = []\n        for j in range(r):\n            p.append(data[j])\n        q.append(p)\n        return\n\n    i = start\n    while(i <= end and end - i + 1 >= r - index):\n        data[index] = arr[i]\n        combinationUtil(arr, data, i + 1,\n                        end, index + 1, r)\n        i += 1\n\n\nprintCombination(a, inp[0], 4)\nres = 0\nfor x in q:\n    if t == sum(x):\n        res += 1\n\nprint(res)\n", "inp = input().split()\n\ninp = [int(q) for q in inp]\na = inp[2::]\nt = inp[1]\n\n# if len(a) < 4:\n#     print(\"0\")\n#     exit)\n\n# if tmp[0] + tmp[1] + tmp[2] + tmp[3] < t or tmp[-1] + tmp[-2] + tmp[-3] + tmp[-4] > t:\n#     print(\"0\")\n#     return\n\np = []\nq = []\ndef printCombination(arr, n, r):\n\n    data = [0]*r\n\n    combinationUtil(arr, data, 0,\n                    n - 1, 0, r)\n\ndef combinationUtil(arr, data, start,\n                    end, index, r):\n\n    nonlocal q\n    nonlocal p\n    if (index == r):\n        p = []\n        for j in range(r):\n            p.append(data[j])\n        q.append(p)\n        return\n\n    i = start\n    while(i <= end and end - i + 1 >= r - index):\n        data[index] = arr[i]\n        combinationUtil(arr, data, i + 1,\n                        end, index + 1, r)\n        i += 1\n\n\nprintCombination(a, len(a), 4)\nres = 0\nfor x in q:\n    if t == sum(x):\n        res += 1\n\nprint(res)\n", "inp = input().split()\n\ninp = [int(q) for q in inp]\na = inp[2::]\nt = inp[1]\n\ntmp = a\ntmp.sort(reverse=True)\n\n# if len(a) < 4:\n#     print(\"0\")\n#     exit)\n\n# if tmp[0] + tmp[1] + tmp[2] + tmp[3] < t or tmp[-1] + tmp[-2] + tmp[-3] + tmp[-4] > t:\n#     print(\"0\")\n#     return\n\np = []\nq = []\ndef printCombination(arr, n, r):\n\n    data = [0]*r\n\n    combinationUtil(arr, data, 0,\n                    n - 1, 0, r)\n\ndef combinationUtil(arr, data, start,\n                    end, index, r):\n\n    nonlocal q\n    nonlocal p\n    if (index == r):\n        p = []\n        for j in range(r):\n            p.append(data[j])\n        q.append(p)\n        return\n\n    i = start\n    while(i <= end and end - i + 1 >= r - index):\n        data[index] = arr[i]\n        combinationUtil(arr, data, i + 1,\n                        end, index + 1, r)\n        i += 1\n\n\nprintCombination(a, len(a), 4)\nres = 0\nfor x in q:\n    if t == sum(x):\n        res += 1\n\nprint(res)\n", "inp = input().split()\n\ninp = [int(q) for q in inp]\na = inp[2::]\nt = inp[1]\n\ntmp = a\ntmp.sort(reverse=True)\n\n# if len(a) < 4:\n#     print(\"0\")\n#     exit)\n\n# if tmp[0] + tmp[1] + tmp[2] + tmp[3] < t or tmp[-1] + tmp[-2] + tmp[-3] + tmp[-4] > t:\n#     print(\"0\")\n#     return\n\np = []\nq = []\ndef printCombination(arr, n, r):\n\n    data = [0]*r\n\n    combinationUtil(arr, data, 0,\n                    n - 1, 0, r)\n\ndef combinationUtil(arr, data, start,\n                    end, index, r):\n\n    nonlocal q\n    nonlocal p\n    if (index == r):\n        p = []\n        for j in range(r):\n            p.append(data[j])\n        q.append(p)\n        return\n\n    i = start\n    while(i <= end and end - i + 1 >= r - index):\n        data[index] = arr[i]\n        combinationUtil(arr, data, i + 1,\n                        end, index + 1, r)\n        i += 1\n\n\nprintCombination(a, len(a), 4)\nres = []\nfor x in q:\n    if t == sum(x):\n        res.append(x)\n\nprint(len(res))\n", "inp = input().split()\n\ninp = [int(q) for q in inp]\na = inp[2::]\nt = inp[1]\n\ntmp = a\ntmp.sort(reverse=True)\n\n# if len(a) < 4:\n#     print(\"0\")\n#     exit)\n\n# if tmp[0] + tmp[1] + tmp[2] + tmp[3] < t or tmp[-1] + tmp[-2] + tmp[-3] + tmp[-4] > t:\n#     print(\"0\")\n#     return\n\np = []\nq = []\ndef printCombination(arr, n, r):\n\n    data = [0]*r\n\n    combinationUtil(arr, data, 0,\n                    n - 1, 0, r)\n\ndef combinationUtil(arr, data, start,\n                    end, index, r):\n\n    nonlocal q\n    nonlocal p\n    if (index == r):\n        p = []\n        for j in range(r):\n            p.append(data[j])\n        q.append(p)\n        return\n\n    i = start\n    while(i <= end and end - i + 1 >= r - index):\n        data[index] = arr[i]\n        combinationUtil(arr, data, i + 1,\n                        end, index + 1, r)\n        i += 1\n\n\nprintCombination(a, len(a), 4)\nres = []\nfor x in q:\n    if t == sum(x):\n        res.append(x)\n\nprint(len(res))\n", "# cook your dish here\n'''\nfrom operator import itemgetter\ninp=list(map(int, input().split()))\nn, t = inp[0], inp[1]\narray=inp[2:]\narray.sort()\nfreq={}\nfor el in array:\n    if el not in freq:\n        freq[el]=1 \n    else:\n        freq[el]+=1\nsomme=[]\nfor i in range(n-1):\n    for j in range(i+1,n):\n        somme.append((array[i]+array[j], {i, j}))\nsomme.sort(key=itemgetter(0))\ni_end=len(somme)-1\ncounter=0\ncomputed={}\nfor i in range(len(somme)-1):\n    while i_end>i and somme[i][0]+somme[i_end][0]>t:\n        i_end-=1\n    if i_end==i:\n        break\n    if somme[i][0]+somme[i_end][0]==t and len(somme[i][1]&somme[i_end][1])==0:\n        id_start, i_mid1, i_mid2, id_end = sorted(somme[i][1]|somme[i_end][1])\n        if (array[id_start], array[i_mid1], array[i_mid2], array[id_end]) not in computed:\n            if array[id_start]==array[id_end]:\n                appo=freq[array[id_start]]\n                counter+=appo*(appo-1)*(appo-2)*(appo-3)//24\n            elif array[id_start]==array[i_mid2]:\n                appo=freq[array[i_mid1]]\n                counter+=appo*(appo-1)*(appo-2)*freq[array[id_end]]//6\n            elif array[id_end]==array[i_mid1]:\n                appo=freq[array[i_mid1]]\n                counter+=appo*(appo-1)*(appo-2)*freq[array[id_start]]//6\n            elif array[id_start]==array[i_mid1] and array[id_end]==array[i_mid2]:\n                counter+=freq[array[i_mid1]]*(freq[array[i_mid1]]-1)*freq[array[i_mid2]]*(freq[array[i_mid2]]-1)//4\n            elif array[id_start]==array[i_mid1]:\n                counter+=freq[array[i_mid1]]*(freq[array[i_mid1]]-1)*freq[array[i_mid2]]*freq[array[id_end]]//2\n            elif array[id_end]==array[i_mid2]:\n                counter+=freq[array[i_mid2]]*(freq[array[i_mid2]]-1)*freq[array[i_mid1]]*freq[array[id_start]]//2\n            else:\n                counter+=freq[array[id_start]]*freq[array[id_end]]*freq[array[i_mid1]]*freq[array[i_mid2]]\n            computed[(array[id_start], array[i_mid1], array[i_mid2], array[id_end])]=1\nprint(counter)\n\narray.sort()\nfreq={}\nfor el in array:\n    if el not in freq:\n        freq[el]=1 \n    else:\n        freq[el]+=1\ncounter=0\nid_start=0\nid_end=n-1\ncomputed={}\nfor id_start in range(n-3):\n    while id_end>id_start+2 and t-array[id_start]-array[id_end]<array[id_start+1]+array[id_start+2]:\n        id_end-=1\n    if id_end==id_start+2:\n        break\n    t_new=t-array[id_start]-array[id_end]\n    i_mid2=id_end-1\n    for i_mid1 in range(id_start+1, id_end-1):\n        print(array[id_start], array[i_mid1], array[i_mid2], array[id_end])\n        while i_mid2>i_mid1 and array[i_mid1]+array[i_mid2]>t_new:\n            i_mid2-=1 \n        if i_mid2==i_mid1:\n            break\n        if array[i_mid1]+array[i_mid2]==t_new and (array[id_start], array[i_mid1], array[i_mid2], array[id_end]) not in computed:\n            if array[id_start]==array[id_end]:\n                appo=freq[array[id_start]]\n                counter+=appo*(appo-1)*(appo-2)*(appo-3)//24\n            elif array[id_start]==array[i_mid2]:\n                appo=freq[array[i_mid1]]\n                counter+=appo*(appo-1)*(appo-2)*freq[array[id_end]]//6\n            elif array[id_end]==array[i_mid1]:\n                appo=freq[array[i_mid1]]\n                counter+=appo*(appo-1)*(appo-2)*freq[array[id_start]]//6\n            elif array[id_start]==array[i_mid1] and array[id_end]==array[i_mid2]:\n                counter+=freq[array[i_mid1]]*(freq[array[i_mid1]]-1)*freq[array[i_mid2]]*(freq[array[i_mid2]]-1)//4\n            elif array[id_start]==array[i_mid1]:\n                counter+=freq[array[i_mid1]]*(freq[array[i_mid1]]-1)*freq[array[i_mid2]]*freq[array[id_end]]//2\n            elif array[id_end]==array[i_mid2]:\n                counter+=freq[array[i_mid2]]*(freq[array[i_mid2]]-1)*freq[array[i_mid1]]*freq[array[id_start]]//2\n            else:\n                counter+=freq[array[id_start]]*freq[array[id_end]]*freq[array[i_mid1]]*freq[array[i_mid2]]\n            computed[(array[id_start], array[i_mid1], array[i_mid2], array[id_end])]=1\nprint(counter)\n'''\n\nnums = list(map(int, input().split()))\nn, t = nums.pop(0), nums.pop(0)\nways = [1] + [0]*t\nnums.sort()\nans = 0\nfor i in range(2, n):\n    if nums[i] > t - 3:\n        break\n    j = i-1\n    for k in range(0, j):\n        if nums[k] + nums[j] > t-2:\n            break\n        ways[nums[k] + nums[j]] += 1\n    for last in range(i+1, n):\n        if nums[i] + nums[last] > t - 2:\n            break\n        left = t - nums[i] - nums[last]\n        if left > 1:\n            ans += ways[left]\nprint(ans)", "# cook your dish here\nfrom operator import itemgetter\ninp=list(map(int, input().split()))\nn, t = inp[0], inp[1]\narray=inp[2:]\nsomme=[]\nfor i in range(n-1):\n    for j in range(i+1,n):\n        somme.append((array[i]+array[j], {i, j}))\nsomme.sort(key=itemgetter(0))\ni_end=len(somme)-1\ncounter=0\nfor i in range(len(somme)-1):\n    while i_end>i and somme[i][0]+somme[i_end][0]>t:\n        i_end-=1\n    if i_end==i:\n        break\n    appo=i_end\n    while appo>i and somme[i][0]+somme[appo][0]==t:\n        if len(somme[i][1]&somme[appo][1])==0:\n            counter+=1\n        appo-=1\nprint(counter//3)", "# cook your dish here\nfrom collections import defaultdict\nl=list(map(int,input().split()))\nn=l[0]\nt=l[1]\nl.pop(0)\nl.pop(0)\nd=defaultdict(list)\ncnt=0\nfor i in range(n-1):\n    for j in range(i+1,n):\n        s=l[i]+l[j]\n        \n        if d[t-s]:\n            x=d[t-s]\n            for p in x:\n                if p[0]<i and p[0]<i<p[1]<j:\n                    cnt+=1\n                    \n        d[s].append([i,j])\n    \nprint(cnt)\n        \n    \n", "# cook your dish here\ninp = list(map(int, input().split()))\nN = inp[0]\nT = inp[1]\narray = inp[2:]\narray.sort()\n\nsums = [0 for i in range(T)]\ntotal = 0\nfor i in range(N):\n    for forward in range(i+1, N):\n        sm = array[i] + array[forward]\n        if sm < T:\n            total += sums[T - sm]\n    for backward in range(i):\n        sm = array[i] + array[backward]\n        if sm < T:\n            sums[sm] += 1\nprint(total)", "# cook your dish here\nx = list(map(int,input().split()))\nn = x[0]\nt = x[1]\na = x[2:n+2]\na.sort()\n\nsums = [0] * t\ncount = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        add = a[i] + a[j]\n        if add < t:\n            count += sums[t-add]\n    for k in range(i):\n        add = a[i] + a[k]\n        if add<t:\n            sums[add] += 1\n\nprint(count)", "x = list(map(int,input().split()))\r\nn = x[0]\r\nt = x[1]\r\na = x[2:n+2]\r\na.sort()\r\n\r\nsums = [0] * t\r\ncount = 0\r\nfor i in range(n):\r\n    for j in range(i+1,n):\r\n        add = a[i] + a[j]\r\n        if add < t:\r\n            count += sums[t-add]\r\n    for k in range(i):\r\n        add = a[i] + a[k]\r\n        if add<t:\r\n            sums[add] += 1\r\n\r\nprint(count)", "x = list(map(int, input().split()))\r\nn, t, a = x[0], x[1], x[2:]\r\nans = 0\r\nfor i in range(n):\r\n    for j in range(i+1, n):\r\n        for k in range(j+1, n):\r\n            for l in range(k+1, n):\r\n                if(a[i]+a[j]+a[k]+a[l] == t):\r\n                    ans += 1\r\nprint(ans)\r\n", "x = list(map(int, input().split()))\r\nn, t, a = x[0], x[1], x[2:]\r\nans = 0\r\nfor i in range(n):\r\n    for j in range(i+1, n):\r\n        for k in range(j+1, n):\r\n            for l in range(k+1, n):\r\n                if(a[i]+a[j]+a[k]+a[l] == t):\r\n                    ans += 1\r\nprint(ans)\r\n", "x = list(map(int,input().split()))\nn = x[0]\nt = x[1]\na = x[2:n+2]\na.sort()\n\nsums = [0] * t\ncount = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        add = a[i] + a[j]\n        if add < t:\n            count += sums[t-add]\n    for k in range(i):\n        add = a[i] + a[k]\n        if add<t:\n            sums[add] += 1\n\nprint(count)", "# cook your dish here\na = list(map(int,input(\"\").strip().split()))   \nn=a[0];\nt=a[1];\ndel a[0]\ndel a[0]\na.sort()\nres=list()\nfor i in range(n):\n    for j in range(i+1,n):\n        for k in range(j+1,n):\n            for l in range(k+1,n):\n                if a[i]+a[j]+a[k]+a[l]==t:\n                    li=list();\n                    li.append(i)\n                    li.append(j)\n                    li.append(k)\n                    li.append(l)\n                    if li not in res:\n                        res.append(li)\n                elif a[i]+a[j]+a[k]+a[l]>t:\n                    break;\n                \nprint(len(res))", "# cook your dish here\na = list(map(int,input(\"\").strip().split()))   \nn=a[0];\nt=a[1];\ndel a[0]\ndel a[0]\na.sort()\nres=list()\nfor i in range(n):\n    for j in range(i+1,n):\n        for k in range(j+1,n):\n            for l in range(k+1,n):\n                if a[i]+a[j]+a[k]+a[l]==t:\n                    li=list();\n                    li.append(i)\n                    li.append(j)\n                    li.append(k)\n                    li.append(l)\n                    if li not in res:\n                        res.append(li)\nprint(len(res))", "# cook your dish here\nx = list(map(int,input().split()))\nn = x[0]\nt = x[1]\na = x[2:n+2]\na.sort()\n\nsums = [0] * t\ncount = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        add = a[i] + a[j]\n        if add < t:\n            count += sums[t-add]\n    for k in range(i):\n        add = a[i] + a[k]\n        if add<t:\n            sums[add] += 1\n\nprint(count)", "# cook your dish here\nx = list(map(int,input().split()))\nn = x[0]\nt = x[1]\na = x[2:n+2]\ncount = 0\nfor i in range(3,n,1):\n    for j in range(2,i,1):\n        for k in range(1,j,1):\n            for l in range(k):\n                #print(a[i] + a[j] + a[k] + a[l])\n                if a[i] + a[j] + a[k] + a[l] == t:\n                    #print(a[i] + a[j] + a[k] + a[l])\n                    count += 1\nprint(count)", "inp = list(map(int, input().split()))\r\nN = inp[0]\r\nT = inp[1]\r\narray = inp[2:]\r\narray.sort()\r\n\r\nsums = [0 for i in range(T)]\r\ntotal = 0\r\nfor i in range(N):\r\n    for forward in range(i+1, N):\r\n        sm = array[i] + array[forward]\r\n        if sm < T:\r\n            total += sums[T - sm]\r\n    for backward in range(i):\r\n        sm = array[i] + array[backward]\r\n        if sm < T:\r\n            sums[sm] += 1\r\nprint(total)", "inp = list(map(int, input().split()))\r\nN = inp[0]\r\nT = inp[1]\r\narray = inp[2:]\r\narray.sort()\r\n\r\nsums = [0 for i in range(T)]\r\ntotal = 0\r\nfor i in range(N):\r\n    for forward in range(i+1, N):\r\n        sm = array[i] + array[forward]\r\n        if sm < T:\r\n            total += sums[T - sm]\r\n    for backward in range(i):\r\n        sm = array[i] + array[backward]\r\n        if sm < T:\r\n            sums[sm] += 1\r\nprint(total)"]