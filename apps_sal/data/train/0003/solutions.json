["def solve():\n    n, k = map(int,input().split())\n    lst = list(map(int,input().split()))\n    lst.sort()\n    ans = 0\n    for i in range(n - k - 1, n):\n        ans += lst[i]\n    print(ans)\nfor i in range(int(input())):\n    solve()", "t=int(input())\nfor i in range(t):\n    n,k=[int(i) for i in input().split()]\n    a=[int(i) for i in input().split()]\n    a.sort(reverse=True)\n    print(sum(a[:k+1]))", "# map(int, input().split())\nrw = int(input())\nfor wewq in range(rw):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    f = 0\n    for i in range(k + 1):\n        f += a[i]\n    print(f)\n", "t=int(input())\nfor you in range(t):\n    l=input().split()\n    n=int(l[0])\n    k=int(l[1])\n    l=input().split()\n    li=[int(i) for i in l]\n    if(k==0):\n        print(max(li)-min(li))\n        continue\n    z=0\n    li.sort()\n    li.reverse()\n    for i in range(k+1):\n        z+=li[i]\n    print(z)\n", "for _ in range (int(input())):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.sort(reverse=True)\n    for i in range (1,k+1):\n        a[0]+=a[i]\n        a[i]=0\n    print(a[0]-a[1])", "for __ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    ar.sort(reverse=True)\n    ans = 0\n    for i in range(min(n, k + 1)):\n        ans += ar[i]\n    print(ans)", "import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\n#from decimal import Decimal\n#from fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod=10**9+7\n\n\nfor t in range(int(data())):\n    n,k=mdata()\n    a=sorted(mdata(),reverse=True)\n    s=sum(a[:k+1])\n    out(s)\n", "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor i in range(t):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    a.sort()\n    a.reverse()\n    cum = [a[0]]\n    for i in range(n-1):\n        cum.append(cum[i]+a[i+1])\n    cum.append(cum[-1])\n    print(cum[k])", "t = int(input())\nfor _ in range(t):\n    #n = int(input())\n    n, k=map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s=0\n    for i in range(k+1):\n        s+=a[n-1-i]\n    print(s)", "def main():\n    N, K = list(map(int, input().split()))\n    *A, = list(map(int, input().split()))\n    \n    A.sort()\n    print(A[-1] + sum(A[-K-1:-1]))\n\ndef __starting_point():\n    for __ in [0]*int(input()):\n        main()\n\n__starting_point()", "import sys\nimport random\n# import numpy as np\nimport math\nimport copy\nfrom heapq import heappush, heappop, heapify\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\n# sys.setrecursionlimit(1000000)\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = float(\"inf\")\n\nMOD = 10 ** 9 + 7\ndivide = lambda x: pow(x, MOD-2, MOD)\n\ndef judge(at, ax, ay, bt, bx, by):\n    if abs(at - bt) >= abs(ax - bx) + abs(ay - by):\n        return True\n    else:\n        return False\n\n\ndef solve():\n    n, k = getList()\n    li = getList()\n\n    if k >= n:\n        print(sum(li))\n        return\n\n    li.sort(reverse=True)\n    print(sum(li[:k+1]))\n\n    return\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n    return\ndef __starting_point():\n    main()\n    # solve()\n\n__starting_point()", "from sys import stdin\nt = int(stdin.readline())\nfor _ in range(t):\n    n, k = tuple(int(x) for x in stdin.readline().split())\n    lst = sorted(int(x) for x in stdin.readline().split())\n    print(sum(lst[-k-1:]))\n", "t = int(input())\nfor _ in range(t):\n    n,k = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    l.sort()\n    l.reverse()\n    print(sum(l[:min(k+1,n)]))", "for _ in range(int(input())):\n\tn, k = list(map(int, input().split()))\n\tA = list(map(int, input().split()))\n\n\tA.sort(reverse=True)\n\tif k == 0:\n\t\tprint(max(A) - min(A))\n\telse:\n\t\tprint(A[0] + sum(A[1:k+1]))\n", "n = int(input())\n\nfor _ in range(n):\n    n, k = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n\n    print(sum(arr[:k+1]))\n", "\"\"\"T=int(input())\nfor _ in range(0,T):\n    n=int(input())\n    a,b=map(int,input().split())\n    s=input()\n    s=[int(x) for x in input().split()]\n    for i in range(0,len(s)):\n        a,b=map(int,input().split())\"\"\"\n\n\nT=int(input())\nfor _ in range(0,T):\n    n,k=list(map(int,input().split()))\n    s=[int(x) for x in input().split()]\n    s.sort()\n    s=s[::-1]\n    for i in range(1,min(k+1,len(s))):\n        s[0]+=s[i]\n\n    print(s[0])\n", "t=int(input())\nwhile t:\n\tt-=1\n\tn,k=list(map(int,input().split()))\n\ta=[int(i) for i in input().split()]\n\ta.sort()\n\tans=0\n\ta.reverse()\n\tfor i in range(k+1):\n\t\tans+=a[i]\n\t\t\n\tprint(ans)\n"]