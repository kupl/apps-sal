["def solve(a,n):\n max1=curr=a[0]\n for i in range(1,n):\n  curr=max(a[i],curr+a[i])\n  max1=max(max1,curr)\n return max1\n \nn,k = list(map(int,input().split()))\na = list(map(int,input().split()))\nprint(sum(a)-solve(a,n)+solve(a,n)/k)\n", "# cook your dish here\ndef atharva(a:list,n:int): \n msf = mh = a[0]\n for i in range(n):\n  mh = max(a[i],mh+a[i])\n  msf = max(msf,mh)\n return msf\n\nn,x = map(int,input().split())\na = list(map(int,input().split()))\nsumm = sum(a)\nmax_sum = atharva(a,len(a))\nprint(summ - max_sum + max_sum/x)", "# cook your dish here\ndef atharva(a:list,n:int): \n msf = a[0]\n mh = a[0]\n for i in range(n):\n  mh = max(a[i],mh+a[i])\n  msf = max(msf,mh)\n return msf\n \n \nn,x = map(int,input().split())\na = list(map(int,input().split()))\nsumm = sum(a)\nmax_sum = atharva(a,len(a))\nprint(summ - max_sum + max_sum/x)", "# cook your dish here\ndef maxSubArraySum(a,size): \n  \n max_so_far =a[0] \n curr_max = a[0] \n  \n for i in range(1,size): \n  curr_max = max(a[i], curr_max + a[i]) \n  max_so_far = max(max_so_far,curr_max) \n   \n return max_so_far \nn,x = map(int,input().split())\na = list(map(int,input().split()))\nt = sum(a)\nu = maxSubArraySum(a,n)\nprint(t-u+u/x)", "def maxSubArraySum(a,size):      \n max_so_far,curr_max = a[0],a[0] \n for i in range(1,size): \n  curr_max = max(a[i], curr_max + a[i]) \n  max_so_far = max(max_so_far,curr_max) \n return max_so_far \nn,x = map(int,input().split())\na = list(map(int,input().split()))\nprint(sum(a)-maxSubArraySum(a,n)+ (maxSubArraySum(a,n)/x))", "def maxSubArraySum(a,size): \n  \n max_so_far =a[0] \n curr_max = a[0] \n  \n for i in range(1,size): \n  curr_max = max(a[i], curr_max + a[i]) \n  max_so_far = max(max_so_far,curr_max) \n   \n return max_so_far \nn,x = map(int,input().split())\na = list(map(int,input().split()))\nt = sum(a)\nu = maxSubArraySum(a,n)\nprint(t-u+u/x)", "# cook your dish here\ndef func1(l):\n if(len(l)==1):\n  return 0\n elif(len(l)==2):\n  return l[1]-l[0]\n else:\n  mid=len(l)//2\n  p=l[:mid]\n  q=l[mid:]\n  return max(func1(p),func1(q),max(q)-min(p))\ndef func2(l):\n if(len(l)==1):\n  return float('inf')\n elif(len(l)==2):\n  return l[1]-l[0]\n else:\n  mid=len(l)//2\n  p=l[:mid]\n  q=l[mid:] \n  return min(func2(p),func2(q),min(q)-max(p))\nn,x=list(map(int,input().split()))\narr=list(map(int,input().split()))\nl=[0]\nfor i in arr:\n l.append(l[-1]+i)\nl.pop(0)\nif(x==1):\n print(l[-1])\nelif((1/x)-1<0):\n v=func1(l)\nelse:\n v=func2(l)\nprint(l[-1]-v+(v/x))\n\n\n\n", "# cook your dish here\nn,x=list(map(int,input().split()))\nl=list(map(int,input().split()))\nres=l[0]\ntemp=l[0]\nfor i in range(1,n):\n temp=max(l[i],temp+l[i])\n res=max(temp,res)\nprint(sum(l)-res+(res/x)) \n", "def max_possible_sum_of_subsegment(array):\n current_max=0\n maxx=0\n for j in array:\n  current_max+=j\n  if maxx<current_max:\n   maxx=current_max\n  if current_max<0:\n   current_max=0\n return maxx\n\n\nn,x=list(map(int,input().split()))\nl=list(map(int,input().split()))\ntot=sum(l)\nmaxx=max_possible_sum_of_subsegment(l)\nprint(tot-(maxx)+(maxx/x))\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nsumi=0\nans=10**20\nfor i in range(len(a)):\n sumi=sum(a)\n for j in range(i,len(a)):\n  sumi=(sumi-a[j])+(a[j]/k)\n  ans=min(ans,sumi)\nprint(ans)\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nsumi=0\nans=10**20\nfor i in range(len(a)):\n sumi=sum(a)\n for j in range(i,len(a)):\n  sumi=(sumi-a[j])+(a[j]/k)\n  ans=min(ans,sumi)\nprint(ans)\n", "n,x=map(int,input().split())\na=list(map(int,input().split()))\nb=[]\ni=0\nwhile(i<n):\n j=i+1\n while(j<=n):\n  b.append([sum(a[i:j]),i,j])\n  j+=1\n i+=1 \nb.sort()\nl=len(b)\nv=b[l-1][1]\ny=b[l-1][2]\nz=b[l-1][0]\nprint(float(sum(a[0:v])+sum(a[y:n])+(z/x)))", "n,m=list(map(int,input().split()))\nl=list(map(int,input().split()))\ninc,enc=0,0\nfor i in range(0,len(l)):\n inc=max(l[i],inc+l[i])\n enc=max(enc,inc)\nresult=sum(l)-enc\nprint(result+enc/m)\n", "# cook your dish here\nn,x=list(map(int,input().split()))\na=list(map(int,input().split()))\ntotal=sum(a)\ncurrent_max=a[0]\ntotal_max=a[0]\nfor i in range(1,len(a)):\n current_max=max(a[i],current_max+a[i])\n total_max=max(total_max,current_max)\nprint(total-total_max+(total_max/x))\n\n\n\n\n\n \n", "n,k=list(map(int,input().split()))\nl=list(map(int,input().split()))\ni=0\nx=sum(l)\nd=x\nm=0\nfor i in range(n):\n c=0\n for j in range(i,n):\n  c+=l[j]\n  m=max(c,m)\nd-=m\nd+=m/k\n  \n  \n\nprint(d)\n  \n  \n   \n", "# cook your dish here\nn,x=map(int,input().split())\nl=list(map(int,input().split()))\nans=l[0]\ntemp=l[0]\nfor i in range(1,n):\n temp=max(l[i],temp+l[i])\n ans=max(temp,ans)\nprint(sum(l)-ans+(ans/x))", "n,x=list(map(int,input().split()))\na=list(map(int,input().split()))\nmaxi=a[0]\np=0\nfor i in range (n):\n sumi=a[i]\n if (sumi>maxi):\n  maxi=sumi \n  \n for j in range (i+1,n):\n  sumi+=a[j]\n  if (i==0):\n   p+=a[j]\n  if (sumi>maxi):\n   maxi=sumi\n  \n if (sumi>maxi):\n  maxi=sumi \n  \np+=a[0]\n\nprint(p-maxi+maxi/x)\n", "n,x=list(map(int,input().split()))\na=list(map(int,input().split()))\nmini,maxi=a[0],a[0]\np=0\nfor i in range (n):\n sumi=a[i]\n if (sumi>maxi):\n  maxi=sumi \n if (sumi<mini):\n  mini=sumi \n for j in range (i+1,n):\n  sumi+=a[j]\n  if (i==0):\n   p+=a[j]\n  if (sumi>maxi):\n   maxi=sumi\n  if (sumi<mini):\n   mini=sumi\n if (sumi>maxi):\n  maxi=sumi \n if (sumi<mini):\n  mini=sumi \np+=a[0]\n\nprint(min((p-maxi+maxi/x),(p-mini+mini/x)))\n", "def get_the_largest_contiguous_subarray_sum(A,N):\n\n max_sum_so_far=0\n max_sum_ending_here=0\n\n for i in range(N):\n  max_sum_ending_here+=A[i]\n\n  if max_sum_ending_here<0:\n   max_sum_ending_here=0\n  else:\n   max_sum_so_far=max(max_sum_so_far,max_sum_ending_here)\n\n return max_sum_so_far\n\n\nN,x=list(map(int,input().split()))\nA=list(map(int,input().split()))\narray_sum=sum(A)\nmax_subarray_sum=get_the_largest_contiguous_subarray_sum(A,N)\nprofit=max_subarray_sum-(max_subarray_sum/x)\nmin_sum_possible=array_sum-profit\nprint(min_sum_possible)"]