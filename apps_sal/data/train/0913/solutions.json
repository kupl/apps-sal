["n,m,k=map(int, input().split())\na = []\ncheck = [0]*m\nwhile k!= 0:\n x1,y1,x2,y2 =map(int,input().split())\n a.append([x1,y1,x2,y2])\n check[y1-1] += 1\n check[y2-1] += 1\n k-= 1\nmaxi = check.index(max(check))+1\nsum = 0\nk = 0\nfor i in range(len(a)):\n x1,y1,x2,y2 = a[i]\n if (y1 > maxi and y2 > maxi) or (y1<maxi and y2 < maxi):\n  sum+= abs(y2-y1)*2\n  sum += abs(x2-x1)*2\n else:\n  if y1 != maxi:\n   k = abs(y1-maxi)\n   sum+= k*2\n  if x1 != x2:\n   k = abs(x2-x1)\n   sum += k\n  if y2 != maxi:\n   k = abs(y2-maxi)\n   sum+= k*2\nprint(sum)", "n,m,k=map(int, input().split())\na = []\ncheck = [0]*m\nwhile k!= 0:\n x1,y1,x2,y2 =map(int,input().split())\n a.append([x1,y1,x2,y2])\n check[y1-1] += 1\n #check[y2-1] += 1\n k-= 1\nmaxi = check.index(max(check))+1\nsum = 0\nk = 0\nfor i in range(len(a)):\n x1,y1,x2,y2 = a[i]\n if y1 != maxi:\n  k = abs(y1-maxi)\n  sum+= k*2\n if x1 != x2:\n  k = abs(x2-x1)\n  sum += k\n if y2 != maxi:\n  k = abs(y2-maxi)\n  sum+= k*2\nprint(sum)", "n,m,k=map(int, input().split())\na = []\ncheck = [0]*m\nwhile k!= 0:\n x1,y1,x2,y2 =map(int,input().split())\n a.append([x1,y1,x2,y2])\n check[y1-1] += 1\n check[y2-1] += 1\n k-= 1\nmaxi = check.index(max(check))+1\nsum = 0\nk = 0\nfor i in range(len(a)):\n x1,y1,x2,y2 = a[i]\n if y1 != maxi:\n  k = abs(y1-maxi)\n  sum+= k*2\n if x1 != x2:\n  k = abs(x2-x1)\n  sum += k\n if y2 != maxi:\n  k = abs(y2-maxi)\n  sum+= k*2\nprint(sum)", "n,m,k=map(int, input().split())\na = []\ncheck = [0]*m\nwhile k!= 0:\n x1,y1,x2,y2 =map(int,input().split())\n a.append([x1,y1,x2,y2])\n check[y1-1] += 1\n k-= 1\nmaxi = check.index(max(check))+1\nsum = 0\nk = 0\nfor i in range(len(a)):\n x1,y1,x2,y2 = a[i]\n if y1 != maxi:\n  k = abs(y1-maxi)\n  sum+= k*2\n if x1 != x2:\n  k = abs(x2-x1)\n  sum += k\n if y2 != maxi:\n  k = abs(y2-maxi)\n  sum+= k*2\nprint(sum)", "# cook your dish here\nN,M,K=list(map(int,input().split()))\nl1=[]\nd={}\nfor i in range(K):\n l=list(map(int,input().split()))\n l1.append(l)\n if l[1] in d:\n  d[l[1]]=d[l[1]]+l.count(l[1])\n elif l[3] in d:\n  d[l[3]]=d[l[3]]+l.count(l[1])\n else:\n  d[l[1]]=l.count(l[1])\n  d[l[3]]=l.count(l[3])\nk=max(d, key=d.get)\ns=0\nfor i in range(K):\n s=s+2*(abs(l1[i][1]-k))+2*(abs(l1[i][3]-k))+(abs(l1[i][0]-l1[i][2]))\nprint(s)\n \n", "# cook your dish here\nimport collections\nn,m,k=list(map(int,input().split()))\nl = [[int(j) for j in input().split()] for i in range(k)]\n\np=[]\nfor i in range(k):\n p.append(l[i][1])\n\nf={}\n\nfor i in range(len(p)):\n if p[i] in f:\n  f[p[i]]+=1\n else:\n  f[p[i]]=1\n\nkey=0\nmax=0\nfor i in list(f.keys()):\n if f[i]>max:\n  max=f[i]\n  key=i\n\nmin=0\nfor i in range(k):\n min=min+(abs(l[i][1]-key)*2)+(abs(l[i][0]-l[i][2]))+(abs(l[i][3]-key)*2)\n \nprint(min)\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n \n \n \n", "# cook your dish here\nimport sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n if K <= 10:\n  ans = INF\n  for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n  print(ans)\n else:\n  def horiz():\n   ans=0\n \n   for a,c,x in ABC:\n     max1=0\n     lv=1\n     dist=[0]*M\n     yo=min(a,c)\n     y1=max(a,c)\n     if (yo-x//4)>1:\n      lv=yo-x//4\n     up=M\n     if (x//4+y1)<up:\n      up=x//4+y1\n     for j in range(lv,up+1):\n      if j < yo:\n       dist[j]+=x-4*(yo-j)\n      elif j>=yo and j<=y1:\n       dist[j]+=x\n      else:\n       dist[j]+=x-4*(j-y1)\n      if dist[j]>dist[max1]:\n       max1=j\n   return dist[max1]\n \n\n  m = horiz()\n  res = 0\n  for a, b, c in ABC:\n   res += (2*abs(a-b) +2*c)\n  print(res-m)\nexcept:\n pass", "try:\n a,b,c=list(map(int,input().split()))\n r=0\n for _ in range(c):\n  w,x,y,z=list(map(int,input().split()))\n  r+=abs(w-y)\n  r+=2*abs(x-z)\n print(r)\nexcept:\n pass\n", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n ans = INF\n for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n print(ans)\n\nexcept:\n pass", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n if K <= 10:\n  ans = INF\n  for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n  print(ans)\n else:\n  def horiz():\n   ans=0\n \n   for a,c,x in ABC:\n     max1=0\n     lv=1\n     dist=[0]*M\n     yo=min(a,c)\n     y1=max(a,c)\n     if (yo-x//4)>1:\n      lv=yo-x//4\n     up=M\n     if (x//4+y1)<up:\n      up=x//4+y1\n     for j in range(lv,up+1):\n      if j < yo:\n       dist[j]+=x-4*(yo-j)\n      elif j>=yo and j<=y1:\n       dist[j]+=x\n      else:\n       dist[j]+=x-4*(j-y1)\n      if dist[j]>dist[max1]:\n       max1=j\n   return dist[max1]\n \n\n  m = horiz()\n  res = 0\n  for a, b, c in ABC:\n   res += (2*abs(a-b) +2*c)\n  print(res-m)\nexcept:\n pass", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n if K <= 10:\n  ans = INF\n  for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n  print(ans)\n else:\n  def horiz():\n   ans=0\n \n   for yo,y1,x in ABC:\n     max1=0\n     lv=1\n     dist=[0]*M\n     if (yo-x//4)>1:\n      lv=yo-x//4\n     up=M\n     if (x//4+y1)<up:\n      up=x//4+y1\n     for j in range(lv,up+1):\n      if j < yo:\n       dist[j]+=x-4*(yo-j)\n      elif j>=yo and j<=y1:\n       dist[j]+=x\n      else:\n       dist[j]+=x-4*(j-y1)\n      if dist[j]>dist[max1]:\n       max1=j\n   return dist[max1]\n \n\n  m = horiz()\n  res = 0\n  for a, b, c in ABC:\n   res += (2*abs(a-b) +2*c)\n  print(res-m)\nexcept:\n pass", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n if K <= 10:\n  ans = INF\n  for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n  print(ans)\n else:\n  def horiz():\n   ans=0\n \n   for yo,y1,x in ABC:\n     max1=0\n     lv=1\n     dist=[0]*M\n     if (yo-x//4)>1:\n      lv=yo-x//4\n     up=M\n     if (x//4+y1)<up:\n      up=x//4+y1\n     for j in range(lv,up+1):\n      if j < yo:\n       dist[j]+=x-4*(yo-j)\n      elif j>=yo and j<=y1:\n       dist[j]+=x\n      else:\n       dist[j]+=x-4*(j-y1)\n      if dist[j]>dist[max1]:\n       max1=j\n     return dist[max1]\n \n\n  m = horiz()\n  res = 0\n  for a, b, c in ABC:\n   res += (2*abs(a-b) +2*c)\n  print(res-m)\nexcept:\n pass", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n if K <= 10:\n  ans = INF\n  for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n  print(ans)\n else:\n  def horiz():\n   ans=0\n \n   for yo,y1,x in ABC:\n     max1=0\n     lv=1\n     dist=[0]*M\n     if (yo-x//4)>1:\n      lv=yo-x//4\n     up=M\n     if (x//4+y1)<up:\n      up=x//4+y1\n     for j in range(lv,up+1):\n      if j < yo:\n       dist[j]+=x-4*(yo-j)\n      elif j>=yo and j<=y1:\n       dist[j]+=x\n      else:\n       dist[j]+=x-4*(j-y1)\n      if dist[j]>dist[max1]:\n       max1=j\n     return dist[max1]\n \n\n  m = horiz()\n  res = 0\n  for a, b, c in ABC:\n   res += (2*abs(a-b) +2*c)\n  print(ans-m)\nexcept:\n pass", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n if K <= 10:\n  ans = INF\n  for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n  print(ans)\n else:\n  def horiz():\n   ans=0\n \n   for yo,y1,x in ABC:\n     max1=0\n     lv=1\n     dist=[0]*M\n     if (yo-x//4)>1:\n      lv=yo-x//4\n     up=M\n     if (x//4+y1)<up:\n      up=x//4+y1\n     for j in range(lv,up+1):\n      if j < yo:\n       dist[j]+=x-4*(yo-j)\n      elif j>=yo and j<=y1:\n       dist[j]+=x\n      else:\n       dist[j]+=x-4*(j-y1)\n      if dist[j]>dist[max1]:\n       max1=j\n     return max1\n \n \n    \n  m = horiz()\n  res = 0\n  for a, b, c in ABC:\n   res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n  ans = min(ans, res)\n  print(ans)\nexcept:\n pass", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n if K <= 10:\n  ans = INF\n  for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n  print(ans)\n else:\n  def horiz():\n   ans=0\n \n   for yo,y1,x in ABC:\n     max1=0\n     lv=1\n     dist=[0]*M\n     if (yo-x//4)>1:\n      lv=yo-x//4\n     up=M\n     if (x//4+y1)<up:\n      up=x//4+y1\n     for j in range(lv,up+1):\n      if j < yo:\n       dist[j]+=x-4*(yo-j)\n      elif j>=yo and j<=y1:\n       dist[j]+=x\n      else:\n       dist[j]+=x-4*(j-y1)\n      if dist[j]>dist[max1]:\n       max1=j\n   return max1\n \n \n    \n  m = horiz()\n  res = 0\n  for a, b, c in ABC:\n   res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n  ans = min(ans, res)\n  print(ans)\nexcept:\n pass", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\ntry:\n  \n INF = 10**18+3\n N, M, K = map(int, readline().split())\n Points = [tuple(map(int, readline().split())) for _ in range(K)]\n ABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\n ans = INF\n l=[]\n if K <= 10:\n  ans = INF\n  for m in range(1, M+1):\n   res = 0\n   for a, b, c in ABC:\n    res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n   ans = min(ans, res)\n  print(ans)\n else:\n  def horiz():\n   ans=0\n \n   for yo,y1,x in ABC:\n     lv=1\n     dist=[0]*M\n     if (yo-x//4)>1:\n      lv=yo-x//4\n     up=M\n     if (x//4+y1)<up:\n      up=x//4+y1\n     for j in range(lv,up+1):\n      if j < yo:\n       dist[j]+=x-4*(yo-j)\n      elif j>=yo and j<=y1:\n       dist[j]+=x\n      else:\n       dist[j]+=x-4*(j-y1)\n      if dist[j]>dist[max1]:\n       max1=j\n   return max1\n \n \n    \n  m = horiz()\n  res = 0\n  for a, b, c in ABC:\n   res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n  ans = min(ans, res)\n  print(ans)\nexcept:\n pass", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\nINF = 10**18+3\nN, M, K = map(int, readline().split())\nPoints = [tuple(map(int, readline().split())) for _ in range(K)]\nABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\nans = INF\nl=[]\nif K <= 10:\n ans = INF\n for m in range(1, M+1):\n  res = 0\n  for a, b, c in ABC:\n   res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n  ans = min(ans, res)\n print(ans)\nelse:\n def horiz():\n  ans=0\n\n  for yo,y1,x in ABC:\n    lv=1\n    dist=[0]*M\n    if (yo-x//4)>1:\n     lv=yo-x//4\n    up=M\n    if (x//4+y1)<up:\n     up=x//4+y1\n    for j in range(lv,up+1):\n     if j < yo:\n      dist[j]+=x-4*(yo-j)\n     elif j>=yo and j<=y1:\n      dist[j]+=x\n     else:\n      dist[j]+=x-4*(j-y1)\n     if dist[j]>dist[max1]:\n      max1=j\n  return max1\n\n\n   \n m = horiz()\n res = 0\n for a, b, c in ABC:\n  res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n ans = min(ans, res)\n print(ans)", "import sys\ntry:\n n,m,k=list(map(int,sys.stdin.readline().split()))\n xo,yo,x1,y1=[0]*k,[0]*k,[0]*k,[0]*k\n dist=[0]*(m+1)\n max1=0\n for i in range(0,k):\n  h1,u1,h2,u2=list(map(int,sys.stdin.readline().split()))\n  xo[i]=min(h1,h2)\n  x1[i]=max(h1,h2)\n  yo[i]=min(u1,u2)\n  y1[i]=max(u1,u2)\n  lv=1\n  x=x1[i]-xo[i]\n  if (yo[i]-x//4)>1:\n   lv=yo[i]-x//4\n  up=m\n  if (x//4+y1[i])<up:\n   up=x//4+y1[i]\n  for j in range(lv,up+1):\n   if j < yo[i]:\n    dist[j]+=x-4*(yo[i]-j)\n   elif j>=yo[i] and j<=y1[i]:\n    dist[j]+=x\n   else:\n    dist[j]+=x-4*(j-y1[i])\n   if dist[j]>dist[max1]:\n    max1=j\n cost=0\n for i in range(k):\n  cost+=2*((x1[i]-xo[i])+(y1[i]-yo[i]))\n print(cost-dist[max1])\n\nexcept:\n pass\n\n\n\n\n\n\n", "try:\n n,m,k=list(map(int,input().split()))\n xo,yo,x1,y1=[0]*k,[0]*k,[0]*k,[0]*k\n dist=[0]*(m+1)\n max1=0\n cost=0\n for i in range(0,k):\n  h1,u1,h2,u2=list(map(int,input().split()))\n  xo[i]=min(h1,h2)\n  x1[i]=max(h1,h2)\n  yo[i]=min(u1,u2)\n  y1[i]=max(u1,u2)\n if (min(yo)==max(yo)) or (min(y1)==max(y1)):\n  print(sum(x1)-sum(xo)+2*(sum(yo)-sum(y1)))\n else:\n  cost=0\n  for i in range(k):\n   cost+=2*((x1[i]-xo[i])+(y1[i]-yo[i]))\n   lv=1\n   x=x1[i]-xo[i]\n   if (yo[i]-x//4)>1:\n    lv=yo[i]-x//4\n   up=m\n   if (x//4+y1[i])<up:\n    up=x//4+y1[i]\n   for j in range(lv,up+1):\n    if j < yo[i]:\n     dist[j]+=x-4*(yo[i]-j)\n    elif j>=yo[i] and j<=y1[i]:\n     dist[j]+=x\n    else:\n     dist[j]+=x-4*(j-y1[i])\n    if dist[j]>dist[max1]:\n     max1=j\n  print(cost-dist[max1])\n\nexcept:\n pass\n\n\n\n\n\n\n", "try:\n n,m,k=list(map(int,input().split()))\n dist=[0]*(m+1)\n max1=0\n cost=0\n for i in range(0,k):\n  h1,u1,h2,u2=list(map(int,input().split()))\n  xo=min(h1,h2)\n  x1=max(h1,h2)\n  yo=min(u1,u2)\n  y1=max(u1,u2)\n  cost+=2*((x1-xo)+(y1-yo))\n  lv=1\n  x=x1-xo\n  if (yo-x//4)>1:\n   lv=yo-x//4\n  up=m\n  if (x//4+y1)<up:\n   up=x//4+y1\n  for j in range(lv,up+1):\n   if j < yo:\n    dist[j]+=x-4*(yo-j)\n   elif j>=yo and j<=y1:\n    dist[j]+=x\n   else:\n    dist[j]+=x-4*(j-y1)\n   if dist[j]>dist[max1]:\n    max1=j\n print(cost-dist[max1])\n\nexcept:\n pass\n\n\n\n\n\n\n", "try:\n n,m,k=list(map(int,input().split()))\n xo,yo,x1,y1=[0]*k,[0]*k,[0]*k,[0]*k\n dist=[0]*(m+1)\n max1=0\n for i in range(0,k):\n  h1,u1,h2,u2=list(map(int,input().split()))\n  xo[i]=min(h1,h2)\n  x1[i]=max(h1,h2)\n  yo[i]=min(u1,u2)\n  y1[i]=max(u1,u2)\n  lv=1\n  x=x1[i]-xo[i]\n  if (yo[i]-x//4)>1:\n   lv=yo[i]-x//4\n  up=m\n  if (x//4+y1[i])<up:\n   up=x//4+y1[i]\n  for j in range(lv,up+1):\n   if j < yo[i]:\n    dist[j]+=x-4*(yo[i]-j)\n   elif j>=yo[i] and j<=y1[i]:\n    dist[j]+=x\n   else:\n    dist[j]+=x-4*(j-y1[i])\n   if dist[j]>dist[max1]:\n    max1=j\n cost=0\n for i in range(k):\n  cost+=2*((x1[i]-xo[i])+(y1[i]-yo[i]))\n print(cost-dist[max1])\n\nexcept:\n pass\n\n\n\n\n\n\n", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\nINF = 10**18+3\nN, M, K = map(int, readline().split())\nPoints = [tuple(map(int, readline().split())) for _ in range(K)]\nABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\nans = INF\nl=[]\nif K <= 10:\n ans = INF\n for m in range(1, M+1):\n  res = 0\n  for a, b, c in ABC:\n   res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n  ans = min(ans, res)\n print(ans)\nelse:\n def horiz():\n  for x,y,z in ABC:\n   l.append(x)\n   l.append(y)\n  return mode(l)\n m = horiz()\n res = 0\n for a, b, c in ABC:\n  res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n ans = min(ans, res)\n print(ans)", "import sys\nimport statistics \nfrom statistics import mode\nreadline = sys.stdin.readline\nINF = 10**18+3\nN, M, K = map(int, readline().split())\nPoints = [tuple(map(int, readline().split())) for _ in range(K)]\nABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\nans = INF\nl=[]\ndef horiz():\n for x,y,z in ABC:\n  l.append(x)\n  l.append(y)\n return mode(l)\nm = horiz()\nres = 0\nfor a, b, c in ABC:\n res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\nans = min(ans, res)\nprint(ans)", "import sys\nreadline = sys.stdin.readline\nINF = 10**18+3\nN, M, K = map(int, readline().split())\nPoints = [tuple(map(int, readline().split())) for _ in range(K)]\nABC = [(p[1], p[3], abs(p[0] - p[2])) for p in Points]\nif K <= 10:\n ans = INF\n for m in range(1, M+1):\n  res = 0\n  for a, b, c in ABC:\n   res += min(2*abs(a-m) + 2*abs(b-m) + c, 2*abs(a-b) + 2*c)\n  ans = min(ans, res)\n print(ans)"]