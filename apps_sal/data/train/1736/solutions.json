["def is_incrementing(number): return str(number) in '1234567890'\ndef is_decrementing(number): return str(number) in '9876543210'\ndef is_palindrome(number):   return str(number) == str(number)[::-1]\ndef is_round(number):        return set(str(number)[1:]) == set('0')\n\ndef is_interesting(number, awesome_phrases):\n    tests = (is_round, is_incrementing, is_decrementing,\n             is_palindrome, awesome_phrases.__contains__)\n       \n    for num, color in zip(range(number, number+3), (2, 1, 1)):\n        if num >= 100 and any(test(num) for test in tests):\n            return color\n    return 0", "import re\ndef is_sequential(string):\n    return string in \"1234567890\" or string in \"9876543210\"\n\ndef is_interesting(number, awesome_phrases):\n    print (number)\n    interestingness = 2\n    for i in (number, number + 1, number + 2):\n        if (number != i):\n            interestingness = 1\n        if (i < 100):\n            continue\n        if (i in awesome_phrases):\n            return interestingness\n        i = str(i)\n        if re.match(r\"^\\d0+$\", i):\n            return interestingness\n        if i == i[::-1]:\n            return interestingness\n        if is_sequential(i):\n            return interestingness\n        if re.match(r\"^(\\d)\\1+$\", i):\n            return interestingness\n    \n    \n    return 0", "def is_good(n, awesome):\n    return n in awesome or str(n) in \"1234567890 9876543210\" or str(n) == str(n)[::-1] or int(str(n)[1:]) == 0\n\ndef is_interesting(n, awesome):\n    if n > 99 and is_good(n, awesome):\n        return 2\n    if n > 97 and (is_good(n + 1, awesome) or is_good(n + 2, awesome)):\n        return 1\n    return 0", "def is_interesting(n, awesome_phrases):\n    import math\n    for m in range(3):\n        s = str(n + m)\n        if len(s) > 2 and (zf(s) or sd(s) or seqinc(s) or seqdec(s) or pal(s) or awe(s, awesome_phrases)):\n            if m == 0: return 2\n            else: return 1\n    return 0\n    \ndef awe(s, l):\n    return s in [str(x) for x in l]\n    \ndef pal(s):\n    return s == s[::-1]\n    \ndef seqdec(s):\n    a = '9876543210'\n    for i in range(len(s)-1):\n        if a.index(s[i]) + 1 != a.index(s[i+1]): return False\n    return True\n    \ndef seqinc(s):\n    a = '1234567890'\n    for i in range(len(s)-1):\n        if a.index(s[i]) + 1 != a.index(s[i+1]): return False\n    return True\n\ndef sd(s):\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]: return False\n    return True\n\ndef zf(s):\n    for i in range(1, len(s)):\n        if s[i] != '0': return False\n    return True", "def is_interesting(number, awesome_phrases):\n    for i in [number, number+1, number+2]:\n        if i<100 :\n            continue\n        j=str(i)\n        if any([\n            i in awesome_phrases,\n            all([j[x]=='0' for x in range(1,len(j))]),\n            all([j[x]==j[0] for x in range(1,len(j))]),\n            j == j[::-1],\n            j in '1234567890',\n            j in '9876543210'\n                ]):\n            return 2-bool(number-i)\n    return 0", "def is_interesting(number, awesome_phrases):\n    for r, num in zip((2, 1, 1), range(number, number + 3)):\n        num_str = str(num)\n        if num in awesome_phrases or num > 99 and (int(num_str[1:]) == 0 or num_str[::-1] == num_str or num_str in '1234567890' or num_str in '9876543210'):\n            return r\n    return 0", "def is_interesting(number, awesome_phrases):\n    def check(n):\n        nonlocal awesome_phrases\n        n = str(n)\n        test0 = lambda x: len(x) > 2\n        test1 = lambda x: set(x[1:]) == set(\"0\")\n        test2 = lambda x: len(set(x)) == 1\n        test3 = lambda x: all((int(b) or 10) - (int(a) or 10) == 1 for a, b in zip(x, x[1:]))\n        test4 = lambda x: all(int(a) - int(b) == 1 for a, b in zip(x, x[1:]))\n        test5 = lambda x: x == x[::-1]\n        test6 = lambda x: int(x) in awesome_phrases\n        return test0(n) and (test1(n) or test2(n) or test3(n) or test4(n) or test5(n) or test6(n))\n    return int((check(number) and 2) or (check(number+1) or check(number+2)))", "is_exact = lambda n, sn, p: n>99 and (\n        all(d=='0' for d in sn[1:]) or\n        all(d == sn[0] for d in sn) or\n        sn in '1234567890' or\n        sn in '9876543210' or\n        sn == sn[::-1] or \n        n in p)\n\nis_interesting = lambda n, p: next([_f for _f in (\n    1+(v==n) if is_exact(v, str(v), p) else 0 for v in range(n,n+3)) if _f],0)\n", "isZeros = lambda nStr : sum(map(int,list(nStr))) == int(nStr[0])\nisAll   = lambda nStr : nStr == nStr[0]*len(nStr)\nisInc   = lambda nStr : nStr in \"9876543210 1234567890\"\nisPalin = lambda nStr : nStr == nStr[::-1]\n\ndef is_interesting(number, awesome_phrases):\n    for i in range(3):\n        nStr = str(number+i)\n        if int(nStr)>99 and ( isZeros(nStr) or isAll(nStr) or isInc(nStr) or isPalin(nStr) or int(nStr) in awesome_phrases ):\n            return {0:2, 1:1, 2:1}[i]\n    return 0", "def is_interesting(number, awesome_phrases, within=2):\n    if number in awesome_phrases: return 2\n    if number >= 100:\n        n = str(number)\n        if set(n[1:]) == {'0'}: return 2 # Finishing by 0\n        if len(set(n)) == 1: return 2    # Same digit\n        if n in '1234567890': return 2   # Incrementing\n        if n in '9876543210': return 2   # Decrementing\n        if n == n[::-1]: return 2        # Palindrome\n    return any(is_interesting(number+i+1, awesome_phrases, 0) for i in range(within))"]