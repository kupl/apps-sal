["# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    \n    def pruneTreeHelper(self, root: TreeNode) -> TreeNode:\n        if not root:\n            return None\n        \n        left = self.pruneTreeHelper(root.left)\n        right = self.pruneTreeHelper(root.right)\n        \n        if not left:\n            root.left = None\n        \n        if not right:\n            root.right = None\n        \n        if root.val == 0 and root.right is None and root.left is None:\n            return None\n        else:\n            return root\n    \n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        return self.pruneTreeHelper(root)", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        \n        if not root:\n            return None \n        \n        root.left =self.pruneTree(root.left)\n        \n        root.right= self.pruneTree(root.right)\n        if not root.left and not root.right and root.val ==0:\n            return None\n        \n        return root\n        \n", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        \n        def prune(node: TreeNode) -> bool:\n            \n            \n            if not node:\n                return True\n            \n            # if node is 1, the tree with node as root does not need to be pruned\n\n            \n            left_prune = prune(node.left)\n            right_prune = prune(node.right)\n            \n            if prune(node.left):\n                node.left = None\n            if prune(node.right):\n                node.right = None\n            \n            return (node.val == 0) and left_prune and right_prune\n        \n        \n        \n        if prune(root):\n            return None\n        \n        return root\n", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        def check(node):\n            \n            if not node.left:\n                l=True\n            else:\n                l=check(node.left)\n            if not node.right:\n                r=True\n            else:\n                r=check(node.right)\n            if l:\n                node.left=None\n            if r:\n                node.right=None\n            return l and r and node.val==0\n        ans=TreeNode()\n        ans.right=root\n        check(ans)\n        return ans.right", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        def dfs(node):\n            if not node:\n                return False\n            a1 = dfs(node.left)\n            a2 = dfs(node.right)\n            if not a1:node.left=None\n            if not a2:node.right=None\n            return node.val ==1 or a1 or a2\n        return root if dfs(root) else None\n\n", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        \n        \n        def prune_tree_helper(root):\n            if root:\n                curr_res = True if root.val == 0 else False\n                left_res = prune_tree_helper(root.left)\n                right_res = prune_tree_helper(root.right)\n                if left_res:\n                    root.left = None\n                if right_res:\n                    root.right = None\n                return curr_res and left_res and right_res\n            else:\n                return True\n        res = prune_tree_helper(root)\n        if res:\n            return None\n        else:\n            return root\n", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        return self.dfs(root)\n    \n    def dfs(self, root):\n        if not root:\n            return None\n        \n        root.left = self.dfs(root.left)\n        root.right = self.dfs(root.right)\n        \n        # Bubble up None\n        if not root.val and not root.left and not root.right:\n            return None\n        \n        return root\n        \n", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        if not root:\n            return None\n        l = self.pruneTree(root.left)\n        r = self.pruneTree(root.right)\n        if not l and not r and root.val == 0:\n            return None\n        root.left = l\n        root.right = r\n        return root", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        return root if self.dfs(root) else None\n    \n    def dfs(self, root):\n        if not root:\n            return False\n        l = self.dfs(root.left)\n        r = self.dfs(root.right)\n        if not l:\n            root.left = None\n        if not r:\n            root.right = None\n        return root.val == 1 or l or r", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        def helper(root):\n            if not root:\n                return False\n            lone = helper(root.left)\n            rone = helper(root.right)\n            if not lone:\n                root.left = None\n            if not rone:\n                root.right = None\n            if root.val == 1 or lone or rone:\n                return True\n            else:\n                return False\n                \n        if helper(root):\n            return root\n        else:\n            return None", "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pruneTree(self, root: TreeNode) -> TreeNode:\n        if root == None:\n            return None\n        left_sub = self.pruneTree(root.left)\n        right_sub = self.pruneTree(root.right)\n        if root.val  == 0 and left_sub == None and right_sub == None:\n            return None\n        root.left  = left_sub\n        root.right = right_sub\n        return root\n        \n"]