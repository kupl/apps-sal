["from math import *\n\nDIGS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef converter(n, decimals=0, base=pi):\n    lst,n = ['-'*(n<0)], abs(n)\n    pMax  = max(0, n and int(log(n,base)))\n    \n    for p in reversed(range(-decimals,pMax+1)):\n        if p==-1: lst.append('.')\n        p   = base**p\n        d,n = n/p, n%p\n        lst.append(DIGS[int(d)])\n        \n    return ''.join(lst)", "from math import pi\nfrom math import log\n\ndef converter(n, decimals=0, base=pi):\n    DIGITS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    representation = []\n    if (n < 0):\n        representation.append('-')\n        n *= -1\n    if (n == 0):\n        decimalCount = 0\n    else: \n        decimalCount = int(log(n, base))\n    for dplace in [pow(base, power) for power in range(decimalCount, -1 - decimals, -1)]:\n        rNumber = int(n / dplace)\n        n -= rNumber * dplace\n        representation.append(DIGITS[rNumber])\n        if dplace == 1 and decimals > 0: \n            representation.append('.')\n    return ''.join(representation)\n", "from math import pi\n\ndef converter(n, decimals=0, base=pi):\n    newbase = \"\"\n    temp = base\n    highdigit = 1\n    if n<0:\n        newbase=\"-\"\n        n *= -1\n    while temp <= n:\n        temp *= base\n        highdigit += 1\n    for i in reversed(list(range(-decimals, highdigit))):\n        temp = int(n / (base ** i))\n        if temp > 9:\n            digit = chr(55 + temp)\n        else: \n            digit = str(temp)\n        newbase += digit\n        n -= temp * base ** i\n        if i == 0 and decimals > 0:\n            newbase += \".\" \n    return newbase\n    #your code here\n", "from math import pi, log\n\ndef converter(n, decimals=0, base=pi):\n    \"\"\"takes n in base 10 and returns it in base pi with optional x decimals\"\"\"\n    if n==0: return \"0\" if decimals==0 else \"0.\"+\"0\"*decimals\n    lexiconums='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    res=\"\" if n>0 else \"-\"\n    n=abs(n)\n    for i in range(int(log(n)/log(base)),-decimals-1,-1):\n        divisor=base**i\n        res+=lexiconums[int(n/divisor)]\n        if i==0 and decimals>0: res+=\".\"\n        n%=divisor\n    return res", "from math import pi\nimport math\n\nnumbers = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef converter(n, decimals=0, base=pi):    \n    if n < 0:\n        return '-' + converter(-n, decimals, base)\n    result = ''\n    digits = 0\n    while n >= base ** digits:\n        #print(base ** digits, digits, n)\n        digits += 1\n    #print(digits)\n\n    for i in range(digits - 1, -decimals - 1, -1):\n        div = n / (base ** i)\n        integer = math.floor(div)\n        n = n - integer * (base ** i)\n        result = result + numbers[int(integer)]\n    \n    if decimals > 0:\n        result = result[:-decimals] + '.' + result[-decimals:]\n    #print(result)\n    if result[0] == '.':\n        result = '0' + result\n    return result", "from math import pi, log, floor\n\ndef converter(n, decimals=0, base=pi):\n    if n < 0: isNegative = True; n *= -1\n    else: isNegative = False\n    if n == 0: digits = 1\n    else: digits = floor(log(n)/log(base)+1) # Only counts digits before the decimal\n    piggyBank = n\n    base36 = ({\n    10:\"A\", 11:\"B\", 12:\"C\", 13:\"D\", 14:\"E\", \n    15:\"F\", 16:\"G\", 17:\"H\", 18:\"I\", 19:\"J\",\n    20:\"K\", 21:\"L\", 22:\"M\", 23:\"N\", 24:\"O\",\n    25:\"P\", 26:\"Q\", 27:\"R\", 28:\"S\", 29:\"T\",\n    30:\"U\", 31:\"V\", 32:\"W\", 33:\"X\", 34:\"Y\",\n    35:\"Z\"\n    })\n    # Now to create the output\n    output = \"\"\n    power = digits-1\n    debugList = []\n    while power >= 0:\n        newDig = floor(piggyBank/base**power)\n        piggyBank -= newDig*base**power\n        if newDig >= 10: newDig = base36[newDig]\n        output += str(newDig)\n        power -= 1\n    if decimals > 0: output += \".\"\n    while power * -1 <= decimals:\n        newDig = floor(piggyBank/base**power)\n        piggyBank -= newDig*base**power\n        if newDig >= 10: newDig = base36[newDig]\n        output += str(newDig)\n        power -= 1\n    if isNegative: output = \"-\" + output\n    return output\n        \n", "from math import pi\n\ndef converter(n, decimals=0, base=pi):\n    \"\"\"takes n in base 10 and returns it in any base (default is pi\n    with optional x decimals\"\"\"\n    \n    if n < 0:\n        return \"-\" + converter(-n, decimals, base)\n    \n    CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    res = \"\"\n    \n    ln = 1\n    while base ** ln <= n:\n        ln += 1\n    while 0 < ln:\n        ln -= 1\n        d = int(n / (base ** ln))\n        res += CHARS[d]\n        n -= d * (base ** ln)\n    \n    if 0 < decimals:\n        res += \".\"\n        base2 = 1\n        while 0 < decimals:\n            base2 *= (1 / base)\n            d = int(n / base2)\n            res += CHARS[d]\n            n -= d * (base2)\n            decimals -= 1\n    return res\n", "from math import pi\ndigs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef converter(n, decimals=0, base=pi):\n    neg=''\n    ans=''\n    if n<0:\n        neg='-'\n        n=-n\n    for i in range(20,-20,-1):\n        if i==-1-decimals: break\n        if i==-1: ans+='.'\n        d=int(n /(base**i))\n        ans+=digs[d]\n        n-=d*base**i\n    while len(ans)>1 and ans[0]=='0' and ans[1]!='.': ans=ans[1:]\n    return neg+ans", "from math import pi\nimport math\n\ndef converter(n, decimals=0, base=pi):\n    print(n)\n    print(decimals)\n    print(base)\n    negative = False\n    retVal = \"\"\n    if n == 0:\n        left = 0\n    else:\n        if n < 0:\n            n = n * -1\n            negative = True\n            retVal = \"-\"\n        left = math.floor(math.log(abs(n))/math.log(base))\n    charList = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n    for p in range(left,0-decimals-1,-1):\n        if p == -1:\n            retVal += \".\"\n        coeff = math.pow(base,p)\n        print(\"XXXXXXXX\")\n        print(n)\n        print(coeff)\n        print(\"XXXXXXXX\")\n        print((math.floor(n/coeff)))\n        retVal += charList[math.floor(n/coeff)]\n        n = n-math.floor(n/coeff)*coeff\n    print(retVal)\n    return retVal\n"]