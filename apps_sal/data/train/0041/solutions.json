["t = int(input())\nfor tt in range(t):\n    n,k=list(map(int,input().split()))\n    s = input()\n    ans = []\n    if s[0] == ')':\n        for i in range(n):\n            if s[i] == '(':\n                ans.append([1,i+1])\n                s = s[i::-1] + s[i+1:]\n                break\n    for i in range(1,(k-1)*2):\n        if i%2==0:\n            if s[i]!='(':\n                for j in range(i+1,n):\n                    if s[j] == '(':\n                        ans.append([i+1,j+1])\n                        s = s[:i] + s[j:i-1:-1] + s[j+1:]\n                        break\n        else:\n            if s[i]!=')':\n                for j in range(i+1,n):\n                    if s[j] == ')':\n                        ans.append([i+1,j+1])\n                        s = s[:i] + s[j:i-1:-1] + s[j+1:]\n                        break\n    for i in range((k-1)*2,(n+(2*(k-1)))//2+1):\n        if s[i]!='(':\n            for j in range(i+1,n):\n                if s[j] == '(':\n                    ans.append([i+1,j+1])\n                    s = s[:i] + s[j:i-1:-1] + s[j+1:]\n                    break\n    print(len(ans))\n    for i in ans:\n        print(*i)\n            \n\n\n\n", "t = int(input())\nfor test_i in range(t):\n    n, k = map(int, input().split())\n    s = list(input())\n    ans = []\n    for i in range(k - 1):\n        if s[2 * i] != '(':\n            i0 = s.index('(', 2 * i)\n            ans.append((2 * i + 1, i0 + 1))\n            s[2 * i], s[i0] = '(', ')'\n        if s[2 * i + 1] != ')':\n            i0 = s.index(')', 2 * i + 1)\n            ans.append((2 * i + 2, i0 + 1))\n            s[2 * i + 1], s[i0] = ')', '('\n    for i in range(n // 2 - k + 1):\n        if s[2 * (k - 1) + i] != '(':\n            i0 = s.index('(', 2 * (k - 1) + i)\n            ans.append((2 * (k - 1) + i + 1, i0 + 1))\n            s[2 * (k - 1) + i], s[i0] = '(', ')'\n    print(len(ans))\n    for pair in ans:\n        print(*pair)", "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    st = input()\n    s = [st[i] for i in range(n)]\n    res = '()' * (k - 1) + '(' * ((n - 2 * (k - 1)) // 2) + ')' * ((n - 2 * (k - 1)) // 2)\n    ans = []\n    for i in range(n):\n        if  s[i] != res[i]:\n            for j in range(i + 1, n):\n                if res[i] == s[j]:\n                    ans.append([i + 1, j + 1])\n                    sub = s[i:j + 1]\n                    sub = sub[::-1]\n                    #print(sub)\n                    for k in range(len(sub)):\n                        s[i + k] = sub[k]\n                    break\n    #print(res, s)\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i][0], ans[i][1])", "m = int(input())\nfor h in range(m):\n    n, b = list(map(int, input().split()))\n    a = input()\n    t = 0\n    ans = []\n    while b != 1:\n        if a[t] == ')':\n            for i in range(t, n):\n                if a[i] == '(':\n                    k = i\n                    break\n            c = a[t:k + 1]\n            a = a[:t] + c[::-1]  + a[k + 1:]\n            #print(t, k, a)\n            ans.append([t, k]) \n        if a[t + 1] == '(':\n            for i in range(t + 1, n):\n                if a[i] == ')':\n                    k = i\n                    break\n            c = a[t + 1:k + 1]\n            a = a[:t + 1] + c[::-1]  + a[k + 1:]\n            #print(t, k, a)\n            ans.append([t + 1, k])\n        t += 2\n        b -= 1\n    for i in range(t, t + (n - t) // 2):\n        if a[i] == ')':\n            for j in range(i, n):\n                if a[j] == '(':\n                    k = j\n                    break\n            #print(i, k)\n            c = a[i:k + 1]\n            a = a[:i] + c[::-1]  + a[k + 1:]\n            ans.append([i, k])\n    #print(a)\n    for i in range(t + (n - t) // 2, n):\n        if a[i] == '(':\n            for j in range(i, n):\n                if a[j] == ')':\n                    k = j\n                    break\n            c = a[i:k + 1]\n            a = a[:i] + c[::-1] + a[k + 1:]\n            ans.append([i, k])\n            \n    print(len(ans))\n    for i in ans:\n        print(i[0] + 1, i[1] + 1)\n", "t = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    a = []\n    s = input()\n    for j in range(len(s)):\n        a.append(s[j:j + 1])\n    answer = (k - 1) * \"()\" + (n // 2 - k + 1) * \"(\" + (n // 2 - k + 1) * \")\"\n    b = []\n    for j in range(len(answer)):\n        b.append(answer[j:j + 1])\n    ans = []\n    j = 0\n    while j < len(answer):\n        if b[j] == a[j]:\n            j += 1\n        else:\n            x = j + 1\n            while a[x] == a[j]:\n                x += 1\n            ans.append([j + 1, x + 1])\n            for f in range(j, j + (x - j + 1) // 2):\n                a[f], a[x - f + j] = a[x - f + j], a[f]\n            j += 1\n    print(len(ans))\n    for j in range(len(ans)):\n        print(\" \".join(map(str, ans[j])))", "t = int(input())\nfor z in range(t):\n    n, k = map(int, input().split())\n    arr = list(input())\n    need = '()' * (k - 1) + '(' * ((n - (k - 1) * 2) // 2) + ')' * ((n - (k - 1) * 2) // 2)\n    #print(need)\n    li = 0\n    ri = n - 1\n    ln = 0\n    rn = n - 1\n    ret = []\n    rev = 0\n    while li < n:\n        if arr[li] != need[li]:\n            ri = li + 1\n            while arr[ri] != need[li]:\n                ri += 1\n            ret.append([li, ri])\n            arr = arr[:li] + list(reversed(arr[li:ri+1])) + arr[ri+1:]\n        li += 1\n    #print(*arr, sep='')\n            \n    print(len(ret))\n    for x in ret:\n        print(x[0] + 1, x[1] + 1)", "t=int(input())\nfor r in range(t):\n n,k=list(map(int,input().split()))\n k-=1\n want='()'*k+'('*(n//2-k)+')'*(n//2-k)\n have=input()\n prn=[]\n for w in range(len(want)):\n  if have[w]!=want[w]:\n   e=w+have[w:].index(want[w])\n   have=have[:w]+have[w:e+1][::-1]+have[e+1:]\n   prn+=[[w+1,e+1]]\n print(len(prn))\n for w in prn:\n  print(*w)\n", "for _ in range(int(input())):\n    n, k = tuple(map(int, input().split()))\n    s = list(input())\n    ans = list(\"()\" * (k - 1) + \"(\" * ((n // 2) - k + 1) + \")\" * (n // 2 - k + 1))\n    ops = []\n    i = 0\n    while ans != s and i < n:\n        # print(\"----\" , i, \"----\")\n        if ans[i] != s[i]:\n            j = s[i:].index(ans[i]) + i\n            # print(0,\"|\",j, s[j], s[i])\n            ops.append(str(i + 1) + \" \" + str(j + 1))\n            for k in range(i, (j + i + 1) // 2):\n                # print(11, \"|\", j, s[k], s[j + i - k])\n                (s[k], s[j + i - k]) = (s[j + i - k], s[k])\n                # print(12, \"|\", j, s[k], s[j + i - k])\n        # print(\" \".join(s))\n        # print(\" \".join(ans))\n        # print(\"|\".join(ops))\n        i += 1\n    print(len(ops))\n    if len(ops) != 0:\n        print(\"\\n\".join(ops))\n", "t = int(input())\nfor request in range(t):\n    n, k = map(int, input().split())\n    box = list(input())\n    pattern = '()' * (k - 1) + '(' + ('()' * ((n - (k) * 2) // 2) ) + ')'\n    changes = []\n    for i in range(n):\n        if box[i] != pattern[i]:\n            for j in range(i + 1, n):\n                if box[j] == pattern[i]:\n                    for z in range((j - i + 1) // 2):\n                        box[i + z], box[j - z] = box[j - z], box[i + z]\n                    changes.append((i + 1, j + 1))\n                    break\n    print(len(changes))\n    for i in range(len(changes)):\n        print(*changes[i])", "t = int(input())\n\nfor i in range(t):\n    n, k = map(int, input().split())\n    *s, = input()\n    operations = []\n    best = (['('] + [')']) * (k - 1) + (['('] * (n // 2 - k + 1) + [')'] * (n // 2 - k + 1))\n\n    for startx_pos in range((k - 1) * 2):\n        try:\n            if s[startx_pos - 1] == ')' or startx_pos == 0:\n                end_pos = s.index('(', startx_pos)\n            else:\n                end_pos = s.index(')', startx_pos)\n        except ValueError:\n            continue\n        if startx_pos == end_pos:\n            continue\n        if startx_pos == 0:\n            s = s[:startx_pos] + s[end_pos::-1] + s[end_pos + 1:]\n        else:\n            s = s[:startx_pos] + s[end_pos:startx_pos - 1:-1] + s[end_pos + 1:]\n        operations.append(f'{startx_pos + 1} {end_pos + 1}')\n\n    for startx_pos in range((k - 1) * 2, (k - 1) * 2 + (n // 2 - k + 1)):\n        try:\n            end_pos = s.index('(', startx_pos)\n        except ValueError:\n            continue\n        if startx_pos == end_pos:\n            continue\n        if startx_pos == 0:\n            s = s[:startx_pos] + s[end_pos::-1] + s[end_pos + 1:]\n        else:\n            s = s[:startx_pos] + s[end_pos:startx_pos - 1:-1] + s[end_pos + 1:]\n        operations.append(f'{startx_pos + 1} {end_pos + 1}')\n\n    print(len(operations))\n    if len(operations):\n        print(*operations, sep='\\n')\n", "\n\ndef openBracket(i):\n    nonlocal firstOpen, ans\n    ind = index[0][firstOpen]\n    a = s[i: ind + 1]\n    a.reverse()\n    #print(i + 1, ind + 1)\n    s[i: ind + 1] = a\n    ans += [[i + 1, ind + 1]]\n    firstOpen += 1\n    \n\ndef closeBracket(i):\n    nonlocal firstClose, ans\n    ind = index[1][firstClose]\n    a = s[i: ind + 1]\n    a.reverse()\n    #print(i + 1, ind + 1)\n    ans += [[i + 1, ind + 1]]\n    s[i: ind + 1] = a\n    firstClose += 1\n    \n    \nt = int(input())\nfor h in range(t):\n    n, k = map(int, input().split())\n    s = list(input())\n    ans = []\n    fl = 0\n    index = [[], []]\n    firstOpen = 0\n    firstClose = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            index[0] += [i];\n        else:\n            index[1] += [i];\n    for i in range(2 * k - 2):\n        if fl == 0:\n            if s[i] != \"(\":\n                openBracket(i)\n            else:\n                firstOpen += 1\n        elif fl == 1:\n            if s[i] != \")\":\n                closeBracket(i)\n            else:\n                firstClose += 1\n        fl = abs(fl - 1)\n    fl = 0\n    for i in range(2 * k - 2, n):\n        if fl == 0:\n            if s[i] != \"(\":\n                openBracket(i)\n            else:\n                firstOpen += 1\n        elif fl == 1:\n            if s[i] != \")\":\n                closeBracket(i)\n            else:\n                firstClose += 1\n        if i == n // 2 - k + 2 * k - 2:\n            fl = 1\n    print(len(ans))\n    [print(*i) for i in ans]\n", "t=int(input())\nwhile t:\n    n,k=list(map(int,input().split()))\n    s=list(input())\n    hyp=[]\n    k1=k\n    while (k-1):\n        hyp.append('(')\n        hyp.append(')')\n        k-=1\n    ll=(n//2)-(k1-1)\n    for i in range(ll):\n        hyp.append('(')\n    for i in range(ll):\n        hyp.append(')')\n    #print(hyp,s)   \n    ans=[]\n    for i in range(n):\n        if hyp[i]!=s[i]:\n            l=[]\n            c=0\n            for j in range(i,n):\n                l.append(s[j])\n                c+=1\n                if s[j]==hyp[i]:\n                    ans.append(i+1)\n                    ans.append(j+1)\n                    break\n            k=i    \n            for l2 in range(c-1,-1,-1):\n                s[k]=l[l2]\n                k+=1\n    l3=len(ans)//2\n    print(l3)\n    j=0\n    for i in range(l3):\n        print(ans[j],ans[j+1])\n        j+=2\n    t-=1\n\n", "def replace(i, right_s):\n    j = i + 1\n    while j < n and s[j] != right_s:\n        j += 1\n    else:\n        for k in range((j - i + 1) // 2):\n            s[i + k], s[j - k] = s[j - k], s[i + k]\n    return j\n\nt = int(input())\noperations = []\nfor _ in range(t):\n    n, k = input().split()\n    n = int(n)\n    k = int(k) - 1\n    s = list(input())\n    operations.append([])\n    for i in range(n):\n        if i < 2 * k:\n            if i % 2 and s[i] == '(':\n                operations[_].append([i, replace(i, ')')])\n            elif i % 2 == 0 and s[i] == ')':\n                operations[_].append([i, replace(i, '(')])\n        elif i < n // 2 + k and s[i] == ')':\n            operations[_].append([i, replace(i, '(')])\n        elif i >= n // 2 + k and s[i] == '(':\n            operations[_].append([i, replace(i, ')')])\nfor i in range(t):\n    print(len(operations[i]))\n    for operation in operations[i]:\n        print(operation[0] + 1, operation[1] + 1)\n", "def craftIdeal(length, zeroes):\n    asdf = []\n    x = 0\n    for i in range(zeroes - 1):\n        asdf.append(True)\n        asdf.append(False)\n        x += 2\n    for j in range(x, x + (length - x)//2):\n        asdf.append(True)\n    for k in range(x + (length - x)//2, length):\n        asdf.append(False)\n    return asdf\n\ndef getAns(string, l, m):\n    real = []\n    for char in string:\n        if char == \")\":\n            real.append(False)\n        else:\n            real.append(True)\n    endgoal = craftIdeal(l, m)\n    operations = []\n    temp = []\n    \n    for i in range(l):\n        target = endgoal[i]\n        if real[i] != target:\n            nextDiffIndex = i + 1\n            while real[nextDiffIndex] != target:\n                nextDiffIndex += 1\n                \n            temp = real[i:nextDiffIndex + 1]\n            for j in range(i, nextDiffIndex + 1):\n                real[j] = temp[nextDiffIndex - j]\n                \n            operations.append(str(i + 1) + \" \" + str(nextDiffIndex + 1))\n    print(len(operations))\n    for e in operations:\n        print(e)\n    return\n    \nn = int(input())\nfor i in range(n):\n    k = [int(x) for x in input().split(' ')]\n    getAns(input(), k[0], k[1])\n", "for T in range(int(input())):\n\tn, k = list(map(int, input().split()))\n\ts = input()\n\tlp = 0\n\trp = 0\n\tl = []\n\tfor i in range(k * 2 - 2):\n\t\twhile lp < n and s[lp] != '(' or lp < i:\n\t\t\tlp += 1\n\t\twhile rp < n and s[rp] != ')' or rp < i:\n\t\t\trp += 1\n\t\tif i % 2 == 0 and s[i] == '(' or i % 2 == 1 and s[i] == ')':\n\t\t\tcontinue\n\t\telif i % 2 == 0:\n\t\t\tlp += 1\n\t\t\ts = s[: i] + s[i: lp][::-1] + s[lp:]\n\t\t\tl.append([i + 1, lp])\n\t\t\trp = i\n\n\t\telse:\n\t\t\trp += 1\n\t\t\ts = s[: i] + s[i: rp][::-1] + s[rp: ]\n\t\t\tl.append([i + 1, rp])\n\t\t\tlp = i\n\t\n\tfor i in range(k * 2 - 2, (n+k+k-2)//2):\n\t\twhile lp < n and s[lp] != '(' or lp < i:\n\t\t\tlp += 1\n\t\twhile rp < n and s[rp] != ')' or rp < i:\n\t\t\trp += 1\n\t\tif i<(n+k+k-2)//2 and s[i] == '(' or i>=(n+k+k-2)//2 and s[i] == ')':\n\t\t\tcontinue\n\t\telif i<(n+k+k)//2:\n\t\t\tlp += 1\n\t\t\ts = s[: i] + s[i: lp][::-1] + s[lp: ]\n\t\t\tl.append([i + 1, lp])\n\t\t\trp = i\n\n\t\telse:\n\t\t\trp += 1\n\t\t\ts = s[: i] + s[i: rp][::-1] + s[rp: ]\n\t\t\tl.append([i + 1, rp])\n\t\t\tlp = i\n\tprint(len(l))\n\tfor i in l:\n\t\tprint(*i)\n", "t = int(input())\n\ndef conv1(v) :\n    nonlocal z\n    index, q = 0, 0\n    for i in range(len(v)) :\n        if v[i] == '(' : q += 1\n        else : q -= 1\n        if q == 0 and v[i] == '(' :\n            if i != len(v) : v = v[:index] + list(reversed(v[index:i+1])) + v[i+1:]\n            else : v = v[:index] + list(reversed(v[index:i+1]))\n            z.append([index+1, i+1])\n            index = i+1\n        elif q == 0 : index = i+1\n    return v\n\ndef count(v) :\n    q, k = 0, 0\n    for i in v :\n        if i == '(' : q += 1\n        else : q -= 1\n        if q == 0 : k += 1\n    return k\n\ndef conv_min(v, k, n) :\n    nonlocal z\n    q = 0\n    for i in range(0, len(v)) :\n        if k == n : return v\n        if v[i] == '(' : q += 1\n        else : q -= 1\n        if q == 0 :\n            z.append([i+1, i+2])\n            n -= 1\n\ndef conv_max(v, k, n) :\n    nonlocal z\n    q = 0\n    for i in range(0, len(v)) :\n        if k == n : return v\n        if v[i] == '(' : q += 1\n        else :\n            if q == 2 :\n                v[i-1], v[i] = v[i], v[i-1]\n                q = 1\n                z.append([i, i+1])\n                n += 1\n            elif q > 2 :\n                v[i-q+1], v[i] = v[i], v[i-q+1]\n                z.append([i-q+1, i+1])\n                z.append([i-q+1, i-q+2])\n                q -= 1\n                n += 1\n            else : q = 0\n\nif 1 == 2 :\n    s = list('()(())')\n    z = []\n    print(''.join(conv_max(s, 3, 2)))\n    raise SystemExit\n\nfor _ in range(t) :\n    _, k = [int(x) for x in input().split()]\n    s = list(input())\n    z = []\n    \n    s = conv1(s)\n    ct = count(s)\n    if ct >= k : conv_min(s, k, ct)\n    else : conv_max(s, k, ct)\n    print(len(z))\n    print('\\n'.join(list([str(x[0])+' '+str(x[1]) for x in z])))\n", "t=int(input())\nfor i3 in range(t):\n    n,k=map(int,input().split())\n    inp=str(input())\n    s,ans,x=[],[],[]\n    for i in range(n): x.append(inp[i])\n    for i in range(k-1):\n        s.append(\"(\")\n        s.append(\")\")\n    for i in range(n//2-k+1): s.append(\"(\")\n    for i in range(n//2-k+1): s.append(\")\")\n    for i in range(n):\n        if x[i]==s[i]:\n            pass\n        else:\n            temp=[]\n            for i2 in range(i,n):\n                temp.append(x[i])\n                if x[i2]==s[i]:\n                    ans.append([i+1,i2+1])\n                    temp.reverse()\n                    for i3 in range(i,i2+1):\n                        x[i3]=temp[i3-i]\n                    break\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i][0],ans[i][1])"]