from itertools import product

class Nonogram:
    
    POS = {(2,2):   ((1,1,0,1,1),),
           (5,):    ((1,1,1,1,1),),
           (1,1,1): ((1,0,1,0,1),),
           (1,3):   ((1,0,1,1,1),),
           (3,1):   ((1,1,1,0,1),),
           (4,):    ((1,1,1,1,0), (0,1,1,1,1)),
           (1,2):   ((1,0,0,1,1), (1,0,1,1,0), (0,1,0,1,1)),
           (2,1):   ((1,1,0,0,1), (1,1,0,1,0), (0,1,1,0,1)),
           (3,):    ((1,1,1,0,0), (0,1,1,1,0), (0,0,1,1,1)),
           (2,):    ((1,1,0,0,0), (0,1,1,0,0), (0,0,1,1,0), (0,0,0,1,1)),
           (1,):    ((1,0,0,0,0), (0,1,0,0,0), (0,0,1,0,0), (0,0,0,1,0), (0,0,0,0,1)),
           (1,1):   ((1,0,1,0,0), (1,0,0,1,0), (1,0,0,0,1), (0,1,0,1,0), (0,1,0,0,1), (0,0,1,0,1))}

    def __init__(self, clues):
        self.clues = clues

    def solve(self):
        for p in product(*( self.POS[c] for c in self.clues[0] )):
            board = list(zip(*p))
            for z in range(5):
                if board[z] not in self.POS[self.clues[1][z]]: break
            else:
                return tuple(tuple(l) for l in board)
