["\nimport numpy as np\nN,K = list(map(int,input().split()))\nA=np.array(list(map(int,input().split())))\nmod = 998244353\n\nfact = [1]*(K+1)\nfor i in range(1,K+1):\n    fact[i]=i*fact[i-1]%mod\ninv_fact = [pow(f,mod-2,mod) for f in fact]\n\n# r = [sum(pow(aa,t,mod) for aa in A)%mod for t in range(K+1)]##\u9045\u3044\nr = [0]*(K+1)\nr[0] = N\ntemp = np.ones(N,dtype=\"int32\")\nfor i in range(1,K+1):\n    temp = temp*A%mod\n    r[i] = int(np.sum(temp))%mod\n\ninv2 = pow(2,mod-2,mod)\nfor x in range(1,K+1):\n    ans = sum((fact[x]*inv_fact[t]*inv_fact[x-t] *r[x-t]*r[t]) %mod \n               for t in range(x+1))%mod\n    ans-= r[x]*pow(2,x,mod) %mod\n    print(((ans*inv2)%mod))\n\n", "import sys\n\nreadline = sys.stdin.readline\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    import numpy as np\n\n    def combmoddp():\n        n = 400\n        comb = np.array([[0] * (n + 1) for _ in range(n + 1)])\n        comb[0][0] = 1\n\n        for i in range(1, n + 1):\n            comb[i][0] = 1\n            for j in range(1, i + 1):\n                comb[i][j] = (comb[i - 1][j - 1] + comb[i - 1][j]) % MOD\n\n        return comb\n\n    MOD = 998244353\n    N, K = list(map(int, readline().split()))\n    A = np.array(list(map(int, readline().split())), np.int64)\n\n    s = np.array([0] * (K + 1), np.int64)\n    t = np.array([1] * N, np.int64)\n    for i in range(K + 1):\n        s[i] = np.sum(t) % MOD\n        t = t * A\n        t = np.remainder(t, MOD)\n\n    comb = combmoddp()\n    d = np.array([1] * N, np.int64)\n\n    inv2 = pow(2, MOD - 2, MOD)\n    for x in range(1, K + 1):\n        ans = 0\n        for i in range(x + 1):\n            t = (s[i] * s[x - i]) % MOD\n            t = (t * comb[x][i]) % MOD\n            ans += t\n        ans %= MOD\n\n        d = 2 * A * d\n        d = np.remainder(d, MOD)\n        ans -= np.sum(d)\n        ans %= MOD\n        ans *= inv2\n        ans %= MOD\n        print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\nMOD = 998244353\ninv2 = pow(2, MOD - 2, MOD)\n\nfactorial = [1]*301\nfor n in range(1, 301):\n   factorial[n] = n * factorial[n - 1] % MOD\n   \nN, K = map(int, input().split())\nA = np.array(list(map(int, input().split())))\n\nS = [0]*(K + 1)\nS[0] = N\ntemp = np.array([1]*N)\nfor x in range(1, K + 1):\n   temp = temp * A % MOD\n   S[x] = int(np.sum(temp))\n   \nfor X in range(1, K + 1):\n   ans = 0\n   for x in range(X + 1):\n       comb = factorial[X] * pow(factorial[x], MOD - 2, MOD) * pow(factorial[X - x], MOD - 2, MOD) % MOD\n       ans += comb * S[x] * S[X - x] % MOD\n   ans -= pow(2, X, MOD) * S[X] % MOD\n   ans *= inv2\n   ans %= MOD\n   print(ans)", "\n\nimport numpy as np\nN,K = list(map(int,input().split()))\nA=np.array(list(map(int,input().split())))\n#A=list(map(int,input().split()))\nmod = 998244353\n\nfact = [1]*(K+1)\nfor i in range(1,K+1):\n    fact[i]=i*fact[i-1]%mod\ninv_fact = [pow(f,mod-2,mod) for f in fact]\n\n# r = [sum(pow(aa,t,mod) for aa in A)%mod for t in range(K+1)]\nr = [0]*(K+1)\nr[0] = N\ntemp = np.ones(N,dtype=\"int32\")\nfor i in range(1,K+1):\n    temp = temp*A%mod\n    r[i] = int(np.sum(temp))%mod\n\ninv2 = pow(2,mod-2,mod)\nfor x in range(1,K+1):\n    \n#     ans = sum((fact[x]*inv_fact[t]*inv_fact[x-t] *r[x-t]*r[t]) %mod \n#                for t in range(x+1))%mod\n    \n#    ans-= r[x]*pow(2,x,mod) %mod\n\n    ans = 0\n    for t in range(x+1):\n        comb = fact[x]*inv_fact[t]*inv_fact[x-t] %mod\n        #comb = fact[x]* pow(fact[t],mod-2,mod)*pow(fact[x-t],mod-2,mod) %mod\n        ans += comb * r[x-t] * r[t] %mod\n    ans-= r[x]*pow(2,x,mod) %mod\n    print(((ans*inv2)%mod))\n\n"]