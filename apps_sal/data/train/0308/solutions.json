["class Solution:\n     def isValid(self, code):\n         \"\"\"\n         :type code: str\n         :rtype: bool\n         \"\"\"\n         def parseTag(src, i):\n             j = i\n             tag, i = findtag(src, i)\n             if not tag:\n                 return False, j\n \n             res, i = parseContent(src, i)\n \n             e = i + len(tag) + 3\n             return (True, e) if src[i: e] == '</' + tag + '>' else (False, j)\n \n         def parseContent(src, i):\n             j, res = i, False\n             while i < len(src):\n                 res, i = parseText(src, i)\n                 if res:\n                     continue\n \n                 res, i = parseCDData(src, i)\n                 if  res:\n                     continue\n \n                 res, i = parseTag(src, i)\n                 if res:\n                     continue\n \n                 break\n \n             return True, i\n \n         def parseCDData(src, i):\n \n             s = src.find('<![CDATA[', i)\n             if s != i:\n                 return False, i\n \n             e = src.find(']]>', i)\n \n             return (True, e+3) if e != -1 else (False, i)\n \n         def parseText(src, i):\n             j = i\n             while i < len(src) and src[i] != '<':\n                 i += 1\n \n             return j != i, i\n \n         def findtag(src, i):\n             if src[i] != '<':\n                 return \"\", i\n \n             e = src.find('>', i+1)\n \n             if e == -1 or e - i - 1 > 9 or e - i - 1 < 1:\n                 return \"\", e\n \n             s = 1\n             while s < e - i and src[i+s].isupper():\n                 s += 1\n \n             return (src[i+1: e], e+1) if s >= e - i else (\"\", e)\n \n         # start to check\n         return parseTag(code, 0) == (True, len(code))", "class Solution:\n     def isValid(self, code):\n         \"\"\"\n         :type code: str\n         :rtype: bool\n         \"\"\"\n         S=code\n         CDATA_BEGIN='![CDATA['\n         CDATA_END=']]>'\n         \n         \n         def collect_tag(i):\n             \n             for j in range(i,len(S)):\n                 if S[j]=='>':\n                     break\n             else:\n                     return None\n             return S[i+1:j]\n         \n         def valid_tag(tag):\n             if 1<=len(tag)<=9 and all('A' <=c<= 'Z'  for c in tag):\n                 return True\n             else:\n                 return False\n         \n         if not S or S[0]!='<':\n             return False\n         #print('###########1111############')\n         tag=collect_tag(0)\n         #print(tag)\n         if not tag or not S.startswith('<{}>'.format(tag)) or not S.endswith('</{}>'.format(tag)) or not valid_tag(tag):\n             \n             return False\n         \n         S=S[len(tag)+2:-len(tag)-3]\n         \n         \n         \n         i=0\n         stack=[]\n         \n         while i<len(S):\n             \n             if S[i]=='<':\n                 tag=collect_tag(i)\n                 #print(tag)\n                 if not tag:\n                     \n                     return False\n                 \n                 if tag.startswith(CDATA_BEGIN):\n                     while i<len(S)  and S[i:i+3]!=CDATA_END:\n                         i+=1\n                     if S[i:i+3]!=CDATA_END:\n                         return False\n                     i+=2\n                 elif tag.startswith('/'):\n                     tag=tag[1:]\n                     if  not valid_tag(tag) or not stack or stack.pop()!=tag:\n                         return False\n                 else:\n                     if not valid_tag(tag):\n                         return False\n                     stack.append(tag)\n            \n             i+=1\n         return not stack"]