["for _ in range(int(input())):\n N,M = list(map(int,input().split()))\n count,e,perm = 0,0,1\n while(True):\n  lim,start = N//(M**e),N//(M**(e + 1)) + 1\n  num = lim - start + 1\n  divs = num//M\n  if((start + divs*M) <= lim):\n   r = (start+divs*M)%M\n   if(r == 0 or (r + (lim - (start + divs*M)) >= M)):\n    divs += 1\n  cmon = num - divs\n  if(e % 2 == 0):\n   count += cmon*((e+2)//2)\n  else:\n   count += cmon*(e//2 + 1)\n   perm = (perm * pow((e + 3)//2,cmon ,998244353))%998244353\n  e += 1\n  if(start == 1):\n   break\n print(count,perm)\n", "ts = int(input())\nfor _ in range(ts):\n n, m = map(int, input().split())\n t, tt, res, cnt = 1, [], 0, 1\n while t <= n:\n  t *= m\n  v = n // t\n  v -= v // m\n  if tt:tt[-1] -= v\n  tt.append(v)\n for i, v in enumerate(tt):\n  res += ((i + 2) // 2) * v\n  if i & 1 == 0:\n   cnt = cnt * pow((i + 2) // 2 + 1, v, 998244353) % 998244353\n print(n - res, cnt)", "import sys\nsys.setrecursionlimit(10**9)\nmod = 998244353\ndef power(a, b):\n res=1\n while(b>0):\n  if(b%2):\n   res*=a\n   res%=mod\n  b//=2\n  a*=a\n  a%=mod\n return res\ndef solve(a):\n if(a>n):\n  return (0,1)\n val = a\n c=1\n p=1\n size=0\n ways=0\n while(1):\n  if(val>(n//m)):\n   break\n  val *= m\n  p *= m\n  c += 1\n u = n//p\n ans = solve(u+1)\n rem = u//m\n rem -= (a-1)//m\n u -= rem\n size = ((c+1)//2)*(u-a+1)\n if(c%2):\n  ways=1\n else:\n  ways = power(c//2+1,u-a+1)\n size += ans[0]\n ways *= ans[1]\n ways %= mod\n #print(a,ways,size)\n return (size,ways)\nt = int(input())\nwhile(t):\n t -= 1\n n, m = list(map(int,input().split()))\n ans = solve(1)\n print(ans[0],ans[1])\n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\nimport sys;input = sys.stdin.readline\ninp,ip = lambda :int(input()),lambda :[int(w) for w in input().split()]\n\nM = 998244353\nfor _ in range(inp()):\n n,m = ip()\n size,ways = 0,1\n a,b = 1,m\n for k in range(1,70):\n  if a > n:\n   break\n  ct = (n//a - n//b) - (n//a//m - n//b//m)\n  size += ct*((1+k)//2)\n  if k%2 == 0:\n   ways = (ways*pow(k//2 +1,ct,M))%M\n  a,b = a*m,b*m\n print(size,ways)\n", "# cook your dish here\nfor _ in range(int(input())):\n n, k = map(int, input().split())\n t = 1\n tt = []\n while t <= n:\n  t *= k\n  v = n // t\n  v -= v // k\n  if tt:\n   tt[-1] -= v\n  tt.append(v)\n res, cnt = 0, 1\n for i, v in enumerate(tt):\n  res += ((i + 2) // 2) * v\n  if i & 1 == 0:\n   cnt = cnt * pow((i + 2) // 2 + 1, v, 998244353) % 998244353\n  #print(\"->\", res, cnt)    \n print(n - res, cnt)", "def groupsInInterval(L,R,M,N):\n if(R<=N):\n  return (R - (L-1)) -(R//M - (L-1)//M)\n else:\n  return 0\ndef power(a,b):\n # print(a,'**',b, a**b)\n MOD = 998244353\n res = 1\n while(b>0):\n  # print('a = ', a,\"b = \",b)\n\n  if(b%2):\n   res*=a\n   res%=MOD\n  b//=2\n  a*=a\n  a%=MOD\n # print('res',res)\n return res\n\nwhile(True):\n try:\n  test = int(input())\n except EOFError:\n  break\n for i in range (test):\n  MOD = 998244353\n  n,m = list(map(int,input().split()))\n  taken,ways = 0,1\n  for i in range(1,70):\n   # print(ways)\n   L = n//m**i + 1;\n   R = n//m**(i-1)\n   groups = groupsInInterval(L,R,m,n)\n   if(i%2==0):\n    taken+= (i//2 )*groups\n    # print(\"ways \",ways)\n    ways*= power((i//2 +1),groups)\n    # ways*= ((i//2 +1)**groups)\n   else:\n    taken+= ((i+1)//2)*groups\n    ways *= (1)\n  print(taken,ways%MOD)\n", "def help():\n n,m = map(int,input().split(\" \"))\n max_power = 0\n\n n1 = n\n while n1>=m:\n  n1 = n1//m\n  max_power += 1\n sizes = [0]*(max_power+1)\n\n sizes[max_power] = n//(m**max_power)\n yet = sizes[max_power]\n \n curr = max_power-1\n while curr>=0:\n  y1 = n//(m**curr)\n  sizes[curr] = y1 - yet\n  yet = y1\n  curr -= 1\n\n size = [0]*(max_power+1)\n for i in range(max_power,-1,-1):\n  curr = sizes[i]\n  size[i] = curr\n  for j in range(max_power+1):\n   sizes[j] -= curr\n size_ans = 0\n ways_ans = 1\n for i in range(max_power+1):\n  C = i+1\n  size_ans += size[i]*((C+1)//2)\n\n  if(C%2 == 0):\n   ways_ans *= pow((C//2) + 1,size[i],998244353)\n   ways_ans = ways_ans % 998244353\n print(size_ans,ways_ans)\n\n\nfor _ in range(int(input())):\n help()"]