["# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     # @return a ListNode\n     def removeNthFromEnd(self, head, n):\n         dummy=ListNode(0); dummy.next=head\n         p1=p2=dummy\n         for i in range(n): p1=p1.next\n         while p1.next:\n             p1=p1.next; p2=p2.next\n         p2.next=p2.next.next\n         return dummy.next\n             \n             \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         left = head\n         right = head\n         for _ in range(n):\n             right = right.next\n         if not right:\n             return head.next\n         \n         while right.next:\n             left = left.next\n             right = right.next\n         \n         left.next = left.next.next\n         return head\n             ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         dummy = ListNode(0)\n         dummy.next = head\n         fast = slow = dummy\n         for _ in range(n):\n             fast = fast.next\n         while fast and fast.next:\n             fast = fast.next\n             slow = slow.next\n         slow.next = slow.next.next\n         return dummy.next", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         dummy = ListNode(0)\n         dummy.next = head\n         slow = fast = dummy\n \n         for _ in range(n):\n             fast = fast.next\n \n         while fast.next != None:\n             fast = fast.next\n             slow = slow.next\n \n         slow.next = slow.next.next\n         temp = dummy.next\n         while temp != None:\n             print(temp.val)\n             temp = temp.next\n         return dummy.next", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         \n         ''' first trial. O(L) time, O(L) space complexity. \n         nodes_list = []\n         cursor = head\n         while cursor != None:\n             nodes_list.append(cursor)\n             cursor = cursor.next\n         \n         if n == len(nodes_list):\n             head = head.next\n         else :\n             nodes_list[-n-1].next = nodes_list[-n].next\n         \n         return head\n         '''\n         \n         # second trial after getting a hint from its solution.\n         dummy = ListNode(0)\n         dummy.next = head\n         target_prev = dummy\n         tail = head\n         dist = 0\n         while tail != None:\n             if dist < n:\n                 tail = tail.next\n                 dist += 1\n             else :\n                 target_prev = target_prev.next\n                 dist -= 1\n         \n         target_prev.next = target_prev.next.next\n         return dummy.next", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         positions = {}\n         cur = head\n         i = 0\n         while cur:\n             i += 1\n             positions[i] = cur\n             cur = cur.next\n         \n         if i == 1:\n             return None\n         elif n == i:\n             return head.next\n         else:\n             parent = positions[i - n]\n             toRemove = parent.next\n             parent.next = toRemove.next\n         \n         return head\n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         temp = head\n         counter = 0\n         while(temp!=None):\n             counter += 1\n             temp = temp.next\n         timeToVisit = counter - n\n         if timeToVisit == 0:\n             return head.next\n         if timeToVisit == 1:\n             head.next = head.next.next\n             return head\n         nodeToDel = head\n         while(timeToVisit>0):\n             nodeToDel = nodeToDel.next\n             timeToVisit -= 1\n             if timeToVisit == 1:\n                 nodeToSave = nodeToDel\n                 nodeToNext = nodeToDel.next.next\n                 nodeToSave.next = nodeToNext\n         return head\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     \n     # one pass O(N) deletion approach using 2 ptr\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n \n         # will point at node to be deleted\n         slow = head\n \n         # assists in finding the nth node from end\n         fast = head\n \n         # node before node to be deleted\n         prev = None\n \n         for i in range(n):\n \n             fast = fast.next\n \n         # want to delete head\n         if fast == None:\n \n             slow = head\n             head = head.next\n             slow.next = None\n \n         # want to delete a node besides head\n         else:\n \n             while fast:\n \n                 prev = slow\n                 slow = slow.next\n                 fast = fast.next\n \n             prev.next = slow.next\n             slow.next = None\n \n         return head\n", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         fast = slow = head\n         for _ in range(n):\n             fast = fast.next\n         if not fast:\n             return head.next\n         while fast.next:\n             fast = fast.next\n             slow = slow.next\n         slow.next = slow.next.next\n         return head\n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         current = head\n         while current is not None:\n             i = n\n             runner = current.next\n             while i > 1:\n                 if runner is not None:\n                     runner = runner.next\n                     i -= 1\n             if runner is None:\n                 return head.next\n             elif runner.next is None:\n                 current.next = current.next.next\n                 return head\n             \n             current = current.next\n         return head", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n #[]\n #[1]\n class Solution:\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         if not head.next:\n             return []\n \n         dummy=ListNode(None)\n         pre=ListNode(None)\n         dummy.next=head\n         pre.next=head\n         count=1\n         while head.next:\n             if count<n:\n                 count+=1\n                 head=head.next\n             else:\n                 pre=pre.next\n                 count-=1 \n         if pre.val==None:\n             return dummy.next.next\n         else:\n             pre.next=pre.next.next\n             return dummy.next\n                 \n             \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         i=0\n         node=head\n         while(node):\n             i=i+1\n             if(node.next):\n                 node=node.next\n             else:\n                 break\n         num=i-n\n         if(num==0):\n             return head.next\n         \n         cur=head\n         for k in range(num-1):\n             cur=cur.next\n         cur.next=cur.next.next\n         return head", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def removeNthFromEnd(self, head, n):\n         \"\"\"\n         :type head: ListNode\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         if head is None:\n             return None\n         fast = head\n         slow = head\n         for i in range(0, n):\n             slow = slow.next\n         if slow is None:\n             return head.next\n         while slow.next is not None:\n             slow = slow.next\n             fast = fast.next\n         fast.next = fast.next.next\n         \n         return head\n         "]