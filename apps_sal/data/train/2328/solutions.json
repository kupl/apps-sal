["def fx(s,n,xsum):\n\tsub=[[None for x in range(n+2)]for y in range(xsum+2)]\n\tfor i in range(n+1):\n\t\tsub[0][i]=True\n\tfor i in range(1,xsum+1):\n\t\tsub[i][0]=False\n\tfor i in range(1,xsum+1):\n\t\tfor j in range(1,n+1):\n\t\t\tsub[i][j]=sub[i][j-1]\n\t\t\tif i>=s[j-1]:\n\t\t\t\tsub[i][j]=sub[i][j] or sub[i-s[j-1]][j-1]\n\tif sub[xsum][n]:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n\t\t\nn,t=list(map(int,input().split()))\na=list(map(int,input().split()))\nfor _ in range(t):\n\tq=list(map(int,input().split()))\n\tif q[0]==1:\n\t\ta[q[1]-1]=q[2]\n\t\tcontinue\n\tif q[0]==2:\n\t\tw=a[q[1]-1:q[2]]\n\t\ta[q[1]-1:q[2]]=w[::-1]\n\t\tcontinue\n\tif q[0]==3:\n\t\te=a[q[1]-1:q[2]]\n\t\tif q[3]<min(e) or q[3]>sum(e):\n\t\t\tprint('No')\n\t\t\tcontinue\n\t\tif q[3] in e:\n\t\t\tprint('Yes')\n\t\t\tcontinue\n\t\tfx(e,len(e),q[3])", "def fx(s,n,xsum):\n\tsub=[[None for x in range(n+2)]for y in range(xsum+2)]\n\tfor i in range(n+1):\n\t\tsub[0][i]=True\n\tfor i in range(1,xsum+1):\n\t\tsub[i][0]=False\n\tfor i in range(1,xsum+1):\n\t\tfor j in range(1,n+1):\n\t\t\tsub[i][j]=sub[i][j-1]\n\t\t\tif i>=s[j-1]:\n\t\t\t\tsub[i][j]=sub[i][j] or sub[i-s[j-1]][j-1]\n\tif sub[xsum][n]:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\n\t\t\nn,t=list(map(int,input().split()))\na=list(map(int,input().split()))\nfor _ in range(t):\n\tq=list(map(int,input().split()))\n\tif q[0]==1:\n\t\ta[q[1]-1]=q[2]\n\t\tcontinue\n\tif q[0]==2:\n\t\tw=a[q[1]-1:q[2]]\n\t\ta[q[1]-1:q[2]]=w[::-1]\n\t\tcontinue\n\tif q[0]==3:\n\t\te=a[q[1]-1:q[2]]\n\t\tfx(e,len(e),q[3])", "def subsetsum(array,g):\n\n    if g == 0 or g < 1:\n        return False\n    elif len(array) == 0:\n        return False\n    else:\n        if array[0] == g :\n            return True\n        else:\n            return subsetsum(array[1:],(g - array[0])) or subsetsum(array[1:],g)\n\n\nn,q  = [int(i) for i in input().split()]\nw = [int(i) for i in input().split()]\nfor qq in range(q) :\n    x = [i for i in input().split()]\n    a = int(x[0])\n    if a == 1 :\n        w[int(x[1])-1] = int(x[2])\n    elif a == 2 :\n        l = int(x[1])-1\n        r = int(x[2])-1\n        w = w[:l] + w[r:l-1:-1] + w[r+1:]\n    else :\n        l = int(x[1])-1\n        r = int(x[2])\n        if subsetsum(w[l:r],int(x[3])) :\n            print(\"Yes\")\n        else :\n            print(\"No\")", "def subsetsum(nums, tgt):\n    sums = {}\n    for n in nums[::2]:\n        for k,v in list(sums.items()) + [(0,[])]:\n            newsum = k + n\n            if newsum not in sums:\n                sums[newsum] = v + [n]\n                if newsum == tgt:\n                    return sums[tgt]\n \n    difs = {tgt:[]}\n    for n in nums[1::2]:\n        for k,v in list(difs.items()):\n            newdif = k - n\n            if newdif not in difs:\n                difs[newdif] = v + [n]\n                if newdif in sums:\n                    return sums[newdif] + difs[newdif]\n    \n    return []\nn,q=(input().split())\nn,q=int(n),int(q)\na=input().split()\na=[int(x) for x in a]\nwhile q>0:\n    s=input().split()\n    s=[int(x) for x in s]\n    l=s[1]\n    r=s[2]\n    if(s[0]==1):\n        a[l-1]=r\n    elif(s[0]==2):\n        i=l-1\n        j=r-1\n        while(i<=j):\n            swap=a[i]\n            a[i]=a[j]\n            a[j]=swap\n            i+=1\n            j-=1\n    else:\n        w=s[3]\n        b=a[l-1:r]+[0]\n        if len(subsetsum(b,w))>0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    q=q-1", "def isSubSetSum(a,n,w):\n    subset=[[0 for x in range(n+1)] for y in  range(w+1)];\n    for i in range(n+1):\n        subset[0][i]=1;\n    for i in range(1,w+1):\n        subset[i][0]=0;\n    for i in range(1,w+1):\n        for j in range(1,n+1):\n            subset[i][j]=subset[i][j-1];\n            if (i>=a[j-1]):\n                if(subset[i][j]==1 or subset[i-a[j-1]][j-1]==1):\n                    subset[i][j]=1\n    return subset[w][n]\nn,q=(input().split())\nn,q=int(n),int(q)\na=input().split()\na=[int(x) for x in a]\nwhile q>0:\n    s=input().split()\n    s=[int(x) for x in s]\n    l=s[1]\n    r=s[2]\n    if(s[0]==1):\n        a[l-1]=r\n    elif(s[0]==2):\n        i=l-1\n        j=r-1\n        while(i<=j):\n            swap=a[i]\n            a[i]=a[j]\n            a[j]=swap\n            i+=1\n            j-=1\n    else:\n        w=s[3]\n        b=a[l-1:r]\n        if isSubSetSum(b,len(b),w)==1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    q=q-1", "import sys\ndef isSubsetSum( se, n,  su):\n    \n   \n    subset = [[0]*(n+1) for i in range(su+1)]\n    \n    \n    for i in range(0,n+1):\n      subset[0][i] =1;\n\n   \n    for i in range(1,su+1):\n      subset[i][0] = 0;\n\n     \n    for i in range(1,su+1):\n     \n       for j in range(1,n+1):\n       \n         subset[i][j] = subset[i][j-1]\n         if (i >= se[j-1]):\n           subset[i][j] = subset[i][j] or subset[i - se[j-1]][j-1]\n    return subset[su][n]  \n       \n\n\n\nn,q=[int(i) for i in input().split()]\nl=[int(i) for i in input().split()]\nwhile q>0:\n    q-=1\n    s=[]\n    s=[int(i) for i in input().split()]\n    if s[0]==3:\n        l1=s[1]\n        r=s[2]\n        w=s[3]\n        if isSubsetSum(l[l1-1:r],r-l1+1,w)==True:\n           sys.stdout.write( \"Yes\\n\")\n        else: sys.stdout.write( \"No\\n\")\n    elif s[0]==2:\n        l1=s[1]\n        r=s[2]\n        i=l1-1\n        j=r-1\n        while i<j:\n            l[i],l[j]=l[j],l[i]\n            j-=1\n            i+=1\n    else:\n        i=s[1]\n        x=s[2]\n        l[i-1]=x\n   \n    \n        ", "import sys\ndef subsetsum(array,num):\n    if num == 0 or num < 1:\n        return False\n    elif len(array) == 0:\n        return False\n    else:\n        if array[0] == num:\n            return True\n        else:\n            return subsetsum(array[1:],(num - array[0])) or subsetsum(array[1:],num)\n\nn,q=[int(i) for i in input().split()]\nl=[int(i) for i in input().split()]\nwhile q>0:\n    q-=1\n    s=[]\n    s=[int(i) for i in input().split()]\n    if s[0]==3:\n        l1=s[1]\n        r=s[2]\n        w=s[3]\n        if subsetsum(l[l1-1:r],w)==True:\n           sys.stdout.write( \"Yes\\n\")\n        else: sys.stdout.write( \"No\\n\")\n    elif s[0]==2:\n        l1=s[1]\n        r=s[2]\n        i=l1-1\n        j=r-1\n        while i<j:\n            l[i],l[j]=l[j],l[i]\n            j-=1\n            i+=1\n    else:\n        i=s[1]\n        x=s[2]\n        l[i-1]=x\n   \n    \n        ", "import sys\ndef subsetsum(array,num):\n    if num == 0 or num < 1:\n        return False\n    elif len(array) == 0:\n        return False\n    else:\n        if array[0] == num:\n            return True\n        else:\n            return subsetsum(array[1:],(num - array[0])) or subsetsum(array[1:],num)\n\nn,q=[int(i) for i in sys.stdin.readline().split()]\nl=[int(i) for i in sys.stdin.readline().split()]\nwhile q>0:\n    q-=1\n    s=[]\n    s=[int(i) for i in sys.stdin.readline().split()]\n    if s[0]==3:\n        l1=s[1]\n        r=s[2]\n        w=s[3]\n        if subsetsum(l[l1-1:r],w)==True:\n           sys.stdout.write( \"Yes\\n\")\n        else: sys.stdout.write( \"No\\n\")\n    elif s[0]==2:\n        l1=s[1]\n        r=s[2]\n        i=l1-1\n        j=r-1\n        while i<j:\n            l[i],l[j]=l[j],l[i]\n            j-=1\n            i+=1\n    else:\n        i=s[1]\n        x=s[2]\n        \n        l[i-1]=x\n   \n    \n        ", "import sys\ndef subsetsum(array,num):\n\n    if num == 0 or num < 1:\n        return False\n    elif len(array) == 0:\n        return False\n    else:\n        if array[0] == num:\n            return True\n        else:\n            return subsetsum(array[1:],(num - array[0])) or subsetsum(array[1:],num)\n\nn,q=[int(i) for i in sys.stdin.readline().split()]\nl=[int(i) for i in sys.stdin.readline().split()]\nwhile q>0:\n    q-=1\n    s=[]\n    s=[int(i) for i in sys.stdin.readline().split()]\n    if s[0]==3:\n        l1=s[1]\n        r=s[2]\n        w=s[3]\n        if subsetsum(l[l1-1:r],w)==True:\n           sys.stdout.write( \"Yes\\n\")\n        else: sys.stdout.write( \"No\\n\")\n    elif s[0]==2:\n        l1=s[1]\n        r=s[2]\n        l1-=1\n        r-=1\n        k=l[l1:r+1]\n        k.reverse()\n        \n        l=l[:l1]+k+l[r+1:]\n    else:\n        i=s[1]\n        x=s[2]\n        \n        l[i-1]=x\n   \n    \n        ", "def subsetsum(array,num):\n\n    if num == 0 or num < 1:\n        return False\n    elif len(array) == 0:\n        return False\n    else:\n        if array[0] == num:\n            return True\n        else:\n            return subsetsum(array[1:],(num - array[0])) or subsetsum(array[1:],num)\n\nn,q=[int(i) for i in input().split()]\nl=[int(i) for i in input().split()]\nwhile q>0:\n    q-=1\n    s=[]\n    s=[int(i) for i in input().split()]\n    if s[0]==3:\n        l1=int(s[1])\n        r=int(s[2])\n        w=int(s[3])\n        if subsetsum(l[l1-1:r],w)==True:\n            print(\"Yes\")\n        else: print(\"No\")\n    elif s[0]==2:\n        l1=int(s[1])\n        r=int(s[2])\n        l1-=1\n        r-=1\n        k=l[l1:r+1]\n        k.reverse()\n        #print k\n        l=l[:l1]+k+l[r+1:]\n    else:\n        i=int(s[1])\n        x=int(s[2])\n        # print i\n        l[i-1]=x\n    #print l\n    \n        ", "def solve(w, sum):\n    n=len(w)\n    dp=[]\n    for i in range(n+1):\n        dp.append([0]*(sum+1))\n    for i in range(1, sum+1):\n        dp[0][i]=0\n    for i in range(n+1):\n        dp[i][0]=1\n    for i in range(1, n+1):\n        for j in range(1, sum+1):\n            dp[i][j] = dp[i-1][j]\n            if dp[i][j]==0 and j>=w[i-1]:\n                dp[i][j] = dp[i-1][j-w[i-1]]\n    return dp[n][sum]            \nn, q = list(map(int, input().split()))\nw = list(map(int, input().split()))\nfor i in range(q):\n    s = list(map(int, input().split()))\n    if s[0]==1:\n        w[s[1]-1]=s[2]\n    elif s[0]==2:\n        w=w[:s[1]-1]+w[s[1]-1:s[2]][::-1]+w[s[2]:]\n    else:\n        if(solve(w[s[1]-1:s[2]], s[3])==1):\n            print(\"Yes\")\n        else:\n            print(\"No\")", "def subsetsum(array,num):\n\n    if num == 0 or num < 1:\n        return False\n    elif len(array) == 0:\n        return False\n    else:\n        if array[0] == num:\n            return True\n        else:\n            return subsetsum(array[1:],(num - array[0])) or subsetsum(array[1:],num)\n        \nn, q = list(map(int, input().split()))\nw = list(map(int, input().split()))\nfor i in range(q):\n    s = list(map(int, input().split()))\n    if s[0]==1:\n        w[s[1]-1]=s[2]\n    elif s[0]==2:\n        w=w[:s[1]-1]+w[s[1]-1:s[2]][::-1]+w[s[2]:]\n    else:\n        if(subsetsum(w[s[1]-1:s[2]], s[3])):\n            print(\"Yes\")\n        else:\n            print(\"No\")", "def check(w, x, n):\n    if w == 0: return True\n    if n == 0 and w != 0: return False\n    if x[n-1] > w: return check (w, x, n-1)\n    return check(w, x, n-1) or check(w-x[n-1], x, n-1)\n\nn, qN = list(map(int, input().rstrip().split()))\ndata = [int(i) for i in input().rstrip().split()]\nfor Q in range(qN):\n    q = [int(i) for i in input().rstrip().split()]\n    if q[0] == 1: data[q[1]-1] = q[2]\n    elif q[0] == 2:\n        i, j = q[1]-1, q[2]-1\n        new = data[:i] + data[i:j+1][::-1] + data[j+1:]\n        data = new\n    else:\n        print('Yes' if check(q[3], data[q[1]-1:q[2]], q[2]-q[1]+1) else 'No')", "import sys\nfrom itertools import combinations\n\ndef solve( A, x ):\n    # preliminary\n    if x < 0 or x > sum( A ): # T = sum(A)\n      return False\n \n    # algorithm\n    sub_sum = [False] * ( x + 1 )\n    sub_sum[0] = True\n    p = 0\n    while not sub_sum[x] and p < len( A ):\n      a = A[p]\n      q = x\n      while not sub_sum[x] and q >= a:\n        if not sub_sum[q] and sub_sum[q - a]:\n          sub_sum[q] = True\n        q -= 1\n      p += 1\n    return sub_sum[x]\n    \ndef main():\n    n,w=list(map(int, sys.stdin.readline().split()))\n    arr=list(map(int, sys.stdin.readline().split()))\n    for i in range(w):\n        val=list(map(int, sys.stdin.readline().split()))\n        if val[0]==1:\n            arr[val[1]-1]=val[2]\n        elif val[0]==2:\n            a=val[1]-1\n            b=val[2]\n            arr[a:b]=reversed(arr[a:b])\n        else:\n            #print solve(arr[val[1]-1:val[2]], val[3])\n            \n            if solve(arr[val[1]-1:val[2]], val[3]):\n                print(\"Yes\")\n            else:\n                print(\"No\")\n            \n        #print arr\n    \nmain()\n", "# cook your code here\na=[]\nb=[]\nc=[]\ntemp=[]\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\ndef find(temp,f):\n  q=-1\n  while q<len(temp)-1 and temp[q+1]<=f:\n     q=q+1\n     if temp[q]==f: \n         return 1\n     \n  if q==-1:\n      return 0\n  else:\n      f=f-temp[q]\n      flag=find(temp[0:q],f)\n      return flag\n  \n    \nfor i in range(0,a[1]):\n    c=list(map(int,input().split()))\n    flag=0\n    if c[0]==3:\n       temp=b[c[1]-1:c[2]]\n       temp.sort()\n       #print temp\n       j=-1\n       f=int(c[3])\n       \n       while j<len(temp)-1 and temp[j+1]<=f:\n         j=j+1  \n         if temp[j]==f:\n           flag=1\n           break   \n         \n       if flag==1:\n         print('Yes')\n         continue\n       \n      \n       while j>=1:\n          \n          f=c[3]-temp[j] \n         \n          flag=find(temp[0:j],f)\n          \n          if flag==1:\n             break\n          else:\n              j=j-1\n           \n       if flag==1:\n         print('Yes')\n       else:\n           print('No')\n        \n    if c[0]==1:\n        b[c[1]-1]=c[2]\n    if c[0]==2:\n        b[c[1]-1:c[2]]=reversed(b[c[1]-1:c[2]])\n    \n\n         ", "# cook your code here\na=[]\nb=[]\nc=[]\ntemp=[]\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\ndef find(temp,f):\n  q=-1\n  while q<len(temp)-1 and temp[q+1]<=f:\n     q=q+1\n  if q==-1:\n      return 0\n  if temp[q]==f:\n      return 1\n  else:\n      f=f-temp[q]\n      flag=find(temp[0:q],f)\n      return flag\n  \n    \nfor i in range(0,a[1]):\n    c=list(map(int,input().split()))\n    if c[0]==3:\n       temp=b[c[1]-1:c[2]]\n       temp.sort()\n       #print temp\n       j=-1\n       f=int(c[3])\n       \n       while j<len(temp)-1 and temp[j+1]<=f:\n         j=j+1\n         \n       if temp[j]==f:\n           print('Yes')\n           continue\n       \n      \n       while j>=1:\n          \n          f=c[3]-temp[j] \n         \n          flag=find(temp[0:j],f)\n          \n          if flag==1:\n             break\n          else:\n              j=j-1\n           \n       if flag==1:\n         print('Yes')\n       else:\n           print('No')\n        \n    if c[0]==1:\n        b[c[1]-1]=c[2]\n    if c[0]==2:\n        b[c[1]-1:c[2]]=reversed(b[c[1]-1:c[2]])\n    \n\n         "]