["class Solution:\n     def predictPartyVictory(self, senate):\n         \"\"\"\n         :type senate: str\n         :rtype: str\n         \"\"\"\n         num = 0  # num of Reeding R\n         while ('R' in senate and 'D' in senate):\n             res = []\n             for i in senate:\n                 if i=='R':\n                     if num>=0:\n                         res.append(i)\n                     num+=1\n                 else:\n                     if num<=0:\n                         res.append(i)\n                     num-=1\n             senate = res\n         return 'Radiant' if 'R' in senate else 'Dire'\n", "class Solution:\n     def predictPartyVictory(self, senate):\n         \"\"\"\n         :type senate: str\n         :rtype: str\n         \"\"\"\n         from collections import deque\n         n = len(senate)\n         queueR = deque()\n         queueD = deque()\n         for i in range(len(senate)):\n             if senate[i] == \"R\":\n                 queueR.append(i)\n             else:\n                 queueD.append(i)\n         while queueR and queueD:\n             p1 = queueR.popleft()\n             p2 = queueD.popleft()\n             if p1 < p2:\n                 queueR.append(p1+n)\n             else:\n                 queueD.append(p2+n)\n         if queueR:\n             return \"Radiant\"\n         return \"Dire\"", "class Solution:\n     def predictPartyVictory(self, senate):\n         \"\"\"\n         :type senate: str\n         :rtype: str\n         \"\"\"\n         r = collections.deque()\n         d = collections.deque()\n         for i,c in enumerate(senate):\n             if c == \"R\":\n                 r.append(i)\n             else:\n                 d.append(i)\n         \n         return self.eliminateSenators(r,d)\n     \n     def eliminateSenators(self,r,d):\n         if len(r)==0: return \"Dire\"\n         if len(d)==0:return \"Radiant\"\n         \n         r2 = collections.deque()\n         d2 = collections.deque()\n         \n         while len(r)> 0 or len(d)>0:\n             if len(r)==0:\n                 if len(r2)==0:\n                     return \"Dire\"\n                 else:\n                     r2.popleft()\n                     d2.append(d.popleft())\n             elif len(d)==0:\n                 if len(d2)==0:\n                     return \"Radiant\"\n                 else:\n                     d2.popleft()\n                     r2.append(r.popleft())       \n             else:\n                 r_curr = r.popleft()\n                 d_curr = d.popleft()\n                 if r_curr < d_curr:\n                     r2.append(r_curr)\n                 else:\n                     d2.append(d_curr)\n         \n         return self.eliminateSenators(r2,d2)      ", "class Solution:\n     def predictPartyVictory(self, senate):\n         \"\"\"\n         :type senate: str\n         :rtype: str\n         \"\"\"\n         queue = collections.deque()\n         people, bans = [0, 0], [0, 0]\n         \n         for person in senate:\n             x = person == 'R'\n             people[x] += 1\n             queue.append(x)\n         \n         while all(people):\n             x = queue.popleft()\n             if bans[x]:\n                 bans[x] -= 1\n                 people[x] -= 1\n             else:\n                 bans[x^1] += 1\n                 queue.append(x)\n         \n         return 'Radiant' if people[1] else 'Dire'\n", "class Solution:\n     def predictPartyVictory(self, senate):\n         \"\"\"\n         :type senate: str\n         :rtype: str\n         \"\"\"\n         queue = collections.deque()\n         people, bans = [0, 0], [0, 0]\n \n         for person in senate:\n             x = person == 'R'\n             people[x] += 1\n             queue.append(x)\n \n         while all(people):\n             x = queue.popleft()\n             if bans[x]:\n                 bans[x] -= 1\n                 people[x] -= 1\n             else:\n                 bans[x^1] += 1\n                 queue.append(x)\n \n         return \"Radiant\" if people[1] else \"Dire\"        ", "class Solution:\n     def predictPartyVictory(self, senate):\n         \"\"\"\n         :type senate: str\n         :rtype: str\n         \"\"\"\n         s = [1 if x == 'R' else 0 for x in senate]\n         \n         Rban = 0\n         Dban = 0\n         i = 0\n         ban = False\n         while True:\n             if s[i] == -1: pass\n             else:\n                 if s[i] == 1:\n                     if Dban > 0:\n                         Dban -= 1\n                         s[i] = -1\n                         ban = True\n                     else: Rban += 1\n                 else:\n                     if Rban > 0:\n                         Rban -= 1\n                         s[i] = -1\n                         ban = True\n                     else: Dban += 1\n             \n             i += 1\n             if i == len(s):\n                 i = 0\n                 if not ban: break\n                 else: ban = False\n         \n         if Rban > 0: return \"Radiant\"\n         else: return \"Dire\""]