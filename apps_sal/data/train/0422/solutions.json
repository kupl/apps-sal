["class Solution(object):\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         size = len(s)\n         if size <= 1 or s == s[::-1]:\n             return s\n         start, maxlen = 0, 1\n         for idx in range(1, size):\n             add2 = s[idx - maxlen - 1: idx + 1]\n             if idx - maxlen - 1 >= 0 and add2 == add2[::-1]:\n                 start = idx - maxlen - 1\n                 maxlen += 2\n                 continue\n             add1 = s[idx - maxlen: idx + 1]\n             if add1 == add1[::-1]:\n                 start = idx - maxlen\n                 maxlen += 1\n         return s[start: (start + maxlen)]", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if not s: return ''\n         maxI, center, right = 0, 0, 0\n         stL = self.addChar(s)\n         pal = [0] * len(stL) \n         for i in range(1, len(stL)-1):\n             currI = 2 * center - i\n             if right > i: pal[i] = min(right-i, pal[currI])\n             else: pal[i] = 0\n             while stL[i+1+pal[i]] == stL[i-1-pal[i]]:\n                 pal[i] += 1\n             if i+pal[i] > right: center, right = i, i+pal[i]       \n         for i in range(1, len(stL)-1):\n             if pal[i] > pal[maxI]: maxI = i\n         start = (maxI-1-pal[maxI]) // 2\n         return s[start:start+pal[maxI]]\n \n     def addChar(self, st):\n         stLs = ['<']\n         for c in st: \n             stLs.extend([None, c])\n         stLs.extend([None, '>'])\n         return stLs\n", "class Solution:\n     def longestPalindrome(self, s):\n         if s==s[::-1]:\n             return s\n         maxx=1 # itself\n         start=0 # start point\n         for i in range(1,len(s)):\n             if i-maxx>=0 and s[i-maxx:i+1]==s[i-maxx:i+1][::-1]:\n                 start=i-maxx\n                 maxx+=1\n                 \n             elif i-maxx>=1 and s[i-maxx-1:i+1]==s[i-maxx-1:i+1][::-1]:\n                 start=i-maxx-1\n                 maxx+=2\n         return s[start:start+maxx]\n", "class Solution:\n     def longestPalindrome(self, s):\n         if s == s[::-1]:\n             return s\n         max_len = 1\n         end = 0\n         for i in range(1, len(s)):\n             if i-max_len >= 0 and s[i-max_len:i+1] == s[i-max_len:i+1][::-1]:\n                 max_len = max_len + 1\n                 end = i\n             elif i-max_len >= 1 and s[i-max_len-1:i+1] == s[i-max_len-1:i+1][::-1]:\n                 max_len = max_len + 2\n                 end = i\n         return s[end-max_len+1:end+1]\n     \n", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if len(s)==0:\n         \treturn 0\n         maxLen=1\n         start=0\n         for i in range(len(s)):\n         \tif i-maxLen >=1 and s[i-maxLen-1:i+1]==s[i-maxLen-1:i+1][::-1]:\n         \t\tstart=i-maxLen-1\n         \t\tmaxLen+=2\n         \t\tcontinue\n \n         \tif i-maxLen >=0 and s[i-maxLen:i+1]==s[i-maxLen:i+1][::-1]:\n         \t\tstart=i-maxLen\n         \t\tmaxLen+=1\n         return s[start:start+maxLen]", "class Solution:\n     # @return a string\n     def longestPalindrome(self, s):\n         if len(s)==0:\n         \treturn 0\n         maxLen=1\n         start=0\n         for i in range(len(s)):\n         \tif i-maxLen >=1 and s[i-maxLen-1:i+1]==s[i-maxLen-1:i+1][::-1]:\n         \t\tstart=i-maxLen-1\n         \t\tmaxLen+=2\n         \t\tcontinue\n \n         \tif i-maxLen >=0 and s[i-maxLen:i+1]==s[i-maxLen:i+1][::-1]:\n         \t\tstart=i-maxLen\n         \t\tmaxLen+=1\n         return s[start:start+maxLen]\n", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if len(s) == 0:\n         \treturn 0\n         maxLen = 1\n         start = 0\n         for i in range(len(s)):\n         \tif i - maxLen >= 1 and s[i - maxLen - 1 : i + 1] == s[i - maxLen - 1 : i + 1][:: -1]:\n         \t\tstart = i - maxLen - 1\n         \t\tmaxLen += 2\n         \t\tcontinue\n \n         \tif i - maxLen >= 0 and s[i - maxLen : i + 1] == s[i - maxLen : i + 1][:: -1]:\n         \t\tstart = i - maxLen\n         \t\tmaxLen += 1\n         return s[start : start + maxLen]\n         \n", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if len(s) == 0:\n             return 0\n         start = 0\n         maxlength = 1\n         for i in range(len(s)):\n             if i - maxlength  - 1 >= 0 and s[i-maxlength-1:i+1] == s[i-maxlength-1:i+1][::-1]:\n                 start = i-maxlength-1\n                 maxlength+=2\n             if i-maxlength>=0 and s[i-maxlength:i+1]==s[i-maxlength:i+1][::-1]:\n                 start = i-maxlength\n                 maxlength+=1\n         return s[start:start+maxlength]\n \n", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if not s: return ''\n         maxI, center, right = 0, 0, 0\n         stL = self.addChar(s)\n         pal = [0] * len(stL) \n         for i in range(1, len(stL)-1):\n             currI = 2 * center - i\n             if right > i: pal[i] = min(right-i, pal[currI])\n             else: pal[i] = 0\n             while stL[i+1+pal[i]] == stL[i-1-pal[i]]:\n                 pal[i] += 1\n             if i+pal[i] > right: center, right = i, i+pal[i]       \n         for i in range(1, len(stL)-1):\n             if pal[i] > pal[maxI]: maxI = i\n         start = (maxI-1-pal[maxI]) // 2\n         return s[start:start+pal[maxI]]\n \n     def addChar(self, st):\n         stLs = ['<']\n         for c in st: \n             stLs.extend([None, c])\n         stLs.extend([None, '>'])\n         return stLs\n", "class Solution:\n     def longestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if not s: return ''\n         maxI, center, right = 0, 0, 0\n         stL = self.addChar(s)\n         pal = [0] * len(stL) \n         for i in range(1, len(stL)-1):\n             currI = 2 * center - i\n             if right > i: pal[i] = min(right-i, pal[currI])\n             else: pal[i] = 0\n             while stL[i+1+pal[i]] == stL[i-1-pal[i]]:\n                 pal[i] += 1\n             if i+pal[i] > right: center, right = i, i+pal[i]       \n         for i in range(1, len(stL)-1):\n             if pal[i] > pal[maxI]: maxI = i\n         start = (maxI-1-pal[maxI]) // 2\n         return s[start:start+pal[maxI]]\n \n     def addChar(self, st):\n         stLs = ['<']\n         for c in st: \n             stLs.extend(['#', c])\n         stLs.extend(['#', '>'])\n         return stLs\n"]