["def solution(string,markers):\n    parts = string.split('\\n')\n    for s in markers:\n        parts = [v.split(s)[0].rstrip() for v in parts]\n    return '\\n'.join(parts)", "def strip_line(line, markers):\n    for m in markers:\n        if m in line:\n            line = line[:line.index(m)]\n    return line.rstrip()\n\ndef solution(string,markers):\n    stripped = [strip_line(l, markers) for l in string.splitlines()]\n    return '\\n'.join(stripped)", "def solution(string,markers):\n    lst = string.split('\\n')\n    ans = []\n    for line in lst:\n        for m in markers:\n            if m in line:\n                line = line[: line.find(m)].strip()\n        ans.append(line) \n    return '\\n'.join(ans)", "import re\n\ndef solution(string,markers):\n    for marker in markers:\n        string = re.sub(r' *?\\{}.*$'.format(marker),'', string, flags = re.M)\n    return string", "from re import sub\ndef solution(string,markers):\n    return sub(\"(.*?) ?([\\%s].*)\" % \"\\\\\".join(markers),\"\\g<1>\",string) if markers else string", "def solution(string,markers):\n    lst = string.split('\\n')\n    for i, s in enumerate(lst):\n        for m in markers:\n            f = s.find(m)\n            s = s[0:f] if f >= 0 else s[:]\n        lst[i] = s.strip()\n\n    return '\\n'.join(lst)\n", "def solution(string, markers):\n    lines = string.splitlines()\n    for mark in markers:\n        lines = [line.split(mark)[0].strip() for line in lines]\n    return '\\n'.join(lines)", "from re import escape, sub\n\n\ndef solution(s, markers):\n    return s if not markers else \\\n        sub(r'( *[{}].*)'.format(escape(''.join(markers))), '', s)\n", "def solution(string,markers):\n    # split string into lines to process them one after another\n    content = string.split(\"\\n\")\n    \n    #process every line by its own and append the clean line to clean_content\n    clean_content = []\n    for full_line in content:\n        \n        #appending each char until marker\n        clean_line = \"\"\n        for char in full_line:\n            \n            #check for marker, if no marker add char to clean_line \n            #if char in marker break loop\n            \n            if not char in markers:\n                clean_line += char\n            else:\n                break\n        \n        #strip whitespaces\n        clean_line = clean_line.strip()\n\n        #add clean line to content\n        clean_content.append(clean_line)\n        \n    return \"\\n\".join(clean_content)"]