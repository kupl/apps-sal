["class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         \n         if ord(letters[-1]) <= ord(target):\n             return letters[0]\n         \n         li = 0\n         ri = len(letters) - 1\n         \n         while li <= ri:\n             if li == ri:\n                 return letters[li]\n             \n             mi = li + (ri - li)//2\n             \n             if ord(letters[mi]) > ord(target):\n                 ri = mi\n             else:\n                 li = mi + 1", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         st = 0\n         ed = len(letters)-1\n         \n         if target < letters[0] or target > letters[-1]:\n             return letters[0]\n         \n         while st <= ed:\n             mid = st + (ed-st)//2\n             \n             if letters[mid-1] < target and letters[mid] > target:\n                 return letters[mid]\n             \n             if letters[mid] == target:\n                 ans = letters[0]\n                 i = mid\n                 while i < len(letters):\n                     if letters[i] != target:\n                         return letters[i]\n                     i += 1\n                 return ans\n             \n             if letters[mid] < target:\n                 st = mid + 1\n             else:\n                 ed = mid - 1\n         \n         \n         \n             \n", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         \n         for idx in range(len(letters)):\n             c = letters[idx]\n             if c > target:\n                 return c\n             if idx == len(letters) - 1:\n                 return letters[0]\n", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         dic ={}\n         list = []\n         list2 = []\n         number = 0\n         # set a dictionary, 1~26 related a~z\n         for letter in string.ascii_lowercase:\n                 dic[letter] = number + 1\n                 number = number + 1\n         # calculate the difference between the two letter, if the target over the letter, put it into list, otherwise put it into list2\n         for element in letters:\n             if dic[element] > dic[target]:\n                 list.append(dic[element] - dic[target])\n             else:\n                 list2.append(dic[element])\n         # find the difference and calculate the nearest letter\n         if list != []:\n             minnum = min(list)\n             return string.ascii_lowercase[dic[target]+minnum-1]\n         else:\n             minnum =min(list2)\n             return string.ascii_lowercase[minnum-1]", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         res = \"\"\n         if target == \"z\": target =\"0\"\n         large = \"z\"\n         \n         found = False\n         for i in range(len(letters)):\n             if letters[i]>target and not found:\n                 found = True\n                 res=letters[i]\n             elif found and not res<letters[i]:\n                 res=letters[i]\n             elif letters[i]<large:\n                 large=letters[i]\n             \n         return large if len(res)==0 else res", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         curr_small = None\n         for letter in letters:\n             if letter > target:\n                 if curr_small == None or curr_small > letter:\n                     curr_small = letter\n         if curr_small:\n             return curr_small\n         else:\n             return letters[0]\n", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         tmp = list(map(ord, letters))\n         d = [x - y for x, y in zip(tmp, [ord(target)] * len(letters))]\n        \n         for i in range(len(d)):\n             if d[i] <= 0:\n                 d[i] = 26 + d[i]\n         \n         return letters[d.index(min(d))]\n         \n", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         lo, hi = 0, len(letters)\n         \n         while lo < hi:\n             mid = lo + (hi-lo)//2\n             \n             if letters[mid] <= target:\n                 lo = mid + 1\n             else:\n                 hi = mid\n         \n         return letters[lo % len(letters)]", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         for char in letters:\n             if char>target: return char\n         return letters[0]", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         if letters is None or len(letters) == 0:\n             return None\n         start, end = 0, len(letters) - 1\n         while(start + 1 < end):\n             mid = start + (end - start) // 2\n             if(letters[mid] <= target):\n                 start = mid\n             else:\n                 end = mid\n         if(letters[start] > target):\n             return letters[start]\n         elif(letters[end] > target):\n             return letters[end]\n         else:\n             return letters[0]", "from string import ascii_lowercase as al\n class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         index = ord(target) - 96\n         s = set(letters)\n         i = index\n         for i in range(index+1, index + 1 + 26 + 1):\n             if chr((i-1) % 26 + 96 + 1) in s:\n                 return chr((i-1) % 26 + 96 + 1)\n         \n         ", "from string import ascii_lowercase as al\n class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         index = ord(target) - 96\n         s = set(letters)\n         i = index\n         for i in range(index+1, index + 1 + 26 + 1):\n             if chr((i-1) % 26 + 96 + 1) in s:\n                 return chr((i-1) % 26 + 96 + 1)\n         \n         ", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         minL = 'z'\n         result = 'z'\n         wrap = True\n         for l in letters:\n             minL = min(minL, l)\n             if l > target:\n                 wrap = False\n                 result = min(result, l)\n         if not wrap:\n             return result\n         else:\n             return minL\n", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         a=[]\n         s=0\n         for i in range(0, len(letters)):\n             s=a.append(ord(letters[i])-ord(target))\n         #return a\n         min=100\n         for i in range(0, len(a)-1):\n             if((ord(letters[i])<=ord(target)) and (ord(letters[i+1])>ord(target))):\n                 return letters[i+1]\n         if(ord(letters[0])-ord(target)==0):\n             return letters[1]\n         else:\n             return letters[0]\n         #return letters[a.index(min)]\n", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         if letters[-1] < target:\n             return letters[0]    \n         \n         for letter in letters:\n             if letter > target:\n                 return letter\n         return letters[0] ", "class Solution:\n     def nextGreatestLetter(self, letters, target):\n         \"\"\"\n         :type letters: List[str]\n         :type target: str\n         :rtype: str\n         \"\"\"\n         for c in letters:\n             if c > target:\n                 return c\n         return letters[0]"]