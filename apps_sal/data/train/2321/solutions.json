["from cmath import rect\nimport sys\nimport math\nfrom functools import reduce\n\nclass SegmentTree():\n    def __init__(self, L, function = lambda x,y: x+y):\n        self.function = function\n        N = self.size = len(L)\n        M = 1 << N.bit_length()\n        self.margin = 2*M - N\n        self.L = [None for i in range(self.margin)] + L\n        for i in range(M-1, 0, -1):\n            x, y = self.L[i<<1], self.L[i<<1|1]\n            self.L[i] = None if x is None or y is None else function(x, y)\n    def modify(self, pos, value):\n        p = pos + self.margin\n        self.L[p] = value \n        while p > 1:\n            x, y = self.L[p], self.L[p^1]\n            if p&1: x, y = y, x\n            self.L[p>>1] = None if x is None or y is None else self.function(x, y)\n            p>>=1\n    def query(self, left, right):\n        l, r = left + self.margin, right + self.margin\n        stack = []\n        void = True\n        while l < r:\n            if l&1:\n                if void:\n                    result = self.L[l]\n                    void = False\n                else:\n                    result = self.function(result, self.L[l])\n                l+=1\n            if r&1:\n                r-=1\n                stack.append(self.L[r])\n            l>>=1\n            r>>=1\n        init = stack.pop() if void else result\n        return reduce(self.function, reversed(stack), init)\n\ndef degrect(r, phi):\n    return rect(r, math.radians(phi))\n\ndef vsum(u, v): #u = (x + y*1j, phi)\n    return (u[0] + v[0]*degrect(1, u[1]), (u[1] + v[1])%360)\n\ndef solve(f):\n    n, m = [int(x) for x in f.readline().split()]\n    segments = [[1,0] for i in range(n)]\n    arm = SegmentTree([(1,0) for i in range(n)], vsum)\n    for line in f:\n        q, i, a = [int(x) for x in line.split()]\n        if q == 1:\n            segments[i-1][0] += a\n        else:\n            segments[i-1][1] -= a\n        arm.modify(i-1, (degrect(segments[i-1][0], segments[i-1][1]), segments[i-1][1]))\n        query = arm.query(0,n)[0]\n        print(query.real, query.imag)\n\nsolve(sys.stdin)\n", "from cmath import rect\nimport sys\nimport math\nfrom functools import reduce\n\nclass SegmentTree():\n    def __init__(self, L, function = lambda x,y: x+y):\n        self.function = function\n        N = self.size = len(L)\n        M = 1 << N.bit_length()\n        self.margin = 2*M - N\n        self.L = [None for i in range(self.margin)] + L\n        for i in range(M-1, 0, -1):\n            x, y = self.L[i<<1], self.L[i<<1|1]\n            self.L[i] = None if x is None or y is None else function(x, y)\n    def modify(self, pos, value):\n        p = pos + self.margin\n        self.L[p] = value \n        while p > 1:\n            x, y = self.L[p], self.L[p^1]\n            if p&1: x, y = y, x\n            self.L[p>>1] = None if x is None or y is None else self.function(x, y)\n            p>>=1\n    def query(self, left, right):\n        l, r = left + self.margin, right + self.margin\n        stack = []\n        void = True\n        while l < r:\n            if l&1:\n                if void:\n                    result = self.L[l]\n                    void = False\n                else:\n                    result = self.function(result, self.L[l])\n                l+=1\n            if r&1:\n                r-=1\n                stack.append(self.L[r])\n            l>>=1\n            r>>=1\n        init = stack.pop() if void else result\n        return reduce(self.function, reversed(stack), init)\n\ndef degrect(r, phi):\n    return rect(r, math.radians(phi))\n\ndef vsum(u, v): #u = (x + y*1j, phi)\n    return (u[0] + v[0]*degrect(1, u[1]), (u[1] + v[1])%360)\n\ndef solve(f):\n    n, m = [int(x) for x in f.readline().split()]\n    segments = [[1,0] for i in range(n)]\n    arm = SegmentTree([(1,0) for i in range(n)], vsum)\n    for line in f:\n        q, i, a = [int(x) for x in line.split()]\n        if q == 1:\n            segments[i-1][0] += a\n        else:\n            segments[i-1][1] -= a\n        arm.modify(i-1, (degrect(segments[i-1][0], segments[i-1][1]), segments[i-1][1]))\n        query = arm.query(0,n)[0]\n        sys.stdout.write(str(query.real) + ' ' + str(query.imag) + '\\n')\n\nsolve(sys.stdin)"]