["class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n \n         if not ratings:\n             return 0\n \n         total, pre, decrease = 1, 1, 0\n         for i in range(1, len(ratings)):\n             if ratings[i] >= ratings[i-1]:\n                 if decrease > 0:\n                     total += (1+decrease)*decrease // 2\n                     if pre <= decrease:\n                         total += decrease+1-pre\n                     decrease, pre = 0, 1\n                 if ratings[i] == ratings[i-1]:\n                     total += 1\n                     pre = 1\n                 else:\n                     pre += 1\n                     total += pre\n             else:\n                 decrease += 1\n \n         if decrease > 0:\n             total += (1 + decrease) * decrease // 2\n             if pre <= decrease:\n                 total += decrease + 1 - pre\n         return total\n", "class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n         current_min = 1\n         current_max = 1\n         desc_len = 1\n         cnt = 1\n         for i in range(1, len(ratings)):\n             if ratings[i] < ratings[i - 1]:\n                 if current_min == 1:\n                     if desc_len >= current_max:\n                         cnt += desc_len + 1\n                     else:\n                         cnt += desc_len\n                 else:\n                     current_max = current_min\n                     current_min = 1\n                     cnt += 1\n                 desc_len += 1\n             elif ratings[i] > ratings[i - 1]:\n                 current_min += 1\n                 current_max = current_min\n                 cnt += current_min\n                 desc_len = 1\n             else:\n                 cnt += 1\n                 current_min = 1\n                 current_max = 1\n                 desc_len = 1\n         return cnt", "class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n         current_min = 1\n         current_max = 1\n         desc_len = 1\n         cnt = 1\n         for i in range(1, len(ratings)):\n             if ratings[i] < ratings[i - 1]:\n                 if current_min == 1:\n                     cnt += desc_len\n                     if desc_len < current_max:\n                         cnt -= 1\n                 else:\n                     current_max = current_min\n                     current_min = 1\n                 desc_len += 1\n             elif ratings[i] > ratings[i - 1]:\n                 current_min += 1\n                 current_max = current_min\n                 cnt += current_min - 1\n                 desc_len = 1\n             else:\n                 current_min = 1\n                 current_max = 1\n                 desc_len = 1\n             cnt += 1\n         return cnt", "class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(ratings)\n         result = [1] * n\n         \n         for i in range(n-1):\n             if ratings[i+1]> ratings[i]:\n                 result[i+1] = result[i] + 1\n         \n         for i in range(n-1,0,-1):\n             if ratings[i-1] > ratings[i]:\n                 result[i-1] = max(result[i]+1, result[i-1])\n                 \n         return sum(result)", "class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n         candy = [1 for i in range(len(ratings))]\n         \n         for i in range(1, len(ratings)):\n             if ratings[i] > ratings[i - 1]:\n                 candy[i] = candy[i - 1] + 1\n         \n         for i in range(len(ratings) -1)[::-1]:\n             if ratings[i] > ratings[i + 1]:\n                 candy[i] = max(candy[i], candy[i + 1] + 1)\n                 \n         return sum(candy)", "class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n         if not ratings: return 0\n         if len(ratings) == 1: return 1\n         l2r = [1 for _ in ratings]\n         for i in range(1, len(ratings)):\n             if ratings[i] > ratings[i - 1]:\n                 l2r[i] = l2r[i - 1] + 1\n         res = l2r[-1]\n         for i in range(len(ratings) - 2, -1, -1):\n             if ratings[i] > ratings[i + 1]:\n                 l2r[i] = max(l2r[i], l2r[i + 1] + 1)\n             res += l2r[i]\n         return res", "class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n         if not ratings: return 0\n         if len(ratings) == 1: return 1\n         l2r = [1 for _ in ratings]\n         r2l = [1 for _ in ratings]\n         for i in range(1, len(ratings)):\n             if ratings[i] > ratings[i - 1]:\n                 l2r[i] = l2r[i - 1] + 1\n         for i in range(len(ratings) - 2, -1, -1):\n             if ratings[i] > ratings[i + 1]:\n                 r2l[i] = r2l[i + 1] + 1\n         res = 0\n         for i in range(len(ratings)):\n             res += max(l2r[i], r2l[i])\n         return res", "class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n         candies = [0] * len(ratings)\n         \n         from_left = [1] * len(ratings)\n         cur_less_than = 1\n         for idx in range(1, len(ratings)):\n             if ratings[idx-1] < ratings[idx]:\n                 cur_less_than += 1\n             else:\n                 cur_less_than = 1\n             from_left[idx] = cur_less_than\n         \n         from_right = [1] * len(ratings)\n         cur_less_than = 1\n         idx = len(ratings)-2\n         while idx >= 0:\n             if ratings[idx+1] < ratings[idx]:\n                 cur_less_than += 1\n             else:\n                 cur_less_than = 1\n             from_right[idx] = cur_less_than\n             idx -= 1\n             \n         for idx in range(0, len(ratings)):\n             candies[idx] = max(from_left[idx], from_right[idx])\n             \n         return sum(candies)", "class Solution:\n     def candy(self, ratings):\n         \"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"\n         candies = [0] * len(ratings)\n         # min candies at idx i = max of\n         # 1) (number of decreasing ratings to the left) + 1\n         # 2) (number of decreasing ratings to the right) + 1\n         # By definition number after end of decreasing sequence will be greater than the end\n         # => both sides of end of decreasing sequence will be greater than the rating at the end\n         # => the min number of candies at the end of the decreasing sequence is 1\n         # => min number of candies at the (end-n) of the decreasing sequence is 1+n        \n         from_left = [1] * len(ratings)\n         cur_less_than = 1\n         for idx in range(1, len(ratings)):\n             if ratings[idx-1] < ratings[idx]:\n                 cur_less_than += 1\n             else:\n                 cur_less_than = 1\n             from_left[idx] = cur_less_than\n         \n         from_right = [1] * len(ratings)\n         cur_less_than = 1\n         idx = len(ratings)-2\n         while idx >= 0:\n             if ratings[idx+1] < ratings[idx]:\n                 cur_less_than += 1\n             else:\n                 cur_less_than = 1\n             from_right[idx] = cur_less_than\n             idx -= 1\n             \n         for idx in range(0, len(ratings)):\n             candies[idx] = max(from_left[idx], from_right[idx])\n             \n         return sum(candies)"]