["class Solution(object):\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n         # remember how many empty slots we have\n         # non-null nodes occupy one slot but create two new slots\n         # null nodes occupy one slot\n         \n         p = preorder.split(',')\n         \n         #initially we have one empty slot to put the root in it\n         slot = 1\n         for node in p:\n             \n             # no empty slot to put the current node\n             if slot == 0:\n                 return False\n                 \n             # a null node?\n             if node == '#':\n                 # ocuppy slot\n                 slot -= 1\n             else:\n                 # create new slot\n                 slot += 1\n         \n         #we don't allow empty slots at the end\n         return slot==0", "class Solution:\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n         if not preorder:\n             return False\n         \n         nodes = preorder.split(',')\n         stack = [0] if nodes[0] != '#' else []\n         dt = {0:2}\n         i = 1\n         \n         while stack and i < len(nodes):\n             dt[stack[-1]] -= 1\n             if dt[stack[-1]] == 0:\n                 stack.pop()\n             if nodes[i] != '#':\n                 stack.append(i)\n                 dt[i] = 2\n             i = i + 1\n         \n         return not stack and i == len(nodes)\n         \n         \n", "class Solution:\n     def isValidSerialization(self, preorder):\n         new_preorder = preorder \n         for i in range (len(new_preorder)-1,0,-1):\n             if (new_preorder[i] != '#' and new_preorder[i] != ',') and (new_preorder[i-1] != '#' and new_preorder[i-1] != ','):\n                 preorder = preorder[:i] + preorder[i+1:]\n                 #print(i)\n         print(preorder)\n         #print(int(((len(preorder)/2)+1)/2))\n         num = 0\n         sharp = 0\n         for i in range (0 , len(preorder)):\n             print((num,sharp))\n             if sharp > num:\n                 return False\n             elif preorder[i] == '#':\n                 #print(num,sharp)\n                 sharp += 1\n                 if sharp == num+1 and num == int(((len(preorder)/2)+1)/2):\n                     return True\n             elif preorder[i] != ',':\n                 num += 1\n                 \n         print((num,sharp))\n         if num != sharp - 1:\n             return False\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n", "class Solution:\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n         arr = preorder.split(',')\n         k = len(arr)\n         for _ in range(k):\n             print(arr)\n             if arr==['#']:\n                 return True\n             newArr = []\n             i = 0\n             while i < len(arr):\n                 if i < len(arr)-2 and arr[i].isdigit() and arr[i+1:i+3] == ['#','#']:\n                     newArr += ['#']\n                     i += 3\n                 else:\n                     newArr += [arr[i]]\n                     i += 1\n             arr = newArr\n         return False\n", "class Solution:\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n         preorder = preorder.split(',')\n \n         if preorder[0] == '#':\n             return len(preorder) == 1\n \n         s = []\n \n         curr = preorder[0]\n         on_left = True\n \n         for i in range(1, len(preorder)):\n             if not curr:\n                 return False\n \n             e = preorder[i]\n \n             if e != '#':\n                 if on_left:\n                     s.append(curr)\n \n                 curr = e\n                 on_left = True\n             else:\n                 if not on_left:\n                     curr = s.pop() if len(s) > 0 else None\n \n                 on_left = False\n \n         return curr is None", "class Solution:\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n         # '' valid or not?\n         if len(preorder) < 1:\n             return False\n \n         stack = []\n         for s in preorder.split(','):\n             stack.append(False)\n             if s == '#':\n                 # remove pairing left branch\n                 while len(stack) > 2 and stack[-2]:\n                     stack.pop()\n                     stack.pop()\n                     stack.pop()\n                 else:\n                     stack.append(True)\n \n         return stack == [False, True]        ", "class Solution:\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n         if not preorder:\n             return True\n         arr = preorder.split(',')\n         s = []\n         for a in arr:\n             s.append(a)\n             while len(s)>=3 and s[-1]=='#' and s[-2]=='#' and s[-3]!='#':\n                 s.pop()\n                 s.pop()\n                 s.pop()\n                 s.append('#')\n         if s==['#']:\n             return True\n         return False\n", "class Solution:\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n         preorder = preorder.split(',')\n \n         if preorder[0] == '#':\n             return len(preorder) == 1\n \n         s = []\n \n         curr = preorder[0]\n         on_left = True\n         finish = False\n \n         for i in range(1, len(preorder)):\n             if not curr:\n                 return False\n \n             e = preorder[i]\n \n             if e != '#':\n                 s.append((curr, on_left))\n                 curr = e\n                 on_left = True\n                 finish = False\n             else:\n                 if not on_left:\n                     curr = None\n                     finish = True\n \n                     while len(s) and not on_left:\n                         curr, on_left = s.pop()\n \n                     if curr and not on_left:\n                         curr = None\n \n                 on_left = False\n \n         return finish", "class Solution:\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"\n         stack,preorder = [],preorder.split(',')\n         top = -1\n         for s in preorder:\n             stack.append(s)\n             top += 1\n             while(self.endsWithTwoHashes(stack,top)):\n                 h,top = stack.pop(),top-1\n                 h,top = stack.pop(),top-1\n                 if top < 0: return False\n                 stack[-1] = '#'\n                 #h = stack.pop()\n                 #stack.append('#')\n         return len(stack) == 1 and stack[0]=='#'\n \n     def endsWithTwoHashes(self,stack,top):\n         if top<1:\n             return False\n         if stack[top]=='#' and stack[top-1]=='#':\n             return True\n         return False", "class Solution:\n     def isValidSerialization(self, preorder):\n         \"\"\"\n         :type preorder: str\n         :rtype: bool\n         \"\"\"   \n         preorder, first = preorder.split(\",\"), preorder.split(\",\")\n         def backward(index):\n             if index >= len(preorder) or index < 0: return \n             if index+1<len(preorder) and preorder[index+1] == preorder[index] == \"#\" and index-1 >= 0 and preorder[index-1] != \"#\":\n                 preorder.pop(index)\n                 preorder.pop(index)\n                 preorder[index-1] = \"#\"\n                 backward(index-2)\n             else: backward(index+1)\n         backward(0)\n         return True if (preorder != first and preorder == [\"#\"]) or (preorder == first == [\"#\"]) else False"]