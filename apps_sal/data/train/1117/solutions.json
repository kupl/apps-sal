["import numpy as np\n\ndef sort_it(array):\n    new_list = []\n    for i in range(len(array)):\n        start = 0\n        value = array[i][0]\n        last = len(new_list)\n        while start != last:\n            mid = (start + last) // 2\n            if new_list[mid][0] > value:\n                last = mid\n            else:\n                start = mid+1\n        new_list.insert(start,array[i])\n    return new_list\n\ntests = int(input())\nfor _ in range(tests):\n    n, m, q = [int(j) for j in input().split()]\n    challenges = [[0] * 3 for _ in range(m)]\n    combos = [[0] * 2 for _ in range(q)]\n    for i in range(m):\n        challenges[i] = [int(j) for j in input().split()]\n    for i in range(q):\n        combos[i] = [int(j) for j in input().split()]\n    \n    sorted_chalenges = np.zeros((2 * m, 3),dtype=np.intc)\n    for i in range(m):\n        sorted_chalenges[2*i] = [challenges[i][0]-1,challenges[i][2],i]\n        sorted_chalenges[2*i+1] = [challenges[i][1],-challenges[i][2],i]\n    sorted_chalenges = np.array(sort_it(sorted_chalenges))\n    types_of_players = np.zeros((m + 1, 2 * m + 1),dtype=np.intc)\n    player_type = np.zeros(n,dtype=np.intc)\n    last_player = 0\n    for i in range(2 * m):\n        start, value, chal = sorted_chalenges[i]\n        types_of_players[chal+1:,i+1:] += value\n        player_type[last_player:start] = i\n        last_player = start\n    player_type[last_player:] = 2 * m\n    \n    combo_types = np.zeros((q, 2 * m + 1),dtype = np.intc)\n    for i in range(q):\n        first, last = combos[i]\n        r, p = [types_of_players[first - 1], types_of_players[last]]\n        combo_types[i] = np.maximum(p-r,0)\n    output = np.sum(combo_types,axis=0)[player_type]\n    for i in range(n):\n        print(output[i], end = \" \")\n    print(\"\")\n", "# cook your dish here\nimport numpy as np\n\ndef sort_it(array):\n    new_list = []\n    for i in range(len(array)):\n        start = 0\n        value = array[i][0]\n        last = len(new_list)\n        while start != last:\n            mid = (start + last) // 2\n            if new_list[mid][0] > value:\n                last = mid\n            else:\n                start = mid+1\n        new_list.insert(start,array[i])\n    return new_list\n\ntests = int(input())\nfor _ in range(tests):\n    n, m, q = [int(j) for j in input().split()]\n    challenges = [[0] * 3 for _ in range(m)]\n    combos = [[0] * 2 for _ in range(q)]\n    for i in range(m):\n        challenges[i] = [int(j) for j in input().split()]\n    for i in range(q):\n        combos[i] = [int(j) for j in input().split()]\n    \n    sorted_chalenges = np.zeros((2 * m, 3),dtype=np.intc)\n    for i in range(m):\n        sorted_chalenges[2*i] = [challenges[i][0]-1,challenges[i][2],i]\n        sorted_chalenges[2*i+1] = [challenges[i][1],-challenges[i][2],i]\n    sorted_chalenges = np.array(sort_it(sorted_chalenges))\n    types_of_players = np.zeros((m + 1, 2 * m + 1),dtype=np.intc)\n    player_type = np.zeros(n,dtype=np.intc)\n    last_player = 0\n    for i in range(2 * m):\n        start, value, chal = sorted_chalenges[i]\n        types_of_players[chal+1:,i+1:] += value\n        player_type[last_player:start] = i\n        last_player = start\n    player_type[last_player:] = 2 * m\n    \n    combo_types = np.zeros((q, 2 * m + 1),dtype = np.intc)\n    for i in range(q):\n        first, last = combos[i]\n        r, p = [types_of_players[first - 1], types_of_players[last]]\n        combo_types[i] = np.maximum(p-r,0)\n    output = np.sum(combo_types,axis=0)[player_type]\n    for i in range(n):\n        print(output[i], end = \" \")\n    print(\"\")"]