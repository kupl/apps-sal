["# cook your dish here\nfrom collections import Counter\ndef solve(arr, n, k):\n ans = 0\n dict1 = {}\n mod = 1000000007\n \n for i in range(n):\n  if arr[i] in dict1:\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [0]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for _ in range(v+1)]for _ in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(v+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%mod\n return ans\n \n\nn, k = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\nprint(solve(arr, n, k))", "# cook your dish here\nfrom collections import Counter\ndef solve(arr, n, k):\n ans = 0\n dict1 = {}\n mod = 1000000007\n \n for i in range(n):\n  if arr[i] in dict1:\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [0]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for _ in range(v+1)]for _ in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(v+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%mod\n return ans\n \n\n(n, k) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\nprint(solve(arr, n, k))", "# cook your dish here\nfrom collections import Counter\ndef solve(arr, n, k):\n ans = 0\n dict1 = {}\n mod = 1000000007\n \n for i in range(n):\n  if arr[i] in dict1:\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [0]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for _ in range(v+1)]for _ in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(v+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%mod\n return ans\n \n\n(n, k) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\nprint(solve(arr, n, k))", "# cook your dish here\nfrom collections import Counter\ndef solve(arr, n, k):\n ans = 0\n dict1 = {}\n mod = 1000000007\n \n for i in range(n):\n  if arr[i] in dict1:\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [-2]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for _ in range(v+1)]for _ in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(v+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%mod\n return ans\n \n\n(n, k) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\nprint(solve(arr, n, k))", "# cook your dish here\nfrom collections import Counter\ndef solve(arr, n, k):\n ans = 0\n dict1 = {}\n mod = 1000000007\n \n for i in range(n):\n  if arr[i] in dict1:\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [-1]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for _ in range(v+1)]for _ in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(v+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%mod\n return ans\n \n\n(n, k) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\nprint(solve(arr, n, k))", "# cook your dish here\nfrom collections import Counter\ndef solve(arr, n, k):\n ans = 0\n dict1 = {}\n mod = 1000000007\n \n for i in range(n):\n  if arr[i] in dict1:\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [-1]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for _ in range(v+1)]for _ in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(v+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%mod\n return ans\n\n(n, k) = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\nprint(solve(arr, n, k))", "from collections import defaultdict\nn,k = list(map(int,input().split()))\nl = list(map(int,input().split()))\nctr = len(set(l))\ndic = defaultdict(lambda :0)\nfor i in l:\n dic[i]+=1\ndic1 = defaultdict(lambda :0)\nindex=1\nfor i in list(dic.keys()):\n dic1[index] = dic[i]\n index+=1\ndp = [[0 for i in range(k+1)] for j in range(ctr+1)]\n\n\ndp[0][0]=1\nfor row in range(1,ctr+1):\n for col in range(k+1):\n  if col==0:\n   dp[row][col]=1\n  else:\n   dp[row][col] = dp[row-1][col] + dp[row-1][col-1]*dic1[row]\n\n#print(dic1)\n#print(*dp)\nprint(sum(dp[ctr])%1000000007)\n\n", "from collections import defaultdict\nn,k = list(map(int,input().split()))\nl = list(map(int,input().split()))\nctr = len(set(l))\nl.sort()\ndic = defaultdict(lambda :0)\nfor i in l:\n dic[i]+=1\ndic1 = defaultdict(lambda :0)\nindex=1\nfor i in list(dic.keys()):\n dic1[index] = dic[i]\n index+=1\ndp = [[0 for i in range(k+1)] for j in range(ctr+1)]\n\n\ndp[0][0]=1\nfor row in range(1,ctr+1):\n for col in range(k+1):\n  if col==0:\n   dp[row][col]=1\n  else:\n   dp[row][col] = dp[row-1][col] + dp[row-1][col-1]*dic1[row]\n\n#print(dic1)\n#print(*dp)\nprint(sum(dp[ctr])%1000000007)\n\n", "# cook your dish here\nfrom sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left \nfrom bisect import bisect_right\n \ndef L():\n return list(map(int, stdin.readline().split()))\n \ndef In():\n return list(map(int, stdin.readline().split()))\n \ndef I():\n return int(stdin.readline())\n \nP = 1000000007\ndef main():\n n, k = In()\n arr = L()\n ans = 0\n dict1 = {}\n \n \n for i in range(n):\n  if arr[i] in list(dict1.keys()):\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [-1]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for i in range(v+1)]for i in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(v+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%P\n print(ans)\n  \n \n \ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\nfrom sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left \nfrom bisect import bisect_right\n \ndef L():\n return list(map(int, stdin.readline().split()))\n \ndef In():\n return list(map(int, stdin.readline().split()))\n \ndef I():\n return int(stdin.readline())\n \nP = 1000000007\ndef main():\n n, k = In()\n arr = L()\n ans = 0\n dict1 = {}\n \n \n for i in range(n):\n  if arr[i] in list(dict1.keys()):\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [-1]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for i in range(v+1)]for i in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(k+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%P\n print(ans)\n  \n \n \ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\nfrom sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left \nfrom bisect import bisect_right\n \ndef L():\n return list(map(int, stdin.readline().split()))\n \ndef In():\n return list(map(int, stdin.readline().split()))\n \ndef I():\n return int(stdin.readline())\n \nP = 1000000007\ndef main():\n n, k = In()\n arr = L()\n ans = 0\n dict1 = {}\n \n \n for i in range(n):\n  if arr[i] in list(dict1.keys()):\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [-1]+list(dict1.keys())\n v = min(k, len(l1))\n dp = [[0 for i in range(v+1)]for i in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(k+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%P\n print(ans)\n  \n \n \ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\nfrom sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left \nfrom bisect import bisect_right\n \ndef L():\n return list(map(int, stdin.readline().split()))\n \ndef In():\n return list(map(int, stdin.readline().split()))\n \ndef I():\n return int(stdin.readline())\n \nP = 1000000007\ndef main():\n n, k = In()\n arr = L()\n ans = 0\n dict1 = {}\n \n \n for i in range(n):\n  if arr[i] in list(dict1.keys()):\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [-1]+list(dict1.keys())\n v = min(k, len(list(set(arr))))\n dp = [[0 for i in range(v+1)]for i in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(k+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%P\n print(ans)\n  \n \n \ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\nfrom sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left \nfrom bisect import bisect_right\n \ndef L():\n return list(map(int, stdin.readline().split()))\n \ndef In():\n return list(map(int, stdin.readline().split()))\n \ndef I():\n return int(stdin.readline())\n \nP = 1000000007\ndef main():\n n, k = In()\n arr = L()\n ans = 0\n dict1 = {}\n v = min(k+1, len(list(set(arr))))\n \n for i in range(n):\n  if arr[i] in list(dict1.keys()):\n   dict1[arr[i]] += 1 \n  else:\n   dict1[arr[i]] = 1\n l1 = [-1]+list(dict1.keys())\n dp = [[0 for i in range(v+1)]for i in range(len(l1))]\n dp[0][0] = 1\n for i in range(1, len(l1)):\n  dp[i][0] = 1\n  for j in range(1, v+1):\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*dict1[l1[i]]\n for i in range(k+1):\n  ans += dp[len(l1)-1][i]\n  ans = ans%P\n print(ans)\n  \n \n \ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\nn,k=list(map(int,input().split()))\nx=list(map(int,input().split()))\nl=[0 for i in range(100001)]\nfor i in x:\n l[i]+=1\nl=list([a for a in l if a!=0])\n# print(l)\nk=min(k,len(l))\ndp=[[0 for i in range(len(l)+1)] for j in range(k)]\nfor i in range(1,len(l)+1):\n dp[0][i]=dp[0][i-1]+l[i-1]\n# print(dp)\nans=dp[0][len(l)]+1\nfor i in range(1,k):\n for j in range(1,len(l)+1):\n  dp[i][j]=(dp[i][j-1]+dp[i-1][j-1]*l[j-1])%1000000007\n ans=(ans+dp[i][len(l)])%1000000007\n# print(dp)\nprint(ans)\n", "# cook your dish here\nn,k=list(map(int,input().split()))\nx=list(map(int,input().split()))\nl=[0 for i in range(100001)]\nfor i in x:\n l[i]+=1\nl=list([a for a in l if a!=0])\n# print(l)\nk=min(k,len(l))\ndp=[[0 for i in range(len(l)+1)] for j in range(k)]\nfor i in range(1,len(l)+1):\n dp[0][i]=dp[0][i-1]+l[i-1]\n# print(dp)\nans=dp[0][len(l)]+1\nfor i in range(1,k):\n for j in range(1,len(l)+1):\n  dp[i][j]=(dp[i][j-1]+dp[i-1][j-1]*l[j-1])%1000000007\n ans=(ans+dp[i][len(l)])%1000000007\n# print(dp)\nprint(ans)\n", "\ndef compute_coeff(roots,k):\n mod = 10**9+7\n res = [1 for i in range(len(roots)+1) ]\n for i in range(len(roots)):\n  cur_root = roots[i]\n  for j in range(i,-1,-1):\n   if j==0:res[j] *= -cur_root\n   else:res[j] = res[j-1] - res[j]*cur_root\n   if res[j] >=mod:res[j] %=mod\n for i in range(len(res)):res[i] = (abs(res[i])%mod)\n return res\nn,k = map(int,input().split())\narr = list(map(int,input().split()))\nd,a = dict(),0\nfor i in arr:\n if i not in d.keys():d[i] = 1\n else:d[i] += 1\nans = compute_coeff(list(d.values()),k)\nans = ans[::-1]\nprint(sum(ans[:k+1])%(10**9+7))", "n,k = map(int,input().split())\nl = list(map(int,input().split()))\nl.sort()\nM = 10**9+7\nfarr = []\narr = []\nj = 0\nf = 0\nc = 0\nwhile(j < len(l)):\n if f == 0:\n  f = l[j]\n  c = c+1\n  if j == len(l)-1:\n   farr.append(c)\n   arr.append(c)\n\n  j = j + 1\n\n elif(f != 0):\n  if l[j] == f:\n   c = c+1\n   #j = j + 1\n   if j == len(l) - 1:\n    farr.append(c)\n    arr.append(c)\n\n   j = j + 1\n\n  else:\n   farr.append(c)\n   arr.append(c)\n   f = 0\n   c = 0\n\ncnt = 1\nz = 1\nwhile(z <= k):\n if z == 1:\n  cnt = cnt+len(l)%M\n\n else:\n  ic = 0\n  i = 0\n  kc = 0\n  while(i < len(farr)):\n   kc = arr[i]\n   arr[i] = (ic*farr[i])%M\n   ic = ic+kc\n   cnt = (cnt+arr[i])%M\n   i = i+1\n\n z = z+1\n\nprint(cnt%M)", "n,k = map(int,input().split())\nl = list(map(int,input().split()))\nl.sort()\nM = 10**9+7\nfarr = []\nj = 0\nf = 0\nc = 0\nwhile(j < len(l)):\n if f == 0:\n  f = l[j]\n  c = c+1\n  if j == len(l)-1:\n   farr.append(c)\n\n  j = j + 1\n\n elif(f != 0):\n  if l[j] == f:\n   c = c+1\n   #j = j + 1\n   if j == len(l) - 1:\n    farr.append(c)\n\n   j = j + 1\n\n  else:\n   farr.append(c)\n   f = 0\n   c = 0\n\ncnt = 1\narr = farr.copy()\nz = 1\nwhile(z <= k):\n if z == 1:\n  cnt = cnt+len(l)%M\n\n else:\n  ic = 0\n  i = 0\n  kc = 0\n  while(i < len(farr)):\n   kc = arr[i]\n   arr[i] = (ic*farr[i])%M\n   ic = ic+kc\n   cnt = (cnt+arr[i])%M\n   i = i+1\n\n z = z+1\n\nprint(cnt%M)", "n,k = map(int,input().split())\nl = list(map(int,input().split()))\nl.sort()\nM = 10**9+7\nfarr = []\nj = 0\nf = 0\nc = 0\nwhile(j < len(l)):\n if f == 0:\n  f = l[j]\n  c = c+1\n  if j == len(l)-1:\n   farr.append(c)\n\n  j = j + 1\n\n elif(f != 0):\n  if l[j] == f:\n   c = c+1\n   #j = j + 1\n   if j == len(l) - 1:\n    farr.append(c)\n\n   j = j + 1\n\n  else:\n   farr.append(c)\n   f = 0\n   c = 0\n\ncnt = 1\narr = farr.copy()\nz = 1\nwhile(z <= k):\n if z == 1:\n  cnt = (cnt+sum(arr))%M\n\n else:\n  ic = 0\n  i = 0\n  kc = 0\n  while(i < len(farr)):\n   kc = arr[i]\n   arr[i] = (ic*farr[i])%M\n   ic = ic+kc\n   cnt = (cnt+arr[i])%M\n   i = i+1\n\n z = z+1\n\nprint(cnt%M)", "n,k = map(int,input().split())\nl = list(map(int,input().split()))\nM = 10**9+7\nfarr = []\nd = {}\nfor i in l:\n if i in d:\n  d[i] = d[i]+1\n\n else:\n  d[i] = 1\n\nfor i in d:\n farr.append(d[i])\n\n#print(farr)\ncnt = 1\narr = farr.copy()\n#print(arr)\n#print(sum(arr))\nz = 1\nwhile(z <= k):\n if z == 1:\n  cnt = (cnt+sum(arr))%M\n  #print(cnt)\n\n else:\n  ic = 0\n  i = 0\n  kc = 0\n  while(i < len(farr)):\n   kc = arr[i]\n   arr[i] = (ic*farr[i])%M\n   ic = ic+kc\n   cnt = (cnt+arr[i])%M\n   i = i+1\n\n z = z+1\n\nprint(cnt%M)", "# creating a modulus function for efficiency purpose\ndef modulus(n):\n # defining modulus\n mod = int(1e9) + 7\n if n < 0:\n  n += mod\n else:\n  n = n % mod\n return n\n# taking input\nn,k = list(map(int, input().strip().split()))\narray = list(map(int, input().strip().split()))\n# creating a frequency array called freak\nfreak = []\nfor i in list(set(array)):\n freak.append(array.count(i))\n# creating a DP Matrix of zeros initially\ndp = [[0]*len(freak) for _ in range(k)]\n# elements of first row of DP matrix will be same as the freak array\nfor i in range(len(freak)):\n dp[0][i] = freak[i]\n# starting calculations from the second row onwards\nfor row in range(1, k):\n for col in range(0, len(freak) - row):\n  dp[row][col] = modulus( freak[col] * sum(dp[row - 1][col + 1:]))\n# answer will be sum[dp] plus 1 for empty set\nans = 1\nfor i in dp:\n ans += sum(i)\nans = modulus(ans)\n# printing the answer\nprint(ans)"]