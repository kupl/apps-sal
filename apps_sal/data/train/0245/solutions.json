["class Solution:\n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         if(len(nums) == 0):\n             return ''\n         if(len(nums) == 1):\n             return str(nums[0])\n         if(len(nums) == 2):\n             return str(nums[0]) + '/' + str(nums[1])\n         res = str(nums[0]) + '/' + '('\n         for i in range(1,len(nums)-1):\n             res += str(nums[i])\n             res += '/'\n         res += str(nums[-1])\n         res += ')'\n         return res", "class Solution:\n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         s = '/'.join(map(str, nums))\n         if len(nums) <= 2:\n             return s\n         s = s.replace('/', '/(', 1) + ')'\n         return s\n", "class Solution:\n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         \n         \n         if len(nums) == 1:\n             return str(nums[0])\n         if len(nums) == 2:\n             return str(nums[0]) + '/' + str(nums[1])\n         \n         res = str(nums[0])+'/('\n         \n         for i in range(1,len(nums)-1,1):\n             res = res + str(nums[i]) + '/'\n         \n         res = res + str(nums[len(nums)-1]) + ')'\n         \n         return res", "class Solution:\n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         n = len(nums)\n         if n==1:\n             return str(nums[0])\n         elif n==2:\n             return str(nums[0])+'/'+str(nums[1])\n         else:\n             result = str(nums[0])+'/('\n             for i in range(1,n-1):\n                 result += str(nums[i])+'/'\n             result += str(nums[-1])+')'\n             return result\n", "class Solution:\n     def optimalDivision(self, nums):\n         nums=list(map(str,nums))\n         if len(nums)==1:\n             return nums[0]\n         if len(nums)==2:\n             return \"/\".join(nums)\n         nums[1]='('+nums[1]\n         nums[-1]=nums[-1]+')'\n         return \"/\".join(nums)", "class Solution:\n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         res=''\n         \n         if len(nums)==1:\n             return str(nums[0])\n         \n         if len(nums)==2:\n             return str(nums[0])+'/'+str(nums[1])\n         \n         \n         for i in range(0,len(nums)):\n             if i==0:\n                 res=res+str(nums[i])+'/('\n             elif i<len(nums)-1:\n                 res=res+str(nums[i])+'/'\n             else:\n                 res=res+str(nums[i])+')'\n         return res", "class Solution:\n \n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         table = [[None for i in range(len(nums))] for j in range(len(nums))]\n         for i in range(len(nums)):\n             table[i][i] = (nums[i], str(nums[i]))\n         return self.findmax(table, 0, len(nums) - 1)[1]\n \n     def findmax(self, table, i, j):\n         if table[i][j] is not None:\n             return table[i][j]\n \n         if j - i == 1:\n             a, a_s = table[i][i]\n             b, b_s = table[j][j]\n             ret = (a / b, a_s + '/' + b_s)\n             table[i][j] = ret\n             return ret\n         m = -1\n         ret = None\n         for d in range(i, j):\n             ma, max_rep = self.findmax(table, i, d)\n             mi, min_rep = self.findmin(table, d+1, j)\n             div = ma / mi\n             if div > m:\n                 m = div\n                 ret = (max_rep, min_rep)\n         rep = self.assemble(ret[0], ret[1])\n         print(\"max %d, %d: v, %f, %s\" % (i, j, m, rep))\n         ret = (m, rep)\n         table[i][j] = ret\n         return ret\n \n     def findmin(self, table, i, j):\n         if table[j][i] is not None:\n             return table[j][i]\n \n         if j - i == 1:\n             a, a_s = table[i][i]\n             b, b_s = table[j][j]\n             ret = (a / b, a_s + '/' + b_s)\n             table[j][i] = ret\n             return ret\n \n         m = float('inf')\n         ret = None\n         for d in range(i, j):\n             ma, max_rep = self.findmin(table, i, d)\n             mi, min_rep = self.findmax(table, d+1, j)\n             div = ma / mi\n             if div < m:\n                 m = div\n                 ret = (max_rep, min_rep)\n         rep = self.assemble(ret[0], ret[1])\n         print(\"min %d, %d: v, %f, %s\" % (i, j, m, rep))\n         ret = (m, rep)\n         table[j][i] = ret\n         return ret\n \n     def assemble(self, up, down):\n         if '/' in down:\n             return \"%s/(%s)\" % (up, down)\n         else:\n             return \"%s/%s\" % (up, down)", "class Solution:\n     def optimalDivision(self, nums):\n         if (len(nums) == 1):\n             return str(nums[0]) + \"\"\n         elif (len(nums) == 2):\n             return str(nums[0]) + \"/\" + str(nums[1])\n         answer = str(nums[0]) + \"/(\" + str(nums[1])\n         for i in nums[2:]:\n             answer += \"/\" + str(i)\n         answer += \")\"\n         return answer", "class Solution:\n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         \n         result = \"\"\n         \n         numsCount = len(nums)\n         \n         for i in range(numsCount):\n             thisNum = nums[i]\n             \n             strNum = str(thisNum)\n             \n             if i == 0:\n                 result = result + strNum\n             elif i == 1 and numsCount > 2:\n                 result = result + \"/(\" + strNum\n             elif i == numsCount - 1 and numsCount > 2:\n                 result = result + \"/\" +  strNum + \")\"\n             else:\n                 result = result + \"/\" + strNum\n         \n         return result\n", "class Solution:\n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         A = list(map(str, nums))\n         if len(A) <= 2:\n             return '/'.join(A)\n         return A[0] + '/(' + '/'.join(A[1:]) + ')'", "class Solution:\n     def optimalDivision(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         if len(nums)<2:\n             return str(nums[0])\n         if len(nums)==2:\n             return str(nums[0])+'/'+str(nums[1])\n         l =str(nums[0])+'/('\n         for x in nums[1:]:\n             l = l+str(x)+'/'\n         return l[:-1]+')'\n"]