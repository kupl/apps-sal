["# cook your dish here\nfrom operator import itemgetter\ninp=list(map(int, input().split()))\nn, m, w, b = inp[:4]\nstops=[]\nfor i in range(w):\n stops.append((inp[4+2*i]-1,inp[5+2*i]-1,'w'))\nfor i in range(b):\n stops.append((inp[4+2*w+2*i]-1,inp[5+2*w+2*i]-1,'b'))\nstops.sort(key=itemgetter(1))\nstops.sort(key=itemgetter(0))\ncounter=0\nstop_rows=[[] for _ in range(n)]\nfor stop in stops:\n stop_rows[stop[0]].append(stop[1:])\nfor row in stop_rows:\n idx=0\n for i in range(len(row)):\n  if idx==row[i][0]:\n   idx+=1\n  else:\n   if row[i][1]=='w':\n    if i<len(row)-1:\n     num=row[i+1][0]-idx+1\n     counter+=((num*(num+1))>>1)-1\n     idx=row[i][0]+1\n     num=row[i+1][0]-row[i][0]+1\n     counter-=((num*(num+1))>>1)-1\n    else:\n     num=m-idx\n     counter+=((num*(num+1))>>1)-1\n     idx=row[i][0]+1\n     num=m-row[i][0]\n     counter-=((num*(num+1))>>1)-1\n   else:\n    num=row[i][0]-idx+1\n    counter+=((num*(num+1))>>1)-1\n    idx=row[i][0]+1\n num=m-idx\n counter+=(num*(num+1))>>1\nprint(counter)\n", "# cook your dish here\ninputs = list(map(int,input().split()))\nN = inputs[0]\nM=inputs[1]\nW = inputs[2]\nB=inputs[3]\nlist1=[[\".\"]*M for i in range(N)]\nfor i in range(4,(2*W)+4,2):\n list1[inputs[i]-1][inputs[i+1]-1] = 'W'\nfor j in range((2*W)+4,len(inputs),2):\n list1[inputs[j]-1][inputs[j+1]-1]=\"B\"\nlist2 = [[0]*M for i in range(N)]\nfirst=0\ndistance=0\nwhites=0\njs=0\ntotal=0\nfor i in range(N):\n first=0\n for j in range(M):\n  if list1[i][j]==\".\" and first==0:\n   whites=0\n   first=1\n   distance =1\n   for k in range(j+1,M):\n    if list1[i][k]==\"B\":\n     distance+=1\n     if k!=M-1:\n      first=0\n     break\n    elif list1[i][k]==\"W\":\n     whites +=1\n     distance +=1\n     if whites>1:\n      if k!=M-1:\n       first=0\n      whites=0\n      break\n    elif list1[i][k]==\".\":\n     distance +=1\n   js=j+1\n   js -=1\n   list2[i][j] = distance +0\n   total = total + distance\n  elif list1[i][j]==\".\":\n   list2[i][j] = list2[i][js] - (j-js)\n   total += list2[i][j]\n  else:\n   list2[i][j] = 0\n first=0\n#for row in list2:\n #print(row)\nprint(total)\n\n", "# cook your dish here\ninputs = list(map(int,input().split()))\nN = inputs[0]\nM=inputs[1]\nW = inputs[2]\nB=inputs[3]\nlist1=[[\".\"]*M for i in range(N)]\nfor i in range(4,(2*W)+4,2):\n list1[inputs[i]-1][inputs[i+1]-1] = 'W'\nfor j in range((2*W)+4,len(inputs),2):\n list1[inputs[j]-1][inputs[j+1]-1]=\"B\"\nlist2 = [[0]*M for i in range(N)]\nfirst=0\ndistance=0\nwhites=0\njs=0\nfor i in range(N):\n first=0\n for j in range(M):\n  if list1[i][j]==\".\" and first==0:\n   whites=0\n   first=1\n   distance =1\n   for k in range(j+1,M):\n    if list1[i][k]==\"B\":\n     distance+=1\n     if k!=M-1:\n      first=0\n     break\n    elif list1[i][k]==\"W\":\n     whites +=1\n     distance +=1\n     if whites>1:\n      if k!=M-1:\n       first=0\n      whites=0\n      break\n    elif list1[i][k]==\".\":\n     distance +=1\n   js=j+1\n   js -=1\n   list2[i][j] = distance +0\n  elif list1[i][j]==\".\":\n   list2[i][j] = list2[i][js] - (j-js)\n  else:\n   list2[i][j] = 0\n first=0\n#for row in list2:\n #print(row)\ntotal=0\nfor i in range(N):\n for j in range(M):\n  total += list2[i][j]\nprint(total)\n \n", "# cook your dish here\ninputs = list(map(int,input().split()))\nN = inputs[0]\nM=inputs[1]\nW = inputs[2]\nB=inputs[3]\nlist1=[[\".\"]*M for i in range(N)]\nfor i in range(4,(2*W)+4,2):\n list1[inputs[i]-1][inputs[i+1]-1] = 'W'\nfor j in range((2*W)+4,len(inputs),2):\n list1[inputs[j]-1][inputs[j+1]-1]=\"B\"\nlist2 = [[0]*M for i in range(N)]\nfirst=0\ndistance=0\nwhites=0\njs=0\nfor i in range(N):\n first=0\n for j in range(M):\n  if list1[i][j]==\".\" and first==0:\n   whites=0\n   first=1\n   distance =1\n   for k in range(j+1,M):\n    if list1[i][k]==\"B\":\n     distance+=1\n     first=0\n     break\n    elif list1[i][k]==\"W\":\n     whites +=1\n     distance +=1\n     if whites>1:\n      first=0\n      whites=0\n      break\n    elif list1[i][k]==\".\":\n     distance +=1\n   js=j+1\n   js -=1\n   list2[i][j] = distance +0\n  elif list1[i][j]==\".\":\n   list2[i][j] = list2[i][js] - (j-js)\n  else:\n   list2[i][j] = 0\n first=0\n#for row in list2:\n #print(row)\ntotal=0\nfor i in range(N):\n for j in range(M):\n  total += list2[i][j]\nprint(total)\n \n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\nipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda :int(input())\nip = lambda :[int(w) for w in input().split()]\n\nn,m,w,b,*g = ip()\ndt = {i:[] for i in range(1,n+1)}\nfor i in range(0,2*w,2):\n dt[g[i]].append([g[i+1],'W'])\ng = g[2*w:]\nfor i in range(0,2*b,2):\n dt[g[i]].append([g[i+1],'B'])\nans = 0\nfor i in range(1,n+1):\n t = sorted(dt[i])\n if t == [] or t[-1][0] != m:\n  t.append([m,'B'])\n  ans += 1\n else:\n  t[-1][1] = 'B'\n prev = 1\n for j in range(len(t)):\n  ind,cell = t[j]\n  no = ind - prev\n  if cell == 'B':\n   l = 2\n   r = ind - prev + 1\n  else:\n   nxt = t[j+1][0]\n   l = nxt - ind + 2\n   r = nxt - prev + 1\n  ans += no*(l+r)//2\n  prev = ind + 1\nprint(ans)\n\n\n\n\n\n\n\n \n", "# cook your dish here\ndef suma(s, e, cnt):\n t = e - s\n if cnt < e:\n  t_1 = e - cnt + 1\n  ans = t * (t + 1) // 2 - t_1 * (t_1+1) // 2\n else:\n  ans = t * (t + 1) // 2 - 1\n return ans\n\nn, m, w, b, *l = list(map(int, input().split()))\n# mat = [[0 for _ in range(m)] for _ in range(n)]\ndic = {}\nfor i in range(0, 2*w, 2):\n y, x = l[i]-1, l[i+1]-1\n # mat[y-1][x-1] = 1\n if y not in dic:\n  dic[y] = [[x, 1]]\n else:\n  dic[y].append([x, 1])\n\nfor i in range(2*w, 2*(w+b), 2):\n y, x = l[i]-1, l[i+1]-1\n # mat[y-1][x-1] = 2\n if y not in dic:\n  dic[y] = [[x, 2]]\n else:\n  dic[y].append([x, 2])\n\nans = 0\nfor v in list(dic.values()):\n v.sort()\n v.append([m-1, 2])\n i = len(v) - 1\n cnt_i = m + 1\n ans += 1\n while i >= 0:\n  if i-1 >= 0 and v[i - 1][1] == 2:\n   ans += suma(v[i - 1][0], v[i][0], cnt_i)\n   cnt_i = v[i-1][0]\n   i -= 1\n  elif i-2 >= 0 and v[i - 2][1] == 1:\n   ans += suma(v[i - 2][0], v[i][0], cnt_i)\n   if cnt_i != v[i - 1][0]:\n    ans -= (v[i][0] - v[i - 1][0] + 1)\n   cnt_i = v[i - 2][0]\n   i -= 1\n  elif i-2 >= 0 and v[i - 2][1] == 2:\n   ans += suma(v[i - 2][0], v[i][0], cnt_i)\n   if cnt_i != v[i - 1][0]:\n    ans -= (v[i][0] - v[i - 1][0] + 1)\n   cnt_i = v[i - 2][0]\n   i -= 2\n  else:\n   ans += suma(-1, v[i][0], cnt_i)\n   if i == 1 and cnt_i != v[i - 1][0]:\n    ans -= (v[i][0] - v[i - 1][0] + 1)\n   break\n\n # prev_w = -1\n # blk = m - 1\n # cnted_i = m\n # for i in range(len(v) - 1, -1, -1):\n #     prev_blk = -1\n #     if v[i][1] == 2:\n #         prev_blk = blk\n #         blk = v[i][0]\n #         prev_w = -1\n #         ans -= 1\n #     elif v[i][1] == 1:\n #         if prev_w != -1:\n #             prev_blk = blk\n #             blk = prev_w\n #             ans -= 1\n #         prev_w = v[i][0]\n #         ans -= blk - v[i][0] + 1\n\n #     if prev_blk != -1:\n #         t = prev_blk - v[i][0]\n #         t_1 = prev_blk - cnted_i + 1\n #         if cnted_i < prev_blk and v[i][1] == 1:\n #             ans += 1\n #         # if v[i][1] == 1:\n #         #     ans += blk - v[i][0]+1\n #         ans += t * (t + 1) // 2 - t_1 * (t_1 + 1) // 2\n #         cnted_i = v[i][0]+1\n # if cnted_i < prev_blk and v[i][1] == 1:\n #     ans += 1\n # t = blk + 1\n # t_1 = blk - cnted_i + 1\n # ans += t * (t + 1) // 2 - t_1 * (t_1 + 1) // 2\n\nn -= len(dic)\nans += n*m*(m+1)//2\n# temp = [[0 for _ in range(m)] for _ in range(n)]\n# ans = 0\n# for j in range(n):\n#     prev_w = -1\n#     blk = m-1\n#     for i in range(m-1, -1, -1):\n#         if mat[j][i] == 2:\n#             blk = i\n#             prev_w = -1\n#         elif mat[j][i] == 1:\n#             if prev_w != -1:\n#                 blk = prev_w\n#             prev_w = i\n#         else:\n#             ans += blk-i+1\n#             temp[j][i] = blk-i+1\nprint(ans)\n# print(temp)\n", "# cook your dish here\nn, m, w, b, *l = list(map(int, input().split()))\nmat = [[0 for _ in range(m)] for _ in range(n)]\nfor i in range(w):\n y, x = l[2*i], l[2*i+1]\n mat[y-1][x-1] = 1\n \nfor i in range(w, w+b):\n y, x = l[2*i], l[2*i+1]\n mat[y-1][x-1] = 2\n\ntemp = [[0 for _ in range(m)] for _ in range(n)]\nans = 0\nfor j in range(n):\n prev_w = -1\n blk = m-1\n for i in range(m-1, -1, -1):\n  if mat[j][i] == 2:\n   blk = i\n   prev_w = -1\n  elif mat[j][i] == 1:\n   if prev_w != -1:\n    blk = prev_w\n   prev_w = i\n  else:\n   ans += blk-i+1\n   temp[j][i] = blk-i+1\nprint(ans)\n# print(temp)\n", "# cook your dish here\nit=list(map(int,input().split()))\nn,m=it[:2]\nw,b=it[2:4]\naa=it[4:4+2*w]\n\naa=[[aa[i*2],aa[i*2+1]] for i in range(w)]\nbb=it[4+2*w:]\nbb=[[bb[i*2],bb[i*2+1]] for i in range(b)]\nss=[[] for i in range(n)]\nfor i in aa:\n ss[i[0]-1].append([i[1]-1,1])\nfor i in bb:\n ss[i[0]-1].append([i[1]-1,0])\nss=[sorted(i) for i in ss]\ntot=0\nfor j in range(n):\n ind=0\n co=0\n st=[]\n # print(\"j is\",j)\n for i in ss[j]:\n  if i[1]==1:\n   co+=1\n   if co<=1:\n    st.append(i)\n    continue\n   a=i[0]-ind+1\n   b=1+1\n   #  su=((a+b)*(a-b+1))//2\n   \n   # st=[]\n  #    tot+=su\n   #print(a,b,tot)\n   for ii in st:\n    a=ind\n    b=ii[0]-1\n    a=i[0]-a+1\n    b=i[0]-b+1\n    \n    su=((a+b)*(a-b+1))//2\n    tot+=su\n    #  print(a,b,tot)\n    ind=ii[0]+1\n   st=[i[:]]\n   #   print(tot)\n   # ind=i[0]+1\n  else:\n   co=0\n   a=i[0]-ind+1\n   b=1+1\n   su=((a+b)*(a-b+1))//2\n   \n   tot+=su\n   #  print(a,b,tot)\n   ind=i[0]+1\n   for ii in st:\n    tot-=(i[0]-ii[0]+1)\n   st=[]\n   #  print(tot)\n a=ind\n b=m-1\n #   print(a,b)\n # print(tot)\n if a<=b:\n  a=m-a\n  b=m-b\n  \n  # print(a,b)\n  su=((a+b)*(a-b+1))//2\n  tot+=su\n #  print(tot)\n for ii in st:\n  tot-=(m-ii[0])\n \n #print(tot)\n # print()\nprint(tot)\n \n   \n \n", "it=list(map(int,input().split()))\nn,m=it[:2]\nw,b=it[2:4]\naa=it[4:4+2*w]\n\naa=[[aa[i*2],aa[i*2+1]] for i in range(w)]\nbb=it[4+2*w:]\nbb=[[bb[i*2],bb[i*2+1]] for i in range(b)]\nss=[[] for i in range(n)]\nfor i in aa:\n ss[i[0]-1].append([i[1]-1,1])\nfor i in bb:\n ss[i[0]-1].append([i[1]-1,0])\nss=[sorted(i) for i in ss]\ntot=0\nfor j in range(n):\n ind=0\n co=0\n st=[]\n # print(\"j is\",j)\n for i in ss[j]:\n  if i[1]==1:\n   co+=1\n   if co<=1:\n    st.append(i)\n    continue\n   a=i[0]-ind+1\n   b=1+1\n   #  su=((a+b)*(a-b+1))//2\n   \n   # st=[]\n  #    tot+=su\n   #print(a,b,tot)\n   for ii in st:\n    a=ind\n    b=ii[0]-1\n    a=i[0]-a+1\n    b=i[0]-b+1\n    \n    su=((a+b)*(a-b+1))//2\n    tot+=su\n    #  print(a,b,tot)\n    ind=ii[0]+1\n   st=[i[:]]\n   #   print(tot)\n   # ind=i[0]+1\n  else:\n   co=0\n   a=i[0]-ind+1\n   b=1+1\n   su=((a+b)*(a-b+1))//2\n   \n   tot+=su\n   #  print(a,b,tot)\n   ind=i[0]+1\n   for ii in st:\n    tot-=(i[0]-ii[0]+1)\n   st=[]\n   #  print(tot)\n a=ind\n b=m-1\n #   print(a,b)\n # print(tot)\n if a<=b:\n  a=m-a\n  b=m-b\n  \n  # print(a,b)\n  su=((a+b)*(a-b+1))//2\n  tot+=su\n #  print(tot)\n for ii in st:\n  tot-=(m-ii[0])\n \n #print(tot)\n # print()\nprint(tot)\n \n   \n \n", "arr = list(map(int,input().split()))\n\nn = arr.pop(0)\nm = arr.pop(0)\nw = arr.pop(0)\nb = arr.pop(0)\n\nwhites = {}\nfor i in range(0,2*w-1,2):\n x = arr[i]-1\n y = arr[i+1]-1\n \n if x in whites:\n  whites[x].append(y)\n else:\n  whites[x] = [y]\n\nblacks = {}\nfor i in range(2*w,2*(w+b),2):\n x = arr[i]-1\n y = arr[i+1]-1\n \n if x in blacks:\n  blacks[x].append(y)\n else:\n  blacks[x] = [y]\n\ndef simulateRay(x,y):   \n wRow = {}\n bRow = {}\n \n if x in whites:\n  wRow = whites[x]\n  \n if x in blacks:\n  bRow = blacks[x]\n else:\n  if (len(wRow)==0) or ((len(wRow)==1) and (wRow[0]!=y)):\n   return m-y\n\n if (y in wRow) or (y in bRow):\n  return 0\n \n wCount = 0\n \n l = 1\n while y<(m-1):\n  \n  if y in wRow:\n   wCount += 1\n   if wCount == 2:\n    return l\n  if y in bRow:\n   return l\n  \n  l += 1\n  y += 1\n  \n return l\n \ntotal = 0\nallL = int(m*(m+1)/2)\nfor i in range(n):\n if (i in whites) or (i in blacks):\n  for j in range(m):\n   res = simulateRay(i,j) \n ##        print(i,j,res)\n   total += res\n else:\n  total += allL\nprint(total)\n \n", "arr = list(map(int,input().split()))\n\nn = arr.pop(0)\nm = arr.pop(0)\nw = arr.pop(0)\nb = arr.pop(0)\n\nwhites = {}\nfor i in range(0,2*w-1,2):\n x = arr[i]-1\n y = arr[i+1]-1\n \n if x in whites:\n  whites[x].append(y)\n else:\n  whites[x] = [y]\n\nblacks = {}\nfor i in range(2*w,2*(w+b),2):\n x = arr[i]-1\n y = arr[i+1]-1\n \n if x in blacks:\n  blacks[x].append(y)\n else:\n  blacks[x] = [y]\n\ndef simulateRay(x,y):   \n wRow = {}\n bRow = {}\n \n if x in whites:\n  wRow = whites[x]\n  \n if x in blacks:\n  bRow = blacks[x]\n else:\n  if (len(wRow)==0) or ((len(wRow)==1) and (wRow[0]!=y)):\n   return m-y\n\n if (y in wRow) or (y in bRow):\n  return 0\n \n wCount = 0\n \n l = 1\n while y<(m-1):\n  \n  if y in wRow:\n   wCount += 1\n   if wCount == 2:\n    return l\n  if y in bRow:\n   return l\n  \n  l += 1\n  y += 1\n  \n return l\n \ntotal = 0\nallL = m*(m+1)/2\nfor i in range(n):\n for j in range(m):\n  res = simulateRay(i,j) \n##        print(i,j,res)\n  total += res\n\nprint(total)\n \n", "# cook your dish here\nx=list(map(int,input().strip().split()))\nn,m,w,b=x[0],x[1],x[2],x[3]\nl=[[0]*m for _ in range(n)]\nfor i in range(4,4+2*w,2):\n  l[x[i]-1][x[i+1]-1]=1\nfor i in range(4+2*w,4+2*w+2*b,2):\n  l[x[i]-1][x[i+1]-1]=2\nct=0\ndel(x)\nfor x in l:\n  p1,p2,q=m,m,m\n  for i in range(m-1,-1,-1):\n   if x[i]==2:\n    q=i\n   elif x[i]==1:\n     p2=p1\n     p1=i\n   else:\n    '''if q==-1 and p2==-1:\n        ct+=(m-i)\n      elif q==-1 and p2!=-1:\n        ct+=(p2-i+1)\n      elif p2==-1 and q!=-1:\n        ct+=(q-i+1)\n      else:'''\n    ct+=(min(p2,q,m-1)-i+1)\n   '''print(ct)\nprint(l)'''\nprint(ct)\n", "# cook your dish here\nx=list(map(int,input().strip().split()))\nn,m,w,b=x[0],x[1],x[2],x[3]\nl=[[0]*m for _ in range(n)]\nfor i in range(4,4+2*w,2):\n  l[x[i]-1][x[i+1]-1]=1\nfor i in range(4+2*w,4+2*w+2*b,2):\n  l[x[i]-1][x[i+1]-1]=2\nct=0\ndel(x)\nfor x in l:\n  p1,p2,q=-1,-1,-1\n  for i in range(m-1,-1,-1):\n   if x[i]==2:\n    q=i\n   elif x[i]==1:\n     p2=p1\n     p1=i\n   else:\n    if q==-1 and p2==-1:\n     ct+=(m-i)\n    elif q==-1 and p2!=-1:\n     ct+=(p2-i+1)\n    elif p2==-1 and q!=-1:\n     ct+=(q-i+1)\n    else:\n     ct+=(min(p2,q)-i+1)\n   '''print(ct)\nprint(l)'''\nprint(ct)\n", "def solve(grid,row,col,white):\n s=0\n for thing in grid[row]:\n  for i in range(col,len(grid[row])):\n   if grid[row][i]=='B':\n    s=i-col+1\n    return s\n   elif grid[row][i]=='W':\n    white+=1\n   if white==2:\n    s=i-col+1\n    return s\n   if i+1==len(grid[row]):\n    s=i-col+1\n    return s\n return s\n\narr = [int(x) for x in input().split()]\nn,m,w,b = arr[0],arr[1],arr[2],arr[3]\n\narr = arr[4:]\n\nwh = []\nbl = []\n\ng = [['.' for i in range(m)]for j in range(n)]\n\nfor i in range(0,2*w-1,2):\n g[arr[i]-1][arr[i+1]-1]='W'\nfor i in range(2*w,len(arr)-1,2):\n g[arr[i]-1][arr[i+1]-1]='B'\n\ns=0\nfor i in range(n):\n c=0\n for j in range(m):\n  if g[i][j]=='W' or g[i][j]=='B':\n   c=0\n   continue\n  if c==0:\n   c=solve(g,i,j,0)\n   s+=c\n  else:\n   c-=1\n   s+=c\nprint(s)\n", "def solve(grid,row,col,white):\n s=0\n for thing in grid[row]:\n  for i in range(col,len(grid[row])):\n   if grid[row][i]=='B':\n    s=i-col+1\n    return s\n   elif grid[row][i]=='W':\n    white+=1\n   if white==2:\n    s=i-col+1\n    return s\n   if i+1==len(grid[row]):\n    s=i-col+1\n    return s\n return s\n\n\narray=[int(x) for x in input().split()]\nn,m,w,b=array[0],array[1],array[2],array[3]\narray=array[4:]\nwhite=[]\nblack=[]\ngrid=[['.' for i in range(m)]for j in range(n)]\nfor i in range(0,2*w-1,2):\n grid[array[i]-1][array[i+1]-1]='W'\nfor i in range(2*w,len(array)-1,2):\n grid[array[i]-1][array[i+1]-1]='B'\ns=0\nfor i in range(n):\n current=0\n for j in range(m):\n  if grid[i][j]=='W' or grid[i][j]=='B':\n   current=0\n   continue\n  if current==0:\n   current=solve(grid,i,j,0)\n   s+=current\n  else:\n   current-=1\n   s+=current\nprint(s)\n\n\n\n\n\n\n\n\n", "def solve(grid,row,col,white):\n s=0\n for thing in grid[row]:\n  for i in range(col,len(grid[row])):\n   if grid[row][i]=='B':\n    s=i-col+1\n    return s\n   elif grid[row][i]=='W':\n    white+=1\n   if white==2:\n    s=i-col+1\n    return s\n   if i+1==len(grid[row]):\n    s=i-col+1\n    return s\n return s\n\n\narray=[int(x) for x in input().split()]\nn,m,w,b=array[0],array[1],array[2],array[3]\narray=array[4:]\nwhite=[]\nblack=[]\ngrid=[['.' for i in range(m)]for j in range(n)]\nfor i in range(0,2*w-1,2):\n grid[array[i]-1][array[i+1]-1]='W'\nfor i in range(2*w,len(array)-1,2):\n grid[array[i]-1][array[i+1]-1]='B'\ns=0\nfor i in range(n):\n current=0\n for j in range(m):\n  if grid[i][j]=='W' or grid[i][j]=='B':\n   current=0\n   continue\n  if current==0:\n   current=solve(grid,i,j,0)\n   s+=current\n  else:\n   current-=1\n   s+=current\nprint(s)\n\n\n\n\n\n\n\n\n"]