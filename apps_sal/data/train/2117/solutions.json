["def read_data():\n    n = int(input())\n    hs = list(map(int, input().split()))\n    return n, hs\n\n\ndef solve(n, hs):\n    left = get_left_index(n, hs)\n    right = get_right_index(n, hs)\n    vals = [[] for i in range(n)]\n    for h, l, r in zip(hs, left, right):\n        vals[r - l - 2].append(h)\n    min_hs = []\n    min_h = - float('inf')\n    for val in vals[::-1]:\n        for v in val:\n            min_h = max(min_h, v)\n        min_hs.append(min_h)\n    print(* min_hs[::-1])\n\n\ndef get_left_index(n, hs):\n    left = []\n    stack = []\n    for i, h in enumerate(hs):\n        while stack and hs[stack[-1]] >= h:\n            del stack[-1]\n        if stack:\n            left.append(stack[-1])\n        else:\n            left.append(-1)\n        stack.append(i)\n    return left\n\n\ndef get_right_index(n, hs):\n    hs.reverse()\n    tmp = get_left_index(n, hs)\n    hs.reverse()\n    tmp.reverse()\n    right = [n - 1 - a for a in tmp]\n    return right\n\nn, hs = read_data()\nsolve(n, hs)", "import math\nimport random\n\nclass AVLTree():\n    def __init__(self, x):\n        self.left = None\n        self.rght = None\n        self.val = x\n        self.height = 1\n        \ndef getHeight0(root):\n    if root==None: return 0\n    return max(getHeight0(root.left), getHeight0(root.rght))+1\n\ndef getHeight(root):\n    if root==None: return 0\n    return root.height\n    #return max(getHeight(root.left), getHeight(root.rght))+1\n\ndef insert(root, x):\n    if root==None: return AVLTree(x)\n    if x==root.val: return root\n    if x<root.val:\n        root.left = insert(root.left, x)\n    elif x>root.val:\n        root.rght = insert(root.rght, x)\n    hl = getHeight(root.left)\n    hr = getHeight(root.rght)\n    root.height = max(hl,hr)+1\n    \n    if hr-hl>1:\n        assert hr-hl==2\n        hrr=getHeight(root.rght.rght)\n        hrl=getHeight(root.rght.left)\n        if hrr==hrl+1:\n            new_root = root.rght\n            root.rght = new_root.left\n            new_root.left = root\n            root.height -= 2\n            return new_root\n        elif hrl==hrr+1:\n            new_root = root.rght.left\n            root.rght.left = new_root.rght\n            new_root.rght = root.rght\n            root.rght = new_root.left\n            new_root.left = root\n            root.height -= 2\n            new_root.height += 1\n            new_root.rght.height -= 1\n            return new_root\n        else:\n            assert False\n    elif hl-hr>1:\n        assert hl-hr==2\n        hlr=getHeight(root.left.rght)\n        hll=getHeight(root.left.left)\n        if hll==hlr+1:\n            new_root = root.left\n            root.left = new_root.rght\n            new_root.rght = root\n            root.height -= 2\n            return new_root\n        elif hlr==hll+1:\n            new_root = root.left.rght\n            root.left.rght = new_root.left\n            new_root.left = root.left\n            root.left = new_root.rght\n            new_root.rght = root\n            root.height -= 2\n            new_root.height += 1\n            new_root.left.height -= 1\n            return new_root\n        else:\n            assert False\n    return root\n\ndef findUpperBound(root, x):\n    if root==None: return None\n    if x>=root.val:\n        return findUpperBound(root.rght, x)\n    tmp_bound = findUpperBound(root.left, x)\n    if tmp_bound==None: return root.val\n    return tmp_bound\n    \ndef findLowerBound(root, x):\n    if root==None: return None\n    if x<=root.val:\n        return findLowerBound(root.left, x)\n    tmp_bound = findLowerBound(root.rght, x)\n    if tmp_bound==None: return root.val\n    return tmp_bound\n    \ndef inorder(root):\n    if root==None: return []\n    return inorder(root.left)+[root.val]+inorder(root.rght)\n\ndef checkHeight(root):\n    if root==None: return True\n    if not checkHeight(root.left): return False\n    if not checkHeight(root.rght): return False\n    return abs(getHeight0(root.left)-getHeight0(root.rght))<=1\n    \ndef testAVL():\n    l = [x for x in range(100)]\n    for i in range(100):\n        ni = random.randint(0,99)\n        l[i],l[ni] = l[ni],l[i]\n\n    tree = None\n    for v in l:\n        tree = insert(tree, v)\n    assert inorder(tree)==[i for i in range(100)]\n    assert checkHeight(tree)==True\n\n\nclass HeapObj():\n    def __init__(self, v, n):\n        self.val = v\n        self.hpidx = n\n        \ndef shiftup(n, r, hp):\n    while r>=0:\n        j = r*2+1\n        if j<n:\n            if j+1<n and hp[j+1].val>hp[j].val: j+=1\n            if hp[j].val <= hp[r].val: return\n            hp[r],hp[j] = hp[j],hp[r]\n            hp[r].hpidx = r\n            hp[j].hpidx = j\n        if r==0: break\n        r = int((r-1)/2)\n\ndef shiftdown(n, r, hp):\n    while r<n:\n        j = r*2+1\n        if j>=n: return\n        if j+1<n and hp[j+1].val>hp[j].val: j+=1\n        if hp[j].val<=hp[r].val: return\n        hp[r],hp[j] = hp[j],hp[r]\n        hp[r].hpidx = r\n        hp[j].hpidx = j\n        r = j\n\ndef testHeap():\n    hp = []\n    for _ in range(100):\n        obj = HeapObj(random.randint(0,9999), len(hp))\n        hp.append(obj)\n        shiftup(len(hp),len(hp)-1,hp)\n    res = []\n    while hp:\n        res.append(hp[0].val)\n        hp[0],hp[-1] = hp[-1],hp[0]\n        hp[0].hpidx = 0\n        hp.pop()\n        shiftdown(len(hp), 0, hp)\n    assert res==sorted(res, reverse=True)\n    \ndef calc(n, a):\n    ia = [x for x in enumerate(a)]\n    ia.sort(key=lambda tp:tp[1])\n    #print('ia={ia}'.format(ia=ia))\n    tree = None\n    tree = insert(tree, -1)\n    tree = insert(tree, n)\n    \n    hpobj = HeapObj(n,0)\n    hp = [hpobj]\n    itv2hpobj = {(0,n-1):hpobj}\n    ret = []\n    nxt = n\n    for idx,val in ia:\n        #Get interval\n        interval_end = findUpperBound(tree, idx)-1\n        interval_bgn = findLowerBound(tree, idx)+1\n        itv = (interval_bgn, interval_end)\n        assert itv in itv2hpobj\n        tree = insert(tree, idx)\n        #Delete this interval from heap\n        itv2hpobj[itv].val = 2*n\n        hpidx = itv2hpobj[itv].hpidx\n        shiftup(len(hp), hpidx, hp)\n        hp[0],hp[-1] = hp[-1],hp[0]\n        hp[0].hpidx = 0\n        hp.pop()\n        del itv2hpobj[itv]\n        shiftdown(len(hp), 0, hp)\n        \n        #Add new interval(s) to heap\n        if idx>interval_bgn:\n            new_obj = HeapObj(idx-interval_bgn, len(hp))\n            hp.append(new_obj)\n            itv2hpobj[(interval_bgn,idx-1)] = new_obj\n            shiftup(len(hp), len(hp)-1, hp)\n        if idx<interval_end:\n            new_obj = HeapObj(interval_end-idx, len(hp))\n            hp.append(new_obj)\n            itv2hpobj[(idx+1,interval_end)] = new_obj\n            shiftup(len(hp), len(hp)-1, hp)\n        NA = 0\n        if len(hp)>0: NA = hp[0].val\n        while nxt>NA:\n            ret.append(val)\n            nxt -= 1\n    assert len(ret)==n\n    ret.reverse()\n    return ret\n\ndef calc_bf(n, a):\n    ans = [None for _ in range(n)]\n    for i in range(n):\n        minij = None\n        for j in range(i,n):\n            l=j-i\n            if minij == None or minij>a[j]:\n                minij = a[j]\n            if ans[l]==None or ans[l]<minij:\n                ans[l] = minij\n    return ans\n\ndef duipai():\n    n = 10\n    a = [random.randint(1,20) for _ in range(n)]\n    res_smt = calc2(n, a)\n    res_btf = calc_bf(n,a)\n    if res_smt != res_btf:\n        print('!')\n        print(a)\n        print(res_smt)\n        print(res_btf)\n        return False\n    return True\ndef duipai_n(times):\n    for i in range(times):\n        print('Att {t}'.format(t=i))\n        if not duipai(): break\n        print()\n        \ndef calc2(n, a):\n    ans = [None for _ in range(n)]\n    bst_intvs = [None for _ in range(n)]\n    stk = [(-1,-2)]\n    for idx,v in enumerate(a+[-1]):\n        while v<=stk[-1][1]:\n            bst_intvs[stk[-1][0]] = idx-stk[-2][0]-2\n            stk.pop()\n        stk.append((idx,v))\n    for i in range(n):\n        iv = bst_intvs[i]\n        if ans[iv]==None or ans[iv]<a[i]:\n            ans[iv] = a[i]\n    #print('preans={0}'.format(ans))\n    for i in range(n-2,-1,-1):\n        if ans[i]==None or ans[i]<ans[i+1]:\n            ans[i] = ans[i+1]\n    return ans\n    \ndef serious():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    res = calc2(n, a)\n    ans = ''\n    for x in res[:-1]:\n        ans += str(x)+' '\n    ans += str(res[-1])\n    print(ans)\n\ndef main():\n    #duipai_n(1000000)\n    serious()\n    #testHeap()\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\n\nN = input()\nN = int(N)\nA = input().split(' ')\nA = list(map(int, A))\n\ndef get_L(A):\n    L_candidates = [] # increasing list of indices with A smaller than anything considered so far\n    L = A[:]\n\n    for i in range(len(A)):\n        while L_candidates and A[L_candidates[-1]] >= A[i]:\n            L_candidates.pop()\n        if L_candidates:\n            L[i] = L_candidates[-1]\n        else:\n            L[i] = -1\n        L_candidates.append(i)\n    return L\n\nL = get_L(A)\nR = [N - x - 1 for x in get_L(A[::-1])][::-1]\n\nstrengths = [0] * (N + 3)\nfor i in range(N):\n    p = R[i] - L[i] - 1\n    strengths[p] = max(strengths[p], A[i])\n\nstrengths = strengths[1:N+1]\n\nstrengths = strengths[::-1]\nfor i in range(1, N):\n    strengths[i] = max(strengths[i], strengths[i-1])\nstrengths = strengths[::-1]\n\nprint(' '.join(map(str, strengths)))", "#!/usr/bin/env python3\n\nN = input()\nN = int(N)\nA = input().split(' ')\nA = list(map(int, A))\n\ndef get_L(A):\n    L_candidates = [] # increasing list of indices with A smaller than anything considered so far\n    L = A[:]\n\n    for i in range(len(A)):\n        while L_candidates and A[L_candidates[-1]] >= A[i]:\n            L_candidates.pop()\n        if L_candidates:\n            L[i] = L_candidates[-1]\n        else:\n            L[i] = -1\n        L_candidates.append(i)\n    return L\n\nL = get_L(A)\nR = [N - x - 1 for x in get_L(A[::-1])][::-1]\n\nstrengths = [0] * (N + 3)\nfor i in range(N):\n    p = R[i] - L[i] - 1\n    strengths[p] = max(strengths[p], A[i])\n\nstrengths = strengths[1:N+1]\n\nfor i in range(N-1)[::-1]:\n    strengths[i] = max(strengths[i], strengths[i+1])\n\nprint(' '.join(map(str, strengths)))", "N = int(input())\n\narray = list(map(int, input().split()))\n\nres = [0 for i in range(N+1)]\nstack = [ (0, -1) ]\n\nfor ( i, height ) in enumerate(array):\n    while stack[-1][0] >= height:\n        num = stack[-1][0]\n        stack.pop()\n        length = i - stack[-1][1] - 1\n        res[length] = max(res[length], num)\n\n    stack.append( (height, i) )\n\nwhile len(stack) > 1 :\n    num = stack[-1][0]\n    stack.pop()\n    length = N - stack[-1][1] - 1\n    res[length] = max(res[length], num)\n\nfor i in range(N-1, 0, -1): #From N-1 to 1\n    res[i] = max(res[i], res[i+1])\n\nprint(' '.join(map(str, res[1:])) ) \n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n", "import sys\n\ndef solve():\n    n, = rv()\n    h, = rl(1)\n    smallertoleftindex = [-1] * n\n    smallertorightindex = [n] * n\n    temp = list()\n    for i in range(n):\n        while len(temp) > 0 and h[temp[-1]] >= h[i]: temp.pop(-1)\n        smallertoleftindex[i] = -1 if len(temp) == 0 else temp[-1]\n        temp.append(i)\n    temp = list()\n    for i in range(n - 1, - 1, - 1):\n        while len(temp) > 0 and h[temp[-1]] >= h[i]: temp.pop(-1)\n        smallertorightindex[i] = n if len(temp) == 0 else temp[-1]\n        temp.append(i)\n    res = [0] * (n + 1)\n    for i in range(n):\n        nums = smallertorightindex[i] - smallertoleftindex[i] - 1\n        res[nums] = max(res[nums], h[i])\n    for i in range(n - 1, 0, -1): res[i] = max(res[i], res[i + 1])\n    print(' '.join(map(str, res[1:])))\n\ndef prt(l): return print(''.join(l))\ndef rv(): return map(int, input().split())\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "import sys\n\ndef solve():\n    n, = rv()\n    h, = rl(1)\n    smallertoleftindex = [-1] * n\n    smallertorightindex = [n] * n\n    temp = list()\n    for i in range(n):\n        while len(temp) > 0 and h[temp[-1]] >= h[i]: temp.pop(-1)\n        smallertoleftindex[i] = -1 if len(temp) == 0 else temp[-1]\n        temp.append(i)\n    temp = list()\n    for i in range(n - 1, - 1, - 1):\n        while len(temp) > 0 and h[temp[-1]] >= h[i]: temp.pop(-1)\n        smallertorightindex[i] = n if len(temp) == 0 else temp[-1]\n        temp.append(i)\n    res = [0] * (n + 1)\n    for i in range(n):\n        nums = smallertorightindex[i] - smallertoleftindex[i] - 1\n        res[nums] = max(res[nums], h[i])\n    for i in range(n - 1, 0, -1): res[i] = max(res[i], res[i + 1])\n    print(' '.join(map(str, res[1:])))\n\ndef prt(l): return print(''.join(l))\ndef rv(): return map(int, input().split())\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "n = int(input())\na = [0] + list(map(int,input().split())) + [0]\nr = [0] * (n + 1)\nst = [(0, 0)]\nfor i in range(1, n + 2):\n \twhile a[i] < st[-1][0]:\n  \t\tr[i - st[-2][1] - 1] = max(st[-1][0], r[i - st[-2][1] - 1])\n  \t\tst.pop()\n \tst.append((a[i], i))\nfor i in range(n): r[-i - 2] = max(r[-i - 2], r[-i - 1])\nprint(*r[1:]) ", "__author__ = 'kitkat'\nimport sys\n\n#sys.stdin = open(\"in.txt\")\nMAXN = int(2e5+10)\ntry:\n    while True:\n        S = [0] * MAXN\n        ans = [0] * MAXN\n        L = [0] * MAXN\n        R = [0] * MAXN\n        n = int(input())\n        val = list(map(int, input().split(\" \")))\n        top = -1\n        for i in range(n):\n            while ~top and val[i] <= val[S[top]]:\n                top -= 1\n            L[i] = S[top] if ~top else -1\n            top += 1\n            S[top] = i\n        top = -1\n        for i in range(n-1, -1, -1):\n            while ~top and val[i] <= val[S[top]]:\n                top -= 1\n            R[i] = S[top] if ~top else n\n            top += 1\n            S[top] = i\n        for i in range(n):\n            ans[R[i] - L[i] - 1] = max(ans[R[i] - L[i] - 1], val[i])\n        for i in range(n-1, 0, -1):\n            ans[i] = max(ans[i], ans[i+1])\n        for i in range(1, n+1):\n            sys.stdout.write('%d '%ans[i])\n        print(\"\")\nexcept EOFError:\n    pass\n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n", "# for _ in range(int(input())):\nn = int(input())\narr = list(map(int,input().split()))\nleft,right = [-1]*n,[n]*n\nans = [0]*n\nst = [0]\nfor i in range(1,n):\n    while st and arr[st[-1]]>=arr[i]:\n        st.pop()\n    if st: left[i] = st[-1]\n    st.append(i)\nst = [n-1]\nfor i in range(n-2,-1,-1):\n    while st and arr[st[-1]]>=arr[i]:\n        st.pop()\n    if st: right[i] = st[-1]\n    st.append(i)\nfor i in range(n):\n    ans[right[i]-left[i]-2] = max(ans[right[i]-left[i]-2],arr[i])\nans[0] = max(arr)\nans[-1] = min(arr)\nfor i in range(n-2,0,-1):\n    ans[i] = max(ans[i],ans[i+1])\nprint(\" \".join(map(str,ans)))", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n \n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n \n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n \n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n \n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n \n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n \n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n \n", "n=int(input())\nr=[0]*(n+1)\na=[0]*(n+1)\na[1:-1]=list(map(int,input().split()))\ns=[(0,0)]\nfor i in range(1,n+2):\n while a[i]<s[-1][0]:\n  r[i-s[-2][1]-1]=max(s[-1][0],r[i-s[-2][1]-1])\n  del s[-1]\n s+=[(a[i],i)]\nfor i in range(n): r[-i-2]=max(r[-i-2],r[-i-1])\nprint(' '.join(map(str,r[1:])))\n \n\n\n\n\n# Made By Mostafa_Khaled\n", "\n\nn = int(input().strip())\na=list(map(int,input().strip().split()))\n\nans=[0]*(n+1)\n\n#labirentin cevresine attigim 0lar gibi indexOut yememek icin\na=[0]+a+[0]\ns=[]\n\nfor index,value in enumerate(a):\n    #print('SS -> ',s)\n    #print('ANS -> ',ans,'\\n')\n    #buyuk oldukca devam et \n    while s and value<s[-1][0]:\n        ans[index-s[-2][1]-1]=max(s[-1][0],ans[index-s[-2][1]-1])\n        s.pop()\n    s.append((value,index))\n\n#print('SS -> ', s)\n#print('ANSS----',ans)\n\nans=ans[::-1]\nfor i in range(n):\n    ans[i+1]=max(ans[i+1],ans[i])\nans=ans[::-1]\nprint(' '.join(map(str,ans[1:])))\n\n\n\n\n\"\"\"\n\n10\n1 2 3 4 5 4 3 2 1 6\n\n3\n524125987 923264237 374288891\n\n\"\"\"", "n = list(map(int, input().split()))[0]\nlst = list(map(int, input().split()))\n\n\nsorted_index = sorted(range(n), key=lambda k: lst[k], reverse=True)\n\nlookup = [(0, 0)] * n\n\nres = []\nres_pos = 1\nfor index in sorted_index:\n    seq_len = lookup[index][0] + lookup[index][1] + 1\n    if seq_len >= res_pos:\n        step = seq_len - res_pos + 1\n        res += [lst[index]] * step\n        res_pos += step\n\n    step_back = lookup[index][0] + 1\n    if index - step_back >= 0:\n        lookup[index - step_back] = (lookup[index - step_back][0],\n                                     lookup[index - step_back][1] + 1 + lookup[index][1])\n\n    step_forward = lookup[index][1] + 1\n    if index + step_forward < n:\n        lookup[index + step_forward] = (lookup[index + step_forward][0] + 1 + lookup[index][0],\n                                        lookup[index + step_forward][1])\n\n\nres = list(map(str, res))\nprint(\" \".join(res))", "N = int(input())\na = list(map(int, input().split()))\nres = [0 for i in range(N+1)]\nst = [ (0, -1) ]\nfor ( i, hh ) in enumerate(a):\n    while st[-1][0] >= hh:\n        num = st[-1][0]\n        st.pop()\n        ll = i - st[-1][1] - 1\n        res[ll] = max(res[ll], num)\n\n    st.append( (hh, i) )\n\nwhile len(st) > 1 :\n    num = st[-1][0]\n    st.pop()\n    ll = N - st[-1][1] - 1\n    res[ll] = max(res[ll], num)\n\nfor i in range(N-1, 0, -1): \n    res[i] = max(res[i], res[i+1])\n\nprint(' '.join(map(str, res[1:])) )", "\nn=int(input())\na=[int(o) for o in input().split()]\nl=[-1]*n\nr=[(n)]*n\nstack=[]\nfor i in range(n):\n  #  print(stack)\n    while stack and a[stack[-1]]>=a[i]:\n        stack.pop()\n    if stack:\n        l[i]=stack[-1]\n    stack.append(i)\nstack=[]\nfor i in range(n-1,-1,-1):\n   # print(stack)\n    while stack and a[stack[-1]]>=a[i]:\n        stack.pop()\n    if stack:\n        r[i]=stack[-1]\n    stack.append(i)\nanswers=[min(a)]*n\n#print(l)\n#print(r)\n\nfor i in range(n):\n  #  print(r,l)\n    lw=r[i]-l[i]-2\n    #print(lw)\n    \n    answers[lw]=max(answers[lw],a[i])\n    \nans=min(a)\nanswers[0]=max(a)\nfor i in range(n-1,-1,-1):\n    ans=max(ans,answers[i])\n    answers[i]=ans\nprint(*answers)\n\n\n", "btqAIXPWRsBVCLo = int\nbtqAIXPWRsBVCLE = input\nbtqAIXPWRsBVCLp = list\nbtqAIXPWRsBVCLT = map\nbtqAIXPWRsBVCLN = range\nbtqAIXPWRsBVCLJ = max\nbtqAIXPWRsBVCLD = print\nbtqAIXPWRsBVCLy = str\nbtqAIXPWRsBVCLM = btqAIXPWRsBVCLo\nbtqAIXPWRsBVCLj = btqAIXPWRsBVCLE\nbtqAIXPWRsBVCLu = btqAIXPWRsBVCLp\nbtqAIXPWRsBVCLH = btqAIXPWRsBVCLT\nbtqAIXPWRsBVCLr = btqAIXPWRsBVCLN\nbtqAIXPWRsBVCLm = btqAIXPWRsBVCLJ\nbtqAIXPWRsBVCLa = btqAIXPWRsBVCLD\nbtqAIXPWRsBVCLf = btqAIXPWRsBVCLy\nn = btqAIXPWRsBVCLM(btqAIXPWRsBVCLj())\nr = [0]*(n+1)\na = [0]*(n+1)\na[1:-1] = btqAIXPWRsBVCLu(btqAIXPWRsBVCLH(btqAIXPWRsBVCLM,\n                                          btqAIXPWRsBVCLj().split()))\ns = [(0, 0)]\nfor i in btqAIXPWRsBVCLr(1, n+2):\n    while a[i] < s[-1][0]:\n        r[i-s[-2][1]-1] = btqAIXPWRsBVCLm(s[-1][0], r[i-s[-2][1]-1])\n        del s[-1]\n    s += [(a[i], i)]\nfor i in btqAIXPWRsBVCLr(n):\n    r[-i-2] = btqAIXPWRsBVCLm(r[-i-2], r[-i-1])\nbtqAIXPWRsBVCLa(' '.join(btqAIXPWRsBVCLH(btqAIXPWRsBVCLf, r[1:])))\n"]