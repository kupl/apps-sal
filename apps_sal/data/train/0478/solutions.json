["class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         a = set(nums)\n         a = sum(a)*3 - sum(nums)\n         return int(a/2)", "class Solution:\n     def singleNumber(self, nums):\n         return (3*sum(set(nums))-sum(nums))//2\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         ones, twos = 0, 0\n         for i in nums:\n             ones = ones ^ i & ~twos\n             twos = twos ^ i & ~ones\n         return ones\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         _dict = {}\n         for num in nums:\n             if num not in _dict:\n                 _dict[num] = 1\n             elif _dict[num] == 1:\n                 _dict[num] += 1\n             else:\n                 del _dict[num]\n         return list(_dict.keys())[0]", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         zero = 0\n         one = 0\n         \n         for num in nums:\n             one, zero = (one ^ (num & zero)) & ~(~zero & one & num), (zero ^ num) & ~(~zero & one & num)\n         return zero", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         ans = 0\n         for i in range(32):\n             count = 0\n             for num in nums:\n                 if ((num >> i) & 1):\n                     count += 1\n             ans |= ((count%3) << i)\n         if ans >= 2**31:\n             ans -= 2**32\n         return ans", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         a = b = 0\n         for c in nums:\n             a, b = a&~b&~c|~a&b&c, ~a&b&~c|~a&~b&c\n         return a|b", "class Solution:\n     def singleNumber(self, nums):\n         dict = {}\n         for i in nums:\n             if i in dict:\n                 dict[i] = dict[i] + 1\n             else:\n                 dict[i] = 1\n         for i in list(dict.keys()):\n             if dict[i] == 1:\n                 return i\n         return -1\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         if len(nums)<3: return nums[0]\n         for i in range(0,len(nums)-1,3):\n             if nums[i]!=nums[i+2]: return nums[i]\n         return nums[-1]", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         \n         seen = set([])\n         counts = {}\n         for num in nums:\n             if num in seen:\n                 counts[num] += 1\n             else:\n                 counts[num] = 1\n                 seen.add(num)\n         \n         for key in counts:\n             if counts[key] == 1:\n                 return key\n         \n         return 0", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         '''\n         dic = {}\n         for num in nums:\n             if num in dic and dic[num] == 2:\n                 del dic[num]\n             else:\n                 dic[num] = dic.get(num, 0) + 1\n         return [k for k in dic.keys()][0]\n         '''\n         #return (sum(set(nums))*3-sum(nums))//2\n         one, two = 0, 0\n         for num in nums:\n             one, two = (~two&one&~num)|(~two&~one&num), (two&~one&~num)|(~two&one&num)\n         return one\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         a = b = 0\n         for c in nums:\n             a, b = a&~b&~c|~a&b&c, ~a&b&~c|~a&~b&c\n         return b", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \"\"\"\n         count frequency of each element\n         \"\"\"\n         freq = {}\n         for num in nums: #store frequency of each element in the list\n             freq[num] = freq.get(num, 0) + 1\n         \n         for num, frequency in list(freq.items()):\n             if frequency == 1:\n                 return num\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         res = {}\n         for i in nums:\n             if str(i) not in res:\n                 res[str(i)] = 1\n             else:\n                 res[str(i)] +=1\n         for i in res:\n             if res[i]==1:\n                 return int(i)\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         counts = {}\n         for num in nums:\n             if num not in counts:\n                 counts[num] = 1\n             else:\n                 counts[num] += 1\n         for k, v in list(counts.items()):\n             if v == 1:\n                 return k\n", "class Solution:\n     def singleNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)==1:\n             return nums[0]\n         \n         seen=set()\n         \n         for a in nums:\n             if a not in seen:\n                 seen.add(a)\n         \n         s1 = sum(nums)\n         s2 = sum(seen)\n         \n         return int(s2 - (s1-s2)/2)"]