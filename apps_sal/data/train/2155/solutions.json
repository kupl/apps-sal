["def main():\n    n, m = list(map(int, input().split()))\n    aa = []\n    for _ in range(n):\n        row = list(map(int, input().split()))\n        row.append(0)\n        aa.append(row)\n    aa.append([0] * (m + 1))\n    d1, d2, d3, d4 = ([[0] * (m + 1) for _ in range(n + 1)] for _ in (1, 2, 3, 4))\n    for i in range(n):\n        for j in range(m):\n            d1[i][j] = max(d1[i - 1][j], d1[i][j - 1]) + aa[i][j]\n    for i in range(n):\n        for j in range(m - 1, -1, -1):\n            d2[i][j] = max(d2[i - 1][j], d2[i][j + 1]) + aa[i][j]\n    for i in range(n - 1, -1, -1):\n        for j in range(m):\n            d3[i][j] = max(d3[i + 1][j], d3[i][j - 1]) + aa[i][j]\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            d4[i][j] = max(d4[i + 1][j], d4[i][j + 1]) + aa[i][j]\n    print((max(\n        max(d1[i][j - 1] + d2[i - 1][j] + d3[i + 1][j] + d4[i][j + 1] for i in range(1, n - 1) for j in range(1, m - 1)),\n        max(d1[i - 1][j] + d2[i][j + 1] + d3[i][j - 1] + d4[i + 1][j] for i in range(1, n - 1) for j in range(1, m - 1)))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "'''input\n3 3\n100 100 100\n100 1 100\n100 100 100\n'''\n# again a coding delight\nfrom sys import stdin\n\n\ndef create_dp1(matrix, n, m):\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i - 1 >= 0:\n\t\t\t\tdp[i][j] = max(dp[i][j], matrix[i][j] + dp[i - 1][j])\n\t\t\tif j - 1 >= 0:\n\t\t\t\tdp[i][j] = max(dp[i][j], matrix[i][j] + dp[i][j - 1])\n\t\t\telif i - 1 < 0 and j - 1 < 0:\n\t\t\t\tdp[i][j] = matrix[i][j]\n\treturn dp\n\n\ndef create_dp2(matrix, n, m):\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tfor j in range(m - 1, -1, -1):\n\t\t\tif i + 1 < n:\n\t\t\t\tdp[i][j] = max(dp[i][j], matrix[i][j] + dp[i + 1][j])\n\t\t\tif j + 1 < m:\n\t\t\t\tdp[i][j] = max(dp[i][j], matrix[i][j] + dp[i][j + 1])\n\t\t\tif i + 1 >= n and j + 1 >= m:\n\t\t\t\tdp[i][j] = matrix[i][j]\n\treturn dp \n\n\ndef create_dp3(matrix, n, m):\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tfor j in range(m):\n\t\t\tif i + 1 < n:\n\t\t\t\tdp[i][j] = max(dp[i][j], matrix[i][j] + dp[i + 1][j])\n\t\t\tif j - 1 >= 0:\n\t\t\t\tdp[i][j] = max(dp[i][j], matrix[i][j] + dp[i][j - 1])\n\t\t\tif i + 1 >= n and j - 1 < 0:\n\t\t\t\tdp[i][j] = matrix[i][j]\n\treturn dp \n\n\ndef create_dp4(matrix, n, m):\n\tdp = [[0 for i in range(m)] for j in range(n)]\n\tfor i in range(n):\n\t\tfor j in range(m - 1, -1, -1):\n\t\t\tif i - 1 >= 0:\n\t\t\t\tdp[i][j] = max(dp[i][j], matrix[i][j] + dp[i - 1][j])\n\t\t\tif j + 1 < m:\n\t\t\t\tdp[i][j] = max(dp[i][j], matrix[i][j] + dp[i][j + 1])\n\t\t\tif i - 1 < 0 and j + 1 >= m:\n\t\t\t\tdp[i][j] = matrix[i][j]\n\treturn dp \n\n\n# main starts\nn, m = list(map(int, stdin.readline().split()))\nmatrix = []\nfor _ in range(n):\n\tmatrix.append(list(map(int, stdin.readline().split())))\n\ndp1 = create_dp1(matrix, n, m) # from 0, 0 to i, j\ndp2 = create_dp2(matrix, n, m) # from i, j to n, m\ndp3 = create_dp3(matrix, n, m) # from n, 1 to i, j\ndp4 = create_dp4(matrix, n, m) # from i, j to 1, m\n\ntotal = -float('inf')\nfor i in range(1, n - 1):\n\tfor j in range(1, m - 1):\n\t\tfirst = dp1[i - 1][j] + dp2[i + 1][j] + dp3[i][j - 1] + dp4[i][j + 1]\n\t\tsecond = dp1[i][j - 1] + dp2[i][j + 1] + dp3[i + 1][j] + dp4[i - 1][j]\n\t\ttotal = max(total, first, second)\nprint(total)", "R = lambda: map(int, input().split())\nn, m = R()\ng = [list() for i in range(n)]\nfor i in range(n):\n    g[i] = list(R())\ndp1, dp2, dp3, dp4 = ([[0] * (m + 1) for j in range(n + 1)] for i in range(4))\nfor i in range(n):\n    for j in range(m):\n        dp1[i][j] = g[i][j] + max(dp1[i - 1][j], dp1[i][j - 1])\n    for j in range(m - 1, -1, -1):\n        dp2[i][j] = g[i][j] + max(dp2[i - 1][j], dp2[i][j + 1])\nfor i in range(n - 1, -1, -1):\n    for j in range(m):\n        dp3[i][j] = g[i][j] + max(dp3[i + 1][j], dp3[i][j - 1])\n    for j in range(m - 1, -1, -1):\n        dp4[i][j] = g[i][j] + max(dp4[i + 1][j], dp4[i][j + 1])\nprint(max(max(dp1[i][j - 1] + dp2[i - 1][j] + dp3[i + 1][j] + dp4[i][j + 1], dp1[i - 1][j] + dp2[i][j + 1] + dp3[i][j - 1] + dp4[i + 1][j]) for j in range(1, m - 1) for i in range(1, n - 1)))", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nn, m = mints()\na = [0]*n\ndp1 = [0]*n\ndp2 = [0]*n\ndp3 = [0]*n\ndp4 = [0]*n\nfor i in range(n):\n\ta[i] = list(mints())\n\tdp1[i] = [0]*m\n\tdp2[i] = [0]*m\n\tdp3[i] = [0]*m\n\tdp4[i] = [0]*m\n\ndp1[0][0] = a[0][0]\ndp2[n-1][m-1] = a[n-1][m-1]\ndp3[n-1][0] = a[n-1][0]\ndp4[0][m-1] = a[0][m-1]\n'''\nfor i in range(1,n):\n\tdp1[i][0] = dp1[i-1][0] + a[i][0] # >>>>\nfor i in range(n-2,-1,-1):\n\tdp2[i][m-1] = dp2[i+1][m-1] + a[i][m-1] # <<<<\nfor i in range(n-2,-1,-1):\n\tdp3[i][0] = dp3[i+1][0] + a[i][0] # <<<<\nfor i in range(1,n):\n\tdp4[i][m-1] = dp4[i-1][m-1] + a[i][m-1] # >>>>\nfor i in range(1,m):\n\tdp1[0][i] = dp1[0][i-1] + a[0][i] # >>>>\nfor i in range(m-2,-1,-1):\n\tdp2[n-1][i] = dp2[n-1][i+1] + a[n-1][i] # <<<<\nfor i in range(1,m):\n\tdp3[n-1][i] = dp3[n-1][i-1] + a[n-1][i] # >>>>\nfor i in range(m-2,-1,-1):\n\tdp4[0][i] = dp4[0][i+1] + a[0][i] # >>>>\n'''\nfor i in range(0,n):\n\tfor j in range(0,m):\n\t\tz = 0\n\t\tif i-1 >= 0:\n\t\t\tz = dp1[i-1][j]\n\t\tif j-1 >= 0:\n\t\t\tz = max(z, dp1[i][j-1])\n\t\tdp1[i][j] = z + a[i][j]\n\t\t#dp1[i][j] = max(dp1[i-1][j], dp1[i][j-1]) + a[i][j]\nfor i in range(n-1,-1,-1):\n\tfor j in range(m-1,-1,-1):\n\t\tz = 0\n\t\tif i+1 < n:\n\t\t\tz = dp2[i+1][j]\n\t\tif j+1 < m:\n\t\t\tz = max(z, dp2[i][j+1])\n\t\tdp2[i][j] = z + a[i][j]\n\t\t#dp2[i][j] = max(dp2[i+1][j], dp2[i][j+1]) + a[i][j]\nfor i in range(n-1,-1,-1):\n\tfor j in range(0,m):\n\t\tz = 0\n\t\tif i+1 < n:\n\t\t\tz = dp3[i+1][j]\n\t\tif j-1 >= 0:\n\t\t\tz = max(z, dp3[i][j-1])\n\t\tdp3[i][j] = z + a[i][j]\n\t\t#dp3[i][j] = max(dp3[i+1][j], dp3[i][j-1]) + a[i][j]\nfor i in range(0,n):\n\tfor j in range(m-1,-1,-1):\n\t\tz = 0\n\t\tif i-1 >= 0:\n\t\t\tz = dp4[i-1][j]\n\t\tif j+1 < m:\n\t\t\tz = max(z, dp4[i][j+1])\n\t\tdp4[i][j] = z + a[i][j]\n\t\t#dp4[i][j] = max(dp4[i-1][j], dp4[i][j+1]) + a[i][j]\n'''for i in dp1:\n\tprint(i)\nprint()\nfor i in dp2:\n\tprint(i)\nprint()\nfor i in dp3:\n\tprint(i)\nprint()\nfor i in dp4:\n\tprint(i)\nprint()\n'''\nr = 0\nfor i in range(1,n-1):\n\tfor j in range(1,m-1):\n\t\tr = max(r, dp1[i-1][j] + dp2[i+1][j] + dp3[i][j-1] + dp4[i][j+1])\n\t\tr = max(r, dp1[i][j-1] + dp2[i][j+1] + dp3[i+1][j] + dp4[i-1][j])\n\t\t#print(r, i, j)\nprint(r)\n\n", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nn, m = mints()\na = [0]*n\ndp1 = [0]*n\ndp2 = [0]*n\ndp3 = [0]*n\ndp4 = [0]*n\nfor i in range(n):\n\ta[i] = list(mints())\n\tdp1[i] = [0]*m\n\tdp2[i] = [0]*m\n\tdp3[i] = [0]*m\n\tdp4[i] = [0]*m\n\ndp1[0][0] = a[0][0]\ndp2[n-1][m-1] = a[n-1][m-1]\ndp3[n-1][0] = a[n-1][0]\ndp4[0][m-1] = a[0][m-1]\nfor i in range(1,n):\n\tdp1[i][0] = dp1[i-1][0] + a[i][0] # >>>>\nfor i in range(n-2,-1,-1):\n\tdp2[i][m-1] = dp2[i+1][m-1] + a[i][m-1] # <<<<\nfor i in range(n-2,-1,-1):\n\tdp3[i][0] = dp3[i+1][0] + a[i][0] # <<<<\nfor i in range(1,n):\n\tdp4[i][m-1] = dp4[i-1][m-1] + a[i][m-1] # >>>>\nfor i in range(1,m):\n\tdp1[0][i] = dp1[0][i-1] + a[0][i] # >>>>\nfor i in range(m-2,-1,-1):\n\tdp2[n-1][i] = dp2[n-1][i+1] + a[n-1][i] # <<<<\nfor i in range(1,m):\n\tdp3[n-1][i] = dp3[n-1][i-1] + a[n-1][i] # >>>>\nfor i in range(m-2,-1,-1):\n\tdp4[0][i] = dp4[0][i+1] + a[0][i] # >>>>\nfor i in range(1,n):\n\tfor j in range(1,m):\n\t\tdp1[i][j] = max(dp1[i-1][j], dp1[i][j-1]) + a[i][j]\nfor i in range(n-2,-1,-1):\n\tfor j in range(m-2,-1,-1):\n\t\tdp2[i][j] = max(dp2[i+1][j], dp2[i][j+1]) + a[i][j]\nfor i in range(n-2,-1,-1):\n\tfor j in range(1,m):\n\t\tdp3[i][j] = max(dp3[i+1][j], dp3[i][j-1]) + a[i][j]\nfor i in range(1,n):\n\tfor j in range(m-2,-1,-1):\n\t\tdp4[i][j] = max(dp4[i-1][j], dp4[i][j+1]) + a[i][j]\nr = 0\nfor i in range(1,n-1):\n\tfor j in range(1,m-1):\n\t\tr = max(r, dp1[i-1][j] + dp2[i+1][j] + dp3[i][j-1] + dp4[i][j+1])\n\t\tr = max(r, dp1[i][j-1] + dp2[i][j+1] + dp3[i+1][j] + dp4[i-1][j])\nprint(r)\n\n", "n, m = list(map(int, input().split()))\ngym = [[0 for i in range(m+1)]]\nfor row in range(n):\n    gym.append([0] + list(map(int, input().split())))\n\nbToMid = [[0 for i in range(m+2)] for j in range(n+2)]\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        bToMid[i][j] = gym[i][j] + max(bToMid[i-1][j], bToMid[i][j-1])\nbToEnd = [[0 for i in range(m+2)] for j in range(n+2)]\nfor i in range(n, 0, -1):\n    for j in range(m, 0, -1):\n        bToEnd[i][j] = gym[i][j] + max(bToEnd[i+1][j], bToEnd[i][j+1])\naToMid = [[0 for i in range(m+2)] for j in range(n+2)]\nfor i in range(n, 0, -1):\n    for j in range(1, m+1):\n        aToMid[i][j] = gym[i][j] + max(aToMid[i+1][j], aToMid[i][j-1])\naToEnd = [[0 for i in range(m+2)] for j in range(n+2)]\nfor i in range(1, n+1):\n    for j in range(m, 0, -1):\n        aToEnd[i][j] = gym[i][j] + max(aToEnd[i-1][j], aToEnd[i][j+1])\n#print(bToMid[1][2], bToEnd[3][2], aToMid[2][1], aToEnd[2][3])\nbest = 0\nbestIJ = ()\nfor i in range(2, n):\n    for j in range(2, m):\n        best = max(best, bToMid[i][j-1]+bToEnd[i][j+1]+aToMid[i+1][j]+aToEnd[i-1][j])\n        best = max(best, bToMid[i-1][j]+bToEnd[i+1][j]+aToMid[i][j-1]+aToEnd[i][j+1])\n        bestIJ = (i, j)\nprint(best)\n#print(bestIJ)\n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/7/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\ndef solve(N, M, A):\n    dpa = [[0 for _ in range(M+2)] for _ in range(N+2)]\n    dpb = [[0 for _ in range(M+2)] for _ in range(N+2)]\n    dpc = [[0 for _ in range(M+2)] for _ in range(N+2)]\n    dpd = [[0 for _ in range(M+2)] for _ in range(N+2)]\n    \n    for r in range(1, N+1):\n        for c in range(1, M + 1):\n            dpa[r][c] = max(dpa[r-1][c], dpa[r][c-1]) + A[r][c]\n    \n    for r in range(N, 0, -1):\n        for c in range(M, 0, -1):\n            dpb[r][c] = max(dpb[r+1][c], dpb[r][c+1]) + A[r][c]\n    \n    for r in range(N, 0, -1):\n        for c in range(1, M+1):\n            dpc[r][c] = max(dpc[r+1][c], dpc[r][c-1]) + A[r][c]\n    \n    for r in range(1, N+1):\n        for c in range(M, 0, -1):\n            dpd[r][c] = max(dpd[r-1][c], dpd[r][c+1]) + A[r][c]\n\n    ans = 0\n    for r in range(2, N):\n        for c in range(2, M):\n            a = dpa[r][c-1] + dpb[r][c+1] + dpc[r+1][c] + dpd[r-1][c]\n            b = dpc[r][c-1] + dpd[r][c+1] + dpa[r-1][c] + dpb[r+1][c]\n            ans = max(ans, a, b)\n            \n    return ans\n\n\nN, M = map(int, input().split())\nA = [[0 for _ in range(M+2)]]\nfor i in range(N):\n    row = [0] + [int(x) for x in input().split()] + [0]\n    A.append(row)\nA.append([0 for _ in range(M+2)])\n\nprint(solve(N, M, A))", "n, m = list(map(int, input().strip().split()))\ndp1, dp2, dp3, dp4 = [[[0 for i in range(m+1)] for i in range(n+1)] for i in range(4)]\n\n# print(dp1)\n# print(dp2)\n# print(dp3)\n# print(dp4)\n\na = []\nfor i in range(n):\n    a.append(list(map(int, input().strip().split())))\n\nfor i in range(n):\n    for j in range(m):\n        dp1[i][j] = a[i][j] + max(dp1[i-1][j], dp1[i][j-1])\n\nfor i in range(n-1, -1, -1):\n    for j in range(m-1, -1, -1):\n        dp2[i][j] = a[i][j] + max(dp2[i+1][j], dp2[i][j+1])\n\nfor i in range(n-1, -1, -1):\n    for j in range(m):\n        dp3[i][j] = a[i][j] + max(dp3[i+1][j], dp3[i][j-1])\n\nfor i in range(n):\n    for j in range(m-1, -1, -1):\n        dp4[i][j] = a[i][j] + max(dp4[i-1][j], dp4[i][j+1])\n\n# print(\"#############\")\n\n# for i in dp1:\n#     print(i)\n# print(\"-----------\")\n\n# for i in dp2:\n#     print(i)\n# print(\"-----------\")\n\n# for i in dp3:\n#     print(i)\n# print(\"-----------\")\n\n# for i in dp4:\n#     print(i)\n\n# print(\"#############\")\n\nans = 0\nfor i in range(1,n-1):\n    for j in range(1, m-1):\n        ans = max(ans, dp1[i][j-1] + dp2[i][j+1] + dp3[i+1][j] + dp4[i-1][j], dp3[i][j-1] + dp4[i][j+1] + dp1[i-1][j] + dp2[i+1][j])\n        # print(dp1[i][j-1],dp2[i][j+1], dp3[i+1][j], dp4[i-1][j], dp3[i][j-1], dp4[i][j+1], dp1[i+1][j], dp2[i-1][j])\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n", "from sys import stdin,stdout\nimport sys\nfrom bisect import bisect_left,bisect_right\nimport heapq\nsys.setrecursionlimit(2*(10**5))\n\n# stdin = open(\"input.txt\", \"r\");\n# stdout = open(\"output.txt\", \"w\");\n\nn,m=stdin.readline().strip().split(' ')\nn,m=int(n),int(m)\n\ncostarr=[]\nfor i in range(n):\n\tcostarr.append(list(map(int,stdin.readline().strip().split(' '))))\n\n\n\n\ndp_tl_br=[[0 for i in range(m)] for j in range(n)]\ndp_br_tl=[[0 for i in range(m)] for j in range(n)]\ndp_bl_tr=[[0 for i in range(m)] for j in range(n)]\ndp_tr_bl=[[0 for i in range(m)] for j in range(n)]\n\n#\tTOP LEFT TO BOTTOM RIGHT COST\ndp_tl_br[0][0]=costarr[0][0]\nfor i in range(1,m):\n\tdp_tl_br[0][i]=dp_tl_br[0][i-1]+costarr[0][i]\nfor i in range(1,n):\n\tdp_tl_br[i][0]=dp_tl_br[i-1][0]+costarr[i][0]\nfor i in range(1,n):\n\tfor j in range(1,m):\n\t\tdp_tl_br[i][j]=max(dp_tl_br[i][j-1],dp_tl_br[i-1][j])+costarr[i][j]\n\n\n#\tBOTTOM RIGHT TO TOP LEFT COST\ndp_br_tl[n-1][m-1]=costarr[n-1][m-1]\nfor i in range(m-2,-1,-1):\n\tdp_br_tl[n-1][i]=dp_br_tl[n-1][i+1]+costarr[n-1][i]\nfor i in range(n-2,-1,-1):\n\tdp_br_tl[i][m-1]=dp_br_tl[i+1][m-1]+costarr[i][m-1]\nfor i in range(n-2,-1,-1):\n\tfor j in range(m-2,-1,-1):\n\t\tdp_br_tl[i][j]=max(dp_br_tl[i][j+1],dp_br_tl[i+1][j])+costarr[i][j]\n\n\n#\tBOTTOM LEFT TO TOP RIGHT COST\ndp_bl_tr[n-1][0]=costarr[n-1][0]\nfor i in range(1,m):\n\tdp_bl_tr[n-1][i]=dp_bl_tr[n-1][i-1]+costarr[n-1][i]\nfor i in range(n-2,-1,-1):\n\tdp_bl_tr[i][0]=dp_bl_tr[i+1][0]+costarr[i][0]\nfor i in range(n-2,-1,-1):\n\tfor j in range(1,m):\n\t\tdp_bl_tr[i][j]=max(dp_bl_tr[i][j-1],dp_bl_tr[i+1][j])+costarr[i][j]\n\n\n#\tTOP RIGHT TO BOTTOM LEFT COST\ndp_tr_bl[0][m-1]=costarr[0][m-1]\nfor i in range(m-2,-1,-1):\n\tdp_tr_bl[0][i]=dp_tr_bl[0][i+1]+costarr[0][i]\nfor i in range(1,n):\n\tdp_tr_bl[i][m-1]=dp_tr_bl[i-1][m-1]+costarr[i][m-1]\nfor i in range(1,n):\n\tfor j in range(m-2,-1,-1):\n\t\tdp_tr_bl[i][j]=max(dp_tr_bl[i][j+1],dp_tr_bl[i-1][j])+costarr[i][j]\n\n\n\ndef sh(arr):\n\tfor i in arr:\n\t\tprint(i)\n\n# sh(dp_tr_bl)\n# print()\n\n# sh(dp_tl_br)\n# print()\n\n# sh(dp_bl_tr)\n# print()\n\n# sh(dp_br_tl)\n# print()\n\nans=0\n\nfor i in range(1,n-1):\n\tfor j in range(1,m-1):\n\t\tans=max(ans,dp_bl_tr[i][j-1]+dp_tr_bl[i][j+1]+dp_tl_br[i-1][j]+dp_br_tl[i+1][j])#\tLEFT TO RIGHT | DOWN TO UP\n\t\tans=max(ans,dp_bl_tr[i+1][j]+dp_tr_bl[i-1][j]+dp_tl_br[i][j-1]+dp_br_tl[i][j+1])# DOWN TO UP | LEFT TO RIGHT\n# for i in range(1,n-2):\n# \tfor j in range(m):\n# \t\tans+=max(ans,dp_tl_br[i-1][j]+costarr[i][j]+dp_br_tl[i+1][j]+dp_bl_tr[i+1][j]+costarr[i][j]+dp_tr_bl[i-1][j])\n\nstdout.write(str(ans)+\"\\n\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "n,m=map(int,input().split())\na=[]\nfor i in range(n):a.append(list(map(int,input().split())))\ndpa=[[[0,0] for i in range(m+2)] for i in range(n+2)]\ndpb=[[[0,0] for i in range(m+2)] for i in range(n+2)]\nans=0\nfor i in range(1,n+1):\n\tfor j in range(1,m+1):\n\t\tdpa[i][j][0]=max(dpa[i-1][j][0],dpa[i][j-1][0])+a[i-1][j-1]\n\t\tdpa[n+1-i][m+1-j][1]=max(dpa[n+2-i][m+1-j][1],dpa[n+1-i][m+2-j][1])+a[n-i][m-j]\nfor i in range(n,0,-1):\n\tfor j in range(1,m+1):\n\t\tdpb[i][j][0]=max(dpb[i+1][j][0],dpb[i][j-1][0])+a[i-1][j-1]\n\t\tdpb[n+1-i][m+1-j][1]=max(dpb[n-i][m+1-j][1],dpb[n+1-i][m+2-j][1])+a[n-i][m-j]\nfor i in range(2,n):\n\tfor j in range(2,m):\n\t\tx=dpa[i-1][j][0]+dpa[i+1][j][1]+dpb[i][j-1][0]+dpb[i][j+1][1]\n\t\ty=dpb[i+1][j][0]+dpb[i-1][j][1]+dpa[i][j-1][0]+dpa[i][j+1][1]\n\t\tans=max(ans,x,y)\nprint(ans)", "R = lambda: map(int, input().split())\nn, m = R()\ng = [list() for i in range(n)]\nfor i in range(n):\n    g[i] = list(R())\ndp1, dp2, dp3, dp4 = ([[0] * (m + 1) for j in range(n + 1)] for i in range(4))\nfor i in range(n):\n    for j in range(m):\n        dp1[i][j] = g[i][j] + max(dp1[i - 1][j], dp1[i][j - 1])\n    for j in range(m - 1, -1, -1):\n        dp2[i][j] = g[i][j] + max(dp2[i - 1][j], dp2[i][j + 1])\nfor i in range(n - 1, -1, -1):\n    for j in range(m):\n        dp3[i][j] = g[i][j] + max(dp3[i + 1][j], dp3[i][j - 1])\n    for j in range(m - 1, -1, -1):\n        dp4[i][j] = g[i][j] + max(dp4[i + 1][j], dp4[i][j + 1])\nprint(max(max(dp1[i][j - 1] + dp2[i - 1][j] + dp3[i + 1][j] + dp4[i][j + 1], dp1[i - 1][j] + dp2[i][j + 1] + dp3[i][j - 1] + dp4[i + 1][j]) for j in range(1, m - 1) for i in range(1, n - 1)))", "import sys\ninput=sys.stdin.readline\nR = lambda: map(int, input().split())\nn, m = R()\ng = [list() for i in range(n)]\nfor i in range(n):\n    g[i] = list(R())\ndp1, dp2, dp3, dp4 = ([[0] * (m + 1) for j in range(n + 1)] for i in range(4))\nfor i in range(n):\n    for j in range(m):\n        dp1[i][j] = g[i][j] + max(dp1[i - 1][j], dp1[i][j - 1])\n    for j in range(m - 1, -1, -1):\n        dp2[i][j] = g[i][j] + max(dp2[i - 1][j], dp2[i][j + 1])\nfor i in range(n - 1, -1, -1):\n    for j in range(m):\n        dp3[i][j] = g[i][j] + max(dp3[i + 1][j], dp3[i][j - 1])\n    for j in range(m - 1, -1, -1):\n        dp4[i][j] = g[i][j] + max(dp4[i + 1][j], dp4[i][j + 1])\nprint(max(max(dp1[i][j - 1] + dp2[i - 1][j] + dp3[i + 1][j] + dp4[i][j + 1], dp1[i - 1][j] + dp2[i][j + 1] + dp3[i][j - 1] + dp4[i + 1][j]) for j in range(1, m - 1) for i in range(1, n - 1)))", "\nfrom collections import defaultdict\ndef solve():\n\n    n,m = list(map(int,input().split()))\n    la = []\n    for i in range(n):\n        z = list(map(int,input().split()))\n        la.append(z)\n\n    dp1, dp2, dp3, dp4 = [[[0 for i in range(m+1)] for i in range(n+1)] for i in range(4)]\n\n    for i in range(n):\n        for j in range(m):\n            dp1[i][j] = la[i][j]\n            z1,z2 = 0,0\n            if i-1>=0:\n                z1 = dp1[i-1][j]\n            if j-1>=0:\n                z2 = dp1[i][j-1]\n\n            dp1[i][j]+=max(z1,z2)\n\n    for i in range(n-1,-1,-1):\n        for j in range(m):\n            dp2[i][j] = la[i][j]\n            z1,z2 = 0,0\n            if i+1<n:\n                z1 = dp2[i+1][j]\n            if j-1>=0:\n                z2 = dp2[i][j-1]\n\n            dp2[i][j]+=max(z1,z2)\n\n    for i in range(n-1,-1,-1):\n        for j in range(m-1,-1,-1):\n            dp3[i][j] = la[i][j]\n            z1,z2 = 0,0\n            if i+1<n:\n                z1 = dp3[i+1][j]\n            if j+1<m:\n                z2 = dp3[i][j+1]\n\n            dp3[i][j]+=max(z1,z2)\n\n    for i in range(n):\n        for j in range(m-1,-1,-1):\n            dp4[i][j] = la[i][j]\n            z1,z2 = 0,0\n            if i-1>=0:\n                z1 = dp4[i-1][j]\n            if j+1<m:\n                z2 = dp4[i][j+1]\n\n            dp4[i][j]+=max(z1,z2)\n\n    ans = 0\n    # print(dp1)\n    # print(dp2)\n    for i in range(1,n-1):\n        for j in range(1,m-1):\n            z1,z2,z3,z4 = dp1[i][j-1],dp2[i+1][j],dp3[i][j+1],dp4[i-1][j]\n\n            ans = max(z1+z2+z3+z4,ans)\n            z1,z2,z3,z4 = dp1[i-1][j],dp2[i][j-1],dp3[i+1][j],dp4[i][j+1]\n            ans = max(z1+z2+z3+z4,ans)\n\n\n\n            # print(ans)\n\n    print(ans)\n\n\n\n\n# t = int(stdin.readline())\n# for _ in range(t):\nsolve()\n"]