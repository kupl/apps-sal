["class Solution:\n    def longestDiverseString(self, a: int, b: int, c: int) -> str:\n        if a == 0 and b == 0 and c == 0:\n            return ''\n\n        res = ''\n\n        heap = [(-a, 'a'), (-b, 'b'), (-c, 'c')]\n        heapq.heapify(heap)\n        prev_val = 0\n        prev_char = ''\n\n        while heap:\n            v, char = heapq.heappop(heap)\n            if prev_val < 0:\n                heapq.heappush(heap, (prev_val, prev_char))\n\n            if abs(v) >= 2:\n                if abs(v) > abs(prev_val):\n                    res += char*2\n                    v += 2\n                else:\n                    res += char\n                    v += 1\n            elif abs(v) == 1:\n                res += char\n                v +=1\n            elif abs(v) == 0:\n                break\n\n            prev_val = v\n            prev_char = char\n\n        return res", "class Solution:\n    # https://leetcode.com/problems/longest-happy-string/discuss/564277/C%2B%2BJava-a-greater-b-greater-c\n    def longestDiverseString(self, a: int, b: int, c: int, charA = 'a', charB = 'b', charC = 'c') -> str:\n        if a<b: \n            return self.longestDiverseString(b, a, c, charB, charA, charC)\n        if b<c: \n            return self.longestDiverseString(a, c, b, charA, charC, charB)\n        # print(a, b, c, charA, charB, charC)\n        if b==0: \n            return min(a, 2)*charA \n        use_a = min(2, a)\n        use_b = 1 if a-use_a>=b else 0 \n        return charA*use_a + charB*use_b + self.longestDiverseString(a-use_a, b-use_b, c, charA, charB, charC)", "class Solution:\n    def longestDiverseString(self, a: int, b: int, c: int) -> str:\n        # \u66f4\u65b0\u521d\u59cb\u5b58\u91cf\uff0c\u6839\u636e\u63d2\u7a7a\u89c4\u5219\u4fee\u6b63\u5355\u4e2a\u5b57\u7b26\u6700\u5927\u53ef\u80fd\u7684\u6570\u91cf\n        d = {'a':min(a,2*(b+c+1)),'b':min(b,2*(a+c+1)),'c':min(c,2*(b+a+1))}\n        # \u4fee\u6b63\u540e\u7684\u6570\u91cf\u786e\u4fdd\u53ef\u4ee5\u5168\u90e8\u7528\u5728\u7ed3\u679c\u4e2d\uff0c\u6c42\u548c\u8ba1\u7b97\u5b57\u7b26\u4e32\u603b\u957f\n        n = sum(d.values())\n        # \u7ef4\u62a4\u7ed3\u679c\u5217\u8868\n        res = []\n        # \u5355\u6b21\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\uff0c\u6839\u636e\u957f\u5ea6\u5faa\u73af\n        for _ in range(n):\n            # \u5019\u9009\u7684\u5b57\u6bcd\n            cand = set(['a','b','c'])\n            # \u5982\u679c\u5217\u8868\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u6839\u636e\u89c4\u5219\u4e0d\u80fd\u63d2\u5165\u8fde\u7eed\u4e09\u4e2a\uff0c\u6545\u5c06\u8be5\u5b57\u7b26\u4ece\u5019\u9009\u4e2d\u5220\u9664\n            if len(res)>1 and res[-1]==res[-2]:\n                cand.remove(res[-1])\n            # \u8d2a\u5fc3\uff0c\u5728\u5019\u9009\u4e2d\u9009\u62e9\u5b58\u91cf\u6700\u5927\u7684\u5b57\u7b26\n            tmp = max(cand,key=lambda x:d[x])\n            # \u5c06\u5b83\u52a0\u5230\u7ed3\u679c\u91cc\n            res.append(tmp)\n            # \u628a\u5b83\u7684\u5269\u4f59\u8ba1\u6570\u51cf\u53bb1. \u5f00\u59cb\u4e0b\u4e00\u8f6e\n            d[tmp] -= 1\n        return ''.join(res)\n\n"]