["from math import sqrt\nn = int(input())\nk = int(sqrt(n))\nb = []\nlast = 0\nwhile last < n:\n    b.append([last + j for j in range(k)])\n    last = b[-1][-1] + 1\nk = len(b)\nfor i in range(k - 1, -1, -1):\n    for j in b[i]:\n        if j < n:\n            print(1 + j, end=' ')\nprint()\n", "import math\n\nn = int(input())\nm = math.ceil(math.sqrt(n))\nans = []\nfor k in range(m):\n    s = min((k + 1) * m, n)\n    t = k * m\n    ans.extend(list(range(s, t, -1)))\nprint(*ans)\n", "n = int(input())\n\nb = int(n ** 0.5)\n\nans = []\nfor i in range(0, n, b):\n    ans = [j for j in range(i + 1, min(i + 1 + b, n + 1))] + ans\n\nprint(*ans)\n", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept ModuleNotFoundError:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\n\nfor i in range(N+20):\n    if i*i >N:\n        break\n\nx = i-1\nif x*x !=N:\n    x+=1\ndprint(x)\n\nt = N//x\n\nres = []\nfor i in range(N- t*x):\n    res.append(t*x+i+1)\n\nfor i in range(t-1,-1, -1):\n    for j in range(x):\n        res.append(i*x + j+1)\n\nfor x in res:\n    print(x, end = ' ')\n\n\n\n\n\n\n\n", "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn = ii()\nm = int(n ** 0.5)\n\na = [0] * n\nc = 0\nfor i in range(10 ** 7):\n    s = min(n, m * (i + 1))\n    for j in range(m):\n        a[c] = s\n        s -= 1\n        c += 1\n        if c >= n: break\n    if c >= n: break\nprint(*a)\n", "import math\nn = int(input())\ntmp = int(math.sqrt(n))\nl, r = max(1, n-tmp+1), n\nwhile True:\n    for i in range(l, r+1):\n        print(i, end=' ')\n    if l == 1:\n        break\n    l, r = max(1, l-tmp), l-1\n", "import math\nn=int(input())\nif n<=3:\n    for i in range(1,n+1):\n        print(i,end=' ')\n    return\n\nstart=int(math.sqrt(n))\nsqrtVal=start\nalready=[False]*100005\n\nif True:\n    while start<=n:\n        for i in range(sqrtVal):\n            if already[start-i]:\n                return\n            print(start-i,end=' ')\n            already[start-i]=True\n        start+=sqrtVal\n        start=min(start,n)", "#list_int \u4e26\u3079\u3066\u51fa\u529b print (' '.join(map(str,ans_li)))\n#list_str \u4e26\u3079\u3066\u51fa\u529b print (' '.join(list))\n\nfrom collections import defaultdict\nimport sys,heapq,bisect,math,itertools,string,queue,datetime\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\nAtoZ = [chr(i) for i in range(65,65+26)]\natoz = [chr(i) for i in range(97,97+26)]\n\ndef inpl(): return list(map(int, input().split()))\ndef inpl_s(): return list(input().split())\n\nN = int(input())\nk = int(math.sqrt(N-1))+1\nans = []\nif N == 1:\n\tans = [1]\nelif N == 2:\n\tans = [2,1]\nelif N == 3:\n\tans = [2,3,1]\nelse:\n\twhile N > 0:\n\t\tli = []\n\t\tfor i in range(k):\n\t\t\tif N > 0:\n\t\t\t\tli.append(N)\n\t\t\tN -= 1\n\t\tli.reverse()\n\t\tans = ans + li\n\nprint(' '.join(map(str,ans)))\n", "import math\nn = int(input())\nwk1 = math.floor(math.sqrt(n))\nwk2 = n // wk1\nfor i in range(wk2 * (wk1), n):\n    print(i + 1, end = \" \")\nfor i in reversed(range(wk1)):\n    for j in range(wk2 * i, wk2 * (i + 1)):\n        print(j + 1, end = \" \")\nprint()", "USE_STDIO = False\n\nif not USE_STDIO:\n    try: import mypc\n    except: pass\n\ndef main():\n    n, = list(map(int, input().split(' ')))\n    q = int(n ** 0.5)\n    ans = [i for i in range(1, n+1)]\n    for i in range(0, n, q):\n        ans[i:i+q] = ans[i:i+q][::-1]\n    print(*ans)\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()", "3\n\nimport itertools\n\n\ndef main():\n    N = int(input())\n\n    bestv = 4 * N\n    besti = -1\n\n    for i in range(1, N + 1):\n        v = i + (N + i - 1) // i\n        if v < bestv:\n            bestv = v\n            besti = i\n\n    A = []\n    cur = N\n\n    if N % besti > 0:\n        a = [cur - j for j in range(N % besti)]\n        a.reverse()\n        A.append(a)\n        cur -= N % besti\n\n    while cur > 0:\n        a = [cur - j for j in range(besti)]\n        a.reverse()\n        A.append(a)\n        cur -= besti\n\n    print(*list(itertools.chain.from_iterable(A)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\n\nn=int(input())\nx=math.ceil(math.sqrt(n))\ny=n//x\n\n\nfor i in range(y):\n    for j in range(x,0,-1):\n        print(j+i*x,end=\" \")\n\nfor i in range(n,x*(y),-1):\n    print(i,end=\" \")\n\n\n\n\n", "from math import sqrt\n\nn = int(input())\n\nstep = int(sqrt(n))\nassert step**2 <= n and (step + 1)**2 > n\nans = []\nfor start in range(0, n, step):\n    ans.extend(range(start, min(n, start + step))[::-1])\nprint(' '.join(str(v + 1) for v in ans))", "from math import sqrt\nn = int(input())\nr = int(sqrt(n))\nans = []\nif n == 1:\n\tprint(\"1\")\nelif n == 2:\n\tprint(\"1 2\")\nelif n == 3:\n\tprint(\"1 3 2\")\nelif r ** 2 == n:\n\tfor i in range(r):\n\t\tans += [str((r - i - 1) * r + j) for j in range(1, r + 1)]\n\tprint(\" \".join(ans))\nelse:\n\tif n <= r * (r + 1):\n\t\tsegment = r\n\t\telement = r + 1\n\telse:\n\t\tsegment = r + 1\n\t\telement = r + 1\n\tfor i in range(segment - 1):\n\t\tans += [str(n - element * i - j) for j in range(element - 1, -1, -1)]\n\tans += [str(j) for j in range(1, n - element * (segment - 1) + 1)]\n\tprint(\" \".join(ans))", "n = int(input())\nimport math\nd = int(math.sqrt(n))\nfor i in range(n // d):\n    b = n - d * (i + 1) + 1\n    for i in range(d):\n        print(b, end = ' ')\n        b += 1\na = 1\nfor i in range(n - d * (n // d)):\n    print(a, end = ' ')\n    a += 1\n", "import math\nn = int(input())\nk = math.ceil(n**(0.5))\na = []\ni = 1\nwhile n - i*k > 0:\n    for j in range(1,k+1):\n        a.append(str(n - i*k + j))\n    i += 1\nfor l in range(1,n - (i-1)*k+1):\n    a.append(str(l))\nprint(\" \".join(a))", "n=int(input())\nmin1=1000000009\nid=0\ns=\"\"\nfor i in range(1,n+1):\n  m=(n+i-1)//i\n  if (m+i)<min1:\n    min1=m+i\n    id=i\na=[]\nfor i in range(n,0,-1):\n  a.append(i)\n  if(len(a)==id):\n    a.reverse()\n    for j in range(len(a)):\n      s+=str(a[j])+\" \"\n    a.clear()\nif(len(a)!=0):\n  a.reverse()\n  for j in range(len(a)):\n    s+=str(a[j])+\" \"\n  a.clear()\nprint(s)\n\n  \n  \n\n\n\n", "from math import sqrt\nn=int(input())\nk=int(sqrt(n))\nwhile(n):\n    if n>k-1:\n        for i in range(n-k+1,n+1):\n            print(i,end=' ')\n        n-=k\n    if n!=0 and n<k:\n        for i in range(1,n+1):\n            print(i,end=' ')\n        n=0\n  \n", "import math\nn=int(input())\na=math.sqrt(n)\nb=math.ceil(a)\na=math.floor(a)\nif n-a*a<=a:\n    for i in range(a):\n        for j in range(a):\n            print(a*(i+1)-j,end=' ')\n    if b>a:\n        k=n\n        while k>=a*a+1:\n            print(k,end=' ')\n            k-=1\nelse:\n    for i in range(a):\n        for j in range(b):\n            print(b*(i+1)-j,end=' ')\n    if b>a:\n        k=n\n        while k>=a*b+1:\n            print(k,end=' ')\n            k-=1", "from sys import stdin\nfrom math import *\n\nline = stdin.readline().rstrip().split()\nn = int(line[0])\nsizeG = int(floor(sqrt(n)))\ncantG = int(ceil(n/sizeG))\n\nfor i in range(cantG-1):\n    for j in range(sizeG, 0, -1):\n        print(j+i*sizeG,end=\" \")\nfor j in range(n, (cantG-1)*sizeG, -1):\n    print(j, end=\" \")\n\n#for i in range(int(n/2)):\n #   print((i+1)*2, end=\" \")\n#for i in range(int(n/2)):\n#    print((i+1)*2-1, end=\" \")\n#if n % 2==1:\n#    print(n)", "from math import ceil, floor\n\nn = int(input())\n\nk = floor(n ** .5)\ntmp = [[j for j in range(i, min(k + i, n + 1))] for i in range(k * (n // k) + 1, 0, -k)]\nanswer = []\nfor item in tmp:\n    answer += item\nprint(' '.join(str(item) for item in answer))\n", "from math import sqrt, ceil\nn = int(input())\n\nn_sqrt = int(ceil(sqrt(n)))\nans = []\ni = 1\nwhile i <= n:\n  ans = ans + list(range(i, min(i+n_sqrt, n+1)))[::-1]\n  i += n_sqrt\nprint(\" \".join(map(str, ans)))\n\n", "n = int(input())\n\nif n == 1:\n    print(1)\nelse:\n    chunkn = 2\n    ans = (n + 1) // 2 + 2\n    for curChunkn in range(3, n + 1):\n        chunk = n // curChunkn\n        curAns = chunk + curChunkn\n        if n % curChunkn > 0:\n            curAns += 1\n        \n        if curAns > ans:\n            break\n        ans = curAns\n        chunkn = curChunkn\n    \n    lim = n\n    left = n % chunkn\n    for i in range(chunkn):\n        start = lim - (n // chunkn) + 1\n        if left > 0:\n            left -= 1\n            start -=1\n        for j in range(start, lim + 1):\n            print(j, end=' ')\n        lim = start - 1\n        ", "import math\ndef listsum(l):\n  a = []\n  for i in l:\n    a = a+i\n  return a\n\nn = int(input())\nm = math.ceil(math.sqrt(n))\na = [\" \".join([str(m-i+x*m) for x in range(int((n-m+i)/m)+1)]) for i in range(m)]\nprint(\" \".join(a))", "import math\n\nn = int(input())\n\nt = range(1, n+1)\n\nsize = math.floor(math.sqrt(n))\nans = [list(t[i:i+size])[::-1] for i in range(0, n, size)]\n\nfor i in ans:\n    for j in i:\n        print(j,end=' ')\nprint(end='\\n')\n"]