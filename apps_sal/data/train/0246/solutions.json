["class Solution:\n     def replaceWords(self, dt, sentence):\n         \"\"\"\n         :type dict: List[str]\n         :type sentence: str\n         :rtype: str\n         \"\"\"\n         trie = {}\n         for w in dt:\n             t = trie\n             for c in w:\n                 if c not in t:  t[c] = {}\n                 t = t[c]\n             t['#'] = w\n             \n         # result = []\n         \n #         for word in sentence.split():\n #             result.append(self.replace(word, trie))\n         \n #         return \" \".joinresult \n     \n #     OR\n         return  \" \".join([ self.replace(i, trie) for i in sentence.split() ])\n     \n         \n         \n     \n     def replace( self, word, trie ):\n         cur = trie\n         for letter in word:\n             if letter not in cur: break\n             cur = cur[letter]\n             if \"#\" in cur:\n                 return cur['#']\n         return word\n         \n         \n         setenceAsList = sentence.split(\" \")\n         for i in range(len(setenceAsList)):\n             for j in dt:\n                 if setenceAsList[i].startswith(j):\n                     setenceAsList[i] = j\n         return \" \".join(setenceAsList)\n     \n         arrs = sentence.split()\n         for i in range(len(arrs)):\n             w = arrs[i]\n             for j in range(len(arrs[i])):\n                 cur = w[:j]\n                 if cur in dt:\n                     arrs[i] = cur\n                     break\n         return ' '.join(arrs)\n", "class Solution:\n     \n     def replaceWords(self, roots, sentence):\n         \n         # create a trie with roots words\n \n         trie = {}\n         for w in roots:\n             t = trie\n             for c in w:\n                 if c not in t:  t[c] = {}\n                 t = t[c]\n             t['#'] = True\n         # print(trie)\n #        result = []\n         return  \" \".join([ self.replace(i, trie) for i in sentence.split() ])\n     \n         \n         \n     \n     def replace( self, word, trie ):\n         cur = trie\n         i=0\n         for letter in word:\n             if letter not in cur: break\n             cur = cur[letter]\n             i+=1\n             if \"#\" in cur:\n                 return word[:i]\n         return word\n", "class Solution:\n     def replaceWords(self, dict, sentence):\n         \"\"\"\n         :type dict: List[str]\n         :type sentence: str\n         :rtype: str\n         \"\"\"\n         #O(NS) time; O(N) space\n         #constructing Trie using nested dictionary\n         \n         trie = {}\n         \n         #populate the Trie\n         for root in dict:\n             node = trie           \n             for letter in root:\n                 if letter not in node:\n                     node[letter] = {}\n                 node = node[letter]\n             node[\"#\"] = root \n             \n         #traverse the trie\n         words = []\n         for word in sentence.split():\n             node = trie\n             for letter in word:\n                 if letter not in node or \"#\" in node:\n                     break\n                 node = node[letter]\n             if \"#\" in node:\n                 words.append(node[\"#\"])\n             else:\n                 words.append(word)\n         return str.join(\" \",words)                    \n                 \n   \n \n                     \n", "class Solution:\n     def replaceWords(self, dict, sentence):\n         trie_tree = {'root': {}}\n         for word in dict:\n             parent = trie_tree['root']\n             for c in word + '#':\n                 parent.setdefault(c, {})\n                 parent = parent[c]\n         sentence, res = sentence.split(), []\n         for word in sentence:\n             parent = trie_tree['root']\n             for i, c in enumerate(word + '*'):\n                 if c not in parent:\n                     res.append(word)\n                     break\n                 parent = parent[c]\n                 if '#' in parent:\n                     res.append(word[:i + 1])\n                     break\n         return ' '.join(res)", "class Solution:\n     def replaceWords(self, dict, sentence):\n         \"\"\"\n         :type dict: List[str]\n         :type sentence: str\n         :rtype: str\n         \"\"\"\n         sentence = sentence + ' '\n         dic = {}\n         for i in dict:\n             if i[0] not in list(dic.keys()):\n                 dic[i[0]] = [i]\n             else:\n                 dic[i[0]].append(i)\n         res = ''\n         while len(sentence) > 0:\n             word = sentence[:sentence.index(' ')]\n             tmp = ''\n             if word[0] in list(dic.keys()):\n                 for refer in dic[word[0]]:\n                     if len(refer) < len(word):\n                         if word[:len(refer)] == refer:\n                             if tmp == '':\n                                 tmp = refer\n                             else:\n                                 if len(tmp) > len(refer):\n                                     tmp = refer\n             if tmp != '':\n                 res += tmp+' '\n             else:\n                 res += word+' '                     \n             sentence = sentence[sentence.index(' ')+1:]\n         res = res[:-1]\n         return res\n"]