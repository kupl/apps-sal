["def decompose(n):\n    total = 0\n    answer = [n]\n    while len(answer):\n        temp = answer.pop()\n        total += temp ** 2\n        for i in range(temp - 1, 0, -1):\n            if total - (i ** 2) >= 0:\n                total -= i ** 2\n                answer.append(i)\n                if total == 0:\n                    return sorted(answer)\n    return None", "def decompose(n, a=None):\n    if a == None: a = n*n\n    if a == 0: return []\n    for m in range(min(n-1, int(a ** .5)), 0, -1):\n        sub = decompose(m, a - m*m)\n        if sub != None: return sub + [m]", "import math\ndef decompose(n):\n    if n <= 4: return None\n    result = [n - 1]\n    remain = n ** 2 - (n - 1) ** 2\n    while True:\n        if not remain: return list(reversed(result))\n        if result[0] == 1: return None\n        if result[-1] == 1:\n            remain += result.pop() ** 2\n            result[-1] -= 1\n            remain += (result[-1] + 1) ** 2 - result[-1] ** 2\n        else:\n            i = min(result[-1] - 1, int(math.floor(math.sqrt(remain))))\n            result.append(i)\n            remain -= i ** 2", "import math\ndef decompose(n):\n    value = n-1\n    remains = n**2\n    cache = {value : remains}\n    remains -= value**2\n    \n    while remains:\n        value = int(math.sqrt(remains))\n        if value < min(cache.keys()):\n            cache[value] = remains\n            remains -= value**2\n        else:\n            del cache[min(cache.keys())]\n            if not cache: return None\n            value = min(cache.keys())\n            remains = cache.pop(value)\n            cache[value-1] = remains\n            remains -= (value-1)**2\n    return sorted(cache.keys())", "import math\n\ndef decompose_aux(nb, rac):\n    if (nb == 0):\n        return [] \n    i = rac\n    l = None\n    while (i >= int(math.sqrt(nb / 2.0)) + 1):\n        diff = nb - i * i\n        rac = int(math.sqrt(diff))\n        l = decompose_aux(diff, rac);\n        if l != None: \n            l.append(i)\n            return l\n        i -= 1\n    return l\n    \ndef decompose(n):\n    l = decompose_aux(n * n, int(math.sqrt(n * n - 1)))\n    if l != None:\n        return l \n    else:\n        return None", "def decompose(n):\n    # your code\n    def fun(s,i):\n      if s<0:return None\n      if s==0:return []\n      for j in range(i-1,0,-1):\n        some = fun(s-j**2,j)\n        if some!=None:\n          return some+[j]\n\n    return fun(n**2,n)", "def dec(r, d):\n    for i in range(d-1, 0, -1):\n        if r < i * i:\n            continue\n        if r == i * i:\n            return [i]\n        a = dec(r - i * i, i)\n        if a:\n            return a + [i]\n    return None\ndef decompose(n):\n    return  dec(n * n, n)", "def decompose(n):\n    return decompose_helper(n ** 2, n - 1)\n\n\ndef decompose_helper(n, end):\n    for i in range(end, 0, -1):\n        if i ** 2 == n:\n            return [i]\n\n        new = n - i ** 2\n        d = decompose_helper(new, min(i - 1, int(new ** 0.5)))\n        if d:\n            return d + [i]\n"]