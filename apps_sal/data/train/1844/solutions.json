["class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         if len(timePoints) > 1440: return 0\n         timeNum = [0] * len(timePoints)\n         for i in range(len(timePoints)):\n             timeNum[i] = 60 * int(timePoints[i][:2]) + int(timePoints[i][3:])\n             \n         timeNum.sort()\n         minMin = 24 * 60\n         for i in range(len(timeNum) - 1):\n             minMin = min(minMin, timeNum[i + 1] - timeNum[i])\n         minMin = min(minMin, 24 * 60 + timeNum[0] - timeNum[-1])\n         return minMin", "class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         for i in range(len(timePoints)):\n             t = timePoints[i]\n             h = ''\n             m = ''\n             deb = True\n             for j in range(len(t)):\n                 if t[j]==':':\n                     deb = False\n                 elif deb:\n                     h+=t[j]\n                 else:\n                     m+=t[j]\n             timePoints[i] = int(m) + 60*int(h)\n         \n         timePoints.sort()\n         print(timePoints)\n         mi = float(\"inf\")\n         for i in range(len(timePoints)-1):\n             diff = timePoints[i+1]-timePoints[i]\n             if diff<mi:\n                 mi = diff\n         last = (24*60-timePoints[-1])+timePoints[0]\n         if last<mi:\n             mi = last\n         return mi\n", "#\n # [539] Minimum Time Difference\n #\n # https://leetcode.com/problems/minimum-time-difference/description/\n #\n # algorithms\n # Medium (46.11%)\n # Total Accepted:    15.7K\n # Total Submissions: 34.1K\n # Testcase Example:  '[\"23:59\",\"00:00\"]'\n #\n # Given a list of 24-hour clock time points in \"Hour:Minutes\" format, find the\n # minimum minutes difference between any two time points in the list.\n #\n # Example 1:\n #\n # Input: [\"23:59\",\"00:00\"]\n # Output: 1\n #\n #\n #\n # Note:\n #\n # The number of time points in the given list is at least 2 and won't exceed\n # 20000.\n # The input time is legal and ranges from 00:00 to 23:59.\n #\n #\n #\n class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         exist = [False] * 1440\n         low, high = 1440, 0\n         for p in timePoints :\n             t = int(p[: 2]) * 60 + int(p[3 :])\n             if exist[t] :\n                 return 0\n             exist[t] = True\n             low, high = min(low, t), max(high, t)\n         diff = low + 1440 - high\n         left, right = low, low + 1\n         while left < high :\n             while right <= high and not exist[right] :\n                 right += 1\n             diff = min(diff, right - left)\n             left, right = right, right + 1\n         return diff\n", "class Solution:\n     def findMinDifference(self, timePoints):\n         timePoints = sorted(map(lambda x: [int(n) for n in x.split(':')], timePoints))\n         timePoints.append([timePoints[0][0] + 24, timePoints[0][1]])\n         res = float('inf')\n         for i in range(1, len(timePoints)):\n             diff = (timePoints[i][0] - timePoints[i - 1][0]) * 60 + (timePoints[i][1] - timePoints[i - 1][1])\n             if diff > 720:\n                 diff = 1440 - diff\n             res = min(res, diff)\n         return res", "class Solution:\n     def timetominute(self, time1):\n         t1 = int(time1[:2]) * 60 + int(time1[3:5])\n         return t1\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         count = 1440\n         for i in range(len(timePoints)):\n             timePoints[i] = self.timetominute(timePoints[i])\n         timePoints.sort(reverse = False)\n         print(timePoints)\n         for i in range(len(timePoints)):\n             if (timePoints[(i + len(timePoints)) % len(timePoints) - 1] - timePoints[(i + 1 + len(timePoints)) % len(timePoints) -1]) < 0:\n                 count = min(min((timePoints[(i + 1 + len(timePoints)) % len(timePoints) -1] - timePoints[(i + len(timePoints)) % len(timePoints) - 1]), (timePoints[(i + len(timePoints)) % len(timePoints) - 1] - (timePoints[(i + 1 + len(timePoints)) % len(timePoints) -1 ] ) + 1440)),count)\n             else:\n                 count = min(min((timePoints[(i + len(timePoints)) % len(timePoints) - 1] - timePoints[(i + 1 + len(timePoints)) % len(timePoints) -1]), (timePoints[(i + 1 + len(timePoints)) % len(timePoints) -1] - timePoints[(i + len(timePoints)) % len(timePoints) - 1] + 1440)),count)\n         return count\n", "class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         uniques = set()\n         for i in range(len(timePoints)):\n             timePoints[i] = int(timePoints[i][:2]) * 60 + int(timePoints[i][-2:])\n             if timePoints[i] in uniques:\n                 return 0\n             uniques.add(timePoints[i])\n         uniques.clear()\n         \n         timePoints.sort()\n         minimum = timePoints[0] + 24*60 - timePoints[-1]\n         for i in range(1,len(timePoints)):\n             temp = timePoints[i] - timePoints[i-1]\n             if temp < minimum:\n                 minimum = temp\n         return minimum", "class Solution:\n     def convertToInt(self, time):\n         hours = int(time.split(':')[0])\n         mins = int(time.split(':')[1])\n         return 60*hours+mins\n \n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         s = set()\n         for time in timePoints:\n             mins = self.convertToInt(time)\n             if mins in s:\n                 return 0\n             else:\n                 s.add(mins)\n         \n         result = 12*60\n         s = sorted(s)\n         N = len(s)\n         prev = s[N-1] - 24*60\n         for i in range(N):\n             if s[i] - prev < result:\n                 result = s[i] - prev\n             prev = s[i]\n         return result\n             \n             \n", "class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         s=[0]*1440\n         for c in timePoints:\n             t=(int(c[0])*10+int(c[1]))*60+int(c[3])*10+int(c[4])\n             if s[t]:\n                 return 0\n             s[t]=1\n         a=[]\n         for i in range(1440):\n             if s[i]==1:\n                 a.append(i)\n         m=a[0]+1440-a[-1]\n         for i in range(1,len(a)):\n             m=min(m,a[i]-a[i-1])\n         return m", "class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         def cv2mnt(t):\n             h,m = t.split(':')\n             mnt = int(h) * 60 + int(m)\n             return mnt\n         lst = [0 for i in range(1440)]\n         for t in timePoints:\n             mnt = cv2mnt(t)\n             if lst[mnt] == 1:\n                 return 0\n             else:\n                 lst[mnt] = 1\n         beg = 0\n         stk = [i for i,n in enumerate(lst) if n == 1]\n         stk.append(stk[0] + 1440)\n         res = 1439\n         for i in range(len(stk) - 1):\n             dif = abs(stk[i] - stk[i+1])\n             dif_ = min(1440 - dif, dif)\n             res = min(res,dif_)\n             if res == 1:\n                 return 1\n         return res\n", "def minDifference(minsA, minsB):\n     maxMins = 60 * 24\n     earlier = min(minsA, minsB)\n     later = max(minsA, minsB)\n     direct = later - earlier\n     loopAround = maxMins - later + earlier\n     return min(direct, loopAround)\n \n def toMinutes(timeString):\n     h = int(timeString.split(\":\")[0])\n     m = int(timeString.split(\":\")[1])\n     return m + h * 60\n \n class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         # timePoints.sort()\n         # currentMin = 60 * 24 + 1\n         # for i in range(-1, len(timePoints) - 1):\n         #     currentMin = min(currentMin, minDifference(toMinutes(timePoints[i]), toMinutes(timePoints[i+1])))\n         # return currentMin\n         minBuckets = [None] * (24 * 60)\n         for i in range(24 * 60):\n             minBuckets[i] = False\n             \n         for time in timePoints:\n             if minBuckets[toMinutes(time) - 1] == True:\n                 return 0\n             minBuckets[toMinutes(time) - 1] = True\n             \n         last = None\n         maxTime = 0\n         minTime = 24 * 60 + 1\n         minDistance = 24 * 60 + 1\n         for i in range(24 * 60):\n             if last == None and minBuckets[i] == True:\n                 first = i\n                 last = i\n             elif minBuckets[i] == True:\n                 minDistance = min(minDistance, i - last)\n                 last = i\n                 veryLast = i\n         minDistance = min(minDistance, 24 * 60 - veryLast + first)\n         return minDistance\n         \n         \n                 \n             ", "class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n \n         def get_minutes(time_point):\n             hour, minute = list(map(int, time_point.split(':')))\n             return 60 * hour + minute\n \n         minutes = sorted(map(get_minutes, timePoints))\n         minutes.append(60 * 24 + minutes[0])\n         return min(y - x for x, y in zip(minutes, minutes[1:]))\n", "class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         tlen = len(timePoints)\n         if tlen < 2: return 0\n         arr = [0] * tlen\n         for i in range(tlen):\n             h, m = timePoints[i].split(':')\n             arr[i] = int(h) * 60 + int(m)\n         arr.sort()\n         minx = float('inf')\n         for i in range(1, tlen):\n             if minx > arr[i] - arr[i - 1]:\n                 minx = arr[i] - arr[i - 1]\n         if minx > arr[0] + 24 * 60 - arr[-1]:\n             minx = arr[0] + 24 * 60 - arr[-1]\n         return minx", "# 17:06\n class Solution:\n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n \n         t = [int(y[0])*60 + int(y[1]) for x in timePoints for y in [x.split(\":\")]]   ## HH * 60 + MM\n         t = sorted(t)\n \n         t.append(t[0]+24*60)\n         print(t)\n         best = float(\"inf\")\n         for i in range(len(timePoints)):\n             best = min(best, (t[i+1]-t[i]))\n         return best\n # 17:10\n # 17:16 be careful of line 9: ... for y in [ ... ]; otherwise we will be looking at one number at a time\n # 17:18 should not do MOD 12 hours\n              ", "class Solution:\n     def to_minutes(self, timePoints): # if in place\n         ret_list = []\n         for hour in timePoints:\n             h, m = tuple(map(int, hour.split(':')))\n             \n             m += h*60\n             ret_list.append(m)\n         \n         return ret_list\n             \n             \n     def findMinDifference(self, timePoints):\n         \"\"\"\n         :type timePoints: List[str]\n         :rtype: int\n         \"\"\"\n         minutes_p = self.to_minutes(timePoints)\n         \n         minutes_p.sort()\n         \n         min_minutes = 1439 # distance from 00:00 to 23:59\n         for i in range(len(minutes_p)-1):\n             if i == 0:\n                 min_minutes = min(abs(minutes_p[i]-minutes_p[i-1]+1440),min_minutes)\n             min_minutes = min(min(abs(minutes_p[i]-minutes_p[i+1]), abs(1440-abs(minutes_p[i]-minutes_p[i+1]))), min_minutes)\n         \n         print(min_minutes)\n         return min_minutes\n             \n         \n"]