["class Solution:\n     def wiggleMaxLength(self, arr):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(arr)\n         if n < 2:\n             return n\n         wsl = [0]*n\n         wsl[0] = 1\n         for cur in range(1, n):\n             prev = cur - 1                \n             if arr[cur] > arr[prev] and wsl[prev] <= 1:\n                 wsl[cur] = abs(wsl[prev]) + 1\n             elif arr[cur] < arr[prev] and wsl[prev] > 0:\n                 wsl[cur] = (abs(wsl[prev]) + 1)*(-1)\n             else:\n                 wsl[cur] = wsl[prev]\n         return abs(wsl[n-1])", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         if n < 2: return n\n         prev_diff = nums[1] - nums[0]\n         count = 2 if prev_diff != 0 else 1\n         for i in range(2, n):\n             diff = nums[i] - nums[i-1]\n             if (diff > 0 and prev_diff <= 0) or (diff < 0 and prev_diff >= 0):\n                 count += 1\n                 prev_diff = diff\n         return count\n", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) < 2:\n             return len(nums)\n         \n         diffs = []\n         for i in range(1, len(nums)):\n             diffs.append(nums[i] - nums[i-1])\n             \n         prev_idx = 0\n         while diffs[prev_idx] == 0:\n             prev_idx += 1\n             if prev_idx == len(diffs):\n                 return 1 # all equal\n             \n         cnt = 2\n         for i in range(prev_idx + 1, len(diffs)):\n             if diffs[prev_idx] * diffs[i] < 0:\n                 cnt += 1\n                 prev_idx = i\n                 \n         return cnt\n", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         max_up = [1]\n         max_down = [1]\n         \n         for i in range(1, len(nums)):\n             if nums[i] > nums[i-1]:\n                 max_up.append(max_down[i-1]+1)\n                 max_down.append(max_down[i-1])\n             elif nums[i] < nums[i-1]:\n                 max_up.append(max_up[i-1])\n                 max_down.append(max_up[i-1]+1)\n             else:\n                 max_up.append(max_up[i-1])\n                 max_down.append(max_down[i-1])\n         return max(max_up[-1], max_down[-1])", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         l = len(nums)\n         dp = [0] * l\n         up = [0] * l\n         down = [0] * l\n         up[0] = down[0] = 1\n         for i in range(1, l):\n             if nums[i - 1] < nums[i]:\n                 up[i] = up[i - 1]\n                 down[i] = up[i - 1] + 1\n             elif nums[i - 1] > nums[i]:\n                 down[i] = down[i - 1]\n                 up[i] = down[i - 1] + 1\n             else:\n                 up[i] = up[i - 1]\n                 down[i] = down[i - 1]\n         return max(down[-1], up[-1])", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         if len(nums) == 1:\n             return 1\n         N = len(nums)\n         sol = [0 for _ in nums]\n         sol[0] = [1,1] #starting with -, starting with +\n         for i in range(1,N):\n             new = [0,0]\n             if nums[i] > nums[i-1]:\n                 new[0] = sol[i-1][1]+1\n             else:\n                 new[0] = sol[i-1][0]\n             if nums[i] < nums[i-1]:\n                 new[1] = sol[i-1][0]+1\n             else:\n                 new[1] = sol[i-1][1]\n             sol[i] = new\n         return max(sol[-1])\n             \n                 \n", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         if n == 0:\n             return 0\n         gn = [1] * n\n         trend = 0\n         for i in range(1, n):\n             prev = nums[i-1]\n             if prev == nums[i]:\n                 gn[i] = gn[i-1]\n             else:\n                 if trend == 0:\n                     gn[i] = gn[i-1] + 1\n                     trend = 1 if nums[i] > prev else -1\n                     continue\n                 if (nums[i] > prev and trend == -1) or (nums[i] < prev and trend == 1):\n                     gn[i] = gn[i-1] + 1\n                     trend = -trend\n                 else:\n                     gn[i] = gn[i-1]\n         return gn[-1]\n                     \n", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 0:\n             return 0\n         elif l == 1:\n             return 1\n         st = 1\n         while nums[0] == nums[st]:\n             st += 1\n             if st == l:\n                 return 1\n         one, two = (nums[0], nums[st])\n         cnt = 2\n         for i in range(st+1, l):\n             if nums[i] == two:\n                 continue\n             if one < two:\n                 if nums[i] > two:\n                     two = nums[i]\n                 else:\n                     one = two\n                     two = nums[i]\n                     cnt += 1\n             else:\n                 if nums[i] < two:\n                     two = nums[i]\n                 else:\n                     one = two\n                     two = nums[i]\n                     cnt += 1\n         return cnt", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if nums==[]:\n             return 0\n         if len(nums)<2:\n             return 1\n         max_length=1\n         state=0\n         i=1\n         while i<len(nums):\n             while state==0 and i<len(nums):\n                 if nums[i-1]>nums[i]:\n                     max_length=max_length+1\n                     state=2\n                 if nums[i-1]<nums[i]:\n                     max_length=max_length+1\n                     state=1\n                 i=i+1\n             while state==1 and i<len(nums):\n                 if nums[i-1]>nums[i]:\n                     max_length=max_length+1\n                     state=2\n                 i=i+1\n             while state==2 and i<len(nums):\n                 if nums[i-1]<nums[i]:\n                     state=1\n                     max_length=max_length+1\n                 i=i+1\n         return max_length\n                 \n                     \n", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         l = len(nums)\n         if l == 0:\n             return 0\n         elif l == 1:\n             return 1\n         st = 1\n         while nums[0] == nums[st]:\n             st += 1\n             if st == l:\n                 return 1\n         seq = [nums[0], nums[st]]\n         for i in range(st+1, l):\n             if nums[i] == seq[-1]:\n                 continue\n             if seq[-1] < seq[-2]:\n                 if nums[i] < seq[-1]:\n                     seq[-1] = nums[i]\n                 else:\n                     seq.append(nums[i])\n             else:\n                 if nums[i]>seq[-1]:\n                     seq[-1] = nums[i]\n                 else:\n                     seq.append(nums[i])\n         return len(seq)", "class Solution:\n     def wiggleMaxLength(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums = [nums[i] for i in range(len(nums)) if i == 0 or nums[i] != nums[i-1]]\n         print(nums)\n         total = min(2,len(nums))\n         for i in range(1,len(nums)-1):\n             if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                 total += 1\n             elif nums[i] < nums[i-1] and nums[i] < nums[i+1]:\n                 total += 1\n         return total"]