["class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        res = [1]\n        \n        while len(res) < N:\n            res = [i*2-1 for i in res]+ [i*2 for i in res]\n            \n        return [i for i in res if i <= N]", "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        nums = list(range(1, N+1))\n        \n        def helper(nums):\n            if len(nums) < 3:\n                return nums\n            odd = nums[::2]\n            even = nums[1::2]\n            return helper(even) + helper(odd)\n        return helper(nums)  \n", "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        result = list(range(1, N + 1))\n        def partition(i, j):\n            if j - i <= 2: return\n            result[i:j] = result[i:j:2] + result[i + 1:j:2]\n            m = i + (j - i + 1) // 2\n            partition(i, m)\n            partition(m, j)\n        \n        partition(0, N)\n        return result", "\nclass Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        def find_array(N: int, dic = defaultdict(list)) -> List[int]:\n            if dic[N]:\n                pass\n            elif N == 1:\n                dic[1] = [1]\n            else:\n                even_N = N // 2\n                odd_N = N - even_N\n                odd_temp = find_array(odd_N)\n                even_temp = find_array(even_N)\n                odd_temp = [2*i - 1 for i in odd_temp]\n                even_temp = [2*i for i in even_temp]\n                dic[N] = odd_temp + even_temp\n            return dic[N]\n        return find_array(N)", "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        r=[1]\n        while(len(r)<N):\n            o=[2*i-1 for i in r]\n            e=[2*(i) for i in r]\n            r=o+e\n        ans=[]\n        for i in range(len(r)):\n            if(r[i]<=N):\n                ans.append(r[i])\n        return ans\n        \n", "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        \n        res = [1]\n        \n        while len(res) < N:\n            tmp = []\n            for num in res:\n                if num * 2 - 1 <= N:\n                    tmp.append(num * 2 - 1)\n            for num in res:\n                if num * 2 <= N:\n                    tmp.append(num * 2)\n            res = tmp\n        \n        return res", "#https://www.cnblogs.com/grandyang/p/12287146.html\nclass Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        lst = [1]\n        while len(lst)<N:\n            tmp1 = [2*i-1 for i in lst ]\n            tmp2 = [2*i for i in lst]\n            tmp1.extend(tmp2)\n            lst = [i for i in tmp1 if i<=N]\n            # print (lst)\n        return lst\n", "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        nums=[]\n        for i in range(1,N+1):\n            nums.append(i)\n        def div(nums):\n            if len(nums)<3:\n                return nums\n            odd=nums[1::2]\n            even=nums[::2]\n            return div(even)+div(odd)\n        return div(nums)\n", "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        answers = []\n        \n        queue = [list(range(1, N + 1))]\n        while queue:\n            ls = queue.pop()\n            if len(ls) > 2:\n                odd = []\n                even = []\n                \n                for i, val in enumerate(ls):\n                    if i % 2:\n                        odd.append(val)\n                    else:\n                        even.append(val)\n                \n                queue.append(odd)\n                queue.append(even)\n            else:\n                answers += ls\n        \n        return answers", "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        return [i for i in [int('{:010b}'.format(i)[::-1], 2) for i in range(1, 1 << 10)] if i <= N]\n", "class Solution:\n    \n    def beautifulArray(self, N: int) -> List[int]:\n        self.N = N\n        self.rst = []\n        counter = 0\n        while N > 0:\n            N = N >> 1\n            counter += 1\n        self.tree = [0] * (2**(counter+1))\n#        print(len(self.tree))\n        self.tree[0] = 1\n        self.buildtree(0, 0)\n        self.traverse(0)\n        return self.rst\n        \n    def traverse(self, i):\n        if 2*i + 1 > len(self.tree) or self.tree[2*i + 1] == 0:\n            self.rst.append(self.tree[i])\n        else:\n            self.traverse(2*i+1)\n            self.traverse(2*i + 2)\n        \n    def buildtree(self, i, level):\n        if self.tree[i] + 2 ** level <= self.N:\n            self.tree[2*i + 1] = self.tree[i]\n            self.tree[2*i + 2] = self.tree[i] + 2**level\n            self.buildtree(2*i + 1, level + 1)\n            self.buildtree(2*i + 2, level + 1)", "class Solution:\n    def beautifulArray(self, N: int) -> List[int]:\n        res = [1]\n        while len(res) < N:\n            res = [i * 2 - 1 for i in res] + [i * 2 for i in res]\n        return [i for i in res if i <= N]"]