["n=int(input())\na=[]\nfor i in range(n):\n    a.append(list(map(int,input().split())))\nm=int(input())\nb=list(map(lambda x:int(x)-1,input().split()))\nc=[]\nnow=0\nk=0\nans=[]\nfor i in range(n):\n    t=a[i]\n    last=now\n    if t[0]==1:\n        now+=1\n        if len(c)<100000: c.append(t[1])\n        if k<m and b[k]==now-1: \n            ans.append(t[1])\n            k+=1\n    else:\n        now+=t[1]*t[2]\n        while t[2]:\n            if len(c)<100000: c.extend(c[:t[1]])\n            else: break\n            t[2]-=1\n        while k<m and last<=b[k]<now:\n            ans.append(c[(b[k]-last)%t[1]])\n            k+=1    \nfor i in range(m):\n    print(ans[i],end=' ')\n", "n=int(input())\na=[]\nfor i in range(n):\n\ta.append(list(map(int,input().split())))\nm=int(input())\nb=list([int(x)-1 for x in input().split()])\nc=[]\nnow=0\nk=0\nans=[]\nfor i in range(n):\n\tt=a[i]\n\tif t[0]==1:\n\t\tnow+=1\n\t\tif len(c)<100000: c.append(t[1])\n\t\tif k<m and b[k]==now-1: \n\t\t\tans.append(t[1])\n\t\t\tk+=1\n\telse:\n\t\tlast=now\n\t\tnow+=t[1]*t[2]\n\t\twhile t[2]:\n\t\t\tif len(c)<100000: c.extend(c[:t[1]])\n\t\t\telse: break\n\t\t\tt[2]-=1\n\t\twhile k<m and last<=b[k]<now:\n\t\t\tans.append(c[(b[k]-last)%t[1]])\n\t\t\tk+=1\t\nprint(' '.join(map(str,ans)))\n", "n=int(input())\na=[list(map(int,input().split())) for i in range(n)]\nm=int(input())\nb=list([int(x)-1 for x in input().split()])\nc=[]\nnow=0\nk=0\nans=[]\nfor i in range(n):\n\tt=a[i]\n\tif t[0]==1:\n\t\tnow+=1\n\t\tif len(c)<100000: c.append(t[1])\n\t\tif k<m and b[k]==now-1: \n\t\t\tans.append(t[1])\n\t\t\tk+=1\n\telse:\n\t\tlast=now\n\t\tnow+=t[1]*t[2]\n\t\twhile t[2]:\n\t\t\tif len(c)<100000: c.extend(c[:t[1]])\n\t\t\telse: break\n\t\t\tt[2]-=1\n\t\twhile k<m and last<=b[k]<now:\n\t\t\tans.append(c[(b[k]-last)%t[1]])\n\t\t\tk+=1\t\nprint(' '.join(map(str,ans)))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))", "# -*- coding: utf-8 -*-\nfrom bisect import bisect_left\n\nm = int(input())\nlines = []\nfor i in range(m):\n    lines.append(list(map(int, input().split())))\nn = int(input())\nlengths = list(map(int, input().split()))\n\n#size[i]\u8868\u793ai\u6307\u4ee4\u6267\u884c\u524d\u5df2\u7ecf\u79ef\u7d2f\u4e86\u591a\u957f\u7684\u4e32\nsizes = [0]\nfor l in lines:\n    sizes.append(sizes[-1] + (1 if l[0] == 1 else l[1]*l[2]))\n\nresult = {}\ndef find_number(l):\n    if l in result:\n        return result[l]\n    i = bisect_left(sizes, l) - 1\n    if lines[i][0] == 1:\n    #\u6b64\u65f6\u5fc5\u6709sizes[i+1] == l\n        result[l] = lines[i][1]\n        return result[l]\n    new_l = (l - sizes[i] - 1) % lines[i][1] + 1\n    result[new_l] = find_number(new_l)\n    return result[new_l]\n\nprint(' '.join([str(find_number(l)) for l in lengths]))\n", "# -*- coding: utf-8 -*-\nfrom bisect import bisect_left\n\nm = int(input())\nlines = []\nfor i in range(m):\n    lines.append(list(map(int, input().split())))\nn = int(input())\nlengths = list(map(int, input().split()))\n\n#size[i]\u8868\u793ai\u6307\u4ee4\u6267\u884c\u524d\u5df2\u7ecf\u79ef\u7d2f\u4e86\u591a\u957f\u7684\u4e32\nsizes = [0]\nfor l in lines:\n    sizes.append(sizes[-1] + (1 if l[0] == 1 else l[1]*l[2]))\n\nresult = {}\ndef find_number(l):\n    if l not in result:\n        i = bisect_left(sizes, l) - 1\n        result[l] = lines[i][1] if lines[i][0] == 1 else find_number((l - sizes[i] - 1) % lines[i][1] + 1)\n    return result[l]\n\nprint(' '.join([str(find_number(l)) for l in lengths]))\n", "# -*- coding: utf-8 -*-\nfrom bisect import bisect_left\n\nm = int(input())\nlines = []\nfor i in range(m):\n    lines.append(list(map(int, input().split())))\nn = int(input())\nlengths = list(map(int, input().split()))\n\n#acc_lengths[i]\u8868\u793ai\u6307\u4ee4\u6267\u884c\u4e4b\u524d\u5df2\u7ecf\u79ef\u7d2f\u4e86\u591a\u957f\u7684\u4e32\nacc_lengths = [0]\nfor l in lines:\n    acc_lengths.append(acc_lengths[-1] + (1 if l[0] == 1 else l[1]*l[2]))\n\nseq = []\nfor l in lines:\n    if l[0] == 1:\n        seq.append(l[1])\n    else:\n        for i in range(l[2]):\n            seq.extend(seq[:l[1]])\n            if len(seq) >= 10**5:\n                break\n    if len(seq) >= 10**5:\n        break\n            \ndef find_number(l):\n    if l <= len(seq):\n        return seq[l-1]\n    #seq[l-1]\u7531\u6307\u4ee4i\u751f\u6210\n    i = bisect_left(acc_lengths, l) - 1\n    return seq[(l - acc_lengths[i] - 1) % lines[i][1]]\n\nprint(' '.join([str(find_number(l)) for l in lengths]))\n", "# -*- coding: utf-8 -*-\nfrom bisect import bisect_left\n\nm = int(input())\nlines = []\nfor i in range(m):\n    lines.append(list(map(int, input().split())))\nn = int(input())\nlengths = list(map(int, input().split()))\n\n#acc_lengths[i]\u8868\u793ai\u6307\u4ee4\u6267\u884c\u4e4b\u524d\u5df2\u7ecf\u79ef\u7d2f\u4e86\u591a\u957f\u7684\u4e32\nacc_lengths = [0]\nfor l in lines:\n    acc_lengths.append(acc_lengths[-1] + (1 if l[0] == 1 else l[1]*l[2]))\n\nresult = {}\ndef find_number(l):\n    if l not in result:\n        i = bisect_left(acc_lengths, l) - 1\n        result[l] = lines[i][1] if lines[i][0] == 1 else find_number((l - acc_lengths[i] - 1) % lines[i][1] + 1)\n    return result[l]\n\nprint(' '.join([str(find_number(l)) for l in lengths]))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n", "from bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n", "# Made By Mostafa_Khaled \nbot = True \nfrom bisect import bisect_left\nm = int(input())\nt, s = [input().split() for i in range(m)], [0] * m\nl, n = 0, int(input())\nfor j, i in enumerate(t):\n    l += 1 if i[0] == '1' else int(i[1]) * int(i[2])\n    t[j], s[j] = l, i[1] if i[0] == '1' else int(i[1])\nF = {}\ndef f(i):\n    if not i in F:\n        k = bisect_left(t, i)\n        F[i] = s[k] if type(s[k]) == str else f((i - t[k] - 1) % s[k] + 1)\n    return F[i]\nprint(' '.join(f(i) for i in map(int, input().split())))\n\n\n# Made By Mostafa_Khaled\n", "from bisect import bisect_left\ndef fun(ind,alr,ll,sll):\n    if ind in alr:\n        return alr[ind]\n    k = bisect_left(sll,ind)\n    md = ll[k]\n    return fun((ind-sll[k])%md,alr,ll,sll)\npos = {}\nm = int(input())\nl = 0\ncp = []\ncpl = []\nknown = []\nfor _ in range(0,m):\n    q = [int(i) for i in input().split()]\n    if q[0] == 1:\n        pos[l] = q[1]\n        l += 1\n    else:\n        cp.append(q[1])\n        l += q[1]*q[2]\n        cpl.append(l)\nn = int(input())\nqq = [int(i)-1 for i in input().split()]\nans = [fun(i,pos,cp,cpl) for i in qq]\nprint(*ans)\n\n\n\n\n", "from bisect import bisect_left\ndef fun(ind,alr,ll,sll):\n    if ind in alr:\n        return alr[ind]\n    k = bisect_left(sll,ind)\n    md = ll[k]\n    return fun((ind-sll[k])%md,alr,ll,sll)\npos = {}\nm = int(input())\nl = 0\ncp = []\ncpl = []\nfor _ in range(0,m):\n    q = [int(i) for i in input().split()]\n    if q[0] == 1:\n        pos[l] = q[1]\n        l += 1\n    else:\n        cp.append(q[1])\n        l += q[1]*q[2]\n        cpl.append(l)\nn = int(input())\nqq = [int(i)-1 for i in input().split()]\nans = [fun(i,pos,cp,cpl) for i in qq]\nprint(*ans)\n\n\n\n\n", "m = int(input())\na, b, start, end = [], [], 0, 0\n\nidx = 0\n\nfor _ in range(m):\n    line = list(map(int, input().split()))\n    if line[0] == 1:\n        x = line[1]\n        start = end + 1\n        end = end + 1\n        if len(a) <= 100000:\n            a.append(x)\n        b.append((start, end, x))\n    else:\n        l, c = line[1], line[2]\n        start = end + 1\n        end = end + l * c\n        if len(a) <= 100000:\n            for _ in range(c):\n                a += a[:l]\n                if len(a) > 100000:\n                    break\n        b.append((start, end, l, c))\n\n\ninput()  # n\n\n\ndef answer(n):\n    nonlocal m, a, b, idx\n\n    if (n - 1) < len(a):\n        return a[n - 1]\n\n    while True:\n        bi = b[idx]\n        if bi[0] <= n <= bi[1]:\n            break\n        idx += 1\n\n    if len(bi) == 3:\n        return bi[2]\n\n    n_bak = n\n    n = (n - bi[0]) % bi[2] + 1\n\n    return a[n - 1]\n\n\nresult = []\nfor n in map(int, input().split()):\n    result.append(\"%s\" % answer(n))\n\nprint(\" \".join(result))\n"]