["class Solution:\n     def strongPasswordChecker(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         def length_requirement(password):\n             length = len(password)\n             # positive means addition, negative means deletion\n             if length < 6:\n                 return 6 - length\n             elif length > 20:\n                 return 20 - length\n             else:\n                 return 0\n \n \n         def category_requirement(password):\n             # input\n             string = set(password)\n             lowercase = set('qwertyuiopasdfghjklzxcvbnm')\n             uppercase = set('QWERTYUIOPASDFGHJKLZXCVBNM')\n             digit = set('1234567890')\n             condition = [lowercase, uppercase, digit]\n             # output positive for addition\n             missing = 0\n             for s in condition:\n                 if not s & string:\n                     missing += 1\n             return missing\n \n \n         def repeat_requirement(password):\n             # store the repeated character and counts its occurrence\n             count = 1\n             repeat = None\n             weak_pair = []\n             for c in password:\n                 if c == repeat:\n                     # the same character\n                     count += 1\n                 else:\n                     # new character\n                     if count >= 3:\n                         weak_pair.append([repeat, count])\n                     count = 1\n                     repeat = c\n             # add last pair\n             if count >= 3:\n                 weak_pair.append([repeat, count])\n             # length of 'aaaaaa' divide by 3 returns the time of change\n             change = 0\n             one = 0\n             two = 0\n             for _, length in weak_pair:\n                 change += length // 3\n                 if length % 3 == 0:\n                     one += 1\n                 elif length % 3 == 1:\n                     two += 1\n             return change, one, two\n \n \n         def minimum_change(password):\n             print(password, end=' ')\n             length = length_requirement(password)\n             category = category_requirement(password)\n             repeat, one, two = repeat_requirement(password)\n             # length: delete or insert\n             # category: insert or replace\n             # repeat: delete or replace, or insert\n             print(length, category, repeat, one, two, end=' * ')\n \n             # insert or replace is effective\n             if length >= 0:\n                 return max(length, category, repeat)\n             else:\n                 # delete required\n                 delete = - length\n                 repeat -= min(delete, one)\n                 repeat -= min(max(delete - one, 0), two * 2) // 2\n                 repeat -= max(delete - one - 2 * two, 0) // 3\n                 return delete + max(category, repeat)\n         \n         return minimum_change(s)\n         ", "class Solution:\n     def strongPasswordChecker(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         def length_requirement(password):\n             length = len(password)\n             # positive means addition, negative means deletion\n             if length < 6:\n                 return 6 - length\n             elif length > 20:\n                 return 20 - length\n             else:\n                 return 0\n \n \n         def category_requirement(password):\n             # input\n             string = set(password)\n             lowercase = set('qwertyuiopasdfghjklzxcvbnm')\n             uppercase = set('QWERTYUIOPASDFGHJKLZXCVBNM')\n             digit = set('1234567890')\n             condition = [lowercase, uppercase, digit]\n             # output positive for addition\n             missing = 0\n             for s in condition:\n                 if not s & string:\n                     missing += 1\n             return missing\n \n \n         def repeat_requirement(password):\n             # store the repeated character and counts its occurrence\n             count = 1\n             repeat = None\n             weak_pair = []\n             for c in password:\n                 if c == repeat:\n                     # the same character\n                     count += 1\n                 else:\n                     # new character\n                     if count >= 3:\n                         weak_pair.append([repeat, count])\n                     count = 1\n                     repeat = c\n             # add last pair\n             if count >= 3:\n                 weak_pair.append([repeat, count])\n             # length of 'aaaaaa' divide by 3 returns the time of change\n             change = 0\n             one = 0\n             two = 0\n             for _, length in weak_pair:\n                 change += length // 3\n                 if length % 3 == 0:\n                     one += 1\n                 elif length % 3 == 1:\n                     two += 1\n             return change, one, two\n \n \n         def minimum_change(password):\n             print(password, end=' ')\n             length = length_requirement(password)\n             category = category_requirement(password)\n             repeat, one, two = repeat_requirement(password)\n             # length: delete or insert\n             # category: insert or replace\n             # repeat: delete or replace, or insert\n             print(length, category, repeat, one, two, end=' * ')\n \n             # insert or replace is effective\n             if length >= 0:\n                 return max(length, category, repeat)\n             else:\n                 # delete required\n                 repeat -= min(-length, one)\n                 repeat -= min(max(-length - one, 0), two * 2) // 2\n                 repeat -= max(-length - one - 2 * two, 0) // 3\n \n                 return -length + max(category, repeat)\n         \n         return minimum_change(s)\n         "]