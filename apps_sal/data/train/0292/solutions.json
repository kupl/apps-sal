["# https://leetcode.com/problems/maximum-of-absolute-value-expression/discuss/340075/c%2B%2B-beats-100-(both-time-and-memory)-with-algorithm-and-image\nclass Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        N = len(arr1)\n        a = [arr1[i] + arr2[i] + i for i in range(N)]\n        b = [arr1[i] + arr2[i] - i for i in range(N)]\n        c = [arr1[i] - arr2[i] + i for i in range(N)]\n        d = [arr1[i] - arr2[i] - i for i in range(N)]\n        return max(\n            max(x) - min(x)\n            for x in (a, b, c, d)\n        )", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        A, B, C, D = [], [], [], []\n        # https://leetcode.com/problems/maximum-of-absolute-value-expression/discuss/340075/c++-beats-100-(both-time-and-memory)-with-algorithm-and-image \n        # much easier to understand.\n        # we need to break the four absolute value and reduce them. We can see there are 8 cases but only 4 cases. We generate 4 arrays and compute max() - min()\n        for i in range(len(arr1)):\n            x = arr1[i] + arr2[i] + i\n            y = arr1[i] - arr2[i] - i\n            z = arr1[i] + arr2[i] - i\n            t = arr1[i] - arr2[i] + i\n            A.append(x)\n            B.append(y)\n            C.append(z)\n            D.append(t)\n        \n        return max(list([max(x) - min(x) for x in [A, B, C, D]]))\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        points = list(zip(arr1, arr2, range(n)))\n        funcs = [lambda x, y, i: x + y + i,\n                 lambda x, y, i: x - y - i,\n                 lambda x, y, i: x - y + i,\n                 lambda x, y, i: x + y - i]\n        res = 0\n        for func in funcs:\n            temp = [func(*pt) for pt in points]\n            res = max(res, max(temp)-min(temp))\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        '''\n        |arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|\n        4 cases:\n        \n        1) arr1[i] > arr1[j] and arr2[i] < arr2[j]\n            remove abs\n            arr1[i] - arr1[j] + arr2[j] - arr2[i] + j - i\n            (arr1[i] - arr2[i] - i) - (arr1[j] - arr2[j] - j)\n            \n        2) arr1[i] > arr1[j] and arr2[i] > arr2[j]\n            remove abs\n            arr1[i] - arr1[j] + arr2[i] - arr2[j] + j - i\n            (arr1[i] + arr2[i] - i) - (arr1[j] + arr2[j] - j)\n            \n        3) arr1[i] < arr1[j] and arr2[i] < arr2[j]\n            remove abs\n            arr1[j] - arr1[i] + arr2[j] - arr2[i] + j - i\n            (arr1[j] + arr2[j] + j) - (arr1[i] + arr2[i] + i)\n            \n        4) arr1[i] < arr1[j] and arr2[i] > arr2[j]\n            remove abs\n            arr1[j] - arr1[i] + arr2[i] - arr2[j] + j - i\n            (arr1[j] - arr2[j] + j) - (arr1[i] - arr2[i] + i)\n        '''\n        max1 = max2 = max3 = max4 = float('-inf')\n        min1 = min2 = min3 = min4 = float('inf')\n        for i in range(0, len(arr1)):\n            tmp1 = arr1[i] - arr2[i] - i\n            max1 = max(max1, tmp1)\n            min1 = min(min1, tmp1)\n            \n            tmp2 = arr1[i] + arr2[i] - i\n            max2 = max(max2, tmp2)\n            min2 = min(min2, tmp2)\n            \n            tmp3 = arr1[i] + arr2[i] + i\n            max3 = max(max3, tmp3)\n            min3 = min(min3, tmp3)\n            \n            tmp4 = arr1[i] - arr2[i] + i\n            max4 = max(max4, tmp4)\n            min4 = min(min4, tmp4)\n        \n        return max(max1 - min1, max2 - min2, max3 - min3, max4 - min4)", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        ans=0\n        mn =10**7\n        mx=-10**7\n        mn1 =10**7\n        mx1=-10**7\n        mn2 =10**7\n        mx2=-10**7\n        mn3 =10**7\n        mx3=-10**7\n        for j in range(len(arr1)):\n            tmp = arr1[j] + arr2[j] + j\n            tmp1 = arr1[j] - arr2[j] + j\n            tmp2 = -arr1[j] + arr2[j] + j\n            tmp3 = -arr1[j] - arr2[j] + j\n            mn=min(mn,tmp)\n            mx=max(mx,tmp)\n            mn1=min(mn1,tmp1)\n            mx1=max(mx1,tmp1)\n            mn2=min(mn2,tmp2)\n            mx2=max(mx2,tmp2)\n            mn3=min(mn3,tmp3)\n            mx3=max(mx3,tmp3)\n            \n        return max((mx-mn),mx1-mn1,mx2-mn2,mx3-mn3)\n            \n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        # 1. arr1[i] - arr1[j] + arr2[i] - arr2[j] + i - j => ( arr1[i] + arr2[i] + i) - ( arr1[j] + arr2[j] + j)\n        # 2. arr1[i] - arr1[j] + arr2[i] - arr2[j] + j - i => ( arr1[i] + arr2[i] - i) - ( arr1[j] + arr2[j] - j)\n        # 3. arr1[i] - arr1[j] + arr2[j] - arr2[i] + i - j => ( arr1[i] - arr2[i] + i) - ( arr1[j] - arr2[j] + j)\n        # 4. arr1[i] - arr1[j] + arr2[j] - arr2[i] + j - i => ( arr1[i] - arr2[i] - i) - ( arr1[j] - arr2[j] - j)\n        # 5. arr1[j] - arr1[i] + arr2[i] - arr2[j] + i - j => (-arr1[i] + arr2[i] + i) - (-arr1[j] + arr2[j] + j)\n        # 6. arr1[j] - arr1[i] + arr2[i] - arr2[j] + j - i => (-arr1[i] + arr2[i] - i) - (-arr1[j] + arr2[j] - j)\n        # 7. arr1[j] - arr1[i] + arr2[j] - arr2[i] + i - j => (-arr1[i] - arr2[i] + i) - (-arr1[j] - arr2[j] + j)\n        # 8. arr1[j] - arr1[i] + arr2[j] - arr2[i] + j - i => (-arr1[i] - arr2[i] - i) - (-arr1[j] - arr2[j] - j)\n        # min1, max1 for arr1[i] + arr2[i] + i\n        # min2, max2 for arr1[i] + arr2[i] - i\n        # min3, max3 for arr1[i] - arr2[i] + i\n        # min4, max4 for arr1[i] - arr2[i] - i\n        min1 = min2 = min3 = min4 = float('inf')\n        max1 = max2 = max3 = max4 = float('-inf')\n        for i in range(len(arr1)):\n            s, d = arr1[i]+arr2[i], arr1[i]-arr2[i]\n            min1, max1 = min(min1, s+i), max(max1, s+i)\n            min2, max2 = min(min2, s-i), max(max2, s-i)\n            min3, max3 = min(min3, d+i), max(max3, d+i)\n            min4, max4 = min(min4, d-i), max(max4, d-i)\n        return max(max1-min1, max2-min2, max3-min3, max4-min4)\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        x, y, z, w = [], [], [], []\n        for i in range(len(arr1)):\n            x.append(arr1[i] + arr2[i] + i)\n            y.append(arr1[i] + arr2[i] - i)\n            z.append(arr1[i] - arr2[i] + i)\n            w.append(arr1[i] - arr2[i] - i)\n        \n        return max(map(lambda a: max(a) - min(a), (x,y,z,w)))", "class Solution:\n    def join(self, a: List[int], b: List[int], add=True, ascend=True):\n        arr = []\n        for i in range(len(a)):\n            if add:\n                arr.append(a[i] + b[i])\n            else:\n                arr.append(a[i] - b[i])\n            if ascend:\n                arr[i] += i\n            else:\n                arr[i] -= i\n        return arr\n        \n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        if not len(arr1):\n            return 0\n        mins, maxes = [], []\n        idx = []\n        for i, arr in enumerate([self.join(arr1, arr2, add, asc) for add, asc in [(True, True), (True, False), (False, True), (False, False)]]):\n            mins.append(arr[0])\n            maxes.append(arr[0])\n            idx.append((0, 0))\n            for j in range(1, len(arr)):\n                if arr[j] < mins[i]:\n                    mins[i] = arr[j]\n                    idx[i] = j, idx[i][1]\n                if arr[j] > maxes[i]:\n                    maxes[i] = arr[j]\n                    idx[i] = idx[i][0], j\n        largest_diff = float('-inf')\n        if (arr1[idx[0][0]] > arr1[idx[0][1]]) == (arr2[idx[0][0]] > arr2[idx[0][1]]) and idx[0][0] <= idx[0][1]:\n            largest_diff = maxes[0] - mins[0]\n        if (arr1[idx[1][0]] > arr1[idx[1][1]]) == (arr2[idx[1][0]] > arr2[idx[1][1]]) and idx[1][0] >= idx[1][1]:\n            largest_diff = max(largest_diff, maxes[1] - mins[1])\n        if (arr1[idx[2][0]] > arr1[idx[2][1]]) != (arr2[idx[2][0]] > arr2[idx[2][1]]) and idx[2][0] <= idx[2][1]:\n            largest_diff = max(largest_diff, maxes[2] - mins[2])\n        if (arr1[idx[3][0]] > arr1[idx[3][1]]) != (arr2[idx[3][0]] > arr2[idx[3][1]]) and idx[3][0] >= idx[3][1]:\n            largest_diff = max(largest_diff, maxes[3] - mins[3])\n        return largest_diff", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        #|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|\n        #j>i\n        #=max(arr1[j]-arr1[i]+arr2[j]-arr2[i]+j-i,\n        #     arr1[i]-arr1[j]+arr2[j]-arr2[i]+j-i,\n        #     arr1[j]-arr1[i]+arr2[i]-arr2[j]+j-i,\n        #     arr1[i]-arr1[j]+arr2[i]-arr2[j]+j-i)\n        #arrA=arr1+arr2\n        #arrB=arr2-arr1\n        #arrC=arr1-arr2\n        #arrD=-arr1-arr2\n        #arr?[j]-arr?[i]+j-i\n        #(arr?[j]+j)-(arr?[i]+i)\n        arrA=[0]*len(arr1)\n        arrC=[0]*len(arr1)\n        arrD=[0]*len(arr1)\n        arrB=[0]*len(arr1)\n        for i in range(len(arr1)):\n            arrA[i]=arr1[i]+arr2[i]+i\n            arrB[i]=-arr1[i]+arr2[i]+i\n            arrC[i]=arr1[i]-arr2[i]+i\n            arrD[i]=-arr1[i]-arr2[i]+i\n        minA=arrA[0]\n        minB=arrB[0]\n        minC=arrC[0]\n        minD=arrD[0]\n        res=0\n        for i in range(1,len(arrA)):\n            minA=min(minA,arrA[i])\n            minB=min(minB,arrB[i])\n            minC=min(minC,arrC[i])\n            minD=min(minD,arrD[i])\n            res=max(res,arrA[i]-minA,arrB[i]-minB,arrC[i]-minC,arrD[i]-minD)\n        return res\n        \n        \n        dic1A={}\n        dic2A={}\n        dic1A={}\n        dic2A={}\n        \n        dic2={}", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        # 1. arr1[i] - arr1[j] + arr2[i] - arr2[j] + i - j => ( arr1[i] + arr2[i] + i) - ( arr1[j] + arr2[j] + j)\n        # 2. arr1[i] - arr1[j] + arr2[i] - arr2[j] + j - i => ( arr1[i] + arr2[i] - i) - ( arr1[j] + arr2[j] - j)\n        # 3. arr1[i] - arr1[j] + arr2[j] - arr2[i] + i - j => ( arr1[i] - arr2[i] + i) - ( arr1[j] - arr2[j] + j)\n        # 4. arr1[i] - arr1[j] + arr2[j] - arr2[i] + j - i => ( arr1[i] - arr2[i] - i) - ( arr1[j] - arr2[j] - j)\n        # 5. arr1[j] - arr1[i] + arr2[i] - arr2[j] + i - j => (-arr1[i] + arr2[i] + i) - (-arr1[j] + arr2[j] + j)\n        # 6. arr1[j] - arr1[i] + arr2[i] - arr2[j] + j - i => (-arr1[i] + arr2[i] - i) - (-arr1[j] + arr2[j] - j)\n        # 7. arr1[j] - arr1[i] + arr2[j] - arr2[i] + i - j => (-arr1[i] - arr2[i] + i) - (-arr1[j] - arr2[j] + j)\n        # 8. arr1[j] - arr1[i] + arr2[j] - arr2[i] + j - i => (-arr1[i] - arr2[i] - i) - (-arr1[j] - arr2[j] - j)\n        # min1, max1 for arr1[i] + arr2[i] + i\n        # min2, max2 for arr1[i] + arr2[i] - i\n        # min3, max3 for arr1[i] - arr2[i] + i\n        # min4, max4 for arr1[i] - arr2[i] - i\n        min1 = min2 = min3 = min4 = float('inf')\n        max1 = max2 = max3 = max4 = float('-inf')\n        for i, [n1,n2] in enumerate(zip(arr1, arr2)):\n            min1, max1 = min(min1, n1+n2+i), max(max1, n1+n2+i)\n            min2, max2 = min(min2, n1+n2-i), max(max2, n1+n2-i)\n            min3, max3 = min(min3, n1-n2+i), max(max3, n1-n2+i)\n            min4, max4 = min(min4, n1-n2-i), max(max4, n1-n2-i)\n        return max(max1-min1, max2-min2, max3-min3, max4-min4)\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        res = 0\n        \n        for p, q in [(1, 1), (1, -1), (-1, 1), (-1, -1)]:\n            smallest = p * arr1[0] + q * arr2[0]\n            for i in range(n):\n                cur = p * arr1[i] + q * arr2[i] + i\n                res = max(cur - smallest, res)\n                smallest = min(smallest, cur)\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        a = [arr1[i] + arr2[i] + i for i in range(len(arr1))]\n        b = [arr1[i] + arr2[i] - i for i in range(len(arr1))]\n        c = [arr1[i] - arr2[i] + i for i in range(len(arr1))]\n        d = [arr1[i] - arr2[i] - i for i in range(len(arr1))]\n        return max(map(lambda x: max(x) - min(x), (a, b, c, d)))", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        vector = [(1,1),(-1,1),(1,-1),(-1,-1)]\n        res = 0\n        sm = float('inf')\n        for vec in vector:\n            p,q = vec\n            sm = float('inf')\n            for i in range(len(arr1)):\n                cur = p*arr1[i]+q*arr2[i]+i\n                res = max(res, cur-sm)\n                sm = min(cur, sm)\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        res, n = 0, len(arr1)\n        for p, q in [[1, 1], [1, -1], [-1, 1], [-1, -1]]:\n            smallest = p * arr1[0] + q * arr2[0] + 0\n            for i in range(n):\n                cur = p * arr1[i] + q * arr2[i] + i\n                res = max(res, cur - smallest)\n                smallest = min(smallest, cur)\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        a = [arr1[i] + arr2[i] - i for i in range(n)]\n        \n        mn = 10 ** 20\n        ans = 0\n        \n        for i in a[::-1]:\n            ans = max(ans, i - mn)\n            mn = min(mn, i)\n            \n        a = [arr1[i] - arr2[i] - i for i in range(n)]\n        \n        mn = 10 ** 20\n        \n        for i in a[::-1]:\n            ans = max(ans, i - mn)\n            mn = min(mn, i)\n            \n        a = [arr1[i] - arr2[i] + i for i in range(n)]\n        \n        mn = 10 ** 20\n        \n        for i in a:\n            ans = max(ans, i - mn)\n            mn = min(mn, i)\n            \n        a = [arr1[i] + arr2[i] + i for i in range(n)]\n        \n        mn = 10 ** 20\n        \n        for i in a:\n            ans = max(ans, i - mn)\n            mn = min(mn, i)\n        \n        return ans", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        D={}\n        a1,a2,a3,a4 = -2**31,-2**31,-2**31,-2**31\n        b1,b2,b3,b4=2**31,2**31,2**31,2**31\n        for i in range(len(arr1)):\n            t = arr1[i]+arr2[i]+i\n            a1 = max(a1,t)\n            b1 = min(b1,t)\n            t= arr1[i]+arr2[i]-i\n            a2 = max(a2,t)\n            b2 = min(b2,t)\n            t =arr1[i]-arr2[i]-i\n            a3 = max(a3,t)\n            b3 = min(b3,t)\n            t = arr1[i]-arr2[i]+i\n            a4 = max(a4,t)\n            b4 = min(b4,t)\n        \n        return max(a1-b1,a2-b2,a3-b3,a4-b4)", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        #fix i and test for j\n        \n        # count arr1 i, arr2 i, ind\n        minmin = []\n        minmax = []\n        maxmin = []\n        maxmax = []\n        res = 0\n        for i,(v1,v2) in enumerate(zip(arr1,arr2)):\n            \n                \n            if not minmin or minmin[0]-v1+minmin[1]-v2+minmin[2]-i>0:\n                minmin = [v1,v2,i]\n            if not minmax or minmax[0]-v1+v2-minmax[1]+minmax[2]-i>0:\n                minmax = [v1,v2,i]\n                \n            if not maxmin or v1-maxmin[0]+maxmin[1]-v2+maxmin[2]-i>0:\n                maxmin = [v1,v2,i]\n        \n            if not maxmax or v1-maxmax[0]+v2-maxmax[1]+maxmax[2]-i>0:\n                maxmax = [v1,v2,i]\n            res = max(res,v1-minmin[0]+v2-minmin[1]+i-minmin[2])\n            res = max(res,v1-minmax[0]+minmax[1]-v2+i-minmax[2])\n            res = max(res,maxmin[0]-v1+v2-maxmin[1]+i-maxmin[2])\n            res = max(res,maxmax[0]-v1+maxmax[1]-v2+i-maxmax[2])\n            #print(maxmax[0]-v1+maxmax[1]-v2+i-maxmin[2])\n        #print(minmin,minmax,maxmin,maxmax)    \n        return res", "class Solution:\n    def calc(self, a, b):\n        c = [ai+bi for ai, bi in zip(a, b)]\n        m = 10**18\n        res = 0\n        \n        for i in range(len(c)):\n            m = min(m, c[i]+i)\n            res = max(res, c[i]+i-m)\n            \n        return res\n    \n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        arr1_ = [-arr1_i for arr1_i in arr1]\n        arr2_ = [-arr2_i for arr2_i in arr2]\n        return max(self.calc(arr1, arr2), self.calc(arr1, arr2_), self.calc(arr1_, arr2), self.calc(arr1_, arr2_))", "#https://t123456ll.github.io/1131.%20Maximum%20of%20Absolute%20Value%20Expression.html\n\nclass Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        max1 = max2 = max3 = max4 = -math.inf\n        min1 = min2 = min3 = min4 = math.inf\n        for i in range(len(arr1)):\n            x = arr1[i]\n            y = arr2[i]\n            max1 = max(max1, x+y-i)\n            min1 = min(min1, x+y-i)\n            \n            max2 = max(max2, x-y-i)\n            min2 = min(min2, x-y-i)\n        \n            max3 = max(max3, -x+y-i)\n            min3 = min(min3, -x+y-i)\n                \n            max4 = max(max4, -x-y-i)\n            min4 = min(min4, -x-y-i)\n            \n        return max(max1-min1, max2-min2, max3-min3, max4-min4)\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        def expr(sign1, sign2, i):\n            return sign1*arr1[i]+sign2*arr2[i] + i\n\n        def diff(sign1, sign2):\n            max_ = max(expr(sign1, sign2, i) for i in range(len(arr1)))\n            min_ = min(expr(sign1, sign2, i) for i in range(len(arr1)))\n            return max_ - min_\n\n\n        return max(diff(sign1, sign2) for sign1, sign2 in [(1,1),(1,-1),(-1,1),(-1,-1)])\n\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        res, n = 0, len(arr1)\n        for x, y in ((1, 1), (1, -1), (-1, 1), (-1, -1)):\n            mini = x * arr1[0] + y * arr2[0]\n            for i in range(n):\n                temp = x * arr1[i] + y * arr2[i] + i\n                res = max(res, temp - mini)\n                mini = min(mini, temp)\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1, arr2) -> int:\n        res = 0\n        length = len(arr1)\n        for p, q in [(1,1),(-1,-1),(1,-1),(-1,1)]:\n            min_v = p*arr1[0] + q*arr2[0] + 0\n            for i in range(1, length):\n                v = p*arr1[i] + q*arr2[i] + i\n                res = max(res, v - min_v)\n                min_v = min(v, min_v)\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        ans =0\n        n = len(arr1)\n        for x, y in [[1,1],[1,-1],[-1,1],[-1,-1]]:\n            smallest = x*arr1[0] + y*arr2[0] + 0\n            for i in range(n):\n                cur = x*arr1[i] + y*arr2[i] + i\n                ans = max(ans, cur-smallest)\n                smallest = min(smallest, cur)\n        return ans\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        x, y = arr1, arr2\n        maxCase1 = maxCase2 = maxCase3 = maxCase4 = -float('inf')\n        minCase1 = minCase2 = minCase3 = minCase4 = float('inf')\n        for i in range(len(x)):\n            maxCase1 = max(maxCase1, x[i]+y[i]-i)\n            maxCase2 = max(maxCase2, x[i]-y[i]-i)\n            maxCase3 = max(maxCase3, -x[i]+y[i]-i)\n            maxCase4 = max(maxCase4, -x[i]-y[i]-i)\n            minCase1 = min(minCase1, x[i]+y[i]-i)\n            minCase2 = min(minCase2, x[i]-y[i]-i)\n            minCase3 = min(minCase3, -x[i]+y[i]-i)\n            minCase4 = min(minCase4, -x[i]-y[i]-i)\n        return max(maxCase1-minCase1, maxCase2-minCase2, maxCase3-minCase3, maxCase4-minCase4)", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        maxsize = 2147483647\n        min1 = maxsize \n        min2 = maxsize\n        max1 = -maxsize-1\n        max2 = -maxsize -1\n        min3 = maxsize \n        min4 = maxsize\n        max3 = -maxsize-1\n        max4 = -maxsize -1\n        \n        for i in range(len(arr1)):\n            min1 = min(min1, arr1[i]+arr2[i]+i)\n            max1 = max(max1, arr1[i]+arr2[i]+i)\n            min2 = min(min2, arr1[i]+arr2[i]-i)\n            max2 = max(max2, arr1[i]+arr2[i]-i)\n            min3 = min(min3, arr1[i]-arr2[i]+i)\n            max3 = max(max3, arr1[i]-arr2[i]+i)\n            min4 = min(min4, arr1[i]-arr2[i]-i)\n            max4 = max(max4, arr1[i]-arr2[i]-i)\n            \n        \n        result = max(max1-min1, max2-min2, max3-min3, max4-min4)\n        \n        return result \n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        mx = 0\n        for a in [1, -1]:\n            for b in [1, -1]:\n                sm = a*arr1[0] + b*arr2[0] + 0\n                for i in range(1, len(arr1)):\n                    v = a*arr1[i] + b*arr2[i] + i\n                    mx = max(mx, v - sm)\n                    sm = min(sm, v)\n        return mx", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        max1 = max2 = max3 = max4 = float('-inf')\n        min1 = min2 = min3 = min4 = float('inf')\n\n        for i in range(len(arr1)):\n            tmp1 = arr1[i] - arr2[i] - i\n            max1 = max(max1 , tmp1)\n            min1 = min(min1 , tmp1)\n\n            tmp2 = arr1[i] + arr2[i] - i\n            max2 = max(max2 , tmp2)\n            min2 = min(min2 , tmp2)\n\n            tmp3 = arr1[i] + arr2[i] + i\n            max3 = max(max3 , tmp3)\n            min3 = min(min3 , tmp3)\n\n\n            tmp4 = arr1[i] - arr2[i] + i\n            max4 = max(max4 , tmp4)\n            min4 = min(min4 , tmp4)\n\n        return max((max1 - min1), (max2 - min2),(max3 - min3),(max4 - min4))\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n\n        n = len(arr1)\n        points = list(zip(arr1, arr2, range(n)))\n        # Create 4 functions that can give abs value possibilities based on\n        # whether arr1[i] is larger or smaller than arr1[j] and so on.\n        funcs = [\n            lambda x, y, z: x + y + z,\n            lambda x, y, z: - x + y + z,\n            lambda x, y, z: x - y + z,\n            lambda x, y, z: - x - y + z,\n        ]\n\n        ans = 0\n        for func in funcs:\n            mapped = [func(*p) for p in points]\n            ans = max(ans, max(mapped) - min(mapped))\n\n        return ans", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        ans = 0\n        for x in (1, -1):\n            for y in (1,-1):\n                minn = arr1[0] * x + arr2[0] * y\n                for i in range(len(arr1)):\n                    curr = arr1[i] * x + arr2[i] * y + i\n                    minn = min(minn, curr)\n                    ans = max(ans, curr - minn)\n        return ans", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        f1 = lambda i: arr1[i] + arr2[i] + i\n        f2 = lambda i: -arr1[i] + arr2[i] + i\n        f3 = lambda i: arr1[i] - arr2[i] + i\n        f4 = lambda i: -arr1[i] - arr2[i] + i\n        \n        res = 0\n        for f in [f1, f2, f3, f4]:\n            low = float('inf')\n            high = -float('inf')\n            for i in range(len(arr1)):\n                low = min(low, f(i))\n                high = max(high, f(i))\n            res = max(res, high - low)\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        A, B, C, D = [], [], [], []\n        for i in range(len(arr1)):\n            x = arr1[i] + arr2[i] + i\n            y = arr1[i] - arr2[i] - i\n            z = arr1[i] + arr2[i] - i\n            t = arr1[i] - arr2[i] + i\n            A.append(x)\n            B.append(y)\n            C.append(z)\n            D.append(t)\n        \n        return max(list([max(x) - min(x) for x in [A, B, C, D]]))\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        maxVal = 0\n        \n        cases = [(1,1,1), (1,1,-1), (1,-1,1), (1,-1,-1), (-1,1,1), (-1,1,-1), (-1,-1,-1)]\n        \n        for case in cases:\n            a, b, c = case\n            \n            if c == 1:\n                minVal = a*arr1[0] + b*arr2[0] + 0\n                for i in range(1, len(arr1)):\n                    candidate = a*arr1[i] + b*arr2[i] + c*i\n                    maxVal = max(maxVal, candidate - minVal)\n                    minVal = min(minVal, candidate)\n            else:\n                minVal = a*arr1[-1] + b*arr2[-1] + c*(len(arr1) - 1)\n                for i in range(len(arr1) - 2, -1, -1):\n                    candidate = a*arr1[i] + b*arr2[i] + c*i\n                    maxVal = max(maxVal, candidate - minVal)\n                    minVal = min(minVal, candidate)\n        \n        return maxVal\n                \n            \n", "class Solution:\n    def helper(self,sign1, sign2, arr1, arr2):\n        m1, m2 = -10**7, 10**7\n\n        for i in range(len(arr1)):\n            t = sign1*arr1[i] + sign2*arr2[i] + i\n            m1 = max(m1,t)\n            m2 = min(m2,t)\n\n        return m1 - m2\n\n\n    def maxAbsValExpr(self, arr1, arr2):\n        res = 0\n\n        res = max(res,self.helper(1,1,arr1,arr2))\n        res = max(res,self.helper(-1,1,arr1,arr2))\n        res = max(res,self.helper(1,-1,arr1,arr2))\n        res = max(res,self.helper(-1,-1,arr1,arr2))\n\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        #  abs(a1[i]-a1[j])+abs(a2[i]-a2[j])\n        # =max(a1i+a2i-a1j-a2j, a1i-a2i-a1j+a2j,\n        #      -a1i+a2i+a1j-a2j, -a1i-a2i+a1j+a2j)\n        #\n        for i in range(n):\n            arr1[i], arr2[i] = arr1[i]+arr2[i], arr1[i]-arr2[i]\n        arr11 = [x+i for i,x in enumerate(arr1)]\n        arr12 = [x-i for i,x in enumerate(arr1)]\n        arr21 = [x+i for i,x in enumerate(arr2)]\n        arr22 = [x-i for i,x in enumerate(arr2)]\n        return max(max(a)-min(a) for a in [arr11,arr12,arr21,arr22])", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        \n        def get_max(arr):\n            max_val = 0\n            heap = [] # min_val, min_idx\n            for idx, val in enumerate(arr):\n                if heap:\n                    min_val, min_idx = heap[0]\n                    abs_max = val - min_val + idx - min_idx\n                    if abs_max > max_val:\n                        max_val = abs_max\n                heapq.heappush(heap, (val, idx))\n            return max_val\n        \n        max_abs = 0\n        for first in [-1, 1]:\n            for second in [-1, 1]:\n                arr = []\n                for i in range(n):\n                    arr.append(first * arr1[i] + second * arr2[i])\n                max_abs = max(get_max(arr), max_abs)\n        return max_abs", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        ans = float('-inf')\n        maxx = [float('-inf')] * 4\n        minn = [float('inf')] * 4\n        for i in range(n):\n            maxx[0] = max(maxx[0], arr1[i] + arr2[i] + i)\n            minn[0] = min(minn[0], arr1[i] + arr2[i] + i)\n            ans = max(ans, maxx[0] - minn[0])\n            \n            maxx[1] = max(maxx[1], arr1[i] + arr2[i] - i)\n            minn[1] = min(minn[1], arr1[i] + arr2[i] - i)\n            ans = max(ans, maxx[1] - minn[1])\n            \n            maxx[2] = max(maxx[2], arr1[i] - arr2[i] + i)\n            minn[2] = min(minn[2], arr1[i] - arr2[i] + i)\n            ans = max(ans, maxx[2] - minn[2])\n            \n            maxx[3] = max(maxx[3], arr1[i] - arr2[i] - i)\n            minn[3] = min(minn[3], arr1[i] - arr2[i] - i)\n            ans = max(ans, maxx[3] - minn[3])\n\n        return ans", "class Solution:\n    def maxAbsValExpr(self, A: List[int], B: List[int]) -> int:\n        n = len(A)\n        \n        max1 = max2 = max3 = max4 = -10**6 - 1 \n        min1 = min2 = min3 = min4 = 10**6 + 1\n        for i in range(n):\n            temp = A[i] - B[i] - i\n            min1 = min(min1,temp)\n            max1 = max(max1,temp)\n            \n            temp = A[i] + B[i] - i\n            min2 = min(min2,temp)\n            max2 = max(max2,temp)\n                       \n            temp = A[i] + B[i] + i\n            min3 = min(min3,temp)\n            max3 = max(max3,temp)\n            \n            temp = A[i] - B[i] +i\n            min4 = min(min4,temp)\n            max4 = max(max4,temp)\n        \n        ans = max(max4 - min4, max3 - min3, max2 - min2, max1 - min1)\n\n        return ans", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        ans = 0\n        for p, q in [(-1,-1), (1, -1), (-1, 1), (1, 1)]:\n            min_v = max_v = p*arr1[0] + q*arr2[0]\n            for i in range(1, len(arr1)):\n                v = p*arr1[i] + q*arr2[i] + i\n                min_v = min(min_v, v)\n                max_v = max(max_v, v)\n            ans = max(ans, max_v- min_v)\n            \n        return ans  ", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        maxVal = 0\n        \n        cases = [(1,1,1), (1,1,-1), (1,-1,1), (1,-1,-1), (-1,1,1), (-1,1,-1), (-1,-1,-1)]\n        \n        for case in cases:\n            a, b, c = case\n            \n            minimum, maximum  = float('inf'), float('-inf')\n            for i in range(0, len(arr1)):\n                minimum = min(minimum, a*arr1[i] + b*arr2[i] + c*i)\n                maximum = max(maximum, a*arr1[i] + b*arr2[i] + c*i)\n            \n            maxVal = max(maxVal, maximum - minimum)\n        \n        return maxVal\n                \n            \n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        maxMax = (arr1[0] + arr2[0], 0)\n        minMin = (-arr1[0] - arr2[0], 0)\n        minMax = (-arr1[0] + arr2[0], 0)\n        maxMin = (arr1[0] - arr2[0], 0)   \n        \n        table = [maxMax, minMin, minMax, maxMin]\n        \n        n = len(arr1)\n        ans = 0\n        for i in range(1, n):\n            for k in range(4):\n                _, j = table[k]\n                ans = max(ans, abs(arr1[i]-arr1[j])+abs(arr2[i]-arr2[j])+i-j)\n                if k == 0:\n                    newSum =  arr1[i] + arr2[i]\n                elif k == 1:\n                    newSum = -arr1[i] - arr2[i]\n                elif k == 2:\n                    newSum = -arr1[i] + arr2[i]\n                elif k == 3:\n                    newSum = arr1[i] - arr2[i]\n                if newSum -1 > table[k][0]:\n                    table[k] = (newSum, i)\n                else:\n                    table[k] = (table[k][0]+1, table[k][1])\n        return ans", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        x = [arr1[i] + arr2[i] + i for i in range(len(arr1))]\n        y = [arr1[i] + arr2[i] - i for i in range(len(arr1))]\n        z = [arr1[i] - arr2[i] + i for i in range(len(arr1))]\n        w = [arr1[i] - arr2[i] - i for i in range(len(arr1))]\n        \n        return max(map(lambda a: max(a) - min(a), (x,y,z,w)))", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        \n        def get_max(arr):\n            max_val = 0\n            min_val, min_idx = float('inf'), float('inf')\n            for idx, val in enumerate(arr):\n                if min_idx < float('inf'):\n                    abs_max = val - min_val + idx - min_idx\n                    if abs_max > max_val:\n                        max_val = abs_max\n                if val + idx < min_val + min_idx:\n                    min_val, min_idx = val, idx\n            return max_val\n        \n        max_abs = 0\n        for first in [-1, 1]:\n            for second in [-1, 1]:\n                arr = []\n                for i in range(n):\n                    arr.append(first * arr1[i] + second * arr2[i])\n                max_abs = max(get_max(arr), max_abs)\n        return max_abs", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        maxVal = 0\n        \n        cases = [(1,1,1), (1,1,-1), (1,-1,1), (1,-1,-1), (-1,1,1), (-1,1,-1), (-1,-1,-1)]\n        \n        for case in cases:\n            a, b, c = case\n            \n            minimum, maximum  = a*arr1[0] + b*arr2[0] + 0, a*arr1[0] + b*arr2[0] + 0\n            for i in range(1, len(arr1)):\n                minimum = min(minimum, a*arr1[i] + b*arr2[i] + c*i)\n                maximum = max(maximum, a*arr1[i] + b*arr2[i] + c*i)\n            \n            maxVal = max(maxVal, maximum - minimum)\n            # if c == 1:\n            #     minVal = a*arr1[0] + b*arr2[0] + 0\n            #     for i in range(1, len(arr1)):\n            #         candidate = a*arr1[i] + b*arr2[i] + c*i\n            #         maxVal = max(maxVal, candidate - minVal)\n            #         minVal = min(minVal, candidate)\n            # else:\n            #     minVal = a*arr1[-1] + b*arr2[-1] + c*(len(arr1) - 1)\n            #     for i in range(len(arr1) - 2, -1, -1):\n            #         candidate = a*arr1[i] + b*arr2[i] + c*i\n            #         maxVal = max(maxVal, candidate - minVal)\n            #         minVal = min(minVal, candidate)\n        \n        return maxVal\n                \n            \n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        points = list(zip(arr1, arr2, list(range(n))))\n        \n        funcs = [\n            lambda x, y, z: x + y + z,\n            lambda x, y, z: x + y - z,\n            lambda x, y, z: x - y + z,\n            lambda x, y, z: x - y - z,\n        ]\n        \n        result = 0\n        for func in funcs:\n            mapped = [func(*p) for p in points]\n            result = max(result, max(mapped) - min(mapped))\n        \n        return result\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        \n        def getValue(arr):\n            return max(arr) - min(arr)\n        v1 = [0]*len(arr1)\n        v2 = [0]*len(arr1)\n        v3 = [0]*len(arr1)\n        v4 = [0]*len(arr1)\n        \n        for i in range(len(arr1)):\n            v1[i] = arr1[i] + arr2[i] + i\n            v2[i] = arr1[i] + arr2[i] - i\n            v3[i] = arr1[i] - arr2[i] + i\n            v4[i] = arr1[i] - arr2[i] - i\n            \n        return max(getValue(v1), getValue(v2), getValue(v3), getValue(v4))", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        ma = [float('-inf')] * 4\n        res =[float('-inf')] * 4\n        for i in range(n-1,-1,-1):\n            a = [arr1[i] - arr2[i] + i,arr1[i] + arr2[i] + i,-arr1[i] + arr2[i] + i,-arr1[i] -arr2[i] + i]\n            for j in range(4):\n                res[j] = max(res[j], ma[j] - a[j])\n            for j in range(4):\n                ma[j] = max(ma[j], a[j])\n        return max(res)\n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        \n        case_1_max = case_2_max = case_3_max = case_4_max = -float('inf')\n        case_1_min = case_2_min = case_3_min = case_4_min = float('inf')\n        for i in range(len(arr1)):\n            case_1_max = max(case_1_max, arr1[i] + arr2[i] - i)\n            case_1_min = min(case_1_min, arr1[i] + arr2[i] - i)\n\n            case_2_max = max(case_2_max, arr1[i] - arr2[i] - i)\n            case_2_min = min(case_2_min, arr1[i] - arr2[i] - i)\n\n            case_3_max = max(case_3_max, arr2[i] - arr1[i] - i)\n            case_3_min = min(case_3_min, arr2[i] - arr1[i] - i)\n\n            case_4_max = max(case_4_max, arr2[i] + arr1[i] + i)\n            case_4_min = min(case_4_min, arr2[i] + arr1[i] + i)\n\n        return max(case_1_max - case_1_min,case_2_max - case_2_min,case_3_max - case_3_min,case_4_max - case_4_min)", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        ans = -math.inf\n        n = len(arr1)\n        for a in (-1, 1):\n            for b in (-1, 1):\n                for c in (-1, 1):\n                    x = -math.inf\n                    y = math.inf\n                    for i, v in enumerate(arr1):\n                        x = max(x, a*i + b*v + c*arr2[i])\n                        y = min(y, a*i + b*v + c*arr2[i])\n                    ans = max(ans, x - y)\n        return ans", "class Solution:\n    def maxAbsValExpr(self, a1: List[int], a2: List[int]) -> int:\n        s1=[]\n        s2=[]\n        d1=[]\n        d2=[]\n        for i in range(len(a1)):\n            s1.append(a1[i]+a2[i]+i)\n            s2.append(a1[i]+a2[i]-i)\n            d1.append(a1[i]-a2[i]+i)\n            d2.append(a1[i]-a2[i]-i)\n        return max(max(s1)-min(s1),max(s2)-min(s2),max(d1)-min(d1),max(d2)-min(d2))\n    \n        \n        \n            \n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        n = len(arr1)\n        \n        res = 0\n        for p,q in [[1,-1],[-1,1],[1,1],[-1,-1]]:\n            smallest = p * arr1[0] + q * arr2[0] + 0\n            for i in range(1,n):\n                x = arr1[i]*p+arr2[i]*q+i\n                res = max(res,x-smallest)\n                smallest = min(smallest,x)\n        return res", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        \n        \n        c1 = [-9999999999999,-9999999999999,-1]\n        c2 = [-9999999999999,-9999999999999,-1]\n        c3 = [-9999999999999,-9999999999999,-1]\n        c4 = [-9999999999999,-9999999999999,-1]\n        c5 = [-9999999999999,-9999999999999,-1]\n        c6 = [-9999999999999,-9999999999999,-1]\n        c7 = [-9999999999999,-9999999999999,-1]\n        c8 = [-9999999999999,-9999999999999,-1]\n        \n        \n        lim = len(arr1)\n        \n        for i in range(0,lim):\n            if arr1[i]+arr2[i]+i>c1[0]:\n                c1[0]=arr1[i]+arr2[i]+i\n                c1[2]=i\n                \n            if arr1[i]-arr2[i]+i>c2[0]:\n                c2[0]=arr1[i]-arr2[i]+i\n                c2[2]=i\n                \n            if -arr1[i]-arr2[i]+i>c3[0]:\n                c3[0]=-arr1[i]-arr2[i]+i\n                c3[2]=i\n                \n            if -arr1[i]+arr2[i]+i>c4[0]:\n                c4[0]=-arr1[i]+arr2[i]+i\n                c4[2]=i\n            \n            if arr1[i]+arr2[i]-i>c5[0]:\n                c5[0]=arr1[i]+arr2[i]-i\n                c5[2]=i\n                \n            if arr1[i]-arr2[i]-i>c6[0]:\n                c6[0]=arr1[i]-arr2[i]-i\n                c6[2]=i\n                \n            if -arr1[i]-arr2[i]-i>c7[0]:\n                c7[0]=-arr1[i]-arr2[i]-i\n                c7[2]=i\n                \n            if -arr1[i]+arr2[i]-i>c8[0]:\n                c8[0]=-arr1[i]+arr2[i]-i\n                c8[2]=i\n        ###print(c1,c2,c3,c4,c5,c6,c7,c8)        \n        for i in range(0,lim):\n            if -arr1[i]-arr2[i]-i>c1[1] and i!=c1[2]:\n                c1[1]=-arr1[i]-arr2[i]-i\n                \n            if -arr1[i]+arr2[i]-i>c2[1] and i!=c2[2]:\n                c2[1]=-arr1[i]+arr2[i]-i\n                \n            if arr1[i]+arr2[i]-i>c3[1] and i!=c3[2]:\n                c3[1]=arr1[i]+arr2[i]-i\n                \n            if arr1[i]-arr2[i]-i>c4[1] and i!=c4[2]:\n                c4[1]=arr1[i]-arr2[i]-i\n                \n            \n            if -arr1[i]-arr2[i]+i>c5[1] and i!=c5[2]:\n                c5[1]=-arr1[i]-arr2[i]+i\n                \n            if -arr1[i]+arr2[i]+i>c6[1] and i!=c6[2]:\n                c6[1]=-arr1[i]+arr2[i]+i\n                \n            if arr1[i]+arr2[i]+i>c7[1] and i!=c7[2]:\n                c7[1]=arr1[i]+arr2[i]+i\n                \n            if arr1[i]-arr2[i]+i>c8[1] and i!=c8[2]:\n                c8[1]=arr1[i]-arr2[i]+i\n        ###print(c1,c2,c3,c4,c5,c6,c7,c8)      \n        \n        v1 = 0\n        if -9999999999999 not in c1:\n            v1 = c1[0]+c1[1]\n        v2 = 0\n        if -9999999999999 not in c2:\n            v2 = c2[0]+c2[1]\n        v3 = 0\n        if -9999999999999 not in c3:\n            v3 = c3[0]+c3[1]\n        v4 = 0\n        if -9999999999999 not in c4:\n            v4 = c4[0]+c4[1]\n        v5 = 0\n        if -9999999999999 not in c5:\n            v5 = c5[0]+c5[1]\n        v6 = 0\n        if -9999999999999 not in c6:\n            v6 = c6[0]+c6[1]\n        v7 = 0\n        if -9999999999999 not in c7:\n            v7 = c7[0]+c7[1]\n        v8 = 0\n        if -9999999999999 not in c8:\n            v8 = c8[0]+c8[1]\n            \n        print((v1,v2,v3,v4,v5,v6,v7,v8))\n        return max(v1,v2,v3,v4,v5,v6,v7,v8)\n        \n", "class Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        if not arr1 or not arr2:\n            return 0\n        \n        n = len(arr1)\n        \n        l1, l2 ,l3, l4 = [], [], [], []\n        for i in range(len(arr1)):\n            l1 += [arr1[i]+arr2[i]+i]\n            l2 += [arr1[i]-arr2[i]+i]\n            l3 += [-arr1[i]+arr2[i]+i]\n            l4 += [-arr1[i]-arr2[i]+i]\n            \n        res = []\n        res += [max(l1)-min(l1)]\n        res += [max(l2) -min(l2)]\n        res += [max(l3)-min(l3)]\n        res += [max(l4)-min(l4)]\n        return max(res)\n"]