["# cook your dish here\nMOD = 998244353\n\nfball = [ [0]*101 for _ in range(101) ]\n\ncric = [ [0]*101 for _ in range(101) ] \n\n\n\ndef calSNum(n, r):\n if n == r or r == 1:\n  fball[r][n] = 1\n  return\n if n > 0 and r > 0 and n > r:\n  fball[r][n] = (fball[r-1][n-1]%MOD + (r*fball[r][n-1])%MOD )%MOD\n  return\n fball[r][n] = 0\n  \n\ndef calASNum(n, r):\n if n == 0 and r == 0 :\n  cric[r][n] = 0\n  return\n if n >= 2 and r == 1:\n  cric[r][n] = 1\n  return \n if r > 0 and n > 0 and n >= 2*r:\n  cric[r][n] = ((r*cric[r][n-1])%MOD + ((n-1)*cric[r-1][n-2])%MOD )%MOD\n  return\n cric[r][n] = 0\n \n\ndef preCompute():\n for r in range(1,101):\n  for n in range(1, 101):\n   calSNum(n, r)\n   calASNum(n, r)\n\n \ndef main():\n \n preCompute()\n for _ in range(int(input())):\n  f, c, r = list(map(int, input().split()))\n\n  ans = 0\n  \n  if f + (c//2) >= r:\n   minv = min(f, r)\n   \n   for i in range(1, minv+1):\n    if r-i <= c//2:\n     ans = (ans + (fball[i][f] * cric[r-i][c])%MOD )%MOD\n   \n  print(ans)\n   \ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\n#copy from all submission only for learn \nMOD = 998244353\n\nfball = [ [0]*101 for _ in range(101) ]\n\ncric = [ [0]*101 for _ in range(101) ] \n\n\n\ndef calSNum(n, r):\n if n == r or r == 1:\n  fball[r][n] = 1\n  return\n if n > 0 and r > 0 and n > r:\n  fball[r][n] = (fball[r-1][n-1]%MOD + (r*fball[r][n-1])%MOD )%MOD\n  return\n fball[r][n] = 0\n  \n\ndef calASNum(n, r):\n if n == 0 and r == 0 :\n  cric[r][n] = 0\n  return\n if n >= 2 and r == 1:\n  cric[r][n] = 1\n  return \n if r > 0 and n > 0 and n >= 2*r:\n  cric[r][n] = ((r*cric[r][n-1])%MOD + ((n-1)*cric[r-1][n-2])%MOD )%MOD\n  return\n cric[r][n] = 0\n \n\ndef preCompute():\n for r in range(1,101):\n  for n in range(1, 101):\n   calSNum(n, r)\n   calASNum(n, r)\n\n \ndef main():\n \n preCompute()\n for _ in range(int(input())):\n\n  f, c, r = list(map(int, input().split()))\n\n  ans = 0\n  \n  if f + (c//2) >= r:\n   minv = min(f, r)\n   \n   for i in range(1, minv+1):\n    if r-i <= c//2:\n     ans = (ans + (fball[i][f] * cric[r-i][c])%MOD )%MOD\n   \n  print(ans)\n   \ndef __starting_point():\n main()\n\n__starting_point()", "#copy from all submission only for learn \nMOD = 998244353\n\nfball = [ [0]*101 for _ in range(101) ]\n\ncric = [ [0]*101 for _ in range(101) ] \n\n\n\ndef calSNum(n, r):\n if n == r or r == 1:\n  fball[r][n] = 1\n  return\n if n > 0 and r > 0 and n > r:\n  fball[r][n] = (fball[r-1][n-1]%MOD + (r*fball[r][n-1])%MOD )%MOD\n  return\n fball[r][n] = 0\n  \n\ndef calASNum(n, r):\n if n == 0 and r == 0 :\n  cric[r][n] = 0\n  return\n if n >= 2 and r == 1:\n  cric[r][n] = 1\n  return \n if r > 0 and n > 0 and n >= 2*r:\n  cric[r][n] = ((r*cric[r][n-1])%MOD + ((n-1)*cric[r-1][n-2])%MOD )%MOD\n  return\n cric[r][n] = 0\n \n\ndef preCompute():\n for r in range(1,101):\n  for n in range(1, 101):\n   calSNum(n, r)\n   calASNum(n, r)\n\n \ndef main():\n \n preCompute()\n for _ in range(int(input())):\n\n  f, c, r = list(map(int, input().split()))\n\n  ans = 0\n  \n  if f + (c//2) >= r:\n   minv = min(f, r)\n   \n   for i in range(1, minv+1):\n    if r-i <= c//2:\n     ans = (ans + (fball[i][f] * cric[r-i][c])%MOD )%MOD\n   \n  print(ans)\n   \ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\n\ndef precompute():\n cp = [[0 for i in range(101)] for i in range(101)]\n fp = [[0 for i in range(101)] for i in range(101)]\n mod = 998244353\n for r in range(101):\n  for q in range(101):\n   if r==0 and q==0:\n    cp[r][q] = 1\n   elif r==1 and q>=2:\n    cp[r][q] = 1\n   elif r>=2 and q>=2*r:\n    cp[r][q] = ((r*cp[r][q-1])%mod + ((q-1)*cp[r-1][q-2])%mod)%mod\n for r in range(101):\n  for p in range(101):\n   if r==0 and p==0:\n    fp[r][p] = 1\n   elif r==1 and p>0:\n    fp[r][p] = 1\n   elif r>=2 and p>=r:\n    fp[r][p] = ((r*fp[r][p-1])%mod + fp[r-1][p-1]%mod)%mod\n return cp,fp\n\nt = int(input())\nwhile t:\n p,q,r = list(map(int, input().split()))\n cp,fp = precompute()\n #lim = min(q,r)\n mod = 998244353\n ans = 0\n for i in range(r+1):\n  ans = ans + fp[r-i][p]*cp[i][q]\n print(ans%mod)\n t -= 1\n", "# cook your dish here\n\ndef precompute():\n cp = [[0 for i in range(101)] for i in range(101)]\n fp = [[0 for i in range(101)] for i in range(101)]\n mod = 998244353\n for r in range(101):\n  for q in range(101):\n   if r==0 and q==0:\n    cp[r][q] = 1\n   elif r==1 and q>=2:\n    cp[r][q] = 1\n   elif r>=2 and q>=2*r:\n    cp[r][q] = ((r*cp[r][q-1])%mod + ((q-1)*cp[r-1][q-2])%mod)%mod\n for r in range(101):\n  for p in range(101):\n   if r==0 and p==0:\n    fp[r][p] = 1\n   elif r==1 and p>0:\n    fp[r][p] = 1\n   elif r>=2 and p>=r:\n    fp[r][p] = ((r*fp[r][p-1])%mod + fp[r-1][p-1]%mod)%mod\n return cp,fp\n\nt = int(input())\nwhile t:\n p,q,r = list(map(int, input().split()))\n cp,fp = precompute()\n #lim = min(q,r)\n mod = 998244353\n ans = 0\n for i in range(r+1):\n  ans = ans + fp[r-i][p]*cp[i][q]\n print(ans%mod)\n t -= 1\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Jan 23 18:46:38 2020\n\n@author: 736473\n\"\"\"\n\nMOD = 998244353\n\nfball = [ [0]*101 for _ in range(101) ]\n\ncric = [ [0]*101 for _ in range(101) ] \n\n\n\ndef calSNum(n, r):\n if n == r or r == 1:\n  fball[r][n] = 1\n  return\n if n > 0 and r > 0 and n > r:\n  fball[r][n] = (fball[r-1][n-1]%MOD + (r*fball[r][n-1])%MOD )%MOD\n  return\n fball[r][n] = 0\n  \n\ndef calASNum(n, r):\n if n == 0 and r == 0 :\n  cric[r][n] = 0\n  return\n if n >= 2 and r == 1:\n  cric[r][n] = 1\n  return \n if r > 0 and n > 0 and n >= 2*r:\n  cric[r][n] = ((r*cric[r][n-1])%MOD + ((n-1)*cric[r-1][n-2])%MOD )%MOD\n  return\n cric[r][n] = 0\n \n\ndef preCompute():\n for r in range(1,101):\n  for n in range(1, 101):\n   calSNum(n, r)\n   calASNum(n, r)\n\n \ndef main():\n \n preCompute()\n \n for _ in range(int(input())):\n\n  f, c, r = list(map(int, input().split()))\n\n  ans = 0\n  \n  if f + (c//2) >= r:\n   minv = min(f, r)\n   \n   for i in range(1, minv+1):\n    if r-i <= c//2:\n     ans = (ans + (fball[i][f] * cric[r-i][c])%MOD )%MOD\n   \n  print(ans)\n   \ndef __starting_point():\n main()\n__starting_point()", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Jan 23 18:46:38 2020\n\n@author: 736473\n\"\"\"\n\nMOD = 998244353\n\nfball = [ [0]*101 for _ in range(101) ]\n\ncric = [ [0]*101 for _ in range(101) ] \n\n\n\ndef calSNum(n, r):\n if n == r or r == 1:\n  fball[r][n] = 1\n  return\n if n > 0 and r > 0 and n > r:\n  fball[r][n] = (fball[r-1][n-1]%MOD + (r*fball[r][n-1])%MOD )%MOD\n  return\n fball[r][n] = 0\n  \n\ndef calASNum(n, r):\n if n == 0 and r == 0 :\n  cric[r][n] = 0\n  return\n if n >= 2 and r == 1:\n  cric[r][n] = 1\n  return \n if r > 0 and n > 0 and n >= 2*r:\n  cric[r][n] = ((r*cric[r][n-1])%MOD + ((n-1)*cric[r-1][n-2])%MOD )%MOD\n  return\n cric[r][n] = 0\n \n\ndef preCompute():\n for r in range(1,101):\n  for n in range(1, 101):\n   calSNum(n, r)\n   calASNum(n, r)\n\n \ndef main():\n \n preCompute()\n \n for _ in range(int(input())):\n\n  f, c, r = list(map(int, input().split()))\n\n  ans = 0\n  \n  if f + (c//2) >= r:\n   minv = min(f, r)\n   \n   for i in range(1, minv+1):\n    if r-i <= c//2:\n     ans = (ans + (fball[i][f] * cric[r-i][c])%MOD )%MOD\n   \n  print(ans)\n   \ndef __starting_point():\n main()\n__starting_point()", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Jan 23 18:46:38 2020\n\n@author: 736473\n\"\"\"\n\nMOD = 998244353\n\nfball = [ [0]*101 for _ in range(101) ]\n\ncric = [ [0]*101 for _ in range(101) ] \n\n\n\ndef calSNum(n, r):\n if n == r or r == 1:\n  fball[r][n] = 1\n  return\n if n > 0 and r > 0 and n > r:\n  fball[r][n] = (fball[r-1][n-1]%MOD + (r*fball[r][n-1])%MOD )%MOD\n  return\n fball[r][n] = 0\n  \n\ndef calASNum(n, r):\n if n == 0 and r == 0 :\n  cric[r][n] = 0\n  return\n if n >= 2 and r == 1:\n  cric[r][n] = 1\n  return \n if r > 0 and n > 0 and n >= 2*r:\n  cric[r][n] = ((r*cric[r][n-1])%MOD + ((n-1)*cric[r-1][n-2])%MOD )%MOD\n  return\n cric[r][n] = 0\n \n\ndef preCompute():\n for r in range(1,101):\n  for n in range(1, 101):\n   calSNum(n, r)\n   calASNum(n, r)\n\n \ndef main():\n \n preCompute()\n \n t = int(input())\n while True:\n  \n  try:\n   f, c, r = list(map(int, input().split()))\n  except EOFError:\n   break\n\n  ans = 0\n  \n  if f + (c//2) >= r:\n   minv = min(f, r)\n   \n   for i in range(1, minv+1):\n    if r-i <= c//2:\n     ans = (ans + (fball[i][f] * cric[r-i][c])%MOD )%MOD\n   \n  print(ans)\n   \ndef __starting_point():\n main()\n__starting_point()"]