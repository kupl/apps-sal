["\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n\n# this math tutorial is boring\n\nclassy=set()\n\nfor i in range(19):\n    for j in range(i):\n        for k in range(j):\n            for a in range(10):     # a=0 for good measure\n                for b in range(10):\n                    for c in range(10):\n                        what=a*10**i+b*10**j+c*10**k\n                        classy.add(what)\n\nli=sorted(classy)\n\ndef counting(i):\n    # return len([x for x in li if x <= i])+C\n    lo=0\n    hi=len(li)-1\n    while lo<hi:\n        mid=(lo+hi+1)//2\n        if li[mid]<=i:\n            lo=mid\n        else:\n            hi=mid-1\n    return lo\n\nfor _ in range(int(input())):\n    a,b=map(int,input().split())\n    print(counting(b)-counting(a-1))", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept ModuleNotFoundError:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\ndef memo(func):  \n    cache={}  \n    def wrap(*args):  \n        if args not in cache:  \n            cache[args]=func(*args)  \n        return cache[args]  \n    return wrap\n\n@memo\ndef comb (n,k):\n    if k>n: return 0    \n    if k==0: return 1\n    if n==k: return 1\n    return comb(n-1,k-1) + comb(n-1,k)\ndef getclam(K, left = 3):\n    if K==0: return 1\n    if left ==0: return 1\n    s = str(K)\n    l = len(s)\n\n    r = 0\n    x = int(s[0])\n    if l>1:\n        for i in range(left+1):\n            r += comb(l-1,i) * 9 ** i\n        if x>0:\n            for i in range(left):\n                r += comb(l-1,i) * 9 ** i * (x-1)\n        s1 = s[1:]\n        y = 0\n        if s1:\n            y = int(s1)\n        if x!=0:\n            left-=1\n        r+= getclam( y, left)\n        return r\n    else:\n        return x+1\nfor i in range(1000, 1100):\n    continue\n    dprint(i, getclam(i))\n\nfor _ in range(N):\n    L,R = getIntList()\n    r = getclam(R) - getclam(L-1)\n    print(r)\n\n\n\n\n\n", "USE_STDIO = False\n\nif not USE_STDIO:\n    try: import mypc\n    except: pass\n\ndef Cnk(n, k):\n    ans = 1\n    for i in range(k):\n        ans *= n - i\n        ans //= i + 1\n    return ans\n\ndef main():\n    num = [[0] * 4 for _ in range(19)]\n    for i in range(19):\n        for j in range(4):\n            if j: num[i][j] += num[i][j-1]\n            if i >= j:\n                num[i][j] += 9 ** j * Cnk(i, j)\n    \n    def count(n):\n        if n == 0: return 0\n        n = list(map(int, str(n)))\n        l = len(n)\n        ans = 0\n        for i in range(1, l):\n            ans += 9 * num[i - 1][2]\n        cur = 3\n        for i in range(l):\n            if n[i] > 0:\n                ans += (n[i] - 1) * num[l - i - 1][cur - 1]\n                if i: ans += num[l - i - 1][cur]\n                cur -= 1\n                if cur <= 0: break\n        ans += 1\n        return ans\n\n    q,  = list(map(int, input().split(' ')))\n    for _ in range(q):\n        L, R = list(map(int, input().split(' ')))\n        ans = count(R) - count(L - 1)\n        print(ans)\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()", "t = int(input())\narr = []\nfor i in range(1, 19):\n    arr.append((i - 1) * (i - 2) // 2 * 9 * 9 * 9 + (i - 1) * 9 * 9 + 9)\npref = [0]\nfor i in arr:\n    pref.append(pref[-1] + i)\n\ndef f(x):\n    if x == 0:\n        return 0\n    s = str(x)\n    n = len(s)\n    ans = pref[n - 1]\n    cnt = 0\n    for i in range(n):\n        a = int(s[i])\n        if a != 0:\n            if cnt == 0:\n                ans += (a - 1) * (n - i - 1) * (n - i - 2) // 2 * 9 * 9 + (a - 1) * (n - i - 1) * 9 + (a - 1)\n                cnt += 1\n            elif cnt == 1:\n                ans += (n - i - 1) * (n - i - 2) // 2 * 9 * 9 + (n - i - 1) * 9 + 1\n                if a != 1:\n                    ans += (a - 1) * (n - i - 1) * 9 + (a - 1)\n                cnt += 1\n            elif cnt == 2:\n                ans += (n - i - 1) * 9 + 1\n                if a != 1:\n                    ans += (a - 1)\n                cnt += 1\n                break\n    return ans + 1\n            \nfor i in range(t):\n    l, r = map(int, input().split())\n    l -= 1\n    print(f(r) - f(l))    \n\n'''n = int(input())\narr1 = list(map(int, input().split()))\nm = int(input())\narr2 = list(map(int, input().split()))\n\nl = 0\nr = 0\nif arr1[l] == arr2[r]\n'''\n'''\nn, k = map(int, input().split())\nprint((k + n - 1) // n)\n'''", "def f(n):\n    if n == 0:\n        return 1\n    dp = [[[0] * 2 for j in range(4)] for z in range(len(n))]\n    dp[0][3][0] = 1\n    dp[0][2][0] = int(n[0]) - 1\n    dp[0][2][1] = 1\n    for i in range(1, len(n)):\n        for j in range(4):\n            if n[i] == '0':\n                dp[i][j][0] += dp[i - 1][j][0]\n                dp[i][j][1] += dp[i - 1][j][1]\n            else:\n                dp[i][j][0] += dp[i - 1][j][0] + dp[i - 1][j][1]\n            for z in range(1, 10):\n                if z < int(n[i]):\n                    if j < 3:\n                        dp[i][j][0] += dp[i - 1][j + 1][0] + dp[i - 1][j + 1][1]\n                elif z == int(n[i]):\n                    if j < 3:\n                        dp[i][j][0] += dp[i - 1][j + 1][0]\n                        dp[i][j][1] += dp[i - 1][j + 1][1]\n                else:\n                    if j < 3:\n                        dp[i][j][0] += dp[i - 1][j + 1][0]\n\n    res = 0\n    for j in range(4):\n        res += dp[len(n) - 1][j][0] + dp[len(n) - 1][j][1]\n    return res\n\nt = int(input())\nwhile t:\n    t -= 1\n    l, r = list(map(int, input().split()))\n    print(f(str(r)) - f(str(l - 1)))\n", "def f(n):\n    if n == 0:\n        return 1\n    dp = [[[0] * 2 for j in range(4)] for z in range(len(n))]\n    dp[0][3][0] = 1\n    dp[0][2][0] = int(n[0]) - 1\n    dp[0][2][1] = 1\n    for i in range(1, len(n)):\n        for j in range(4):\n            if n[i] == '0':\n                dp[i][j][0] += dp[i - 1][j][0]\n                dp[i][j][1] += dp[i - 1][j][1]\n            else:\n                dp[i][j][0] += dp[i - 1][j][0] + dp[i - 1][j][1]\n            if j >= 3:\n                continue\n            for z in range(1, 10):\n                if z < int(n[i]):\n                    dp[i][j][0] += dp[i - 1][j + 1][0] + dp[i - 1][j + 1][1]\n                elif z == int(n[i]):\n                    dp[i][j][0] += dp[i - 1][j + 1][0]\n                    dp[i][j][1] += dp[i - 1][j + 1][1]\n                else:\n                    dp[i][j][0] += dp[i - 1][j + 1][0]\n\n    res = 0\n    for j in range(4):\n        res += dp[len(n) - 1][j][0] + dp[len(n) - 1][j][1]\n    return res\n\nt = int(input())\nwhile t:\n    t -= 1\n    l, r = list(map(int, input().split()))\n    print(f(str(r)) - f(str(l - 1)))\n", "def C(n, r):\n    ret = 1\n    for i in range(r):\n        ret = ret * (n - i) // (i + 1);\n    return ret\n\ndef f(N):\n    N = [int(ch) for ch in reversed(str(N))]\n    cnt, nonzero = 0, 0\n    for k in range(len(N)-1, -1, -1):\n        if N[k] > 0:\n            for i in range(4 - nonzero):\n                cnt += C(k, i) * pow(9, i)\n            nonzero += 1\n            for i in range(4 - nonzero):\n                cnt += (N[k] - 1) * C(k, i) * pow(9, i)\n        if nonzero > 3:\n            break\n    return cnt\n\nfor run in range(int(input())):\n    l, r = list(map(int, input().split()))\n    print(f(r+1) - f(l))\n", "def C(n, r):\n    ret = 1\n    for i in range(r):\n        ret = ret * (n - i) // (i + 1);\n    return ret\n\ndef f(N):\n    N = [int(ch) for ch in reversed(str(N))]\n    cnt, nonzero = 0, 0\n    for k in range(len(N)-1, -1, -1):\n        if N[k] > 0:\n            for i in range(4 - nonzero):\n                cnt += C(k, i) * pow(9, i)\n            nonzero += 1\n            for i in range(4 - nonzero):\n                cnt += (N[k] - 1) * C(k, i) * pow(9, i)\n        if nonzero > 3:\n            break\n    return cnt\n\nfor run in range(int(input())):\n    l, r = map(int, input().split())\n    print(f(r+1) - f(l))", "def cnt(l, c):\n    if l <= c:\n        return 10**c\n    res = 1\n    if c > 0: res += l*9\n    if c > 1: res += l*(l-1)*9*9//2\n    if c > 2: res += l*(l-1)*(l-2)*9*9*9//6\n    return res\n\ndef calc(n, c):\n    x=str(n)\n    xn = len(x)\n    if xn <= c:\n        return n+1\n    res = cnt(xn-1, c)+1\n    d = int(x[0])\n    if d > 1:\n        res += cnt(xn-1, c-1)*(d - 1)\n    if c > 1:\n        for i in range(1,xn):\n            d = int(x[i])\n            if d != 0:\n                res += calc(int(x[i:]), c-1)-1\n                break\n    return res\n\"\"\"ans=0\nfor i in range(90000):\n    s = str(i)\n    if len(s)-s.count('0') < 3:\n        ans+=1\nprint(ans)\"\"\"\n\n#ans=calc(1000000,3) # 15850\nt = int(input())\nfor i in range(t):\n    l,r = map(int, input().split())\n    print(calc(r,3)-calc(l-1,3))", "from bisect import bisect_left as bl\nc=[]\ndef gen(n,nz):\n    if len(n)>=19:\n        return\n    nonlocal c\n    c.append(int(n))\n    if nz==3:\n        n+=\"0\"\n        gen(n,nz)\n        return\n    gen(n+\"0\",nz)\n    for i in (\"123456789\"):\n        gen(n+i,nz+1)\nfor i in (\"123456789\"):\n    gen(i,1)\nc.append(10**18)\nc.sort()\nn=int(input())\nfor i in range(n):\n    a,b=list(map(int,input().split()))\n    x=min(bl(c,b),len(c)-1)\n    y=bl(c,a)\n    if x==y and b<c[x]:\n        print(0)\n    elif (c[x]==b and c[y]==a) or c[x]==b:\n        print(x-y+1)\n    else:\n        print(x-y)\n\n        \n", "import math\ndef combi(L,n):\n    return math.factorial(L)//math.factorial(n)//math.factorial(L-n)\n\n\nT=int(input())\nLR=[list(map(int,input().split())) for i in range(T)]\n\ndef classy(less,nonzero,now):\n    L=len(str(now))\n\n    if less==0:\n        if 3-nonzero>=L:\n            return 10**L\n        else:\n            ANS=1\n            for i in range(1,3-nonzero+1):\n                ANS+=combi(L,i)*(9**i)\n\n            return ANS\n\n    else:\n        if nonzero<=2:\n            if now<=9:\n                return now+1\n            \n            else:\n                if int(str(now)[0])==1:\n                    return classy(1,nonzero+1,int(str(now)[1:]))\\\n                           +classy(0,nonzero,int(\"9\"*(L-1)))\\\n\n                else:\n                    return classy(1,nonzero+1,int(str(now)[1:]))\\\n                           +(int(str(now)[0])-1)*classy(0,nonzero+1,int(\"9\"*(L-1)))\\\n                           +classy(0,nonzero,int(\"9\"*(L-1)))\n\n        else:\n            return 1\n\nfor l,r in LR:\n    print(classy(1,0,r)-classy(1,0,l-1))\n\n            \n        \n                          \n        \n    \n    \n", "import math\ndef combi(L,n):\n    return math.factorial(L)//math.factorial(n)//math.factorial(L-n)\n\n\nT=int(input())\nLR=[list(map(int,input().split())) for i in range(T)]\n\ndef classy(less,nonzero,now):\n    L=len(str(now))\n\n    if less==0:\n        if 3-nonzero>=L:\n            return 10**L\n        else:\n            ANS=1\n            for i in range(1,3-nonzero+1):\n                ANS+=combi(L,i)*(9**i)\n\n            return ANS\n\n    else:\n        if nonzero<=2:\n            if now<=9:\n                return now+1\n            \n            else:\n                if int(str(now)[0])==1:\n                    return classy(1,nonzero+1,int(str(now)[1:]))\\\n                           +classy(0,nonzero,int(\"9\"*(L-1)))\\\n\n                else:\n                    return classy(1,nonzero+1,int(str(now)[1:]))\\\n                           +(int(str(now)[0])-1)*classy(0,nonzero+1,int(\"9\"*(L-1)))\\\n                           +classy(0,nonzero,int(\"9\"*(L-1)))\n\n        else:\n            return 1\n\nfor l,r in LR:\n    print(classy(1,0,r)-classy(1,0,l-1))\n\n            \n        \n                          \n        \n    \n    \n", "\ndp = [[-1]*20 for _ in range(5)]\ndef dfs(pos, cnt, limited, dp, nums):\n\tif cnt > 3:\n\t\treturn 0\n\tif pos == -1:\n\t\treturn 1\n\tif not limited and dp[cnt][pos] != -1:\n\t\treturn dp[cnt][pos]\n\tupper = nums[pos] if limited else 9\n\ttmp = 0\n\tfor i in range(upper + 1):\n\t\ttmp += dfs(pos - 1, cnt + (i > 0), limited&(i==upper), dp, nums)\n\tif not limited:\n\t\tdp[cnt][pos] = tmp\n\treturn tmp\ndef classy(num):\n\tnums = []\n\twhile num:\n\t\tnums.append(num % 10)\n\t\tnum //= 10\n\t\n\treturn dfs(len(nums) - 1, 0, 1, dp, nums)\n\n\ndef __starting_point():\n\tT = int(input())\n\tfor _ in range(T):\n\t\tL, R = map(int, input().split())\n\t\tprint(classy(R) - classy(L-1))\n__starting_point()", "import sys\nclass Solution():\n    mem = dict()\n\n    def classy_Numbers(self):\n        T = int(sys.stdin.readline().strip())\n        self.queries = []\n        for t in range(T):\n            left, right = list(map(int, sys.stdin.readline().strip().split()))\n            print(self.dp(right, 3) - self.dp(left-1, 3))\n\n    def dp(self, target, limit):\n        num_digits = len(str(target))\n        if (target, limit) in self.mem:\n            return self.mem[(target, limit)]\n        if limit == 0:\n            return 1\n        if num_digits <= limit:\n            return target + 1\n\n        top_digit = target // (10 ** (num_digits-1))\n        res = target % (10 ** (num_digits-1))\n        ret = self.dp(res, limit-1) \\\n                + max(top_digit-1, 0) * self.dp(10**(num_digits-1)-1, limit-1) \\\n                + self.dp(10**(num_digits-1)-1, limit)\n        self.mem[(target, limit)] = ret\n        return ret\n\nsol = Solution()\nsol.classy_Numbers()\n# print(sol.dp(1, 3))\n# print(sol.dp(1234, 4, 3))\n# print(sol.dp(12345, 5, 3))\n", "import math\n\ndef check(x):\n    cnt = 0\n    while(x):\n        cnt = cnt + (x%10 != 0)\n        x = math.floor(x/10)\n    return cnt<=3\n\ndef bl(x):\n    ans = 0\n    for i in range(1,x+1):\n        if check(i):\n            ans = ans+1\n    return ans\n\n\ndef jc(x):\n    sm = 1\n    for i in range(1,x+1):\n        sm = sm * i\n    return sm\n\ndef c(x,y):\n    if x<y:\n        return 0\n    return jc(x)/(jc(x-y)*jc(y))\n\ndef cal1(x,y):\n    ans = 0\n    for i in range(1,min(x,y)+1):\n        ans = ans + c(x,i)*(9**i)\n    return ans+1\n\ndef revers(x):\n    ans = 0\n    while(x):\n        ans = ans*10+ x%10\n        x = x.__floordiv__(10)\n\n    return ans\n\ndef cal2(x):\n    rx = revers(x)\n    ans = 0\n    cnt = 0\n    l = 0\n    l_ = 0\n    while(x):\n        l = l+1\n        x = x.__floordiv__(10)\n\n\n    while(rx):\n        now = rx % 10\n        rx = rx.__floordiv__(10)\n        l_ = l_ + 1\n        if now!=0:\n            cnt = cnt+1\n        else:\n            continue\n        ans = ans + (now-1)*cal1(l-l_,3-cnt) + cal1(l-l_,3-cnt+1)\n\n        if cnt>=3:\n            break\n\n    return ans\n\nT = int(input())\nfor i in range(T):\n\n    x,y = list(map(int,input().split()))\n\n    print(int(cal2(y)-cal2(x-1)))\n", "from itertools import combinations\n\nall_classy = []\n\ndef all_possible(a):\n    if len(a) == 0:\n        return [['0']*19]\n    lower = all_possible(a[1:])\n    ans = []\n    for l in lower:\n        for x in range(1, 10):\n            this = l[:]\n            this[a[0]] = str(x)\n            ans.append(this)\n    return ans\n\nfor i in range(1, 4):\n    for a in combinations(range(19), i):\n        this_possible = all_possible(a)\n        this_possible = [int(''.join(x)) for x in this_possible]\n        all_classy += this_possible\n\nall_classy.sort()\n\ndef ge(num):\n    if num == 1:\n        return 0\n    lower, upper = 0, len(all_classy)\n    while lower < upper - 1:\n        mid = (lower+upper)>>1\n        if(all_classy[mid] < num):\n            lower = mid\n        else:\n            upper = mid\n\n    return upper\n\n\ndef le(num):\n    lower, upper = 0, len(all_classy)\n    while lower < upper-1:\n        mid = (lower+upper)>>1\n        if all_classy[mid] > num:\n            upper = mid\n        else:\n            lower = mid\n\n    return lower\n\nq = int(input())\n\nfor i in range(q):\n    l, r = map(int, input().strip().split())\n    x, y = ge(l), le(r)\n    print(y-x+1)", "import sys\n\nMAX_N = 20\nMAX_DIG = 3\ndp = [[0] * (MAX_DIG + 1) for i in range(MAX_N)]\n\ndef calc_dp():\n    dp[0][0] = 1\n    for i in range(1, MAX_N):\n        dp[i][0] = 1\n        for j in range(MAX_DIG):\n            dp[i][j + 1] += 9 * dp[i - 1][j]\n            dp[i][j + 1] += dp[i - 1][j + 1]\n\ndef first_dig(n):\n    cnt = 0\n    while n >= 10:\n        n //= 10\n        cnt += 1\n    return n, cnt\n\ndef calc_ans(n):\n    ans = 0\n    for n_digs in range(MAX_DIG, -1, -1):\n        x, cnt = first_dig(n)\n        for i in range(n_digs):\n            ans += x * dp[cnt][i]\n        ans += dp[cnt][n_digs]\n        n -= x * 10 ** cnt\n    return ans\n\ndef main():\n    calc_dp()\n    T = int(input())\n    for _ in range(T):\n        l, r = map(int, input().split())\n        print(calc_ans(r) - calc_ans(l - 1) if l > 0 else 0)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nMAX_N = 20\nMAX_DIG = 3\ndp = [[0] * (MAX_DIG + 1) for i in range(MAX_N)]\n\ndef calc_dp():\n    dp[0][0] = 1\n    for i in range(1, MAX_N):\n        dp[i][0] = 1\n        for j in range(MAX_DIG):\n            dp[i][j + 1] += 9 * dp[i - 1][j]\n            dp[i][j + 1] += dp[i - 1][j + 1]\n\ndef first_dig(n):\n    cnt = 0\n    while n >= 10:\n        n //= 10\n        cnt += 1\n    return n, cnt\n\ndef calc_ans(n):\n    ans = 0\n    for n_digs in range(MAX_DIG, -1, -1):\n        x, cnt = first_dig(n)\n        for i in range(n_digs):\n            ans += x * dp[cnt][i]\n        ans += dp[cnt][n_digs]\n        n -= x * 10 ** cnt\n    return ans\n\ndef main():\n    calc_dp()\n    T = int(input())\n    for _ in range(T):\n        l, r = map(int, input().split())\n        print(calc_ans(r) - calc_ans(l - 1) if l > 0 else 0)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nMAX_N = 20\nMAX_DIG = 3\ndp = [[0] * (MAX_DIG + 1) for i in range(MAX_N)]\n\ndef calc_dp():\n    dp[0][0] = 1\n    for i in range(1, MAX_N):\n        dp[i][0] = 1\n        for j in range(MAX_DIG):\n            dp[i][j + 1] += 9 * dp[i - 1][j]\n            dp[i][j + 1] += dp[i - 1][j + 1]\n\ndef first_dig(n):\n    cnt = 0\n    while n >= 10:\n        n //= 10\n        cnt += 1\n    return n, cnt\n\ndef calc_ans(n):\n    ans = 0\n    for n_digs in range(MAX_DIG, -1, -1):\n        x, cnt = first_dig(n)\n        for i in range(n_digs):\n            ans += x * dp[cnt][i]\n        ans += dp[cnt][n_digs]\n        n -= x * 10 ** cnt\n    return ans\n\ndef main():\n    calc_dp()\n    T = int(input())\n    for _ in range(T):\n        l, r = map(int, input().split())\n        print(calc_ans(r) - calc_ans(l - 1))\n\ndef __starting_point():\n    main()\n__starting_point()", "com = [[0]*19 for i in range(19)]\n\n\ndef solve(x):\n    sx, non_zero, res = str(x), 3, 0\n\n    for i in range(len(sx)):\n        if not int(sx[i]):\n            continue\n\n        for j in range(0, non_zero+1):\n            res += com[len(sx)-i-1][j] * 9 ** j\n\n        non_zero -= 1\n\n        if non_zero == -1:\n            break\n\n        for j in range(0, non_zero+1):\n            res += (int(sx[i])-1) * com[len(sx)-i-1][j] * 9 ** j\n\n    return res\n\n\ndef main():\n    t = int(input())\n\n    for i in range(19):\n        com[i][0] = 1\n    for i in range(1, 19):\n        for j in range(1, i+1):\n            com[i][j] = com[i-1][j] + com[i-1][j-1]\n\n    for i in range(t):\n        l, r = list(map(int, input().split()))\n        print(solve(r+1)-solve(l))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "t=int(input())\nl=[]\nr=[]\nfor i in range (t):\n    q,w=[int(el) for el in input().split()]\n    l.append(q)\n    r.append(w)\n\ndef count(x):\n    if x<=1110:\n        return x\n    s=str(x)\n    n=len(s)\n    cz=3\n    out=0\n    for i in range(n-2): #\u043f\u0440\u043e\u0431\u0435\u0436\u0430\u043b\u0438 \u0434\u043e \u0441\u043e\u0442\u0435\u043d\n        a=int(s[i])\n        k = n - i - 1  # \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 i\n\n        if a>0:\n            if cz==3:\n                out=out+k*(k-1)*(k-2)/6*9*9*9+k*(k-1)/2*9*9+k*9\n            elif cz==2:\n                out=out+k*(k-1)/2*9*9+k*9+1\n            elif cz==1:\n                out=out+k*9+1\n            cz=cz-1\n\n            if cz==2:\n                plus=k*(k-1)/2*9*9+k*9+1\n            elif cz==1:\n                plus=k*9+1\n            elif cz==0:\n                plus=1\n            out=out+plus*(a-1)\n        if cz==0:\n            break\n    if cz==0:\n        out=out+1\n        return out\n    if cz==1:\n#        out=out+1+int(s[n-2])\n        if int(s[n-2])>0:\n            out=out+int(s[n-2])+10\n        else:\n            out=out+1+int(s[n-1])\n        return out\n    out=out+int(s[n-2:])+1\n    return out\n\nfor i in range(t):\n    a=int(count(r[i]))\n    b=int(count(l[i]-1))\n    print(a-b)\n\n", "\nimport bisect as b\n\nfrom collections import OrderedDict\n\nnum =[]\n\ndef Classy (pos, count, current):\n    if pos==18:\n        num.append(current)\n        return\n    Classy(pos+1, count, current*10)\n    \n    if (count < 3 ):\n        for i in range(1,10):\n            Classy(pos+1, count+1, current *10 + i)\n    \nClassy(0,0,0)\n\nnum=list(OrderedDict.fromkeys(num))\n\nnum.pop(0)\n\nnum.insert(len(num)+1, 1000000000000000000)\n\n\n\nT = int(input())\n\nwhile(0 < T):\n    L, R = [int(x) for x in input().split(' ')]\n    \n    ans = b.bisect_right(num, R, lo=0, hi=len(num)) - b.bisect_left(num, L, lo=0, hi=len(num))\n    print(int(ans))\n    \n    T=T-1"]