["class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        # cumulative sum from back\n        shifts[-1] = shifts[-1] % 26\n        \n        if len(shifts) >= 2:\n            for i in range(len(shifts) - 2, -1, -1):\n                shifts[i] += shifts[i + 1]\n                shifts[i] = shifts[i] % 26\n                \n        # shift characters\n        shifted_chars = []\n        \n        for i in range(len(S)):\n            shifted_ascii = (ord(S[i]) - 97 + shifts[i]) % 26 + 97\n            shifted_chars.append(chr(shifted_ascii))\n            \n        return \\\"\\\".join(shifted_chars)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        tot = sum(shifts)\n        ans = []\n        for i in range(len(S)):\n            ans.append(chr((ord(S[i]) - ord('a') + tot) % 26 + ord('a')))\n            tot -= shifts[i]\n        return ''.join(ans)", "def caesarCipherEncryptor(string, key):\n\\tnewString = ''\n\\tfor i in string:\n\\t\\tnewString += chr((ord(i) - ord('a') + key) % 26 + ord('a'))\n\\treturn newString\n\nclass Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        newString = \\\"\\\"\n        l = len(S)\n        \n        for i in range(1, len(shifts), 1):\n            shifts[l - 1 - i] += shifts[l - i]\n        j = 0\n        for i in S:\n            newString += caesarCipherEncryptor(i, shifts[j])\n            j += 1\n            \n        return newString\n        ", "class Solution:\n    CODE_Z = ord('z')\n    \n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        ret = ''\n        self.calc_shift_times(shifts)\n        for x in range(len(S)):\n            ret += self.shift(S[x], shifts[x])\n        \n        return ret\n      \n    @classmethod\n    def shift(cls, c, shift_times):\n        ret = ord(c) + shift_times % 26\n        if ret > cls.CODE_Z:\n            ret -= 26\n            \n        return chr(ret)\n    \n    @staticmethod\n    def calc_shift_times(shifts: List[int]):\n        for x in range(-2, -(len(shifts) + 1), -1):\n            shifts[x] += shifts[x+1]                     ", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:      \n        l = len(shifts)\n        s = list(S)[:l]\n        a = ord('a')\n        \n        # [1 + 3 + 5 + 7, 3 + 5 + 7, 5 + 7, 7]\n        for i in range(1, len(shifts)):\n            shifts[l - 1 - i] += shifts[l - i]\n      \n        print(shifts)\n        \n        for i in range(len(shifts)):\n            # (ord(s[i]) - a + shifts[i]) % 26 \uc774\ub807\uac8c \ubc14\uafbc \uc22b\uc790\ub97c a\uc5d0 \ub354\ud574\uc90c\n            s[i] = chr((ord(s[i]) - a + shifts[i]) % 26 + a)\n        \n        return ''.join(s)", "class Solution:\n    @staticmethod\n    def shiftChar(c, shift):\n        shift = shift % 26\n        nc = ord(c)\n        pos = nc - ord('a')\n        if 25 - pos < shift:\n            shift = -(26 - shift)\n        return chr(nc + shift)\n\n    def shiftingLetters(self, S: str, shifts) -> str:\n        for i in range(len(shifts) - 2, -1, -1):\n            shifts[i] += shifts[i + 1]\n        return ''.join([Solution.shiftChar(c, shift) for c, shift in zip(S, shifts)])", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        \n        \n        t = \\\"\\\"\n        s = sum(shifts)\n        for i in range(len(shifts)):\n            v = ord(S[i])+(s%26)\n            let = None\n            if v > 122:\n                let = chr(v % 122 + 96)\n            else: \n                let = chr(v)\n            s -= shifts[i]\n            t = t + let\n        \n        return t\n            \n            ", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        add=0\n        arr=list(S)\n        i=len(S)-1\n        while i>=0:\n            add+=shifts[i]\n            arr[i] = chr((((ord(arr[i]) - 97) + add) % 26) + 97)\n            i-=1\n        return ''.join(arr)", "import string\n\nclass Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        if len(S) == 0:\n            return ''\n        \n        # define alphabet mapping\n        letters = string.ascii_lowercase\n        num_letters = len(letters)\n        \n        # find the final positions of each letter before actually shifting\n        final_shifts = [shift % num_letters for shift in shifts]\n        \n        running_shift = 0\n        # start at the end so that we only have to go through list once\n        for i, shift in enumerate(final_shifts[::-1]):\n            index = len(final_shifts)-1-i\n            # skip the \\\"last\\\"\n            if index < len(final_shifts)-1:\n                final_shifts[index] = (final_shifts[index] + running_shift) % num_letters\n                # print('running_shift {} i {} running_shift {} shift {} value {}. {}'.format(\n                #     running_shift, index, running_shift, shift, final_shifts[i], final_shifts))\n            \n            # accumulate going forward\n            running_shift += shift\n                    \n        result = []\n        for i, shift in enumerate(final_shifts):\n            # find position of letter\n            letter = S[i]\n            # find position + shift\n            position = (letters.index(letter) + shift) % num_letters\n            shift_letter = letters[position]\n            result.append(shift_letter)\n\n        return ''.join(result)\n    \n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        output = \\\"\\\"\n        currShift = 0\n        for i in range(len(S)-1, -1, -1):\n            currShift += shifts[i]\n            newPos = (self.getPosition(S[i]) + currShift)%26\n            output = self.getLetter(newPos) + output\n        return output\n        \n    def getPosition(self, char):\n        return ord(char) - ord('a')\n        \n    def getLetter(self, position):\n        return chr(ord('a') + position)\n        \n        ", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        n = len(shifts)\n        A = [0] * n\n        \n        def shifting(ch, k):\n            return chr(((ord(ch) - 97 + k) % 26) + 97)\n        \n        A[-1] = shifts[-1]\n        \n        for i in range(n-2, -1, -1):\n            A[i] = A[i+1] + shifts[i]\n            \n        return ''.join([shifting(c, A[i]) for i, c in enumerate(list(S))])\n            \n        \n            \n        \n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        cnt = 0\n        acc_shifts = []\n        \n        for n in shifts[::-1]:\n            cnt += n\n            acc_shifts.append(cnt)\n        \n        acc_shifts = acc_shifts[::-1]\n        \n        new_s = []\n        \n        a_asc = ord('a')\n        z_asc = ord('z')\n        \n        for i, n in enumerate(acc_shifts):\n            new_ascii = ord(S[i]) + n\n            new_ascii = a_asc + (new_ascii - a_asc) % 26\n            new_s.append(chr(new_ascii))\n        \n        return ''.join(new_s)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        def shift(s, n):\n            curr = ord(s)-97\n            curr = 97 + (curr+n)%26\n            return chr(curr)\n        S = list(S)\n        shifts = shifts[::-1]\n        for i in range(1, len(shifts)):\n            shifts[i] += shifts[i-1]\n        shifts = shifts[::-1]\n        \n        for i in range(len(shifts)):\n            S[i] = shift(S[i], shifts[i])\n        return ''.join(S)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        a = ''\n        cumshift = 0\n        for pos in range(len(S)-1, -1, -1):\n            sh = shifts[pos] % 26\n            cumshift += sh\n            cumshift = cumshift % 26\n            ch = S[pos]\n            #if (ch, cumshift) in cache:\n            #    chn = cache.get((ch, cumshift))\n            #else:\n            chn = shift(ch, cumshift)\n            #    cache[(ch, cumshift)] = chn\n            a = chn + a\n        return a\n        \nzval = 122 # ord('Z') if ch.isupper() else ord('z')\naval = 97 # ord('A') if ch.isupper() else ord('a')\n\ndef shift(ch, offset):\n    offset = offset % 26\n    och = ord(ch) \n    nch = och + offset\n    if nch > zval:\n        nch = aval + (nch - zval -1)\n    return chr(nch)\n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        def shift(ch: str, n: int) -> str:\n            print(ch, n)\n            return chr((ord(ch) - ord('a') + n) % 26 + ord('a'))\n        s = list(reversed(shifts))\n        for i in range(1, len(s)):\n            s[i] = s[i] + s[i - 1]\n        res = [shift(ch, n) for ch, n in zip(S, reversed(s))]\n        return \\\"\\\".join(res)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        S_lst = list(S)\n        plus = 0\n        for i in range(len(shifts) - 1, -1, -1):\n            plus += shifts[i]\n            temp = ord(S_lst[i]) + plus % 26\n\n            if temp > 122:\n                temp = temp % 123 + 97\n            S_lst[i] = chr(temp)\n\n        return ''.join(S_lst)\n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        ln = len(shifts)\n        new = [sum(shifts)]\n        i = 0\n        while i < ln-1:\n            new.append(new[-1]-shifts[i])\n            i += 1\n        \n        S = list(S)\n        ans = ''\n        for i,shift in enumerate(new):\n            S[i] = chr(((ord(S[i]) - ord('a') + shift) % 26) + ord('a'))\n            \n        return ''.join(S)\n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        a = ''\n        cumshift = 0\n        for pos in range(len(S)-1, -1, -1):\n            cumshift = (cumshift + shifts[pos]) % 26\n            ch = S[pos]\n            chn = shift(S[pos], cumshift)\n            a = chn + a\n        return a\n        \ndef shift(ch, offset):\n    #zval = 122 # ord('Z') if ch.isupper() else ord('z')\n    #aval = 97 # ord('A') if ch.isupper() else ord('a')\n    nch = ord(ch) + offset\n    if nch > ord('z'):\n        nch = ord('a') + (nch - ord('z') -1)\n    return chr(nch)\n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        x = sum(shifts)\n        ans = []\n        for i, s in enumerate(S):\n            idx = ord(s)- ord('a')\n            ans.append(chr(ord('a')+(idx+x)%26))\n            x-=shifts[i]\n        return \\\"\\\".join(ans)\n            ", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        ans = []\n        X = sum(shifts) % 26\n        for i, c in enumerate(S):\n            index = ord(c) - ord('a')\n            ans.append(chr(ord('a') + (index + X) % 26))\n            X = (X - shifts[i]) % 26\n            \n        return ''.join(ans)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        n = len(shifts)\n        ss = [0] * n\n        ss[-1] = shifts[-1] % 26\n        for i in range(n - 2, -1, -1):\n            ss[i] = (shifts[i] + ss[i + 1]) % 26\n        \n        # ORD_a = 97\n        # ORD_z = 122\n        \n        final_chars = [None] * n\n        for i, ch in enumerate(S):\n            _ord = ord(ch) + ss[i]\n            if _ord > 122:\n                _ord -= 26\n            final_chars[i] = chr(_ord)\n        \n        return ''.join(final_chars)\n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        \n#         def do(s, x):\n#             return chr((ord(s)-ord('a')+x)%26+ord('a'))\n        \n#         S = list(S)\n#         for i, x in enumerate(shifts):\n#             for j, c in enumerate(S[:i+1]):\n#                 S[j] = do(c, x)\n#         return \\\"\\\".join(S)\n        \n        def do(s, x):\n            return chr((ord(s)-ord('a')+x)%26+ord('a'))\n\n        pre = []\n        for s in shifts[::-1]:\n            if(not pre):\n                pre.append(s)\n            else:\n                pre.append(pre[-1]+s)\n        \n        S = list(S)\n        for i in range(len(S)):\n            S[i] = do(S[i], pre.pop())\n        return \\\"\\\".join(S)", "from collections import deque\n\nclass Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        offset = ord('a')\n        wrap = 26\n        current_shift = 0\n        result = deque()\n        for c, shift in reversed(list(zip(S, shifts))):\n            current_shift = (current_shift + shift) % wrap\n            after = chr(offset + (ord(c) + current_shift - offset) % wrap)\n            result.append(after)\n        return ''.join(reversed(result))", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        back_sum = [0] * len(shifts)\n        N = 26\n        back_sum = 0\n        new_str = ''\n        for i in range(len(S)-1, -1, -1):\n            back_sum += shifts[i]\n            new_str += chr((ord(S[i])-ord('a')+back_sum)%N+ord('a'))\n        return new_str[::-1]", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        for i in range(len(shifts) - 2, -1, -1):\n            shifts[i] += shifts[i + 1]\n        \n        res = [None] * len(S)\n        for i in range(len(S)):\n            res[i] = chr(((ord(S[i]) - ord(\\\"a\\\") + shifts[i]) % 26) + ord(\\\"a\\\"))\n        return \\\"\\\".join(res)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        s, ans = [0], []\n        for n in reversed(shifts):\n            s.append((s[-1] + n) % 26) \n        s = reversed(s[1:])\n        \n        for i, c in enumerate(S):\n            n = chr((ord(c) - ord('a') + next(s)) % 26 + ord('a'))\n            print(n)\n            ans.append(n)\n        return ''.join(ans)\n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        n, cumsum, res = len(S), 0, \\\"\\\"\n        for i in range(n-1, -1, -1):\n            cumsum += shifts[i]\n            res = chr(ord('a') + (ord(S[i]) - ord('a') + cumsum) % 26) + res\n        return res", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        S_lst = list(S)\n        plus = 0\n        for i in range(len(shifts) - 1, -1, -1):\n            plus += shifts[i]\n            temp = ord(S_lst[i]) + plus % 26\n\n            if temp > ord('z'):\n                temp = temp % (ord('z') + 1) + ord('a')\n            S_lst[i] = chr(temp)\n\n        return ''.join(S_lst)\n", "def shift_char(char,num):\n\n    idx = ord(char) - ord('a')\n    idx = idx + num\n    idx %= 26\n\n    return chr(ord('a') + idx)\n\nclass Solution:\n    \n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        \n        res = list(S)\n        \n        for i in range(len(shifts)-2,-1,-1):\n            shifts[i] += shifts[i+1]\n        \n        for i in range(len(S)):\n            res[i] = shift_char(res[i],shifts[i])\n        \n        return ''.join(res)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        l = len(shifts)\n        s = list(S)[:l]\n        a = ord('a')\n        for i in range(1, len(shifts), 1):\n            shifts[l - 1 - i] += shifts[l - i]\n        # print(shifts)\n        for i in range(len(shifts)):\n            s[i] = chr((ord(s[i]) - a + shifts[i]) % 26 + a)\n        return ''.join(s)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        nextS = shifts[0] % 26\n        for i in range(len(S)):\n            curr, nextS = nextS, shifts[i+1] % 26 if i < len(S) - 1 else 0\n            shifts[0] += curr if i > 0 else 0\n            if i < len(S) - 1:\n                shifts[i+1] = -curr\n        for i in range(len(S)):\n            shifts[i] += shifts[i-1] if i > 0 else 0\n        return ''.join([chr((ord(c) - 97 + s) % 26 + 97) for c, s in zip(S, shifts)])", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        suffix_sum_shifts = []\n        suffix_sum = 0\n        for shift in shifts[::-1]:\n            suffix_sum += shift\n            suffix_sum %= 26\n            suffix_sum_shifts.append(suffix_sum)\n        suffix_sum_shifts = suffix_sum_shifts[::-1]\n        \n        shifted_str = ''\n        for i in range(len(S)):\n            new_ord = (ord(S[i]) - ord('a') + suffix_sum_shifts[i]) % 26 + ord('a')\n            shifted_str += chr(new_ord)\n        return shifted_str\n            \n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        if len(S) == 0:\n            return \\\"\\\"\n        \n        sum_shifts = [sum(shifts)] * len(shifts)\n        for i in range(1, len(shifts)):\n            sum_shifts[i] = sum_shifts[i-1]-shifts[i-1]\n        shifts = sum_shifts\n        ret = []\n        for i in range(len(S)):\n            ret.append(chr(97+ (ord(S[i]) - 97 + shifts[i])%26))\n            \n        return \\\"\\\".join(ret)", "import string\nclass Solution:\n    def shiftingLetters(self, S, shifts):\n        start = ord('a')\n        res = []\n        for i in reversed(range(len(shifts)-1)):\n            shifts[i] += shifts[i+1]\n        for i in range(len(S)):\n            shifted = chr((ord(S[i]) - start + shifts[i]) % 26 + start)\n            res.append(shifted)\n        return ''.join(res)", "# S[i] shifts sum(shifts[i:]) times. pre-compute the cummulative sum of shifts from right to left\n#class Solution:\n#    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n#        N = len(S)\n#        cumsum = [0] * N\n#        cumsum[-1] = shifts[-1]\n#        for i in range(N-2,-1,-1):\n#            cumsum[i] = cumsum[i+1] + shifts[i]\n#        #print(cumsum)\n#        res = []\n#        for i in range(N):\n#            c = S[i]\n#            res.append(chr((ord(c) - ord('a') + cumsum[i]) % 26 + ord('a')))\n#        return ''.join(res)\n\nclass Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        N = len(S)\n        cumsum = [0] * N\n        cumsum[-1] = shifts[-1] % 26\n        for i in range(N-2,-1,-1):\n            cumsum[i] = (cumsum[i+1] + shifts[i]) % 26\n        #print(cumsum)\n        res = []\n        for i in range(N):\n            c = S[i]\n            res.append(chr((ord(c) - ord('a') + cumsum[i]) % 26 + ord('a')))\n        return ''.join(res)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        \n        res = [None] * len(S)\n        def shift(c, s):\n            return chr(((ord(c) - ord(\\\"a\\\") + s) % 26) + ord(\\\"a\\\"))\n        \n        res[-1] = shift(S[-1], shifts[-1])\n        for i in range(len(shifts) - 2, -1, -1):\n            shifts[i] += shifts[i + 1]\n            res[i] = shift(S[i], shifts[i])\n\n        return \\\"\\\".join(res)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        '''\n        for pos, shift_offset in enumerate(shifts):\n            n = ''\n            for cp, ch in enumerate(S):\n                if cp <= pos:\n                    ch = shift(ch, shift_offset)\n                n += ch\n            S = n\n        return S'''\n        cache = {}\n        a = ''\n        cumshift = 0\n        for pos in range(len(S)-1, -1, -1):\n            sh = shifts[pos] % 26\n            cumshift += sh\n            cumshift = cumshift % 26\n            ch = S[pos]\n            if (ch, cumshift) in cache:\n                chn = cache.get((ch, cumshift))\n            else:\n                chn = shift(ch, cumshift)\n                cache[(ch, cumshift)] = chn\n            a = chn + a\n        return a\n        '''    \n        n = ''\n        shifts = [s % 26 for s in shifts]\n        for cp, ch in enumerate(S):\n            offset = sum(shifts[cp:]) % 26\n            if (ch, offset) in cache:\n                chn = cache.get((ch, offset))\n            else:\n                chn = shift(ch, offset)\n                cache[(ch, offset)] = chn\n            n += chn\n        return n\n        '''\n        \ndef shift(ch, offset):\n    zval = 122 # ord('Z') if ch.isupper() else ord('z')\n    aval = 97 # ord('A') if ch.isupper() else ord('a')\n    offset = offset % 26\n    och = ord(ch) \n    nch = och + offset\n    if nch > zval:\n        nch = aval + (nch - zval -1)\n    return chr(nch)\n", "import string\nclass Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        letters = string.ascii_lowercase\n        letter_to_idx = dict()\n        for i, l in enumerate(letters):\n            letter_to_idx[l] = i\n        \n        suffix = [sum(shifts)]\n        for i in range(1, len(shifts)):\n            suffix.append(suffix[-1]-shifts[i-1])\n        \n        res = ''\n        for i, c in enumerate(S):\n            res += letters[(letter_to_idx[c]+suffix[i])%26]\n            \n        return res", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        shifted_str = [None] * len(S)\n        total_shifts = shifts[-1]\n        shifted_str[-1] = self.shift_by_n(S[-1], total_shifts)\n        for i in range(len(shifts)-2, -1, -1):\n            total_shifts += shifts[i]\n            shifted_str[i] = self.shift_by_n(S[i], total_shifts)\n        return \\\"\\\".join(shifted_str)\n        \n   \n    def shift_by_n(self, char: str, n: int) -> str:\n        n = n % 26\n        if ord(char) + n <= 122:\n            shifted_char_position = ord(char) + n\n            return chr(shifted_char_position)\n        \n        n = n - (122 - ord(char)) - 1           \n        shifted_char_position = ord('a') + n\n        return chr(shifted_char_position)\n    \n    \n    ", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n#         output = list(S)\n#         if len(S) == 0 or len(S) != len(shifts): return output\n#         alphabet = \\\"abcdefghijklmnopqrstuvwxyz\\\"\n#         for i, k in enumerate(shifts):\n#             # shifting logic and make dict\n#             cipherString = alphabet[k%len(alphabet):] + alphabet[:k%len(alphabet)]\n#             cipher = dict(zip(alphabet, cipherString))\n#             for j in range(i + 1):\n#                 # add to output\n#                 output[j] = cipher[output[j]]\n            \n#         return ''.join(output)\n\n        output = list(S)\n        if len(S) == 0 or len(S) != len(shifts): return output\n        alphabet = \\\"abcdefghijklmnopqrstuvwxyz\\\"\n        shift = sum(shifts)\n        for i, l in enumerate(S):\n            cipherString = alphabet[shift%len(alphabet):] + alphabet[:shift%len(alphabet)]\n            cipher = dict(zip(alphabet, cipherString))\n            output[i] = cipher[l]\n            shift -= shifts[i]\n            \n        return ''.join(output)\n            \n        ", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        char = 'abcdefghijklmnopqrstuvwxyz'\n        s = 0\n        res = []\n        for i in range(len(shifts)-1, -1, -1):\n            s += shifts[i]\n            res.insert(0, char[(char.index(S[i]) + s) % 26])\n        return ''.join(res)", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        def shift(char, k):\n            idx = ord(char) - ord('a')\n            return chr(ord('a') + (idx + k) % 26)\n        \n        \n        suffix = 0\n        ans = []\n        for i in range(len(shifts) - 1, -1, -1):\n            suffix += shifts[i]\n            ans.append(shift(S[i], suffix))\n        return ''.join(ans[::-1])", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        suffix, N = [], len(S)\n        for ii in range(N - 1, -1, -1):\n            tmp = (shifts[ii] + (0 if (ii == N - 1) else suffix[0])) % 26\n            suffix.insert(0, tmp)\n        res = \\\"\\\"\n        for ii, jj in zip(S, suffix):\n            tmp = ord(ii) + jj\n            if tmp > ord(\\\"z\\\"):\n                tmp -= 26\n            res += chr(tmp)\n        return res", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        alphabets = 'abcdefghijklmnopqrstuvwxyz'\n        n2s = {i: s for i, s in enumerate('abcdefghijklmnopqrstuvwxyz')}\n        s2n = {s: i for i, s in list(n2s.items())}\n        S_res = []\n        assert len(S) == len(shifts)\n        #for s, shift in zip(S, shifts):\n        N = len(S)\n        roll_over = 0\n        for i in range(N):\n            s = S[N - i - 1]\n            shift = shifts[N - i - 1]\n            roll_over = (shift + roll_over) % 26\n            S_res.insert(0, n2s[(s2n[s] + roll_over) % 26])\n        return ''.join(S_res)\n        \n", "class Solution:\n    \n    \n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        new_shift = []\n        si = 0\n        for i in range(len(shifts)-1,-1,-1):\n            si += shifts[i]\n            new_shift.insert(0, si)\n        \n        ans = \\\"\\\"\n        for i, s in enumerate(S):\n            if ord(s) + new_shift[i] > ord('z'):\n                ans += chr(ord('a')  + ((ord(s) -ord('a') + new_shift[i]) % 26))\n            else:\n                ans += chr(ord(s) + new_shift[i])\n        return ans", "class Solution:\n    \n    \n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        new_shift = []\n        \n        si = 0\n        for i in range(len(shifts)-1,-1,-1):\n            si += shifts[i]\n            new_shift.insert(0, si)\n        \n        ans = \\\"\\\"\n        for i, s in enumerate(S):\n            if ord(s) + new_shift[i] > ord('z'):\n                ans += chr(ord('a')  + ((ord(s) -ord('a') + new_shift[i]) % 26))\n            else:\n                ans += chr(ord(s) + new_shift[i])\n            \n        return ans\n        ", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        '''\n        for pos, shift_offset in enumerate(shifts):\n            n = ''\n            for cp, ch in enumerate(S):\n                if cp <= pos:\n                    ch = shift(ch, shift_offset)\n                n += ch\n            S = n\n        return S'''\n        cache = {}\n        a = []\n        cumshift = 0\n        for pos in range(len(S)-1, -1, -1):\n            sh = shifts[pos] % 26\n            cumshift += sh\n            cumshift = cumshift % 26\n            ch = S[pos]\n            if (ch, cumshift) in cache:\n                chn = cache.get((ch, cumshift))\n            else:\n                chn = shift(ch, cumshift)\n                cache[(ch, cumshift)] = chn\n            a.insert(0, chn)\n        return ''.join(a)\n        '''    \n        n = ''\n        shifts = [s % 26 for s in shifts]\n        for cp, ch in enumerate(S):\n            offset = sum(shifts[cp:]) % 26\n            if (ch, offset) in cache:\n                chn = cache.get((ch, offset))\n            else:\n                chn = shift(ch, offset)\n                cache[(ch, offset)] = chn\n            n += chn\n        return n\n        '''\n        \ndef shift(ch, offset):\n    zval = 122 # ord('Z') if ch.isupper() else ord('z')\n    aval = 97 # ord('A') if ch.isupper() else ord('a')\n    offset = offset % 26\n    och = ord(ch) \n    nch = och + offset\n    if nch > zval:\n        nch = aval + (nch - zval -1)\n    return chr(nch)\n", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        total_shifts = [0]\n        for s in reversed(shifts):\n            total_shifts = [s + total_shifts[0]] + total_shifts\n            \n        output = \\\"\\\"\n        for c, shift in zip(S, total_shifts[:-1]):\n            output += chr((ord(c) - ord('a') + shift) % 26 + ord('a'))\n        return output\n        ", "class Solution:\n    def shiftingLetters(self, S: str, shift: List[int]) -> str:\n        j = 1\n        S = list(S)\n        resTot = []\n        for i in reversed(shift):\n            if resTot:\n                resTot = [resTot[0] + i] + resTot\n            else:\n                resTot = [i]\n        #print(resTot)\n        for i in range(len(resTot)):\n            asci_val = ord(S[i]) + (resTot[i] % 26) - ord('a')\n            S[i] = chr((asci_val % 26) + ord('a'))\n        \n        # for i in shifts:\n        #     for k in range(j):\n        #         asci_val = (ord(S[k]) + i - ord('a')) % 26\n        #         S[k] = chr(asci_val + ord('a'))\n        #     j += 1\n        return \\\"\\\".join(S)", "import string\nclass Solution:\n    def shiftingLetters(self, S, shifts):\n        start = ord('a')\n        res = []\n        shifter = lambda char, k: chr((ord(char) - start + k) % 26 + start)\n        for i in reversed(range(len(shifts)-1)):\n            shifts[i] += shifts[i+1]\n        for i in range(len(S)):\n            res.append(shifter(S[i], shifts[i]))\n        return ''.join(res)", "\\\"\\\"\\\"\n    1. Problem Summary / Clarifications / TDD:\n\n\\\"\\\"\\\"\n\nclass Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        \n        s_len = len(S)\n        \n        for i in range(s_len - 2, -1, -1):\n            shifts[i] += shifts[i + 1]\n        \n        new_s = []\n        for i in range(s_len):\n            new_s.append(chr(ord('a') + (ord(S[i]) - ord('a') + shifts[i])%26))\n            \n        return ''.join(new_s)\n        ", "class Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        s = sum(shifts)\n        n = 0\n        a = []\n        r = ''\n        \n        for i in shifts:\n            a.append(s-n)\n            n += i\n            \n        for i in range(len(a)):\n            b = a[i] % (ord('z') - ord('a') + 1)\n            c = ord(S[i]) + b\n            if c > ord('z'):\n                c = ord('a') + c - ord('z') - 1\n            r += chr(c)\n            \n        return r", "'''\n180 + c + \n\n'''\nclass Solution:\n    def shiftingLetters(self, S: str, shifts: List[int]) -> str:\n        sol = \\\"\\\"\n        cum = sum(shifts)\n        for i in range(len(S)):\n            if cum + ord(S[i]) > 122:\n                ch = chr(((cum - (122 - ord(S[i]))) % 26) + 96)\n                if ch == \\\"`\\\":\n                    sol += \\\"z\\\"\n                else:\n                    sol += ch\n            else:\n                sol += chr(ord(S[i]) + cum)\n            \n            cum -= shifts[i]\n        return sol\n            \n        "]