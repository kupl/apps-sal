["import re\n\nNEG, DOT, _, *DIGS = \"\u8d1f\u70b9 \u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\"\nPOWS = \" \u5341 \u767e \u5343 \u4e07\".split(' ')\nNUMS = {str(i):c for i,c in enumerate(DIGS)}\nfor n in range(10): NUMS[str(n+10)] = POWS[1] + DIGS[n]*bool(n)\n\n\ndef to_chinese_numeral(n):\n    ss = str(abs(n)).split('.')\n    return NEG*(n<0) + parse(ss[0]) + (len(ss)>1 and decimals(ss[1]) or '')\n\ndef decimals(digs): return DOT + ''.join(NUMS[d] for d in digs)\n\ndef parse(s):\n    if s in NUMS: return NUMS[s]\n    s = ''.join(reversed([ NUMS[d] + POWS[i]*(d!='0') for i,d in enumerate(reversed(s)) ]))\n    return re.sub(f'\u96f6+$|(?<=\u96f6)\u96f6+', '', s)", "numerals = {\n        \"-\":\"\u8d1f\",\n        \".\":\"\u70b9\",\n        0:\"\u96f6\",\n        1:\"\u4e00\",\n        2:\"\u4e8c\",\n        3:\"\u4e09\",\n        4:\"\u56db\",\n        5:\"\u4e94\",\n        6:\"\u516d\",\n        7:\"\u4e03\",\n        8:\"\u516b\",\n        9:\"\u4e5d\",\n        10:\"\u5341\",\n        100:\"\u767e\",\n        1000:\"\u5343\",\n        10000:\"\u4e07\"\n    }\n\ndef to_chinese_numeral(n, keep_ten=False, trailing_zero=False):\n    if trailing_zero: return numerals[0] + to_chinese_numeral(n, keep_ten)\n    if n < 0: return numerals['-'] + to_chinese_numeral(-n)\n    if n % 1: return to_chinese_numeral(n // 1) + numerals['.'] + ''.join(numerals[int(d)] for d in str(n).split('.')[1])\n    if n >= 10000: return to_chinese_numeral(n // 10000) + numerals[10000] + bool(n % 10000) * to_chinese_numeral(n % 10000, True, n % 10000 < 10000 // 10)\n    if n >= 1000: return numerals[n // 1000] + numerals[1000] + bool(n % 1000) * to_chinese_numeral(n % 1000, True, n % 1000 < 1000 // 10)\n    if n >= 100: return numerals[n // 100] + numerals[100] + bool(n % 100) * to_chinese_numeral(n % 100, True, n % 100 < 100 // 10)\n    if n >= 10: return bool(keep_ten or n // 10 > 1) * numerals[n // 10] + numerals[10] + bool(n % 10) * to_chinese_numeral(n % 10, True)\n    return numerals[n]", "def to_chinese_numeral(n):\n    return Chinese_Encoder(n).translated()\n    \nclass Chinese_Encoder(object):\n    def __init__(self, number ):\n        self.number     = abs(number) \n        self.minus      = ('',\"\u8d1f\")[number<0]\n        self.str_num    = str(self.number)\n        self.translated = (self.encod, self.encod_dec)[type(number) == float]\n        \n    @property\n    def get_tenth(self):\n        return [self._translate(f\"1{'0'* i}\") for i in range(1,len(self.str_num))][::-1]\n            \n    @property\n    def get_num(self):\n        return list(map(self._translate, self.str_num))\n    \n    @staticmethod\n    def _translate(n):\n        return {  0:\"\u96f6\", 1:\"\u4e00\", 2:\"\u4e8c\", 3:\"\u4e09\", 4:\"\u56db\", 5:\"\u4e94\",\n                  6:\"\u516d\" ,7:\"\u4e03\", 8:\"\u516b\", 9:\"\u4e5d\", 10:\"\u5341\", 100:\"\u767e\", 1000:\"\u5343\", 10000:\"\u4e07\" }.get(int(n))\n            \n    def encod(self):\n        if self.number < 20: return f'{self.minus}{self._translate(self.str_num)}' if self.number <= 10 else f'{self.minus}\u5341{self.get_num[-1]}'\n        list_num ,tenth, nums = [self.minus], self.get_tenth, self.get_num\n        for i, n in enumerate(nums[:-1]):\n            if n != '\u96f6':  list_num.append(f'{n}{tenth[i]}')\n            if n == '\u96f6' and list_num[-1] != n:  list_num.append(n)\n        return ''.join(list_num + [nums[-1]]).strip('\u96f6')\n                \n    def encod_dec(self): \n        dot = self.str_num.find('.')\n        return f'{self.minus}{ Chinese_Encoder(int(self.str_num[:dot])).translated() }\u70b9{\"\".join(map(self._translate, self.str_num[dot+1:] ))}'\n", "def to_chinese_numeral(n):\n    numerals = {\n        \"-\":\"\u8d1f\",\n        \".\":\"\u70b9\",\n        0:\"\u96f6\",\n        1:\"\u4e00\",\n        2:\"\u4e8c\",\n        3:\"\u4e09\",\n        4:\"\u56db\",\n        5:\"\u4e94\",\n        6:\"\u516d\",\n        7:\"\u4e03\",\n        8:\"\u516b\",\n        9:\"\u4e5d\",\n        10:\"\u5341\",\n        100:\"\u767e\",\n        1000:\"\u5343\",\n        10000:\"\u4e07\"\n    }\n    lst=[]\n    counter1=n\n    newstr=''\n    digits='123456789'\n    if counter1==0:\n        return numerals[0]\n    if counter1<0:\n        lst.append(numerals[\"-\"])\n        counter1*=-1\n    read=str(counter1).split('.')\n    if len(read[0])==5:\n        lst.append(numerals[int(read[0][0])])\n        lst.append(numerals[10000])\n        if read[0][1] in digits:\n            lst.append(numerals[int(read[0][1])])\n            lst.append(numerals[1000])\n        if read[0][1] not in digits:\n            if read[0][2] in digits:\n                lst.append(numerals[0])\n        if read[0][2] in digits:\n            lst.append(numerals[int(read[0][2])])\n            lst.append(numerals[100])\n        if read[0][2] not in digits:\n            if read[0][3] in digits:\n                lst.append(numerals[0])\n        if read[0][3] in digits:\n            if read[0][3]=='1':\n                lst.append(numerals[1])\n                lst.append(numerals[10])\n            elif read[0][3]!='1':\n                lst.append(numerals[int(read[0][3])])\n                lst.append(numerals[10])\n        if read[0][3] not in digits:\n            if read[0][4] in digits:\n                lst.append(numerals[0])\n        if read[0][4] in digits:\n            lst.append(numerals[int(read[0][4])])\n    if len(read[0])==4:\n        lst.append(numerals[int(read[0][0])])\n        lst.append(numerals[1000])\n        if read[0][1] in digits:\n            lst.append(numerals[int(read[0][1])])\n            lst.append(numerals[100])\n        if read[0][1] not in digits:\n            if read[0][2] in digits:\n                lst.append(numerals[0])\n        if read[0][2] in digits:\n            if read[0][2]=='1':\n                lst.append(numerals[1])\n                lst.append(numerals[10])\n            elif read[0][2]!='1':\n                lst.append(numerals[int(read[0][2])])\n                lst.append(numerals[10])\n        if read[0][2] not in digits:\n            if read[0][3] in digits:\n                lst.append(numerals[0])\n        if read[0][3] in digits:\n            lst.append(numerals[int(read[0][3])])\n    if len(read[0])==3:\n        lst.append(numerals[int(read[0][0])])\n        lst.append(numerals[100])\n        if read[0][1] in digits:\n            if read[0][1]==1:\n                lst.append(numerals[1])\n                lst.append(numerals[10])\n            if read[0][1]!=1:\n                lst.append(numerals[int(read[0][1])])\n                lst.append(numerals[10])\n        if read[0][1] not in digits:\n            if read[0][2] in digits:\n                lst.append(numerals[0])\n        if read[0][2] in digits:\n            lst.append(numerals[int(read[0][2])])\n    if len(read[0])==2:\n        if read[0][0]=='1':\n            lst.append(numerals[10])\n        if read[0][0]!='1':\n            lst.append(numerals[int(read[0][0])])\n            lst.append(numerals[10])\n        if read[0][1] in digits:\n            lst.append(numerals[int(read[0][1])])\n    if len(read[0])==1:\n        lst.append(numerals[int(read[0])])\n    if '.' in str(n):\n        lst.append(numerals['.'])\n        counter2=round(n,8)\n        read2=str(counter2).split('.')\n        if len(read2[1])==1:\n            lst.append(numerals[int(read2[1][0])])\n        if len(read2[1])==2:\n            lst.append(numerals[int(read2[1][0])])\n            lst.append(numerals[int(read2[1][1])])\n        if len(read2[1])==3:\n            lst.append(numerals[int(read2[1][0])])\n            lst.append(numerals[int(read2[1][1])])\n            lst.append(numerals[int(read2[1][2])])\n        if len(read2[1])==4:\n            lst.append(numerals[int(read2[1][0])])\n            lst.append(numerals[int(read2[1][1])])\n            lst.append(numerals[int(read2[1][2])])\n            lst.append(numerals[int(read2[1][3])])\n        if len(read2[1])==5:\n            lst.append(numerals[int(read2[1][0])])\n            lst.append(numerals[int(read2[1][1])])\n            lst.append(numerals[int(read2[1][2])])\n            lst.append(numerals[int(read2[1][3])])\n            lst.append(numerals[int(read2[1][4])])\n        if len(read2[1])==6:\n            lst.append(numerals[int(read2[1][0])])\n            lst.append(numerals[int(read2[1][1])])\n            lst.append(numerals[int(read2[1][2])])\n            lst.append(numerals[int(read2[1][3])])\n            lst.append(numerals[int(read2[1][4])])\n            lst.append(numerals[int(read2[1][5])])\n        if len(read2[1])==7:\n            lst.append(numerals[int(read2[1][0])])\n            lst.append(numerals[int(read2[1][1])])\n            lst.append(numerals[int(read2[1][2])])\n            lst.append(numerals[int(read2[1][3])])\n            lst.append(numerals[int(read2[1][4])])\n            lst.append(numerals[int(read2[1][5])])\n            lst.append(numerals[int(read2[1][6])])\n        if len(read2[1])==8:\n            lst.append(numerals[int(read2[1][0])])\n            lst.append(numerals[int(read2[1][1])])\n            lst.append(numerals[int(read2[1][2])])\n            lst.append(numerals[int(read2[1][3])])\n            lst.append(numerals[int(read2[1][4])])\n            lst.append(numerals[int(read2[1][5])])\n            lst.append(numerals[int(read2[1][6])])\n            lst.append(numerals[int(read2[1][7])])\n    newstr=''.join(lst)\n    return newstr", "from itertools import starmap\n\nnumerals = {\n    \"-\":\"\u8d1f\",\n    \".\":\"\u70b9\",\n    '0':\"\u96f6\",\n    '1':\"\u4e00\",\n    '2':\"\u4e8c\",\n    '3':\"\u4e09\",\n    '4':\"\u56db\",\n    '5':\"\u4e94\",\n    '6':\"\u516d\",\n    '7':\"\u4e03\",\n    '8':\"\u516b\",\n    '9':\"\u4e5d\",\n    1:\"\",\n    2:\"\u5341\",\n    3:\"\u767e\",\n    4:\"\u5343\",\n    5:\"\u4e07\"\n}\n\ndef helper(i, s):\n    if i:\n        return ''.join(map(numerals.get, s))\n    l, res = len(s), []\n    for j,c in enumerate(s):\n        if c == '0':\n            if i or not (res and res[-1] == numerals[c]):\n                res.append(numerals[c])\n        else:\n            if j or c != '1' or l != 2:\n                res.append(numerals[c])\n            res.append(numerals[l-j])\n    if res[0] != res[-1] == numerals['0']:\n        del res[-1]\n    return ''.join(res)\n\ndef to_chinese_numeral(n):\n    x, s = '', str(n)\n    if s[0] == '-': x, s = numerals['-'], s[1:]\n    return x + numerals['.'].join(starmap(helper, enumerate(s.split('.'))))", "def to_chinese_numeral(n):\n    numerals = {\"-\":\"\u8d1f\", \".\":\"\u70b9\", 0:\"\u96f6\", 1:\"\u4e00\", 2:\"\u4e8c\", 3:\"\u4e09\", 4:\"\u56db\", 5:\"\u4e94\", 6:\"\u516d\", 7:\"\u4e03\", 8:\"\u516b\", 9:\"\u4e5d\", 10:\"\u5341\", 100:\"\u767e\", 1000:\"\u5343\", 10000:\"\u4e07\"}\n    start, end = '', ''\n    if str(n).count('.') == 1:\n        end, s = numerals['.'], str(n)\n        for i in range(s.index('.') + 1, len(s)):\n            end += numerals[int(s[i])]\n        n = int(s[:s.index('.')])\n    if n < 0:\n        start += numerals['-']\n        n *= -1\n    if n < 11:\n        start += numerals[n]\n        return start + end\n    elif n < 20:\n        return start + numerals[10] + numerals[n % 10]\n    tth, n = n // 10000, n - n // 10000 * 10000\n    th, n = n // 1000, n - n // 1000 * 1000\n    h, n = n // 100, n - n // 100 * 100\n    t, n = n // 10, n - n // 10 * 10\n    if tth > 0 and th == h == t == n == 0:\n        start += numerals[tth] + numerals[10000]\n    else:\n        if tth > 0:\n            start += numerals[tth] + numerals[10000]\n        if th > 0 and h == t == n == 0:\n            start += numerals[th] + numerals[1000]\n        else:\n            if th > 0:\n                start += numerals[th] + numerals[1000]\n            elif tth > 0 and th == 0:\n                start += numerals[0]\n            if h > 0 and t == n == 0:\n                start += numerals[h] + numerals[100]\n            else:\n                if h > 0:\n                    start += numerals[h] + numerals[100]\n                elif th > 0 and h == 0:\n                    start += numerals[0]\n                if t > 0:\n                    start += numerals[t] + numerals[10]\n                elif h > 0 and t == 0:\n                    start += numerals[0]\n                if n > 0:\n                    start += numerals[n]\n    \n    return start + end\n", "import re, math\nnumerals = {\n        \"-\":\"\u8d1f\",\n        \".\":\"\u70b9\",\n        0:\"\u96f6\",\n        1:\"\u4e00\",\n        2:\"\u4e8c\",\n        3:\"\u4e09\",\n        4:\"\u56db\",\n        5:\"\u4e94\",\n        6:\"\u516d\",\n        7:\"\u4e03\",\n        8:\"\u516b\",\n        9:\"\u4e5d\",\n        10:\"\u5341\",\n        100:\"\u767e\",\n        1000:\"\u5343\",\n        10000:\"\u4e07\"\n    }\n\ndef decimal(n):\n    out = []\n    for x in list(n):\n        out.append(numerals[int(x)])\n    return ''.join(out)\ndef to_chinese_numeral(n):\n    c, bla = divmod(n, 10)\n    a, shi = divmod(c, 10)\n    b, bai = divmod(a, 10)\n    wan, qian = divmod(b, 10) \n    if n == 0:\n        return numerals[0]\n    if n < 0:\n        return numerals['-'] + to_chinese_numeral(-n)\n\n    if isinstance(n, float):\n        b = ''.join(re.findall('[\\.][0-9]+', str(n)))[1:]\n        return to_chinese_numeral(int(''.join(re.findall('[0-9]+[\\.]', str(n)))[:-1])) + numerals['.'] + decimal(b) \n    a = [wan, 10000, qian, 1000, bai, 100, shi, 10, bla]\n\n    b = ''.join(numerals[x] for x in a)\n    out = re.sub('[\u96f6]*$', '', b)\n    out = re.sub('[\u96f6]{2,}', '\u96f6', out)\n    out = re.sub('\u96f6.', '\u96f6', out)\n    out = re.sub('[\u96f6]{2,}', '\u96f6', out)\n    out = re.sub('^\u96f6', '', out)\n    out = re.sub('^\u4e00\u5341', '\u5341', out)\n    out = re.sub('[\u96f6]*$', '', out)\n    return out\n", "def to_chinese_numeral(n):\n    return Chinese_Encoder(n).translated()\n    \nclass Chinese_Encoder(object):\n    def __init__(self, number ):\n        self.number  = abs(number)\n        self.sign    = Sing(str(self.number), ('',\"\u8d1f\")[number<0], isinstance(number,float))\n        self.get_num = lambda nums=self.sign.str: \"\".join(map(self._translate, nums))\n        \n    @property\n    def get_tenth(self):\n        return [self._translate(f\"1{'0'* i}\") for i in range(1,len(self.sign.str))][::-1]\n    \n    @staticmethod\n    def _translate(n):\n        return {  0:\"\u96f6\", 1:\"\u4e00\", 2:\"\u4e8c\", 3:\"\u4e09\", 4:\"\u56db\", 5:\"\u4e94\", 6:\"\u516d\", 7:\"\u4e03\", \n                  8:\"\u516b\", 9:\"\u4e5d\", 10:\"\u5341\", 100:\"\u767e\", 1000:\"\u5343\", 10000:\"\u4e07\" }.get(int(n))\n    \n    def _encod(self):\n        if self.number < 20: return self._translate(self.sign.str) if self.number <= 10 else f'\u5341{self.get_num()[-1]}'\n        list_num ,tenth, nums = [''], self.get_tenth, self.get_num()\n        for i, n in enumerate(nums[:-1]):\n            if n != '\u96f6':  list_num.append(f'{n}{tenth[i]}')\n            if n == '\u96f6' and list_num[-1] != n:  list_num.append(n)\n        return ''.join(list_num + [nums[-1]]).strip('\u96f6')\n                \n    def _encod_dec(self): \n        return f'{ Chinese_Encoder(int(self.sign.str[:self.sign.dot_p])).translated() }{self.sign.dot}{self.get_num(self.sign.str[self.sign.dot_p+1:])}'\n    \n    def translated(self):\n        method = (self._encod, self._encod_dec)[self.sign.is_float]\n        return f'{self.sign.minus}{method()}'\n    \nclass Sing:\n    def __init__(self, find_d, minus, is_float):\n        self.dot_p    = find_d.find('.')\n        self.minus    = minus\n        self.is_float = is_float\n        self.dot , self.str = '\u70b9', find_d", "import re\n\ndef to_chinese_numeral(n):\n    numerals = {\n        \"-\":\"\u8d1f\",\n        \".\":\"\u70b9\",\n        0:\"\u96f6\",\n        1:\"\u4e00\",\n        2:\"\u4e8c\",\n        3:\"\u4e09\",\n        4:\"\u56db\",\n        5:\"\u4e94\",\n        6:\"\u516d\",\n        7:\"\u4e03\",\n        8:\"\u516b\",\n        9:\"\u4e5d\",\n        10:\"\u5341\",\n        100:\"\u767e\",\n        1000:\"\u5343\",\n        10000:\"\u4e07\"\n    }\n    \n    # Extract plus_minus, whole number part, decimal part\n    plus_minus, num_part, dec_part = re.search(r'^(-)?(\\d+)(?:\\.(\\d+))?$', str(round(n, 8))).groups()\n    \n    # plus or minus\n    plus_minus = numerals['-'] if plus_minus else ''\n    \n    # Whole number part\n    num_len = len(num_part)\n    num_chinese = ''\n\n    if num_len == 1:\n        num_chinese = numerals[int(num_part)] # Return numeral if num part has length 1 \n    else:\n        num_rev = num_part[::-1] # Reverse whole number part\n\n        for i in range(num_len-1, -1, -1):\n            digit_value = int(num_rev[i])\n            digit_value_chinese = numerals[digit_value]\n            place_multi_chinese = numerals[int(10 ** i)]\n\n            if i == 1:\n                # handle tens' and unit place\n                if num_len > 2:\n                    if digit_value > 0:\n                        num_chinese += digit_value_chinese + place_multi_chinese\n                        if num_rev[i-1] == '0': # omit last digit if it's a zero\n                            break\n                    else:\n                        # handle special case for interior zeros\n                        if sum(int(num_rev[j]) for j in range(i, -1, -1)) > 0:\n                            num_chinese += numerals[0]\n                else:\n                    # handle special case for 10-19\n                    if digit_value == 1:\n                        num_chinese += place_multi_chinese\n                        if num_rev[i-1] == '0':\n                            break\n                    else:\n                        num_chinese += digit_value_chinese + place_multi_chinese\n                        if num_rev[i-1] == '0': # omit last digit if it's a zero\n                            break\n            else:\n                # handle digits above tens' place\n                if digit_value > 0:\n                    if digit_value != 0:\n                        num_chinese += digit_value_chinese\n                        if i > 0:\n                            num_chinese += place_multi_chinese\n                else:\n                    # handle special case for interior zeros\n                    if sum(int(num_rev[j]) for j in range(i)) > 0 and num_rev[i-1] != '0':\n                        num_chinese += numerals[0]\n        \n    # decimal part\n    if dec_part:\n        dec_len = len(dec_part)\n        dec_chinese = numerals['.']\n        for i in range(dec_len):\n            dec_chinese += numerals[int(dec_part[i])]\n    else:\n        dec_chinese = ''\n    \n    return '{}{}{}'.format(plus_minus, num_chinese, dec_chinese)\n", "numerals = {\n    \"0\": \"\u96f6\",\n    \"1\": \"\u4e00\",\n    \"2\": \"\u4e8c\",\n    \"3\": \"\u4e09\",\n    \"4\": \"\u56db\",\n    \"5\": \"\u4e94\",\n    \"6\": \"\u516d\",\n    \"7\": \"\u4e03\",\n    \"8\": \"\u516b\",\n    \"9\": \"\u4e5d\",\n}\ndef to_chinese_numeral(n):\n    tempdivide = 10000\n    allweishu = []\n    allxiaoshu = []\n    n = str(n)\n    if(\"-\" in n):\n        allweishu.append(\"\u8d1f\")\n        n = n[1:]\n    else:\n        allweishu.append(\"\")\n    if(\".\" in n):\n        tempxiaoshu = n.split(\".\")[1]\n        n = n.split(\".\")[0]\n        for xiaoshu in tempxiaoshu:\n            allxiaoshu.append(numerals[xiaoshu])\n    n = int(n)\n    # print(allxiaoshu)\n    while(tempdivide != 0.1):\n        weishu = str(int(n//tempdivide))\n        n = n % tempdivide\n        allweishu.append(numerals[weishu])\n        tempdivide = tempdivide/10\n    start = 0\n    nums = [\"\u4e07\",\"\u5343\",'\u767e','\u5341','']\n    allstrs = allweishu[0]\n    for weishu in range(len(allweishu[1:])):\n        if(start == 1 and allweishu[weishu+1] == \"\u96f6\" and nums[weishu] != \"\" and allstrs[-1] != \"\u96f6\"):\n            allstrs += \"\u96f6\"\n        elif(allweishu[weishu+1] != \"\u96f6\"):\n\n            start = 1\n            if(nums[weishu] == \"\u5341\" and allweishu[weishu+1] == \"\u4e00\"):\n                if((allstrs == \"\" or allstrs == \"\u8d1f\")):\n                    allstrs += \"\u5341\"\n                elif(allweishu[-1] == \"\u96f6\"):\n                    allstrs += \"\u4e00\u5341\"\n                elif((allstrs == \"\" or allstrs == \"\u8d1f\") and allweishu[-1] == \"\u96f6\"):\n                    allstrs += \"\u5341\"\n                else:\n                    allstrs += \"\u4e00\u5341\"\n\n            else:\n                allstrs += allweishu[weishu+1]\n                allstrs += nums[weishu]\n        elif(allweishu[weishu+1] == \"\u96f6\" and nums[weishu] == \"\"):\n            continue\n\n    # print(allweishu)\n    # print(allstrs)\n\n    if(len(allstrs) > 1 and allstrs[-1] == \"\u96f6\" ):\n        allstrs = allstrs[:-1]\n    if(allstrs == \"\u8d1f\" or allstrs == \"\"):\n        allstrs += \"\u96f6\"\n    if(allxiaoshu):\n        allstrs += \"\u70b9\"\n        for i in allxiaoshu:\n            allstrs += i\n    if(allstrs == \"\"):\n        return \"\u96f6\"\n    if(allstrs[-1] == \"\u96f6\" and len(allstrs) > 1):\n        # print(allstrs)\n        return allstrs[:-1]\n    # print(allstrs)\n    return allstrs\n"]