["t=int(input())\nfor _ in range(t):\n n,m=[int(x) for x in input().split()]\n mat=[]\n ans=[]\n for i in range(n+2):\n  l=[]\n  p=[]\n  for j in range(m+2):\n   l.append(0)\n   p.append(1000000000)\n  mat.append(l)\n  ans.append(p)\n y=int(input())\n for i in range(y):\n  a,b=[int(x) for x in input().split()]\n  mat[a][b]=1\n  ans[a][b]=0\n y=int(input())\n for i in range(y):\n  a,b=[int(x) for x in input().split()]\n  mat[a][b]=1000000000\n  ans[a][b]=1000000000\n for i in range(1,n+1):\n  for j in range(1,m+1):\n   if mat[i][j]==1 or mat[i][j]==1000000000:\n    continue\n   else:\n    ans[i][j]=min(ans[i][j],ans[i][j-1]+1,ans[i-1][j]+1)\n for i in range(n,0,-1):\n  for j in range(m,0,-1):\n   if mat[i][j] == 1 or mat[i][j] == 1000000000:\n    continue\n   else:\n    ans[i][j]=min(ans[i][j],ans[i+1][j]+1,ans[i][j+1]+1)\n for i in range(1,n+1):\n  for j in range(m, 0, -1):\n   if mat[i][j] == 1 or mat[i][j] == 1000000000:\n    continue\n   else:\n    ans[i][j] = min(ans[i][j], ans[i - 1][j] + 1, ans[i][j + 1] + 1)\n for i in range(n, 0, -1):\n  for j in range(1,m+1):\n   if mat[i][j] == 1 or mat[i][j] == 1000000000:\n    continue\n   else:\n    ans[i][j] = min(ans[i][j], ans[i + 1][j] + 1, ans[i][j - 1] + 1)\n for i in range(1,n+1):\n  for j in range(1,m+1):\n   if mat[i][j]==1 or mat[i][j]==1000000000:\n    continue\n   else:\n    ans[i][j]=min(ans[i][j],ans[i][j-1]+1,ans[i-1][j]+1)\n for i in range(n,0,-1):\n  for j in range(m,0,-1):\n   if mat[i][j] == 1 or mat[i][j] == 1000000000:\n    continue\n   else:\n    ans[i][j]=min(ans[i][j],ans[i+1][j]+1,ans[i][j+1]+1)\n for i in range(1,n+1):\n  for j in range(m, 0, -1):\n   if mat[i][j] == 1 or mat[i][j] == 1000000000:\n    continue\n   else:\n    ans[i][j] = min(ans[i][j], ans[i - 1][j] + 1, ans[i][j + 1] + 1)\n for i in range(n, 0, -1):\n  for j in range(1,m+1):\n   if mat[i][j] == 1 or mat[i][j] == 1000000000:\n    continue\n   else:\n    ans[i][j] = min(ans[i][j], ans[i + 1][j] + 1, ans[i][j - 1] + 1)\n for i in range(1,n+1):\n  for j in range(1,m+1):\n   if mat[i][j]==1000000000:\n    print('X',end=\" \")\n   elif ans[i][j]>=1000000000:\n    print('-1',end=\" \")\n   else:\n    print(ans[i][j],end=\" \")\n  print()", "import sys\nimport numpy as np\nfrom collections import deque\n\nreadline = lambda : list(map(int, sys.stdin.readline().replace(\"\\n\", \"\").split(\" \")))\n\n(T,) = readline()\n\ndef run():\n N, M = readline()\n grid = np.full((N, M), -1)\n queue = deque()\n \n (X,) = readline()\n for _ in range(X):\n  (x, y) = readline()\n  (x, y) = (x-1, y-1)\n  queue.append((x, y))\n  grid[x, y] = 0\n \n (Y,) = readline()\n for _ in range(Y):\n  (x, y) = readline()\n  (x, y) = (x-1, y-1)\n  grid[x, y] = -2\n \n while(len(queue) > 0):\n  (x,y) = queue.popleft()\n  #print('Propagate', (x+1,y+1), '; d =', grid[x,y])\n  for (u, v) in [(x-1, y), (x+1, y), (x,y-1), (x,y+1)]:\n   if u < 0 or v < 0 or u >= N or v >= M:\n    continue\n   if grid[u, v] == -1:\n    grid[u, v] = grid[x, y] + 1\n    queue.append((u, v))\n \n val = lambda x : str(x) if x != -2 else 'X'\n \n for i in range(N):\n  print(' '.join(val(grid[i, j]) for j in range(M)))\n  \nfor _ in range(T):\n run()\n"]