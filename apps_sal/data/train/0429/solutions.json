["class Solution:\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n         \"\"\"\n         s_count = collections.defaultdict(int)\n         g_count = collections.defaultdict(int)\n         bull_cnt = 0\n         # first iteration can get bull_cnt immediately\n         for s, g in zip(secret, guess):\n             if s == g: bull_cnt += 1\n             # keep two counters for non matching chars    \n             else:\n                 s_count[s] += 1\n                 g_count[g] += 1\n         # if char in both s_count and g_count, the min of the two is the cow_cnt for this char        \n         cow_cnt = sum(min(s_count[x], g_count[x]) for x in g_count if x in s_count)        \n         return \"{}A{}B\".format(bull_cnt, cow_cnt)\n", "class Solution:\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n         \"\"\"\n         secretDict={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n         friendDict={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n         bulls=0\n         cows=0\n         for s, g in zip(secret,guess):\n             if s==g:\n                 bulls+=1\n             else:\n                 secretDict[int(s)]+=1\n                 friendDict[int(g)]+=1\n         for i in range(10):\n             cows+=min(secretDict[i],friendDict[i])\n         return '{}A{}B'.format(bulls,cows)\n", "class Solution:\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n         \"\"\"\n         need = {}\n         seen = {}\n         ret_A = 0\n         ret_B = 0\n         for i in range(len(secret)):\n             if secret[i] == guess[i]:\n                 ret_A += 1\n             else:\n                 if seen.get(secret[i],0) > 0:\n                     ret_B += 1\n                     seen[secret[i]] -= 1\n                 else:\n                     need[secret[i]] = need.get(secret[i],0) + 1\n                 if need.get(guess[i],0) > 0:\n                     ret_B += 1\n                     need[guess[i]] -= 1\n                 else:\n                     seen[guess[i]] = seen.get(guess[i],0) + 1\n         return str(ret_A) + 'A' + str(ret_B) + 'B'\n", "class Solution:\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n         \"\"\"\n         dict, A, B = {}, 0, 0\n         \n         dicthash = {}\n         for i in secret:\n             if i in dicthash:\n                 dicthash[i] += 1\n             else:\n                 dicthash[i] = 1\n         \n         for i in guess:\n             if i in dicthash:\n                 B += 1\n                 if dicthash[i] == 1:\n                     del dicthash[i]\n                 else:\n                     dicthash[i] -= 1\n             \n         for i, char in enumerate(list(secret)):\n             if char == guess[i]:\n                 A += 1\n                 B -= 1\n         \n         return \"{}A{}B\".format(A, B)", "class Solution(object):\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n                 \"\"\"\n         d = {}\n         bull, cow = 0,0\n \n         for index,s in enumerate(secret):\n             if guess[index] == s:\n                 bull += 1\n             else:\n                 d[s] = d.get(s,0) + 1\n \n         for index,s in enumerate(secret):\n             if (guess[index] != s) & (d.get(guess[index],0) != 0):\n         \t    cow += 1\n         \t    d[guess[index]] -= 1\n         \t    \n         return str(bull) + \"A\" + str(cow) + \"B\"", "class Solution:\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n         \"\"\"\n         bulls = cows = 0\n         hist = [0]*10\n         for i in range(len(secret)):\n             if secret[i] == guess[i]:\n                 bulls += 1\n             else:\n                 hist[ord(secret[i])-ord('0')] += 1\n                 if hist[ord(secret[i])-ord('0')] - 1 < 0:\n                     cows += 1\n                 hist[ord(guess[i])-ord('0')] -= 1   \n                 if hist[ord(guess[i])-ord('0')] + 1 > 0:\n                     cows += 1\n         return str(bulls) + \"A\" + str(cows) + \"B\"\n", "class Solution:\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n         \"\"\"\n         bull=0\n         cow=0\n         for i in range(len(secret)):\n             if secret[i]==guess[i]:\n                 bull+=1\n                 secret=secret[:i]+'a'+secret[i+1:]\n                 guess=guess[:i]+'b'+guess[i+1:]\n         secret=''.join(sorted(secret))\n         guess=''.join(sorted(guess))\n         i=0\n         j=0\n         while i<len(guess) and j<len(guess) :\n             if secret[i] == 'a':\n                 break\n             if guess[j] == 'b':\n                 break\n             if secret[i] == guess[j]:\n                 cow+=1\n                 i+=1\n                 j+=1\n                 continue\n             if secret[i] < guess[j]:\n                 i+=1\n                 continue            \n             if secret[i] > guess[j]:\n                 j+=1\n                 continue\n         print((secret,guess))\n         return str(bull)+'A'+str(cow)+'B'\n", "class Solution:\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n         \"\"\"\n         \n         d1 = {}\n         d2 = {}\n         for i,c in enumerate(secret):\n             if c not in d1:\n                 d1[c] = []\n             d1[c].append(i)\n         \n         for i,c in enumerate(guess):\n             if c not in d2:\n                 d2[c] = []\n             d2[c].append(i)\n         \n         bulls,cows = 0,0\n         \n         for k in d2:\n             if k not in d1:\n                 continue\n             curBulls = curCows = 0\n             posGuess = d2[k]\n             posSecret = d1[k]\n             for p in posGuess:\n                 if p in posSecret:\n                     curBulls += 1\n             #print(curBulls)\n             curCows = max(0,min(len(posGuess) - curBulls,len(posSecret) - curBulls))\n             #print(curCows)\n             bulls += curBulls\n             cows += curCows\n         return str(bulls) + 'A' + str(cows) + 'B'\n                     \n             \n", "class Solution:\n     def getHint(self, secret, guess):\n         \"\"\"\n         :type secret: str\n         :type guess: str\n         :rtype: str\n         \"\"\"\n         \n         bulls = 0\n         mismatch_chars = collections.defaultdict(int)\n         \n         for secret_char, guess_char in zip(secret, guess):\n             if secret_char == guess_char:\n                 bulls += 1\n             else:\n                 mismatch_chars[secret_char] += 1\n         \n         cows = 0\n         for secret_char, guess_char in zip(secret, guess):\n             if secret_char != guess_char and mismatch_chars[guess_char] > 0:\n                 mismatch_chars[guess_char] -= 1\n                 cows += 1\n         \n         return '%sA%sB' % (bulls, cows)"]