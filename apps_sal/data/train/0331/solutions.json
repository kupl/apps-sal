["class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        hour_angle = hour*30+(minutes/12)*6\n        if hour_angle > 360:\n            hour_angle -= 360\n        min_angle = (minutes/5)*30\n        if min_angle > 360:\n            min_angle -= 360\n            \n        diff = abs(hour_angle-min_angle)\n        return diff if diff <= 360-diff else 360-diff", "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        minutes_num = minutes/5\n        hour += minutes/60\n        angle = abs(hour - minutes_num)*30\n        return min(360-angle, angle)", "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        hour = hour if hour < 12 else hour - 12\n        minute_angle = float(minutes) / 60.0 * 360.0\n        hour_angle = 30.0 * hour + minutes / 60 * 360.0 / 12.0\n        return abs(minute_angle - hour_angle) if abs(minute_angle - hour_angle) < 180.0 else 360.0 - abs(minute_angle - hour_angle)\n", "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        angle_per_min = 360/(60)\n        angle_per_5_min = 5*angle_per_min\n\n        h = hour%12 + minutes/60\n        hr_angle = h*angle_per_5_min\n        min_angle = minutes*angle_per_min\n\n        # print(f'h={h}, minutes={minutes}, hr_angle={hr_angle}, min_angle={min_angle}')\n        r = abs(hr_angle-min_angle)\n        return min(360-r, r)", "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        \n        hr = (hour  + float(minutes / 60)) *30\n        \n        mi = minutes * 6\n        \n        ang = abs(hr - mi)\n        \n        return min(360.0 - ang, ang)\n    \n", "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        # calculate the angle for hour and minutes separately and then calculate the min\n        minute_angle = 360 / 60 * minutes\n        hour_angle = (hour % 12) * (360/12) + ((minutes / 60) * (360 / 12))\n        return min(abs(hour_angle - minute_angle), 360 - abs(hour_angle - minute_angle))\n", "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        #hr=0.5deg in 1 min\n        #min=6deg in 1 min\n        if(hour<=6):\n            originaldiff=hour*30*-1\n        else:\n            originaldiff=(12-hour)*30\n        print(originaldiff)\n        mintravelled=5.5*minutes\n        return min(abs(mintravelled+originaldiff),abs(mintravelled+originaldiff-360))\n", "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n      hour_angle = (hour % 12)/12*360 + (minutes/60)*30\n      min_angle = minutes/60*360\n      target = abs(hour_angle - min_angle)\n      #print (hour_angle, min_angle)\n      if target > 180: target = 360 - target\n      return target\n"]