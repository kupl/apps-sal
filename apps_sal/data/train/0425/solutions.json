["class Solution:\n     def get_half(self,dividend,divisor):\n         abs_dividend = abs(dividend)\n         abs_divisor = abs(divisor)\n         num = divisor\n         num_temp=0\n         result=1\n         result_temp=0\n         while (num<=dividend):\n             num_temp=num\n             num+=num\n             result_temp=result\n             result+=result\n         return num_temp,result_temp\n \n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         MAX_INT = 2147483647\n         if divisor == 0:\n             return MAX_INT\n         abs_dividend = abs(dividend)\n         abs_divisor = abs(divisor)\n         if abs_dividend <abs_divisor:\n             return 0\n         minus_flag = (dividend is abs_dividend) is (divisor is abs_divisor)\n         final_result=0\n         while(abs_dividend>=abs_divisor):\n             num,result=self.get_half(abs_dividend,abs_divisor)\n             abs_dividend-=num\n             final_result+=result\n \n         if minus_flag==1:\n             if final_result>MAX_INT:\n                 return MAX_INT\n             return final_result\n         else:\n             if 0-final_result<0-MAX_INT-1:\n                 return 0-MAX_INT\n             return 0-final_result", "class Solution:\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         positive = (dividend < 0) is (divisor < 0)\n         dividend, divisor = abs(dividend), abs(divisor)\n         res = 0\n         while dividend >= divisor:\n             temp, i = divisor, 1\n             while dividend >= temp:\n                 dividend -= temp\n                 res += i\n                 temp <<= 1\n                 i <<= 1\n         if not positive:\n             res = -res\n         return min(max(-2147483648, res), 2147483647)", "class Solution:\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         if abs(dividend) < abs(divisor):\n             return 0\n         sum, count, result = 0, 0, 0\n         a, b = abs(dividend), abs(divisor)\n         while a >= b:\n             sum = b\n             count = 1\n             while sum+sum < a:\n                 sum += sum\n                 count += count\n             a -= sum\n             result += count\n         if (dividend < 0 and divisor > 0) or (dividend > 0 and divisor < 0):\n             result = 0-result\n         return min(result,2147483647)\n         \n", "class Solution:\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         MIN_INT = -2**31\n         MAX_INT = -MIN_INT - 1\n         if divisor == 0 or (dividend == MIN_INT and divisor==-1):\n             return MAX_INT\n         sign = 1\n         if dividend < 0:\n             sign = -sign\n             dividend = -dividend\n         if divisor < 0:\n             sign = -sign\n             divisor = -divisor\n         ans = bits = 0\n         while (divisor<<(bits+1)) <= dividend:\n             bits += 1\n         while bits >= 0:\n             if dividend >= (divisor<<bits):\n                 dividend -= (divisor<<bits)\n                 ans += (1<<bits)\n             bits -= 1\n         return ans if sign==1 else -ans", "class Solution:\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         positive = (dividend < 0) is (divisor < 0)\n         dividend, divisor, div = abs(dividend), abs(divisor), abs(divisor)\n         res = 0\n         q = 1\n         while dividend >= divisor:\n                 dividend -= div\n                 res += q\n                 q += q\n                 div += div\n                 if dividend < div:\n                     div = divisor\n                     q = 1\n         if not positive:\n             res = -res\n         return min(max(-2147483648, res), 2147483647)", "class Solution:\n # @return an integer\n     def divide(self, dividend, divisor):\n         positive = (dividend < 0) is (divisor < 0)\n         dividend, divisor = abs(dividend), abs(divisor)\n         res = 0\n         while dividend >= divisor:\n             temp, i = divisor, 1\n             while dividend >= temp:\n                 dividend -= temp\n                 res += i\n                 i <<= 1\n                 temp <<= 1\n         if not positive:\n             res = -res\n         return min(max(-2147483648, res), 2147483647)", "class Solution:\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         tag = 1 if (dividend < 0) is (divisor < 0) else -1\n         dividend, divisor = abs(dividend), abs(divisor)\n         if divisor == 0:\n             return float('inf')\n         count = 0\n         \n         while dividend >= divisor:\n             mul = 1\n             t = divisor\n             while dividend > (t<<1):\n                 t <<= 1\n                 mul <<= 1\n             dividend -= t\n             count += mul\n             #print(dividend, mul)\n         return min(max(-2147483648, count*tag), 2147483647)", "class Solution:\n     import sys\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         maxint = 2**31 - 1\n         minint = -2**31\n         sign = (2*(dividend>0) - 1) * (2*(divisor>0) - 1)\n         quotient = 0\n         dividend *= (2*(dividend>0) - 1)\n         divisor *= (2*(divisor>0) - 1)\n         remainder = dividend\n         for i in reversed(list(range(32))):\n             if remainder == 0: break\n             if divisor << i <= remainder:\n                 remainder -= divisor << i\n                 quotient += 1 << i\n         quotient *= sign\n         print(quotient)\n         if quotient > maxint or quotient < minint:  quotient = maxint\n         return quotient", "class Solution:\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         if (dividend < 0 and divisor > 0) or (dividend > 0 and divisor < 0):\n             if abs(dividend) < abs(divisor):\n                 return 0\n         summ = 0; count = 0; res = 0\n         a = abs(dividend); b = abs(divisor)\n         while a >= b:\n             summ = b\n             count = 1\n             while summ + summ <= a:\n                 summ += summ\n                 count += count\n             a -= summ\n             res += count\n         if (dividend < 0 and divisor > 0) or (dividend > 0 and divisor < 0):\n                 res = 0 - res\n         if res > 2**31 - 1:\n                 res = 2**31 - 1\n         return res\n", "class Solution:\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         \n         flag = (dividend < 0) is (divisor < 0)\n         dividend, divisor = abs(dividend), abs(divisor)        \n         result = 0\n         while dividend >= divisor:\n             newDivisor, rate = divisor, 1\n             while dividend >= newDivisor:\n                 dividend -= newDivisor\n                 result += rate\n                 newDivisor <<= 1\n                 rate <<= 1\n         if not flag:\n             result = 0 - result       \n         return min(max(-2147483648, result), 2147483647)", "class Solution:\n     def divide(self, dividend, divisor):\n         positive = (dividend < 0) is (divisor < 0)\n         dividend, divisor = abs(dividend), abs(divisor)\n         res = 0\n         while dividend >= divisor:\n             temp, i = divisor, 1\n             while dividend >= temp:\n                 dividend -= temp\n                 res += i\n                 i <<= 1\n                 temp <<= 1\n         if not positive:\n             res = -res\n         return min(max(-2147483648, res), 2147483647)", "class Solution:\n     def divide(self, dividend, divisor):\n         \"\"\"\n         :type dividend: int\n         :type divisor: int\n         :rtype: int\n         \"\"\"\n         \n         flag = (dividend < 0) is (divisor < 0)\n         dividend, divisor = abs(dividend), abs(divisor)        \n         result = 0\n         while dividend >= divisor:\n             newDivisor, rate = divisor, 1\n             while dividend >= newDivisor:\n                 dividend -= newDivisor\n                 result += rate\n                 newDivisor <<= 1\n                 rate <<= 1\n         if not flag:\n             result = 0 - result       \n         return min(max(-2147483648, result), 2147483647)"]