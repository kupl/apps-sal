["from collections import Counter\nn = int(input())\npoints = Counter([tuple(map(int, input().split(' '))) for i in range(n)])\n\nx, y = Counter([k for k, v in points.elements()]), Counter([v for k, v in points.elements()])\n\nans = sum([v*(v-1)//2 for k, v in list(x.items())])+sum([v*(v-1)//2 for k, v in list(y.items())])-sum([v*(v-1)//2 for k, v in list(points.items())])\nprint(ans)\n", "from operator import itemgetter\nn=int(input().strip())\nans=0\nl=[]\nfor i in range(n):\n\tl.append([int(x) for x in input().strip().split()])\n \nl.sort(key=itemgetter(1))\nx=l[0][1]\ny=1\nfor i in range(1,len(l)):\n\tif l[i][1]!=x:\n\t\tans=ans+(y*(y-1))//2\n\t\tx=l[i][1]\n\t\ty=1\n\telse:\n\t\ty=y+1\nans=ans+(y*(y-1))//2\n \nl.sort()\nx=l[0][0]\ny=1\nfor i in range(1,len(l)):\n\tif l[i][0]!=x:\n\t\tans=ans+(y*(y-1))//2\n\t\tx=l[i][0]\n\t\ty=1\n\telse:\n\t\ty=y+1\nans=ans+(y*(y-1))//2\n \nx0,x1=l[0][0],l[0][1]\ny=1\nfor i in range(1,len(l)):\n\tif l[i][0]!=x0 or l[i][1]!=x1:\n\t\tans=ans-(y*(y-1))//2\n\t\tx0,x1=l[i][0],l[i][1]\n\t\ty=1\n\telse:\n\t\ty=y+1\nans=ans-(y*(y-1))//2\n \nprint(ans)", "n = int(input())\nl = []\nfor i in range(n):\n\ta,b = map(int,input().split())\n\tl.append((a,b))\n\ndef solve(a):\n\tans, d = 0, {}\n\tfor x,_ in a:\n\t\td[x] = d.setdefault(x,0)+1\n\tfor i in d:\n\t\tans += d[i]*(d[i]-1) // 2\n\treturn ans\n\nx = 0\npd = {}\nfor i in l:\n\tpd[i] = pd.setdefault(i,0)+1\nfor i in pd:\n\tx += pd[i]*(pd[i]-1) // 2\n\ny = solve(l)\nz = solve([(p,q) for q,p in l])\nprint(y+z-x)", "c = [tuple(map(int, input().split())) for _ in range(int(input()))]\no = dict()\nx = dict()\ny = dict()\nfor v in c:\n    o[v] = o.get(v, 0) + 1\n    x[v[0]] = x.get(v[0], 0) + 1\n    y[v[1]] = y.get(v[1], 0) + 1\nret = 0\nfor v in x:\n    ret += (x[v] * (x[v] - 1)) // 2\nfor v in y:\n    ret += (y[v] * (y[v] - 1)) // 2\nfor v in o:\n    ret -= (o[v] * (o[v] - 1)) // 2\nprint(ret)\n", "n = int(input())\nx2pts = {}\ny2pts = {}\nwatchmen = {}\nfor i in range(n):\n    watchman = tuple(map(int,input().split()))\n    watchmen[watchman] = watchmen.get(watchman,0)+1\n    x2pts[watchman[0]] = x2pts.get(watchman[0],0)+1\n    y2pts[watchman[1]] = y2pts.get(watchman[1],0)+1\npairs = 0\nfor i in list(watchmen.items()):\n    pairs -= i[1]*(i[1]-1)//2\nfor i in list(x2pts.items()):\n    pairs += i[1]*(i[1]-1)//2\nfor i in list(y2pts.items()):\n    pairs += i[1]*(i[1]-1)//2\nprint(pairs)\n", "#!/usr/bin/env python3\nimport collections, itertools, functools, math\n\ndef solve():\n    n = int(input())\n    p = [tuple(map(int, input().split())) for _ in range(n)]\n\n    cnt = collections.Counter(x for x, _ in p)\n    cnt2 = collections.Counter(y for _, y in p)\n    cntp = collections.Counter(p)\n\n    r = 0\n    for k, v in cnt.most_common() + cnt2.most_common():\n        r += v * (v - 1)\n    for k, v in cntp.most_common():\n        r -= v * (v - 1)\n    return r//2\n\n\ndef __starting_point():\n    print(solve())\n\n\n__starting_point()", "import collections\nr=0;a,b,c=[collections.Counter() for _ in [0,0,0]]\nfor _ in range(int(input())):\n\tx,y=list(map(int, input().split()))\n\tr+=a[x]+b[y]-c[(x,y)]\n\ta[x]+=1;b[y]+=1;c[(x,y)]+=1\nprint(r)\n", "from collections import defaultdict, Counter\n\nn = int(input())\n\nw = []\nfor i in range(n):\n    w.append(tuple(map(int, input().split())))\n\ndx = Counter()\ndy = Counter()\nfor x, y in w:\n    dx[x] += 1\n    dy[y] += 1\n\ncount = sum((v * (v-1) / 2) for v in list(dx.values())) + \\\n        sum((v * (v-1) / 2) for v in list(dy.values()))\n\ndc = Counter(w)\ncount -= sum((c * (c-1) / 2) for c in list(dc.values()) if c > 1)\n\nprint(int(count))\n", "import collections\nr=0;a,b,c=[collections.Counter() for _ in [0,0,0]]\nfor _ in range(int(input())):\n\tx,y=map(int, input().split())\n\tr+=a[x]+b[y]-c[(x,y)]\n\ta[x]+=1;b[y]+=1;c[(x,y)]+=1\nprint(r)", "import collections\nr=0;a,b,c=[collections.Counter() for _ in [0,0,0]]\nfor _ in range(int(input())):\n    x,y=map(int, input().split())\n    r+=a[x]+b[y]-c[(x,y)]\n    a[x]+=1;b[y]+=1;c[(x,y)]+=1\nprint(r)", "from collections import defaultdict, Counter\n\nn = int(input())\n\nw = []\nfor i in range(n):\n    w.append(tuple(map(int, input().split())))\n\ndx = Counter()\ndy = Counter()\nfor x, y in w:\n    dx[x] += 1\n    dy[y] += 1\n\ncount = sum((v * (v-1) / 2) for v in list(dx.values())) + sum((v * (v-1) / 2) for v in list(dy.values()))\n\ndc = Counter(w)\ncount -= sum((c * (c-1) / 2) for c in list(dc.values()) if c > 1)\n\nprint(int(count))\n", "import re\n\nc = 0\nds = [{},{}]\ncoords = {}\ndup = 0\nn = int(input())\nfor i in range(0, n):\n    t = re.split(' ', input())\n    T = tuple(t)\n    coords[T] = 1 + (0 if (T not in coords) else (coords[T]))\n    dup += coords[T]-1\n    for j in range(0, len(ds)):\n        ds[j][t[j]] = 1 + (0 if (t[j] not in ds[j]) else (ds[j][t[j]]) )\n\nfor i in range(0, len(ds)):\n    for k, v in list(ds[i].items()):\n        c += v*(v-1)/2\n\nprint(int(c-dup))\n    \n", "3\nfrom collections import Counter\nfrom functools import reduce\n\nn = int(input())\nx = Counter()\ny = Counter()\npoints = Counter()\nfor i in range(n):\n  point = list(map(int, input().split()))\n  x[point[0]] += 1\n  y[point[1]] += 1\n  points[(point[0], point[1])] += 1\n  \ndef getPairsNumber(n):\n  return n * (n-1) // 2\n\ndef getCounterPairsNumber(counter):\n  return reduce(lambda s, n: s + getPairsNumber(n), list(counter.values()), 0)\n\ns = getCounterPairsNumber(x) + getCounterPairsNumber(y) - getCounterPairsNumber(points)\nprint(s)\n", "'''\nCreated on Apr 30, 2016\nGmail : r.haque.249.rh@gmail.com\n@author: Md. Rezwanul Haque\n'''\nn = int(input())\nx2 = {}\ny2 = {}\nwatchMen = {}\nfor i in range(n):\n    watchman = tuple(map(int,input().split()))\n    watchMen[watchman] = watchMen.get(watchman,0)+1\n    #print(watchMen[watchman])\n    x2[watchman[0]] = x2.get(watchman[0],0)+1\n    #print(x2[watchman[0]])\n    y2[watchman[1]] = y2.get(watchman[1],0)+1\npairs = 0\nfor i in watchMen.items():\n    pairs -= i[1]*(i[1] - 1)//2\nfor i in x2.items():\n    pairs += i[1]*(i[1] - 1)//2\nfor i in y2.items():\n    pairs += i[1]*(i[1] - 1)//2\nprint(pairs)  ", "def main():\n\tn = int(input())\n\tL = [None] * n\n\tfor i in range(n):\n\t\t(x, y) = (int(x) for x in input().split())\n\t\tL[i] = (x, y)\n\tprint(solver(L))\n\ndef solver(L):\n\txDict = dict()\n\tyDict = dict()\n\txyDict = dict()\n\tfor (x, y) in L:\n\t\tif (x, y) in xyDict:\n\t\t\txyDict[(x, y)] += 1\n\t\telse:\n\t\t\txyDict[(x, y)] = 1\n\trepeats = 0\n\tfor xy in xyDict:\n\t\tn = xyDict[xy]\n\t\trepeats += n * (n - 1) // 2\n\tfor (x, y) in L:\n\t\tif x in xDict:\n\t\t\txDict[x].append(y)\n\t\telse:\n\t\t\txDict[x] = [y]\n\t\tif y in yDict:\n\t\t\tyDict[y].append(x)\n\t\telse:\n\t\t\tyDict[y] = [x]\n\txSames = 0\n\tfor x in xDict:\n\t\tn = len(xDict[x])\n\t\txSames += n * (n - 1) // 2\n\tySames = 0\t\n\tfor y in yDict:\n\t\tn = len(yDict[y])\n\t\tySames += n * (n - 1) // 2\n\ttotal = xSames + ySames - repeats\n\treturn total\n\t\ndef almostEqual(x, y):\n\treturn abs(x - y) < 10**-8\n\ndef distance(x1, y1, x2, y2):\n\tleg1 = abs(x1 - x2)\n\tleg2 = abs(y1 - y2)\n\treturn (leg1**2 + leg2**2)**0.5\n\nL = [(1, 1), (7, 5), (1, 5)]\nL2 = [(0, 0), (0, 1), (0, 2), (-1, 1), (0, 1), (1, 1)]\nL3 = [(0, 0), (0, 0), (0, 0)]\n#print(solver(L))\nmain()\n\n# for i in range(len(L)):\n\t# \t(x1, y1) = L[i]\n\t# \tfor j in range(i + 1, len(L)):\n\t# \t\t(x2, y2) = L[j]\n\t# \t\tdistx = abs(x1 - x2)\n\t# \t\tdisty = abs(y1 - y2)\n\t# \t\tif distx == 0 or disty == 0:\n\t# \t\t\tcount += 1\n\t\t\t#dist1 = abs(x1 - x2) + abs(y1 - y2)\n\t\t\t#dist2 = distance(x1, y1, x2, y2)\n\t\t\t#if almostEqual(dist1, dist2):\n\t\t\t#\tcount += 1\n", "from collections import Counter\nx, y, par, ans = Counter(), Counter(), Counter(), 0\nfor i in range(int(input())):\n    xi, yi = map(int, input().split())\n    x[xi] += 1\n    y[yi] += 1\n    par[(xi, yi)] += 1\nfor elem in x:\n    ans += x[elem] * (x[elem] - 1)\nfor elem in y:\n    ans += y[elem] * (y[elem] - 1)\nfor elem in par:\n    ans -= par[elem] * (par[elem] - 1)\nprint(ans // 2)", "n=int(input())\ndef inx(x,d):\n    if x in d:\n        d[x]+=1\n    else:\n        d[x]=1\n    return d\n\ndef input2(n):\n    dx={}\n    dy={}\n    dob={}\n    ans=1\n    for i in range(n):\n        x,y=map(int,input().split())\n        dx=inx(x,dx)\n        dy=inx(y,dy)\n        if (x,y) in dob:\n            dob[(x,y)]+=1\n        else:\n            dob[(x,y)]=1\n    return dx,dy,dob\n\ndx,dy,dob=input2(n)\n\n\ndef ans(d):\n    ans1=0\n    for i in d:\n        ans1+=d[i]*(d[i]-1)//2\n    return ans1\n\nmyans=ans(dx)+ans(dy)-ans(dob)\nprint(myans) ", "from collections import Counter\n\nx, y, xy, ans = Counter(), Counter(), Counter(), 0\nfor i in range(int(input())):\n    xi, yi = map(int, input().split())\n    x[xi] += 1\n    y[yi] += 1\n    xy[(xi, yi)] += 1\nfor i in x:\n    ans += x[i] * (x[i] - 1)\nfor i in y:\n    ans += y[i] * (y[i] - 1)\nfor i in xy:\n    ans -= xy[i] * (xy[i] - 1)\nprint(ans // 2)", "def count(t):\n  return sum(v*(v-1)//2 for v in t.values())\na,b,c={},{},{}\nn=int(input())\nfor _ in range(n):\n  x,y=map(int,input().split())\n  a[x]=a.get(x,0)+1\n  b[y]=b.get(y,0)+1\n  c[(x,y)]=c.get((x,y),0)+1\nprint(count(a)+count(b)-count(c))", "import collections\nr=0;a,b,c=[collections.Counter() for _ in [0,0,0]]\nfor _ in range(int(input())):\n\tx,y=map(int, input().split())\n\tr+=a[x]+b[y]-c[(x,y)]\n\ta[x]+=1;b[y]+=1;c[(x,y)]+=1\nprint(r)", "n = int(input())\nw = [tuple(input().split())for _ in range(n)]\nx = dict()\ny = dict()\nz = dict()\ndef add(e, d):\n    if not e in d:\n        d[e] = 1\n    else:\n        d[e] += 1\ndef pr(d):\n    return sum(u * (u - 1) / 2 for u in list(d.values()))\nfor a in w:\n    add(a[0], x)\n    add(a[1], y)\n    add(a, z)\ncnt = pr(x) + pr(y) - pr(z)\nprint(int(cnt))\n", "def main():\n    n = int(input())\n    xs, ys, clones = {}, {}, {}\n    res = 0\n    clones_num = 0\n    points = []\n    for _ in range(n):\n        x, y = list(map(int, input().split()))\n\n        if x not in xs:\n            xs[x] = 0\n        if y not in ys:\n            ys[y] = 0\n        if (x, y) not in clones:\n            clones[(x, y)] = 0\n\n        xs[x] += 1\n        ys[y] += 1\n        clones[(x, y)] += 1\n\n    for c in clones:\n        n = clones[c]\n        clones_num += n * (n - 1) // 2\n\n    for x in xs:\n        n = xs[x]\n        res += n * (n - 1) // 2\n\n    for y in ys:\n        n = ys[y]\n        res += n * (n - 1) // 2\n\n    print(res - clones_num)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "q={}\nw={}\ne={}\nr=0\nfor _ in range(int(input())):\n    x,y=map(int,input().split())\n    a,s,d=q.get(x,0),w.get(y,0),e.get((x,y),0)\n    r+=a+s-d\n    q[x],w[y],e[x,y]=a+1,s+1,d+1\nprint(r)", "from collections import Counter\nx, y, p = Counter(), Counter(), Counter() \nfor _ in range(int(input())):\n   i, j = map(int, input().split())\n   x[i] += 1\n   y[j] += 1\n   p[(i, j)] += 1\ndef cnt(n):\n    return n * (n - 1) // 2\nans = sum(map(cnt, x.values())) + sum(map(cnt, y.values())) - sum(map(cnt, p.values()))\nprint(ans)"]