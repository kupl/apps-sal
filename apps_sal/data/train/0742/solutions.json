["import random\n\ndef sign(i):\n    if i>0:\n        return 1\n    elif i<=0:\n        return 0\nbleh = []\nfor _ in range(int(input())):\n    p = list(map(int,input().rstrip().split()))\n    max_rows = len(p)\n    if all([x==0 for x in p]):\n        print(1)\n        continue\n    if max_rows <= 1:\n        bleh.append(max_rows)\n        continue\n    max_pow = max_rows-1\n    if len(p)%2 !=0 and len(p)>0:\n        p.append(0)\n    max_col = len(p)//2\n    \n    rows = [[0 for _ in range(max_col)] for _ in range(max_rows)]\n    rows[0] = p[::2]\n    rows[1] = p[1::2]\n    if sign(rows[0][0]) != sign(rows[1][0]):\n        print(0)\n        continue\n    \n    for r in range(2,max_rows):\n        for n in range(max_col-1):\n                rows[r][n] = rows[r-1][0]*rows[r-2][n+1]-rows[r-2][0]*rows[r-1][n+1]\n    \n    last = sign(rows[0][0])\n    flag = 1\n    for i in range(1,len(rows)):\n        curr = sign(rows[i][0])\n        if rows[r] == [0 for _ in range(max_col)]:\n            for n in range(max_col):\n                rows[r][n] = rows[r-1][n]*(max_pow+4-(r+1)-2*(n+1)) \n        \n        elif rows[i][0] == 0:\n            if any([x != 0 for x in rows[i]]):\n                flag = 0\n                break\n            else:\n                curr = last\n        if curr != last:\n            flag = 0\n            break\n        last = curr    \n    print(flag)\n", "def solve():\r\n    c = list(map(int, input().strip().split()))\r\n    n = len(c)\r\n    if n <= 2:\r\n        print(1)\r\n        return\r\n    k = (n + 1) // 2\r\n    r = [[], []]\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            r[0].append(c[i])\r\n        else:\r\n            r[1].append(c[i])\r\n    if len(r[1]) < k:\r\n        r[1].append(0)\r\n    r[0].append(0)\r\n    r[1].append(0)\r\n    while k > 0:\r\n        p = []\r\n        for i in range(1, k + 1):\r\n            p.append(r[-1][0] * r[-2][i] - r[-1][i] * r[-2][0])\r\n        r.append(p + [0])\r\n        k -= 1\r\n    r = [x[0] for x in r]\r\n    atleastz, allz = 0, 1\r\n    for x in r:\r\n        if x == 0:\r\n            atleastz = 1\r\n        else:\r\n            allz = 0\r\n    if atleastz:\r\n        if allz:\r\n            print(1)\r\n        else:\r\n            print(0)\r\n        return\r\n    for i in range(1, len(r)):\r\n        if r[i] * r[i - 1] < 0:\r\n            print(0)\r\n            return\r\n    print(1)\r\n\r\ndef main():\r\n    t = int(input().strip())\r\n    for _ in range(t):\r\n        solve()\r\n\r\ndef __starting_point():\r\n    main()\n__starting_point()", "# cook your dish here\ndef fun(st,en,l):\n    for i in range(st,maxpow+1):\n        for j in range(0,m-1):\n            l[i][j]=l[i-1][0]*l[i-2][j+1]-l[i-2][0]*l[i-1][j+1]\n            \nfor _ in range(int(input())):\n    l=list(map(int,input().split()))\n    n=len(l)\n    el=[]\n    ol=[]\n    for i in range(n):\n        if i%2==0:\n            el.append(l[i])\n        else:\n            ol.append(l[i])\n    if n%2!=0:\n        ol.append(0)\n    l=[]\n    l.append(el)\n    l.append(ol)\n    m=len(el)\n    maxpow=n-1\n    for i in range(2,maxpow+1):\n        l.append([0]*m)\n    fun(2,maxpow+1,l)\n    for i in range(maxpow+1):\n        cze=0\n        for j in range(m):\n            if l[i][j]==0:\n                cze+=1\n        if cze == m:\n            for k in range(m):\n                l[i][k]=l[i-1][k]*maxpow+4-(i+1)-2*(k+1)\n            fun(i+1,maxpow+1,l)\n    check=0\n    for i in range(maxpow+1):\n        if l[i][0]==0 and sum(l[i][1:])!=0:\n            print(0)\n            check=1\n            break\n    if check==0:\n        if l[0][0]>0:\n            signchange=1\n        else:\n            signchange= -1\n        c=0\n        for i in range(maxpow+1):\n            if l[i][0]>0:\n                temp=1\n            else:\n                temp=-1\n            if temp!=signchange:\n                print(0)\n                c=1\n                break\n        if c==0:\n            print(1)\n                \n                \n", "def SR(coeff):\r\n    size = len(coeff) # Please work out what if n is small no, like 1 or 2\r\n    #print(\"No. of rows will form is\", size)\r\n    max_power = size - 1\r\n    Arr = [] # 2x2\r\n    row1 = coeff[0::2]\r\n    row2 = coeff[1::2]\r\n    #print('row1: ', row1, '\\n', 'row2: ', row2)\r\n    ln = len(row1) #don't change this value\r\n    if size%2 != 0: # if n is odd\r\n        row2.append(0) # to balance row1 and row2\r\n    # add 1 empty element in each row for safety\r\n    row1.append(0) \r\n    row2.append(0) \r\n    Arr.append(row1)\r\n    Arr.append(row2)\r\n    #print('start')\r\n    \r\n    sign = lambda x: 1 if x > 0 else -1  \r\n    s = [sign(row1[0]), sign(row2[0])] # keep track of sign of 1st member of each row\r\n    \r\n    for r in range(2,size):\r\n        Arr.append([0]*(ln+1)) # create a row of empty elements\r\n        #print(r+1,'th row created', Arr)\r\n        \r\n        for n in range(ln): #generate value of nth element of rth row\r\n            #print(n+1, 'th element to fill')\r\n            # below mean, (12 * 4) - (10*5)\r\n            Arr[r][n] = (Arr[r-1][0] * Arr[r-2][n+1]) - (Arr[r-2][0] * Arr[r-1][n+1])\r\n            \r\n        \r\n        s.append(sign(Arr[r][0]))\r\n        #print(\"  Array Print:  \")\r\n        #for k in Arr: print(k) \r\n        \r\n    ''' If all the element of that row is zero case\r\n    then nth element = nth element of its previous row *\r\n    ((max. power of x) - 4 - r - 2n ) '''\r\n    for i in range(len(Arr)): # i th row in Arr\r\n        if list(set(Arr[i])) == [0]:       \r\n            #print(Arr[i])\r\n            for n in range(len(Arr[i])):\r\n                # I think that make sense\r\n                Arr[i][n] = (Arr[i-1][n] * (max_power + 4 - (i+1) - (2*(n+1))))\r\n                \r\n        elif Arr[i][0] == 0:\r\n            return 0 \r\n        \r\n    ''' check if sign change '''\r\n    if len(set(s)) == 1: # no sign change\r\n        return 1\r\n    else: # sign change\r\n        return 0\r\n\r\n            \r\n          \r\nT = int(input())\r\n#coeff = [10, 12, 4, 5, 3, 2]\r\nfor t in range(T):\r\n    coeff = [int(x) for x in input().split()] # [10, 12, 4, 5, 3]\r\n    print(SR(coeff))", "import numpy as np\r\n\r\nt = int(input())\r\narr = []\r\nfor i in range(t):\r\n\tinp = input()\r\n\tarr.append(list(map(int, inp.split(\" \"))))\r\n# print(arr)\r\n\r\ndef gen_array(arr1,arr2,mp,rn):\r\n\tarrg = [];\r\n\tif len(arr1)!=len(arr2):\r\n\t\tarr1.append(0)\r\n\tfor j in range(len(arr2)-1):\r\n\t\tarrg.append(arr1[0]*arr2[j+1]-arr2[0]*arr1[j+1])\r\n\tctz = not np.any(arrg)\r\n\tif ctz == True:\r\n\t\tfor j in range(len(arrg)):\r\n\t\t\tarrg[j] = (mp+4-rn-2*(j+1))*arr1[j]\r\n\treturn(arrg)\r\n\r\ndef check(rht):\r\n\tfor i in range(len(rht)-1):\r\n\t\tif(rht[i][0]*rht[i+1][0]<=0):\r\n\t\t\tprint(0)\r\n\t\t\tbreak\r\n\telse:\r\n\t\tprint(1)\r\n\r\nrh=[]\r\nfor i in range(t):\r\n\trh.append([])\r\n\tarr1 =[]\r\n\tarr2 =[]\r\n\tfor j in range(len(arr[i])-1,-1,-1):\r\n\t\tif j%2 == 0:\r\n\t\t\tarr1.append(arr[i][j])\r\n\t\telse:\r\n\t\t\tarr2.append(arr[i][j])\r\n\tarr1.reverse()\r\n\tarr2.reverse()\r\n\t# print(arr1)\r\n\t# print(arr2)\r\n\trh[i].append(arr1)\r\n\trh[i].append(arr2)\r\n\tfor j in range(2,len(arr[i])):\r\n\t\trh[i].append(gen_array(rh[i][j-1],rh[i][j-2],arr[i][0],j+1))\r\n\tcheck(rh[i])\r\n\r\n# print(rh)\n", "from math import copysign\r\n\r\n\r\ndef main():\r\n    a = [int(c) for c in input().split()]\r\n    assert 0 not in a\r\n    k = len(a)\r\n    prv = []\r\n    cur = []\r\n    for i, e in enumerate(a):\r\n        if i % 2:\r\n            cur.append(a[i])\r\n        else:\r\n            prv.append(a[i])\r\n    n = len(prv)\r\n    if len(cur) < n:\r\n        cur.append(0)\r\n    if copysign(1, prv[0]) != copysign(1, cur[0]):\r\n        return 0\r\n    for r in range(k-2):\r\n        # print(prv)\r\n        nxt = [cur[0] * prv[i] - prv[0] * cur[i] for i in range(1, n)] + [0]\r\n        if nxt == [0] * n:\r\n            for i in range(n):\r\n                nxt[i] = cur[i] * (k - r - 2*i)\r\n        prv, cur = cur, nxt\r\n        if copysign(1, prv[0]) != copysign(1, cur[0]) or cur[0] == 0:\r\n            return 0\r\n    return 1\r\n\r\n\r\nfor _ in range(int(input())):\r\n    print(main())\r\n", "from math import copysign\r\n\r\n\r\ndef main():\r\n    a = [int(c) for c in input().split()]\r\n    assert 0 not in a\r\n    k = len(a)\r\n    prv = []\r\n    cur = []\r\n    for i, e in enumerate(a):\r\n        if i % 2:\r\n            cur.append(a[i])\r\n        else:\r\n            prv.append(a[i])\r\n    n = len(prv)\r\n    if len(cur) < n:\r\n        cur.append(0)\r\n    if copysign(1, prv[0]) != copysign(1, cur[0]):\r\n        return 0\r\n    for r in range(k):\r\n        # print(prv)\r\n        nxt = [cur[0] * prv[i] - prv[0] * cur[i] for i in range(1, n)] + [0]\r\n        if nxt == [0] * n:\r\n            for i in range(n):\r\n                nxt[i] = cur[i] * (k - r - 2*i)\r\n        prv, cur = cur, nxt\r\n        if copysign(1, prv[0]) != copysign(1, cur[0]) or cur[0] == 0:\r\n            return 0\r\n    return 1\r\n\r\n\r\nfor _ in range(int(input())):\r\n    print(main())\r\n", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n    coef = list(map(int,input().split()))\n    #print(coef)\n    mpow = len(coef)-1\n    row1 = []\n    row2 = []\n    mat = []\n    for i in range(len(coef)):\n        if i%2==0:\n            row1.append(coef[i]) \n        else:\n            row2.append(coef[i])\n    if (len(coef))%2:\n        row2.append(0)\n    mat.append(row1)\n    mat.append(row2)\n    #print(mat)\n    idle = [0]*len(row1)\n    for i in range(2,len(coef)):\n        rown = []\n        for j in range(1,len(row1)):\n            val = mat[i-1][0]*mat[i-2][j]-mat[i-2][0]*mat[i-1][j]\n            rown.append(val)\n        for _ in range(len(rown),len(row1)):\n            rown.append(0)\n        #print(rown)\n        mat.append(rown)\n        if rown == idle:\n            for i in range(len(mat)):\n                if mat[i]==idle:\n                    for j in range(len(mat[i])):\n                        mat[i][j] = mat[i-1][j]*(mpow+4-(i+1)-2*(j+1))\n        \n    #print(mat)\n    #print(idle)\n    s = 0\n    sa = 0\n    for i in mat:\n        s += i[0]\n        sa += abs(i[0])\n    c = 0\n    '''for i in range(len(mat)):\n        if mat[i]==idle:\n            for j in range(len(mat[i])):\n                mat[i][j] = mat[i-1][j]*(mpow+4-(i+1)-2*(j+1))'''\n    #print(mat)\n    if(s==sa):\n        c = 1\n        for i in range(len(mat)):\n            if mat[i][0]==0:\n                c = 0\n                break\n    print(c)    \n    \n    \n        \n        \n        \n        \n        \n"]