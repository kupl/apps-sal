["class Solution(object):\n     def convert(self, s, numRows):\n         \"\"\"\n         :type s: str\n         :type numRows: int\n         :rtype: str\n         \"\"\"\n         if numRows == 1:\n             return s\n         zigzag = ['' for i in range(numRows)] \n         row = 0                                \n         step = 1                              \n         for c in s:\n             if row == 0:\n                 step = 1\n             if row == numRows - 1:\n                 step = -1\n             zigzag[row] += c\n             row += step\n         return ''.join(zigzag)", "class Solution:\n     def convert(self, s, numRows):\n         \"\"\"\n         :type s: str\n         :type numRows: int\n         :rtype: str\n         \"\"\"\n         if numRows == 1 or numRows >= len(s):\n             return s\n \n         result = [''] * numRows\n \n         index, step = 0, 1\n \n         for c in s:\n             result[index] += c\n             if index == 0:\n                 step = 1\n             elif index == numRows-1:\n                 step = -1\n             index += step\n \n         return ''.join(result)\n", "class Solution:\n     def convert(self, s, numRows):\n         \"\"\"\n         :type s: str\n         :type numRows: int\n         :rtype: str\n         \"\"\"\n         if numRows == 1 or numRows >= len(s):\n             return s\n \n         list_string = [''] * numRows\n         index, step = 0, 1\n \n         for i in s:\n             list_string[index] += i\n             if index == 0:\n                 step = 1\n             elif index == numRows -1:\n                 step = -1\n             index += step\n \n         return ''.join(list_string)", "class Solution:\n     def convert(self, s, nRows):\n         \"\"\"\n         :type s: str\n         :type numRows: int\n         :rtype: str\n         \"\"\"\n         if nRows==1: return s\n         # nRows strings, each letter of s falls into a string\n         tmp=['' for i in range(nRows)]\n         index=-1; step=1\n         for i in range(len(s)):\n             index+=step\n             if index==nRows:\n                 index-=2; step=-1\n             elif index==-1:\n                 index=1; step=1\n             tmp[index]+=s[i]\n         return ''.join(tmp)", "class Solution:\n     def convert(self, s, nRows):\n         if nRows==1: return s\n         tmp=['' for i in range(nRows)]\n         index=-1; step=1\n         for i in range(len(s)):\n             index+=step\n             if index==nRows:\n                 index-=2; step=-1\n             elif index==-1:\n                 index=1; step=1\n             tmp[index]+=s[i]\n         return ''.join(tmp)", "class Solution:\n     def convert(self, s, numRows):\n         \"\"\"\n         :type s: str\n         :type numRows: int\n         :rtype: str\n         \"\"\"\n         if numRows == 1:\n             return s\n         count = len(s)\n         if count <= 1:\n             return s\n \n         result = []\n         deltSmall = numRows - 1\n         deltBig = 2 * deltSmall\n         for i in range(0, numRows):\n             k = i\n             if i == 0 or i == deltSmall:\n                 while k < count:\n                     result.append(s[k])\n                     k += deltBig\n             else:\n                 while k < count:\n                     top = k - k % deltSmall\n                     bottom = top + deltSmall\n                     result.append(s[k])\n                     nextk = 2 * bottom - k\n                     if nextk < count:\n                         result.append(s[nextk])\n                     k += deltBig\n \n         return \"\".join(result)", "class Solution:\n     def convert(self, s, numRows):\n         \"\"\"\n         :type s: str\n         :type numRows: int\n         :rtype: str\n         \"\"\"\n         if len(s) == 0 or numRows < 1:\n             return ''\n         if numRows == 1:\n             return s\n         maxStep = (numRows-1)*2\n         reStr = ''\n         for i in range(numRows):\n             j = i\n             step = maxStep-2*i\n             while j < len(s):\n                 reStr += s[j]\n                 if step == 0:\n                     j += maxStep\n                 else:                    \n                     j += step\n                 step = maxStep-step\n                 if step == 0:\n                     step = maxStep\n         return reStr"]