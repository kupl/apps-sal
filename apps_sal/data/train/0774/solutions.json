["# cook your dish here\nn, k, p = [int(i) for i in input().split()]\nn_sep = list(map(int, input().split()))\ncount = 0\nsep_sort = sorted(n_sep)\nhashing = {sep_sort[0]: 0}\n\nfor j in range(1, n):\n if (abs(sep_sort[j] - sep_sort[j - 1]) > k):\n  count += 1\n hashing[sep_sort[j]] = count\n#print(hashing)\nfor i in range(p):\n pair = list(map(int, input().split()))\n \n if hashing[n_sep[pair[1] - 1]] == hashing[n_sep[pair[0] - 1]]:\n  print(\"Yes\")\n else:\n  print(\"No\")\n", "# cook your dish here\nn, k, p = map(int, input().split())\nf = list(map(int, input().split()))\nseq = sorted(set(f))\nm = 0\nseq1 = {seq[0]: 0}\nfor i in range(1, len(seq)):\n if seq[i]-seq[i-1] > k:\n  m += 1\n seq1[seq[i]] = m\nwhile p > 0:\n i, j = map(int, input().split())\n i, j = f[i-1], f[j-1]\n if seq1[i] == seq1[j]:\n  print('Yes')\n else:\n  print('No')\n p -= 1", "class union_find:\n def __init__(self,N):\n  self.parent = {}\n  self.rank = []\n  for i in range(N):\n   self.parent[i] = i\n   self.rank.append(0)\n\n def find(self,x):\n  y = x\n  while(x!=self.parent[x]):\n   x = self.parent[x]\n  self.parent[y] = x\n  return x\n\n def union(self,x,y):\n  px = self.find(x)\n  py = self.find(y)\n  if(px==py):\n   return\n  else:\n   if(self.rank[px]>self.rank[py]):\n    self.parent[py] = px\n   elif(self.rank[px]<self.rank[py]):\n    self.parent[px] = py\n   else:\n    self.parent[py] = px\n    self.rank[px] += 1\n\nN,K,P = [int(i) for i in input().split()]\nX = [int(i) for i in input().split()]\nans = []\n\nuf = union_find(N)\n\nY = []\nfor i in range(N):\n Y.append((X[i],i))\nY.sort()\n\nfor i in range(N-1):\n if(Y[i+1][0]-Y[i][0]<=K):\n  uf.union(Y[i][1],Y[i+1][1])\n\nA = []\nB = []\n\nfor i in range(P):\n a,b = [int(i) for i in input().split()]\n A.append(a-1)\n B.append(b-1)\n\nfor i in range(P):\n pa = uf.find(A[i])\n pb = uf.find(B[i])\n if(pa==pb):\n  ans.append('Yes')\n else:\n  ans.append('No')\n\nfor i in ans:\n print(i)\n", "from collections import defaultdict\ndef precompute(arr,n,k):\n nonlocal maxdistance\n arr = list(enumerate(arr))\n arr.sort(key = lambda x:-x[1])\n maxdistance[arr[0][0]] = arr[0][1]+k\n for i in range(1,n):\n  if arr[i-1][1]-arr[i][1]<=k:\n   maxdistance[arr[i][0]] = maxdistance[arr[i-1][0]]\n  else:\n   maxdistance[arr[i][0]] = arr[i][1]+k\ndef answer(x,y):\n nonlocal maxdistance\n if maxdistance[x-1]==maxdistance[y-1]:\n  return \"Yes\"\n return \"No\"\nmaxdistance = defaultdict(int)\nn,k,q = list(map(int,input().split()))\narr = list(map(int,input().split()))\nprecompute(arr,n,k)\nfor _ in range(q):\n x,y = list(map(int,input().split()))\n print(answer(x,y))\n \n", "n, k, p = map(int, input().split())\nf = list(map(int, input().split()))\nseq = sorted(set(f))\nm = 0\nseq1 = {seq[0]: 0}\nfor i in range(1, len(seq)):\n if seq[i]-seq[i-1] > k:\n  m += 1\n seq1[seq[i]] = m\nwhile p > 0:\n i, j = map(int, input().split())\n i, j = f[i-1], f[j-1]\n if seq1[i] == seq1[j]:\n  print('Yes')\n else:\n  print('No')\n p -= 1", "# cook your dish here\nfrom collections import defaultdict\n\ndef preCompute(arr, n, K):\n nonlocal maxDistance\n arr = list(enumerate(arr))\n arr.sort(key = lambda x: -x[1])\n # print(arr)\n maxDistance[arr[0][0]] = arr[0][1] + K\n for i in range(1, n):\n  if arr[i-1][1] - arr[i][1] <= K:\n   maxDistance[arr[i][0]] = maxDistance[arr[i-1][0]]\n  else:\n   maxDistance[arr[i][0]] = arr[i][1] + K\n\ndef answer(x, y):\n # print(maxDistance)\n if maxDistance[x-1] == maxDistance[y-1]:\n  return \"Yes\"\n return \"No\"\n\n\nmaxDistance = defaultdict(int)\n(n, k, p) = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\npreCompute(arr, n, k)\nfor _ in range(p):\n (x, y) = map(int, input().strip().split())\n print(answer(x, y))", "# cook your dish here\nfrom collections import defaultdict\ndef preCompute(arr, n, K):\n nonlocal maxDistance\n arr = list(enumerate(arr))\n arr.sort(key = lambda x: -x[1])\n # print(arr)\n maxDistance[arr[0][0]] = arr[0][1] + K\n for i in range(1, n):\n  if arr[i-1][1] - arr[i][1] <= K:\n   maxDistance[arr[i][0]] = maxDistance[arr[i-1][0]]\n  else:\n   maxDistance[arr[i][0]] = arr[i][1] + K\n\ndef answer(x, y):\n # print(maxDistance)\n if maxDistance[x-1] == maxDistance[y-1]:\n  return \"Yes\"\n return \"No\"\n\n\nmaxDistance = defaultdict(int)\n(n, k, p) = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\npreCompute(arr, n, k)\nfor _ in range(p):\n (x, y) = map(int, input().strip().split())\n print(answer(x, y))", "# cook your dish here\nn,k,p=map(int,input().split())\nx=[int(x) for x in input().split()]\nl=sorted(set(x))\nm=0\nl1={l[0]:0}\nfor i in range(1,len(l)):\n if l[i]-l[i-1]>k:\n  m+=1\n l1[l[i]]=m\nfor _ in range(p):\n a,b=map(int,input().split())\n a,b=x[a-1],x[b-1]\n print('Yes') if l1[a]==l1[b] else print('No')\n \n ", "n,k,p=list(map(int,input().split()))\na=list(map(int,input().split()))\nnewar=[]\nfor i in range(n):\n newar.append((a[i],i))\nnewar.sort(key=lambda x:x[0])\nrevmap=[0]*n\nans=[0]*n\nctr=1\n\nans[0]=ctr\nfor i in range(n):\n revmap[newar[i][1]]=i\n\n if i!=n-1:\n  if(newar[i+1][0]-newar[i][0])<=k:\n   ans[i+1]=ctr\n  else:\n   ctr+=1\n   ans[i+1]=ctr\nfor _ in range(p):\n A,B=list(map(int,input().split()))\n if ans[revmap[A-1]]==ans[revmap[B-1]]:\n  print('Yes')\n else:\n  print('No')\n", "from sys import stdin,stdout\nfrom math import gcd,log2,log10,floor;\nimport math;\nfrom collections import defaultdict,OrderedDict\nfrom bisect import bisect_left\n# import numpy as np\n# input=stdin.readline\n# print=stdout.write\nn,k,p = [int(i) for i in input().split()]\na=list(map(int,input().split()))\nasort=a[:]\nasort.sort()\ndict=defaultdict(int)\ntheta=1;\ndict[asort[0]]=1;\nfor i in range(1,n):\n if asort[i]-asort[i-1]<=k:\n  dict[asort[i]]=theta;\n else:\n  theta+=1;\n  dict[asort[i]]=theta;\nfor i in range(p):\n alpha,beta=list(map(int,input().split()))\n alpha-=1;\n beta-=1;\n if dict[a[alpha]]==dict[a[beta]]:\n  print(\"Yes\")\n else:\n  print(\"No\")\n# print(dict)\n \n\n\n\n\n", "# cook your dish here\nn,k,p=map(int,input().split())\nx=[int(x) for x in input().split()]\nl=sorted(set(x))\nm=0\nl1={l[0]:0}\nfor i in range(1,len(l)):\n if l[i]-l[i-1]>k:\n  m+=1\n l1[l[i]]=m\nfor _ in range(p):\n a,b=map(int,input().split())\n a,b=x[a-1],x[b-1]\n print('Yes') if l1[a]==l1[b] else print('No')\n \n ", "n,k,p=map(int,input().split())\nx=[int(x) for x in input().split()]\nl=sorted(set(x))\nm=0\nl1={l[0]:0}\nfor i in range(1,len(l)):\n if l[i]-l[i-1]>k:\n  m+=1\n l1[l[i]]=m\nfor _ in range(p):\n a,b=map(int,input().split())\n a,b=x[a-1],x[b-1]\n print('Yes') if l1[a]==l1[b] else print('No')\n \n ", "n,k,p=map(int,input().split())\nx=[int(x) for x in input().split()]\nl=sorted(set(x))\nm=0\nl1={l[0]:0}\nfor i in range(1,len(l)):\n if l[i]-l[i-1]>k:\n  m+=1\n l1[l[i]]=m\nfor _ in range(p):\n a,b=map(int,input().split())\n a,b=x[a-1],x[b-1]\n print('Yes') if l1[a]==l1[b] else print('No')", "n,k,p=map(int,input().split())\nx=[int(x) for x in input().split()]\nl=sorted(set(x))\nm=0\nl1={l[0]:0}\nfor i in range(1,len(l)):\n if l[i]-l[i-1]>k:\n  m+=1\n l1[l[i]]=m\nfor _ in range(p):\n a,b=map(int,input().split())\n a,b=x[a-1],x[b-1]\n print('Yes') if l1[a]==l1[b] else print('No')", "n,k,p=list(map(int,input().strip().split()))\nlist1=list(map(int,input().strip().split()))\nlist2=sorted(list1)\n\nmap1=dict()\ncurr=list2[0]\nindex=0\nfor i in range(1,n):\n if list2[i]-list2[i-1]>k:\n  for j in range(index,i):\n   map1[list2[j]]=list2[i-1]\n  curr=list2[i]\n  index=i\n  \nfor j in range(index,n):\n map1[list2[j]]=list2[n-1]\n\n\nfor _ in range(p):\n a,b=list(map(int,input().strip().split()))\n pos1=list1[a-1]\n pos2=list1[b-1]\n start=min(pos1,pos2)\n end=max(pos1,pos2)\n \n if map1[start]>=end:\n  print(\"Yes\")\n else:\n  print(\"No\")\n\n\n \n\n", "def solve():\n n, k, p = list(map(int, input().split()))\n arr = list(map(int, input().split()))\n new = []\n for i in range(n):\n  new.append([arr[i], i])\n new1 = sorted(new, key=lambda x: x[0])\n po = 0\n store = [0] * n\n for i in range(1, n):\n  if (new1[i][0] - new1[i - 1][0]) > k:\n   po += 1\n  store[new1[i][1]] = po\n for i in range(p):\n  p1, p2 = list(map(int, input().split()))\n  if store[p1 - 1] == store[p2 - 1]:\n   print(\"Yes\")\n  else:\n   print(\"No\")\n\n\ndef __starting_point():\n solve()\n\n__starting_point()", "n,k,p=map(int,input().split())\nl=list(map(int,input().split()))\nt_1=[]\nfor i in range(n):\n t_1.append([i,l[i]])\nt_1=sorted(t_1,key=lambda x:x[1],reverse=True)\ndis={}\n\nfor i in range(n):\n if i==0:\n  dis[i]=t_1[i][1]+k\n  continue\n if (t_1[i-1][1]-t_1[i][1])<=k:\n  dis[i]=dis[i-1]\n else:\n  dis[i]=t_1[i][1]+k\ntrans={}\nfor i in range(n):\n trans[t_1[i][0]]=i\nfor i in range(p):\n a,b=map(int,input().split())\n t_2=a-1\n t_3=b-1\n if dis[trans[t_2]]==dis[trans[t_3]]:\n  print('Yes')\n else:\n  print('No')", "n,k,q = map(int,input().split())\nb = list(map(int,input().split()))\na = sorted(b)\nans = {}\nans[a[0]] = a[0]\nstart = a[0]\nfor i in range(n-1):\n if a[i+1]-a[i]<=k:\n  ans[a[i+1]] = start\n else:\n  start = a[i+1]\n  ans[a[i+1]] = start\n#print(b,a)\nfor u in range(q):\n x,y = map(int,input().split())\n if ans[max(b[y-1],b[x-1])]<=min(b[x-1],b[y-1]):\n  print(\"Yes\")\n else:\n  print(\"No\")", "# cook your dish here\nn,k,q = list(map(int,input().split()))\nb = list(map(int,input().split()))\na = sorted(b)\nans = {}\nans[a[0]] = a[0]\nstart = a[0]\nfor i in range(n-1):\n if a[i+1]-a[i]<=k:\n  ans[a[i+1]] = start\n else:\n  start = a[i+1]\n  ans[a[i+1]] = start\n#print(b,a)\nfor u in range(q):\n x,y = list(map(int,input().split()))\n if ans[max(b[y-1],b[x-1])]<=min(b[x-1],b[y-1]):\n  print(\"Yes\")\n else:\n  print(\"No\")\n", "n,k,q = list(map(int,input().split()))\nb = list(map(int,input().split()))\na = sorted(b)\nans = {}\nans[a[0]] = a[0]\nstart = a[0]\nfor i in range(n-1):\n if a[i+1]-a[i]<=k:\n  ans[a[i+1]] = start\n else:\n  start = a[i+1]\n  ans[a[i+1]] = start\n#print(b,a)\nfor u in range(q):\n x,y = list(map(int,input().split()))\n if ans[max(b[y-1],b[x-1])]<=min(b[x-1],b[y-1]):\n  print(\"Yes\")\n else:\n  print(\"No\")\n", "# cook your dish here\nfrom sys import stdin\nn,k,p=map(int,stdin.readline().split())\nlist1=list(map(int,stdin.readline().split()))\nlist2=[]\nfor i in range(n):\n list2.append((list1[i],i+1))\nlist2.sort(reverse=True)\ndict1={}\ndict1[list2[0][1]]=list2[0][0]+k\nprev=list2[0]\nfor each in list2[1:]:\n if each[0]+k<prev[0]:\n  dict1[each[1]]=each[0]+k\n  prev=each\n else:\n  dict1[each[1]]=dict1[prev[1]]\n  prev=each\n#print(dict1)\nfor j in range(p):\n a,b=map(int,stdin.readline().split())\n if dict1[a]==dict1[b]:\n  print(\"Yes\")\n else:\n  print(\"No\")", "# cook your dish here\nn,k,p=list(map(int,input().split()))\ncoor=list(map(int,input().split()))\nforw=[]\nsort_coor=[]\nfor i,each in enumerate(coor):\n sort_coor.append((each,i))\nsort_coor.sort()\nj=n-2\nmsg={}\nmax1=sort_coor[n-1][0]+k\nmsg[sort_coor[n-1][1]]=max1\nfor i in range(n-1,0,-1):\n j=i-1\n if sort_coor[i][0]-sort_coor[j][0]<=k:\n  msg[sort_coor[j][1]]=max1\n else:\n  max1=sort_coor[j][0]+k\n  msg[sort_coor[j][1]]=max1\n\nfor i in range(p):\n a,b=map(int,input().split())\n if msg[b-1]==msg[a-1]:\n  print(\"Yes\")\n else:\n  print(\"No\")"]