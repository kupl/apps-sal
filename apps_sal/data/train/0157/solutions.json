["class Solution:\n     def isMatch(self, s, p):\n         \"\"\"\n         :type s: str\n         :type p: str\n         :rtype: bool\n         \"\"\"\n         '''\u7ef4\u62a4\u4e24\u4e2a\u4e0b\u6807\uff0c\u9010\u4e2a\u6bd4\u8f83\uff0c\u5982\u679cpj\u4e3a*\uff0c\u5219\u8bb0\u5f55*\u7684\u4f4d\u7f6e\uff0c\u5c06*\u540e\u4e00\u4e2a\u5143\u7d20\u4e0esi\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u5219\u5c06i\u4ece\u8bb0\u5f55\u7684\u4f4d\u7f6e+1\uff0c\u91cd\u65b0\u6bd4\u8f83'''\n         i=0\n         j=0\n         star=-1\n         lenp=len(p)\n         while i<len(s):\n             if j<lenp and (s[i]==p[j] or p[j]=='?'):\n                 i+=1\n                 j+=1\n             elif j<lenp and p[j]=='*':\n                 star=j\n                 mi=i\n                 j+=1\n             elif star!=-1:\n                 mi+=1\n                 i=mi\n                 j=star+1\n             else:\n                 return False\n         while j<lenp and p[j]=='*':\n             j+=1\n         \n         return j==lenp", "class Solution:\n     def isMatch(self, s, p):\n         \"\"\"\n         :type s: str\n         :type p: str\n         :rtype: bool\n         \"\"\"\n         m = len(s)\n         n = len(p)\n         starj = -1\n         last_match = -1\n         i = j = 0\n         while i<m:\n             if j<n and (s[i]==p[j] or p[j]=='?'):\n                 i+=1\n                 j+=1\n             elif j<n and p[j]=='*':\n                 starj = j\n                 j += 1\n                 last_match = i\n             elif starj!=-1:\n                 j = starj+1\n                 last_match +=1\n                 i = last_match\n             else:\n                 return False\n         \n         while j<n and p[j]=='*':\n             j+=1\n         return j==n\n                 \n", "class Solution:\n     def isMatch(self, s, p):\n         \"\"\"\n         :type s: str\n         :type p: str\n         :rtype: bool\n         \"\"\"\n         sp = 0\n         pp = 0\n         match = 0\n         star = -1\n         \n         while sp < len(s):\n             if (pp < len(p) and (s[sp] == p[pp] or p[pp] == '?')):\n                 sp +=1\n                 pp +=1\n             elif pp < len(p) and p[pp] == '*':\n                 star = pp\n                 match = sp\n                 pp +=1\n             elif star != -1:\n                 pp = star + 1\n                 match +=1\n                 sp = match\n             else:\n                 return False\n             \n         while(pp < len(p) and p[pp] == '*'):\n             pp += 1\n             \n         return pp == len(p)\n                 \n                 \n", "class Solution:\n     def isMatch(self, s, p):\n         \"\"\"\n         :type s: str\n         :type p: str\n         :rtype: bool\n         \"\"\"\n         len_s = len(s)\n         len_p = len(p)\n         \n         if len_s == 0 and len_p == 0:\n             return True\n         elif len_p == 0:\n             return False\n         elif len_p == p.count('*'):\n             return True\n         elif len_p - p.count('*') > len_s:\n             return False\n         \n         i_s = 0\n         i_p = 0\n         star_index = None\n         s_star_match = None\n         \n         while i_s < len_s:\n             pchar = p[i_p] if i_p < len_p else None\n             schar = s[i_s]\n             if pchar == '*':\n                 star_index = i_p\n                 s_star_match = i_s\n                 i_p += 1\n             elif pchar == '?' or pchar == schar:\n                 i_s +=1\n                 i_p += 1\n             elif star_index is not None:\n                 i_p = star_index + 1\n                 s_star_match += 1\n                 i_s = s_star_match\n             else:\n                 return False\n         while i_p < len_p and p[i_p] == '*':\n             i_p += 1\n         return i_p == len_p\n         \n"]