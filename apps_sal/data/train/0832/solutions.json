["def fact(n):\n if n<2:\n  return 1\n return n * fact(n-1)\n \ndef ncr(n, r):\n return fact(n)// (fact(r)*fact(n-r))\n \nt=int(input())\n\nfor _ in range(t):\n n, k = list(map(int, input().split()))\n a = list(map(int, input().split()))\n a.sort()\n count_z = a.count(a[k-1])\n count_z_seq = a[:k].count(a[k-1])\n \n print(ncr(count_z, count_z_seq))\n", "import math\nt = int(input())\ndef t_min(li,k):\n x = 0\n for i in range(k):\n  x += li[i]\n return x\ndef cnt(li,x):\n n = 0\n for i in li:\n  if x == i:\n   n += 1\n return n\ndef num_of_occur(li,k):\n z = li[k-1]\n y = 0\n for i in range(k):\n  if(li[i] == z):\n   y += 1\n return y\ndef factorials(z,y):\n return (math.factorial(z)/(math.factorial(y)*math.factorial((z - y))))\n \nfor a in range(t):\n n,k = [int(x) for x in input().split()]\n lis = [int(x) for x in input().split()]\n lis.sort()\n sumn = t_min(lis,k)\n y = num_of_occur(lis,k)\n z = cnt(lis,lis[k-1])\n print(int(factorials(z,y)))\n", "import math\nt = int(input())\ndef t_min(li,k):\n x = 0\n for i in range(k):\n  x += li[i]\n return x\ndef cnt(li,x):\n n = 0\n for i in li:\n  if x == i:\n   n += 1\n return n\ndef num_of_occur(li,k):\n z = li[k-1]\n y = 0\n for i in range(k):\n  if(li[i] == z):\n   y += 1\n return y\ndef factorials(z,y):\n return (math.factorial(z)/(math.factorial(y)*math.factorial((z - y))))\n \nfor a in range(t):\n n,k = [int(x) for x in input().split()]\n lis = [int(x) for x in input().split()]\n lis.sort()\n sumn = t_min(lis,k)\n y = num_of_occur(lis,k)\n z = cnt(lis,lis[k-1])\n print(int(factorials(z,y)))\n \n", "import math\ndef fact(n):\n return math.factorial(n)\nt=int(input())\nfor _ in range(t):\n n,k=map(int,input().split())\n arr=list(map(int,input().split()))\n arr.sort()\n tot=0\n for i in range(k):\n  tot+=arr[i]\n count=0\n for i in range(n):\n  if arr[i]==arr[k-1]:\n   count+=1\n\n orig_count=0\n for i in range(k):\n  if arr[i]==arr[k-1]:\n   orig_count+=1\n print(fact(count)//(fact(orig_count)*fact(count-orig_count)))", "from math import factorial as fact \nt=int(input())\nwhile t>0:\n n,k=map(int,input().split()) \n y=list(map(int,input().split())) \n y.sort() \n k1=[]\n for i in range(len(y)):\n  if i>k-1:\n   if y[i]!=k1[-1]:\n    break\n   else:\n    k1.append(y[i]) \n  else:\n   k1.append(y[i])\n c=k1[k-1] \n ans=0 \n for i in range(k): \n  if k1[i]==c: \n   ans+=1 \n ans2=k1.count(c) \n print(fact(ans2)//(fact(ans)*fact(ans2-ans))) \n \n   \n \n \n \n \n t-=1", "t=int(input())\nwhile t>0:\n n,k=map(int,input().split()) \n y=list(map(int,input().split())) \n y.sort() \n k1=[]\n for i in range(len(y)):\n  if i>k-1:\n   if y[i]!=k1[-1]:\n    break\n   else:\n    k1.append(y[i]) \n  else:\n   k1.append(y[i])\n from itertools import combinations\n ans=list(combinations(k1,k)) \n l=[]\n for i in ans:\n  l.append(sum(i))\n print(l.count(min(l)))\n  \n \n t-=1", "def fact(n): \n \n res = 1\n  \n for i in range(2, n+1): \n  res = res * i \n   \n return res \n\ndef nCr(n, r): \n \n return (fact(n) / (fact(r) \n    * fact(n - r))) \nfor _ in range(int(input())):\n n, k = map(int,input().split())\n arr = list(map(int,input().split()))\n arr = sorted(arr)\n last_index_of_k = arr[k-1]\n count = 0\n for i in range(n):\n  if(arr[i] == last_index_of_k):\n   count += 1\n num = 0\n for i in range(k):\n  if(arr[i] == last_index_of_k):\n   num += 1\n print(int(nCr(count,num)))", "# cook your dish here\n# cook your dish here\ndef fact(n):\n res=1\n for i in range(1,n+1):\n  res*=i\n return res\nt=int(input())\nfor _ in range(t):\n n,k=list(map(int,input().split()))\n arr=list(map(int,input().split()))\n arr.sort()\n tot=0\n for i in range(k):\n  tot+=arr[i]\n count=0\n for i in range(n):\n  if arr[i]==arr[k-1]:\n   count+=1\n\n orig_count=0\n for i in range(k):\n  if arr[i]==arr[k-1]:\n   orig_count+=1\n print(fact(count)//(fact(orig_count)*fact(count-orig_count)))\n", "# cook your dish here\n# cook your dish here\ndef fact(n):\n res=1\n for i in range(1,n+1):\n  res*=i\n return res\nt=int(input())\nfor _ in range(t):\n n,k=list(map(int,input().split()))\n arr=list(map(int,input().split()))\n arr.sort()\n tot=0\n for i in range(k):\n  tot+=arr[i]\n count=0\n for i in range(n):\n  if arr[i]==arr[k-1]:\n   count+=1\n\n orig_count=0\n for i in range(k):\n  if arr[i]==arr[k-1]:\n   orig_count+=1\n print(fact(count)//(fact(orig_count)*fact(count-orig_count)))\n  \n  \n \n", "# cook your dish here\ndef fact(n):\n res=1\n for i in range(1,n+1):\n  res*=i\n return res\nt=int(input())\nfor _ in range(t):\n n,k=list(map(int,input().split()))\n arr=list(map(int,input().split()))\n arr.sort()\n tot=0\n for i in range(k):\n  tot+=arr[i]\n count=0\n for i in range(n):\n  if arr[i]==arr[k-1]:\n   count+=1\n\n orig_count=0\n for i in range(k):\n  if arr[i]==arr[k-1]:\n   orig_count+=1\n print(fact(count)//(fact(orig_count)*fact(count-orig_count)))\n  \n  \n \n", "from itertools import combinations\nfor i in range(int(input())):\n n,k=map(int, input().split())\n x=list(map(int,input().split(maxsplit=n)))\n y=list(combinations(x,k))\n z=[]\n for i in range(len(y)):\n  z.append(sum(y[i]))\n print(z.count(min(z)))", "from itertools import combinations\nt=int(input())\nfor i in range(t):\n n,k=map(int, input().split())\n x=list(map(int,input().split(maxsplit=n)))\n y=list(combinations(x,k))\n z=[]\n for i in range(len(y)):\n  z.append(sum(y[i]))\n print(z.count(min(z)))", "# cook your dish here\nfrom itertools import combinations\nt=int(input())\nfor i in range(t):\n n,k=map(int, input().split())\n num=list(map(int,input().split(maxsplit=n)))\n y=list(combinations(num,k))\n num1=[]\n for i in range(len(y)):\n  num1.append(sum(y[i]))\n print(num1.count(min(num1)))", "# cook your dish here\nimport itertools\nt=int(input())\nfor i in range(t):\n n,k=map(int, input().split())\n num=list(map(int,input().split(maxsplit=n)))\n y=list(itertools.combinations(num,k))\n num1=[]\n for i in range(len(y)):\n  num1.append(sum(y[i]))\n print(num1.count(min(num1)))", "# cook your dish here\nimport itertools\nt=int(input())\nfor i in range(t):\n n,k=map(int, input().split())\n num=list(map(int,input().split(maxsplit=n)))\n y=list(itertools.combinations(num,k))\n num1=[]\n for i in range(len(y)):\n  num1.append(sum(y[i]))\n print(num1.count(min(num1)))", "# cook your dish here\nimport itertools\nt=int(input())\nfor i in range(t):\n n,k=map(int, input().split())\n num=list(map(int,input().split()))\n y=list(itertools.combinations(num,k))\n num1=[]\n for i in range(len(y)):\n  num1.append(sum(y[i]))\n print(num1.count(min(num1)))", "# cook your dish here\nimport itertools\nt=int(input())\nfor i in range(t):\n n,k=map(int, input().split())\n num=list(map(int,input().split()))\n y=list(itertools.combinations(num,k))\n num1=[]\n for i in range(len(y)):\n  num1.append(sum(y[i]))\n x=min(num1)\n print(num1.count(x))", "# cook your dish here\nfrom math import factorial\nt=int(input())\nfor i in range(t):\n n,k=map(int,input().split())\n l=list(map(int,input().split()))\n l.sort()\n x=0\n y=0\n if k>0:\n  for j in range(n):\n   if l[j]==l[k-1] and j<k:\n    x+=1\n   elif l[j]==l[k-1] and j>=k:\n    y+=1\n   elif l[j]>l[k-1]:\n    break\n  s=int((factorial(x+y))//((factorial(x))*factorial(y)))\n  print(s)\n else:\n  print(1)", "# cook your dish here\nfrom math import factorial\nt=int(input())\nfor i in range(t):\n n,k=list(map(int,input().split()))\n l=list(map(int,input().split()))\n l.sort()\n x=0\n y=0\n for j in range(n):\n  if l[j]==l[k-1] and j<k:\n   x+=1\n  elif l[j]==l[k-1] and j>=k:\n   y+=1\n  elif l[j]>l[k]:\n   break\n s=int((factorial(x+y))//((factorial(x))*factorial(y)))\n print(s)\n", "# cook your dish here\nimport itertools\nt=int(input())\nfor i in range(t):\n n,k=list(map(int, input().split()))\n num=list(map(int,input().split()))\n y=list(itertools.combinations(num,k))\n num1=[]\n for i in range(len(y)):\n  num1.append(sum(y[i]))\n x=min(num1)\n print(num1.count(x))\n \n", "# cook your dish here\nimport itertools\nt=int(input())\nfor i in range(t):\n def subset(num,k):\n  return(list(itertools.combinations(num,k)))\n n,k=list(map(int, input().split()))\n num=list(map(int,input().split()))\n y=subset(num,k)\n num1=[]\n for i in range(len(y)):\n  num1.append(sum(y[i]))\n x=min(num1)\n print(num1.count(x))\n \n"]