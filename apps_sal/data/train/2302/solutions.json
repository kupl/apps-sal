["n, d = list(map(int, input().split()))\nD = list(map(int, input().split()))\nA = [0]*(n+1)\nP = [0]*(n+1)\n\nP[0] = pos = d\nfor i, x in enumerate(D):\n    if x <= 2*pos:\n        pos = abs(x-pos)\n    P[i+1] = pos\n    if pos == 0:\n        break\n\nfor i in range(n-1, -1, -1):\n    if D[i] <= 2*A[i+1]+1:\n        A[i] = A[i+1] + D[i]\n    else:\n        A[i] = A[i+1]\n\nq = input()\nQ = list(map(int, input().split()))\nfor i in Q:\n    if P[i-1] <= A[i] and pos == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n", "import sys\ninput = sys.stdin.readline\n\n\"\"\"\n\u5f8c\u308d\u304b\u3089\u3001\u5230\u9054\u4e0d\u53ef\u80fd\u8ddd\u96e2\u306e\u96c6\u5408\u3092\u898b\u3066\u3044\u304d\u305f\u3044\u3002\n\u96c6\u5408\u3092\u6301\u3064\u3068\u53b3\u3057\u3044\u304c\u3001\u6700\u5c0f\u5024\u3060\u3051\u6301\u3063\u3066\u304a\u3051\u3070\u3088\u3044\u3002\n\"\"\"\n\nN,dist = map(int,input().split())\nD = [int(x) for x in input().split()]\n\n# \u5404\u30bf\u30fc\u30f3\u306e\u51fa\u767a\u4f4d\u7f6e\nstart_dist = [dist]\nfor d in D:\n    x = start_dist[-1]\n    y = min(abs(x - d), x)\n    start_dist.append(y)\n\nng_dist = [None] * (N+1)\nng_dist[N] = 1\n\nfor i,d in enumerate(D[::-1]):\n    x = ng_dist[N-i]\n    y = x if x <= d//2 else x + d\n    ng_dist[N-i-1] = y\n\ninput()\nQ = [int(x) for x in input().split()]\n\nanswer = ['YES' if ng_dist[d] <= start_dist[d-1] else 'NO' for d in Q]\n\nprint('\\n'.join(answer))", "N, D = list(map( int, input().split() ))\nd = list( map( int, input().split() ) )\nQ = int( input() )\nq = list( [int( x ) - 1 for x in input().split()] )\n\ndis = [ 0 for i in range( N + 1 ) ]\ndis[ 0 ] = D\nfor i in range( N ):\n  dis[ i + 1 ] = min( dis[ i ], abs( dis[ i ] - d[ i ] ) )\n\ndp = [ 0 for i in range( N + 1 ) ]\ndp[ N ] = 1\nfor i in range( N - 1, -1, -1 ):\n  if dp[ i + 1 ] <= d[ i ] // 2:\n    dp[ i ] = dp[ i + 1 ]\n  else:\n    dp[ i ] = dp[ i + 1 ] + d[ i ]\n\nfor qi in range( Q ):\n  print(( [ \"NO\", \"YES\" ][ dis[ q[ qi ] ] >= dp[ q[ qi ] + 1 ] ] ))\n", "# E\nN, D = list(map(int, input().split()))\ndv = list(map(int, input().split()))\nQ = int(input())\nqv = list(map(int, input().split()))\n\n# trace of Alice\ndist_alice = D\ndist_alice_list = [D]\nfor i in range(N):\n    if dist_alice >= dv[i]:\n        dist_alice -= dv[i]\n    elif 2*dist_alice >= dv[i]:\n        dist_alice = dv[i] - dist_alice\n    dist_alice_list.append(dist_alice)\n\nsol_min = [1]\nsol_min_ = 1 \nfor i in range(N-1, -1, -1):\n    if 2 * sol_min_ > dv[i]:\n        sol_min_ += dv[i]\n    sol_min.append(sol_min_)\n\nfor i in range(Q):\n    if dist_alice_list[qv[i]-1] >= sol_min[N-qv[i]]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n", "N,D=list(map(int,input().split()))\nd=list(map(int,input().split()))\n\ndp=[D]*N\n\nif abs(D-d[0])<D:\n    dp[0]=abs(D-d[0])\n\nfor i in range(1,N):\n    dp[i]=min(dp[i-1],abs(dp[i-1]-d[i]))\n\nans=[\"NO\"]*N\ndata=[0]*(N+1)\nfor i in range(N-1,0,-1):\n    if d[i]//2>data[i+1]:\n        data[i]=data[i+1]\n    else:\n        data[i]=data[i+1]+d[i]\n    if dp[i-1]>data[i+1]:\n        ans[i]=\"YES\"\n\ni=0\nif d[i]//2>data[i+1]:\n    data[i]=data[i+1]\nelse:\n    data[i]=data[i+1]+d[i]\n\nif D>data[i+1]:\n    ans[i]=\"YES\"\n\nQ=int(input())\nq=list(map(int,input().split()))\nfor i in range(Q):\n    print((ans[q[i]-1]))\n\n\n#print(dp)\n#print(data)\n#print(ans)\n", "n, D = map(int, input().split())\nx = list(map(int, input().split()))\nQ = int(input())\nq = list(map(int, input().split()))\n\nind = [D]\nfor i in range(n):\n\tind.append(min(ind[-1], abs(ind[-1] - x[i])))\n\nl = [1]\nfor i in range(n-1, -1, -1):\n\tif x[i] < 2*l[-1]:\n\t\tl.append(x[i] + l[-1])\n\telse:\n\t\tl.append(l[-1])\nl = l[::-1]\n\nfor i in range(Q):\n\tif l[q[i]] <= ind[q[i]-1]:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "import sys\nreadline = sys.stdin.readline\n\nN, D = list(map(int, readline().split()))\n\nA = list(map(int, readline().split())) + [0]\n\nreach = [None]*(N+2)\nreach[-1] = D\nfor i in range(N+1):\n    r = reach[i-1]\n    a = A[i]\n    reach[i] = min(r, abs(r-a))\n\nputter = [0]*(N+2)\nfor i in range(N, -1, -1):\n    p = putter[i+1]\n    a = A[i]\n    if 2*p+1 >= a:\n        p += a\n    putter[i] = p\n\nres = ['NO']*N\nfor i in range(N):\n    if reach[i-1] > putter[i+1]:\n        res[i] = 'YES'\n\nQ = int(readline())\nprint(('\\n'.join(res[int(i)-1] for i in readline().split())))\n\n", "#!/usr/bin/env python3\n\n\ndef solve(n, d, da, q, qa):\n\n    a = [d]\n    x = d\n    for di in da:\n        x = min(x, max(x - di, di - x))\n        a.append(x)\n\n    b = [1]\n    x = 1\n    for i in range(n - 1, -1, -1):\n        di = da[i]\n        if di // 2 < x:\n            x += di\n        b.append(x)\n    b.reverse()\n\n    for qi in qa:\n        if b[qi] <= a[qi - 1]:\n            print('YES')\n        else:\n            print('NO')\n\n\ndef main():\n    n, d = input().split()\n    n = int(n)\n    d = int(d)\n    da = list(map(int, input().split()))\n    q = input()\n    q = int(q)\n    qa = list(map(int, input().split()))\n\n    solve(n, d, da, q, qa)\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\nN,D = list(map(int, sys.stdin.readline().rstrip().split()))\nds = list(map(int, sys.stdin.readline().rstrip().split()))\nQ, = list(map(int, sys.stdin.readline().rstrip().split()))\nqs = list(map(int, sys.stdin.readline().rstrip().split()))\n\n\ntargets = [1]\nfor d in reversed(ds):\n    if(d//2 < targets[-1]):\n        targets.append(targets[-1] + d)\n    else:\n        targets.append(targets[-1])\ntargets.reverse()\n\ncurrent = D\ncan_avoids = []\nfor i in range(N):\n    d = ds[i]\n    target = targets[i+1]\n    #print(\"current:\", current)\n    can_avoids.append(current >= target)\n    if d//2 < current:\n        current -= d\n        current = max(-current, current)\n\n#print(targets)\n#print(can_avoids)\n\nfor q in qs:\n    if (can_avoids[q-1]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nreturn\n", "N, D = list(map(int, input().split()))\nds = list(map(int, input().split()))\nQ = int(input())\nquerys = list([int(x) - 1 for x in input().split()])\n\n# ps[i]: i\u56de\u76ee\u306e\u79fb\u52d5\u5f8c\u306e\u4f4d\u7f6e\uff08\u76ee\u7684\u5730\u307e\u3067\u306e\u8ddd\u96e2\uff09\nps = [0] * (N + 1)\nps[0] = D\nfor i in range(N):\n    ps[i + 1] = min(abs(ps[i] - ds[i]), ps[i])\n\nif ps[N] != 0:\n    print(('\\n'.join(['YES'] * Q)))\n    return\n\n# ms[i]: i\u756a\u76ee\u306e\u79fb\u52d5\u5f8c\u306bm\u4ee5\u4e0b\u306e\u4f4d\u7f6e\u306a\u3089\u3070\u5168\u3066\u3001\u76ee\u7684\u5730\u306b\u5230\u9054\u53ef\u80fd\u3067\u3042\u308b\u3088\u3046\u306am\u306e\u6700\u5927\u5024\nms = [0] * (N + 1)\nfor i in range(N)[::-1]:\n    if ms[i + 1] + 1 >= ds[i] - ms[i + 1]:\n        ms[i] = ms[i + 1] + ds[i]\n    else:\n        ms[i] = ms[i + 1]\n\nfor q in querys:\n    if ps[q] <= ms[q + 1]: # \u59a8\u5bb3\u306f\u4e0d\u53ef\u80fd\n        print('NO')\n    else:\n        print('YES')\n", "import sys\ninput = sys.stdin.readline\n\n\"\"\"\n\u5f8c\u308d\u304b\u3089\u3001\u5230\u9054\u4e0d\u53ef\u80fd\u8ddd\u96e2\u306e\u96c6\u5408\u3092\u898b\u3066\u3044\u304d\u305f\u3044\u3002\n\u96c6\u5408\u3092\u6301\u3064\u3068\u53b3\u3057\u3044\u304c\u3001\u6700\u5c0f\u5024\u3060\u3051\u6301\u3063\u3066\u304a\u3051\u3070\u3088\u3044\u3002\n\"\"\"\n\nN,dist = map(int,input().split())\nD = [int(x) for x in input().split()]\n\n# \u5404\u30bf\u30fc\u30f3\u306e\u51fa\u767a\u4f4d\u7f6e\nstart_dist = [dist]\nfor d in D:\n    x = start_dist[-1]\n    y = x-d if x > d else d - x\n    start_dist.append(x if x < y else y)\n\nng_dist = [None] * (N+1)\nng_dist[N] = 1\n\nfor i,d in enumerate(D[::-1]):\n    x = ng_dist[N-i]\n    y = x if x <= d//2 else x + d\n    ng_dist[N-i-1] = y\n\ninput()\nQ = [int(x) for x in input().split()]\n\nanswer = ['YES' if ng_dist[d] <= start_dist[d-1] else 'NO' for d in Q]\n\nprint('\\n'.join(answer))", "N, D = list(map(int,input().split()))\nd = list(map(int,input().split()))\nQ = int(input())\nq = list(map(int,input().split()))\n\na = [D for i in range(N)]\nb = [1 for i in range(N+1)]\nfor i in range(1,N):\n\ta[i] = min(abs(a[i-1]-d[i-1]),a[i-1])\nfor i in range(N)[::-1]:\n\tif d[i]//2 < b[i+1]:\n\t\tb[i] = b[i+1] + d[i]\n\telse:\n\t\tb[i] = b[i+1]\n\nres = \"\"\nfor i in q:\n\tif a[i-1] < b[i]:\n\t\tres+=\"NO\"\n\telse:\n\t\tres+=\"YES\"\n\tres+=\"\\n\"\n\nprint(res)\n\n\n\n\n\n", "N,start = map(int,input().split())\nD = list(map(int,input().split()))\ninput()\nQ = list(map(int,input().split()))\n\nQ = [(k-1,i) for i,k in enumerate(Q)]\nQ.sort()\n\nP = [start]\nfor d in D:\n  a = P[-1]\n  b = abs(a-d)\n  P.append(min(a,b))\n\nresult = [None]*len(Q)\n\nx = 1\n\nfor i,d in zip(reversed(range(len(D))), reversed(D)):\n  if Q[-1][0] == i:\n    result[Q[-1][1]] = P[i] >= x\n    Q.pop()\n    if not Q:\n      break\n\n  if abs(x-d) < x:\n    x += d\n\nfor r in result:\n  print('YES' if r else 'NO')", "N, D = list(map( int, input().split() ))\nd = list( map( int, input().split() ) )\nQ = int( input() )\nq = list( [int( x ) - 1 for x in input().split()] )\n\ndis = [ 0 for i in range( N + 1 ) ]\ndis[ 0 ] = D\nfor i in range( N ):\n  dis[ i + 1 ] = min( dis[ i ], abs( dis[ i ] - d[ i ] ) )\n\ndp = [ 0 for i in range( N + 1 ) ]\ndp[ N ] = 1\nfor i in range( N - 1, -1, -1 ):\n  if dp[ i + 1 ] <= d[ i ] // 2:\n    dp[ i ] = dp[ i + 1 ]\n  else:\n    dp[ i ] = dp[ i + 1 ] + d[ i ]\n\nfor qi in range( Q ):\n  print(( [ \"NO\", \"YES\" ][ dis[ q[ qi ] ] >= dp[ q[ qi ] + 1 ] ] ))\n", "import math\n\nN, D = list(map(int, input().split()))\nDs = list(map(int, input().split()))\nQ = int(input())\nQs = list(map(int, input().split()))\n\ndp = [math.inf]*(N+1) # (i\u304b\u3089\u5148\u3060\u3051\u3092\u307f\u3066)\uff1d\uff1e\u30b4\u30fc\u30eb\u3067\u304d\u306a\u3044\u6700\u5c0f\ndp[-1] = 1\nfor i in range(N-1, -1, -1):\n    if Ds[i] >= 2 * dp[i+1]:\n        dp[i] = dp[i+1]\n    else:\n        dp[i] = dp[i+1]+Ds[i]\n\nPos = [D]\nfor i in range(N):\n    if Ds[i] > Pos[-1]*2:\n        Pos.append(Pos[-1])\n    else:\n        Pos.append(abs(Pos[-1]-Ds[i]))\n\nfor q in Qs:\n    if dp[q]>Pos[q-1]:\n        print('NO')\n    else:\n        print('YES')\n", "N, D = list(map( int, input().split() ))\nd = list( map( int, input().split() ) )\nQ = int( input() )\nq = list( map( int, input().split() ) )\n\ndis = [ 0 for i in range( N + 1 ) ]\ndis[ 0 ] = D\nfor i in range( N ):\n  dis[ i + 1 ] = min( dis[ i ], abs( dis[ i ] - d[ i ] ) )\n\ndp = [ 0 for i in range( N + 1 ) ]\ndp[ N ] = 1\nfor i in range( N - 1, -1, -1 ):\n  if dp[ i + 1 ] <= d[ i ] // 2:\n    dp[ i ] = dp[ i + 1 ]\n  else:\n    dp[ i ] = dp[ i + 1 ] + d[ i ]\n\nfor qi in range( Q ):\n  print(( [ \"NO\", \"YES\" ][ dis[ q[ qi ] - 1 ] >= dp[ q[ qi ] ] ] ))\n", "N, D = map(int, input().split())\nd = list(map(int, input().split()))\nQ = int(input())\nq = list(map(lambda x : int(x)-1 , input().split()))\n\ndis = [0 for i in range(N+1)]\ndis[0] = D\nfor i in range(N):\n    dis[i+1] = min(dis[i], abs(dis[i] - d[i]))\n\ndp = [0 for i in range(N+1)]\ndp[N] = 1\nfor i in range(N-1, -1, -1):\n    if d[i] // 2 >= dp[i+1]:\n        dp[i] = dp[i+1]\n    else:\n        dp[i] = dp[i+1] + d[i]\n\nfor qi in range(Q):\n    print([\"YES\", \"NO\"][dis[q[ qi ]] < dp[q[ qi ] + 1]])", "n, D = map(int, input().split())\nx = list(map(int, input().split()))\nQ = int(input())\nq = list(map(int, input().split()))\n\nind = [D]\nfor i in range(n):\n\tind.append(min(ind[-1], abs(ind[-1] - x[i])))\n#print(ind)\n\nl = [1]\nfor i in range(n-1, -1, -1):\n\tif x[i] < 2*l[-1]:\n\t\tl.append(x[i] + l[-1])\n\telse:\n\t\tl.append(l[-1])\nl = l[::-1]\n\nfor i in range(Q):\n\tif l[q[i]] <= ind[q[i]-1]:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef main():\n    # YouTube\u306e\u901a\u308a\n    dn, s = MI()\n    dd = LI()\n    qn = II()\n    qq = LI()\n    qi = [(q - 1, i) for i, q in enumerate(qq)]\n    # pos[i]...dd[i]\u306e\u79fb\u52d5\u524d\u306e\u4f4d\u7f6e\n    pos = [s]\n    for d in dd:\n        pos.append(min(pos[-1], abs(d - pos[-1])))\n    # print(pos)\n    # bb[i]...dd[i]\u306e\u79fb\u52d5\u524d\u306b\u3053\u306e\u8ddd\u96e2\u4ee5\u4e0a\u306e\u4f4d\u7f6e\u306b\u3044\u308c\u3070\u30b4\u30fc\u30eb\u306b\u5c4a\u304b\u306a\u3044\u3068\u3044\u3046\u5883\u76ee\n    bb = [1] * (dn + 1)\n    for i in range(dn - 1, -1, -1):\n        d = dd[i]\n        if d < bb[i + 1] * 2:\n            bb[i] = bb[i + 1] + d\n        else:\n            bb[i] = bb[i + 1]\n    # print(bb)\n    #    dd0   dd1   dd2   dd3\n    # po0   po1   po2   po3   po4\n    # bb0   bb1   bb2   bb3   bb4\n    # \u3068\u3044\u3046\u524d\u5f8c\u95a2\u4fc2\u306a\u306e\u3067q\u756a\u76ee(0-origin)\u306edd\u306b\u9b54\u6cd5\u3092\u304b\u3051\u308b\u3068\u304d\u306f\n    # pos[q]>=bb[q+1]\u3067\u3042\u308b\u306a\u3089\u59a8\u5bb3\u53ef\u80fd(YES)\n    ans = [\"\"] * qn\n    for q, ai in qi:\n        if pos[q] >= bb[q + 1]: ans[ai] = \"YES\"\n        else: ans[ai] = \"NO\"\n    print(*ans, sep=\"\\n\")\n\nmain()\n"]