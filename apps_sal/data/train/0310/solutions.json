["class Solution:\n     def monotoneIncreasingDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"\n         \n         arr = [int(ch) for ch in str(N)] # create array from number 1234 => [1,2,3,4]\n         marker = len(arr)\n         \n         i = len(arr)-2\n         while i >= 0:\n             if arr[i] > arr[i+1]:\n                 marker = i+1\n                 arr[i] -= 1  \n             i-=1\n         \n         while marker < len(arr):\n             arr[marker] = 9\n             marker += 1\n         \n         return int(''.join([str(num) for num in arr]))\n         \n         \n #         # any number 0..9 has always monotone increasing digits\n #         if N < 10:\n #             return N\n         \n #         stack = []\n         \n #         # create stack of digits 1234 -> [4,3,2,1]\n #         while N:\n #             stack.append(N%10)\n #             N = N // 10      \n         \n #         X = 0\n #         power_of_10 = len(stack)-1\n #         right = stack.pop()\n #         while stack:\n #             left = right\n #             right = stack.pop()\n #             if left <= right:\n #                 X += left * (10**power_of_10)\n #                 power_of_10 -= 1\n #             else:\n #                 X += (left-1) * (10**power_of_10)\n #                 X += int('9'*power_of_10)\n #                 return self.monotoneIncreasingDigits(X)\n         \n #         # remaining part\n #         X += right\n         \n #         return X\n", "class Solution:\n     def monotoneIncreasingDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"\n         digits = list(map(int, str(N)))\n         i = 0\n         while i < len(digits) - 1 and digits[i] <= digits[i+1]:\n             i += 1\n         while 0 <= i < len(digits) - 1 and digits[i] > digits[i+1]:\n             digits[i] -= 1\n             i -= 1\n         digits[i+2:] = '9' * (len(digits) - i - 2)\n         return int(''.join(map(str, digits)))\n", "class Solution:\n     def monotoneIncreasingDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"\n         n = str(N)\n         pos = 0\n         for i, char in enumerate(n):\n             if i>0 and int(n[i])<int(n[i-1]):\n                 return int(\"\".join(n[:pos])+str(int(n[pos])-1)+\"9\"*(len(n)-1-pos)) if int(n[pos])>1 else int(\"9\"*(len(n)-1-pos))\n             elif i>0 and n[i] != n[i-1]:\n                 pos = i\n         return N", "class Solution:\n     def monotoneIncreasingDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"\n         NN = ('000000000000000000' + str(N))[-11:]\n         chron = '0'\n         for i in range(10):\n             maxpossible = int(chron[-1])\n             for fill in range(int(chron[-1]),10):\n                 if chron + str(fill)*(10-i) <= NN:\n                     maxpossible = fill\n             chron = chron + str(maxpossible)\n         return int(chron)\n \n", "class Solution(object):\n     def monotoneIncreasingDigits(self, N):\n         digits = []\n         A = list(map(int, str(N)))\n         for i in range(len(A)):\n             for d in range(1, 10):\n                 if digits + [d] * (len(A)-i) > A:\n                     digits.append(d-1)\n                     break\n             else:\n                 digits.append(9)\n \n         return int(\"\".join(map(str, digits)))", "class Solution:\n     def monotoneIncreasingDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"\n         digits = list(int(d) for d in str(N))\n         for i in range(len(digits)-1, 0, -1):\n             if digits[i] < digits[i-1]:\n                 for k in range (i, len(digits)):\n                     digits[k] = 9\n                 digits[i-1] -= 1\n \n         return int(''.join([str(d) for d in digits]))", "class Solution(object):\n     def monotoneIncreasingDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"\n         l = list(str(N))\n         length = len(l)\n         for i in range(length): l[i] = ord(l[i]) - ord('0')\n \n         # get the longest non-decreasing sequence\n         index = -1\n         for i in range(length-1):\n             if l[i] > l[i+1]:\n                 index = i\n                 break\n         if index == -1: return N\n \n         j = -1\n         # identity which digit to change\n         for i in range(index, -1, -1):\n             j = i\n             if i>0 and l[i] == l[i-1]:\n                 continue\n             break\n         \n         # make the change\n         l[j] -= 1\n         for i in range(j+1, length): l[i] = 9\n \n         # get the result\n         res = 0\n         for i in range(length): res = res*10+l[i]\n         return res", "class Solution:\n     def monotoneIncreasingDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"\n         a = list(str(N))\n         i = 1\n         while i < len(a) and a[i] >= a[i-1]:\n             i += 1\n         while 0 < i < len(a) and a[i] < a[i-1]:\n             a[i-1] = str(int(a[i-1]) - 1)\n             i -= 1\n         a[i+1:] = '9' * (len(a)-i-1)\n         \n         return int(''.join(a))", "class Solution:\n     def monotoneIncreasingDigits(self, N):\n         \"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"\n         n, pos = str(N), 0\n         for i, char in enumerate(n):\n             if i>0 and int(n[i])<int(n[i-1]): return int(\"\".join(n[:pos])+str(int(n[pos])-1)+\"9\"*(len(n)-1-pos)) if int(n[pos])>1 else int(\"9\"*(len(n)-1-pos))\n             elif i>0 and n[i] != n[i-1]: pos = i\n         return N", "class Solution:\n     def monotoneIncreasingDigits(self, N):\n         N = str(N)\n         L = len(N)\n         for i in range(L - 1):\n             if N[i] > N[i + 1]:\n                 return self.monotoneIncreasingDigits(int(N[:i] + str(int(N[i]) - 1) + '9' * (L - i - 1)))\n         return int(N)"]