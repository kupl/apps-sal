["class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         def make_str(buffer, length, last):\n             if last:\n                 return ' '.join(buffer) + ' ' * (maxWidth - length)\n             space = maxWidth - (length - len(buffer) + 1)\n             cnt = len(buffer) - 1\n             tmp = ''\n             if cnt == 0:\n                 tmp = buffer[0] + ' ' * space\n             else:\n                 spaces = [space // cnt] * cnt\n                 for i in range(space % cnt):\n                     spaces[i] += 1\n                 spaces.append(0)\n                 for s, b in zip(spaces, buffer):\n                     tmp += b + ' ' * s\n             return tmp\n \n         res = []\n         buffer = []\n         length = 0\n         for w in words:\n             lw = len(w)\n             if lw > maxWidth:\n                 continue\n             if len(buffer) == 0:\n                 buffer.append(w)\n                 length = lw\n             elif length + lw + 1 <= maxWidth:\n                 buffer.append(w)\n                 length = length + lw + 1\n             else:\n                 tmp = make_str(buffer, length, False)\n                 res.append(tmp)\n                 buffer = [w]\n                 length = lw\n         if len(buffer) > 0:\n             tmp = make_str(buffer, length, True)\n             res.append(tmp)\n \n         return res\n", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         A=[]\n         for i in range(len(words)):\n             A.append(len(words[i]))\n         temp=0\n         k=0\n         B=[]\n         for i in range(len(A)):\n             #if i==len(A)-1:\n                 #B.append\n             if temp==0:\n                 temp=A[i]\n             elif (temp+1+A[i])>maxWidth:\n                 if i-k==1:\n                     B.append([k,i,0,0])\n                 else:\n                     B.append([k,i,(maxWidth-temp+i-k-1)//(i-k-1),(maxWidth-temp+i-k-1)%(i-k-1)])\n                 temp=A[i]\n                 k=i\n             else:\n                 temp=temp+1+A[i]\n             if i==len(A)-1:\n                 B.append([k,i+1,1,0])\n         str1=''\n         ans=[]\n         for i in range(len(B)):\n             for j in range(B[i][0],B[i][1]):\n                 if j==B[i][0]:\n                     str1+=words[B[i][0]]\n                 elif B[i][3]:\n                     str1=str1+(B[i][2]+1)*' '+words[j]\n                     B[i][3]-=1\n                 else:\n                     str1=str1+B[i][2]*' '+words[j]\n             if i == len(B) - 1 or B[i][1]-B[i][0]==1:\n                 str1=str1+(maxWidth-len(str1))*' '\n             ans.append(str1)\n             str1=''\n         return ans\n             \n                 \n             \n                        \n", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         currLine = []\n         charCount = 0\n         result = []\n         for word in words:\n             if charCount + len(currLine) + len(word) <= maxWidth:\n                 charCount += len(word)\n                 currLine.append(word)\n             else:\n                 thisLine = currLine[0]\n                 for i in range(1, len(currLine)):\n                     thisLine += ' ' * ((maxWidth - charCount) // (len(currLine) - 1))\n                     if i <= (maxWidth - charCount) % (len(currLine) - 1):\n                         thisLine += ' '\n                     thisLine += currLine[i]\n                 \n                 if len(thisLine) < maxWidth:\n                     thisLine += ' ' * (maxWidth - len(thisLine))\n                 \n                 result.append(thisLine)\n                 currLine = [word]\n                 charCount = len(word)\n                 \n         if len(currLine) > 0:\n             lastLine = ' '.join(currLine)\n             if len(lastLine) < maxWidth:\n                 lastLine += ' ' * (maxWidth - len(lastLine))\n             result.append(lastLine)\n         \n         if len(result) == 0:\n             return ['']\n         \n         return result", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         res, cur, num_of_letters = [], [], 0\n         for w in words:\n             if num_of_letters + len(w) + len(cur) > maxWidth:\n                 for i in range(maxWidth - num_of_letters):\n                     cur[i%(len(cur)-1 or 1)] += ' '\n                 res.append(''.join(cur))\n                 cur, num_of_letters = [], 0\n             cur += [w]\n             num_of_letters += len(w)\n         return res + [' '.join(cur).ljust(maxWidth)]", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         if words == [\"\"]:\n             s = ' '*maxWidth\n             return [s]\n         new = []\n         for word in words:\n             new.append([word,len(word)])\n         res = []\n         curr_length = 0\n         start = 0\n         print(new)\n         for i in range(len(new)):\n             if new[i][1] > maxWidth:\n                 return False\n             else:\n                 if curr_length + (i-start) + new[i][1] > maxWidth:\n                     if i-1-start == 0:\n                         jiange = maxWidth-curr_length\n                         s = ''\n                         s += new[i-1][0]\n                         s += ' '*(maxWidth-curr_length)\n                         res.append(s)\n                     else:\n                         if (maxWidth-curr_length)%(i-1-start) != 0:\n                             jiange = (maxWidth-curr_length)//(i-1-start)\n                             k = jiange\n                             num = i-2-start\n                             while num>0:\n                                 if (maxWidth-curr_length-k)%(num) != 0:\n                                     k += jiange\n                                     num -= 1\n                                 else:\n                                     break\n                         else:\n                             k = 0\n                             num = i-1-start\n                             jiange = (maxWidth-curr_length)//(i-1-start)\n                         s = ''\n                         for j in range(start,i):\n                             s += new[j][0]\n                             if len(s) == maxWidth:\n                                 pass\n                             else:\n                                 if jiange == 0:\n                                     pass\n                                 else:\n                                     if j < (start+num):\n                                         s += ' '*((maxWidth-curr_length-k)//(num))\n                                     else:\n                                         s += ' '*jiange\n                         res.append(s)\n                     start = i\n                     curr_length = new[i][1]\n                 else:\n                     curr_length += new[i][1]\n         if start == len(new)-1:\n             jiange = maxWidth - new[-1][1]\n             s = ''\n             s += new[-1][0]\n             s += ' '*jiange\n             res.append(s)\n         else:\n             i = len(new)-1\n             if i-start == 0:\n                 jiange = 0\n             else:\n                 jiange = (maxWidth-curr_length)/(i-start) if (maxWidth-curr_length)%(i-start) == 0 else (maxWidth-curr_length)//(i-start)\n             jiange = int(jiange)\n             s = ''\n             for j in range(start,i+1):\n                 s += new[j][0]\n                 if len(s) == maxWidth:\n                     pass\n                 else:\n                     if j != i:\n                         s += ' '\n                     else:\n                         s += ' '*(maxWidth-len(s))\n             res.append(s)\n         return res", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         res = []\n         i, n = 0, len(words)\n         while i < n:\n             count = len(words[i])\n             last = i+1\n             while last < n and count + len(words[last]) + 1 <= maxWidth:\n                 count += len(words[last]) + 1\n                 last += 1\n             diff = last-i-1\n             temp = words[i]\n             if last == n or diff == 0:\n                 for j in range(i+1, last):\n                     temp += \" \"\n                     temp += words[j]\n                 temp += \" \"*(maxWidth-len(temp))\n             else:\n                 m, re = divmod(maxWidth-count, diff)\n                 for j in range(i+1, last):\n                     temp += \" \"*m\n                     if re > 0:\n                         temp += \" \"\n                         re -= 1\n                     temp += \" \"\n                     temp += words[j]\n             i = last\n             res.append(temp)\n         return res\n", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n \n         res = [[0]]\n         result = []\n         for word in words:\n             if len(word) + res[-1][-1] + (len(res[-1])-1) <= maxWidth:\n                 res[-1].insert(-1, word)\n                 res[-1][-1] += len(word)\n             else:\n                 res.append([word, len(word)])\n \n         for index, i in enumerate(res):\n             if index != len(res)-1 and (len(i)-2) != 0:\n                 for j in range((maxWidth - i[-1]) % (len(i)-2)):\n                     i[j] = i[j] + \" \"\n \n         for index, i in enumerate(res):\n             if index != len(res) - 1 and (len(i)-2) != 0:\n                 result.append((\" \" * ((maxWidth - i[-1]) // (len(i)-2))).join(i[:-1]))\n             else:\n                 result.append(\" \".join(i[:-1]) + \" \" * (maxWidth - i[-1] - (len(i)-2)))\n         return result", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         if len(words) == 0:\n             return []\n         res = []\n         currFill = 0\n         start = -1\n         for i in range(len(words) + 1):\n             if i < len(words) and len(words[i]) + currFill <= maxWidth:\n                 if currFill == 0:\n                     start = i\n                 currFill += len(words[i]) + 1\n             else:\n                 currFill -= 1;\n                 extra = maxWidth - currFill\n                 numwords = i - start\n                 spaces = [1 for _ in range(numwords)]\n                 if numwords == 1 or i == len(words):\n                     spaces[-1] = extra\n                 else:\n                     spaces[-1] = 0\n                     for k in range(len(spaces) - 1):\n                         spaces[k] += extra // (numwords - 1) + (1 if k < extra % (numwords - 1) else 0)\n                 curr = ''\n                 for k in range(len(spaces)):\n                     curr += words[k + start] + ' ' * spaces[k]\n                 res.append(curr)\n                 currFill = len(words[i]) + 1 if i < len(words) else 0\n                 start = i\n         return res\n                 \n             \n             \n", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         if maxWidth == 0:\n             return [\" \".join(words)]\n         words = words[:]\n         results = []\n         while words:\n             run = []\n             c = 0\n             while words:\n                 pad = 1 if run else 0\n                 if len(words[0]) + pad + c > maxWidth:\n                     spaces = maxWidth - sum([len(w) for w in run])\n                     if len(run) == 1:\n                         line = \"\".join(run + [\" \"] * spaces)\n                         assert len(line) == maxWidth\n                         results.append(line)\n                     else:\n                         eachSpace = spaces // (len(run) - 1)\n                         extraSpaces = spaces % (len(run) - 1)\n                         line = []\n                         for i in range(len(run)):\n                             line.append(run[i])\n                             if i != len(run) - 1:\n                                 line.append(' ' * eachSpace)\n                                 if extraSpaces > 0:\n                                     line.append(' ')\n                                     extraSpaces -= 1\n                         line = \"\".join(line)\n                         assert len(line) == maxWidth, len(line)\n                         results.append(line)\n                     break\n                 else:\n                     if run:\n                         c += 1\n                     w = words.pop(0)\n                     run.append(w)\n                     c += len(w)\n         if run:\n             line = \" \".join(run)\n             line += ' ' * (maxWidth - len(line))\n             results.append(line)\n         return results\n", "def justify_line(line, max_width):\n     line_length = sum((len(i) for i in line))\n     space_left = max_width - line_length\n     if len(line) == 1:\n         spaced_line = [line[0], \" \" * space_left]\n     else:\n         spaced_line = [line[0]]\n         (spaces_per_word, remainder) = divmod(space_left, len(line) - 1)\n         for i in range(1, len(line)):\n             num_spaces = spaces_per_word\n             if remainder > 0:\n                 num_spaces += 1\n                 remainder -= 1\n             spaced_line.append(\" \" * num_spaces)\n             spaced_line.append(line[i])\n     return \"\".join(spaced_line)\n \n class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         lines = []\n         i = 0\n         line = []\n         line_length = 0\n         while i < len(words):\n             if line_length != 0:\n                 line_length += 1\n             line_length += len(words[i])\n             if line_length <= maxWidth:\n                 line.append(words[i])\n                 i += 1\n             else:\n                 lines.append(justify_line(line, maxWidth))\n                 line = []\n                 line_length = 0\n         if line:\n             final_line = \" \".join(line)\n             final_line += \" \" * (maxWidth - len(final_line))\n             lines.append(final_line)\n         return lines", "class Solution:\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         \n         acc = 0 # number of letters\n         tmp, res = [], []\n         for w in words:\n             if acc + len(w) + len(tmp) > maxWidth:\n                 # make up a line\n                 for i in range(maxWidth - acc):\n                     tmp[i%(len(tmp)-1 or 1)] += ' ' # need or 1 for the case: one word in tmp [to] --> \"to    \"\n                 res.append(''.join(tmp))\n                 acc = 0\n                 tmp = []\n                 \n             tmp.append(w)\n             acc += len(w)\n             \n         # the last element\n         return res + [' '.join(tmp).ljust(maxWidth)]\n                 \n", "class Solution(object):\n     def fullJustify(self, words, maxWidth):\n         \"\"\"\n         :type words: List[str]\n         :type maxWidth: int\n         :rtype: List[str]\n         \"\"\"\n         res, line, length_of_line = [], [], 0\n         for word in words:\n             if length_of_line + len(word) + len(line) > maxWidth:\n                 #build a line to be printed, and append into res\n                 for idx in range(maxWidth - length_of_line):\n                     #add a blank to which word in a line\n                     word_idx = idx % ((len(line) - 1) or 1)\n                     line[word_idx] += ' '\n                 res.append(''.join(line))\n                 line, length_of_line = [], 0\n             length_of_line += len(word)\n             line.append(word)\n         return res + [' '.join(line).ljust(maxWidth)]\n"]