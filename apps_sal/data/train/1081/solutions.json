["# cook your dish here\nimport string \nfrom collections import OrderedDict\nfrom itertools import zip_longest\ndic = OrderedDict(zip(string.ascii_uppercase, range(0, 26)))\nkeys = [98, 57, 31, 45, 46]\nt = int(input()) # number of test cases\ns1 = []\nfor i in range(t):\n  s = input()\n  for i in s:\n    if i in dic.keys():\n      s1.append(int(i.replace(i, str(dic[i]))))\n  s2 = [sum(t) for t in zip_longest(s1, keys, fillvalue=0)]\n  inv_dic = {v:k for k,v in dic.items()}\n  s_1 = list()\n  for i in range(len(s1)):\n    s_1.append(s2[i]%26)\n  res= [inv_dic[i] for i in s_1]\n  print(''.join(res))\n  inv_dic.clear()\n  res.clear()\n  s1.clear()\n  s2.clear()\n  s_1.clear()", "for _ in range(int(input())):\r\n    n = input().strip()\r\n    a = [98, 57, 31, 45, 46]\r\n    x = []\r\n    for i in range(len(n)):\r\n        x.append(ord(n[i])-65+a[i])\r\n    for i in x:\r\n        s = i%26\r\n        print(chr(s+65),end = \"\")\r\n    print()\r\n", "a = [98, 57, 31, 45, 46]\nfor _ in range(int(input())):\n    S = list(input().strip())\n    for x in range(len(S)):\n        S[x] = chr((ord(S[x])- ord('A') + a[x])%26 + ord('A'))\n    print(''.join(S))", "# cook your dish here\nfor x in range(int(input())):\n    n=list(input())\n    l=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n    list1=[98,57,31,45,46]\n    c=0\n    for i in range(0,len(n)):\n        for j in range(0,len(l)):\n            if n[i]==l[j]:\n                s1=j+list1[c]\n                s2=s1%26\n                print(l[s2],end=\"\")\n        c+=1\n    print(\"\\n\")\n                    \n                ", "# cook your dish here\nt=int(input())\nl=[98,57,31,45,46]\nfor _ in range(t):\n    s=input().strip().upper()\n    a=65\n    z=''\n    for i in range(len(s)):\n        x=ord(s[i])-a\n        x+=l[i]\n        x%=26\n        z+=chr(x+a)\n    print(z)\n        \n", "dict1 = {0:98, 1:57, 2:31, 3:45, 4:46}\r\nfor _ in range(int(input().strip())):\r\n    s = list(input().strip())\r\n    ss = 0\r\n    for i in range(len(s)):\r\n        ss = ((ord(s[i])-65) + dict1[i])  \r\n        print(chr((ss%26)+65),end=\"\")\r\n    print()", "import math\ndef solve(s):\n    d={'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8,'J':9,'K':10,'L':11,'M':12,'N':13,'O':14,'P':15,'Q':16,'R':17,'S':18,'T':19,'U':20,'V':21,'W':22,'X':23,'Y':24,'Z':25}\n    key=[98,57,31,45,46]\n    res=\"\"\n    li=[]\n    n=len(s)\n    for i in range(n):\n        li.append((d[s[i]]+key[i])%26)\n    d1={0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I',9:'J',10:'K',11:'L',12:'M',13:'N',14:'O',15:'P',16:'Q',17:'R',18:'S',19:'T',20:'U',21:'V',22:'W',23:'X',24:'Y',25:'Z'}\n    for i in li:\n        res+=d1[i]\n    print(res)\n\n\ndef __starting_point():\n    try:\n        t=int(input())\n        for _ in range(t):\n            s=input().strip()\n            solve(s)\n    except:\n        pass\n__starting_point()", "n=int(input())\nl=[98,57,31,45,46]\nf=''\nfor i in range(0,n):\n    s=input().strip()\n    for z in range(0,len(s)):\n        k=ord(s[z])-65\n        k=k+l[z]\n        req=k%(26)\n        req=req+65\n        f=f+chr(req)\n    print(f)\n    f=''\n        \n", "t = int(input())\nlst = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\nfor i in range(t):\n    s = input().lower()\n    s = list(s.strip())\n    new = []\n    for j in s:\n        j = lst.index(j)\n        new.append(j)\n    s.clear()\n    \n    for j in range(len(new)):\n        if j == 0:\n            s.append(new[0]+98)\n        elif j == 1:\n            s.append(new[1]+57)\n        elif j == 2:\n            s.append(new[2]+31)\n        elif j == 3:\n            s.append(new[3]+45)\n        elif j == 4:\n            s.append(new[4]+46)\n    new.clear()\n    for j in s:\n        new.append(j%26)\n    s = \"\"\n    for j in new:\n        s+=lst[j]\n    print(s.upper())", "import sys\r\ninput = sys.stdin.readline\r\n\r\nx=[98,57,31,45,46]\r\nt=int(input())\r\nfor _ in range(t):\r\n    p=list(input().strip())\r\n    ans=\"\"\r\n    for i in range(len(p)):\r\n        ans+=chr(((int(ord(p[i]))-65+x[i])%26)+65)\r\n    print(ans)\r\n            \r\n                \r\n    \r\n    \r\n", "import sys\r\nfrom functools import lru_cache, cmp_to_key\r\nfrom heapq import merge, heapify, heappop, heappush\r\nfrom math import *\r\nfrom collections import defaultdict as dd, deque, Counter as C\r\nfrom itertools import combinations as comb, permutations as perm\r\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\r\nfrom time import perf_counter\r\nfrom fractions import Fraction\r\nimport copy\r\nimport time\r\nstarttime = time.time()\r\nmod = int(pow(10, 9) + 7)\r\nmod2 = 998244353\r\n# from sys import stdin\r\n# input = stdin.readline\r\ndef data(): return sys.stdin.readline().strip()\r\ndef out(*var, end=\"\\n\"): sys.stdout.write(' '.join(map(str, var))+end)\r\ndef L(): return list(sp())\r\ndef sl(): return list(ssp())\r\ndef sp(): return map(int, data().split())\r\ndef ssp(): return map(str, data().split())\r\ndef l1d(n, val=0): return [val for i in range(n)]\r\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\r\ntry:\r\n    # sys.setrecursionlimit(int(pow(10,7)))\r\n    sys.stdin = open(\"input.txt\", \"r\")\r\n    # sys.stdout = open(\"../output.txt\", \"w\")\r\nexcept:\r\n    pass\r\ndef pmat(A):\r\n    for ele in A:\r\n        print(*ele,end=\"\\n\")\r\ndef seive():\r\n    prime=[1 for i in range(10**6+1)]\r\n    prime[0]=0\r\n    prime[1]=0\r\n    for i in range(10**6+1):\r\n        if(prime[i]):\r\n            for j in range(2*i,10**6+1,i):\r\n                prime[j]=0\r\n    return prime\r\n\r\nfor _ in range(L()[0]):\r\n    s=input().strip()\r\n    A=[ord(s[i])-ord(\"A\") for i in range(len(s))]\r\n    B=[98, 57, 31, 45, 46]\r\n    C=[(A[i]+B[i])%26 for i in range(len(A))]\r\n    C=[chr(ord(\"A\")+C[i]) for i in range(len(C))]\r\n    print(\"\".join(C))\r\n\r\n\r\n\r\n\r\n       \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nendtime = time.time()\r\n# print(f\"Runtime of the program is {endtime - starttime}\")\r\n\r\n", "from sys import stdin\r\ninput = lambda: stdin.readline().rstrip(\"\\r\\n\")\r\ninp = lambda: list(map(int,stdin.readline().rstrip(\"\\r\\n\").split()))\r\n#______________________________________________________________________________________________________\r\n# from math import *\r\n# from bisect import *\r\n# from heapq import *\r\n# from collections import defaultdict as dd\r\n# from collections import OrderedDict as odict\r\n# from collections import Counter as cc\r\n# from collections import deque\r\n# sys.setrecursionlimit(2*(10**5)+100) this is must for dfs\r\n# mod = 10**9+7; md = 998244353\r\n# ______________________________________________________________________________________________________\r\n# Checking prime in O(root(N))\r\n# def isprime(n):\r\n#     if (n % 2 == 0 and n > 2) or n == 1: return 0\r\n#     else:\r\n#         s = int(n**(0.5)) + 1\r\n#         for i in range(3, s, 2):\r\n#             if n % i == 0:\r\n#                 return 0\r\n#         return 1\r\n# def lcm(a,b):\r\n#   return (a*b)//gcd(a,b)\r\n# ______________________________________________________________________________________________________\r\n# nCr under mod\r\n# def C(n,r,mod):\r\n#   if r>n:\r\n#       return 0\r\n#   num = den = 1\r\n#   for i in range(r):\r\n#       num = (num*(n-i))%mod\r\n#       den = (den*(i+1))%mod\r\n#   return (num*pow(den,mod-2,mod))%mod\r\n# M = 10**5 +10\r\n# ______________________________________________________________________________________________________\r\n# For smallest prime factor of a number\r\n# M = 1000010\r\n# pfc = [i for i in range(M)]\r\n# def pfcs(M):\r\n#   for i in range(2,M):\r\n#       if pfc[i]==i:\r\n#           for j in range(i+i,M,i):\r\n#               if pfc[j]==j:\r\n#                   pfc[j] = i\r\n#   return\r\n# pfcs(M)\r\n# ______________________________________________________________________________________________________\r\ntc = 1\r\ntc, = inp()\r\nfor _ in range(tc):\r\n    s = str(input())\r\n    d = [98, 57, 31, 45, 46]\r\n    a = [ord(i)-ord('A') for i in s]\r\n    d = [(a[i]+d[i])%26 for i in range(len(s))]\r\n    ans = [chr(i+ord('A')) for i in d]\r\n    print(''.join(ans))", "n=int(input())\nl=[98, 57, 31, 45, 46 ]\na='abcdefghijklmnopqrstuvwxyz' \n\nfor i in range(n):\n    s=input().strip().lower()\n    ans='' \n    c=0\n    for j in s:\n        k=a.index(j)+l[c] \n        c+=1 \n        k=k%26 \n        ans+=a[k] \n    print(ans.upper())"]