["class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n         if numerator*denominator < 0:\n             add_negative = True\n         else:\n             add_negative = False\n         numerator, denominator = abs(numerator), abs(denominator)\n         \n         integer_part = int(numerator//denominator)\n         new_numerator = numerator-integer_part*denominator\n         dict_residuals = {}\n         digit_location = 0\n         digit_array = []\n         residual = new_numerator\n         if residual == 0:\n             if add_negative:\n                 return \"-\"+str(integer_part)\n             else:\n                 return str(integer_part)\n         is_repeating = True\n         dict_residuals[residual] = 0\n         while True:\n             new_digit, residual = self.single_digit(residual, denominator)\n             digit_location += 1\n             if residual == 0:\n                 dict_residuals[residual] = digit_location\n                 digit_array.append(str(new_digit))\n                 is_repeating = False\n                 break\n             elif residual in dict_residuals.keys():\n                 digit_array.append(str(new_digit))\n                 is_repeating = True\n                 break\n             else:\n                 dict_residuals[residual] = digit_location\n                 digit_array.append(str(new_digit))\n \n         if not is_repeating:\n             result = str(integer_part)+\".\"+\"\".join(digit_array)\n         else:\n             loc = dict_residuals[residual]\n             result = str(integer_part)+\".\"+\"\".join(digit_array[0:loc])+\"(\"+\"\".join(digit_array[loc:])+\")\"\n         if add_negative:\n             return \"-\"+result\n         else:\n             return result\n     \n     def single_digit(self, value, denominator):\n         return int((10*value)//denominator), (10*value)%denominator", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"    \n         res = \"\"\n         if numerator * denominator < 0:\n             res += '-'\n         if numerator % denominator == 0:\n             return str(numerator // denominator)\n         numerator = abs(numerator)\n         denominator = abs(denominator)\n         res += str(numerator // denominator)\n         res += '.'\n         numerator %= denominator\n         i = len(res)\n         table = collections.defaultdict(int)\n         while numerator != 0:\n             if numerator not in table:\n                 table[numerator] = i\n             else:\n                 i = table[numerator]\n                 res = res[:i] + '(' + res[i:] + ')'\n                 return res\n             numerator *= 10\n             res += str(numerator // denominator)\n             numerator %= denominator\n             i += 1\n         return res", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n         sign=0\n         if numerator*denominator<0:\n             sign =-1\n         numerator,denominator = abs(numerator),abs(denominator)\n         n = numerator\n         s =''\n         if n >denominator:\n             s +=str(n//denominator)\n             n %=denominator\n         else:\n             s ='0'\n         if sign==-1:\n             s = '-'+s\n         if n == 0:\n             return s\n         s +='.'\n         t =[n]\n         x = n\n         s1=''\n         while 1:\n             x *=10\n             s1 +=str(x//denominator)\n             x %=denominator\n             if x in t or  x==0:\n                 break\n             else:\n                 t.append(x)\n         if x in t:\n             s1=s1[:t.index(x)]+'('+s1[t.index(x):]+')'\n \n             \n         return s+s1\n", "class Solution:        \n     def fractionToDecimal(self, numerator, denominator):\n         sign = '' if not numerator or (numerator < 0) is (denominator < 0) else '-'\n         numerator, denominator = abs(numerator), abs(denominator)\n         p, q = divmod(abs(numerator), abs(denominator))\n         res, decimal, mod, count = str(p), [], {q: 0}, 0\n         while q:\n             p, q = divmod(q * 10, denominator)\n             decimal.append(str(p))\n             if q in mod:\n                 idx = mod[q]\n                 decimal.insert(idx, '('), decimal.append(')')\n                 break\n             count += 1\n             mod[q] = count\n         return sign + res + '.' + ''.join(decimal) if decimal else sign + res", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         res = \"\"\n         if numerator*denominator < 0:\n             res = res + \"-\"\n         if numerator%denominator == 0:\n             return str(numerator//denominator)\n         numerator = abs(numerator)\n         denominator = abs(denominator)\n         res = res + str(numerator//denominator)\n         res = res + \".\"\n         numerator = numerator%denominator\n         table = {}\n         i = len(res)\n         while numerator != 0:\n             if numerator not in table:\n                 table[numerator] = i\n             else:\n                 i = table[numerator]\n                 res = res[:i] + \"(\" + res[i:] + \")\"\n                 return res\n             numerator = numerator*10\n             res = res + str(numerator//denominator)\n             numerator = numerator%denominator\n             i = i + 1\n         return res\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n         prev = []\n         prevdigits = []\n         s = \"\"\n         if denominator < 0:\n            numerator *=-1\n            denominator *=-1\n         if numerator < 0:\n            numerator *= -1\n            s += \"-\"\n         d, numerator = divmod(numerator,denominator) \n         s += str(d)\n         if numerator == 0:\n            return s\n         s += \".\"\n         while numerator not in prev and numerator != 0:\n            prev.append(numerator)\n            numerator *= 10\n            d, numerator = divmod(numerator,denominator) \n            prevdigits.append(str(d))\n            numerator %= denominator\n         if numerator == 0:\n            return s+\"\".join(prevdigits)\n         #print(prev, prevdigits)\n         i  = prev.index(numerator)\n         return s+\"\".join(prevdigits[0:i])+\"(\"+\"\".join(prevdigits[i:])+\")\"\n", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         n, remainder = divmod(abs(numerator), abs(denominator))\n         sign = '-' if numerator*denominator < 0 else ''\n         result = [sign+str(n), '.']\n         stack = []\n         while remainder not in stack:\n             stack.append(remainder)\n             n, remainder = divmod(remainder*10, abs(denominator))\n             result.append(str(n))\n \n         idx = stack.index(remainder)\n         result.insert(idx+2, '(')\n         result.append(')')\n         return ''.join(result).replace('(0)', '').rstrip('.')\n", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n         sign = '' if numerator * denominator >= 0 else '-'\n         numerator, denominator = abs(numerator), abs(denominator)\n         integer, ret = str(numerator // denominator), ''\n         remainers, rem = {}, numerator % denominator\n         if rem:\n             integer += '.'\n \n         while rem and rem not in remainers:\n             remainers[rem] = len(ret)\n             rem *= 10\n             ret += str(rem // denominator)\n             rem %= denominator\n         \n         if rem:\n             ret = ret[:remainers[rem]] + '(' + ret[remainers[rem]:] + ')'\n         \n         return sign + integer + ret\n", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n         negative = (numerator < 0) != (denominator < 0)\n         \n         numerator = abs(numerator)\n         denominator = abs(denominator)\n         \n         pre_decimal = numerator // denominator\n         remainder = numerator % denominator\n         \n         hash_map = {}\n         hash_map[remainder] = 0\n         post_decimal = []\n         def build_fraction(numerator, denominator, post_decimal, depth):\n             val = numerator // denominator\n             post_decimal.append(val)\n             remainder = numerator % denominator\n             if remainder in hash_map:\n                 out = [str(i) for i in post_decimal[:hash_map[remainder]]]\n                 rep = \"(\"\n                 rep += \"\".join([str(i) for i in post_decimal[hash_map[remainder]:depth]])\n                 rep += \")\"\n                 rep = \"\" if rep == \"(0)\" else rep\n                 out = \"\".join(out)\n                 return out+rep\n             else:\n                 hash_map[remainder] = depth\n             return build_fraction(10*remainder, denominator, post_decimal, depth+1)\n             \n         suffix = build_fraction(10*remainder, denominator, post_decimal, 1)\n         \n         out = str(pre_decimal) + \".\" + suffix\n         if out[-1] == \".\":\n             out = out[:-1]\n         out = out if not negative else \"-\"+out\n         return out if out != \"-0\" else \"0\"\n         \n", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n         negativeFlag = numerator * denominator < 0\n         numerator = abs(numerator)\n         denominator = abs(denominator)\n         numList = []\n         cnt = 0\n         loopDict = dict()\n         loopStr = None\n         while True:\n             numList.append(str(numerator // denominator))\n             cnt += 1\n             numerator = 10 * (numerator % denominator)\n             if numerator == 0:\n                 break\n             loc = loopDict.get(numerator)\n             if loc:\n                 loopStr = \"\".join(numList[loc:])\n                 break\n             loopDict[numerator] = cnt\n         ans = numList[0]\n         \n         if len(numList) > 1:\n             ans += \".\"\n         if loopStr:\n             ans += \"\".join(numList[1:len(numList) - len(loopStr)]) + \"(\" + loopStr + \")\"\n         else:\n             ans += \"\".join(numList[1:])\n         if negativeFlag:\n             ans = \"-\" + ans\n         return ans", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n         st = ''\n         if numerator == 0:\n             return '0'\n         if (numerator*denominator) < 0:\n             st = '-'\n         \n         numerator = int(abs(numerator))\n         denominator = int(abs(denominator))\n         if numerator >= denominator:\n             st += str(numerator//denominator)\n             numerator %= denominator\n         else:\n             st += '0'\n             \n         position = {}\n         fraction = ''\n         repeatedPos = -1\n         \n         while numerator > 0:\n             if numerator in position:\n                 repeatedPos = position[numerator]\n                 break\n             num = numerator*10\n             val = num // denominator\n             position[numerator] = len(fraction)\n             fraction += str(val)\n             numerator = num%denominator\n         \n         if len(fraction) > 0:\n             st += '.' + (fraction if repeatedPos == -1 else fraction[:repeatedPos] + '(' + fraction[repeatedPos:] + ')')\n         return st\n     \n         \n", "class Solution:\n     def fractionToDecimal(self, numerator, denominator):\n         \"\"\"\n         :type numerator: int\n         :type denominator: int\n         :rtype: str\n         \"\"\"\n         if numerator == 0:\n             return \"0\"\n         is_neg = (numerator>0) ^ (denominator>0)\n         numerator = abs(numerator)\n         denominator = abs(denominator)\n         nd = dict()\n         ret = [str(numerator//denominator)+\".\"]\n         while numerator:\n             numerator = 10*(numerator%denominator)\n             n_s = str(numerator//denominator)\n             if numerator in nd:\n                 ret.insert(nd[numerator], '(')\n                 ret.append(')')\n                 break\n             else:\n                 ret.append(n_s)\n             nd[numerator] = len(ret)-1\n             \n         ret = \"\".join(ret)\n         while ret[-1] == \"0\":\n             ret = ret[:-1]\n         if ret[-1] == \".\":\n             ret = ret[:-1]\n         if is_neg:\n             ret = \"-\"+ret\n         \n         return ret"]