["import math\nfrom collections import deque\nfrom sys import stdin, stdout\nfrom string import ascii_letters\nimport sys\nletters = ascii_letters\ninput = stdin.readline\n#print = stdout.write\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [999999999] * n\n    ans[0] = 1 if arr[0] == 1 else 0\n    if n > 1:\n        ans[1] = ans[0]\n        if n > 2:\n            ans[2] = ans[0]\n    for i in range(n):\n        if i + 1 >= n:\n            continue\n        if arr[i + 1] == 1:\n            ans[i + 1] = min(ans[i + 1], ans[i] + 1)\n            if i + 2 < n:\n                ans[i + 2] = min(ans[i + 2], ans[i] + 1)\n            if i + 3 < n: \n                ans[i + 3] = min(ans[i + 3], ans[i] + 1)\n        else:\n            ans[i + 1] = min(ans[i + 1], ans[i])\n            if i + 2 < n:\n                ans[i + 2] = min(ans[i + 2], ans[i])\n            if i + 3 < n:\n                ans[i + 3] = min(ans[i + 3], ans[i])\n    print(ans[-1])\n", "INF = 10**6\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    out = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        best = INF\n        if i >= 2:\n            best = min(best, a[i-2] + out[i-2])\n        if i >= 3:\n            best = min(best, a[i-3] + out[i-3])\n        if i >= 4:\n            best = min(best, a[i-4] + a[i-3] + out[i-4])\n        out[i] = best\n\n    fin = out[n]\n    for i in range(1,4):\n        if i <= n:\n            fin = min(fin, out[n-i] + a[n-i])\n    print(fin)\n", "for _ in range(int(input())):\n    n = int(input())\n    *difficulty, = list(map(int, input().split()))\n    groups = [0]\n    for i, v in enumerate(difficulty):\n        if v == 0 and (i == 0 or difficulty[i - 1] == 1):\n            groups.append(0)\n        if v == 1:\n            groups[-1] += 1\n    ans = (groups[0] + 2) // 3 + sum(v // 3 for v in groups[1:])\n    print(ans)\n\n\n\n", "def solve():\n    n = int(input())\n    lst = list(map(int,input().split()))\n    if n == 1:\n        print(lst[0])\n        return 0\n    dpi = [-1 for i in range(n)]\n    dpdrug = [-1 for i in range(n)]\n    dpi[n-1] = 0\n    dpdrug[n-1] = lst[n-1]\n    dpi[n-2] = 0\n    dpdrug[n-2] = lst[n-2]\n    for i in range(n-3,-1,-1):\n        dpi[i] = min(dpdrug[i + 2], dpdrug[i + 1])\n        dpdrug[i] = min(dpi[i + 1] + lst[i], dpi[i + 2] + lst[i] + lst[i + 1])\n    print(dpdrug[0])\nfor i in range(int(input())):\n    solve()", "for haaghfj in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    dp = [[100000000000000] * 2 for i in range(n + 2)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        dp[i][0] = min(dp[i -1][1], dp[i - 2][1])\n        dp[i][1] = min(dp[i -1][0]  + a[i - 1], dp[i - 2][0]  + a[i - 1] + a[i - 2])\n    print(min(dp[n]))\n", "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [int(a) for a in input().split()] + [0] * 5\n    X = [0] + [1 << 30] * (N + 5)\n    for i in range(2, N + 5):\n        X[i] = min(X[i], X[i-2] + A[i-2])\n        if i >= 3:\n            X[i] = min(X[i], X[i-3] + A[i-3])\n        if i >= 4:\n            X[i] = min(X[i], X[i-4] + A[i-4] + A[i-3])\n    print(min(X[-5:]))\n\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    A=list(map(int,input().split()))\n    A.append(0)\n    A.append(0)\n\n    DP0=[1<<30]*(n+3)\n    DP1=[1<<30]*(n+3)\n\n    DP0[0]=0\n\n    for i in range(n):\n        if A[i]==0 and A[i+1]==0:\n            DP1[i+1]=min(DP1[i+1],DP0[i])\n            DP1[i+2]=min(DP1[i+2],DP0[i])\n\n        elif A[i]==0 and A[i+1]==1:\n            DP1[i+1]=min(DP1[i+1],DP0[i])\n            DP1[i+2]=min(DP1[i+2],DP0[i]+1)\n\n        elif A[i]==1 and A[i+1]==0:\n            DP1[i+1]=min(DP1[i+1],DP0[i]+1)\n            DP1[i+2]=min(DP1[i+2],DP0[i]+1)\n\n        elif A[i]==1 and A[i+1]==1:\n            DP1[i+1]=min(DP1[i+1],DP0[i]+1)\n            DP1[i+2]=min(DP1[i+2],DP0[i]+2)\n\n        DP0[i+1]=min(DP0[i+1],DP1[i])\n        DP0[i+2]=min(DP0[i+2],DP1[i])\n\n    print(min(DP0[n],DP1[n]))\n\n    \n\n    \n\n    \n    \n    \n", "from math import ceil\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        enemies = list(map(int, input().split()))\n        j = 0\n        c = 1\n        ans = 0\n        while j < n:\n            if c:\n                c = 0\n                if enemies[j] == 1:\n                    ans += 1\n                    j += 1\n                if j < n and enemies[j] == 0:\n                    j += 1\n            else:\n                c = 1\n                if enemies[j] == 1:\n                    j += 1\n                if j < n and enemies[j] == 1:\n                    j += 1\n        print(ans)\n\n\nmain()", "from sys import stdin\nt = int(stdin.readline())\n\nfor loop in range(t):\n\n    n = int(stdin.readline())\n    a = list(map(int,stdin.readline().split()))\n\n    dp = [[float(\"inf\"),float(\"inf\")] for i in range(n)]\n\n    for i in range(n):\n\n        if i == 0:\n            dp[i][0] = a[0]\n            continue\n        elif i == 1:\n            dp[i][0] = a[0] + a[1]\n            dp[i][1] = dp[i-1][0]\n            continue\n\n        dp[i][0] = min(dp[i-2][1] + a[i-1] + a[i] , dp[i-1][1] + a[i])\n        dp[i][1] = min(dp[i-2][0] , dp[i-1][0])\n\n    print (min(dp[-1]))"]