["# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n \tdef currentmax(self,root):\n \t\tleftval = 0\n \t\tif root.left != None:\n \t\t\tleftval = self.currentmax(root.left)\n \t\t\tleftval = 0 if leftval < 0 else leftval\n \t\trightval = 0\n \t\tif root.right != None:\n \t\t\trightval = self.currentmax(root.right)\n \t\t\trightval = 0 if rightval < 0 else rightval\n \t\tcurrentnode = leftval + rightval + root.val\n \t\tif self.flag == 0:\n \t\t\tself.ans = currentnode\n \t\t\tself.flag = 1\n \t\telse:\n \t\t\tself.ans = self.ans if self.ans > currentnode else currentnode\n \t\treturn root.val + (leftval if leftval > rightval else rightval)\n \tdef maxPathSum(self, root):\n \t\tself.ans = 0\n \t\tself.flag = 0\n \t\tself.currentmax(root)\n \t\treturn self.ans", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n import sys\n \n class Solution:\n     def __init__(self):\n         self.max = -sys.maxsize\n         \n     def maxPathSum(self, root):\n         self.mps(root)\n         return self.max\n     \n     def mps(self, root):\n         # returns max path-to-leaf from ROOT\n         if not root.left and not root.right: \n             self.max = max(self.max, root.val)\n             return root.val\n         if not root.left and root.right:\n             right = self.mps(root.right)\n             self.max = max(self.max, root.val, root.val + right)\n             return max(root.val, root.val + right)\n         if root.left and not root.right: \n             left = self.mps(root.left)\n             self.max = max(self.max, root.val, root.val + left)\n             return max(root.val, root.val + left)\n         left = self.mps(root.left)\n         right = self.mps(root.right)\n         self.max = max(self.max, root.val, left + root.val, root.val + right, left + root.val + right)\n         return max(root.val, left + root.val, right + root.val)\n"]