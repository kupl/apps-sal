["class Solution:\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        def dfs(i, j):\n            if not (0<=i<len(A) and 0<=j<len(A[i])):\n                return\n            if A[i][j]==0:\n                return\n            A[i][j]=0\n            dfs(i-1, j)\n            dfs(i+1, j)\n            dfs(i, j-1)\n            dfs(i, j+1)\n        for i in range(len(A)):\n            for j in range(len(A[i])):\n                if A[i][j]==0:\n                    continue\n                if (i==0 or j==0 or i==len(A)-1 or j==len(A[i])-1):\n                    dfs(i, j)\n        res = sum([sum(row) for row in A])\n        return res", "class Solution:\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        dirs = [(0,1),(0,-1),(1,0),(-1,0)]\n        \n        self.f = 0\n        self.s = set()\n        \n        m,n = len(A),len(A[0])\n        \n        def rr(j,i):\n            if (j,i) in self.s:\n                return\n            self.s.add((j,i))\n            \n            if A[j][i] == 0:\n                return\n            else:\n                for d in dirs:\n                    j_new = d[0] + j\n                    i_new = d[1] + i\n                    if 0 <= j_new < m and 0 <= i_new < n:\n                        rr(j_new,i_new)\n                        \n        for j,row in enumerate(A):\n            for i,v in enumerate(row):\n                if j == 0 or j == m-1 or i == 0 or i == n-1:\n                    rr(j,i)\n                    \n        f = 0\n        for j,row in enumerate(A):\n            for i,v in enumerate(row):\n                if v == 1 and (j,i) not in self.s:\n                    f+=1\n                    \n        return f\n        \n", "class Solution:\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        grid = A\n\n        if len(grid[0]) == 1:\n            return 0\n\n        for i in range(0, len(grid)):\n            for j in range(0, len(grid[i])):\n                if (i == 0 or j == 0 or i == len(grid) - 1 or j == len(grid[0]) - 1):\n                    self.num_enclaves_helper(grid, [i, j])\n                    \n        return sum(sum(row) for row in grid) \n    \n    def num_enclaves_helper(self, grid, coord):\n        x, y = coord\n        \n        if x < 0 or y < 0 or x > len(grid) - 1 or y > len(grid[0]) - 1:\n            return\n\n        if x == 0 or y == 0 or x == len(grid) - 1 or y == len(grid[0]) - 1:\n            if grid[x][y] == 0:\n                return\n\n        if grid[x][y] == 0:\n            return\n\n        grid[x][y] = 0\n\n        self.num_enclaves_helper(grid, [x - 1, y])\n        self.num_enclaves_helper(grid, [x + 1, y])\n        self.num_enclaves_helper(grid, [x, y - 1])\n        self.num_enclaves_helper(grid, [x, y + 1])\n\n        return", "class Solution:\n    def dfs(self, A, i, j):\n        if i<0 or j<0 or i>=len(A) or j>=len(A[i]):\n            return\n        \n        if A[i][j] == 0:\n            return\n        \n        A[i][j] = 0\n        self.dfs(A, i+1, j)\n        self.dfs(A, i-1, j)\n        self.dfs(A, i, j+1)\n        self.dfs(A, i, j-1)\n        \n    def numEnclaves(self, A: List[List[int]]) -> int:\n        if not A:\n            return\n        \n        for row in range(len(A)):\n            for col in range(len(A[row])):\n                    if row == 0 or row == len(A)-1 or col == 0 or col == len(A[row]) - 1 and A[row][col] == 1:\n                        self.dfs(A, row, col)\n        \n        count = 0\n        for row in range(len(A)):\n            for col in range(len(A[row])):\n                if A[row][col] == 1:\n                    count+=1\n        \n        return count\n", "class Solution:\n    def numEnclaves(self, A: List[List[int]]) -> int:\n        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n        area_of_enclaves = 0\n\n        def traverse(x, y):\n            area = 1\n            A[x][y] = 0\n            enclave = True\n            for x_direction, y_direction in directions:\n                new_x = x + x_direction\n                new_y = y + y_direction\n                if 0 <= new_x < len(A) and 0 <= new_y < len(A[0]):\n                    if A[new_x][new_y] == 1:\n                        area_of_traverse, enclave_traverse = traverse(new_x, new_y)\n                        area += area_of_traverse\n                        if not enclave_traverse:\n                            enclave = False\n                else:\n                    enclave = False\n            return area, enclave\n\n        for x, row in enumerate(A):\n            for y, data in enumerate(row):\n                if data == 1:\n                    area, enclave = traverse(x, y)\n                    if enclave:\n                        area_of_enclaves += area\n        return area_of_enclaves"]