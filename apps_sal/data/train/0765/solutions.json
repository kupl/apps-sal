["n=int(input())\na=list(map(int,input().split()))\nq=int(input())\nwhile q>0:\n i=1\n tot=a[0]\n b=list(map(int,input().split()))\n if b[0]==1:\n  #p,f=map(int,raw_input().split())\n  a[b[1]-1]=b[2]\n else:\n  #r=int(raw_input())\n  tot=a[0]\n  while 1+i*b[1]<=n:\n   tot=tot*a[i*b[1]]\n   i=i+1\n  m=(str)(tot)\n  tot=tot%1000000007\n  print((int)(m[0]),tot)\n q=q-1\n", "mod = 10**9 + 7\nn = eval(input())\narr = list(map(int,input().strip().split()))\nfor _ in range(eval(input())):\n q = list(map(int,input().strip().split()))\n if q[0] == 1:\n  p , f = q[1], q[2]\n  arr[p-1] = f\n else:\n  r = q[1]\n  ans = 1\n  for i in range(0,n,r):\n   ans *= arr[i]\n  print(str(ans)[0] , ans % mod) ", "mod = 10**9 + 7\nn = eval(input())\narr = list(map(int,input().strip().split()))\nfor _ in range(eval(input())):\n q = list(map(int,input().strip().split()))\n if q[0] == 1:\n  p , f = q[1], q[2]\n  arr[p-1] = f\n else:\n  r = q[1]\n  ans = 1\n  for i in range(0,n,r):\n   ans *= arr[i]\n   ans = ans % mod\n  print(str(ans)[0] , ans % mod)", "mod = 10**9 + 7\nn = eval(input())\narr = list(map(int,input().strip().split()))\nfor _ in range(eval(input())):\n q = list(map(int,input().strip().split()))\n if q[0] == 1:\n  p , f = q[1], q[2]\n  arr[p-1] = f\n else:\n  r = q[1]\n  ans = 1\n  for i in range(0,n,r):\n   ans *= arr[i]\n  print(str(ans)[0] , ans % mod)", "n = int(input())\nf = [int(x) for x in input().split()]\nq = int(input())\n\nwhile q != 0:\n q = q - 1\n query = [int(x) for x in input().split()]\n if query[0] == 1:\n  f[query[1] - 1] = query[2]\n  continue\n\n elif query[0] == 2:\n  ans = f[0]\n  if (ans == 0):\n   print(\"0 0\")\n   continue\n  \n  i = 1\n  r = query[1]\n  while(i * r < n):\n   #print \"[\", f[i*r], \"]\", \n   ans = ans * f[i*r ]\n   i += 1\n\n  print(str(ans)[0], ans%1000000000)\n", "import math\n \ndef solve(array, r):\n i, res, tmp1, tmp2 = 0, 1, 1, 1\n while i * r < len(array):\n  res *= array[i * r]\n  res %= 10**9 + 7\n  tmp1 = float(array[i * r]) / 10 ** int(math.log(array[i * r], 10))\n  tmp2 *= tmp1\n  tmp2 = float(tmp2) / 10 ** int(math.log(tmp2, 10))\n  i += 1\n first_digit = int(tmp2 // 10 ** int(math.log(tmp2, 10))) \n return ' '.join((str(first_digit), str(res)))\n \ndef frjump():\n N = int(input())\n friendliness = list(map(int, input().split()))\n Q = int(input())\n for _ in range(Q):\n  query = list(map(int, input().split()))\n  if query[0] == 1:\n   friendliness[query[1]-1] = query[2]\n  else:\n   types, R = query\n   print(solve(friendliness, R))\n \ndef __starting_point():\n frjump() \n__starting_point()", "import math\n\ndef solve(array, r):\n i, res, tmp1, tmp2 = 0, 1, 1, 1\n while i * r < len(array):\n  res *= array[i * r]\n  res %= 10**9 + 7\n  tmp1 = array[i * r] / float(10 ** int(math.log(array[i * r], 10)))\n  tmp2 *= tmp1\n  i += 1\n first_digit = int(tmp2 // 10 ** int(math.log(tmp2, 10))) \n return ' '.join((str(first_digit), str(res)))\n \ndef frjump():\n N = int(input())\n friendliness = list(map(int, input().split()))\n Q = int(input())\n for _ in range(Q):\n  query = list(map(int, input().split()))\n  if query[0] == 1:\n   friendliness[query[1]-1] = query[2]\n  else:\n   types, R = query\n   print(solve(friendliness, R))\n\ndef __starting_point():\n frjump()\n__starting_point()", "from math import *\ndef karatsuba(x,y):\n tmp = 10\n if x < 10 or y < 10:  return x*y \n m = max(int(log10(x)+1), int(log10(y)+1))\n if m % 2 != 0:\n  m -= 1\n m_2 = int(m/2)\n a, b = divmod(x, tmp**m_2)\n c, d = divmod(y, tmp**m_2)\n ac = karatsuba(a,c)\n bd = karatsuba(b,d)\n ad_bc = karatsuba((a+b),(c+d)) - ac - bd\n return ((ac*(10**m)) + bd + ((ad_bc)*(10**m_2)))\n \ndef solve(array, r):\n i = 0\n res = 1\n while i * r < len(array):\n  res = karatsuba(res, array[i * r])\n  i += 1\n return ' '.join((str(res)[0], str(res % (10**9 + 7))))\n\ndef frjump():\n N = int(input())\n friendliness = list(map(int, input().split()))\n Q = int(input())\n for _ in range(Q):\n  query = list(map(int, input().split()))\n  if query[0] == 1:\n   friendliness[query[1]-1] = query[2]\n  else:\n   types, R = query\n   print(solve(friendliness, R))\n\ndef __starting_point():\n frjump()\n__starting_point()", "n=int(input())\nL=list(map(int,input().split()))\nq=int(input())\nF=[0 for i in range(100055)]\ni=1\nfor t in L:\n F[i]=t\n i+=1\nwhile q>0:\n q-=1\n l1=list(map(int,input().split()))\n \n if l1[0]==1:\n  F[l1[1]]=l1[2]\n else:\n  r=l1[1]\n  enjoy=F[1]\n  k=1\n  while 1:\n   if 1+k*r>n:\n\n    break\n   enjoy=enjoy*F[1+k*r]\n   k+=1\n  temp=enjoy\n\n  while 1:\n   if temp//10==0:\n    print(temp, end=' ')\n    break\n   temp=temp//10\n  print(enjoy%1000000007) ", "M = 10**9 + 7\nn = int(input())\nf = list(map(int, input().split()))\nq = int(input())\nfor i in range(q):\n query = input().split()\n if query[0] == '1':\n  f[int(query[1]) -1] = int(query[2])\n else:\n  r = int(query[1])\n  k = 0\n  ans = 1\n  while k<n:\n   ans *= f[k]\n   k += r\n  print(str(ans)[0], ans % M)"]