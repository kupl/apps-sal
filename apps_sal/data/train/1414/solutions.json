["def matrix(L,row,col,c):\n d={}\n dp=[]\n for i in range(row+1):\n  temp=[]\n  for i in range(col+1):\n   temp.append([])\n  dp.append(temp)\n\n for i in range(row+1):\n  dp[i][0]=0\n for i in range(col+1):\n  dp[0][i]=0\n for i in range(1,row+1):\n  for j in range(1,col+1):\n   if L[i-1][j-1]==c:\n    dp[i][j]=min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1])+1\n   else:\n    dp[i][j]=0\n   d[dp[i][j]]=d.get(dp[i][j],0)+1\n##    for i in xrange(row+1):\n##        for j in xrange(col+1):\n##            print dp[i][j],\n##        print\n return d\n\nfrom sys import stdin\nn,m,q=list(map(int,stdin.readline().split()))\nL=[]\nfor i in range(n):\n L.append(stdin.readline().strip())\nmale=matrix(L,n,m,'M')\nfemale=matrix(L,n,m,'F')\nfor i in range(q):\n query=stdin.readline().split()\n if query[1]=='F':\n  if female.get(int(query[0]),0)==0:\n   print('no')\n  else:\n   print('yes')\n else:\n  if male.get(int(query[0]),0)==0:\n   print('no')\n  else:\n   print('yes')\n", "def matrix(L,n,m,c):\n d={}\n dp=[[0]*(m+1)]*(n+1)\n for i in range(1,n+1):\n  for j in range(1,m+1):\n   if L[i-1][j-1]==c:\n    dp[i][j]=min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1\n   else:\n    dp[i][j]=0\n   d[dp[i][j]]=1\n return d\n\nfrom sys import stdin\nn,m,q=list(map(int,stdin.readline().split()))\nL=[]\nfor i in range(n):\n L.append(stdin.readline().strip())\nmale=matrix(L,n,m,'M')\nfemale=matrix(L,n,m,'F')\nfor i in range(q):\n query=stdin.readline().split()\n if query[1]=='F':\n  if female.get(int(query[0]),0)==0:\n   print('no')\n  else:\n   print('yes')\n else:\n  if male.get(int(query[0]),0)==0:\n   print('no')\n  else:\n   print('yes')\n", "def max_size(mat, ZERO=0):\n nrows, ncols = len(mat), (len(mat[0]) if mat else 0)\n if not (nrows and ncols): return 0 \n counts = [[0]*ncols for _ in range(nrows)]\n for i in reversed(range(nrows)):    \n  assert len(mat[i]) == ncols \n  for j in reversed(range(ncols)): \n   if mat[i][j] != ZERO:\n    counts[i][j] = (1 + min(\n     counts[i][j+1],  \n     counts[i+1][j],  \n     counts[i+1][j+1] \n     )) if i < (nrows - 1) and j < (ncols - 1) else 1 \n return max(c for rows in counts for c in rows)\n\nl,r,k=list(map(int,input().split()))\na,ans=[],['no','yes']\nfor _ in range(0,l):\n q=input().replace('M','1').replace('F','0')\n a.append(list(map(int,list(q))))\nf = max_size(a,1)\nm = max_size(a,0)\nfor _ in range(0,k):\n n,q = input().split()\n if q=='M':\n  print(ans[int(n)<=m])\n else:\n  print(ans[int(n)<=f])", "def chk():\n for r in range(i+1, i+k):\n  if m[r][ix:ix+k] != ss:\n   return False\n return True \nl, r, q = list(map(int, input().split()))\nm = [input().replace(\" \", \"\") for _ in range(l)]\nfor _ in range(q):\n k, s = input().split()\n k = int(k)\n ss = k * s\n ans = \"no\"\n for i in range(l-k+1):\n  st = 0\n  while ss in m[i][st:]:\n   ix = m[i].index(ss, st)\n   if chk():\n    ans = \"yes\"\n    break\n   st = ix + 1\n  if ans == \"yes\":break \n print(ans)", "read = lambda: list(map(int, input().split()))\nread_s = lambda: list(map(str, input().split()))\n\ndef found (K, gender, L, R):\n ans = []\n for i in range(K):\n  ans.append(gender * K)\n for i in range(L - K + 1):\n  for j in range(R - K + 1):\n   Query_list = []\n   for qq in range(K):\n    Query_list.append(grid[i + qq][j : j + K])\n   if Query_list == ans: return True\n return False\n\n\nL, R, Q = read()\ngrid = []\nfor i in range(L):\n grid.append(str(input()))\nfor i in range(Q):\n K, gender = input().split()\n K, gender = int(K), str(gender)\n print('yes' if found(K, gender, L, R) else 'no')"]