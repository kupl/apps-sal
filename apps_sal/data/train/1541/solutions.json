["eps=1e-8\nt=int(input())\nfor ii in range(t):\n    n=int(input())\n    l=[int(i) for i in input().split() ]\n    b=[int(i) for i in input().split() ]\n    v=[int(i) for i in input().split() ]\n    c=[int(i) for i in input().split() ]\n    greatest_time=l[0]/v[0]\n    for i in range(1,n):\n        if v[i]>0:\n            greatest_time=min(greatest_time,(l[i]-b[i])/v[i])\n        elif v[i]<0:\n            greatest_time=min(greatest_time,-b[i]/v[i])\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\n    r = sum(vi ** 2 for vi in v)\n    func = lambda t: p/t/t + q/t + r\n    #ternary search\n    \n    def ternsearch():\n    \n        if b==c:\n            return(0)\n        \n        lo,hi=0,greatest_time\n        while hi-lo>eps:\n                d=(hi-lo)/3\n                m1=lo+d\n                m2=m1+d\n                if func(m1)<=func(m2):\n                    hi=m2\n                else:\n                    lo=m1\n                #print(hi,lo)\n                #print(func(lo)**(0.5))\n        return max(0,func(lo))**(0.5)\n    ans=ternsearch()\n    print('%.12f' % (ans,))\n    \n    \n\n                \n                \n\n", "\r\neps=1e-8\r\nt=int(input())\r\nfor ii in range(t):\r\n    n=int(input())\r\n    l=[int(i) for i in input().split() ]\r\n    b=[int(i) for i in input().split() ]\r\n    v=[int(i) for i in input().split() ]\r\n    c=[int(i) for i in input().split() ]\r\n    greatest_time=l[0]/v[0]\r\n    for i in range(1,n):\r\n        if v[i]>0:\r\n            greatest_time=min(greatest_time,(l[i]-b[i])/v[i])\r\n        elif v[i]<0:\r\n            greatest_time=min(greatest_time,-b[i]/v[i])\r\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\r\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\r\n    r = sum(vi ** 2 for vi in v)\r\n    func = lambda t: p/t/t + q/t + r\r\n    #ternary search\r\n    \r\n    def ternsearch():\r\n    \r\n        if b==c:\r\n            return(0)\r\n        \r\n        lo,hi=0,greatest_time\r\n        while hi-lo>eps:\r\n                d=(hi-lo)/3\r\n                m1=lo+d\r\n                m2=m1+d\r\n                if func(m1)<=func(m2):\r\n                    hi=m2\r\n                else:\r\n                    lo=m1\r\n                #print(hi,lo)\r\n                #print(func(lo)**(0.5))\r\n        return max(0,func(lo))**(0.5)\r\n    ans=ternsearch()\r\n    print('%.12f' % (ans,))\r\n    \r\n    \r\n\r\n                \r\n                \r\n", "# cook your dish here\r\nEPS = 1e-8\r\n\r\n\r\nfor t in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    b = list(map(int, input().split()))\r\n    v = list(map(int, input().split()))\r\n    c = list(map(int, input().split()))\r\n\r\n    t_exit = l[0] / v[0]\r\n    for i in range(1, n):\r\n        if v[i] > 0:\r\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\r\n        elif v[i] < 0:\r\n            t_exit = min(t_exit, -b[i] / v[i])\r\n\r\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\r\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\r\n    r = sum(vi ** 2 for vi in v)\r\n\r\n    func = lambda t: p / t / t + q / t + r\r\n    def method1():\r\n        if b == c:\r\n            return 0\r\n        lo, hi = 0, t_exit\r\n        while hi - lo > EPS:\r\n            d = (hi - lo) / 3\r\n            m1 = lo + d\r\n            m2 = m1 + d\r\n            if func(m1) <= func(m2):\r\n                hi = m2\r\n            else:\r\n                lo = m1\r\n        return max(0, func(lo)) ** 0.5\r\n    ans = method1()\r\n    print('%.12f' % (ans,))", "# cook your dish here\r\nEPS = 1e-8\r\nEPS_ANS = 1e-3\r\n\r\nfor t in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    b = list(map(int, input().split()))\r\n    v = list(map(int, input().split()))\r\n    c = list(map(int, input().split()))\r\n\r\n    t_exit = l[0] / v[0]\r\n    for i in range(1, n):\r\n        if v[i] > 0:\r\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\r\n        elif v[i] < 0:\r\n            t_exit = min(t_exit, -b[i] / v[i])\r\n\r\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\r\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\r\n    r = sum(vi ** 2 for vi in v)\r\n\r\n    func = lambda t: p / t / t + q / t + r\r\n    def method1():\r\n        if b == c:\r\n            return 0\r\n        lo, hi = 0, t_exit\r\n        while hi - lo > EPS:\r\n            d = (hi - lo) / 3\r\n            m1 = lo + d\r\n            m2 = m1 + d\r\n            if func(m1) <= func(m2):\r\n                hi = m2\r\n            else:\r\n                lo = m1\r\n        return max(0, func(lo)) ** 0.5\r\n    ans = method1()\r\n    print('%.12f' % (ans,))", "# cook your dish here\nEPS = 1e-8\nEPS_ANS = 1e-3\n\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\n    r = sum(vi ** 2 for vi in v)\n\n    func = lambda t: p / t / t + q / t + r\n    def method1():\n        if b == c:\n            return 0\n        lo, hi = 0, t_exit\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "# cook your dish here\nEPS = 1e-8\nEPS_ANS = 1e-3\n\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\n    r = sum(vi ** 2 for vi in v)\n\n    func = lambda t: p / t / t + q / t + r\n    def method1():\n        if b == c:\n            return 0\n        lo, hi = 0, t_exit\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))\n", "# cook your dish here\nEPS = 1e-8\nEPS_ANS = 1e-3\n\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\n    r = sum(vi ** 2 for vi in v)\n\n    func = lambda t: p / t / t + q / t + r\n    def method1():\n        if b == c:\n            return 0\n        lo, hi = 0, t_exit\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))\n", "EPS = 1e-8\nEPS_ANS = 1e-3\n\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\n    r = sum(vi ** 2 for vi in v)\n\n    func = lambda t: p / t / t + q / t + r\n    def method1():\n        if b == c:\n            return 0\n        lo, hi = 0, t_exit\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))\n", "EPS = 1e-8\r\nEPS_ANS = 1e-3\r\n\r\nfor t in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    b = list(map(int, input().split()))\r\n    v = list(map(int, input().split()))\r\n    c = list(map(int, input().split()))\r\n\r\n    t_exit = l[0] / v[0]\r\n    for i in range(1, n):\r\n        if v[i] > 0:\r\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\r\n        elif v[i] < 0:\r\n            t_exit = min(t_exit, -b[i] / v[i])\r\n\r\n    p = sum((b[i] - c[i]) ** 2 for i in range(n))\r\n    q = sum(2 * (b[i] - c[i]) * v[i] for i in range(n))\r\n    r = sum(vi ** 2 for vi in v)\r\n\r\n    func = lambda t: p / t / t + q / t + r\r\n    def method1():\r\n        if b == c:\r\n            return 0\r\n        lo, hi = 0, t_exit\r\n        while hi - lo > EPS:\r\n            d = (hi - lo) / 3\r\n            m1 = lo + d\r\n            m2 = m1 + d\r\n            if func(m1) <= func(m2):\r\n                hi = m2\r\n            else:\r\n                lo = m1\r\n        return max(0, func(lo)) ** 0.5\r\n    ans = method1()\r\n    print('%.12f' % (ans,))", "# cook your dish here\nimport math\nfor i in range(int(input())):\n    n=int(input())\n    bound=[int(i) for i in input().split()]\n    ball=[int(i) for i in input().split()]\n    speed=[int(i) for i in input().split()]\n    chef=[int(i) for i in input().split()]\n    cspeed=0\n    time=float('inf')\n    for i in range(n):\n        if(speed[i]>0):    \n            a=(bound[i]-ball[i])/speed[i]\n            time=min(a,time)\n        elif(speed[i]<0):\n            a=abs(ball[i]/speed[i])\n            time=min(a,time)\n        \n    a=b=c=0 \n    for i in range(n):\n        c+=speed[i]**2 \n        a+=(ball[i]-chef[i])**2\n        b+=2*speed[i]*(ball[i]-chef[i])\n    if(a==0):\n        print(0)\n    else:\n        x=-b/(2*a)\n        if(x>=1/time):\n            cspeed=c - (b**2)/(4*a)\n            print(math.sqrt(cspeed))\n        else:\n            cspeed=a/(time**2) + b/time + c\n            print(math.sqrt(cspeed))\n"]