["n = int(input())\nfor _ in range(n):\n    a, b = list(map(int, input().split()))\n    print(a ^ b)\n", "for __ in range(int(input())):\n    a, b = list(map(int, input().split()))\n    print(a ^ b)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    a, b = map(int, input().split())\n    print(a^b)\n    \nfor _ in range(int(input())):\n    main()", "from math import *\nfrom bisect import *\nfrom collections import *\nfrom random import *\nfrom decimal import *\nfrom itertools import *\nimport sys\ninput=sys.stdin.readline\ndef inp():\n    return int(input())\ndef st():\n    return input().rstrip('\\n')\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return list(map(int,input().split()))\nt=inp()\nwhile(t):\n    t-=1\n    a,b=ma()\n    print(a^b)\n        \n", "read = lambda: map(int, input().split())\nt = int(input())\nfor i in range(t):\n    a, b = read()\n    print(a^b)", "def main():\n    a, b = list(map(int, input().split()))\n    print(a + b - 2*(a&b))\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()", "for _ in range(int(input())):\n    a, b = list(map(int, input().split()))\n    n = a & b\n    print((a^n) + (b^n))\n", "import sys\ninput=sys.stdin.readline\n\nT=int(input())\nfor _ in range(T):\n    n,m=list(map(int,input().split()))\n    print(n^m)\n", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    a, b = li()\n\n    ans = 0\n    for i in range(32):\n        if (a >> i) & 1 == (b >> i) & 1:\n            ans += 0\n        else:\n            ans += 1 << i\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n  a, b = map(int, input().split())\n  print(a + b - (a & b) * 2)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\n\n#sys.setrecursionlimit(100000000)\n\ninp = lambda: int(input())\nstrng = lambda: input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda: list(input().strip())\nmul = lambda: map(int, input().strip().split())\nmulf = lambda: map(float, input().strip().split())\nseq = lambda: list(map(int, input().strip().split()))\n\nceil = lambda x: int(x) if (x == int(x)) else int(x) + 1\nceildiv = lambda x, d: x // d if (x % d == 0) else x // d + 1\n\nflush = lambda: stdout.flush()\nstdstr = lambda: stdin.readline()\nstdint = lambda: int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdarr = lambda: map(int, stdstr().split())\n\nmod = 1000000007\n\n\nfor _ in range(stdint()):\n    a,b = stdarr()\n\n    print(a^b)", "\nt = int(input())\n\nfor _ in range(t):\n    a,b = map(int,input().split())\n    if a > b:\n        a,b = b,a\n    print(a^b)", "\"\"\"\n    Author: Sagar Pandey\n\n\"\"\"\n# ---------------------------------------------------Import Libraries---------------------------------------------------\nimport sys\nimport os\nfrom math import sqrt, log, log2, log10, gcd, floor, pow, sin, cos, tan, pi, inf, factorial\nfrom copy import copy, deepcopy\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, deque\nfrom itertools import permutations\nimport heapq\nfrom bisect import bisect_left as bl\n# If the element is already present in the list,\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is r\n\n# ---------------------------------------------------Global Variables---------------------------------------------------\n# sys.setrecursionlimit(100000000)\nmod = 1000000007\n# ---------------------------------------------------Helper Functions---------------------------------------------------\niinp = lambda: int(sys.stdin.readline())\ninp = lambda: sys.stdin.readline().strip()\nstrl = lambda: list(inp().strip().split(\" \"))\nintl = lambda: list(map(int, inp().split(\" \")))\nmint = lambda: list(map(int, inp().split()))\nflol = lambda: list(map(float, inp().split(\" \")))\nflush = lambda: stdout.flush()\n\n\ndef permute(nums):\n    def fun(arr, nums, cur, v):\n        if len(cur) == len(nums):\n            arr.append(cur.copy())\n        i = 0\n        while i < len(nums):\n            if v[i]:\n                i += 1\n                continue\n            else:\n                cur.append(nums[i])\n                v[i] = 1\n                fun(arr, nums, cur, v)\n                cur.pop()\n                v[i] = 0\n                i += 1\n            # while i<len(nums) and nums[i]==nums[i-1]:i+=1    # Uncomment for unique permutations\n        return arr\n\n    res = []\n    nums.sort()\n    v = [0] * len(nums)\n    return fun(res, nums, [], v)\n\n\ndef subsets(res, index, arr, cur):\n    res.append(cur.copy())\n    for i in range(index, len(arr)):\n        cur.append(arr[i])\n        subsets(res, i + 1, arr, cur)\n        cur.pop()\n    return res\n\n\ndef sieve(N):\n    root = int(sqrt(N))\n    primes = [1] * (N + 1)\n    primes[0], primes[1] = 0, 0\n    for i in range(2, root + 1):\n        if primes[i]:\n            for j in range(i * i, N + 1, i):\n                primes[j] = 0\n    return primes\n\n\ndef bs(arr, l, r, x):\n    if x < arr[0] or x > arr[len(arr) - 1]:\n        return -1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\n\ndef isPrime(n):\n    if n <= 1: return False\n    if n <= 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    p = int(sqrt(n))\n    for i in range(5, p + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\n\n# -------------------------------------------------------Functions------------------------------------------------------\n\ndef solve():\n    a,b=mint()\n    print(a^b)\n\n\n# -------------------------------------------------------Main Code------------------------------------------------------\nfor _ in range(iinp()):\n    solve()\n", "t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    print((a + b) - (a & b) * 2)", "t = int(input())\n\nfor _ in range(t):\n    a,b = list(map(int,input().split()))\n    x = a&b\n    print((a^x) + (b^x))\n", "t=int(input())\nfor you in range(t):\n    l=input().split()\n    a=int(l[0])\n    b=int(l[1])\n    z=a&b\n    print((a^z)+(b^z))\n", "from sys import stdin, stdout\ninput = stdin.readline\nfrom collections import defaultdict as dd\nimport math\ndef geti(): return list(map(int, input().strip().split()))\ndef getl(): return list(map(int, input().strip().split()))\ndef gets(): return input()\ndef geta(): return int(input())\ndef print_s(s): stdout.write(s+'\\n')\n\ndef solve():\n    for _ in range(geta()):\n        a,b=geti()\n        print(a^b)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    a, b = read_ints()\n    print(a ^ b)\n", "from sys import stdin,stdout\nfor _ in range(int(stdin.readline())):\n    # n=int(stdin.readline())\n    a,b=list(map(int,stdin.readline().split()))\n    print(a^b)\n", "import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\n#from decimal import Decimal\n#from fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod=10**9+7\n\n\nfor t in range(int(data())):\n    a,b=mdata()\n    out(a^b)\n\n"]