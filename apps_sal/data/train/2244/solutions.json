["# seishin.py\nN = int(input())\nP = [list(map(int, input().split())) for i in range(N)]\n\nfrom heapq import heappush, heappop\n\nl0, r0 = P[0]\n\nL = [-l0+1]\nR = [l0-1]\ns = t = 0\n\nres = 0\nfor i in range(N-1):\n    l0, r0 = P[i]\n    l1, r1 = P[i+1]\n    s += (r1 - l1); t += (r0 - l0)\n    if -s-L[0] <= l1-1 <= t+R[0]:\n        heappush(L, -l1+1-s)\n        heappush(R, l1-1-t)\n    elif l1-1 < -s-L[0]:\n        heappush(L, -l1+1-s)\n        heappush(L, -l1+1-s)\n        p = -heappop(L)-s\n        heappush(R, p-t)\n        res += (p - (l1-1))\n    elif t+R[0] < l1-1:\n        heappush(R, l1-1-t)\n        heappush(R, l1-1-t)\n        p = heappop(R) + t\n        heappush(L, -p-s)\n        res += ((l1-1) - p)\nprint(res)", "N = int(input())\nP = [list(map(int, input().split())) for i in range(N)]\n \nINF = 10**18\n \nfrom heapq import heappush, heappop\n \nl0, r0 = P[0]\n \nL = [-l0+1]\nR = [l0-1]\ns = t = 0\n \nres = 0\nfor i in range(N-1):\n    l0, r0 = P[i]\n    l1, r1 = P[i+1]\n    s += (r1 - l1); t += (r0 - l0)\n    if -s-L[0] <= l1-1 <= t+R[0]:\n        heappush(L, -l1+1-s)\n        heappush(R, l1-1-t)\n    elif l1-1 < -s-L[0]:\n        heappush(L, -l1+1-s)\n        heappush(L, -l1+1-s)\n        p = -heappop(L)-s\n        heappush(R, p-t)\n        res += (p - (l1-1))\n    elif t+R[0] < l1-1:\n        heappush(R, l1-1-t)\n        heappush(R, l1-1-t)\n        p = heappop(R) + t\n        heappush(L, -p-s)\n        res += (l1-1 - p)\nprint(res)", "# seishin.py\nN = int(input())\nP = [list(map(int, input().split())) for i in range(N)]\n\nINF = 10**18\n\nfrom heapq import heappush, heappop\n\nl0, r0 = P[0]\n\nL = [-l0+1]\nR = [l0-1]\ns = t = 0\n\nres = 0\nfor i in range(N-1):\n    l0, r0 = P[i]\n    l1, r1 = P[i+1]\n    s += (r1 - l1); t += (r0 - l0)\n    if -s-L[0] <= l1-1 <= t+R[0]:\n        heappush(L, -l1+1-s)\n        heappush(R, l1-1-t)\n    elif l1-1 < -s-L[0]:\n        heappush(L, -l1+1-s)\n        heappush(L, -l1+1-s)\n        p = -heappop(L)-s\n        heappush(R, p-t)\n        res += (p - (l1-1))\n    elif t+R[0] < l1-1:\n        heappush(R, l1-1-t)\n        heappush(R, l1-1-t)\n        p = heappop(R) + t\n        heappush(L, -p-s)\n        res += (l1-1 - p)\nprint(res)", "# seishin.py\nN = int(input())\nP = [list(map(int, input().split())) for i in range(N)]\n\nINF = 10**18\n\nfrom heapq import heappush, heappop\n\nl0, r0 = P[0]\n\nL = [-l0+1]\nR = [l0-1]\ns = t = 0\n\ndef debug(L, s, t, R):\n    L0 = L[:]\n    Q1 = []; Q2 = []\n    while L0:\n        Q1.append(-s-heappop(L0))\n    R0 = R[:]\n    while R0:\n        Q2.append(t+heappop(R0))\n    print((\"debug:\", *Q1[::-1]+Q2))\n\n\n#print(L, s, t, R)\nres = 0\nfor i in range(N-1):\n    l0, r0 = P[i]\n    l1, r1 = P[i+1]\n    #print(\">\", l1, r1)\n    s += (r1 - l1); t += (r0 - l0)\n    if -s-L[0] <= l1-1 <= t+R[0]:\n        #print(0)\n        heappush(L, -l1+1-s)\n        heappush(R, l1-1-t)\n        # res += 0\n    elif l1-1 < -s-L[0]:\n        #print(1)\n        heappush(L, -l1+1-s)\n        heappush(L, -l1+1-s)\n        p = -heappop(L)-s\n        #d = (-L[0]-s) - p\n        heappush(R, p-t)\n        #print(d)\n        #res += d\n        res += (p - (l1-1))\n    elif t+R[0] < l1-1:\n        #print(2)\n        heappush(R, l1-1-t)\n        heappush(R, l1-1-t)\n        p = heappop(R) + t\n        #d = R[0]+t - p\n        heappush(L, -p-s)\n        #print(d)\n        res += (l1-1 - p)\n    #print(L, s, t, R, -s-L[0], R[0]+t, res)\n    #debug(L, s, t, R)\nprint(res)\n", "import sys\ninput = sys.stdin.readline\nfrom heapq import heappop, heappush\n\n\"\"\"\nf(x) = \uff08\u4e00\u756a\u4e0a\u306e\u9577\u65b9\u5f62\u306e\u5de6\u7aef\u304cx\u306b\u6765\u308b\u3068\u304d\u306e\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\uff09 \u3092\u95a2\u6570\u3054\u3068\u66f4\u65b0\u3057\u3066\u3044\u304d\u305f\u3044\n\u66f4\u65b0\u5f8c\u3092g(x)\u3068\u3059\u308b\ng(x) = |x-L| + min_{-width_1 \\leq t\\leq width_2} f(x+t), \u524d\u56de\u306e\u5e45\u3001\u4eca\u56de\u306e\u5e45\n\u5e38\u306b\u3001\u533a\u9593\u4e0a\u3067\u6700\u5c0f\u5024\u3092\u6301\u3061\u50be\u304d\u304c1\u305a\u3064\u5909\u308f\u308b\u51f8\u306a\u95a2\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u7dad\u6301\u3055\u308c\u308b\u3002\uff08\u533a\u9593\u306f1\u70b9\u304b\u3082\uff09\n\u50be\u304d\u304c\u5909\u308f\u308b\u70b9\u306e\u96c6\u5408S_f = S_f_lower + S_f_upper\u3092\u6301\u3063\u3066\u3044\u304f\u3002\nS_f_lower, S_upper\u306f\u4e00\u6589\u306b\u5b9a\u6570\u3092\u8db3\u3059\uff1a\u5909\u5316\u91cf\u306e\u307f\u6301\u3064\n\"\"\"\n\nN = int(input())\nLR = [[int(x) for x in input().split()] for _ in range(N)]\n\n# initialize\nL,R = LR[0]\nS_lower = [-L]\nS_upper = [L]\nmin_f = 0\nadd_lower = 0\nadd_upper = 0\nprev_w = R - L\n\npush_L = lambda x: heappush(S_lower, -x)\npush_R = lambda x: heappush(S_upper, x)\npop_L = lambda: -heappop(S_lower)\npop_R = lambda: heappop(S_upper)\n\nfor L,R in LR[1:]:\n    w = R - L\n    # \u5e73\u884c\u79fb\u52d5\u3068\u306emin\u3092\u3068\u308b\u30b9\u30c6\u30c3\u30d7\n    add_lower -= w\n    add_upper += prev_w\n    # abs(x-L) \u3092\u52a0\u3048\u308b\u30b9\u30c6\u30c3\u30d7\n    # abs \u306f\u77ac\u9593\u306b2\u50be\u304d\u304c\u5909\u308f\u308b\u306e\u3067\n    x = pop_L() + add_lower\n    y = pop_R() + add_upper\n    a,b,c,d = sorted([x,y,L,L])\n    push_L(a - add_lower)\n    push_L(b - add_lower)\n    push_R(c - add_upper)\n    push_R(d - add_upper)\n    min_f += c-b\n    prev_w = w\n\nprint(min_f)\n\n"]