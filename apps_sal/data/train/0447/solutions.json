["class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         rindex = {c: i for i, c in enumerate(s)}\n         result = ''\n         for i, c in enumerate(s):\n             if c not in result:\n                 while c < result[-1:] and i < rindex[result[-1]]:\n                     result = result[:-1]\n                 result += c\n         return result", "class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         chars = set(s)\n         for c in sorted(chars):\n             suffix = s[s.index(c):]\n             if set(suffix) == chars:\n                 return c + self.removeDuplicateLetters(suffix.replace(c, ''))\n         return ''\n", "class Solution:\n     def removeDuplicateLetters(self, s):\n         if not s or len(s) <= 1:\n             return s\n         \n         from collections import Counter\n         count = Counter(s)\n         seen = set([])\n         stack = []\n         \n         i = 0\n         while i < len(s):\n             char = s[i]\n             if char not in seen:\n                 if stack and ord(stack[-1]) > ord(char) and count[stack[-1]] >= 1:\n                     ele = stack.pop()\n                     seen.remove(ele)\n                 else:\n                     count[char] -= 1\n                     seen.add(char)\n                     stack.append(char)\n                     i += 1\n             else:\n                 count[char] -= 1\n                 i += 1\n         \n         return ''.join(stack)", "class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         str_index = {char: i for i, char in enumerate(s)}\n         result = ''\n         for i, char in enumerate(s):\n             if char not in result:\n                 while char < result[-1:] and i < str_index[result[-1]]:\n                     result = result[:-1]\n                 result += char\n         return result\n", "class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if len(s) == 0: return ''\n         count = collections.Counter(s)\n         stack = []\n         visited = set()\n         for c in s:\n             count[c] -= 1\n             if c in visited: continue\n             visited.add(c)\n             while stack and stack[-1] > c and count[stack[-1]] > 0:\n                 visited.remove(stack[-1])\n                 stack.pop()\n             stack.append(c)\n         \n         return ''.join(stack)\n", "class Solution:\n     def removeDuplicateLetters(self, s):\n         ret = ''\n         while s:\n             p = min(s.rindex(c) for c in set(s))\n             c = min(s[:p + 1])\n             ret += c\n             s = s[s.index(c):].replace(c, '')\n         return ret", "class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         counter = collections.Counter(s)\n         added = set()\n         ans = []\n         for c in s:\n             while len(ans) > 0 and c < ans[-1] and counter[ans[-1]] > 0 and c not in added:\n                 added.remove(ans.pop())\n             counter[c] -= 1\n             if c not in added:\n                 ans.append(c)\n             added.add(c)\n         return ''.join(ans)", "class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         counts = {}\n         for c in s:\n             if c not in counts:\n                 counts[c] = 0\n             counts[c] += 1\n \n         stack = []\n         visited = set()\n         for c in s:\n             counts[c] -= 1\n             if c in visited:\n                 continue\n             while stack and stack[-1] > c and counts[stack[-1]] > 0:\n                 visited.remove(stack.pop())\n \n             stack.append(c)\n             visited.add(c)\n \n         return ''.join(stack)\n", "class Solution:\n     def removeDuplicateLetters(self, s):\n         if not s:\n             return \"\"\n         \n         res = ''\n         sorted_set = sorted(set(s))\n         \n         for c in sorted_set:\n             sub_s = s[s.index(c):]\n             if set(s) == set(sub_s):\n                 return c + self.removeDuplicateLetters(sub_s.replace(c, ''))\n         \n                 \n         return res\n", "class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         \n         if len(s) <= 1:\n             return s\n         \n         \n         for c in sorted(list(set(s))):\n             suffix = s[s.index(c):]\n             if set(s) == set(suffix):\n                 return c + self.removeDuplicateLetters(suffix.replace(c, ''))\n         \n         return ''\n                     \n         \n         \n             \n", "class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         for c in sorted(set(s)):\n             suffix = s[s.index(c):]\n             if set(suffix) == set(s):\n                 return c + self.removeDuplicateLetters(suffix.replace(c, ''))\n         return ''", "class Solution:\n     def removeDuplicateLetters(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         for c in sorted(list(set(s))):\n             substr = s[s.index(c):]\n             if set(substr) == set(s):\n                 return c + self.removeDuplicateLetters(substr.replace(c,\"\"))\n         return s"]