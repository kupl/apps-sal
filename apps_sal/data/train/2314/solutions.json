["n = int(input())\n*a, = map(int, input().split())\ndp = [[0 for i in range(n + 1)] for j in range(n + 1)]\nfor i in range(n):\n    dp[0][i] = a[i]\nfor i in range(1, n):\n    for j in range(n - i + 1):\n        dp[i][j] = dp[i - 1][j] ^ dp[i - 1][j + 1]\nfor i in range(1, n):\n    for j in range(n - i):\n        dp[i][j] = max(dp[i][j], dp[i - 1][j], dp[i - 1][j + 1])\nfor i in range(int(input())):\n    l, r = map(int, input().split())\n    print(dp[r - l][l - 1])", "# import os, sys, atexit\n# from io import BytesIO, StringIO\nfrom sys import stdin, stdout\n \n# input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\n# _OUTPUT_BUFFER = StringIO()\n# sys.stdout = _OUTPUT_BUFFER\n \n# @atexit.register\n# def write():\n#     sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\ndef calculate(array):\n    n = len(array)\n    finalarray = []\n    finalarray.append(array)\n    finalarray.append([])\n    while (n!=1):\n        for x in range(n-1):\n            finalarray[-1].append(finalarray[-2][x]^finalarray[-2][x+1])\n        finalarray.append([])\n        n-=1\n    return finalarray\n    \ndef solve():\n    n = int(input())\n    array = [0]\n    array.extend(list(map(int,stdin.readline().strip().split())))\n    subArrays = []\n    for x in range(n+1):\n        subArrays.append([0]*(n+1))\n    finalarray = calculate(array)\n    # print (finalarray,len(finalarray))\n    for x in range(1,n+1):\n        for y in range(x,n+1):\n            # print (y-x+1,x,finalarray[y-x+1])\n            value = finalarray[y-x][x]\n            subArrays[1][y] = max(subArrays[1][y],value)\n            subArrays[x][y] = max(subArrays[x][y],value)\n    # print (subArrays)\n    for x in range(1,n+1):\n        for y in range(2,n+1):\n            subArrays[x][y] = max(subArrays[x][y],subArrays[x][y-1])\n    # print (subArrays)\n    for y in range(1,n+1):\n        for x in range(n-1,0,-1):\n            subArrays[x][y] = max(subArrays[x][y],subArrays[x+1][y])\n    # print (subArrays)\n    q = int(input())\n    for _ in range(q):\n        l, r = list(map(int,stdin.readline().strip().split()))\n        print(subArrays[l][r])\ntry:\n    solve()\nexcept Exception as e:\n    print (e)\n\n# solve()\t\t\t\t\t \t  \t \t \t\t\t\t  \t\t\t\n", "#t=int(input())\nt=1\nfor _ in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    dp=[[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[0][i]=l[i]\n    for i in range(1,n):\n        for j in range(n-i):\n            dp[i][j]=dp[i-1][j]^dp[i-1][j+1]\n    \n    for i in range(1,n):\n        for j in range(n-i):\n            dp[i][j]=max(dp[i][j],dp[i-1][j],dp[i-1][j+1])\n    \n    q=int(input())\n    for __ in range(q):\n        x,y=map(int,input().split())\n        x-=1\n        y-=1\n        print(dp[y-x][x])", "import sys\ninput=sys.stdin.readline\nn=int(input())\nar=list(map(int,input().split()))\ndic={}\nli=[]\nfor i in range(n):\n    xx=[]\n    for j in range(n-i):\n        xx.append(0)\n    li.append(xx.copy())\nfor i in range(n):\n    for j in range(n-i):\n        if(i==0):\n            li[i][j]=ar[j]\n        else:\n            li[i][j]=li[i-1][j]^li[i-1][j+1]\nfor i in range(1,n):\n    for j in range(n-i):\n        li[i][j]=max(li[i][j],li[i-1][j],li[i-1][j+1])\nfor _ in range(int(input())):\n    l,r=map(int,input().split())\n    print(li[r-l][l-1])", "#!/usr/bin/env python3\n#\n# XOR-pyramid\n#\nimport sys, os\n\ndef read_int(): return int(input())\ndef read_ints(): return list(map(int, input().split()))\n#------------------------------------------------------------------------------#\n\nn = read_int()\na = read_ints()\ndp = [[0] * n for _ in range(n)]\nf = [[0] * n for _ in range(n)]\nfor i in range(n - 1, -1, -1):\n\tf[i][i] = a[i]\n\tfor j in range(i + 1, n):\n\t\tf[i][j] = f[i][j - 1] ^ f[i + 1][j]\nfor i in range(n - 1, -1, -1):\n\tdp[i][i] = f[i][i]\n\tfor j in range(i + 1, n):\n\t\tdp[i][j] = max(f[i][j], dp[i][j - 1], dp[i + 1][j])\nq = read_int()\nfor _ in range(q):\n\tl, r = read_ints()\n\tprint(dp[l - 1][r - 1])\n\n", "#!/usr/bin/env python3\n#\n# XOR-pyramid\n#\nimport sys, os\n\ndef read_int(): return int(input())\ndef read_ints(): return list(map(int, input().split()))\n#------------------------------------------------------------------------------#\n\nn = read_int()\na = read_ints()\ndp = [[0] * n for _ in range(n)]\nf = [[0] * n for _ in range(n)]\nfor i in range(n - 1, -1, -1):\n\tf[i][i] = dp[i][i] = a[i]\n\tfor j in range(i + 1, n):\n\t\tf[i][j] = f[i][j - 1] ^ f[i + 1][j]\n\t\tdp[i][j] = max(f[i][j], dp[i][j - 1], dp[i + 1][j])\nq = read_int()\nfor _ in range(q):\n\tl, r = read_ints()\n\tprint(dp[l - 1][r - 1])\n\n"]