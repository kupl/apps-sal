["class Solution:\n     def isSubsequence(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s) > len(t):\n             return False\n         for i in s:\n             if i in t:\n                 index = t.find(i)\n                 t = t[index + 1:]\n             else:\n                 return False\n         return True", "class Solution:\n     def isSubsequence(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         i = 0\n         if not s:\n             return True\n         m, n = len(t), len(s)\n         for ch in t:\n             if ch == s[i]:\n                 if i == n-1:\n                     return True\n                 i += 1\n         return False", "class Solution:\n     def isSubsequence(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         length = len(s)\n         idx = 0\n         for i in range(length):\n             idx = t.find(s[i], idx)\n             #print(s[i])\n             if idx == -1:\n                 return False\n             idx += 1\n             #print(idx)\n         return True\n", "class Solution:\n     def isSubsequence(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         \n         index = 0\n         ans = True\n         for i in s:\n             if i not in t[index:]:\n                 ans = False\n                 break\n             else:\n                 index += t[index:].index(i) + 1\n         return ans\n", "class Solution:\n     def isSubsequence(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         start = 0\n         for i in range(len(s)):\n             index = t[start:].find(s[i])\n             print(index)\n             if index == -1:\n                 return False\n             else:\n                 index += start\n                 start = index+1\n         return True\n", "class Solution:\n     def isSubsequence(self, s, t):\n         t = iter(t)\n         return all(c in t for c in s)\n     def isSubsequenceFei(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         p,l = 0,len(s)\n         if l == p:\n             return True\n         for c_t in t:\n             if s[p] == c_t:\n                 p += 1\n             if p == l:\n                 return True\n         return False", "class Solution:\n     def isSubsequence(self, s, t):\n         t = iter(t)\n         return all(c in t for c in s)\n", "class Solution:\n     def isSubsequence(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         t= iter(t)\n         return all(i in t for i in s)", "class Solution:\n     def isSubsequence(self, s, t):\n         if s == \"\":\n             return True\n         s_num = 0\n         temp = s[s_num]\n         for i in t:\n             if i == temp:\n                 s_num = s_num + 1\n                 if s_num >= len(s):\n                     return True\n                 temp = s[s_num]\n         return False\n", "class Solution:\n     def isSubsequence(self, s, t):\n         iterator = iter(t)\n         \n         return all(character in iterator for character in s)", "class Solution:\n     def isSubsequence(self, s, t):\n         if len(s)==0:\n             return True\n         if len(s)>len(t):\n             return False\n         if s[0] not in t:\n             return False\n         else:\n             return self.isSubsequence(s[1:], t[t.index(s[0])+1:])\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"        "]