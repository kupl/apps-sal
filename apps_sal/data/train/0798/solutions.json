["# cook your dish here\nimport sys \ndef dist(a,b):\n    return abs(a[0]-b[0])+abs(a[1]-b[1])\nn, m = map(int, input().split())\nmatrix=[]\nid_matrix=[[0 for i in range(n)] for i in range(n)]\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\ncharms=[]\nfor _ in range(m):\n    x,y,lungh = map(int, input().split())\n    x-=1 \n    y-=1\n    charms.append([x,y,lungh])\nif m<=10:\n    for i in range(n):\n        for j in range(n):\n            flag=0\n            for charm in charms:\n                if dist([i,j],charm[:2])<=charm[2]:\n                    flag=1\n                    break\n            if flag==0:\n                matrix[i][j]=-float('Inf')\n    for i in range(1,n):\n        matrix[0][i]+=matrix[0][i-1]\n        matrix[i][0]+=matrix[i-1][0]\n    for i in range(1,n):\n        for j in range(1,n):\n            matrix[i][j]+=max(matrix[i-1][j], matrix[i][j-1])\nelse:\n    for charm in charms:\n        for i in range(-charm[2],charm[2]+1):\n            appo=charm[2]-abs(i)\n            for j in range(-appo, appo+1):\n                x=i+charm[0]\n                y=j+charm[1]\n                if x>=0 and x<n and y>=0 and y<n:\n                    id_matrix[x][y]=1\n    if id_matrix[0][0]==0:\n        matrix[0][0]=-float('Inf')\n    for i in range(1,n):\n        if id_matrix[0][i]==0:\n            matrix[0][i]=-float('Inf')\n        else:\n            matrix[0][i]+=matrix[0][i-1]\n        if id_matrix[i][0]==0:\n            matrix[i][0]=-float('Inf')\n        else:\n            matrix[i][0]+=matrix[i-1][0]\n    for i in range(1,n):\n        for j in range(1,n):\n            if id_matrix[i][j]==0:\n                matrix[i][j]=-float('Inf')\n            else:\n                matrix[i][j]+=max(matrix[i-1][j], matrix[i][j-1])\nif matrix[n-1][n-1]<-10**(10):\n    print('NO')\nelse:\n    print('YES')\n    print(matrix[n-1][n-1])", "# cook your dish here\nimport sys \ndef dist(a,b):\n    return abs(a[0]-b[0])+abs(a[1]-b[1])\nn, m = map(int, input().split())\nmatrix=[]\nid_matrix=[[0 for i in range(n)] for i in range(n)]\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\ncharms=[]\nfor _ in range(m):\n    x,y,lungh = map(int, input().split())\n    x-=1 \n    y-=1\n    charms.append([x,y,lungh])\nif m<=10:\n    for i in range(n):\n        for j in range(n):\n            flag=0\n            for charm in charms:\n                if dist([i,j],charm[:2])<=charm[2]:\n                    flag=1\n                    break\n            if flag==0:\n                matrix[i][j]=-float('Inf')\n    for i in range(1,n):\n        matrix[0][i]+=matrix[0][i-1]\n        matrix[i][0]+=matrix[i-1][0]\n    for i in range(1,n):\n        for j in range(1,n):\n            matrix[i][j]+=max(matrix[i-1][j], matrix[i][j-1])\nelse:\n    for charm in charms:\n        for i in range(-charm[2],charm[2]+1):\n            appo=charm[2]-abs(i)\n            for j in range(-appo, appo+1):\n                if i>=0 and i<n and j>=0 and j<n:\n                    id_matrix[i][j]=1\n    if id_matrix[0][0]==0:\n        matrix[0][0]=-float('Inf')\n    for i in range(1,n):\n        if id_matrix[0][i]==0:\n            matrix[0][i]=-float('Inf')\n        else:\n            matrix[0][i]+=matrix[0][i-1]\n        if id_matrix[i][0]==0:\n            matrix[i][0]=-float('Inf')\n        else:\n            matrix[i][0]+=matrix[i-1][0]\n    for i in range(1,n):\n        for j in range(1,n):\n            if id_matrix[i][j]==0:\n                matrix[i][j]=-float('Inf')\n            else:\n                matrix[i][j]+=max(matrix[i-1][j], matrix[i][j-1])\nif matrix[n-1][n-1]<-10**(10):\n    print('NO')\nelse:\n    print('YES')\n    print(matrix[n-1][n-1])", "# cook your dish here\nimport sys \ndef dist(a,b):\n    return abs(a[0]-b[0])+abs(a[1]-b[1])\nn, m = map(int, input().split())\nmatrix=[]\nfor _ in range(n):\n    matrix.append(list(map(int, input().split())))\ncharms=[]\nfor _ in range(m):\n    x,y,lungh = map(int, input().split())\n    x-=1 \n    y-=1\n    charms.append([x,y,lungh])\nif m<=10:\n    for i in range(n):\n        for j in range(n):\n            flag=0\n            for charm in charms:\n                if dist([i,j],charm[:2])<=charm[2]:\n                    flag=1\n                    break\n            if flag==0:\n                matrix[i][j]=-float('Inf')\nelse:\n    for charm in charms:\n        for i in range(-charm[2],charm[2]+1):\n            appo=charm[2]-abs(i)\n            for j in range(-appo, appo+1):\n                if i>=0 and i<n and j>=0 and j<n:\n                    matrix[i][j]=float('Inf')\nfor i in range(1,n):\n    matrix[0][i]+=matrix[0][i-1]\n    matrix[i][0]+=matrix[i-1][0]\nfor i in range(1,n):\n    for j in range(1,n):\n        matrix[i][j]+=max(matrix[i-1][j], matrix[i][j-1])\nif matrix[n-1][n-1]<-10**(10):\n    print('NO')\nelse:\n    print('YES')\n    print(matrix[n-1][n-1])", "# cook your dish here\ndef main():\n\tn, m = (int(x) for x in input().split())\n\tgrid = [[int(x) for x in input().split()] for _ in range(n)]\n\tcharms = [[int(x) for x in input().split()] for _ in range(m)]\n\n\tn_inf = -9999\n\tdp = [[n_inf] * n for _ in range(n)]\n\n\tfor c in charms:\n\t\tc[0] -= 1\n\t\tc[1] -= 1\n\n\t\tx = max(0, c[0] - c[2])\n\t\twhile x < n and x <= c[0] + c[2]:\n\t\t\toff = abs(x - c[0])\n\t\t\ty = max(0, c[1] - c[2] + off)\n\t\t\twhile y < n and y <= c[1] + c[2] - off:\n\t\t\t\tdp[x][y] = grid[x][y]\n\t\t\t\ty += 1\n\t\t\tx += 1\n\n\tfor x in range(1, n):\n\t\tif dp[x - 1][0] == n_inf:\n\t\t\tfor x1 in range(x, n):\n\t\t\t\tdp[x1][0] = n_inf\n\t\t\tbreak\n\t\tdp[x][0] += dp[x - 1][0]\n\n\tfor y in range(1, n):\n\t\tif dp[0][y - 1] == n_inf:\n\t\t\tfor y1 in range(y, n):\n\t\t\t\tdp[0][y1] = n_inf\n\t\t\tbreak\n\t\tdp[0][y] += dp[0][y - 1]\n\n\tfor x in range(1, n):\n\t\tfor y in range(1, n):\n\t\t\tm = max(dp[x - 1][y], dp[x][y - 1])\n\t\t\tdp[x][y] = m + dp[x][y] if m != n_inf else n_inf\n\n\tif dp[-1][-1] != n_inf:\n\t\tprint('YES')\n\t\tprint(str(dp[-1][-1]))\n\telse:\n\t\tprint('NO')\n\n\nmain()", "def main():\r\n\tn, m = (int(x) for x in input().split())\r\n\tgrid = [[int(x) for x in input().split()] for _ in range(n)]\r\n\tcharms = [[int(x) for x in input().split()] for _ in range(m)]\r\n\r\n\tn_inf = -9999\r\n\tdp = [[n_inf] * n for _ in range(n)]\r\n\r\n\tfor c in charms:\r\n\t\tc[0] -= 1\r\n\t\tc[1] -= 1\r\n\r\n\t\tx = max(0, c[0] - c[2])\r\n\t\twhile x < n and x <= c[0] + c[2]:\r\n\t\t\toff = abs(x - c[0])\r\n\t\t\ty = max(0, c[1] - c[2] + off)\r\n\t\t\twhile y < n and y <= c[1] + c[2] - off:\r\n\t\t\t\tdp[x][y] = grid[x][y]\r\n\t\t\t\ty += 1\r\n\t\t\tx += 1\r\n\r\n\tfor x in range(1, n):\r\n\t\tif dp[x - 1][0] == n_inf:\r\n\t\t\tfor x1 in range(x, n):\r\n\t\t\t\tdp[x1][0] = n_inf\r\n\t\t\tbreak\r\n\t\tdp[x][0] += dp[x - 1][0]\r\n\r\n\tfor y in range(1, n):\r\n\t\tif dp[0][y - 1] == n_inf:\r\n\t\t\tfor y1 in range(y, n):\r\n\t\t\t\tdp[0][y1] = n_inf\r\n\t\t\tbreak\r\n\t\tdp[0][y] += dp[0][y - 1]\r\n\r\n\tfor x in range(1, n):\r\n\t\tfor y in range(1, n):\r\n\t\t\tm = max(dp[x - 1][y], dp[x][y - 1])\r\n\t\t\tdp[x][y] = m + dp[x][y] if m != n_inf else n_inf\r\n\r\n\tif dp[-1][-1] != n_inf:\r\n\t\tprint('YES')\r\n\t\tprint(str(dp[-1][-1]))\r\n\telse:\r\n\t\tprint('NO')\r\n\r\n\r\nmain()", "N, M = map(int,input().split())\ngrid = [[int(i) for i in input().split()]for j in range(N)]\ncharms = [[*map(int,input().split())] for i in range(M)]\n \ndp = [[None for n in range(N)] for m in range(N)]\n \ndp[0][0] = grid[0][0] # Base case\n \ndef valid_square(coord, charms):\n    # Checks to see if a square is valid\n    for charm in charms:\n        if abs(coord[0]+1 - charm[0])+abs(coord[1]+1 - charm[1]) <= charm[2]:\n            return True\n    return False\n \nfor y in range(N):\n    for x in range(N):\n        if valid_square((y,x), charms):\n            if y == 0:\n                if dp[y][x-1]:\n                    dp[y][x] = dp[y][x-1] + grid[y][x]\n            elif x == 0:\n                if dp[y-1][x]:\n                    dp[y][x] = dp[y-1][x] + grid[y][x]\n            else:\n                if dp[y-1][x] or dp[y][x-1]:\n                    dp[y][x] = grid[y][x]+max(dp[y][x-1]or 0,dp[y-1][x]or 0)\nif dp[N-1][N-1]:\n    print(\"YES\")\n    print(dp[N-1][N-1])\nelse:\n    print(\"NO\")", "# Little Red Riding Hood\r\n\r\n\r\ndef findMax(safePath,relBerries,collectedBerries,cx,cy,n,ans):\r\n\tif cx==n-1 and cy==n-1:\r\n\t\tans['reached']=True\r\n\t\tcollectedBerries+=relBerries[cx][cy]\r\n\t\tans['maxberries']=max(ans['maxberries'],collectedBerries)\r\n\telse:\r\n\t\tif collectedBerries<=ans['prev'][cx][cy]:\r\n\t\t\treturn\r\n\t\telse:\r\n\t\t\tans['prev'][cx][cy]=collectedBerries\r\n\t\tif cx!=n-1 and safePath[cx+1][cy]==1:\r\n\t\t\tfindMax(safePath,relBerries,collectedBerries+relBerries[cx][cy],cx+1,cy,n,ans)\r\n\t\tif cy!=n-1 and safePath[cx][cy+1]==1:\r\n\t\t\tfindMax(safePath,relBerries,collectedBerries+relBerries[cx][cy],cx,cy+1,n,ans)\r\n\r\n\r\n\r\nn,m=map(int,input().split())\r\nrelBerries=[]\r\nsafePaths=[]\r\nfor i in range(n):\r\n\tsafePaths.append([0]*n)\r\n\r\nfor i in range(n):\r\n\trelBerries.append(list(map(int,input().split())))\r\nfor i in range(m):\r\n\tx,y,s=map(int,input().split())\r\n\tx-=1\r\n\ty-=1\r\n\tfor j in range(0,s+1):\r\n\t\tif x-j>=0:\r\n\t\t\tsafePaths[x-j][y]=1\r\n\t\t\tfor z in range(1,s-j+1):\r\n\t\t\t\tif y+z<n:\r\n\t\t\t\t\tsafePaths[x-j][y+z]=1\r\n\t\t\t\telse:\r\n\t\t\t\t\tbreak\r\n\t\t\tfor z in range(1,s-j+1):\r\n\t\t\t\tif y-z>=0:\r\n\t\t\t\t\tsafePaths[x-j][y-z]=1\r\n\t\t\t\telse:\r\n\t\t\t\t\tbreak\r\n\r\n\t\tif x+j<n and j!=0:\r\n\t\t\tsafePaths[x+j][y]=1\r\n\t\t\tfor z in range(1,s-j+1):\r\n\t\t\t\tif y+z<n:\r\n\t\t\t\t\tsafePaths[x+j][y+z]=1\r\n\t\t\t\telse:\r\n\t\t\t\t\tbreak\r\n\t\t\tfor z in range(1,s-j+1):\r\n\t\t\t\tif y-z>=0:\r\n\t\t\t\t\tsafePaths[x+j][y-z]=1\r\n\t\t\t\telse:\r\n\t\t\t\t\tbreak\r\n\r\n\r\nans={}\r\nans['maxberries']=-100000000\r\nans['reached']=False\r\n\r\nans['prev']=[]\r\nfor i in range(n):\r\n\tans['prev'].append([-100000000]*n)\r\nfindMax(safePaths,relBerries,0,0,0,n,ans)\r\n\r\nif ans['reached']:\r\n\tprint('YES')\r\n\tprint(ans['maxberries'])\r\nelse:\r\n\tprint('NO')\r\n", "# cook your dish here\n\n# import time\nimport collections\n\n\ndef solve(n, m, grid, charms):\n    newGrid = [[[val, False] for val in row] for row in grid]\n\n    for x, y, k in charms:\n        newGrid[x][y][1] = True\n        queue = collections.deque([(x, y, 0)])\n        visited = set()\n        visited.add((x, y))\n\n        while queue:\n            currX, currY, cost = queue.popleft()\n\n            for delX, delY in [(-1, 0), (1, 0), (0, 1), (0, -1)]:\n                newX, newY = currX + delX, currY + delY\n\n                if 0 <= newX < n and 0 <= newY < n and (newX, newY) not in visited and cost < k:\n                    newGrid[newX][newY][1] = True\n                    visited.add((newX, newY))\n\n                    if cost + 1 <= k:\n                        queue.append((newX, newY, cost + 1))\n\n    # for row in newGrid:\n    #     print(row)\n\n    NEG_INF = float(\"-inf\")\n\n    dp = [[NEG_INF if not newGrid[i][j][1]\n           else newGrid[i][j][0] for j in range(n)] for i in range(n)]\n\n    # print(\"After\")\n    # for row in dp:\n    #     for val in row:\n    #         if val == NEG_INF:\n    #             print(0, end=\" \")\n    #         else:\n    #             print(1, end=\" \")\n    #     print()\n\n    # for row in dp:\n    #     print(row)\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[i][j] += dp[i][j-1]\n            elif j == 0:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] += max(dp[i-1][j], dp[i][j-1])\n\n    # print(\"After\")\n    # for row in dp:\n    #     print(row)\n\n    return (dp[n-1][n-1] != NEG_INF, dp[n-1][n-1])\n\n\n[n, m] = list(map(int, input().strip().split()))\n\ngrid = []\n\nfor i in range(n):\n    row = list(map(int, input().strip().split()))\n    grid.append(row)\n\ncharms = []\n\nfor i in range(m):\n    [x, y, k] = list(map(int, input().strip().split()))\n\n    charms.append((x-1, y-1, k))\n\n# start_time = time.time()\nans = solve(n, m, grid, charms)\n\nif ans[0]:\n    print(\"YES\")\n    print(ans[1])\nelse:\n    print(\"NO\")\n\n# print(\"--- %s seconds ---\" % (time.time() - start_time))\n", "\r\n# import time\r\nimport collections\r\n\r\n\r\ndef solve(n, m, grid, charms):\r\n    newGrid = [[[val, False] for val in row] for row in grid]\r\n\r\n    for x, y, k in charms:\r\n        newGrid[x][y][1] = True\r\n        queue = collections.deque([(x, y, 0)])\r\n        visited = set()\r\n        visited.add((x, y))\r\n\r\n        while queue:\r\n            currX, currY, cost = queue.popleft()\r\n\r\n            for delX, delY in [(-1, 0), (1, 0), (0, 1), (0, -1)]:\r\n                newX, newY = currX + delX, currY + delY\r\n\r\n                if 0 <= newX < n and 0 <= newY < n and (newX, newY) not in visited and cost < k:\r\n                    newGrid[newX][newY][1] = True\r\n                    visited.add((newX, newY))\r\n\r\n                    if cost + 1 <= k:\r\n                        queue.append((newX, newY, cost + 1))\r\n\r\n    # for row in newGrid:\r\n    #     print(row)\r\n\r\n    NEG_INF = float(\"-inf\")\r\n\r\n    dp = [[NEG_INF if not newGrid[i][j][1]\r\n           else newGrid[i][j][0] for j in range(n)] for i in range(n)]\r\n\r\n    # print(\"After\")\r\n    # for row in dp:\r\n    #     for val in row:\r\n    #         if val == NEG_INF:\r\n    #             print(0, end=\" \")\r\n    #         else:\r\n    #             print(1, end=\" \")\r\n    #     print()\r\n\r\n    # for row in dp:\r\n    #     print(row)\r\n\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i == 0 and j == 0:\r\n                continue\r\n            elif i == 0:\r\n                dp[i][j] += dp[i][j-1]\r\n            elif j == 0:\r\n                dp[i][j] += dp[i-1][j]\r\n            else:\r\n                dp[i][j] += max(dp[i-1][j], dp[i][j-1])\r\n\r\n    # print(\"After\")\r\n    # for row in dp:\r\n    #     print(row)\r\n\r\n    return (dp[n-1][n-1] != NEG_INF, dp[n-1][n-1])\r\n\r\n\r\n[n, m] = list(map(int, input().strip().split()))\r\n\r\ngrid = []\r\n\r\nfor i in range(n):\r\n    row = list(map(int, input().strip().split()))\r\n    grid.append(row)\r\n\r\ncharms = []\r\n\r\nfor i in range(m):\r\n    [x, y, k] = list(map(int, input().strip().split()))\r\n\r\n    charms.append((x-1, y-1, k))\r\n\r\n# start_time = time.time()\r\nans = solve(n, m, grid, charms)\r\n\r\nif ans[0]:\r\n    print(\"YES\")\r\n    print(ans[1])\r\nelse:\r\n    print(\"NO\")\r\n\r\n# print(\"--- %s seconds ---\" % (time.time() - start_time))\r\n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\r\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\r\nipnl = lambda n: [int(input()) for _ in range(n)]\r\ninp = lambda :int(input())\r\nip = lambda :[int(w) for w in input().split()]\r\n\r\nn,m = ip()\r\ngrid = []\r\nfor i in range(n):\r\n    grid.append(ip())\r\nmat = [[0 for i in range(n+1)] for j in range(n+1)]\r\nfor _ in range(m):\r\n    a,b,k = ip()\r\n    f = 0\r\n    for j in range(b-k,b+k+1):\r\n        if 0<j<=n:\r\n            for i in range(a-f,a+f+1):\r\n                if 0<i<=n:\r\n                    mat[i][j] = 1\r\n        if j < b:\r\n            f += 1\r\n        else:\r\n            f -= 1\r\nfor i in range(n+1):\r\n    mat[i][0] = -1\r\n    mat[0][i] = -1\r\ngrid.insert(0,[float('-inf') for i in range(n)])\r\nfor i in range(len(grid)):\r\n    grid[i].insert(0,float('-inf'))\r\nfor i in range(1,n+1):\r\n    for j in range(1,n+1):\r\n        if mat[i-1][j] == 0 and mat[i][j-1] == 0:\r\n            mat[i][j] = 0\r\n        else:\r\n            a,b = float('-inf'),float('-inf')\r\n            if mat[i-1][j] != 0:\r\n                a = grid[i-1][j]\r\n            if mat[i][j-1] != 0:\r\n                b = grid[i][j-1]\r\n            if not (i == 1 and j == 1):\r\n                grid[i][j] += max(a,b)\r\nif mat[-1][-1] == 0 or mat[1][1] == 0:\r\n    print(\"NO\")\r\nelse:\r\n    print(\"YES\")\r\n    print(grid[-1][-1])\r\n\r\n", "import numpy as np\r\n\r\nn,mC = [int(i) for i in input().split()]\r\narr = np.array([[int(i) for i in input().split()] for j in range(n)] )\r\ncharms = [[int(i) for i in input().split()] for j in range(mC)]\r\n\r\nblock = 1001\r\nsafeArr = np.full((n,n),block)\r\ninBounds = lambda ind: 0<=ind<n\r\n\r\nfor charm in charms:\r\n    x,y,stg = charm\r\n    x-=1\r\n    y-=1\r\n    \r\n    maxWidth = stg*2+1\r\n\r\n    seqX = []\r\n    seqY = []\r\n    ct = x-stg\r\n    for i in range(maxWidth):\r\n        l = stg-abs(stg-i)\r\n        seqX.extend([ct]*(l*2+1))\r\n        seqY.extend(list(range(y-l,y+l+1)))\r\n        ct+=1\r\n    \r\n    safeCoords = np.array(list(filter(lambda x: inBounds(x[0]) and inBounds(x[1]), zip(seqX,seqY) )))\r\n    finalCoords = (safeCoords[:,0],safeCoords[:,1])\r\n    safeArr[finalCoords] = arr[finalCoords] # acceptable places\r\n\r\nif (safeArr[0,0]==block) or (safeArr[-1,-1]==block):\r\n    print('NO')\r\nelse:\r\n    prevRow = safeArr[0].copy()\r\n    for j in range(1,n):\r\n        left = prevRow[j-1]\r\n        if prevRow[j] != block:\r\n            if left == block:\r\n                prevRow[j] = block\r\n            else:\r\n                prevRow[j] += left\r\n    \r\n    for i in range(1,n):\r\n        thisRow = safeArr[i].copy()\r\n        if thisRow[0]!=block:\r\n            if prevRow[0] == block:\r\n                thisRow[0] = block\r\n            else:\r\n                thisRow[0] += prevRow[0]\r\n                \r\n        for j in range(1,n):\r\n            up = prevRow[j]\r\n            left = thisRow[j-1]           \r\n            if thisRow[j] != block:\r\n                if up == block:\r\n                    if left == block:\r\n                        thisRow[j] = block\r\n                    else:\r\n                        thisRow[j] += left\r\n                elif left == block:\r\n                    thisRow[j] += up\r\n                else:\r\n                    thisRow[j] += max(up, left)                \r\n            \r\n        prevRow = thisRow[:]\r\n    final = prevRow[-1]\r\n    if final == block:\r\n        print('NO')\r\n    else:\r\n        print('YES')\r\n        print(final)\r\n", "def main():\r\n\tfrom sys import stdin, stdout\r\n\trl = stdin.readline\r\n\r\n\tn, m = (int(x) for x in rl().split())\r\n\tgrid = [[int(x) for x in rl().split()] for _ in range(n)]\r\n\tcharms = [[int(x) for x in rl().split()] for _ in range(m)]\r\n\r\n\tn_inf = -9999\r\n\tdp = [[n_inf] * n for _ in range(n)]\r\n\r\n\tfor c in charms:\r\n\t\tc[0] -= 1\r\n\t\tc[1] -= 1\r\n\r\n\t\tx = max(0, c[0] - c[2])\r\n\t\twhile x < n and x <= c[0] + c[2]:\r\n\t\t\toff = abs(x - c[0])\r\n\t\t\ty = max(0, c[1] - c[2] + off)\r\n\t\t\twhile y < n and y <= c[1] + c[2] - off:\r\n\t\t\t\tdp[x][y] = grid[x][y]\r\n\t\t\t\ty += 1\r\n\t\t\tx += 1\r\n\r\n\tfor x in range(1, n):\r\n\t\tif dp[x - 1][0] == n_inf:\r\n\t\t\tfor x1 in range(x, n):\r\n\t\t\t\tdp[x1][0] = n_inf\r\n\t\t\tbreak\r\n\t\tdp[x][0] += dp[x - 1][0]\r\n\r\n\tfor y in range(1, n):\r\n\t\tif dp[0][y - 1] == n_inf:\r\n\t\t\tfor y1 in range(y, n):\r\n\t\t\t\tdp[0][y1] = n_inf\r\n\t\t\tbreak\r\n\t\tdp[0][y] += dp[0][y - 1]\r\n\r\n\tfor x in range(1, n):\r\n\t\tfor y in range(1, n):\r\n\t\t\tm = max(dp[x - 1][y], dp[x][y - 1])\r\n\t\t\tdp[x][y] = m + dp[x][y] if m != n_inf else n_inf\r\n\r\n\tif dp[-1][-1] != n_inf:\r\n\t\tstdout.write('YES\\n')\r\n\t\tstdout.write(str(dp[-1][-1]))\r\n\telse:\r\n\t\tstdout.write('NO')\r\n\r\n\r\nmain()", "def main():\r\n\tfrom sys import stdin, stdout\r\n\trl = stdin.readline\r\n\r\n\tn, m = (int(x) for x in rl().split())\r\n\tgrid = [[int(x) for x in rl().split()] for _ in range(n)]\r\n\tcharms = [[int(x) for x in rl().split()] for _ in range(m)]\r\n\r\n\tn_inf = -9999\r\n\tdp = [[n_inf] * n for _ in range(n)]\r\n\r\n\tfor c in charms:\r\n\t\tc[0] -= 1\r\n\t\tc[1] -= 1\r\n\r\n\t\tx = max(0, c[0] - c[2])\r\n\t\twhile x < n and x <= c[0] + c[2]:\r\n\t\t\toff = abs(x - c[0])\r\n\t\t\ty = max(0, c[1] - c[2] + off)\r\n\t\t\twhile y < n and y <= c[1] + c[2] - off:\r\n\t\t\t\tdp[x][y] = grid[x][y]\r\n\t\t\t\ty += 1\r\n\t\t\tx += 1\r\n\r\n\tfor x in range(1, n):\r\n\t\tif dp[x - 1][0] == n_inf:\r\n\t\t\tfor x1 in range(x, n):\r\n\t\t\t\tdp[x1][0] = n_inf\r\n\t\t\tbreak\r\n\t\tdp[x][0] += dp[x - 1][0]\r\n\r\n\tfor y in range(1, n):\r\n\t\tif dp[0][y - 1] == n_inf:\r\n\t\t\tfor y1 in range(y, n):\r\n\t\t\t\tdp[0][y1] = n_inf\r\n\t\t\tbreak\r\n\t\tdp[0][y] += dp[0][y - 1]\r\n\r\n\tfor x in range(1, n):\r\n\t\tfor y in range(1, n):\r\n\t\t\tm = max(dp[x - 1][y], dp[x][y - 1])\r\n\t\t\tdp[x][y] = m + dp[x][y] if m != n_inf else n_inf\r\n\r\n\tif dp[-1][-1] != n_inf:\r\n\t\tstdout.write('YES\\n')\r\n\t\tstdout.write(str(dp[-1][-1]))\r\n\telse:\r\n\t\tstdout.write('NO')\r\n\r\n\r\nmain()", "def main():\r\n    from sys import stdin, stdout\r\n    rl = stdin.readline\r\n\r\n    n, m = (int(x) for x in rl().split())\r\n    grid = [[int(x) for x in rl().split()] for _ in range(n)]\r\n    charms = [[int(x) for x in rl().split()] for _ in range(m)]\r\n\r\n    n_inf = -9999\r\n    dp = [[n_inf] * n for _ in range(n)]\r\n   \r\n    for c in charms:\r\n        c[0] -= 1\r\n        c[1] -= 1\r\n\r\n        x = max(0, c[0] - c[2])\r\n        while x < n and x <= c[0] + c[2]:\r\n            off = abs(x - c[0])\r\n            y = max(0, c[1] - c[2] + off)\r\n            while y < n and y <= c[1] + c[2] - off:\r\n                dp[x][y] = grid[x][y]\r\n                y += 1\r\n            x += 1\r\n   \r\n    for x in range(1, n):\r\n        if dp[x - 1][0] == n_inf:\r\n            for x1 in range(x, n):\r\n                dp[x1][0] = n_inf\r\n            break\r\n        dp[x][0] += dp[x - 1][0]\r\n   \r\n    for y in range(1, n):\r\n        if dp[0][y - 1] == n_inf:\r\n            for y1 in range(y, n):\r\n                dp[0][y1] = n_inf\r\n            break\r\n        dp[0][y] += dp[0][y - 1]\r\n    \r\n    for x in range(1, n):\r\n        for y in range(1, n):\r\n            m = max(dp[x - 1][y], dp[x][y - 1])\r\n            dp[x][y] = m + dp[x][y] if m != n_inf else n_inf\r\n\r\n    if dp[-1][-1] != n_inf:\r\n        stdout.write('YES\\n')\r\n        stdout.write(str(dp[-1][-1]))\r\n    else:\r\n        stdout.write('NO')\r\n\r\n\r\nmain()", "def main():\r\n    from sys import stdin, stdout\r\n    rl = stdin.readline\r\n\r\n    n, m = (int(x) for x in rl().split())\r\n    grid = [[int(x) for x in rl().split()] for _ in range(n)]\r\n    charms = [[int(x) for x in rl().split()] for _ in range(m)]\r\n\r\n    n_inf = -9999\r\n    dp = [[n_inf] * n for _ in range(n)]\r\n\r\n    for c in charms:\r\n        c[0] -= 1\r\n        c[1] -= 1\r\n\r\n        x = max(0, c[0] - c[2])\r\n        while x < n and x <= c[0] + c[2]:\r\n            off = abs(x - c[0])\r\n            y = max(0, c[1] - c[2] + off)\r\n            while y < n and y <= c[1] + c[2] - off:\r\n                dp[x][y] = grid[x][y]\r\n                y += 1\r\n            x += 1\r\n\r\n    for x in range(1, n):\r\n        if dp[x - 1][0] == n_inf:\r\n            for x1 in range(x, n):\r\n                dp[x1][0] = n_inf\r\n            break\r\n        dp[x][0] += dp[x - 1][0]\r\n\r\n    for y in range(1, n):\r\n        if dp[0][y - 1] == n_inf:\r\n            for y1 in range(y, n):\r\n                dp[0][y1] = n_inf\r\n            break\r\n        dp[0][y] += dp[0][y - 1]\r\n\r\n    for x in range(1, n):\r\n        for y in range(1, n):\r\n            m = max(dp[x - 1][y], dp[x][y - 1])\r\n            dp[x][y] = m + dp[x][y] if m != n_inf else n_inf\r\n\r\n    if dp[-1][-1] != n_inf:\r\n        stdout.write('YES\\n')\r\n        stdout.write(str(dp[-1][-1]))\r\n    else:\r\n        stdout.write('NO')\r\n\r\n\r\nmain()", "def main():\r\n    from sys import stdin, stdout\r\n    rl = stdin.readline\r\n\r\n    n, m = (int(x) for x in rl().split())\r\n    grid = [[int(x) for x in rl().split()] for _ in range(n)]\r\n    charms = [[int(x) for x in rl().split()] for _ in range(m)]\r\n\r\n    n_inf = -9999\r\n    dp = [[n_inf] * n for _ in range(n)]\r\n\r\n    for c in charms:\r\n        c[0] -= 1\r\n        c[1] -= 1\r\n\r\n        x = max(0, c[0] - c[2])\r\n        while x < n and x <= c[0] + c[2]:\r\n            off = abs(x - c[0])\r\n            y = max(0, c[1] - c[2] + off)\r\n            while y < n and y <= c[1] + c[2] - off:\r\n                dp[x][y] = grid[x][y]\r\n                y += 1\r\n            x += 1\r\n\r\n    for x in range(1, n):\r\n        if dp[x - 1][0] == n_inf:\r\n            for x1 in range(x, n):\r\n                dp[x1][0] = n_inf\r\n            break\r\n        dp[x][0] += dp[x - 1][0]\r\n\r\n    for y in range(1, n):\r\n        if dp[0][y - 1] == n_inf:\r\n            for y1 in range(y, n):\r\n                dp[0][y1] = n_inf\r\n            break\r\n        dp[0][y] += dp[0][y - 1]\r\n\r\n    for x in range(1, n):\r\n        for y in range(1, n):\r\n            m = max(dp[x - 1][y], dp[x][y - 1])\r\n            dp[x][y] = m + dp[x][y] if m != n_inf else n_inf\r\n\r\n    if dp[-1][-1] != n_inf:\r\n        stdout.write('YES\\n')\r\n        stdout.write(str(dp[-1][-1]))\r\n    else:\r\n        stdout.write('NO')\r\n\r\n\r\nmain()", "def main():\r\n    from sys import stdin, stdout\r\n    rl = stdin.readline\r\n\r\n    n, m = (int(x) for x in rl().split())\r\n    grid = [[int(x) for x in rl().split()] for _ in range(n)]\r\n    charms = [[int(x) for x in rl().split()] for _ in range(m)]\r\n\r\n    n_inf = -9999\r\n    dp = [[n_inf] * n for _ in range(n)]\r\n\r\n    for c in charms:\r\n        c[0] -= 1\r\n        c[1] -= 1\r\n\r\n        x = max(0, c[0] - c[2])\r\n        while x < n and x <= c[0] + c[2]:\r\n            off = abs(x - c[0])\r\n            y = max(0, c[1] - c[2] + off)\r\n            while y < n and y <= c[1] + c[2] - off:\r\n                dp[x][y] = grid[x][y]\r\n                y += 1\r\n            x += 1\r\n\r\n    for x in range(1, n):\r\n        if dp[x - 1][0] == n_inf:\r\n            for x1 in range(x, n):\r\n                dp[x1][0] = n_inf\r\n            break\r\n        dp[x][0] += dp[x - 1][0]\r\n\r\n    for y in range(1, n):\r\n        if dp[0][y - 1] == n_inf:\r\n            for y1 in range(y, n):\r\n                dp[0][y1] = n_inf\r\n            break\r\n        dp[0][y] += dp[0][y - 1]\r\n\r\n    for x in range(1, n):\r\n        for y in range(1, n):\r\n            m = max(dp[x - 1][y], dp[x][y - 1])\r\n            dp[x][y] = m + dp[x][y] if m != n_inf else n_inf\r\n\r\n    if dp[-1][-1] != n_inf:\r\n        stdout.write('YES\\n')\r\n        stdout.write(str(dp[-1][-1]))\r\n    else:\r\n        stdout.write('NO')\r\n\r\n\r\nmain()", "n , m = map(int, input().split())\r\ngrid = []\r\ngrid_charm = []\r\ncost = []\r\nfor i in range(n):\r\n\thehe = [0 for jj in range(n)]\r\n\tmaggi = [0 for jj in range(n)]\r\n\trow = list(map(int , input().split()))\r\n\tgrid.append(row)\r\n\tgrid_charm.append(hehe)\r\n\tcost.append(maggi)\r\n\r\nfor i in range(m):\r\n\tx , y , k = map(int, input().split())\r\n\tx , y = x-1 , y-1\r\n\tfor j in range(k+1):\r\n\t\tfor z in range(k +1):\r\n\t\t\tif not j + z  <= k:\r\n\t\t\t\tbreak \r\n\t\t\talpha , beta , gamma, lol = x-j , y-z , x + j , y + z\r\n\t\t\tif alpha >=0:\r\n\t\t\t\tif beta >=0:\r\n\t\t\t\t\tgrid_charm[alpha][beta] = 1\r\n\t\t\t\tif lol < n:\r\n\t\t\t\t\tgrid_charm[alpha][lol] = 1\r\n\t\t\tif beta >= 0:\r\n\t\t\t\tif gamma < n:\r\n\t\t\t\t\tgrid_charm[gamma][beta] = 1\r\n\t\t\tif gamma < n:\r\n\t\t\t\tif lol < n:\r\n\t\t\t\t\tgrid_charm[gamma][lol] = 1\r\n\r\n\r\n# for i in grid_charm:\r\n# \tprint(*i)\r\ncost[0][0] = grid[0][0]\t\r\nfor i in range(n):\r\n\tfor j in range(n):\r\n\t\tlol = -999999999999\r\n\r\n\t\tif i > 0:\r\n\t\t\tif grid_charm[i-1][j] == 1 and cost[i-1][j] != -999999999999:\r\n\t\t\t\tlol = max(lol , grid[i][j] + cost[i-1][j])\r\n\r\n\t\tif j > 0:\r\n\t\t\tif grid_charm[i][j-1] == 1 and cost[i][j-1] != -999999999999:\r\n\t\t\t\tlol = max(lol , grid[i][j] + cost[i][j-1])\r\n\r\n\r\n\t\tif grid_charm[i][j] == 0:\r\n\t\t\tcost[i][j] = -999999999999\r\n\t\telse:\r\n\t\t\tif not(i == 0 and j ==0):\r\n\t\t\t\tcost[i][j] = lol\r\n\r\n# for i in cost:\r\n# \tprint(*i)\r\nif cost[n-1][n-1] == -999999999999:\r\n\tprint('NO')\r\nelse:\r\n\tprint('YES')\r\n\tprint(cost[n-1][n-1])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "n , m = map(int, input().split())\r\ngrid = []\r\ngrid_charm = []\r\ncost = []\r\nfor i in range(n):\r\n\thehe = [0 for i in range(n)]\r\n\tmaggi = [0 for i in range(n)]\r\n\trow = list(map(int , input().split()))\r\n\tgrid.append(row)\r\n\tgrid_charm.append(hehe)\r\n\tcost.append(maggi)\r\n\r\nfor i in range(m):\r\n\tx , y , k = map(int, input().split())\r\n\tx , y = x-1 , y-1\r\n\tfor j in range(k+1):\r\n\t\tfor z in range(k +1):\r\n\t\t\tif not j + z  <= k:\r\n\t\t\t\tbreak \r\n\t\t\talpha , beta , gamma, lol = x-j , y-z , x + j , y + z\r\n\t\t\tif alpha >=0:\r\n\t\t\t\tif beta >=0:\r\n\t\t\t\t\tgrid_charm[alpha][beta] = 1\r\n\t\t\t\tif lol < n:\r\n\t\t\t\t\tgrid_charm[alpha][lol] = 1\r\n\t\t\tif beta >= 0:\r\n\t\t\t\tif gamma < n:\r\n\t\t\t\t\tgrid_charm[gamma][beta] = 1\r\n\t\t\tif gamma < n:\r\n\t\t\t\tif lol < n:\r\n\t\t\t\t\tgrid_charm[gamma][lol] = 1\r\n\r\n\r\n# for i in grid_charm:\r\n# \tprint(*i)\r\ncost[0][0] = grid[0][0]\t\r\nfor i in range(n):\r\n\tfor j in range(n):\r\n\t\tlol = -999999999999\r\n\t\tif i > 0:\r\n\t\t\tif grid_charm[i-1][j] == 1:\r\n\t\t\t\tlol = grid[i][j] + cost[i-1][j]\r\n\r\n\t\tif j > 0:\r\n\t\t\tif grid_charm[i][j-1] == 1:\r\n\t\t\t\tlol = max(lol , grid[i][j] + cost[i][j-1])\r\n\r\n\r\n\t\tif grid_charm[i][j] == 0:\r\n\t\t\tcost[i][j] = -999999999999\r\n\t\telse:\r\n\t\t\tif not(i == 0 and j ==0):\r\n\t\t\t\tcost[i][j] = lol\r\n\r\n# for i in cost:\r\n# \tprint(*i)\r\nif cost[n-1][n-1] == -999999999999:\r\n\tprint('NO')\r\nelse:\r\n\tprint('YES')\r\n\tprint(cost[n-1][n-1])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "n , m = map(int, input().split())\r\ngrid = []\r\ngrid_charm = []\r\ncost = []\r\nfor i in range(n):\r\n\thehe = [0 for i in range(n)]\r\n\tmaggi = [0 for i in range(n)]\r\n\trow = list(map(int , input().split()))\r\n\tgrid.append(row)\r\n\tgrid_charm.append(hehe)\r\n\tcost.append(maggi)\r\n\r\nfor i in range(m):\r\n\tx , y , k = map(int, input().split())\r\n\tx , y = x-1 , y-1\r\n\tfor j in range(k+1):\r\n\t\tfor z in range(k +1):\r\n\t\t\tif not j + z  <= k:\r\n\t\t\t\tbreak \r\n\t\t\talpha , beta , gamma, lol = x-j , y-z , x + j , y + z\r\n\t\t\tif alpha >=0:\r\n\t\t\t\tif beta >=0:\r\n\t\t\t\t\tgrid_charm[alpha][beta] = 1\r\n\t\t\t\tif lol < n:\r\n\t\t\t\t\tgrid_charm[alpha][lol] = 1\r\n\t\t\tif beta >= 0:\r\n\t\t\t\tif gamma < n:\r\n\t\t\t\t\tgrid_charm[gamma][beta] = 1\r\n\t\t\tif gamma < n:\r\n\t\t\t\tif lol < n:\r\n\t\t\t\t\tgrid_charm[gamma][lol] = 1\r\n\r\n\r\n# for i in grid_charm:\r\n# \tprint(*i)\r\ncost[0][0] = grid[0][0]\t\r\nfor i in range(n):\r\n\tfor j in range(n):\r\n\t\tlol = -999999999999\r\n\t\tif i > 0:\r\n\t\t\tif grid_charm[i-1][j] == 1:\r\n\t\t\t\tlol = grid[i][j] + cost[i-1][j]\r\n\r\n\t\tif j > 0:\r\n\t\t\tif grid_charm[i][j-1] == 1:\r\n\t\t\t\tlol = max(lol , grid[i][j] + cost[i][j-1])\r\n\r\n\t\tif not(i == 0 and j ==0):\r\n\t\t\tcost[i][j] = lol\r\n\r\n\r\nif cost[n-1][n-1] == -999999999999:\r\n\tprint('NO')\r\nelse:\r\n\tprint('YES')\r\n\tprint(cost[n-1][n-1])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "def valid(i, j):\r\n    return 0 <= i < n and 0 <= j < n\r\n\r\nn, m = map(int, input().split())\r\n\r\na = [list(map(int, input().split())) for _ in range(n)]\r\n\r\ng = [[-float('inf')] * n for _ in range(n)]\r\n\r\nfor _ in range(m):\r\n    x, y, p = map(int, input().split())\r\n    x -= 1\r\n    y -= 1\r\n\r\n    for i in range(p + 1):\r\n        for j in range(p - i + 1):\r\n            if valid(x + i, y + j): g[x + i][y + j] = 0\r\n            if valid(x - i, y + j): g[x - i][y + j] = 0\r\n            if valid(x + i, y - j): g[x + i][y - j] = 0\r\n            if valid(x - i, y - j): g[x - i][y - j] = 0\r\n\r\nif g[0][0] != 0:\r\n    print('NO')\r\n    quit()\r\n\r\ng[0][0] = a[0][0]\r\n\r\nfor i in range(n):\r\n    for j in range(n):\r\n        if g[i][j] == 0:\r\n            k = float('-inf')\r\n\r\n            if valid(i - 1, j) and g[i - 1][j] > k:\r\n                k = g[i - 1][j]\r\n\r\n            if valid(i, j - 1) and g[i][j - 1] > k:\r\n                k = g[i][j - 1]\r\n\r\n            g[i][j] = k + a[i][j]\r\n\r\nif g[n-1][n-1] == float('-inf'):\r\n    print('NO')\r\nelse:\r\n    print('YES')\r\n    print(g[-1][-1])\r\n", "# cook your dish here\nimport numpy as np\nn,m = map(int,input().split())\ndp = np.zeros((n,n))\nforest = np.zeros((n,n))\nfor i in range(n):\n  forest[i] = list(map(int,input().split()))\nfor i in range(m):\n  x,y,z = map(int,input().split())\n  x -= 1\n  y -= 1\n  for i in range(0,z+1):\n    dp[max(x-i,0)][max(y-(z-i),0):min(y+(z-i)+1,n)]=1\n    dp[min(x+i,n-1)][max(y-(z-i),0):min(y+(z-i)+1,n)]=1\nfor i in range(n):\n  for j in range(n):\n    if dp[i][j]!=1:\n      forest[i][j] = -np.inf\nfor i in range(n-1,-1,-1):\n  for j in range(n-1,-1,-1):\n    if j==n-1:\n      if i==n-1:\n        dp[i][j] = forest[i][j]\n      else:\n        dp[i][j] = forest[i][j] + dp[i+1][j]\n    elif i==n-1:\n      dp[i][j] = forest[i][j] + dp[i][j+1]\n    else:\n      dp[i][j] = forest[i][j] + max(dp[i+1][j],dp[i][j+1])\nif dp[0][0] > -np.inf:\n  print(\"YES\")\n  print(int(dp[0][0]))\nelse:\n  print(\"NO\")\n", "def main():\r\n\tfrom sys import stdin, stdout\r\n\trl = stdin.readline\r\n\r\n\tn, m = (int(x) for x in rl().split())\r\n\tgrid = [[int(x) for x in rl().split()] for _ in range(n)]\r\n\tcharms = [[int(x) for x in rl().split()] for _ in range(m)]\r\n\r\n\tn_inf = -9999\r\n\tdp = [[n_inf] * n for _ in range(n)]\r\n\r\n\tfor c in charms:\r\n\t\tc[0] -= 1\r\n\t\tc[1] -= 1\r\n\r\n\t\tx = max(0, c[0] - c[2])\r\n\t\twhile x < n and x <= c[0] + c[2]:\r\n\t\t\toff = abs(x - c[0])\r\n\t\t\ty = max(0, c[1] - c[2] + off)\r\n\t\t\twhile y < n and y <= c[1] + c[2] - off:\r\n\t\t\t\tdp[x][y] = grid[x][y]\r\n\t\t\t\ty += 1\r\n\t\t\tx += 1\r\n\r\n\tfor x in range(1, n):\r\n\t\tif dp[x - 1][0] == n_inf:\r\n\t\t\tfor x1 in range(x, n):\r\n\t\t\t\tdp[x1][0] = n_inf\r\n\t\t\tbreak\r\n\t\tdp[x][0] += dp[x - 1][0]\r\n\r\n\tfor y in range(1, n):\r\n\t\tif dp[0][y - 1] == n_inf:\r\n\t\t\tfor y1 in range(y, n):\r\n\t\t\t\tdp[0][y1] = n_inf\r\n\t\t\tbreak\r\n\t\tdp[0][y] += dp[0][y - 1]\r\n\r\n\tfor x in range(1, n):\r\n\t\tfor y in range(1, n):\r\n\t\t\tm = max(dp[x - 1][y], dp[x][y - 1])\r\n\t\t\tdp[x][y] = m + dp[x][y] if m != n_inf else n_inf\r\n\r\n\tif dp[-1][-1] != n_inf:\r\n\t\tstdout.write('YES\\n')\r\n\t\tstdout.write(str(dp[-1][-1]))\r\n\telse:\r\n\t\tstdout.write('NO')\r\n\r\n\r\nmain()\r\n"]