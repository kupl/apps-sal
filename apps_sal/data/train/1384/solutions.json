["for _ in range(int(input())):\n\n n, k = map(int, input().split())\n l = [*map(int, input())]\n\n count = [0] * (n + 1)\n\n for i in range(n - 1, -1, -1):\n  if l[i] == 1:\n   count[i] = count[i + 1] + 1\n\n x,y = 0,0\n for i in range(n):\n  if l[i] == 1:\n   x += 1\n  else:\n   try:\n    y = max(y, x + k + count[i + k])\n\n   except:\n    y = max(y, x + min(k, n - i))\n   x = 0\n  y = max(y,x)\n print(y)", "def pizzatime(s,a,k):\n cont1,m_time=0,0\n for i in range(len(s)):\n  if(s[i]=='1'):\n   cont1+=1\n  else:\n   try:\n    m_time=max(m_time,cont1+k+a[i+k])\n   except:\n    m_time=max(m_time,cont1+min(k,len(s)-i))\n   cont1=0\n m_time=max(m_time,cont1)\n return m_time\n   \n  \nfor T in range(int(input())):\n n,k=list(map(int,input().split()))\n s=input()\n\n all_1=[0]*(n+1)\n check=True\n for ind in range(len(s)-1,-1,-1):\n  if(s[ind]=='1'):\n   all_1[ind]+=(all_1[ind+1]+1)\n   \n print(pizzatime(s,all_1,k))\n", "def pizzatime(s,a,k):\n cont1,m_time=0,0\n for i in range(len(s)):\n  if(s[i]=='1'):\n   cont1+=1\n  else:\n   try:\n    m_time=max(m_time,cont1+k+a[i+k])\n   except:\n    m_time=max(m_time,cont1+min(k,len(s)-i))\n   cont1=0\n m_time=max(m_time,cont1)\n return m_time\n   \n  \nfor T in range(int(input())):\n n,k=list(map(int,input().split()))\n s=input()\n\n all_1=[0]*(n+1)\n check=True\n for ind in range(len(s)-1,-1,-1):\n  if(s[ind]=='1'):\n   all_1[ind]+=(all_1[ind+1]+1)\n   \n print(pizzatime(s,all_1,k))\n", "def pizzatime(s,a,k):\n cont1,m_time=0,0\n for i in range(len(s)):\n  if(s[i]=='1'):\n   cont1+=1\n  else:\n   try:\n    m_time=max(m_time,cont1+k+a[i+k])\n   except:\n    m_time=max(m_time,cont1+min(k,len(s)-i))\n   cont1=0\n m_time=max(m_time,cont1)\n return m_time\n   \n  \nfor T in range(int(input())):\n n,k=list(map(int,input().split()))\n s=input()\n\n all_1=[0]*(n+1)\n check=True\n for ind in range(len(s)-1,-1,-1):\n  if(s[ind]=='1'):\n   all_1[ind]+=(all_1[ind+1]+1)\n   \n print(pizzatime(s,all_1,k))\n", "def pizzatime(s,a,k):\n cont1,m_time=0,0\n for i in range(len(s)):\n  if(s[i]=='1'):\n   cont1+=1\n  else:\n   try:\n    m_time=max(m_time,cont1+k+a[i+k])\n   except:\n    m_time=max(m_time,cont1+min(k,len(s)-i))\n   cont1=0\n m_time=max(m_time,cont1)\n return m_time\n   \n  \nfor T in range(int(input())):\n n,k=list(map(int,input().split()))\n s=input()\n\n all_1=[0]*(n+1)\n check=True\n for ind in range(len(s)-1,-1,-1):\n  if(s[ind]=='1'):\n   all_1[ind]+=(all_1[ind+1]+1)\n   \n print(pizzatime(s,all_1,k))\n", "def pizzatime(s,a,k):\n cont1,m_time=0,0\n for i in range(len(s)):\n  if(s[i]=='1'):\n   cont1+=1\n  else:\n   try:\n    m_time=max(m_time,cont1+k+a[i+k])\n   except:\n    m_time=max(m_time,cont1+min(k,len(s)-i))\n   cont1=0\n m_time=max(m_time,cont1)\n return m_time\n   \n  \nfor T in range(int(input())):\n n,k=list(map(int,input().split()))\n s=input()\n\n all_1=[0]*(n+1)\n check=True\n for ind in range(len(s)-1,-1,-1):\n  if(s[ind]=='1'):\n   all_1[ind]+=(all_1[ind+1]+1)\n   \n print(pizzatime(s,all_1,k))\n", "for _ in range(int(input())):\n (n,k)=(int(x) for x in input().split())\n a = input()\n hidari=[0]*n\n migi=[0]*n\n for i in range(n-k+1):\n  loli=i\n  i-=1\n  num=0\n  while i>=0:\n   if a[i]==\"1\":\n    num+=1\n    i-=1\n   else:\n    break\n  hidari[loli]=num\n for j in range(k-1,n):\n  kaori=j\n  j+=1\n  num=0\n  while j<=n-1:\n   if a[j]==\"1\":\n    num+=1\n    j+=1\n   else:\n    break\n  migi[kaori]=num\n if (n==k):\n  print(n)\n else:\n  max=0\n  for i in range(n-k+1):\n   if max<hidari[i]+k+migi[i+k-1]:\n    max=hidari[i]+k+migi[i+k-1]\n  print(max)\n", "for _ in range(int(input())):\n n,k = map(int,input().split())\n arr = str(input())\n m = 0\n for i in range(n-k+1):\n  count,j,l = k,i-1,i+k\n  while j > -1 and j < n :\n   if arr[j] == '1' :\n    count,j = count + 1,j-1\n   else :\n    break\n  while l < n and l > -1 :\n   if arr[l] == '1' :\n    count,l = count + 1,l + 1\n   else :\n    break\n  m = max(m,count)\n print(m)", "for _ in range(int(input())):\n n,k = list(map(int,input().split()))\n arr = str(input())\n m = 0\n for i in range(n-k+1):\n  count = k\n  j = i-1\n  while j > -1 and j < n :\n   if arr[j] == '1' :\n    count += 1\n    j -= 1\n   else :\n    break\n  l = i+k\n  while l < n and l > -1 :\n   if arr[l] == '1' :\n    count += 1\n    l += 1\n   else :\n    break\n  if count > m :\n   m = count\n print(m)\n   \n", "# cook your dish here\nfor _ in range(int(input())):\n n,k=map(int,input().split())\n s=input()\n m=k\n head=[0]*n\n tail=[0]*n\n head[0]=0\n tail[-1]=0\n for i in range(1,n):\n  if s[i-1]=='1':\n   head[i]=1+head[i-1]\n for i in range(n-2,-1,-1):\n  if s[i+1]=='1':\n   tail[i]=1+tail[i+1]\n i=0\n \n while(i+k<=n):\n  c=head[i]+k+tail[i+k-1]\n  m=max(m,c)\n  i+=1\n print(m)", "# cook your dish here\nfor _ in range(int(input())):\n n,k=map(int,input().split())\n s=input()\n m=k\n head=[0]*n\n tail=[0]*n\n head[0]=0\n tail[-1]=0\n for i in range(1,n):\n  if s[i-1]=='1':\n   head[i]=1+head[i-1]\n for i in range(n-2,-1,-1):\n  if s[i+1]=='1':\n   tail[i]=1+tail[i+1]\n i=0\n \n while(i+k<=n):\n  c=head[i]+k+tail[i+k-1]\n  m=max(m,c)\n  i+=1\n print(m)", "num = int(input())\n\nt=0\nwhile(t<num):\n n,k = list(map(int,input().split()))\n s = str(input())\n\n count=0\n\n pos=[]\n for i in range(n):\n  if(s[i]==\"0\"):\n   pos.append(i)\n \n for i in range(len(pos)):\n  ind = pos[i]\n  val=0\n\n  if(ind-k+1<0):\n   val+=ind+1\n  else:\n   val+=k\n   bn=ind-k\n   while(bn>=0):\n    if(s[bn]==\"1\"):\n     val+=1\n    else:\n     break\n    bn-=1\n  if(i!=len(pos)-1):\n   val+= pos[i+1]-pos[i]-1\n  else:\n   ui=0\n   gh=pos[len(pos)-1]+1\n   while(gh<n):\n    if(s[gh]==\"1\"):\n     ui+=1\n    gh+=1\n   val+=ui\n  \n  if(val>count):\n   count=val\n if(len(pos)==0):\n  print(n)\n else:\n  print(count)\n t+=1\n\n\n\n  \n", "#!/usr/bin/env python3\ndef solve(n, k, s):\n l = [None] * (n + 1)\n l[0] = 0\n for i in range(n):\n  if int(s[i]):\n   l[i + 1] = l[i] + 1\n  else:\n   l[i + 1] = 0\n\n r = [None] * (n + 1)\n r[n] = 0\n for i in reversed(list(range(n))):\n  if int(s[i]):\n   r[i] = r[i + 1] + 1\n  else:\n   r[i] = 0\n\n ans = 0\n for i in range(n - k + 1):\n  ans = max(ans, l[i] + k + r[i + k])\n return ans\n\n\ndef main():\n t = int(input())\n for _ in range(t):\n  n, k = list(map(int, input().split()))\n  s = input()\n  print(solve(n, k, s))\n\ndef __starting_point():\n main()\n\n__starting_point()", "#!/usr/bin/env python3\ndef solve(n, k, s):\n l = [None] * (n + 1)\n l[0] = 0\n for i in range(n):\n  if int(s[i]):\n   l[i + 1] = l[i] + 1\n  else:\n   l[i + 1] = 0\n\n r = [None] * (n + 1)\n r[n] = 0\n for i in reversed(list(range(n))):\n  if int(s[i]):\n   r[i] = r[i + 1] + 1\n  else:\n   r[i] = 0\n\n ans = 0\n for i in range(n - k + 1):\n  ans = max(ans, l[i] + k + r[i + k])\n return ans\n\n\ndef main():\n t = int(input())\n for _ in range(t):\n  n, k = list(map(int, input().split()))\n  s = input()\n  print(solve(n, k, s))\n\ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\nfor t in range(int(input())):\n n,k = map(int,input().split())\n \n arr=list(input())\n \n for i in range(len(arr)):\n  arr[i]=int(arr[i])\n  \n head=[0 for i in range(n)]\n \n for i in range(1,n):\n  if arr[i-1]==0:\n   head[i]=0\n  elif arr[i-1]==1:\n   head[i]=head[i-1]+1\n   \n tail=[0 for i in range(n)]\n \n for i in range(n-2,-1,-1):\n  if arr[i+1]==0:\n   tail[i]=0\n  elif arr[i+1]==1:\n   tail[i]=tail[i+1]+1\n   \n ans=0\n j=0\n \n while j+k<=n:\n  ans=max(ans,k+head[j]+tail[j+k-1])\n  j+=1\n print(ans)", "for _ in range(int(input())):\n a,k=map(int,input().split())\n inp=[int(i) for i in input()]\n conright=list(inp)\n prev=conright[0]\n for i in range(1,a):\n  if conright[i]==1:\n   if prev==1:\n    conright[i]=conright[i-1]+1\n   else:\n    prev=conright[i]\n  else:\n   prev=conright[i]\n #print(conright)\n conleft=list(inp)\n prev=conleft[a-1]\n for i in range(a-2,-1,-1):\n  if conleft[i]==1:\n   if prev==1:\n    conleft[i]=conleft[i+1]+1\n   else:\n    prev=conleft[i]\n  else:\n   prev=conleft[i]\n #print(conleft)\n conright.insert(0,0)\n conleft.append(0)\n m=-1\n for i in range(a-k+1):\n  insr=conright[i-1]\n  insl=conleft[i+k]\n  m=max(m,k+conright[i]+conleft[i+k])\n print(m)", "t = int(input())\nfor T in range(t):\n n, k = [int(x) for x in input().split()]\n s = input()\n l, r = [0] * n, [0] * n\n \n for i in range(1, n):\n  if s[i - 1] == '1':\n   l[i] = l[i - 1] + 1\n for i in range(n - 2, -1, -1):\n  if s[i + 1] == '1':\n   r[i] = r[i + 1] + 1\n\n ans = 0\n for i in range(n - k + 1):\n  ans = max(ans, l[i] + k + r[i + k - 1])\n print(ans)\n", "def fun(li,k): \n \n # Initialize result \n head=[0]*len(li)\n tail=[0]*len(li)\n for i in range(1,len(li)):\n  if li[i-1]==\"1\":\n   head[i]=head[i-1]+1\n  else:\n   head[i]=0\n for i in range(len(li)-2,-1,-1):\n  if li[i+1]==\"1\":\n   tail[i]=tail[i+1]+1\n  else:\n   tail[i]=0\n ans=0\n#     print(head)\n#     print(tail)\n for i in range(0,len(li)-k+1):\n  ans=max(ans,k+head[i]+tail[i+k-1])\n#         print(i,ans)\n#     return ans\n \n  \n return ans\nt=int(input())\nfor i in range(0,t):\n s=list(map(int,input().strip().split()))\n s1=s[0]\n s2=s[1]\n li=input()\n print(fun(li,s2)) ", "# cook your dish here\nfor _ in range (int(input())):\n n, k = map(int, input().split())\n l = list(input())\n l1 = [0] * n\n l2 = [0] * n\n for i in range (1, n):\n  if l[i - 1] == \"1\":\n   l1[i] = l1[i - 1] + 1\n for i in range (n - 2, -1, -1):\n  if l[i + 1] == \"1\":\n   l2[i] = l2[i + 1] + 1\n ans = 0\n for i in range (n - k + 1):\n  ans = max(ans, (l1[i] + l2[i + k - 1] + k))\n #print(l1)\n #print(l2)\n print(ans)", "for _ in range(int(input())):\n n,k = list(map(int,input().split()))\n arr = list(map(int,list(input())))\n right = [0]*(n+1)\n count = 0\n for i in range(n-1,-1,-1):\n  if arr[i]==1:\n   count += 1\n  else:\n   count = 0\n  right[i] = count\n count = 0\n ans = 0\n for i in range(n):\n  length = 0\n  length = count + (min(i+k,n)-i) + right[min(i+k,n)]\n  ans = max(ans,length)\n  if arr[i] == 1:\n   count += 1\n  else:\n   count = 0\n print(ans)\n\n# 2\n# 13 2\n# 0101110000101\n# 6 3\n# 100001\n", "for _ in range(int(input())):\n N, K = list(map(int, input().split()))\n A = ['0']\n A.extend(input())\n A.extend(['0'])\n\n B = [0] * (N + 2)\n C = B.copy()\n\n for i, j in enumerate(A[1:], start=1):\n  if j == '1':\n   B[i] = B[i - 1] + 1\n\n A.reverse()\n\n for i, j in enumerate(A[1:], start=1):\n  if j == '1':\n   C[i] = C[i - 1] + 1\n\n A.reverse()\n C.reverse()\n\n i = 1\n j = K\n ans = 0\n while j <= N:\n  ans = max(ans, K + B[i - 1] + C[j + 1])\n  i += 1\n  j += 1\n\n print(ans)\n", "te = int(input())\n# print(te)\nwhile te > 0:\n te -= 1\n n, k = list(map(int, input().split()))\n dishes = list(input())\n heads = [0]*n\n tails = [0]*n\n for i in range(1, n):\n  if dishes[i-1] == '1':\n   heads[i] = heads[i-1] + 1\n  else:\n   heads[i] = 0\n j = n-2\n while j >= 0:\n  if dishes[j+1] == '1':\n   tails[j] = tails[j+1] + 1\n  else:\n   tails[j] = 0\n  j -= 1\n ans = 0\n i = 0\n while i + k <= n:\n  ans = max(ans, heads[i] + k + tails[i+k-1])\n  i += 1\n print(ans)", "# cook your dish here\ndef fun(s):\n p=0;m=0\n for i in range(n-1):\n  if s[i]=='1' and s[i+1]=='1':\n   p+=1\n  else:\n   p=0\n  m=max(m,p)\n return m+1\nfor __ in range(int(input())):\n n,k=map(int,input().split())\n s=input()\n r=0\n for i in range(n-k+1):\n  s1='1'*k\n  h=fun(s[:i]+s1+s[i+k:])\n  r=max(r,h)\n print(r)", "for z in range (int(input())):\n n,k=list(map(int,input().split()))\n s=input()\n maxl=0\n for i in range (0,n-k+1):\n  j=i-1\n  c0=0\n  c1=0\n  while(j>=0):\n   if(s[j]=='1'):\n    c0+=1\n    j-=1\n   else:\n    break\n  j=i+k\n  while(j<n):\n   if(s[j]=='1'):\n    c1+=1\n    j+=1\n   else:\n    break\n  #print(c0,c1)\n  if(maxl < (c0+c1+k)):\n   maxl = c0+c1+k\n\n #if(n==k):\n  #print(k)\n else:\n  print(maxl)\n\n\n", "def solve(arr,n,k):\n lbs = 0\n for i in range(0,n-k+1):\n  cnt = k\n  for j in range(i-1,-1,-1):\n   if(arr[j]==1):\n    cnt+=1\n   else:\n    break\n  for j in range(i+k,n):\n   if(arr[j]==1):\n    cnt+=1\n   else:\n    break \n  lbs = max(lbs,cnt)\n return lbs\n\nt = int(input())\nwhile t>0:\n t-=1\n n,k = map(int,input().split())\n arr = list(map(int,list(input().strip())))\n print(solve(arr,n,k))"]