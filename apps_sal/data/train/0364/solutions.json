["class Solution:\n     def canMeasureWater(self, x, y, z):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :type z: int\n         :rtype: bool\n         \"\"\"\n         if x > y:\n             x, y = y, x\n         if z < 0 or z > x+y:\n             return False\n         if x == 0:\n             return z == y or z == 0\n         if z % x == 0:\n             return True\n         if y % x == 0:\n             return False\n         a = x\n         b = y%x\n         while a > 1 and b > 1:\n             a = a%b\n             a, b = b, a\n         if b == 0:\n             m = a\n         else:\n             m = b\n         if z%m == 0:\n             return True\n         return False", "class Solution:\n     def canMeasureWater(self, x, y, z):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :type z: int\n         :rtype: bool\n         \"\"\"        \n         def gcd(x, y):\n             if y == 0: return x\n             return gcd(y, x % y)\n         \n         if x == 0 and y == 0: return z == 0\n         return z % gcd(x, y) == 0 and x + y >= z", "class Solution:\n     def canMeasureWater(self, x, y, z):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :type z: int\n         :rtype: bool\n         \"\"\"\n         if x + y < z: return False\n         if x == z or y == z or x + y == z: return True\n         while y:\n             x, y = y, x % y\n         return not z % x\n", "class Solution:\n     def canMeasureWater(self, x, y, z):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :type z: int\n         :rtype: bool\n         \"\"\"\n         if not x or not y:  # (if x == 0 or y == 0): return (z == 0)\n             return not z\n         if z > x + y:\n             return False\n         \n         # greatest common divisor --> Euclidian Algorithm\n         while x != y:\n             if x > y:\n                 x, y = x - y, y\n             else:\n                 x, y = x, y - x\n         \n         return False if z % x else True", "class Solution:\n     def canMeasureWater(self, x, y, z):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :type z: int\n         :rtype: bool\n         \"\"\"\n         if x + y < z: return False\n         gcd = lambda a, b: (gcd(b, a % b) if a % b else b)\n         return z == 0 or z % gcd(x, y) == 0", "class Solution:\n     def canMeasureWater(self, x, y, z):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :type z: int\n         :rtype: bool\n         \"\"\"\n         \n         a,b=x,y\n         while y:\n             r=x%y\n             x=y\n             y=r\n         return bool(not z or (x and z<=a+b and not z%x))", "class Solution:\n     def canMeasureWater(self, x, y, z):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :type z: int\n         :rtype: bool\n         \"\"\"\n         if z in [0, x, y, x + y]:\n             return True\n         if z > x + y or z < 0:\n             return False\n         if x > y:\n             x, y = y, x\n         if x != 0:\n             temp = z % x\n             for i in range(x):\n                 if temp == (y * i) % x:\n                     return True\n         if y != 0:\n             temp = z % y\n             for i in range(y):\n                 if temp == (x * i) % y:\n                     return True\n         return False", "class Solution:\n     def canMeasureWater(self, x, y, z):\n         \"\"\"\n         :type x: int\n         :type y: int\n         :type z: int\n         :rtype: bool\n         \"\"\"\n         if z in [0, x, y, x + y]:\n             return True\n         if z > x + y or z < 0:\n             return False\n         if x > y:\n             x, y = y, x\n         if x != 0:\n             for i in range(x):\n                 if z % x == (y * i) % x:\n                     return True\n         if y != 0:\n             for i in range(y):\n                 if z % y == (x * i) % y:\n                     return True\n         return False"]