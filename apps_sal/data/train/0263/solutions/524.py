import numpy as np


class Solution:
    def knightDialer(self, n: int) -> int:
        M = np.matrix([
            [0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
            [0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
            [1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 0, 0, 0, 0]
        ])

        dp = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        f = M
        n = n - 1
        while n > 0:
            if n % 2:
                dp = dp * M % 1000000007
            n = n // 2
            M = M * M % 1000000007
        return np.sum(dp) % 1000000007
