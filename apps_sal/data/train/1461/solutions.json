["from sys import stdin\nfrom fractions import Fraction\n\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    a, b, n = list(map(int, input().split()))\n    ab = Fraction(a, b)\n\n    p = set()\n\n    for i in range(1, n+1):\n        for j in range(n, 0, -1):\n            x = Fraction(i, j)\n\n            if x > ab:\n                break\n\n            p.add(x)\n\n    x = sorted(p)[-2]\n\n    print(x.numerator, x.denominator)\n", "from fractions import Fraction as F\r\n\r\n\r\ndef farey_seq(x, limit):\r\n    l, r = F(0), F(1)\r\n    while l.denominator + r.denominator <= limit:\r\n        m = F(l.numerator + r.numerator, l.denominator + r.denominator)\r\n        if m < x:\r\n            l = m\r\n        else:\r\n            r = m\r\n            if r == x:\r\n                break\r\n\r\n    if l.denominator + r.denominator <= limit:\r\n        k = 1 + (limit - (l.denominator + r.denominator)) // r.denominator\r\n        l = F(l.numerator + k * r.numerator, l.denominator + k * r.denominator)\r\n\r\n    return l\r\n\r\n\r\n# ProjectEuler problem:\r\n# print(farey_seq(F(3, 7), 1000000).numerator)\r\n\r\nfor _ in range(int(input())):\r\n    a, b, n = map(int, input().split())\r\n    r = farey_seq(F(a, b), n)\r\n    print(r.numerator, r.denominator)", "# Python code to demonstrate naive \n# method to compute gcd ( recursion ) \n\ndef gcd(a,b): \n\tif(b==0): \n\t\treturn a \n\telse: \n\t\treturn gcd(b,a%b) \n\nT=int(input())\nwhile T:\n    a,b,N=map(int,input().split())\n    c=set()\n    ls=[]\n    for i in range(1,N+1):\n        for j in range(1,i):\n            k=gcd(i,j)\n            if(j/i not in c):\n                c.add(j/i)\n                ls.append([j/i,j//k,i//k])\n    ls.sort()\n    for i in range(len(ls)):\n        if(ls[i][1]==a and ls[i][2]==b):\n            break\n    print(ls[i-1][1],ls[i-1][2])\n    T-=1", "R1_HIGH, R1_LOW, R2_HIGH, R2_LOW = 0, 0, 0, 0\n\ndef cross_multiply(a, b, i):\n    \n    nonlocal R1_HIGH\n    nonlocal R1_LOW\n    nonlocal R2_HIGH\n    nonlocal R2_LOW\n    \n    if i == 1:\n        R1_HIGH = 6*a*b\n        R1_LOW = R1_HIGH // 2\n    elif i == 2:\n        R2_HIGH = 6*a*b\n        R2_LOW = R2_HIGH // 2\n\n\n\ndef isLess(a,b,c,d):\n    cross_multiply(a, d, 1)\n    cross_multiply(c, b, 2)\n    \n    if (R1_HIGH < R2_HIGH):\n        return True\n    \n    if (R1_HIGH > R2_HIGH):\n        return False\n    \n    return (R1_LOW < R2_LOW)\n    \n\n\ndef negb_frac(a,b,N):\n    leftN , leftD = 0, 1\n    rightN, rightD = 1, 1\n    \n    while((leftD + rightD) <= N):\n        mediantN = leftN + rightN\n        mediantD = leftD + rightD\n        \n        if isLess(mediantN, mediantD, a, b):\n            leftN = mediantN\n            leftD = mediantD\n        else:\n            rightN = mediantN\n            rightD = mediantD\n            \n            if (rightN == a and rightD == b):\n                break\n    \n    if ((leftD + rightD) <= N):\n        diff = N - (leftD + rightD)\n        repeat = 1 + diff // rightD\n        leftN += repeat * rightN\n        leftD += repeat * rightD\n    \n    print(leftN, leftD)\n    \ndef __starting_point():\n    T = int(input())\n    for _ in range(T):\n        a,b,N = list(map(int, input().split()))\n        negb_frac(a,b,N)\n__starting_point()"]