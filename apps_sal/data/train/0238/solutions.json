["class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         tmax_profit = 0\n         rmax_profits = [0] * len(prices)\n         rmax = -1\n         for ii in range(len(prices)-2, -1, -1):\n             if (prices[rmax] - prices[ii] > rmax_profits[ii+1]):\n                 rmax_profits[ii] = prices[rmax] - prices[ii]\n             else:\n                 rmax_profits[ii] = rmax_profits[ii+1]\n             if prices[ii] > prices[rmax]:\n                 rmax = ii\n         #print(\"rmax profit = {}\".format(rmax_profits))\n         lmin = 0\n         lmax_profit = 0\n         for ii in range(1, len(prices)):\n             profit = prices[ii]-prices[lmin]\n             if  profit > lmax_profit:\n                 lmax_profit = profit\n             if prices[ii] < prices[lmin]:\n                 lmin = ii\n             tprofit = lmax_profit\n             if ii < len(prices)-1:\n                 tprofit += rmax_profits[ii+1]\n             #print(\"ii = {}, rmax_profit = {}, lmax_profit = {}, tprofit = {}\".format(ii, rmax_profits[ii], lmax_profit, tprofit))\n             if tprofit > tmax_profit:\n                 tmax_profit = tprofit\n         return tmax_profit if tmax_profit>0 else 0        ", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:\n             return 0\n         \n         n = len(prices)\n         \n         sell1 = 0\n         sell2 = 0\n         hold1 = -prices[0]\n         hold2 = -prices[0]\n         \n         for i in range(1, n):\n             sell2 = max(prices[i] + hold2, sell2)\n             hold2 = max(sell1 - prices[i], hold2)\n             sell1 = max(prices[i] + hold1, sell1)\n             hold1 = max(-prices[i], hold1)\n             \n             \n             \n             #sell1[i] = max(sell1[i-1], prices[i] + hold1[i-1])\n             #hold1[i] = max(hold1[i-1],  -prices[i])\n             #sell2[i] = max(prices[i] + hold2[i-1], sell2[i-1] )\n             #hold2[i] = max(sell1[i-1] - prices[i], hold2[i-1])\n             \n         return sell2\n             \n \n \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         #\u4e00\u5929\u53ef\u4ee5\u4e70\u53562\u6b21\n         import sys\n         min_v=-sys.maxsize\n         buy1,buy2=min_v,min_v\n         sell1,sell2=0,0\n         for i in prices:\n             buy1=max(buy1,-i)\n             #\u5356\uff0c\u5206\u4e3a\u672c\u6b21\u4e0d\u5356 \u6216\u5356\n             sell1=max(sell1,buy1+i)\n             \n             buy2=max(buy2,sell1-i)\n             #\u5356\uff0c\u5206\u4e3a\u672c\u6b21\u4e0d\u5356 \u6216\u5356\n             sell2=max(sell2,buy2+i)\n         return sell2\n", "class Solution:\n     def maxProfit(self, prices, k = 2):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:\n             return 0\n         \n         s1 = s2 = 0\n         b1 = b2 = -1000000000\n         \n         for p in prices:\n             b1 = max(b1, -p)\n             s1 = max(s1, b1 + p)\n             b2 = max(b2, s1 - p)\n             s2 = max(s2, b2 + p)\n         \n         return s2\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:\n             return 0\n         sell_date = [0] * len(prices)\n         min_price = prices[0]\n         for i in range(1, len(prices)):\n             sell_date[i] = max(sell_date[i - 1], prices[i] - min_price)\n             min_price = min(prices[i], min_price)\n         \n         max_price, profit = prices[-1], 0\n         for i in range(len(prices) - 1, 0, -1):\n             profit = max(profit, max_price - prices[i] + sell_date[i])\n             max_price = max(max_price, prices[i])\n         \n         return profit", "class Solution:\n     def maxProfit(self, prices):\n         length=len(prices)\n         if length==0: return 0\n         f1=[0 for i in range(length)]\n         f2=[0 for i in range(length)]\n         \n         minV=prices[0]; f1[0]=0\n         for i in range(1,length):\n             minV=min(minV, prices[i])\n             f1[i]=max(f1[i-1],prices[i]-minV)\n             \n         maxV=prices[length-1]; f2[length-1]=0\n         for i in range(length-2,-1,-1):\n             maxV=max(maxV,prices[i])\n             f2[i]=max(f2[i+1],maxV-prices[i])\n \n         res=0\n         for i in range(length):\n             if f1[i]+f2[i]>res: \n                 res=f1[i]+f2[i]\n                 \n         return res\n                     \n             \n         \n         \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if len(prices)<2:\n             return 0\n         buy = []\n         sell = []\n         for i in range(2):\n             buy.append(-float(\"inf\"))\n             sell.append(-float(\"inf\"))\n         \n         for i in prices:\n             for j in range(2):\n                 if j== 0:\n                     buy[j] = max(buy[j], -i)\n                     sell[j] = max(sell[j], i+buy[j])\n                 else:\n                     buy[j] = max(buy[j], sell[j-1]-i)\n                     sell[j] = max(sell[j], i+buy[j])\n         \n         return sell[-1]\n         \n", "class Solution:\n     def maxProfit(self,prices):\n         k = 2\n         profit = []\n         n = len(prices)\n         if n < 2:\n             return 0\n \n         for i in range(k+1):\n             profit.append([])\n             for j in range(n):\n                 profit[i].append(0)\n \n         for i in range(1,k+1):\n             tmpMax = profit[i-1][0] - prices[0]\n             for j in range(n):\n                 profit[i][j] = max(profit[i][j-1], prices[j] + tmpMax)\n                 tmpMax = max(tmpMax,profit[i-1][j] - prices[j])\n         return profit[k][n-1]\n \n \n \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:\n             return 0\n         \n         n = len(prices)\n         \n         sell1 = n * [0]\n         hold1 = n * [0]\n         sell2 = n * [0]\n         hold2 = n * [0]\n         \n         hold1[0] = hold2[0] = -prices[0]\n         \n         for i in range(1, n):\n             sell1[i] = max(sell1[i-1], prices[i] + hold1[i-1])\n             hold1[i] = max(hold1[i-1],  -prices[i])\n             sell2[i] = max(prices[i] + hold2[i-1], sell2[i-1] )\n             hold2[i] = max(sell1[i-1] - prices[i], hold2[i-1])\n             \n         return sell2[n-1]\n             \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         left2right = [0] * len(prices)\n         right2left = [0] * len(prices)\n         dp = prices[:]\n         \n         max_profit = 0\n         for i in range(1, len(prices)):\n             dp[i] = min(dp[i - 1], prices[i])\n             left2right[i] = max(left2right[i], prices[i] - dp[i])\n             max_profit = max(max_profit, prices[i] - dp[i])\n         \n         dp = prices[:]\n         for i in reversed(list(range(len(prices) - 1))):\n             dp[i] = max(dp[i + 1], prices[i])\n             right2left[i] = max(right2left[i + 1], dp[i] - prices[i])\n             \n         print(right2left)\n         \n         for i in range(len(prices) - 1):\n             max_profit = max(max_profit, left2right[i] + right2left[i + 1])\n         \n         return max_profit\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:return 0\n         times,n = 2, len(prices)\n         dp = [[0 for j in range(n)] for i in range(times)]\n         buy_in = -prices[0]\n         for i in range(1,n):\n             dp[0][i] = max(dp[0][i-1], prices[i] + buy_in)\n             buy_in = max(buy_in, -prices[i])\n             \n             \n         \n         for k in range(1,times):\n             buy_in = -prices[0]\n             for j in range(1,n):\n                 dp[k][j] = max(buy_in + prices[j], dp[k][j-1])\n                 buy_in = max(buy_in, dp[k-1][j] - prices[j])\n         return dp[-1][-1]", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:\n             return 0\n         buy1, sell1, buy2, sell2 = -prices[0], 0, -prices[0], 0\n         for p in prices:\n             buy1 = max(buy1, -p)\n             sell1 = max(sell1, buy1 + p)\n             buy2 = max(buy2, sell1 - p)\n             sell2 = max(sell2, buy2 + p)\n         return sell2"]