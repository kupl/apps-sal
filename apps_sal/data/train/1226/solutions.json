["from collections import defaultdict\nfrom itertools import product\n\ndef solve(mouse,n,m):\n \n # shadow matrix will contains the count of mice which affect (i,j) position\n # if there is a mice at position (i,j) then in shadow matrix it will affect \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0all four adjacent blocks \n shadow=[[0 for i in range(m)]for j in range(n)]\n for i,j in product(list(range(n)),list(range(m))):\n  if mouse[i][j]==1:\n   if i>0:\n    shadow[i-1][j]+=1\n   if j>0:\n    shadow[i][j-1]+=1\n   if i<n-1:\n    shadow[i+1][j]+=1\n   if j<m-1:\n    shadow[i][j+1]+=1\n \n # dp is a dictionary which contains a tuple of 3 values (i,j,0)=>we are \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0coming at destination (i,j) from left side\n # (i,j,1)=> we are coming at destination (i,j) from top \n dp=defaultdict(int)\n \n # \n dp[(0,0,0)]=dp[(0,0,1)]=shadow[0][0]-mouse[0][0]\n \n # fill only first row\n # in first row we can only reach at (0,j) from (0,j-1,0) as we can't come \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from top.\n \n # so here we will assign count of mices which will affect current cell\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(shadow[0][i]) + previous result i.e,(0,j-1,0) and \n # if mouse is in the current cell than we have to subtract it bcoz we have \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add it twice i.e, when we enter at this block \n # and when we leave this block \n for i in range(1,m):\n  dp[(0,i,0)]=dp[(0,i,1)]=shadow[0][i]-mouse[0][i]+dp[(0,i-1,0)]\n \n # same goes for first column\n # we can only come at (i,0) from (i-1,0) i.e top\n for i in range(1,n):\n  dp[(i,0,0)]=dp[(i,0,1)]=shadow[i][0]-mouse[i][0]+dp[(i-1,0,1)]\n \n \n # for rest of the blocks \n # for a block (i,j) we have to add shadow[i][j] and subtract mouse[i][j] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from it for double counting\n # now for each block we have two choices, either take its previous block \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with same direction or take previous block with different \n # direction and subtract corner double counted mouse. We have to take min of \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0both to find optimal answer\n for i,j in product(list(range(1,n)),list(range(1,m))):\n  a=shadow[i][j]-mouse[i][j]\n  b=a\n  a+=min(dp[(i,j-1,0)],dp[(i,j-1,1)]-mouse[i-1][j])\n  b+=min(dp[(i-1,j,1)],dp[(i-1,j,0)]-mouse[i][j-1])\n  dp[(i,j,0)]=a\n  dp[(i,j,1)]=b\n  \n # what if [0][0] and [n-1][m-1] have mice, so we have to add them as we \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0haven't counted them yet.\n \n return min(dp[(n-1,m-1,0)],dp[(n-1,m-1,1)])+mouse[0][0]+mouse[n-1][m-1]\n    \nfor _ in range(int(input())):\n n,m=list(map(int,input().split( )))\n mouse=[]\n for i in range(n):\n  x=input()\n  mouse.append(list(map(int,x)))\n print(solve(mouse,n,m))\n \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "from collections import defaultdict\nfrom itertools import product\ndef solve(mouse,n,m):\n shadow=[[0 for i in range(m)]for j in range(n)]\n for i,j in product(list(range(n)),list(range(m))):\n  if mouse[i][j]==1:\n   if i>0:\n    shadow[i-1][j]+=1\n   if j>0:\n    shadow[i][j-1]+=1\n   if i<n-1:\n    shadow[i+1][j]+=1\n   if j<m-1:\n    shadow[i][j+1]+=1\n \n dp=defaultdict(int)\n dp[(0,0,0)]=dp[(0,0,1)]=shadow[0][0]-mouse[0][0]\n \n for i in range(1,m):\n  dp[(0,i,0)]=dp[(0,i,1)]=shadow[0][i]-mouse[0][i]+dp[(0,i-1,0)]\n \n for i in range(1,n):\n  dp[(i,0,0)]=dp[(i,0,1)]=shadow[i][0]-mouse[i][0]+dp[(i-1,0,1)]\n \n for i,j in product(list(range(1,n)),list(range(1,m))):\n  a=shadow[i][j]-mouse[i][j]\n  b=a\n  a+=min(dp[(i,j-1,0)],dp[(i,j-1,1)]-mouse[i-1][j])\n  b+=min(dp[(i-1,j,1)],dp[(i-1,j,0)]-mouse[i][j-1])\n  dp[(i,j,0)]=a\n  dp[(i,j,1)]=b\n  \n \n return min(dp[(n-1,m-1,0)],dp[(n-1,m-1,1)])+mouse[0][0]+mouse[n-1][m-1]\n    \nfor _ in range(int(input())):\n n,m=list(map(int,input().split( )))\n mouse=[]\n for i in range(n):\n  x=input()\n  mouse.append(list(map(int,x)))\n print(solve(mouse,n,m))\n \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"]