["class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1 / min(n, 2.0) \n        \n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return float(1)\n        return float(0.5)", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1 if n==1 else 0.5", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1.0\n        if n== 2:\n            return 0.5\n        return 0.5\n        if n == 3:\n            return (1/3 * 1 + 1/3 * 1/2 + 1/3 * 0) # pick his own seat, the nth person's seat, or...\n        if n == 4:\n            return (1/4 * 1 + 1/4 *(1/3*1+1/3*1/2 +1/3*0) +1/4 *(1/3*1+1/3*1 +1/3*0) + 1/4 * 0) # pick his own seat, the nth person's seat, or...\n            \n        return (1/n * 1 + (n-2)/n * self.nthPersonGetsNthSeat(n-2) + 1/n *0) \n      \n\n      \n        \n        \n        \n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1.0 if n == 1 else 0.5", "import numpy as np\n\n\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        \n        return 1/2\n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        \n        if n==1:\n            return 1\n        \n        s=0\n        for i in range(1,n-1):\n            s+=0.5/n\n        \n        return 1/n+s", "import numpy as np\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        '''\n        if n==1:\n            currentsum = 0\n        else:\n            currentsum = 1/n\n            for i in range(2,n):\n                currentsum = currentsum + currentsum/(n-i+1)\n        return 1-currentsum\n        '''\n        if n==1:\n            return 1\n        else: return 1/2.0\n                \n            \n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        res = 1.0\n        cur = 1.0\n        \n        for i in range(2, n + 1):\n            res = (1 / i) * cur\n            cur += res\n            \n        return res\n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        return .5", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        res = 1.0\n        t = 1.0\n        \n        for i in range(2, n + 1):\n            res = (1 / i) * t\n            t += res\n        \n        return res", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        \n        if n==1:\n            return 1\n        \n        if n==2:\n            return 0.5\n        \n        dp=[0]*n\n        dp[0]=1/n\n        \n        for i in range(1,n-1):\n            dp[i]=0.5/n\n        \n        return sum(dp)", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        i = 0\n        if n ==1:\n            return 1\n        \n        notCorrect = 1/n\n        \n        for i in range(1,n-1):\n            notCorrect*= (1.0 + 1.0/(n-i))\n        \n        \n        return 1-notCorrect", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n\n        \n        i = 0\n        if n ==1:\n            return 1\n        \n        notCorrect = 1/n\n        \n        for i in range(1,n-1):\n            notCorrect*= (1.0 + 1.0/(n-i))\n        \n        \n        return 1-notCorrect", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        # if n == 1:\n        #     return 1.0\n        # else:\n        #     return 0.5\n        \n        if n == 1:\n            return 1.0\n        sum_results = 0.0\n        for i in range(2, n+1):\n            p = 1/i * (1 + sum_results)\n            sum_results += p\n        return p", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return(1)\n        return(1/2)\n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        cur = 1\n        for i in range(2, n+1):\n            cur = 1/i + (i-2)/i*cur\n        return cur", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        mem = {}\n        mem[1] = 1.0\n        mem[2] = 0.5\n        for i in range(3, n+1):\n            mem[i] = mem[i-1]\n        \n        return mem[n]", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        '''\n        f(n) = 1/n                                    -> 1st person picks his own seat\n            + 1/n * 0                                 -> 1st person picks last one's seat\n            + (n-2)/n * (                            ->1st person picks one of seat from 2nd to (n-1)th\n                1/(n-2) * f(n-1)                   -> 1st person pick 2nd's seat\n                1/(n-2) * f(n-2)                  -> 1st person pick 3rd's seat\n                ......\n                1/(n-2) * f(2)                     -> 1st person pick (n-1)th's seat\n            )\n\n        => f(n) = 1/n * ( f(n-1) + f(n-2) + f(n-3) + ... + f(1) )\n        '''\n        if n==1:\n            return 1.0\n        if n==2:\n            return 0.5\n        dp = [1.0, 0.5]\n        acc = 1.5\n        for i in range(3, n+1):\n            dp.append(acc/i)\n            acc += dp[-1]\n        return dp[-1]\n    \n        '''\n        Formal proof with math solution\n        when n > 2,\n        f(n) = 1/n * ( f(n-1) + f(n-2) + ... + f(1) )\n        f(n-1) = 1/(n-1) * (f(n-2) + f(n-3) + ... + f(1))\n\n        because, the 2nd equation requires n-1 > 1\n        So that\n\n        n * f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(1)\n        (n-1) * f(n-1) = f(n-2) + f(n-3) + ... + f(1)\n        Substract both sides, we get\n\n        n * f(n) - (n-1)*f(n-1) = f(n-1)\n\n        => n * f(n) = n * f(n-1)\n        => f(n) = f(n-1) = f(2) = 1/2 , when n > 2\n        '''\n        # return 1 if n==1 else 0.5\n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1: return 1\n        if n == 2: return 0.5\n        result = 1.0\n        curr = 1.0\n        for i in range(2, n + 1):\n            result = (1 / i) * curr\n            curr += result\n        return result\n        \n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0.5\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 0.5\n        acc = 1.5\n        for i in range(3, n + 1):\n            dp[i] = (1.0 / i) * acc\n            acc += dp[i]\n        return dp[-1]", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1: return 1\n        good = 0\n        left = n\n        uncenrtain = 1\n        while left >= 2:\n            # print(f'left={left}, good={uncenrtain}/{left}, uncenrtain={uncenrtain}*({left}-2)/{left}')\n            good += uncenrtain/left\n            uncenrtain = uncenrtain * (left-2)/left\n            left -= 1\n            # print('good=', good)\n            \n        return good", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        dp = [0] * (n + 1)\n        if n > 0:\n            dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] / 2 + (1 - dp[i - 1]) / 2\n        return dp[n]", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        else:\n            # return 0.5\n            dp = [0 for _ in range(n+1)]\n            dp[n] = 1 / n\n            for i in range(n-1, 1, -1):\n                dp[i] = dp[i+1] / i + dp[i+1]\n            return dp[2]", "class Solution:\n     \n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n==1: return 1\n        return 1/2\n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        p = [None, 1., 0.5]\n        for i in range(2, n):\n            prob = (i * p[i] + p[i]) / (i+1)\n            p.append(prob)\n        return p[n]\n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1: return 1\n        \n        # let P(k) be the probability that the k-th person loses his seat\n        # it can be shown that: P(k) = P(k-1)(1 + 1/(n-k+2))\n        P = [None]*(n+1)\n        P[2] = 1/n\n        \n        for i in range(3, n+1):\n            P[i] = P[i-1]*(1 + 1/(n-i+2))\n            \n        return P[n]", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        D = [0]*n\n        D[0] = 1.0\n        for i in range(1,n):\n            D[i] = 1/(i+1) + (i-1)/(i+1)*D[i-1]\n        return D[-1]", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n==1:\n            return 1\n        elif n==2:\n            return 0.5\n        \n        dp=[0]*(n)\n        dp[0] = 1\n        dp[1] = 0.5\n        sum1 = dp[1]\n        for i in range(2,n):\n            dp[i] = 1/(i+1)+(1/(i+1))*sum1\n            sum1 += dp[i] \n      \n        return dp[-1]", "import numpy as np\nclass Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n\n        if n==1:\n            currentsum = 0\n        else:\n            currentsum = 1/n\n            for i in range(2,n):\n                currentsum = currentsum + currentsum/(n-i+1)\n        return 1-currentsum\n\n                \n            \n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n == 1:\n            return 1\n        \n        # Create a list of probablity of n-th person get his own seat under the situation 1-st person pick k-th seat\n        pick = [1] + [0]*(n - 2) + [1]\n        \n        prob = 0\n        for i in range(n-2, 0, -1):\n            left = n - i\n            pick[i] = 1/left + ((left-2)/left)*pick[i+1]\n            prob += pick[i]\n        \n        return (prob+1)/n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        return 1.0 if n == 1 else 0.5\n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n>1:\n            return 0.5\n        return 1", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n        if n==1:\n            return 1.00000\n        else:\n            return 0.50000\n", "class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -> float:\n       \n        if n == 1:\n            return 1.0\n        else: \n            return 0.5"]