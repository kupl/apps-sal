["t = input();\n\na = [0 for i in range(10001)]\n\ni = 0;\n\nwhile i < int(t):\n\n\tn = input();\n\n\tk = input();\n\n\tassert(len(k.split(' ')) == int(n));\n\n\tfor each in k.split(' '):\n\n\t\ta[int(each)] += 1;\n\n\n\tV = 0;\n\n\tC = a[V];\n\n\tfor j in range(10001):\n\n\t\tif C < a[j]:\n\n\t\t\tV = j;\n\n\t\t\tC = a[V];\n\n\t\ta[j] = 0;\n\n\ti += 1;\n\n\tprint(V, C);\n", "import sys\ndef main():\n    s = sys.stdin.readline\n    for t in range(int(s())):\n        n = int(s())\n        A = list(map(int, s().split()))\n        save = {}\n        for i in A:\n            if i in save:\n                save[i]+=1\n            else:\n                save[i]=1\n        g = max(save, key=save.get)\n        now = []\n        for num in save:\n            if save[num] == save[g]:\n                now.append(num)\n        now = sorted(now)\n        print(now[0], save[g])\ndef __starting_point():\n    main() \n__starting_point()", "import fileinput\n\ndef CountMax (nA, A):\n\thT = {}\n\tfor n in A:\n\t\tif n not in hT:\n\t\t\thT.setdefault(n,1)\n\t\telse:\n\t\t\thT[n] += 1\n\tvals = [(pair[0],pair[1]) for pair in hT.items()]\n\tvals.sort(key=lambda p:p[0])\n\t#print vals\n\treturn max(vals,key=lambda p:p[1])\n\t\ndef main():\n\tf = fileinput.FileInput()\n\tr = f.readline()\n\tif (r==''): \n\t\treturn 0\n\telse: \n\t\tnT = int(r)\n\twhile nT > 0 :\n\t\tnA = int(f.readline())\n\t\tA = list(map (int,(f.readline().strip()).split(' ')))\n\t\tresult = CountMax(nA, A)\n\t\tprint(result[0],result[1])\n\t\tnT = nT -1\n\treturn 0\ndef __starting_point():\n\tmain()\n__starting_point()", "from sys import stdin as I\nfrom collections import defaultdict\n\nints = lambda: [int(s) for s in I.readline().split()]\n\nT = ints()[0]\nwhile T:\n    T -= 1\n    n = ints()\n    c = defaultdict(int)\n    for x in ints():\n        c[x] += 1\n    \n    rv = (0, 0)\n    for val, ct in list(c.items()):\n        if ct > rv[1]:\n            rv = (val, ct)\n        elif ct == rv[1] and val < rv[0]:\n            rv = (val, ct)\n            \n    print(rv[0], rv[1])\n            \n", "\ndef solve():\n\tN = int(input())\n\tV = [0] * 10001\n\tI = list(map(int,input().split()))\n\tfor i in I:\n\t\tV[i] += 1\n\tAns = 0\n\tfor i in range(len(V)):\n\t\tif V[i] > V[Ans]:\n\t\t\tAns = i\n\tprint(Ans , V[Ans])\n\t\t\t\n\t\ndef main():\n\tt = int(input())\n\tfor i in range(t):\n\t\tsolve()\n\t\t\nmain()", "lists = []\nresults = []\nfor a in range(eval(input())):\n    eval(input())\n    lists.append([int(x) for x in input().split()])\nfor element in lists:\n    results = []\n    for n in element:\n        ns = [x[0] for x in results]\n        if n in ns :\n            results[ns.index(n)][1] += 1\n        else:\n            results.append([n, 1])\n    results.sort(key = lambda x:x[0])\n    results.sort(key = lambda x:x[1], reverse = True)\n    print(\" \".join([str(x) for x in results[0]]))", "import sys\n\nfor _ in range(int(sys.stdin.readline())):\n    l=int(sys.stdin.readline())\n    a=sys.stdin.readline().split()\n    a=list(map(int,a))\n    t=set(a)\n    count=[]\n    c=[]\n    if len(t)==len(a):\n        print(min(a),1)\n        \n    elif len(t)==1:\n        print(a[0],l)\n        \n    else:\n        for j in t:\n            c.append(j)\n        c.sort()\n        for i in c:\n            num=a.count(i)\n            count.append(num)\n            \n        times=max(count)\n        index=count.index(times)\n        print(c[index],times)\n            \n    ", "n=int(input())\nwhile(n):\n    size=int(input())\n    a=[]\n    a=input().split()\n    i=0\n    #b=len(a)*[0]\n    while(i<len(a)):\n        a[i]=int(a[i])\n        #print 'hello'\n        i+=1\n    j=max(a)\n    freq=[]\n    freq=(j+1)*[0]\n    k=0\n    while(k<len(a)):\n        if(a[k]!=0):\n            freq[a[k]-1]+=1\n            k+=1\n    count=max(freq)\n    key=freq.index(count)+1\n    print(key,count)\n    n-=1", "t = int(input())\nwhile t:\n    t-=1\n    n = int(input())\n    l = list(map(int, str(input()).split()))\n    k = set(l)\n    maxi = 0\n    num = 10001\n    for i in k:\n        c = l.count(i)\n        if c>maxi:\n            maxi = c\n            num = i\n        elif c == maxi and i<num:\n            num = i\n    print(num, maxi)\n", "#!/usr/bin/env python\n\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    D = {}\n    for e in A:\n        D[e] = D.get(e, 0) + 1\n    C = max(D.values())\n    V = min([e[0] for e in [e for e in list(D.items()) if e[1] == C]])\n    print(V, C)\n", "i = input('')\ni = int(i)\n\nx = 0\nans = []\n\nwhile (x < i):\n\ta = input('')\n\tarr = input('')\n\tarr = arr.split()\n\t\n\tcnts = []\n\ty = 0\n\t\n\twhile (y < len(arr)):\n\t\ttemp = [0, 0]\n\t\ttemp[0] = int(arr[y])\n\t\ttemp[1] = arr.count(arr[y])\n\t\tcnts.append(temp)\n\t\ty = y + 1\n\t\t\n\tmaxi = 10001\n\tmaxicount = 0\n\t\n\ty = 0\n\t\n\twhile (y < len(cnts)):\n\t\tif ((cnts[y])[1] > maxicount):\n\t\t\tmaxicount = (cnts[y])[1]\n\t\t\tmaxi = (cnts[y])[0]\n\t\telif ((cnts[y])[1] == maxicount):\n\t\t\tmaxicount = (cnts[y])[1]\n\t\t\tif ( (cnts[y])[0] < maxi ):\n\t\t\t\tmaxi = (cnts[y])[0]\n\t\ty = y + 1\n\t\n\tans.append(str(maxi) + ' ' + str(maxicount))\n\t\n\tx = x + 1\n\t\nx = 0\n\nwhile (x < len(ans)):\n\tprint(ans[x])\n\tx = x + 1", "n=int(input())\nwhile(n):\n    size=int(input())\n    a=[]\n    a=input().split()\n    i=0\n    #b=len(a)*[0]\n    while(i<len(a)):\n        a[i]=int(a[i])\n        #print 'hello'\n        i+=1\n    j=max(a)\n    freq=[]\n    freq=(j+1)*[0]\n    k=0\n    while(k<len(a)):\n        if(a[k]!=0):\n            freq[a[k]-1]+=1\n            k+=1\n    count=max(freq)\n    key=freq.index(count)+1\n    print(key,count)\n    n-=1\n            \n          \n    \n", "import sys\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n\tn = int(sys.stdin.readline());\n\tv = list(map(int,sys.stdin.readline().split()))\n\tv.sort()\n\txm,cm = v[0],0\n\tx,c = v[0],0\n\tfor i in v:\n\t\tif i == x:\n\t\t\tc += 1\n\t\telse:\n\t\t\tif c > cm or (c == cm and x < xm):\n\t\t\t\txm,cm = x,c\n\t\t\tx, c = i, 1\n\tif c > cm or (c == cm and x < xm):\n\t\txm,cm = x,c\n\tprint(xm,cm)\n", "import sys\n\nresult = []\nn = int(sys.stdin.readline())\nfor i in range(0, n):\n  sys.stdin.readline()\n  original = [int(numero) for numero in sys.stdin.readline().strip().split()]\n  l = list(set(original))\n  l.sort()\n  repeats = 0\n  number = l[0]\n  for j in l:\n    c = original.count(j)\n    if c > repeats:\n      repeats = c\n      number = j\n  result.append(str(number) + \" \" + str(repeats))\nsys.stdout.write(\"\\n\".join(result))\n", "from array import array\ndef solve():\n    n = int(input())\n    inp = list(map(int, input().split()))\n    mx = max([inp.count(i) for i in inp])\n    ans = min([x for x in inp if inp.count(x) == mx])\n    print(str(ans) + \" \" + str(inp.count(ans)))\n\nt = int(input())\nfor i in range(0, t): solve()", "cases = int(input())\nfor case in range(cases):\n    n = int(input())\n    freq = [0]*10001\n    a = list(map(int,input().split()))\n    \n    largest = 1\n    for i in range(n):\n        freq[a[i]] += 1\n        largest = max(largest,a[i])\n    most = 0\n    for num in range(largest+1):\n        if freq[num] > freq[most]:\n            most = num\n    print(most,freq[most])", "def maxcount(lst):\n    op = [0]*max(lst)\n    for i in lst:\n        op[i-1]+=1\n        \n    return op.index(max(op))+1, max(op)\n\nt= int(input())\n\nwhile (t>0):\n    input()\n    lst = [int(i) for i in input().split(' ')]\n    counts = maxcount(lst)\n    for i in counts:\n        print(i, end=' ')    \n    print(\"\")    \n    t-=1 ", "def maxcount(lst):\n    op = [0]*max(lst)\n    for i in lst:\n        op[i-1]+=1\n        \n    return op.index(max(op))+1, max(op)\n\nt= int(input())\n\nwhile (t>0):\n    input()\n    lst = list(map(int, input().split(' ')))\n    counts = maxcount(lst)\n    for i in counts:\n        print(i, end=' ')    \n    print(\"\")    \n    t-=1   ", "n=int(input())\nfor i in range(1,n+1):\n\tk=int(input())\n\tt=[0]*10001\n\ts=input().split()\n\tfor j in range(0,k):\n\t\tl=int(s[j])\n\t\tt[l]+=1\n\tmax=0\n\tfor j in t:\n\t\tif j > max:\n\t\t\tmax = j\n\tfor l,j in enumerate(t):\n\t\tif j == max:\n\t\t\tprint(str(l) + \" \" + str(j))\n\t\t\tbreak\n\n", "# codechef - february 2012 - count of maximum - maxcount.py\n\nt = int(input())\n\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = {}\n    for elem in a:\n        if elem in c:\n            c[elem]+=1\n        else:\n            c[elem]=1\n\n    bestCount = 0\n    best = 0\n    for elem in c:\n        if c[elem]>bestCount:\n            bestCount=c[elem]\n            best = elem\n        elif c[elem]==bestCount and elem<best:\n            best = elem\n            \n    print(best, bestCount)\n", "def main():\n\tno_tcase=int(input())\n\tfor i in range(no_tcase):\n\t\tcountdict={}\n\t\tno_ele=int(input())\n\t\tls=[int(ele) for ele in input().split()]\n\t\tfor ele in range(no_ele):\n\t\t\tif ls[ele] in countdict:\n\t\t\t\tcountdict[ls[ele]]=countdict[ls[ele]]+1\n\t\t\telse:\n\t\t\t\tcountdict[ls[ele]]=1\n\t\tmaxk=ls[0]\t\t\n\t\tmaxval=countdict[maxk]\n\t\tfor key in list(countdict.keys()):\n\t\t\tif countdict[key]>maxval:\n\t\t\t\tmaxk=key\n\t\t\t\tmaxval=countdict[key]\n\t\t\telif countdict[key]==maxval and maxk>key:\n\t\t\t\tmaxk=key\n\t\t\telse:\n\t\t\t\tcontinue\n\t\tprint(maxk,maxval)\n\t\t\ndef __starting_point():\n\tmain()\n\n__starting_point()", "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\nimport sys\nifs = sys.stdin\nofs = sys.stdout\n\nfrom itertools import repeat\nfrom heapq import nlargest\nfrom operator import itemgetter\n\nclass bag(dict):\n\n    def __init__(self, data=()):\n        self.update(data)\n\n    def __missing__(self, key):\n        return 0\n\n    def update(self, other):\n        if hasattr(other, 'items'):\n            super(bag, self).update(other)\n        else:\n            for elem in other:\n                self[elem] += 1\n\n    def __setitem__(self, elem, n):\n        if n <= 0:\n            if elem in self:\n                del self[elem]\n        else:\n            super(bag, self).__setitem__(elem, n)\n\n    def itermultiple(self):\n        for elem, cnt in self.items():\n            for _ in range(cnt):\n                yield elem\n\n    def nitems(self):\n        return sum(self.values())\n\n    def most_common(self, n=None):\n        if n is None:\n            return sorted(iter(self.items()), key=itemgetter(1), reverse=True)\n        else:\n            return nlargest(n, iter(self.items()), key=itemgetter(1))\n\n    def __repr__(self):\n        return '%s(%s)' % (self.__class__.__name__, dict.__repr__(self))\n\n    def add(self, item, n=1):\n        self[item] += n\n\n    def discard(self, item, n=1):\n        self[item] -= n\n\n\ndef solve(A):\n    C = bag(A)\n    MC = C.most_common()\n    e,c = MC.pop(0)\n    c_max = c\n    e_min = e\n    for mc in MC:\n        e,c = mc\n        if c==c_max:\n            if e < e_min:\n                e_min = e\n        else:\n            break\n    return (e_min,c_max)\n\n\ndef numbers_from_line(d=' '):\n    return [int(s) for s in ifs.readline().strip().split(d) if len(s.strip())>0]\n\n\nT = int(ifs.readline())\nfor t in range(1,T+1):\n    n = int(ifs.readline())\n    A = numbers_from_line()\n    v,c = solve(A)\n    ofs.write('%d %d\\n' % (v,c))\n\n\nsys.exit(0)\n", "\nx = int(input())\n\nfor i in range(x) :\n    y = int(input())\n    h = {}\n    k = input()\n    k = k.split(' ')\n    for j in range(y) :\n        if not h.get(k[j]) :\n            h[k[j]] = 1\n        else :\n            h[k[j]] += 1\n    number = 10000\n    occur = 0\n    for key in list(h.keys()) :\n        if h[key] > occur :\n            occur = h[key]\n            number = key\n        elif h[key] is occur :\n            if (int(key) < int(number)) :\n                #print 'key -> ' + key + ' number -> ' + str(number)\n                number = key\n                #print 'new key is ' + number + ' occuring ' + str(number) + ' times'\n    print(str(number) + ' ' + str(occur))\n"]