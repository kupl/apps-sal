["for _ in range(int(input())):\r\n    S = input()\r\n    n = len(S)\r\n    a = n - S.count('a')\r\n    print(2 ** n - 2 ** a)", "for _ in range(int(input())):\n    s=input()\n    n=len(s)\n    c=s.count('a')\n    l=n-c\n    print(pow(2,n)-pow(2,l))\n\n", "for _ in range(int(input())):\n    s=input()\n    n=len(s)\n    c=s.count('a')\n    l=n-c\n    print(pow(2,n)-pow(2,l))\n\n", "try:\r\n    t = int(input())\r\n    for _ in range(t):\r\n        s = input()\r\n        acount = 0\r\n        for i in s:\r\n            if i == \"a\":\r\n                acount+=1\r\n        p = len(s) - acount\r\n        base = 2**(acount) - 1\r\n        print(base * 2**(p))\r\nexcept:\r\n    pass", "# cook your dish here\nt=int(input())\nfor _ in range(t):\n    stringa=input()\n    a=0\n    counter=0\n    for char in stringa:\n        if char=='a':\n            a+=1 \n    print(2**(len(stringa)-a)*(2**a-1))\n", "# cook your dish here\n# code by RAJ BHAVSAR\nimport sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_print_int(x): sys.stdout.write(str(x) + '\\n')\ndef get_print(x): sys.stdout.write(x + '\\n')\n\ndef solve():\n\tfor _ in range(get_int()):\n\t\ts = get_string()\n\t\tn = len(s)\n\t\tcount = 0\n\t\tfor i in s:\n\t\t\tif(i == 'a'):\n\t\t\t\tcount += 1\n\t\tget_print_int((2**n - 1) - (2**(n-count) - 1))\nsolve()", "n=int(input())\nfor _ in range(n):\n    c=0\n    s=input()\n    for i in s:\n        if i=='a':\n            c+= 1 \n    print((2**len(s)-2**(len(s)-c)))# cook your dish here\n", "# def count(a, b): \n# \tm = len(a);n = 1\n# \tlookup = [[0] * (n + 1) for i in range(m + 1)] \n# \tfor i in range(n+1): lookup[0][i] = 0\n# \tfor i in range(m + 1): lookup[i][0] = 1\n# \tfor i in range(1, m + 1): \n# \t\tfor j in range(1, n + 1): \n# \t\t\tif a[i - 1] == b[j - 1]: lookup[i][j] = lookup[i - 1][j - 1] + lookup[i - 1][j]\n# \t\t\telse: lookup[i][j] = lookup[i - 1][j] \n# \treturn lookup[m][n]\n# for _ in range(int(input())):\n# \ta = input()\n# \tb = \"a\"\n# \tprint(count(a, b)) #this just counts the number of times a string occurs, nut the subsequences\n#>>> if there are only a's, then answer is (2**len) - 1\n#>>> if there are len - 1 a's and one diff, then answer is (2**len) - 2\n#>>> if there are len - 1 diff's and one a, then answer is 2**(len - 1)\n#>>> if there are all diff, then answer is 0\n#>>> there has to be a direct relation somewhere...gottit..if there are equal a's and diffs, then answer is 2**len - 2**(len/2)\n#>>> wait a minute...2**len - 2**(len/2) this works for inequalities also (?)\nfor _ in range(int(input())):\n\ta = input();count = 0\n\tfor i in a:\n\t\tif(i != \"a\"): count += 1\n\tprint(2**len(a) - 2**count)", "from math import factorial as fact\nfrom itertools import combinations\nfor _ in range(int(input())):\n    a=input()\n    if \"a\" not in a:\n        print(0)\n        continue\n    ct=a.count(\"a\")\n    ct=\"a\"*ct\n    a=a.replace(\"a\",\"\")\n    count=0\n    for i in range(1,len(a)+1):\n        count+=(fact(len(a))/(fact(i)*(fact(len(a)-i))))\n    ctcount=0\n    for i in range(1,len(ct)+1):\n        ctcount+=len(list(combinations(ct,i)))\n    print(int(count)*ctcount+ctcount)", "# cook your dish here\ndef power(a,b):\n\tif(b==0):\n\t\treturn 1\n\tif(b==1):\n\t\treturn a\n\tif(b%2==1):\n\t\treturn (power(a,b-1)*a)\n\tx=power(a,b/2)\n\treturn (x*x)\nt=int(input())\nwhile(t>0):\n    s=input()\n    b=s.count(\"a\")\n    n=len(s)\n    if(b==0):\n        print(0)\n    else:\n        c=n-b\n        print(power(2,n)-power(2,c))\n    t-=1\n    \n\n", "# cook your dish here\nn = int(input())\nfor i in range(n):\n    w = input()\n    l = len(w)\n    s = 0\n    a = 0\n    for i in w:\n        if i == 'a':\n            a += 1\n            s += 2**(l-a)\n    print(s)", "# cook your dish here\nfor u in range(int(input())):\n    s=input()\n    n=len(s)\n    x=s.count('a')\n    z=n-x\n    s=2**x-1\n    c=2**z\n    print(s*c)\n"]