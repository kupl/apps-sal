["from sys import stdin\n\n\ndef main():\n    cnt = [0] * 2 ** 18\n    t = str.maketrans(\"0123456789\", \"0101010101\")\n    _, *l = stdin.read().splitlines()\n    for sign, s in map(str.split, l):\n        if sign == '?':\n            print(cnt[int(s, 2)])\n        else:\n            cnt[int(s.translate(t), 2)] += 1 if sign == '+' else -1\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nt=str.maketrans('0123456789','0101010101')\nC=(1<<18)*[0]\nfor _ in range(int(input())):\n\tc,a=input().split()\n\tif'?'==c:print(C[int(a,2)])\n\telse:C[int(a.translate(t),2)]+=1 if'-'!=c else-1\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nt=str.maketrans('0123456789','0101010101')\nC=(1<<18)*[0]\nfor _ in range(int(input())):\n\tc,a=input().split()\n\tif'?'==c:print(C[int(a,2)])\n\telse:C[int(a.translate(t),2)]+=1 if'-'!=c else-1", "\n\ndef convert(strVal):\n    \n    ls = list()\n    for c in strVal:\n        if (ord(c)&1):\n            ls.append('1')\n        else:\n            ls.append('0')\n    \n    \n    a = ''.join(ls)\n    \n    \n    \n    \n    \n    '''strLength = len(strVal)\n    a='0'*strLength\n    \n    \n    i=strLength-1\n    \n    \n    while i>=0:\n        \n        divByTwo =''\n        \n        if (ord(strVal[i])&1):\n            divByTwo='1'\n        else:\n            divByTwo='0'\n        \n        if i==(strLength-1):\n            a= a[:i] +divByTwo\n        elif i==0:\n            a= divByTwo + a[1:]\n        else:\n            a = a[:i]+divByTwo+a[i+1:]\n        \n        i-=1'''\n        #aLength-=1\n    \n    return int(a)\n\nfrom collections import defaultdict\ninputList=defaultdict(int)\n\ninputNum = int(input())\n\n#print (inputNum)\n\n#iterate n times and do changes in each iteration\nfor  x in range(0,inputNum):\n    inputStr=input()\n    \n    firstValue = inputStr[0]\n    secondValue = inputStr[2:]\n    \n    if firstValue!='?':\n        convertedValue = convert(secondValue)\n        #print(secondValue)\n        #print(convertedValue)\n    #print (convertedValue)\n    \n    # + case\n    if firstValue=='+':\n        #plusVal = int(convertedValue)\n        inputList[convertedValue]+=1\n    \n    # - case\n    elif firstValue=='-':\n        #minusVal = int(convertedValue)\n        inputList[convertedValue]-=1\n    \n    # ? case\n    elif firstValue=='?':\n        patString = int(secondValue)\n        count=inputList[patString]\n        print(count)                    \n        \n \n#print(inputList) \n       \n#print(inputList)        \n'''for x in inputList:\n    print('{}, {}', x, inputList[x])'''\n        \n        \n\n\n", "t=int(input())\nT=str.maketrans('0123456789','0101010101')\nl=[0]*300000\nfor _ in ' '*t:\n    a,b=input().split()\n    if a=='?':print(l[int(b,2)])\n    else:l[int(b.translate(T),2)]+=1if a=='+'else -1", "t=int(input())\nT=str.maketrans('0123456789','0101010101')\nd={}\nfor _ in ' '*t:\n    a,b=input().split()\n    b=int(b.translate(T))\n    if a=='?':print(d.get(b,0))\n    elif a=='+':d[b]=d.get(b,0)+1\n    else:d[b]-=1", "t=int(input())\nT=str.maketrans('0123456789','0101010101')\nd={}\nfor _ in ' '*t:\n    a,b=input().split()\n    b=int(b.translate(T))\n    if a=='?':print(d.get(b,0))\n    elif a=='+':d[b]=d.get(b,0)+1\n    else:d[b]-=1", "n = int(input())\na = []\nwk1 = \"0\" * 18\nrules = str.maketrans(\"0123456789\", \"0101010101\")\ntrans = lambda x : str.translate(x, rules)\nd = {}\nfor _ in range(n):\n    x, y = input().split()\n    y = int(trans(y), 2)\n    if x == \"+\":\n        d[y] = d.get(y, 0) + 1\n    elif x == \"-\":\n        d[y] -= 1\n    elif x == \"?\":\n        print(d.get(y, 0))\n\n\n", "cnt = [0]*262200\ntrans = str.maketrans('0123456789', '0101010101')\nt = int(input())\nfor _ in range(t):\n    o, a = input().split()\n\n    if o == '+':\n        cnt[int(a.translate(trans), 2)] += 1\n    elif o == '-':\n        cnt[int(a.translate(trans), 2)] -= 1\n    else:\n        print(cnt[int(a, 2)])\n", "n = int(input())\n\nd = {}\n\ndef get_mask(num):\n    res = ''\n    for el in num:\n        if (int(el) & 1):\n            res += '1'\n        else:\n            res += '0'\n\n    return '0' * (18 - len(num)) + res\n    \n\nfor _ in range(n):\n    c, v = input().split(' ')\n    if c == '?':\n        v = '0' * (18 - len(v)) + v\n        if v in d.keys():\n            print(d[v])\n        else:\n            print(0)\n    elif c == '+':\n        v = get_mask(v)\n        if v in d.keys():\n            d[v] += 1\n        else:\n            d[v] = 1\n    else:\n        v = get_mask(v)\n        d[v] -= 1", "n = int(input())\n\nd = {}\n\ndef get_mask(num):\n    res = ''\n    for el in num:\n        if (int(el) & 1):\n            res += '1'\n        else:\n            res += '0'\n\n    return '0' * (18 - len(num)) + res\n    \n\nfor _ in range(n):\n    c, v = input().split(' ')\n    if c == '?':\n        v = '0' * (18 - len(v)) + v\n        \n        if d.get(v) != None:\n            print(d[v])\n        else:\n            print(0)\n    elif c == '+':\n        v = get_mask(v)\n        if d.get(v) != None:\n            d[v] += 1\n        else:\n            d[v] = 1\n    else:\n        v = get_mask(v)\n        d[v] -= 1", "from collections import defaultdict\nclass trie:\n    def __init__(self):\n        self.nodes1,self.nodes2 = None,None\n        self.count1,self.count2 = 0,0\n\n    def add(self,s,i):\n        if i>=len(s):\n            return\n        md = int(s[i])%2\n        if md==0:\n            if not self.nodes1:\n                self.nodes1 = trie()\n\n            self.count1 += 1\n            self.nodes1.add(s,i+1)\n        else:\n            if not self.nodes2:\n                self.nodes2 = trie()\n\n            self.count2 += 1\n            self.nodes2.add(s,i+1)\n    \n    def remove(self,s,i):\n        if i>=len(s):\n            return\n        md = int(s[i])%2\n        if md==0:\n            self.count1 -= 1\n            self.nodes1.remove(s,i+1)\n            if self.count1==0:\n                self.nodes1 = None\n        else:\n            self.count2 -= 1\n            self.nodes2.remove(s,i+1)\n            if self.count2==0:\n                self.nodes2 = None\n    \n    def search(self,s,i,mn):\n        if i>=len(s):\n            return mn\n        md = int(s[i])%2\n        if md==0:\n            if self.nodes1:\n                return self.nodes1.search(s,i+1,min(mn,self.count1))\n            else:\n                return 0\n        else:\n            if self.nodes2:\n                return self.nodes2.search(s,i+1,min(mn,self.count2))\n            else:\n                return 0\n\n\n\nt = int(input())\n# tr = trie()\nst = set('02468')\nmp = defaultdict(int)\nres = []\nwhile t>0:\n    t-=1\n    c,s = input().split()\n    # s = s.zfill(18)\n    if c=='+':\n        # ss = [str(int(i)%2) for i in s]\n        ss = ''\n        for i in s:\n            if i in st:\n                ss += '0'\n            else:\n                ss += '1'\n\n        # ss = ''.join(ss)\n        mp[int(ss,2)]+=1\n        # print('**',ss,int(ss,2))\n        # tr.add(s,0)\n    elif c=='-':\n        # ss = [str(int(i)%2) for i in s]\n        # ss = ''.join(ss)\n        ss = ''\n        for i in s:\n            if i in st:\n                ss += '0'\n            else:\n                ss += '1'\n        mp[int(ss,2)]-=1\n        # tr.remove(s,0)\n    elif c=='?':\n        # v = tr.search(s,0,10**6)\n        # print(v)\n        # print('##',ss,int(ss,2))\n        res.append(mp[int(s,2)])\n\nprint(*res,sep='\\n')", "t = int(input())\nrules = str.maketrans(\"0123456789\", \"0101010101\")\ntrans = lambda x : str.translate(x, rules)\ncnt, res = {}, []\nfor _ in range(t):\n    op, n = input().split()\n    n = int(trans(n), 2)\n    if op == '+':\n        cnt[n] = cnt.get(n, 0) + 1\n    elif op == '-':\n        cnt[n] -= 1\n    else:\n        print(cnt.get(n, 0))\n", "t = int(input())\nrules = str.maketrans(\"0123456789\", \"0101010101\")\ntrans = lambda x : str.translate(x, rules)\ncnt, res = {}, []\nfor _ in range(t):\n    op, n = input().split()\n    n = int(trans(n), 2)\n    if op == '+':\n        cnt[n] = cnt.get(n, 0) + 1\n    elif op == '-':\n        cnt[n] -= 1\n    else:\n        res.append(str(cnt.get(n, 0)))\nprint('\\n'.join(res))\n", "from sys import stdin\nd,res,elem={},'','0101010101'\nfor _ in range(int(stdin.readline())):\n    c,x=map(str,stdin.readline().split())\n    if c!='?':\n        x=[*x]\n        x=[elem[int(y)] for i,y in enumerate(x)]\n        x=''.join(x)\n    x=x[x.find('1'):]\n    if c=='+':\n        if d.get(x)==None:d[x]=0\n        d[x]+=1\n    elif c=='-':d[x]-=1\n    else:\n        if d.get(x)==None:res+='0'+'\\n'\n        else:res+=str(d[x])+'\\n'\nprint(res)", "from sys import stdin\nd,res,elem={},'','0101010101'\na=lambda:stdin.readline().split()\nfor _ in range(int(stdin.readline())):\n    c,x=map(str,a())\n    if c!='?':\n        x=[*x]\n        x=[elem[int(y)] for i,y in enumerate(x)]\n        x=''.join(x)\n    x=x[x.find('1'):]\n    if c=='+':\n        if d.get(x)==None:d[x]=0\n        d[x]+=1\n    elif c=='-':d[x]-=1\n    else:\n        if d.get(x)==None:res+='0'+'\\n'\n        else:res+=str(d[x])+'\\n'\nprint(res)", "LVL = 18\nfrom collections import defaultdict\n\n\ndef pattern_repr(x):\n    rep = [1 if int(x) % 2 else 0 for x in x]\n    return [0] * (LVL - len(rep)) + rep\n\n\nclass Node:\n    def __init__(self, key, node_id=0):\n        self.key = key\n        self.node_id = node_id\n        self.left = None\n        self.right = None\n\n\nclass CodeforcesTask713ASolution:\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        for _ in range(self.t):\n            self.queries.append(input().split(\" \"))\n\n    def process_task(self):\n        res = []\n        root = Node(0, 1)\n        node_id = 2\n        treesol = False\n        if treesol:\n            for query in self.queries:\n                if query[0] in \"+-\":\n                    pattern = pattern_repr(query[1])\n                    #print(pattern)\n                    current = root\n                    while pattern:\n                        #print(current.node_id)\n                        if pattern[0]:\n                            # going right\n                            if current.right:\n                                current = current.right\n                            else:\n                                current.right = Node(0, node_id)\n                                current = current.right\n                                node_id += 1\n                        else:\n                            # going left\n                            if current.left:\n                                current = current.left\n                            else:\n                                current.left = Node(0, node_id)\n                                current = current.left\n                                node_id += 1\n                        pattern = pattern[1:]\n                    current.key += 1 if query[0] == \"+\" else -1\n                    #print(current.key, current.node_id)\n                else:\n                    pattern = [int(x) for x in \"0\" * (LVL - len(query[1])) + query[1]]\n                    current = root\n                    #print(pattern)\n                    while pattern:\n                        if pattern[0]:\n                            # going right\n                            if current.right:\n                                current = current.right\n                            else:\n                                current = Node(0)\n                                pattern = []\n                        else:\n                            # going left\n                            if current.left:\n                                current = current.left\n                            else:\n                                current = Node(0)\n                                pattern = []\n                        pattern = pattern[1:]\n                    res.append(current.key)\n        else:\n            counts = defaultdict(int)\n            for query in self.queries:\n\n                if query[0] in \"+-\":\n                    pattern = \"0\" * (LVL - len(query[1])) + \"\".join((\"1\" if int(x) % 2 else \"0\" for x in query[1]))\n                    counts[pattern] += 1 if query[0] == \"+\" else -1\n                else:\n                    pattern = \"0\" * (LVL - len(query[1])) + query[1]\n                    res.append(counts[pattern])\n\n        self.result = \"\\n\".join([str(x) for x in res])\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask713ASolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "# -*- coding: utf-8 -*-\n\n# Baqir Khan\n# Software Engineer (Backend)\n\nfrom collections import defaultdict\nfrom sys import stdin\n\ninp = stdin.readline\n\n\ndef convert_num(number):\n    number_list = list(map(int, number))\n    res = \"\".join(str(d & 1) for d in number_list)\n    return \"0\" * (18 - len(res)) + res\n\n\ndef convert_pattern(pattern):\n    return \"0\" * (18 - len(pattern)) + pattern\n\n\nt = int(inp())\nmultiset = defaultdict(int)\n\nwhile t:\n    t -= 1\n    op, item = inp().split()\n    if op == \"+\":\n        multiset[convert_num(item)] += 1\n    elif op == \"-\":\n        multiset[convert_num(item)] -= 1\n    else:\n        print(multiset[convert_pattern(item)])\n"]