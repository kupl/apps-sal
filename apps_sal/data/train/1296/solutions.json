["import sys\nsys.setrecursionlimit(10**8)\n\nMOD = 10**9+7\n\nfac = [0]*(10**5+1)\ndef pre() :\n fac[0] = 1\n for i in range(1,10**5+1) :\n  fac[i] = fac[i-1]*i\n  fac[i] = fac[i]%MOD\n\ndef dfs(gp , vertex , visited , deg , ans) :\n visited[vertex] = 1\n stack = []\n stack.append(vertex)\n while len(stack)>0 :\n  vertex = stack.pop()\n  ans = ans%MOD * fac[deg[vertex]]%MOD\n  ans %= MOD\n  for i in gp[vertex] :\n   if not visited[i] :\n    visited[i] = 1\n    if vertex in gp[i] :\n     deg[i] -= 1\n    stack.append(i)\n return ans%MOD\n\npre()\nfor __ in range(eval(input())) :\n n = eval(input())\n deg = [0]*(n+1)\n st = [[] for __ in range(n+1)]\n for _ in range(n-1) :\n  a , b = list(map(int,sys.stdin.readline().split()))\n  st[a].append(b)\n  st[b].append(a)\n  deg[a] += 1\n  deg[b] += 1\n k = eval(input())\n visited = [0]*(n+1)\n print(dfs(st ,k,visited,deg , 1)%MOD)\n  \n", "import sys\nsys.setrecursionlimit(10**8)\n\nMOD = 10**9+7\n\nfac = [0]*(10**5+1)\ndef pre() :\n fac[0] = 1\n for i in range(1,10**5+1) :\n  fac[i] = fac[i-1]*i\n  fac[i] = fac[i]%MOD\n\ndef dfs(gp , vertex , visited , deg , ans) :\n visited[vertex] = 1\n stack = []\n stack.append(vertex)\n while len(stack)>0 :\n  vertex = stack.pop()\n  ans = ans%MOD * fac[deg[vertex]]%MOD\n  ans %= MOD\n  for i in gp[vertex] :\n   if not visited[i] :\n    visited[i] = 1\n    if vertex in gp[i] :\n     deg[i] -= 1\n    stack.append(i)\n return ans%MOD\n\npre()\nfor __ in range(eval(input())) :\n n = eval(input())\n deg = [0]*(n+1)\n st = [[]]*(n+1)\n for _ in range(n-1) :\n  a , b = list(map(int,sys.stdin.readline().split()))\n  st[a].append(b)\n  st[b].append(a)\n  deg[a] += 1\n  deg[b] += 1\n k = eval(input())\n ans = 1\n visited = [0]*(n+1)\n print(dfs(st ,k,visited,deg , 1)%MOD)\n  \n", "import sys\nsys.setrecursionlimit(10**9+7)\n\nMOD = 10**9+7\n\nfac = [0]*(10**5+1)\ndef pre() :\n fac[0] = 1\n for i in range(1,10**5+1) :\n  fac[i] = fac[i-1]*i\n  fac[i] = fac[i]%MOD\n\ndef dfs(gp , vertex , visited , deg , ans) :\n visited[vertex] = 1\n ans = ans%MOD * fac[deg[vertex]]%MOD\n ans %= MOD\n for i in gp[vertex] :\n  if not visited[i] :\n   if vertex in gp[i] :\n    deg[i] -= 1\n   return dfs (gp , i , visited , deg , ans)\n return ans%MOD\n\npre()\nfor __ in range(eval(input())) :\n n = eval(input())\n deg = [0]*(n+1)\n st = [[]]*(n+1)\n for _ in range(n-1) :\n  a , b = list(map(int,sys.stdin.readline().split()))\n  st[a].append(b)\n  st[b].append(a)\n  deg[a] += 1\n  deg[b] += 1\n k = eval(input())\n ans = 1\n visited = [0]*(n+1)\n print(dfs(st ,k,visited,deg , 1)%MOD)\n  \n", "import sys\n\nMOD = 10**9+7\n\nfac = [0]*(10**5+1)\ndef pre() :\n fac[0] = 1\n for i in range(1,10**5+1) :\n  fac[i] = fac[i-1]*i\n  fac[i] = fac[i]%MOD\n\ndef dfs(gp , vertex , visited , deg , ans) :\n visited[vertex] = 1\n ans = ans * fac[deg[vertex]]\n ans %= MOD\n for i in gp[vertex] :\n  if not visited[i] :\n   if vertex in gp[i] :\n    deg[i] -= 1\n   return dfs (gp , i , visited , deg , ans)\n return ans%MOD\n\npre()\nfor __ in range(eval(input())) :\n n = eval(input())\n deg = [0]*(n+1)\n st = [[]]*(n+1)\n for _ in range(n-1) :\n  a , b = list(map(int,sys.stdin.readline().split()))\n  st[a].append(b)\n  st[b].append(a)\n  deg[a] += 1\n  deg[b] += 1\n k = eval(input())\n ans = 1\n visited = [0]*(n+1)\n print(dfs(st ,k,visited,deg , 1)%MOD)\n  \n", "import sys\n\nMOD = 10**9+7\n\nfac = [0]*(10**5+1)\ndef pre() :\n fac[0] = 1\n for i in range(1,10**5+1) :\n  fac[i] = fac[i-1]*i\n  fac[i] = fac[i]%MOD\n\ndef dfs(gp , vertex , visited , deg , ans) :\n visited[vertex] = 1\n ans = ans * fac[deg[vertex]]\n ans %= MOD\n for i in gp[vertex] :\n  if not visited[i] :\n   if vertex in gp[i] :\n    deg[i] -= 1\n   return dfs (gp , i , visited , deg , ans)\n return ans%MOD\n\npre()\nfor __ in range(eval(input())) :\n n = eval(input())\n deg = [0]*(n+1)\n st = [[]]*(10**5+1)\n for _ in range(n-1) :\n  a , b = list(map(int,sys.stdin.readline().split()))\n  st[a].append(b)\n  st[b].append(a)\n  deg[a] += 1\n  deg[b] += 1\n k = eval(input())\n ans = 1\n visited = [0]*(n+1)\n print(dfs(st ,k,visited,deg , 1)%MOD)\n  \n", "import queue, fractions\nclass Node:\n def __init__(self, i):\n  self.val = i\n  self.children = []\nmod = 10**9+7\nfor t in range(int(input())):\n n = int(input())\n d = []\n for i in range(n+1):\n  d.append(Node(i))\n edges = []\n for i in range(n-1):\n  a, b = list(map(int, input().split()))\n  d[a].children.append(b)\n  d[b].children.append(a)\n root = int(input())\n l = len(d[root].children)\n ans = 1\n while (l>0):\n  ans*=l\n  ans%=mod\n  l-=1\n \n for i in d[root].children :\n  count = 0\n  # get leaf nodes\n  q = queue.Queue()\n  q.put((i, root))\n  while (not q.empty()):\n   #print \"size \",q.qsize()\n   n, p = q.get()\n   #print n,p, \"- pop\"\n   flag = 1\n   for c in (d[n].children):\n    if (c!=p):\n     q.put((c,n))\n     flag = 0\n   if (flag == 1):\n    count+=1\n  #print count\n  ans *= count\n  ans %= mod\n print(ans)\n #print \"*****\"\n"]