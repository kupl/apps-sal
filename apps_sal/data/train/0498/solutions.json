["class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         if len(nums)==1:\n             return nums[0]\n         return max(self.helper(nums[1:]), self.helper(nums[:-1]))\n         \n     def helper(self,nums):\n         now = prev = 0\n         for nxt in nums:\n             now, prev = max(nxt+prev, now), now\n         return now\n", "class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)==1: return nums[0]\n         last, now= 0, 0\n         for i in nums[:-1]: last, now = now, max(last+i, now)\n         ret=now\n         last, now= 0, 0\n         for i in nums[1:]: last, now = now, max(last+i, now)\n         return max(ret, now)", "class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         if len(nums) == 1:\n             return nums[0]\n         if len(nums) <= 3:\n             return max(nums)\n         def rob_line(lst):\n             last, now = 0, 0\n             for i in lst:\n                 last, now = now, max(now, last + i)\n             return now\n         return max(rob_line(nums[:-1]), rob_line(nums[1:]))", "class Solution:\n     def helper(self, nums, cache = {}):\n         if len(nums) == 0:\n             return 0\n         key = str(nums)\n         if key in cache:\n             return cache[key]\n         cache[key] = max(nums[0] + self.helper(nums[2:]), self.helper(nums[1:]))\n         return cache[key]\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         return max(nums[0] + self.helper(nums[2:-1]), nums[-1] + self.helper(nums[1:-2]), self.helper(nums[1:-1]))", "class Solution:\n     def helper(self, nums, cache = {}):\n         if len(nums) == 0:\n             return 0\n         key = str(nums)\n         if key in cache:\n             return cache[key]\n         cache[key] = max(nums[0] + self.helper(nums[2:]), self.helper(nums[1:]))\n         return cache[key]\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         cache = {}\n         return max(nums[0] + self.helper(nums[2:-1], cache), nums[-1] + self.helper(nums[1:-2], cache), self.helper(nums[1:-1], cache))", "class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         l = len(nums)\n         if l==0: return 0\n         \n         if l==1: return nums[0]\n         \n         if l==2: return max(nums)\n         \n         dp1=[None]*l\n         dp2=[None]*l\n         dp1[0]=nums[0]\n         dp1[1]=max(nums[0], nums[1])\n         \n         for i in range(2,l-1):\n             dp1[i]=max(dp1[i-2]+nums[i], dp1[i-1])\n         print(dp1)\n         \n         dp2[1]=nums[1]\n         dp2[2]=max(nums[1],nums[2])\n         for i in range(3, l):\n             dp2[i]=max(dp2[i-2]+nums[i], dp2[i-1])\n         print(dp2)\n             \n         return max(dp1[l-2], dp2[l-1])", "class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"        \n         mem = {}\n         \n         def max_money(start, rob_first=False):\n             if start >= len(nums):\n                 return 0\n             \n             # Cannot steal from last house if stole from first house\n             if start == len(nums) - 1 and rob_first:\n                 return 0\n             \n             if (start, rob_first) in mem:\n                 return mem[(start, rob_first)]\n             \n             if start == 0:\n                 mem[(start, rob_first)] = max(max_money(start+1, False),    # Don't rob first house\n                                               nums[start] + max_money(start+2, True))   # Rob first house\n             else:\n                 mem[(start, rob_first)] = max(max_money(start+1, rob_first),\n                                               nums[start] + max_money(start+2, rob_first))\n             \n             return mem[(start, rob_first)]\n         \n         return max_money(0)\n             \n             \n             \n             \n             \n             \n             \n", "class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         \n         ymax = [nums[i] for i in range(len(nums))]\n         nmax = [nums[i] for i in range(len(nums))]\n         nmax[0] = 0\n         \n         if len(nums) > 1:\n             ymax[1] = max(ymax[0], ymax[1])\n         \n         for i in range(2, len(nums)):\n             if i == len(nums) - 1:\n                 ymax[i] = ymax[i - 1]\n             else:\n                 ymax[i] = max(ymax[i - 1], ymax[i - 2] + ymax[i])\n             \n             nmax[i] = max(nmax[i - 1], nmax[i - 2] + nmax[i])\n             \n         return max(nmax[-1], ymax[-1])", "class Solution:\n     def helper(self, nums, cache = {}):\n         if len(nums) == 0:\n             return 0\n         key = str(nums)\n         if key in cache:\n             return cache[key]\n         cache[key] = max(nums[0] + self.helper(nums[2:], cache), self.helper(nums[1:], cache))\n         return cache[key]\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 0\n         cache = {}\n         return max(nums[0] + self.helper(nums[2:-1], cache), nums[-1] + self.helper(nums[1:-2], cache), self.helper(nums[1:-1], cache))", "class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)==0:\n             return 0\n         if len(nums)<=2:\n             return max(nums[0],nums[-1])\n         \n         a = [0 for _ in range(len(nums) - 1)]\n         b = a.copy()\n         c=b.copy()\n         a[0]=nums[0]\n         b[0]=nums[-1]\n \n         for i in range(1, len(nums) - 1):\n             a[i] = max(a[i - 1], a[i - 2] + nums[i])\n             b[i] = max(b[i - 1], b[i - 2] + nums[-i-1])\n         return max(a[-1],b[-1])", "class Solution:\n     def rob_prev(self, nums):\n         n = len(nums)\n         if n == 0:\n             return 0\n         elif n < 3:\n             return max(nums)\n         mem = [0 for x in range(n+1) ]\n         mem[0] = nums[0]\n         mem[1] = max(nums[1], nums[0])\n         for i in range(2,n):\n             mem[i] = max(mem[i-2] + nums[i], mem[i-1])\n         return mem[n-1]\n     def rob(self, nums):\n         n = len(nums)\n         if n == 0:\n             return 0\n         elif n < 3:\n             return max(nums)\n         return max(self.rob_prev(nums[1:]), self.rob_prev(nums[:len(nums)-1]))\n         \n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n", "class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         if len(nums) == 1:\n             return nums[0]\n         \n         def helper(nums):\n             steal = 0\n             cool = 0\n             for num in nums:\n                 steal, cool = cool, max(cool, steal + num)\n             return max(steal, cool)\n         \n         return max(helper(nums[:-1]), helper(nums[1:]))", "class Solution:\n     def rob(self, nums):\n         def helper(nums):\n             if not nums: return 0\n             dp=[0]*(len(nums)+1)\n             dp[1]=nums[0]\n             for i in range(2, len(nums)+1):\n                 dp[i]=max(dp[i-1], nums[i-1]+dp[i-2])\n             return dp[-1]\n \n         if not nums: return 0\n         if len(nums)==1: return nums[0]\n         # rob the last house or not, calculate the maximum\n         return max(helper(nums[:len(nums)-1]), nums[-1]+helper(nums[1:len(nums)-2]))", "class Solution:\n     def rob(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         mark = [0 for i in range(len(nums))]\n         result = list(mark)\n         if len(nums) == 1:\n             return nums[0]\n         if len(nums) == 2:\n             return max(nums[0], nums[1])\n \n         mark[0] = 1\n         result[0] = nums[0]\n         if nums[0] > nums[1]:\n             mark [1] = 1\n             result[1] = nums[0]\n         else:\n             result[1] = nums[1]\n             \n         for i in range(2, len(nums)):\n             result[i] = max(nums[i]+result[i-2], result[i-1])\n             if nums[i]+result[i-2] > result[i-1]:\n                 mark[i] = mark[i-2]\n             else:\n                 mark[i] = mark[i-1]\n \n         if mark[0] == 1 and mark[-1] == 1:\n             return max(self.solve(nums[1:]),self.solve(nums[:-1]))\n         return result[-1]\n     \n     def solve(self, nums):\n         if not nums:\n             return 0\n         if len(nums) == 1:\n             return nums[0]\n         if len(nums) == 2:\n             return max(nums[0], nums[1])\n         result = [0 for i in range(len(nums))]\n         result[0] = nums[0]\n         result[1] = max(nums[0], nums[1])\n         for i in range(2, len(nums)):\n             result[i] = max(nums[i]+result[i-2], result[i-1])\n         return result[-1]\n         \n         \n         \n"]