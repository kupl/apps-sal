["class Solution:\n     def countNumbersWithUniqueDigits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         ls = [1,10,91]\n         mul = 9\n         \n         res = 0\n         for i in range(8):\n             mul = 9\n             m = 9\n             for j in range(i+2):\n                 mul *= m\n                 m -= 1\n             #print(mul)\n             ls.append(mul +ls[-1])\n         if n >=9:\n             return ls[9]\n         else:\n             return ls[n]\n", "class Solution:\n     def countNumbersWithUniqueDigits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         answer = 10 ** n\n         for i in range(1, n + 1):\n             all_count = 9 * 10 ** (i - 1)\n             invalid = 9\n             for j in range(1, i):\n                 invalid *= (10 - j)\n             answer -= (all_count - invalid)\n         \n         return answer", "class Solution:\n     def countNumbersWithUniqueDigits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         choices = [9, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n         ans, product = 1, 1\n         \n         for i in range(n if n <= 10 else 10):\n             product *= choices[i]\n             ans += product\n             \n         return ans        ", "class Solution:\n     def countNumbersWithUniqueDigits(self, n):\n         if n == 0: return 1\n         if n > 10: return self.countNumbersWithUniqueDigits(10)\n         count = 0\n         for i in range(1, n + 1):  # number of digits\n             temp = 1\n             for j in range(i):\n                 temp *= 10 - j\n             if temp > 10:\n                 temp = temp // 10 * 9\n             count += temp\n         return count", "class Solution:\n     def countNumbersWithUniqueDigits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         digits = [1, 10, 91, 739, 5275, 32491, 168571, 712891, 2345851, 5611771, 8877691]\n         if n < len(digits):\n             return digits[n]\n         \n         return digits[-1]", "class Solution:\n     def countNumbersWithUniqueDigits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 0:\n             return 1\n         ans = 10\n         d = 9\n         prod = 9\n         for i in range(2, n+1):\n             prod *= d\n             d -= 1\n             ans += prod\n         return ans", "class Solution:\n     def countNumbersWithUniqueDigits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 0:\n             return 1\n         digits = [9,9,8,7,6,5,4,3,2,1]\n         ans = 0\n         while n > 0:\n             if n == 1:\n                 ans += 10\n             else:\n                 res = 1\n                 for i in range(n):\n                     res *= digits[i]\n                 ans += res\n             n -= 1\n         return ans", "class Solution:\n     def countNumbersWithUniqueDigits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n ==0:\n             return 1\n         elif n == 1:\n             return 10\n         else:\n             return (self.countNumbersWithUniqueDigits(n-1) - self.countNumbersWithUniqueDigits(n-2))*(11-n) + self.countNumbersWithUniqueDigits(n-1)"]