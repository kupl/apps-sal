["import sys\n\ndef GRIG(L):\n\n    LENT = len(L)\n    MINT = 1\n    GOT = 0\n\n    DY = [ [{x: 0 for x in range(0, 10)}, 0, 0] ]\n\n    for i in L:\n\n        DY.append([{x: 0 for x in range(0, 10)}, 0, 0])\n        GOT += 1\n\n        for j in range(0, GOT):\n\n            if DY[j][0][i] == 1:\n                DY[j][0][i] = 0\n                DY[j][1] -= 1\n            else:\n                DY[j][0][i] = 1\n                DY[j][1] += 1\n\n            DY[j][2] += 1\n\n            if DY[j][1] <= 1 and DY[j][2] > MINT:\n                MINT = DY[j][2]\n\n    return MINT\n\nTESTCASES = int(input().strip())\n\nfor i in range(0, TESTCASES):\n    \n    L = [int(x) for x in list(input().strip())]\n    \n    print(GRIG(L))\n", "import sys\r\nimport math\r\nfrom collections import defaultdict,Counter\r\n\r\n# input=sys.stdin.readline\r\n# def print(x):\r\n#     sys.stdout.write(str(x)+\"\\n\")\r\n\r\n# sys.stdout=open(\"CP1/output.txt\",'w')\r\n# sys.stdin=open(\"CP1/input.txt\",'r')\r\n\r\ndef possible(n1,n):\r\n\t# d=defaultdict(int)\r\n\todd=set()\r\n\t# even=set()\r\n\tfor j in range(n):\r\n\t\t# print(odd)\r\n\t\tif s[j] in odd:\r\n\t\t\todd.remove(s[j])\r\n\t\t\t# even.add(s[j])\r\n\t\telse:\r\n\t\t\todd.add(s[j])\r\n\t\t# d[s[j]]+=1\r\n\t\t# print(odd)\r\n\t\tif j<n1-1:\r\n\t\t\tcontinue\r\n\t\t# print(j)\r\n\t\tif len(odd)<=1:\r\n\t\t\treturn True\r\n\r\n\t\tif s[j-n1+1] in odd:\r\n\t\t\todd.remove(s[j-n1+1])\r\n\t\t\t# even.add(s[j])\r\n\t\telse:\r\n\t\t\todd.add(s[j-n1+1])\r\n\treturn False\r\n# m=pow(10,9)+7\r\nt=int(input())\r\nfor i in range(t):\r\n\ts=input().strip()\r\n\tn=len(s)\r\n\tans=0\r\n\tfor j in range(n,0,-1):\r\n\t\tif possible(j,n):\r\n\t\t\tans=j\r\n\t\t\tbreak\r\n\tprint(ans)\r\n\t# low=1\r\n\t# high=n\r\n\t# while low<=high:\r\n\t# \tmid=(low+high)//2\r\n\t# \tif mid%2==0:\r\n\t# \t\tif low%2==0:\r\n\t# \t\t\tlow+=1\r\n\t# \t\t\tmid+=1\r\n\t# \t\telif high%2==0:\r\n\t# \t\t\thigh-=1\r\n\t# \t\t\tmid-=1\r\n\t# \t# if low>high:\r\n\t# \t# \tbreak\r\n\t# \tif possible(mid,n):\r\n\t# \t\tlow=mid+1\r\n\t# \telse:\r\n\t# \t\thigh=mid-1\r\n\t# \tprint(mid,low,high)\r\n\t# print(mid)\r\n", "import sys\r\nimport math\r\nfrom collections import defaultdict,Counter\r\n\r\n# input=sys.stdin.readline\r\n# def print(x):\r\n#     sys.stdout.write(str(x)+\"\\n\")\r\n\r\n# sys.stdout=open(\"CP1/output.txt\",'w')\r\n# sys.stdin=open(\"CP1/input.txt\",'r')\r\n\r\ndef possible(n1,n):\r\n\t# d=defaultdict(int)\r\n\todd=set()\r\n\t# even=set()\r\n\tfor j in range(n):\r\n\t\t# print(odd)\r\n\t\tif s[j] in odd:\r\n\t\t\todd.remove(s[j])\r\n\t\t\t# even.add(s[j])\r\n\t\telse:\r\n\t\t\todd.add(s[j])\r\n\t\t# d[s[j]]+=1\r\n\t\t# print(odd)\r\n\t\tif j<n1-1:\r\n\t\t\tcontinue\r\n\t\t# print(j)\r\n\t\tif len(odd)<=1:\r\n\t\t\treturn True\r\n\r\n\t\tif s[j-n1+1] in odd:\r\n\t\t\todd.remove(s[j-n1+1])\r\n\t\t\t# even.add(s[j])\r\n\t\telse:\r\n\t\t\todd.add(s[j-n1+1])\r\n\treturn False\r\n# m=pow(10,9)+7\r\nt=int(input())\r\nfor i in range(t):\r\n\ts=list(input())\r\n\tn=len(s)\r\n\tans=1\r\n\tfor j in range(n,1,-1):\r\n\t\tif possible(j,n):\r\n\t\t\tans=j\r\n\t\t\tbreak\r\n\tprint(ans)\r\n\t# low=1\r\n\t# high=n\r\n\t# while low<=high:\r\n\t# \tmid=(low+high)//2\r\n\t# \tif mid%2==0:\r\n\t# \t\tif low%2==0:\r\n\t# \t\t\tlow+=1\r\n\t# \t\t\tmid+=1\r\n\t# \t\telif high%2==0:\r\n\t# \t\t\thigh-=1\r\n\t# \t\t\tmid-=1\r\n\t# \t# if low>high:\r\n\t# \t# \tbreak\r\n\t# \tif possible(mid,n):\r\n\t# \t\tlow=mid+1\r\n\t# \telse:\r\n\t# \t\thigh=mid-1\r\n\t# \tprint(mid,low,high)\r\n\t# print(mid)\r\n", "from collections import defaultdict\r\nt = int(input())\r\nfor _ in range(t):\r\n    s = input()\r\n    s = list(s)\r\n    l = s[:]\r\n    n = len(s)\r\n    ans = 0\r\n    if n<=1000:\r\n        if n<=100:\r\n            l = []\r\n            for i in range(n):\r\n                for j in range(i+1,n):\r\n                    l.append(s[i:j])\r\n            ans = 0\r\n            for i in l:\r\n                dic = defaultdict(lambda:0)\r\n                for j in i:\r\n                    dic[j]+=1\r\n                cnt = 0\r\n                for k in dic.keys():\r\n                    if dic[k]%2==1:\r\n                        cnt+=1\r\n                if cnt<=1:\r\n                    ans = max(ans,len(i))\r\n            print(ans)\r\n            continue\r\n        for i in range(n):\r\n            dic = defaultdict(lambda:0)\r\n            unmatched = 0\r\n            for j in range(i,n):\r\n                dic[l[j]]+=1 \r\n                if dic[l[j]]%2==1:\r\n                    unmatched+=1\r\n                else:\r\n                    unmatched-=1 \r\n                if unmatched<=1:\r\n                    ans = max(ans,j-i+1) \r\n        \r\n        print(ans)\r\n    else:\r\n        for i in range(n):\r\n            dic = defaultdict(lambda:0)\r\n            unmatched = 0\r\n            for j in range(i+1,n):\r\n                dic[l[j]]+=1 \r\n                if dic[l[j]]%2==1:\r\n                    unmatched+=1\r\n                else:\r\n                    unmatched-=1 \r\n                if unmatched<=1:\r\n                    ans = max(ans,j-i+1) \r\n        \r\n        print(ans)", "import sys\r\nimport math\r\nfrom collections import defaultdict,Counter\r\n\r\n# input=sys.stdin.readline\r\n# def print(x):\r\n#     sys.stdout.write(str(x)+\"\\n\")\r\n\r\n# sys.stdout=open(\"CP1/output.txt\",'w')\r\n# sys.stdin=open(\"CP1/input.txt\",'r')\r\n\r\ndef possible(n1,n):\r\n\t# d=defaultdict(int)\r\n\todd=set()\r\n\t# even=set()\r\n\tfor j in range(n):\r\n\t\t# print(odd)\r\n\t\tif s[j] in odd:\r\n\t\t\todd.remove(s[j])\r\n\t\t\t# even.add(s[j])\r\n\t\telse:\r\n\t\t\todd.add(s[j])\r\n\t\t# d[s[j]]+=1\r\n\t\t# print(odd)\r\n\t\tif j<n1-1:\r\n\t\t\tcontinue\r\n\t\t# print(j)\r\n\t\tif len(odd)==1:\r\n\t\t\treturn True\r\n\r\n\t\tif s[j-n1+1] in odd:\r\n\t\t\todd.remove(s[j-n1+1])\r\n\t\t\t# even.add(s[j])\r\n\t\telse:\r\n\t\t\todd.add(s[j-n1+1])\r\n\treturn False\r\n# m=pow(10,9)+7\r\nt=int(input())\r\nfor i in range(t):\r\n\ts=list(input())\r\n\tn=len(s)\r\n\tans=1\r\n\tfor j in range(n,1,-1):\r\n\t\tif possible(j,n):\r\n\t\t\tans=j\r\n\t\t\tbreak\r\n\tprint(ans)\r\n\t# low=1\r\n\t# high=n\r\n\t# while low<=high:\r\n\t# \tmid=(low+high)//2\r\n\t# \tif mid%2==0:\r\n\t# \t\tif low%2==0:\r\n\t# \t\t\tlow+=1\r\n\t# \t\t\tmid+=1\r\n\t# \t\telif high%2==0:\r\n\t# \t\t\thigh-=1\r\n\t# \t\t\tmid-=1\r\n\t# \t# if low>high:\r\n\t# \t# \tbreak\r\n\t# \tif possible(mid,n):\r\n\t# \t\tlow=mid+1\r\n\t# \telse:\r\n\t# \t\thigh=mid-1\r\n\t# \tprint(mid,low,high)\r\n\t# print(mid)\r\n", "import sys\n\ndef GRIG(L):\n\n    MINT = 1\n    GOT = 0\n\n    DY = [[set(), 0, 0]]\n    L_DY = 0\n\n    for i in L:\n\n        L_DY += 1\n        DY.append([set(), 0, 0])\n\n        for j in range(L_DY - 1, -1, -1):\n            if i in DY[j][0]:\n                DY[j][0].remove(i)\n                DY[j][1] -= 1\n            else:\n                DY[j][0].add(i)\n                DY[j][1] += 1\n\n            DY[j][2] += 1\n            if (DY[j][2] > MINT and DY[j][1] <= 1):\n                MINT = DY[j][2]\n\n    return MINT\n\nTESTCASES = int(input().strip())\n\nfor i in range(0, TESTCASES):\n    \n    L = [int(x) for x in list(input().strip())]\n    \n    print(GRIG(L))\n", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    s = input()\n    s = list(s)\n    l = s[:]\n    n = len(s)\n    ans = 0\n    \n    if n<=100:\n        l = []\n        for i in range(n):\n            for j in range(i+1,n):\n                l.append(s[i:j])\n        ans = 0\n        for i in l:\n            dic = defaultdict(lambda:0)\n            for j in i:\n                dic[j]+=1\n            cnt = 0\n            for k in dic.keys():\n                if dic[k]%2==1:\n                    cnt+=1\n            if cnt<=1:\n                ans = max(ans,len(i))\n        print(ans)\n        continue\n    for i in range(n):\n        dic = defaultdict(lambda:0)\n        unmatched = 0\n        for j in range(i,n):\n            dic[l[j]]+=1 \n            if dic[l[j]]%2==1:\n                unmatched+=1\n            else:\n                unmatched-=1 \n            if unmatched<=1:\n                ans = max(ans,j-i+1) \n            \n        \n    print(ans)", "from sys import stdin\r\n\r\n#stdin = open(\"input\", \"r\")\r\n\r\nfor _ in range(int(stdin.readline())):\r\n    s = stdin.readline().strip()\r\n    m = 1\r\n    for i in range(len(s)):\r\n        k = set()\r\n        k.add(s[i])\r\n        for j in range(i + 1, len(s)):\r\n            if s[j] in k:\r\n                k.remove(s[j])\r\n            else:\r\n                k.add(s[j])\r\n            if len(k) < 2:\r\n                m = max(m, j - i + 1)\r\n    print(m)\r\n", "# cook your dish here\ndef isgood(s):\n    c=0\n    for i in set(s):\n        k=s.count(i)\n        if k%2 and c:\n            return 0\n        elif k%2:\n            c=1\n    #print(s)\n    return 1\ntc=int(input())\nfor i in range(tc):\n    flag=0\n    s=input()\n    n=len(s)\n    g=n\n    while g:\n        for i in range(n-g+1):\n            if isgood(s[i:i+g]):\n                print(g)\n                flag=1\n                break\n        g-=1\n        if flag:\n            break\n", "# cook your dish here\ndef isgood(s):\n    c=0\n    for i in set(s):\n        k=s.count(i)\n        if k%2:\n            c+=1 \n        if c==2:\n            return 0\n    #print(s)\n    return 1\ntc=int(input())\nfor i in range(tc):\n    flag=0\n    s=input()\n    n=len(s)\n    g=n\n    while g:\n        for i in range(n-g+1):\n            if isgood(s[i:i+g]):\n                print(g)\n                flag=1\n                break\n        g-=1\n        if flag:\n            break\n", "# cook your dish here\ndef isgood(s):\n    c=0\n    for i in set(s):\n        k=s.count(i)\n        if k%2:\n            c+=1 \n        if c==2:\n            return 0\n    #print(s)\n    return 1\ntc=int(input())\nfor i in range(tc):\n    flag=0\n    s=input()\n    n=len(s)\n    g=n\n    while g:\n        for i in range(n-g+1):\n            if isgood(s[i:i+g]):\n                print(g)\n                flag=1\n                break\n        g-=1\n        if flag:\n            break\n"]