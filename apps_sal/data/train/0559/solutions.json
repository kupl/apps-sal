["import math\nimport copy\ntry:\n import psyco\n psyco.full()\nexcept ImportError:\n pass\n \ndef isSharp(ang):\n return ang > math.pi/4 + 0.00001\n \ndef unitVector(p2, p1):\n d0 = p2[0] - p1[0]\n d1 = p2[1] - p1[1]\n d = math.sqrt(d0*d0 + d1*d1)\n if d != 0:\n  return [d0/d, d1/d]\n return [0, 0]\n \ndef compVectors(P):\n V = []\n for i in range(1,len(P)):\n  v = unitVector(P[i], P[i-1])\n  if v[0] == 0 and v[1] == 0:\n   return None\n  V.append(v)\n return V\n \ndef angle(v2, v1):\n d = v2[0]*v1[0] + v2[1]*v1[1]\n if d > 1:\n  d = 1\n if d < -1:\n  d = -1\n return math.acos(d)\n \ndef compAngles(V):\n A = []\n for i in range(len(V)-1):\n  A.append(angle(V[i+1], V[i]))\n return A\n \ndef updateAngles(i, P, V, A):\n if i-1 >= 0:\n  V[i-1] = unitVector(P[i], P[i-1])\n if i+1 < len(P):\n  V[i] = unitVector(P[i+1], P[i])\n if i-2 >= 0:\n  A[i-2] = angle(V[i-1], V[i-2])\n if i-1 >= 0 and i+1 < len(P):\n  A[i-1] = angle(V[i], V[i-1])\n if i+2 < len(P):\n  A[i] = angle(V[i+1], V[i])\n \ndef checkMoves(check, P, V, A, filled):\n for i in check:\n  if i < 0 or i >= len(P):\n   break\n  x, y = P[i]\n  for j in range(51):\n   for k in range(51):\n    P[i][0] = j\n    P[i][1] = k\n    if str(P[i]) in filled:\n     continue\n    updateAngles(i, P, V, A)\n    fixed = True\n    if i-2 >= 0:\n     if isSharp(A[i-2]):\n      fixed = False\n    if i-1 >= 0 and i-1 < len(A):\n     if isSharp(A[i-1]):\n      fixed = False\n    if i < len(A):\n     if isSharp(A[i]):\n      fixed = False\n    if fixed:\n     return True\n  P[i] = [x, y]\n  updateAngles(i, P, V, A) \n return False\n    \n \ndef canFix(first, last, P, V, A, filled):\n d = last - first\n if d > 2:\n  return False\n if d == 2:\n  check = [first+2]\n if d == 1:\n  check = [first+1, first+2]\n if d == 0:\n  check = [first, first+1, first+2]\n if checkMoves(check, P, V, A, filled):\n  return True\n return False\n \nT=int(input())\nfor i in range(T):\n N=int(input())\n P=[]\n V=[]\n filled={}\n for i in range(N):\n  P.append(list(map(int,input().split())))\n  filled[str(P[i])] = 1\n V = compVectors(P)\n A = compAngles(V)\n blunt = True\n first = -1\n last = -1\n for i in range(len(A)):\n  if isSharp(A[i]):\n   blunt = False\n   last = i\n   if first < 0:\n     first = i\n if blunt:\n  print('yes yes')\n else:\n  if canFix(first, last, P, V, A, filled):\n   print('no yes')\n  else:\n   print('no no') ", "import math\nimport copy\ntry:\n import psyco\n psyco.full()\nexcept ImportError:\n pass\n \ndef isSharp(ang):\n return ang > math.pi/4 + 0.00001\n \ndef unitVector(p2, p1):\n d0 = p2[0] - p1[0]\n d1 = p2[1] - p1[1]\n d = math.sqrt(d0*d0 + d1*d1)\n if d != 0:\n  return [d0/d, d1/d]\n return [0, 0]\n \ndef compVectors(P):\n V = []\n for i in range(1,len(P)):\n  v = unitVector(P[i], P[i-1])\n  if v[0] == 0 and v[1] == 0:\n   return None\n  V.append(v)\n return V\n \ndef angle(v2, v1):\n d = v2[0]*v1[0] + v2[1]*v1[1]\n if d > 1:\n  d = 1\n if d < -1:\n  d = -1\n return math.acos(d)\n \ndef compAngles(V):\n A = []\n for i in range(len(V)-1):\n  A.append(angle(V[i+1], V[i]))\n return A\n \ndef updateAngles(i, P, V, A):\n if i-1 >= 0:\n  V[i-1] = unitVector(P[i], P[i-1])\n if i+1 < len(P):\n  V[i] = unitVector(P[i+1], P[i])\n if i-2 >= 0:\n  A[i-2] = angle(V[i-1], V[i-2])\n if i-1 >= 0 and i+1 < len(P):\n  A[i-1] = angle(V[i], V[i-1])\n if i+2 < len(P):\n  A[i] = angle(V[i+1], V[i])\n \ndef checkMoves(check, P, V, A, filled):\n for i in check:\n  if i < 0 or i >= len(P):\n   break\n  x, y = P[i]\n  for j in range(51):\n   for k in range(51):\n    P[i][0] = j\n    P[i][1] = k\n    if str(P[i]) in filled:\n     continue\n    updateAngles(i, P, V, A)\n    fixed = True\n    if i-2 >= 0:\n     if isSharp(A[i-2]):\n      fixed = False\n    if i-1 >= 0 and i-1 < len(A):\n     if isSharp(A[i-1]):\n      fixed = False\n    if i < len(A):\n     if isSharp(A[i]):\n      fixed = False\n    if fixed:\n     return True\n  P[i] = [x, y]\n  updateAngles(i, P, V, A) \n return False\n    \n \ndef canFix(first, last, P, V, A, filled):\n d = last - first\n if d > 2:\n  return False\n if d == 2:\n  check = [first+2]\n if d == 1:\n  check = [first+1, first+2]\n if d == 0:\n  check = [first, first+1, first+2]\n if checkMoves(check, P, V, A, filled):\n  return True\n return False\n \nT=int(input())\nfor i in range(T):\n N=int(input())\n P=[]\n V=[]\n filled={}\n for i in range(N):\n  P.append(list(map(int,input().split())))\n  filled[str(P[i])] = 1\n V = compVectors(P)\n A = compAngles(V)\n blunt = True\n first = -1\n last = -1\n for i in range(len(A)):\n  if isSharp(A[i]):\n   blunt = False\n   last = i\n   if first < 0:\n     first = i\n if blunt:\n  print('yes yes')\n else:\n  if canFix(first, last, P, V, A, filled):\n   print('no yes')\n  else:\n   print('no no') "]