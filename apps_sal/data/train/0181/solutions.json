["class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(prices)\n         \n         if n < 2: return 0\n         \n         sells = [0] * n\n         buys = [0] * n\n         \n         buys[0] = -prices[0]\n         \n         for i in range(1, n):\n             sells[i] = max(sells[i-1], buys[i-1] + prices[i])\n             buys[i] = max(buys[i-1], (sells[i-2] if i > 1 else 0) - prices[i])\n             \n         return sells[n-1]", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices:\n             return 0\n         sell = hold = 0\n         buy = -prices[0]\n         \n         for i in range(1, len(prices)):\n             \n             sell, hold, buy = max(buy + prices[i], 0), max(hold, sell), max(hold-prices[i], buy)\n             \n         return max(sell, hold)", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if prices is None or len(prices) == 0:\n             return 0 \n         # 0 for buy 1 for sell 2 for break\n         dp = [[-9999999]*len(prices) for _ in range(3)]\n         dp[0][0], dp[1][0], dp[2][0] = -prices[0], 0, 0\n         for i in range(1, len(prices)):\n             dp[0][i] = max(dp[0][i-1], dp[2][i-1] - prices[i])\n             dp[1][i] = max(dp[0][i-1] + prices[i], dp[1][i-1])\n             dp[2][i] = max(dp[2][i-1], dp[0][i-1], dp[1][i-1])\n         return max(dp[1][-1], dp[2][-1])\n             \n                          \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(prices)\n         if not n:\n             return 0\n         buys = [None] * n\n         sells = [None] * n\n         sells[0], buys[0] = 0, -prices[0]\n         for x in range(1, n):\n             delta = prices[x] - prices[x - 1]\n             sells[x] = max(buys[x - 1] + prices[x], sells[x - 1] + delta)\n             buys[x] = max(buys[x - 1] - delta, sells[x - 2] - prices[x] if x > 1 else -9999)\n         return max(sells)\n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(prices)\n         if n < 2:\n             return 0\n \n         buy, sell = [0]*n, [0]*n\n         buy[0], buy[1] = -prices[0], -min(prices[0:2])\n         sell[1] = max(0, buy[0] + prices[1])\n         for i in range(2, n):\n             sell[i] = max(sell[i-1], buy[i-1] + prices[i])\n             buy[i] = max(buy[i-1], sell[i-2] - prices[i])\n \n         return sell[-1]        ", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         if not prices or len(prices) == 1:\n             return 0\n         valid_status = [0, [prices[0], -prices[0]], 0]\n         for t in range(1, len(prices)):\n             valid_status[1][0] = prices[t]\n             # cool down status\n             cool_down_temp = sum(valid_status[1])\n             if valid_status[0] > sum(valid_status[1]):\n                 valid_status[1] = [prices[t], valid_status[0] - prices[t]]\n             if valid_status[2] > valid_status[0]:\n                 valid_status[0] = valid_status[2]\n             valid_status[2] = cool_down_temp\n         return max(valid_status[0], valid_status[2])", "class Solution:\n     def maxProfit(self, prices):\n         if not prices:\n             return 0\n         max_buy = [0]*len(prices)\n         max_sell = [0]*len(prices)\n         max_rest = [0]*len(prices)\n \n         max_buy[0] = -prices[0]\n         max_sell[0] = 0\n         max_rest[0] = 0\n \n         for i in range(1, len(prices)):\n             max_buy[i] = max(max_rest[i-1] - prices[i], max_buy[i-1])\n             max_sell[i] = max(max_buy[i-1] + prices[i], max_sell[i-1])\n             max_rest[i] = max(max_sell[i-1], max_rest[i-1])\n                 \n         return max(max_buy[-1], max_sell[-1], max_rest[-1])\n", "class Solution:\n     def maxProfit(self, prices):\n         if not prices:\n             return 0\n         stock = -prices[0]\n         noStock = 0\n         noStockSell = 0\n         \n         for idx in range(len(prices)):\n             price = prices[idx]\n             print(noStock, stock, noStockSell)\n             noStock, stock, noStockSell = [max(price + stock, noStock), max(noStockSell - price, stock), noStock]\n               \n         return noStock", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n \n         free = 0\n         have = cool = float(\"-inf\")\n         for p in prices:\n             free, have, cool = max(free, cool), max(have, free - p), have + p\n         return max(free, cool)\n", "class Solution:\n     def maxProfit(self,prices):\n         if not prices:\n             return 0\n         prices.insert(0,0)\n         prices.insert(0,0)\n         buy=[0]*len(prices)\n         sell=[0]*len(prices)\n         buy[2]=-prices[2]\n     \n         for i in range(3,len(prices)):\n             buy[i]=max(sell[i-2]-prices[i],buy[i-1])\n             sell[i]=max(buy[i-1]+prices[i],sell[i-1])\n         return sell[-1]\n                     \n                     \n                     \n", "class Solution:\n     def maxProfit(self,prices):\n         if not prices:\n             return 0\n         prices.insert(0,0)\n         prices.insert(0,0)\n         buy=[0]*len(prices)\n         sell=[0]*len(prices)\n         buy[2]=-prices[2]\n     \n         for i in range(3,len(prices)):\n             buy[i]=max(sell[i-2]-prices[i],buy[i-1])\n             sell[i]=max(buy[i-1]+prices[i],sell[i-1])\n         return sell[-1]\n                     \n                     \n                     \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         return self.max_profit_rec(prices, {}, 0, 0)\n     \n     def max_profit_rec(self, prices, memo, idx, state):\n         if idx >= len(prices): return 0\n         if (idx, state) in memo: return memo[(idx, state)]\n         memo[(idx, state)] = 0\n         if state == 0:\n             # can buy or ignore\n             memo[(idx, state)] = max(self.max_profit_rec(prices, memo, idx+1, 1) - prices[idx], self.max_profit_rec(prices, memo, idx+1, 0))\n         elif state == 1:\n             # can sell or ignore\n             memo[(idx, state)] = max(self.max_profit_rec(prices, memo, idx+1, 2) + prices[idx], self.max_profit_rec(prices, memo, idx+1, 1))\n         else:\n             # cooldown: must ignore\n             memo[(idx, state)] = self.max_profit_rec(prices, memo, idx+1, 0)\n         return memo[(idx, state)]\n", "class Solution:\n     def maxProfit(self, prices):\n         \n         if len(prices) < 2:\n             return 0\n         \n         prevSell,sell,prevBuy,buy = 0,0,0,-prices[0]\n         \n         for price in prices:\n             prevBuy = buy\n             buy = max(prevBuy,prevSell-price)\n             prevSell = sell\n             sell = max(prevSell,prevBuy+price)\n \n         return sell\n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n             \n", "class Solution:\n     def maxProfit(self, prices):\n         \"\"\"\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"\n         free=0\n         have,cool=float('-inf'),float('-inf')\n         for p in prices:\n             free,have,cool=max(free,cool),max(free-p,have),have+p\n         return max(free,cool)\n"]