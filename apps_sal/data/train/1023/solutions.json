["# cook your dish here\nfor _ in range(int(input())):\n    n = int(input())\n    count = 1\n    l = 3*(n-1)\n    i = 0\n    if n==1:\n        print(1)\n        continue\n    while count<=l-n:\n        for j in range(i+1):\n            if j==i:\n                print(count)\n                count += 1\n            elif j==0:\n                print(count,end=\"\")\n                count += 1\n            else:\n                print(\" \",end=\"\")    \n        i+=1\n    while count<=l:\n        print(count,end=\"\")\n        count += 1\n    print()", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    count=1\n    for i in range(k):\n        for j in range(i+1):\n            if i<k-1:\n                if i==j or j==0:\n                    print(count,end='')\n                    count += 1\n                else:\n                    print(' ',end='')\n            else:\n                print(count,end='')\n                count+=1\n        print()\n                ", "# cook your dish here\n# cook your dish here\ndef solve():\n    n = int(input())\n    #n,m = input().split()\n    #n = int(n)\n    #m = int(m)\n    #s = input()\n    #a = list(map(int, input().split()))\n    it = 1\n    k=1\n    for i in range(n):\n        j=0\n        while j<it:\n            mark=1\n            if (i==n-1 or (j==0 or j==it-1) ): \n                print(k,end=\"\")\n                k+=1\n            else:\n                print(\" \",end=\"\")\n               # continue\n            j+=1\n        print(\"\")\n        it+=1\n        \n            \n    \n    \ndef __starting_point():\n    T = int(input())\n    for i in range(T):\n        #a = solve()\n        #n = len(a)\n        #for i in range(n):\n         #   if i==n-1 : print(a[i])\n          #  else: print(a[i],end=\" \")\n        (solve())\n__starting_point()", "def solve(n):\r\n    c= 1\r\n    r = list(range(1,n+1))\r\n    for i in r:\r\n        x = ''\r\n        if 3<=i<n:\r\n            x+=str(c)\r\n            c+=1\r\n            for j in range(i-2):\r\n                x+=' '\r\n            x+=str(c)\r\n            c+=1\r\n        else:\r\n            for j in range(i):\r\n                x+=str(c)\r\n                c+=1\r\n        print(x)\r\n\r\ndef main():\r\n    t = int(input())\r\n    for i in range(t):\r\n        n = int(input())\r\n        solve(n)\r\n\r\n\r\nmain()\r\n", "def f(n):\r\n    if n==1:\r\n        return print(1)\r\n    \r\n    p = 2\r\n    print(1)\r\n    \r\n    line = 2\r\n    while line < n:\r\n        print(p, \" \"*(line-2), p+1, sep=\"\")\r\n        p += 2\r\n        line += 1\r\n    \r\n    for i in range(n):\r\n        print(p, end=\"\")\r\n        p += 1\r\n    print()\r\n\r\nt = int(input())\r\nanswers = list()\r\nfor _ in range(t):\r\n    n = int(input())\r\n    answers.append(n)\r\n\r\nfor answer in answers:\r\n    f(answer)", "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=0\r\n    xx=2\r\n    if n==1:\r\n        print('1')\r\n    elif n==2:\r\n        print('1')\r\n        print('23')\r\n    else:    \r\n        print('1')\r\n        for _ in range(2,n):\r\n            print(xx,end=\"\")\r\n            xx+=1\r\n            if a>0:\r\n                print(' '*a,end=\"\")\r\n            a+=1\r\n            print(xx)\r\n            xx+=1\r\n        # xx+=1    \r\n        for _ in range(1,n+1):\r\n            print(xx,end=\"\")\r\n            xx+=1\r\n        print()    \r\n            \r\n            \r\n         ", "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\ninp = lambda: list(map(int,sys.stdin.readline().rstrip(\"\\r\\n\").split()))\r\n#______________________________________________________________________________________________________\r\n# from math import *\r\n# from bisect import *\r\n# from heapq import *\r\n# from collections import defaultdict as dd\r\n# from collections import OrderedDict as odict\r\n# from collections import Counter as cc\r\n# from collections import deque\r\n# sys.setrecursionlimit(2*(10**5)+100) this is must for dfs\r\n# mod = 10**9+7; md = 998244353\r\n# ______________________________________________________________________________________________________\r\n# segment tree for range minimum query\r\n# sys.setrecursionlimit(10**5)\r\n# n = int(input())\r\n# a = list(map(int,input().split()))\r\n# st = [float('inf') for i in range(4*len(a))]\r\n# def build(a,ind,start,end):\r\n#   if start == end:\r\n#       st[ind] = a[start]\r\n#   else:\r\n#       mid = (start+end)//2\r\n#       build(a,2*ind+1,start,mid)\r\n#       build(a,2*ind+2,mid+1,end)\r\n#       st[ind] = min(st[2*ind+1],st[2*ind+2])\r\n# build(a,0,0,n-1)\r\n# def query(ind,l,r,start,end):\r\n#   if start>r or end<l:\r\n#       return float('inf')\r\n#   if l<=start<=end<=r:\r\n#       return st[ind]\r\n#   mid = (start+end)//2\r\n#   return min(query(2*ind+1,l,r,start,mid),query(2*ind+2,l,r,mid+1,end))\r\n# ______________________________________________________________________________________________________\r\n# Checking prime in O(root(N))\r\n# def isprime(n):\r\n#     if (n % 2 == 0 and n > 2) or n == 1: return 0\r\n#     else:\r\n#         s = int(n**(0.5)) + 1\r\n#         for i in range(3, s, 2):\r\n#             if n % i == 0:\r\n#                 return 0\r\n#         return 1\r\n# def lcm(a,b):\r\n#   return (a*b)//gcd(a,b)\r\n# ______________________________________________________________________________________________________\r\n# nCr under mod\r\n# def C(n,r,mod):\r\n#   if r>n:\r\n#       return 0\r\n#   num = den = 1\r\n#   for i in range(r):\r\n#       num = (num*(n-i))%mod\r\n#       den = (den*(i+1))%mod\r\n#   return (num*pow(den,mod-2,mod))%mod\r\n# M = 10**5 +10\r\n# ______________________________________________________________________________________________________\r\n# For smallest prime factor of a number\r\n# M = 1000010\r\n# pfc = [i for i in range(M)]\r\n# def pfcs(M):\r\n#   for i in range(2,M):\r\n#       if pfc[i]==i:\r\n#           for j in range(i+i,M,i):\r\n#               if pfc[j]==j:\r\n#                   pfc[j] = i\r\n#   return\r\n# pfcs(M)\r\n# ______________________________________________________________________________________________________\r\ntc = 1\r\ntc, = inp()\r\n# a = [0,1]\r\n# for i in range(100000):\r\n#     a.append(a[-1]+a[-2])\r\nfor _ in range(tc):\r\n    n, = inp()\r\n    if n==1:\r\n        print(1)\r\n        continue\r\n    c = 1\r\n    print(1)\r\n    c+=1\r\n    for i in range(n-2):\r\n        print(str(c)+' '*(i)+str(c+1))\r\n        c+=2\r\n    print(*[c+i for i in range(n)],sep = \"\")", "for _ in range(int(input())):\r\n    n=int(input())\r\n    if(n==1):\r\n        print(\"1\")\r\n        continue\r\n    print(\"1\")\r\n    r=2\r\n    for i in range(n-2):\r\n        t=str(r)\r\n        t+=\" \"*i\r\n        r+=1\r\n        t+=str(r)\r\n        r+=1\r\n        print(t)\r\n    for i in range(n):\r\n        print(r,end=\"\")\r\n        r+=1\r\n    print()", "from sys import stdin, stdout\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef inp(): return stdin.readline().strip()\ndef out(var, end=\"\\n\"): stdout.write(str(var)+\"\\n\")\ndef outa(*var, end=\"\\n\"): stdout.write(' '.join(map(str, var)) + end)\ndef lmp(): return list(mp())\ndef mp(): return map(int, inp().split())\ndef smp(): return map(str, inp().split())\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\ndef remadd(x, y): return 1 if x%y else 0\ndef ceil(a,b): return (a+b-1)//b\n\ndef isprime(x):\n    if x<=1: return False\n    if x in (2, 3): return True\n    if x%2 == 0: return False\n    for i in range(3, int(sqrt(x))+1, 2):\n        if x%i == 0: return False\n    return True\n    \nfor _ in range(int(inp())):\n    n = int(inp())\n    k = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if j==0 or j==i-1 or i==n: \n                print(k, end=\"\")\n                k+=1\n            else: print(\" \", end=\"\")\n        print()"]