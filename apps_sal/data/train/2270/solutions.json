["# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\nn,X,Y,Z = list(map(int,read().split()))\n\nN = 1<<(X+Y+Z)\nNX = 1<<X\nNY = 1<<(X+Y)\nNZ = 1<<(X+Y+Z)\n\nMX = (1<<X) - 1\nMY = (1<<(Y+X)) - (1<<X)\nMZ = (1<<(X+Y+Z)) - (1<<(Y+X))\n\nMMX = MX<<1\nMMY = MY<<1\nMMZ = MZ<<1\n\ndp = [0]*N\ndp[1] = 1\n\nMOD = 10**9+7\n\nfor _ in range(n):\n    ndp = [0]*N\n    #cnt = 0\n    #bad = 0\n    for mask in range(N):\n        if dp[mask]==0: continue\n        mx = mask&MX\n        my = mask&MY\n        mz = mask&MZ\n        \n        for j in range(1,11):\n            nmx = mx << j\n            nmx &= MMX\n\n            nmy = my << j\n            nmy &= MMY\n\n            nmz = mz << j\n            nmz &= MMZ\n\n            nmask = nmx|nmy|nmz|1\n            if not nmask&(1<<(X+Y+Z)):\n                ndp[nmask] += dp[mask]\n                ndp[nmask] %= MOD\n\n    dp = ndp\n    #print(sum(dp),\"sum\")\n\nans = (pow(10,n,MOD)-sum(dp))\nprint((ans%MOD))\n\n\n", "import sys\ninput = sys.stdin.readline\nimport numpy as np\n\nN,X,Y,Z = map(int,input().split())\n\nMOD = 10 ** 9 + 7\n\n# \u30c0\u30e1\u306a\u3084\u3064\u3092\u6570\u3048\u308b\nL = max(10,X + Y + Z)\ndp = np.zeros(1 << L+1, dtype = np.int64) # \u53f3\u304b\u3089\u898b\u3066\u90e8\u5206\u548c\u3068\u3057\u3066\u8e0f\u3080\u5834\u6240\nrng = np.arange(1 << L+1, dtype=np.int64)\nx575 = (1 << Z) + (1 << (Y+Z)) + (1 << (X+Y+Z))\nbad = ((x575 & rng) == x575)\ndp[1] = 1\n\nfor n in range(N):\n    prev = dp\n    dp = np.zeros_like(prev)\n    for i in range(1, 11):\n        dp[1::1<<i] += prev.reshape(1<<i, 1<<(L+1-i)).sum(axis = 0)\n    dp[bad] = 0\n    dp %= MOD\n\nanswer = pow(10,N,MOD) - dp.sum()\nanswer %= MOD\nprint(answer)", "mod = 1000000007\neps = 10**-9\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    N, x, y, z = list(map(int, input().split()))\n    s = x + y + z\n    m = max(x, y, z)\n    mask_x = (1 << (x + 1)) - 1\n    mask_y = (1 << y) - 1\n    mask_z = (1 << z) - 1\n\n    dp = [0] * (1 << s)\n    dp[1] = 1\n    for _ in range(N):\n        dp_new = [0] * (1 << s)\n        for state in range(1 << s):\n            if dp[state] == 0:\n                continue\n            state_x = state & mask_x\n            state_y = (state >> (x + 1)) & mask_y\n            state_z = (state >> (x + y + 1)) & mask_z\n            for w in range(1, m+1):\n                if z - w - 1 >= 0:\n                    if (state_z >> (z - w - 1)) & 1:\n                        continue\n                if w == z and (state_y >> (y - 1)) & 1:\n                    continue\n                state_new = ((state_x << w) & mask_x) | (((state_y << w) & mask_y) << (x + 1))\\\n                            | (((state_z << w) & mask_z) << (x + y + 1)) | 1\n                if ((state_x >> x) & 1) and w <= y:\n                    state_new |= (1 << (w + x))\n                if ((state_y >> (y - 1)) & 1) and w <= z:\n                    state_new |= (1 << (w + x + y))\n                dp_new[state_new] = (dp_new[state_new] + dp[state])%mod\n            dp_new[1] = (dp_new[1] + (dp[state] * (10 - m))%mod)%mod\n        dp = dp_new\n    ans = pow(10, N, mod)\n    for a in dp:\n        ans = (ans - a)%mod\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]