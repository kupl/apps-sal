["import re\n \n \n class Solution:\n     def removeComments(self, source):\n         \"\"\"\n         :type source: List[str]\n         :rtype: List[str]\n         \"\"\"\n         lines = re.sub('//.*|/\\*(.|\\n)*?\\*/', '', '\\n'.join(source)).split('\\n')\n         return [line for line in lines if line]\n                 ", "class CursorStatus:\n     NOT_IN_COMMENT = 0\n     FIRST_BACKSLASH = 1\n     INLINE_COMMENT_START = 2\n     MULTILINE_COMMENT_START = 3\n     FIRST_STAR_IN_MULTILINE_COMMENT = 4\n \n \n class Solution:\n     def removeComments(self, source):\n         \"\"\"\n         :type source: List[str]\n         :rtype: List[str]\n         \"\"\"\n         resultList = []\n         status = CursorStatus.NOT_IN_COMMENT\n         print(source)\n         for line in source:\n             if status != CursorStatus.MULTILINE_COMMENT_START:\n                 result_line = \"\"\n             temp = \"\"\n             for ch in line:\n                 if status == CursorStatus.NOT_IN_COMMENT:\n                     if ch == '/':\n                         status = CursorStatus.FIRST_BACKSLASH\n                         temp = temp + ch\n                     else:\n                         result_line = result_line + ch\n                 elif status == CursorStatus.FIRST_BACKSLASH:\n                     if ch == '/':\n                         status = CursorStatus.INLINE_COMMENT_START\n                         temp = \"\"\n                     elif ch == '*':\n                         status = CursorStatus.MULTILINE_COMMENT_START\n                         temp = \"\"\n                     else:\n                         status = CursorStatus.NOT_IN_COMMENT\n                         temp = temp + ch\n                         result_line = result_line + temp\n                         temp = \"\"\n                 elif status == CursorStatus.INLINE_COMMENT_START:\n                     status = CursorStatus.NOT_IN_COMMENT\n                     break\n                 elif status == CursorStatus.MULTILINE_COMMENT_START:\n                     if ch == '*':\n                         status = CursorStatus.FIRST_STAR_IN_MULTILINE_COMMENT\n                 elif status == CursorStatus.FIRST_STAR_IN_MULTILINE_COMMENT:\n                     if ch == '/':\n                         status = CursorStatus.NOT_IN_COMMENT\n                     elif ch == '*':\n                         status = CursorStatus.FIRST_STAR_IN_MULTILINE_COMMENT\n                     else:\n                         status = CursorStatus.MULTILINE_COMMENT_START\n \n             if result_line != \"\" and status != CursorStatus.MULTILINE_COMMENT_START:\n                 #print(result_line)\n                 result_line = result_line + temp\n                 resultList.append(result_line)\n         print(resultList)\n         return resultList", "class Solution:\n     def removeComments(self, source):\n         \"\"\"\n         :type source: List[str]\n         :rtype: List[str]\n         \"\"\"\n         block = False\n         res = []\n         buffer = ''\n         for line in source:\n             i = 0\n             while i < len(line):\n                 if line[i] == '/' and i<len(line)-1 and line[i+1] == '/' and not block:   #//\n                     i = len(line)\n                 elif line[i] == '/' and i<len(line)-1 and line[i+1] == '*' and not block:    #'/*'\n                     i += 2\n                     block = True\n                 elif line[i] == '*' and i<len(line)-1 and line[i+1] == '/' and block:     #'*/\n                     i += 2\n                     block = False\n                 else:\n                     if not block: buffer += line[i]\n                     i += 1\n             if buffer and not block:\n                 res.append(buffer)\n                 buffer = ''\n         return res", "class Solution:\n     def removeComments(self, source):\n         \"\"\"\n         :type source: List[str]\n         :rtype: List[str]\n         \"\"\"\n         in_block = False\n         ans = []\n         for line in source:\n             i = 0\n             if not in_block:\n                 newline = []\n             while i < len(line):\n                 if line[i:i+2] == '/*' and not in_block:\n                     in_block = True\n                     i += 1\n                 elif line[i:i+2] == '*/' and in_block:\n                     in_block = False\n                     i += 1\n                 elif not in_block and line[i:i+2] == '//':\n                     break\n                 elif not in_block:\n                     newline.append(line[i])\n                 i += 1\n             if newline and not in_block:\n                 ans.append(\"\".join(newline))\n \n         return ans\n", "S1 = 1\n S2 = 2\n S3 = 3\n S4 = 4\n S5 = 5\n \n class Solution(object):\n \n     def __init__(self):\n         self.state = S1\n \n     def removeComments(self, source):\n         \"\"\"\n         :type source: List[str]\n         :rtype: List[str]\n         \"\"\"\n         ret = []\n         buf = []\n         for s in source:\n             for c in s:\n                 if self.state in [S1, S2]:\n                     buf.append(c)\n                 elif self.state == S4:\n                     if len(buf) >= 2 and buf[len(buf) - 2: len(buf)] == ['/','*']:\n                         buf.pop()\n                         buf.pop()\n                 elif self.state == S3:\n                     if len(buf) >= 2 and buf[len(buf) - 2: len(buf)] == ['/', '/']:\n                         buf.pop()\n                         buf.pop()\n                 self._transite(c)\n             self._transite('\\n')\n             if len(buf) != 0 and self.state in [S1, S2]:\n                 ret.append(''.join(buf))\n                 buf = []\n         return ret\n \n \n     def _transite(self, char):\n         if self.state == S1:\n             if char == '/':\n                 self.state = S2\n             else:\n                 self.state = S1\n         elif self.state == S2:\n             if char == '/':\n                 self.state = S3\n             elif char == '*':\n                 self.state = S4\n             else:\n                 self.state = S1\n \n         elif self.state == S3:\n             if char == '\\n':\n                 self.state = S1\n             else:\n                 self.state = S3\n \n         elif self.state == S4:\n             if char == '*':\n                 self.state = S5\n             else:\n                 self.state = S4\n \n         elif self.state == S5:\n             if char == '/':\n                 self.state = S1\n             elif char == '*':\n                 self.state = S5\n             else:\n                 self.state = S4\n         return self.state", "import re\n \n \n class Solution:\n     def removeComments(self, source):\n         \"\"\"\n         :type source: List[str]\n         :rtype: List[str]\n         \"\"\"\n         lines = re.sub('//.*|/\\*(.|\\n)*?\\*/', '', '\\n'.join(source)).split('\\n')\n         return list(filter(None, lines))\n", "class Solution:\n     def removeComments(self, source):\n         \"\"\"\n         :type source: List[str]\n         :rtype: List[str]\n         \"\"\"\n         return [ code for code in re.sub('//.*|/\\*(.|\\n)*?\\*/', '', '\\n'.join(source)).split('\\n') if len(code) > 0 ]", "class Solution:\n     def removeComments(self, source):\n         \"\"\"\n         :type source: List[str]\n         :rtype: List[str]\n         \"\"\"\n         t = '\\n'.join(source)\n         \n         p = re.compile(r'//.*|/\\*(.|\\n)*?\\*/')\n         \n         t = p.sub('', t)\n         \n         return list(filter(None, t.split('\\n')))"]