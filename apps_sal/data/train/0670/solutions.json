["def gcd(a,b):\n if b==0:\n  return a\n else:\n  return gcd(b,a%b)\n \ndef main():\n t=int(input())\n while t!=0:\n  t=t-1\n  n=int(input())\n  if n==1:\n   print(input())\n  else:\n   a=list(map(int,input().split(\" \")))\n   p=a[0]\n   for i in range(1,n):\n    p=gcd(p,a[i])\n    if p==1:\n     break\n   print(n*p)\ndef __starting_point():\n main()\n  \n  \n\n__starting_point()", "for i in range(int(input())):\n n = int(input())\n a = sorted([int(i) for i in input().split()])\n m = False\n d = []\n for i in range(1, n):\n  if a[i] - a[i - 1] != 0:\n   d.append(a[i] - a[i - 1])\n  if a[i] - a[i - 1] != 0 and a[0] % (a[i] - a[i - 1]) != 0:\n   m = True\n   break\n if m:\n  print(n)\n else:\n  if not d:\n   print(a[0] * n)\n  else:\n   d = sorted(d)\n   print(n * d[0])", "import fractions\nfor i in range(eval(input())):\n n,z=eval(input()),list(map(int,input().split()))\n q=z[0]\n for __ in range(1,n): q=fractions.gcd(q,z[__])\n print(q*n)\n", "t = eval(input())\nwhile t != 0:\n t -= 1\n n = eval(input())\n a = list(map(int,input().split()))\n a = sorted(a)\n diff = a[0] \n for i in range(1,n):\n  if a[i] - a[i-1] < diff and a[i] - a[i-1] > 0:\n   diff = a[i] - a[i-1]\n print(diff * n)\n\n", "from fractions import *\nfor _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n q=a[0]\n for i in range(1,n):\n  q=gcd(a[i],q)\n  if q==1:\n   break\n print(q*n)", "'''\nCreated on 22-Nov-2015\n\n@author: root1\n'''\n\nfrom fractions import gcd\n\n\ndef read_int():\n return int(input())\n\n\ndef read_int_list():\n return [int(x) for x in input().split()]\n\n\ndef __gcd(lst):\n result = 0\n for num in lst:\n  result = gcd(result, num)\n return result\n\n\ndef main():\n tc = read_int()\n for _ in range(tc):\n  n = read_int()\n  print(n * __gcd(read_int_list()))\n\ndef __starting_point():\n main()\n\n__starting_point()", "import math\nfrom functools import reduce\ndef gcd(a,b):\n while b:\n  a,b=b,a%b\n return a\ndef GCD(list):\n return reduce(gcd,list)\nfor _ in range(eval(input())):\n n=eval(input())\n s=list(map(int,input().split()))\n ans=GCD(s)\n print(ans*n)", "from fractions import gcd as G\nfor ii in range(eval(input())):\n n=eval(input())\n arr=list(map(int,input().split()))\n k=arr[0]\n for i in range(1,n-1):\n  k=G(k,arr[i])\n print(k*n)\n  \n  \n", "from functools import reduce\ndef GCD(a,b):\n \n a = abs(a)\n b = abs(b)\n while a:\n   \n  a, b = b%a, a\n return b\n  \n  \ndef GCD_List(list):\n \n \n return reduce(GCD, list)\na=eval(input())\nwhile(a):\n\n x=eval(input())\n b=list(map(int,input().split()))\n print(GCD_List(b)*x)\n \n \n  \n\n\n a-=1\n", "def gcd (a,b):\n if (a == 0):\n  return b\n if (b == 0):\n  return a\n if (a>b):\n  return gcd(a%b,b)\n else:\n  return gcd(a,b%a)\nfor t in range(int(input())): \n n = int(input())\n a = list(map(int,input().split()))\n g = a[0]\n for i in range(1,n):\n  g = gcd(a[i],g)\n  if (g==1):\n   break\n print(g*n)\n", "from fractions import gcd\nfrom functools import reduce\na=eval(input())\nwhile(a):\n\n x=eval(input())\n b=list(map(int,input().split()))\n print(reduce(gcd,(b))*x)\n \n  \n\n\n a-=1\n", "from fractions import gcd\nfor _ in range(int(input())):   \n n = int(input())\n a = list(map(int, input().split()))\n res = a[0]\n for i in a[1:]:\n  res= gcd(res, i)\n print(res * len(a)) ", "from math import ceil\nfor i in range(eval(input())):\n n = eval(input())\n arr = list(map(int,input().split()))\n while max(arr)!=min(arr):\n  arr.sort()\n  mini = float(arr[0])\n  for i in range(n):\n   fac = int(ceil(arr[i]/mini)) - 1\n   arr[i] -= mini*fac\n print(int(sum(arr)))\n", "t = eval(input())\nfor _ in range(t):\n n = eval(input())\n num = [int(i) for i in input().split()]\n num.sort()\n ans = num[0]\n for i in range(1,n):\n  if(num[i]!=num[i-1]):\n   ans = min(ans,num[i]-num[i-1])\n print(ans*n)\n", "from fractions import gcd\nfrom functools import reduce\n\nt = int(input())\nfor tt in range(t):\n n = int(input())\n arr = list(map(int, input().split()))\n g = reduce(lambda x,y: gcd(x,y), arr)\n print(g * n)\n", "from fractions import gcd\nt = eval(input())\nfor _ in range(t):\n n = eval(input())\n a = [int(x) for x in input().strip().split()]\n s = a[0]\n for i in range(1,n):\n  s = gcd(s,a[i])\n print(s*n)", "from fractions import gcd\n\nfor t in range(eval(input())):\n  n = eval(input())\n  ans = 0\n  for x in map( int, input().split() ):\n    ans = gcd( ans, x )\n  print(ans*n)"]