["class Solution:\n    arr = []\n    \n    def simplifiedFractions(self, n: int) -> List[str]:\n        ans = []\n        \n        if len(Solution.arr) < 2:\n            Solution.arr = [[],[]]\n            \n        if n >= len(Solution.arr):\n            for d in range(len(Solution.arr), n + 1):\n                denominator = \\\"/\\\" + str(d)\n                Solution.arr.append([])\n                \n                for num in range(1, d):\n                    if gcd(num, d) == 1:\n                        Solution.arr[-1].append(str(num) + denominator)\n                    \n                    \n        for i in range(2, n + 1):\n            ans += Solution.arr[i]\n                \n        return ans\n                    \n                \n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        if n == 1:\n            return []\n        k = 0\n        ret = []\n        for i in range(2, n + 1):\n            if i in primes:\n                ret += [\\\"%d/%d\\\" % (j, i) for j in range(1, i)]\n            else:\n                dPrimes = []\n                for p in primes:\n                    if p * 2 > i:\n                        break\n                    if i % p == 0:\n                        dPrimes.append(p)\n                tmp = set(range(1, i))\n                for p in dPrimes:\n                    for j in range(p, i, p):\n                        tmp.discard(j)\n                ret += [\\\"%d/%d\\\" % (j, i) for j in tmp]\n        return ret", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        fractions = []\n        decimals = set()\n        \n        for i in range(1, n + 1):\n            for x in range (1, i + 1):\n                if (x % i != 0 and x/i not in decimals):\n                    decimals.add(x/i)\n                    fractions.append(str(x) + \\\"/\\\" + str(i))\n                    \n        return fractions\n    \n            ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        fractions = []\n        decimals = set()\n        \n        for denom in range(1, n + 1):\n            for num in range(1, denom + 1):\n                if num % denom != 0 and num/denom not in decimals: # we don't want whole numbers, so num % denom != 0\n                    decimals.add(num/denom)\n                    fractions.append(str(num) + '/' + str(denom))\n                    \n        return fractions", "import math\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def recurse(curr_n):\n            if curr_n == 1:\n                return []\n            else:\n                curr_arr = []\n                init_val = '1/' + str(curr_n)\n                curr_arr.append(init_val)\n                for i in range(2,curr_n):\n                    denom = str(curr_n)\n                    if math.gcd(curr_n, i) == 1:\n                        # cant be simplified anymore\n                        numer = str(i)\n                        val = numer + '/' + denom\n                        curr_arr.append(val)\n                return curr_arr + recurse(curr_n-1)\n            \n        return recurse(n)", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(x,y):\n            while(y):\n                x,y=y,x%y\n            return x\n    \n        result = []\n        for i in range(2,n+1):\n            for j in range(1,i):\n                if(gcd(i,j)==1):\n                    result.append(str(j)+\\\"/\\\"+str(i))\n        return result\n                    \n            \n            \n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n               \n        return [f\\\"{j}/{d}\\\" for d in range(2, n+1) for j in range(1, d) if gcd(max(d,j), min(d,j)) == 1]\n                    \n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                if self.gcd(i, j) == 1:\n                    res.append(str(i) + '/' + str(j))\n        return res\n            \n    def gcd(self, a, b):\n        while b:\n            a, b = b, a % b\n        return abs(a)", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for j in range(2,n+1):\n            for i in range(1,j):\n                if math.gcd(i,j) == 1:\n                    res.append(str(i)+\\\"/\\\"+str(j))\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for i in range(2, n + 1):\n            res.append('1/' + str(i))\n        for i in range(2, n):\n            for j in range(i + 1, n + 1):\n                if self.gcd(i, j) == 1:\n                    res.append(str(i) + '/' + str(j))\n        return res\n            \n    def gcd(self, a, b):\n        while b:\n            a, b = b, a % b\n        return abs(a)", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        # observations:\n        # - gcd can't be anything bigger than half the number\n        result = []\n        seen = set()\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                gcd = math.gcd(i, j)\n                c_i = i\n                c_i //= gcd\n                j //= gcd\n                if (j, c_i) not in seen:\n                    seen.add((j, c_i))\n                    result.append(\\\"{}/{}\\\".format(j, c_i))\n        return result", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        r = set()\n        \n        for i in range(2, n+1):\n            for j in range(1, i):\n                cd = gcd(i, j)\n                r.add(str(j//cd)+'/'+str(i//cd))\n                \n        return r", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        if n == 1:\n            return []\n        \n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        ret = []\n        \n        for i in range(2, n + 1):\n            if i in primes:\n                ret += [\\\"%d/%d\\\" % (j, i) for j in range(1, i)]\n            else:\n                tmpPrimes = []\n                for p in primes:\n                    if p * 2 > i:\n                        break\n                    if i % p == 0:\n                        tmpPrimes.append(p)\n                tmp = set(range(1, i))\n                for p in tmpPrimes:\n                    for j in range(p, i, p):\n                        tmp.discard(j)\n                ret += [\\\"%d/%d\\\" % (j, i) for j in tmp]\n        return ret", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(x, y):\n            return y if x == 0 else gcd(y % x, x)\n        \n        return [\\\"%s/%s\\\" % (i, j) for j in range(2, n + 1) for i in range(1, j) if gcd(i, j) == 1]", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        s = set()\n        for i in range(1, n+1):\n            for j in range(1,i):\n                if i%j!=0 or j ==1: \n                    if j/i not in s:\n                        res.append(str(j)+'/'+str(i))\n                        s.add(j/i)\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ret = []\n        \n        def gcd(numerator, denominator):\n            if numerator == 0:\n                return denominator\n            return gcd(denominator % numerator, numerator)\n            \n            \n            \n            \n        for numerator in range(1, n + 1):\n            for denominator in range(numerator + 1, n + 1):\n                if numerator != denominator:\n                    if gcd(numerator, denominator) == 1:\n                        ret.append(str(numerator) + '/' + str(denominator))\n        return ret", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        \n        def gcd(a, b):\n            if a<b:\n                a, b = b, a\n            while b!=0:\n                a, b = b, a%b\n            return a\n        \n        # print (gcd(6, 4))\n        \n        sol = []\n        for denom in range(2, n+1):\n            for numer in range(1, denom):\n                if numer==1 or gcd(numer, denom)==1:\n                    sol.append(str(numer)+'/'+str(denom))\n        return sol\n                    \n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        outputs = []\n        \n        for i in range(2, n + 1):\n            for j in range(1, i):\n                if self._gcd(i, j) == 1:\n                    outputs.append(f'{j}/{i}')\n                    \n                    \n        return outputs\n    \n    def _gcd(self, i:int, j: int):\n        if i > j:\n            i, j = j, i\n        res = j % i\n        if res == 0:\n            return i\n        else:\n            return self._gcd(i, res)\n            \n", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                if gcd(i, j) == 1:\n                    res.append('{}/{}'.format(i, j))\n        return res", "class Solution:\n    def findGCD(self, a: int, b: int) -> int:\n        a, b = (a, b) if a > b else (b, a)\n        while a != 1 or b != 1:\n            if a % b:\n                a, b = b, a % b\n            else:\n                break\n            \n        return b\n    \n    def simplifiedFractions(self, n: int) -> List[str]:\n        ret = set()\n        for denominator in range(2, n+1):\n            for numerator in range(1, denominator):\n                gcd = self.findGCD(denominator, numerator)\n                ret.add(f'{numerator // gcd}/{denominator // gcd}')\n            \n        return list(ret)\n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for idx in range(2, n + 1):\n            for idx2 in range(1, idx):\n                if idx2 == 1 or self.get_gcd(idx, idx2) == 1:\n                    res.append('{}/{}'.format(idx2, idx))\n        return res\n    \n    def get_gcd(self, num1, num2):\n        if num1 % num2 == 0:\n            return num2\n        return self.get_gcd(num2, num1 % num2)\n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ret = set()\n        \n        def gcd(a, b):\n            while True:\n                q = a // b\n                r = a - b * q\n                if r == 0:\n                    return b\n                a = b\n                b = r\n            \n        for i in range(2, n+1):\n            for j in range(1, i):\n                t = gcd(i, j)\n                #print(i, j, t)\n                ret.add(f'{j//t}/{i//t}')\n        return list(ret)", "class Solution:\n    def gcd(self, a, b):\n        c = 1\n        while c != 0:\n            c = a % b\n            a = b\n            b = c\n        return a\n    def simplify(self, a, b):\n        d = self.gcd(a, b)\n        return (a // d, b // d)\n    def simplifiedFractions(self, n):\n        fractions = set()\n        for denom in range(1, n + 1):\n            for num in range(1, denom):\n                expr = '%d/%d' % self.simplify(num, denom)\n                if expr not in fractions:\n                    fractions.add(expr)\n        return list(fractions)\n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        l = []\n        for i in range(2, n+1):\n            for j in range(1, i):\n                if math.gcd(i, j) < 2:\n                    l += [f'{j}/{i}']\n        return l\n        \n#         def memoize(f):\n#             memo = {}\n#             def helper(x):\n#                 if x not in memo:            \n#                     memo[x] = f(x)\n#                 return memo[x]\n#             return helper\n        \n#         def hcf(a, b):\n#             for i in range(2, a+1):\n#                 if a % i == 0 and b % i == 0:\n#                     return False\n#             return True\n\n#         def cal(x):\n#             l = []\n#             for i in range(1, x):\n#                 if hcf(i, x):\n#                     l += [\\\"{}/{}\\\".format(i, x)]\n#             return l\n\n#         def fib(n):\n#             if n == 1:\n#                 return []\n#             elif n == 2:\n#                 return [\\\"1/2\\\"]\n#             else:\n#                 return fib(n-1) + cal(n)\n\n        \n#         fib = memoize(fib)\n        \n#         return fib(n)\n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        simp = set()\n        out = []\n        for i in range(1,n+1):\n            for j in range(1,i):\n                if not j/i in simp:\n                    out.append(f\\\"{j}/{i}\\\")\n                    simp.add(j/i)\n                    \n        return out\n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        seen = set()\n        res = []\n        for j in range(2,n+1):\n            for i in range(1,j):\n                if i/j not in seen:\n                    seen.add(i/j)\n                    res.append(str(i)+\\\"/\\\"+str(j))\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        \n        def gcd(a, b):\n            if a==0:\n                return b\n            return gcd(b%a, a)\n            \n        for i in range(1, n):\n            for j in range(i+1, n+1):\n                if gcd(i,j)==1:\n                    res.append(str(i)+\\\"/\\\"+str(j))\n        \n        return res", "class Solution:\n    def euclid(self, a, b):\n        if(b == 0):\n            return a\n        else:\n            return self.euclid(b, a % b)\n        \n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for d in range(2, n + 1):\n            for n in range(1, d):\n                if(self.euclid(n, d) > 1):\n                    continue\n                res.append(str(n) + '/' + str(d))\n        return res", "class Solution:\n    def is_coprime(self, a, b):\n        l = max(a, b)\n        s = min(a, b)\n        \n        while s > 0:\n            l,s = s, l % s\n        \n        return l == 1\n    \n    def simplifiedFractions(self, n: int) -> List[str]:\n      \n        \n        ans = []\n        for d in range(2, n+1):\n            n = 1\n            while n < d:\n                if n == 1 or self.is_coprime(n, d):\n                    ans.append(str(n) + \\\"/\\\" + str(d))\n                n += 1\n        \n        return ans", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for i in range(2, n + 1) :\n            for j in range(1, i) :\n                if not ((i % 2 == 0) and (j % 2 == 0)) :\n                    res_flag = True\n                    for k in range(3, j + 1, 2):\n                        if (i % k == 0) and (j % k == 0) :\n                            res_flag = False\n                            break\n                    if res_flag : res.append(str(j) + \\\"/\\\" + str(i))\n        return res", "class Solution:\n    def simplifiedFractions(self, n):\n        res = []\n        tmp = set()\n        \n        for i in range(1, n+1):\n            for x in range(1, i+1):\n                if x%i != 0 and x/i not in tmp:\n                    tmp.add(x/i)\n                    res.append(str(x) + '/' + str(i))\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        s = set()\n        for i in range(1, n+1):\n            for j in range(1,i):\n                if i%j!=0 or j ==1: \n                    if j/i not in s:\n                        res.append(str(j)+'/'+str(i))\n                        s.add(j/i)\n            \n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ans = set()\n        for m in range(2, n+1):\n            for i in range(1, m):\n                d = math.gcd(i, m)\n                if d > 1:\n                    ans.add(f'{i//d}/{m//d}')\n                else:\n                    ans.add(f'{i}/{m}')\n        return ans\n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ans = []\n        q = deque([])\n        for i in range(2, n + 1):\n            q.append((1, i))\n            \n        while q:\n            x, y = q.popleft()\n            #TODO: check \n            if x ==1 or math.gcd(x, y) == 1:\n                ans.append(f'{x}/{y}')\n            if x + 1 < y:\n                 q.append((x + 1, y))\n        return ans\n            \n", "import math\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        if n == 1: return res\n        for i in range(2,n+1):\n            for j in range(1,i):\n                if math.gcd(i,j) == 1: \n                    res.append(f\\\"{j}/{i}\\\")\n        return res\n                               \n                \n            \n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        fin=[]\n        for i in range(2,n+1):\n            for j in range(1,i):\n                if(gcd(i,j)==1):\n                    fin.append(str(j)+'/'+str(i))\n        return fin", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res=[]\n        \n        def gcd(x,y):\n            while y:\n                x,y=y,x%y\n            return x\n        for i in range(1,n+1):\n            for j in range(1,i):\n                if gcd(i,j)==1:\n                    res.append(str(j)+'/'+str(i))\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def get_gcd(a, b):\n            if b == 0:\n                return a\n            else:\n                return get_gcd(b, a % b)\n\n\n        fractions = set()\n        for denominator in range(1, n + 1):\n            for numerator in range(1, denominator):\n                gcd = get_gcd(numerator, denominator)\n                s_numerator = numerator // gcd\n                s_denominator = denominator // gcd\n                fraction = \\\"{}/{}\\\".format(s_numerator, s_denominator)\n                fractions.add(fraction)\n\n        return fractions\n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        if n == 1:\n            return []\n        results = []\n        for deno in range(2,n+1):\n            for deli in range(1,deno):\n                canAdd = True\n                for dev in range(2,deli+1):\n                    if deno % dev == 0 and deli % dev == 0:\n                        canAdd = False\n                        break\n                if canAdd:\n                    results.append(\\\"{}/{}\\\".format(deli,deno))\n        return results", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(a, b):\n            if b == 0: return a\n            return gcd(b, a%b)\n        \n        result = []\n        for i in range(2, n+1):\n            for j in range(i-1, 0, -1):\n                if gcd(j, i) == 1:\n                    result.append(\\\"{0}/{1}\\\".format(j,i))\n        return result\n                \n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        added = set()\n        result = []\n        for denominator in range(2, n + 1):\n            for i in range(1, denominator):\n                if i / denominator in added:\n                    continue\n                added.add(i / denominator)\n                result.append(f'{i}/{denominator}')\n        return result", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        output = []\n        for n in range(2,n+1):\n            for m in range(1,n):\n                if math.gcd(n,m) == 1:\n                    output.append(str(m) + '/' + str(n))\n                    \n        return output", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(a: int, b: int) -> int:\n            if a < b:\n                a, b = b, a\n            if b == 0:\n                return a\n            return gcd(b, a % b)\n        \n        out = []\n        for denom in range(2, n + 1):\n            for num in range(1, denom):\n                if gcd(denom, num) == 1:\n                    out.append(str(num) + '/' + str(denom))\n        return out", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        \n        def hasFactor(divisor,dividend):\n            for  i in range(2,divisor+1):\n                if dividend%i==0 and divisor%i==0:\n                    return True\n            return False\n            \n        def fractions(result,i):\n            for k in range(1,i):\n                if k > 1 and hasFactor(k,i):\n                    continue\n                result.append(str(k)+'/'+str(i))\n        \n        result = []\n        for i in range(2,(n+1)):\n            fractions(result,i)\n        return result\n        print(result)", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        seen = set()\n        ans = []\n        \n        for i in range(2,n+1):\n            for j in range(1,i):\n                if j / i not in seen:\n                    seen.add(j/i)\n                    ans.append(\\\"%d/%d\\\" % (j,i))\n                    \n        return ans\n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def frac_to_string(num, den):\n            return f\\\"{num}/{den}\\\"\n        \n        def relatively_prime(a, b):\n            \\\"\\\"\\\" Invariant: a < b \\\"\\\"\\\"\n            for i in range(2, a + 1):\n                if a % i == 0 and b % i == 0:\n                    return False\n            return True\n        \n        ans = []\n        for den in range(1, n + 1):\n            for num in range(1, den):\n                if relatively_prime(num, den):\n                    ans.append(frac_to_string(num, den))\n        return ans\n        ", "# 3:22\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        if n == 1:\n            return []\n        \n        def simplified(i, n):\n            for j in range(2, i + 1):\n                if i % j == 0 and n % j == 0:\n                    return False\n            return True\n        \n        at_n = []\n        for i in range(1, n):\n            if simplified(i, n):\n                at_n.append(f\\\"{i}/{n}\\\")\n        \n        return at_n + self.simplifiedFractions(n - 1)", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        for num in range(2, n+1):\n            for i in range(1, num):\n                if i == 1 or self.valid(i, num):\n                    res.append(\\\"{}/{}\\\".format(i, num))\n        return res\n    \n    def valid(self, a, b):\n        if b % a == 0:\n            return False\n        for x in range(2, a):\n            if a % x == 0 and b % x == 0:\n                return False\n        return True", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ans = []\n        for i in range(2, n+1):\n            for j in range(1, i):\n                found = False\n                for k in range(2, j+1):\n                    if i % k == 0 and j % k == 0:\n                        found = True\n                        break\n                if not found: ans.append(str(j) + \\\"/\\\" + str(i))\n        return ans\n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def memoize(f):\n            memo = {}\n            def helper(x):\n                if x not in memo:            \n                    memo[x] = f(x)\n                return memo[x]\n            return helper\n        \n        def hcf(a, b):\n            for i in range(2, a+1):\n                if a % i == 0 and b % i == 0:\n                    return False\n            return True\n\n        def cal(x):\n            l = []\n            for i in range(1, x):\n                if hcf(i, x):\n                    l += [\\\"{}/{}\\\".format(i, x)]\n            return l\n\n        def fib(n):\n            if n == 1:\n                return []\n            elif n == 2:\n                return [\\\"1/2\\\"]\n            else:\n                return fib(n-1) + cal(n)\n\n        \n        fib = memoize(fib)\n        \n        return fib(n)", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        a=[]\n        for i in range(2,n+1):\n            s=\\\"1\\\"+\\\"/\\\"+str(i)\n            a.append(s)\n        for i in range(2,n):\n            for j in range(2,n+1):\n                if(math.gcd(i,j)==1 and (i/j)<1):\n                    s=str(i)+\\\"/\\\"+str(j)\n                    a.append(s)\n        return a\n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n      if n < 2:\n        return []\n      else:\n        res = []\n        dicts = {}\n        grid = [1]*n\n        grid[0] = 0\n        for i in range(1, n):\n          target = i + 1\n          if grid[target-1] == 1:\n            dicts[target] = {target:1}\n            start = target*2\n            while start <= n:\n              grid[start-1] = 0\n              dicts[target][start] = 1\n              start += target\n        for i in range(2, n+1):\n          res.append('1/' + str(i))\n          for j in range(2, i):\n            found = True\n            de = j\n            candidates = []\n            for key,value in list(dicts.items()):\n              if de in value: candidates.append(key)\n            for can in candidates:\n              if i in dicts[can]: \n                found = False\n                break\n            if found: res.append(str(j) + '/' + str(i))\n        return res\n            \n            \n            \n          \n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        # no solution for 1\n        if n == 1:\n            return []\n        \n        ans = []\n        seen = set()\n        for i in range(2, n+1):\n            denom = str(i)\n            for j in range(1, i):\n                result = j/i\n                if result in seen:\n                    continue\n                ans.append(str(j)+\\\"/\\\"+denom)\n                seen.add(result)\n        return ans\n        ", "def gcd(x, y):\n    # while y != 0:\n    #     (x, y) = (y, x%y)\n    # return x\n    if y == 0:\n        return x\n    else: \n        return gcd(y, x%y)\n\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ans = []\n        for i in range(1,n+1):\n            for j in range(i, n+1):\n                if i == j: continue\n                if gcd(i,j) == 1:\n                    ans.append(str(i) + \\\"/\\\" + str(j))\n        return ans", "def gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x%y)\n    return x\n\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ans = []\n        for i in range(1,n+1):\n            for j in range(i, n+1):\n                if i == j: continue\n                if gcd(i,j) == 1:\n                    ans.append(str(i) + \\\"/\\\" + str(j))\n        return ans", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        \n        if n == 1:\n            return []\n        \n        rst = []\n        \n        dedup = set()\n        \n        for i in range(1, n+1):\n            \n            for j in range(1, i):\n                \n                x = j/i\n                \n                s = str(j) + \\\"/\\\" + str(i)\n                \n                print(s)\n                \n            \n                if x not in dedup:\n\n                    dedup.add(x)\n                    rst.append(s)\n                    \n        return rst\n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        result=[]\n        if n == 1:\n            return(result)\n        for i in range(2,n+1):\n            result.append(\\\"1/\\\"+str(i))\n            for j in range(2,i):\n                flag=0\n                for k in range(2,j+1):\n                    if j%k==0:\n                        if i%k ==0:\n                            flag=flag+1\n                if flag == 0:\n                    result.append(str(j)+\\\"/\\\"+str(i))\n        return(result)", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(a,b):\n            for i in range(a):\n                if b %(a -i) == 0 and a %(a -i) == 0:\n                    return a -i\n        ans = []\n        for i in range(2, n+1):\n            for j in range(1, i):\n                if gcd(j, i) == 1:\n                    ans.append(f'{j}/{i}')\n        return ans\n        \n                \n", "from collections import defaultdict\nimport math\n\n\nclass Solution:\n    \n                    \n                    \n    def simplifiedFractions(self, n: int) -> List[str]:\n        \n        \n        if n == 1:\n            return []\n                    \n        numer = defaultdict(list)     \n        for i in range(2, 101):\n            for j in range(1, i):\n                if math.gcd(i, j) == 1:\n                    numer[i].append(j)\n        ans = []\n        \n        for i in range(2, n+1):\n            for j in numer[i]:\n                ans.append(f'{j}/{i}')\n                \n        print(ans)\n        return ans\n", "def gcd(a,b):\n    if a == 0:\n        return b\n    \n    if b == 0:\n        return a\n    \n    if a == b:\n        return a\n    \n    if a > b:\n        return gcd(a-b,b)\n    return gcd(a,b-a)\n\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        if n == 1:\n            return []\n        res = []\n        \n        for i in range(2,n+1):\n            for j in range(1,i+1):\n                if gcd(i,j) == 1:\n                    s = str(j) + \\\"/\\\" + str(i)\n                    res.append(s)\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def maxm(n1,n2):\n            temp=min(n1,n2)\n            while temp:\n                if n1%temp==0 and n2%temp==0:\n                    return temp\n                temp-=1\n            \n            \n        res=[]\n        for j in range(2,n+1):\n            for i in range(1,j):\n                if maxm(j,i)>1:\n                    continue\n                res.append(str(i)+'/'+str(j))\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ans = []\n        for i in range(1,n+1):\n            for j in range(1,i):\n                if gcd(i,j) == 1:\n                    ans.append(str(j)+'/'+str(i))\n        return ans\n    \n    def gcd(a,b):\n        while a:\n            a,b = b%a, a\n        return b", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        fractions = set()\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                denom = i\n                num = j\n                changed = True\n                while changed:\n                    changed = False\n                    for k in range(2, num + 1):\n                        if denom % k == 0 and num % k == 0:\n                            denom = denom // k\n                            num = num // k\n                            changed = True\n                fractions.add(str(num) + '/' + str(denom))\n        return [i for i in fractions]", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(i,j):\n            i, j = sorted([i,j])\n            if j%i == 0:\n                return i\n            return gcd(i, j%i)\n        \n        \n        res = []\n        for d in range(1, n+1):\n            for n in range(1, n+1):\n                if 0<n/d<1 and gcd(d,n) == 1:\n                    res.append('{}/{}'.format(n,d))\n        return res", "def gcd(a, b):\\r\n    # Everything divides 0\\r\n    if a == 0:\\r\n        return b\\r\n    if b == 0:\\r\n        return a\\r\n    # base case\\r\n    if a == b:\\r\n        return a\\r\n    # a is greater\\r\n    if a > b:\\r\n        return gcd(a - b, b)\\r\n    return gcd(a, b - a)\\r\n\\r\n\\r\nclass Solution:\\r\n    def simplifiedFractions(self, n: int) -> List[str]:\\r\n        finals = []\\r\n        for i in range(1, n):\\r\n            for j in range(i, n + 1):\\r\n                if i != j:\\r\n                    g = gcd(i, j)\\r\n                    finals.append(\\\"{}/{}\\\".format(i // g, j // g))\\r\n        return list(set(finals))\\r\n\\r\n", "def gcd(a,b):     # Everything divides 0  \n    if (a == 0): \n        return b \n    if (b == 0): \n        return a     # base case \n    if (a == b): \n        return a     # a is greater \n    if (a > b): \n        return gcd(a-b, b) \n    return gcd(a, b-a) \n\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        finals = []\n        for i in range(1, n):\n            for j in range(i,n + 1):\n                if i != j:\n                    g = gcd(i, j)\n                    finals.append(\\\"{}/{}\\\".format(i//g, j//g))        \n        return list(set(finals))\n        ", "class Solution:\n    def get_ggT(self, a, b):\n        while (a != b):\n            a_ = a - b\n            a = max(a_, b)\n            b = min(a_, b)\n            \n        return a\n        \n        \n        \n    def simplifiedFractions(self, n: int) -> List[str]:\n        ret = set()\n        \n        \n        for denominator in range(2, n + 1):\n            for numerator in range(1, denominator):\n                ggT = self.get_ggT(denominator, numerator)\n                ret.add(str(numerator // ggT) + \\\"/\\\" + str(denominator // ggT))\n                \n        return ret", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def lar_com(a,b):\n            a,b=max(a,b),min(a,b)\n            if b==0: return 0\n            if b==1: return 1\n            return lar_com(a-b,b)\n            \n        \n        res=[]\n        for i in range(2,n+1):\n            for j in range(1,i):\n                if lar_com(i,j)==1:\n                    res.append(str(j)+\\\"/\\\"+str(i))\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def Simplify(x, y):\n            for i in range(x, 1, -1):\n                if x % i == 0 and y % i == 0:\n                    x //= i\n                    y //= i \n            return x, y\n        \n        res = set()\n        for i in range(2, n+1):\n            for j in range(1, i):\n                nom, denom = j, i\n                print('before', nom, denom)\n                nom, denom = Simplify(nom, denom) \n                print('after', nom, denom)\n                res.add(str(nom)+\\\"/\\\"+str(denom))\n        return res\n    \n    \n                \n[\\\"1/3\\\",\\\"2/4\\\",\\\"5/6\\\",\\\"5/8\\\"]\n\n[\\\"1/3\\\",\\\"5/6\\\",\\\"5/8\\\"]", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        \n        if n<2:\n            return []\n        if n==2:\n            return ['1/2']\n        \n        \n        ans = []\n        record = {}\n        \n        for i in range(2, n):\n            \n            a = 1\n            b = i\n            \n            while b<=n:\n                \n                for c in range(1, b):\n                    \n                    if c/b not in record:  \n                        ans.append('{}/{}'.format(c, b))\n                        record[c/b] = True\n                        \n                b+=1\n                \n        # print(ans)\n        return ans", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(a, b):\n            a, b = max(a, b), min(a, b)\n            if b == 0:\n                return a\n            else:\n                return gcd(b, a - b)\n            \n        output = []\n        for den in range(1, n + 1):\n            for num in range(1, den):\n                if gcd(den, num) == 1:\n                    output.append(\\\"%d/%d\\\" % (num, den))\n        return output", "from math import gcd\n\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        if n == 1:\n            return []\n        ans = []\n        for i in range(1, n):\n            if gcd(n, i) == 1:\n                ans.append(f\\\"{i}/{n}\\\")\n        ans += self.simplifiedFractions(n-1)\n        return ans", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        out = []\n        visited = set()\n        if n == 1: return out\n        \n        for i in range(2, n+1):\n            for j in range(1, i):\n                tmp = f'{j}/{i}'\n                if eval(tmp) not in visited:\n                    visited.add(eval(tmp))\n                    out.append(tmp)\n        \n        return out", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ans = []\n        temp_lst = []\n        temp=\\\"\\\"\n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                if j//i <1 and j/i not in temp_lst:\n                    temp_lst.append(j/i)\n                    #print(temp_lst)\n                    temp = str(j)+\\\"/\\\"+str(i)\n                    ans.append(temp)\n        return ans", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        num_res = []\n        for i in range(1,n+1):\n            for j in range(1,i):\n                if i/j not in num_res:\n                    res.append(str(j)+'/'+str(i))\n                    num_res.append(i/j)\n        return res", "import itertools\n\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        res = []\n        num_res = []\n        for i,j in itertools.permutations(range(1,n+1),2):\n            if i/j < 1 and i/j not in num_res:\n                res.append(str(i)+'/'+str(j))\n                num_res.append(i/j)\n                    \n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(a,b):\n            if a<b: return gcd(b, a)\n            while b>0:\n                tmp = a % b\n                a=b\n                b=tmp\n            return a\n##        print(gcd(89,6))\n        ans=[]\n        if -1<n<2:return ans\n        for i in range(1,n):\n            for j in range(i+1,n+1):#pass\n                if i!=j:\n                    x=gcd(i,j)\n##                    print(i,j,x)\n##                    print(x)\n                    n1=i\n                    n2=j\n                    if i%x==0==j%x and x>1:\n                        n1//=x\n                        n2//=x\n##                    st=(i,j)\n##                    print(st)\n                    st=f'{n1}/{n2}'\n                    if st not in ans:\n                        ans.append(st)\n##        ans.sort()\n##        print(ans)\n##        for i,an in enumerate(ans):\n##            ans[i]=f'{an[0]}/{an[1]}'\n                        \n        return ans", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(a,b):\n            if a<b: return gcd(b, a)\n            while b>0:\n                tmp = a % b\n                a=b\n                b=tmp\n            return a\n        ans=[]\n        if -1<n<2:return ans\n        for i in range(1,n):\n            for j in range(i+1,n+1):\n                if i!=j:\n                    x=gcd(i,j)\n                    n1=i\n                    n2=j\n                    if i%x==0==j%x and x>1:\n                        n1//=x\n                        n2//=x\n                    st=f'{n1}/{n2}'\n                    if st not in ans:\n                        ans.append(st)\n        return ans", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        result_str = []\n        result_num = []\n        for i in range(1, n+1):\n            for j in range(1, i):\n                if j/i not in result_num:\n                    result_num.append(j/i)\n                    result_str.append(\\\"{}/{}\\\".format(j, i))\n        return result_str\n                \n        ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        from fractions import Fraction\n        p=[]\n        if n==1:\n            return\n        for numerator in range(1,n):\n            k=str(1)+'/'+str(numerator+1)\n            p.append(k)\n        for numerator in range(2,n+1):\n            for denominator in range(numerator+1,n+1):\n                b=Fraction(numerator,denominator)\n                b=str(b)\n                if b not in p:\n                    \n                    k=str(numerator)+'/'+str(denominator)\n                    p.append(k)\n        return p\n                        \n                        \ndef isprime(n):\n    # Corner cases \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop \n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n  \n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n  \n    return True\n        \n                    \n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        lo=[i for i in range(2,n+1)]\n        hi=[i for i in range(1,n)]\n        res=[]\n        dic=[]\n        for i in range(len(lo)):\n            for j in range(len(hi)):\n                if hi[j]/lo[i] not in dic and hi[j]<lo[i]:\n                    dic.append(hi[j]/lo[i])\n                    res.append(str(hi[j])+\\\"/\\\"+str(lo[i]))\n        return res", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(a,b):\n            if a<b: return gcd(b, a)\n            while b>0:\n                tmp = a % b\n                a=b\n                b=tmp\n            return a\n        print(gcd(89,6))\n        ans=[]\n        if -1<n<2:return ans\n        for i in range(1,n):\n            for j in range(i+1,n+1):#pass\n                \n##                print(st)\n                if i!=j:\n                    x=gcd(i,j)\n                    print(i,j,x)\n##                    print(x)\n                    n1=i\n                    n2=j\n                    if i%x==0==j%x and x>1:\n                        n1//=x\n                        n2//=x\n##                    st=(i,j)\n##                    print(st)\n                    st=f'{n1}/{n2}'\n                    if st not in ans:\n                        ans.append(st)\n##        ans.sort()\n##        print(ans)\n##        for i,an in enumerate(ans):\n##            ans[i]=f'{an[0]}/{an[1]}'\n                        \n        return ans", "from math import gcd\nclass Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        ret = []\n        for numerator in range(1, n + 1):\n            for denominator in range(numerator + 1, n + 1):\n                if numerator != denominator:\n                    if gcd(numerator, denominator) == 1:\n                        ret.append(str(numerator) + '/' + str(denominator))\n        return ret", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        if n==1: return []\n        a=[]\n        ans=[]\n        for i in range(1,n):\n            for j in range(i+1,n+1):\n                if i/j not in a:\n                    a.append(i/j)\n                    ans.append(str(i)+\\\"/\\\"+str(j))\n                    \n        return ans\n                ", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n#         if n == 1:\n#             return []\n        \n        results = []\n        fractions = []\n        for i in range(1, n+1):\n            for j in range(1, i+1):\n                tmp = j/i\n                # if tmp >= 1:\n                    # break\n                if tmp not in results and tmp < 1:\n                    results.append(tmp)\n                    fractions.append(\\\"{}/{}\\\".format(j, i))\n        return fractions   \n\n#         fractions = []\n#         decimals = set()\n        \n#         for i in range(1, n + 1):\n#             for x in range (1, i + 1):\n#                 if (x % i != 0 and x/i not in decimals):\n#                     decimals.add(x/i)\n#                     fractions.append(str(x) + \\\"/\\\" + str(i))\n                    \n#         return fractions\n    \n# a = Solution()\n# res = a.simplifiedFractions(4)\n# print(res)", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        if n == 1:\n            return []\n\n        def gcd(a, b):\n            while b > 0:\n                r = a % b\n                a = b\n                b = r\n            return a\n        \n        ret = []\n        for deno in range(2, n + 1):\n            for nume in range(1, deno):\n                g = gcd(deno, nume)\n                n = nume // g\n                d = deno // g\n                val = str(n) + '/' + str(d)\n                if val not in ret:\n                    ret.append(val)\n        return ret\n                \n", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def hcfnaive(a,b): \n            if(b==0): \n                return a \n            else: \n                return hcfnaive(b,a%b) \n        ans = []\n        for j in range(1,n+1):\n            for i in range(1,j):\n                igcd = hcfnaive(i,j)\n                top,botm = i//igcd,j//igcd\n                if top==1 and botm==1:\n                    continue\n                else:\n                    temp = str(top)+\\\"/\\\"+str(botm)\n                    if temp not in ans:\n                        ans.append(temp)\n        return ans", "class Solution:\n    def simplifiedFractions(self, n: int) -> List[str]:\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        \n        res = []\n        for i in range(1, n):\n            for j in range (i + 1, n + 1):\n                g = gcd(i, j)\n                a, b = i // g, j // g\n                s = str(a) + \\\"/\\\" + str(b)\n                \n                if s not in res:\n                    res.append(s)\n        return res"]