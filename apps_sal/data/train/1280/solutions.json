["t=int(input())\r\nfor _ in range(t):\r\n    xyz = input().strip()\r\n    \r\n    string = 0\r\n\r\n    for i in range(len(xyz)//2):\r\n        string  = string + (abs(ord(xyz[i])-ord(xyz[len(xyz)-i-1])))\r\n           \r\n    print(string)", "# cook your dish here\nnumbers = int(input())\nfor x in range(numbers):\n    st = input().strip()\n    l = len(st)\n    res = 0\n    j = l - 1\n    i = 0\n    while(i < j):\n        if (st[i] != st[j]):\n            res += abs(ord(st[i])-ord(st[j]))\n        i = i + 1\n        j = j - 1\n    if res==0:\n        print(0)\n    else:\n        print(res)", "t=int(input())\r\nfor _ in range(t):\r\n    l = input().strip()\r\n    #pal = l[::-1]\r\n    s = 0\r\n    #if l == pal:\r\n     #   print(0)\r\n    for i in range(len(l)//2):\r\n        s = s + (abs(ord(l[i])-ord(l[len(l)-i-1])))\r\n            #print(abs(ord(l[i])-ord(pal[i])))\r\n    print(s)", "import sys\r\nfrom functools import lru_cache, cmp_to_key\r\nfrom heapq import merge, heapify, heappop, heappush\r\nfrom math import *\r\nfrom collections import defaultdict as dd, deque, Counter as C\r\nfrom itertools import combinations as comb, permutations as perm\r\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\r\nfrom time import perf_counter\r\nfrom fractions import Fraction\r\nimport copy\r\nimport time\r\nstarttime = time.time()\r\nmod = int(pow(10, 9) + 7)\r\nmod2 = 998244353\r\n# from sys import stdin\r\n# input = stdin.readline\r\ndef data(): return sys.stdin.readline().strip()\r\ndef out(*var, end=\"\\n\"): sys.stdout.write(' '.join(map(str, var))+end)\r\ndef L(): return list(sp())\r\ndef sl(): return list(ssp())\r\ndef sp(): return map(int, data().split())\r\ndef ssp(): return map(str, data().split())\r\ndef l1d(n, val=0): return [val for i in range(n)]\r\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\r\ntry:\r\n    # sys.setrecursionlimit(int(pow(10,7)))\r\n    sys.stdin = open(\"input.txt\", \"r\")\r\n    # sys.stdout = open(\"../output.txt\", \"w\")\r\nexcept:\r\n    pass\r\ndef pmat(A):\r\n    for ele in A:\r\n        print(*ele,end=\"\\n\")\r\ndef seive():\r\n    prime=[1 for i in range(10**6+1)]\r\n    prime[0]=0\r\n    prime[1]=0\r\n    for i in range(10**6+1):\r\n        if(prime[i]):\r\n            for j in range(2*i,10**6+1,i):\r\n                prime[j]=0\r\n    return prime\r\n\r\nfor _ in range(L()[0]):\r\n    s=input().strip()\r\n    n=len(s)\r\n    ans=0\r\n    for i in range((n-n%2)//2):\r\n        # print(s[i],s[n-1-i],i,n-1-i,n)\r\n        ans+=(abs(ord(s[i])-ord(s[n-1-i])))\r\n    print(ans)\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nendtime = time.time()\r\n# print(f\"Runtime of the program is {endtime - starttime}\")\r\n\r\n", "t = int(input())\nlst = [\"0\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\nfor i in range(t):\n    s = list(input().strip())\n    count=0\n    s.insert(0,\"temp\")\n    for i in range(1,len(s)):\n        #print(s[-i])\n        if i > len(s)//2  :\n            break\n        if s[i] != s[-i] :\n            count+=abs(lst.index(s[i])-lst.index(s[-i]))\n    print(count)", "t = int(input())\nlst = [\"0\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\nfor i in range(t):\n    s = list(input().strip())\n    count=0\n    s.insert(0,\"temp\")\n    for i in range(1,len(s)):\n        #print(s[-i])\n        if i > len(s)//2  :\n            break\n        if s[i] != s[-i] :\n            count+=abs(lst.index(s[i])-lst.index(s[-i]))\n    print(count)", "t=int(input())\nfor _ in range(t):\n    a=input().strip()\n    a=list(a)\n    b='abcdefghijklmnopqrstuvwxyz'\n    if a==a[::-1]:\n        print(0)\n    else:\n        c=0\n        j=len(a)-1\n        for i in range(0,len(a)//2):\n            if a[i]!=a[j]:\n                k=max(a[i],a[j])\n                p=min(a[i],a[j])\n                c+=ord(k)-ord(p)\n            j-=1\n        print(c)", "\nn=int(input())\nfor i in range(n):\n   s=input().strip()\n   c=0 \n   I=0 \n   J=len(s)-1 \n   while I<J:\n       c+=abs(ord(s[I])-ord(s[J]))\n       I+=1 \n       J-=1\n   print(c)", "for _ in range(int(input())):\n    S = input().strip()\n    i, j = 0, len(S)-1\n    count = 0\n    while i < j:\n        if S[i] != S[j]:\n            count += abs(ord(S[i]) - ord(S[j]))\n        i += 1 \n        j -= 1 \n    print(count)", "from sys import stdin, stdout\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef inp(): return stdin.readline().strip()\ndef out(var, end=\"\\n\"): stdout.write(str(var)+\"\\n\")\ndef outa(*var, end=\"\\n\"): stdout.write(' '.join(map(str, var)) + end)\ndef lmp(): return list(mp())\ndef mp(): return list(map(int, inp().split()))\ndef smp(): return list(map(str, inp().split()))\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\ndef remadd(x, y): return 1 if x%y else 0\ndef ceil(a,b): return (a+b-1)//b\n\ndef isprime(x):\n    if x<=1: return False\n    if x in (2, 3): return True\n    if x%2 == 0: return False\n    for i in range(3, int(sqrt(x))+1, 2):\n        if x%i == 0: return False\n    return True\n\nfor _ in range(int(inp())):\n    s = inp()\n    l = len(s)\n    i=0\n    j=l-1\n    c = 0\n    while(j>i):\n        c += abs(ord(s[i])-ord(s[j]))\n        i+=1\n        j-=1\n    print(c)\n", "# cook your dish here\r\nt=int(input())\r\nfor _ in range(t):\r\n    str1=input().strip()\r\n    n=len(str1)\r\n    res=0\r\n    for i in range(0,int(n/2)):\r\n        #print(ord(str1[i]),ord(str1[n-i-1]))\r\n        res += abs(ord(str1[i])-ord(str1[n-i-1]))\r\n    print(res)\r\n", "# cook your dish here\nfor t in range(int(input())):\n    a=input().strip()\n    c=0\n    n=len(a)\n    for i in range(n//2):\n        c+=abs(ord(a[i])-ord(a[n-i-1]))\n    print(c)", "\"\"\"\n _____   _    _   __    __     ____     __    _\n/ ____| | |  | | |  \\  /  |   /    \\   |  \\  | |\n| |___  | |  | | |   \\/   |  /   _  \\  | . \\ | |\n\\____ \\ | |  | | | |\\__/| | |   /_\\  | | |\\ \\| |\n____| | | \\__/ | | |    | | |   __   | | | \\ ` |\n|_____/ \\______/ |_|    |_| |__|  |__| |_|  \\__|\n\n\"\"\"\n\"\"\"\n/*\nTemplate by Sai Suman Chitturi\nLinkedin: https://www.linkedin.com/in/sai-suman-chitturi-9727a2196/\nHackerrank: https://www.hackerrank.com/skynetasspyder?hr_r=1\nCodechef: https://www.codechef.com/users/suman_18733097\nCodeforces: http://codeforces.com/profile/saisumanchitturi\nGithub: https://github.com/ChitturiSaiSuman\nHackerearth: https://www.hackerearth.com/@chitturi7\nSPOJ: Sai Suman Chitturi @out_of_bound\n*/\n\"\"\"\nfrom sys import stdin,stdout,stderr,setrecursionlimit\nfrom math import pi,sqrt,gcd,ceil,floor,log2,log10,factorial\nfrom math import cos,acos,tan,atan,atan2,sin,asin,radians,degrees,hypot\nfrom bisect import insort,insort_left,insort_right,bisect_left,bisect_right,bisect\nfrom functools import reduce\nfrom itertools import combinations,combinations_with_replacement,permutations\nfrom fractions import Fraction\nfrom random import choice,getrandbits,randint,random,randrange,shuffle\nfrom re import compile,findall,escape,search,match\nfrom statistics import mean,median,mode\nfrom heapq import heapify,heappop,heappush,heappushpop,heapreplace,merge,nlargest,nsmallest\nfrom collections import deque,OrderedDict,defaultdict\nfrom collections import Counter,namedtuple,ChainMap,UserDict,UserList,UserString\nfrom numpy import dot,trace,argmax,argmin,array,cumprod,cumsum,matmul\n\nmod = 10**9+7\nhell = 10**9+9\ninf = 10**18\nlcm = lambda x,y: ((x*y)//gcd(x,y))\nadd = lambda x,y: (x%mod+y%mod)%mod\nsub = lambda x,y: ((x%mod-y%mod)+mod)%mod\nmul = lambda x,y: ((x%mod)*(y%mod))%mod\ninverse = lambda x: (pow(x,mod-2,mod))\nsetBitCount = lambda x: bin(x).count(\"1\")\nsumOfDigits = lambda x: sum([int(i) for i in str(x)])\n\nsize = 10**6+1\n\nsetrecursionlimit(size)\n\ndef preCompute():\n    return\n\ndef solve():\n    return\n\ndef main():\n    io = IO()\n    testcases = 0\n    if testcases == 0:\n        testcases = io.nextInt()\n    preCompute()\n\n    for test in range(testcases):\n        # io.write(\"Case #%d: \"%(test+1),end=\"\")\n        s = io.String()\n        n = len(s)\n        ans = 0\n        for i in range(n//2):\n            ans += abs(ord(s[i])-ord(s[n-i-1]))\n        io.write(ans)\n        # solve()\n\n\n\nclass IO:\n    def next(self):\n        return stdin.readline().strip()\n    def nextLine(self):\n        return self.next()\n    def String(self):\n        return self.next()\n    def nextStrings(self):\n        return list(map(str,self.next().split()))\n    def nextInt(self):\n        return int(self.next())\n    def Int(self):\n        return self.nextInt()\n    def nextFloat(self):\n        return float(next())\n    def Float(self):\n        return self.nextFloat()\n    def nextList(self):\n        return list(map(int,self.next().split()))\n    def List(self):\n        return self.nextList()\n    def nextTuple(self):\n        return tuple(map(int,self.next().split()))\n    def Tuple(self):\n        return self.nextTuple()\n    def debug(self,*obj,sep=\" \",end=\"\\n\"):\n        string = sep.join([str(item) for item in obj])+end\n        stderr.write(string)\n    def print(self,*obj,sep=\" \",end='\\n'):\n        string = sep.join([str(item) for item in obj])+end\n        stdout.write(string)\n    def write(self,*obj,sep=\" \",end=\"\\n\"):\n        self.print(*obj,sep=sep,end=end)\n\nmain()", "# cook your dish here\nfor test in range(int(input())):\n    s = input().strip()\n    \n    if not len(s) % 2:\n        mid = len(s) // 2\n        first = s[:mid]\n        second = s[mid:]\n    else:\n        mid = len(s) // 2\n        first = s[:mid]\n        second = s[mid + 1:]\n    \n    second = second[::-1]\n    \n    \n    cost = 0\n    for i in range(len(first)):\n        cost += abs(ord(first[i]) - ord(second[i]))\n    \n    print(cost)"]