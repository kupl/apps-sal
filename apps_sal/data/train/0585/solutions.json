["import functools\n\ndef gcd(x,y):\n if(y == 0):\n  return x\n return gcd(y, x%y)\n\nfor _ in range(int(input())):\n n, m= map(int, input().split())\n p = list(map(int, input().split()))\n \n ans = functools.reduce(lambda x,y: gcd(x, y), p)\n \n if(ans <= n):\n  print(n-ans)\n else:\n  f = [1]\n  for k in range(ans//2, 1, -1):\n   if ans %k == 0:\n    if k<=n:\n     f.append(k)\n     \n    if ans//k <= n:\n     f.append(ans//k)\n  res = n-max(f)\n  print(res)", "import functools\n\ndef gcd(x,y):\n if(y == 0):\n  return x\n return gcd(y, x%y)\n\nfor _ in range(int(input())):\n n, m= map(int, input().split())\n p = list(map(int, input().split()))\n \n ans = functools.reduce(lambda x,y: gcd(x, y), p)\n \n if(ans <= n):\n  print(n-ans)\n else:\n  f = [1]\n  for k in range(ans//2, 1, -1):\n   if ans %k == 0:\n    if k<=n:\n     f.append(k)\n     break\n    if ans//k <= n:\n     f.append(ans//k)\n  res = n-max(f)\n  print(res)", "from math import gcd,sqrt,ceil\n\ndef fac(x,n):\n mx = 1\n for i in range(1,ceil(sqrt(x))+1):\n  if x % i == 0:\n   if i <= n:\n    mx = max(mx,i)\n   if x//i <= n:\n    mx = max(mx,x//i)\n return mx\n\n \n\nfor _ in range(int(input())):\n n,m = map(int,input().split())\n rev = n\n lis = list(map(int,input().split()))\n \n g = lis[0]\n for i in lis:\n  g = gcd(g,i)\n\n if n > g:\n  k = n - g\n else:\n  val = fac(g,n)\n  k = n - val\n print(k)", "# cook your dish here\ndef _gcd(a,b):\n while(b!=0):\n  a,b=b,a%b\n return a\n \ndef __gcd(mp):\n if(len(mp)==1):\n  return mp[0]\n gcd=_gcd(mp[0],mp[1])\n for i in range(2,len(mp)):\n  gcd=_gcd(gcd,mp[i])\n return gcd\n \ndef factors(hcf):\n if(hcf==0):\n  return [1]\n factor_list=[]\n for i in range(1,int(hcf**(0.5))+1):\n  if(hcf%i==0):\n   factor_list.append(i)\n   factor_list.append(hcf//i)\n return factor_list\n \nt=int(input())\nfor _ in range(t):\n n,m=map(int,input().split())\n mp=list(map(int,input().split()))\n hcf=0\n if(m==1):\n  hcf=mp[0]\n elif(m>1):\n  hcf=__gcd(mp)\n ans=0\n factor_list=factors(hcf)\n factor_list.sort(reverse=True)\n for i in factor_list:\n  if i<=n:\n   ans=n-i\n   break\n print(ans)", "# cook your dish here\nimport math\n\ndef gcd(a, b):\n if a % b == 0:\n  return b\n return gcd(b, a % b)\n \ndef maxfact(g, n):\n i = 1\n maxf = None\n while i * i <= g:\n  if g % i == 0:\n   if(i <= n):\n    maxf = i\n   if math.floor(g / i) <= n:\n    maxf = math.floor(g / i)\n    break\n  i = i+1\n return maxf\n \n\nt = int(input())\nwhile t>0:\n t = t-1\n [n, m] = [int(x) for x in input().split(' ')]\n spells = [int(x) for x in input().split(' ')]\n g = spells[0]\n for i in range(1, m):\n  g = gcd(g, spells[i])\n print(n - maxfact(g, n))\n", "try:\n \n def gcd_fd(i, j):\n  while(j):\n   i, j = j, i % j\n \n  return i\n \n \n def gcd_l(t):\n  num = t[0]\n  k = t[1]\n  gcd = gcd_fd(num, k)\n \n  for i in range(2, len(t)):\n   gcd = gcd_fd(gcd, t[i])\n \n  return(gcd)\n \n \n def fact(num1):\n  if num1 == 0:\n   return 1\n  a = []\n  for j in range(1, int(num1**(1 / 2)) + 1):\n   if num1 % j == 0:\n    a.append(j)\n    a.append(num1 // j)\n  return(a)\n \n \n for _ in range(int(input())):\n  n, m = map(int, (input().split()))\n  a = list(map(int, input().split()))\n  p = 0\n  ans = 0\n  if m > 1:\n   p = gcd_l(a)\n  else:\n   p = a[0]\n  fac = fact(p)\n  fac.sort(reverse=True)\n  for i in fac:\n   if i <= n:\n    ans = n - i\n    break\n  print(ans)\nexcept:\n pass", "# cook your dish here\ndef find_gcd(x, y): \n while(y): \n  x, y = y, x % y \n return x \n\ndef maxfact(x,n):\n lar_fac = 0\n for i in range(1, x + 1):\n  if x % i == 0:\n   if(i <= n):\n    lar_fac = max(lar_fac, i)\n   elif(x / i <= n):\n    lar_fac = max(lar_fac, x / i)\n return(lar_fac)\n \nfor _ in range(int(input())):\n n, m = list(map(int, input().split()))\n p = list(map(int, input().split()))\n gcd = 0\n for i in range(m):\n  gcd = find_gcd(gcd, p[i])\n \n if(gcd > n):\n  temp = maxfact(gcd, n)\n  gcd = temp\n  \n ans = n - gcd\n print(ans)\n", "def gcd(a, b):\n if(a == 0):\n  return b\n else:\n  return gcd(b % a, a)\n\n\ndef fgcd(a):\n r = a[0]\n for i in range(1, len(a)):\n  r = gcd(a[i], r)\n  if(r == 1):\n   return 1\n return r\n\n\nt = int(input())\nwhile t:\n t -= 1\n n, m = list(map(int, input().split()))\n a = list(map(int, input().split()))\n a.sort()\n # mn = min(a)\n mn = fgcd(a)\n # print(mn)\n c = 0\n if(n >= mn):\n  c = n - mn\n  print(c)\n  continue\n while(n > 1):\n  if(mn % n != 0):\n   c += 1\n   n -= 1\n  else:\n   break\n print(c)\n", "from math import gcd\ndef largest_factor(val,n):\n k = min(n,val)\n while k > 0:\n  if val % k == 0:\n   return k\n  k -= 1\nfor _ in range(int(input())):\n n,m = list(map(int,input().split()))\n li = list(map(int,input().split()))\n if n == 1:\n  print(0)\n else:\n  val = li[0]\n  for i in range(1,m):\n   val = gcd(val,li[i])\n  print(n - largest_factor(val,n))\n\n", "# cook your dish here\nimport math \n\ndef gcd(a,b):\n if b == 0:\n  return a\n return gcd(b,a%b)\n \nfor _ in range(int(input())):\n n,m=list(map(int,input().split(\" \")))\n p=list(map(int,input().split(\" \")))\n g=p[0]\n for i in range(1,m):\n  g = gcd(g,p[i])\n \n if g>n:\n  maxEl=1\n  for i in range(2,int(math.sqrt(g)+1)):\n   if g%i == 0:\n    if i<=n:\n     maxEl = max(maxEl,i)\n    if g//i<=n:\n     maxEl = max(maxEl,g//i)\n  print(n - maxEl) \n else:\n  print(n - g)\n \n", "# cook your dish here\nimport math \n\ndef gcd(a,b):\n if b == 0:\n  return a\n return gcd(b,a%b)\n \nfor _ in range(int(input())):\n n,m=list(map(int,input().split(\" \")))\n p=list(map(int,input().split(\" \")))\n g=p[0]\n for i in range(1,m):\n  g = gcd(g,p[i])\n \n if g>n:\n  maxEl=1\n  for i in range(2,int(math.sqrt(g)+1)):\n   if g%i == 0:\n    if i<=n:\n     maxEl = max(maxEl,i)\n    if g//i<=n:\n     maxEl = max(maxEl,g//i)\n  print(n - maxEl) \n else:\n  print(n - g)\n \n", "# cook your dish here\nimport math \n\ndef gcd(a,b):\n if b == 0:\n  return a\n return gcd(b,a%b)\n \nfor _ in range(int(input())):\n n,m=list(map(int,input().split(\" \")))\n p=list(map(int,input().split(\" \")))\n g=p[0]\n for i in range(1,m):\n  g = gcd(g,p[i])\n \n if g>n:\n  maxEl=1\n  for i in range(n,0,-1):\n   if g%i == 0:\n    maxEl = i\n    break\n  print(n - maxEl) \n else:\n  print(n - g)\n \n", "from math import gcd,sqrt\nfor _ in range(int(input())):\n n,m = map(int,input().split())\n l = list(map(int,input().split()))\n g = 0\n for i in l:\n  g = gcd(g,i)\n if(g<n):\n  print(n - g)\n  continue\n f = 0\n s = int(sqrt(g))\n for i in range(1,s+1):\n  if(g%i == 0):\n   if(i <= n):\n    f = max(f,i)\n   if(g//i <= n):\n    f = max(f,g//i)\n print(n - f)", "import math as x\ndef lfact(n,k):\n fact=[]\n max=0\n for j in range(1,int(k**0.5)+1):\n  if k%j==0:\n   \n   if j<=n and j>max:\n    max=j\n   if k//j<=n and k//j>max:\n    max=k//j\n return max\n \nt=int(input())\nfor j in range(t):\n n,m=list(map(int,input().split()))\n arr=list(map(int,input().split()))\n if n==1:\n  print(0)\n else:\n  g=0\n  for i in range(m):\n   g=x.gcd(arr[i],g)\n \n  if g>n:\n   g=lfact(n,g)\n   print(n-g)\n  elif g==n:\n   print(0)\n  else:\n   print(n-g)\n  \n", "# cook your dish here\ndef gcdf(x,y):\n while(y): \n  x, y = y, x % y \n return x\n\nt = int(input())\nfor cases in range(t):\n (n, m) = list(map(int, input().split()))\n spells = list(map(int, input().split()))\n kills = 0\n gcd = spells[0]\n for i in range (1, m):\n  gcd = gcdf(gcd, spells[i])\n if (n > gcd):\n  kills += n - gcd\n  n = gcd\n if (n < gcd):\n  for i in range(n,0,-1):\n   if (gcd % i == 0):\n    break\n   kills += 1\n print(kills)\n \n \n \n \n \n", "# cook your dish here# cook your dish here\nimport math\n\ndef gcdiv(l):\n l.sort()\n ans = math.gcd(l[0],l[1])\n i = 2\n \n while (ans!=1 and i<len(l)):\n  ans = math.gcd(ans,l[i])\n  i = i + 1\n  \n return(ans)\n \ndef lf(gc,n):\n if (gc < n):\n  return(gc)\n out = n\n while out>1:\n  if (gc%out == 0):\n   return(out)\n  out -= 1\n  \n return(out)\n \n \nt = int(input())\n\nwhile t>0:\n t -= 1\n n, m = list(map(int,input().split()))\n l1 = list([int(i) for i in input().split()])\n \n if len(l1) > 1:\n  gc = gcdiv(l1)\n else:\n  gc = l1[0]\n  \n print(n-lf(gc,n))\n \n  \n \n \n \n \n \n \n \n", "# cook your dish here\ndef gcd(a1,b1):\n if b1==0:\n  return a1\n else:\n  return gcd(b1,a1%b1)\na = int(input())\nfor i in range(a):\n b = list(map(int,str(input()).split(' ')))\n c = list(map(int,str(input()).split(' ')))\n k = c[0]\n Ans = 0\n if b[0]==1:\n  print(0)\n else:\n  if b[1]==1:\n   if b[0]>c[0]:\n    print(abs(b[0]-c[0]))\n   elif b[0]==c[0]:\n    print(0)\n   else:\n    for i2 in range(b[0]-1):\n     if (c[0]%b[0])!=0:\n      Ans+=1\n      b[0]-=1\n     else:\n      break\n    print(Ans)\n   \n  else:\n   for i1 in range(b[1]):\n    k = gcd(c[i1],k)\n   if b[0]>k:\n    print(abs(b[0]-k))\n   elif b[0]==k:\n    print(0)\n   else:\n    for i3 in range(b[0]-1):\n     if (k%b[0])!=0:\n      Ans+=1\n      b[0]-=1\n     else:\n      break\n    print(Ans)", "# cook your dish here\ntry:\n def find_gcd(x, y): \n  while(y): \n   x, y = y, x % y \n  \n  return x\n def gcd_arr(l):\n  num1=l[0] \n  num2=l[1] \n  gcd=find_gcd(num1,num2) \n  \n  for i in range(2,len(l)): \n   gcd=find_gcd(gcd,l[i])\n  return(gcd)\n def factors(n):\n  #print(n)\n  if n==0:\n   return 1\n  x=[]\n  for i in range(1,int(n**(1/2))+1):\n   if n%i==0:\n    x.append(i)\n    x.append(n//i)\n  return(x)\n for t in range(int(input())):\n  n,m=map(int,input().split())\n  p=list(map(int,input().split()))\n  hcf=0\n  if m>1:\n   hcf=gcd_arr(p)\n  else:\n   hcf=p[0]\n  fact=factors(hcf)\n  fact.sort(reverse=True)\n  final=0\n  for i in fact:\n   if i<=n:\n    final=n-i\n    break\n  print(final)\nexcept:\n pass", "# cook your dish here\ndef find_gcd(x, y): \n while(y): \n  x, y = y, x % y \n \n return x\ndef gcd_arr(l):\n num1=l[0] \n num2=l[1] \n gcd=find_gcd(num1,num2) \n \n for i in range(2,len(l)): \n  gcd=find_gcd(gcd,l[i])\n return(gcd)\ndef factors(n):\n #print(n)\n if n==0:\n  return 1\n x=[]\n for i in range(1,int(n**(1/2))+1):\n  if n%i==0:\n   x.append(i)\n   x.append(n//i)\n return(x)\nfor t in range(int(input())):\n n,m=map(int,input().split())\n p=list(map(int,input().split()))\n hcf=0\n if m>1:\n  hcf=gcd_arr(p)\n else:\n  hcf=p[0]\n fact=factors(hcf)\n fact.sort(reverse=True)\n final=0\n for i in fact:\n  if i<=n:\n   final=n-i\n   break\n print(final)"]