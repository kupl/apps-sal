["class Solution:\n     def findLadders(self, beginWord, endWord, wordList):\n         wordDict = set(wordList)\n         if endWord not in wordDict: return []\n         wordDict.discard(beginWord)\n         front, back = set([beginWord]), set([endWord])\n         length = 2\n         direction = 1\n         parents = collections.defaultdict(set)\n         \n         while front:\n             next_level = set()\n             for word in front:\n                 for index in range(len(beginWord)):\n                     p1, p2 = word[:index], word[index+1:]\n                     for ch in 'abcdefghijklmnopqrstuvwxyz':\n                         if word[index] != ch:\n                             next_word = p1 + ch + p2\n                             if next_word in wordDict:\n                                 next_level.add(next_word)\n                                 if direction == 1:\n                                     parents[next_word].add(word)\n                                 else:\n                                     parents[word].add(next_word)\n                             \n             if next_level & back:\n                 res = [[endWord]]\n                 while res and res[0][0] !=beginWord:\n                     res = [[p]+r for r in res for p in parents[r[0]]]\n                 return res\n                 \n             length += 1\n             front = next_level\n             if len(front) > len(back):\n                 direction *= -1\n                 front, back = back, front\n             wordDict -= front\n         return []\n         \n         \n         \n         \n         \n         \n         \"\"\"\n         :type beginWord: str\n         :type endWord: str\n         :type wordList: List[str]\n         :rtype: List[List[str]]\n         \"\"\"\n"]