["# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def reorderList(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: void Do not return anything, modify head in-place instead.\n         \"\"\"\n         if not head:\n             return \n         fast, slow = head.next, head\n         while fast and fast.next:\n             fast = fast.next.next\n             slow = slow.next\n             \n         \n         p = slow.next\n         slow.next = None\n         node = None\n         while p:\n             nxt = p.next\n             p.next = node\n             node = p\n             p = nxt\n         \n         p = head\n         while node:\n             tmp = node.next\n             node.next = p.next\n             p.next = node\n             p = p.next.next\n             node = tmp\n             \n             ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def reorderList(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: void Do not return anything, modify head in-place instead.\n         \"\"\"\n         if not head:\n             return None\n         fast = slow = head\n         temp = ListNode(0)\n         while fast and fast.next:\n             slow = slow.next\n             fast = fast.next.next\n         node = slow.next\n         slow.next = None\n         pre = None\n         while node:\n             cur = node.next\n             node.next = pre\n             pre = node\n             node = cur\n         first = head\n         second = pre\n         while first and second:\n             node = first.next\n             first.next = second\n             second = second.next\n             first.next.next = node\n             first = node\n"]