["import sys\n# import math as mt\n# from collections import Counter\n# from itertools import permutations\n# from functools import reduce\n# from heapq import nsmallest, nlargest, heapify, heappop, heappush, heapreplace\n\ndef get_inpt(): return sys.stdin.readline().strip()\ndef get_int(): return int(sys.stdin.readline().strip())\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\n\n# sys.setrecursionlimit(10**7)\n# INF = float('inf')\n# MOD1, MOD2 = 10**9+7, 998244353\n\nn, k = get_ints()\n\nfor _ in range(k):\n    \n    arr = get_array()\n    \n    for i in reversed(range(n-1)):\n        \n        if arr[i] < arr[i+1]:\n            \n            ind = i+1\n            minn = arr[i+1]\n            for j in range(i+1, n):\n                if arr[j] > arr[i]:\n                    minn = min(arr[j], minn)\n                    ind = j\n                    \n            arr[i], arr[ind] = arr[ind], arr[i]\n            \n            arr = arr[:i+1] + sorted(arr[i+1:])\n            \n            break\n    \n    print(*arr)", "class Solution(object):\r\n   def nextPermutation(self, nums):\r\n      found = False\r\n      i = len(nums)-2\r\n      while i >=0:\r\n         if nums[i] < nums[i+1]:\r\n            found =True\r\n            break\r\n         i-=1\r\n      if not found:\r\n         nums.sort()\r\n      else:\r\n         m = self.findMaxIndex(i+1,nums,nums[i])\r\n         nums[i],nums[m] = nums[m],nums[i]\r\n         nums[i+1:] = nums[i+1:][::-1]\r\n      return nums\r\n   def findMaxIndex(self,index,a,curr):\r\n      ans = -1\r\n      index = 0\r\n      for i in range(index,len(a)):\r\n         if a[i]>curr:\r\n            if ans == -1:\r\n               ans = curr\r\n               index = i\r\n            else:\r\n               ans = min(ans,a[i])\r\n               index = i\r\n      return index\r\nob1 = Solution()\r\nn,k=map(int,input().split())\r\nl=[]\r\nfor i in range(k):\r\n    t=list(map(int,input().split()))\r\n    l.append(t)\r\nfor i in l:\r\n    print(*ob1.nextPermutation(i))\r\n", "n, t = list(map(int, input().split()))\r\nwhile(t):\r\n    t -= 1\r\n    a = list(map(int, input().split()))\r\n    i = n-1\r\n    while(i > 0 and a[i] < a[i-1]):\r\n        i -= 1\r\n    j = i\r\n    i -= 1\r\n    mini = j\r\n    while(j < n):\r\n        if(a[j] > a[i] and a[j] < a[mini]):\r\n            mini = j\r\n        j += 1\r\n    a[i], a[mini] = a[mini], a[i]\r\n    a[i+1:] = sorted(a[i+1:])\r\n    print(*a)", "n, k=map(int, input().split())\r\nfor i in range(k):\r\n    arr=list(map(int, input().split()))\r\n    res=[]\r\n    \r\n    for i in range(len(arr)-1, 0, -1):\r\n        if(arr[i]>arr[i-1]):\r\n            res.append(arr[i-1])\r\n            res.append(arr[i])\r\n            temp=arr[i-1]\r\n            break\r\n        else:\r\n            res.append(arr[i])\r\n        \r\n    res.sort()\r\n    for j in range(len(res)):\r\n        if(res[j]>temp):\r\n            arr[i-1]=res[j]\r\n            res.remove(res[j])\r\n            break\r\n    \r\n    for j in range(len(res)):\r\n        arr[i]=res[j]\r\n        i+=1\r\n        \r\n    print(*arr)"]