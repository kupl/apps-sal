["def main():\n    n, k = map(int, input().split())\n    a, b, c, d = (list(map(int, input().split())) for _ in 'abcd')\n    ss, tt, n2, res = [*b, *c[::-1]], [*a, *d[::-1]], n * 2, []\n    yx = [*[(2, i + 1) for i in range(n)], *[(3, i) for i in range(n, 0, -1)]]\n\n    def park():\n        for i, s, t, (y, x) in zip(range(n2), ss, tt, yx):\n            if s == t != 0:\n                ss[i] = 0\n                res.append(f'{s} {(1, 4)[y == 3]} {x}')\n\n    def rotate():\n        start = ss.index(0)\n        for i in range(start - n2, start - 1):\n            s = ss[i] = ss[i + 1]\n            if s:\n                y, x = yx[i]\n                res.append(f'{s} {y} {x}')\n        ss[start - 1] = 0\n\n    park()\n    if all(ss):\n        print(-1)\n        return\n    while any(ss):\n        rotate()\n        park()\n    print(len(res), '\\n'.join(res), sep='\\n')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, k = map(int, input().split())\n    a, b, c, d = (list(map(int, input().split())) for _ in 'abcd')\n    ss, tt, n2, res = [*b, *c[::-1]], [*a, *d[::-1]], n * 2, []\n    yx = [*[(2, i + 1) for i in range(n)], *[(3, i) for i in range(n, 0, -1)]]\n\n    def park():\n        for i, s, t, (y, x) in zip(range(n2), ss, tt, yx):\n            if s == t != 0:\n                ss[i] = 0\n                res.append(f'{s} {(1, 4)[y == 3]} {x}')\n\n    def rotate():\n        start = ss.index(0)\n        for i in range(start - n2, start - 1):\n            s = ss[i] = ss[i + 1]\n            if s:\n                y, x = yx[i]\n                res.append(f'{s} {y} {x}')\n        ss[start - 1] = 0\n\n    park()\n    if all(ss):\n        print(-1)\n        return\n    while any(ss):\n        rotate()\n        park()\n    print(len(res), '\\n'.join(res), sep='\\n')\n\n\ndef __starting_point():\n    main()\n\n\n\n\n# Made By Mostafa_Khaled\n__starting_point()", "def all_parked(parked):\n    result = True\n    for p in parked:\n        result = result and p\n    return result\n\n\nclass CodeforcesTask995ASolution:\n    def __init__(self):\n        self.result = ''\n        self.n_k = []\n        self.parking = []\n\n    def read_input(self):\n        self.n_k = [int(x) for x in input().split(\" \")]\n        for x in range(4):\n            self.parking.append([int(y) for y in input().split(\" \")])\n\n    def process_task(self):\n        parked = [False for x in range(self.n_k[1])]\n        moves = []\n        for x in range(self.n_k[0]):\n            if self.parking[0][x] == self.parking[1][x] and self.parking[1][x]:\n                moves.append([self.parking[0][x], 1, x + 1])\n                self.parking[1][x] = 0\n                parked[self.parking[0][x] - 1] = True\n            if self.parking[3][x] == self.parking[2][x] and self.parking[3][x]:\n                moves.append([self.parking[3][x], 4, x + 1])\n                self.parking[2][x] = 0\n                parked[self.parking[3][x] - 1] = True\n        if sum([1 if not x else 0 for x in parked]) == self.n_k[1] and self.n_k[1] == self.n_k[0] * 2:\n            self.result = \"-1\"\n        else:\n            while not all_parked(parked):\n                moved = [False for x in range(self.n_k[0])]\n                #for p in self.parking:\n                #    print(p)\n                #print(\"\\n\")\n                #print(moves)\n                if self.parking[1][0] and not self.parking[2][0]:\n                    moves.append([self.parking[1][0], 3, 1])\n                    self.parking[2][0] = self.parking[1][0]\n                    self.parking[1][0] = 0\n                    moved[0] = True\n                for x in range(1, self.n_k[0]):\n                    if not self.parking[1][x - 1] and self.parking[1][x]:\n                        moves.append([self.parking[1][x], 2, x])\n                        self.parking[1][x - 1] = self.parking[1][x]\n                        self.parking[1][x] = 0\n                if not self.parking[1][self.n_k[0] - 1] and self.parking[2][self.n_k[0] - 1] and not moved[self.n_k[0] - 1]:\n                    moves.append([self.parking[2][self.n_k[0] - 1], 2, self.n_k[0]])\n                    self.parking[1][self.n_k[0] - 1] = self.parking[2][self.n_k[0] - 1]\n                    self.parking[2][self.n_k[0] - 1] = 0\n                for x in range(self.n_k[0] - 1):\n                    if not self.parking[2][x + 1] and self.parking[2][x] and not moved[x]:\n                        moves.append([self.parking[2][x], 3, x + 2])\n                        self.parking[2][x + 1] = self.parking[2][x]\n                        self.parking[2][x] = 0\n                        moved[x + 1] = True\n                for x in range(self.n_k[0]):\n                    if self.parking[0][x] == self.parking[1][x] and self.parking[1][x]:\n                        moves.append([self.parking[0][x], 1, x + 1])\n                        self.parking[1][x] = 0\n                        parked[self.parking[0][x] - 1] = True\n                    if self.parking[3][x] == self.parking[2][x] and self.parking[3][x]:\n                        moves.append([self.parking[3][x], 4, x + 1])\n                        self.parking[2][x] = 0\n                        parked[self.parking[3][x] - 1] = True\n            self.result = \"{0}\\n{1}\".format(len(moves), \"\\n\".join([\" \".join([str(x) for x in move]) for move in moves]))\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask995ASolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "n,k=list(map(int,input().split()))\nm=[]\nc=0\nfor i in range(4):\n    m.append(list(map(int,input().split())))\nres=[]\nfor i in range(n):\n    if m[1][i] != 0:\n        if m[1][i] == m[0][i]:\n            res.append([m[1][i],1,i+1])\n            m[1][i] = 0\n            k-=1\nfor i in range(n):\n    if m[2][i] != 0:\n        if m[2][i] == m[3][i]:\n            res.append([m[2][i],4,i+1])\n            m[2][i] = 0\n            k-=1\nif k >= n*2:\n    print(-1)\n    return\nif True:\n    while True:\n        c+=1\n        for i in range(n):\n            if m[1][i] != 0:\n                if i != 0:\n                    if m[1][i-1] == 0:\n                        res.append([m[1][i],2,i])\n                        m[1][i-1] = m[1][i]\n                        m[1][i] = 0\n                        if m[0][i-1] == m[1][i-1]:\n                            res.append([m[1][i-1],1,i])\n                            m[0][i-1] = m[1][i-1]\n                            m[1][i-1] = 0\n                            k-=1\n                elif i == 0:\n                    if m[2][i] == 0:\n                        res.append([m[1][i],3,i+1])\n                        m[2][i] = m[1][i]\n                        m[1][i] = 0\n                        if m[3][i] == m[2][i]:\n                            res.append([m[2][i],4,i+1])\n                            m[3][i] = m[2][i]\n                            m[2][i] = 0\n                            k-=1\n        for i in range(n):\n            if m[2][i] != 0:\n                if i != n-1:\n                    if m[2][i+1] == 0:\n                        res.append([m[2][i],3,i+2])\n                        m[2][i+1] = m[2][i]\n                        m[2][i] = 0\n                        if m[3][i+1] == m[2][i+1]:\n                            res.append([m[2][i+1],4,i+2])\n                            m[3][i+1] = m[2][i+1]\n                            m[2][i+1] = 0\n                            k-=1\n                else:\n                    if m[1][i] == 0:\n                        res.append([m[2][i],2,i+1])\n                        m[1][i] = m[2][i]\n                        m[2][i] = 0\n                        if m[0][i] == m[1][i]:\n                            res.append([m[1][i],1,i+1])\n                            m[0][i] = m[1][i]\n                            m[1][i] = 0\n                            k-=1\n        if k <= 0:\n            break\n                \nelse:\n    print(-1)\n    return\nprint(len(res))\nfor i in res:\n    print(*i)\n", "def __starting_point():\n    numbers = list(map(int, input().split()))\n    n = numbers[0]\n    k = numbers[1]\n    left = 0\n    left = k\n    table = []\n    x = 4\n    while x > 0:\n        table.append(list(map(int, input().split())))\n        x = x -1\n    moves = []\n    for i in range(n):\n        if table[1][i] == table[0][i] and table[1][i] != 0:\n            moves.append((table[1][i], 1, i + 1))\n            table[0][i] = table[1][i]\n            table[1][i] = 0\n        if table[2][i] == table[3][i] and table[2][i] != 0:\n            moves.append((table[2][i], 4, i + 1))\n            table[3][i] = table[2][i]\n            table[2][i] = 0\n    ok = 0\n    for i in range(n):\n        if table[1][i] == 0:\n            ok = 1\n            break\n        if table[2][i] == 0:\n            ok = 1\n            break\n    if ok == 0:\n        print(-1)\n        return\n    for i in range(20000):\n        if table[1][0] != 0 and table[2][0] == 0:\n            moves.append((table[1][0], 3,  1))\n            table[2][0] = table[1][0]\n            table[1][0] = 0\n            if n == 1:\n                continue\n        for j in range(1, n):\n            if table[1][j - 1] == 0 and table[1][j] != 0:\n                moves.append((table[1][j], 2, j))\n                table[1][j - 1] = table[1][j]\n                table[1][j] = 0\n        for j in range(n):\n            if table[1][j] == table[0][j] and table[1][j] != 0:\n                moves.append((table[1][j], 1, j + 1))\n                table[0][j] = table[1][j]\n                table[1][j] = 0\n            if table[2][j] == table[3][j] and table[2][j] != 0:\n                moves.append((table[2][j], 4, j + 1))\n                table[3][j] = table[2][j]\n                table[2][j] = 0\n        if table[1][n - 1] == 0 and table[2][n - 1] != 0:\n            moves.append((table[2][n - 1], 2, n))\n            table[1][n-1] = table[2][n-1]\n            table[2][n-1] = 0\n        for j in range(n - 2,  -1, -1):\n            if table[2][j + 1] == 0 and table[2][j] != 0:\n                moves.append((table[2][j], 3, j + 2))\n                table[2][j + 1] = table[2][j]\n                table[2][j] = 0\n\n        for j in range(n):\n            if table[1][j] == table[0][j] and table[1][j] != 0:\n                        moves.append((table[1][j], 1, j + 1))\n                        table[0][j] = table[1][j]\n                        table[1][j] = 0\n            if table[2][j] == table[3][j] and table[2][j] != 0:\n                        moves.append((table[2][j], 4, j + 1))\n                        table[3][j] = table[2][j]\n                        table[2][j] = 0\n    if len(moves) > 20000:\n        print(-1)\n        return\n    print(len(moves))\n    # for j in range(len(moves)):\n      #  print(moves[j])\n    for j in moves:\n        print(*j)\n\n\n\n__starting_point()", "a=[0]*4\nn,k=list(map(int,input().split()))\nfor i in range(4):\n    a[i]=list(map(int,input().split()))\nfor i in range(n-1,-1,-1):\n    a[0].append(a[3][i])\n    a[1].append(a[2][i])\nans=[]\ndef check():\n    nonlocal k\n    for i in range(2*n):\n        if a[0][i]==a[1][i] and a[0][i]!=0:\n            if i<n:\n                ans.append([a[1][i],0,i])\n            else:\n                ans.append([a[1][i],3,2*n-i-1])\n            k-=1\n            a[0][i]=a[1][i]=0\ndef fuck():\n    step=-1\n    for i in range(2*n):\n        if a[1][i]==0:\n            step=i\n            break\n    if step==-1:\n        return False\n    else:\n        for i in range(2*n-1):\n            x=(step+i)%(2*n)\n            y=(step+1+i)%(2*n)\n            if a[1][y]!=0:\n                a[1][x]=a[1][y]\n                if x==n-1 and y==n:\n                    ans.append([a[1][y],1,n-1])\n                elif x==0 and y==0:\n                    ans.append([a[1][y],2,0])\n                elif x<n:\n                    ans.append([a[1][y],1,x])\n                else:\n                    ans.append([a[1][y],2,2*n-x-1])\n                a[1][y] = 0\n        return True\ncheck()\nwhile k!=0:\n    if fuck()==False:\n        print(-1)\n        return\n    check()\nprint(len(ans))\nfor i in ans:\n    x,y,z=i\n    print(x,y+1,z+1)\n\n\n\n\n"]