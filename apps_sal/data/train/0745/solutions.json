["# cook your dish here\n\nt = int(input())\nwhile t:\n t -= 1\n n = int(input())\n arr = list(map(int, input().split()))\n sumi = sum(arr)\n prev = 1\n for i in range(n):\n  arr[i] = min(arr[i], prev)\n  prev = arr[i] + 1\n prev = 1\n for i in range(n - 1, -1, -1):\n  arr[i] = min(arr[i], prev)\n  prev = arr[i] + 1\n temp = 0\n for i in range(n):\n  temp = max(temp, arr[i])\n print(sumi -( temp*temp))\n\n\n", "\nfor t in range(int(input())):\n n = int(input())\n h = [0]+list(map(int, input().split()))+[0]\n \n L = [0]*(n+2)\n for i in range(1, n+1):\n  L[i] = min(L[i-1]+1, h[i])\n R = [0]*(n+2)\n for i in range(n, 0, -1):\n  R[i] = min(R[i+1]+1, h[i])\n  \n max_height = 0\n for i in range(1, n+1):\n  height = min(L[i], R[i])\n  max_height = max(max_height, height)\n \n ans = sum(h) - max_height**2\n print(ans)\n", "t = int(input())\nfor a in range(t):\n n = int(input())\n arr = list(map(int, input().split()))\n sumarr = sum(arr)\n prev = 1\n for i in range(n):#changing value of arr[i]\n  arr[i] = min(arr[i], prev)\n  prev = arr[i] + 1\n prev = 1\n for i in range(n - 1, -1, -1):#changing value of arr[i]\n  arr[i] = min(arr[i], prev)\n  prev = arr[i] + 1\n temp = 0\n for i in range(n):\n  temp = max(temp, arr[i])\n print(sumarr -( temp*temp))#sumarr - (sum of n +sum of n-1)[sumarr-n^2]", "# cook your dish here\ndef temple(n,arr):\n s=sum(arr)\n left=[0]*n\n right=[0]*n \n left[0]=1 \n right[-1]=1 \n \n maxHeight=0\n \n for i in range(1,n):\n  left[i]=min(left[i-1]+1,arr[i])\n #print(*left)\n \n for i in range(n-2,-1,-1):\n  right[i]=min(right[i+1]+1,arr[i])\n #print(*right)\n \n for i in range(n):\n  maxHeight=max(maxHeight,min(left[i],right[i]))\n \n print(s-maxHeight**2)\n \n \n \nfor _ in range(int(input())):\n temple(int(input()),list(map(int,input().split())))\n", "\nt = int(input())\nwhile t:\n t -= 1\n n = int(input())\n arr = list(map(int, input().split()))\n sumi = sum(arr)\n prev = 1\n for i in range(n):\n  arr[i] = min(arr[i], prev)\n  prev = arr[i] + 1\n prev = 1\n for i in range(n - 1, -1, -1):\n  arr[i] = min(arr[i], prev)\n  prev = arr[i] + 1\n temp = 0\n for i in range(n):\n  temp = max(temp, arr[i])\n print(sumi -( temp*temp))\n\n\n", "t=int(input())\nwhile t!=0:\n t-=1\n n=int(input())\n h=list(map(int,input().split()))\n s = sum(h); h[0] = 1\n for i in range(1,n):\n  if h[i]>h[i-1]+1:\n   h[i] = h[i-1]+1\n h[n-1] = 1\n for i in range(n-2,-1,-1):\n  if h[i]>h[i+1]+1:\n   h[i] = h[i+1]+1\n print(s-max(h)**2)\n \n \n  \n  \n \n \n \n", "for _ in range(int(input())):\n n = int(input())\n h = list(map(int,input().split()))\n s = sum(h); h[0] = 1\n for i in range(1,n):\n  if h[i]>h[i-1]+1:\n   h[i] = h[i-1]+1\n h[n-1] = 1\n for i in range(n-2,-1,-1):\n  if h[i]>h[i+1]+1:\n   h[i] = h[i+1]+1\n print(s-max(h)**2)\n \n \n   \n", "for _ in range(int(input())):\n n = int(input())\n h = list(map(int,input().split()))\n s = sum(h); h[0] = 1\n for i in range(1,n):\n  if h[i]>h[i-1]+1:\n   h[i] = h[i-1]+1\n h[n-1] = 1\n for i in range(n-2,-1,-1):\n  if h[i]>h[i+1]+1:\n   h[i] = h[i+1]+1\n print(s-max(h)**2)", "t=int(input())\nfor _ in range(t):\n n=int(input())\n arr = list(map(int, input(). strip(). split()))\n a=[0]*n\n b=[0]*n\n if arr[0]>=1:\n  a[0]+=1\n  b[0]+=1\n if arr[-1]>=1:\n  a[-1]+=1\n  b[-1]+=1\n for i in range(1,n):\n  if arr[i]>=a[i-1]+1:\n   a[i]=a[i-1]+1\n  else:\n   a[i]=arr[i]\n for j in range(n-2,-1,-1):\n  if arr[j]>=b[j+1]+1:\n   b[j]=b[j+1]+1\n  else:\n   b[j]=arr[j]\n max=0\n for i in range(n):\n  tmp=min(a[i],b[i])\n  if tmp>max:\n   max=tmp\n total = sum(arr)\n s=max+ (max*(max-1))\n print(total-s)\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Dec 19 19:45:35 2019\n\n@author: user\n\"\"\"\ndef ceil(num,arr,l,r):\n if(l>r):\n  return r+1\n if(arr[r]<num):\n  return r+1\n while(l<r):\n  m=(l+r)//2\n  if(arr[m]>=num):\n   r=m\n  else:\n   l=m+1\n return r\n \nt=int(input())\nfor i in range(t):\n n=int(input())\n arr=[int(i) for i in input().split()]\n l=[0 for i in range(n)]\n r=[0 for i in range(n)]\n l[0]=1\n r[-1]=1\n for i in range(1,n):\n  l[i]=min(l[i-1]+1,arr[i])\n  r[n-1-i]=min(r[n-i]+1,arr[n-1-i])\n counter=-1\n for i in range(n):\n  counter=max(counter,min(l[i],r[i]))\n print(sum(arr)-counter**2)\n \n", "for __ in range(int(input())):\n N = int(input())\n arr = [0] + list(map(int, input().split())) + [0]\n L = [0]*(N+2)\n R = [0]*(N+2)\n for i in range(1, N + 1):\n  L[i] = min(L[i - 1] + 1, arr[i])\n for i in range(N, 0, -1):\n  R[i] = min(R[i+1] + 1, arr[i])\n maxval = 0\n for i in range(1, N+1):\n  maxval = max(maxval, min(L[i], R[i]))\n print(sum(arr) - maxval**2)", "t = int(input())\n\nfor _ in range(t):\n n = int(input())\n h = list(map(int, input().split()))\n \n s = sum(h)\n \n h[0] = 1\n for i in range(1,n):\n  if h[i] > h[i-1]+1:\n   h[i] = h[i-1]+1\n h[n-1] = 1\n \n for i in range(n-2,-1,-1):\n  if h[i] > h[i+1]+1:\n   h[i] = h[i+1]+1\n   \n print(s-max(h)**2)\n \n", "t = int(input())\nfor _ in range(t):\n n = int(input())\n h = list(map(int, input().split()))\n L,R = [0]*(n+2), [0]*(n+2)\n \n for i in range(1, n+1):\n  L[i] = min(L[i - 1]+1, h[i-1])\n for i in range(n, 0, -1):\n  R[i] = min(R[i+1]+1, h[i-1])\n \n mx = 0\n for i in range(1, n+1):\n  mx = max(mx, min(L[i], R[i]))\n \n ans = sum(h) - mx ** 2\n print(ans)", "for _ in range(int(input().strip())):\n n = int(input().strip())\n arr = list(map(int, input().strip().split()))\n sum_arr = sum(arr)\n \n l = [0 for i in range(n)]\n count = 0\n for idx in range(n):\n  if arr[idx] >= count + 1:\n   count += 1\n  else:\n   count = arr[idx]\n  l[idx] = count\n \n r = [0 for i in range(n)]\n count = 0\n for idx in range(n - 1, -1, -1):\n  if arr[idx] >= count + 1:\n   count += 1\n  else:\n   count = arr[idx]\n  r[idx] = count\n \n optimum = [min(l[i], r[i]) for i in range(n)]\n max_m = max(optimum)\n \n print(sum_arr - (max_m**2))\n", "# cook your dish here\nt=int(input())\nfor _ in range(t):\n n=int(input())\n a=[0]+[int(i) for i in input().split()]+[0]\n l=[0]*(n+2)\n r=[0]*(n+2)\n for i in range(1,n+1):\n  l[i]=min(l[i-1]+1,a[i])\n for i in range(n,0,-1):\n  r[i]=min(r[i+1]+1,a[i])\n max_h=0\n for i in range(1,n+1):\n  height=min(l[i],r[i])\n  max_h=max(max_h,height)\n ans=sum(a)-max_h**2\n print(ans)", "for _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n s=sum(a)\n a[0]=1\n for i in range(1,len(a)):\n  if a[i]>a[i-1]+1:\n   a[i]=a[i-1]+1\n a[n-1] = 1\n for i in range(len(a)-2,-1,-1):\n  if a[i]>a[i+1]+1:\n   a[i]=a[i+1]+1\n print(s-max(a)**2)", "for t in range(int(input())):\n n = int(input())\n arr = list(map(int, input().split()))\n arr=[0]+arr+[0]\n L = [0]*(n+2)\n for i in range(1, n+1):\n  L[i] = min(L[i-1]+1, arr[i])\n R = [0]*(n+2)\n for i in range(n, 0, -1):\n  R[i] = min(R[i+1]+1, arr[i]) \n ma = 0\n for i in range(1, n+1):\n  l = min(L[i], R[i])\n  ma = max(ma, l)\n \n ans = sum(arr) - ma**2\n print(ans)", "t=int(input())\nfor I in range(t):\n n=int(input())\n a=[0]+[int(i) for i in input().split()] + [0]\n L=[0]*(n+2)\n R=[0]*(n+2)\n for i in range(1,n+1):\n  L[i] = min(1+L[i-1],a[i])\n for i in range(n,0,-1):\n  R[i] = min(R[i+1]+1,a[i])\n max_height=0\n for i in range(1,n+1):\n  ht = min(L[i],R[i])\n  max_height = max(max_height,ht)\n ans = sum(a) - max_height**2\n print(ans)\n", "for _ in range(int(input())):\n n = int(input())\n ls = [0] + list(map(int, input().split())) + [0]\n r = [0] * (n+2)\n l = [0] * (n+2)\n for i in range(1, n+1):\n  l[i] = min(l[i-1] + 1, ls[i])\n for i in range(n, 0, -1):\n  r[i] = min(r[i+1] + 1, ls[i])\n Max = 0\n for i in range(1, n+1):\n  Max = max(Max, min(l[i], r[i]))\n print(sum(ls) - (Max ** 2))", "for T in range(int(input())):\n n = int(input())\n arr = [0]+[int(x) for x in input().split()]+[0]\n L = [0]*(n+2)\n R = [0]*(n+2)\n k = 0\n for i in range(1,n+1):\n  L[i] = min(L[i-1]+1, arr[i])\n for i in range(n,0,-1):\n  R[i] = min(R[i+1]+1, arr[i])\n maxHeight = 0\n for i in range(1,n+1):\n  height = min(L[i],R[i])\n  maxHeight = max(maxHeight, height)\n print(sum(arr) - maxHeight**2)\n\n\n   \n", "for _ in range(int(input())):\n n=int(input())\n h=[0]+[int(i) for i in input().split()]+[0]\n l=[0]*(n+2)\n r=[0]*(n+2)\n for i in range(1,n+1):\n  l[i]=min(l[i-1]+1,h[i])\n for i in range(n,0,-1):\n  r[i]=min(r[i+1]+1,h[i])\n maxi=0 \n for i in range(n):\n  curr=min(l[i],r[i])\n  maxi=max(maxi,curr)\n print(sum(h)-maxi*maxi)\n", "for tests in range(int(input())):\n n = int(input())\n blockHeights = [int(blockHeight) for blockHeight in input().split()]\n sumOfBlockHeightsBefore = sum(blockHeights)\n blockHeights[0] = blockHeights[n-1] = 1\n\n # make all possible temples and choose biggest one, as its demolition cost \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0will be heighest\n # carve first half of temples i.e left right angle triangle, considering \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temple an equilateral triangle\n for i in range(1, n):\n  if blockHeights[i] > blockHeights[i-1] + 1:\n   blockHeights[i] = blockHeights[i-1] + 1\n\n # carve second half of temples i.e right right angle triangle\n for i in range(n-2, -1, -1):\n  if blockHeights[i] > blockHeights[i+1] + 1:\n   blockHeights[i] = blockHeights[i+1] + 1\n heightOfTallestTemple = max(blockHeights)\n\n # find sum of blocks for height of tallest temple\n # through arithematic progression we have a1= 1, an = heightOfTallestTemple, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0d = 1 and thus Sn = (a1 + an) * an / 2\n # so we have to AP series for two halves of temple\n # s1 = (1 + heightOfTallestTemple) * heightOfTallestTemple / 2\n # s2 = (1 + heightOfTallestTemple-1) * (heightOfTallestTemple - 1) / 2\n # s = s1 + s2\n # fruther simplifying we have\n # s = heightOfTallestTemple * heightOfTallestTemple\n s = heightOfTallestTemple ** 2\n\n noOfOperations = sumOfBlockHeightsBefore - s\n # print(blockHeights, heightOfTallestTemple, sum(blockHeights), \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sumOfBlockHeightsBefore, s, sep=' | ')\n print(noOfOperations)\n", "for t in range(int(input())):\n n = int(input())\n ht_array = [int(e) for e in input().split()]\n sum_of_array = sum(ht_array)\n ht_array[0] = 1\n for i in range(1, n):\n  if ht_array[i] > ht_array[i-1] + 1:\n   ht_array[i] = ht_array[i-1] + 1\n ht_array[n-1] = 1\n for i in range(n-2, -1, -1):\n  if ht_array[i] > ht_array[i+1] + 1:\n   ht_array[i] = ht_array[i+1] + 1\n #print(ht_array)\n max_height = max(ht_array)\n moves = sum_of_array - (max_height*max_height)\n print(moves)\n", "def left(h,m, n):\n k = 0\n L = [False]*(n)\n for i in range(n):\n  if h[i] >= k+1:\n   k += 1\n   if k == m:\n    L[i] = True\n    k -= 1\n  else:\n   k = h[i]\n return L \n   \ndef right(h, m, n):\n k = 0\n R = [False]*(n)\n for i in range(n-1, -1, -1):\n  if h[i] >= k+1:\n   k += 1\n   if k == m:\n    R[i] = True\n    k -= 1\n  else:\n   k = h[i]\n return R \n\ndef comp(h, m, n):\n l = left(h, m, n)\n r = right(h, m, n)\n for i in range(n):\n  if l[i] == True and r[i] == True:\n   return True\n return False\n \nfor _ in range(int(input().strip())):\n blocks = int(input().strip())\n blocks_height = list(map(int, input().strip().split()))\n su = sum(blocks_height)\n start = 1\n end = blocks + 1\n while start < end - 1:\n  mid = (start+end)//2\n  if comp(blocks_height, mid, blocks):\n   start = mid\n  else:\n   end = mid\n print(su - start*start) \n \n \n \n"]