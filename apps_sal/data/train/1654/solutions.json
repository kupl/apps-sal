["import re\n\ndef solve_runes(runes):\n    for d in sorted(set(\"0123456789\") - set(runes)):\n        toTest = runes.replace(\"?\",d)\n        if re.search(r'([^\\d]|\\b)0\\d+', toTest): continue\n        l,r = toTest.split(\"=\")\n        if eval(l) == eval(r): return int(d)\n    return -1", "def solve_runes(runes):\n    for c in sorted(set('0123456789') - set(runes)):        \n        s = runes.replace('?', c).replace('-', ' - ').replace('+', ' + ').replace('*', ' * ').replace('=', ' == ')\n        if not any(e[0] == '0' and e != '0' for e in s.split()) and eval(s): return int(c)\n    return -1", "import re\n\ndef solve_runes(runes):\n    for d in '0123456789':\n        if d not in runes:\n            if d == '0' and (re.search('(^|[+\\-*=])\\?[?\\d]', runes)):\n                continue\n            expr = runes.replace('?', d).replace('=', '==')\n            if eval(expr):\n                return int(d)\n    return -1", "import re\n\n\ndef solve_runes(runes):\n    runes = runes.replace('=', '==')\n    s = bool(re.search(r'\\b0\\d', runes.replace('?', '0')))\n    for d in map(str, range(s, 10)):\n        if d not in runes and eval(runes.replace('?', d)):\n            return int(d)\n    return -1", "def solve_runes(runes):\n    # Sorted set subtraction returns a list of elements in the first set that weren't in the second\n    for i in sorted(set('0123456789')-set(runes)):\n        # Prepare string for eval\n        eval_string = runes.replace('?', str(i)).replace('=','==')\n        # Python 3 gives an error if an int starts with 0.\n        # We use it for our advantage. Also check that result is not 00\n        try:\n            if eval(eval_string) and eval_string[-4:] != '==00':\n                return int(i)\n        except:\n            continue\n    return -1", "import re\n\ndef solve_runes(runes):\n    # \u5206\u89e3\n    m = re.match(r'(-?[0-9?]+)([-+*])(-?[0-9?]+)=(-?[0-9?]+)', runes)\n    nums = [m.group(1),m.group(3),m.group(4)]\n    op = m.group(2)\n    \n    # \u8fed\u4ee3\u5c1d\u8bd5\n    for v in range(0,10):\n        # \u540c\u5b57\u6821\u9a8c\n        if str(v) in runes:\n            continue\n            \n        testNums = [num.replace('?',str(v)) for num in nums]\n        \n        # 0\u8d77\u59cb\u6821\u9a8c\n        for num in testNums:\n            if re.match(r\"(^0|^(-0))[0-9]+\",num):\n                break\n        else:\n            # \u5224\u7b49\n            if int(testNums[2]) == eval(testNums[0] + op + testNums[1]):\n                return v\n    \n    return -1 ", "import re\ndef solve_runes(runes):\n    m = re.match(r'{n}([-+*]){n}={n}$'.format(n=r'(0|-?[1-9?][0-9?]*)'), runes)\n    if not m: return -1\n    l, op, r, ans = m.groups()\n    start = any(len(s)>1 and (s[0]=='?' or s[:2] == '-?') for s in (l, r, ans))\n    check = runes.replace('=','==')\n    return next((i for i in range(start,10) if\n                 str(i) not in runes and eval(check.replace('?',str(i)))), -1)", "import operator\ndef solve_runes(runes):\n    r = [x for x in runes]\n    print(runes)\n    a = []\n    b = []\n    c = []\n    d = [\"+\",\"-\",\"*\",\"=\"]\n    s = []\n    cntr = 0\n    scntr = 0\n    for i in r:\n        if r.index(i) == 0 and r[0] == \"-\" and scntr == 0:\n            a.append(i)\n            scntr +=1\n        elif r.index(i) != 0 and i not in d:\n            a.append(i)\n        elif r.index(i) == 0 and i not in d:\n            a.append(i)\n        elif r.index(i) != 0 and i in d:\n            s.append(i)\n            break\n        elif i in d and scntr != 0 and i == \"-\":\n            s.append(i)\n            break\n        cntr += 1\n    cntr2=0\n    r1 = r[cntr+1:]\n    for i in r1:\n        if r1.index(i) == 0 and r1[0] == \"-\":\n            b.append(i)\n        elif r1.index(i) != 0 and i not in d:\n            b.append(i)\n        elif r1.index(i) == 0 and i not in d:\n            b.append(i)\n        elif r1.index(i) != 0 and i in d:\n            break\n        cntr2 += 1\n    r2 = r[cntr+cntr2+2:]\n    for i in r2:\n        if r2.index(i) == 0 and r2[0] == \"-\":\n            c.append(i)\n        elif r2.index(i) != 0 and i not in d:\n            c.append(i)\n        elif r2.index(i) == 0 and i not in d:\n            c.append(i)\n        elif r2.index(i) != 0 and i in d:\n            break\n    number = list(range(0,10))\n    number2 = list(range(1,10))\n    op = {\"+\":operator.add, \"-\":operator.sub, \"*\":operator.mul}\n    alist = [a,b,c]\n    ilist = []\n    for i in alist:\n        for x in i:\n            if x == \"-\" and i.index(x) == 0:\n                if i[1] ==\"?\":\n                    ilist.append(\"nZero\")\n                    break\n            elif x == \"?\" and i.index(x) == 0 and len(i) != 1:\n                ilist.append(\"nZero\")\n                break\n            else:\n                ilist.append(\"yZero\")\n                break\n    num = []\n    num2 = []\n    print((a,b,c))\n    for i in number:\n        if str(i) not in a and str(i) not in b and str(i) not in c:\n            num.append(i)\n    for i in number2:\n        if str(i) not in a and str(i) not in b and str(i) not in c:\n            num2.append(i)\n    if \"nZero\" in ilist:\n        for n in num2:\n            a1 = [str(n) if x == \"?\" else x for x in a]\n            b1 = [str(n) if x == \"?\" else x for x in b]\n            c1 = [str(n) if x == \"?\" else x for x in c]\n            a1 = int(\"\".join(a1))\n            b1 = int(\"\".join(b1))\n            c1 = int(\"\".join(c1))\n            if (op[s[0]](a1,b1)) == c1:\n                return n\n    if \"nZero\" not in ilist:\n         for n in num:\n            a1 = [str(n) if x == \"?\" else x for x in a]\n            b1 = [str(n) if x == \"?\" else x for x in b]\n            c1 = [str(n) if x == \"?\" else x for x in c]\n            a1 = int(\"\".join(a1))\n            b1 = int(\"\".join(b1))\n            c1 = int(\"\".join(c1))\n            if (op[s[0]](a1,b1)) == c1:\n                return n\n    return -1\n        \n        \n        \n        \n        \n        \n            \n", "def solve_runes(runes):\n    massV = []                \n    massV_ind = []\n    massD1 = []\n    massD2 = []                # more lists to the god of lists!!!!!!!!!!!\n    massD1_ind = []\n    massD2_ind = []\n    ex = []\n    mat = []\n\n    expr, value = runes.split('=')\n\n    if expr.find('*',1) != -1:\n        ind = expr.index('*',1)\n        dig_1 = expr[:ind]\n        dig_2 = expr[ind+1:]\n        sign = '*'\n    elif expr.find('+',1) != -1:\n        ind = expr.index('+',1)\n        dig_1 = expr[:ind]\n        dig_2 = expr[ind+1:]\n        sign = '+'\n    else:\n        ind = expr.index('-',1)\n        dig_1 = expr[:ind]\n        dig_2 = expr[ind+1:]\n        sign = '-'\n\n\n\n    for i in range(len(value)):\n        if value[i] == \"?\":\n            massV_ind.append(value.index(value[i],i))\n            massV.append('0')\n        else:\n            massV.append(value[i])\n\n    for i in range(len(dig_1)):\n        if dig_1[i] == \"?\":\n            massD1_ind.append(dig_1.index(dig_1[i],i))\n            massD1.append('0')\n        else:\n            massD1.append(dig_1[i])\n    \n    for i in range(len(dig_2)):\n        if dig_2[i] == \"?\":\n            massD2_ind.append(dig_2.index(dig_2[i],i))\n            massD2.append('0')\n        else:\n            massD2.append(dig_2[i])\n\n    for i in range(0,10):\n        for q in range(len(massD1_ind)):\n            massD1[massD1_ind[q]] = str(i)\n        for w in range(len(massD2_ind)):\n            massD2[massD2_ind[w]] = str(i)\n        for e in range(len(massV_ind)):\n            massV[massV_ind[e]] = str(i)\n\n        d1 = int(''.join(massD1))\n        d2 = int(''.join(massD2))\n        val = int(''.join(massV))\n\n        if sign == '*':\n            if d1 * d2 == val:\n                ex.append(i)\n\n        if sign == '-':\n            if d1 - d2 == val:\n                ex.append(i)\n\n        if sign == '+':\n            if d1 + d2 == val:\n                ex.append(i)\n\n                                                # hate\n    if dig_1[0] == '-':\n        if 1 in massD1_ind:\n            if len(massD1)>1:                 \n                if 0 in ex:\n                    ex.remove(0)\n    else:\n        if 0 in massD1_ind:\n            if len(massD1)>1:\n                if 0 in ex:\n                    ex.remove(0)\n                                                # minuses                    \n    if dig_2[0] == '-':\n        if 1 in massD2_ind:\n            if len(massD2)>1:               \n                if 0 in ex:\n                    ex.remove(0)\n    else:\n        if 0 in massD2_ind:\n            if len(massD2)>1:\n                if 0 in ex:\n                    ex.remove(0)\n\n    if value[0] == '-':\n        if 1 in massV_ind:\n            if len(massV)>1:\n                if 0 in ex:\n                    ex.remove(0)\n    else:\n        if 0 in massV_ind:\n            if len(massV)>1:\n                if 0 in ex:\n                    ex.remove(0)\n\n\n    for i in runes:\n        if i in '1234567890':\n            mat.append(int(i))\n    mat = set(mat)\n\n    if len(ex) == 0:\n        return -1\n    else:\n        for i in ex:\n            if i in mat:\n                continue\n            else:                         # rofl-master\n                return i                  # 3 hours\n    return -1                             # ------   o,o   -------    -_-", "import re\n\ndef solve_runes(runes):\n    for i in sorted(set(\"\".join([str(i) for i in range(10)]))-set(runes)):\n        var = runes.replace(\"?\",i)\n        if re.search(r'([^\\d]|\\b)0\\d+', var): \n          continue\n        expr,result = var.split(\"=\")\n        if eval(expr) == eval(result): \n          return int(i)\n    return -1"]