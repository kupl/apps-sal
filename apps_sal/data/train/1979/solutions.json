["class Solution:\n    def largestTimeFromDigits(self, A: List[int]) -> str:\n        max_time = -1\n        # enumerate all possibilities, with the permutation() func\n        for h, i, j, k in itertools.permutations(A):\n            hour = h*10 + i\n            minute = j*10 + k\n            if hour < 24 and minute < 60:\n                max_time = max(max_time, hour * 60 + minute)\n        \n        if max_time == -1:\n            return \\\"\\\"\n        else:\n            return \\\"{:02d}:{:02d}\\\".format(max_time // 60, max_time % 60)", "class Solution:\n    def largestTimeFromDigits(self, A: List[int]) -> str:\n\n        def checkT(x):\n            for n in range(x,-1,-1):\n                if n in self.t:\n                    self.ans += str(n)\n                    self.t.remove(n)\n                    return(True)\n            return(False)\n\n        for x in range(2,-1,-1):\n            self.t = list(A)\n            self.ans = \\\"\\\"\n            if x == 2:\n                if x in self.t:\n                    self.ans += \\\"2\\\"\n                    self.t.remove(2)\n                    if checkT(3):\n                        self.ans += \\\":\\\"\n                        if checkT(5):\n                            self.ans += str(self.t[0])\n                            return(self.ans)\n                continue\n\n            if x in self.t:\n                self.ans += str(x)\n                self.t.remove(x)\n                if checkT(9):\n                    self.ans += \\\":\\\"\n                    if checkT(5):\n                        self.ans += str(self.t[0])\n                        return(self.ans)\n        return(\\\"\\\")\n", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        \n        perm = list(itertools.permutations(arr,4))\n        output = []\n        \n        for a,b,c,d in perm:\n            temp = \\\"{}{}:{}{}\\\".format(a,b,c,d)\n            try:\n                datetime.datetime.strptime(temp, \\\"%H:%M\\\")\n            except:\n                continue\n                \n            output.append(temp)\n                \n        if not output: return \\\"\\\"\n        \n        return max(output)", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        ptr1,ptr2,ptr3,ptr4=0,1,2,3\n        time,maxtime = 0,0\n        hour,mins = 0,0\n        if arr == [0,0,0,0]:\n            return \\\"00:00\\\"\n        finalTime = \\\"\\\"\n        valid = False\n        for i in range(0,64):\n            hour=arr[ptr1]*10+arr[ptr2]\n            mins=arr[ptr3]*10+arr[ptr4]\n            \n            if(hour<24 and mins<60):\n                time = hour*100+mins\n                if(time>maxtime):\n                    valid = True\n                    maxtime = time\n            if(ptr1>=3):ptr1 = 0 \n            else: ptr1+=1\n            if(ptr2>=3):ptr2 = 0 \n            else: ptr2+=1\n            if(ptr3>=3):ptr3 = 0 \n            else: ptr3+=1\n            if(ptr4>=3):ptr4 = 0 \n            else: ptr4+=1\n        ptr1,ptr2,ptr3,ptr4=3,2,0,1\n        for i in range(0,64):\n            hour=arr[ptr1]*10+arr[ptr2]\n            mins=arr[ptr3]*10+arr[ptr4]\n            if(hour<24 and mins<60):\n                time = hour*100+mins\n                if(time>maxtime):\n                    valid = True\n                    maxtime = time\n            if(ptr1>=3):ptr1 = 0 \n            else: ptr1+=1\n            if(ptr2>=3):ptr2 = 0 \n            else: ptr2+=1\n            if(ptr3>=3):ptr3 = 0 \n            else: ptr3+=1\n            if(ptr4>=3):ptr4 = 0 \n            else: ptr4+=1\n        ptr1,ptr2,ptr3,ptr4=2,3,1,0\n        for i in range(0,64):\n            hour=arr[ptr1]*10+arr[ptr2]\n            mins=arr[ptr3]*10+arr[ptr4]\n            if(hour<24 and mins<60):\n                time = hour*100+mins\n                if(time>maxtime):\n                    valid = True\n                    maxtime = time\n            if(ptr1>=3):ptr1 = 0 \n            else: ptr1+=1\n            if(ptr2>=3):ptr2 = 0 \n            else: ptr2+=1\n            if(ptr3>=3):ptr3 = 0 \n            else: ptr3+=1\n            if(ptr4>=3):ptr4 = 0 \n            else: ptr4+=1\n        ptr1,ptr2,ptr3,ptr4=2,0,3,1\n        for i in range(0,64):\n            hour=arr[ptr1]*10+arr[ptr2]\n            mins=arr[ptr3]*10+arr[ptr4]\n            if(hour<24 and mins<60):\n                time = hour*100+mins\n                if(time>maxtime):\n                    valid = True\n                    maxtime = time\n            if(ptr1>=3):ptr1 = 0 \n            else: ptr1+=1\n            if(ptr2>=3):ptr2 = 0 \n            else: ptr2+=1\n            if(ptr3>=3):ptr3 = 0 \n            else: ptr3+=1\n            if(ptr4>=3):ptr4 = 0 \n            else: ptr4+=1\n        ptr1,ptr2,ptr3,ptr4=1,3,0,2\n        for i in range(0,64):\n            hour=arr[ptr1]*10+arr[ptr2]\n            mins=arr[ptr3]*10+arr[ptr4]\n            if(hour<24 and mins<60):\n                time = hour*100+mins\n                if(time>maxtime):\n                    valid = True\n                    maxtime = time\n            if(ptr1>=3):ptr1 = 0 \n            else: ptr1+=1\n            if(ptr2>=3):ptr2 = 0 \n            else: ptr2+=1\n            if(ptr3>=3):ptr3 = 0 \n            else: ptr3+=1\n            if(ptr4>=3):ptr4 = 0 \n            else: ptr4+=1\n        ptr1,ptr2,ptr3,ptr4=1,0,3,2\n        for i in range(0,64):\n            hour=arr[ptr1]*10+arr[ptr2]\n            mins=arr[ptr3]*10+arr[ptr4]\n            if(hour<24 and mins<60):\n                time = hour*100+mins\n                if(time>maxtime):\n                    valid = True\n                    maxtime = time\n            if(ptr1>=3):ptr1 = 0 \n            else: ptr1+=1\n            if(ptr2>=3):ptr2 = 0 \n            else: ptr2+=1\n            if(ptr3>=3):ptr3 = 0 \n            else: ptr3+=1\n            if(ptr4>=3):ptr4 = 0 \n            else: ptr4+=1\n        finalTimeStr = str(maxtime)\n        print(finalTimeStr)\n        if(len(finalTimeStr)==3):\n            finalTimeStr = \\\"0\\\" + finalTimeStr\n        return finalTimeStr[0]+finalTimeStr[1]+\\\":\\\"+finalTimeStr[2]+finalTimeStr[3] if valid else \\\"\\\"\n    \n    ", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        \n        count02 = 0\n        count03 = 0\n        count05 = 0\n        count09 = 0\n        newstr = \\\"\\\"\n        for i in range(4):\n            if arr[i]<=2:\n                count02 += 1\n            if arr[i]<=3:\n                count03 += 1 \n            if arr[i]<=5:\n                count05 += 1\n        if count02 == 0 or (2 in arr and count03 == 1) or (2 in arr and count02 == 1 and count05 <= 2) or count05 <= 1 :\n            return \\\"\\\"\n        if 2 in arr and count05 > 2:\n            newstr = newstr + str(2)\n            arr.remove(2)\n        elif count05 <=2 or 2 not in arr:\n            if 1 in arr:\n                newstr = newstr + str(1)\n                arr.remove(1)\n            elif 0 in arr:\n                newstr = newstr + str(0)\n                arr.remove(0)\n            else:\n                return \\\"\\\"\n        if newstr[0] != \\\"2\\\":\n            for i in range(9, -1, -1):\n                if i in arr:\n                    newstr = newstr+ str(i) + \\\":\\\"\n                    arr.remove(i)\n                    break\n        else:\n            for i in range(3, -1, -1):\n                if i in arr:\n                    newstr = newstr+ str(i) + \\\":\\\"\n                    arr.remove(i)\n                    break\n    \n        for i in range(5, -1, -1):\n            if i in arr:\n                newstr = newstr+ str(i)\n                arr.remove(i)\n                break\n        if len(newstr) <= 3:\n            return \\\"\\\"\n        newstr = newstr + str(arr[0])\n            \n        return newstr\n    ", "class Solution:\n\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        all_zero = True\n        for item in arr:\n            if item != 0:\n                all_zero = False\n        \n        if all_zero:\n            return \\\"00:00\\\"\n        if min(arr) >= 3:\n            return \\\"\\\"\n        \n        time = [0,0]\n        \n\n        def is_valid_hour(hour: int)->bool:\n            return 0 <= hour and hour <= 23\n\n        def is_valid_minute(minute: int)->bool:\n            return 0 <= minute and minute <= 59\n\n        def compare_and_update(time2: list)->None:\n            if time2[0] > time[0]:\n                time[0] = time2[0]\n                time[1] = time2[1]\n            elif time2[0] == time[0]:\n                if time2[1] > time[1]:\n                    time[1] = time2[1]\n            else:\n                pass\n\n        for i in arr:\n            sub1 = arr.copy()\n            sub1.remove(i)\n            for j in sub1:\n                hr = i*10 + j\n                if is_valid_hour(hr):\n                    sub2 = sub1.copy()\n                    sub2.remove(j)\n                    mn1 = sub2[0]*10 + sub2[1]\n                    mn2 = sub2[1]*10 + sub2[0]\n                    if is_valid_minute(mn1):\n                        new_time = [hr,mn1]\n                        compare_and_update(new_time)\n                    if is_valid_minute(mn2):\n                        new_time = [hr,mn2]\n                        compare_and_update(new_time)\n\n\n        h2 = time[0] % 10 ; time[0] //= 10\n        h1 = time[0]\n\n        m2 = time[1] % 10 ; time[1] //= 10\n        m1 = time[1]\n        \n        if h1 == h2 and h2 == m1 and m1 == m2 and m2 == 0:\n            return \\\"\\\"\n\n        return f\\\"{h1}{h2}:{m1}{m2}\\\"\n        ", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        ll = []\n        def printAllKLength(set, k):\n            n = len(set) \n            printAllKLengthRec(set, \\\"\\\", n, k)\n        def printAllKLengthRec(set, prefix, n, k): \n            if (k == 0): \n                st = True\n                for i in prefix:\n                    if prefix.count(i) != set.count(i):\n                        st = False\n                        break\n                if st == True and prefix not in ll:\n                    ll.append(prefix)\n                return prefix\n            for i in range(n): \n                newPrefix = prefix + set[i] \n                printAllKLengthRec(set, newPrefix, n, k - 1) \n        set2=[]\n        for i in arr:\n            set2.append(str(i))\n        k = 4\n        printAllKLength(set2,k)\n        ll.sort(reverse=True)\n        s = ''\n        for i in ll:\n            if int(i[0])<2 and int(i[1])<10 and int(i[2]) <6 :\n                s = i[0]+i[1]+\\\":\\\"+i[2]+i[3]\n                break\n            if int(i[0]) == 2 and int(i[1])<4 and int(i[2])<6:\n                s = i[0] + i[1]+\\\":\\\"+i[2]+i[3]\n                break\n            else:\n                continue\n        return(s)\n        \n    \n\\t\n\n        \n                \n            \n        \n\n                \n                \n            \n            \n            \n            \n            \n                \n        \n        \n        ", "class Solution:\n    def check_valid_hour(self, arr:List[int], i: int, j: int) -> bool:\n        minutes_index = [x for x in [0,1,2,3] if x != i and x != j]\n        minutes = max(int(str(arr[minutes_index[0]])+str(arr[minutes_index[1]])), int(str(arr[minutes_index[1]])+str(arr[minutes_index[0]]))) \n        \n        if minutes >= 60:\n            minutes = min(int(str(arr[minutes_index[0]])+str(arr[minutes_index[1]])), int(str(arr[minutes_index[1]])+str(arr[minutes_index[0]])))             \n        \n        if minutes >= 60:\n            return False\n        return True\n    \n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        if len(arr) == 0:\n            return \\\"\\\"\n        \n        index_i = -1\n        index_j = -1\n        max_hour = -1\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if i != j:\n                    if int(str(arr[i])+str(arr[j])) < 24 and int(str(arr[i])+str(arr[j])) >= max_hour and self.check_valid_hour(arr,i,j):\n                        max_hour = int(str(arr[i])+str(arr[j]))\n                        index_i = i\n                        index_j = j\n        \n        minutes_index = [x for x in [0,1,2,3] if x != index_i and x != index_j]\n        \n        if max_hour == -1:\n            return \\\"\\\"\n        elif max_hour == 0:\n            max_hour = \\\"00\\\"\n        if index_i == -1 and index_j == -1:\n            minutes = \\\"00\\\"\n        else:\n            minutes = max(int(str(arr[minutes_index[0]])+str(arr[minutes_index[1]])), int(str(arr[minutes_index[1]])+str(arr[minutes_index[0]]))) \n        \n        if minutes >= 60:\n            minutes = min(int(str(arr[minutes_index[0]])+str(arr[minutes_index[1]])), int(str(arr[minutes_index[1]])+str(arr[minutes_index[0]])))             \n        \n        if minutes >= 60:\n            return \\\"\\\"\n        str_minutes = str(minutes)\n        str_hours = str(max_hour)\n        if len(str_minutes) == 1:\n            str_minutes = \\\"0\\\" + str_minutes\n        if len(str_hours) == 1:\n            str_hours = \\\"0\\\" + str_hours\n    \n        return str_hours+\\\":\\\"+str_minutes\n        \n                \n                \n            \n        \n            \n        ", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        arr.sort()\n        for hour in range(23, -1, -1):\n            for minute in range(59, -1, -1):\n                candidate = sorted([ hour // 10, hour % 10, minute // 10, minute % 10])\n                if candidate == arr:\n                    return \\\"%s%s:%s%s\\\" % (hour // 10, hour % 10, minute // 10, minute % 10)\n        return \\\"\\\"\n", "\nfrom itertools import permutations\n    \nclass Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        \n        arr = sorted(arr, reverse=True)\n        \n        perms = permutations(arr)\n        \n        for perm in perms:\n            m = perm[0] * 10 + perm[1]\n            s = perm[2] * 10 + perm[3]\n            \n            if m < 24 and s < 60:\n                strm = str(m)\n                strs = str(s)\n                if len(strm) < 2:\n                    strm = \\\"0\\\" + strm\n                if len(strs) < 2:\n                    strs = \\\"0\\\" + strs\n                return \\\"{}:{}\\\".format(strm, strs)\n        \n        return \\\"\\\"", "#best way to solve this problem is by thinking how to solve this problem.\n# get permutatation of all the number that can be formed with these sets.\n# once you get the set, divide all the set with \\\":\\\"\n# hour hand should be less than 24, and minutes hand be should be less than 60.\n# get all the permutation with that no, and store them in list , and run a compare algorithm, or sort algorithm\n\nimport itertools\nclass Solution:\n    def largestTimeFromDigits(self, inputlist):\n        allthevalues = list(itertools.permutations(inputlist, 4))\n        filteredhourvalue = list(filter(lambda x : x[0]*10 + x[1] < 24 ,allthevalues ))\n        filteredminvalue = list(filter(lambda x : x[2]*10 + x[3] < 60 ,filteredhourvalue ))\n        if len(filteredminvalue) == 0:\n            return \\\"\\\"\n        else:\n            actualtime = list(max(filteredminvalue))\n            return \\\"{}{}:{}{}\\\".format(*actualtime)\n\n\n\n\n", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        import itertools\n        ret = ''\n        for a, b, c, d in itertools.permutations(arr):\n            h = a*10 + b\n            m = c*10 + b\n            if h >= 24 or m >59:\n                continue\n                \n            t = f\\\"{a}{b}:{c}{d}\\\"\n            if not ret:\n                ret = t\n            else:\n                ret = max(ret, t)\n        return ret            \n                ", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        m1 = -1\n        m = 0\n        MA = 1\n        dict = {-1:0}\n        for i in range(0,4):\n            for j in range(i+1,4):\n                if i != j:\n                    arr2 = deepcopy(arr)\n                    del arr2[j]\n                    del arr2[i]\n                    a1 = arr2[0]+10*arr2[1]\n                    a2 = arr2[1]+10*arr2[0]\n                    if 1>0:\n                        if a1>= 60 and a2 >= 60:\n                            MA = -1\n                        elif a1 < 60 and a2 <60:\n                            m = max(a1,a2)\n                            MA = 1\n                        elif a1 < 60:\n                            m = a1\n                            MA = 1\n                        elif a2 <60:\n                            m = a2\n                            MA = 1\n                    if MA ==1:\n                        if (10*arr[i] + arr[j]) <24 and (10*arr[j] + arr[i]) <24:\n                            if max(10*arr[i]+arr[j],10*arr[j]+arr[i])>m1:\n                                m1 = max(10*arr[i]+arr[j],10*arr[j]+arr[i])\n                                dict[m1]=m\n                            elif max(10*arr[i]+arr[j],10*arr[j]+arr[i]) == m1:\n                                if dict[m1]< m:\n                                    dict [m1]=m\n                        elif (10*arr[i]+arr[j])<24:\n                            if (10*arr[i]+arr[j])>m1:\n                                m1 = (10*arr[i]+arr[j])\n                                dict[m1]=m\n                            elif (10*arr[i]+arr[j]) == m1:\n                                if dict[m1]< m:\n                                    dict[m1]=m\n                        elif (10*arr[j] + arr[i])<24:\n                            if (10*arr[j] + arr[i])>m1:\n                                m1 = 10*arr[j] + arr[i]\n                                dict[m1]=m\n                            elif (10*arr[j] + arr[i]) == m1:\n                                 if dict[m1]< m:\n                                    dict [m1]=m\n        if m1 == -1:\n            return ''\n        else:\n            if m1//10==0 and dict[m1]//10==0:\n                return '0'+ str(m1) +':0'+ str(dict[m1]) \n            elif m1//10==0:\n                return '0'+str(m1) +':'+ str(dict[m1])\n            elif dict[m1]//10==0:\n                return str(m1) +':0'+ str(dict[m1])\n            else:\n                return str(m1) +':'+ str(dict[m1])\n", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        out = \\\"\\\"\n        for P in itertools.permutations(arr):\n            if P[0]*10 + P[1] <= 23 and P[2] <= 5:\n                out = max(out, str(P[0])+str(P[1]) + \\\":\\\" + str(P[2])+str(P[3]))\n        \n        return out\n        \n        \n        \n        \n            ", "class Solution:\n    def largestTimeFromDigits(self, A: List[int]) -> str:\n\n        max_time = -1\n\n        def build_time(permutation):\n            nonlocal max_time\n\n            h, i, j, k = permutation\n            hour = h*10 + i\n            minute = j*10 + k\n            if hour < 24 and minute < 60:\n                max_time = max(max_time, hour * 60 + minute)\n\n        def swap(array, i, j):\n            if i != j:\n                array[i], array[j] = array[j], array[i]\n\n        def permutate(array, start):\n            if start == len(array):\n                build_time(array)\n                return\n\n            for index in range(start, len(array)):\n                swap(array, index, start)\n                # repeat the permutation with the original array mutated\n                permutate(array, start+1)\n                swap(array, index, start)\n\n        permutate(A, 0)\n        if max_time == -1:\n            return \\\"\\\"\n        else:\n            return \\\"{:02d}:{:02d}\\\".format(max_time // 60, max_time % 60)", "class Solution:\n    def largestTimeFromDigits(self, arr: List[int]) -> str:\n        def isValid(time):\n            return (10 * time[0] + time[1] < 24) and (10 * time[2] + time[3] < 60)\n        def perms(items):\n            res = []\n            if items == []:\n                return [[]]\n            for i in range(len(items)):\n                #print(items, i, items[:i] + items[i+1::])\n                res = res + [[items[i]] + rest_of_perm for rest_of_perm in perms(items[:i] + items[i+1::])]\n            return res\n        #print(perms(arr))\n        validTimes = [t for t in perms(arr) if isValid(t)]\n        if validTimes == []:\n            return \\\"\\\"\n        maxTime = max(validTimes)\n        #print(maxTime)\n        res = \\\"\\\".join([str(x) for x in maxTime])\n        return res[:2] + \\\":\\\" + res[2::]"]