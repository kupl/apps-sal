["from collections import defaultdict\n\ndef count(chessBoard):\n    # Initialize:\n    board = chessBoard.copy()\n    tally = defaultdict(int)\n\n    # Compute Longest square ending in bottom right corner of each element and tally up:\n    for i, row in enumerate(board):\n        for j, element in enumerate(row):\n            # Edge detection:\n            if i == 0 or j == 0:\n                continue\n\n            # Compute & Tally:\n            if element:\n                n = board[i][j] = min(board[i - 1][j], board[i][j - 1], board[i - 1][j - 1]) + 1\n                for x in range(n, 1, -1):\n                    tally[x] += 1\n\n    return tally", "def count(board):\n    cnt, scan = {}, [0] * (len(board) + 1)\n    for row in board:\n        prev, scan = scan, [0]\n        for n, b in enumerate(row):\n            scan.append(b and min(prev[n], prev[n+1], scan[n]) + 1)\n        for x in scan:\n            if x > 1:\n                cnt[x] = cnt.get(x, 0) + 1\n    for x in range(max(cnt, default=2), 2, -1):\n        cnt[x-1] += cnt[x]\n    return cnt", "from collections import defaultdict\n\ndef count(chessBoard):\n    n, result = len(chessBoard), defaultdict(int)\n    memo = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if chessBoard[i-1][j-1]:\n                memo[i][j] = min(memo[i-1][j], memo[i][j-1], memo[i-1][j-1]) + 1\n                for x in range(2, memo[i][j]+1):\n                    result[x] += 1\n    return result", "def count(board):\n    cnt = [0] * (len(board) + 1)\n    scan = [0] * (len(board) + 1)\n    for row in board:\n        prev, scan = scan, [0]\n        for n, b in enumerate(row):\n            scan.append(b and min(prev[n], prev[n+1], scan[n]) + 1)\n        for x in scan: cnt[x] += 1\n    ans = {}\n    for x in range(len(cnt) - 1, 1, -1):\n        if not cnt[x]: continue\n        ans[x] = cnt[x]\n        cnt[x-1] += cnt[x]\n    return ans", "\ndef count(chessBoard):\n    caseDict = dict()\n\n    runRow = [[chessBoard[x][y] for y in range(len(chessBoard))] for x in range(len(chessBoard))]\n    runCol = [[chessBoard[x][y] for y in range(len(chessBoard))] for x in range(len(chessBoard))]\n    runBox = [[chessBoard[x][y] for y in range(len(chessBoard))] for x in range(len(chessBoard))]\n\n    for x in range(0, len(chessBoard)):\n        for y in range(0, len(chessBoard)):\n            if y != 0:\n                runRow[x][y] = runRow[x][y - 1] + 1 if chessBoard[x][y] == 1 else 0\n            if x != 0:\n                runCol[x][y] = runCol[x - 1][y] + 1 if chessBoard[x][y] == 1 else 0\n            if x != 0 and y != 0:\n                runBox[x][y] = min(runBox[x - 1][y - 1] + 1, runRow[x][y], runCol[x][y]) if chessBoard[x][y] == 1 else 0\n\n    cnts = [0 for _ in range(len(chessBoard) + 1)]\n\n    for r in runBox:\n        for v in r:\n            cnts[v] += 1\n    for i in range(len(cnts) - 2, -1, -1):\n        cnts[i] = cnts[i] + cnts[i + 1]\n    for i in range(2, len(cnts)):\n        if cnts[i] > 0:\n            caseDict[i] = cnts[i]\n    return caseDict", "from collections import defaultdict\n\n\ndef count(chessBoard):\n    result = defaultdict(int)\n    n = len(chessBoard)\n    for i in range(1, n):\n        for j in range(1, n):\n            chessBoard[i][j] = chessBoard[i][j] * (min(chessBoard[i-1][j], chessBoard[i][j-1], chessBoard[i-1][j-1]) + 1)\n    for i in range(1, n):\n        for j in range(1, n):\n            if chessBoard[i][j] > 1:\n                for k in range(2, chessBoard[i][j] + 1):\n                    result[k] += 1\n    return dict(result)", "def count(chessBoard):\n    d = {}\n    count = 0\n    size = 2\n    l = len(chessBoard)\n    coords = []\n    for i in range(l):\n        for j in range(l):\n            if chessBoard[i][j] == 0:\n                coords.append([i, j])\n    \n    while True:\n        for point in coords:\n            for i in range(point[0] - size + 1, point[0] + 1):\n                chessBoard[i][point[1] - size + 1] = 0\n            for i in range(point[1] - size + 1, point[1] + 1):\n                chessBoard[point[0] - size + 1][i] = 0\n                    \n        for i in range(l):\n            chessBoard[i][l - size + 1] = 0\n        chessBoard[l - size + 1] = [0]*l\n        \n        count = sum([sum(x) for x in chessBoard])     \n        \n        if count > 0:\n            d[size] = count\n        else:\n            break\n        size += 1\n        count = 0\n    return d", "import time\ndef count(board):\n    N = len(board)\n    dp = board\n    \n    size_cnt = {}\n    for row in range(1, N):\n        for col in range(1, N):\n            if board[row][col] == 1:\n                size = 1 + min(dp[row-1][col-1], min(dp[row-1][col], dp[row][col-1]))\n                dp[row][col] = size\n                if size > 1:\n                    size_cnt[size] = size_cnt.get(size, 0) + 1\n            \n    res = {}\n    for k in size_cnt:\n        for s in range(2, k + 1):\n            res[s] = res.get(s, 0) + size_cnt[k]\n    return res", "from collections import defaultdict\n\ndef count(chessBoard):\n    n,ans = len(chessBoard), defaultdict(int)\n    grid = [[0]*(n+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if(chessBoard[i-1][j-1] != 0):\n                grid[i][j] = min(grid[i-1][j], grid[i][j-1], grid[i-1][j-1]) + 1\n                for x in range(2, grid[i][j]+1):\n                    ans[x] += 1\n    #for i in range(n+1):\n        #print(grid[i])\n    return(ans)", "def count(chessBoard):\n    c = chessBoard\n    n = len(chessBoard)\n    \n    compteur = [0 for k in range(n+1)]\n    copie = [[0 for k in range(n)] for j in range(n)]\n    copie[0] = c[0]\n    for k in range(1, n):\n        copie[k][0] = c[k][0]\n    \n    for ligne in range(1, n):\n        for col in range(1,n):\n            if c[ligne][col]:\n                valeur = 1+min(copie[ligne][col-1], copie[ligne-1][col-1], copie[ligne-1][col])\n                copie[ligne][col] = valeur\n                compteur[valeur] += 1\n    \n    for k in range(n-1, 1, -1):\n        compteur[k] += compteur[k+1]\n    \n    d = {}          \n    for k, v in enumerate(compteur):\n        if v and k>1: d[k] = v\n    return d\n"]