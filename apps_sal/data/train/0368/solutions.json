["class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        \n        satisfaction.sort()\n        total, res = 0,0\n        \n        while satisfaction and satisfaction[-1]+total > 0:\n            total += satisfaction.pop()\n            res += total\n            \n        return res\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        s = 0\n        counter = 1\n        for i in satisfaction:\n            s += i*counter\n            counter += 1\n        check = s\n        longest = s\n        while True:\n            s = 0\n            counter = 1\n            for i in satisfaction:\n                s += i*counter\n                counter += 1\n            if s < check:\n                return check\n            if s > check:\n                longest = s\n            check = s\n            if len(satisfaction) == 0:\n                return longest\n            del satisfaction[0]\n            \n", "class Solution:\n    def maxSatisfaction(self, sat: List[int]) -> int:\n        sat.sort()\n        split = 0\n        while split < len(sat) and sat[split] < 0:\n            split += 1\n        if split == len(sat): return 0\n        cur_sum,i,unit = 0,1,0\n        for x in sat[split:]:\n            cur_sum += (i*x)\n            unit += x\n            i += 1\n        self.max = cur_sum\n        #print(split, cur_sum, unit)\n        for i in range(split-1,-1,-1):\n            r,diff,psum=1,0,cur_sum\n            for j in range(i,split):\n                diff += (r*sat[j])\n                r += 1\n                psum += unit\n            psum += diff\n            if psum > self.max:\n                self.max = psum\n        return self.max\n                \n                \n        \n        \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n\n        positive_sum, positive_step, positive_count = 0, 0, 0\n        for i in satisfaction:\n            if i < 0:\n                continue\n            positive_count += 1\n            positive_sum += positive_count*i\n            positive_step += i\n\n        negative_count = len(satisfaction) - positive_count\n        result = [positive_sum]\n        for i in range(negative_count):\n\n            negative_sum = 0\n            for j in range(i+1):\n                negative_sum += satisfaction[negative_count-j-1]*(i-j+1)\n            result.append(negative_sum + positive_sum + positive_step*(i+1))\n\n        return max(result)", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort(reverse=True)\n        s=0\n        res=0\n        for a in satisfaction:\n            s+=a\n            if s<=0:\n                break\n            res+=s\n        return res\n    \n    \n    \n    \n    '''\n    \u5c06\u6240\u6709\u5927\u4e8e\u7684\u7684\u524d\u7f00\u5b50\u4e32\u90fd\u52a0\u4e0a\n    \u5927\u6570\u5c3d\u53ef\u80fd\u591a\u5bb6\u51e0\u6b21\uff0c\u6240\u4ee5\u5148\u5012\u5e8f\n    \u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\n    \u4e00\u76f4\u8ba1\u7b97\u524d\u7f00\u548c\uff0c\u76f4\u5230\u524d\u7f00\u548c<=0  \u7ed3\u675f\n    [9, 8, 5, 2, 1, -1]\nsum = 9 * 4 + 8 * 3 + 2 * 3 + 1 * 2 + -1 * 1\n<=>\nsum += 9\nsum += (9 + 8 = 17)\nsum += (17 + 2 = 19)\nsum += (19 + 1 = 20)\nsum += (20 \u2013 1 = 19)\n    '''", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        \n        if satisfaction[0] >= 0:\n            return calc_satisfaction(satisfaction)\n        \n        min_val = -sys.maxsize\n        min_index = None\n        for i,v in enumerate(satisfaction):\n            if 0 > v > min_val:\n                min_index = i\n                min_val = v\n        #curr_satisfaction = calc_satisfaction(satisfaction[min_index+1:])\n        curr_sum = sum(satisfaction[min_index+1:])\n        while min_index >= 0:\n            print((min_index, satisfaction))\n            print((satisfaction[min_index], curr_sum))\n            if abs(satisfaction[min_index]) < curr_sum:\n                curr_sum = curr_sum + satisfaction[min_index]\n            else:\n                break\n            min_index -= 1\n        \n        print((min_index, satisfaction))\n        return calc_satisfaction(satisfaction[min_index+1:])\n\n    \ndef calc_satisfaction(dishes):\n    total = 0\n    for i,s in enumerate(dishes):\n        total += (i+1) * s\n    return total\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        best = 0\n        total = 0\n        for i in range(len(satisfaction)-1, -1, -1):\n            for j in range(len(satisfaction)-1, i-1, -1):\n                total += satisfaction[j]\n            best = max(best, total)\n        return best", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        s = 0\n        counter = 1\n        for i in satisfaction:\n            s += i*counter\n            counter += 1\n        check = s\n        longest = s\n        while True:\n            s = 0\n            counter = 1\n            for i in satisfaction:\n                s += i*counter\n                counter += 1\n            if s < check:\n                return check\n            if s > check:\n                longest = s\n            check = s\n            if len(satisfaction) == 0:\n                return longest\n            satisfaction = satisfaction[1:]\n            \n", "from numpy import dot\n\ndef coefficient(arr):\n    if len(arr) <= 0:\n        return 0\n    return dot(arr,list(range(1,len(arr)+1)))\n    # res = 0\n    # for i in range(len(arr)):\n    #     res += (i+1)*arr[i]\n    # return res\n\nclass Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        runningSum = 0\n        for i in reversed(list(range(len(satisfaction)))):\n            runningSum += satisfaction[i]\n            if runningSum <= 0:\n                return coefficient(satisfaction[i+1:])\n        return coefficient(satisfaction)\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        if max(satisfaction) <= 0:\n            return 0\n        \n        \n        satisfaction.sort()\n\n        \n        if satisfaction[0] > 0:\n            output = 0\n            for i, v in enumerate(satisfaction):\n                output += (i+1) * v\n            return output\n        \n        min_val = min(i for i in satisfaction if i >= 0) \n        min_index = satisfaction.index(min_val)\n        \n        temp_satisfaction = satisfaction[min_index:]\n        \n        prev = -1\n        current_sum = 0\n        while current_sum > prev and len(temp_satisfaction) <= len(satisfaction):\n            prev = current_sum\n            current_sum = 0\n            for i, v in enumerate(temp_satisfaction):\n                current_sum += (i+1) * v\n                \n            \n            min_index -= 1\n            temp_satisfaction.insert(0, satisfaction[min_index])\n            \n\n        return prev if prev > current_sum else current_sum\n        \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        \n        if satisfaction[0] >= 0:\n            return calc_satisfaction(satisfaction)\n        \n        min_val = -sys.maxsize\n        min_index = None\n        for i,v in enumerate(satisfaction):\n            if 0 > v > min_val:\n                min_index = i\n                min_val = v\n                \n        curr_satisfaction = calc_satisfaction(satisfaction[min_index+1:])\n        while True:\n            min_index -= 1\n            temp_satisfaction = calc_satisfaction(satisfaction[min_index+1:])\n            if temp_satisfaction > curr_satisfaction:\n                curr_satisfaction = temp_satisfaction\n            else:\n                break\n                \n        return curr_satisfaction\n\n    \ndef calc_satisfaction(dishes):\n    total = 0\n    for i,s in enumerate(dishes):\n        total += (i+1) * s\n    return total\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        \n        if satisfaction[0] >= 0:\n            return calc_satisfaction(satisfaction)\n        \n        min_val = max(s for s in satisfaction if s < 0)\n        min_index = satisfaction.index(min_val)\n        '''\n        for s in satisfaction:\n            if s >= 0:\n                beneficial.append(s) # [0, 2, 5]\n            else:\n                negative.append(s)  # [-3, -2]\n        '''\n        curr_satisfaction = calc_satisfaction(satisfaction[min_index+1:])\n        while True:\n            min_index -= 1\n            temp_satisfaction = calc_satisfaction(satisfaction[min_index+1:])\n            if temp_satisfaction > curr_satisfaction:\n                curr_satisfaction = temp_satisfaction\n            else:\n                break\n                \n        return curr_satisfaction\n\n    \ndef calc_satisfaction(dishes):\n    total = 0\n    for i,s in enumerate(dishes):\n        total += (i+1) * s\n    return total\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        total = 0\n        beneficial = deque()\n        negative = []\n        \n        if satisfaction[0] > 0:\n            return calc_satisfaction(satisfaction)\n        \n        for s in satisfaction:\n            if s >= 0:\n                beneficial.append(s) # [0, 2, 5]\n            else:\n                negative.append(s)  # [-3, -2]\n\n        curr_satisfaction = calc_satisfaction(beneficial)\n        for s in reversed(negative):\n            beneficial.appendleft(s)\n            temp_satisfaction = calc_satisfaction(beneficial)\n            if temp_satisfaction > curr_satisfaction:\n                curr_satisfaction = temp_satisfaction\n            else:\n                beneficial.popleft()\n                break\n                \n        return curr_satisfaction\n\n    \ndef calc_satisfaction(dishes):\n    total = 0\n    for i,s in enumerate(dishes):\n        total += (i+1) * s\n    return total\n", "from collections import deque\n\n\nclass Solution:\n\n  def ComputeLikeTime(self, prepared_dishes):\n    like_time = 0\n    dish_index = 1\n    for satisfaction in prepared_dishes:\n      like_time += (dish_index * satisfaction)\n      dish_index += 1\n    return like_time\n\n  def maxSatisfaction(self, satisfaction):\n    satisfaction = sorted(satisfaction, reverse=True)\n    prepared_dishes = deque()\n    max_satisfaction = 0\n    for val in satisfaction:\n      prepared_dishes.appendleft(val)\n      satisfaction = self.ComputeLikeTime(prepared_dishes)\n      if satisfaction > max_satisfaction:\n        max_satisfaction = satisfaction\n    return max_satisfaction", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        \n        if satisfaction[0] >= 0:\n            return calc_satisfaction(satisfaction)\n        \n        min_val = -sys.maxsize\n        min_index = None\n        print(satisfaction)\n        for i,v in enumerate(satisfaction):\n            if 0 > v > min_val:\n                min_index = i\n                min_val = v\n        print((min_val, min_index))\n                \n        curr_satisfaction = calc_satisfaction(satisfaction[min_index+1:])\n        while True:\n            min_index -= 1\n            temp_satisfaction = calc_satisfaction(satisfaction[min_index+1:])\n            if temp_satisfaction > curr_satisfaction:\n                curr_satisfaction = temp_satisfaction\n            else:\n                break\n                \n        return curr_satisfaction\n\n    \ndef calc_satisfaction(dishes):\n    total = 0\n    for i,s in enumerate(dishes):\n        total += (i+1) * s\n    return total\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        total = 0\n        beneficial = deque()\n        negative = []\n        def calc_satisfaction(dishes):\n            total = 0\n            for i,s in enumerate(dishes):\n                total += (i+1) * s\n            return total\n        \n        for s in satisfaction:\n            if s >= 0:\n                beneficial.append(s)\n            else:\n                negative.append(s)\n\n        curr_satisfaction = calc_satisfaction(beneficial)\n        for s in reversed(negative):\n            temp_satisfaction = calc_satisfaction(deque([s]) + beneficial)\n            if temp_satisfaction > curr_satisfaction:\n                curr_satisfaction = temp_satisfaction\n                beneficial.appendleft(s)\n            else:\n                break\n                \n        return curr_satisfaction\n\n    \n\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        sat_sort = sorted(satisfaction)\n        max_sat = 0\n        for i in range(len(sat_sort)):\n            sat = sum(t*s for t, s in enumerate(sat_sort[i:],start=1))\n            max_sat = max(max_sat,sat,0)\n        return max_sat\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        sorted_satis = sorted(satisfaction)\n        max_satis = sorted_satis[-1]\n        \n        if max_satis <= 0:\n            return 0\n            \n        def calculate_satisfaction(start_index):\n            s = 0\n            for i in range(len(sorted_satis) - start_index):\n                s += (i + 1) * sorted_satis[start_index + i]\n            return s\n            \n            \n        max_satisfaction = -1;\n        \n        for i in range(len(sorted_satis)):\n            max_satisfaction = max(max_satisfaction, calculate_satisfaction(i))      \n            if sorted_satis[i] >= 0:\n                return max_satisfaction\n        \n        return max_satisfaction\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        best = 0\n        for i in range(len(satisfaction)):\n            count = 1\n            val = 0\n            for j in range(i, len(satisfaction)):\n                val += satisfaction[j] * count\n                count += 1\n            best = max(best, val)\n        return best", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        max_satisfaction = 0\n        for i in range(0, len(satisfaction)):\n            curr_satisfaction = 0\n            timestamp = 1\n            for j in range(i, len(satisfaction)):\n                curr_satisfaction += satisfaction[j] * timestamp\n                timestamp += 1\n            max_satisfaction = max(max_satisfaction, curr_satisfaction)\n        return max_satisfaction\n            \n#         cache = {}\n#         def maxSatisfactionHelper(satisfaction, start, timestamp):\n#             if not satisfaction:\n#                 return 0\n            \n#             if (start,timestamp) in cache:\n#                 return cache[(start, timestamp)]\n            \n#             max_satisfaction = 0\n            \n#             max_satisfaction = max((satisfaction[0] * timestamp) +                           maxSatisfactionHelper(satisfaction[1:], start+1, timestamp + 1), \n#                                   maxSatisfactionHelper(satisfaction[1:], start+1, timestamp))\n            \n#             cache[(start, timestamp)] = max_satisfaction\n#             return max_satisfaction\n        \n#         return maxSatisfactionHelper(sorted(satisfaction), 0, 1)\n            \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n\n        satisfaction.sort(reverse=True)\n        ans = cur_sum = 0\n        for ele in satisfaction:\n            cur_sum += ele\n            if cur_sum >= 0:\n                ans += cur_sum\n\n        return ans; ", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        output = 0\n        result = 0\n        for i in range(len(satisfaction)):\n            output += satisfaction[i]*i\n        \n        for i in range(0,len(satisfaction)):\n            for j in range(i,len(satisfaction)):\n                result += satisfaction[j]*(j-i+1)\n            if output < result:\n                output = result\n            result = 0\n        if output < 0 :\n            output = 0\n        return output", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        s = sorted(satisfaction, reverse=True)\n        total = 0\n        i = 0 \n        while i < len(satisfaction): \n            total = max(sum([x*(i+1) for i,x in enumerate(s[0:i+1][::-1])]), total) \n            i+=1\n        return total\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        dishes = len(satisfaction)\n        best = 0\n        for i in range(dishes):\n            sum = 0\n            tmp = satisfaction[-i-1:dishes]\n            for j,val in enumerate(tmp):\n                sum+=(j+1)*val\n            best = max(best,sum)\n        return best", "class Solution:\n    def mergeSort(self, lst: List[int]) -> int:\n        n = len(lst)\n        \n        # base case\n        if n <= 1:\n            return lst\n        \n        mid = n // 2\n        L   = lst[:mid]\n        R   = lst[mid:]\n        \n        self.mergeSort(L)\n        self.mergeSort(R)\n        \n        i, j, k = 0, 0, 0\n        while (i < len(L)) and (j < len(R)):\n            if (L[i] < R[j]):\n                lst[k] = L[i]\n                i += 1\n                \n            else:\n                lst[k] = R[j]\n                j += 1\n                \n            k += 1\n        \n        # fill remaining\n        while (i < len(L)):\n            lst[k] = L[i]\n            i += 1\n            k += 1\n            \n        while (j < len(R)):\n            lst[k] = R[j]\n            j += 1\n            k += 1 \n        \n        return lst\n    \n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        n = len(satisfaction)\n        possible_sums = [None for i in range(n)]\n        print('.......')\n        self.mergeSort(satisfaction)\n        print(satisfaction)\n        \n        for i in range(n):\n            arr = satisfaction[i:]\n            like_times = [((j+1) * arr[j]) for j in range(len(arr))]\n            possible_sums[i] = sum(like_times)\n        \n        return max(max(possible_sums), 0)\n        \n        \n", "class Solution:\n    def mergeSort(self, lst: List[int]) -> int:\n        n = len(lst)\n        \n        # base case\n        if n <= 1:\n            return lst\n        \n        mid = n // 2\n        L   = lst[:mid]\n        R   = lst[mid:]\n        \n        self.mergeSort(L)\n        self.mergeSort(R)\n        \n        i, j, k = 0, 0, 0\n        while (i < len(L)) and (j < len(R)):\n            if (L[i] < R[j]):\n                lst[k] = L[i]\n                i += 1\n                \n            else:\n                lst[k] = R[j]\n                j += 1\n                \n            k += 1\n        \n        # fill remaining\n        while (i < len(L)):\n            lst[k] = L[i]\n            i += 1\n            k += 1\n            \n        while (j < len(R)):\n            lst[k] = R[j]\n            j += 1\n            k += 1 \n        \n        return lst\n    \n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        n = len(satisfaction)\n        possible_sums = [None for i in range(n)]\n        self.mergeSort(satisfaction)\n        \n        for i in range(n):\n            arr = satisfaction[i:]\n            like_times = [((j+1) * arr[j]) for j in range(len(arr))]\n            possible_sums[i] = sum(like_times)\n        \n        return max(max(possible_sums), 0)\n        \n        \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        score = 0\n        \n        satisfaction.sort()\n        print (satisfaction)\n        if satisfaction[0] >= 0:\n            for i in range(len(satisfaction)):\n                score += (i+1) * satisfaction[i]\n            return score\n        elif satisfaction[len(satisfaction)-1] <= 0:\n            return score\n        else:\n            for i in range(len(satisfaction)):\n                score += (i+1) * satisfaction[i]\n            \n            badDishes = []\n            for sat in satisfaction:\n                if sat < 0:\n                    badDishes.append(sat)\n            #print(badDishes)\n            for bad in badDishes:\n                satisfaction.remove(bad)\n                print(satisfaction)\n                temp_best = 0\n                for i in range(len(satisfaction)):\n                    temp_best += (i+1) * satisfaction[i]\n                print(temp_best)\n                if temp_best > score:\n                    score = temp_best\n            return score", "class Solution:\n\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        temp = [0] * len(satisfaction)\n        output = 0\n        satisfaction.sort()\n        for i, _ in enumerate(satisfaction):\n            for j, s in enumerate(satisfaction[i:]): \n                temp[i] += s*(j+1)\n\n        for s in temp: \n            if s > output: \n                output = s\n\n        return output\n", "class Solution:\n    def maxSatisfaction(self, sat: List[int]) -> int:\n        sat = sorted(sat)\n        out = [0]\n        while len(sat) > 0:\n            value = 0\n            for i, v in enumerate(sat):\n                value += v*(i+1)\n            out.append(value)\n            print(sat)\n            if sat[0]>0:\n                break\n            sat = sat[1:]\n        return max(out)\n            \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n#         table = [[None]*len(satisfaction) for i in range(len(satisfaction))]\n#         for i in range(len(satisfaction)):\n#             for j in range(i,len(satisfaction)):\n#                 table[i][j] = satisfaction[j]*(i+1)\n#         bestSat = float('-inf')\n#         for i in range(len(satisfaction)):\n#             row = i\n#             col = len(satisfaction)-1\n#             currSat = 0\n#             while row >= 0:\n#                 currSat += table[row][col]\n#                 row -= 1\n#                 col -= 1\n#             bestSat = max(bestSat,currSat)\n#         return max(bestSat,0)\n    \n        bestSat = float('-inf')\n        for i in range(len(satisfaction)):\n            n = len(satisfaction)-1\n            numItems = i+1\n            numAdded = 0\n            currSat = 0\n            while numAdded <= numItems:\n                currSat += satisfaction[n-numAdded]*(numItems-numAdded)\n                numAdded += 1\n            bestSat = max(bestSat,currSat)\n        return max(bestSat,0)", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        highScore = 0\n        satisfaction.sort(reverse = True)\n        \n        for n in range(len(satisfaction)):\n            sortedSatisfaction = satisfaction[:len(satisfaction)-n]\n            sumSatisfaction = 0\n            for i in range(len(sortedSatisfaction)):\n                multiplier = len(sortedSatisfaction) - i\n                sumSatisfaction += sortedSatisfaction[i] * multiplier\n                \n            if sumSatisfaction > highScore:\n                highScore = sumSatisfaction\n        \n        return highScore", "class Solution:\n    def maxSatisfaction(self, s: List[int]) -> int:\n        total=res=0\n        s.sort()\n        while s and s[-1]+total>=0:\n            total+=s.pop()\n            res+=total\n        return res", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        for i in range(1, len(satisfaction)):\n            current = satisfaction[i]\n            for j in range(i, 0, -1):\n                satisfaction[j] = current*(j+1) + satisfaction[j-1]\n            satisfaction[0] = max(satisfaction[0], current)\n            \n        return max(max(satisfaction), 0)\n                \n            \n                \n                \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort(reverse = True)\n        length, res = len(satisfaction), 0\n        l = [0] * length\n        \n        for i in range(length):\n            summ = 0\n            for j in range(i + 1):\n                l[j] += satisfaction[j]\n                summ += l[j]\n            \n            if summ > res:\n                res = summ\n        \n        return res", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        total = 0\n        beneficial = [s for s in satisfaction if s >= 0]\n        negative = [s for s in satisfaction if s < 0] # [-3, -1, ...]\n        \n        # any satisfaction >= 0 should be prepared\n        # need to figure out when to include negative dishes\n        # a negative dish increments the time coefficient, so it should be included if the difference \n        # between\n        \n        # a negative dish is beneficial if the satisfaction increases after adding it\n        for s in reversed(negative):\n            if calc_satisfaction([s] + beneficial) > calc_satisfaction(beneficial):\n                beneficial.insert(0, s)\n        \n        return calc_satisfaction(beneficial)\n\n    \ndef calc_satisfaction(dishes):\n    total = 0\n    for i,s in enumerate(dishes):\n        total += (i+1) * s\n    return total\n", "class Solution:\n    def maxSatisfaction(self, sat: List[int]) -> int:\n        if (max(sat)<0):\n            return 0\n        arr = []\n        sat.sort(reverse=True)\n        for i in range(len(sat)):\n            sun = 0\n            for j in range(len(sat)-i):\n                sun += sat[j]*(len(sat)-i-j)\n            arr.append(sun)\n        print(arr)\n        return max(arr)", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()    \n        bestSat = float('-inf')\n        for i in range(len(satisfaction)):\n            n = len(satisfaction)-1\n            numItems = i+1\n            numAdded = 0\n            currSat = 0\n            while numAdded <= numItems:\n                currSat += satisfaction[n-numAdded]*(numItems-numAdded)\n                numAdded += 1\n            bestSat = max(bestSat,currSat)\n        return max(bestSat,0)", "def merge(arr1,arr2):\n    index1,index2=0,0\n    res=[]\n    while index1 < len(arr1) or index2 < len(arr2):\n        if index1 >= len(arr1) or (index2 < len(arr2) and arr1[index1] > arr2[index2]):\n            res.append(arr2[index2])\n            index2+=1\n        else:\n            res.append(arr1[index1])\n            index1+=1\n    return res\n\ndef mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    m = int(len(arr)/2)\n    return merge(mergeSort(arr[:m]),mergeSort(arr[m:]))\n\ndef splitAtZero(sortedArr):\n    for i in range(len(sortedArr)):\n        if sortedArr[i] >= 0:\n            return (sortedArr[:i],sortedArr[i:])\n    return (sortedArr,[])\n\ndef coefficient(arr):\n    res = 0\n    for i in range(len(arr)):\n        res += (i+1)*arr[i]\n    return res\n\nclass Solution:\n    def maxSatisfaction(self, unsortedSatisfaction: List[int]) -> int:\n        satisfaction = mergeSort(unsortedSatisfaction)\n        negative,nonnegative = splitAtZero(satisfaction)\n        res = nonnegative[:]\n        for dish in reversed(negative):\n            attempt = [dish] + res[:]\n            if coefficient(attempt) > coefficient(res):\n                res = attempt[:]\n            else:\n                return coefficient(res)\n        return coefficient(res)\n", "class Solution:\n\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        temp = [0] * len(satisfaction)\n        output = 0\n        satisfaction.sort()\n        print(satisfaction)\n        for i, _ in enumerate(satisfaction):\n            print((satisfaction[i:]))\n            for j, s in enumerate(satisfaction[i:]): \n                temp[i] += s*(j+1)\n            print((i, temp[i]))\n\n        print(temp)\n        for s in temp: \n            if s > output: \n                output = s\n\n        return output\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        if satisfaction[-1] <= 0:\n            return 0\n        last_sum = 0\n        temp = [0]*len(satisfaction)\n        for i in range(len(satisfaction), 0, -1):\n            temp = [a+b for a,b in zip(temp,[0]*(i-1)+satisfaction[i-1:] )]\n            score = sum(temp)\n            if last_sum > score:\n                break\n            last_sum = score\n            \n            \n        return last_sum", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        dp = [[0] * len(satisfaction) for i in range(len(satisfaction))]\n\n        maxVal = 0\n\n        for i in range(len(satisfaction)):\n            count = 1\n            tempM = 0\n            for j in range(i, len(satisfaction)):\n                dp[i][j] = satisfaction[j] * count\n                tempM += dp[i][j]\n                count += 1\n            maxVal = max(maxVal, tempM)\n        return maxVal", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        sortlist = sorted(satisfaction, reverse=True)\n        a=0\n        b=0\n        for i in range(len(sortlist)):\n            a += sortlist[i]\n            if a <= 0:\n                break\n            else:\n                b+=1\n        return sum(sortlist[j]*(b-j) for j in range(0,b))\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        m = 0\n        while len(satisfaction) > 0:\n            s = sum((satisfaction[i] * (i+1) for i in range(len(satisfaction))))\n            m = max(s, m)\n            satisfaction = satisfaction[1:]\n        return m", "import numpy as np\n\nclass Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        \n        output = []\n        length = len(satisfaction)\n        satisfaction_srt = sorted(satisfaction)\n        \n        for i in range(length):\n            satisfaction = satisfaction_srt[i:]\n            time = list(range(1,length+1-i))\n            output.append(np.dot(time,satisfaction))\n        \n        if max(output) < 0:\n            return 0\n        else:\n            return max(output)\n        \nans = Solution()\nans.maxSatisfaction([-1,-8,0,5,-7])", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        \n        satisfaction=sorted(satisfaction)\n        ans=0\n        \n        for i,s in enumerate(satisfaction):\n            \n            index=i\n            curr_ans=0            \n            j=1\n            \n            while index<=len(satisfaction)-1:\n                curr_ans+=j*satisfaction[index]\n                j+=1\n                index+=1\n                \n            ans=max(ans,curr_ans)\n        \n        return ans\n            \n", "class Solution:\n    def maxSatisfaction(self, satisfaction) -> int:\n        n = satisfaction.__len__()\n        if n == 0:\n            return 0\n        satisfaction.sort()\n        if satisfaction[-1] <= 0 :\n            return 0\n        else:\n            mannux = 0\n            while satisfaction:\n                tem = 0\n                for i in range(n):\n                    tem += (i+1)*satisfaction[i]\n                if mannux< tem:\n                    mannux= tem\n                satisfaction.pop(0)\n                n -= 1\n            return mannux", "class Solution:\n    def maxSatisfaction(self, s: List[int]) -> int:\n        s.sort(reverse = True)\n        maxi = 0\n        for i in range(len(s)):\n            t = 0\n            for j in range(i+1):\n                t += s[j]*(i+1-j)\n            maxi =max(maxi,t)\n        return maxi", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        n = len(satisfaction)\n        satisfaction.sort()\n        ans = 0\n        for i in range(n):\n            coef = 0\n            for k in range(1, n + 1):\n                if i + k - 1 < n:\n                    coef += satisfaction[i + k - 1] * k\n            ans = max(ans, coef)\n        return ans\n                \n        \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        \n        sums = []\n        temp = [0]*len(satisfaction)\n        for i in range(len(satisfaction), 0, -1):\n            temp = [a+b for a,b in zip(temp,[0]*(i-1)+satisfaction[i-1:] )]\n            sums.append(sum(temp))\n            \n        result = max(sums)\n        return result if result > 0 else 0", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        ordered_satis = sorted(satisfaction)\n        nums = len_num = len(ordered_satis)\n        max_satis = 0\n        while len_num > 0:\n            tem_max = 0\n            for i, j in enumerate(ordered_satis):\n                if nums - len_num > i:\n                    continue\n                tem_max += (i + 1 + len_num - nums) * j\n            max_satis = max(max_satis, tem_max)\n            len_num -= 1\n        return max_satis", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort(reverse=True)\n        max_satisfaction = 0\n        satis = 0\n        sum_ = 0\n        for s in satisfaction:\n            satis += sum_ + s\n            sum_ += s\n            max_satisfaction = max(max_satisfaction, satis)\n            if sum_ < 0:\n                break\n                \n        return max_satisfaction\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        table = [[None]*len(satisfaction) for i in range(len(satisfaction))]\n        for i in range(len(satisfaction)):\n            for j in range(i,len(satisfaction)):\n                table[i][j] = satisfaction[j]*(i+1)\n        bestSat = float('-inf')\n        for i in range(len(satisfaction)):\n            row = i\n            col = len(satisfaction)-1\n            currSat = 0\n            while row >= 0:\n                currSat += table[row][col]\n                row -= 1\n                col -= 1\n            bestSat = max(bestSat,currSat)\n        return max(bestSat,0)", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        n = len(satisfaction)\n        dp = [-1000000009]*(n+1)\n        dp[0] = 0\n        for i in range(n):\n            for j in range(i, -1, -1):\n                dp[j+1] = max(dp[j+1], satisfaction[i]*(j+1) + dp[j])\n        answer = -1000000009\n        for i in range(n+1):\n            answer = max(dp[i], answer)\n        return answer\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        currmax = 0\n        satsort = sorted(satisfaction)\n        leng1 = len(satsort)\n        \n        for nn in range(leng1):\n            satpart = satsort[nn:]\n            leng2 = leng1 - nn\n            time = [ii for ii in range(1, leng2 + 1)]\n            \n            coeff = []\n            for ii in range(leng2):\n                coeff.append(satpart[ii] * time[ii])\n            cumul = [coeff[0]]\n            for ii in range(1, leng2):\n                cumul.append(cumul[ii - 1] + coeff[ii])\n            for elem in cumul:\n                if currmax < elem:\n                    currmax = elem\n        return currmax", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        table = [[None]*len(satisfaction) for i in range(len(satisfaction))]\n        for i in range(len(satisfaction)):\n            for j in range(len(satisfaction)):\n                if i > j:\n                    continue\n                table[i][j] = satisfaction[j]*(i+1)\n        bestSat = float('-inf')\n        for i in range(len(satisfaction)):\n            row = i\n            col = len(satisfaction)-1\n            currSat = 0\n            while row >= 0:\n                currSat += table[row][col]\n                row -= 1\n                col -= 1\n            bestSat = max(bestSat,currSat)\n        return max(bestSat,0)", "class Solution:\n    def maxSatisfaction(self, s: List[int]) -> int:\n        s.sort()\n        l = len(s)\n        \n        dp = [[0 for _ in range(l)] for _ in range(l)]\n\n        for i in range(l):\n            for j in range(l):\n                if j <= i:\n                    if j == 0:\n                        dp[i][j] = (j+1) * s[i]\n\n                    else:\n                        dp[i][j] = dp[i-1][j-1] + (j+1) * s[i]\n\n        print(max(dp[-1]))\n        \n        return max(max(dp[-1]), 0)", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        n=len(satisfaction)\n        dp=[[-1e9]*n for i in range(n)]\n        for i in range(n):\n            for j in range(i+1):\n                dp[i][j]=max((dp[i-1][j-1] if i-1>=0 and j-1>=0 else 0)+satisfaction[i]*(j+1),\n                             dp[i-1][j])\n        ret=max(dp[-1])\n        return ret if ret>0 else 0", "import numpy as np\nclass Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        \n        sums = []\n        temp = [0]*len(satisfaction)\n        for i in range(len(satisfaction), 0, -1):\n            #temp = [a+b for a,b in zip(temp,[0]*(i-1)+satisfaction[i-1:] )]\n            temp = np.add(temp, [0]*(i-1)+satisfaction[i-1:] )\n            sums.append(np.sum(temp))\n            \n        result = max(sums)\n        return result if result > 0 else 0", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        n=len(satisfaction)\n        ans=[ [-1e9] * n for i in range(n)]\n        for i in range(n):\n            for j in range(i+1):\n                ans[i][j] = max((ans[i-1][j-1] if i-1>=0 and j-1>=0 else 0)+satisfaction[i]*(j+1), ans[i-1][j])\n        answer = max(ans[-1])\n        return answer if answer>0 else 0\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        sat=sorted(satisfaction)\n        # print(sat)\n#         self.ans=0\n        \n#         def traverse(ind,sat,time,gain):\n#             if(ind==len(sat)):\n#                 self.ans=max(self.ans,gain)\n#                 return \n#             traverse(ind+1,sat,time,gain)\n#             traverse(ind+1,sat,time+1,gain+time*sat[ind])\n        \n#         traverse(0,sat,1,0)\n        \n        dp=[[-float('inf')]*(len(sat)+1) for i in range(len(sat)+1)]\n        \n        for i in range(len(sat)+1):\n            dp[0][i]=0\n        \n        # for i in dp:\n        #     print(i)\n        \n        ans=0\n        \n        for i in range(1,len(sat)+1): # time\n            for j in range(i,len(sat)+1):  # items\n                dp[i][j]=max(dp[i][j],dp[i-1][j-1]+sat[j-1]*i)\n                ans=max(ans,dp[i][j])\n            \n                \n#         print(\\\"after\\\")\n#         for i in dp:\n#             print(i)\n                \n                \n                \n    \n        return ans", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        sat=sorted(satisfaction)\n        \n        dp=[[-float('inf')]*(len(sat)+1) for i in range(len(sat)+1)]\n        \n        for i in range(len(sat)+1):\n            dp[0][i]=0\n        \n        # for i in dp:\n        #     print(i)\n        \n        ans=0\n        \n        for i in range(1,len(sat)+1): # time\n            for j in range(i,len(sat)+1):  # items\n                dp[i][j]=max(dp[i][j],dp[i-1][j-1]+sat[j-1]*i)\n                ans=max(ans,dp[i][j])\n            \n                \n#         print(\\\"after\\\")\n        # for i in dp:\n        #     print(i)\n                \n        return ans", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        totalDishes = len(satisfaction)\n        \n        dp = {}\n        \n        def cookOne(i0, n0):\n            if i0 == totalDishes:\n                return 0\n            if (i0, n0) in dp:\n                return dp[(i0, n0)]\n            if satisfaction[i0] >= 0:\n                dp[(i0, n0)] = (n0+1)*satisfaction[i0] + cookOne(i0+1, n0+1)\n            else:\n                dp[(i0, n0)] = max((n0+1)*satisfaction[i0] + cookOne(i0+1, n0+1), cookOne(i0+1, n0))\n            \n            return dp[(i0, n0)]\n        \n        return cookOne(0, 0)\n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        res = total = 0\n        i=len(satisfaction)-1\n        satisfaction.sort()\n        while i>=0 and satisfaction[i]+total > 0:\n            total += satisfaction[i]\n            res += total\n            i-=1\n        return res\n", "class Solution:\n    def maxSatisfaction(self, s: List[int]) -> int:\n        s.sort()\n        n = len(s)\n        dp = [0] * (n+2)\n        \n        for dish in range(n-1, -1, -1):\n            maxT = n+1\n            for time in range(1, maxT):\n                if dish == n-1:\n                    dp[time] = time * s[dish]\n                else:\n                    include = time * s[dish] + dp[time + 1]\n                    dp[time] = max(include, dp[time])\n            maxT -= 1\n        \n        return max(0,dp[1])\n        \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        @lru_cache(None)\n        def dp(i, time):\n            if i == len(satisfaction):\n                return 0\n            \n            return max(time * satisfaction[i] + dp(i+1, time+1), dp(i+1, time))\n        \n        return dp(0, 1)", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        n = len(satisfaction)\n        dp = [[0 for j in range(n + 1)] for i in range(n + 1)]\n        for j in range(1, n + 1):\n            dp[1][j] = satisfaction[j - 1]\n        ans = 0\n        for i in range(2, n + 1):\n            for j in range(i, n + 1):\n                dp[i][j] = dp[i - 1][j - 1]+satisfaction[ j -1] * i\n                \n                ans = max(ans, dp[i][j])\n        \n        return ans\n                \n        \n", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        n = len(satisfaction)\n        import functools\n        @functools.lru_cache(None)\n        def DP(i,j):\n            if i == n:\n                return 0\n            return max(satisfaction[i]*j + DP(i+1,j+1),DP(i+1,j))\n        return DP(0,1)", "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort()\n        @lru_cache(None)\n        def dp(i, k):\n            if i == len(satisfaction):\n                return 0\n            return max(dp(i+1, k), dp(i+1, k+1) + satisfaction[i] * k)\n        return dp(0, 1)", "def merge(arr1,arr2):\n    index1,index2=0,0\n    res=[]\n    while index1 < len(arr1) or index2 < len(arr2):\n        if index1 >= len(arr1) or (index2 < len(arr2) and arr1[index1] > arr2[index2]):\n            res.append(arr2[index2])\n            index2+=1\n        else:\n            res.append(arr1[index1])\n            index1+=1\n    return res\n\ndef mergeSort(arr):\n    if len(arr) <= 1:\n        return arr\n    m = int(len(arr)/2)\n    return merge(mergeSort(arr[:m]),mergeSort(arr[m:]))\n\ndef splitAtZero(sortedArr):\n    for i in range(len(sortedArr)):\n        if sortedArr[i] >= 0:\n            return (sortedArr[:i],sortedArr[i:])\n    return (sortedArr,[])\n\ndef coefficient(arr):\n    res = 0\n    for i in range(len(arr)):\n        res += (i+1)*arr[i]\n    return res\n\nclass Solution:\n    def maxSatisfaction(self, unsortedSatisfaction: List[int]) -> int:\n        satisfaction = mergeSort(unsortedSatisfaction)\n        # negative,nonnegative = splitAtZero(satisfaction)\n        # res = nonnegative[:]\n        # for dish in reversed(negative):\n        #     attempt = [dish] + res[:]\n        #     if coefficient(attempt) > coefficient(res):\n        #         res = attempt[:]\n        #     else:\n        #         return coefficient(res)\n        runningSum = 0\n        for i in reversed(list(range(len(satisfaction)))):\n            runningSum += satisfaction[i]\n            if runningSum <= 0:\n                return coefficient(satisfaction[i+1:])\n        return coefficient(satisfaction)\n"]