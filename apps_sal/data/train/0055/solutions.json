["for __ in range(int(input())):\n    n = int(input())\n    print((n + 1) // 2)", "from math import ceil\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(int(ceil(n/2)))", "for _ in range(int(input())):\n      print((int(input())+1)//2)", "tests = int(input())\nfor _ in range(tests):\n    n = int(input())\n    print((n + 1) // 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print((n + 1) // 2)\n    \n", "t = int(input())\nfor test in range(t):\n    a = int(input())\n    print((a+1)//2)", "\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print((n+1)//2)", "#list(map(int,input().split()))\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print((n+1)//2)\n", "# for _ in range(1):\nfor _ in range(int(input())):\n    # a, b = map(int, input().split())\n    n = int(input())\n    # arr = list(map(int, input().split()))\n    # s = input()\n    x = (n + 1) // 2\n    print(x)\n", "from math import ceil\nfor _ in range(int(input())):\n    print(ceil(int(input())/2))", "for _ in range(int(input())):\n    n = int(input())\n    print((n + 1) // 2)\n    #n, m = map(int, input().split())\n    '''A = list(map(int, input().split()))\n    Ans = 0\n    for i in range(len(A)):'''\n", "from math import *\n\ndef r1(t):\n    return t(input())\n\ndef r2(t):\n    return [t(i) for i in input().split()]\n\nfor _ in range(r1(int)):\n    n = r1(int)\n    print((n + 1) // 2)\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    print((n+1)//2)", "q = int(input())\nfor _ in range(q):\n    a = int(input())\n    print((a+1)//2)", "import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn map(int, sys.stdin.readline().split())\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn = II()\n\tprint(math.ceil(n/2))", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nORDA = 97  # a\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    newnumber = 0\n    while number > 0:\n        newnumber += number % base\n        number //= base\n    return newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\nfor _ in range(ii()):\n    print(math.ceil(ii() / 2))\n\n\n", "import sys\ninput = sys.stdin.readline\n\nans = []\nfor i in range(int(input())):\n    n = int(input())\n    ans.append(n//2 + n %2)\n\nprint(*ans,sep='\\n')", "import sys\ninput = lambda :sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n\tn=int(input())\n\tprint(n//2 + (1 if n%2 else 0))", "def solve():\n    print((int(input()) + 1) // 2)\n\n\nfor i in range(int(input())):\n    solve()\n", "import sys\n# from collections import deque\n# from collections import Counter\n# from math import sqrt\n# from math import log\nfrom math import ceil\n# from bisect import bisect_left, bisect_right\n\n# alpha=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n# mod=10**9+7\n# mod=998244353\n\n# def BinarySearch(a,x): \n# \ti=bisect_left(a,x) \n# \tif(i!=len(a) and a[i]==x): \n# \t\treturn i \n# \telse: \n# \t\treturn -1\n\n# def sieve(n): \n# \tprime=[True for i in range(n+1)]\n# \tp=2\n# \twhile(p*p<=n): \n# \t\tif (prime[p]==True): \n# \t\t\tfor i in range(p*p,n+1,p): \n# \t\t\t\tprime[i]=False\n# \t\tp+=1\n# \tprime[0]=False\n# \tprime[1]=False\n# \ts=set()\n# \tfor i in range(len(prime)):\n# \t\tif(prime[i]):\n# \t\ts.add(i)\n# \treturn s\n\n# def gcd(a, b):\n# \tif(a==0):\n# \t\treturn b \n# \treturn gcd(b%a,a)\n\nfast_reader=sys.stdin.readline\nfast_writer=sys.stdout.write\n\ndef input():\n\treturn fast_reader().strip()\n\ndef print(*argv):\n\tfast_writer(' '.join((str(i)) for i in argv))\n\tfast_writer('\\n')\n\n#____________________________________________________________________________________________________________________________________\n\nfor _ in range(int(input())):\n\tn=int(input())\n\tprint(ceil(n/2))", "t = int(input())\n\nfor _ in range(t):\n    a = int(input())\n    print((a + 1) // 2)\n", "#!usr/bin/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations, accumulate\nimport sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\ndef IR(n):\n    return [I() for i in range(n)]\ndef LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n    t = I()\n    for _ in range(t):\n        n = I()\n        print((n+1)>>1)\n    return\n\n#Solve\ndef __starting_point():\n    solve()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nT = int(input())\n\nfor t in range(T):\n    N = int(input())\n    print((N+1)//2)\n", "import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\n\n\"\"\"\nFacts and Data representation\nConstructive? Top bottom up down\n\"\"\"\ndef solve():\n  n, = I()\n  if n % 2:\n    print(1 + n // 2)\n  else:\n    print(n // 2)\n\nt, = I()\nwhile t:\n  t -= 1\n  solve()", "t=int(input())\nfor i in range(t):\n    n=int(input())\n    print((n+1)//2)"]