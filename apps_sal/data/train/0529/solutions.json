["import math\nfor _ in range(int(input())):\n n=int(input())\n s=int(math.sqrt(n))\n ans=0\n for i in range(1,s+1):\n  ans+=(n//i)\n ans=ans*2-(s*s)\n g=math.gcd(n*n,ans)\n print(str(ans//g)+\"/\"+str(n*n//g)) ", "from collections import defaultdict\nimport sys\nimport math as m\nimport random as rd\nimport bisect as b\n#import numpy as np\nimport time\nsys.setrecursionlimit(1000000)\n\n\ndef uno(): return int(sys.stdin.readline().strip())\n\n\ndef dos(): return sys.stdin.readline().strip()\n\n\ndef tres(): return list(map(int, sys.stdin.readline().strip().split()))\n\n\ndef cuatro(): return sys.stdin.readline().strip().split()\n\n################## CODE STARTS FROM HERE ######################\n\n\nfor _ in range(uno()):\n n = uno()\n ans, root = 0, m.floor(m.sqrt(n))\n for i in range(1, root+1):\n  ans += n//i\n ans = ans+ans-root*root\n a, b = ans//m.gcd(ans, n*n), (n*n)//m.gcd(ans, n*n)\n print(str(a)+\"/\"+str(b))\n", "from collections import defaultdict\nimport sys\nimport math as m\nimport random as rd\nimport bisect as b\n#import numpy as np\nimport time\nsys.setrecursionlimit(1000000)\n\n\ndef uno(): return int(sys.stdin.readline().strip())\n\n\ndef dos(): return sys.stdin.readline().strip()\n\n\ndef tres(): return map(int, sys.stdin.readline().strip().split())\n\n\ndef cuatro(): return sys.stdin.readline().strip().split()\n\n################## CODE STARTS FROM HERE ######################\n\n\nfor _ in range(uno()):\n n = uno()\n ans, root = 0, m.floor(m.sqrt(n))\n for i in range(1, root+1):\n  ans += n//i\n ans = ans+ans-root*root\n a, b = ans//m.gcd(ans, n*n), (n*n)//m.gcd(ans, n*n)\n print(str(a)+\"/\"+str(b))", "import math\n\ndef solve():\n n = int(input())\n num = 0\n\n denom = n * n\n s = int(math.sqrt(n))\n for i in range(1, s + 1):\n  num += n//i\n\n num = (2 * num) - (s * s)\n k = math.gcd(num, denom)\n\n print(str(num//k) + \"/\" + str(denom//k)) \n\nt = int(input())\n\n\nfor tt in range(0, t):\n solve()", "import math\n\ndef solve():\n n = int(input())\n num = 0\n\n denom = n * n\n s = int(math.sqrt(n))\n for i in range(1, s + 1):\n  num += n//i\n\n num = (2 * num) - (s * s)\n k = math.gcd(num, denom)\n\n print(str(num//k) + \"/\" + str(denom//k)) \n\nt = int(input())\n\n\nfor tt in range(0, t):\n solve()", "def gcd(a,b):\n if b==0: return a \n return gcd(b,a%b)\nfrom math import sqrt as S \nfor _ in range(int(input())):\n n=int(input())\n tot=n*n\n s=0\n beta=int(S(n))\n for i in range(1,int(S(n))+1):\n  s+=n//i \n s=2*s-beta*beta \n g=gcd(s,tot)\n s=s//g \n tot=tot//g \n print(s,end='')\n print('/',end='')\n print(tot)\n "]