["class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if k==0:\n             j=0\n             for i in range(0,len(nums)):\n                 if nums[i]==0:\n                     if j<i:\n                         return True\n                 else:\n                     j=i+1\n             return False\n         dic={0:-1}\n         c=0\n         for i in range(0,len(nums)):\n             c=(c+nums[i])%k\n             if c in dic:\n                 if i-dic[c]>1:\n                     return True\n             else:\n                 dic[c]=i\n         return False", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         dict,cur = {},0\n         if k == 0:\n             zero = 0\n             for i in nums:\n                 if i == 0 and zero == 1:\n                     return True\n                 elif i == 0 and zero != 1:\n                     zero = 1\n                 else:\n                     zero = 0\n             return False\n         for i in range(len(nums)):\n             cur += nums[i]\n             if i!= 0 and cur % k == 0:\n                 print('1')\n                 return True\n             elif cur % k in dict and cur >= k:\n                 print('2')\n                 return True\n             elif i!= 0 and nums[i] == 0 and nums[i-1] == 0:\n                 print('3')\n                 return True\n             else:\n                 dict[cur % k] = True\n         return False\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n \n         if not nums or len(nums) < 2:\n             return False\n \n         k = abs(k)\n         n = len(nums)\n         d = {0:-1}\n         sum = 0\n         for i in range(n):\n             sum += nums[i]\n             key = sum % k if k > 0 else sum\n             \n             if key not in d:\n                 d[key] = i\n             elif i >= d[key] + 2:\n                 print(d[key] + 1, i)\n                 return True\n \n         return False", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if not nums or len(nums) < 2:\n             return False\n \n         if k == 1:\n             return True\n \n         cur_sum, sums = 0, {0: -1}\n         for i, x in enumerate(nums):\n             cur_sum += x\n             mod = (cur_sum % k) if k != 0 else cur_sum\n             if mod in sums:\n                 if i - sums[mod] >= 2:\n                     return True\n             else:\n                 sums[mod] = i\n         return False", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if k==0:\n             i=1\n             while i<len(nums):\n                 if nums[i-1]==0 and nums[i]==0:\n                     return True\n                 i+=1\n             return False    \n         d=dict()\n         d[0]=-1\n         s=0\n         for i,x in enumerate(nums):\n             s+=x\n             s=s%k\n             if s in d :\n                 if i-d[s]>1:\n                     return True\n             else:    \n                 d[s]=i\n         return False    \n", "class Solution(object):\n     def checkSubarraySum(self, nums, k):\n \n         \n         if k == 0:\n             # if two continuous zeros in nums, return True\n             # time O(n)\n             for i in range(0, len(nums) - 1):\n                 if nums[i] == 0 and nums[i+1] == 0:\n                     return True\n             return False\n         \n         k = abs(k)\n         if len(nums) >= k * 2:\n             return True\n         \n         #if n >= 2k: return True\n         #if n < 2k:  time O(n) is O(k)  \n \n         sum = [0]\n         for x in nums:\n             sum.append((sum[-1] + x) % k)\n         \n         Dict = {}\n         for i in range(0, len(sum)):\n             if sum[i] in Dict:\n                 if i - Dict[sum[i]] > 1:\n                     return True\n             else:\n                 Dict[sum[i]] = i\n         \n         return False", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         sum = 0\n         indices = {0: -1}\n         for i in range(len(nums)):\n             sum += nums[i]\n             if k == 0:\n                 l = indices.get(sum)\n                 if l is not None and i - l >= 2:\n                     return True\n                 elif l is None:\n                     indices[sum] = i\n             else:\n                 l = indices.get(sum % k)\n                 if l is not None and i - l >= 2:\n                     return True\n                 elif l is None:\n                     indices[sum % k] = i\n         return False\n", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if not nums or len(nums) <= 1:\n             return False\n         if k == 0:\n             for i in range(1, len(nums)):\n                 if nums[i] == 0 and nums[i-1] == 0:\n                     return True\n         else:\n             nums[0] = nums[0] % k\n             for i in range(1, len(nums)):\n                 nums[i] = (nums[i-1] + nums[i]) % k\n                 if nums[i] == 0:\n                     return True\n             numdict = {}\n             for i in range(len(nums)):\n                 if nums[i] not in numdict:\n                     numdict[nums[i]] = i\n                 elif i > numdict[nums[i]] + 1:\n                     return True\n         # for i in range(len(nums)):\n         #     for j in range(i+1, len(nums)):\n         #         if sum(nums[i:j+1]) % k == 0:\n         #             return True\n         return False\n", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         indexs = {}\n         indexs[0] = -1\n         curr_sum = 0\n         for i in range(len(nums)):\n             if k != 0:\n                 curr_sum += nums[i]\n                 modv = curr_sum % k\n                 if modv in indexs and i - indexs[modv] > 1:\n                     return True\n                 if not modv in indexs:\n                     indexs[modv] = i\n             else:\n                 if nums[i] == 0 and i < len(nums) - 1 and nums[i+1] == 0:\n                     return True\n         return False", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if not k:\n             i=0\n             while i<len(nums)-1:\n                 if not nums[i] and not nums[i+1]:\n                     return True\n                 i+=1\n             return False\n         k=abs(k)\n \n         dic={0:-1}\n         rem=0   # remainder\n         i=0\n         while i< len(nums):\n             rem=(rem+nums[i])%k\n             if rem not in dic: dic[rem]=i\n             elif dic[rem]<i-1: return True\n             i+=1\n         return False\n \n", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         s = 0\n         dic = collections.defaultdict(list)\n         dic[0].append(-1)\n         \n         for i in range(0, len(nums)):\n             s +=nums[i] \n             if k==0:\n                 dic[s].append(i)\n                 if i-dic[s][0]>1:\n                     return True\n             else:\n                 dic[s%k].append(i)\n                 if i-dic[s%k][0]>1:\n                     return True\n         \n         return False\n", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if k == 0:\n             for i in range(len(nums) - 1):\n                 if nums[i] == nums[i + 1] == 0:\n                     return True\n             return False\n         if len(nums) <= 1:\n             return False\n         s = 0\n         acc = []\n         for n in nums:\n             s += n\n             s %= k    \n             acc.append(s)\n         for i in range(1, len(nums)):\n             if acc[i] == 0:\n                 return True\n         return len(set(acc)) != len(acc)\n", "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         P = [0]\n         for x in nums:\n             v = P[-1] + x\n             if k: v %= abs(k)\n             P.append(v)\n \n         seen = set()\n         for i in range(len(P) - 3, -1, -1):\n             seen.add(P[i+2])\n             if P[i] in seen:\n                 return True\n         return False        "]