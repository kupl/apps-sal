["from itertools import permutations\nC = list(permutations(['A','B','C','D']))\nV = list(permutations([3,6,9,12]))\nP = list(permutations([25,50,75,100]))\nR = []\n\ndef test():\n d = {}\n n = int(input())\n for i in C[0]:\n  for j in V[0]:\n   d[i+str(j)] = 0\n for i in range(n):\n  x,y = input().split()\n  d[x+y] += 1\n ans = -1000000000\n for i in C:\n  for j in V:\n   for k in P:\n    c = 0\n    for l in range(4): \n     if d[i[l]+str(j[l])] == 0:\n      c -= 100\n     else:\n      c += (d[i[l]+str(j[l])]*k[l])\n    ans = max(ans,c)\n R.append(ans)\n print(ans)\n\ndef __starting_point():\n t = int(input())\n for i in range(t):\n  test()\n print(sum(R))\n\n__starting_point()", "# cook your dish here\nf=[]\nfor ad in range(int(input())):\n n=int(input())\n a=[0]*4;b=[0]*4;c=[0]*4;d=[0]*4\n for i in range(n):\n  x=(input().split())\n  if x[0]==\"A\":\n   a[int(x[1])//3-1]+=1\n  elif x[0]==\"B\":\n   b[int(x[1])//3-1]+=1\n  elif x[0]==\"C\":\n   c[int(x[1])//3-1]+=1\n  elif x[0]==\"D\":\n   d[int(x[1])//3-1]+=1\n x=[]\n for i in range(4):\n  for j in range(4):\n   for k in range(4):\n    for m in range(4):\n     s=0\n     l=[i,j,k,m]\n     if len(set(l))==4:\n      y=[a[i],b[j],c[k],d[m]]\n      for t in y:\n       if t==0:\n        s-=100\n      y.sort()\n      for t in range(3,-1,-1):\n       s+=(25+25*t)*y[t]\n      x.append(s)\n \n m=max(x)\n f.append(m)\n print(m)\nprint(sum(f))\n", "from pprint import pprint\nfrom numpy import where\narr =[]\nfrom sys import stdin,stdout\nprices =[100,75,50,25]\nfor _ in range(int(stdin.readline())):\n profit = -400\n t = int(stdin.readline())\n a = []\n for i in range(4):\n  temp = []\n  for j in range(4):\n   temp.append(0)\n  a.append(temp)\n s = 0\n for __ in range(t):\n  mov , time = input().split()\n  time = int(time)\n  if mov == 'A':\n   if time == 12:\n    a[0][0]+=1\n   elif time ==3:\n    a[0][1]+=1\n   elif time == 6:\n    a[0][2]+=1\n   else:\n    a[0][3]+=1\n  elif mov =='B':\n   if time == 12:\n    a[1][0]+=1\n   elif time == 3:\n    a[1][1]+=1\n   elif time == 6:\n    a[1][2]+=1\n   else:\n    a[1][3]+=1\n  elif mov =='C':\n   if time == 12:\n    a[2][0]+=1\n   elif time == 3:\n    a[2][1]+=1\n   elif time == 6:\n    a[2][2]+=1\n   else:\n    a[2][3]+=1\n  else:\n   if time == 12:\n    a[3][0]+=1\n   elif time == 3:\n    a[3][1]+=1\n   elif time == 6:\n    a[3][2]+=1\n   else:\n    a[3][3]+=1\n ma = -1\n cakes =[]\n for k in range(4):\n  mai,maj=-1,-1\n  for i in range(4):\n   for j in range(4):\n    if a[i][j] > ma:\n     ma = a[i][j]\n     mai = i\n     maj = j\n  for z in range(4):\n   for x in range(4):\n    if z==mai or x == maj:\n     a[z][x]=0\n  cakes.append(ma)\n  ma = -1\n cakes = sorted(cakes,reverse=True)\n for i in range(4):\n  if cakes[i]==0:\n   s-=100\n  else:\n   s+=prices[i]*cakes[i]\n if s >= profit:\n  profit= s\n print(profit)\n arr.append(profit)\n #print(arr)\nprint(sum(arr))", "from pprint import pprint\nfrom numpy import where\narr =[]\nfrom sys import stdin,stdout\nfor _ in range(int(stdin.readline())):\n t = int(stdin.readline())\n a = []\n for i in range(4):\n  temp = []\n  for j in range(4):\n   temp.append(0)\n  a.append(temp)\n s = 0\n for __ in range(t):\n  mov , time = input().split()\n  time = int(time)\n  if mov == 'A':\n   if time == 12:\n    a[0][0]+=1\n   elif time ==3:\n    a[0][1]+=1\n   elif time == 6:\n    a[0][2]+=1\n   else:\n    a[0][3]+=1\n  elif mov =='B':\n   if time == 12:\n    a[1][0]+=1\n   elif time == 3:\n    a[1][1]+=1\n   elif time == 6:\n    a[1][2]+=1\n   else:\n    a[1][3]+=1\n  elif mov =='C':\n   if time == 12:\n    a[2][0]+=1\n   elif time == 3:\n    a[2][1]+=1\n   elif time == 6:\n    a[2][2]+=1\n   else:\n    a[2][3]+=1\n  else:\n   if time == 12:\n    a[3][0]+=1\n   elif time == 3:\n    a[3][1]+=1\n   elif time == 6:\n    a[3][2]+=1\n   else:\n    a[3][3]+=1\n ma = -1\n cakes =[]\n for k in range(4):\n  mai,maj=-1,-1\n  for i in range(4):\n   for j in range(4):\n    if a[i][j] > ma:\n     ma = a[i][j]\n     mai = i\n     maj = j\n  for z in range(4):\n   for x in range(4):\n    if z==mai or x == maj:\n     a[z][x]=0\n  cakes.append(ma)\n  ma = -1\n cakes = sorted(cakes,reverse=True)\n for i in range(4):\n  if cakes[i]==0:\n   s-=100\n  else:\n   if i==0:\n    s+= cakes[i]*100\n   elif i==1:\n    s+= cakes[i]*75\n   elif i==2:\n    s+= cakes[i]*50\n   elif i==3:\n    s+= cakes[i]*25\n print(s)\n arr.append(s)\n #print(arr)\nprint(sum(arr))", "from pprint import pprint\nfrom numpy import where\narr =[]\nfrom sys import stdin,stdout\nfor _ in range(int(stdin.readline())):\n t = int(stdin.readline())\n a = []\n for i in range(4):\n  temp = []\n  for j in range(4):\n   temp.append(0)\n  a.append(temp)\n s = 0\n for __ in range(t):\n  mov , time = input().split()\n  time = int(time)\n  if mov == 'A':\n   if time == 12:\n    a[0][0]+=1\n   elif time ==3:\n    a[0][1]+=1\n   elif time == 6:\n    a[0][2]+=1\n   else:\n    a[0][3]+=1\n  elif mov =='B':\n   if time == 12:\n    a[1][0]+=1\n   elif time == 3:\n    a[1][1]+=1\n   elif time == 6:\n    a[1][2]+=1\n   else:\n    a[1][3]+=1\n  elif mov =='C':\n   if time == 12:\n    a[2][0]+=1\n   elif time == 3:\n    a[2][1]+=1\n   elif time == 6:\n    a[2][2]+=1\n   else:\n    a[2][3]+=1\n  else:\n   if time == 12:\n    a[3][0]+=1\n   elif time == 3:\n    a[3][1]+=1\n   elif time == 6:\n    a[3][2]+=1\n   else:\n    a[3][3]+=1\n ma = -1\n cakes =[]\n for k in range(4):\n  mai,maj=-1,-1\n  for i in range(4):\n   for j in range(4):\n    if a[i][j] > ma:\n     ma = a[i][j]\n     mai = i\n     maj = j\n  for z in range(4):\n   for x in range(4):\n    if z==mai or x == maj:\n     a[z][x]=0\n  cakes.append(ma)\n  ma = -1\n for i in range(len(cakes)):\n  if cakes[i]==0:\n   s-=100\n  else:\n   if i==0:\n    s+= cakes[i]*100\n   elif i==1:\n    s+= cakes[i]*75\n   elif i==2:\n    s+= cakes[i]*50\n   elif i==3:\n    s+= cakes[i]*25\n print(s)\n arr.append(s)\n #print(arr)\nprint(sum(arr))", "ans=0\nfor _ in range(int(input())):\n n=int(input())\n A,B,C,D=[0]*4,[0]*4,[0]*4,[0]*4\n for i in range(n):\n  m,t=map(str,input().split())\n  if m=='A':\n   if t=='12':\n    A[0]+=1\n   elif t=='3':\n    A[1]+=1\n   elif t=='6':\n    A[2]+=1\n   else:\n    A[3]+=1\n  elif m=='B':\n   if t=='12':\n    B[0]+=1\n   elif t=='3':\n    B[1]+=1\n   elif t=='6':\n    B[2]+=1\n   else:\n    B[3]+=1\n  elif m=='C':\n   if t=='12':\n    C[0]+=1\n   elif t=='3':\n    C[1]+=1\n   elif t=='6':\n    C[2]+=1\n   else:\n    C[3]+=1\n  else:\n   if t=='12':\n    D[0]+=1\n   elif t=='3':\n    D[1]+=1\n   elif t=='6':\n    D[2]+=1\n   else:\n    D[3]+=1\n ans1=-400\n for i in range(4):\n  for j in range(4):\n   if j==i:\n    continue\n   for k in range(4):\n    if k==i or k==j:\n     continue\n    for l in range(4):\n     if l==i or l==j or l==k:\n      continue\n     din=[A[i],B[j],C[k],D[l]]\n     din.sort(reverse=True)\n     count=(100*din[0])+(75*din[1])+(50*din[2])+(25*din[3])\n     count-=(100*(din.count(0)))\n     if count>ans1:\n      ans1=count\n print(ans1)\n ans+=ans1\nprint(ans)", "import numpy\nfrom itertools import permutations \ntotals=0\ntest=int(input())\nwhile(test!=0):\n n=int(input())\n tw=[0,0,0,0]\n th=[0,0,0,0]\n si=[0,0,0,0]\n ni=[0,0,0,0]\n s=[0,1,2,3]\n for i in range(n):\n  m,t = map(str,input().split())\n  t=int(t)\n  if m==\"A\":\n   ind=0\n  elif m==\"B\":\n   ind=1\n  elif m==\"C\":\n   ind=2\n  elif m==\"D\":\n   ind=3\n  if t==12:\n   tw[ind]+=1\n  elif t==3:\n   th[ind]+=1\n  elif t==6:\n   si[ind]+=1\n  else:\n   ni[ind]+=1\n co = list(permutations(s,4))\n total=float(\"-inf\")\n for value in co:\n  p=[tw[value[0]],th[value[1]],si[value[2]],ni[value[3]]]\n  p.sort(reverse=True)\n  tot=0\n  for i in p:\n   if i==0:\n     tot-=100\n  tot+=p[0]*100\n  tot+=p[1]*75\n  tot+=p[2]*50\n  tot+=p[3]*25\n  if tot>total:\n   total=tot\n print(total)\n totals+=total\n test-=1\nprint(totals)", "# cook your dish here\nfrom sys import stdin,stdout\nI1=lambda:int(stdin.readline())\nT=0\nfor _ in range(I1()):\n m=I1()\n li2=[12,3,6,9]\n d={'A':[0,0,0,0],'B':[0,0,0,0],'C':[0,0,0,0],'D':[0,0,0,0]}\n for i in range(m):\n  x,t=list(map(str,stdin.readline().split()))\n  t=int(t)\n  d[x][li2.index(t)]+=1 \n #print(d)\n n=4\n ans=[]\n cost=[100,75,50,25]\n for i in range(n):\n  li1=[]\n  li1.append(d['A'][i])\n  for j in range(n):\n   if j!=i:\n    li1.append(d['B'][j])\n    for k in range(n):\n     if k!=i and k!=j:\n      li1.append(d['C'][k])\n      for l in range(n):\n       if l!=i and l!=j and l!=k:\n        li1.append(d['D'][l])\n        c=0 \n        z=0 \n        for s in sorted(li1,reverse=True):\n         if s==0:\n          c-=100\n         else:\n          c+=s*cost[z]\n         z+=1 \n        if c!=0:\n         ans.append(c)\n        li1.pop()\n      li1.pop()\n    li1.pop()\n  li1.pop()\n #print(ans)\n a=max(ans)\n print(a)\n T+=a \nprint(T)\n \n", "#The Theatre Problem\ndef solve(movie,ind,used):\n if ind >= 4:\n  arr = []\n  for i in used:\n   arr.append(used[i])\n  arr.sort(reverse=True)\n  profit = 0\n  price = 100\n  for i in arr:\n   if i == 0:\n    profit -= 100\n    continue\n   profit += price*i\n   price -= 25\n  nonlocal ans\n  ans = max(ans,profit)\n  return\n \n for i in movie[ind]:\n  if i in used:\n   continue\n  used[i] = movie[ind][i]\n  solve(movie,ind+1,used)\n  del used[i]\n\nTest = int(input())\ntotal = 0\nfor __ in range(Test):\n n = int(input())\n a = {3:0, 6:0, 9:0, 12:0}\n b = {3:0, 6:0, 9:0, 12:0}\n c = {3:0, 6:0, 9:0, 12:0}\n d = {3:0, 6:0, 9:0, 12:0}\n for i in range(n):\n  arr = input().split()\n  val = int(arr[1])\n\n  if arr[0] == 'A':\n   a[val] += 1\n\n  elif arr[0] == 'B':\n   b[val] += 1\n\n  elif arr[0] == 'C':\n   c[val] += 1\n\n  else:\n   d[val] += 1\n\n  kdf = 'asdfasd'\n  gasdf3 = 90877444\n\n ans = -2**31\n solve([a,b,c,d],0,{})\n print(ans)\n total += ans\nprint(total)", "def maximizing(array):\n cpy = array[:]\n final_list = []\n for i in range(len(array)):\n  new_list = [array[i]]\n  for t in range(len(cpy)):\n   for j in range(len(new_list)):\n    if cpy[t][0] == new_list[j][0] or cpy[t][1] == new_list[j][1]:\n     break\n   else:\n    new_list.append(cpy[t])\n  \n  cpy.remove(array[i])\n  final_list.append(new_list)\n\n costing = []\n for i in final_list:\n  cost = 0\n  count_array = []\n  if len(i) < 4:\n   cost -= (4 - len(i))*100\n  for j in i:\n   count_array.append(arrays.count(j))\n\n  count_array.sort(reverse=True)\n\n  threshold = 100\n\n  for k in count_array:\n   cost += k*threshold\n   threshold -= 25\n\n  costing.append(cost)\n\n return max(costing)\n\n\ntest_cases = int(input())\noutput_list = []\n\nfor _ in range(test_cases):\n n = int(input())\n arrays = []\n if n != 0:\n  for _ in range(n):\n   arrays.append(list(input().split()))\n\n  output_list.append(maximizing(arrays))\n else:\n  output_list.append(-400)\n\nfor output in output_list:\n print(output)\n\nprint(sum(output_list))\n", "def maximizing(array):\n cpy = array[:]\n final_list = []\n for i in range(len(array)):\n  new_list = [array[i]]\n  for t in range(len(cpy)):\n   for j in range(len(new_list)):\n    if cpy[t][0] == new_list[j][0] or cpy[t][1] == new_list[j][1]:\n     break\n   else:\n    new_list.append(cpy[t])\n  \n  cpy.remove(array[i])\n  final_list.append(new_list)\n\n costing = []\n for i in final_list:\n  cost = 0\n  count_array = []\n  if len(i) < 4:\n   cost -= (4 - len(i))*100\n  for j in i:\n   count_array.append(arrays.count(j))\n\n  count_array.sort(reverse=True)\n\n  threshold = 100\n\n  for k in count_array:\n   cost += k*threshold\n   threshold -= 25\n\n  costing.append(cost)\n\n return max(costing)\n\n\ntest_cases = int(input())\noutput_list = []\n\nfor _ in range(test_cases):\n n = int(input())\n arrays = []\n if n != 0:\n  for _ in range(n):\n   arrays.append(list(input().split()))\n\n  output_list.append(maximizing(arrays))\n else:\n  output_list.append(-400)\n\nfor output in output_list:\n print(output)\n\nprint(sum(output_list))\n", "def maximizing(array):\n cpy = array[:]\n final_list = []\n for i in range(len(array)):\n  new_list = [array[i]]\n  for t in range(len(cpy)):\n   for j in range(len(new_list)):\n    if cpy[t][0] == new_list[j][0] or cpy[t][1] == new_list[j][1]:\n     break\n   else:\n    new_list.append(cpy[t])\n  for tt in new_list:\n   if tt in cpy:\n    cpy.remove(tt)\n  final_list.append(new_list)\n\n costing = []\n for i in final_list:\n  cost = 0\n  count_array = []\n  if len(i) < 4:\n   cost -= (4 - len(i))*100\n  for j in i:\n   count_array.append(arrays.count(j))\n\n  count_array.sort(reverse=True)\n\n  threshold = 100\n\n  for k in count_array:\n   cost += k*threshold\n   threshold -= 25\n\n  costing.append(cost)\n\n return max(costing)\n\n\ntest_cases = int(input())\noutput_list = []\n\nfor _ in range(test_cases):\n n = int(input())\n arrays = []\n if n != 0:\n  for _ in range(n):\n   arrays.append(list(input().split()))\n\n  output_list.append(maximizing(arrays))\n else:\n  output_list.append(-400)\n\nfor output in output_list:\n print(output)\n\nprint(sum(output_list))\n", "import sys\nimport itertools\n \ndef read_line():\n return sys.stdin.readline().split()\n \ns = 0\nT = int(read_line()[0])\nfor i in range(T):\n n = int(read_line()[0])\n \n cnt = {}\n for j in range(n):\n  a, b = read_line()\n  if cnt.get((a, b)) == None: \n   cnt[(a, b)] = 1\n  else:\n   cnt[(a, b)] += 1\n \n best = -(10 ** 18)\n for p in list(itertools.permutations(['A', 'B', 'C', 'D'])):\n  cand = 0\n  li = []\n  for t, f in zip(['12', '3', '6', '9'], p):\n   li.append(cnt.get((f, t), 0))\n   if li[-1] == 0:\n    cand -= 100\n \n  li = sorted(li)\n  \n  pr = 25\n  for x in li:\n   cand += pr * x\n   pr += 25\n  \n  best = max(best, cand)\n \n print(best)\n s += best\nprint(s)", "import numpy\nfrom itertools import permutations \ntotals=0\ntest=int(input())\nwhile(test!=0):\n n=int(input())\n tw=[0,0,0,0]\n th=[0,0,0,0]\n si=[0,0,0,0]\n ni=[0,0,0,0]\n s=[0,1,2,3]\n for i in range(n):\n  m,t = map(str,input().split())\n  t=int(t)\n  if m==\"A\":\n   ind=0\n  elif m==\"B\":\n   ind=1\n  elif m==\"C\":\n   ind=2\n  elif m==\"D\":\n   ind=3\n  if t==12:\n   tw[ind]+=1\n  elif t==3:\n   th[ind]+=1\n  elif t==6:\n   si[ind]+=1\n  else:\n   ni[ind]+=1\n co = list(permutations(s,4))\n total=float(\"-inf\")\n for value in co:\n  p=[tw[value[0]],th[value[1]],si[value[2]],ni[value[3]]]\n  p.sort(reverse=True)\n  tot=0\n  for i in p:\n   if i==0:\n     tot-=100\n  tot+=p[0]*100\n  tot+=p[1]*75\n  tot+=p[2]*50\n  tot+=p[3]*25\n  if tot>total:\n   total=tot\n print(total)\n totals+=total\n test-=1\nprint(totals)", "# cook your dish here\nfrom collections import Counter\nans=\"\"\nsum=0\nfor _ in range(int(input())):\n n=int(input())\n x={\"A\":0,\"B\":0,\"C\":0,\"D\":0}\n price = 0\n li = []\n for i in range(0,n):\n  a = tuple(map(str, input().split()))\n  li.append(a)\n #print(li)\n z=Counter(li)\n #print(z.most_common())\n cost=100\n for y in z.most_common():\n  if(x[y[0][0]]==0):\n   #print(y[0][0])\n   x[y[0][0]]=1\n   #print(y[1])\n   #print(int(y[1]) * cost)\n   price+=int(y[1])*cost\n   cost-=25\n for p in list(x.values()):\n  if(p==0):\n   price-=100\n ans+=str(price)+\"\\n\"\n sum+=price\nprint(ans,sum)\n\n\n\n\n\n\n\n\n", "# cook your dish here\nfrom collections import Counter\nans=\"\"\nsum=0\nfor _ in range(int(input())):\n n=int(input())\n x={\"A\":0,\"B\":0,\"C\":0,\"D\":0}\n price = 0\n li = []\n for i in range(0,n):\n  a = tuple(map(str, input().split()))\n  li.append(a)\n #print(li)\n z=Counter(li)\n #print(z.most_common())\n cost=100\n for y in z.most_common():\n  if(x[y[0][0]]==0):\n   #print(y[0][0])\n   x[y[0][0]]=1\n   #print(y[1])\n   #print(int(y[1]) * cost)\n   price+=int(y[1])*cost\n   cost-=25\n for p in list(x.values()):\n  if(p==0):\n   price-=100\n ans+=str(price)+\"\\n\"\n sum+=price\nprint(ans,sum)\n\n\n\n\n\n\n\n\n", "netsum=0\nfrom itertools import permutations as per\ntry:\n for _ in range(int(input())):\n  n=int(input())\n  dic={}\n  for __ in range(n):\n   a,b=input().split()\n   if (a,b) not in dic:\n    dic[(a,b)]=1\n   else:\n    dic[(a,b)] += 1\n  best = - (10**3)\n  for p in list(per(['A','B','C','D'])):\n   profit = 0\n   lc=[]\n   for tup in zip(p,['12','3','6','9']):\n    \n    \n    lc.append(dic.get(tup,0))\n    if lc[-1]==0:\n     profit-=100\n   lc=sorted(lc)\n   pr=25\n   for x in lc:\n    profit+=pr*x\n    pr+=25\n \n   best=max(best,profit)\n  print(best)\n  netsum+=best\n print(netsum)\nexcept:\n pass", "# cook your dish here\ndef generateIndex(indexes):\n ans=indexes[:]\n for i in range (1,4):\n  for j in indexes:\n   temp=[]\n   for k in j:\n    temp.append((k+i)%4)\n   ans.append(temp)\n return ans\n\n\n\ndef countScore(x,index):\n profit=[]\n for i in range (4):\n  profit.append(x[i][index[i]])\n profit.sort()\n ans=0\n m=[25,50,75,100]\n for i in range (4):\n  temp=(m[i]*profit[i])\n  if temp==0:\n   ans-=100\n  else:\n   ans+=temp\n return ans\n   \n\ndef ind(t):\n if t==3:\n  return 0\n if t==6:\n  return 1\n if t==9:\n  return 2\n if t==12:\n  return 3\n \n\nt=int(input())\ntotal=0\nwhile t>0:\n indexes=[[0,1,2,3],[0,1,3,2],[0,2,1,3],[0,2,3,1],[0,3,1,2],[0,3,2,1]]\n allIndex=generateIndex(indexes)\n t-=1\n n=int(input())\n a=[0,0,0,0]\n b=a[:]\n c=a[:]\n d=a[:]\n for _ in range (n):\n  m,t1=input().split()\n  t1=int(t1)\n  if m=='A':\n   a[ind(t1)]+=1\n  elif m=='B':\n   b[ind(t1)]+=1\n  elif m=='C':\n   c[ind(t1)]+=1\n  else:\n   d[ind(t1)]+=1\n x=[a,b,c,d]\n ans=[]\n for i in allIndex:\n  ans.append(countScore(x,i))\n profit=max(ans)\n total+=profit\n print(profit)\nprint(total)"]