["import sys\nfrom operator import itemgetter\n\ndef count(a, b, num_a, num_b, cur_time):\n\tcurrent_result = 0\n\t#print('count time = ', cur_time, \"num_a =\", num_a, 'num_b = ', num_b)\n\tif num_a * a + num_b * b <= cur_time and cur_time >= 0:\n\t\tcur_time -= num_a * a + num_b * b\n\t\tcurrent_result = num_a + num_b\n\t\tif num_a < total_a:\n\t\t\tif (total_a - num_a) * a <= cur_time:\n\t\t\t\tcurrent_result += total_a - num_a\n\t\t\t\tcur_time -= (total_a - num_a) * a\n\t\t\t\t#print(1)\n\t\t\telse:\n\t\t\t\tcurrent_result += cur_time // a\n\t\t\t\tcur_time -= a *(cur_time // a)\n\t\t\t\t#print(2)\n\t\tif num_b < total_b:\n\t\t\tif (total_b - num_b) * b <= cur_time:\n\t\t\t\tcurrent_result += total_b - num_b\n\t\t\t\t#print(3)\n\t\t\telse:\n\t\t\t\t#print(4)\n\t\t\t\tcurrent_result += cur_time // b\n\t#print('current_result = ', current_result)\n\treturn current_result\n\n\ndef solve(n, T, a, b, tasks, total_a, total_b):\t\n\ttasks = sorted(tasks)\n\t#print(tasks)\n\tresult = 0\n\tnum_a = 0\n\tnum_b = 0\n\n\tfor i in range(len(tasks)):\n\t\ttime, t = tasks[i] \n\t\t#print(tasks[i])\n\t\tcur_time = time - 1\n\t\t#print('cur time = ', cur_time)\n\t\tcurrent_result = count(a, b, num_a, num_b, cur_time)\n\t\tresult = max(current_result, result)\n\n\t\tif t == 0:\n\t\t\tnum_a += 1\n\t\telse:\n\t\t\tnum_b += 1\n\n\t\tif i == len(tasks) - 1 or tasks[i + 1][1] != tasks[i][1]:\n\t\t\tresult = max(result, count(a, b, num_a, num_b, cur_time))\n\n\t\t#print(\"i =\", i, \"result = \", result)\n\n\tresult = max(result, count(a, b, total_a, total_b, T))\n\treturn result\n\n\nq = int(input())\n\nfor i in range(q):\n\tn, T, a, b = list(map(int, input().split()))\n\ttypes = list(map(int, input().split()))\n\ttotal_a, total_b = 0, 0\n\tfor t in types:\n\t\tif t == 0:\n\t\t\ttotal_a += 1\n\t\telse:\n\t\t\ttotal_b += 1\n\tt = list(map(int, input().split()))\n\t#print(t)\n\t#print(types)\n\ttasks = list(zip(t, types))\n\tprint(solve(n, T, a, b, tasks, total_a, total_b))\t\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor testcases in range(t):\n    n,T,a,b=list(map(int,input().split()))\n    A=list(map(int,input().split()))\n    L=list(map(int,input().split()))\n\n    LCAN=[T]\n\n    EASY=[]\n    HARD=[]\n\n    for i in range(n):\n        if A[i]==0:\n            EASY.append(L[i])\n        else:\n            HARD.append(L[i])\n\n        if L[i]>1:\n            LCAN.append(L[i]-1)\n\n    LCAN=sorted(set(LCAN))\n\n    EASY.sort()\n    HARD.sort()\n\n    #print(LCAN,a,b)\n    #print(EASY)\n    #print(HARD)\n    #print()\n\n    eind=0\n    hind=0\n\n    LENE=len(EASY)\n    LENH=len(HARD)\n\n    needtime=0\n    ANS=0\n    \n    for time in LCAN:\n        while eind<LENE and EASY[eind]<=time:\n            needtime+=a\n            eind+=1\n\n        while hind<LENH and HARD[hind]<=time:\n            needtime+=b\n            hind+=1\n\n        if time<needtime:\n            continue\n        else:\n            rest=time-needtime\n            score=eind+hind\n\n            if (LENE-eind)*a>=rest:\n                score+=rest//a\n            else:\n                score=LENE+hind\n                rest-=(LENE-eind)*a\n\n                score+=min(LENH-hind,rest//b)\n\n            ANS=max(ANS,score)\n            \n    print(ANS)\n                \n\n        \n\n            \n        \n\n    \n", "m = int(input())\nfor ii in range(m):\n    n, T, a, b = list(map(int, input().split()))\n    score = [a,b]\n    d = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    easy = 0\n    for d1 in d:\n        if d1 == 0:\n            easy += 1\n    diff = list(zip(t,d))\n    diff = sorted(diff) # from least to greatest\n    cnt = 0\n    cur = 0\n    ans = 0\n    for i in range(n):\n        t,d = diff[i]\n        # print('----',i, cur, cnt)\n        if cur < t and cur <= T:\n            # can leave\n            ans = max(cnt, ans)\n            # try easy problems as much as possible\n            tmp = (t - 1 - cur) // a\n            tmp = min(tmp, easy)\n            ans = max(ans, cnt + tmp)\n\n        # force this one\n        cnt += 1\n        cur += score[d]\n        if d==0:\n            easy -= 1\n    if cur <= T:\n        ans = max(cnt, ans)\n\n    print(ans)\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int,minp().split()))\n\ndef solve():\n\tn, T, a, b = mints()\n\th = list(mints())\n\tc = [0, 0]\n\tfor i in h:\n\t\tc[i] += 1\n\ti = 0\n\tt = [None]*n\n\tfor j in mints():\n\t\tt[i] = (j, i)\n\t\ti += 1\n\tt.sort()\n\ttt = 0\n\ttmust = 0\n\tcmust = 0\n\tr = 0\n\tfor ii in range(len(t)):\n\t\ttn, i = t[ii]\n\t\tif tt < tn - 1:\n\t\t\ttt = tn - 1\n\t\t\tleft = tt - tmust\n\t\t\tif left >= 0:\n\t\t\t\tac = min(left//a, c[0])\n\t\t\t\tbc = min((left - ac*a)//b, c[1])\n\t\t\t\t#print(tt, tmust, left, cmust, ac, bc)\n\t\t\t\tr = max(r, cmust + ac + bc)\n\t\tif h[i]:\n\t\t\ttmust += b\n\t\t\tc[1] -= 1\n\t\telse:\n\t\t\ttmust += a\n\t\t\tc[0] -= 1\n\t\t#print(\"tmust\", tmust)\n\t\tcmust += 1\n\tif tt < T:\n\t\ttt = T\n\t\tleft = tt - tmust\n\t\tif left >= 0:\n\t\t\tac = min(left//a, c[0])\n\t\t\tbc = min((left - ac*a)//b, c[1])\n\t\t\tr = max(r, cmust + ac + bc)\n\treturn r\n\nfor i in range(mint()):\n\tprint(solve())\n", "\nm = int(input())\nfor i in range(m):\n\tn, T, a, b = list(map(int, input().split()))\n\tis_hard = list(map(int, input().split()))\n\ttotal_hard = sum(is_hard)\n\ttotal_easy = n - total_hard\n\ttime_mandatory = list(map(int, input().split()))\n\tmandatory_times = sorted([(time_mandatory[i], i)\n\t\tfor i in range(len(time_mandatory))])\n\tmandatory_times.append((T, -1))\n\tmaximal_points = 0\n\tmin_easy = 0\n\tmin_hard = 0\n\tfor (i, (time, problem_no)) in enumerate(mandatory_times):\n\t\tbad = False\n\t\tif i != len(mandatory_times) - 1 and mandatory_times[i + 1][0] == time:\n\t\t\tbad = True\n\t\tremaining_easy = total_easy - min_easy\n\t\tremaining_hard = total_hard - min_hard\n\t\tremaining_time = time - 1 - min_easy * a - min_hard * b\n\t\tif remaining_time >= 0:\n\t\t\tif remaining_time >= a * remaining_easy:\n\t\t\t\tmaximal_points = max(maximal_points,\n\t\t\t\t\tmin_easy + min_hard + remaining_easy +\n\t\t\t\t\tmin((remaining_time - a * remaining_easy) // b,\n\t\t\t\t\t\tremaining_hard))\n\t\t\telse:\n\t\t\t\tmaximal_points = max(maximal_points,\n\t\t\t\t\tmin_easy + min_hard + remaining_time // a)\n\t\tif problem_no == -1:\n\t\t\tmin_easy = min_easy\n\t\telif is_hard[problem_no] == 1:\n\t\t\tmin_hard += 1\n\t\telse:\n\t\t\tmin_easy += 1\n\t\tif bad:\n\t\t\tcontinue\n\t\tremaining_easy = total_easy - min_easy\n\t\tremaining_hard = total_hard - min_hard\n\t\tremaining_time = time - min_easy * a - min_hard * b\n\t\tif remaining_time >= 0:\n\t\t\tif remaining_time >= a * remaining_easy:\n\t\t\t\tmaximal_points = max(maximal_points,\n\t\t\t\t\tmin_easy + min_hard + remaining_easy +\n\t\t\t\t\tmin((remaining_time - a * remaining_easy) // b,\n\t\t\t\t\t\tremaining_hard))\n\t\t\telse:\n\t\t\t\tmaximal_points = max(maximal_points,\n\t\t\t\t\tmin_easy + min_hard + remaining_time // a)\n\tprint(maximal_points)\n", "t = int(input())\nfor _ in range(t):\n    n, T, a, b = list(map(int, input().split(' ')))\n    task_t = list(map(int, input().split(' ')))\n    ness = list(map(int, input().split(' ')))\n\n    perm = sorted(list(range(n)), key=lambda i: ness[i])\n\n    score = 0\n    tot_hard = sum(task_t)\n    tot_easy = n - tot_hard\n\n    must_easy = 0\n    must_hard = 0\n    for i in range(n):\n        if i > 0 and ness[perm[i]] == ness[perm[i - 1]]:\n            if task_t[perm[i]] == 0:\n                must_easy += 1\n            else:\n                must_hard += 1\n            continue\n\n        tm = ness[perm[i]] - 1\n\n        req_time = must_easy * a + must_hard * b\n\n        if req_time > tm:\n            if task_t[perm[i]] == 0:\n                must_easy += 1\n            else:\n                must_hard += 1\n            continue\n\n        extra_time = tm - req_time\n        extra_easy = min(extra_time // a, tot_easy - must_easy)\n\n        extra_time -= a * extra_easy\n        extra_hard = min(extra_time // b, tot_hard - must_hard)\n\n        #print(tm, extra_easy, extra_hard, must_easy, must_hard)\n\n        score = max(score, extra_easy + extra_hard + must_easy + must_hard)\n\n        if task_t[perm[i]] == 0:\n            must_easy += 1\n        else:\n            must_hard += 1\n\n    if tot_easy * a + tot_hard * b <= T:\n        score = n\n    print(score)\n\n\n\n"]