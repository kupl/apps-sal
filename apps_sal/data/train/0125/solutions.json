["class Solution:\n     def superPow(self, a, b):\n         result = 1\n         fermatb = (int(''.join(map(str, b)))) % 570\n         while fermatb:\n             if fermatb & 1:\n                 result = (result * a) % 1337\n             a = (a * a) % 1337\n             fermatb >>= 1\n         return result", "class Solution:\n     def superPow(self, a, b):\n         return pow(a, int(''.join(map(str, b))), 1337)", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         \"\"\"\n         \n         res = a**b[0]\n         for i in range(1, len(b)):\n             res = res**10 % 1337 * a**b[i] % 1337 % 1337\n         return res", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         \"\"\"\n         b.reverse()\n         p = b.pop()\n         res = pow(a,p) % 1337\n         while b:\n             p = b.pop()\n             res = pow(res,10) % 1337\n             res = res * pow(a,p) % 1337\n         return res\n", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         \"\"\"\n         temp1 = a\n         temp = 1\n         for i in range(len(b)-1,-1,-1):\n             if i<len(b)-1:\n                 temp1 = pow(temp1,10) % 1337\n             temp2 = pow(temp1,b[i]) % 1337\n             temp = temp * temp2 % 1337\n         return temp\n", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         \"\"\"\n         from functools import reduce\n         return 0 if a % 1337 == 0 else pow(a, reduce(lambda x, y: (x * 10 + y) % 1140, b) + 1140, 1337)", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         \"\"\"\n         def eular(mod):\n             res, a = mod, mod\n             i = 2\n             while i * i <= a:\n                 if a % i == 0:\n                     res = res // i * (i - 1)\n                     while a % i == 0:\n                         a //= i\n                 i += 1\n             if a > 1:\n                 res = res // a * (a - 1)\n             return res\n         def qpow(x, n, mod):\n             res = 1\n             while n > 0:\n                 if n&1 != 0:\n                     res = res * x % mod\n                 x = x * x % mod\n                 n >>= 1\n             return res\n         \n         phi = eular(1337)\n         n = 0\n         for num in b:\n             n = (n*10 % phi + num) % phi\n         return qpow(a, n, 1337)", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         \"\"\"\n         a, b = a % 1337, int(\"\".join([str(i) for i in b]))\n         base, temp, extra = {1: a}, 1, {a: 1}\n         for temp in range(2, 1338):\n             rem = base[temp - 1] * a % 1337\n             if rem in extra:\n                 start = extra[rem]\n                 length = temp - start\n                 break\n             else:\n                 base[temp] = rem\n                 extra[rem] = temp\n         if b in base:\n             return base[b]\n         return base[start + (b - start) % length]", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         \"\"\"\n         return pow(a, int(''.join(map(str, b))), 1337)\n         # from functools import reduce\n         # k=reduce(lambda x,y:x*10+y, b)\n         # print(k)\n         # return (a%1337)**k\n", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         \"\"\"\n         # return pow(a, int(''.join(map(str, b))), 1337)\n         from functools import reduce\n         k=reduce(lambda x,y:x*10+y, b)\n         # print(k)\n         # return pow(a,k)%1337\n         return pow(a, k, 1337)", "class Solution:\n     def superPow(self, a, b):\n         num = 0\n         currentpow = 1\n         for item in b[::-1]:\n             num += currentpow * item\n             currentpow *= 10\n         return self.binpow(a, num % 570)\n \n     def binpow(self, n, p):\n         if(p == 0):\n             return 1\n         if(p % 2 == 0):\n             return (self.binpow(n * n, p // 2)) % 1337\n         return (n * self.binpow(n, p - 1)) % 1337", "class Solution:\n     def superPow(self, a, b):\n         \"\"\"\n         :type a: int\n         :type b: List[int]\n         :rtype: int\n         a %= 1337\n         if len(b) == 1:\n             return self.powMod(a, b[0])\n         return self.powMod(self.superPow(a, b[:-1]), 10) * self.powMod(a, b[-1]) % 1337\n         \"\"\"\n         res = 1\n         x = a % 1337\n         for y in b[::-1]:\n             res = (res * (x ** y)) % 1337\n             x = (x ** 10) % 1337\n         return res\n", "class Solution:\n     def superPow(self, a, b):\n         result = 1\n         fermatb = (int(''.join(map(str, b)))) % 570\n         while fermatb:\n             if fermatb & 1:\n                 result = (result * a) % 1337\n             a = (a * a) % 1337\n             fermatb >>= 1\n         return result", "class Solution:\n     def superPow(self, a, b):\n         result = 1\n         x = a % 1337\n         for y in b[::-1]:\n             result = (result * (x**y)) % 1337\n             x = (x**10) % 1337\n         return result"]