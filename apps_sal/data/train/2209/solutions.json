["n = int(input())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    u,v = [int(i)-1 for i in input().split()]\n    g[u].append(v)\n    g[v].append(u)\n\nleaf = [len(i)==1 for i in g]\nroot = -1\nmx = n-1\nfor i in range(n):\n    if leaf[i]:\n        root = i\n    leafs = 0\n    for j in g[i]:\n        if leaf[j]:\n            leafs += 1\n    if leafs > 1:\n        mx -= leafs-1\n\nstack = [(root, -1, 0)]\neven = True\nwhile len(stack)>0:\n    i, j, d = stack.pop()\n    if leaf[i] and d%2 == 1:\n        even = False\n        break\n    for k in g[i]:\n        if k != j:\n            stack.append((k,i,d+1))\nmn = 1 if even else 3\n\nprint(mn,mx)\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nE=[[] for i in range(n+1)]\n\nfor i in range(n-1):\n    a,b=list(map(int,input().split()))\n    E[a].append(b)\n    E[b].append(a)\n\nLEAF=[]\nfor i in range(n+1):\n    if len(E[i])==1:\n        LEAF.append(i)\n\nQ=[1]\nUSE=[-1]*(n+1)\nUSE[1]=0\n\nwhile Q:\n    x=Q.pop()\n    for to in E[x]:\n        if USE[to]==-1:\n            USE[to]=1-USE[x]\n            Q.append(to)\n\nf=USE[LEAF[0]]\n\nfor l in LEAF:\n    if f!=USE[l]:\n        MIN=3\n        break\nelse:\n    MIN=1\n\n#print(MIN)\n\nMAX=n-1\n\nFP=[0]*(n+1)\n\nfor l in LEAF:\n    for to in E[l]:\n        if FP[to]==1:\n            MAX-=1\n        else:\n            FP[to]=1\n\nprint(MIN,MAX)\n    \n", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nneigh = [[] for i in range(n)]\nl = []\nfor i in range(n - 1):\n    a, b = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    neigh[a].append(b)\n    neigh[b].append(a)\n    l.append((a,b))\n\n#Max\nedges = set()\nfor a, b in l:\n    if len(neigh[a]) == 1:\n        a = -1\n    if len(neigh[b]) == 1:\n        b = -1\n    if a > b:\n        a, b = b, a\n    edges.add((a,b))\n\nMAX = len(edges)\n\n#Min\nleafDepth = []\nvisited = [False] * n\nfrom collections import deque\nq = deque()\nq.append((0,0))\nwhile q:\n    nex, d = q.popleft()\n    if not visited[nex]:\n        visited[nex] = True\n\n        if len(neigh[nex]) == 1:\n            leafDepth.append(d)\n        for v in neigh[nex]:\n            q.append((v,d+1))\n\nMIN = 1\ncorr = leafDepth.pop() % 2\nfor d in leafDepth:\n    if d % 2 != corr:\n        MIN = 3 \n        \n\n\n#Out\nprint(MIN, MAX)\n", "import sys\n\nn = int(sys.stdin.readline().strip())\nN = [[] for i in range (0, n)]\nC = [-1 for i in range (0, n)]\nfor i in range (0, n-1):\n    a, b = list(map(int,sys.stdin.readline().strip().split()))\n    a, b = a-1, b-1\n    N[a].append(b)\n    N[b].append(a)\nC[0] = 0\nL0 = [0]\nL1 = []\nwhile len(L0) + len(L1) > 0:\n    for i in L0:\n        for j in N[i]:\n            if C[j] == -1:\n                C[j] = 1\n                L1.append(j)\n    L0 = []\n    for i in L1:\n        for j in N[i]:\n            if C[j] == -1:\n                C[j] = 0\n                L0.append(j)\n    L1 = []\nf = 1\nF = n-1\nL = []\nM = []\nfor i in range (0, n):\n    if len(N[i]) == 1:\n        L.append(N[i])\n        M.append(i)\nL.sort()\nfor i in range (0, len(L)-1):\n    if L[i] == L[i+1]:\n        F = F - 1\n    if C[M[i]] != C[M[i+1]]:\n        f = 3\nprint(f, F)", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nn = int(input())\ninfo = [list(map(int, input().split())) for i in range(n - 1)]\n\ntree = [[] for i in range(n)]\nfor a, b in info:\n    a -= 1\n    b -= 1\n    tree[a].append(b)\n    tree[b].append(a)\n    \nmax_ = n - 1\nfor v in range(n):\n    cnt = 0\n    for nxt_v in tree[v]:\n        if len(tree[nxt_v]) == 1:\n            cnt += 1\n    max_ -= max(cnt - 1, 0)\n    \n    \nvisited = [-1] * n\nq = deque([0])\nvisited[0] = 0\nwhile q:\n    v = q.popleft()\n    for nxt_v in tree[v]:\n        if visited[nxt_v] != -1:\n            continue\n        visited[nxt_v] = visited[v] + 1\n        q.append(nxt_v)\n\n\nmin_ = 3\nfor i in range(n):\n    if len(tree[i]) == 1:\n        if visited[i] % 2 == 0:\n            break\nelse:\n    min_ = 1\n\nfor i in range(n):\n    if len(tree[i]) == 1:\n        if (visited[i] + 1) % 2 == 0:\n            break\nelse:\n    min_ = 1\nprint(min_, max_)"]