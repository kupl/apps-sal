["class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.initial_rectangle = rectangle\n        self.rectangles = []\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.rectangles.append((row1, col1, row2, col2, newValue))\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        for row1, col1, row2, col2, value in reversed(self.rectangles):\n            if row1 <= row <= row2 and col1 <= col <= col2:\n                return value\n        return self.initial_rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self._rect = rectangle\n        self._instrs = []\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self._instrs.append([row1, row2, col1, col2, newValue])\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        for row1, row2, col1, col2, val in self._instrs[::-1]:\n            if row1 <= row and row <= row2 and col1 <= col and col<= col2:\n                return val\n        return self._rect[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n    rectangle = [[]]\n\n    def __init__(self, rectangle):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        while(row1 <= row2):\n            self.rectangle[row1][col1:col2+1] = [newValue] * len(self.rectangle[row1][col1:col2+1])\n            row1 += 1\n\n\n    def getValue(self, row: int, col: int) -> int:\n        return (self.rectangle[row][col])\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        # first pass solution\n        for row in self.rectangle[row1:row2+1]:\n            for i in range(col1, col2+1):\n                row[i] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.matrix = rectangle\n        self.update = []\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.update.append((row1, col1, row2, col2, newValue))\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        ans = None\n        for i in range(len(self.update) - 1, -1, -1):\n            row1, col1, row2, col2, val = self.update[i]\n            if row1 <= row <= row2 and col1<= col <= col2:\n                ans = val\n                break\n        return ans if ans else self.matrix[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rec = rectangle\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        rec = self.rec\n        col_range = col1+col2-col1+1\n        for i in range(row2-row1+1):\n            recrow = rec[row1+i]\n            for j in range(col1, col_range):\n                recrow[j] = newValue\n\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rec[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.grid = rectangle\n        # make a new dictionary\n        self.rec = {}\n\\t\\t# with enumerate we can iterate through the list rectangle, \n\\t\\t# taking each row and its index\n        for i, row in enumerate(rectangle):\n\\t\\t\\t# we map each row to its index as it`s more space-efficent\n            self.rec[i] = row\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        # start = (row1, col1)\n        # end = (row2, col2)\n        # diffr = row2 - row1\n        # diffc = col2 - col1\n        \n        # self.grid[row1][col1] = newValue\n        \n        # for r in range(diffr+1):\n        #     for c in range(diffc+1):\n        #         self.grid[row1+r][col1+c] = newValue\n        # for i in range(row1, row2+1):\n        #     self.grid[i] = self.grid[i][:col1] + [newValue]*(col2-col1+1) + self.grid[col2+1:]\n        for i in range(row1, row2+1):\n\\t\\t\\t# we put new value only from col1 to col2, but we leave other columns as is\n            self.rec[i] = self.rec[i][:col1] + [newValue]*(col2-col1+1) + self.rec[i][col2+1:]\n\n    def getValue(self, row: int, col: int) -> int:\n        # return self.grid[row][col]\n        return self.rec[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)", "import numpy as np\nclass SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = np.array(rectangle)\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.rectangle[row1:row2+1,col1:col2+1] = newValue\n        #for i in range(row1,row2+1):\n            #for j in range(col1,col2+1):\n                #self.rectangle[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.q = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(row1, row2 + 1):\n            for col in range(col1, col2 + 1):\n                self.q[row][col] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.q[row][col] \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.q = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(row1, row2 + 1):\n            for col in range(col1, col2 + 1):\n                self.q[row][col] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.q[row][col] ", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n\\t\\t# make a new dictionary\n        self.rec = {}\n\\t\\t# with enumerate we can iterate through the list rectangle, \n\\t\\t# taking each row and its index\n        for i, row in enumerate(rectangle):\n\\t\\t\\t# we map each row to its index as it`s more space-efficent\n            self.rec[i] = row\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n\\t\\t# we want to put new value from row1 to row2, so we iterate through them\n        for i in range(row1, row2+1):\n\\t\\t\\t# we put new value only from col1 to col2, but we leave other columns as is\n            self.rec[i] = self.rec[i][:col1] + [newValue]*(col2-col1+1) + self.rec[i][col2+1:]\n\n    def getValue(self, row: int, col: int) -> int:\n\\t\\t# take row (of type list) from dictionary rec, take specified col from row\n        return self.rec[row][col]", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rect = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1,row2+1):\n            for j in range(col1,col2+1):\n                self.rect[i][j]=newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rect[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n        self.changes = []\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.changes.append((row1, col1, row2, col2, newValue))\n\n    def getValue(self, row: int, col: int) -> int:\n        for row1, col1, row2, col2, newValue in reversed(self.changes):\n            if row1 <= row <= row2 and col1 <= col <= col2:\n                return newValue\n        return self.rectangle[row][col]", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rect=  rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2+1):\n            for j in range(col1, col2+1):\n                self.rect[i][j] = newValue\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rect[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n        return\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:        \n        for i in range(row1, row2 + 1):\n            for j in range(col1, col2 + 1):\n                self.rectangle[i][j] = newValue\n        return\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2 + 1):\n            for j in range(col1, col2 + 1):\n                self.rectangle[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "# How do I handle input that is out of bounds of the rectangle?\n# Can the new value be negative or 0?\n# Give the same row values and col values\nclass SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1,row2+1):\n            for j in range(col1,col2+1):\n                self.rectangle[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n        self.rectangles = []\n        \n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range((row2-row1+1)):\n            for j in range(col2-col1+1):\n                self.rectangle[row1+i][col1+j]= newValue\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.grid = rectangle\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        start = (row1, col1)\n        end = (row2, col2)\n        diffr = row2 - row1\n        diffc = col2 - col1\n        \n        # self.grid[row1][col1] = newValue\n        \n        for r in range(diffr+1):\n            for c in range(diffc+1):\n                self.grid[row1+r][col1+c] = newValue\n        \n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.grid[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle= rectangle\n        \n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range((row2-row1+1)):\n            for j in range(col2-col1+1):\n                self.rectangle[row1+i][col1+j]= newValue\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        m,n = len(rectangle), len(rectangle[0])\n        self.mat = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2 + 1):\n            for j in range(col1, col2 + 1):\n                self.mat[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.mat[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rect = rectangle\n        self.patches = []\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.patches.append((row1,col1,row2,col2,newValue))\n        \n    def matchesPatch(self, row, col, patch):\n        return patch[0] <= row and row <= patch[2] and patch[1] <= col and col <= patch[3]\n\n    def getValue(self, row: int, col: int) -> int:\n        for patch in reversed(self.patches):\n            if self.matchesPatch(row, col, patch):\n                return patch[-1]\n        return self.rect[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = copy.deepcopy(rectangle)\n        \n        # Thanks for sharing. Just one observation: it's better and safer to deepcopy the rectangle in __init__ to prevent self.rectangle and rectangle from sharing the same memory. otherwise, changing rectangle, would change self.rectangle (object's rectangle) as they share same memory. Also passing the same rectangle to separate objects (in __init__) would mean they all share the same memory which is not what we would want. As such __init__ should change to:\n        # self.rectangle = copy.deepcopy(rectangle)\n        \n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2+1):\n            for j in range(col1, col2+1):\n                self.rectangle[i][j] = newValue\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries(object):\n\n    def __init__(self, rectangle):\n        self.rectangle = copy.deepcopy(rectangle)\n\n    def updateSubrectangle(self, row1, col1, row2, col2, newValue):\n        for i in range(row1, row2 + 1):\n            for j in range(col1, col2 + 1):\n                self.rectangle[i][j] = newValue\n        return self.rectangle\n\n    def getValue(self, row, col):\n        return self.rectangle[row][col]", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for r in range(row1, row2+1):\n            for c in range(col1, col2+1):\n                self.rectangle[r][c] = newValue\n            \n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row2 - row1 + 1):\n            for j in range(col2 - col1 + 1):\n                self.rectangle[row1 + i][col1 + j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "import numpy as np\nclass SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1,row2+1):\n            for j in range(col1,col2+1):\n                self.rectangle[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        for i in rectangle:\n            print(i)\n        print(\\\"\\\n\\\")\n        self.rectangle = rectangle\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        rec =self.rectangle\n        \n        for i in range(row1, row2 + 1):\n            row = []\n            for j in range(col1, col2 + 1):\n                rec[i][j] = newValue\n                row.append(rec[i][j])\n            \n\n            \n        \n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)", "import numpy as np \nclass SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2+1):\n            for j in range(col1, col2+1):\n                self.rectangle[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        \n        for row in range(row1, row2 + 1) : \n            for column in range(col1, col2 + 1) : \n                self.rectangle[row][column] = newValue \n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.r = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for x in range(row1, row2+1):\n            for y in range(col1, col2+1):\n                self.r[x][y] = newValue\n                \n        return None\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.r[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.orig = rectangle\n        self.updates =  []\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.updates.append((row1, col1, row2, col2, newValue))\n\n    def getValue(self, row: int, col: int) -> int:\n        for a, b,  c, d, v in reversed(self.updates):\n            if a <= row <= c and b <= col <= d:\n                return v\n        return self.orig[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.columns = len(rectangle[0])\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        initial = col1\n        while row1 <= row2 and col1 <= col2:\n            self.rectangle[row1][col1] = newValue\n            col1 += 1\n\n            if not col1 < self.columns or not col1 <= col2:\n                col1 = initial\n                row1 += 1\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n    \n", "import numpy as np\n\nclass SubrectangleQueries:\n\n    \n    \n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:        \n        for i in range(row2+1-row1):\n            for j in range(col2+1-col1):                \n                self.rectangle[row1+i][col1+j] = newValue               \n\n    def getValue(self, row: int, col: int) -> int:             \n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "import numpy as np \n\nclass SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = np.asarray(rectangle)\n        \n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.rectangle[row1:row2+1, col1:col2+1] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row, col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rect = rectangle\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(row1, row2+1):\n            for col in range(col1, col2+1):\n                self.rect[row][col] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rect[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.x=rectangle\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        i=row1\n        j=col1\n        while i<row2+1 and j<col2+1:\n            self.x[i][j]=newValue\n            if j==col2:\n                j=col1\n                i=i+1\n            else:\n                j=j+1      \n            \n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.x[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries(object):\n\n    def __init__(self, rectangle):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1, col1, row2, col2, newValue):\n        for i in range(row1, row2+1):\n            for j in range(col1, col2+1):\n                self.rectangle[i][j] = newValue\n\\t\\t\\t\\t\n    def getValue(self, row, col):\n        return self.rectangle[row][col]\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle=rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(row1, row2+1):\n            for col in range(col1, col2+1):\n                self.rectangle[row][col] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n        \n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1,row2+1):\n            for j in range(col1,col2+1):\n                self.rectangle[i][j] = newValue\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self. rec=rectangle\n        # for i in range(len(self.rectangle)):\n        #     a=[]\n        #     for j in range(len(self.rectangle[i])):\n        #         a.append(self.rectangle[i][j])\n        #     rec.append(a)\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, (row2+1)):\n            for j in range(col1, (col2+1)):\n                self.rec[i][j]=newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rec[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle=rectangle\n        \n\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1,row2+1):\n            for j in range(col1,col2+1):\n                self.rectangle[i][j]=newValue\n                \n        \n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle=rectangle\n        self.pos=[]\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.pos.append([row1,col1,row2,col2,newValue])\n        \n        \n\n    def getValue(self, row: int, col: int) -> int:\n        if(len(self.pos)==0):\n            return self.rectangle[row][col]\n        else:\n            t=-1\n            for p in self.pos:\n                row1,col1,row2,col2,val=p\n                if((row>=row1 and row<=row2) and (col>=col1 and col<=col2)):\n                    t=val\n        if(t==-1):\n            return self.rectangle[row][col]\n        return t\n                    \n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.r = rectangle \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2 + 1):\n            for j in range(col1, col2 + 1):\n                self.r[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.r[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.r = [[col for col in row] for row in rectangle]\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2+1):\n            for j in range(col1, col2+1):\n                self.r[i][j] = newValue\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.r[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(len(self.rectangle)):\n            if not row1 <= row <= row2:\n                continue\n            for col in range(len(self.rectangle[row])):\n                if not col1 <= col <= col2:\n                    continue\n                self.rectangle[row][col] = newValue\n\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2+1):\n            for j in range(col1, col2+1):\n                self.rectangle[i][j] = newValue\n    \n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "import numpy as np\n\nclass SubrectangleQueries:\n    def __init__(self, rectangle: List[List[int]]):\n        self.matrix = np.array(rectangle)\n        \n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        self.matrix[row1:row2+1, col1:col2+1] = newValue\n        \n    def getValue(self, row: int, col: int) -> int:\n        return self.matrix[row, col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n        print((self.rectangle))\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1,row2+1):\n            for j in range(col1, col2+1):\n                self.rectangle[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        # index into rectangle and change all values in subrectangle\n        # gonna have to loop through it\n        for row in range(len(self.rectangle)):\n            if row >= row1 and row <= row2:\n                for col in range(len(self.rectangle[0])):\n                    if col >= col1 and col <= col2:\n                        self.rectangle[row][col] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(row1, row2+1):\n            for col in range(col1, col2+1):\n                self.rectangle[row][col] = newValue\n        \n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2+1):\n            for j in range(col1, col2+1):\n                self.rectangle[i][j] = newValue\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle=rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1,row2+1):\n            for j in range(col1,col2+1):\n                self.rectangle[i][j]=newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.r = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2 + 1):\n            self.r[i][col1:col2+1] = [newValue] * (col2 - col1 + 1)\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.r[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "\\\"\\\"\\\"\nclass SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self._rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(row1, row2 + 1):\n            self._rectangle[row][col1:col2+1] = [newValue] * (col2 - col1 + 1)\n\n    def getValue(self, row: int, col: int) -> int:\n        return self._rectangle[row][col]\n\\\"\\\"\\\"        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n\nclass SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n\\t\\t# make a new dictionary\n        self.rec = {}\n\\t\\t# with enumerate we can iterate through the list rectangle, \n\\t\\t# taking each row and its index\n        for i, row in enumerate(rectangle):\n\\t\\t\\t# we map each row to its index as it`s more space-efficent\n            self.rec[i] = row\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n\\t\\t# we want to put new value from row1 to row2, so we iterate through them\n        for i in range(row1, row2+1):\n\\t\\t\\t# we put new value only from col1 to col2, but we leave other columns as is\n            self.rec[i] = self.rec[i][:col1] + [newValue]*(col2-col1+1) + self.rec[i][col2+1:]\n\n    def getValue(self, row: int, col: int) -> int:\n\\t\\t# take row (of type list) from dictionary rec, take specified col from row\n        return self.rec[row][col]", "class SubrectangleQueries:\n    rect=[]\n    \n    def __init__(self, rectangle: List[List[int]]):\n        r = len(rectangle)\n        c = len(rectangle[0])\n        self.rect = [[0 for i in range(c)] for j in range(r)]\n        for i in range(r):\n            for j in range(c):\n                self.rect[i][j]=rectangle[i][j]\n        \n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        r=row2-row1\n        c=col2-col1\n        for i in range(row1,row1+r+1):\n            for j in range(col1,col1+c+1):\n                self.rect[i][j]=newValue\n                \n    def getValue(self, row: int, col: int) -> int:\n        return self.rect[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rect = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        # time complexity O(n)\n        # space complexity O(1) since it's re-using the input matrix\n        for i in range(row1, row2+1):\n            for j in range(col1, col2+1):\n                self.rect[i][j] = newValue\n        \n    def getValue(self, row: int, col: int) -> int:\n        return self.rect[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2+1):\n            for k in range(col1, col2+1):\n                self.rectangle[i][k] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "import itertools\n\nclass SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.w = len(rectangle[0])\n        self.rectangle = list(itertools.chain.from_iterable(rectangle))\n        \n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        start, end = col1 + row1 * self.w, col2 + row2 * self.w\n        for i in range(col1,col2 + 1):\n            for j in range(row1, row2 + 1):\n                self.rectangle[i + j * self.w] = newValue\n\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[col + row * self.w]\n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.R = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(row1,row2+1):\n            self.R[row][col1:col2+1] = [newValue]*(col2-col1+1)\n        return None\n    \n    def getValue(self, row: int, col: int) -> int:\n        return self.R[row][col]\n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        self.rect = rectangle\n        self.height = len(self.rect)\n        self.width = len(self.rect[0])\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for row in range(row1, row2 + 1):\n            self.rect[row][col1:col2+1] = [newValue] * (col2 - col1 + 1)\n        \n\n    def getValue(self, row: int, col: int) -> int:\n        if row > self.height - 1 or col > self.width - 1:\n            return None\n        return self.rect[row][col]\n        \n        \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)\n", "class SubrectangleQueries:\n\n    def __init__(self, rectangle: List[List[int]]):\n        \n        self.rows=len(rectangle)\n        self.rectangle=rectangle\n        if self.rows!=0:\n              self.cols=len(rectangle[0])\n        else:\n             self.cols=0\n                \n                \n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        if row2>=row1 and col1<=col2 and row2<self.rows:\n                        for i in range(row1,row2+1):\n                                self.rectangle[i][col1:(col2+1)]=[newValue]*(col2-col1+1)\n        else:\n            print(\\\"Input Wrong\\\")\n                \n    def getValue(self, row: int, col: int) -> int:\n        if row<self.rows and col<self.cols:\n                row_select= self.rectangle[row]\n                return(row_select[col])\n        else:\n            print(\\\"Input Wrong\\\") \n\n\n# Your SubrectangleQueries object will be instantiated and called as such:\n# obj = SubrectangleQueries(rectangle)\n# obj.updateSubrectangle(row1,col1,row2,col2,newValue)\n# param_2 = obj.getValue(row,col)"]