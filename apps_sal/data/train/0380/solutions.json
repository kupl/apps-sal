["class Solution:\n     def validIPAddress(self, IP):\n         \"\"\"\n         :type IP: str\n         :rtype: str\n         \"\"\"\n         if \":\" in IP:\n             res = self.validIPv6(IP)\n             return \"IPv6\" if res else \"Neither\"\n         elif \".\" in IP:\n             res = self.validIPV4(IP)\n             return \"IPv4\" if res else \"Neither\"\n         else:\n             return \"Neither\"\n \n     def validIPV4(self, IP):\n         charSet = set(list(\"0123456789\"))\n         parts = IP.split(\".\")\n         if len(parts) != 4:\n             return False\n         for part in parts:\n             if len(part) < 1:\n                 return False\n             for c in part:\n                 if c not in charSet:\n                     return False\n             if not (0 <= int(part) <= 255):\n                 return False\n \n             if part[0] == '0' and len(part) > 1:  # invalid leading zero\n                 return False\n         return True\n \n     def validIPv6(self, IP):\n         charSet = set(list(\"0123456789abcdefABCDEF\"))\n         parts = IP.split(\":\")\n         if len(parts) != 8:\n             return False\n         zeroFlag = False\n         omtFlag = False\n         for part in parts:\n             if len(part) == 0:\n                 omtFlag = True\n \n             if self.allZero(part):\n                 zeroFlag = True\n \n             if len(part) > 4:\n                 return False\n \n             for c in part:\n                 if c not in charSet:\n                     return False\n         if zeroFlag and omtFlag:\n             return False\n         return True\n \n     def allZero(self, s):\n         for i in range(len(s)):\n             if s[i] != '0':\n                 return False\n         return True\n", "class Solution:\n     def validIPAddress(self, IP):\n         \n         def isIPv4(s):\n             try: return str(int(s)) == s and 0 <= int(s) <= 255\n             except: return False\n             \n         def isIPv6(s):\n             if len(s) > 4: return False\n             try: return int(s, 16) >= 0 and s[0] != '-'\n             except: return False\n \n         if IP.count(\".\") == 3 and all(isIPv4(i) for i in IP.split(\".\")): \n             return \"IPv4\"\n         if IP.count(\":\") == 7 and all(isIPv6(i) for i in IP.split(\":\")): \n             return \"IPv6\"\n         return \"Neither\"", "class Solution:\n     def validIPAddress(self, IP: str):\n         IP = IP.lower()\n         import re\n         if '.' in IP:\n             ip_parts = IP.split('.')\n             if len(ip_parts) == 4:\n                 for ip_part in ip_parts:\n                     if ip_part.startswith('0') and ip_part != '0':\n                         return 'Neither'\n                     if not (ip_part.isdigit() and 0 <= int(ip_part) <= 255):\n                         return 'Neither'\n                 return 'IPv4'\n             else:\n                 return 'Neither'\n         elif ':' in IP:\n             ip_parts = IP.split(':')\n             if len(ip_parts) == 8:\n                 for ip_part in ip_parts:\n                     if not re.match('^[0123456789abcdef]{1,4}$', ip_part):\n                         return 'Neither'\n                 return 'IPv6'\n             else:\n                 return 'Neither'\n         else:\n             return 'Neither'", "class Solution:\n     def isIPv4(self, IP):\n         IP = IP.split(\".\")\n         if len(IP) != 4:\n             return False\n         for ip in IP:\n             if not ip.isdigit():\n                 return False\n             if int(ip) > 255 or int(ip) < 0:\n                 return False\n             if str(int(ip)) != ip:\n                 return False\n         return True\n     def isIPv6(self, IP):\n         IP = IP.split(\":\")\n         if len(IP) != 8:\n             return False\n         for ip in IP:\n             ip = ip.lower()\n             for c in ip:\n                 if (not c>='0' or not c<='9') and (not c>='a' or not c<='f'):\n                     return False\n             if len(ip) > 4 or len(ip) == 0:\n                 return False\n             if int(ip,16) > 65535 or int(ip,16) < 0:\n                 return False\n         return True   \n     def validIPAddress(self, IP):\n         f1, f2 = 0, 0\n         if \":\" in IP:\n             f1 = 1\n         if \".\" in IP:\n             f2 = 1\n         if f1 and f2:\n             return \"Neither\"\n         if self.isIPv4(IP):\n             return \"IPv4\"\n         elif self.isIPv6(IP):\n             return \"IPv6\"\n         else:\n             return \"Neither\"\n         \"\"\"\n         :type IP: str\n         :rtype: str\n         \"\"\"\n", "class Solution:\n \n     def checkIPv4(self, IP):\n         IP = IP.lower().split(\".\")\n         if len(IP) != 4:\n             return False\n         for block in IP:\n             try:\n                 k = int(block)\n                 if (not 0 <= k <= 255) or (k > 0 and block[0] == '0') or \\\n                    (k == 0 and len(block) > 1):\n                     return False\n             except ValueError:\n                 return False\n         return True\n \n     def checkIPv6(self, IP):\n         IP = IP.lower().split(\":\")\n         if len(IP) != 8:\n             return False\n         for block in IP:\n             try:\n                 k = int(\"0x\" + block, 16)\n                 if (len(block) > 4) or (not 0 <= k <= 65535):\n                     return False\n             except ValueError:\n                 return False\n         return True\n     \n     def validIPAddress(self, IP):\n         \"\"\"\n         :type IP: str\n         :rtype: str\n         \"\"\"\n         if self.checkIPv4(IP):\n             return \"IPv4\"\n         elif self.checkIPv6(IP):\n             return \"IPv6\"\n         else:\n             return \"Neither\"", "class Solution(object):\n     \n     def ipv4(self,ip):\n         \n         l = ip.split('.')\n         if (len(l) != 4):\n             return False\n         for i in l:\n             #print (\"i\", i)\n             if ( len(i) > 1 and i[0]=='0'):\n                 return False\n             elif (   i.isdigit()    and  (0 <= int(i) <= 255) ):\n                 pass\n             else:\n                 return False\n         \n         return True\n     \n     def ipv6(self,ip):\n         #print (ip)\n         l = ip.split(':')\n         if (len(l) != 8):\n             return False \n         #print (l)\n         for i in l:\n             if ( len(i)>4 or len(i) == 0 ):\n                 return False\n             \n             validset = set(\"123456789abcdefABCDEF0\")\n             \n             for j in i:\n                 #print (j)\n                 if j in validset:\n                     pass\n                 else:\n                     return False\n                 \n         return True\n             \n             \n     \n     \n     def validIPAddress(self, IP):\n         \"\"\"\n         :type IP: str\n         :rtype: str\n         \"\"\"\n         if(self.ipv4(IP)):\n             return \"IPv4\"  \n     \n         if(self.ipv6(IP)):\n             return \"IPv6\"\n \n         \n         \n         return \"Neither\"\n              \n         \n         \n", "class Solution:\n     def validIPAddress(self, IP):\n         \"\"\"\n         :type IP: str\n         :rtype: str\n         \"\"\"\n         def is_hex(s):\n             hex_digits = set(\"0123456789abcdefABCDEF\")\n             for char in s:\n                 if not (char in hex_digits):\n                     return False\n             return True\n         ary = IP.split('.')\n         if len(ary) == 4:\n             for i in range(len(ary)):\n                 if not ary[i].isdigit() or not 0 <= int(ary[i]) < 256 or (ary[i][0] == '0' and len(ary[i]) > 1):\n                     return \"Neither\"\n             return \"IPv4\"\n         ary = IP.split(':')\n         if len(ary) == 8:\n             for i in range(len(ary)):\n                 tmp = ary[i]\n                 if len(tmp) == 0 or not len(tmp) <= 4 or not is_hex(tmp):    \n                     return \"Neither\"\n             return \"IPv6\"\n         return \"Neither\"\n", "class Solution:\n     def validIPAddress(self, IP):\n         \"\"\"\n         :type IP: str\n         :rtype: str\n         \"\"\"\n         def is_hex(hexs):\n             hex_set = set('0123456789abcdefABCDEF')\n             return set(hexs)<hex_set\n         \n         result = 'Neither'\n         if '.' in IP:\n             sub_str = IP.split('.')\n             if len(sub_str)!=4:\n                 return result\n             result = 'IPv4'\n         elif ':' in IP:\n             sub_str = IP.split(':')\n             if len(sub_str) != 8:\n                 return result\n             result = 'IPv6'\n         else:\n             return result\n         for sub in sub_str:\n             if result == 'IPv4':\n                 if not sub.isdigit():\n                     result = 'Neither'\n                     break                \n                 if len(str(int(sub)))!=len(sub) or int(sub)>255:\n                     result = 'Neither'\n                     break\n             if result == 'IPv6':\n                 if len(sub)>4 or len(sub)==0 or not is_hex(sub):\n                     result = 'Neither'\n                     break\n                     \n         return result\n", "class Solution:\n     def validIPAddress(self, IP):\n         \"\"\"\n         :type IP: str\n         :rtype: str\n         \"\"\"\n         if len(IP)<4:\n             return 'Neither'\n         if len(IP.split('.'))==4:\n             for i in IP.split('.'):\n                 if len(i)==0:\n                     return 'Neither'\n                 elif not i.isdigit():\n                     return 'Neither'\n                 elif not 0<=int(i)<=255:\n                     return 'Neither'\n                 elif (i[0]=='0') & (len(i)>1):\n                     return 'Neither'\n             return 'IPv4'\n         elif (len(IP.split(':'))==8) & (IP[0]!='0'):\n             hex=set('0123456789abcdefABCDEF')\n             for i in IP.split(':'):\n                 if len(i)==0 or len(i)>4:\n                     return 'Neither'\n                 elif any([j not in hex for j in i]):\n                     return 'Neither'\n                 #elif (len(i)>1) & (all([j =='0' for j in i])):\n                 #    return 'Neither'\n             return 'IPv6'\n         else:\n             return 'Neither'\n", "class Solution:\n     def validIPAddress(self, IP):\n         \"\"\"\n         :type IP: str\n         :rtype: str\n         \"\"\"\n         ans = 'Neither'\n         if '.' in IP:\n             seg = IP.split('.')\n             if len(seg) == 4:\n                 if all(s.isdigit() and 0 <= int(s) < 256 and not (s[0] == '0' and len(s) > 1) for s in seg):\n                     ans = 'IPv4'\n         elif ':' in IP:\n             seg = IP.split(':')\n             if len(seg) == 8:\n                 if all(0 < len(s) <= 4 and all(c in string.hexdigits for c in s) for s in seg):\n                     ans = 'IPv6'\n         return ans\n"]