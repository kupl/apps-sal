["\ndef solve(s):\n    n = len(s)\n\n    for i in range(n):\n        s2 = s[i:] + s[:i]\n        # print(s2)\n        if s != s2 and s2[::-1] == s2:\n            return 1\n\n    for i in range( (n // 2) + 1, n):\n        if s[i] != s[0]:\n            return 2\n        # print(s[i])\n    return \"Impossible\"\n\ns = input()\nprint(solve(s))\n", "import sys\n\ns = input()\nn = len(s)\n\nfor i in range(n):\n\tt =  s[i:] + s[:i] \n\tif t != s and t == t[::-1]:\n\t\tprint(1)\n\t\treturn\n\nif s[:n//2] != s[n-n//2:]:\n\tprint(2)\n\treturn\n\nis4 = True\n\nfor i in range(n):\n\tif not (n % 2 == 1 and i == n//2):\n\t\tif s[i] != s[0]:\n\t\t\tis4 = False\n\nif is4 == False:\n\tprint(2)\nelse:\n\tprint(\"Impossible\")\n\n", "def isPal(x):\n    for i in range(len(x)//2):\n        if x[i] != x[len(x)-1-i]: return False\n    return True\n\ns = list(input())\nf = {}\nfor c in s:\n    if c in f: f[c] += 1\n    else: f[c] = 1\nif len(f) == 1:\n    print(\"Impossible\")\n    return\nelif len(f) == 2:\n    if 1 in f.values():\n        print(\"Impossible\")\n        return\nif len(s) % 2 == 0:\n    for i in range(1, len(s)):\n        new = s[i:]+s[:i]\n        if s != new:\n            if isPal(new):\n                print(1)\n                return\nprint(2)", "from collections import Counter\nn = input()\nif len(Counter(n)) == 1 or len(Counter(n[:len(n)//2]+n[len(n)//2+1:])) == 1:\n    print(\"Impossible\")\n    return\nfor i in range(1,len(n)):\n    s1 = n[:i]\n    s2 = n[i:]\n    s3 = s2+s1\n    if s3[len(n)//2:] == s3[:-len(n)//2][::-1] and s3 != n:\n        print(1)\n        return\n\nprint(2)\n\n\n", "def isPalindrom(s, n):\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            return False\n    return True\n\ndef solve(s):\n    if len(s) % 2 == 0:\n        temp = s[0] * len(s)\n        if s == temp:\n            return \"Impossible\"\n    elif len(s) == 1:\n        return \"Impossible\"\n    else:\n        c = s[0]\n        mid = s[len(s)//2]\n        temp = c * (len(s)//2) + mid + c * (len(s)//2)\n        if temp == s:\n            return \"Impossible\"\n    n = len(s)\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            temp = s[i:] + s[:i]\n            if temp != s and isPalindrom(temp,n):\n                return 1\n    return 2\n\ns = input()\nprint(solve(s))\n", "import sys\nstring=input()\nn=len(string)\nc=string[0]\nif all(c==string[i] for i in range(n//2)) and all(c==string[i] for i in range((n+1)//2,n)):\n    print(\"Impossible\")\n    return\n\nfor i in range(1,n):\n    part=string[i:]+string[:i]\n    if part==part[::-1] and part!=string:\n        print(1)\n        return\nprint(2)\n", "s = input()\nN = len(s)\nif len(set(list(s))) == 1:\n    print('Impossible')\nelse:\n    if len(set(list(s))) == 2:\n        t = list(set(list(s)))\n        k1, k2 = t[0], t[1]\n        if s.count(k1) == N - 1 or s.count(k2) == N - 1:\n            print('Impossible')\n            return\n\n    t = s\n    for i in range(N):\n        t = t[1:] + t[0]\n        if t != s and t[::-1] == t:\n            print(1)\n            return\n\n    print(2)", "s = input()\nn = len(s)\n\nif n <= 2:\n    print('Impossible')\n    return\n\nif len(s) % 2 == 1:\n    s = s[:n//2] + s[n//2 + 1:]\n    if len(set(s)) == 1:\n        print('Impossible')\n        return\n    print(2)\n    return\n\nif len(set(s)) == 1:\n    print('Impossible')\n    return\n\nfor i in range(0, n):\n    cut = s[:i]\n    orig = s[i:]\n    pal = orig + cut\n    if pal == pal[::-1] and pal != s:\n        print(1)\n        return\n\nprint(2)\nreturn\n", "def pallin(s):\n    n= len(s)\n    for i in range(0,n//2):\n        if s[i]!=s[n-i-1]:\n            return False\n    \n    return True\n\n\ndef __starting_point():\n    s= input()\n    #print(s)\n    #print(pallin(s))\n    n= len(s)\n    for i in range(n-1,0,-1):\n        s1= s[0:i]\n        s2= s[i:]\n        t= s2+s1\n        #print(s1)\n        #print(s2)\n        #print(t)\n        if s!=t and pallin(t):\n            print(\"1\")\n            return\n        \n    for i in range(1,n//2):\n        if s[i]!=s[i-1]:\n            print(\"2\")\n            return\n    \n    \n \n    print(\"Impossible\")\n__starting_point()", "import sys\nimport math\nfrom collections import defaultdict\ndef is_pal(s):\n    i,j=0,len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\ns=sys.stdin.readline()[:-1]\nn=len(s)\n#print(n,'n')\nif n%2==0:\n    z=True\n    for i in range(n//2-1):\n        if s[i]!=s[i+1]:\n            z=False\n            break\n    if z:\n        print('Impossible')\n    else:\n        for i in range(n//2):\n            #print(s[i+1:]+s[:i+1])\n            if is_pal(s[i+1:]+s[:i+1]) and s[i+1:]+s[:i+1]!=s:\n                print(1)\n                return\n        print(2)\nelse:\n    z=True\n    for i in range(n//2-1):\n        if s[i]!=s[i+1]:\n            z=False\n            break\n    if z:\n        print('Impossible')\n    else:\n        print(2)\n", "def isPalindrome(s): \n    return s == s[::-1]\ns=input()\nr=0\nfor i in set(s):\n    r=max(r,s.count(i))\n#print(r)\nif len(set(s))==1 or len(s)<=3:\n    print(\"Impossible\")\nelif r>=len(s)-1:\n    print(\"Impossible\")\nelse:\n    fl=0 \n    for i in range(len(s)):\n        e=s[0:i]\n        f=s[i:]\n        e=f+e\n        #print(e)\n        #fl=0\n        if isPalindrome(e) and e!=s:\n            fl=1 \n            print(1)\n            break\n    if fl==0:\n        print(2)", "import sys\nfrom math import *\nfrom fractions import gcd\nreadints=lambda:map(int, input().strip('\\n').split())\n \n \ndef ispal(s):\n    n=len(s)\n    for i in range(n//2):\n        if s[i]!=s[n-i-1]:\n            return False\n    return True\n \ns=input()\nn=len(s)\n \n \n    \n \nfor i in range(1,n):\n    a,b=s[:i],s[i:]\n    t=b+a\n    if t!=s and ispal(t):\n        print(1)\n        return\n \n \nk=n/2\nif n%2==1:\n    k=ceil(k)\n \n \nk=int(k)\n        \nfor i in range(1,k):\n    a,b,c=s[:i],s[i:-i],s[-i:]\n    t=c+b+a\n    if t!=s and ispal(t):\n        print(2)\n        return\n \n \n \nprint(\"Impossible\")"]