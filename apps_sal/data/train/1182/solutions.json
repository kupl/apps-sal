["\ndef interesting_nums(m):\n nums = []\n for x in range(m + 1, 2 * m + 1):\n  if x * m % (x - m) == 0:\n   nums.append(x)\n\n return nums\n\n\ndef main():\n\n T = int(input())\n\n for _ in range(T):\n  num_list = interesting_nums(int(input()))\n  print(len(num_list))\n\n  for num in num_list:\n   print(num)\n\n\nmain()", "\ndef interesting_nums(m):\n nums = []\n for x in range(m + 1, 2 * m + 1):\n  if x * m % (x - m) == 0:\n   nums.append(x)\n\n return nums\n\n\ndef main():\n\n T = int(input())\n\n for _ in range(T):\n  num_list = interesting_nums(int(input()))\n  print(len(num_list))\n\n  for num in num_list:\n   print(num)\n\n\nmain()", "\nt=int(input())\nm=[int(input()) for i in range(t)]\nprint(\"\")\nfor i in m:\n arr=[]\n count=0\n for a in range(i+1,i*2+1):\n  inpX=(i*a)/(a-i)\n  if inpX>=a and (i*a)%(a-i)==0:\n   count=count+1\n   arr.append(a)\n print(count)\n for j in arr:\n  print(j)\n \n\n", "t=int(input())\nm=[int(input()) for i in range(t)]\nfor i in m:\n c=0\n ANS=[]\n for a in range(i+1,2*i+1,1):\n  intp=a*i/(a-i)\n  if intp>=a and a*i%(a-i)==0:\n   c=c+1\n   ANS.append(a)\n print(c)\n for j in ANS:\n  print(j)\n", "import sys \n \nsys.setrecursionlimit(10**8) \nt=int(input())\nm=[int(input()) for i in range(t)]\n\n \ndef rec(a,m,list1):\n\n b=a*m/(a-m)\n if b>=a and a*m%(a-m)==0 and a<=2*m:\n  \n  list1.append(a)\n  a=a+1\n  \n  rec(a,m,list1)\n  \n else:\n  if a<=2*m:\n   a=a+1\n \n   rec(a,m,list1)\n   \n  \n \n \nfor i in m:\n c=0\n \n \n a=i+1\n ANS=[]\n rec(a,i,ANS)\n \n print(len(ANS))\n ANS.sort()\n for j in ANS:\n  print(j)\n    \n   \n    \n    \n", "import sys \n \nsys.setrecursionlimit(10**8) \nt=int(input())\nm=[int(input()) for i in range(t)]\n\n \ndef rec(a,m,list1):\n\n b=a*m/(a-m)\n if b>=a and a*m%(a-m)==0 and a<=2*m:\n  \n  list1.append(a)\n  a=a+1\n  \n  rec(a,m,list1)\n  \n else:\n  if a<=2*m:\n   a=a+1\n \n   rec(a,m,list1)\n   \n  \n \n \nfor i in m:\n c=0\n \n \n a=i+1\n ANS=[]\n rec(a,i,ANS)\n \n print(len(ANS))\n ANS.sort()\n for j in ANS:\n  print(j)\n    \n   \n    \n    \n", "t=int(input())\nm=[int(input()) for i in range(t)]\n \nfor i in m:\n c=0\n ANS=[]\n if i%2!=0:\n  for a1 in range(i+1,2*i+1,2):\n   intp=a1*i/(a1-i)\n   if intp>=a1 and a1*i%(a1-i)==0:\n    c=c+1\n    ANS.append(a1)\n \n else:\n  for a1 in range(i+1,2*i+1,1):\n   intp=a1*i/(a1-i)\n   if intp>=a1 and a1*i%(a1-i)==0:\n    c=c+1\n   \n    ANS.append(a1)\n \n ANS.sort()\n \n print(c)\n for j in ANS:\n  print(j)\n    \n   \n    \n    \n", "from math import sqrt\ndef sol(p, m):\n if p == s:\n  ans.append(m + N)\n  return\n __pow = 1\n for i in range(ls[p][1] + 1):\n  if m > N // __pow:break\n  sol(p + 1, m * __pow)\n  __pow *= ls[p][0]\nfor _ in range(int(input())):\n n = int(input())\n N, sq,ls,ans = n, int(sqrt(n)),list(),list()\n for i in range(2, sq+1):\n  if n % i == 0:\n   Count = 0\n   while n % i == 0:\n    Count += 2\n    n //= i\n   ls.append([i, Count])\n if n != 1:ls.append([n, 2])\n s = len(ls)\n sol(0, 1)\n ans.sort()\n print(len(ans))\n print(*ans, sep = '\\n')\n", "# cook your dish here\nfrom math import sqrt\ndef sol(p, m):\n if p == s:\n  ans.append(m + N)\n  return\n __pow = 1\n for i in range(ls[p][1] + 1):\n  if m > N // __pow:break\n  sol(p + 1, m * __pow)\n  __pow *= ls[p][0]\nfor _ in range(int(input())):\n n = int(input())\n N, sq,ls,ans = n, int(sqrt(n)),list(),list()\n for i in range(2, sq+1):\n  if n % i == 0:\n   Count = 0\n   while n % i == 0:\n    Count += 2\n    n //= i\n   ls.append([i, Count])\n if n != 1:ls.append([n, 2])\n s = len(ls)\n sol(0, 1)\n ans.sort()\n print(len(ans))\n print(*ans, sep = '\\n')", "from math import sqrt\ndef sol(p, m):\n if p == s:\n  ans.append(m + N)\n  return\n __pow = 1\n for i in range(ls[p][1] + 1):\n  if m > N // __pow:break\n  sol(p + 1, m * __pow)\n  __pow *= ls[p][0]\nfor _ in range(int(input())):\n n = int(input())\n N, sq,ls,ans = n, int(sqrt(n)),list(),list()\n for i in range(2, sq+1):\n  if n % i == 0:\n   Count = 0\n   while n % i == 0:\n    Count += 2\n    n //= i\n   ls.append([i, Count])\n if n != 1:ls.append([n, 2])\n s = len(ls)\n sol(0, 1)\n ans.sort()\n print(len(ans))\n print(*ans, sep = '\\n')\n", "from math import sqrt\ndef sol(p, m):\n if p == s:\n  ans.append(m + N)\n  return\n __pow = 1\n for i in range(ls[p][1] + 1):\n  if m > N // __pow:break\n  sol(p + 1, m * __pow)\n  __pow *= ls[p][0]\nfor _ in range(int(input())):\n n = int(input())\n N, sq,ls,ans = n, int(sqrt(n)),list(),list()\n for i in range(2, sq+1):\n  if n % i == 0:\n   Count = 0\n   while n % i == 0:\n    Count += 2\n    n //= i\n   ls.append([i, Count])\n if n != 1:ls.append([n, 2])\n s = len(ls)\n sol(0, 1)\n ans.sort()\n print(len(ans))\n print(*ans, sep = '\\n')", "# cook your dish here\nfor i in range(int(input())):\n m=int(input())\n l=[]\n p=m**2 \n ans=0\n for i in range(1,m+1):\n  if(p%i==0):\n   ans+=1 \n   l.append(i+m)\n print(ans)\n for i in l:\n  print(i)", "n =[]\nfor i in range(int(input())):\n n.append(int(input()))\nfor m in n:\n r=[]\n c=0\n for a in range(m+1, 2*m+1):\n  b = (a*m)//(a-m)\n  if (a*b%m==0):\n   c+=1\n   r.append(a)\n print(c)\n for a in r:\n  print(a)", "# cook your dish here\nfrom math import sqrt\ndef prime_facs(n):\n l=[1]\n for i in range(2,int(sqrt(n))+1):\n  if n%i==0:\n   l.append(i)\n return l\nfor a0 in range(int(input())):\n n=int(input())\n x=prime_facs(n**2)\n print(len(x))\n for i in x:\n  print(i+n)\n", "from math import sqrt\ndef sol(p, m):\n if p == s:\n  ans.append(m + N)\n  return\n __pow = 1\n for i in range(ls[p][1] + 1):\n  if m > N // __pow:\n   break\n  sol(p + 1, m * __pow)\n  __pow *= ls[p][0]\n\nfor _ in range(int(input())):\n n = int(input())\n N, sq = n, int(sqrt(n))\n ls = list()\n ans = list()\n for i in range(2, sq+1):\n  if n % i == 0:\n   Count = 0\n   while n % i == 0:\n    Count += 2\n    n //= i\n   ls.append([i, Count])\n if n != 1:\n  ls.append([n, 2])\n s = len(ls)\n sol(0, 1)\n ans.sort()\n print(len(ans))\n print(*ans, sep = '\\n')\n", "# cook your dish here\nfor i in range(int(input())):\n m=int(input())\n l=[]\n p=m**2 \n ans=0\n for i in range(1,m+1):\n  if(p%i==0):\n   ans+=1 \n   l.append(i+m)\n print(ans)\n for i in l:\n  print(i)", "\nT = int(input())\n\nfor t in range(T):\n M = int(input())\n A = []\n for a in range(M+1, 2*M+1):\n  b = (a*M)/(a-M)\n  if float(a+b).is_integer() == True and a <= b:\n   A.append(a)\n\n print(len(A))\n for i in range(len(A)):\n  print(A[i])\n\n", "\nT = int(input())\n\nfor t in range(T):\n M = int(input())\n A = []\n for a in range(M+1, 2*M+1):\n  if float((a*a)/(a-M)).is_integer() == True and (a*M)/(a-M) > 0:\n   A.append(a)\n\n print(len(A))\n for i in range(len(A)):\n  print(A[i])", "T = int(input())\n\nfor t in range(T):\n M = int(input())\n A = []\n for a in range(M+1, 2*M+1):\n  b = (a*M)/(a-M)\n  if float(a+b).is_integer() == True and b > 0:\n   A.append(a)\n\n print(len(A))\n for i in range(len(A)):\n  print(A[i])\n", "\nT = int(input())\n\nfor t in range(T):\n M = int(input())\n A = []\n for a in range(2*M+1):\n  if a != M:\n   b = (a*M)/(a-M)\n   if (a*b) % M == 0 and b > 0:\n    A.append(a)\n print(len(A))\n for i in range(len(A)):\n  print(A[i])", "import sys\nsys.setrecursionlimit(10**9)\nt=int(input())\nprime=[]\nind=2\naa=[-1]*(10**7+5)\ndef func(ind,prod):\n nonlocal p,ss,ll\n if ind==len(p) :\n  ll.append(prod)\n  return ''\n po=prod\n for i in range(p[ind][1]+1):\n  #  print(po,i,ind)\n  if po>m:\n   break\n  func(ind+1,po)\n  po*=p[ind][0]\n \n \n \nwhile ind<10**7+5:\n if aa[ind-1]==-1:\n  prime.append(ind)\n  aa[ind-1::ind]=[0]*len(aa[ind-1::ind])\n ind+=1\n \nfor _ in range(t):\n m=int(input())\n p=[]\n ind=0\n mm=int(m**0.5)\n n=m\n while prime[ind]<=mm+1:\n  count=0\n  while True:\n   if n%prime[ind]==0:\n    count+=2\n    n//=prime[ind]\n   else:\n    break\n  if count>0:\n   p.append([prime[ind],count])\n  ind+=1\n  if ind==len(prime):\n   break\n if n!=1:\n  p.append([n,2])\n\n # print(p)\n ss=[]\n ll=[]\n \n func(0,1)\n ll.sort()\n print(len(ll))\n for i in ll:\n  print(i+m)\n \n   \n", "import sys\nsys.setrecursionlimit(10**9)\nt=int(input())\nprime=[]\nind=2\naa=[-1]*(10**4)\ndef func(ind,prod):\n nonlocal p,ss,ll\n if ind==len(p) :\n  ll.append(prod)\n  return ''\n po=prod\n for i in range(p[ind][1]+1):\n  #  print(po,i,ind)\n  if po>m:\n   break\n  func(ind+1,po)\n  po*=p[ind][0]\n \n \n \nwhile ind<10**4:\n if aa[ind-1]==-1:\n  prime.append(ind)\n  aa[ind-1::ind]=[0]*len(aa[ind-1::ind])\n ind+=1\n \nfor _ in range(t):\n m=int(input())\n p=[]\n ind=0\n mm=int(m**0.5)\n n=m\n while prime[ind]<=mm+1:\n  count=0\n  while True:\n   if n%prime[ind]==0:\n    count+=2\n    n//=prime[ind]\n   else:\n    break\n  if count>0:\n   p.append([prime[ind],count])\n  ind+=1\n  if ind==len(prime):\n   break\n if n!=1:\n  p.append([n,2])\n\n # print(p)\n ss=[]\n ll=[]\n \n func(0,1)\n ll.sort()\n print(len(ll))\n for i in ll:\n  print(i+m)\n \n   \n", "import sys\nsys.setrecursionlimit(10**9)\nt=int(input())\nprime=[]\nind=2\naa=[-1]*(10**4)\ndef func(ind,prod):\n nonlocal p,ss,ll\n if ind==len(p) :\n  ll.append(prod)\n  return ''\n po=prod\n for i in range(p[ind][1]+1):\n  #  print(po,i,ind)\n  if po>m:\n   break\n  func(ind+1,po)\n  po*=p[ind][0]\n \n \n \nwhile ind<10**4:\n if aa[ind-1]==-1:\n  prime.append(ind)\n  aa[ind-1::ind]=[0]*len(aa[ind-1::ind])\n ind+=1\n \nfor _ in range(t):\n m=int(input())\n p=[]\n ind=0\n mm=int(m**0.5)\n n=m\n while prime[ind]<=mm+1 and ind<len(prime):\n  count=0\n  while True:\n   if n%prime[ind]==0:\n    count+=2\n    n//=prime[ind]\n   else:\n    break\n  if count>0:\n   p.append([prime[ind],count])\n  ind+=1\n if n!=1:\n  p.append([n,2])\n\n # print(p)\n ss=[]\n ll=[]\n \n func(0,1)\n ll.sort()\n print(len(ll))\n for i in ll:\n  print(i+m)\n \n   \n", "import sys,math\nsys.setrecursionlimit(10**9)\nt=int(input())\nprime=[]\nind=2\naa=[-1]*(10**4)\ndef func(ind,prod):\n nonlocal p,ss,ll\n if ind==len(p) :\n  ll.append(prod)\n  return ''\n po=prod\n for i in range(p[ind][1]+1):\n  #  print(po,i,ind)\n  if po>m:\n   break\n  func(ind+1,po)\n  po*=p[ind][0]\n \n \n \nwhile ind<10**4:\n if aa[ind-1]==-1:\n  prime.append(ind)\n  aa[ind-1::ind]=[0]*len(aa[ind-1::ind])\n ind+=1\n \nfor _ in range(t):\n m=int(input())\n p=[]\n ind=0\n mm=int(m**0.5)\n n=m\n for i in range(2,int(math.sqrt(m))+1):\n  if n % i == 0:\n   Count = 0\n   while n % i == 0:\n    Count += 2\n    n //= i\n   p.append([i, Count])\n if n!=1:\n  p.append([n,2])\n\n # print(p)\n ss=[]\n ll=[]\n \n func(0,1)\n ll.sort()\n print(len(ll))\n for i in ll:\n  print(i+m)\n \n   \n", "import sys\nsys.setrecursionlimit(10**9)\nt=int(input())\nprime=[]\nind=2\naa=[-1]*(10**4)\ndef func(ind,prod):\n nonlocal p,ss,ll\n if ind==len(p) :\n  ll.append(prod)\n  return ''\n po=prod\n for i in range(p[ind][1]+1):\n  #  print(po,i,ind)\n  if po>m:\n   break\n  func(ind+1,po)\n  po*=p[ind][0]\n \n \n \nwhile ind<10**4:\n if aa[ind-1]==-1:\n  prime.append(ind)\n  aa[ind-1::ind]=[0]*len(aa[ind-1::ind])\n ind+=1\n \nfor _ in range(t):\n m=int(input())\n p=[]\n ind=0\n mm=int(m**0.5)\n n=m\n while prime[ind]<=mm+1:\n  count=0\n  while True:\n   if n%prime[ind]==0:\n    count+=2\n    n//=prime[ind]\n   else:\n    break\n  if count>0:\n   p.append([prime[ind],count])\n  ind+=1\n if n!=1:\n  p.append([n,2])\n\n # print(p)\n ss=[]\n ll=[]\n \n func(0,1)\n ll.sort()\n print(len(ll))\n for i in ll:\n  print(i+m)\n \n   \n"]