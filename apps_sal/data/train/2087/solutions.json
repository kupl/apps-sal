["3\n\nimport sys\n\nn, l, r, ql, qr = list(map(int, sys.stdin.readline().strip().split()))\nw = [int(x) for x in sys.stdin.readline().strip().split()]\n\ns = [0]\nfor i in range(0, n):\n    s.append(s[-1] + w[i])\n\ndef cost(left):\n    right = n - left\n    diff = left - right\n    bonus = 0\n    if diff > 0: # left part is larger\n        bonus = ql * (diff - 1)\n    elif diff < 0: # right part is larger\n        bonus = qr * (-diff - 1)\n    return bonus + l * s[left] + r * (s[n] - s[left])\n\nbest = cost(0)\nfor left in range(1, n+1):\n    c = cost(left)\n    if c < best:\n        best = c\n\nprint(best)\n", "path = list(map(int, input().split()))\nn, L, R, QL, QR = path[0], path[1], path[2], path[3], path[4]\nw = list(map(int, input().split()))\n\nsumpref = [0]\nfor i in range(1, n + 1) :\n    sumpref.append(w[i - 1] + sumpref[i - 1])\n\nanswer = QR * (n - 1) + sumpref[n] * R\n\nfor i in range(1, n + 1) :\n    energy = L * sumpref[i] + R * (sumpref[n] - sumpref[i])\n    if i > (n - i) :\n        energy += (i - (n - i) - 1) * QL\n    elif (n - i) > i :\n        energy += ((n - i) - i - 1) * QR\n    if answer > energy:\n        answer = energy\n\nprint(answer)", "n, l, r, ql, qr = map(int, input().split())\nw = [0] + list(map(int, input().split()))\nfor i in range(1, n + 1):\n    w[i] += w[i - 1]\ns = w[n]\nprint(min(l * w[i] + r * (s - w[i]) + ql * max(0, 2 * i - n - 1) + qr * max(0, n - 2 * i - 1) for i in range(n + 1)))", "n, l, r, Ql, Qr = map(int, input().split())\ns, v = [0] * (n + 1), 2 * 10 ** 9\nfor i, wi in enumerate(map(int, input().split())):\n    s[i + 1] = s[i] + wi\nfor lc in range(0, n + 1):\n    rc = n - lc\n    c = s[lc] * l + (s[n] - s[lc]) * r\n    if lc > rc + 1:\n        c += (lc - rc - 1) * Ql\n    elif rc > lc + 1:\n        c += (rc - lc - 1) * Qr\n    v = min(v, c)\nprint(v)", "def main():\n    n, l, r, Ql, Qr = list(map(int, input().split()))\n    ww = list(map(int, input().split()))\n    work = sum(ww) * r + (n - 1) * Qr\n    res, penalty = [work], Qr * 2\n    l -= r\n    for w in ww[:(n - 1) // 2]:\n        work += l * w - penalty\n        res.append(work)\n    penalty = Ql * 2\n    work += l * ww[(n - 1) // 2]\n    if n & 1:\n        res.append(work)\n    else:\n        work -= Qr\n        res.append(work)\n        work -= Ql\n    for w in ww[(n + 1) // 2:]:\n        work += l * w + penalty\n        res.append(work)\n    print(min(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#print(\"Allah is the most gracious and the Most Marchiful\")\n\nnum,l,r,ql,qr,=list(map(int, input().split()))\nara=[int(i) for i in input().split()]\nfor i  in range(1,num,1):\n    ara[i]=ara[i]+ara[i-1]\n\nans=10**11\n\nfor i in range(0,num+1,1):\n   tr=num-i\n   cl=ara[i-1] if i>0  else 0\n   cr=ara[num-1]-cl\n   pl=max(0,i-tr-1)\n   pr=max(0,tr-i-1)\n   tans=pl*ql+pr*qr+cl*l+cr*r\n   ans=min(ans,tans)\n\nprint(ans)\n", "n, l, r, Ql, Qr = [int(x) for x in input().split(' ')]\nw = [int(x) for x in input().split(' ')];\nsum = [0 for x in range(n+1)];\nfor i in range(1, n+1):\n\tsum[i] = sum[i-1] + w[i-1];\nans = 2**32;\nfor k in range(0, n+1):\n\ttemp = sum[k]*l + (sum[n] - sum[k])*r;\n\tif (2*k > n):\n\t\ttemp += (2*k-n-1)*Ql;\n\telif (2*k < n):\n\t\ttemp += (n-2*k-1)*Qr;\n\tans = min(ans, temp);\nprint(ans);", "n, l, r, q1, q2 = list(map(int, input().split()))\nitem = list(map(int, input().split()))\n\npre = [item[0]] + [ 0 for i in range(1, n)]\nsuf = [ 0 for i in range(0, n-1)] + [item[n-1], 0]\nfor i in range(1, n): pre[i] = pre[i-1] + item[i]\nfor i in range(n-2, -1, -1): suf[i] = suf[i+1] + item[i]\n\n# print(pre, suf)\nans = 1e20\nfor i in range(0, n):\n    a, b = i+1, n-i-1\n    c = pre[i]*l + suf[i+1]*r + (q1*(a-b-1) if a>b else q2*(b-a-1) if b>a else 0)\n    # print(c)\n    ans = min(ans, c)\nans = min(ans,  suf[0]*r + q2*(n-1))\nprint(ans)\n", "n, l, r, ql, qr = list(map(int, input().split()))\n\nw = list(map(int, input().split()))\n\nansw = 0\nfirst = 0\nlast = sum(w)\n\nansw = last * r + (len(w) - 1) * qr\n\nfor i in range(n):\n    first += w[i]\n    last -= w[i]\n    tmp = first * l + last * r\n    if i + 1 > n - i - 1:\n        tmp += ql * (i + 1 - n + i + 1 - 1)\n    elif i + 1 < n - i - 1:\n        tmp += qr * (n - 2 * i - 3)\n    answ = min(answ, tmp)\n\nprint(answ)\n", "n, l, r, ql, qr = list(map(int, input().split()))\nw = list(map(int, input().split()))\nprefix = [0]\nsuffix = [sum(w)]\nfor i in range(n):\n  prefix.append(prefix[i] + w[i])\n  suffix.append(suffix[i] - w[i])\n\nm = 1e10\nfor i in range(n+1):\n  res = l*prefix[i] + r*suffix[i]\n  if (i > n - i):\n    res += (2*i - n - 1) * ql\n  if (i < n - i):\n    res += (n - 2*i - 1) * qr\n  m = min(m, res)\nprint(m)\n  \n  \n\n\n", "n, l, r, Ql, Qr = map(int, input().split())\ns, v = [0] * (n + 1), 2 * 10 ** 9\nfor i, wi in enumerate(map(int, input().split())):\n    s[i + 1] = s[i] + wi\nfor lc in range(0, n + 1):\n    rc = n - lc\n    c = s[lc] * l + (s[n] - s[lc]) * r\n    if lc > rc + 1:\n        c += (lc - rc - 1) * Ql\n    elif rc > lc + 1:\n        c += (rc - lc - 1) * Qr\n    v = min(v, c)\nprint(v)", "n,l,r,ql,qr = list(map(int,input().split()))\nw = list(map(int, input().split()))\n\ns = [0, *w]\nfor i in range(1, n+1): s[i] += s[i-1]\n\nc_min =  s[n]*r + (n-1)*qr\nfor i in range(1, n+1):\n    cc = l*s[i] + (s[n]- s[i])*r\n    if 2*i < n:\n        cc += (n-2*i-1)*qr\n    elif 2*i > n:\n        cc += (i-(n-i) -1)*ql\n    c_min = min(c_min, cc)\n\nprint(c_min)\n", "n, l, r, ql, qr = map(int, input().split())\nw = [0] + list(map(int, input().split()))\nfor i in range(1, n + 1):\n    w[i] += w[i - 1]\ns = w[n]\nprint(min(l * w[i] + r * (s - w[i]) + ql * max(0, 2 * i - n - 1) + qr * max(0, n - 2 * i - 1) for i in range(n + 1)))", "n, l, r, ql, qr = map(int, input().split())\n\nw = [0] + list(map(int, input().split()))\n\nfor i in range(1, n + 1):\n\n    w[i] += w[i - 1]\n\ns = w[n]\n\nprint(min(l * w[i] + r * (s - w[i]) + ql * max(0, 2 * i - n - 1) + qr * max(0, n - 2 * i - 1) for i in range(n + 1)))", "n,l,r,ql,qr = map(int,input().split())\nw = list(map(int, input().split()))\n\ns = [0, *w]\nfor i in range(1, n+1): s[i] += s[i-1]\n\nc_min =  s[n]*r + (n-1)*qr\nfor i in range(1, n+1):\n    cc = l*s[i] + (s[n]- s[i])*r\n    if 2*i < n:\n        cc += (n-2*i-1)*qr\n    elif 2*i > n:\n        cc += (i-(n-i) -1)*ql\n    c_min = min(c_min, cc)\n\nprint(c_min)", "n, l, r, ql, qr = map(int, input().split())\n\nw = [0] + list(map(int, input().split()))\n\nfor i in range(1, n + 1):\n\n    w[i] += w[i - 1]\n\ns = w[n]\n\nprint(min(l * w[i] + r * (s - w[i]) + ql * max(0, 2 * i - n - 1) + qr * max(0, n - 2 * i - 1) for i in range(n + 1)))", "n, l , r, ql , qr = list(map(int,input().split()))\nw = [0] + list(map(int,input().split()))\nfor i in range (1,n+1):\n    w[i] += w[i-1]\ns = w[n]\nprint(min(l*w[i] + r*(s-w[i]) + ql*max(0,2*i-n-1) + qr*max(0,n-2*i-1) for i in range(n+1)))\n", "n, l , r, ql , qr = list(map(int,input().split()))\nw = [0] + list(map(int,input().split()))\nfor i in range (1,n+1):\n    w[i] += w[i-1]\ns = w[n]\nprint(min(l*w[i] + r*(s-w[i]) + ql*max(0,2*i-n-1) + qr*max(0,n-2*i-1) for i in range(n+1)))\n", "n, l, r, p, q = list(map(int, input().split()))\narr = list(map(int, input().split()))\nres, s, d = int(1<<62), sum(arr), 0\nfor i in range(n+1):\n    if i > 0:\n        d += arr[i-1]\n    t = d * l + (s - d) * r\n    j = n - i\n    if i > j:\n        t += (i - j - 1) * p\n    if i < j:\n        t += (j - i - 1) * q\n    res = min(res, t)\nprint(res)\n", "import sys\n\ninf = float(\"inf\")\n# sys.setrecursionlimit(10000000)\n\n# abc='abcdefghijklmnopqrstuvwxyz'\n# abd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n# mod, MOD = 1000000007, 998244353\n# words = {1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine',10:'ten',11:'eleven',12:'twelve',13:'thirteen',14:'fourteen',15:'quarter',16:'sixteen',17:'seventeen',18:'eighteen',19:'nineteen',20:'twenty',21:'twenty one',22:'twenty two',23:'twenty three',24:'twenty four',25:'twenty five',26:'twenty six',27:'twenty seven',28:'twenty eight',29:'twenty nine',30:'half'}\n# vow=['a','e','i','o','u']\n# dx,dy=[0,1,0,-1],[1,0,-1,0]\n\n# import random\n# from collections import deque, Counter, OrderedDict,defaultdict\n# from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n# from math import ceil,floor,log,sqrt,factorial,pi,gcd\n# from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\nn,l,r,ql,qr = get_ints()\nArr = get_array()\npre = [0]*(n+1)\nfor i in range(1,n+1):\n    pre[i] = pre[i-1]+Arr[i-1]\n# print(pre)\nans = inf\nfor i in range(n+1):\n    current_cost = pre[i]*l + (pre[n]-pre[i])*r\n    if (i>(n-i)):\n        current_cost+=(i-n+i-1)*ql\n    elif (i<(n-i)):\n        current_cost+=(n-i-i-1)*qr\n    # print(current_cost)\n    ans = min(ans, current_cost)\nprint(ans)", "n,l,r,ql,qr=map(int,input().split())\narr=[int(i) for i in input().split()]\n#brute force is the mother of all approaches \nmini=10**20 \nsm=sum(arr)\nappaji=0\ncurr=0 \nfor i in range(n+1):\n    if i>0:\n       curr+=arr[i-1]\n    now=curr*l+(sm-curr)*r   \n    j=n-i \n    if i>j: \n        now+=(i-j-1)*ql # appaji 1 \n    if j>i:\n        now+=(j-i-1)*qr #appaji 2  \n    mini=min(mini,now)\nprint(mini)", "n, l, r, ql, qr = list(map(int, input().split()))\nw = list(map(int, input().split()))\nsum = 0\nsums = []\nfor i in range(n):\n    sum += w[i]\n    sums.append(sum)\n\nmin = r * sum + qr * (n - 1)\nfor i in range(n):\n    ss = l * sums[i] + r * (sum - sums[i])\n    if i + 1 > n - i - 1 and i - n + i + 1 > 0:\n        ss += ql * (i - n + i + 1)\n    elif i + 1 < n - i - 1 and n - i - 2 - i > 1:\n        ss += qr * (n - i - 2 - i - 1)\n    if ss < min:\n        min = ss\nprint(min)\n\n", "def solve(lst, l, r, left, right):\n    left_sum = [0]\n    right_sum = [0] * (len(lst) + 1)\n\n    cum_sum = 0\n    for i in range(len(lst)):\n        cum_sum += lst[i]\n        left_sum.append(cum_sum)\n\n    cum_sum = 0\n    for i in reversed(range(len(lst))):\n        cum_sum += lst[i]\n        right_sum[i] = cum_sum\n\n    #print(lst, left_sum, right_sum)\n    min_cost = float('inf')\n    for i in range(len(lst)+1):\n        cost = left_sum[i] * l + right_sum[i]*r\n        #print(i, cost, left_sum[i],l, right_sum[i], r)\n        if i > n-i:\n            cost += left * (2*i -n -1)\n        elif i < n - i:\n            cost += right *(n - 1- 2*i)\n        #print(cost)\n        min_cost = min(min_cost, cost)\n\n    return min_cost\n\nn, l, r, left, right = list(map(int, input().split()))\nlst = list(map(int, input().split()))\nprint(solve(lst, l, r, left, right))", "\"\"\" My template \"\"\"\n# x0,y0,ax,ay,bx,by = list(map(int,input().split()))\n# xs,ys,t = list(map(int,input().split()))\n# V = []\n# for i in range(61):\n#     V.append([x0,y0])\n#     x0=ax*x0+bx;y0=ay*y0+by;\n# A=0\n# for i in range(61):\n#     for j in range(i,61):\n#         ans=min(abs(xs-V[i][0])+abs(ys-V[i][1]),abs(xs-V[j][0])+abs(ys-V[j][1]))\n#         for k in range(i,j):\n#             ans=ans+abs(V[k+1][0]-V[k][0])+abs(V[k+1][1]-V[k][1])\n#         if ans<=t:\n#             A=max(A,j-i+1);\n# print(A)\n\n# def f(s):\n#     s = str(s)\n#     ans = 0\n#     for i in s:\n#         ans += int(i)\n#     return ans\n\nimport math\nimport itertools\nn, L, R, Ql, Qr = list(map(int, input().split()))\nw = list(map(int, input().split()))\npw = list(itertools.accumulate(w))\nts = sum(w)\nans = math.inf\nfor i in range(n+1):\n    l = i\n    r = n - i\n    if l > 0:\n        lsum = pw[i-1]\n    else:\n        lsum = 0\n    rsum = ts - lsum\n    if l < r:\n        ans = min(ans, L*lsum + rsum*R + max((r-l-1)*Qr, 0))\n    else:\n        ans = min(ans, L*lsum + rsum*R + max((l-r-1)*Ql, 0))\nprint(ans)\n", "n,l,r,ql,qr=list(map(int,input().split()))\nli=list(map(int,input().split()))\nri=li.copy()\nri.append(0)\nlist(map(lambda x:0,ri))\nri[0]=0\nri[1]=li[0]\nfor i in range(2,len(li)+1):\n    ri[i]=ri[i-1]+li[i-1]\nminans=1000000000000000\ns1=0\nfor j in range(0,len(li)+1):\n    if j<len(li)/2:\n        s1=ri[j]*l+ri[len(li)]*r-ri[j]*r+qr*(len(li)-2*j-1)\n    elif j>len(li)/2:\n        s1=ri[j]*l+ri[len(li)]*r-ri[j]*r+ql*(2*j-len(li)-1)\n    else: \n        s1=ri[j]*l+ri[len(li)]*r-ri[j]*r\n    # print(s1)\n    minans=min([s1,minans])\nprint(minans)\n\n"]