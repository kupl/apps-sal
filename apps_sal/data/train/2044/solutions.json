["from sys import stdin, stdout\n\nn,k = list(map(int,stdin.readline().rstrip().split()))\n\nprint(2+(n-2)//k+(n-3)//k)\n\nconnectionsList = []\n# Leaf node is 1. Make this node have connections to k children\nfor i in range(k):\n    connectionsList.append((str(1),str(i+2)))\n\n\nfor i in range(k+2,n+1):\n    connectionsList.append((str(i-k),str(i)))\n\nfor conn in connectionsList:\n    print(' '.join(conn))\n", "n, k = map(int, input().split())\nmid = n-k-1\nr = [0] * k\nfor i in range(n-1):\n  r[i%k] += 1\nprint(r[0]+r[1])\nv1 = 2\nans = []\nfor i in range(k):\n  v0 = 1\n  for _ in range(r[i]):\n    ans.append(\"%d %d\"%(v0, v1))\n    v0 = v1\n    v1 += 1\nprint(\"\\n\".join(ans))", "n, k = [int(s) for s in input().split()]\ns = n-k\nt = 0\nif (s-1)%k == 1:\n    t = 1\nif (s-1)%k >= 2:\n    t = 2\nprint(2*((s-1)//k) + t + 2)\nfor i in range(n//k):\n    for j in range(k):\n        if 1 + j + (i+1)*k <= n:\n            print(1 + j + i*k, 1 + j + (i+1)*k)\n        elif 1 + j + i*k < n:\n            print(1 + j + i*k, n)\nfor i in range(1, n%k):\n    print(n-i, n)\n", "n = list(map(int,input().split(' ')))\na,b = n[0],n[1]\nif b >= a-b-1:\n    if a-b == 1:\n        print(2)\n        for i in range(2,a+1):\n            print(1,i)\n    elif a-b == 2:\n        print(3)\n        print(1,2)\n        print(2,3)\n        for i in range(4,a+1):\n            print(3,i)\n    else:\n        print(4)\n        for i in range(2,a-b+1):\n            print(1,i)\n            print(i,i+a-b-1)\n        for i in range(2*(a-b),a+1):\n            print(a-b,i)\nelse:\n    s = (a-1)//b\n    if (a-1)%b == 0:\n        print(2*s)\n    elif (a-1)%b == 1:\n        print(2*s+1)\n    else:\n        print(2*s+2)\n    for i in range(1,b+1):\n        print(a,i)\n        j = i\n        while j+b < a:\n            print(j,j+b)\n            j = j+b", "n,k = list(map(int,input().split()))\nn -= 1\nval = n//k\ndiv = n%k\ni = 2\nif div==0:\n    print(val*2)\nelif div==1:\n    print(val*2+1)\nelse:\n    print((val+1)*2)\nfor a in range(k):\n    print(1,i)\n    for j in range(val-1):\n        print(i,i+1)\n        i+=1\n    i+=1\nj = i-1\nwhile(div):\n    print(j,i)\n    i+=1\n    j-=val\n    div -= 1\n", "n, k = list(map(int, input().split()))\n\nmid = n-k-1\n\nr = [0] * k\n\nfor i in range(n-1):\n\n  r[i%k] += 1\n\nprint(r[0]+r[1])\n\nv1 = 2\n\nans = []\n\nfor i in range(k):\n\n  v0 = 1\n\n  for _ in range(r[i]):\n\n    ans.append(\"%d %d\"%(v0, v1))\n\n    v0 = v1\n\n    v1 += 1\n\nprint(\"\\n\".join(ans))\n\n\n\n# Made By Mostafa_Khaled\n", "def pr(m):\n    for i in range(len(m)):\n        print(' '.join([str(x) for x in m[i]]))\n\nn, k = map(int, input().split())\nedge = [[1, v] if v < k+1 else [v-k, v] for v in range(2, n+1)]\n\ndef get_min_max_radius(n, k):\n    r    = (n-1) % k\n    base = (n-1) // k\n    \n    if r == 0:\n        return base * 2\n    \n    if r == 1:\n        return base * 2 + 1\n    \n    return base * 2 + 2    \n    \nprint(get_min_max_radius(n, k))    \npr(edge)", "import sys\nimport math\nfrom collections import defaultdict,deque\nimport heapq\n\nn,k = list(map(int,sys.stdin.readline().split()))\ngraph = defaultdict(list)\nst = 2\nq = deque()\nfor i in range(k):\n\tgraph[1].append(st)\n\tq.append(st)\n\tst += 1\nleaves = [1 for _ in range(k)]\ncnt = 0\nwhile q and st <= n:\n\ta = q.popleft()\n\tgraph[a].append(st)\n\tq.append(st)\n\tleaves[(cnt)%k] += 1\n\tcnt += 1\n\tst += 1\n#print(leaves,'leaves')\ndis = leaves[0] + leaves[1]\nleaves.sort()\ndis = leaves[-1] + leaves[-2]\nq = deque()\nq.append(1)\nvis = defaultdict(int)\nprint(dis)\nwhile q:\n\ta = q.popleft()\n\tfor x in graph[a]:\n\t\tprint(a,x)\n\t\tq.append(x)\n"]