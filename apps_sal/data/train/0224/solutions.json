["class Solution:\n     def numDistinct(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: int\n         \"\"\"\n         setOft=set(t)\n         news=\"\"\n         for ch in s:\n             if ch in setOft:\n                 news+=ch\n         dp=[[1 for i in range(len(news)+1)] for j in range(len(t)+1)]\n         for j in range(1,len(t)+1):\n             dp[j][0]=0\n \n         for i in range(len(t)):\n             for j in range(len(news)):\n                 if t[i]==news[j]:\n                     dp[i+1][j+1]=dp[i][j]+dp[i+1][j]\n                 else:\n                     dp[i+1][j+1]=dp[i+1][j]\n         return dp[len(t)][len(news)]\n", "class Solution:\n     def __init__(self):\n         self.dp = {}\n         self.s = \"\"\n         self.t = \"\"\n         self.letter2Indices = {}\n     \n     def numDistinct(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: int\n         \"\"\"\n         if len(s) < len(t):\n             return 0\n         if not t:\n             return 1\n         \n         self.s = s.lower()\n         self.t = t.lower()\n         length = len(s)\n         for i in range(len(t)):\n             self.dp[i] = [-1] * length\n         for i in range(length):\n             letter = self.s[i]\n             if letter in self.letter2Indices:\n                 self.letter2Indices[letter].append(i)\n             else:\n                 self.letter2Indices[letter] = list([i])\n             \n         return self.numSubseq(0, 0)\n     \n     def numSubseq(self, startS, startT):\n         if startT >= len(self.t):\n             return 1\n         if startS >= len(self.s):\n             return 0\n         \n         if self.dp[startT][startS] >= 0:\n             return self.dp[startT][startS]\n         \n         letter = self.t[startT]\n         count = 0\n         firstMatch = -1\n         if letter in self.letter2Indices:\n             for i in self.letter2Indices[letter]:\n                 if i >= startS:\n                     count += self.numSubseq(i+1, startT+1)\n                     if firstMatch < 0:\n                         # We can directly fill dp[startT][startS:firstMatch-1] with the same number\n                         firstMatch = i\n                     \n         self.dp[startT][startS] = count\n         for i in range(startS + 1, firstMatch):\n             self.dp[startT][i] = count\n         return count\n         \n         \n         \n         \n         \n         \n         \n         \n", "class Solution:\n     def numDistinct(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: int\n         \"\"\"\n         result = (len(t) + 1) * [0]\n         result[0] = 1\n         for j in range(len(s)):\n             for i in reversed(range(len(t))):\n                 if s[j] == t[i]:\n                     result[i + 1] += result[i]\n         return result[-1]", "class Solution:\n     def numDistinct(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: int\n         \"\"\"\n         row = len(s) + 1\n         col = len(t) + 1\n         dp = [0]*col\n         dp[0] = 1\n         for i in range(1, row):\n             pre = dp[:]\n             # print(pre)\n             for j in range(1, col):\n                 if s[i-1] == t[j-1]:\n                     dp[j] += pre[j-1]\n             # print(dp)\n         return dp[-1]\n                     \n", "class Solution:\n     def numDistinct(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: int\n         \"\"\"\n         if len(s) < len(t):\n             return 0\n         dp = [0] * len(s)\n         for i in range(len(s)):\n             dp[i] = dp[i-1] if i > 0 else 0\n             if s[i] == t[0]:\n                 dp[i] += 1\n                 \n         for i, ti in enumerate(t[1:]):\n             dp2 = [0] * len(s)\n             for j in range(i+1, len(s)):\n                 dp2[j] = dp2[j-1]\n                 if s[j] == ti:\n                     dp2[j] += dp[j-1]\n             dp = dp2\n         return dp[-1]\n"]