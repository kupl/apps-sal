["#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nimport sys,collections\nn,q=list(map(int,input().split()))\nM=collections.defaultdict(collections.deque)\nQ=collections.deque()\nL=[]\ns=n=m=0\nfor _ in range(q):\n\ty,x=list(map(int,input().split()))\n\tif 2>y:\n\t\ts+=1\n\t\tQ.append(x)\n\t\tM[x].append(n)\n\t\tn+=1\n\telif 3>y:\n\t\ty=M.get(x)\n\t\tif y:\n\t\t\ts-=len(y)\n\t\t\tdel M[x]\n\telse:\n\t\twhile x>m:\n\t\t\tz=Q.popleft()\n\t\t\ty=M.get(z)\n\t\t\tif y and y[0]<x:\n\t\t\t\ts-=1\n\t\t\t\ty.popleft()\n\t\t\t\tif not y:del M[z]\n\t\t\tm+=1\n\tL.append(s)\nsys.stdout.write('\\n'.join(map(str,L)))\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nimport collections\nn,q=list(map(int,input().split()))\nM=collections.defaultdict(collections.deque)\nQ=collections.deque()\nL=[]\ns=n=m=0\nfor _ in range(q):\n\ty,x=list(map(int,input().split()))\n\tif 2>y:\n\t\ts+=1\n\t\tQ.append(x)\n\t\tM[x].append(n)\n\t\tn+=1\n\telif 3>y:\n\t\ty=M.get(x)\n\t\tif y:\n\t\t\ts-=len(y)\n\t\t\tdel M[x]\n\telse:\n\t\twhile x>m:\n\t\t\tz=Q.popleft()\n\t\t\ty=M.get(z)\n\t\t\tif y and y[0]<x:\n\t\t\t\ts-=1\n\t\t\t\ty.popleft()\n\t\t\t\tif not y:del M[z]\n\t\t\tm+=1\n\tL.append(s)\nprint('\\n'.join(map(str,L)))\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nimport collections\nn,q=list(map(int,input().split()))\nQ=collections.deque()\nA=n*[0]\nB=A[:]\nL=[]\ns=n=0\nfor _ in range(q):\n\ty,x=list(map(int,input().split()))\n\tif 2>y:\n\t\tx-=1\n\t\tQ.append(x)\n\t\tB[x]+=1\n\t\tA[x]+=1\n\t\ts+=1\n\telif 3>y:\n\t\tx-=1\n\t\ts-=A[x]\n\t\tA[x]=0\n\telse:\n\t\twhile x>n:\n\t\t\tn+=1\n\t\t\ty=Q.popleft()\n\t\t\tB[y]-=1\n\t\t\tif(B[y]<A[y]):\n\t\t\t\tA[y]-=1\n\t\t\t\ts-=1\n\tL.append(s)\nprint('\\n'.join(map(str,L)))\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nimport collections\nn,q=list(map(int,input().split()))\nQ=collections.deque()\nA=n*[0]\nB=A[:]\nL=[]\ns=n=0\nfor _ in range(q):\n\ty,x=list(map(int,input().split()))\n\tif 2>y:\n\t\tx-=1\n\t\tQ.append(x)\n\t\tB[x]+=1\n\t\tA[x]+=1\n\t\ts+=1\n\telif 3>y:\n\t\tx-=1\n\t\ts-=A[x]\n\t\tA[x]=0\n\telse:\n\t\twhile x>n:\n\t\t\tn+=1\n\t\t\ty=Q.popleft()\n\t\t\tB[y]-=1\n\t\t\tif(B[y]<A[y]):\n\t\t\t\tA[y]-=1\n\t\t\t\ts-=1\n\tL.append(str(s))\nprint('\\n'.join(L))\n", "n,q = map(int,input().split())\nxi = [[0]*(n+1) for i in range(2)]\nnoti = []\nans = \"\"\nnum = 0\nnum2 = 0\nnum3 = 0\nwhile q > 0:\n    typ,xt = map(int,input().split())\n    if typ == 1:\n        xi[0][xt] += 1\n        noti += [xt]\n        num += 1\n        num2 += 1\n    elif typ == 3:\n        for i in range(num3,xt):\n            if i+1 > xi[1][noti[i]]:\n                xi[0][noti[i]] -= 1\n                num -= 1\n        num3 = max(num3,xt)\n    else:\n        num -= xi[0][xt]\n        xi[0][xt] = 0\n        xi[1][xt] = num2\n    ans += str(num)\n    ans += \"\\n\"\n    q -= 1\nprint(ans)", "def main():\n    n, q = list(map(int, input().split()))\n    vol, tot, l, res = [0] * (n + 1), [0] * (n + 1), [], []\n    z = m = 0\n    for _ in range(q):\n        t, x = list(map(int, input().split()))\n        if t == 1:\n            l.append(x)\n            tot[x] += 1\n            vol[x] += 1\n            z += 1\n        elif t == 2:\n            z -= vol[x]\n            vol[x] = 0\n        else:\n            if m < x:\n                r, m = list(range(m, x)), x\n                for i in r:\n                    x = l[i]\n                    tot[x] -= 1\n                    if vol[x] > tot[x]:\n                        vol[x] -= 1\n                        z -= 1\n        res.append(z)\n    print('\\n'.join(map(str, res)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n , q = map(int, input().split())\nstacks = [[] for i in range(n + 1)]\nqueue = []\nq_start = 0\nunread = 0\nans = []\n\nfor i in range(q):\n    action, num = map(int, input().split())\n    if action == 1:\n        queue.append(0)\n        stacks[num].append(len(queue) - 1)\n        unread += 1\n        \n    elif action == 2:\n        for i in range(len(stacks[num])):\n            if stacks[num][i] >= q_start and queue[stacks[num][i]] == 0:\n                queue[stacks[num][i]] = 1\n                unread -= 1\n        stacks[num] = []\n    else:\n        for i in range(q_start, num):\n            if queue[i] == 0:\n                queue[i] = 1\n                unread -= 1\n        q_start = max(q_start, num)\n    ans.append(unread)\n\nprint(\"\\n\".join(map(str, ans)))", "from sqlite3 import collections\nn, q = list(map(int, input().split()))\nQ = collections.deque()\nA = n*[0]\nB = A[: ]\nL = []\ns=n=0\nfor _ in range(q):\n    y, x = list(map(int, input().split()))\n    if y<2 :\n        x-=1\n        Q.append(x)\n        B[x]+=1\n        A[x]+=1\n        s+=1\n    elif y<3 :\n        x-=1\n        s-=A[x]\n        A[x]=0\n    else :\n        while x>n :\n            n+=1\n            y=Q.popleft()\n            B[y]-=1\n            if B[y]<A[y] :\n                A[y]-=1\n                s-=1\n    L.append(str(s))\nprint('\\n'.join(L))\n", "import collections\nn, q = list(map(int ,input().split()))\nQ = collections.deque()\nA = [0] * n\nB = A[:]\nL = []\ns = n = 0\nfor k in range(q):\n    type1, x = list(map(int, input().split()))\n    if type1 == 1:\n        x -= 1\n        Q.append(x)\n        B[x] += 1\n        A[x] += 1\n        s += 1\n    if type1 == 2:\n        x -= 1\n        s -= A[x]\n        A[x] = 0\n    if type1 == 3:\n        while x > n:\n            n += 1\n            y = Q.popleft()\n            B[y] -= 1\n            if B[y] < A[y]:\n                A[y] -= 1\n                s -= 1\n    L.append(str(s))\nprint('\\n'.join(L))\n", "n,q = map(int, input().split())\nl = []\na = [[] for _ in range(n)]\ntp = 0\nans = 0\nanss = []\nfor i in range(q):\n    x,b = map(int, input().split())\n    if x == 1:\n        l.append(1)\n        a[b-1].append(len(l) -1)\n        ans +=1\n    elif x == 2:\n        while len(a[b-1]) > 0:\n            z = a[b-1].pop()\n            ans -= l[z]\n            l[z] = 0\n    else:\n        while tp < b:\n            ans -=l[tp]\n            l[tp] = 0\n            tp += 1\n    anss.append(str(ans))\nprint('\\n'.join(anss))", "import collections \nn,q=map(int,input().split())\ndq=collections.deque()\nl=n*[0]\np=list(l)\nans=0\nt=0\nansl=[]\nwhile(q):\n    a,b=map(int,input().split())\n    if a==1:\n        dq.append(b-1)\n        l[b-1],p[b-1]=l[b-1]+1,p[b-1]+1\n        ans=ans+1\n    elif a==2:\n        ans=ans-l[b-1]\n        l[b-1]=0\n    else:\n        while b>t:\n            t=t+1\n            j=dq.popleft()\n            p[j]=p[j]-1\n            if l[j]>p[j]:\n                l[j]=l[j]-1\n                ans=ans-1\n    ansl.append(str(ans))        \n    q=q-1\nprint(\"\\n\".join(ansl))    ", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nimport collections\nn,q=list(map(int,input().split()))\nQ=collections.deque()\nA=n*[0]\nB=A[:]\nL=[]\ns=n=0\nfor _ in range(q):\n\ty,x=list(map(int,input().split()))\n\tif 2>y:\n\t\tx-=1\n\t\tQ.append(x)\n\t\tB[x]+=1\n\t\tA[x]+=1\n\t\ts+=1\n\telif 3>y:\n\t\tx-=1\n\t\ts-=A[x]\n\t\tA[x]=0\n\telse:\n\t\twhile x>n:\n\t\t\tn+=1\n\t\t\ty=Q.popleft()\n\t\t\tB[y]-=1\n\t\t\tif(B[y]<A[y]):\n\t\t\t\tA[y]-=1\n\t\t\t\ts-=1\n\tL.append(s)\nprint('\\n'.join(map(str,L)))\n\n\n\n\n# Made By Mostafa_Khaled\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nimport sys,collections\nn,q=map(int,input().split())\nM=collections.defaultdict(collections.deque)\nQ=collections.deque()\nL=[]\ns=n=m=0\nfor _ in range(q):\n\ty,x=map(int,input().split())\n\tif 2>y:\n\t\ts+=1\n\t\tQ.append(x)\n\t\tM[x].append(n)\n\t\tn+=1\n\telif 3>y:\n\t\ty=M.get(x)\n\t\tif y:\n\t\t\ts-=len(y)\n\t\t\tdel M[x]\n\telse:\n\t\twhile x>m:\n\t\t\tz=Q.popleft()\n\t\t\ty=M.get(z)\n\t\t\tif y and y[0]<x:\n\t\t\t\ts-=1\n\t\t\t\ty.popleft()\n\t\t\t\tif not y:del M[z]\n\t\t\tm+=1\n\tL.append(s)\nsys.stdout.write('\\n'.join(map(str,L)))", "\nimport sys\nimport collections\nn, q = list(map(int, input().split()))\n\n# Key: app number, value: list of indexes in the arr\nM = collections.defaultdict(collections.deque)\n\n# arr = []\nQ = collections.deque()\nn = 0\ns = 0\nm = 0\nL = []\nfor i in range(q):\n  c, x = list(map(int, input().split()))\n\n  if c == 1:\n    # if x not in M:\n    #   M[x] = collections.deque()\n      # M[x] = set()\n\n    # M[x].add(n)\n    M[x].append(n)\n    Q.append(x)\n\n    n += 1\n    s += 1\n\n    # print(\"case 1\")\n\n  elif c == 2:\n    y = M.get(x)\n    if y:\n      s -= len(y)\n\n      del M[x]\n\n    # print(\"case 2\")\n\n  else:\n    while x > m:\n      z = Q.popleft()\n      y = M.get(z)\n      if y and y[0] < x:\n        s -= 1\n        y.popleft()\n\n        if not y:\n          del M[z]\n        # M[app].remove(message)\n\n      m += 1\n    # print(\"case 3\")\n  L.append(s)\nsys.stdout.write('\\n'.join(map(str, L)))\n\n# for i in range(q):\n#   c, x = map(int, input().split())\n\n#   if c == 1:\n#     if x not in hash:\n#       hash[x] = collections.deque()\n#       # hash[x] = set()\n\n#     # hash[x].add(messageNumber)\n#     hash[x].append(messageNumber)\n#     deque.append((x, messageNumber))\n\n#     messageNumber += 1\n#     unread += 1\n\n#     # print(\"case 1\")\n#     print(unread)\n\n#   elif c == 2:\n#     if x in hash:\n#       xUnread = len(hash[x])\n#       hash[x] = set()\n#       unread -= xUnread\n#     # print(\"case 2\")\n#     print(unread)\n\n#   else:\n#     t = x\n#     read = 0\n#     while len(deque) != 0 and deque[0][1] <= t:\n#       app, message = deque.popleft()\n\n#       if message in hash[app]:\n#         read += 1\n#         hash[app].remove(message)\n\n#     unread -= read\n\n#     # print(\"case 3\")\n#     print(unread)\n", "import sys\nimport collections\nn, q = list(map(int, input().split()))\n\n# Key: app number, value: list of indexes in the arr\nM = {}\n\n# arr = []\nQ = collections.deque()\nn = 1\ns = 0\nm = 0\nL = []\nfor i in range(q):\n  c, x = list(map(int, input().split()))\n\n  if c == 1:\n    if x not in M:\n      M[x] = collections.deque()\n      # M[x] = set()\n\n    # M[x].add(n)\n    M[x].append(n)\n    Q.append(x)\n\n    n += 1\n    s += 1\n\n    # print(\"case 1\")\n\n  elif c == 2:\n    if x in M:\n      s -= len(M[x])\n\n      M[x] = collections.deque()\n\n    # print(\"case 2\")\n\n  else:\n    while x > m:\n      z = Q.popleft()\n\n      if z in M and len(M[z]) > 0 and M[z][0] <= x:\n        s -= 1\n        M[z].popleft()\n        # M[app].remove(message)\n\n      m += 1\n    # print(\"case 3\")\n  L.append(s)\nsys.stdout.write('\\n'.join(map(str, L)))\n# for i in range(q):\n#   c, x = map(int, input().split())\n\n#   if c == 1:\n#     if x not in hash:\n#       hash[x] = collections.deque()\n#       # hash[x] = set()\n\n#     # hash[x].add(messageNumber)\n#     hash[x].append(messageNumber)\n#     deque.append((x, messageNumber))\n\n#     messageNumber += 1\n#     unread += 1\n\n#     # print(\"case 1\")\n#     print(unread)\n\n#   elif c == 2:\n#     if x in hash:\n#       xUnread = len(hash[x])\n#       hash[x] = set()\n#       unread -= xUnread\n#     # print(\"case 2\")\n#     print(unread)\n\n#   else:\n#     t = x\n#     read = 0\n#     while len(deque) != 0 and deque[0][1] <= t:\n#       app, message = deque.popleft()\n\n#       if message in hash[app]:\n#         read += 1\n#         hash[app].remove(message)\n\n#     unread -= read\n\n#     # print(\"case 3\")\n#     print(unread)\n", "import collections\nimport sys\n\nn, q = list(map(int, input().split()))\n# Key: app number, value: list of indexes in the arr\nhash = {}\n\n# arr = []\ndeque = collections.deque()\nmessageNumber = 1\nunread = 0\nL = []\n\nfor i in range(q):\n  c, x = list(map(int, input().split()))\n\n  if c == 1:\n    if x not in hash:\n      hash[x] = set()\n\n    hash[x].add(messageNumber)\n    deque.append((x, messageNumber))\n\n    messageNumber += 1\n    unread += 1\n\n    # print(\"case 1\")\n    # print(unread)\n\n  elif c == 2:\n    if x in hash:\n      xUnread = len(hash[x])\n      hash[x] = set()\n      unread -= xUnread\n    # print(\"case 2\")\n    # print(unread)\n\n  else:\n    t = x\n    read = 0\n    while len(deque) != 0 and deque[0][1] <= t:\n      app, message = deque.popleft()\n\n      if message in hash[app]:\n        read += 1\n        hash[app].remove(message)\n\n    unread -= read\n\n    # print(\"case 3\")\n    # print(unread)\n  L.append(unread)\nsys.stdout.write('\\n'.join(map(str, L)))\n", "import collections\nimport sys\n\nn, q = map(int, input().split())\n# Key: app number, value: list of indexes in the arr\nhash = {}\n\ndeque = collections.deque()\nmessageNumber = 1\nunread = 0\nL = []\n\nfor i in range(q):\n  c, x = map(int, input().split())\n\n  if c == 1:\n    if x not in hash:\n      hash[x] = set()\n\n    hash[x].add(messageNumber)\n    deque.append((x, messageNumber))\n\n    messageNumber += 1\n    unread += 1\n\n\n  elif c == 2:\n    if x in hash:\n      xUnread = len(hash[x])\n      hash[x] = set()\n      unread -= xUnread\n\n\n  else:\n    t = x\n    read = 0\n    while len(deque) != 0 and deque[0][1] <= t:\n      app, message = deque.popleft()\n\n      if message in hash[app]:\n        read += 1\n        hash[app].remove(message)\n\n    unread -= read\n\n\n  L.append(unread)\nprint('\\n'.join(map(str, L)))", "import sys\nn,m=list(map(int,input().split()))\nk=0\npos=0\nL=[]\nL1=[]\nd={i:[0,-1] for i in range(1,n+1)}\nfor i in range(m) :\n    a,b=list(map(int,input().split()))\n    if a==1 :\n        d[b][0]+=1\n        \n        k+=1\n        L.append(b)\n    elif a==2 :\n        k-=d[b][0]\n        d[b][0]=0\n        d[b][1]=len(L)\n    else :\n        for j in range(pos,b) :\n            \n            if d[L[j]][0]>0 and d[L[j]][1]<j+1   :\n                \n                k-=1\n                d[L[j]][0]-=1\n                \n        pos=max(pos,b)\n    L1.append(k)\nsys.stdout.write('\\n'.join(map(str,L1)))\n    \n    \n            \n            \n            \n        \n        \n        \n", "import sys\nn,m=list(map(int,input().split()))\nk=0\npos=0\nL=[]\nL1=[]\nd={i:[0,-1] for i in range(1,n+1)}\nfor i in range(m) :\n    a,b=list(map(int,sys.stdin.readline()[:-1].split()))\n    if a==1 :\n        d[b][0]+=1\n        \n        k+=1\n        L.append(b)\n    elif a==2 :\n        k-=d[b][0]\n        d[b][0]=0\n        d[b][1]=len(L)\n    else :\n        for j in range(pos,b) :\n            \n            if d[L[j]][0]>0 and d[L[j]][1]<j+1   :\n                \n                k-=1\n                d[L[j]][0]-=1\n                \n        pos=max(pos,b)\n    L1.append(k)\nsys.stdout.write('\\n'.join(map(str,L1)))\n    \n    \n            \n            \n            \n        \n        \n        \n", "'''input\n4 6\n1 2\n1 4\n1 2\n3 3\n1 3\n1 3\n\n\n'''\n\nn, q = list(map(int, input().split()))\n\ncount = [0 for i in range(n + 1)]\nqueue = []\nread = set()\nunread = 0\nans = []\nlast_q_idx = 0\nlast_app_idx = [1 for i in range(n + 1)]\n\nfor i in range(q):\n    action, num = list(map(int, input().split()))\n    if action == 1:\n        queue.append((num, count[num] + 1))\n        count[num] += 1\n        unread += 1\n    elif action == 2:\n        for number in range(last_app_idx[num], count[num] + 1):\n            if (num, number) not in read:\n                read.add((num, number))\n                unread -= 1\n        last_app_idx[num] = max(last_app_idx[num], count[num])\n    else:\n        for idx in range(last_q_idx, num):\n            app, number = queue[idx]\n            if (app, number) not in read:\n                read.add((app, number))\n                last_app_idx[app] = max(last_app_idx[app], number)\n                unread -= 1\n        last_q_idx = max(last_q_idx, num)\n    # print(action, num, last_q_idx, last_app_idx, queue)\n    ans.append(unread)\n \nprint(\"\\n\".join(map(str, ans)))\n\n\n", "import sys,collections\nn,q=map(int,input().split())\nM=collections.defaultdict(collections.deque)\nQ=collections.deque()\nL=[]\ns=n=m=0\nfor _ in range(q):\n\ty,x=map(int,input().split())\n\tif 2>y:\n\t\ts+=1\n\t\tQ.append(x)\n\t\tM[x].append(n)\n\t\tn+=1\n\telif 3>y:\n\t\ty=M.get(x)\n\t\tif y:\n\t\t\ts-=len(y)\n\t\t\tdel M[x]\n\telse:\n\t\twhile x>m:\n\t\t\tz=Q.popleft()\n\t\t\ty=M.get(z)\n\t\t\tif y and y[0]<x:\n\t\t\t\ts-=1\n\t\t\t\ty.popleft()\n\t\t\t\tif not y:del M[z]\n\t\t\tm+=1\n\tL.append(s)\nsys.stdout.write('\\n'.join(map(str,L)))", "import sys, collections\ndef inp():\n    return map(int, input().split())\nn, q = inp()\nQ = collections.deque()\nA = n * [0]\nB = A[:]\nL = []\ns = n = 0\nfor _ in range(q):\n    typeq, x = inp()\n    if typeq == 1:\n        x -= 1\n        Q.append(x)\n        B[x] += 1\n        A[x] += 1\n        s += 1\n    elif typeq == 2:\n        x -= 1\n        s -= A[x]\n        A[x] = 0\n    else:\n        while x > n:\n            n += 1\n            y = Q.popleft()\n            B[y] -= 1\n            if (B[y] < A[y]):\n                A[y] -= 1\n                s -= 1\n    L.append(s)\nsys.stdout.write('\\n'.join(map(str,L)))", "from sys import stdin\ninput = stdin.readline\n\nn, q, = list(map(int, input().split()))\narr = [tuple(map(int, input().split())) for _ in range(q)]\nadj = [[] for _ in range(n+1)]\ncurr, cnt, res, vis = 0, 0, [], []\n \nfor t, v in arr:\n    if t == 1:\n        adj[v].append(len(vis))\n        vis.append(0)\n        cnt += 1\n    elif t == 2:\n        for u in adj[v]:\n            if not vis[u]:\n                vis[u] = 1\n                cnt -= 1\n        adj[v] = []\n    else:\n        while v > curr:\n            if not vis[curr]:\n                vis[curr] = 1\n                cnt -= 1\n            curr += 1\n    res.append(cnt)\nprint('\\n'.join(map(str, res)))\n", "import sys\ninput = sys.stdin.readline\n\nn, q = map(int, input().split())\nl = [[] for _ in range(n)]\nis_read = []\nis_read_idx = 0\nans = 0\nprev_t = 0\n\nfor _ in range(q):\n    ty, v = map(int, input().split())\n    \n    if ty==1:\n        l[v-1].append(is_read_idx)\n        is_read_idx += 1\n        is_read.append(False)\n        ans += 1\n    elif ty==2:\n        for idx in l[v-1]:\n            if not is_read[idx]:\n                is_read[idx] = True\n                ans -= 1\n        \n        l[v-1] = []\n    else:\n        if v>prev_t:\n            for idx in range(prev_t, v):\n                if not is_read[idx]:\n                    is_read[idx] = True\n                    ans -= 1\n                \n            prev_t = v\n        \n    print(ans)"]