["let_to_num = {'A':[0,5], 'B':[1,6], 'C':[2,7], 'D':[3,8], 'E':[4,9]}\n\nnum_to_let = {0:'A', 1:'B', 2:'C', 3:'D', 4:'E',\n              5:'A', 6:'B', 7:'C', 8:'D', 9:'E'}\n\nconnections = {0:(1,4,5), 1:(0,2,6), 2:(1,3,7), 3:(2,4,8), 4:(0,3,9), 5:(0,7,8),\n               6:(1,8,9), 7:(2,5,9), 8:(3,5,6), 9:(4,6,7)}\n\nT = int(input())\n\nfor i in range(T):\n    s = input()\n    out_1, out_2= [],[]\n    flag1, flag2 = True, True\n    for c in range(len(s)):\n        #print out_1, out_2, flag1, flag2\n        if c == 0:\n            out_1.append(let_to_num[s[c]][0])\n            out_2.append(let_to_num[s[c]][1])\n            #print out_1, out_2, '\\n'\n        else:\n            if flag1:\n                conn_1 = set(connections[out_1[-1]])\n                to_conn_1 = set(let_to_num[s[c]])\n                \n                if len(conn_1.intersection(to_conn_1))==0:\n                    flag1 = False\n                else:\n                    out_1.extend(list(conn_1.intersection(to_conn_1)))\n                    \n                #print 'out1',conn_1, to_conn_1, flag1, conn_1.intersection(to_conn_1)\n            if flag2:\n                conn_2 = set(connections[out_2[-1]])\n                to_conn_2 = set(let_to_num[s[c]])\n                \n                if len(conn_2.intersection(to_conn_2))==0:\n                    flag2 = False\n                else:\n                    out_2.extend(list(conn_2.intersection(to_conn_2)))\n                #print 'out2', conn_2, to_conn_2, flag2, conn_2.intersection(to_conn_2)\n            #print out_1, out_2, flag1, flag2, '\\n'\n            if (not flag1) and (not flag2):\n                break\n    if (not flag1) and (not flag2):\n        print(-1)\n        continue\n    elif flag1 and (not flag2):\n        print(''.join(str(k) for k in out_1))\n        continue\n    elif flag2 and (not flag1):\n        print(''.join(str(k) for k in out_2))\n        continue\n    else:\n        print(min(''.join(str(k) for k in out_1), ''.join(str(k) for k in out_2)))\n        continue\n", "G = {0:[1,4,5],1:[0,2,6],2:[1,3,7],3:[2,4,8],4:[3,0,9],5:[0,7,8],6:[1,8,9],7:[2,5,9],8:[3,5,6],9:[4,6,7]}\nL = {0:'A',1:'B',2:'C',3:'D',4:'E',5:'A',6:'B',7:'C',8:'D',9:'E'}\n\ndef Check(S):\n    result = ''\n    possibleStart = [k for k in list(L.keys()) if L[k] == S[0]]\n    isBreak = False\n    for c in S:\n        found = False\n        if result=='':\n            result = result+str(possibleStart[0])\n            last = possibleStart[0]\n            found = True\n        else:\n            for k in G[last]:\n                if L[k] == c:\n                    result = result+str(k)\n                    last = k\n                    found = True\n        if not found:\n            isBreak = True\n            break\n        #print result\n    if not isBreak:\n        return result\n    result = ''\n    #print 'nextstart'\n    for c in S:\n        found = False\n        if result=='':\n            result = result+str(possibleStart[1])\n            last = possibleStart[1]\n            found = True\n        else:\n            for k in G[last]:\n                if L[k] == c:\n                    result = result+str(k)\n                    last = k\n                    found = True\n        if not found:\n            return str(-1)\n        #print result\n    return result       \n\n\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    S = input()\n    R = Check(S)\n    print(R)\n", "D = {0: [1, 4, 5], 1: [0, 2, 6], 2: [1, 3, 7],\n     3: [2, 4, 8], 4: [0, 3, 9], 5: [0, 7, 8],\n     6: [1, 8, 9], 7: [2, 5, 9], 8: [3, 5, 6], 9: [4, 6, 7]}\n\nE = ['A', 'B', 'C', 'D', 'E', 'A', 'B', 'C', 'D', 'E']\n\nfor _ in range(eval(input())):\n    S = input()\n    solved = False\n    for i in range(10):\n        if not solved:\n            if E[i] == S[0]:\n                solved = True\n                ans = str(i)\n                for x in S[1:]:\n                    for y in D[int(ans[-1])]:\n                        if E[y] == x:\n                            ans += str(y)\n                            break\n                    else:\n                        solved = False\n    if solved:\n        print(ans)\n    else:\n        print(-1)\n"]