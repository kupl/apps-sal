["from collections import deque\nfrom sys import stdin\nimport psyco\npsyco.full()\n\ngraph = [[]]\nWHITE, GRAY, BLACK = 0, 1, 2\n\ndef notoriety(x, f_count):\n    queue = deque([x])\n    d = [0 for i in range(f_count+1)]\n    p = [0 for i in range(f_count+1)]\n    color = [WHITE for i in range(f_count+1)]\n    while len(queue) > 0:\n        top = queue.pop()\n        for node in graph[top]:\n            if color[node] == WHITE:\n                queue.appendleft(node)\n                color[node], p[node], d[node] = GRAY, top, d[top] + 1\n        color[top] = BLACK\n    return sum(d)/(f_count*1.0)\n        \ndef main():\n    groups = int(stdin.readline())\n    for g in range(groups):\n        global graph\n        graph = [[]]\n        no_of_friends = int(stdin.readline())\n        for i in range(no_of_friends):\n            graph.append(list(map(int,stdin.readline().split())))\n        min_notoriety, popular = 10000000, -1 # yet another magic number\n        for f in range(1,no_of_friends+1):\n            curr_not = notoriety(f, no_of_friends)\n            if  curr_not < min_notoriety:\n                min_notoriety,popular = curr_not, f\n        assert popular != -1\n        print(popular, \"%.6f\" %min_notoriety)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import deque\nfrom sys import stdin\nimport psyco\npsyco.full()\n\ngraph = [[]]\nWHITE, GRAY, BLACK = 0, 1, 2\n\ndef notoriety(x, f_count):\n    queue = deque([x])\n    d = [0 for i in range(f_count+1)]\n    p = [0 for i in range(f_count+1)]\n    color = [WHITE for i in range(f_count+1)]\n    while len(queue) > 0:\n        top = queue.pop()\n        for node in graph[top]:\n            if color[node] == WHITE:\n                queue.appendleft(node)\n                color[node], p[node], d[node] = GRAY, top, d[top] + 1\n        color[top] = BLACK\n    return sum(d)/(f_count*1.0)\n        \ndef main():\n    groups = int(stdin.readline())\n    for g in range(groups):\n        global graph\n        graph = [[]]\n        no_of_friends = int(stdin.readline())\n        for i in range(no_of_friends):\n            graph.append(list(map(int,stdin.readline().split())))\n        min_notoriety, popular = 10000000, -1 # yet another magic number\n        for f in range(1,no_of_friends+1):\n            curr_not = notoriety(f, no_of_friends)\n            if  curr_not < min_notoriety:\n                min_notoriety,popular = curr_not, f\n        assert popular != -1\n        print(popular, \"%.6f\" %min_notoriety)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import deque\nimport psyco\npsyco.full()\n\ngraph = [[]]\nWHITE, GRAY, BLACK = 0, 1, 2\n\ndef notoriety(x, f_count):\n    queue = deque([x])\n    d = [0 for i in range(f_count+1)]\n    p = [0 for i in range(f_count+1)]\n    color = [WHITE for i in range(f_count+1)]\n    while len(queue) > 0:\n        top = queue.pop()\n        for node in graph[top]:\n            if color[node] == WHITE:\n                queue.appendleft(node)\n                color[node], p[node], d[node] = GRAY, top, d[top] + 1\n        color[top] = BLACK\n    return sum(d)/(f_count*1.0)\n        \ndef main():\n    groups = int(input())\n    for g in range(groups):\n        global graph\n        graph = [[]]\n        no_of_friends = int(input())\n        for i in range(no_of_friends):\n            graph.append(list(map(int,input().split())))\n        min_notoriety, popular = 10000000, -1 # yet another magic number\n        for f in range(1,no_of_friends+1):\n            curr_not = notoriety(f, no_of_friends)\n            if  curr_not < min_notoriety:\n                min_notoriety,popular = curr_not, f\n        assert popular != -1\n        print(popular, \"%.6f\" %min_notoriety)\n\ndef __starting_point():\n    main()\n\n__starting_point()"]