["# cook your dish here\nfrom difflib import get_close_matches \nimport sys, os\n\ndef closeMatches(patterns, word): \n return get_close_matches(word, patterns, 1, 0.9)[0]\n\ndef get_string(): \n return sys.stdin.readline().strip() \n\ndef get_ints(): \n return map(int, sys.stdin.readline().strip().split()) \nans = []\ntest = int(input())\nfor i in range(test):\n n,q = get_ints()\n #ans = []\n n = int(n)\n q = int(q)\n patterns=[]\n for j in range(n):\n  s = get_string()\n  patterns.append(s)\n for j in range(q):\n  word = get_string()\n  ans.append(closeMatches(patterns, word))\nfor j in ans:\n sys.stdout.write(j+\"\\n\") ", "# cook your dish here\nfrom difflib import get_close_matches \nimport sys, os\n\ndef closeMatches(patterns, word): \n return get_close_matches(word, patterns, 1, 0.9)[0]\n\ndef get_string(): \n return sys.stdin.readline().strip() \n\ndef get_ints(): \n return map(int, sys.stdin.readline().strip().split()) \n\ntest = int(input())\nfor i in range(test):\n n,q = get_ints()\n ans = []\n n = int(n)\n q = int(q)\n patterns=[]\n for j in range(n):\n  s = get_string()\n  patterns.append(s)\n for j in range(q):\n  word = get_string()\n  ans.append(closeMatches(patterns, word))\n for j in ans:\n  sys.stdout.write(j+\"\\n\")", "t=int(input())\nwhile t>0:\n line=input().split()\n n=int(line[0])\n q=int(line[1])\n mylist=[]\n while n>0:\n  s=input().strip()\n  mylist.append(s)\n  n-=1\n while q>0:\n  m=input().strip()\n  if m in mylist:\n   print(m)\n  else:\n   for item in mylist:\n    i=0\n    if len(item)==len(m):\n     while i<len(m) and item[i]==m[i]:\n      i+=1\n     i+=1\n     if item[i:(len(item)-1)]==m[i:(len(m)-1)]:\n      print(item)\n      break\n    else:\n     while i<len(m) and item[i]==m[i]:\n      i+=1\n     if item[(i+1):(len(item)-1)]==m[i:(len(m)-1)]:\n      print(item)\n      break\n     \n  q-=1\n t-=1\n \n \n \n", "# cook your dish here\nfrom difflib import get_close_matches \nimport sys \n\ndef closeMatches(patterns, word): \n print(get_close_matches(word, patterns, 1, 0.9)[0]) \n\ndef get_string(): \n return sys.stdin.readline().strip() \n \ntest = int(input())\nfor i in range(test):\n n,q = input().split(\" \")\n n = int(n)\n q = int(q)\n patterns=[]\n for i in range(n):\n  s = get_string()\n  patterns.append(s)\n for i in range(q):\n  word = get_string()\n  closeMatches(patterns, word) \n", "# cook your dish here\nfrom difflib import get_close_matches \nimport sys \n\ndef closeMatches(patterns, word): \n print(get_close_matches(word, patterns, 1, 0.85)[0]) \n\ndef get_string(): \n return sys.stdin.readline().strip() \n \ntest = int(input())\nfor i in range(test):\n n,q = input().split(\" \")\n n = int(n)\n q = int(q)\n patterns=[]\n for i in range(n):\n  s = get_string()\n  patterns.append(s)\n for i in range(q):\n  word = get_string()\n  closeMatches(patterns, word) \n", "# cook your dish here\nfrom difflib import get_close_matches \nimport sys \n\ndef closeMatches(patterns, word): \n print(get_close_matches(word, patterns, 1, 0.8)[0]) \n\ndef get_string(): \n return sys.stdin.readline().strip() \n \ntest = int(input())\nfor i in range(test):\n n,q = input().split(\" \")\n n = int(n)\n q = int(q)\n patterns=[]\n for i in range(n):\n  s = get_string()\n  patterns.append(s)\n for i in range(q):\n  word = get_string()\n  closeMatches(patterns, word) \n", "# cook your dish here\nfrom difflib import get_close_matches \nimport sys \n\ndef closeMatches(patterns, word): \n print(get_close_matches(word, patterns, 1, 0.8)[0]) \n\ndef get_string(): \n return sys.stdin.readline().strip() \n \ntest = int(input())\nfor i in range(test):\n n,q = input().split(\" \")\n n = int(n)\n q = int(q)\n patterns=[]\n for i in range(n):\n  s = get_string()\n  patterns.append(s)\n for i in range(q):\n  word = get_string()\n  closeMatches(patterns, word) \n", "for i in range(int(input())):\n n,q=list(map(int,input().split()))\n dicword=[]\n misp=[]\n for j in range(n):\n  dicword.append(input())\n for j in range(q):\n  misp.append(input())\n for j in range(len(misp)):\n  temp=misp[j]\n  for k in dicword:\n   err=0\n   \n   if len(k)==len(temp)+1:\n    huh=0\n    for l in range(len(temp)):\n     if temp[l]!=k[l+huh]:\n      if temp[l]==k[l+1]:\n       huh+=1\n       err+=1\n      else:\n       err+=1\n     if err>1 or huh>1:\n      break\n    if err<=1:\n     print(k)\n     break\n   elif len(k)==len(temp):\n    for l in range(len(temp)):\n     if temp[l]!=k[l]:\n      err+=1\n     if err>1:\n      break\n    if err<=1:\n     print(k)\n     break\n   else:\n    pass\n", "for i in range(int(input())):\n n,q=list(map(int,input().split()))\n dicword=[]\n misp=[]\n for j in range(n):\n  dicword.append(input())\n for j in range(q):\n  misp.append(input())\n for j in range(len(misp)):\n  temp=misp[j]\n  for k in dicword:\n   err=0\n   if len(k)==len(temp):\n    for l in range(len(temp)):\n     if temp[l]!=k[l]:\n      err+=1\n     if err>1:\n      break\n    if err<=1:\n     print(k)\n     break\n   elif len(k)==len(temp)+1:\n    huh=0\n    for l in range(len(temp)):\n     if temp[l]!=k[l+huh]:\n      if temp[l]==k[l+1]:\n       huh+=1\n       err+=1\n      else:\n       err+=1\n     if err>1 or huh>1:\n      break\n    if err<=1:\n     print(k)\n     break\n   else:\n    pass\n", "for i in range(int(input())):\n n,q=list(map(int,input().split()))\n dicword=[]\n misp=[]\n for j in range(n):\n  dicword.append(input())\n for j in range(q):\n  misp.append(input())\n for j in range(len(misp)):\n  temp=misp[j]\n  for k in dicword:\n   err=0\n   if len(k)==len(temp):\n    for l in range(len(temp)):\n     if temp[l]!=k[l]:\n      err+=1\n     if err>1:\n      break\n    if err<=1:\n     print(k)\n     break\n   elif len(k)==len(temp)+1:\n    huh=0\n    for l in range(len(temp)):\n     if temp[l]!=k[l+huh]:\n      if temp[l]==k[l+1]:\n       huh+=1\n       err+=1\n      else:\n       err+=1\n     if err>1 or huh>1:\n      break\n    if err<=1:\n     print(k)\n     break\n   else:\n    pass\n", "for i in range(int(input())):\n n,q=list(map(int,input().split()))\n dicword=[]\n misp=[]\n for j in range(n):\n  dicword.append(input())\n for j in range(q):\n  misp.append(input())\n for j in range(len(misp)):\n  temp=misp[j]\n  for k in dicword:\n   err=0\n   if len(k)==len(temp):\n    for l in range(len(temp)):\n     if temp[l]!=k[l]:\n      err+=1\n     if err>1:\n      break\n    if err<=1:\n     print(k)\n     break\n   elif len(k)==len(temp)+1:\n    huh=0\n    for l in range(len(temp)):\n     if temp[l]!=k[l+huh]:\n      if temp[l]==k[l+1]:\n       huh+=1\n       err+=1\n      else:\n       err+=1\n       #break\n      \n     if err>1 or huh>1:\n      break\n    if err<=1:\n     print(k)\n     break\n   else:\n    continue\n", "for i in range(int(input())):\n n,q = map(int,input().split())\n nn = []\n qq = []\n for j in range(n):\n  nn.append(input())\n for j in range(q):\n  qq.append(input())\n for j in qq:\n  l3 = []\n  for k in nn:\n   if len(j) < 4:\n    a,b = 1,1\n   elif len(j) < 20:\n    a,b = 2,1\n   elif len(j) < 40:\n    a,b = 3,2\n   elif len(j) <= 100:\n    a,b = 5,4\n   m = 0\n   for l in range(0,len(j),b):\n    try:\n     d = j[l:l+a]\n     m += k.count(j[l:l+a])\n    except IndexError:\n     break\n   l3.append(m)\n  print(nn[l3.index(max(l3))])", "\"\"\"\nfrom collections import Counter\ntest = int(input())\nfor _ in range(test):\n    n, q = map(int, input().split(' '))\n    correct = []\n    # corrected = set(corrected)\n    wrong = []\n    for j in range(n):\n     mydict = input()\n     if mydict not in correct:\n      correct.append(mydict)\n\n    for i in range(q):\n     misspelt = input()\n     wrong.append(misspelt)\n    for k in range(len(wrong)):\n     for j in range(len(correct)):\n      value = Counter(wrong[k]) - Counter(correct[j])\n      if len(value) == 1:\n       print(correct[j])\n      if len(value) == 0:\n       print(correct[j])\n\"\"\"\n\nfrom collections import Counter\n\ntest = int(input())\nfor _ in range(test):\n n, q = list(map(int, input().split(' ')))\n correct = []\n allcorrect = []\n allwrong = []\n # corrected = set(corrected)\n wrong = []\n for j in range(n):\n  mydict = input()\n  if mydict not in correct:\n   correct.append(mydict)\n for f in range(len(correct)):\n  allcorrect.append(Counter(correct[f]))\n\n for i in range(q):\n  misspelt = input()\n  wrong.append(misspelt)\n for s in range(len(wrong)):\n  allwrong.append(Counter(wrong[s]))\n for k in range(len(wrong)):\n  for j in range(len(correct)):\n   value = allwrong[k] - allcorrect[j]\n   if len(value) == 1:\n    print(correct[j])\n   if len(value) == 0:\n    print(correct[j])\n", "\"\"\"\nfrom collections import Counter\ntest = int(input())\nfor _ in range(test):\n    n, q = map(int, input().split(' '))\n    correct = []\n    # corrected = set(corrected)\n    wrong = []\n    for j in range(n):\n     mydict = input()\n     if mydict not in correct:\n      correct.append(mydict)\n\n    for i in range(q):\n     misspelt = input()\n     wrong.append(misspelt)\n    for k in range(len(wrong)):\n     for j in range(len(correct)):\n      value = Counter(wrong[k]) - Counter(correct[j])\n      if len(value) == 1:\n       print(correct[j])\n      if len(value) == 0:\n       print(correct[j])\n\"\"\"\n\nfrom collections import Counter\n\ntest = int(input())\nfor _ in range(test):\n n, q = list(map(int, input().split(' ')))\n correct = []\n allcorrect = []\n allwrong = []\n # corrected = set(corrected)\n wrong = []\n for j in range(n):\n  mydict = input()\n  if mydict not in correct:\n   correct.append(mydict)\n for f in range(len(correct)):\n  allcorrect.append(Counter(correct[f]))\n\n for i in range(q):\n  misspelt = input()\n  wrong.append(misspelt)\n for s in range(len(wrong)):\n  allwrong.append(Counter(wrong[s]))\n for k in range(len(wrong)):\n  for j in range(len(correct)):\n   value = allwrong[k] - allcorrect[j]\n   if len(value) == 1:\n    print(correct[j])\n   if len(value) == 0:\n    print(correct[j])\n", "from collections import Counter\ntest = int(input())\nfor _ in range(test):\n n, q = list(map(int, input().split(' ')))\n correct = []\n # corrected = set(corrected)\n wrong = []\n for j in range(n):\n  mydict = input()\n  if mydict not in correct:\n   correct.append(mydict)\n\n for i in range(q):\n  misspelt = input()\n  wrong.append(misspelt)\n for k in range(len(wrong)):\n  for j in range(len(correct)):\n   value = Counter(wrong[k]) - Counter(correct[j])\n   if len(value) == 1:\n    print(correct[j])\n   if len(value) == 0:\n    print(correct[j])\n", "# cook your dish here\nfrom difflib import get_close_matches\nfor _ in range(int(input())):\n n, q = map(int, input().split())\n mydic = {}\n vis = {}\n for i in range(n):\n  temp = input()\n  mydic[temp] = 1\n for i in range(q):\n  temp = input()\n  if temp in mydic.keys():\n   print(temp)\n  else:\n   x = get_close_matches(temp, mydic.keys(), cutoff = 0.7)\n   if len(x) > 0:\n    mydic.pop(x[0])\n    vis[x[0]] = 1\n    print(x[0])\n   else:\n    print(get_close_matches(temp, vis.keys(), cutoff = 0.7)[0])"]