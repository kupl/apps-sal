["import math\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n\ndef modin(a, m):\n    g, x, y = egcd(a, m)\n    return x % m\n# def gcdexten(a,b,x,y):\n# \tif a == 0:\n# \t\tx = 0\n# \t\ty = 1\n# \t\treturn b\n# \tx1 = y1 = 0\n# \tgcd = gcdexten(b%a,a,x1,y1)\n\n# \tx = y1 - (b/a) * x1\n# \ty = x1\n# \treturn gcd\n\n# def modin(a):\n# \tm = 10**9 + 7\n# \tx = y = 0\n# \tg = gcdexten(a,m,x,y)\n# \tres = (x%m + m)%m\n# \treturn res\n\n# void modInverse(int a, int m)\n# {\n#     int x, y;\n#     int g = gcdExtended(a, m, &x, &y);\n#     if (g != 1)\n#         cout << \"Inverse doesn't exist\";\n#     else\n#     {\n#         // m is added to handle negative x\n#         int res = (x%m + m) % m;\n#         cout << \"Modular multiplicative inverse is \" << res;\n#     }\n# }\n# int gcdExtended(int a, int b, int *x, int *y)\n# {\n#     // Base Case\n#     if (a == 0)\n#     {\n#         *x = 0, *y = 1;\n#         return b;\n#     }\n \n#     int x1, y1; // To store results of recursive call\n#     int gcd = gcdExtended(b%a, a, &x1, &y1);\n \n#     // Update x and y using results of recursive\n#     // call\n#     *x = y1 - (b/a) * x1;\n#     *y = x1;\n \n#     return gcd;\n# }\ndef combi(a,b):\n\tmod = 10**9 + 7\n\tif a < b:\n\t\treturn 0\n\tif a == 1:\n\t\treturn 1\n\tif b < a/2:\n\t\tb = a - b\n\ttemp = 1\n\tfor i in range(b + 1,a + 1):\n\t\ttemp = (temp * i%mod)%mod\n\tdenom = modin(math.factorial(a-b),mod)\n\t# print denom\n\treturn (temp%mod * denom%mod)%mod\nfor _ in range(eval(input())):\n\tmod = 10**9 + 7\n\tstring1 = input()\n\tn = len(string1)\n\tdict1 = {}\n\tcount = 0\n\talpha = set()\n\tfor ele in string1:\n\t\tif ele in dict1:\n\t\t\tdict1[ele] += 1\n\t\telse:\n\t\t\tdict1[ele] = 1\n\t\t\talpha.add(ele)\n\t\t\tcount += 1\n \n\tcount_list = []\n\ttotal = 1\n\trem = n\n\tfor ele in alpha:\n\t\ttotal = (total % mod) * (combi(rem,dict1[ele]) % mod)%mod\n\t\trem -= dict1[ele]\n\t\tcount_list.append(dict1[ele])\n \n\tsum_list = [n - count_list[0]]\n\tfor i in range(1,count):\n\t\tsum_list.append(sum_list[i - 1] - count_list[i])\n \n\tsub_2 = 0\n\tsub = 0\n\tfor i in count_list:\n\t\tsub_2 += (n - i) * i\n\tsub_2 /= 2\n\t# print sub_2\n \n\tsub_3 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_3 += count_list[i] * count_list[j] * sum_list[j]\n \n\tsub_3 = 2 * sub_3\n \n\tsub_4_4 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tfor k in range(j + 1,count):\n\t\t\t\tsub_4_4 += count_list[i] * count_list[j] * count_list[k] * sum_list[k]\n \n\tsub_4_4 *= 3\n\tsub_4_2 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_4_2 += (count_list[i] * (count_list[i] - 1) * count_list[j] * (count_list[j] - 1))/4\n \n\tsub_4_3 = 0\n\tfor i in range(count):\n\t\ttemp = 0\n\t\tfor j in range(count):\n\t\t\tif j != i:\n\t\t\t\ttemp += count_list[j] * (n - count_list[i] - count_list[j])\n\t\ttemp /= 2\n\t\tsub_4_3 += ((count_list[i] * (count_list[i] - 1)) * temp)/2\n\t\t# print sub_4_3\n\tsub_4_3 *= 2\n\t# sub_4 = ((sub_4_2%mod + sub_4_3%mod) + sub_4_4%mod)%mod\n\t# sub_tot = ((sub_2%mod + sub_3%mod)%mod + sub_4%mod)%mod\n\tsub_4 = sub_4_3 + sub_4_4 + sub_4_2\n\tsub_tot = sub_2 + sub_3 + sub_4\n\n\t# print((total * (total - 1)) - (total * sub_tot%mod))%mod\n\t# print ((total)* (total - 1 - (((sub_3 + sub_2)%mod + (sub_4_4 +sub_4_3)%mod)%mod + sub_4_2%mod)))% mod \n\tprint((total * (total - (sub_tot + 1)%mod)%mod)%mod)", "import math\ndef combi(a,b):\n\tmod = 10**9 + 7\n\tif a < b:\n\t\treturn 0\n\tif a == 1:\n\t\treturn 1\n\tif b < a/2:\n\t\tb = a - b\n\ttemp = 1\n\tfor i in range(b + 1,a + 1):\n\t\ttemp = (temp * i%mod)%mod\n\ttemp /= math.factorial(a - b)\n\treturn temp\nfor _ in range(eval(input())):\n\tmod = 10**9 + 7\n\tstring1 = input()\n\tn = len(string1)\n\tdict1 = {}\n\tcount = 0\n\talpha = set()\n\tfor ele in string1:\n\t\tif ele in dict1:\n\t\t\tdict1[ele] += 1\n\t\telse:\n\t\t\tdict1[ele] = 1\n\t\t\talpha.add(ele)\n\t\t\tcount += 1\n \n\tcount_list = []\n\ttotal = 1\n\trem = n\n\tfor ele in alpha:\n\t\ttotal = (total % mod) * (combi(rem,dict1[ele]) % mod)%mod\n\t\trem -= dict1[ele]\n\t\tcount_list.append(dict1[ele])\n \n\tsum_list = [n - count_list[0]]\n\tfor i in range(1,count):\n\t\tsum_list.append(sum_list[i - 1] - count_list[i])\n \n\tsub_2 = 0\n\tsub = 0\n\tfor i in count_list:\n\t\tsub_2 += (n - i) * i\n\tsub_2 /= 2\n\t# print sub_2\n \n\tsub_3 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_3 += count_list[i] * count_list[j] * sum_list[j]\n \n\tsub_3 = 2 * sub_3\n \n\tsub_4_4 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tfor k in range(j + 1,count):\n\t\t\t\tsub_4_4 += count_list[i] * count_list[j] * count_list[k] * sum_list[k]\n \n\tsub_4_4 *= 3\n\tsub_4_2 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_4_2 += (count_list[i] * (count_list[i] - 1) * count_list[j] * (count_list[j] - 1))/4\n \n\tsub_4_3 = 0\n\tfor i in range(count):\n\t\ttemp = 0\n\t\tfor j in range(count):\n\t\t\tif j != i:\n\t\t\t\ttemp += count_list[j] * (n - count_list[i] - count_list[j])\n\t\ttemp /= 2\n\t\tsub_4_3 += ((count_list[i] * (count_list[i] - 1)) * temp)/2\n\t\t# print sub_4_3\n\tsub_4_3 *= 2\n\t# sub_4 = ((sub_4_2%mod + sub_4_3%mod) + sub_4_4%mod)%mod\n\t# sub_tot = ((sub_2%mod + sub_3%mod)%mod + sub_4%mod)%mod\n\tsub_4 = sub_4_3 + sub_4_4 + sub_4_2\n\tsub_tot = sub_2 + sub_3 + sub_4\n\n\t# print((total * (total - 1)) - (total * sub_tot%mod))%mod\n\t# print ((total)* (total - 1 - (((sub_3 + sub_2)%mod + (sub_4_4 +sub_4_3)%mod)%mod + sub_4_2%mod)))% mod \n\tprint((total * (total - (sub_tot + 1)%mod)%mod)%mod)", "import math\ndef combi(a,b):\n\tmod = 10**9 + 7\n\tif a < b:\n\t\treturn 0\n\tif a == 1:\n\t\treturn 1\n\tif b < a/2:\n\t\tb = a - b\n\ttemp = 1\n\tfor i in range(b + 1,a + 1):\n\t\ttemp = (temp * i%mod)%mod\n\ttemp /= math.factorial(a - b)\n\treturn temp\nfor _ in range(eval(input())):\n\tmod = 10**9 + 7\n\tstring1 = input()\n\tn = len(string1)\n\tdict1 = {}\n\tcount = 0\n\talpha = set()\n\tfor ele in string1:\n\t\tif ele in dict1:\n\t\t\tdict1[ele] += 1\n\t\telse:\n\t\t\tdict1[ele] = 1\n\t\t\talpha.add(ele)\n\t\t\tcount += 1\n \n\tcount_list = []\n\ttotal = 1\n\trem = n\n\tfor ele in alpha:\n\t\ttotal = (total % mod) * (combi(rem,dict1[ele]) % mod)%mod\n\t\trem -= dict1[ele]\n\t\tcount_list.append(dict1[ele])\n \n\tsum_list = [n - count_list[0]]\n\tfor i in range(1,count):\n\t\tsum_list.append(sum_list[i - 1] - count_list[i])\n \n\tsub_2 = 0\n\tsub = 0\n\tfor i in count_list:\n\t\tsub_2 += (n - i) * i\n\tsub_2 /= 2\n\t# print sub_2\n \n\tsub_3 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_3 += count_list[i] * count_list[j] * sum_list[j]\n \n\tsub_3 = 2 * sub_3\n \n\tsub_4_4 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tfor k in range(j + 1,count):\n\t\t\t\tsub_4_4 += count_list[i] * count_list[j] * count_list[k] * sum_list[k]\n \n\tsub_4_4 *= 3\n\tsub_4_2 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_4_2 += (count_list[i] * (count_list[i] - 1) * count_list[j] * (count_list[j] - 1))/4\n \n\tsub_4_3 = 0\n\tfor i in range(count):\n\t\ttemp = 0\n\t\tfor j in range(count):\n\t\t\tif j != i:\n\t\t\t\ttemp += count_list[j] * (n - count_list[i] - count_list[j])\n\t\ttemp /= 2\n\t\tsub_4_3 += ((count_list[i] * (count_list[i] - 1)) * temp)/2\n\t\t# print sub_4_3\n\tsub_4_3 *= 2\n\t# sub_4 = ((sub_4_2%mod + sub_4_3%mod) + sub_4_4%mod)%mod\n\t# sub_tot = ((sub_2%mod + sub_3%mod)%mod + sub_4%mod)%mod\n\tsub_4 = sub_4_3 + sub_4_4 + sub_4_2\n\tsub_tot = sub_2 + sub_3 + sub_4\n\n\tprint((total * (total - 1) - (total * sub_tot%mod))%mod)\n\t# print ((total)* (total - 1 - (((sub_3 + sub_2)%mod + (sub_4_4 +sub_4_3)%mod)%mod + sub_4_2%mod)))% mod ", "import math\ndef combi(a,b):\n\tmod = 10**9 + 7\n\tif a < b:\n\t\treturn 0\n\tif a == 1:\n\t\treturn 1\n\tif b < a/2:\n\t\tb = a - b\n\ttemp = 1\n\tfor i in range(b + 1,a + 1):\n\t\ttemp = (temp * i%mod)%mod\n\ttemp /= math.factorial(a - b)\n\treturn temp\nfor _ in range(eval(input())):\n\tmod = 10**9 + 7\n\tstring1 = input()\n\tn = len(string1)\n\tdict1 = {}\n\tcount = 0\n\talpha = set()\n\tfor ele in string1:\n\t\tif ele in dict1:\n\t\t\tdict1[ele] += 1\n\t\telse:\n\t\t\tdict1[ele] = 1\n\t\t\talpha.add(ele)\n\t\t\tcount += 1\n \n\tcount_list = []\n\ttotal = 1\n\trem = n\n\tfor ele in alpha:\n\t\ttotal = (total % mod) * (combi(rem,dict1[ele]) % mod)%mod\n\t\trem -= dict1[ele]\n\t\tcount_list.append(dict1[ele])\n \n\tsum_list = [n - count_list[0]]\n\tfor i in range(1,count):\n\t\tsum_list.append(sum_list[i - 1] - count_list[i])\n \n\tsub_2 = 0\n\tsub = 0\n\tfor i in count_list:\n\t\tsub_2 += (n - i) * i\n\tsub_2 /= 2\n\t# print sub_2\n \n\tsub_3 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_3 += count_list[i] * count_list[j] * sum_list[j]\n \n\tsub_3 = 2 * sub_3\n \n\tsub_4_4 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tfor k in range(j + 1,count):\n\t\t\t\tsub_4_4 += count_list[i] * count_list[j] * count_list[k] * sum_list[k]\n \n\tsub_4_4 *= 3\n\tsub_4_2 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_4_2 += (count_list[i] * (count_list[i] - 1) * count_list[j] * (count_list[j] - 1))/4\n \n\tsub_4_3 = 0\n\tfor i in range(count):\n\t\ttemp = 0\n\t\tfor j in range(count):\n\t\t\tif j != i:\n\t\t\t\ttemp += count_list[j] * (n - count_list[i] - count_list[j])\n\t\ttemp /= 2\n\t\tsub_4_3 += ((count_list[i] * (count_list[i] - 1)) * temp)/2\n\t\t# print sub_4_3\n\tsub_4_3 *= 2\n\tsub_4 = ((sub_4_2%mod + sub_4_3%mod) + sub_4_4%mod)%mod\n\tsub_tot = ((sub_2%mod + sub_3%mod)%mod + sub_4%mod)%mod\n\n\tprint(((total * (total - 1))% mod - (total * sub_tot)%mod)%mod)\n\t# print ((total)* (total - 1 - (((sub_3 + sub_2)%mod + (sub_4_4 +sub_4_3)%mod)%mod + sub_4_2%mod)))% mod ", "import math\ndef combi(a,b):\n\tmod = 10**9 + 7\n\tif a < b:\n\t\treturn 0\n\tif a == 1:\n\t\treturn 1\n\tif b < a/2:\n\t\tb = a - b\n\ttemp = 1\n\tfor i in range(b + 1,a + 1):\n\t\ttemp = (temp * i%mod)%mod\n\ttemp /= math.factorial(a - b)\n\treturn temp\nfor _ in range(eval(input())):\n\tmod = 10**9 + 7\n\tstring1 = input()\n\tn = len(string1)\n\tdict1 = {}\n\tcount = 0\n\talpha = set()\n\tfor ele in string1:\n\t\tif ele in dict1:\n\t\t\tdict1[ele] += 1\n\t\telse:\n\t\t\tdict1[ele] = 1\n\t\t\talpha.add(ele)\n\t\t\tcount += 1\n \n\tcount_list = []\n\ttotal = 1\n\trem = n\n\tfor ele in alpha:\n\t\ttotal = (total % mod) * (combi(rem,dict1[ele]) % mod)%mod\n\t\trem -= dict1[ele]\n\t\tcount_list.append(dict1[ele])\n \n\tsum_list = [n - count_list[0]]\n\tfor i in range(1,count):\n\t\tsum_list.append(sum_list[i - 1] - count_list[i])\n \n\tsub_2 = 0\n\tsub = 0\n\tfor i in count_list:\n\t\tsub_2 += (n - i) * i\n\tsub_2 /= 2\n\t# print sub_2\n \n\tsub_3 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_3 += count_list[i] * count_list[j] * sum_list[j]\n \n\tsub_3 = 2 * sub_3\n \n\tsub_4_4 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tfor k in range(j + 1,count):\n\t\t\t\tsub_4_4 += count_list[i] * count_list[j] * count_list[k] * sum_list[k]\n \n\tsub_4_4 *= 3\n\tsub_4_2 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_4_2 += (count_list[i] * (count_list[i] - 1) * count_list[j] * (count_list[j] - 1))/4\n \n\tsub_4_3 = 0\n\tfor i in range(count):\n\t\ttemp = 0\n\t\tfor j in range(count):\n\t\t\tif j != i:\n\t\t\t\ttemp += count_list[j] * (n - count_list[i] - count_list[j])\n\t\ttemp /= 2\n\t\tsub_4_3 += ((count_list[i] * (count_list[i] - 1)) * temp)/2\n\t\t# print sub_4_3\n\tsub_4_3 *= 2\n\tprint(((total)* (total - 1 - (((sub_3 + sub_2)%mod + (sub_4_4 +sub_4_3)%mod)%mod + sub_4_2%mod)))% mod) ", "import math\ndef combi(a,b):\n\tif a < b:\n\t\treturn 0\n\tif a == 1:\n\t\treturn 1\n\tif b < a/2:\n\t\tb = a - b\n\ttemp = 1\n\tfor i in range(b + 1,a + 1):\n\t\ttemp *= i\n\ttemp /= math.factorial(a - b)\n\treturn temp\nfor _ in range(eval(input())):\n\tmod = 10**9 + 7\n\tstring1 = input()\n\tn = len(string1)\n\tdict1 = {}\n\tcount = 0\n\talpha = set()\n\tfor ele in string1:\n\t\tif ele in dict1:\n\t\t\tdict1[ele] += 1\n\t\telse:\n\t\t\tdict1[ele] = 1\n\t\t\talpha.add(ele)\n\t\t\tcount += 1\n \n\tcount_list = []\n\ttotal = 1\n\trem = n\n\tfor ele in alpha:\n\t\ttotal = (total % mod) * (combi(rem,dict1[ele]) % mod)%mod\n\t\trem -= dict1[ele]\n\t\tcount_list.append(dict1[ele])\n \n\tsum_list = [n - count_list[0]]\n\tfor i in range(1,count):\n\t\tsum_list.append(sum_list[i - 1] - count_list[i])\n \n\tsub_2 = 0\n\tsub = 0\n\tfor i in count_list:\n\t\tsub_2 += (n - i) * i\n\tsub_2 /= 2\n\t# print sub_2\n \n\tsub_3 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_3 = ((count_list[i] * count_list[j] * sum_list[j])%mod + sub_3)%mod\n \n\tsub_3 = 2 * sub_3\n \n\tsub_4_4 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tfor k in range(j + 1,count):\n\t\t\t\tsub_4_4 = (sub_4_4  +((count_list[i] * count_list[j])%mod * (count_list[k] * sum_list[k])%mod)%mod)%mod\n \n\tsub_4_4 *= 3\n\tsub_4_2 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_4_2 = (sub_4_2 + ((count_list[i] * (count_list[i] - 1))%mod * (count_list[j] * (count_list[j] - 1))%mod/4))%mod\n \n\tsub_4_3 = 0\n\tfor i in range(count):\n\t\ttemp = 0\n\t\tfor j in range(count):\n\t\t\tif j != i:\n\t\t\t\ttemp = (temp + (count_list[j] * (n - count_list[i] - count_list[j]))%mod)%mod\n\t\ttemp /= 2\n\t\tsub_4_3 = ((((count_list[i] * (count_list[i] - 1)) * temp)/2)%mod + sub_4_3)%mod\n\t\t# print sub_4_3\n\tsub_4_3 *= 2\n\tsub_4_3 %= mod\n\tprint(((total)* (total - 1 - (((sub_3 + sub_2)%mod + (sub_4_4 +sub_4_3)%mod)%mod + sub_4_2%mod)))% mod) ", "import math\ndef combi(a,b):\n\tif a < b:\n\t\treturn 0\n\tif a == 1:\n\t\treturn 1\n\tif b < a/2:\n\t\tb = a - b\n\ttemp = 1\n\tfor i in range(b + 1,a + 1):\n\t\ttemp *= i\n\ttemp /= math.factorial(a - b)\n\treturn temp\nfor _ in range(eval(input())):\n\tmod = 10**9 + 7\n\tstring1 = input()\n\tn = len(string1)\n\tdict1 = {}\n\tcount = 0\n\talpha = set()\n\tfor ele in string1:\n\t\tif ele in dict1:\n\t\t\tdict1[ele] += 1\n\t\telse:\n\t\t\tdict1[ele] = 1\n\t\t\talpha.add(ele)\n\t\t\tcount += 1\n \n\tcount_list = []\n\ttotal = 1\n\trem = n\n\tfor ele in alpha:\n\t\ttotal = (total % mod) * (combi(rem,dict1[ele]) % mod)%mod\n\t\trem -= dict1[ele]\n\t\tcount_list.append(dict1[ele])\n \n\tsum_list = [n - count_list[0]]\n\tfor i in range(1,count):\n\t\tsum_list.append(sum_list[i - 1] - count_list[i])\n \n\tsub_2 = 0\n\tsub = 0\n\tfor i in count_list:\n\t\tsub_2 += (n - i) * i\n\tsub_2 /= 2\n\t# print sub_2\n \n\tsub_3 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_3 += count_list[i] * count_list[j] * sum_list[j]\n \n\tsub_3 = 2 * sub_3\n \n\tsub_4_4 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tfor k in range(j + 1,count):\n\t\t\t\tsub_4_4 += count_list[i] * count_list[j] * count_list[k] * sum_list[k]\n \n\tsub_4_4 *= 3\n\tsub_4_2 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_4_2 += (count_list[i] * (count_list[i] - 1) * count_list[j] * (count_list[j] - 1))/4\n \n\tsub_4_3 = 0\n\tfor i in range(count):\n\t\ttemp = 0\n\t\tfor j in range(count):\n\t\t\tif j != i:\n\t\t\t\ttemp += count_list[j] * (n - count_list[i] - count_list[j])\n\t\ttemp /= 2\n\t\tsub_4_3 += ((count_list[i] * (count_list[i] - 1)) * temp)/2\n\t\t# print sub_4_3\n\tsub_4_3 *= 2\n\tprint(((total)* (total - 1 - (((sub_3 + sub_2)%mod + (sub_4_4 +sub_4_3)%mod)%mod + sub_4_2%mod)))% mod) ", "import math\ndef combi(a,b):\n\tif a < b:\n\t\treturn 0\n\tif a == 1:\n\t\treturn 1\n\tif b < a/2:\n\t\tb = a - b\n\ttemp = 1\n\tfor i in range(b + 1,a + 1):\n\t\ttemp *= i\n\ttemp /= math.factorial(a - b)\n\treturn temp\nfor _ in range(eval(input())):\n\tmod = 10**9 + 7\n\tstring1 = input()\n\tn = len(string1)\n\tdict1 = {}\n\tcount = 0\n\talpha = set()\n\tfor ele in string1:\n\t\tif ele in dict1:\n\t\t\tdict1[ele] += 1\n\t\telse:\n\t\t\tdict1[ele] = 1\n\t\t\talpha.add(ele)\n\t\t\tcount += 1\n\n\tcount_list = []\n\ttotal = 1\n\trem = n\n\tfor ele in alpha:\n\t\ttotal = (total % mod) * (combi(rem,dict1[ele]) % mod)%mod\n\t\trem -= dict1[ele]\n\t\tcount_list.append(dict1[ele])\n\n\tsum_list = [n - count_list[0]]\n\tfor i in range(1,count):\n\t\tsum_list.append(sum_list[i - 1] - count_list[i])\n\n\tsub_2 = 0\n\tsub = 0\n\tfor i in count_list:\n\t\tsub_2 += (n - i) * i\n\tsub_2 /= 2\n\t# print sub_2\n\n\tsub_3 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_3 += count_list[i] * count_list[j] * sum_list[j]\n\n\tsub_3 = 2 * sub_3\n\n\tsub_4_4 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tfor k in range(j + 1,count):\n\t\t\t\tsub_4_4 += count_list[i] * count_list[j] * count_list[k] * sum_list[k]\n\n\tsub_4_4 *= 3\n\tsub_4_2 = 0\n\tfor i in range(count):\n\t\tfor j in range(i + 1,count):\n\t\t\tsub_4_2 += (count_list[i] * (count_list[i] - 1) * count_list[j] * (count_list[j] - 1))/4\n\n\tsub_4_3 = 0\n\tfor i in range(count):\n\t\ttemp = 0\n\t\tfor j in range(count):\n\t\t\tif j != i:\n\t\t\t\ttemp += count_list[j] * (n - count_list[i] - count_list[j])\n\t\ttemp /= 2\n\t\tsub_4_3 += ((count_list[i] * (count_list[i] - 1)) * temp)/2\n\t\t# print sub_4_3\n\tsub_4_3 *= 2\n\t# for i in range(count):\n\t# \tsub_4_3 += (count_list[i] * (count_list[i] - 1)) * (n - count_list[i])\n\n\t# print total\n\t# print sub_2\n\t# print sub_3\n\t# print sub_4_2\n\t# print sub_4_3\n\t# print sub_4_4\n\tprint(((total)* (total - sub_3 - sub_2 - sub_4_4 -sub_4_3- sub_4_2-1))% mod)", "from collections import Counter\n\nclass FastScanner:\n    def __init__(self):\n        import sys\n        self.inp = sys.stdin.read().split()\n        self.readAt = -1\n    def nextInt(self):\n        self.readAt += 1\n        return int(self.inp[self.readAt])\n    def nextString(self):\n        self.readAt += 1\n        return self.inp[self.readAt]\n    def nextRange(self, n):\n        self.readAt += n\n        return self.inp[self.readAt-n+1:self.readAt+1]\n    def skip(self, n):\n        self.readAt += n\n \nclass PrintWriter:\n    def __init__(self):\n        self.pw = []\n    def println(self, n):\n        self.pw.append(n)\n    def flush(self):\n        print(\"\\n\".join(map(str, self.pw)))\n        self.pw = []\n\nclass Factorial:\n    def __init__(self, limit, MOD):\n        self.fac = [1]\n        for i in range(1, limit+1):\n            self.fac.append((i*self.fac[-1]) % MOD)\n    def __getitem__(self, n):\n        return self.fac[n]\n\ndef modInverse(n, p):\n    return pow(n, p-2, p)\n\ndef nCr(n, r, f, MOD):\n    if r>n: return 0\n    x = f[n] % MOD\n    y = f[r] % MOD\n    z = f[n-r] % MOD\n    return (x * modInverse(y, MOD) * modInverse(z, MOD)) % MOD\n\ndef main():\n    MOD = 1000000007\n    limit = 100000\n    fs = FastScanner()\n    pw = PrintWriter()\n    f = Factorial(limit, MOD)\n    t = fs.nextInt()\n    for i in range(t):\n        A = fs.nextString()\n        n = len(A)\n        mapp = Counter(A)\n        combs = f[n]\n        sim2 = nCr(n, 2, f, MOD)\n        sim3 = nCr(n, 3, f, MOD)\n        sim4 = nCr(n, 4, f, MOD) * 3\n        nm2c2 = nCr(n-2, 2, f, MOD)\n        for i in mapp:\n            combs = (combs * modInverse(f[mapp[i]], MOD)) % MOD\n            ncr2 = nCr(mapp[i], 2, f, MOD)\n            rest = n - mapp[i]\n            sim2 -= ncr2\n            sim3 -= ncr2*rest\n            sim4 -= ((nm2c2 * ncr2) % MOD)\n            ncr3 = nCr(mapp[i], 3, f, MOD)\n            sim3 -= ncr3\n            ncr4 = nCr(mapp[i], 4, f, MOD)\n            sim4 += ((ncr4 * 3) % MOD)\n        summ = ((combs * (combs-1)) % MOD)\n        sim2 = ((combs * sim2 * 1) % MOD)\n        sim3 = ((combs * sim3 * 2) % MOD)\n        sim4 = ((combs * sim4) % MOD)\n        pw.println((summ - (sim2 + sim3 + sim4)) % MOD)\n    pw.flush()\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ndef extended_gcd(aa, bb):\n    lastremainder, remainder = abs(aa), abs(bb)\n    x, lastx, y, lasty = 0, 1, 1, 0\n    while remainder:\n        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)\n        x, lastx = lastx - quotient*x, x\n        y, lasty = lasty - quotient*y, y\n    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)\ndef modinv(a, m):\n\tg, x, y = extended_gcd(a, m)\n\tif g != 1:\n\t\traise ValueError\n\treturn x % m\naa,bb,mod=500,300,10**9+7\nfact=[1]\nfor i in range(1,pow(10,5)+10):\n    fact.append((fact[i-1]*i)%mod)\nfor _ in range(int(sys.stdin.readline())):\n    s=list(map(str,sys.stdin.readline().split()))[0]\n    ch=[0]*26\n    for i in s:\n        ch[ord(i)-97]+=1\n    n=len(s)\n    ans,zero=0,1\n    total=fact[n]\n    for i in range(26):\n        if ch[i]>0:\n            total=(total*modinv(fact[ch[i]],mod))%mod\n    for i in range(26):\n        if ch[i]>0:\n            for j in range(i+1,26):\n                if ch[j]>0:\n                    ans=(ans+ch[i]*ch[j])%mod\n                    ans=(ans+((((((ch[i]*ch[j]%mod)*(ch[i]-1)%mod)*(ch[j]-1))%mod)*250000002)%mod))%mod\n                    for k in range(j+1,26):\n                        if ch[k]>0:\n                            ans=(ans+(((ch[i]*ch[j]%mod)*ch[k]%mod)*2)%mod)%mod\n                            ans=(ans+(((ch[i]*ch[j]%mod)*ch[k]%mod)*(ch[i]-1))%mod)%mod\n                            ans=(ans+(((ch[i]*ch[j]%mod)*ch[k]%mod)*(ch[j]-1))%mod)%mod\n                            ans=(ans+(((ch[i]*ch[j]%mod)*ch[k]%mod)*(ch[k]-1))%mod)%mod\n                            for l in range(k+1,26):\n                                if ch[l]>0:\n                                    ans=(ans+(((((ch[i]*ch[j]%mod)*ch[k]%mod)*ch[l])%mod)*3)%mod)%mod\n    print((pow(total,2,mod)-((ans+zero)%mod*total%mod)%mod)%mod)", "M=1000000007\ndef f(n,r):\n\tif n==0:\n\t\treturn 0\n\tif (r>n/2) :\n\t\tr=n-r\n\tif r==0:\n\t\treturn 1\n\tif r>n :\n\t\treturn 0\n\ta=1\n\tj=2\n\tfor i in range(0,r):\n\t\ta=a*n\n\t\tn=n-1\n\t\twhile(a%j==0 and j<=r):\n\t\t\ta=a/j\n\t\t\tj=j+1\n\treturn a%M\nT=int(eval(input()))\nfor i in range(0,T):\n\tA=input()\n\ta = [0 for i in range(0,26)]\n\tfor letter in A:\n\t\ta[ord(letter)-ord('a')]=a[ord(letter)-ord('a')]+1\n\tnways=1\n\tk=len(A)\n\tfor i in range(0,26):\n\t\tnways = (nways * f(k,a[i]))%M\n\t\tk=k-a[i]\n\t\tif k==0:\n\t\t\tbreak\n\td2=0\n\td3=0\n\td4=0\n\td211=0\n\td22=0\n\tfor i in range(0,26):\n\t\tfor j in range(i+1,26):\n\t\t\td2 = (d2 + ((a[i]*a[j])%M) )%M\n\t\t\td22 = (d22 + ((f(a[i],2)*f(a[j],2))%M) )%M\n\t\t\tfor k in range(j+1,26):\n\t\t\t\td3 = (d3 + (( a[k]*((a[i]*a[j])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[k],2)*((a[i]*a[j])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[j],2)*((a[k]*a[i])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[i],2)*((a[j]*a[k])%M) )%M) )%M\n\t\t\t\tfor l in range(k+1,26):\n\t\t\t\t\td4 = (d4 + (( ((a[i]*a[j])%M) * ((a[k]*a[l])%M) )%M) )%M\n\tans = (1 + d2 + (d3*2) + (d4*3) + (d211*2) + d22 )%M\n\tans = (nways - ans + M)%M\n\tans = (nways * ans)%M\n\tprint(ans)", "from math import factorial as ff\nfrom itertools import permutations as p\nfrom itertools import combinations as cc\na=ff(4)%10\nauthor='biggy_bs'\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n \ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\ndef factorialMod(n, modulus):\n    ans=1\n    l=[]\n    if n <= modulus//2:\n        #calculate the factorial normally (right argument of range() is exclusive)\n        for i in range(1,n+1):\n            ans = (ans * i) % modulus\n            l.append(ans)\n    return l\ndef precomputation():\n    nC2=[0]*100002\n    nC3=[0]*100002\n    nC4=[0]*100002\n    for i in range(100002):\n        if i>=1:\n            nC2[i]=((i)*(i-1))/2\n        else:\n            nC2[i]=0\n        if i>=2:\n            nC3[i]=(i*(i-1)*(i-2))/6\n        else:\n            nC3[i]=0\n        if i>=3:\n            nC4[i]=(i*(i-1)*(i-2)*(i-3))/24\n        else:\n            nC4[i]=0\n    return (nC2,nC3,nC4)\ndef count_two(arr,mod):\n    ans=0\n    for i in range(26):\n        if arr[i]==0:\n            continue\n        for j in range(i+1,26):\n            if arr[j]==0:\n                continue\n            ans=(ans+arr[i]*arr[j])%mod\n            ans=(ans+((((((arr[i]*arr[j]%mod)*(arr[i]-1)%mod ) * (arr[j]-1))%mod) * modinv(4,mod))%mod))%mod\n            for k in range(j+1,26):\n                if arr[k]==0:\n                    continue\n                ans=(ans +(((arr[i]*arr[j]%mod)*arr[k]%mod)*2)%mod)%mod\n                ans=(ans +(((arr[i]*arr[j]%mod)*arr[k]%mod)*(arr[i]-1))%mod)%mod\n                ans=(ans +(((arr[i]*arr[j]%mod)*arr[k]%mod)*(arr[j]-1))%mod)%mod\n                ans=(ans +(((arr[i]*arr[j]%mod)*arr[k]%mod)*(arr[k]-1))%mod)%mod\n                for l in range(k+1,26):\n                    if arr[l]==0:\n                        continue\n                    ans=(ans+(((((arr[i]*arr[j]%mod)*arr[k]%mod)*arr[l])%mod)*3)%mod)%mod\n    return ans\n                      \nmod=10**9+7\nfact=factorialMod(100002,mod)\npre=precomputation()\nnC2=pre[0]\nnC3=pre[1]\nnC4=pre[2]\nf=[0]*100002\nt=eval(input());dic={}\nwhile t>0:\n    t-=1\n    s=input()\n    len_s=len(s)\n    dic={}\n    arr=[0]*26\n    for i in s:\n        try:\n            dic[i]+=1\n        except:\n            dic[i]=1\n    for i in s:\n        arr[ord(i)-97]+=1\n    answer_two=count_two(arr,mod)\n    answer_two=(answer_two%mod + 1%mod)%mod\n    count_one=0\n    for i in range(26):\n        try:\n            qww=dic[chr(i+97)]%mod\n            for j in range(i+1,26):\n                try:\n                    count_one=(count_one%mod + qww*dic[chr(j+97)]%mod)%mod\n                except:\n                    break\n        except:\n            break\n    xxx=fact[len_s-1]%mod\n    for i in dic:\n        xxx=(xxx%mod * modinv(fact[dic[i]-1]%mod,mod))%mod\n    ans=(xxx*xxx)%mod\n    #print count_one\n    zero=xxx\n    one=(xxx * count_one%mod)%mod\n    if len(dic)==len_s:\n        aa=len_s-2\n        two=(aa%mod * (aa+1)%mod *(aa+2)%mod * (3*aa + 5)%mod * modinv(24,mod))%mod\n        #print two\n    elif len(dic)==2 and ((dic[s[0]]==1) or dic[s[0]]==len_s-1 or dic[s[0]]==len_s):\n        two=0\n    else:\n        two=1\n    two=(two%mod * xxx)%mod\n    answer_two=(answer_two%mod * xxx%mod)%mod\n    ct=0\n    if len_s<=3:\n        print(0)\n    else:\n        print((ans-(answer_two)%mod)  % mod)  \n", "from math import factorial as ff\nfrom itertools import permutations as p\nfrom itertools import combinations as cc\na=ff(4)%10\nauthor='biggy_bs'\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n \ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\ndef factorialMod(n, modulus):\n    ans=1\n    l=[]\n    if n <= modulus//2:\n        #calculate the factorial normally (right argument of range() is exclusive)\n        for i in range(1,n+1):\n            ans = (ans * i) % modulus\n            l.append(ans)\n    return l\ndef precomputation():\n    nC2=[0]*100002\n    nC3=[0]*100002\n    nC4=[0]*100002\n    for i in range(100002):\n        if i>=1:\n            nC2[i]=((i)*(i-1))/2\n        else:\n            nC2[i]=0\n        if i>=2:\n            nC3[i]=(i*(i-1)*(i-2))/6\n        else:\n            nC3[i]=0\n        if i>=3:\n            nC4[i]=(i*(i-1)*(i-2)*(i-3))/24\n        else:\n            nC4[i]=0\n    return (nC2,nC3,nC4)\ndef count_two(arr,mod):\n    ans=0\n    for i in range(26):\n        if arr[i]==0:\n            continue\n        for j in range(i+1,26):\n            if arr[j]==0:\n                continue\n            ans=(ans+arr[i]*arr[j])%mod\n            ans=(ans+((((((arr[i]*arr[j]%mod)*(arr[i]-1)%mod ) * (arr[j]-1))%mod) * modinv(4,mod))%mod))%mod\n            for k in range(j+1,26):\n                if arr[k]==0:\n                    continue\n                ans=(ans +(((arr[i]*arr[j]%mod)*arr[k]%mod)*2)%mod)%mod\n                ans=(ans +(((arr[i]*arr[j]%mod)*arr[k]%mod)*(arr[i]-1))%mod)%mod\n                ans=(ans +(((arr[i]*arr[j]%mod)*arr[k]%mod)*(arr[j]-1))%mod)%mod\n                ans=(ans +(((arr[i]*arr[j]%mod)*arr[k]%mod)*(arr[k]-1))%mod)%mod\n                for l in range(k+1,26):\n                    if arr[l]==0:\n                        continue\n                    ans=(ans+(((((arr[i]*arr[j]%mod)*arr[k]%mod)*arr[l])%mod)*3)%mod)%mod\n    return ans\n                      \nmod=10**9+7\nfact=factorialMod(100002,mod)\npre=precomputation()\nnC2=pre[0]\nnC3=pre[1]\nnC4=pre[2]\nf=[0]*100002\nt=eval(input());dic={}\nwhile t>0:\n    t-=1\n    s=input()\n    len_s=len(s)\n    if len_s>100:\n        pass\n    dic={}\n    arr=[0]*26\n    for i in s:\n        try:\n            dic[i]+=1\n        except:\n            dic[i]=1\n    for i in s:\n        arr[ord(i)-97]+=1\n    answer_two=count_two(arr,mod)\n    answer_two=(answer_two%mod + 1%mod)%mod\n    count_one=0\n    for i in range(26):\n        try:\n            qww=dic[chr(i+97)]%mod\n            for j in range(i+1,26):\n                try:\n                    count_one=(count_one%mod + qww*dic[chr(j+97)]%mod)%mod\n                except:\n                    break\n        except:\n            break\n    xxx=fact[len_s-1]%mod\n    for i in dic:\n        xxx=(xxx%mod * modinv(fact[dic[i]-1]%mod,mod))%mod\n    ans=(xxx*xxx)%mod\n    #print count_one\n    zero=xxx\n    one=(xxx * count_one%mod)%mod\n    if len(dic)==len_s:\n        aa=len_s-2\n        two=(aa%mod * (aa+1)%mod *(aa+2)%mod * (3*aa + 5)%mod * modinv(24,mod))%mod\n        #print two\n    elif len(dic)==2 and ((dic[s[0]]==1) or dic[s[0]]==len_s-1 or dic[s[0]]==len_s):\n        two=0\n    else:\n        two=1\n    two=(two%mod * xxx)%mod\n    answer_two=(answer_two%mod * xxx%mod)%mod\n    ct=0\n    if len_s<=3:\n        print(0)\n    else:\n        print((ans-(answer_two)%mod)  % mod)  \n", "M=1000000007\ndef f(n,r):\n\tif n==0:\n\t\treturn 0\n\tif r==0:\n\t\treturn 1\n\tif r>n :\n\t\treturn 0\n\tif (r>n/2) :\n\t\tr=n-r\n\ta=1\n\tj=2\n\tfor i in range(0,r):\n\t\ta=a*n\n\t\tn=n-1\n\t\twhile(a%j==0 and j<=r):\n\t\t\ta=a/j\n\t\t\tj=j+1\n\treturn a%M\nT=int(eval(input()))\nfor i in range(0,T):\n\tA=input()\n\ta = [0 for i in range(0,26)]\n\tfor letter in A:\n\t\ta[ord(letter)-ord('a')]=a[ord(letter)-ord('a')]+1\n\tnways=1\n\tk=len(A)\n\tfor i in range(0,26):\n\t\tnways = (nways * f(k,a[i]))%M\n\t\tk=k-a[i]\n\t\tif k==0:\n\t\t\tbreak\n\td2=0\n\td3=0\n\td4=0\n\td211=0\n\td22=0\n\tfor i in range(0,26):\n\t\tfor j in range(i+1,26):\n\t\t\td2 = (d2 + ((a[i]*a[j])%M) )%M\n\t\t\td22 = (d22 + ((f(a[i],2)*f(a[j],2))%M) )%M\n\t\t\tfor k in range(j+1,26):\n\t\t\t\td3 = (d3 + (( a[k]*((a[i]*a[j])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[k],2)*((a[i]*a[j])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[j],2)*((a[k]*a[i])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[i],2)*((a[j]*a[k])%M) )%M) )%M\n\t\t\t\tfor l in range(k+1,26):\n\t\t\t\t\td4 = (d4 + (( ((a[i]*a[j])%M) * ((a[k]*a[l])%M) )%M) )%M\n\tans = (1 + d2 + (d3*2) + (d4*3) + (d211*2) + d22 )%M\n\tans = (nways - ans + M)%M\n\tans = (nways * ans)%M\n\tprint(ans)", "M=1000000007\ndef f(n,r):\n\tif n==0:\n\t\treturn 0\n\tif r==0:\n\t\treturn 1\n\tif r>n :\n\t\treturn 0\n\tif (r>n/2) :\n\t\tr=n-r\n\ta=1;\n\tfor i in range(0,r):\n\t\ta=a*n\n\t\tn=n-1\n\tfor i in range(0,r):\n\t\ta=(a/(i+1))\n\treturn a%M\nT=int(eval(input()))\nfor i in range(0,T):\n\tA=input()\n\ta = [0 for i in range(0,26)]\n\tfor letter in A:\n\t\ta[ord(letter)-ord('a')]=a[ord(letter)-ord('a')]+1\n\tnways=1\n\tk=len(A)\n\tfor i in range(0,26):\n\t\tnways = (nways * f(k,a[i]))%M\n\t\tk=k-a[i]\n\t\tif k==0:\n\t\t\tbreak\n\td2=0\n\td3=0\n\td4=0\n\td211=0\n\td22=0\n\tfor i in range(0,26):\n\t\tfor j in range(i+1,26):\n\t\t\td2 = (d2 + ((a[i]*a[j])%M) )%M\n\t\t\td22 = (d22 + ((f(a[i],2)*f(a[j],2))%M) )%M\n\t\t\tfor k in range(j+1,26):\n\t\t\t\td3 = (d3 + (( a[k]*((a[i]*a[j])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[k],2)*((a[i]*a[j])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[j],2)*((a[k]*a[i])%M) )%M) )%M\n\t\t\t\td211 = (d211 + (( f(a[i],2)*((a[j]*a[k])%M) )%M) )%M\n\t\t\t\tfor l in range(k+1,26):\n\t\t\t\t\td4 = (d4 + (( ((a[i]*a[j])%M) * ((a[k]*a[l])%M) )%M) )%M\n\tans = (1 + d2 + (d3*2) + (d4*3) + (d211*2) + d22 )%M\n\tans = (nways - ans + M)%M\n\tans = (nways * ans)%M\n\tprint(ans)", "def power(a,b):\n    modu=1000000007\n    res=1;\n    while(b>0):\n        if(b&1!=0):\n            res=(res*a)%modu\n        a=(a*a)%modu\n        b>>=1\n    return res\nmodu=1000000007\nfactorial=[0]*100010\nfactorial[0]=1\nfor i in range(1,100010):\n    factorial[i]=(factorial[i-1]*i)%modu\ntest=int(input())\nfor tst in range(test):\n    has=[0]*30\n    st=input()\n    for i in st:\n        has[ord(i)-ord('a')]+=1\n    neeche=1\n    for i in range(26):\n            neeche=(neeche*factorial[has[i]])%modu\n    final=(factorial[len(st)]*power(neeche,modu-2))%modu\n    minus=1\n    for i in range(26):\n            for j in range(i+1,26):\n                minus=(minus+has[i]*has[j])%modu\n    for i in range(26):\n            for j in range(i+1,26):\n                for k in range(j+1,26):\n                    minus=(minus+has[i]*has[j]*has[k]*2)%modu\n    mul =0\n    for i in range(26):\n            for j in range(i+1,26):\n                for k in range(0,26):\n                    if(k!=i and k!=j):\n                        for l in range(k+1,26):\n                            if(l!=i and l!=j):\n                                mul=(mul+has[i]*has[j]*has[k]*has[l])%(2*modu);\n                            \n    mul/=2\n    minus=(minus+mul)%modu\n    mul=0\n    for i in range(26):\n            if(has[i]>1):\n                for j in range(26):\n                    if(j!=i):\n                        for k in range(j+1,26):\n                            if(k!=i):\n                                mul=(mul+(has[i]*(has[i]-1)/2)*has[j]*has[k])%modu\n    minus=(minus+mul*2)%modu\n    mul=0\n    for i in range(26):\n            for j in range(i+1,26):\n                if(has[i]>=2 and  has[j]>=2):\n                            mul=(mul+((has[i]*(has[i]-1))/2)*((has[j]*(has[j]-1))/2))%modu\n    minus=(minus+mul)%modu\n    mul=final-minus\n    if(mul<0):\n            mul+=modu\n    ans=(final*mul)%modu\n    print(ans)\n    ", "#pradeep singh NIT trichy\n#pradeepsng30@yahoo.com\n\np=1000000007\nmod=p;\n\ndef fact(n):\n\tf=1\n\ti=2\n\twhile (i<=n):\n\t\tf=f*i\n\t\tf=f%mod\n\t\ti=i+1\n\treturn f\n\t\t\n\ndef perm_count(orig_list, k):\n\n\tmaster_list  = []\n\tmaster_list.append(list(orig_list))\n\twhile k > 0:\n\t    big_list = list(master_list) \n\t    for each_list in big_list: \n\t        for each_temp_list in permuter(each_list):\n\t            if each_temp_list not in master_list:\n\t                master_list.append(each_temp_list)\n\t                \n\t\n\t    k-=1\n\t\n\ttotal_count = len(master_list)\n#\tprint sorted(master_list) #If you need a sanity check, feel free to leave out\n\treturn total_count\n\t#end perm_count\n\ndef permuter(my_list):#returns a list of lists\n    lists_list = []\n   \n    for i in range(len(my_list)):\n        for j in range(len(my_list)):\n            temp_list = my_list[:]\n            if i != j:\n                temp_list[i],temp_list[j] = temp_list[j],temp_list[i]\n            if temp_list not in lists_list:\n                lists_list.append(list(temp_list))\n\n    return lists_list\n\n\n\n\ndef modInv(x):\n\ty = pow(x, p-2, p)\n\treturn y\n\t\n\n\ndef numP(wordArray):\n\n\tletterOccurances = list()\n# List of letters that have been counted in wordArray\n\tcountedLetters = list()\n\t\n\twordLength = len(wordArray)\n\t\n\tnumerator = fact(wordLength)%mod\n\t\n# Loops through wordArray, counts how many times a letter occurs, skips over\n# already counted letters using a list of such letters (list updated each time) \n\tfor letter in wordArray:\n\t    if letter in countedLetters:\n\t        continue\n\t    letterOccurances.append(wordArray.count(letter))\n\t    countedLetters.append(letter)\n\t\n\t# Denominator of final formula\n\tdenominator = 1\n\tANS=1\n\tANS=numerator\n#\tmodInv(900)\n#\tprint \"here\"\n\tfor i in letterOccurances:\n\t\tANS=ANS*modInv(fact(i))%mod\n\t    #denominator = (denominator * math.factorial(i))\n\t\n\treturn ANS\t\n    \t\n    \t\n    \n    \n    \ndef ans(a):\n#\tprint \"here\"\n\tif(len(a)<4):\n\t\treturn 0\n#\treturn 0\n\tmylist=list(a)\n\tn=numP(mylist)\n#\tn=24\n\tm=perm_count(mylist,2)%mod\n\treturn (n*(n-m))%mod\n\t\n\n\nt = int(input())\n#print t\n\nwhile (t>0):\n\ta=input()\n#\tprint a\n\tprint(ans(a))\n\t#print \"\\n\"\n\tt=t-1\n#print perm_count(D,2)", "factorial, mod = [1], 10 ** 9 + 7\nfor i in range(1, 112345):\n\tfactorial.append(factorial[-1] * i)\n\tfactorial[-1] %= mod\n\nfor _ in range(eval(input())):\n\tX = [0 for i in range(26)]\n\tfor x in input():\n\t\tX[ord(x) - ord('a')] += 1\n\tans = 1\n\tfor i in range(26):\n\t\tfor j in range(i + 1, 26):\n\t\t\tans += X[i] * X[j]\n\tfor i in range(26):\n\t\tfor j in range(i + 1, 26):\n\t\t\tfor k in range(j + 1, 26):\n\t\t\t\tans += X[i] * X[j] * X[k] * 2\n\tfor i in range(26):\n\t\tfor j in range(i + 1, 26):\n\t\t\tans += (X[i] * (X[i] - 1) * X[j] * (X[j] - 1)) / 4\n\tfor i in range(26):\n\t\tfor j in range(i + 1, 26):\n\t\t\tfor k in range(j + 1, 26):\n\t\t\t\tans += ((X[i] * X[j] * X[k]) * (X[i] + X[j] + X[k] - 3))\n\tfor i in range(26):\n\t\tfor j in range(i + 1, 26):\n\t\t\tfor k in range(j + 1, 26):\n\t\t\t\tfor l in range(k + 1, 26):\n\t\t\t\t\tans += X[i] * X[j] * X[k] * X[l] * 3\n\tstuff = factorial[sum(X)]\n\tfor x in X:\n\t\tif x:\n\t\t\tstuff *= pow(factorial[x], mod - 2, mod)\n\tstuff %= mod\n\tprint(stuff * (stuff - ans) % mod)\n\n\t", "from math import factorial as ff\nfrom itertools import permutations as p\nfrom itertools import combinations as cc\na=ff(4)%10\nauthor='biggy_bs'\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n\ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\ndef factorialMod(n, modulus):\n    ans=1\n    if n <= modulus//2:\n        #calculate the factorial normally (right argument of range() is exclusive)\n        for i in range(1,n+1):\n            ans = (ans * i) % modulus   \n    else:\n        #Fancypants method for large n\n        for i in range(1,modulus-n):\n            ans = (ans * i) % modulus\n        ans = modinv(ans, modulus)\n \n        #Since m is an odd-prime, (-1)^(m-n) = -1 if n is even, +1 if n is odd\n        if n % 2 == 0:\n            ans = -1*ans + modulus\n    return ans % modulus\nmod=10**9+7\n\nt=eval(input());dic={}\nwhile t>0:\n    t-=1\n    s=input()\n    if len(s)<=100:\n        uy=''\n        for i in range(len(s)):\n            uy+=str(i)\n        #xxx=p(s,len(s))\n        xxc=cc(uy,2)\n        rtt=[]\n        for i in xxc:\n            rtt.append(i)\n        a=[]\n        #for i in xxx:\n        #    a.append(''.join(i))\n        #a=set(a)\n        #a=list(a)\n        ans_ct=0\n        s=list(s)\n        flag=0\n        lul=[]\n        for ii in rtt:\n            temp1=s[:]\n            temp1[int(ii[0])],temp1[int(ii[1])]=temp1[int(ii[1])],temp1[int(ii[0])]\n            lul.append(''.join(temp1))\n            for jj in rtt:\n                temp2=temp1[:]\n                temp2[int(jj[0])],temp2[int(jj[1])]=temp2[int(jj[1])],temp2[int(jj[0])]\n                lul.append(''.join(temp2))\n        #print ans_ct\n        ans_ct=len(set(lul))\n        dic={}\n        for i in s:\n            try:\n                dic[i]+=1\n            except:\n                dic[i]=1\n        xxx=factorialMod(len(s),mod)\n        for i in dic:\n            xxx=(xxx%mod * modinv(factorialMod(dic[i],mod),mod))%mod\n        ans=(xxx*xxx)%mod\n        ct=0\n        if len(s)<=3:\n            print(0)\n        else:\n            print((ans-(ans_ct*xxx)%mod)  % mod)  \n", "from math import factorial as ff\nfrom itertools import permutations as p\nfrom itertools import combinations as cc\na=ff(4)%10\nauthor='biggy_bs'\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n\ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\ndef factorialMod(n, modulus):\n    ans=1\n    if n <= modulus//2:\n        #calculate the factorial normally (right argument of range() is exclusive)\n        for i in range(1,n+1):\n            ans = (ans * i) % modulus   \n    else:\n        #Fancypants method for large n\n        for i in range(1,modulus-n):\n            ans = (ans * i) % modulus\n        ans = modinv(ans, modulus)\n \n        #Since m is an odd-prime, (-1)^(m-n) = -1 if n is even, +1 if n is odd\n        if n % 2 == 0:\n            ans = -1*ans + modulus\n    return ans % modulus\nmod=10**9+7\n\nt=eval(input());dic={}\nwhile t>0:\n    t-=1\n    s=input()\n    if len(s)<=10:\n        uy=''\n        for i in range(len(s)):\n            uy+=str(i)\n        #xxx=p(s,len(s))\n        xxc=cc(uy,2)\n        rtt=[]\n        for i in xxc:\n            rtt.append(i)\n        a=[]\n        #for i in xxx:\n        #    a.append(''.join(i))\n        #a=set(a)\n        #a=list(a)\n        ans_ct=0\n        s=list(s)\n        flag=0\n        lul=[]\n        for ii in rtt:\n            temp1=s[:]\n            temp1[int(ii[0])],temp1[int(ii[1])]=temp1[int(ii[1])],temp1[int(ii[0])]\n            lul.append(''.join(temp1))\n            for jj in rtt:\n                temp2=temp1[:]\n                temp2[int(jj[0])],temp2[int(jj[1])]=temp2[int(jj[1])],temp2[int(jj[0])]\n                lul.append(''.join(temp2))\n        #print ans_ct\n        ans_ct=len(set(lul))\n        dic={}\n        for i in s:\n            try:\n                dic[i]+=1\n            except:\n                dic[i]=1\n        xxx=factorialMod(len(s),mod)\n        for i in dic:\n            xxx=(xxx%mod * modinv(factorialMod(dic[i],mod),mod))%mod\n        ans=(xxx*xxx)%mod\n        ct=0\n        if len(s)<=3:\n            print(0)\n        else:\n            print((ans-(ans_ct*xxx)%mod)  % mod)  \n", "def exp(a,p,m):\n    ans = 1\n    while(p!=0):\n        if(p%2==1):\n            ans*=a\n            ans%=mod\n        a*=a\n        a%=mod\n        p>>=1\n    return ans\nmod = (10**9)+7\nfact = [1]\nfor i in range(1,1+(10**5)):\n    x = fact[-1]\n    x = (x*i)%mod\n    fact += [x]\ninv_fact = []\nfor i in fact:\n    x = exp(i,mod-2,mod)\n    inv_fact += [x]\nt = eval(input())\nfor _ in range(t):\n    s = input()\n    hs = [0]*26\n    for i in s:\n        x = ord(i) - 97\n        hs[x]+=1\n    l = len(s)\n    tot_num = fact[l]\n    for i in hs:\n        tot_num *= inv_fact[i]\n        tot_num %= mod\n    xy = 1\n    for i in range(26):\n        for j in range(i+1,26):\n            xy += (hs[i]*hs[j])\n            xy %= mod\n    for i in range(26):\n        for j in range(i+1,26):\n            for k in range(j+1,26):\n                xy += (hs[i]*hs[j]*hs[k]*2)\n                xy %= mod\n    for i in range(26):\n        for j in range(i+1,26):\n            x = (hs[i]*(hs[i]-1))/2\n            x %= mod\n            y = (hs[j]*(hs[j]-1))/2\n            y %= mod\n            x*=y\n            x%=mod\n            xy+=x\n            xy%=mod\n    for i in range(26):\n        for j in range(26):\n            for k in range(j+1,26):\n                if(i!=j and i!=k):\n                    x = hs[i]*(hs[i]-1)\n                    x%=mod\n                    x*=hs[j]\n                    x%=mod\n                    x*=hs[k]\n                    x%=mod\n                    xy+=x\n                    xy%=mod\n    for a in range(26):\n        for b in range(a+1,26):\n            for c in range(b+1,26):\n                for d in range(c+1,26):\n                    x = (hs[a]*hs[b])%mod\n                    x *= hs[c]\n                    x %= mod\n                    x *= hs[d]\n                    x%=mod\n                    x*=3\n                    x%=mod\n                    xy+=x\n                    xy%=mod\n    t1 = (tot_num*tot_num)%mod\n    t2 = (tot_num *xy)%mod\n    t1-=t2\n    while(t1<0):\n        t1+=mod\n    print(t1)\n", "import math\nMAX=((10**9)+7)\nt=int(input())\nwhile t>0:\n    x=input()\n    d={};count=0\n    l=len(x)\n    for item in range(l):\n        flag=0\n        for i in d:\n            if i==x[item]:\n                flag=1\n                d[i]+=1\n                break\n        if flag==0:\n            d.fromkeys(x[item])\n            d[x[item]]=1\n    y=[]\n    for item in d:\n        y.append(d[item])\n    prod=1\n    q=len(y)\n    for item in range(q):\n        prod*=math.factorial(y[item])        \n        if y[item]>1:\n            count+=1\n    def bruce():\n        Sum2=0;Sum3=0;Sum4=0;Sum5=0;Sum6=0\n        for i in range(q):\n            temp3=0\n            if y[i]>1:\n                temp3=y[i]*((y[i]-1)/2)\n            for j in range(i+1,q):\n                temp1=0;temp2=0\n                Sum2+=y[i]*y[j]\n                if y[i]>1:\n                    temp1=y[i]*(y[i]-1)/2\n                if y[j]>1:\n                    temp2=y[j]*(y[j]-1)/2\n                Sum5+=temp1*temp2\n                for k in range(j+1,q):\n                    Sum3+=y[i]*y[j]*y[k]\n                    #print y[i],y[j],y[k]\n                    if y[i]>1:\n                        Sum6+=(y[i]*(y[i]-1))/2*y[j]*y[k]\n                        #print Sum6\n                    if y[j]>1:\n                        Sum6+=y[i]*(y[j]*(y[j]-1))/2*y[k]\n                    #print Sum6\n                    if y[k]>1:\n                        Sum6+=y[i]*y[j]*(y[k]*(y[k]-1))/2\n                    #print Sum6\n                    for z in range(k+1,q):\n                        Sum4+=y[i]*y[j]*y[k]*y[z]\n        #print \"Sum2=%d,Sum3=%d,Sum4=%d,Sum5=%d,Sum6=%d\"%(Sum2,Sum3,Sum4,Sum5,Sum6)\n        return ((Sum2%MAX+(Sum3*2)%MAX+(Sum4*3)%MAX+Sum5%MAX+(Sum6*2)%MAX))\n    ans1=bruce()\n    fact=math.factorial(l)\n    #print \"fact=%d,prod=%d\"%(fact,prod)\n    ast=fact/prod\n    #print ast\n    temp=(((ast)%MAX)*((ast-1)%MAX))%MAX\n    RRR=((ast%MAX)*(ans1%MAX))%MAX\n    ans=(temp-RRR+MAX)%MAX\n    print(ans)\n    t-=1\n"]