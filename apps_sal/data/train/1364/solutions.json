["t = int(input())\n\nfor i in range(t):\n n, c = list(map(int,input().split()))\n\n pts = {}\n moves = 0\n\n for i in range(n):\n  x, y = list(map(int,input().split()))\n  if (y-x,x%c) in pts:\n   pts[(y-x,x%c)].append(x)\n  else:\n   pts[(y-x,x%c)] = [x]\n \n for i in pts:\n  arc = sorted(pts[i])\n  \n  for j in arc:\n   moves = moves + abs((j-arc[len(arc)//2]))//c\n \n print(len(pts),moves)\n\n\n   \n\n\n", "for _ in range(int(input())):\n n,c = map(int , input().split())\n pts_line,summation = {},0\n for _ in range(n):\n  x,y = map(int , input().split())\n  if((y - x, x % c) in pts_line):\n   pts_line[(y - x,x % c)].append(x)\n  else:\n   pts_line[(y - x,x % c)] = [x]\n for pt in pts_line:\n  arc = sorted(pts_line[pt])\n  for metre in arc:\n   summation += abs(metre - arc[len(arc)//2])//c\n print(len(pts_line),summation)", "# cook your dish here\nt=int(input())\nfor _ in range(t):\n n,c=list(map(lambda x:int(x),input().split()))\n hashmap={}\n for i in range(0,n):\n  x,y=list(map(lambda x:int(x),input().split()))\n  mod_x=x%c\n  mod_y=y%c\n  if (mod_x,mod_y,x-y) not in hashmap:\n   hashmap[(mod_x,mod_y,x-y)]=[]\n  hashmap[(mod_x,mod_y,x-y)].append((x,y))\n print(len(hashmap),end=\" \")\n total_operations=0\n \n for key in hashmap:\n  hashmap[key]=sorted(hashmap[key],key=lambda x:x[0])\n  initial=hashmap[key][len(hashmap[key])//2][0]\n  \n  for x,y in hashmap[key]:\n   total_operations+=abs((x-initial)//c)\n print(total_operations)", "from collections import defaultdict\n\nfor x in range(int(input())):\n n,r=list(map(int,input().split()))\n d=defaultdict(list)\n p=defaultdict(list)\n for i in range(n):\n  a,b=list(map(int,input().split()))\n  if b-a<0:\n   d[a-b].append(a)\n  else:\n   p[b-a].append(a)\n   \n if r>0:\n  k=0\n  s=0\n  for e in d:\n   c=defaultdict(list)\n   for f in d[e]:\n    c[f%r].append(f)\n   for i in c:\n    L=c[i]\n    L.sort()\n    w=len(c[i])\n    h=w//2\n    for t in range(w):\n     s+=abs(L[t]-L[h])//r\n    \n    k+=1\n  for e in p:\n   c=defaultdict(list)\n   for f in p[e]:\n    c[f%r].append(f)\n   for i in c:\n    L=c[i]\n    L.sort()\n    w=len(c[i])\n    h=w//2\n    for t in range(w):\n     s+=abs(L[t]-L[h])//r\n    \n    \n    k+=1\n  print(k,s)\n else:\n  k=0\n  s=0\n  for e in d:\n   \n     \n    \n   k+=len(d[e])\n  for e in p:\n   \n     \n    \n   k+=len(p[e])\n  print(k,s)", "import collections\nt=int(input())\nfor _ in range(t):\n n,c=list(map(int,input().split()))\n hashmap=collections.defaultdict(list)\n for i in range(n):\n  x,y=list(map(int,input().split()))\n  hashmap[x-y,x%c].append(x)\n steps=0\n total=0\n for each in hashmap:\n  hashmap[each].sort()\n  med=hashmap[each][len(hashmap[each])//2]\n  for val in hashmap[each]:\n   total+=abs(med-val)\n print(len(hashmap),total//c)\n", "for t in range(int(input())):\n n,c = map(int,input().split())\n d = {}\n for i in range(n):\n  x,y = map(int,input().split())\n  t = x-y\n  if t not in d:\n   d[t] = [[x,y]]\n  else:\n   d[t].append([x,y])\n checkpoints = 0\n moves=0\n for i in d:\n  points = d[i]\n  mod={}\n  for j in range(len(points)):\n   t = points[j][0]%c\n   if t not in mod:\n    mod[t]=[points[j]]\n   else:\n    mod[t].append(points[j])\n  for j in mod:\n   checkpoints+=1\n   check = mod[j]\n   check = sorted(check, key = lambda x:x[0])\n   mid = check[len(check)//2][0]\n   for k in range(len(check)):\n    moves+= (abs(mid-check[k][0])//c)\n print(checkpoints,moves)", "# cook your dish here\n\nt = int(input())\nfor _ in range(t):\n n, c = list(map(int,input().split()))\n arr = []\n for _ in range(n):\n  arr.append(list(map(int,input().split())))\n temp = {}\n group = {}\n for i in range(n):\n  if arr[i][0]-arr[i][1] not in temp:\n   temp[arr[i][0]-arr[i][1]]= [arr[i][0]]\n  else :\n   temp[arr[i][0]-arr[i][1]].append(arr[i][0])\n noc = 0\n nop = 0\n for d in temp:        \n  for x in temp[d]:\n   if x%c not in group:\n    group[x%c] = [x]\n   else:\n    group[x%c].append(x)\n  for e in group:\n   noc += 1\n   grp = sorted(group[e])\n   #print(grp)\n   med = grp[int(len(grp)/2)]\n   #print(med)\n   for i in range(len(grp)):\n    nop += abs(grp[i] - med)//c\n  group.clear()\n print(noc,nop)\n   \n    \n", "\nt = int(input())\nwhile t:\n n, c = map(int, input().split())\n u = c\n a = []\n d = {}\n for i in range(n):\n  p, q = map(int, input().split())\n  a += [[p, q]]\n  x = min(p, q)\n  d[p - q] = []\n\n for i in range(n):\n  y, z = a[i][0], a[i][1]\n  m = y - z\n  d[m].append(a[i][0])\n # print(d)\n e = []\n for i in d.values():\n  e.append(i)\n # print(a)\n # print(e)\n g = []\n for k in e:\n  d = {}\n  for i in range(len(k)):\n   d[k[i] % c] = []\n  for i in range(len(k)):\n   d[k[i] % c].append(k[i])\n  for i in d.values():\n   g.append(i)\n  # print(g)\n\n c = 0\n print(len(g), end=\" \")\n for i in range(len(g)):\n  # print(1)\n  g[i].sort()\n  med = len(g[i]) // 2\n  for j in range(len(g[i])):\n   c += abs(g[i][j] - g[i][med]) // u\n print(c)\n\n t -= 1\n", "# cook your dish here\nfrom collections import defaultdict as dd\nfor _ in range(int(input())) :\n cont = dd(list)\n n, c = list(map(int,input().split()))\n for i in range(n):\n  x, y = list(map(int,input().split()))\n  cont[ ( x-y , ((x%c) + c )%c ) ].append((x,y))\n  #cont[ (x-y,(x%c) ) ].append((x,y))\n checkpoints = len(cont)\n moves = 0\n for i in cont:\n  v = cont[i]\n  v.sort()\n  pivot = v[ len(v)//2 ]\n  for j in v:\n   moves += abs(pivot[0] - j[0])//c\n print(checkpoints,moves)\n", "T=int(input())\nfor i in range(T):\n a=input().split()\n N=int(a[0])\n c=int(a[1])\n D={}\n for j in range(N):\n  b=input().split()\n  x=int(b[0])\n  y=int(b[1])\n  t=(x-y,x%c)\n  try:\n   D[t]+=[x//c]\n  except:\n   D[t]=[x//c]\n q=len(D)\n p=0\n for k in list(D.values()):\n  L=k\n  L.sort()\n  w=len(L)\n  A=L[:(w)//2]\n  #we want to exclude a point\n  B=L[(w+1)//2:]\n  #understang this by appling it in copy\n  p+=sum(B)-sum(A)\n print(q,p)\n", "T=int(input())\nfor i in range(T):\n a=input().split()\n N=int(a[0])\n c=int(a[1])\n D={}\n for j in range(N):\n  b=input().split()\n  x=int(b[0])\n  y=int(b[1])\n  t=(x-y,x%c)\n  try:\n   D[t]+=[x//c]\n  except:\n   D[t]=[x//c]\n q=len(D)\n p=0\n for k in list(D.values()):\n  L=k\n  L.sort()\n  w=len(L)\n  A=L[:(w)//2]\n  B=L[(w+1)//2:]\n  p+=sum(B)-sum(A)\n print(q,p)\n", "for _ in range(int(input())):\n n,c=list(map(int,input().split()))\n numpoints=0\n moves=0\n d=dict()\n for f in range(n):\n  a,b= list(map(int, input().split()))\n  dif = a-b\n  mod = a % c\n  if dif not in d:\n   d[dif] = {}\n  if mod not in d[dif]:\n   d[dif][mod] = []\n  d[dif][mod].append(a)\n for i in d:\n  for j in d[i]:\n   numpoints += 1\n   num = len(d[i][j])\n   d[i][j].sort()\n   mid = d[i][j][int(num / 2)]\n   for k in d[i][j]:\n    moves += abs(int((k - mid) / c))\n print(numpoints, moves)\n", "for _ in range(int(input())):\n n,c=list(map(int,input().split()))\n numpoints=0\n moves=0\n d=dict()\n for f in range(n):\n  a,b= list(map(int, input().split()))\n  dif = a-b\n  mod = a % c\n  if dif not in d:\n   d[dif] = {}\n  if mod not in d[dif]:\n   d[dif][mod] = []\n  d[dif][mod].append(a)\n for i in d:\n  for j in d[i]:\n   numpoints += 1\n   num = len(d[i][j])\n   d[i][j].sort()\n   if num % 2:\n    mid = d[i][j][int(num / 2)]\n    for k in d[i][j]:\n     moves += abs(int((k - mid) / c))\n   else:\n    choice1 = 0\n    mid = d[i][j][int(num / 2)]\n    for k in d[i][j]:\n     choice1 += abs(int((k - mid) / c))\n    moves += choice1\n print(numpoints, moves)\n", "for _ in range(int(input())):\n n,c=list(map(int,input().split()))\n numpoints=0\n moves=0\n d=dict()\n for f in range(n):\n  a,b= list(map(int, input().split()))\n  dif = a-b\n  mod = a % c\n  if dif not in d:\n   d[dif] = {}\n  if mod not in d[dif]:\n   d[dif][mod] = []\n  d[dif][mod].append(a)\n for i in d:\n  for j in d[i]:\n   numpoints += 1\n   num = len(d[i][j])\n   d[i][j].sort()\n   if num % 2:\n    mid = d[i][j][int(num / 2)]\n    for k in d[i][j]:\n     moves += abs(int((k - mid) / c))\n   else:\n    choice1 = 0\n    mid = d[i][j][int(num / 2)]\n    for k in d[i][j]:\n     choice1 += abs(int((k - mid) / c))\n    choice2 = 0\n    mid = d[i][j][int(num / 2) - 1]\n    for k in d[i][j]:\n     choice2 += abs(int((k - mid) / c))\n    moves += choice1\n print(numpoints, moves)\n", "for _ in range(int(input())):\n n,c=list(map(int,input().split()))\n numpoints=0\n moves=0\n d=dict()\n for f in range(n):\n  a,b= list(map(int, input().split()))\n  dif = a-b\n  mod = a % c\n  if dif not in d:\n   d[dif] = {}\n  if mod not in d[dif]:\n   d[dif][mod] = []\n  d[dif][mod].append(a)\n for i in d:\n  for j in d[i]:\n   numpoints += 1\n   num = len(d[i][j])\n   d[i][j].sort()\n   if num % 2:\n    mid = d[i][j][int(num / 2)]\n    for k in d[i][j]:\n     moves += abs(int((k - mid) / c))\n   else:\n    choice1 = 0\n    mid = d[i][j][int(num / 2)]\n    for k in d[i][j]:\n     choice1 += abs(int((k - mid) / c))\n    choice2 = 0\n    mid = d[i][j][int(num / 2) - 1]\n    for k in d[i][j]:\n     choice2 += abs(int((k - mid) / c))\n    moves += min(choice1, choice2)\n print(numpoints, moves)\n", "for _ in range(int(input())):\n d = dict()\n n, c = list(map(int, input().split()))\n numCheckPoints = 0\n moves = 0\n for _ in range(n):\n  x, y = list(map(int, input().split()))\n  dif = x - y\n  mod = x % c\n  if dif not in d:\n   d[dif] = {}\n  if mod not in d[dif]:\n   d[dif][mod] = []\n  d[dif][mod].append(x)\n for i in d:\n  for j in d[i]:\n   numCheckPoints += 1\n   num = len(d[i][j])\n   d[i][j].sort()\n   if num % 2:\n    mid = d[i][j][int(num / 2)]\n    for k in d[i][j]:\n     moves += abs(int((k - mid) / c))\n   else:\n    choice1 = 0\n    mid = d[i][j][int(num / 2)]\n    for k in d[i][j]:\n     choice1 += abs(int((k - mid) / c))\n    choice2 = 0\n    mid = d[i][j][int(num / 2) - 1]\n    for k in d[i][j]:\n     choice2 += abs(int((k - mid) / c))\n    moves += min(choice1, choice2)\n print(numCheckPoints, moves)\n", "T=int(input())\nfor i in range(T):\n a=input().split()\n N=int(a[0])\n c=int(a[1])\n D={}\n for j in range(N):\n  b=input().split()\n  x=int(b[0])\n  y=int(b[1])\n  t=(x-y,x%c)\n  try:\n   D[t]+=[x//c]\n  except:\n   D[t]=[x//c]\n q=len(D)\n p=0\n for k in list(D.values()):\n  L=k\n  L.sort()\n  w=len(L)\n  A=L[:(w)//2]\n  B=L[(w+1)//2:]\n  p+=sum(B)-sum(A)\n print(q,p)\n", "for t in range(int(input())):\n n,c = map(int,input().split())\n E =[]\n dic = {}\n for i in range(n):\n  x,y = map(int,input().split())\n  E.append([x,y])\n  dic[x-y] = []\n\n \n\n for i in E:\n  dic[i[0]-i[1]].append([i[0],i[1]])\n\n count = 0\n moves = 0\n for i in dic:\n  sub = {}\n  for j in dic[i]:\n   x,y = j[0],j[1]\n   if sub.get(x%c,-1)==-1: \n    sub[x%c] = [[x,y]]\n   else:\n    sub[x%c].append([x,y])\n\n  count += len(sub)\n\n  for j in sub:\n   arr = sorted(sub[j])\n   m1 = arr[len(arr)//2][0]\n   for k in arr:\n    moves += abs(k[0]-m1)//c\n print(count,moves)", "#from statistics import median\nfrom collections import defaultdict\n\nT = int(input().rstrip())\nfor tt in range(T):\n N,c = list(map(int,input().rstrip().split(\" \")))\n \n hh = defaultdict(list)\n for i in range(N):\n  x,y = list(map(int,input().rstrip().split(\" \")))\n  hh[(x-y,((x%c)+c)%c)].append(x)\n \n #print(hh)        \n opr = 0 \n\n for j in hh:\n\n  arr = hh[j]\n  #print(arr)\n  arr.sort()\n  med = arr[len(arr)//2]\n  tp = 0\n  for k in arr:\n   tp += abs(med-k)//c \n   \n  opr += tp \n  \n print(len(hh),int(opr))\n", "# cook your dish here\ndef cnt(x):\n return sum(x[-i-1] - x[i] for i in range(len(x)//2))\n\nfor _ in range(int(input())):\n n, c = map(int, input().split())\n d = {}\n for i in range(n):\n  x, y = map(int, input().split())\n  k = (x - y, x % c)\n  if k in d:\n   d[k].append(x//c)\n  else:\n   d[k] = [x//c]\n print(len(d), sum(cnt(sorted(v)) for v in d.values()))", "# cook your dish here\nfor _ in range(int(input())):\n N,c = [int(i) for i in input().split()]\n coordinates,temp,checkpoints,operations = [],[],0,0\n for i in range(N):\n  x,y = [int(i) for i in input().split()]\n  temp.append(x)\n  temp.append(y)\n  coordinates.append(temp)\n  temp=[]\n dict1 = {}\n for i in coordinates:\n  try:\n   dict1[i[0]-i[1]].append(i[0])\n  except:\n   dict1[i[0]-i[1]] = [i[0]]\n #print(dict1)\n \n for i in dict1:\n  list1 = dict1[i]\n  list1.sort()\n  dict2={}\n  for j in list1:\n   try:\n    dict2[j%c].append(j)\n   except:\n    dict2[j%c] = [j]\n  checkpoints += len(dict2)\n  for k in dict2:\n   list2 = dict2[k]\n   median = list2[(len(list2)-1)//2]\n   for ele in list2:\n    operations += int(abs(median-ele)//c)\n print(checkpoints,operations)", "from collections import defaultdict\nt= int(input())\nfor _ in range(t):\n n,c = [int(x) for x in input().strip().split()]\n arr = defaultdict(list)\n for i in range(n):\n  x,y = [int(z) for z in input().strip().split()]\n  arr[x-y].append([x,y])\n cp = 0\n m = 0\n for i in arr:\n  if len(arr[i]) == 1:\n   cp+=1\n  else:\n   d = defaultdict(list)\n   temparr = sorted(arr[i])\n   d[0].append(temparr[0])\n   for j in range(1,len(temparr)):\n    d[(temparr[0][0]-temparr[j][0])%c].append(temparr[j])\n   for j in d:\n    cp+=1\n    if len(d[j]) == 1:\n     pass\n    else:\n     temparr = d[j]\n     p = 0\n     q = len(temparr)-1\n     while p < q:\n      m+=abs((temparr[p][0]-temparr[q][0])//c)\n      p+=1\n      q-=1\n print(cp,m)\n\n\n  \n"]