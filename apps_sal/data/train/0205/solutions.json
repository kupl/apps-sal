["class Solution:\n     def getMax(self, arr, m, n):\n         res = 0\n \n         for e in arr:\n             if m >= e[0] and n >= e[1]:\n                 res += 1\n                 m -= e[0]\n                 n -= e[1]\n \n         return res\n \n     def findMaxForm(self, strs, m, n):\n         \"\"\"\n         :type strs: List[str]\n         :type m: int\n         :type n: int\n         :rtype: int\n         \"\"\"\n         arr = [(s.count('0'), s.count('1')) for s in strs]\n         arr1 = sorted(arr, key=lambda s: -min(m - s[0], n - s[1]))\n         arr2 = sorted(arr, key=lambda s: min(s[0], s[1]))\n         res = max(self.getMax(arr1, m, n), self.getMax(arr2, m, n))\n \n         return res", "class Solution:\n     def Greedy(self, counts, zeros, ones) :\n         num = 0;\n         for a, b in counts :\n             if a <= zeros and b <= ones :\n                 zeros -= a\n                 ones -= b\n                 num += 1\n         return num\n     \n     def findMaxForm(self, strs, m, n):\n         \"\"\"\n         :type strs: List[str]\n         :type m: int\n         :type n: int\n         :rtype: int\n         \"\"\"\n         counts = list(map(lambda x : [x.count('0'), x.count('1')], strs))\n         return max(self.Greedy(sorted(counts, key = lambda c : min(c[0], c[1])), m, n),\n                    self.Greedy(sorted(counts, key = lambda c : min(m - c[0], n - c[1]), reverse = True), m, n))", "class Solution:\n     def findMaxForm(self, strs, m, n):\n         \"\"\"\n         :type strs: List[str]\n         :type m: int\n         :type n: int\n         :rtype: int\n         \"\"\"\n         def getMax(arr, m, n):\n             res = 0\n \n             for e in arr:\n                 if m >= e[0] and n >= e[1]:\n                     res += 1\n                     m -= e[0]\n                     n -= e[1]\n \n             return res\n \n         arr = [(s.count('0'), s.count('1')) for s in strs]\n         arr1 = sorted(arr, key=lambda s: -min(m - s[0], n - s[1]))\n         arr2 = sorted(arr, key=lambda s: min(s[0], s[1]))\n         res = max(getMax(arr1, m, n), getMax(arr2, m, n))\n \n         return res", "class Solution:\n     def Greedy(self, counts, zeros, ones) :\n         num = 0;\n         for a, b in counts :\n             if a <= zeros and b <= ones :\n                 zeros -= a\n                 ones -= b\n                 num += 1\n         return num\n     \n     def findMaxForm(self, strs, m, n):\n         \"\"\"\n         :type strs: List[str]\n         :type m: int\n         :type n: int\n         :rtype: int\n         \"\"\"\n         counts = [[s.count('0'), s.count('1')] for s in strs]\n         \n         res1 = self.Greedy(sorted(counts, key=lambda c: min(c[0], c[1])), m, n)\n         res2 = self.Greedy(sorted(counts, key=lambda c: min(m - c[0], n - c[1]), reverse=True), m, n)\n         \n         return max(res1, res2)"]