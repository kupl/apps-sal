["n,m=map(int,input().split())\r\nl=[]\r\nleng=0\r\nfor i in range(n+m):\r\n    w=int(input())\r\n    if w==-1:\r\n        cm=0\r\n        mi=0\r\n        for j in range(leng):\r\n            if l[j]>cm:\r\n                cm=l[j]\r\n                mi=j\r\n        \r\n        print(cm)\r\n        l[mi]=-1\r\n    else:\r\n        l.append(w)\r\n        leng+=1", "(N,M) = map(int,input().split(' '))\nS = []\nfor i in range(N+M):\n    x = int(input())\n    if x != -1:\n        S.append(x)\n    else:\n        n = max(S)\n        print(n)\n        S.remove(n)", "import bisect\nn,m = map(int,input().split())\nlst = []\nans = []\na = int(input())\nlst.append(a)\nfor i in range(1,n+m):\n    x = int(input())\n    if x == -1:\n        y = lst.pop(-1)\n        ans.append(y)\n    else:\n        index = bisect.bisect_right(lst,x)\n        lst.insert(index,x)\nfor i in ans:\n    print(i)", "########################################################\n################# Template #############################\nimport sys\nimport math\ndef Int(): return int(input())\ndef Str(): return input()\ndef Ints(): return map(int,input().split(\" \"))\ndef int_arr(): return list(map(int,input().strip().split(\" \")))\ndef str_arr(): return list(map(str,input().split(\" \")))\ndef vsInput():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n#########################################################\n#vsInput()\nno_of_citizen, visits = Ints()\ncitizen_lst = []\nmaxi = 0\nfor i in range(no_of_citizen+visits):\n    a = Int()\n    if a==-1:\n        print(citizen_lst[0])\n        citizen_lst.pop(0)\n    else:\n        citizen_lst.append(a)\n        citizen_lst = sorted(citizen_lst,reverse=True)", "########################################################\n################# Template #############################\nimport sys\nimport math\ndef Int(): return int(input())\ndef Str(): return input()\ndef Ints(): return map(int,input().split(\" \"))\ndef int_arr(): return list(map(int,input().strip().split(\" \")))\ndef str_arr(): return list(map(str,input().split(\" \")))\ndef vsInput():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n#########################################################\n#vsInput()\nno_of_citizen, visits = Ints()\ncitizen_lst = []\nmaxi = 0\nfor i in range(no_of_citizen+visits):\n    a = Int()\n    if a!=-1:\n        citizen_lst.append(a)\n        if a>maxi:\n            maxi = a\n    else:\n        print(maxi)\n        citizen_lst.remove(maxi)\n        maxi = max(citizen_lst)", "########################################################\n################# Template #############################\nimport sys\nimport math\ndef Int(): return int(input())\ndef Str(): return input()\ndef Ints(): return list(map(int,input().split(\" \")))\ndef int_arr(): return list(map(int,input().strip().split(\" \")))\ndef str_arr(): return list(map(str,input().split(\" \")))\ndef vsInput():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n#########################################################\n#vsInput()\nno_of_citizen, visits = Ints()\ncitizen_lst = []\nfor i in range(no_of_citizen+visits):\n    a = Int()\n    if a!=-1:\n        citizen_lst.append(a)\n    else:\n        print(max(citizen_lst))\n        index_max = citizen_lst.index(max(citizen_lst))\n        citizen_lst.pop(index_max)\n\n\n", "########################################################\n################# Template #############################\nimport sys\nimport math\ndef Int(): return int(input())\ndef Str(): return input()\ndef Ints(): return list(map(int,input().split(\" \")))\ndef int_arr(): return list(map(int,input().strip().split(\" \")))\ndef str_arr(): return list(map(str,input().split(\" \")))\ndef vsInput():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n#########################################################\n#vsInput()\nno_of_citizen, visits = Ints()\ncitizen_lst = []\nfor i in range(no_of_citizen+visits):\n    a = Int()\n    if a!=-1:\n        citizen_lst.append(a)\n    else:\n        print(max(citizen_lst))\n        citizen_lst.remove(max(citizen_lst))\n        \n\n", "from heapq import heappush, heappop\ntry:\n    # Getting n, m, then initialising the lists\n    n, m = list(map(int, input().split()))\n    normal = []\n    exe = []\n    # As the problem states, we should do this n+m times.\n    for i in range(0, (n+m)):\n        get = int(input())\n        # If the king has come, return the smallest(but biggest) element\n        # For executing.\n        if get==-1:\n            c = -heappop(normal)\n            exe.append(c)\n        # Otherwise, push the negative value to normal\n        else:\n            heappush(normal, -get)\n    # For loop to iterate through the executed people, and print them\n    z = len(exe)\n    for j in range(0, z):\n        print(exe[j])\nexcept:\n    pass\n", "from heapq import heappush, heappop\ntry:\n    # Getting n, m, then initialising the lists\n    n, m = list(map(int, input().split()))\n    normal = []\n    exe = []\n    # As the problem states, we should do this n+m times.\n    for i in range(0, (n+m)):\n        get = int(input())\n        # If the king has come, return the smallest(but biggest) element\n        # For executing.\n        if get==-1:\n            c = -heappop(normal)\n            exe.append(c)\n        # Otherwise, push the negative value to normal\n        else:\n            heappush(normal, -get)\n    # For loop to iterate through the executed people, and print them\n    z = len(exe)\n    for j in range(0, z):\n        print(exe[j])\nexcept:\n    pass\n", "from heapq import heappush, heappop\r\ntry:\r\n    n, m = list(map(int, input().split()))\r\n    normal = []\r\n    exe = []\r\n    for i in range(0, (n+m)):\r\n        get = int(input())\r\n        if get==-1:\r\n            c = -heappop(normal)\r\n            exe.append(c)\r\n        else:\r\n            heappush(normal, -get)\r\n    for j in exe:\r\n        print(j)\r\nexcept:\r\n    pass\r\n", "from bisect import insort\r\n\r\nn, m = list(map(int, input().split()))\r\npos = []\r\ncount = 0\r\n\r\nwhile count < m:\r\n    i = int(input())\r\n    if i > 0: insort(pos, i)\r\n    else:\r\n        print(pos.pop(-1))\r\n        count += 1\r\n", "n, m = map(int, input().split())\r\n\r\npos = []\r\nnum = 0\r\nwhile num < m:\r\n    i = int(input())\r\n    if i > 0: pos.append(i)\r\n    else:\r\n        print(max(pos))\r\n        pos.remove(max(pos))\r\n        num += 1", "n, m = map(int, input().split())\r\n\r\niArr = []\r\nfor _ in range(n + m):\r\n    i = int(input())\r\n    if i != -1: iArr.append(i)\r\n    else:\r\n        print(max(iArr))\r\n        iArr.remove(max(iArr))", "n,m=map(int,input().split())\r\n\r\nlis=[]\r\nfor i in range(n+m):\r\n    k=int(input())\r\n    if k==-1:\r\n        lis.sort()\r\n        print(lis.pop())\r\n        \r\n    else:\r\n        lis.append(k)", "n,m=map(int,input().split())\r\n\r\nlis=[]\r\nfor i in range(n+m):\r\n    k=int(input())\r\n    if k==-1:\r\n        lis.sort()\r\n        print(lis.pop())\r\n        \r\n    else:\r\n        lis.append(k)", "n,m=map(int,input().split())\r\n\r\nlis=[]\r\nfor i in range(n+m):\r\n    k=int(input())\r\n    if k==-1:\r\n        print(str(max(lis)))\r\n        lis.remove(max(lis))\r\n    else:\r\n        lis.append(k)", "# cook your dish here\nimport heapq\nn,m=map(int,input().split())\na=[]\nfor i in range(n+m):\n\tx=int(input())\n\tif(x==-1):\n\t\tans=heapq.heappop(a)\n\t\tprint(-ans)\n\telse:\n\t\theapq.heappush(a,-x)", "try:\r\n    N, M = list(map(int, input().split()))\r\n    L = []\r\n    for i in range(N+M):\r\n        a = int(input())\r\n        if a != -1:\r\n            L.append(a)\r\n        else:\r\n            print(max(L))\r\n            L.remove(max(L))\r\nexcept:\r\n    pass\r\n    \r\n", "try:\r\n    N, M = list(map(int, input().split()))\r\n    L = []\r\n    for i in range(N+M):\r\n        L.append(int(input()))\r\n    l = []\r\n    for i in L:\r\n        if i != -1:\r\n            l.append(i)\r\n        else:\r\n            print(max(l))\r\n            l.remove(max(l))\r\nexcept:\r\n    pass\r\n    \r\n", "# cook your dish here\nimport heapq\na, b = list(map(int, input().split()))\nnumList = []\nfor i in range(a+b):\n    numIn = int(input())\n    if numIn == -1:\n        ans = heapq.heappop(numList)\n        print(-ans)\n    else:\n        heapq.heappush(numList, -numIn)\n\n", "[n,m]=list(map(int,input().split()))\nl = []\nfor _ in range(n+m):\n    t = int(input())\n    if t == -1:\n        print(max(l))\n        l.remove(max(l))\n    else:\n        l.append(t)", "a, b = map(int, input().split())\r\nk = []\r\nfor _ in range(a + b):\r\n    p = int(input())\r\n    if p != -1:\r\n        k.append(p)\r\n    else:\r\n        print(max(k))\r\n        k.remove(max(k))", "# cook your dish here\nn,m=map(int,input().split())\nt=n+m\nl=[]\nwhile t>0:\n    a=int(input())\n    if a!=-1:\n        l.append(a)\n    else:\n        l.sort()\n        print(l[-1])\n        l[-1]=0\n    t=t-1", "# cook your dish here\nn,m=map(int,input().split())\nt=n+m\nl=[]\nwhile t>0:\n    a=int(input())\n    if a!=-1:\n        l.append(a)\n    else:\n        l.sort()\n        print(l[-1])\n        l[-1]=0\n    t=t-1", "citizens, visits = list(map(int, input().split()))\r\ntotal = citizens + visits\r\nl = []\r\nfor i in range(total):\r\n    n = int(input())\r\n    if n == -1:\r\n        l.sort()\r\n        print(l[-1])\r\n        l[-1] = 0\r\n    else:\r\n        l.append(n)\r\n"]