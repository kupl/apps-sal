["from collections import defaultdict\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        count_dict = defaultdict(int)\n        for num in arr:\n            count_dict[num] = count_dict[num-difference] + 1\n        return max(count_dict.values())\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        hs = dict()\n        for num in arr:\n            if num - difference in hs:\n                hs[num] = hs[num - difference] + 1\n            if num not in hs and num - difference not in hs:\n                hs[num] = 1\n        # print(hs)\n        return max(item for item in hs.values())", "from collections import defaultdict\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        if not arr:\n            return 0\n        dp = [1 for _ in range(len(arr))]\n        seen = defaultdict(list)\n        for i, num in enumerate(arr):\n            prev = num - difference\n            choices = seen[prev]\n            for j in choices:\n                dp[i] = max(dp[j] + 1, dp[i])\n            seen[num].append(i)        \n        return max(dp)", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = [1 for a in arr]\n        ele = collections.defaultdict(list)\n        for i,x in enumerate(arr):\n            ele[x].append(i)\n        for i, a in enumerate(arr):\n            if a - difference in ele:\n                for j in ele[a-difference]:\n                    if j<i:\n                        dp[i] = max(dp[j] + 1,dp[i])\n        return max(dp)", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        seen = Counter()\n        for v in arr:\n            seen[v] = seen[v - difference] + 1\n        return max(seen.values())\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        mx = max(arr)\n        mn = min(arr)\n        d = dict()\n        for i in range(-10**4,10**4+1):\n            d[i] = 0\n        n = len(arr)\n        #print(d)\n        if diff>0:\n            d[arr[0]] = 1\n            for i in range(1,n):\n                if arr[i]-diff>=mn:\n                    d[arr[i]] = max(d[arr[i]],d[arr[i]-diff]+1)\n                else:\n                    d[arr[i]] = 1\n        else:\n            arr = arr[::-1]\n            #print(arr)\n            d[arr[0]] = 1\n            for i in range(1,n):\n                if arr[i]+diff>=mn:\n                    d[arr[i]] = max(d[arr[i]],d[arr[i]+diff]+1)\n                else:\n                    d[arr[i]] = 1\n        #print(d)\n        return max(list(d.values()))", "class Solution:\n    # brute force\n#     def longestSubsequence(self, arr: List[int], difference: int) -> int:\n#         ret = 0\n#         for i in range(len(arr)):\n#             n = 1\n            \n#             start = arr[i]\n#             j = i + 1\n#             while j < len(arr):\n#                 if arr[j] - start == difference:\n#                     n += 1\n#                     start = arr[j]\n#                 j += 1\n                    \n#             ret = max(ret, n)\n                \n                \n                \n#         return ret\n\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        \n        d = dict() # k=last, value=chain\n        ret = 0\n        for i,n in enumerate(arr):\n            if n - difference not in d:\n                d[n] = 1\n            else:\n                d[n] = d[n-difference] + 1\n                \n            ret = max(ret, d[n])\n        return ret\n            \n            \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        current = {}\n        for x in arr:\n            old = x - difference\n            if old in current:\n                count = current[old]\n                del current[old]\n                current[x] = count + 1\n            elif x not in current:\n                current[x] = 1\n            #print(f'{x, current}')\n        return max(current.values())\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        sub_dict = {}\n        n = len(arr)\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        max_len = 1\n\n        for i in range(n - 1, -1, -1):\n            value = arr[i]\n            new_k_v = []\n            \n            dd = value + difference\n            if dd in sub_dict:\n                sub_dict[value] =  max(sub_dict.get(value, 0), sub_dict[dd] + 1)\n                max_len = max(sub_dict[value], max_len)\n                \n            if value not in sub_dict:\n                sub_dict[value] = 1\n        \n        return max_len\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        res = {} \n        for num in arr:\n            if num - difference in res:\n                res[num] = res[num - difference] + 1 \n            else:\n                res[num] = 1\n        return max(res.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        res = dict()\n        max_seq = 0\n        for a in arr:\n            res[a] = res.get(a-difference, 0) + 1\n        return max(res.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = [0] * 40001\n        d = 20000\n        opt = 0\n        for e in arr:\n            dp[e+d] = dp[e-difference + d] + 1\n            opt = max(opt, dp[e+d])\n\n        return opt         ", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = [0  for _  in range(len(arr))]\n        lookup = {}\n        for i in range(len(arr)):\n            if arr[i] not in lookup:\n                lookup[arr[i]] = [i]\n            else:\n                lookup[arr[i]].append(i)\n        for i in range(len(arr)-1, 0, -1):\n            if arr[i] - difference in lookup:\n                dp[i] = max(1, dp[i])\n                for index in lookup[arr[i] -difference]:\n                    if index < i:\n                        dp[index] = dp[i] + 1\n        return max(dp) if max(dp) > 0 else 1", "class Solution:\n    def longestSubsequence(self, arr: List[int], d: int) -> int:\n        if not arr:\n            return 0\n        cache={}\n        maxc=0\n        for i in arr:\n            if i-d in cache:\n                cache[i]=cache[i-d]+1\n            else:\n                cache[i]=1\n            maxc=max(maxc,cache[i])\n        return maxc", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        dp = {}\n        \n        for i in range(n):\n            if (arr[i] - difference) in dp:\n                dp[arr[i]] = dp[arr[i] - difference]+1\n            else:\n                dp[arr[i]] = 1\n        return max(dp.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp, res = [0  for _  in range(len(arr))], 1\n        lookup = {}\n        for i in range(len(arr)):\n            if arr[i] not in lookup:\n                lookup[arr[i]] = [i]\n            else:\n                lookup[arr[i]].append(i)\n        for i in range(len(arr)-1, 0, -1):\n            diff = arr[i] - difference\n            if  diff in lookup:\n                dp[i] = max(1, dp[i])\n                for index in lookup[diff]:\n                    if index < i:\n                        dp[index] = dp[i] + 1\n                        res = max(res, dp[index])\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        m = dict()\n        for ind,num in enumerate(arr):\n            if num in m:\n                m[num].append(ind)\n            else:\n                m[num] = [ind]\n        dp = []\n        longest = 1\n        for ind,num in enumerate(arr):\n            if (num-difference) in m:\n                possible_sol = []\n                for diff_ind in m[num-difference]:\n                    if diff_ind < len(dp):\n                        possible_sol.append(dp[diff_ind] + 1)\n                if possible_sol == []:\n                    dp.append(1)\n                else:\n                    curr_max = max(possible_sol)\n                    dp.append(curr_max)\n                    if curr_max > longest:\n                        longest = curr_max\n                        \n            else:\n                dp.append(1)\n        return longest", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dic = {}\n        for i in range(len(arr)):\n            temp = False\n            if arr[i] - difference in list(dic.keys()):\n                dic[arr[i]] = dic[arr[i] - difference] + [arr[i]]\n                if arr[i] != arr[i] - difference:\n                    dic.pop(arr[i] - difference)\n                temp = True\n            elif arr[i] in list(dic.keys()):\n                temp = True\n            \n            # for k in list(dic.keys()):\n            #     if k + difference == arr[i]:\n            #         # print(k, difference, arr[i])\n            #         dic[arr[i]] = dic[k] + [arr[i]]\n            #         if arr[i] != k:\n            #             dic.pop(k)\n            #         temp = True\n            #     elif k == arr[i]:\n            #         temp = True\n            if not temp:\n                dic[arr[i]] = [arr[i]]\n            # print(arr[i], dic)\n        return max(list([len(x) for x in list(dic.values())]))\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = defaultdict(int) # Longest subseq that ends with they key. \n        for i,elem in enumerate(arr):\n            dp[elem] = 1+dp[elem-difference]\n        \n        maxElem = 0\n        for key in dp:\n            maxElem = max(maxElem,dp[key])\n            \n        return maxElem", "from collections import defaultdict\nclass Solution:\n    # \u5148\u5199\u51fabrute force solution O(n^2)\uff0c\u5728\u4e0b\u9762\n    # \u518d\u5c1d\u8bd5\u7528dp\u4f18\u5316 \n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        ret = 0\n        \n        mappings = defaultdict(list)\n        for i, v in enumerate(arr):\n            mappings[v].append(i)\n            \n        M = [-1 for i in range(n)]\n        \n        def dp(i):\n            if i == n-1:\n                return 1\n            \n            if M[i] != -1:\n                return M[i]\n            \n            M[i] = 1\n            for j in mappings[arr[i]+difference]:\n                if j > i:\n                    M[i] += dp(j)\n                    break\n            \n            return M[i]\n        \n        for i in range(n):\n            ret = max(ret, dp(i))\n            \n        return ret\n    \n    \n#     def longestSubsequence(self, arr: List[int], difference: int) -> int:\n#         n = len(arr)\n#         ret = 0\n        \n#         for i, num in enumerate(arr):\n#             cur = num\n#             length = 1\n#             for j in range(i+1, n):\n#                 if arr[j] == cur + difference:\n#                     length += 1\n#                     cur = arr[j]\n#             ret = max(ret, length)\n        \n#         return ret\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        mx = -float('inf')\n        mn = float('inf')\n        n = 0\n        for i in arr:\n            mx = max(mx,i)\n            mn = min(mn,i)\n            n+=1\n        \n        d = dict()\n        for i in range(mn,mx+1):\n            d[i] = 0\n        #print(d)\n        if diff>0:\n            d[arr[0]] = 1\n            for i in range(1,n):\n                if arr[i]-diff>=mn:\n                    d[arr[i]] = max(d[arr[i]],d[arr[i]-diff]+1)\n                else:\n                    d[arr[i]] = 1\n        else:\n            arr = arr[::-1]\n            #print(arr)\n            d[arr[0]] = 1\n            for i in range(1,n):\n                if arr[i]+diff>=mn:\n                    d[arr[i]] = max(d[arr[i]],d[arr[i]+diff]+1)\n                else:\n                    d[arr[i]] = 1\n        #print(d)\n        return max(list(d.values()))", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        dp = {}\n        for i in range( n):\n            if arr[i] - difference in dp:\n                dp[arr[i]] = dp[arr[i] - difference] + 1\n            else:\n                dp[arr[i]] = 1\n        \n        return max(dp.values()) \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        \n        mp = {}\n        res = 0\n        for num in arr:\n            currlen = 1\n            if num-difference in mp:\n                currlen = mp[num-difference]+1\n            mp[num] = max(mp.get(num,1),currlen)\n            res = max(res, currlen)\n        \n        return res\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        \n        if len(arr) == 1:\n            return 1\n        memo = {}\n        res = 0\n        for i in range(len(arr)-1, -1, -1):\n            if arr[i]+difference not in memo:\n                memo[arr[i]] = 1\n            else:\n                memo[arr[i]] = memo[arr[i]+difference] + 1\n            \n            res = max(res, memo[arr[i]])\n        return res\n            \n        \n", "from collections import defaultdict\ndef lis(a, diff):\n    lis = {}\n    for i in range(len(a)):\n        lis[a[i]]= lis.get(a[i]-diff,0) +1\n    return max(lis.values())\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        return lis(arr, difference)", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        indexMap = defaultdict(list)\n        \n        dp = [0] * len(arr)\n        maxSeq = 0\n        \n        for i, num in enumerate(arr):\n            if num - diff in indexMap:\n                for newIndex in indexMap[num - diff]:\n                    dp[i] = max(dp[i], dp[newIndex])\n            dp[i] += 1\n            maxSeq = max(maxSeq, dp[i])\n                \n            \n            indexMap[num].append(i)\n            \n        return maxSeq\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        max_val = 10000\n        min_val = -10000\n        diff = [0 for i in range(max_val - min_val + 1)]\n        res = 1\n        for x in arr:\n            if x - difference >= min_val and x - difference <= max_val and diff[x-difference+max_val] >= diff[x+max_val]:\n                diff[x+max_val] = diff[x-difference+max_val] + 1\n            else:\n                diff[x+max_val] = max(1, diff[x+max_val])\n            res = max(res, diff[x+max_val])\n        return res\n", "from collections import defaultdict\nimport bisect\nclass Solution:\n    # \u5148\u5199\u51fabrute force solution O(n^2)\uff0c\u5728\u4e0b\u9762\n    # \u518d\u5c1d\u8bd5\u7528dp\u4f18\u5316 \n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        ret = 0\n        \n        mappings = defaultdict(list)\n        for i, v in enumerate(arr):\n            mappings[v].append(i)\n            \n        M = [-1 for i in range(n)]\n        \n        def dp(i):\n            if i == n-1:\n                return 1\n            \n            if M[i] != -1:\n                return M[i]\n            \n            M[i] = 1\n            next_indexes = mappings[arr[i]+difference]\n            j = bisect.bisect_right(next_indexes, i)\n            \n            if j < len(next_indexes):\n                M[i] += dp(next_indexes[j])\n            \n            # for j in mappings[arr[i]+difference]:\n            #     if j > i:\n            #         M[i] += dp(j)\n            #         break\n        \n            return M[i]\n        \n        for i in range(n):\n            ret = max(ret, dp(i))\n\n        return ret\n    \n    \n#     def longestSubsequence(self, arr: List[int], difference: int) -> int:\n#         n = len(arr)\n#         ret = 0\n        \n#         for i, num in enumerate(arr):\n#             cur = num\n#             length = 1\n#             for j in range(i+1, n):\n#                 if arr[j] == cur + difference:\n#                     length += 1\n#                     cur = arr[j]\n#             ret = max(ret, length)\n        \n#         return ret\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = {}\n        maxs = 1\n        for num in arr:\n            dp[num]=dp.get(num-difference,0)+1\n            if dp[num]>maxs:\n                maxs=dp[num]\n        return maxs", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        memo = Counter()\n        for a in arr:\n            memo[a] = memo[a - difference] + 1\n        return max(memo.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        ans = 1\n        table = {}\n        for a in arr:\n            prev = a - difference\n            if prev in table:\n                table[a] = table[prev] + 1\n            else:\n                table[a] = 1\n            ans = max(ans, table[a])\n        return ans\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        if not arr:\n            return 0\n        dp = dict()\n        for num in arr:\n            prev = num - difference \n            if prev in dp:\n                dp[num] = 1 + dp.get(prev, 0)\n            else:\n                dp[num] = 1\n        return max(dp.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = [1]*len(arr)\n        ans = 1\n        seen = {}\n        for i in range(len(arr)):\n            if(arr[i]-difference in seen):\n                dp[i]=1+dp[seen[arr[i]-difference]]\n            seen[arr[i]]=i\n        return max(dp)", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        mp = collections.defaultdict(int)\n        ans = 0\n        for a in arr:\n            mp[a] = (1+mp[a-difference])\n            ans = max(ans,mp[a])\n        return ans\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        n = len(arr)\n        dp = defaultdict(int)\n        \n        for i in arr:\n            dp[i] = max(dp[i], dp[i-difference] + 1)\n            \n        return max(dp.values())\n        \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], d: int) -> int:\n        cnt = defaultdict(int)\n        for i in arr:\n            cnt[i] = cnt[i-d] + 1\n        return max(cnt.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp, res = {}, 0\n        for i in arr:\n            dp[i] = dp.get(i-difference, 0) + 1\n            res = max(res, dp[i])\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = {}\n        res = 0\n        for num in arr:\n            dp[num] = 1 + dp.get(num-difference,0)\n            res = max(res, dp[num])\n            \n        return res\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        if len(arr) == 1:\n            return 1\n        dp = [1] * len(arr)\n        dic = {arr[0]:0}\n        for i in range(1, len(dp)):\n            dic[arr[i]] = i\n            if arr[i] - difference in dic:\n                dp[i] = max(dp[i], dp[dic[arr[i]-difference]]+1)\n        return max(dp)", "class Solution:\n    def longestSubsequence(self, arr: List[int], d: int) -> int:\n        memo=dict()\n        #arr.sort()\n        for a in arr:\n            if a-d in list(memo.keys()):\n                memo[a]=memo[a-d]+1\n            else:\n                memo[a]=1\n        return max(list(memo.values()))\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = {}\n        l = len(arr)\n        index_map = {}\n        for i in range(l):\n            \n            if (arr[i] - difference) in index_map:\n                j = index_map[arr[i]-difference]\n                dp[i] = dp.get(j, 1) + 1\n            index_map[arr[i]] = i\n        return max(dp.values()) if dp else 1", "from collections import defaultdict\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        elemToLen = defaultdict(int)\n        best = 0\n        for x in arr:\n            elemToLen[x] = max(elemToLen[x], elemToLen[x - difference] + 1)\n            best = max(best, elemToLen[x])\n        return best", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = {}\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            if arr[i] - difference in dp:\n                dp[arr[i]] = dp[arr[i] - difference] + 1\n            else:\n                dp[arr[i]] = 1\n            ans = max(ans, dp[arr[i]])\n            \n        return ans", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = {}\n        l = len(arr)\n        index_map = {}\n        res = 1\n        for i in range(l):\n            if (arr[i] - difference) in index_map:\n                j = index_map[arr[i]-difference]\n                dp[i] = dp.get(j, 1) + 1\n                if dp[i] > res:\n                    res = dp[i]\n            index_map[arr[i]] = i\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        if not arr:\n            return 0\n        \n        max_len = 0\n        dp = [0] * len(arr)\n        prev_max_len = {}\n        for i, num in enumerate(arr):\n            if (key := arr[i] - difference) in prev_max_len:\n                dp[i] = prev_max_len[key] + 1\n            else:\n                dp[i] = 1\n            prev_max_len[arr[i]] = dp[i]\n            max_len = max(max_len, dp[i])\n        return max_len", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        mem=collections.defaultdict(int)\n        #\u4ee5\u5404\u6570\u7ed3\u5c3e\u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        res=0\n        for n in arr:\n            if mem[n-difference]+1>mem[n]:\n                mem[n]=mem[n-difference]+1\n            res=max(res,mem[n])\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        res = {}\n        for num in arr:\n            res[num] = res.get(num - diff,0)+1\n        return max(res.values())\n", "# Brute force O(n^2) time and O(1) space\n# O(n) time and O(1) space\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        cnt = collections.Counter()\n        ans = 0\n        for num in arr:\n            cnt[num] = cnt[num-difference] + 1\n            ans = max(ans, cnt[num])\n        return ans\n", "class Solution:\n    '''\n    \n    arr = [1,2,3,4] d = 1\n    \n    0 - 1\n    1 - 2 - 1 -> 1 += 1\n    \n    \n    arr = [1,3,5,7] d = 1\n    \n    0: 1\n    1: 3 - 1 -> 2 -> 1\n    2: 5 - \n    \n    \n    \n    '''\n    import collections \n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        \n        dp = {}\n        \n        max_len = 0\n        \n        for i in arr:\n            dp[i] = dp.get(i - difference, 0) + 1\n            \n            max_len = max(max_len, dp[i])\n            \n        return max_len", "import collections\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        prev_seq = collections.defaultdict(int)\n        max_seq = 1\n        for x in reversed(arr):\n            target = x + difference\n            x_seq = prev_seq[target] + 1\n            max_seq = max(max_seq, x_seq)\n            prev_seq[x] = max(prev_seq[x], x_seq)\n        return max_seq\n            \n        \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        tail = collections.Counter()\n        \n        maxi = 1\n        for n in arr:\n            if n - difference in tail:\n                maxi = max(maxi, tail[n-difference] + 1)\n                tail[n] = tail[n-difference] + 1\n            else:\n                tail[n] = 1\n            # print(tail, n, maxi)\n        return maxi", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        \n        count = Counter(arr)\n        if difference == 0:\n            return max(count.values())\n        \n        n = len(arr)\n        dd = dict()\n        ans = 1\n        for i, n in enumerate(arr):\n            if n-difference in dd:\n                dd[n] = 1 + dd[n-difference]\n            else:\n                dd[n] = 1\n            ans = max(ans, dd[n])\n        # print(dd)\n        return ans\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        mp = collections.defaultdict(int)\n        ans = 0\n        for a in arr:\n            mp[a] = max(1+mp[a-difference], mp[a])\n            ans = max(ans,mp[a])\n        return ans\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        tail = collections.Counter()\n        \n        maxi = 1\n        for n in arr:\n            if n - difference in tail:\n                maxi = max(maxi, tail[n-difference] + 1)\n                tail[n] = tail[n-difference] + 1\n            else:\n                tail[n] = 1\n        return maxi", "from collections import defaultdict\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        prev_elem_dict = defaultdict(int)\n        result = 0\n        for num in arr:\n            prev_elem_dict[num] = max(prev_elem_dict[num], prev_elem_dict[num - difference] + 1)\n            result = max(result, prev_elem_dict[num])\n        return result\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        a = len(arr)\n        dp = {}\n        ans = 0\n        for value in arr:\n            targetValue = value-difference\n            if targetValue in dp:\n                dp[value] = 1 + dp[targetValue]\n            else:\n                dp[value] = 1\n                \n            ans = max(ans, dp[value])\n        return ans", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        num2len = dict()\n        res = 0\n        for i in range(len(arr)):\n            if arr[i]-difference in num2len:\n                num2len[arr[i]] = num2len[arr[i]-difference] + 1\n            else:\n                num2len[arr[i]] = 1\n            \n            res = max(res, num2len[arr[i]])\n            \n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        n = len(arr)\n        ans = 1\n        hmap = {arr[0]:1}\n        for i in range(1, n):\n            hmap[arr[i]] = 1\n            if arr[i] - diff in hmap:\n                hmap[arr[i]] = max(hmap[arr[i]], hmap[arr[i] - diff] + 1)\n            ans = max(ans, hmap[arr[i]])\n        # print(hmap)\n        return ans\n", "import bisect\nclass Solution:\n    def longestSubsequence(self, arr, diff):\n        ''' DP solution O(N^2)\n\n        dp = [1]*len(arr)\n        l_sub_seq = 1\n        for i in range(1, len(arr)):\n            for j in range(i):\n                if arr[i] - arr[j] == diff:\n                    dp[i] = max(dp[i], dp[j] + 1)\n                    l_sub_seq = max(dp[i], l_sub_seq)\n        return l_sub_seq\n        '''\n        dp = {}\n        ans = 0\n        for i in arr:\n            if i - diff in dp:\n                dp[i] = dp[i - diff] + 1\n            else:\n                dp[i] = 1\n            ans = max(ans, dp[i])\n        return ans\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        res = {}\n        for num in arr:\n            res[num] = res.get(num-diff, 0) + 1\n        return max(res.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        n = len(arr)\n        dp = dict()\n        for i in range(n):\n            if arr[i]-diff in dp:\n                if arr[i] in dp:\n                    dp[arr[i]] = max(dp[arr[i]],dp[arr[i]-diff]+1)\n                else:\n                    dp[arr[i]]=dp[arr[i]-diff]+1\n            else:\n                if arr[i] in dp:\n                    dp[arr[i]] = max(dp[arr[i]],1)\n                else:\n                    dp[arr[i]]=1        \n        # print(dp)\n        return max(dp.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        d , ans = defaultdict(int) , 0\n        for i in arr:\n            d[i] = d[i-difference] + 1\n            ans = max(ans,d[i])\n        return(ans)", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        dp, ans = dict(), 0\n        for i in arr:\n            dp[i] = dp.get(i-diff, 0) + 1\n            ans = max(ans, dp[i])\n        return ans", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        d = {}\n        mx = 1\n\n        for i, e in enumerate(arr):\n            k = e + -difference\n\n            if k in d:\n                d[e] = d[k] + 1\n                mx = max(mx, d[e])\n\n            if e not in d:\n                d[e] = 1\n\n        return mx", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        res = {}\n        for num in arr:\n            res[num] = res[num - diff] + 1 if (num - diff) in res else 1\n        return max(res.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        d={}\n        res=0\n        for i in arr:\n            if i-difference in d:\n                d[i]=1+d.pop(i-difference)\n            elif i not in d:\n                d[i]=1\n            res=max(res,d[i])\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = {}\n        for a in arr:\n            dp[a] = dp.get(a-difference, 0)+1\n            \n        return max(dp.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp=collections.defaultdict(int)\n        ans=0\n        for element in arr:\n            dp[element]=dp[element-difference]+1\n            ans=max(dp[element],ans)\n        \n        return ans", "class Solution:\n    def longestSubsequence(self, arr: List[int], d: int) -> int:\n        \n        if not arr:return 0\n        maxlen=1\n        helper={}\n        \n        for i,x in enumerate(arr):\n            \n            if x-d in helper:\n                helper[x]=helper[x-d]+1\n                \n            else:\n                helper[x]=1\n                \n            maxlen=max(maxlen,helper[x])\n            \n            \n        return maxlen\n            \n        \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp, res = collections.defaultdict(int), 0\n        for x in arr:\n            dp[x] = max(1, dp[x])\n            res = max(res, dp[x])\n            dp[x+difference] = max(dp[x+difference], dp[x]+1)\n        return res", "\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        d = {}\n\n        for i, e in enumerate(arr):\n            k = e + -difference\n\n            if k in d:\n                d[e] = d[k] + 1\n\n            if e not in d:\n                d[e] = 1\n\n        return d[max(d, key=lambda k: d[k])]\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        states = collections.defaultdict(int)\n        for a in arr:\n            states[a] = states[a - difference] + 1\n        return max(states.values())\n            \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        d={}\n        res=0\n        for i in arr:\n            if i-difference in d:\n                d[i]=max(1+d.pop(i-difference),d.get(i,0))\n            elif i not in d:\n                d[i]=1\n            res=max(res,d[i])\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = {}\n        res = 1\n        for i in arr:\n            comp = i - difference\n            if comp in dp:\n                dp[i] = dp[comp] + 1\n                res = max(res, dp[i])\n            else:\n                dp[i] = 1\n        return res", "from collections import defaultdict\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        currentMax = 0\n        dictionary = defaultdict(int)\n        for i in range(len(arr)):\n            dictionary[arr[i]] = dictionary[arr[i]-difference] + 1\n        for e in dictionary:\n            currentMax = max(dictionary[e], currentMax)\n        return currentMax\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        if difference < 0:\n            return self.longestSubsequence(arr[::-1], -difference)\n        minim = 0\n        for i in range(0, len(arr)):\n            minim = min(arr[i], minim)\n        maxim = arr[0]\n        for i in range(0, len(arr)):\n            arr[i] = arr[i] - minim\n            maxim = max(maxim, arr[i])\n        indices = [-1] * (maxim + difference + 1)\n        dp = [0] * len(arr)\n        i = len(arr) - 1\n        while i >= 0:\n            if indices[arr[i] + difference] != -1:\n                dp[i] = 1 + dp[indices[arr[i] + difference]]\n            else:\n                dp[i] = 1\n            indices[arr[i]] = i\n            i = i - 1\n        ans = -1\n        for i in range(0, len(dp)):\n            ans = max(ans, dp[i])\n        return ans\n            \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        if len(arr)==1: return 1\n        res,length = 1,len(arr)\n        dp = {}\n        dp[arr[-1]]=1\n        flag = 1\n        \n        for i in range(length-2,-1,-1):\n            if arr[i] not in dp: \n                dp[arr[i]] = 1\n                flag = 0#means val was not in arr\n            if arr[i]+difference in dp:\n                if difference ==0 and flag ==0:\n                    #if difference is 0 then i am seeing same no as arr[i] in dp and if flag is 0 then i already put its val in dp so should continue\n                    flag = 1\n                    continue\n                dp[arr[i]] = max(dp[arr[i]], dp[arr[i]+difference]+1, )\n            res = max(res,dp[arr[i]])\n            \n        return res\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dic = {}\n        for i in range(len(arr)):\n            if (arr[i] - difference) in dic:\n                dic[arr[i]] = dic[arr[i] - difference] + 1\n            else:\n                dic[arr[i]] = 1\n        return max(dic.values())\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        subseqs = dict()\n        \n        for num in arr:\n            subseqs[num + difference] = subseqs.get(num, 0) + 1 \n    \n        return max(subseqs.values())\n            \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        d = {}\n        for a in arr:\n            a_ = a - difference\n            if difference == 0:\n                if a not in d:\n                    d[a] = 1\n                else:\n                    d[a] = d[a] + 1\n            else:\n                if a not in d:\n                    d[a] = 1\n                if a - difference in d:\n                    d[a] = max(d[a], d[a - difference] + 1)\n            \n        return max(d.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        res = {}\n        for num in arr:\n            res[num] = res.get(num - difference,0) + 1\n        return max(res.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        \n        d = {}\n        \n        for n in arr:\n            d[n] = d.get(n - difference, 0) + 1     \n        return max(d.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        #dp[i] longest subsequece at i\n        dic = {}\n        ans = 1\n        for x in arr:\n            pre = x - difference\n            dic[x] = dic.get(pre, 0) + 1\n            ans = max(ans, dic[x])\n        return max(dic.values())\n", "from collections import defaultdict\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        mapping = defaultdict(list)\n        N = len(arr)\n        for i in range(N):\n            mapping[arr[i]].append(i)\n        dp = [1]*N\n        for i in range(1, N):\n            curr = arr[i]\n            if curr - difference in mapping:\n                for idx in mapping[curr - difference]:\n                    if idx >= i: break\n                    if dp[idx] + 1 > dp[i]:\n                        dp[i] = dp[idx] + 1\n        return max(dp)", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        mp = {}\n        ans = 0\n        for n in arr:\n            prev = mp.get(n,0)\n            if n-diff in mp:\n                mp[n] = mp[n-diff] + 1\n            else:\n                mp[n] = 1\n            mp[n] = max(prev, mp[n])\n            ans = max(ans, mp[n])\n        return ans", "class Solution:\n    def longestSubsequence(self, arr: List[int], d: int) -> int:\n        \n        mp = {}\n        \n        for i,a in enumerate(arr):\n            #print (mp,a)\n            if a-d in mp:\n                mp[a] = mp[a-d] + 1\n            else:\n                mp[a] = 1\n        return max(mp.values())\n", "from collections import Counter\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        \n        max_len = 0\n        dp = Counter()\n        for i in range(len(arr)):\n            dp[arr[i]] = max((dp[arr[i] - difference]) + 1, dp[arr[i]])\n            max_len = max(max_len, dp[arr[i]])\n        \n        return max_len", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        dp = {}\n        max_len = 1\n        for num in arr:\n            dp[num] = max(dp.get(num, 1), 1 + dp.get(num - difference, 0))\n            max_len = max(max_len, dp[num])\n        return max_len", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        res = {}\n        for num in arr:\n            res[num] = res[num - difference] + 1 if (num - difference) in res else 1\n        return max(res.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        \n        dp = {}\n        for i in arr:\n            if i-diff in dp:\n                dp[i] = dp[i-diff]+1\n            else:\n                dp[i] = 1\n        \n        return max(dp.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        # dp\n        max_len = 1\n        dp = {}\n        for a in arr:\n            if a - difference in dp:\n                dp[a] = dp[a - difference] + 1\n                max_len = max(max_len, dp[a])\n            else:\n                dp[a] = 1\n        return max_len\n\n        # # brute force\n        # max_len = 1\n        # for i in range(len(arr)):\n        #     curr_tail = arr[i]\n        #     curr_len = 1\n        #     for j in range(i + 1, len(arr)):\n        #         if arr[j] - curr_tail == difference:\n        #             curr_len += 1\n        #             curr_tail = arr[j]\n        #     max_len = max(max_len, curr_len)\n        # return max_len\n\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        d = dict()\n        res = 1\n        for i in arr:\n            if i-diff in d.keys():\n                d[i] = 1 + d[i-diff]\n            else:\n                d[i] = 1\n            res = max(res, d[i])\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        current = {}\n        for x in arr:\n            old = x - difference\n            if old in current:\n                count = current[old]\n                del current[old]\n                current[x] = count + 1\n            elif x not in current:\n                current[x] = 1\n            #print(f'{x, current}')\n        return max([x for x in list(current.values())])\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        record = collections.defaultdict(int)\n        res = 0\n        for i,v in enumerate(arr):\n            l = 1\n            if v - difference in record:\n                l = record[v-difference]+1\n            record[v] = l\n            res = max(res,l)\n        return res\n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        # idea is similar to 300. Longest Increasing Subsequence\n        # but instead of using a dp array and use nested for loop to\n        # check condition, we can store the cur dp results in a hash map\n        # so that we don't need a second for loop to check conditions.\n        # dp = [1 for _ in range(len(arr))]\n        # for i in range(len(dp)):\n        #     for j in range(i):\n        #         if arr[i]-arr[j] == difference:\n        #             dp[i] = max(dp[i], 1+dp[j])\n        # return max(dp)\n        \n        # stores the cur results of longest sequence\n        dp = {}\n        ans = 1\n        for i in range(len(arr)):\n            count = 1\n            # update count for current if\n            # condition is met\n            if arr[i]-difference in dp:\n                count += dp[arr[i]-difference]\n            # store cur results\n            dp[arr[i]] = count\n            ans = max(ans, count)\n        return ans", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        \n        subseqs = dict()\n\n        for num in arr:\n            subseqs[num + difference] = subseqs.get(num, 0) + 1\n\n        return max(subseqs.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        # DP\n        if len(arr)==1: return 1\n        d = {arr[0]:1}\n        for i in range(1,len(arr)):\n            if arr[i]-difference in d:\n                d[arr[i]] = d[arr[i]-difference]+1\n            else: # start a new sequence\n                d[arr[i]] = 1\n        return max(d.values())\n                \n", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        _dict = {arr[0]:1}\n        res = 1\n        for i in arr[1:]:\n            if i - difference in _dict:\n                _dict[i] = 1 + _dict[i-difference]\n                res = max(res, _dict[i])\n            else:\n                _dict[i] = 1\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        mi = min(arr)\n        seq = [0] * (max(arr) - mi + 1)\n        m = 0\n        for a in arr:\n            b = a - difference - mi\n            v = 1\n            if 0 <= b < len(seq):\n                v += seq[b]\n                seq[b] = 0\n            seq[a - mi] = max(seq[a - mi], v)\n            m = max(m, seq[a - mi])\n        return m", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        record = {}\n        for i in range(len(arr)):\n            a = arr[i]\n            if a - difference in record:\n                record[a] = record[a - difference] + 1\n            else:\n                record[a] = 1\n\n        return max(list(record.values()))", "class Solution:\n    def longestSubsequence(self, arr: List[int], diff: int) -> int:\n        d = dict()\n        res = 1\n        for i in arr:\n            t = 0\n            try:\n                t = d[i-diff]\n            except:\n                pass\n            if t:\n                d[i] = 1 + d[i-diff]\n            else:\n                d[i] = 1\n            res = max(res, d[i])\n        return res", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        seq = {}\n        for a in arr:\n            seq[a] = max(seq.get(a, 0), seq.pop(a - difference, 0) + 1)\n        return max(seq.values())", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        from collections import defaultdict\n        indexMap = defaultdict(list)\n        for i in range(len(arr)-1, -1, -1):\n            indexMap[arr[i]].append(i)\n            \n        dp = [1] * (len(arr))\n        maxLen = 1\n        for i in range(len(arr)):\n            indexMap[arr[i]].pop()\n            nextVal = arr[i] + difference\n            if nextVal in indexMap and indexMap[nextVal]:\n                j = indexMap[nextVal][-1]\n                dp[j] = max(dp[i] + 1, dp[j])\n                maxLen = max(maxLen, dp[j])\n        return maxLen", "class Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        d=collections.defaultdict(int)\n        res=0\n        for i in arr:\n            if i-difference in d:\n                d[i]=1+d.pop(i-difference)\n            elif i not in d:\n                d[i]=1\n            res=max(res,d[i])\n        return res"]