["import math\ndef fun(num1,num2):\n if num1>num2:\n  a=num1\n  b=num2\n else:\n  a=num2\n  b=num1\n rem=a%b\n while(rem!=0):\n  a=b\n  b=rem\n  rem=a%b\n gcd=b\n return (int((num1*num2)/gcd))\n  \nfor _ in range (int(input())):\n hours=int(input())*24\n x,y,z=list(map(int,input().split()))\n lcm=x\n lcm=fun(x,y)\n lcm=fun(lcm,z)\n print(int(hours//lcm))\n  \n  \n    \n", "from math import gcd\nfor ii in range(int(input())):\n N=int(input())\n N*=24\n X=input().split()\n x,y,z=int(X[0]),int(X[1]),int(X[2])\n \n a = [x,y,z]\n lcm = a[0]\n for i in a[1:]:\n  lcm = lcm*i//gcd(lcm, i)\n \n print(N//lcm)", "def find_lcm(num1, num2): \n if(num1>num2): \n  num = num1 \n  den = num2 \n else: \n  num = num2 \n  den = num1 \n rem = num % den \n while(rem != 0): \n  num = den \n  den = rem \n  rem = num % den \n gcd = den \n lcm = int(int(num1 * num2)/int(gcd)) \n return lcm \nimport math\nt=int(input())\nfor j in range(t):\n n=int(input())\n l=[int(i) for i in input().split()]\n \n num1 = l[0] \n num2 = l[1] \n lcm = find_lcm(num1, num2) \n \n for i in range(2, len(l)): \n  lcm = find_lcm(lcm, l[i]) \n  \n print(math.floor(24*n/lcm))", "# cook your dish here\ndef find_lcm(num1, num2):\n if(num1>num2): \n  num = num1 \n  den = num2 \n else: \n  num = num2 \n  den = num1 \n rem = num % den \n while(rem != 0): \n  num = den \n  den = rem \n  rem = num % den \n gcd = den \n lcm = int(int(num1 * num2)/int(gcd)) \n return lcm\n\nfor _ in range(int(input())):\n n=int(input())\n x=list(map(int,input().split()))\n num1 = x[0] \n num2 = x[1] \n lcm = find_lcm(num1, num2)\n lcm = find_lcm(lcm, x[2])\n n=n*24\n print(int(n/lcm))\n\n", "# cook your dish here\n# Take code snippet from GeeksforGeeks\ndef gcd(a,b): \n if a == 0: \n  return b \n return gcd(b % a, a) \n \n# Function to return LCM of two numbers \ndef lcm(a,b): \n return (a*b) / gcd(a,b) \n \n \nfor _ in range(int(input())):\n n=int(input())\n x,y,z=list(map(int,input().split()))\n total=n*24\n first=lcm(x,y)\n final=lcm(first,z)\n ans=int(total/final)\n print(ans)\n", "def find_lcm(num1, num2): \n if(num1>num2): \n  num = num1 \n  den = num2 \n else: \n  num = num2 \n  den = num1 \n rem = num % den \n while(rem != 0): \n  num = den \n  den = rem \n  rem = num % den \n gcd = den \n lcm = int(int(num1 * num2)/int(gcd)) \n return lcm\n \ndef crowd(days,x,y,z):\n hrs=days*24\n abc=find_lcm(x,y)\n abc=find_lcm(abc,z)\n return hrs//abc\n\nt=int(input())\nnodays=[]\na=[]\nb=[]\nc=[]\nfor i in range(t):\n nodays.append(int(input()))\n d,e,f=map(int,input().split())\n a.append(d)\n b.append(e)\n c.append(f)\nfor i in range(t):\n print(crowd(nodays[i],a[i],b[i],c[i]))", "# cook your dish here\nfrom math import gcd\ndef lcm(a,b):\n return (a*b)//gcd(a,b)\nfor a0 in range(int(input())):\n n=int(input())\n haha=list(map(int, input().split()))\n x=haha[0]\n for i in range(1,3):\n  x=lcm(x,haha[i])\n x/=24\n print(int(n//x))\n", "def findlcm(num1, num2): \n if(num1>num2): \n  num = num1 \n  den = num2 \n else: \n  num = num2 \n  den = num1 \n rem = num % den \n while(rem != 0): \n  num = den \n  den = rem \n  rem = num % den \n gcd = den \n lcm = int(int(num1 * num2)/int(gcd)) \n return lcm\nfor t in range(int(input())):\n n=int(input())\n x,y,z=list(map(int,input().split()))\n lcm = findlcm(findlcm(x,y),z)\n print(int((24*n)/lcm))\n \n \n", "import math\ndef lcm(x,y,z):\n s=x*y\n p=s//math.gcd(x,y)\n s=p*z\n p=s//math.gcd(p,z)\n return p\nfor _ in range(int(input())):\n n=int(input())\n x,y,z=list(map(int,input().split()))\n z=lcm(x,y,z)\n x=n*24//z\n print(x)\n", "# cook your dish here\ndef find_lcm(num1, num2): \n if(num1>num2): \n  num = num1 \n  den = num2 \n else: \n  num = num2 \n  den = num1 \n rem = num % den \n while(rem != 0): \n  num = den \n  den = rem \n  rem = num % den \n gcd = den \n lcm = int(int(num1 * num2)/int(gcd)) \n return lcm \ns= int(input())\nfor i in range(s):\n n=int(input())\n n=n*24\n li=list(map(int,input().split(\" \")))\n num1 = li[0] \n num2 = li[1] \n lcm = find_lcm(num1, num2)\n for i in range(2, len(li)): \n  lcm = find_lcm(lcm, li[i])\n print(int(n/lcm))", "def find_lcm(num1, num2): \n if(num1>num2): \n  num = num1 \n  den = num2 \n else: \n  num = num2 \n  den = num1 \n rem = num % den \n while(rem != 0): \n  num = den \n  den = rem \n  rem = num % den \n gcd = den \n lcm = int(int(num1 * num2)/int(gcd)) \n return lcm \nimport math\nt=int(input())\nfor j in range(t):\n n=int(input())\n l=[int(i) for i in input().split()]\n \n num1 = l[0] \n num2 = l[1] \n lcm = find_lcm(num1, num2) \n \n for i in range(2, len(l)): \n  lcm = find_lcm(lcm, l[i]) \n  \n print(math.floor(24*n/lcm))", "from sys import stdin\nfrom math import gcd\n\nfor _ in range(int(stdin.readline())):\n n = int(stdin.readline())\n x, y, z = list(map(int,stdin.readline().split()))\n lcm1 = (x*y)//gcd(x, y)\n lcm2 = (lcm1*z)//gcd(lcm1, z)\n total = 24*n\n print(total//lcm2)\n", "# cook your dish here\nimport math\nfrom math import gcd\n\ndef prime(n):\n  \n if n <= 1: \n  return False\n \n max_div = math.floor(math.sqrt(n)) \n for i in range(2, 1 + max_div): \n  if n % i == 0: \n   return False\n return True\nt=int(input())\nfor rr in range(t):\n n=int(input())*24\n x,y,z = list(map(int,input().split(' ')))\n def find_lcm(num1, num2): \n  if(num1>num2): \n   num = num1 \n   den = num2 \n  else: \n   num = num2 \n   den = num1 \n  rem = num % den \n  while(rem != 0): \n   num = den \n   den = rem \n   rem = num % den \n  gcd = den \n  lcm = int(int(num1 * num2)/int(gcd)) \n  return lcm \n  \n l = [x, y, z] \n\n num1 = l[0] \n num2 = l[1] \n lcm = find_lcm(num1, num2) \n\n for i in range(2, len(l)): \n  lcm = find_lcm(lcm, l[i])\n print(n//lcm)\n", "t=int(input())\nn=[]\nl=[]\n\ndef gcd(a,b): \n if(b==0): \n  return a \n else: \n  return gcd(b,a%b)\n\nfor i in range(t):\n n.append(24*int(input()))\n k=input().split()\n l.append(k)\n\nfor i in range(t):\n a=l[i]\n a= [int(k) for k in a]\n a[0]=(a[0]*a[1])//gcd(a[0],a[1])\n a[0]=(a[0]*a[2])//gcd(a[0],a[2])\n\n j=a[0]\n print(n[i]//j)\n", "from math import gcd # Python versions 3.5 and above\n#from fractions import gcd # Python versions below 3.5\nfrom functools import reduce # Python version 3.x\n\ndef lcm(denominators):\n return reduce(lambda a,b: a*b // gcd(a,b), denominators)\n\nT = int(input())\n\nfor _ in range(T):\n  \n  n = int(input())\n  \n  \n  text = input()\n  list = [int(n) for n in text.split()]\n\n \n\n\n\n\n\n\n  lcm_ans = lcm(list)\n  print((n*24)//lcm_ans)", "\n\ndef gcd(a,b):\n while b > 0:\n  a, b = b, a % b\n return a\n \ndef lcm(a, b):\n return a * b / gcd(a, b)\nt = int(input())\nfor _ in range(t):\n n=int(input())\n a,b,c=map(int,input().split())\n aa=lcm(a,b)\n temp=lcm(aa,c)\n ans=(n*24)//temp\n print(int(ans))", "from functools import reduce\nfrom math import gcd\ndef lcm(a, b):\n return int(a*b/gcd(a,b))\ndef lcms(*numbers):\n return reduce(lcm, numbers)\nfor _ in range(int(input())):\n d = int(input())\n num = list(map(int, input().split()))\n x = lcms(*num)/24\n print(int(d//x))\n \n", "import math\ndef compute_lcm(x, y):\n return x*y// math.gcd(x,y)\n\nT = int(input())\nfor i in range(T):\n N = int(input())\n x,y,z = list(map(int, input().strip().split()))\n lcm = compute_lcm(compute_lcm(x,y),z)\n print((N*24)//lcm)\n", "from math import gcd\nfrom functools import reduce\ndef lcm(denominators):\n return reduce(lambda a,b: a*b // gcd(a,b), denominators)\n\ntry:\n for testcase in range(int(input())):\n  d=int(input())\n  f,s,t=list(map(int,input().split()))\n  a=lcm([f,s,t])\n  c=24*d//a\n  print(c)\nexcept:EOFError\n", "# cook your dish here\ndef find_lcm(num1, num2): \n if(num1>num2): \n  num = num1 \n  den = num2 \n else: \n  num = num2 \n  den = num1 \n rem = num % den \n while(rem != 0): \n  num = den \n  den = rem \n  rem = num % den \n gcd = den \n lcm = int(int(num1 * num2)/int(gcd)) \n return lcm \n\n\nT=int(input())\nfor r in range(T):\n N=int(input())\n l=[int(x) for x in input().split()]\n num1= l[0] \n num2 = l[1] \n lcm = find_lcm(num1, num2) \n\n for i in range(2, len(l)): \n  lcm = find_lcm(lcm, l[i]) \n \n  hour=24*N\n  ans=hour//lcm\n  print(ans)\n  \n  \n\n\n  \n \n\n", "from math import gcd\nfrom functools import reduce\n\n\ndef lcm(denominators):\n return reduce(lambda a, b: a*b // gcd(a, b), denominators)\n\n\nfor _ in range(int(input())):\n n = int(input())\n arr = list(map(int, input().split()))\n\n res = lcm(arr)\n hrs = 24 * n\n\n print(hrs // res)\n", "from math import gcd,sqrt\ndef ii():return int(input())\ndef mi():return map(int,input().split())\ndef li():return list(mi())\ndef si():return input()\nt=ii()\nwhile(t):\n t-=1\n n=ii()\n n*=24\n x,y,z=mi()\n s=gcd(x,y)\n s1=(x*y)//s\n s=gcd(s1,z)\n s1=(s1*z)//s\n print(n//s1)", "# cook your dish here\nt = int(input())\n\ndef gcd(a,b): \n if a == 0: \n  return b \n return gcd(b % a, a) \n \ndef lcm(a,b): \n return (a*b) / gcd(a,b) \n \n\nfor _ in range(t):\n n = int(input())\n x,y,z = map(int,input().split(' '))\n count = 0\n \n p = lcm(x,y)\n p = lcm(p,z)\n \n print(int(24*n / p))"]