["from math import sqrt\n\nfor _ in range(int(input())):\n n = int(input())\n\n x = int(sqrt(2 * n))\n\n while x * (x+1) // 2 <= n:\n  x += 1\n\n while x * (x+1) // 2 > n:\n  x -= 1\n\n n -= x * (x+1) // 2\n\n print(n)\n", "\"\"\"\nProblem Statement: https://www.codechef.com/ENCD2020/problems/ECAPR203\nAuthor: striker\n\"\"\"\n\nimport math\n\ndef main():\n for test in range(int(input().strip())):\n  n = int(input().strip())\n  tinv = (1 + int(math.sqrt(1 + 8 * n))) // 2\n  print(n - ((tinv * (tinv - 1)) // 2))\n\ndef __starting_point():\n main()\n\n__starting_point()", "import math\n_1_50 = 1 << 50\ndef isqrt(x):\n if x < 0:\n  raise ValueError('square root not defined for negative numbers')\n if x < _1_50:\n  return int(math.sqrt(x)) \n n = int(x)\n if n <= 1:\n  return n \n\n r = 1 << ((n.bit_length() + 1) >> 1)\n while True:\n  newr = (r + n // r) >> 1 \n  if newr >= r:\n   return r\n  r = newr\n\nfor i in range(int(input())):\n n=int(input())\n x=(isqrt(4*2*n+1)-1)//2\n \n x=x*(x+1)//2\n print(n-x)\n", "import math\n\nfor _ in range(int(input())):\n n = int(input())\n \n def findNumber( n ): \n  \n  x = int(math.ceil((-1 + math.sqrt(1\n    + 8 * n + 8)) / 2)) \n  x -= 1\n   \n  b = (x * (x + 1)) // 2 - 1\n  \n  res = n - b -1 \n  \n  return res\n ans = findNumber(n)\n print(ans)", "# cook your dish here\nimport math\nt=int(input())\nwhile t>0:\n n=int(input())\n k=n+1\n k*=2\n a=math.sqrt(k)\n a=int(a)\n if a*(a+1)>k:\n  a-=1 \n b=k-(a*(a+1))\n if b==0:\n  c=a-1\n else:\n  c=b//2\n  c-=1\n print(c)\n t-=1\n \n \n", "# cook your dish here\nimport math\nt = int(input())\nfor _ in range(t):\n n = int(input())\n x = math.floor((-1 + math.sqrt(1 + 8 * (n))) // 2)\n num = (x * (x+1) // 2) \n print(n - num)", "def do_sum(m):\n return ((m+1)*(m+2))//2-1\n\ndef bin_search(n, l, h):\n m = (l+h)//2\n if do_sum(m)<n and do_sum(m+1)>=n:\n  return m\n if do_sum(m)<n:\n  return bin_search(n, m+1, h)\n return bin_search(n, l, m-1)\n\nt = int(input().strip())\nfor _ in range(t):\n n = int(input().strip())\n # a = [int(x) for x in input().strip().split()]\n m = bin_search(n,1,10000000000)\n print(n-((m+1)*(m+2))//2)", "from math import floor\nt = int(input())\nfor _ in range(t):\n n = int(input())\n t = floor((2*n+1/4)**0.5 - 1/2)\n nt = t*(t+1)//2\n print(int(n-nt))", "import math\n_1_50 = 1 << 50\ndef isqrt(x):\n if x < 0:\n  raise ValueError('square root not defined for negative numbers')\n if x < _1_50:\n  return int(math.sqrt(x)) \n n = int(x)\n if n <= 1:\n  return n \n\n r = 1 << ((n.bit_length() + 1) >> 1)\n while True:\n  newr = (r + n // r) >> 1 \n  if newr >= r:\n   return r\n  r = newr\n\nfor i in range(int(input())):\n n=int(input())\n x=(isqrt(4*2*n+1)-1)//2\n x=x*(x+1)//2\n print(n-x)\n\n\n", "#In the Name of God\nimport math\n\nt = int(input())\n\nfor _ in range(t):\n n = int(input())\n x = int(math.sqrt(2*n))\n while(((x*(x+1))//2)-1 >= n):\n  x-=1;\n #print(x)\n ini = (x*(x+1))//2\n ini -= 1\n print(int(n-ini-1))", "# cook your dish here\nimport math\n\ndef solve(N):\n bucket = math.ceil((math.sqrt(8*N+1)-1)//2)\n return N - (bucket*bucket+bucket)//2\n\n\nT = int(input())\nfor _ in range(T):\n N = int(input())\n result = solve(N)\n print(result)", "# cook your dish here\nimport math\nfor _ in range(int(input())):\n N=int(input())\n t=int(math.sqrt(2*N+2))\n if ((t*t+1)<N):\n  t=t+1\n if(t&1==1):\n  print(N%t)\n else:\n  k=N%t\n  if(k<t//2):\n   print(k+t//2)\n  else:\n   print(k-t//2)\n", "for n in range(int(input())):\n x=int(input())\n v=x+1\n j=-1+int((8*v)**.5)\n j//=2\n d=j*(j+1)//2\n if d==v:\n  print(j-1)\n else:\n  print(v-d-1)\n", "# cook your dish here\nt = int(input())\nfor i in range(t):\n n = int(input())\n x = int((((8*(n+1)+1)**0.5) - 1)/2)\n d = (8*(n+1)+1)**0.5\n if (d-int(d)==0):\n  print(x-1)\n else:\n  f = (x*(x+1))//2 \n  c = n-f\n  print(c)\n", "#code\nimport math\nt=int(input())\nwhile(t>0):\n t-=1\n n=int(input())\n n-=1\n n1=(int(math.sqrt(8*n+1))-1)//2\n i=n1*(n1+1)//2-1\n if(n1+1+i==n):\n  print(0)\n else:\n  print(n-i)", "t=int(input())\nfor i in range(t):\n n=int(input())\n term=(-1+((8*n+9)**0.5))/2\n # print('term is '+str(term))\n if term==int(term):\n  ans=int(term-1)\n  # print('yo')\n  # print(str(term)+' '+str(int(term)))\n else:\n  term=int(term)\n  summ=((term*(term+1))//2)-1\n  # print('summ is '+str(summ))\n  ans=n-summ-1\n print(ans)", "# cook your dish here\nfrom collections import defaultdict\nimport math\np=int(input())\nwhile p>0:\n n=int(input())\n #n-=1\n t=math.floor(((2*n+1)**0.5)+0.5)\n res=0.5*(t-(t**2)+2*n)\n print(int(res))\n p-=1\n\n\n \n", "# cook your dish here\n#ecapr203\n\ntry:\n# if(True):\n for _ in range(int(input())):\n  n=int(input())\n  k=int((((9+(8*n))**(0.5))-1)/2)\n  m=((k-1)*(k+2))//2\n  d=n-m\n  if(d==0):\n   print(k-1)\n  else:\n   print(d-1)\nexcept:\n pass", "import math\nt=int(input())\nfor i in range(0,t):\n n=int(input())\n k=0\n x=0\n k=((int(math.sqrt(((8*n)+1)))-1)//2)\n x=(k*(k+1)//2)\n n=n-x\n print(n)\n", "import math\nt = int(input())\nwhile t:\n n = int(input())\n c = 0\n i = (1 + math.ceil((9 + 8 * n)**0.5) - 1) // 2\n # print(i)\n c = (i * (i + 1) // 2) - 1\n # print(c)\n print(int(i - (c - n) - 1))\n t-=1", "import math\nfor _ in range(int(input())):\n n = int(input())\n d = math.floor(math.sqrt(1+(8*n)))\n d = ((d-1)//2)\n s = ((d*(d+1))//2)\n if s==n:\n  print(0)\n else:\n  print(n-s)", "t=int(input())\nfor it in range(t):\n n=int(input())\n p=int(((8*n+1)**0.5-3)/2)\n print(n-((p+1)*(p+2))//2)", "import math\ndef getk(n):\n exp=(9+8*n)**0.5\n exp-=1\n exp=exp//2\n # print(math.floor(exp))\n return math.floor(exp)\nt=int(input())\nwhile(t):\n n=int(input())\n k=int(getk(n))\n offset= int(n-(k*(k+1)//2-1))\n if(offset==0):\n  offset=k\n print(offset-1)\n t-=1"]