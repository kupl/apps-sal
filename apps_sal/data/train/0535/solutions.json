["def C(n):\n return n*(n-1)//2\n\n\ndef sol():\n equal, mini = False, min(N,M)\n total_ways = 2*C(N * M)\n if N==M:\n  equal = True\n ways = 0\n if not equal:\n  ways = (N*C(M)+M*C(N))\n  diag = 0\n  for i in range(2, mini+1):\n   diag += 2*C(i)\n  for i in range(mini+1,max(N,M)):\n   diag += C(mini)\n  diag *= 2\n  ways += diag\n  ways *= 2\n else:\n  ways = (N*C(M)+M*C(N))\n  diag = 0\n  for i in range(2, mini):\n   diag += 2*C(i)\n  diag += C(mini)\n  diag *= 2\n  ways += diag\n  ways *=2\n safe = total_ways - ways\n l, r, t, d = Y-1, M-Y, X-1, N-X\n safe_add, to_remove = 0, 0\n\n for i in range(1,N+1):\n  for j in range(1, M+1):\n   if i==X or j==Y or abs(i-X)==abs(j-Y):\n    continue\n   else:\n    to_remove += 1\n\n if l>0 and r>0 and t>0 and d>0:\n  dtl, dtr, dbl, dbr = min(l,t), min(r,t), min(l,d), min(r,d)\n  safe_add += dtl*dbr*2 + dtr*dbl*2\n  safe_add += t*d*2\n  safe_add += l*r*2\n elif l>0 and r>0:\n  safe_add += l*r*2\n elif t>0 and d>0:\n  safe_add += t*d*2\n\n safe += safe_add - to_remove*2\n\n return safe\n\n\nT = int(input())\nfor _ in range(T):\n N, M, X, Y = [int(x) for x in input().split()]\n print(sol())", "\ndef solve(N,M,x,y):\n n,m=min(N,M),max(N,M)\n\n count = ((n-1)*n*(2*n-1)//3 + (m-n+1)*n**2 ) * 2 ## total sum of l_d and \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r_d at all places\n p1,p2 = min(x-1,y-1),min(N-x,M-y)\n r1,r2 = min(M-y,x-1),min(N-x,y-1)\n #print('-->',p1,p2,r1,r2)\n count += (n+m)*n*m ## total sum of places queen 2 cannt have at all cells \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0including kings cell\n #print('1',count)\n\n count -= p1+p2+r1+r2 + n+m + 2 ## place occupied by king cannot be \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0occupied by queen\n #print('2',count)\n \n count += (n*m)-(p1+p2+r1+r2 + n + m -1) ##  total count where queen 2 cannot \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0come\n #print('3',count)\n\n count -= (n*m-1)*3 ## total count where queen 2 cannot come where centre is \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0counted once\n #print('4',count)\n tot = (n*m-1)*n*m - count\n #print(tot)\n tot += 2*(p1*p2 + r1*r2 + (x-1)*(N-x) + (y-1)*(M-y))\n\n return tot\n \n\nfor _ in range(int(input())):\n\n n,m,x,y = list(map(int,input().split()))\n print(solve(n,m,x,y))\n", "def ncr(n, r): \n if n < r :\n  return 0\n elif r == 2:\n  return(n*(n-1)/2)\n elif r == 1:\n  return n\n else:\n  t = 0\n\nt = int(input())\nfor p in range(t):\n n,m,x,y = input().split()\n n,m,x,y = int(n),int(m),int(x),int(y)\n\n maxi = ncr(n*m-1,2)\n\n sub1 = ncr(n,2) * (m-1)\n sub2 = ncr(m,2) * (n-1)\n maxi = maxi - (sub1 + sub2)\n #print(maxi)\n\n sub3 = ncr(y-1,2) + ncr(m-y,2)\n sub4 = ncr(x-1,2) + ncr(n-x,2)\n #print(sub3,sub4)\n maxi = maxi - (sub3 + sub4)\n #print(maxi)\n\n if n < m:\n  temp = n\n  diff = m-n\n else:\n  temp = m\n  diff = n-m\n\n sub5 = 0\n sub6 = 0\n for i in range(2,temp):\n  sub5 += ncr(i,2)\n\n for j in range(diff+1):\n  sub6 += ncr(temp,2)\n\n sub5 *= 4\n sub6 *= 2\n\n #print(sub5,sub6)\n maxi = maxi - (sub5 + sub6)\n #print(maxi)\n\n l1 = min(n-x,y-1)\n l2 = min(m-y,x-1)\n maxi = maxi + l1 + l2 + (l1*l2)\n\n\n l3 = min(x-1,y-1)\n l4 = min(m-y,n-x)\n maxi = maxi + l3 + l4 + (l3*l4)\n\n print(int(maxi*2))\n\n\n\n\n"]