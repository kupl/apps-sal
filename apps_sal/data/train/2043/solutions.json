["n = int(input())\narr = []\nfor i in range(n):\n    l,r = map(int, input().split())\n    arr.append([l,r])\n    \nlts = []\nfor i in range(n):\n    if arr[i][0] == 0:\n        l = i\n        j = i\n        while arr[j][1] != 0:\n            j = arr[j][1] - 1\n        r = j\n        lts.append([l,r])\n\nfor i in range(1, len(lts)):\n    arr[lts[i-1][1]][1] = lts[i][0] + 1\n    arr[lts[i][0]][0] = lts[i-1][1] + 1\n    \nfor i in range(n):\n    print(arr[i][0], arr[i][1])", "def run(i):\n\tnonlocal l\n\td[i]=1\n\tif(l[i][1]==0):\n\t\treturn i \n\treturn run(l[i][1])\n\n\n\nn=int(input())\nl=[]\nfor u in range(n):\t\n\tl.append(list(map(int,input().split())))\nl.insert(0,0)\nd={}\nans=0\nstart=0\nfor i in range(1,len(l)):\n\tif(l[i][0] == 0):\n\t\tans = run(i)\n\t\tstart = i\n\t\tbreak\nfor i in range(start+1,len(l)):\n\tif(l[i][0] == 0):\n\t\tl[i][0] = ans\n\t\tl[ans][1] = i\n\t\tans = run(i)\nfor val in range(1,len(l)):\n\tprint(l[val][0],l[val][1])\n\n\n\n\n", "n = int(input())\nll = [list(map(int, input().split())) for _ in range(n)]\nll = [[0,0]] + ll\ntail = 0\nvisited = [False]*(n+1)\ncnt = 0\nwhile cnt < n:\n    for i in range(1, n+1):\n        if ll[i][0] == 0 and not visited[i]:\n            head = i\n            visited[head] = True\n            cnt += 1\n            break\n    ll[tail][1] = head\n    ll[head][0] = tail\n    while ll[head][1] != 0:\n        head = ll[head][1]\n        visited[head] = True\n        cnt += 1\n    tail = head\nfor i in range(1, n+1):\n    print(ll[i][0], ll[i][1])\n            \n", "nodes = []\nstart_nodes = []\n\nfor i in range(int(input().strip())):\n    left, right = input().strip().split()\n    left = int(left)\n    right = int(right)\n    current = i + 1\n    if left == 0:\n        start_nodes.append([left, current, right])\n    else:\n        nodes.append([left, current, right])\n        \nlists = []\n\nfor node in start_nodes:\n    links = [node]\n    while True:\n        prevlen = len(links)\n        for i in range(len(nodes)):\n            if links[-1][-1] == nodes[i][1]:\n                links.append(nodes[i])\n        nextlen = len(links)\n        \n        if prevlen == nextlen:\n            break\n    lists.append(links)\n\nflattened = [node for ll in lists for node in ll]\n\nfor i in range(1, len(flattened)):\n    if flattened[i][0] == 0:\n        flattened[i][0] = flattened[i - 1][1]\n        flattened[i - 1][2] = flattened[i][1]\n\nsorted_union = sorted(flattened, key = lambda x: x[1])\n\nfor node in sorted_union:\n    print(node[0], node[2])\n\n\n", "l=[]\nl2=[]\nr2=[]\nr=[]\na=[]\nu=0\nq=0\np=0\nn = int(input())\nfor i in range(n):\n x1,x2 = list(map(int, input().split()))\n l.append(x1)\n r.append(x2)\n if x1==0:\n     u=u+1   \nfor i2 in range(u):\n y=0\n for i in range(p,n):\n  if l[i]==0 and y==0:\n     a.append(i+1)\n     y=1\n     q=i\n     p=i+1\n while r[q]!=0:\n    a.append(r[q])\n    q=r[q]-1\nfor i3 in range(n+1):\n l2.append(0)\nfor i3 in range(1,n):\n l2[a[i3]]=a[i3-1]\ndel l2[0]\n\n\nfor i3 in range(n+1):\n r2.append(0)\nfor i3 in range(0,n-1):\n r2[a[i3]]=a[i3+1]\ndel r2[0]\nfor i3 in range(n):\n    print(l2[i3],r2[i3])\n\n\n \n\n\n\n\n", "n = int(input())\n\nif n == 1:\n    print(0, 0)\n    return\n\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\ns = []\ni = 0\nwhile i < n:\n    if a[i][0] == 0:\n        k = i\n        s.append([i + 1])\n        while a[k][1] != 0:\n            k = a[k][1] - 1\n            s[-1].append(k + 1)\n    i += 1\n\np = []\nfor i in s:\n    p.extend(i)\n\nfor i in range(n):\n    if i == 0:\n        a[p[i] - 1] = [0, p[1]]\n    elif i == n - 1:\n        a[p[i] - 1] = [p[i - 1], 0]\n    else:\n        a[p[i] - 1] = [p[i - 1], p[i + 1]]\n\nfor i in a:\n    print(i[0], i[1])", "k, n = 0, int(input())\nt = [list(map(int, input().split())) for j in range(n)]\nfor m, (l, r) in enumerate(t, 1):\n    if not l:\n        if k: t[k - 1][1], t[m - 1][0] = m, k\n        k = m\n        while r: k, r = r, t[r - 1][1]\nfor l, r in t: print(l, r)", "k, n = 0, int(input())\nt = [list(map(int, input().split())) for j in range(n)]\nfor m, (l, r) in enumerate(t, 1):\n    if not l:\n        if k: t[k - 1][1], t[m - 1][0] = m, k\n        k = m\n        while r: k, r = r, t[r - 1][1]\nfor l, r in t: print(l, r)", "k, n = 0, int(input())\n\nt = [list(map(int, input().split())) for j in range(n)]\n\nfor m, (l, r) in enumerate(t, 1):\n\n    if not l:\n\n        if k: t[k - 1][1], t[m - 1][0] = m, k\n\n        k = m\n\n        while r: k, r = r, t[r - 1][1]\n\nfor l, r in t: print(l, r)\n\n\n\n# Made By Mostafa_Khaled\n", "n = int(input())\nA = [list(map(int, input().split())) for i in range(n)]\nstart = []\nend = []\n\nfor i in range(n):\n    if A[i][0] == 0:\n        start.append(i)\n    elif A[i][1] == 0:\n        end.append(i)\n\n\nfor curr in range(len(start)):\n    x = start[curr]\n    #print(curr)\n    while A[x][1] != 0:\n        #print(x)\n        x = A[x][1] - 1\n    #print(x)\n    if curr != len(start) - 1:\n        A[x][1] = start[curr + 1] + 1\n        A[A[x][1] - 1][0] = x + 1\n\nfor i in range(n):\n    print(A[i][0], A[i][1])\n\n\n\n\n", "class CodeforcesTask847ASolution:\n    def __init__(self):\n        self.result = ''\n        self.n = 0\n        self.cells = []\n\n    def read_input(self):\n        self.n = int(input())\n        for x in range(self.n):\n            self.cells.append([int(y) for y in input().split(\" \")])\n\n    def process_task(self):\n        lists = []\n        for x in range(self.n):\n            if not self.cells[x][0]:\n                nc = [x + 1]\n                curr = x\n                while self.cells[curr][1]:\n                    curr = self.cells[curr][1] - 1\n                nc.append(curr + 1)\n                lists.append(nc)\n        for x in range(len(lists) - 1):\n            self.cells[lists[x][1] - 1][1] = lists[x + 1][0]\n            self.cells[lists[x + 1][0] - 1][0] = lists[x][1]\n        self.result = \"\\n\".join([\"{0} {1}\".format(*cell) for cell in self.cells])\n\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask847ASolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()"]