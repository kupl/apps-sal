["class Cons:\n    def __init__(self, head, tail):\n        self.head = head\n        self.tail = tail\n\n    def to_array(self):\n        return [self.head] + (self.tail.to_array() if self.tail is not None else [])\n\n    @classmethod\n    def from_array(cls, arr):\n        if not arr:\n            return None\n        return Cons(arr.pop(0), Cons.from_array(arr) if arr else None)\n\n    def filter(self, fn):\n        return Cons.from_array(list(filter(fn, self.to_array())))\n\n    def map(self, fn):\n        return Cons.from_array(list(map(fn, self.to_array())))", "class Cons:\n    def __init__(self, value, tail):\n        self.value = value\n        self.tail = tail\n      \n    def to_array(self, lst=None):\n        if lst is None: lst=[]\n        lst.append(self.value)\n        if self.tail is not None: self.tail.to_array(lst)\n        return lst\n    \n    @classmethod\n    def from_array(cls, arr):\n        head = None\n        for x in reversed(arr): head = Cons(x, head)\n        return head\n    \n    def filter(self, fn):\n        if fn(self.value):\n            return Cons(self.value, self.tail and self.tail.filter(fn))\n        else:\n            return self.tail and self.tail.filter(fn)\n    \n    def map(self, fn):\n        return Cons(fn(self.value), self.tail and self.tail.map(fn))", "class Cons:\n    def __init__(self, head, tail) : self.head, self.tail = head, tail\n    to_array=lambda self:[self.head] + (self.tail.to_array() if self.tail is not None else [])\n    from_array=classmethod(lambda cls,arr,i=0,v=None:None if not arr else v if i==len(arr) else cls.from_array(arr,i+1,Cons(arr[len(arr)-1-i],v)))\n    filter=lambda self, fn:self.from_array(list(filter(fn, self.to_array())))\n    map=lambda self, fn:self.from_array(list(map(fn, self.to_array())))", "class Cons:\n    def __init__(self, head, tail):\n        self.head = head\n        self.tail = tail\n      \n    def to_array(self):\n        return [self.head] + (self.tail.to_array() if self.tail is not None else [])\n      \n    @classmethod\n    def from_array(cls, arr):\n        if arr:\n            return Cons(arr[0], Cons.from_array(arr[1:]))\n    \n    def filter(self, fn):\n        return Cons.from_array(list(filter(fn, self.to_array())))\n    \n    def map(self, fn):\n        return Cons.from_array(list(map(fn, self.to_array())))", "class Cons:\n  def __init__(self, head, tail):\n    self.head = head\n    self.tail = tail\n\n  def to_array(self):\n    return [self.head] + (self.tail.to_array() if self.tail else [])\n\n  @classmethod\n  def from_array(cls, arr):\n    return cls(arr[0], cls.from_array(arr[1:])) if arr else None \n\n  def filter(self, f):\n    tail = self.tail.filter(f) if self.tail else None\n    return Cons(self.head, tail) if f(self.head) else tail\n\n  def map(self, f):\n    return Cons(f(self.head), self.tail.map(f) if self.tail else None)", "class Cons:\n    def __init__(self, head, tail):\n        self.head = head\n        self.tail = tail\n      \n    def to_array(self):\n        return [self.head] + (self.tail.to_array() if self.tail is not None else [])\n      \n    @classmethod\n    def from_array(cls, arr):\n        return cls(arr.pop(0), cls.from_array(arr)) if arr else None\n    \n    def filter(self, fn):\n        return self.from_array([e for e in self.to_array() if fn(e)])\n    \n    def map(self, fn):\n        return self.from_array(list(map(fn, self.to_array())))", "class Cons:\n    def __init__(self, head, tail):\n        self.head = head\n        self.tail = tail\n      \n    def to_array(self):\n        return [self.head] + (self.tail.to_array() if self.tail is not None else [])\n      \n    @classmethod\n    def from_array(cls, arr):\n        if arr:\n            return Cons(arr[0],Cons.from_array(arr[1:]) if len(arr)>1 else None)\n        return None\n    \n    def filter(self, fn):\n        if self.tail:\n            return Cons(self.head,self.tail.filter(fn)) if fn(self.head) else self.tail.filter(fn)\n        return self if fn(self.head) else None\n    \n    def map(self, fn):\n        if self.tail:\n            return Cons(fn(self.head),self.tail.map(fn))\n        return Cons(fn(self.head),None)", "class Cons:\n    def __init__(self, head, tail):\n        self.head = head\n        self.tail = tail\n      \n    def to_array(self):\n        return [self.head] + (self.tail.to_array() if self.tail is not None else [])\n      \n    @classmethod\n    def from_array(cls, arr):\n        c = None\n        if len(arr) == 0: return c\n        for i in range(len(arr)-1, -1, -1):\n            c = Cons(arr[i], c)\n        return c\n    \n    def filter(self, fn):\n        buf = self\n        t = []\n        while buf is not None:\n            if fn(buf.head):\n                t.append(buf.head)\n            buf = buf.tail\n        return Cons.from_array(t)\n    \n    def map(self, fn):\n        buf = self\n        t = []\n        while buf is not None:\n            t.append(fn(buf.head))\n            buf = buf.tail\n        return Cons.from_array(t)", "class Cons:\n    def __init__(self, head, tail):\n        self.head = head\n        self.tail = tail\n\n    def to_array(self):\n        return [self.head] + (self.tail.to_array() if self.tail is not None else [])\n\n    @classmethod\n    def from_array(cls, arr):\n        return Cons(arr[0], Cons.from_array(arr[1:])) if arr else None\n\n    def filter(self, fn):\n        filtered_tail = None if self.tail is None else self.tail.filter(fn)\n        return Cons(self.head, filtered_tail) if fn(self.head) else filtered_tail\n\n    def map(self, fn):\n        return Cons(fn(self.head), None if self.tail is None else self.tail.map(fn))", "class Cons:\n    def __init__(self, head, tail=None):\n        self.head = head\n        self.tail = tail\n      \n    def to_array(self):\n        return [self.head] + (self.tail.to_array() if self.tail is not None else [])\n      \n    @classmethod\n    def from_array(cls, arr):\n        #TODO: convert a Python list to an algebraic list.\n        if len(arr) == 0:\n            return None\n        \n        \n        E = cls(arr[0])\n        e = E\n        for i in range(len(arr)-1):\n            e.tail = cls(arr[i+1])\n            e = e.tail\n        return E\n        \n                \n    \n    def filter(self, fn):\n        #TODO: construct new algebraic list containing only elements\n        #      that satisfy the predicate.\n        al = list(filter(fn, self.to_array()))\n        return self.from_array(al)\n        \n        \n    def map(self, fn):\n        #TODO: construct a new algebraic list containing all elements\n        #      resulting from applying the mapper function to a list.\n        head, tail = self.head, self.tail\n        al = list(map(fn, self.to_array()))\n            \n        return self.from_array(al)\n"]