["k=str(input())\nl=len(k)\npaths=[]\nfor i in range(l):\n\tpaths.append([1]*i+[int(k[i])]+[10]*(l-i-1))\nlens = [sum(p) for p in paths]\nn = sum(lens)+2\nm = ['']*n\nm[0] = 'N'*2\nfor i in range(len(paths)):\n\tm[0] += 'Y'*paths[i][0]+'N'*(lens[i]-paths[i][0])\nm[1] = 'N'\nfor i in range(len(paths)):\n\tm[1] += 'N'*(lens[i]-paths[i][-1])+'Y'*paths[i][-1]\nind=2\nfor p in paths:\n\tfor i in range(len(p)-1):\n\t\tfor j in range(p[i]):\n\t\t\tm[ind] = 'N'*(p[i]-j)+'Y'*(p[i+1])+'N'*n\n\t\t\tind+=1\n\tfor j in range(p[-1]):\n\t\tm[ind] = 'N'*n\n\t\tind+=1\nm2=['']*n\nfor i in range(n):\n\tm2[i] = ''\n\tfor j in range(i):\n\t\tm2[i]+=m2[j][i]\n\tm2[i]+=m[i][:n-i]\nprint(len(m2))\nfor s in m2:\n\tprint(s)\n", "n, m = 337, int(input())\np = [['N'] * n for i in range(n)]\ndef f(i, j): p[i][j] = p[j][i] = 'Y'\n\nk = 6 + 15 * 5\nfor j in range(2, 6): f(1, j)\nfor i in range(6, k, 5):\n    for j in range(i - 4, i): f(i, j)\n    for j in range(i + 1, i + 5): f(i, j)\n\nq, d, s = 4 ** 15, 0, k\nwhile q:\n    if m >= q:\n        t = m // q\n        m -= t * q\n        if d == 0:\n            for j in range(k - t, k): f(0, j)\n        else:\n            f(0, s)\n            for i in range(s, s + d): f(i, i + 1)\n            s += d\n            for j in range(k - t, k): f(s, j)\n            s += 1\n    k -= 5\n    d += 2\n    q //= 4\n\nprint(s)\nfor i in range(s): print(''.join(p[i][: s]))", "n, m, cnt = int(input()), 148, 0\nans = [['N'] * m for i in range(m)]\n\ndef edge(i, j):\n    ans[i][j] = ans[j][i] = 'Y'\n\ndef node(*adj):\n    nonlocal cnt\n    i = cnt\n    cnt += 1\n    for j in adj:\n        edge(i, j)\n    return i\n\nstart, end, choice = node(), node(), node()\nif n&1:\n    edge(choice, end)\nfor i in range(1, 30):\n    end, choice = node(node(end), node(end)), node(node(choice))\n    if n&(1<<i):\n        edge(choice, end)\nedge(start, choice)\n\nprint(m)\nfor line in ans:\n    print(''.join(line))\n\n\n\n\n# Made By Mostafa_Khaled\n", "k = int(input())\n\n\nedges = [['N' for i in range(1010)] for j in range(1010)]\nvertices = 2\n\ndef add_edge(a, b):\n    nonlocal edges\n    edges[a][b] = edges[b][a] = 'Y'\n\n\nfor i in range(1, 29 + 1):\n    vertices += 3\n    add_edge(i * 3, i * 3 - 1)\n    add_edge(i * 3, i * 3 + 2)\n    add_edge(i * 3 + 1, i * 3 - 1)\n    add_edge(i * 3 + 1, i * 3 + 2)\n\n\nfor bit in range(30):\n    if (1 << bit) & k:\n        lst = 1\n        for i in range((29 - bit) * 2):\n            vertices += 1\n            add_edge(lst, vertices)\n            lst = vertices\n        add_edge(lst, 3 * bit + 2)\n\nprint(vertices)\n\nif 0:\n    for i in range(1, vertices + 1):\n        print(i, ':', '\\n\\t', end='')\n        for j in range(1, vertices + 1):\n            if edges[i][j] == 'Y':\n                print(j, end=' ')\n        print('')\nelse:\n    print('\\n'.join(map(lambda x: ''.join(x[1:vertices+1]), edges[1:vertices + 1])))\n", "N = int(input())\nb = bin(N)[2:][::-1]\ncount = len(b)-1\n\ndef print_matrix(m):\n    print(len(m))\n    for i in range(len(m)):\n        print(\"\".join(m[i]))\n\nm = [['N' for i in range(2*(len(b))+count)] for j in range(2*(len(b))+count)]\nfor i in range(count-1):\n    val = len(m)-count+i\n    m[val][val+1] = 'Y'\n    m[val+1][val] = 'Y'\n\nif count>0:\n    m[len(m)-1][1] = 'Y'\n    m[1][len(m)-1] = 'Y'\n\n#print_matrix(m)\nc = 0\nc2 = len(m)-count\nfor i in range(0, len(m)-count, 2):\n    if i >= len(m)-2-count and i != 0:\n        m[i][1] = 'Y'\n        m[i+1][1] = 'Y'\n        m[1][i+1] = 'Y'\n        m[1][i] = 'Y'\n    elif i < len(m)-2-count:\n        m[i][i+2] = 'Y'\n        m[i][i+3] = 'Y'\n        m[i+2][i] = 'Y'\n        m[i+3][i] = 'Y'\n        if i != 0:\n       \t    m[i+1][i+2] = 'Y'\n       \t    m[i+1][i+3] = 'Y'\n       \t    m[i+2][i+1] = 'Y'\n       \t    m[i+3][i+1] = 'Y'\n    if b[c] =='1':\n        if i == len(m)-count-2:\n            c2 = 1\n        #print_matrix(m)\n        m[i][c2] = 'Y'\n        m[c2][i] = 'Y'\n        if i != 0:\n            m[i+1][c2] = 'Y'\n            m[c2][i+1] = 'Y'\n    c2+=1\n        #print_matrix(m)\n    c+=1\n\nprint(len(m))\nfor i in range(len(m)):\n    print(\"\".join(m[i]))\n\n", "N = int(input())\nb = bin(N)[2:][::-1]\ncount = len(b)-1\n\ndef print_matrix(m):\n    print(len(m))\n    for i in range(len(m)):\n        print(\"\".join(m[i]))\n\nm = [['N' for i in range(2*(len(b))+count)] for j in range(2*(len(b))+count)]\nfor i in range(count-1):\n    val = len(m)-count+i\n    m[val][val+1] = 'Y'\n    m[val+1][val] = 'Y'\n\nif count>0:\n    m[len(m)-1][1] = 'Y'\n    m[1][len(m)-1] = 'Y'\n\n#print_matrix(m)\nc = 0\nc2 = len(m)-count\nfor i in range(0, len(m)-count, 2):\n    if i >= len(m)-2-count and i != 0:\n        m[i][1] = 'Y'\n        m[i+1][1] = 'Y'\n        m[1][i+1] = 'Y'\n        m[1][i] = 'Y'\n    elif i < len(m)-2-count:\n        m[i][i+2] = 'Y'\n        m[i][i+3] = 'Y'\n        m[i+2][i] = 'Y'\n        m[i+3][i] = 'Y'\n        if i != 0:\n       \t    m[i+1][i+2] = 'Y'\n       \t    m[i+1][i+3] = 'Y'\n       \t    m[i+2][i+1] = 'Y'\n       \t    m[i+3][i+1] = 'Y'\n    if b[c] =='1':\n        if i == len(m)-count-2:\n            c2 = 1\n        #print_matrix(m)\n        m[i][c2] = 'Y'\n        m[c2][i] = 'Y'\n        if i != 0:\n            m[i+1][c2] = 'Y'\n            m[c2][i+1] = 'Y'\n    c2+=1\n        #print_matrix(m)\n    c+=1\n\nprint(len(m))\nfor i in range(len(m)):\n    print(\"\".join(m[i]))\n\n"]