["class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = {}\n        self.times = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.store: \n            self.store[key] = [value]\n            self.times[key] = [timestamp]\n        else:\n            self.store[key].append(value)\n            self.times[key].append(timestamp)\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.store: return \\\"\\\"\n        else:\n            lst = self.times[key]\n            \n            if timestamp < lst[0]: return \\\"\\\"\n            elif timestamp >=lst[-1]: return self.store[key][-1]\n            else:\n                l = 0\n                r = len(lst)-1\n                while l < r:\n                    mid = (l+r)//2\n                    if lst[mid] < timestamp: r = mid\n                    elif lst[mid] == timestamp: return self.store[key][mid]\n                    else: l = mid\n                        \n                \n            \n            return self.store[key][r]\n                \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.times = collections.defaultdict(list)\n        self.values = collections.defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.times[key].append(timestamp) # append = O(1)\n        self.values[key].append(value) # append = O(1)\n\n    def get(self, key: str, timestamp: int) -> str:\n        i = bisect.bisect_right(self.times[key],timestamp) # bisect_right = O(logN)\n        return self.values[key][i-1] if i else '' # index of dict and then list = O(1) + O(1) = O(1)\n        \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.kv=dict()\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.kv:\n            self.kv[key].append((timestamp,value))\n        else:\n            self.kv[key]=[(timestamp,value)]\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.kv:\n            l=self.kv[key]\n            for i in range(len(l)-1,-1,-1):\n                if l[i][0]<=timestamp:\n                    return l[i][1]\n        return ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.mapping = collections.defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        lists = self.mapping[key]\n        if not lists:\n            self.mapping[key] = [(timestamp, value)]\n            return\n        start, end = 0, len(lists) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if lists[mid][0] == timestamp:\n                self.mapping[key][mid] = (timestamp, value)\n                return\n            elif lists[mid][0] < timestamp:\n                start = mid\n            else:\n                end = mid\n                \n        if lists[end][0] == timestamp:\n            lists[end] = (timestamp, value)            \n            self.mapping[key] = lists\n            return\n        if lists[end][0] < timestamp:\n            lists.insert(end + 1, (timestamp, value))\n            self.mapping[key] = lists\n            # print(self.mapping)\n            return\n        if lists[start][0] == timestamp:\n            lists[start] = (timestamp, value)            \n            self.mapping[key] = lists\n            return\n        if lists[start][0] < timestamp:\n            lists.insert(start + 1, (timestamp, value))\n            self.mapping[key] = lists\n            return\n        \n        \n   \n\n    def get(self, key: str, timestamp: int) -> str:\n        lists = self.mapping[key]\n        if not lists:\n            return ''\n        start, end = 0, len(lists) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if lists[mid][0] == timestamp:\n                return lists[mid][1]\n            elif lists[mid][0] < timestamp:\n                start = mid\n            else:\n                end = mid\n                \n        if lists[end][0] <= timestamp:\n            return lists[end][1]\n        if lists[start][0] <= timestamp:\n            return lists[start][1]\n        return ''\n    \n\n    \n    def insert(self, lists, tup):\n        if not lists:\n            return [tup]\n        i = 0\n        # print(lists)\n        while i < len(lists):\n            if lists[i][0] < tup[0]:\n                i += 1\n            elif lists[i][0] == tup[0]:\n                lists[i] == tup\n                return lists\n            else:\n                lists.insert(i, tup)\n                return lists\n        lists.append(tup)\n        return lists\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nclass TimeMap:\n    def __init__(self):\n        self.d = defaultdict(list)\n\n    def set(self, key, value, timestamp):\n        self.d[key].append([timestamp, value])\n        \n    def get(self, key, timestamp):\n        start, end = 0, len(self.d[key]) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if self.d[key][mid][0] == timestamp:\n                return self.d[key][mid][1]\n            elif self.d[key][mid][0] < timestamp:\n                start = mid\n            else:\n                end = mid\n        if self.d[key][end][0] <= timestamp:\n            return self.d[key][end][1]\n        if self.d[key][start][0] <= timestamp:\n            return self.d[key][start][1]\n        return ''        ", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.time_map = defaultdict(list)\n    \n    def binarySearch(self, arr, target):\n        low, high = 0, len(arr)-1\n        while low <= high:\n            mid = low + (high - low)//2\n            if arr[mid][0] == target:\n                return mid\n            elif arr[mid][0] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return low-1\n    \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.time_map[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.time_map.get(key, None)\n        if not arr: return \\\"\\\"\n        i = self.binarySearch(arr, timestamp)#bisect.bisect(arr, (timestamp, chr(127)))\n        return arr[i][1] if i >= 0 else \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.values, self.times = {}, {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.values:\n            self.values[key], self.times[key] = [value], [timestamp]\n        elif timestamp > self.times[key][-1]:\n            self.values[key].append(value); self.times[key].append(timestamp)\n        else:\n            i = bisect.bisect_left(self.times[key], timestamp)\n            self.values[key].insert(i, value); self.times[key].insert(i, timestamp)\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.values or timestamp < self.times[key][0]:\n            return \\\"\\\"\n        return self.values[key][bisect.bisect(self.times[key], timestamp)-1]        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.timemap = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.timemap[key].append([value,timestamp])\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        start=0\n        end=len(self.timemap[key])-1\n        mid=(start+end)//2\n        while start<=end:\n            if self.timemap[key][mid][1]==timestamp:\n                return self.timemap[key][mid][0]\n            elif self.timemap[key][mid][1]<timestamp:\n                start = mid+1\n            elif self.timemap[key][mid][1]>timestamp:\n                end=mid-1\n            mid = (start+end)//2\n        if start>=len(self.timemap[key])-1:\n            return self.timemap[key][end][0]\n        else:\n            return \\\"\\\"\n        \n    \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.timeTable = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.timeTable[key].append([timestamp, value])\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.timeTable:\n            return \\\"\\\"\n        i = bisect.bisect(self.timeTable[key],[timestamp+1])-1\n        if i == -1:\n            return \\\"\\\"\n        return self.timeTable[key][i][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.M=collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.M[key].append([timestamp,value])\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        A = self.M.get(key,None)\n        if A is None:\n            return \\\"\\\"\n        i = bisect.bisect(A,[timestamp,chr(127)])\n        if i:\n            return A[i-1][1]\n        else:\n            return \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        # save a hashmap of key => [... (value, timestamp) ...]\n        self.store = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.store:\n            self.store[key] = [(value, timestamp)]\n        else:\n            self.store[key].append((value, timestamp))\n            \n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.store:\n            return \\\"\\\"\n        else:\n            # now do bst\n            left = 0\n            right = len(self.store[key]) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if self.store[key][mid][1] <= timestamp:\n                    # ensure that it is the largest\n                    next_left = mid + 1\n                    next_mid = (next_left + right) // 2\n                    if next_left > right or self.store[key][next_mid][1] > timestamp:\n                        return self.store[key][mid][0]\n                    left = next_left\n                else:\n                    right = mid - 1\n            return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        tup = (timestamp, value)\n        if key in self.store:\n            # idx = bisect.bisect_left(self.store[key], tup)\n            self.store[key].append(tup)\n        else:\n            self.store[key] = [tup]\n\n    def get(self, key: str, timestamp: int) -> str:\n        #do binary search\n        low = 0\n        high = len(self.store[key])-1\n        arr = self.store[key]\n        \n        while high != low:\n            curr = (low + high)//2\n            if arr[curr][0] == timestamp:\n                return arr[curr][1]\n            elif arr[curr][0] < timestamp:\n                low = min(len(arr)-1, curr + 1)\n            elif arr[curr][0] > timestamp:\n                high = max(0,curr - 1)\n           \n        curr = (low + high)//2\n        \n        if arr[high][0] <= timestamp:\n            return arr[high][1]\n        elif high - 1 >= 0:\n            if arr[high-1][0] <= timestamp:\n                return arr[high-1][1]\n        else:\n            return \\\"\\\"\n                \n            \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.dic = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if(key in self.dic):\n            self.dic[key].append((timestamp, value))\n        else:\n            self.dic[key] = []\n            self.dic[key].append((timestamp, value))\n\n    def get(self, key: str, q: int) -> str:\n        if(key not in self.dic):\n            return \\\"\\\"\n        \n        search = self.dic[key]\n        \n        low = 0\n        high = len(search) - 1\n        \n        while(low <= high):\n            mid = (low+high) // 2\n            \n            cond1 = search[mid][0] == q\n            cond2 = (mid+1 >= len(search) and search[mid][0] < q)\n            cond3 = (mid+1 < len(search) and search[mid][0] < q and search[mid+1][0] > q)\n            \n            if(cond1 or cond2 or cond3):\n                return search[mid][1]\n            elif(search[mid][0] > q):\n                high = mid - 1\n            else:\n                low = mid + 1\n            \n        return \\\"\\\"\n        \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append((value, timestamp))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        return next((v for v,t in reversed(self.d[key]) if t <= timestamp), \\\"\\\")\n    \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.values = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.values:\n            self.values[key] = []\n            \n        self.values[key].append((value, timestamp))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.values:\n            return \\\"\\\"\n        \n        if timestamp < self.values[key][0][1]:\n            return \\\"\\\"\n        \n        return self.search(key, 0, len(self.values[key]) - 1, timestamp)\n    \n    def search(self, key, left, right, timestamp):\n        mid = (left + right) // 2\n\n        if self.values[key][mid][1] == timestamp:\n            return self.values[key][mid][0]\n        \n        if left > right:\n            return self.values[key][right][0]\n        \n        if self.values[key][mid][1] > timestamp:\n            return self.search(key, left, mid - 1, timestamp)\n        else:\n            return self.search(key, mid + 1, right, timestamp)\n            \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.M = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.M[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str: \n        lo,hi = 0, len(self.M[key]) \n        while(lo < hi):\n            med = lo+(hi-lo)// 2\n            if self.M[key][med][0] <= timestamp: lo = med+1\n            else: hi = med\n        return self.M[key][lo-1][1] \n    # lo-1<len(self.M[key]) # \n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.M = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.M[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str: \n        lo,hi = 0, len(self.M[key]) - 1\n        while(lo < hi):\n            med = (lo + hi + 1) // 2\n            if self.M[key][med][0] <= timestamp: lo = med\n            else: hi = med - 1\n        return self.M[key][lo][1] if lo < len(self.M[key]) and self.M[key][lo][0] <= timestamp else ''\n            \n        \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = defaultdict(list) # key : [(time1, value1), (time2, value2), ...]\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.store[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        # binary search\n        left = 0\n        right = len(self.store[key]) - 1\n        \n        while left <= right:\n            middle = (left + right) // 2\n            # we want to find self.store[middle] <= timestamp and (middle == len(self.store[key]) - 1 or self.store[middle + 1] > timestamp)\n            if self.store[key][middle][0] <= timestamp:\n                if (middle == len(self.store[key]) - 1 or self.store[key][middle + 1][0] > timestamp):\n                    return self.store[key][middle][1]\n                else:\n                    left = middle + 1\n            else:\n                right = middle - 1\n        \n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict \nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dct = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        arr = self.dct[key]\n        if len(self.dct[key]) == 0:\n            self.dct[key].append((timestamp, value))\n        else:\n            lo, hi = 0, len(self.dct[key]) - 1\n            while lo <= hi:\n                mid = (lo + hi) // 2\n                if arr[mid][0] < timestamp:\n                    lo = mid + 1\n                else:\n                    hi = mid - 1\n            arr.insert(lo, (timestamp, value))\n        return\n            \n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dct:\n            return \\\"\\\"\n        arr = self.dct[key]\n        lo, hi = 0, len(arr) - 1\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if arr[mid][0] == timestamp:\n                return arr[mid][1]\n            elif arr[mid][0] > timestamp:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return arr[hi][1] if hi != -1 else \\\"\\\"\n                \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.store:\n            self.store[key] = [(value, timestamp)]\n        else:\n            self.store[key].append((value, timestamp))\n    \n    def binarySearch(self, k, t):\n        arr = self.store[k]\n        i = 0\n        j = len(arr)-1\n        \n        while i <= j:\n            mid = (i+j)//2\n            \n            if arr[mid][1] == t:\n                return mid\n            \n            if arr[mid][1] < t and (mid+1 >= len(arr) or arr[mid+1][1] > t):\n                return mid\n            \n            if arr[mid][1] > t:\n                j = mid-1\n            else:\n                i = mid+1\n        return -1\n        \n        \n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.store:\n            return ''\n        \n        idx = self.binarySearch(key, timestamp)\n        if idx == -1:\n            return ''\n        \n        return self.store[key][idx][0]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        # key is str, value is a list of list sorted by timestamp in increasing order\n        self.records = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.records:\n            self.records[key] = [[timestamp, value]]\n        else:\n            self.records[key].append([timestamp, value])\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.records:\n            return ''\n        to_search = self.records[key]\n        val = self.b_search(timestamp, to_search)\n        return val\n        \n    def b_search(self, target, array):\n        start, end = 0, len(array)-1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if array[mid][0] == target:\n                return array[mid][1]\n            elif array[mid][0] < target:\n                start = mid\n            else:\n                end = mid - 1\n        if array[end][0] <= target:\n            return array[end][1]\n        if array[start][0] <= target:\n            return array[start][1]\n        return \\\"\\\"\n        \n        \n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dp = {}\n    \n    def binS(self, key, tar, i, j):\n        if i>=j:\n            return j\n        mid = i + (j-i)//2\n        if self.dp[key][mid][1] == tar:\n            return mid\n        if self.dp[key][mid][1] > tar:\n            return self.binS(key, tar, i, mid-1)\n        return self.binS(key, tar, mid+1, j)\n        \n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.dp:\n            self.dp[key].append((value, timestamp))\n        else:\n            self.dp[key] = [(value, timestamp)]\n            \n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.dp:\n            spot = self.binS(key, timestamp, 0, len(self.dp[key]) - 1)\n            if spot == 0 and self.dp[key][spot][1] > timestamp:\n                return \\\"\\\"\n            if spot == len(self.dp[key]) or self.dp[key][spot][1] > timestamp:\n                spot -= 1\n            if self.dp[key][spot][1] > timestamp: return \\\"\\\"\n            return self.dp[key][spot][0]\n        else:\n            return \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        tup = (timestamp, value)\n        if key in self.store:\n            idx = bisect.bisect_left(self.store[key], tup)\n            # print(idx)\n            self.store[key].insert(idx, tup)\n        else:\n            self.store[key] = [tup]\n\n    def get(self, key: str, timestamp: int) -> str:\n        #do binary search\n        low = 0\n        high = len(self.store[key])-1\n        arr = self.store[key]\n        \n        while high != low:\n            curr = (low + high)//2\n            # print(\\\"Low:\\\", low, \\\"High:\\\", high, \\\"Curr\\\", curr, arr[curr][0], timestamp)\n            if arr[curr][0] == timestamp:\n                # print(\\\"returning\\\", arr[curr][1])\n                return arr[curr][1]\n            elif arr[curr][0] < timestamp:\n                low = min(len(arr)-1, curr + 1)\n            elif arr[curr][0] > timestamp:\n                high = max(0,curr - 1)\n           \n        curr = (low + high)//2\n        # print(\\\"Low:\\\", low, \\\"High:\\\", high, arr[curr][0], timestamp)\n        \n        if arr[high][0] <= timestamp:\n            # print(\\\"returning\\\", arr[high][1])\n            return arr[high][1]\n        elif high - 1 >= 0:\n            if arr[high-1][0] <= timestamp:\n                # print(\\\"returning\\\", arr[high-1][1])\n                return arr[high-1][1]\n        else:\n            # print(\\\"returning\\\", \\\"\\\")\n            return \\\"\\\"\n                \n            \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        bisect.insort(self.d[key], (timestamp, 0, value)) \n\n    def get(self, key: str, timestamp: int) -> str:\n        idx = bisect.bisect(self.d[key], (timestamp, 1, \\\"\\\")) - 1\n        # print(self.d[key], idx)\n        if idx < 0:\n          return \\\"\\\"\n        return self.d[key][idx][2]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dp = {}\n    \n    def binS(self, key, tar, i, j):\n        if i>=j:\n            return i\n        mid = i + (j-i)//2\n        if self.dp[key][mid][1] == tar:\n            return mid\n        if self.dp[key][mid][1] > tar:\n            return self.binS(key, tar, i, mid-1)\n        return self.binS(key, tar, mid+1, j)\n        \n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.dp:\n            self.dp[key].append((value, timestamp))\n        else:\n            self.dp[key] = [(value, timestamp)]\n            \n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.dp:\n            spot = self.binS(key, timestamp, 0, len(self.dp[key]) - 1)\n            if spot == 0 and self.dp[key][spot][1] > timestamp:\n                return \\\"\\\"\n            if spot == len(self.dp[key]) or self.dp[key][spot][1] > timestamp:\n                spot -= 1\n            if self.dp[key][spot][1] > timestamp: return \\\"\\\"\n            return self.dp[key][spot][0]\n        else:\n            return \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nclass TimeMap:\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.map[key].append([timestamp, value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.map[key]\n        left = 0\n        right = len(arr) - 1\n        if arr[left][0] > timestamp:\n            return \\\"\\\"\n        elif arr[right][0] <= timestamp:\n            return arr[right][1]\n        else:\n            # Binary search\n            while left <= right:\n                mid = (left + right) // 2\n                if arr[mid][0] == timestamp:\n                    return arr[mid][1]\n                elif arr[mid][0] < timestamp:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return arr[right][1]\n        return \\\"\\\"\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.hmap = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.hmap[key].append([timestamp,value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.hmap[key]\n        n = len(arr)\n        low = 0\n        high = n\n        while(low < high):\n            mid = (low + high) // 2\n            if arr[mid][0] <= timestamp:\n                low = mid + 1\n            elif arr[mid][0] > timestamp:\n                high = mid\n        return \\\"\\\" if high == 0 else arr[high-1][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n    def __init__(self):\n        self.lookup = {}\n\n    def set(self, key, value, timestamp):\n        if key not in self.lookup:\n            self.lookup[key] = [[timestamp, value]]\n        else:\n            self.lookup[key].append([timestamp, value])\n\n    def get(self, key, timestamp):\n        if key not in self.lookup:\n            return \\\"\\\"\n\n        values = self.lookup[key]\n\n        # timestamp is asking for something earlier than our first timestamp\n        if values[0][0] > timestamp:\n            return \\\"\\\"\n        # timestamp is asking for something later than our last timestamp\n        elif values[-1][0] <= timestamp:\n            return values[-1][1]\n\n        left = 0\n        right = len(values)\n        while left <= right:\n            # prevents sum overflow\n            mid = left + (right-left)//2\n\n            if values[mid][0] == timestamp:\n                return values[mid][1]\n\n            if values[mid][0] < timestamp:\n                left = mid + 1\n            elif values[mid][0] > timestamp:\n                right = mid - 1\n\n        # could not find, so return one before l == r\n        return values[right][1]\n", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dix = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dix[key].append([timestamp, value])\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dix or timestamp < self.dix[key][0][0]:\n            return \\\"\\\"\n        \n        target = timestamp\n        lo = 0\n        hi = len(self.dix[key])-1\n        \n        while lo <hi:\n            mid = lo + (hi-lo)//2\n            \n            if self.dix[key][mid][0] <= target and self.dix[key][mid+1][0] > target:\n                return self.dix[key][mid][1]\n            \n            if  self.dix[key][mid][0] > target:\n                hi = mid-1\n            else:\n                lo = mid+1\n        \n        return self.dix[key][hi][1] if self.dix[key][hi][0] <= target else self.dix[key][lo][1]\n        \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.mapping = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.mapping[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        i = bisect.bisect_right(self.mapping[key], (timestamp, chr(127)))\n        if i:\n            return self.mapping[key][i-1][1]\n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    from collections import defaultdict\n    \n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        \n        self.cache = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n        self.cache[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        \n        if key not in self.cache:\n            return ''\n        \n        key_val_list = self.cache[key]\n        \n        # print(self.cache)\n        \n        l = 0\n        r = len(key_val_list) - 1\n        \n        # find idx where key_val_list[i][0] <= timestamp\n        \n        if key_val_list[l][0] > timestamp:\n            return ''\n        \n        found = None\n        \n        while r >= l:\n            m = (r + l) // 2\n            \n            if key_val_list[m][0] > timestamp:\n                r = m - 1\n            elif key_val_list[m][0] == timestamp:\n                return key_val_list[m][1]\n            else:\n                found = m\n                l = m + 1\n        \n        return key_val_list[found][1]\n        \n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from sortedcontainers import SortedList\n\nclass TimeMap:\n    \n    def compare(self,a):\n        return a[0]\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        \n        self.ls = SortedList(key = self.compare)\n        self.size = 0\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n        self.ls.add([timestamp,key,value])\n        self.size+=1\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        \n        temp = self.ls.bisect_right([timestamp])\n        \n        if(temp == 0 or self.size == 0):\n            return \\\"\\\"\n        \n        if(temp == self.size or self.ls[temp][0] > timestamp):\n            temp-=1\n            \n        \n        while(temp >= 0):\n            if(self.ls[temp][1] == key):\n                return self.ls[temp][2]\n            \n            temp-=1\n            \n        return \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap(object):\n    def __init__(self):\n        self.M = collections.defaultdict(list)\n\n    def set(self, key, value, timestamp):\n        self.M[key].append((timestamp, value))\n\n    def get(self, key, timestamp):\n        A = self.M.get(key, None)\n        \n        if A is None: \n          return \\\"\\\"\n        print(chr(127))\n        i = bisect.bisect_right(A, (timestamp, chr(127)))\n        \n        if i: \n          return A[i-1][1] \n        else: \n          return \\\"\\\"", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self._dict = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self._dict:\n            self._dict[key] = [(value, timestamp)]\n        else:\n            val_time_list = self._dict[key]\n            i, j = 0, len(val_time_list) - 1\n            pos = 0\n            while i <= j:\n                mid = (i + j) // 2\n                if val_time_list[mid][1] == timestamp:\n                    pos = mid\n                    break\n                if val_time_list[mid][1] > timestamp:\n                    j = mid - 1\n                else:\n                    i = mid + 1\n            pos = j + 1\n            val_time_list.insert(pos, (value, timestamp))\n            self._dict[key] = val_time_list\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self._dict:\n            return ''\n        val_time_list = self._dict[key]\n        i, j = 0, len(val_time_list) - 1\n        pos = 0\n        while i <= j:\n            mid = (i + j) // 2\n            if val_time_list[mid][1] == timestamp:\n                return val_time_list[mid][0]\n            if val_time_list[mid][1] > timestamp:\n                j = mid - 1\n            else:\n                i = mid + 1\n        if j >= 0: return val_time_list[j][0]\n        else: return ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.kv=dict()\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.kv:\n            self.kv[key].append((timestamp,value))\n        else:\n            self.kv[key]=[(timestamp,value)]\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.kv:\n            # l=self.kv[key]\n            for i in range(len(self.kv[key])-1,-1,-1):\n                if self.kv[key][i][0]<=timestamp:\n                    return self.kv[key][i][1]\n        return ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.records = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.records[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        item = self.records[key]\n        i = len(item)\n        while i > 0:\n            i -= 1\n            if item[i][0] == timestamp:\n                return item[i][1]\n            elif item[i][0] < timestamp:\n                return item[i][1]\n        return ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.values = defaultdict(list)\n        self.times = defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.values[key].append(value)\n        self.times[key].append(timestamp)\n\n    def get(self, key: str, timestamp: int) -> str:\n        idx = bisect.bisect_right(self.times[key], timestamp)\n        return self.values[key][idx-1] if idx else \\\"\\\"\n    \n#      \n#     USING BINARY SEARCH\n#\n#     def get(self, key: str, timestamp: int) -> str:\n#         arr = self.map[key]\n#         n = len(arr)\n        \n#         left = 0\n#         right = nt\n        \n#         while left < right:\n#             mid = (left + right) // 2\n            \n#             if arr[mid][0] <= timestamp:\n#                 left = mid + 1\n#             elif arr[mid][0] > timestamp:\n#                 right = mid\n                \n#         return arr[right-1][1] if (right > 0) else \\\"\\\"\n\n\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)\n\n# kv.set(\\\"love\\\", \\\"high\\\", 10); \n# kv.set(\\\"love\\\", \\\"low\\\", 20); \n# kv.get(\\\"love\\\", 5); -> \\\"\\\"\n# kv.get(\\\"love\\\", 10); -> high\n# kv.get(\\\"love\\\", 15); -> high\n# kv.get(\\\"love\\\", 20); -> low\n# kv.get(\\\"love\\\", 25); -> low\n\n", "class TimeMap:\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = collections.defaultdict(list)\n        \n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dic[key].append((timestamp, value))\n                \n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.dic[key]\n        n = len(arr)\n        \n        left, right = 0, n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid][0] <= timestamp:\n                left = mid + 1\n            elif arr[mid][0] > timestamp:\n                right = mid - 1\n        \n        return \\\"\\\" if right == -1 else arr[right][1]\n        \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "def debug(s, *args):\n    pass\n    # prin/t(s, args)\n\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append((timestamp, value))\n        debug('set', key, value, timestamp)\n\n    def get(self, key: str, timestamp: int) -> str:\n        debug('get', key, timestamp)\n        vals = self.d[key]\n        if not vals:\n            return \\\"\\\"\n        \n        # Binary search the right value\n        lo, hi = 0, len(vals)-1\n        \n        idx = None\n        debug('binsearch', vals, timestamp)\n        while lo <= hi:\n            mid = (lo+hi)//2\n            debug('#', lo, hi, mid)\n            \n            if timestamp >= vals[mid][0] and (mid+1 == len(vals) or timestamp < vals[mid+1][0]):\n                idx = mid\n                break\n            \n            if timestamp > vals[mid][0]:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n\n        debug('idx', idx)\n        if idx != None:\n            return vals[idx][1]\n        return \\\"\\\"\n    \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dict[key].append([timestamp, value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.dict[key]\n        n = len(arr)\n        \n        start = 0\n        end = len(arr)\n        \n        while start < end:\n            mid = (start + end) // 2\n            if arr[mid][0] <= timestamp:\n                start = mid + 1\n            elif arr[mid][0] > timestamp:\n                end = mid\n                \n        return \\\"\\\" if end == 0 else arr[end-1][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dict[key].append([timestamp,value])\n        \n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.dict[key]\n        n = len(arr)-1\n        l = 0\n        r = n\n        while l <= r:\n            mid = (l+r)//2\n            if arr[mid][0] < timestamp:\n                l = mid+1\n            elif arr[mid][0] > timestamp:\n                r = mid-1\n            else:\n                return arr[mid][1]\n        return \\\"\\\" if r == -1 else arr[r][1]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import collections\n\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dict[key].append((value, timestamp))\n\n    def get(self, key: str, timestamp: int) -> str:\n        lt = self.dict[key]\n        low = 0\n        high = len(lt) - 1\n        while low < high:\n            mid = (low + high) // 2\n            if timestamp < lt[mid][1]:\n                high = mid - 1\n            elif timestamp >= lt[mid][1]:\n                if timestamp >= lt[mid+1][1]:\n                    low = mid + 1\n                else:\n                    break\n        if lt[low][1] <= timestamp:\n            return lt[low][0]\n        else:\n            return \\\"\\\"\n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.m = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.m[key].append((value, timestamp))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if len(self.m[key]) == 0: return ''\n        lis = self.m[key]\n        n = len(lis)\n        l, r = 0, n-1\n        m = (l+r+1)//2\n        while l < r:\n            if lis[m][1] == timestamp:\n                return lis[m][0]\n            elif lis[m][1] < timestamp:\n                l = m\n            else:\n                r = m-1\n            m = (l+r+1)//2\n        return lis[m][0] if lis[m][1] <= timestamp else ''\n            \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dic[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        all_values = self.dic[key]\n        if not all_values:\n            return \\\"\\\"\n        val = \\\"\\\"\n        left = 0\n        right = len(all_values) -1\n        while left <= right:\n            middle = (left + right) // 2\n            if all_values[middle][0] == timestamp:\n                val = all_values[middle][1]\n                break\n            elif all_values[middle][0] < timestamp:\n                val = all_values[middle][1]\n                left = middle + 1\n            else:\n                right = middle - 1\n                \n        return val\n                \n    ", "def binarySearch(ls, t):\n    n = len(ls)\n    if len(ls)==0:\n        return ''\n    lo = 0\n    hi = n-1\n    while lo<hi:\n        mi = math.ceil((hi+lo)/2)\n        if ls[mi][1]<=t:\n            lo = mi\n        else:\n            hi = mi-1\n    if ls[hi][1]<=t:\n        return ls[hi][0]\n    else:\n        return ''\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.mp = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.mp[key].append((value, timestamp))\n\n    def get(self, key: str, timestamp: int) -> str:\n        return binarySearch(self.mp[key], timestamp)\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dict[key].append((value, timestamp))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dict:\n            return \\\"\\\"\n        temp = self.dict[key]\n        # print(temp)\n        for i in reversed(range(len(temp))):\n            if temp[i][1] <= timestamp:\n                return temp[i][0]\n        \n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import collections\nimport bisect\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.store[key].append([timestamp, value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        values = self.store.get(key, [])\n        i = bisect.bisect(values, [timestamp, chr(ord(\\\"z\\\")+1)])\n        return values[i-1][1] if i > 0 else \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        insert_index = self.__binary_search(self.map[key], timestamp) + 1\n        self.map[key].insert(insert_index, (value, timestamp))\n\n    def get(self, key: str, timestamp: int) -> str:\n        search_index = self.__binary_search(self.map[key], timestamp)\n        if search_index == -1:\n            return \\\"\\\"\n        return self.map[key][search_index][0]\n    \n    def __binary_search(self, collection, timestamp):\n        n = len(collection)\n        lo, hi = 0, n-1\n         \n        while lo <= hi:\n            mid = (lo+hi) // 2\n            if mid == n-1:\n                return n-1\n            elif collection[mid][1] <= timestamp < collection[mid+1][1]:\n                return mid\n            elif collection[mid+1][1] <= timestamp:\n                lo = mid + 1\n            elif collection[mid][1] > timestamp:\n                hi = mid - 1\n        \n        return -1\n                \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.map[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.map:\n            return ''\n        values = self.map[key]\n        if values[0][0] > timestamp:\n            return ''\n    \n        l, r = 0, len(values) - 1\n        while l < r:\n            mid = l + (r - l + 1) // 2\n            if values[mid][0] > timestamp:\n                r = mid - 1\n            else:\n                l = mid\n        \n        return values[r][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append([value, timestamp])\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.d[key]\n        \n        l = 0\n        r = len(arr) - 1\n        closest = float('inf')\n        \n        while l <= r:\n            mid = l + ((r-l)//2)\n            if arr[mid][1] == timestamp:\n                return arr[mid][0]\n            elif arr[mid][1] < timestamp:\n                closest = arr[mid][0]\n                l = mid + 1\n            else:\n                r = mid - 1\n        return closest if closest != float('inf') else \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.M = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.M[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        # A = self.M.get(key, None)\n        # if not A:\n        #     return \\\"\\\"\n        # i = bisect.bisect_right(A, (timestamp,))\n        # if i == 0:\n        #     return \\\"\\\"\n        # else:\n        #     return A[i-1][1]\n        \n        lo,hi = 0, len(self.M[key]) - 1\n        while(lo < hi):\n            med = (lo + hi + 1) // 2\n            if self.M[key][med][0] <= timestamp: lo = med\n            else: hi = med - 1\n        return self.M[key][lo][1] if lo < len(self.M[key]) and self.M[key][lo][0] <= timestamp else ''\n    \n        # while lo < hi:\n        #     mid = (lo + hi + 1) // 2 #why + 1?\n        #     if self.M[key][mid][0] <= timestamp: \n        #         lo = mid + 1\n        #     else: hi = mid\n        # ind = lo - 1\n        # if ind < len(self.M[key]) and self.M[key][ind][0] <= timestamp:\n        #     # why < len?\n        #     return self.M[key][lo - 1][1]\n        # else:\n        #     return ''\n            \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        \n        self.dict = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n        if key in self.dict:\n            self.dict[key].append((timestamp, value))\n        else:\n            self.dict[key] = [(timestamp, value)]\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        \n        if key in self.dict:\n            arr = self.dict[key]\n            \n            # do a binary search to find the largest val with t smaller than the timestamp\n            \n            l = 0\n            r = len(arr) -1\n            while l <= r:\n                mid = l + (r-l)//2\n                if arr[mid][0] <= timestamp and (mid+1 >= len(arr) or arr[mid+1][0] > timestamp):\n                    # found the largest one:\n                    return arr[mid][1]\n                elif arr[mid][0] <= timestamp:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        \n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import bisect\nfrom collections import defaultdict\nfrom dataclasses import dataclass, field\n\n@dataclass(order=True)\nclass TimeMapValue:\n    timestamp: int\n    value: Any=field(compare=False)\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        bisect.insort_right(self.map[key], TimeMapValue(timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        i = bisect.bisect_right(self.map[key], TimeMapValue(timestamp, None))\n        if i == 0:\n            return \\\"\\\"\n        return \\\"\\\" if i == 0 else self.map[key][i - 1].value\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap(object):\n\n    def __init__(self):\n        self.map = collections.defaultdict(list)\n        \n\n    def set(self, key, value, timestamp):\n        self.map[key].append((timestamp, value))\n        \n\n    def get(self, key, timestamp):\n        values = self.map[key]\n        if not values: return ''\n        left, right = 0, len(values) - 1\n        while left < right:\n            mid = (left + right + 1) // 2\n            pre_time, value = values[mid]\n            if pre_time > timestamp:\n                right = mid - 1\n            else:\n                left = mid\n        return values[left][1] if values[left][0] <= timestamp else ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)\n", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.d:\n            self.d[key].append([timestamp, value])\n        else:\n            self.d[key] = [[timestamp, value]]\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.d[key]\n        n = len(arr)\n        \n        l = 0\n        r = n\n        \n        while l < r:\n            mid = (l + r) // 2\n            if arr[mid][0] > timestamp:\n                r = mid\n            elif arr[mid][0] <= timestamp:\n                l = mid + 1\n        return \\\"\\\" if r == 0 else arr[r - 1][1]\n            \n           \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.dict:\n            self.dict[key] = [[value], [timestamp]]\n        else:\n            self.dict[key][0].append(value)\n            self.dict[key][1].append(timestamp)\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dict or timestamp < self.dict[key][1][0]:\n            return \\\"\\\"\n        timestamps = self.dict[key][1]\n        left = 0\n        right = len(timestamps) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if timestamp >= timestamps[mid]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return self.dict[key][0][right]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import bisect as b\nfrom collections import defaultdict\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.timestamps = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.timestamps[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.timestamps.get(key)\n        if not arr: return \\\"\\\"\n        i = b.bisect(arr, (timestamp, chr(127)))\n        return arr[i-1][1] if i else \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.store[key].append((timestamp, value))\n        \n    def get(self, key: str, timestamp: int) -> str:\n        lst = self.store[key]\n        #for ls in lst[::-1]:\n        #    if ls[0] <= timestamp:\n        #        return ls[1]\n        left, right = 0, len(lst) -1\n        clsInd = -1\n        while left <= right:\n            mid = (left + right) // 2\n            t = lst[mid][0]\n            if t <= timestamp:\n                clsInd = max(clsInd, mid)\n                left = mid + 1\n            else:\n                right = mid -1\n                \n        return \\\"\\\" if clsInd == -1 else lst[clsInd][1]\n    \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.values = defaultdict(list)  # key = [(timestamp, value), (timestamp, value)]\n\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        print(f'set({key}, {timestamp}, {value})')\n        self.values[key].append((timestamp, value))\n\n\n    def get(self, key: str, timestamp: int) -> str:\n        # we need to look through self.values[key] to find the value time closest to timestamp without\n        # going over.\n        values = self.values[key]\n\n        # binary search. if the mid time is greater than timestamp, start with the left half.\n        left = 0\n        right = len(values) - 1\n        found = None\n\n        #print(f'get({key}, {timestamp}) initial found={found} left={left} right={right}')\n        while right >= left:\n            mid = left + (right - left) // 2\n            #print(f'  top left={left} right={right} mid={mid}')\n            if timestamp < values[mid][0]:\n                right = mid - 1\n                #print(f'    timestamp {timestamp} is under {values[mid][0]}, taking left side, found={found} left={left} right={right}')\n            elif timestamp > values[mid][0]:\n                found = mid\n                left = mid + 1\n                #print(f'    timestamp {timestamp} is over {values[mid][0]}, taking right side, found={found} left={left} right={right}')\n            else:\n                #print(f'    timestamp is a match, found={found}')\n                found = mid\n                break\n                \n        if found is None:\n            return ''\n        \n        #print(f'  returning {values[found][1]}')\n        return values[found][1]\n            \n            \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)\n\n\n# n = 3\n\n# 1 2 3 4", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.keyValue = {}\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if not key in self.keyValue:\n            self.keyValue[key] = [(timestamp, value)]\n        else:\n            self.keyValue[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        # Start binary search\n        history = self.keyValue[key]\n        l = 0\n        r = len(history) - 1\n        while l < r:\n            mid = (r + l) // 2\n            if timestamp < history[mid][0]:\n                r = mid - 1\n            elif timestamp > history[mid][0]:\n                l = mid + 1\n            else:\n                return history[mid][1]\n        if timestamp < history[l][0]:\n            return history[l - 1][1] if l - 1 >= 0 else ''\n        return history[l][1] if len(history) > 0 else ''\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.m = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.m[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        A = self.m.get(key, None)\n        if not A:\n            return \\\"\\\"\n        i = bisect.bisect(A, (timestamp, chr(123)))\n        return A[i-1][1] if i else \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.kv = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        res = self.kv.get(key, [])\n        if len(res) == 0:\n            res.append((timestamp, value))\n        else:\n            index = self.bi_search(timestamp, res, 0, len(res)-1) + 1\n            res.insert(index, (timestamp, value))\n        self.kv[key] = res\n    \n    def bi_search(self, t: int, values: List, low: int, hi:int) -> int:\n        if low > hi:\n            return hi\n            \n        mid = (hi + low) // 2\n        if values[mid][0] == t:\n            return mid\n        elif t > values[mid][0]:\n            return self.bi_search(t, values, mid +1, hi) \n        else:\n            return self.bi_search(t, values, low, mid -1)\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        res = self.kv.get(key, [])\n        if len(res) == 0:\n            return \\\"\\\"\n        else:\n            index = self.bi_search(timestamp, res, 0, len(res)-1)\n        if index == -1:\n            return \\\"\\\"\n        else:\n            return res[index][1]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = collections.defaultdict(list)\n        \n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dic[key].append((timestamp, value))\n                \n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.dic[key]\n        n = len(arr)\n        \n        left, right = 0, n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid][0] <= timestamp:\n                left = mid + 1\n            elif arr[mid][0] > timestamp:\n                right = mid - 1\n        \n        return \\\"\\\" if right == -1 else arr[right][1]\n        \n        \n#         arr = self.dic[key]\n#         n = len(arr)\n        \n#         left, right = 0, n - 1\n#         while left <= right:\n#             mid = (left + right) //2\n#             if arr[mid][0] <= timestamp:\n#                 left = mid + 1\n#             elif arr[mid][0] > timestamp:\n#                 right = mid - 1\n        \n#         return \\\"\\\" if left == 0 else arr[left-1][1]\n        \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = defaultdict(list) # key -> (value, timestamp)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # timestamps are strictly increasing so don't worry about key being in it alreadu\n        self.store[key] += [(value, timestamp)]\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        # here we can do a binary search to find the greatest timestamp less than timestamp\n        if not self.store[key] or timestamp < self.store[key][0][1]:\n            return \\\"\\\"\n        \n        # binary search template 1, whilst returning smaller one (r) if we don't find\n        lst = self.store[key]\n        l, r = 0, len(lst)-1\n        while l <= r:\n            m = l + (r-l)//2\n            if lst[m][1] == timestamp:\n                return lst[m][0]\n            \n            elif timestamp > lst[m][1]:\n                l = m + 1\n            else:\n                r = m - 1\n        return lst[r][0]\n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.store[key].append((value, timestamp))\n\n\n    def get(self, key: str, timestamp: int) -> str:\n        items = self.store[key]\n        if not items: return ''\n        \n        left = 0\n        right = len(items)\n        \n        while left < right:\n            mid = left + (right-left) // 2\n            \n            val, prevTime = items[mid]\n            \n            if items[mid][1] <= timestamp:\n                left = mid + 1\n            elif items[mid][1] > timestamp:\n                right = mid\n        \n            \n        \n        return \\\"\\\" if right == 0 else items[right - 1][0]\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nfrom bisect import bisect\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.kvDict = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.kvDict[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        index = bisect(self.kvDict[key], (timestamp, chr(127)))\n        if index == 0:\n            return \\\"\\\"\n        else:\n            return self.kvDict[key][index-1][1]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dd = collections.defaultdict(lambda: [[]])\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        bisect.insort(self.dd[key][0],timestamp)\n        self.dd[key].append(value)\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dd:\n            return ''\n        idx = bisect.bisect(self.dd[key][0], timestamp)\n        if idx > len(self.dd[key][0]) or idx == 0:\n            return ''\n        return self.dd[key][idx]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dict[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.dict[key]\n        low = -1\n        high = len(arr) - 1\n        while low < high:\n            mid = (low + high + 1) // 2\n            if arr[mid][0] > timestamp:\n                high = mid - 1\n            else:\n                low = mid\n        return arr[low][1] if low > -1 else ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.storage = collections.defaultdict(list)\n        \n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.storage[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        lst = self.storage.get(key, '')\n        if not lst or lst is None:\n            return ''\n        #print(lst)\n        # The ascii code range of lower char is [97, 122], thus chr(127) can be used to make sure the located index from bisect.bisect(A, (timestamp, chr(127))) can satisfy the condition: timestamp_prev <= timestamp. In fact, chr(ascii_v) can also be used here where ascii_v's range is [123, 127].\n        \n        idx = bisect.bisect(lst, (timestamp, chr(127)))\n        if not idx or idx is None:\n            return ''\n        \n        return lst[idx-1][1]\n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.hash_map = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if not key in self.hash_map:\n            self.hash_map[key] = []\n        self.hash_map[key].append([value, timestamp])\n\n    def get(self, key: str, timestamp: int) -> str:\n        if not key in self.hash_map:\n            return \\\"\\\"\n        if self.hash_map[key][0][-1] > timestamp:\n            return \\\"\\\"\n        value_array = self.hash_map[key]\n        index = self.binary_search(timestamp, value_array)\n        if value_array[index][-1] > timestamp:\n            return value_array[index-1][0]\n        else:\n            return value_array[index][0]\n            \n        \n        \n    def binary_search(self, timestamp, value_array):\n        left = 0\n        right = len(value_array)-1\n        while left < right:\n            mid = (left+right)//2\n            if value_array[mid][-1] < timestamp:\n                left = mid+1\n            elif value_array[mid][-1] > timestamp:\n                right = mid-1\n            else:\n                return mid\n        return left\n            \n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nfrom bisect import bisect\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.kvDict = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.kvDict[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.kvDict:\n            return \\\"\\\"\n        index = bisect(self.kvDict[key], (timestamp, chr(127)))\n        if index == 0:\n            return \\\"\\\"\n        else:\n            return self.kvDict[key][index-1][1]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import bisect\n\nfrom collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.kw = defaultdict(list)\n        self.kt = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        a = self.kw[key]\n        \n        if len(a) == 0:\n            a.append(value)\n            self.kt[key].append(timestamp)\n        else:\n            i = bisect.bisect_right(self.kt[key], timestamp)\n            self.kt[key].insert(i, timestamp)\n            self.kw[key].insert(i, value)\n\n    def get(self, key: str, timestamp: int) -> str:\n        i = bisect.bisect_right(self.kt[key], timestamp)\n        \n        if i <= 0:\n            return \\\"\\\"\n        \n        return self.kw[key][i - 1]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dt = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.dt:\n            self.dt[key] = [(timestamp, value)]\n        else:\n            self.dt[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dt or self.dt[key][0][0] > timestamp:\n            return \\\"\\\"\n        \n        values = self.dt[key]\n        left, right = 0, len(values)\n        while left < right:\n            mid = (left + right) // 2\n            if values[mid][0] == timestamp:\n                return values[mid][1]\n            elif values[mid][0] > timestamp:\n                right = mid\n            else:\n                left = mid + 1\n        \n        return values[right-1][1]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.map = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.map.setdefault(key, [])\n        self.map[key].append((value, timestamp))\n\n    def binarySearch(self, arr, target, start, end):\n        midpoint = (start + end) // 2\n        if arr[midpoint][1] == target:\n            return arr[midpoint][0]\n        \n        if arr[midpoint][1] < target:\n            if midpoint + 1 > end or arr[midpoint][1] > target:\n                return arr[midpoint][0]\n            return self.binarySearch(arr, target, midpoint+1, end)\n        else:\n            return self.binarySearch(arr, target, start, midpoint-1)\n        \n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.map or timestamp < self.map[key][0][1]:\n            return \\\"\\\"\n            \n        return self.binarySearch(self.map[key], timestamp, 0, len(self.map[key])-1)\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.key_value = collections.defaultdict(list)\n        self.time_of_key = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n        self.key_value[key].append(value)\n        self.time_of_key[key].append(timestamp)\n\n    def get(self, key: str, timestamp: int) -> str:\n        \n        idx = bisect.bisect(self.time_of_key[key], timestamp)\n        if idx == 0:\n            return ''\n        else:\n            return self.key_value[key][idx - 1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\" Initialize your data structure here. \\\"\\\"\\\"\n        self.TimeMap = defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.TimeMap[key].insert(0, (value, timestamp))\n        \n    def get(self, key: str, timestamp: int) -> str:\n        \n        if key in self.TimeMap:\n            temp_list = self.TimeMap[key]\n            for item in temp_list:\n                value, timestamp_prev = item[0], item[1]\n                if timestamp_prev <= timestamp:\n                    return value\n            \n            return \\\"\\\"\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.hashmap = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.hashmap[key].append((timestamp, value))\n        return \n\n    def get(self, key: str, timestamp: int) -> str:\n        index = bisect.bisect(self.hashmap[key], (timestamp, chr(ord(\\\"z\\\") + 1)))\n        if index != 0:\n            return self.hashmap[key][index - 1][1]\n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map=collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n        self.map[key].append([value,timestamp])\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        \n        if key not in self.map or self.map[key][0][1]>timestamp:\n            \n            return \\\"\\\"\n        \n        v=self.map[key]\n        \n        l, r=0,len(v)\n        \n        while l<r:\n            \n            mid=(l+r)//2\n            \n            if v[mid][1]==timestamp:\n                return v[mid][0]\n            \n            if v[mid][1]>timestamp:\n                r=mid\n                \n            else:\n                l=mid+1\n        \n    \n        return v[r-1][0] \n        \n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n    def __init__(self):\n        self.dic = collections.defaultdict(list)\n        \n\n    def set(self, key, value, timestamp):\n        self.dic[key].append([timestamp, value])\n\n    def get(self, key, timestamp):\n        arr = self.dic[key]\n        n = len(arr)\n        \n        left = 0\n        right = n-1\n        \n        while left <= right:\n            \n            \n            mid = int((left + right) / 2)\n            if arr[mid][0]== timestamp:\n                return arr[mid][1]\n            if arr[mid][0] < timestamp:\n                left = mid + 1\n            elif arr[mid][0] > timestamp:\n                right = mid-1\n        \n        return \\\"\\\" if right == -1 else arr[right][1]\n\n        \n    \n   \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.timeStamp = {}\n    \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.timeStamp:\n            self.timeStamp[key] = {'values':[],'time':[]}\n        self.timeStamp[key]['values'].append(value)\n        self.timeStamp[key]['time'].append(timestamp)\n        \n    def get(self, key: str, timestamp: int) -> str:\n        times = self.timeStamp[key]['time']\n        \n        idx = binarySearch(times,timestamp)\n        \n        if idx == 0:\n            return \\\"\\\"\n        \n        return self.timeStamp[key]['values'][idx-1]\n\n\ndef binarySearch(times,key):\n    l = 0\n    h = len(times)\n    \n    while (l<h):\n        mid = (l+h)//2\n        \n        if times[mid]<=key:\n            l = mid+1\n        elif times[mid]>key:\n            h = mid\n    \n    return h\n\n\n# def get(self, key, timestamp):\n#         arr = self.dic[key]\n#         n = len(arr)\n        \n#         left = 0\n#         right = n\n        \n#         while left < right:\n#             mid = (left + right) / 2\n#             if arr[mid][0] <= timestamp:\n#                 left = mid + 1\n#             elif arr[mid][0] > timestamp:\n#                 right = mid\n        \n#         return \\\"\\\" if right == 0 else arr[right - 1][1]\n        \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.dic:\n            self.dic[key].append([timestamp, value])\n        else:\n            self.dic[key] = [[timestamp, value]]\n\n    def get(self, key: str, timestamp: int) -> str:\n        # print(key, timestamp, self.dic)\n        if key not in self.dic:\n            return ''\n        else:\n            tmp = self.dic[key]\n            l = 0\n            r = len(tmp) - 1\n            res = -1\n            while l <= r:\n                m = (l + r) // 2\n                if tmp[m][0] == timestamp:\n                    res = m\n                    break\n                elif tmp[m][0] < timestamp:\n                    l = m + 1\n                else:\n                    r = m - 1\n            if res < 0:\n                if r >= 0:\n                    res = r\n                else:\n                    return ''\n                    \n            return tmp[res][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \n        10/02: my\n        use dict; \n        \n        need to bisect to get the timestamp.  binary search. \n        \n        like find first version f\n        \n        value is an object of [value, list of timestamp. ]\n        \n        because timesteamp are strictly increasing, so it is monolitically increasing.\n        \n        1 3 5 7 9  f(4)=3\n        \n        # BUG Forget self.d self!!!\n        \n        # BUG max_idx=max(l, max_idx)  max_idx cannot be None, > is not supported between instance of none type and int.\n        \\\"\\\"\\\"\n        self.d = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.d:\n            self.d[key].append((timestamp, value))\n        else:\n            self.d[key] = [(timestamp, value)]\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.d:\n            return self.helper(timestamp, self.d[key])\n        else:\n            return ''\n            \n    def helper(self, target, arr):\n        # target is the timestamp input\n        l,r = 0, len(arr)-1\n        max_idx=-1\n        while l<=r:\n            m = (l+r)//2\n            if target==arr[m][0]:\n                # there is only 1 timestamp matche due to strictly increasing.\n                return arr[m][1]\n            # this timestamp is too large, need to find left\n            elif arr[m][0]>target:\n                r=m-1\n            # mid is a valid one! not left! but not sure whether it is the largest\n            else:\n                l=m+1\n                \n                max_idx=max(m, max_idx)\n        return '' if max_idx==-1 else arr[max_idx][1]  \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeStampOrder :\n    def __init__(self, tim, val):\n        self.ord_tim = [tim]\n        self.tim_dict = {tim:val}\n\n    def insert(self, tim, val):\n        self.tim_dict[tim] = val\n        i = 0\n        while i < len(self.ord_tim):\n            if tim > self.ord_tim[i]:\n                break\n            i+=1\n        self.ord_tim.insert(i,tim)\n\n    def get(self, tim):\n        i = 0\n        while i < len(self.ord_tim):\n            if tim >= self.ord_tim[i]:\n                return self.tim_dict[self.ord_tim[i]]\n            i+=1\n        return \\\"\\\"\nclass TimeMap:\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict_key = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.dict_key:\n            self.dict_key[key] = TimeStampOrder(timestamp,value)\n        else :\n            self.dict_key[key].insert(timestamp,value)\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dict_key:\n            return \\\"\\\"\n        else :\n            return self.dict_key[key].get(timestamp)\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import collections\nfrom collections import defaultdict\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.time_map = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.time_map[key].append((timestamp,value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        time_map = self.time_map[key]\n        left,right = 0, len(time_map)\n        \n        while left < right:\n            mid = left + (right-left) // 2\n            if time_map[mid][0] <= timestamp:\n                left = mid + 1\n            elif time_map[mid][0] > timestamp:\n                right = mid\n                \n        if right != 0:\n            return time_map[right-1][1]\n        else:\n            return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\" Initialize your data structure here. \\\"\\\"\\\"\n        self.TimeMap = defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.TimeMap[key].insert(0, (value, timestamp))\n        # print(self.TimeMap)\n        \n    def get(self, key: str, timestamp: int) -> str:\n        \n        if key in self.TimeMap:\n            temp_list = self.TimeMap[key]\n            for item in temp_list:\n                value, timestamp_prev = item[0], item[1]\n                if timestamp_prev <= timestamp:\n                    return value\n            \n            return \\\"\\\"\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n    def __init__(self):\n        self.dic = collections.defaultdict(list)\n        \n\n    def set(self, key, value, timestamp):\n        self.dic[key].append([timestamp, value])\n\n    def get(self, key, timestamp):\n        arr = self.dic[key]\n        n = len(arr)\n        \n        left = 0\n        right = n-1\n        \n        while left <= right:\n            \n            \n            mid = left + (right - left) // 2\n            if arr[mid][0]== timestamp:\n                return arr[mid][1]\n            if arr[mid][0] < timestamp:\n                left = mid + 1\n            elif arr[mid][0] > timestamp:\n                right = mid-1\n        \n        return \\\"\\\" if right == -1 else arr[right][1]\n\n        \n    \n   \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.M = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.M[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        A = self.M.get(key, None)\n        if A is None:\n            return \\\"\\\"\n        i = bisect.bisect(A, (timestamp, chr(127)))\n        return A[i-1][1] if i else \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.map[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        pairs = self.map[key]\n        if not pairs or pairs[0][0] > timestamp:\n            return \\\"\\\"\n        start, end = 0, len(pairs) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if pairs[mid][0] <= timestamp:\n                start = mid\n            else:\n                end = mid \n        if pairs[end][0] <= timestamp:\n            return pairs[end][1]\n        if pairs[start][0] <= timestamp:\n            return pairs[start][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = dict() \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.dic:\n            self.dic[key] = []\n        self.dic[key].append((timestamp, value))\n        \n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dic:\n            return \\\"\\\"\n        left = 0\n        right = len(self.dic[key])\n        mid = None\n        while left < right:\n            mid = (left + right)//2\n            if self.dic[key][mid][0] > timestamp:\n                right = mid\n            else:\n                left = mid + 1\n        return \\\"\\\" if right==0 else self.dic[key][right-1][1]", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.keyValueStore = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.keyValueStore:\n            self.keyValueStore[key] = [(-timestamp,value)]\n        else:\n            bisect.insort(self.keyValueStore[key],(-timestamp,value))\n            \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.keyValueStore:\n            return \\\"\\\"\n        else:\n            for (nts, val) in self.keyValueStore[key]:\n                if -nts<=timestamp:\n                    return val\n            return \\\"\\\"\n                    \n            \n            \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.data = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.data[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if not self.data[key]:\n            return \\\"\\\"\n        left, right = 0, len(self.data[key]) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if timestamp == self.data[key][mid][0]:\n                left = mid + 1\n            elif timestamp > self.data[key][mid][0]:\n                left = mid + 1\n            elif timestamp < self.data[key][mid][0]:\n                right = mid - 1\n        \n        if right == -1 or self.data[key][right][0] > timestamp:\n            return \\\"\\\"\n        return self.data[key][right][1]\n                \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.hashmap = collections.defaultdict(list) # {Key: [(time, value)]}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.hashmap[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.hashmap: return \\\"\\\"\n        \n        n = len(self.hashmap[key])\n        for i in range(n-1,-1,-1):\n            t, v = self.hashmap[key][i]\n            if t <= timestamp:\n                return v\n        return \\\"\\\"\n            \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "def binarySearch(ls, t):\n    n = len(ls)\n    if len(ls)==0:\n        return ''\n    lo = 0\n    hi = n-1\n    while lo<hi:\n        mi = (hi+lo)//2\n        if ls[mi][1]==t:\n            return ls[mi][0]\n        elif ls[mi][1]<t:\n            if ls[mi+1][1]>t:\n                return ls[mi][0]\n            lo = mi+1\n        else:\n            hi = mi-1\n    if ls[hi][1]<=t:\n        return ls[hi][0]\n    else:\n        return ''\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.mp = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.mp[key].append((value, timestamp))\n\n    def get(self, key: str, timestamp: int) -> str:\n        return binarySearch(self.mp[key], timestamp)\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.M = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.M[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        A = self.M.get(key, None)\n        if A is None: return \\\"\\\"\n        i = bisect.bisect(A, (timestamp, chr(127)))\n        return A[i-1][1] if i else \\\"\\\"\n", "from collections import defaultdict\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.map[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        pairList = self.map[key]\n        if not pairList:\n            return \\\"\\\"\n        i = bisect.bisect(pairList, (timestamp, chr(255)))        \n        \n        ## if i == 0: no value at timestamps less than given.\n        ## Otherwise, take the value right before\n        return pairList[i-1][1] if i else \\\"\\\"\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap():\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.timeMap = collections.defaultdict(deque)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n          \n        self.timeMap[key].appendleft((value, timestamp))\n        \n    def get(self, key: str, timestamp: int) -> str:\n        \n        if key not in self.timeMap:\n            return(\\\"\\\")\n        \n        curr = \\\"\\\"\n\n        for val, time in self.timeMap[key]:\n            \n            if time <= timestamp:\n                return(val)\n                   \n        return(curr)\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append( (timestamp, value) )\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if not key in self.d:\n            return ''\n        \n        stack = self.d[key]\n        \n        idx = bisect.bisect(stack, (timestamp, chr(123)) )\n        \n        return stack[idx - 1][1] if idx else ''\n        \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)\n\n#use binary search  \n\n#List((timestamp: dict))", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dic[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        value_lst = self.dic.get(key, None)\n        if value_lst is None:\n            return ''\n        i = bisect.bisect_right(value_lst, (timestamp, chr(127)))\n        return value_lst[i-1][1] if i else ''\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        A = self.d.get(key, None)\n        if A is None: return \\\"\\\"\n        i = bisect.bisect(A, (timestamp, chr(127)))\n        # print(key, timestamp, A, i)\n        return A[i-1][1] if i else \\\"\\\"\n\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nfrom bisect import bisect\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.kv = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.kv[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.kv:\n            return ''\n        i = bisect(self.kv[key], (timestamp,'zz')) - 1\n        return self.kv[key][i][1] if i >= 0 else ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        #group a sequence of key-value pairs into a dictionary of lists\n        self.object = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.object[key].append((timestamp,value))\n        \n        \n    def get(self, key: str, timestamp: int) -> str:\n        A = self.object.get(key,None)\n        if A is None:\n            return ''\n        i = bisect.bisect(A, (timestamp,chr(255)))\n        return A[i-1][1] if i else ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n    from collections import defaultdict\n    import bisect\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.timemap = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        sorted_timestamp = self.timemap[key]\n        sorted_timestamp.insert( bisect.bisect_right(sorted_timestamp, (timestamp, value)), (timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        sorted_timestamp = self.timemap[key]\n        index = bisect.bisect_left(sorted_timestamp, (timestamp, ''))\n        if index == len(sorted_timestamp):\n            return sorted_timestamp[-1][1]\n        elif sorted_timestamp[index][0] == timestamp:\n            return sorted_timestamp[index][1]\n        elif index == 0 and sorted_timestamp[index][0] != timestamp:\n            return ''\n        else:\n            return sorted_timestamp[index-1][1]", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.myDict = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.myDict[key].append([timestamp, value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.myDict.get(key, [\\\"\\\",\\\"\\\"])\n        ans = \\\"\\\"\n        if len(arr) >= 1:\n            #only search\n            idx = bisect.bisect(arr, [timestamp,chr(ord('z')+1)])\n            if idx:\n                ans = arr[idx-1][1]\n        return ans\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.key = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.key:\n            self.key[key] = [[value],[timestamp]]\n        else:\n            self.key[key][0].append(value)\n            self.key[key][1].append(timestamp)\n        # print(self.key)\n\n    def get(self, key: str, timestamp: int) -> str:\n        value,t = self.key[key]\n        low=0\n        high=len(t)-1\n        while low<high:\n            mid = (low+high)//2\n            if timestamp < t[high]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        if t[low] <= timestamp:\n            return value[low]\n        else:\n            return \\\"\\\"\n            \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        # https://leetcode.com/problems/time-based-key-value-store/discuss/595719/python-very-simple-98-fast\n        self.val_dict = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.val_dict[key].append((value, timestamp))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.val_dict:\n            return \\\"\\\"\n        val_list  = self.val_dict[key]\n        i = len(val_list) -1 \n        while i >=0 and val_list[i][1] > timestamp:\n            i -= 1\n        return val_list[i][0] if i >=0 else \\\"\\\"\n            \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "#Binary Search (bisect_right) to find item less than or equal to given key \nfrom bisect import bisect_right\nclass TimeMap:\n\n    def __init__(self):\n        self.keys = dict()\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.keys:\n            self.keys[key] = []\n        \n        self.keys[key].append([timestamp, value])\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.keys: return \\\"\\\"\n        \n        values = self.keys[key]\n        \n        #Or, use [timestamp, chr(127)] to avoid coding binary search\n        index = bisect_right(values, [timestamp, chr(127)])\n        \n        #nothing smaller than or equal to timestamp\n        if index == 0: return \\\"\\\"\n        \n        return values[index - 1][1]\n    \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.times = collections.defaultdict(list)\n        self.values = collections.defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.times[key].append(timestamp)\n        self.values[key].append(value)\n\n    def get(self, key: str, timestamp: int) -> str:\n        i = bisect.bisect_right(self.times[key],timestamp)\n        return self.values[key][i-1] if i else ''\n        \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)\n\n\nclass TimeMap:\n    def __init__(self):\n        self.d = {}\n\n    def set(self, key, value, timestamp):\n        self.d.setdefault(key, []).append([timestamp, value])\n\n    def get(self, key, timestamp):\n        v = self.d.get(key, [])\n        i = bisect.bisect_right(v, [timestamp, chr(ord('z')+1)])\n        return v[i-1][1] if i else ''", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.data = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.data[key].append([timestamp, value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.data:\n            return ''\n        l = self.data[key]\n        i = bisect.bisect(l, [timestamp + 1])\n        if i == 0:\n            return ''\n        return l[i - 1][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dict[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.dict[key]\n        \n        left = 0\n        right = len(arr)\n        \n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid][0] <= timestamp:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return arr[right - 1][1] if right > 0 else ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dic[key].append([timestamp, value])\n        \n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        elements = self.dic.get(key, None)\n        if not elements:\n            return \\\"\\\"\n        i = bisect.bisect(elements, [timestamp, chr(200)])\n        return elements[i-1][1] if i else \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import bisect\nfrom collections import defaultdict\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.tkv = defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.tkv:\n            self.tkv[key][0].append(timestamp)\n            self.tkv[key][1].append(value)\n        else:\n            self.tkv[key] = [[timestamp],[value]]\n\n    def get(self, key: str, timestamp: int) -> str:\n        get_index = bisect.bisect_left(self.tkv[key][0], timestamp)\n        n = len(self.tkv[key][0])\n            \n        if get_index > n - 1:\n                return self.tkv[key][1][n - 1]\n        else: \n            if self.tkv[key][0][get_index] == timestamp:\n                return self.tkv[key][1][get_index]\n            elif get_index > 0:\n                return self.tkv[key][1][get_index - 1]\n            else:\n                return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.M = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.M[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        A = self.M.get(key, None)\n        if A is None: return \\\"\\\"\n        i = bisect.bisect(A, (timestamp, chr(127)))\n        return A[i-1][1] if i else \\\"\\\"", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        from collections import defaultdict\n        self.kv = defaultdict(list)\n        z=0\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.kv[key].append((timestamp, value))\n        z=0\n\n    def get(self, key: str, timestamp: int) -> str:\n        from bisect import bisect_right\n        if key not in self.kv:\n            return \\\"\\\"\n        \n        ind = bisect_right(self.kv[key], (timestamp+0.1,\\\"\\\"))-1  #  +0.1 to resolve the case when timestamp == timestamp_prev\n        if ind == -1:\n            return \\\"\\\"\n        else:\n            return self.kv[key][ind][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "#hash, list, binary search\n#Runtime: 6308 ms, faster than 5.05%\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.d[key]\n        left, right = 0, len(arr)\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid][0] <= timestamp:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[right-1][1] if 0 <= right-1 < len(arr) else ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import bisect\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.time_map = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.time_map[key].append((timestamp, value))\n            \n    def get(self, key: str, timestamp: int) -> str:\n        value_list = self.time_map.get(key, None)\n        if not value_list:\n            return \\\"\\\"\n        left, right = 0, len(value_list) - 1\n        while left < right:\n            mid = (left + right + 1) // 2\n            pre_time, value = value_list[mid]\n            if pre_time > timestamp:\n                right = mid - 1\n            else:\n                left = mid\n        return value_list[left][1] if value_list[left][0] <= timestamp else ''\n        \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = defaultdict(list) \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # find key and check, set new key if it doesn't exist\n        self.dict[key].append((value, timestamp))\n            \n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.dict[key]\n        n = len(arr)\n        \n        left = 0\n        right = n\n        \n        # Short answer\n        # v = self.d.get(key, [])\n        # i = bisect.bisect_right(v, [timestamp, chr(ord('z')+1)])\n        # return v[i-1][1] if i else ''\n        \n        while left < right:\n            mid = (left + right) // 2 \n            if arr[mid][1] <= timestamp:\n                left = mid + 1\n            elif arr[mid][1] > timestamp:\n                right = mid\n        \n        return \\\"\\\" if right == 0 else arr[right - 1][0]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.times = collections.defaultdict(list)\n        self.values = collections.defaultdict(list)        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.times[key].append(timestamp)\n        self.values[key].append(value)        \n\n    def get(self, key: str, timestamp: int) -> str:\n        i = bisect.bisect(self.times[key], timestamp)\n        return self.values[key][i - 1] if i else ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.keys = collections.defaultdict(list)\n        self.times = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.keys[key].append(value)\n        self.times[key].append(timestamp)\n        \n        \n    def get(self, key: str, timestamp: int) -> str:\n        times = self.times[key]\n        \n        l, r = 0, len(times)\n        while l < r:\n            mid = l + (r - l ) // 2\n            if timestamp >= times[mid]:\n                l = mid + 1\n            else:\n                r = mid\n        return self.keys[key][l-1] if l != 0 else ''\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap(object):\n\n    def __init__(self):\n        self.dic = collections.defaultdict(list)\n        \n\n    def set(self, key, value, timestamp):\n        self.dic[key].append([timestamp, value])\n\n    def get(self, key, timestamp):\n        arr = self.dic[key]\n        n = len(arr)\n        \n        left = 0\n        right = n\n        \n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid][0] <= timestamp:\n                left = mid + 1\n            elif arr[mid][0] > timestamp:\n                right = mid\n        \n        return \\\"\\\" if right == 0 else arr[right - 1][1]", "class TimeMap:\n\n    def __init__(self):\n        self.store = defaultdict(list)\n    \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.store[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.store.get(key)\n        if arr is None:\n            return \\\"\\\"\n        l = 0\n        r = len(arr) - 1\n        result = \\\"\\\"\n        while l <= r:\n            mid = (l + r) // 2\n            if arr[mid][0] <= timestamp:\n                result = arr[mid][1]\n                l = mid + 1\n            else:\n                r = mid - 1\n        return result\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = defaultdict(list) \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # find key and check, set new key if it doesn't exist\n        self.dict[key].append((value, timestamp))\n            \n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.dict[key]\n        n = len(arr)\n        \n        left = 0\n        right = n\n        \n        while left < right:\n            mid = (left + right) // 2 \n            if arr[mid][1] <= timestamp:\n                left = mid + 1\n            elif arr[mid][1] > timestamp:\n                right = mid\n        \n        return \\\"\\\" if right == 0 else arr[right - 1][0]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.map[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        res = self.map[key]\n        if not res:\n            return \\\"\\\"\n       \n        return self.findFirstSmaller(res, timestamp)\n       \n    \n    def findFirstSmaller(self, nums, target):\n        left, right = 0, len(nums) - 1\n        while left + 1 < right:\n            mid = (left+right)//2\n            if nums[mid][0] < target:\n                left = mid\n            elif nums[mid][0] == target:\n                right = mid\n            else:\n                right = mid\n        if nums[right][0] <= target:\n            return nums[right][1]\n        if nums[left][0] <= target:\n            return nums[left][1]\n        return \\\"\\\"\n        \n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.timeMap = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.timeMap:\n            self.timeMap[key] = []\n        self.timeMap[key].append([timestamp, value])        \n\n    def get(self, key: str, timestamp: int) -> str:\n        values = self.timeMap[key]\n        \n        left = 0\n        right = len(values)\n        \n        while left < right:\n            mid = (left + right) // 2\n            if values[mid][0] <= timestamp:\n                left = mid + 1\n            elif values[mid][0] > timestamp:\n                right = mid\n        \n        return \\\"\\\" if right == 0 else values[right - 1][1]\n\n", "import collections\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.storage = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.storage[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.storage.get(key)\n        \n        lft, rht = 0, len(arr)\n        while lft < rht:\n            mid = lft + (rht - lft) // 2\n            if arr[mid][0] <= timestamp:\n                lft = mid + 1\n            else:\n                rht = mid\n        \n        return arr[lft - 1][1] if lft != 0 else ''\n        \n        \n#         if not arr:\n#             return \\\"\\\"\n#         if arr[0][0] > timestamp:\n#             return \\\"\\\"\n       \n#         lft, rht = 0, len(arr) - 1\n#         while lft <= rht:\n#             mid = lft + (rht - lft) // 2\n#             if arr[mid][0] == timestamp:\n#                 return arr[mid][1]\n#             if arr[mid][0] < timestamp:\n#                 lft = mid + 1\n#             else:\n#                 rht = mid - 1\n#         return arr[rht][1]\n        ", "from collections import defaultdict\nfrom bisect import bisect_left\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.mapping = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.mapping[key].append((timestamp, value))\n        \n        \n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.mapping:\n            return \\\"\\\"\n        \n        ts = self.mapping[key]\n        start, end = 0, len(ts) - 1 \n        \n        while start + 1 < end:\n            mid = (start + end) // 2\n            midVal, _ = ts[mid]\n            if midVal <= timestamp:\n                start = mid \n            else:\n                end = mid \n                \n        if ts[end][0] <= timestamp:\n            return ts[end][1]\n        if ts[start][0] <= timestamp:\n            return ts[start][1]\n        \n        return \\\"\\\"\n            \n        \n            \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.storage = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.storage[key].append([value, timestamp])\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.storage:\n            return \\\"\\\"\n        \n        returned = self.storage[key]\n        l = 0\n        r = len(returned)\n        \n        while l < r:\n            mid = l + (r - l) // 2\n            \n            if returned[mid][1] <= timestamp:\n                l = mid + 1\n            elif returned[mid][1] > timestamp:\n                r = mid\n                \n        # r - 1 because we found the spot where timestamp < returned[mid], so \n        # we wanna grab the proper index\n        return \\\"\\\" if r == 0 else returned[r - 1][0]\n        \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.storage = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.storage[key].append([value, timestamp])\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.storage:\n            return \\\"\\\"\n        \n        returned = self.storage[key]\n        l = 0\n        r = len(returned)\n        \n        while l < r:\n            mid = l + (r - l) // 2\n            \n            if returned[mid][1] <= timestamp:\n                l = mid + 1\n            elif returned[mid][1] > timestamp:\n                r = mid\n                \n        return \\\"\\\" if r == 0 else returned[r - 1][0]\n        \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.data = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.data[key].append((timestamp, value))\n        \n    def binarySearch(self, l, target):\n        low = 0\n        high = len(l) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if l[mid][0] <= target < l[mid + 1][0]:\n                return mid\n            elif l[mid][0] > target:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n        \n    def get(self, key: str, timestamp: int) -> str:\n        \n        if key not in self.data or timestamp < self.data[key][0][0]:\n            return \\\"\\\"\n    \n        if self.data[key][-1][0] <= timestamp:\n            return self.data[key][-1][1]\n\n        return self.data[key][self.binarySearch(self.data[key], timestamp)][1]", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.d:\n            self.d[key] = [(timestamp, value)]\n        else:\n            self.d[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.d:\n            return ''\n        \n        # Binary search\n        arr = self.d[key]\n        left = 0\n        right = len(arr) - 1\n\n        while left <= right:\n            mid = (left + right) // 2\n\n            if arr[mid][0] == timestamp:\n                return arr[mid][1]\n            elif arr[mid][0] < timestamp:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        return '' if right == -1 else arr[right][1]\n                \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.hashmap = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.hashmap[key].append([value, timestamp])\n\n    def get(self, key: str, timestamp: int) -> str:\n        l = self.hashmap[key]\n        \n        left = 0\n        right = len(l)-1 \n        \n        if l[0][1] > timestamp:\n            return \\\"\\\"\n        \n        while left <= right:\n            mid = left + (right-left) // 2 \n            if l[mid][1] <= timestamp:\n                left = mid+1 \n            else:\n                right = mid-1\n        return l[right][0]\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "# to store key-value pairs, use a dic. But a key has different values bases on the timestamp. We need something to store the values as well as the timestamp. We can use a queue(or deque)\n# because set is in chronological order, time for set is O(1). But for get we need to use binary serach to search the nearest element, so it's O(logn). space is O(n) \nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = collections.defaultdict(list)\n    def search(self,pairs,time):\n        l,r = 0,len(pairs)\n        while l<r:\n            mid = (l+r)//2\n            if pairs[mid][0]>time:\n                r = mid\n            else:\n                l = mid+1\n        return l\n    \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dic[key].append([timestamp,value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dic or self.dic[key][0][0]>timestamp:\n            return ''\n        List = self.dic[key]\n        index = self.search(List,timestamp)\n        return List[index-1][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.store[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        sorted_values = self.store.get(key, None)\n        if sorted_values is None: return \\\"\\\"\n        value = self.bisect_with_timestamp(0, len(sorted_values) - 1, sorted_values, timestamp)\n        return value\n        \n    def bisect_with_timestamp(self, left, right, values, timestamp):\n        while left <= right:\n            pivot = (left + right) // 2\n            pivot_stamp, pivot_value = values[pivot]\n            if pivot_stamp == timestamp:\n                return pivot_value\n            else:\n                if pivot_stamp < timestamp:\n                    left = pivot + 1\n                else:\n                    right = pivot - 1\n                    \n        pivot_stamp, pivot_value = values[pivot]\n        if pivot_stamp < timestamp:\n            return pivot_value\n        else:\n            if pivot - 1 >= 0:\n                pivot_stamp, pivot_value = values[pivot - 1]\n                return pivot_value\n            else:\n                return \\\"\\\"\n                \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.hash = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.hash:\n            self.hash[key] = {'times':[],'values':[]}\n        self.hash[key]['values'].append(value)\n        self.hash[key]['times'].append(timestamp)\n        \n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.hash:\n            return \\\"\\\"\n        \n        values = self.hash[key]['times']\n        idx = search(timestamp,self.hash[key]['times'])\n        # print(\\\"This is the key:\\\",key)\n        # print(\\\"This is the values:\\\",self.hash[key]['values'])\n        # print(\\\"This is times:\\\",values)\n        # print(\\\"This is timestamp:\\\",timestamp)\n        # print(\\\"This is idx:\\\",idx)\n        # print(\\\"*******************\\\")\n        if idx is not None:\n            return self.hash[key]['values'][idx]\n        return \\\"\\\"\n        \n        \ndef search(target,values):\n    l = 0\n    r = len(values)-1\n    ans = None\n    \n    while l<=r:\n        mid = (l+r)//2\n        \n        if values[mid]==target:\n            return mid\n        \n        if values[mid]>target:\n            r = mid-1\n        \n        if values[mid]<target:\n            ans = mid\n            l = mid+1\n    \n    return ans\n        \n    \n    \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.store = defaultdict(list)\n    \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.store[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.store.get(key)\n        if arr is None:\n            return \\\"\\\"\n        l = 0\n        r = len(arr) - 1\n        result = \\\"\\\"\n        while l <= r:\n            mid = l + (r - l) // 2\n            if arr[mid][0] <= timestamp:\n                result = arr[mid][1]\n                l = mid + 1\n            else:\n                r = mid - 1\n        return result\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "import collections\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.storage = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.storage[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.storage.get(key)\n        if not arr:\n            return \\\"\\\"\n        if arr[0][0] > timestamp:\n            return \\\"\\\"\n       \n        lft, rht = 0, len(arr) - 1\n        while lft <= rht:\n            mid = lft + (rht - lft) // 2\n            if arr[mid][0] == timestamp:\n                return arr[mid][1]\n            if arr[mid][0] < timestamp:\n                lft = mid + 1\n            else:\n                rht = mid - 1\n        return arr[rht][1]\n        ", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append((value,timestamp))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if not self.d[key]:\n            return \\\"\\\"\n        if len(self.d[key]) == 1:\n            if self.d[key][0][1] <= timestamp:\n                return self.d[key][0][0]\n            else:\n                return \\\"\\\"\n        \n        i=0\n        j=len(self.d[key])-1\n        while i<=j:\n            m=i + ((j-i)//2)\n            if self.d[key][m][1]<timestamp:\n                i=m+1\n            elif self.d[key][m][1]>timestamp:\n                j=m-1\n            elif self.d[key][m][1]==timestamp:\n                return self.d[key][m][0]\n            else:\n                pass\n        if j!=-1:\n            return self.d[key][j][0]\n        else:\n            return \\\"\\\"\n            \n            \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self.M = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.M[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        A = self.M[key]\n        if not A:\n            return ''\n        left = 0\n        right = len(A) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if timestamp == A[mid][0]:\n                return A[mid][1]\n            if timestamp < A[mid][0]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        if right == -1:\n            return ''\n        return A[right][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)\n", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.t_ = collections.defaultdict(list)\n        self.v_ = collections.defaultdict(list)\n        self.max_ = collections.defaultdict(int)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.t_[key].append(timestamp)\n        self.v_[key].append(value)\n        self.max_[key] = max(self.max_[key], timestamp)\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.t_:\n            return \\\"\\\"\n        if timestamp >= self.max_[key] :\n            return self.v_[key][-1]\n        # \u8fd4\u56deindex \u7684\u53f3\u624b\u908a\u7684\u6578\u503c\n        v = bisect.bisect_right(self.t_[key], timestamp)\n        if v :\n            return self.v_[key][v-1]\n        return \\\"\\\"\n        \n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dic[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        all_values = self.dic[key]\n        if not all_values:\n            return \\\"\\\"\n        val_index = -1\n        for i in range(len(all_values)-1, -1, -1):\n            if all_values[i][0] <= timestamp:\n                val_index = i\n                break\n        return all_values[val_index][1] if val_index > -1 else \\\"\\\"\n            \n                \n    ", "from collections import defaultdict\nimport bisect\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.cache = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.cache[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.cache:\n            return -1\n        \n        tsVals = self.cache[key]\n        idx = self.binarySearch(tsVals, timestamp)\n        #idx = bisect.bisect_left(tsVals, (timestamp, chr(127)))\n        \n        return tsVals[idx][1] if idx >= 0 else \\\"\\\"\n    \n    def binarySearch(self, tsVals, timestamp):\n        low = 0\n        high = len(tsVals)\n        \n        while low < high:\n            mid = low + ((high -low)//2)\n            \n            if tsVals[mid][0] == timestamp:\n                return mid \n            \n            if tsVals[mid][0] < timestamp:\n                low = mid + 1\n            else:\n                high = mid\n        \n        #[foor] [1,bar][4, bar2]        \n        return low - 1\n    \n#         def __init__(self):\n#         self.M = collections.defaultdict(list)\n\n#     def set(self, key, value, timestamp):\n#         self.M[key].append((timestamp, value))\n\n#     def get(self, key, timestamp):\n#         A = self.M.get(key, None)\n#         if A is None: return \\\"\\\"\n#         i = bisect.bisect_left(A, (timestamp, chr(127)))\n#         return A[i-1][1] if i else \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "\\\"\\\"\\\"\n[\\\"TimeMap\\\",\\\"set\\\",\\\"set\\\",\\\"get\\\",\\\"get\\\",\\\"get\\\",\\\"get\\\",\\\"get\\\"]\n[[],[\\\"love\\\",\\\"high\\\",10],[\\\"love\\\",\\\"low\\\",20],[\\\"love\\\",5],[\\\"love\\\",10],[\\\"love\\\",15],[\\\"love\\\",20],[\\\"love\\\",25]]\n\n\nreturn [null,null,null,\\\"\\\",\\\"high\\\",\\\"high\\\",\\\"low\\\",\\\"low\\\"]\n\\\"\\\"\\\"\nclass TimeMap:\n\n    def __init__(self):\n        self.t = {}\n        self.d = collections.defaultdict(list)\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append((value, timestamp))\n        if (key, value) not in self.t:\n            self.t[(key, value)] = (timestamp, timestamp)\n        else:\n            self.t[(key, value)] = (self.t[(key, value)][0], timestamp)\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        # print(self.t, self.d)\n        values = self.d[key]\n        n = len(values)\n        l, r = 0, n - 1\n        while l < r:\n            m = (l + r) // 2\n            if values[m][1] == timestamp:\n                return values[m][0]\n            if values[m][1] < timestamp:\n                l = m + 1\n            else:\n                r = m\n        # print(l)\n        if values[l][1] == timestamp:\n            return values[l][0]\n        if l > 0 and values[l][1] > timestamp and values[l - 1][1] < timestamp:\n            return values[l - 1][0]\n        if values[l][1] > timestamp < values[0][1]:\n            return ''\n        return values[-1][0]\n                \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from typing import Dict, List\nfrom math import floor\n\nclass TimeMap:\n\n    def __init__(self):\n        self.data: Dict[str, List[(int, str)]] = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.data:\n            self.data[key] = []\n        self.data[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.data:\n            return \\\"\\\"\n\n        values = self.data[key]\n        start = 0\n        end = len(values)\n\n        while start < end:\n            mid = floor((start + end) / 2)\n            mid_timestamp, mid_value = values[mid]\n\n            if timestamp == mid_timestamp:\n                return mid_value\n            elif timestamp < mid_timestamp:\n                end = mid\n            else:\n                start = mid + 1\n\n        largest_index_less_than = start - 1\n        if largest_index_less_than < 0:\n            return \\\"\\\"\n\n        _, value = values[largest_index_less_than]\n        return value", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.times = defaultdict(list)\n        self.values = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.times[key].append(timestamp)\n        self.values[key].append(value)\n        \n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.times:\n            return \\\"\\\"\n        low = 0\n        high = len(self.times[key])\n        while low < high:\n            mid = high + (low - high) // 2\n            if timestamp < self.times[key][mid]:\n                high = mid\n            elif timestamp > self.times[key][mid]:\n                low = mid + 1\n            else:\n                return self.values[key][mid]\n        if high == 0:\n            return \\\"\\\"\n        return self.values[key][low - 1]\n\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.d[key].append((value, timestamp))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        # next((v for v,t in reversed(self.d[key]) if t <= timestamp), \\\"\\\")\n        return self.bsearch(self.d[key], timestamp)\n    \n    def bsearch(self, l, time):\n        if not l:\n            return \\\"\\\"\n\n        lo, hi = 0, len(l)-1\n        while lo <= hi:\n            mid = (hi+lo)//2\n            v, t = l[mid]\n            if t <= time:\n                lo = mid + 1 \n            else:\n                hi = mid - 1\n                \n        return l[hi][0] if l[hi][1] <= time else \\\"\\\"\n            \n            \n            \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.kvStore = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.kvStore[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.kvStore:\n            values = self.kvStore[key]\n            left, right = 0, len(values) - 1\n\n            while left <= right:\n                if left == right:\n                    return values[left][1]\n                \n                mid = (left + right) // 2\n                midTS, midValue = values[mid]\n                \n                if midTS == timestamp:\n                    return midValue\n                elif midTS > timestamp:\n                    right = mid - 1\n                elif left + 1 <= right and values[left + 1][0] <= timestamp:\n                    left = mid + 1\n                else:\n                    return midValue\n                    \n        return \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.data = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.data[key].append([value, timestamp])\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.data or timestamp < self.data[key][0][1]:\n            return ''\n        low = 0\n        high = len(self.data[key])\n        while low < high:\n            mid = (low + high) // 2\n            if self.data[key][mid][1] < timestamp + 1:\n                low = mid + 1\n            else:\n                high = mid\n        return self.data[key][low - 1][0]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.map[key].append([timestamp, value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        #print(timestamp)\n        if key in self.map:\n            low = 0\n            high = len(self.map[key])-1\n            while low <= high:\n                middle = (low + high)//2\n                if self.map[key][middle][0] == timestamp:\n                    return self.map[key][middle][1]\n                elif self.map[key][middle][0] < timestamp:\n                    low = middle + 1\n                else:\n                    high = middle - 1\n                \n            if self.map[key][middle][0] > timestamp:\n                if middle > 0: \n                    return self.map[key][middle-1][1]\n            else:\n                    return self.map[key][middle][1]\n                \n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\nclass TimeMap:\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.map[key].append([timestamp, value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        arr = self.map[key]\n        left = 0\n        right = len(arr) - 1\n        if arr[left][0] > timestamp:\n            return \\\"\\\"\n        elif arr[right][0] <= timestamp:\n            return arr[right][1]\n        else:\n            # Binary search\n            while left <= right:\n                mid = (left + right) // 2\n                if arr[mid][0] == timestamp:\n                    return arr[mid][1]\n                elif arr[mid][0] < timestamp:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return arr[right][1]\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        from collections import defaultdict\n        import bisect\n        # Key value pairs of (keys, list of (timestamp, value) tuples)\n        # Binary search to find the value in O(log n) time\n        self._store = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self._store[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if not self._store[key]:\n            return \\\"\\\"\n        idx = self.bsearch(self._store[key], timestamp)\n        if self._store[key][idx][0] > timestamp and idx - 1 >= 0:\n            idx -= 1\n        temp = self._store[key][idx]\n        return temp[1] if temp[0] <= timestamp else \\\"\\\"\n    \n    def bsearch(self, arr, timestamp):\n        lo = 0\n        hi = len(arr) - 1\n        \n        while lo < hi:\n            mid = (lo + hi)//2\n            if arr[mid][0] < timestamp:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.__hash_map={}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.__hash_map:\n            self.__hash_map[key].append((timestamp,value))\n        else:\n            self.__hash_map[key]=[(timestamp,value)]\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.__hash_map:\n            arr=self.__hash_map[key]\n            # arr.sort(key=lambda x:x[0])\n            list_size=len(arr)\n            l=0\n            r=list_size-1\n            while l<=r:\n                mid=l+(r-l)//2\n                if arr[mid][0]==timestamp:\n                    return arr[mid][1]\n                elif arr[mid][0]<timestamp:\n                    l=mid+1\n                else:\n                    r=mid-1\n                    #[8]   t=2\n            if r< 0:\n                return \\\"\\\"\n            else:\n                return arr[r][1]\n        else:\n            return \\\"\\\"\n\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)\n\\\"\\\"\\\"\n[k,1][k,5][k,8][,1][,1]\n\n\\\"\\\"\\\"", "class TimeMap:\n\n    def __init__(self):\n        self.timeMap = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.timeMap:\n            self.timeMap[key] = []\n        self.timeMap[key].append([timestamp, value])        \n\n    def get(self, key: str, timestamp: int) -> str:\n        values = self.timeMap[key]\n        \n        left = 0\n        right = len(values)-1\n        while left <= right:\n            mid = (left + right) // 2\n            if values[mid][0] == timestamp:\n                return values[mid][1]\n            elif values[mid][0] < timestamp:\n                left = mid + 1\n            elif values[mid][0] > timestamp:\n                right = mid - 1\n        print(values[right][0], timestamp)\n        if values[right][0] < timestamp:\n            return values[right][1]\n        else:\n            return \\\"\\\"\n\n\n", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        from collections import defaultdict\n        self.mp = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.mp[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        l, h = 0, len(self.mp[key])-1\n        \n        while l <= h:\n            mid = (l+h)//2\n            if self.mp[key][mid][0] == timestamp:\n                return self.mp[key][mid][1]\n            elif self.mp[key][mid][0] < timestamp:\n                l = mid + 1\n            else:\n                h = mid - 1\n        if h == -1:\n            return ''\n        else:\n            return self.mp[key][h][1]\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        pair = (timestamp, value)\n        self.map[key].append(pair)\n\n    def get(self, key: str, timestamp: int) -> str:\n        def binarysearch(arr, l, r):\n            if l >= r:\n                if arr[l][0] > timestamp:\n                    return arr[max(l-1, 0)]\n                return arr[l]\n            mid = (l + r) // 2\n            if arr[mid][0] < timestamp:\n                return binarysearch(arr, mid+1, r)\n            else:\n                return binarysearch(arr, l, mid-1)\n\n        if key in self.map:\n            arr = self.map[key]\n            if len(arr) == 0:\n                return \\\"\\\"\n            pair = binarysearch(arr, 0, len(arr)-1)\n            if arr[0][0] > timestamp: \n                return \\\"\\\"\n            else:\n                return pair[1]\n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n        self.dic[key].append([timestamp,value])\n        \n    def get(self, key: str, timestamp: int) -> str:\n        \n        left = 0\n        right = len(self.dic[key]) - 1\n        \n        if self.dic[key][left][0] > timestamp:\n            return ''\n        while left < right:\n            mid = left + (right-left+1) // 2\n            if self.dic[key][mid][0] > timestamp:\n                right = mid - 1\n            else:\n                left = mid\n                \n        return self.dic[key][left][1]\n        \n        \n        \n        \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass Node:\n    def __init__(self,time,val):\n        self.left = None\n        self.right = None\n        self.time = time\n        self.val = val\n        \n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dic = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dic[key].append((timestamp,value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.dic.keys(): return \\\"\\\"\n        \n        l, r = 0, len(self.dic[key])-1\n        \n        while l+1 < r:\n            mid = (l + r) // 2\n                \n            if self.dic[key][mid][0] == timestamp:\n                return self.dic[key][mid][1]\n            elif self.dic[key][mid][0] < timestamp:\n                l = mid\n            else:\n                r = mid\n                \n        if self.dic[key][r][0] <= timestamp:\n            return self.dic[key][r][1]\n        if self.dic[key][l][0] <= timestamp:\n            return self.dic[key][l][1]\n        \n        return \\\"\\\"\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from bisect import *\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d= {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.d:\n            self.d[key] = [(timestamp, value)]\n        else:\n            self.d[key].append((timestamp,value))\n    \n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.d: return \\\"\\\"\n        #print (key, tm)\n        l, r = 0, len(self.d[key])-1\n        \n        while l+1<r:\n            m = l + (r-l)//2\n            if self.d[key][m][0] == timestamp: return self.d[key][m][1]\n            if self.d[key][m][0] < timestamp: \n                l = m \n            else: r = m - 1 \n        if self.d[key][r][0] <= timestamp: return self.d[key][r][1]\n        if self.d[key][l][0] <= timestamp: return self.d[key][l][1]\n        # no value with smaller timestamp\n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import defaultdict\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.data = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.data[key].append({\n            \\\"value\\\": value,\n            \\\"timestamp\\\": timestamp\n        })\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.data:\n            return \\\"\\\"\n\n        data = self.data[key]\n        n = len(data)\n\n        result = \\\"\\\"\n        start, end = 0, n - 1\n        \n        while start <= end:\n            mid = start + (end - start) // 2\n            \n            if data[mid][\\\"timestamp\\\"] > timestamp:\n                end = mid - 1\n            elif data[mid][\\\"timestamp\\\"] < timestamp:\n                start = mid + 1\n                result = data[mid][\\\"value\\\"]\n            else:\n                return data[mid][\\\"value\\\"]\n            \n        return result\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    \n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.t_ = collections.defaultdict(list)\n        self.v_ = collections.defaultdict(list)\n        self.max_ = collections.defaultdict(int)\n        \n\n    def set(self, key, value, timestamp):\n        \\\"\\\"\\\"\n        :type key: str\n        :type value: str\n        :type timestamp: int\n        :rtype: None\n        \\\"\\\"\\\"\n        self.t_[key].append(timestamp)\n        \n        self.v_[key].append(value)\n        \n        self.max_[key] = max(self.max_[key], timestamp)\n        \n\n    def get(self, key, timestamp):\n        \\\"\\\"\\\"\n        :type key: str\n        :type timestamp: int\n        :rtype: str\n        \\\"\\\"\\\"\n        if key not in self.t_:\n            return \\\"\\\"\n        if timestamp >= self.max_[key]:\n            return self.v_[key][-1]\n        v = bisect.bisect_right(self.t_[key], timestamp)\n        #print(\\\"v :\\\",v)\n        if v:\n            #print(\\\"self.v_[key][v - 1] :\\\",self.v_[key][v - 1])\n            return self.v_[key][v - 1]\n        return \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.key_map = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if not self.key_map.get(key):\n            self.key_map[key] = []\n        self.key_map[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        val = \\\"\\\"\n        timestamp_list = self.key_map.get(key)\n        if timestamp_list:\n            index = bisect.bisect(timestamp_list, (timestamp,chr(127)))\n            if index:\n                val = timestamp_list[index-1][1]\n        return val\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from collections import deque\nclass TimeMap:\n\n    def bs(self, target, seq):\n        low = 0\n        high = len(seq) - 1\n        result = ''\n        foundTs = -1\n        while(low <= high):\n            mid = (low + high) // 2\n            ts = seq[mid][0]\n            if ts <= target:\n                if ts == target:\n                    return seq[mid][1]\n                elif ts > foundTs:\n                    foundTs = ts\n                    result = seq[mid][1]\n                low = mid + 1\n            else:\n                high = mid - 1\n        return result\n                \n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.map = {}    \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if not key in self.map:\n            self.map[key] = [(timestamp, value)]\n        else:\n            self.map[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if not key in self.map:\n            return ''\n        return self.bs(timestamp, self.map[key])\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from heapq import heappop, heappush\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.res={}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.res:\n            self.res[key]=[]\n            self.res[key]=[[value,timestamp]]\n        else:\n             self.res[key].append([value,timestamp])\n\n    def get(self, key: str, timestamp: int) -> str:\n        array=self.res[key]\n        n = len(self.res[key])\n        i = 0\n        j =n-1\n        if array[i][1]>timestamp:\n            return \\\"\\\"\n        while i<=j:\n            mid = i+(j-i)//2\n            if array[mid][1]==timestamp:\n                return array[mid][0]\n            elif array[mid][1]<timestamp:\n                i = mid+1\n            else:\n                j = mid-1\n        return array[j][0]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        self._data = collections.defaultdict(list)\n        \n    def set(self, key, value, timestamp):\n        self._data[key].append((value, timestamp))\n\n    def get(self, key, timestamp):\n        if key not in self._data:\n            return ''\n        \n        # \u627e\u6570\u7ec4\u91cc\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u7ed9\u5b9a\u7684timestamp\u7684\u6570\u636e\n        arr = self._data[key]\n        start, end = 0, len(arr) - 1\n        while start + 1 < end:\n            mid = start + (end - start) // 2\n            if arr[mid][1] <= timestamp:\n                start = mid\n            else:\n                end = mid - 1\n        \n        if arr[end][1] <= timestamp:\n            return arr[end][0]\n        if arr[start][1] <= timestamp:\n            return arr[start][0]\n        \n        return ''", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = {}\n    \n    def search_time(self,values, time, start, end):\n        n = len(values)\n        index = int((start + end) / 2)\n        if (end - start) <= 20:\n            cur = end\n            while cur >= start:\n                if values[cur][1] <= time:\n                    return values[cur][0]\n                cur -= 1\n            return \\\"\\\"\n                \n        if values[index][1] == time:\n            return values[index][0]\n        elif values[index][1] < time:\n            start = index\n        else:\n            end = index\n        return self.search_time(values, time, start, end)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.store:\n            self.store[key].append((value, timestamp))\n        else:\n            self.store[key] = [(value, timestamp)]\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.store:\n            values = self.store[key]\n            return self.search_time(values, timestamp, 0, len(values)-1)\n        else:\n            return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.memo = collections.defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.memo[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if self.memo.get(key, None):\n            lst = self.memo[key]\n\n            left = 0\n            right = len(lst) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if lst[mid][0] <= timestamp and (mid == len(lst) - 1 or lst[mid+1][0] > timestamp):\n                    return lst[mid][1]\n                elif lst[mid][0] > timestamp:\n                    right = mid -1\n                elif lst[mid+1][0] <= timestamp:\n                    left = mid + 1\n            return \\\"\\\"\n        else:\n            return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict1 = collections.defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dict1[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        A = self.dict1.get(key, None)\n        \n        if A is None: return \\\"\\\"\n        \n        i = bisect.bisect(A, (timestamp, chr(127)))\n        return A[i-1][1] if i else \\\"\\\"\n        \n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \n        \\\"\\\"\\\"\n        self.dic = {}\n        \n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.dic:\n            self.dic[key] = [[value, timestamp]]\n        else:\n            self.dic[key].append([value, timestamp])\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        \n        if key not in self.dic or len(self.dic[key]) == 0:\n            return \\\"\\\"\n        \n        n = len(self.dic[key])\n        \n        l = 0\n        r = n - 1\n        \n        while l < r:\n            mid = l + (r - l + 1)//2\n            if self.dic[key][mid][1] > timestamp:\n                r = mid - 1\n            elif self.dic[key][mid][1] == timestamp:\n                return self.dic[key][mid][0]\n            else:\n                l = mid\n                \n        if self.dic[key][l][1] <= timestamp:\n            return self.dic[key][l][0]\n        else:\n            return \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "from bisect import *\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.d= {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.d:\n            self.d[key] = [(timestamp, value)]\n        else:\n            insort(self.d[key], (timestamp,value))\n    \n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.d: return \\\"\\\"\n        #print (key, tm)\n        l, r = 0, len(self.d[key])-1\n        \n        while l+1<r:\n            m = l + (r-l)//2\n            if self.d[key][m][0] == timestamp: return self.d[key][m][1]\n            if self.d[key][m][0] < timestamp: \n                l = m \n            else: r = m - 1 \n        if self.d[key][r][0] <= timestamp: return self.d[key][r][1]\n        if self.d[key][l][0] <= timestamp: return self.d[key][l][1]\n        # no value with smaller timestamp\n        return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.dict = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.dict[key].append([timestamp, value])\n\n    def get(self, key: str, timestamp: int) -> str:\n        \n        left = 0\n        right = len(self.dict[key])\n        \n        while left < right:\n            mid = (left+right)//2\n            \n            if self.dict[key][mid][0] == timestamp:\n                return self.dict[key][mid][1]\n            elif self.dict[key][mid][0] <= timestamp:\n                left = mid + 1\n            else:\n                right = mid\n            \n        return \\\"\\\" if right == 0 else self.dict[key][right-1][1]\n                \n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "# 10:45 - 11:30\nfrom collections import defaultdict\nfrom bisect import bisect_right\n\nclass TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.values = defaultdict(list)\n        self.timestamps = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.values[key].append(value)\n        self.timestamps[key].append(timestamp)\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        ts = self.timestamps[key]\n        index = bisect_right(ts, timestamp)\n        if index == 0:\n            return ''\n        return self.values[key][index - 1]\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.TimeMaps=collections.defaultdict(list)\n        \n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n        self.TimeMaps[key].append((timestamp,value))\n        \n\n#     # binary search with repeated values    \n#     def get(self, key: str, timestamp: int) -> str:\n        \n#         # get all the values with the same key\n#         arr=self.TimeMaps[key]\n\n#         if not arr: return ''\n        \n#         # sort by timestamp\n#         arr.sort(key=lambda x: x[0])\n \n#         l=0\n#         r=len(arr)-1\n#         res=-1\n#         while l<=r:\n            \n#             m=l+(r-l)//2\n            \n#             if arr[m][0]==timestamp:\n#                 return arr[m][1]\n            \n#             if arr[m][0]>timestamp:\n#                 r=m-1\n#             else:\n#                 res=m\n#                 l=m+1\n\n#         return arr[res][1] if res !=-1 else ''\n\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.TimeMaps:\n            return ''\n        return self.b_search(self.TimeMaps[key], timestamp)\n\n    def b_search(self, lst, target):\n        left, right = 0, len(lst) - 1\n        res = ''\n        while left <= right:\n            mid = left + (right - left) // 2\n            item = lst[mid]\n            if item[0] == target:\n                return item[1]\n            if item[0] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n                res = item[1]\n        return res\n        \n", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.key_map = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if not self.key_map.get(key):\n            self.key_map[key] = []\n        self.key_map[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        val = \\\"\\\"\n        timestamp_list = self.key_map.get(key)\n        if timestamp_list:\n            index = bisect.bisect(timestamp_list, (timestamp,))\n            # print (timestamp, index)\n            # print (timestamp_list)\n            if index > len(timestamp_list) - 1:\n                index -= 1\n            \n            if timestamp_list[index][0] > timestamp:\n                index -= 1\n\n            if index >= 0:\n                val = timestamp_list[index][1]\n        return val\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        \n        if key not in self.store:\n            self.store[key] = [(timestamp, value)]\n        else:\n            self.store[key].append((timestamp, value))\n\n\n    def get(self, key: str, timestamp: int) -> str:\n        # print(self.store, timestamp)\n        \n        if key not in self.store:\n            return \\\"\\\"\n        i = bisect.bisect(self.store[key],( timestamp, chr(127)))\n        return self.store[key][i-1][1] if i else \\\"\\\"\n        \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.data = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.data:\n            self.data[key].append((value, timestamp))\n        else:\n            self.data[key] = [(value, timestamp)]\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.data: return \\\"\\\"  \n        lo = 0\n        hi = len(self.data[key])\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if self.data[key][mid][1] == timestamp:\n                return self.data[key][mid][0]\n            elif self.data[key][mid][1] < timestamp:\n                lo = mid + 1\n            else: \n                hi = mid\n        \n        if lo == 0 and self.data[key][lo][1] > timestamp:\n            return \\\"\\\"\n        return self.data[key][lo-1][0]\n        \n        \n", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.mapping = collections.defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        lists = self.mapping[key]\n        if not lists:\n            self.mapping[key] = [(timestamp, value)]\n            return\n        start, end = 0, len(lists) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if lists[mid][0] == timestamp:\n                self.mapping[key][mid] = (timestamp, value)\n                return\n            elif lists[mid][0] < timestamp:\n                start = mid\n            else:\n                end = mid\n                \n        # if lists[end][0] == timestamp:\n        #     lists[end] = (timestamp, value)            \n        #     self.mapping[key] = lists\n        #     return\n        if lists[end][0] < timestamp:\n            lists.insert(end + 1, (timestamp, value))\n            self.mapping[key] = lists\n            return\n        # if lists[start][0] == timestamp:\n        #     lists[start] = (timestamp, value)            \n        #     self.mapping[key] = lists\n        #     return\n        if lists[start][0] < timestamp:\n            lists.insert(start + 1, (timestamp, value))\n            self.mapping[key] = lists\n            return\n        \n        \n   \n\n    def get(self, key: str, timestamp: int) -> str:\n        lists = self.mapping[key]\n        if not lists:\n            return ''\n        start, end = 0, len(lists) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if lists[mid][0] == timestamp:\n                return lists[mid][1]\n            elif lists[mid][0] < timestamp:\n                start = mid\n            else:\n                end = mid\n                \n        if lists[end][0] <= timestamp:\n            return lists[end][1]\n        if lists[start][0] <= timestamp:\n            return lists[start][1]\n        return ''\n    \n\n\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.store = {}\n    \n    def search_time(self,values, time, start, end):\n        n = len(values)\n        index = int((start + end) / 2)\n        if (end - start) <= 3:\n            cur = end\n            while cur >= start:\n                if values[cur][1] <= time:\n                    return values[cur][0]\n                cur -= 1\n            return \\\"\\\"\n                \n        if values[index][1] == time:\n            return values[index][0]\n        elif values[index][1] < time:\n            start = index\n        else:\n            end = index\n        return self.search_time(values, time, start, end)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.store:\n            self.store[key].append((value, timestamp))\n        else:\n            self.store[key] = [(value, timestamp)]\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.store:\n            values = self.store[key]\n            return self.search_time(values, timestamp, 0, len(values)-1)\n        else:\n            return \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.mapping = collections.defaultdict(list)\n        \n    def set(self, key: str, value: str, timestamp: int) -> None:\n        lists = self.mapping[key]\n        if not lists:\n            self.mapping[key] = [(timestamp, value)]\n            return\n        start, end = 0, len(lists) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if lists[mid][0] == timestamp:\n                self.mapping[key][mid] = (timestamp, value)\n                return\n            elif lists[mid][0] < timestamp:\n                start = mid\n            else:\n                end = mid\n                \n        # if lists[end][0] == timestamp:\n        #     lists[end] = (timestamp, value)            \n        #     self.mapping[key] = lists\n        #     return\n        if lists[end][0] < timestamp:\n            lists.insert(end + 1, (timestamp, value))\n            self.mapping[key] = lists\n            return\n        if lists[start][0] == timestamp:\n            lists[start] = (timestamp, value)            \n            self.mapping[key] = lists\n            return\n        if lists[start][0] < timestamp:\n            lists.insert(start + 1, (timestamp, value))\n            self.mapping[key] = lists\n            return\n        \n        \n   \n\n    def get(self, key: str, timestamp: int) -> str:\n        lists = self.mapping[key]\n        if not lists:\n            return ''\n        start, end = 0, len(lists) - 1\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if lists[mid][0] == timestamp:\n                return lists[mid][1]\n            elif lists[mid][0] < timestamp:\n                start = mid\n            else:\n                end = mid\n                \n        if lists[end][0] <= timestamp:\n            return lists[end][1]\n        if lists[start][0] <= timestamp:\n            return lists[start][1]\n        return ''\n    \n\n\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \\\"\\\"\\\"\n        self.data = defaultdict(list)\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.data[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if not self.data[key]:\n            return \\\"\\\"\n        start = 0\n        end = len(self.data[key]) - 1\n        while start < end:\n            mid = start + (end-start) // 2\n            if self.data[key][mid][0] <= timestamp and self.data[key][mid+1][0] > timestamp:\n                return self.data[key][mid][1]\n            if self.data[key][mid][0] <= timestamp:\n                start = mid + 1\n            else:\n                end = mid - 1\n        \n        return self.data[key][-1][1] if self.data[key][-1][0] <= timestamp else \\\"\\\"\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)", "class TimeMap:\n\n    def __init__(self):\n        \\\"\\\"\\\"\n        Initialize your data structure here.\n        \n        10/02: my\n        use dict; \n        \n        need to bisect to get the timestamp.  binary search. \n        \n        like find first version f\n        \n        value is an object of [value, list of timestamp. ]\n        \n        because timesteamp are strictly increasing, so it is monolitically increasing.\n        \n        1 3 5 7 9  f(4)=3\n        \n        # BUG Forget self.d self!!!\n        \n        # BUG max_idx=max(l, max_idx)  max_idx cannot be None, > is not supported between instance of none type and int.\n        \\\"\\\"\\\"\n        self.d = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key in self.d:\n            self.d[key].append((timestamp, value))\n        else:\n            self.d[key] = [(timestamp, value)]\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        if key in self.d:\n            return self.helper(timestamp, self.d[key])\n        else:\n            return ''\n            \n    def helper(self, target, arr):\n        # target is the timestamp input\n        l,r = 0, len(arr)-1\n        max_idx=-1\n        while l<=r:\n            m = (l+r)//2\n            if target==arr[m][0]:\n                # there is only 1 timestamp matche due to strictly increasing.\n                return arr[m][1]\n            # this timestamp is too large, need to find left\n            elif arr[m][0]>target:\n                r=m-1\n            # BUG: mid is a valid one! not left!\n            # mid is a valid one! not left! but not sure whether it is the largest\n            else:\n                l=m+1\n                \n                max_idx=max(m, max_idx)\n        return '' if max_idx==-1 else arr[max_idx][1]  \n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)"]