["\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\nmii=lambda:list(map(int,input().split()))\n\nn,m=mii()\na=[0 for _ in range(n)]\nc=[123456 for _ in range(n)]\nfor _ in range(m):\n    u,v=mii()\n    u%=n\n    v%=n\n    if v<u: v+=n\n    a[u]+=1\n    if c[u]>v: c[u]=v\n\nans=[]\nfor i in list(range(1,n))+[0]:\n    out=0\n    for j in range(i,n):\n        if not a[j]: continue\n        tmp=(j-i)+(a[j]-1)*n+(c[j]-j)\n        out=max(out,tmp)\n        #print(1,i,j,tmp)\n    for j in range(i):\n        if not a[j]: continue\n        tmp=(j+n-i)+(a[j]-1)*n+(c[j]-j)\n        out=max(out,tmp)\n        #print(2,i,j,tmp)\n    ans.append(out)\nprint(\" \".join(map(str,ans)))\n", "from collections import defaultdict as dd, deque\n\nn,m = list(map(int,input().split()))\n\nS = dd(list)\n\nfor _ in range(m):\n    start,dest = list(map(int,input().split()))\n    S[start-1].append(dest-1)\n\nclosest = [0]*n\nfor i in range(n):\n    if S[i]:\n        closest[i] = min((j-i)%n for j in S[i])\n\nR = [0]*n\nfor start in range(n):\n    mx = 0\n    for di in range(n):\n        i = (start + di)%n\n        cost = di + (len(S[i])-1)*n + closest[i]\n        mx = max(mx, cost)\n    R[start] = mx\n\nprint(' '.join([str(x) for x in R]))\n\n\n\n", "n,m=map(int,input().split())\nstations=[]\nfor i in range(n):\n    stations.append([])\nfor i in range(m):\n    a,b=map(int,input().split())\n    stations[a-1].append((b-a)%n)\nmaxes=[]\nfor i in range(n):\n    if len(stations[i])>0:\n        big=min(stations[i])\n    else:\n        big=0\n    maxes.append(n*max(len(stations[i])-1,0)+big)\nout=[]\nnew=maxes[:]\nbig=0\nfor j in range(n):\n    if new[j]+j>big and new[j]>0:\n        big=new[j]+j\ncurr=big\nout.append(str(curr))\nfor i in range(n-1):\n    if maxes[i]>0:\n        curr=max(curr-1,maxes[i]+n-1)\n    else:\n        curr=curr-1\n    out.append(str(curr))\nprint(\" \".join(out))", "n, m = map(int, input().split())\n\na = [[] for i in range(5010)]\n\nfor i in range(m):\n\tx, y = map(int, input().split())\n\tif y < x:\n\t\ta[x].append(n - x + y)\n\telse:\n\t\ta[x].append(y - x)\n\n\nfor i in range(1, n + 1):\n\ta[i].sort()\n\nmx = int(-1e9)\n\nfor i in range(1, n + 1):\n\tif len(a[i]):\n\t\tmx = n * (len(a[i]) - 1) + a[i][0]\n\telse:\n\t\tmx = 0\n\t\n\tk = 1\n\tl = i + 1\n\tif l == n + 1:\n\t\tl = 1\n\t\n\twhile l != i:\n\t\tif len(a[l]):\n\t\t\tmx = max(mx, n * (len(a[l]) - 1) + a[l][0] + k)\n\t\t\t\n\t\tk += 1\n\t\tl += 1\n\t\tif l == n + 1:l = 1\n\tprint(mx, end = \" \")\n\nprint()\n", "# import numpy as np\n\ndef dist(a, b):\n    return (b - a) % n\n\nn, m = list(map(int, input().split(\" \")))\n\nsweets = {i: [] for i in range(n)}\nfor i in range(m):\n    s, t = list(map(int, input().split(\" \")))\n    sweets[s - 1].append(t - 1)\n\nt = {i: -1e6 for i in range(n)}\n\nfor i in range(n):\n    sweets[i] = sorted(sweets[i], key=lambda x: -dist(i, x))\n    if len(sweets[i]):\n        t[i] = (len(sweets[i]) - 1) * n + dist(i, sweets[i][-1])\n\n# t = np.array([t[i] for i in range(n)], dtype=int)\n# raise ValueError(\"\")\n# print(t)\nresult = []\n\nm_max, i_max = 0, 0\nfor i, v in t.items():\n    if v + i > m_max + i_max:\n        m_max, i_max = v, i\nresult.append(m_max + i_max)\n\nfor s in range(1, n):\n    old_max = t[i_max] + dist(s, i_max)\n    new_max = t[s - 1] + dist(s, s - 1)\n    if new_max > old_max:\n        result.append(new_max)\n        i_max = s - 1\n    else:\n        result.append(old_max)\n\nprint(\" \".join(map(str, result)))", "import sys\nfrom collections import defaultdict,deque\nn,m=list(map(int,sys.stdin.readline().split()))\ndist=defaultdict(list)\nsweet=defaultdict(list)\nfor i in range(m):\n    u,v=list(map(int,sys.stdin.readline().split()))\n    sweet[u].append(v)\n    dist[u].append(0)\nfor i in sweet:\n    le=len(sweet[i])\n    for j in range(le):\n        if sweet[i][j]>=i:\n            dist[i][j]=sweet[i][j]-i\n        else:\n            dist[i][j]=n-(i-sweet[i][j])\n    dist[i].sort()\n#print(dist,'dits')\nfor i in dist:\n    count=0\n    le=len(dist[i])\n    for k in range(le-1,-1,-1):\n        dist[i][k]+=count*n\n        count+=1\n    dist[i].sort()\nvis=defaultdict(int)\nfor i in dist:\n    if dist[i]==[]:\n        vis[i]=0\n    else:\n        vis[i]=dist[i][-1]\n#print(dist,'dist')\n#print(vis,'vis')\nans=[0 for _ in range(n)]\nfor i in range(1,n+1):\n    cur=0\n    #print(i,'i')\n    for k in range(1,n+1):\n        new=0\n        if k>=i:\n            if vis[k]!=0:\n                new=vis[k]+k-i\n                #print(new,'new',k,'k')\n        else:\n            if vis[k]!=0:\n                new=vis[k]+(n)-(i-k)\n                #print(new,'new',k,'k')\n        cur=max(cur,new)\n    ans[i-1]=cur\nprint(*ans)\n"]