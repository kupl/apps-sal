["import numpy as np\r\n\r\ndef solve(n,k,a,l,r):\r\n    shape = (n,n)\r\n    mat = np.zeros(shape, dtype=np.int64)\r\n    for i in range(n):\r\n        for j in range(l[i], r[i]):\r\n            mat[i][j]=1\r\n    \r\n    ans = np.eye(n,n, dtype=np.int64)\r\n    while(k>0):\r\n        if k%2 == 1:\r\n            ans = np.matmul(mat, ans)\r\n            ans%=2\r\n        mat = np.matmul(mat, mat)\r\n        mat%=2\r\n        k = k//2\r\n    result = []\r\n    for i in range(n):\r\n        aux = 0\r\n        for j in range(n):\r\n            if ans[i][j] == 1:\r\n                aux^=a[j]\r\n        result.append(aux)\r\n    return result\r\n        \r\n\r\n\r\n\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    s = input().split()\r\n    n = int(s[0])\r\n    k = int(s[1])\r\n    a = []\r\n    l = []\r\n    r = []\r\n    s = input().split()\r\n    for i in range(n):\r\n        a.append(int(s[i]))\r\n    for i in range(n):\r\n        s = input().split()\r\n        l.append(int(s[0])-1)\r\n        r.append(int(s[1]))\r\n    arr = solve(n,k-1,a,l,r)\r\n    s = \"\"\r\n    for e in arr:\r\n        s += str(e)\r\n        s +=\" \"\r\n    print(s)\r\n", "# cook your dish here\nimport sys\nimport math\nfrom collections import Counter\nfrom heapq import heapify, heappop, heappush\nimport numpy as np\n\n# sys.setrecursionlimit(10**6)\n# input = sys.stdin.buffer.readline\n\nMAX_INT = 2**62-1\nMOD = 10**9 + 7\n\n\ndef __starting_point():\n    T = int(input())\n    for _ in range(T):\n        n, k = map(int, input().split())\n        nums = np.array([int(s) for s in input().split()], dtype=np.int)\n        ranges = []\n        for _ in range(n):\n            l, r = map(int, input().split())\n            ranges.append((l-1, r-1))\n\n        mat = np.zeros((n, n), dtype='u1')\n\n        for i, (l, r) in enumerate(ranges):\n            mat[i, l:r+1] = 1\n\n        trans = np.eye(n, dtype='u1')\n        k -= 1\n        while k:\n            if k & 1:\n                trans = trans @ mat\n                trans &= 1\n            k >>= 1\n            mat = mat @ mat\n            mat &= 1\n            # print(k, trans)\n        # print(trans)\n\n        ans = np.zeros((n,), dtype=np.int)\n        for i in range(60)[::-1]:\n            c = (nums >> i) & 1\n            ans <<= 1\n            ans += (trans @ c & 1)\n        print(*ans, sep=' ')\n\n\n\n\n\n__starting_point()"]