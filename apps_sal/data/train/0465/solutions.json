["class Solution:\n     def minCut(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         # acceleration\n         if s == s[::-1]: return 0\n         if any(s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1] for i in range(1, len(s))): return 1\n         # algorithm\n         cut = [x for x in range(-1,len(s))]  # cut numbers in worst case (no palindrome)\n         for i in range(len(s)):\n             r1, r2 = 0, 0\n             # use i as origin, and gradually enlarge radius if a palindrome exists\n             # odd palindrome\n             while r1 <= i < len(s)-r1 and s[i-r1] == s[i+r1]:\n                 cut[i+r1+1], r1 = min(cut[i+r1+1], cut[i-r1]+1), r1 + 1\n             # even palindrome\n             while r2 <= i < len(s)-r2-1 and s[i-r2] == s[i+r2+1]:\n                 cut[i+r2+2], r2 = min(cut[i+r2+2], cut[i-r2]+1), r2 + 1\n         return cut[-1]", "class Solution:\n     def minCut(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == s[::-1]: return 0\n         \n         for i in range(1, len(s)):\n             if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                 return 1\n         \n         cut = [x for x in range(-1, len(s))]\n         for i in range(len(s)):\n             j=0\n             while i - j >= 0 and i + j < len(s) and s[i - j] == s[i + j]:\n                 if cut[i + j + 1]>cut[i - j] + 1:\n                     cut[i + j + 1]=cut[i - j] + 1\n                 j += 1\n             j=0\n             while i - j >= 0 and i + j + 1 < len(s) and s[i - j] == s[i + j + 1]:\n                 if cut[i + j + 2]>cut[i - j] + 1:\n                     cut[i + j + 2] = cut[i - j] + 1\n                 j += 1\n         return cut[-1]", "class Solution:\n     def minCut(self, s):\n         if not s: return 0\n \n         # Accelerate\n         if s == s[::-1]: return 0                \n         length = len(s)\n         for i in range(1, length):\n             if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                 return 1\n \n         # Algorithm\n         cut = [i for i in range(-1, length)]\n         for i in range(length):\n             r1, r2 = 0, 0\n             while i - r1 >= 0 and i + r1 < len(s) and s[i - r1] == s[i + r1]:\n                 cut[i + r1 + 1] = min(cut[i + r1 + 1], cut[i - r1] + 1)\n                 r1 += 1\n             while i - r2 >= 0 and i + r2 + 1 < len(s) and s[i - r2] == s[i + r2 + 1]:\n                 cut[i + r2 + 2] = min(cut[i + r2 + 2], cut[i - r2] + 1)\n                 r2 += 1\n         return cut[-1]\n         \n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n", "class Solution:\n     def minCut(self, s):\n         if not s: return 0\n         if s == s[::-1]: return 0\n                 \n         length = len(s)\n         for i in range(1, length):\n             if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                 return 1\n         \n         cut = [i for i in range(-1, length)]\n         for i in range(length):\n             r1, r2 = 0, 0\n             while i - r1 >= 0 and i + r1 < len(s) and s[i - r1] == s[i + r1]:\n                 cut[i + r1 + 1] = min(cut[i + r1 + 1], cut[i - r1] + 1)\n                 r1 += 1\n             while i - r2 >= 0 and i + r2 + 1 < len(s) and s[i - r2] == s[i + r2 + 1]:\n                 cut[i + r2 + 2] = min(cut[i + r2 + 2], cut[i - r2] + 1)\n                 r2 += 1\n         return cut[-1]\n         \n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n", "class Solution:\n     def minCut(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == s[::-1]:\n             return 0\n         for i in range(1, len(s)):\n             if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                 return 1\n         \n         cut = [x for x in range(-1, len(s))]\n         for i in range(len(s)):\n             j=0\n             while i - j >= 0 and i + j < len(s) and s[i - j] == s[i + j]:\n                 if cut[i + j + 1]>cut[i - j] + 1:\n                     cut[i + j + 1]=cut[i - j] + 1\n                 j += 1\n             j=0\n             while i - j >= 0 and i + j + 1 < len(s) and s[i - j] == s[i + j + 1]:\n                 if cut[i + j + 2]>cut[i - j] + 1:\n                     cut[i + j + 2] = cut[i - j] + 1\n                 j += 1\n         return cut[-1]", "class Solution:\n     def minCut(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == s[::-1]: return 0\n         for i in range(1, len(s)):\n             if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                 return 1\n             \n             \n         n = len(s)\n         is_pal = [[0] * n for _ in range(n)]\n         dp = [n - 1] * n\n         \n         for i in range(n -1, -1, -1):\n             dp[i] = n - i - 1\n             for j in range(i, n):\n                 if s[i] == s[j] and (j - i < 2 or is_pal[i + 1][j - 1]):\n                     is_pal[i][j] = 1\n                     if j == n - 1:\n                         dp[i] = 0\n                     elif dp[j + 1] + 1 < dp[i]:\n                         dp[i] = dp[j + 1] + 1\n                         \n         return dp[0]\n", "class Solution:\n     def minCut(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == s[::-1]:\n             return 0\n         for i in range(1, len(s)):\n             if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                 return 1\n         \n         cut = [x for x in range(-1, len(s))]\n         for i in range(len(s)):\n             j=0\n             while i - j >= 0 and i + j < len(s) and s[i - j] == s[i + j]:\n                 cut[i + j + 1] = min(cut[i + j + 1], cut[i - j] + 1)\n                 j += 1\n             j=0\n             while i - j >= 0 and i + j + 1 < len(s) and s[i - j] == s[i + j + 1]:\n                 cut[i + j + 2] = min(cut[i + j + 2], cut[i - j] + 1)\n                 j += 1\n         return cut[-1]", "class Solution:\n     def minCut(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if s == s[::-1]: return 0\n         \n         for i in range(1, len(s)):\n             if s[:i] == s[:i][::-1] and s[i:] == s[i:][::-1]:\n                 return 1\n         \n         cut = [x for x in range(-1, len(s))]\n         for i in range(len(s)):\n             j=0\n             while i - j >= 0 and i + j < len(s) and s[i - j] == s[i + j]:\n                 if cut[i + j + 1]>cut[i - j] + 1:\n                     cut[i + j + 1]=cut[i - j] + 1\n                 j += 1\n             j=0\n             while i - j >= 0 and i + j + 1 < len(s) and s[i - j] == s[i + j + 1]:\n                 if cut[i + j + 2]>cut[i - j] + 1:\n                     cut[i + j + 2] = cut[i - j] + 1\n                 j += 1\n         return cut[-1]"]