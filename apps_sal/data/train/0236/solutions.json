["class Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        onesSoFar = 0\n        partial = 0\n        \n        for n in S:\n            if n == '0':\n                partial = min(onesSoFar, partial+1)      \n            else:\n                onesSoFar += 1\n        \n        return partial\n", "class Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        \n        if not S:\n            return 0\n        \n        n = len(S)\n        if n == 1:\n            return 0\n        \n        total_1s = 0\n        total_0s = 0\n        for char in S:\n            if char == '1':\n                total_1s += 1\n            else:\n                total_0s += 1\n        \n        if total_1s == 0 or total_0s == 0:\n            return 0\n        \n        prefix_sum = 0\n        ans = float('inf')\n        for i in range(n):\n            prefix_sum += 1 if S[i] == '1' else 0\n            ans = min(ans, prefix_sum + ((n - i - 1) - (total_1s - prefix_sum)))\n        return min(ans, total_0s, total_1s)", "class Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        at0 = 0\n        at1 = 0\n        \n        num0 = 0\n        for a in S:\n            if a=='0':\n                at1 = min(at1,at0) + 1\n            else:\n                at1 = min(at1,at0)\n                at0 += 1\n                \n            #print(at0,at1)\n        return min(at1,at0)", "class Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        str_len = len(S)\n        count_arr = [[0,0] for x in range(str_len)]\n        one_start_idx = -1\n        for i in range(len(S)):\n            if S[i]=='0':\n                if i==0:\n                    count_arr[i][0] +=1\n                    count_arr[i][1] = 0\n                else:\n                    count_arr[i][0] = count_arr[i-1][0]+1\n                    count_arr[i][1] = count_arr[i-1][1]\n            else:\n                if i==0:\n                    count_arr[i][1] +=1\n                else:\n                    count_arr[i][1] = count_arr[i-1][1]+1\n                    count_arr[i][0] = count_arr[i-1][0]\n                \n                if one_start_idx == -1:\n                    one_start_idx = i\n       \n        total_flips = []\n        total_flips.append(min(count_arr[str_len-1][0], count_arr[str_len-1][1]))\n        \n        for i in range(one_start_idx, str_len):\n            if i==0:\n                total_flips.append(count_arr[str_len-1][0]-count_arr[i][0])\n            elif i==str_len-1:                    \n                total_flips.append(count_arr[str_len-1][0])\n                        \n            else:\n                total_flips.append(count_arr[i-1][1]+count_arr[str_len-1][0]-count_arr[i][0])\n                \n                \n                \n                           \n                           \n   \n                \n            \n            \n        return min(total_flips)    \n            \n                      \n", "class Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        dp = 0\n        ones = 0\n\n        for c in S:\n            if c == '0':\n                # \u7d50\u5c3e\u70ba 1 \u7684\u7ffb\u6cd5\u7684\u6700\u5c0f\u6b65\u9a5f\u6578 = 1 + dp[i-1]\n                # \u7d50\u5c3e\u70ba 0 \u7684\u7ffb\u6cd5\u7684\u6700\u5c0f\u6b65\u9a5f\u6578 = \u524d\u9762 1 \u7684\u500b\u6578\n                # \u6240\u4ee5 dp[i] = min(1 + dp[i-1], # of 1s)\n                dp = min(1 + dp, ones)\n            else:\n                # \u7d50\u5c3e\u70ba 1 \u7684\u7ffb\u6cd5\u7684\u6700\u5c0f\u6b65\u9a5f\u6578 = dp[i-1]\n                # \u7d50\u5c3e\u70ba 0 \u7684\u7ffb\u6cd5\u7684\u6700\u5c0f\u6b65\u9a5f\u6578 = 1 + \u524d\u9762 1 \u7684\u500b\u6578\n                # \u6240\u4ee5 dp[i] = min(dp[i-1], 1 + # of 1s)\n                dp = min(dp, 1 + ones)\n                ones += 1\n\n        return dp\n", "class Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        # n = len(S)\n        # zero = [0 for i in range(n)]\n        # one = [0 for i in range(n)]\n        # zero[0] = int(S[0])\n        # one[0] = 1 - zero[0]\n        # for i in range(1, n):\n        #     if S[i] == '1':\n        #         one[i] = min(one[i-1], zero[i-1])\n        #         zero[i] = zero[i-1] + 1\n        #     elif S[i] == '0':\n        #         one[i] = min(one[i-1], zero[i-1]) + 1\n        #         zero[i] = zero[i-1]\n        # return min(zero[n-1], one[n-1])\n        \n        flip, one = 0, 0\n        for i in S:\n            if i == '1':\n                one += 1\n            else:\n                flip += 1\n            flip = min(one, flip)\n        return flip", "class Solution:\n    def minFlipsMonoIncr(self, S: str) -> int:\n        \n        n, prefix, total, res = len(S), 0, S.count('1'), sys.maxsize\n        for i in range(n + 1):\n            res = min(res, prefix + len(S) - i - total + prefix)\n            if i < n: prefix += 1 if S[i] == '1' else 0\n        return res\n"]