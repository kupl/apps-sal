["from math import factorial\n\nfor _ in range(int(input())):\n N,M=[int(a) for a in input().split()]\n print(float(N+M-1))", "for _ in range(int(input())):\n n ,m = map(int,input().split())\n if n==1 or m==1:\n  print(max(n,m))\n else:\n  print(n+m-1)", "for i in range(int(input())):\n a,b = list(map(int, input().split()))\n print(a+b-1)\n   \n", "# cook your dish here\nfor _ in range(int(input())):\n n,m=list(map(int,input().split()))\n print(m+n-1)\n", "# cook your dish here\nfor _ in range(int(input())):\n N,M=map(int,input().split())\n print(\"{:.6f}\".format(N+M-1))", "for _ in range(int(input())):\n N,M=map(int,input().split())\n print(\"{:.6f}\".format(N+M-1))", "for t in range(int(input())):\n n,m=map(int,input().split())\n print(m+n-1)", "try:\n t = int(input())\n for _ in range(t):\n  N, M = map(int, input().rstrip().split())\n  print(N + M - 1)\nexcept:\n pass", "# cook your dish here\ntry:\n t = int(input())\n for _ in range(t):\n  N, M = map(int, input().rstrip().split())\n  print(N + M - 1)\nexcept:\n pass", "for _ in range(int(input())):\n n,m=map(int,input().split())\n t_1=n+m-1\n print('%.6f'%t_1)", "# cook your dish here\nt=int(input())\nwhile t:\n n,m=map(int,input().split())\n print(n+m-1)\n t-=1", "t=int(input())\nfor _ in range(t):\n n,m=list(map(int,input().strip().split()))\n print(n+m-1)\n", "# cook your dish here\ntry:\n def fun(t):\n  for i in range(t):\n   n,m=map(int,input().split())\n   j=n+m-1\n   print(\"{:.6f}\".format(j))\n fun(int(input()))\nexcept:\n pass", "test=int(input())\nfor _ in range(test):\n n,m=map(float,input().split())\n print(n+m-1)", "# cook your dish here\nfor _ in range(int(input())):\n n,m=map(float,input().split())\n print(n+m-1)", "# cook your dish here\n\"\"\"\nAt first when you look at the problem you nitice that it may be a depth search \u00a0\u00a0\u00a0\u00a0problem\nso you made a column and row number form yourself and readlised that all \u00a0\u00a0\u00a0\u00a0diagonals\nadd to one.\n\nso the total number of diagonals will be a+b-1\n\nfor 3*4 matrix\n\n1         0.5       0.25              0.125\n0.5       0.5       0.375             0.375/2 + 0.125\n0.25      0.5       0.375/2+0.5       1\n\nuse depth search approach to get the individual probability \n\"\"\"\n\ntestcase = int (eval(input()))\nfor z in range(testcase):\n a,b = [int(d) for d in input().split()]\n print(a+b-1)\n", "# cook your dish here\nfor _ in range(int(input())):\n n,m=map(float,input().split())\n print(n+m-1)", "# cook your dish here\nn=int(input())\nfor i in range(n):\n s=input().split(\" \")\n s[0]=int(s[0])\n s[1]=int(s[1])\n print(s[0]+s[1]-1)", "# cook your dish here\nfor _ in range(int(input())) :\n m,n = map(int , input().split(\" \"))\n print(m+n-1)", "T = int(input())\nfor i in range(T):\n n, m = list(map(int, input().split()))\n print(n + m - 1)", "for _ in range(int(input())):\n n,m=map(int,input().split())\n print(n+m-1)", "def __starting_point():\n TC = int(input())\n for _ in range(TC):\n  ROWS, COLS = list(map(int, input().strip().split()))\n  print(f\"{ROWS + COLS - 1}.000000\")\n__starting_point()", "# cook your dish here\nnum_cases = int(input())\nfor nidx in range(num_cases):\n z=input().split()\n n=int(z[0])\n m=int(z[1])\n print(n+m-1)", "import sys\nimport math\nimport bisect\n\ndef main():\n for _ in range(int(input())):\n  n, m = list(map(int, input().split()))\n  val = (n + m - 1) * 1.0\n  print('%.6f' % val)\n\ndef __starting_point():\n main()\n\n__starting_point()"]