["import sys\nfrom collections import deque\n\ninput=sys.stdin.readline\n\nN=int(input())\nedge=[[] for i in range(N)]\nfor i in range(N-1):\n    x,y=list(map(int,input().split()))\n    edge[x-1].append(y-1)\n    edge[y-1].append(x-1)\n\nc=input()[:N]\n\ndeg=[len(edge[i]) for i in range(N)]\nleaf=set([])\nfor i in range(N):\n    if deg[i]==1 and c[i]==\"B\":\n        leaf.add(i)\n\nban=set([])\nwhile leaf:\n    v=leaf.pop()\n    ban.add(v)\n    deg[v]=0\n    for nv in edge[v]:\n        deg[nv]-=1\n        if deg[nv]==1 and c[nv]==\"B\":\n            leaf.add(nv)\n\nfor i in range(N):\n    edge[i]=[nv for nv in edge[i] if nv not in ban]\n\nroot=-1\nfor i in range(N):\n    if i not in ban:\n        root=i\n\nparent=[-2]*N\ndeq=deque([(root,-1)])\nnode=[]\nwhile deq:\n    v,pv=deq.popleft()\n    parent[v]=pv\n    node.append(v)\n    for nv in edge[v]:\n        if nv!=pv:\n            deq.append((nv,v))\n\nnode=node[::-1]\n\nfor i in range(N):\n    edge[i]=[nv for nv in edge[i] if nv!=parent[i]]\n\ncheck=True\nfor i in range(N):\n    check&=(deg[i]<=0)\nif check:\n    print((int(c[root]==\"W\")))\n    return\n\ncond=[0]*N\nfor v in range(N):\n    if (deg[v]%2==1 and c[v]==\"B\") or (deg[v]%2==0 and c[v]==\"W\"):\n        cond[v]+=1\n    else:\n        cond[v]-=1\n\nlower=[0]*N\nfor v in node:\n    res=0\n    for nv in edge[v]:\n        res=max(res,lower[nv])\n    res+=1+cond[v]\n    lower[v]=res\n\nupper=[0]*N\nnode=node[::-1]\nfor v in node:\n    n=len(edge[v])\n    if n>1:\n        left=[0]*n\n        right=[0]*n\n        for i in range(n-1):\n            nv=edge[v][i]\n            left[i]=max(left[i-1],lower[nv]+2+cond[v])\n        nv=edge[v][-1]\n        upper[nv]=left[n-2]+cond[nv]\n        right[n-1]=lower[nv]+2+cond[v]\n        for i in range(n-2,0,-1):\n            nv=edge[v][i]\n            upper[nv]=max(left[i-1],right[i+1])+cond[nv]\n            right[i]=max(right[i+1],lower[nv]+2+cond[v])\n        if edge[v][0]!=pv:\n            nv=edge[v][0]\n            upper[nv]=right[1]+cond[nv]\n    if v!=root:\n        for nv in edge[v]:\n            upper[nv]=max(upper[nv],upper[v]+1+cond[nv])\n\nbase=sum(deg[i] for i in range(N))+sum(cond[i]==1 for i in range(N))\n#print(deg)\n#print(base)\n#print(lower)\n#print(upper)\n#print(base)\nprint((base-max(max(upper),max(lower))))\n", "\n\"\"\"\n\nhttps://atcoder.jp/contests/arc097/tasks/arc097_d\n\n\u59cb\u70b9\u3068\u7d42\u70b9\u95a2\u4fc2\u3042\u308b\uff1f\n\u2192\u9006\u306b\u3057\u3066\u3082\u554f\u984c\u306f\u306a\u3044\n\n\u9ed2\u3044\u8449\u306f\u5b8c\u5168\u306b\u7121\u8996\u3067\u304d\u308b(\u843d\u3068\u305b\u308b)\n\u3088\u3063\u3066\u3001\u8449\u306f\u3059\u3079\u3066\u767d\n\u8449\u4ee5\u5916\u306f\u767d\u9ed2\u3069\u3063\u3061\u3082\u3042\u308a\u5f97\u308b\n\n\u3059\u3079\u3066\u306e\u8449\u3092\u3081\u3050\u308b\u6700\u77ed\u7d4c\u8def\uff1f\n\u3042\u308b\u8449\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u306e\u306f\u81ea\u660e\u3063\u307d\u3044\uff1f\n\u3042\u308b\u767d\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u306e\u306f\u305d\u3046\n\n\u2192\u81ea\u5206\u3092\u5857\u3063\u3066\u304b\u3089dfs\u3059\u308b\n\u2192\u5168\u65b9\u4f4d\u6728dp?\n\n\u884c\u304d\u306e\u307f\u3067\u5e30\u3089\u306a\u3044\u5834\u6240\u304c1\u3064\u5b58\u5728\u3059\u308b\u306f\u305a\n\u2192\u59cb\u70b9\u3068\u7d42\u70b9\u306e\u30d1\u30b9\u3068\u305d\u3053\u304b\u3089\u751f\u3048\u308b\u6728\u3063\u3066\u611f\u3058\u306e\u30a4\u30e1\u30fc\u30b8\n\n\u8db3\u8e0f\u307f(\u505c\u6b62)\u306e\u56de\u6570\u3092\u6975\u529b\u5c11\u306a\u304f\u3057\u305f\u3044\n\u2192\u59cb\u70b9\u3067\u3082\u7d42\u70b9\u3067\u3082\u306a\u3044\u5834\u5408\u3001 e\u672c\u306e\u8fba\u304c\u3064\u306a\u304c\u3063\u3066\u305f\u3089e\u56de\u8a2a\u554f\u306f\u78ba\u5b9a\n\u3000e^color\u304c\u9ed2\u3067\u306a\u3044\u5834\u5408\u306f+1\n\u2192\u3064\u307e\u308a\u3001\u5404\u9802\u70b9\u3067\u6d88\u8cbb\u3059\u308b\u56de\u6570\u306f\u59cb\u70b9\u30fb\u7d42\u70b9\u3067\u306a\u3044\u9650\u308a\u5e38\u306b\u4e00\u5b9a\uff1f\n\n\u7d42\u70b9\u306f\u307e\u305a\u8449\u2192\u59cb\u70b9\u3082\u8449\u3067\u304a\uff4b\n\u59cb\u70b9\u306f\u8db3\u8e0f\u307f\u306a\u306e\u30671\u79d2\u3064\u304b\u3046\u3000\u7d42\u70b9\u30821\u79d2\u4f7f\u3046\n\u30d1\u30b9\u4e0a\u306e\u70b9\u306f\u3001e-1\u56de\u8a2a\u554f(\u3053\u3053\u304c\u6839\u672c\u7684\u306b\u9055\u3046\uff01)\n\n\u3064\u307e\u308a\u3001\u3042\u308b\u30d1\u30b9\u304c\u3042\u3063\u3066\u3000\u305d\u306e\u9577\u3055\u304cL(\u4e21\u7aef\u9664\u304f)\u306e\u6642\u3001\u6700\u5927\u3067L\u6e1b\u308b\n\u305f\u3060\u3057\u3001\u30d1\u30b9\u4e0a\u306b\u3042\u3063\u3066\u3082\u56de\u6570\u304c\u6e1b\u3089\u306a\u3044\u70b9\u3082\u3042\u308b\n\nB=0 W=1\u3068\u3059\u308b\u304b\n(color^E) == 1 \u306e\u70b9\u306f\u3001E-1\u56de\u8a2a\u554f\u306b\u306a\u308b\u3068\u8db3\u8e0f\u307f\u304c\u3044\u3089\u306a\u3044\u304b\u30892\u6e1b\u308b\n\u3064\u307e\u308a\u3001\u305d\u306e\u3088\u3046\u306a\u70b9\u304c\u6700\u5927\u6570\u3042\u308b\u30d1\u30b9\u3092\u6c42\u3081\u308c\u3070\u3044\u3044\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(200000)\nfrom collections import deque\n\nMM = 0\n\ndef dfs(v,p):\n    nonlocal MM\n\n    if v != p and linknum[v] == 1:\n        return 0\n\n    cl = []\n    for nex in lis[v]:\n        if nex != p and exist[nex]:\n            tmp = dfs(nex,v)\n            cl.append(tmp)\n    cl.sort()\n    cl.reverse()\n\n    if len(cl) == 1:\n        MM = max(MM , cl[0])\n    else:\n        if (linknum[v]+c[v])%2 == 1:\n            MM = max(MM , cl[0] + cl[1] + 2)\n        else:\n            MM = max(MM , cl[0] + cl[1])\n\n    \n    if (linknum[v]+c[v]) % 2 == 1:\n        return cl[0]+ 2\n    else:\n        return cl[0]\n\nN = int(input())\n\nlis =  [ [] for i in range(N) ]\nlinknum = [0] * N\nfor i in range(N-1):\n    u,v = list(map(int,input().split()))\n    u -= 1\n    v -= 1\n\n    lis[u].append(v)\n    lis[v].append(u)\n    linknum[u] += 1\n    linknum[v] += 1\n\nctmp = input()\nc = []\n\nfor i in ctmp:\n    if i == \"B\":\n        c.append(0)\n    else:\n        c.append(1)\n\nexist = [True] * N\n\nq = deque([])\nfor i in range(N):\n    if linknum[i] <= 1 and c[i] == 0:\n        q.append(i)\n\nwhile len(q) > 0:\n    now = q.popleft()\n    exist[now] = False\n    linknum[now] = 0\n    \n    for nex in lis[now]:\n        linknum[nex] -= 1\n\n        if linknum[nex] == 1 and c[nex] == 0:\n            q.append(nex)\n\n#print (exist)\nstart = None\nfor i in range(N):\n    if exist[i]:\n        start = i\n        break\nelse:\n    print((0))\n    return\n\nif linknum[start] == 0:\n    print((1))\n    return\n\nans = 0\n#print (linknum)\nfor i in range(N):\n    if exist[i]:\n\n        if (linknum[i] + c[i]) % 2 == 0:\n            ans += linknum[i]\n        else:\n            ans += linknum[i] + 1\n\nMM = 0\npick = dfs(start,start)\nprint((ans - MM))\n", "from collections import deque\n\n\ndef first_cut(links, colors):\n    tmp_links = links.copy()\n    for v, neighbors in list(tmp_links.items()):\n        while len(neighbors) == 1 and colors[v]:\n            del links[v]\n            par = neighbors.pop()\n            links[par].remove(v)\n            v = par\n            neighbors = links[par]\n    return links\n\n\ndef diameter(links, flags):\n    def dfs(s):\n        fs = flags[s]\n        d, v = 0, 0\n        q = deque(sorted((fs + flags[v], v, s) for v in links[s]))\n        while q:\n            d, v, a = q.popleft()\n            for u in links[v]:\n                if u == a:\n                    continue\n                fu = flags[u]\n                if fu:\n                    q.append((d + 1, u, v))\n                else:\n                    q.appendleft((d, u, v))\n        return d, v\n\n    s = next(iter(links))\n    _, t = dfs(s)\n    d, _ = dfs(t)\n    return d\n\n\ndef solve(links, colors):\n    if all(colors):\n        return 0\n\n    links = first_cut(links, colors)\n    k = len(links)\n\n    if k == 1:\n        return 1\n\n    flags = {v: colors[v] ^ (len(link) % 2 == 0) for v, link in list(links.items())}\n    euler_tour = 2 * (k - 1) + sum(flags.values())\n    return euler_tour - 2 * diameter(links, flags)\n\n\nn = int(input())\nlinks = {i: set() for i in range(n)}\nfor _ in range(n - 1):\n    x, y = list(map(int, input().split()))\n    x -= 1\n    y -= 1\n    links[x].add(y)\n    links[y].add(x)\ncolors = [c == 'B' for c in input()]\n\nprint((solve(links, colors)))\n"]