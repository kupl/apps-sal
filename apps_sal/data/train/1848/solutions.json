["import random\n class RandomizedCollection:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.val = []\n         self.idx = {}\n \n     def insert(self, val):\n         \"\"\"\n         Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n         :type val: int\n         :rtype: bool\n         \"\"\"\n         self.val.append(val)\n         if val in self.idx:\n             self.idx[val].append(len(self.val) - 1)\n             return False\n         else:\n             self.idx[val] = [len(self.val) - 1]\n \n     def remove(self, val):\n         \"\"\"\n         Removes a value from the collection. Returns true if the collection contained the specified element.\n         :type val: int\n         :rtype: bool\n         \"\"\"\n         if val not in self.idx:\n             return False\n         #print(self.val, self.idx)\n         self.val[self.idx[val][-1]] = self.val[-1]\n         if self.idx[self.val[-1]][-1] != self.idx[val][-1]:\n             self.idx[self.val[-1]].pop()\n             self.idx[self.val[-1]].append(self.idx[val][-1])\n             self.idx[self.val[-1]].sort()\n         self.val.pop()\n         self.idx[val].pop()\n         if len(self.idx[val]) == 0:\n             del self.idx[val]\n         return True\n \n     def getRandom(self):\n         \"\"\"\n         Get a random element from the collection.\n         :rtype: int\n         \"\"\"\n         return random.choice(self.val)\n \n \n # Your RandomizedCollection object will be instantiated and called as such:\n # obj = RandomizedCollection()\n # param_1 = obj.insert(val)\n # param_2 = obj.remove(val)\n # param_3 = obj.getRandom()", "import random\n class RandomizedCollection(object):\n     def __init__(self):\n         self.l = []\n         self.d = collections.defaultdict(set)\n \n     def insert(self, val):\n         b = val not in self.d\n         self.d[val].add(len(self.l))\n         self.l.append(val)\n         return b\n \n     def remove(self, val):\n         if val not in self.d:\n             return False\n         i, newVal = self.d[val].pop(), self.l[-1]\n         if len(self.d[val]) == 0:\n             del self.d[val]\n         self.l[i] = newVal\n         if newVal in self.d:\n             self.d[newVal].add(i)\n             self.d[newVal].discard(len(self.l)-1)\n         self.l.pop()\n         return True\n \n     def getRandom(self):\n         return random.choice(self.l)"]