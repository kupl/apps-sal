["t = int(input())\n\nfor ti in range(t):\n\tn = int(input())\n\n\tlri = [None for _ in range(n)]\n\n\tfor _ in range(n):\n\t\tli, ri = list(map(int, input().split()))\n\t\tlri[_] = (li, ri, _)\n\n\tlri.sort()\n\n\tt = [None for _ in range(n)]\n\n\tct, t[lri[0][2]], eg = 1, 1, lri[0][1]\n\n\tfor i in range(1, n):\n\t\tif lri[i][0] <= eg:\n\t\t\tt[lri[i][2]] = ct\n\t\t\teg = max(eg, lri[i][1])\n\t\telse:\n\t\t\tct = 3 - ct\n\t\t\tt[lri[i][2]] = ct\n\t\t\teg = lri[i][1]\n\n\tif all(ti == 1 for ti in t):\n\t\tprint(-1)\n\telse:\n\t\tprint(*t)\n", "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nfor _ in range(ii()):\n    n = ii()\n    a = [(li() + [i]) for i in range(n)]\n    a.sort()\n    ans = [2] * n\n    pr = a[0][0]\n    for l, r, i in a:\n        if l > pr:\n            break\n        ans[i] = 1\n        pr = max(pr, r)\n    if 2 in ans:\n        print(*ans)\n    else:\n        print(-1)\n", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    sobs = []\n    for j in range(n):\n        a, b = list(map(int, input().split()))\n        sobs.append([[a, -1], j])\n        sobs.append([[b, 1], j])\n    sobs.sort()\n    counts = 0\n    passed = []\n    success = []\n    alls = [0 for q in range(n)]\n    succeed = False\n    for sob in sobs:\n        if succeed:\n            if sob[0][1] == -1:\n                pass\n            else: \n                success.append(sob[1])\n            continue\n        if sob[0][1] == -1:\n            counts += 1\n        else:\n            counts -= 1\n            passed.append(sob[1])\n            if counts == 0:\n                succeed = True\n    if succeed and success:\n        for a in passed:\n            alls[a] = 1\n        for b in success:\n            alls[b] = 2\n        print(*alls)\n    else:\n        print(-1)\n", "T=int(input())\nfor i in range(0,T):\n    n=int(input())\n    L=[]\n    dp=[0]*n\n    for j in range(0,n):\n        l,r=map(int,input().split())\n        L.append((l,r,j))\n    L=sorted(L)\n    temp=-1\n    ed=L[0][1]\n    for j in range(1,len(L)):\n        if(L[j][0]>ed):\n            temp=j\n            break\n        ed=max(ed,L[j][1])\n    if(temp==-1 or n==1):\n        print(-1)\n    else:\n        for j in range(0,len(L)):\n            if(j<temp):\n                dp[L[j][2]]=1\n            else:\n                dp[L[j][2]]=2\n        for j in range(0,n):\n            print(dp[j],end=\" \")\n        print(\" \")\n        \n        \n", "for _ in range(int(input())):\n\tn=int(input())\n\ta=[]\n\tf=0\n\tfor i in range(n):\n\t\tl,r=map(int,input().split())\n\t\ta.append([l,r,i])\n\ta.sort(key=lambda x:x[0])\n\trm=a[0][1]\n\tfor i in range(n):\n\t\tif a[i][0]>rm:\n\t\t\tb=a[i]\n\t\t\tf=1\n\t\t\tbreak\n\t\tif a[i][1]>rm:\n\t\t\trm=a[i][1]\n\tif f==0:\n\t\tprint(-1)\n\telse:\n\t\ta.sort(key=lambda x:x[2])\n\t\tfor i in range(n):\n\t\t\tif a[i][0]<b[0]:\n\t\t\t\tprint(1,end=\" \")\n\t\t\telse:\n\t\t\t\tprint(2,end=\" \")\n\tprint()\n", "T = int(input())\n\nfor i in range(T):\n    n = int(input())\n    X = []\n    for j in range(n):\n        l, r = list(map(int, input().split()))\n        X.append([j, l, r])\n\n    X = sorted(X, key = lambda x: x[1])\n    # print(X)\n    \n    Y = [\"2\"] * n\n    s = -1\n    rmax = X[0][2]\n    Y[X[0][0]] = \"1\"\n    for i in range(1, n):\n        if X[i][1] > rmax:\n            s = i\n            break\n        rmax = max(rmax, X[i][2])\n        Y[X[i][0]] = \"1\"\n        \n    if s < 0:\n        print(-1)\n    else:\n        print(\" \".join(Y))\n", "\nfor c in range(int(input())):\n    N = int(input())\n    counter = 0\n    segments = []\n    for n in range(N):\n        l, r = map(int, input().split())\n        segments.append([[l, r], counter])\n        counter += 1\n    \n    segments.sort()\n    ans = [-1] * N\n    \n    rightBound = segments[0][0][1]\n    valid = -1\n    for i in range(1, len(segments)):\n        if segments[i][0][0] > rightBound:\n            valid = i\n            break\n        else:\n            rightBound = max(rightBound, segments[i][0][1])\n    \n    if valid == -1:\n        print(-1)\n    else:\n        for i in range(valid):\n            ans[segments[i][1]] = 1\n        for i in range(valid, len(segments)):\n            ans[segments[i][1]] = 2\n    \n        for a in ans:\n            print(a, end= ' ') \n    print()\n'''\n3\n2\n5 5\n2 3\n3\n3 5\n2 3\n2 3\n3\n3 3\n4 4\n5 5\n'''    ", "MOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\n\nt, = I()\nwhile t:\n    t -= 1\n    n, = I()\n    a = [2]*(n)\n    l = []\n    for i in range(n):\n        l.append(I()+[i])\n    l.sort()\n    mn = l[0][0]\n    mx = l[0][1]\n    i = 0\n    while i < n and l[i][0] <= mx:\n        mx = max(mx, l[i][1])\n        a[l[i][2]] = 1\n        i += 1\n    if all([i == 1 for i in a]) or all([i == 2 for i in a]):\n        print(-1)\n    else:\n        print(*a)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    l = []\n\n    for i in range( n ):\n        a,b = map(int,input().split())\n        l.append([i,a,b])\n\n    l = sorted(l, key=lambda x: x[1])\n    last = l[0][1]\n    i = 0\n    while i < n:\n        if l[ i ][ 1 ] > last:\n            break\n        last = max( last, l[ i ][ 2 ] )\n        i += 1\n\n    if i == n:\n        print( -1 )\n    else:\n        ind = [2] * n\n        for j in range( i ):\n            ind[ l[ j ][ 0 ] ] = 1\n        for i in ind:\n            print( i,end=' ')\n        print(\"\")\n", "t = int(input())\nfinal = []\nfor k in range(t):\n    n = int(input())\n    skl = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        skl.append((a, -1, i))\n        skl.append((b, 1, i))\n    skl.sort()\n    m = 0\n    ans = ['0']*n\n    for i, p in enumerate(skl):\n        if m == 0 and i != 0:\n            for j in range(i, 2*n):\n                ans[skl[j][2]] = '2'\n            break\n\n        m -= p[1]\n        if p[1] == -1:\n            ans[skl[i][2]] = '1'\n    if not '2' in ans:\n        final.append('-1')\n    else:\n        final.append(' '.join(ans))\nprint('\\n'.join(final))", "def check(data):\n    n = len(data)\n    s = sorted(zip(data, range(n)))\n    m = s[0][0][1]\n    left = set()\n    for i, r in enumerate(s):\n        left.add(r[1])\n        if i == len(s)-1:\n            return '-1'\n        m = max(m, r[0][1])\n        if s[i+1][0][0] > m:\n            break\n    res = ['1' if j in left else '2' for j in range(n)]\n    return ' '.join(res)\n\n\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    data = []\n    for j in range(n):\n        l, r = map(int, input().split())\n        data.append((l, r))\n    print(check(data))", "T = int(input())\n\nfor _ in range(T):\n    n = int(input())\n    seg = []\n    for s in range(n):\n        l,r = [int(x) for x in input().split()]\n        seg.append((l,r))\n    pos = {}\n    for i in range(n):\n        if seg[i] in pos:\n            pos[seg[i]].append(i)\n        else:\n            pos[seg[i]] = [i]\n    seg.sort()\n    right = seg[0][1]\n    goodindex = -1\n    for j in range(1,n):\n        if seg[j][0] > right:\n            goodindex = j\n            break\n        right = max(right,seg[j][1])\n    if goodindex == -1:\n        print(-1)\n    else:\n        ans = ['2']*n\n        for i in range(goodindex):\n            ans[pos[seg[i]][-1]] = '1'\n            pos[seg[i]].pop()\n        print(' '.join(ans))", "import sys\ninput = sys.stdin.readline\n\nQ=int(input())\n\nfor test in range(Q):\n    n=int(input())\n    LR=[list(map(int,input().split()))+[i] for i in range(n)]\n    LR.sort()\n\n    GR1=[LR[0][0],LR[0][1]]\n\n    for i in range(1,n):\n        l,r,_=LR[i]\n\n        if r<GR1[0] or l>GR1[1]:\n            ANS=i\n            break\n        else:\n            GR1=[min(GR1[0],l),max(GR1[1],r)]\n\n    else:\n        print(-1)\n        continue\n\n    ANSLIST=[1]*n\n    for j in range(ANS,n):\n        ANSLIST[LR[j][2]]=2\n\n    for a in ANSLIST:\n        print(a,end=\" \")\n    print()\n", "\nL = 0\nR = 1\n\ndef main():\n    buf = input()\n    T = int(buf)\n    n = []\n    lr = []\n    for i in range(T):\n        buf = input()\n        n.append(int(buf))\n        lr.append([])\n        for j in range(n[i]):\n            buf = input()\n            buflist = buf.split()\n            lr[i].append([int(buflist[0]), int(buflist[1])])\n    for i in range(T):\n        lr_s = list(sorted(lr[i]))\n        threshold = lr_s[0][R]\n        threshold_final = None\n        for j in range(1, n[i]):\n            if threshold < lr_s[j][L]:\n                threshold_final = threshold\n                break\n            elif threshold < lr_s[j][R]:\n                threshold = lr_s[j][R]\n        if threshold_final == None:\n            print(-1) # impossible\n            continue\n        answer = \"\"\n        for j in range(n[i]):\n            if lr[i][j][L] <= threshold_final:\n                answer += \"1\"\n            else:\n                answer += \"2\"\n            if j < n[i] - 1:\n                answer += \" \"\n        print(answer)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    inp=[]\n    temp = []\n    for j in range(n):\n        a,b = [int(u) for u in input().split()]\n        inp.append([a,b])\n        temp.append([a,b])\n    inp.sort()\n    check=0\n    begin = inp[0][0]\n    end = inp[0][1]\n    for j in range(n):\n        if(inp[j][0]>end):\n            check=1\n            break\n        if(inp[j][1]>end):\n            end = inp[j][1]\n    ans = []\n    if(check==0):\n        print(-1)\n    else:\n        for j in range(n):\n            if(temp[j][0]>=begin and temp[j][1]<=end):\n                ans.append(\"1\")\n            else:\n                ans.append(\"2\")\n        print(\" \".join(ans))\n", "q=int(input())\n\nfor i in range(q):\n    \n    n=int(input())\n    ilist=[]\n    for j in  range(n):\n        ilist.append(list(map(int, input().rstrip().split())))\n        ilist[j].append(j)\n    ilist.sort()\n    \n    seglist=[2]*n\n    seglist[ilist[0][2]]=1\n    #print(seglist)\n    #print(ilist)\n    #print(ilist)\n    goodvalue=-1\n    currentmax=ilist[0][1]\n    for k in range(n-1):\n        if currentmax>=ilist[k+1][0]:\n            seglist[ilist[k+1][2]]=1\n            currentmax=max([currentmax,ilist[k+1][1]])\n        if currentmax<ilist[k+1][0]:\n            break\n            \n    #for k in range(goodvalue+1,n):        \n    #    seglist[ilist[k][2]]=2    \n    #    print(k)\n    #print(seglist)    \n    if sum(seglist)==n:\n        print(-1)\n    else:\n        print(*seglist)", "n = int(input())\n\nfor t in range(n):\n\n    k = int(input())\n    samples = []\n    for i in range(k):\n        samples.append(tuple(map(int, input().split())))\n\n    samples = sorted(enumerate(samples), key=lambda x: x[1])\n\n    tick = 1\n    ans = [1]\n    group_end = samples[0][1][1]\n\n    for si in range(1, len(samples)):\n        now = samples[si][1]\n        if now[0] > group_end:\n            tick = 2\n        else:\n            group_end = max(now[1], group_end)\n            ans.append(1)\n        if tick == 2:\n            ans.extend([2] * (len(samples) - si))\n            break\n\n    ans = sorted(zip(samples, ans))\n    ans = list([x[1] for x in ans])\n    if 2 not in ans:\n        print(-1)\n    else:\n        print(' '.join(map(str, ans)))\n\n", "import math\n\n\ndef is_intersect(l1, r1, l2, r2):\n    return (l1 < l2 and r1 >= l2) or (l1 >= l2 and l1 <= r2)\n\n\ndef get_groups(ranges):\n    ranges.sort(key=lambda x: x[1])\n    ranges.sort(key=lambda x: x[0])\n    ranges[0][3] = 1\n    group1 = ranges[0][:2]\n    group2 = None\n    for i, rng in enumerate(ranges[1:]):\n        l, r = rng[:2]\n        if is_intersect(l, r, *group1) and ((group2 is None) or not is_intersect(l, r, group2)):\n            rng[3] = 1\n            group1[0] = min(group1[0], l)\n            group1[1] = max(group1[1], r)\n        elif not is_intersect(l, r, *group1):\n            if group2 is None:\n                group2 = [l, r]\n            else:\n                group2[0] = min(group2[0], l)\n                group2[1] = max(group2[1], r)\n            rng[3] = 2\n        else:\n            return -1\n    if group2 is None:\n        return -1\n    ranges.sort(key=lambda x: x[2])\n    return ' '.join(list(map(str, (rng[3] for rng in ranges))))\n\n\n\ndef __starting_point():\n    n = int(input())\n    for i in range(n):\n        k = int(input())\n        arr = [None] * k\n        for j in range(k):\n            arr[j] = list(map(int, input().split())) + [j, -1]\n        print(get_groups(arr))\n\n__starting_point()", "q=int(input())\nfor i in range(q):\n\tn=int(input())\n\tarr=[0 for i in range(n)]\n\tfor i in range(n):\n\t\ttemp=list(map(int,input().split()))\n\t\ttemp.append(i)\n\t\tarr[i]=temp\n\tarr=sorted(arr,key=lambda l:l[0])\n\t#print(arr)\n\tans=[1 for i in range(n)]\n\t# if(arr[0][1]<arr[1][0]):\n\t# \tans[0]=2\n\t# \tfor i in range(n):\n\t# \t\tprint(ans[i],end=' ')\n\t# \tprint()\n\t# \tcontinue\n\t# if(arr[n-1][0]>arr[n-2][1]):\n\t# \tans[n-1]=2\n\t# \tfor i in range(n):\n\t# \t\tprint(ans[i],end=' ')\n\t# \tprint()\n\t# \tcontinue\n\tyoyo=-1\n\tmaxa=arr[0][1]\n\tfor i in range(1,n):\n\t\tif(arr[i][0]>maxa):\n\t\t\tyoyo=i\n\t\t\tbreak\n\t\tif(arr[i][1]>maxa):\n\t\t\tmaxa=arr[i][1]\n\tif(yoyo==-1):\n\t\tprint(-1)\n\t\tcontinue\n\telse:\n\t\tfor i in range(yoyo,n):\n\t\t\tans[arr[i][2]]=2\n\tfor i in range(n):\n\t\tprint(ans[i],end=' ')\n\tprint()\n", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    events = []\n    results = [0 for i in range(n)]\n    fail = False\n    for i in range(n):\n        l, r = map(int, input().split())\n        events.append((l, 0, i))\n        events.append((r, 1, i))\n\n    events.sort()\n    cnt = 0\n    cur_seg = 1\n    for _, t, i in events:\n        if t == 0:\n            cnt += 1\n            results[i] = cur_seg\n        else:\n            cnt -= 1\n\n        if cnt == 0:\n            cur_seg = 1 + cur_seg % 2\n\n    if len(set(results)) == 2:\n        print(*results)\n    else:\n        print(-1)", "q = int(input())\nwhile q > 0:\n    q = q-1\n    L = []\n    n = int(input())\n    for i in range(n):\n        L.append(tuple(map(int, input().split())))\n    d = {}\n    ind = 0\n    for i in L:\n        if i not in d:\n            d[i] = []\n        d[i].append(ind)\n        ind += 1\n    S = sorted(L)\n    r = S[0][1]\n    i = 1\n    while i < n:\n        if S[i][0] > r:\n            break\n        r = max(r,S[i][1])\n        i += 1\n    #print(S,i)\n    if i == n:\n        print(-1)\n    else:\n        while i < n:\n            d[S[i]].append(-2)\n            i += 1\n        for i in L:\n            if d[i][-1] == -2:\n                print(2,end=' ')\n            else:\n                print(1,end=' ')\n        print()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = []\n    for k in range(n):\n        l, r = [int(i) for i in input().split()]\n        s.append([l, 1, k])\n        s.append([r, 2, k])\n    s.sort()\n    u = [2] * n\n    o = set()\n    for i in s:\n        u[i[2]] = 1\n        if i[2] not in o:\n            o.add(i[2])\n        else:\n            o.remove(i[2])\n        if not o:\n            if i != s[-1]:\n                print(*u)\n                break\n    else:\n        print(-1)\n", "t = int(input())\n\nfor test in range(t):\n    n = int(input())\n    ans = ['1' for i in range(n)]\n\n    start, end = dict(), dict()\n    for i in range(n):\n        a, b = list(map(int, input().split()))\n        if a in start:\n            start[a].append(i + 1)\n        else:\n            start[a] = [i + 1]\n\n        if (i + 1) in end:\n            end[i + 1].append(b)\n        else:\n            end[i + 1] = [b]\n\n    st_sorted = sorted(list(start.keys()))\n\n    m = 0\n    ok = False\n    ans_pos = -1\n    for pos in range(len(st_sorted) - 1):\n        for i in start[st_sorted[pos]]:\n            m = max(m, max(end[i]))\n        if m < st_sorted[pos + 1]:\n            ok = True\n            ans_pos = pos\n            break\n    if ok:\n        for i in range(pos + 1, len(st_sorted)):\n            for pos in start[st_sorted[i]]:\n                ans[pos - 1] = '2'\n        print(' '.join(ans))\n    else:\n        print(-1)\n"]