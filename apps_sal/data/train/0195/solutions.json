["class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        counters = [0] * (1 << 16)\n        counters[0] = len(A)\n        for num in A:\n            mask = (~num) & ((1 << 16) - 1)\n            sm = mask\n            while sm != 0:\n                counters[sm] += 1\n                sm = (sm - 1) & mask\n        \n        return sum(counters[num1 & num2] for num1 in A for num2 in A)\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        d = defaultdict(int)\n        for a in A:\n            for b in A:\n                d[a & b] += 1\n        return sum(d[ab] for c in A for ab in d if not(ab & c))", "from collections import Counter\n\nclass Solution(object):\n    def countTriplets(self, A):\n        c = Counter(x & y for x in A for y in A)\n        return sum(c[xy] for xy in c for z in A if xy & z == 0)\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        and_values = {}\n        for x in A:\n            for y in A:\n                c = x & y\n                if c in and_values:\n                    and_values[c] += 1\n                else:\n                    and_values[c] = 1\n        triplet_count = 0\n        for a in and_values:\n            for z in A:\n                if a & z == 0:\n                    triplet_count += and_values[a]\n        return triplet_count\n                \n                        \n                  \n", "from collections import Counter\nfrom functools import lru_cache\nfrom itertools import product\n\n\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        \n        @lru_cache(None)\n        def count_and_zero(x):\n            return sum(1 for a in A if a & x == 0)\n\n        pair_and_count = Counter(\n            x & y\n            for x, y in product(A, A)\n        )\n        return sum(\n            count_and_zero(x) * cnt\n            for x, cnt in list(pair_and_count.items())\n        )\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        memo = {}\n        for i in A:\n            for j in A:\n                memo[i&j] = memo.get(i&j, 0)+1\n        res = 0\n        for num in A:\n            for k in memo:\n                if num&k==0:\n                    res += memo[k]\n        return res", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        t=0\n        d={}\n        for i in A:\n            for j in A:\n                a=i&j\n                if a in d:\n                    d[a]+=1\n                else:\n                    d[a]=1\n        for k in d:\n            for i in A:\n                if k&i==0:\n                    t+=d[k]\n        return t", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        count =collections.defaultdict(int)\n        ret = 0\n        for i in A:\n            for j in A:\n                count[i & j] += 1\n        for i in A:\n            for j in count:\n                if i & j == 0: ret += count[j]\n        return ret", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n=len(A)\n        count=0\n        dic=collections.defaultdict(int)\n        for i in range(n):\n            for j in range(n):\n                dic[(A[i]&A[j])]+=1\n        ans=0\n     #   print(dic)\n        for ele in A:\n            for res in dic:\n                if res&ele==0:\n                    ans+=dic[res]\n        \n        return ans", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        c = Counter(x&y for x in A for y in A)\n        return sum([c[xy] for xy in c for z in A if xy&z == 0])", "from collections import defaultdict\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        d = defaultdict(int)\n        mask = (1<<16) - 1\n        for i in A:\n            high = mask ^ i\n            j = high\n            while j:\n                d[j] += 1\n                j = (j-1) & high\n            d[0] += 1\n        res = 0\n        for i in A:\n            for j in A:\n                res += d[i&j]\n        return res\n", "#\n# @lc app=leetcode id=982 lang=python3\n#\n# [982] Triples with Bitwise AND Equal To Zero\n#\n# https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/description/\n#\n# algorithms\n# Hard (54.38%)\n# Likes:    67\n# Dislikes: 91\n# Total Accepted:    5.5K\n# Total Submissions: 10.2K\n# Testcase Example:  '[2,1,3]'\n#\n# Given an array of integers A, find the number of\u00a0triples of indices (i, j, k)\n# such that:\n# \n# \n# 0 <= i < A.length\n# 0 <= j < A.length\n# 0 <= k < A.length\n# A[i]\u00a0& A[j]\u00a0& A[k] == 0, where &\u00a0represents the bitwise-AND operator.\n# \n# \n# \n# \n# Example 1:\n# \n# \n# Input: [2,1,3]\n# Output: 12\n# Explanation: We could choose the following i, j, k triples:\n# (i=0, j=0, k=1) : 2 & 2 & 1\n# (i=0, j=1, k=0) : 2 & 1 & 2\n# (i=0, j=1, k=1) : 2 & 1 & 1\n# (i=0, j=1, k=2) : 2 & 1 & 3\n# (i=0, j=2, k=1) : 2 & 3 & 1\n# (i=1, j=0, k=0) : 1 & 2 & 2\n# (i=1, j=0, k=1) : 1 & 2 & 1\n# (i=1, j=0, k=2) : 1 & 2 & 3\n# (i=1, j=1, k=0) : 1 & 1 & 2\n# (i=1, j=2, k=0) : 1 & 3 & 2\n# (i=2, j=0, k=1) : 3 & 2 & 1\n# (i=2, j=1, k=0) : 3 & 1 & 2\n# \n# \n# \n# \n# Note:\n# \n# \n# 1 <= A.length <= 1000\n# 0 <= A[i] < 2^16\n# \n# \n#\nfrom collections import Counter\n\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n\n        c = Counter(x & y for x in A for y in A)\n        return sum(c[xy] for xy in c for z in A if xy & z == 0)\n        \n\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        l = len(A)\n        Memo = {}\n        for i in range(l):\n            for j in range(i+1):\n                t = A[i]&A[j]\n                if t not in Memo:\n                    Memo[t] = 0\n                if i == j:\n                    Memo[t] += 1\n                else:\n                    Memo[t] += 2\n        r = 0\n        for a in A:\n            for key in Memo:\n                if key&a == 0:\n                    r += Memo[key]\n        return r\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        d={}\n        for i in A:\n            for j in A:\n                if(i&j in d):\n                    d[i&j]+=1\n                else:\n                    d[i&j]=1\n        c=0\n        for i in A:\n            for j in d:\n                if(i&j==0):\n                    c+=d[j]\n        return c\n            \n                \n                    \n            \n                \n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        tmp = {}\n        for a in A:\n            for b in A:\n                if a&b in tmp:\n                    tmp[a&b]+=1\n                else:\n                    tmp[a&b]=1        \n        ans = 0\n        \n        for k, t in tmp.items():\n            for c in A:\n                if c&k==0:\n                    ans +=t\n        return ans", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        mp = {}\n        for i in A:\n            for j in A:\n                k = i & j\n                mp[k] = mp.get(k, 0) + 1\n        \n        result = 0\n        for i in A:\n            for j in mp:\n                if i & j == 0:\n                    result += mp[j]\n        return result\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        counter = Counter()\n        for a in A:\n            for b in A:\n                counter[a&b] += 1\n        \n        res = 0\n        for a in A:\n            for b in counter:\n                if a&b==0:\n                    res += counter[b]\n                    \n        return res", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        dic = defaultdict(int)\n        res = 0\n        for i in A:\n            for j in A:\n                tmp = i&j\n                dic[tmp] += 1\n        for i in A:\n            for j in dic:\n                if i&j == 0:\n                    res += dic[j]\n        return res\n'''\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        dic = defaultdict(int)\n        res = 0\n        for i in range(len(A)):\n            for j in range(len(A)):\n                num = A[i] & A[j]\n                dic[num] += 1\n        for i in range(len(A)):\n            for j in dic:\n                if A[i] & j == 0:\n                    res += dic[j]\n        return res\n'''", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        cnt = collections.defaultdict(int)\n        for i in A:\n            for j in A:\n                cnt[i&j]+=1\n        res = 0\n        for i in A:\n            for j in cnt:\n                if i & j == 0:\n                    res += cnt[j]\n        return res", "from collections import defaultdict\n\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        counts = defaultdict(int)\n        for x in A:\n            for y in A:\n                counts[x & y] += 1\n        \n        def dfs(z, xy, k):\n            if k == -1:\n                return counts[xy]\n            \n            answer = dfs(z, xy << 1, k - 1)\n            if (z >> k & 1) == 0:\n                answer += dfs(z, (xy << 1 | 1), k - 1)\n            return answer\n        \n        answer = 0\n        for z in A:\n            answer += dfs(z, 0, 16)\n        return answer\n", "from collections import defaultdict\n\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        counts = defaultdict(int)\n        for x in A:\n            for y in A:\n                counts[x & y] += 1\n        \n        def dfs(xy, z, k):\n            if k == -1:\n                return counts[xy]\n            \n            answer = dfs(xy << 1, z, k - 1)\n            if (z >> k & 1) == 0:\n                answer += dfs(xy << 1 | 1, z, k - 1)\n            return answer\n        \n        answer = 0\n        for z in A:\n            answer += dfs(0, z, 16)\n        return answer\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        \n        B = [bin(a)[2:] for a in A]\n        M, N = len(B), max(list(map(len, B)))\n        B = [b.zfill(N) for b in B]\n        \n        dic = collections.defaultdict(set)\n        for i in range(M):\n            for j in range(N):\n                if B[i][j] == '1':\n                    dic[j].add(i)\n        \n        Venn = collections.defaultdict(list)\n        cnt = 0\n        for j in range(N):\n            if len(dic[j]):\n                cnt += (len(dic[j])) ** 3\n                for i in range(j, 0, -1):\n                    for prv in Venn[i]:\n                        intersec = prv & dic[j]\n                        if len(intersec):\n                            cnt += ((-1) ** i) * (len(intersec)) ** 3\n                            Venn[i + 1].append(intersec)\n                Venn[1].append(dic[j])\n        \n        return M ** 3 - cnt\n        \n        \n#         # ans = 0\n#         n = len(A)\n        \n#         @lru_cache(None)\n#         def dfs(i, pre):\n#             if i == 4 and not pre:\n#                 return 1\n#             ans = 0\n#             for a in A:\n#                 if (i > 1 and not pre & a) or (i == 1 and not a):\n#                     ans += n ** (3 - i)\n#                 elif i < 3:\n#                     ans += dfs(i + 1, pre & a if i > 1 else a)\n#             return ans\n        \n        \n#         return dfs(1, None)\n", "class Solution:\n    def countTriplets(self, nums):\n        count_map = collections.Counter(i & j for i in nums for j in nums)\n        return sum(count_map[key] for num in nums for key in count_map if num & key == 0)", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        # O(2**16*n), since a&b<= a,b<= 2**16\n        \n        dp = collections.defaultdict(int)\n        for n1 in A:\n            for n2 in A:\n                dp[n1&n2]+=1\n        \n        res = 0\n        for n in A:\n            for k,v in dp.items():\n                if not k&n:\n                    res+=v\n        return res", "from collections import defaultdict\n\n\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        pairs = defaultdict(int)\n        for a in A:\n            for b in A:\n                pairs[a & b] += 1\n        res = 0\n        for a in A:\n            for p, cnt in pairs.items():\n                if not a & p:\n                    res += cnt\n        return res", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        # O(N^2)\n        two_and_count = collections.Counter()\n        res = 0\n        \n        for idx, x in enumerate(A):\n            if x == 0: # x & x & x\n                res += 1\n            # y & x & x -> 3\n            new_two_and = collections.Counter([x])\n            for idy in range(idx):\n                if x & A[idy] == 0:\n                    res += 3\n                new_two_and[A[idy] & x] += 2\n\n            for v, c in two_and_count.items():\n                if x & v == 0:\n                    res += 3 * c\n            two_and_count += new_two_and\n        return res\n\n    def countTriplets_II(self, A: List[int]) -> int:\n        M = 3\n        N = 1 << 16\n        dp = [[0] * (N) for _ in range(M + 1)]\n        dp[0][N - 1] = 1\n        \n        for m in range(1, M + 1):\n            for v in range(N):\n                for a in A:\n                    dp[m][v & a] += dp[m - 1][v]\n        return dp[M][0]", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        counter = collections.Counter()\n        \n        for i in A:\n            for j in A:\n                counter[i&j] += 1\n        \n        result = 0        \n        for k in A:\n            for v in counter:\n                if k & v == 0:\n                    result += counter[v]\n        return result", "import numpy as np\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        memo=dict()\n        for i in range(len(A)):\n            for j in range(i,len(A)):\n                r=A[i]&A[j]\n                memo[r]=memo.get(r,0)+(1 if i==j else 2) \n        ret=0\n        for i in range(len(A)):\n            for k in memo:\n                if A[i]&k==0:\n                    ret+=memo[k]\n        return ret", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        d={}\n        res=0\n        for a in A:\n            for b in A:\n                t=a&b\n                if t in d:\n                    d[t]+=1\n                else:\n                    d[t]=1\n        for a in A:\n            for k,v in list(d.items()):\n                if a&k==0:\n                    res+=v\n        return res\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        cnt = collections.Counter()\n        A = list(collections.Counter(A).items())\n        result = 0\n        for i, k1 in A:\n            for j, k2 in A:\n                cnt[i & j] += k1 * k2\n        cnt = list(cnt.items())\n        for i, k1 in A:\n            if i == 0:\n                result += k1 * n * n\n                continue\n            for j, k2 in cnt:\n                if i & j == 0:\n                    result += k1 * k2\n        return result", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n#         N = 1 << 16\n#         M = 3\n#         dp = [[0]*N for _ in range(M+1)]\n#         dp[0][N - 1] = 1\n        \n#         for i in range(M):\n#             for k in range(N):\n#                 for a in A:\n#                     dp[i+1][k&a] += dp[i][k]\n        \n#         return dp[M][0]\n    \n        N = len(A)\n        ans = 0\n        count = collections.Counter()\n\n        for i in range(N):\n            for j in range(N):\n                count[A[i]&A[j]] += 1\n                \n        for k in range(N):\n            for v in count:\n                if A[k] & v == 0:\n                    ans += count[v]\n        return ans", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        umap = collections.Counter(A)\n        n = len(A)\n        mask = (1 << 16) - 1\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                key = A[i] & A[j]\n                if key not in umap:\n                    umap[key] = 0\n                umap[key] += 2\n        \n        result = 0\n        for a in A:\n            d = (~a) & mask\n            key = d\n            result += umap.get(d, 0)\n            while d > 0:\n                d = (d-1)&key\n                result += umap.get(d, 0)\n        return result\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        N = len(A)\n        ans = 0\n        count = collections.Counter()\n        for i in range(N):\n            for j in range(N):\n                count[A[i] & A[j]] += 1\n        for k in range(N):\n            for v in count:\n                if A[k] & v == 0:\n                    ans += count[v]\n        \n        return ans", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        cnt = collections.Counter()\n        result = 0\n        for i in A:\n            for j in A:\n                cnt[i & j] += 1\n        for i in A:\n            for j, k in cnt.items():\n                if i & j == 0:\n                    result += k\n        return result", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        cnt=0\n        d={}\n        for i in range(len(A)):\n            for j in range(len(A)):\n                if A[i]&A[j] not in d:\n                    d[A[i]&A[j]]=1\n                else:\n                    d[A[i]&A[j]]+=1\n                    \n        for i in range(len(A)):\n            for j in d:\n                if A[i]&j==0:\n                    cnt+=d[j]\n                    \n                    \n        return cnt\n", "# class Solution:\n#     def countTriplets(self, A: List[int]) -> int:\n#         N, M = 1<<16, 3\n#         dp = [[0]*N for _ in range(M+1)]\n#         dp[0][-1] = 1\n#         for m in range(M):\n#             for n in range(N):\n#                 for a in A:\n#                     dp[m+1][a&n] += dp[m][n]\n#         return dp[-1][0]\n\n\nclass Solution:\n    def countTriplets(self, A: 'List[int]') -> 'int':\n        N = len(A)\n        ans = 0\n        count = collections.Counter()\n\n        for i in range(N):\n            for j in range(N):\n                count[A[i]&A[j]] += 1\n                \n        for k in range(N):\n            for v in count:\n                if A[k] & v == 0:\n                    ans += count[v]\n        return ans", "from collections import defaultdict\nfrom collections import Counter\n\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        combo = collections.Counter(x&y for x in A for y in A)\n            \n        res = 0\n        for a in A:\n            for k,v in list(combo.items()):\n                if a&k==0:\n                    res+=v\n        return res\n                        \n        \n \n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        combo = collections.Counter(x&y for x in A for y in A)\n        return sum(combo[k] for z in A for k in combo if z&k == 0)", "from collections import defaultdict\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        ans = 0\n        A_counts = defaultdict(lambda: 0)\n        for num in A:\n            A_counts[num] += 1\n        \n        counts = defaultdict(lambda: 0)\n        for n1, count1 in list(A_counts.items()):\n            for n2, count2 in list(A_counts.items()):\n                counts[n1&n2] += count1*count2\n                \n        for n1, count1 in list(A_counts.items()):\n            for n2, count2 in list(counts.items()):\n                if n1 & n2 == 0:\n                    ans += count1*count2\n        return ans\n", "from collections import Counter\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        ## https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/discuss/227309/C%2B%2B-naive-O(n-*-n)\n        cnt = Counter()\n        for a in A:\n            for b in A:\n                cnt[a&b] += 1\n        \n        res = 0\n        for a in A:\n            for k, v in cnt.items():\n                if a&k==0:\n                    res += v\n        \n        return res", "from collections import defaultdict\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        ans = 0\n        A_counts = defaultdict(lambda: 0)\n        for num in A:\n            A_counts[num] += 1\n        \n        counts = defaultdict(lambda: 0)\n        for n1, count1 in list(A_counts.items()):\n            for n2, count2 in list(A_counts.items()):\n                counts[n1&n2] += count1*count2\n                \n        for n in A:\n            for num, count in list(counts.items()):\n                if num & n == 0:\n                    ans += count\n        return ans\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        count=0\n        dic=dict()\n        for i in range(len(A)):\n            for j in range(i,len(A)):\n                r=A[i]&A[j]\n                dic[r]=dic.get(r,0)+(1 if i==j else 2)\n        result=0\n        for i in range(len(A)):\n            for k in dic:\n                if A[i]&k==0:\n                    result+=dic[k]\n                \n        return result\n                    \n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        counters = defaultdict(int)\n        counters[0] = len(A)\n        for num in A:\n            mask = (~num) & ((1 << 16) - 1)\n            sm = mask\n            while sm != 0:\n                counters[sm] += 1\n                sm = (sm - 1) & mask\n        \n        return sum(counters[num1 & num2] for num1 in A for num2 in A)\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        \n        N = len(A)\n        ans = 0\n        count = dict()\n\n        for i in range(N):\n            for j in range(N):\n                tmp = A[i]&A[j]\n                if tmp not in count:\n                    count[tmp] = 1\n                else:\n                    count[tmp] += 1\n                \n        for k in range(N):\n            for v in count:\n                if A[k] & v == 0:\n                    ans += count[v]\n        return ans\n        \n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        d={}\n        ans=0\n        for i in range(len(A)):\n            for j in range(len(A)):\n                a=A[i]&A[j]\n                d[a]=d.get(a,0)+1\n        \n        for i in range(len(A)):\n            for j in list(d.keys()):\n                if A[i]&j==0:\n                    ans+=d[j]\n        return ans\n                    \n        \n        \n        \n        \n        \n        \n        \n", "import collections\n\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        \n        N = len(A)\n        ans = 0\n        count = collections.Counter()\n\n        for i in range(N):\n            for j in range(N):\n                count[A[i]&A[j]] += 1\n                \n        for k in range(N):\n            for v in count:\n                if A[k] & v == 0:\n                    ans += count[v]\n        return ans\n        \n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        C = defaultdict(int)\n        for i in range(n):\n            C[A[i]] += 1\n            for j in range(i + 1, n):\n                C[A[i] & A[j]] += 2\n        return sum(c * sum((x & y) == 0 for y in A) for x, c in C.items())", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        C = defaultdict(int)\n        for i, x in enumerate(A):\n            C[x] += 1\n            for j in range(i + 1, n):\n                C[x & A[j]] += 2\n        return sum(c * sum((x & y) == 0 for y in A) for x, c in C.items())", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        C = defaultdict(int)\n        for i in range(n):\n            C[A[i]] += 1\n            for j in range(i + 1, n):\n                C[A[i] & A[j]] += 2\n        res = 0\n        for x, c in C.items():\n            res += c * sum((x & y) == 0 for y in A)\n        return res", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        memo = dict()\n        for i in range(len(A)):\n            for j in range(i,len(A)):\n                r=A[i]&A[j]\n                memo[r]=memo.get(r,0)+(1 if i==j else 2) \n        ret=0\n        for i in range(len(A)):\n            for k in memo:\n                if A[i]&k==0:\n                    ret+=memo[k]\n        return ret", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        n2 = n*n\n        dp = {}\n        ways = 0\n        for i in range(n):\n            for j in range(n):\n                res = A[i] & A[j]\n                dp[res] = dp.get(res, 0) + 1\n        for i in range(n):\n            for tgt, ct in dp.items():\n                if A[i] & tgt == 0:\n                    ways += ct\n                    #print(A[i], tgt, ct)\n        return ways", "from collections import defaultdict\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        n = len(A)\n        ans = 0\n        counts = defaultdict(lambda: 0)\n        for i in range(n):\n            for j in range(n):\n                counts[A[i]&A[j]] += 1\n                \n        for k in range(n):\n            for num, count in list(counts.items()):\n                if num & A[k] == 0:\n                    ans += count\n        return ans\n                        \n#         (a & b) & c== 0  \n        \n# # 0010\n# # 0001\n# # 1101\n# # 0011\n# # 1110\n", "from collections import defaultdict\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        mp = defaultdict(int) # key: elem_value, value: number_of_complement_elements\n        mask = (1 << 16) - 1\n        for x in A:\n            y = mask ^ x\n            s = y\n            while s:\n                mp[s] += 1\n                s = (s - 1) & y\n        n = len(A)\n        cnt = 0\n        for i in range(n):\n            if A[i] == 0:\n                cnt += n * n\n                continue\n            for j in range(n):\n                if A[i] & A[j] == 0:\n                    cnt += n\n                    continue\n                cnt += mp[A[i] & A[j]]\n        return cnt", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        from collections import defaultdict\n        dic=defaultdict(int)\n        n=len(A)\n        dp=defaultdict(int)\n        for i in range(n):\n            for j in range(n):\n                dic[(i,j)] = A[i]&A[j]\n                dp[A[i]&A[j]]+=1\n        ans=0\n        for i in range(n):\n            for x in dp:\n                if x&A[i]==0:\n                    ans+=dp[x]\n        return ans\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        d = dict()\n        for i in range(len(A)):\n            for j in range(len(A)):\n                product = A[i] & A[j]\n                if product in d:\n                    d[product]+=1\n                else:\n                    d[product] = 1\n        ans = 0\n        for i in range(len(A)):\n            for k,v in d.items():\n                if A[i]& k == 0:\n                    ans+=v\n        return ans", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        c = Counter(x & y for x in A for y in A)\n        return sum(c[xy] for xy in c for z in A if xy & z == 0)\n#         bitsOneDict = {\\\"@\\\": 20}\n#         ans = 0\n#         ALen = len(A)\n#         for j, num in enumerate(A):\n#             i = 0\n#             pointer = bitsOneDict\n#             while num > 0:\n#                 if num & 1:\n#                     if i not in pointer:\n#                         pointer[i] = {}\n#                     if \\\"@\\\" not in pointer:\n#                         pointer[\\\"@\\\"] = i\n#                     else:\n#                         pointer[\\\"@\\\"] = max(i, pointer[\\\"@\\\"])\n#                     pointer = pointer[i]\n#                 num >>= 1\n#                 i += 1\n#             if \\\"$\\\" in pointer:\n#                 pointer[\\\"$\\\"].add(j)\n#             else:\n#                 pointer[\\\"$\\\"] = set([j])\n#             if \\\"@\\\" not in pointer:\n#                 pointer[\\\"@\\\"] = i+1\n#             else:\n#                 pointer[\\\"@\\\"] = max(i+1, pointer[\\\"@\\\"])\n                \n#         for j1, num1 in enumerate(A):\n#             for j2 in range(j1, ALen):\n#                 num2 = A[j2]\n#                 num12 = num1 & num2\n#                 if num12 == 0:\n#                     if j1 == j2:\n#                         ans += ALen\n#                     else:\n#                         ans += ALen*2\n#                 else:\n#                     pointers = [bitsOneDict]\n#                     i = 0          \n#                     subAns = set()\n#                     while i < 16:\n#                         if num12 & 1 == 0:\n#                             newPointers = []\n#                             for k in range(len(pointers)-1, -1, -1):\n#                                 pointer = pointers[k]\n#                                 if i in pointer:\n#                                     newPointers.append(pointer[i])\n#                                 else:\n#                                     if i > pointer[\\\"@\\\"]:\n#                                         if \\\"$\\\" in pointer:\n#                                             subAns |= pointer[\\\"$\\\"]\n#                                         pointers.pop(k)   \n#                             pointers += newPointers\n#                         num12 >>= 1\n#                         i += 1\n#                     for pointer in pointers:\n#                         if \\\"$\\\" in pointer:\n#                             subAns |= pointer[\\\"$\\\"]\n#                     if j1 == j2:\n#                         ans += len(subAns)\n#                     else:\n#                         ans += len(subAns)*2\n#         return ans\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        \n        # ans = 0\n        n = len(A)\n        \n        @lru_cache(None)\n        def dfs(i, pre):\n            if i == 4 and not pre:\n                return 1\n            ans = 0\n            for a in A:\n                if (i > 1 and not pre & a) or (i == 1 and not a):\n                    ans += n ** (3 - i)\n                elif i < 3:\n                    ans += dfs(i + 1, pre & a if i > 1 else a)\n            return ans\n        \n        \n        return dfs(1, None)", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        memo=dict()\n        for i in range(len(A)):\n            for j in range(i,len(A)):\n                r=A[i]&A[j]\n                memo[r]=memo.get(r,0)+(1 if i==j else 2) \n        ret=0\n        for i in range(len(A)):\n            for k in memo:\n                if A[i]&k==0:\n                    ret+=memo[k]\n        return ret", "from collections import Counter\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        c = Counter()\n\n        for val in A:\n            val = (~val) & 0xffff\n            mask = val\n            c[val] += 1\n\n            while val > 0:\n                val = (val-1) & mask\n                c[val] += 1\n\n        ans = 0\n        for v1 in A:\n            for v2 in A:\n                val = v1 & v2\n                if val in c:\n                    ans += c[val]\n        return ans\n", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        \n        tot = 1<<16\n        cnt = [0 for _ in range(tot)]\n        for a in A:\n            for b in A:\n                cnt[a&b]+=1\n        \n        ans = 0\n        for e in A:\n            s = 0\n            while s<tot:\n                if s&e==0:\n                    ans += cnt[s]\n                    s += 1\n                else:\n                    s += (e&s)\n        return ans", "class TrieNode:\n    def __init__(self):\n        self.children = [None] * 2\n        self.count = 0\n        self.cache = {}\n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        #self.cache = {}\n        \n    def insert(self, num):\n        now = self.root\n        for j in range(16):\n            i = num & 1\n            if not now.children[i]:\n                now.children[i] = TrieNode()\n            now = now.children[i]\n            num >>= 1\n        now.count += 1\n    \n    def match(self, num):\n        return self.count_match(self.root, num)\n        \n    def count_match(self, now, num):\n        if not now:\n            return 0\n        \n        if num in now.cache:\n            return now.cache[num]\n        \n        if now.count > 0:\n            return now.count\n                \n        \n        bit = num & 1\n        next_num = num >> 1\n        if bit:\n            now.cache[num] = self.count_match(now.children[0], next_num)\n        \n        else:\n            tmp = 0\n            tmp += self.count_match(now.children[0], next_num)\n            tmp += self.count_match(now.children[1], next_num)\n            now.cache[num] = tmp\n        \n        return now.cache[num]\n        \n    \n\nclass Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        # Tries: 16 * n^2\n        \n        trie = Trie()\n        \n        # build Trie\n        for num in A:\n            trie.insert(num)\n        \n        cache = {}\n        ans = 0\n        for num1 in A:\n            for num2 in A:\n                num = (num1 & num2)\n                a = trie.match(num)\n                ans += a\n                #print(num1, num2, a)\n        return ans"]