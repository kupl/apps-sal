["\r\ndef issafe(r,c,r1,c1,graph):\r\n    if (graph[r][c] and graph[r1][c1]):\r\n        return True\r\n    return False\r\n    \r\n\r\nt=int(input())\r\nfor mmmmmm in range(t):\r\n    n,m=map(int,input().split())\r\n    x,y=map(int,input().split())\r\n    \r\n    graph=[[False]*(m+2) for _ in range(n+2)]\r\n\r\n    cost_graph=[[[-1,-1,-1] for __ in range(m)] for _ in range(n)]\r\n    \r\n    for i in range(n):\r\n        str1=input()\r\n        for j,val in enumerate(str1):\r\n            graph[i][j]=(val=='1')\r\n    \r\n    x=x-1\r\n    y=y-1\r\n    \r\n    set1=set()\r\n    set1.add((x,y,0))\r\n    cost_graph[x][y][0]=0\r\n    while(set1):\r\n       \r\n        set2=set()\r\n        \r\n        while(set1):\r\n            r,c,p=set1.pop()\r\n            \r\n            new_cost=cost_graph[r][c][p]+1\r\n            \r\n            if(p==0):\r\n                if issafe(r,c+1,r,c+2,graph):\r\n                    if cost_graph[r][c+1][1]==-1 or cost_graph[r][c+1][1]>new_cost:\r\n                        cost_graph[r][c+1][1]=new_cost\r\n                        set2.add((r,c+1,1))\r\n                        \r\n                if issafe(r+1,c,r+2,c,graph):\r\n                    if cost_graph[r+1][c][2]==-1 or cost_graph[r+1][c][2]>new_cost:\r\n                        cost_graph[r+1][c][2]=new_cost\r\n                        set2.add((r+1,c,2))\r\n                        \r\n                if issafe(r,c-2,r,c-1,graph):\r\n                    if cost_graph[r][c-2][1]==-1 or cost_graph[r][c-2][1]>new_cost:\r\n                        cost_graph[r][c-2][1]=new_cost\r\n                        set2.add((r,c-2,1))\r\n                        \r\n                if issafe(r-2,c,r-1,c,graph):\r\n                    if cost_graph[r-2][c][2]==-1 or cost_graph[r-2][c][2]>new_cost:\r\n                        cost_graph[r-2][c][2]=new_cost\r\n                        set2.add((r-2,c,2))\r\n                        \r\n            elif(p==1):\r\n                if issafe(r,c+2,r,c+2,graph):\r\n                    if cost_graph[r][c+2][0]==-1 or cost_graph[r][c+2][0]>new_cost:\r\n                        cost_graph[r][c+2][0]=new_cost\r\n                        set2.add((r,c+2,0))\r\n                        \r\n                if issafe(r+1,c,r+1,c+1,graph):\r\n                    if cost_graph[r+1][c][1]==-1 or cost_graph[r+1][c][1]>new_cost:\r\n                        cost_graph[r+1][c][1]=new_cost\r\n                        set2.add((r+1,c,1))\r\n                        \r\n                if issafe(r,c-1,r,c-1,graph):\r\n                    if cost_graph[r][c-1][0]==-1 or cost_graph[r][c-1][0]>new_cost:\r\n                        cost_graph[r][c-1][0]=new_cost\r\n                        set2.add((r,c-1,0))\r\n                        \r\n                if issafe(r-1,c,r-1,c+1,graph):\r\n                    if cost_graph[r-1][c][1]==-1 or cost_graph[r-1][c][1]>new_cost:\r\n                        cost_graph[r-1][c][1]=new_cost\r\n                        set2.add((r-1,c,1))\r\n                        \r\n            elif(p==2):\r\n                if issafe(r,c+1,r+1,c+1,graph):\r\n                    if cost_graph[r][c+1][2]==-1 or cost_graph[r][c+1][2]>new_cost:\r\n                        cost_graph[r][c+1][2]=new_cost\r\n                        set2.add((r,c+1,2))\r\n                        \r\n                if issafe(r+2,c,r+2,c,graph):\r\n                    if cost_graph[r+2][c][0]==-1 or cost_graph[r+2][c][0]>new_cost:\r\n                        cost_graph[r+2][c][0]=new_cost\r\n                        set2.add((r+2,c,0))\r\n                        \r\n                if issafe(r,c-1,r+1,c-1,graph):\r\n                    if cost_graph[r][c-1][2]==-1 or cost_graph[r][c-1][2]>new_cost:\r\n                        cost_graph[r][c-1][2]=new_cost\r\n                        set2.add((r,c-1,2))\r\n                        \r\n                if issafe(r-1,c,r-1,c,graph):\r\n                    if cost_graph[r-1][c][0]==-1 or cost_graph[r-1][c][0]>new_cost:\r\n                        cost_graph[r-1][c][0]=new_cost\r\n                        set2.add((r-1,c,0))\r\n        set1=set2\r\n        \r\n    for _ in range(n):\r\n        for __ in range(m):\r\n            print(cost_graph[_][__][0],end=\" \")\r\n        print()\r\n        \r\n                        \r\n            \r\n                        \r\n                        \r\n        \r\n        \r\n        \r\n        \r\n    \r\n    \r\n        \r\n    \r\n    \r\n    ", "\r\ndef issafe(r,c,r1,c1,graph):\r\n    if (graph[r][c] and graph[r1][c1]):\r\n        return True\r\n    return False\r\n    \r\n\r\nt=int(input())\r\nfor mmmmmm in range(t):\r\n    n,m=map(int,input().split())\r\n    x,y=map(int,input().split())\r\n    \r\n    graph=[[False]*(m+2) for _ in range(n+2)]\r\n\r\n    cost_graph=[[[-1,-1,-1] for __ in range(m)] for _ in range(n)]\r\n    \r\n    for i in range(n):\r\n        str1=input()\r\n        for j,val in enumerate(str1):\r\n            graph[i][j]=(val=='1')\r\n    \r\n    x=x-1\r\n    y=y-1\r\n    \r\n    set1=set()\r\n    set1.add((x,y,0))\r\n    cost_graph[x][y][0]=0\r\n    while(set1):\r\n       \r\n        set2=set()\r\n        \r\n        while(set1):\r\n            r,c,p=set1.pop()\r\n            \r\n            new_cost=cost_graph[r][c][p]+1\r\n            \r\n            if(p==0):\r\n                if issafe(r,c+1,r,c+2,graph):\r\n                    if cost_graph[r][c+1][1]==-1 or cost_graph[r][c+1][1]>new_cost:\r\n                        cost_graph[r][c+1][1]=new_cost\r\n                        set2.add((r,c+1,1))\r\n                        \r\n                if issafe(r+1,c,r+2,c,graph):\r\n                    if cost_graph[r+1][c][2]==-1 or cost_graph[r+1][c][2]>new_cost:\r\n                        cost_graph[r+1][c][2]=new_cost\r\n                        set2.add((r+1,c,2))\r\n                        \r\n                if issafe(r,c-2,r,c-1,graph):\r\n                    if cost_graph[r][c-2][1]==-1 or cost_graph[r][c-2][1]>new_cost:\r\n                        cost_graph[r][c-2][1]=new_cost\r\n                        set2.add((r,c-2,1))\r\n                        \r\n                if issafe(r-2,c,r-1,c,graph):\r\n                    if cost_graph[r-2][c][2]==-1 or cost_graph[r-2][c][2]>new_cost:\r\n                        cost_graph[r-2][c][2]=new_cost\r\n                        set2.add((r-2,c,2))\r\n                        \r\n            elif(p==1):\r\n                if issafe(r,c+2,r,c+2,graph):\r\n                    if cost_graph[r][c+2][0]==-1 or cost_graph[r][c+2][0]>new_cost:\r\n                        cost_graph[r][c+2][0]=new_cost\r\n                        set2.add((r,c+2,0))\r\n                        \r\n                if issafe(r+1,c,r+1,c+1,graph):\r\n                    if cost_graph[r+1][c][1]==-1 or cost_graph[r+1][c][1]>new_cost:\r\n                        cost_graph[r+1][c][1]=new_cost\r\n                        set2.add((r+1,c,1))\r\n                        \r\n                if issafe(r,c-1,r,c-1,graph):\r\n                    if cost_graph[r][c-1][0]==-1 or cost_graph[r][c-1][0]>new_cost:\r\n                        cost_graph[r][c-1][0]=new_cost\r\n                        set2.add((r,c-1,0))\r\n                        \r\n                if issafe(r-1,c,r-1,c+1,graph):\r\n                    if cost_graph[r-1][c][1]==-1 or cost_graph[r-1][c][1]>new_cost:\r\n                        cost_graph[r-1][c][1]=new_cost\r\n                        set2.add((r-1,c,1))\r\n                        \r\n            elif(p==2):\r\n                if issafe(r,c+1,r+1,c+1,graph):\r\n                    if cost_graph[r][c+1][2]==-1 or cost_graph[r][c+1][2]>new_cost:\r\n                        cost_graph[r][c+1][2]=new_cost\r\n                        set2.add((r,c+1,2))\r\n                        \r\n                if issafe(r+2,c,r+2,c,graph):\r\n                    if cost_graph[r+2][c][0]==-1 or cost_graph[r+2][c][0]>new_cost:\r\n                        cost_graph[r+2][c][0]=new_cost\r\n                        set2.add((r+2,c,0))\r\n                        \r\n                if issafe(r,c-1,r+1,c-1,graph):\r\n                    if cost_graph[r][c-1][2]==-1 or cost_graph[r][c-1][2]>new_cost:\r\n                        cost_graph[r][c-1][2]=new_cost\r\n                        set2.add((r,c-1,2))\r\n                        \r\n                if issafe(r-1,c,r-1,c,graph):\r\n                    if cost_graph[r-1][c][0]==-1 or cost_graph[r-1][c][0]>new_cost:\r\n                        cost_graph[r-1][c][0]=new_cost\r\n                        set2.add((r-1,c,0))\r\n        set1=set2\r\n        \r\n    for _ in range(n):\r\n        for __ in range(m):\r\n            print(cost_graph[_][__][0],end=\" \")\r\n        print()\r\n        \r\n                        \r\n            \r\n                        \r\n                        \r\n        \r\n        \r\n        \r\n        \r\n    \r\n    \r\n        \r\n    \r\n    \r\n    ", "\r\ndef issafe(r,c,r1,c1,graph,n,m):\r\n    if (r>-1 and r1>-1 and c>-1 and c1>-1 and r<n and r1<n and c<m and c1<m and graph[r][c] and graph[r1][c1]):\r\n        return True\r\n    return False\r\n    \r\n\r\nt=int(input())\r\nfor mmmmmm in range(t):\r\n    n,m=map(int,input().split())\r\n    x,y=map(int,input().split())\r\n    \r\n    graph=[[False]*m for _ in range(n)]\r\n\r\n    cost_graph=[[[-1,-1,-1] for __ in range(m)] for _ in range(n)]\r\n    \r\n    for i in range(n):\r\n        str1=input()\r\n        for j,val in enumerate(str1):\r\n            graph[i][j]=(val=='1')\r\n    \r\n    x=x-1\r\n    y=y-1\r\n    \r\n    set1=set()\r\n    set1.add((x,y,0))\r\n    cost_graph[x][y][0]=0\r\n    while(set1):\r\n       \r\n        set2=set()\r\n        \r\n        while(set1):\r\n            r,c,p=set1.pop()\r\n            \r\n            new_cost=cost_graph[r][c][p]+1\r\n            \r\n            if(p==0):\r\n                if issafe(r,c+1,r,c+2,graph,n,m):\r\n                    if cost_graph[r][c+1][1]==-1 or cost_graph[r][c+1][1]>new_cost:\r\n                        cost_graph[r][c+1][1]=new_cost\r\n                        set2.add((r,c+1,1))\r\n                        \r\n                if issafe(r+1,c,r+2,c,graph,n,m):\r\n                    if cost_graph[r+1][c][2]==-1 or cost_graph[r+1][c][2]>new_cost:\r\n                        cost_graph[r+1][c][2]=new_cost\r\n                        set2.add((r+1,c,2))\r\n                        \r\n                if issafe(r,c-2,r,c-1,graph,n,m):\r\n                    if cost_graph[r][c-2][1]==-1 or cost_graph[r][c-2][1]>new_cost:\r\n                        cost_graph[r][c-2][1]=new_cost\r\n                        set2.add((r,c-2,1))\r\n                        \r\n                if issafe(r-2,c,r-1,c,graph,n,m):\r\n                    if cost_graph[r-2][c][2]==-1 or cost_graph[r-2][c][2]>new_cost:\r\n                        cost_graph[r-2][c][2]=new_cost\r\n                        set2.add((r-2,c,2))\r\n                        \r\n            elif(p==1):\r\n                if issafe(r,c+2,r,c+2,graph,n,m):\r\n                    if cost_graph[r][c+2][0]==-1 or cost_graph[r][c+2][0]>new_cost:\r\n                        cost_graph[r][c+2][0]=new_cost\r\n                        set2.add((r,c+2,0))\r\n                        \r\n                if issafe(r+1,c,r+1,c+1,graph,n,m):\r\n                    if cost_graph[r+1][c][1]==-1 or cost_graph[r+1][c][1]>new_cost:\r\n                        cost_graph[r+1][c][1]=new_cost\r\n                        set2.add((r+1,c,1))\r\n                        \r\n                if issafe(r,c-1,r,c-1,graph,n,m):\r\n                    if cost_graph[r][c-1][0]==-1 or cost_graph[r][c-1][0]>new_cost:\r\n                        cost_graph[r][c-1][0]=new_cost\r\n                        set2.add((r,c-1,0))\r\n                        \r\n                if issafe(r-1,c,r-1,c+1,graph,n,m):\r\n                    if cost_graph[r-1][c][1]==-1 or cost_graph[r-1][c][1]>new_cost:\r\n                        cost_graph[r-1][c][1]=new_cost\r\n                        set2.add((r-1,c,1))\r\n                        \r\n            elif(p==2):\r\n                if issafe(r,c+1,r+1,c+1,graph,n,m):\r\n                    if cost_graph[r][c+1][2]==-1 or cost_graph[r][c+1][2]>new_cost:\r\n                        cost_graph[r][c+1][2]=new_cost\r\n                        set2.add((r,c+1,2))\r\n                        \r\n                if issafe(r+2,c,r+2,c,graph,n,m):\r\n                    if cost_graph[r+2][c][0]==-1 or cost_graph[r+2][c][0]>new_cost:\r\n                        cost_graph[r+2][c][0]=new_cost\r\n                        set2.add((r+2,c,0))\r\n                        \r\n                if issafe(r,c-1,r+1,c-1,graph,n,m):\r\n                    if cost_graph[r][c-1][2]==-1 or cost_graph[r][c-1][2]>new_cost:\r\n                        cost_graph[r][c-1][2]=new_cost\r\n                        set2.add((r,c-1,2))\r\n                        \r\n                if issafe(r-1,c,r-1,c,graph,n,m):\r\n                    if cost_graph[r-1][c][0]==-1 or cost_graph[r-1][c][0]>new_cost:\r\n                        cost_graph[r-1][c][0]=new_cost\r\n                        set2.add((r-1,c,0))\r\n        set1=set2\r\n        \r\n    for _ in range(n):\r\n        for __ in range(m):\r\n            print(cost_graph[_][__][0],end=\" \")\r\n        print()\r\n        \r\n                        \r\n            \r\n                        \r\n                        \r\n        \r\n        \r\n        \r\n        \r\n    \r\n    \r\n        \r\n    \r\n    \r\n    ", "from math import inf\n\nT = int(input())\n\nfor _ in range(T):\n    n, m = map(int, input().split())\n    r, c = map(int, input().split())\n    grid = [[False] * (m + 2) for __ in range(n + 2)]\n    for i in range(n):\n        s = input()\n        for j, x in enumerate(s): grid[i][j] = x == '1'\n    solution = [[[inf, inf, inf] for ___ in range(m)] for __ in range(n)]\n    r -= 1\n    c -= 1\n    solution[r][c][0] = 0\n    touched_set = set()\n    touched_set.add((r, c, 0))\n    while len(touched_set):\n        new_touched_set = set()\n        while len(touched_set):\n            r, c, o = touched_set.pop()\n            new_sol = 1 + solution[r][c][o]\n            if o == 0:\n                if grid[r][c + 1] and grid[r][c + 2] and solution[r][c + 1][1] > new_sol:\n                    solution[r][c + 1][1] = new_sol\n                    new_touched_set.add((r, c + 1, 1))\n                if grid[r + 1][c] and grid[r + 2][c] and solution[r + 1][c][2] > new_sol:\n                    solution[r + 1][c][2] = new_sol\n                    new_touched_set.add((r + 1, c, 2))\n                if grid[r][c - 2] and grid[r][c - 1] and solution[r][c - 2][1] > new_sol:\n                    solution[r][c - 2][1] = new_sol\n                    new_touched_set.add((r, c - 2, 1))\n                if grid[r - 2][c] and grid[r - 1][c] and solution[r - 2][c][2] > new_sol:\n                    solution[r - 2][c][2] = new_sol\n                    new_touched_set.add((r - 2, c, 2))\n            elif o == 1: \n                if grid[r][c + 2] and solution[r][c + 2][0] > new_sol:\n                    solution[r][c + 2][0] = new_sol\n                    new_touched_set.add((r, c + 2, 0))\n                if grid[r + 1][c] and grid[r + 1][c + 1] and solution[r + 1][c][1] > new_sol:\n                    solution[r + 1][c][1] = new_sol\n                    new_touched_set.add((r + 1, c, 1))\n                if grid[r][c - 1] and solution[r][c - 1][0] > new_sol:\n                    solution[r][c - 1][0] = new_sol\n                    new_touched_set.add((r, c - 1, 0))\n                if grid[r - 1][c] and grid[r - 1][c + 1] and solution[r - 1][c][1] > new_sol:\n                    solution[r - 1][c][1] = new_sol\n                    new_touched_set.add((r - 1, c, 1))\n            else:\n                if grid[r][c + 1] and grid[r + 1][c + 1] and solution[r][c + 1][2] > new_sol:\n                    solution[r][c + 1][2] = new_sol\n                    new_touched_set.add((r, c + 1, 2))\n                if grid[r + 2][c] and solution[r + 2][c][0] > new_sol:\n                    solution[r + 2][c][0] = new_sol\n                    new_touched_set.add((r + 2, c, 0))\n                if grid[r][c - 1] and grid[r + 1][c - 1] and solution[r][c - 1][2] > new_sol:\n                    solution[r][c - 1][2] = new_sol\n                    new_touched_set.add((r, c - 1, 2))\n                if grid[r - 1][c] and solution[r - 1][c][0] > new_sol:\n                    solution[r - 1][c][0] = new_sol\n                    new_touched_set.add((r - 1, c, 0))\n        touched_set = new_touched_set\n   \n    for i in range(n):\n        for j in range(m):\n            print(solution[i][j][0] if solution[i][j][0] != inf else -1, end=' ')\n        print()\n", "from math import inf\r\n\r\nT = int(input())\r\n\r\nfor _ in range(T):\r\n    n, m = map(int, input().split())\r\n    r, c = map(int, input().split())\r\n    grid = [[False] * (m + 2) for __ in range(n + 2)]\r\n    for i in range(n):\r\n        s = input()\r\n        for j, x in enumerate(s): grid[i][j] = x == '1'\r\n    solution = [[[inf, inf, inf] for ___ in range(m)] for __ in range(n)]\r\n    r -= 1\r\n    c -= 1\r\n    solution[r][c][0] = 0\r\n    A=[]\r\n    B=[]\r\n    C=[]\r\n    \r\n    A.append(r)\r\n    B.append(c)\r\n    C.append(0)\r\n    \r\n    while len(A):\r\n        r=A.pop(0)\r\n        c=B.pop(0)\r\n        o=C.pop(0)\r\n        new_sol = 1 + solution[r][c][o]\r\n        if o == 0: \r\n            if grid[r][c + 1] and grid[r][c + 2] and solution[r][c + 1][1] > new_sol:\r\n                solution[r][c + 1][1] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c+1)\r\n                C.append(1)\r\n                \r\n                \r\n            if grid[r + 1][c] and grid[r + 2][c] and solution[r + 1][c][2] > new_sol:\r\n                solution[r + 1][c][2] = new_sol\r\n                A.append(r+1)\r\n                B.append(c)\r\n                C.append(2)\r\n                \r\n                \r\n            if grid[r][c - 2] and grid[r][c - 1] and solution[r][c - 2][1] > new_sol:\r\n                solution[r][c - 2][1] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c-2)\r\n                C.append(1)\r\n                \r\n                \r\n            if grid[r - 2][c] and grid[r - 1][c] and solution[r - 2][c][2] > new_sol:\r\n                solution[r - 2][c][2] = new_sol\r\n                \r\n                A.append(r-2)\r\n                B.append(c)\r\n                C.append(2)\r\n                \r\n                \r\n        elif o == 1:\r\n            if grid[r][c + 2] and solution[r][c + 2][0] > new_sol:\r\n                solution[r][c + 2][0] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c+2)\r\n                C.append(0)\r\n                \r\n            if grid[r + 1][c] and grid[r + 1][c + 1] and solution[r + 1][c][1] > new_sol:\r\n                solution[r + 1][c][1] = new_sol\r\n               \r\n                A.append(r+1)\r\n                B.append(c)\r\n                C.append(1)\r\n                \r\n            if grid[r][c - 1] and solution[r][c - 1][0] > new_sol:\r\n                solution[r][c - 1][0] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c-1)\r\n                C.append(0)\r\n                \r\n            if grid[r - 1][c] and grid[r - 1][c + 1] and solution[r - 1][c][1] > new_sol:\r\n                solution[r - 1][c][1] = new_sol\r\n                \r\n                A.append(r-1)\r\n                B.append(c)\r\n                C.append(1)\r\n                \r\n        else: \r\n            if grid[r][c + 1] and grid[r + 1][c + 1] and solution[r][c + 1][2] > new_sol:\r\n                solution[r][c + 1][2] = new_sol\r\n               \r\n                A.append(r)\r\n                B.append(c+1)\r\n                C.append(2)\r\n                \r\n            if grid[r + 2][c] and solution[r + 2][c][0] > new_sol:\r\n                solution[r + 2][c][0] = new_sol\r\n                \r\n                A.append(r+2)\r\n                B.append(c)\r\n                C.append(0)\r\n                \r\n            if grid[r][c - 1] and grid[r + 1][c - 1] and solution[r][c - 1][2] > new_sol:\r\n                solution[r][c - 1][2] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c-1)\r\n                C.append(2)\r\n                \r\n            if grid[r - 1][c] and solution[r - 1][c][0] > new_sol:\r\n                solution[r - 1][c][0] = new_sol\r\n                \r\n                \r\n                A.append(r-1)\r\n                B.append(c)\r\n                C.append(0)\r\n    \r\n    \r\n    for i in range(n):\r\n        for j in range(m):\r\n            print(solution[i][j][0] if solution[i][j][0] != inf else -1, end=' ')\r\n        print()\r\n\r\n        ", "from math import inf\r\n\r\nT = int(input())\r\n\r\nfor _ in range(T):\r\n    n, m = map(int, input().split())\r\n    r, c = map(int, input().split())\r\n    grid = [[False] * (m + 2) for __ in range(n + 2)]\r\n    for i in range(n):\r\n        s = input()\r\n        for j, x in enumerate(s): grid[i][j] = x == '1'\r\n    solution = [[[inf, inf, inf] for ___ in range(m)] for __ in range(n)]\r\n    r -= 1\r\n    c -= 1\r\n    solution[r][c][0] = 0\r\n    A=[]\r\n    B=[]\r\n    C=[]\r\n    \r\n    A.append(r)\r\n    B.append(c)\r\n    C.append(0)\r\n    \r\n    while len(A):\r\n        r=A.pop(0)\r\n        c=B.pop(0)\r\n        o=C.pop(0)\r\n        new_sol = 1 + solution[r][c][o]\r\n        if o == 0: \r\n            if grid[r][c + 1] and grid[r][c + 2] and solution[r][c + 1][1] > new_sol:\r\n                solution[r][c + 1][1] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c+1)\r\n                C.append(1)\r\n                \r\n                \r\n            if grid[r + 1][c] and grid[r + 2][c] and solution[r + 1][c][2] > new_sol:\r\n                solution[r + 1][c][2] = new_sol\r\n                A.append(r+1)\r\n                B.append(c)\r\n                C.append(2)\r\n                \r\n                \r\n            if grid[r][c - 2] and grid[r][c - 1] and solution[r][c - 2][1] > new_sol:\r\n                solution[r][c - 2][1] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c-2)\r\n                C.append(1)\r\n                \r\n                \r\n            if grid[r - 2][c] and grid[r - 1][c] and solution[r - 2][c][2] > new_sol:\r\n                solution[r - 2][c][2] = new_sol\r\n                \r\n                A.append(r-2)\r\n                B.append(c)\r\n                C.append(2)\r\n                \r\n                \r\n        elif o == 1:\r\n            if grid[r][c + 2] and solution[r][c + 2][0] > new_sol:\r\n                solution[r][c + 2][0] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c+2)\r\n                C.append(0)\r\n                \r\n            if grid[r + 1][c] and grid[r + 1][c + 1] and solution[r + 1][c][1] > new_sol:\r\n                solution[r + 1][c][1] = new_sol\r\n               \r\n                A.append(r+1)\r\n                B.append(c)\r\n                C.append(1)\r\n                \r\n            if grid[r][c - 1] and solution[r][c - 1][0] > new_sol:\r\n                solution[r][c - 1][0] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c-1)\r\n                C.append(0)\r\n                \r\n            if grid[r - 1][c] and grid[r - 1][c + 1] and solution[r - 1][c][1] > new_sol:\r\n                solution[r - 1][c][1] = new_sol\r\n                \r\n                A.append(r-1)\r\n                B.append(c)\r\n                C.append(1)\r\n                \r\n        else: \r\n            if grid[r][c + 1] and grid[r + 1][c + 1] and solution[r][c + 1][2] > new_sol:\r\n                solution[r][c + 1][2] = new_sol\r\n               \r\n                A.append(r)\r\n                B.append(c+1)\r\n                C.append(2)\r\n                \r\n            if grid[r + 2][c] and solution[r + 2][c][0] > new_sol:\r\n                solution[r + 2][c][0] = new_sol\r\n                \r\n                A.append(r+2)\r\n                B.append(c)\r\n                C.append(0)\r\n                \r\n            if grid[r][c - 1] and grid[r + 1][c - 1] and solution[r][c - 1][2] > new_sol:\r\n                solution[r][c - 1][2] = new_sol\r\n                \r\n                A.append(r)\r\n                B.append(c-1)\r\n                C.append(2)\r\n                \r\n            if grid[r - 1][c] and solution[r - 1][c][0] > new_sol:\r\n                solution[r - 1][c][0] = new_sol\r\n                \r\n                \r\n                A.append(r-1)\r\n                B.append(c)\r\n                C.append(0)\r\n    \r\n    \r\n    for i in range(n):\r\n        for j in range(m):\r\n            print(solution[i][j][0] if solution[i][j][0] != inf else -1, end=' ')\r\n        print()\r\n\r\n        ", "from math import inf\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    r, c = map(int, input().split())\n    a = [[0] * (m+2) for _ in range(n+2)]\n    for i in range(n):\n        s = input()\n        for j, x in enumerate(s):\n            a[i][j] = x\n    r -= 1\n    c -= 1\n    ans = [[[inf, inf, inf] for i in range(m)] for j in range(n)]\n    ans[r][c][0] = 0\n    touched = set()\n    touched.add((r, c, 0))\n    while len(touched):\n        visited = set()\n        while len(touched):\n            r, c, o = touched.pop()\n            count = 1 + ans[r][c][o]\n            if o == 0:\n                if a[r][c+1] == '1' and a[r][c+2] == '1' and ans[r][c+1][1] > count:\n                    ans[r][c+1][1] = count\n                    visited.add((r, c+1, 1))\n                if a[r][c-2] == '1' and a[r][c-1] == '1' and ans[r][c-2][1] > count:\n                    ans[r][c-2][1] = count\n                    visited.add((r, c-2, 1))\n                if a[r+1][c] == '1' and a[r+2][c] == '1' and ans[r+1][c][2] > count:\n                    ans[r+1][c][2] = count\n                    visited.add((r+1, c, 2))\n                if a[r-1][c] == '1' and a[r-2][c] == '1' and ans[r-2][c][2] > count:\n                    ans[r-2][c][2] = count\n                    visited.add((r-2, c, 2))\n            elif o == 1:\n                if a[r][c+2] == '1' and ans[r][c+2][0] > count:\n                    ans[r][c+2][0] = count\n                    visited.add((r, c+2, 0))\n                if a[r][c-1] == '1' and ans[r][c-1][0] > count:\n                    ans[r][c-1][0] = count\n                    visited.add((r, c-1, 0))\n                if a[r+1][c] == '1' and a[r+1][c+1] == '1' and ans[r+1][c][1] > count:\n                    ans[r+1][c][1] = count\n                    visited.add((r+1, c, 1))\n                if a[r-1][c] == '1' and a[r-1][c+1] == '1' and ans[r-1][c][1] > count:\n                    ans[r-1][c][1] = count\n                    visited.add((r-1, c, 1))\n            else:\n                if a[r][c+1] == '1' and a[r+1][c+1] == '1' and ans[r][c+1][2] > count:\n                    ans[r][c+1][2] = count\n                    visited.add((r, c+1, 2))\n                if a[r][c-1] == '1' and a[r+1][c-1] == '1' and ans[r][c-1][2] > count:\n                    ans[r][c-1][2] = count\n                    visited.add((r, c-1, 2))\n                if a[r+2][c] == '1' and ans[r+2][c][0] > count:\n                    ans[r+2][c][0] = count\n                    visited.add((r+2, c, 0))\n                if a[r-1][c] == '1' and ans[r-1][c][0] > count:\n                    ans[r-1][c][0] = count\n                    visited.add((r-1, c, 0))\n        touched = visited\n    for i in range(n):\n        for j in range(m):\n            print(ans [i][j][0] if ans[i][j][0] != inf else -1, end=' ')\n        print()"]