["# cook your dish here\nstore=[0]*(10**5+1)\ndef sieve():\n\tfor i in range(2,10**5+1):\n\t\tif(store[i]==0):\n\t\t\tstore[i]=1\n\t\t\tfor j in range(i,10**5+1,i):\n\t\t\t\tstore[j]=i\nsieve()\n# print(store)\nfor _ in range(int(input())):\n\t\n\tn=int(input())\n\tli=[int(x) for x in input().split()]\n\n\tdp=[0]*(10**5+1)\n\tfor i in li:\n\t\tdp[store[i]]+=1\n\tmax_re=0\n\tres=0\n\tfor i in li:\n\t\tif(dp[store[i]]==max_re):\n\t\t\tif(store[i]>res):\n\t\t\t\tres=store[i]\n\t\telif(dp[store[i]]>max_re):\n\t\t\tmax_re=dp[store[i]]\n\t\t\tres=store[i]\n\t\n\tprint(res)\n\n\n\n", "# cook your dish here\n\"\"\"def power(x, y): \n    res = 1\n    x=x\n    while (y > 0): \n        if ((y & 1) == 1) : \n            res = (res * x) \n        y = y >> 1\n        x = (x * x)\n    return res\"\"\" \n\"\"\"def fact(n):\n    if(n==0):\n        return 1\n    if(n==1):\n        return 1\n    return fact(n-1)+fact(n-2)\"\"\"\n\ndef maxPrimeFactors (n): \n    Prime = -1\n    while n % 2 == 0: \n        Prime = 2\n        n >>= 1  \n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            Prime = i \n            n = n / i \n    if n > 2: \n        Prime = n \n    return int(Prime)\n#import collections\nimport math\narray=[0]*100001\nfor i in range(1,100001):\n    array[i]=maxPrimeFactors(i)\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    #b,g=map(int,input().split())\n    #x2,y2=map(int,input().split())\n    arr=list(map(int,input().split()))\n    #m,k=map(int,input().split())\n    d={}\n    for i in range(n):\n        prime_fact=array[arr[i]]\n        if prime_fact not in d:\n            d[prime_fact]=1\n        else:\n            d[prime_fact]+=1\n    maxCount=max(d.values())\n    ans=-1\n    for i in d:\n        if(d[i]==maxCount):\n            if(i>=ans):\n              ans=i\n    print(ans)\n    \n", "import math\r\ndef primes(n): \r\n    maxPrime = -1\r\n      \r\n    while n % 2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1 \r\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n \r\n      \r\n    return int(maxPrime) \r\n\r\ndef prtable(n):\r\n    dp=[0 for i in range(n+1)]\r\n    dp[1]=1\r\n    dp[2]=2\r\n    dp[3]=3\r\n    for i in range(4,n+1):\r\n        dp[i]=primes(i)\r\n    return dp\r\npr= prtable(100000)\r\n\r\nfor i in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    d={}\r\n    for i in range(n):\r\n        if pr[a[i]] in d:\r\n            d[pr[a[i]]]+=1\r\n        else:\r\n            d[pr[a[i]]]=1\r\n    ans=0\r\n    maxx=0\r\n    #print(d)\r\n\r\n    for i in d:\r\n        if d[i]>ans:\r\n            ans=d[i]\r\n            maxx=i\r\n        elif d[i]==ans:\r\n            if maxx<i:\r\n                maxx=i\r\n                ans=d[i]\r\n    \r\n\r\n    \r\n            \r\n    print(maxx)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n", "# cook your dish here\nfrom collections import Counter\n\n\n# Python3 program to find prime factorization \n# of a number n in O(Log n) time with \n# precomputation allowed. \nimport math as mt \n\nMAXN = 100001\n\n# stores smallest prime factor for \n# every number \nspf = [0 for i in range(MAXN)] \n\n# Calculating SPF (Smallest Prime Factor) \n# for every number till MAXN. \n# Time Complexity : O(nloglogn) \ndef sieve(): \n    spf[1] = 1\n    for i in range(2, MAXN): \n        \n        # marking smallest prime factor \n        # for every number to be itself. \n        spf[i] = i \n\n    # separately marking spf for \n    # every even number as 2 \n    for i in range(4, MAXN, 2): \n        spf[i] = 2\n\n    for i in range(3, mt.ceil(mt.sqrt(MAXN))): \n        \n        # checking if i is prime \n        if (spf[i] == i): \n            \n            # marking SPF for all numbers \n            # divisible by i \n            for j in range(i * i, MAXN, i): \n                \n                # marking spf[j] if it is \n                # not previously marked \n                if (spf[j] == j): \n                    spf[j] = i \n\n# A O(log n) function returning prime \n# factorization by dividing by smallest \n# prime factor at every step \ndef getFactorization(x): \n    ret = list() \n    while (x != 1): \n        ret.append(spf[x]) \n        x = x // spf[x] \n\n    return ret.pop() #last ele \n\n# Driver code \n\n# precalculating Smallest Prime Factor \nsieve() \n# x = 12246\n\n# calling getFactorization function \n# p = getFactorization(x) \n\n# for i in range(len(p)): \n#     print(p[i], end = \" \") \n\n# This code is contributed \n# by Mohit kumar 29 \n\n\n            \nt = int(input())\n\nfor test in range(t):\n    n = int(input())\n    A = tuple(map(int, input().split()))\n    li = []\n    mx = 1\n    mx_li = []\n    for a in A:\n        li.append(getFactorization(a))\n      \n    c = Counter(li)\n    # print(li)\n    # print(c)\n    for key in c:\n        if c[key] > mx:\n            mx_li = [key]\n            mx = c[key]\n        elif c[key] == mx:\n            mx_li.append(key)\n    \n    print(max(mx_li))\n            \n", "def prime(num):\r\n  if n>1:\r\n   for i in range(2, int(num**0.5)+1): \r\n         \r\n       # If num is divisible by any number between  \r\n       # 2 and n / 2, it is not prime  \r\n       if (num % i) == 0: \r\n           return False\r\n           break\r\n   else: \r\n       return True\r\n  \r\n  else: \r\n   return False\r\nt=int(input())\r\nfor k in range(t):\r\n    n=int(input())\r\n    a=[0]*n\r\n    l=list(map(int,input().split()))\r\n    s=max(l)\r\n    a1=[0]*(s+1)\r\n    i=2\r\n    while(i<=s):\r\n        if (prime(i)):\r\n         for j in range(i,s+1,i):\r\n            a1[j]=i\r\n        i+=1\r\n    for j in range(n):\r\n        a[j]=a1[l[j]]\r\n    a.sort()\r\n    ti=1\r\n    ma=1\r\n    nu=a[0]\r\n    for j in range(1,n):\r\n        if a[j]==a[j-1]:\r\n            ti+=1\r\n        else:\r\n            if ti>=ma:\r\n                ma=ti\r\n                nu=a[j-1]\r\n                \r\n            ti=1\r\n    if ti>=ma:\r\n        ma=ti\r\n        nu=a[n-1]\r\n        \r\n    print(nu)\r\n    \r\n        \r\n", "from collections import Counter\r\nfrom math import sqrt\r\n\r\ndef facts(n):\r\n    if n % 2 == 0:\r\n        yield 2\r\n\r\n        while n % 2 == 0:\r\n            n //= 2\r\n\r\n    for i in range(3, int(sqrt(n)) + 1, 2):\r\n        if n % i == 0:\r\n            yield i\r\n\r\n            while n % i == 0:\r\n                n //= i\r\n\r\n    if n > 2:\r\n        yield n\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n\r\n    ms = [max(facts(i)) for i in a]\r\n\r\n    cnt = Counter(ms)\r\n\r\n    m = max(cnt.values())\r\n\r\n    x = {i for i in ms if cnt[i] == m}\r\n\r\n    print(max(x))"]