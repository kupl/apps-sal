["class Solution:\n     def maximalSquare(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         if not matrix:\n             return 0\n \n         m, n = len(matrix), len(matrix[0])\n         dp = [int(matrix[i][0]) for i in range(m)]\n         vmax = max(dp)    \n         pre = 0   \n         for j in range(1, n):\n             pre, dp[0] = int(matrix[0][j-1]), int(matrix[0][j])\n             for i in range(1, m):\n                 cur = dp[i]\n                 dp[i] = 0 if matrix[i][j] == '0' else (min(dp[i-1], dp[i], pre) + 1) \n                 pre = cur\n             vmax = max(vmax, max(dp))\n         return vmax ** 2", "class Solution:\n     def maximalSquare(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         if len(matrix) == 0 or len(matrix[0]) == 0: return 0\n         n, m = len(matrix), len(matrix[0])\n         dp = [[0 for i in range(m)] for j in range(n)]\n         for i in range(n): dp[i][0] = int(matrix[i][0])\n         for j in range(m): dp[0][j] = int(matrix[0][j])\n         for i in range(1, n):\n             for j in range(1, m):\n                 if (matrix[i][j] == '1'):\n                     dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n         ans = 0\n         for i in range(n):\n             ans = max(ans, max(dp[i]))\n         return ans ** 2", "class Solution:\n     def maximalSquare(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         if not matrix: return 0\n         rows, cols = len(matrix), len(matrix[0])\n         dp = list(map(int, matrix[0][:]))\n         maxLen = 1 if sum(dp) > 0 else 0\n         for i in range(1, rows):\n             tmp = dp[0]\n             dp[0] = int(matrix[i][0])\n             maxLen = max(maxLen, dp[0])\n             pre = tmp\n             for j in range(1, cols):\n                 tmp = dp[j]\n                 if matrix[i][j] == '1':\n                     dp[j] = min(dp[j], dp[j - 1], pre) + 1\n                     maxLen = max(maxLen, dp[j])\n                 else:\n                      dp[j] = 0\n                 pre = tmp\n         return maxLen * maxLen", "class Solution:\n     def maximalSquare(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         if not matrix: return 0\n         rows, cols = len(matrix), len(matrix[0])\n         dp = [0] * cols\n         maxLen = 1 if sum(dp) > 0 else 0\n         for i in range(0, rows):\n             for j in range(0, cols):\n                 if matrix[i][j] == '1':\n                     if j == 0:\n                         dp[j] = int(matrix[i][j])\n                     else:\n                         k = min(dp[j], dp[j - 1])\n                         dp[j] = (k + 1) if matrix[i - k][j - k] == '1' else k\n                     maxLen = max(maxLen, dp[j])\n                 else:\n                     dp[j] = 0\n         return maxLen * maxLen", "class Solution:\n     def maximalSquare(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         if not matrix or len(matrix) == 0:\n             return 0\n         m = len(matrix)\n         n = len(matrix[0])\n         dp = [[0 for i in range(n)] for j in range(m)]\n         dp[0] = list(map(lambda x: int(x), matrix[0]))\n         maxLength = 1 if 1 in dp[0] else 0\n         for i in range(1, m):\n             dp[i][0] = int(matrix[i][0])\n             if dp[i][0] == 1:\n                 maxLength = 1\n         for i in range(1, m):\n             for j in range(1, n):\n                 if matrix[i][j] == '0':\n                     dp[i][j] = 0\n                 else:\n                     dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n                     maxLength = max(maxLength, dp[i][j])\n         return maxLength ** 2", "class Solution:\n     def maximalSquare(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         m, n = len(matrix), len(matrix[0]) if matrix else 0\n         dp = [0]*n\n         best = 0\n         for r in range(m):\n             ndp = [0]*n\n             for c in range(n):\n                 if matrix[r][c] == '1':\n                     ndp[c] = min(dp[c-1], dp[c], ndp[c-1])+1 if r and c else 1\n                     if ndp[c] > best:\n                         best = ndp[c]\n             dp = ndp\n         return best**2", "class Solution:\n     def maximalSquare(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         \n         \n         g = 0\n         #li[i][j] is the largest square whose right-lower conner lands at [i][j]\n         li = [[0 for a in x] for x in matrix] \n         \n         for i in range(0,len(matrix)):\n             for j in range(0,len(matrix[0])):\n                 c = int(matrix[i][j])\n                 if c==0:\n                     li[i][j]=0\n                     continue\n                 if i==0 or j==0:\n                     li[i][j] = c\n                     if c>g:\n                         g=c\n                     continue\n                 \n             \n                 m = min(li[i-1][j], li[i][j-1])\n                 if li[i-1][j-1]<=m:\n                     li[i][j] = 1+li[i-1][j-1]\n                 else:\n                     li[i][j] = 1+m\n                 \n                 if li[i][j]>g:\n                     g = li[i][j]\n                 \n             \n         return g**2\n                 \n                  \n                     \n                 \n", "class Solution:\n     def maximalSquare(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         if len(matrix) == 0 or len(matrix[0]) == 0:\n             return 0\n         \n         dp = [[0 for i in range(len(matrix[0]))] for i in range(len(matrix))]\n         \n         largest = 0;\n         for i in range(len(matrix)):\n             dp[i][0] = int(matrix[i][0])\n             largest = max(largest, dp[i][0])\n             \n         for j in range(len(matrix[0])):\n             dp[0][j] = int(matrix[0][j])\n             largest = max(largest , dp[0][j])\n             \n         \n         \n         for i in range(1, len(matrix)):\n             for j in range(1, len(matrix[0])):\n                 if matrix[i][j] == '1':\n                     if dp[i - 1][j] >= dp[i - 1][j - 1] and dp[i][j - 1] >= dp[i - 1][j - 1]:\n                         dp[i][j] = dp[i - 1][j - 1] + 1\n \n                     else:\n                         dp[i][j] = min(int(dp[i - 1][j]), int(dp[i][j - 1])) + 1\n                 else:\n                     dp[i][j] = 0\n                 \n                 largest = max(largest, dp[i][j])\n         \n         \n         return largest * largest\n"]