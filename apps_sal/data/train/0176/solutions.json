["class Solution:\n     def isScramble(self, A, B):\n         if len(A) != len(B) or sorted(A) != sorted(B):\n             return False\n \n         if len(A) == 1 or A == B:\n             return True\n \n         for i in range(1, len(A)):\n             if self.isScramble(A[:i], B[:i]) and self.isScramble(A[i:], B[i:]):\n                 return True\n             elif self.isScramble(A[:i], B[-i:]) and self.isScramble(A[i:], B[:-i]):\n                 return True\n         return False", "class Solution:\n \n     def __init__(self):\n         self._cache = {}\n \n     def isScramble(self, A, B):\n \n         if (A, B) in self._cache:\n             return self._cache[(A, B)]\n \n         if len(A) != len(B) or sorted(A) != sorted(B):\n             self._cache[(A, B)] = False\n             return False\n \n         if len(A) == 1 or A == B:\n             self._cache[(A, B)] = True\n             return True\n \n         for i in range(1, len(A)):\n             if self.isScramble(A[:i], B[:i]) and self.isScramble(A[i:], B[i:]):\n                 self._cache[(A, B)] = True\n                 return True\n             elif self.isScramble(A[:i], B[-i:]) and self.isScramble(A[i:], B[:-i]):\n                 self._cache[(A, B)] = True\n                 return True\n         self._cache[(A, B)] = False\n         return False", "class Solution:\n     def __init__(self):\n         self.maps = {}\n     \n     def isScramble(self, s1, s2):\n      #   print(s1, s2)\n         if (s1,s2) in self.maps:\n             return self.maps[(s1,s2)]\n         if len(s1) != len(s2) or sorted(s1) != sorted(s2):\n             self.maps[(s1,s2)] = False\n             return False\n         if s1 == s2:\n             self.maps[(s1,s2)] = True\n             return True\n         n = len(s1)\n         for sz in range(1,n):\n             if ((self.isScramble(s1[:sz], s2[:sz]) and self.isScramble(s1[sz:], s2[sz:])) or\n                (self.isScramble(s1[:sz], s2[-sz:]) and self.isScramble(s1[sz:], s2[:-sz]))):\n                 self.maps[(s1,s2)] = True\n                 return True\n         self.maps[(s1,s2)] = False\n         return False\n", "class Solution:\n     def isScramble(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         if len(s1) != len(s2):\n             return False\n         if s1 == s2:\n             return True\n         if sorted(s1) != sorted(s2): # prunning\n             return False\n         for i in range(1, len(s1)):\n             if (self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:])) or \\\n             (self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i])):\n                 return True\n         return False", "class Solution:\n     d={}\n     def isScramble(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         if (s1,s2) in self.d:\n             return self.d[(s1,s2)]\n         if len(s1)!=len(s2) or sorted(s1)!=sorted(s2):\n             return False\n         if s1==s2:\n             return True\n         for i in range(len(s1)-1):\n             if (self.isScramble(s1[:i+1],s2[:i+1]) and self.isScramble(s1[i+1:],s2[i+1:])) or \\\n                 (self.isScramble(s1[:i+1],s2[len(s1)-i-1:]) and self.isScramble(s1[i+1:],s2[:len(s1)-i-1])):\n                 self.d[(s1,s2)]=True\n                 return True\n         self.d[(s1,s2)]=False\n         return False\n", "class Solution:\n     def isScramble(self, s1, s2):\n         if len(s1) != len(s2):\n             return False\n         if s1 == s2:\n             return True\n         if sorted(s1) != sorted(s2):\n             return False\n         for i in range(1,len(s1)):\n             if (self.isScramble(s1[:i],s2[:i]) and self.isScramble(s1[i:],s2[i:])) or \\\n                     (self.isScramble(s1[:i],s2[-i:]) and self.isScramble(s1[i:], s2[:-i])):\n                 return True\n         return False", "class Solution:\n     def isScramble(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         \n         \"\"\"\n         CHECKING TWO STRINGS ARE ANAGRAMS IS FASTER BY SORTING THAN BY COUNTE (AT WHAT LEN DOES THIS FLIP)\n         RETURNING WHEN SORTED(S1) != SORTED(S2[LEFT:RIGHT+1]) GOT MY CODE FROM 1800 MS TO 150MS.\n         \"\"\"\n         \n         def getfromdictt(strr, left, right):\n             args = (strr, s2[left:right+1])\n             if args in dictt:\n                 return dictt[args]\n             res = scramble(strr, left, right)\n             dictt[args] = res\n             return res\n         \n         def putindictt(strr, left, right, val):\n             dictt[(strr, s2[left:right+1])] = val\n             return val\n         \n         def scramble(s1, left, right):\n             \n             if sorted(s1) != sorted(s2[left:right+1]):\n                 return putindictt(s1, left, right, False)\n             # if collections.Counter(s1) != collections.Counter(s2[left:right+1]): return False\n             \n             \n             if s2[left:right+1] == s1:\n                 return putindictt(s1, left, right, True)\n             \n             for i in range(len(s1)-1):\n                 leftstr, rightstr = s1[:i+1], s1[i+1:]\n                 leftmatch = getfromdictt(leftstr, left, left+i)\n                 rightmatch = getfromdictt(rightstr, left+i+1,right)\n                 \n                 if leftmatch and rightmatch:\n                     return putindictt(s1, left, right, True)\n                 \n                 flipleftmatch = getfromdictt(rightstr, left, left + len(rightstr)-1)\n                 fliprightmatch = getfromdictt(leftstr, left + len(rightstr), right)\n \n                 if flipleftmatch and fliprightmatch:\n                     return putindictt(s1, left, right, True)\n             \n             return putindictt(s1, left, right, False)\n         \n         dictt = {}\n         return scramble(s1, 0, len(s1)-1)\n", "class Solution:\n     def isScramble(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         if s1 == s2:\n             return True\n         if len(s1) != len(s2) or sorted(s1) != sorted(s2):\n             return False\n         dp = self.isScramble\n         for i in range(1, len(s1)):\n             for j in range(1, len(s2)):\n                 if (dp(s1[:i], s2[:j]) and dp(s1[i:], s2[j:])) or (dp(s1[:i], s2[j:]) and dp(s1[i:], s2[:j])):\n                     return True\n         return False", "class Solution:\n     def isScramble(self, s1, s2):\n         if sorted(s1) != sorted(s2): return False\n         if len(s1) < 4 or s1 == s2: return True\n         f = self.isScramble\n         for i in range(1, len(s1)):\n             if f(s1[:i], s2[:i]) and f(s1[i:], s2[i:]) or f(s1[:i], s2[-i:]) and f(s1[i:], s2[:len(s1) - i]):\n                 return True\n         return False\n", "class Solution:\n     def isScramble(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         if len(s1)!=len(s2) or sorted(s1)!=sorted(s2):\n             return False\n         if s1==s2:\n             return True\n         for i in range(len(s1)-1):\n             if (self.isScramble(s1[:i+1],s2[:i+1]) and self.isScramble(s1[i+1:],s2[i+1:])) or \\\n                 (self.isScramble(s1[:i+1],s2[len(s1)-i-1:]) and self.isScramble(s1[i+1:],s2[:len(s1)-i-1])):\n                 return True\n         return False\n"]