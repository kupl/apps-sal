["def countSubstr(str, n, x, y): \r\n  \r\n    tot_count = 0\r\n  \r\n    count_x = 0\r\n  \r\n    for i in range(n):  \r\n        if str[i] == x: \r\n            count_x += 1\r\n        if str[i] == y: \r\n            tot_count += count_x \r\n    return tot_count \r\n  \r\nt=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    str=input()\r\n    x='0'\r\n    y='1'\r\n    x1='1'\r\n    y1='0'\r\n    c1=countSubstr(str,n,x,y)\r\n    c2=countSubstr(str,n,x1,y1)\r\n    print(c1+c2)", "# cook your dish here\nfor _ in range(int(input())):\n    n=int(input())\n    s=input()\n    c=0\n    count01=[[0,0] for _ in range(n)]\n    for i in range(n-2,-1,-1):\n        if s[i+1]=='1':\n            count01[i][1]=count01[i+1][1]+1\n            count01[i][0]=count01[i+1][0]\n        else:\n            count01[i][0]=count01[i+1][0]+1\n            count01[i][1]=count01[i+1][1]\n    for i in range(n):\n        if s[i]=='1':\n            c+=count01[i][0]\n        else:\n            c+=count01[i][1]\n        # print(\"i=\",i)\n        # print(c)\n        # print(count01)\n    print(c)", "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=input()\r\n    total=0\r\n    zero=s.count(\"0\")\r\n    one=s.count(\"1\")\r\n    for i in range(n):\r\n        if s[i]==\"0\":\r\n            zero-=1\r\n            total+=one\r\n        else:\r\n            one-=1\r\n            total+=zero\r\n    print(total)", "t = int(input())\nfor o in range(t):\n    n = int(input())\n    p = str(input())\n    l = list(p)\n    one = l.count('1')\n    zero = l.count('0')\n    #print(one,zero)\n    count = 0\n    for i in range(n):\n        if l[i] == '1':\n            count+=zero\n            one-=1\n        else:\n            count+=one \n            zero-=1 \n    print(count)    ", "t=int(input())\r\nfor j in range(t):\r\n\r\n    n=int(input())\r\n    s=input()\r\n\r\n    count1=0\r\n    count2=0\r\n    for i in range(len(s)):\r\n        if s[i]=='1':\r\n            count1+=1\r\n    for i in range(len(s)):\r\n        if s[i]=='0':\r\n            count2+=1\r\n    # print(count1,count2)\r\n    print(count1*count2)", "# cook your dish here\nfor ad in range(int(input())):\n    n=int(input())\n    s=list(input())\n    zero=s.count(\"0\")\n    one=s.count(\"1\")\n    l=s\n    ans=0\n    for i in range(n):\n        if l[i]==\"0\":\n            zero-=1\n            ans+=one\n        else:\n            one-=1\n            ans+=zero\n    print(ans)", "for _ in range(int(input())):\n    \n    n = int(input())\n    s = input()\n    # count = 0\n    \n    # for i else:\n            \n    #         for j in range(i+1,n):\n    #             if s[j] == \"1\":\n    #                 count+=1in range(0,n):\n        \n    #     if s[i] == '1':\n            \n    #         for j in range(i+1,n):\n                \n    #             if s[j] == '0':\n    #                 count+=1\n        \n    print(s.count('0')*s.count('1'))\n", "for _ in range(int(input())):\n    \n    n = int(input())\n    s = input()\n    # count = 0\n    \n    # for i else:\n            \n    #         for j in range(i+1,n):\n    #             if s[j] == \"1\":\n    #                 count+=1in range(0,n):\n        \n    #     if s[i] == '1':\n            \n    #         for j in range(i+1,n):\n                \n    #             if s[j] == '0':\n    #                 count+=1\n        \n    print(s.count('0')*s.count('1'))\n", "def fac(x):\r\n    x=len(x)\r\n    return int(((x-1)*(x))/2)\r\n\r\n\r\nt= int(input())\r\nfor o in range(t):\r\n    n=int(input())\r\n    s=input()\r\n    a=s.split(\"1\")\r\n    a=\"\".join(a)\r\n    b=s.split(\"0\")\r\n    b=\"\".join(b)\r\n    print(fac(s)-fac(a)-fac(b),)", "for t in range(int(input())):\n    def csbstr(str,n,a,b):\n        tot,c=0,0\n        for i in range(n):\n            if(str[i]==a):\n                c+=1\n            if(str[i]==b):\n                tot+=c\n        return tot\n\n    n=int(input())\n    str=input()\n    count1=csbstr(str,n,\"1\",\"0\")\n    count2=csbstr(str,n,\"0\",\"1\")\n    print(count1+count2)", "# cook your dish here\ndef fac(x):\n    x=len(x)\n    return int(((x-1)*(x))/2)\n\n\nt= int(input())\nfor o in range(t):\n    n=int(input())\n    s=input()\n    a=s.split(\"1\")\n    a=\"\".join(a)\n    b=s.split(\"0\")\n    b=\"\".join(b)\n    print(fac(s)-fac(a)-fac(b),)", "\nfor x in range(int(input())):\n    l=int(input())\n    s=input()\n    z=0\n    for x in s:\n        if x=='0':\n            z+=1\n    print(z*(l-z))        \n", "\r\ndef fac(x):\r\n    x=len(x)\r\n    return int(((x-1)*(x))/2)\r\n\r\n\r\nt= int(input())\r\nfor o in range(t):\r\n    n=int(input())\r\n    s=input()\r\n    a=s.split(\"1\")\r\n    a=\"\".join(a)\r\n    b=s.split(\"0\")\r\n    b=\"\".join(b)\r\n    print(fac(s)-fac(a)-fac(b),)\r\n", "# cook your dish here\nfor _ in range(int(input())):\n    N = int(input())\n    l = input()\n    arr1 = []\n    arr2 = []\n    #total = sum(arr1)\n    #print(total)\n    count1 = 0\n    count2 = 0\n    for i in range(len(l)-1, -1, -1):\n        if(l[i] == '0'):\n            arr1.append(count1)\n            count2+=1\n        elif(l[i] == '1'):\n            count1+=1\n            arr2.append(count2)\n    print(sum(arr1)+sum(arr2))", "for _ in range(int(input())):\n    N = int(input())\n    binstr = input()\n    a = binstr.count('1')\n    b = binstr.count('0')\n    print(a*b)", "for _ in range(int(input())):\n    N = int(input())\n    binstr = input()\n    print(binstr.count('1')*binstr.count('0'))", "testcase=int(input())\r\nwhile(testcase!=0):\r\n    testcase-=1\r\n    n=int(input())\r\n    l=input()\r\n    print(l.count('1')*l.count('0'))", "for _ in range(int(input())):N = int(input());binstr = input();print(binstr.count('1')*binstr.count('0'))", "# def countSubStr(st,n):\r\n# \tres = 0\r\n# \tfor i in range(0,n):\r\n# \t\tif (st[i] == '1'):\r\n# \t\t\tfor j in range(i+1, n) :\r\n# \t\t\t\tif (st[j] == '0'):\r\n# \t\t\t\t\tres += 1\r\n# \t\tif (st[i] == '0'):\r\n# \t\t\tfor j in range(i+1, n):\r\n# \t\t\t\tif(st[j] == '1'):\r\n# \t\t\t\t\tres += 1\r\n# \treturn res \r\n# for _ in range(int(input())):\r\n# \tN = int(input());binstr = input()\r\n# \t#for any N, number of contigious subarrays will be sum of all i in range(1,N + 1)\r\n# \tprint(countSubStr(list(binstr),N),end=\"\") #TLE (obviously, since it's O(N**2))\r\nfor _ in range(int(input())):\r\n\tN = int(input());binstr = input()\r\n\tprint(binstr.count('1')*binstr.count('0'))", "for _ in range(int(input())):\n    n = int(input())\n    arr = input()\n    ans = 0\n    \n    print(arr.count(\"1\")*arr.count(\"0\"))\n    # for i in range(0, n-1):\n    #     if arr[i] == \"1\":\n    #         ans += arr[i+1:].count(\"0\")\n    #     else:\n    #         ans += arr[i+1:].count(\"1\")\n    # print(ans)\n", "from functools import lru_cache\r\nimport sys\r\ntry:\r\n    from cp import input\r\nexcept:\r\n    def input():\r\n        return sys.stdin.readline()\r\ntry:\r\n    import numpy as np\r\nexcept:\r\n    pass\r\nimport math\r\nimport copy\r\nimport random\r\nfrom copy import deepcopy\r\n# def input(): return sys.stdin.readline()\r\ndef itarr(arr): return list(range(len(arr)))\r\ndef mp(): return list(map(int, input().split()))\r\ndef lmp(): return list(map(int, input().strip().split()))\r\ndef inp(): return int(input())\r\n\r\n\r\nMOD = 1000000007\r\n\r\n\r\nsys.setrecursionlimit(100000)\r\nsys.settrace\r\ninf_p = float('inf')\r\ninf_n = float('-inf')\r\n\r\ndsu=[]\r\n\r\ndef find(n):\r\n    if n==dsu[n]:\r\n        return n\r\n    tmp=find(dsu[n])\r\n    dsu[n]=tmp\r\n    return tmp\r\n\r\ndef union(a,b):\r\n    a=find(a)\r\n    b=find(b)\r\n    if a!=b:\r\n        dsu[b]=a\r\n\r\nadj=[]\r\nvis=[]\r\nwt=[]\r\nMAXE=0\r\nMAXO=0\r\nans=0\r\n\r\ndef even_parity(n):\r\n    return (bin(n)[2:].count('1')%2)==0\r\ndef odd_parity(n):\r\n    return not even_parity(n)\r\n\r\ndef dfse(curr_node,p):\r\n    nonlocal MAXE, MAXO,vis,ans\r\n\r\n    for node in adj[curr_node]:\r\n        if vis[node]==0 :\r\n            if even_parity(wt[node-1]):\r\n                dfs(node,num)\r\n        \r\ndef dfso(curr_node,p):\r\n    nonlocal MAXE, MAXO,vis,ans\r\n    \r\n    for node in adj[curr_node]:\r\n        if vis[node]==0 :\r\n            if odd_parity(wt[node-1]):\r\n                dfs(node,num)\r\n\r\ndef main():\r\n    n=inp()\r\n    s=input().strip()\r\n    if len(s)==0:\r\n        s=input().strip\r\n    ones=[0]* (n+1)\r\n    zeros=[0]* (n+1)\r\n    one =0 \r\n    zero=0\r\n    for i in range(len(s)):\r\n        ones[i]=one\r\n        zeros[i]=zero\r\n        if s[i]=='1':\r\n            one+=1\r\n        else:\r\n            zero+=1 \r\n    tot=0\r\n    # print(ones,zeros)\r\n    for i in range(n-1,0,-1):\r\n        if s[i]=='1':\r\n            tot+=zeros[i]\r\n        else:\r\n            tot+=ones[i]\r\n        # print(i)\r\n    print(tot)\r\n\r\n# main()\r\nfor i in range(inp()):\r\n    main()\r\n# cook your dish here\r\n", "#Coded By Ujjwal Bharti\ntulu = int(input())\nfor _ in range(tulu):\n    n = int(input())\n    string = input()\n    flag = False\n    counter = 0\n    frequency = 1\n    for i in string:\n        if i == \"0\" and flag==False:\n            flag=True\n            continue\n        if flag and i == \"0\":\n            frequency += 1\n        if flag and i == \"1\":\n            counter += (frequency)\n    flag = False\n    frequency = 1\n    for i in string:\n        if i == \"1\" and flag==False:\n            flag=True\n            continue\n        #print(frequency)\n        if flag and i==\"1\":\n            frequency += 1\n        if flag and i == \"0\":\n            counter += frequency\n    print(counter)", "n = int(input())\r\n\r\nwhile n>0:\r\n    l = int(input())\r\n    s = input()\r\n    zero = 0\r\n    one = 0\r\n    subs = 0\r\n    for i in range(l):\r\n        if s[i]=='0':\r\n            zero+=1\r\n        else:\r\n            one+=1\r\n    subs=one*zero\r\n    print(subs)\r\n\r\n    n-=1"]