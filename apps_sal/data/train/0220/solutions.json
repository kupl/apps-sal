["class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        # feel like its sliding window max\n        \n        window, max_window = 0, 0\n        \n        # init first window\n        for i in range(X):\n            if grumpy[i]: window += customers[i]\n        max_window = window\n        \n        # Sliding Window\n        for i in range(X,len(grumpy)):\n            if grumpy[i-X]: window -= customers[i-X]\n            if grumpy[i]: window += customers[i]\n                \n            if window > max_window: max_window = window\n        \n        # \n        sum = 0\n        for i in range(len(grumpy)):\n            if grumpy[i] == 0: sum += customers[i]\n        return sum + max_window", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        ans=0\n        \n        cust=0\n        for i in range(len(customers)):\n            if grumpy[i]==0:\n                cust+=customers[i]\n                customers[i]=0\n        \n        cur=0\n        best=0\n        \n        for i,c in enumerate(customers):\n            cur+=c\n            if i>=X:\n                cur-=customers[i-X]\n            best=max(best,cur)\n        return cust+best\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        \n        wn=min(len(customers),X)\n        print(('wn',wn))\n        wList=[0]*len(customers)\n        \n        for i in range(len(customers)):\n            if grumpy[i]:\n                wList[i]=customers[i]\n            else:\n                wList[i]=0\n        \n        print(('list',wList))\n        \n        mwsum=sum(wList[0:wn])\n        nws=mwsum\n        print(mwsum)\n        for j in range(wn,len(wList)):\n            \n            nws=nws-wList[j-wn]+wList[j] if wn>1 else wList[j] \n            mwsum=max(mwsum,nws)\n            print(nws)\n            \n        for i in range(len(customers)):\n            if grumpy[i]==0:\n                mwsum+=customers[i]\n        return mwsum\n            \n       \n                \n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        no_tech = [0] * len(customers)\n        tech = [0] * len(customers)\n        \n        if len(customers) <= X:\n            return sum(customers)\n        \n        if not grumpy[0]:\n            no_tech[0] = customers[0]\n        tech[0] = customers[0]\n        \n        for i in range(1,len(customers)):\n            if grumpy[i]:\n                no_tech[i] = no_tech[i-1]\n                tech[i] = max(sum(customers[max(0, i-X+1):i+1]) + no_tech[i-X], tech[i-1], no_tech[i])\n            else:\n                no_tech[i] = no_tech[i-1] + customers[i]\n                tech[i] = tech[i-1] + customers[i]\n                \n            # print(customers[max(0, (i-X) + 1) : i+1])\n            \n            # print(tech)\n            # print(no_tech)\n            # print()\n                \n        return tech[-1]", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        base = sum(c for c, g in zip(customers, grumpy) if g == 0)\n        ncus = [c if g == 1 else 0 for c, g in zip(customers, grumpy)]\n        length = len(customers)\n        return base + max(sum(ncus[i:i+X]) for i in range(0, length-X+1))", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        base = sum(c for c, g in zip(customers, grumpy) if g == 0)\n        ncus = [c if g == 1 else 0 for c, g in zip(customers, grumpy)]\n        length = len(customers)\n        return base + max(sum(ncus[i:i+X]) for i in range(0, length-X+1))\n            \n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        n = len(customers)\n        res = 0\n        for k in range(len(customers)):\n            if (grumpy[k] == 0):\n                res = res + customers[k]\n        diff = []\n        for j in range(len(customers)):\n            diff.append(customers[j]*grumpy[j])\n        tem = 0\n        for x in range(n - X + 1):\n            tem = max(tem, sum(diff[x:x+X]))\n        return res + tem\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        gc = []\n        l = len(customers)\n        for i in range(l):\n            gc.append(customers[i]*grumpy[i])\n            \n        # print(gc)\n        ms = 0\n        mi = -1\n        for i in range(l-X+1):\n            s = sum(gc[i:i+X])\n            if s>ms:\n                ms = s\n                mi = i\n        allowed = range(mi, mi+X)\n        ans = 0\n        for i in range(l):\n            if grumpy[i] == 0 or i in allowed:\n                ans+= customers[i]\n                \n        # print(ans)\n        return ans", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        base_count = 0\n        bonus_array = []\n        for i,j in zip(customers,grumpy):\n            if j == 0:\n                base_count += i\n            bonus_array.append(i*j)\n        bonus = 0\n        \n        for i in range(len(customers)-X+1):\n            tmp_bonus = 0\n            tmp_bonus = sum(bonus_array[i:(i+X)])\n            bonus = max(bonus,tmp_bonus)\n        \n        return base_count + bonus", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X>len(customers):\n            return sum(customers)\n        sum1 = [customers[0]]\n        sum2 = []\n        if grumpy[0]==0:\n            sum2.append(customers[0])\n        else:\n            sum2.append(0)\n            \n        for i in range(1,len(customers)):\n            sum1.append(sum1[-1]+customers[i])\n            if grumpy[i]==0:\n                sum2.append(sum2[-1]+customers[i])\n            else:\n                sum2.append(sum2[-1])\n        \n        maxi=sum1[X-1]+ (sum2[-1]-sum2[X-1])\n        for i in range(1,len(customers)-X+1):\n            if (sum1[i+X-1]-sum1[i-1])+(sum2[-1]-sum2[i+X-1]+sum2[i-1])>maxi:\n                maxi = (sum1[i+X-1]-sum1[i-1])+(sum2[-1]-sum2[i+X-1]+sum2[i-1])\n        \n        print(sum1,sum2)\n        return maxi", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        inital_sum = 0\n        tmp_sum = 0\n        res_sum = 0\n        length = len(customers)\n        for i in range(0,len(customers)):\n            if grumpy[i] == 0:\n                inital_sum += customers[i]\n        tmp_sum = inital_sum\n        for j in range(0, X):\n            if grumpy[j] == 1:\n                tmp_sum = tmp_sum + customers[j]\n        res_sum = max(tmp_sum, res_sum)\n        k = 1\n        while ((k+X-1) < length):\n            if grumpy[k-1] == 1:\n                tmp_sum = tmp_sum - customers[k-1]\n            if grumpy[k+X-1] == 1:\n                tmp_sum = tmp_sum + customers[k+X-1]\n            k += 1\n            res_sum = max(tmp_sum, res_sum)\n        return res_sum\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        totalCusts = 0\n        for idx,custs in enumerate(customers):\n            if grumpy[idx] == 0:\n                totalCusts += customers[idx]\n                customers[idx] = 0\n        rollingSum = 0\n        maxSum = 0\n        for i,n in enumerate(customers):\n            rollingSum += n\n            if i-X >= 0:\n                rollingSum -= customers[i-X]\n            maxSum = max(maxSum, rollingSum)\n        return maxSum+totalCusts\n        \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        curr_sum = sum([i * abs(j - 1) for i, j in zip(customers, grumpy)])\n        max_sum = curr_sum\n        \n        # first one, check all\n        for i in range(X):\n            curr_sum += customers[i] * grumpy[i]\n            max_sum = max(max_sum, curr_sum)\n            \n        for i in range(1, len(customers) - X + 1):\n            max_sum = max(max_sum, curr_sum)\n            curr_sum -= customers[i - 1] * grumpy[i - 1]\n            curr_sum += customers[i+X - 1] * grumpy[i+X - 1]\n            \n        return max(max_sum, curr_sum)\n        \n", "class Solution:\n#   def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n#     satisfiedCount = 0\n    \n#     for i in range(len(customers)):\n#       if grumpy[i] == 0:\n#         satisfiedCount += customers[i]\n#         customers[i] = 0\n    \n#     maxPotentialCount = 0\n#     val = 0\n    \n#     for i in range(len(customers)):\n#       if i < X:\n#         val += customers[i]\n#         continue\n      \n#       maxPotentialCount = max(maxPotentialCount, val)\n#       val -= customers[i - X]\n#       val += customers[i]\n    \n#     maxPotentialCount = max(maxPotentialCount, val)\n    \n#     return satisfiedCount + maxPotentialCount\n  \n  \n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n      i = win_of_make_satisfied = satisfied = max_make_satisfied = 0\n      for c, g in zip(customers, grumpy):\n        satisfied += (1 - g) * c\n        win_of_make_satisfied += g * c\n        if i >= X:\n          win_of_make_satisfied -= grumpy[i - X] * customers[i - X]\n        max_make_satisfied = max(win_of_make_satisfied, max_make_satisfied)  \n        i += 1    \n      return satisfied + max_make_satisfied", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        satisfiedCustomers = 0\n        for i in range(len(customers)):\n            if grumpy[i] == 0:\n                satisfiedCustomers += customers[i]\n                customers[i] = 0\n        i = 0\n        unsatisfiedWindow = 0\n        while i < X:\n            unsatisfiedWindow += customers[i]\n            i += 1\n        \n        maxUnsatisfiedWindow = unsatisfiedWindow\n        while i < len(customers):\n            unsatisfiedWindow -= customers[i-X]\n            unsatisfiedWindow += customers[i]\n            maxUnsatisfiedWindow = max(maxUnsatisfiedWindow, unsatisfiedWindow)\n            i += 1\n            \n        return satisfiedCustomers + maxUnsatisfiedWindow\n            \n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        max_satisfaction = sum(customers)\n        actual_satisfaction = sum(int(not g) * s for g,s in zip(grumpy, customers))\n        \n        max_s_x = sum(customers[:X])\n        actual_s_x = sum(int(not g) * s for g,s in zip(grumpy[:X], customers[:X]))\n        \n        ans = actual_satisfaction - actual_s_x + max_s_x\n        for i in range(X, len(customers)):\n            max_s_x += customers[i] - customers[i - X]\n            actual_s_x += (customers[i] * int(not grumpy[i])) - (customers[i - X] * int(not grumpy[i - X]))\n            ans = max(ans, actual_satisfaction - actual_s_x + max_s_x)\n        return ans", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        mp = lp = sum(customers[i] for i in range(X) if grumpy[i])\n        mi = 0\n        for i in range(1, len(grumpy) - X + 1):\n            n = customers[i+X-1] if grumpy[i+X-1] else 0\n            o = customers[i-1] if grumpy[i-1] else 0\n            lp += (n - o)\n            if lp > mp:\n                mp = lp\n                mi = i\n        res = sum([customers[i] for i in range(len(grumpy)) if not grumpy[i]])\n        return res + mp\n                \n                \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        tmpCustomers = customers.copy()\n        totalSatisfied = 0\n        for i in range(len(grumpy)):\n            if grumpy[i] == 0:\n                totalSatisfied += tmpCustomers[i]\n\n                tmpCustomers[i] = 0\n                \n        \n        window = 0\n        best = 0\n        \n        for i in range(len(tmpCustomers)):\n            window += tmpCustomers[i]\n            if i >= X:\n                window -= tmpCustomers[i-X]\n            best = max(window,best)\n        return totalSatisfied+best\n                \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        grumpy, grum_sum, cus_sum = [i ^ 1 for i in grumpy], [0] * len(customers), [0] * len(customers)\n        grumpy_customers = [customers[i] * grumpy[i] for i in range(len(customers))]\n        for i, n in enumerate(customers): cus_sum[i] = n + (cus_sum[i - 1] if i > 0 else 0)\n        for i, n in enumerate(grumpy_customers): grum_sum[i] = n + (grum_sum[i - 1] if i > 0 else 0)\n        return max((grum_sum[i - 1] if i > 0 else 0) + cus_sum[i + X - 1] - (cus_sum[i - 1] if i > 0 else 0) + grum_sum[len(customers) - 1] - grum_sum[i + X - 1] for i in range(0, len(customers) - X + 1))", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X == len(customers):\n            return sum(customers)\n        sum_not_grumpy = sum(customers[:X])\n        sum_normal = sum([x*(1-y) for x,y in zip(customers,grumpy)][X:]) #sum(mults[X:])\n        \n        max_customers = sum_not_grumpy+sum_normal\n        for i in range(1,len(customers)-X+1):\n            sum_not_grumpy -= customers[i-1]\n            sum_not_grumpy += customers[i+X-1]\n            sum_normal += customers[i-1]*(1 - grumpy[i-1])\n            sum_normal -= customers[i+X-1]*(1 - grumpy[i+X-1])\n            max_customers = max(max_customers, sum_not_grumpy+sum_normal)\n\n        return max_customers\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        # sliding window of possible grumping times\n        satisfied = 0\n        n = len(customers)\n        grumpySum = 0\n        \n        for i in range(X):\n            satisfied += customers[i] if grumpy[i] == 0 else 0\n            \n            saved = customers[i] if grumpy[i] == 1 else 0\n            grumpySum += saved\n\n        noGrump = grumpySum\n        for i in range(X, n):\n            satisfied += customers[i] if not grumpy[i] else 0\n            \n            saved = customers[i] if grumpy[i] else 0\n            abandon = customers[i - X] if grumpy[i - X] else 0\n            grumpySum = grumpySum + saved - abandon\n            noGrump = max(noGrump, grumpySum)\n\n        return satisfied + noGrump\n       \n          \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        gain = 0\n        for i in range(X):\n            if grumpy[i]:\n                gain += customers[i]\n        max_gain = gain\n        for i in range(X, len(customers)):\n            gain = gain + customers[i]*grumpy[i] - customers[i-X]*grumpy[i-X]\n            max_gain = max(max_gain, gain)\n        statify = 0\n        for i in range(len(customers)):\n            statify += customers[i]*(1-grumpy[i])\n        return statify + max_gain", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        n, window_sum = len(customers), 0        \n        for i in range(n):\n            if i < X:\n                window_sum += customers[i]\n            else:\n                window_sum += (1 - grumpy[i]) * customers[i]\n        \n        result = window_sum # \u6c42\u5f97\u6307\u91dd\u672a\u6ed1\u52d5\u524d\u7e3d\u548c\n        left, right = 0, X\n        \n        while right < n:\n            if grumpy[right] == 1:\n                window_sum += customers[right]\n            if grumpy[left] == 1:\n                window_sum -= customers[left]\n            result = max(result, window_sum)\n            left += 1\n            right += 1\n            \n        return result\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        satisfy = sum(cust for cust, grump in zip(customers, grumpy) if grump == 0)\n        max_extra = extra = sum(cust for cust, grump in zip(customers[:X], grumpy[:X]) if grump == 1)\n        start, end = 0, X\n        n = len(customers)\n        while end < n:\n            extra += grumpy[end] * customers[end]\n            extra -= grumpy[start] * customers[start]\n            max_extra = max(max_extra, extra)\n            start += 1\n            end += 1\n        return satisfy + max_extra\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        n = len(customers)\n        if n == 0:\n            return 0\n        \n        running_sum = 0\n        \n        for i in range(n):\n            if i < X:\n                running_sum += customers[i]\n            else:\n                running_sum += customers[i] * (1-grumpy[i])\n                \n        left, right = 0, X\n        ans = running_sum\n        \n        while right < n:\n            if grumpy[right] == 1:\n                running_sum += customers[right]\n            right += 1\n            \n            if grumpy[left] == 1:\n                running_sum -= customers[left]\n            \n            left += 1\n        \n            ans = max(ans, running_sum)\n            \n        return ans", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        n = len(customers)\n        cnt = 0\n        acc = [0]\n        \n        for i in range(n):\n            if grumpy[i]:\n                acc.append(acc[-1]+customers[i])\n            else:\n                acc.append(acc[-1])\n                cnt += customers[i]\n        \n        ans = cnt\n        \n        for i in range(n-X+1):\n            ans = max(ans, cnt+acc[i+X]-acc[i])\n        \n        return ans", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        inital_sum = 0\n        tmp_sum = 0\n        res_sum = 0\n        length = len(customers)\n        for i in range(0,len(customers)):\n            if grumpy[i] == 0:\n                inital_sum += customers[i]\n        tmp_sum = inital_sum\n        print (tmp_sum)\n        for j in range(0, X):\n            if grumpy[j] == 1:\n                tmp_sum = tmp_sum + customers[j]\n        print (tmp_sum)\n        res_sum = max(tmp_sum, res_sum)\n        print (res_sum)\n        k = 1\n        while ((k+X-1) < length):\n            if grumpy[k-1] == 1:\n                tmp_sum = tmp_sum - customers[k-1]\n            if grumpy[k+X-1] == 1:\n                tmp_sum = tmp_sum + customers[k+X-1]\n            k += 1\n            res_sum = max(tmp_sum, res_sum)\n        return res_sum\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        ans = 0\n        L = len(grumpy)\n        if X >= L:\n            return sum(customers)\n        for i in range(L):\n            if grumpy[i] == 0:\n                ans += customers[i]\n        res = cur_sum = 0\n        for end in range(X):\n            if grumpy[end] == 1:\n                cur_sum += customers[end]\n        res = cur_sum\n        for end in range(X, L):\n            if grumpy[end] == 1:\n                cur_sum += customers[end]\n            if grumpy[end - X] == 1:\n                cur_sum -= customers[end - X]\n            res = max(res, cur_sum)\n        return ans + res", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n      already_happy = sum(c for c, h in zip(customers, grumpy) if not h)\n      \n      running = sum(c for c, h in zip(customers[:X], grumpy[:X]) if h)\n      \n      max_happy = running\n      for i in range(1, len(customers) - X + 1):\n        if grumpy[i - 1] == 1:\n          running -= customers[i - 1]\n        if grumpy[i + X - 1] == 1:\n          running += customers[i + X - 1]\n        max_happy = max(running, max_happy)  \n      \n      return max_happy + already_happy\n          \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        \n        \n        L = len(grumpy)\n        if L == X:\n            return sum(customers)\n        # print(L,X)\n        grummpyCustomer = [0 if grumpy[i] == 1 else customers[i] for i in range(L) ]\n        for i in range(1,L):\n            customers[i] += customers[i-1]\n        \n        \n        for i in range(1,L):\n            grummpyCustomer[i] += grummpyCustomer[i-1]\n        \n        \n        \n        result = 0\n        \n        maxSum = grummpyCustomer[-1]\n        for i in range(X, L):\n            result = max(result, customers[i] - customers[i-X] + maxSum - grummpyCustomer[i] +  grummpyCustomer[i-X])\n            # print(result)\n            \n    \n        for i in reversed(list(range(1,L))):\n            customers[i] -= customers[i-1]\n        # print(customers)\n        \n        grummpyCustomer = [0 if grumpy[i] == 1 else customers[i] for i in range(L) ]\n        \n        for i in reversed(list(range(L-1))):\n            customers[i] += customers[i+1]\n        \n        for i in reversed(list(range(L-1))):\n            # print(i)\n            grummpyCustomer[i] += grummpyCustomer[i+1]\n        \n        # print(customers[0] - customers[0+X] + grummpyCustomer[0+X])\n        maxSum = grummpyCustomer[0]\n        for i in reversed(list(range(L-X))):\n            # print(i,'ok')\n            result = max(result, customers[i] - customers[i+X] + maxSum - grummpyCustomer[i] +  grummpyCustomer[i+X])\n            \n        return result\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], k: int) -> int:\n        n=len(customers)\n        res=sum([customers[i]*(1-grumpy[i]) for i in range(n)])    # the customers you can obtain while non grumpy\n        best_gain=sum([customers[i]*grumpy[i] for i in range(k)])    # first window\n        gain=best_gain\n        for i in range(k,n):\n            gain+=customers[i]*grumpy[i]-customers[i-k]*grumpy[i-k]  # add new, kick out old\n            best_gain=max(gain,best_gain)    \n        return res+best_gain", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        max_satisfaction = sum(customers)\n        actual_satisfaction = sum(int(not g) * s for g,s in zip(grumpy, customers))\n        \n        max_s_x = sum(customers[:X])\n        actual_s_x = sum(int(not g) * s for g,s in zip(grumpy[:X], customers[:X]))\n        \n        ans = actual_satisfaction - actual_s_x + max_s_x\n        print(max_satisfaction, actual_satisfaction)\n        print('sssssssss')\n        for i in range(X, len(customers)):\n            print(max_s_x, actual_s_x, customers[i], customers[i - X])\n            max_s_x += customers[i] - customers[i - X]\n            actual_s_x += (customers[i] * int(not grumpy[i])) - (customers[i - X] * int(not grumpy[i - X]))\n            ans = max(ans, actual_satisfaction - actual_s_x + max_s_x)\n        return ans", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        curr = 0\n        max1 = 0\n        left =0\n        for i in range(len(customers)):\n            if i <X:\n                curr += customers[i]\n            else:\n                if grumpy[i] == 0:\n                    curr+= customers[i]\n        max1 = curr\n        for i in range(X,len(customers)):\n            if grumpy[i] == 1:\n                curr+=customers[i]\n            if grumpy[left] == 1:\n                curr-=customers[left]\n            left+=1\n            max1 = max(max1,curr)\n        return max1", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X == len(customers):\n            return sum(customers)\n        for i in range(len(grumpy)):\n            grumpy[i] = 0 if grumpy[i] == 1 else 1\n        mults = [x*y for x,y in zip(customers,grumpy)]\n        sum_not_grumpy = sum(customers[:X])\n        not_grumpy = [sum_not_grumpy] \n        for i in range(1,len(customers)-X+1):\n            sum_not_grumpy -= customers[i-1]\n            sum_not_grumpy += customers[i+X-1]\n            not_grumpy.append(sum_not_grumpy)\n        \n        sum_normal = sum(mults[X:])\n        normal_custs = [sum_normal]\n        for i in range(1,len(mults)-X+1):\n            sum_normal += mults[i-1]\n            sum_normal -= mults[i+X-1]\n            normal_custs.append(sum_normal)\n        \n        print(not_grumpy)\n        print(normal_custs)\n        return max([x+y for x,y in zip(not_grumpy,normal_custs)])\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        old = 0\n        for i in range(len(customers)):\n            if grumpy[i] == 0:\n                old += customers[i]\n        l, r, res = 0, 0, 0\n        while r < len(customers):\n            if grumpy[r] == 1:\n                old += customers[r]\n            if r >= X:\n                if grumpy[l] == 1:\n                    old -= customers[l]\n                l += 1\n            res = max(res, old)\n            r += 1\n        return res", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        # we want to find the biggest loss of satisfaction in a X-hr period throughout the day.\n        if len(customers) == X: return sum(customers)\n        maxLoss = 0\n        total = sum([customers[i]*(1-grumpy[i]) for i in range(len(grumpy))])\n        print(total)\n        loss = sum([grumpy[i]*customers[i] for i in range(X)])\n        maxLoss = loss\n        for i in range(X, len(customers)):\n            loss += grumpy[i]*customers[i]\n            loss -= grumpy[i-X]*customers[i-X]\n            maxLoss = max(maxLoss, loss)\n        total += maxLoss\n        return total\n        \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if not customers:\n            return 0\n        can_be_always_happy = X == len(customers)\n        customers_lost = [0] * (len(customers) + 1)\n        total_customers_lost = 0\n        total_satisfied = 0\n        for idx, customer in enumerate(customers):\n            if grumpy[idx] == 1 and not can_be_always_happy:\n                total_customers_lost += customers[idx]\n            else:\n                total_satisfied += customers[idx]\n            customers_lost[idx + 1] = total_customers_lost\n\n        max_gain = 0\n        for i in range(X, len(customers_lost)):\n            gain = customers_lost[i] - customers_lost[i - X]\n            max_gain = max(gain, max_gain)\n\n        return total_satisfied + max_gain", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X == len(customers):\n            return sum(customers)\n        for i in range(len(grumpy)):\n            grumpy[i] = 0 if grumpy[i] == 1 else 1\n        mults = [x*y for x,y in zip(customers,grumpy)]\n        sum_not_grumpy = sum(customers[:X])\n        sum_normal = sum(mults[X:])\n        \n        max_customers = sum_not_grumpy+sum_normal\n        for i in range(1,len(customers)-X+1):\n            sum_not_grumpy -= customers[i-1]\n            sum_not_grumpy += customers[i+X-1]\n            sum_normal += mults[i-1]\n            sum_normal -= mults[i+X-1]\n            max_customers = max(max_customers, sum_not_grumpy+sum_normal)\n\n        return max_customers\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X == len(customers):\n            return sum(customers)\n        for i in range(len(grumpy)):\n            grumpy[i] = 0 if grumpy[i] == 1 else 1\n        mults = [x*y for x,y in zip(customers,grumpy)]\n        sum_not_grumpy = sum(customers[:X])\n        #not_grumpy = [sum_not_grumpy] \n        sum_normal = sum(mults[X:])\n        #normal_custs = [sum_normal]\n        \n        max_customers = sum_not_grumpy+sum_normal\n        for i in range(1,len(customers)-X+1):\n            sum_not_grumpy -= customers[i-1]\n            sum_not_grumpy += customers[i+X-1]\n            sum_normal += mults[i-1]\n            sum_normal -= mults[i+X-1]\n            max_customers = max(max_customers, sum_not_grumpy+sum_normal)\n\n        return max_customers\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        saved = 0\n        max_saved = 0\n        sumTotal = 0\n        for i, value in enumerate(customers):\n            if i - X >= 0 and grumpy[i - X]:\n                saved -= customers[i - X]\n            if grumpy[i]:\n                saved += value\n            else:\n                sumTotal += value\n            max_saved = max(max_saved, saved)\n            print((saved,max_saved))\n            # print(saved, max_saved, sumTotal)\n        return sumTotal + max_saved\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        to_ret = sum([c for c, g in zip(customers, grumpy) if g == 0])\n        \n        mt = mf = sum([c for c, g in zip(customers[:X], grumpy[:X]) if g == 1])\n        for t in range(X, len(customers)) :\n            if grumpy[t] == 1 :\n                mt += customers[t]\n            if grumpy[t-X] == 1 :\n                mt -= customers[t-X]\n            mf = max(mf, mt)\n        return to_ret + mf", "class Solution:\n  def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n    satisfiedCount = 0\n    \n    for i in range(len(customers)):\n      if grumpy[i] == 0:\n        satisfiedCount += customers[i]\n        customers[i] = 0\n    \n    maxPotentialCount = 0\n    val = 0\n    \n    for i in range(len(customers)):\n      if i < X:\n        val += customers[i]\n        continue\n      \n      maxPotentialCount = max(maxPotentialCount, val)\n      val -= customers[i - X]\n      val += customers[i]\n    \n    maxPotentialCount = max(maxPotentialCount, val)\n    \n    return satisfiedCount + maxPotentialCount", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        i = win_of_make_satisfied = satisfied = max_make_satisfied = 0\n        for c, g in zip(customers, grumpy):\n            satisfied += (1 - g) * c\n            win_of_make_satisfied += g * c\n            if i >= X:\n                win_of_make_satisfied -= grumpy[i - X] * customers[i - X]\n            max_make_satisfied = max(win_of_make_satisfied, max_make_satisfied)  \n            i += 1    \n        return satisfied + max_make_satisfied\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        lb, ub = 0, X-1\n        total = sum([customers[i] * (1 - grumpy[i]) for i in range(len(customers))])\n        \n        saved = 0\n        for i in range(X):\n            if grumpy[i]: saved += customers[i]\n                \n        ans = total + saved\n        while ub + 1 < len(grumpy):\n            lb, ub = lb + 1, ub + 1\n            if grumpy[lb-1]:\n                saved -= customers[lb-1]\n            if grumpy[ub]:\n                saved += customers[ub]\n            ans = max(ans, total+saved)\n        return ans", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        gains = [x if grumpy[i] == 1 else 0 for (i, x) in enumerate(customers)]\n        fact = [x if grumpy[i] == 0 else 0 for (i, x) in enumerate(customers)]\n        \n        if X > len(gains):\n            return sum(customers)\n        \n        current_sum = sum(gains[:X])\n        max_gain = current_sum\n        for i in range(1, len(gains) - X + 1):\n            current_sum = current_sum - gains[i - 1] + gains[i + X - 1]\n            max_gain = max(max_gain, current_sum)\n        \n        return sum(fact) + max_gain\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        n = len(grumpy)\n        if X >= n:\n            return sum(customers)\n        init = sum([customers[i]*(1-grumpy[i]) for i in range(n)])\n        \n        for j in range(X):\n            if grumpy[j] == 1:\n                init += customers[j]\n        max_l = init        \n        temp = init\n        for i in range(1, n-X+1):\n            temp -= grumpy[i-1]*customers[i-1]\n            temp += grumpy[i+X-1]*customers[i+X-1]\n            max_l = max(max_l, temp)\n            \n        return max_l", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        initial = sum(num for day, num in enumerate(customers) if grumpy[day] == 0)\n        curr_tricked = 0\n        tricked = 0\n        for ind, num in enumerate(customers):\n            if ind >= X and grumpy[ind-X] == 1:\n                curr_tricked -= customers[ind-X]\n            if grumpy[ind] == 1:\n                curr_tricked += customers[ind]\n            tricked = max(tricked, curr_tricked)\n        return initial + tricked", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        t=0\n        for i in range(len(grumpy)):\n            if grumpy[i]==0:\n                t+=customers[i]\n                customers[i]=0\n\n        n=sum(customers[:X])\n        m=n\n        for i in range(1,len(customers)-X+1):\n            m=m+customers[i+X-1]-customers[i-1]\n            n=max(m,n)\n        return n+t", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X == len(customers):\n            return sum(customers)\n        sum_not_grumpy = sum(customers[:X])\n        sum_normal = sum([x*(1-y) for x,y in zip(customers[X:],grumpy[X:])]) \n        \n        max_customers = sum_not_grumpy+sum_normal\n        for i in range(1,len(customers)-X+1):\n            sum_not_grumpy -= customers[i-1]\n            sum_not_grumpy += customers[i+X-1]\n            sum_normal += customers[i-1]*(1 - grumpy[i-1])\n            sum_normal -= customers[i+X-1]*(1 - grumpy[i+X-1])\n            max_customers = max(max_customers, sum_not_grumpy+sum_normal)\n\n        return max_customers\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        satisfied = 0\n        for i in range(len(grumpy)):\n            if grumpy[i] == 0:\n                satisfied += customers[i]\n        windowMax = 0\n        curr = 0\n        for i in range(len(customers)):\n            curr += ((grumpy[i]) * customers[i])\n            if i >= X:\n                curr -= ((grumpy[i - X]) * customers[i - X])\n            windowMax = max(windowMax, curr)\n        return satisfied + windowMax\n", "import numpy as np\n\nclass Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        #satisfiedCustomer = sum(customers) - sum(np.multiply(customers,grumpy))\n        \n        satisfiedCustomer = 0\n        for i in range(len(customers)):\n            if not grumpy[i]:\n                satisfiedCustomer += customers[i]\n    \n        window = 0\n        for i in range(X):\n            if grumpy[i] == 1:\n                window+=customers[i]\n                \n        \n        res = window\n        \n        for i in range(1,len(customers)-X+1):\n            last = i-1\n            if grumpy[last]==1:\n                window -= customers[last]\n            nextIdx = i+X-1\n            if grumpy[nextIdx]==1:\n                window += customers[nextIdx]\n            \n            res = max(res,window)\n            \n    \n        return (res+satisfiedCustomer)\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        total = sum(c for i, c in enumerate(customers) if grumpy[i] == 0)\n        add = sum(c for i, c in enumerate(customers[:X]) if grumpy[i] == 1)\n        res = total + add\n        #print(total, add, res)\n        for i in range(X, len(customers)):\n            if grumpy[i] == 1:\n                add += customers[i]\n            if grumpy[i - X] == 1:\n                add -= customers[i - X]\n            res = max(res, total + add)\n            #print(total, add, res)\n        return res\n", "class Solution:\n    def maxSatisfied(self, A: List[int], G: List[int], X: int) -> int:\n        res = 0\n        s = 0\n        ws = 0\n        left = []\n        for i in range(len(A)):\n            c, g = A[i], G[i]\n            s += (1-g)*c\n            ws += g*c\n            if i>=X:\n                ws -= A[i-X] * G[i-X]\n            res = max(res, ws)\n            # print(i,j,s,res)\n        return res+s", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        i = win_of_make_satisfied = satisfied = max_make_satisfied = 0\n        for c, g in zip(customers, grumpy):\n            satisfied += (1 - g) * c\n            win_of_make_satisfied += g * c\n            if i >= X:\n                win_of_make_satisfied -= grumpy[i - X] * customers[i - X]\n            max_make_satisfied = max(win_of_make_satisfied, max_make_satisfied)  \n            i += 1    \n        return satisfied + max_make_satisfied\n                    \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        n=len(customers)\n        res=sum([customers[i]*(1-grumpy[i]) for i in range(n)])\n        best_gain=sum([customers[i]*grumpy[i] for i in range(X)])\n        gain=best_gain\n        for i in range(X,n):\n            gain+=customers[i]*grumpy[i]-customers[i-X]*grumpy[i-X]\n            best_gain=max(best_gain,gain)\n        return res+best_gain", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X == len(customers):\n            return sum(customers)\n        for i in range(len(grumpy)):\n            grumpy[i] = 0 if grumpy[i] == 1 else 1\n        mults = [x*y for x,y in zip(customers,grumpy)]\n        sum_not_grumpy = sum(customers[:X])\n        not_grumpy = [sum_not_grumpy] \n        sum_normal = sum(mults[X:])\n        normal_custs = [sum_normal]\n        \n        for i in range(1,len(customers)-X+1):\n            sum_not_grumpy -= customers[i-1]\n            sum_not_grumpy += customers[i+X-1]\n            not_grumpy.append(sum_not_grumpy)\n            sum_normal += mults[i-1]\n            sum_normal -= mults[i+X-1]\n            normal_custs.append(sum_normal)\n        \n        return max([x+y for x,y in zip(not_grumpy,normal_custs)])\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        N = len(grumpy)\n        \n        already_happy = sum(customers[i] for i in range(N) if not grumpy[i])\n                \n        window = sum(customers[i] for i in range(X) if grumpy[i])\n        \n        max_bonus = window\n        for r in range(X, N):\n            window -= customers[r - X] if grumpy[r - X] else 0\n            window += customers[r] if grumpy[r] else 0\n            max_bonus = max(max_bonus, window)\n                    \n        return already_happy + max_bonus", "class Solution:\n    \n    def maxSatisfied(self, customers: List[int], grumpy: List[int], window_size: int) -> int:\n        \n\n        already_satisfied = 0\n        for index in range(len(customers)):\n            if grumpy[index] == 0:\n                already_satisfied += customers[index]\n                customers[index] = 0\n        \n        \n        best_satisfied = 0\n        \n        satisfied = 0\n        for index, customer in enumerate(customers):\n            satisfied += customer\n            \n            if index >= window_size:\n                satisfied -= customers[index - window_size]\n            \n            best_satisfied = max(best_satisfied, satisfied)\n                \n        \n        return best_satisfied + already_satisfied\n                \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n       \n        satisfiedCustomer = 0\n        for i in range(len(customers)):\n            if not grumpy[i]:\n                satisfiedCustomer += customers[i]\n    \n        window = 0\n        for i in range(X):\n            if grumpy[i] == 1:\n                window+=customers[i]\n        \n        res = window\n        for i in range(1,len(customers)-X+1):\n            last = i-1\n            if grumpy[last]==1:\n                window -= customers[last]\n            nextIdx = i+X-1\n            if grumpy[nextIdx]==1:\n                window += customers[nextIdx]\n            \n            res = max(res,window)\n            \n    \n        return (res+satisfiedCustomer)\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        disSatisfy = [c*g for c,g in zip(customers, grumpy)]\n        start = 0\n        grumpy_num = 0\n        for i in range(X):\n            grumpy_num += disSatisfy[i]\n\n        remaining =  grumpy_num\n        for j in range(X, len(customers)):\n            remaining = remaining-disSatisfy[j-X]+disSatisfy[j]\n            if remaining>grumpy_num:\n                grumpy_num = remaining\n                start = j-X+1\n\n        for k in range(start, start+X):\n            grumpy[k]=0\n\n        return sum([ c if g==0 else 0 for c,g in zip(customers, grumpy)])\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:                \n        n = len(customers)\n        \n        start = 0\n        \n        curSatisfaction = sum(customers[i] for i in range(n) if grumpy[i] == 0)\n        \n        maxSatisfaction = 0\n        \n        for end in range(len(customers)):\n            if grumpy[end] == 1:\n                curSatisfaction += customers[end]\n            \n            if end - start + 1 > X:\n                if grumpy[start] == 1:\n                    curSatisfaction -= customers[start]\n                start += 1\n            \n            maxSatisfaction = max(maxSatisfaction, curSatisfaction)\n        \n        return maxSatisfaction", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        start=0\n        end=X\n        ans=0\n        for i in range(len(grumpy)):\n            if grumpy[i]==0:\n                ans+=customers[i]\n        t=0\n        for i in range(X):\n            if grumpy[i]==1:\n                t+=customers[i]\n        maxs=0\n        while end<len(grumpy)+1:\n            if t>maxs:\n                maxs=t\n            if end==len(grumpy):\n                break\n            if grumpy[start]==1:\n                t-=customers[start]\n            if grumpy[end]==1:\n                t+=customers[end]\n            start+=1\n            end+=1\n        return ans+maxs", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        total = 0\n        \n        for i in range(len(customers)):\n            total += (1-grumpy[i]) * customers[i]\n            grumpy[i] *= customers[i]\n        \n        maxsum = 0\n        for i in range(X):\n            maxsum += grumpy[i]\n        cur = maxsum\n        for j in range(X, len(grumpy)):\n            i = j-X\n            cur += grumpy[j]\n            cur -= grumpy[i]\n            maxsum = max(maxsum, cur)\n        #print(maxsum)\n        return total + maxsum\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        n = len(customers)\n        sum_cus = sum(customers)\n        for i in range(n):\n            customers[i] *= grumpy[i]\n        window = 0\n        max_secret_satisfied = -math.inf\n        left, right = 0, 0\n        while right < n:\n            window += customers[right]\n            right += 1\n            while right - left >= X:\n                max_secret_satisfied = max(max_secret_satisfied, window)\n                window -= customers[left]\n                left += 1\n        return sum_cus - (sum(customers) - max_secret_satisfied)", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        #happy owner means happy customer as well \n        happy_owner_cust = 0 \n        \n        for pos in range(len(customers)):\n            if grumpy[pos] == 0: #happy owner \n                happy_owner_cust += customers[pos]\n                customers[pos] = 0 \n        \n        \n        #then build upon using the grumpy owner power. \n        \n        calming_owner_cust = 0 \n        best_calmed_cust = 0 \n        \n        for end in range(len(customers)): \n            calming_owner_cust += customers[end]\n  \n            \n            \n            if end >= X: #subtract out the extra calming technique from the owner \n                calming_owner_cust -= customers[end - X]\n                \n            best_calmed_cust = max(best_calmed_cust, calming_owner_cust)\n            \n            \n            \n            \n        return happy_owner_cust + best_calmed_cust\n    \n# #TRY 8/10/2020 \n# class Solution:\n#     def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n#         #Input: Customers[i] how many customers enter for that exact minute \n            \n#         #Constraint \n#         #owner -> opens store up to customers.len()\n#         #Every minute there are customers entering the store. And all those customers leave after the end of the minute \n        \n#         #If owner is grumpy on i-th minute grumpy[i] = 1 else grumpy[i] = 0. When the bookstore owner is angry \n#         #The customers of that minute aren't satisfied else if owner isn't grumpy then customers are happy. \n        \n#        # Bookstore owner can be NOT angry for X minutes but can use it ONLY once. \n       \n#         #WANT: max number of customers that are happy throughout the day. \n        \n        \n#         minutes_opened = len(customers) \n#         customer_happy_time = 0 \n        \n#         #Try to basically keep your grumpy minutes down based on the highest number of customers there are. \n        \n#         start = 0 \n#         end = 0 \n#         rush_hour = collections.deque() #this is based on the most amount of customers. \n#         calm_owner = collections.deque()\n#         #Our best number of customer being happy will be based on the largest amount of customers\n#         #That's our best bet. \n#         while end < minutes_opened: \n#             if customers[end] == 0: #No Customers go in owner can be angry \n#                 end += 1 \n#                 continue \n                \n#             cur_happy_time += customers[end]\n#             if grumpy[end] == 1: #owner angry = customer angry: Just try calming here then. \n                \n                \n                \n#             rush_hour.append(end)\n\n# class Solution():\n#     def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n#         m = s = tmp = 0\n#         for i in range(len(customers)):\n#             if not grumpy[i]: \n#                 s += customers[i]                # sum of satisfied customers\n#                 customers[i] = 0 \n#             else: tmp += customers[i]            # sum of grumpy customers \n#             if i>=X: tmp -= customers[i-X]       # remove the leftmost element to keep the sliding window with # of X\n#             m = max(m, tmp)                      # max # of satisfied grumpy customers with a secret technique\n#         return s+m\n    \n    \n# class Solution:\n#     def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n#         # Part 1 requires counting how many customers\n#         # are already satisfied, and removing them\n#         # from the customer list.\n#         #These customers are those who didn't have to fight with the owner to be happy.\n#         already_satisfied = 0\n#         for i in range(len(grumpy)):\n#             if grumpy[i] == 0: #He's happy so add the customer. \n#                 already_satisfied += customers[i]\n#                 customers[i] = 0 #set you back to zero to not visit you. When doing the offset for the window \n        \n#         # Part 2 requires finding the optimal number\n#         # of unhappy customers we can make happy.\n#         best_we_can_make_satisfied = 0\n#         current_satisfied = 0\n#         for i, customers_at_time in enumerate(customers):\n#             # if customers[i] == 0: CAN'T DO THIS CUZ WE'RE NOT UPDATING THE WINDOW THEN AT THIS POINT (I.E THE START WINDOW)\n#             #     continue\n#             #Add the customer so far\n#             current_satisfied += customers_at_time # Add current to rolling total\n#             if i >= X: # We need to remove some from the rolling total #We need to update and try the grumpy intervals to block out owner from \n#                 #Being grumpy so we can add these happy customers but at this point\n#                 #There's too much calming power used by owner so we need to remove the beginning window of the current_satisifed. \n#                 current_satisfied -= customers[i - X]\n#             best_we_can_make_satisfied = max(best_we_can_make_satisfied, current_satisfied)\n        \n#         # The answer is the sum of the solutions for the 2 parts.\n#         return already_satisfied + best_we_can_make_satisfied\n    \n    \nclass Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        always_happy = 0  \n        for pos in range(len(customers)): \n            if grumpy[pos] == 0: \n                always_happy += customers[pos]\n                customers[pos] = 0 \n                \n        happy_use = 0 \n        cur_happy_customers = 0 \n \n        for pos in range(len(customers)): \n            cur_happy_customers += customers[pos]\n            \n            if pos >= X: \n                cur_happy_customers -= customers[pos - X]\n                \n            \n            happy_use = max(happy_use, cur_happy_customers)\n            \n        return always_happy + happy_use ", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if len(customers) <= X:\n            return sum(customers)\n        \n        \n        satisfied_customers = 0\n        current_unsatisfied_customers = 0\n        max_unsatisfied_customers = 0\n        \n        for i in range(len(customers)):\n            if i >= X and grumpy[i-X] == 1:\n                current_unsatisfied_customers -= customers[i-X]\n                \n            if grumpy[i] == 0:\n                satisfied_customers += customers[i]\n            else:\n                current_unsatisfied_customers += customers[i]\n                \n            max_unsatisfied_customers = max(max_unsatisfied_customers, current_unsatisfied_customers)\n            \n        return satisfied_customers + max_unsatisfied_customers\n                \n        \n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X == len(customers):\n            return sum(customers)\n        for i in range(len(grumpy)):\n            grumpy[i] = 0 if grumpy[i] == 1 else 1\n        mults = [x*y for x,y in zip(customers,grumpy)]\n        sum_not_grumpy = sum(customers[:X])\n        not_grumpy = [sum_not_grumpy] \n        sum_normal = sum(mults[X:])\n        normal_custs = [sum_normal]\n        for i in range(1,len(customers)-X+1):\n            sum_not_grumpy -= customers[i-1]\n            sum_not_grumpy += customers[i+X-1]\n            not_grumpy.append(sum_not_grumpy)\n            sum_normal += mults[i-1]\n            sum_normal -= mults[i+X-1]\n            normal_custs.append(sum_normal)\n        \n        \n            \n        \n        print(not_grumpy)\n        print(normal_custs)\n        return max([x+y for x,y in zip(not_grumpy,normal_custs)])\n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        satisfied = 0 \n        for i in range(len(customers)):\n            satisfied += customers[i] * (grumpy[i] == 0)\n        \n        p = X \n        best_imp = sum([customers[i] for i in range(p) if grumpy[i] == 1])\n        imp = best_imp\n        while p < len(grumpy):\n            if grumpy[p] == 1:\n                imp += customers[p]\n            if grumpy[p - X] == 1:\n                imp -= customers[p - X]\n            if imp > best_imp:\n                best_imp = imp\n                \n            p += 1\n                \n        return satisfied + best_imp \n            \n            \n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        i = win_of_make_satisfied = satisfied = max_make_satisfied = 0\n        for c, g in zip(customers, grumpy):\n            satisfied += (1 - g) * c\n            win_of_make_satisfied += g * c\n            if i >= X:\n                win_of_make_satisfied -= grumpy[i - X] * customers[i - X]\n            max_make_satisfied = max(win_of_make_satisfied, max_make_satisfied)  \n            i += 1\n        return satisfied + max_make_satisfied", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        curr_running_delta = 0\n        max_delta = (-2**31, None) # max sum, end idx\n        \n        for i in range(len(customers)):\n            curr_running_delta += customers[i]*grumpy[i]\n            \n            if i >= X - 1:\n                if curr_running_delta > max_delta[0]:\n                    max_delta = (curr_running_delta, i)\n                \n                if grumpy[i - (X-1)] == 1:\n                    curr_running_delta -= customers[i - (X-1)]\n        \n        max_satisfied = 0\n        for i in range(len(customers)):\n            if max_delta[1] - (X-1) <= i <= max_delta[1] or grumpy[i] == 0:\n                max_satisfied += customers[i]\n                \n        return max_satisfied\n    \n    # time O(n)\n    # space O(1)\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        # sliding window of possible grumping times\n        satisfied = 0\n        n = len(customers)\n        grumpySum = [0]*(n - X + 1)\n        \n        for i in range(X):\n            satisfied += customers[i] if grumpy[i]==0 else 0\n            \n            saved = customers[i] if grumpy[i]==1 else 0\n            grumpySum[0] += saved\n\n        noGrump = grumpySum[0]\n        for i in range(X, n):\n            satisfied += customers[i] if not grumpy[i] else 0\n            \n            saved = customers[i] if grumpy[i] else 0\n            abandon = customers[i - X] if grumpy[i - X] else 0\n            grumpySum[i - X + 1] = grumpySum[i - X] + saved - abandon\n            noGrump = max(noGrump, grumpySum[i - X + 1])\n\n        return satisfied + noGrump\n       \n          \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        without_x = 0\n        for i, b in enumerate(grumpy):\n            if not b:\n                without_x += customers[i]\n        \n        with_x = [0]*len(customers)\n        \n        extra = 0\n        for i, b in enumerate(grumpy[:X]):\n            if b:\n                extra += customers[i]\n                \n        with_x[0] += extra\n        \n        for i in range(len(grumpy)):\n            if i + X >= len(grumpy):\n                break\n                \n            extra -= 0 if not grumpy[i] else customers[i]\n            extra += 0 if not grumpy[i + X ] else customers[i + X]\n            with_x[i + 1] += extra\n        \n        return max(with_x) + without_x", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int],\n                     X: int) -> int:\n        already_satisfied = 0\n        for i in range(len(grumpy)):\n            if grumpy[i] == 0:\n                already_satisfied += customers[i]\n                customers[i] = 0\n\n        best_we_can_make_satisfied = 0\n        current_satisfied = 0\n        for i, customers_at_time in enumerate(customers):\n            current_satisfied += customers_at_time\n            if i >= X:\n                current_satisfied -= customers[i - X]\n            best_we_can_make_satisfied = max(best_we_can_make_satisfied,\n                                             current_satisfied)\n        return already_satisfied + best_we_can_make_satisfied\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        zeroTotal = 0\n        for i in range(len(customers)):\n            if grumpy[i] == 0:\n                zeroTotal += customers[i]\n\n        q = deque()\n        oneTotal = 0\n        largest = 0\n        for i in range(len(customers)):\n            if grumpy[i] == 1:\n                while q and i - q[0][1] >= X:\n                    oneTotal -= q.popleft()[0]\n                q.append((customers[i],i))\n                oneTotal += customers[i]\n                largest = max(largest, oneTotal)\n        return zeroTotal + largest", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        if X == len(customers):\n            return sum(customers)\n        for i in range(len(grumpy)):\n            grumpy[i] = 0 if grumpy[i] == 1 else 1\n        mults = [x*y for x,y in zip(customers,grumpy)]\n        sum_not_grumpy = sum(customers[:X])\n        sum_normal = sum(mults[X:])\n        \n        max_customers = sum_not_grumpy+sum_normal\n        for i in range(1,len(customers)-X+1):\n            sum_not_grumpy -= customers[i-1]\n            sum_not_grumpy += customers[i+X-1]\n            sum_normal += customers[i-1]*grumpy[i-1]#mults[i-1] \n            sum_normal -= customers[i+X-1]*grumpy[i+X-1]#mults[i+X-1]\n            max_customers = max(max_customers, sum_not_grumpy+sum_normal)\n\n        return max_customers\n            \n", "class Solution:\n    def maxSatisfied(self, c: List[int], g: List[int], X: int) -> int:\n        arr = [0]\n        n = len(g)\n        for i in range(n):\n            arr.append(arr[-1]+(1-g[i])*c[i])\n        \n        c = [0]+c\n        for i in range(n):\n            c[i+1] = c[i]+c[i+1]\n        \n        m = -1\n        for i in range(X,n+1):\n            m = max(m,c[i]-c[i-X]-arr[i]+arr[i-X])\n        \n        print((arr,c,m))\n        \n        return arr[-1]+m\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        \n        \n        L = len(grumpy)\n        if L == X:\n            return sum(customers)\n        # print(L,X)\n        tempCustomers = customers.copy()\n        grummpyCustomer = [0 if grumpy[i] == 1 else customers[i] for i in range(L) ]\n        for i in range(1,L):\n            tempCustomers[i] += tempCustomers[i-1]\n        \n        \n        for i in range(1,L):\n            grummpyCustomer[i] += grummpyCustomer[i-1]\n        \n        \n        \n        result = 0\n        \n        maxSum = grummpyCustomer[-1]\n        for i in range(X, L):\n            result = max(result, tempCustomers[i] - tempCustomers[i-X] + maxSum - grummpyCustomer[i] +  grummpyCustomer[i-X])\n            # print(result)\n            \n    \n        # for i in reversed(range(1,L)):\n        #     customers[i] -= customers[i-1]\n        # print(customers)\n        \n        grummpyCustomer = [0 if grumpy[i] == 1 else customers[i] for i in range(L) ]\n        \n        tempCustomers = customers.copy()\n        for i in reversed(list(range(L-1))):\n            tempCustomers[i] += tempCustomers[i+1]\n        \n        for i in reversed(list(range(L-1))):\n            # print(i)\n            grummpyCustomer[i] += grummpyCustomer[i+1]\n        \n        # print(customers[0] - customers[0+X] + grummpyCustomer[0+X])\n        maxSum = grummpyCustomer[0]\n        for i in reversed(list(range(L-X))):\n            # print(i,'ok')\n            result = max(result, tempCustomers[i] - tempCustomers[i+X] + maxSum - grummpyCustomer[i] +  grummpyCustomer[i+X])\n            \n        return result\n", "import numpy as np\n\nclass Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        customers=np.array(customers)\n        grumpy=np.array(grumpy)\n        total_customers=np.sum(customers)\n        grumpy_array=customers*grumpy\n        secret_array=np.convolve(grumpy_array,np.ones(X,dtype=int),'valid')\n        index=np.where(secret_array==secret_array.max())[0][0]\n        grumpy_array[index:index+X]=0\n        satisfied_customers=total_customers-grumpy_array.sum()\n        return satisfied_customers\n", "import numpy as np\n\nclass Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        customers = np.array(customers)\n        grumpy = 1 - np.array(grumpy)\n        l = []\n        m = sum(customers * grumpy)\n\n        for i in range(len(customers) - X + 1):\n            if i == 0:\n                best_case = sum(customers[0:X])\n                diff = sum(grumpy[0:X] * customers[0:X])\n\n                grump_days = best_case - diff\n                l.append(grump_days)\n\n            else:\n                best_case = best_case - customers[i - 1] + customers[i + X - 1]\n                diff = diff - grumpy[i - 1]*customers[i - 1] + grumpy[i + X - 1]*customers[i + X - 1]\n\n                grump_days = best_case - diff\n                l.append(grump_days)\n\n        return max(l) + m", "import itertools as it\n\n\nclass Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        self.customers = customers\n        self.grumpy = grumpy\n        self.n = len(customers)\n        # if len(grumpy) != self.n:\n        #     raise ValueError(f\\\"Customers {customers} and grumpy {grumpy} arrays must have the same length.\\\")\n        self.cumulative_customers = list(it.accumulate(customers, initial=0))\n        self.technique_length = X\n        return self.satisfy(0, 1)\n    \n    @lru_cache(None)\n    def satisfy(self, index: int, secret_technique: int) -> int:\n        if index >= self.n:\n            return 0\n        satisfaction = self.customers[index] if self.grumpy[index] == 0 else 0\n        if secret_technique == 0:\n            return satisfaction + self.satisfy(index + 1, 0)\n        ans = max(\n            satisfaction\n            + self.satisfy(index + 1, secret_technique),\n            self.cumulative_customers[min(self.n, index + self.technique_length)]\n            - self.cumulative_customers[index]\n            + self.satisfy(index + self.technique_length, secret_technique - 1),\n        )\n        return ans\n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        i = win_of_make_satisfied = satisfied = max_make_satisfied = 0\n        for c, g in zip(customers, grumpy):\n            satisfied += (1 - g) * c\n            win_of_make_satisfied += g * c\n            if i >= X:\n                win_of_make_satisfied -= grumpy[i - X] * customers[i - X]\n            max_make_satisfied = max(win_of_make_satisfied, max_make_satisfied)  \n            i += 1    \n        return satisfied + max_make_satisfied        ", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        \n        window = [0] * X\n        for a in range(X):\n            if grumpy[a] == 1:\n                window[a] += customers[a]\n        mySum = 0\n        maxAdded = sum(window)\n        right = X\n        for i in range(len(customers)):\n            if i + X < len(customers):\n                window.pop(0)\n                window.append(customers[i+X] if grumpy[i+X] == 1 else 0)\n                if sum(window) > maxAdded: maxAdded = sum(window)\n            if grumpy[i] == 0: mySum += customers[i] \n        \n        return mySum + maxAdded\n                    \n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        s = 0\n\n        for i in range(0,len(customers)):\n            if grumpy[i] == 0:\n                s += customers[i]\n                customers[i] = 0\n\n        # print(customers)\n        tmp = [sum(customers[:X])]\n\n        for i in range(X,len(customers)):\n\n            tmp = tmp + [tmp[-1] + customers[i] - customers[i-X]]\n\n\n        return max(tmp) + s", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        satisfied = []\n        satisfied_before = 0\n        satisfied_after = sum([x[0] for x in zip(customers[X:], grumpy[X:]) if not x[1]])\n        for i in range(len(customers) - X + 1):\n            satisfied.append(satisfied_before + sum(customers[i:i+X]) + satisfied_after)\n            if not grumpy[i]:\n                satisfied_before += customers[i]\n            if (i + X) < len(customers) and not grumpy[i + X]:\n                satisfied_after -= customers[i + X]\n        return max(satisfied)", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        N = len(customers)\n        satisfy = 0\n        unsatisfied = []\n        max_value = 0\n        #Base cases\n        if not customers:\n            return []\n        elif not grumpy or N==1:\n            return sum(customers)\n        \n        \n        for i in range(N):\n            if grumpy[i] == 0:\n                satisfy += customers[i]\n                unsatisfied.append(0)\n                \n            else:\n                unsatisfied.append(customers[i])\n                \n            \n        for j in range(N-X+1):\n            sum1 = sum(unsatisfied[j:j+X])\n            \n            max_value = max(max_value,sum1)\n        return (satisfy + max_value)\n        \n                \n            \n", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        sums = 0\n        maxs = 0\n        for i in range(len(customers)):\n            sums += customers[i]\n            if grumpy[i] == 1:\n                grumpy[i] = customers[i]\n                sums -= grumpy[i]\n        for i in range(len(grumpy) - X+1):\n            maxs = max(sum(grumpy[i: i+X]), maxs)\n        return sums + maxs", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        orig_satisfied_list = [customers[i] * (1-grumpy[i]) for i in range(len(customers))]\n        orig_satisfied = sum(orig_satisfied_list)\n        grumpy_satisfied_list = [customers[i] - orig_satisfied_list[i] for i in range(len(customers))]\n        diff_list = [max(0, grumpy_satisfied_list[i] - orig_satisfied_list[i]) for i in range(len(customers))]\n        #print(orig_satisfied_list)\n        #print(grumpy_satisfied_list)\n        #print(diff_list)\n        #print([sum(diff_list[i:i+X]) for i in range(len(customers)-X+1)])\n        return orig_satisfied + max([sum(diff_list[i:i+X]) for i in range(len(customers)-X+1)])", "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\n        satisfaction = 0\n        unsatisfied = []\n        for i in range(len(customers)):\n            if grumpy[i] == 1:\n                unsatisfied.append(customers[i])\n            else:\n                satisfaction += customers[i]\n                unsatisfied.append(0)\n        max_sum = sum(unsatisfied[:X])\n        for i in range(X, len(unsatisfied)+1):\n            max_sum = max(max_sum, sum(unsatisfied[i-X:i]))\n        satisfaction += max_sum\n        return satisfaction"]