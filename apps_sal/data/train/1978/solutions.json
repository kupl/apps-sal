["class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        out = []\n        for word in words:\n            pat_dict = dict()\n            used = set()\n            if len(word) == len(pattern):\n                can_be = True\n                for i in range(len(word)):\n                    if word[i] not in pat_dict:\n                        if pattern[i] not in used:\n                            pat_dict[word[i]] = pattern[i]\n                            used.add(pattern[i])\n                        else:\n                            can_be = False\n                            break\n                    else:\n                        if pat_dict[word[i]] != pattern[i]:\n                            can_be = False\n                            break\n                if can_be == True:\n                    out.append(word)\n        return out", "from collections import Counter\nclass Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        dp={}\n\n        lstp=[]\n        \n        ans=[]\n        for i,p in enumerate(pattern) :\n            if p not in list(dp.keys()):\n                dp[p]=i+1\n            lstp.append(dp[p])\n        #print(lstp)\n        \n        for word in words:\n            dp={}\n            lst=[]\n            for j,w in enumerate(word):\n                if w not in list(dp.keys()):\n                    dp[w]=j+1\n                lst.append(dp[w])\n            #print(lst)\n            if lstp==lst:\n                ans.append(word)\n        return ans\n                \n                \n                \n            \n", "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        \n        ans = []\n        \n        for i in words:\n            temp = i\n            \n            if len(pattern) == len(temp):\n                as1 = {}\n                got = []\n                found = 1\n                for i1 in range(len(temp)):\n                    if pattern[i1] not in as1:\n                        if temp[i1] in got:\n                            found = 0 \n                            break\n                        else:\n                            as1[pattern[i1]] = temp[i1]\n                            got.append(temp[i1])\n                    else:\n                        if temp[i1] != as1.get(pattern[i1]):\n                            found = 0\n                            break\n                            \n                if found == 1:\n                    ans.append(temp)\n                    \n                    \n        return ans\n                        \n                        \n                        \n                    \n                    \n                \n            \n", "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        output = []\n        for word in words:\n            fwd, reverse, valid = defaultdict(str), defaultdict(str), True\n            for i in range(len(word)):\n                if word[i] not in fwd and pattern[i] not in reverse:\n                    fwd[word[i]] = pattern[i]\n                    reverse[pattern[i]] = word[i]\n                else:\n                    valid = fwd[word[i]] == pattern[i] and reverse[pattern[i]] == word[i]\n                if not valid: break\n            if valid: \n                output.append(word)\n        return output", "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        output = []\n        for word in words:\n            fwd, reverse, valid = defaultdict(str), defaultdict(str), True\n            for i in range(len(word)):\n                if word[i] not in fwd and pattern[i] not in reverse:\n                    fwd[word[i]] = pattern[i]\n                    reverse[pattern[i]] = word[i]\n                else:\n                    valid = fwd[word[i]] == pattern[i] and reverse[pattern[i]] == word[i]\n                    if not valid: break\n            if valid: \n                output.append(word)\n        return output", "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        def encodeWord(word):\n            d, nextChar, i, encoding = {}, iter([chr(ord('a') + i) for i in range(26)]), 0, []\n            \n            while i < len(word):\n                c, count = word[i], 1\n                while i + 1 < len(word) and word[i + 1] == c:\n                    i, count = i + 1, count + 1\n                if c not in d:\n                    d[c] = next(nextChar)\n                encoding.append(d[c] + str(count))\n                i += 1\n            return ''.join(encoding)\n        \n        p_enc = encodeWord(pattern)\n        #print(p_enc)\n        return [word for word in words if encodeWord(word) == p_enc]\n            \n", "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        plen = len(pattern)\n        pat = [-1]*plen\n        pat[0] = 0 \n        for i in range(1,plen):\n            for j in range(i):\n                if pattern[j]==pattern[i]:\n                    pat[i] = j\n        res = []\n        # print(pat)\n        for word in words:\n            wlen = len(word)\n            flag = 0\n            if wlen!=plen:\n                continue\n            for i in range(1,wlen):\n                if pat[i]!=-1 and word[i]==word[pat[i]]:\n                    continue\n                elif pat[i]!=-1 and word[i]!=word[pat[i]]:\n                    flag = 1\n                    break\n                else:\n                    for j in range(i):\n                        if word[j]==word[i]:\n                            flag=1\n                            break\n            if flag == 0:\n                res.append(word)\n                    \n        return res", "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        #dict mapping\n        #insert pattern into dict\n        pattern_map = dict()\n        for el in pattern:\n            pattern_map[el] = 1\n            \n        res = []\n        #seen = set()\n        for word in words:\n            #reset dict and seen for each new word\n            #shallow copy\n            pattern_map_dupe = copy.copy(pattern_map) \n            seen = set()\n            if len(word) == len(pattern):\n                i = 0\n                for charw, charp in zip(word, pattern):\n                    print(\\\"w: \\\", charw, \\\"p: \\\", charp)\n                    print(pattern_map_dupe)\n                    #subsequent encounter\n                    if charw in seen:\n                        if pattern_map_dupe[charp] != charw:\n                            break\n                    \n                    #first encounter\n                    #also must not be in seen already\n                    elif pattern_map_dupe.get(charp, 0) == 1:\n                        #don't want a=c, b=c\n                        #must be one-to-one: a=a, b=c\n                        if charw in seen:\n                            break\n                        else:\n                            seen.add(charw)\n                            pattern_map_dupe[charp] = charw\n                    \n                    #no match\n                    else:\n                        continue\n                    i += 1\n\n                if i == len(pattern):\n                    res.append(word)\n        return res\n                    \n        ", "class Solution:\n    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n        def match(list1 , pattern):\n            for i in range(len(pattern)):\n                if list1[i] != pattern[i]:\n                    return False\n            return True\n        \n        def number_arr(list1):\n            dict = {}\n            arr = []\n            last_given_value = 0\n            for i in list1:\n                if i not in dict:\n                    last_given_value +=1\n                    dict[i] = last_given_value\n                    arr.append(dict[i])\n                else:\n                    arr.append(dict[i])\n            return arr\n        \n        pat = number_arr(pattern)\n        ans = []\n        for word in words:\n            word_list = number_arr(word)\n            if match(pat , word_list):\n                ans.append(word)\n        return ans        \n                \n            \n            \n"]