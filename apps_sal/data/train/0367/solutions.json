["class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return None\n         slow = fast = nums[0]\n         while True:\n             slow = nums[slow]\n             fast = nums[nums[fast]]\n             if slow == fast:\n                 break\n         fast = nums[0]\n         while slow != fast:\n             slow = nums[slow]\n             fast = nums[fast]\n         return slow", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n \n         # similar to find cycle in the linked list\n         # actually, here we have more than 1 logical linked list(with or without cycle)\n         # begin with nums[0] can help us determining at least one cycled linked list of them\n         fast, slow = nums[0], nums[0]\n         while(True):\n             slow = nums[slow]\n             fast = nums[fast]\n             fast = nums[fast]\n             if slow == fast:\n                 break\n \n         ptr1 = nums[0]\n         ptr2 = fast\n         while(ptr1 != ptr2):\n             ptr1 = nums[ptr1]\n             ptr2 = nums[ptr2]\n \n         return ptr1", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         st = set()\n         for i in range(len(nums)):\n             n = nums[i]\n             if n not in st:\n                 st.add(n)\n             else:\n                 return n\n", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         slow = nums[0]\n         fast = nums[0]\n         while True:\n             slow = nums[slow]\n             fast = nums[nums[fast]]\n             if slow == fast:\n                 break\n         \n         ptr1 = nums[0]\n         ptr2 = slow\n         while ptr1 != ptr2:\n             ptr1 = nums[ptr1]\n             ptr2 = nums[ptr2]\n         \n         return ptr1\n         \n         \n", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         from collections import Counter\n         c = Counter(nums)\n         return list(filter(lambda x: x[1] > 1, c.items()))[0][0]", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         low, high = 1, len(nums) - 1\n         while (low < high):\n             mid = (low + high)//2\n             count = 0\n             for i in nums:\n                 if i <= mid:\n                     count += 1\n             if count <= mid:\n                 low = mid + 1\n             else:\n                 high = mid\n         return low", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         i=0\n         while i < len(nums):\n             if nums[i]==nums[i+1]:\n                 return nums[i]\n             i+=1\n", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         for n in nums:\n             if n < 0:\n                 i = -n\n             else:\n                 i = n\n             ind = i - 1\n             if nums[ind] < 0:\n                 return i\n             else:\n                 \n                 nums[ind] = -nums[ind]\n         \n \n         return extra\n", "class Solution:\n     def findDuplicate(self, nums):\n         nums.sort()\n         for i in range(1, len(nums)):\n             if nums[i] == nums[i-1]:\n                 return nums[i]\n", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums = sorted(nums)\n         \n         for i in range(1, len(nums)):\n             if nums[i] == nums[i - 1]:\n                 return nums[i]\n", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         print(nums)\n         for i in range(len(nums)-1):\n             if nums[i] == nums[i+1]:\n                 return nums[i]\n             \n", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n #        d = {}\n #        for i in nums:\n #            if i in d:\n #                return i\n #            d[i] = 0\n         return (sum(nums)-sum(set(nums))) // (len(nums)-len(set(nums)))", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         # set_sum = sum(list(set(nums)))\n         # set_len = len(set(nums))\n         # pro_sum = sum(nums)\n         # pro_len = len(nums)\n         # return (pro_sum - set_sum) // (pro_len - set_len) \n         \n         left, right = 0, len(nums) - 1\n         mid = (left + right) // 2\n         while right - left > 1:\n             count = 0\n             for num in nums:\n                 if mid < num <= right:\n                     count += 1\n             if count > (right - mid):\n                 left = mid\n             else:\n                 right = mid\n             mid = (left + right) // 2\n         return right\n", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         prev = None\n         for i in nums:\n             if prev == i:\n                 return prev\n             else:\n                 prev = i", "class Solution:\n     def findDuplicate(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         n = len(nums) - 1\n         \n         a = 1\n         b = n\n         \n         while a < b:\n             m = (a+b)//2\n             #print(a,m,b)\n             lCount = 0\n             hCount = 0\n             for k in nums:\n                 if a <= k <= m:\n                     lCount += 1\n                 elif m < k <= b:\n                     hCount += 1\n             #print(lCount, hCount)\n             if lCount > m-a+1:\n                 b = m\n             else:\n                 a = m+1\n         \n         return a\n"]