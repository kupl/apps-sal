["STATE_TO_COMMANDS = {\n  'CLOSED': {\n    'APP_PASSIVE_OPEN': 'LISTEN',\n    'APP_ACTIVE_OPEN': 'SYN_SENT'\n  },\n  'LISTEN': {\n    'RCV_SYN': 'SYN_RCVD',\n    'APP_SEND': 'SYN_SENT',\n    'APP_CLOSE': 'CLOSED'\n  },\n  'SYN_RCVD': {\n    'APP_CLOSE': 'FIN_WAIT_1',\n    'RCV_ACK': 'ESTABLISHED'\n  },\n  'SYN_SENT': {\n    'RCV_SYN': 'SYN_RCVD',\n    'RCV_SYN_ACK': 'ESTABLISHED',\n    'APP_CLOSE': 'CLOSED'\n  },\n  'ESTABLISHED': {\n    'APP_CLOSE': 'FIN_WAIT_1',\n    'RCV_FIN': 'CLOSE_WAIT'\n  },\n  'FIN_WAIT_1': {\n    'RCV_FIN': 'CLOSING',\n    'RCV_FIN_ACK': 'TIME_WAIT',\n    'RCV_ACK': 'FIN_WAIT_2'\n  },\n  'CLOSING': {\n    'RCV_ACK': 'TIME_WAIT'\n  },\n  'FIN_WAIT_2': {\n    'RCV_FIN': 'TIME_WAIT'\n  },\n  'TIME_WAIT': {\n    'APP_TIMEOUT': 'CLOSED'\n  },\n  'CLOSE_WAIT': {\n    'APP_CLOSE': 'LAST_ACK'\n  },\n  'LAST_ACK': {\n    'RCV_ACK': 'CLOSED'\n  }\n}\n\n\ndef traverse_TCP_states(events):\n  state = \"CLOSED\"  # initial state, always\n  for event in events:\n    if event not in STATE_TO_COMMANDS[state]:\n      return 'ERROR'\n    state = STATE_TO_COMMANDS[state][event]\n  return state", "import re\n\nFSM_STR = \"\"\"\nCLOSED: APP_PASSIVE_OPEN -> LISTEN\nCLOSED: APP_ACTIVE_OPEN  -> SYN_SENT\nLISTEN: RCV_SYN          -> SYN_RCVD\nLISTEN: APP_SEND         -> SYN_SENT\nLISTEN: APP_CLOSE        -> CLOSED\nSYN_RCVD: APP_CLOSE      -> FIN_WAIT_1\nSYN_RCVD: RCV_ACK        -> ESTABLISHED\nSYN_SENT: RCV_SYN        -> SYN_RCVD\nSYN_SENT: RCV_SYN_ACK    -> ESTABLISHED\nSYN_SENT: APP_CLOSE      -> CLOSED\nESTABLISHED: APP_CLOSE   -> FIN_WAIT_1\nESTABLISHED: RCV_FIN     -> CLOSE_WAIT\nFIN_WAIT_1: RCV_FIN      -> CLOSING\nFIN_WAIT_1: RCV_FIN_ACK  -> TIME_WAIT\nFIN_WAIT_1: RCV_ACK      -> FIN_WAIT_2\nCLOSING: RCV_ACK         -> TIME_WAIT\nFIN_WAIT_2: RCV_FIN      -> TIME_WAIT\nTIME_WAIT: APP_TIMEOUT   -> CLOSED\nCLOSE_WAIT: APP_CLOSE    -> LAST_ACK\nLAST_ACK: RCV_ACK        -> CLOSED\n\"\"\".strip()\n\nFSM = {(m.group(1), m.group(2)) : m.group(3) for m in (re.fullmatch('(\\w+):\\s+(\\w+)\\s+->\\s+(\\w+)', a) for a in FSM_STR.split('\\n'))}\n\ndef traverse_TCP_states(events):\n    state = \"CLOSED\"  # initial state, always\n    for e in events:\n        state = FSM.get((state, e), 'ERROR')\n    return state\n", "d = {\"CLOSED\": {\"APP_PASSIVE_OPEN\": \"LISTEN\",\n                \"APP_ACTIVE_OPEN\": \"SYN_SENT\"},\n     \"LISTEN\": {\"RCV_SYN\": \"SYN_RCVD\",\n                \"APP_SEND\": \"SYN_SENT\",\n                \"APP_CLOSE\": \"CLOSED\"},\n     \"SYN_RCVD\": {\"APP_CLOSE\": \"FIN_WAIT_1\",\n                  \"RCV_ACK\": \"ESTABLISHED\"},\n     \"SYN_SENT\": {\"RCV_SYN\": \"SYN_RCVD\",\n                  \"RCV_SYN_ACK\": \"ESTABLISHED\",\n                  \"APP_CLOSE\": \"CLOSED\"},\n     \"ESTABLISHED\": {\"APP_CLOSE\": \"FIN_WAIT_1\",\n                     \"RCV_FIN\": \"CLOSE_WAIT\"},\n     \"FIN_WAIT_1\": {\"RCV_FIN\": \"CLOSING\",\n                    \"RCV_FIN_ACK\": \"TIME_WAIT\",\n                    \"RCV_ACK\": \"FIN_WAIT_2\"},\n     \"CLOSING\": {\"RCV_ACK\": \"TIME_WAIT\"},\n     \"FIN_WAIT_2\": {\"RCV_FIN\": \"TIME_WAIT\"},\n     \"TIME_WAIT\": {\"APP_TIMEOUT\": \"CLOSED\"},\n     \"CLOSE_WAIT\": {\"APP_CLOSE\": \"LAST_ACK\"},\n     \"LAST_ACK\": {\"RCV_ACK\": \"CLOSED\"}}\n\ndef traverse_TCP_states(events):\n    state = \"CLOSED\"  # initial state, always\n    for event in events:\n        if event not in d[state]:\n            return \"ERROR\"\n        state = d[state][event]\n    return state", "STATES = {\"CLOSED\":     {\"APP_PASSIVE_OPEN\": \"LISTEN\", \"APP_ACTIVE_OPEN\": \"SYN_SENT\"},\n          \"LISTEN\":     {\"RCV_SYN\": \"SYN_RCVD\", \"APP_SEND\": \"SYN_SENT\", \"APP_CLOSE\": \"CLOSED\"},\n          \"SYN_RCVD\":   {\"APP_CLOSE\": \"FIN_WAIT_1\", \"RCV_ACK\": \"ESTABLISHED\"},\n          \"SYN_SENT\":   {\"RCV_SYN\": \"SYN_RCVD\", \"RCV_SYN_ACK\": \"ESTABLISHED\", \"APP_CLOSE\": \"CLOSED\"},\n          \"ESTABLISHED\":{\"APP_CLOSE\": \"FIN_WAIT_1\", \"RCV_FIN\": \"CLOSE_WAIT\"},\n          \"FIN_WAIT_1\": {\"RCV_FIN\": \"CLOSING\", \"RCV_FIN_ACK\": \"TIME_WAIT\", \"RCV_ACK\": \"FIN_WAIT_2\"},\n          \"CLOSING\":    {\"RCV_ACK\": \"TIME_WAIT\"},\n          \"FIN_WAIT_2\": {\"RCV_FIN\": \"TIME_WAIT\"},\n          \"TIME_WAIT\":  {\"APP_TIMEOUT\": \"CLOSED\"},\n          \"CLOSE_WAIT\": {\"APP_CLOSE\": \"LAST_ACK\"},\n          \"LAST_ACK\":   {\"RCV_ACK\": \"CLOSED\"},\n         }\n\n\ndef traverse_TCP_states(events):\n    state = \"CLOSED\"\n    try:\n        for e in events:\n            state = STATES[state][e]\n        return state\n    except KeyError:\n        return \"ERROR\"\n", "def traverse_TCP_states(events, state='CLOSED'):\n\n    for event in events:\n        state = {('CLOSED', 'APP_PASSIVE_OPEN'):'LISTEN',\n                 ('CLOSED', 'APP_ACTIVE_OPEN'): 'SYN_SENT',\n                 ('LISTEN', 'RCV_SYN'):'SYN_RCVD',\n                 ('LISTEN', 'APP_SEND'):'SYN_SENT',\n                 ('LISTEN', 'APP_CLOSE'):'CLOSED', \n                 ('SYN_RCVD', 'APP_CLOSE'):'FIN_WAIT_1',\n                 ('SYN_RCVD', 'RCV_ACK'):'ESTABLISHED',\n                 ('SYN_SENT', 'RCV_SYN'):'SYN_RCVD',\n                 ('SYN_SENT', 'RCV_SYN_ACK'):'ESTABLISHED',\n                 ('SYN_SENT', 'APP_CLOSE'):'CLOSED',\n                 ('ESTABLISHED', 'APP_CLOSE'):'FIN_WAIT_1',\n                 ('ESTABLISHED', 'RCV_FIN'):'CLOSE_WAIT',\n                 ('FIN_WAIT_1', 'RCV_FIN'):'CLOSING',\n                 ('FIN_WAIT_1', 'RCV_FIN_ACK'):'TIME_WAIT',\n                 ('FIN_WAIT_1', 'RCV_ACK'):'FIN_WAIT_2',\n                 ('CLOSING', 'RCV_ACK'):'TIME_WAIT',\n                 ('FIN_WAIT_2', 'RCV_FIN'):'TIME_WAIT',\n                 ('TIME_WAIT', 'APP_TIMEOUT'):'CLOSED',\n                 ('CLOSE_WAIT', 'APP_CLOSE'):'LAST_ACK',\n                 ('LAST_ACK', 'RCV_ACK'):'CLOSED'}.get((state, event), 'ERROR')\n    return state", "NEW_STATE = {\n\"CLOSED__APP_PASSIVE_OPEN\" : \"LISTEN\",\n\"CLOSED__APP_ACTIVE_OPEN\"  : \"SYN_SENT\",\n\"LISTEN__RCV_SYN\"          : \"SYN_RCVD\",\n\"LISTEN__APP_SEND\"         : \"SYN_SENT\",\n\"LISTEN__APP_CLOSE\"        : \"CLOSED\",\n\"SYN_RCVD__APP_CLOSE\"      : \"FIN_WAIT_1\",\n\"SYN_RCVD__RCV_ACK\"        : \"ESTABLISHED\",\n\"SYN_SENT__RCV_SYN\"        : \"SYN_RCVD\",\n\"SYN_SENT__RCV_SYN_ACK\"    : \"ESTABLISHED\",\n\"SYN_SENT__APP_CLOSE\"      : \"CLOSED\",\n\"ESTABLISHED__APP_CLOSE\"   : \"FIN_WAIT_1\",\n\"ESTABLISHED__RCV_FIN\"     : \"CLOSE_WAIT\",\n\"FIN_WAIT_1__RCV_FIN\"      : \"CLOSING\",\n\"FIN_WAIT_1__RCV_FIN_ACK\"  : \"TIME_WAIT\",\n\"FIN_WAIT_1__RCV_ACK\"      : \"FIN_WAIT_2\",\n\"CLOSING__RCV_ACK\"         : \"TIME_WAIT\",\n\"FIN_WAIT_2__RCV_FIN\"      : \"TIME_WAIT\",\n\"TIME_WAIT__APP_TIMEOUT\"   : \"CLOSED\",\n\"CLOSE_WAIT__APP_CLOSE\"    : \"LAST_ACK\",\n\"LAST_ACK__RCV_ACK\"        : \"CLOSED\" }\n\n\ndef traverse_TCP_states(events, state=\"CLOSED\"):\n    for event in events:\n        QUERY = \"%s__%s\" % (state, event)\n        if QUERY in NEW_STATE:\n            state = NEW_STATE[QUERY]\n        else:\n            return \"ERROR\"\n    \n    return state", "def traverse_TCP_states(events):\n    state = 'CLOSED'\n    ACTION = {(\"CLOSED\",\"APP_PASSIVE_OPEN\"):\"LISTEN\",\n             (\"CLOSED\",\"APP_ACTIVE_OPEN\"):\"SYN_SENT\",\n             (\"LISTEN\",\"RCV_SYN\"):\"SYN_RCVD\",\n             (\"LISTEN\",\"APP_SEND\"):\"SYN_SENT\",\n             (\"LISTEN\",\"APP_CLOSE\"):\"CLOSED\",\n             (\"SYN_RCVD\",\"APP_CLOSE\"):\"FIN_WAIT_1\",\n             (\"SYN_RCVD\",\"RCV_ACK\"):\"ESTABLISHED\",\n             (\"SYN_SENT\",\"RCV_SYN\"):\"SYN_RCVD\",\n             (\"SYN_SENT\",\"RCV_SYN_ACK\"):\"ESTABLISHED\",\n             (\"SYN_SENT\",\"APP_CLOSE\"):\"CLOSED\",\n             (\"ESTABLISHED\",\"APP_CLOSE\"):\"FIN_WAIT_1\",\n             (\"ESTABLISHED\",\"RCV_FIN\"):\"CLOSE_WAIT\",\n             (\"FIN_WAIT_1\",\"RCV_FIN\"):\"CLOSING\",\n             (\"FIN_WAIT_1\",\"RCV_FIN_ACK\"):\"TIME_WAIT\",\n             (\"FIN_WAIT_1\",\"RCV_ACK\"):\"FIN_WAIT_2\",\n             (\"CLOSING\",\"RCV_ACK\"):\"TIME_WAIT\",\n             (\"FIN_WAIT_2\",\"RCV_FIN\"):\"TIME_WAIT\",\n             (\"TIME_WAIT\",\"APP_TIMEOUT\"):\"CLOSED\",\n             (\"CLOSE_WAIT\",\"APP_CLOSE\"):\"LAST_ACK\",\n             (\"LAST_ACK\",\"RCV_ACK\"):\"CLOSED\"}\n    for event in events:\n        state = ACTION[state,event] if (state,event) in ACTION else 'ERROR'\n    return state", "\n\ndef traverse_TCP_states(events):\n    lib = {\n    (\"CLOSED\", \"APP_PASSIVE_OPEN\") : \"LISTEN\",\n    (\"CLOSED\", \"APP_ACTIVE_OPEN\")  : \"SYN_SENT\",\n    (\"LISTEN\", \"RCV_SYN\")          : \"SYN_RCVD\",\n    (\"LISTEN\", \"APP_SEND\")         : \"SYN_SENT\",\n    (\"LISTEN\", \"APP_CLOSE\")        : \"CLOSED\",\n    (\"SYN_RCVD\", \"APP_CLOSE\")      : \"FIN_WAIT_1\",\n    (\"SYN_RCVD\", \"RCV_ACK\")        : \"ESTABLISHED\",\n    (\"SYN_SENT\", \"RCV_SYN\")        : \"SYN_RCVD\",\n    (\"SYN_SENT\", \"RCV_SYN_ACK\")    : \"ESTABLISHED\",\n    (\"SYN_SENT\", \"APP_CLOSE\")      : \"CLOSED\",\n    (\"ESTABLISHED\", \"APP_CLOSE\")   : \"FIN_WAIT_1\",\n    (\"ESTABLISHED\", \"RCV_FIN\")     : \"CLOSE_WAIT\",\n    (\"FIN_WAIT_1\", \"RCV_FIN\")      : \"CLOSING\",\n    (\"FIN_WAIT_1\", \"RCV_FIN_ACK\")  : \"TIME_WAIT\",\n    (\"FIN_WAIT_1\", \"RCV_ACK\")      : \"FIN_WAIT_2\",\n    (\"CLOSING\", \"RCV_ACK\")         : \"TIME_WAIT\",\n    (\"FIN_WAIT_2\", \"RCV_FIN\")      : \"TIME_WAIT\",\n    (\"TIME_WAIT\", \"APP_TIMEOUT\")   : \"CLOSED\",\n    (\"CLOSE_WAIT\", \"APP_CLOSE\")    : \"LAST_ACK\",\n    (\"LAST_ACK\", \"RCV_ACK\")        : \"CLOSED\"\n    }\n    state = \"CLOSED\"\n    for command in events:\n        state = lib.get((state, command), \"ERROR\")\n    return state\n            \n", "import abc\n\nclass Condition(abc.ABC):\n    @abc.abstractmethod\n    def check_condition(self, params):\n        pass\n\nclass ConditionEvent(Condition):\n    def __init__(self, event_name):\n        self.event_name = event_name\n\n    def check_condition(self, params):\n        event_name = params\n        return self.event_name == event_name\n\nclass Transition:\n    def __init__(self, fsm, to):\n        self.fsm = fsm\n        self.to = to\n        self.conditions = []\n\n    def check_conditions(self, params):\n        return all(cond.check_condition(params) for cond in self.conditions)\n\n\nclass State:\n    def __init__(self, fsm, name):\n        self.name = name\n        self.transitions = []\n\n    def next_state(self, params):\n        next_state = next((trans.to for trans in self.transitions\n                          if trans.check_conditions(params)), None)\n        return next_state\n\nclass FSM:\n    def __init__(self):\n        self.cur_state_name = None\n        self.states = {}\n\n    def next_state(self, params):\n        cur_state = self.states[self.cur_state_name]\n        next_state = cur_state.next_state(params)\n        if next_state is None:\n            raise RuntimeError(\"Error\")\n        self.cur_state_name = next_state\n\ndef create_scheme():\n    scheme_str = \"\"\"\nCLOSED: APP_PASSIVE_OPEN -> LISTEN\nCLOSED: APP_ACTIVE_OPEN  -> SYN_SENT\nLISTEN: RCV_SYN          -> SYN_RCVD\nLISTEN: APP_SEND         -> SYN_SENT\nLISTEN: APP_CLOSE        -> CLOSED\nSYN_RCVD: APP_CLOSE      -> FIN_WAIT_1\nSYN_RCVD: RCV_ACK        -> ESTABLISHED\nSYN_SENT: RCV_SYN        -> SYN_RCVD\nSYN_SENT: RCV_SYN_ACK    -> ESTABLISHED\nSYN_SENT: APP_CLOSE      -> CLOSED\nESTABLISHED: APP_CLOSE   -> FIN_WAIT_1\nESTABLISHED: RCV_FIN     -> CLOSE_WAIT\nFIN_WAIT_1: RCV_FIN      -> CLOSING\nFIN_WAIT_1: RCV_FIN_ACK  -> TIME_WAIT\nFIN_WAIT_1: RCV_ACK      -> FIN_WAIT_2\nCLOSING: RCV_ACK         -> TIME_WAIT\nFIN_WAIT_2: RCV_FIN      -> TIME_WAIT\nTIME_WAIT: APP_TIMEOUT   -> CLOSED\nCLOSE_WAIT: APP_CLOSE    -> LAST_ACK\nLAST_ACK: RCV_ACK        -> CLOSED\n\"\"\"\n\n    scheme = []\n    for line in scheme_str.splitlines():\n        if not line:\n            continue\n    \n        from_state, rest = line.split(\":\")\n        event, to_state = rest.split(\"->\")\n        scheme.append((from_state.strip(), to_state.strip(), event.strip()))\n\n    return scheme\n\ndef create_fsm(scheme):\n    fsm = FSM()\n    for from_state_name, to_state_name, event in scheme:\n        try:\n            state = fsm.states[from_state_name]\n        except KeyError:\n            state = fsm.states[from_state_name] = State(fsm, from_state_name)\n    \n        transtion = Transition(fsm, to=to_state_name)\n        transtion.conditions.append(ConditionEvent(event))\n        state.transitions.append(transtion)\n\n    return fsm\n\ndef traverse_TCP_states(events):\n    scheme = create_scheme()\n    fsm = create_fsm(scheme)\n    fsm.cur_state_name = \"CLOSED\"\n\n    try:\n        for event in events:\n            fsm.next_state(event)\n    except:\n        return \"ERROR\"\n    else:\n        return fsm.cur_state_name", "def traverse_TCP_states(events):\n    state = \"CLOSED\"  # initial state, always\n    transitiontable = {\n        'CLOSED':{'APP_PASSIVE_OPEN':'LISTEN', 'APP_ACTIVE_OPEN':'SYN_SENT'},\n        'LISTEN':{'RCV_SYN':'SYN_RCVD', 'APP_SEND':'SYN_SENT', 'APP_CLOSE':'CLOSED'},\n        'SYN_RCVD':{'APP_CLOSE':'FIN_WAIT_1', 'RCV_ACK':'ESTABLISHED'},\n        'SYN_SENT':{'RCV_SYN':'SYN_RCVD', 'RCV_SYN_ACK':'ESTABLISHED', 'APP_CLOSE':'CLOSED'},\n        'ESTABLISHED':{'APP_CLOSE':'FIN_WAIT_1', 'RCV_FIN':'CLOSE_WAIT'},\n        'FIN_WAIT_1':{'RCV_FIN':'CLOSING', 'RCV_FIN_ACK':'TIME_WAIT', 'RCV_ACK':'FIN_WAIT_2'},\n        'CLOSING':{'RCV_ACK':'TIME_WAIT'},\n        'FIN_WAIT_2':{'RCV_FIN':'TIME_WAIT'},\n        'TIME_WAIT':{'APP_TIMEOUT':'CLOSED'},\n        'CLOSE_WAIT':{'APP_CLOSE':'LAST_ACK'},\n        'LAST_ACK':{'RCV_ACK':'CLOSED'}\n    }\n    for i in events:\n        try:\n            state = transitiontable[state][i]\n        except:\n            return 'ERROR'\n    return state"]