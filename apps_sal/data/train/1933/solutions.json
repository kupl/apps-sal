["class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         a = a.split('+')\n         b = b.split('+')\n         a[1] = a[1][:-1]\n         b[1] = b[1][:-1]\n         a = list(map(int, a))\n         b = list(map(int, b))\n         print((a, b))\n         r = a[0]*b[0] - a[1]*b[1]\n         i = a[1]*b[0] + a[0]*b[1]\n         print((r, i))\n         return \"{0}+{1}i\".format(r, i)\n", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         a1=b1=a2=b2 = 0\n         a = a.split(\"+\")\n         b = b.split(\"+\")\n         a1 = int(a[0])\n         a2 = int(b[0])\n         b1 = int(a[1][:-1])\n         b2 = int(b[1][:-1])\n         a3 = a1*a2-b1*b2\n         b3 = a1*b2+b1*a2\n         return str(a3)+\"+\"+str(b3)+\"i\"\n", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         a_r, a_u = self.parse_str(a)\n         b_r, b_u = self.parse_str(b)\n         res_r = a_r*b_r - a_u*b_u\n         res_u = a_r*b_u + a_u*b_r\n         return \"{0}+{1}i\".format(res_r, res_u)\n \n     def parse_str(self,str):\n         strs = str.split(\"+\")\n         real = int(strs[0])\n         unreal = int(strs[1][:-1])\n         return real, unreal\n", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         \n         # a( e + f ) * b( g + h )\n         \n         \n         ae, af = a.split('+')\n         af = af[:-1]\n         ae, af = int(ae), int(af)\n         \n         bg, bh = b.split('+')\n         bh = bh[:-1]\n         bg, bh = int(bg), int(bh)\n         \n         \n         ae_bg = ae * bg\n         \n         ae_bh = ae * bh\n         af_bg = af * bg\n         \n         af_bh = af * bh\n         \n         first_term = ae_bg + (-1) * af_bh\n         second_term = ae_bh + af_bg\n         \n         format_str = '{}+{}i'.format(str(first_term), str(second_term))\n         \n         return format_str\n         \n         \n         \n", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         \n         aR = self.getReal(a)\n         bR = self.getReal(b)\n         aI = self.getImg(a)\n         bI = self.getImg(b)\n         \n         real = aR * bR - aI * bI\n         img = aR * bI + aI * bR\n         \n         return str(real) + \"+\" + str(img) + \"i\"\n         \n     \n     \n     def getReal(self, s):\n         res = s[0]\n         for char in s[1:]:\n             if char == \"+\" or char == \"-\":\n                 break\n             else:\n                 res += char\n         \n         return int(res)\n     \n     \n     def getImg(self, s):\n         res = \"\"\n         pos = 0\n         for i in range(1, len(s)):\n             if s[i] == \"+\" or s[i] == \"-\":\n                 pos = i + 1\n                 break\n     \n         while s[pos] != \"i\":\n             res += s[pos]\n             pos += 1\n         \n         return int(res)\n                     \n", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         indice1 = a.index('+')\n         indice2 = b.index('+')\n         real1 = int(a[0:indice1])\n         unreal1 = int(a[indice1+1:-1])\n         real2 = int(b[0:indice2])\n         unreal2 = int(b[indice2+1:-1])\n         return str(real1*real2-unreal1*unreal2)+'+'+str(unreal1*real2+real1*unreal2)+'i'\n", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         def parse_complex(s):\n             real, image = s.split('+')\n             return int(real), int(image[:-1])\n         \n         r_a, i_a = parse_complex(a)\n         r_b, i_b = parse_complex(b)\n         \n         def construct_complex(real, image):\n             return str(real) + '+' + str(image) + 'i'\n         \n         return construct_complex(r_a * r_b - i_a * i_b, r_a * i_b + r_b * i_a)", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         \n         a1 = int(a.split('+')[0])\n         a2 = int(a.split('+')[1].replace('i',''))\n         b1 = int(b.split('+')[0])\n         b2 = int(b.split('+')[1].replace('i',''))\n         \n         m1 = a1 * b1 - a2 * b2\n         m2 = a1 * b2 + a2 * b1\n         \n         return str(m1) + '+' + str(m2) + 'i'", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         ca = self.toTuple(a)\n         cb = self.toTuple(b)\n         return self.fromTuple(self.multiply(ca, cb))\n         \n     def toTuple(self, a):\n         index = a.index('+')\n         return int(a[:index]), int(a[index+1: -1])\n     \n     def fromTuple(self, a):\n         return '{}+{}i'.format(a[0], a[1])\n     \n     def multiply(self, a, b):\n         return a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]\n", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         re_a, im_a = map(int, a.replace('i', '').split('+'))\n         re_b, im_b = map(int, b.replace('i', '').split('+'))\n         return str(re_a*re_b - im_a*im_b) + \"+\" + str(re_a*im_b+re_b*im_a) + \"i\"", "import re\n \n class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         pattern = r\"-?\\d+\"\n         l1 = list(map(int, re.findall(pattern, a)))\n         l2 = list(map(int, re.findall(pattern,b)))\n         whole = (l1[0] * l2[0]) - (l1[1] * l2[1])\n         comp = (l1[0] * l2[1]) + (l2[0] * l1[1])\n         return (str(whole) + '+' + str(comp)+ 'i')\n         ", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         a1 = int(a.split('+')[0]);  b1 = int(a.split('+')[1][:-1]) \n         a2 = int(b.split('+')[0]);  b2 = int(b.split('+')[1][:-1])\n         \n         a = a1*a2 - b1*b2\n         b = b1*a2 + a1*b2\n         \n         return  str(a) + '+' + str(b) + 'i' ", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         (A, B) = self.parse_complex(a)\n         (C, D) = self.parse_complex(b)\n         return \"%d+%di\" % (A * C - B * D, A * D + B * C)\n \n     def parse_complex(self, content):\n         [a, b] = content.split('+')\n         return int(a), int(b[:-1])", "class Solution:\n     def complexNumberMultiply(self, a, b):\n         \"\"\"\n         :type a: str\n         :type b: str\n         :rtype: str\n         \"\"\"\n         a = a.split(\"+\")\n         b = b.split(\"+\")\n         a1 = int(a[0])\n         a2 = int(a[-1][:-1])\n         b1 = int(b[0])\n         b2 = int(b[-1][:-1])\n         \n         print(a1)\n         print(a2)\n         \n         c1 = a1*b1 - a2*b2\n         c2 = a1*b2 + a2*b1\n         \n         \n         return str(c1) + \"+\" + str(c2) + \"i\""]