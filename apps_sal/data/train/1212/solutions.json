["from sys import stdin\nfrom collections import Counter\n\ndef func(arr,n,l):\n count=0\n k=l//n\n if n<len(arr):\n  for ele in arr[0:n]:\n   count+=max(0,k-ele)\n else:\n  for ele in arr:\n   count+=max(0,ele-k)\n return count \n\nfor _ in range(int(stdin.readline())):\n s=stdin.readline().strip()\n d=Counter(s)\n arr=sorted(list(d.values()),reverse=True)\n l=len(s)\n val=[1]\n for i in range(2,27):\n  if l%i==0:\n   val.append(i)\n\n ans = float('inf')\n for ele in val:\n  x = func(arr,ele,l)\n  if x < ans:\n   ans = x\n print(ans) \n", "def hash_it(arr, s): # to count occurences of each letter and returning a \u00a0\u00a0\u00a0\u00a0reverse sorted array\n for i in range(len(s)):\n  arr[ord(s[i]) - 65] += 1 # counting occurences of each letter\n arr = sorted(arr, reverse = True) # reverse sorting the array\n return arr\ndef balance(s, arr, l): # balancing the string\n val = len(set(s))\n res = 10000000000\n pp = 0\n for p in range(1,27):\n  ptr = 0\n  if l % p == 0:\n   var = l // p\n   for q in range(p):\n    if arr[q] > var:\n     ptr += arr[q] - var\n   for q in range(p,26):\n    if arr[q] > 0:\n     ptr += arr[q]\n   res = min(ptr,res)\n  pp += 1\n if pp == 26:\n  pp = 0 \n return(res) \n \nfor _ in range(int(input())): # number of test cases\n s = input() # input string\n l = len(s) # length of the string\n if l <= 2: # if length is 2 or less, it is already balanced\n  print(0)\n  continue\n arr = [0 for i in range(0,27)]\n arr = hash_it(arr,s)\n print(balance(s, arr, l))\n \n \n \n \n \n \n  \n", "t = int(input())\nS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nwhile t > 0:\n max=1000000\n s=input()\n d={}\n ll=[]\n for str in S:\n  d[str]=0\n for i in range(1,27):\n  if len(s) % i==0:\n   ll.append(i)\n for i in s:\n  d[i]+=1\n l=sorted(d.items(), key=lambda ele: ele[1], reverse=True)\n i=0; ans=0\n while i < len(ll):\n  cnt=len(s) // ll[i]\n  for j in range(ll[i]):\n   if l[j][1] < cnt:\n    ans+=cnt-l[j][1]\n  i+=1\n  if ans < max:\n   max=ans\n  ans=0\n print(max)\n t -= 1", "import numpy as np\nfrom math import floor\ndef getFactors(n):\n factors=[];\n\n for i in range(1, n + 1):\n  if (n % i == 0 and (n/i)<27):\n   factors.append(i)\n #print(factors)\n return factors\n\nt=input()\nt=int(t)\nwhile(t>0):\n t-=1\n s=input()\n n=len(s)\n fact=getFactors(n)\n str=list(s)\n #print(fact)\n tot=0\n u, c = np.unique(str, return_counts=True)\n \n c[::-1].sort()\n #print(c)\n c_sum=c.sum()\n c_size=len(c)\n \n min=100000000\n #  print(length_c)\n for i in fact:\n  tot=0\n  k=floor(c_sum/i)\n  #print(k)\n  if(k<c_size):\n   for j in range(k):\n    if(c[j]-i>0):\n     tot+=c[j]-i\n   for j in range(k,c_size):\n    tot+=c[j]\n  #    print(tot)\n  else:\n   for j in c:\n    if(j-i>0):\n     tot+=j-i\n  #    print(tot)\n  if(tot<min):\n   min=tot\n  \n#       print(min)\n\n print(min) ", "# cook your dish here\nfrom collections import Counter\nt=int(input())\nfor i in range(t):\n s=input()\n c=Counter(s)\n l=list(c.values())\n l.sort(reverse=True)\n it=sum(l)\n k=len(l)\n ans=999999999\n while(k>=1):\n  if(it%k==0):\n   p=it//k\n   sumi=0\n   for j in range(len(l)):\n    if(l[j]>p):\n     sumi+=l[j]-p\n    else:\n     if(j>=k):\n      sumi+=l[j]\n   if(sumi<ans):\n    ans=sumi\n  k-=1\n k=len(l)+1\n while(k<=26 and k<=len(s)):\n  if(it%k==0):\n   p=it//k\n   sumi=0\n   for j in range(len(l)):\n    if(l[j]>p):\n     sumi+=l[j]-p\n    else:\n     break\n   if(sumi<ans):\n    ans=sumi\n  k+=1\n print(ans)\n", "# cook your dish here\nfor i in range(int(input())):\n s=input()\n l=[0 for i in range(26)]\n for i in s:\n  l[ord(i)-65]+=1 \n l.sort()\n n=len(s)\n ans=float('inf')\n for i in range(1,27):\n  temp=0\n  if(n%i==0):\n   p=n//i \n   for j in range(26-i):\n    temp+=l[j]\n   for j in range(26-i,26):\n    if(l[j]>p):\n     temp+=l[j]-p \n   ans=min(ans,temp)\n print(ans)\n    \n", "# cook your dish here\nimport sys\nR = lambda :list(map(int,input().split()))\nt = int(input())\nfor _ in range(t):\n string = input()\n n = len(string)\n a = [0]*26\n for i in string:\n  a[ord(i)-ord('A')]+=1\n rev_lst = sorted(a,reverse=True)\n ans = n\n for i in range(1,27):\n  if n%i==0:\n   x = int(n/i)\n   y = 0\n   for j in range(0,i):\n    y+=min(rev_lst[j], x)\n   ans = min(ans,n-y)\n\n print(ans)\n\n", "# cook your dish here\nn=int(input())\ndef find(arr,num):\n auxarr=[0]*(len(arr)-sum(arr)//num)+[num]*(sum(arr)//num)\n ans=sum([abs(auxarr[i]-arr[i]) for i in range(len(arr))])/2\n return ans\nletters=['A','B','C','D','E','F','G','H','I',\n   'J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\nfor _ in range(n):\n string=list(input())\n length=len(string)\n dic={letter:0 for letter in letters}\n for letter in string:\n  dic[letter]+=1\n arr=[dic[letter] for letter in letters]\n arr.sort()\n currentmin=float(\"inf\")\n for i in range(length//26,length+1):\n  if i==0:\n   continue\n  if length%i==0 and i!=0:\n   currentmin=min(currentmin,find(arr,i))\n print(int(currentmin))\n \n", "for t in range(int(input())):\n s = input()\n l = sorted([char for char in s])\n i = 0; x =[] \n cnt = 1\n while(i<len(l)-1):\n  if(l[i]!=l[i+1]):\n   x.append(cnt)\n   cnt = 0\n  cnt = cnt+1\n  i = i+1\n x.append(cnt) \n #print(l,\"\\n\",x)\n m=0\n for k in range(len(x),27):\n  #print(sum(x),i)\n  if(sum(x)%k==0):\n   m = sum(x)//k\n   #print(m,i)\n   break\n z = [max(0,a - m) for a in x] \n   \n for i in range(len(x),0,-1):\n  #print(sum(x),i)\n  if(sum(x)%i==0):\n   m = sum(x)//i\n   #print(m,i)\n   break\n y = [max(0,m - a) for a in x]\n print(min(sum(sorted(z)),sum(sorted(y)[0:i])))\n \n \n  \n \n  \n", "for t in range(int(input())):\n s = input()\n l = sorted([char for char in s])\n i = 0; x =[] \n cnt = 1\n while(i<len(l)-1):\n  if(l[i]!=l[i+1]):\n   x.append(cnt)\n   cnt = 0\n  cnt = cnt+1\n  i = i+1\n x.append(cnt) \n #print(l,\"\\n\",x)\n \n k = len(x)\n while(sum(x)%k!=0):\n  k = k+1 \n m = sum(x)//k\n z = [max(0,a - m) for a in x]\n   \n for i in range(len(x),0,-1):\n  #print(sum(x),i)\n  if(sum(x)%i==0):\n   m = sum(x)//i\n   #print(m,i)\n   break\n y = [max(0,m - a) for a in x]\n print(min(sum(sorted(z)),sum(sorted(y)[0:i])))\n \n \n  \n \n  \n", "T=int(input())\nwhile(T>0):\n S=input()\n ls=[0 for i in range(26)]\n for x in S:\n  ls[ord(x)-65]+=1\n n=len(S)\n c=1\n ls.sort(reverse = True)\n while(c<=26):\n  if(n%c != 0):\n   c=c+1\n   continue\n  else:\n   f=n//c\n   i=0\n   temp_min=0\n   while(i<c and i<len(ls)):\n    temp_min+=min(ls[i],f)\n    i=i+1\n   temp_min=n-temp_min \n   if(c==1):\n    minimum=temp_min\n   else:\n    if(minimum>temp_min):\n     minimum=temp_min\n  c=c+1\n print(minimum) \n T=T-1 ", "t = int(input())\nwhile t:\n s = input()\n n = len(s)\n res = n\n freq = [0]*26\n for i in s:\n  freq[ord(i) - 65] += 1\n freq.sort(reverse = True)\n for i in range(1,27):\n  if(n%i == 0):\n   x = 0\n   y = n//i\n   for j in range(i):\n    x += min(y, freq[j])\n   res = min(n-x,res)\n print(res)\n t -= 1", "for _ in range(int(input())):\n S=input()\n n=len(S)\n A=[0]*26\n for i in S:\n  A[ord(i)-65]+=1\n A.sort()\n A=A[::-1]\n res=n\n for i in range(min(n,26)):\n  if(n%(i+1)==0):\n   F=n//(i+1)\n   y=0\n   for j in range(i+1):\n    y+=min(A[j],F)\n   res=min(res,n-y)\n print(res)\n", "for _ in range(int(input())):\n S=input()\n n=len(S)\n A=[0]*26\n for i in S:\n  A[ord(i)-65]+=1\n A.sort()\n A=A[::-1]\n res=n\n for i in range(26):\n  if(n%(i+1)==0):\n   F=n//(i+1)\n   y=0\n   for j in range(i+1):\n    y+=min(A[j],F)\n   res=min(res,n-y)\n print(res)\n", "def solve_equal(lst,no_of_elem_in_group):\n dist = 0\n for i in lst:\n  if i > no_of_elem_in_group:\n   dist += abs(no_of_elem_in_group-i)\n return dist\n\ndef solve(lst,l,no_of_group):\n no_of_elem_in_group = l//no_of_group\n list_len = len(lst)\n dist = 0\n if no_of_group >= list_len:\n  return solve_equal(lst,no_of_elem_in_group)\n\n else:  # no_of_group < list_len\n  lst.sort()\n  dist = sum(lst[0:list_len-no_of_group])\n  return dist + solve_equal(lst,no_of_elem_in_group)\n\nT = int(input())\nfor z in range(T):\n dct = {}\n s = list(input())\n for elem in s:\n  try:\n   dct[elem] += 1\n  except:\n   dct[elem] = 1\n   \n lst = list(dct.values())\n l = len(s)\n mn = 99999999999999999\n for i in range(1,min(l+1,27)):\n  no_of_group = i\n  if l%no_of_group == 0:\n   lst2 = lst[:]\n   tmp = solve(lst2,l,no_of_group)\n   #print(i,tmp)\n   if tmp < mn:\n    mn = tmp\n print(mn)\n", "\nfor test_case in range(int(input())):\n S = str(input())\n N = len(S)\n A = [0] * 27\n for character in S:\n  A[ord(character) - 65] = A[ord(character) - 65] + 1\n A.sort(reverse=True)\n minSwap = N\n for i in range(1, 27):\n  if N % i == 0:\n   temp = N // i\n   tempSwap = 0\n   for f in range(i):\n    if temp > A[f]:\n     tempSwap = tempSwap + temp - A[f]\n   if tempSwap <= minSwap:\n    minSwap = tempSwap\n if minSwap == N + 1:\n  minSwap = 0\n print(minSwap)\n", "t = int(input())\nfor i in range(t):\n s = input()\n d = {}\n min1 = len(s)+1\n for i in s:\n  if i not in d:\n   d[i] = 1\n  else:\n   d[i] += 1\n l = [[x,y] for x,y in d.items()]\n l.sort(key = lambda j: j[1],reverse = True)\n for i in range(1,27):\n  f = len(s)//i\n  c = 0\n  if len(s)%i != 0:\n   continue\n  j = 0\n  while j < i and j < len(l):\n   if l[j][1] >= f:\n    c += f\n   else:\n    c += l[j][1]\n   j += 1\n  c = len(s)-c\n  if c<min1:\n   min1 = c\n print(min1)", "t = int(input())\nfor i in range(t):\n s = input()\n d = {}\n min1 = len(s)+1\n for i in s:\n  if i not in d:\n   d[i] = 1\n  else:\n   d[i] += 1\n l = [[x,y] for x,y in d.items()]\n l.sort(key = lambda j: j[1],reverse = True)\n for i in range(1,26):\n  f = len(s)//i\n  c = 0\n  if len(s)%i != 0:\n   continue\n  j = 0\n  while j < i and j < len(l):\n   if l[j][1] >= f:\n    c += f\n   else:\n    c += l[j][1]\n   j += 1\n  c = len(s)-c\n  if c<min1:\n   min1 = c\n print(min1)", "t = int(input())\nfor _ in range(t):\n str = input()\n new_str = set(str)\n char_freq = []\n for i in new_str:\n  char_freq.append(str.count(i))\n char_freq.sort(reverse=True)\n charachter = []\n frepuency = []\n for i in range(1,27):\n  if len(str)%i == 0:\n   charachter.append(i)\n   frepuency.append(len(str)/i)\n operation = []\n for j in range(len(charachter)):\n  p_operation = 0\n  n_operation = 0\n  for i in range(charachter[j]):\n   freq = frepuency[j]\n   try:\n    t_operation = freq - char_freq[i]\n    if t_operation > 0:\n     p_operation += t_operation\n    else:\n     n_operation += t_operation\n   except:\n    break\n  n_operation = abs(n_operation)\n  operation.append(max(p_operation, n_operation))\n\n print(int(min(operation)))"]