["class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         res = 0\n         num = 0\n         sign = 1\n         stk = []\n \n         for c in s:\n             if c.isdigit():\n                 num = 10 * num + (ord(c) - ord('0'))\n             elif c == '+':\n                 res += sign * num\n                 num = 0\n                 sign = 1\n             elif c == '-':\n                 res += sign * num\n                 num = 0\n                 sign = -1\n             elif c == '(':\n                 stk.append(res)\n                 stk.append(sign)\n                 res = 0\n                 sign = 1\n             elif c == ')':\n                 res += sign * num\n                 res *= stk.pop()\n                 res += stk.pop()\n                 num = 0\n                 sign = 1\n \n         if num:\n             res += sign * num\n         return res", "class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         total, tmp, sign = 0, 0, 1\n         numStack = []\n         signStack = []\n         for c in s:\n             if c == '+':\n                 total, tmp, sign = total + tmp*sign, 0, 1\n             elif c == '-':\n                 total, tmp, sign = total + tmp*sign, 0, -1\n             elif c == '(':\n                 numStack.append(total)\n                 signStack.append(sign)\n                 total, tmp, sign = 0, 0, 1\n             elif c == ')':\n                 total += tmp * sign\n                 total, tmp, sign = total * signStack.pop() + numStack.pop(), 0, 1\n             elif '0' <= c <= '9':\n                 tmp = tmp * 10 + ord(c) - ord('0')\n             else:\n                 continue\n         return total + tmp * sign", "class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if not s:\n             return 0\n         \n         res=0\n         sign=1\n         \n         stack=[1]\n         \n         num=0\n         \n         for c in s:\n             \n             if c <='9' and c>='0':\n                 num=num*10+ord(c)-ord('0')\n                 #print(num)\n             elif c in '+-':\n                 res+=sign*num\n                 #print(res)\n                 if c=='+':\n                    #print(stack)\n                    sign=stack[-1]\n                 else:\n                    sign=stack[-1]*(-1)\n                 num=0\n             elif c=='(':\n                 stack.append(sign)\n             elif c==')':\n                 stack.pop()\n         #print('outsideloop',res)\n         res+=sign*num\n         \n         return res", "class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         stack = []\n         res = 0\n         sign = 1\n         number = 0\n         for i in range(len(s)):\n             c = s[i]\n             if c.isdigit():\n                 number = number * 10 + int(c)\n                 \n             elif c == \"+\":\n                 \n                 res += number * sign\n                 sign = 1\n                 number = 0\n             \n             elif c == '-':\n                 \n                 res += number * sign\n                 sign = -1\n                 number = 0\n             elif c == \"(\":\n                 stack.append(res)\n                 stack.append(sign)\n                 res = 0\n                 sign = 1\n                 number = 0\n             elif c == ')':\n                 res += number * sign\n                 res *= stack.pop()\n                 res += stack.pop()\n                 number = 0\n                 sign = 1\n         \n         res += number * sign\n                 \n         \n         return res", "class Solution:\n     def calculate(self, s):\n         result = number = 0 \n         sign = 1\n         stack= []\n         for i in s:\n             if i == ' ':\n                 continue\n             if i.isdigit():\n                 number = number * 10 + int(i)\n             elif i == '+':\n                 result += sign * number\n                 number = 0 \n                 sign = 1 \n             elif i == '-':\n                 result += sign * number \n                 number = 0 \n                 sign = -1\n             elif i == '(':\n                 stack.append(result)\n                 stack.append(sign)\n                 result = 0 \n                 number = 0 \n                 sign = 1 \n             elif i == ')':\n                 result += sign * number \n                 number =  0\n                 sign = 1 \n                 #result += stack.pop() * stack.pop()\n                 result = result * stack.pop() + stack.pop()\n         result += number * sign\n         return result \n                 \n", "class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         sign=[1]\n         nums=0\n         total=0\n         latestsign=1\n         for c in s:\n             \n             if c.isdigit():\n                 nums=10*nums+int(c)\n             elif c=='(':\n                 nums=0\n                 sign.append(latestsign)\n             elif c==')':\n                 total=total+latestsign*nums\n                 sign.pop()\n                 nums=0\n             elif c in ['+','-']:\n                 total=total+latestsign*nums\n                 latestsign=sign[-1]*(+1 if c=='+' else -1)\n                 nums=0\n         \n         return total+latestsign*nums", "class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         expression = s\n         s = []\n         res = 0\n         curr = 0\n         sign = 1\n         for c in expression:\n             # print(c,res)\n             if c.isdigit():\n                 curr *= 10\n                 curr += int(c)\n             if c == \"+\":\n                 res += sign * curr\n                 curr = 0\n                 sign = 1\n             if c == \"-\":\n                 res += sign * curr\n                 curr = 0\n                 sign = -1\n             if c == \"(\":\n                 s.append(res)\n                 s.append(sign)\n                 sign = 1\n                 res = 0\n             if c == \")\":\n                 res += sign * curr\n                 curr = 0\n                 res *= s.pop()\n                 res += s.pop()\n         \n         if curr != 0:\n             res += sign * curr\n         return res\n             \n                 \n"]