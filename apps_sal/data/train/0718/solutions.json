["import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\ninp = lambda: list(map(int,sys.stdin.readline().rstrip(\"\\r\\n\").split()))\n#_______________________________________________________________________________\u00a0\u00a0\u00a0\u00a0_______________________\n# from math import *\n# from bisect import *\n# from heapq import *\n# from collections import defaultdict as dd\n# from collections import OrderedDict as odict\n# from collections import Counter as cc\n# from collections import deque\n# sys.setrecursionlimit(2*(10**5)+100) this is must for dfs\n# mod = 10**9+7; md = 998244353\n# ______________________________________________________________________________\u00a0\u00a0\u00a0\u00a0________________________\n# segment tree for range minimum query\n# sys.setrecursionlimit(10**5)\n# n = int(input())\n# a = list(map(int,input().split()))\n# st = [float('inf') for i in range(4*len(a))]\n# def build(a,ind,start,end):\n#   if start == end:\n#       st[ind] = a[start]\n#   else:\n#       mid = (start+end)//2\n#       build(a,2*ind+1,start,mid)\n#       build(a,2*ind+2,mid+1,end)\n#       st[ind] = min(st[2*ind+1],st[2*ind+2])\n# build(a,0,0,n-1)\n# def query(ind,l,r,start,end):\n#   if start>r or end<l:\n#       return float('inf')\n#   if l<=start<=end<=r:\n#       return st[ind]\n#   mid = (start+end)//2\n#   return min(query(2*ind+1,l,r,start,mid),query(2*ind+2,l,r,mid+1,end))\n# ______________________________________________________________________________\u00a0\u00a0\u00a0\u00a0________________________\n# Checking prime in O(root(N))\n# def isprime(n):\n#     if (n % 2 == 0 and n > 2) or n == 1: return 0\n#     else:\n#         s = int(n**(0.5)) + 1\n#         for i in range(3, s, 2):\n#             if n % i == 0:\n#                 return 0\n#         return 1\n# def lcm(a,b):\n#   return (a*b)//gcd(a,b)\n# ______________________________________________________________________________\u00a0\u00a0\u00a0\u00a0________________________\n# nCr under mod\n# def C(n,r,mod):\n#   if r>n:\n#       return 0\n#   num = den = 1\n#   for i in range(r):\n#       num = (num*(n-i))%mod\n#       den = (den*(i+1))%mod\n#   return (num*pow(den,mod-2,mod))%mod\n# M = 10**5 +10\n# ______________________________________________________________________________\u00a0\u00a0\u00a0\u00a0________________________\n# For smallest prime factor of a number\n# M = 1000010\n# pfc = [i for i in range(M)]\n# def pfcs(M):\n#   for i in range(2,M):\n#       if pfc[i]==i:\n#           for j in range(i+i,M,i):\n#               if pfc[j]==j:\n#                   pfc[j] = i\n#   return\n# pfcs(M)\n# ______________________________________________________________________________\u00a0\u00a0\u00a0\u00a0________________________\ntc = 1\ntc, = inp()\na = [0,1]\nfor i in range(100000):\n a.append(a[-1]+a[-2])\nfor _ in range(tc):\n n, = inp()\n start = 0\n for i in range(n):\n  print(*a[start:start+i+1])\n  print()\n  start +=i+1", "# cook your dish here\nf = []\nfor i in range(100000+1):\n if i==0:\n  f.append(0)\n elif i==1:\n  f.append(1)\n else:\n  f.append(f[-1]+f[-2])\n\nfor _ in range(int(input())):\n n = int(input())\n count = 0\n for i in range(1,n+1):\n  for j in range(i):\n   print(f[count],end=\" \")\n   count += 1\n  print()", "def solve(n):\n if n ==1:\n  print('0')\n  return\n l = 3\n p1= 1\n p2 = 1\n print('0')\n print('1 1')\n for i in range(n-2):\n  x = ''\n  for i in range(l):\n   nt = p1+p2\n   c = p2\n   p2 = nt\n   p1 = c\n   x+=str(nt)\n   if i!=l-1:\n    x+=' '\n\n  print(x)\n  l+=1\n\ndef main():\n t = int(input())\n for i in range(t):\n  n = int(input())\n  solve(n)\n\n\nmain()\n", "def func(num):\n no_terms = num*(num+1)//2\n lst = [0, 1]\n for i in range(2, no_terms):\n  lst.append(lst[i-1] + lst[i-2])\n k = 0\n for i in range(1, num+1):\n  for j in range(i):\n   print(lst[k], ' ', end='')\n   k += 1\n  print()\n\n\n\nfor _ in range(int(input())):\n num = int(input())\n func(num)\n", "def f(n):\n if n==1:\n  return print(0)\n print(\"0\\n1 1\")\n if n==2:\n  return\n fibo = [0, 1, 1]\n p = 3\n line = 3\n while line <= n:\n  for _ in range(line):\n   fibo.append(fibo[-1]+fibo[-2])\n   print(fibo[-1], \"\", end=\"\")\n  print()\n  line += 1\n\nt = int(input())\nanswers = list()\nfor _ in range(t):\n n = int(input())\n answers.append(n)\n\nfor answer in answers:\n f(answer)", "t=int(input())\nfor i in range(t):\n s=0\n r=1\n n=int(input())\n for j in range(0,n+1):\n  for k in range(0,j):\n   print(s,end=\" \")\n   p=r+s\n   s,r=r,p\n  print()", "t=int(input())\nfor i in range(t):\n s=0\n r=1\n n=int(input())\n for j in range(0,n+1):\n  for k in range(0,j):\n   print(s,end=\" \")\n   p=r+s\n   s,r=r,p\n  print()", "t=int(input())\nfor i in range(t):\n s=0\n r=1\n n=int(input())\n for j in range(0,n+1):\n  for k in range(0,j):\n   print(s,end=\" \")\n   p=r+s\n   s,r=r,p\n  print()\n", "t = int(input())\nfor _ in range(t):\n n = int(input())\n a = 1\n b = 2\n for i in range(n):\n  for j in range(i+1):\n   if i==0:\n    print('0',end = ' ')\n   elif i==1:\n    print('1',end=' ')\n   else:\n    print(b,end = ' ')\n    c = b\n    b = a+b\n    a = c\n    \n  print()", "# Function for nth fibonacci number - Space Optimisataion \n# Taking 1st two fibonacci numbers as 0 and 1 \ns=[]\ndef fibonacci(n): \n a = 0\n b = 1\n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return a \n elif n == 1: \n  return b \n else: \n  for i in range(2,n): \n   c = a + b \n   a = b \n   b = c \n  return b \n\n# Driver Program \nfor _ in range(1,101):\n s.append(fibonacci(_)) \ns[0]=0 \n\n#This code is contributed by Saket Modi \n\nfor _ in range(int(input())):\n n=int(input())\n # s=[0,1,1,2,3,5,8,13,21,34]\n p=0\n for _ in range(1,n+1):\n  for __ in range(1,_+1):\n   print(s[p],end=\" \")\n   p+=1\n  print()\n print() ", "t = int(input())\nf = [0, 1]\nfor i in range(2, 100):\n f.append(f[i - 1] + f[i - 2])\n # print(f[i], ' ')\nfor i in range(t):\n n = int(input())\n cnt = 0\n for j in range(1, n + 1):\n  for k in range(1, j + 1):\n   print(f[cnt], end=' ')\n   cnt += 1\n  print()", "# cook your dish here\nt = int(input())\ntp = [];\ntp.append(0)\ntp.append(1)\nfor i in range(2,5050):\n tp.append(tp[i-1]+tp[i-2])\nfor i in range(t):\n n = int(input())\n c = 0\n for j in range(1,n+1):\n  for k in range(1,j+1):\n   print(tp[c],sep = ' ',end=' ')\n   c += 1;\n  print() \n ", "for _ in range(int(input())):\n n=int(input())\n r=2\n if(n==1):\n  print(\"0\")\n  continue\n print(\"0\")\n print(\"1 1\")\n b=1;c=0\n for i in range(3,n+1):\n  for j in range(i):\n   print(r,end=\" \")\n   c=r\n   r+=b\n   b=c\n  print()", "for _ in range(int(input())):\n K = int(input())\n if K == 1:\n  print(0)\n elif K == 2:\n  print(0)\n  print(*[1, 1])\n else:\n  print(0)\n  print(*[1, 1])\n  l = 1\n  c = 1\n  for i in range(2, K):\n   A = []\n   for j in range(i+1):\n    A.append(l+c)\n    l = c\n    c = A[-1]\n   print(*A)", "t = int(input())\nwhile t:\n t = t - 1\n k = int(input())\n if k==1:\n  print(\"0\")\n else:\n  a = 1\n  b = 1\n  print(\"0\")\n  print(\"1 1\")\n  for i in range(2,k):\n   for j in range(0,i+1):\n    c = a + b\n    print(c,end=\" \")\n    a = b\n    b = c\n   print()\n", "from sys import stdin, stdout\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef inp(): return stdin.readline().strip()\ndef out(var, end=\"\\n\"): stdout.write(str(var)+\"\\n\")\ndef outa(*var, end=\"\\n\"): stdout.write(' '.join(map(str, var)) + end)\ndef lmp(): return list(mp())\ndef mp(): return map(int, inp().split())\ndef smp(): return map(str, inp().split())\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\ndef remadd(x, y): return 1 if x%y else 0\ndef ceil(a,b): return (a+b-1)//b\n\ndef isprime(x):\n if x<=1: return False\n if x in (2, 3): return True\n if x%2 == 0: return False\n for i in range(3, int(sqrt(x))+1, 2):\n  if x%i == 0: return False\n return True\n \nfor _ in range(int(inp())):\n n = int(inp())\n ml = [0]\n for i in range(1, n+1):\n  for j in range(i):\n   print(ml[-1],end=\" \")\n   if len(ml)==1:\n    ml.append(ml[-1]+1)\n   else:\n    ml.append(ml[-1]+ml[-2])\n  print()", "t = int(input())\nwhile t > 0:\n n = int(input())\n if n == 1:\n  print('0')\n  t -= 1\n  continue\n num = (n * (n + 1)) // 2;\n fib = [0 for i in range(num)]\n fib[0] = 0\n fib[1] = 1\n for i in range(2, num):\n  fib[i] = fib[i - 1] + fib[i - 2]\n cnt = 0\n for i in range(n):\n  for j in range(i + 1):\n   print(fib[cnt], end = ' ')\n   cnt += 1\n  print()\n t -= 1", "# cook your dish here\nt=int(input())\narr=[0,1]\nfor i in range(2,101):\n arr.append(arr[i-1]+arr[i-2])\nwhile t>0:\n n=int(input())\n m=0\n for i in range(0,n):\n  for j in range(0,i+1):\n   print(arr[m],end=' ')\n   m+=1\n  print()\n t-=1\n \n \n"]