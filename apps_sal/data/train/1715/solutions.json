["def justify(text, width):\n    length = text.rfind(' ', 0, width+1)\n    if length == -1 or len(text) <= width: return text\n    line = text[:length]\n    spaces = line.count(' ')\n    if spaces != 0:\n        expand = (width - length) / spaces + 1\n        extra = (width - length) % spaces\n        line = line.replace(' ', ' '*expand)\n        line = line.replace(' '*expand, ' '*(expand+1), extra)\n    return line + '\\n' + justify(text[length+1:], width)", "def justify(text, width):\n    output = \"\"\n    while len(text) > width:\n        line = text[0:width]\n        if text[width] == ' ':\n            output += line + '\\n' \n            text = text[width+1:]\n            continue\n        line = line[0:line.rfind(' ')]\n        text = text[len(line)+1:]\n        words = line.split(\" \")\n        if len(words) > 1:\n            for x in xrange(0,width - len(line)):\n                words[x % (len(words)-1)] += ' '\n        output += \" \".join(words) + '\\n'\n    return output + text", "import textwrap\n\ndef justify(text, width):\n    def justify_line(line):\n        if ' ' not in line: \n            return line\n        places = line.count(' ')\n        spaces = width - len(line) + places\n        interval, extra = divmod(spaces, places)\n        return ''.join(word + ' ' * (interval + (i < extra)) \n                       for i, word in enumerate(line.split())).strip()\n                       \n    lines = textwrap.wrap(text, width, break_on_hyphens=False)\n    return '\\n'.join(list(map(justify_line, lines[:-1])) + [lines[-1]])\n", "  def justify(text, width):\n      output = \"\"\n      while len(text) > width:\n          line = text[0:width]\n          if text[width] == ' ': # Ideal case, cut on space, no need to justify anything\n              output += line + '\\n' \n              text = text[width+1:]\n              continue\n          line = line[0:line.rfind(' ')] # Remove the impartial word from the end of line\n          text = text[len(line)+1:]\n          words = line.split(\" \")\n          if len(words) > 1:\n          # If there are more than one word, add missing spacing by adding one space\n          # to each word except last one and repeat until there is no more missing spacing left.\n              for x in xrange(0,width - len(line)):\n                  words[x % (len(words)-1)] += ' '\n          output += \" \".join(words) + '\\n'\n      return output + text\n", "def justify(text, width):\n    lines, last = [[]], -1\n    for word in text.split():\n        if last + 1 + len(word) > width:\n            lines.append([word])\n            last = len(word)\n        else:\n            lines[-1].append(word)\n            last += len(word) + 1\n\n    def justify_line(words):\n        if len(words) == 1:\n            return words[0]\n        interval, extra = divmod(width - sum(map(len, words)), len(words) - 1)\n        init = (word + ' ' * (interval + (i < extra)) for i, word in enumerate(words[:-1]))\n        return ''.join(init) + words[-1]\n\n    return '\\n'.join(map(justify_line, lines[:-1]) + [' '.join(lines[-1])])", "def justify(t, w):\n    c = t.rfind(' ', 0, w + 1)\n    if c == -1 or len(t) <= w:\n        return t\n    c = t[:c]\n    t = t[len(c) + 1:]\n    x = ' '\n    if c.count(' ') != 0:\n        while len(c) != w:\n            if w - len(c) >= c.count(x):\n                c = c.replace(x, x + ' ')\n                x += ' '\n            else:\n                c = c.replace(x, x + ' ', w - len(c))\n    return c + '\\n' + justify(t, w)", "from itertools import cycle\ndef justify(s,n):\n    m, s, final, i = [], s.split(), [], 0\n    while i < len(s):\n        e = s[i]\n        if len(' '.join(final)) + len(e) + 1 <= n : final.append(e) ; i+=1\n        else:\n            final = \"  \".join(final).split(' ')\n            if len(final) == 1 : m.append(final[0])\n            else:\n                nex = cycle(range(1, len(final), 2))\n                while len(''.join(final)) < n : final[next(nex)] += ' '\n                m.append(''.join(final))\n            final = []\n    return '\\n'.join(m + [' '.join(final)])", "from textwrap import wrap\ndef justify(text, width):\n    lines = wrap(text, width)\n\n    def justify_line(line):\n        spaces = line.count(' ')\n\n        if not spaces:\n            return line\n\n        n, r = divmod(width - sum(map(len, line)), spaces)\n        print(sum(map(len,line)))\n        subs = ' ' * (n + 1)\n        return line.replace(' ', subs).replace(subs, subs + ' ', r)\n\n    return '\\n'.join([*map(justify_line, lines[:-1]), lines[-1]])", "def justify(txt, wid):\n    result, i, j, n = [], 0, 0, txt.find(\" \")\n    while True:\n        while -1 < n and n - i <= wid:\n            j, n = n, txt.find(\" \", n+1)\n        if n < 0 and len(txt[i:]) <= wid:\n            result.append(txt[i:])\n            break\n        result.append(expand(txt[i:j], wid))\n        i = j+1\n    return \"\\n\".join(result)\n\ndef expand(line, wid):\n    gap, spc, f = wid - len(line), line.count(\" \"), \" \".center\n    b, r = divmod(gap, spc) if spc else (0, 0)\n    return line.replace(\" \", f(b+1)).replace(f(b+1), f(b+2), r)\n", "import textwrap\n\n\ndef justify(text, width):\n    lines = textwrap.wrap(text, width)\n    for line in lines:\n        space = width - len(line)\n        words = line.split()\n        \n        #prevent method being applied to last line\n        if lines.index(line) == len(lines) -1:\n            break\n\n        if len(words) > 1:\n            for i in range(space):   \n                if i >= len(words)-1:\n                    i = i % (len(words) -1)\n                    \n                words[i] = words[i] + ' '\n               \n        \n        lines[lines.index(line)] =(' '.join(words))\n            \n    return('\\n'.join(lines))", "def iterate_over_lines(text, width):\n    i, lim = 0, len(text) - width\n    while i < lim:\n        j = text.rfind(' ', i, i + width + 1)\n        yield text[i: j]\n        i = j + 1\n    yield text[i:]\n    \ndef justify_line(line, width):\n    words = line.split()\n    if len(words) < 2:\n        return line\n    ch = sum(len(w) for w in words)\n    d, m = divmod(width - ch, len(words) - 1)\n    gaps = [' ' * (d + int(i < m)) for i in range(len(words) - 1)] + ['']\n    parts = [part for t in zip(words, gaps) for part in t]\n    return ''.join(parts)\n\ndef justify(text, width):\n    lines = list(iterate_over_lines(text, width))\n    lines = [justify_line(s, width) for s in lines[: -1]] + [lines[-1]]\n    return '\\n'.join(lines)\n"]