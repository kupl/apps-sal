["class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        mod = int(1e9)+7\n        return ( ( self.getMax(horizontalCuts, h) % mod ) * ( self.getMax(verticalCuts, w) % mod ) ) % mod\n        \n    def getMax(self, cuts, size):\n        if len(cuts) == 1:\n            return max(cuts[0], size - cuts[0])\n        \n        cuts.sort()\n        \n        max_cut_size = max(cuts[0], size - cuts[-1])\n        for index in range(1, len(cuts)):\n            if cuts[index] - cuts[index - 1] > max_cut_size:\n                max_cut_size = cuts[index] - cuts[index - 1]\n        \n        return max_cut_size", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        h_max = self.get_max_interval(w, sorted(verticalCuts))\n        w_max = self.get_max_interval(h, sorted(horizontalCuts))\n        return (h_max*w_max) % (10**9 + 7)\n    \n    def get_max_interval(self, length, cuts):\n        current = 0\n        max_cut = 0\n        for cut in cuts:\n            max_cut = max(max_cut, cut - current)\n            current = cut\n        \n        max_cut = max(max_cut, length - current)\n        return max_cut", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        \n        def getGap(arr, n):\n            prev=0\n            i=0\n            res=0\n            while i<len(arr):\n                res=max(arr[i]-prev, res)\n                prev=arr[i]\n                i+=1\n            return max(n-prev, res)\n    \n        return (getGap(horizontalCuts, h)*getGap(verticalCuts, w))%(10**9 + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        n=len(horizontalCuts)\n        m=len(verticalCuts)\n        A=horizontalCuts[:]\n        B=verticalCuts[:]\n        A.sort()\n        B.sort()\n        A.insert(0,0)\n        B.insert(0,0)\n        A.append(h)\n        B.append(w)\n        \n\n        maxw=0\n        maxh=0\n        \n        for i in range(1,n+2):\n            maxh=max(maxh,A[i]-A[i-1])\n            \n        for i in range(1,m+2):\n            maxw=max(maxw,B[i]-B[i-1])\n    \n\n            \n        m=10**9+7\n        \n        return ((maxw%m)*(maxh%m))%m\n            \n            \n            \n        \n        \n        \n", "class Solution:\n    def maxArea(self, h: int, w: int, hc: List[int], v: List[int]) -> int:\n        hc.append(0)\n        hc.append(h)\n        v.append(0)\n        v.append(w)\n        v.sort()\n        hc.sort()\n        max_v = max_h = 0\n        for i in range(1,len(hc)):\n            max_h = max(max_h,hc[i]-hc[i-1])\n        for i in range(1,len(v)):\n            max_v = max(max_v,v[i]-v[i-1])\n        return max_h*max_v% 1000000007", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts = sorted(horizontalCuts)\n        verticalCuts = sorted(verticalCuts)\n        \n        horizontalCuts.insert(0, 0)\n        horizontalCuts.append(h)\n        verticalCuts.insert(0,0)\n        verticalCuts.append(w)\n        \n        print(horizontalCuts)\n        print(verticalCuts)\n        \n        maxx = 0\n        for x in range(1, len(horizontalCuts)):\n            maxx = max(maxx, horizontalCuts[x] - horizontalCuts[x-1])\n            \n        maxy = 0\n        for y in range(1, len(verticalCuts)):\n            maxy = max(maxy, verticalCuts[y] - verticalCuts[y-1])\n            \n        return (maxx * maxy)%1000000007", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        # def get_max_length(length: int, cuts: List[int]) -> int:\n        #     cuts.sort()\n        #     max_length = max(cuts[0], length - cuts[-1])\n        #     for i in range(1, len(cuts)):\n        #         max_length = max(max_length, cuts[i] - cuts[i-1])\n        #     return max_length\n        return self.get_max_length(h, horizontalCuts) * self.get_max_length(w, verticalCuts) % 1000000007\n\n    def get_max_length(self, length: int, cuts: List[int]) -> int:\n        if len(cuts) == 1:\n            return max(cuts[0], length - cuts[0])\n        \n        cuts.sort()\n        max_length = max(cuts[0], length - cuts[-1])\n        for i in range(1, len(cuts)):\n            max_length = max(max_length, cuts[i] - cuts[i - 1])\n        return max_length", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        if 0 not in horizontalCuts:\n            horizontalCuts.append(0)\n        if h not in horizontalCuts:\n            horizontalCuts.append(h)\n        if 0 not in verticalCuts:\n            verticalCuts.append(0)\n        if w not in verticalCuts:\n            verticalCuts.append(w)\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        i = 0\n        max_diff = -float('inf')\n        while i in range(len(horizontalCuts)-1):\n            if horizontalCuts[i+1]-horizontalCuts[i] > max_diff:\n                max_diff = max(max_diff, horizontalCuts[i+1]-horizontalCuts[i])\n            i += 1\n        j = 0\n        max_diff1 = -float('inf')\n        while j in range(len(verticalCuts)-1):\n            if verticalCuts[j+1] - verticalCuts[j] > max_diff1:\n                max_diff1 = max(max_diff1, verticalCuts[j + 1] - verticalCuts[j])\n            j += 1\n        return (max_diff*max_diff1)%((10**9)+7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        # def get_max_length(length: int, cuts: List[int]) -> int:\n        #     cuts.sort()\n        #     max_length = max(cuts[0], length - cuts[-1])\n        #     for i in range(1, len(cuts)):\n        #         max_length = max(max_length, cuts[i] - cuts[i-1])\n        #     return max_length\n        mod = int(1e9) + 7\n        return (self.get_max_length(h, horizontalCuts) % mod) * (self.get_max_length(w, verticalCuts) % mod) % mod\n\n    def get_max_length(self, length: int, cuts: List[int]) -> int:\n        if len(cuts) == 1:\n            return max(cuts[0], length - cuts[0])\n        \n        cuts.sort()\n        max_length = max(cuts[0], length - cuts[-1])\n        for i in range(1, len(cuts)):\n            # max_length = max(max_length, cuts[i] - cuts[i - 1])\n            if cuts[i] - cuts[i - 1] > max_length:\n                max_length = cuts[i] - cuts[i - 1]\n        return max_length", "class Solution:\n    def maxArea(self, h: int, w: int, hh: List[int], vv: List[int]) -> int:\n        hh = sorted(hh) + [h]\n        vv = sorted(vv) + [w]\n        prev = 0\n        hm = 0\n        for i in hh:\n            hm = max(hm,i-prev)\n            prev = i\n        prev = 0\n        vm = 0\n        for i in vv:\n            vm = max(vm,i-prev)\n            prev = i\n        return (vm * hm)  % (10**9 + 7)\n        \n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        # def get_max_length(length: int, cuts: List[int]) -> int:\n        #     cuts.sort()\n        #     max_length = max(cuts[0], length - cuts[-1])\n        #     for i in range(1, len(cuts)):\n        #         max_length = max(max_length, cuts[i] - cuts[i-1])\n        #     return max_length\n        mod = int(1e9) + 7\n        return (self.get_max_length(h, horizontalCuts) % mod) * (self.get_max_length(w, verticalCuts) % mod) % mod\n\n    def get_max_length(self, length: int, cuts: List[int]) -> int:\n        if len(cuts) == 1:\n            return max(cuts[0], length - cuts[0])\n        \n        cuts.sort()\n        max_length = max(cuts[0], length - cuts[-1])\n        for i in range(1, len(cuts)):\n            max_length = max(max_length, cuts[i] - cuts[i - 1])\n        return max_length", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        # def get_max_length(length: int, cuts: List[int]) -> int:\n        #     cuts.sort()\n        #     max_length = max(cuts[0], length - cuts[-1])\n        #     for i in range(1, len(cuts)):\n        #         max_length = max(max_length, cuts[i] - cuts[i-1])\n        #     return max_length\n        return self.get_max_length(h, horizontalCuts) * self.get_max_length(w, verticalCuts) % 1000000007\n\n    def get_max_length(self, length: int, cuts: List[int]) -> int:\n        cuts.sort()\n        max_length = max(cuts[0], length - cuts[-1])\n        for i in range(1, len(cuts)):\n            max_length = max(max_length, cuts[i] - cuts[i - 1])\n        return max_length", "class Solution:\n    def maxArea(self, h: int, w: int, hc: List[int], vc: List[int]) -> int:\n        hc, vc = [0] + sorted(hc) + [h], [0] + sorted(vc) + [w]\n        return max(hc[i] - hc[i-1] for i in range(1, len(hc))) * max(vc[i] - vc[i-1] for i in range(1, len(vc))) % 1000000007", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        mod = 10**9 + 7\n        horizontalCuts.extend([0, h])\n        horizontalCuts.sort()\n        verticalCuts.extend([0, w])\n        verticalCuts.sort()\n        hor_max = 0\n        for i in range(len(horizontalCuts)-1):\n            hor_max = max(hor_max, horizontalCuts[i+1] - horizontalCuts[i])\n        \n        ver_max = 0\n        for i in range(len(verticalCuts)-1):\n            ver_max = max(ver_max, verticalCuts[i+1] - verticalCuts[i])\n        return (hor_max*ver_max)%mod\n       \n                \n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n\n        new_horizontal_cuts = [0] + sorted(horizontalCuts) +[h]\n        new_vertical_cuts = [0] + sorted(verticalCuts) +[w]\n        mod = int(1e9)+7\n        max_height = 0\n        max_width = 0\n        for j in range(len(new_vertical_cuts)-1):\n            if max_width < new_vertical_cuts[j+1]-new_vertical_cuts[j]:\n                max_width = new_vertical_cuts[j+1]-new_vertical_cuts[j]\n        for i in range(len(new_horizontal_cuts)-1):\n            if max_height< new_horizontal_cuts[i+1]-new_horizontal_cuts[i]:\n                max_height = new_horizontal_cuts[i+1]-new_horizontal_cuts[i]\n        \n        return (max_width*max_height)%mod\n            \n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        mod = 10**9 + 7\n        horizontalCuts += [0, h]\n        horizontalCuts.sort()\n        verticalCuts += [0, w]\n        verticalCuts.sort()\n        hor_max = 0\n        for i in range(len(horizontalCuts)-1):\n            hor_max = max(hor_max, abs(horizontalCuts[i] - horizontalCuts[i+1]))\n        \n        ver_max = 0\n        for i in range(len(verticalCuts)-1):\n            ver_max = max(ver_max, abs(verticalCuts[i] - verticalCuts[i+1]))\n        return (hor_max*ver_max)%mod\n       \n                \n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        def get_max_length(length: int, cuts: List[int]) -> int:\n            if len(cuts) == 1:\n                return max(cuts[0], length - cuts[0])\n\n            cuts.sort()\n            max_length = max(cuts[0], length - cuts[-1])\n            for i in range(1, len(cuts)):\n                # max_length = max(max_length, cuts[i] - cuts[i - 1])\n                if cuts[i] - cuts[i - 1] > max_length:\n                    max_length = cuts[i] - cuts[i - 1]\n            return max_length\n\n        return get_max_length(h, horizontalCuts) * get_max_length(w, verticalCuts) % 1000000007", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n#         def get_max_length(length: int, cuts: List[int]) -> int:\n#             if len(cuts) == 1:\n#                 return max(cuts[0], length - cuts[0])\n\n#             cuts.sort()\n#             max_length = max(cuts[0], length - cuts[-1])\n#             for i in range(1, len(cuts)):\n#                 # max_length = max(max_length, cuts[i] - cuts[i - 1])\n#                 if cuts[i] - cuts[i - 1] > max_length:\n#                     max_length = cuts[i] - cuts[i - 1]\n#             return max_length\n\n        return self.get_max_length(h, horizontalCuts) * self.get_max_length(w, verticalCuts) % 1000000007\n\n    def get_max_length(self, length: int, cuts: List[int]) -> int:\n        if len(cuts) == 1:\n            return max(cuts[0], length - cuts[0])\n\n        cuts.sort()\n        max_length = max(cuts[0], length - cuts[-1])\n        for i in range(1, len(cuts)):\n            # max_length = max(max_length, cuts[i] - cuts[i - 1])\n            if cuts[i] - cuts[i - 1] > max_length:\n                max_length = cuts[i] - cuts[i - 1]\n        return max_length", "class Solution:\n    def maxArea(self, h: int, w: int, hori: List[int], verti: List[int]) -> int:\n        hori.sort()\n        verti.sort()\n        x = hori[0]\n        for i in range(1, len(hori)):\n            x = max(x, hori[i]-hori[i-1])\n        x = max(x, h - hori[-1])\n        y = verti[0]\n        for i in range(1, len(verti)):\n            y = max(y, verti[i]-verti[i-1])\n        y = max(y, w - verti[-1])\n        return (x*y)%1000000007\n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalStrips = [0] + sorted(horizontalCuts) + [h]\n        verticalStrips = [0] + sorted(verticalCuts) + [w]\n        \n        maxW = max([horizontalStrips[i + 1] - horizontalStrips[i] for i in range(len(horizontalStrips) - 1)])\n        maxH = max([verticalStrips[i + 1] - verticalStrips[i] for i in range(len(verticalStrips) - 1)])\n        \n        return (maxW * maxH) % ((10 ** 9) + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n\n        new_horizontal_cuts = [0] + sorted(horizontalCuts) +[h]\n        new_vertical_cuts = [0] + sorted(verticalCuts) +[w]\n\n        max_area = 0\n        mod = int(1e9)+7\n        max_height = 0\n        max_width = 0\n        for j in range(len(new_vertical_cuts)-1):\n            if max_width < new_vertical_cuts[j+1]-new_vertical_cuts[j]:\n                max_width = new_vertical_cuts[j+1]-new_vertical_cuts[j]\n        for i in range(len(new_horizontal_cuts)-1):\n            if max_height< new_horizontal_cuts[i+1]-new_horizontal_cuts[i]:\n                max_height = new_horizontal_cuts[i+1]-new_horizontal_cuts[i]\n        \n        return (max_width*max_height)%mod\n            \n", "class Solution:\n    \n    \n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        # Return ans % (1E9 + 7)\n        # A = ((vi+1) - vi)*(hi+1 - hi)\n        \n        def getMaxSpace(cuts, upperLimit):\n            cuts = sorted(cuts)\n            if not any(cuts):\n                return upperLimit\n            \n            ans = cuts[0] # first piece is 0 to first cut\n            for i in range(len(cuts)-1):\n                ans = max(ans, cuts[i+1] - cuts[i])\n            return max(ans, upperLimit - cuts[-1])\n        \n        maxHorSpace = getMaxSpace(horizontalCuts, h)\n        maxVertSpace = getMaxSpace(verticalCuts, w)\n        \n        mod = 1E9+7\n        return int((maxHorSpace * maxVertSpace) % mod)\n", "class Solution:\n    def getMax(self, max: int, cuts: List[int]) -> int:\n        last = 0\n        for x in cuts:\n            cur = x - last\n            if cur > max:\n                max = cur\n            last = x\n        return max\n    \n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        mod = 1000000007\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        maxh = self.getMax(h - horizontalCuts[-1], horizontalCuts)\n        maxv = self.getMax(w - verticalCuts[-1], verticalCuts)\n        \n        return maxh%mod * maxv%mod\n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.append(0)\n        horizontalCuts.append(h)\n        \n        verticalCuts.append(0)\n        verticalCuts.append(w)\n        \n        horizontalCuts.sort()\n        verticalCuts.sort()\n        \n        mw = 0\n        mh = 0\n        \n        for x, y in zip(horizontalCuts, horizontalCuts[1:]):\n            mw = max(mw, y-x)\n        for x, y in zip(verticalCuts, verticalCuts[1:]):\n            mh = max(mh, y-x)\n        mod = 10**9 + 7\n        return (mw * mh) % mod", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n#         m = 0\n#         horizontalCuts.sort()\n#         verticalCuts.sort()\n#         numHoriz = len(horizontalCuts)\n#         numVert = len(verticalCuts)\n#         prevH = 0\n#         for horiz in range(numHoriz + 1):\n#             prevV = 0\n#             for vert in range(numVert + 1):\n#                 if horiz == numHoriz:\n#                     currH = h\n#                 else: \n#                     currH = horizontalCuts[horiz]\n#                 if vert == numVert:\n#                     currV = w\n#                 else:\n#                     currV = verticalCuts[vert]\n#                 m = max(m, (currH - prevH) * (currV - prevV))\n                \n                \n#                 prevV = currV\n#             prevH = currH\n                \n#         return m % (10**9 + 7)\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        prev = 0\n        hDiff = 0\n        for horiz in horizontalCuts:\n            hDiff = max(hDiff, horiz - prev)\n            prev = horiz\n            \n        hDiff = max(h - prev, hDiff)\n        \n        prev = 0 \n        vDiff = 0\n        for vert in verticalCuts:\n            vDiff = max(vDiff, vert - prev)\n            prev = vert\n        vDiff = max(w - prev, vDiff)\n        \n        return (vDiff * hDiff) % (10**9 + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        \n        horizontalCuts.append(h)\n        verticalCuts.append(w)\n        \n        def get_max_gap(array):\n            array.sort()\n            max_hor_width = array[0]\n            for previous_cut, next_cut in zip(array, array[1:]):  \n                max_hor_width = max(max_hor_width, next_cut - previous_cut)\n                \n            return max_hor_width\n\n        return (get_max_gap(horizontalCuts) * get_max_gap(verticalCuts)) % 1000000007\n    \n# time complexity - nlogn - mainly sorting\n# sub1: corner case for 0, n index\n# sub2: result should be module\n#  does insertion take extra time? - maybe just O(n) - could be avoided with smart comparison\n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        max_h,max_w=max(horizontalCuts[0],h-horizontalCuts[-1]),max(verticalCuts[0],w-verticalCuts[-1])\n        for i in range(1,len(horizontalCuts)):\n            max_h=max(max_h,horizontalCuts[i]-horizontalCuts[i-1])\n        for j in range(1,len(verticalCuts)):\n            max_w=max(max_w,verticalCuts[j]-verticalCuts[j-1])\n        return (max_w*max_h)%(10**9+7)             \n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        \n        horizontalCuts.append(h)\n        verticalCuts.append(w)\n        \n        def get_max_gap(array):\n            array.sort()\n            max_hor_width = array[0]\n            for previous_cut, next_cut in zip(array, array[1:]):  \n                max_hor_width = max(max_hor_width, next_cut - previous_cut)\n            return max_hor_width\n\n        return (get_max_gap(horizontalCuts) * get_max_gap(verticalCuts)) % 1000000007\n    \n# time complexity - nlogn - mainly sorting\n# sub1: corner case for 0, n index\n# sub2: result should be module\n#  does insertion take extra time? - maybe just O(n) - could be avoided with smart comparison\n", "from typing import List\nimport numpy\n\nimport sys\n# Definition for a binary tree node.\n# Definition for a binary tree node.\nclass Solution:\n  def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n    horizontalCuts.insert(0, 0)\n    horizontalCuts.append(h)\n    horizontalCuts.sort()\n\n    verticalCuts.insert(0, 0)\n    verticalCuts.append(w)\n    verticalCuts.sort()\n\n    maxh = -1\n    maxv = -1\n\n    for index, value in enumerate(horizontalCuts):\n      if index == 0:\n        continue\n      maxh = max(maxh, value - horizontalCuts[index-1])\n\n    for index, value in enumerate(verticalCuts):\n      if index == 0:\n        continue\n      maxv = max(maxv, value - verticalCuts[index-1])\n\n    module = int(pow(10, 9) + 7)\n    result = maxv * maxh % module\n    return result", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        mx= max(verticalCuts[0], w - verticalCuts[-1])\n        my = max(horizontalCuts[0], h - horizontalCuts[-1])\n        for i in range(1,len(verticalCuts)):\n            mx=max(mx,verticalCuts[i] - verticalCuts[i - 1])\n        for i in range(1,len(horizontalCuts)):\n            my = max(my, horizontalCuts[i] - horizontalCuts[i - 1])              \n        return mx*my%(10**9+7)", "class Solution:\n    def maxArea(self, h, w, horizontalCuts, verticalCuts):\n        H = [0] + horizontalCuts + [h]\n        W = [0] + verticalCuts + [w]\n        H.sort()\n        W.sort()\n\n        hmax, wmax = 0, 0\n        for i in range(1, len(H)):\n            hmax = max(hmax, H[i] - H[i - 1])\n\n        for i in range(1, len(W)):\n            wmax = max(wmax, W[i] - W[i - 1])\n\n        return hmax * wmax % 1000000007", "class Solution:\n    \n    \n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        # Return ans % (1E9 + 7)\n        # A = ((vi+1) - vi)*(hi+1 - hi)\n        \n        def getMaxSpace(cuts, upperLimit):\n            #cuts = sorted(cuts)\n            cuts.sort()\n            if not any(cuts):\n                return upperLimit\n            \n            \n            ans = cuts[0] # first piece is 0 to first cut\n            for i in range(len(cuts)-1):\n                ans = max(ans, cuts[i+1] - cuts[i])\n            return max(ans, upperLimit - cuts[-1])\n        \n        maxHorSpace = getMaxSpace(horizontalCuts, h)\n        maxVertSpace = getMaxSpace(verticalCuts, w)\n        \n        mod = 1E9+7\n        return int((maxHorSpace * maxVertSpace) % mod)\n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        max_h = max(horizontalCuts[0], h - horizontalCuts[-1])\n        if len(horizontalCuts) > 1:\n            for i in range(len(horizontalCuts)-1):\n                if max_h < abs(horizontalCuts[i+1] - horizontalCuts[i]):\n                        max_h = abs(horizontalCuts[i+1] - horizontalCuts[i])\n        \n        max_v = max(verticalCuts[0], w - verticalCuts[-1])\n        if len(verticalCuts) > 1:\n            for i in range(len(verticalCuts)-1):\n                if max_v < abs(verticalCuts[i+1] - verticalCuts[i]):\n                        max_v = abs(verticalCuts[i+1] - verticalCuts[i])\n        \n        return ((max_h % (10**9 + 7)) * (max_v % (10**9 + 7))) % (10**9 + 7)\n            \n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n         \n        def maxDelta(cuts, end):\n            cuts.sort()\n            cuts.append(end)\n            cuts.append(0)\n\n            md=0\n            for i in range(len(cuts)-1):\n                md=max(md,cuts[i]-cuts[i-1])\n            \n            return md\n        \n\n        return (maxDelta(horizontalCuts, h)*maxDelta(verticalCuts, w))%(10**9 + 7)\n\n        \n        mh=maxDelta(horizontalCuts, h)\n        mv=maxDelta(verticalCuts, w)\n        \n        return (mh*mv)%(10^9+7)", "class Solution:\n    def maxArea(self, h: int, w: int, hCuts: List[int], vCuts: List[int]) -> int:\n        hCuts.sort()\n        vCuts.sort()\n        H, V = max(hCuts[0], h - hCuts[-1]), max(vCuts[0], w - vCuts[-1])\n        for i in range(1, len(hCuts)):\n            H = max(H, hCuts[i] - hCuts[i - 1])\n        for i in range(1, len(vCuts)):\n            V = max(V, vCuts[i] - vCuts[i - 1])\n        return H * V % 1000000007", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        def helper(ll,num):\n            '''\n            ll is a sorted list\n            num is either h or w\n            '''\n            ll.append(num)\n            ans = ll[0]\n            for i in range(1,len(ll)):\n                if ll[i]-ll[i-1] > ans:\n                    ans = ll[i]-ll[i-1]\n            return ans\n       \n        \n        return int((helper(horizontalCuts,h) * helper(verticalCuts,w))%(1e9+7))\n\n         \n        \n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts = [0] + sorted(horizontalCuts) + [h]\n        verticalCuts = [0] + sorted(verticalCuts) + [w]\n        new_h = max([horizontalCuts[i+1]-horizontalCuts[i] for i in range(len(horizontalCuts)-1)])\n        new_w = max([verticalCuts[i+1]-verticalCuts[i] for i in range(len(verticalCuts)-1)])\n        return (new_h * new_w) % (10 ** 9 +7) ", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        modu = 1000000007\n        \n        # horizontal- i\n        # vertical-j\n        # \u6a2a\u5411\u8bb0\u5f550-x, x-y, y-m\u7559\u4e0b\u6700\u5927\n        # \u7ad6\u5411\u4e5f\u4e00\u6837\n        \n        h_max = 0\n        v_max = 0\n        \n        horizontalCuts.append(0)\n        horizontalCuts.append(h)\n        \n        verticalCuts.append(0)\n        verticalCuts.append(w)\n        \n        horizontalCuts.sort()\n        verticalCuts.sort()\n        \n        for i in range(1,len(horizontalCuts)):\n            h_max = max(h_max, horizontalCuts[i]-horizontalCuts[i-1])\n        \n        for j in range(1,len(verticalCuts)):\n            v_max = max(v_max, verticalCuts[j]-verticalCuts[j-1])\n        \n        return (v_max*h_max)%modu", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        max_h = horizontalCuts[0]\n        for h_cut in range(1, len(horizontalCuts)):\n            max_h = max(max_h, horizontalCuts[h_cut] - horizontalCuts[h_cut-1])\n        max_h = max(max_h, h - horizontalCuts[-1])\n        max_v = verticalCuts[0]\n        for v_cut in range(1, len(verticalCuts)):\n            max_v = max(max_v, verticalCuts[v_cut] - verticalCuts[v_cut-1])\n        max_v = max(max_v, w - verticalCuts[-1])\n        return max_h * max_v % int(1e9 + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        max_hor_width = horizontalCuts[0]\n        for i in range(len(horizontalCuts)-1):  \n            max_hor_width = max(max_hor_width, horizontalCuts[i+1]-horizontalCuts[i])\n        max_hor_width = max(max_hor_width, h-horizontalCuts[len(horizontalCuts)-1])\n\n        max_vert_width = verticalCuts[0]\n        for i in range(len(verticalCuts)-1):\n            max_vert_width = max(max_vert_width, verticalCuts[i+1]-verticalCuts[i])\n        max_vert_width = max(max_vert_width, w-verticalCuts[len(verticalCuts)-1])\n        \n        return (max_vert_width * max_hor_width) % 1000000007\n# time complexity - nlogn - mainly sorting\n# sub1: corner case for 0, n index\n# sub2: result should be module\n#  does insertion take extra time? - maybe just O(n) - could be avoided with smart comparison\n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        \n        horizontalCuts.sort()\n        verticalCuts.sort()\n        \n        ph, pw = 0, 0\n        msh, msw = 0, 0\n        \n        for ch in horizontalCuts:\n            if ch - ph > msh:\n                msh = ch-ph\n            ph = ch\n        if h - ph > msh:\n            msh = h - ph\n            \n        for cw in verticalCuts:\n            if cw - pw > msw:\n                msw = cw - pw\n            pw = cw\n        if w - pw > msw:\n            msw = w - pw\n            \n        return msh*msw%(10**9 + 7)\n        \n            \n        \n        \n        \n        \n        \n        \n        \n        \n", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        print(horizontalCuts, verticalCuts)\n        pre = 0\n        hori_max = 0\n        for i, cut in enumerate(horizontalCuts):\n            hori_max = max(hori_max, cut - pre)\n            pre = cut\n        \n        hori_max = max(hori_max, h - pre)\n        #print(hori_max)\n        pre = 0\n        vert_max = 0\n        for i, cut in enumerate(verticalCuts):\n            vert_max = max(vert_max, cut - pre)\n            pre = cut\n        \n        vert_max = max(vert_max, w - pre)\n        #print(vert_max)\n        return (hori_max * vert_max) % (10**9 + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        ver = [0] + sorted(verticalCuts) + [w]\n        hor = [0] + sorted(horizontalCuts) + [h]\n        \n        dh = max(hor[i] - hor[i-1] for i in range(1, len(hor)))\n        dv = max(ver[i] - ver[i-1] for i in range(1, len(ver)))\n        \n        return dh*dv % (10**9 + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        h_max = self.get_max_interval(w, sorted(verticalCuts))\n        w_max = self.get_max_interval(h, sorted(horizontalCuts))\n        \n        print(h_max, w_max)\n        \n        return (h_max*w_max) % (10**9 + 7)\n    \n    def get_max_interval(self, length, cuts):\n        current = 0\n        max_cut = 0\n        for cut in cuts:\n            max_cut = max(max_cut, cut - current)\n            current = cut\n        \n        max_cut = max(max_cut, length - current)\n        return max_cut", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalStrips = [0] + sorted(horizontalCuts) + [h]\n        verticalStrips = [0] + sorted(verticalCuts) + [w]\n        \n        maxStripWidth = max([horizontalStrips[i + 1] - horizontalStrips[i] for i in range(len(horizontalStrips) - 1)])\n        maxStripHeight = max([verticalStrips[i + 1] - verticalStrips[i] for i in range(len(verticalStrips) - 1)])\n        \n        return (maxStripWidth * maxStripHeight) % ((10 ** 9) + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n#         m = 0\n#         horizontalCuts.sort()\n#         verticalCuts.sort()\n#         numHoriz = len(horizontalCuts)\n#         numVert = len(verticalCuts)\n#         prevH = 0\n#         for horiz in range(numHoriz + 1):\n#             prevV = 0\n#             for vert in range(numVert + 1):\n#                 if horiz == numHoriz:\n#                     currH = h\n#                 else: \n#                     currH = horizontalCuts[horiz]\n#                 if vert == numVert:\n#                     currV = w\n#                 else:\n#                     currV = verticalCuts[vert]\n#                 m = max(m, (currH - prevH) * (currV - prevV))\n                \n                \n#                 prevV = currV\n#             prevH = currH\n                \n#         return m % (10**9 + 7)\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        prev = 0\n        hDiff = 0\n        for horiz in horizontalCuts:\n            print(horiz, prev, horiz - prev)\n            hDiff = max(hDiff, horiz - prev)\n            prev = horiz\n            \n        hDiff = max(h - prev, hDiff)\n        \n        prev = 0 \n        vDiff = 0\n        for vert in verticalCuts:\n            vDiff = max(vDiff, vert - prev)\n            prev = vert\n        vDiff = max(w - prev, vDiff)\n        print(vDiff, hDiff)\n        \n        return (vDiff * hDiff) % (10**9 + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        max_width = verticalCuts[0]\n        max_height = horizontalCuts[0]\n        for i in range(len(horizontalCuts) - 1):\n            max_height = max(max_height, (horizontalCuts[i+1] - horizontalCuts[i]))\n        max_height = max(max_height, (h - horizontalCuts[-1]))\n\n        for i in range(len(verticalCuts)-1):\n            max_width = max(max_width, (verticalCuts[i+1] - verticalCuts[i]))\n        max_width = max(max_width, (w - verticalCuts[-1]))\n        return (max_height * max_width) % (10**9 + 7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.append(0)\n        horizontalCuts.append(h)\n        horizontalCuts.sort()\n        Maxh = max([horizontalCuts[i] - horizontalCuts[i-1] for i in range(1,len(horizontalCuts))])\n        verticalCuts.append(0)\n        verticalCuts.append(w)\n        verticalCuts.sort()\n        Maxv = max([verticalCuts[i] - verticalCuts[i-1] for i in range(1,len(verticalCuts))])\n        \n        return Maxh*Maxv % 1000000007", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts, verticalCuts = sorted([0, h]+horizontalCuts), sorted([0, w]+verticalCuts)\n        return max([after-prev for after, prev in zip(horizontalCuts[1:], horizontalCuts)])*max([after-prev for after, prev in zip(verticalCuts[1:], verticalCuts)])%(10**9+7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n         \n        def maxDelta(cuts, end):\n            cuts.sort()\n            cuts.append(end)\n            cuts.append(0)\n\n            md=0\n            for i in range(len(cuts)-1):\n                md=max(md,cuts[i]-cuts[i-1])\n            \n            return md\n        \n        def getGap(arr, n):\n            prev=0\n            i=0\n            res=0\n            while i<len(arr):\n                res=max(arr[i]-prev, res)\n                prev=arr[i]\n                i+=1\n            return max(n-prev, res)\n    \n        return (maxDelta(horizontalCuts, h)*maxDelta(verticalCuts, w))%(10**9 + 7)\n\n        \n        mh=maxDelta(horizontalCuts, h)\n        mv=maxDelta(verticalCuts, w)\n        \n        return (mh*mv)%(10^9+7)", "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        hr=[0]+horizontalCuts+[h]\n        vr=[0]+verticalCuts+[w]\n        hmax,vmax=0,0\n        for i in range(1,len(hr)):\n            hmax=max(hmax,hr[i]-hr[i-1])\n        for i in range(1,len(vr)):\n            vmax=max(vmax,vr[i]-vr[i-1])\n        return (hmax*vmax)%(10**9+7)"]