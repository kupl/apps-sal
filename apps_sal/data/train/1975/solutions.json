["class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.add = []\n        self.limit = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.limit:\n            self.stack.append(x)\n            self.add.append(0)\n\n    def pop(self) -> int:\n        if len(self.stack) == 0:\n            return -1\n        result = self.stack.pop()\n        left = self.add.pop()\n        if len(self.add) > 0:\n            self.add[-1] += left\n        return result + left\n\n    def increment(self, k: int, val: int) -> None:\n        if len(self.stack) > 0:\n            if k > len(self.stack):\n                self.add[-1] += val\n                return\n            self.add[k-1] += val\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        self.incre = []\n        self.amount = 0\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            if self.amount:\n                heapq.heappush(self.incre, (-len(self.stack), self.amount))\n                self.amount = 0\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            while self.incre and len(self.stack) == -self.incre[0][0]:\n                self.amount += heapq.heappop(self.incre)[1]\n            return self.amount + self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        heapq.heappush(self.incre, (-min(k, len(self.stack)), val))\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.len = maxSize\n    def push(self, x: int) -> None:\n        if len(self.stack)+1 <= self.len:\n            self.stack.append(x)\n        \n    def pop(self) -> int:\n        if not self.stack: return -1\n        last = self.stack[-1]\n        self.stack = self.stack[:-1]\n        return last\n\n    def increment(self, k: int, val: int) -> None:\n        if len(self.stack) < k:\n            self.stack = [x+val for x in self.stack]\n        else:\n            self.stack[:k] = [x+val for x in self.stack[:k]]\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n#     def __init__(self, maxSize: int):\n#         self.st = []\n#         self.m = maxSize\n        \n#     def push(self, x: int) -> None:\n#         if len(self.st) < self.m:\n#             self.st.append(x)\n\n#     def pop(self) -> int:\n#         if len(self.st):\n#             return self.st.pop()\n#         return -1\n        \n#     def increment(self, k: int, val: int) -> None:\n#         j = min(k,len(self.st))\n#         for i in range(j):\n#             self.st[i] += val\n\n    def __init__(self, maxSize):\n        self.n = maxSize\n        self.stack = []\n        self.inc = []\n\n    def push(self, x):\n        if len(self.inc) < self.n:\n            self.stack.append(x)\n            self.inc.append(0)\n\n    def pop(self):\n        if not self.inc: return -1\n        if len(self.inc) > 1:\n            self.inc[-2] += self.inc[-1]\n        return self.stack.pop() + self.inc.pop()\n\n    def increment(self, k, val):\n        if self.inc:\n            self.inc[min(k, len(self.inc)) - 1] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxsize = maxSize \n\n    def push(self, x: int) -> None:\n        if self.maxsize == 0 : return\n        self.stack.append(x)\n        self.maxsize -= 1\n\n    def pop(self) -> int:\n        if len(self.stack) == 0 : return -1\n        val = self.stack[-1]\n        self.stack = self.stack[:-1]\n        self.maxsize += 1\n        return val\n\n    def increment(self, k: int, val: int) -> None:\n        self.stack[:k] = [x+val for x in self.stack[:k]]\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.cap = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.cap:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k,len(self.stack))):\n            self.stack[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.arr = []\n        self.capacity = maxSize\n        self.size = 0\n\n    def push(self, x: int) -> None:\n        if self.size < self.capacity:\n            self.arr.append(x)\n            self.size += 1\n\n    def pop(self) -> int:\n        if self.size > 0:\n            ele = self.arr.pop()\n            self.size -= 1\n            return ele\n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        k = min(k, self.size)\n        for i in range(k):\n            self.arr[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack) + 1 > self.maxSize:\n            return\n        self.stack.append(x)        \n\n    def pop(self) -> int:\n        if len(self.stack) == 0:\n            return -1\n        el = self.stack.pop()\n        return el\n\n    def increment(self, k: int, val: int) -> None:\n        if len(self.stack) < k:\n            self.stack = list([x+val for x in self.stack])\n        else:\n            beforek = list([x+val for x in self.stack[:k]])\n            self.stack = beforek + self.stack[k:]\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.origin_list = [0] * maxSize\n        self.index = 0\n        self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        if self.index < self.maxSize:\n            self.origin_list[self.index] = x\n            self.index += 1\n            \n\n    def pop(self) -> int:\n        if self.index == 0:\n            return -1\n        else:\n            self.index -= 1\n            return self.origin_list[self.index]\n\n    def increment(self, k: int, val: int) -> None:\n        num = min(k, self.index)\n        for i in range(num):\n            self.origin_list[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.size = maxSize\n        self.arr = []\n        self.currsize = 0\n        \n\n    def push(self, x: int) -> None:\n        if self.currsize == self.size:\n            return\n        self.arr.append(x)\n        self.currsize += 1\n        \n\n    def pop(self) -> int:\n        #print(self.arr)\n        if len(self.arr) == 0:\n            return -1\n        self.currsize -= 1\n        return self.arr.pop()\n        \n\n    def increment(self, k: int, val: int) -> None:\n        minsize = min(k, len(self.arr))\n        \n        for i in range(minsize):\n            self.arr[i] += val\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.items = []\n        self.max = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.items) < self.max:\n            self.items.append(x)\n\n    def pop(self) -> int:\n        return self.items.pop() if len(self.items) != 0 else -1\n\n    def increment(self, k: int, val: int) -> None:\n        k = k if k < len(self.items) else len(self.items)\n        for i in range(k):\n            self.items[i] = self.items[i] + val\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        self.incre = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n            self.incre.append(0)\n\n    def pop(self) -> int:\n        if self.stack:\n            if len(self.incre) > 1:\n                self.incre[-2] += self.incre[-1]\n            return self.stack.pop() + self.incre.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        if self.incre:\n            self.incre[min(len(self.incre), k)-1] += val\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.max = maxSize \n        self.stack = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.max:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if len(self.stack)>0:\n            num = self.stack[-1]\n            self.stack.pop()\n            return(num)\n        else:\n            return(-1)\n        \n\n    def increment(self, k: int, val: int) -> None:\n        if k> len(self.stack):\n            k = len(self.stack)\n        for i in range(k):\n            #if i <= len(self.stack):\n            self.stack[i] = self.stack[i] + val\n            \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack=[]\n        self.size=maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.size:\n            self.stack.append(x)\n            # print(s)\n\n\n    def pop(self) -> int:\n        if len(self.stack)==0:\n               return -1\n        else:\n            item=self.stack.pop()\n            return item\n\n    def increment(self, k: int, val: int) -> None:\n        l=len(self.stack)\n        if l < k:\n            for i in range(len(self.stack)):\n                # print(self.stack)\n                self.stack[i]=self.stack[i]+val\n        else:\n            for i in range(0,k):\n                self.stack[i]=self.stack[i]+val\n                \n            \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.n = maxSize\n        self.s = []\n\n    def push(self, x: int) -> None:\n        if len(self.s) < self.n:\n            self.s.append(x)\n\n    def pop(self) -> int:\n        if len(self.s) == 0:\n            return -1\n        return self.s.pop()\n        \n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(0, k):\n            if i >= len(self.s): break\n            self.s[i] += val\n        # print(self.s)\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize=maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n        \n\n    def pop(self) -> int:\n        return -1 if not self.stack else self.stack.pop()\n        \n\n    def increment(self, k: int, val: int) -> None:\n        self.stack = [x+val if i<k else x for (i,x) in enumerate(self.stack)]\n        # if k>len(self.stack):\n        #     self.stack = list(map(lambda x:x+val, self.stack))\n        # else:\n        #     temp = []\n        #     m = len(self.stack)-k\n        #     while m:\n        #         temp.append(self.stack.pop())\n        #         m-=1\n        #     self.stack = [x+val for x in self.stack]\n        #     while temp:\n        #         self.stack.append(temp.pop())\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n            \n        \n\n    def pop(self) -> int:\n        if len(self.stack) == 0:\n            return -1\n        else:\n            return self.stack.pop(-1)\n            \n            \n\n    def increment(self, k: int, val: int) -> None:\n        i = 0\n        if k <= len(self.stack):\n            while i < k:\n                self.stack[i] += val\n                i += 1\n        else:\n            while i < len(self.stack):\n                self.stack[i] += val\n                i += 1            \n            \n        \n            \n        \n            \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize=maxSize;\n        self.stack=[];\n\n    def push(self, x: int) -> None:\n        if len(self.stack)==self.maxSize:\n            return;\n        else:\n            self.stack.append(x);\n\n    def pop(self) -> int:\n        if len(self.stack)==0:\n            return -1;\n        return self.stack.pop();\n        \n\n    def increment(self, k: int, val: int) -> None:\n        if k>len(self.stack):\n            k=len(self.stack);\n        for i in range(k):\n            self.stack[i]+=val;\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.max = maxSize\n        self.storage = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.storage) == self.max:\n            return None\n        self.storage.append(x)\n        \n\n    def pop(self) -> int:\n        if len(self.storage) == 0:\n            return -1\n        return self.storage.pop()\n        \n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if i == len(self.storage):\n                return None\n            self.storage[i] += val\n            \n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        return (self.stack.pop() if self.stack else -1)\n        \n    def increment(self, k: int, val: int) -> None:\n        for n in range(0,k):\n            if n > len(self.stack) -1: break\n            else: \n                self.stack[n] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = [0]*maxSize\n        self.top = -1\n        \n\n    def push(self, x: int) -> None:\n        if self.top +1< len(self.stack):\n            self.top+=1\n            self.stack[self.top] = x\n            \n        \n\n    def pop(self) -> int:\n        if self.top < 0:\n            return -1\n        n = self.stack[self.top]\n        self.top -=1\n        return n\n        \n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if i <= self.top:\n                self.stack[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        \n\n    def push(self, x: int) -> None:\n        if (len(self.stack) < self.maxSize):\n            self.stack.append(x)\n            \n\n    def pop(self) -> int:\n        if (len(self.stack) == 0):\n            return -1\n        return self.stack.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(0, k):\n            if (i < len(self.stack)):\n                self.stack[i] = self.stack[i] + val\n            else:\n                break\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.increament_at = collections.defaultdict(lambda: 0)\n        self.stack = []\n        self.max_size = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.max_size:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n    \n        tmp = self.increament_at[len(self.stack) - 1]\n        self.increament_at[len(self.stack) - 2] += tmp\n        self.increament_at[len(self.stack) - 1] = 0\n        return self.stack.pop() + tmp\n\n    def increment(self, k: int, val: int) -> None:\n        if len(self.stack) < k:\n            self.increament_at[len(self.stack) - 1] += val\n        else:\n            self.increament_at[k-1] += val\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n    maxSz = 0\n    stack = []\n    \n    def __init__(self, maxSize: int):\n        self.maxSz = maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSz:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if len(self.stack) > 0:\n            val = self.stack.pop(len(self.stack)-1)\n            return val\n        else:\n            return -1\n            \n        \n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if(i >= len(self.stack) ):\n                return\n            else:\n                self.stack[i] +=  val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n  def __init__(self, maxSize: int):\n    self.maxSize = maxSize\n    self.stack = []\n    self.currSize = 0\n\n  def push(self, x: int) -> None:\n    if self.currSize < self.maxSize:\n      self.stack.append(x)\n      self.currSize += 1\n\n\n  def pop(self) -> int:\n    if self.currSize == 0:\n      return -1\n    else:\n      self.currSize -= 1\n      return self.stack.pop()\n\n  def increment(self, k: int, val: int) -> None:\n    i = 0\n    while i <= k-1 and i <= self.currSize-1:\n      self.stack[i] += val\n      i += 1\n      \n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.size = maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) == self.size:\n            return\n        self.stack.append(x)\n\n    def pop(self) -> int:\n        if len(self.stack) == 0:\n            return -1\n        return self.stack.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        \n        i = 0\n        while i < k and i < len(self.stack):\n            self.stack[i] += val\n            i += 1\n            \n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.max = maxSize \n        self.stack = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.max:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if len(self.stack)>0:\n            num = self.stack[-1]\n            self.stack.pop()\n            return(num)\n        else:\n            return(-1)\n        \n\n    def increment(self, k: int, val: int) -> None:\n        if k> len(self.stack):\n            k = len(self.stack)\n        for i in range(k):\n            #if i < len(self.stack):\n            #print(\\\"before:\\\",self.stack[i],\\\"after:\\\",self.stack[i]+val)\n            self.stack[i] = self.stack[i] + val\n        print(\\\"stack\\\",self.stack)\n            \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.max = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.max:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if len(self.stack) > 0:\n            return self.stack.pop()\n        else: return -1\n\n    def increment(self, k: int, val: int) -> None:\n        k = min(k, len(self.stack))\n        for i in range(k):\n            self.stack[i] += val", "class CustomStack:\n\n    \n    def __init__(self, maxSize: int):\n        self._max_size = maxSize\n        self._len = 0\n        self._stack = []\n\n    def push(self, x: int) -> None:\n        if self._len < self._max_size:\n            self._stack.insert(0, x)\n            self._len += 1 \n            \n    def pop(self) -> int:\n        if self._len > 0:\n            self._len -= 1\n            ret = self._stack.pop(0)\n        else:\n            ret = -1\n        return ret\n\n    def increment(self, k: int, val: int) -> None:\n        i = 0\n        while(i < k and i < self._len):\n            self._stack[self._len - i -1] += val\n            i += 1\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n        else:\n            # do nothing\n            pass\n        \n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            try:\n                self.stack[i] += val\n            except:\n                pass\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize = maxSize\n        self.stack = []\n        self.curr_size = 0\n        \n\n    def push(self, x: int) -> None:\n        if self.maxSize>self.curr_size:\n            self.stack.append(x)\n            self.curr_size +=1\n            \n    def pop(self) -> int:\n        if len(self.stack):\n            x = self.stack.pop()\n            self.curr_size -=1\n            return x\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        if len(self.stack)<k:\n            for i in range(len(self.stack)):\n                self.stack[i] += val\n        else:\n            for i in range(k):\n                self.stack[i] += val\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize        \n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if len(self.stack)>0:\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if i<len(self.stack):\n                self.stack[i]+=val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxsize = maxSize\n        self.currentsize = 0\n        self._list = []\n\n    def push(self, x: int) -> None:\n        if self.currentsize < self.maxsize:\n            self._list.append(x)\n            self.currentsize += 1\n\n    def pop(self) -> int:\n        if self.currentsize > 0:\n            lastelem = self._list.pop(-1)\n            self.currentsize -= 1\n            return lastelem\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for idx in range(k):\n            if idx < len(self._list):\n                self._list[idx] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        \\\"\\\"\\\"\n        ptr points to the last recently filled element, or -1 if empty\n        \\\"\\\"\\\"\n        self.stack = [None] * maxSize\n        self.ptr = -1\n\n    def push(self, x: int) -> None:\n        \\\"\\\"\\\"\n        Initial offset of every push is 0\n        \\\"\\\"\\\"\n        if self.ptr != len(self.stack) - 1:\n            self.ptr += 1\n            self.stack[self.ptr] = [x, 0]\n\n\n    def pop(self) -> int:\n        if self.ptr == -1:\n            return -1\n        else:\n            # Get the number added with its offset\n            num = self.stack[self.ptr][0] + self.stack[self.ptr][1]\n            \n            # Propagate this offset down to the next element\n            if self.ptr != 0:\n                self.stack[self.ptr - 1][1] += self.stack[self.ptr][1]\n            self.ptr -= 1\n            \n            return num\n\n    def increment(self, k: int, val: int) -> None:\n        \\\"\\\"\\\"\n        Mark where in the stack to propagate offset downwards\n        \\\"\\\"\\\"\n        if self.ptr == -1:\n            return\n        elif k > self.ptr:\n            self.stack[self.ptr][1] += val\n        else:\n            self.stack[k - 1][1] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n        self.curSize = 0\n\n    def push(self, x: int) -> None:\n        if self.curSize < self.maxSize:\n            self.stack.append(x)\n            self.curSize += 1\n            \n    def pop(self) -> int:\n        if self.stack:\n            self.curSize -= 1\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        cur = 0\n        while cur < k and cur < self.curSize:\n            self.stack[cur] += val\n            cur += 1\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.max = maxSize\n        self.stack = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.max:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if i <= len(self.stack)-1:\n                self.stack[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "from collections import deque\n\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = deque()\n        self.max_size = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.max_size:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(k):\n            if i < len(self.stack):\n                self.stack[i] += val\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize=maxSize\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n        \n\n    def pop(self) -> int:\n        return -1 if not self.stack else self.stack.pop()\n        \n\n    def increment(self, k: int, val: int) -> None:\n        if k>len(self.stack):\n            self.stack = list([x+val for x in self.stack])\n        else:\n            temp = []\n            m = len(self.stack)-k\n            while m:\n                temp.append(self.stack.pop())\n                m-=1\n            self.stack = [x+val for x in self.stack]\n            while temp:\n                self.stack.append(temp.pop())\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.size = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.size:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        return -1\n        \n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k, len(self.stack))):\n            self.stack[i] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.size = maxSize\n        self.stk = []\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stk) == self.size:\n            return \n        else:\n            self.stk.append(x)\n        \n\n    def pop(self) -> int:\n        if len(self.stk) == 0:\n            return -1\n        else:\n            return self.stk.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        if len(self.stk) <= k:\n            for i in range(len(self.stk)):\n                self.stk[i] += val\n        else:\n            for i in range(0,k):\n                self.stk[i] += val\n                \n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        else:\n            return -1\n        \n\n    def increment(self, k: int, val: int) -> None:\n        for i in range(min(k,len(self.stack))):\n            self.stack[i]+=val\n        # k = min(k,len(self.stack))\n        # valarr = [val]*k\n        # self.stack[:k]=self.stack[:k]+valarr\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack=deque()\n        self.limit=maxSize\n        self.count=0\n\n    def push(self, x: int) -> None:\n        if self.count<self.limit:\n            self.count+=1\n            self.stack.append(x)\n        \n\n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n        else:\n            self.count-=1\n            return self.stack.pop()\n        \n\n    def increment(self, k: int, val: int) -> None:\n        tstack=[]\n        while(self.stack and k>0):\n            tstack.append(self.stack.popleft()+val)\n            k-=1\n        while(tstack):\n            self.stack.appendleft(tstack.pop())\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n            \n    def pop(self) -> int:\n        if not self.stack:\n            return -1\n        return self.stack.pop()          \n\n    def increment(self, k: int, val: int) -> None:\n        i = 0\n        while i <= min(k-1, len(self.stack) - 1):\n            self.stack[i] += val\n            i += 1\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.customstack = []\n        self.maxsize = maxSize\n        \n    def push(self, x: int) -> None:\n        if len(self.customstack) != self.maxsize:\n            self.customstack.append(x)\n\n    def pop(self) -> int:\n        if self.customstack != []:\n            ele = self.customstack[-1]\n            del self.customstack[-1]\n            return ele\n        else:\n            return -1\n        \n\n    def increment(self, k: int, val: int) -> None:\n        print(self.customstack)\n        print(\\\"k\\\", k)\n        print(\\\"value\\\", val)\n        for i in range(min(k, len(self.customstack))):\n            self.customstack[i] = self.customstack[i] + val\n        print(self.customstack)\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        \\\"\\\"\\\"\n        Lazy increment: only increment when pop is called\n        \n        ptr points to the last recently filled element, or -1 if empty\n        \\\"\\\"\\\"\n        self.stack = [None] * maxSize\n        self.ptr = -1\n\n    def push(self, x: int) -> None:\n        \\\"\\\"\\\"\n        Initial offset of every push is 0\n        \\\"\\\"\\\"\n        if self.ptr != len(self.stack) - 1:\n            self.ptr += 1\n            self.stack[self.ptr] = [x, 0]\n\n\n    def pop(self) -> int:\n        if self.ptr == -1:\n            return -1\n        else:\n            # Get the number added with its offset\n            num = self.stack[self.ptr][0] + self.stack[self.ptr][1]\n            \n            # Propagate this offset down to the next element\n            if self.ptr != 0:\n                self.stack[self.ptr - 1][1] += self.stack[self.ptr][1]\n            self.ptr -= 1\n            \n            return num\n\n    def increment(self, k: int, val: int) -> None:\n        \\\"\\\"\\\"\n        Mark where in the stack to propagate offset downwards\n        \\\"\\\"\\\"\n        if self.ptr == -1:\n            return\n        elif k > self.ptr:\n            self.stack[self.ptr][1] += val\n        else:\n            self.stack[k - 1][1] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.max = maxSize\n        self.array = []\n        self.size = 0\n        \n\n    def push(self, x: int) -> None:\n        if self.size == self.max:\n            pass\n        else:\n            self.array.append(x)\n            self.size += 1\n        \n    def pop(self) -> int:\n        if self.size == 0:\n            return -1\n        self.size -= 1\n        temp = self.array.pop()\n        return temp\n        \n    def increment(self, k: int, val: int) -> None:\n        self.array[0:k] = list([x+val for x in self.array[0:k]])\n        \n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize=maxSize\n        self.stack= []\n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if len(self.stack)>=1:\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        import numpy as np\n        if k>=len(self.stack):\n            self.stack= (np.array(self.stack)+ np.array([val]* len(self.stack))).tolist()\n           \n        if k<len(self.stack):\n            t= [val]*k\n            t.extend([0]* (len(self.stack)-k))\n            self.stack= (np.array(self.stack)+ np.array(t)  ).tolist()\n            \n#ed and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.max = maxSize\n        self.stack = []\n        self.inc_stack = []\n        self.index = 0\n\n    def push(self, x: int) -> None:\n        self.index += 1\n        if len(self.stack) != self.max:\n            self.stack.append((self.index, x))\n\n    def pop(self) -> int:\n        self.index += 1\n        if not self.stack:\n            return -1\n        height = len(self.stack)\n        index_x, x = self.stack.pop()\n        for i in range(len(self.inc_stack) - 1, -1, -1):\n            index, val, h = self.inc_stack[i]\n            if index < index_x:\n                break\n            if h >= height:\n                x += val\n        return x\n\n    def increment(self, k: int, val: int) -> None:\n        self.index += 1\n        self.inc_stack.append((self.index, val, min(k, len(self.stack))))\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.arr=[]\n        self.size=maxSize\n    def push(self, x: int) -> None:\n        if(len(self.arr)==self.size):\n            pass\n        else:\n            self.arr.append(x)\n    def pop(self) -> int:\n        try:\n            return self.arr.pop()\n        except:\n            return -1\n    def increment(self, k: int, val: int) -> None:\n        ctr=0\n        for i in self.arr:\n            self.arr[ctr]+=val\n            ctr+=1\n            if(ctr==k):\n                break\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "import numpy\nclass CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.sz = maxSize\n        self.vals = []\n\n    def push(self, x: int) -> None:\n        if len(self.vals)<self.sz:\n            self.vals.append(x)\n\n    def pop(self) -> int:\n        if len(self.vals)>0:\n            return self.vals.pop()\n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        tmp = numpy.array(self.vals)\n        tmp[:k] += val\n        self.vals = list(tmp)\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        \n        self.stack = []\n        self.maxSize = maxSize\n        \n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.maxSize:\n            print((self.stack))\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if self.stack:\n            return self.stack.pop()\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        \n        if k > len(self.stack):\n            for i in range(0,len(self.stack)):\n                self.stack[i] += val\n        else:\n            for i in range(0,k):\n                self.stack[i] += val\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n       \n        #if not len(self.lst) == maxSize:\n        self.m = maxSize\n        self.lst = []\n\n    def push(self, x: int) -> None:\n        if len(self.lst) < self.m:\n            self.lst.append(x)\n\n    def pop(self) -> int:\n        if len(self.lst) == 0:\n            return -1\n        ret = self.lst[-1]\n        self.lst = self.lst[0:-1]\n        return ret\n\n    def increment(self, k: int, val: int) -> None:\n        i = 0\n        while i < len(self.lst) and i < k:\n            self.lst[i] += val\n            i+=1\n    \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize):\n        self.n = maxSize\n        self.stack = []\n        self.inc = []\n\n    def push(self, x):\n        if len(self.inc) < self.n:\n            self.stack.append(x)\n            self.inc.append(0)\n\n    def pop(self):\n        if not self.inc: return -1\n        if len(self.inc) > 1:\n            self.inc[-2] += self.inc[-1]\n        return self.stack.pop() + self.inc.pop()\n\n    def increment(self, k, val):\n        if self.inc:\n            self.inc[min(k, len(self.inc)) - 1] += val\n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack = []\n        self.inc = {}\n        self.maxSize = maxSize\n\n    def push(self, x: int) -> None:\n        print(\\\"push\\\",x)\n        if len(self.stack) < self.maxSize:\n            self.stack.append(x)\n            # self.printStack()\n\n    def pop(self) -> int:\n        print(\\\"pop\\\")\n        l = len(self.stack)\n        if l:\n            top = self.getTop()\n            if l in self.inc:\n\n                if l-1 in self.inc:\n                    self.inc[l-1] += self.inc[l]\n                else:\n                    self.inc[l-1] = self.inc[l]\n                del self.inc[l]\n            \n            self.stack.pop()\n            # self.printStack()\n            return top\n        # self.printStack()\n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        print(\\\"inc\\\",k,\\\"\\\",val)\n        if k > len(self.stack):\n            k = len(self.stack)\n        if k in self.inc:        \n                self.inc[k] += val\n                # self.printStack()\n        else:\n            self.inc[k] = val\n            # self.printStack()\n        \n    \n    def getTop(self):\n        \n        if len(self.stack) == 0:\n            # self.printStack()\n            return -1\n        else:\n            l = len(self.stack)\n            top = self.stack[-1]\n            if l in self.inc:\n                top+= self.inc[l]\n            # self.printStack()\n            return top\n        \n    def printStack(self):\n        print(self.stack)\n        print(self.inc)\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)", "class CustomStack:\n    \\\"\\\"\\\"\n    xxxxxxxxx i\n         2\n      2     5\n    999777555      \n      \n    \\\"\\\"\\\"\n    \n    def __init__(self, maxSize: int):\n        self.size = maxSize\n        self.stack = []\n        self.inc = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.size:\n            self.stack.append(x)\n            self.inc.append(0)\n\n    def pop(self) -> int:\n        # print(self.inc)\n        # print(self.stack)\n        length = len(self.stack)\n        if length > 0:\n            increment = self.inc[-1]\n            if length > 1:\n                self.inc[length-2] += increment\n            \n            self.inc.pop()\n\n            return self.stack.pop() + increment\n        \n        return -1\n\n    def increment(self, k: int, val: int) -> None:\n        if k <= len(self.inc):\n            self.inc[k-1] += val\n        elif len(self.inc) > 0:\n            self.inc[-1] += val\n        \n        \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)", "class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.max = maxSize\n        self.stack = list()\n\n    def push(self, x: int) -> None:\n        if len(self.stack) < self.max:\n            self.stack.append([x, 0])\n\n    def pop(self) -> int:\n        if self.stack:\n            (value, increment) = self.stack.pop()\n            if self.stack:\n                self.stack[-1][1] += increment\n            return value + increment\n        else:\n            return -1\n\n    def increment(self, k: int, val: int) -> None:\n        if k <= len(self.stack):\n            self.stack[k-1][1] += val\n        else:\n            if self.stack:\n                self.stack[-1][1] += val\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)\n"]