["import math\nfrom collections import deque\nfrom sys import stdin, stdout\nfrom string import ascii_letters\nimport sys\nletters = ascii_letters\ninput = stdin.readline\n#print = stdout.write\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    can = list(map(int, input().split()))\n    vals = sorted([i for i in range(n) if not can[i]], key=lambda x: -arr[x])\n    res = [0] * n\n    last = 0\n    for i in range(n):\n        if can[i]:\n            res[i] = arr[i]\n        else:\n            res[i] = arr[vals[last]]\n            last += 1\n    print(*res)\n", "import sys\nimport math as mt\nimport collections as cc\nimport sys\nimport itertools as it\ninput=sys.stdin.readline\nI=lambda:list(map(int,input().split()))\nfor tc in range(int(input())):\n\tn,=I()\n\tar=I()\n\tl=I()\n\ts=[]\n\tll=l.copy()\n\tloc=cc.defaultdict(int)\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\ts.append(ar[i])\n\t\t\tloc[i]=-10**6\t\n\t\telse:\n\t\t\tloc[i]=ar[i]\n\ts.sort(reverse=True)\n\tj=0\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\tl[i]=s[j]\n\t\t\tj+=1\n\t\telse:\n\t\t\tl[i]=ar[i]\n\tprint(*l)\n\n", "from collections import deque\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    \n    bckt = []\n    for i in range(n):\n        if not l[i]:\n            bckt.append(a[i])\n            a[i] = 10**9\n            \n    bckt.sort(reverse=True)\n    bckt = deque(bckt)\n    \n    for i in range(n):\n        if a[i] == 10**9:\n            a[i] = bckt.popleft()\n            \n    print(*a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n\n    s = []\n    out = [10**6] * n\n    for i in range(n):\n        if l[i]:\n            out[i] = a[i]\n        else:\n            s.append(a[i])\n    s.sort()\n    for i in range(n):\n        if out[i] == 10**6:\n            out[i] = s.pop()\n    print(' '.join(map(str,out)))\n", "for _ in range (int(input())):\n    n = int(input())\n    a =  [int(i) for i in input().split()]\n    l =  [int(i) for i in input().split()]\n    b = []\n    for i in range (n):\n        if l[i]==0:\n            b.append(a[i])\n    b.sort(reverse=True)\n    ind = 0\n    for i in range (n):\n        if l[i]==0:\n            a[i]=b[ind]\n            ind+=1\n    print(*a)", "from sys import stdin\ndef input(): return stdin.readline().rstrip()\n\nfor _ in range(int(input())):\n    L = int(input())\n    lockSort = []\n    s = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    for i, c in enumerate(s):\n        if l[i] == 0:\n            lockSort.append(c)\n    lockSort = sorted(lockSort)[::-1]\n    cnt = 0\n    for i, c in enumerate(s):\n        if l[i] == 1:\n            print(c, end=\" \")\n        else:\n            print(lockSort[cnt], end=\" \")\n            cnt += 1\n    print()\n", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lock = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        if lock[i] == 0:\n            b.append(a[i])\n    b.sort()\n    b=b[::-1]\n    ind = 0\n    for i in range(n):\n        if lock[i] == 0:\n            a[i]=b[ind]\n            ind+=1\n    a=[str(i) for i in a]\n    print(\" \".join(a))", "\nINF = float('inf')\n\n\ndef prod(arr):\n    ret = 1\n    for x in arr:\n        ret *= x\n\n    return ret\n\n\ndef tc():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n\n    uis = []\n    for i in range(n):\n        if not l[i]:\n            uis.append(i)\n\n    uvals = [a[i] for i in uis]\n    uvals.sort()\n\n    for i in uis:\n        a[i] = uvals.pop()\n\n    print(' '.join(map(str, a)))\n\n\n################\nT = int(input())\nfor _ in range(T):\n    tc()\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        if l[i] == 0:\n            b.append(a[i])\n    b.sort()\n    b.reverse()\n    j = 0\n    for i in range(n):\n        if l[i] == 0:\n            a[i] = b[j]\n            j += 1\n    print(*a)", "input=__import__('sys').stdin.readline\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    blocked=[]\n    binds=[]\n    b=list(map(int,input().split()))\n    for i in range(n):\n        if not b[i]:blocked+=a[i],;binds+=i,\n    blocked.sort()\n    for i in range(len(binds)):\n        a[binds[i]]=blocked[i]\n    k1=-1\n    cs=0\n    for i in range(n):\n        cs+=a[i]\n        if cs<0:k1=i\n    ans1=a.copy()\n    blocked.reverse()\n    for i in range(len(binds)):\n        a[binds[i]]=blocked[i]\n    k2=-1\n    cs=0\n    for i in range(n):\n        cs+=a[i]\n        if cs<0:k2=i\n    ans2=a.copy()\n    ans=ans1 if k1<k2 else ans2\n    print(*ans)", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    A=list(map(int,input().split()))\n    l=list(map(int,input().split()))\n\n    B=[]\n    for i in range(n):\n        if l[i]==0:\n            B.append(A[i])\n    B.sort(reverse=True)\n\n    ind=0\n    for i in range(n):\n        if l[i]==0:\n            A[i]=B[ind]\n            ind+=1\n\n    print(*A)\n            \n\n    \n    \n    \n", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    st = list(map(int, input().split()))\n    sv = []\n    for j in range(n):\n        if st[j] == 0:\n            sv.append(nums[j])\n    sv.sort(reverse=True)\n    new = []\n    k = 0\n    for j in range(n):\n        if st[j] == 1:\n            new.append(nums[j])\n        else:\n            new.append(sv[k])\n            k += 1\n    print(*new)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    l = list(map(int,input().split()))\n    b = []\n    if sum(l) < n: # exist non-blocked\n        for i in range(n):\n            if l[i] == 0:\n                b.append(a[i])\n        b.sort(reverse=True)\n        j = 0\n        for i in range(n):\n            if l[i] == 0:\n                print(b[j], end =' ')\n                j += 1\n            else:\n                print(a[i], end =' ')\n        print()\n    else:\n        for i in range(n):\n            print(a[i],end=' ')\n        print()", "import sys,os,io\ninput = sys.stdin.readline\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nT = int(input())\nans = [0]*T\nfor t in range(T):\n  N = int(input())\n  A = list(map(int, input().split()))\n  L = list(map(int, input().split()))\n  B = [A[i] for i in range(N) if L[i]==0]\n  B.sort()\n  ans[t] = []\n  for i in range(N):\n    if L[i]==0:\n      ans[t].append(B.pop())\n    else:\n      ans[t].append(A[i])\nfor a in ans:\n  print(*a)", "for _ in range(int(input())):\n    n = int(input())\n    *arr, = list(map(int, input().split()))\n    *locks, = list(map(int, input().split()))\n\n    locked = []\n    unlocked = []\n    for v, is_locked in zip(arr, locks):\n        if not is_locked:\n            unlocked.append(v)\n    unlocked.sort(reverse=True)\n    arr_idx = 0\n    unlocked_idx = 0\n    while unlocked_idx < len(unlocked) and arr_idx < len(arr):\n        if not locks[arr_idx]:\n            arr[arr_idx] = unlocked[unlocked_idx]\n            unlocked_idx += 1\n        arr_idx += 1\n    print(*arr)\n", "from math import inf, ceil\nfrom heapq import *\nfrom collections import defaultdict\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    crr = [arr[i] for i in range(n) if not brr[i]]\n    crr.sort(reverse=True)\n    ind = 0\n    for i in range(n):\n        if not brr[i]:\n            arr[i] = crr[ind]\n            ind += 1\n    print(*arr)", "def main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    l = list(map(int,input().split()))\n    new_lst = []\n    for i in range(n):\n        if not l[i]:\n            new_lst.append(a[i])\n    new_lst = sorted(new_lst, reverse=True)\n    k = 0\n    for i in range(n):\n        if not l[i]:\n            a[i] = new_lst[k]\n            k += 1\n    sm = 0\n    for i in a:\n        print(i, end=\" \")\n    print()\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()", "for _ in range(int(input())):\n    N = int(input())\n    List = [int(x) for x in input().split()]\n    Lock = [int(x) for x in input().split()]\n    X = []\n    for i in range(N):\n        if(not Lock[i]):\n            X.append(List[i])\n    X.sort(reverse  = True)\n    j = 0\n    for i in range(N):\n        if(not Lock[i]):\n            List[i] = X[j]\n            j+=1\n    print(*List)", "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split(\" \")))\n    b = list(map(int, input().split(\" \")))\n    c=[]\n    for i in range(n):\n        if b[i]==0:\n            c.append(a[i])\n    c.sort(reverse=True)\n    k=0\n    for i in range(n):\n        if b[i]==0:\n            a[i]=c[k]\n            k+=1\n    print(\" \".join(str(j) for j in a))\n", "import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(arr, brr):  # fix inputs here\n    console(\"----- solving ------\")\n\n    movable = []\n    for a,b in zip(arr,brr):\n        if b == 0:\n            movable.append(a)\n    \n    movable = sorted(movable)\n    # console(movable)\n\n    for i in range(len(arr)):\n        if brr[i] == 0:\n            arr[i] = movable.pop()\n\n    # return a string (i.e. not a list or matrix)\n    return arr \n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n# fast read all\n# sys.stdin.readlines()\n\nfor case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    k = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    arr = list(map(int,input().split()))\n    brr = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(map(int,input().split())))\n\n    res = solve(arr,brr)  # please change\n    \n    # Google - case number required\n    # print(\"Case #{}: {}\".format(case_num+1, res))\n\n    # Codeforces - no case number required\n    print(\" \".join([str(x) for x in res]))\n", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int,input().split()))\n\nt,=I()\nfor i in range(t):\n\tn,=I()\n\ta=I()\n\tl=I()\n\tar=[a[i] for i in range(n) if l[i]==0]\n\tar.sort(reverse=True)\n\tx=0\n\tfor i in range(n):\n\t\tif l[i]==0:\n\t\t\ta[i]=ar[x]\n\t\t\tx+=1\n\tprint(*a)\n", "from sys import stdin\ndef input(): return stdin.readline()\ndef lmi(): return list(map(int, input().split()))\n\nT = int(input())\nfor _ in range(T):\n    input()\n    temp = list()\n    s, l = lmi(), lmi()\n    for i, c in enumerate(s):\n        if l[i] == 0: temp.append(c)\n    temp = sorted(temp)[::-1]\n    cc = 0\n    for i, x in enumerate(s):\n        if l[i] == 1: print(x, end=\" \")\n        else:\n            print(temp[cc], end=\" \")\n            cc += 1\n    print()\n"]