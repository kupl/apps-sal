["#      \nimport collections, atexit, math, sys\nfrom functools import cmp_to_key\n#key=cmp_to_key(lambda x,y: 1 if x not in y else -1 )\n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\nimport bisect \ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept ModuleNotFoundError:\n    def dprint(*args, **kwargs):\n        pass\n\n\ndef memo(func):  \n    cache={}  \n    def wrap(*args):  \n        if args not in cache:  \n            cache[args]=func(*args)  \n        return cache[args]  \n    return wrap\n\n@memo\ndef comb (n,k):\n    if k==0: return 1\n    if n==k: return 1\n    return comb(n-1,k-1) + comb(n-1,k)\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\n\nzz = getIntList()\nzz.sort()\nresult = (zz[N-1] - zz[0]) * (zz[2*N-1] - zz[N])\n\ndif = zz[2*N-1] - zz[0]\n\nfor i in range(N):\n    nd = zz[i+N-1] - zz[i]\n    result = min(result, nd*dif)\n\nprint(result)\n\n\n\n\n\n\n\n", "n = int(input())\nv = sorted([int(x) for x in input().split()])\nans = (v[n - 1] - v[0]) * (v[n * 2 - 1] - v[n])\nfor i in range(1, n + 1) :\n    ans = min(ans, (v[i + n - 1] - v[i]) * (v[2 * n - 1] - v[0]))\nprint(ans)\n", "n = int(input())\na = []\na = input().split()\nfor i in range(len(a)):\n  a[i] = int(a[i])\na.sort()\nc = 0\nans = (a[n - 1]-a[0])*(a[2*n-1]-a[n])\nfor i in range(n):\n  ans = min(ans, (a[i+n-1]-a[i])*(a[2*n-1]-a[0]))\nprint(ans)\n", "t=int(input(''))\nn= list(map(int, input().split()))\nn.sort()\nans=(n[(2*t)-1]-n[t])*(n[t-1]-n[0])\nfor i in range(1,t):\n  ans=min((n[i+t-1]-n[i])*(n[(2*t)-1]-n[0]),ans)\nprint(ans)", "n=int(input())\na=sorted(map(int,input().split()))\nprint(min((a[n-1]-a[0])*(a[-1]-a[n]),(a[-1]-a[0])*min(a[n-1+i]-a[i] for i in range(n))))", "n=int(input())\ns=sorted(list(map(int,input().split())))\nans=(s[n-1]-s[0])*(s[2*n-1]-s[n])\nfor i in range(n):ans=min(ans,(s[2*n-1]-s[0])*(s[n-1+i]-s[i]))\nprint(ans)", "def main():\n    n = int(input())\n    l = sorted(map(int, input().split()))\n    r = (l[n - 1] - l[0]) * (l[-1] - l[n])\n    if r:\n        r = min(r, min(b - a for a, b in zip(l[1:n], l[n:-1])) * (l[-1] - l[0]))\n    print(r)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n  n = int(input())\n  numbers = list(map(int, input().split(\" \")))\n  numbers.sort()\n  r = [numbers[n-1+x]-numbers[x] for x in range(n+1)]\n  #print(numbers)\n  #print(r)\n  print(min([r[0]*r[-1],(numbers[-1]-numbers[0])*min(r)]))\n\nmain()", "3\n\ndef solve(N, A):\n    if N == 1:\n        return 0\n\n    A.sort()\n\n    fh = A[0:N]\n    lh = A[N:]\n\n    best = (max(fh) - min(fh)) * (max(lh) - min(lh))\n\n    for i in range(1, N + 1):\n        area = (A[-1] - A[0]) * (A[i + N - 1] - A[i])\n        best = min(best, area)\n\n    return best\n\n\ndef main():\n    N = int(input())\n    A = [int(e) for e in input().split(' ')]\n    assert len(A) == 2 * N\n    print(solve(N, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\nxd = a[n - 1] - a[0]\nyd = a[-1] - a[n]\nans = xd * yd\nfor i in range(n, 2 * n):\n    xd = a[i - 1] - a[i - n]\n    yd = a[-1] - a[0]\n    ans = min(ans, xd * yd)\n\nprint(ans)\n", "import math\n\nx = int(input())\n\nif (x == 1):\n    print(0)\nelse:\n    y = [int(x) for x in input().split(' ')]\n    y.sort()\n    x1 = y[0]\n    y2 = y[-1]\n    if (x%2 == 1):\n        case_1 = (y[x] - x1)*(y2 - y[x+1])\n    else:\n        case_1 = (y[x-1] - x1)*(y2 - y[x])\n    \n    \n    case_2 = (y[-1] - y[0])\n    start = 1\n    end = start + x - 1\n    minValue = y[end] - y[start]\n    while (end < len(y)-1):\n        val = y[end] - y[start]\n        if (val < minValue):\n            minValue = val\n        start += 1\n        end += 1\n    \n    case_2 *= minValue\n    \n    \n    print(min(case_1, case_2))\n", "n = int(input())\na = [ int(x) for x in input().split() ]\na.sort()\n\nans = (a[n-1] - a[0]) * (a[2*n-1] - a[n])\nfor i in range(1, n):\n    ans = min(ans, (a[2*n-1] - a[0]) * (a[i+n-1] - a[i]))\n\nprint(ans)", "n=int(input())\na=sorted(map(int,input().split()))\nprint((min([(a[n-1]-a[0])*(a[-1]-a[n])]+[(a[-1]-a[0])*(a[i+n-1]-a[i])\nfor i in range(n)])))\n\n\n\n# Made By Mostafa_Khaled\n", "n=int(input())\nA=list(map(int,input().split()))\nA.sort()\nB=[]\nt=A[-1]-A[0]\nB.append((A[n-1]-A[0])*(A[-1]-A[n]))\nfor i in range(1,n):\n    B.append(t*(-A[i]+A[i+n-1]))\nprint(min(B))", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nres = (a[n-1]-a[0])*(a[2*n-1]-a[n])\nx = max(a)\ny = min(a)\n\nfor i in range(1,n+1):\n    res = min(res, (x-y)*(a[i+n-1]-a[i]))\nprint(res)\n", "\n\nnum_points = int(input())\ncoords = [int(x) for x in input().split()]\ncoords.sort()\nwidth = coords[num_points - 1] - coords[0]\nheight = coords[-1] - coords[num_points]\narea1 = width*height\n\nwidth2 = min(coords[i+num_points-1] - coords[i] for i in range(num_points + 1))\nheight2 = coords[-1] - coords[0]\narea2 = width2*height2\n\narea = min(area1, area2)\n\nprint(area)\n\n", "\nn = int(input())\nline = [int(x) for x in input().split()]\nline.sort()\nans = (line[n-1]-line[0])*(line[-1]-line[n])\nk = line[-1] - line[0]\n#print(line)\nfor i in range(1, n):\n    #print(line[i:i+n])\n    ans = min(ans, k*(line[i+n-1]-line[i]))\nprint(ans)\n", "n=int(input())\na=list(map(int,input().split()))\na.sort()\nx=float('Inf')\nfor i in range(1,n):\n    x=min(x,a[i+n-1]-a[i])\nprint(min((a[n-1]-a[0])*(a[-1]-a[n]),x*(a[-1]-a[0])))", "n=int(input())\ns=sorted(list(map(int,input().split())))\nans=(s[n-1]-s[0])*(s[2*n-1]-s[n])\nfor i in range(n):ans=min(ans,(s[2*n-1]-s[0])*(s[n-1+i]-s[i]))\nprint(ans)\n", "n = int(input())\nl = input().split()\nl = [int(i) for i in l]\nl.sort()\n\nm = (l[2*n - 1] - l[n])*(l[n - 1] - l[0])\nfor i in range(1,n):\n        if m > (l[2*n - 1] - l[0])*(l[i + n - 1] - l[i]):\n                m = (l[2*n - 1] - l[0])*(l[i + n - 1] - l[i]);\nprint(m)\n", "import sys\nioRead = sys.stdin.readline\nioWrite = lambda x: sys.stdout.write(f\"{x}\\n\")\n\nn = int(ioRead())\npoints = sorted(map(int, ioRead().split(\" \")))\n\nanswer = points[-1] ** 2\n\nfor c in range(n):\n    axis_1 = [points[c], points[c+n - 1]]\n    axis_2 = [points[n if c==0 else 0], points[-1]]\n    c_answer = (axis_1[1] - axis_1[0]) * (axis_2[1] - axis_2[0])\n    answer = min(answer, c_answer)\n\nioWrite(answer)", "n = int(input())\npoint = [int(item) for item in input().split(' ')]\npoint.sort()\na = (point[n - 1] - point[0]) * (point[n + n - 1] - point[n])\nb = (point[-1] - point[0]) * min(point[n - 1 + i] - point[i] for i in range(n))\n\nprint(min(a, b))\n", "n=int(input())\ns=list(map(int,input().split()))\ns.sort()\nmix=s[0]\nmaxx=s[(n-1)]\nmiy=s[n]\nmay=s[-1]\ndp=[]\ndp.append([maxx,mix,may,miy])\nfor i in range(1,n):\n    dp.append([s[-1],s[0],s[i+n-1],s[i]])\nans=(dp[0][0]-dp[0][1])*(dp[0][2]-dp[0][3])\nfor i in dp:\n    ans=min(ans,(i[0]-i[1])*(i[2]-i[3]))\nprint(ans)", "\"\"\"\nNTC here\n\"\"\"\nfrom sys import setcheckinterval,stdin\nsetcheckinterval(1000)\n\n#print(\"Case #{}: {} {}\".format(i, n + m, n * m))\n\niin=lambda :int(stdin.readline())\nlin=lambda :list(map(int,stdin.readline().split()))\n\nn=iin()\ns=lin()\ns.sort()\nmix=s[0]\nmaxx=s[(n-1)]\nmiy=s[n]\nmay=s[-1]\ndp=[]\ndp.append([maxx,mix,may,miy])\nfor i in range(1,n):\n    dp.append([s[-1],s[0],s[i+n-1],s[i]])\nans=(dp[0][0]-dp[0][1])*(dp[0][2]-dp[0][3])\nfor i in dp:\n    ans=min(ans,(i[0]-i[1])*(i[2]-i[3]))\nprint(ans)\n", "\"\"\"\nNTC here\n\"\"\"\nfrom sys import setcheckinterval,stdin\nsetcheckinterval(1000)\n\n#print(\"Case #{}: {} {}\".format(i, n + m, n * m))\n\niin=lambda :int(stdin.readline())\nlin=lambda :list(map(int,stdin.readline().split()))\n\nn=iin()\ns=lin()\ns.sort()\nmix=s[0]\nmaxx=s[(n-1)]\nmiy=s[n]\nmay=s[-1]\nans=(maxx-mix)*(may-miy)\nfor i in range(1,n):\n    ans=min((s[-1]-s[0])*(s[i+n-1]-s[i]),ans)\nprint(ans)\n"]