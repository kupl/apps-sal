["l=list(map(int,input()))\nt=-1\nx=-1\ny=-1\nfor i in range(len(l)):\n    s=l[i]\n    a=i+1\n    b=i+1\n    for j in range(i+1,len(l)):\n        if l[i]<l[j]:\n            s=s+l[j]\n            b=j+1\n        else:\n            break\n    if s>t:\n        t=s\n        x=a\n        y=b\nprint(t,end=\":\")\nprint(x,y,sep=\"-\")", "l=list(map(int,input()))\r\nt=-1\r\nx=-1\r\ny=-1\r\nfor i in range(len(l)):\r\n    s=l[i]\r\n    a=i+1\r\n    b=i+1\r\n    for j in range(i+1,len(l)):\r\n        if l[i]<l[j]:\r\n            s=s+l[j]\r\n            b=j+1\r\n        else:\r\n            break\r\n    if s>t:\r\n        t=s\r\n        x=a\r\n        y=b\r\nprint(t,end=\":\")\r\nprint(x,y,sep=\"-\")", "a=input().strip()\r\nr=[]\r\nfor i in range(len(a)):\r\n    s=int(a[i])\r\n    k=0\r\n    for j in range(i,len(a)-1):\r\n        if a[j+1]>a[j]:\r\n            s=s+int(a[j+1])\r\n            k+=1\r\n        else:\r\n            break\r\n    r.append([i+1,i+k+1,s]) \r\nfor i in range(len(r)):\r\n    for j in range(i+1,len(r)):\r\n        if r[i][2]>r[j][2]:\r\n            c=r[j]\r\n            r[j]=r[i]\r\n            r[i]=c\r\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))", "a=input().strip()\r\nr=[]\r\nfor i in range(len(a)):\r\n    s=int(a[i])\r\n    k=0\r\n    for j in range(i,len(a)-1):\r\n        if a[j+1]>a[j]:\r\n            s=s+int(a[j+1])\r\n            k+=1\r\n        else:\r\n            break\r\n    r.append([i+1,i+k+1,s]) \r\nfor i in range(len(r)):\r\n    for j in range(i+1,len(r)):\r\n        if r[i][2]>r[j][2]:\r\n            c=r[j]\r\n            r[j]=r[i]\r\n            r[i]=c\r\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))", "# cook your dish here\nn = input()+\"0\"\n\nmax_sum = 0\nmax_pos = \"\"\nstart = 0\nsum = int(n[0])\nfor i in range(1, len(n)):\n    if n[i-1] >= n[i]:\n        if max_sum < sum:\n            max_sum = sum\n            max_pos = \"{}-{}\".format(start+1, i)\n        start = i\n        sum = int(n[i])\n    else:\n        sum += int(n[i])\nprint(\"{}:{}\".format(max_sum, max_pos))", "a=input().strip()\r\nr=[]\r\nfor i in range(len(a)):\r\n    s=int(a[i])\r\n    k=0\r\n    for j in range(i,len(a)-1):\r\n        if a[j+1]>a[j]:\r\n            s=s+int(a[j+1])\r\n            k+=1\r\n        else:\r\n            break\r\n    r.append([i+1,i+k+1,s]) \r\nfor i in range(len(r)):\r\n    for j in range(i+1,len(r)):\r\n        if r[i][2]>r[j][2]:\r\n            c=r[j]\r\n            r[j]=r[i]\r\n            r[i]=c\r\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))", "# cook your dish here\na=input().strip()\nr=[]\nfor i in range(len(a)):\n    s=int(a[i])\n    k=0\n    for j in range(i,len(a)-1):\n        if a[j+1]>a[j]:\n            s=s+int(a[j+1])\n            k+=1\n        else:\n            break\n    r.append([i+1,i+k+1,s]) \nfor i in range(len(r)):\n    for j in range(i+1,len(r)):\n        if r[i][2]>r[j][2]:\n            c=r[j]\n            r[j]=r[i]\n            r[i]=c\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))", "# cook your dish here\np=input().strip()\nr=[]\nfor i in range(len(p)):\n    s=int(p[i])\n    k=0\n    for j in range(i,len(p)-1):\n        if p[j+1]>p[j]:\n            s=s+int(p[j+1])\n            k+=1\n        else:\n            break\n    r.append([i+1,i+k+1,s]) \nfor i in range(len(r)):\n    for j in range(i+1,len(r)):\n        if r[i][2]>r[j][2]:\n            c=r[j]\n            r[j]=r[i]\n            r[i]=c\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))", "a=input()\r\nr=[]\r\nfor i in range(len(a)):\r\n    s=int(a[i])\r\n    k=0\r\n    for j in range(i,len(a)-1):\r\n        if a[j+1]>a[j]:\r\n            s=s+int(a[j+1])\r\n            k+=1\r\n        else:\r\n            break\r\n    r.append([i+1,i+k+1,s]) \r\nfor i in range(len(r)):\r\n    for j in range(i+1,len(r)):\r\n        if r[i][2]>r[j][2]:\r\n            c=r[j]\r\n            r[j]=r[i]\r\n            r[i]=c\r\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))", "# cook your dish here\na=input()\na=[int(i) for i in a]\nl=[]\nfor i in range(len(a)):\n    s=a[i]\n    k=0\n    for j in range(i,len(a)-1):\n        if a[j]<a[j+1]:\n            s+=a[j+1]\n            k+=1 \n        else:\n            break\n    l.append([i+1,k+1+i,s])\nfor i in range(len(l)):\n    for j in range(i+1,len(l)):\n        if l[i][-1]>l[j][-1]:\n            c=l[i]\n            l[i]=l[j]\n            l[j]=c\nprint(\"{}:{}-{}\".format(l[-1][-1],l[-1][0],l[-1][1]))\n    \n    ", "a=input().strip()\nr=[]\nfor i in range(len(a)):\n    s=int(a[i])\n    k=0\n    for j in range(i,len(a)-1):\n        if a[j+1]>a[j]:\n            s=s+int(a[j+1])\n            k+=1\n        else:\n            break\n    r.append([i+1,i+k+1,s]) \nfor i in range(len(r)):\n    for j in range(i+1,len(r)):\n        if r[i][2]>r[j][2]:\n            c=r[j]\n            r[j]=r[i]\n            r[i]=c\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))\n", "a=input().strip()\nr=[]\nfor i in range(len(a)):\n    s=int(a[i])\n    k=0\n    for j in range(i,len(a)-1):\n        if a[j+1]>a[j]:\n            s=s+int(a[j+1])\n            k+=1\n        else:\n            break\n    r.append([i+1,i+k+1,s]) \nfor i in range(len(r)):\n    for j in range(i+1,len(r)):\n        if r[i][2]>r[j][2]:\n            c=r[j]\n            r[j]=r[i]\n            r[i]=c\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))\n", "# cook your dish here\nn = str(input())\nmax = 0\ni = 0\nsum = int(n[i])\na=1\nb=1\np=1\nq=1\nwhile i<len(n)-1:\n    i += 1\n    if int(n[i-1]) < int(n[i]):\n        sum = sum + int(n[i])\n        b += 1\n    else:\n        if sum>max:\n            max=sum\n            p=a\n            q=b\n        sum = int(n[i])\n        a = i + 1\n        b=a\nprint(\"{}:{}-{}\".format(max,p,q))", "arr=input().strip()\r\nres=[]\r\nfor i in range(len(arr)):\r\n    s=int(arr[i])\r\n    k=0\r\n    for j in range(i,len(arr)-1):\r\n        if arr[j+1]>arr[j]:\r\n            s=s+int(arr[j+1])\r\n            k+=1\r\n        else:\r\n            break\r\n    res.append([i+1,i+k+1,s]) \r\nfor i in range(len(res)):\r\n    for j in range(i+1,len(res)):\r\n        if res[i][2]>res[j][2]:\r\n            temp=res[j]\r\n            res[j]=res[i]\r\n            res[i]=temp\r\nprint(\"{}:{}-{}\".format(res[-1][2],res[-1][0],res[-1][1]))\r\n\r\n            ", "n = input()\r\narr = list(map(int,n))\r\nn =len(arr)\r\n\r\nm = 1\r\nl = 1\r\ns =0\r\nmaxIndex = 0\r\nc=0\r\nfor i in range(1, n):\r\n    if (arr[i] > arr[i - 1]):\r\n        l = l + 1\r\n    else:\r\n        if (m < l):\r\n            m = l\r\n            maxIndex = i - m\r\n        l = 1\r\nif (m < l):\r\n    m = l\r\n    maxIndex = n - m\r\n\r\nfor i in range(maxIndex, (m + maxIndex)):\r\n    s+=arr[i]\r\n    c+=1\r\n\r\nprint(f'{s}:{maxIndex + 1}-{m + maxIndex}')", "# cook your dish here\nnumber = input()\nnumber = list(number)\nnumber = list(map(int,number))\nd1={}\nfor i in range(len(number)-1):\n    k = number[i]\n    for j in range(i,len(number)-1):\n        if number[j+1]>number[j]:\n            k=k+number[j+1]\n        else:\n            d1[i] = k\n            break            \nd1[len(number)-1] = number[len(number)-1] \n# print(d1)\nKeymax = max(d1, key=d1.get)\nall_values = d1.values()\nmax_value = max(all_values)\nsum1=number[i]\nfor i in range(Keymax,len(number)-1):\n    if number[i+1]>number[i]:\n        pass\n    else:\n        print(str(max_value)+\":\"+str(Keymax+1)+\"-\"+str(i+1))\n        break\n    \n        ", "n = input()\r\narr = list(map(int,n))\r\nn =len(arr)\r\n\r\nm = 1\r\nl = 1\r\ns =0\r\nmaxIndex = 0\r\nc=0\r\nfor i in range(1, n):\r\n    if (arr[i] > arr[i - 1]):\r\n        l = l + 1\r\n    else:\r\n        if (m < l):\r\n            m = l\r\n            maxIndex = i - m\r\n        l = 1\r\nif (m < l):\r\n    m = l\r\n    maxIndex = n - m\r\n\r\nfor i in range(maxIndex, (m + maxIndex)):\r\n    s+=arr[i]\r\n    c+=1\r\n\r\nprint(f'{s}:{maxIndex + 1}-{m + maxIndex}')", "# cook your dish here\na=input().strip()\nr=[]\nfor i in range(len(a)):\n    s=int(a[i])\n    k=0\n    for j in range(i,len(a)-1):\n        if a[j+1]>a[j]:\n            s=s+int(a[j+1])\n            k+=1\n        else:\n            break\n    r.append([i+1,i+k+1,s]) \nfor i in range(len(r)):\n    for j in range(i+1,len(r)):\n        if r[i][2]>r[j][2]:\n            c=r[j]\n            r[j]=r[i]\n            r[i]=c\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))", "# cook your dish here\na=input()\ninitial,final=1,1      \ncinitial=1\nprev=-1\nsum=0\nmax=0\nfor i in range(len(a)):\n    if int(a[i])>prev:\n        sum+=int(a[i])\n    else:\n        if sum>max:\n            max=sum\n            initial=cinitial\n            final=i\n        sum=int(a[i])\n        cinitial=i+1\n    prev=int(a[i])\nif sum>max:\n    max=sum\n    initial=cinitial\n    final=len(a)\nprint(max,\":\",initial,\"-\",final,sep=\"\")", "'''\r\n\r\n* Author : Ayushman Chahar #\r\n* About  : II Year, IT Undergrad #\r\n* Insti  : VIT, Vellore #\r\n\r\n'''\r\n\r\nimport os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n\r\ndef main():\r\n    # for _ in range(int(input())):\r\n    n = input()\r\n    num = [int(i) for i in n]\r\n    n = len(num)\r\n    # max = 0\r\n    summ = []\r\n    idx = []\r\n    for i in range(n):\r\n        for j in range(i + 1, n + 1):\r\n            arr = num[i: j]\r\n            if(sorted(arr) == arr):\r\n                summ.append(sum(arr))\r\n                idx.append([i + 1, j])\r\n    idxx = summ.index(max(summ))\r\n    print(str(summ[idxx]) + ':' + str(idx[idxx][0]) + '-' + str(idx[idxx][1]))\r\n\r\n\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()", "import math\nn=int(input())\ns=str(n)\narr=list()\nfor ss in s:\n    arr.append(int(ss))\nnn=len(arr)\nmaxi=0\nfirst=0\nlast=0\nfor i in range(nn):\n    mm=arr[i]\n    sum=arr[i]\n    f=i+1\n    l=i+1\n    for j in range(i+1,nn):\n        if arr[j]>mm:\n            mm=arr[j]\n            sum+=arr[j]\n            l=j+1\n    if sum>maxi:\n        maxi=sum\n        first=f\n        last=l\nprint(f'{maxi}:{first}-{last}')\n\n\n\n    \n\n    \n\n", "l=list(input())\r\ns=int(l[0])\r\nl1=[]\r\nl2=[]\r\nl3=[]\r\nl3.append(1)\r\nfor i in range(1,len(l)):\r\n    if int(l[i-1])<int(l[i]):\r\n        s+=int(l[i])\r\n    else:\r\n        l1.append(int(s))\r\n        s=int(l[i])\r\n        l3.append(i+1)\r\n    if i==len(l)-1:\r\n        l3.append(i+1)\r\n        l1.append(int(s))\r\n'''print(max(l1),l1,l3)\r\n#,l2[l1.index(max(l1))],l3[l1.index(max(l1))])'''\r\nif l3[1+l1.index(max(l1))]==len(l):\r\n    print(\"{}:{}-{}\".format(max(l1),l3[l1.index(max(l1))],l3[1+l1.index(max(l1))]))\r\nelse:\r\n    print(\"{}:{}-{}\".format(max(l1),l3[l1.index(max(l1))],l3[1+l1.index(max(l1))]-1))", "# cook your dish here\nimport sys\n\ntry:\n    \n    def readstring():\n        return sys.stdin.readline().lstrip().rstrip()\n        \n    count=0\n    ind=\"\"\n    beg=0\n    \n    n=readstring()\n    n+=\"0\"\n    \n    x1=int(n[0])\n    \n    for i in range(1,len(n)):\n    \tif n[i-1]>=n[i]:\n    \t\tif count<x1:\n    \t\t\tcount=x1\n    \t\t\tind=\"{}-{}\".format(beg+1,i)\n    \t\tbeg=i\n    \t\tx1=int(n[i])\n    \telse:\n    \t\tx1+=int(n[i])\n    \n    sys.stdout.write(str(count)+\":\"+str(ind)+\"\\n\")\n    \nexcept:\n    pass", "\n            # cook your dish here\na=input().strip()\nr=[]\nfor i in range(len(a)):\n    s=int(a[i])\n    k=0\n    for j in range(i,len(a)-1):\n        if a[j+1]>a[j]:\n            s=s+int(a[j+1])\n            k+=1\n        else:\n            break\n    r.append([i+1,i+k+1,s]) \nfor i in range(len(r)):\n    for j in range(i+1,len(r)):\n        if r[i][2]>r[j][2]:\n            c=r[j]\n            r[j]=r[i]\n            r[i]=c\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))\n\n            ", "# cook your dish here\na=input().strip()\nr=[]\nfor i in range(len(a)):\n    s=int(a[i])\n    k=0\n    for j in range(i,len(a)-1):\n        if a[j+1]>a[j]:\n            s=s+int(a[j+1])\n            k+=1\n        else:\n            break\n    r.append([i+1,i+k+1,s]) \nfor i in range(len(r)):\n    for j in range(i+1,len(r)):\n        if r[i][2]>r[j][2]:\n            c=r[j]\n            r[j]=r[i]\n            r[i]=c\nprint(\"{}:{}-{}\".format(r[-1][2],r[-1][0],r[-1][1]))"]