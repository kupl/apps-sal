["# cook your dish here\nfor _ in range(int(input(''))):\n    n=int(input(''))\n    x=bin(n)\n    x=len(x)-2\n    if n==(2**(x-1)):\n        print(n)\n    else:\n        print(2**x)", "# cook your dish here\n\nt = int(input())\ndon = 2\nfor i in range(t):\n    x = int(input())\n    n = 1\n    while(pow(2, n)<x):\n        n+=1\n    \n    don = pow(2, n)\n    print(don)\n        \n", "# cook your dish here\nimport math\nread = lambda : list(map(int,input().strip.split()))\nrs =lambda: int(input().strip())\nt = rs()\nans = []\ndef find(x):\n    i = 0\n    x = x-1;\n    while(x):\n        x = x>>1;\n        i += 1;\n    return 1 <<i\n\nfor i in range(t):\n    n = rs()\n    ans.append(find(n))\nprint(\"\\n\".join([str(x) for x in ans]))", "def nextPowerOf2(n): n -= 1;n |= n >> 1;n |= n >> 2;n |= n >> 4;n |= n >> 8;n |= n >> 16;n += 1;return n \nfor _ in range(int(input())): print(nextPowerOf2(int(input())))", "def nextPowerOf2(n,p):\n\tif (n and not(n & (n - 1))): return n\n\twhile (p < n): p <<= 1\n\treturn p\nfor _ in range(int(input())): print(nextPowerOf2(int(input()),1))", "def nextPowerOf2(n,count):\n\tif (n and not(n & (n - 1))): return n \n\twhile( n != 0): n >>= 1;count += 1\n\treturn 1 << count\nfor _ in range(int(input())): print(nextPowerOf2(int(input()),0))", "# cook your dish here\ndef fun(n):\n    b = bin(n-1).replace(\"0b\",\"\")\n    if b.count(\"0\") == 0:\n        return n\n    l = len(b)\n    s = \"1\"*l\n    return (int(s, 2) + 1)\n\nfor i in range(int(input())):\n    n = int(input())\n    print(fun(n))\n", "import math \r\nfrom math import log\r\n\r\n\r\ndef isPowerOfTwo (x):\r\n    return (x and (not(x & (x - 1))) )\r\n\r\nn = int(input())\r\nfor _ in range(n):\r\n    t = int(input())\r\n    x = int(log(t) / log(2)) + 1\r\n    if t==1:\r\n        print(2)\r\n    else:    \r\n        if not isPowerOfTwo(t):\r\n            print(2**x)\r\n        else:\r\n            print(t)\r\n", "# cook your dish here\ntry:\n    x=int(input())\n    for _ in range(x):\n        a=int(input())\n        i=0\n        while 2**i<a:\n            i+=1\n        print(2**i)\nexcept:\n    pass", "import math\nfor _ in range(int(input())) :\n    x = int(input())\n    ans = 2 ** math.ceil(math.log2(x))\n    print(ans)", "# cook your dish here\nT = int(input())\nfor _ in range(T):\n    X = int(input())\n    ans = X.bit_length()\n    if 2**(ans-1)==X:\n        print(2**(ans-1))\n        continue\n    print(2**(ans))", "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    st=bin(n)\n    st=st[2:]\n    # i=st.index(\"1\")\n    x=len(st)\n    # print(2**n)\n    if st.count(\"1\")==1:\n        print(n)\n    else:\n        print(2**x)\n        \n    \n", "# cook your dish here\nimport math\nt = int(input())\nfor i in range(t):\n    x = int(input())\n    n = math.floor(math.log2(x)) + 1\n    if(x == 2**(n-1)):\n        print(x)\n    else:\n        print(2**n)", "T = int(input())\r\nfor i in range(T):\r\n        X = input()\r\n        binary = bin(int(X) - 1)[2:]\r\n        print(2**len(binary))", "t = int(input())\r\nfor _ in range(t):\r\n        x = input()\r\n        binary = bin(int(x) - 1)[2:]\r\n        print(2**len(binary))", "# cook your dish here\nt=int(input())\nc=[]\nfor i in range(t):\n    x=int(input())\n    b=bin(x).replace(\"0b\",\"\")\n    b=str(b)\n    ans=\"1\"\n    ans+=\"0\"*len(b)\n    el=\"1\"\n    el+=\"0\"*(len(b)-1)\n    #print(ans)\n    i=int(ans,2)\n    if(el==b):\n        c.append(x)\n    else:\n       c.append(i)\n       \n    \n    \nfor k in c:\n    print(k)\n    \n\n    \n", "for i in range(int(input())):\r\n\tn = int(input())\r\n\tlens = len(str(bin(n))) - 2\r\n\t# print(lens)\r\n\tif(str(bin(n)).count('1') == 1):\r\n\t\tlens-=1\r\n\tprint(1<<lens)\r\n\t# print()\n", "\r\nimport math\r\n\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n\r\n    r=math.log2(n)\r\n\r\n    if(r!=int(r)):\r\n        r=int(r)\r\n        r=pow(2,r+1)\r\n    else:\r\n        r=int(r)\r\n        r=pow(2,r)\r\n        \r\n    print(r)\r\n", "# cook your dish here\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    x = 1 \n    #print(x<<1)\n    while(x<n): \n        x = x<<1 \n    print(x)", "# cook your dish here\nimport math\ndef exp(x):\n    return x > 0 and (x & (x - 1)) == 0\ndef count(number): \n    return int((math.log(number)//math.log(2)) + 1);\nfor x in range(int(input())):\n    x=int(input())\n    a=exp(x)\n    if a==True:\n        print(x)\n    else:\n        b=count(x)\n        print(2**b)\n", "def is_xor_greater(a, n):\r\n    if a^n > n:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\ndef get_don(n):\r\n    i = 1\r\n    while (True):\r\n        if 2 ** i >= n:\r\n            break\r\n        else:\r\n            i += 1\r\n\r\n\r\n    return 2**i\r\n\r\nfor t in range(int(input())):\r\n    n = int(input().strip())\r\n    print(get_don(n))\r\n\r\n\r\n#for i in range(2, 100):\r\n#    print(\"n:\", i, \"value:\", get_don(i))\r\n\r\n", "def is_xor_greater(a, n):\r\n    if a^n > n:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\ndef get_don(n):\r\n    i = 1\r\n    while (True):\r\n        if 2 ** i >= n:\r\n            break\r\n        else:\r\n            i += 1\r\n\r\n\r\n    return 2**i\r\n\r\nfor t in range(int(input())):\r\n    n = int(input().strip())\r\n    print(get_don(n))\r\n\r\n\r\n#for i in range(2, 100):\r\n#    print(\"n:\", i, \"value:\", get_don(i))\r\n\r\n", "t = int(input())\nfor w in range(0,t):\n    x = int(input())\n    x = x - 1\n    for i in range(1,60):\n        if x<(2**i):\n            print(2**i)\n            break", "pow2 = []\nfor i in range(61):\n    pow2.append(1<<i)\nfor _ in range(int(input())):\n    x = int(input())\n    for i in range(61):\n        if x <= pow2[i]:\n            print(pow2[i])\n            break", "for _ in range(int(input())):\r\n    x = int(input())\r\n\r\n\r\n    n=0\r\n    t=0\r\n    while(n<x):\r\n        n = 2**t\r\n        t+=1\r\n    print(2**(t-1))"]