["class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a = 1\n        e = 1\n        i = 1\n        o = 1\n        u = 1\n        res = 0\n        M = 1e9+7\n\n        for x in range(n-1):\n            a1 = e\n            e1 = (a + i) % M\n            i1 = (a + e + u + o) % M\n            o1 = (i + u) % M\n            u1 = a\n            a = a1\n            e = e1\n            i = i1\n            o = o1\n            u = u1\n        \n        res = int((a+e+i+o+u) % M)\n        return res", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a, e, i, o, u = 1, 1, 1, 1, 1\n        kMod = 1e9+7\n        for k in range(2, n+1):\n            aa = (e + i + u) % kMod\n            ee = (a + i) % kMod\n            ii = (e + o) % kMod\n            oo = i % kMod\n            uu = (i + o) % kMod\n            a = aa\n            e = ee\n            i = ii\n            o = oo\n            u = uu\n        return int((a + e + i + o + u) % kMod)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        last = [1]*5\n        MOD = 1e9+7\n        for i in range(1, n):\n            tempLast = [0]*5\n            tempLast[0] = (last[1]+last[2]+last[4])%MOD\n            tempLast[1] = (last[0]+last[2])%MOD\n            tempLast[2] = (last[1]+last[3])%MOD\n            tempLast[3] = (last[2])%MOD\n            tempLast[4] = (last[3] + last[2])%MOD\n            last = tempLast\n        return int(sum(last)%MOD)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        MOD = 10 ** 9 + 7\n        follows = {'a': 'e', 'e': 'ai', 'i': 'aeou', 'o': 'iu', 'u': 'a'}\n        dp = dict.fromkeys('aeiou', 1)\n        for i in range(n - 1):\n            dp1 = dict.fromkeys('aeiou', 0)\n            for j in 'aeiou':\n                dp1[j] = sum(dp[k] for k in follows[j]) % MOD\n            dp = dp1\n        return sum(dp.values()) % MOD", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = dict.fromkeys(('a', 'e', 'i', 'o', 'u'), 1)\n        for k in range(1, n):\n            dp.update(a=sum(dp[v] for v in ('e', 'i', 'u')),\n                      e=sum(dp[v] for v in ('a', 'i')),\n                      i=sum(dp[v] for v in ('e', 'o')),\n                      o=dp['i'],\n                      u=sum(dp[v] for v in ('i', 'o')))\n        return sum(dp.values()) % (10 ** 9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        MOD = 7 + 1e9\n        @lru_cache(maxsize=None)\n        def helper(step, char):\n            if step == n:\n                return 1\n            \n            result = 0\n            if step == 0:\n                for currChar in vowels:\n                    result = (result + helper(step + 1, currChar)) % MOD\n            else:\n                if char == 'a':\n                    result = (result + helper(step + 1, 'e')) % MOD\n                elif char == 'e':\n                    result = (result + helper(step + 1, 'a')) % MOD\n                    result = (result + helper(step + 1, 'i')) % MOD\n                elif char == 'i':\n                    for currChar in vowels:\n                        if currChar == 'i':\n                            continue\n                        result = (result + helper(step + 1, currChar)) % MOD\n                elif char == 'o':\n                    result = (result + helper(step + 1, 'i')) % MOD\n                    result = (result + helper(step + 1, 'u')) % MOD\n                elif char == 'u':\n                    result = (result + helper(step + 1, 'a')) % MOD\n            return result\n        return int(helper(0, ''))", "def solve(n, c, mem):\n    if (n, c) in mem:\n        return mem[(n, c)]\n    if n == 0:\n        res = 1\n    elif c == 'a':\n        res = solve(n-1, 'e', mem) % (10**9 + 7)\n    elif c == 'e':\n        res = (solve(n-1, 'a', mem)+solve(n-1, 'i', mem)) % (10**9 + 7)\n    elif c == 'i':\n        a = solve(n-1, 'a', mem)\n        e = solve(n-1, 'e', mem)\n        o = solve(n-1, 'o', mem)\n        u = solve(n-1, 'u', mem)\n        res = (a+e+o+u) % (10**9 + 7)\n    elif c == 'o':\n        res = (solve(n-1, 'i', mem) + solve(n-1, 'u', mem))% (10**9 + 7)\n    else:\n        res = solve(n-1, 'a', mem) % (10**9 + 7)\n    \n    mem[(n, c)] = res\n    return res\n\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        mem = {}\n        return sum(solve(n-1, c, mem) for c in {'a', 'e', 'i', 'o', 'u'}) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[0]*5 for i in range(n)]\n        for i in range(len(dp[0])):\n            dp[0][i] = 1 \n        dic = {'a':'e','e':'ai','i':'aeou','o':'iu','u':'a'}\n        mapping = {'a':0,'e':1,'i':2,'o':3,'u':4}\n        for i in range(1,n):\n            for char in 'aeiou':\n                inda = mapping[char]\n                for val in dic[char]:\n                    indb = mapping[val]\n                    dp[i][indb] += dp[i-1][inda]\n        return sum(dp[-1])%(10**9 + 7)\n        \n        \n        \n        \n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[0]*5 for _ in range(n)]\n        for i in range(5):\n            dp[0][i] = 1\n        vowels = ['a','e','i','o','u']\n        for i in range(1,n):\n            for idx,vowel in enumerate(vowels):\n                if vowel == 'a':\n                    dp[i][idx] += dp[i-1][1] + dp[i-1][2] + dp[i-1][4]\n                if vowel == 'e':\n                    dp[i][idx] += dp[i-1][0] + dp[i-1][2]\n                if vowel == 'i':\n                    dp[i][idx] += dp[i-1][1] + dp[i-1][3]\n                if vowel == 'o':\n                    dp[i][idx] += dp[i-1][2]\n                if vowel == 'u':\n                    dp[i][idx] += dp[i-1][2] + dp[i-1][3]\n                    \n        return sum(dp[n-1]) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        mod = 10**9 + 7\n        \n        @lru_cache(None)\n        def go(ch, n):\n            if n == 0:\n                return 1            \n            if (ch =='a'):\n                return go('e', n - 1)\n            elif (ch == 'e'):\n                return go('a', n - 1) + go('i', n - 1)\n            elif (ch == 'i'):\n                return go('a', n - 1) + go('e', n - 1) + go('o', n - 1) + go('u', n - 1)\n            elif (ch == 'o'):\n                return go('i', n - 1) + go('u', n - 1)\n            else:\n                return go('a', n - 1)\n            \n        res1 = go('a', n - 1) % mod\n        res2 = go('e', n - 1) % mod \n        res3 = go('i', n - 1) % mod\n        res4 = go('o', n - 1) % mod\n        res5 = go('u', n - 1) % mod\n        \n        return (res1 + res2 + res3 + res4 + res5) % mod\n            \n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a, e, i, o, u = 1,1,1,1,1\n        p = 10**9+7\n        def next(a, e, i, o, u):\n           # a, e, i, o, u = row\n            e, a, i, o, u = (a+i) % p, (e+i+u)%p, (e+o) % p, i % p, (i+o) % p\n           # row = [a, e, i, o, u]\n            return a, e, i, o, u\n        l = 1\n        while l < n:\n            a, e, i, o, u = next(a, e, i, o, u)\n            l+=1\n        return (a+e+i+o+u) % p\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dic = {}\n        dic['a'] = ['e']\n        dic['e'] = ['a','i']\n        dic['i'] = ['a','e','o','u']\n        dic['o'] = ['i','u']\n        dic['u'] = ['a']\n        vowels = ['a','e','i','o','u']\n        dp = {}\n        for v in vowels:\n            dp[(v,1)] = 1\n        \n        for i in range(2,n+1):\n            for v in vowels:\n                for followed in dic[v]:\n                    dp[(v,i)] = (dp.get((v,i),0) + dp[(followed,i-1)]) % (10**9 + 7)\n        res = 0\n        for v in vowels:\n            res += dp[(v,n)]\n        return res % (10**9 + 7)\n            \n            \n        \n#         def helper(vowel,depth):\n#             if depth == 0:\n#                 return 1\n#             res = 0\n#             for v in dic[vowel]:\n#                 res += helper(v, depth-1)\n#             return res\n#         res = 0\n#         for v in ['a']\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        memo = {}\n        def f(i, prev_vowel):\n            if i == n:\n                return 1\n            \n            if (i, prev_vowel) in memo:\n                return memo[(i, prev_vowel)]\n            \n            cnt = 0\n            if prev_vowel == 'a':\n                cnt += f(i + 1, 'e')\n            elif prev_vowel == 'e':\n                cnt += f(i + 1, 'a') + f(i + 1, 'i')\n            elif prev_vowel == 'i':\n                cnt += f(i + 1, 'a') + f(i + 1, 'e') + f(i + 1, 'o') + f(i + 1, 'u')\n            elif prev_vowel == 'o':\n                cnt += f(i + 1, 'i') + f(i + 1, 'u')\n            else:\n                cnt += f(i + 1, 'a')\n                \n            memo[(i, prev_vowel)] = cnt % (10**9 + 7)\n            return cnt\n        \n        cnt = 0\n        for vowel in ['a', 'e', 'i', 'o', 'u']:\n            cnt += f(1, vowel)\n        \n        return cnt % (10**9 + 7)\n\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = {}\n        for v in ('a', 'e', 'i', 'o', 'u'):\n            dp[v] = [1] + [0] * (n - 1)\n        for i in range(1, n):\n            dp['a'][i] = sum(dp[v][i-1] for v in ('e', 'i', 'u'))\n            dp['e'][i] = sum(dp[v][i-1] for v in ('a', 'i'))\n            dp['i'][i] = sum(dp[v][i-1] for v in ('e', 'o'))\n            dp['o'][i] = dp['i'][i-1]\n            dp['u'][i] = sum(dp[v][i-1] for v in ('i', 'o'))\n        return sum(row[-1] for row in dp.values()) % (10 ** 9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        f = [[0 for _ in range(5)] for _ in range(n + 1)]\n        for i in range(5):\n            f[1][i] = 1\n        index = {'a':0,'e':1,'i':2,'o':3,'u':4}\n        letter = ['a','e','i','o','u']\n        pre = {'a':['e','i','u'],\n                  'e':['a','i'],\n                  'i':['e','o'],\n                  'o':['i'],\n                  'u':['i','o']}\n        for i in range(2, n + 1):\n            for j in range(5):\n                tmp = 0\n                for k in pre[letter[j]]:\n                    tmp += f[i - 1][index[k]]\n                f[i][j] = tmp\n        return sum(f[n]) % (10**9 + 7)\n            \n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        @lru_cache(None)\n        def dfs(i, j):\n            if i == 1:\n                return 1\n            if j == 'a':\n                return dfs(i - 1, 'e') + dfs(i - 1, 'i') + dfs(i - 1, 'u')\n            elif j == 'e':\n                return dfs(i - 1, 'a') + dfs(i - 1, 'i')\n            elif j == 'i':\n                return dfs(i - 1, 'e') + dfs(i - 1, 'o')\n            elif j == 'o':\n                return dfs(i - 1, 'i')\n            \n            return dfs(i - 1, 'i') + dfs(i - 1, 'o')\n        \n        return sum(dfs(n, i) for i in ('a', 'e', 'i', 'o', 'u')) % (10 ** 9 + 7)", "from collections import defaultdict\n\n\nclass Solution:\n\n    MOD = 10**9 + 7\n\n    def __init__(self):\n        self.cache = defaultdict(dict)\n\n    def countVowelPermutation(self, n: int) -> int:\n        return self.count(n)\n\n    def count(self, n: int, vowel: str = None) -> int:\n        if n == 0:\n            return 1\n\n        if vowel in self.cache[n]:\n            return self.cache[n][vowel]\n\n        count = 0\n        if vowel == 'a':\n            count = self.count(n - 1, 'e')\n        elif vowel == 'e':\n            count = self.count(n - 1, 'a')\n            count += self.count(n - 1, 'i')\n        elif vowel == 'i':\n            count = self.count(n - 1, 'a')\n            count += self.count(n - 1, 'e')\n            count += self.count(n - 1, 'o')\n            count += self.count(n - 1, 'u')\n        elif vowel == 'o':\n            count = self.count(n - 1, 'i')\n            count += self.count(n - 1, 'u')\n        elif vowel == 'u':\n            count = self.count(n - 1, 'a')\n        elif vowel is None:\n            count = self.count(n - 1, 'a')\n            count += self.count(n - 1, 'e')\n            count += self.count(n - 1, 'i')\n            count += self.count(n - 1, 'o')\n            count += self.count(n - 1, 'u')\n        count %= self.MOD\n        self.cache[n][vowel] = count\n        return count\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        def count(i, v, mem):\n            key = (i, v)\n            if key in mem: return mem[key]\n\n            if i == n-1:\n                mem[key] = 1\n                return mem[key]\n\n            ans = 0\n            if v == 'a':\n                ans += count(i+1, 'e', mem)\n            elif v == 'e':\n                ans += count(i+1, 'a', mem)\n                ans += count(i+1, 'i', mem)\n            elif v == 'i':\n                ans += count(i+1, 'a', mem)\n                ans += count(i+1, 'e', mem)\n                ans += count(i+1, 'o', mem)\n                ans += count(i+1, 'u', mem)\n            elif v == 'o':\n                ans += count(i+1, 'i', mem)\n                ans += count(i+1, 'u', mem)\n            elif v == 'u':\n                ans += count(i+1, 'a', mem)\n            mem[key] = ans % (10 ** 9 + 7)\n            return mem[key]\n        \n        mem = {}\n        ans = count(0, 'a', mem) + count(0, 'e', mem) + count(0,'i', mem) + count(0,'o', mem) + count(0,'u', mem)\n        return ans % (10 ** 9 + 7)", "class Solution:\n    dp = [dict.fromkeys('aeiou', 1)]\n    def countVowelPermutation(self, n: int) -> int:\n        MOD = 10 ** 9 + 7\n        follows = {'a': 'e', 'e': 'ai', 'i': 'aeou', 'o': 'iu', 'u': 'a'}\n        for i in range(len(self.dp), n):\n            dp1 = dict.fromkeys('aeiou', 0)\n            for j in 'aeiou':\n                dp1[j] = sum(self.dp[-1][k] for k in follows[j]) % MOD\n            self.dp.append(dp1)\n        return sum(self.dp[n - 1].values()) % MOD", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        MOD = (10**9 + 7)\n        mapping = [\n            [1,2,4], [0, 2], [1, 3], [2], [2, 3]\n        ]\n        dp = [[0 for _ in range(5)] for _ in range(n)]\n        for i in range(len(dp)):\n            for j in range(len(dp[0])):\n                if i == 0:\n                    dp[i][j] = 1\n                    continue\n                for prev in mapping[j]:\n                    dp[i][j] += dp[i - 1][prev]\n        return sum(dp[n - 1]) % MOD", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        d = {'a':1,'e':2,'i':3,'o':4,'u':5}\n        \n        @lru_cache(maxsize=None)\n        def f(n, i):\n            if n == 0:\n                return 1\n            if i == d['a']:\n                return f(n-1, d['e'])\n            if i == d['e']:\n                return f(n-1, d['a']) + f(n-1, d['i'])\n            if i == d['i']:\n                return f(n-1, d['a']) + f(n-1, d['e']) + f(n-1, d['o']) + f(n-1, d['u'])\n            if i == d['o']:\n                return f(n-1, d['i']) + f(n-1, d['u'])\n            if i == d['u']:\n                return f(n-1, d['a'])\n            \n        if n == 0: return 0\n        ans = 0\n        for k, v in d.items():\n            ans += f(n-1, v)\n        return ans % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        graph={'a':['e'],'e':['a','i'],'i':['a','e','o','u'],'o':['i','u'],'u':['a']}\n        dp=[[None for j in range(5)] for i in range(n+1)]\n        get={'a':0,'e':1,'i':2,'o':3,'u':4}\n        mod=int(10**9)+7\n        \n        def dfs(n,node):\n            if n==1:\n                return 1\n            elif dp[n][get[node]]:\n                return dp[n][get[node]]\n            else:\n                ans=0\n                for w in graph[node]:\n                    ans+=dfs(n-1,w)%mod\n                dp[n][get[node]]=ans\n                return ans\n                    \n        x=0\n        for b in 'aeiou':\n            x+=dfs(n,b)%mod\n        return x%mod\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[0 for i in range(5)] for j in range(n)]\n        for i in range(5):\n            dp[-1][i] = 1\n        \n        d = {\n            0: [1],\n            1: [0, 2],\n            2: [0, 1, 3, 4],\n            3: [2, 4],\n            4: [0]\n        }\n        # print(dp)\n        for i in range(n-2, -1, -1):\n            for j in range(5):\n                c = 0\n                for e in d[j]:\n                    c += dp[i+1][e]\n                dp[i][j] = c\n        # print(dp)\n        return (dp[0][0] + dp[0][1] + dp[0][2] + dp[0][3] + dp[0][4])%(1000000007)\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        vtoi = {'a':0, 'e':1, 'i':2, 'o':3, 'u':4}\n        itov = {0:'a', 1:'e', 2:'i', 3:'o', 4:'u'}\n        \n        prev = {'a': ['e', 'i', 'u'],\n                'e': ['a', 'i'],\n                'i': ['e', 'o'],\n                'o': ['i'],\n                'u': ['i', 'o']}\n        dp = [[0 for _ in range(5)] for _ in range(n+1)]\n        \n        for j in range(5):\n            dp[1][j] = 1\n        \n        for i in range(2, n+1):\n            for j in range(5):\n                for p in prev[itov[j]]:\n                    dp[i][j] += dp[i-1][vtoi[p]]\n    \n        return sum(dp[-1]) % (10**9+7)\n                \n                \n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = {}\n        dp[1] = {}\n        for c in ['a', 'e', 'i', 'o', 'u']:\n            dp[1][c] = 1\n        sources = {}\n        sources['a'] = ['e','i','u']\n        sources['e'] = ['a', 'i']\n        sources['i'] = ['e', 'o']\n        sources['o'] = ['i']\n        sources['u'] = ['i', 'o']\n        for i in range(2, n+1):\n            dp[i] = {}\n            for c in ['a', 'e', 'i', 'o', 'u']:\n                dp[i][c] = sum(\n                    dp[i-1][s] for s in sources[c]\n                )\n        return sum(dp[n][c] for c in dp[n])  % 1000000007\n", "class Solution:\n    mod=(10)**9+7\n    relation=[[1,2,4],[0,2],[1,3],[2],[2,3]]\n    def dfs(self,n,v):\n        memo=self.memo\n        if n==1:\n            return 1\n        if memo[n][v]!=-1:\n            return memo[n][v]\n        memo[n][v]=0\n        ans=0\n        for i in self.relation[v]:\n            ans=(ans+self.dfs(n-1,i))%self.mod\n        memo[n][v]=ans\n        return ans\n        \n            \n    def countVowelPermutation(self, n: int) -> int:\n        self.memo=[[-1 for _ in range(5)] for _ in range(n+1)]\n        res=0\n        for i in range(5):\n            res=(res+self.dfs(n,i))%self.mod\n        return res            \n         \n        \n        \n        \n        \n        \n", "class Solution:\n    dp = [[1] * 5]\n    def countVowelPermutation(self, n: int) -> int:\n        MOD = 10 ** 9 + 7\n        follows = {0: [1], 1: [0, 2], 2: [0, 1, 3, 4], 3: [2, 4], 4: [0]}\n        for i in range(len(self.dp), n):\n            dp1 = [0] * 5\n            for j in range(5):\n                dp1[j] = sum(self.dp[-1][k] for k in follows[j]) % MOD\n            self.dp.append(dp1)\n        return sum(self.dp[n - 1]) % MOD", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        MOD = (10 ** 9 + 7)\n        vows = 'aeiou'\n        mapping = {\n            0: [1], # a\n            1: [0 ,2], # e\n            2: [0, 1, 3, 4], # i\n            3: [2, 4], # o\n            4: [0] # u\n        }\n        dp = [[0 for _ in range(len(vows))] for _ in range(n)]\n        dp[0] = [1] * len(vows)\n        for i in range(1, len(dp)):\n            for j in range(len(dp[0])):\n                for next_ch in mapping[j]:\n                    dp[i][j] += dp[i - 1][next_ch]\n        return sum(dp[-1]) % MOD\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:    \n        mod = (10**9+7)\n        \n        \n        @lru_cache\n        def dfs(p, n):\n            if n == 0:\n                return 1\n            \n            if p == 'a':\n                return dfs('e', n-1)\n            if p == 'e':\n                return sum([dfs(c, n-1) for c in ['a', 'i']])        \n            if p == 'i':\n                return sum([dfs(c, n-1) for c in ['a', 'e', 'o', 'u']])   \n            elif p == 'o':\n                return sum([dfs(c, n-1) for c in ['i', 'u']])\n            else: # u\n                return dfs('a', n-1)\n        \n        return sum([dfs(c, n-1) for c in ['a', 'e', 'i', 'o', 'u']]) % mod", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dic = {}\n        dic['a'] = ['e']\n        dic['e'] = ['a','i']\n        dic['i'] = ['a','e','o','u']\n        dic['o'] = ['i','u']\n        dic['u'] = ['a']\n        vowels = ['a','e','i','o','u']\n        dp = {}\n        for v in vowels:\n            dp[(v,1)] = 1\n        \n        for i in range(2,n+1):\n            for v in vowels:\n                for followed in dic[v]:\n                    dp[(v,i)] = dp.get((v,i),0) + dp[(followed,i-1)]\n        res = 0\n        for v in vowels:\n            res += dp[(v,n)]\n        return res % (10**9 + 7)\n            \n            \n        \n#         def helper(vowel,depth):\n#             if depth == 0:\n#                 return 1\n#             res = 0\n#             for v in dic[vowel]:\n#                 res += helper(v, depth-1)\n#             return res\n#         res = 0\n#         for v in ['a']\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        if n <= 1:\n            return n * 5\n        start_table = {0: [1], 1: [0, 2], 2: [0, 1, 3, 4], 3: [2, 4], 4: [0]}\n        dp = [[0] * 5 for i in range(n + 1)]\n        for i in range(5):\n            dp[1][i] = 1\n        for i in range(2, n+1):\n            for j in range(5):\n                after = start_table[j]\n                dp[i][j] = sum(dp[i-1][v] for v in after)\n        return sum(dp[-1]) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:    \n        mod = (10**9+7)\n        mem = {}\n        \n        \n        def dfs(p, n):\n            if (p, n) in mem:\n                return mem[(p,n)]\n            if n == 0:\n                return 1\n            \n            res = 0\n            if p == 'a':\n                res = dfs('e', n-1)\n            elif p == 'e':\n                res = sum([dfs(c, n-1) for c in ['a', 'i']])        \n            elif p == 'i':\n                res = sum([dfs(c, n-1) for c in ['a', 'e', 'o', 'u']])   \n            elif p == 'o':\n                res = sum([dfs(c, n-1) for c in ['i', 'u']])\n            else: # u\n                res = dfs('a', n-1)\n            \n            mem[(p,n)] = res%mod\n            return res%mod\n        \n        return sum([dfs(c, n-1) for c in ['a', 'e', 'i', 'o', 'u']]) % mod", "MOD = int(1e9 + 7)\n\nclass Solution:\n    def get(self, n, l):\n        if n == 1:\n            return 1\n        \n        try:\n            return self.cache[(n, l)]\n        except KeyError:\n            ret = 0\n            for next_l in self.next_letters[l]:\n                ret += self.get(n - 1, next_l)\n                ret %= MOD\n                \n            self.cache[(n, l)] = ret\n            return ret\n        \n    def countVowelPermutation(self, n: int) -> int:\n        self.next_letters = [\n            [1],\n            [0, 2],\n            [0, 1, 3, 4],\n            [2, 4],\n            [0],\n        ]\n        self.cache = {}\n        \n        for nn in range(2, n + 1):\n            for l in range(5):\n                self.get(nn, l)\n        \n        ret = 0\n        for l in range(5):\n            ret += self.get(n, l)\n            ret %= MOD\n        return ret\n        \n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a,e,i,o,u = [1], [1], [1], [1], [1]\n        mod = 10**9 + 7\n        if n == 0: return 0 \n        for top, countDown in enumerate (range (n, 1, -1)):\n            a.append (e [top] % mod)\n            e.append ((a [top] + i [top]) % mod)\n            i.append ((a [top] + e [top] + o [top] + u [top]) % mod)\n            o.append ((i [top] + u [top]) % mod)\n            u.append (a [top] % mod)\n        \n        return (a [-1] + e [-1] + i [-1] + o [-1] + u [-1]) % mod", "def countVowels(x, n, memo):\n    convert = {'a':0, 'e':1, 'i':2, 'o':3, 'u':4}\n    x_val = convert[x]\n    if n == 1:\n        return 1\n    if memo[x_val][n] != -1:\n        return memo[x_val][n]\n    if x == 'a':\n        memo[x_val][n] = countVowels('e', n-1, memo)\n        return memo[x_val][n]\n    elif x == 'u':\n        memo[x_val][n] = countVowels('a', n-1, memo)\n        return memo[x_val][n]\n    elif x == 'e':\n        memo[x_val][n] = (countVowels('a', n-1, memo)+countVowels('i', n-1, memo))\n        return memo[x_val][n]\n    elif x == 'o':\n        memo[x_val][n] = (countVowels('i', n-1, memo)+countVowels('u', n-1, memo))\n        return memo[x_val][n]\n    elif x == 'i':\n        memo[x_val][n] = (countVowels('a', n-1, memo)+countVowels('e', n-1, memo)+countVowels('o', n-1, memo)+countVowels('u', n-1, memo))\n        return memo[x_val][n]\n\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        if n == 1:\n            return 5\n        else:\n            memo = [[-1 for j in range(n+1)] for i in range(5)]\n            res = countVowels('a', n, memo) + countVowels('e', n, memo) + countVowels('i', n, memo) + countVowels('o', n, memo) + countVowels('u', n, memo)\n            return res%1000000007", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        if n <= 1:\n            return n * 5\n        # table = {'a': ['e'], 'e': ['a', 'i'], 'i': ['a', 'e', 'o', 'u'], 'o': ['i', 'u'], 'u': ['a']}\n        # idx_table = ['a', 'e', 'i', 'o', 'u']\n        end_table = {0: [1, 2, 4], 1: [0, 2], 2: [1, 3], 3: [2], 4: [2, 3]}\n        dp = [[0] * 5 for i in range(n+1)]\n        for i in range(5):\n            dp[1][i] = 1\n        for i in range(2, n+1):\n            for j in range(5):\n                before = end_table[j]\n                dp[i][j] = sum(dp[i-1][v] for v in before)\n        return sum(dp[-1]) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        memo = dict()\n    \n        def helper(char: str, x: int):\n            if (char, x) in memo:\n                return memo[char, x]\n            \n            if x == 1:\n                memo[char, x] = 1\n                return memo[char, x]\n            \n            if char == 'a':\n                memo[char, x] = helper('e', x-1)\n            elif char == 'e':\n                memo[char, x] = helper('a', x-1) + helper('i', x-1)\n            elif char == 'i':\n                memo[char, x] = sum(helper(c, x-1) for c in 'aeou')\n            elif char == 'o':\n                memo[char, x] = helper('i', x-1) + helper('u', x-1)\n            elif char == 'u':\n                memo[char, x] = helper('a', x-1)\n            \n            return memo[char, x]\n        \n        total = sum(helper(c, n) for c in 'aeiou')\n        \n        return total % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        graph = {'a': ['e'], 'e': ['a', 'i'], 'i': ['a', 'e', 'o', 'u'], 'o':['i', 'u'], 'u':['a']}\n        d1={'a':1, 'e':1, 'i':1,'o':1,'u':1}\n        \n        for i in range(1,n):\n            d2={}\n            for v, f in d1.items():\n                for nxt in graph[v]: \n                    d2[nxt] = d2.get(nxt, 0) + f\n            d1 = d2\n        return sum(d1.values()) % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        dp = {}\n        MOD = 10**9 + 7\n        \n        def helper(pre, n0):\n            \n            if (pre, n0) in dp:\n                return dp[(pre, n0)]\n            \n            if n0 == 0:\n                return 1\n            \n            if pre == 'a':\n                subAns = helper('e', n0-1)\n            elif pre == 'e':\n                subAns = helper('a', n0-1) + helper('i', n0-1)\n            elif pre == 'i':\n                subAns = helper('a', n0-1) +helper('e', n0-1) + helper('o', n0-1) + helper('u', n0-1)\n            elif pre == 'o':\n                subAns = helper('i', n0-1) + helper('u', n0-1)\n            else:\n                subAns = helper('a', n0-1)\n                \n            dp[(pre, n0)] = subAns%MOD\n            \n            return subAns\n        \n        return (helper('a', n-1) +helper('e', n-1) + helper('i', n-1) + helper('o', n-1) + helper('u', n-1))%MOD", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a,e,i,o,u = 1,1,1,1,1\n        for k in range(1, n):\n            a,e,i,o,u = i+e+u, a+i, e+o, i, i+o\n        return (a+e+i+o+u) % (10**9 + 7)\n\n\n        \n        \n        #***** BRute Force *****#\n#         dic = {\n#             'e' : {'a','i'},\n#             'a' : {'i', 'e', 'u'},\n#             'i' : {'e', 'o'},\n#             'o' : {'i'},\n#             'u' : {'i','o'},\n#         }\n        \n#         def bfs(q, dic, ans):\n#             while(q):\n#                 vov, dist = q.popleft()\n#                 #print(vov, dist)\n#                 if(dist == n):\n#                     ans = ans + 1\n#                 if(dist > n):\n#                     break\n#                 for ch in dic[vov]:\n#                     #print(ch,dist+1, \\\"*\\\")\n#                     q.append((ch,dist+1))\n#                     #visited.add(ch)\n#             return ans \n            \n        \n        \n#         result = 0\n#         for k in ['a', 'e', 'i', 'o', 'u']:\n#             q = deque()\n#             q.append((k, 1))\n#             # visited = set()\n#             # visited.add(k)\n#             ans = bfs(q, dic, 0)\n#             result = result + ans\n            \n#         return result\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        res=0\n        dp={}\n        def rec(l,curr):\n            nonlocal dp,res\n            if dp.get((l,curr),-1)!=-1:\n                res+=dp[l,curr]\n                return dp[l,curr]\n            if l==0:\n                res+=1\n                return 1\n            if curr=='a':\n                m=rec(l-1,'e')\n            elif curr=='e':\n                m=rec(l-1,'a')+rec(l-1,'i')\n            elif curr=='i':\n                m=rec(l-1,'a')+rec(l-1,'e')+rec(l-1,'o')+rec(l-1,'u')\n            elif curr=='o':\n                m=rec(l-1,'u')+rec(l-1,'i')\n            else:\n                m=rec(l-1,'a')\n            dp[l,curr]=m\n            return dp[l,curr]\n        for i in ['a','e','i','o','u']:\n            rec(n-1,i)\n        return res%1000000007", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a, e, i, o, u = 1, 1, 1, 1, 1\n        for _ in range(n-1):\n             a, e, i, o, u = e + i + u, a + i, e + o, i, i + o\n        \n        return (a + e + i + o + u) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a = e = i = o = u = 1\n        for p in range(n-1):\n            a, e, i, o , u = e + i + u, a + i, e + o, i, i + o\n        return (a+e+i+o+u) % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        if not n :\n            return 0\n        a = e = i = o = u = 1\n        for _ in range(n - 1):\n            a, e, i, o, u = e, a + i, a + e + o + u, i + u, a\n        return (a + e + i + o + u) % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a, e, i, o, u = 1, 1, 1, 1, 1\n        \n        for _ in range(n - 1):\n            a,e,i,o,u = e + i + u, a + i, e + o, i, i + o\n        return (a + e + i + o + u) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a,e,i,o,u = 1,1,1,1,1\n        #store the number of each vowels\n        for _ in range(1,n):\n            a,e,i,o,u = e+i+u,a+i,e+o,i,i+o\n        return (a+e+i+o+u)% 1000000007\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a, e, i, o, u = 1, 1, 1, 1, 1\n        for _ in range(n - 1):\n            a, e, i, o, u = e + i + u, a + i, e + o, i, i + o\n        return (a + e + i + o + u) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a,e,i,o,u = 1,1,1,1,1\n        for _ in range(n-1):\n            a,e,i,o,u = e, a+i, a+e+o+u, i+u, a\n        return(a+e+i+o+u)%(10**9+7)", "class Solution:\n        \n    def countVowelPermutation(self, n: int) -> int:\n        \n        mod = 10**9 + 7\n        nstrs = [1] * 5\n        \n        while n > 1:\n            (a, e, i, o, u) = nstrs\n            nstrs[0] = e\n            nstrs[1] = a + i  \n            nstrs[2] = a + e + o + u  \n            nstrs[3] = i + u\n            nstrs[4] = a \n            \n            n -= 1\n        \n        return sum(nstrs) % mod", "class Solution:\n    \n    \n    def countVowelPermutation(self, n: int) -> int:\n        \n        d = {}\n        d['a'] = 1\n        d['e'] = 1\n        d['i'] = 1\n        d['o'] = 1\n        d['u'] = 1\n        \n        for i in range(1,n):\n            dx = {}\n            dx['a'] = (d['e'] + d['i'] + d['u']) % (10**9+7)\n            dx['e'] = (d['a'] + d['i']) % (10**9+7)\n            dx['i'] = (d['e'] + d['o']) % (10**9+7)\n            dx['o'] = (d['i']) % (10**9+7)\n            dx['u'] = (d['i'] + d['o']) % (10**9+7)\n            d = dx\n        \n        r = 0\n        for c in d.keys():\n            r += (d[c] % (10**9+7))\n            \n        return r % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dic = {}\n        dic['a'] = 1\n        dic['e'] = 1\n        dic['i'] = 1\n        dic['o'] = 1\n        dic['u'] = 1\n                        \n        for j in range(n-1):\n            \n            counta = dic['e']\n            counte = dic['a'] + dic['i']\n            counti = dic['e'] + dic['o'] + dic['a'] + dic['u']\n            counto = dic['i'] + dic['u']\n            countu = dic['a']\n\n            dic['a'] = counta\n            dic['e'] = counte\n            dic['i'] = counti\n            dic['o'] = counto\n            dic['u'] = countu\n                        \n        count = sum([v for k, v in dic.items()])\n        \n        return count % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        # from collections import defaultdict\n        \n        end = dict()\n        end['a'] = 1\n        end['e'] = 1\n        end['i'] = 1\n        end['o'] = 1\n        end['u'] = 1\n                        \n        for j in range(n-1):\n            \n            for_a = end['e'] + end['i'] + end['u']\n            for_e = end['a'] + end['i']\n            for_i = end['e'] + end['o']\n            for_o = end['i']\n            for_u = end['o'] + end['i']\n\n            end['a'] = for_a\n            end['e'] = for_e\n            end['i'] = for_i\n            end['o'] = for_o\n            end['u'] = for_u\n                        \n        count = sum([v for k, v in end.items()])\n        \n        return count % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a = [1] * 5\n        b = [1] * 5\n        for i in range(1, n):\n            b[0] = a[1]\n            b[1] = a[0] + a[2]\n            b[2] = a[0] + a[1] + a[3] + a[4]\n            b[3] = a[2] + a[4]\n            b[4] = a[0]\n            a = b.copy()\n        \n        return sum(b) % (10**9 + 7)", "'''\nDynamic programing with recursion?\n\nBase case is five. \n\n[1,1,1,1,1]\n\na =1 e=2 i=4 o=2 u=1\n\na,e\ne,a | e,i\ni,a | i,e | i,u, |i,o\no,i | o,u\nu,a\n\na = 2, e = 5, i = 10 ,o = 5, u =1\n\n\n\nEach round, you are calculating the number of permutations a letter has if you were to stick it in front.\n\nfor instance: i\n\n\nfor 3 letters:\ni: used the previous \na,e\ne,a | e,i\no,i | o,u\nu,a\n\nfor a total of 6 additional permutations. \n\n\n\n'''\n\n\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        #starting count at 2\n        prev_count = [1,2,4,2,1]\n\n        \n        if n == 1:\n            return 5\n        \n        if n == 2:\n            return sum(prev_count)\n        \n        for i in range(3,n+1):\n            #print(prev_count)\n            current_count = [0] * 5\n            #a\n            current_count[0] = prev_count[1]\n            #e\n            current_count[1] = prev_count[0] + prev_count[2]\n            #i\n            current_count[2] = prev_count[0] + prev_count[1] + prev_count[3] + prev_count[4] \n            #o\n            current_count[3] = prev_count[2] + prev_count[4]\n            #u\n            current_count[4] = prev_count[0]\n            \n            #print(current_count)\n            prev_count = current_count\n        #print(prev_count)\n        return sum(current_count) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        from collections import defaultdict\n        \n        end = dict()\n        end['a'] = 1\n        end['e'] = 1\n        end['i'] = 1\n        end['o'] = 1\n        end['u'] = 1\n                        \n        for j in range(n-1):\n            \n            for_a = end['e'] + end['i'] + end['u']\n            for_e = end['a'] + end['i']\n            for_i = end['e'] + end['o']\n            for_o = end['i']\n            for_u = end['o'] + end['i']\n\n            end['a'] = for_a\n            end['e'] = for_e\n            end['i'] = for_i\n            end['o'] = for_o\n            end['u'] = for_u\n                        \n        count = sum([v for k, v in end.items()])\n        \n        return count % (10**9 + 7)   ", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dic = {'a':1,'e':1,'i':1,'o':1,'u':1}\n        \n        for _ in range(n-1):\n            a = dic['e']+dic['i']+dic['u']\n            e = dic['a']+dic['i']\n            i = dic['e']+dic['o']\n            o = dic['i']\n            u = dic['o']+dic['i']\n            \n            dic['a'] = a\n            dic['e'] = e\n            dic['i'] = i\n            dic['o'] = o\n            dic['u'] = u\n        count = 0   \n        for value in (list(dic.values())):\n            count+=value\n        return count % (10**9 + 7)\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        pos=[1,1,1,1,1]\n        newpos=[1,1,1,1,1]\n        for i in range(1,n):\n            newpos[0]=pos[1]+pos[2]+pos[4]\n            newpos[1]=pos[0]+pos[2]\n            newpos[2]=pos[1]+pos[3]\n            newpos[3]=pos[2]\n            newpos[4]=pos[2]+pos[3]\n\n            pos[0]=newpos[0]\n            pos[1]=newpos[1]\n            pos[2]=newpos[2]\n            pos[3]=newpos[3]\n            pos[4]=newpos[4]\n        return ((newpos[0]+newpos[1]+newpos[2]+newpos[3]+newpos[4])% (10**9 + 7))", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        from collections import defaultdict\n        \n        end = dict()\n        end['a'] = 1\n        end['e'] = 1\n        end['i'] = 1\n        end['o'] = 1\n        end['u'] = 1\n                        \n        for j in range(n-1):\n            \n            for_a = end['e'] + end['i'] + end['u']\n            for_e = end['a'] + end['i']\n            for_i = end['e'] + end['o']\n            for_o = end['i']\n            for_u = end['o'] + end['i']\n\n            end['a'] = for_a\n            end['e'] = for_e\n            end['i'] = for_i\n            end['o'] = for_o\n            end['u'] = for_u\n                        \n        count = sum([v for k, v in end.items()])\n        \n        return count % (10**9 + 7)      ", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        '''       \n        # TLE top-down\n        graph = {'a': ['e'], 'e':['a', 'i'],\\\\\n                'i': ['a','e','o','u'], 'o': ['i', 'u'],\\\\\n                'u': ['a']}\n        mod = 10**9+7\n        @functools.lru_cache(None)\n        def dp(c, i):\n            if i == 1:\n                return 1\n            return sum(dp(key, i-1) for key in graph[c])%mod\n        return sum(dp(key, n) for key in graph)%mod\n        '''\n        a, e, i, o, u = 1, 1, 1, 1, 1\n        for _ in range(1, n):\n            a, e, i, o, u = e + i + u, a + i, e + o, i, i + o\n        return (a + e + i + o + u) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [1] * 5\n        mod = 1000000007\n        for i in range(n - 1):\n            next = [0] * 5\n            \n            next[1] += dp[0]\n\n            next[0] += dp[1]\n            next[2] += dp[1]\n\n            next[0] += dp[2]\n            next[1] += dp[2]\n            next[3] += dp[2]\n            next[4] += dp[2]\n\n            next[2] += dp[3]\n            next[4] += dp[3]\n\n            next[0] += dp[4]\n\n            for j in range(5):\n                next[j] = next[j] % mod\n            dp = next\n        return sum(dp) % mod", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        if n < 1: return 0\n        f = [[0]*5, [0]*5]\n        f[1&1] = [1]*5\n        vowel = 'aeoui'\n        \n        for i in range(2,n+1):\n            f[i&1][0] = (f[(i-1)&1][3] + f[(i-1)&1][1] + f[(i-1)&1][4]) % (10**9 + 7)\n            f[i&1][1] = (f[(i-1)&1][0] + f[(i-1)&1][4]) % (10**9 + 7)\n            f[i&1][2] = f[(i-1)&1][4] % (10**9 + 7)\n            f[i&1][3] = (f[(i-1)&1][2] + f[(i-1)&1][4]) % (10**9 + 7)\n            f[i&1][4] = (f[(i-1)&1][1] + f[(i-1)&1][2]) % (10**9 + 7)\n        return sum(f[n&1]) % (10**9 + 7)\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        #drawing graph\n        # a -> e\n        # e -> a, i\n        # i -> a, e, o, u\n        # o -> i, u\n        # u -> a\n        \n        # 'a' can follow {'e', 'i', 'u'}\n        # 'e' can follow {'a', 'i'}\n        # 'i' can follow {'e', 'o'}\n        # 'o' can follow {'i'}\n        # 'u' can follow {'i', 'o'}\n           \n        mod = 10**9+7\n        count = 0\n        \n        #cols = the 5 vowels, rows = length of string\n        #i,j coord denotes num of valid strings of length i\n        #col 0 = a, 1 = e, 2, = i, 3 = o, 4 = u\n        dp = [[0 for i in range(5)] for j in range(n+1)]\n        \n        for i in range(5):\n            dp[1][i] = 1\n            \n        for i in range(1, n):\n            dp[i+1][0] = (dp[i][1] + dp[i][2] + dp[i][4]) % mod\n            dp[i+1][1] = (dp[i][0] + dp[i][2]) % mod\n            dp[i+1][2] = (dp[i][1] + dp[i][3]) % mod\n            dp[i+1][3] = (dp[i][2]) % mod\n            dp[i+1][4] = (dp[i][2] + dp[i][3]) % mod\n        \n        for i in range(5):\n            count = (count + dp[n][i]) % mod\n        \n        return count\n            \n            \n            \n            \n            \n            \n        \n        \n        \n        \n        \n        \n        \n        \n        \n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a = 1\n        e = 1\n        i = 1\n        o = 1\n        u = 1\n        kmod = pow(10, 9) + 7\n        \n        for k in range(2, n + 1):\n            aa = (e + i + u) % kmod\n            ee = (a + i) % kmod\n            ii = (e + o) % kmod\n            oo = i % kmod\n            uu = (i + o) % kmod\n            a = aa\n            e = ee\n            i = ii\n            o = oo\n            u = uu\n        \n        return sum([a, e, i, o, u]) % kmod", "from enum import IntEnum\n\nclass Solution:\n        \n    found, not_found = 0, 0\n        \n    def countVowelPermutation(self, n: int) -> int:\n        \n        mod = 10**9 + 7\n        \n        class Vowel(IntEnum):\n            A = 0\n            E = 1\n            I = 2\n            O = 3\n            U = 4\n        \n        nstrs = [1] * 5\n        \n        while n > 1:\n            (a, e, i, o, u) = nstrs\n            nstrs[Vowel.A] = e\n            nstrs[Vowel.E] = a + i  \n            nstrs[Vowel.I] = a + e + o + u  \n            nstrs[Vowel.O] = i + u\n            nstrs[Vowel.U] = a \n            \n            n -= 1\n        \n        return sum(nstrs) % mod", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        a=e=i=o=u=1\n        if n==0:\n            return 0\n        for z in range(n-1):\n            a,e,i,o,u = e,a+i,a+e+o+u,i+u,a\n        return (a+e+i+o+u)%1000000007", "from collections import defaultdict as dt\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        di={'a':1,'e':1,'i':1,'o':1,'u':1}\n        for j in range(1,n):\n            e={}\n            for i in 'aeiou':\n                if i=='e':\n                    e[i]= di['a']+di['i']\n                elif i=='a':\n                    e[i]= di['e']\n                elif i=='i':\n                    e[i]=di['a']+di['e']+di['o']+di['u']\n                elif i=='o':\n                    e[i]=di['i']+di['u']\n                else:\n                    e[i]=di['a']\n            di=e\n        return sum(list(di.values()))%(10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        mod = 10 ** 9 + 7\n        dp = [1] * 5\n        for _ in range(n - 1):\n            add = [0] * 5\n            # from a\n            add[1] = (add[1] + dp[0]) % mod\n            # from e\n            add[0] = (add[0] + dp[1]) % mod\n            add[2] = (add[2] + dp[1]) % mod\n            # from i\n            add[0] = (add[0] + dp[2]) % mod\n            add[1] = (add[1] + dp[2]) % mod\n            add[3] = (add[3] + dp[2]) % mod\n            add[4] = (add[4] + dp[2]) % mod\n            # from o\n            add[2] = (add[2] + dp[3]) % mod\n            add[4] = (add[4] + dp[3]) % mod\n            # from u\n            add[0] = (add[0] + dp[4]) % mod\n            for i in range(5):\n                dp[i] = add[i] % mod\n        return sum(dp) % mod", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        from collections import defaultdict\n        \n        end = dict()\n        end['a'] = 1\n        end['e'] = 1\n        end['i'] = 1\n        end['o'] = 1\n        end['u'] = 1\n                        \n        for j in range(n-1):\n            \n            for_a = end['e'] + end['i'] + end['u']\n            for_e = end['a'] + end['i']\n            for_i = end['e'] + end['o']\n            for_o = end['i']\n            for_u = end['o'] + end['i']\n\n            end['a'] = for_a\n            end['e'] = for_e\n            end['i'] = for_i\n            end['o'] = for_o\n            end['u'] = for_u\n                        \n        count = sum([v for k, v in list(end.items())])\n        \n        return count % (10**9 + 7)       \n\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        mod = 10**9 + 7\n        d = {\n            0: (1,),\n            1: (0, 2),\n            2: (0, 1, 3, 4),\n            3: (2, 4),\n            4: (0,)\n        }\n        a0 = [1] * 5\n        for i in range(n - 1):\n            a1 = [0] * 5\n            for j in range(5):\n                for k in d[j]:\n                    a1[k] = (a1[k] + a0[j]) % mod\n            a0 = a1\n        return sum(a0) % mod", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:  \n        # a -> e\n        # e -> a,i\n        # i -> a,e,o,u\n        # o -> i,u\n        # u -> a\n        rules = [[1,2,4],[0,2],[1,3],[2],[2,3]]\n        dp = [1]*5\n        \n        for i in range(1,n):\n            dp_new = [0]*5\n            for j in range(5):\n                for k in rules[j]:\n                    dp_new[j] += dp[k]%(10**9+7)\n            dp = dp_new\n            \n        return sum(dp)%(10**9+7)\n        \n\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[1]*5 for _ in range(n)]\n        \n        for i in range(1, n):\n            dp[i][0] = dp[i-1][1]\n            dp[i][1] = dp[i-1][0] + dp[i-1][2]\n            dp[i][2] = dp[i-1][0] + dp[i-1][1] + dp[i-1][3] + dp[i-1][4]\n            dp[i][3] = dp[i-1][2] + dp[i-1][4]\n            dp[i][4] = dp[i-1][0]\n        \n        return sum(dp[n-1]) % (10**9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        if n == 1:\n            return 5\n        a, e, o, u, i = 1, 1, 1, 1, 1\n        for _ in range(1, n):\n            a, e, o, u, i = e + u + i, i + a, i, i + o, e + o\n        return (a + e + o + u + i) % (10**9 + 7)\n", "mod_ = 10**9+7\n\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[0 for char in range(5)] for t in range(n)]\n        dp[0] = [1 for char in range(5)]\n        for i in range(1,n):\n            dp[i][0] = (dp[i][0]+dp[i-1][1] + dp[i-1][2] + dp[i-1][4]) % mod_\n            dp[i][1] = (dp[i][1]+dp[i-1][0] + dp[i-1][2]) % mod_\n            dp[i][2] = (dp[i][2]+dp[i-1][1] + dp[i-1][3]) % mod_ \n            dp[i][3] = (dp[i][3]+dp[i-1][2]) % mod_ \n            dp[i][4] = (dp[i][4] + dp[i-1][2] + dp[i-1][3]) % mod_\n            \n        return sum(dp[-1]) % mod_", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n          mod = 10**9 + 7\n          count={'a':1,'e':1,'i':1,'o':1,'u':1}\n          dic={'a':['e'],'e':['a','i'],'i':['a','e','o','u'],'o':['i','u'],'u':['a']}\n\n          for i in range (n-1):\n              tmp = {}\n              for x in dic:\n                for v in dic[x]:\n                  tmp[v] = (tmp.get(v,0) + count[x])%mod\n              count = tmp\n          return sum(count.values())%mod\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        if n == 1 :\n            return 5\n        \n        T = {\n            'a': ['e'],\n            'e': ['a', 'i'],\n            'i': ['a', 'e', 'o', 'u'],\n            'o': ['i', 'u'],\n            'u': ['a']\n        }\n        \n        dp = {l: [0 for i in range(n)] for l in 'aeiou'}\n        for letter in 'aeiou':\n            dp[letter][1] = len(T[letter])\n        \n        \n        for i in range(2, n):\n            for l in 'aeiou':\n                total = 0\n                for r in T[l]:\n                    total += dp[r][i-1] % 1000000007\n                dp[l][i] = total\n        \n        return sum(dp[letter][n-1] for letter in 'aeiou') % 1000000007", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1}\n        follows = {'a':'e', 'e':'ai', 'i':'aeou', 'o':'iu', 'u':'a'}\n        mod = 10**9+7\n        for _ in range(1, n):\n            dp2 = {}\n            for c, v in dp.items():\n                for f in follows[c]:\n                    dp2[f] = (dp2.get(f, 0)+v)%mod\n                \n            dp = dp2\n        return sum(dp.values())%mod", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        res=[[0 for i in range(5)]\n             for j in range(n)]\n        result=0\n        if n==1:\n            return 5\n        for i in range(5):\n            res[0][i]=1\n        for i in range(1,n):\n            res[i][0]=(res[i-1][1]+res[i-1][2]+res[i-1][4])\n            res[i][1]=(res[i-1][0]+res[i-1][2])\n            res[i][2]=(res[i-1][1]+res[i-1][3])\n            res[i][3]=(res[i-1][2])\n            res[i][4]=(res[i-1][2]+res[i-1][3])\n        for i in range(5):\n            result=(result+res[n-1][i])%1000000007\n        return result\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        m = 10**9+7\n        a=e=i=o=u=1\n        for _ in range(n-1):\n            a,e,i,o,u = (e+i+u)%m,(a+i)%m,(e+o)%m,i%m,(i+o)%m\n        return (a+e+i+o+u)%m\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp_array = [[0] * 5 for _ in range(n + 1)]\n        dp_array[1] = [1, 1, 1, 1, 1]\n        for i in range(2, n + 1):\n            # a is allowed to follow e, i, or u.\n            dp_array[i][0] = dp_array[i - 1][1] + dp_array[i - 1][2] + dp_array[i - 1][4]\n            # e is allowed to follow a or i.\n            dp_array[i][1] = dp_array[i - 1][0] +  dp_array[i - 1][2]\n            # i is allowed to follow e or o.\n            dp_array[i][2] = dp_array[i - 1][1] + dp_array[i - 1][3]\n            # o is allowed to follow i\n            dp_array[i][3] = dp_array[i - 1][2]\n            # u is allowed to follow i or o.\n            dp_array[i][4] = dp_array[i - 1][2] + dp_array[i - 1][3]\n        return sum(dp_array[n]) % ((10 ** 9) + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        MOD = 10**9+7\n        dp = [1]*5\n        \n        foll = [[1], [0, 2], [0, 1, 3, 4], [2, 4], [0]]\n        for _ in range(1, n):\n            tmp = [0]*5\n            for idx, follow in enumerate(foll):\n                for i in follow:\n                    tmp[idx] += dp[i]\n                    tmp[idx] %= MOD\n            dp = tmp\n                    \n        return sum(dp)%MOD\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[0 for j in range(n)] for i in range(5)]\n        md = 10**9+7\n        for i in range(5):\n            dp[i][0] = 1\n        # [a, e, i, o, u] => [0, 1, 2, 3, 4]\n        A, E, I, O, U = 0, 1, 2, 3, 4\n        for i in range(1, n):\n            dp[E][i] = (dp[E][i]+dp[A][i-1])%md\n            \n            dp[A][i] = (dp[A][i]+dp[E][i-1])%md\n            dp[I][i] = (dp[I][i]+dp[E][i-1])%md\n            \n            dp[A][i] = (dp[A][i]+dp[I][i-1])%md\n            dp[E][i] = (dp[E][i]+dp[I][i-1])%md\n            dp[O][i] = (dp[O][i]+dp[I][i-1])%md\n            dp[U][i] = (dp[U][i]+dp[I][i-1])%md\n            \n            dp[I][i] = (dp[I][i]+dp[O][i-1])%md\n            dp[U][i] = (dp[U][i]+dp[O][i-1])%md\n            \n            dp[A][i] = (dp[A][i]+dp[U][i-1])%md\n        ans = 0\n        for i in range(5):\n            ans = (ans+dp[i][-1])%md\n        return ans", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        valid = {\n            'a': 'e',\n            'e': 'ai',\n            'i': 'aeou',\n            'o': 'iu',\n            'u': 'a',\n        }\n        \n        cmap = {\n            'a': 0,\n            'e': 1,\n            'i': 2,\n            'o': 3,\n            'u': 4,\n        }\n        \n        last = [1] * 5\n        for i in range(n-1):\n            nex = [0] * 5\n            for j in 'aeiou':\n                for k in valid[j]:\n                    nex[cmap[k]] += last[cmap[j]] % (10**9+7)\n                    # nex[cmap[k]] += last[cmap[j]]\n            last = nex\n        return sum(last) % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        mod = int(1e9 + 7)\n\n        # graph[0] = 'a' can come after 'e', 'i', 'u'\n        # graph[1] = 'e' can come after 'a', 'i'\n        # graph[2] = 'i' can come after 'e', 'o'\n        # graph[3] = 'o' can come after 'i'\n        # graph[4] = 'u' can come after 'i', 'o'\n        graph = [[1, 2, 4], [0, 2], [1, 3], [2], [2, 3]]\n\n        # dp[i] = number of ways that ends with letter i\n        dp = [1] * 5\n\n        for i in range(n - 1):\n            copy = dp[:]\n            for j in range(5):\n                dp[j] = 0\n                for k in graph[j]:\n                    dp[j] += copy[k]\n                    dp[j] %= mod\n        \n        ans = 0\n\n        for cnt in dp:\n            ans += cnt\n            ans %= mod\n        \n        return ans\n\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[0 for _ in range(5)] for _ in range(n + 1)]\n        for i in range(5):\n            dp[n][i] = 1\n        \n        mod = 10**9 + 7\n        for i in range(n - 1, 0, -1):\n            for j in range(5):\n                if j == 0:\n                    dp[i][j] = dp[i + 1][j + 1]\n                elif j == 1:\n                    dp[i][j] = (dp[i + 1][j - 1] + dp[i + 1][j + 1])%mod\n                elif j == 2:\n                    dp[i][j] = (dp[i + 1][j - 1] + dp[i + 1][j + 1])%mod\n                    dp[i][j] = (dp[i][j] + dp[i + 1][j - 2] + dp[i + 1][j + 2])%mod\n                elif j == 3:\n                    dp[i][j] = (dp[i + 1][j - 1] + dp[i + 1][j + 1])%mod\n                elif j == 4:\n                    dp[i][j] = dp[i + 1][0]\n        \n        # print(dp)\n        res = 0\n        for j in range(5):\n            res = (res + dp[1][j])%mod\n        return res", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        from collections import defaultdict\n        \n        end = dict()\n        end['a'] = 1\n        end['e'] = 1\n        end['i'] = 1\n        end['o'] = 1\n        end['u'] = 1\n                        \n        for j in range(n-1):\n            \n            for_a = end['e'] + end['i'] + end['u']\n            for_e = end['a'] + end['i']\n            for_i = end['e'] + end['o']\n            for_o = end['i']\n            for_u = end['o'] + end['i']\n\n            end['a'] = for_a\n            end['e'] = for_e\n            end['i'] = for_i\n            end['o'] = for_o\n            end['u'] = for_u\n                        \n        count = sum([v for k, v in list(end.items())])\n        \n        return count % (10**9 + 7) \n", "#leetCode 1220. Count Vowels Permutation\nclass Solution:\n    def countVowelPermutation(self, n):\n        last_a, last_e, last_i, last_o, last_u = 1,1,1,1,1\n        mod = round(1e9+7)\n        for i in range(n-1):\n            cur_a = (last_e + last_i + last_u) % mod\n            cur_e = (last_a + last_i) % mod\n            cur_i = (last_e + last_o) % mod\n            cur_o = (last_i) % mod\n            cur_u = (last_i + last_o) % mod\n            last_a, last_e, last_i, last_o, last_u = cur_a, cur_e, cur_i, cur_o, cur_u\n        #\u6ce8\u610f\u53d6\u6574\uff0c\u52a0\u5728\u4e00\u8d77\u53ef\u80fd\u8d8a\u754c\n        return sum([last_a, last_e, last_i, last_o, last_u]) % mod\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[0 for _ in range(5)] for _ in range(n+1)]\n        for i in range(5):\n            dp[1][i] = 1\n        for i in range(2,n+1):\n            dp[i][0] = dp[i-1][1] + dp[i-1][2] + dp[i-1][4] \n            dp[i][1] = dp[i-1][0] + dp[i-1][2]\n            dp[i][2] = dp[i-1][1] + dp[i-1][3]\n            dp[i][3] = dp[i-1][2]\n            dp[i][4] = dp[i-1][2] + dp[i-1][3]\n        return sum(dp[n]) % (1000000000 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [[1 for _ in range(5)]] + [[0 for _ in range(5)] for _ in range(n-1)]\n        \n        for i in range(1, n):\n            # a = ea + ia + ua\n            dp[i][0] = dp[i-1][1] + dp[i-1][2] + dp[i-1][4]\n            # e = ae + ie\n            dp[i][1] = dp[i-1][0] + dp[i-1][2]\n            # i = ei + oi\n            dp[i][2] = dp[i-1][1] + dp[i-1][3]\n            # o = io\n            dp[i][3] = dp[i-1][2]\n            # u = iu + ou\n            dp[i][4] = dp[i-1][2] + dp[i-1][3]\n            \n        return sum(dp[-1]) % (10 ** 9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        M = 10**9+7\n        dp = [[0 for j in range(n+1)] for i in range(5)]\n        for i in range(5):\n            dp[i][1] = 1\n            \n#         for i in range(5):\n#             print(dp[i])\n        \n        for j in range(2, n+1):\n            dp[0][j] = dp[1][j-1]+dp[2][j-1]+dp[4][j-1]\n            dp[1][j] = dp[0][j-1]+dp[2][j-1]\n            dp[2][j] = dp[1][j-1]+dp[3][j-1]\n            dp[3][j] = dp[2][j-1]\n            dp[4][j] = dp[2][j-1]+dp[3][j-1]\n        \n        res = 0\n        for i in range(5):\n            res += dp[i][n]\n        return res%M", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        vowels_idx = {'a' : 0, 'e' : 1, 'i' : 2, 'o' : 3, 'u' : 4}\n        f = [None] * n\n        f[n-1] = [1] * len(vowels_idx)\n        for i in range(n-2, -1, -1):\n            f[i] = [0] * len(vowels_idx)\n            for vowel in vowels_idx:\n                if vowel == 'a':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['e']]\n                elif vowel == 'e':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']] + f[i+1][vowels_idx['i']]\n                elif vowel == 'i':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']] + f[i+1][vowels_idx['e']] + f[i+1][vowels_idx['o']] + f[i+1][vowels_idx['u']]\n                elif vowel == 'o':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['i']] + f[i+1][vowels_idx['u']]\n                else:\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']]\n                f[i][vowels_idx[vowel]] %= (10**9 + 7)\n        total = 0\n        for vowel in vowels_idx:\n            total += f[0][vowels_idx[vowel]]\n        return total % (10**9 + 7)\n            \n        memo = {}\n        def f(i, prev_vowel):\n            if i == n:\n                return 1\n            \n            if (i, prev_vowel) in memo:\n                return memo[(i, prev_vowel)]\n            \n            cnt = 0\n            if prev_vowel == 'a':\n                cnt += f(i + 1, 'e')\n            elif prev_vowel == 'e':\n                cnt += f(i + 1, 'a') + f(i + 1, 'i')\n            elif prev_vowel == 'i':\n                cnt += f(i + 1, 'a') + f(i + 1, 'e') + f(i + 1, 'o') + f(i + 1, 'u')\n            elif prev_vowel == 'o':\n                cnt += f(i + 1, 'i') + f(i + 1, 'u')\n            else:\n                cnt += f(i + 1, 'a')\n                \n            memo[(i, prev_vowel)] = cnt % (10**9 + 7)\n            return cnt\n        \n        cnt = 0\n        for vowel in ['a', 'e', 'i', 'o', 'u']:\n            cnt += f(1, vowel)\n        \n        return cnt % (10**9 + 7)\n\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        vowels_idx = {'a' : 0, 'e' : 1, 'i' : 2, 'o' : 3, 'u' : 4}\n        f = [None] * n\n        f[n-1] = [1] * len(vowels_idx)\n        for i in range(n-2, -1, -1):\n            f[i] = [0] * len(vowels_idx)\n            for vowel in vowels_idx:\n                # If we have some vowel at current index i, then we know it can only\n                # be followed by a specific set of vowels, depending on the vowel at i\n                if vowel == 'a':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['e']]\n                elif vowel == 'e':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']] + f[i+1][vowels_idx['i']]\n                elif vowel == 'i':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']] + f[i+1][vowels_idx['e']] + f[i+1][vowels_idx['o']] + f[i+1][vowels_idx['u']]\n                elif vowel == 'o':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['i']] + f[i+1][vowels_idx['u']]\n                else:\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']]\n                f[i][vowels_idx[vowel]] %= (10**9 + 7)\n        total = 0\n        for vowel in vowels_idx:\n            total += f[0][vowels_idx[vowel]]\n        return total % (10**9 + 7)\n            \n        memo = {}\n        def f(i, prev_vowel):\n            if i == n:\n                return 1\n            \n            if (i, prev_vowel) in memo:\n                return memo[(i, prev_vowel)]\n            \n            cnt = 0\n            if prev_vowel == 'a':\n                cnt += f(i + 1, 'e')\n            elif prev_vowel == 'e':\n                cnt += f(i + 1, 'a') + f(i + 1, 'i')\n            elif prev_vowel == 'i':\n                cnt += f(i + 1, 'a') + f(i + 1, 'e') + f(i + 1, 'o') + f(i + 1, 'u')\n            elif prev_vowel == 'o':\n                cnt += f(i + 1, 'i') + f(i + 1, 'u')\n            else:\n                cnt += f(i + 1, 'a')\n                \n            memo[(i, prev_vowel)] = cnt % (10**9 + 7)\n            return cnt\n        \n        cnt = 0\n        for vowel in ['a', 'e', 'i', 'o', 'u']:\n            cnt += f(1, vowel)\n        \n        return cnt % (10**9 + 7)\n\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        vowels_idx = {'a' : 0, 'e' : 1, 'i' : 2, 'o' : 3, 'u' : 4}\n        f = [None] * n\n        # We can safely assume a string can end in any vowel\n        f[n-1] = [1] * len(vowels_idx)\n        for i in range(n-2, -1, -1):\n            f[i] = [0] * len(vowels_idx)\n            for vowel in vowels_idx:\n                # If we have some vowel at current index i, then we know it can only\n                # be followed by a specific set of vowels, depending on the vowel at i\n                if vowel == 'a':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['e']]\n                elif vowel == 'e':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']] + f[i+1][vowels_idx['i']]\n                elif vowel == 'i':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']] + f[i+1][vowels_idx['e']] + f[i+1][vowels_idx['o']] + f[i+1][vowels_idx['u']]\n                elif vowel == 'o':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['i']] + f[i+1][vowels_idx['u']]\n                else:\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']]\n                f[i][vowels_idx[vowel]] %= (10**9 + 7)\n        total = 0\n        for vowel in vowels_idx:\n            total += f[0][vowels_idx[vowel]]\n        return total % (10**9 + 7)\n            \n        memo = {}\n        def f(i, prev_vowel):\n            if i == n:\n                return 1\n            \n            if (i, prev_vowel) in memo:\n                return memo[(i, prev_vowel)]\n            \n            cnt = 0\n            if prev_vowel == 'a':\n                cnt += f(i + 1, 'e')\n            elif prev_vowel == 'e':\n                cnt += f(i + 1, 'a') + f(i + 1, 'i')\n            elif prev_vowel == 'i':\n                cnt += f(i + 1, 'a') + f(i + 1, 'e') + f(i + 1, 'o') + f(i + 1, 'u')\n            elif prev_vowel == 'o':\n                cnt += f(i + 1, 'i') + f(i + 1, 'u')\n            else:\n                cnt += f(i + 1, 'a')\n                \n            memo[(i, prev_vowel)] = cnt % (10**9 + 7)\n            return cnt\n        \n        cnt = 0\n        for vowel in ['a', 'e', 'i', 'o', 'u']:\n            cnt += f(1, vowel)\n        \n        return cnt % (10**9 + 7)\n\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        vowels_idx = {'a' : 0, 'e' : 1, 'i' : 2, 'o' : 3, 'u' : 4}\n        f = [None] * n\n        f[n-1] = [1] * len(vowels_idx)\n        for i in range(n-2, -1, -1):\n            f[i] = [0] * len(vowels_idx)\n            for vowel in vowels_idx:\n                if vowel == 'a':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['e']]\n                elif vowel == 'e':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']] + f[i+1][vowels_idx['i']]\n                elif vowel == 'i':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']] + f[i+1][vowels_idx['e']] + f[i+1][vowels_idx['o']] + f[i+1][vowels_idx['u']]\n                elif vowel == 'o':\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['i']] + f[i+1][vowels_idx['u']]\n                else:\n                    f[i][vowels_idx[vowel]] += f[i+1][vowels_idx['a']]\n                f[i][vowels_idx[vowel]] %= (10**9 + 7)\n        total = 0\n        for vowel in vowels_idx:\n            total += f[0][vowels_idx[vowel]]\n        return total % (10**9 + 7)\n\n                                        \n            \n        memo = {}\n        def f(i, prev_vowel):\n            if i == n:\n                return 1\n            \n            if (i, prev_vowel) in memo:\n                return memo[(i, prev_vowel)]\n            \n            cnt = 0\n            if prev_vowel == 'a':\n                cnt += f(i + 1, 'e')\n            elif prev_vowel == 'e':\n                cnt += f(i + 1, 'a') + f(i + 1, 'i')\n            elif prev_vowel == 'i':\n                cnt += f(i + 1, 'a') + f(i + 1, 'e') + f(i + 1, 'o') + f(i + 1, 'u')\n            elif prev_vowel == 'o':\n                cnt += f(i + 1, 'i') + f(i + 1, 'u')\n            else:\n                cnt += f(i + 1, 'a')\n                \n            memo[(i, prev_vowel)] = cnt % (10**9 + 7)\n            return cnt\n        \n        cnt = 0\n        for vowel in ['a', 'e', 'i', 'o', 'u']:\n            cnt += f(1, vowel)\n        \n        return cnt % (10**9 + 7)\n\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = {}\n        for c in ['a', 'e', 'i', 'o', 'u']:\n            dp[c] = 1\n        sources = {}\n        sources['a'] = ['e','i','u']\n        sources['e'] = ['a', 'i']\n        sources['i'] = ['e', 'o']\n        sources['o'] = ['i']\n        sources['u'] = ['i', 'o']\n        for i in range(2, n+1):\n            next_dp = {}\n            for c in ['a', 'e', 'i', 'o', 'u']:\n                next_dp[c] = sum(\n                    dp[s] for s in sources[c]\n                ) % 1000000007\n            dp = next_dp\n        return sum(dp.values())  % 1000000007\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        \n        from collections import defaultdict\n        \n        end = dict()\n        end['a'] = 1\n        end['e'] = 1\n        end['i'] = 1\n        end['o'] = 1\n        end['u'] = 1\n                        \n        for j in range(n-1):\n            \n            for_a = end['e'] + end['i'] + end['u']\n            for_e = end['a'] + end['i']\n            for_i = end['e'] + end['o']\n            for_o = end['i']\n            for_u = end['o'] + end['i']\n\n            end['a'] = for_a\n            end['e'] = for_e\n            end['i'] = for_i\n            end['o'] = for_o\n            end['u'] = for_u\n                        \n        count = sum([v for k, v in end.items()])\n        \n        return count % (10**9 + 7)       ", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n\n        graph = {\n            0: (1,),\n            1: (0, 2),\n            2: (0, 1, 3, 4),\n            3: (2, 4),\n            4: (0,),\n        }\n\n        permutations = [1] * 5\n        for _ in range(n - 1):\n            next_permutations = [0] * 5\n            for node in range(5):\n                for neighbour in graph[node]:\n                    next_permutations[neighbour] += permutations[node]\n            permutations = next_permutations\n\n        return sum(permutations) % (10 ** 9 + 7)", "import numpy as np\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        mod = 10**9 + 7\n        if n == 1:\n            return 5\n        M = np.matrix([[0,1,0,0,0],[1,0,1,0,0],[1,1,0,1,1],[0,0,1,0,1],[1,0,0,0,0]])\n        print(M)\n        res = 1\n        N = n-1 # times of permutation\n        while N > 0:\n            if N%2:\n                res = res * M %mod\n                print(res)\n                                \n            M = M*M%mod   # speed up         \n            N//= 2\n           \n        return int(np.sum(res))%mod", "\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        '''\n        \n        '''\n        g = {\n            'a':['e'],\n            'e':['a','i'],\n            'i':['a','e','o','u'],\n            'o':['i','u'],\n            'u':['a']\n        }\n        d2i = {\n            'a':0,\n            'e':1,\n            'i':2,\n            'o':3,\n            'u':4\n        }\n        newg = {}\n        for k,v in g.items():\n            newg[d2i[k]] = [d2i[letter] for letter in v]\n\n        mod = 10**9 + 7\n        prev = [1]*5\n\n        for _ in range(n-1):\n            dp = [None]*5\n            for i in range(5):\n                dp[i] = sum(prev[j] for j in newg[i])%mod\n            prev = dp\n        return sum(prev)%mod", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        m = {0: [1], 1: [0, 2], 2: [0, 1, 3, 4], 3: [2, 4], 4: [0]}\n        dp = [1] * 5         \n        for i in range(1, n):\n            dp2 = [0] * 5\n            for j in range(5):                \n                for k in m[j]: dp2[k] += dp[j]\n            dp = dp2\n        return sum(dp) % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        result = [1]*5\n        graph = [[1],[0,2],[0,1,3,4],[2,4],[0]]\n        for count in range(1,n):\n            tempResult = [0]*5\n            for i in range(5):\n                for j in graph[i]:\n                    tempResult[j]+=result[i]\n            result = tempResult\n        return sum(result)%(10**9+7)", "class Solution:\n\n    def countVowelPermutation(self, n: int) -> int:\n        prevfreq = {'a':1, 'e':1, 'o':1, 'i':1, 'u':1}\n        vmap = {'a':['e'], 'e':['a','i'], 'i':['a','e','o','u'], 'o':['i','u'], 'u':['a']}\n        for i in range(1, n):\n            curfreq = defaultdict(int)\n            for v, freq in prevfreq.items():\n                for nextv in vmap[v]:\n                    curfreq[nextv] += freq\n            prevfreq = curfreq\n        return sum(prevfreq.values()) % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        valid = {\n            'a': 'e',\n            'e': 'ai',\n            'i': 'aeou',\n            'o': 'iu',\n            'u': 'a',\n        }\n        \n        cmap = {\n            'a': 0,\n            'e': 1,\n            'i': 2,\n            'o': 3,\n            'u': 4,\n        }\n        \n        last = [1] * 5\n        for i in range(n-1):\n            nex = [0] * 5\n            for j in 'aeiou':\n                for k in valid[j]:\n                    # nex[cmap[k]] += last[cmap[j]] % (10**9+7)\n                    nex[cmap[k]] += last[cmap[j]]\n            last = nex\n        return sum(last) % (10**9+7)", "# https://leetcode.com/problems/count-vowels-permutation/discuss/398286/Simple-Python-(With-Diagram)\n\nclass Solution:\n\n    def countVowelPermutation(self, n: int) -> int:\n        prevfreq = {'a':1, 'e':1, 'o':1, 'i':1, 'u':1}\n        vmap = {'a':['e'], 'e':['a','i'], 'i':['a','e','o','u'], 'o':['i','u'], 'u':['a']}\n        for i in range(1, n):\n            curfreq = defaultdict(int)\n            for v, freq in prevfreq.items():\n                for nextv in vmap[v]:\n                    curfreq[nextv] += freq\n            prevfreq = curfreq\n        return sum(prevfreq.values()) % (10**9+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = [1] * 5\n        mod = 10**9 + 7\n        for i in range(1, n):\n            dp[0],dp[1],dp[2],dp[3],dp[4]=(dp[1]+dp[2]+dp[4])%mod,(dp[0]+dp[2])%mod,(dp[1]+dp[3])%mod, dp[2], (dp[2]+dp[3])%mod\n        \n        return sum(dp)%mod", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp=[[0,0,0,0,0] for i in range(n)]\n        dp[0]=[1,1,1,1,1]\n        for m in range(1,n):\n            dp[m][0]=dp[m-1][1]+dp[m-1][2]+dp[m-1][4]\n            dp[m][1]=dp[m-1][0]+dp[m-1][2]\n            dp[m][2]=dp[m-1][1]+dp[m-1][3]\n            dp[m][3]=dp[m-1][2]\n            dp[m][4]=dp[m-1][2]+dp[m-1][3]\n        return sum(dp[-1])%(pow(10,9)+7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        prevfreq = {'a':1, 'e':1, 'o':1, 'i':1, 'u':1}\n        vmap = {'a':['e'], 'e':['a','i'], 'i':['a','e','o','u'], 'o':['i','u'], 'u':['a']}\n        for i in range(1, n):\n            # print(i)\n            curfreq = defaultdict(int)\n            for v, freq in prevfreq.items():\n                # print(v,freq)\n                for nextv in vmap[v]:\n                    curfreq[nextv] += freq\n                    # print(curfreq)\n            prevfreq = curfreq\n        return sum(prevfreq.values()) % (10**9+7)", "class Solution:\n    @lru_cache(None)\n    def countVowelPermutation(self, n: int) -> int:\n        prevs = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1}\n        for i in range(1, n):\n            cur = defaultdict(int)\n            for prev, count in prevs.items():\n                if prev == 'a':\n                    cur['e'] += count\n                elif prev == 'e':\n                    for nextch in ['a', 'i']:\n                        cur[nextch] += count\n                elif prev == 'i':\n                    for nextch in ['a', 'e', 'o', 'u']:\n                        cur[nextch] += count \n                elif prev == 'o':\n                    for nextch in ['i', 'u']:\n                        cur[nextch] += count\n                elif prev == 'u':\n                    cur['a'] += count\n            prevs = cur\n        return sum(prevs.values()) % 1000000007\n        '''\n        vocals = ['aeiou']\n        arr = vocals * n\n        prods = list(map(\\\"\\\".join, itertools.product(*arr)))\n        count = 0\n        for prod in prods:\n            if \\\"aa\\\" in prod or \\\"ai\\\" in prod or \\\"ao\\\" in prod or \\\"au\\\" in prod or \\\"ee\\\" in prod or \\\"eo\\\" in prod or \\\"eu\\\" in prod or \\\"ii\\\" in prod or \\\"oa\\\" in prod or \\\"oe\\\" in prod or \\\"oo\\\" in prod or \\\"ue\\\" in prod or \\\"ui\\\" in prod or \\\"uo\\\" in prod or \\\"uu\\\" in prod:\n                continue\n            print(prod)\n            count += 1\n        return count%(10**9+7)\n        '''", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        prevs = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1}\n        for i in range(1, n):\n            cur = defaultdict(int)\n            for prev, count in prevs.items():\n                if prev == 'a':\n                    cur['e'] += count\n                elif prev == 'e':\n                    for nextch in ['a', 'i']:\n                        cur[nextch] += count\n                elif prev == 'i':\n                    for nextch in ['a', 'e', 'o', 'u']:\n                        cur[nextch] += count \n                elif prev == 'o':\n                    for nextch in ['i', 'u']:\n                        cur[nextch] += count\n                elif prev == 'u':\n                    cur['a'] += count\n            prevs = cur\n        return sum(prevs.values()) % 1000000007", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = dict.fromkeys(('a', 'e', 'i', 'o', 'u'), 1)\n        for k in range(1, n):\n            dp = {\n                'a': sum(dp[v] for v in ('e', 'i', 'u')),\n                'e': sum(dp[v] for v in ('a', 'i')),\n                'i': sum(dp[v] for v in ('e', 'o')),\n                'o': dp['i'],\n                'u': sum(dp[v] for v in ('i', 'o'))\n            }\n        return sum(dp.values()) % (10 ** 9 + 7)", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        dp = {}\n        dp[1] = {}\n        for c in ['a', 'e', 'i', 'o', 'u']:\n            dp[1][c] = 1\n        sources = {}\n        sources['a'] = ['e','i','u']\n        sources['e'] = ['a', 'i']\n        sources['i'] = ['e', 'o']\n        sources['o'] = ['i']\n        sources['u'] = ['i', 'o']\n        for i in range(2, n+1):\n            dp[i] = {}\n            for c in ['a', 'e', 'i', 'o', 'u']:\n                dp[i][c] = sum(\n                    dp[i-1][s] for s in sources[c]\n                ) % 1000000007\n        return sum(dp[n][c] for c in dp[n])  % 1000000007\n", "class Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        if not n:\n            return 0\n\n        dic = {\n            'a': ['e'],\n            'e': ['a', 'i'],\n            'i': ['a', 'e', 'o', 'u'],\n            'o': ['i', 'u'],\n            'u': ['a']\n        }\n\n        dp_cur = {\n            'a': 1,\n            'e': 1,\n            'i': 1,\n            'o': 1,\n            'u': 1,\n        }\n\n        for i in range(1, n):\n            dp_next = collections.defaultdict(int)\n            for key, item in list(dp_cur.items()):\n                for j in dic[key]:\n                    dp_next[j] += item\n            dp_cur = dp_next\n\n        return sum(dp_cur.values()) % (10 ** 9 + 7)\n"]