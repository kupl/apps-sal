["class Solution:\n     def leastInterval(self, tasks, n):\n         \"\"\"\n         :type tasks: List[str]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 0: return len(tasks)\n         from collections import Counter\n         counter = Counter(tasks)\n         window = n + 1\n         biggest_freq = max(list(counter.values()))\n         num_of_max_freq = list(counter.values()).count(biggest_freq)\n         return max(window * (biggest_freq - 1) + num_of_max_freq, len(tasks))\n", "class Solution:\n     def leastInterval(self, tasks, n):\n         \"\"\"\n         :type tasks: List[str]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if not tasks:\n             return 0\n         counts = {}\n         for i in tasks:\n             if i in counts:\n                 counts[i] += 1\n             else:\n                 counts[i] = 1\n         M = max(counts.values())\n         Mct = sum([1 for i in counts if counts[i] == M])\n         return max(len(tasks), (M - 1) * (n + 1) + Mct)\n \n             \n         \n             \n", "class Solution:\n     def leastInterval(self, tasks, n):\n         \"\"\"\n         :type tasks: List[str]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         l,dic=len(tasks),{}\n         for c in tasks:\n             if c in dic:\n                 dic[c]+=1\n             else:\n                 dic[c]=1\n         m,a=max(dic.values()),0\n         for c in dic:\n             if dic[c]==m:\n                 a+=1\n         return max(l,(m-1)*(n+1)+a)"]