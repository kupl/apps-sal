["class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        # DFS (Depth-First Search)\n        # Time  complexity: O(N x 2^N) = O(N x 9 x 2^(N-1))\n        # Space compleixty: O(2^N) = O(9 x 2^(N-1)) + O(N)\n        # if n == 1:\n        #     return [i for i in range(10)]\n\n        # ans = []\n        # def dfs(n, num):\n        #     # base case\n        #     if n == 0:\n        #         return ans.append(num)\n\n        #     tail_digit = num % 10\n        #     # using set() to avoid duplicates when K == 0\n        #     next_digits = set([tail_digit + k, tail_digit - k])\n\n        #     for next_digit in next_digits:\n        #         if 0 <= next_digit < 10:\n        #             new_num = num * 10 + next_digit\n        #             dfs(n - 1, new_num)\n\n        # for num in range(1, 10):\n        #     dfs(n - 1, num)\n\n        # return list(ans)\n\n\n        # BFS (Breadth-First Search)\n        # Time  complexity: O(N x 2^N)\n        # Space complexity: O(2^N)\n        if n == 1:\n            return [i for i in range(10)]\n\n        # initialize the queue with candidates for the first level\n        queue = [digit for digit in range(1, 10)]\n\n        for level in range(n - 1):\n            next_queue = []\n            for num in queue:\n                tail_digit = num % 10\n                # using set() to avoid duplicates when K == 0\n                next_digits = set([tail_digit + k, tail_digit - k])\n\n                for next_digit in next_digits:\n                    if 0 <= next_digit < 10:\n                        new_num = num * 10 + next_digit\n                        next_queue.append(new_num)\n\n            # start the next level\n            queue = next_queue\n\n        return queue\n", "class Solution:\n    def numsSameConsecDiff(self, N: int, K: int) -> List[int]:\n\n        if N == 1:\n            return [i for i in range(10)]\n\n        # initialize the queue with candidates for the first level\n        queue = [digit for digit in range(1, 10)]\n\n        for level in range(N-1):\n            next_queue = []\n            for num in queue:\n                tail_digit = num % 10\n                # using set() to avoid duplicates when K == 0\n                next_digits = set([tail_digit + K, tail_digit - K])\n\n                for next_digit in next_digits:\n                    if 0 <= next_digit < 10: \n                        new_num = num * 10 + next_digit\n                        next_queue.append(new_num)\n            # start the next level\n            queue = next_queue\n\n        return queue", "class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        if n == 1:\n            return list(range(10))\n        \n        ans = []\n        \n        for num in range(1, 10):\n            self.dfs(n-1, num, ans, k)\n        \n        return ans\n    \n    def dfs(self, n, num, ans, k):\n        if n == 0:\n            return ans.append(num)\n        \n        last_digit = num % 10\n        \n        next_ds = set([last_digit + k, last_digit - k])\n        \n        for digit in next_ds:\n            if 0 <= digit < 10:\n                tmp = num * 10 + digit\n                self.dfs(n-1, tmp, ans, k)\n\n", "class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        queue=[]\n        ans = []\n        for i in range(1,10):\n            queue.append(str(i))\n        while len(queue)>0:\n            num = queue.pop(0)\n            #print(queue)\n            #print(num,len(num))\n            if len(num)==n and (num not in ans):\n                ans.append(num)\n\n            elif len(num)<n:\n                x=int(num[-1])\n                if x-k>=0:\n                    queue.append(num+str(x-k))\n                if x+k<=9:\n                    queue.append(num+str(x+k))\n        \n        #print(queue)\n        \n        \n        return ans\n    \n    \n", "class Solution:\n    def numsSameConsecDiff(self, N: int, K: int) -> List[int]:\n\n\n        ans = []\n        def DFS(N, num):\n            # base case\n            if N == 0:\n                return ans.append(num)\n\n            tail_digit = num % 10\n            # using set() to avoid duplicates when K == 0\n            next_digits = set([tail_digit + K, tail_digit - K])\n\n            for next_digit in next_digits:\n                if 0 <= next_digit < 10: \n                    new_num = num * 10 + next_digit\n                    DFS(N-1, new_num)\n\n        for num in range(1, 10):\n            DFS(N-1, num)\n\n        return list(ans)", "class Solution:\n    def numsSameConsecDiff(self, n, k):\n        res = []\n        for i in range(1, 10):\n            neighbors = self.helper(i, k)\n            for neighbor in neighbors:\n                res.append([i, neighbor])\n\n        if n > 2:\n            n -= 2\n            while n > 0:\n                temp = []\n                for sublist in res:\n                    neighbors = self.helper(sublist[-1], k)\n                    for neighbor in neighbors:\n                        temp.append(sublist + [neighbor])\n                n -= 1\n                res = temp\n        for i in range(len(res)):\n            res[i] = int(''.join(str(ele) for ele in res[i]))\n\n\n        return res\n\n    def helper(self, val, k):\n        res = set()\n        if val + k <= 9:\n            res.add(val + k)\n        if val - k >= 0:\n            res.add(val - k)\n        return res", "class Solution:\n    def numsSameConsecDiff(self, N: int, K: int) -> List[int]:\n        \n        def dfs(N, K, digit, rst):\n            if not N: \n                rst.append(int(''.join(map(str, digit)))); return\n            if digit[-1] + K <= 9: \n                dfs(N-1, K, digit + [digit[-1] + K], rst)\n            if digit[-1] - K >= 0: \n                dfs(N-1, K, digit + [digit[-1] - K], rst)\n        \n        if N == 1: return list(range(10))\n        if K == 0: return [int(str(i) * N) for i in range(1, 10)]\n        rst = []\n        for i in range(1, 10):\n            dfs(N-1, K, [i], rst)\n        return rst\n", "class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        def solve(x):\n            s = str(x)\n            if len(s) > 1 and abs(int(s[-1]) - int(s[-2])) != k:\n                return\n            if len(s) == n and abs(int(s[-1]) - int(s[-2])) == k:\n                result.append(x)\n            if len(s) == n:\n                return\n            for i in range(0, 10):\n                solve(x * 10 + i)\n\n        result = []\n        for i in range(1, 10):\n            solve(i)\n        return result\n", "class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        result = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n        \n        for i in range(1, n):\n            temp = list()\n            for r in result:\n                if k == 0:\n                    temp.append(r * 10 + r % 10)\n                else:\n                    back = r % 10\n                    if back - k >= 0:\n                        temp.append(r * 10 + back - k)\n                    if back + k < 10:\n                        temp.append(r * 10 + back + k)\n            result = temp.copy()\n        \n        return result", "class Solution:\n    def numsSameConsecDiff(self, N: int, K: int) -> List[int]:\n        '''\n        dp\u95ee\u9898: dp[i] = dp[i-1] * 10 + dp[i-1][-1] +/- K.\n        \u5176\u4e2ddp[i-1][-1]\u4ee3\u8868dp[i-1]\u7684\u4e2a\u4f4d\u6570, +/- K\u4ee3\u8868\u5bf9K\u7684\u52a0\u51cf.\n        '''\n        dp = list(range(10))\n        for _ in range(N-1):\n            _dp = set()\n            for x in dp:\n                for y in [x % 10 + K, x % 10 - K]:\n                    if x and 0 <= y <= 9:\n                        _dp.add(x * 10 + y)\n            dp = _dp\n        \n        return list(dp)\n", "class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        import math\n        from collections import deque\n        \n        deq = deque([i for i in range(1, 10)])\n        res = []\n\n        while deq:\n            num = deq.popleft()\n\n            if math.pow(10, n-1) <= num < math.pow(10, n): # in n\n                res.append(num)\n            else:\n                targets = [num % 10 - k, num % 10 + k] if k > 0 else [num % 10]\n                for target in targets:\n                    if 0 <= target <= 9:\n                        deq.append(num*10 + target)\n\n        return res\n", "class Solution:\n    def numsSameConsecDiff(self, N: int, K: int) -> List[int]:\n\n        if N == 1:\n            return [i for i in range(10)]\n\n        ans = []\n        def DFS(N, num):\n            # base case\n            if N == 0:\n                return ans.append(num)\n\n            tail_digit = num % 10\n            # using set() to avoid duplicates when K == 0\n            next_digits = set([tail_digit + K, tail_digit - K])\n\n            for next_digit in next_digits:\n                if 0 <= next_digit < 10: \n                    new_num = num * 10 + next_digit\n                    DFS(N-1, new_num)\n\n        for num in range(1, 10):\n            DFS(N-1, num)\n\n        return list(ans)", "import itertools\n\nclass Solution:        \n    def step(self, n, k):\n        d = n % 10\n        b = n * 10\n\n        if k == 0:\n            yield b + d \n        if d < d + k < 10:\n            yield b + d + k\n        if 0 <= d - k < d:\n            yield b + d - k\n\n    def solve(self, nums, n, k):\n        if n == 1:\n            return nums\n        soln = [self.step(x, k) for x in nums]\n        return itertools.chain.from_iterable([self.solve(x, (n - 1), k) for x in soln])\n\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        seed = [x for x in range(1, 10) if x + k < 10 or 0 <= x - k < 10]\n        return list(self.solve(seed, n, k))\n", "class Solution:\n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        @functools.lru_cache(maxsize=128, typed=False)\n        def check(n, k, s):\n            #   s\u8868\u793a\u8d77\u70b9\n            rtv = []\n            if n == 0:\n                return []\n            rtv = []\n            for i in range(10):\n                if abs(i-s)==k:\n                    r1 = check(n-1, k, i)\n                    if r1:\n                        for r in r1:\n                            rtv.append([i] + r)\n                    else:\n                        rtv.append([i])\n                    \n            return rtv\n    \n        rtv = []\n        for i in range(1, 10):\n            r0 = check(n-1, k, i)\n            for r in r0:\n                t = i\n                for c in r:\n                    t = t * 10 + c\n                rtv.append(t)\n        return rtv", "class Solution:\n    def numsSameConsecDiff(self, n, k):\n        d = {}\n        for i in range(10):\n            temp = set()\n            if i + k <= 9:\n                temp.add(i + k)\n            if i - k >= 0:\n                temp.add(i - k)\n            d[i] = list(temp)\n\n\n        res = []\n        for i in range(1, 10):\n            for neighbor in d[i]:\n                res.append([i, neighbor])\n\n        if n > 2:\n            n -= 2\n            while n > 0:\n                temp = []\n                for sublist in res:\n                    for neighbor in d[sublist[-1]]:\n                        temp.append(sublist + [neighbor])\n                n -= 1\n                res = temp\n        for i in range(len(res)):\n            res[i] = int(''.join(str(ele) for ele in res[i]))\n\n\n        return res", "class Solution:\n    def recurse(self, prev_digit: int, remaining:int, k:int) -> List[List[int]]:\n        if remaining == 0:\n            raise Exception()\n        curr_digits = set(filter(lambda d: d>=0 and d<10, [prev_digit+k, prev_digit-k]))\n        ret = []\n        for curr_digit in curr_digits:\n            if remaining > 1:\n                nums = self.recurse(curr_digit, remaining-1, k)\n                for num in nums:\n                    # print('num', num)\n                    new_num = [curr_digit]+num\n                    # print('new_num', new_num)\n                    ret.append(new_num)\n            else:\n                ret.append([curr_digit])\n        \n        # print(prev_digit, ret)\n        return ret\n    \n    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:\n        ret = []\n        for d in range(1, 10):\n            nums = self.recurse(d, n-1, k)\n            for num in nums:\n                new_num = [d]+num\n                ret.append(new_num)\n        ret = list(filter(lambda l: len(l)==n, ret))\n        ret = list(map(lambda l: [str(c) for c in l], ret))\n        return [\\\"\\\".join(num) for num in ret]"]