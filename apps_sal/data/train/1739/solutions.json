["def decodeBits(bits):\n    import re\n    \n    # remove trailing and leading 0's\n    bits = bits.strip('0')\n    \n    # find the least amount of occurrences of either a 0 or 1, and that is the time hop\n    time_unit = min(len(m) for m in re.findall(r'1+|0+', bits))\n    \n    # hop through the bits and translate to morse\n    return bits[::time_unit].replace('111', '-').replace('1','.').replace('0000000','   ').replace('000',' ').replace('0','')\n\ndef decodeMorse(morseCode):\n    return ' '.join(''.join(MORSE_CODE[l] for l in w.split()) for w in morseCode.split('   '))\n", "# add dictionary entry for space\nMORSE_CODE['_'] = ' '\n\ndef decodeBits(bits):\n    # strip extra zeros\n    bits = bits.strip('0')\n    \n    # if no zeros in bits\n    if '0' not in bits:\n        return '.'\n    \n    # check for multiple bits per dot\n    minOnes = min(len(s) for s in bits.split('0') if s)\n    minZeros = min(len(s) for s in bits.split('1') if s)\n    m = min(minOnes, minZeros)\n    \n    # decode bits to morse code\n    return bits.replace('111'*m, '-').replace('0000000'*m, ' _ ').replace('000'*m, ' ').replace('1'*m, '.').replace('0'*m, '')\n\ndef decodeMorse(morseCode):\n    # decode morse code to letters\n    return ''.join(MORSE_CODE[c] for c in morseCode.split())", "from re import findall\n\nMORSE_CODE = {\n    '.-': 'A', '-...': 'B', '-.-.': 'C', '-..': 'D', '.': 'E', '..-.': 'F',\n    '--.': 'G', '....': 'H', '..': 'I', '.---': 'J', '-.-': 'K', '.-..': 'L',\n    '--': 'M', '-.': 'N', '---': 'O', '.--.': 'P', '--.-': 'Q', '.-.': 'R',\n    '...': 'S', '-': 'T', '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X',\n    '-.--': 'Y', '--..': 'Z',\n    '-----': '0', '.----': '1', '..---': '2', '...--': '3', '....-': '4',\n    '.....': '5', '-....': '6', '--...': '7', '---..': '8', '----.': '9',\n    '.-.-.-': '.', '--..--': ',', '..--..': '?', '.----.': \"'\", '-.-.--': '!',\n    '-..-.': '/', '-.--.': '(', '-.--.-': ')', '.-...': '&', '---...': ':',\n    '-.-.-.': ';', '-...-': '=', '.-.-.': '+', '-....-': '-', '..--.-': '_',\n    '.-..-.': '\"', '...-..-': '$', '.--.-.': '@', '...---...': 'SOS'\n}\nMORSE_CODE[\"_\"] = \" \"\n\ndef decodeBits(bitString):\n    bitString = bitString.strip(\"0\")\n    m = len(sorted(findall( \"(1+|0+)\", bitString ), key=len)[0])\n    return bitString.replace('111'*m, '-').replace('000'*m, ' ').replace('1'*m, '.').replace('0'*m, '')\n\ndef decodeMorse(morseCode):\n    print(morseCode)\n    return \"\".join(map(lambda m: MORSE_CODE.get(m,\" \"), morseCode.replace(\"   \",\" _ \" ).split(\" \"))).strip()", "from re import split\ndef decodeBits(bits):\n    unit = min([len(s) for s in split(r'0+',bits.strip('0'))] + [len(s) for s in split(r'1+',bits.strip('0'))  if s != ''])\n    return bits.replace('0'*unit*7,'   ').replace('0'*unit*3,' ').replace('1'*unit*3,'-').replace('1'*unit,'.').replace('0','')\ndef decodeMorse(morseCode):\n    # ToDo: Accept dots, dashes and spaces, return human-readable message\n    return ' '.join(''.join(MORSE_CODE[letter] for letter in word.split(' ')) for word in morseCode.strip().split('   '))\n", "def decodeBits(bits):\n    bits = bits.strip('0')\n    if '0' not in bits:\n        return '.'\n    u = 1\n    while ('0' * u) not in bits.split('1') and ('1' * u) not in bits.split('0'):\n        u += 1\n    return ' '.join([char.replace('1' * 3 * u, '-').replace('1' * u, '.').replace('0', '')\n                     for char in bits.split('0' * 3 * u)])\n\ndef decodeMorse(morseCode):\n    MORSE_CODE[''] = ' '\n    arr = [MORSE_CODE[x] for x in morseCode.strip().split(' ')]\n    return \"\".join(arr).replace('  ', ' ')", "from re import compile\n\nTOKENIZER = compile('(0+)')\n\ndef decodeBits(bits):\n    tokens = TOKENIZER.split(bits.strip('0'))\n    lenDot = min(len(token) for token in tokens)\n    lenDash = 3 * lenDot\n    ret = []\n    for token in tokens:\n        if token[0] == '1':\n            ret.append('.' if len(token) < lenDash else '-')\n        elif len(token) > lenDot:\n            ret.append(' ' if len(token) <= lenDash else '   ')\n    return ''.join(ret)\n\ndef decodeMorse(morseCode):\n    return ' '.join(''.join(MORSE_CODE[c] for c in word.split(' ')) for word in morseCode.strip().split('   '))\n", "def decodeBits(bits):\n    bits = bits.strip('0')\n    time_unit = min(list(map(len, bits.replace('1', ' ').split() + bits.replace('0', ' ').split())))\n    word_sep = '0' * 7 * time_unit\n    char_sep = '0' * 3 * time_unit\n    ones_sep = '0' * 1 * time_unit\n    dash = '1' * 3 * time_unit\n    dot = '1' * 1 * time_unit\n    return bits.replace(dash, '-').replace(dot, '.') \\\n               .replace(word_sep, '   ').replace(char_sep, ' ').replace(ones_sep, '')\n\ndef decodeMorse(morse_code):\n    return ' '.join(''.join(map(MORSE_CODE.get, word.split()))\n                    for word in morse_code.split('   ')).strip()\n", "def decodeBits(bits):\n    mcode = {-1: \"\", -3: \" \", -7: \"   \", 1: \".\", 3: \"-\"}\n    \n    m, b = [], \"\"\n    for bit in bits.strip(\"0\"):\n        if bit == b: m[-1] += 1 if bit==\"1\" else -1\n        else:        m.append(1 if bit==\"1\" else -1)\n        b=bit\n\n    timeunit = min([abs(bb) for bb in m])\n    return \"\".join([mcode[bb/timeunit] for bb in m])\n\ndef decodeMorse(morseCode):\n    return ' '.join(''.join(MORSE_CODE[c] for c in w.split()) for w in morseCode.strip().split('   '))\n", "def decodeBits(bits):\n    unit = min([len(item) for item in bits.strip(\"0\").split('0') if len(item)!=0] + [len(item) for item in bits.strip('0').split('1') if len(item)!=0])\n    #Gets length of ones and zeros after striping of excess 0s (gets unit length)\n    \n    return bits.replace('111'*unit, '-').replace(\"0000000\"*unit,'  ').replace('000'*unit, ' ').replace('1'*unit, '.').replace('0', '')\n    #replaces time length of 1 time unit etx with relivent convertion\n\ndef decodeMorse(morseCode):\n    #replaces dots and dashes with letters\n    return \"\".join([MORSE_CODE.get(letter, \" \") for letter in morseCode.strip().split(\" \")])", "def decodeBits(bits):\n    unit = set([len(item) for item in bits.strip(\"0\").split('0') if len(item)!=0] + [len(item) for item in bits.strip('0').split('1') if len(item)!=0])\n    #Gets length of ones and zeros after striping of excess 0s\n    unit = min(unit) #gets unit length\n    return bits.replace('111'*unit, '-').replace(\"0000000\"*unit,'   ').replace('000'*unit, ' ').replace('1'*unit, '.').replace('0', '')\n\ndef decodeMorse(morseCode):\n    #replaces dots and dashes with letters\n    return \"\".join([MORSE_CODE.get(letter, \" \") for letter in morseCode.strip().replace(\"   \", \"  \").split(\" \")])\n"]