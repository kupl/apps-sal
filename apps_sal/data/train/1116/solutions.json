["from collections import defaultdict \ndef findSubarraySum(arr, n, Sum):  \n \n # Dictionary to store number of subarrays  \n # starting from index zero having   \n # particular value of sum.  \n prevSum = defaultdict(lambda : 0) \n \n res = 0 \n \n # Sum of elements so far.  \n currsum = 0 \n \n for i in range(0, n):   \n \n  # Add current element to sum so far.  \n  currsum += arr[i] \n \n  # If currsum is equal to desired sum,  \n  # then a new subarray is found. So  \n  # increase count of subarrays.  \n  if currsum == Sum:   \n   res += 1 \n \n  # currsum exceeds given sum by currsum  - sum. \n  # Find number of subarrays having   \n  # this sum and exclude those subarrays  \n  # from currsum by increasing count by   \n  # same amount.  \n  if (currsum - Sum) in prevSum: \n   res += prevSum[currsum - Sum] \n   \n \n  # Add currsum value to count of   \n  # different values of sum.  \n  prevSum[currsum] += 1 \n  \n return res \nn=int(input())\nlst=list(map(int,input().split()))\nif(n==1):\n if(lst[0]==0):\n  print(1)\n else:\n  print(0)\nelse:    \n print(findSubarraySum(lst,n,0)) \n", "from collections import Counter\n \nN = int(input())\nA = list(map(int, input().split()))\n \nans = 0\n \nb = [A[0]]\n \nfor i in range(1, N):\n b.append(b[-1]+A[i])\n \ncnt = Counter(b)\ncnt[0] += 1\n \nfor v in cnt.values():\n ans += v*(v-1)//2\n \nprint(ans)", "# # we could probably do N linear searches or something\n# # time limit is 2 seconds which makes sense for O(n^2) or something\n# N = int(input());count = 0\n# arr = list(map(int , input().split()))\n# for i in range(N):\n#     sum_ = arr[i]\n#     if(sum_ == 0): count += 1\n#     for j in range(i + 1,N):\n#         sum_ += arr[j]\n#         if(sum_ == 0): count += 1\n# print(count) #TLE\n# Python3 program to find the number of \n# subarrays with sum exactly equal to k. \nfrom collections import defaultdict \n\n# Function to find number of subarrays \n# with sum exactly equal to k. \ndef findSubarraySum(arr, n, Sum): \n\n # Dictionary to store number of subarrays \n # starting from index zero having \n # particular value of sum. \n prevSum = defaultdict(lambda : 0) \n \n res = 0\n \n # Sum of elements so far. \n currsum = 0\n \n for i in range(0, n): \n \n  # Add current element to sum so far. \n  currsum += arr[i] \n \n  # If currsum is equal to desired sum, \n  # then a new subarray is found. So \n  # increase count of subarrays. \n  if currsum == Sum: \n   res += 1 \n \n  # currsum exceeds given sum by currsum - sum. \n  # Find number of subarrays having \n  # this sum and exclude those subarrays \n  # from currsum by increasing count by \n  # same amount. \n  if (currsum - Sum) in prevSum: \n   res += prevSum[currsum - Sum] \n   \n \n  # Add currsum value to count of \n  # different values of sum. \n  prevSum[currsum] += 1\n \n return res \nn = int(input())\narr = [int(i) for i in input().split()] \nSum = 0\nprint(findSubarraySum(arr, n, Sum)) \n \n# This code is contributed by Rituraj Jain \n\n", "from sys import stdin, stdout\nfrom collections import defaultdict\ndef le():\n return int(stdin.readline())\ndef lt():\n return list(map(int, stdin.readline().split()))\nn=le()\nlst=lt()\nprev=defaultdict(lambda:0)\ns=0\nc=0\nfor i in range(n):\n s+=lst[i]\n if s==0:\n  c+=1\n temp=[]\n if s in prev:\n  c+=prev[s]\n prev[s]+=1\nstdout.write(str(c))", "from sys import stdin\nn = int(stdin.readline())\nd = {}\ncount = sm = 0\nfor num in map(int, stdin.readline().split()):\n sm += num\n if not sm: count += 1\n if sm in d:\n  count += d[sm]\n  d[sm] += 1\n else: d[sm] = 1\nprint(count)", "\ndef countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n \n return sum(v*(v-1) // 2 for v in list(freq.values())) \n\n# Driver code \ntry:\n n=int(input())\n a = list(map(int, input().split()))\n print(countsumzero(a)) \nexcept:\n print(error)\n \n\n\n", "# cook your dish here\ndef countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n \n return sum(v*(v-1) // 2 for v in list(freq.values())) \n\n# Driver code \ntry:\n n=int(input())\n a = list(map(int, input().split()))\n print(countsumzero(a)) \nexcept:\n print(error)\n \n\n\n", "def countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n return sum(v*(v-1) // 2 for v in freq.values())\n\nm = int(input())\na = [int(x) for x in input().split()]\nprint(countsumzero(a))", "# cook your dish here\ndef countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n \n return sum(v*(v-1) // 2 for v in list(freq.values())) \n\n# Driver code \ntry:\n n=int(input())\n a = list(map(int, input().split()))\n print(countsumzero(a)) \nexcept:\n print(error)\n \n\n\n", "# cook your dish here\ndef countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n \n return sum(v*(v-1) // 2 for v in list(freq.values())) \n\n# Driver code \ntry:\n n=int(input())\n a = list(map(int, input().split()))\n print(countsumzero(a)) \nexcept:\n print(error)\n \n\n\n", "# cook your dish here\ndef countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n \n return sum(v*(v-1) // 2 for v in list(freq.values())) \n\n# Driver code \nn=int(input())\na = list(map(int, input().split()))\nprint(countsumzero(a)) \n\n\n\n", "'''\nn=int(input())\na=list(map(int,input().split()))\nsum=0\nc=0\nfor i in range(len(a)):\n    sum+=a[i]\n    #print(sum)\n    if sum==0:\n     c+=1\n     sum=a[i]\nprint(c)\n\n'''\nfrom collections import Counter\nn=int(input())\na=list(map(int,input().split()))\nres=0\n#lst=[a[0]]\nsum=0\nlst=[]\n#print(lst)\n#print(lst[-1])\nfor i in range(n):\n sum+=a[i]\n lst.append(sum)\n#print(lst)\ncount=Counter(lst)\n#print(count[0])\n#print(count.values())\ncount[0]+=1\n#print(count[0])\n#print(count.values())\nfor i in list(count.values()):\n res+=i*(i-1)//2\nprint(res)\n", "'''\nn=int(input())\na=list(map(int,input().split()))\nsum=0\nc=0\nfor i in range(len(a)):\n    sum+=a[i]\n    #print(sum)\n    if sum==0:\n     c+=1\n     sum=a[i]\nprint(c)\n\n'''\nfrom collections import Counter\nn=int(input())\na=list(map(int,input().split()))\nres=0\n#lst=[a[0]]\nsum=0\nlst=[]\n#print(lst)\n#print(lst[-1])\nfor i in range(n):\n sum+=a[i]\n lst.append(sum)\n#print(lst)\ncount=Counter(lst)\n#print(count[0])\n#print(count.values())\ncount[0]+=1\n#print(count[0])\n#print(count.values())\nfor i in list(count.values()):\n res+=i*(i-1)//2\nprint(res)\n", "# cook your dish here\ndef countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n \n return sum(v*(v-1) // 2 for v in list(freq.values())) \n\n# Driver code \nn=int(input())\na = list(map(int, input().split()))\nprint(countsumzero(a)) \n\n\n\n", "# cook your dish here\ndef countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n return sum(v*(v-1) // 2 for v in list(freq.values())) \n\n# Driver code \nn=int(input())\na = list(map(int, input().split()))\nprint(countsumzero(a)) \n\n\n\n", "import collections\nn = int(input())\na = list(map(int, input().split()))\nb = [a[0]]\nfor i in range(1, n):\n b.append(b[i-1]+a[i])\nans = b.count(0)\nd = collections.Counter(b)\nfor i in d.values():\n ans += i*(i-1)//2 \n \nprint(ans)", "def countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n return sum(v*(v-1) // 2 for v in freq.values())\n\nm = int(input())\na = [int(x) for x in input().split()]\nprint(countsumzero(a))", "# cook your dish here\ntry:\n n = int(input())\n a = list(map(int, input().split()))\n  \n sums = {}\n cur = 0\n cnt = 0\n  \n for i in range(n):\n  cur += a[i]\n  \n  if cur == 0:\n   cnt += 1\n  if cur in sums:\n   cnt += sums[cur]\n  \n  sums[cur] = 1 if cur not in sums else sums[cur] + 1\n  \n print(cnt) \nexcept :\n pass", "def countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n return sum(v*(v-1) // 2 for v in list(freq.values())) \n\n# Driver code \nn=int(input())\na = list(map(int, input().split()))\nprint(countsumzero(a)) \n\n\n", "from collections import defaultdict \n\nn=int(input())\na = [int(x) for x in input().split()] \nSum = 0\n\nprevSum = defaultdict(lambda : 0) \n\nres = 0\n\ncurrsum = 0\n\nfor i in range(0, n): \n\n \n currsum += a[i] \n\n if currsum == Sum: \n  res += 1 \n\n if (currsum - Sum) in prevSum: \n  res += prevSum[currsum - Sum] \n\n prevSum[currsum] += 1 \nprint(res)", "def countsumzero(lst):\n prefixsums = [0]\n for x in lst:\n  prefixsums.append(prefixsums[-1] + x)\n freq = {}\n for y in prefixsums:\n  if y in freq:\n   freq[y] += 1\n  else:\n   freq[y] = 1\n return sum(v*(v-1) // 2 for v in freq.values())\n\nm = int(input())\na = [int(x) for x in input().split()]\nprint(countsumzero(a))", "from collections import defaultdict \nn = int(input())\nli = list(int(i) for i in input().split())\n\npre = defaultdict(int) \nans,cur=0,0\nfor i in range(n):\n cur+=li[i]\n if cur==0:\n  ans+=1\n if cur in pre:\n  ans += pre[cur]\n pre[cur]+=1\nprint(ans)", "N = int(input())\nA= list(map(int,input().split(' ')))\ns = 0\nprefixsums = [0]\nfor x in A:\n prefixsums.append(prefixsums[-1] + x)\nfreq = {}\nfor y in prefixsums:\n if y in freq:\n  freq[y] += 1\n else:\n  freq[y] = 1\nprint(sum(v*(v-1) // 2 for v in freq.values()))", "from collections import defaultdict \ndef SubArr(arr, n):\n ps = defaultdict(lambda : 0) \n res = 0 \n cs = 0 \n for i in range(0, n):\n  cs += arr[i] \n  if cs == 0:   \n   res += 1\n  if cs in ps: \n   res += ps[cs] \n  ps[cs] += 1 \n  \n return res \ntry:\n n=int(input())\n arr=list(map(int,input().split()))\n ans=SubArr(arr,n)\n print(ans)\nexcept EOFError:\n pass\n"]