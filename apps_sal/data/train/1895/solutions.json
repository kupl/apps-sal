["class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         def win(board,w):\n             for i in range(3):\n                 if board[i] == w*3:\n                     return True\n             for i in range(3):\n                 if board[0][i] == w and board[1][i] == w and board[2][i] == w:\n                     return True\n             sign = True\n             for i in range(3):\n                 if board[i][i] != w:\n                     sign = False\n             if sign:\n                 return True\n             \n             sign = True\n             for i in range(3):\n                 if board[i][2-i] != w:\n                     sign = False\n             if sign:\n                 return True\n         \n         Xnum = 0\n         Onum = 0\n         for ss in board:\n             for s in ss:\n                 if s == 'X':\n                     Xnum += 1\n                 if s == 'O':\n                     Onum += 1\n         if win(board,'X'):\n             if Xnum == Onum + 1:\n                 return True\n             else:\n                 return False\n         if win(board,\"O\"):\n             if Xnum == Onum:\n                 return True\n             else:\n                 return False\n         if Xnum == Onum or Xnum == Onum + 1:\n             return True\n         else:\n             return False\n", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         xoDict = {\"X\":[],\"O\":[],\" \":[]}\n         \n         for i in range(0, 3):\n             for j in range(0,3):\n                 if board[i][j] == \"X\":\n                     xoDict[\"X\"] += [i,j],\n                 elif board[i][j] == \"O\":\n                     xoDict[\"O\"] += [i,j],\n                 elif board[i][j] == \" \":\n                     xoDict[\" \"] += [i,j],\n                     \n         if len(xoDict[\"O\"])>len(xoDict[\"X\"]):\n             return False\n         \n         if len(xoDict[\"X\"]) - len(xoDict[\"O\"]) >1:\n             return False\n         \n         xwin = self.check(board, \"X\")\n         owin = self.check(board, \"O\")\n         \n         if xwin and owin:\n             return False\n         \n         if xwin and len(xoDict[\"X\"]) == len(xoDict[\"O\"]):\n             return False\n         if owin and len(xoDict[\"X\"]) > len(xoDict[\"O\"]):\n             return False\n         \n         return True\n     \n     def check(self, board, char):\n         for i in range(0,3):\n             if board[i][0] == char and board[i][1] ==char and board[i][2] == char:\n                 return True\n             \n         for i in range(0,3):\n             if board[0][i] == char and board[1][i] ==char and board[2][i] == char:\n                 return True\n             \n         if board[0][0] == char and board[1][1] ==char and board[2][2] == char:\n             return True\n         \n         if board[0][2] == char and board[1][1] ==char and board[2][0] == char:\n             return True\n         \n         return False\n         \n     \n     \n                     \n         \n", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         cross = 0\n         circle = 0\n         for i in range(3):\n             for j in range(3):\n                 if board[i][j] == 'X':\n                     cross += 1\n                 if board[i][j] == 'O':\n                     circle += 1\n         if cross < circle or cross - circle > 1:\n             return False\n         cross_winning = 0\n         circle_winning = 0\n         for i in range(3):\n             if board[i][0] == board[i][1] == board[i][2]:\n                 if board[i][0] == 'X':\n                     cross_winning += 1\n                 elif board[i][0] == 'O':\n                     circle_winning += 1\n             if board[0][i] == board[1][i] == board[2][i]:\n                 if board[0][i] == 'X':\n                     cross_winning += 1\n                 elif board[0][i] == 'O':\n                     circle_winning += 1\n         if board[0][0] == board[1][1] == board[2][2]:\n             if board[0][0] == 'X':\n                 cross_winning += 1\n             elif board[0][0] == 'O':\n                 circle_winning += 1\n         if board[0][2] == board[1][1] == board[2][0]:\n             if board[0][2] == 'X':\n                 cross_winning += 1\n             elif board[0][2] == 'O':\n                 circle_winning += 1\n                 \n         if cross_winning > 0 and circle_winning > 0:\n             return False\n         if cross_winning > 0 and cross <= circle:\n             return False\n         if circle_winning > 0 and circle < cross:\n             return False\n         return True", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         num_X = 0\n         num_O = 0\n         for i in range(3):\n             for j in range(3):\n                 if board[i][j] == 'X':\n                     num_X += 1\n                 elif board[i][j] == 'O':\n                     num_O += 1\n         if num_X <num_O or num_X > num_O + 1:\n             return False\n         \n         def win(board, total_X, total_O):\n             for i in range(3):\n                 num_X = 0; num_O = 0\n                 for j in range(3):\n                     if board[i][j] == 'X':\n                         num_X += 1\n                     elif board[i][j] == 'O':\n                         num_O += 1\n                 if num_X == 3:\n                     return total_X > total_O\n                 if num_O == 3:\n                     return total_X == total_O\n             for j in range(3):\n                 num_X = 0; num_O = 0\n                 for i in range(3):\n                     if board[i][j] == 'X':\n                         num_X += 1\n                     elif board[i][j] == 'O':\n                         num_O += 1\n                 if num_X == 3:\n                     return total_X > total_O\n                 if num_O == 3:\n                     return total_X == total_O\n             num_X = 0; num_O = 0\n             for i in range(3):\n                 if board[i][i] == 'X':\n                     num_X += 1\n                 elif board[i][i] == 'O':\n                     num_O += 1\n             if num_X == 3:\n                 return total_X > total_O\n             if num_O == 3:\n                 return total_X == total_O\n             num_X = 0; num_O = 0\n             for i in range(3):\n                 if board[i][2-i] == 'X':\n                     num_X += 1\n                 elif board[i][2-i] == 'O':\n                     num_O += 1\n             if num_X == 3:\n                 return total_X > total_O\n             if num_O == 3:\n                 return total_X == total_O\n             return True\n     \n         return win(board, num_X, num_O)", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         O, X = 0, 0\n         for r in board:\n             for c in r:\n                 if c == 'O':\n                     O += 1\n                 elif c == 'X':\n                     X += 1\n         if O - X > 0:\n             return False\n         if X - O > 1:\n             return False\n         if X - O == 0:\n             for r in board:\n                 if r == 'XXX':\n                     return False\n             for c in range(2):\n                 if board[0][c] == board[1][c] == board[2][c] == 'X':\n                     return False\n             if board[0][0] == board[1][1] == board[2][2] == 'X':\n                 return False\n             if board[2][0] == board[1][1] == board[0][2] == 'X':\n                 return False\n         else:\n             for r in board:\n                 if r == 'OOO':\n                     return False\n             for c in range(2):\n                 if board[0][c] == board[1][c] == board[2][c] == 'O':\n                     return False\n             if board[0][0] == board[1][1] == board[2][2] == 'O':\n                 return False\n             if board[2][0] == board[1][1] == board[0][2] == 'O':\n                 return False\n         \n         return True", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         O, X = 0, 0\n         for r in board:\n             for c in r:\n                 if c == 'O':\n                     O += 1\n                 elif c == 'X':\n                     X += 1\n         if O - X > 0:\n             return False\n         if X - O > 1:\n             return False\n         for c in range(2):\n             if board[0][c] == 'X' and board[1][c] == 'X' and board[2][c] == 'X':\n                 return X - O == 1\n             if board[c][0] == 'X' and board[c][1] == 'X' and board[c][2] == 'X':\n                 return X - O == 1\n         if board[0][0] == 'X' and board[1][1] == 'X' and board[2][2] == 'X':\n             return X - O == 1\n         if board[2][0] == 'X' and board[1][1] == 'X' and board[0][2] == 'X':\n             return X - O == 1\n         for c in range(2):\n             if board[0][c] == 'O' and board[1][c] == 'O' and board[2][c] == 'O':\n                 return X - O == 0\n             if board[c][0] == 'O' and board[c][1] == 'O' and board[c][2] == 'O':\n                 return X - O == 0\n         if board[0][0] == 'O' and board[1][1] == 'O' and board[2][2] == 'O':\n             return X - O == 0\n         if board[2][0] == 'O' and board[1][1] == 'O' and board[0][2] == 'O':\n             return X - O == 0\n         \n         return True", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         targetState = tuple(board)\n         \n         startingState = ('   ', '   ', '   ')\n         \n         stateStack = [startingState]\n         visited = set()\n         \n         while len(stateStack) > 0:\n             curState = stateStack.pop()\n             \n             if curState == targetState:\n                 return True\n                 \n             if curState in visited:\n                 continue\n                 \n             visited.add(curState)\n             \n             # Has a player won, thus ending the game?\n             if any(r == 'XXX' for r in curState) or any(r == 'OOO' for r in curState) \\\n                or any(''.join([curState[i][j] for i in range(3)]) == 'XXX' for j in range(3)) or any(''.join([curState[i][j] for i in range(3)]) == 'OOO' for j in range(3)) \\\n                or (curState[0][0] == curState[1][1] == curState[2][2] == 'X') \\\n                or (curState[0][0] == curState[1][1] == curState[2][2] == 'O') \\\n                or (curState[0][2] == curState[1][1] == curState[2][0] == 'X') \\\n                or (curState[0][2] == curState[1][1] == curState[2][0] == 'O'):\n                continue\n             \n             # What moves are there that get closer to the target state?\n             moves = set()\n             for i,row in enumerate(curState):\n                 for j,cell in enumerate(row):\n                     if cell == ' ' and cell != targetState[i][j]:\n                         moves.add((i,j,targetState[i][j]))\n                         \n             # Can only add X's and O's\n             if len(moves) == 0:\n                 continue\n                 \n             # Now detect *valid* moves; whose turn is it? \n             numX = sum(r.count('X') for r in curState)\n             numO = sum(r.count('O') for r in curState)\n             \n             if numX == numO:\n                 curTurn = 'X'\n             else:\n                 curTurn = 'O'\n                 \n             # Make each valid move\n             for i,j,symbol in moves:\n                 if symbol != curTurn:\n                     continue\n                 # Valid move; spawn a new board state\n                 newState = [curState[t] for t in range(3)]\n                 newState[i] = curState[i][:j] + curTurn + curState[i][j+1:]\n                 stateStack.append(tuple(newState))\n                 \n         return False", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         x_count, o_count = 0, 0\n         # Count number of X and O\n         for string in board:\n             for c in string:\n                 if c == \"X\":\n                     x_count += 1\n                 if c == \"O\":\n                     o_count += 1\n         # If number of X is two more than or less than that of O, return False\n         if x_count - o_count >= 2 or x_count - o_count < 0:\n             return False\n \n         # Check winner, we can only have one winner. To check winner,\n         # there are total 8 combinations.\n         x_win = 0\n         o_win = 0\n         if board[0] == 'XXX' or board[1] == 'XXX' or board[2] == 'XXX':\n             x_win += 1\n         if board[0] == 'OOO' or board[1] == 'OOO' or board[2] == 'OOO':\n             o_win += 1\n         if board[0][0] + board[1][0] + board[2][0] == 'XXX' or \\\n                 board[0][1] + board[1][1] + board[2][1] == 'XXX' or \\\n                 board[0][2] + board[1][2] + board[2][2] == 'XXX':\n             x_win += 1\n         if board[0][0] + board[1][0] + board[2][0] == 'OOO' or \\\n                 board[0][1] + board[1][1] + board[2][1] == 'OOO' or \\\n                 board[0][2] + board[1][2] + board[2][2] == 'OOO':\n             o_win += 1\n         if board[0][0] + board[1][1] + board[2][2] == 'XXX' or \\\n                 board[2][0] + board[1][1] + board[0][2] == 'XXX':\n             x_win += 1\n         if board[0][0] + board[1][1] + board[2][2] == 'OOO' or \\\n                 board[2][0] + board[1][1] + board[0][2] == 'OOO':\n             o_win += 1\n \n         if x_win == 1 and o_win == 1:\n             return False\n         if x_win == 1 and x_count - o_count != 1 or \\\n             o_win == 1 and o_count != x_count:\n             return False\n         return True", "class Solution:   \n     def isWin(self, board, c):\n         for i in range(3):  # Row check\n             if board[0][i] == c and board[1][i] == c and board[2][i] == c:\n                 return True\n         for i in range(3):  # Column check\n             if board[i][0] == c and board[i][1] == c and board[i][2] == c:\n                 return True\n         if board[0][0] == c and board[1][1] == c and board[2][2] == c or \\\n                 board[0][2] == c and board[1][1] == c and board[2][0] == c:  # Diagonal check\n             return True\n         \n         return False\n     \n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"               \n         o_cnt = 0\n         x_cnt = 0\n         for i in range(3):\n             for j in range(3):\n                 x_cnt += 1 if board[i][j] == 'X' else 0\n                 o_cnt += 1 if board[i][j] == 'O' else 0\n                 \n         if o_cnt > x_cnt or x_cnt > o_cnt + 1:\n             return False\n         #print(o_cnt,x_cnt,self.isWin(board, 'X'))\n         if o_cnt == x_cnt and self.isWin(board, 'X') or x_cnt == o_cnt + 1 and self.isWin(board, 'O'):\n             return False\n         \n         \n         \n         \n         return True", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         O, X = 0, 0\n         for r in board:\n             for c in r:\n                 if c == 'O':\n                     O += 1\n                 elif c == 'X':\n                     X += 1\n         if O - X > 0:\n             return False\n         if X - O > 1:\n             return False\n         for c in range(2):\n             if board[0][c] == 'X' and board[1][c] == 'X' and board[2][c] == 'X':\n                 return X - O == 1\n             if board[c] == 'XXX': #board[c][0] == 'X' and board[c][1] == 'X' and board[c][2] == 'X':\n                 return X - O == 1\n         if board[0][0] == 'X' and board[1][1] == 'X' and board[2][2] == 'X':\n             return X - O == 1\n         if board[2][0] == 'X' and board[1][1] == 'X' and board[0][2] == 'X':\n             return X - O == 1\n         for c in range(2):\n             if board[0][c] == 'O' and board[1][c] == 'O' and board[2][c] == 'O':\n                 return X - O == 0\n             if board[c] == 'OOO': #board[c][0] == 'O' and board[c][1] == 'O' and board[c][2] == 'O':\n                 return X - O == 0\n         if board[0][0] == 'O' and board[1][1] == 'O' and board[2][2] == 'O':\n             return X - O == 0\n         if board[2][0] == 'O' and board[1][1] == 'O' and board[0][2] == 'O':\n             return X - O == 0\n         \n         return True", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         def Xwin(board):\n             for r in range(2):\n                 if board[r] == 'XXX':\n                     return 1\n                 if board[r] == 'OOO':\n                     return -1\n                 if board[0][r] == 'X' and board[1][r] == 'X' and board[2][r] == 'X':\n                     return 1\n                 if board[0][r] == 'O' and board[1][r] == 'O' and board[2][r] == 'O':\n                     return -1\n             if board[0][0] == 'X' and board[1][1] == 'X' and board[2][2] == 'X':\n                 return 1\n             if board[2][0] == 'X' and board[1][1] == 'X' and board[0][2] == 'X':\n                 return 1\n             if board[0][0] == 'O' and board[1][1] == 'O' and board[2][2] == 'O':\n                 return -1\n             if board[2][0] == 'O' and board[1][1] == 'O' and board[0][2] == 'O':\n                 return -1\n             return 0\n         O, X = 0, 0\n         for r in board:\n             for c in r:\n                 if c == 'O':\n                     O += 1\n                 elif c == 'X':\n                     X += 1\n         if O - X > 0:\n             return False\n         if X - O > 1:\n             return False\n         winner = Xwin(board)\n         if winner == 1:\n             return True if X - O == 1 else False\n         elif winner == -1:\n             return True if X - O == 0 else False\n         return True", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         x = 0\n         o = 0\n         win_o = 0\n         win_x = 0\n         for i in range(3):\n             for j in range(3):\n                 if board[i][j] == 'X':\n                     x += 1\n                 elif board[i][j] == 'O':\n                     o += 1\n             if board[i] == 'XXX': \n                 win_x += 1 \n             elif board[i] == 'OOO': \n                 win_o += 1\n             if board[0][i] == board[1][i] == board[2][i]:\n                 if board[0][i] == 'X':\n                     win_x += 1\n                 elif board[0][i] == 'O':\n                     win_o += 1\n \n         if board[0][0] == board[1][1] == board[2][2]:\n             if board[0][0] == 'O':\n                 win_o += 1\n             elif board[0][0] == 'X':\n                 win_x += 1\n         if board[2][0] == board[1][1] == board[0][2]:\n             if board[2][0] == 'O':\n                 win_o += 1\n             elif board[2][0] == 'X':\n                 win_x += 1\n \n         if x > (o + 1) or x < o or (win_o > 0 and win_x > 0):\n             return False\n         \n         if win_x > 0 and x == o:\n             return False\n         \n         if win_o > 0 and x > o:\n             return False\n \n         return True\n                     \n", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         valid_X,valid_O = 0,0\n         cnt_X, cnt_O = 0,0\n         # for i in range (3):\n         #     if board[i] == 'OOO' or board[i] =='XXX':\n         #         valid_row += 1\n         #     cnt_X += board[i].count('X')\n         #     cnt_O += board[i].count('O')\n         # sum_row = sum(valid_row)\n         for row in board:\n             if row == 'XXX':\n                 valid_X += 1\n             elif row == 'OOO':\n                 valid_O += 1\n             cnt_X += row.count('X')\n             cnt_O += row.count('O')\n             \n         a,b,c = board\n         for col in zip(a,b,c):\n             if col == 'XXX':\n                 valid_X += 1\n             elif col == 'OOO':\n                 valid_O += 1\n         if board[1][1] != ' ':   \n             if board[0][0] == board[2][2] == board[1][1]:\n                 if board[1][1] == 'X':\n                     valid_X += 1\n                 else:\n                     valid_O += 1\n             \n             if board[2][0] == board[0][2] == board[1][1]:\n                 if board[1][1] == 'X':\n                     valid_X += 1\n                 else:\n                     valid_O += 1\n             \n         if valid_X + valid_O > 1:\n             return False\n         if valid_X:\n             if cnt_X - cnt_O != 1:\n                 return False\n         elif valid_O:\n             if cnt_X != cnt_O:\n                 return False\n         else:\n             if not (0 <= cnt_X - cnt_O <= 1):\n                 return False\n         return True", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         def Xwin(board):\n             for r in range(2):\n                 if board[r] == 'XXX':\n                     return 1\n                 if board[r] == 'OOO':\n                     return -1\n                 if board[0][r] == 'X' and board[1][r] == 'X' and board[2][r] == 'X':\n                     return 1\n                 if board[0][r] == 'O' and board[1][r] == 'O' and board[2][r] == 'O':\n                     return -1\n             if board[0][0] == 'X' and board[1][1] == 'X' and board[2][2] == 'X':\n                 return 1\n             if board[2][0] == 'X' and board[1][1] == 'X' and board[0][2] == 'X':\n                 return 1\n             if board[0][0] == 'O' and board[1][1] == 'O' and board[2][2] == 'O':\n                 return -1\n             if board[2][0] == 'O' and board[1][1] == 'O' and board[0][2] == 'O':\n                 return -1\n             return 0\n         O, X = 0, 0\n         for r in board:\n             for c in r:\n                 if c == 'O':\n                     O += 1\n                 elif c == 'X':\n                     X += 1\n         if O - X > 0:\n             return False\n         if X - O > 1:\n             return False\n         winner = Xwin(board)\n         if winner == 1:\n             return True if X - O == 1 else False\n         elif winner == -1:\n             return True if X - O == 0 else False\n         return True", "class Solution:\n     def playerWon(self, board, player):\n         for i in range(3):\n             if board[0][i] == board[1][i] == board[2][i] == player:\n                 return True\n         for i in range(3):\n             if board[i][0] == board[i][1] == board[i][2] == player:\n                 return True\n         if board[0][0] == board[1][1] == board [2][2] == player or\\\n         board[0][2] == board[1][1] == board[2][0] == player:\n             return True\n         return False\n \n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         count_x = sum(b.count(\"X\") for b in board)\n         count_o = sum(b.count(\"O\") for b in board)\n         if count_x - count_o > 1 or count_x - count_o < 0:\n             return False\n         if self.playerWon(board, \"X\") and count_x - count_o != 1:\n             return False\n         if self.playerWon(board, \"O\") and count_x - count_o != 0:\n             return False\n         return True", "class Solution:\n     def validTicTacToe(self, board):\n         \"\"\"\n         :type board: List[str]\n         :rtype: bool\n         \"\"\"\n         o_cnt = 0\n         x_cnt = 0\n \n         bingo_x = 0\n         bingo_o = 0\n                 \n         for i in range(3):\n             if board[i] == 'O'*3:\n                 bingo_o += 1\n             if board[i] == 'X'*3:\n                 bingo_x += 1\n                 \n             if board[0][i] == board[1][i] == board[2][i]:\n                 if board[0][i] == 'O':\n                     bingo_o += 1\n                 if board[0][i] == 'X':\n                     bingo_x += 1\n             \n             for j in range(3):\n                 if board[i][j] == 'O':\n                     o_cnt += 1\n                 elif board[i][j] == 'X':\n                     x_cnt += 1\n         \n         if x_cnt < o_cnt:\n             return False\n         elif x_cnt - o_cnt > 1:\n             return False\n         \n         if  board[1][1] == board[0][2] == board[2][0]:\n             if board[1][1] == 'O':\n                 bingo_o += 1\n             elif board[1][1] == 'X':\n                 bingo_x += 1\n \n         if board[0][0] == board[1][1] == board[2][2]:\n             if board[0][0] == 'O':\n                 bingo_o += 1\n             elif board[0][0] == 'X':\n                 bingo_x += 1\n     \n         if bingo_x >= 1 and bingo_o >= 1:\n             return False\n \n         if bingo_x >= 1 :\n             return x_cnt == (o_cnt + 1)\n         elif bingo_o >= 1:\n             return x_cnt == o_cnt\n             \n         return True"]