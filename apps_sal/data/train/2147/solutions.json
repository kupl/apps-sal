["n,r1,r2,r3,D = map(int,input().split())\n\nstate = [0,0] # after odd number of 2 (1st), or not (2nd)\n\na = list(map(int,input().split()))\n\n# First element\n\n# Choosing P~P + A\n\nstate[0] = r1 * a[0] + r3\n\n# Choosing L + P later or all P\n\nstate[1] = min(r2 + r1 + D, r1 * (a[0] + 2) + D)\n\n# Second to Second Last element\n\nfor i in range(1,n-1):\n    newState = [-1,-1]\n    newState[0] = min(state[1] + D + r1 * a[i] + r3, state[0] + r1 * a[i] + r3,\n                        state[1] + r2 + r1 + D, state[1] + r1 * (a[i] + 2) + D)\n    newState[1] = min(state[0] + r2 + r1 + D, state[0] + r1 * (a[i] + 2) + D)\n    state = newState\n\n# Last Element\n\nans = min(state[0] + r1 * a[-1] + r3, state[0] + 2 * D + r2 + r1, state[0] + 2 * D + r1 * (a[-1] + 2),\n            state[1] + r1 * a[-1] + r3, state[1] + r2 + r1 + D, state[1] + r1 * (a[-1] + 2) + D)\n\nprint(ans + D * (n-1))", "n,r1,r2,r3,d=map(int,input().split())\na=list(map(int,input().split()))\nif 2*r1<r3:\n  save=[r3-2*r1]*n\nelse:\n  save=[0]*n\nfor i in range(n):\n  save[i]=max(save[i],a[i]*r1+r3-r2-r1)\nans=(n-1)*d+sum(a)*r1+n*r3\ndp=[0,0]\nfor i in range(n):\n  dp0=dp[1]\n  dp1=dp[1]\n  if i+1<n and save[i]+save[i+1]>2*d:\n    dp1=max(dp1,dp[0]+save[i]+save[i+1]-2*d)\n  if i==n-1:\n    dp1=max(dp1,dp[0]+save[i]-2*d)\n  if i==n-2:\n    dp0=max(dp0,dp[0]+save[i]-d)\n  dp1=max(dp1,dp0)\n  dp=[dp0,dp1]\nprint(ans-max(dp0,dp1))", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn, r1, r2, r3, d = mints()\n\ts = min(r1,r3)\n\tr2s = r2 + s\n\ta = list(mints())\n\tdp = [1<<63]*n#[[int(9e18)]*n for i in range(3)]\n\tdp[n-1] = min(s*a[n-1] + r3, d*2 + min(r2s, s*(a[n-1]+2)))\n\t#print(s*a[n-2] + r3 + d + dp[n-1], min(r2s, s*(a[n-1]+2)) + min(r2s, s*(a[n-2]+2)) + d*3, min(r2s, s*(a[n-2]+2)) + d + s*a[n-1] + r3 + d)\n\tdp[n-2] = min(s*a[n-2] + r3 + d + dp[n-1], min(r2s, s*(a[n-1]+2)) + min(r2s, s*(a[n-2]+2)) + d*3)\n\tdp[n-2] = min(dp[n-2], min(r2s, s*(a[n-2] + 2)) + d + s*a[n-1] + r3 + d)\n\tfor i in range(n-3,-1,-1):\n\t\tdd = s*a[i] + r3 + d + dp[i+1]\n\t\tx = min(s*a[i] + r3, min(r2s, s*(a[i]+2))) + min(s*a[i+1] + r3, min(r2s, s*(a[i+1]+2)))\n\t\t#print(dd, x + dp[i+2] + d*4)\n\t\tdp[i] = min(dd, x + dp[i+2] + d*4)\n\t#print(dp)\n\tprint(dp[0])\n\nsolve()\n", "import sys\nreadline = sys.stdin.readline\n\nINF = 10**18\nN, r1, r2, r3, d = map(int, readline().split())\nA = list(map(int, readline().split()))\n\ndp1 = [INF]*(N+1)\ndp2 = [INF]*(N+1)\ndp1[0] = -d\ndp2 = -d\n\nmj = INF\nrr = r1+r2\n\nC = [0]*(N+1)\nfor i in range(N):\n    a = A[i]\n    C[i+1] = min(rr, (a+2)*r1)\nCC = C[:]\nfor i in range(1, N+1):\n    CC[i] += CC[i-1]\nfor i in range(1, N+1):\n    a = A[i-1]\n    dp1[i] = dp2 + d + C[i]\n    dp2 = min(dp2+d+r1*a+r3, CC[i] + 3*d*i + mj)\n    mj = min(mj, dp1[i]-3*i*d-CC[i])\n\nans = min(dp2, 2*d + dp1[-1])\nans = min(ans, dp1[N-1] + 3*d + C[N])\nzz = min(r1*A[-1]+r3, 2*d+min(rr, (A[-1]+2)*r1))\n\nfor i in range(1, N):\n    ans = min(ans, dp1[i] + 2*(N-i)*d + zz + CC[N-1] - CC[i])\n\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\nn,r1,r2,r3,d=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nDP=[1<<60]*n\nDP2=[1<<60]*n\nDP.append(0)\nDP.append(0)\n\nfor i in range(n):\n    DP[i]=min(DP[i],DP[i-1]+r1*A[i]+r3+d)\n\n    if i>=1:\n        DP2[i]=min(DP2[i],DP[i-2]+min(r1*(A[i-1]+1),r2)+min(r1*(A[i]+1),r2)+r1*2+d*4)\n        DP2[i]=min(DP2[i],DP2[i-1]+min(r1*(A[i]+1),r2)+r1+d*3)\n        \n        DP[i]=min(DP[i],DP2[i])\n\nANS=DP[n-1]-d\n\nlast=r1*A[n-1]+r3\n\nfor i in range(1,n):\n    last+=d*2\n    last+=min(r1*(A[n-1-i]+1),r2)+r1\n\n    ANS=min(ANS,DP[n-2-i]+last)\n\nprint(ANS)\n\n"]