["class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        else:\n            # nums = sorted(nums)\n            nums.sort()\n            threeZero = nums[-1] - nums[3]\n            twoOne = nums[-2] - nums[2]\n            oneTwo = nums[-3] - nums[1]\n            zeroThree = nums[-4] - nums[0]\n            return min(threeZero,twoOne,oneTwo,zeroThree)", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        nums.sort()\n        i = 3\n        j = n - 1\n        if n <= 4:\n            return 0\n        ans = float('inf')\n        while i >= 0 and j >= 0:\n            ans = min(ans,abs(nums[i] - nums[j]))\n            i -= 1\n            j -= 1\n        return ans", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        a = nums\n        if len(a) <= 4:\n            return 0\n        a.sort()\n        print(a)\n        return min(a[-1] - a[3], a[-2] - a[2], a[-3] - a[1], a[-4] - a[0])", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        #0,1,4,5,10\n        N = len(nums)-1\n        if N < 3:\n            return 0\n        minVal = 2**32\n        nums.sort()\n        \n        for i in range(4):\n            minVal = min(minVal, nums[N-3+i]-nums[i])\n            \n        return minVal", "class Solution:\n    # don't even sort - YOU READ IT!!!!\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) < 5:\n            return 0\n        \n        max4 = max3 = max2 = max1 = -float('inf')\n        min4 = min3 = min2 = min1 = float('inf')\n\n        for i in nums:\n            if i > max1: \n                max4 = max3\n                max3 = max2\n                max2 = max1\n                max1 = i\n            elif i > max2 and i <= max1:\n                max4 = max3\n                max3 = max2\n                max2 = i\n            elif i > max3 and i <= max2:\n                max4 = max3\n                max3 = i\n            elif i > max4 and i <= max3:\n                max4 = i\n                \n            if i < min1: \n                min4 = min3\n                min3 = min2\n                min2 = min1\n                min1 = i\n            elif i < min2 and i >= min1:\n                min4 = min3\n                min3 = min2\n                min2 = i\n            elif i < min3 and i >= min2:\n                min4 = min3\n                min3 = i\n            elif i < min4 and i >= min3:\n                min4 = i\n            #print(str([min1, min2, min3, min4]))\n            #print(str([max4, max3, max2, max1]))\n        \n        smallest_diff = max4 - min1\n        diff = max3 - min2\n        if smallest_diff > diff:\n            smallest_diff = diff\n        diff = max2 - min3\n        if smallest_diff > diff:\n            smallest_diff = diff\n        diff = max1 - min4\n        if smallest_diff > diff:\n            smallest_diff = diff\n        return smallest_diff\n    '''\n    #original submission\n    def minDifference(self, nums: List[int]) -> int:\n\n        if len(nums) < 5: \n            return 0\n        \n        a = sorted(nums)\n        \n        H = len(nums) - 4\n        L = 0\n        lowest_diff = None\n        for i in range(4):\n            diff = a[H] - a[L]\n            if lowest_diff == None or lowest_diff > diff:\n                lowest_diff = diff\n            H += 1\n            L += 1\n        \n        return lowest_diff\n    '''\n    '''\n    # faster and cleaner - same as original solution\n    def minDifference(self, nums: List[int]) -> int:\n\n        if len(nums) < 5: \n            return 0\n        \n        nums = sorted(nums)\n        \n        N = len(nums)\n        lowest_diff = None\n        for i in range(4):\n            diff = nums[N-(4-i)] - nums[i]\n            if lowest_diff == None or lowest_diff > diff:\n                lowest_diff = diff\n        \n        return lowest_diff\n    '''\n    '''\n    #original attempt - sort into a sort of binary search\n    def minDifference(self, nums: List[int]) -> int:\n        \n        N = len(nums)\n        \n        # any array of length 4 or less can have all elements mapped to same value\n        if len(nums) < 5: \n            return 0\n        \n        # sort \n        a = sorted(nums)\n        \n        # compare 'new' low/highs to an updated median\n        L = 0\n        H = len(nums) - 1\n        # counts for those remapped from each side\n        Lc = 0\n        Hc = 0\n        for i in range(3):\n            m = int((L + H + 2)/2)\n            M = a[m]\n            low = a[L]\n            high = a[H]\n            lowDiff = M - low\n            highDiff = high - M\n            # implies we should set the lowest value to the final median\n            if lowDiff > highDiff:\n                L += 1\n                Lc += 1\n            # implies we should set the highest value to the final median\n            elif lowDiff < highDiff:\n                H -= 1\n                Hc += 1\n            # implies the differences are the same - pick the side with a higher count\n            else:\n                if Hc > Lc:\n                    H -= 1\n                    Hc += 1\n                else:\n                    L += 1\n                    Lc += 1\n                    \n        return a[H] - a[L]\n    '''", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        nums.sort()\n        i = 3\n        j = n - 1\n        ans = float('inf')\n        if n <= 4:\n            return 0\n        while i >= 0 and j >= 0:\n            ans = min(ans,abs(nums[i] - nums[j]))\n            i -= 1\n            j -= 1\n        return ans", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        nums.sort()\n        return min(\n            nums[-1] - nums[3],\n            nums[-2] - nums[2],\n            nums[-3] - nums[1],\n            nums[-4] - nums[0],\n        )", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(x - y for x, y in zip(nums[-4:], nums[:4]))", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        elif len(nums) == 5:\n            nums_sorted = sorted(nums)\n            diff = []\n            for i in range(1, len(nums)):\n                diff.append(nums_sorted[i] - nums_sorted[i-1])\n            return min(diff)\n        else:\n            largest_four = []\n            smallest_four = []\n            for n in nums:\n                if len(largest_four) < 4:\n                    heapq.heappush(largest_four, n)\n                    heapq.heappush(smallest_four, -n)\n                else:\n                    heapq.heappushpop(largest_four, n)\n                    heapq.heappushpop(smallest_four, -n)\n            smallest_four = sorted([-x for x in smallest_four])\n            largest_four = sorted(largest_four)\n\n            diff_arr = [largest_four[0] - smallest_four[0],\n                        largest_four[3] - smallest_four[3],\n                        largest_four[1] - smallest_four[1],\n                        largest_four[2] - smallest_four[2]]\n\n        return min(diff_arr)\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        \n        if n<=3:\n            return 0\n        \n        nums.sort()\n        return min(nums[n-4+i]-nums[i] for i in range(4))", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = float('inf')\n        nums.sort()\n        if n <= 4:\n            return 0\n        i = 3\n        j = n - 1\n        \n        while i >= 0 and j >= 0:\n            ans = min(ans,abs(nums[j] - nums[i]))\n            i -= 1\n            j -= 1\n        return ans", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        max_3 = sorted(nums[:4], reverse=True)\n        min_3 = sorted(nums[:4])\n        for i in range(4, len(nums)):\n            max_3.append(nums[i])\n            max_3.sort(reverse=True)\n            max_3.pop()\n            min_3.append(nums[i])\n            min_3.sort()\n            min_3.pop()\n        return min([max_3[i] - min_3[3 - i] for i in range(4)])", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 5: return 0\n        nums.sort()\n        return min([ nums[n-4+i] - nums[i] for i in range(4)])\n        \n        #return min(a - b for a,b in zip(heapq.nlargest(4, A), heapq.nsmallest(4, A)[::-1]))\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        nums.sort()\n        l = [y - x for x, y in zip(nums[:4], nums[-4:])]\n        return min(l)\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 3:\n            return 0\n        nums.sort()\n        x = 0\n        y = len(nums) - 1\n        arr = []\n        while x < y:\n            arr.append(nums[x])\n            arr.append(nums[y])\n            x += 1\n            y -= 1\n        if x == y:\n            arr.append(nums[x])\n        arr.sort()\n        self.ans = float('inf')\n        self.min_diff(0, len(arr) - 1, arr, 3)\n        return self.ans\n        \n    def min_diff(self, i, j, arr, depth):\n        if depth == 0:\n            self.ans = min(self.ans, arr[j] - arr[i])\n            return\n        self.min_diff(i + 1, j, arr, depth - 1)\n        self.min_diff(i, j - 1, arr, depth - 1)\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        # O(n) time, O(1) space since mins and maxs are at most 4 elements\n        if len(nums) <= 4:\n            return 0\n        \n        # find the smallest 4 numbers and largest 4 numbers\n        mins, maxs = nums[:4], nums[:4]\n        for num in nums[4:]:\n            mins.append(num)\n            mins.sort()\n            mins.pop()\n            maxs.append(num)\n            maxs.sort(reverse = True)\n            maxs.pop()\n        maxs = maxs[::-1]\n        '''\n\\t\\tmins[i] maxs[j]\n        i j\n        0 0 # change the largest 3 numbers to the 4-th largest, smallest numbers unchanged\n        1 1 # change the smallest number to the 2nd smallest, change the 2 largest to 3rd largest\n        2 2 # change the smallest 2 numbers to 3rd smallest, change the largest to 2nd largest\n        3 3 # change the smallest 3 numbers to 4th smallest,largest number unchanged\n        '''\n        return min(maxs[i] - mins[i] for i in range(4))\n'''\nInput 1: [1,5,0,10,14], all maxs and mins are not overlapped\nmaxs [1, 5, 10, 14]\nmins [0, 1, 5, 10]\ndiff [1, 4, 5, 4]\n\nInput 2: [1,1,2,3,4], maxs and mins are overlapped\nmaxs [1, 2, 3, 4]\nmins [1, 1, 2, 3]\ndiff [0, 1, 1, 1]\n'''    ", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) < 5: return 0\n        nums = sorted(nums)\n        print (nums)\n        n = len(nums)-1\n        return min(nums[n] - nums[3], nums[n-1] - nums[2], nums[n-2] - nums[1],nums[n-3] - nums [0])\n            \n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        nums = sorted(nums)\n        if len(nums)<=4:\n            return 0\n        print(nums)\n        return min(nums[-1]-nums[3], \n                   nums[-4]-nums[0],\n                  nums[-2]-nums[2],\n                  nums[-3]-nums[1]\n                  )", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        nums = sorted(nums)\n        l, r = 0, len(nums)-1\n        res = nums[-1]-nums[0]\n        for i in range(0, 4):\n            res = min(res, nums[-4+i]-nums[i])\n        return res", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4: #if only one number is left difference is 0\n            return 0\n        nums.sort()\n        return min(nums[-1-i] - nums[3-i] for i in range(4))\n                #nums[-1 -0/1/2/3] is getting the largest 4 numbers\n                #nums[3 - 0/1/2/3] is getting the smallest 4 numbers\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums)<=4: \n            return 0\n        maxHeap, minHeap = [],[]\n        import heapq\n        for e in nums:\n            heappush(maxHeap,e)\n            heappush(minHeap,e*-1)\n            if len(maxHeap)>4:\n                heappop(maxHeap)\n                heappop(minHeap)\n        minHeap = sorted([-1*e for e in minHeap]) #in ascending order\n        res = float('inf')\n        for i in range(4):\n            \n            res = min(res, heappop(maxHeap)-minHeap[i])\n            \n        \n        return res", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        \n        if len(nums) <= 4: return 0\n        nums.sort()\n        return min(nums[-1] - nums[3], nums[-2] - nums[2], nums[-3] - nums[1], nums[-4] - nums[0])", "\nimport copy\nfrom typing import List\nimport numpy\n\nimport sys\n# Definition for a binary tree node.\n# Definition for a binary tree node.\nclass Solution:\n  def minDifference(self, nums: List[int]) -> int:\n    result = 0\n\n    if len(nums) <= 4:\n      return 0\n\n    nums.sort()\n    result = sys.maxsize\n    result = min(result, nums[-1] - nums[3])\n    result = min(result, nums[-2] - nums[2])\n    result = min(result, nums[-3] - nums[1])\n    result = min(result, nums[-4] - nums[0])\n    return result\n\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        nums.sort()\n        r1 = max(nums[0:-3]) - min(nums[0:-3])\n        r2 = max(nums[1:-2]) - min(nums[1:-2])\n        r3 = max(nums[2:-1]) - min(nums[2:-1])\n        r4 = max(nums[3:]) - min(nums[3:])\n        \n        return min(r1, r2, r3, r4)", "from heapq import heappush, heappop\n\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        \n        max_h = []\n        min_h = []\n        \n        for i in nums:\n            heappush(max_h, i)\n            heappush(min_h, -i)\n            \n            if len(max_h) > 4:\n                heappop(max_h)\n                heappop(min_h)\n\n            \n                \n        min_h = [-item for item in min_h]\n        \n        max_h.sort()\n        min_h.sort()\n        \n        return min([max_h[i] - min_h[i] for i in range(len(max_h))])", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(a-b for a, b in zip(nums[-4:],nums[:4]))", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        nums.sort()\n        result = nums[-1] - nums[0]\n        x = min(4, len(nums))\n        for i in range(x):\n            curr = nums[-x + i] - nums[i]\n            result = min(result, curr)\n        return result\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        nums.sort()\n        if len(nums) <= 4:\n            return 0\n        res = float('inf')\n        n = len(nums)\n        for i in range(4):\n            res = min(res, nums[n-4+i] - nums[i])\n        return res", "class Solution:\n    def minDifference(self, A: List[int]) -> int:\n        if len(A) <= 4:\n            return 0\n        \n        A = sorted(A)\n        res = math.inf\n        for i in range(4):\n            res = min(res, A[len(A) - i - 1] - A[3 - i])\n        return res\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums)<=4:\n            return 0\n        \n        nums.sort()\n        print(nums)\n        cur = max(nums)-min(nums)\n        \n        h1 = nums[0]\n        nums[0]=nums[-1]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[0] = h1\n        \n        h1,h2 = nums[0],nums[1]\n        nums[0],nums[1]=nums[-1],nums[-1]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[0],nums[1] = h1,h2\n        \n        h1,h2,h3 = nums[0],nums[1],nums[2]\n        nums[0],nums[1],nums[2]=nums[-1],nums[-1],nums[-1]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[0],nums[1],nums[2] = h1,h2,h3\n        \n        h1,h2,h3 = nums[-1],nums[-2],nums[-3]\n        nums[-1],nums[-2],nums[-3]=nums[0],nums[0],nums[0]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[-1],nums[-2],nums[-3] = h1,h2,h3\n        \n        h1,h2 = nums[-1],nums[-2]\n        nums[-1],nums[-2]=nums[0],nums[1]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[-1],nums[-2] = h1,h2\n        \n        h1 = nums[-1]\n        nums[-1]=nums[0]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[-1] = h1\n        \n        ############################################################\n        \n        h1,h2,h3 = nums[0],nums[1],nums[-1]\n        nums[0],nums[1],nums[-1] = nums[2],nums[2],nums[2]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[0],nums[1],nums[-1] = nums[-2],nums[-2],nums[-2]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[0],nums[1],nums[-1] = h1,h2,h3\n        \n        h1,h2,h3 = nums[0],nums[-1],nums[-2]\n        nums[0],nums[-1],nums[-2] = nums[1],nums[1],nums[1]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[0],nums[-1],nums[-2] = nums[-3],nums[-3],nums[-3]\n        if max(nums)-min(nums)<cur:\n            cur = max(nums)-min(nums)\n        nums[0],nums[-1],nums[-2] = h1,h2,h3\n        \n        return cur", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n<=4: return 0\n        \n        nums.sort()\n        res = float('inf')\n        for i in range(4):\n            l = nums[i]\n            r = nums[n-1-3+i]\n            res = min(nums[n-1-3+i]-nums[i], res)\n        return res", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(b - a for a, b in zip(nums[:4], nums[-4:]))    \n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 5:\n            return 0\n        nums.sort()\n        return min(nums[-1] - nums[3], nums[-2]-nums[2], nums[-3]-nums[1], nums[-4]-nums[0])", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        nums.sort()\n        ans = float('inf')\n        i = 3\n        j = n - 1\n        if n <= 4:\n            return 0\n        \n        while i >= 0 and j >= 0:\n            ans = min(ans,nums[j] - nums[i])\n            i -= 1\n            j -= 1\n        return ans", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums)<4: return 0\n        from collections import Counter\n        dic = sorted(Counter(nums).items())\n        res = [dic[0][0]]\n        # print(dic)\n        if dic[0][1]>3:\n            res += [dic[0][0]] * 3\n        elif dic[0][1]==3:\n            res += [dic[0][0]] * 2\n            res.append(dic[1][0])\n        elif dic[0][1]==2:\n            res.append(dic[0][0])\n            res.append(dic[1][0])\n            if dic[1][1]>1:\n                res.append(dic[1][0])\n            else:\n                res.append(dic[2][0])\n        else:\n            res.append(dic[1][0])\n            if dic[1][1]>2:\n                res.append(dic[1][0])\n                res.append(dic[1][0])\n            elif dic[1][1]==2:\n                res.append(dic[1][0])\n                res.append(dic[2][0])\n            else:\n                res.append(dic[2][0])\n                if dic[2][1]>1:\n                    res.append(dic[2][0])\n                else:\n                    res.append(dic[3][0])\n        if dic[-1][1]>3:\n            res = [dic[-1][0]-res[i] for i in range(4)]\n        elif dic[-1][1]==3:\n            res = [dic[-1][0]-res[i] for i in range(1,4)] + [dic[-2][0]-res[0]]\n        elif dic[-1][1]==2:\n            tmp = [dic[-1][0]-res[i] for i in range(2,4)]\n            if dic[-2][1]>1:\n                tmp += [dic[-2][0]-res[0]] + [dic[-2][0]-res[1]]\n            else:\n                tmp += [dic[-3][0]-res[0]] + [dic[-2][0]-res[1]]\n            res = tmp\n        else:\n            tmp = [dic[-1][0]-res[3]]\n            if dic[-2][1]>2:\n                tmp += [dic[-2][0]-res[i] for i in range(3)]\n            elif dic[-2][1]==2:\n                tmp += [dic[-2][0]-res[i] for i in range(1,3)]\n                tmp += [dic[-3][0]-res[0]]\n            else:\n                tmp += [dic[-2][0]-res[2]]\n                tmp += [dic[-3][0]-res[1]]\n                if dic[-3][1]>1:\n                    tmp += [dic[-3][0]-res[0]]\n                else:\n                    tmp += [dic[-4][0]-res[0]]\n            res = tmp\n        return min(res)\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 5:\n            return 0\n        # nums.sort()\n        # return min(nums[-4]-nums[0], nums[-3]-nums[1], nums[-2]-nums[2], nums[-1]-nums[3])\n        \n        l = []\n        h = []\n        \n        for c in nums:\n            heapq.heappush(l, -c)\n            if len(l) > 4:\n                heapq.heappop(l)\n            heapq.heappush(h, c)\n            if len(h) > 4:\n                heapq.heappop(h)\n        \n        l = [-c for c in l]\n        l.sort()\n        h.sort()\n        \n        return min(h[0]-l[0], h[1]-l[1], h[2]-l[2], h[3]-l[3])", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        '''\n        s1, s2, s3 = l1 - s4\n        s1, s2, l1 = l2 - s3\n        s1, l1, s2 = l2 - s3\n        s1, l1, l2 = l3 - s2\n        l1, s1, s2 = l2 - s3\n        l1, s1, l2 = l3 - s2\n        l1, l2, s1 = l3 - s2\n        l1, l2, l3 = l4 - s1\n        '''\n        if len(nums) <= 4:\n            return 0\n        nums.sort()\n        return min([\n            nums[-1] - nums[3],\n            nums[-2] - nums[2],\n            nums[-3] - nums[1],\n            nums[-4] - nums[0]\n        ])\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        nums.sort()\n        ans = float('inf')\n        if n <= 4:\n            return 0\n        i = 3\n        j = n - 1\n        while i >= 0 and j >= 0:\n            ans = min(ans,nums[j] - nums[i])\n            i -= 1\n            j -= 1\n        return ans", "import heapq\n\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        largest = heapq.nlargest(4, nums)\n        smallest = heapq.nsmallest(4, nums)\n        \n        m = 10**10\n        n = len(largest)\n        for i in range(n):\n            m = min(m, largest[i] - smallest[n - 1 -i])\n        return max(m, 0)", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        # 1. replace 3 of the elements < num\n        # 2. replace 3 of the elements > num\n        # Calculate the difference between min and max\n        n = len(nums)\n        if n < 5: return 0\n        ans = float('inf')\n        nums.sort()\n        for i in range(4):\n            ans = min(ans, nums[n-4+i] - nums[i])\n        return ans", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(abs(nums[0] - nums[-4]),abs(nums[2] - nums[-2]),abs(nums[1] - nums[-3]),abs(nums[3] - nums[-1])) if len(nums) > 4 else 0        \n\n        # 4 cases \n", "#81,48,48 |31, 48, 48\n\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        l = len(nums)\n        \n        biggest = nums[:min(4, l)]\n        smallest = nums[:min(4, l)]\n        for i in range(4, l):\n            num = nums[i]\n            biggest.append(num)\n            smallest.append(num)\n            \n            biggest.remove(min(biggest))\n            smallest.remove(max(smallest))\n                \n        \n        # print(simplified)\n        if len(biggest) < 4:\n            return 0\n        \n        bfs = [(sorted(biggest), sorted(smallest), 0)]\n        \n        opt = max(biggest) - min(smallest)\n        while bfs:\n            new_biggest, new_smallest, changes = bfs.pop(0)\n            \n            if changes == 3:\n                # print(current)\n                opt = min(\n                    opt,\n                    max(new_biggest) - min(new_smallest)\n                )\n                continue\n            \n            bfs.append((new_biggest[:-1], list(new_smallest), changes + 1))\n            bfs.append((list(new_biggest), new_smallest[1:], changes + 1))\n            \n        return opt\n        # return max(b) - min(s)\n        \n        \n            \n            \n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        return min(b-a for a,b in zip(sorted(nums)[:4],sorted(nums)[-4:]))", "class Solution:\n    def _util(self, nums):\n        min_heap, max_heap = [], []\n        for i, x in enumerate(nums):\n            heapq.heappush(min_heap, (x, i))\n            if len(min_heap) > 4:\n                heapq.heappop(min_heap)\n            heapq.heappush(max_heap, (-x, i))\n            if len(max_heap) > 4:\n                heapq.heappop(max_heap)\n        return sorted([x for x, i in set(min_heap + [(-x, i) for x, i in max_heap])])\n\n    def minDifference(self, nums: List[int]) -> int:\n        lst = sorted(nums)\n        result = lst[-1] - lst[0]\n        x = min(4, len(lst))\n        for i in range(x):\n            curr = lst[-x + i] - lst[i]\n            result = min(result, curr)\n        return result\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        n = len(nums)\n        ans = float('inf')\n        nums.sort()\n        i = 3\n        j = n - 1\n        if n <= 4:\n            return 0\n        while i >= 0 and j >= 0:\n            ans = min(ans,nums[j] - nums[i])\n            i -= 1\n            j -= 1\n        return ans", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        l=nums[::]\n        l.sort()\n        if len(l)<=4:\n            return 0\n        else:\n            return min(abs(l[-4]-l[0]),abs(l[-1]-l[3]),abs(l[2]-l[-2]),abs(l[-3]-l[1]))\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        \n        ans = float('inf')\n        nums.sort()\n        for i in range(4):\n            ans = min(ans, nums[-4 + i] - nums[i])\n        return ans\n", "'''\n[5,3,2,4]\n[1,5,0,10,14]\n[6,6,0,1,1,4,6]\n[1,5,6,14,15]\n'''\n\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        \n        n = len(nums)\n        \n        if n < 5:\n            return 0\n        \n        nums.sort()\n        \n        diff = n - 4\n        ans = math.inf\n        for i in range(0, n-diff):\n            ans = min(ans, nums[i+diff] - nums[i])\n            \n        return ans\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) < 5:\n            return 0\n\n        nums.sort()\n        candidates = (\n            nums[-1] - nums[3],\n            nums[-2] - nums[2],\n            nums[-3] - nums[1],\n            nums[-4] - nums[0]\n        )\n\n        return min(candidates)\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) < 5:\n            return 0\n        ns = sorted(nums)\n        mindif = ns[-4] - ns[0]\n        for i in range(1,4):\n            if ns[i-4] - ns[i] < mindif:\n                mindif = ns[i-4] - ns[i]\n        return mindif", "import heapq\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        if len(nums) == 5:\n            nums.sort()\n            return min(b-a for a,b in zip(nums, nums[1:]))\n        a = heapq.nsmallest(4, nums)\n        b = heapq.nlargest(4, nums)\n        arr = a + b\n        arr.sort()\n        return min(\n            arr[4]-arr[0], arr[5]-arr[1], arr[6]-arr[2], arr[7]-arr[3], \n        )\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums)<=4: \n            return 0\n        nums.sort()\n        n = len(nums)\n        res = min(nums[n-4]-nums[0],nums[n-3]-nums[1],nums[n-2]-nums[2],nums[n-1]-nums[3])\n        return res", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        \n        if len(nums) <=4:\n            return 0\n        nums.sort()\n        a = min([nums[-4] - nums[0],nums[-1] - nums[3],nums[-3] - nums[1], nums[-2] - nums[2]])\n        return a\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 3:\n            return 0\n        nums.sort()\n        # remove smallest 3\n        min_diff = nums[-1] - nums[3]\n        \n        for i in range(3):\n            min_diff = min(min_diff, nums[-2-i] - nums[3-i-1])\n        \n        return min_diff    \n", "class Solution:\n    def _util(self, nums):\n        min_heap, max_heap = [], []\n        for i, x in enumerate(nums):\n            heapq.heappush(min_heap, (x, i))\n            if len(min_heap) > 4:\n                heapq.heappop(min_heap)\n            heapq.heappush(max_heap, (-x, i))\n            if len(max_heap) > 4:\n                heapq.heappop(max_heap)\n        return sorted([x for x, i in set(min_heap + [(-x, i) for x, i in max_heap])])\n\n    def minDifference(self, nums: List[int]) -> int:\n        lst = self._util(nums) if len(nums) > 100 else sorted(nums)\n        result = lst[-1] - lst[0]\n        x = min(4, len(lst))\n        for i in range(x):\n            curr = lst[-x + i] - lst[i]\n            result = min(result, curr)\n        return result\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        l = len(nums)\n        if l < 5:\n            return 0\n        nums.sort()\n        min = 99999999999\n        if min > nums[l-1] - nums[3]:\n            min = nums[l-1] - nums[3]\n        if min > nums[l-2] - nums[2]:\n            min =nums[l-2] - nums[2]\n        if min > nums[l-3] - nums[1]:\n            min =nums[l-3] - nums[1]\n        if min > nums[l-4] - nums[0]:\n            min =nums[l-4] - nums[0]\n        return min\n", "class Solution:\n    def minDifference(self, A: List[int]) -> int:\n        if len(A) <= 4:\n            return 0\n        \n        max_vals = [0] * 4\n        min_vals = [math.inf] * 4\n        for a in A:\n            for i in range(4):\n                if a > max_vals[i]:\n                    max_vals[i+1:] = max_vals[i:-1]\n                    max_vals[i] = a\n                    break\n            for i in range(4):\n                if a < min_vals[i]:\n                    min_vals[i+1:] = min_vals[i:-1]\n                    min_vals[i] = a\n                    break\n        res = math.inf\n        for i in range(4):\n            res = min(res, max_vals[i] - min_vals[3 - i])\n        return res\n", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return  0 \n        \n        nums.sort()\n        l = nums[0:4]\n        r = nums[-4:]\n        p = 0 \n        res = float('inf')\n        while p < 4:\n            res = min(res, r[p] - l[p])\n            p += 1\n            \n        return res\n        \n", "import heapq\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        \n        if len(nums) <= 4:\n            return 0\n        \n        minheap = []\n        maxheap = []\n        \n        for j, num in enumerate(nums):\n            \n            if len(minheap) < 4:\n                heapq.heappush(minheap, -num)\n            else:\n                x = heapq.heappop(minheap)\n                if x > -num:\n                    heapq.heappush(minheap, x)\n                else:\n                    heapq.heappush(minheap, -num)\n                    \n            if len(maxheap) < 4:\n                heapq.heappush(maxheap, num)\n            else:\n                x = heapq.heappop(maxheap)\n                if x > num:\n                    heapq.heappush(maxheap, x)\n                else:\n                    heapq.heappush(maxheap, num)\n        \n        minheap = [-x for x in minheap]\n        minheap.sort()\n        maxheap.sort()\n        \n        diff = [maxheap[-1]-minheap[-1], \n                maxheap[0]-minheap[0],\n                maxheap[-2]-minheap[2],\n                maxheap[-3]-minheap[1]]\n        \n        return min(diff)\n                \n", "class Solution:\n    #original submission\n    def minDifference(self, nums: List[int]) -> int:\n\n        if len(nums) < 5: \n            return 0\n        \n        a = sorted(nums)\n        \n        H = len(nums) - 4\n        L = 0\n        lowest_diff = None\n        for i in range(4):\n            diff = a[H] - a[L]\n            if lowest_diff == None or lowest_diff > diff:\n                lowest_diff = diff\n            H += 1\n            L += 1\n        \n        return lowest_diff\n    '''\n    # faster and cleaner\n    def minDifference(self, nums: List[int]) -> int:\n\n        if len(nums) < 5: \n            return 0\n        \n        nums = sorted(nums)\n        \n        N = len(nums)\n        lowest_diff = None\n        for i in range(4):\n            diff = nums[N-(4-i)] - nums[i]\n            if lowest_diff == None or lowest_diff > diff:\n                lowest_diff = diff\n        \n        return lowest_diff\n    '''\n    '''\n    #original attempt\n    def minDifference(self, nums: List[int]) -> int:\n        \n        N = len(nums)\n        \n        # any array of length 4 or less can have all elements mapped to same value\n        if len(nums) < 5: \n            return 0\n        \n        # sort \n        a = sorted(nums)\n        \n        # compare 'new' low/highs to an updated median\n        L = 0\n        H = len(nums) - 1\n        # counts for those remapped from each side\n        Lc = 0\n        Hc = 0\n        for i in range(3):\n            m = int((L + H + 2)/2)\n            M = a[m]\n            low = a[L]\n            high = a[H]\n            lowDiff = M - low\n            highDiff = high - M\n            # implies we should set the lowest value to the final median\n            if lowDiff > highDiff:\n                L += 1\n                Lc += 1\n            # implies we should set the highest value to the final median\n            elif lowDiff < highDiff:\n                H -= 1\n                Hc += 1\n            # implies the differences are the same - pick the side with a higher count\n            else:\n                if Hc > Lc:\n                    H -= 1\n                    Hc += 1\n                else:\n                    L += 1\n                    Lc += 1\n                    \n        return a[H] - a[L]\n    '''", "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        # \u627e\u5230\u6700\u5c0f\u76843\u4e2a\u548c\u6700\u5927\u76843\u4e2a\n        \n        if len(nums) <= 4: return 0\n        \n        nums.sort()\n        a1,a2,a3,a4 = nums[:4]\n        print(a1,a2,a3,a4)\n        b4,b3,b2,b1 = nums[-4:]\n        \n        return min(b4-a1, b3-a2, b2-a3, b1-a4)"]