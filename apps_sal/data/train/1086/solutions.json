["# cook your dish here\nmod = 10**9 + 7\nfrom math import gcd\ndef fac50():\n    f = [0]*51\n    f[0] ,f[1] = 1,1\n    for i in range(1,51):f[i] = (f[i-1]*i)%mod\n    return f\ndef gcd110():\n    gc = [[0]*111 for i in range(111)]\n    for i in range(111):\n        for j in range(111):gc[i][j] = gcd(i,j)\n    return gc\nfactorials,gcds = fac50(),gcd110()\ndef rule_asc(n,l):\n    a,k = [0 for i in range(n + 1)],1\n    a[1] = n\n    while k != 0:\n        x,y = a[k - 1] + 1,a[k] - 1 \n        k -= 1\n        while x <= y and k < l - 1:\n            a[k],y = x,y-x\n            k += 1\n        a[k] = x + y\n        yield a[:k + 1]\ndef niceness(s):\n    t = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):t = (t + gcds[s[i]][s[j]])%mod\n    return t\ndef permcount(s,c):\n    f,p = [s.count(x) for x in set(s)],factorials[c] \n    for e in f:p = (p*pow(factorials[e],mod-2,mod))%mod\n    return p\ndef main():\n    for i in range(int(input())):\n        n,s = [int(item) for item in input().split()]\n        a = [int(item) for item in input().split()]\n        b = [i for i in a if i != -1]\n        s , ones = s - sum(b),a.count(-1)         \n        if s < 0:print(0)\n        elif (s == 0 and ones == 0):print(niceness(a)%mod)\n        elif (s > 0 and ones == 0):print(0)\n        else:\n            t = 0\n            for seq in rule_asc(s,ones):\n                if len(seq) == ones: t = (t + (((permcount(seq,ones))%mod)*(niceness(b+seq)%mod))%mod)%mod\n            print(t)         \ndef __starting_point():main()\n__starting_point()", "# cook your dish here\nmod = 10**9 + 7\nfrom math import gcd\ndef fac50():\n    f = [0]*51\n    f[0] ,f[1] = 1,1\n    for i in range(1,51):f[i] = (f[i-1]*i)%mod\n    return f\ndef gcd110():\n    gc = [[0]*111 for i in range(111)]\n    for i in range(111):\n        for j in range(111):gc[i][j] = gcd(i,j)\n    return gc\nfactorials,gcds = fac50(),gcd110()\ndef rule_asc(n,l):\n    a,k = [0 for i in range(n + 1)],1\n    a[1] = n\n    while k != 0:\n        x,y = a[k - 1] + 1,a[k] - 1 \n        k -= 1\n        while x <= y and k < l - 1:\n            a[k],y = x,y-x\n            k += 1\n        a[k] = x + y\n        yield a[:k + 1]\ndef niceness(s):\n    t = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):t = (t + gcds[s[i]][s[j]])%mod\n    return t\ndef permcount(s,c):\n    f,p = [s.count(x) for x in set(s)],factorials[c] \n    for e in f:p = (p*pow(factorials[e],mod-2,mod))%mod\n    return p\ndef main():\n    for i in range(int(input())):\n        n,s = [int(item) for item in input().split()]\n        a = [int(item) for item in input().split()]\n        b = [i for i in a if i != -1]\n        s , ones = s - sum(b),a.count(-1)         \n        if s < 0:print(0)\n        elif (s == 0 and ones == 0):print(niceness(a)%mod)\n        elif (s > 0 and ones == 0):print(0)\n        else:\n            t = 0\n            for seq in rule_asc(s,ones):\n                if len(seq) == ones: t = (t + (((permcount(seq,ones))%mod)*(niceness(b+seq)%mod))%mod)%mod\n            print(t)         \ndef __starting_point():main()\n__starting_point()", "mod = 10**9 + 7\nfrom math import gcd\ndef fac50():\n    f = [0]*51\n    f[0] ,f[1] = 1,1\n    for i in range(1,51):f[i] = (f[i-1]*i)%mod\n    return f\ndef gcd110():\n    gc = [[0]*111 for i in range(111)]\n    for i in range(111):\n        for j in range(111):gc[i][j] = gcd(i,j)\n    return gc\nfactorials,gcds = fac50(),gcd110()\ndef rule_asc(n,l):\n    a,k = [0 for i in range(n + 1)],1\n    a[1] = n\n    while k != 0:\n        x,y = a[k - 1] + 1,a[k] - 1 \n        k -= 1\n        while x <= y and k < l - 1:\n            a[k],y = x,y-x\n            k += 1\n        a[k] = x + y\n        yield a[:k + 1]\ndef niceness(s):\n    t = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):t = (t + gcds[s[i]][s[j]])%mod\n    return t\ndef permcount(s,c):\n    f,p = [s.count(x) for x in set(s)],factorials[c] \n    for e in f:p = (p*pow(factorials[e],mod-2,mod))%mod\n    return p\ndef main():\n    for i in range(int(input())):\n        n,s = [int(item) for item in input().split()]\n        a = [int(item) for item in input().split()]\n        b = [i for i in a if i != -1]\n        s , ones = s - sum(b),a.count(-1)         \n        if s < 0:print(0)\n        elif (s == 0 and ones == 0):print(niceness(a)%mod)\n        elif (s > 0 and ones == 0):print(0)\n        else:\n            t = 0\n            for seq in rule_asc(s,ones):\n                if len(seq) == ones: t = (t + (((permcount(seq,ones))%mod)*(niceness(b+seq)%mod))%mod)%mod\n            print(t)         \ndef __starting_point():main()\n__starting_point()", "mod = 10**9 + 7\r\ndef gcd(a,b): return b and gcd(b, a % b) or a\r\n\r\ndef fac50():\r\n    f = [0]*51\r\n    f[0] = 1\r\n    f[1] = 1\r\n    for i in range(1,51):\r\n        f[i] = (f[i-1]*i)%mod\r\n    return f\r\n\r\ndef gcd110():\r\n\r\n    gc = [[0]*111 for i in range(111)]\r\n    for i in range(111):\r\n        for j in range(111):\r\n            gc[i][j] = gcd(i,j)\r\n    return gc\r\n\r\nfactorials = fac50()\r\ngcds = gcd110()\r\n\r\ndef rule_asc(n,l):\r\n    a = [0 for i in range(n + 1)]\r\n    k = 1\r\n    a[1] = n\r\n    while k != 0:\r\n        x = a[k - 1] + 1\r\n        y = a[k] - 1\r\n        k -= 1\r\n        while x <= y and k < l - 1:\r\n            a[k] = x\r\n            y -= x\r\n            k += 1\r\n        a[k] = x + y\r\n        yield a[:k + 1]\r\n\r\ndef niceness(s):\r\n    t = 0\r\n    for i in range(len(s)):\r\n        for j in range(i+1,len(s)):\r\n            t = (t + gcds[s[i]][s[j]])%mod\r\n    return t\r\n\r\n\r\ndef permcount(s,c):\r\n    f = [s.count(x) for x in set(s)]\r\n    p = factorials[c]\r\n    for e in f:\r\n        p = (p*pow(factorials[e],mod-2,mod))%mod\r\n    return p\r\n\r\ndef main():\r\n\r\n    t  = int(input())\r\n\r\n    for i in range(t):\r\n\r\n        n,s = [int(item) for item in input().split()]\r\n        a = [int(item) for item in input().split()]\r\n        b = [i for i in a if i != -1]\r\n        s -= sum(b)\r\n        ones = a.count(-1)\r\n\r\n        if s < 0:\r\n            print(0)\r\n        elif (s == 0 and ones == 0):\r\n            print(niceness(a)%mod)\r\n        elif (s > 0 and ones == 0):\r\n            print(0)\r\n        else:\r\n\r\n            t = 0\r\n            for seq in rule_asc(s,ones):\r\n                if len(seq) == ones:\r\n                    p = permcount(seq,ones)\r\n                    t = (t + ((p%mod)*(niceness(b+seq)%mod))%mod)%mod\r\n\r\n            print(t)\r\n\r\ndef __starting_point():\r\n    main()\r\n\n__starting_point()", "import math\r\n\r\ndef niceness(a):\r\n    nice=0\r\n    for i in range(len(a)):\r\n        for j in range(i+1,len(a)):\r\n            nice+=math.gcd(a[i],a[j])\r\n    return nice\r\n\r\ndef f(a, s):\r\n    if -1 not in a:\r\n        if s != 0: return ()\r\n        return (tuple(a),)\r\n    if s == 0:\r\n        return ()\r\n    idx = a.index(-1)\r\n    ans = ()\r\n    for i in range(1, s + 1):\r\n        a[idx] = i\r\n        ans += f(a, s - i)\r\n        a[idx] = -1\r\n    return ans\r\n\r\ndef __starting_point():\r\n    t=int(input())\r\n    numbers=[0]*50\r\n    mod = 10**9 + 7\r\n    for i in range(1,51):\r\n        numbers[i-1]=i\r\n    for i in range(t):\r\n        n,s = map(int,input().split())\r\n        a=list(map(int,input().split()))\r\n        ans,ss=0,0\r\n        for x in range(len(a)):\r\n            if(a[x]!=-1):\r\n                ss+=a[x]\r\n        x=f(a,s-ss)\r\n        for i in x:\r\n            ans += niceness(i)\r\n        print(ans % mod)\n__starting_point()"]