["import sys\n\nn, k = map(int, sys.stdin.readline().split())\nnums = list(map(int, sys.stdin.readline().split()))\ntotal = sum(nums)\navg = int(total / n)\n\ndef check1(nums, target, K):\n    for x in nums:\n        if K < 0:\n            return False\n        if x < target:\n            K -= target - x\n    return K >= 0\n\ndef check2(nums, target, K):\n    for x in nums:\n        if K < 0:\n            return False\n        if x > target:\n            K -= x - target\n    return K >= 0\n\nl1, r1 = min(nums), avg + 1\nwhile l1 + 1 < r1:\n    mid = (l1 + r1) >> 1\n    if check1(nums, mid, k):\n        l1 = mid\n    else:\n        r1 = mid\n\nif check2(nums, avg + (0 if total % n == 0 else 1), k):\n    r2 = avg + (0 if total % n == 0 else 1)\nelse:\n    l2, r2 = avg + (0 if total % n == 0 else 1), max(nums)\n    while l2 + 1 < r2:\n        mid = (l2 + r2) >> 1\n        if check2(nums, mid, k):\n            r2 = mid\n        else:\n            l2 = mid\n\nprint(r2 - l1)", "n, k = map(int, input().split())\nnums = list(map(int, input().split()))\ntotal = sum(nums)\navg = int(total / n)\n\ndef check1(nums, target, K):\n    for x in nums:\n        if K < 0:\n            return False\n        if x < target:\n            K -= target - x\n    return K >= 0\n\ndef check2(nums, target, K):\n    for x in nums:\n        if K < 0:\n            return False\n        if x > target:\n            K -= x - target\n    return K >= 0\n\nl1, r1 = min(nums), avg + 1\nwhile l1 + 1 < r1:\n    mid = (l1 + r1) >> 1\n    if check1(nums, mid, k):\n        l1 = mid\n    else:\n        r1 = mid\n\nif check2(nums, avg + (0 if total % n == 0 else 1), k):\n    r2 = avg + (0 if total % n == 0 else 1)\nelse:\n    l2, r2 = avg + (0 if total % n == 0 else 1), max(nums)\n    while l2 + 1 < r2:\n        mid = (l2 + r2) >> 1\n        if check2(nums, mid, k):\n            r2 = mid\n        else:\n            l2 = mid\n\nprint(r2 - l1)", "def main():\n    n, k = list(map(int, input().split()))\n    l = sorted(map(int, input().split()))\n    lo, hi = l[0], l[-1]\n    while lo < hi - 1:\n        mid = (lo + hi) // 2\n        t = k\n        for x in l:\n            if x > mid:\n                lo = mid\n                break\n            t -= mid - x\n            if t < 0:\n                hi = mid\n                break\n        else:\n            lo = mid\n    m1 = lo\n    lo, hi = l[0], l[-1]\n    l.reverse()\n    while lo < hi - 1:\n        mid = (lo + hi) // 2\n        t = k\n        for x in l:\n            if x < mid:\n                hi = mid\n                break\n            t -= x - mid\n            if t < 0:\n                lo = mid\n                break\n        else:\n            hi = mid\n    print(hi - m1 if hi > m1 else 1 if sum(l) % n else 0)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\ninp = sys.stdin.read().splitlines()\nn,k = list(map(int,inp[0].split()))\nlst = list(map(int,inp[1].split()))\nlst.sort()\ntotal = sum(lst)\nlower = int(total/n)\nnupper = total%n\n\nif nupper == 0:\n\tupper = lower;\nelse:\n\tupper = lower+1;\nnlower = n - nupper;\n\ni = 0;\nwhile i<n and lst[i]<lower:\n\ti+=1\nlow1st = i; \n\ni = n-1;\nwhile i>=0 and lst[i]>upper:\n\ti-=1\nuplast = i;\n\nlowerfill = low1st*lower - sum(lst[:low1st]) \n\nupperfill = sum(lst[uplast+1:]) - (n-uplast-1)*upper\n\ntotalsteps = (lowerfill+upperfill)/2\n\ndef filllower():\n\tkk = k\n\tcur = lst[0]\n\ti = 0\n\twhile (kk>0):\n\t\twhile (lst[i]==cur):\n\t\t\ti+=1\n\t\tdiff = lst[i] - lst[i-1]\n\t\tkk -= i*diff\n\t\tif kk == 0:\n\t\t\tcur = lst[i]\n\t\t\tbreak\n\t\telif kk<0:\n\t\t\tcur = lst[i]-int(-kk/i)-1\n\t\t\tif (-kk%i) ==0:\n\t\t\t\tcur += 1\n\t\t\tbreak\n\t\tcur = lst[i]\n\treturn cur\n\ndef fillupper():\n\tkk = k\n\ti = n-1\n\tcur = lst[i]\n\twhile (kk>0):\n\t\twhile (lst[i]==cur):\n\t\t\ti-=1\n\t\tdiff = lst[i+1] - lst[i]\n\t\tkk -= (n-i-1)*diff\n\t\tif kk == 0:\n\t\t\tcur = lst[i-1]\n\t\t\tbreak\n\t\telif kk<0:\n\t\t\tcur = lst[i]+int(-kk/(n-i-1))\n\t\t\tif (-kk%(n-i-1)!=0):\n\t\t\t\tcur += 1;\n\t\t\tbreak\n\t\tcur = lst[i]\n\treturn cur\n\nif totalsteps>=k:\n\tprint(fillupper()-filllower())\nelse:\n\tprint(upper-lower)\n", "from sys import *\nf = lambda: map(int, stdin.readline().split())\nn, k = f()\nt = sorted(f())\ns = [0] * (n + 1)\nfor i in range(n): s[i + 1] = s[i] + t[i]\nt = [0] + t\nd = s[n]\nl, r = 0, n\nwhile l < r:\n    m = l + r + 1 >> 1\n    if t[m] * m - s[m] > k: r = m - 1\n    else: l = m\nx = l\nl, r = 0, n\nwhile l < r:\n    m = l + r >> 1\n    if d - s[m] - t[m] * (n - m) > k: l = m + 1\n    else: r = m\ny = r\nq = (d - s[y - 1] - k + n - y) // (n - y + 1) - (s[x] + k) // x\nprint(max(q, int(d % n > 0)))", "import sys\n\n\n\ninp = sys.stdin.read().splitlines()\n\nn,k = list(map(int,inp[0].split()))\n\nlst = list(map(int,inp[1].split()))\n\nlst.sort()\n\ntotal = sum(lst)\n\nlower = int(total/n)\n\nnupper = total%n\n\n\n\nif nupper == 0:\n\n\tupper = lower;\n\nelse:\n\n\tupper = lower+1;\n\nnlower = n - nupper;\n\n\n\ni = 0;\n\nwhile i<n and lst[i]<lower:\n\n\ti+=1\n\nlow1st = i; \n\n\n\ni = n-1;\n\nwhile i>=0 and lst[i]>upper:\n\n\ti-=1\n\nuplast = i;\n\n\n\nlowerfill = low1st*lower - sum(lst[:low1st]) \n\n\n\nupperfill = sum(lst[uplast+1:]) - (n-uplast-1)*upper\n\n\n\ntotalsteps = (lowerfill+upperfill)/2\n\n'''\n\nprint(\"nlower = %d\"%nlower)\n\nprint(\"nupper = %d\"%nupper)\n\nprint(\"lower = %d\"%lower)\n\nprint(\"upper = %d\"%upper)\n\nprint(\"lowerfill = %d\"%lowerfill)\n\nprint(\"upperfill = %d\"%upperfill)\n\nprint(\"totalsteps = %f\"%totalsteps)\n\n'''\n\ndef filllower():\n\n\tkk = k\n\n\tcur = lst[0]\n\n\ti = 0\n\n\twhile (kk>0):\n\n\t\twhile (lst[i]==cur):\n\n\t\t\ti+=1\n\n\t\t\t#print(\"i=%d,lst[i]=%d\"%(i,lst[i]))\n\n\t\tdiff = lst[i] - lst[i-1]\n\n\t\tkk -= i*diff\n\n\t\t#print(\"lower kk = %d\",kk)\n\n\t\tif kk == 0:\n\n\t\t\tcur = lst[i]\n\n\t\t\tbreak\n\n\t\telif kk<0:\n\n\t\t\tcur = lst[i]-int(-kk/i)-1\n\n\t\t\t#print(\"-kk/i = %d\",int(-kk/i))\n\n\t\t\tif (-kk%i) ==0:\n\n\t\t\t\tcur += 1\n\n\t\t\tbreak\n\n\t\tcur = lst[i]\n\n\t#print(\"min = \",cur)\n\n\treturn cur\n\n\n\ndef fillupper():\n\n\tkk = k\n\n\ti = n-1\n\n\tcur = lst[i]\n\n\twhile (kk>0):\n\n\t\twhile (lst[i]==cur):\n\n\t\t\ti-=1\n\n\t\t\t#print(\"i=%d,lst[i]=%d\"%(i,lst[i]))\n\n\t\tdiff = lst[i+1] - lst[i]\n\n\t\tkk -= (n-i-1)*diff\n\n\t\t#print(\"upper kk = \",kk)\n\n\t\tif kk == 0:\n\n\t\t\tcur = lst[i-1]\n\n\t\t\tbreak\n\n\t\telif kk<0:\n\n\t\t\tcur = lst[i]+int(-kk/(n-i-1))\n\n\t\t\tif (-kk%(n-i-1)!=0):\n\n\t\t\t\tcur += 1;\n\n\t\t\tbreak\n\n\t\tcur = lst[i]\n\n\t#print(\"max = \",cur)\n\n\treturn cur\n\n\n\nif totalsteps>=k:\n\n\tprint(fillupper()-filllower())\n\nelse:\n\n\tprint(upper-lower)\n\n\n\n\n\n\n\n'''\n\n\n\n\n\ndef sortmax():\n\n\tv = lst[-1]\n\n\ti = n-2\n\n\twhile(i>=0):\n\n\t\tif lst[i]<=v:\n\n\t\t\tlst[-1]=lst[i+1]\n\n\t\t\tlst[i+1]=v\n\n\t\t\treturn\n\n\t\ti-=1\n\n\tlst[-1]=lst[0]\n\n\tlst[0]=v\n\n\n\ndef sortmin():\n\n\tv = lst[0]\n\n\ti = 1\n\n\twhile(i<n):\n\n\t\tif lst[i]>=v:\n\n\t\t\tlst[0]=lst[i-1]\n\n\t\t\tlst[i-1]=v\n\n\t\t\treturn\n\n\t\ti+=1\n\n\tlst[0]=lst[-1]\n\n\tlst[-1]=v\n\n\n\n\n\nlst.sort()\n\nwhile k:\n\n\tlst[-1]-=1\n\n\tsortmax()\n\n\t#print(lst)\n\n\tlst[0]+=1\n\n\tsortmin()\n\n\tif (lst[-1]-lst[0])<=1:\n\n\t\tbreak\n\n\t#print(lst)\n\n\tk-=1\n\n\n\n\n\nprint(lst[-1]-lst[0])\n\n\n\n\n\n'''\n\n\n\n# Made By Mostafa_Khaled\n", "# https://codeforces.com/problemset/problem/671/B\n\nn, k = list(map(int, input().split()))\na    = sorted(list(map(int, input().split())))\n\ndef solve(a, k):\n    b  = a[::-1]\n    S  = sum(a)\n    n  = len(a)\n    div   = S // n\n    re    = S % n\n    T     = 0\n    \n    num = re\n    \n    for i in range(n-1, -1, -1):\n        thres = div \n    \n        if num > 0:\n            thres += 1\n            num -= 1\n    \n        if a[i] > thres:\n            T += a[i] - thres\n\n    if k >= T:\n        return 1 if re > 0 else 0\n    \n    l_arr = [0] * n\n    r_arr = [0] * n\n    \n    for i in range(1, n):\n        l_arr[i] = (a[i] - a[i-1]) * i \n        \n    for i in range(1, n):\n        r_arr[i] = (b[i-1] - b[i]) * i\n    \n    remain = k\n    l, u   = a[0], b[0]\n    \n    for i in range(1, n):\n        if remain >= l_arr[i]:\n            remain -= l_arr[i]\n            l = a[i]\n        else:\n            l += remain // i\n            break\n            \n    remain = k        \n    \n    for i in range(1, n):\n        if remain >=  r_arr[i]:\n            remain -= r_arr[i]\n            u  = b[i]\n        else:\n            u -= remain // i\n            break\n            \n    return u - l#, a, l_arr, r_arr\n\nprint(solve(a, k))\n\n#4 1\n#1 1 4 2\n", "from sys import stdin\n\nn,k = [int(x) for x in stdin.readline().split()]\noK = k\n\nc = sorted([int(x) for x in stdin.readline().split()])\n\nl = 0\nr = n-1\n\nlow = c[0]\nhigh = c[-1]\n\nlowBuffer = 0\nhighBuffer = 0\n\nwhile low < high:\n    if low == c[l]:\n        l += 1\n    if high == c[r]:\n        r -= 1\n\n    if l*(c[l]-low)-lowBuffer > (n-r-1)*(high-c[r])-highBuffer <= k:\n        #print(low,high,l,r,'highDown', (n-r-1)*(high-c[r])-highBuffer)\n        \n        k -= (n-r-1)*(high-c[r])-highBuffer\n        lowBuffer += (n-r-1)*(high-c[r])-highBuffer\n        highBuffer = 0\n        high = c[r]\n\n    elif (n-r-1)*(high-c[r])-highBuffer >= l*(c[l]-low)-lowBuffer <= k:\n        #print(low,high,l,r,'lowUp',l*(c[l]-low)-lowBuffer)\n        k -= l*(c[l]-low)-lowBuffer\n        highBuffer += l*(c[l]-low)-lowBuffer\n        lowBuffer = 0\n        low = c[l]\n    else:\n        low += (lowBuffer+k)//l\n        high -= (highBuffer+k)//(n-r-1)\n        k = 0\n        break\n\nif sum(c)%n == 0:\n    print(max(0,high-low))\nelse:\n    print(max(1,high-low))\n"]