["T = int(input())\nfor t in range(T):\n n, m = list(map(int, input().split()))\n c = list(map(int, input().split()))\n dp1 = [1e9]*((1 << n)+1)\n for i in range(n):\n  dp1[1 << i] = c[i] \n \n dp1[1 << (n-1)] = min(dp1[1 << (n-1)], sum(c))\n \n for i in range(m):\n  l = list(map(int, input().split()))\n  cost = l[0]\n  s = l[1]\n  items = l[2:]\n  mask = 0\n  for j in items:\n   mask = mask | (1 << (j-1))\n  dp1[mask] = min(dp1[mask], cost)\n \n for i in range((1<<n) - 1, -1, -1):\n  for j in range(n):\n   if i & (1<< j):\n    dp1[i ^ (1<<j)] = min(dp1[i ^ (1<<j)], dp1[i])\n \n dp2 = [1e9]*((1 << n) + 1)\n dp2[0] = 0\n for i in range(1 << n):\n  submask = i\n  while submask > 0:\n   dp2[i] = min(dp2[i], dp2[i ^ submask] + dp1[submask])\n   submask = (submask-1) & i\n \n print(dp2[(1 << n)-1])\n", "author=\"himanshu malhotra\"\naa,bb=0,0\nfor _ in range(eval(input())):\n n,m=list(map(int,input().split()))\n li=list(map(int,input().split()))\n dp=[float(\"inf\")]*((1<<n)+1)\n for i in range(n):\n  dp[1<<i]=li[i]\n dp[1<<(n-1)]=min(dp[1<<(n-1)],sum(li))\n for i in range(m):\n  q=list(map(int,input().split()))\n  cost,no,items=q[0],q[1],q[2:]\n  mask=0\n  for j in items:\n   mask |= (1<<(j-1))\n  dp[mask]=min(dp[mask],cost)\n for i in range((1<<n)-1,-1,-1):\n  for j in range(n):\n   if i&(1<<j):\n    dp[i^(1<<j)]=min(dp[i^(1<<j)],dp[i])\n ans=[float(\"inf\")]*((1<<n)+1)\n ans[0]=0\n for i in range(1<<n):\n  submask=i\n  while submask>0:\n   ans[i]=min(ans[i],dp[submask]+ans[i-submask])\n   submask=(submask-1)&i\n print(ans[(1<<n)-1])\n   \n", "T = int(input())\nfor test_cases in range(T):\n [N,M] = list(map(int, input().split(' ')))\n cost_single = list(map(int, input().split(' ')))\n\n class meal(object):\n  def __init__(self,price,number,meal_list):\n   self.cost=price\n   self.num_meals=number\n   self.meals = [0]*N \n   for i in meal_list:\n    self.meals[i-1]=1\n   self.averageprice = price/number\n meal_sets = []\n for i in range(N):\n  meal_sets.append(meal(cost_single[i],1,[i+1]))\n for i in range(M):\n  line = input().split(' ')\n  if int(line[0])<sum(cost_single[j-1] for j in map(int, line[2:])): \n   meal_sets.append(meal(int(line[0]),int(line[1]),list(map(int, line[2:]))))\n M=len(meal_sets)-N\n meal_sets = sorted(meal_sets, key = lambda meal_sets:meal_sets.averageprice)\n\n min_cost=[0]\n min_cost[0]=sum(cost_single)\n\n def selection(choice,index):\n  this_cost=0;\n  for i in range(N+M):\n   this_cost+=choice[i]*meal_sets[i].cost\n  if this_cost>=min_cost[0]:\n   return 0\n  else:\n   temp_list=[]\n   check_list=[0]*N\n   for j in range(N+M):\n    if choice[j]==1:\n     temp_list.append(meal_sets[j].meals)\n   check=1 \n   if temp_list:\n    for j in range(N):  \n     check_list[j]=sum(row[j] for row in temp_list)\n     if check_list[j]==0:\n      check=0 \n      break\n    if check==1:\n     min_cost[0]=this_cost\n\n  if index==N+M-2:\n   selection(choice[0:index+1]+[0], index+1)\n   selection(choice[0:index+1]+[1], index+1)\n  elif index<N+M-1:\n   selection(choice[0:index+1]+[0]+choice[index+2:], index+1)\n   selection(choice[0:index+1]+[1]+choice[index+2:], index+1)\n\n\n selection([0]*(N+M),0)\n selection([1]+[0]*(N+M-1),0)\n\n print(min_cost[0])", "INF=5*(10**6)\n\ndef solve():\n dp=[INF]*(1<<18 + 1)\n n,m=list(map(int,input().split()))\n line=list(map(int,input().split()))\n for i in range(n):\n  dp[(1<<i)]=line[i]\n for i in range(m):\n  line=list(map(int,input().split()))\n  c=line[0]\n  mask=0\n  for j in range(line[1]):\n   mask= mask | (1<<(line[2+j]-1))\n  dp[mask]=min(dp[mask],c)\n mask=(1<<n)-1\n while mask>=0:\n  for j in range(n):\n   submask = mask & (1<<j)\n   if submask>0:\n    dp[mask^(1<<j)]=min(dp[mask^(1<<j)],dp[mask])\n  mask-=1\n for _ in range(1):\n  for i in range(1<<n):\n   submask=(i-1)&i\n   while submask>0:\n    dp[i]=min(dp[i],dp[submask]+dp[i^submask])\n    submask=(submask-1)&i\n print(dp[(1<<n)-1])\n\n\nt=eval(input())\nfor _ in range(t):\n solve()\n"]