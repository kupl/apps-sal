["n=int(input())\r\ncost=[]\r\nd={}\r\nval_desc=[0]*n\r\nvisited=set()\r\nvisited.add(0)\r\ndfstack=[]\r\ndesc = [[False for i in range(n)] for i in range(n)]\r\nfor i in range(n):\r\n\tcost.append(int(input()))\r\n\td[i]=[]\r\n\r\nfor i in range(n-1):\r\n\tj,k=list(map(int,input().split()))\r\n\td[j-1].append(k-1)\r\n\td[k-1].append(j-1)\r\n\r\ndef dfs(u):\r\n\tval_desc[u]+=cost[u]\r\n\tdfstack.append(u)\r\n\tfor i in dfstack:\r\n\t\tdesc[u][i]=True\r\n\tfor i in d[u]:\r\n\t\tif i not in visited:\r\n\t\t\tvisited.add(i)\r\n\t\t\tdfs(i)\r\n\t\t\tval_desc[u]+=val_desc[i]\t\t\t\r\n\tdfstack.pop(-1)\r\n\r\ndfs(0)\r\nmp=10**9\r\ncoco=sum(cost)\r\nfor i in range(n):\r\n\tfor j in range(i+1,n):\r\n\t\tvali=val_desc[i]\r\n\t\tvalj=val_desc[j]\r\n\t\tif desc[i][j]:\r\n\t\t\tvalj-=val_desc[i]\r\n\t\tif desc[j][i]:\r\n\t\t\tvali-=val_desc[j]\r\n\t\tp=max(vali,valj,coco-vali-valj)\r\n\t\tmp=min(mp,p)\r\n#print(desc)\r\n#print(val_desc)\r\n#print\r\nprint(mp)\r\n\r\n\r\n\t\r\n", "#for _ in range(int(input()):\n#n,m = map(int,input().split())\n#x = [int(w) for w in input().split()]\n#n = int(input())\n#x = [int(input()) for _ in range(n)]\n#for i in range(n):\n#dt = {} for i in x:dt[i] = dt.get(i,0)+1\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\n\ndef dfs(v):\n    visited.add(v)\n    parents.append(v)\n    for u in parents:\n        desc[v][u] = True\n    for u in graph[v]:\n        if u not in visited:\n            dfs(u)\n            val[v] += val[u]\n    parents.pop()\n\n\nn = int(input())\ncost,graph,val = {},{},{}\n# val(i) is sum of cost of descendants of i\nfor i in range(1,n+1):\n    cost[i] = int(input())\n    graph[i] = []\n    val[i] = cost[i]\nfor _ in range(n-1):\n    a,b = map(int,input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n\ndesc = [[False for i in range(n+1)] for i in range(n+1)]\n# desc(i,j) is true if i is descendant of j\nvisited = set()\nparents =[]   # Ancestors stack\n\n\ndfs(1)\ntotal = sum(cost.values())\nbest = float('inf')\nfor i in range(1,n):\n    for j in range(i+1,n+1):\n        split = 0\n        s1 = val[i]\n        s2 = val[j]\n        if desc[i][j]:\n            s2 -= val[i]\n        if desc[j][i]:\n            s1 -= val[j]\n        s3 = total-s1-s2\n        split = max(s1,s2,s3)\n        best = min(best,split)\nprint(best)        "]