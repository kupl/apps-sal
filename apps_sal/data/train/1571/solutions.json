["# cook your dish here\nimport math\nT = int(input())\nfor _ in range(T):\n N, A, K = map(int, input().split(\" \"))\n total = (N-2) * 180\n diffT = total - N*A\n diffN = sum(range(1,N))\n r = (A*diffN+(K-1)*diffT)\n \n d = math.gcd(r, diffN)\n while d > 1:\n  r//=d\n  diffN//=d\n  d = math.gcd(r, diffN)\n print(r, diffN)", "# cook your dish here\nimport math\nT = int(input())\nfor _ in range(T):\n N, A, K = list(map(int, input().split(\" \")))\n total = (N-2) * 180\n \n # 360 = 60 + (1+2+3)*diff + 3*60\n # 360 = 240 + 6*diff\n # 120 = 6*diff\n # 120 / 6 = diff\n \n # K: 60 + (K-1) * diffT / diffN = (60*diffN+(K-1)*diffT) / diffN\n \n diffT = total - N*A\n diffN = sum(range(1,N))\n r = (A*diffN+(K-1)*diffT)\n \n d = math.gcd(r, diffN)\n while d > 1:\n  r//=d\n  diffN//=d\n  d = math.gcd(r, diffN)\n print(r, diffN)\n", "def hcfnaive(a,b): \n if(b==0): \n  return a \n else: \n  return hcfnaive(b,a%b)\n \nfor i in range(int(input())):\n (N,A,K)=map(int,input().split())\n s=180*(N-2)\n d=hcfnaive(A*N*(N-1)+(s-N*A)*2*(K-1),N*(N-1))\n print((A*N*(N-1)+(s-N*A)*2*(K-1))//d,(N*(N-1))//d)", "# cook your dish here\nimport math\nT = int(input())\nfor _ in range(T):\n N, A, K = list(map(int, input().split(\" \")))\n total = (N-2) * 180\n \n # 360 = 60 + (1+2+3)*diff + 3*60\n # 360 = 240 + 6*diff\n # 120 = 6*diff\n # 120 / 6 = diff\n \n # K: 60 + (K-1) * diffT / diffN = (60*diffN+(K-1)*diffT) / diffN\n \n diffT = total - N*A\n diffN = sum(range(1,N))\n r = (A*diffN+(K-1)*diffT)\n \n d = math.gcd(r, diffN)\n while d > 1:\n  r//=d\n  diffN//=d\n  d = math.gcd(r, diffN)\n print(r, diffN)\n", "# cook your dish here\n\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n \n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\n\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n \n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "def gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n \n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "def gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "def gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "def gcd(a,b):\n if b==0:\n  return a\n return gcd(b,a%b)\nt=int(input())\nfor i in range(t):\n temp=input().split()\n n=int(temp[0])\n a=int(temp[1])\n k=int(temp[2])\n #(n/2)(2a+(n-1)d)=(n-2)180\n tempn=(n-2)*180\n tempn=tempn*2\n tempd=n\n tempn=tempn-2*a*tempd\n tempd=tempd*(n-1)\n tempn=tempn*(k-1)+a*tempd\n g=gcd(tempn,tempd)\n tempn/=g\n tempd/=g\n print(int(tempn),int(tempd)) ", "def gcd(A, B):\n if B==0:\n  return A;\n else:\n  return gcd(B,A%B);\n\n\nt = int(input())\n\nfor _ in range(t):\n n,a,k = list(map(int, input().split()))\n #d = /(n*(n-1))\n num = a*(n*(n-1)) + (k-1)*(360*(n-2)-2*a*n)\n den = n*(n-1)\n print(f\"{num//gcd(num, den)} {den//gcd(num, den)}\")\n \n", "def gcd(A, B):\n if B==0:\n  return A;\n else:\n  return gcd(B,A%B);\n\n\nt = int(input())\n\nfor _ in range(t):\n n,a,k = list(map(int, input().split()))\n #d = /(n*(n-1))\n num = a*(n*(n-1)) + (k-1)*(360*(n-2)-2*a*n)\n den = n*(n-1)\n print(f\"{num//gcd(num, den)} {den//gcd(num, den)}\")\n \n", "# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\n# cook your dish here\n# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\n# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "# cook your dish here\ndef gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k\n s=s//k\n print(d+s*a,s)", "def gcd(d,s):\n if s==0:\n  return d\n else:\n  return gcd(s,d%s)\nfor _ in range(int(input())):\n n,a,k=[int(x) for x in input().split()]\n d = (360*(n-2)-2*a*n)*(k-1)\n s = n*(n-1)\n k = gcd(d,s)\n d = d//k \n s=s//k\n print(d+s*a,s)", "from fractions import Fraction\nfor i in range(int(input())):\n a = [int(x) for x in input().split()]\n n=a[0]\n A=a[1]\n k=a[2]\n q=A+((k-1)/(n-1))*(360*(n-2)/n -2*A)\n x=1\n if q-int(q)<1 and q-int(q)>0:\n  o=Fraction(q).limit_denominator()\n  print(o.numerator,o.denominator)\n else:\n  print(int(q),1)", "import math\nt=int(input())\nwhile(t!=0):\n t-=1\n n,a,k=list(map(int,input().split()))\n g=n*(n-1)\n d=(360*(n-2)-2*a*n)\n f=(a*g+(k-1)*d)\n j=math.gcd(f,g)\n b=f//j\n e=g//j\n print(b,e)\n\n"]