["from sys import stdin,stdout\nfrom math import gcd\nnmbr=lambda:int(stdin.readline())\nlst=lambda:list(map(int, stdin.readline().split()))\n\nfor _ in range(nmbr()):\n n=nmbr()\n a=lst()\n g=a[0]\n ans=0\n for v in a[1:]:\n  g=gcd(v,g)\n for i in a:\n  ans+=i//g\n print(g,ans)", "import math\nimport copy\nfrom functools import reduce\n\nt = int(input())\n\nfor i in range(t):\n n = input()\n nums = list(map(int, input().split()))\n n = copy.deepcopy(nums)\n gc = reduce(lambda x,y: math.gcd(x,y),n)\n cost = sum([x//gc for x in nums])\n print(gc,cost)\n \n", "# cook your dish here\ndef factors(n):\n res=[]\n for i in range (n//2,0,-1):\n  if (n%i==0):\n   res.append(i)\n return res\n\ndef wires(w):\n w.sort()\n a=w[0]\n cost=0\n for num in w:\n  if (num%a!=0):\n   fact=factors(a)\n   break\n  cost=cost+(num//a)\n else:\n  print(a,cost)\n  return None\n for char in fact:\n  cost=0\n  for num in w:\n   if (num%char!=0):\n    break\n   cost=cost+(num//char)\n  else:\n   print(char,cost)\n   return None\n \nt=int(input())\nfor _ in range (t):\n n=int(input())\n w=[int(x) for x in input().split()]\n wires(w)", "# cook your dish here\ntry:\n import math as m\n for _ in range(int(input())):\n  n=int(input())\n  a=[int(i) for i in input().split()]\n  if n==1:\n   print(a[0],1)\n   continue\n  g=m.gcd(a[0],a[1])\n  for i in range(2,n):\n   g=m.gcd(g,a[i])\n  s=0\n  for i in a:\n   s+=i//g \n  print(g,s)\nexcept : pass\n", "T = int(input())\n\ndef get_gcd(x, y):\n while(y):\n  x, y = y, x % y\n return x\n\nfor _ in range(T):\n N = int(input())\n num = list(map(int, input().split()))\n gcd = num[0]\n for n in num[1:]:\n  gcd = get_gcd(gcd, n)\n print(gcd, sum(num)//gcd)\n", "def find_gcd(x, y): \n while(y): \n  x, y = y, x % y \n return x\n\nt = int(input())\nfor i in range(t):\n n = int(input())\n if(n == 1):\n  cost = 1\n  gcd = int(input())\n else :\n  number = list(map(int,input().split()))\n  num1 = number[0] \n  num2 = number[1] \n  gcd = find_gcd(num1, num2) \n  for i in range(2, len(number)): \n   gcd = find_gcd(gcd, number[i]) \n  cost = sum(number)//gcd\n print(str(gcd)+ \" \"+ str(cost))", "from math import gcd, ceil\nt = int(input())\nfor _ in range(t):\n n = int(input())\n arr = list(map(int, input().split()))\n gcdd = arr[0]\n for i in range(1, n):\n  gcdd = gcd(arr[i], gcdd)\n print(gcdd, int(ceil(sum(arr) / gcdd))) ", "from fractions import gcd\nfrom functools import reduce\n\nt=int(input())\nfor i in range(0,t):\n n=int(input())\n a=list(map(int,input().split()))\n r1= reduce(gcd, a)\n r2= sum(a)//r1\n print(r1,r2)\n", "# cook your dish here\ntry:\n def find_gcd(x, y): \n  \n  while(y): \n   x, y = y, x % y \n   \n  return x \n for _ in range(int(input())):\n  n=int(input())\n  l=list(map(int,input().split()))\n  if n==1:\n   print(l[0],1)\n   continue\n  g=find_gcd(l[0],l[1])\n  for i in range(2,n):\n   g=find_gcd(g,l[i])\n  s=0\n  for i in l:\n   s+=i/g\n  print(g,int(s))\nexcept:pass ", "from math import gcd, ceil\nt = int(input())\nfor _ in range(t):\n n = int(input())\n arr = list(map(int, input().split()))\n gcdd = arr[0]\n for i in range(1, n):\n  gcdd = gcd(arr[i], gcdd)\n print(gcdd, int(ceil(sum(arr) / gcdd))) ", "from fractions import gcd\nfrom functools import reduce\nt=int(input())\nfor _ in range(t):\n n = int(input())\n list1 = list(map(int, input().split()))\n r= reduce(gcd, list1)\n r1= sum(list1)//r\n print(r,r1)", "# cook your dish here\ndef gcd(x, y):\n while y:\n  x, y = y, x % y\n return x\n\ndef lcm(x, y):\n return (x*y)//(gcd(x,y))\n\ndef isPrime(n) : \n if (n <= 1) : \n  return False\n if (n <= 3) : \n  return True\n if (n % 2 == 0 or n % 3 == 0) : \n  return False\n i = 5\n while(i * i <= n) : \n  if (n % i == 0 or n % (i + 2) == 0) : \n   return False\n  i = i + 6\n return True\n\nabc=\"abcdefghijklmnopqrstuvwxyz\"\n\npi=3.141592653589793238\n\n\ndef find_common(a):\n gcd_ = a[0]\n for i in range(1,len(a)):\n  gcd_ = gcd(gcd_,a[i])\n return(gcd_)\n\n\nt = int(input())\nfor _ in range(t):\n n = int(input())\n arr = list(map(int,input().split()))\n total = sum(arr)\n \n unit_size = find_common(arr)\n units = 0\n for i in arr:\n  units = units + i//unit_size\n print(unit_size,units)\n \n \n \n \n \n \n \n \n \n \n", "import math\n\ntest = int(input())\nfor _ in range(test):\n n = int(input())\n arr = [int(i) for i in input().split()]\n if len(arr) < 2:\n  print(str(arr[0])+\" \"+str(1))\n  continue\n num1 = arr[0] \n num2 = arr[1] \n gcd = math.gcd(num1,num2)\n for i in range(2, len(arr)): \n  gcd = math.gcd(gcd, arr[i]) \n cost = 0\n for i in range(len(arr)):\n  cost += (arr[i]/gcd)\n print(str(gcd)+\" \"+str(int(cost)))", "# cook your dish here\nfrom fractions import gcd\nfrom functools import reduce\n\nt=int(input())\nfor i in range(0,t):\n n=int(input())\n arr=list(map(int,input().split()))\n res= reduce(gcd, arr)\n res1= sum(arr)//res \n print(res,res1)\n", "import math\nfor _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n gc=a[0]\n for i in a :\n  gc=math.gcd(gc,i)\n print(gc,sum(a)//gc)", "# cook your dish here\nimport math\ndef find_gcd(x, y): \n while(y): \n  x, y = y, x % y \n \n return x \nt=int(input())\nfor i in range(0,t):\n n=int(input())\n l=list(map(int,input().split()))\n l.sort()\n x=len(l)\n if(x>2):\n  num1=l[0] \n  num2=l[1] \n  gcd=find_gcd(num1,num2) \n  for i in range(2,len(l)): \n   gcd=find_gcd(gcd,l[i]) \n elif(x==2):\n  gcd=math.gcd(l[0],l[1])\n else:\n  gcd=l[0]\n c=sum(l)//gcd\n print(gcd,c)", "\n\n\n\ndef main():\n t = int(input())\n for i in range(t):\n  N = int(input())\n  l = list(map(int, input().split()))\n  c=0\n  gcd=0\n  for j in range(min(l), 0 ,-1):\n   c=0\n   for k in l:\n    if k%j !=0:\n     break\n    else:\n     c+=1\n   if c == len(l):\n    gcd = j\n    break\n  cost=0\n  for j in l:\n   cost+= j // gcd\n  print(gcd, cost)\ndef __starting_point():\n main()\n# cook your dish here\n# cook your dish here\n\n__starting_point()", "# cook your dish here\nimport math\nt = int(input())\nfor i in range(t):\n n = int(input())\n lst = list(map(int, input().split()))\n lst = sorted(lst)\n minimum = min(lst)\n x = 1\n xlist=[]\n for k in range(1, minimum+1):\n  for j in lst:\n   if j%k==0:\n    xlist.append(k)\n   else:\n    break\n xlist = sorted(xlist, reverse = True)\n for m in xlist:\n  if xlist.count(m)==n:\n   print(m,math.ceil(sum(lst)/m))\n   break\n    \n  \n  \n  \n", "\n\n\n\ndef main():\n t = int(input())\n for i in range(t):\n  N = int(input())\n  l = list(map(int, input().split()))\n  c=0\n  gcd=0\n  for j in range(min(l), 0 ,-1):\n   c=0\n   for k in l:\n    if k%j !=0:\n     break\n    else:\n     c+=1\n   if c == len(l):\n    gcd = j\n    break\n  cost=0\n  for j in l:\n   cost+= j // gcd\n  print(gcd, cost)\ndef __starting_point():\n main()\n# cook your dish here\n# cook your dish here\n\n__starting_point()", "# cook your dish here\nimport math\nt=int(input())\nwhile t>0:\n n=int(input())\n arr=list(map(int,input().split()))\n y=0\n for x in arr:\n  y=math.gcd(x,y)\n  if y==1:\n   break\n z=sum(arr)\n print(y,' ',z//y)\n t-=1", "# cook your dish here\ndef factors(n):\n res=[]\n for i in range (n//2,0,-1):\n  if (n%i==0):\n   res.append(i)\n return res\n\ndef wires(w):\n w.sort()\n a=w[0]\n cost=0\n for num in w:\n  if (num%a!=0):\n   fact=factors(a)\n   break\n  cost=cost+(num//a)\n else:\n  print(a,cost)\n  return None\n for char in fact:\n  cost=0\n  for num in w:\n   if (num%char!=0):\n    break\n   cost=cost+(num//char)\n  else:\n   print(char,cost)\n   return None\n \nt=int(input())\nfor _ in range (t):\n n=int(input())\n w=[int(x) for x in input().split()]\n wires(w)", "import math\nfor _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n gc=a[0]\n for i in a :\n  gc=math.gcd(gc,i)\n print(gc,sum(a)//gc)\n\n", "# cook your dish here\ndef find_gcd(x, y): \n while(y): \n  x, y = y, x % y \n \n return x \nn=int(input())\nfor i in range(n):\n n1=int(input())\n l=list(map(int,input().split()))\n if(n1==1):\n  print(l[0],1)\n else:    \n  num1=l[0] \n  num2=l[1] \n  gcd=find_gcd(num1,num2) \n  for i in range(2,len(l)): \n   gcd=find_gcd(gcd,l[i]) \n  sum1=0 \n  for i in range(n1):\n   sum1+=(l[i]//gcd)\n  print(gcd,int(sum1)) \n", "import re\nimport math as mt\ndef __starting_point():\n T=int(input())\n while T:\n  n=int(input())\n  lt=[int(x) for x in input().split()]\n  p=0\n  sm=sum(lt)\n  for x in range(n):\n   p=mt.gcd(p,lt[x])\n   \n \n  print(p,sm//p)\n  T=T-1\n__starting_point()", "# cook your dish here\ndef gcd(a, b):\n if(b==0): \n  return a \n else: \n  return gcd(b,a%b) \n  \n  \nt = int(input())\nfor _ in range(t):\n n = int(input())\n a = list(map(int, input().split()))\n res = a[0]\n for i in a[1:]:\n  res = gcd(res, i)\n tot = 0\n for i in a:\n  tot += i//res\n print(res, tot)"]