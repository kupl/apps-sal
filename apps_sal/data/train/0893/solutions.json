["# cook your dish here\nfrom math import floor, sqrt\ntry:long\nexcept NameError:long = int \ndef fac(n):\n    step,maxq,d = lambda x: 1 + (x<<2) - ((x>>1)<<1),long(floor(sqrt(n))),1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n     q = step(d)\n     d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\nn,k,s = map(int,input().split())\na,di,l,m,ans,su =list(map(int,input().split())),{},[],0,0,0\nfor i in a:\n    bb,su = list(set(fac(i))),su+i\n    for j in bb:\n     try:di[j]+=1\n     except KeyError:m,di[j] = m+1,1\n    l.append(su*(k-m*s))\n    if su*(k-m*s) <0:m,di,su = 0,{},0\nprint(max(l))", "from math import floor, sqrt\ntry:long\nexcept NameError:long = int \ndef fac(n):\n    step,maxq,d = lambda x: 1 + (x<<2) - ((x>>1)<<1),long(floor(sqrt(n))),1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n     q = step(d)\n     d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\nn,k,s = map(int,input().split())\na,di,l,m,ans,su =list(map(int,input().split())),{},[],0,0,0\nfor i in a:\n    bb,su = list(set(fac(i))),su+i\n    for j in bb:\n     try:di[j]+=1\n     except KeyError:m,di[j] = m+1,1\n    l.append(su*(k-m*s))\n    if su*(k-m*s) <0:m,di,su = 0,{},0\nprint(max(l))", "# cook your dish here\nfrom math import floor, sqrt\ntry:long\nexcept NameError:long = int \ndef fac(n):\n    step,maxq,d = lambda x: 1 + (x<<2) - ((x>>1)<<1),long(floor(sqrt(n))),1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n     q = step(d)\n     d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\nn,k,s = map(int,input().split())\na,di,l,m,ans,su =list(map(int,input().split())),{},[],0,0,0\nfor i in a:\n    bb,su = list(set(fac(i))),su+i\n    for j in bb:\n     try:di[j]+=1\n     except KeyError:m,di[j] = m+1,1\n    l.append(su*(k-m*s))\n    if su*(k-m*s) <0:m,di,su = 0,{},0\nprint(max(l))", "from math import floor, sqrt\ntry:int\nexcept NameError:long = int \ndef fac(n):\n    step,maxq,d = lambda x: 1 + (x<<2) - ((x>>1)<<1),int(floor(sqrt(n))),1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n     q = step(d)\n     d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\nn,k,s = list(map(int,input().split()))\na,di,l,m,ans,su =list(map(int,input().split())),{},[],0,0,0\nfor i in a:\n    bb,su = list(set(fac(i))),su+i\n    for j in bb:\n     try:di[j]+=1\n     except KeyError:m,di[j] = m+1,1\n    l.append(su*(k-m*s))\n    if su*(k-m*s) <0:m,di,su = 0,{},0\nprint(max(l))\n", "from math import floor, sqrt\ntry:long\nexcept NameError:long = int \ndef fac(n):\n    step,maxq,d = lambda x: 1 + (x<<2) - ((x>>1)<<1),long(floor(sqrt(n))),1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n     q = step(d)\n     d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\nn,k,s = map(int,input().split())\na,di,l,m,ans,su =list(map(int,input().split())),{},[],0,0,0\nfor i in a:\n    bb,su = list(set(fac(i))),su+i\n    for j in bb:\n     try:di[j]+=1\n     except KeyError:m,di[j] = m+1,1\n    l.append(su*(k-m*s))\n    if su*(k-m*s) <0:m,di,su = 0,{},0\nprint(max(l))", "from math import floor, sqrt\ntry:long\nexcept NameError:long = int \ndef fac(n):\n    step,maxq,d = lambda x: 1 + (x<<2) - ((x>>1)<<1),long(floor(sqrt(n))),1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n     q = step(d)\n     d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\nn,k,s = map(int,input().split())\na,di,l,m,ans,su =list(map(int,input().split())),{},[],0,0,0\nfor i in a:\n    bb,su = list(set(fac(i))),su+i\n    for j in bb:\n     try:di[j]+=1\n     except KeyError:m,di[j] = m+1,1\n    l.append(su*(k-m*s))\n    if su*(k-m*s) <0:m,di,su = 0,{},0\nprint(max(l))", "# cook your dish here\nfrom math import floor, sqrt\ntry:long\nexcept NameError:long = int \ndef fac(n):\n    step,maxq,d = lambda x: 1 + (x<<2) - ((x>>1)<<1),long(floor(sqrt(n))),1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n     q = step(d)\n     d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\nn,k,s = map(int,input().split())\na,di,l,m,ans,su =list(map(int,input().split())),{},[],0,0,0\nfor i in a:\n    bb,su = list(set(fac(i))),su+i\n    for j in bb:\n     try:di[j]+=1\n     except KeyError:m,di[j] = m+1,1\n    l.append(su*(k-m*s))\n    if su*(k-m*s) <0:m,di,su = 0,{},0\nprint(max(l))", "from math import floor, sqrt\ntry:long\nexcept NameError:long = int \ndef fac(n):\n    step,maxq,d = lambda x: 1 + (x<<2) - ((x>>1)<<1),long(floor(sqrt(n))),1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n     q = step(d)\n     d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\nn,k,s = map(int,input().split())\na,di,l,m,ans,su =list(map(int,input().split())),{},[],0,0,0\nfor i in a:\n    bb,su = list(set(fac(i))),su+i\n    for j in bb:\n     try:di[j]+=1\n     except KeyError:m,di[j] = m+1,1\n    l.append(su*(k-m*s))\n    if su*(k-m*s) <0:m,di,su = 0,{},0\nprint(max(l))"]