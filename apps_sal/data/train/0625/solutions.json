["def subCount(arr, n, k):\r\n\r\n    mod = []\r\n    for i in range(k + 1):\r\n        mod.append(0)\r\n\r\n\r\n    cumSum = 0\r\n    for i in range(n):\r\n        cumSum = cumSum + arr[i]\r\n\r\n        # as the sum can be negative,\r\n        # taking modulo twice\r\n        mod[((cumSum % k) + k) % k] = mod[((cumSum % k) + k) % k] + 1\r\n\r\n    result = 0  # Initialize result\r\n\r\n    for i in range(k):\r\n\r\n\r\n        if (mod[i] > 1):\r\n            result = result + (mod[i] * (mod[i] - 1)) // 2\r\n\r\n\r\n    result = result + mod[0]\r\n\r\n    return result\r\nt=int(input())\r\nwhile t:\r\n    t=t-1\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    for i in range(n):\r\n        if a[i]==100000000:\r\n            a[i]=1\r\n        elif a[i]==900000000:\r\n            a[i]=9\r\n    s=10\r\n\r\n    print(subCount(a,n,s))\r\n", "def subCount(arr, n, k): \r\n    mod =[] \r\n    for i in range(k + 1): \r\n        mod.append(0) \r\n    cumSum = 0\r\n    for i in range(n): \r\n        cumSum = cumSum + arr[i] \r\n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\r\n    result = 0 \r\n    for i in range(k): \r\n        if (mod[i] > 1): \r\n            result = result + (mod[i]*(mod[i]-1))//2\r\n    result = result + mod[0] \r\n    return result \r\ndef inp(x):\r\n    return int(x.rstrip('0'))\r\ndef main(t):\r\n    k = 10\r\n    n = int(input())  \r\n    arr =  list(map(inp,input().split()))\r\n    print(subCount(arr, n, k))   \r\n    if t>1:\r\n        main(t-1)\r\nmain(int(input()))", "def subCount(arr, n, k): \r\n    mod =[] \r\n    for i in range(k + 1): \r\n        mod.append(0) \r\n    cumSum = 0\r\n    for i in range(n): \r\n        cumSum = cumSum + arr[i] \r\n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\r\n    result = 0 \r\n    for i in range(k): \r\n        if (mod[i] > 1): \r\n            result = result + (mod[i]*(mod[i]-1))//2\r\n    result = result + mod[0] \r\n    return result \r\ndef inp(x):\r\n    return int(x.rstrip('0'))\r\ndef main(t):\r\n    k = 10\r\n    n = int(input())  \r\n    arr =  list(map(inp,input().split()))\r\n    print(subCount(arr, n, k))   \r\n    if t>1:\r\n        main(t-1)\r\nmain(int(input())) \r\n", "import atexit\r\nimport io\r\nimport sys\r\nimport math\r\nfrom collections import defaultdict,Counter\r\n\r\n# _INPUT_LINES = sys.stdin.read().splitlines()\r\n# input = iter(_INPUT_LINES).__next__\r\n# _OUTPUT_BUFFER = io.StringIO()\r\n# sys.stdout = _OUTPUT_BUFFER\r\n\r\n# @atexit.register\r\n# def write():\r\n#     sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\r\n\r\n# sys.stdout=open(\"CP2/output.txt\",'w')\r\n# sys.stdin=open(\"CP2/input.txt\",'r')\r\n\r\nm=pow(10,9)\r\nt=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    d={0:1}\r\n    a=list(map(int,input().split()))\r\n    s=0\r\n    ans=0\r\n    for j in a:\r\n        s+=j\r\n        need=s%m\r\n        ans+=d.get(need,0)\r\n        s1=d.setdefault(s%m,0)\r\n        d[s%m]+=1\r\n    print(ans)", "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Wed Jun 24 21:34:16 2020\r\n\r\n@author: PREET MODH\r\n\"\"\"\r\n\r\ndef subCount(arr, n, k): \r\n    mod =[] \r\n    for i in range(k + 1): \r\n        mod.append(0) \r\n    cumSum = 0\r\n    for i in range(n): \r\n        cumSum = cumSum + arr[i] \r\n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\r\n      \r\n    result = 0\r\n    for i in range(k): \r\n        if (mod[i] > 1): \r\n            result = result + (mod[i]*(mod[i]-1))//2\r\n    \r\n    result = result + mod[0] \r\n    return result \r\n\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    for i in range(len(a)):\r\n        a[i]=a[i]//10**8\r\n  \r\n    print(subCount(a, n, 10))", "from sys import stdin, stdout\r\nM=10**8\r\nfor _ in range(int(stdin.readline())):\r\n    n = int(stdin.readline())\r\n    a=list([int(x)//M for x in stdin.readline().split()])\r\n    d={0:1};s=ans=0\r\n    for v in a:\r\n        s+=v\r\n        req=s%10\r\n        ans+=d.get(req,0)\r\n        d[req]=d.get(req,0)+1\r\n    print(ans)\r\n\r\n", "def solve(n, l):\n    k = 10\n    d =[] \n    for i in range(k + 1): \n        d.append(0) \n    cumSum = 0\n    for i in range(n): \n        cumSum = cumSum + l[i] \n        d[((cumSum % k)+k)% k]= d[((cumSum % k)+k)% k] + 1\n    result = 0 \n    for i in range(k):  \n        if (d[i] > 1): \n            result = result + (d[i]*(d[i]-1))//2\n    result = result + d[0] \n       \n    return result  \n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n):\n        l[i]=int(l[i]/100000000)\n    print(solve(n, l)) ", "from collections import defaultdict\nimport collections\ndef subarraysDivByK(A,K):\n        d = collections.defaultdict(int)\n        # generate accum\n        accum = [0,]*len(A)\n        for ai, a in enumerate(A): \n            div = a%K if ai == 0 else (a+accum[ai-1])%K\n            accum[ai] = div; d[div] += 1 \n        # count\n        #print(accum,d)\n        ans = 0\n        for k,v in list(d.items()):\n            ans +=  v*(v-1)//2\n            if k == 0: ans += v \n        return ans\nt=int(input())\nfor i in range(0,t):\n      n=int(input())\n      arr =  [int(x) for x in input().split()]   \n      Sum = 1000000000\n      print(subarraysDivByK(arr,Sum))  \n\n  \n", "from sys import stdin, stdout\nM=10**8\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a=list(map(lambda x:int(x)//M, stdin.readline().split()))\n    d={0:1};s=ans=0\n    for v in a:\n        s+=v\n        req=s%10\n        ans+=d.get(req,0)\n        d[req]=d.get(req,0)+1\n    print(ans)", "from collections import defaultdict\nfrom itertools import accumulate\nfor _ in range(int(input())):\n        n=int(input())\n        A=list(map(int,input().split()))\n        K=10**9\n        ans,rems=0,{0:1}\n        for i in range(len(A)):\n            if i>0: A[i]+=A[i-1]\n            rem=A[i]%K\n            if rem in rems:\n                ans+=rems[rem]\n                rems[rem]+=1\n            else:\n                rems[rem]=1\n        print(ans)\n", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    pref = []\n    # mods = []\n    d = {}\n    ans = 0\n    for i in range(n):\n        if i ==0:\n            pref.append(a[0])\n        else:\n            pref.append((pref[-1]+a[i]))\n        b = pref[-1]%1000000000\n        if b in d.keys():\n            if b==0:\n                ans +=1\n            ans +=d[b]\n            d[b]+=1\n        else:\n            if b==0:\n                ans +=1\n            d[b] = 1\n    print(ans)", "# cook your dish here\ndef subCount(arr, n, k=10): \n \n    mod =[] \n    for i in range(k + 1): \n        mod.append(0) \n    cumSum = 0\n    for i in range(n): \n        cumSum = cumSum + arr[i] \n\n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\n      \n    \n    result = 0  # Initialize result \n       \n    # Traverse mod[] \n    for i in range(k): \n        if (mod[i] > 1): \n            result = result + (mod[i]*(mod[i]-1))//2\n\n    result = result + mod[0] \n       \n    return result \n    \nfor t_itr in range(0,int(input())):\n    n = int(input())\n    a = list(map(str, input().split()))\n    b = []\n    for i in a:\n        b.append(int(i[0]))\n    res = subCount(b, n, 10)\n    print(res)\n    \n    \n", "# cook your dish here\nfor _ in range(int(input())):\n    N = int(input())\n    seq = list(map(int,input().split()))\n    count = {0:1}\n    total = 0\n    summ = 0\n    for i in range(N):\n        summ += seq[i]\n        r = summ%(10**9)\n        if count.get(r,0):\n            total += count[r]\n            count[r]+=1\n        else:\n            count[r] = 1\n    print(total)\n", "import collections\ndef subarraysDivByK(A, K):\n    P = [0]\n    for x in A:\n        P.append((P[-1] + x) % K)\n\n    count = collections.Counter(P)\n    return sum(v*(v-1)/2 for v in count.values())\n    \nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    arr=map(int,input().split())\n    print(int(subarraysDivByK(arr,1000000000)))", "t=int(input())\ndef subCount(arr, n, k): \n    #print(arr)\n    mod =[] \n    for i in range(k + 1): \n        mod.append(0) \n    allSum = 0\n    for i in range(n): \n        allSum = allSum + arr[i] \n        #print(allSum)\n        mod[(allSum % k)] += 1\n        #print(mod)\n      \n    \n    res = 0 \n    for i in range(k): \n        if (mod[i] > 1): \n            res = res + (mod[i]*(mod[i]-1))//2\n            \n    res = res + mod[0] \n       \n    return res\nfor _ in range(t):\n    n=int(input())\n    a=[int(k)//(10**8) for k in input().split()]\n    #print(a)\n    print(subCount(a,n,10))\n", "# cook your dish here\ndef subCount(arr, n, k=10): \n \n    mod =[] \n    for i in range(k + 1): \n        mod.append(0) \n    cumSum = 0\n    for i in range(n): \n        cumSum = cumSum + arr[i] \n\n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\n      \n    \n    result = 0  # Initialize result \n       \n    # Traverse mod[] \n    for i in range(k): \n        if (mod[i] > 1): \n            result = result + (mod[i]*(mod[i]-1))//2\n\n    result = result + mod[0] \n       \n    return result \n    \nfor t_itr in range(0,int(input())):\n    n = int(input())\n    a = list(map(str, input().split()))\n    b = []\n    for i in a:\n        b.append(int(i[0]))\n    result = subCount(b, n, 10)\n    print(result)\n    \n    \n", "\ndef subCount(arr, n, k): \n\tmod =[] \n\tfor i in range(k + 1): \n\t\tmod.append(0) \n\tcumSum = 0\n\tfor i in range(n): \n\t\tcumSum = cumSum + arr[i] \n\t\tmod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\n\t\n\t\n\tresult = 0 # Initialize result \n\t\n\t# Traverse mod[] \n\tfor i in range(k): \n\t\tif (mod[i] > 1): \n\t\t\tresult = result + (mod[i]*(mod[i]-1))//2\n\t\n\tresult = result + mod[0] \n\t\n\treturn result \n\t\nt=int(input())\nwhile(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=[]\n    for i in a:\n        b.append(i//100000000)\n    \n    print(subCount(b, n, 10)) \n    t=t-1", "def subCount(arr, n, k): \n    mod =[] \n    for i in range(k + 1): \n        mod.append(0) \n    cumSum = 0\n    for i in range(n): \n        cumSum = cumSum + arr[i] \n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\n\n    result = 0\n\n    for i in range(k): \n\n        if (mod[i] > 1): \n            result = result + (mod[i]*(mod[i]-1))//2\n    result = result + mod[0] \n    return result \n\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    ar = [int(i) for i in input().split()]\n    a = []\n    for i in ar:\n        if i==100000000:\n            a.append(1)\n        else:\n            a.append(9)\n    print(subCount(a, n, 10))", "def subCount(arr, n, k, mod, cumSum, result): \n\tfor i in range(k + 1):mod.append(0) \t\n\tfor i in range(n):cumSum += arr[i];mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\n\tfor i in range(k): \n\t\tif (mod[i] > 1):result = result + (mod[i]*(mod[i]-1))//2\t\n\treturn result + mod[0]\nfor _ in range(int(input())):\n    n,a = int(input()),list(map(int,input().split()))\n    for i in range(n):a[i] //= (10**8)\n    print(subCount(a,n,10,[],0,0))", "\n# code from gfg: https://www.geeksforgeeks.org/count-sub-arrays-sum-divisible-k/\nwhile(1):\n    for _ in range(int(input())):\n        n=int(input())\n        l=list(map(int,input().split()))\n        g=[]\n        for i in l:\n            if i==900000000:\n                g.append(9)\n            else:\n                g.append(1)\n        k=10\n        m = []\n        for i in range(k + 1):\n            m.append(0)\n        cs = 0\n        for i in range(n):\n            cs = cs + g[i]\n            m[((cs % k) + k) % k] = m[((cs % k) + k) % k] + 1\n        r = 0\n        for i in range(k):\n            if (m[i] > 1):\n                r = r + (m[i] * (m[i] - 1)) // 2\n        r = r + m[0]\n\n        print(r)\n    break\n\n", "# cook your dish here\ndef subCount(arr, n, k=10): \n \n    mod =[] \n    for i in range(k + 1): \n        mod.append(0) \n    cumSum = 0\n    for i in range(n): \n        cumSum = cumSum + arr[i] \n\n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\n      \n    \n    result = 0  # Initialize result \n       \n    # Traverse mod[] \n    for i in range(k): \n        if (mod[i] > 1): \n            result = result + (mod[i]*(mod[i]-1))//2\n\n    result = result + mod[0] \n       \n    return result \n    \nfor t_itr in range(0,int(input())):\n    n = int(input())\n    a = list(map(str, input().split()))\n    b = []\n    for i in a:\n        b.append(int(i[0]))\n    result = subCount(b, n, 10)\n    print(result)\n    \n", "# cook your dish here\ndef subCount(arr, n, k=10): \n \n    mod =[] \n    for i in range(k + 1): \n        mod.append(0) \n    cumSum = 0\n    for i in range(n): \n        cumSum = cumSum + arr[i] \n\n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\n      \n    \n    result = 0  # Initialize result \n       \n    # Traverse mod[] \n    for i in range(k): \n        if (mod[i] > 1): \n            result = result + (mod[i]*(mod[i]-1))//2\n\n    result = result + mod[0] \n       \n    return result \n    \nfor t_itr in range(0,int(input())):\n    n = int(input())\n    a = list(map(str, input().split()))\n    b = []\n    for i in a:\n        b.append(int(i[0]))\n    result = subCount(b, n, 10)\n    print(result)\n    \n    \n", "# cook your dish here\ndef subCount(arr, n, k=10): \n \n    mod =[] \n    for i in range(k + 1): \n        mod.append(0) \n    cumSum = 0\n    for i in range(n): \n        cumSum = cumSum + arr[i] \n\n        mod[((cumSum % k)+k)% k]= mod[((cumSum % k)+k)% k] + 1\n      \n    \n    result = 0  # Initialize result \n       \n    # Traverse mod[] \n    for i in range(k): \n        if (mod[i] > 1): \n            result = result + (mod[i]*(mod[i]-1))//2\n\n    result = result + mod[0] \n       \n    return result \n    \nfor t_itr in range(0,int(input())):\n    n = int(input())\n    a = list(map(str, input().split()))\n    b = []\n    for i in a:\n        b.append(int(i[0]))\n    result = subCount(b, n, 10)\n    print(result)\n    \n    \n", "for s in[*open(0)][2::2]:\n d = {0: 1}\n t = 0\n for x in s.split():\n  t = (t + int(x[0])) % 10\n  d[t] = d.get(t, 0) + 1\n print(sum(k * (k - 1) // 2 for k in list(d.values())))\n", "# cook your dish here\ndef subCount(arr, n, k):\n  \n    mod = []\n    for i in range(k + 1):\n        mod.append(0)\n\n      \n    cumSum = 0\n    for i in range(n):\n        cumSum = cumSum + arr[i]\n\n        \n        mod[((cumSum % k) + k) % k] = mod[((cumSum % k) + k) % k] + 1\n\n    result = 0  \n\n   \n    for i in range(k):\n\n        if (mod[i] > 1):\n            result = result + (mod[i] * (mod[i] - 1)) // 2\n\n    result = result + mod[0]\n\n    return result\nfor _ in range(int(input())):\n    n=int(input())\n    a=input().split()\n    b=[]\n    for i in range(len(a)):\n        b.append(int(a[i][0]))\n    print(subCount(b,len(b),10))\n"]