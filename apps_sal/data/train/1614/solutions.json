["COLUMNS, ROWS = 'ABCDEFG', range(6)\nLINES = [{(COLUMNS[i+k], ROWS[j]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\n        + [{(COLUMNS[i], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j+k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\n        + [{(COLUMNS[i+k], ROWS[j-k]) for k in range(4)}\n           for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\n\ndef who_is_winner(pieces_positions):\n    players = {}\n    board = dict.fromkeys(COLUMNS, 0)\n    for position in pieces_positions:\n        column, player = position.split('_')\n        pos = (column, board[column])\n        board[column] += 1\n        players.setdefault(player, set()).add(pos)\n        if any(line <= players[player] for line in LINES):\n            return player\n    return \"Draw\"", "from itertools import count, takewhile\n\nX, Y, HALF_DIRS = 6, 7, ((0,1),(1,0),(1,1),(1,-1))\n\n\ndef who_is_winner(lstMoves):\n    \n    def isWinner(): return any(countAligned(*dirs)>=4 for dirs in HALF_DIRS)\n    \n    def isInsideAndSameGuy(a,b): return 0<=a<X and 0<=b<Y and board[a][b]==who\n    \n    def countAligned(dx,dy):\n        return 1 + sum( sum( takewhile(bool, (isInsideAndSameGuy(x+dx*swap*n, y+dy*swap*n) for n in count(1)) ))\n                        for swap in (1,-1) )\n    \n    \n    board = [[' ']*Y for _ in range(X)]\n    xIdx  = [0]*Y\n    \n    for move in lstMoves:\n        y, who      = ord(move[0])-65, move[2]\n        x           = xIdx[y]\n        board[x][y] = who\n        xIdx[y]    += 1\n        if isWinner(): return move[2:]\n    else:\n        return \"Draw\"", "def who_is_winner(pieces_position_list):\n\n    grid = [[0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0]]   \n            \n    columns = 7\n    rows = 6\n    rowPosition = 0\n    winner = None\n    drawCount = 0\n    \n    for piece in pieces_position_list:\n        if piece[2] == \"Y\":\n            code = 2\n        else:\n            code = 1\n            \n        if piece[0] == \"A\":\n            columnPosition = 0\n        elif piece[0] == \"B\":\n            columnPosition = 1\n        elif piece[0] == \"C\":\n            columnPosition = 2\n        elif piece[0] == \"D\":\n            columnPosition = 3\n        elif piece[0] == \"E\":\n            columnPosition = 4\n        elif piece[0] == \"F\":\n            columnPosition = 5\n        elif piece[0] == \"G\":\n            columnPosition = 6\n            \n        while grid[rowPosition][columnPosition] != 0:\n            if grid[5][columnPosition] == 1 or grid[5][columnPosition] == 2:\n                break\n            rowPosition += 1       \n        grid[rowPosition][columnPosition] = code\n        rowPosition = 0\n        \n        #check horizontal positions for winner\n        for row in range(rows):\n            for column in range(columns-3):\n                if grid[row][column] == 1 and grid[row][column+1] == 1 and grid[row][column+2] == 1 and grid[row][column+3] == 1:\n                    winner = \"Red\"\n                elif grid[row][column] == 2 and grid[row][column+1] == 2 and grid[row][column+2] == 2 and grid[row][column+3] == 2:\n                    winner = \"Yellow\"\n                    \n        #check vertical positions\n        for row in range(rows-3):\n            for column in range(columns):\n                if grid[row][column] == 1 and grid[row+1][column] == 1 and grid[row+2][column] == 1 and grid[row+3][column] == 1:\n                    winner = \"Red\"\n                elif grid[row][column] == 2 and grid[row+1][column] == 2 and grid[row+2][column] == 2 and grid[row+3][column] == 2:\n                    winner = \"Yellow\"\n                    \n        #check left vertical positions\n        for row in range(3,rows):\n            for column in range(columns-3):\n                if grid[row][column] == 1 and grid[row-1][column+1] == 1 and grid[row-2][column+2] == 1 and grid[row-3][column+3] == 1:\n                    winner = \"Red\"\n                elif grid[row][column] == 2 and grid[row-1][column+1] == 2 and grid[row-2][column+2] == 2 and grid[row-3][column+3] == 2:\n                    winner = \"Yellow\"\n        \n        #check right vertical positions\n        for row in range(rows-3):\n            for column in range(columns-3):\n                if grid[row][column] == 1 and grid[row+1][column+1] == 1 and grid[row+2][column+2] == 1 and grid[row+3][column+3] == 1:\n                    winner = \"Red\"\n                elif grid[row][column] == 2 and grid[row+1][column+1] == 2 and grid[row+2][column+2] == 2 and grid[row+3][column+3] == 2:\n                    winner = \"Yellow\"\n\n        #check winning condition\n        if winner == \"Red\":\n            return \"Red\"\n            break\n        elif winner == \"Yellow\":\n            return \"Yellow\"\n            break\n            \n    if winner == None:\n        return \"Draw\"\n    \n        \n        \n", "import numpy as np\nfrom scipy.signal import convolve2d\ndef who_is_winner(pieces_position_list):\n    arr = np.zeros((7,6), int)\n    for a in pieces_position_list:\n        pos, color = a.split('_')\n        pos = ord(pos) - ord('A')\n        val = (-1,1)[color == 'Red']\n        arr[pos, np.argmin(arr[pos] != 0)] = val\n        t_arr = val * arr\n        if any(np.max(cv) == 4 for cv in (convolve2d(t_arr, [[1,1,1,1]], 'same'),\n                                          convolve2d(t_arr, [[1],[1],[1],[1]], 'same'),\n                                          convolve2d(t_arr, [[1,0,0,0], [0,1,0,0], [0,0,1,0], [0,0,0,1]], 'same'),\n                                          convolve2d(t_arr, [[0,0,0,1], [0,0,1,0], [0,1,0,0], [1,0,0,0]], 'same'))):\n            return color\n    return 'Draw'", "from numpy import diagonal, rot90\n\ndef who_is_winner(pieces_position_list):\n    board = [[' ']*6 for _ in range(7)]\n    \n    def check(i, j, p):\n        if p in ''.join(board[i]): return True\n        if p in ''.join(list(zip(*board))[j]): return True\n        if p in ''.join(diagonal(board, j-i)): return True\n        if p in ''.join(diagonal(rot90(board), +i+j-5)): return True\n        return False\n    \n    id = [0]*7\n    for move in pieces_position_list:\n        i, p = ord(move[0]) - 65, move[2]\n        j = id[i]\n        board[i][j], id[i] = p, j+1\n        if check(i, j, p*4):\n            return \"Yellow\" if p == 'Y' else \"Red\"\n    return \"Draw\"", "import re\ndef who_is_winner(pieces_position_list):\n    # Your code here!\n    tempList=[\"\".join([\"*\" for j in range(7)])+\"\\t\" for i in range(6)]\n    for i in pieces_position_list:\n        temp=i.split(\"_\")   \n        columns=ord(temp[0])-ord(\"A\")\n        sign=\"1\" if temp[1]==\"Red\" else \"2\"\n        for j in range(len(tempList)):\n            if tempList[j][columns]==\"*\":\n                tempList[j]=tempList[j][:columns]+sign+tempList[j][columns+1:]\n                break\n        else:\n            return \"Draw\"\n        win=GetWin(\"\".join(tempList))\n        if win!=\"Draw\":\n            print(win)\n            return win\n    else:\n        return \"Draw\"\n    pass\n    \ndef GetWin(string):\n    if re.search(r\"1{4,}|1(?:.{7}1){3,}|1(?:.{8}1){3,}|1(?:.{6}1){3,}\",string):\n        return \"Red\"\n    if re.search(r\"2{4,}|2(?:.{7}2){3,}|2(?:.{8}2){3,}|2(?:.{6}2){3,}\",string):\n        return \"Yellow\"\n    return \"Draw\"", "def who_is_winner(moves):\n    G = {(c, r):' ' for r in range(6) for c in range(7)}\n\n    for col, colour in [(ord(m[0]) - ord('A'), m[2]) for m in moves]:\n        for row in range(6):\n            if G[(col, row)] == ' ':\n                G[(col,row)] = colour\n                break\n        if colour*4 in ' '.join([''.join(G[(col, k)] for k in range(6)),\n                                 ''.join(G[(k, row)] for k in range(7)),\n                                 ''.join(G.get((k, row - col + k), ' ') for k in range(7)),\n                                 ''.join(G.get((k, row + col - k), ' ') for k in range(7))]): return {'Y':'Yellow', 'R':'Red'}[colour]\n    return 'Draw'        ", "import string\n\n\ndef vertical_win(game_board_matrix):\n    win = 0\n    for x_value in range(0, 7):\n        coloumn = [game_board_matrix[i][x_value] for i in range(0, 6)]\n        i=0\n        while i < 3:\n            row4 = coloumn [i:i+4]\n            i+=1\n            if row4.count('R') == 4:\n                win = 1\n            if row4.count('Y') == 4:\n                win = 1\n    if win == 1:\n        return True\n    elif win == 0:\n        return False\n\ndef diagonal_left_win(matrix):\n    win = 0\n    for height_level in range(2,-1,-1):\n        for x in range(6,2, -1):\n            diagonal = [matrix[height_level+offset][x-offset] for offset in range(0,4)]\n            if diagonal.count('R') == 4:\n                win = 1\n            if diagonal.count('Y') == 4:\n                win = 1\n    return win\n\ndef diagonal_right_win(matrix):\n    win = 0\n    for height_level in range(2,-1,-1):\n        for x in range(0,4, 1):\n            diagonal = [matrix[height_level+offset][x+offset] for offset in range(0,4)]\n            if diagonal.count('R') == 4:\n                win = 1\n            if diagonal.count('Y') == 4:\n                win = 1\n    return win\n\ndef horizontal_win(matrix):\n    win = 0\n    for row in matrix:\n        i=0\n        while i < 4:\n            row4 = row [i:i+4]\n            i+=1\n            if row4.count('R') == 4:\n                win = 1\n            if row4.count('Y') == 4:\n                win = 1\n    if win == 1:\n        return True\n    elif win == 0:\n        return False\n    \n    \ndef who_is_winner(pieces_position_list):\n    heigth_list = [ 5, 5,5,5,5,5,5 ]\n    w, h = 7, 6;\n    game_board = [[0 for x in range(w)] for y in range(h)]\n    move_dict = {}\n    letters = list(string.ascii_uppercase)[0:7]\n    for letter, i in enumerate(letters):\n        move_dict[i] = letter\n    \n    parsed_moves = [   parsed_move.split(\"_\") for parsed_move in pieces_position_list]\n    converted_moves = [[move_dict[move[0]], move[1]] for move in parsed_moves]\n    for move in converted_moves:\n        x_coordinate, colour = move\n        game_board[heigth_list[x_coordinate]][x_coordinate] = colour[0]\n        if heigth_list[x_coordinate] > 0:\n            heigth_list[x_coordinate] = heigth_list[x_coordinate] - 1\n        if horizontal_win(game_board) or vertical_win(game_board) or diagonal_left_win(game_board) or diagonal_right_win(game_board):\n            return colour\n    diagonal_left_win(game_board)\n    return \"Draw\"", "def who_is_winner(pieces_position_list):\n  C, counts, rows = {'R':'Red', 'Y':'Yellow'}, [0,0,0,0,0,0,0], 6\n  grid, slots, I = list(), 7, {'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6}\n  # grid index is 0-6 for A-G. Contains list up to 6 \"R\"=-1 or \"Y\"=1 (or None = 0)\n  for i in range(7): grid.append([0,0,0,0,0,0])\n  for piece in pieces_position_list:\n    slot, color = I[piece[0]], C[piece[2]]\n    grid[slot][counts[slot]] = color\n    # Test win condition\n    # VERTICAL\n    n = 0\n    for y in range(counts[slot], rows):\n      if grid[slot][y] == color: n += 1\n      else: break\n    for y in range(counts[slot]-1, -1, -1):\n      if grid[slot][y] == color: n += 1\n      else: break\n    if n >= 4: return color\n    # HORIZONTAL\n    n = 0\n    for x in range(slot, slots):\n      if grid[x][counts[slot]] == color: n += 1\n      else: break\n    for x in range(slot-1, -1, -1):\n      if grid[x][counts[slot]] == color: n += 1\n      else: break\n    if n >= 4: return color\n    # NORTHEAST\n    x, y, n = slot, counts[slot], 0 \n    while x < slots and y < rows:\n      if grid[x][y] == color: x, y, n = x+1, y+1, n+1\n      else: break\n    x, y = slot-1, counts[slot]-1\n    while x >= 0 and y >= 0:\n      if grid[x][y] == color: x, y, n = x-1, y-1, n+1\n      else: break\n    if n >= 4: return color\n    # NORTHWEST\n    x, y, n = slot, counts[slot], 0 \n    while x >= 0 and y < rows:\n      if grid[x][y] == color: x, y, n = x-1, y+1, n+1\n      else: break\n    x, y = slot+1, counts[slot]-1\n    while x < slots and y >= 0:\n      if grid[x][y] == color: x, y, n = x+1, y-1, n+1\n      else: break\n    if n >= 4: return color\n    counts[slot] += 1\n  return \"Draw\"\n", "def who_is_winner(moves):\n    field = [[' ' for i in range(7)] for j in range(6)]\n    \n    for move in moves:\n        column, color = move.split('_')\n        \n        field = place_color(field, column, color)\n        result = check_win(field)\n        \n        if result:\n            return result\n    return 'Draw'\n\ndef check_win(field):\n    field = list(reversed(field))\n    \n    for i in field:  # Horizontal win check\n        for j in range(4):\n            h = set(i[j:4+j])\n            \n            if   h == {'R'}: return 'Red'\n            elif h == {'Y'}: return 'Yellow'\n    \n    for i in range(3):  # Vertical win check\n        for j in range(7):\n            v = set([field[i+k][j] for k in range(4)])\n        \n            if   v == {'R'}: return 'Red'\n            elif v == {'Y'}: return 'Yellow'\n    \n    for i in range(3):  # Diagonal win check\n        for j in range(4):\n            r = [field[i][j], field[i+1][j+1], field[i+2][j+2], field[i+3][j+3]]\n            l = [field[i][-j-1], field[i+1][-j-2], field[i+2][-j-3], field[i+3][-j-4]]\n            \n            if   set(r) == {'R'} or set(l) == {'R'}: return 'Red'\n            elif set(r) == {'Y'} or set(l) == {'Y'}: return 'Yellow'\n    \n    return 0           \n\ndef place_color(field, column, color):\n    index = {'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6}[column]\n    \n    for i in range(1, 7+1):\n        if field[-i][index] == ' ': \n            field[-i][index] = color[0]\n            break\n    \n    return field\n    \n"]