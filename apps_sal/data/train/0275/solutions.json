["class Solution:\n     def checkValidString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         low, high = 0, 0\n         for c in s:\n             if c == \"(\":\n                 low += 1\n                 high += 1\n             elif c == \")\":\n                 if low > 0:\n                     low -= 1\n                 high -= 1\n             else:\n                 if low > 0:\n                     low -= 1\n                 high += 1\n             if high < 0:\n                 return False\n         return low == 0", "class Solution:\n     def checkValidString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         rem={}\n         def dfs(i,c):\n             if c<0:\n                 return False\n             elif i==len(s):\n                 return not c\n             elif (i,c) in rem:\n                 return rem[(i,c)]\n             else:\n                 if s[i]=='(':\n                     rem[(i,c)]=dfs(i+1,c+1)\n                 elif s[i]==')':\n                     rem[(i,c)]=dfs(i+1,c-1)\n                 else:\n                     rem[(i,c)]=dfs(i+1,c) or dfs(i+1,c-1) or dfs(i+1,c+1)\n             return rem[(i,c)]\n         return dfs(0,0)", "class Solution:\n     def checkValidString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         l = r = star = 0\n         \n         for c in s:\n             if c == \"(\":\n                 l+=1\n             if c == \")\":\n                 r+=1\n             if c == \"*\":\n                 star+=1\n             if r > star + l:\n                 return False\n             \n         l = r = star = 0\n         \n         for c in s[::-1]:\n             if c == \"(\":\n                 l +=1\n             if c == \")\":\n                 r +=1\n             if c == \"*\":\n                 star +=1\n             if l > star + r:\n                 return False\n         return True", "class Solution:\n     def checkValidString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         open = 0\n         star = 0\n         count = {'(' : 0, ')' : 0, '*' : 0}\n         newS = []\n         for i in s:\n             #count[i] += 1\n             if i == ')':\n                 if open > 0:\n                     open -= 1\n                     del newS[len(newS) - 1 - newS[::-1].index('(')]\n                 elif star > 0:\n                     star -= 1\n                     del newS[len(newS) - 1 - newS[::-1].index('*')]                    \n                 else:\n                     return False\n             elif i == '(':\n                 open += 1\n                 newS += '('\n             else:\n                 star += 1\n                 newS += '*'\n                \n         if star >= open:\n             o = 0\n             s = 0\n             for i in newS:\n                 if i == '(':\n                     o += 1\n                 elif i == '*':\n                     if o > 0:\n                         o -= 1\n                         \n             if o != 0:\n                 return False\n             else:\n                 return True\n         else:\n             return False   \n                     \n", "class Solution:\n     def checkValidString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         a=0\n         b=0\n         for i in range(len(s)) : #\n             if s[i]== \"*\" : # The case of *\n                 a = a+1 #To account for its possibility to be the opening of a brace pair\n                 if b>0 : #To accout for its possibility to be the closing of a pair\n                     b = b-1\n \n             elif s[i]==\"(\" : #For each open brace you see, increment a and b (marking the potential to make a pair)\n                 a = a+1\n                 b = b+1\n \n             elif s[i]==\")\" :\n                 a = a-1 #For each ) brace, decrement a - marking one complete pair.\n                 if b>0 : #This check is to ensure the terminating check - b==0 i.e. each ( has a pairing ).\n                     b = b-1\n \n             if a<0 : # If at any point the number of closing braces are more than opening braces, terminate\n                 return False\n \n         if b==0 : # If the number of pairs are balanced, return true\n             return True\n         else :\n             return False", "class Solution:\n     def checkValidString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         cmin = cmax = 0\n         for i in s:\n             if i == '(':\n                 cmax += 1\n                 cmin += 1\n             if i == ')':\n                 cmax -= 1\n                 cmin = max(cmin - 1, 0)\n             if i == '*':\n                 cmax += 1\n                 cmin = max(cmin - 1, 0)\n             if cmax < 0:\n                 return False\n         return cmin == 0\n", "class Solution:\n     def checkValidString(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         lo, hi = 0, 0\n         for c in s:\n             lo += 1 if c == \"(\" else -1\n             hi += 1 if c != \")\" else -1\n             if hi < 0:\n                 break\n             lo = max(lo, 0)\n         return lo == 0\n"]