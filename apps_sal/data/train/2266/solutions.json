["import sys\n\ninput=sys.stdin.readline\n\nN,M=list(map(int,input().split()))\n\n# N: \u51e6\u7406\u3059\u308b\u533a\u9593\u306e\u9577\u3055\nINF = 2**31-1\n\nLV = (M+2-1).bit_length()\nN0 = 2**LV\ndata = [0]*(2*N0)\nlazy = [0]*(2*N0)\n\ndef gindex(l, r):\n    L = (l + N0) >> 1; R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & -L).bit_length()\n    rc = 0 if r & 1 else (R & -R).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if L < R and lc <= i:\n            yield L\n        L >>= 1; R >>= 1\n\n# \u9045\u5ef6\u4f1d\u642c\u51e6\u7406\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i-1]\n        if not v:\n            continue\n        lazy[2*i-1] += v; lazy[2*i] += v\n        data[2*i-1] += v; data[2*i] += v\n        lazy[i-1] = 0\n\n# \u533a\u9593[l, r)\u306bx\u3092\u52a0\u7b97\ndef update(l, r, x):\n    *ids, = gindex(l, r)\n    propagates(*ids)\n\n    L = N0 + l; R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R-1] += x; data[R-1] += x\n        if L & 1:\n            lazy[L-1] += x; data[L-1] += x\n            L += 1\n        L >>= 1; R >>= 1\n    for i in ids:\n        data[i-1] = min(data[2*i-1], data[2*i])\n\n# \u533a\u9593[l, r)\u5185\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l; R = N0 + r\n\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = min(s, data[R-1])\n        if L & 1:\n            s = min(s, data[L-1])\n            L += 1\n        L >>= 1; R >>= 1\n    return s\n\nfor i in range(1,M+1):\n    update(0,i+1,1)\n\nadd=M-N\nhito=[]\nfor i in range(N):\n    L,R=list(map(int,input().split()))\n    hito.append((L,R))\nhito.sort()\n#test=[query(i,i+1) for i in range(M+2)]\n#print(test)\nfor l,r in hito:\n    update(0,r+1,-1)\n    #test=[query(i,i+1) for i in range(M+2)]\n    #print(test)\n    m=query(l+1,M+2)+l\n    add=min(m,add)\n\nprint((max(-add,0)))\n", "from operator import itemgetter\nfrom heapq import heappush, heappop\nN, M = list(map(int, input().split()))\nLR = [list(map(int, input().split())) for _ in range(N)]\nLR.sort(key=itemgetter(1))\nA = []\nans_left = 0\nidx = 1\nfor _, r in LR:\n    if r==M+1 or idx==M+1:\n        break\n    ans_left += 1\n    idx = max(idx+1, r+1)\n\nidx_LR = 0\nq = []\nfor i in range(M+1-ans_left, M+1):\n    while idx_LR<N and LR[idx_LR][1]<=i:\n        l, _ = LR[idx_LR]\n        heappush(q, l)\n        idx_LR += 1\n    heappop(q)\nwhile idx_LR<N:\n    l, _ = LR[idx_LR]\n    q.append(l)\n    idx_LR += 1\n\nq.sort(reverse=True)\nans_right = 0\nidx = M\nfor l in q:\n    if l==0 or idx==0 or ans_right+ans_left==M:\n        break\n    ans_right += 1\n    idx = min(l-1, idx-1)\nans = N - ans_left - ans_right\nprint(ans)\n"]