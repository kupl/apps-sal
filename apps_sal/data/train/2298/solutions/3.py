#!/usr/bin/env python3
import sys


def solve(N: int, T: int, A: "List[int]"):
    right_max = [0] * N # i番目よりあとで一番大きいA_i
    m_a = 0
    for i in range(1, N):
        m_a = max(m_a, A[-i])
        right_max[-i-1] = m_a

    m_p = 0
    count = 0
    for i, a in enumerate(A):
        profit = right_max[i] - a
        if profit > m_p:
            m_p = profit
            count = 1
        elif profit == m_p:
            count += 1
    print(count)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    A = [ int(next(tokens)) for _ in range(N) ]  # type: "List[int]"
    solve(N, T, A)

def __starting_point():
    main()

__starting_point()
