["N,T = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\ncummax = [A[-1]]\nfor a in reversed(A[:-1]):\n    cummax.append(max(cummax[-1], a))\ncummax.reverse()\n\nmaxgain = n = 0\nfor buy,sell in zip(A,cummax):\n    gain = sell - buy\n    if gain > maxgain:\n        maxgain = gain\n        n = 1\n    elif gain == maxgain:\n        n += 1\nprint(n)\n", "N, T = map(int, input().split())\nxs = list(map(int, input().split()))\n\nm = 10**10\nM = 0\nans = 1\nfor x in xs:\n    if x < m:\n        m = x\n    elif x - m == M:\n        ans += 1\n    elif x - m > M:\n        ans = 1\n        M = x - m\n\nprint(ans)", "from sys import stdin\ninput = stdin.readline\nN,T = list(map(int,input().split()))\nprices = list(map(int,input().split()))\nlast = 10000000000\nhighestTally = [prices[-1]]\nhighestCount = [1]\n\nfor price in prices[-2:-N-1:-1]:\n    if price==highestTally[-1]:\n        highestCount.append(highestCount[-1]+1)\n    else:\n        highestCount.append(1)\n    highestTally.append(max(highestTally[-1],price))\nhighestTally.reverse()\nhighestCount.reverse()\n\nindexOfHighest={}\nfor i in range(N-1,-1,-1):\n    if highestTally[i]==prices[i]:\n        indexOfHighest[highestTally[i]]=i\n\nbiggestJump=0\nsellingPriceForBiggestJump=0\nHPcount=0\nLPcount=0\nHPGroups=[]\nLPGroups=[]\nfor index,price in enumerate(prices):\n    if index==N-1:\n        break\n    bestSellingPrice = highestTally[index+1]\n    jump = bestSellingPrice-price\n    #print(jump,bestSellingPrice,biggestJump)\n    if jump>biggestJump:\n        biggestJump = jump\n        #LPcount+=1\n        LPGroups=[]\n        HPGroups=[]\n        \n        LPGroups.append(1)\n        sellingPriceForBiggestJump = bestSellingPrice\n        #HPcount=highestCount[indexOfHighest[bestSellingPrice]]\n        HPGroups.append(highestCount[indexOfHighest[bestSellingPrice]])\n    elif jump==biggestJump:\n        if bestSellingPrice!=sellingPriceForBiggestJump:\n            sellingPriceForBiggestJump = bestSellingPrice\n            #HPcount+=highestCount[indexOfHighest[bestSellingPrice]]\n            HPGroups.append(highestCount[indexOfHighest[bestSellingPrice]])\n            LPGroups.append(0)\n        LPGroups[-1]+=1\ncount = 0\nbs = T//2\nfor a,b in zip(HPGroups,LPGroups):\n    if bs>min(a,b):\n        count+=min(a,b)\n    else:\n        count+=bs\nprint(count)\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(N: int, T: int, A: \"List[int]\"):\n    right_max = [0] * N # i\u756a\u76ee\u3088\u308a\u3042\u3068\u3067\u4e00\u756a\u5927\u304d\u3044A_i\n    m_a = 0\n    for i in range(1, N):\n        m_a = max(m_a, A[-i])\n        right_max[-i-1] = m_a\n\n    m_p = 0\n    count = 0\n    for i, a in enumerate(A):\n        profit = right_max[i] - a\n        if profit > m_p:\n            m_p = profit\n            count = 1\n        elif profit == m_p:\n            count += 1\n    print(count)\n    return\n\n\n# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    T = int(next(tokens))  # type: int\n    A = [ int(next(tokens)) for _ in range(N) ]  # type: \"List[int]\"\n    solve(N, T, A)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import heapq\n\nN,T = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nh = []\nB = [0]*N\n\nfor i in range(N):\n    heapq.heappush(h,A[i])\n    B[i] = h[0]\n\nj = []\nC = [0]*N\n\nfor i in range(N-1,-1,-1):\n    heapq.heappush(j,-A[i])\n    C[i] = -j[0]\n\nB = B[:-1]\nC = C[1:]\nD = list([C[x]-B[x] for x in range(N-1)])\nt = max(D)\n\ns = 0\nD.append(0)\nfor i in range(N-1):\n    if D[i] == t and D[i] > D[i+1]:\n        s += 1\n\nprint(s)\n", "import sys\n\nN, T = list(map(int, sys.stdin.readline().rstrip().split()))\n\nAs = []\nAs = list(map(int, sys.stdin.readline().rstrip().split()))\n\nmins = []\nm = 1e10\nvs = []\nfor A in As:\n    m = min(m, A)\n    vs.append(A - m)\nmax_v = max(vs)\nres = 0\nfor v in vs:\n    if v == max_v:\n        res += 1\nprint(res)\n\n", "import numpy as np\nN, T = list(map(int, input().split()))\n\ncost_list = np.array(list(map(int, input().split())))\n\nmax_num = 0\nmax_profit = 0\nmax_list = []\nmax_value = 0\nfor x in reversed(cost_list[1:]):\n    max_value = max(max_value, x)\n    max_list.append(max_value)\nmax_list = list(reversed(max_list))\nmax_list = np.array(max_list)\nres = max_list - cost_list[:-1]\n\nres_max = max(res)\n\nmax_num_list = [y for y in res if y == res_max]\n\nprint((len(max_num_list)))\n\n\n", "#D    \u9ad8\u6a4b\u541b\u3068\u898b\u3048\u3056\u308b\u624b / An Invisible Hand\nN,T = [int(i) for i in input().split(\" \")]\nA=[int(i) for i in input().split(\" \")]\nMax = 0\ncount = 1\nMin = A[0]\nfor i in range(N):\n    if A[i] <= Min :\n        Min = A[i]\n    else :\n        temp = A[i]-Min\n        if temp > Max:\n            Max = temp \n            count = 1\n        elif temp == Max :\n            count += 1\nprint(count)", "N,T = map(int,input().split())\nA = list(map(int,input().split()))\n\ncnt = max_profit = 0\nINF = float('inf')\nmin_cost = INF\nfor a in A:\n    profit = a - min_cost\n    if profit == max_profit:\n        cnt += 1\n    elif profit > max_profit:\n        cnt = 1\n        max_profit = profit\n    min_cost = min(min_cost, a)\n\nprint(cnt)", "n,_,*a=map(int,open(0).read().split())\nm=d=c=0\nfor t in a[::-1]:\n    if t>m:\n        m=t\n    if m-t>d:\n        d=m-t\n        c=1\n    elif m-t==d:\n        c+=1\nprint(c)", "# f = open('input', 'r')\n# n, t = map(int, f.readline().split())\n# A = list(map(int, f.readline().split()))\nn, t = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nans = 0\nmax_diff = 0\nmin_a = A[0]\nfor a in A:\n    min_a = min(min_a, a)\n    if (a - min_a) == max_diff:\n        ans += 1\n    elif (a - min_a) > max_diff:\n        ans = 1\n        max_diff = (a - min_a)\nprint(ans)\n", "input_lines = input()\nitems = input_lines.split()\nN = int(items[0])\nT = int(items[1])\n\ninput_lines = input()\nitems = input_lines.split()\nAs = [int(x) for x in items]\n\ndef my_func(N, T, As):\n    buys = T // 2\n    counts = 0\n    val_earn = 0\n    val_min = 10E10\n    for val in As:\n        if val < val_min:\n            val_min = val\n        else:\n            diff = val - val_min\n            if diff == val_earn:\n                counts += 1\n            elif diff > val_earn:\n                val_earn = diff\n                counts = 1\n    print(counts)\n\nmy_func(N, T, As)", "def slove():\n    import sys\n    import collections\n    input = sys.stdin.readline\n    n, t = list(map(int, input().rstrip('\\n').split()))\n    a = list(map(int, input().rstrip('\\n').split()))\n    d = collections.defaultdict(list)\n    min_b = 10 ** 9\n    max_p = 0\n    for v in a:\n        p = v - min_b\n        max_p = max(max_p, p)\n        d[p] += [min_b]\n        min_b = min(min_b, v)\n    print((len(d[max_p])))\n\n\ndef __starting_point():\n    slove()\n\n__starting_point()", "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\n\n\nN, T = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nmaxA = [0] * N\nminA = [0] * N\n\nmaxA[N-1] = A[-1]\nfor i in range(1, N):\n    maxA[N-i-1] = max(maxA[N-i], A[N-i])\n# print(maxA)\n\nmax_diff = -10000000000\nfor i in range(N-1):\n    max_diff = max(maxA[i] - A[i], max_diff)\n# print(max_diff)\ncnt = 0\nfor i in range(N-1):\n    if maxA[i] - A[i] == max_diff:\n        cnt += 1\nprint(cnt)\n", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    N,M = map(int,input().split())\n    A = list(map(int,input().split()))\n    MAXl = [A[-1]]\n    for i in range(1,N-1):\n        MAXl.append(max(MAXl[i-1],A[-i-1]))\n    MAXl.reverse()\n    count = 0\n    profit = 0\n    for i in range(N-1):\n        p = MAXl[i]-A[i]\n        if p == profit:\n            count += 1\n        elif p > profit:\n            profit = p\n            count = 1\n\n    print(count)\n\ndef __starting_point():\n    main()\n__starting_point()", "N, T = map(int, input().split())\n*A, = map(int, input().split())\nmax_price = A[N-1]\nmax_prof = 0\ncount = 1\nfor a in reversed(A[:N-1]):\n    prof = max_price - a\n    if prof < 0: max_price = a\n    elif prof == max_prof: count += 1\n    elif prof > max_prof: max_prof = prof; count = 1;\nprint(count)", "N, T = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ndiff = -1\nmini = A[0]\ncnt = 0\nans = 0\n\nfor i in range(1, N):\n\tnow = A[i]\n\n\tif mini > now:\n\t\tmini = now\n\telse:\n\t\tif now - mini == diff:\n\t\t\tcnt += 1\n\t\telif now - mini > diff:\n\t\t\tdiff = now - mini\n\t\t\tans = max(ans, cnt)\n\t\t\tcnt = 1\nans = max(ans, cnt)\nprint(ans)\n", "N, M = map(int, input().split())\nA = tuple(map(int, input().split()))\nmini = 10**10\nbnf = 0\ncnt = 1\nfor i in range(N):\n\tmini = min(mini, A[i])\n\t_bnf = A[i] - mini\n\tif _bnf > bnf:\n\t\tbnf = _bnf\n\t\tcnt = 1\n\telif _bnf == bnf:\n\t\tcnt += 1\nprint(cnt)", "N , T = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nm = 10 ** 9\nL = [m] * (N)\n\n\nfor i in range(0,N):\n  if A[i] <= m:\n    m = A[i]\n  L[i] = A[i] - m\n\nM = max(L)\n\nprint((L.count(M)))\n  \n\n", "#!usr/bin/env python3\nfrom collections import defaultdict\nimport math\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\ndef IIR(n): return [II() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\nmod = 1000000007\n\n#A\n\"\"\"\na,b = LS()\nc = int(a+b)\nfor i in range(1,1000):\n    if i * i == c:\n        print(\"Yes\")\n        return\nprint(\"No\")\n\"\"\"\n\n#B\n\"\"\"\na,b = LI()\nif a*b <= 0:\n    print(\"Zero\")\nelse:\n    if b < 0:\n        if (a-b) %2 == 1:\n            print(\"Positive\")\n        else:\n            print(\"Negative\")\n    else:\n        print(\"Positive\")\n\"\"\"\n\n#C\n\"\"\"\nn = II()\ns = SR(n)\nmarch = [[] for i in range(5)]\nch = list(\"MARCH\")\nfor i in s:\n    for j in range(5):\n        if i[0] == ch[j]:\n            march[j].append(i)\nans = 0\nfor i in range(5):\n    for j in range(i):\n        for k in range(j):\n            if len(march[i])*len(march[j])*len(march[k]) == 0:\n                break\n            ans += len(march[i])*len(march[j])*len(march[k])\nprint(ans)\n\"\"\"\n\n#D\n\"\"\"\nn = II()\nd = LIR(n)\nq = II()\np = IIR(q)\nd.insert(0,[0 for i in range(n+1)])\nfor i in range(n):\n    d[i+1].insert(0,0)\nfor i in range(n):\n    for j in range(n):\n        d[i+1][j+1] += d[i+1][j]+d[i][j+1]-d[i][j]\nans = [0 for i in range(n**2+1)]\n\nfor a in range(n+1):\n    for b in range(n+1):\n        for c in range(a):\n            for e in range(b):\n                ans[(a-c)*(b-e)] = max(ans[(a-c)*(b-e)],d[a][b]-d[c][b]-d[a][e]+d[c][e])\n\nfor i in p:\n    an = 0\n    for a in range(i+1):\n        an = max(an, ans[a])\n    print(an)\n\"\"\"\n#E\n\n\"\"\"\ns = list(S())\nans = -1\ns.insert(0,0)\nd = 0\nfor i in range(1,len(s)):\n    if s[i] != d:\n        d = s[i]\n        ans += 1\nprint(ans)\n\"\"\"\n\n#F\n\"\"\"\nn = II()\nx,y = LI()\nfor _ in range(n-1):\n    a,b = LI()\n    if a == b:\n        x = max(x,y)\n        y = x\n    else:\n        i = max(x//a,y//b)\n        while 1:\n            if a*i >= x and b*i >= y:break\n            i += 1\n        x = a*i\n        y = b*i\nprint(x+y)\n\"\"\"\n#G\n\"\"\"\ns = list(S())\np = 0\ng = 0\nfor i in s:\n    if i == \"g\":\n        g += 1\n    else:\n        p += 1\nans = (g-p)//2\nprint(ans)\n\"\"\"\n#H\nn,t = LI()\na = LI()\nb = []\nfor i in range(n):\n    b.append([i,a[i]])\nb.sort(key = lambda x:x[1])\nb = b[::-1]\nm = []\nif n == 1:\n    print((1))\n    return\ni = 0\nfor j in range(n):\n    while i < b[j][0]:\n        m.append(b[j][1])\n        i += 1\nans = 0\nma = 0\nfor i in range(n-1):\n    ma = max(ma,m[i]-a[i])\nfor i in range(n-1):\n    if m[i]-a[i] == ma:\n        ans += 1\nprint(ans)\n#I\n\n#J\n\n#K\n\n#L\n\n#M\n\n#N\n\n#O\n\n#P\n\n#Q\n\n#R\n\n#S\n\n#T\n", "N, T = list(map(int, input().split()))\nA = list(map(int, input().split()))\nmin_A = 1000000001\nmax_diff = 0\nans = 0\nfor i in A:\n    min_A = min(min_A, i)\n    if i - min_A == max_diff:\n        ans += 1\n    if i - min_A > max_diff:\n        max_diff = i - min_A\n        ans = 1\nprint(ans)\n", "#!/usr/bin/env python3\n\ndef main():\n    n, t = list(map(int, input().split()))\n    an = list(map(int, input().split()))\n\n    mi = [an[0]]\n    se_mi = {0}\n    for i in range(1, n):\n        if mi[i - 1] > an[i]:\n            se_mi = {i}\n        elif mi[i - 1] == an[i]:\n            se_mi.add(i)\n        mi.append(min(mi[i - 1], an[i]))\n\n    ma = 0\n    se_ma = set()\n    for i in range(1, n):\n        be = an[i] - mi[i - 1]\n        if be > ma:\n            ma = be\n            se_ma = {i}\n        elif be == ma:\n            se_ma.add(i)\n    print((len(se_ma)))\n\nmain()\n", "N, T = list(map(int, input().split()))\nA = list(map(int, input().split()))\nmxx, mnx = 0, 10**18\nfor a in A:\n    if a-mnx > mxx:\n        c, mxx = 1, a-mnx\n    elif a-mnx == mxx:\n        c += 1\n    mnx = min(mnx, a)\nprint(c)\n", "from collections import Counter\n\nN, T = map(int, input().split())\nA = list(map(int, input().split()))\n\nmaxA = [0 for _ in range(N + 1)]\nminA = [float('inf') for _ in range(N + 1)]\n\nfor i, a in enumerate(A):\n    minA[i + 1] = min(minA[i], a)\nfor i, a in enumerate(reversed(A)):\n    maxA[-1 - i] = max(maxA[-1 - (i - 1)], a)\n\nmaxProfit = 0\nfor i in range(1, N):\n    if maxProfit < maxA[i + 1] - minA[i]:\n        maxProfit = maxA[i + 1] - minA[i]\n\npairs = set([])\nfor i in range(1, N):\n    if maxProfit == maxA[i + 1] - minA[i]:\n        pairs.add((minA[i], maxA[i + 1]))\n\nans = len(pairs)\nprint(ans)", "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush,heapify\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nfrom typing import Union\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nn,t = inpl()\na = inpl()\nm = []\nmi = INF\nfor i in range(n-1):\n    mi = min(mi, a[i])\n    m.append(a[i+1]-mi)\nprint(m.count(max(m)))", "N,T=map(int,input().split())\nA=list(map(int,input().split()))\ni=0\nj=1\na=0\nb=0\nwhile i<=N-1:\n    if j==N:\n        i=N\n    elif A[i]>A[j]:\n        i=j\n        j+=1\n    else:\n        if A[j]-A[i]>a:\n            a=A[j]-A[i]\n            b=1\n            j+=1\n        elif A[j]-A[i]==a:\n            b+=1\n            j+=1\n        elif A[j]-A[i]<a:\n            j+=1\nprint(b)", "#! /usr/bin/env python3\n\nN, T = map(int, input().split())\nA = list(map(int, input().split()))\np = -1\ndif = h = hc = lc = c = 0\nfor i in A[-2::-1]:\n    a, b = A[p], A[p]-i\n    if i > a:\n        p = -c-2\n    elif b >= dif:\n        if a != h : h, hc = a, hc+1\n        if b > dif : dif, lc = b, 0\n        lc += 1\n    c += 1\nprint(min(hc, lc))", "n, t = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [0 for i in range(n)]\nm = a[0]\nfor i in range(n):\n    m = min(m, a[i])\n    b[i] = a[i] - m\nm = b[0]\nk = 0\nfor i in range(n):\n    if b[i] >= m:\n        m = b[i]\n        k = i\nans1 = 1\nfor i in range(n):\n    if b[i] == m and i != k:\n        ans1 += 1\nb = [0 for i in range(n)]\nm = a[n - 1]\nfor i in range(n - 1, -1, -1):\n    m = max(m, a[i])\n    b[i] = a[i] - m\nm = b[n - 1]\nk = 0\nfor i in range(n - 1, -1, -1):\n    if b[i] <= m:\n        m = b[i]\n        k = i\nans2 = 1\nfor i in range(n):\n    if b[i] == m and i != k:\n        ans2 += 1\nprint(min(ans1, ans2))", "n, t = map(int, input().split())\na = [int(x) for x in input().split()]\nmx = [0] * n\nmx[-1] = a[-1]\nfor i in range(n - 2, -1, -1):\n  mx[i] = max(mx[i + 1], a[i])\nd = 0\nc = 0\nfor i in range(n - 1):\n  cur = a[i]\n  can = mx[i + 1]\n  dd = can - cur\n  if dd > d:\n    d = dd\n    c = 1\n  elif dd == d:\n    c += 1\nprint(c)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nN,T = list(map(int,input().split()))\nAs = list(map(int,input().split()))\n\nmns = [0] * N\nmxs = [0] * N\n\nmns[0] = As[0]\nmxs[N-1] = As[N-1]\n\nfor i in range(1, N):\n    j = N - i - 1\n    mns[i] = min(As[i], mns[i-1])\n    mxs[j] = max(As[j], mxs[j+1])\n\n# print(mns)\n# print(mxs)\n\nmx_diff = -1\npairs = set()\nfor i in range(1, N):\n    diff = mxs[i] - mns[i]\n    if diff > mx_diff:\n        mx_diff = diff\n        pairs.clear()\n    if diff >= mx_diff:\n        pairs.add((mns[i], mxs[i]))\nprint((len(pairs)))\n    \n\n\n", "import sys\nstdin = sys.stdin\n\nsys.setrecursionlimit(10 ** 7)\n\ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x) - 1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nn, t = li()\na = list(li())\n\nmina = [0]*n\nmina[0] = a[0]\nmaxprof = 0\n\nfor i in range(1, n):\n    mina[i] = min(mina[i-1], a[i])\n\nans = 0\nfor i in range(n):\n    if a[i] - mina[i] > maxprof:\n        maxprof = a[i] - mina[i]\n        ans = 1\n\n    elif a[i] - mina[i] == maxprof:\n        ans += 1\n\nprint(ans)", "n,t = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nb = float('inf')\n\nc = 0\n\nans = 0\n\nfor i in range(n):\n    if a[i]<b:\n        b = a[i]\n    if a[i]-b == c:\n        ans += 1\n    elif a[i]-b > c:\n        c = a[i]-b\n        ans = 1\n\nprint(ans)\n", "def main():\n\n    N, T = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    if N == 1: return 0\n\n    min_v = A[0]\n    max_d = float('-inf')\n    for i in range(1, N):\n        if A[i] - min_v > max_d:\n             max_d = A[i] - min_v\n        if A[i] < min_v:\n            min_v =  A[i]\n\n    d = set()\n    d.add(A[0])\n    ans = 0\n    for i in range(1, N):\n        if A[i] - max_d in d: ans += 1\n        d.add(A[i])\n    return ans\n\n\n\ndef __starting_point():\n    print((main()))\n\n__starting_point()", "n=int(input().split()[0])\ns=input().split()\nl=[0 for i in range(n)]\nm=[0 for i in range(n)]\nM=[0 for i in range(n)]\nfor i in range(n):\n  l[i]=int(s[i])\nm[0]=l[0]\nM[0]=l[-1]\nfor i in range(1,n):\n  m[i]=min(m[i-1],l[i])\n  M[i]=max(M[i-1],l[-i-1])\nM.reverse()\nd=[M[i]-m[i] for i in range(n)]\nma=max(d)\nmemo=-1\ncnt=0\nfor i in range(n):\n   if d[i]==ma and m[i]!=memo:\n      cnt+=1\n      memo=m[i]\nprint(cnt)", "#!/usr/bin/env python3\n\ndef main():\n    n, t = list(map(int, input().split()))\n    an = list(map(int, input().split()))\n\n    mi = [an[0]]\n    for i in range(1, n):\n        mi.append(min(mi[i - 1], an[i]))\n\n    ma = 0\n    num_ma = 0\n    for i in range(1, n):\n        be = an[i] - mi[i - 1]\n        if be > ma:\n            ma = be\n            num_ma = 1\n        elif be == ma:\n            num_ma += 1\n    print(num_ma)\n\nmain()\n", "n,t=list(map(int,input().split()))\na=list(map(int,input().split()))\npos={}\nmx=[0]*(n+1)\nfor i in range(n-1,-1,-1):\n    mx[i]=max(mx[i+1],a[i])\nfor i in range(n):\n    pos[a[i]]=i\na.sort()\nans=0\nb=0\nfor i in range(n):\n    idx=pos[a[i]]\n    if b<mx[idx]-a[i]:\n        b=mx[idx]-a[i]\n        ans=1\n    elif b==mx[idx]-a[i]:\n        ans+=1\nprint(ans)\n", "n,t=map(int,input().split())\na=list(map(int,input().split()))\nm=10**10\nM=0\nk=[]\nfor i in range(n):\n\tm=min(m,a[i])\n\tM=a[i]-m\n\tk.append(M)\no=max(k)\nprint(k.count(o))", "N,T = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nh = []\nB = [0]*N\n\nfor i in range(N):\n    h.append(A[i])\n    h = [min(h)]\n    B[i] = h[0]\n\nj = []\nC = [0]*N\n\nfor i in range(N-1,-1,-1):\n    j.append(A[i])\n    j = [max(j)]\n    C[i] = j[0]\n\nB = B[:-1]\nC = C[1:]\nD = list([C[x]-B[x] for x in range(N-1)])\nt = max(D)\n\ns = 0\nD.append(0)\nfor i in range(N-1):\n    if D[i] == t and D[i] > D[i+1]:\n        s += 1\n\nprint(s)\n", "n, t = list(map(int, input().split()))\na = list(map(int, input().split()))\nm = a[-1]\ntmp = 0\ncnt = 0\nfor i in range(n - 2, -1, -1):\n    p = m - a[i]\n    if p > tmp:\n        tmp = p\n        cnt = 1\n    elif p == tmp:\n        cnt += 1\n    m = max(m, a[i])\nprint(cnt)\n", "n, t = map(int, input().split())\nax = list(map(int, input().split()))\n# i\u3088\u308a\u5f8c\u308d\u306e\u58f2\u308b\u4e2d\u3067\u6700\u3082\u9ad8\u3044\u3082\u306e\u306e\u30ea\u30b9\u30c8\nsell = []\nfor a in ax[::-1][:n-1]:\n    if len(sell) == 0:\n        sell.append([a,1])\n        continue\n    if a > sell[-1][0]:\n        sell.append([a,1])\n    elif a == sell[-1][0]:\n        sell.append([a, sell[-1][1]+1])\n    else:\n        sell.append(sell[-1])\nsell = sell[::-1]\nans = {}\nfor i in range(n-1):\n    sell_p, cnt = sell[i]\n    ans[sell_p-ax[i]] = ans.get(sell_p-ax[i],0)+1\nprint(ans[max(ans.keys())])", "import sys\nN, T = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nA_max_right = [A[-1]]\nA_min_left = [A[0]]\nfor a in A[-2::-1]:\n  A_max_right.append(max(a, A_max_right[-1]))\nA_max_right.reverse()\nfor a in A[1:]:\n  A_min_left.append(min(a, A_min_left[-1]))\n\nA_dig = 0\nfor i in range(N):\n  A_dig = max(A_dig, A_max_right[i] - A_min_left[i])\n  \n#print(A_max_right, A_min_left, A_dig)\n\ndef ct_edges(ma, mi, start):\n    counting_max = 1 # 0:counting max, 1:counting min\n    i = start\n    ct_max = [0]\n    ct_min = []\n    while i >= 0 and A_max_right[i] == ma and A_min_left[i] == mi:\n      if counting_max: \n        if A[i] == ma:\n          ct_max[-1] += 1\n        elif A[i] == mi:\n          ct_min.append(1)\n          counting_max = 0\n      else: # counting min\n        if A[i] == mi:\n          ct_min[-1] += 1\n        elif A[i] == ma:\n          ct_max.append(1)\n          counting_max = 1\n      #print(i, A[i], ma, mi, ct_max, ct_min) \n      i -= 1\n      \n    if len(ct_max) != len(ct_min):\n      print(\"Error! Type:1\")\n      return\n      \n    tmp_max = 0\n    tmp_min = sum(ct_min)\n    tmp = tmp_max + tmp_min\n    for j in range(len(ct_max)):\n      tmp_max += ct_max[j]\n      tmp_min -= ct_min[j]\n      tmp = min(tmp, tmp_max + tmp_min)\n    \n    ct = tmp\n    end = i\n    return ct, end\n\ni = N-1  \nans = 0\nwhile i >= 0:\n  if A_max_right[i] - A_min_left[i] != A_dig:\n    i -= 1\n  else:\n    #print(i)\n    ct, i = ct_edges(A_max_right[i], A_min_left[i], start = i)\n    ans += ct\nprint(ans)\n    \n", "import sys\nfrom bisect import bisect_left as bl\ninput = sys.stdin.readline\nN, T = map(int, input().split())\na = list(map(int, input().split()))\ncm = [float(\"inf\")] * (N + 1)\ncmx = [0] * (N + 1)\nfor i in range(N):\n  cm[i + 1] = min(cm[i], a[i])\n  cmx[N - 1 - i] = max(cmx[N - i], a[N - 1 - i])\nres = 0\nx = 0\nfor i in range(N + 1):\n  x = max(cmx[i] - cm[i], x)\nfor i in range(N):\n  if cmx[i] - a[i] == x:\n    res += 1\nprint(res)", "ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"Yes\") if fl else print(\"No\")\nips = lambda:input().split()\nimport collections\nimport math\nimport itertools\nimport heapq as hq\nimport sys\nn,t = ma()\nA = lma()\nINF=10**15\n\nmns = [INF]*(n+1) ##mxs[i] :: max(A[i:n])\nfor i in range(n):\n    mns[i] = min(mns[i-1],A[i])\nc = 0\ndmx = -1\nfor i in range(1,n):\n    if A[i]-mns[i] >dmx:\n        dmx=A[i]-mns[i]\n        c=1\n    elif A[i]-mns[i] ==dmx:\n        c+=1\nprint(c)\n", "# -*- coding: utf-8 -*-\ndef inpl(): return map(int, input().split())\nN, T = inpl()\nA = tuple(inpl())\nm = A[0]\nbenefit = 0\npairs = 0\nans = 0\n\nfor i in range(1, N):\n    a = A[i]\n    d = a - m\n    if d < 0:\n        m = a\n    elif d < benefit:\n        continue\n    elif d == benefit:\n        pairs += 1\n    elif d > benefit:\n        ans = max(ans, pairs)\n        benefit = d\n        pairs = 1\n\nans = max(ans, pairs)\nprint(ans)", "N,T = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nback = [(0,0)]*(N+1)\n# (a,b): b is # of a\ndef heapsort(lst):\n    h = []\n    for value in lst:\n        heappush(h,value)\n    return [heappop(h) for i in range(len(h))]\n\nfor i in range(N, 0, -1):\n    if A[i-1] > back[i][0]:\n        back[i-1] = (A[i-1], 1)\n    elif A[i-1] == back[i][0]:\n        back[i-1] = (A[i-1], back[i][1] + 1)\n    else:\n        back[i-1] = back[i]\n\nanslst = []\nfrom heapq import heappush, heappop\n\nfor i in range(N):\n    heappush(anslst, (- (back[i][0] - A[i]), back[i][1]) )\nanslst = heapsort(anslst)\n\n\nval = - anslst[0][0]\n\nans = 0\nfor i in range(N):\n    if val != - anslst[i][0]:\n        break\n    ans += anslst[i][1] \nprint(ans)\n\n", "N, T = list(map(int, input().split()))\nA = list(map(int, input().split()))\nminv = A[0]\nmaxv = -1\nL = [0]\nfor i in range(1, N):\n    if A[i] - minv > maxv:\n        L = [i]\n        maxv = A[i] - minv\n    elif A[i] - minv == maxv:\n        L.append(i)\n    minv = min(minv, A[i])\nprint((len(L)))\n", "N, T = map(int, input().split())\nA = list(map(int, input().split()))\nmin_A = 1000000001\nmax_diff = 0\nans = 0\nfor i in A:\n    min_A = min(min_A, i)\n    if i - min_A == max_diff:\n        ans += 1\n    if i - min_A > max_diff:\n        max_diff = i - min_A\n        ans = 1\nprint(ans)", "input()\na = [int(x) for x in input().split()]\n\nlowest = a[0]\nlowests = {a[0]}\ndiff = -1\npairs = []\n\nfor x in a[1:]:\n    if lowest > x:\n        lowests = {x}\n        lowest = x\n    elif lowest == x:\n        lowests.add(x)\n    elif diff == x - lowest:\n        pairs += [(x, y) for y in lowests]\n    elif diff < x - lowest:\n        pairs = [(x, y) for y in lowests]\n        diff = x - lowest\n\na, b = list(zip(*pairs))\nprint((min(len(set(a)), len(set(b)))))\n", "N, T = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nlow = [A[0]]\nhigh = [A[N-1]]\nfor i in range(1, N):\n    low.append(min(A[i], low[i-1]))\nfor i in reversed(list(range(N-1))):\n    high.append(max(A[i], high[N-2-i]))\n\nhigh.reverse()\nmax_gap = max([high[i] - low[i] for i in range(N)])\nnum = 0\nfirst = True\nfor i in range(N):\n    if high[i] - low[i] == max_gap:\n        if first:\n            idx = i\n            num += 1\n            first = False\n        else:\n            if low[idx] != low[i]:\n                idx = i\n                num += 1\n\nprint(num)\n", "#!/usr/bin python3\n# -*- coding: utf-8 -*-\n\nimport bisect\n\nn, t = list(map(int, input().split()))\na = list(map(int, input().split()))\nmx = 0\np = [0] * n\nfor i in range(n-1,-1,-1):\n    mx = max(mx, a[i])\n    p[i] = mx - a[i]\np.sort()\nprint((n-bisect.bisect_left(p, p[-1])))\n", "#a\n\"\"\"\nimport math\na, b = map(str, input().split())\nj = int(a + b)\nif math.sqrt(j).is_integer():\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\"\"\"\n\n#b\n\"\"\"\nans = [\"Positive\",\"Negative\"]\na, b = map(int, input().split())\nif 0 < a:\n    print(\"Positive\")\nelif b >= 0:\n    print(\"Zero\")\nelse:\n    print(ans[(b-a)%2-1])\n\"\"\"\n\n#C\n\"\"\"\nimport itertools\nn = int(input())\nMARCH = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch = [0 for _ in range(5)]\nfor i in range(n):\n    s = input()\n    if s[0] in MARCH:\n        march[MARCH.index(s[0])] += 1\nnum = list(range(5))\na = list(itertools.combinations(num, 3))\nans = 0\nfor i in a:\n    bf = 1\n    for k in i:\n        bf *= march[k]\n    ans += bf\nprint(ans)\n\"\"\"\n\n#D\n\"\"\"\nn = int(input())\nD = [list(map(int, input().split())) for _ in range(n)]\nq = int(input())\np = [int(input()) for _ in range(q)]\nans = [[0 for i in range(n)] for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        break\nfor _ in p:\n    print(ans[p])\n\"\"\"\n\n#E\n\"\"\"\ns = input()\nbf = s[0]\nans = 0\nfor i in range(1,len(s)):\n    if bf != s[i]:\n        ans += 1\n        bf = s[i]\nprint(ans)\n\"\"\"\n\n#F\n\"\"\"\nn = int(input())\nta = [list(map(int, input().split())) for _ in range(n)]\nans = ta[0]\nfor i in ta:\n    if ans[0] <= i[0] and ans[1] <= i[1]:\n        ans = i\n    else:\n        a = ((ans[0] - 1) // i[0]) + 1\n        b = ((ans[1] - 1) // i[1]) + 1\n        ab = max(a,b)\n        ans = [i[0] * ab, i[1] * ab]\nprint(ans[0]+ans[1])\n\"\"\"\n\n#G\nn, t = map(int, input().split())\na = list(map(int, input().split()))\nminv = a[0]\nmaxv = 0\nans = 0\nfor i in range(1, n):\n    if maxv == a[i] - minv:\n        ans += 1\n    elif maxv < a[i] - minv:\n        maxv = a[i] - minv\n        ans = 1\n    else:\n        minv = min(minv,a[i])\nprint(ans)\n\n#H\n\"\"\"\ns = input()\nans = 0\nfor i in range(1,len(s)):\n    if i % 2 == 1:\n        if s[i] != \"p\":\n            ans += 1\n    else:\n        if s[i] != \"g\":\n            ans -= 1\nprint(ans)\n\"\"\"", "N,T=list(map(int,input().split()))\nA=[int(i) for i in input().split()]\nB=[0 for i in range(N)]\nB[0]=A[0]\nfor i in range(1,N):\n    B[i]=min([B[i-1],A[i]])\nC=[A[i]-B[i] for i in range(N)]\nM=max(C)\nans=0\nfor i in range(N):\n    if C[i]==M:\n        ans+=1\nprint(ans)\n", "import numpy as np\n\ninput()\na = np.array(input().split(), dtype=np.int)\n\ndiff = a - np.minimum.accumulate(a)\nprint(((diff == diff.max()).sum()))\n\n", "# def makelist(n, m):\n# \treturn [[0 for i in range(m)] for j in range(n)]\n\n# n = int(input())\n# a, b = map(int, input().split())\n# s = input()\n\n\nN, T = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ndiff = [0]*N\n\nmini = A[0]\nfor i in range(1, N):\n\tnow = A[i]\n\tif now <= mini:\n\t\tmini = now\n\telse:\n\t\tdiff[i] = now - mini\n\nsa = max(diff)\n\nans = 0\nmini = A[0]\nl = 1\nr = 0\nfor i in range(1, N):\n\tnow = A[i]\n\tif mini == now:\n\t\tl += 1\n\telif now < mini:\n\t\tif r > 0:\n\t\t\tans += min(l, r)\n\t\t\tr = 0\n\t\tmini = now\n\t\tl = 1\n\telse: # now > mini\n\t\tif now - mini == sa:\n\t\t\tr += 1\n\nif r > 0:\n\tans += min(l, r)\nprint(ans)\n", "def slove():\n    import sys\n    import collections\n    input = sys.stdin.readline\n    n, t = list(map(int, input().rstrip('\\n').split()))\n    a = list(map(int, input().rstrip('\\n').split()))\n    b = collections.defaultdict(list)\n    m_c = 10 ** 9\n    for i, v in enumerate(a):\n        if i != 0 and m_c < v:\n            b[v-m_c] += [m_c]\n        m_c = min(m_c, v)\n    b = sorted(list(b.items()), reverse=True)[0]\n    print((len(collections.Counter(b[1]))))\n\n\ndef __starting_point():\n    slove()\n\n__starting_point()", "N, T = map(int, input().split())\nA = list(map(int, input().split()))\n\nmin_a = A[0]\nprofit = 0\nans = 0\nfor a in A[1:]:\n    min_a = min(min_a, a)\n    if a - min_a > profit:\n        profit = a - min_a\n        ans = 1\n    elif a - min_a == profit:\n        ans += 1\nprint(ans)", "from collections import defaultdict\nN,T=map(int,input().split())\nA=[int(i) for i in input().split()]\nmi=A[0]\ns=0\ndd=defaultdict(int)\nfor i in range(1,N):\n    mi=min(mi,A[i])\n    s=max(A[i]-mi,s)\n    dd[A[i]-mi]+=1\nprint(dd[s])", "from collections import Counter\n\nN, T = list(map(int, input().split()))\nAs = list(map(int, input().split()))\n\nT //= 2\nprofits = [0] * (N - 1)\nminA = As[0]\nfor i, A in enumerate(As[1:]):\n    profits[i] = T * (A - minA)\n    minA = min(minA, A)\n\ncnts = Counter(profits)\nprint((cnts[max(cnts.keys())]))\n", "def main():\n    N, T = [int(x) for x in input().split()]\n    price = [int(x) for x in input().split()]\n\n    minprice = 1000000000;\n    maxbenefit = 0\n    dict = {}\n    res = 0\n\n    for i in range(len(price)):\n        if (price[i] < minprice): minprice = price[i]\n        if (maxbenefit < (price[i] - minprice)): maxbenefit = (price[i] - minprice)\n        dict[price[i]] = i\n\n    for i in range(len(price)):\n        if price[i] + maxbenefit in dict:\n            if (dict[price[i] + maxbenefit] > i): res += 1\n\n    print(res)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,t = list(map(int,input().split()))\na = list(map(int,input().split()))\nmn = a[0]\nl = []\nfor i in range(n-1):\n    if a[i] < a[i+1]:\n        l.append(a[i+1]-mn)        \n    if a[i+1] < mn:\n        mn = a[i+1]\nif len(l) > 0:\n    d = max(l)\nans = l.count(d)\nprint(ans)\n", "def getlist():\n\treturn list(map(int, input().split()))\n\n#\u53d7\u3051\u53d6\u308a\nN, T = getlist()\nA = getlist()\nm = A[0]\nplus = -float(\"inf\")\ncost = 1\nfor i in range(1, N):\n\tif A[i] - m == plus:\n\t\tcost += 1\n\telif A[i] - m > plus:\n\t\tplus = A[i] - m\n\t\tcost = 1\n\telse:\n\t\tpass\n\tm = min(m, A[i])\n\nprint(cost)", "(N,T)=map(int,input().split())\na=list(map(int,input().split()))\nx=10**9\nd=0\ncounter=0\nfor i in a:\n    if i<x:\n        x=i\n    elif i-x>d:\n        d=i-x\n        counter=1\n    elif i-x==d:\n        counter+=1\nprint(counter)", "N, T = list(map(int,input().split()))\nA = list(map(int,input().split()))\nB = [0 for k in range(N)]\nB[0] = A[0]\nfor k in range(1,N):\n    B[k] = min(B[k-1],A[k])\nm = 0\nfor k in range(N):\n    m = max(A[k]-B[k],m)\nans = 0\nfor k in range(N):\n    if A[k]-B[k] == m:\n        ans += 1\nprint(ans)\n", "import numpy as np\n\nN,T = list(map(int,input().split()))\n\nA = np.array(list(map(int,input().split())))\n\nB = np.minimum.accumulate(A)\n\nC = A - B\n\nans = (C == C.max()).sum()\n\nprint(ans)\n", "N, T = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [a[0]]\nm = b[0]\nfor i in range(1,N):\n\tif m > a[i]:\n\t\tm = a[i]\n\tb.append(m)\nc = [a[i] - b[i] for i in range(N)]\nprint(c.count(max(c)))", "n,t=map(int,input().split())\nA=[int(i) for i in input().split()]\nA=A[::-1]\nB,C=[0]*n,[0]*n\nB[0]=A[0]\ncur=A[0]\nfor i in range(1,n):\n  cur=max(cur,A[i])\n  B[i]+=cur\nfor i in range(n):\n  C[i]=B[i]-A[i]\nm=max(C)\nans=0\nfor i in range(n):\n  if C[i]==m:\n    ans+=1\nprint(ans)", "from numpy import *\ninput()\na=array(input().split(),dtype=int)\nd=a-minimum.accumulate(a)\nprint((d==d.max()).sum())", "import numpy as np\n\nN, T = np.array(input().split(), dtype=\"int\")\nA = np.array(input().split(), dtype=\"int\")\n\nmax_num=A[-1]\nnum_dict = {}\nfor i in range(len(A)-1):\n    ##print(A[-i-1],max_num - A[-i-2],num_dict)\n    if(A[-i-1]>max_num):\n        max_num=A[-i-1]\n    if(max_num > A[-i-2]):\n        if(max_num - A[-i-2] in num_dict):\n            num_dict[max_num - A[-i-2]] +=1\n        else:\n            num_dict[max_num - A[-i-2]]=1\nkey = max(num_dict.keys())\nprint(num_dict[key])", "n, t = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n# print(a)\n\nminv = a[0]\n\nvalue = [0] * n\nfor i, v in enumerate(a[1:], 1):\n    if minv >= v:\n        value[i] = 0\n        minv = v\n    else:\n        value[i] = v - minv\n\nmaxv = max(value)\n# print(maxv)\nprint((value.count(maxv)))\n", "n,_,*a=map(int,open(0).read().split())\nm=d=c=0\nfor t in a[::-1]:\n    if t>m:\n        m=t\n    if m-t>d:\n        d=m-t\n        c=1\n    elif m-t==d:\n        c+=1\nprint(c)", "#!/usr/bin/env pypy3\n\nimport collections\n\n\nINF = 10 ** 10\n\n\ndef solve(n, t, xs):\n    trades = collections.Counter()\n    maxs = [INF for _ in range(n)]\n    maxs[n - 1] = xs[n - 1]\n    for i in range(n - 1)[::-1]:\n        maxs[i] = max(xs[i], maxs[i + 1])\n    for i in range(n):\n        delta = maxs[i] - xs[i]\n        if delta > 0:\n            trades[delta] += 1\n    max_delta = max(trades.keys())\n    return trades[max_delta]\n\n\ndef main():\n    n, t = list(map(int, input().split()))\n    xs = list(map(int, input().split()))\n    print((solve(n, t, xs)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,t = map(int,input().split())\na = list(map(int,input().split()))\n\np = a[n-1]\nr = []\n\nfor i in range(n-1,-1,-1):\n    if a[i] >= p:\n        p = a[i]\n    else:\n        r.append(p-a[i])\n\nres = r.count(max(r))\n\nprint(res)", "n,t=list(map(int,input().split()))\nar=list(map(int,input().split()))\nmn=float('inf')\nmdif,mxc=-float('inf'),0\nfor e in ar:\n    if(e-mn>mdif):\n        mdif=e-mn\n        mxc=1\n    elif(e-mn==mdif):\n        mxc+=1\n    mn=min(mn,e)\nprint(mxc)\n", "# ARC063D - \u9ad8\u6a4b\u541b\u3068\u898b\u3048\u3056\u308b\u624b / An Invisible Hand (ABC047D)\ndef main():\n    N, T, *A = map(int, open(0).read().split())\n    cur, cand = A[0], []\n    for i in A:\n        if i < cur:  # buy at the most inexpensive place\n            cur = i\n        else:\n            cand += [i - cur]  # sell at higher places\n    x = max(cand)  # the highest profits\n    # count the number of pairs which produce x\n    ans = sum(i == x for i in cand)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n,t=map(int,input().split())\na=list(map(int,input().split()))\n\nb=[0 for i in range(n)]\nb[n-1]=a[n-1]\nfor i in range(n-1):\n    b[n-i-2]=max(b[n-i-1],a[n-i-2])\n\nsamax=0\nmaxkai=0\nfor i in range(n-1):\n    if b[i+1]-a[i]>samax:\n        maxkai=1\n        samax=b[i+1]-a[i]\n    elif b[i+1]-a[i]==samax:\n        maxkai+=1\n\nprint(maxkai)", "#! /usr/bin/env python3\n\nN, T = map(int, input().split())\nA = list(map(int, input().split()))\npu = -1\nSPU = set([])\nSPD = []\nb = 0\nc = 0\nfor i in A[:-1][::-1]:\n    if i > A[pu]:\n        pu = -c-2\n    elif i < A[pu] and A[pu]-i >= b:\n        SPU.add(pu)\n        b = A[pu]-i\n        SPD += [b]\n    c += 1\n\nprint(min(len(SPU), SPD.count(b)))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**10\nmod = 10**9 + 7\n\n\ndef f():\n    n,t = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    m = 0\n    mc = inf\n    r = 0\n    for c in a:\n        if mc > c:\n            mc = c\n            continue\n        if c - mc > m:\n            m = c - mc\n            r = 1\n            continue\n        if c - mc == m:\n            r += 1\n    return r\n\nprint((f()))\n", "N, T = map(int, input().split())\n*A, = map(int, input().split())\nmin_price = A[0]\nmax_prof = 0\ncount = 1\nfor a in A[1:]:\n    prof = a - min_price\n    if prof < 0: min_price = a\n    elif prof == max_prof: count += 1\n    elif prof > max_prof: max_prof = prof; count = 1;\nprint(count)", "N,T=map(int,input().split())\nA=list(map(int,input().split()))\nx=10**9\nd=0\nans=0\nfor a in A:\n    if a<x:\n        x=a\n    elif a-x>d:\n        d=a-x\n        ans=1\n    elif a-x==d:\n        ans+=1\nprint(ans)", "def main():\n    N, T = map(int, input().split())\n    A = list(map(int, input().split()))\n    tmp = A[-1]\n    diff_A = [0] * N\n    for i in range(N-1,-1,-1):\n        tmp = max(A[i],tmp)\n        diff_A[i] = tmp - A[i]\n\n    print(diff_A.count(max(diff_A)))\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\nn,r,*a = list(map(int,read().split()))\n\n\nhigh = a[-1]\ndelta = -1\n\nfor ai in a[::-1]:\n    if high < ai:\n        high = ai\n    if high-ai > delta:\n        delta = high-ai\n\n#from collections import Counter\n#d = Counter()\n\nhigh = a[-1]\n\nhs = 0\nls = 0\n\nans = 0\nfor ai in a[::-1]:\n    if high < ai:\n        high = ai\n        hs = 1\n        ans += min(hs,ls)\n        ls = 0\n    elif high == ai:\n        hs += 1        \n    \n    if high - ai == delta:\n        ls += 1\n    \n\nprint((ans+min(hs,ls)))\n\n\n\n\n", "N,T = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nB = [0]*N\nC = [0]*N\n\nh = A[0]\nB[0] = h\nfor i in range(1,N):\n    h = min(A[i],h)\n    B[i] = h\n\nh = A[-1]\nC[-1] = h\nfor i in range(N-2,-1,-1):\n    h = max(A[i],h)\n    C[i] = h\n\nB = B[:-1]\nC = C[1:]\nD = list([C[x]-B[x] for x in range(N-1)])\nt = max(D)\n\ns = 0\nD.append(0)\nfor i in range(N-1):\n    if D[i] == t and D[i] > D[i+1]:\n        s += 1\n\nprint(s)\n", "N, T = list(map(int, input().split()))\ntowns = list(map(int, input().split()))\n\np = towns[-1]\nr = []\n\nfor i in reversed(list(range(N))):\n    if towns[i] >= p:\n        p = towns[i]\n    else:\n        r.append(p-towns[i])\n\nres = r.count(max(r))\nprint(res)\n", "from collections import defaultdict\n\nn, t = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nbuy = a[0]\ngain = defaultdict(int)\nfor ai in a:\n    buy = min(buy, ai)\n    gain[ai - buy] += 1\nprint((gain[max(gain)]))\n", "import sys\nfrom collections import Counter\nreadline = sys.stdin.readline\n\nN, T = map(int, readline().split())\nA = list(map(int, readline().split()))\nAmax = [None]*N\nAmax[N-1] = A[N-1]\nfor i in range(N-2, -1, -1):\n    Amax[i] = max(Amax[i+1], A[i])\n\nB = [am - a for a, am in zip(A, Amax)]\nprint(Counter(B)[max(B)])", "N,T=map(int,input().split())\nA=list(map(int,input().split())) # 0-indexed\nB=[0 for i in range(N)] # B[i]~B[N-1]\u306emax\nBl=[set() for i in range(N)] # B[i]~B[N-1]\u306emax\u3068\u306a\u308bB[j]\u306e\u6dfb\u5b57j\u306e\u30ea\u30b9\u30c8\nB[N-1]=A[N-1]\nBl[N-1].add(N-1)\nfor i in range(N-2,-1,-1):\n    if A[i]>B[i+1]:\n        B[i]=A[i]\n        Bl[i].add(i)\n    elif A[i]==B[i+1]:\n        B[i]=B[i+1]\n        Bl[i]=Bl[i+1]+{i}\n    elif A[i]<B[i+1]:\n        B[i]=B[i+1]\n        Bl[i]=Bl[i+1]\n\nC=[B[i]-A[i] for i in range(N)]\n'''\nprint(A)\nprint(B)\nprint(Bl)\nprint(C)\n'''\nCm=max(C)\nCml=set()\nfor i in range(N):\n    if C[i]==Cm:\n        Cml.update(Bl[i])\n'''\nprint(Cm)\nprint(Cml)\n'''\nans=len(Cml)\n\nprint(ans)", "\ndef main():\n    buf = input()\n    buflist = buf.split()\n    N = int(buflist[0])\n    T = int(buflist[1])\n    buf = input()\n    buflist = buf.split()\n    A = list(map(int, buflist))\n    min_price = A[0]\n    max_price_diff = 0\n    max_diff_count = 0\n    for i in range(1, N):\n        if A[i] < min_price:\n            min_price = A[i]\n        elif A[i] - min_price > max_price_diff:\n            max_price_diff = A[i] - min_price\n            max_diff_count = 1\n        elif A[i] - min_price == max_price_diff:\n            max_diff_count += 1\n    print(max_diff_count)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\n\nN, T = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nd = 0\nans = 1\nl = A[0]\nfor a in A[1:]:\n    l = min(l, a)\n    r = a\n    if r - l == d:\n        ans += 1\n    elif r - l > d:\n        ans = 1\n        d = r - l\n\nprint(ans)\n", "from sys import setrecursionlimit\nfrom functools import reduce\nfrom itertools import *\nfrom collections import defaultdict\nfrom bisect import bisect\n\ndef read():\n  return int(input())\n\ndef reads():\n  return [int(x) for x in input().split()]\n\nsetrecursionlimit(1000000)\n\n(N, T) = reads()\nA = reads()\n\nB = [0] * N\n\nB[0] = A[0]\nfor i in range(1, N):\n  B[i] = min(B[i-1], A[i])\n\nC = [max(A[i] - B[i], 0) for i in range(N)]\n\nM = max(C)\nresult = sum(c == M for c in C)\n\nprint(result)\n", "def inpl(): return [int(i) for i in input().split()]\n\nN, T = inpl()\nA = inpl()\nminA = [0 for _ in range(N)]\nminA[0] = A[0]\nfor i in range(N-1):\n    minA[i+1] = min(minA[i], A[i+1]) \nans = 1\nmaxpro = 0\nfor i in range(N-1):\n    if A[i+1]-minA[i] == maxpro:\n        ans += 1\n    if A[i+1]-minA[i] > maxpro:\n        ans = 1\n        maxpro = A[i+1]-minA[i]\n\nprint(ans)", "f = lambda: list(map(int,input().split()))\nn,_ = f()\na = list(f())\nb = [a[0]]+[0]*(n-1)\nfor i in range(1,n):\n    b[i] = min(a[i], b[i-1])\nc = [a[i]-b[i] for i in range(n)]\nm = max(c)\nprint((c.count(m)))\n", "# coding: utf-8\n\nN, T = list(map(int, input().split()))\nA = [int(s) for s in input().split()]\n\ncm = A[0]\ncd = 0\ncnt = 0\nfor i in range(1, N):\n    if A[i] < cm:\n        cm = A[i]\n    else:\n        d = A[i] - cm\n        if d == cd:\n            cnt += 1\n        elif d > cd:\n            cd = d\n            cnt = 1\nprint(cnt)\n", "import sys\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10000)\n\n\nN, T = (int(i) for i in input().split())\nA = [int(i) for i in input().split()]\n\nma = A[-1]\nmas = 1\nresma = 0\nrescc = 0\nfor i in range(N-2, -1 ,-1):\n    if A[i] > ma:\n        ma = A[i]\n        mas = 1\n    elif A[i] == ma:\n        mas += 1\n    else:\n        if ma - A[i] > resma:\n            resma = ma - A[i]\n            rescc = 1\n        elif ma - A[i] == resma:\n            rescc += 1\n        else:\n            pass\n\nprint(rescc)", "_,_,*a=map(int,open(0).read().split());d={}\nfor x,y in zip(a,__import__(\"itertools\").accumulate(a,min)):d[x-y]=d.get(x-y,0)+1\nprint(d[max(d.keys())])", "N,T=list(map(int,input().split()))\na=list(map(int,input().split()))\nmax_profit=0\nmini=a[0]\nfor i in range(1,N):\n    max_profit=max(max_profit,a[i]-mini)\n    mini=min(mini,a[i])\n#print(max_profit)\nmini=a[0]\nans=0\nfor i in range(1,N):\n    if a[i]-mini==max_profit:\n        ans+=1\n    mini=min(mini,a[i])\nprint(ans)\n"]