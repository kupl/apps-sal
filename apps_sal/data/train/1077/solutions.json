["t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    dir = []\n    \n    for j in range(n):\n        dir.append(input().strip().split())\n  \n    for j in range(n-1):\n        if dir[j+1][0] == 'Right':\n            dir[j][0] = 'Left'\n        else:\n            dir[j][0] = 'Right'\n\n    dir[n-1][0] = 'Begin'\n\n    for j in reversed(dir):\n        print(' '.join(j))\n\n\n        \n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Dec 23 22:17:11 2012\n\n@author: anant\n\"\"\"\n\nT = int(input())\nfor i in range(0,T):\n    l = []\n    l2 = []\n    n = int(input())\n    for j in range(0,n):\n      l.append(input())\n    length = len(l)\n    word = l[length-1].split();\n    direction = word[0]\n    city = l[length-1][l[length-1].find(\"on\")+3:]\n    temp = \"Begin on \"+city\n    l2.append(temp)\n    for i in range(2,length+1):\n      \n      word = l[length-i].split();\n      if direction == \"Right\":\n        direction = \"Left\"\n      else:\n        direction = \"Right\"\n      city = l[length-i][l[length-i].find(\"on\")+3:]\n      temp = direction + \" on \"+city\n      l2.append(temp)\n      \n      direction = word[0]\n     # l2.append(direction + \"on\" + l[length-i][])\n     \n    for sentence in l2:\n      print(sentence)\n    print(\"\")\n      \n      \n      \n    \n", "a=int(eval(input()))\nfor i in range(0,a):\n    n=eval(input())\n    k=n\n    word=[]\n    for j in range(0,n):\n        t=input()\n        word.append(t)\n        l=[]\n    flag=0\n    for j in range(k-1,-1,-1):\n        l=word[j].split()\n        \n        if(j==k-1):\n            print(\"Begin\", end=' ')\n        elif(right==0):\n            print(\"Right\", end=' ')\n        elif(right==1):    \n            print(\"Left\", end=' ')\n        \n        if(l[0]=='Left'):\n            right=0\n        elif(l[0]=='Right'):\n            right=1\n        for index in range (1,len(l)-1):\n            print(l[index], end=' ')\n        print(l[index+1])\n    print() \n      #  print l\n#print word[0].split()\n        ", "a=int(eval(input()))\nfor i in range(0,a):\n    n=eval(input())\n    k=n\n    word=[]\n    for j in range(0,n):\n        t=input()\n        word.append(t)\n        l=[]\n    flag=0\n    for j in range(k-1,-1,-1):\n        l=word[j].split()\n        \n        if(j==k-1):\n            print(\"Begin\", end=' ')\n        elif(right==0):\n            print(\"Right\", end=' ')\n        elif(right==1):    \n            print(\"Left\", end=' ')\n        \n        if(l[0]=='Left'):\n            right=0\n        elif(l[0]=='Right'):\n            right=1\n        for index in range (1,len(l)-1):\n            print(l[index], end=' ')\n        print(l[index+1])\n    print() \n      #  print l\n#print word[0].split()\n        ", "# Reverse Directions problem - Dec Cook off on Code Chef\nimport sys\n\nclass Directions:\n\t\n\tReversedDirections=[]\n\tReversedDirLines=[]\n\n\tdef __init__(self,dirLines,directions):\n\t\tself.DirLines=dirLines\n\t\tself.Directions=directions\n\t\t\ndef FormReversedDirLines(d):\n\ti=-1\n\tj=0\n\tReversedDirLines=[]\n\twhile i>=(-1*len(d.DirLines)):\n\t\tdirection=d.ReversedDirections[j]\n\t\tt=' '.join(d.DirLines[i].split()[1:])\n\t\tReversedDirLines.append(direction+' '+t)\n\t\ti=i-1\n\t\tj=j+1\n\treturn ReversedDirLines\n\n\ndef CorrectDirections(directions):\n\tcorrectedDirs=[directions[0]]\n\tfor d in directions[1:]:\n\t\tif d==\"Right\":\n\t\t\tcorrectedDirs.append(\"Left\")\n\t\telse:\n\t\t\tcorrectedDirs.append(\"Right\")\n\treturn correctedDirs\n\ndef Reverse(l):\n\tnewL=[]\n\ti=-1\n\twhile i>=(-1*len(l)):\n\t\tnewL.append(l[i])\n\t\ti=i-1\n\treturn newL\n\ndef RightCircularShift(l):\n\tnewL=l[1:]\n\tnewL.append(l[0])\n\treturn newL\n\n\ndef ReverseDirections(Directions):\n\trShiftDirs=RightCircularShift(Directions)\n\treverse=Reverse(rShiftDirs)\n\treverse=CorrectDirections(reverse)\n\treturn reverse\n\ndef WriteOutput(fPath,output):\n\tf=open(fPath,\"w\")\n\tfor d in output:\n\t\tf.writelines(d.ReversedDirLines)\n\t\tf.write('\\n')\n\tf.close()\n\ndef WriteOutputToConsole(output):\n\tfor d in output:\n\t\tfor l in d.ReversedDirLines:\n\t\t\tprint(l)\n\t\tprint('')\n\ndef GetDirectionsFromLines(lines):\n\tdirections=[]\n\tfor l in lines:\n\t\tdirections.append(l.split()[0])\n\treturn directions\n\ndef ReadInputFromConsole():\n\tlines=[]\n\tk=input()\n\twhile k!='':\n\t\tlines.append(k)\n\t\tk=input()\n\treturn ParseInput(lines)\n\ndef ParseInput(lines):\n\tnCases=int(lines[0])\n\tparsedLines=[]\n\tprev=0\n\ti=0\n\twhile i<nCases:\n\t\tnumLineIndex=prev+1\n\t\tnDirLines=int(lines[numLineIndex])\n\t\tparsedLines.append(lines[numLineIndex+1:numLineIndex+1+nDirLines])\n\t\ti=i+1\n\t\tprev=prev+1+nDirLines\n\tinputDirs=[]\n\tfor p in parsedLines:\n\t\tdirLines=p\n\t\tdirections=GetDirectionsFromLines(p)\n\t\tinputDirs.append(Directions(dirLines,directions))\n\treturn inputDirs\n\ndef ReadInput(fPath):\n\tf=open(fPath,\"r\")\n\tlines=f.readlines()\n\tf.close()\n\treturn ParseInput(lines)\t\t\n\ndef __starting_point():\n\t# TestCases\n\t#print ReverseDirections([\"Begin\", \"Right\", \"Right\", \"Left\"])\n\t#print ReverseDirections([\"Begin\",\"Left\",\"Left\",\"Right\",\"Right\",\"Right\"])\n\tdirections=ParseInput(sys.stdin.readlines())\n\tfor d in directions:\n\t\td.ReversedDirections=ReverseDirections(d.Directions)\n\t\td.ReversedDirLines=FormReversedDirLines(d)\n\n\tWriteOutputToConsole(directions)\n\t\n\n__starting_point()", "tc = int(input())\nwhile tc:\n\tn = int(input())\n\n\tdirection = []\n\troad = []\n\n\tfor i in range(0,n):\n\t\tline = input()\n\t\tdirection.append(line[0])\n\n\t\tif line[0] == 'B' or line[0] == 'R':\n\t\t\troad.append(line[9:])\n\t\telse:\n\t\t\troad.append(line[8:])\n\n\tprint('Begin on ' + road[n-1])\n\tfor i in range(0,n-1):\n\t\tif(direction[n-i-1] == 'R'):\n\t\t\top = 'Left on '\n\t\telse:\n\t\t\top = 'Right on '\n\t\tprint(op + road[n-i-2])\n\tprint()\n\n\ttc -= 1", "t=eval(input())\nfor q in range(t):\n\tn=eval(input())\n\ta=[]\n\tfor i in range(n):\n\t\ta.append(input().split())\n\t\ts=''\n\t\tfor x in range(2,len(a[i])):\n\t\t\ts+=' '+a[i][x]\n\t\ta[i][2]=s\n\tans='Begin on'+a[n-1][2]+'\\n'\n\n\ti=n-2\n\twhile i>-1:\n\t\tif a[i+1][0]=='Left':\n\t\t\tans+='Right on'\n\t\telse:\n\t\t\tans+='Left on'\n\t\tans+=a[i][2]+'\\n'\n\t\ti-=1\n\tprint(ans)\n\n", "import sys\n\nt=int(sys.stdin.readline());\nwhile t>0:\n\tdirections=[];\n\tn=int(sys.stdin.readline());\n\tfor i in range(0,n):\n\t\tline=sys.stdin.readline();\n\t\tdirections.append(line);\n\tx=directions[len(directions)-1].split()[2:]\n\tprint(\"Begin on\", end=' ')\n\tfor item in x:\n\t\tprint(item, end=' ')\n\tprint()\n\t\t\n\tfor i in range(len(directions)-2,-1,-1):\n\t\tfirst=directions[i+1].split()[0]\n\t\tx=directions[i].split()[2:]\n\t\tif first==\"Left\":\n\t\t\tfirst=\"Right\"\n\t\telif first==\"Right\":\n\t\t\tfirst=\"Left\"\n\t\tprint(first+\" on\", end=' ')\n\t\tfor item in x:\n\t\t\tprint(item, end=' ')\n\t\tprint()\n\tif t!=1:\t\n\t\tprint()\n\tt -= 1;\n", "n=int(input())\nwhile n>0:\n    t=int(input())\n    i=t\n    a=[]\n    while t>0:\n        r=input().split()\n        a.append(r)\n        t-=1\n    p=''\n    while i>0:\n        r=a[i-1]\n        j=r[0]\n        if t==0:\n            r[0]='Begin'\n            t=1        \n        elif p=='Right':\n            r[0]='Left'\n        elif p=='Left':\n            r[0]='Right'\n        r=' '.join(r)\n        print(r)\n        i-=1\n        p=j\n    print('\\n')\n    n-=1\n", "t = eval(input())\nfor i in range(0, t):\n\tn = eval(input())\n\tdirections = []\n\tfor j in range(0, n):\n\t\tx = input()\n\t\tdirections.append(x)\n\tfor j in range(n-1, -1, -1):\n\t\toutput = \"\"\n\t\tif j == (n-1):\n\t\t\toutput = \"Begin \"\n\t\telse:\n\t\t\tif(directions[j+1].find(\"Left\") == -1):\n\t\t\t\toutput = \"Left \"\n\t\t\telse:\n\t\t\t\toutput = \"Right \"\n\t\toutput = output + directions[j][directions[j].find(\"on\"):]\n\t\tprint(output)\n", "def __starting_point():\n    ntc=int(input())\n    c=0\n    res=[]\n    while c<ntc:\n        ro=[]\n        di=[]\n        n=int(input())\n        c1=0\n        res.append([])\n        res[c].append(\"\")\n        while c1<n:\n            var=input()\n            a=var.index(\"on\")\n            ro.append(var[a+3:])\n            a=var.index(\" \")\n            di.append(var[:a])\n            c1+=1\n        c1=n-2\n        res[c][0]=\"Begin on \" +ro[n-1]\n        while c1>=0:\n             if di[c1+1]==\"Left\":\n                 res[c].append(\"Right\")\n             elif di[c1+1]==\"Right\":\n                 res[c].append(\"Left\")\n             res[c][n-1-c1]=res[c][n-1-c1]+\" \"+\"on\"+\" \"+ro[c1]\n             c1-=1\n             \n        c+=1\n    c=0    \n    while c<ntc:\n        l=len(res[c])\n        c1=0\n        while(c1<l):\n            print(res[c][c1])\n            c1+=1\n        c+=1\n        \n    \n    \n\n             \n             \n            \n            \n            \n            \n        \n\n__starting_point()", "t=int(input())\nlistd=[]\nlistr=[]\nwhile(t):\n    n=int(input())\n    x=n\n    while(n):\n        a,b=input().split(' on ')\n        listd.append(a)\n        listr.append(b)\n        n=n-1\n    print('Begin on '+listr.pop())\n    listd.pop(0)\n    x=x-1\n    while(x):\n        temp=listd.pop()\n        if(temp=='Left'):\n            print('Right on '+listr.pop())\n        else:\n            print('Left on '+listr.pop())\n        x=x-1\n    print('')\n    t=t-1", "cases = int(input())\nfor case in range (cases):\n    N = int(input())\n    A = []\n    B = []\n    for n in range (N):\n        x,y = input().split(\" on \")\n        A.append(x)\n        B.append(y)\n    x = n\n    y = n-1\n    print(A[0],'on',B[n])\n    for y in range (N-1,0,-1):\n        if (A[x] == \"Right\"):\n            print(\"Left on\",B[y-1])\n        else:\n            print(\"Right on\",B[y-1])\n        x-=1\n    if (case != cases-1):\n        print(\"\")\n", "T=int(input())\n\nfor _ in range(T):\n    N=int(input())\n    road=[]\n    for _ in range(N):\n        t=input()\n        if t[0]=='B':\n            road.append(('B',t[5:]))\n        elif t[0]=='R':\n            road.append(('R',t[5:]))\n        else:\n            road.append(('L',t[4:]))\n    for x in range(N):\n        Tprev, temp=road.pop()\n        if x == 0:\n            print('Begin' + temp)\n        else:\n            if prev == 'L':\n                print('Right' + temp)\n            else:\n                print('Left' + temp)\n        prev=Tprev\n    print()\n", "import sys\nt = int( input() )\nwhile t > 0:\n\tn = int( input() )\n\tins = []\n\twhile n > 0:\n\t\ts = input()\n\t\tins.append(s)\n\t\tn -= 1\n\tidx = len(ins) - 2\n\tif ins[idx + 1].startswith('Left'):\n\t\tprint('Begin' + ins[idx + 1][4:])\n\telse:\n\t\tprint('Begin' + ins[idx + 1][5:])\n\t\n\twhile idx >= 0:\n\t\tif ins[idx + 1].startswith('Left'):\n\t\t\tif ins[idx].startswith('Left'):\n\t\t\t\tprint('Right' + ins[idx][4:])\n\t\t\telse:\n\t\t\t\tprint('Right' + ins[idx][5:])\n\t\telse:\n\t\t\tif ins[idx].startswith('Left'):\n\t\t\t\tprint('Left' + ins[idx][4:])\n\t\t\telse:\n\t\t\t\tprint('Left' + ins[idx][5:])\n\t\tidx -= 1\n\tprint('')\n\tt -= 1\n", "x=int(input())\nfor i in  range(0,x):\n\ty=int(input())\n\tlist=[]\n\tfor p in range(0,y):\n\t\tm=input()\n\t\tlist.append(m)\n\tlistans=[]\n\ts=list[y-1]\n\ts=s.split(\" \")\n\ts[0]=\"Begin\"\n\tq=\"\"\n\tflag=0\n\tfor r in s:\n\t\tif flag==1:\n\t\t\tq=q+\" \"\n\t\telse:\n\t\t\tflag=1\n\t\tq=q+r\n\t\t\n#\tprint q\n\n\tlistans.append(q)\n\tlistk=[]\n\tfor p in range(0,y-1):\n\t\tq=\"\"\n\t\tflag=0\n\t\ts=list[p]\n\t\tr=list[p+1]\n\t\tr=r.split(\" \")\n\t\ts=s.split(\" \")\n\t\tif r[0]==\"Right\":\n\t\t\ts[0]=\"Left\"\n\t\telse:\n\t\t\ts[0]=\"Right\"\n\t\tfor r in s:\n\t\t\tif flag==1:\n\t\t\t\tq=q+\" \"\n\t\t\telse:\n\t\t\t\tflag=1\n\t\t\tq=q+r\n\t\t#print q\n\t\tlistk.append(q)\n\tfor z in range(0,len(listk)):\n\t\tlistans.append(listk[len(listk)-1-z])\n\tfor z in listans:\n\t\tprint(z)\n\n", "import sys\n\nline = sys.stdin.readline()\n\nt = int(line)\n\nfor i in range(0,t):\n\tline = sys.stdin.readline();\n\tn = int(line);\n\tr = []\n\tlr = []\n\tline = sys.stdin.readline();\n\tline = line.strip()\n\t#print(\"line \" , line);\n\tr.append(line[9:])\n\tlr.append(-1)\n\tfor j in range(1,n):\n\t\tline = sys.stdin.readline()\n\t\tline = line.strip()\n\t\tif (line[0:7] == \"Left on\"):\n\t\t\tlr.append(0)\n\t\t\tr.append(line[8:])\n\t\t\t#print(lr)\n\t\t\t#print(r)\n\t\telse:\n\t\t\tlr.append(1)\n\t\t\tr.append(line[9:])\n\t\t\t#print(lr)\n\t\t\t#print(r)\n\tprint(\"Begin on \" + r[n-1])\n\tj = n - 1;\n\twhile j > 0:\n\t\tif (lr[j]):\n\t\t\tprint(\"Left on \" + r[j-1])\n\t\telse:\n\t\t\tprint(\"Right on \" + r[j-1])\n\t\tj = j - 1\n\tprint(\"\")\n", "def opp(a):\n    if a==\"Right\":\n        return \"Left\"\n    else:\n        return \"Right\"\ndef main():\n    t=int(input())\n    while(t):\n        t-=1\n        n=int(input())\n        a=[]\n        for i in range(n):\n            a.append(list(_ for _ in input().split(' on ')))\n        a.reverse()\n        print(\"Begin on\", a[0][1])\n        for i in range(1,n):\n            print(opp(a[i-1][0]),\"on\",a[i][1])\n        print(\"\")\nmain()", "import sys\n\nt = int(sys.stdin.readline())\n\nfor test in range(t):\n    n = int(sys.stdin.readline())\n    lines = [sys.stdin.readline().strip() for i in range(n)]\n    turns = [x.split()[0] for x in lines][1:][::-1]\n    turns = ['Right' if t == 'Left' else 'Left' for t in turns]\n    turns = ['Begin'] + turns\n    lines = lines[::-1]\n    for i in range(n):\n        print(turns[i], ' '.join(lines[i].split()[1:]))\n        \n    print()\n\n        \n", "t=eval(input())\nfor x in range (0,t):\n\tn=eval(input())\n\ta=[]\n\tfor i in range (0,n):\n\t\ta.append(input())\n\tc=a[n-1][0]\n\ta[n-1]=a[n-1].replace(\"Left\",\"Begin\")\n\ta[n-1]=a[n-1].replace(\"Right\",\"Begin\")\n\tprint(a[n-1])\n\tfor i in range (1,n-1):\n\t\tif(c=='R'):\n\t\t\tc=a[n-1-i][0]\n\t\t\ta[n-1-i]=a[n-1-i].replace(\"Right\",\"Left\")\n\t\telse:\n\t\t\tc=a[n-1-i][0]\n\t\t\ta[n-1-i]=a[n-1-i].replace(\"Left\",\"Right\")\n\t\tprint(a[n-1-i])\n\tif(c=='L'):\n\t\ta[0]=a[0].replace(\"Begin\",\"Right\")\n\telse:\n\t\ta[0]=a[0].replace(\"Begin\",\"Left\")\n\tprint(a[0])\n\t\t\n", "import math\nimport sys\ndef comp(x):\n\tif(x==\"Left\"):return \"Right\"\n\telif(x==\"Right\"):return \"Left\"\n\treturn x\ny=[\"\"]*45\ntest=int(eval(input()))\nfor i in range(test):\n\tn=int(eval(input()))\n\tfor j in range(n):\n\t\ty[j]=input()\n\tprev=\"Begin\"\n\tfor j in range(n):\n\t\tx=y[n-j-1].split()\n\t\tprint(comp(prev), end=' ')\n\t\tfor f in x[1:]:\n\t\t\tprint(f, end=' ')\n\t\tprint() \n\t\tprev=x[0]\n\t\t", "#!/usr/bin/python\n\ndef main():\n\tt = int(input())\n\twhile t:\n\t\tn= int(input())\n\t\tlst = []\n\t\tfor i in range(0,n):\n\t\t\ttemp = input()\n\t\t\ttemp = temp.split()\n\t\t\tlst.append(temp)\n\t\tprint(\"Begin on\", end=' ')\n\t\tl = len(lst)\n\t\tfor i in range(0, len(lst[l-1]) - 3):\n\t\t\tprint(lst[l-1][i+2], end=' ')\n\t\tprint(lst[l-1][len(lst[l-1]) - 1])\n\n\t\tfor i in range(1,l):\n\t\t\tind = l - i - 1\n\t\t\tif lst[ind+1][0] == \"Left\":\n\t\t\t\tprint(\"Right on\", end=' ')\n\t\t\telse :\n\t\t\t\tprint(\"Left on\", end=' ')\n\t\t\tfor j in range(0,len(lst[ind])-3):\n\t\t\t\tprint(lst[ind][j+2], end=' ')\n\t\t\tprint(lst[ind][len(lst[ind]) - 1])\n\n\t\t \n\t\tt = t - 1\n\n\ndef __starting_point():\n  main()\n\n__starting_point()", "\nT = int(input())\nfor t in range(T):\n\tN = int(input())\n\tp = []\n\tq = []\n\tfor n in range(N):\n\t\tx = input().split()\n\t\tif x[0] == 'Right':\n\t\t\tp.append('Left')\n\t\telif x[0] == 'Left':\n\t\t\tp.append('Right')\n\t\tq.append(' '.join(x[2:]))\n\tp.append('Begin')\n\tfor n in range(N):\n\t\tprint(p[-1-n], 'on', q[-1-n])\n\tprint()", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    strs = []\n    for j in range(N):\n        strs.append(input())\n    strs = list(reversed(strs))\n    prev = None\n    for index, direction in enumerate(strs):\n        if index == 0:\n            s = direction.split()\n            print('Begin ' + ' '. join(s[1:]))\n            prev = direction\n            continue\n        if prev.startswith('Left'):\n            print('Right ' + ' '. join(direction.split()[1:]))\n        else:\n            print('Left ' + ' '. join(direction.split()[1:]))\n        prev = direction\n"]