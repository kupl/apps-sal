["3\n\nimport sys\nfrom functools import lru_cache\n\nMOD = 1000000007\n\ncnk = [[1 for i in range(1001)] for j in range(1001)]\nfor i in range(1, 1001):\n    for j in range(1, i):\n        cnk[i][j] = cnk[i - 1][j - 1] + cnk[i - 1][j]\n\n\nk = int(input())\ncs = [int(input()) for i in range(k)]\n\nans = 1\nsm = 0\nfor c in cs:\n    sm += c\n    ans = (ans * cnk[sm - 1][c - 1]) % MOD\n\nprint(ans)\n", "kk = 1\nf = [0] * 1001\nf[0] = 1\nfor i in range(1, 1001):\n    kk *= i\n    kk %= (10**9+7)\n    f[i] = pow(kk, 10**9+5, 10**9+7)\n\n\ndef c(n, k):\n    prod = 1\n    for i in range(n-k+1, n+1):\n        prod *= i\n        prod %= (10**9+7)\n    prod = (prod*f[k])%(10**9+7)\n    \n    return prod\nl = []\nm = []\na = 1\ns = 0\nfor i in range(int(input())):\n    x = int(input())\n    s += x\n    l.append(s-1)\n    m.append(x-1)\n\nans = 1\nfor i in range(len(l)):\n    ans = (ans*c(l[i], m[i]))%(10**9+7)\nprint(ans)\n", "def __starting_point():\n    data = [int(input()) for i in range(int(input()))]\n\n    total = 1\n    prev = data[0]\n\n    for i, x in enumerate(data[1:]):\n        prev += 1\n        f = 1\n        c = 1\n\n        for j in range(x - 1):\n            total *= prev\n            prev += 1\n            f *= c\n            c += 1\n\n        total //= f\n        if total > 1000000007:\n                total %= 1000000007\n\n\n    print(total)\n__starting_point()", "from heapq import heapify, heappush, heappop\nfrom collections import Counter, defaultdict, deque, OrderedDict\nfrom sys import setrecursionlimit, maxsize\nfrom bisect import bisect_left, bisect, insort_left, insort\nfrom math import ceil, log, factorial, hypot, pi\nfrom fractions import gcd\nfrom copy import deepcopy\nfrom functools import reduce\nfrom operator import mul\nfrom itertools import product, permutations, combinations, accumulate, cycle\nfrom string import ascii_uppercase, ascii_lowercase, ascii_letters, digits, hexdigits, octdigits\n\nprod = lambda l: reduce(mul, l)\nprodmod = lambda l, mod: reduce(lambda x, y: mul(x,y)%mod, l)\n\ndef read_list(t): return [t(x) for x in input().split()]\ndef read_line(t): return t(input())\ndef read_lines(t, N): return [t(input()) for _ in range(N)]\n\nmod = 10**9+7\ndef inv(x):\n    return pow(x, mod-2, mod)\n\nK = read_line(int)\nballs = read_lines(int, K)\n\ns = balls[0]\nans = 1\nfor ball in balls[1:]:\n    ans *= ball\n    ans %= mod\n    for i in range(s+1, s+ball):\n        ans *= i\n        ans %= mod\n    for i in range(ball):\n        ans *= inv(i+1)\n        ans %= mod\n    s += ball\nprint(ans)\n", "def main():\n    MOD = int(1e9 + 7)\n    \n    def power(x, p):\n        if p == 0:\n            return 1\n        if p & 1:\n            return x * power(x, p - 1) % MOD\n        return power(x * x % MOD, p >> 1) % MOD\n    \n    \n    \n    import sys\n    \n    k, *c = [int(i) for i in sys.stdin.read().split()]\n    \n    inv_factorial = [1] * 1001\n    factorial = [1] * 1001\n    for i in range(2, 1001):\n        factorial[i] = factorial[i - 1] * i % MOD\n        inv_factorial[i] = power(factorial[i], MOD - 2)\n    \n    result = 1\n    size = 0\n    for i in c:\n        size += i\n        m = factorial[size - 1] * inv_factorial[i - 1] % MOD * inv_factorial[size - i] % MOD\n        result = result * m % MOD\n    \n    print(result)\n    \n    \n    \nmain()\n", "c = []\nk = int(input())\nfor i in range(k):\n    c.append(int(input()))\n\nmaxN = 1010\nbinomials = [[1], [1, 1]]\nfor i in range(2, maxN):\n    binomials.append([1])\n    for j in range(1, i):\n        binomials[i].append((binomials[i - 1][j - 1] + binomials[i - 1][j]) % 1000000007)\n    binomials[i].append(1)\n\ndp = [1] * k\nfor i in range(1, k):\n    dp[i] = (dp[i - 1] * binomials[sum(c[:i + 1]) - 1][c[i] - 1]) % 1000000007\n\nprint(dp[k - 1])\n", "import math\n\ndef read_data():\n    k = int(input())\n    ns = [int(input()) for i in range(k)]\n    return k, ns\n\ndef solve(k, ns):\n    n = sum(ns)\n    free_pos = n\n    result = 1\n    mod = 10**9 + 7\n    for ni in reversed(ns):\n        tmp = math.factorial(free_pos - 1)//math.factorial(free_pos - ni)\n        tmp //= math.factorial(ni - 1)\n        tmp %= mod\n        result *= tmp\n        result %= mod\n        free_pos -= ni\n    return result\n\nk, ns = read_data()\nprint(solve(k, ns))", "pt = []\nfor i in range(1000):\n    pt.append([0] * (i + 1))\n    pt[i][0] = pt[i][i] = 1\n    for j in range(1, i):\n        pt[i][j] = pt[i - 1][j - 1] + pt[i - 1][j]\nk, s, v = int(input()), int(input()), 1\nfor i in range(1, k):\n    c = int(input())\n    v = v * pt[s + c - 1][c - 1] % 1000000007\n    s += c\nprint(v)", "def g(): return int(input())\n\ndef ncr(n,r):\n    if 2*r > n:\n        r = n-r\n    a = 1\n    for i in range(r):\n        a = a * (n-i) // (i+1)\n    return a\n\nk = g()\nans = 1\nn2 = g()\nfor i in range(k-1):\n    n1 = n2\n    n2 += g()\n    ans = ans * ncr(n2-1,n1) % 1000000007\n\nprint(ans)\n", "s = int(input())\nMOD = int(1e9 + 7)\n\ncomb = [[1] + [0 for i in range(1000)] for j in range(1001)]\nfor i in range(1,1001):\n    for j in range(1,i+1):\n        comb[i][j] = (comb[i-1][j] + comb[i-1][j-1]) % MOD\n\nres = 1\nsums = 0\nfor i in range(s):\n    x = int(input())\n    res = (res * comb[sums + x - 1][x - 1]) % MOD\n    sums += x\nprint(res)\n", "from math import factorial\nn,ans,s = int(input()),1,0\nfor i in range(n) :\n  a = int(input())\n  ans=(ans*factorial(s+a-1)//factorial(s)//factorial(a-1))%1000000007\n  s+=a\nprint(ans)\n\n\n#copied...\n", "k = int(input())\n\nh = []\n\nfor i in range(k):\n    h.append(int(input()))\n\n\nffs = [1]\ndef f(n):\n    if n < len(ffs):\n        return ffs[n]\n    v = n * f(n-1)\n    ffs.append(v)\n    return v\n\n\ndef c(k, n):\n    return f(n) // (f(k) * f(n-k))\n\ndef cc(k, n):\n    return c(n-1, n + k-1)\n\n\ndef solve(h):\n    if len(h) == 1:\n        return 1\n\n    hh = h[:-1]\n    hh_len = sum(hh)\n\n    return solve(hh) * cc(h[-1] -1, hh_len + 1)\n\n\nr = 1\nfor i in range(len(h)):\n    r *= cc(h[i] -1, sum(h[:i]) + 1)\n\nprint(r % 1000000007)\n", "# coding=utf-8\n\ndef com(lo, hi):\n    loo = 1\n    for i in range(1, lo + 1):\n        loo *= i\n    hii = 1\n    for i in range(hi, hi - lo, -1):\n        hii *= i\n    return hii // loo\n\n\nn = int(input())\ndata = [int(input()) for i in range(n)]\n\nans = 1\ntotal = sum(data)\nfor i in range(len(data) - 1, -1, -1):\n    ans *= com(data[i] - 1, total - 1)\n    total -= data[i]\n\nprint(ans if ans < 1000000007 else ans % 1000000007)\n", "import math\n\ndef euclid_algorithm(a, b):\n    t1, t2 = abs(a), abs(b)\n    #saving equalities:\n    #t1 == x1 * a + y1 * b,\n    #t2 == x2 * a + y2 * b. \n    x1, y1, x2, y2 = int(math.copysign(1, a)), 0, 0, int(math.copysign(1, b))\n    if t1 < t2:\n        t1, t2 = t2, t1\n        x1, y1, x2, y2 = x2, y2, x1, y1\n\n    while t2 > 0:\n        if x1 * a + y1 * b != t1:\n            print('inshalla')\n        k = int(t1 // t2)\n        t1, t2 = t2, t1 % t2\n        #t1 - k * t2 == (x1 - k * x2) * a + (y1 - k * y2) * b\n        x1, y1, x2, y2 = x2, y2, x1 - k * x2, y1 - k * y2\n\n    return t1, x1, y1\n\ndef opposite_element(x, p):\n    gcd, k, l = euclid_algorithm(x, p)\n    if gcd != 1:\n        return -1\n    return k % p\n\ndef fact_mod(n, p):\n    prod = 1\n    for i in range(2,n+1):\n        prod *= i\n        prod %= p\n    return prod\n\nk = int(input())\nc = []\nfor i in range(k):\n    c.append(int(input()))\nprefix_sum = 0\np = 10 ** 9 + 7\ndenominator = 1\nfor c_i in c:\n    denominator *= fact_mod(c_i - 1, p)\n    denominator %= p\n    prefix_sum += c_i\n    denominator *= prefix_sum\n    denominator %= p\n\nnumenator = fact_mod(prefix_sum, p)\n\nprint(numenator * opposite_element(denominator, p) % p)\n", "def main():\n    from math import factorial as f\n    n, res = 0, 1\n    for _ in range(int(input())):\n        m = int(input())\n        res = res * f(n + m - 1) // f(n) // f(m - 1) % 1000000007\n        n += m\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import factorial\nn,ans,s = int(input()),1,0\nfor i in range(n) :\n  a = int(input())\n  ans=(ans*factorial(s+a-1)//factorial(s)//factorial(a-1))%1000000007\n  s+=a\nprint(ans)\n\n\n#copied...\n", "\nn = int(input())\nar = [int(input()) for _ in range(n)]\nfor i in range(1,n):\n\tar[i] += ar[i-1]\n\nM = 1000000007\nf = [1]\nfor i in range(1,1000000):\n\tf.append(f[-1]*i%M)\n\ndef C(n,k):\n\treturn (f[n]*pow(f[k],M-2,M)%M)*pow(f[n-k],M-2,M)%M\n\ndp = [1]*(n+4)\nfor i in range(1,n):\n\tdp[i] = C(ar[i]-1,ar[i-1])*dp[i-1]%M\n\nprint(dp[n-1])\n\n#  C:\\Users\\Usuario\\HOME2\\Programacion\\ACM\n", "k = int(input())\na = []\nfor _ in range(k):\n  a.append(int(input()))\nn = sum(a)\nN = 1000000007\n\ndef getCombi(a,n):\n  b = min(a,n-a)\n  ret = 1\n  for i in range(1,b+1):\n    ret = (ret*(n+1-i))//i\n  return ret%N\n\nret = 1\nfor i in range(k-1,0,-1):\n  ai = a[i] - 1\n  ni = sum(a[:i])\n  ret *= getCombi(ai,ni+ai)\n  ret %= N\nprint(ret)\n", "k,md,s,res=int(input()),1000000007,int(input()),1\nc=[[1]+[0]*1000 for i in range(1001)]\nfor i in range(1,1001):\n\tfor j in range(1,i+1):\n\t\tc[i][j]=(c[i-1][j]+c[i-1][j-1])%md\nfor i in range(1,k):\n\tx=int(input())\n\ts+=x\n\tres=(res*c[s-1][x-1])%md\nprint(res)", "from math import factorial\nk,s,res=int(input()),int(input()),1\nfor i in range(1,k):\n\tx=int(input())\n\ts+=x\n\tres=(res*factorial(s-1)//factorial(x-1)//factorial(s-x))%1000000007\nprint(res)", "k = int(input())\nres, mod, last = 1, 10**9 + 7, int(input())\ncomb = [[0]*1001 for _ in range(1001)]\ncomb[0][0] = 1\nfor i in range(1, 1001):\n    comb[i][0] = 1\n    for j in range(1, i+1):\n        comb[i][j] = (comb[i-1][j] + comb[i-1][j-1]) % mod\nfor _ in range(k-1):\n    to_place = int(input())\n    res = (res * comb[last+to_place-1][to_place-1]) % mod\n    last += to_place\nprint(res)\n", "ans, col, mod = 1, 0, 1000000007\nC = [[1 if i <= j else 0 for i in range(1001)] for j in range(1001)]\nfor i in range(1, 1001):\n  for j in range(1, i + 1):\n    C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod\nfor _ in range(int(input())):\n  a = int(input())\n  ans *= C[col + a - 1][col]\n  ans %= mod\n  col += a\nprint(ans)\n  \n", "from math import factorial\nn,ans,s = int(input()),1,0\nfor i in range(n) :\n  a = int(input())\n  ans=(ans*factorial(s+a-1)//factorial(s)//factorial(a-1))%1000000007\n  s+=a\nprint(ans)\n\n\n#copied...\n\n\n\n\n# Made By Mostafa_Khaled\n", "s = int(input())\nMOD = 1000000007\nMAXN = 1000\ndp = [[1] + [0 for i in range(MAXN)] for j in range(MAXN + 1)]\nfor i in range(1, MAXN + 1):\n    for j in range(1, i + 1):\n        dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\nans = 1\nacum = 0\nfor i in range(s):\n    x = int(input())\n    ans = (ans * dp[acum + x - 1][x - 1]) % MOD\n    acum += x\nprint(ans)", "numeroColores=int(input())\nlistaNumColores=[]\nfor i in range (0, numeroColores):\n    listaNumColores.append(int(input()))\nconclusion= 1\nanterior= listaNumColores[0]\n\nfor i, numeroColores in enumerate(listaNumColores[1:]):\n#for i in range(0,numeroColores-1):\n    anterior+= 1\n    #reset\n    conteo1= 1\n    conteo2= 1\n    for j in range(numeroColores - 1):\n        conclusion= conclusion* anterior\n        anterior+= 1\n        conteo1= conteo1* conteo2\n        conteo2+= 1\n    conclusion= conclusion// conteo1\nif conclusion> 1000000007:\n    #Aplicar modulo\n    conclusion = conclusion% 1000000007\nprint(conclusion)"]