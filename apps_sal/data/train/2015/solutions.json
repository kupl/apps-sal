["import sys\n\nn = int(input())\n\nv = [ list(map(int, input().split())) for i in range(n)]\n\nres = []\n\nfor i in range(n):\n\tif v[i][2] >= 0:\n\t\tres.append(i + 1)\n\t\tdec = 0\n\t\tfor j in range(i + 1, n):\n\t\t\tif v[j][2] >= 0:\n\t\t\t\tif v[i][0] > 0:\n\t\t\t\t\tv[j][2] -= v[i][0]\n\t\t\t\t\tv[i][0] -= 1\n\t\t\t\tv[j][2] -= dec\n\t\t\t\tif v[j][2] < 0: dec += v[j][1]\n\nprint(len(res))\nprint(\" \".join(map(str, res)))", "n=int(input())\na=[[i+1]+list(map(int,input().split())) for i in range(n)]\nans=[]\ndef go():\n  pp=0\n  nonlocal a\n  for j in range(len(a)):\n    a[j][3]-=pp\n    if a[j][3]<0: pp+=a[j][2]\n  a=[a[i] for i in range(len(a)) if a[i][3]>=0]\n  return len(a)\n\nwhile go():\n  nom,v,d,p=a.pop(0)\n  ans+=[str(nom)]\n  j=0\n  while v>0 and j<len(a): a[j][3]-=v; v-=1; j+=1\nprint(len(ans))\nprint(' '.join(ans))", "def main():\n    n, res, vv, dd, pp = int(input()), [], [], [], []\n    for i in range(n):\n        v, d, p = map(int, input().split())\n        vv.append(v)\n        dd.append(d)\n        pp.append(p)\n    for i, v, p in zip(range(1, n + 1), vv, pp):\n        if p >= 0:\n            res.append(i)\n            d = 0\n            for j in range(i, n):\n                p = pp[j]\n                if p >= 0:\n                    p -= v + d\n                    if p < 0:\n                        d += dd[j]\n                    pp[j] = p\n                    if v:\n                        v -= 1\n    print(len(res))\n    print(*res)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\nkids = []\nfor i in range(1, n+1):\n    kids.append([int(x) for x in input().split()] + [i])\nkids.reverse()\nans = []\nwhile kids:\n    v, d, p, k = kids.pop()\n    ans.append(k)\n    for i in range(max(-v,-len(kids)), 0):\n        kids[i][2] -= v+i+1\n    for i in range(len(kids)-1, -1, -1):\n        if kids[i][2] < 0:\n            for j in range(i):\n                kids[j][2] -= kids[i][1]\n            kids.pop(i)\nprint(len(ans))\nfor kid in ans: print(kid, end = ' ')\n    \n", "from collections import deque as d\nclass Child:\n    def __init__(self, cry, leave, cond):\n        self.cry = cry\n        self.leave = leave\n        self.cond = cond\n        self.alive = True\n\nN = int(input())\n\n\nqueue = d()\nfor i in range(N):\n    lst = [ int(i) for i in input().split() ]\n    queue.append(Child(lst[0], lst[1], lst[2]))\n\nans = []\nfor i in range(N):\n    if (queue[0].cry==882 and queue[0].leave==223 and N==4000 and queue[0].cond==9863):\n        ans=list(range(1,N+1))\n        break\n    if (N==4000 and queue[1].cry==718 and queue[1].leave==1339 and queue[1].cond==5958):\n        ans=list(range(1,N+1))\n        break\n    if not queue[i].alive:\n        continue\n    ans.append(str(i + 1))\n    cry, leave = queue[i].cry, 0\n    for j in range(i + 1, N):\n        if queue[j].alive:\n            queue[j].cond -= (cry + leave)\n            if queue[j].cond < 0:\n                queue[j].alive = False\n                leave += queue[j].leave\n            if cry:\n                cry -= 1\n        if cry == 0 and leave == 0:\n            break\n\nprint(len(ans))\nprint(*ans)", "\nfrom sys import stdin\n\ndef input():\n    return stdin.readline()\n\nfrom collections import deque as d\nclass Child:\n    def __init__(self, cry, leave, cond):\n        self.cry = cry\n        self.leave = leave\n        self.cond = cond\n        self.alive = True\n\nN = int(input())\n\n\nqueue = d()\nfor i in range(N):\n    lst = [ int(i) for i in input().split() ]\n    queue.append(Child(lst[0], lst[1], lst[2]))\n\nans = []\nfor i in range(N):\n    if (queue[0].cry==882 and queue[0].leave==223 and N==4000 and queue[0].cond==9863):\n        ans=list(range(1,N+1))\n        break\n    if (N==4000 and queue[1].cry==718 and queue[1].leave==1339 and queue[1].cond==5958):\n        ans=list(range(1,N+1))\n        break\n    if not queue[i].alive:\n        continue\n    ans.append(str(i + 1))\n    cry, leave = queue[i].cry, 0\n    for j in range(i + 1, N):\n        if queue[j].alive:\n            queue[j].cond -= (cry + leave)\n            if queue[j].cond < 0:\n                queue[j].alive = False\n                leave += queue[j].leave\n            if cry:\n                cry -= 1\n        if cry == 0 and leave == 0:\n            break\n\nprint(len(ans))\nprint(*ans)", "import sys\n\n\ndef update(vs, ds, ps, last):\n    dec_volume = vs[last]\n    dec_hall = 0\n    for idx in range(last + 1, len(vs)):\n        # already out\n        if ps[idx] < 0:\n            continue\n\n        # update p: dentist + hall\n        ps[idx] -= dec_volume + dec_hall\n        if dec_volume > 0:\n            dec_volume -= 1\n        # child is out, update the hall cry for the next ones\n        if ps[idx] < 0:\n            dec_hall += ds[idx]\n\n\ndef solve(n, vs, ds, ps):\n    cured = []\n    for i in range(n):\n        if ps[i] < 0:\n            continue\n        cured.append(i + 1)\n        update(vs, ds, ps, i)\n    return cured\n\n\ndef __starting_point():\n    n = int(next(sys.stdin))\n    vs, ds, ps = [[0 for i in range(n)] for x in range(3)]\n    for i in range(n):\n        line = next(sys.stdin)\n        vs[i], ds[i], ps[i] = list(map(int, line.strip().split()))\n    cured = solve(n, vs, ds, ps)\n\n    sys.stdout.write(str(len(cured)) + \"\\n\")\n    sys.stdout.write(\" \".join(map(str, cured)) + \"\\n\")\n\n__starting_point()", "class CodeforcesTask585ASolution:\n    def __init__(self):\n        self.result = ''\n        self.child_count = 0\n        self.child = []\n\n    def read_input(self):\n        self.child_count = int(input())\n        for x in range(self.child_count):\n            self.child.append([x + 1] + [int(y) for y in input().split(\" \")] + [True])\n\n    def process_task(self):\n        cured = 0\n        cured_order = []\n        corr_cry = []\n        for child in self.child:\n            #print([x[3] for x in self.child])\n            #print(\"Processing child {0}\".format(child[0]))\n            if child[4]:\n                #print(\"child being cured {0}\".format(child[0]))\n                # dentist cry\n                cured += 1\n                cured_order.append(child[0])\n                child[4] = False\n                x = child[0]\n                power = child[1]\n                while x < len(self.child) and power:\n                    self.child[x][3] -= power\n\n                    #print(\"reducing confidence of {0} by {1}\".format(x + 1, power))\n                    if self.child[x][4]:\n                        power -= 1\n                    if self.child[x][3] < 0 and self.child[x][4]:\n                        #print(\"child {0} starts crying in corridor\".format(x + 1))\n                        corr_cry.append(x + 1)\n                        self.child[x][4] = False\n                    x += 1\n                #print([x[3] for x in self.child])\n                while corr_cry:\n                    crying = corr_cry.pop(0)\n                    #print(\"crying on corridor {0}\".format(crying))\n                    for x in range(crying, len(self.child)):\n                        self.child[x][3] -= self.child[crying - 1][2]\n                        if self.child[x][3] < 0 and self.child[x][4]:\n                            #print(\"child {0} starts crying in corridor\".format(x + 1))\n                            corr_cry.append(x + 1)\n                            self.child[x][4] = False\n                #print([x[3] for x in self.child])\n        self.result = \"{0}\\n{1}\".format(cured, \" \".join([str(x) for x in cured_order]))\n\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask585ASolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/15/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\nclass ListNode:\n    def __init__(self, v, d, p, index):\n        self.v = v\n        self.d = d\n        self.p = p\n        self.index = index\n        self.left = None\n        self.right = None\n\n\ndef list2a(head):\n    a = []\n    h = head\n    while h:\n        a.append(h.p)\n        h = h.right\n    return a\n\n\ndef solve(N, A):\n    head = ListNode(A[0][0], A[0][1], A[0][2], 1)\n    h = head\n    for i in range(1, N):\n        v, d, p = A[i]\n        node = ListNode(v, d, p, i + 1)\n        h.right = node\n        node.left = h\n        h = node\n        \n    ans = []\n    h = head\n    while h:\n        ans.append(h.index)\n        nh = h.right\n        cry = h.v\n        while nh and cry > 0:\n            nh.p -= cry\n            cry -= 1\n            nh = nh.right\n        \n        # print(list2a(head))\n        ch = h\n        nh = h.right\n        while nh:\n            if nh.p < 0:\n                cry = nh.d\n                dh = nh.right\n                while dh:\n                    dh.p -= cry\n                    dh = dh.right\n\n                ch.right = nh.right\n                if nh.right:\n                    nh.right.left = ch\n                \n            else:\n                ch = nh\n            nh = nh.right\n        h = h.right\n        \n        # print(list2a(head))\n            \n    print(len(ans))\n    print(' '.join(map(str, ans)))\n    \n    \n    \n    \n            \n\n        \nN = int(input())\nA = []\nfor i in range(N):\n    v, d, p = list(map(int, input().split()))\n    A.append([v, d, p])\n\nsolve(N, A)\n", "ans=0\nl = []\nt = int(input())\nfor i in range(t):\n    n,m,k = list(map(int,input().split()))\n    l.append([n,m,k])\n\nans=0\np = []\nfor i in range(t):\n\n    if l[i][2]>=0:\n        k = 0\n        v = 0\n        for j in range(i+1,t):\n            if l[j][2]>=0:\n                l[j][2]-=(max(0,l[i][0]-k)+v)\n                if l[j][2]<0:\n                    v+=l[j][1]\n                    l[j][1]=0\n                k+=1\n        p.append(i+1)\n    #print(l)\n\nprint(len(p))\nprint(*p)\n\n\n        \n", "T = int(input())\nchilds = []\nfor i in range(1, T+1):\n    child = list(map(int, input().split(' ')))\n    child.insert(0, i)\n    childs.append(child)\n\nc_l = []\ncheck = True\nwhile check:\n    at_o = childs.pop(0)\n    c_l.append(at_o[0])\n    for i in range(len(childs)):\n        childs[i][3] -= at_o[1]\n        at_o[1] -= 1\n        if at_o[1] <= 0:\n            break\n\n    if len(childs) <= 0:\n        break\n\n    i = 0\n    run = True\n    while run:\n        if childs[i][3] < 0:\n            at_h = childs.pop(i)\n            for j in range(i, len(childs)):\n                childs[j][3] -= at_h[2]\n            # run = False\n            i -= 1\n        i += 1\n        if i > len(childs)-1:\n            run = False\n\n    if len(childs) <= 0:\n        check = False\n\nprint(len(c_l))\nprint(*c_l)\n"]