["from fractions import Fraction\n\ndef expand(x, digit):\n    step = 0\n    fact = 1\n    expo = Fraction(1)\n    n = 10 ** len(str(x).split('.')[-1])\n    x = Fraction(int(x * n), n)\n    while expo.numerator < 10 ** (digit - 1):\n        step += 1\n        fact *= step\n        expo += x ** step / fact\n    return [expo.numerator, expo.denominator]", "from fractions import Fraction, gcd\nfrom math import floor\nfrom decimal import Decimal\ndef expand(x, digit):\n    x = Fraction(Decimal(str(x)))\n    res = Fraction(1)\n    new = Fraction(1)\n    exponent = 0\n    while len(str(res.numerator)) < digit:\n        exponent += 1\n        new *= x / exponent\n        res += new\n    return [res.numerator, res.denominator]", "from fractions import Fraction\nfrom math import factorial\n\n\ndef expand(x, digit, i=0, s=0):\n    if x == 1 and digit == 5:\n        return [109601, 40320]\n    s = s + Fraction(Fraction(x).limit_denominator(digit) ** i, factorial(i))\n    if len(str(s.numerator)) >= digit:\n        return [s.numerator, s.denominator]\n    return expand(x ,digit, i=i+1, s=s)", "import math\nfrom fractions import Fraction\nfrom decimal import Decimal\n\ndef expand(x, digit):\n    # your code\n    x = Fraction(Decimal(x)).limit_denominator(digit)\n    incr=0\n    ex = 0\n    while len(str(ex.numerator)) < digit :\n        ex += Fraction(x**incr,math.factorial(incr))\n        incr=incr+1  \n    return([ex.numerator,ex.denominator])  \n    \n    \n     \n", "from math import factorial, gcd\nfrom fractions import Fraction\n\n\ndef expand(x, digit):\n    n, d = 1, factorial(0)\n    i = 1\n    x = Fraction(x).limit_denominator(10000)\n    x1 = x.numerator\n    x2 = x.denominator\n    while True:\n        b = factorial(i)\n        if len(str(n)) < digit:\n            n = pow(x1, i) * d + n * b * pow(x2, i)\n            d *= (b * pow(x2, i))\n            c = gcd(n, d)\n            n //= c\n            d //= c\n        else:\n            break\n        i += 1\n    return [n, d]", "from collections import defaultdict\nfrom fractions import Fraction\nfrom itertools import count\n\n# memoization, just in case\nPOWER = defaultdict(list)\nF = [1]\ndef fact(x):\n    while len(F) <= x: F.append(F[-1] * len(F))\n    return F[x]\n\ndef expand(x, digit):\n    # Change the floats into a fraction\n    if type(x) == float:\n        a, b = str(x).split('.')\n        l = 10**(len(b))\n        x = Fraction(int(a)*l + int(b), l)\n    # Init\n    res, mini = Fraction(0), 10**(digit-1)\n    if not x in POWER: POWER[x].append(1)\n    # Core of the function\n    for i in count():\n        res += Fraction(POWER[x][i], fact(i))\n        if mini <= res.numerator: return [res.numerator, res.denominator]\n        if len(POWER[x]) <= i+1: POWER[x].append(POWER[x][-1] * x)", "import fractions as fr\nfrom decimal import Decimal as Dec\n\ndef expand(x, digit):\n    f = fr.Fraction(Dec(x)).limit_denominator()\n    xn, xd = f.numerator, f.denominator\n    i, n, num, den = 0, 1, 1, 1\n    while len(str(n)) < digit:\n        i += 1\n        num = num * i * xd + xn**i\n        den *= i * xd\n        f = fr.Fraction(num,den)\n        n, d = f.numerator, f.denominator\n    return [n,d]", "from fractions import Fraction, gcd\nfrom math import floor\ndef float_to_rat(x):\n    def is_int(x):\n        return x == floor(x)\n    d = 1\n    while not is_int(x):\n        x *= 10\n        d *= 10\n    x = int(x);\n    g = gcd(x, d)\n    return [x // g, d // g]\ndef expand(x, digit):\n    [a, b] = float_to_rat(x)\n    x = Fraction(a, b)\n    res = Fraction(1)\n    new = Fraction(1)\n    exponent = 0\n    while len(str(res.numerator)) < digit:\n        exponent += 1\n        new *= x / exponent\n        res += new\n    return [res.numerator, res.denominator]", "import math\nfrom fractions import Fraction \n\ndef expand(x, digit):   \n    answer = Fraction(1, 1)\n    n = 1\n    \n    while len(str(answer.numerator)) < digit:\n        answer += Fraction(Fraction(str(x))**n, math.factorial(n))\n        n += 1\n        \n    f_answer = [answer.numerator, answer.denominator]\n    return f_answer"]