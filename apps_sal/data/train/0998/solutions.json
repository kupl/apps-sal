["n,q=map(int,input().split())\ndr={}\ndc={}\nfor i in range(1,n+1):\n dr[i]=0\n dc[i]=0\nmer=0\nmec=0\nfor i in range(q):\n s,j,k=input().split()\n j=int(j)\n k=int(k)\n if s==\"RowAdd\":\n  dr[j]+=k\n  if dr[j]>mer:\n   mer=dr[j]\n else:\n  dc[j]+=k\n  if mec<dc[j]:\n   mec=dc[j]\n# m=max(list(dr.values()))+max(list(dc.values()))\n\n# for i in range(n):\n#     for j in range(n):\n#         ar[i][j]=dr[i+1]+dc[j+1]\n#         if ar[i][j]>m:\n#             m=ar[i][j]\n\nprint(mer+mec)", "\nN,Q = [int(i) for i in input().split()]\n\nrow = [0 for i in range(N)]\ncol = [0 for i in range(N)]\n\nfor i in range(Q):\n x = input().split()\n if(x[0]=='RowAdd'):\n  row[int(x[1])-1] += int(x[2])\n else:\n  col[int(x[1])-1] += int(x[2])\n\nprint(max(row)+max(col))", "n,q = list(map(int,input().split()))\nrow = [0]*n\ncolumn = [0]*n\nfor i in range(q):\n a,b,c = input().split()\n if a=='RowAdd':\n  row[int(b)-1]+=int(c)\n else:\n  column[int(b)-1]+=int(c)\nprint(max(row)+max(column))\n", "\nfrom sys import stdin,stdout\nn , q = [int(x) for x in stdin.readline().split()]\nrow =[0]*n\ncol =[0]*n\nfor i in range(q):\n a,b,c = input().split()\n if a=='RowAdd':\n  row[int(b)-1] +=int(c)\n else:\n  col[int(b)-1]+= int(c)\nprint(max(row)+ max(col))", "from sys import stdin,stdout\nfrom math import gcd,log2,log10,floor;\nimport math;\nfrom collections import defaultdict,OrderedDict\nfrom bisect import bisect_left\n# import numpy as np\n# input=stdin.readline\n# print=stdout.write\n\nn,q=list(map(int,input().split()))\n\nr=[0]*(n+1);\nc=[0]*(n+1);\nfor i in range(q):\n alpha,beta,gamma=list(map(str,input().split()))\n beta,gamma=int(beta),int(gamma)\n if alpha==\"RowAdd\":\n  r[beta]+=gamma;\n else:\n  c[beta]+=gamma;\nprint(max(r)+max(c))\n\n", "for u in range(1):\n n,q=list(map(int,input().split()))\n l,d=[0]*n,[0]*n\n for i in range(q):\n  s=input().split()\n  if(s[0]=='RowAdd'):\n   x,y=int(s[1]),int(s[2])\n   l[x-1]+=y\n  else:\n   x,y=int(s[1]),int(s[2])\n   d[x-1]+=y\n print(max(l)+max(d))\n", "n, operations = map(int, input().split())\nrows = [0]*n\ncolumns = [0]*n\nmaxi=-float(\"Inf\")\nfor i in range(operations):\n temp =input().split()\n if temp[0]==\"RowAdd\":\n  rows[int(temp[1])-1]+=int(temp[2])\n else:\n  columns[int(temp[1])-1]+=int(temp[2])\n  \nprint(max(rows)+max(columns))", "'''\n\n          Online Python Compiler.\n       Code, Compile, Run and Debug python program online.\nWrite your code in this editor and press \"Run\" button to execute it.\n\n'''\n\nimport sys\nimport os\nimport math\nimport copy\nfrom bisect import bisect\nfrom io import BytesIO, IOBase\n# from math import sqrt,floor,factorial,gcd,log,ceil\nfrom collections import deque,Counter,defaultdict\nfrom itertools import permutations, combinations\n\n#define function \ndef Int(): return int(sys.stdin.readline())\ndef Mint(): return map(int,sys.stdin.readline().split())\ndef Lstr(): return list(sys.stdin.readline().strip())\ndef Str(): return sys.stdin.readline().strip()\ndef Mstr(): return map(str,sys.stdin.readline().strip().split())\ndef List(): return list(map(int,sys.stdin.readline().split()))\ndef Hash(): return dict()\ndef Mod(): return 1000000007\ndef Ncr(n,r,p): return ((fact[n])*((ifact[r]*ifact[n-r])%p))%p\ndef Most_frequent(list): return max(set(list), key = list.count)\ndef Mat2x2(n): return [List() for _ in range(n)]\n\n# Driver Code   \ndef solution():\n n,k=map(int,input().split())\n m=-float('inf')\n a=[0 for i in range(n)]\n b=[0 for i in range(n)]\n for i in range(k):\n  q,r,e=map(str,input().split())\n  r,e=int(r),int(e)\n  if q[0]=='R':\n   a[r-1]+=e\n  else:\n   b[r-1]+=e\n print(str(max(a)+max(b))+'\\n')\n   \n  \n#Call the solve function          \ndef __starting_point():\n  solution() \n__starting_point()", "n, q = list(map(int, input().split()))\nr = [0] * n\nc = [0] * n\nfor _ in range(q):\n s, x, p = list(map(str, input().split()))\n x, p = int(x), int(p)\n if s == 'RowAdd':\n  r[x - 1] += p\n else:\n  c[x - 1] += p\nprint(max(r) + max(c))\n", "n,q=list(map(int,input().split()))\nr=[0]*n\nc=[0]*n\nfor _ in range(q):\n s,x,p=list(map(str,input().split()))\n x,p=int(x),int(p)\n if s=='RowAdd':\n  r[x-1]+=p\n else:\n  c[x-1]+=p\nprint(max(r)+max(c))\n", "n,q=list(map(int,input().split()))\nr=[0]*n\nc=[0]*n\nfor _ in range(q):\n s,x,p=list(map(str,input().split()))\n x,p=int(x),int(p)\n if s=='RowAdd':\n  r[x-1]+=p\n else:\n  c[x-1]+=p\nprint(max(r)+max(c))\n", "n,q=map(int,input().split())\na=[0]*n\nb=[0]*n\nwhile(q>0):\n o,r,v=input().split()\n if(o==\"RowAdd\"):\n  a[int(r)-1]+=int(v)\n else:\n  b[int(r)-1]+=int(v)\n q=q-1\nprint(max(a)+max(b))", "n,q=map(int,input().split())\ng=[0]*n\ng1=[0]*n\nwhile(q>0):\n o,r,v=input().split()\n if(o==\"RowAdd\"):\n  \n  g[int(r)-1]+=int(v)\n else:\n  g1[int(r)-1]+=int(v)\n  \n q=q-1\nprint(max(g)+max(g1))", "n,k=list(map(int,input().strip().split()))\nm1=dict()\nm2=dict()\nfor _ in range(k):\n list1=input().split()\n a=list1[0]\n b=int(list1[1])\n c=int(list1[2])\n \n if a==\"RowAdd\":\n  if b in m1:\n   m1[b]+=c\n  else:\n   m1[b]=c\n else:\n  if b in m2:\n   m2[b]+=c\n  else:\n   m2[b]=c\nmax1=0\nfor val in m1:\n if m1[val]>max1:\n  max1=m1[val]\n\nmax2=0\nfor val in m2:\n if m2[val]>max2:\n  max2=m2[val]\n\nprint(max1+max2)\n \n  \n", "import operator\nn, q = map(int, input().split())\nx = [0]*(n+1)\ny = [0]*(n+1)\nfor _ in range(q):  \n a = input().split()\n if a[0] == \"RowAdd\":\n  x[int(a[1])] += int(a[2])\n else:\n  y[int(a[1])] += int(a[2])\nprint(max(x) + max(y))", "n,m=list(map(int,input().split()))\na = [0]*(n+1)\nb=[0]*(n+1)\nfor i in range(0,m):\n op=input().split()\n if op[0]==\"RowAdd\":\n   a[int(op[1])]+=int(op[2])\n if op[0]==\"ColAdd\":\n  \n   b[int(op[1])]+=int(op[2])\nprint(max(a)+max(b))\n \n \n", "check_digit = lambda x: int(x) if x.isdigit() else x\nn, q = map(int, input().split())\nrows = {i : 0 for i in range(n)}\ncolumns = {i : 0 for i in range(n)}\n\nfor _ in range(q):\n op, num, x = map(check_digit, input().split())\n if op == \"RowAdd\":\n  rows[num-1] += x\n else:\n  columns[num-1] += x\nprint(max(rows.values()) + max(columns.values()))", "check_digit = lambda x: int(x) if x.isdigit() else x\nn, q = map(int, input().split())\nrows = {i : 0 for i in range(n)}\ncolumns = {i : 0 for i in range(n)}\n\nfor _ in range(q):\n op, num, x = map(check_digit, input().split())\n if op == \"RowAdd\":\n  rows[num-1] += x\n else:\n  columns[num-1] += x\nprint(max(rows.values()) + max(columns.values()))", "check_digit = lambda x: int(x) if x.isdigit() else x\nn, q = list(map(int, input().split()))\nrows = {i : 0 for i in range(n)}\ncolumns = {i : 0 for i in range(n)}\n\nfor _ in range(q):\n op, num, x = list(map(check_digit, input().split()))\n if op == \"RowAdd\":\n  rows[num-1] += x\n else:\n  columns[num-1] += x\nprint(max(rows.values()) + max(columns.values()))\n", "n,q = map(int,input().split())\nrow = [0]*n\ncol = [0]*n\nfor i in range(q):\n s = input()\n if s[0] == 'R':\n  r,x = map(int,s.split()[1:])\n  row[r-1] += x\n else:\n  c,x = map(int,s.split()[1:])\n  col[c-1] += x\nprint(max(row)+max(col))", "N, T = map(int,input().split())\n\nr = [0] * (N + 1)\nc = [0] * (N + 1)\nfor i in range(T):\n task = input().split()\n if(task[0] == \"RowAdd\"):\n  r[int(task[1])] += int(task[2])\n if(task[0] == \"ColAdd\"):\n  c[int(task[1])] += int(task[2])\nprint(max(r) + max(c))"]