["S = input()\nSA = [0]\nn = 0\nfor c in S:\n    if c=='A': n+=1\n    SA.append(n)\n\nT = input()\nTA = [0]\nn = 0\nfor c in T:\n    if c=='A': n+=1\n    TA.append(n)\n\n\nq = int(input())\nfor _ in range(q):\n    a, b, c, d = list(map(int, input().split()))\n\n    nSA = SA[b]-SA[a-1]\n    nSB = b-a+1-nSA\n    nTA = TA[d]-TA[c-1]\n    nTB = d-c+1-nTA\n\n    print(('YES' if (nSA-nSB)%3 == (nTA-nTB)%3 else 'NO'))\n", "from itertools import accumulate\nimport sys\n\nS = input()\nT = input()\n\nns = len(S)\nnt = len(T)\nSA = [0] * (ns + 1)\nSB = [0] * (ns + 1)\nTA = [0] * (nt + 1)\nTB = [0] * (nt + 1)\nfor i, s in enumerate(S, 1):\n    if s == \"A\":\n        SA[i] = 1\n    else:\n        SB[i] = 1\nfor i, t in enumerate(T, 1):\n    if t == \"A\":\n        TA[i] = 1\n    else:\n        TB[i] = 1\nSA = list(accumulate(SA))\nSB = list(accumulate(SB))\nTA = list(accumulate(TA))\nTB = list(accumulate(TB))\n\n\nq = int(input())\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    sa = SA[b] - SA[a - 1]\n    sb = SB[b] - SB[a - 1]\n    ta = TA[d] - TA[c - 1]\n    tb = TB[d] - TB[c - 1]\n    # \u305c\u3093\u3076B\u306b\u3057\u3061\u3083\u3046\n    sb += 2 * sa\n    tb += 2 * ta\n    if abs(sb - tb) % 3 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "fc=lambda x:1 if x=='A' else 2\ns=list(map(fc,list(input())))\nt=list(map(fc,list(input())))\nq=int(input())\nabcd=[list(map(int,input().split())) for _ in range(q)]\ncs=[0]\ntmp=0\nfor x in s:\n  tmp+=x\n  cs.append(tmp)\nct=[0]\ntmp=0\nfor x in t:\n  tmp+=x\n  ct.append(tmp)\nfor a,b,c,d in abcd:\n  if (cs[b]-cs[a-1])%3==(ct[d]-ct[c-1])%3:\n    print('YES')\n  else:\n    print('NO')\n", "S, T = input(), input()\nq = int(input())\n\nls, lt = len(S), len(T)\nacs, act = [0]*(ls+1), [0]*(lt+1)\n\nfor i in range(1, ls+1):\n    acs[i] = acs[i-1] + (S[i-1]==\"A\")\nfor i in range(1, lt+1):\n    act[i] = act[i-1] + (T[i-1]==\"A\")\n\nfor _ in range(q):\n    a, b, c, d = list(map(int, input().split()))\n    print((\"YES\" if (acs[b]-acs[a-1]+b-a+1)%3==(act[d]-act[c-1]+d-c+1)%3 else \"NO\"))\n", "import math\n#import numpy as np\nimport queue\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\n\ndef main():\n    s = input()\n    t = input()\n    ns = len(s)+1\n    nt = len(t)+1\n    ssa = [0]*ns\n    ssb = [0]*ns\n    sta = [0]*nt\n    stb = [0]*nt\n    for i,si in enumerate(s):\n        if si == \"A\":\n            da = 1\n            db = 0\n        else:\n            da = 0\n            db = 1\n        ssa[i+1] = ssa[i]+da\n        ssb[i+1] = ssb[i]+db\n    for i,ti in enumerate(t):\n        if ti == \"A\":\n            da = 1\n            db = 0\n        else:\n            da = 0\n            db = 1\n        sta[i+1] = sta[i]+da\n        stb[i+1] = stb[i]+db\n\n    q = int(ipt())\n    for _ in range(q):\n        a,b,c,d = list(map(int,ipt().split()))\n        da = ssa[b]-ssa[a-1]-sta[d]+sta[c-1]\n        db = ssb[b]-ssb[a-1]-stb[d]+stb[c-1]\n        if (da-db)%3 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\nS = input()\nT = input()\n\nsa = [0]\nsb = [0]\nta = [0]\ntb = [0]\n\nfor i in S:\n    if i == \"A\":\n        sa.append(sa[-1] + 1)\n        sb.append(sb[-1])\n    else:\n        sa.append(sa[-1])\n        sb.append(sb[-1] + 1)\n\nfor i in T:\n    if i == \"A\":\n        ta.append(ta[-1] + 1)\n        tb.append(tb[-1])\n    else:\n        ta.append(ta[-1])\n        tb.append(tb[-1] + 1)\n\n\nq = int(input())\n\nfor i in range(q):\n\n    a,b,c,d = list(map(int,input().split()))\n\n    one = ((sa[b] - sa[a-1]) - (sb[b] - sb[a-1]))\n    two = ((ta[d] - ta[c-1]) - (tb[d] - tb[c-1]))\n\n    if  one % 3 == two % 3:\n        print (\"YES\")\n    else:\n        print (\"NO\")\n", "from itertools import accumulate\n\nS = input()\nT = input()\nQ = int(input())\nABCD = [list(map(int, input().split())) for _ in range(Q)]\n\nSL = [1 if s == \"A\" else 2 for s in S]\nTL = [1 if t == \"A\" else 2 for t in T]\n\nAcumS = [0] + list(accumulate(SL))\nAcumT = [0] + list(accumulate(TL))\n\nfor a, b, c, d in ABCD:\n    s = AcumS[b] - AcumS[a - 1]\n    t = AcumT[d] - AcumT[c - 1]\n    if (s - t) % 3 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "import sys\ninput=sys.stdin.readline\n\n\ndef solve():\n    S, T = input(), input()\n    q = int(input())\n\n    ls, lt = len(S), len(T)\n    acs, act = [0]*(ls+1), [0]*(lt+1)\n\n    for i in range(1, ls+1):\n        acs[i] = acs[i-1] + (S[i-1]==\"A\")\n    for i in range(1, lt+1):\n        act[i] = act[i-1] + (T[i-1]==\"A\")\n\n    for _ in range(q):\n        a, b, c, d = list(map(int, input().split()))\n        print((\"YES\" if (acs[b]-acs[a-1]+b-a+1)%3==(act[d]-act[c-1]+d-c+1)%3 else \"NO\"))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "import sys\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninm = lambda: list(map(int, sys.stdin.readline().split()))\ninl = lambda: list(inm())\nins = lambda: sys.stdin.readline().rstrip()\n# debug = lambda *a, **kw: print(*a, **kw, file=sys.stderr)\n\nS = ins()\nT = ins()\nconv = {\"A\": 1, \"B\": 2}\n\n\ndef solve():\n    cums = [0] * (len(S) + 1)\n    cumt = [0] * (len(T) + 1)\n    for i, x in enumerate(S):\n        c = conv[x]  # 1 or 2\n        cums[i + 1] = (cums[i] + c) % 3\n    for i, x in enumerate(T):\n        c = conv[x]  # 1 or 2\n        cumt[i + 1] = (cumt[i] + c) % 3\n\n    q = ini()\n    for i in range(q):\n        a, b, c, d = inm()\n        if (cums[b] - cums[a - 1]) % 3 == (cumt[d] - cumt[c - 1]) % 3:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nsolve()\n", "s=input()\nS=[0]\nd=0\nfor i in s:\n  if i=='A':\n    d+=1\n  else:\n    d+=2\n  S.append(d)\nt=input()\nT=[0]\nd=0\nfor i in t:\n  if i=='A':\n    d+=1\n  else:\n    d+=2\n  T.append(d)\nq=int(input())\nfor i in range(q):\n  a,b,c,d=map(int, input().split())\n  x=S[b]-S[a-1]\n  y=T[d]-T[c-1]\n  if (x-y)%3==0:\n    print('YES')\n  else:\n    print('NO')", "from itertools import accumulate\ns = list(input().replace(\"A\",\"1\").replace(\"B\",\"2\"))\nt = list(input().replace(\"A\",\"1\").replace(\"B\",\"2\"))\ns = list(map(int,s))\nt = list(map(int,t))\naccs = [0]+list(accumulate(s))\nacct = [0]+list(accumulate(t))\nq = int(input())\nabcd = [list(map(int,input().split())) for i in range(q)]\nfor a,b,c,d in abcd:\n  if (accs[b]-accs[a-1])%3 == (acct[d]-acct[c-1])%3:\n    print(\"YES\")\n  else:\n    print(\"NO\")", "S, T = input(), input()\nq = int(input())\n\nls, lt = len(S), len(T)\nacs, act = [0]*(ls+1), [0]*(lt+1)\n\nfor i in range(1, ls+1):\n    acs[i] = acs[i-1] + (S[i-1]==\"A\")\nfor i in range(1, lt+1):\n    act[i] = act[i-1] + (T[i-1]==\"A\")\n\nfor _ in range(q):\n    a, b, c, d = list(map(int, input().split()))\n    sa = acs[b]-acs[a-1]\n    sb = b-a+1-sa\n    ta = act[d]-act[c-1]\n    tb = d-c+1-ta\n    print((\"YES\" if (2*sa+sb)%3==(2*ta+tb)%3 else \"NO\"))\n", "s=input()\nt=input()\nn=len(s)\nm=len(t)\nsl=[0]\nfor i in s:\n    sl.append(sl[-1])\n    if i==\"A\":sl[-1]+=1\n    else:sl[-1]+=2\n    sl[-1]%=3\ntl=[0]\nfor i in t:\n    tl.append(tl[-1])\n    if i==\"A\":tl[-1]+=1\n    else:tl[-1]+=2\n    tl[-1]%=3\nq=int(input())\nfor _ in range(q):\n    a,b,c,d=map(int,input().split())\n    a-=1\n    c-=1\n    ss=sl[b]-sl[a]\n    tt=tl[d]-tl[c]\n    if ss%3==tt%3:print(\"YES\")\n    else:print(\"NO\")", "# a = \u533a\u9593\u4e2d\u306eA\u306e\u500b\u6570 % 3\n# b = \u533a\u9593\u4e2d\u306eB\u306e\u500b\u6570 % 3\n# (a,b)\u304c\u4e00\u81f4\u3059\u308b\u5834\u5408\u306f\u5909\u63db\u53ef\u80fd\n# \u3053\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u5909\u63db\u53ef\u80fd\n# (0,1)->(2,0)->(1,2)\n# (0,2)->(2,1)->(1,0)\n\nimport sys\nreadline = sys.stdin.readline\nS = readline().rstrip()\nT = readline().rstrip()\nq = int(readline())\n\nSa = [0] * (len(S) + 1)\nSb = [0] * (len(S) + 1)\nTa = [0] * (len(T) + 1)\nTb = [0] * (len(T) + 1)\n\nfor i in range(len(S)):\n  if S[i] == \"A\":\n    Sa[i + 1] = 1\n  else:\n    Sb[i + 1] = 1\nfor i in range(len(S)):\n  Sa[i + 1] += Sa[i]\n  Sb[i + 1] += Sb[i]\n  \nfor i in range(len(T)):\n  if T[i] == \"A\":\n    Ta[i + 1] = 1\n  else:\n    Tb[i + 1] = 1\nfor i in range(len(T)):\n  Ta[i + 1] += Ta[i]\n  Tb[i + 1] += Tb[i]\n    \nok_group = {\n  ((0,1),(2,0),(1,2)),\n  ((0,2),(2,1),(1,0)),\n  ((1,1),(0,0),(2,2))\n}\n#print(\"Sa\",Sa)\n#print(\"Sb\",Sb)\n#print(\"Ta\",Ta)\n#print(\"Tb\",Tb)\n\nfor i in range(q):\n  a,b,c,d = list(map(int,readline().split()))\n  s = ((Sa[b] - Sa[a - 1]) % 3, (Sb[b] - Sb[a - 1]) % 3)\n  t = ((Ta[d] - Ta[c - 1]) % 3, (Tb[d] - Tb[c - 1]) % 3)\n  #print(a,b,c,d,\"s\",s,\"t\",t)\n  if s == t:\n    print(\"YES\")\n    continue\n  for ok in ok_group:\n    if s in ok and t in ok:\n      print(\"YES\")\n      break\n  else:\n    print(\"NO\")\n", "# ARC071E\n\nimport sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\n\n\ns = input()\nt = input()\n\nsa = [0] * (len(s)+1)\nsb = [0] * (len(s)+1)\nta = [0] * (len(t)+1)\ntb = [0] * (len(t)+1)\n\nca = 0\ncb = 0\nfor i,c in enumerate(s):\n    if c==\"A\":\n        ca += 1\n    else:\n        cb += 1\n    sa[i+1] = ca\n    sb[i+1] = cb\nca = 0\ncb = 0\nfor i,c in enumerate(t):\n    if c==\"A\":\n        ca += 1\n    else:\n        cb += 1\n    ta[i+1] = ca\n    tb[i+1] = cb\n\n\nq = int(input())\nfor i in range(q):\n    a,b,c,d = map(lambda x: int(x)-1, input().split())\n    if (((sa[b+1]-sa[a]) - (sb[b+1]-sb[a])) - ((ta[d+1]-ta[c]) - (tb[d+1]-tb[c])))%3==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "import sys\nimport math\nfrom collections import defaultdict\nfrom bisect import bisect_left, bisect_right\n\nsys.setrecursionlimit(10**7)\ndef input():\n    return sys.stdin.readline()[:-1]\n\nmod = 10**9 + 7\n\ndef I(): return int(input())\ndef LI(): return list(map(int, input().split()))\ndef LIR(row,col):\n    if row <= 0:\n        return [[] for _ in range(col)]\n    elif col == 1:\n        return [I() for _ in range(row)]\n    else:\n        read_all = [LI() for _ in range(row)]\n        return map(list, zip(*read_all))\n\n#################\n\n# ((A\u306e\u6570)-(B\u306e\u6570))%3 \u304c\u540c\u3058\u3068\u304d\u3060\u3051\u53ef\u80fd\n\nS = list(input())\nT = list(input())\nq = I()\na,b,c,d = LIR(q,4)\n\nn = len(S)\nSab = [0]*(n+1)\nfor i in range(n):\n    if S[i] == 'A':\n        Sab[i+1] = Sab[i]+1\n    else:\n        Sab[i+1] = Sab[i]-1\n\nm = len(T)\nTab = [0]*(m+1)\nfor i in range(m):\n    if T[i] == 'A':\n        Tab[i+1] = Tab[i]+1\n    else:\n        Tab[i+1] = Tab[i]-1\n\nfor i in range(q):\n    diff = (Sab[b[i]]-Sab[a[i]-1]) - (Tab[d[i]]-Tab[c[i]-1])\n    if diff%3 == 0:\n        print('YES')\n    else:\n        print('NO')", "from itertools import accumulate\n\n*S, = [1 if x == 'A' else 2 for x in input()]\n*T, = [1 if x == 'A' else 2 for x in input()]\n# A=1,B=2\n\nacc_s = (0,) + tuple(accumulate(S))\nacc_t = (0,) + tuple(accumulate(T))\n\nQ = int(input())\nfor _ in range(Q):\n    sl, sr, tl, tr = list(map(int, input().split()))\n    sl -= 1\n    tl -= 1\n    diff = (acc_t[tr] - acc_t[tl]) - (acc_s[sr] - acc_s[sl])\n    print(('YES' if diff % 3 == 0 else 'NO'))\n", "def main():\n    s = input()\n    t = input()\n    a = [0]*(len(s)+1)\n    b = [0]*(len(t)+1)\n    for i, c in enumerate(s):\n        if c == \"A\":\n            a[i+1] = 1\n        else:\n            a[i+1] = 2\n        a[i+1] += a[i]\n    for i, c in enumerate(t):\n        if c == \"A\":\n            b[i+1] = 1\n        else:\n            b[i+1] = 2\n        b[i+1] += b[i]\n    q = int(input())\n    ans = [None]*q\n    for i in range(q):\n        a1, a2, b1, b2 = map(int, input().split())\n        x, y = a[a2] - a[a1-1], b[b2] - b[b1-1]\n        if abs(x-y) % 3 == 0:\n            ans[i] = \"YES\"\n        else:\n            ans[i] = \"NO\"\n    for v in ans:\n        print(v)\n\ndef __starting_point():\n    main()\n__starting_point()", "S = input()\nT = input()\n\naccSA = [0] * (len(S) + 1)\naccSB = [0] * (len(S) + 1)\n\nfor i, s in enumerate(S):\n    accSA[i + 1] += accSA[i]\n    accSB[i + 1] += accSB[i]\n    if s == 'A':\n        accSA[i + 1] += 1\n    else:\n        accSB[i + 1] += 1\n\naccTA = [0] * (len(T) + 1)\naccTB = [0] * (len(T) + 1)\n\nfor i, s in enumerate(T):\n    accTA[i + 1] += accTA[i]\n    accTB[i + 1] += accTB[i]\n    if s == 'A':\n        accTA[i + 1] += 1\n    else:\n        accTB[i + 1] += 1\n\nQ = int(input())\nans = []\nfor _ in range(Q):\n    a, b, c, d = map(int, input().split())\n\n    sA = accSA[b] - accSA[a - 1]\n    sB = accSB[b] - accSB[a - 1]\n    tA = accTA[d] - accTA[c - 1]\n    tB = accTB[d] - accTB[c - 1]\n\n    sA = (sA + sB * 2) % 3\n    tA = (tA + tB * 2) % 3\n\n    ans.append('YES' if sA == tA else 'NO')\nprint(*ans, sep='\\n')\n", "import sys\ninput=sys.stdin.readline\n\n\ndef solve():\n    S, T = input(), input()\n    q = int(input())\n\n    ls, lt = len(S), len(T)\n    acs, act = [0]*(ls+1), [0]*(lt+1)\n\n    for i in range(1, ls+1):\n        acs[i] = acs[i-1] + (S[i-1]==\"A\")\n    for i in range(1, lt+1):\n        act[i] = act[i-1] + (T[i-1]==\"A\")\n\n    for _ in range(q):\n        a, b, c, d = list(map(int, input().split()))\n        print((\"YES\" if (acs[b]-acs[a-1]+b-a+1)%3==(act[d]-act[c-1]+d-c+1)%3 else \"NO\"))\n\nsolve()\n", "S = input()\nT = input()\nQ = int(input())\nABCD = [tuple(map(int,input().split())) for i in range(Q)]\n\ncsa = [0]\ncsb = [0]\nfor c in S:\n    csa.append(csa[-1] + (c=='A'))\n    csb.append(csb[-1] + (c=='B'))\ncta = [0]\nctb = [0]\nfor c in T:\n    cta.append(cta[-1] + (c=='A'))\n    ctb.append(ctb[-1] + (c=='B'))\n\nans = []\nfor a,b,c,d in ABCD:\n    a -= 1\n    c -= 1\n    sa = csa[b] - csa[a]\n    sb = csb[b] - csb[a]\n    ta = cta[d] - cta[c]\n    tb = ctb[d] - ctb[c]\n    s = (sb-sa)%3\n    t = (tb-ta)%3\n    ans.append('YES' if s==t else 'NO')\nprint(*ans, sep='\\n')", "import sys\nsys.setrecursionlimit(10000000)\nMOD = 10 ** 9 + 7\nINF = 10 ** 15\n\ndef main():\n    S = input()\n    T = input()\n    Scnt = [0] * (len(S) + 1)\n    for i in range(len(S)):\n        if S[i] == 'A':\n            Scnt[i + 1] = Scnt[i] + 1\n        else:\n            Scnt[i + 1] = Scnt[i] + 2\n    \n    Tcnt = [0] * (len(T) + 1)\n    for i in range(len(T)):\n        if T[i] == 'A':\n            Tcnt[i + 1] = Tcnt[i] + 1\n        else:\n            Tcnt[i + 1] = Tcnt[i] + 2\n    \n    Q = int(input())\n    for _ in range(Q):\n        a,b,c,d = map(int,input().split())\n        a -= 1\n        c -= 1\n        if (Scnt[b] - Scnt[a] - Tcnt[d] + Tcnt[c])%3 == 0:\n            print('YES')\n        else:\n            print('NO')\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef MI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\n\n\nS,T = S(),S()\n\na,b = 0,0\naccumulate_S = [0]\naccumulate_T = [0]\nfor s in S:\n    if s == 'A':\n        a += 1\n    else:\n        a += 2\n    accumulate_S.append(a)\nfor t in T:\n    if t == 'A':\n        b += 1\n    else:\n        b += 2\n    accumulate_T.append(b)\n\nq = I()\nfor _ in range(q):\n    a,b,c,d = MI()\n    x = accumulate_S[b]-accumulate_S[a-1]\n    y = accumulate_T[d]-accumulate_T[c-1]\n    if (x-y) % 3 == 0:\n        print('YES')\n    else:\n        print('NO')\n", "S = input()\nT = input()\n\nq = int(input())\n\ns = [0]*len(S)\nt = [0]*len(T)\nfor i, x in enumerate(S):\n    if x == \"A\":\n        s[i] += 1\nfor i, x in enumerate(T):\n    if x == \"A\":\n        t[i] += 1\n\nss = [0]*(len(S)+1)\nfor i, x in enumerate(s):\n    ss[i+1] = s[i] + ss[i]\ntt = [0]*(len(T) + 1)\nfor i, x in enumerate(t):\n    tt[i+1] = t[i]+tt[i]\n\n\nfor i in range(q):\n    a, b, c, d = list(map(int, input().split()))\n\n    k = (ss[b] - ss[a-1])\n    l = (tt[d] - tt[c-1])\n    k += ((b - a + 1) - k)*2\n    l += ((d - c + 1) - l)*2\n    if abs(k-l) % 3 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "s=input()\nt=input()\nq=int(input())\nacums=[[0,0] for _ in range(len(s)+1)]\nfor i in range(1,len(s)+1):\n  if s[i-1]=='A':\n    acums[i][0]=acums[i-1][0]+1\n    acums[i][1]=acums[i-1][1]\n  else:\n    acums[i][0]=acums[i-1][0]\n    acums[i][1]=acums[i-1][1]+1\nacumt=[[0,0] for _ in range(len(t)+1)]\nfor i in range(1,len(t)+1):\n  if t[i-1]=='A':\n    acumt[i][0]=acumt[i-1][0]+1\n    acumt[i][1]=acumt[i-1][1]\n  else:\n    acumt[i][0]=acumt[i-1][0]\n    acumt[i][1]=acumt[i-1][1]+1\nfor _ in range(q):\n  a,b,c,d=map(int,input().split())\n  cnt1=(acums[b][0]-acums[a-1][0])*2+(acums[b][1]-acums[a-1][1])\n  cnt2=(acumt[d][0]-acumt[c-1][0])*2+(acumt[d][1]-acumt[c-1][1])\n  if (cnt1-cnt2)%3==0:\n    print('YES')\n  else:\n    print('NO')", "from itertools import accumulate\nimport sys\nreadlines = sys.stdin.readlines\ninput = sys.stdin.readline\nS = tuple(accumulate([1 if x == 'A' else 2 for x in input().rstrip()]))\nT = tuple(accumulate([1 if x == 'A' else 2 for x in input().rstrip()]))\ninput()\nfor line in readlines():\n    a, b, c, d = [int(x)-1 for x in line.split()]\n    s = S[b]-S[a-1] if a else S[b]\n    t = T[d]-T[c-1] if c else T[d]\n    print(('YES' if s % 3 == t % 3 else 'NO'))\n", "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\n\nS = input()\nT = input()\ncntS = [1 if S[i] == 'A' else -1 for i in range(len(S))]\ncntT = [1 if T[i] == 'A' else -1 for i in range(len(T))]\ncumS = list(accumulate([0] + cntS))\ncumT = list(accumulate([0] + cntT))\nq = int(input())\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    if (cumS[b] - cumS[a-1]) % 3 == (cumT[d] - cumT[c-1]) % 3:\n        print('YES')\n    else:\n        print('NO')", "S = input()\nT = input()\nq = int(input())\n\nS_rel_idx = [0]\nT_rel_idx = [0]\n\nfor s in S:\n  if s == \"A\":\n    S_rel_idx.append((S_rel_idx[-1]+1) % 3)\n  else:\n    S_rel_idx.append((S_rel_idx[-1]-1) % 3)\n    \nfor t in T:\n  if t == \"A\":\n    T_rel_idx.append((T_rel_idx[-1]+1) % 3)\n  else:\n    T_rel_idx.append((T_rel_idx[-1]-1) % 3)\n#print(S_rel_idx)  \n#print(T_rel_idx)\nfor _ in range(q):\n  a, b, c, d = list(map(int,input().split()))\n  \n  if (S_rel_idx[b]-S_rel_idx[a-1]) %3 == (T_rel_idx[d]-T_rel_idx[c-1])%3:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n", "# https://atcoder.jp/contests/arc071/submissions/6325840\n\nfrom itertools import accumulate\n\nconvert = {'A': 1, 'B': 2}\nS = tuple(convert[x] for x in input())\nT = tuple(convert[x] for x in input())\n# \u6700\u901f:   convert\n# \u6b21\u70b9:   *A, = map()\n# \u6700\u4e0b\u4f4d: A = tuple(map())\n\nacc_s = (0,) + tuple(accumulate(S))\nacc_t = (0,) + tuple(accumulate(T))\n\nans = []\nQ = int(input())\nfor _ in range(Q):\n    sl, sr, tl, tr = map(int, input().split())\n    # \u6dfb\u3048\u5b57-1\u306f\u5909\u6570\u518d\u4ee3\u5165\u3057\u306a\u3044\u65b9\u304c20ms\u901f\u3044\n    ans.append('YES' if (acc_t[tr] - acc_t[tl - 1]) % 3 == (acc_s[sr] - acc_s[sl - 1]) % 3 else 'NO')\n\nprint(*ans, sep='\\n')\n# \u9010\u6b21print\u3060\u30681000ms\n# \u4e00\u62ec\u3060\u3068500ms\n", "S=input()\nT=input()\nN=len(S)\nM=len(T)\nU=[0 for i in range(N+1)]\nV=[0 for i in range(M+1)]\nfor i in range(N):\n    if S[i]==\"A\":\n        U[i+1]=(U[i]+1)%3\n    else:\n        U[i+1]=(U[i]-1)%3\nfor i in range(M):\n    if T[i]==\"A\":\n        V[i+1]=(V[i]+1)%3\n    else:\n        V[i+1]=(V[i]-1)%3\nq=int(input())\nO=[\"\" for i in range(q)]\nfor inp in range(q):\n    a,b,c,d=list(map(int,input().split()))\n    if (U[b]-U[a-1]-V[d]+V[c-1])%3==0:\n        O[inp]=\"YES\"\n    else:\n        O[inp]=\"NO\"\nfor i in O:\n    print(i)\n", "S = input()\nT = input()\ns_rui = [0]\nt_rui = [0]\nfor s in S:\n    if s == \"A\":\n        s_rui.append(s_rui[-1] + 1)\n    else:\n        s_rui.append(s_rui[-1] + 2)\n\nfor t in T:\n    if t == \"A\":\n        t_rui.append(t_rui[-1] + 1)\n    else:\n        t_rui.append(t_rui[-1] + 2)\n\nfor _ in range(int(input())):\n    a, b, c, d = map(int, input().split())\n    ss = s_rui[b] - s_rui[a - 1]\n    tt = t_rui[d] - t_rui[c - 1]\n    if ss % 3 == tt % 3:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "# https://atcoder.jp/contests/arc071/submissions/6325840\n\nfrom itertools import accumulate\n\n*S, = map(lambda x: 1 if x == 'A' else 2, input())\n*T, = map(lambda x: 1 if x == 'A' else 2, input())\n# A=1,B=2\n\nacc_s = (0,) + tuple(accumulate(S))\nacc_t = (0,) + tuple(accumulate(T))\n\nans = []\nQ = int(input())\nfor _ in range(Q):\n    sl, sr, tl, tr = map(int, input().split())\n    diff = (acc_t[tr] - acc_t[tl - 1]) - (acc_s[sr] - acc_s[sl - 1])\n    ans.append('YES' if diff % 3 == 0 else 'NO')\n\nprint(*ans, sep='\\n')\n# \u9010\u6b21print\u3060\u30681000ms\n# \u4e00\u62ec\u3060\u3068500ms\n", "s = input()\nt = input()\ncs = [0]\nfor i in s:\n    if i == \"A\":\n        cs.append((cs[-1]+1)%3)\n    else:\n        cs.append((cs[-1]+2)%3)\nct = [0]\nfor i in t:\n    if i == \"A\":\n        ct.append((ct[-1]+1)%3)\n    else:\n        ct.append((ct[-1]+2)%3)\n\nq = int(input())\nfor _ in range(q):\n    a,b,c,d = map(int,input().split())\n    if (cs[b]-cs[a-1])%3 == (ct[d]-ct[c-1])%3:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "from itertools import accumulate,chain\n\ns = input()\nt = input()\n\ns_acc = list(chain((0,),accumulate(1 if c == 'A' else -1 for c in s)))\nt_acc = list(chain((0,),accumulate(1 if c == 'A' else -1 for c in t)))\n\nq = int(input())\n\nfor _ in range(q):\n    a,b,c,d = list(map(int,input().split()))\n\n    x = s_acc[b]-s_acc[a-1]\n    y = t_acc[d]-t_acc[c-1]\n    print(('YES' if x % 3 == y % 3 else 'NO'))\n", "S = input()\nT = input()\nq = int(input())\nabcd = [[int(i) for i in input().split()] for _ in range(q)]\n\nsdp = [(0, 0)]\ntdp = [(0, 0)]\nfor s in S :\n    a, b = sdp[-1]\n    if s == 'A' :\n        sdp.append((a + 1, b))\n    else :\n        sdp.append((a, b + 1))\nfor t in T :\n    a, b = tdp[-1]\n    if t == 'A' :\n        tdp.append((a + 1, b))\n    else :\n        tdp.append((a, b + 1))\n\nfor a, b, c, d in abcd :\n    sa = sdp[b][0] - sdp[a-1][0]\n    sb = sdp[b][1] - sdp[a-1][1]\n    ta = tdp[d][0] - tdp[c-1][0]\n    tb = tdp[d][1] - tdp[c-1][1]\n    \n    tb -= ta - sa\n    if abs(sb - tb) % 3 == 0 :\n        print('YES')\n    else :\n        print('NO')", "import sys\n\n\"\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\"\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\"\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\"\n\n\ndef main():\n    S = readline().rstrip()\n    T = readline().rstrip()\n    Q = int(readline())\n\n    l = len(S)\n    m = len(T)\n    S_acc = [0] * (l + 1)\n    T_acc = [0] * (m + 1)\n\n    for i in range(l):\n        ch = 1 if S[i] == \"A\" else 2\n        S_acc[i + 1] = S_acc[i] + ch\n\n    for i in range(m):\n        ch = 1 if T[i] == \"A\" else 2\n        T_acc[i + 1] = T_acc[i] + ch\n\n    for i in range(Q):\n        a, b, c, d = list(map(int, readline().split()))\n\n        first = S_acc[b] - S_acc[a - 1]\n        second = T_acc[d] - T_acc[c - 1]\n\n        if (first - second) % 3 == 0:\n            print('YES')\n        else:\n            print('NO')\n\n\ndef __starting_point():\n    INF = float('INF')\n    MOD = 10 ** 9 + 7\n    sys.setrecursionlimit(10 ** 5)\n    \"\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\u30fb\u2025\u2026\u2501\u2501\u2501\u2606\"\n    main()\n\n__starting_point()", "S = input()\nT = input()\nn = len(S)\nm = len(T)\nL = [0]*(n+1)\nR = [0]*(m+1)\nfor i, s in enumerate(S):\n  if s == \"A\":\n    L[i+1] = (L[i]+1)%3\n  else:\n    L[i+1] = (L[i]-1)%3\nfor i, t in enumerate(T):\n  if t == \"A\":\n    R[i+1] = (R[i]+1)%3\n  else:\n    R[i+1] = (R[i]-1)%3\nq = int(input())\nfor _ in range(q):\n  a, b, c, d = map(int, input().split())\n  if (L[b]-L[a-1])%3 == (R[d]-R[c-1])%3:\n    print(\"YES\")\n  else:\n    print(\"NO\")", "from operator import add\nimport sys\ninput=sys.stdin.readline\n\n\nclass SegTree():\n    def __init__(self, N, e, operator_func=add):\n        self.e = e # \u5358\u4f4d\u5143\n        self.size = N\n        self.node = [self.e] * (2*N)\n        self.operator_func = operator_func # \u51e6\u7406(add or xor max min\u306a\u3069)\n\n    def set_list(self, l):\n        for i in range(self.size):\n            self.node[i+self.size-1] = l[i]\n        for i in range(self.size-1)[::-1]:\n            self.node[i] = self.operator_func(self.node[2*i+1], self.node[2*i+2])\n    \n    def update(self, k, x):\n        k += self.size-1\n        self.node[k] = x\n        while k >= 0:\n            k = (k - 1) // 2\n            self.node[k] = self.operator_func(self.node[2*k+1], self.node[2*k+2])\n\n    def get(self, l, r):\n        # [l, r) \u306b\u3064\u3044\u3066query\u3092\u6c42\u3081\u308b\n        x = self.e\n        l += self.size\n        r += self.size\n\n        while l<r:\n            if l&1:\n                x = self.operator_func(x, self.node[l-1])\n                l += 1\n            if r&1:\n                r -= 1\n                x = self.operator_func(x, self.node[r-1])\n            l >>= 1\n            r >>= 1\n        return x\n\n\ndef main():\n    S = input()\n    T = input()\n    treeS = SegTree(len(S), 0)\n    treeT = SegTree(len(T), 0)\n    treeS.set_list([1 if s==\"A\" else 0 for s in S])\n    treeT.set_list([1 if s==\"A\" else 0 for s in T])\n\n    q = int(input())\n    for _ in range(q):\n        a, b, c, d = list(map(int, input().split()))\n        sa = treeS.get(a-1, b)\n        sb = b-a+1-sa\n        ta = treeT.get(c-1, d)\n        tb = d-c+1-ta\n\n        if (2*(sb-sa)+tb-ta)%3 or (sb-sa+2*(tb-ta))%3:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\nmain()\n", "S = input()\nT = input()\n\ncum_s = [(0, 0)]\ncum_t = [(0, 0)]\n\nfor i in range(len(S)):\n    p, q = cum_s[-1]\n    if S[i] == 'A':\n        cum_s.append((p + 1, q))\n    else:\n        cum_s.append((p, q + 1))\n\nfor i in range(len(T)):\n    p, q = cum_t[-1]\n    if T[i] == 'A':\n        cum_t.append((p + 1, q))\n    else:\n        cum_t.append((p, q + 1))\n\nQ = int(input())\n\nfor _ in range(Q):\n    a, b, c, d = map(int, input().split())\n    sp = cum_s[b][0] - cum_s[a - 1][0]\n    sq = cum_s[b][1] - cum_s[a - 1][1]\n    tp = cum_t[d][0] - cum_t[c - 1][0]\n    tq = cum_t[d][1] - cum_t[c - 1][1]\n    sp += sq * 2\n    tp += tq * 2\n    if sp % 3 == tp % 3:\n        print('YES')\n    else:\n        print('NO')", "import typing\nimport sys\nimport math\nimport collections\nimport bisect\nimport itertools\nimport heapq\nimport decimal\nimport copy\nimport operator\n\n# sys.setrecursionlimit(10000001)\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\n# buffer.readline()\u306f\u3053\u3069\u3075\u3049\u3067\u6b7b\u306c\n\n\ndef ni(): return int(sys.stdin.readline())\ndef ns(): return list(map(int, sys.stdin.readline().split()))\ndef na(): return list(map(int, sys.stdin.readline().split()))\ndef na1(): return list([int(x)-1 for x in sys.stdin.readline().split()])\n\n\n# ===CODE===\n\ndef main():\n    s = input()\n    t = input()\n\n    scnt = [[0, 0] for _ in range(len(s)+1)]\n    for i, si in enumerate(s):\n        if si == \"A\":\n            scnt[i+1] = [scnt[i][0]+1, scnt[i][1]]\n        else:\n            scnt[i+1] = [scnt[i][0], scnt[i][1]+1]\n\n    tcnt = [[0, 0] for _ in range(len(t)+1)]\n    for i, ti in enumerate(t):\n        if ti == \"A\":\n            tcnt[i+1] = [tcnt[i][0]+1, tcnt[i][1]]\n        else:\n            tcnt[i+1] = [tcnt[i][0], tcnt[i][1]+1]\n\n    q = ni()\n    for _ in range(q):\n        a, b, c, d = ns()\n        a, b, c, d = a-1, b, c-1, d\n\n        sa = scnt[b][0]-scnt[a][0]\n        sb = scnt[b][1]-scnt[a][1]\n\n        sa %= 3\n        sb %= 3\n        mn = min(sa, sb)\n        sa -= mn\n        sb -= mn\n        if sa == 2:\n            sb = 1\n            sa = 0\n        elif sb == 2:\n            sa = 1\n            sb = 0\n\n        ta = tcnt[d][0]-tcnt[c][0]\n        tb = tcnt[d][1]-tcnt[c][1]\n        ta %= 3\n        tb %= 3\n        mn = min(ta, tb)\n        ta -= mn\n        tb -= mn\n        if ta == 2:\n            tb = 1\n            ta = 0\n        elif tb == 2:\n            ta = 1\n            tb = 0\n\n        if sa == ta and sb == tb:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from itertools import accumulate\ns = list(input().replace(\"A\",\"1\").replace(\"B\",\"2\"))\nt = list(input().replace(\"A\",\"1\").replace(\"B\",\"2\"))\ns = list(map(int,s))\nt = list(map(int,t))\naccs = [0]+list(accumulate(s))\nacct = [0]+list(accumulate(t))\nq = int(input())\nabcd = [list(map(int,input().split())) for i in range(q)]\nfor a,b,c,d in abcd:\n  if (accs[b]-accs[a-1])%3 == (acct[d]-acct[c-1])%3:\n    print(\"YES\")\n  else:\n    print(\"NO\")", "S=input();T=input()\ndps=[0]*len(S)\nfor i in range(len(S)):\n    if S[i]==\"A\":\n        dps[i]+=1\n    if i!=0:\n        dps[i]+=dps[i-1]\n\ndpt=[0]*len(T)\nfor i in range(len(T)):\n    if T[i]==\"A\":\n        dpt[i]+=1\n    if i!=0:\n        dpt[i]+=dpt[i-1]\ndps=[0]+dps\ndpt=[0]+dpt\n\nq=int(input())\nfor i in range(q):\n    a,b,c,d=list(map(int,input().split()))\n    sc=dps[b]-dps[a-1]\n    sa=sc-(b-a+1-sc)\n    tc=dpt[d]-dpt[c-1]\n    ta=tc-(d-c+1-tc)\n    if sa%3==ta%3:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "# -*- coding: utf-8 -*-\n\nimport sys\nfrom itertools import accumulate\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nS = [ord(s)-65 for s in input()]\nT = [ord(t)-65 for t in input()]\n\nacc1 = [0] + list(accumulate(S))\nacc2 = [0] + list(accumulate(T))\n\n# 3\u3064\u306e\u30bf\u30a4\u30d7\u3092\u5224\u5b9a(0: a\u304c\u6b8b\u308b, 1: b\u304c\u6b8b\u308b, 2: \u4f55\u3082\u6b8b\u3089\u306a\u3044)\ndef check(cnta, cntb):\n    if cnta == cntb:\n        return 2\n    elif cnta < cntb:\n        cntb -= cnta\n        if cntb % 3 == 0:\n            return 2\n        elif cntb % 3 == 1:\n            return 1\n        else:\n            return 0\n    else:\n        cnta -= cntb\n        if cnta % 3 == 0:\n            return 2\n        elif cnta % 3 == 1:\n            return 0\n        else:\n            return 1\n\nQ = INT()\nfor _ in range(Q):\n    l1, r1, l2, r2 = MAP()\n\n    ln1 = r1 - l1 + 1\n    ln2 = r2 - l2 + 1\n    # \u7d2f\u7a4d\u548c\u3092\u4f7f\u3063\u3066O(1)\u3067A\u3068B\u306e\u500b\u6570\u3092\u53d6\u5f97\n    cntb1 = acc1[r1] - acc1[l1-1]\n    cnta1 = ln1 - cntb1\n    cntb2 = acc2[r2] - acc2[l2-1]\n    cnta2 = ln2 - cntb2\n    # \u540c\u3058\u30bf\u30a4\u30d7\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\n    if check(cnta1, cntb1) == check(cnta2, cntb2):\n        YES()\n    else:\n        NO()\n", "import sys\n\ninput=sys.stdin.readline\n\nS=input()\nT=input()\nSAdata=[int(S[i]==\"A\") for i in range(len(S))]\nSBdata=[int(S[i]==\"B\") for i in range(len(S))]\nfor i in range(1,len(S)):\n    SAdata[i]+=SAdata[i-1]\nfor i in range(1,len(S)):\n    SBdata[i]+=SBdata[i-1]\nSAdata.append(0)\nSBdata.append(0)\n\nTAdata=[int(T[i]==\"A\") for i in range(len(T))]\nTBdata=[int(T[i]==\"B\") for i in range(len(T))]\nfor i in range(1,len(T)):\n    TAdata[i]+=TAdata[i-1]\nfor i in range(1,len(T)):\n    TBdata[i]+=TBdata[i-1]\nTAdata.append(0)\nTBdata.append(0)\n\nq=int(input())\nfor i in range(q):\n    a,b,c,d=list(map(int,input().split()))\n    SA=SAdata[b-1]-SAdata[a-2]\n    SB=SBdata[b-1]-SBdata[a-2]\n    TA=TAdata[d-1]-TAdata[c-2]\n    TB=TBdata[d-1]-TBdata[c-2]\n    if (SA-SB)%3==(TA-TB)%3:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nS = '-' + sr()\nT = '-' + sr()\nQ = ir()\ncnt_S = np.array([[0, 0] for _ in range(len(S))])\ncnt_T = np.array([[0, 0] for _ in range(len(S))])\nfor i, s in enumerate(S[1:], 1):\n    if s == 'A':\n        cnt_S[i][0] = 1\n    else:\n        cnt_S[i][1] = 1\n\nfor i, t in enumerate(T[1:], 1):\n    if t == 'A':\n        cnt_T[i][0] = 1\n    else:\n        cnt_T[i][1] = 1\n\nnp.add.accumulate(cnt_S, axis=0, out=cnt_S)\nnp.add.accumulate(cnt_T, axis=0, out=cnt_T)\n\nanswer = []\nfor _ in range(Q):\n    a, b, c, d = lr()\n    num_S = cnt_S[b][0] - cnt_S[b][1] - (cnt_S[a-1][0] - cnt_S[a-1][1])\n    num_T = cnt_T[d][0] - cnt_T[d][1] - (cnt_T[c-1][0] - cnt_T[c-1][1])\n    if (num_S - num_T) % 3 == 0:\n        answer.append('YES')\n    else:\n        answer.append('NO')\n\nprint(('\\n'.join(answer)))\n# 58\n", "import sys\ninput = sys.stdin.readline\nS = input()\nT = input()\nq = int(input())\nabcd= [list(map(int,input().split())) for i in range(q)]\n\n# Segment Tree\nclass SegmentTree:\n    def __init__(self,data,op,default):\n        N = len(data)\n        self.N = N\n        self.op = op\n        self.default = default\n        self.l = 2**((N-1).bit_length())\n        self.data = [default]*self.l + data + [default]*(self.l-N)\n        for i in range(self.l-1,0,-1):\n            self.data[i] = op(self.data[2*i], self.data[2*i+1])\n\n    def get_data(self, i=None):\n        if i is None:\n            return self.data[self.l:self.l + self.N]\n        else:\n            return self.data[self.l+i]\n\n    def set(self,i,val):\n        i += self.l\n        self.data[i] = val\n        i = i//2\n        while i > 0:\n            self.data[i] = self.op(self.data[2*i], self.data[2*i+1])\n            i = i//2\n\n    def get(self,i,j):\n        i += self.l\n        j += self.l\n        s = self.default \n        while j-i > 0:\n            if i & 1:\n                s = self.op(s,self.data[i])\n                i += 1\n            if j & 1:\n                s = self.op(s,self.data[j-1])\n                j -= 1\n            i, j = i//2, j//2\n        return s\n\nconvert = lambda x : 1 if x == 'A' else 2\nnS = list(map(convert,S))\nnT = list(map(convert,T))\nsegS = SegmentTree(nS,lambda x,y:x+y, 0)\nsegT = SegmentTree(nT,lambda x,y:x+y, 0)\n\n# A -> BB -> AAAA -> A\n# B -> AA -> BBBB -> B\n# (S) -> AAAAA......\nfor a,b,c,d in abcd:\n    rs = segS.get(a-1,b)\n    rt = segT.get(c-1,d)\n    if (rs-rt) % 3 == 0:\n        print('YES')\n    else:\n        print('NO')\n", "# https://atcoder.jp/contests/arc071/submissions/6325840\n\nfrom itertools import accumulate\n\n*S, = map(lambda x: 1 if x == 'A' else 2, input())\n*T, = map(lambda x: 1 if x == 'A' else 2, input())\n# A=1,B=2\n\nacc_s = (0,) + tuple(accumulate(S))\nacc_t = (0,) + tuple(accumulate(T))\n\nans = []\nQ = int(input())\nfor _ in range(Q):\n    sl, sr, tl, tr = map(int, input().split())\n    sl -= 1\n    tl -= 1\n    diff = (acc_t[tr] - acc_t[tl]) - (acc_s[sr] - acc_s[sl])\n    ans.append('YES' if diff % 3 == 0 else 'NO')\n\nprint(*ans, sep='\\n')\n", "# https://atcoder.jp/contests/arc071/submissions/6325840\n\nfrom itertools import accumulate\n\nS = tuple(map(lambda x: 1 if x == 'A' else 2, input()))\nT = tuple(map(lambda x: 1 if x == 'A' else 2, input()))\n# A=1,B=2\n\n\nacc_s = (0,) + tuple(accumulate(S))\nacc_t = (0,) + tuple(accumulate(T))\n\nans = []\nQ = int(input())\nfor _ in range(Q):\n    sl, sr, tl, tr = map(int, input().split())\n    diff = (acc_t[tr] - acc_t[tl - 1]) - (acc_s[sr] - acc_s[sl - 1])\n    # \u6dfb\u3048\u5b57-1\u306f\u5909\u6570\u518d\u4ee3\u5165\u3057\u306a\u3044\u65b9\u304c20ms\u901f\u3044\n    ans.append('YES' if diff % 3 == 0 else 'NO')\n\nprint(*ans, sep='\\n')\n# \u9010\u6b21print\u3060\u30681000ms\n# \u4e00\u62ec\u3060\u3068500ms\n", "# AB -> BBAA -> BAAAA -> BA\n# Thus, this problem has commutative property.\n# So, if we let A and B satisfy x^2 + x + 1 == 0,\n# then A^2 == B, B^2 == A, and A^3 == B^3 == 1.\n# So this makes an invariant.\n\nfrom itertools import accumulate\n\nS = input()\nT = input()\nq = int(input())\nabcds = [tuple(map(int, input().split())) for _ in range(q)]\n\nS_csum = list(map(lambda x: x%3, accumulate(map(lambda c: 1 if c == 'A' else -1, S), initial=0)))\nT_csum = list(map(lambda x: x%3, accumulate(map(lambda c: 1 if c == 'A' else -1, T), initial=0)))\n\nfor a, b, c, d in abcds:\n    if (S_csum[b] - S_csum[a-1]) % 3 == (T_csum[d] - T_csum[c-1]) % 3:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "import sys\n\ninput = sys.stdin.readline\n\n\ndef make_acc(U):\n    res = [0]\n    for i, u in enumerate(U):\n        res.append((res[-1] + (1 if u == 'A' else 2)) % 3)\n    return res\n\n\ndef judge(acc, p, q):\n    return (acc[q] - acc[p - 1]) % 3\n\n\nS = input()\nT = input()\n\nS_acc, T_acc = make_acc(S), make_acc(T)\nQ = int(input())\nfor _ in range(Q):\n    a, b, c, d = list(map(int, input().split()))\n    print(('YES' if judge(S_acc, a, b) == judge(T_acc, c, d) else 'NO'))\n", "s=list(input())\nt=list(input())\n\ns=[0]+[1 if si=='A' else 2 for si in s]\nt=[0]+ [1 if ti=='A' else 2 for ti in t]\nimport numpy as np\ns=np.array(s)\nt=np.array(t)\ns=np.cumsum(s)\nt=np.cumsum(t)\nq=int(input())\nfor _ in range(q):\n    a,b,c,d=list(map(int, input().split()))\n    a-=1;c-=1\n    test=s[b]-s[a]-t[d]+t[c]\n    test%=3\n    if not test:\n        print('YES')\n    else:\n        print('NO')\n", "# import sys\n# input = sys.stdin.readline\ns = input()\nt = input()\nq = int(input())\nC = [list(map(int,input().split())) for i in range(q)]\n\nS = [0]\nT = [0]\nfor i in range(len(s)):\n    if s[i] == \"A\":\n        S.append(1)\n    else:\n        S.append(2)\nfor i in range(1, len(S)):\n    S[i] = (S[i-1] + S[i]) % 3\n\nfor i in range(len(t)):\n    if t[i] == \"A\":\n        T.append(1)\n    else:\n        T.append(2)\nfor i in range(1, len(T)):\n    T[i] = (T[i-1] + T[i]) % 3\n\nfor i in range(q):\n    ss = (S[C[i][1]] - S[C[i][0] - 1]) % 3\n    tt = (T[C[i][3]] - T[C[i][2] - 1]) % 3\n    print(\"YES\" if ss == tt else \"NO\")", "from itertools import accumulate\n\ns = input()\nt = input()\nq = int(input())\nabcd = [tuple(map(int,input().split())) for i in range(q)]\n\ns_number = [2 if ab == 'B' else 1 for ab in s]\nt_number = [2 if ab == 'B' else 1 for ab in t]\n\ns_sum = [0] + s_number\ns_sum = list(accumulate(s_sum))\n\nt_sum = [0] + t_number\nt_sum = list(accumulate(t_sum))\n\nfor a,b,c,d in abcd:\n\n    s_i = s_sum[b]-s_sum[a-1]\n    t_i = t_sum[d]-t_sum[c-1]\n\n    if s_i%3 == t_i%3:\n        print('YES')\n    else:\n        print('NO')\n", "s=input()\nt=input()\nq=int(input())\nn=len(s)\npre=[0]*(n+1)\nfor i in range(n):\n    if s[i]==\"A\":\n        pre[i]=pre[i-1]+1\n    else:\n        pre[i]=pre[i-1]\nm=len(t)\np=[0]*(m+1)\nfor i in range(m):\n    if t[i]==\"A\":\n        p[i]=p[i-1]+1\n    else:\n        p[i]=p[i-1]\n\nfor _ in range(q):\n    a,b,c,d=[int(x)-1 for x in input().split()]\n\n    aa=(pre[b]-pre[a-1])\n    co=(b-a+1-aa)\n    co+=aa*2\n\n    bb=(p[d]-p[c-1])\n    do=(d-c+1-bb)\n    do+=bb*2\n   # print(aa,bb,co,do)\n    co%=3\n    do%=3\n    if co==do:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "s=input()\nt=input()\nq=int(input())\nx=[1 if s[i]=='B' else 2 for i in range(len(s))]\ny=[1 if t[i]=='B' else 2 for i in range(len(t))]\nfor i in range(1,len(s)):\n  x[i]+=x[i-1]\nfor i in range(1,len(t)):\n  y[i]+=y[i-1]\n\nfor i in range(q):\n  a,b,c,d=map(int,input().split())\n  u=x[b-1]-(x[a-2] if 2<=a else 0)\n  v=y[d-1]-(y[c-2] if 2<=c else 0)\n  print('YES' if u%3==v%3 else 'NO')", "import sys\ninput = sys.stdin.readline\nS = list(input())[: -1]\nT = list(input())[: -1]\ncss = [0] * (len(S) + 1)\ncst = [0] * (len(T) + 1)\n\nfor i in range(len(S)): css[i + 1] = css[i] + (S[i] == \"A\") + (S[i] == \"B\") * 2\nfor i in range(len(T)): cst[i + 1] = cst[i] + (T[i] == \"A\") + (T[i] == \"B\") * 2\n\n#print(css, cst)\n\nfor _ in range(int(input())):\n  a, b, u, v = map(int, input().split())\n  if (css[b] - css[a - 1]) % 3 == (cst[v] - cst[u - 1]) % 3: print(\"YES\")\n  else: print(\"NO\")", "import sys\nimport collections\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n    S = input().strip()\n    T = input().strip()\n    Q = int(input())\n    ABCD = [[int(x) for x in input().split()] for _ in range(Q)]\n\n    TAruiseki = [0] * (len(S) + 1)\n    TBruiseki = [0] * (len(S) + 1)\n\n    SAruiseki = [0] * (len(S) + 1)\n    SBruiseki = [0] * (len(S) + 1)\n\n    for i, s in enumerate(S):\n        if s == \"A\":\n            SAruiseki[i + 1] += 1\n            SAruiseki[i + 1] += SAruiseki[i]\n            SBruiseki[i + 1] += SBruiseki[i]\n        else:\n            SBruiseki[i + 1] += 1\n            SBruiseki[i + 1] += SBruiseki[i]\n            SAruiseki[i + 1] += SAruiseki[i]\n\n    for i, t in enumerate(T):\n        if t == \"A\":\n            TAruiseki[i + 1] += 1\n            TAruiseki[i + 1] += TAruiseki[i]\n            TBruiseki[i + 1] += TBruiseki[i]\n        else:\n            TBruiseki[i + 1] += 1\n            TBruiseki[i + 1] += TBruiseki[i]\n            TAruiseki[i + 1] += TAruiseki[i]\n\n    for a, b, c, d in ABCD:\n        sacnt = SAruiseki[b] - SAruiseki[a - 1]\n        sbcnt = SBruiseki[b] - SBruiseki[a - 1]\n        tacnt = TAruiseki[d] - TAruiseki[c - 1]\n        tbcnt = TBruiseki[d] - TBruiseki[c - 1]\n\n        if (sacnt - tacnt) % 3 == (sbcnt - tbcnt) % 3:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S=input()\nT=input()\nN=int(input())\nabcd = [tuple(map(int,input().split())) for _ in range(N)]\n\nNS = len(S)\nNT = len(T)\ncs0 = [0]*(NS+1)\ncs1 = [0]*(NS+1)\nct0 = [0]*(NT+1)\nct1 = [0]*(NT+1)\nfor i in range(NS):\n    cs0[i+1] = cs0[i]\n    cs1[i+1] = cs1[i]\n    if S[i]=='A':\n        cs0[i+1] += 1\n    else:\n        cs1[i+1] += 1\nfor i in range(NT):\n    ct0[i+1] = ct0[i]\n    ct1[i+1] = ct1[i]\n    if T[i]=='A':\n        ct0[i+1] += 1\n    else:\n        ct1[i+1] += 1\n\nfor a,b,c,d in abcd:\n    anum = cs0[b] - cs0[a-1]\n    bnum = cs1[b] - cs1[a-1]\n    num = 0\n    if anum%3 == bnum%3 == 0:\n        num = 0\n    elif anum > bnum:\n        num = (anum-bnum)%3\n    else:\n        num = 2*(bnum-anum)%3\n    anum2 = ct0[d] - ct0[c-1]\n    bnum2 = ct1[d] - ct1[c-1]\n    num2 = 0\n    if anum2%3 == bnum2%3 == 0:\n        num2 = 0\n    elif anum2 > bnum2:\n        num2 = (anum2-bnum2)%3\n    else:\n        num2 = 2*(bnum2-anum2)%3\n    \n    if num == num2:\n        print('YES')\n    else:\n        print('NO')", "s = list(input())\nt = list(input())\nls, lt = len(s), len(t)\nsa, sb = [0] * (ls + 1), [0] * (ls + 1)\nta, tb = [0] * (lt + 1), [0] * (lt + 1)\nfor i in range(1, ls + 1):\n    if s[i - 1] == \"A\":\n        sa[i] = sa[i - 1] + 1\n        sb[i] = sb[i - 1]\n    else:\n        sa[i] = sa[i - 1]\n        sb[i] = sb[i - 1] + 1\nfor i in range(1, lt + 1):\n    if t[i - 1] == \"A\":\n        ta[i] = ta[i - 1] + 1\n        tb[i] = tb[i - 1]\n    else:\n        ta[i] = ta[i - 1]\n        tb[i] = tb[i - 1] + 1\n\nq = int(input())\nfor _ in range(q):\n    ans = 0\n    a, b, c, d = map(int, input().split())\n    a1, b1 = sa[b] - sa[a - 1], sb[b] - sb[a - 1]\n    a2, b2 = ta[d] - ta[c - 1], tb[d] - tb[c - 1]\n    x, y = a1 - b1, a2 - b2\n    if x * y < 0:\n        x = -2 * x\n    if abs(x - y) % 3 == 0:\n        ans = 1\n    print(\"YES\" if ans == 1 else \"NO\")", "S = input()\nT = input()\nQ = int(input())\n\nnS = [[0, 0]]\nnT = [[0, 0]]\n\nfor i, c in enumerate(S):\n  nS.append([abs(ord(c) - ord('A')), abs(ord(c) - ord('B'))])\n  nS[i + 1][0] += nS[i][0]\n  nS[i + 1][1] += nS[i][1]\n\nfor i, c in enumerate(T):\n  nT.append([abs(ord(c) - ord('A')), abs(ord(c) - ord('B'))])\n  nT[i + 1][0] += nT[i][0]\n  nT[i + 1][1] += nT[i][1]\n\nfor qawsedrftgyhujikolp in range(Q):\n  a, b, c, d = map(int, input().split())\n  if (nS[b][0] - nS[a - 1][0] + 2 * nS[b][1] - 2 * nS[a - 1][1]) % 3 == (nT[d][0] - nT[c - 1][0] + 2 * nT[d][1] - 2 * nT[c - 1][1]) % 3:\n    print(\"YES\")\n  else:\n    print(\"NO\")", "S = input()\nT = input()\nrui_s = [0]\nrui_t = [0]\nfor s in S:\n    if s == \"A\":\n        rui_s.append((rui_s[-1] + 1) % 3)\n    else:\n        rui_s.append((rui_s[-1] + 2) % 3)\nfor t in T:\n    if t == \"A\":\n        rui_t.append((rui_t[-1] + 1) % 3)\n    else:\n        rui_t.append((rui_t[-1] + 2) % 3)\n        \nfor _ in range(int(input())):\n    a, b, c, d = map(int, input().split())\n    if (rui_s[b] - rui_s[a - 1]) % 3 == (rui_t[d] - rui_t[c - 1]) % 3:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "s = input()\nt = input()\nn, m = len(s), len(t)\na = [0] * (n + 1)\nb = [0] * (m + 1)\nfor i in range(n):\n    a[i + 1] = a[i]\n    if s[i] == 'A':\n        a[i + 1] += 1\n    else:\n        a[i + 1] += 2\nfor i in range(m):\n    b[i + 1] = b[i]\n    if t[i] == 'A':\n        b[i + 1] += 1\n    else:\n        b[i + 1] += 2\nq = int(input())\nfor _ in range(q):\n    i, j, k, l = list(map(int, input().split()))\n    if (a[j] - a[i - 1]) % 3 == (b[l] - b[k - 1]) % 3:\n        print('YES')\n    else:\n        print('NO')\n", "S, T, q, *L = open(0).read().split()\nsa = [0]\nsb = [0]\nta = [0]\ntb = [0]\nfor c in S:\n  if c=='A':\n    sa.append(sa[-1]+1)\n    sb.append(sb[-1])\n  else:\n    sa.append(sa[-1])\n    sb.append(sb[-1]+1)\nfor c in T:\n  if c=='A':\n    ta.append(ta[-1]+1)\n    tb.append(tb[-1])\n  else:\n    ta.append(ta[-1])\n    tb.append(tb[-1]+1)\nfor a,b,c,d in zip(*[iter(map(int,L))]*4):\n  nsa = sa[b]-sa[a-1]\n  nsb = sb[b]-sb[a-1]\n  nta = ta[d]-ta[c-1]\n  ntb = tb[d]-tb[c-1]\n  mb = ntb-nsb\n  ma = nta-nsa\n  if (2*mb+ma)%3==(2*ma+mb)%3==0:\n    print('YES')\n  else:\n    print('NO')", "S = input().strip()\nT = input().strip()\nN = int(input())\n\ndef parse(s):\n  cums = [0]\n  for c in s:\n    cums.append(cums[-1]+ (1 if c == 'A' else 2))\n  return cums\n\ncumS = parse(S)\ncumT = parse(T)\n\n#print(S, cumS)\n#print(T, cumT)\n\nfor _ in range(N):\n  a, b, c, d = map(int, input().split())\n  a, b, c, d = a-1, b-1, c-1, d-1\n  vS = (cumS[b+1]-cumS[a]) % 3\n  vT = (cumT[d+1]-cumT[c]) % 3\n  #print(a, b, c, d, vS, vT)\n  print(\"YES\" if vS == vT else \"NO\") ", "s = input()\nt = input()\ncs = [0]\nfor i in s:\n    if i == \"A\":\n        cs.append((cs[-1]+1)%3)\n    else:\n        cs.append((cs[-1]+2)%3)\nct = [0]\nfor i in t:\n    if i == \"A\":\n        ct.append((ct[-1]+1)%3)\n    else:\n        ct.append((ct[-1]+2)%3)\n\nq = int(input())\nfor _ in range(q):\n    a,b,c,d = map(int,input().split())\n    if (cs[b]-cs[a-1])%3 == (ct[d]-ct[c-1])%3:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "import sys\ninput = sys.stdin.readline\n\nS = input()[:-1]\nT = input()[:-1]\nacc0, acc1 = [0]*(len(S)+1), [0]*(len(S)+1)\n\nfor i in range(len(S)):\n    acc0[i+1] = acc0[i]+(1 if S[i]=='A' else 0)\n    acc1[i+1] = acc1[i]+(1 if S[i]=='B' else 0)\n\nacc2, acc3 = [0]*(len(T)+1), [0]*(len(T)+1)\n\nfor i in range(len(T)):\n    acc2[i+1] = acc2[i]+(1 if T[i]=='A' else 0)\n    acc3[i+1] = acc3[i]+(1 if T[i]=='B' else 0)\n\nq = int(input())\n\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    A_diff = acc0[b]-acc0[a-1]-(acc2[d]-acc2[c-1])\n    B_diff = acc1[b]-acc1[a-1]-(acc3[d]-acc3[c-1])\n    \n    if A_diff%3==B_diff%3:\n        print('YES')\n    else:\n        print('NO')", "S=[input() for i in range(2)]\nq=int(input())\nABCD=[list(map(int,input().split())) for i in range(q)]\np=[[0] for i in range(2)]\nfor i in range(2):\n    for j,s in enumerate(S[i]):\n        if s=='A':\n            p[i].append(p[i][-1]+1)\n        else:\n            p[i].append(p[i][-1]+2)\nfor a,b,c,d in ABCD:\n    print(['NO','YES'][(p[0][b]-p[0][a-1])%3==(p[1][d]-p[1][c-1])%3])", "import bisect, copy, heapq, math, sys\nfrom collections import *\nfrom functools import lru_cache\nfrom itertools import accumulate, combinations, permutations, product\ndef input():\n    return sys.stdin.readline()[:-1]\ndef ruiseki(lst):\n    return [0]+list(accumulate(lst))\ndef celi(a,b):\n    return -(-a//b)\nsys.setrecursionlimit(5000000)\nmod=pow(10,9)+7\nal=[chr(ord('a') + i) for i in range(26)]\ndirection=[[1,0],[0,1],[-1,0],[0,-1]]\n\n\ns,t=input(),input()\nq=int(input())\nabcd=[list(map(int,input().split())) for i in range(q)]\n\nscnt=[(0,0)]*(len(s)+1)\ntcnt=[(0,0)]*(len(t)+1)\nfor i in range(len(s)):\n    a,b=scnt[i]\n    if s[i]==\"A\":\n        a+=1\n    else:\n        b+=1\n    scnt[i+1]=(a,b)\nfor i in range(len(t)):\n    a,b=tcnt[i]\n    if t[i]==\"A\":\n        a+=1\n    else:\n        b+=1\n    tcnt[i+1]=(a,b)\n# print(scnt)\n# print(tcnt)\n\nfor i in range(q):\n    a,b,c,d=abcd[i]\n    sa,sb=scnt[b],scnt[a-1]\n    sa,sb=sa[0]-sb[0],sa[1]-sb[1]\n    ta,tb=tcnt[d],tcnt[c-1]\n    ta,tb=ta[0]-tb[0],ta[1]-tb[1]\n    # print(sa,sb,ta,tb)\n\n    if abs((sa-sb)-(ta-tb))%3==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\n#n,m = map(int,readline().split())\ns = input()\nt = input()\n\nvs = [0]\nfor i in s:\n    if i ==\"A\": vs.append(vs[-1]+1)\n    else: vs.append(vs[-1]-1)\n\nvt = [0]\nfor i in t:\n    if i ==\"A\": vt.append(vt[-1]+1)\n    else: vt.append(vt[-1]-1)\n\n#print(vs)\n#print(vt)\n\nq = int(input())\nfor _ in range(q):\n    a,b,c,d = list(map(int,readline().split()))\n    rs = vs[b] - vs[a-1]\n    rs %= 3\n\n    rt = vt[d] - vt[c-1]\n    rt %= 3\n\n    if rs==rt: print(\"YES\")\n    else: print(\"NO\")\n\n\n\n\n", "\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\n\ndef main():\n    mod=10**9+7\n    S=input()\n    T=input()\n    \n    N=len(S)\n    M=len(T)\n    \n    sa=[0]*(N+1)\n    for i in range(N):\n        a=0\n        if S[i]==\"A\":\n            a=1\n        sa[i+1]=sa[i]+a\n        \n    ta=[0]*(M+1)\n    for i in range(M):\n        a=0\n        if T[i]==\"A\":\n            a=1\n        ta[i+1]=ta[i]+a\n        \n    def f(a1,b1,a2,b2):\n        a1%=3\n        a2=(a2%3)+3\n        b1%=3\n        b2=(b2%3)+3\n        \n        da=a2-a1\n        db=b2-b1\n        \n        return not((da-db)%3)\n    \n    def calc(a,b,c,d):\n        a1=sa[b]-sa[a-1]\n        b1=(b-a+1)-a1\n        \n        a2=ta[d]-ta[c-1]\n        b2=(d-c+1)-a2\n        \n        return f(a1,b1,a2,b2)\n    \n    Q=I()\n    for _ in range(Q):\n        a,b,c,d=MI()\n        \n        \n        # print(S[a-1:b])\n        # print(T[c-1:d])\n        if calc(a,b,c,d):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            \n            \n        \n        \n\nmain()\n", "# AB -> BBAA -> BAAAA -> BA\n# Thus, this problem has commutative property.\n# So, if we let A and B satisfy x^2 + x + 1 == 0,\n# then A^2 == B, B^2 == A, and A^3 == B^3 == 1.\n# So this makes an invariant.\n\nfrom itertools import accumulate\n\nS = input()\nT = input()\nq = int(input())\nabcds = [tuple(map(int, input().split())) for _ in range(q)]\n\nS_csum = list(map(lambda x: x%3, [0] + list(accumulate(map(lambda c: 1 if c == 'A' else -1, S)))))\nT_csum = list(map(lambda x: x%3, [0] + list(accumulate(map(lambda c: 1 if c == 'A' else -1, T)))))\n\nfor a, b, c, d in abcds:\n    if (S_csum[b] - S_csum[a-1]) % 3 == (T_csum[d] - T_csum[c-1]) % 3:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda:sys.stdin.readline().rstrip()\ndef resolve():\n    # \u5168\u90e8 A \u306b\u3057\u305f\u6642\u306b\u3001\u5dee\u304c3\u306e\u7d04\u6570\u306a\u3089\u826f\u3055\u305d\u3046\n    S=[1 if(s=='A') else 2 for s in input()]\n    T=[1 if(s=='A') else 2 for s in input()]\n\n    # cumsum\n    m=len(S)\n    n=len(T)\n    CS=[0]*(m+1)\n    for i in range(m):\n        CS[i+1]=CS[i]+S[i]\n\n    CT=[0]*(n+1)\n    for i in range(n):\n        CT[i+1]=CT[i]+T[i]\n\n    # output\n    for _ in range(int(input())):\n        a,b,c,d=map(int,input().split())\n        a-=1; c-=1\n        k=abs((CS[b]-CS[a])-(CT[d]-CT[c]))\n        print(\"YES\" if(k%3==0) else \"NO\")\nresolve()", "s=input()\nt=input()\nsm=0\nss=[]\nfor i in s:\n  sm+=(i==\"A\")*2-1\n  ss.append(sm)\nss.append(0)\nsm=0\nts=[]\nfor i in t:\n  sm+=(i==\"A\")*2-1\n  ts.append(sm)\nts.append(0)\nq=int(input())\nfor i in range(q):\n  inp=list(map(int,input().split()))\n  if (ss[inp[1]-1]-ss[inp[0]-2])%3==(ts[inp[3]-1]-ts[inp[2]-2])%3:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n", "# https://atcoder.jp/contests/arc071/submissions/6325840\n\nfrom itertools import accumulate\n\nconvert = {'A': 1, 'B': 2}\nS = tuple(convert[x] for x in input())\nT = tuple(convert[x] for x in input())\n# \u6700\u901f:   convert\n# \u6b21\u70b9:   *A, = map()\n# \u6700\u4e0b\u4f4d: A = tuple(map())\n\nacc_s = (0,) + tuple(accumulate(S))\nacc_t = (0,) + tuple(accumulate(T))\n\nans = []\nQ = int(input())\nfor _ in range(Q):\n    sl, sr, tl, tr = map(int, input().split())\n    # \u6dfb\u3048\u5b57-1\u306f\u5909\u6570\u518d\u4ee3\u5165\u3057\u306a\u3044\u65b9\u304c20ms\u901f\u3044\n    ans.append('YES' if ((acc_t[tr] - acc_t[tl - 1]) - (acc_s[sr] - acc_s[sl - 1])) % 3 == 0 else 'NO')\n\nprint(*ans, sep='\\n')\n# \u9010\u6b21print\u3060\u30681000ms\n# \u4e00\u62ec\u3060\u3068500ms\n", "#from collections import deque,defaultdict\nprintn = lambda x: print(x,end='')\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      map(int, input().split())\nins = lambda : input().strip()\nDBG = True # and False\nBIG = 10**18\nR = 10**9 + 7\n#R = 998244353\n\ndef ddprint(x):\n  if DBG:\n    print(x)\n\ns = ins()\nt = ins()\nsacc = [0]\nfor c in s:\n    sacc.append(((1 if c=='A' else 2)+sacc[-1])%3)\ntacc = [0]\nfor c in t:\n    tacc.append(((1 if c=='A' else 2)+tacc[-1])%3)\n#ddprint(sacc)\n#ddprint(tacc)\nq = inn()\nfor i in range(q):\n    a,b,c,d = inm()\n    #ddprint('{} {} {} {}'.format(sacc[b],sacc[a-1],tacc[d],tacc[c-1]))\n    print('YES' if (sacc[b]-sacc[a-1])%3==(tacc[d]-tacc[c-1])%3 else 'NO')\n", "s = input().strip()\nt = input().strip()\nSX = [0]\nfor c in s: \n    if c == \"A\":\n        SX.append(SX[-1]+1)\n    else:\n        SX.append(SX[-1])\nTX = [0]\nfor c in t: \n    if c == \"A\":\n        TX.append(TX[-1]+1)\n    else:\n        TX.append(TX[-1])\n\nQ, = list(map(int, input().split()))\nfor _ in range(Q):\n    a, b, c, d = list(map(int, input().split()))\n    sa = SX[b]-SX[a-1]\n    sb = b-a+1 - sa\n    ta = TX[d]-TX[c-1]\n    tb = d-c+1 - ta\n#    print(sa, sb, ta, tb)\n    if (sa-sb)%3 == (ta-tb)%3:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "#\u30e9\u30a4\u30d6\u30e9\u30ea\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom collections import defaultdict\n\n#\u5165\u529b\u53d7\u3051\u53d6\u308a\ndef getlist():\n\treturn list(map(int, input().split()))\n\n#\u51e6\u7406\u5185\u5bb9\ndef main():\n\tS = list(input())\n\tN = len(S)\n\ts = [0] * (N + 1)\n\tfor i in range(N):\n\t\tif S[i] == \"A\":\n\t\t\ts[i + 1] += s[i] + 2\n\t\telse:\n\t\t\ts[i + 1] += s[i] + 1\n\tT = list(input())\n\tM = len(T)\n\tt = [0] * (M + 1)\n\tfor i in range(M):\n\t\tif T[i] == \"A\":\n\t\t\tt[i + 1] += t[i] + 2\n\t\telse:\n\t\t\tt[i + 1] += t[i] + 1\n\tQ = int(input())\n\tfor i in range(Q):\n\t\ta, b, c, d = getlist()\n\t\tif ((s[b] - s[a - 1]) - (t[d] - t[c - 1])) % 3 == 0:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\ndef __starting_point():\n\tmain()\n__starting_point()", "# AB -> BBAA -> BAAAA -> BA\n# Thus, this problem has commutative property.\n# So, if we let A and B satisfy x^2 + x + 1 == 0,\n# then A^2 == B, B^2 == A, and A^3 == B^3 == 1.\n# So this makes an invariant.\n\nfrom itertools import accumulate\n\nS = input()\nT = input()\nq = int(input())\nabcds = [tuple(map(int, input().split())) for _ in range(q)]\n\nS_csum = list(map(lambda x: x%3, [0] + list(accumulate(map(lambda c: 1 if c == 'A' else -1, S)))))\nT_csum = list(map(lambda x: x%3, [0] + list(accumulate(map(lambda c: 1 if c == 'A' else -1, T)))))\n\nfor a, b, c, d in abcds:\n    if (S_csum[b] - S_csum[a-1]) % 3 == (T_csum[d] - T_csum[c-1]) % 3:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "S = input()\nT = input()\nq = int(input())\nL = [[int(l) for l in input().split()] for _ in range(q)]\n\nsumS = [0]*(len(S)+1)\nsumT = [0]*(len(T)+1)\n\nfor i in range(len(S)):\n    if S[i] == \"A\":\n        sumS[i+1] += 1\n    sumS[i+1] += sumS[i]\n\nfor i in range(len(T)):\n    if T[i] == \"A\":\n        sumT[i+1] += 1\n    sumT[i+1] += sumT[i]\n\nfor i in range(q):\n    a = (sumT[L[i][3]]-sumT[L[i][2]-1]) - (sumS[L[i][1]]-sumS[L[i][0]-1])\n    b = (L[i][3]-L[i][2]+1) - (L[i][1]-L[i][0]+1) - a\n    if (a-b)%3 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "S = [0] + [1 if a == \"A\" else 2 for a in input()]\nT = [0] + [1 if a == \"A\" else 2 for a in input()]\nfor i in range(1, len(S)):\n    S[i] += S[i-1]\nfor i in range(1, len(T)):\n    T[i] += T[i-1]\nfor _ in range(int(input())):\n    a, b, c, d = list(map(int, input().split()))\n    if (S[b] - S[a-1] - T[d] + T[c-1]) % 3 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "# \u3010\u8003\u5bdf\u3011\n# (1) A \u3068 B \u306f\u5165\u308c\u66ff\u3048\u53ef\u80fd\uff1a\n#   AB -> AAA -> BBAA -> BBBBA -> BA\n# (2) AB \u3068 BA \u306f\u7a7a\u6587\u5b57\u306b\u7f6e\u63db\u53ef\u80fd\uff1a\n#   AB -> AAA -> ''\n# (3) \u4e00\u3064\u306e\u6587\u5b57\u304b\u30893\u3064\u305a\u3064\u540c\u3058\u6587\u5b57\u3092\u5897\u3084\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u53ef\u80fd\n#   A -> BB -> AAB -> AAAA\n# \u4ee5\u4e0a\u306e\u70b9\u3088\u308a\u3001A\u30fbB\u306e\u500b\u6570\u306e\u5dee\u306emod3\u306e\u5024\u304c\u672c\u8cea\u7684\u3060\u3068\u308f\u304b\u308b\u3002\n\n\ndef cumsum_a(st):\n    cs = [0] * len(st)\n    for i, s in enumerate(st):\n        if s == 'A':\n            cs[i] = 1\n        if i > 0:\n            cs[i] += cs[i - 1]\n    return cs\n\n\ndef main():\n    S = input()\n    T = input()\n    Q = int(input())\n    query_list = [list(map(lambda x: int(x) - 1, input().split())) for _ in range(Q)]\n    # A\u306e\u500b\u6570\u306e\u7d2f\u7a4d\u548c\u3092\u3068\u308b\uff08b\u306fa\u306e\u500b\u6570\u304b\u3089\u308f\u304b\u308b\uff09\n    s_cs_a, t_cs_a = cumsum_a(S), cumsum_a(T)\n    for query in query_list:\n        s_left, s_right, t_left, t_right = query\n        s_count_a = s_cs_a[s_right]\n        if s_left > 0:\n            s_count_a -= s_cs_a[s_left - 1]\n        s_count_b = s_right - s_left + 1 - s_count_a\n        t_count_a = t_cs_a[t_right]\n        if t_left > 0:\n            t_count_a -= t_cs_a[t_left - 1]\n        t_count_b = t_right - t_left + 1 - t_count_a\n        # \u500b\u6570\u306e\u5dee\u306emod3\u306e\u5024\u3067\u6bd4\u8f03\u3059\u308b\n        s_diff = (s_count_a - s_count_b) % 3\n        t_diff = (t_count_a - t_count_b) % 3\n        if s_diff == t_diff:\n            print('YES')\n        else:\n            print('NO')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\n\nS = list(input())\nT = list(input())\n\ncount_A_S = np.r_[[0], np.array(S) == 'A']\ncount_A_S = count_A_S.cumsum()\ncount_B_S = np.r_[[0], np.array(S) == 'B']\ncount_B_S = count_B_S.cumsum()\ncount_A_T = np.r_[[0], np.array(T) == 'A']\ncount_A_T = count_A_T.cumsum()\ncount_B_T = np.r_[[0], np.array(T) == 'B']\ncount_B_T = count_B_T.cumsum()\n\ndef check(a1, b1, a2, b2):\n  if a1 < a2:\n    if b1 < b2:\n      diff1 = a2 - a1; diff2 = b2 - b1\n      diff = abs(diff1 - diff2)\n    else:\n      diff = b1 - b2 + a2 - a1\n  else:\n    if b1 < b2:\n      diff = a1 - a2 + b2 - b1\n    else:\n      diff1 = a1 - a2; diff2 = b1 - b2\n      diff = abs(diff1 - diff2)\n  if diff % 3 == 0:\n    return 'YES'\n  else:\n    return 'NO'\n\nq = int(input())\nans = []\nfor i in range(q):\n  a, b, c, d = map(int, input().split())\n  num_a_s = count_A_S[b] - count_A_S[a-1]\n  num_b_s = count_B_S[b] - count_B_S[a-1]\n  num_a_t = count_A_T[d] - count_A_T[c-1]\n  num_b_t = count_B_T[d] - count_B_T[c-1]\n  ans.append(check(num_a_s, num_b_s, num_a_t, num_b_t))\n\nprint(*ans, sep='\\n')", "# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\nimport math\n#from math import gcd\nimport bisect\nimport heapq\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import Counter\nfrom functools import lru_cache\n\n#############\n# Constants #\n#############\n\nMOD = 10**9+7\nINF = float('inf')\nAZ = \"abcdefghijklmnopqrstuvwxyz\"\n\n#############\n# Functions #\n#############\n\n######INPUT######\ndef I(): return int(input().strip())\ndef S(): return input().strip()\ndef IL(): return list(map(int,input().split()))\ndef SL(): return list(map(str,input().split()))\ndef ILs(n): return list(int(input()) for _ in range(n))\ndef SLs(n): return list(input().strip() for _ in range(n))\ndef ILL(n): return [list(map(int, input().split())) for _ in range(n)]\ndef SLL(n): return [list(map(str, input().split())) for _ in range(n)]\n\n\n#####Shorten#####\ndef DD(arg): return defaultdict(arg)\n\n#####Inverse#####\ndef inv(n): return pow(n, MOD-2, MOD)\n\n######Combination######\nkaijo_memo = []\ndef kaijo(n):\n  if(len(kaijo_memo) > n): return kaijo_memo[n]\n  if(len(kaijo_memo) == 0): kaijo_memo.append(1)\n  while(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n  return kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n  if(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]\n  if(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)\n  while(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n  return gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n  if n == r: return 1\n  if n < r or r < 0: return 0\n  ret = 1\n  ret = ret * kaijo(n) % MOD\n  ret = ret * gyaku_kaijo(r) % MOD\n  ret = ret * gyaku_kaijo(n-r) % MOD\n  return ret\n\n######Factorization######\ndef factorization(n):\n  arr = []\n  temp = n\n  for i in range(2, int(-(-n**0.5//1))+1):\n    if temp%i==0:\n      cnt=0\n      while temp%i==0: \n        cnt+=1 \n        temp //= i\n      arr.append([i, cnt])\n  if temp!=1: arr.append([temp, 1])\n  if arr==[]: arr.append([n, 1])\n  return arr\n\n#####MakeDivisors######\ndef make_divisors(n):\n  divisors = []\n  for i in range(1, int(n**0.5)+1):\n    if n % i == 0:\n      divisors.append(i)\n      if i != n // i: \n        divisors.append(n//i)\n  return divisors\n\n#####MakePrimes######\ndef make_primes(N):\n  max = int(math.sqrt(N))\n  seachList = [i for i in range(2,N+1)]\n  primeNum = []\n  while seachList[0] <= max:\n    primeNum.append(seachList[0])\n    tmp = seachList[0]\n    seachList = [i for i in seachList if i % tmp != 0]\n  primeNum.extend(seachList)\n  return primeNum\n\n#####GCD#####\ndef gcd(a, b):\n    while b: a, b = b, a % b\n    return a\n\n#####LCM#####\ndef lcm(a, b):\n    return a * b // gcd (a, b)\n\n#####BitCount#####\ndef count_bit(n):\n  count = 0\n  while n:\n    n &= n-1\n    count += 1\n  return count\n\n#####ChangeBase#####\ndef base_10_to_n(X, n):\n  if X//n: return base_10_to_n(X//n, n)+[X%n]\n  return [X%n]\n\ndef base_n_to_10(X, n):\n  return sum(int(str(X)[-i-1])*n**i for i in range(len(str(X))))\n\ndef base_10_to_n_without_0(X, n):\n  X -= 1\n  if X//n: return base_10_to_n_without_0(X//n, n)+[X%n]\n  return [X%n]\n\n#####IntLog#####\ndef int_log(a, n):\n  count = 0\n  while n>=a:\n    n //= a\n    count += 1\n  return count\n\n#############\n# Main Code #\n#############\n\nS = input().strip()\nT = input().strip()\n\naccS = [0]\nfor s in S:\n  if s == \"A\":\n    accS.append((accS[-1]+1)%3)\n  else:\n    accS.append((accS[-1]+2)%3)\naccT = [0]\nfor t in T:\n  if t == \"A\":\n    accT.append((accT[-1]+1)%3)\n  else:\n    accT.append((accT[-1]+2)%3)\n\nQ = I()\nfor _ in range(Q):\n  a,b,c,d = IL()\n  if ((accS[b]-accS[a-1]) - (accT[d]-accT[c-1])) %3:\n    print(\"NO\")\n  else:\n    print(\"YES\")", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nS = '-' + sr()\nT = '-' + sr()\nQ = ir()\ncnt_S = np.array([[0, 0] for _ in range(len(S))])\ncnt_T = np.array([[0, 0] for _ in range(len(S))])\nfor i, s in enumerate(S[1:], 1):\n    if s == 'A':\n        cnt_S[i][0] = 1\n    else:\n        cnt_S[i][1] = 1\n\nfor i, t in enumerate(T[1:], 1):\n    if t == 'A':\n        cnt_T[i][0] = 1\n    else:\n        cnt_T[i][1] = 1\n\nnp.add.accumulate(cnt_S, axis=0, out=cnt_S)\nnp.add.accumulate(cnt_T, axis=0, out=cnt_T)\n\nfor _ in range(Q):\n    a, b, c, d = lr()\n    num_S = cnt_S[b][0] - cnt_S[b][1] - (cnt_S[a-1][0] - cnt_S[a-1][1])\n    num_T = cnt_T[d][0] - cnt_T[d][1] - (cnt_T[c-1][0] - cnt_T[c-1][1])\n    if (num_S - num_T) % 3 == 0:\n        print('YES')\n    else:\n        print('NO')\n\n# 58\n", "S = input().rstrip()\nT = input().rstrip()\nAS = [0]\nAT = [0]\nfor s in S:\n    if s==\"A\": AS.append(AS[-1]+1)\n    else: AS.append(AS[-1]+2)\nfor s in T:\n    if s==\"A\": AT.append(AT[-1]+1)\n    else: AT.append(AT[-1]+2)\nQ = int(input())\nfor _ in range(Q):\n    a, b, c, d = map(int, input().split())\n    if (AS[b]-AS[a-1])%3 == (AT[d]-AT[c-1])%3: print(\"YES\")\n    else: print(\"NO\")", "s = input()\nt = input()\nq = int(input())\nans = ['YES']*q\n\nscnt = [[0]*(len(s)+1) for _ in range(2)]\ntcnt = [[0]*(len(t)+1) for _ in range(2)]\n\nfor i,S in enumerate(s):\n    scnt[0][i+1] = scnt[0][i]\n    scnt[1][i+1] = scnt[1][i]\n    scnt[ord(S)-ord('A')][i+1] += 1\n\nfor i,T in enumerate(t):\n    tcnt[0][i+1] = tcnt[0][i]\n    tcnt[1][i+1] = tcnt[1][i]\n    tcnt[ord(T)-ord('A')][i+1] += 1\n\nfor i in range(q):\n    a,b,c,d = list(map(int,input().split()))\n    a -= 1\n    c -= 1\n    A = scnt[0][b] - scnt[0][a] - tcnt[0][d] + tcnt[0][c]\n    B = scnt[1][b] - scnt[1][a] - tcnt[1][d] + tcnt[1][c]\n    if (A-B)%3 != 0:\n        ans[i] = 'NO'\nprint(('\\n'.join(ans)))\n", "import sys\nfrom itertools import accumulate\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef acc(li, n):\n    res = [0] * (n + 1)\n    for i in range(n):\n        if li[i] == \"A\":\n            res[i + 1] = 1\n        elif li[i] == \"B\":\n            res[i + 1] = 2\n    return list(accumulate(res))\n\n\ndef restore(x, y, li):\n    return (li[y] - li[x - 1]) % 3\n\n\nS = input()\nT = input()\nN = len(S)\nM = len(T)\n\nacc_S = acc(S, N)\nacc_T = acc(T, M)\n\nq = int(input())\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    v_S = restore(a, b, acc_S)\n    v_T = restore(c, d, acc_T)\n    print(\"YES\") if v_S == v_T else print(\"NO\")\n", "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\ns = input()[:-1]\nt = input()[:-1]\nd = {\"A\": 1, \"B\": 2}\nds = [0] + list(accumulate([d[x] for x in s]))\ndt = [0] + list(accumulate([d[x] for x in t]))\nans = []\nappend=ans.append\nfor _ in range(int(input())):\n\ta, b, c, d = list(map(int, input().split()))\n\tif (ds[b]-ds[a-1])%3==(dt[d]-dt[c-1])%3:\n\t\tappend(\"YES\")\n\telse:\n\t\tappend(\"NO\")\nprint((\"\\n\".join(ans)))\n", "def main():\n    def plus(a,b):\n        if a==\"\":\n            return b\n        elif b==\"\":\n            return a\n        elif a==\"A\":\n            if b==\"A\":\n                return \"B\"\n            else:\n                return \"\"\n        else:\n            if b==\"A\":\n                return \"\"\n            else:\n                return \"A\"\n    def minus(a,b):\n        if b==\"A\":\n            b=\"B\"\n        elif b==\"B\":\n            b=\"A\"\n        return plus(a,b)\n    dp1=[\"\"]\n    dp2=[\"\"]\n    s=input()\n    t=input()\n    q=int(input())\n    abcd=[list(map(int,input().split())) for _ in [0]*q]\n    for i in s:\n        dp1.append(plus(dp1[-1],i))\n    for i in t:\n        dp2.append(plus(dp2[-1],i))\n    for a,b,c,d in abcd:\n        a,b,c,d=dp1[a-1],dp1[b],dp2[c-1],dp2[d]\n        print([\"NO\",\"YES\"][minus(b,a)==minus(d,c)])\nmain()", "#problem solving\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef yes():\n    print(\"YES\")\n\n\ndef no():\n    print(\"NO\")\n\n\ndef solve():\n    S = input()\n    T = input()\n    lenS = len(S)\n    lenT = len(T)\n    Q = int(input())\n    Query = [tuple(map(int, input().split())) for i in range(Q)]\n    S_cnt = [0]*(lenS + 1)\n    T_cnt = [0]*(lenT + 1)\n    for i in range(lenS):\n        if S[i] == \"A\":\n            S_cnt[i + 1] += 1\n        else:\n            S_cnt[i + 1] -= 1\n    for i in range(lenS):\n        S_cnt[i + 1] += S_cnt[i]\n\n    for i in range(lenT):\n        if T[i] == \"A\":\n            T_cnt[i + 1] += 1\n        else:\n            T_cnt[i + 1] -= 1\n    for i in range(lenT):\n        T_cnt[i + 1] += T_cnt[i]\n\n    for a, b, c, d in Query:\n        modS = (S_cnt[b] - S_cnt[a - 1]) % 3\n        modT = (T_cnt[d] - T_cnt[c - 1]) % 3\n        if modS == modT:\n            yes()\n        else:\n            no()\n    return\n\n\nsolve()\n", "import sys\nfrom itertools import accumulate\nreadline = sys.stdin.readline\n\nS = [1 if s == 'A' else 2 for s in readline().strip()]\nT = [1 if s == 'A' else 2 for s in readline().strip()]\nAS = [0] + list(accumulate(S))\nAT = [0] + list(accumulate(T))\nQ = int(readline())\nAns = [None]*Q \n\nfor qu in range(Q):\n    a, b, c, d = map(int, readline().split())\n    if (AS[b]-AS[a-1])%3 != (AT[d]-AT[c-1])%3:\n        Ans[qu] = 'NO'    \n    else:\n        Ans[qu] = 'YES'\n\nprint('\\n'.join(map(str, Ans)))", "import sys \ninput = sys.stdin.readline\nyes = \"YES\"\nno = \"NO\"\ns=input()\nt=input()\nls=[0]\nlt=[0]\np=0\nfor c in s:\n    if c == \"A\":p += 1\n    else:p-= 1\n    ls.append(p)\np=0\nfor c in t:\n    if c == \"A\":p += 1\n    else:p-= 1\n    lt.append(p)\n\nq=int(input())\nfor _ in range(q):\n    a,b,c,d = map(int,input().split())\n    if (ls[b]-ls[a-1])%3 == (lt[d]-lt[c-1])%3:print(yes)\n    else:print(no)", "# https://atcoder.jp/contests/arc071/submissions/6325840\n\nfrom itertools import accumulate\n\nconvert = {'A': 1, 'B': 2}\nS = tuple(convert[x] for x in input())\nT = tuple(convert[x] for x in input())\n# maspy\u3055\u3093\u306e\u3084\u308a\u65b9\n\nacc_s = (0,) + tuple(accumulate(S))\nacc_t = (0,) + tuple(accumulate(T))\n\nans = []\nQ = int(input())\nfor _ in range(Q):\n    sl, sr, tl, tr = map(int, input().split())\n    diff = (acc_t[tr] - acc_t[tl - 1]) - (acc_s[sr] - acc_s[sl - 1])\n    # \u6dfb\u3048\u5b57-1\u306f\u5909\u6570\u518d\u4ee3\u5165\u3057\u306a\u3044\u65b9\u304c20ms\u901f\u3044\n    ans.append('YES' if diff % 3 == 0 else 'NO')\n\nprint(*ans, sep='\\n')\n# \u9010\u6b21print\u3060\u30681000ms\n# \u4e00\u62ec\u3060\u3068500ms\n", "from itertools import accumulate\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\n# \u89e3\u8aac\u898b\u3061\u3083\u3063\u305f...\ndef main():\n    s = SI()\n    t = SI()\n    s = [0] + [x for x in accumulate([1 if c == \"A\" else 2 for c in s])]\n    t = [0] + [x for x in accumulate([1 if c == \"A\" else 2 for c in t])]\n    q = II()\n    for _ in range(q):\n        a, b, c, d = MI()\n        if (s[b] - s[a - 1]) % 3 == (t[d] - t[c - 1]) % 3: print(\"YES\")\n        else: print(\"NO\")\n\nmain()\n", "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\ns = readline().strip()\nt = readline().strip()\nq = int(readline())\nabcd = list(map(int,read().split()))\n\ncumsum_s = [0] * (len(s)+1)\ncumsum_t = [0] * (len(t)+1)\nfor cs,st in zip([cumsum_s,cumsum_t],[s,t]):\n    for i,ch in enumerate(st,1):\n        cs[i] = cs[i-1] + (1 if ch=='A' else 2)\n\nans = []\nit = iter(abcd)\nfor a,b,c,d in zip(it,it,it,it):\n    num1 = cumsum_s[b] - cumsum_s[a-1]\n    num2 = cumsum_t[d] - cumsum_t[c-1]\n    if((num1-num2)%3 == 0):\n        ans.append('YES')\n    else:\n        ans.append('NO')\n\nprint('\\n'.join(ans))"]