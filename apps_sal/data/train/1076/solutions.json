["# cook your dish here\nclass TestCase:\n    def __init__(self):\n        [self.node_count, self.query_count] = read_line()\n        \n    def fill_nodes(self):\n        self.nodes = {n+1: [] for n in range(self.node_count)}\n        for i in range(self.node_count -1):\n            new_node_1, new_node_2 = read_line()\n            self.nodes[new_node_1].append(new_node_2)\n            self.nodes[new_node_2].append(new_node_1)\n            \n    def resolve_query(self, query):\n        a, d_a, b, d_b = query\n        suiting_a = self.find_nodes_with_distance(a, d_a)\n        suiting_b = self.find_nodes_with_distance(b, d_b)\n        fitting = [node for node in suiting_a if node in suiting_b]\n        \n        if len(fitting) == 0:\n            return -1\n        else:\n            return fitting[0]\n        \n    def find_nodes_with_distance(self, start_node, distance):\n        from_nodes = {start_node}\n        passed_nodes = from_nodes\n        \n        for i in range(distance):\n            to_nodes = set()\n            # add all adjacent nodes\n            for node in from_nodes:\n                to_nodes.update(self.nodes[node])\n            \n            # no backtracking\n            for node in passed_nodes:\n                if node in to_nodes:\n                    to_nodes.remove(node)\n            \n            # update which nodes are passed\n            passed_nodes.update(to_nodes)\n            # go another round with the new nodes found\n            from_nodes = to_nodes\n        return list(from_nodes)\n\ndef read_line():\n    line = input()\n    return [int(s) for s in line.split(' ')]\n\nnum_testcases = int(input())\nfor i in range(num_testcases):\n    testcase = TestCase()\n    testcase.fill_nodes()\n    for q in range(testcase.query_count):\n        query = read_line()\n        print(testcase.resolve_query(query))", "class TestCase:\r\n    def __init__(self):\r\n        [self.node_count, self.query_count] = read_line()\r\n        \r\n    def fill_nodes(self):\r\n        self.nodes = {n+1: [] for n in range(self.node_count)}\r\n        for i in range(self.node_count -1):\r\n            new_node_1, new_node_2 = read_line()\r\n            self.nodes[new_node_1].append(new_node_2)\r\n            self.nodes[new_node_2].append(new_node_1)\r\n            \r\n    def resolve_query(self, query):\r\n        a, d_a, b, d_b = query\r\n        suiting_a = self.find_nodes_with_distance(a, d_a)\r\n        suiting_b = self.find_nodes_with_distance(b, d_b)\r\n        fitting = [node for node in suiting_a if node in suiting_b]\r\n        \r\n        if len(fitting) == 0:\r\n            return -1\r\n        else:\r\n            return fitting[0]\r\n        \r\n    def find_nodes_with_distance(self, start_node, distance):\r\n        from_nodes = {start_node}\r\n        passed_nodes = from_nodes\r\n        \r\n        for i in range(distance):\r\n            to_nodes = set()\r\n            # add all adjacent nodes\r\n            for node in from_nodes:\r\n                to_nodes.update(self.nodes[node])\r\n            \r\n            # no backtracking\r\n            for node in passed_nodes:\r\n                if node in to_nodes:\r\n                    to_nodes.remove(node)\r\n            \r\n            # update which nodes are passed\r\n            passed_nodes.update(to_nodes)\r\n            # go another round with the new nodes found\r\n            from_nodes = to_nodes\r\n        return list(from_nodes)\r\n\r\ndef read_line():\r\n    line = input()\r\n    return [int(s) for s in line.split(' ')]\r\n\r\nnum_testcases = int(input())\r\nfor i in range(num_testcases):\r\n    testcase = TestCase()\r\n    testcase.fill_nodes()\r\n    for q in range(testcase.query_count):\r\n        query = read_line()\r\n        print(testcase.resolve_query(query))", "def bfs(tr,sp,d):\n    temp=[sp]\n    vl=[-1]*len(tr)\n    vl[sp]=0\n    while(len(temp)>0):\n        z=temp.pop(0)\n        if(vl[z]>=d):\n            continue\n        for e in tr[z]:\n            if(vl[e]==-1):\n                vl[e]=vl[z]+1\n                temp.append(e)\n    return [i for i in range(len(vl)) if vl[i]==d]\n\ndef myfunc():\n    n,q=list(map(int,input().split()))\n    tr=[[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u,v=list(map(int,input().split()))\n        tr[u].append(v)\n        tr[v].append(u)\n    for qn in range(q):\n        a,da,b,db=list(map(int,input().split()))\n        ta=set(bfs(tr,a,da))\n        tb=set(bfs(tr,b,db))\n        x=list(ta.intersection(tb))\n        if(len(x)>0):\n            print(x[0])\n        else:print(-1)\n\n\nt=int(input())\nfor _ in range(t):\n    myfunc()", "# cook your dish here\ndef bfs(tr,sp,d):\n    temp=[sp]\n    vl=[-1]*len(tr)\n    vl[sp]=0\n    while(len(temp)>0):\n        z=temp.pop(0)\n        if(vl[z]>=d):\n            continue\n        for e in tr[z]:\n            if(vl[e]==-1):\n                vl[e]=vl[z]+1\n                temp.append(e)\n    return [i for i in range(len(vl)) if vl[i]==d]\n\ndef myfunc():\n    n,q=list(map(int,input().split()))\n    tr=[[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u,v=list(map(int,input().split()))\n        tr[u].append(v)\n        tr[v].append(u)\n    for qn in range(q):\n        a,da,b,db=list(map(int,input().split()))\n        ta=set(bfs(tr,a,da))\n        tb=set(bfs(tr,b,db))\n        x=list(ta.intersection(tb))\n        if(len(x)>0):\n            print(x[0])\n        else:print(-1)\n\n\nt=int(input())\nfor _ in range(t):\n    myfunc()", "# cook your dish here\ndef bfs(tr,sp,d):\n    temp=[sp]\n    vl=[-1]*len(tr)\n    vl[sp]=0\n    while(len(temp)>0):\n        z=temp.pop(0)\n        if(vl[z]>=d):\n            continue\n        for e in tr[z]:\n            if(vl[e]==-1):\n                vl[e]=vl[z]+1\n                temp.append(e)\n    return [i for i in range(len(vl)) if vl[i]==d]\n\ndef myfunc():\n    n,q=list(map(int,input().split()))\n    tr=[[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u,v=list(map(int,input().split()))\n        tr[u].append(v)\n        tr[v].append(u)\n    for qn in range(q):\n        a,da,b,db=list(map(int,input().split()))\n        ta=set(bfs(tr,a,da))\n        tb=set(bfs(tr,b,db))\n        x=list(ta.intersection(tb))\n        if(len(x)>0):\n            print(x[0])\n        else:print(-1)\n\n\nt=int(input())\nfor _ in range(t):\n    myfunc()", "def bfs(tr,sp,d):\n    temp=[sp]\n    vl=[-1]*len(tr)\n    vl[sp]=0\n    while(len(temp)>0):\n        z=temp.pop(0)\n        if(vl[z]>=d):\n            continue\n        for e in tr[z]:\n            if(vl[e]==-1):\n                vl[e]=vl[z]+1\n                temp.append(e)\n    return [i for i in range(len(vl)) if vl[i]==d]\n\ndef myfunc():\n    n,q=list(map(int,input().split()))\n    tr=[[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u,v=list(map(int,input().split()))\n        tr[u].append(v)\n        tr[v].append(u)\n    for qn in range(q):\n        a,da,b,db=list(map(int,input().split()))\n        ta=set(bfs(tr,a,da))\n        tb=set(bfs(tr,b,db))\n        x=list(ta.intersection(tb))\n        if(len(x)>0):\n            print(x[0])\n        else:print(-1)\n\n\nt=int(input())\nfor _ in range(t):\n    myfunc()", "t = int(input().strip())\r\nresult = []\r\n\r\nclass Distance:\r\n    def __init__(self , n , dist):\r\n        self.n = n\r\n        self.dist = dist\r\n\r\n    def cal_dist(self,u,v):\r\n        self.dist[u][v] = self.dist[v][u] = 1\r\n        for i in range(n):\r\n            if self.dist[u][i] != -1 and self.dist[v][i] == -1 and i!=u and i!=v:\r\n                self.dist[v][i] = self.dist[i][v] = self.dist[u][i] + 1\r\n        for i in range(n):\r\n            if self.dist[v][i] != -1 and self.dist[u][i] == -1 and i!=u and i!=v:\r\n                self.dist[u][i] = self.dist[i][u] = self.dist[v][i] + 1\r\n                \r\n    def return_dist(self):\r\n        return self.dist\r\n\r\nfor i in range(t):\r\n    n,q = map(int, input().strip().split())\r\n    dist = [[-1 for j in range(n)] for k in range(n)]\r\n    for j in range(n):\r\n        dist[j][j] = 0\r\n    d = Distance(n,dist)\r\n    for j in range(n-1):\r\n        u , v = map(int , input().strip().split())\r\n        d.cal_dist(u-1,v-1)\r\n    dist = d.return_dist()\r\n    for j in range(q):\r\n        a , da , b , db = map(int , input().strip().split())\r\n        ans = -1\r\n        for k in range(n):\r\n            if dist[a-1][k] == da and dist[b-1][k] == db:\r\n                ans = k+1\r\n                break\r\n        result.append(ans)\r\n        \r\nprint(*result,sep=\"\\n\")", "# cook your dish here\nt = int(input().strip())\nresult = []\n\nclass Distance:\n    def __init__(self , n , dist):\n        self.n = n\n        self.dist = dist\n\n    def cal_dist(self,u,v):\n        self.dist[u][v] = self.dist[v][u] = 1\n        for i in range(n):\n            if self.dist[u][i] != -1 and self.dist[v][i] == -1 and i!=u and i!=v:\n                self.dist[v][i] = self.dist[i][v] = self.dist[u][i] + 1\n        for i in range(n):\n            if self.dist[v][i] != -1 and self.dist[u][i] == -1 and i!=u and i!=v:\n                self.dist[u][i] = self.dist[i][u] = self.dist[v][i] + 1\n                \n    def return_dist(self):\n        return self.dist\n\nfor i in range(t):\n    n,q = map(int, input().strip().split())\n    dist = [[-1 for j in range(n)] for k in range(n)]\n    for j in range(n):\n        dist[j][j] = 0\n    d = Distance(n,dist)\n    for j in range(n-1):\n        u , v = map(int , input().strip().split())\n        d.cal_dist(u-1,v-1)\n    dist = d.return_dist()\n    for j in range(q):\n        a , da , b , db = map(int , input().strip().split())\n        ans = -1\n        for k in range(n):\n            if dist[a-1][k] == da and dist[b-1][k] == db:\n                ans = k+1\n                break\n        result.append(ans)\n        \nprint(*result,sep=\"\\n\")", "# cook your dish here\n# cook your dish here\nt = int(input().strip())\nresult = []\n\nclass Distance:\n    def __init__(self , n , dist):\n        self.n = n\n        self.dist = dist\n\n    def cal_dist(self,u,v):\n        self.dist[u][v] = self.dist[v][u] = 1\n        for i in range(n):\n            if self.dist[u][i] != -1 and self.dist[v][i] == -1 and i!=u and i!=v:\n                self.dist[v][i] = self.dist[i][v] = self.dist[u][i] + 1\n        for i in range(n):\n            if self.dist[v][i] != -1 and self.dist[u][i] == -1 and i!=u and i!=v:\n                self.dist[u][i] = self.dist[i][u] = self.dist[v][i] + 1\n                \n    def return_dist(self):\n        return self.dist\n\nfor i in range(t):\n    n,q = map(int, input().strip().split())\n    dist = [[-1 for j in range(n)] for k in range(n)]\n    for j in range(n):\n        dist[j][j] = 0\n    d = Distance(n,dist)\n    for j in range(n-1):\n        u , v = map(int , input().strip().split())\n        d.cal_dist(u-1,v-1)\n    dist = d.return_dist()\n    for j in range(q):\n        a , da , b , db = map(int , input().strip().split())\n        ans = -1\n        for k in range(n):\n            if dist[a-1][k] == da and dist[b-1][k] == db:\n                ans = k+1\n                break\n        result.append(ans)\n        \nprint(*result,sep=\"\\n\")", "# cook your dish here\nt = int(input().strip())\nresult = []\n\nclass Distance:\n    def __init__(self , n , dist):\n        self.n = n\n        self.dist = dist\n\n    def cal_dist(self,u,v):\n        self.dist[u][v] = self.dist[v][u] = 1\n        for i in range(n):\n            if self.dist[u][i] != -1 and self.dist[v][i] == -1 and i!=u and i!=v:\n                self.dist[v][i] = self.dist[i][v] = self.dist[u][i] + 1\n        for i in range(n):\n            if self.dist[v][i] != -1 and self.dist[u][i] == -1 and i!=u and i!=v:\n                self.dist[u][i] = self.dist[i][u] = self.dist[v][i] + 1\n                \n    def return_dist(self):\n        return self.dist\n\nfor i in range(t):\n    n,q = map(int, input().strip().split())\n    dist = [[-1 for j in range(n)] for k in range(n)]\n    for j in range(n):\n        dist[j][j] = 0\n    d = Distance(n,dist)\n    for j in range(n-1):\n        u , v = map(int , input().strip().split())\n        d.cal_dist(u-1,v-1)\n    dist = d.return_dist()\n    for j in range(q):\n        a , da , b , db = map(int , input().strip().split())\n        ans = -1\n        for k in range(n):\n            if dist[a-1][k] == da and dist[b-1][k] == db:\n                ans = k+1\n                break\n        result.append(ans)\n        \nprint(*result,sep=\"\\n\")", "# cook your dish here\nt = int(input().strip())\nresult = []\n\nclass Distance:\n    def __init__(self , n , dist):\n        self.n = n\n        self.dist = dist\n\n    def cal_dist(self,u,v):\n        self.dist[u][v] = self.dist[v][u] = 1\n        for i in range(n):\n            if self.dist[u][i] != -1 and self.dist[v][i] == -1 and i!=u and i!=v:\n                self.dist[v][i] = self.dist[i][v] = self.dist[u][i] + 1\n        for i in range(n):\n            if self.dist[v][i] != -1 and self.dist[u][i] == -1 and i!=u and i!=v:\n                self.dist[u][i] = self.dist[i][u] = self.dist[v][i] + 1\n                \n    def return_dist(self):\n        return self.dist\n\nfor i in range(t):\n    n,q = map(int, input().strip().split())\n    dist = [[-1 for j in range(n)] for k in range(n)]\n    for j in range(n):\n        dist[j][j] = 0\n    d = Distance(n,dist)\n    for j in range(n-1):\n        u , v = map(int , input().strip().split())\n        d.cal_dist(u-1,v-1)\n    dist = d.return_dist()\n    for j in range(q):\n        a , da , b , db = map(int , input().strip().split())\n        ans = -1\n        for k in range(n):\n            if dist[a-1][k] == da and dist[b-1][k] == db:\n                ans = k+1\n                break\n        result.append(ans)\n        \nprint(*result,sep=\"\\n\")", "try:\n    t=int(input())\n    for __ in range(t):\n        N,m=map(int,input().split())\n        A=[]\n        dic={}\n        for i in range(N-1):\n            a,b=map(int,input().split())\n            if a in dic:\n                dic[a]+=str(b)+\",\"\n            else:\n                dic[a]=str(b)+\",\"\n            if b in dic:\n                dic[b]+=str(a)+\",\"\n            else:\n                dic[b]=str(a)+\",\"\n        for _ in range(m):\n            term1,dist1,term2,dist2=map(str,input().split())\n            l=[term1]\n            A=[]\n            def distance(t,c,x,A,l):\n                if t==int(c):\n                    A+=[x]\n                else:\n                    string=\"\"\n                    for i in dic[int(x)]:\n                        if i==\",\":\n                            if string not in l:\n                                l+=[string]\n                                x=string\n                                distance(t+1,c,x,A,l)\n                                string=\"\"\n                            else:\n                                string=\"\"\n                        else:\n                            string+=str(i)\n            distance(0,dist1,term1,A,l)\n            l1=[]\n            for i in A:\n                if i!=term1:\n                    l1+=[i]\n            A=[]\n            l=[term2]\n            distance(0,dist2,term2,A,l)\n            l2=[]\n            for i in A:\n                if i!=term2:\n                    l2+=[i]\n            count=0\n            for i in l1:\n                if i in l2:\n                    if count<1:\n                        print(int(i))\n                        count+=1\n            if count==0:\n                print(-1)\nexcept:\n    pass\n\n        \n        ", "\n# cook your dish here\ndef dist(a,b):\n    if (a,b) in di :\n        return di[(a,b)]\n    if distance[a]<distance[b]:\n        a,b = b,a\n    c = distance[a] - distance[b]\n    l = []\n    t = a\n    while c:\n        l.append(t)\n        t = p[t]\n        c -= 1\n    w = b\n    r = []\n    while t!=w:\n        l.append(t)\n        r.append(w)\n        t = p[t]\n        w = p[w]\n    for i in l:\n        for j in r :\n            di[(i,j)] = distance[i] + distance[j] - 2*distance[t]\n    di[(a,b)] = distance[a] + distance[b] - 2*distance[t]\n    return di[(a,b)]\n    \nt = int(input())\nfor t_iter in range(t):\n    n,q = map(int,input().split())\n    g = {}\n    for i in range(n):\n        g[i] = []\n    for i in range(n-1):\n        u,v = map(int,input().split())\n        g[u-1].append(v-1)\n        g[v-1].append(u-1)\n    \n    p = [None]*n\n    distance = [-1]*n\n    distance[0] = 0\n    qu= [0]\n    while len(qu):\n        u = qu.pop(0)\n        for v in g[u]:\n            if distance[v] == -1:\n                distance[v] = distance[u] + 1 \n                p[v] = u\n                qu.append(v)\n    # print(p)\n    # print(distance)\n    di = {}\n    for q_iter in range(q):\n        a,da,b,db = map(int,input().split())\n        a -= 1\n        b -= 1\n        flag = 0\n        for i in range(n):\n            if dist(a,i) == da and dist(b,i) == db :\n                print(i+1)\n                flag = 1\n                break\n        if flag == 0:\n            print(-1)\n                \n    \n        \n        ", "\n# cook your dish here\ndef dist(a,b):\n    if (a,b) in di :\n        return di[(a,b)]\n    if distance[a]<distance[b]:\n        a,b = b,a\n    c = distance[a] - distance[b]\n    t = a\n    while c:\n        t = p[t]\n        c -= 1\n    w = b\n    while t!=w:\n        t = p[t]\n        w = p[w]\n    di[(a,b)] = distance[a] + distance[b] - 2*distance[t]\n    return di[(a,b)]\n    \nt = int(input())\nfor t_iter in range(t):\n    n,q = map(int,input().split())\n    g = {}\n    for i in range(n):\n        g[i] = []\n    for i in range(n-1):\n        u,v = map(int,input().split())\n        g[u-1].append(v-1)\n        g[v-1].append(u-1)\n    \n    p = [None]*n\n    distance = [-1]*n\n    distance[0] = 0\n    qu= [0]\n    while len(qu):\n        u = qu.pop(0)\n        for v in g[u]:\n            if distance[v] == -1:\n                distance[v] = distance[u] + 1 \n                p[v] = u\n                qu.append(v)\n    # print(p)\n    # print(distance)\n    di = {}\n    for q_iter in range(q):\n        a,da,b,db = map(int,input().split())\n        a -= 1\n        b -= 1\n        flag = 0\n        for i in range(n):\n            if dist(a,i) == da and dist(b,i) == db :\n                print(i+1)\n                flag = 1\n                break\n        if flag == 0:\n            print(-1)\n                \n    \n        \n        ", "\n# cook your dish here\ndef dist(a,b):\n    if distance[a]<distance[b]:\n        a,b = b,a\n    c = distance[a] - distance[b]\n    t = a\n    while c:\n        t = p[t]\n        c -= 1\n    w = b\n    while t!=w:\n        t = p[t]\n        w = p[w]\n    return distance[a] + distance[b] - 2*distance[t]\n    \nt = int(input())\nfor t_iter in range(t):\n    n,q = map(int,input().split())\n    g = {}\n    for i in range(n):\n        g[i] = []\n    for i in range(n-1):\n        u,v = map(int,input().split())\n        g[u-1].append(v-1)\n        g[v-1].append(u-1)\n    \n    p = [None]*n\n    distance = [-1]*n\n    distance[0] = 0\n    qu= [0]\n    while len(qu):\n        u = qu.pop(0)\n        for v in g[u]:\n            if distance[v] == -1:\n                distance[v] = distance[u] + 1 \n                p[v] = u\n                qu.append(v)\n    # print(p)\n    # print(distance)\n    for q_iter in range(q):\n        a,da,b,db = map(int,input().split())\n        a -= 1\n        b -= 1\n        flag = 0\n        for i in range(n):\n            if dist(a,i) == da and dist(b,i) == db :\n                print(i+1)\n                flag = 1\n                break\n        if flag == 0:\n            print(-1)\n                \n    \n        \n        ", "import numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1\n\n", "\nimport numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\n\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1", "\nimport numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\n\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1", "# cook your dish here\r\nimport numpy as np\r\n\r\ndef add(adj,a,b,n):\r\n    adj[a,b] = adj[b,a] = 1\r\n    for i in range(n):\r\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\r\n            adj[b,i] = adj[a,i] + 1\r\n            adj[i,b] = adj[b,i]\r\n    for i in range(n):\r\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\r\n            adj[a,i] = adj[b,i] + 1\r\n            adj[i,a] = adj[a,i]\r\n    return adj\r\n\r\nt = int(input())\r\nwhile t>0 :\r\n    n,q = map(int,input().split())\r\n    adj = np.zeros((n,n),dtype = 'int')\r\n    adj += np.array([-10])\r\n    for i in range(n):\r\n        adj[i,i] = 0\r\n    for i in range(1,n):\r\n        a,b = map(int,input().split())\r\n        adj = add(adj,a-1,b-1,n)\r\n    for _ in range(q):\r\n        a,da,b,db = map(int,input().split())\r\n        x = -1\r\n        for i in range(n):\r\n            if adj[a-1,i] == da and adj[b-1,i] == db:\r\n                x = i + 1\r\n                break\r\n        print(x)\r\n    t -= 1", "# cook your dish here\nimport numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\n\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1", "\n# cook your dish here\nimport numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\n\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1", "# cook your dish here\n# cook your dish here\nimport numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\n\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1", "# cook your dish here\n# cook your dish here\nimport numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\n\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1", "# cook your dish here\nimport numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\n\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1", "# cook your dish here\nimport numpy as np\n\ndef add(adj,a,b,n):\n    adj[a,b] = adj[b,a] = 1\n    for i in range(n):\n        if adj[a,i]!=-10 and a!=i and b!=i and adj[b,i]==-10:\n            adj[b,i] = adj[a,i] + 1\n            adj[i,b] = adj[b,i]\n    for i in range(n):\n        if adj[b,i]!=-10 and b!=i and a!=i and adj[a,i]==-10:\n            adj[a,i] = adj[b,i] + 1\n            adj[i,a] = adj[a,i]\n    return adj\n\nt = int(input())\nwhile t>0 :\n    n,q = map(int,input().split())\n    adj = np.zeros((n,n),dtype = 'int')\n    adj += np.array([-10])\n    for i in range(n):\n        adj[i,i] = 0\n    for i in range(1,n):\n        a,b = map(int,input().split())\n        adj = add(adj,a-1,b-1,n)\n    for _ in range(q):\n        a,da,b,db = map(int,input().split())\n        x = -1\n        for i in range(n):\n            if adj[a-1,i] == da and adj[b-1,i] == db:\n                x = i + 1\n                break\n        print(x)\n    t -= 1\n"]