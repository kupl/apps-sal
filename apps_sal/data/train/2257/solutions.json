["import sys\ninput = lambda: sys.stdin.readline().rstrip()\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [ord(a) - 97 for a in input()]\n    B = [ord(a) - 97 for a in input()]\n    X = [[0] * 20 for _ in range(20)]\n    for a, b in zip(A, B):\n        X[a][b] = 1\n        if a > b:\n            print(-1)\n            break\n    else:\n        ans = 0\n        for i in range(20):\n            for j in range(i+1, 20):\n                if X[i][j]:\n                    ans += 1\n                    for jj in range(j+1, 20):\n                        if X[i][jj]:\n                            X[j][jj] = 1\n                    break\n        print(ans)\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    A=input().strip()\n    B=input().strip()\n\n    for i in range(n):\n        if A[i]>B[i]:\n            print(-1)\n            break\n    else:\n        DICT=dict()\n\n        for i in range(n):\n            a=A[i]\n            b=B[i]\n\n            if a==b:\n                continue\n\n            if a in DICT:\n                DICT[a].add(b)\n            else:\n                DICT[a]={b}\n\n        #print(DICT)\n\n        ANS=0\n\n        for x in \"abcdefghijklmnopqrst\":\n            if x in DICT and DICT[x]!=set():\n                ANS+=1\n                MIN=min(DICT[x])\n                if MIN in DICT:\n                    DICT[MIN]=DICT[MIN]|DICT[x]-{MIN}\n                else:\n                    DICT[MIN]=DICT[x]-{MIN}\n        print(ANS)\n            \n\n    \n", "import sys\ninput = sys.stdin.readline\n\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = [-1] * n\n        self.cnt = n\n\n    def root(self, x):\n        if self.parent[x] < 0:\n            return x\n        else:\n            self.parent[x] = self.root(self.parent[x])\n            return self.parent[x]\n\n    def merge(self, x, y):\n        x = self.root(x)\n        y = self.root(y)\n        if x == y:\n            return\n        if self.parent[x] > self.parent[y]:\n            x, y = y, x\n        self.parent[x] += self.parent[y]\n        self.parent[y] = x\n        self.cnt -= 1\n\n    def is_same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    def get_size(self, x):\n        return -self.parent[self.root(x)]\n\n    def get_cnt(self):\n        return self.cnt\n\n\nt = int(input())\nalph = \"abcdefghijklmnopqrstuvwxyz\"\nto_ind = {char: i for i, char in enumerate(alph)}\n\n\nfor _ in range(t):\n    n = int(input())\n    a = list(input())\n    b = list(input())\n    \n    flag = False\n    for i in range(n):\n        if a[i] > b[i]:\n            print(-1)\n            flag = True\n            break\n    if flag:\n        continue\n\n    uf = UnionFind(26)\n    for i in range(n):\n        u = to_ind[a[i]]\n        v = to_ind[b[i]]\n        uf.merge(u, v)\n    print(26 - uf.get_cnt())", "import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\nAns = [None]*T\ngeta = 20\nfor qu in range(T):\n    N = int(readline())\n    A = list(map(lambda x: ord(x)-97, readline().strip()))\n    B = list(map(lambda x: ord(x)-97, readline().strip()))\n    if any(a > b for a, b in zip(A, B)):\n        Ans[qu] = -1\n        continue\n    res = 0\n    table = [[0]*geta for _ in range(geta)]\n    for a, b in zip(A, B):\n        if a != b:\n            table[a][b] = 1\n    \n    for al in range(geta):\n        if sum(table[al]):\n            res += 1\n            bl = table[al].index(1)\n            for cl in range(bl+1, geta):\n                table[bl][cl] = table[bl][cl] | table[al][cl]\n    Ans[qu] = res\nprint('\\n'.join(map(str, Ans)))"]