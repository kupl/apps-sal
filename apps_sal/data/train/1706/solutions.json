["def rectangle_rotation(a, b):\n    a //= 2**0.5\n    b //= 2**0.5\n    r = (a + 1) * (b + 1) + a * b\n\n    return r + r % 2 - 1", "def rectangle_rotation(a, b):\n  \n  wid_even = 2 * int(a / 2 /(2**0.5)) + 1\n  hei_even = 2 * int(b / 2 /(2**0.5)) + 1\n  \n  wid_odd = 2 * int(a / 2 /(2**0.5) + 1/2)\n  hei_odd = 2 * int(b / 2 /(2**0.5) + 1/2)\n  \n  #wid_even * hei_even is the numbers of points (x,y) that x + y is even\n  #others are counted by wid_odd*hei_odd\n  return wid_even*hei_even+wid_odd*hei_odd", "def rectangle_rotation(a, b):\n    a1 = filter(lambda x:x%2==0, [ a//(2**0.5), a//(2**0.5)+1 ])[0]\n    a2 = filter(lambda x:x%2==1, [ a//(2**0.5), a//(2**0.5)+1 ])[0]\n    b1 = filter(lambda x:x%2==0, [ b//(2**0.5), b//(2**0.5)+1 ])[0]\n    b2 = filter(lambda x:x%2==1, [ b//(2**0.5), b//(2**0.5)+1 ])[0]\n    return a1 * b1 + a2 * b2", "def rectangle_rotation(a, b):\n    b1 = b//(2**(1/2))+1\n    a1 = a//(2**(1/2))+1\n    c = a1*b1+(a1-1)*(b1-1)\n    return c if c % 2 == 1 else c-1", "def rectangle_rotation(a, b):\n  x=a//2**0.5\n  y=b//2**0.5\n  return x*2*y+x+y+1-((x-y)%2)", "#divide the gris intro two\n#the odd grid (has values odd*odd)\n#the even grid (has values even*even)\n#then add them together\n\nfrom math import sqrt\n\ndef rectangle_rotation(a, b):\n    d = sqrt(2)\n\n    #always odd numbers\n    x1 = int(a / (2*d)) * 2 +1\n    y1 = int(b / (2*d)) * 2 +1\n    \n    #always even numbers\n    x2 = 2* (1 + int(a/(2*d) - (1/2)))\n    y2 = 2* (1 + int(b/(2*d) - (1/2)))\n\n    return((x1*y1) + (x2*y2))", "def rectangle_rotation(a, b):\n    n1, n2 = map(lambda x: int((x/2) / 2**.5), [a,b])\n    m1, m2 = map(lambda x: int((x-2**.5)/2 / 2**.5 + 1), [a,b])\n    return (2*n1+1)*(2*n2+1) + 4*m1*m2", "rectangle_rotation=lambda a,b,p=2**.5:(a//p+.5)*(b//p+.5)//1*2+1", "from math import floor,sqrt       \n\ndef rectangle_rotation(a,b):\n    \n    sa = krissx(a)\n    sb = krissx(b)\n    ena = krisenx(sa)\n    enb = krisenx(sb)\n    p = krisif(sa)\n    m = krisif(sb)\n    \n    return (ena*enb)+(ena+p)*(enb+m)\n\n\n  \ndef krissx(x):\n    f=sqrt(2)\n    return x/f\n    \ndef krisenx(sx):\n    enx = sx//2*2+1\n    return enx\n    \ndef krisif(sx):\n    sxif = sx-sx//2*2\n    if sxif >= 1 : return 1\n    else:return -1\n\n\n\n\n\n\n\n\n\n\nfrom math import sqrt, floor", "def rectangle_rotation(a, b):\n    x, y = int(a / 2**0.5), int(b / 2**0.5)\n    return 2*x*y + x + y + (x&1 == y&1)"]