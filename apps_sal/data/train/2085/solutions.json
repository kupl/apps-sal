["from sys import stdin, stdout\n\nK = 20\n\ndef findAllStrings(s):\n    n = len(s)\n    sDict = {}\n    for i in range(1,K+1):\n        sDict[i]=set()\n        for x in range(n-i+1):\n            sDict[i].add(s[x:x+i])\n    return sDict\n\nn = int(stdin.readline().rstrip())\nstringDicts = []\nstringEnd = []\nstringBegin = []\n\nfor i in range(n):\n    s = stdin.readline().rstrip()\n    stringDicts.append(findAllStrings(s))\n    if len(s)<K:\n        stringEnd.append(s)\n        stringBegin.append(s)\n    else:\n        stringEnd.append(s[-20:])\n        stringBegin.append(s[:20])\n\nm = int(stdin.readline().rstrip())\n\nfor _ in range(m):\n    a,b = list(map(int,stdin.readline().rstrip().split()))\n    a-=1\n    b-=1\n    \n    sDict1 = findAllStrings(stringEnd[a]+stringBegin[b])\n    sDict2 = stringDicts[a]\n    sDict3 = stringDicts[b]\n    sDict={}\n    for i in range(1,K+1):\n        sDict[i] = sDict1[i]|sDict2[i]|sDict3[i]\n    stringDicts.append(sDict)\n    for i in range(1,K+1):\n        if len(sDict[i])!=2**i:\n            print(i-1)\n            break\n                \n    if len(stringBegin[a])<K and len(stringBegin[a])+len(stringBegin[b])<K:\n        stringBegin.append(stringBegin[a]+stringBegin[b])\n    elif len(stringBegin[a])<K:\n        s = stringBegin[a]+stringBegin[b]\n        stringBegin.append(s[:K])\n    else:\n        stringBegin.append(stringBegin[a])\n        \n    if len(stringEnd[b])<K and len(stringEnd[a])+len(stringEnd[b])<K:\n        stringEnd.append(stringEnd[a]+stringEnd[b])\n    elif len(stringEnd[b])<K:\n        s = stringEnd[a]+stringEnd[b]\n        stringEnd.append(s[-K:])\n    else:\n        stringEnd.append(stringEnd[b])\n\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**15\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n = I()\n    t = [[S(), [set() for _ in range(151)]] for _ in range(n)]\n    m = I()\n    q = [LI_() for _ in range(m)]\n    for c in t:\n        s = c[0]\n        l = len(s)\n        for i in range(1,min(151,l+1)):\n            for j in range(l-i+1):\n                c[1][i].add(s[j:j+i])\n\n    rr = []\n    for li,ri in q:\n        l = t[li]\n        r = t[ri]\n        c = ['',[l[1][i]|r[1][i] for i in range(151)]]\n        for i in range(1,min(150,len(l[0])+1)):\n            ls = l[0][-i:]\n            for j in range(1,min(151-i,len(r[0])+1)):\n                c[1][i+j].add(ls+r[0][:j])\n\n        c[0] = l[0] + r[0]\n        if len(c[0]) > 300:\n            c[0] = c[0][:150] + c[0][-150:]\n        t.append(c)\n        r = 0\n        for i in range(1,151):\n            tt = len(c[1][i])\n            if tt != 2**i:\n                break\n            r = i\n        rr.append(r)\n\n\n    return '\\n'.join(map(str,rr))\n\n\nprint(main())\n\n\n", "from sys import stdin, stdout\nk = 20\ndef findAllStrings(s):\n    n = len(s)\n    sdict = {}\n    for i in range(1,k+1):\n        sdict[i]=set()\n        for x in range(n-i+1):\n            sdict[i].add(s[x:x+i])\n    return sdict\nn = int(stdin.readline().rstrip())\nstrdict = []\nstringend = []\nstringbegin = []\nfor i in range(n):\n    s = stdin.readline().rstrip()\n    strdict.append(findAllStrings(s))\n    if len(s)<k:\n        stringend.append(s)\n        stringbegin.append(s)\n    else:\n        stringend.append(s[-20:])\n        stringbegin.append(s[:20])\nm = int(stdin.readline().rstrip())\nfor _ in range(m):\n    a,b = list(map(int,stdin.readline().rstrip().split()))\n    a-=1\n    b-=1\n    sdict1 = findAllStrings(stringend[a]+stringbegin[b])\n    sdict2 = strdict[a]\n    sdict3 = strdict[b]\n    sdict={}\n    for i in range(1,k+1):\n        sdict[i] = sdict1[i]|sdict2[i]|sdict3[i]\n    strdict.append(sdict)\n    for i in range(1,k+1):\n        if len(sdict[i])!=2**i:\n            print(i-1)\n            break\n    if len(stringbegin[a])<k and len(stringbegin[a])+len(stringbegin[b])<k:\n        stringbegin.append(stringbegin[a]+stringbegin[b])\n    elif len(stringbegin[a])<k:\n        s = stringbegin[a]+stringbegin[b]\n        stringbegin.append(s[:k])\n    else:\n        stringbegin.append(stringbegin[a])\n        \n    if len(stringend[b])<k and len(stringend[a])+len(stringend[b])<k:\n        stringend.append(stringend[a]+stringend[b])\n    elif len(stringend[b])<k:\n        s = stringend[a]+stringend[b]\n        stringend.append(s[-k:])\n    else:\n        stringend.append(stringend[b])\n", "from math import log\nn = int(input())\np = [bin(p)[2:] for p in range(0,512)]\ndef mset(s):\n    ss = set()\n    for k in range(0,10):\n        for pi in range(0,2 ** k):\n            cs = p[pi]\n            cs = (k - len(cs)) * \"0\" + cs\n            if cs in s:\n                ss.add(cs)\n    return ss\ndef q(s):\n    for k in range(0,10):\n        for pi in range(0,2 ** k):\n            cs = p[pi]\n            cs = (k - len(cs)) * \"0\" + cs\n            if not cs in s:\n                return k - 1\ns = [[v[:9], v[-9:], mset(v)] for v in [input() for i in range(n)]]\nfor qa, qb in [[int(v) - 1 for v in input().split()] for i in range(int(input()))]:\n    v = [s[qa][0], s[qb][1], mset(s[qa][1] + s[qb][0]) | s[qa][2] | s[qb][2]]\n    if len(v[0]) < 9:\n        v[0] = (v[0] + s[qb][0])[:9]\n    if len(v[1]) < 9:\n        v[1] = (s[qa][1] + s[qb][1])[-9:]\n    s += [v]\n    print(max(q(v[2]),0))\n\n", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\n\n\"\"\"\ncreated by shhuan at 2017/10/5 15:00\n\n\"\"\"\n\nN = int(input())\nS = ['']\nfor i in range(N):\n    S.append(input())\nM = int(input())\n\n# t0 = time.time()\n# N = 3\n# S = [\"\", \"00010110000\", \"110101110101101010101101101110100010000001101101011000010001011000010101\", \"11100101100111010\"]\n# M = 1000\n\nA = [[set() for _ in range(10)] for _ in range(M+N+1)]\nD = collections.defaultdict(int)\n\nfor i in range(1, N+1):\n    for j in range(1, 10):\n        s = S[i]\n        if j > len(s):\n            break\n        for k in range(len(s)-j+1):\n            A[i][j].add(int(s[k:k+j], 2))\n\n        if all(v in A[i][j] for v in range(2**j)):\n            D[i] = j\n\nfor i in range(M):\n    # a, b = random.randint(1, i+N), random.randint(1, i+N)\n    a, b = list(map(int, input().split()))\n    s, sa, sb = S[a] + S[b], S[a], S[b]\n    if len(s) > 30:\n        S.append(s[:10] + s[-10:])\n    else:\n        S.append(s)\n\n    ai = i+N+1\n\n    d = max(D[a], D[b]) + 1\n    for dv in range(d, 10):\n        if len(sa) + len(sb) < dv:\n            break\n        A[ai][dv] = A[a][dv] | A[b][dv] | {int(v, 2) for v in {sa[-i:] + sb[:dv-i] for i in range(1, dv+1)} if len(v) == dv}\n\n    ans = d-1\n    for dv in range(d, 10):\n        if any(v not in A[ai][dv] for v in range(2**dv)):\n            break\n        ans = dv\n    print(ans)\n    D[ai] = ans\n\n\n\n\n\n# print(time.time() - t0)\n\n\n\n\n", "from math import log\nn = int(input())\np = [bin(p)[2:] for p in range(0,512)]\ndef mset(s):\n    ss = set()\n    for k in range(0,10):\n        for pi in range(0,2 ** k):\n            cs = p[pi]\n            cs = (k - len(cs)) * \"0\" + cs\n            if cs in s:\n                ss.add(cs)\n    return ss\ndef q(s):\n    for k in range(0,10):\n        for pi in range(0,2 ** k):\n            cs = p[pi]\n            cs = (k - len(cs)) * \"0\" + cs\n            if not cs in s:\n                return k - 1\ns = [[v[:9], v[-9:], mset(v)] for v in [input() for i in range(n)]]\nfor qa, qb in [[int(v) - 1 for v in input().split()] for i in range(int(input()))]:\n    v = [s[qa][0], s[qb][1], mset(s[qa][1] + s[qb][0]) | s[qa][2] | s[qb][2]]\n    if len(v[0]) < 9:\n        v[0] = (v[0] + s[qb][0])[:9]\n    if len(v[1]) < 9:\n        v[1] = (s[qa][1] + s[qb][1])[-9:]\n    s += [v]\n    print(max(q(v[2]),0))"]