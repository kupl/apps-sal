["# cook your dish here\nimport math\nT=int(input())\nfor i in range(T):\n    a=list(map(int,input().split()))\n    n=a[0]\n    m=a[1]\n    print(m*n//math.gcd(m,n))", "def compute_gcd(x, y):\r\n\r\n   while(y):\r\n       x, y = y, x % y\r\n   return x\r\n\r\n# This function computes LCM\r\ndef compute_lcm(x, y):\r\n   lcm = (x*y)//compute_gcd(x,y)\r\n   return lcm\r\n   \r\nfor _ in range(int(input())):\r\n   a=[int(i) for i in input().split()]\r\n   print(compute_lcm(a[0],a[1]))", "# cook your dish here\ndef gcd(a,b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n\ndef lcm(a,b): \n    return (a*b) / gcd(a,b)\n    \nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    print(int(lcm(n,m)))\n", "from math import gcd\r\nt=int(input())\r\nfor _ in range (t):\r\n    n,m=map(int,input().split())\r\n    if (n%m==0 or m%n==0):\r\n        print(max(m,n))\r\n    else:\r\n        g=max(n,m)\r\n        great=g\r\n        while (True):\r\n            if (great%n==0 and great%m==0):\r\n                break\r\n            else:\r\n                great+=g\r\n        print(great)", "def gcd(a, b):\n    if min(a, b) == 0:\n        return max(a, b)\n    a_1 = max(a, b) % min(a, b)\n    return gcd(a_1, min(a, b))\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n   \nfor test in range(int(input())):\n    n, m = map(int, input().split())\n    print(lcm(n, m))", "# cook your dish here\nt = int(input())\n\ndef gcd(a,b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n  \n\ndef lcm(a,b): \n    return (a*b) // gcd(a,b) \n\nfor i in range(t):\n    n,m = map(int, input().split())\n    print(lcm(n,m))", "def compute_gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\ndef cm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\nfor _ in range(int(input())):\n    n,m=map(int,input().split())\n    print(cm(n,m))", "def gcd(a,b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n  \n# Function to return LCM of two numbers \ndef lcm(a,b): \n    return (a*b) / gcd(a,b)\n\nt=int(input())\nfor _ in range(t):\n    \n    a,b=map(int,input().split())\n    print(int(lcm(a,b)))", "from math import gcd\nfor i in range(int(input())):\n\ta,b=map(int,input().split())\n\tc=a*b\n\td=gcd(a,b)\n\tprint(c//d)", "# cook your dish here\ndef gcd(a,b): \n    if a == 0: \n        return b \n    return gcd(b % a, a)\nT=int(input())\nwhile(T):\n    l=[int(k) for k in input().split()]\n    print(int((l[0]*l[1]) / gcd(l[0],l[1])))\n    \n    \n    \n    T-=1", "from fractions import gcd\r\ntry:\r\n    def lcm(x, y):\r\n        return x * y // gcd(x, y)\r\n    tc=int(input())\r\n    for _ in range(tc):\r\n        x,y=map( int,input().split() )\r\n        print(lcm(x,y))\r\nexcept:\r\n    pass", "# cook your dish here\ndef gcd(a, b):\n    if a ==0:\n        return b\n    return gcd(b%a, a)\n\n\nt = int(input())\nwhile t:\n    n, m = input().split()\n    n = int(n)\n    m = int(m)\n    lcm = (n*m)/gcd(n,m)\n    print(int(lcm))\n    t -= 1", "# cook your dish here\n\ndef hcf(x, y):\n    if x > y:\n        s = y\n    else:\n        s = x\n    for i in range(1, s+1):\n        if((x % i == 0) and (y % i == 0)):\n            hcf = i \n    return hcf\n\nT=int(input())\nfor i in range(T):\n    n, m=list(map(int,input().split()))\n    h=hcf(n, m)\n    l=m*n\n    print(l//h)\n", "from sys import stdin\r\nfrom math import ceil, gcd\r\n\r\n# Input data\r\n#stdin = open(\"input\", \"r\")\r\n\r\n\r\ndef func():\r\n\r\n    return\r\n\r\nfor _ in range(int(stdin.readline())):\r\n    n, m = list(map(int, stdin.readline().split()))\r\n    print(n * m // gcd(n, m))\r\n", "from math import gcd\r\ndef lcm(a,b):\r\n  return int((a*b/gcd(a,b)))\r\n\r\nt=int(input())\r\nwhile (t!=0):\r\n  n,m=list(map(int,input().split()))\r\n  ans=lcm(n,m)\r\n  print(ans)\r\n  t=t-1\r\n", "from math import gcd\r\ndef lcm(a,b):\r\n  return int((a*b/gcd(a,b)))\r\n\r\nt=int(input())\r\nwhile (t!=0):\r\n  n,m=list(map(int,input().split()))\r\n  ans=lcm(n,m)\r\n  print(ans)\r\n  t=t-1\r\n", "# cook your dish here\nfrom math import gcd\ndef cakes(a,b):\n    print(int(a*b/gcd(a,b)))\n    \n    \nfor _ in range(int(input())):\n    cakes(*list(map(int,input().split())))", "def gcd(n,m):\r\n    if n==0:\r\n        return m\r\n    return gcd(m%n,n)\r\n\r\ndef lcm(n,m):\r\n    return int((n*m)/gcd(n,m))\r\n\r\nfor _ in range(int(input())):\r\n    n,m=list(map(int,input().split()))\r\n    print(lcm(n,m))\r\n", "import math\nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    val1=n*m\n    val2=math.gcd(n,m)\n    print(val1//val2)\n", "# cook your dish here\nimport sys \ndef LCM(a, b):\n    lar = max(a, b) \n    small = min(a, b) \n    i = lar \n    while(1) : \n        if (i % small == 0):\n            return i \n        i += lar   \nfor _ in range (int(input())):\n\tM,N=map(int,input().split())\n\tprint(LCM(M,N))", "def compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % y\n   return x\ndef cm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    print(cm(n,m))\n", "#cook your dish here\ndef gcd(a,b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n    \ndef lcm(a,b): \n    return (a*b) // gcd(a,b) \n    \nfor _ in range(int(input())):\n    m, n = map(int,input().split())\n    print(lcm(m,n))", "# cook your dish here\nimport sys \ndef findLCM(a, b):\n    lar = max(a, b) \n    small = min(a, b) \n    i = lar \n    while(1) : \n        if (i % small == 0): \n            return i \n        i += lar \n        \nfor _ in range (int(input())):\n\tM,N=map(int,input().split())\n\tprint(findLCM(M,N))", "#cook your dish here\ndef gcd(a,b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n    \ndef lcm(a,b): \n    return (a*b) // gcd(a,b) \n    \nfor _ in range(int(input())):\n    m, n = map(int,input().split())\n    print(lcm(m,n))"]