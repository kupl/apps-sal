["#[Runtime: 452 ms, faster than 97.27%] Hash\n#O(MN)\n#1. traverse all cells and mark server as (x, y)\n#2. put each server (x, y) into serveral bucket named x1, x2, .., and y1, y2, ..\n# e.g. each xbucket[x1] maintains the number of servers on line x1\n#3. enumerate all server (x', y'), and see if there is at least 2 server on xbucket[x'] or ybucket[y'] \nclass Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        xbucket, ybucket, server = [0] * len(grid), [0] * len(grid[0]), []\n        for x, row in enumerate(grid):\n            for y, cell in enumerate(row):\n                if cell:\n                    server.append((x, y))\n                    xbucket[x] += 1\n                    ybucket[y] += 1\n        return sum(xbucket[x] > 1 or ybucket[y] > 1 for x, y in server)", "class Solution:\n    def get_index_ones(self, row_list, current_columns, columns_to_check):\n        counter = 0\n        copy_list = list(current_columns)\n        for i in copy_list:\n            if row_list[i] == 1:\n                if columns_to_check.get(i) == None:\n                    columns_to_check[i] = 1\n                else:\n                    columns_to_check[i] = columns_to_check[i] + 1\n                #current_columns.remove(i)\n            \n    def countServers(self, grid: List[List[int]]) -> int:\n        row_dim = len(grid)\n        column_dim = len(grid[0])\n        result = 0\n        map_single =[]\n        current_columns = [i for i in range(column_dim)]\n        columns_to_check ={}\n        for x in range(row_dim):\n            if 1 in grid[x]:\n                difference = column_dim - len([i for i in grid[x] if i == 0])\n                #more than 1\n                if  difference > 1:\n                    self.get_index_ones(grid[x], current_columns, columns_to_check)\n                    result += difference\n                else:\n                    self.get_index_ones(grid[x], current_columns, columns_to_check)\n                    map_single.append(grid[x])\n        for row in map_single:\n            for y, repeat in columns_to_check.items():\n                if row[y] == 1 and repeat > 1:\n                    result += 1\n        return result", "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        d1 = defaultdict(int)\n        d2 = defaultdict(int)\n        \n        for i in range(len(grid)):\n            \n            for j in range(len(grid[i])):\n                \n                if grid[i][j] == 1:\n                    d1[i]+=1\n                    d2[j]+=1\n                    \n        c = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == 1 and (d1[i]>1 or d2[j]>1):\n                    c+=1\n                    \n        return c\n                \n                    \n", "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        for i,row in enumerate(grid):\n            if row.count(1)>1:\n                for j,val in enumerate(row):\n                    if val==1:\n                        grid[i][j]=2\n        for j,col in enumerate(zip(*grid)):\n            if col.count(1)+col.count(2)>1:\n                for i,val in enumerate(col):\n                    if val==1:\n                        grid[i][j]=2\n        return sum(1 for row in grid for val in row if val==2)\n", "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        if not grid or not grid[0]:\n            return 0\n        \n        resset = set()\n        \n        for ri, row in enumerate(grid):\n            tmp = [(ri, ci) for ci, cell in enumerate(row) if cell]\n            \n            if len(tmp) >= 2:\n                resset.update(tmp)\n        \n        for ci, col in enumerate(zip(*grid)):\n            # col = (row[ci] for row in grid)\n            tmp = [(ri, ci) for ri, cell in enumerate(col) if cell]\n\n            if len(tmp) >= 2:\n                resset.update(tmp)\n        \n        return len(resset)\n", "class Solution:\n    def get_index_ones(self, row_list, current_columns, columns_to_check):\n        counter = 0\n        for i in current_columns:\n            if row_list[i] == 1:\n                if columns_to_check.get(i) == None:\n                    columns_to_check[i] = 1\n                else:\n                    columns_to_check[i] = columns_to_check[i] + 1\n                #current_columns.remove(i)\n            \n    def countServers(self, grid: List[List[int]]) -> int:\n        row_dim = len(grid)\n        column_dim = len(grid[0])\n        result = 0\n        map_single =[]\n        current_columns = [i for i in range(column_dim)]\n        columns_to_check ={}\n        for x in range(row_dim):\n            if 1 in grid[x]:\n                difference = column_dim - len([i for i in grid[x] if i == 0])\n                #more than 1\n                if  difference > 1:\n                    self.get_index_ones(grid[x], current_columns, columns_to_check)\n                    result += difference\n                else:\n                    self.get_index_ones(grid[x], current_columns, columns_to_check)\n                    map_single.append(grid[x])\n        for row in map_single:\n            for y, repeat in columns_to_check.items():\n                if row[y] == 1 and repeat > 1:\n                    result += 1\n        return result", "from collections import deque,defaultdict\nclass Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        row= defaultdict(lambda:[0 ,(0,0) ] )\n        col= defaultdict(lambda:0)\n        \n        for r in range(len(grid)):\n            for c in range(len(grid[r])):\n                if grid[r][c] == 1:\n                    row[ r  ][0] +=1\n                    col[ c  ] +=1\n                    row[ r  ][1] = (r,c)\n                \n\n        \n        servers = 0\n        \n\n        for i in row:\n            \n            if row[i][0]>1:\n                servers+= row[i][0]\n                \n            else:\n                server= row[i][1][1]\n                if col[server] > 1:\n                    servers += 1\n                    \n        return servers\n                \n                \n", "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        row_count = [0 for i in range(len(grid))]\n        col_count = [0 for i in range(len(grid[0]))]\n        \n        result = 0\n        for round in range(1, 3):\n            for row in range(len(grid)):\n                for col in range(len(grid[row])):\n                    cell = grid[row][col]\n                    if cell == 1:\n                        if round == 1:\n                            row_count[row] += 1\n                            col_count[col] += 1\n                        elif row_count[row] > 1 or col_count[col] > 1:\n                            result += 1\n        return result", "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        m,n = len(grid), len(grid[0])\n        \n        rows = [0]*m\n        cols = [0]*n        \n        for r, row in enumerate(grid):\n            for c, server in enumerate(row):\n                if (server==1):\n                    rows[r]+=1\n                    cols[c]+=1\n        \n        ans = 0\n        for r, row in enumerate(grid):\n            for c, server in enumerate(row):\n                if (server==1 and (rows[r]>1 or cols[c]>1)):\n                    ans += 1\n                    \n        return ans\n", "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        rows = []\n        cols = []\n        servers = []\n        conn = 0\n        i = 0\n        while i < len(grid):\n            j = 0\n            while j < len(grid[i]):\n                if grid[i][j] == 1:\n                    rows.append(i)\n                    cols.append(j)\n                    servers.append((i,j))\n                j += 1\n            i += 1\n        for server in servers:\n            if rows.count(server[0]) > 1 or cols.count(server[1]) > 1:\n                conn += 1\n        return conn"]