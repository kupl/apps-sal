["# cook your dish here\nt=int(input())\nfor _ in range(t):\n st=input()\n s=set(st)\n a=[]\n f1=f2=0\n for i in s:\n  a.append(st.count(i))\n a.sort()\n if len(a)>=3:\n  for i in range(2,len(a)):\n   if a[i]!=a[i-1]+a[i-2]:\n    f1=1\n    break\n  x=a[0]\n  a[0]=a[1]\n  a[1]=x\n  for i in range(2,len(a)):\n   if a[i]!=a[i-1]+a[i-2]:\n    f2=1\n    break\n  if f1==1 and f2==1:\n   print(\"Not\")\n  else:\n   print(\"Dynamic\")\n else:\n  print(\"Dynamic\")", "def check_fib(lis):\n is_fib = True\n \n for i in range(2, len(lis)):\n  if lis[i] != lis[i-1] + lis[i-2]:\n   is_fib = False\n   break\n  \n if is_fib: return True\n \n lis[0], lis[1] = lis[1], lis[0]\n \n for i in range(2, len(lis)):\n  if lis[i] != lis[i-1] + lis[i-2]:\n   return False\n \n return True\n\nt = int(input())\n\nfor _ in range(t):\n s = input()\n \n freq_list = [s.count(x) for x in set(s)]\n \n if len(freq_list) < 3:\n  print(\"Dynamic\")\n  continue\n \n freq_list.sort()\n \n if check_fib(freq_list):\n  print(\"Dynamic\")\n else:\n  print(\"Not\")\n \n \n \n \n", "# cook your dish here\nfrom collections import Counter\n\n\ndef fib_str(s):\n count = Counter(s)\n if len(count) < 3:\n  return True\n [a, b, c] = count.most_common(3)\n if a[1] == b[1] + c[1]:\n  return True\n return False\n\ndef __starting_point():\n test = int(input())\n\n for _ in range(test):\n  s = input()\n\n  if fib_str(s):\n   print(\"Dynamic\")\n  else:\n   print(\"Not\")\n\n__starting_point()", "# cook your dish here\n# cook your dish here\nfrom collections import Counter\n\n\ndef fib_str(s):\n counts = Counter(s)\n if len(counts) < 3:\n  return True\n [x, y, z] = counts.most_common(3)\n if x[1] == y[1] + z[1]:\n  return True\n return False\n\ndef __starting_point():\n test = int(input())\n\n for _ in range(test):\n  s = input()\n\n  if fib_str(s):\n   print(\"Dynamic\")\n  else:\n   print(\"Not\")\n__starting_point()", "# cook your dish here\nfrom collections import Counter\n\n\ndef fib_str(s):\n counts = Counter(s)\n if len(counts) < 3:\n  return True\n [x, y, z] = counts.most_common(3)\n if x[1] == y[1] + z[1]:\n  return True\n return False\n\ndef __starting_point():\n test = int(input())\n\n for _ in range(test):\n  s = input()\n\n  if fib_str(s):\n   print(\"Dynamic\")\n  else:\n   print(\"Not\")\n__starting_point()", "# cook your dish here\nfrom collections import Counter\n\n\ndef fib_str(s):\n counts = Counter(s)\n if len(counts) < 3:\n  return True\n [x, y, z] = counts.most_common(3)\n if x[1] == y[1] + z[1]:\n  return True\n return False\n\ndef __starting_point():\n test = int(input())\n\n for _ in range(test):\n  s = input()\n\n  if fib_str(s):\n   print(\"Dynamic\")\n  else:\n   print(\"Not\")\n__starting_point()", "# cook your dish here\nfrom collections import Counter\n\n\ndef fib_str(s):\n counts = Counter(s)\n if len(counts) < 3:\n  return True\n [x, y, z] = counts.most_common(3)\n if x[1] == y[1] + z[1]:\n  return True\n return False\n\ndef __starting_point():\n test = int(input())\n\n for _ in range(test):\n  s = input()\n\n  if fib_str(s):\n   print(\"Dynamic\")\n  else:\n   print(\"Not\")\n__starting_point()", "# cook your dish here\nfrom collections import Counter\n\n\ndef fib_str(s):\n counts = Counter(s)\n if len(counts) < 3:\n  return True\n [x, y, z] = counts.most_common(3)\n if x[1] == y[1] + z[1]:\n  return True\n return False\n\ndef __starting_point():\n test_n = int(input())\n\n for _ in range(test_n):\n  s = input()\n\n  if fib_str(s):\n   print(\"Dynamic\")\n  else:\n   print(\"Not\")\n__starting_point()", "from collections import Counter\n\n\ndef fib_str(s):\n counts = Counter(s)\n if len(counts) < 3:\n  return True\n [x, y, z] = counts.most_common(3)\n if x[1] == y[1] + z[1]:\n  return True\n return False\n\ndef __starting_point():\n test_n = int(input())\n\n for _ in range(test_n):\n  s = input()\n\n  if fib_str(s):\n   print(\"Dynamic\")\n  else:\n   print(\"Not\")\n\n__starting_point()", "from itertools import permutations\nfor _ in range(int(input())):\n st=input()\n s=set(st)\n l=[]\n for i in set(s):\n  l.append(st.count(i))\n l.sort()\n if len(l)<3 or l[-1]==l[-2]+l[-3]:\n  print(\"Dynamic\")\n else:\n  print(\"Not\")", "n = int(input())\nfor i in range(n):\n s = input()\n res = []\n for i in set(s):\n  res.append(s.count(i))\n \n res.sort()\n \n if len(res) < 3 or res[-1] == res[-2] + res[-3]:\n  print(\"Dynamic\")\n \n else:\n  print(\"Not\")\n", "n = int(input())\nfor i in range(n):\n s = input()\n res = []\n for i in set(s):\n  res.append(s.count(i))\n \n res.sort()\n \n if len(res) < 3 or res[-1] == res[-2] + res[-3]:\n  print(\"Dynamic\")\n \n else:\n  print(\"Not\")\n", "# cook your dish here\nt=int(input())\nwhile(t):\n t-=1\n s=input()\n l=[]\n l1=[]\n lik=2\n for i in s:\n  if(i not in l ):\n   l.append(i)\n for i in l:\n  l1.append(s.count(i))\n if(len(l)<3):\n  lik=0\n if(lik==2):\n  l1.sort()\n  if l1[-2]+l1[-3] != l1[-1]:\n   lik=1\n if(lik==0 or lik==2):\n  print(\"Dynamic\")\n if(lik==1):\n  print(\"Not\")\n", "t=int(input())\nfor i in range(t):\n s=input()\n lst=[]\n for i in set(s):\n  lst.append(s.count(i))\n lst.sort()\n if len(lst)<3 or lst[-1]==lst[-2]+lst[-3]:\n  print(\"Dynamic\")\n else:\n  print(\"Not\")\n", "t = int(input())\nfor i in range(t):\n s = input()\n lst = []\n for i in set(s):\n  lst.append(s.count(i))\n lst.sort()\n \n if len(lst)<3 or lst[-1]==lst[-2]+lst[-3]: \n  print(\"Dynamic\")\n else:\n  print(\"Not\")", "t = int(input())\nfor i in range(t):\n s = input()\n lst = []\n for i in set(s):\n  lst.append(s.count(i))\n lst.sort()\n if len(lst)<3 or lst[-1]==lst[-2]+lst[-3]: \n  print(\"Dynamic\")\n else:\n  print(\"Not\")\n  \n \n \n \n", "for _ in range (int(input())):\n s=input()\n t=[]\n for i in set (s):\n  t.append(s.count(i))\n t=sorted(t)\n if len(t)<3 or t[-1]==t[-2]+t[-3]:\n  print('Dynamic')\n else:\n  print('Not')\n# cook your dish here\n", "# cook your dish here\n# cook your dish here\nfrom collections import Counter\nT=int(input())\nfor _ in range(T):\n n = input()\n c = 0\n r = Counter(n)\n L = []\n for j in r.keys():\n  L.append(r[j])\n L.sort()\n if len(L)>=4 and L[1]+L[2]!=L[3]:\n  temp=L[0]\n  L[0]=L[1]\n  L[1]=temp\n fl=True\n if len(L)>=3:\n  for i in range(len(L)-2):\n   if L[i+2]!=L[i]+L[i+1]:\n    fl=False\n if fl:\n  print('Dynamic')\n else:\n  print('Not')", "# cook your dish here\n# cook your dish here\nfrom collections import Counter\nT=int(input())\nfor _ in range(T):\n n = input()\n c = 0\n r = Counter(n)\n L = []\n for j in r.keys():\n  L.append(r[j])\n L.sort()\n if len(L)>=4 and L[1]+L[2]!=L[3]:\n  temp=L[0]\n  L[0]=L[1]\n  L[1]=temp\n fl=True\n if len(L)>=3:\n  for i in range(len(L)-2):\n   if L[i+2]!=L[i]+L[i+1]:\n    fl=False\n if fl:\n  print('Dynamic')\n else:\n  print('Not')", "for _ in range (int(input())):\n s=input()\n l=[]\n for i in set (s):\n  l.append(s.count(i))\n l=sorted(l)\n if len(l)<3 or l[-1]==l[-2]+l[-3]:\n  print('Dynamic')\n else:\n  print('Not')\n", "for _ in range(int(input())):\n s=input()\n l=[]\n for i in set(s):\n  l.append(s.count(i))\n l=sorted(l)\n if len(l)<3 or l[-1]==l[-2]+l[-3]:\n  print('Dynamic')\n else:\n  print('Not')", "for _ in range(int(input())):\n s=input()\n l=[]\n for i in set(s):\n  l.append(s.count(i))\n l=sorted(l)\n if len(l)<3 or l[-1]==l[-2]+l[-3]:\n  print('Dynamic')\n else:\n  print('Not')"]