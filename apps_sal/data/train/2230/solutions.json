["n = int(input())\n\np = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\ns = []\nfor i in range(n):\n    s.append([p[i], a[i], b[i]])\n\ns = sorted(s)\n\nm = int(input())\nc = [int(i) for i in input().split()]\n\nidx = [0]*4\n\nans = []\n\nfor i in range(m):\n    ci = c[i]\n    while idx[ci] < n:\n        if s[idx[ci]][1] == ci or s[idx[ci]][2] == ci:\n            s[idx[ci]][1] = 0\n            s[idx[ci]][2] = 0\n            ans.append(s[idx[ci]][0])\n            break\n        idx[ci]+=1\n    if idx[ci] == n:\n        ans.append(-1)\n\nprint(*ans)\n", "n = int(input())\np = list(zip(map(int,input().split()),map(int,input().split()),map(int,input().split())))\np.sort()\npointer = [-1,0,0,0]\ninput()\nfor cj in map(int,input().split()):\n    while pointer[cj] < n and (p[pointer[cj]] == None or cj not in p[pointer[cj]][1:]):\n        pointer[cj]+= 1\n    if pointer[cj] == n:\n        print(-1, end=' ')\n    else:\n        print(p[pointer[cj]][0], end=' ')\n        p[pointer[cj]] = None", "import sys\n\ndef solve():\n    n = int(sys.stdin.readline())\n    p = [int(pi) for pi in sys.stdin.readline().split()]\n    a = [int(ai) - 1 for ai in sys.stdin.readline().split()]\n    b = [int(bi) - 1 for bi in sys.stdin.readline().split()]\n    m = int(sys.stdin.readline())\n    c = [int(ci) - 1 for ci in sys.stdin.readline().split()]\n\n    p_col = [[] for i in range(3)]\n\n    for i in range(n):\n        p_col[a[i]].append(p[i])\n\n        if a[i] != b[i]:\n            p_col[b[i]].append(p[i])\n\n    for i in range(3):\n        p_col[i].sort()\n\n    used = set()\n\n    l = [0]*3\n    ans = [-1]*m\n\n    for k, cj in enumerate(c):\n        for i in range(l[cj], len(p_col[cj])):\n            if p_col[cj][i] not in used:\n                ans[k] = p_col[cj][i]\n                used.add(p_col[cj][i])\n                l[cj] = i + 1\n                break\n\n    print(*ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "n = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nm = int(input())\nc = list(map(int, input().split()))\n\nt = [[p[i], a[i], b[i], 1] for i in range(n)]\nt = sorted(t, key = lambda x: x[0])\n\np = [0,0,0,0]\nans = []\nfor i in range(m):\n    clr = c[i]\n    while p[clr] < n and (t[p[clr]][3] == 0 or (t[p[clr]][1] != clr and t[p[clr]][2] != clr)):\n        p[clr] += 1\n    if p[clr] == n:\n        ans.append(-1)\n    else:\n        t[p[clr]][3] = 0\n        ans.append(t[p[clr]][0])\nprint(' '.join([str(a) for a in ans]))", "def main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    m = int(input())\n    r, g, bl = [], [], []\n    used = set()\n    for i in range(n):\n        c1, c2 = a[i], b[i]\n        if c1 == 1 or c2 == 1:\n            r.append([p[i], i])\n        if c1 == 2 or c2 == 2:\n            g.append([p[i], i])\n        if c1 == 3 or c2 == 3:\n            bl.append([p[i], i])\n    r.sort(reverse=True)\n    g.sort(reverse=True)\n    bl.sort(reverse=True)\n    answer = []\n    for i in list(map(int, input().split())):\n        if i == 1:\n            try:\n                while True:\n                    pop = r.pop()[0]\n                    if pop not in used:\n                        answer.append(str(pop))\n                        used.add(pop)\n                        break\n            except:\n                answer.append('-1')\n        elif i == 2:\n            try:\n                while True:\n                    pop = g.pop()[0]\n                    if pop not in used:\n                        answer.append(str(pop))\n                        used.add(pop)\n                        break\n            except:\n                answer.append('-1')\n        elif i == 3:\n            try:\n                while True:\n                    pop = bl.pop()[0]\n                    if pop not in used:\n                        answer.append(str(pop))\n                        used.add(pop)\n                        break\n            except:\n                answer.append('-1')\n    print(' '.join(answer))\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\np = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\nused = [False] * n\n\nma = [[], [], []]\nmb = [[], [], []]\n\nfor i in range(n):\n    ma[a[i] - 1].append(i)\n    mb[b[i] - 1].append(i)\n\nfor i in range(3):\n    ma[i].sort(key = lambda x: -p[x])\n    mb[i].sort(key = lambda x: -p[x])\n\nm = int(input())\nc = list(map(int, input().split(' ')))\nans = [0] * m\nfor i in range(m):\n    x = c[i] - 1\n\n    def tryone(a):\n        while len(a[x]) > 0 and used[a[x][len(a[x]) - 1]]:\n            a[x].pop()\n        if len(a[x]) == 0:\n            return -1\n        else:\n            return a[x][len(a[x]) - 1]\n\n    c1 = tryone(ma)\n    c2 = tryone(mb)\n\n    if c1 == -1 and c2 == -1:\n        ans[i] = -1\n    elif c1 == -1 or (c2 != -1 and p[c2] < p[c1]):\n        used[c2] = True\n        ans[i] = p[c2]\n    else:\n        used[c1] = True\n        ans[i] = p[c1]\n\nprint(' '.join(list(map(str, ans))))\n", "n=int(input())\np=list(map(int,input().split()))\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nf=[0]*n\nm=int(input())\nc=list(map(int,input().split()))\nl=[[],[],[],[]]\nfor i in range(n):\n    l[a[i]]+=[[p[i],i]]\n    if b[i]!=a[i]:\n        l[b[i]]+=[[p[i],i]]\nfor i in range(1,4):\n    l[i]=sorted(l[i])\ni=[0,0,0,0]\nans=[]\nfor x in c:\n    while i[x]<len(l[x]) and f[l[x][i[x]][1]]:\n        i[x]+=1\n    if i[x]>=len(l[x]): ans+=[-1]\n    else: ans+=[l[x][i[x]][0]]; f[l[x][i[x]][1]]=1\nprint(*ans)", "#!/usr/bin/env python3\nfrom sys import stdin,stdout\n\ndef readint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\nn = int(input())\np = list(readint())\na = list(readint())\nb = list(readint())\n\nm = int(input())\nc = list(readint())\n\ncc = [[] for i in range(3)]\nfor i in range(n):\n    cc[a[i]-1].append(i)\n    cc[b[i]-1].append(i)\n\nfor i in range(3):\n    cc[i].sort(key=lambda e: p[e])\n\nans = []\nii = [0,0,0]\nfor i in range(m):\n    ci = c[i]-1\n    while True:\n        if ii[ci] >= len(cc[ci]):\n            break\n        if p[cc[ci][ii[ci]]] == -1:\n            ii[ci] += 1\n        else:\n            break\n\n    if ii[ci] >= len(cc[ci]):\n        ans.append(-1)\n    else:\n        ans.append(p[cc[ci][ii[ci]]])\n        p[cc[ci][ii[ci]]] = -1\n\nprint(*ans)\n\n\n", "n = int(input())\np = list(map(int, input().split()));\na = list(map(int, input().split()));\nb = list(map(int, input().split()));\n\ntog = [(p[i],a[i],b[i]) for i in range(0,n)];\n\n\ntog.sort();\n\narr = [None,[],[],[]]\n\nus = [None,[],[],[]]\n\nlink = []\n\nfor i in range(0,n):\n    if (tog[i][1] == tog[i][2]) :\n        arr[tog[i][1]].append(i)\n        us[tog[i][1]].append(True)\n\n        link.append([(tog[i][1], len(arr[tog[i][1]])-1)])\n    else:\n        arr[tog[i][1]].append(i)\n        us[tog[i][1]].append(True)\n        arr[tog[i][2]].append(i)\n        us[tog[i][2]].append(True)\n\n        link.append([(tog[i][1], len(arr[tog[i][1]])-1),(tog[i][2], len(arr[tog[i][2]])-1)])\n\n\n#print(\"tog arr us link\")\n##print( tog)\n#print( arr)\n#print( us)\n#print(link)\n\nptr = [None, 0, 0, 0];\n\nm = int(input())\n\nbuy = list(map(int, input().split()));\n\nout = []\nfor c in buy:\n    while (ptr[c] < len(us[c]) and not us[c][ptr[c]]):\n        ptr[c]+=1\n\n    if (ptr[c] >= len(arr[c])):\n        out.append(-1);\n    else:\n        v = arr[c][ptr[c]]\n        us[c][ptr[c]] = False\n        out.append(tog[v][0])\n        for (cc, pp) in link[v]:\n            us[cc][pp] = False\n\n    #print(\"out:\", out[-1]);\n    #print(\"ptr:\", ptr)\n    #print(\"us:\", us)\n\nprint(\" \".join(map(str, out)))\n        \n        \n\n\n\n\n", "n = int(input())\np = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nm = int(input())\npos = list(map(int,input().split()))\n\nfut = list(zip(p,a,b))\nfut=list(fut)\ndef sravni(elem):\n    return elem[0]\nfut.sort(key=sravni)\n\nvz = []\nfor i in range(n):\n    vz.append(False)\n\nlastc = [0,0,0]\nresult = \"\"\nfor poset in pos:\n    ctoim=-1\n    for i in range(lastc[poset-1],n):\n        if vz[i] == False:\n            if fut[i][1] == poset or fut[i][2] ==poset:\n                vz[i] = True\n                ctoim = fut[i][0]\n                lastc[poset - 1] = i+1\n                break\n    if ctoim == -1:\n        lastc[poset-1] = n+1\n    result+=str(ctoim)+\" \"\nprint(result)\n\n", "n = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nm = int(input())\nqueue = list(map(int, input().split()))\npointers = [[0 for i in range(3)] for j in range(3)]\nt = [[list() for i in range(3)] for j in range(3)]\nfor i in range(n):\n    t[a[i] - 1][b[i] - 1].append(p[i])\nfor i in range(3):\n    for j in range(3):\n        t[i][j].sort()\nfor i in range(m):\n    m1 = 10 ** 10 \n    m2 = 10 ** 10\n    for j in range(3):\n        if len(t[queue[i] - 1][j]) and pointers[queue[i] - 1][j] < len(t[queue[i] - 1][j]) and \\\n           t[queue[i] - 1][j][pointers[queue[i] - 1][j]] < m1:\n            m1 = t[queue[i] - 1][j][pointers[queue[i] - 1][j]]\n            pos_j = j\n    for j in range(3):\n        if len(t[j][queue[i] - 1]) and pointers[j][queue[i] - 1] < len(t[j][queue[i] - 1]) and \\\n           t[j][queue[i] - 1][pointers[j][queue[i] - 1]] < m2:\n            m2 = t[j][queue[i] - 1][pointers[j][queue[i] - 1]]\n            pos_i = j\n    if m1 == 10 ** 10 and m2 == 10 ** 10:\n        print(-1, end = ' ')\n    elif m1 < m2:\n        pointers[queue[i] - 1][pos_j] += 1\n        print(m1, end = ' ')\n    else:\n        pointers[pos_i][queue[i] - 1] += 1\n        print(m2, end = ' ')\n", "n = int (input ())\n\np = [int (i) for i in input().split()]\n\na = [int (i) for i in input().split()]\n\nb = [int (i) for i in input().split()]\n\n\nm = int (input())\nc = [int (i) for i in input().split()]\n\nc1 = {}\nc2 = {}\nc3 = {}\n\nfor i in range (n):\n\tif a[i] == 1 or b[i] == 1:\n\t\tc1[p[i]] = 1\n\tif a[i] == 2 or b[i] == 2:\n\t\tc2 [p[i]] = 1\n\tif a[i] == 3 or b[i] == 3:\n\t\tc3 [p[i]] = 1\n\nk1 = sorted (c1)\nk2 = sorted (c2)\nk3 = sorted (c3)\n\nk1s = 0\nk2s = 0\nk3s = 0\n\nfor i in range (m):\n\tch = 0\n\tif c[i] == 1:\n\t\tfor j in range (k1s, len (k1)):\n\t\t\tif c1 [k1[j]] != 0:\n\t\t\t\tc1 [k1[j]] = 0\n\t\t\t\tc2 [k1[j]] = 0\n\t\t\t\tc3 [k1[j]] = 0\n\t\t\t\tch = 1\n\t\t\t\tk1s = j + 1\n\t\t\t\tprint (k1[j], end = ' ')\n\t\t\t\tbreak\n\telse:\n\t\tif c[i] == 2:\n\t\t\tfor j in range (k2s, len (k2)):\n\t\t\t\tif c2 [k2[j]] != 0:\n\t\t\t\t\tc1 [k2[j]] = 0\n\t\t\t\t\tc2 [k2[j]] = 0\n\t\t\t\t\tc3 [k2[j]] = 0\n\t\t\t\t\tch = 1\n\t\t\t\t\tk2s = j + 1\n\t\t\t\t\tprint (k2[j], end = ' ')\n\t\t\t\t\tbreak\n\t\telse:\n\t\t\tif c[i] == 3:\n\t\t\t\tfor j in range (k3s, len (k3)):\n\t\t\t\t\tif c3 [k3[j]] != 0:\n\t\t\t\t\t\tc1 [k3[j]] = 0\n\t\t\t\t\t\tc2 [k3[j]] = 0\n\t\t\t\t\t\tc3 [k3[j]] = 0\n\t\t\t\t\t\tch = 1\n\t\t\t\t\t\tk3s = j + 1\t\n\t\t\t\t\t\tprint (k3[j], end = ' ')\n\t\t\t\t\t\tbreak\n\tif ch == 0:\n\t\tprint (-1, end = ' ')", "n = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nm = int(input())\nc = list(map(int, input().split()))\n\nl = [list() for i in range(1, 4)]\n\nfor i in range(n):\n    l[a[i]-1].append((p[i],i))\n    if a[i] != b[i]:\n        l[b[i]-1].append((p[i],i))\n\nimport operator\nl = list(map(lambda l_ : sorted(l_, key = operator.itemgetter(0)), l))\ninvalid = set()\nys = [0] * 4\n\n\nfor i in range(m):\n    y = ys[c[i] -1]\n    while (y < len(l[c[i] - 1])) and (l[c[i] - 1][y][1] in invalid):\n        y += 1\n    if y == len(l[c[i] - 1]):\n        print(-1, end=' ')\n    else:\n        print(l[c[i] - 1][y][0], end=' ')\n        invalid.add(l[c[i] - 1][y][1])\n    ys[c[i] - 1] = y\n", "import sys\nfrom collections import deque\nread=lambda:sys.stdin.readline().rstrip()\nreadi=lambda:int(sys.stdin.readline())\nwriteln=lambda x:sys.stdout.write(str(x)+\"\\n\")\nwrite=lambda x:sys.stdout.write(x)\n\nN = readi()\nps = list(map(int, read().split()))\ncas = list(map(int, read().split()))\ncbs = list(map(int, read().split()))\nM = readi()\nbs = list(map(int, read().split()))\nresults = []\nts = [[] for _ in range(7)]\ntcnt = [0 for _ in range(7)]\nfor i in range(N):\n    price,a,b=ps[i],cas[i],cbs[i]\n    color = 2**(a-1) | 2**(b-1)\n    ts[color].append(price)\n    tcnt[color] += 1\n\ntss = []\nfor i in range(7):\n    if tcnt[i]:\n        tss.append(deque(list(sorted(ts[i]))))\n    else:\n        tss.append([])\n\nspots = [[1,3,5],[3,2,6],[5,6,4]]\nfor i in range(M):\n    s1,s2,s3 = spots[bs[i]-1]\n    \n    c1,c2,c3=tcnt[s1],tcnt[s2],tcnt[s3]\n    alts = []\n    if c1:\n        alts.append(s1)\n    if c2:\n        alts.append(s2)\n    if c3:\n        alts.append(s3)\n    if not alts:\n        results.append(\"-1\")\n        continue\n    \n    vals = []\n    for alt in alts:\n        vals.append((tss[alt][0], alt))\n    vals.sort()\n    price,cidx = vals[0]\n    results.append(str(price))\n    tcnt[cidx] -= 1\n    tss[cidx].popleft()\nwriteln(\" \".join(results))  \n", "input()\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = list(map(int, input().split()))\n\nd = [[[] for _ in range(3)] for _ in range(3)]\nfor pi, ai, bi in zip(p, a, b):\n    d[ai - 1][bi - 1].append(pi)\n\nfor row in d:\n    for l in row:\n        l.sort(reverse=True)\n    \n\nr = []\nfor ci in c:\n    pm = 1000000001\n    im = -1\n    for j, l in enumerate(d[ci - 1]):\n        if len(l) > 0 and l[-1] < pm:\n            pm = l[-1]\n            im = ci - 1\n            jm = j\n    for i, ll in enumerate(d):\n        l = ll[ci - 1]\n        if len(l) > 0 and l[-1] < pm:\n            pm = l[-1]\n            im = i\n            jm = ci - 1\n    r.append(d[im][jm].pop() if im >= 0 else -1)\nprint(*r, sep=' ')\n", "import collections\ndef mp():  return map(int,input().split())\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\ndef listring(l): return ' '.join([str(x) for x in l])\ndef ptlist(l): print(' '.join([str(x) for x in l]))\n\nn = it()\np = lt()\na = lt()\nb = lt()\nm = it()\nc = lt()\n\nshirt = list(zip(p,a,b))\nshirt.sort()\npointer = [-1,0,0,0]\nl = []\nfor i in range(m):\n    cl = c[i]\n    while pointer[cl] < n and (shirt[pointer[cl]] == None or cl not in shirt[pointer[cl]][1:]):\n        pointer[cl] += 1\n    if pointer[cl] == n:\n        l.append(-1)\n    else:\n        l.append(shirt[pointer[cl]][0])\n        shirt[pointer[cl]] = None\nptlist(l)", "input()\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = list(map(int, input().split()))\n\nd = [[[] for _ in range(3)] for _ in range(3)]\nfor pi, ai, bi in zip(p, a, b):\n    d[ai - 1][bi - 1].append(pi)\n\nfor row in d:\n    for l in row:\n        l.sort(reverse=True)\n    \n\nr = []\nfor ci in c:\n    pm = 1000000001\n    im = -1\n    for j, l in enumerate(d[ci - 1]):\n        if len(l) > 0 and l[-1] < pm:\n            pm = l[-1]\n            im = ci - 1\n            jm = j\n    for i, ll in ((i, ll) for i, ll in enumerate(d) if i != ci - 1):\n        l = ll[ci - 1]\n        if len(l) > 0 and l[-1] < pm:\n            pm = l[-1]\n            im = i\n            jm = ci - 1\n    r.append(d[im][jm].pop() if im >= 0 else -1)\nprint(*r, sep=' ')\n", "import operator\n\nn = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = map(int, input().split())\n\nt = sorted(zip(p, a, b), key=operator.itemgetter(0))\nt = [list(x) for x in t]\np = [None, 0, 0, 0]\n\nr = []\nfor ci in c:\n    i = p[ci]\n    while i < n and ci not in (t[i][1], t[i][2]):\n        i += 1\n    p[ci] = i\n    if i < n:\n        t[i][1], t[i][2] = 0, 0\n    r.append(t[i][0] if i < n else - 1)\nprint(*r, sep=' ')\n", "import itertools\n\ndef minl(l):\n    return l[-1] if len(l) > 0 else 10**9 + 1\n\ninput()\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = list(map(int, input().split()))\n\nd = [[[] for _ in range(3)] for _ in range(3)]\nfor pi, ai, bi in zip(p, a, b):\n    d[ai - 1][bi - 1].append(pi)\n\nfor row in d:\n    for l in row:\n        l.sort(reverse=True)\n    \nr = []\nfor ci in c:\n    ci -= 1\n    row = ((ci, j) for j in range(3))\n    col = ((i, ci) for i in range(3))\n    i, j = min(itertools.chain(row, col),\n               key=lambda p: minl(d[p[0]][p[1]]))\n    l = d[i][j]\n    r.append(l.pop() if len(l) > 0 else -1)\nprint(*r, sep=' ')\n", "import operator\n\nn = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = map(int, input().split())\n\nt = sorted(zip(p, a, b), key=operator.itemgetter(0))\nt = [list(x) for x in t]\np = [None, 0, 0, 0]\n\nr = []\nfor ci in c:\n    i = p[ci]\n    while i < n and ci not in (t[i][1], t[i][2]):\n        i += 1\n    if i == n:\n        r.append(-1)\n    else:\n        r.append(t[i][0])\n        t[i][1], t[i][2] = 0, 0\n        i += 1\n    p[ci] = i\nprint(*r, sep=' ')\n", "import operator\n\nn = int(input())\np = map(int, input().split())\na = map(int, input().split())\nb = map(int, input().split())\ninput()\nc = map(int, input().split())\n\nt = sorted(zip(p, a, b), key=operator.itemgetter(0))\nt = [list(x) for x in t]\np = [None, 0, 0, 0]\n\nr = []\nfor ci in c:\n    i = p[ci]\n    while i < n and ci not in (t[i][1], t[i][2]):\n        i += 1\n    if i == n:\n        r.append(-1)\n    else:\n        r.append(t[i][0])\n        t[i][1], t[i][2] = 0, 0\n        i += 1\n    p[ci] = i\nprint(*r, sep=' ')\n", "import operator\n\nn = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = list(map(int, input().split()))\n\nt = sorted(zip(p, a, b), key=operator.itemgetter(0))\nt = [list(x) for x in t]\np = [None, 0, 0, 0]\n\nr = []\nfor ci in c:\n    i = p[ci]\n    while i < n and ci not in (t[i][1], t[i][2]):\n        i += 1\n    if i == n:\n        r.append('-1')\n    else:\n        r.append(str(t[i][0]))\n        t[i][1], t[i][2] = 0, 0\n        i += 1\n    p[ci] = i\nprint(' '.join(r))\n", "import operator\n\nn = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = list(map(int, input().split()))\n\nt = sorted(zip(p, a, b), key=operator.itemgetter(0))\nt = [list(x) for x in t]\np = [None, 0, 0, 0]\n\nr = []\nfor ci in c:\n    i = p[ci]\n    while i < n and ci not in (t[i][1], t[i][2]):\n        i += 1\n    if i == n:\n        r.append(-1)\n    else:\n        r.append(t[i][0])\n        t[i][1], t[i][2] = 0, 0\n        i += 1\n    p[ci] = i\nprint(' '.join(map(str, r)))\n", "n = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = list(map(int, input().split()))\n\nt = sorted(zip(p, a, b), key=lambda x: x[0])\nt = [list(x) for x in t]\np = [None, 0, 0, 0]\n\nr = []\nfor ci in c:\n    i = p[ci]\n    while i < n and ci not in (t[i][1], t[i][2]):\n        i += 1\n    if i == n:\n        r.append('-1')\n    else:\n        r.append(str(t[i][0]))\n        t[i][1], t[i][2] = 0, 0\n        i += 1\n    p[ci] = i\nprint(' '.join(r))\n", "n = int(input())\np = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ninput()\nc = list(map(int, input().split()))\n\nt = sorted(zip(p, a, b), key=lambda x: x[0])\nt = [list(x) for x in t]\np = [None, 0, 0, 0]\n\nr = []\nfor ci in c:\n    i = p[ci]\n    while i < n and ci not in (t[i][1], t[i][2]):\n        i += 1\n    if i == n:\n        r.append('-1')\n    else:\n        r.append(str(t[i][0]))\n        t[i][1], t[i][2] = 0, 0\n        i += 1\n    p[ci] = i\nprint(*r)\n"]