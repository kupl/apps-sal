["import sys\nimport math\n\ndef main(arr,k):\n \n \n x=[]\n y=[]\n \n \n \n for e in arr:\n  if e%2==0:\n   x.append(e)\n   y.append(0)\n  else:\n   x.append(0)\n   y.append(e)\n   \n a=[0]*n\n b=[0]*n\n a[0]=x[0]\n b[0]=y[0]\n for i in range(1,n):\n  \n  if i<k:\n   a[i]=max(x[i],a[i-1])\n   b[i]=max(y[i],b[i-1])\n  else:\n   a[i]=max(x[i]+a[i-k-1],a[i-1])\n   b[i]=max(y[i]+b[i-k-1],b[i-1])\n \n print(a[-1]+b[-1]) \n return \n\nfor i in range(int(input())):\n n,k=list(map(int,input().split()))\n \n arr=list(map(int,input().split()))\n \n (main(arr,k))\n\n", "import sys\nimport math\n\ndef main(arr,k):\n \n \n x=[]\n y=[]\n \n \n \n for e in arr:\n  if e%2==0:\n   x.append(e)\n   y.append(0)\n  else:\n   x.append(0)\n   y.append(e)\n   \n a=[0]*n\n b=[0]*n\n a[0]=x[0]\n b[0]=y[0]\n for i in range(1,n):\n  \n  if i<k:\n   a[i]=max(x[i],a[i-1])\n   b[i]=max(y[i],b[i-1])\n  else:\n   a[i]=max(x[i]+a[i-k-1],a[i-1])\n   b[i]=max(y[i]+b[i-k-1],b[i-1])\n \n print(a[-1]+b[-1]) \n return \n\nfor i in range(int(input())):\n n,k=list(map(int,input().split()))\n \n arr=list(map(int,input().split()))\n \n (main(arr,k))\n\n", "'''\n    ssisodia507@gmail.com\n'''\n\n\ndef solve(array,k,n):\n \n # storing even and odd values\n even=[]\n odd=[]\n for i in range(n):\n  if array[i]%2==0:\n   even.append(array[i])\n   odd.append(0)\n  else:\n   odd.append(array[i])\n   even.append(0)\n \n # dpEven will store the maximum sum of even elements till index i-th\n # and dpOdd of odd elements till index i-th\n dpEven=[0]*n\n dpOdd=[0]*n\n dpEven[0]=even[0]\n dpOdd[0]=odd[0]\n \n # from index 0 to k we can only select one even value and one odd value\n # so store the maximum even value till index k and maximum odd value \n # till index k\n i=1\n while i<=k and i<n:\n  dpEven[i]=max(dpEven[i-1],even[i])\n  dpOdd[i]=max(dpOdd[i-1],odd[i])\n  i+=1\n \n # now for any element we have two choices\n # either choose it or leave it.\n \n # we will consider the case which will give maximum sum\n # so we will find the sum after leaving the element(which is previous\n # maximum sum ) and after choosing the element(previous sum+currentvalue) \n # and pick the one which give maximum sum\n \n # we will handle even and odd cases separately \n for i in range(k+1,n):\n  dpEven[i]=max(dpEven[i-1],dpEven[i-k-1]+even[i])\n for i in range(k+1,n):\n  dpOdd[i]=max(dpOdd[i-1],dpOdd[i-k-1]+odd[i])\n return dpOdd[-1]+dpEven[-1]\nqueries=[]\nfor _ in range(int(input())):\n n,k=map(int,input().split( ))\n queries.append((list(map(int,input().split( ))),k))\n\nfor query in queries:\n print(solve(query[0],query[1],len(query[0])))", "def solve(array,k,n):\n \n even=[]\n odd=[]\n for i in range(n):\n  if array[i]%2==0:\n   even.append(array[i])\n   odd.append(0)\n  else:\n   odd.append(array[i])\n   even.append(0)\n dpEven=[0]*n\n dpOdd=[0]*n\n dpEven[0]=even[0]\n dpOdd[0]=odd[0]\n i=1\n while i<=k and i<n:\n  dpEven[i]=max(dpEven[i-1],even[i])\n  dpOdd[i]=max(dpOdd[i-1],odd[i])\n  i+=1\n for i in range(k+1,n):\n  dpEven[i]=max(dpEven[i-1],dpEven[i-k-1]+even[i])\n for i in range(k+1,n):\n  dpOdd[i]=max(dpOdd[i-1],dpOdd[i-k-1]+odd[i])\n return dpOdd[-1]+dpEven[-1]\nqueries=[]\nfor _ in range(int(input())):\n n,k=map(int,input().split( ))\n queries.append((list(map(int,input().split( ))),k))\n\nfor query in queries:\n print(solve(query[0],query[1],len(query[0])))", "# cook your dish here\nt = int(input())\nfor i in range(t):\n n,k = list(map(int,input().strip().split()))\n ar = list(map(int,input().strip().split()))\n even = []\n odd = []\n for i in range(n):\n  if ar[i]%2==0:\n   even.append(ar[i])\n   odd.append(0)\n  else:\n   even.append(0)\n   odd.append(ar[i])\n\n dp1 = [0]*n\n dp2 = [0]*n\n dp1[0] = even[0]\n dp2[0] = odd[0]\n for i in range(1,n):\n  if i<k+1:\n   dp1[i] = max(dp1[i-1],even[i])\n  else:\n   dp1[i] = max(dp1[i-1],dp1[i-k-1]+even[i])\n\n for i in range(1,n):\n  if i<k+1:\n   dp2[i] = max(dp2[i-1],odd[i])\n  else:\n   dp2[i] = max(dp2[i-1],dp2[i-k-1]+odd[i])\n print(dp1[-1]+dp2[-1])", "# cook your dish here\nt = int(input())\nfor i in range(t):\n n,k = list(map(int,input().strip().split()))\n ar = list(map(int,input().strip().split()))\n even = []\n odd = []\n for i in range(n):\n  if ar[i]%2==0:\n   even.append(ar[i])\n   odd.append(0)\n  else:\n   even.append(0)\n   odd.append(ar[i])\n\n dp1 = [0]*n\n dp2 = [0]*n\n dp1[0] = even[0]\n dp2[0] = odd[0]\n for i in range(1,n):\n  if i<k+1:\n   dp1[i] = max(dp1[i-1],even[i])\n  else:\n   dp1[i] = max(dp1[i-1],dp1[i-k-1]+even[i])\n\n for i in range(1,n):\n  if i<k+1:\n   dp2[i] = max(dp2[i-1],odd[i])\n  else:\n   dp2[i] = max(dp2[i-1],dp2[i-k-1]+odd[i])\n print(dp1[-1]+dp2[-1])", "t = int(input())\nfor i in range(t):\n n,k = list(map(int,input().strip().split()))\n ar = list(map(int,input().strip().split()))\n even = []\n odd = []\n for i in range(n):\n  if ar[i]%2==0:\n   even.append(ar[i])\n   odd.append(0)\n  else:\n   even.append(0)\n   odd.append(ar[i])\n\n dp1 = [0]*n\n dp2 = [0]*n\n dp1[0] = even[0]\n dp2[0] = odd[0]\n for i in range(1,n):\n  if i<k+1:\n   dp1[i] = max(dp1[i-1],even[i])\n  else:\n   dp1[i] = max(dp1[i-1],dp1[i-k-1]+even[i])\n\n for i in range(1,n):\n  if i<k+1:\n   dp2[i] = max(dp2[i-1],odd[i])\n  else:\n   dp2[i] = max(dp2[i-1],dp2[i-k-1]+odd[i])\n print(dp1[-1]+dp2[-1])", "for _ in range(int(input())):\n n,k = map(int,input().split())\n arr = list(map(int,input().split()))\n dpo = [0]*n\n dpe = [0]*n\n for i,a in enumerate(arr):\n  if i>k:\n   if a&1:\n    dpo[i] = max(dpo[i-1],dpo[i-k-1]+a)\n    dpe[i] = dpe[i-1]\n   else:\n    dpe[i] = max(dpe[i-1],dpe[i-k-1]+a)\n    dpo[i] = dpo[i-1]\n  else:\n   if a&1:\n    dpo[i] = max(dpo[i-1],a)\n    dpe[i] = dpe[i-1]\n   else:\n    dpe[i] = max(dpe[i-1],a)\n    dpo[i] = dpo[i-1]\n # print(*dpo)\n # print(*dpe)\n print(dpo[-1]+dpe[-1])", "\ndef sol(b, k):\n l = len(b)\n if l==0: return 0\n elif l==1: return A[b[0]]\n n = b[-1]\n dp = [0]*(n+1)\n dp[n] = A[n]\n x = 2\n ret = 0\n for i in range(n-1, -1, -1):\n  if i>b[l-x]:\n   dp[i] = dp[i+1]\n  elif i<b[0]:\n   ret = dp[i+1]\n   break\n  else:\n   if i+k+1>n:\n    dp[i] = max(A[i], dp[i+1])\n   else:\n    dp[i] = max(A[i] + dp[i+k+1], dp[i+1])\n   x += 1\n if ret: return ret\n return dp[0]\n\n\nfor _ in range(int(input())):\n n, k = [int(x) for x in input().split()]\n A = [int(x) for x in input().split()]\n odd, even = [], []\n for i in range(len(A)):\n  if A[i]%2==0: even.append(i)\n  else: odd.append(i)\n ans = sol(odd, k) + sol(even, k)\n print(ans)", "def sol(b, k):\n l = len(b)\n if l==0: return 0\n elif l==1: return A[b[0]]\n n = b[-1]\n dp = [0]*(n+1)\n dp[n] = A[n]\n x = 2\n ret = 0\n for i in range(n-1, -1, -1):\n  if i>b[l-x]:\n   dp[i] = dp[i+1]\n  elif i<b[0]:\n   ret = dp[i+1]\n   break\n  else:\n   if i+k+1>n:\n    dp[i] = max(A[i], dp[i+1])\n   else:\n    dp[i] = max(A[i] + dp[i+k+1], dp[i+1])\n   x += 1\n if ret: return ret\n return dp[0]\n\n\nfor _ in range(int(input())):\n n, k = [int(x) for x in input().split()]\n A = [int(x) for x in input().split()]\n odd, even = [], []\n for i in range(len(A)):\n  if A[i]%2==0: even.append(i)\n  else: odd.append(i)\n ans = sol(odd, k) + sol(even, k)\n print(ans)", "for _ in range(int(input())):\n n,k = list(map(int,input().split()))\n arr = list(map(int,input().split()))\n dpo = [0]*n\n dpe = [0]*n\n for i,a in enumerate(arr):\n  if i>k:\n   if a&1:\n    dpo[i] = max(dpo[i-1],dpo[i-k-1]+a)\n    dpe[i] = dpe[i-1]\n   else:\n    dpe[i] = max(dpe[i-1],dpe[i-k-1]+a)\n    dpo[i] = dpo[i-1]\n  else:\n   if a&1:\n    dpo[i] = max(dpo[i-1],a)\n    dpe[i] = dpe[i-1]\n   else:\n    dpe[i] = max(dpe[i-1],a)\n    dpo[i] = dpo[i-1]\n # print(*dpo)\n # print(*dpe)\n print(dpo[-1]+dpe[-1])\n", "T=int(input())\n\nwhile(T>0):\n N,K=list(map(int,input().split()))\n A=[int(e) for e in input().split()]\n\n \n E=[0]*N\n LE=-1\n LO=-1\n O=[0]*N\n\n\n if(A[0]%2==0):\n  E[0]=A[0]\n  LE=0\n else:\n  O[0]=A[0]\n  LO=0\n\n i=1\n while(i<N):\n  \n  if(A[i]%2==0):\n   O[i]=O[i-1]\n   if(LE!=-1):\n    if(abs(i-LE)<=K):\n     if((i-K-1)>=0):\n      ADDI=E[i-K-1] \n     else:\n      ADDI=0\n      \n      \n     if(E[LE]>=A[i]+ADDI):\n      E[i]=E[LE]\n      LE=LE\n     else:\n      E[i]=A[i]+ADDI\n      LE=i\n    else:\n     E[i]=E[LE]+A[i]\n     LE=i\n\n   else:\n    E[i]=E[i-1]+A[i]\n    LE=i\n  else:\n   E[i]=E[i-1]\n   \n   if(LO!=-1):\n    \n    if(abs(i-LO)<=K):\n     if((i-K-1)>=0):\n      ADDI=O[i-K-1] \n     else:\n      ADDI=0\n      \n     if(O[LO]>=A[i]+ADDI):\n      O[i]=O[LO]\n      LO=LO\n     else:\n      \n      O[i]=A[i]+ADDI\n      LO=i\n    else:\n     O[i]=O[LO]+A[i]\n     LO=i\n \n   else:\n    O[i]=O[i-1]+A[i]\n    LO=i\n  #print(E,O,E[N-1]+O[N-1])\n  \n  i=i+1\n\n\n print(E[N-1]+O[N-1])\n T=T-1\n  \n", "def ii():\n return int(input())\ndef mi():\n return list(map(int, input().split()))\ndef li():\n return list(mi())\nfrom collections import deque\n\nfor t in range(ii()):\n n, k = mi()\n a = [0] + li()\n\n def solve(a, k):\n  n = len(a)\n  dp = [0] * n\n  d = deque()\n  d.append((0, 0))\n  for i in range(1, n):\n   if i - d[0][0] > k:\n    d.popleft()\n   dp[i] = max(d[0][1], a[i] + (dp[i - k - 1] if i >= k + 1 else 0))\n   while d and d[-1][1] <= dp[i]:\n    d.pop()\n   d.append((i, dp[i]))\n  return d[0][1]\n\n\n odd = solve([x if x % 2 else 0 for x in a], k)\n even = solve([0 if x % 2 else x for x in a], k)\n print(odd + even)\n"]