["class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         dic_row = [{},{},{},{},{},{},{},{},{}]\n         dic_col = [{},{},{},{},{},{},{},{},{}]\n         dic_box = [{},{},{},{},{},{},{},{},{}]\n \n         for i in range(len(board)):\n             for j in range(len(board)):\n                 num = board[i][j]\n                 if num == \".\":\n                     continue\n                 if num not in dic_row[i] and num not in dic_col[j] and num not in dic_box[3*(i//3)+(j//3)]:\n                     dic_row[i][num] = 1\n                     dic_col[j][num] = 1\n                     dic_box[3*(i//3)+(j//3)][num] = 1\n                 else:\n                     return False\n \n         return True\n             \n", "class Solution:\n     \n     \n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         row_dict={}\n         col_dict={}\n         ssq_dict={}\n \n         for row in range(len(board)):\n             for col in range(len(board[0])):\n                 if board[row][col]!='.':\n                     if 'r'+str(row) not in row_dict:\n                         row_dict['r'+str(row)]=[board[row][col]]\n                     else:\n                         row_dict['r'+str(row)].append(board[row][col])\n \n                     if 'c'+str(col) not in col_dict:\n                         col_dict['c'+str(col)]=[board[row][col]]\n                     else:\n                         col_dict['c'+str(col)].append(board[row][col])\n                     if 's'+str(row-row%3)+ str(col-col%3) not in ssq_dict:\n                         print('s'+str(row-row%3)+ str(col-col%3))\n                         ssq_dict['s'+str(row-row%3)+ str(col-col%3)]=[board[row][col]]\n                     else:\n                         ssq_dict['s'+str(row-row%3)+ str(col-col%3)].append(board[row][col])\n \n                         \n         for val in row_dict.values():\n             if len(val)>len(set(val)):\n                 return False\n \n         for val in col_dict.values():\n             if len(val)>len(set(val)):\n                 return False\n         for val in ssq_dict.values():\n             if len(val)>len(set(val)):\n                 return False          \n         return True", "class Solution:    \n     def repeat(self, val, seen):\n             print((val, seen))\n             return seen >> int(val) & 1\n \n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         seen = set()\n         for i in range(9):\n             for j in range(9):\n                 if board[i][j].isdigit():\n                     val = board[i][j]\n                     row = (i, val)\n                     col = (val, j)\n                     box = (i//3, j//3, val)\n                     if row in seen or col in seen or box in seen:\n                         return False\n                     seen.add(row)\n                     seen.add(col)\n                     seen.add(box)\n                     \n         return True\n         # for row in board:\n         #     seen = 0\n         #     for col in row:\n         #         if col.isdigit():\n         #             if seen >> int(col) & 1:\n         #                 return False\n         #             else:\n         #                 seen |= 1<<int(col)\n         # max = 9\n         # for col in range(max):\n         #     seen = 0\n         #     for row in range(max):\n         #         val = board[row][col]\n         #         if val.isdigit():\n         #             if seen >> int(val) & 1:\n         #                 return False\n         #             else:\n         #                 seen |= 1<<int(val)\n         # for row_st in range(0, max, 3):\n         #     for col_st in range(0, max, 3):\n         #         seen = 0\n         #         for row in range(3):\n         #             for col in range(3):\n         #                 val = board[row_st + row][col_st+ col]\n         #                 print(val)\n         #                 if val.isdigit():\n         #                     if seen >> int(val) & 1:\n         #                         return False\n         #                     else:\n         #                         seen |= 1<<int(val)\n", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         anslist = sum(([(i,c),(c,j),(i//3,j//3,c)] for i,row in enumerate(board) for j,c in enumerate(row) if c != '.'),[])\n         return len(anslist) == len(set(anslist))", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         Cell = [[] for i in range(9)]\n         Col =  [[] for i in range(9)]\n         Row =  [[] for i in range(9)]\n         \n         for i,row in enumerate(board):\n             for j,num in enumerate(row):\n                 if num != '.':\n                     k = (i//3)*3 + j//3\n                     if num in Row[i] + Col[j] + Cell[k]:\n                         return False\n                     Row[i].append(num)\n                     Col[j].append(num)\n                     Cell[k].append(num)\n                         \n         return True", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         rows = [[] for _ in range(9)]\n         cols = [[] for _ in range(9)]\n         areas = [[] for _ in range(9)]\n         for i in range(9):\n             for j in range(9):\n                 ele = board[i][j]\n                 if ele == '.':\n                     continue\n                 area_id = i // 3 * 3 + j // 3\n                 if ele in rows[i] or ele in cols[j] or ele in areas[area_id]:\n                     return False\n                 else:\n                     rows[i].append(ele)\n                     cols[j].append(ele)\n                     areas[area_id].append(ele)\n         return True", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         check = set()\n         for i in range(0, 9):\n             for j in range(0, 9):\n                 if (board[i][j] == '.'):\n                     continue\n                 if (board[i][j] in check):\n                     return False\n                 check.add(board[i][j])\n             check.clear()\n         \n         for j in range(0,9):\n             for i in range(0,9):\n                 if (board[i][j] == \".\"):\n                     continue\n                 if (board[i][j] in check):\n                     return False\n                 check.add(board[i][j])\n             check.clear()\n             \n         for k in range(0, 9):\n             for i in range(int(k / 3) * 3, int(k / 3) * 3 + 3):\n                 for j in range((k % 3) * 3, (k % 3) * 3 + 3):\n                     if (board[i][j] == '.'):\n                         continue\n                     if (board[i][j] in check):\n                         return False\n                     check.add(board[i][j])\n             check.clear()\n     \n         return True", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         if not board:return False\n         checkRow=[[0 for i in range(9)]for j in range(9)]\n         checkCol=[[0 for i in range(9)]for j in range(9)]\n         checkSq=[[0 for i in range(9)] for j in range(9)]\n         for i in range(9):\n             for j in range(9):\n                 k=i//3*3+j//3\n                 if board[i][j]!='.':\n                     num=int(board[i][j])-int('0')-1#from 1-9 to 0-8\n                     if checkRow[i][num] or checkCol[j][num] or checkSq[k][num]:return False\n                     else:checkRow[i][num]=checkCol[j][num]=checkSq[k][num]=1\n         return True", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         for i in range (9):\n             for j in range (9):\n                 if board[i][j] == '.':\n                     continue\n                 temp = board[i][j]\n                 board[i][j] = 'D'\n                 if self.isValid(board, i, j, temp) == False:\n                     return False\n                 board[i][j] = temp\n         return True\n         \n         \n     def isValid(self, board, x, y, temp):\n         for i in range (9):\n             if board[i][y] == temp:\n                 return False\n         for i in range (9):\n             if board[x][i] == temp:\n                 return False\n         for i in range (3):\n             for j in range (3):\n                 if board[x//3*3 + i][y//3*3 + j] == temp:\n                     return False\n         return True\n", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         for row in board:\n             seen = 0\n             for col in row:\n                 if col.isdigit():\n                     if seen >> int(col) & 1:\n                         return False\n                     else:\n                         seen |= 1<<int(col)\n         max = 9\n         for col in range(max):\n             seen = 0\n             for row in range(max):\n                 val = board[row][col]\n                 if val.isdigit():\n                     if seen >> int(val) & 1:\n                         return False\n                     else:\n                         seen |= 1<<int(val)\n         for row_st in range(0, max, 3):\n             for col_st in range(0, max, 3):\n                 seen = 0\n                 for row in range(3):\n                     for col in range(3):\n                         val = board[row_st + row][col_st+ col]\n                         print(val)\n                         if val.isdigit():\n                             if seen >> int(val) & 1:\n                                 return False\n                             else:\n                                 seen |= 1<<int(val)\n         \n         return True", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         rows = []\n         cols = []\n         squares = []\n         for i in range(0, len(board)):\n             rows.append(set())\n             cols.append(set())\n             squares.append(set())\n         for i in range(0, len(board)):\n             for j in range(0, len(board)):\n                 if board[i][j] == '.':\n                     continue\n                 val = board[i][j]\n                 if val in rows[i]:\n                     return False\n                 rows[i].add(val)\n                 if val in cols[j]:\n                     return False\n                 cols[j].add(val)\n                 sq = int(i // 3) * 3\n                 sq += int(j // 3)\n                 print(('row is: ', i, ' col is: ', j, ' sq is: ', sq))\n                 if val in squares[sq]:\n                     return False\n                 squares[sq].add(val)\n         return True\n", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         seen = sum(([(c, i), (j, c), (i//3, j//3, c)]\n                 for i, row in enumerate(board)\n                 for j, c in enumerate(row)\n                 if c != '.'), [])\n         print(seen)\n         return len(seen) == len(set(seen))\n", "class Solution:\n     def isValidSudoku(self, board):\n         \"\"\"\n         :type board: List[List[str]]\n         :rtype: bool\n         \"\"\"\n         for l in board:\n             nums = list(collections.Counter(l).items())\n             for term in nums:\n                 if term[0] != '.' and term[1] > 1:\n                     print(1)\n                     return False\n \n         for i in range(0, len(board), 3):\n             rows = list(zip(*board[i: i + 3]))\n             for j in range(0, len(board), 3):\n                 nums = list(itertools.chain.from_iterable(rows[j: j + 3]))\n                 nums = list(collections.Counter(nums).items())\n                 for term in nums:\n                     if term[0] != '.' and term[1] > 1:\n                         print(3)\n                         return False\n \n         columns = list(zip(*board))\n         for l in columns:\n             nums = list(collections.Counter(l).items())\n             for term in nums:\n                 if term[0] != '.' and term[1] > 1:\n                     print(2)\n                     return False\n \n         return True"]