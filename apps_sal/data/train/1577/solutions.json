["class Dsu:\n    def __init__(self, v, s):\n        self.par = s\n        self.v = v\n        self.dr = [1] * v\n        self.zero = [False] * v\n        self.speed = []\n        for i in range(v):\n            self.speed.append([])\n            self.speed[i].append(i)\n\n    def find(self, i):\n    #     if parent[i] == -1:\n    #         return i\n    #     else: return self.find_parent(parent, parent[i])\n        if i != self.par[i][0]:\n            org = self.par[i][0]\n            self.par[i][0] = self.find(self.par[i][0])\n            if self.zero[i] or self.zero[self.par[i][0]] or self.zero[org]:\n                self.zero[i] = self.zero[self.par[i][0]] = self.zero[org] = True\n            if org != self.par[i][0]:\n                self.speed[self.par[i][0]].append(i)\n        return self.par[i][0]\n\n    def union(self, x, y):\n        # def union(self, parent, x, y):\n        #     x_set = self.find_parent(parent, x)\n        #     y_set = self.find_parent(parent, y)\n        #     parent[x_set] = y_set\n        self.rx = self.find(x)\n        self.ry = self.find(y)\n        self.sign = -self.dr[x] * self.dr[y]\n        if self.rx != self.ry:\n            if (self.par[self.rx][1]<self.par[self.ry][1]):\n                mx=self.ry\n                mn=self.rx\n            if (self.par[self.rx][1]>self.par[self.ry][1]):\n                mx=self.rx\n                mn=self.ry\n            if self.par[self.rx][1] != self.par[self.ry][1]:\n                self.par[mn][0] = mx\n                if self.zero[mn] or self.zero[mx] or self.zero[x] or self.zero[y]:\n                    self.zero[mn] = self.zero[mx] = self.zero[x] = self.zero[y] = True\n                else:\n                    for i in range(len(self.speed[mn])):\n                        self.dr[self.speed[mn][i]] *= self.sign\n                        org = self.par[self.speed[mn][i]][0]\n                        if org != mx:\n                            self.par[self.speed[mn][i]][0] = mx\n                            self.speed[mx].append(self.speed[mn][i])\n                self.speed[mx].append(mn)\n\n            else:\n                self.par[self.ry][0] = self.rx\n                self.par[self.rx][1] += 1\n                if self.zero[self.rx] or self.zero[self.ry] or self.zero[x] or self.zero[y]:\n                    self.zero[self.rx] = self.zero[self.ry] = self.zero[x] = self.zero[y] = True\n                else:\n                    for i in range(len(self.speed[self.ry])):\n                        self.dr[self.speed[self.ry][i]] *= self.sign\n                        org = self.par[self.speed[self.ry][i]][0]\n                        if org != self.rx:\n                            self.par[self.speed[self.ry][i]][0] = self.rx\n                            self.speed[self.rx].append(self.speed[self.ry][i])\n                self.speed[self.rx].append(self.ry)\n        else:\n            return\n\n\ndef optwo(x, y, D):\n    if (D.find(x) == D.find(y) and D.dr[x] == D.dr[y]):\n            D.zero[x] = D.zero[y] = True\n    D.union(x, y)\n\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\n\ndef opthree(x, y, v, D):\n    if (D.find(x) != D.find(y)) or (D.zero[D.par[y][0]]):\n        print(0)\n    else:\n        g = gcd(v * speed[x], speed[y])\n        flag=(D.dr[x] * D.dr[y])//abs(D.dr[x] * D.dr[y])\n        print(str(flag * v * speed[x] // g) + \"/\" + str(speed[y] // g))\n\n\nn, M = map(int, input().split())\nspeed = list(map(int, input().split()))\ns = []\nfor i in range(n):\n    s.append([i, 0])\nD = Dsu(n, s)\nfor i in range(M):\n    T = list(map(int, input().split()))\n    if (T[0] == 1):\n        speed[T[1] - 1] = T[2]\n    elif (T[0] == 2):\n        optwo(T[1] - 1, T[2] - 1, D)\n    elif (T[0] == 3):\n        opthree(T[1] - 1, T[2] - 1, T[3], D)\n"]