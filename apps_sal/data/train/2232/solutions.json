["\"\"\"\nCodeforces Round 372 Div 1 Problem A\n\nAuthor  : chaotic_iak\nLanguage: Python 3.5.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n    n, = read()\n    curr = 2\n    for lv in range(1, n+1):\n        tgt = (lv*(lv+1))**2\n        print((tgt - curr) // lv)\n        curr = lv*(lv+1)\n    return\n\n#################################################### HELPERS\n\ndef read(typ=int):\n    # None: String, non-split\n    # Not None: Split\n    input_line = input().strip()\n    if typ is None:\n        return input_line\n    return list(map(typ, input_line.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())\n", "\nN = int(input())\n\nx = 2\n\nfor i in range(1, N+1):\n    u, v = i, i+1\n    p = u**2 * v**2\n    d = p - x\n    z = d // u\n    assert(z <= 10**18)\n    print(z)\n    x = u*v\n", "N = int(input())\nprint(2)\nfor n in range(2, N+1):\n\tclicks = n*(n+1)**2 - (n-1)\n\tprint(clicks)", "n = int(input())\na = 2\nfor i in range(1, n + 1):\n  b = (i * (i + 1)) * (i * (i + 1))\n  assert (b - a) % i == 0, str(i)\n  c = (b - a) // i\n  print(c)\n  a = i * (i + 1)\n", "n=int(input())\nret=2\nq=2\nfor k in range(1,n+1):\n    if(q%(k+1)!=0):\n        q+=k+1-(q%(k+1))\n    while 1:\n        w=q*q\n        if (w-ret)%k==0:\n            print((w-ret)//k)\n            ret=q\n            break\n        q+=k+1\n\n", "\nn = int(input())\nprint(2)\nfor i in range(1, n):\n    print((i+2)*(i+2)*(i+1)-i)\n", "#!/usr/bin/env python3\nimport math\nn = int(input())\nx = 2\nk = 1\nwhile k <= n:\n    assert x % k == 0\n    y = ((k+1) * k) ** 2\n    assert x <= y and (y - x) % k == 0\n    assert (y - x) // k <= 10**18\n    print((y - x) // k)\n    x = (k+1) * k\n    k += 1\n", "def solve(x):\n\treturn ((((x + 1) ** 2) * (x ** 2)) - (x * x - x)) / x\n \ninp = int(input(\"\"))\nlvl = 1\nprint (\"2\")\nwhile(inp >= 2):\n\tops = solve(lvl + 1)\n\tprint (int(ops))\n\tlvl = lvl + 1\n\tinp = inp - 1 ", "import sys\nfrom fractions import gcd\nimport math\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef seive(lim):\n    for x in range(2, lim + 1):\n        if (len(factors[x]) == 0):\n            factors[x].append((x, 1))\n            for y in range(x + x, lim + 1, x):\n                yy = y\n                cnt = 0\n                while (yy % x == 0):\n                    cnt += 1\n                    yy //= x\n                factors[y].append((x, cnt))\nfactors =[]\nfor i in range(10**5 + 2):\n    factors.append([])\nseive(10**5 + 1)\nn = int(input())\ncurLvl = 1\ncurValue = 2\nnxtLvl = 2\nans = \"\"\nwhile (curLvl <= n):\n    f = factors[curLvl]\n    x = 1\n    for item in f:\n        x *= item[0] ** (item[1] // 2 + item[1] % 2)\n    x = lcm(x, nxtLvl)\n    ans += str((x * x - curValue) // curLvl) + \"\\n\"\n    curValue = x\n    curLvl += 1\n    nxtLvl += 1\n\nsys.stdout.write(ans)\n\n\n\n\n\n\n", "n = int(input())\nst = 2\ndef sqrt(x):\n    lo = 0\n    hi = 1000000000000\n    while (lo < hi):\n        mid = (lo + hi) // 2\n        if mid*mid < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n\nfor i in range(1, n+1):\n    a = ((i*(i+1))**2-st)/i\n    a = int(a)\n    print(a)\n    st += i*a\n    st = sqrt(st)", "n = int(input())\nst = 2\ndef sqrt(x):\n    lo = 0\n    hi = x\n    while (lo < hi):\n        mid = (lo + hi) // 2\n        if mid*mid < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n\nfor i in range(1, n+1):\n    a = ((i*(i+1))**2-st)/i\n    a = int(a)\n    print(a)\n    st += i*a\n    st = sqrt(st)\n", "n = int( input() )\nprint( 2 )\nfor i in range(2, n+1):\n  print( ( i + 1 ) * ( i + 1 ) * i - ( i - 1 ) )\n", "n = int(input())\ncur = 2\nfor i in range(1,n+1):\n\ttmp = ((i*(i+1))**2 - cur)/i;\n\ttmp = int(tmp)\n\tprint(tmp)\n\tcur = i*(i+1)\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nprint(2)\nn=int(input())\nfor i in range(2,1+n):print(1+i*(2+i)*i)\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nprint(2)\nfor k in range(2,1+int(input())):print(1+k*(2+k)*k)\n", "a=2\nn=0\nmax = int(input())\nfor k in range(max+1):\n    if(k==0):\n        continue\n    n = k*(k+1)*(k+1)-a\n    a=k\n    print(n)\n", "N = int(input())\ntmp1 = 2\ntmp2 = 2\nfor i in range(1, N + 1):\n    if i == 1:\n        print(2)\n        tmp2 *= 3\n    else:\n        print((tmp2 ** 2 - tmp1) // i)\n        tmp1 = tmp2\n        tmp2 //= i\n        tmp2 *= (i + 2)\n", "import math\n\nn = int(input())\nx = 2\nfor i in range(1, n+1):\n    y = i * (i + 1)\n    y *= y\n    print(round((y-x)/i))\n    x = math.sqrt(y)\n", "n = int(input())\nprint(2)\nfor i in range(2, n+1):\n    print(i*(i+1)*(i+1) - i+1)\n", "n = int(input())\nfor i in range(2,n+2):\n    if i==2:\n        print(2)\n    else:\n        print(i*i*(i-1)-(i-2))", "\"\"\"\nupsolving:\nbrute forcing takes too long\nparlay congruence relation\n\"\"\"\n\nimport math\n\nn = int(input())\nzs = 2\n\nfor lvl in range(1, n+1):\n    print(((lvl * (lvl + 1)) ** 2 - zs) // lvl)\n    zs = lvl * (lvl + 1)\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nfor k in range(2,1+int(input('2\\n'))):print(1+k*(2+k)*k)\n", "n = int(input())\nprint(2)\nfor i in range(2, n+1):\n    print(i*(i+1)*(i+1) - i+1)", "print(2)\nfor i in range(2, int(input())+1):\n print(i*i*i+2*i*i+1)"]