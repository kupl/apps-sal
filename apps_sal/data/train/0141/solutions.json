["class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort()\n        lo = 0 \n        hi = len(people) - 1\n        count = 0\n        \n        while lo <= hi:\n            count += 1\n            if people[lo] + people[hi] <= limit:\n                lo += 1\n            hi -= 1\n            \n        return count\n        \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        boats = 0\n        l = 0\n        r = len(people) - 1\n        while r>l:\n            boats += 1\n            if people[l] + people[r] <= limit:\n                l += 1\n                r = r-1\n            else:\n                r = r-1\n        if r == l:\n            boats += 1\n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people, reverse=True)\n        i = 0\n        j = len(people) - 1\n        n = 0\n        while True:\n            # TODO - Check for [5,5,5,5,5] with limit of 5\n            if i >= j:\n                break\n            n += 1\n            w1 = people[i]\n            i += 1\n            rem = limit - w1\n            if rem >= people[j]:\n                j -= 1\n\n        if i == j:\n            n += 1\n        \n        return n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort()\n        \n        p1 = 0\n        \n        p2 = len(people) - 1\n        \n        boat = 0\n        \n        while p1 <= p2:\n            boat+= 1\n            if people[p1] + people[p2] <= limit:\n                p1 += 1\n            \n            p2 -= 1\n        \n        return boat", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i = 0\n        j = len(people)-1\n        count = 0\n        while i < j:\n            if people[i] + people[j] <= limit:\n                count += 1\n                i += 1\n                j -= 1\n            else:\n                count += 1\n                j -= 1\n        if i == j:\n            count += 1\n        return count", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        new = sorted(people)\n        i,j = 0, len(people)-1\n        res = 0\n        while i<=j:\n            \n            if new[j]+new[i]<=limit:\n                i+=1\n            j-=1\n            res+=1\n        return res\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort()\n        \n        l, r = 0, len(people)-1\n        res = 0\n        \n        while l <= r:\n            while l <= r and people[l] + people[r] > limit:\n                res += 1\n                r -= 1\n            if l <= r:\n                res += 1\n                l += 1\n                r -= 1\n        return res\n        \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        length = len(people)\n        people.sort()\n        \n        left = 0\n        right = length - 1\n        boat_num = 0\n        \n        while left <= right:\n            if people[left] + people[right] <= limit:\n                left += 1\n                right -= 1\n            else:\n                right -= 1\n            boat_num += 1\n        \n        return boat_num", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i=0\n        j=len(people)-1\n        count=0\n        while(i<=j):\n            count+=1\n            if(people[i]+people[j]<=limit):\n                i+=1\n            j-=1\n        return count\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        if not people:\n            return 0\n\n        people = sorted(people)\n\n        left = 0\n        right = len(people) - 1\n        board_cnt = 0\n\n        while left <= right:\n            #key\n            if left == right:\n                board_cnt += 1\n                break\n\n            if people[left] + people[right] <= limit:\n                left += 1\n                right -= 1\n                board_cnt += 1\n            else:\n                right -= 1\n                board_cnt += 1\n            \n        return board_cnt        ", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        left, right = 0, len(people)-1\n        boats = 0\n        \n        while left <= right:\n            if left == right:\n                boats += 1\n                break\n            if people[left] + people[right] <= limit:\n                boats += 1\n                left += 1\n                right -= 1\n            else:\n                right -= 1\n                boats += 1\n                \n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i,j=0,len(people)-1\n        ans=0\n        while i<=j:\n            ans += 1\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n        return ans\n            \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        if len(people) <= 1:\n            return 0\n        people.sort()\n        boats = 0\n        l = 0\n        r = len(people) - 1\n        while l <= r:\n            if l == r:\n                return boats + 1\n            if people[l] + people[r] <= limit:\n                boats += 1\n                l += 1\n                r -= 1\n            else:\n                boats += 1\n                r -= 1\n        return boats\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people)\n        \n        print(people)\n        \n        l = 0\n        r = len(people) - 1\n        \n        boats = 0\n        while l <= r:\n            if people[r] + people[l] <= limit:\n                r -= 1\n                l += 1\n                boats += 1\n            else:\n                r -= 1\n                boats += 1\n        \n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        r = len(people)-1\n        l = 0\n        trips = 0\n        \n        while r >= l:\n            if people[r] + people[l] <= limit:\n                l += 1\n            trips += 1\n            r -= 1\n        return trips\n            \n        \n                \n        \n                \n            \n        \n        \n                \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        # start at ends and move inward\n        \n        people.sort()\n        start = 0\n        end = len(people) - 1\n        ans = 0\n        \n        while start <= end:\n            ans += 1\n            if people[start] + people[end] <= limit:\n                start += 1\n            end -= 1\n        \n        return ans", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort(reverse=True)\n        l, r = 0, len(people) - 1\n        \n        while l <= r:\n            if people[l] + people[r] <= limit:\n                r -= 1\n            l += 1\n        return l", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people)\n        count = 0\n        left = 0\n        right = len(people) - 1\n\n        while left <= right:\n            cur = people[left] + people[right]\n            if cur <= limit:\n                left += 1\n                right -= 1\n            elif cur > limit:\n                right -= 1\n            count += 1\n\n        return count", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        j = len(people)-1\n        i = 0\n        people = sorted(people)\n        ### since we could max have two people on a boat so we need to add have two ###pointers\n        print(people)\n        count = 0\n        while(i<=j):\n            count = count+1\n            if people[j] + people[i]<=limit:\n                i = i + 1\n                j = j - 1\n            else:\n                j = j - 1\n        return(count)\n            \n            \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        boats = 0\n        people = sorted(people)\n        print(people)\n        i, j = 0, len(people)-1\n        while i <= j:\n            if people[i] + people[j] > limit:\n                j -= 1\n            else:\n                i += 1\n                j -= 1\n            boats += 1\n        \n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        s = []\n        c = 0\n        people.sort(reverse=True)\n        \n        for i in range(len(people)):\n            if s and people[i] < s[-1]:\n                s[-1] = s[-1] - people[i]\n                s.pop()\n            elif s and people[i] == s[-1]:\n                s.pop()\n            elif s and people[i] > s[-1]:\n                s.append(limit - people[i])\n                c += 1\n            elif people[i] == limit:\n                c += 1\n            else:\n                c += 1\n                s.append(limit - people[i])\n        \n        return c\n                \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        less_than_half = dict()\n        more_than_half = dict()\n        half = 0\n        total_boats = 0\n        for person in people:\n            diff = limit - person\n            if diff == 0:\n                total_boats += 1\n                continue\n            if person < limit/2:\n                if diff in more_than_half:\n                    total_boats += 1\n                    if more_than_half[diff] == 1:\n                        del more_than_half[diff]\n                    else:\n                        more_than_half[diff] -= 1\n                else:\n                    if person in less_than_half:\n                        less_than_half[person] += 1\n                    else:\n                        less_than_half[person] = 1\n            elif person > limit/2:\n                if diff in less_than_half:\n                    total_boats += 1\n                    if less_than_half[diff] == 1:\n                        del less_than_half[diff]\n                    else:\n                        less_than_half[diff] -= 1\n                else:\n                    if person in more_than_half:\n                        more_than_half[person] += 1\n                    else:\n                        more_than_half[person] = 1\n            else:\n                if half == 1:\n                    total_boats += 1\n                    half = 0\n                else:\n                    half = 1\n        \n        less_keys = sorted(less_than_half.keys())\n        more_keys = sorted(list(more_than_half.keys()), reverse=True)\n        \n        while len(less_keys) and len(more_keys):\n            if less_keys[0] + more_keys[0] <= limit:\n                if less_than_half[less_keys[0]] < more_than_half[more_keys[0]]:\n                    total_boats += less_than_half[less_keys[0]]\n                    more_than_half[more_keys[0]] -= less_than_half[less_keys[0]]\n                    less_keys.pop(0)\n                elif less_than_half[less_keys[0]] > more_than_half[more_keys[0]]:\n                    total_boats += more_than_half[more_keys[0]]\n                    less_than_half[less_keys[0]] -= more_than_half[more_keys[0]]\n                    more_keys.pop(0)\n                else:\n                    total_boats += less_than_half[less_keys[0]]\n                    less_keys.pop(0)\n                    more_keys.pop(0)\n            else:\n                total_boats += more_than_half[more_keys[0]]\n                more_keys.pop(0)\n                    \n        less_total = 0\n        for k in less_keys:\n            less_total += less_than_half[k]\n        \n        more_total = 0\n        for k in more_keys:\n            more_total += more_than_half[k]\n        \n        # we can pair up each of the less than half weights\n        total_boats += (less_total+half + 1) // 2 + more_total\n        \n        return total_boats\n\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort(reverse=True)\n        first_index = 0\n        second_index = len(people) - 1\n        ans = 0\n        while first_index <= second_index:\n            if people[first_index] + people[second_index] <= limit:\n                second_index -= 1\n            first_index += 1\n            ans += 1\n        return ans", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people)\n        i = 0\n        j = len(people) - 1\n        total = 0\n        while i <= j:\n            if i == j:\n                total += 1\n                i += 1\n                j -= 1\n            else:\n                if people[i] + people[j] <= limit:\n                    i += 1\n                    j -= 1\n                    total += 1\n                else:\n                    j -= 1\n                    total += 1\n        return total\n        # print(people)\n        # while i < len(people):\n        #     print(i,people)\n        #     if i < len(people) - 1 and people[i] + people[i+1] <= limit:\n        #         print(\\\"two peeps\\\")\n        #         i += 2\n        #     else:\n        #         print(\\\"one peep\\\")\n        #         i += 1\n        #     total += 1\n        # return total\n", "class Solution:\n    def numRescueBoats(self, people: List[int], cap: int) -> int:\n        people.sort()\n        N = len(people)\n        i, j = 0, N - 1\n        \n        ans = 0\n        k = cap\n        s = 2\n        \n        while i <= j:\n            # prioritize heavier one\n            while s and j >= 0:\n                if k - people[j] < 0:\n                    break\n                k -= people[j]\n                j -= 1\n                s -= 1\n            # check if we can fit any remainig lighter people\n            while s and i < N:\n                if k - people[i] < 0:\n                    break\n                k -= people[i]\n                i += 1\n                s -= 1\n            k = cap\n            s = 2\n            ans += 1\n        \n        return ans\n            \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        sorted_people = list(sorted(people, reverse=True))\n        \n        i = 0\n        j = len(people) - 1\n        \n        while i <= j:\n            if sorted_people[i] + sorted_people[j] <= limit:\n                j -= 1\n            i += 1\n        \n        return i", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        count = len(people)\n        end = len(people) - 1\n        begin = 0\n        res = 0\n        while count > 0:\n            if people[end] + people[begin] <= limit:\n                res+=1\n                count-=2\n                end-=1\n                begin+=1\n            else:\n                res+=1\n                count-=1\n                end-=1\n        return res", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        groups = self.group_people_by_weight(people, limit)\n        return self.count_num_boats(groups, limit)\n        \n    def group_people_by_weight(self, people, limit):\n        groups = [0] * (limit + 1)\n        for person_weight in people:\n            groups[person_weight] += 1\n        return groups\n    \n    def count_num_boats(self, groups, limit):\n        num_boats = 0\n        start = 0\n        end = len(groups) - 1\n        while start <= end:\n            while start <= end and groups[start] <= 0:\n                start += 1\n            while start <= end and groups[end] <= 0:\n                end -= 1\n            if start > end:\n                break\n            if start + end <= limit:\n                groups[start] -= 1\n            groups[end] -= 1\n            num_boats += 1\n        return num_boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        low = 0\n        up = len(people) - 1\n        boats = 0\n        \n        while(low <= up):\n            if up-1 >= low and people[up] + people[up - 1] <= limit:\n                up -= 2\n                boats += 1\n            elif up != low and people[up] + people[low] <= limit:\n                up -= 1\n                low += 1\n                boats += 1\n            else:\n                up -= 1\n                boats += 1\n                \n        return boats\n", "from collections import deque\nclass Solution:\n    def numRescueBoats(self, people, limit):\n        n = len(people)\n        weights = deque(sorted(people))\n        boat = 0\n        while n > 1:\n            if weights[0] + weights[-1] <= limit:\n                weights.popleft()\n                weights.pop()\n                n -= 2\n            else:\n                weights.pop()\n                n -= 1\n            boat += 1\n        if n == 1: boat += 1\n        return boat", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        l = 0\n        h = len(people) -1\n        remain_capacity = limit\n        if len(people) == 0:\n            return 0\n        boat = 1\n        ppl_in_boat = 2\n        \n        while ( l <= h ):\n            if (people[h] <= remain_capacity and ppl_in_boat != 0):\n                remain_capacity -= people[h]\n                ppl_in_boat -= 1\n                h = h -1                 \n            elif (remain_capacity >= people[l] and ppl_in_boat != 0):\n                remain_capacity -= people[l]\n                ppl_in_boat -= 1\n                l = l +1\n            else:\n                boat +=1\n                remain_capacity = limit\n                ppl_in_boat = 2\n        return boat\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        num_boats = 0\n        counts = [0] * (limit + 1)\n        for person_weight in people:\n            counts[person_weight] += 1\n        \n        start = 0\n        end = len(counts) - 1\n        while start <= end:\n            while start <= end and counts[start] <= 0:\n                start += 1\n            while start <= end and counts[end] <= 0:\n                end -= 1\n            if start > end:\n                break\n            if start + end <= limit:\n                counts[start] -= 1\n            counts[end] -= 1\n            num_boats += 1\n        return num_boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        print(people)\n        low = 0\n        up = len(people) - 1\n        boats = 0\n        \n        while(low <= up):\n            if up-1 >= low and people[up] + people[up - 1] <= limit:\n                up -= 2\n                boats += 1\n            elif up != low and people[up] + people[low] <= limit:\n                up -= 1\n                low += 1\n                boats += 1\n                added = True\n            else:\n                up -= 1\n                boats += 1\n                \n        return boats\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        n = len(people)\n        people.sort()\n        print(people)\n        i = 0\n        j = n-1\n        re = []\n        c = 0\n        tmp = []\n        while i <= j:\n            if people[i] + people[j] > limit:\n                c +=1\n                tmp.append(people[j])\n                re.append(tmp)\n                tmp = []\n                j = j-1\n            else:\n                tmp.append(people[i])\n                tmp.append(people[j])\n                re.append(tmp)\n                tmp = []\n                i = i+1\n                j = j-1\n        print(re)\n        return len(re)\n                \n                    \n                \n                \n            \n        \n        \n                    \n            \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        if people[0] >= limit:\n            return 0\n        res = [0]\n        i, j = 0, len(people) - 1\n        num_people = 0\n        while i <= j:\n            if res[-1] + people[j] <= limit and num_people < 2:\n                res[-1] += people[j]\n                j -= 1\n                num_people += 1\n            elif res[-1] + people[i] <= limit and num_people < 2:\n                res[-1] += people[i]\n                i += 1\n                num_people += 1\n            else:\n                res.append(0)\n                num_people = 0\n        return len(res)", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i,j=0,len(people)-1\n        answer=0\n        while i<j:\n            if people[i]+people[j]<=limit:\n                i+=1\n                j-=1\n            else:\n                j-=1\n            if i==j:\n                answer+=1\n            answer+=1\n        return answer\n                \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i = 0\n        j = len(people) - 1\n        ans = 0\n        \n        while i <= j:\n            ans += 1\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n        return ans", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        num_boats=0\n        last=len(people)-1\n        first=0\n        while first < last:\n            if people[first]+people[last]<=limit:\n                last-=1\n                first+=1\n                num_boats+=1\n            else:\n                num_boats+=1\n                last-=1\n        if first==last:\n            num_boats+=1\n        return num_boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        \n        left=0\n        right=len(people)-1\n        boats = 0\n    \n        while left<=right:\n            if left==right:\n                boats+=1\n                break\n            if people[left] + people[right] <= limit:\n                left+=1\n            #     right-=1\n            #     boats+=1\n            # else:\n            #     right-=1\n            #     boats+=1\n            right-=1\n            boats+=1\n        \n        return boats\n                \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        l = len(people)\n        if (l <= 1):\n            return(1)\n#        people = self.sortPeople(people)\n        people.sort()\n        i = 0; j = l-1; c = 0\n        while i < j:\n            print((i,j,c))\n            if people[i] + people[j] <= limit:\n                c +=1\n                i +=1\n                j -=1\n            else:\n                j -=1\n                c +=1\n        if i == j:\n            c +=1\n        return(c)\n        \n        \n        \n        \n    def sortPeople(self, arr):\n   #     print(arr)\n        l = len(arr)\n        if l <= 1:\n            return(arr)\n        pivot = arr[l-1]\n        larr = [];rarr = []\n        \n        for i in range(l-1):\n            if arr[i] >= pivot:\n                rarr.append(arr[i])\n            else:\n                larr.append(arr[i])\n       # print(larr + [pivot] + rarr)\n        return(self.sortPeople(larr) + [pivot] + self.sortPeople(rarr))\n        \n", "class Solution(object):\n    def numRescueBoats(self, people, limit):\n        people.sort()\n        i, j = 0, len(people) - 1\n        ans = 0\n        while i <= j:\n            ans += 1\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n        return ans", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        l = 0\n        r = len(people)-1\n        res = 0\n        while l <=r:\n            if people[l]+people[r] <= limit:\n                res+=1\n                l+=1\n                r-=1\n            else:\n                res+=1\n                r-=1\n        return res", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i,j=0,len(people)-1\n        res=0\n        while i<=j:\n            res+=1\n            if people[i]+people[j]<=limit:\n                i+=1\n            j-=1\n        return res\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort()\n        if len(people) == 0 or len(people) == 1:\n            return len(people)\n        else:\n            lptr = 0\n            rptr = len(people) - 1\n            count = 0\n            while lptr <= rptr:\n                if( (people[lptr] + people[rptr]) <= limit):\n                    count += 1\n                    lptr += 1\n                    rptr -= 1\n                else:\n                    rptr -= 1\n                    count += 1\n            return count \n            '''\n        people.sort()        \n        left = 0\n        right = len(people) - 1\n        \n        counter = 0\n        while left <= right:\n            if people[left] + people[right] <= limit:\n                left += 1\n                right -= 1\n                counter += 1\n            else: # people[left] + people[right] > limit:\n                right -= 1\n                counter += 1\n            return counter'''\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i, j = 0, len(people) - 1\n        ans = 0\n        while i <= j:\n            ans += 1            \n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n        return ans", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort()\n        \n        l, r = 0, len(people)-1\n        res = 0\n        \n        while l <= r:\n            res += 1\n            if people[l] + people[r] <= limit:\n                l += 1\n            r -= 1\n        return res\n        \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        left = 0\n        right = len(people) - 1\n        number = 0\n        while(left <= right):\n            if (left == right):\n                number +=1\n                break\n            if people[left] + people[right] <= limit:\n                \n                    left= left+1\n            right= right-1\n            number +=1\n        return number \n                \n", "from collections import deque\n\nclass Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = deque(sorted(people))\n        count = 0\n        while len(people) > 1:\n            lightest = people.popleft()\n            heaviest = people.pop()\n            if lightest + heaviest <= limit:\n                count += 1\n                continue\n            else:\n                if lightest < limit:\n                    people.appendleft(lightest)\n                else:\n                    count += 1\n                count += 1\n        return count + len(people)\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        '''\n        time complexity :\n            because of sorting O(Nlog(N))\n            the second loop is smaller so we ignore it\n        \n        space complexity:\n            because of sorting\n            O(N)\n        '''\n        people.sort()\n        left = 0\n        right = len(people)-1\n        boat_number = 0\n\n        while left <= right:\n            if left == right:\n                boat_number += 1\n                break\n            if people[left] + people[right] <= limit:\n                left += 1\n                right -= 1\n                boat_number+=1\n            else:\n                right -= 1\n                boat_number +=1\n\n        return boat_number", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort(reverse=True)\n        \n        res = 0\n        i = 0\n        j = len(people) - 1\n        while i <= j:\n            if people[i] + people[j] <= limit:\n                j -= 1\n            \n            i += 1\n            \n                \n        return i", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        lo, hi = 0, len(people) -1\n        boats = 0\n        \n        while lo <= hi:\n            cap = limit\n            cap -= people[hi] # always take the higher one first\n            hi -= 1\n            \n            if people[lo] <= cap: # if you can take a lower one to pair with higher, then include it\n                lo += 1\n                \n            boats += 1 # increment boat by 1, whether you can only take hi or lo + hi\n            \n        return boats\n        \n        \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        lo = 0\n        count = 0\n        for hi in range(len(people))[::-1]:\n            if lo < hi and people[lo] + people[hi] <= limit:\n                lo += 1\n            if lo == hi:\n                return len(people) - hi\n                \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people)\n        i = 0\n        j = len(people)-1\n        res = 0\n        while i<=j:\n            res+=1\n            if people[i]+people[j]<=limit:\n                i+=1\n            j-=1\n        return res", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i = 0\n        j = len(people)-1\n        boats = 0\n        while i <= j:\n            if i == j or people[i]+people[j] <= limit:\n                boats += 1\n                i += 1\n                j -= 1\n            else:\n                boats += 1\n                j -= 1\n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        n = len(people)\n        i = 0\n        j = n-1\n        \n        boats = 0\n        while i <= j:\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n            # else:\n            #     j -= 1\n            \n            boats += 1\n            \n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people)\n        count = 0\n        i, j = 0, len(people) - 1\n        while 0 <= i < j < len(people):\n            while 0 <= i < j < len(people) and people[i] + people[j] > limit:\n                j -= 1\n                count += 1\n            i += 1\n            j -= 1\n            count += 1\n        if i == j:\n            count += 1\n        return count", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        minBoats = 0\n        people.sort()\n        \n        left = 0\n        right = len(people) - 1\n        \n        while left <= right:\n            if people[left] + people[right] <= limit:\n                left += 1\n            minBoats += 1\n            right -= 1\n                \n        return minBoats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        ret = 0\n        people.sort(reverse = True)\n        start = len(people) - 1\n        for i in range(len(people)):\n            if start >= i:\n                ret += 1\n            temp_lim = limit - people[i]\n            for j in range(start,i,-1):\n                if people[j] <= temp_lim:\n                    start = j - 1\n                    break\n                elif people[j] > temp_lim:\n                    start = j\n                    break\n                \n            print(temp_lim)\n        return ret", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i, j = 0, len(people)-1\n        boats = 0\n        \n        while i <= j:\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n            boats += 1\n            \n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i=0\n        j=len(people)-1\n        m=0\n        while(i<=j):\n            if people[i]+people[j]<=limit:\n                i+=1\n                j-=1\n            else:\n                j=j-1\n            m+=1    \n        return m        ", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        n = len(people)\n        i = 0\n        j = n-1\n        \n        boats = 0\n        while i <= j:\n            if i < j and people[i] + people[j] <= limit:\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n            \n            boats += 1\n            \n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        # Map: of weight to count O(n)\n        # Check limit down\n        \n        people.sort()\n        \n        print(people)\n        boats = 0\n        left_index = 0\n        right_index = len(people) - 1\n        \n        while left_index <= right_index:\n            if people[left_index] + people[right_index] <= limit:\n                left_index += 1\n            \n            boats += 1\n            right_index -= 1\n                \n        return boats\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i=0\n        j=len(people)-1\n        boats=0\n        while(i<=j):\n            if people[i]+people[j]<=limit:\n                i+=1\n                j-=1\n            elif people[i]+people[j]>limit:\n                j-=1\n            boats+=1\n        return boats\n", "# 1, 2, 2, 3 limit = 4\n# l        r\n\n\nclass Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people)\n        \n        left = 0\n        right = len(people) - 1\n        counter = 0\n        while left < right:\n            total = people[left] + people[right]\n            counter += 1\n            right -= 1\n            if total <= limit:\n                left += 1\n        \n        if left == right:\n            counter += 1\n        \n        return counter\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        total = 0 #if len(people)%2 == 0 else 1\n        people.sort()\n        print(people)\n        i = 0 \n        j = len(people) - 1\n        while i <= j:\n            print(j)\n            if (people[i] + people[j]) > limit or i == j:\n                j-=1\n                total+=1\n            else:\n                i+=1\n                j-=1\n                total+=1\n        \n        return total\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort(reverse=True)\n        res = 0\n        print(people)\n        l, r = 0, len(people)-1\n        \n        while(l<=r):\n            \n            print((l, r))\n            remain = limit-people[l]\n            res += 1\n            l += 1\n            if remain - people[r] >= 0:\n                remain -= people[r]\n                r -= 1\n                    \n                    \n        print(res)\n        \n        return res\n\n\n\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n#         start=0\n#         end=len(people)-1\n#         count=0\n#         #people=sorted(people)\n#         while start<=end:\n#             if people[start]+people[end]<=limit:\n#                 start+=1\n            \n#             end-=1\n#          count+=1\n        bucket = [0]*(limit+1)\n        for i in people:\n            bucket[i]+=1\n        start = 0\n        end = len(bucket)-1\n        count=0\n        while start<=end:\n            \n            while start<=end and bucket[start]<=0: start+=1\n            \n            while start<=end and bucket[end]<=0: end-=1\n                \n            if bucket[start]<=0 and bucket[end]<=0: break\n            \n            count+=1\n            if start+end<=limit:\n                bucket[start]-=1\n            \n            bucket[end]-=1\n        \n        \n        return count", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        if people == None or len(people) == 0:\n            return 0\n        people.sort()\n        start = 0\n        end = len(people)-1\n        counter = 0\n        while start <= end:\n            if people[start] + people[end] <=limit:\n                start += 1\n                end -=1\n            else:\n                end -= 1\n            counter += 1\n        return counter", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i,j = 0, len(people) -1\n        ans = 0\n        while i<=j:\n            ans+=1\n            if people[i]+people[j] <= limit:\n                i+=1\n            j-=1\n        return ans", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        left, right = 0, len(people) - 1\n        count = 0\n        while left <= right:\n            if people[left] + people[right] <= limit:\n                left += 1\n                right -= 1\n                count += 1\n            else:\n                right -= 1\n                count += 1\n        return count", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i, j = 0, len(people) -1\n\n        count = 0\n\n        while i <= j:\n            if i == j:\n                count += 1\n                break\n            if people[i] + people[j] <= limit:\n                i+=1\n                j-=1\n            else:\n                j-=1\n            count += 1\n        return count \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        minBoats = 0\n        people.sort()\n        \n        left = 0\n        right = len(people) - 1\n        \n        while left <= right:\n            if people[left] + people[right] <= limit:\n                minBoats += 1\n                left += 1\n                right -= 1\n            elif people[left] + people[right] > limit:\n                minBoats += 1\n                right -= 1\n                \n        return minBoats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i = 0\n        j = len(people)-1\n        total = 0\n        while i <= j:\n            total += 1\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n        return total\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i = 0\n        j = len(people) - 1\n        count = 0\n        while(i <= j):\n            if people[i] + people[j] > limit:\n                count = count + 1\n                j = j - 1\n            else:\n                count = count + 1\n                i = i + 1\n                j = j - 1\n        return(count)\n                \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        q = collections.deque(sorted(people))\n        \n        ans = 0\n        \n        while len(q) > 1:\n            i,x = q.pop(), q[0]\n            if i+x <= limit:\n                q.popleft()\n            ans += 1\n        \n        return ans + (1 if q else 0)\n            \n        \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i = 0\n        j = len(people) - 1\n        ans = 0\n        while i <= j:\n            if i == j:\n                return ans + 1\n            elif people[i] + people[j] > limit:\n                j -= 1\n                ans += 1\n            else:\n                i += 1\n                j -= 1\n                ans += 1\n        return ans", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        total = 0 #if len(people)%2 == 0 else 1\n        people.sort()\n        i = 0 \n        j = len(people) - 1\n        while i <= j:\n            if (people[i] + people[j]) > limit or i == j:\n                j-=1\n                total+=1\n            else:\n                i+=1\n                j-=1\n                total+=1\n        \n        return total\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i,j = 0, len(people)-1\n        count = 0\n        while i <= j:\n            if people[i] + people[j] <= limit:\n                count += 1\n                i += 1\n                j -= 1\n            else:\n                count += 1\n                j -= 1\n        return count\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort(reverse=True)\n        res = 0\n        print(people)\n        l, r = 0, len(people)-1\n        \n        while(l<=r):\n            \n            print((l, r))\n            remain = limit-people[l]\n            res += 1\n            l += 1\n            if remain - people[r] >= 0:\n                remain -= people[r]\n                r -= 1\n                    \n                    \n        print(res)\n        \n        return res\n\n\n\n'''\n\n            \n        \n        \n'''\n\n", "import heapq\nclass Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i, j = 0,len(people)-1\n        ans = 0\n        while i <= j:\n            ans += 1\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n        return ans\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        p1 = 0\n        p2 = len(people) -1\n        count = 1\n        cur = 0\n        curNum = 0\n        while p1 <= p2:\n            if people[p2] <= limit - cur and curNum < 2:\n                cur = cur + people[p2]\n                curNum += 1\n                p2 -=1\n                continue\n            if people[p1] <= limit - cur and curNum < 2:\n                cur = cur + people[p1]\n                curNum += 1\n                p1 += 1\n                continue\n            count += 1\n            cur = 0\n            curNum = 0\n            \n            \n            \n        return count\n            \n            \n            \n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        # sort 1 - sort in the ascending order of weight\n        people.sort()\n        boats = 0\n        i = 0\n        j = len(people) - 1\n        while j>=i:\n            # check if two people can sit in a boat\n            if people[i] + people[j] <= limit:\n                i += 1  \n            j -= 1\n            boats += 1\n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people, reverse=True)\n        boats = 0\n        left = 0\n        right = len(people) - 1\n        while left <= right:\n            if people[left] + people[right] <= limit:\n                right -= 1\n            left += 1\n            boats += 1\n        return boats\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people)\n        i,j = 0, len(people)-1\n        c = 0\n        while i <= j:\n            if people[j] + people[i] <= limit:\n                i += 1\n            j -= 1\n            c += 1\n        return c", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        left = 0\n        right = len(people)-1\n        boat = 0\n        people.sort()\n        while left <= right:\n            if left == right:\n                boat += 1\n                break\n            elif people[left]+people[right] <= limit:\n                left += 1\n                right -= 1\n                boat += 1\n            else:\n                right -= 1\n                boat += 1\n        \n        return boat\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i=0\n        j=len(people)-1\n        boats=0\n        while(i<=j):\n            if people[i]+people[j]<=limit:\n                i+=1\n            \n            j-=1\n            boats+=1\n        return boats\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        if not people or limit == 0:\n            return 0\n        \n        ans = 0\n        people.sort()\n        left, right = 0, len(people) - 1\n        while left <= right:\n            if people[left] + people[right] <= limit:\n                left += 1\n                right -= 1\n            else:\n                right -= 1\n            ans += 1\n        return ans", "from collections import Counter\nclass Solution:               \n    def numRescueBoats(self, people, limit):\n        \n        people.sort(reverse = True) # sort in descending order\n        boats = 0\n        \n        r = len(people) - 1\n        l = 0\n        \n        while l <= r:\n            boats += 1\n            if people[l] + people[r] <= limit:\n                r -= 1\n            l += 1\n        \n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        heap = []\n        people.sort()\n        heap.append((people[len(people)-1], 1))\n        i = len(people)-2\n        while i >= 0:\n            ele = people[i]\n            if limit >= ele + heap[0][0] and heap[0][1] < 2:\n                minimum = heapq.heappop(heap)\n                heapq.heappush(heap, (float('inf'), 2))\n            else:\n                heapq.heappush(heap, (ele, 1))\n            i -= 1\n        print(heap)\n        return len(heap)", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people = sorted(people)\n        l=0\n        r=len(people)-1\n        ret=0\n        while l<r:\n            if people[r]>=limit:\n                ret+=1\n                r-=1\n            elif people[r]+people[l]>limit:\n                ret+=1\n                r-=1\n            else:\n                ret+=1\n                l+=1\n                r-=1\n        if l==r:\n            ret+=1\n        return ret\n", "# O(nlogn) time and O(1) space\n# Greedy approach: pair the heaviest person with the lightest\n# Since there are only 2 people on one boat you don't need to \\\"optimize\\\" the space of the boat to carry the third person. Moreover, you can show that if you can pair the heaviest with second heaviest, you can essentially pair any 2 people on the boat (which is the best case scenario).\nclass Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        ans = 0\n        people.sort()\n        l, r = 0, len(people)-1\n        while l<= r:\n            if people[l] + people[r] <= limit:\n                l += 1\n            r -= 1\n            ans += 1\n        \n        return ans\n", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        people.sort()\n        N = len(people)\n        num_boats = 0\n        \n        if len(people) == 1:\n            return 1\n        \n        less_than_half = [p for p in people if p <= limit/2]\n        more_than_half = [p for p in people if p > limit/2]\n        \n        while len(more_than_half) > 0 and len(less_than_half) > 0:            \n            \n            if more_than_half[-1] + less_than_half[0] > limit:\n                # largest doesn't fit with smallest\n                more_than_half.pop(-1)\n                num_boats += 1\n                continue\n                \n            else:\n                # largest fit with smallest\n                more_than_half.pop(-1)\n                less_than_half.pop(0)\n                num_boats += 1\n                continue      \n                \n        # no more pairings - one of the lists is empty\n        num_boats += len(more_than_half)\n        num_boats += int(len(less_than_half)/2 +0.5)            \n                \n        return num_boats", "class Solution:\n    # Time: O(n*log(n))\n    # Time: O(n)\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i, j = 0, len(people) - 1\n        res = 0\n        while i <= j:\n            res += 1\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -=1\n        return res", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        #does sorting help?\n        # if we sort, we can use a pointer and continue incrementing until weight is over limit\n        \n        people.sort()\n        boats = 0\n        i = 0\n        j = len(people) - 1\n        \n        while i <= j:\n            boats += 1\n            if people[i] + people[j] <= limit:\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n            \n        return boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        sortedPeople = sorted(people)\n        i = 0\n        j = len(sortedPeople) - 1\n        count = 0\n        while i <= j:\n            if i == j:\n                count += 1\n                i += 1\n                j -= 1\n                continue\n            if sortedPeople[i] + sortedPeople[j] <= limit:\n                count += 1\n                i += 1\n                j -= 1\n            else:\n                count += 1\n                j -= 1\n        \n        return count", "class Solution:\n    \n    def numRescueBoats(self, people, limit):\n        people.sort()\n        \n        i, j = 0, len(people)-1\n        ans = 0\n        while i<=j:\n            ans += 1\n            if people[i] + people[j] <= limit:\n                i+= 1\n            j -= 1\n        \n        return ans\n        \n        \n    def numRescueBoats2(self, people: List[int], limit: int) -> int:\n        \n        self.ans = 9999\n        visited = [0 for _ in range(len(people)+1)]\n        \n        def traverse(ind:int, boatCnt:int, boats):\n            if visited[ind]:\n                return\n            if ind == len(people):\n                if boatCnt+1 < self.ans:\n                    print(boats)\n                    self.ans = boatCnt+1\n            else:\n                visited[ind] = 1\n                for i in range(ind+1, len(people)+1):\n                    b = boats[:]\n                    if boatCnt >= len(b):\n                        b.append([])\n\n                    if sum(b[boatCnt]) + people[ind] > limit:\n                        boatCnt += 1\n                        if boatCnt >= len(b):\n                            b.append([])\n                    b[boatCnt].append(people[ind])\n                    traverse(ind+1, boatCnt, b)\n                visited[ind] = 0\n        \n        traverse(0, 0, [])\n        \n        #print(boats)\n        return self.ans", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort(reverse = True)\n        boats = people[:(1+len(people))//2]\n        onboard = [1]*len(boats)\n        \n        i = 0\n        j = len(boats)\n        k = len(people)-1\n        while j <= k:\n            if i == len(boats):\n                boats.append(people[j])\n                j += 1\n                if j > k:\n                    break\n                    \n            target = limit - boats[i]\n            \n            if people[k] > target:\n                i += 1\n                if i == len(boats):\n                    boats.append(people[j])\n                    j += 1\n            else:\n                boats[i] += people[k]\n                k -= 1\n                i += 1\n        \n        return len(boats)", "class Solution:\n    # O(p + plog(p)) = O(p(1 + log(p))) = O(plog(p)) time / O(1) space or memory\n    # where 'p' is the number of people\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        \n        # 1st step: sort the array of people's weights\n        people.sort()\n        \n        # 2nd step: get the current lightest person, fit on the boat, then try to \n        # put also the lightest person if possible\n        # EACH BOAT CARRIES AT MOST 2 PEOPLE\n        nb_of_boats = 0\n        i, j = 0, len(people) - 1\n        \n        while i <= j:\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n            nb_of_boats += 1\n        \n        return nb_of_boats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        # sort list\n        # set l = 0, r = last\n        # see if l+r will fit in boat\n        # if too heavy, put r in boat and iterate r     \n        \n        nboats = 0\n        people.sort(reverse=True)\n        l = 0\n        r = len(people)-1\n        while l < r:\n            if people[l]+people[r] > limit:\n                l += 1\n                nboats += 1\n                if l == r:\n                    nboats += 1\n                    break\n            else:\n                l += 1\n                r -= 1\n                nboats += 1\n                if l == r:\n                    nboats += 1\n                    break\n    \n        return nboats", "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        left = 0\n        right = len(people)-1\n        boat = 0\n        people.sort()\n        while left <= right:\n            if left == right:\n                boat += 1\n                break\n            elif people[left]+people[right] <= limit:\n                left += 1\n                \n            right -= 1\n            boat += 1\n        \n        return boat\n"]