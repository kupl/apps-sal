["from bisect import bisect_left, insort_left\na = []\nn = int(input())\nfor _ in range(n):\n    #print(a)\n    s, d = list(map(int, input().split()))\n    if len(a) == 0:\n        print(s, s+d - 1)\n        a.append((s, s + d - 1))\n        continue\n    p = bisect_left(a, (s, s + d - 1))\n    #print('p', p)\n    ok = True\n    if p > 0 and a[p-1][1] >= s:\n        ok = False\n    if p < len(a) and a[p][0] <= s + d - 1:\n        ok = False\n    if ok:\n        insort_left(a, (s, s + d - 1))\n        print(s, s + d - 1)\n    else:\n        ok = False\n        for i in range(len(a)):\n            if i == 0:\n                if a[0][0] > d:\n                    print(1,d)\n                    a = [(1, d)] + a\n                    ok = True\n                    break\n            else:\n                if a[i - 1][1] + d < a[i][0]:\n                    print(a[i - 1][1] + 1, a[i - 1][1] + d)\n                    insort_left(a, (a[i - 1][1] + 1, a[i - 1][1] + d))\n                    ok = True\n                    break\n        if not ok:\n            print(a[-1][1] + 1, a[-1][1] + d)\n            insort_left(a, (a[-1][1] + 1, a[-1][1] + d))\n", "#!/usr/bin/env python3\n\n\ndef main():\n    try:\n        while True:\n            n = int(input())\n            req = [tuple(map(int, input().split())) for i in range(n)]\n            used = [(req[0][0], req[0][0] + req[0][1])]\n            print(used[0][0], used[0][1] - 1)\n            for start, dur in req[1:]:\n                last = 1\n                for a, b in used:\n                    if last <= start and start + dur <= a:\n                        used.append((start, start + dur))\n                        used.sort()\n                        print(start, start + dur - 1)\n                        break\n                    last = b\n                else:\n                    if start >= used[-1][1]:\n                        used.append((start, start + dur))\n                        used.sort()\n                        print(start, start + dur - 1)\n                    else:\n                        last = 1\n                        for a, b in used:\n                            if a - last >= dur:\n                                used.append((last, last + dur))\n                                used.sort()\n                                break\n                            last = b\n                        else:\n                            used.append((last, last + dur))\n                            # used.sort()\n                        print(last, last + dur - 1)\n\n    except EOFError:\n        pass\n\n\nmain()\n", "n=int(input())\n\nL=[]\n\nfor j in range(n):\n    ch=input().split()\n    s,d=int(ch[0]),int(ch[1])\n    if j==0:\n       \n        print(s,d+s-1)\n        L.append([s,s+d-1])\n        L.sort()\n    else:\n        B=True\n        C=True\n        \n        \n        for i in range(len(L)):\n            \n            if i<(len(L)-1) and s>L[i][1] and s+d-1<L[i+1][0]:\n                print(s,s+d-1)\n                L.append([s,s+d-1])\n                L.sort()\n                C=False\n\n                break\n            \n            if L[i][1]>=s>=L[i][0] or L[i][0]<=(s+d-1)<=L[i][1] or (s<=L[i][0] and (s+d-1)>=L[i][1]):\n                B=False\n                break\n        if B and C:\n            print(s,s+d-1)\n            L.append([s,s+d-1])\n            L.sort()\n            C=False\n        if C:\n            if d<L[0][0]:\n                print(1,d)\n                L.append([1,d])\n                L.sort()\n                C=False\n            else:\n                for i in range(len(L)):\n                    if i<(len(L)-1) and (L[i][1]+d)<L[i+1][0]:\n                        print(L[i][1]+1,L[i][1]+d)\n                        L.append([L[i][1]+1,L[i][1]+d])\n                        L.sort()\n                        C=False\n                        break\n        \n        if not B and C:\n            \n            print(L[len(L)-1][1]+1,L[len(L)-1][1]+d)\n            L.append([L[len(L)-1][1]+1,L[len(L)-1][1]+d])\n            L.sort()\n          \n                        \n", "import sys\n\t\nlines = iter(sys.stdin.read().splitlines())\n\nnext(lines)\n\ns,d = map(int,next(lines).split())\n\ndates = [[0,0],[s, s + d -1],[10000000001,10000000001]]\nres = [[s, s + d -1]]\n\nfor line in lines:\n\ts,d = map(int,line.split())\n\t\n\tnhueco = True\n\t\n\tfor i in range(len(dates)):\n\t\tif s > dates[i][1] and s+d-1 < dates[i+1][0]:\n\t\t\tdates.insert(i+1,[s, s + d -1])\n\t\t\tres.append([s, s + d -1])\n\t\t\tbreak\n\t\telif nhueco and -dates[i][1] +dates[i+1][0] -1 >= d:\n\t\t\tnhueco = False\n\t\t\tld = dates[i][1] + 1\n\t\t\tli = i+1\n\telse:\n\t\tdates.insert(li,[ld, ld + d -1])\n\t\tres.append([ld, ld + d -1])\n\nfor date in res:\n\tprint(\" \".join(map(str,date)))", "t = 1\np = []\nfor i in range(int(input())):\n    s, d = map(int, input().split())\n    if t > s:\n        for i, q in enumerate(p):\n            if q[0] <= s <= q[0] + q[1] - d:\n                print(s, s + d - 1)\n                p.insert(i + 1, [s + d, q[1] - d - s + q[0]])\n                q[1] = s - q[0]\n                break\n        else:\n            for q in p:\n                if q[1] >= d:\n                    print(q[0], q[0] + d - 1)\n                    q[0] += d\n                    q[1] -= d\n                    break\n            else:\n                print(t, t + d - 1)\n                t += d\n    else:\n        p.append([t, s - t])\n        print(s, s + d - 1)\n        t = s + d", "n = int(input())\nl, r = [0] * n, [0] * n\nf = lambda x, y: all(x > r[j] or y < l[j] for j in range(i))\n\nfor i in range(n):\n    x, d = map(int, input().split())\n    y = x + d - 1\n\n    if not f(x, y):\n        k = min(r[j] for j in range(i + 1) if f(r[j] + 1, r[j] + d))\n        x, y = k + 1, k + d\n\n    l[i], r[i] = x, y\n    print(x, y)", "t, p = 1, []\nfor i in range(int(input())):\n    l, d = map(int, input().split())\n    if t > l:\n        for i, q in enumerate(p, 1):\n            if q[0] <= l <= q[1] - d:\n                p.insert(i, [l + d, q[1]])\n                q[1] = l\n                break\n        else:\n            for q in p:\n                if q[0] <= q[1] - d:\n                    l = q[0]\n                    q[0] += d\n                    break\n            else:\n                l = t\n                t += d\n    else:\n        p.append([t, l])\n        t = l + d\n\n    print(l, l + d - 1)", "n = int(input())\n\ncur = []\ndef good(s, e):\n\tif s < 1:\n\t\treturn False\n\tassert s <= e\n\tfor l, r in cur:\n\t\tif max(l, s) <= min(r, e):\n\t\t\treturn False\n\treturn True\n\nfor i in range(n):\n\ts, d = map(int, input().split())\n\te = s+d-1\n\tif not good(s, e):\n\t\ts = int(2e9)\n\t\tif good(1, d):\n\t\t\ts = 1\n\t\tfor l, r in cur:\n\t\t\tif good(l-d, l-1):\n\t\t\t\ts = min(s, l-d)\n\t\t\tif good(r+1, r+d):\n\t\t\t\ts = min(s, r+1)\n\tcur.append((s, s+d-1))\n\tcur.sort()\n\tprint(s, s+d-1)", "def dotwointervals(l1,r1,l2,r2):\n    if(l1<l2 and r1<l2):\n        return 0\n    elif(l1>r2 and r1>r2):\n        return 0\n    return 1\n\nn=int(input())\nlofdays=[]\nfor you in range(n):\n    l=input().split()\n    si=int(l[0])\n    di=int(l[1])\n    if(you==0):\n        lofdays.append((si,si+di-1))\n        print(si,si+di-1)\n    else:\n        nowint=(si,si+di-1)\n        done=1\n        for i in lofdays:\n            \n\n            if(dotwointervals(nowint[0],nowint[1],i[0],i[1])):\n                done=0\n                break\n        if(done==1):\n            lofdays.append(nowint)\n            print(si,si+di-1)\n        else:\n            mina=min(lofdays)\n            if(mina[0]-di>0):\n                print(1,di)\n                lofdays.append((1,di))\n            else:\n                lofdays.sort()\n                done=0\n                for i in range(1,len(lofdays)):\n                    if(lofdays[i][0]-lofdays[i-1][1]-1>=di):\n                        done=1\n                        print(lofdays[i-1][1]+1,lofdays[i-1][1]+di)\n                        lofdays.append((lofdays[i-1][1]+1,lofdays[i-1][1]+di))\n                        break\n                if(done==0):\n                    print(lofdays[-1][1]+1,lofdays[-1][1]+di)\n                    lofdays.append((lofdays[-1][1]+1,lofdays[-1][1]+di))\n"]