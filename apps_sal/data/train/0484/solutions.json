["import bisect\n\n\nclass Solution:\n    def primePalindrome(self, N: int) -> int:\n        return primes[bisect.bisect_left(primes, N)]\n\n\nprimes = [\n    2,\n    3,\n    5,\n    7,\n    11,\n    101,\n    131,\n    151,\n    181,\n    191,\n    313,\n    353,\n    373,\n    383,\n    727,\n    757,\n    787,\n    797,\n    919,\n    929,\n    10301,\n    10501,\n    10601,\n    11311,\n    11411,\n    12421,\n    12721,\n    12821,\n    13331,\n    13831,\n    13931,\n    14341,\n    14741,\n    15451,\n    15551,\n    16061,\n    16361,\n    16561,\n    16661,\n    17471,\n    17971,\n    18181,\n    18481,\n    19391,\n    19891,\n    19991,\n    30103,\n    30203,\n    30403,\n    30703,\n    30803,\n    31013,\n    31513,\n    32323,\n    32423,\n    33533,\n    34543,\n    34843,\n    35053,\n    35153,\n    35353,\n    35753,\n    36263,\n    36563,\n    37273,\n    37573,\n    38083,\n    38183,\n    38783,\n    39293,\n    70207,\n    70507,\n    70607,\n    71317,\n    71917,\n    72227,\n    72727,\n    73037,\n    73237,\n    73637,\n    74047,\n    74747,\n    75557,\n    76367,\n    76667,\n    77377,\n    77477,\n    77977,\n    78487,\n    78787,\n    78887,\n    79397,\n    79697,\n    79997,\n    90709,\n    91019,\n    93139,\n    93239,\n    93739,\n    94049,\n    94349,\n    94649,\n    94849,\n    94949,\n    95959,\n    96269,\n    96469,\n    96769,\n    97379,\n    97579,\n    97879,\n    98389,\n    98689,\n    1003001,\n    1008001,\n    1022201,\n    1028201,\n    1035301,\n    1043401,\n    1055501,\n    1062601,\n    1065601,\n    1074701,\n    1082801,\n    1085801,\n    1092901,\n    1093901,\n    1114111,\n    1117111,\n    1120211,\n    1123211,\n    1126211,\n    1129211,\n    1134311,\n    1145411,\n    1150511,\n    1153511,\n    1160611,\n    1163611,\n    1175711,\n    1177711,\n    1178711,\n    1180811,\n    1183811,\n    1186811,\n    1190911,\n    1193911,\n    1196911,\n    1201021,\n    1208021,\n    1212121,\n    1215121,\n    1218121,\n    1221221,\n    1235321,\n    1242421,\n    1243421,\n    1245421,\n    1250521,\n    1253521,\n    1257521,\n    1262621,\n    1268621,\n    1273721,\n    1276721,\n    1278721,\n    1280821,\n    1281821,\n    1286821,\n    1287821,\n    1300031,\n    1303031,\n    1311131,\n    1317131,\n    1327231,\n    1328231,\n    1333331,\n    1335331,\n    1338331,\n    1343431,\n    1360631,\n    1362631,\n    1363631,\n    1371731,\n    1374731,\n    1390931,\n    1407041,\n    1409041,\n    1411141,\n    1412141,\n    1422241,\n    1437341,\n    1444441,\n    1447441,\n    1452541,\n    1456541,\n    1461641,\n    1463641,\n    1464641,\n    1469641,\n    1486841,\n    1489841,\n    1490941,\n    1496941,\n    1508051,\n    1513151,\n    1520251,\n    1532351,\n    1535351,\n    1542451,\n    1548451,\n    1550551,\n    1551551,\n    1556551,\n    1557551,\n    1565651,\n    1572751,\n    1579751,\n    1580851,\n    1583851,\n    1589851,\n    1594951,\n    1597951,\n    1598951,\n    1600061,\n    1609061,\n    1611161,\n    1616161,\n    1628261,\n    1630361,\n    1633361,\n    1640461,\n    1643461,\n    1646461,\n    1654561,\n    1657561,\n    1658561,\n    1660661,\n    1670761,\n    1684861,\n    1685861,\n    1688861,\n    1695961,\n    1703071,\n    1707071,\n    1712171,\n    1714171,\n    1730371,\n    1734371,\n    1737371,\n    1748471,\n    1755571,\n    1761671,\n    1764671,\n    1777771,\n    1793971,\n    1802081,\n    1805081,\n    1820281,\n    1823281,\n    1824281,\n    1826281,\n    1829281,\n    1831381,\n    1832381,\n    1842481,\n    1851581,\n    1853581,\n    1856581,\n    1865681,\n    1876781,\n    1878781,\n    1879781,\n    1880881,\n    1881881,\n    1883881,\n    1884881,\n    1895981,\n    1903091,\n    1908091,\n    1909091,\n    1917191,\n    1924291,\n    1930391,\n    1936391,\n    1941491,\n    1951591,\n    1952591,\n    1957591,\n    1958591,\n    1963691,\n    1968691,\n    1969691,\n    1970791,\n    1976791,\n    1981891,\n    1982891,\n    1984891,\n    1987891,\n    1988891,\n    1993991,\n    1995991,\n    1998991,\n    3001003,\n    3002003,\n    3007003,\n    3016103,\n    3026203,\n    3064603,\n    3065603,\n    3072703,\n    3073703,\n    3075703,\n    3083803,\n    3089803,\n    3091903,\n    3095903,\n    3103013,\n    3106013,\n    3127213,\n    3135313,\n    3140413,\n    3155513,\n    3158513,\n    3160613,\n    3166613,\n    3181813,\n    3187813,\n    3193913,\n    3196913,\n    3198913,\n    3211123,\n    3212123,\n    3218123,\n    3222223,\n    3223223,\n    3228223,\n    3233323,\n    3236323,\n    3241423,\n    3245423,\n    3252523,\n    3256523,\n    3258523,\n    3260623,\n    3267623,\n    3272723,\n    3283823,\n    3285823,\n    3286823,\n    3288823,\n    3291923,\n    3293923,\n    3304033,\n    3305033,\n    3307033,\n    3310133,\n    3315133,\n    3319133,\n    3321233,\n    3329233,\n    3331333,\n    3337333,\n    3343433,\n    3353533,\n    3362633,\n    3364633,\n    3365633,\n    3368633,\n    3380833,\n    3391933,\n    3392933,\n    3400043,\n    3411143,\n    3417143,\n    3424243,\n    3425243,\n    3427243,\n    3439343,\n    3441443,\n    3443443,\n    3444443,\n    3447443,\n    3449443,\n    3452543,\n    3460643,\n    3466643,\n    3470743,\n    3479743,\n    3485843,\n    3487843,\n    3503053,\n    3515153,\n    3517153,\n    3528253,\n    3541453,\n    3553553,\n    3558553,\n    3563653,\n    3569653,\n    3586853,\n    3589853,\n    3590953,\n    3591953,\n    3594953,\n    3601063,\n    3607063,\n    3618163,\n    3621263,\n    3627263,\n    3635363,\n    3643463,\n    3646463,\n    3670763,\n    3673763,\n    3680863,\n    3689863,\n    3698963,\n    3708073,\n    3709073,\n    3716173,\n    3717173,\n    3721273,\n    3722273,\n    3728273,\n    3732373,\n    3743473,\n    3746473,\n    3762673,\n    3763673,\n    3765673,\n    3768673,\n    3769673,\n    3773773,\n    3774773,\n    3781873,\n    3784873,\n    3792973,\n    3793973,\n    3799973,\n    3804083,\n    3806083,\n    3812183,\n    3814183,\n    3826283,\n    3829283,\n    3836383,\n    3842483,\n    3853583,\n    3858583,\n    3863683,\n    3864683,\n    3867683,\n    3869683,\n    3871783,\n    3878783,\n    3893983,\n    3899983,\n    3913193,\n    3916193,\n    3918193,\n    3924293,\n    3927293,\n    3931393,\n    3938393,\n    3942493,\n    3946493,\n    3948493,\n    3964693,\n    3970793,\n    3983893,\n    3991993,\n    3994993,\n    3997993,\n    3998993,\n    7014107,\n    7035307,\n    7036307,\n    7041407,\n    7046407,\n    7057507,\n    7065607,\n    7069607,\n    7073707,\n    7079707,\n    7082807,\n    7084807,\n    7087807,\n    7093907,\n    7096907,\n    7100017,\n    7114117,\n    7115117,\n    7118117,\n    7129217,\n    7134317,\n    7136317,\n    7141417,\n    7145417,\n    7155517,\n    7156517,\n    7158517,\n    7159517,\n    7177717,\n    7190917,\n    7194917,\n    7215127,\n    7226227,\n    7246427,\n    7249427,\n    7250527,\n    7256527,\n    7257527,\n    7261627,\n    7267627,\n    7276727,\n    7278727,\n    7291927,\n    7300037,\n    7302037,\n    7310137,\n    7314137,\n    7324237,\n    7327237,\n    7347437,\n    7352537,\n    7354537,\n    7362637,\n    7365637,\n    7381837,\n    7388837,\n    7392937,\n    7401047,\n    7403047,\n    7409047,\n    7415147,\n    7434347,\n    7436347,\n    7439347,\n    7452547,\n    7461647,\n    7466647,\n    7472747,\n    7475747,\n    7485847,\n    7486847,\n    7489847,\n    7493947,\n    7507057,\n    7508057,\n    7518157,\n    7519157,\n    7521257,\n    7527257,\n    7540457,\n    7562657,\n    7564657,\n    7576757,\n    7586857,\n    7592957,\n    7594957,\n    7600067,\n    7611167,\n    7619167,\n    7622267,\n    7630367,\n    7632367,\n    7644467,\n    7654567,\n    7662667,\n    7665667,\n    7666667,\n    7668667,\n    7669667,\n    7674767,\n    7681867,\n    7690967,\n    7693967,\n    7696967,\n    7715177,\n    7718177,\n    7722277,\n    7729277,\n    7733377,\n    7742477,\n    7747477,\n    7750577,\n    7758577,\n    7764677,\n    7772777,\n    7774777,\n    7778777,\n    7782877,\n    7783877,\n    7791977,\n    7794977,\n    7807087,\n    7819187,\n    7820287,\n    7821287,\n    7831387,\n    7832387,\n    7838387,\n    7843487,\n    7850587,\n    7856587,\n    7865687,\n    7867687,\n    7868687,\n    7873787,\n    7884887,\n    7891987,\n    7897987,\n    7913197,\n    7916197,\n    7930397,\n    7933397,\n    7935397,\n    7938397,\n    7941497,\n    7943497,\n    7949497,\n    7957597,\n    7958597,\n    7960697,\n    7977797,\n    7984897,\n    7985897,\n    7987897,\n    7996997,\n    9002009,\n    9015109,\n    9024209,\n    9037309,\n    9042409,\n    9043409,\n    9045409,\n    9046409,\n    9049409,\n    9067609,\n    9073709,\n    9076709,\n    9078709,\n    9091909,\n    9095909,\n    9103019,\n    9109019,\n    9110119,\n    9127219,\n    9128219,\n    9136319,\n    9149419,\n    9169619,\n    9173719,\n    9174719,\n    9179719,\n    9185819,\n    9196919,\n    9199919,\n    9200029,\n    9209029,\n    9212129,\n    9217129,\n    9222229,\n    9223229,\n    9230329,\n    9231329,\n    9255529,\n    9269629,\n    9271729,\n    9277729,\n    9280829,\n    9286829,\n    9289829,\n    9318139,\n    9320239,\n    9324239,\n    9329239,\n    9332339,\n    9338339,\n    9351539,\n    9357539,\n    9375739,\n    9384839,\n    9397939,\n    9400049,\n    9414149,\n    9419149,\n    9433349,\n    9439349,\n    9440449,\n    9446449,\n    9451549,\n    9470749,\n    9477749,\n    9492949,\n    9493949,\n    9495949,\n    9504059,\n    9514159,\n    9526259,\n    9529259,\n    9547459,\n    9556559,\n    9558559,\n    9561659,\n    9577759,\n    9583859,\n    9585859,\n    9586859,\n    9601069,\n    9602069,\n    9604069,\n    9610169,\n    9620269,\n    9624269,\n    9626269,\n    9632369,\n    9634369,\n    9645469,\n    9650569,\n    9657569,\n    9670769,\n    9686869,\n    9700079,\n    9709079,\n    9711179,\n    9714179,\n    9724279,\n    9727279,\n    9732379,\n    9733379,\n    9743479,\n    9749479,\n    9752579,\n    9754579,\n    9758579,\n    9762679,\n    9770779,\n    9776779,\n    9779779,\n    9781879,\n    9782879,\n    9787879,\n    9788879,\n    9795979,\n    9801089,\n    9807089,\n    9809089,\n    9817189,\n    9818189,\n    9820289,\n    9822289,\n    9836389,\n    9837389,\n    9845489,\n    9852589,\n    9871789,\n    9888889,\n    9889889,\n    9896989,\n    9902099,\n    9907099,\n    9908099,\n    9916199,\n    9918199,\n    9919199,\n    9921299,\n    9923299,\n    9926299,\n    9927299,\n    9931399,\n    9932399,\n    9935399,\n    9938399,\n    9957599,\n    9965699,\n    9978799,\n    9980899,\n    9981899,\n    9989899,\n    100030001,\n    100050001,\n    100060001,\n    100111001,\n    100131001,\n    100161001,\n    100404001,\n    100656001,\n    100707001,\n    100767001,\n    100888001,\n    100999001,\n    101030101,\n    101060101,\n    101141101,\n    101171101,\n    101282101,\n    101292101,\n    101343101,\n    101373101,\n    101414101,\n    101424101,\n    101474101,\n    101595101,\n    101616101,\n    101717101,\n    101777101,\n    101838101,\n    101898101,\n    101919101,\n    101949101,\n    101999101,\n    102040201,\n    102070201,\n    102202201,\n    102232201,\n    102272201,\n    102343201,\n    102383201,\n    102454201,\n    102484201,\n    102515201,\n    102676201,\n    102686201,\n    102707201,\n    102808201,\n    102838201,\n    103000301,\n    103060301,\n    103161301,\n    103212301,\n    103282301,\n    103303301,\n    103323301,\n    103333301,\n    103363301,\n    103464301,\n    103515301,\n    103575301,\n    103696301,\n    103777301,\n    103818301,\n    103828301,\n    103909301,\n    103939301,\n    104000401,\n    104030401,\n    104040401,\n    104111401,\n    104222401,\n    104282401,\n    104333401,\n    104585401,\n    104616401,\n    104787401,\n    104838401,\n    104919401,\n    104949401,\n    105121501,\n    105191501,\n    105202501,\n    105262501,\n    105272501,\n    105313501,\n    105323501,\n    105343501,\n    105575501,\n    105616501,\n    105656501,\n    105757501,\n    105818501,\n    105868501,\n    105929501,\n    106060601,\n    106111601,\n    106131601,\n    106191601,\n    106222601,\n    106272601,\n    106353601,\n    106444601,\n    106464601,\n    106545601,\n    106555601,\n    106717601,\n    106909601,\n    106929601,\n    107000701,\n    107070701,\n    107121701,\n    107232701,\n    107393701,\n    107414701,\n    107424701,\n    107595701,\n    107636701,\n    107646701,\n    107747701,\n    107757701,\n    107828701,\n    107858701,\n    107868701,\n    107888701,\n    107939701,\n    107949701,\n    108070801,\n    108101801,\n    108121801,\n    108151801,\n    108212801,\n    108323801,\n    108373801,\n    108383801,\n    108434801,\n    108464801,\n    108484801,\n    108494801,\n    108505801,\n    108565801,\n    108686801,\n    108707801,\n    108767801,\n    108838801,\n    108919801,\n    108959801,\n    109000901,\n    109101901,\n    109111901,\n    109161901,\n    109333901,\n    109404901,\n    109434901,\n    109444901,\n    109474901,\n    109575901,\n    109656901,\n    109747901,\n    109777901,\n    109797901,\n    109818901,\n    109909901,\n    109929901,\n    110111011,\n    110232011,\n    110252011,\n    110343011,\n    110424011,\n    110505011,\n    110565011,\n    110676011,\n    110747011,\n    110757011,\n    110909011,\n    110949011,\n    110999011,\n    111010111,\n    111020111,\n    111050111,\n    111070111,\n    111181111,\n    111191111,\n    111262111,\n    111272111,\n    111454111,\n    111484111,\n    111515111,\n    111616111,\n    111686111,\n    111757111,\n    111848111,\n    112030211,\n    112060211,\n    112111211,\n    112161211,\n    112171211,\n    112212211,\n    112434211,\n    112494211,\n    112545211,\n    112636211,\n    112878211,\n    112959211,\n    112969211,\n    112989211,\n    113030311,\n    113090311,\n    113111311,\n    113262311,\n    113282311,\n    113474311,\n    113535311,\n    113565311,\n    113616311,\n    113636311,\n    113888311,\n    113939311,\n    114040411,\n    114191411,\n    114232411,\n    114353411,\n    114383411,\n    114484411,\n    114494411,\n    114535411,\n    114727411,\n    114808411,\n    114818411,\n    114848411,\n    114878411,\n    114898411,\n    115000511,\n    115020511,\n    115060511,\n    115111511,\n    115141511,\n    115191511,\n    115212511,\n    115222511,\n    115404511,\n    115464511,\n    115545511,\n    115636511,\n    115737511,\n    115767511,\n    115797511,\n    115828511,\n    115959511,\n    116000611,\n    116010611,\n    116040611,\n    116424611,\n    116505611,\n    116646611,\n    116696611,\n    116757611,\n    116777611,\n    116828611,\n    116868611,\n    116919611,\n    117070711,\n    117101711,\n    117262711,\n    117272711,\n    117323711,\n    117484711,\n    117505711,\n    117515711,\n    117616711,\n    117686711,\n    117757711,\n    117767711,\n    117797711,\n    117818711,\n    117959711,\n    118252811,\n    118272811,\n    118414811,\n    118464811,\n    118525811,\n    118626811,\n    118686811,\n    118696811,\n    118717811,\n    118818811,\n    118848811,\n    118909811,\n    118959811,\n    119010911,\n    119171911,\n    119202911,\n    119343911,\n    119363911,\n    119454911,\n    119585911,\n    119595911,\n    119646911,\n    119676911,\n    119696911,\n    119717911,\n    119787911,\n    119868911,\n    119888911,\n    119969911,\n    120191021,\n    120242021,\n    120434021,\n    120454021,\n    120494021,\n    120535021,\n    120565021,\n    120646021,\n    120808021,\n    120868021,\n    120989021,\n    121080121,\n    121111121,\n    121131121,\n    121161121,\n    121272121,\n    121282121,\n    121393121,\n    121414121,\n    121555121,\n    121747121,\n    121818121,\n    121878121,\n    121939121,\n    121989121,\n    122040221,\n    122232221,\n    122262221,\n    122292221,\n    122333221,\n    122363221,\n    122373221,\n    122393221,\n    122444221,\n    122484221,\n    122535221,\n    122696221,\n    122787221,\n    122858221,\n    122919221,\n    123161321,\n    123292321,\n    123424321,\n    123484321,\n    123494321,\n    123575321,\n    123767321,\n    123838321,\n    123989321,\n    124000421,\n    124080421,\n    124101421,\n    124131421,\n    124252421,\n    124323421,\n    124333421,\n    124434421,\n    124515421,\n    124525421,\n    124626421,\n    124656421,\n    124717421,\n    124737421,\n    124959421,\n    124989421,\n    125000521,\n    125010521,\n    125232521,\n    125252521,\n    125292521,\n    125343521,\n    125474521,\n    125505521,\n    125565521,\n    125606521,\n    125616521,\n    125757521,\n    125838521,\n    125939521,\n    125979521,\n    125999521,\n    126101621,\n    126161621,\n    126181621,\n    126202621,\n    126212621,\n    126323621,\n    126424621,\n    126484621,\n    126535621,\n    126595621,\n    126616621,\n    126676621,\n    126686621,\n    126727621,\n    126737621,\n    126757621,\n    126878621,\n    127060721,\n    127090721,\n    127131721,\n    127212721,\n    127383721,\n    127494721,\n    127545721,\n    127636721,\n    127656721,\n    127686721,\n    127717721,\n    127747721,\n    127828721,\n    127909721,\n    127929721,\n    128070821,\n    128090821,\n    128121821,\n    128181821,\n    128202821,\n    128252821,\n    128262821,\n    128282821,\n    128444821,\n    128474821,\n    128525821,\n    128535821,\n    128595821,\n    128646821,\n    128747821,\n    128787821,\n    128868821,\n    128919821,\n    128939821,\n    129080921,\n    129202921,\n    129292921,\n    129323921,\n    129373921,\n    129484921,\n    129494921,\n    129535921,\n    129737921,\n    129919921,\n    129979921,\n    130020031,\n    130030031,\n    130060031,\n    130141031,\n    130171031,\n    130222031,\n    130333031,\n    130444031,\n    130464031,\n    130545031,\n    130555031,\n    130585031,\n    130606031,\n    130636031,\n    130717031,\n    130767031,\n    130818031,\n    130828031,\n    130858031,\n    130969031,\n    131030131,\n    131111131,\n    131121131,\n    131222131,\n    131252131,\n    131333131,\n    131555131,\n    131565131,\n    131585131,\n    131646131,\n    131676131,\n    131828131,\n    132010231,\n    132191231,\n    132464231,\n    132535231,\n    132595231,\n    132646231,\n    132676231,\n    132757231,\n    133020331,\n    133060331,\n    133111331,\n    133161331,\n    133252331,\n    133474331,\n    133494331,\n    133575331,\n    133686331,\n    133767331,\n    133818331,\n    133909331,\n    134090431,\n    134181431,\n    134232431,\n    134424431,\n    134505431,\n    134525431,\n    134535431,\n    134616431,\n    134757431,\n    134808431,\n    134858431,\n    134888431,\n    134909431,\n    134919431,\n    134979431,\n    135010531,\n    135040531,\n    135101531,\n    135121531,\n    135161531,\n    135262531,\n    135434531,\n    135494531,\n    135515531,\n    135626531,\n    135646531,\n    135707531,\n    135838531,\n    135868531,\n    135878531,\n    135929531,\n    135959531,\n    135979531,\n    136090631,\n    136171631,\n    136222631,\n    136252631,\n    136303631,\n    136363631,\n    136474631,\n    136545631,\n    136737631,\n    136797631,\n    136818631,\n    136909631,\n    136969631,\n    137030731,\n    137040731,\n    137060731,\n    137090731,\n    137151731,\n    137171731,\n    137232731,\n    137282731,\n    137333731,\n    137363731,\n    137424731,\n    137474731,\n    137606731,\n    137636731,\n    137696731,\n    137757731,\n    137808731,\n    137838731,\n    137939731,\n    137999731,\n    138040831,\n    138131831,\n    138242831,\n    138292831,\n    138313831,\n    138383831,\n    138454831,\n    138575831,\n    138616831,\n    138646831,\n    138757831,\n    138898831,\n    138959831,\n    138989831,\n    139131931,\n    139161931,\n    139222931,\n    139252931,\n    139282931,\n    139383931,\n    139474931,\n    139515931,\n    139606931,\n    139626931,\n    139717931,\n    139848931,\n    139959931,\n    139969931,\n    139999931,\n    140000041,\n    140030041,\n    140151041,\n    140303041,\n    140505041,\n    140565041,\n    140606041,\n    140777041,\n    140787041,\n    140828041,\n    140868041,\n    140898041,\n    141020141,\n    141070141,\n    141131141,\n    141151141,\n    141242141,\n    141262141,\n    141313141,\n    141343141,\n    141383141,\n    141484141,\n    141494141,\n    141575141,\n    141595141,\n    141616141,\n    141767141,\n    141787141,\n    141848141,\n    142000241,\n    142030241,\n    142080241,\n    142252241,\n    142272241,\n    142353241,\n    142363241,\n    142464241,\n    142545241,\n    142555241,\n    142686241,\n    142707241,\n    142797241,\n    142858241,\n    142888241,\n    143090341,\n    143181341,\n    143262341,\n    143303341,\n    143454341,\n    143474341,\n    143585341,\n    143636341,\n    143787341,\n    143828341,\n    143919341,\n    143969341,\n    144010441,\n    144020441,\n    144202441,\n    144212441,\n    144313441,\n    144353441,\n    144404441,\n    144434441,\n    144484441,\n    144505441,\n    144707441,\n    144757441,\n    144808441,\n    144818441,\n    144848441,\n    144878441,\n    144898441,\n    144979441,\n    144989441,\n    145020541,\n    145030541,\n    145090541,\n    145353541,\n    145363541,\n    145393541,\n    145464541,\n    145494541,\n    145575541,\n    145666541,\n    145767541,\n    146030641,\n    146040641,\n    146181641,\n    146222641,\n    146252641,\n    146313641,\n    146363641,\n    146505641,\n    146555641,\n    146565641,\n    146676641,\n    146858641,\n    146909641,\n    147191741,\n    147232741,\n    147242741,\n    147313741,\n    147343741,\n    147373741,\n    147434741,\n    147515741,\n    147565741,\n    147616741,\n    147686741,\n    147707741,\n    147757741,\n    147838741,\n    147929741,\n    148020841,\n    148060841,\n    148080841,\n    148414841,\n    148444841,\n    148525841,\n    148545841,\n    148585841,\n    148666841,\n    148686841,\n    148707841,\n    148818841,\n    148858841,\n    148888841,\n    148969841,\n    149000941,\n    149333941,\n    149343941,\n    149484941,\n    149535941,\n    149555941,\n    149616941,\n    149646941,\n    149696941,\n    149858941,\n    149888941,\n    149909941,\n    149919941,\n    149939941,\n    150070051,\n    150151051,\n    150181051,\n    150202051,\n    150272051,\n    150434051,\n    150494051,\n    150505051,\n    150626051,\n    150686051,\n    150727051,\n    150808051,\n    150818051,\n    150979051,\n    151080151,\n    151161151,\n    151212151,\n    151222151,\n    151282151,\n    151353151,\n    151545151,\n    151585151,\n    151656151,\n    151737151,\n    151777151,\n    151858151,\n    151878151,\n    151888151,\n    151959151,\n    151969151,\n    151999151,\n    152090251,\n    152111251,\n    152171251,\n    152181251,\n    152252251,\n    152363251,\n    152393251,\n    152454251,\n    152505251,\n    152565251,\n    152616251,\n    152646251,\n    152666251,\n    152696251,\n    152888251,\n    152939251,\n    153212351,\n    153272351,\n    153292351,\n    153313351,\n    153323351,\n    153404351,\n    153424351,\n    153454351,\n    153484351,\n    153494351,\n    153626351,\n    153808351,\n    153818351,\n    153838351,\n    153979351,\n    154030451,\n    154191451,\n    154252451,\n    154272451,\n    154303451,\n    154323451,\n    154383451,\n    154393451,\n    154474451,\n    154494451,\n    154555451,\n    154575451,\n    154989451,\n    155060551,\n    155141551,\n    155171551,\n    155292551,\n    155313551,\n    155333551,\n    155373551,\n    155424551,\n    155474551,\n    155535551,\n    155646551,\n    155666551,\n    155676551,\n    155808551,\n    155828551,\n    155868551,\n    156151651,\n    156262651,\n    156343651,\n    156424651,\n    156434651,\n    156494651,\n    156545651,\n    156595651,\n    156656651,\n    156707651,\n    156727651,\n    156757651,\n    156848651,\n    156878651,\n    156949651,\n    157090751,\n    157101751,\n    157161751,\n    157252751,\n    157393751,\n    157444751,\n    157555751,\n    157717751,\n    157878751,\n    157888751,\n    157939751,\n    157959751,\n    157989751,\n    158090851,\n    158111851,\n    158222851,\n    158252851,\n    158363851,\n    158474851,\n    158595851,\n    158676851,\n    158696851,\n    158747851,\n    158808851,\n    158858851,\n    158898851,\n    158909851,\n    159020951,\n    159040951,\n    159050951,\n    159121951,\n    159181951,\n    159191951,\n    159202951,\n    159232951,\n    159262951,\n    159292951,\n    159323951,\n    159404951,\n    159464951,\n    159565951,\n    159595951,\n    159646951,\n    159757951,\n    159808951,\n    159919951,\n    159929951,\n    159959951,\n    160020061,\n    160050061,\n    160080061,\n    160101061,\n    160131061,\n    160141061,\n    160161061,\n    160171061,\n    160393061,\n    160545061,\n    160696061,\n    160707061,\n    160717061,\n    160797061,\n    160878061,\n    161171161,\n    161282161,\n    161313161,\n    161363161,\n    161474161,\n    161484161,\n    161535161,\n    161585161,\n    161636161,\n    161787161,\n    161838161,\n    161969161,\n    162040261,\n    162232261,\n    162404261,\n    162464261,\n    162484261,\n    162565261,\n    162686261,\n    162707261,\n    162757261,\n    162898261,\n    162919261,\n    162949261,\n    162959261,\n    162979261,\n    162989261,\n    163101361,\n    163333361,\n    163434361,\n    163464361,\n    163474361,\n    163494361,\n    163515361,\n    163555361,\n    163606361,\n    163686361,\n    163696361,\n    163878361,\n    163959361,\n    164000461,\n    164070461,\n    164151461,\n    164292461,\n    164333461,\n    164454461,\n    164484461,\n    164585461,\n    164616461,\n    164696461,\n    164717461,\n    164727461,\n    164838461,\n    165101561,\n    165161561,\n    165191561,\n    165212561,\n    165343561,\n    165515561,\n    165535561,\n    165808561,\n    165878561,\n    165898561,\n    165919561,\n    165949561,\n    166000661,\n    166080661,\n    166171661,\n    166191661,\n    166404661,\n    166545661,\n    166555661,\n    166636661,\n    166686661,\n    166818661,\n    166828661,\n    166878661,\n    166888661,\n    166929661,\n    167000761,\n    167111761,\n    167262761,\n    167393761,\n    167454761,\n    167474761,\n    167484761,\n    167636761,\n    167646761,\n    167787761,\n    167888761,\n    167898761,\n    167979761,\n    168151861,\n    168191861,\n    168232861,\n    168404861,\n    168505861,\n    168515861,\n    168565861,\n    168818861,\n    168898861,\n    168929861,\n    168949861,\n    169060961,\n    169131961,\n    169141961,\n    169282961,\n    169333961,\n    169383961,\n    169464961,\n    169555961,\n    169606961,\n    169656961,\n    169666961,\n    169686961,\n    169777961,\n    169797961,\n    169858961,\n    169999961,\n    170040071,\n    170060071,\n    170232071,\n    170303071,\n    170333071,\n    170414071,\n    170424071,\n    170484071,\n    170606071,\n    170616071,\n    170646071,\n    170828071,\n    170838071,\n    170909071,\n    170979071,\n    171080171,\n    171262171,\n    171292171,\n    171343171,\n    171565171,\n    171575171,\n    171767171,\n    171919171,\n    171959171,\n    172060271,\n    172090271,\n    172161271,\n    172353271,\n    172363271,\n    172393271,\n    172474271,\n    172585271,\n    172656271,\n    172747271,\n    172767271,\n    172797271,\n    172878271,\n    172909271,\n    172959271,\n    173000371,\n    173030371,\n    173090371,\n    173252371,\n    173373371,\n    173454371,\n    173525371,\n    173585371,\n    173696371,\n    173757371,\n    173777371,\n    173828371,\n    173868371,\n    173888371,\n    173898371,\n    173919371,\n    174080471,\n    174121471,\n    174131471,\n    174181471,\n    174313471,\n    174343471,\n    174595471,\n    174646471,\n    174676471,\n    174919471,\n    174949471,\n    174979471,\n    174989471,\n    175000571,\n    175090571,\n    175101571,\n    175111571,\n    175353571,\n    175444571,\n    175555571,\n    175626571,\n    175747571,\n    175777571,\n    175848571,\n    175909571,\n    176090671,\n    176111671,\n    176141671,\n    176181671,\n    176232671,\n    176313671,\n    176333671,\n    176373671,\n    176393671,\n    176414671,\n    176585671,\n    176636671,\n    176646671,\n    176666671,\n    176696671,\n    176757671,\n    176787671,\n    176888671,\n    176898671,\n    176939671,\n    177121771,\n    177161771,\n    177202771,\n    177242771,\n    177323771,\n    177565771,\n    177616771,\n    177707771,\n    177757771,\n    177868771,\n    178101871,\n    178131871,\n    178141871,\n    178161871,\n    178353871,\n    178414871,\n    178515871,\n    178525871,\n    178656871,\n    178717871,\n    178747871,\n    178878871,\n    178969871,\n    178989871,\n    178999871,\n    179010971,\n    179060971,\n    179222971,\n    179232971,\n    179262971,\n    179414971,\n    179454971,\n    179484971,\n    179717971,\n    179777971,\n    179808971,\n    179858971,\n    179868971,\n    179909971,\n    179969971,\n    179999971,\n    180070081,\n    180101081,\n    180161081,\n    180292081,\n    180515081,\n    180535081,\n    180545081,\n    180565081,\n    180616081,\n    180757081,\n    180959081,\n    181111181,\n    181515181,\n    181545181,\n    181666181,\n    181737181,\n    181797181,\n    181888181,\n    182010281,\n    182202281,\n    182373281,\n    182585281,\n    182616281,\n    182636281,\n    182777281,\n    182858281,\n    182949281,\n    183232381,\n    183626381,\n    183656381,\n    183737381,\n    183898381,\n    183979381,\n    183989381,\n    184030481,\n    184212481,\n    184222481,\n    184303481,\n    184393481,\n    184414481,\n    184545481,\n    184585481,\n    184606481,\n    184636481,\n    184747481,\n    184818481,\n    184878481,\n    185232581,\n    185373581,\n    185393581,\n    185525581,\n    185555581,\n    185595581,\n    185676581,\n    185757581,\n    185838581,\n    185858581,\n    185868581,\n    185999581,\n    186010681,\n    186040681,\n    186050681,\n    186070681,\n    186101681,\n    186131681,\n    186151681,\n    186161681,\n    186424681,\n    186484681,\n    186505681,\n    186565681,\n    186656681,\n    186676681,\n    186787681,\n    186898681,\n    187090781,\n    187101781,\n    187111781,\n    187161781,\n    187272781,\n    187404781,\n    187434781,\n    187444781,\n    187525781,\n    187767781,\n    187909781,\n    187939781,\n    187999781,\n    188010881,\n    188060881,\n    188141881,\n    188151881,\n    188303881,\n    188373881,\n    188414881,\n    188454881,\n    188505881,\n    188525881,\n    188535881,\n    188616881,\n    188636881,\n    188646881,\n    188727881,\n    188777881,\n    188868881,\n    188888881,\n    188898881,\n    188979881,\n    189080981,\n    189131981,\n    189262981,\n    189292981,\n    189464981,\n    189535981,\n    189595981,\n    189727981,\n    189787981,\n    189838981,\n    189898981,\n    189929981,\n    190000091,\n    190020091,\n    190080091,\n    190101091,\n    190252091,\n    190404091,\n    190434091,\n    190464091,\n    190494091,\n    190656091,\n    190696091,\n    190717091,\n    190747091,\n    190777091,\n    190858091,\n    190909091,\n    191090191,\n    191171191,\n    191232191,\n    191292191,\n    191313191,\n    191565191,\n    191595191,\n    191727191,\n    191757191,\n    191838191,\n    191868191,\n    191939191,\n    191969191,\n    192101291,\n    192191291,\n    192202291,\n    192242291,\n    192313291,\n    192404291,\n    192454291,\n    192484291,\n    192767291,\n    192797291,\n    192898291,\n    193000391,\n    193030391,\n    193191391,\n    193212391,\n    193282391,\n    193303391,\n    193383391,\n    193414391,\n    193464391,\n    193555391,\n    193686391,\n    193858391,\n    193888391,\n    194000491,\n    194070491,\n    194121491,\n    194222491,\n    194232491,\n    194292491,\n    194303491,\n    194393491,\n    194505491,\n    194595491,\n    194606491,\n    194787491,\n    194939491,\n    194999491,\n    195010591,\n    195040591,\n    195070591,\n    195151591,\n    195202591,\n    195242591,\n    195353591,\n    195505591,\n    195545591,\n    195707591,\n    195767591,\n    195868591,\n    195878591,\n    195949591,\n    195979591,\n    196000691,\n    196090691,\n    196323691,\n    196333691,\n    196363691,\n    196696691,\n    196797691,\n    196828691,\n    196878691,\n    197030791,\n    197060791,\n    197070791,\n    197090791,\n    197111791,\n    197121791,\n    197202791,\n    197292791,\n    197343791,\n    197454791,\n    197525791,\n    197606791,\n    197616791,\n    197868791,\n    197898791,\n    197919791,\n    198040891,\n    198070891,\n    198080891,\n    198131891,\n    198292891,\n    198343891,\n    198353891,\n    198383891,\n    198454891,\n    198565891,\n    198656891,\n    198707891,\n    198787891,\n    198878891,\n    198919891,\n    199030991,\n    199080991,\n    199141991,\n    199171991,\n    199212991,\n    199242991,\n    199323991,\n    199353991,\n    199363991,\n    199393991,\n    199494991,\n    199515991,\n    199545991,\n    199656991,\n    199767991,\n    199909991,\n    199999991,\n]\n\n", "class Solution:\n    \n    def next_palindrome(self,n):\n        if self.AreAll9s(n):\n            pal = str(1)  \n            for i in range(1, len(str(n))):  \n                pal = pal + str(0)  \n            pal = pal + str(1)\n            return int(pal)\n            \n        x = len(str(n))\n        if x>2:\n            first_num = n//10**(x-1)\n            if x%2==0:\n                pal = str(1)\n                for i in range(1, len(str(n))):\n                    pal = pal + str(0)\n                pal = pal + str(1)\n                return int(pal)\n            if first_num%2==0 or first_num%5==0:\n                n = (first_num+1) * (10**(x-1))\n            \n        if x%2 == 0:\n            first_half = n//(10**(x//2))\n            first_half_reversed = str(first_half)[::-1]\n            second_half = n%(10**(x//2))\n            if int(first_half_reversed) > second_half:\n                return int(str(first_half)+first_half_reversed)\n            else:\n                first_half = first_half + 1\n                pal = str(first_half)+str(first_half)[::-1]\n                return int(pal)\n            \n        else:\n            first_half = n//(10**(x//2))\n            second_half = n%(10**x//2)\n            first_half_reversed = str(first_half//10)[::-1]\n            if int(first_half_reversed) > second_half:\n                return int(str(first_half)+first_half_reversed)\n            else:\n                first_half = first_half + 1\n                pal = str(first_half)+str(first_half//10)[::-1]\n                return int(pal)\n            \n        \n    def AreAll9s(self,  n):  \n        for i in str(n): \n            if( int(i) != 9 ) : \n                return 0\n        return 1\n    \n    def mrange(self, start, stop, step):\n        while start < stop:\n            yield start\n            start += step\n        \n    def check_prime(self, num):\n        if num == 2:\n            return True\n        if (num < 2) or (num % 2 == 0):\n            return False\n        return all(num % i for i in self.mrange(3, int((num)**0.5) + 1, 2))\n    \n    def primePalindrome(self, N: int) -> int:\n        x = N\n        while x>=N:\n            if x>11:\n                x = self.next_palindrome(x)\n                if self.check_prime(x):\n                    return x\n            else:\n                if self.check_prime(x):\n                    return x\n                x= x+1\n            \n        \n        \n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def checkPrime(x):\n            if x == 1:\n                return False\n\n            for i in range(2, int(math.sqrt(x) + 0.01) + 1):\n                if x % i == 0:\n                    return False\n\n            return True\n        \n        def makePal(ni):\n            n = str(ni)\n            l = len(n)\n            hn = n[:l // 2]\n            rhn = ''.join(reversed(hn))\n            \n            if l % 2 != 0:\n                return int(hn + n[l // 2] + rhn)\n            else:\n                return int(hn + rhn)\n                \n        def nextPal(n):\n            n = n + 10 ** (len(str(n)) // 2)\n            return makePal(n)\n\n        n = makePal(N)\n        if n < N:\n            n = nextPal(n)\n\n        while True:\n            if checkPrime(n):\n                return n\n            n = nextPal(n)", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        def isPrime(num):\n            if num < 2: return False\n            for i in range(2, int(sqrt(num))+1):\n                if num%i == 0 :\n                    return False\n            return True\n        \n        for length in range(1,6):\n            for i in range(10**(length-1), 10**(length)):\n                num = str(i)\n                palindrome = int(num + num[-2::-1])\n                if palindrome >= N and isPrime(palindrome):\n                    return min(palindrome, 11) if N <= 11 else palindrome\n        \n        return 0", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        if N == 1:\n            return 2\n        if N <= 3 or N ==5 or N == 7:\n            return N\n        if N == 4:\n            return 5\n        if N == 6:\n            return 7\n        if N <= 11:\n            return 11\n        \n        \n        for i in range(10, 2*10**4):\n            s = str(i)\n            num = int(s + s[:-1][::-1])\n            if num >= N and self.is_prime(num):\n                return num\n        \n    def is_prime(self, num):\n        i = 2 \n        while i*i <= num:\n            if num%i == 0:\n                return False\n            i += 1\n        return True", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        \n        def get_palindromes(n):\n            if n == 1:\n                for i in range(10):\n                    yield i\n            elif n % 2 == 0:\n                d = n // 2\n                for i in range(10**(d-1), 10**d):\n                    s = str(i)\n                    yield int(s + s[::-1])\n            else:\n                d = n // 2\n                for i in range(10**(d-1), 10**d):\n                    s = str(i)\n                    for j in range(10):\n                        yield int(s + str(j) + s[::-1])\n        \n        def check_prime(num):\n            if num==1:\n                return False\n            elif num==2:\n                return True\n            for i in range(2, int(num**0.5+1)):\n                if num%i==0:\n                    return False\n            return True        \n        \n        digits = len(str(N))\n        while True:\n            for n in get_palindromes(digits):\n                if n>=N and check_prime(n):\n                    return n\n            digits+=1", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        \n        def get_palindromes(n):\n            if n == 1:\n                for i in range(10):\n                    yield i\n            elif n % 2 == 0:\n                d = n // 2\n                for i in range(10**(d-1), 10**d):\n                    s = str(i)\n                    yield int(s + s[::-1])\n            else:\n                d = n // 2\n                for i in range(10**(d-1), 10**d):\n                    s = str(i)\n                    for j in range(10):\n                        yield int(s + str(j) + s[::-1])\n        \n        def check_prime(x):\n            if x == 1:\n                return False\n            if x == 2:\n                return True\n            for i in range(2, int(x**0.5+1)):\n                if x % i == 0:\n                    return False\n            return True        \n        \n        digits = len(str(N))\n        while True:\n            for n in get_palindromes(digits):\n                if n>=N and check_prime(n):\n                    return n\n            digits+=1", "class Solution:\n    def is_prime(self,N):\n        if N==1:\n            return False\n\n        for i in range(2,int(math.sqrt(N))+1):\n            if N%i==0:\n                return False\n        else:\n            return True\n\n    def primePalindrome(self, N: int) -> int:\n        if N>=8 and N<=11:\n            return 11\n        for i in range(1,100000):\n            s=str(i)\n            d=s[::-1]\n            y=int(s+d[1:])\n            if y>=N and self.is_prime(y):\n                return y", "from math import sqrt\n\nclass Solution:\n    def primePalindrome(self, N: int) -> int:\n        ans = 9999999999\n        MAX_K = 20_000\n        \n        if 8 <= N <= 11:\n            return 11\n        \n        for i in range(2, MAX_K):\n            # no need for even as would be div by 11\n            o = make_odd_palindrome(i)      \n            if o >= N and is_prime(o):\n                return o\n\n        return ans   \n    \ndef make_odd_palindrome(n: int) -> int:\n    s = str(n)\n    p = s[:-1]\n    odd = int(p + s[-1] + p[::-1])\n    return odd\n    \ndef is_prime(n: int) -> bool:\n    for i in range(2, int(sqrt(n)) + 5):\n        if n % i == 0 and n != i:\n            return False\n        \n    return True", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        if N < 12:\n            for i in range(1, 12):\n                if self.isPrime(i) and i >= N:\n                    return i\n        strN = str(N)\n        strLen = len(strN)\n        if strLen % 2 == 0:\n            startPoint = 10 ** (strLen - strLen // 2)\n        else:\n            startPoint = int(strN[:strLen - strLen//2])\n        for point in range(startPoint, 10**6):\n            strPoint = str(point)\n            palindrome = int(strPoint + strPoint[-2::-1])\n            if palindrome >= N and self.isPrime(palindrome):\n                return palindrome\n    def isPrime(self, p):\n        return p > 1 and all(p % d for d in range(2, int(p**0.5)+1))\n            \n        \n", "class Solution(object):\n    def primePalindrome(self, N):\n        def is_prime(n):\n            return n > 1 and all(n%d for d in range(2, int(n**.5) + 1))\n\n        for length in range(1, 6):\n            #Check for odd-length palindromes\n            for root in range(10**(length - 1), 10**length):\n                s = str(root)\n                x = int(s + s[-2::-1]) #eg. s = '123' to x = int('12321')\n                if x >= N and is_prime(x):\n                    return x\n                    #If we didn't check for even-length palindromes:\n                    #return min(x, 11) if N <= 11 else x\n\n            #Check for even-length palindromes\n            for root in range(10**(length - 1), 10**length):\n                s = str(root)\n                x = int(s + s[-1::-1]) #eg. s = '123' to x = int('123321')\n                if x >= N and is_prime(x):\n                    return x", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        digits = len(str(N))\n        \n        while True:\n            for num in self.get_pali(digits):\n                if num >= N and self.is_prime(num):\n                    return num\n            digits += 1\n    \n    def get_pali(self, digits):\n        if digits == 0:\n            yield 0\n        elif digits == 1:\n            for i in range(10):\n                yield i\n        elif digits % 2 == 0:\n            half = digits//2\n            for i in range(10**(half-1), 10**half):\n                yield int(str(i)+(str(i)[::-1]))\n        else:\n            half = digits//2\n            for i in range(10**(half-1), 10**half):\n                for j in range(10):\n                    yield int( str(i) + str(j) + str(i)[::-1]  )\n    \n    def is_prime(self, num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, int(num**0.5+1)):\n            if num % i == 0:\n                return False\n        return True\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def is_prime(n):\n            return n > 1 and all(n % d for d in range(2, int(n ** 0.5) + 1))\n        \n        for length in range(1, 6):\n            for root in range(10**(length - 1), 10 ** length):\n                s = str(root)\n                x = int(s + s[-2::-1])\n                if x >= N and is_prime(x):\n                    return x\n                \n            for root in range(10**(length - 1), 10 ** length):\n                s = str(root)\n                x = int(s + s[-1::-1])\n                if x >= N and is_prime(x):\n                    return x", "class Solution:\n    def is_prime(n: int) -> bool:\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i = i + 1\n        return True\n\n\n    def is_palindrome(n: int) -> bool:\n        num_string = str(n)\n        num_length = len(num_string)\n\n        if num_string[num_length - 1] == 0:\n            return False\n\n        i = 0\n        while i < num_length - i - 1:\n            if num_string[i] != num_string[num_length - i - 1]:\n                return False\n            i = i + 1\n\n        return True\n\n\n    def prime_palindrome(n: int) -> int:\n        answer = n\n\n        if answer <= 2:\n            return 2\n\n        if 7 < answer <= 11:\n            return 11\n\n        if answer % 2 == 0:\n            answer = answer + 1\n\n        while True:\n            num_length = len(str(answer))\n            if num_length % 2 == 0:\n                answer = 10 ** num_length + 1\n                continue\n            elif Solution.is_palindrome(answer) and Solution.is_prime(answer):\n                return answer\n            answer = answer + 2\n    \n    \n    def primePalindrome(self, N: int) -> int:\n        return Solution.prime_palindrome(N)\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        def isprime(i):\n            if i == 1:\n                return False\n            for j in range(2,int(i**(0.5))+1):\n                if i%j == 0:\n                    return False\n            return True\n        \n        i = N\n        while i < 2*(10**10):\n            x = str(i)\n            if len(x)%2 == 0 and len(x)>2:\n                i = 10 ** (len(x))\n                continue\n            elif x == x[::-1]:\n                if isprime(i):\n                    return i\n            i += 1\n            \n                    \n", "# Math\n# Explanation: Solution 1\n# O(n)\n# O(logn)\n\nclass Solution:\n    def primePalindrome(self, N: int) -> int:\n        def is_prime(n):\n            return n > 1 and all(n%d for d in range(2, int(n**.5) + 1))\n        \n        for length in range(1,6):\n            for root in range(10**(length-1),10**(length)):\n                s = str(root)\n                x = int(s+s[-2::-1])\n                if x>=N and is_prime(x):\n                    return x\n            \n            for root in range(10**(length-1),10**(length)):\n                s = str(root)\n                x = int(s+s[-1::-1])\n                if x>=N and is_prime(x):\n                    return x", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        def isPrime(n):\n            return n > 1 and all( n % f for f in range(2, int(n ** .5)+1) )\n        \n        def isPalin(n):\n            tmp = str(n)\n            return tmp == tmp[::-1]\n        \n        while True:\n            if isPalin(N) and isPrime(N):\n                return N\n            \n            N += 1\n            if 12 <= N <= 99:\n                N = 100\n            elif 1000 <= N <= 9999:\n                N = 10000\n            elif 100000 <= N <= 999999:\n                N = 1000000\n            elif 10000000 <= N <= 99999999:\n                N = 100000000\n        \n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        # Brutal force over time limit\n        if N == 1 or N == 2:\n            return 2\n        \n        def isprime(k):\n            j = 3\n            while j*j <= k:\n                if k%j == 0:\n                    return False\n                j += 2\n            return True\n        \n        \n        i = N//2*2+1\n        while i < 10**7:\n            if str(i) == str(i)[::-1]:\n                if isprime(i):\n                    return i\n            i += 2\n        return 100030001", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        if N < 12:\n            for i in range(1, 12):\n                if self.isPrime(i) and i >= N:\n                    return i\n        strN = str(N)\n        strLen = len(strN)\n        if strLen % 2 == 0:\n            startPoint = 10 ** (strLen // 2)\n        else:\n            startPoint = int(strN[:strLen//2+1])\n        for point in range(startPoint, 10**6):\n            strPoint = str(point)\n            palindrome = int(strPoint + strPoint[-2::-1])\n            if palindrome >= N and self.isPrime(palindrome):\n                return palindrome\n    def isPrime(self, p):\n        return p > 1 and all(p % d for d in range(2, int(p**0.5)+1))\n            \n        \n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        if N == 1:\n            return 2\n\n        N_ary = []\n        compute_N = N\n        while not compute_N == 0:\n            N_ary.insert(0, compute_N % 10)\n            compute_N //= 10\n            \n        middle = len(N_ary) // 2\n        for i in range(middle, len(N_ary)):\n            N_ary[i] = N_ary[len(N_ary) - 1 - i] = min(N_ary[i], N_ary[len(N_ary) - 1 - i])\n            \n        result = 0\n        while True:\n            num = self.ary_to_int(N_ary)\n            if num < N:\n                N_ary = self.compute_next_ary(N_ary)\n                continue\n            is_prime = True\n            for i in range(2, num):\n                if i**2 > num:\n                    break\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime == True:\n                result = num\n                break\n            N_ary = self.compute_next_ary(N_ary)\n            \n        return result\n\n\n    def ary_to_int(self, ary: List[int]) -> int:\n        result = 0\n        for num in ary:\n            result = result * 10 + num\n        return result\n    \n        \n    def compute_next_ary(self, ary: List[int]) -> List[int]:\n        middle = len(ary) // 2\n\n        is_all_nine = True\n        for i in range(middle, len(ary)):\n            if not ary[i] == 9:\n                is_all_nine = False\n                break                \n        if is_all_nine:\n            ary = [0 for i in range(len(ary) + 1)]\n            ary[0] = ary[-1] = 1\n            return ary\n        \n        for i in range(middle, len(ary)):\n            if ary[i] == 9:\n                ary[i] = ary[len(ary) - 1 - i] = 0\n            else:\n                ary[i] = ary[len(ary) - 1 - i] = ary[i] + 1\n                break\n        return ary\n", "class Solution(object):\n    def primePalindrome(self, N):\n        def is_prime(n):\n            return n > 1 and all(n%d for d in range(2, int(n**.5) + 1))\n\n        for length in range(1, 6):\n            #Check for odd-length palindromes\n            for root in range(10**(length - 1), 10**length):\n                s = str(root)\n                x = int(s + s[-2::-1]) #eg. s = '123' to x = int('12321')\n                if x >= N and is_prime(x):\n                    return x\n                    #If we didn't check for even-length palindromes:\n                    #return min(x, 11) if N <= 11 else x\n\n            #Check for even-length palindromes\n            for root in range(10**(length - 1), 10**length):\n                s = str(root)\n                x = int(s + s[-1::-1]) #eg. s = '123' to x = int('123321')\n                if x >= N and is_prime(x):\n                    return x\n\n\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def even_palindrome(n: int) -> int:\n            return int(str(n) + str(n)[::-1])\n        \n        def odd_palindrome(n: int) -> int:\n            return int(str(n) + str(n)[::-1][1:])\n        \n        def is_prime(n: int) -> int:\n            return n > 1 and all(n%i for i in range(2, int(n**.5)+1))\n        \n        odd, even = 1, 1\n        while True:\n            next_even = even_palindrome(even)\n            next_odd = odd_palindrome(odd)\n            # print(next_even, next_odd)\n            cur = min(next_even, next_odd)\n            if cur >= N and is_prime(cur):\n                return cur\n            if next_even > next_odd:\n                odd += 1\n            else:\n                even += 1        ", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def isPrime(n):\n            if n > 1:\n                if n == 2:\n                    return True\n                if n % 2 == 0:\n                    return False\n                for x in range(3, int(n**.5 + 1), 2):\n                    if n % x == 0:\n                        return False\n                return True\n            return False\n        def nextPalind(N):\n            i = N + 1\n            while True:\n                if str(i) == str(i)[::-1]:\n                    return i\n                else:\n                    i += 1\n        if N >= 9989900:\n            return 100030001\n        \n        if isPrime(N) and (str(N)==str(N)[::-1]):\n            return N\n        else:\n            i = nextPalind(N)\n            while not isPrime(i):\n                i = nextPalind(i)\n            return i", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        if N == 1:\n            return 2\n        \n        import math\n        def isPrime (n):\n            \n            lm = int (math.floor (math.sqrt(n)))\n            for i in range (2, lm+1):\n                if n%i == 0:\n                    return False\n                \n            return True\n        \n        def odd (n):\n            \n            t = n\n            n = n//10\n            mul = 1\n            new = 0\n            while n:\n                new = new*10 + (n%10)\n                mul = mul*10\n                n = n//10\n                \n            return t*mul+new\n        \n        def even (n):\n            \n            t = n\n            mul = 1\n            new = 0\n            while n:\n                new = new*10 + (n%10)\n                mul = mul*10\n                n = n//10\n                \n            return t*mul + new\n        \n        o = 1\n        e = 1\n        \n        while True:\n            \n            opal = odd (o)\n            epal = even (e)\n            #print (opal, epal)\n            \n            if opal < epal:\n                if opal >= N and isPrime (opal):\n                    return opal\n                o += 1\n            else:\n                if epal >= N and isPrime (epal):\n                    return epal\n                e += 1            ", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        @lru_cache(None)\n        def isPrime(n):\n            if n == 1:\n                return False\n            for i in range(2, int(sqrt(n))+1):\n                if isPrime(i):\n                    if n % i == 0:\n                        return False\n            return True\n\n        def isPalindrome(n):\n            return n == int(str(n)[::-1])\n\n        while True:\n            if isPalindrome(N) and isPrime(N):\n                return N\n            N += 1\n            length = len(str(N))\n            if length > 2 and length % 2 == 0:\n                N = int('1'+'0'*(length-1) + '1')\n        return None", "def isPrimes(n):\n    return n > 1 and all(n%d > 0 for d in range(2, int(sqrt(n)) + 1))\n\ndef reverse(x):\n    return int(str(x)[::-1])\n\nclass Solution:\n    def primePalindrome(self, N: int) -> int:\n        if N >= 9989900:\n            return 100030001\n        while True:\n            if N == reverse(N) and isPrimes(N):\n                return N\n            N += 1\n        \n", "class Solution:\n\n    def is_prime(self, n):\n        small_primes = (2, 3, 5, 7, 11, 13, 17, 19)\n        if n == 1:\n            return False\n        if n in small_primes:\n           return True\n        for p in small_primes:\n            if n % p == 0:\n                return False\n        check_limit = int(n**0.5)+1\n        for p in range(small_primes[-1], check_limit, 2):\n            if n % p == 0:\n                return False\n        return True\n\n    def is_odd_len_palindrome(self, n):\n        n_str = str(n)\n        total_digit = len(n_str)\n        len_is_odd = total_digit % 2 != 0\n        if not len_is_odd:\n            return False\n        half_len_n = int((total_digit+1)/2)\n        if n_str[:half_len_n] != n_str[total_digit-half_len_n:][::-1]:\n            return False\n        return True\n\n    def find_odd_len_palindrome_after_n(self, n):\n        if n < 9:\n            return n + 1\n        elif n < 11:\n            return 11\n        n_str = str(n)\n        total_digit = len(n_str)\n        len_is_odd = total_digit % 2 != 0\n        if not len_is_odd:\n            return int('1' + '0'*(total_digit-1) + '1')\n        half_len_n = int((total_digit+1)/2)\n        left_str = n_str[:half_len_n]\n        right_str = left_str[:total_digit-half_len_n][::-1]\n        p = int(left_str+right_str)\n        if p > n:\n            return p\n        else:\n            left = int(left_str)\n            left += 1\n            increase_digit = len(str(left)) > len(left_str)\n            left_str = str(left)\n            if increase_digit:\n                return int('1' + '0' * total_digit + '1')\n            left_str = left_str[:half_len_n]\n            right_str = left_str[:total_digit-half_len_n][::-1]\n            return int(left_str+right_str)\n\n\n    def primePalindrome(self, N: int) -> int:\n        if self.is_odd_len_palindrome(N) and self.is_prime(N):\n            return N\n        elif N == 11:\n            return N\n        i = self.find_odd_len_palindrome_after_n(N)\n        while i < 2 * 10 ** 8:\n            if self.is_prime(i):\n                return i\n            i = self.find_odd_len_palindrome_after_n(i)\n        return i\n", "class Solution:\n    \n    def primePalindrome(self, N: int) -> int:\n        \n        def is_prime(num):\n            return num>1 and all(num%d for d in range(2,int(num**0.5)+1))\n                \n        while True:\n            if str(N)==str(N)[::-1] and is_prime(N):\n                return N\n            N+=1\n            if 10**7<N<10**8:\n                N=10**8\n        \n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def isPrime(num):\n            if num == 1:\n                return False\n            for div in range(2,int(num**0.5)+1):\n                if num%div == 0:\n                    return False\n            return True\n\n        def isPalindrome(num):\n            num = str(num)\n            left = 0\n            right = len(num)-1\n            while left < right:\n                if num[left] != num[right]:\n                    return False\n                left += 1\n                right -= 1\n            return True\n\n        while True:\n            if isPalindrome(N) and isPrime(N):\n                break\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8\n        return N", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        for i in range(N, 10**7+1):\n            if not self.isPalindrome(i): continue\n            if not self.isPrime(i): continue\n            return i\n        \n        for i in range(10**8, 2*10**8):\n            if not self.isPalindrome(i): continue\n            if not self.isPrime(i): continue\n            return i\n        \n    def isPalindrome(self, i):\n        i = str(i)\n        return i == i[::-1]\n    \n    def isPrime(self, i):\n        return i > 1 and all([i%d != 0 for d in range(2, int(sqrt(i))+1)])", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        if N == 1:\n            return 2\n        def isPrime(num):\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n        while str(N) != str(N)[::-1] or not isPrime(N):\n            N += 1\n            if 10 ** 7 < N < 10 ** 8:\n                N = 10 ** 8\n        return N", "\nclass Solution:\n    def primePalindrome(self, N: int) -> int:\n        def isPrime(x):\n            '''\n            for i in range(2,int(sqrt(x))+1):\n                if x % i == 0:\n                    return False\n            return True\n            '''\n            return x > 1 and all(x%d for d in range(2,int(x**.5)+1))\n        def isPalindrome(x):\n            x = str(x)\n            if len(x) == 1:\n                return True\n            i = 0\n            j = len(x) - 1\n            while i < j:\n                if x[i] == x[j]:\n                    i += 1\n                    j -= 1\n                else:\n                    return False\n            return True\n        if N <= 1:\n            return 2\n        i = N\n        while True:\n            if str(i) == str(i)[::-1] and isPrime(i):\n                return i\n            i += 1\n            if 10**7 < i < 10**8:\n                i = 10**8\n        return -1\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def reverse(n):\n            return int(str(n)[::-1])\n        \n        def isPrime(n):\n            return n > 1 and all(n%d for d in range(2, int(n**.5) + 1))\n        \n        while True:\n            if N == reverse(N) and isPrime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def is_prime(n):\n            return n > 1 and all(n % d for d in range(2, int(n**.5) + 1))\n\n        def reverse(x):\n            return int(str(N)[::-1])\n\n        while True:\n            if N == reverse(N) and is_prime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8\n        \n        return 2*(10**8)", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        def isprime(N):\n            if N <= 1: return False\n            n = 2\n            while n <= N**.5:\n                if N%n == 0:\n                    return False\n                n += 1\n            return True\n        \n        def ispali(N):\n            s = str(N)\n            i, j = 0, len(s)-1\n            while i <= j:\n                if s[i] != s[j]:\n                    return False\n                i +=1\n                j -=1\n            return True\n        \n        \n        while 1:\n            if ispali(N):\n                if isprime(N):\n                    return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def check_p(n):\n            return n>1 and all(n%d for d in range(2, int(n**0.5)+1))\n        while True:\n            if str(N)==str(N)[::-1] and check_p(N):\n                return N\n            N+=1\n            if 10**8>N>10**7:\n                N=10**8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def ispad(n):\n            n = str(n)\n            n = list(n)\n            left, right = 0,len(n)-1\n            while left < right:\n                if n[left] != n[right]:\n                    return False\n                left += 1\n                right -= 1\n            return True\n            \n        \n        def isprime(n):\n            for i in range(2, int(n**.5)+1):\n                if n%i==0:\n                    return False\n            return True\n        \n        if N==1:\n            return 2\n        \n        while True:\n            if ispad(N) and isprime(N):\n                return N\n            N+=1\n            if 10**7 < N < 10**8:\n                N = 10**8\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        i = N\n        while True:\n            if self.isPalindrome(str(i)):\n                if self.isPrime(i):\n                    return i\n            i += 1\n            if 10**7 < i < 10**8:\n                i = 10**8\n            \n    def isPalindrome(self, s):\n        for i in range(0, len(s) // 2):\n            if s[i] != s[len(s)-1-i]:\n                return False\n        return True\n\n    def isPrime(self, n):\n        if n < 2 or len(str(n)) == 8:\n            return False\n        \n        upper = int(sqrt(n))\n        for i in range(2, upper+1):\n            if n % i == 0:\n                return False\n        return True\n\n        # return True\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def isPrime(x):\n            if x == 1:\n                return False\n            for i in range(2,int(x**0.5)+1):\n                if x%i == 0:\n                    return False\n            return True\n\n        def isPalindrome(x):\n            x = str(x)\n            l = [ch for ch in x]\n            return l[::-1]==l\n           \n        while True:\n            if isPalindrome(N) and isPrime(N):\n                break\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8\n        return N", "class Solution(object):\n    def primePalindrome(self, N):\n        def is_prime(n):\n            return n > 1 and all(n % d for d in range(2, int(n**.5) + 1))\n\n        def reverse(x):\n            ans = 0\n            while x:\n                ans = 10 * ans + x % 10\n                x //= 10\n            return ans\n\n        while True:\n            if N == reverse(N) and is_prime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def isPrime(n):\n            if n<=1: return False\n            else:\n                return all(n%d for d in range(2,int(n**0.5)+1))\n        def reverse(n):\n            ans = 0\n            while n:\n                ans = 10*ans+n%10\n                n = n//10\n            return ans\n        while True:\n            if N==reverse(N) and isPrime(N):\n                return N\n            N += 1\n            if 10**7<N<10**8:\n                N = 10**8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def is_prime(n):\n            return n > 1 and all(n % d for d in range(2, int(n**.5) + 1))\n\n        while True:\n            if str(N) == str(N)[::-1] and is_prime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def is_prime(n):\n            return n > 1 and all(n % d for d in range(2, int(n**.5) + 1))\n\n        def reverse(x):\n            ans = 0\n            while x:\n                ans = 10 * ans + x % 10\n                x //= 10\n            return ans\n\n        while True:\n            if N == reverse(N) and is_prime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        # Brute Force with Mathematical Shortcut\n        # Time  complexity: O(N)\n        # Space complexity: O(1)\n        def is_prime(n):\n            return n > 1 and all(n % d for d in range(2, int(n**.5) + 1))\n\n        def reverse(x):\n            ans = 0\n            while x:\n                ans = 10 * ans + x % 10\n                x //= 10\n            return ans\n\n        while True:\n            if N == reverse(N) and is_prime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8\n", "def isPrimes(n):\n    return n > 1 and all(n%d > 0 for d in range(2, int(sqrt(n)) + 1))\n\ndef reverse(x):\n    ans = 0\n    while x:\n        ans = 10*ans + x%10\n        x //= 10\n    return ans\n\nclass Solution:\n    def primePalindrome(self, N: int) -> int:\n        while True:\n            if N == reverse(N) and isPrimes(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def isPrime(N):\n            return N > 1 and all(N % d for d in range(2, int(N**0.5)+1))\n        \n        # N must be a palindrome with odd number of digits.\n        # The return value will have odd number of digits too.\n        def nextPalindrome(N):\n            if N in [999, 99999, 9999999]:\n                return (N + 1) * 10 + 1\n            n = str(N // 10 ** (len(str(N))//2) + 1)\n            return int(n + n[-2::-1])\n        \n        if N <= 11: \n            while not isPrime(N):\n                N += 1\n            return N\n        \n        if (digits := len(str(N))) % 2 == 0:\n            N = 10 ** digits + 1\n        else:\n            n = str(N // 10 ** (len(str(N))//2))\n            if (p := int(n + n[-2::-1])) >= N:\n                N = p\n            else:\n                N = nextPalindrome(p)\n                \n        while not isPrime(N):\n            N = nextPalindrome(N)\n        return N", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def is_prime(n):\n            return n > 1 and all(n % d for d in range(2, int(n ** .5) + 1))\n\n        def reverse(x):\n            ans = 0\n            while x:\n                ans = 10 * ans + x % 10\n                x //= 10\n            return ans\n\n        while True:\n            if N == reverse(N) and is_prime(N):\n                return N\n            N += 1\n            if 10 ** 7 < N < 10 ** 8:\n                N = 10 ** 8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def is_prime(n):\n            return n > 1 and all(n % d != 0 for d in range(2, int(n**.5) + 1))\n        \n        def reverse(x):\n            y = 0\n            while x > 0:\n                y = y * 10 + x % 10\n                x = x // 10\n            return y\n        \n        while True:\n            if N == reverse(N) and is_prime(N):\n                return N\n            N += 1\n            if 10**7 < N < 10**8:\n                N = 10**8\n", "def isPrimes(n):\n    return n > 1 and all(n%d > 0 for d in range(2, int(sqrt(n)) + 1))\n\ndef reverse(x):\n    ans = 0\n    while x:\n        ans = 10*ans + x%10\n        x //= 10\n    return ans\n\nclass Solution:\n    def primePalindrome(self, N: int) -> int:\n        if N >= 9989900:\n            return 100030001\n        while True:\n            if N == reverse(N) and isPrimes(N):\n                return N\n            N += 1\n        \n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def reverse(n):\n            sm=0\n            while n>0:\n                r=n%10\n                sm=sm*10+r\n                n=n//10\n            return sm\n        \n        def isprime(n):\n            for i in range(2, int(n**.5)+1):\n                if n%i==0:\n                    return False\n            return True\n        \n        if N==1:\n            return 2\n        \n        while True:\n            if N==reverse(N) and isprime(N):\n                return N\n            N+=1\n            if 10**7 < N < 10**8:\n                N = 10**8\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def reverse(n):\n            sm=0\n            while n>0:\n                r=n%10\n                sm=sm*10+r\n                n=n//10\n            return sm\n        \n        def isprime(n):\n            for i in range(2, int(sqrt(n))+1):\n                if n%i==0:\n                    return False\n            return True\n        \n        if N==1:\n            return 2\n        \n        while True:\n            if N==reverse(N) and isprime(N):\n                return N\n            N+=1\n            if 10**7 < N < 10**8:\n                N = 10**8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def reverse(n):\n            a=0\n            while n>0:\n                r=n%10\n                a=a*10+r\n                n=n//10\n            return a\n        def snt(n):\n            for i in range(2, int(sqrt(n))+1):\n                if n%i==0:\n                    return False\n            return True\n        if N==1:\n            return 2\n        while True:\n            if N==reverse(N) and snt(N):\n                return N\n            N+=1\n            if 10**7 < N < 10**8:\n                N = 10**8", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def isPrime(num):\n            if num < 2 or num%2 == 0:\n                return num ==2\n            s_num = int(num**0.5)\n            for i in range(3, s_num + 1):\n                if num%i == 0:\n                    return False\n            return True\n        \n        \n        if N>=8 and N <= 11:\n            return 11\n        \n        for i in range(10 ** (len(str(N)) // 2), 10**5):\n            s = str(i)\n            s2 = s + s[::-1][1:]\n            if isPrime(int(s2)) and int(s2)>= N:\n                return int(s2)\n        return N ", "from math import sqrt\n\nclass Solution:\n    def primePalindrome(self, N: int) -> int:\n        def subgen(start, upper, odd):\n            start = int(start)\n            for i in range(start, upper):\n                if odd:\n                    yield int(str(i) + str(i)[:-1][::-1])\n                else:\n                    yield int(str(i) + str(i)[::-1])\n\n        def is_prime(n):\n            factors = []\n            for i in range(1, int(sqrt(n))+1):\n                if n % i == 0:\n                    factors.extend([i, n // i])\n                    if len(factors) > 2:\n                        return False\n            return len(factors) <= 2\n\n        def generator(N):\n            if N <= 10:\n                for i in range(2, 10):\n                    if is_prime(i): yield i\n            if N <= 11:\n                yield 11\n            if N <= 1000:\n                for i in subgen('10', 100, True):\n                    if is_prime(i): yield i\n            if N <= 10000:\n                for i in subgen('10', 100, False):\n                    if is_prime(i): yield i\n            if N <= 100000:\n                for i in subgen('100', 1000, True):\n                    if is_prime(i): yield i\n            if N <= 1000000:\n                for i in subgen('100', 1000, False):\n                    if is_prime(i): yield i\n            if N <= 10000000:\n                for i in subgen('1000', 10000, True):\n                    if is_prime(i): yield i\n            if N <= 100000000:\n                for i in subgen('1000', 10000, False):\n                    if is_prime(i): yield i\n            if N <= 1000000000:\n                for i in subgen('10000', 20000, True):\n                    if is_prime(i): yield i\n\n        for g in generator(N):\n            if g >= N: return g\n", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        \n        def prime(n):\n            # i = 2\n            if(n == 1):\n                return False\n            for i in range(2 , int(n ** 0.5) + 1):\n                if(n % i == 0):\n                    return False\n            return True\n        \n        \n        def reverse(N):\n            res = 0\n            d = N\n            while(N > 0):\n                res = 10 * res + N % 10;\n                N = int(N / 10)\n            # print(d , res)\n            return res\n        \n        while(1):\n            if(N == reverse(N) and prime(N)):\n                return N\n            # print(N)\n            N += 1\n            \n            if(10**7 < N < 10**8):\n                N = 10 ** 8\n        \n        \n        \n        \n", "class Solution:\n    \n    def check_prime(self,N):\n        m = int(math.sqrt(N))\n        for i in range(2,m+1):\n            if N%i == 0:\n                return(0)\n        return(1) \n    \n    def reverse_string(self,s):\n        n = len(s)\n        t = [s[n-i] for i in range(1,n+1)]\n        t = ''.join(t)\n        return(t)\n    \n    def rev(self,l,parity):\n        l = [str(s) for s in l]\n        if parity == 0:\n            l = [s + self.reverse_string(s) for s in l]\n        if parity == 1:\n            l = [s[:-1] + s[-1] + self.reverse_string(s[:-1]) for s in l]\n        return(l)    \n    \n    def gen_palin(self,k):\n        m = k//2\n        parity = k%2\n        if k%2 == 0:\n            l = list(range(10**(m-1),10**(m)))\n        if k%2 == 1:\n            l = list(range(10**(m),10**(m+1)))\n        l = self.rev(l,parity)\n        l = [int(x) for x in l]\n        l.sort()\n        return(l)    \n    \n    def primePalindrome(self,N):\n        if N == 1:\n            return(2)\n        s = str(N)\n        k = len(s)\n        current = k\n        x = 1\n        while x:\n            l = self.gen_palin(k)\n            for a in l:\n                if a >= N:\n                    if self.check_prime(a):\n                        return(a)\n            k += 1        ", "def isPrime(val):\n        if val==1:\n            return False\n        if val==2:\n            return True\n        if val%2==0:\n            return False\n        # print(floor(sqrt(val)))\n        for i in range(3,floor(sqrt(val))+2,2):\n            # print(i)\n            if val%i == 0:\n                return False\n        return True\nclass Solution:\n        \n    def primePalindrome(self, N: int) -> int:\n        if N>=8 and N<=11:\n            return 11\n        mn = 1e9\n        print(isPrime(N))\n        for i in range(1,10009):\n            s = str(i)\n            r = s[::-1]\n            # print(r)\n            r = r[1:]\n            # print(r)\n            t = int(s+r)\n            # print(t)\n            if t>=N and isPrime(t):\n                mn = min(mn,t)\n        return mn", "def isPrime(val):\n        if val==1:\n            return False\n        if val==2:\n            return True\n        if val%2==0:\n            return False\n        # print(floor(sqrt(val)))\n        for i in range(3,floor(sqrt(val))+2,2):\n            # print(i)\n            if val%i == 0:\n                return False\n        return True\nclass Solution:\n        \n    def primePalindrome(self, N: int) -> int:\n        if N>=8 and N<=11:\n            return 11\n        mn = 1e9\n        # print(isPrime(N))\n        for i in range(1,10009):\n            s = str(i)\n            r = s[::-1]\n            # print(r)\n            r = r[1:]\n            # print(r)\n            t = int(s+r)\n            # print(t)\n            if t>=N and isPrime(t):\n                mn = min(mn,t)\n        return mn", "class Solution:\n    def primePalindrome(self, N: int) -> int:\n        def checkPrime(x):\n            if x == 1:\n                return False\n\n            for i in range(2, int(math.sqrt(x) + 0.01) + 1):\n                if x % i == 0:\n                    return False\n            return True\n        \n        def makePal(n):\n            l = len(n)\n            hn = n[:l // 2]\n            s = hn\n\n            if l % 2 != 0:\n                s += n[l // 2]\n            \n            return s + ''.join(reversed(hn))\n                \n        def nextPal(n):\n            ni = int(n) + 10 ** (len(n) // 2)\n            return makePal(str(ni))\n            \n        beg = str(N)\n        n = makePal(beg)\n        if n < beg:\n            n = nextPal(n)\n\n        while True:\n            if checkPrime(int(n)):\n                return int(n)\n            n = nextPal(n)"]