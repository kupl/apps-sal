["t = int(input())\n\nfor _ in range(t):\n    n, m = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for _ in range(n)]\n\n    rows = sum(1 for x in grid if all(y == 0 for y in x))\n    cols = sum(1 for j in range(m) if all(grid[i][j] == 0 for i in range(n)))\n\n    res = min(rows, cols)\n\n    print(\"Ashish\" if res % 2 else \"Vivek\")\n", "q = int(input())\nfor _ in range(q):\n    r,c = map(int,input().split())\n    mat = [list(map(int,input().split())) for i in range(r)]\n    row = 0\n    for i in mat:\n        if sum(i) == 0:\n            row += 1\n    col = 0\n    for i in range(c):\n        su = 0\n        for j in range(r):\n            su += mat[j][i]\n        if su == 0:\n            col += 1\n    cyk = min(row, col)\n    if cyk%2 == 0:\n        print(\"Vivek\")\n    else:\n        print(\"Ashish\")", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    n,m = li()\n    l = []\n    for i in range(n):l.append(li())\n    rows = n\n    cols = m\n    for i in range(n):\n        if sum(l[i]):rows -= 1\n    for j in range(m):\n        for i in range(n):\n            if l[i][j]:\n                cols -= 1\n                break\n    n = rows\n    m = cols\n    print('Ashish' if min(n,m)&1 else 'Vivek')", "for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    arr = [list(map(int, input().split())) for _ in range(n)]\n\n    rows = 0\n    for i in range(n):\n        if 1 in arr[i]:\n            rows += 1\n    rows = n-rows\n\n    cols = 0\n    for j in range(m):\n        for i in range(n):\n            if arr[i][j] == 1:\n                cols += 1\n                break\n\n    cols = m-cols\n\n    if min(cols, rows) % 2 == 0:\n        print(\"Vivek\")\n    else:\n        print(\"Ashish\")\n", "T = int(input())\n\nfor t in range(T):\n    N, M = [int(_) for _ in input().split()]\n    matrix = []\n\n    for i in range(N):\n        row = [int(_) for _ in input().split()]\n        matrix.append(row)\n\n    available_rows = 0\n    for row in matrix:\n        if 1 not in row:\n            available_rows += 1\n    available_cols = 0\n    for i in range(len(matrix[0])):\n        for j in range(len(matrix)):\n            if matrix[j][i] == 1:\n                break\n        else:\n            available_cols += 1\n\n    a = min(available_cols, available_rows)\n    if a & 1:\n        print('Ashish')\n    else:\n        print('Vivek')\n", "for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    arr = [[0] * m for i in range(n)]\n    for i in range(n):\n        arr[i] = list(map(int, input().split()))\n    a = 0\n    for i in range(n):\n        if sum(arr[i]) == 0:\n            a += 1\n    b = 0\n    for j in range(m):\n        cnt = 0\n        for i in range(n):\n            cnt += arr[i][j]\n        if cnt == 0:\n            b += 1\n    if min(a, b) % 2 == 1:\n        print('Ashish')\n    else:\n        print('Vivek')\n", "from math import *\n\ndef r1(t):\n    return t(input())\n\ndef r2(t):\n    return [t(i) for i in input().split()]\n\ndef r3(t):\n    return [t(i) for i in input()]\n\nfor _ in range(r1(int)):\n    n, m = r2(int)\n    a = []\n    for i in range(n):\n        a.append(r2(int))\n\n    c = 0\n    for i in range(n):\n        if sum(a[i]) > 0:\n            c += 1\n\n    c2 = 0\n    for j in range(m):\n        for i in range(n):\n            if a[i][j] > 0:\n                c2 += 1\n                break\n\n    if min(n - c, m - c2) % 2 == 1:\n        print('Ashish')\n    else:\n        print('Vivek')\n", "t=int(input())\nfor q in range(t):\n\tn,m=[int(i) for i in input().split()]\n\ta=[[int(j) for j in input().split()] for i in range(n)]\n\trow=[False for i in range(n)]\n\tcol=[False for i in range(m)]\n\tnr,nc=0,0\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif a[i][j]==1:\n\t\t\t\tif not row[i]:\n\t\t\t\t\trow[i]=True\n\t\t\t\t\tnr+=1\n\t\t\t\tif not col[j]:\n\t\t\t\t\tcol[j]=True\n\t\t\t\t\tnc+=1\n\tt=min(n-nr,m-nc)\n\tres=\"Vivek\" if t%2==0 else \"Ashish\"\n\tprint(res)\n", "t = int(input())\nfor _ in range(t):\n    n,m = [int(i) for i in input().split()]\n    v,h = 0,0\n    grid = []\n    for _ in range(n):\n        line = [int(i) for i in input().split()]\n        if 1 not in line:\n            h += 1\n        grid.append(line)\n    for i in range(m):\n        if 1 not in [j[i] for j in grid]:\n            v += 1\n    M = min(h, v)\n    if M&1:\n        print(\"Ashish\")\n    else:\n        print(\"Vivek\")", "T = int(input())\n\nfor t in range(T):\n    n, m = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for i in range(n)]\n\n    rows = set()\n    cols = set()\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                rows.add(i)\n                cols.add(j)\n\n    m = min(n - len(rows), m - len(cols))\n    if m % 2 == 0:\n        print(\"Vivek\")\n    else:\n        print(\"Ashish\")\n", "from sys import stdin\ninput = stdin.readline\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n\n    l = [[] for _ in range(m)]\n\n    r = c = 0\n\n    for _ in range(n):\n        a = list(map(int, input().split()))\n\n        for i in range(m):\n            l[i].append(a[i])\n\n        if 1 not in a:\n            r += 1\n\n    for a in l:\n        if 1 not in a:\n            c += 1\n\n    if min(r, c) % 2:\n        print('Ashish')\n    else:\n        print('Vivek')", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n, m = read_ints()\n    a = []\n    for i in range(n):\n        a.append(list(read_ints()))\n    row = set([i for i in range(n)])\n    col = set([i for i in range(m)])\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i in row:\n                    row.remove(i)\n                if j in col:\n                    col.remove(j)\n    lo = min(len(row), len(col))\n    print(\"Ashish\" if lo % 2 == 1 else \"Vivek\")\n", "def solve(n, m, grid):\n    n_free_cols = sum(all(grid[i][j] == 0 for i in range(n)) for j in range(m))\n    n_free_lines = sum(all(grid[i][j] == 0 for j in range(m)) for i in range(n))\n    N = min(n_free_lines, n_free_cols)\n    return N % 2 == 1\n\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        n, m = list(map(int, input().split()))\n        grid = [list(map(int, input().split())) for _ in range(n)]\n        print(\"Ashish\" if solve(n, m, grid) else \"Vivek\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import *\nt = int(input())\nfor y in range(t):\n\tn,m = list(map(int,input().split()))\n\ta = []\n\tfor i in range(n):\n\t\ta.append(list(map(int,input().split())))\n\tr,c = 0,0\n\tfor i in range(n):\n\t\tct = 0\n\t\tfor j in range(m):\n\t\t\tif(a[i][j] == 0):\n\t\t\t\tct += 1\n\t\tif(ct == m):\n\t\t\tr += 1\n\tfor i in range(m):\n\t\tct = 0\n\t\tfor j in range(n):\n\t\t\tif(a[j][i] == 0):\n\t\t\t\tct += 1\n\t\tif(ct == n):\n\t\t\tc += 1\n\tx = min(r,c)\n\tif(x&1):\n\t\tprint(\"Ashish\")\n\telse:\n\t\tprint(\"Vivek\")\n\n\n\n", "from sys import stdin\nT=int(stdin.readline().strip())\nfor caso in range(T):\n    \n    n,m=list(map(int,stdin.readline().strip().split()))\n    s=[list(map(int,stdin.readline().strip().split())) for i in range(n)]\n    r=n\n    for i in range(n):\n        if 1 in s[i]:\n            r-=1\n    c=m\n    for i in range(m):\n        for j in range(n):\n            if s[j][i]==1:\n                c-=1\n                break\n    x=min(c,r)\n    if x%2==0:\n        print(\"Vivek\")\n    else:\n        print(\"Ashish\")\n            \n", "t = int(input())\n\nfor _ in range(t):\n    n, m = list(map(int, input().strip().split()))\n\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().strip().split())))\n\n    rows = 0\n    for row in matrix:\n        if sum(row) == 0:\n            rows += 1\n\n    cols = 0\n    for i in range(m):\n        s = 0\n        for j in range(n):\n            s += matrix[j][i]\n        if s == 0:\n            cols += 1\n    \n    mini = min(cols, rows)\n\n    if mini % 2 == 1:\n        print(\"Ashish\")\n    else:\n        print(\"Vivek\")", "for ttt in range(int(input())):\n#\tl = list(map(int, input().split()))\n#\tn = int(input())\n\tn, m = list(map(int, input().split()))\n\tx = [0] * n\n\ty = [0] * m\n\tfor i in range(n):\n\t\tl = list(map(int, input().split()))\n\t\tif 1 in l:\n\t\t\tx[i] = 1\n\t\tfor j in range(m):\n\t\t\tif l[j] == 1:\n\t\t\t\ty[j] = 1\n\tt = min(x.count(0), y.count(0))\n\tprint('Vivek' if t % 2 == 0 else 'Ashish')\n\n", "for nt in range(int(input())):\n\tn,m = map(int,input().split())\n\tmat = []\n\tfor i in range(n):\n\t\tmat.append(list(map(int,input().split())))\n\trow = {}\n\tcol = {}\n\tfor i in range(n):\n\t\tif 1 in mat[i]:\n\t\t\trow[i]=1\n\tfor i in range(m):\n\t\tflag = 0\n\t\tfor j in range(n):\n\t\t\tif mat[j][i]==1:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tcol[i]=1\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i not in row and j not in col:\n\t\t\t\trow[i]=1\n\t\t\t\tcol[j]=1\n\t\t\t\tcount+=1\n\tif count%2:\n\t\tprint (\"Ashish\")\n\telse:\n\t\tprint (\"Vivek\")", "\n\nfor _ in range(int(input())):\n\tn,m=map(int,input().split())\n\n\ta=[]\n\n\tfor i in range(n):\n\t\ta.append(list(map(int,input().split())))\n\n\trow=[0]*n\n\tcol=[0]*m\n\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif(a[i][j]):\n\t\t\t\trow[i]=1;\n\t\t\t\tcol[j]=1;\n\n\trowc=row.count(0)\n\tcolc=col.count(0)\n\n\tmoves=min(rowc,colc)\n\n\tif(moves&1):\n\t\tprint(\"Ashish\")\n\telse:\n\t\tprint(\"Vivek\")"]