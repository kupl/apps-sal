["import math\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    diags = 1/math.sin(math.pi/2/n)\n    print(diags * math.cos(math.pi/4/n))\n", "import math\nimport sys\n\n#sys.stdin = open(\"in.txt\")\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    n *= 2\n    a = (n - 2) * math.pi / n / 2\n    r = 1/2 / math.cos(a)\n    a2 = (math.pi/2 - a) / 2\n    r2 = r * math.cos(a2)\n    print(r2*2)\n", "import sys\nimport math\n\nreadline = sys.stdin.readline\nread = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\n\ndef solve():\n    n = ni()\n    print(math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n)))\n    return\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n", "import math\n\ndef sqare_size(n):\n    return math.sin((2*n-1)/(4*n)*math.pi)/math.sin(math.pi/(2*n))\n\nt = int(input())\nfor _ in range(t):\n    print(sqare_size(int(input())))\n", "import sys\nimport math\n\ninput = sys.stdin.readline\nflush = sys.stdout.flush\n\nfor _ in range(int(input())):\n\tn = int(input())\n\tprint(2.0 * math.cos(math.pi / (4.0 * n)) / (2.0 * math.sin(math.pi / (2.0 * n))))\n", "# cook your dish here\n# import sys\n# sys.stdin = open('input.txt', 'r') \n# sys.stdout = open('output.txt', 'w')\n\nimport math\nimport collections\nfrom sys import stdin,stdout,setrecursionlimit\nimport bisect as bs\nT = int(stdin.readline())\n\nfor _ in range(T):\n    n = int(stdin.readline())\n    # a,b,c,d = list(map(int,stdin.readline().split()))\n    # h = list(map(int,stdin.readline().split()))\n    # b = list(map(int,stdin.readline().split()))\n    # a = stdin.readline().strip('\\n')\n    t = 2*n\n    x = math.pi/(2*t)\n    h = 0.5 / (math.sin(x))\n    print(round(h,7))", "import sys\nfrom math import tan, pi, cos, sin\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\nfrom itertools import islice, cycle\n\n\ndef go():\n    n = int(input())\n    # a,b,c,d = map(int, input().split())\n    # a = list(map(int, input().split()))\n    # s = input()\n    nn = 2*n\n    pin = pi/nn\n    l,r = 0, pin\n    for i in range(100):\n        c = (l+r)/2\n        if cos(c)-(cos(pin-c))>0:\n            l=c\n        else:\n            r=c\n    return cos(c)/(sin(pin))\n\n\n# x,s = map(int,input().split())\nt = int(input())\n# t = 1\nans = []\nfor _ in range(t):\n    # print(go())\n    ans.append(str(go()))\n#\nprint('\\n'.join(ans))\n", "from math import pi, sin, cos\n\nT = int(input().strip())\nfor t in range(T):\n    n = int(input().strip())\n    alpha = pi/n\n    R = 1/(2*sin(alpha/2))\n    if n %2 ==0:\n        gamma = alpha/2\n    else:\n        k = n//2\n        gamma = (pi/2 - alpha*k)/2\n\n    # print(alpha*180/pi)\n    # print(gamma * 180 / pi)\n    res = R* 2*cos(gamma)\n    print(res)", "import math\n\nt=int(input())\n\nwhile(t):\n\tt-=1\n\tn=int(input())\n\n\tang= math.pi/(2*n)\n\n\tans= 1/math.sin(ang)\n\tprint(ans*math.cos(ang/2))", "from math import*\nfor _ in range(int(input())):\n  n=int(input())\n  if n%2==0:print(1/tan(radians(90/n)))\n  else:print(cos(radians(45/n))/sin(radians(90/n)))", "import math\n# your code goes here\nfor _ in range(int(input())):\n\tn=2*int(input())\n\tprint(math.cos(math.pi/(2*n))/math.sin(math.pi/n))", "import math\nimport sys\ninput = sys.stdin.readline\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    theta = 2 * n\n    y = 1 / math.sin(math.radians(360 / 4 / n)) / 2\n    p = [(0, y)]\n    \n    rot45 =  [math.cos(math.radians(45)), -math.sin(math.radians(45))], [math.sin(math.radians(45)), math.cos(math.radians(45))]\n    tmp = p[-1]\n    x = rot45[0][0] * tmp[0] + rot45[0][1] * tmp[1]\n    y = rot45[1][0] * tmp[0] + rot45[1][1] * tmp[1]\n    p[0] = (x, y)\n    the = 360 / (2 * n) \n    rot = [math.cos(math.radians(the)), -math.sin(math.radians(the))], [math.sin(math.radians(the)), math.cos(math.radians(the))]\n    max_x = 0\n    max_y = 0\n    for i in range(2 * n - 1):\n        tmp = p[-1]\n        x = rot[0][0] * tmp[0] + rot[0][1] * tmp[1]\n        y = rot[1][0] * tmp[0] + rot[1][1] * tmp[1]\n        max_x = max(abs(x), max_x)\n        max_y = max(abs(y), max_y)\n        p.append((x, y))\n    print(2 * max_x)\n", "import os\nimport sys\nif os.path.exists('/mnt/c/Users/Square/square/codeforces'):\n    f = iter(open('D.txt').readlines())\n    def input():\n        return next(f).strip()\n    # input = lambda: sys.stdin.readline().strip()  \nelse:\n    input = lambda: sys.stdin.readline().strip()\n\nfprint = lambda *args: print(*args, flush=True)\n\nimport math\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    # print(1.0 / math.tan(math.pi / 2 / n))\n    a = math.pi / 2 / n\n    tmp = 0.5 / math.sin(a)\n    \n    # def func(phi):\n    #     return max(math.cos(phi), math.cos(a-phi))\n\n    # l, r = 0, a\n    # while l - r > 1e-10:\n    #     u = func(l)\n    #     v = func(r)\n    #     x = func((l*2+r*1)/3)\n    #     y = func((l*1+r*2)/3)\n\n    #     if x < y:\n    #         r = (l*2+r*1)/3\n    #     else:\n    #         l = (l*1+r*2)/3\n    print(tmp * math.cos(a/2)*2)\n    # print(n, tmp * func(0))\n    # print(tmp * math.cos(0), tmp * math.cos(a-0))\n    # print(tmp * func(l))\n    # print()", "from math import sin, tan, cos, pi\n\nfor t in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(1 / tan(pi / (2 * n)))\n    else:\n        #print(1 + 1 / tan(pi / (2 * n)) / 2 ** 0.5)\n        print(1 / sin(pi / (2 * n)) * cos(pi / (4 * n)))", "t = int(input())\n\nimport math\n\nans=[0]*t\n\nfor i in range(t):\n  n=int(input())\n  theta=90/n\n  temp=1/math.sin(math.radians(theta))\n  ans[i]=temp*math.cos(math.radians(theta/2))\n\n\nfor i in range(t):\n  print(format(ans[i], '.9f'))", "import sys\nfrom math import pi, sin\ndef I():\n    return sys.stdin.readline().rstrip()\n\ndef h(n):\n    m = n // 2 - 0.5\n    a = 1\n    return a * sin(pi * m / n) / sin(pi / n)\n\ndef main():\n    for tc in range(1, 1+int(I())):\n        n = int(I())\n        n *= 2\n        print(h(n))\n\nmain()\n", "from math import sin, pi, sqrt, tan\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    angle = pi / n / 2\n    r = 0.5 / sin(angle)\n    a = 0\n    for i in range(1, n // 2 + 1):\n        A = 3 * pi / 4 - i * pi / n\n        a = max(a, 2 * r * sin(A))\n    print('{:.9f}'.format(a))\n", "from math import cos, pi, sin, sqrt\n\nfor _ in range(int(input())):\n    n = int(input())\n    k0 = (n + 2) // 4\n    alpha = k0 * pi / n\n    print((sin(alpha) + cos(alpha)) / (sqrt(2) * sin(pi / (2 * n))))\n", "from math import radians,sin,cos\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    alpha = radians(90/n)\n    r = 0.5/(sin(alpha))\n    beta = 180*(n//2)/n\n    gamma = radians((90-beta)/2)\n    d = r*cos(gamma)\n    print(2*d)", "import math\n\nT = int(input())\nfor _ in range(T):\n\tn = int(input())\n\tth = math.pi / (2*n)\n\tl = 1. / math.sin(th)\n\tth1 = (n // 2) * (2*th)\n\tth = math.atan((1 - math.sin(th1)) / math.cos(th1))\n\tres = l*math.cos(th)\n\tprint(res)\n\t# print(math.cos(th), math.sin(th+th1), th1, l, math.pi/3)\n", "import math\n\ndef solve(n):\n    if n == 2:\n        return 1.0\n    each_angle = math.pi / n\n    height = 0\n    width = 0\n    for i in range(n):\n        angle = each_angle * i\n        height += math.sin(angle) * 1.0\n        width += abs(math.cos(angle)) * 1.0\n    if width > height:\n        sectors = n // 2\n        angle = each_angle * (0.5 + sectors / 2) - math.pi / 4\n        ans = width * math.cos(angle)\n    else:\n        ans = height\n    # print(height, width, ans)\n    return ans\n\ndef main():\n    T = int(input())\n    for _ in range(1, T + 1):\n        n = int(input())\n        print(solve(n))\n\ndef __starting_point():\n    main()\n__starting_point()", "from math import sin, pi, cos\ndef solve():\n    n = int( input())\n    return(cos(pi/(4*n))/sin(pi/(2*n)))\n    \ndef main():\n    t = int( input())\n    print(\"\\n\".join( map( str, [ solve() for _ in range(t)])))\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\n\nfor _ in range(int(input())):\n    n=int(input())\n    s=2*n\n    #side = (((1/2*(math.sin(math.pi/(2*s))))**2)-1)**.5\n    side = 1/(2*(math.sin(math.pi/(2*s))))\n    print(side)", "import math\nq = int(input())\nfor _ in range(q):\n\tn = int(input())\n\talfa = 3*math.pi/4 - ((n//2)*math.pi/(2*n))\n\ty = math.tan(math.pi/2-math.pi/(2*n))\n\tx = y/math.cos(math.pi/(2*n))\n\tbok = math.sin(alfa)*x\n\tprint(bok)", "import math\nPI = math.pi\n\ndef radius(n):\n    return 0.5/math.sin(PI/(2*n))\n\ndef chord(num_sides, n):\n    return 2*radius(n)*math.sin((PI*num_sides)/(2*n))\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    x = int(n/2)+1\n    y = int(n/2)\n    print(chord(x,n)/math.sqrt(2)+chord(y,n)/math.sqrt(2))", "\n\n# for n in range(3, 200, 2):\n\n#     N = 2 * n\n\n#     alpha = (2 * pi) / (2 * n)\n#     beta = (pi - alpha) / 2\n\n#     L = sin(beta) / sin(alpha)\n\n#     ans = 10 ** 10\n#     MAX = 1000\n#     for i in range(MAX):\n#         t0 = alpha * i / MAX\n\n#         xx = []\n#         yy = []\n#         for i in range(N):\n#             t = alpha * i + t0\n#             x, y = L * cos(t), L * sin(t)\n#             xx.append(x)\n#             yy.append(y)\n\n#         tmpr = max(max(xx) - min(xx), max(yy) - min(yy))\n#         ans = min(ans, tmpr)\n\n#     print(f\"{n} : {ans},\")\n\n\nans = {3: 1.931851652578137,\n       5: 3.1962266107498305,\n       7: 4.465702135190254,\n       9: 5.736856622834928,\n       11: 7.00877102284205,\n       13: 8.281093789118495,\n       15: 9.553661304648701,\n       17: 10.826387080174316,\n       19: 12.099221090606225,\n       21: 13.372132387773904,\n       23: 14.64510079714694,\n       25: 15.918112604548812,\n       27: 17.191158161652254,\n       29: 18.464230483075124,\n       31: 19.737324386897843,\n       33: 21.010435947900465,\n       35: 22.283562138356153,\n       37: 23.556700585376017,\n       39: 24.829849402946724,\n       41: 26.10300707314532,\n       43: 27.376172360514047,\n       45: 28.649344249275092,\n       47: 29.922521896579926,\n       49: 31.195704597210476,\n       51: 32.46889175658776,\n       53: 33.742082869893075,\n       55: 35.015277505745324,\n       57: 36.28847529331536,\n       59: 37.561675912061524,\n       61: 38.8348790834848,\n       63: 40.10808456445453,\n       65: 41.38129214176658,\n       67: 42.65450162767617,\n       69: 43.927712856207805,\n       71: 45.20092568008886,\n       73: 46.47413996818731,\n       75: 47.747355603359544,\n       77: 49.02057248063344,\n       79: 50.29379050566765,\n       81: 51.56700959343902,\n       83: 52.84022966711982,\n       85: 54.1134506571136,\n       87: 55.386672500223845,\n       89: 56.659895138934914,\n       91: 57.93311852078775,\n       93: 59.20634259783608,\n       95: 60.47956732617132,\n       97: 61.75279266550647,\n       99: 63.026018578810074,\n       101: 64.29924503198401,\n       103: 65.57247199357865,\n       105: 66.84569943454059,\n       107: 68.11892732798874,\n       109: 69.39215564901495,\n       111: 70.66538437450639,\n       113: 71.93861348298648,\n       115: 73.21184295447279,\n       117: 74.4850727703492,\n       119: 75.75830291325114,\n       121: 77.03153336696215,\n       123: 78.3047641163205,\n       125: 79.57799514713487,\n       127: 80.85122644610789,\n       129: 82.12445800076682,\n       131: 83.39768979940062,\n       133: 84.67092183100281,\n       135: 85.94415408521901,\n       137: 87.21738655229956,\n       139: 88.49061922305593,\n       141: 89.76385208882093,\n       143: 91.0370851414123,\n       145: 92.31031837309914,\n       147: 93.58355177657134,\n       149: 94.85678534491129,\n       151: 96.13001907156787,\n       153: 97.40325295033253,\n       155: 98.67648697531708,\n       157: 99.94972114093346,\n       159: 101.22295544187476,\n       161: 102.49618987309775,\n       163: 103.76942442980673,\n       165: 105.04265910743855,\n       167: 106.31589390164861,\n       169: 107.58912880829797,\n       171: 108.8623638234414,\n       173: 110.13559894331603,\n       175: 111.40883416433105,\n       177: 112.68206948305792,\n       179: 113.95530489622139,\n       181: 115.22854040069092,\n       183: 116.50177599347283,\n       185: 117.77501167170294,\n       187: 119.04824743263957,\n       189: 120.32148327365705,\n       191: 121.5947191922398,\n       193: 122.86795518597636,\n       195: 124.14119125255439,\n       197: 125.41442738975526,\n       199: 126.68766359544964,\n       }\n\n\nT = int(input())\n\nfor t in range(T):\n    n = int(input())\n    print(ans[n])\n", "import math\ndef rad(angle) :\n\treturn (angle / 180) * math.pi\ndef dist(a, b, c, d) :\n\treturn math.sqrt((a - c) * (a - c) + (b - d) * (b - d))\ntt = int(input())\nwhile tt > 0 :\n\ttt -= 1\n\tn = int(input())\n\tangle = rad(360 / (2 * n))\n\tl1, l2 = n // 2, n - n // 2\n\tpx, py = 0, 0\n\tvx, vy = 1, 0\n\tans = 0\n\tcur = 0\n\tfor i in range(1, n + 1) :\n\t\tpx += vx\n\t\tpy += vy\n\t\tif i == l1 or i == l2 :\n\t\t\tans += dist(0, 0, px, py)\n\t\tcur += angle\n\t\tvx = math.cos(cur)\n\t\tvy = math.sin(cur)\n\tprint(ans / math.sqrt(2))", "import math\nT = int(input())\n\nwhile T !=0:\n    n = int(input())\n\n    side = math.sin(math.pi/(4*n)) * 2\n    print(1/side)\n    \n    T -= 1", "from math import sin, pi\nt = int(input())\nwhile t!=0:\n    t-=1 \n    n = int(input())\n    k = 1/(sin(pi/(4*n)))\n    print(k/2)\n        \n\n", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(\"{:.10f}\".format(math.cos(math.pi/(4*n))/math.sin(math.pi/(2*n))))\n    \n", "from sys import stdin\nfrom math import cos,sin,radians\nimport math\ninp = lambda: stdin.readline().strip()\n\n# [int(x) for x in inp().split()]\n\n\ndef diagonal(x):\n    return 1/(2*sin(radians(90/x)))\n\n\nt = int(inp())\nfor _ in range(t):\n    n = int(inp())\n    # f = (diagonal(2*n)**2)**(1/2)\n    print(diagonal(2*n))", "from math import sin, cos, pi\n\nn = int(input())\n\ndef f(a, b):\n    return sin((b * pi) / a) / sin(pi / a)\n\nfor _ in range(n):\n    m = int(input())\n    print(\"%.12f\" % (f(2 * m, m) * cos(pi / (4 * m))))\n", "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\nimport math\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = 1.0 / (2.0 * math.tan(math.pi / (n * 2)))\n    b = 1.0 * math.sin(math.pi / 2.0) / (math.sin(math.pi / (n * 2)))\n    if n % 2 == 0:\n        print(a * 2.0)\n    else:\n        rotation = [math.pi * 2.0 / (2 * n) * item for item in range(2 * n)]\n        l = 0.0; r = math.pi / 2.0 \n        eps_rot = [(math.pi * 2.0 / (2 * n) / 10**2) * item for item in range(10**2)]\n        ret = b\n        for eps in eps_rot:\n            max_rad = 0.0 \n            for rad in rotation:\n                val = max(b * abs(math.sin(rad + eps)), b * abs(math.cos(rad + eps)))\n                max_rad = max(max_rad, val)\n            ret = min(ret, max_rad)\n        print(ret)", "import math\n\nT = int(input())\n\nfor _ in range(T):\n    N = int(input())\n    v1 = complex(1, 0)\n    angle = (N//2)*(math.pi/N)\n    v2 = complex(math.cos(angle), math.sin(angle))\n    print(math.sqrt(2) * 0.5 * (abs(v1+v2) + abs(v1-v2)) * (1/(2*math.sin(math.pi/(2*N)))))\n", "import math\n\nMIN_INF, MAX_INF = float('-inf'), float('inf')\n\ndef get_len(n, R, alpha, beta):\n    maxx, maxy = MIN_INF, MIN_INF\n    minx, miny = MAX_INF, MAX_INF\n    d = MAX_INF\n    for i in range(n):\n        theta = alpha * i + beta\n        x = math.cos(theta) * R\n        y = math.sin(theta) * R\n        maxx = max(x, maxx)\n        maxy = max(y, maxy)\n        minx = min(x, minx)\n        miny = min(y, miny)\n    d = min(d, max(abs(maxx - minx), abs(maxy - miny)))\n    return d\n\ndef main():\n    T = int(input())\n    for t in range(T):\n        n = int(input()) * 2\n\n        alpha = 2 * math.pi / n\n        R = 1.0 / 2.0 / (math.sin(math.pi / n))\n\n        # ans = float('inf')\n\n        # a, b = 0, alpha\n        # va, vb = get_len(n, R, alpha, a), get_len(n, R, alpha, b)\n\n        print(get_len(n, R, alpha, alpha / 4))\n\n        # while True:\n        #     d3 = (b - a) / 3\n        #     c, d = a + d3, b - d3\n        #     vc, vd = get_len(n, R, alpha, c), get_len(n, R, alpha, d)\n\n        #     if abs(vc - vd) < 1e-10:\n        #         print(n, R, alpha, c, vc)\n        #         break\n\n        #     if vc < vd:\n        #         b, vb = d, vd\n        #     else:\n        #         a, va = c, vc\n\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    n = 2*n\n    L = (1/math.sin(math.pi/(2*n)))*abs(math.sin(math.pi*(n-1)/4*n))\n    print(L/2)\n", "from math import pi,sin\ndef solve(n):\n    r= pi/(4*n)\n    m= 1/sin(r)\n    return round(m/2,9)\n    \nfor _ in range(int(input())):\n    n= int(input())\n    print(solve(n))", "import math\nfor ad in range(int(input())):\n    n=int(input())\n    n*=2\n    t=math.pi/n\n    x=math.cos(t/2)/(2*math.sin(t))\n    print(2*x)", "import math\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline().strip())):\n    n = 2*int(stdin.readline().strip())\n    ans = 1/((math.sin(math.radians(90/n))))\n    print(\"{0:.9f}\".format(ans/2))", "import math\ndef solve(n):\n    alpha = 2*math.pi/(4*n)\n    ratio = math.sin(alpha)\n    half = 0.5/ratio\n    ag = 180/(4*n)\n    ag = ag*2*math.pi/360\n    return half*2*math.cos(ag)\nt = int(input())\nfor _ in range(t):\n    s = int(input())\n    print(solve(s))\n    \n"]