["words = {w: n for n, w in enumerate('zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen'.split())}\nwords.update({w: 10 * n for n, w in enumerate('twenty thirty forty fifty sixty seventy eighty ninety hundred'.split(), 2)})\nthousands = {w: 1000 ** n for n, w in enumerate('thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion'.split(), 1)}\ndef parse_int(strng):\n    num = group = 0\n    for w in strng.replace(' and ', ' ').replace('-', ' ').split():\n        if w == 'hundred': group *= words[w]\n        elif w in words: group += words[w]\n        else:\n            num += group * thousands[w]\n            group = 0\n    return num + group", "ONES = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine',\n        'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', \n        'eighteen', 'nineteen']\nTENS = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\n\ndef parse_int(string):\n    print(string)\n    numbers = []\n    for token in string.replace('-', ' ').split(' '):\n        if token in ONES:\n            numbers.append(ONES.index(token))\n        elif token in TENS:\n            numbers.append((TENS.index(token) + 2) * 10)\n        elif token == 'hundred':\n            numbers[-1] *= 100\n        elif token == 'thousand':\n            numbers = [x * 1000 for x in numbers]\n        elif token == 'million':\n            numbers = [x * 1000000 for x in numbers]\n    return sum(numbers)", "dic = {'zero'          : 0,    \n       'one'           : 1,   \n       'two'           : 2,   \n       'three'         : 3,     \n       'four'          : 4,    \n       'five'          : 5,    \n       'six'           : 6,   \n       'seven'         : 7,     \n       'eight'         : 8,     \n       'nine'          : 9,    \n       'ten'           : 10,           \n       'eleven'        : 11,      \n       'twelve'        : 12,      \n       'thirteen'      : 13,        \n       'fourteen'      : 14,        \n       'fifteen'       : 15,       \n       'sixteen'       : 16,       \n       'seventeen'     : 17,         \n       'eighteen'      : 18,        \n       'nineteen'      : 19,        \n       'twenty'        : 20,      \n       'twenty-one'   : 21,           \n       'twenty-two'   : 22,           \n       'twenty-three' : 23,             \n       'twenty-four'  : 24,            \n       'twenty-five'  : 25,            \n       'twenty-six'   : 26,           \n       'twenty-seven' : 27,             \n       'twenty-eight' : 28,             \n       'twenty-nine'  : 29,            \n       'thirty'        : 30,      \n       'thirty-one'   : 31,           \n       'thirty-two'   : 32,           \n       'thirty-three' : 33,             \n       'thirty-four'  : 34,            \n       'thirty-five'  : 35,            \n       'thirty-six'   : 36,           \n       'thirty-seven' : 37,             \n       'thirty-eight' : 38,             \n       'thirty-nine'  : 39,            \n       'forty'         : 40,     \n       'forty-one'     : 41,         \n       'forty-two'     : 42,         \n       'forty-three'  : 43,            \n       'forty-four'   : 44,           \n       'forty-five'   : 45,           \n       'forty-six'     : 46,         \n       'forty-seven'  : 47,            \n       'forty-eight'  : 48,            \n       'forty-nine'   : 49,           \n       'fifty'         : 50,     \n       'fifty-one'     : 51,         \n       'fifty-two'     : 52,         \n       'fifty-three'  : 53,            \n       'fifty-four'   : 54,           \n       'fifty-five'   : 55,           \n       'fifty-six'     : 56,         \n       'fifty-seven'  : 57,            \n       'fifty-eight'  : 58,            \n       'fifty-nine'   : 59,           \n       'sixty'         : 60,     \n       'sixty-one'     : 61,         \n       'sixty-two'     : 62,         \n       'sixty-three'  : 63,            \n       'sixty-four'   : 64,           \n       'sixty-five'   : 65,           \n       'sixty-six'     : 66,         \n       'sixty-seven'  : 67,            \n       'sixty-eight'  : 68,            \n       'sixty-nine'   : 69,           \n       'seventy'       : 70,       \n       'seventy-one'  : 71,            \n       'seventy-two'  : 72,            \n       'seventy-three': 73,              \n       'seventy-four' : 74,             \n       'seventy-five' : 75,             \n       'seventy-six'  : 76,            \n       'seventy-seven': 77,              \n       'seventy-eight': 78,              \n       'seventy-nine' : 79,             \n       'eighty'        : 80,      \n       'eighty-one'   : 81,           \n       'eighty-two'   : 82,           \n       'eighty-three' : 83,             \n       'eighty-four'  : 84,            \n       'eighty-five'  : 85,            \n       'eighty-six'   : 86,           \n       'eighty-seven' : 87,             \n       'eighty-eight' : 88,             \n       'eighty-nine'  : 89,            \n       'ninety'        : 90,      \n       'ninety-one'   : 91,           \n       'ninety-two'   : 92,           \n       'ninety-three' : 93,             \n       'ninety-four'  : 94,            \n       'ninety-five'  : 95,            \n       'ninety-six'   : 96,           \n       'ninety-seven' : 97,             \n       'ninety-eight' : 98,             \n       'ninety-nine'  : 99,\n       'hundred'      : 100,\n       'thousand'      : 1000,\n       'million'       : 1000_000,}\n\ndef parse_int(s):\n    cn, res = 0, 0\n    for number in (dic[w] for w in s.replace(' and','').split() if w in dic):\n        if   number <  100: cn += number\n        elif number == 100: cn *= number\n        else              : res += cn * number; cn = 0\n    return res + cn", "def parse_int(string):\n    \n    print(string)\n    \n    setDigit = {\"zero\"      :0,\n                \"one\"       :1,\n                \"two\"       :2,\n                \"three\"     :3,\n                \"four\"      :4,\n                \"five\"      :5,\n                \"six\"       :6,\n                \"seven\"     :7,\n                \"eight\"     :8,\n                \"nine\"      :9,\n                \"ten\"       :10,\n                \"eleven\"    :11,\n                \"twelve\"    :12,\n                \"thirteen\"  :13,\n                \"fourteen\"  :14,\n                \"fifteen\"   :15,\n                \"sixteen\"   :16,\n                \"seventeen\" :17,\n                \"eighteen\"  :18,\n                \"nineteen\"  :19,\n                \"twenty\"    :20,\n                \"thirty\"    :30,\n                \"forty\"     :40,\n                \"fifty\"     :50,\n                \"sixty\"     :60,\n                \"seventy\"   :70,\n                \"eighty\"    :80,\n                \"ninety\"    :90,\n                }\n     \n     \n    millionNumber, thousandNumber, hundredNumber, number = (0,) * 4\n       \n    for word in string.split():\n        for newWord in word.split('-'):     \n            \n            try:\n                digit = setDigit[newWord]\n                number += digit\n            except:\n                \n                if newWord == \"hundred\":\n                    hundredNumber = number\n                    number = 0\n                    \n                if newWord == \"thousand\":\n                    thousandNumber = 100 * hundredNumber + number\n                    hundredNumber = 0\n                    number = 0\n                    \n                if newWord == \"million\":\n                    millionNumber = number\n                    number = 0\n          \n    return(millionNumber * 1000000 + thousandNumber * 1000 + hundredNumber * 100 + number)\n        \n", "import re\n\nSIMPLIFIER = re.compile(r'(\\s|-|\\band)+')\nSPLITTER   = [re.compile(rf'\\s*{what}\\s*') for what in ('million', 'thousand', 'hundred', r'ty\\b')]\nCOEFS      = [10**x for x in (6,3,2,1)]\n\nvals       = \"zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\".split()\nVALUES     = {name:v for name,v in zip(vals, range(len(vals)))}\nVALUES.update({'twen': 2, 'thir': 3, 'for': 4, 'fif': 5, 'eigh':8})\n\n\ndef parse_int(s): \n    return parse(0, SIMPLIFIER.sub(' ',s.lower()))\n\ndef parse(i, s):\n    if i == len(SPLITTER): return VALUES.get(s,0)\n        \n    lst, coef, i = SPLITTER[i].split(s), COEFS[i], i+1\n    \n    return parse(i,lst[0]) if len(lst)==1 else coef * parse(i,lst[0]) + parse(i,lst[1])", "VALUES = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n    'ten': 10,\n    'eleven': 11,\n    'twelve': 12,\n    'thirteen': 13,\n    'fourteen': 14,\n    'fifteen': 15,\n    'sixteen': 16,\n    'seventeen': 17,\n    'eighteen': 18,\n    'nineteen': 19,\n    'twenty': 20,\n    'thirty': 30,\n    'forty': 40,\n    'fifty': 50,\n    'sixty': 60,\n    'seventy': 70,\n    'eighty': 80,\n    'ninety': 90,\n}\n\n\ndef parse_int(string):    \n    if not string:\n        return 0\n\n    if string == 'one million':\n        return 1000000\n\n    if string in VALUES:\n        return VALUES[string]\n\n    if 'thousand' in string:\n        before, after = split(string, 'thousand and') if 'thousand and' in string else split(string, 'thousand')\n        factor = 1000\n    elif 'hundred' in string:\n        before, after = split(string, 'hundred and') if 'hundred and' in string else split(string, 'hundred')\n        factor = 100\n    elif '-' in string:\n        before, after = split(string, ' ') if ' ' in string else split(string, '-')\n        factor = 1\n\n    return parse_int(before) * factor + parse_int(after)\n        \n\ndef split(string, separator):\n    before, after = string.rsplit(separator, 1)\n    return before.strip(), after.strip()", "number_words = {'': 0, 'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6,\n        'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10, 'eleven': 11, 'twelve': 12, 'thirteen': 13,\n        'fourteen': 14, 'fifteen': 15, 'sixteen': 16, 'seventeen': 17, 'eighteen': 18,\n        'nineteen': 19, 'twenty': 20,  'thirty': 30, 'forty': 40, 'fifty': 50, 'sixty': 60,\n        'seventy': 70, 'eighty': 80, 'ninety': 90, 'one million': 1000000}\n\ndef parse_int(string):\n    string_words = string.split()\n    if 'thousand' in string_words:\n        parts = string.partition('thousand')\n        return parse_int(parts[0].strip()) * 1000 + parse_int(parts[2].strip())\n    elif 'hundred' in string_words:\n        parts = string.partition('hundred')\n        return parse_int(parts[0].strip()) * 100 + parse_int(parts[2].strip())\n    elif '-' in string:\n        parts = string.replace('and ', '').split('-')\n        return number_words[parts[0]] + number_words[parts[1]]\n    else:\n        return number_words[string.replace('and ', '')]", "from functools import reduce\ndef parse_int(string):\n    unit_ts={'zero':0,'one':1,'two':2,'three':3,'four':4,'five':5,'six':6,'seven':7,'eight':8,'nine':9,'ten':10,'eleven':11,'twelve':12,'thirteen':13,'fourteen':14,'fifteen':15,'sixteen':16,'seventeen':17,'eighteen':18,'nineteen':19,'twenty':20,'thirty':30,'forty':40,'fifty':50,'sixty':60,'seventy':70,'eighty':80,'ninety':90,'hundred':100,'thousand':1000,'million':1000000,'billion':1000000000}\n    text=string.split(' ')\n    lst=[]\n    for element in text:\n        if '-' in element:lst.append(unit_ts[element.split('-')[0]]+unit_ts[element.split('-')[1]])\n        elif element in unit_ts:lst.append(unit_ts[element])\n    myid=lst.index(max(lst))\n    result=0\n    result+=reduce(lambda x,y:x*y if y%100==0 else x+y,lst[:myid+1])if lst[:myid+1]!=[] else 0\n    result+=reduce(lambda x,y:x*y if y%100==0 else x+y,lst[myid+1:])if lst[myid+1:]!=[] else 0\n    return result", "def parse_int(string):\n    units = [\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\"nine\", \"ten\", \n        \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\",\n        \"nineteen\"\n        ]\n    tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n    \n    string = string.replace('-', ' ')\n    string = string.replace(' and ',' ')\n    words = string.split()\n    ans = 0\n    final_ans = 0\n    \n    for word in words:\n        if word in units: ans += units.index(word)\n        elif word in tens: ans += tens.index(word)*10\n        elif word == 'hundred': ans *= 100\n        elif word == 'thousand': final_ans,ans = ans*1000, 0\n        elif word == 'million': return 1000000\n    final_ans += ans    \n    return final_ans\n", "conv={\n      \"zero\":        0,\n      \"one\":         1,\n      \"two\":         2,\n      \"three\":       3,\n      \"four\":        4,\n      \"five\":        5,\n      \"six\":         6,\n      \"seven\":       7,\n      \"eight\":       8,\n      \"nine\":        9,\n      \"ten\":        10,\n      \"eleven\":     11,\n      \"twelve\":     12,\n      \"thirteen\":   13,\n      \"fourteen\":   14,\n      \"fifteen\":    15,\n      \"sixteen\":    16,\n      \"seventeen\":  17,\n      \"eighteen\":   18,\n      \"nineteen\":   19,\n      \"twenty\":     20,\n      \"thirty\":     30,\n      \"forty\":      40,\n      \"fifty\":      50,\n      \"sixty\":      60,\n      \"seventy\":    70,\n      \"eighty\":     80,\n      \"ninety\":     90,\n      \"hundred\":   100,\n      \"thousand\": 1000,\n      \"million\":  1000000\n      }\n\n\ndef parse99(s: str):\n    num = 0\n    for wd in s.split(\"-\"): num += conv.get(wd.strip(), 0)\n    return num\n    \n\ndef parseHundreds(s: str):\n    s = s.split(\"hundred\")\n    if len(s) == 1:\n        return parse99(s[0])\n    else:\n        return parse99(s[0])*100 + parse99(s[1])\n    \n\ndef parseThousands(s: str):\n    s = s.split(\"thousand\")\n    if len(s) == 1:\n        return parseHundreds(s[0])\n    else:\n        return parseHundreds(s[0])*1000 + parseHundreds(s[1]) \n    \ndef parseMillions(s: str):\n    s = s.split(\"million\")\n    if len(s) == 1:\n        return parseThousands(s[0])\n    else:\n        return parseThousands(s[0])*1000000 + parseThousands(s[1]) \n\ndef parse_int(s: str):\n    #\n    return parseMillions(s.replace(\" and \",\" \"))"]