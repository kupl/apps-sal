["# cook your dish here\n# cook your dish here\nclass Animal:\n    def __init__(self):\n        start, end, starting_time = map(int, input().split())\n        \n        self.ending_time = starting_time + abs(start - end)\n        self.velocity = 1 if end >= start else -1 \n        \n        self.eaten_by = -1, 10 ** 10\n        \n        self.start = start \n        self.end = end \n        self.starting_time = starting_time \n        \n    def will_collide(self, z):\n        if self.starting_time > z.ending_time or self.ending_time < z.starting_time:\n            return False \n            \n        if self.velocity == z.velocity:\n            if self.starting_time > z.starting_time:\n                self, z = z, self\n            if z.start == self.start + self.velocity * (z.starting_time - self.starting_time):\n                return z.starting_time\n            else:\n                return False\n        \n        if self.velocity == -1:\n            self, z = z, self\n        \n        t = ( z.start - self.start + z.starting_time + self.starting_time ) / 2 \n         \n        return t if self.starting_time <= t <= self.ending_time and z.starting_time <= t <= z.ending_time else False\n                \n        \n        \ndef main():\n    for _ in range(int(input())):\n        no_cats, no_rats = map(int, input().split())\n        \n        Cats = [Animal() for i in range(no_cats)]\n        \n        for i in range(no_rats):\n            rat = Animal() \n            for j in range(no_cats):\n                time = rat.will_collide(Cats[j])\n                if time:\n                    # print(time)\n                    if time < rat.eaten_by[1]:\n                        rat.eaten_by = j + 1, time \n                    \n                \n            print(rat.eaten_by[0])\n                \n                \n            \nmain()\n        ", "# cook your dish here\nclass Animal:\n    def __init__(self):\n        start, end, starting_time = map(int, input().split())\n        \n        self.ending_time = starting_time + abs(start - end)\n        self.velocity = 1 if end >= start else -1 \n        \n        self.eaten_by = -1, 10 ** 10\n        \n        self.start = start \n        self.end = end \n        self.starting_time = starting_time \n        \n    def will_collide(self, z):\n        if self.starting_time > z.ending_time or self.ending_time < z.starting_time:\n            return False \n            \n        if self.velocity == z.velocity:\n            if self.starting_time > z.starting_time:\n                self, z = z, self\n            if z.start == self.start + self.velocity * (z.starting_time - self.starting_time):\n                return z.starting_time\n            else:\n                return False\n        \n        if self.velocity == -1:\n            self, z = z, self\n        \n        t = ( z.start - self.start + z.starting_time + self.starting_time ) / 2 \n         \n        return t if self.starting_time <= t <= self.ending_time and z.starting_time <= t <= z.ending_time else False\n                \n        \n        \ndef main():\n    for _ in range(int(input())):\n        no_cats, no_rats = map(int, input().split())\n        \n        Cats = [Animal() for i in range(no_cats)]\n        \n        for i in range(no_rats):\n            rat = Animal() \n            for j in range(no_cats):\n                time = rat.will_collide(Cats[j])\n                if time:\n                    # print(time)\n                    if time < rat.eaten_by[1]:\n                        rat.eaten_by = j + 1, time \n                    \n                \n            print(rat.eaten_by[0])\n                \n                \n            \nmain()\n        ", "# cook your dish here\ndef sort(array):\n   new_array = []\n   for i, num in enumerate(array):\n      start = 0\n      last = i\n      while start != last:\n         mid = (start + last) // 2\n         if new_array[mid][0] > num[0]:\n            end = mid\n         else:\n            start = mid + 1\n      new_array.insert(start,num)\n   return new_array\n\ntests = int(input())\nfor _ in range(tests):\n   n, m = [int(j) for j in input().split()]\n   cats, rats = [[[0] * 3 for _ in range(n)],[[0] * 3 for _ in range(m)]]\n   for i in range(n):\n      cats[i] = [int(j) * 2 for j in input().split()]\n   for i in range(m):\n      rats[i] = [int(j) * 2 for j in input().split()]\n   \n   right_cats, left_cats, right_rats, left_rats = [[],[],[],[]]\n   for i in range(n):\n      start, end, time = cats[i]\n      if end > start:\n         right_cats.append([start-time,time,end-start+time,i])\n      else:\n         left_cats.append([start+time,time,start-end+time,i])\n   for i in range(m):\n      start, end, time = rats[i]\n      if end > start:\n         right_rats.append([start-time,time,end-start+time,i])\n      else:\n         left_rats.append([start+time,time,start-end+time,i])\n   \n   #right_cats = sort(right_cats)\n   #right_rats = sort(right_rats)\n   #left_cats = sort(left_cats)\n   #left_rats = sort(left_rats)\n   \n   cat_number = [[-1,-1] for _ in range(m)]\n   \n   for rat in left_rats:\n      point, start, end, index = rat\n      for cat in left_cats:\n         #if point < cat[0]:\n         #   break\n         if point == cat[0]:\n            time_of_collision = max(cat[1],start)\n            if time_of_collision <= end and time_of_collision <= cat[2]:\n               if cat_number[index][0] == -1 or time_of_collision < cat_number[index][1]:\n                  cat_number[index][0] = cat[3] + 1\n                  cat_number[index][1] = time_of_collision\n      for cat in right_cats:\n         #if point < cat[0]:\n         #   break\n         time_of_collision = (point - cat[0]) // 2\n         if time_of_collision >= start and time_of_collision <= end and time_of_collision >= cat[1] and time_of_collision <= cat[2]:\n            if cat_number[index][0] == -1 or time_of_collision < cat_number[index][1]:\n               cat_number[index][0] = cat[3] + 1\n               cat_number[index][1] = time_of_collision\n   for rat in right_rats:\n      point, start, end, index = rat\n      for cat in right_cats:\n         #if point < cat[0]:\n         #   break\n         if point == cat[0]:\n            time_of_collision = max(cat[1],start)\n            if time_of_collision <= end and time_of_collision <= cat[2]:\n               if cat_number[index][0] == -1 or time_of_collision < cat_number[index][1]:\n                  cat_number[index][0] = cat[3] + 1\n                  cat_number[index][1] = time_of_collision\n      for cat in left_cats[::-1]:\n         #if point > cat[0]:\n         #   break\n         time_of_collision = (cat[0] - point) // 2\n         if time_of_collision >= start and time_of_collision <= end and time_of_collision >= cat[1] and time_of_collision <= cat[2]:\n            if cat_number[index][0] == -1 or time_of_collision < cat_number[index][1]:\n               cat_number[index][0] = cat[3] + 1\n               cat_number[index][1] = time_of_collision\n   \n   for i in range(m):\n      print(cat_number[i][0])"]