["import sys\ninput = sys.stdin.readline\n\ns = input()\n\nM = int(input())\n\n\ndef next_pow_2(n):\n    p = 1\n    while p < n:\n        p <<= 1\n    return p\n\n\ndef represented_range(node, size):\n    l = node\n    r = node\n    while l < size:\n        l = 2*l\n        r = 2*r + 1\n    return l-size, r-size\n\n\nclass SegTree:\n    def __init__(self, size):\n        self.size = next_pow_2(size)\n        self.answer = [0] * (2*self.size)\n        self.opened = [0] * (2*self.size)\n        self.closed = [0] * (2*self.size)\n\n    # O(size * (O(func) + O(init))\n    def build(self, s):\n        for i in range(self.size):\n            self.answer[self.size + i] = 0\n            self.opened[self.size + i] = 1 if i < len(s) and s[i] == '(' else 0\n            self.closed[self.size + i] = 1 if i < len(s) and s[i] == ')' else 0\n\n        for i in range(self.size - 1, 0, -1):\n            matched = min(self.opened[2*i], self.closed[2*i+1])\n            self.answer[i] = self.answer[2*i] + self.answer[2*i+1] + matched\n            self.opened[i] = self.opened[2*i] + self.opened[2*i+1] - matched\n            self.closed[i] = self.closed[2*i] + self.closed[2*i+1] - matched\n\n    # O(log(size)), [l,r]\n    def query(self, l, r):\n        l += self.size\n        r += self.size\n\n        eventsR = []\n        answer = 0\n        opened = 0\n        while l <= r:\n            if l & 1:\n                matched = min(self.closed[l], opened)\n                answer += self.answer[l] + matched\n                opened += self.opened[l] - matched\n                l += 1\n            if not (r & 1):\n                eventsR.append((self.answer[r], self.opened[r], self.closed[r]))\n                r -= 1\n            l >>= 1\n            r >>= 1\n\n        for i in range(len(eventsR)-1, -1, -1):\n            a, o, c = eventsR[i]\n            matched = min(c, opened)\n            answer += a + matched\n            opened += o - matched\n\n        return answer\n\n\nseg = SegTree(len(s))\nseg.build(s)\n\nfor i in range(M):\n    l, r = [int(_) for _ in input().split()]\n    print(2*seg.query(l-1, r-1))\n", "import sys\ninput = sys.stdin.readline\n\ns = input()\n\nM = int(input())\n\n\ndef next_pow_2(n):\n    p = 1\n    while p < n:\n        p <<= 1\n    return p\n\n\ndef represented_range(node, size):\n    l = node\n    r = node\n    while l < size:\n        l = 2*l\n        r = 2*r + 1\n    return l-size, r-size\n\n\nclass SegTree:\n    def __init__(self, size):\n        self.size = next_pow_2(size)\n        self.answer = [0] * (2*self.size)\n        self.opened = [0] * (2*self.size)\n        self.closed = [0] * (2*self.size)\n\n    # O(size * (O(func) + O(init))\n    def build(self, s):\n        for i in range(self.size):\n            self.answer[self.size + i] = 0\n            self.opened[self.size + i] = 1 if i < len(s) and s[i] == '(' else 0\n            self.closed[self.size + i] = 1 if i < len(s) and s[i] == ')' else 0\n\n        for i in range(self.size - 1, 0, -1):\n            matched = min(self.opened[2*i], self.closed[2*i+1])\n            self.answer[i] = self.answer[2*i] + self.answer[2*i+1] + matched\n            self.opened[i] = self.opened[2*i] + self.opened[2*i+1] - matched\n            self.closed[i] = self.closed[2*i] + self.closed[2*i+1] - matched\n\n    # O(log(size)), [l,r]\n    def query(self, l, r):\n        l += self.size\n        r += self.size\n\n        eventsL = []\n        eventsR = []\n        while l <= r:\n            if l & 1:\n                eventsL.append((self.answer[l], self.opened[l], self.closed[l]))\n                l += 1\n            if not (r & 1):\n                eventsR.append((self.answer[r], self.opened[r], self.closed[r]))\n                r -= 1\n            l >>= 1\n            r >>= 1\n\n        answer = 0\n        opened = 0\n        for a, o, c in eventsL + eventsR[::-1]:\n            matched = min(c, opened)\n            answer += a + matched\n            opened += o - matched\n\n        return answer\n\n\nseg = SegTree(len(s))\nseg.build(s)\n\nfor i in range(M):\n    l, r = [int(_) for _ in input().split()]\n    print(2*seg.query(l-1, r-1))\n", "import sys\n\ninput = sys.stdin.readline\n\ns = input()\n\nM = int(input())\n\n\ndef next_pow_2(n):\n    p = 1\n    while p < n:\n        p <<= 1\n    return p\n\n\ndef represented_range(node, size):\n    l = node\n    r = node\n    while l < size:\n        l = 2 * l\n        r = 2 * r + 1\n    return l - size, r - size\n\n\nclass SegTree:\n    def __init__(self, size):\n        self.size = next_pow_2(size)\n        self.answer = [0] * (2 * self.size)\n        self.opened = [0] * (2 * self.size)\n        self.closed = [0] * (2 * self.size)\n\n    # O(size * (O(func) + O(init))\n    def build(self, s):\n        for i in range(self.size):\n            self.answer[self.size + i] = 0\n            self.opened[self.size + i] = 1 if i < len(s) and s[i] == '(' else 0\n            self.closed[self.size + i] = 1 if i < len(s) and s[i] == ')' else 0\n\n        for i in range(self.size - 1, 0, -1):\n            matched = min(self.opened[2 * i], self.closed[2 * i + 1])\n            self.answer[i] = self.answer[2 * i] + self.answer[2 * i + 1] + matched\n            self.opened[i] = self.opened[2 * i] + self.opened[2 * i + 1] - matched\n            self.closed[i] = self.closed[2 * i] + self.closed[2 * i + 1] - matched\n\n    # O(log(size)), [l,r]\n    def query(self, l, r):\n        l += self.size\n        r += self.size\n\n        eventsL = []\n        eventsR = []\n        while l <= r:\n            if l & 1:\n                eventsL.append((self.answer[l], self.opened[l], self.closed[l]))\n                l += 1\n            if not (r & 1):\n                eventsR.append((self.answer[r], self.opened[r], self.closed[r]))\n                r -= 1\n            l >>= 1\n            r >>= 1\n\n        answer = 0\n        opened = 0\n        for a, o, c in eventsL + eventsR[::-1]:\n            matched = min(c, opened)\n            answer += a + matched\n            opened += o - matched\n\n        return answer\n\n\nseg = SegTree(len(s))\nseg.build(s)\n\nfor i in range(M):\n    l, r = [int(_) for _ in input().split()]\n    print(2 * seg.query(l - 1, r - 1))"]