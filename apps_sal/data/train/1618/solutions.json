["from collections import defaultdict\nimport re\n\nP = re.compile(r'\\+?(-?\\d*)(x\\^?)?(\\d*)')\n\ndef differentiate(eq, x):\n    \n    derivate = defaultdict(int)\n    for coef,var,exp in P.findall(eq):\n        exp  = int(exp or var and '1' or '0')\n        coef = int(coef!='-' and coef or coef and '-1' or '1')\n        \n        if exp: derivate[exp-1] += exp * coef\n    \n    return sum(coef * x**exp for exp,coef in derivate.items())", "def parse_monom(monom):\n    if 'x' not in monom: monom = monom + 'x^0'\n    if monom.startswith('x'): monom = '1' + monom\n    if monom.startswith('-x'): monom = '-1' + monom[1:]\n    if monom.endswith('x'): monom = monom + '^1'\n    coefficient, degree = map(int, monom.replace('x', '').split('^'))\n    return degree, coefficient\n\ndef differentiate(equation, point):\n    monoms = equation.replace('-', '+-').lstrip('+').split('+')\n    polynom = dict(map(parse_monom, monoms))\n    return sum(coefficient * degree * point ** (degree - 1)\n               for degree, coefficient in polynom.items() if degree)", "from re import finditer\n\ndef differentiate(equation, point):\n    res = 0\n    \n    for exp in finditer(r'([\\+\\-])?(\\d*)?x\\^?(\\d+)?', equation):\n        sign = -1 if exp.group(1) == '-' else 1\n        scalar = int(exp.group(2)) if exp.group(2) else 1\n        power = int(exp.group(3)) if exp.group(3) else 1\n\n        res += sign * (power * scalar) * point ** (power - 1)\n        \n    return res\n\n", "def differentiate(equation, point):\n    #This can almost certainly be done waaaaay better with regex ...\n    \n    #Where are all the signs between terms?\n    signs = [i for i in range(len(equation)) if equation[i] in \"+-\"]\n    if not 0 in signs: signs = [0] + signs\n    \n    #Parse the coefficients and powers (all assumed integers)\n    coeffs = []\n    powers = []\n    for i in range(len(signs)):\n        if i+1 == len(signs):\n            term = equation[signs[i]:]\n        else:\n            term = equation[signs[i]:signs[i+1]]\n        if \"^\" in term:\n            i = term.index(\"^\")\n            powers += [int(term.split(\"^\")[1])]\n        elif \"x\" in term:\n            powers += [1]\n        if \"x\" in term:\n            c = term.split(\"x\")[0]\n            if c in [\"\",\"+\",\"-\"]:\n                coeffs += [-1 if c == \"-\" else 1]\n            else:\n                coeffs += [int(c)]\n    return sum([c*p*point**(p-1) for c,p in zip(coeffs,powers)])\n", "import re\n\ndef differentiate(equation, point):\n    d = {int(p or 1): int({'' : 1, '-' : -1}.get(n, n)) for n, x, p in re.findall('([-]?\\d*)(?:(x)(?:\\^(\\d+))?)?', equation) if x or p}\n    return sum(t * p * point ** (p - 1) for p, t in d.items())", "def differentiate(equation, point):\n    a = filter(lambda x:'x' in x,equation.replace('-','+-').split(\"+\"))\n    sum = 0\n    for i in list(a):\n        split_i = i.split('x')\n        split_i[0] = split_i[0] + '1' if split_i[0] == '' or split_i[0]=='-' else split_i[0]\n        split_i[1] = '^1' if split_i[1] == '' else split_i[1]\n        sum += int(split_i[0])*int(split_i[1][1:])*(point**(int(split_i[1][1:])-1))\n    return sum", "def differentiate(eq, point):\n    eq = eq.replace('-', ' -').strip()\n    eq = eq.replace('+', ' +').strip()\n    eq = eq.replace('-x', '-1x')\n    eq = eq.replace('+x', '+1x')\n    eq = eq.split(' ')\n\n    eq = [i if i[0].isalpha() == False else \"1\"+i for i in eq]\n    \n    if \"x\" not in eq[-1]: eq.pop(-1)\n    for i in range(len(eq)):\n        if eq[i][-1] == \"x\":\n            eq[i] = eq[i][:-1] + \"x^1\"\n        j = int(eq[i][-1])\n        eq[i] = int(eq[i][:-3]) * j * (point ** (j-1))\n\n    return sum(eq)", "import re\n\ndef differentiate(equation, point):\n    terms = re.findall(r'[-]*[0-9x^]+', equation)\n    result = 0\n    for term in terms:\n        amount = re.search(r'^-*[0-9]+|^-*x', term)\n        if amount is not None:\n            amount = amount.group(0)\n            if amount == 'x':\n                amount = 1\n            elif amount == \"-x\":\n                amount = -1\n            else:\n                int(amount)\n        power = re.search(r'(?<=\\^)\\d+$|x+$', term)\n        if power is not None:\n            power = power.group(0)\n            if power.isnumeric():\n                result = result + (int(power) * int(amount) * point**(int(power)-1))\n            elif power == 'x':\n                power = 1\n                result = result + (int(amount) * power)\n    return result", "from re import findall\n\ndef val(s):\n    if not s: return 1\n    if s[0] == '+': return int(s[1:] or '1')\n    if s[0] == '-': return -int(s[1:] or '1')\n    return int(s)\n\ndef differentiate(equation, point):\n    res = 0\n    for x in findall(\"[+-]?\\d*x(?:\\^\\d+)?\", equation):\n        i = x.find('x')\n        v, p = val(x[:i]), int(x[i+2:] or '1')\n        res += v * p * point**(p-1)\n    return res", "def differentiate(equation, point):\n\n    if equation[0] != '-': equation = '+' + equation\n    \n    equation = equation.replace('+x', '+1x').replace('-x', '-1x').replace('+', ' ').replace('-', ' -')\n    \n    terms = [[int(e) for e in (w + '^1' if '^' not in w else w).split('x^')] for w in equation.split() if 'x' in w]\n    \n    return sum(c * p * point ** (p - 1) for c, p in terms)"]