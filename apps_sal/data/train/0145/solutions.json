["class Solution(object):\n     def judgePoint24(self, nums):\n         bad = '\ub5a2\ube3b\uac01\uac4e\ub0c7\uac05\uac38\uae9a\ubd5f\uc223\uc684\ubd74\ubd5e\ub93c\uac08\uac0c\ub914\ub58c\uc60a\uba54\ub284\uc22d\uceb8\uae36\uae9b\uc616\uac0d\ub1d0\uca62\uacf4\ub4c7\uac6f\uad84\uc615\uc679\ub21e\uc1b4\uac43\ub057\uae2c\ub549\uadbf\uac00\uc300\ub090\uac44\uc224\ubeb4\ub298\uac58\uaf78\uc222\uac42\uac0b\uac03\ucad0\uaf14\uc1be\uca61\uc1d4\uc1bf\ub05b\ub91c\uac04\ube3a\uca6c\uc6e8\ub534\uc620\ub91b\uac02\ubd6a\ub360\ub1a4\ube50\uc60b\uadd2\ub282\uac30\uac16\ub1a5\uadbe\uac06\uc60c\ubf18\ubb30\uac70\uac0e\uae37\ub0a4\uacbc'\n         return chr(int(''.join(map(str, sorted(nums)))) + 42921) not in bad\n", "class Solution:\n     def judgePoint24(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         bad = '\u5bf9\u6492\u5258\u52a5\u571e\u525c\u528f\u54f1\u63b6\u687a\u6cdb\u63cb\u63b5\u5f93\u525f\u5263\u5f6b\u5be3\u6c61\u60ab\u58db\u6884\u750f\u548d\u54f2\u6c6d\u5264\u5827\u70b9\u534b\u5b1e\u52c6\u53db\u6c6c\u6cd0\u5875\u680b\u529a\u56ae\u5483\u5ba0\u5416\u5257\u6957\u56e7\u529b\u687b\u650b\u58ef\u52af\u55cf\u6879\u5299\u5262\u525a\u7127\u556b\u6815\u70b8\u682b\u6816\u56b2\u5f73\u525b\u6491\u70c3\u6d3f\u5b8b\u6c77\u5f72\u5259\u63c1\u59b7\u57fb\u64a7\u6c62\u5429\u58d9\u5287\u526d\u57fc\u5415\u525d\u6c63\u656f\u6187\u52c7\u5265\u548e\u56fb\u5313'\n         return chr(int(''.join(map(str, sorted(nums)))) + 19968) not in bad", "class Solution:\n     def judgePoint24(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         bad = '\ub5a2\ube3b\uac01\uac4e\ub0c7\uac05\uac38\uae9a\ubd5f\uc223\uc684\ubd74\ubd5e\ub93c\uac08\uac0c\ub914\ub58c\uc60a\uba54\ub284\uc22d\uceb8\uae36\uae9b\uc616\uac0d\ub1d0\uca62\uacf4\ub4c7\uac6f\uad84\uc615\uc679\ub21e\uc1b4\uac43\ub057\uae2c\ub549\uadbf\uac00\uc300\ub090\uac44\uc224\ubeb4\ub298\uac58\uaf78\uc222\uac42\uac0b\uac03\ucad0\uaf14\uc1be\uca61\uc1d4\uc1bf\ub05b\ub91c\uac04\ube3a\uca6c\uc6e8\ub534\uc620\ub91b\uac02\ubd6a\ub360\ub1a4\ube50\uc60b\uadd2\ub282\uac30\uac16\ub1a5\uadbe\uac06\uc60c\ubf18\ubb30\uac70\uac0e\uae37\ub0a4\uacbc'\n         return chr(int(''.join(map(str, sorted(nums)))) + 42921) not in bad", "class Solution:\n     def judgePoint24(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         bad = '\u5bf9\u6492\u5258\u52a5\u571e\u525c\u528f\u54f1\u63b6\u687a\u6cdb\u63cb\u63b5\u5f93\u525f\u5263\u5f6b\u5be3\u6c61\u60ab\u58db\u6884\u750f\u548d\u54f2\u6c6d\u5264\u5827\u70b9\u534b\u5b1e\u52c6\u53db\u6c6c\u6cd0\u5875\u680b\u529a\u56ae\u5483\u5ba0\u5416\u5257\u6957\u56e7\u529b\u687b\u650b\u58ef\u52af\u55cf\u6879\u5299\u5262\u525a\u7127\u556b\u6815\u70b8\u682b\u6816\u56b2\u5f73\u525b\u6491\u70c3\u6d3f\u5b8b\u6c77\u5f72\u5259\u63c1\u59b7\u57fb\u64a7\u6c62\u5429\u58d9\u5287\u526d\u57fc\u5415\u525d\u6c63\u656f\u6187\u52c7\u5265\u548e\u56fb\u5313'\n         return chr(int(''.join(map(str, sorted(nums)))) + 19968) not in bad", "class Solution(object):\n     def judgePoint24(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         \n         def cal(operands, operaters):\n             for opt in operaters:\n                 op2, op1 = operands.pop(-1), operands.pop(-1)\n                 if opt=='+':\n                     ret = op1+op2\n                 elif opt=='-':\n                     ret = op1-op2\n                 elif opt=='*':\n                     ret = op1*op2\n                 elif opt=='/' and op2!=0:\n                     ret = op1/op2\n                 else:\n                     return float('-inf')\n                 operands.append(ret)\n             \n             return operands[0] if abs(operands[0]-24)>0.0000001 else 24\n         \n         def comb(arr):\n             if len(arr)==1:\n                 return [arr]\n             ret = []\n             for i in range(len(arr)):\n                 if i-1>=0 and arr[i]==arr[i-1]:\n                     continue\n                 for remain in comb(arr[:i]+arr[i+1:]):\n                     ret.append([arr[i]]+remain)\n             return ret\n         \n         def genopt(n):\n             if n==0:\n                 return ['']\n             ret = []\n             for i in '+-*/':\n                 for res in genopt(n-1):\n                     ret.append(i+res)\n             return ret\n         \n         nums.sort()\n         ops = comb(nums)\n         opts = genopt(3)\n         for op in ops:\n             for opt in opts:\n                 if cal(op[:], opt)==24:\n                     return True\n                 \n         def base(a, b):\n             return set([a+b,a-b,b-a,a*b]+([a/b] if b!=0 else[])+([b/a] if a!=0 else[]))\n             \n         for i in range(4):\n             for j in range(i+1, 4):\n                 a, b = nums[i], nums[j]\n                 remain = nums[:i]+nums[i+1:j]+nums[j+1:4]\n                 for x in base(a, b):\n                     for y in base(remain[0], remain[1]):\n                         if 24 in base(x, y):\n                             return True\n                 \n         \n         return False", "class Solution(object):\n     def judgePoint24(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         n = len(nums)\n         if n == 1:\n             return abs(nums[0] - 24) < 0.0001\n \n         for i in range(n - 1):\n             for j in range(i + 1, n):\n                 remainder = nums[:i] + nums[i + 1:j] + nums[j + 1:]\n \n                 if self.judgePoint24(remainder + [nums[i] + nums[j]]):\n                     return True\n                 if self.judgePoint24(remainder + [nums[i] - nums[j]]):\n                     return True\n                 if self.judgePoint24(remainder + [nums[j] - nums[i]]):\n                     return True\n                 if self.judgePoint24(remainder + [nums[i] * nums[j]]):\n                     return True\n                 if nums[j] != 0 and self.judgePoint24(remainder + [nums[i] / nums[j]]):\n                     return True\n                 if nums[i] != 0 and self.judgePoint24(remainder + [nums[j] / nums[i]]):\n                     return True\n \n         return False"]