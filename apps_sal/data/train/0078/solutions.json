["import sys\n\nq = int(sys.stdin.readline().strip())\nfor t in range(0, q):\n    n, m = list(map(int, sys.stdin.readline().strip().split()))\n    L = []\n    R = [0] * n\n    C = [0] * m\n    for i in range (0, n):\n        L.append(sys.stdin.readline().strip())\n        for j in range (0, m):\n            if L[i][j] != \"*\":\n                R[i] = R[i] + 1\n                C[j] = C[j] + 1\n    ans = n + m - 1\n    for i in range (0, n):\n        for j in range (0, m):\n            x = 0\n            if L[i][j] != \"*\":\n                x = -1\n            ans = min([ans, R[i]+C[j]+x])\n    print(ans)", "import sys\nQ = int(input())\nfor _ in range(Q):\n    N, M = map(int, sys.stdin.readline().split())\n    G = [[1 if s == '*' else 0 for s in sys.stdin.readline().strip()] for _ in range(N)]\n    ans = 10**9+7\n    G1 = [sum(g) for g in G]\n    G = list(map(list, zip(*G)))\n    G2 = [sum(g) for g in G]\n    G = list(map(list, zip(*G)))\n    K = N + M - 1\n    for i in range(N):\n        for j in range(M):\n            if G[i][j]:\n                ans = min(ans, K - (G1[i] + G2[j] - 1))\n            else:\n                ans = min(ans, K - (G1[i] + G2[j]))\n    sys.stdout.write('{}\\n'.format(ans))", "import sys\nimport math\ninput = sys.stdin.readline\n\nq=int(input())\nfor i in range(q):\n\tn,m=list(map(int,input().split()))\n\tr=[0]*n\n\tc=[0]*m\n\tarr=[]\n\tfor i in range(n):\n\t\tarr.append(input())\n\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif arr[i][j]==\".\":\n\t\t\t\tr[i]+=1\n\t\t\t\tc[j]+=1\n\tminn=1000000000\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif arr[i][j]==\".\":\n\t\t\t\tminn=min(minn,r[i]+c[j]-1)\n\t\t\telse:\n\t\t\t\tminn=min(minn,r[i]+c[j])\n\n\tprint(minn)\n\t\t\n", "q = int(input())\nfor query in range(q):\n\tn, m = list(map(int, input().split()))\n\tmatrix = [input() for i in range(n)]\n\trow = [0] * n\n\tcol = [0] * m\n\tfor i in range(n):\n\t\tsuma = 0\n\t\tfor j in range(m):\n\t\t\tif matrix[i][j] == '*':\n\t\t\t\tsuma += 1\n\t\trow[i] = suma\n\tfor j in range(m):\n\t\tsuma = 0\n\t\tfor i in range(n):\n\t\t\tif matrix[i][j] == '*':\n\t\t\t\tsuma += 1\n\t\tcol[j] = suma\n\twynik = 100000000000\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tpom = m + n - 1 - (row[i] + col[j] - (1 if matrix[i][j] == '*' else 0))\n\t\t\twynik = min(wynik, pom)\n\tprint(wynik)\n\t\t\t\n", "from sys import stdin\nc=int(stdin.readline().strip())\nfor i in range(c):\n    n,m=list(map(int,stdin.readline().strip().split()))\n    s=[stdin.readline().strip() for j in range(n)]\n    ms=[]\n    ns=[]\n    for j in range(n):\n        ns.append(s[j].count(\".\"))\n    \n    for j in range(m):\n        ms.append(0)\n        for k in range(n):\n            if s[k][j]==\".\":\n                ms[-1]+=1\n    ans=10**15\n    for j in range(n):\n        for k in range(m):\n            x=ns[j]+ms[k]\n            if s[j][k]==\".\":\n                x-=1\n            ans=min(ans,x)\n    print(ans)\n", "t = int(input())\nfor i in range(t):\n    e,s = list(map(int, input().split()))\n    f = []\n    for h in range(e):\n        f.append(input())\n    now = 0\n    mi = 0\n    mi2 = []\n    g = []\n    for y in range(e):\n        now = 0\n        g = []\n        for x in range(s):\n            if(f[y][x]==\"*\"):\n                now+=1\n            else:\n                g.append(x)\n        if(now>mi):\n            mi = now\n            mi2 = []\n            for k in range(len(g)):\n                mi2.append(g[k])\n        elif(now==mi):\n            for k in range(len(g)):\n                mi2.append(g[k])\n    now = 0\n    ma = 0\n    d = True\n    for y in range(s):\n        now = 0\n        for x in range(e):\n            if(f[x][y]==\"*\"):\n                now+=1\n        if(now>ma):\n            ma = now\n            if(y in mi2):\n                d = False\n            else:\n                d = True\n        elif(now==ma):\n            if(y in mi2):\n                d = False\n    if(d):\n        print(e-mi+s-ma)\n    else:\n        print(e-mi+s-ma-1)\n", "import sys\ninput = sys.stdin.readline\n\nQ=int(input())\nfor testcases in range(Q):\n    n,m=list(map(int,input().split()))\n\n    MAP=[list(input().strip()) for i in range(n)]\n\n    R=[MAP[i].count(\"*\") for i in range(n)]\n    C=[]\n    \n    for j in range(m):\n        M=[MAP[i][j] for i in range(n)]\n        C.append(M.count(\"*\"))\n\n    ANS=float(\"inf\")\n\n    for i in range(n):\n        for j in range(m):\n            if MAP[i][j]==\"*\":\n                ANS=min(ANS,n+m-R[i]-C[j])\n            else:\n                ANS=min(ANS,n+m-R[i]-C[j]-1)\n\n    print(ANS)\n                \n    \n", "n=int(input())\nfor i in range(n):\n    x,y=list(map(int,input().split()))\n    stolb=[0]*y\n    stroki=[0]*x\n    al=[]\n    for j in range(x):\n        st=input()\n        al.append(st)\n        for j2 in range(y):\n            if st[j2]=='.':\n                stroki[j]+=1\n                stolb[j2]+=1\n    mi=1000000000000000\n    for j in range(x):\n        for j2 in range(y):\n            if al[j][j2]=='.':\n                if stroki[j]+stolb[j2]-1<mi:\n                    mi=stroki[j]+stolb[j2]-1\n            else:\n                if stroki[j]+stolb[j2]<mi:\n                    mi=stroki[j]+stolb[j2]\n    print(mi)\n", "q = int(input())\nfor _ in range(q):\n    n, m = list(map(int, input().split()))\n    d = [list(input()) for _ in range(n)]\n    count_x = list([x.count('*') for x in d])\n    count_y = list([x.count('*') for x in zip(*d)])\n    #dt = map(list, zip(*d))\n    rls = n+m-1\n    for i in range(n):\n        for j in range(m):\n            a = count_x[i]\n            b = count_y[j]\n            if d[i][j] == '*':\n                rls = min(rls, n+m-a-b)\n            else:\n                rls = min(rls, n+m-a-b-1)\n    print(rls)\n", "import io, sys, atexit, os\nimport math as ma\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\n\ndef li ():\n\treturn list (map (int, input ().split ()))\n\n\ndef num ():\n\treturn map (int, input ().split ())\n\n\ndef nu ():\n\treturn int (input ())\n\n\ndef find_gcd ( x, y ):\n\twhile (y):\n\t\tx, y = y, x % y\n\treturn x\n\n\ndef lcm ( x, y ):\n\tgg = find_gcd (x, y)\n\treturn (x * y // gg)\n\n\nmm = 1000000007\nyp = 0\n\n\ndef solve ():\n\tt =nu()\n\tfor tt in range (t):\n\t\tn,m=num()\n\t\ta=[0]*n\n\t\tx=[0]*n\n\t\ty=[0]*m\n\t\tfor i in range(n):\n\t\t\tp=input()\n\t\t\ta[i]=[0]*m\n\t\t\tfor j in range(m):\n\t\t\t\tif(p[j]==\"*\"):\n\t\t\t\t\ta[i][j]=1\n\t\t\tx[i]=sum(a[i])\n\t\tfor i in range(m):\n\t\t\tcc=0\n\t\t\tfor j in range(n):\n\t\t\t\tcc+=a[j][i]\n\t\t\ty[i]=cc\n\t\tmn=9999999999\n\t\tfor i in range(n):\n\t\t\tfor j in range(m):\n\t\t\t\tpp=0\n\t\t\t\tpp = (n - x [ i ]) + (m - y [ j ])\n\t\t\t\tif(a[i][j]==0):\n\t\t\t\t\tpp-=1\n\t\t\t\tmn=min(mn,pp)\n\t\tprint(mn)\n\n\n\n\n\ndef __starting_point():\n\tsolve ()\n__starting_point()", "from fractions import gcd\nimport math\n\n\ndef inverse(a):\n    return pow(a, mod - 2, mod)\n\n\ndef usearch(x, a):\n    lft = 0\n    rgt = len(a) + 1\n    while rgt - lft > 1:\n        mid = (rgt + lft) // 2\n        if a[mid] <= x:\n            lft = mid\n        else:\n            rgt = mid\n    return lft\n\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        n,m = list(map(int, input().split()))\n        a = [input() for i in range(n)]\n        h = 0\n        h_a = []\n        for i in range(m):\n            tmp = 0\n            for j in range(n):\n                if a[j][i] == '*':\n                    tmp += 1\n            if h < tmp:\n                h = tmp\n                h_a = [i]\n            if h == tmp:\n                h_a.append(i)\n        w = 0\n        w_a = []\n        for i in range(n):\n            tmp = len([i for i in a[i] if i == '*'])\n            if w < tmp:\n                w = tmp\n                w_a = [i]\n            if w == tmp:\n                w_a.append(i)\n        flag = 0\n        for i in h_a:\n            for j in w_a:\n                if a[j][i] == '.':\n                    flag = 1\n                    break\n        print(n+m-h-w-flag)\n\nmain()\n", "\nfor _ in range(int(input())):\n    m,n=list(map(int,input().strip().split(' ')))\n    grid=[]\n    for i in range(m):\n        grid+=[input()]\n    row=[]\n    col=[]\n    MIN_row=10**10\n    MIN_col=10**10\n    for i in range(m):\n        count=0\n        for j in range(n):\n            if grid[i][j]==\".\":\n                count+=1\n        row+=[count]\n        MIN_row=min(MIN_row,count)\n    for j in range(n):\n        count=0\n        for i in range(m):\n            if grid[i][j]==\".\":\n                count+=1\n        col+=[count]\n        MIN_col=min(MIN_col,count)\n    \n    want_row=set([])\n    for i in range(len(row)):\n        if row[i]==MIN_row:\n            want_row.add(i)\n            \n    want_col=set([])\n    for i in range(len(col)):\n        if col[i]==MIN_col:\n            want_col.add(i)\n            \n    flag=0\n    for i in range(len(row)):\n        if flag==1:\n            break\n        for j in range(len(col)):\n            if grid[i][j]==\".\":\n                if i in want_row and j in want_col:\n                    flag=1\n                    break\n                    \n    print(MIN_row+MIN_col-flag)\n    \n    \n", "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport collections\nimport math\n\nT = int(input())\n \n#A,H,Q = [int(x) for x in stdin.readline().split()] \nfor t in range(T):\n    N,M = [int(x) for x in stdin.readline().split()]\n    #print(N,M)\n    data = []\n    row = [M]*N\n    col = [N]*M\n    for i in range(N):\n        s = input()\n        data.append(list(s))\n        for j in range(M):\n            if s[j]=='*':\n                row[i] -= 1\n                col[j] -= 1\n                \n    min_row = min(row)\n    min_col = min(col)\n    \n    if min_row==0 or min_col==0:\n        print(min_row+min_col)\n    else:\n        r = []\n        c = []\n        #res = 9999999\n        for i in range(N):\n            if row[i]==min_row:\n                r.append(i)\n        for j in range(M):\n            if col[j]==min_col:\n                c.append(j)\n                \n        flag = 0\n        for x in r:\n            for y in c:\n                if data[x][y]=='.' and flag==0:\n                    print(min_row+min_col-1)\n                    flag = 1\n            if flag==1:\n                break\n                    \n        if flag==0:        \n            print(min_row+min_col)\n                    \n        \n    \n    \n    \n \n", "q = int(input())\nfor i in range(q):\n    n, m = list(map(int,input().split()))\n    field = [input() for j in range(n)]\n    raw = [0] * n\n    col = [0] * m\n    num = 0\n    for j in range(n):\n        for z in range(m):\n            if field[j][z] == \"*\":\n                raw[j] += 1\n                col[z] += 1\n    for z in range(m):\n        for j in range(n):\n            temp = raw[j] + col[z] - int(field[j][z] == \"*\")\n            if num < temp:\n                num = temp\n    print(n + m - num - 1)\n", "def gns():\n    return list(map(int,input().split()))\nt=int(input())\n\n\ndef one():\n    n, m = gns()\n    mp = []\n    ns = [0] * n\n    ms = [0] * m\n    for i in range(n):\n        mp.append(input())\n        for j in range(m):\n            if mp[-1][j] == '*':\n                ns[i] += 1\n                ms[j] += 1\n    min_n = max(ns)\n    min_m = max(ms)\n    min_ns = set([i for i in range(n) if ns[i] == min_n])\n    min_ms = set([i for i in range(m) if ms[i] == min_m])\n    ans = n - min_n + m - min_m\n    for i in min_ns:\n        for j in min_ms:\n            if mp[i][j] == '.':\n                print(ans - 1)\n                return\n    print(ans)\n\n\nfor i in range(t):\n    one()\n\n\n\n\n", "for TT in range(1, int(input()) + 1):\n    n, m = map(int, input().split())\n    mat = [[1 if c == '*' else 0 for c in input()] for _ in range(n)]\n    h = [sum(l) for l in mat]\n    v = [0] * m\n    for i in range(n):\n        for j in range(m):\n            v[j] += mat[i][j]\n    res = float('inf')\n    for i in range(n):\n        for j in range(m):\n            val = (n - h[i]) + (m - v[j])\n            if mat[i][j] == 0: val -= 1\n            res = min(res, val)\n    print(res)", "import sys\ninput = lambda: sys.stdin.readline().strip()\nprint = lambda x: sys.stdout.write(f\"{x}\\n\")\n\nfor t in range(int(input())):\n  r, c = map(int, input().split())\n  arr = [input() for i in range(r)]\n  rarr = [0] * r\n  carr = [0] * c\n\n  for i in range(r):\n    for j in range(c):\n      if arr[i][j] == '.':\n        rarr[i] += 1\n        carr[j] += 1\n\n  ans = float('inf')\n  for i in range(r):\n    for j in range(c):\n      s = rarr[i] + carr[j]\n      if arr[i][j] == '.':\n        ans = min(ans, s - 1)\n      else:\n        ans = min(ans, s)\n  \n  print(ans)\n", "def __starting_point():\n    T = int(input())\n    #fout = open('1194B.out', 'w')\n    for _ in range(T):\n        s = input().rstrip().split()\n        n = int(s[0])\n        m = int(s[1])\n        cell = [[0 for j in range(m)] for i in range(n)]\n        r = [0 for i in range(n)]\n        c = [0 for j in range(m)]\n        for i in range(n):\n            s = input()\n            for j in range(len(s)):\n                cell[i][j] = s[j]\n                if s[j] == '*':\n                    r[i] += 1\n                    c[j] += 1\n        nmax = 0\n        for i in range(n):\n            for j in range(m):\n                if r[i] + c[j] + (cell[i][j] == '.') > nmax:\n                    nmax = r[i] + c[j] + (cell[i][j] == '.')\n        print(str(m + n - nmax) + '\\n')\n\n__starting_point()", "q = int(input())\n\nfor _ in range(q):\n    ans = 10000000000\n    n, m = list(map(int, input().split()))\n    picture = []\n    dotcount_w = []\n    dotcount_h = []\n    for _ in range(n):\n        picture.append(input())\n        dotcount_w.append(picture[-1].count(\".\"))\n\n    for i in range(m):\n        count = 0\n        for j in range(n):\n            if picture[j][i] == \".\":\n                count += 1\n        dotcount_h.append(count)\n    for i in range(m):\n        for j in range(n):\n            if picture[j][i] == \".\":\n                ans = min(dotcount_h[i]+dotcount_w[j]-1, ans)\n            else:\n                ans = min(dotcount_h[i]+dotcount_w[j], ans)\n    print(ans)\n", "q = int(input())\nfor i in range(q):\n    n,m = list(map(int,input().split()))\n    a = [input() for _ in range(n)]\n    a_t = list(zip(*a))\n    mx_1 = mx_2 = 0\n    idx_1 = []\n    idx_2 = []\n    for j,i in enumerate(a):\n        temp = i.count('*')\n        if temp > mx_1:\n            mx_1 = temp\n            idx_1 = [j]\n        elif temp == mx_1:\n            idx_1.append(j)\n    for j,i in enumerate(a_t):\n        temp = i.count('*')\n        if temp > mx_2:\n            mx_2 = temp\n            idx_2 = [j]\n        elif temp == mx_2:\n            idx_2.append(j)\n    ans = 0\n    for i in idx_1:\n        for j in idx_2:\n            if a[i][j] == '.':\n                ans = -1\n    print(n+m-mx_1-mx_2+ans)\n\n", "M = 10**9 + 7\nR = lambda: map(int, input().split())\nn = int(input())\nfor i in range(n):\n    n,m = R()\n    L = [[0 for i in range(m)] for j in range(n)]\n    a = []\n    for i in range(n):\n        a.append(input())\n    for i in range(n):\n        c = 0\n        for j in range(m):\n            if a[i][j] == '.':c += 1\n        for j in range(m):\n            L[i][j] = c\n    for i in range(m):\n        c = 0\n        for j in range(n):\n            if a[j][i] == '.':c += 1\n        for j in range(n):\n            L[j][i] += c\n    mi = 10**9\n    k = []\n    for i in range(n):\n        for j in range(m):\n            mi = min(mi,L[i][j])\n    for i in range(n):\n        for j in range(m):\n            if L[i][j] == mi and a[i][j] == '.':\n                mi -= 1\n    print(mi)"]