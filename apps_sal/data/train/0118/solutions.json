["__MULTITEST = True\n\n## solve\ndef solve():\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    group = 0\n    ptr = n-1\n    members = 0\n\n    currentMin = int(1e10)\n    while ptr > -1:\n        currentMin = min(currentMin, a[ptr])\n        members += 1\n\n        if currentMin * members >= x:\n            group += 1\n            members = 0\n            currentMin = int(1e10)\n        \n        ptr -= 1\n    \n    print(group)\n\n## main\ndef __starting_point():\n    t = (int(input()) if __MULTITEST else 1)\n    for tt in range(t):\n        solve();\n__starting_point()", "import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn,x = MI()\n\ta = sorted(LI())\n\ta = a[::-1]\n\tl = 0\n\tcount = 1\n\tans = 0\n\twhile l<n:\n\t\tif count*a[l]>=x:\n\t\t\tans+=1\n\t\t\tcount = 1\n\t\telse:\n\t\t\tcount+=1\n\t\tl+=1\n\tprint(ans)\n\n\n\n", "for _ in range(int(input())):\n    a,x = [int(a) for a in input().split(' ')]\n    arr = [int(a) for a in input().split(' ')]\n    arr = sorted(arr,reverse=True)\n    cur_skill = x\n    teams = 0\n    cur_len = 0\n    for i in arr:\n        if i >= x:\n            teams+=1\n            continue\n        else:\n            cur_skill = i\n            cur_len+=1\n            if cur_len*cur_skill >= x:\n                teams+=1\n                cur_len = 0\n                cur_skill = x\n\n    print(teams)", "import bisect\nimport sys\nimport math\ninput = sys.stdin.readline\nimport functools\n\nfrom collections import defaultdict\n\n############ ---- Input Functions ---- ############\n\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(list(map(int,input().split())))\n\n############ ---- Solution ---- ############\n\ndef solve(case):\n    [n, x] = inlt()\n    aa = inlt()\n    aa.sort()\n    new_team = n-1\n    res = 0\n    for i in range(n-1, -1, -1):\n        if aa[i] * (new_team - i + 1) >= x:\n            res += 1\n            new_team = i-1\n    return res\n    \n\nif len(sys.argv) > 1 and sys.argv[1].startswith(\"input\"):\n    f = open(\"./\" + sys.argv[1], 'r')\n    input = f.readline\n\nT = inp()\nfor i in range(T):\n    res = solve(i+1)\n    print(str(res))\n", "from sys import stdin, stdout\nimport math,sys\nfrom itertools import permutations, combinations\nfrom collections import defaultdict,deque,OrderedDict\nfrom os import path\nimport bisect as bi\nimport heapq \ndef yes():print('YES')\ndef no():print('NO')\nif (path.exists('input.txt')): \n    #------------------Sublime--------------------------------------#\n    sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\n    def I():return (int(input()))\n    def In():return(list(map(int,input().split())))\nelse:\n    #------------------PYPY FAst I/o--------------------------------#\n    def I():return (int(stdin.readline()))\n    def In():return(list(map(int,stdin.readline().split())))\ndef dict(a):\n    d={}\n    for x in a:\n        if d.get(x,-1)!=-1:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\n\n\ndef main():\n    try:\n        n,X=In()\n        l=list(In())\n        l.sort(reverse=True)\n        mi=-1\n        j,ans=0,0\n        for x in range(n):\n            if mi==-1:\n                mi=l[x]\n                j=1\n            else:\n                mi=min(mi,l[x])\n                j+=1\n            if mi*j>=X:\n                ans+=1\n                mi=-1\n                j=0\n        print(ans)\n\n    except:\n        pass\n        \nM = 998244353\nP = 1000000007\n \ndef __starting_point():\n    for _ in range(I()):main()\n    #for _ in range(1):main()\n\n__starting_point()", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    n, x = li()\n    l = sorted(li())[::-1]\n    ans = curr = 0\n    mi = float('inf')\n    for i in range(n):\n        curr += 1\n        mi = min(mi,l[i])\n        if curr * mi >= x:\n            ans += 1\n            mi = float('inf')\n            curr = 0\n    print(ans)", "def solve(arr,n,x,ans):\n    arr.sort()\n    teams = 0\n    size = 0\n    while arr:\n        min_val = arr.pop()\n        size += 1\n        if min_val*size >= x:\n            teams += 1\n            size = 0\n\n    ans.append(teams)\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n,x = list(map(int,input().split()))\n        arr = list(map(int,input().split()))\n        solve(arr,n,x,ans)\n\n    for i in ans:\n        print(i)\n\n\nmain()\n", "def solve(n, x, arr):\n    arr = sorted(arr)\n    res = 0\n    temp_length_so_far = 0\n    for i in range(n - 1, -1, -1):\n        temp_length_so_far += 1\n        if arr[i] * temp_length_so_far >= x:\n            res += 1\n            temp_length_so_far = 0\n    return res\n\n\nT = int(input())\nfor _ in range(T):\n    n, x = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(solve(n, x, arr))\n", "t = int(input())\nfor _ in range(t):\n    n, x = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    out = 0\n    count = 0\n    for v in l:\n        if v * (count + 1) >= x:\n            out += 1\n            count = 0\n        else:\n            count += 1\n    print(out)\n", "import math \nfrom collections import deque\nimport sys\n\n\nsys.setrecursionlimit(10**4) \n\ndef Divisors(n) : \n\t\n\tl=[]\n\ti = 2\n\twhile i <= math.sqrt(n): \n\t\t\n\t\tif (n % i == 0) : \n\t\t\t\n\t\t\t\n\t\t\tif (n // i == i) : \n\t\t\t\tl.append(i)\n\t\t\telse : \n\t\t\t\tl.append(i)\n\t\t\t\tl.append(n//i)\n\t\ti = i + 1\n\treturn l\n\ndef SieveOfEratosthenes(n): \n\t\n\tl=[]\n\t\n\tprime = [True for i in range(n+1)] \n\tp = 2\n\twhile (p * p <= n): \n\t\t\n\t\tif (prime[p] == True): \n\t\t\t\n\t\t\tfor i in range(p * p, n+1, p): \n\t\t\t\tprime[i] = False\n\t\tp += 1\n\t\n\tfor p in range(2, n+1): \n\t\tif prime[p]: \n\t\t\tl.append(p)\n\t\n\treturn l\t\t\n\ndef primeFactors(n): \n\t\n\tl=[]\n\t\n\twhile n % 2 == 0: \n\t\tl.append(2) \n\t\tn = n / 2\n\t\t\n\tfor i in range(3,int(math.sqrt(n))+1,2): \n\t\t\n\t\twhile n % i== 0: \n\t\t\tl.append(i) \n\t\t\tn = n / i \n\t\t\t\n\tif n > 2: \n\t\tl.append(n)\n\t\n\treturn(l)\t\n\t\t\n\ndef Factors(n) : \n\t\n\t\n\tresult = []\n\t\n\tfor i in range(2,(int)(math.sqrt(n))+1) : \n\n\t\tif (n % i == 0) : \n\t\t    \n\t\t\tif (i == (n/i)) : \n\t\t\t\tresult.append(i)\n\t\t\telse : \n\t\t\t    result.append(i)\n\t\t\t    result.append(n//i)\n\t\t\n\tresult.append(1)\n\t\n\treturn result\n\ndef maxSubArraySum(a): \n\t\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tsize=len(a)\n\t\n\tfor i in range(0, size): \n\t\tmax_ending_here = max_ending_here + a[i] \n\t\tif (max_so_far < abs(max_ending_here)): \n\t\t\tmax_so_far = max_ending_here \n\n\treturn max_so_far \n\ndef longestsubarray(arr, n, k): \n    current_count = 0\n      \n    # this will contain length of  \n    # longest subarray found \n    max_count = 0\n  \n    for i in range(0, n, 1): \n        if (arr[i] % k != 0): \n            current_count += 1\n        else: \n            current_count = 0\n        max_count = max(current_count,  \n                            max_count) \n      \n    return max_count \n    \n#print(SieveOfEratosthenes(100))\n#print(Divisors(100))\n#print(primeFactors(100))\n#print(Factors(100))\n#print(maxSubArraySum(a))\n \n\ndef main():\n    \n    n,x=list(map(int,input().split()))\n    l=list(map(int,input().split()))\n    l.sort()\n    c=1\n    ans=0\n    for j in range(len(l)-1,-1,-1):\n        if l[j]*c >=x:\n            ans+=1\n            c=1\n        else:\n            c+=1\n            \n    print(ans)\n        \n    \n    \n          \nt=int(input())\nfor i in range(0,t):\n    main()", "input=__import__('sys').stdin.readline\nfor _ in range(int(input())):\n    n,x=map(int,input().split())\n    s=sorted(map(int,input().split()),reverse=True)\n    i=ans=0\n    c=1\n    while i<n:\n        if c*s[i]>=x:ans+=1;c=1\n        else:c+=1\n        i+=1\n    print(ans)", "import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(lst,x):  # fix inputs here\n    console(\"----- solving ------\")\n\n    lst = sorted(lst)[::-1]\n\n    cnt = 0\n    pdt = lst[0]\n    res = 0\n    for i in lst:\n        cnt += 1\n        pdt = min(i, pdt)\n        if cnt*pdt >= x:\n            res += 1\n            cnt = 0\n            pdt = i\n        \n    # return a string (i.e. not a list or matrix)\n    return res\n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n# fast read all\n# sys.stdin.readlines()\n\nfor case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    # k = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    _,x = list(map(int,input().split()))\n    lst = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(map(int,input().split())))\n\n    res = solve(lst, x)  # please change\n    \n    # Google - case number required\n    # print(\"Case #{}: {}\".format(case_num+1, res))\n\n    # Codeforces - no case number required\n    print(res)\n", "t=int(input())\nfor _ in range(t):\n  n,x=map(int,input().split())\n  a=list(map(int,input().split()))\n  a.sort()\n  a.reverse()\n  count=0\n  ans=0\n  for i in range(n):\n    count+=1\n    if count*a[i]>=x:\n      ans+=1\n      count=0\n  print(ans)", "for kek in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(n):\n        f = 0\n        if  x % a[i] != 0:\n            f += 1\n        a[i] = x // a[i] + f\n    a.sort()\n    ans = 0\n    com = 1\n    for i in a:\n        if i == com:\n            ans += 1\n            com = 1\n        else:\n            com += 1\n    print(ans)", "for _ in range(int(input())):\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    i = 0\n    teams = 0\n    teamMem=0\n    while (i < len(arr)):\n        if ((teamMem+1) * arr[i]>=k):\n            teams += 1\n            teamMem = 0\n        else:\n            teamMem += 1\n        i += 1\n        # print(teams,teamMem)\n    print(teams)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    n,x=map(int,input().split())\n    a = sorted([int(x) for x in input().split()])\n    ans = 0\n    while a and a[-1]>=x:\n        ans +=1\n        a.pop()\n    i=len(a)-1\n    l=1\n    while i>=0:\n        if a[i]*l>=x:\n            ans += 1\n            l=0\n        i-=1\n        l+=1\n    print(ans)"]