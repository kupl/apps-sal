["tc=int(input())\nfor case in range(tc):\n n,d=list(map(int,input().split()))\n a=list(map(int,input().split()))\n sm=sum(a)\n f=True\n if sm%n==0:\n  avg=sm/n\n  for i in range(d):\n   tmp_sm=0\n   tmp_n=0\n   for j in range(i,n,d):\n    tmp_sm=tmp_sm+a[j]\n    tmp_n+=1\n   if tmp_sm%tmp_n==0:\n    if avg!=tmp_sm/tmp_n:\n     f=False\n     break\n   else:\n    f=False\n    break\n else:\n  f=False\n if f:\n  ans=0\n  cur=0\n  for i in range(d):\n   for j in range(i,n,d):\n    cur=cur+avg-a[j]\n    ans=ans+abs(cur)\n  print(ans)\n else:\n  print(-1)\n", "for _ in range(eval(input())):\n n, d = list(map(int, input().strip().split()))\n l = list(map(int, input().strip().split()))\n main_flag = 0\n final_count = 0\n total = sum(l)\n if total % n != 0:\n  print(-1)\n  continue\n else:\n  expected_value = total / n\n  for i in range(d):\n   delta = []\n   j = i\n   while j < n:\n    delta.append(expected_value - l[j])\n    j += d\n   diff = 0\n   curr_diff = 0\n   flag = 0\n   count = 0\n   for k in range(len(delta)):\n    if diff != 0 and flag:\n     count += abs(diff)\n    if delta[k] != 0:\n     diff += delta[k]\n     if diff == 0:\n      flag = 0\n     else:\n      flag = 1\n   if flag == 0:\n    final_count += count\n   else:\n    main_flag = 1\n    break\n print(final_count if not main_flag else -1)\n", "import sys\nimport string\nimport cmath\nimport math\n\nT = int(input())\nfor i in range(T):\n N,D = list(map(int, input().split()))\n A = list(map(int, input().split()))\n s = sum(A)\n ans=0\n if (s%N)==0:\n  x = s/N\n  for j in range(N-D):\n   if A[j]<x:\n    A[j+D] -= x-A[j]\n    ans+=x-A[j]\n    A[j] = x\n   elif A[j]>x:\n    A[j+D] += A[j]-x\n    ans+=A[j]-x\n    A[j] = x\n  for j in range(N):\n   if A[j]!=x:\n    ans=-1\n else:\n  ans=-1\n \n print(ans)\n", "T=int(input())\nfor i in range(0,T):\n (N,D)=input().split()\n N=int(N)\n D=int(D)\n L=[int(i) for i in input().split()]\n A=0\n flag=''\n MOVE=0\n s=0\n s=sum(L)\n if (s%len(L))!=0:\n  print(-1)\n  flag=False\n else:\n  A=s/len(L)\n  for i in range(N):\n   if L[i]>A and (i+D)<N:\n    diff=L[i]-A\n    L[i]=L[i]-diff\n    L[i+D]=L[i+D]+diff\n    MOVE=MOVE+diff\n    \n   elif L[i]<A and (i+D)<N:\n    diff=A-L[i]\n    #if L[i+D]>=diff:\n    L[i]=L[i]+diff\n    L[i+D]=L[i+D]-diff\n    MOVE=MOVE+diff\n  for i in L:\n   if i!=A and flag!=False:\n    print(-1)\n    flag=False\n    break \n  if flag!=False:\n   print(int(MOVE))\n \n\n   \n     \n", "t=int(input())\n \nwhile t>0:\n n,d = list(map(int, input().split()))\n arr=list(map(int, input().split()))\n count=0\n sum1=sum(arr)\n \n if sum1%n != 0:\n  print(\"-1\")\n\n else:\n  ans=0\n  average = sum1/n\n  for i in range(0,n):\n   if arr[i] != average and i+d>=n:\n    ans=-1\n    break\n   else:\n    y=arr[i]-average\n    ans+=abs(y)\n    if i+d < n:\n     arr[i+d]+=y\n\n     \n  print(ans)\n   \n t=t-1 \n", "T=int(input())\nfor i in range(0,T):\n \n (N,D)=input().split()\n N=int(N)\n D=int(D)\n L=[int(i) for i in input().split()]\n A=0\n #A=sum(L)/float(len(L))\n #print A\n flag=''\n MOVE=0\n s=0\n s=sum(L)\n if (s%len(L))!=0:\n  print(-1)\n  flag=False\n else:\n  A=s/len(L)\n  for i in range(N):\n   if L[i]>A and (i+D)<N:\n    diff=L[i]-A\n    L[i]=L[i]-diff\n    L[i+D]=L[i+D]+diff\n    MOVE=MOVE+diff\n    \n   elif L[i]<A and (i+D)<N:\n    diff=A-L[i]\n    #if L[i+D]>=diff:\n    L[i]=L[i]+diff\n    L[i+D]=L[i+D]-diff\n    MOVE=MOVE+diff\n  \n  for i in L:\n   if i!=A and flag!=False:\n    print(-1)\n    flag=False\n    break\n   \n  if flag!=False:\n   print(int(MOVE))\n \n\n   \n     \n", "import sys\n\ndef solve():\n N,D = list(map(int,sys.stdin.readline().split()))\n A = list(map(int,sys.stdin.readline().split()))\n V = None\n M = 0\n for i in range(D):\n  X = A[i::D]\n  if sum(X)%len(X) != 0:\n   return -1\n  v = sum(X)/len(X)\n  if V and V!=v:\n   return -1\n  for i in range(len(X)):\n   c = X[i]-v\n   M += abs(v-X[i])\n   if i<len(X)-1:\n    X[i+1] += c\n return M\nT = int(sys.stdin.readline())\n\nfor _ in range(T):\n print(solve())", "n = int(input())\n \nwhile n != 0:\n no,b = list(map(int,input().split()))\n v = list(map(int,input().split()))\n number = sum(v)/no\n count = 0\n flag = True\n values = []\n if ((sum(v)%no) != 0) or (b > no):\n  flag = False\n for i in range(b):\n  vals = []\n  for j in range(i,len(v),b):\n   vals.append(v[j])\n  values.append(vals)\n # print values\n for i in range(len(values)):\n  if sum(values[i])/len(values[i]) != number:\n   flag = False\n if flag:\n  for i in range(no-b):\n   y = v[i] - number\n   v[i] -= y\n   v[i+b] += y\n   count += abs(y)\n  \n  print(count)\n else:\n  print(\"-1\")\n n = n - 1 ", "t=int(input())\nfor i0 in range(t):\n n,d=list(map(int,input().strip().split(' ')))\n a=list(map(int,input().strip().split(' ')))\n flag=0\n count=0\n if sum(a)%len(a)!=0:\n  flag=1\n else:\n  x=sum(a)/len(a)\n  for i in range(len(a)-d):\n   if flag!=1:\n    if a[i]==x:\n     pass\n    elif a[i]<x:\n     j=1\n     y=x-a[i]\n     while a[i]!=x:\n      if a[i+(j*d)]-y>=0:\n       a[i]=x\n       a[i+(j*d)]-=y\n       count+=j*y\n       break\n      if i+j*d<len(a):\n       j+=1\n      else:\n       flag=1\n       break\n    else:\n     if i+d<len(a):\n      count+=a[i]-x\n      a[i+d]+=a[i]-x\n      a[i]=x\n     else:\n      flag=1\n   else:\n    break\n if a.count(x)!=len(a):\n  flag=1\n if flag:\n  print(-1)\n else:\n  print(count) ", "t=int(input())\nfor i0 in range(t):\n n,d=list(map(int,input().strip().split(' ')))\n a=list(map(int,input().strip().split(' ')))\n flag=0\n count=0\n if sum(a)%len(a)!=0:\n  flag=1\n else:\n  x=sum(a)/len(a)\n  for i in range(len(a)-d):\n   if flag!=1:\n    if a[i]==x:\n     pass\n    elif a[i]<x:\n     j=1\n     y=x-a[i]\n     while a[i]!=x:\n      if a[i+(j*d)]-y>=0:\n       a[i]=x\n       a[i+(j*d)]-=y\n       count+=j*y\n       break\n      if i+j*d<len(a):\n       j+=1\n      else:\n       flag=1\n       break\n    else:\n     if i+d<len(a):\n      count+=a[i]-x\n      a[i+d]+=a[i]-x\n      a[i]=x\n     else:\n      flag=1\n   else:\n    break\n if a.count(x)!=len(a):\n  flag=1\n if flag:\n  print(-1)\n else:\n  print(count) ", "w=int(input())\ndef checkEqual(lst):\n return lst[1:] == lst[:-1]\nv=0\nwhile v<w:\n sign=0\n v+=1\n [n,d]=[int(i) for i in input().split()]\n arr=list(map(int , input().split()))\n #\n my_dict={}\n i=0\n while i<d:\n  my_dict[i] = list()\n  j=0\n  while i+j<n:\n   my_dict[i].append(arr[i+j])\n   j+=d\n  i+=1\n #check if mean of each list is same and equal to mean of arr and mean isnt a \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float\n mean=float(sum(arr))/len(arr)\n if mean%1!=0.0:\n  print(-1)\n  continue\n else:\n  means=[]\n  for i in range(d):\n   means.append((sum(my_dict[i])/len(my_dict[i])))\n  if not(checkEqual(means)):\n   print(-1)\n   continue\n  steps=0\n  for x in range(d):\n   for y in range(len(my_dict[x])):\n     if (my_dict[x][y] < mean):\n      steps += mean - my_dict[x][y]\n      my_dict[x][y+1] -= mean - my_dict[x][y]\n      my_dict[x][y] = mean\n     elif (my_dict[x][y] > mean):\n      steps += my_dict[x][y]-mean\n      my_dict[x][y+1]+= my_dict[x][y] - mean\n      my_dict[x][y] = mean\n     elif (my_dict[x][y] == mean):\n      continue\n     else:\n      print('impossible')\n  print(int(steps))\n", "t = eval(input())\nfor _ in range(t):\n n,d = list(map(int,input().split()))\n a = list(map(int,input().split()))\n avg = sum(a)/n\n res = 0\n \n for i in range(n-d):\n  if a[i]<avg:\n   diff = avg-a[i]\n   a[i] += diff\n   a[i+d] -= diff\n   res += diff\n  elif a[i]>avg:\n   diff = a[i]-avg\n   a[i] -= diff\n   a[i+d] += diff\n   res += diff\n flag = True\n for i in range(n):\n  if a[i] != avg:\n   flag = False\n   break\n \n #print a\n if flag:\n  print(res)\n else:\n  print(-1)", "#code\n\nT = eval(input())\n\ndef is_equal(ar, D):\n N = len(ar)\n last = -1 \n for i in range(D):\n  count = 0\n  ans = 0\n  for j in range(i, N, D):\n   ans += ar[j]\n   count += 1 \n  if ans % count != 0:\n   return -1 \n  if last == -1:\n   last = ans/count\n  else:\n   if last != ans/count:\n    return -1 \n return last \n   \ndef solve(ar, D, equal):\n ans = 0\n N = len(ar) \n for i in range(D):\n  for j in range(i,N-D, D):\n   diff = ar[j] - equal\n   ar[j] -= diff \n   ar[j+D] += diff \n   ans += abs(diff)\n return ans \n\nfor _ in range(T):\n N, D = list(map(int, input().split(\" \")))\n ar = list(map(int, input().split(\" \")))\n ans = is_equal(ar, D)\n if ans == -1:\n  print(-1) \n else:\n  print(solve(ar,D,ans))", "t = int(input())\n\nwhile t!=0:\n n,d=list(map(int,input().strip().split()))\n a=input().strip()\n a= a.split()\n c=0\n b=[]\n c=sum(int(i) for i in a)\n \n if c%n!=0:\n  print('-1')\n else:\n  m=0\n  b += n*[c/n]\n  f=1\n  for i in range(0,len(a)-d):\n   if a.count(a[0]) == len(a):\n    f=0\n    break\n   else:\n    if int(a[i])>int(b[i]):\n     temp=int(a[i])-int(b[i])\n     a[i]=int(b[i])\n     a[i+d]=int(a[i+d])+temp\n     m=m+temp\n    elif int(a[i])<int(b[i]):\n     temp=int(b[i])-int(a[i])\n     a[i]=int(b[i])\n     a[i+d]=int(a[i+d])-temp\n     m=m+temp\n   if i==(len(a)-d-1) and all(int(x)==int(a[0]) for x in a):\n    f=0\n  if f==0:\n   print(m)\n  else:\n   print('-1')\n t=t-1", "#!/usr/bin/python\n# coding: utf-8\n\nt=int(input())\nfor i in range(t):\n (n,d)=list(map(int,input().split(' ')))\n arr=list(map(int,input().split(' ')))\n sum=0\n for j in arr:\n  sum+=j\n if((sum%n)!=0):\n  print(\"-1\")\n else:\n  tmp=0\n  avg=sum/n\n  num=[0]*d\n  cnt=[0]*d\n  for j in range(n):\n   num[j%d]+=arr[j]\n   cnt[j%d]+=1\n  for j in range(d):\n   if(num[j]%cnt[j]!=0 or num[j]/cnt[j]!=avg):\n    tmp=1\n    break\n  if(tmp):\n   print(\"-1\")\n  else:\n   ans=0\n   for j in range(n):\n    if(arr[j]<avg):\n     tmp=avg-arr[j]\n     ind=j+d\n     if(ind<n and arr[ind]>0):\n      ans+=tmp\n      arr[j]=avg\n      arr[ind]-=tmp\n    elif(arr[j]>avg):\n     tmp=arr[j]-avg\n     ind=j+d\n     if(ind<n):\n      ans+=tmp\n      arr[j]=avg\n      arr[ind]+=tmp\n   print(ans)\n\n\n'''\n\nChef's dog Snuffles has so many things to play with! This time around, Snuffles \u00a0\u00a0\u00a0\u00a0has an array A containing N integers: A1, A2, ..., AN.\n\nBad news: Snuffles only loves to play with an array in which all the elements \u00a0\u00a0\u00a0\u00a0are equal.\n\nGood news: We have a mover of size D. !\n\nA mover of size D is a tool which helps to change arrays. Chef can pick two \u00a0\u00a0\u00a0\u00a0existing elements Ai and Aj from the array, such that i + D = j and subtract \u00a0\u00a0\u00a0\u00a01 from one of these elements \n(the element should have its value at least 1), and add 1 to the other element. \u00a0\u00a0\u00a0\u00a0In effect, a single operation of the mover, moves a value of 1 from one of \u00a0\u00a0\u00a0\u00a0the elements to the other.\n\nChef wants to find the minimum number of times she needs to use the mover of \u00a0\u00a0\u00a0\u00a0size D to make all the elements of the array A equal. Help her find this out\u00a0\u00a0\u00a0\u00a0.\n\nInput\nThe first line of the input contains an integer T, denoting the number of test \u00a0\u00a0\u00a0\u00a0cases. The description of T test cases follows.\nThe first line of each test case contains two integers N and D, denoting the \u00a0\u00a0\u00a0\u00a0number of elements in the array and the size of the mover.\nThe second line of each testcase contains N space-separated integers: A1, A2, \u00a0\u00a0\u00a0\u00a0..., AN, denoting the initial elements of the array.\n\nOutput\nFor each test case, output a single line containing the minimum number of uses \u00a0\u00a0\u00a0\u00a0or -1 if it is impossible to do what Snuffles wants.\n\nConstraints\n1 \u2264 T \u2264 10\n2 \u2264 N \u2264 10^5\n1 \u2264 D < N\n1 \u2264 Ai \u2264 10^9\n\nSubtasks\nSubtask 1 (30 points) : N \u2264 10^3\nSubtask 2 (70 points) : Original constraints\n\nExample\nInput:\n3\n5 2\n1 4 5 2 3\n3 1\n1 4 1\n4 2\n3 4 3 5\n\nOutput:\n3\n2\n-1\n\nExplanation\nTestcase 1:\nHere is a possible sequence of usages of the mover:\nMove 1 from A3 to A1\nMove 1 from A3 to A1\nMove 1 from A2 to A4\nAt the end, the array becomes (3, 3, 3, 3, 3), which Snuffles likes. And you \u00a0\u00a0\u00a0\u00a0cannot achieve this in fewer moves. Hence the answer is 3.\n\nTestcase 2:\nHere is a possible sequence of usages of the mover:\nMove 1 from A2 to A1\nMove 1 from A2 to A3\nAt the end, the array becomes (2, 2, 2), which Snuffles likes. And you cannot \u00a0\u00a0\u00a0\u00a0achieve this in fewer moves. Hence the answer is 2.\n\nTestcase 3:\nIt is impossible to make all the elements equal. Hence the answer is -1.\n\n'''\n", "#!/usr/bin/python\n# coding: utf-8\n\nt=int(input())\nfor i in range(t):\n (n,d)=list(map(int,input().split(' ')))\n arr=list(map(int,input().split(' ')))\n sum=0\n for j in arr:\n  sum+=j\n if((sum%n)!=0):\n  print(\"-1\")\n else:\n  tmp=0\n  avg=sum/n\n  num=[0]*d\n  cnt=[0]*d\n  for j in range(n):\n   num[j%d]+=arr[j]\n   cnt[j%d]+=1\n  for j in range(d):\n   if(num[j]%cnt[j]!=0 or num[j]/cnt[j]!=avg):\n    tmp=1\n    break\n  if(tmp):\n   print(\"-1\")\n  else:\n   ans=0\n   for j in range(n):\n    if(arr[j]<avg):\n     tmp=avg-arr[j]\n     ind=j+d\n     if(ind<n and arr[ind]>0):\n      ans+=tmp\n      arr[j]=avg\n      arr[ind]-=tmp\n    elif(arr[j]>avg):\n     tmp=arr[j]-avg\n     ind=j+d\n     if(ind<n):\n      ans+=tmp\n      arr[j]=avg\n      arr[ind]+=tmp\n   print(ans)\n", "t = int(input())\n\nfor _ in range(t):\n N, D = list(map(int, input().split()))\n L = list(map(int, input().split()))\n flag = True\n avg = None\n for x in range(D):\n  temp = x\n  sumA = L[x]\n  numElem = 1\n  while temp+D<N:\n   numElem+=1\n   sumA+=L[temp+D]\n   temp+=D\n   \n  if sumA%numElem:\n   flag = False\n   break\n   \n  \n  if avg==None:\n   avg = sumA/numElem\n  elif avg!=(sumA/numElem):\n   flag = False\n   break\n   \n  \n if flag:\n  res = 0\n  tempDiff = 0\n  for x in range(D):\n   temp = x \n   tempDiff = L[x]-avg\n   while temp+D<N:\n    L[temp+D]+=tempDiff\n    if tempDiff<0:\n     res-=tempDiff\n    else:\n     res+=tempDiff\n    temp+=D\n    tempDiff = L[temp]-avg\n    \n  print(res)\n    \n else:\n  print(-1)", "def main():\n t=eval(input())\n while t>0:\n  n,d=list(map(int,input().split()))\n  l=list(map(int,input().split()))\n  count=0\n  k=sum(l)\n  if k%n!=0:\n   print(\"-1\")\n  else:\n   r=sum(l)/n\n   for i in range(n-d):\n    if l[i]<r:\n     count+=r-l[i]\n     l[i+d]-=r-l[i]\n     l[i]=r\n    else:\n     count+=l[i]-r\n     l[i+d]+=l[i]-r\n     l[i]=r\n   if l.count(r)==n:\n    print(count)\n   else:\n    print(\"-1\")\n  t-=1 \nmain()", "t = int(input())\n\nfor _ in range(t):\n N, D = list(map(int, input().split()))\n L = list(map(int, input().split()))\n flag = True\n avg = None\n for x in range(D):\n  temp = x\n  sumA = L[x]\n  numElem = 1\n  while temp+D<N:\n   numElem+=1\n   sumA+=L[temp+D]\n   temp+=D\n   \n  if sumA%numElem:\n   flag = False\n   break\n   \n  \n  if avg==None:\n   avg = sumA/numElem\n  elif avg!=(sumA/numElem):\n   flag = False\n   break\n   \n  \n if flag:\n  res = 0\n  tempDiff = 0\n  for x in range(D):\n   temp = x \n   tempDiff = L[x]-avg\n   while temp+D<N:\n    L[temp+D]+=tempDiff\n    if tempDiff<0:\n     res-=tempDiff\n    else:\n     res+=tempDiff\n    temp+=D\n    tempDiff = L[temp]-avg\n    \n  print(res)\n    \n else:\n  print(-1)\n", "\nt = eval(input())\n\nfor _ in range(t):\n n, d = list(map(int, input().split()))\n a = list(map(int, input().split()))\n s = sum(a)\n\n if s%n != 0:\n  print(-1)\n  continue\n\n each = s/n\n\n ans, ok = 0, True\n for i in range(d):\n\n  cur, rem = i, 0\n  while cur < n: \n   rem = a[cur]+rem-each\n   ans += abs(rem)\n   cur += d\n\n  if rem != 0:\n   ok = False\n   break\n\n print(ans if ok else -1)\n", "import sys\n\nt = int(sys.stdin.readline().strip())\n\nwhile t:\n\n n, d = list(map(int, sys.stdin.readline().strip().split(\" \")))\n nums = list(map(int, sys.stdin.readline().strip().split(\" \")))\n a = False\n s = 0\n for i in nums:\n  s = s + i\n avg = s//n\n ans = 0\n count = 0\n if s%n != 0:\n  ans = -1\n else:\n  arr = [avg]*n\n  \n  for i in range(len(arr)-d):\n   k = arr[i] - nums[i]\n   if k!=0:\n    arr[i] = arr[i] - k\n    arr[i+d] = arr[i+d] + k\n    count += abs(k)\n  for i in range(len(arr)):\n   if arr[i] != nums[i]:\n    ans = -1\n    a = True\n    break\n\n  if a != True:\n   ans = count\n print(ans)\n t-=1\n"]