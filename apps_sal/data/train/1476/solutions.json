["# cook your dish here\nfrom collections import Counter\nfrom math import factorial\nfor _ in range(int(input())):\n s=input()\n c=Counter(s)\n k=factorial(len(s))\n for value in c.values():\n  if value>1:\n   k=k//factorial(value)\n print(k%(10**9+7))", "# cook your dish here\nfrom collections import Counter\nfrom math import factorial\nfor _ in range(int(input())):\n \n s=input()\n c=Counter(s)\n k=factorial(len(s))\n \n for value in list(c.values()):\n  \n  if value>1:\n   k=k//factorial(value)\n   \n print(k%(10**9+7))\n \n \n \n", "from collections import Counter\nimport math\n\ntc=int(input())\nwhile tc>0:\n s=input()\n k=math.factorial(s.__len__())\n x=Counter(s)\n for val in x.values():\n  if val>1:\n   k=k//math.factorial(val)\n k=int(k)\n k=k%(10**9+7)\n print(k)\n tc-=1", "# cook your dish here\nfrom collections import Counter\nfrom math import factorial\nfor _ in range(int(input())):\n \n s=input()\n c=Counter(s)\n k=factorial(len(s))\n \n for value in list(c.values()):\n  \n  if value>1:\n   k=k//factorial(value)\n   \n print(k%(10**9+7))\n \n \n \n", "# cook your dish here\nMOD = 1000000007\n\nfact_mods = [0] * (501)\nfact_mods[0], fact_mods[1] = 1, 1\nfor i in range(2, 501):\n fact_mods[i] = (fact_mods[i-1]*i) % MOD\n\nfor _ in range(int(input())):\n s = input()\n n = len(s)\n counts = {}\n denom = 1\n for ch in s:\n  counts[ch] = counts.get(ch,0) + 1\n for ch in counts:\n  denom = (denom * fact_mods[counts[ch]]) % MOD\n print(fact_mods[n]*pow(denom,MOD-2,MOD) % MOD)\n \n \n", "def fact(N):\n c=1\n if N==0:\n  return 1\n for i in range(1,N+1):\n  c*=i\n return c\nfrom collections import Counter\nfor _ in range(int(input())):\n s=list(input())\n d=Counter(s)\n p=10**9+7\n m=1\n for v in d.values():\n  m*=fact(v)\n print((fact(len(s))//m)%p)", "from collections import Counter\nimport math\nmod = (pow(10,9) + 7)\nt = int(input())\n\nfor _ in range(t):\n s = input()\n p = 1\n count = dict(Counter(s))\n for i in count:\n  p = p * math.factorial(count[i]) \n x = math.factorial(len(s)) // p\n x = x % mod\n print(x)", "mod = 1000000007\ndef fact(n):\n if n <= 1:\n  return 1\n else:\n  i = 1\n  for p in range(2,n+1):\n   i *= p\n  return i\nfor _ in range(int(input())):\n S = input()\n N = len(S)\n dic = {}\n for i in range(N):\n  p = S[i]\n  if p in list(dic.keys()):\n   dic[p] += 1\n  else:\n   dic[p] = 1\n f = fact(N)\n for t in list(dic.keys()):\n  f = f // fact(dic[t])\n print(f % mod)\n", "import math\nt=int(input())\n#print(math.factorial(5))\nfor i in range(t):\n s=input()\n l=list(s)\n seti=set(l)\n deno=1\n for i in seti:\n  deno*=(math.factorial(l.count(i)))\n leng=len(l)\n ans=((math.factorial(leng))//deno)%1000000007\n print(int(ans))", "from math import factorial\nfrom collections import Counter\nfrom functools import reduce\nimport operator as op\n\nmod = 1000000007\n\n\n\nfor _ in range(int(input())):    \n s=input()\n c=Counter(s)\n num = factorial(len(s))\n den = 1\n for k in c:\n  den*=factorial(c[k])\n print(num//den%mod)\n", "# cook your dish here\nimport math\nfor _ in range(int(input())):\n s=input()\n a=[0]*26\n b=[0]*26\n for i in range(len(s)):\n  if s[i].islower():\n   a[97-ord(s[i])]+=1\n  else:\n   b[65-ord(s[i])]+=1\n sum = math.factorial(len(s))\n su=sum\n for i in range(26):\n  su=su//(math.factorial(a[i])*math.factorial(b[i]))\n print(su%(10**9+7)) ", "# your code goes here\nfrom collections import defaultdict\n\n\ndef fac(num, modulo):\n ans = 1\n for i in range(2, num+1):\n  ans = (ans*i)%modulo\n return ans\n \n \ndef fast_expo(num, p, modulo):\n num %= modulo\n exxp = 1\n while(p>0):\n  if p&1:\n   exxp = exxp * num%modulo\n  num = num * num % modulo\n  p >>= 1\n return exxp\n \n\nmodulo = 1000000007\n\nt = int(input())\n\nfor i in range(t):\n s = input().strip()\n \n mp = defaultdict(int)\n for si in s:\n  mp[si] += 1\n  \n denom = 1\n for alpha in mp.keys():\n  denom = denom*fac(mp[alpha], modulo)\n denom = fast_expo(denom, modulo-2, modulo)\n \n nfac = fac(len(s), modulo)\n nfac = nfac*denom%modulo\n  \n print(int(nfac))", "e=10**9+7\n\ndef fact(n):\n ans=1\n for i in range(2,n+1):\n  ans=(ans*i)%e\n return ans\n  \nt=int(input())\nfor _ in range(t):\n s=input()\n n=len(s)\n d={}\n for i in s:\n  try:\n   d[i]+=1\n  except:\n   d[i]=1\n x=fact(n)\n for i in list(d.values()):\n  y= fact(i)\n  y = pow(y,e-2,e)\n  x=(x*y)%e\n print(x)\n", "# your code goes here\nfrom collections import Counter\ndef fact(num):\n factorial = 1\n for i in range(1,num + 1):\n  factorial = factorial*i\n return factorial;\nt=int(input())\nfor _ in range(t):\n done = dict()\n strr=str(input())\n ans=fact(len(strr))\n res=Counter(strr)\n for i in res:\n  done[i]=0;\n l=1\n for i in res:\n  if(done[i]==0):\n   l=l*fact(res[i])\n   done[i]=1\n ans=ans//l\n ans=ans%1000000007\n print(ans)", "# cook your dish here\nfrom math import factorial\n\nt = int(input())\n\nfor i in range(t):\n\n s = input()\n hash = {}\n\n for j in s:\n  try:\n   hash[j]\n  except:\n   hash[j] = 1\n  else:\n   hash[j]+=1\n z = factorial(len(s))\n m = 10**9 + 7\n k = 1\n \n for j in list(hash.keys()):\n  k*=factorial(hash[j])\n print((z//k)%m)\n\n\n", "import collections\n\nfact = [1] * 510\nMOD = 10 ** 9 + 7\nfor i in range(2, 502):\n fact[i] = (fact[i - 1] * i) % MOD\n\nfor _ in range(int(input())):\n s = input()\n d = collections.Counter(s)\n n = len(s)\n \n num = fact[n]\n den = 1\n for i in d:\n  den = (den * fact[d[i]]) % MOD\n \n inv = pow(den, MOD - 2, MOD)\n \n print((num * inv) % MOD)", "from math import factorial\n\nt = int(input())\nfor _ in range(t):\n line = input()\n char = []\n for i in line:\n  char.append(i)\n char.sort()\n same = []\n current = char[0]\n k = 0\n for i in char:\n  if i == current:\n   k += 1\n  else:\n   current = i\n   if k > 1:\n    same.append(k)\n   k = 1\n same.append(k)\n ans = factorial(len(char))\n for i in same:\n  ans //= factorial(i)\n print(ans % 1000000007)"]