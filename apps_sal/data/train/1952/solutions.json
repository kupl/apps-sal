["class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         if head is None or head.__next__ is None or m == n: return head\n         h = ListNode(-1)\n         h.next = head\n         fast = slow = h\n         for _ in range(n - m + 1):\n             fast = fast.__next__\n             \n         for _ in range(m - 1):\n             fast = fast.__next__\n             slow = slow.__next__\n             \n         prev = fast.__next__\n         curr = slow.__next__\n         while prev != fast:\n             temp = curr.__next__\n             curr.next = prev\n             prev = curr\n             curr = temp\n         slow.next = prev\n         \n         return h.__next__\n", "class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         pre = dummy = ListNode(0)\n         dummy.next = head\n         num = 0\n         first = last = ListNode(0)\n         while head:\n             num += 1\n             if num == m:\n                 preFirst = pre\n                 first = head\n             if num == n:\n                 last = head\n                 laLast = last.__next__\n                 break\n             head = head.__next__\n             pre = pre.__next__\n         while first != last:\n             pre = first\n             preFirst.next =  pre.__next__\n             pre.next = last.__next__\n             last.next = pre\n             first = preFirst.__next__\n             \n         return dummy.__next__\n             \n             \n", "class Solution:    \n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         def reverse(head, m, n):\n             m_node = head.__next__\n             current = m_node.__next__\n             prev_node = m_node\n             position2 = m + 1 \n             while(position2 <= n):\n                 next_node = current.__next__\n                 current.next = prev_node\n                 prev_node = current\n                 current = next_node\n                 position2 += 1\n             m_node.next = next_node\n             return prev_node\n         \n         if m == n:\n             return head\n         sentinal = ListNode(-1)\n         sentinal.next = head\n         current = sentinal\n         position = 0\n         while(current.__next__ is not None):\n             if (position+1) == m:\n                 pre_m = current\n                 pre_m.next = reverse(pre_m, m, n)\n                 break\n             else:\n                 position += 1\n                 current = current.__next__\n         if position == 0:\n             return pre_m.__next__\n         else:\n             return head\n         \n         \n", "class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         if n == 1:\n             return head\n         \n         sentinel = ListNode(0)\n         pre = sentinel\n         pre.next = head\n         end = head\n         while m > 1:\n             pre = pre.__next__\n             m -= 1\n         while n:\n             end = end.__next__\n             n -= 1\n         # print(pre.val)\n         # print(end.val) if end else print(\"None\")\n         new_start = self.reverse(pre.__next__, end)\n         pre.next = new_start\n         return sentinel.__next__\n         \n     def reverse(self, cur, end):        \n         new_head = end\n         while cur != end:\n             next = cur.__next__\n             cur.next = new_head\n             new_head = cur\n             cur = next\n             # print(new_head.val) if new_head else print(\"none\")\n         return new_head\n", "class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         dummy = ListNode(-1)\n         dummy.next = head\n         count = 0\n         pre = dummy\n \n         while head:\n             count +=1\n             temp = head.next\n             if count == m:\n                 mNode = head\n             if count < m:\n                 pre = pre.next\n             if count > m and count <= n:\n                 head.next = pre.next\n                 pre.next = head\n                 mNode.next = temp\n             head = temp\n         return dummy.next", "\n class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         dummy = ListNode(0)\n         dummy.next = head\n         pre = dummy\n         \n         for i in range(m-1):\n             pre = pre.next\n         \n         cur = pre.next\n         reverse = None\n         \n         for i in range(n-m+1):\n             next = cur.next\n             cur.next = reverse\n             reverse = cur\n             cur = next\n         \n         pre.next.next = cur\n         pre.next = reverse\n         \n         return dummy.next", "class Solution:\n     def reverseBetween(self, head, m, n):\n         \n         dummyNode = ListNode(0)\n         dummyNode.next = head\n         \n         pre = dummyNode\n         \n         for i in range(m - 1):\n             pre = pre.__next__\n         \n         cur = pre.__next__\n         reverse = None\n         \n         for i in range(n - m + 1):\n             next = cur.__next__\n             cur.next = reverse\n             reverse = cur\n             cur = next\n         \n         pre.next.next = cur\n         pre.next = reverse\n         \n         return dummyNode.__next__\n         \n         \n             \n         \n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n", "class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         if n == m:\n             return head\n         \n         pre_head = head\n         re_tail = head\n         for i in range(m-1):\n             pre_head =re_tail\n             re_tail = pre_head.__next__\n \n         \n         tmp_head = re_tail\n         new_head = None\n         for i in range(n-m+1):\n             next_node = tmp_head.__next__\n             tmp_head.next = new_head\n             new_head = tmp_head\n             tmp_head = next_node\n         \n         re_tail.next = tmp_head\n         if m == 1:\n             return new_head\n         else:\n             pre_head.next = new_head\n             return head\n \n         \n             \n             \n         \n                 \n                 \n", "class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         \"\"\"\n             1---->2---->3---->4---->5\n            pre\n                  cur\n         \"\"\"\n         if not head:\n             return None\n         node = ListNode(0)\n         node.next = head\n         pre = node\n         cur = node.__next__\n         \n         for i in range(m-1):\n             pre = pre.__next__\n             cur = cur.__next__\n         \n         for i in range(n-m):\n             tmp = cur.__next__\n             cur.next = tmp.__next__\n             tmp.next = pre.__next__\n             pre.next = tmp\n         return node.__next__\n             \n         \n         \n", "class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         h = ListNode(0)\n         h.next = head\n         count = 0\n         cur = h\n         leftPrev = None\n         prev = None\n         right = None\n         while cur:\n             if count == m:\n                 leftPrev = prev\n                 left = cur\n             if count == n:\n                 right = cur\n                 break\n             count += 1\n             prev = cur\n             cur = cur.__next__\n         if leftPrev == None or left == right:\n             return h.__next__\n         rightNext = right.__next__\n         tail = right.__next__\n         cur = left\n         while cur != rightNext:\n             temp = cur\n             cur = cur.__next__\n             temp.next = tail\n             tail = temp\n         leftPrev.next = tail\n         return h.__next__\n             \n         \n", "class Solution:\n     def reverseBetween(self, head, m, n):\n         \"\"\"\n         :type head: ListNode\n         :type m: int\n         :type n: int\n         :rtype: ListNode\n         \"\"\"\n         if m == 1:\n             m_node = head\n         else:\n             m_pre = head\n             for i in range(m-2):\n                 m_pre = m_pre.next\n             m_node = m_pre.next\n         a = m_node\n         b = a.next\n         c = a.next\n         a.next = None\n         for i in range(n-m):\n             c = c.next\n             b.next = a\n             a = b\n             b = c\n         m_node.next = c\n         if m == 1:\n             return a\n         else:\n             m_pre.next = a\n             return head"]