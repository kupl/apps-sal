["def read_data():\n    n, q = map(int, input().split())\n    As = list(map(int, input().split()))\n    LRs = []\n    for i in range(q):\n        L, R = list(map(int, input().split()))\n        LRs.append((L, R))\n    return n, q, As, LRs\n\ndef solve(n, q, As, LRs):\n    difs = calc_difs(As)\n    Ls = get_Ls(difs)\n    Rs = get_Rs_allow_ties(difs)\n    for L, R in LRs:\n        print(calc(L-1, R-2, Ls, Rs, difs))\n\n    \ndef calc_difs(As):\n    difs = [abs(a0 - a1) for a0, a1 in zip(As, As[1:])]\n    return difs\n\n\ndef get_Ls(Vs):\n    L = []\n    st = []\n    for i, v in enumerate(Vs):\n        while st and Vs[st[-1]] < v:\n            st.pop()\n        if st:\n            L.append(st[-1] + 1)\n        else:\n            L.append(0)\n        st.append(i)\n    return L\n\ndef get_Ls_allow_ties(Vs):\n    L = []\n    st = []\n    for i, v in enumerate(Vs):\n        while st and Vs[st[-1]] <= v:\n            st.pop()\n        if st:\n            L.append(st[-1] + 1)\n        else:\n            L.append(0)\n        st.append(i)\n    return L\n\ndef get_Rs(Vs):\n    n = len(Vs)\n    revVs = Vs[::-1]\n    revRs = get_Ls(revVs)\n    revRs.reverse()\n    return [n - 1 - R for R in revRs]\n\n\ndef get_Rs_allow_ties(Vs):\n    n = len(Vs)\n    revVs = Vs[::-1]\n    revRs = get_Ls_allow_ties(revVs)\n    revRs.reverse()\n    return [n - 1 - R for R in revRs]\n\ndef calc(L, R, Ls, Rs, difs):\n    ans = 0\n    for i in range(L, R + 1):\n        ans += difs[i] * (i - max(Ls[i], L) + 1) * (min(Rs[i], R) - i + 1)\n    return ans\n\nn, q, As, LRs = read_data()\nsolve(n, q, As, LRs)", "f = lambda: map(int, input().split())\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))", "f = lambda: list(map(int, input().split()))\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n", "f = lambda: list(map(int, input().split()))\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n", "f = lambda: list(map(int, input().split()))\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n", "f = lambda: list(map(int, input().split()))\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n", "f = lambda: list(map(int, input().split()))\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n", "f = lambda: list(map(int, input().split()))\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n", "f = lambda: list(map(int, input().split()))\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n", "f = lambda: list(map(int, input().split()))\nn, m = f()\nt = list(f())\np = [1e9] + [abs(b - a) for a, b in zip(t, t[1:])] + [1e9]\nL, R = [0] * n, [0] * n\nfor i in range(1, n):\n    j = n - i\n    x, y = i - 1, j + 1\n    a, b = p[i], p[j]\n    while a > p[x]: x = L[x]\n    while b >= p[y]: y = R[y]\n    L[i], R[j] = x, y\nfor k in range(m):\n    l, r = f()\n    print(sum((i - max(l - 1, L[i])) * (min(r, R[i]) - i) * p[i] for i in range(l, r)))\n"]