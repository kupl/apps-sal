["def permutate(arr):\n if len(arr) == 1:\n  yield arr\n for x in range(len(arr)):\n  for perm in permutate(arr[:x] + arr[x+1:]):\n   yield [arr[x]] + perm\n\nvals = [int(x) for x in input().split()]\n\nfounded = False\nfor val in permutate(vals):\n if (val[0] / float(val[1]) == val[2] / float(val[3])):\n  print(\"Possible\")\n  founded = True \n  break\nif not founded:\n print(\"Impossible\")\n", "a = input().split()\na = [int(x) for x in a]\na.sort()\nif (float(a[0])/float(a[1]))==(float(a[2])/float(a[3])):\n print(\"Possible\")\nelse:\n print(\"Impossible\")", "a,b,c,d=list(map(int,input().split()))\nif(a*b==c*d or a*c==b*d or a*d==b*c):\n print(\"Possible\")\nelse:\n print(\"Impossible\")", "import sys\n\na, b, c, d = list(map(float, input().split()))\n\nif a/b == c/d:\n print(\"Possible\")\n return\n\nif a/b == d/c:\n print(\"Possible\")\n return\n\nif a/c == b/d:\n print(\"Possible\")\n return\n\nif a/c == d/b:\n print(\"Possible\")\n return\n\nif a/d == c/b:\n print(\"Possible\")\n return\n\nif a/d == b/c:\n print(\"Possible\")\n return\n\nif a/b == c/d:\n print(\"Possible\")\n return\n\nif a/b == c/d:\n print(\"Possible\")\n return\n\nprint(\"Impossible\")", "import sys\n\na, b, c, d = list(map(float, input().split()))\n\nif a/b == c/d:\n print(\"Possible\")\n return\n\nif a/b == d/c:\n print(\"Possible\")\n return\n\nif a/c == b/d:\n print(\"Possible\")\n return\n\nif a/c == d/b:\n print(\"Possible\")\n return\n\nif a/d == c/b:\n print(\"Possible\")\n return\n\nif a/d == b/c:\n print(\"Possible\")\n return\n\nif a/b == c/d:\n print(\"Possible\")\n return\n\nif a/b == c/d:\n print(\"Possible\")\n return\n\nprint(\"Impossible\")", "a,b,c,d = list(map(float,input().split()))\nli = []\nli.append(a)\nli.append(b)\nli.append(c)\nli.append(d)\nli = sorted(li)\nif li[1]/li[0] == li[3]/li[2]:\n print(\"Possible\")\nelse:\n print(\"Impossible\")", "a,b,c,d = list(map(int , input().split()))\n\nif(a*d == c*b or a*c == d*b or b*d == c*a or b*c == d*a):\n print(\"Possible\")\nelif(a*d == b*c or a*b ==d*c or c*d == b*a or c*b == d*a):\n print(\"Possible\")\nelif(a*c == b*d or a*b == c*d or d*c == b*a or d*b == c*a):\n print(\"Possible\")\nelse:\n print(\"Impossible\") ", "a=list(map(float,input().split()))\na.sort()\nif(a[0]/a[1]==a[2]/a[3]):\n  print('Possible')\nelse:\n  print('Impossible')", "a, b , c, d = list(map(int , input().split()))\n\nab = a*b\nac = a*c\nad = a*d\nbc = b*c\nbd = b*d\ncd = c*d\n\nif ab == cd or ac == bd or ad == bc:\n print('Possible')\nelse:\n print('Impossible')\n", "def min(a,b):\n if(a<b):\n  return a;\n return b;\n\ndef max(a,b):\n if(a<b):\n  return b;\n return a;\n\n\n \n[a,b,c,d]=[float(x) for x in input().split()];\nflag=False;\nif(min(a,b)/max(a,b)==min(c,d)/max(c,d)):\n flag=True;\n\nif(min(a,c)/max(a,c)==min(b,d)/max(b,d)):\n flag=True;\n\nif(min(a,d)/max(a,d)==min(b,c)/max(b,c)):\n flag=True;\n\nif(flag):\n print (\"Possible\");\nelse:\n print (\"Impossible\");\n \n \n\n \n \n \n", "a,b,c,d = input().split(\" \")\nA = []\nA.append(float(a))\nA.append(float(b))\nA.append(float(c))\nA.append(float(d))\n\nA.sort()\n\nif A[0]/A[1] == A[2]/A[3]:\n print(\"Possible\")\nelif A[0]/A[2] == A[1]/A[3]:\n print(\"Possible\")\nelif A[0]/A[3] == A[1]/A[2]:\n print(\"Possible\")\nelse:\n print(\"Impossible\")", "a=list(map(int,input().split(\" \")))\na.sort()\nif a[1]*a[2]==a[0]*a[3]:\n print(\"Possible\")\nelse :\n print(\"Impossible\")", "\ndef __starting_point():\n a, b, c, d = sorted(map(int, input().split()))\n if d * a == b * c:\n  print('Possible')\n else:\n  print('Impossible')\n\n__starting_point()", "import sys\n\ndef check(a,b,c,d) :\n return (a==c and b==d) or (a==d and b==c)\n\na,b,c,d = list(map(int,sys.stdin.readline().split()))\ngcd = lambda x,y : x if y==0 else gcd(y,x%y)\nflag=False\nlg0,rg0 = gcd(a,b),gcd(c,d)\nif check(a/lg0,b/lg0,c/rg0,d/rg0) :\n flag = True\n\nlg0,rg0 = gcd(a,c),gcd(b,d)\nif check(a/lg0,c/lg0,b/rg0,d/rg0) :\n flag = True\n\nlg0,rg0 = gcd(a,d),gcd(c,b)\nif check(a/lg0,d/lg0,c/rg0,b/rg0) :\n flag = True\n\nprint(\"Possible\" if flag else \"Impossible\")", "from itertools import permutations\na = [int(num) for num in input().split()]\n\nl = list(permutations(a))\nflag = False\nfor e in l:\n e0 = float(e[0])\n e1 = float(e[1])\n e2 = float(e[2])\n e3 = float(e[3])\n if e0 / e1 == e2 / e3:\n  print(\"Possible\")\n  flag = True\n  break\nif flag == False:\n print(\"Impossible\")", "a,b,c,d = list(map(float, input().strip().split()))\nif a/b == c/d or a/b == d/c:\n print('Possible')\nelif a/c == b/d or a/c == d/b:\n print('Possible')\nelif a/d == c/b or a/d == b/c:\n print('Possible')\nelse:\n print('Impossible')\n", "\na = list(map(int,input().split()))\nout = \"Impossible\"\nfor i in range(4):\n if out == \"Possible\":\n  break\n for j in range(1,4):\n  a[i],a[j] = a[j],a[i]\n  if a[0]/a[1] == a[2]/a[3]:\n   out = \"Possible\"\n   break\n  else:\n   a[i],a[j] = a[j],a[i]\nprint(out)", "\na = list(map(int,input().split()))\nout = \"Impossible\"\nfor i in range(4):\n if out == \"Possible\":\n  break\n for j in range(1,4):\n  a[i],a[j] = a[j],a[i]\n  if a[0]/a[1] == a[2]/a[3]:\n   out = \"Possible\"\n   break\n  else:\n   a[i],a[j] = a[j],a[i]\nprint(out)", "a=[int(x) for x in input().split()]\na.sort()\nif a[0]*a[3]==a[2]*a[1]:\n print(\"Possible\")\nelse:\n print(\"Impossible\") ", "li=list(map(int,input().split()))\nli =sorted(li)\na,b,c,d=li\n#print float(b/float(a))\n#print float(d/float(c))\nif float(b/float(a)) == float(d/float(c)):\n print(\"Possible\")\nelse:\n print(\"Impossible\")", "import itertools\na,b,c,d = list(map(float , input().split()))\nli = list(itertools.permutations([a,b,c,d]))\nflag = False\nfor i in li:\n if i[0]/i[1] == i[2]/i[3]:\n  flag = True\n  break\nif flag == True :\n print('Possible')\nelse :\n print('Impossible')", "abcd = input()\nabcd = abcd.split()\nabcd = list(map(int, abcd))\nprod = 1\ncnt = 0\nfor item in abcd:\n prod*=item\nflo = prod**(0.5)\nif int(flo) == flo:\n for i in range(3):\n  for j in range(i+1,4):\n   if abcd[i]*abcd[j] == flo:\n    cnt = 1\n    break\n  if cnt==1:\n   break\n if cnt == 1:\n  print(\"Possible\")\n else:\n  print(\"Impossible\")\nelse:\n print(\"Impossible\")"]