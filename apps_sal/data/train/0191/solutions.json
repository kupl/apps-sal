["class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        \n        count = 0\n        length = 1\n        n_str = str(n)\n        while length < len(n_str):\n            count+= len(digits)**length\n            length+=1\n\n        digits_sorted = sorted(digits)\n\n\n        ## now length should equal to len(n), we compare the number with same length\n        current_digit = 0\n        while current_digit < length:\n            for digit in digits_sorted:\n                next_round = False\n                if digit < n_str[current_digit]:\n                    count+=len(digits)**(length-current_digit-1)\n                elif digit > n_str[current_digit]:\n                    return count\n                else:\n                    if current_digit == length-1:\n                        return count+1\n                    else: \n                        current_digit+=1\n                        next_round = True\n                        break\n            if not next_round:\n                return count\n\n        return count\n        \n", "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        ns = str(n)\n        dp = 1\n        digits.sort()\n        M, N = len(ns), len(digits)\n\n        for i in range(M-1, -1, -1):\n            dp2 = 0\n            \n            for d in digits:\n                if d>ns[i]: break\n                if d<ns[i]:\n                    dp2 += N**(M-1-i)\n                else:\n                    dp2 += dp\n              \n            dp = dp2\n        return dp + sum(N**i for i in range(1, M))", "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        def less(digits, d):\n            return len([i for i in digits if i < d ])\n        \n        cnt = 0\n        ld, ln = len(digits), len(str(n))\n        N = str(n)\n        for i in range(ln-1):\n            cnt += ld ** (i+1)\n        for i in range(ln):\n            cnt += less(digits, N[i]) * (ld ** (ln - i -1) )\n            if N[i] not in digits:\n                return cnt\n        return cnt + 1\n\n\n\n        \n        \n\n"]