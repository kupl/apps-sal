["import collections\n\nn = int(input())\nA = list(map(int, input().split()))\nS = [0]*n\n\nS[0] = A[0]\nfor i in range(1, n) :\n    S[i] = S[i-1] + A[i]\n\nC = collections.Counter(S)\nmax_val = 0\nfor key in C :\n    max_val = max(max_val, C[key])\nans = n - max_val\nprint(ans)", "d = {}\nn=int(input())\nl=list(map(int, input().split(' ')))\nk=[l[0]]\nd[l[0]]=0\nfor i in range(1, n):\n    k.append(k[-1]+l[i])\n    d[k[-1]] = 0;\nmaxx = -1\nfor i in k:\n    d[i]+=1\n    maxx=max(maxx, d[i])\nprint(n-maxx)", "from collections import Counter\nfrom itertools import accumulate\nn = int(input())\nA = (int(x) for x in input().split())\nprint(n-max(Counter(accumulate(A)).values()))\n", "n=int(input())\na=map(int,input().split())\nd=dict()\nacc=0\nfor v in a:\n    acc += v\n    if acc in d:\n        d[acc] += 1\n    else:\n        d[acc] = 1\nprint(n-max(d.values()))", "from collections import *\nfrom itertools import *\nprint(int(input())-max(Counter(accumulate(list(map(int,input().split())))).values()))\n", "n, = map(int, input().split())\na = map(int, input().split())\ns = 0\nd = {}\nfor x in a:\n s += x\n d[s] = d.get(s, 0) + 1\nprint(n-max([d[k] for k in d]))", "from sys import stdin as Si,maxsize as m\nfrom math import floor as F \nfrom collections import defaultdict as dt\nfrom operator import itemgetter as ig\nfrom math import pi\n\n\ndef __starting_point():\n    n= int(Si.readline())\n    a = list(map(int,Si.readline().split()))\n    s,d=0,{}\n    for x in a: s+=x;d[s]=d.get(s,0)+1\n    print(n-max([d[k] for k in d]))\n\n__starting_point()", "from collections import defaultdict\n\nn = int(input())\nA = list(map(int, input().split()))\n\nd = defaultdict(int)\n\ns = 0\nans = n - 1\n\nfor i in range(n):\n    t = A[i]\n    s += t;\n    d[s] += 1\n    ans = min(ans, n - d[s])\nprint(ans)\n    \n", "n = int(input())\na = list(map(int, input().split()))\nx = dict()\nsum = 0\nans = n - 1\nfor i in range(n):\n    sum += a[i]\n    if sum in x:\n        x[sum] += 1\n    else:\n        x[sum] = 1\n    ans = min(ans, n - x[sum])\nprint(ans)\n", "from collections import *\nn=int(input())\nc,s,ans=Counter(),0,n-1\nfor x in map(int,input().split()):\n  s+=x\n  c[s]+=1\n  ans=min(ans,n-c[s])\nprint(ans)", "input()\nl = list(map(int,input().split()))\nd={}\nsum=0\nfor I in range(len(l)):\n if sum not in d:\n  d[sum]=0\n d[sum]  +=1\n sum += l[I]\na=-100000\nfor I in d:\n a=max(a,d[I])\nprint(len(l)-a)", "n=int(input())\nL=[int(x) for x in input().split()]\na=0\nd={}\nfor i in L:\n    a+=i\n    if a not in d:\n        d[a]=0\n    d[a]+=1\nprint(n-max(d.values()))\n", "n=int(input())\nL=[int(x) for x in input().split()]\na=0\nd={}\nfor i in L:\n    a+=i\n    if a not in d:\n        d[a]=0\n    d[a]+=1\nprint(n-max(d.values()))\n", "from collections import Counter\n\nn = int(input())\nc = Counter();\n\nnum = list(map(int,input().split()));\n\nfor i in range(1,n) :\n    num[i] += num[i-1];\nc.update(num);\nprint(n - c.most_common()[0][1])", "n = int(input())\nA = list(map(int, input().split()))\nS = {}\ns = 0\nk = 1\nfor i in range(n):\n    s += A[i]\n    try:\n        S[s] += 1\n    except KeyError:\n        S[s] = 1\n    k = max(k, S[s])\nprint(n - k)", "from collections import Counter\n\nc = Counter()\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in range(1, n):\n    a[i] += a[i-1]\nc.update(a)\n\nprint(n - c.most_common()[0][1])\n", "def main():\n    from itertools import accumulate\n    from collections import Counter\n    print(int(input()) - Counter(accumulate(list(map(int, input().split())))).most_common()[0][1])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input(\"\"))\nl = input(\"\").split(\" \")\nfor i in range(len(l)):\n    l[i] = int(l[i])\n\ns = 0\nm = 0\nps = {}\nfor i in range(len(l)):\n    s += l[i]\n    if (s in ps):\n        ps[s] += 1\n    else:\n        ps[s] = 1\n    if (ps[s] > m):\n        m = ps[s]\n\nprint(n-m)\n", "__author__ = 'zihaozhu'\nfrom sys import stdin\nimport operator\nN = int(stdin.readline())\n\ndata = list(map(int,stdin.readline().split()))\n\ncount=dict()\nprefix = list()\nprefix.append(data[0])\n#count[data[0]]=1\nfor i in range (1,len(data)):\n    prefix.append(data[i-1]+data[i])\n    data[i]=(data[i-1]+data[i])\n\nfor i in prefix:\n    if not (i in count):\n        count[i]=1\n    else:\n        count[i]=count[i]+1\n\nsorted_count=sorted(count.items(),key=operator.itemgetter(1),reverse=True)\nk = sorted_count[0][1]\n\n#print(data)\n#print(prefix)\n#print(sorted_count)\n#print(k)\nprint(N-k)", "from collections import Counter\nfrom itertools import accumulate\nn = int(input())\nprint(n - Counter(accumulate(list(map(int, input().split())), lambda x, y: x+y)).most_common(1)[0][1])\n", "n = int(input())\na = list(map(int, input().split()))\n\nd = dict()\ntotal = 0\nfor i in range(n):\n\ttotal += a[i]\n\td[total] = 0\n\ntotal = 0\nans = 0\nfor i in range(n):\n\ttotal += a[i]\n\td[total] += 1\n\tans = max(ans, d[total])\n\nprint(n - ans)", "n = int(input())\na = list(map(int,input().split()))\nif a == [0]*n:\n    print(0)\n    return\ndp1 = [0]*(n)\ndp1[0] = a[0]\nfor i in range(1,n):\n    dp1[i] = dp1[i-1] + a[i]\nres = 0\ncounter = {}\nfor i in range(n):\n    try:\n        counter[dp1[i]] += 1\n    except:\n        counter[dp1[i]] = 1\nfor elem in counter:\n    res = max(res, counter[elem])\nprint(n-res)\n", "def main():\n    n = int(input())\n    amounts = [int(i) for i in input().split()]\n    cnt = dict()\n    prefix = 0\n    for a in amounts:\n        prefix += a\n        if prefix in cnt:\n            cnt[prefix] += 1\n        else:\n            cnt[prefix] = 1\n    ans = 0\n    for k in cnt:\n        if ans < cnt[k]:\n            ans = cnt[k]\n    print(n - ans)\n\nmain()\n", "# http://codeforces.com/contest/675/problem/C\nfrom collections import defaultdict\n\nn = int(input())\nl = list(map(int, input().split()))\n\n# frequency of the most frequent cumulative sum, using hash\n\nd = defaultdict(int)\n\ncost = n-1\ns = 0   # indicates postion based on sum\nfor x in l:\n    s+=x\n    d[s]+=1\n    cost = min(cost,n- d[s])\n\nprint (cost)    \n\n", "n=int(input())\nl=list(map(int, input().split()))\nsum=0\nd=dict()\nfor i in range(n):\n    sum += l[i]\n    if sum not in d.keys():\n        d[sum] = 1\n    else:\n        d[sum]+=1\nprint(n-max(d.values()))"]