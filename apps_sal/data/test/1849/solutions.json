["n = int(input())\nout = []\n\nMOD = 998244353 \n\nfor i in range(1, n + 1):\n    if i == n:\n        out.append(10)\n    else:\n        nex = 2 * 9 * pow(10, n - i - 1, MOD) * 10\n        if i < n - 1:\n            nex += (n - 1 - i) * 9 * 9 * pow(10, n - i - 2, MOD) * 10\n        out.append(nex % MOD)\n        \n\nprint(' '.join(map(str,out)))\n#print(sum((i + 1) * out[i] for i in range(n)))\n#print(n * pow(10, n, MOD))\n", "import sys\n\nq = 998244353\ndef exp(b, e):\n    ans = 1\n    while e > 0:\n        if e % 2 == 0:\n            e = e // 2\n            b = (b * b) % q\n        else:\n            ans = ans * b\n            e = e - 1\n    return ans\n\nn = int(sys.stdin.readline().strip())\nx = []\nfor i in range (1, n):\n    ans = 0\n    ans = ans + 9 * exp(10, n - i - 1)\n    ans = ans + 9 * exp(10, n - i - 1)\n    ans = ans + (n - i - 1) * 81 * exp(10, n - i - 2)\n    ans = ans * 10\n    ans = ans % q\n    x.append(str(ans))\nx.append(str(10))\nprint(\" \".join(x))", "n = int(input())\nif n == 1:\n    print(10)\nelif n == 2:\n    print(180, 10)\nelif n == 3:\n    print(2610, 180, 10)\nelif n == 4:\n    print(34200, 2610, 180, 10)\nelse:\n    M = 998244353\n    B = [0] * (n + 1)\n    B[1] %= M\n    B[n] = 10\n    B[n-1] = 180\n    B[n-2] = 2610\n    for i in range(1, n-2):\n        B[i] = 10 * (18 * pow(10, n - i - 1, M) % M + (n-i-1) * 81 * pow(10, n-i-2, M)) % M\n        B[i] %= M\n    for i in range(len(B)):\n        B[i] %= M\n    print(*B[1:])\n", "n = int(input())\np = 998244353\nodp = [0] * (n+1)\npote = [1] * 250000\nfor i in range(1,250000):\n\tpote[i] = (pote[i-1]*10)%p\nfor i in range(1,n+1):\n\t#odp[i]\n\tif i == n:\n\t\todp[i] = 10\n\telse:\n\t\tbrzeg = 2*pote[n-i-1]*10*9\n\t\tile = n-i-1\n\t\tsrodek_poj = 10 * 9*9 * pote[n-i-2]\n\t\todp[i] = brzeg + ile*srodek_poj\n\t\todp[i] = odp[i]%p\nprint(*odp[1:])", "n = int(input())\narr = [0]\nsm = 0\nsmarr = 0\nten = 1\nMOD = 998244353\nfor i in range(1, n + 1):\n    ten = (ten * 10) % MOD\n    all = i * ten % MOD\n    sm = (sm + smarr) % MOD\n    x = (all - sm + MOD) % MOD\n    arr.append(x)\n    smarr = (smarr + x) % MOD\n    sm = (sm + x) % MOD\narr.reverse()\narr.pop()\nprint(*arr)", "N = int(input())\nP = 998244353\n\nANS = []\nfor i in range(1, N):\n    a = 0\n    if N - i >= 2: a += (N - i - 1) * 81 * pow(10, N-i-1, P)\n    if N - i >= 1: a += 2 * 9 * pow(10, N-i, P)\n    ANS.append(a % P)\n\nANS.append(10)\nprint(*ANS)\n", "# from io import BytesIO\n# import os\n# input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\nn = int(input())\nMOD = 998244353\nfor k in range(1, n):\n    t = ((n - k - 1) * 81 * pow(10, n - k - 2, MOD) * 10 + 10 * 9 * pow(10, n - k - 1, MOD) * 2) % MOD\n    print(t, end=' ')\nprint(10)\n", "MOD = 998244353\nn = int(input())\nans = []\nfor i in range(1, n):\n\tres = 0\n\tres += 180 * pow(10, n-1-i, MOD)\n\tif i+2 <= n:\n\t\tres += 810 * (n-1-i) * pow(10, n-2-i, MOD)\n\tans.append(res%MOD)\nans.append(10)\nprint(*ans)", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    N = int(input())\n    mod = 998244353\n\n    ten = [0] * (N+1)\n    for i in range(1, N+1):\n        ten[i] = pow(10, i, mod)\n\n    ans = [0] * (N+1)\n    S = 0\n    for i in range(1, N+1):\n        a = ((ten[i] * i)%mod - ((ten[i-1] * (i-1))%mod + S)%mod)%mod\n        ans[i] = a\n        S = (S + a)%mod\n    ans.reverse()\n    print(*ans[:-1])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\nn = int(input())\n\nmod = 998244353\n\nans = []\n\nfor i in range(n,0,-1):\n\n    if i == n:\n        ans.append(10)\n    elif i == n-1:\n        ans.append(180)\n    else:\n\n        now = 10 * 2 * 9 * pow(10,n-i-1,mod)\n        #print (now)\n        now += 10 * (n-i-1) * 81 * pow(10,n-i-2,mod)\n        ans.append(now % mod)\n\nans.reverse()\nprint(*ans)\n", "N = int(input())\nmod = 998244353\nAns = []\nnums = pow(10, N, mod)\nnums_inv = pow(nums, mod-2, mod)\ninv10 = pow(10, mod-2, mod)\nfor d in range(1, N):\n    ans = 0\n    ans += pow(inv10, d, mod) * 9 * nums * 2 % mod\n    ans += (N-d-1) * pow(inv10, d+1, mod) * 81 * nums % mod\n    Ans.append(ans%mod)\nAns.append(10)\nprint(\" \".join(map(str, Ans)))\n"]