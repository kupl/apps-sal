["k = []\n\nx = int(input())\nc, d = list(map(int, input().split(' ')))\nfor i in range(x):\n    a, b = list(map(int, input().split(' ')))\n    k.append([c*a+b, d*a+b])\n\nk.sort()\nfor i in range(len(k)-1):\n    if k[i+1][1] < k[i][1]:\n        print(\"YES\")\n        quit()\nprint(\"NO\")\n", "n = int(input())\nx1, x2 = list(map(float, input().split()))\nx1 += 1e-10\nx2 -= 1e-10\nlines = [tuple(map(float, input().split())) for _ in range(n)]\nl1 = sorted((k * x1 + b, i) for i, (k, b) in enumerate(lines))\nl2 = sorted((k * x2 + b, i) for i, (k, b) in enumerate(lines))\nif [i for x, i in l1] == [i for x, i in l2]:\n    print('NO')\nelse:\n    print('YES')\n", "n = int(input())\npoints = []\nflag = False\nx1, x2 = map(int, input().split())\nfor i in range(n):\n    a, b = map(int, input().split())\n    points.append((a, b))\n\n\np = []\n\nfor i in range(n):\n    p.append((points[i][0] * x1 + points[i][1], points[i][0] * x2 + points[i][1]))\n\np.sort()\nfor i in range(n - 1):\n    if p[i][0] != p[i + 1][0]:\n        if p[i][1] > p[i + 1][1]:\n            flag = True\nif flag:\n    print('YES')\nelse:\n    print('NO')", "n=int(input())\nl,r=list(map(int,input().split()))\ni=0\ns=[]\nwhile i<n:\n\tk,b=list(map(int,input().split()))\n\ts.append([l*k+b,r*k+b])\n\ti+=1\ns.sort()\n\ny=0\ni=1\nwhile i<n:\n\tif s[i-1][1]>s[i][1]:y=1\n\ti+=1\nprint([\"NO\",\"YES\"][y])\n", "def rline():\n    return [int(i) for i in input().split()]\n\nN = int(input())\nL, R = rline()\nl = [rline() for i in range(N)]\n\natL = []\natR = []\n\nfor i in range(N):\n    k, b = l[i]\n    atL.append((k*L + b, k, i))\n    atR.append((k*R + b, -k, i))\n\natL.sort()\natR.sort()\natL = [i[2] for i in atL]\natR = [i[2] for i in atR]\n\nprint([\"YES\", \"NO\"][atL == atR])\n", "n = int(input())\nx1, x2 = list(map(int, input().split(\" \")))\n\ndef intercepts(k, b):\n    y1 = k*x1+b\n    y2 = k*x2+b\n    return [y1, y2]\n\ninter=[]\nfor i in range (n):\n    k, b = list(map(int, input().split(\" \")))\n    inter += [intercepts(k, b)]\n\ninter.sort()\nright=[]\n\nfor i in range (n):\n    intercept = inter[i]\n    right += [intercept[1]]\n    \nright2=[]\nfor thing in right:\n    right2+=[thing]\nright.sort()\n\nif right == right2:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n", "n=int(input())\ndone=False\na,b=map(int,input().split())\na+=1/4000000\nb-=1/4000000\nlol=[]\nwow=[]\nfor i in range(n):\n    k,c=map(int,input().split())\n    lol.append([k*a+c,i])\n    wow.append([k*b+c,i])\nwow.sort()\nlol.sort()\nfor i in range(n):\n    if lol[i][1]!=wow[i][1]:\n        print('YES')\n        done=True\n        break\nif not done:\n    print('NO')", "def cross(l1, l2, x2):\n    return l2[0] * x2 + l2[1] < l1[0] * x2 + l1[1]\n\n\ndef __starting_point():\n    n = int(input())\n    x1, x2 = list(map(int, input().split()))\n    data = [tuple(map(int, input().split())) for i in range(n)]\n\n    data = list(sorted(data, key=lambda x: (x[0] * x1 + x[1], x[0] * x2 + x[1])))\n    for i in range(len(data) - 1):\n        if cross(data[i], data[i + 1], x2):\n            print('YES')\n            return\n\n    print('NO')\n\n__starting_point()", "n = int(input())\na = input().split(\" \")\nx1 = int(a[0])\nx2 = int(a[1])\ncoor1 = []\ncoor2 = []\neps = 0.000000001\nfor i in range(n):\n   a = input().split(\" \")\n   k = int(a[0])\n   b = int(a[1])\n   coor1.append((k*(x1+eps) + b, i))\n   coor2.append((k*(x2-eps) + b, i))\n#print(coor1)\n#print(coor2)\ncoor1.sort()\ncoor2.sort()\n#print(coor1)\n#print(coor2)\ns = \"NO\"\nfor i in range(len(coor1)):\n    if (coor1[i][1] != coor2[i][1]):\n        s = \"YES\"\nprint(s)\n            \n", "n = int(input())\na = list()\nx1, x2 = list(map(int, input().split()))\nfor i in range(n):\n    k, b = list(map(int, input().split()))\n    y1 = k * x1 + b\n    y2 = k * x2 + b\n    a.append((y1, y2))\na.sort()\nfl = 'NO'\ny1m = a[0][0]\ny2m = a[0][1]\nfor y1, y2 in a:\n    if y2 < y2m:\n        fl = 'YES'\n    else:\n        y2m = max(y2m, y2)\nprint(fl)\n    \n    \n", "n = int(input())\nx1, x2 = list(map(int, input().split()))\nx1 += 10**-8\nx2 -= 10**-8\nlines = []\nfor i in range(n):\n    lines.append(list(map(int, input().split())))\n\nord_left = []\nord_right = []\nfor i in range(n):\n    ord_left.append(lines[i][0] * x1 + lines[i][1])\n    ord_right.append(lines[i][0] * x2 + lines[i][1])\n\n\nenum_l = list(range(n))\nenum_r = list(range(n))\nenum_l.sort(key=lambda ord: ord_left[ord])\nenum_r.sort(key=lambda ord: ord_right[ord])\n\n\n\nif enum_l == enum_r:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n# for i in range(len(ord_right)):\n#   line = ord_left[i][0]\n", "def ur(k, x, b):\n    return k * x + b\n\nn = int(input())\nlst = []\nx1, x2 = list(map(int, input().split()))\nfor i in range(n):\n    k, b = list(map(int, input().split()))\n    lst.append((ur(k, x1, b), ur(k, x2, b)))\nlst.sort()    \nfor i in range(1, n):\n    if (lst[i][0] > lst[i - 1][0] and lst[i][1] < lst[i - 1][1]) or (lst[i - 1][0] < lst[i][0] and lst[i - 1][1] > lst[i][1]):\n        print('YES')\n        break\nelse:\n    print('NO')\n", "n = int(input())\n\nx1,x2 = list(map(float,input().split()))\n\narr = []\n\nfor i in range(n):\n    p,q = list(map(float,input().split()))\n    r1 = p * x1 + q\n    r2 = p * x2 + q\n    arr.append((r1,r2))\n\narr = sorted(arr)\n\nflag = False\n\nfor i in range(n-1):\n    if arr[i][0] < arr[i+1][0] and arr[i][1] > arr[i+1][1]:\n        flag = True\n        break\n\nif flag:\n    print('YES')\nelse:\n    print('NO')\n", "import sys\n\n\n#sys.stdin = open(\"input.txt\")\n#sys.stdout = open(\"output.txt\", \"w\")\n\nn = int(input())\n\nk = []\nb = []\nx1, x2 = (int(i) for i in input().split())\n\nfor i in range(n):\n\tk1, b1 = (int(j) for j in input().split())\n\tk.append(k1)\n\tb.append(b1)\n\nzn = [(k[i]*x1 + b[i], k[i]*x2 + b[i]) for i in range(n)]\n#print(zn)\nzn.sort()\nfound = False;\nfor i in range(n - 1):\n\tif zn[i][1] > zn[i+1][1]:\n\t\tfound = True\n\t\tbreak\n\nif found:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "\"\"\"\nCodeforces Round #329 (Div. 2)\n\nProblem 593 B. Anton and Lines\n\n@author yamaton\n@date 2015-11-04\n\"\"\"\n\nimport itertools as it\nimport functools\nimport operator\nimport collections\nimport math\nimport sys\n\n\nEPSILON = 0.0000001\n\ndef solve(x1, x2, kbs):\n    at_x1 = [k*(x1 + EPSILON) + b for (k, b) in kbs]\n    at_x2 = [k*(x2 - EPSILON) + b for (k, b) in kbs]\n    order1 = [i for i, _ in sorted(enumerate(at_x1), key=operator.itemgetter(1))]\n    print_stderr('at_x1:', at_x1)\n    print_stderr('at_x2:', at_x2)\n    return any(at_x2[i] > at_x2[j] for (i, j) in zip(order1, order1[1:]))\n\n\ndef print_stderr(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\ndef tf_to_yn(tf):\n    return 'YES' if tf else 'NO'\n\n\ndef main():\n    n = int(input())\n    [x1, x2] = [int(i) for i in input().strip().split()]\n    kbs = [tuple(int(i) for i in input().strip().split()) for _ in range(n)]\n    result = solve(x1, x2, kbs)\n    print(tf_to_yn(result))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\"\"\"\nCodeforces Round #329 (Div. 2)\n\nProblem 593 B. Anton and Lines\n\n@author yamaton\n@date 2015-11-04\n\"\"\"\n\nimport itertools as it\nimport functools\nimport operator\nimport collections\nimport math\nimport sys\n\n\nEPSILON = 0.0000001\n\ndef solve(x1, x2, kbs, n):\n    at_x1 = [k*(x1 + EPSILON) + b for (k, b) in kbs]\n    at_x2 = [k*(x2 - EPSILON) + b for (k, b) in kbs]\n    order1 = [i for _, i in sorted(zip(at_x1, it.count()))]\n    print_stderr('at_x1:', at_x1)\n    print_stderr('at_x2:', at_x2)\n    return any(at_x2[i] > at_x2[j] for (i, j) in zip(order1, order1[1:]))\n\n\ndef print_stderr(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\ndef tf_to_yn(tf):\n    return 'YES' if tf else 'NO'\n\n\ndef main():\n    n = int(input())\n    [x1, x2] = [int(i) for i in input().strip().split()]\n    kbs = [tuple(int(i) for i in input().strip().split()) for _ in range(n)]\n    result = solve(x1, x2, kbs, n)\n    print(tf_to_yn(result))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# import sys\n# sys.stdin = open(\"cf593b.in\")\n\nn = int(input())\nx1, x2 = map(int, input().split())\n\nk, b = [], []\nfor _ in range(n):\n\tkk, bb = map(int, input().split())\n\tk.append(kk)\n\tb.append(bb)\n\nat1 = sorted(range(n), key=lambda i: k[i] * (x1 + 1e-8) + b[i])\nat2 = sorted(range(n), key=lambda i: k[i] * (x2 - 1e-8) + b[i])\n\nprint([\"YES\", \"NO\"][at1 == at2])", "\"\"\"\nCodeforces Round #329 (Div. 2)\n\nProblem 593 B. Anton and Lines\n\n@author yamaton\n@date 2015-11-04\n\"\"\"\n\nimport itertools as it\nimport functools\nimport operator\nimport collections\nimport math\nimport sys\n\n\nEPSILON = 0.000000001\n\ndef solve(x1, x2, kbs):\n    at_x1 = [k*(x1 + EPSILON) + b for (k, b) in kbs]\n    at_x2 = [k*(x2 - EPSILON) + b for (k, b) in kbs]\n    order1 = [i for i, _ in sorted(enumerate(at_x1), key=operator.itemgetter(1))]\n    # print_stderr('at_x1:', at_x1)\n    # print_stderr('at_x2:', at_x2)\n    return any(at_x2[i] > at_x2[j] for (i, j) in zip(order1, order1[1:]))\n\n\ndef print_stderr(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\ndef tf_to_yn(tf):\n    return 'YES' if tf else 'NO'\n\n\ndef main():\n    n = int(input())\n    [x1, x2] = [int(i) for i in input().strip().split()]\n    kbs = [tuple(int(i) for i in input().strip().split()) for _ in range(n)]\n    result = solve(x1, x2, kbs)\n    print(tf_to_yn(result))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nx, y = list(map(int,input().split()))\nu, v = [], []\nx += 0.0000001\ny -= 0.0000001\nfor i in range(n):\n    k, m = list(map(int, input().split()))\n    u += [(k*x+m, i)]\n    v += [(k*y+m, i)]\nu, v = sorted(u), sorted(v)\nfor i in range(n):\n    if  u[i][1] != v[i][1]:\n        print('YES')\n        break\nelse:\n    print('NO')\n    \n", "n=int(input())\nX,Y=input().split()\nX,Y=float(X)+1e-10,float(Y)-1e-10\nL=[list(map(float,input().split())) for _ in range(n)]\nprint('NO' if [i for x,i in sorted((k*X+b,i) for i,(k,b) in enumerate(L))] == [i for x,i in sorted((k*Y+b,i) for i,(k,b) in enumerate(L))] else 'YES')\n"]