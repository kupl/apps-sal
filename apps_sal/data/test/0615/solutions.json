["n=int(input())\na=list(map(int,input().split()))\ntmp=0\nca=[0]\nfor ai in a:\n  tmp+=ai\n  ca.append(tmp)\nfrom bisect import bisect_right,bisect_left\nans=float('inf')\n\n# \u6570\u5217\u3092\u307e\u305a\u534a\u5206\u306b\u533a\u5207\u308b\u3002\u5de6i\u500b\u3068\u53f3n-i\u500b 2<=i,n-i\nf,g=1,3\nfor i in range(2,n-1):\n  while abs(ca[i]-ca[f]-ca[f])>abs(ca[i]-ca[f+1]-ca[f+1]):\n    f+=1\n  while abs((ca[-1]-ca[g])-(ca[g]-ca[i]))>abs((ca[-1]-ca[g+1])-(ca[g+1]-ca[i])):\n    g+=1\n  l=(ca[f],ca[i]-ca[f],ca[-1]-ca[g],ca[g]-ca[i])\n  ans=min(ans,max(l)-min(l))\n  #print(l)\nprint(ans)\n", "N = int(input())\nA = [ int(x) for x in input().split()]\n\nS = [0]\n\nfor a in A:\n    S += [ S[-1] + a ]\n\nl = 0\nr = 2\nans = float('inf') \n\nfor i in range(1, N-1):\n    while S[i] - S[l+1] > S[l]:\n        l += 1\n\n    while S[N] - S[r+1] > S[r] - S[i]:\n        r += 1\n\n    a = S[l]\n    b = S[i] - S[l]\n    c = S[r] - S[i]\n    d = S[N] - S[r]\n  \n    ans = min(ans, max(a,b,c,d) - min(a,b,c,d))\nprint(ans)\n", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN = INT()\nA = LIST()\nB = list(accumulate(A))\n\nl, c, r = 0, 1, 2\nP = sum(A[:l])\nQ = sum(A[l:c])\nR = sum(A[c:r])\nS = sum(A[r:])\n\nans = INF\n\nfor c in range(1, N-1):\n\twhile True:\n\t\tif abs(P-Q) < abs((P+A[l])-(Q-A[l])):\n\t\t\tbreak\n\t\tif l == c-1:\n\t\t\tbreak\n\t\tP += A[l]\n\t\tQ -= A[l]\n\t\tl += 1\n\n\twhile True:\n\t\tif abs(R-S) < abs((R+A[r])-(S-A[r])):\n\t\t\tbreak\n\t\tif r == N-1:\n\t\t\tbreak\n\t\tR += A[r]\n\t\tS -= A[r]\n\t\tr += 1\n\n\tans = min(max(P, Q, R, S)-min(P, Q, R, S), ans)\n\n\tQ += A[c]\n\tR -= A[c]\n\nprint(ans)\n", "def tmp(a, b, c):\n    return abs(a - b), abs(a - b + 2 * c)\n\n\ndef solve(string):\n    n, *a = list(map(int, string.split()))\n    l, c, r = 1, 2, 3\n    sll, slr, srl, srr = sum(a[:l]), sum(a[l:c]), sum(a[c:r]), sum(a[r:])\n    ans = max(sll, slr, srl, srr) - min(sll, slr, srl, srr)\n    while c < n - 1:\n\n        d, dn = tmp(sll, slr, a[l])\n        while dn < d:\n            sll, slr, l = sll + a[l], slr - a[l], l + 1\n            d, dn = tmp(sll, slr, a[l])\n        d, dn = tmp(srl, srr, a[r])\n        while dn < d:\n            srl, srr, r = srl + a[r], srr - a[r], r + 1\n            d, dn = tmp(srl, srr, a[r])\n        ans = min(ans, max(sll, slr, srl, srr) - min(sll, slr, srl, srr))\n        slr, srl, c = slr + a[c], srl - a[c], c + 1\n    return str(ans)\n\n\ndef __starting_point():\n    print((solve('\\n'.join([input(), input()]))))\n\n__starting_point()", "import bisect\n\nn=int(input())\narr=list(map(int,input().split()))\nacum=[0]\nfor i in range(n):\n  acum.append(acum[-1]+arr[i])\nans=10**18\nfor i in range(2,n-1):\n  suma=acum[i]\n  sumb=acum[n]-suma\n  posa=bisect.bisect_right(acum,suma//2)\n  diffa=10**18\n  if posa>=2:\n    mina=min(acum[posa-1],acum[i]-acum[posa-1])\n    maxa=max(acum[posa-1],acum[i]-acum[posa-1])\n    diffa=maxa-mina\n  if posa!=i:\n    tmina=min(acum[posa],acum[i]-acum[posa])\n    tmaxa=max(acum[posa],acum[i]-acum[posa])\n    tdiffa=tmaxa-tmina\n    if tdiffa<diffa:\n      diffa=tdiffa\n      mina=tmina\n      maxa=tmaxa\n  posb=bisect.bisect_right(acum,suma+sumb//2)\n  diffb=10**18\n  if posb>=i+2:\n    minb=min(acum[posb-1]-acum[i],acum[n]-acum[posb-1])\n    maxb=max(acum[posb-1]-acum[i],acum[n]-acum[posb-1])\n    diffb=maxb-minb\n  if posa!=n+1:\n    tminb=min(acum[posb]-acum[i],acum[n]-acum[posb])\n    tmaxb=max(acum[posb]-acum[i],acum[n]-acum[posb])\n    tdiffb=tmaxb-tminb\n    if tdiffb<diffb:\n      diffb=tdiffb\n      minb=tminb\n      maxb=tmaxb\n  ans=min(ans,max(maxa,maxb)-min(mina,minb))\nprint(ans)", "def absdiff(a, b):\n    return abs(b - a)\n\n\ndef solve(s):\n    n, *a = list(map(int, s.split()))\n    l, r, ans = 1, 3, sum(a)\n    sll, slr, srl, srr = a[0], 0, sum(a[1:3]), sum(a[3:])\n    for c in range(1, n - 1):\n        slr += a[c]\n        srl -= a[c]\n        r = max(c, r)\n        while l < c and absdiff(sll + a[l], slr - a[l]) < absdiff(sll, slr):\n            sll, slr, l = sll + a[l], slr - a[l], l + 1\n        while r < len(a) and absdiff(srl + a[r], srr - a[r]) < absdiff(srl, srr):\n            srl, srr, r = srl + a[r], srr - a[r], r + 1\n        _max, _min = max(sll, slr, srl, srr), min(sll, slr, srl, srr)\n        ans = min(ans, absdiff(_min, _max))\n    return ans\n\n\nprint((solve('\\n'.join([input(), input()]))))\n", "N=int(input())\nA=list(map(int,input().split()))\nAA=[0]*(N)\nAA[0]=A[0]\nfor i in range(1,N):\n  AA[i]=AA[i-1]+A[i]\nl=0\nr=2\np=[]\nfor m in range(1,N-2):\n  sl=AA[m]\n  sr=AA[N-1]-sl\n  while abs(sl-2*AA[l])>abs(sl-2*AA[l+1]):\n    l+=1\n  while abs(AA[N-1]+sl-2*AA[r])>abs(AA[N-1]+sl-2*AA[r+1]):\n    r+=1\n  P=AA[l]\n  Q=sl-P\n  R=AA[r]-sl\n  S=sr-R\n  ans=max(P,Q,R,S)-min(P,Q,R,S)\n  p.append(ans)\nprint(min(p))", "n = int(input())\na = [int(item) for item in input().split()]\n\ncumsum = [0] * n\nfor i in range(n):\n  if i == 0:\n    cumsum[0] = a[0]\n  else:\n    cumsum[i] = cumsum[i-1] + a[i]\n    \nl = 0\nr = 2\nans = sum(a)\nfor i in range(1, n-1):\n  while cumsum[i] - cumsum[l+1] > cumsum[l]:\n    l += 1\n  while cumsum[-1] - cumsum[r+1] > cumsum[r] - cumsum[i]:\n    r += 1\n  a = cumsum[l]\n  b = cumsum[i] - cumsum[l]\n  c = cumsum[r] - cumsum[i]\n  d = cumsum[-1] - cumsum[r]\n  \n  ans = min(ans, max(a,b,c,d) - min(a,b,c,d))\nprint(ans)", "from itertools import accumulate\nfrom bisect import *\nn = int(input())\na = list(map(int, input().split()))\n\na = [0]+list(accumulate(a))\n#print(a)\nans = 10**18\nfor i in range(2, n):\n    b = []\n    m = a[i]\n    l = bisect_right(a, m/2)\n    if abs(a[l]-m/2) <= abs(a[l-1]-m/2):\n        b.append(a[l])\n        b.append(m-a[l])\n    else:\n        b.append(a[l-1])\n        b.append(m-a[l-1])\n    r = bisect_left(a, (a[-1]+m)/2)\n    if abs(a[r]-(a[-1]+m)/2) <= abs(a[r-1]-(a[-1]+m)/2):\n        b.append(a[r]-m)\n        b.append(a[-1]-a[r])\n    else:\n        b.append(a[r-1]-m)\n        b.append(a[-1]-a[r-1])\n\n    #print(b)\n    ans = min(ans, max(b)-min(b))\n\nprint(ans)\n", "from itertools import accumulate\nN = int(input())\nA = list(map(int, input().split()))\n\nans = 10 ** 18\n\n\nA = tuple(accumulate(A, initial=0))\ni = 1\nj = 3\n\n\nfor mid in range(2, N - 1):\n    # \u5de6\u5074\u3092\u3067\u304d\u308b\u3060\u3051\u7b49\u5206\n    b = A[i] - A[0]\n    c = A[mid] - A[i]\n    while i + 1 < mid and abs(b - c) > abs(A[mid] + A[0] - 2 * A[i+1]):\n        i += 1\n        b = A[i] - A[0]\n        c = A[mid] - A[i]\n    # \u53f3\u5074\u3092\u3067\u304d\u308b\u3060\u3051\u7b49\u5206\n    j = max(j, mid + 1)\n    d = A[j] - A[mid]\n    e = A[N] - A[j]\n    while j + 1 < N and abs(d - e) > abs(A[N] + A[mid] - 2 * A[j+1]):\n        j += 1\n        d = A[j] - A[mid]\n        e = A[N] - A[j]\n\n    res = max(b, c, d, e) - min(b, c, d, e)\n    ans = min(ans, res)\n\nprint(ans)", "n = int(input())\nA = list(map(int, input().split()))\nF = [int()] * n\nF[0] = A[0]\nfor b in range(1, n):\n    F[b] = F[b - 1] + A[b]\n\n\nres = [0]*4\ndata = [10 ** 18] * 2\nex = [0]*4\nans = 10 ** 18\ns = 0\nt = 2\nfor i in range(1, n - 2):\n    bl = [True, True]\n    for j in range(s, i):\n        res[0] = F[j]\n        res[1] = F[i] - F[j]\n        if not bl[0]:\n            break\n        if data[0] > abs(res[1] - res[0]) or j == s:\n            s = j\n            ex[0] = res[0]\n            ex[1] = res[1]\n            data[0] = abs(res[1] - res[0])\n        else:\n            bl[0] = False\n    for k in range(t, n):\n        res[2] = F[k] - F[i]\n        res[3] = F[n - 1] - F[k]\n        if not bl[1]:\n            break\n        if data[1] > abs(res[3] - res[2]) or k == t:\n            t = k\n            ex[2] = res[2]\n            ex[3] = res[3]\n            data[1] = abs(res[3] - res[2])\n        else:\n            bl[1] = False\n    ans = min(ans, max(ex) - min(ex))\n\nprint(ans)", "import itertools\n\nn = int(input())\nlst = list(map(int, input().split()))\n\nlst_accum = list(itertools.accumulate(lst))\n\nmin_diff = 10**100\nfirst_cut = 0\nthird_cut = 2\nall_sum = lst_accum[-1]\nfor k in range(1, len(lst_accum)-2):\n    second_last = lst_accum[k]\n    P = lst_accum[first_cut]\n    Q = second_last - P\n    diff = abs(P-Q)\n    while k - first_cut > 1 and diff > abs(second_last - lst_accum[first_cut+1]*2):\n        first_cut += 1\n        P = lst_accum[first_cut]\n        Q = second_last - P\n        diff = abs(P-Q)    \n    \n    if third_cut == k:\n        third_cut += 1\n    third_last = lst_accum[third_cut]\n    S = all_sum - third_last\n    R = third_last - second_last\n    diff = abs(S-R)\n    while (n-1) - third_cut > 1 and diff > abs(all_sum - lst_accum[third_cut+1]*2 + second_last):\n        third_cut += 1\n        third_last = lst_accum[third_cut]\n        S = all_sum - third_last\n        R = third_last - second_last\n        diff = abs(S-R)\n    \n    #print(first_cut, k, third_cut)\n    min_diff = min(min_diff, max(P,Q,R,S) - min(P,Q,R,S))\n    #print(min_diff)\n    \n\nprint(min_diff)", "n=int(input())\na=[int(i) for i in input().split()]\n\nfor i in range(n-1):\n    a[i+1]+=a[i]\n\nj=0\nk=2\nans=10**9\n\nfor i in range(1,n-1):\n    while abs(a[j]*2-a[i])>abs(a[j+1]*2-a[i]):\n        j+=1\n    while abs(a[k]*2-a[i]-a[n-1])>abs(a[k+1]*2-a[i]-a[n-1]):\n        k+=1\n    t=[a[j],a[i]-a[j],a[k]-a[i],a[n-1]-a[k]]\n    ans=min(ans,max(t)-min(t))\nprint(ans)\n", "N=int(input())\nA=[int(x) for x in input().split()]\nP,Q,R,S=A[0],0,A[1]+A[2],sum(A[3:])\nl,r=1,3\nans=float(\"inf\")\nfor i in range(2,N-1):\n  Q+=A[i-1]\n  while l<i-1:\n    if abs(P-Q)>abs(P+A[l]-(Q-A[l])):\n      P+=A[l]\n      Q-=A[l]\n      l+=1\n    else:\n      break\n  R-=A[i-1]\n  if i==r:\n    R+=A[r]\n    S-=A[r]\n    r+=1\n  while r<N-1:\n    if abs(R-S)>abs(R+A[r]-(S-A[r])):\n      R+=A[r]\n      S-=A[r]\n      r+=1\n    else:\n      break\n  ans=min(ans,(max(P,Q,R,S)-min(P,Q,R,S)))\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\na_cs = [0] * (n + 1)\nfor i in range(n):\n    a_cs[i + 1] = a_cs[i] + a[i]\n\ni1 = 1\ni3 = 3\nans = 10**14\nfor i2 in range(2, n - 1):\n    while i1 + 1 < i2 and abs(a_cs[i1] * 2 - a_cs[i2]) > abs(a_cs[i1 + 1] * 2 -\n                                                             a_cs[i2]):\n        i1 += 1\n\n    while i3 + 1 < n and abs(a_cs[-1] + a_cs[i2] - a_cs[i3] *\n                             2) > abs(a_cs[-1] + a_cs[i2] - a_cs[i3 + 1] * 2):\n        i3 += 1\n\n    p = a_cs[i1]  # [0,i1)\n    q = a_cs[i2] - a_cs[i1]  # [i1, i2)\n    r = a_cs[i3] - a_cs[i2]  # [i2, i3)\n    s = a_cs[n] - a_cs[i3]  # [i3, n)\n    cand = max(p, q, r, s) - min(p, q, r, s)\n    ans = min(ans, cand)\n\nprint(ans)\n", "# import math\n# N = int(input())\n# A_list = [int(i) for i in input().split()]\n\n\n# def divide_list(num_list):\n#   left = 0\n#   right = len(num_list)\n#   minimum = 10**9\n\n#   while True:\n#     c = (left+right)//2\n#     left_sum = sum(num_list[:c])\n#     right_sum = sum(num_list[c:])\n#     diff = abs(left_sum - right_sum)\n\n#     if minimum > diff:\n#       minimum = diff\n#       minimum_left = left\n#       minimum_right = right\n    \n#     if left_sum > right_sum:\n#       right = c\n#     elif left_sum < right_sum:\n#       left = c\n#     else:\n#       return num_list[:c], num_list[c:]\n\n#     if c==left or c==right:\n#       c = (minimum_left+minimum_right)//2\n#       return num_list[:c], num_list[c:]\n\n# tmp1_list, tmp2_list = divide_list(A_list)\n# print(tmp1_list, tmp2_list)\n# tmp11_list, tmp12_list = divide_list(tmp1_list)\n# tmp21_list, tmp22_list = divide_list(tmp2_list)\n# print(tmp11_list, tmp12_list, tmp21_list, tmp22_list)\n\n# ans_list = [sum(tmp11_list), sum(tmp12_list), sum(tmp21_list), sum(tmp22_list)]\n# ans_list.sort()\n\n# print(ans_list[-1] - ans_list[0])\n\n\n#102_D\nN = int(input())\nA = list(map(int, input().split()))\ns = 0\nAS = []\nfor i in range(N):\n    s += A[i]\n    AS.append(s)\n#\u5c3a\u53d6\u308a\u6cd5\nAns = AS[N-1]+1\nL = 0\nR = 2\nfor Mid in range(1, N-2):\n    Sum_L = AS[Mid]\n    Sum_R = AS[N-1]-Sum_L\n    while abs(Sum_L-2*AS[L]) > abs(Sum_L-2*AS[L+1]):\n        L += 1\n\n    while abs(AS[N-1]-2*AS[R]+AS[Mid]) > abs(AS[N-1]-2*AS[R+1]+AS[Mid]):\n        R += 1\n    P = AS[L]\n    Q = AS[Mid]-AS[L]\n    S = AS[R]-AS[Mid]\n    T = AS[N-1]-AS[R]\n    #print(Mid,L,R,abs(max(P,Q,S,T)-min(P,Q,S,T)))\n    Ans = min(Ans, abs(max(P, Q, S, T)-min(P, Q, S, T)))\nprint(Ans)\n", "import numpy as np\nN = int(input())\nA = np.zeros(N+2, dtype=np.int64)\nA[1:-1] = input().split()\n\nnp.cumsum(A, out = A)\ntotal = A[-1]\nA[-1] = 10 ** 18\n\nleft = np.searchsorted(A, A/2)\nP1 = A[left-1]\nP2 = A[left]\nQ1,Q2 = A-P1, A-P2\n\nnp.maximum(P1,Q2,out = P1)\nnp.minimum(P2,Q1,out = P2)\nP,Q = P1,P2\n\nright = np.searchsorted(A,(total+A)/2)\nR1 = A[right-1] - A\nR2 = A[right] - A\nS1 = total - A[right-1]\nS2 = total - A[right]\nnp.maximum(R1,S2,out=R1)\nnp.minimum(R2,S1,out=R2)\nR,S = R1,R2\n\nPQRS = np.vstack([P,Q,R,S])\nx = np.max(PQRS, axis=0) - np.min(PQRS, axis=0)\nanswer = (x[1:-1].min())\nprint(answer)", "import bisect\nn = int(input())\na = list(map(int, input().split()))\n\ncum = [0]\nfor ai in a:\n    cum.append(cum[-1] + ai)\n\nans = float('inf')\n\nfor i in range(2, n-1):\n    bc = cum[i]\n    de = cum[-1] - cum[i]\n    bc_mid = bc / 2\n    de_mid = (cum[i] + cum[-1]) / 2\n\n    i_bc = bisect.bisect_left(cum, bc_mid)\n    i_de = bisect.bisect_left(cum, de_mid)\n\n    # print(i_bc)\n    # print(i_de)\n\n    for cum_b in (cum[i_bc-1], cum[i_bc]):\n        for cum_d in (cum[i_de-1], cum[i_de]):\n            b = cum_b\n            c = bc - b\n            d = cum_d - bc\n            e = de - d\n            bcde = [b, c, d, e]\n            bcde.sort()\n            ans = min(ans, bcde[-1]-bcde[0])\n\nprint(ans)", "from itertools import accumulate\n\n\ndef solve(string):\n    n, *a = list(map(int, string.split()))\n    *a, = accumulate(a)\n    l, c, r = 0, 1, 2\n    sll, slr, srl, srr = a[l], a[c] - a[l], a[r] - a[c], a[-1] - a[r]\n    ans = max(sll, slr, srl, srr) - min(sll, slr, srl, srr)\n    while c < n - 1:\n        while abs(a[c] - 2 * a[l + 1]) < abs(a[c] - 2 * a[l]):\n            l += 1\n        while abs(a[-1] + a[c] - 2 * a[r + 1]) < abs(a[-1] + a[c] - 2 * a[r]):\n            r += 1\n        sll, slr, srl, srr = a[l], a[c] - a[l], a[r] - a[c], a[-1] - a[r]\n        ans = min(ans, max(sll, slr, srl, srr) - min(sll, slr, srl, srr))\n        c+=1\n    return str(ans)\n\n\ndef __starting_point():\n    print((solve('\\n'.join([input(), input()]))))\n\n__starting_point()", "import itertools\nn = int(input())\nA = [int(i) for i in input().split()]\nA_sum = [0]+list(itertools.accumulate(A))\n\"\"\"\u7d2f\u7a4d\u548c\u306f\u5358\u8abf\u5897\u52a0\n4\u30d1\u30fc\u30c8\u306b\u5206\u3051\u308c\u3070\u3044\u3044\u306e\u3067\u5225\u3051\u308b\u7b87\u62403\u70b9left,mid,right\u3092\u63a2\u3059\uff0e\n\u5168\u63a2\u7d22\u306fTLE\u306a\u306e\u3067mid\u306b\u95a2\u3059\u308b\u30eb\u30fc\u30d7\u63a2\u7d22\u3092\u884c\u3046\u3068\uff0c\u6761\u4ef6\u5f0f\u304b\u3089l,r\u306f\u6c7a\u307e\u308b\uff0e\n\u4eca\u56de\u306e\u554f\u984c\u3067\u306f\u5dee\u3092\u306a\u304f\u3059\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\uff0c0~l,l~i\u3068i~r,r~n\u306e\u5dee\u304c\u5c0f\u3055\u3044\u6642\u304c\u30d9\u30b9\u30c8\n\u3053\u306e\u6761\u4ef6\u306e\u3082\u3068\uff0cl\u3068r\u3092\u6c7a\u3081\u308b\uff0efor\u6587\u3067\u66f8\u304f\u5834\u5408break\u5165\u308c\u306a\u3044\u3068TLE\n\n\"\"\"\nans = 10**9\nP,Q,R,S = 0,0,0,0\nl = 0\nr = 2\nfor i in range(1,n):\n    while(l<i and abs(A_sum[l]-(A_sum[i]-A_sum[l])) >= abs(A_sum[l+1]-(A_sum[i]-A_sum[l+1]))):\n        #\u5358\u8abf\u5897\u52a0\u3060\u304b\u3089\u8d85\u3048\u308b\u3088\u3046\u306a\u6642\u306fp,q\u306e\u5dee\u304c\u5927\u304d\u304f\u306a\u308b\u6642\u3060\u3088\u306d\n        l += 1\n    while(r<n and abs((A_sum[n]-A_sum[r]) -(A_sum[r]-A_sum[i])) >= abs((A_sum[n]-A_sum[r+1])-(A_sum[r+1]-A_sum[i]))):\n        r += 1\n    P = A_sum[l]\n    Q = A_sum[i]-P\n    R = A_sum[r]-A_sum[i]\n    S = A_sum[n]-A_sum[r]\n    ans =min(ans,abs(max(P,Q,R,S)-min(P,Q,R,S)))\n    \n\nprint(ans)", "#!/usr/bin/env python3\nfrom itertools import accumulate\nfrom bisect import bisect\nn = int(input())\na = list(map(int, input().split()))\nans = 10**9\ncs = [0] + list(accumulate(a))\nfor i in range(2, n - 1):\n    left = cs[i]\n    right = cs[-1] - cs[i]\n    lm = bisect(cs, left // 2)\n    l1, l2 = cs[lm], left - cs[lm]\n    l3, l4 = cs[lm - 1], left - cs[lm - 1]\n    if abs(l1 - l2) > abs(l3 - l4):\n        l1 = l3\n        l2 = l4\n    rm = bisect(cs, left + right // 2)\n    r1, r2 = cs[rm] - cs[i], right - (cs[rm] - cs[i])\n    r3, r4 = cs[rm - 1] - cs[i], right - (cs[rm - 1] - cs[i])\n    if abs(r1 - r2) > abs(r3 - r4):\n        r1 = r3\n        r2 = r4\n    ans = min(ans, max(l1, l2, r1, r2) - min(l1, l2, r1, r2))\nprint(ans)\n", "N = int(input())\nA = list(map(int,input().split()))\nB = [0]\ntmp = 0\nfor a in A:\n    tmp += a\n    B.append(tmp)\n\nl = 1\nr = 3\ncut = []\nfor i in range(2,N-1):\n    Lm = float(\"inf\")\n    Rm = float(\"inf\")\n    c = [0,i,0]\n    for j in range(l,i):\n        tmp = abs(B[i]-2*B[j])\n        if tmp > Lm:\n            c[0] = j-1\n            l = j-1\n            break\n        Lm = tmp\n    else:\n        c[0] = i-1\n        l = i-1\n    for k in range(r,N):\n        tmp = abs((B[N]-B[k])-(B[k]-B[i]))\n        if tmp > Rm:\n            c[2] = k-1\n            r = k-1\n            break\n        Rm = tmp\n    else:\n        c[2] = N-1\n        r = N\n    cut.append(c)\n#print(cut)\nans = float(\"inf\")\nfor p,q,r in cut:\n    P = B[p]\n    Q = B[q]-B[p]\n    R = B[r]-B[q]\n    S = B[N]-B[r]\n    ans = min(ans,max(P,Q,R,S)-min(P,Q,R,S))\nprint(ans)\n", "N = int(input())\n\n#\u7d2f\u7a4d\u548c\u3067\u53d7\u3051\u53d6\u308b\nA = [0] * N\nS = 0\nfor i, a in enumerate(input().split()):\n    S += int(a)\n    A[i] = S\n\nanswer = S\n\n#index\u306f\u6700\u5f8c\u306b\u56de\u53ce\u3059\u308b\u756a\u53f7\nB = 0\nD = 0\n\nfor C in range(1, N - 2):\n    D = max(D, C + 1)\n    SB = A[B]\n    SC = A[C] - A[B]\n    SD = A[D] - A[C]\n    SE = S - A[D]\n    left_score = abs(SB - SC)\n    #BC\u306e\u5883\u754c\u306e\u8abf\u6574\n    while True:\n        B_ = B + 1\n        SB_ = A[B_]\n        SC_ = A[C] - SB_\n        x = abs(SB_  - SC_)\n        if left_score > x:\n            B, SB, SC, left_score = B_, SB_, SC_, x\n            continue\n        break\n\n    right_score = abs(SE - SD)\n    while True:\n        D_ = D + 1\n        SD_ = A[D_] - A[C]\n        SE_ = S - A[D_]\n        x = abs(SD_ - SE_)\n        if right_score > x:\n            D, SD, SE, right_score = D_, SD_, SE_, x\n            continue\n        break\n\n    score = max(SB, SC, SD, SE) - min(SB, SC, SD, SE)\n    answer = min(score, answer)\nprint (answer)\n", "N = int(input())\nA = list(map(int, input().split()))\n\nS = [0] * (N+1)\nfor i in range(N) :\n    S[i+1] = S[i] + A[i]\n\nleftMiddle = 0\nrightMiddle = 2\n\nans = float('inf')\n\nfor middle in range(2, N-1) :\n    leftS = S[leftMiddle]\n    rightS = S[middle] - leftS\n    diff = abs(leftS - rightS)\n\n    # \u5de6\u5074\u306e\u66f4\u65b0\n    for i in range(leftMiddle, middle) :\n        leftS += A[i]\n        rightS -= A[i]\n        if diff > abs(leftS - rightS) :\n            leftMiddle += 1\n            diff = abs(leftS - rightS)\n        else :\n            break\n\n    leftS = S[rightMiddle] - S[middle]\n    rightS = S[-1] - S[rightMiddle]\n    diff = abs(leftS - rightS)\n\n    # \u53f3\u5074\u306e\u66f4\u65b0\n    for i in range(rightMiddle, N) :\n        leftS += A[i]\n        rightS -= A[i]\n        if diff > abs(leftS - rightS) :\n            rightMiddle += 1\n            diff = abs(leftS - rightS)\n        else :\n            break\n\n    B = S[leftMiddle]\n    C = S[middle] - B\n    D = S[rightMiddle] - S[middle]\n    E = S[-1] - B - C - D\n\n    diff = max(B, C, D, E) - min(B, C, D, E)\n    ans = min(ans, diff)\n\nprint(ans)\n\n", "n = int(input())\na = list(map(int, input().split()))\n\ns = [a[0]]\nfor i in range(1, n):\n    s.append(a[i] + s[i-1])\n\nl = 0\nr = 2\nans = float(\"inf\")\n\nfor m in range(1, n-1):\n    while l < m - 1 and abs(s[m] - 2 * s[l]) > abs(s[m] - 2 * s[l+1]):\n        l += 1\n    while r <= m or r < n - 1 and abs(s[n-1] - 2 * s[r] + s[m]) > abs(s[n-1] - 2 * s[r+1] + s[m]):\n        r += 1\n    mx = max(s[l], s[m] - s[l], s[r] - s[m], s[n-1] - s[r])\n    mn = min(s[l], s[m] - s[l], s[r] - s[m], s[n-1] - s[r])\n    ans = min(ans, mx - mn)\n\nprint(ans)\n", "#102_D\nN=int(input())\nA=list(map(int,input().split()))\ns=0\nAS=[]\nfor i in range(N):\n    s+=A[i]\n    AS.append(s)\n#\u5c3a\u53d6\u308a\u6cd5\nAns=AS[N-1]+1\nL=0\nR=2\nfor Mid in range(1,N-2):\n    Sum_L=AS[Mid]\n    Sum_R=AS[N-1]-Sum_L\n    while abs(Sum_L-2*AS[L])>abs(Sum_L-2*AS[L+1]):\n        L+=1\n    \n    while R<=N-3 and abs(AS[N-1]-2*AS[R]+AS[Mid])>abs(AS[N-1]-2*AS[R+1]+AS[Mid]):\n        R+=1\n    P=AS[L]\n    Q=AS[Mid]-AS[L]\n    S=AS[R]-AS[Mid]\n    T=AS[N-1]-AS[R]\n    #print(Mid,L,R,abs(max(P,Q,S,T)-min(P,Q,S,T)))\n    Ans=min(Ans,abs(max(P,Q,S,T)-min(P,Q,S,T)))\nprint(Ans)", "from itertools import accumulate as acc\nfrom bisect import bisect_left as bl\n\ndef ans(n):\n    tmp=0\n    for i in range(N):\n        tmp+=abs(a[i]-a[n-1])\n    return tmp\n\n\nN=int(input())\na=list(map(int,input().split()))\na=list(acc(a))\n\nans=10**18\np=0\nq=2\nfor j in range(1,N-2):\n    q=max(q,j+1)\n    while p<j-1 and abs(a[j]-a[p]*2)>abs(a[j]-a[p+1]*2):\n        p+=1\n    while q<N-2 and abs(a[j]+a[N-1]-a[q]*2)>abs(a[j]+a[N-1]-a[q+1]*2):\n        q+=1\n\n    P,Q,R,S=a[p], a[j]-a[p], a[q]-a[j], a[N-1]-a[q]\n    ans=min(ans, max(P,Q,R,S)-min(P,Q,R,S))\n\nprint(ans)", "n=int(input())\na=list(map(int, input().split()))\n\nfrom itertools import accumulate\nac=list(accumulate(a))\n\nans=float(\"inf\")\nl=0\nr=1\nfor i in range(1, n-2):\n    while abs(ac[i]-2*ac[l+1]) < abs(ac[i]-2*ac[l]) and l < i+1:\n        l+=1\n    while abs(ac[-1]-2*ac[r+1]+ac[i]) < abs(ac[-1]-2*ac[r]+ac[i]) and r < n-2:\n        r+=1\n    t=[ac[l], ac[i]-ac[l], ac[r]-ac[i], ac[-1]-ac[r]]\n    ans=min(ans, max(t)-min(t))\nprint(ans)\n", "n = int(input())\n\na = list(map(int, input().split()))\n\n# \u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\nfor i in range(n-1):\n        a[i+1] += a[i]\n\n#\u771f\u3093\u4e2d\u306e\u4ed5\u5207\u308a\u3092\u56fa\u5b9a\u3057\u3001\u5de6\u53f3\u306e\u914d\u5217\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u4ed5\u5207\u308a\u3092\u52d5\u304b\u3057\u3066\u78ba\u8a8d\u3059\u308b\n#\u7d2f\u7a4d\u548c\u306a\u306e\u3067\u5358\u8abf\u5897\u52a0\u3060\u304b\u3089\u3001\u5de6\u53f3\u306e\u4e8c\u3064\u306e\u914d\u5217\u306b\u3064\u3044\u3066\u3001\u4ed5\u5207\u308a\u3092\u8ffd\u52a0\u3057\u305f\u3068\u304d\u306b\u5dee\u304c\u6700\u3082\u5c0f\u3055\u3044\u4ed5\u5207\u308a\u306e\u4f4d\u7f6e\u3092\u4fdd\u5b58\nl = 0\nr = 2\nans = float(\"inf\")\n#m\u306f\u771f\u3093\u4e2d\u306e\u4ed5\u5207\u308a\u306e\u4f4d\u7f6e\nfor m in range(1, n-1):\n        #\u7d2f\u7a4d\u548c\u304c\u5358\u8abf\u5897\u52a0\u3060\u304b\u3089\u3001m\u3092\u56fa\u5b9a\u3057\u305f\u3068\u304d2a[l]-a[m]\u3082\u5358\u8abf\u5897\u52a0\u3067\u3001l\u3092\u5897\u52a0\u3055\u305b\u3066\u3044\u304f\u3068\u5f90\u3005\u306b\u6e1b\u5c11\u3057l\u3068l+1\u3067\u9006\u8ee2\u3059\u308b\u90e8\u5206\u3092\u5de6\u306e\u4ed5\u5207\u308a\u3068\u3059\u308b\u3002\n        #2\u500d\u3057\u306a\u3044\u3068\u7d2f\u7a4d\u548c\u304c\u5358\u8abf\u5897\u52a0\u306e\u305f\u3081\u305a\u3063\u3068\u53f3\u8fba\u304c\u5c0f\u3055\u3044\u307e\u307e\u306b\u306a\u308b\n        #\u90e8\u5206\u914d\u5217\u306e\u5e73\u5747\u5024\u306b\u8fd1\u3044\u90e8\u5206\u3092\u4e8c\u5206\u63a2\u7d22\u3067\u63a2\u3059\u3053\u3068\u3082\u53ef\u80fd\u3060\u304c\u3001\u5e73\u5747\u8a08\u7b97\u51e6\u7406\u3068\u63a2\u7d22\u51e6\u7406\u306b\u52a0\u3048\u3001\u5019\u88dc\u304cbisect\u3067\u6c42\u3081\u305f\u4f4d\u7f6e\u306e\u524d\u5f8c\u3082\u542b\u307e\u308c\u308b\u306e\u3067\u3081\u3093\u3069\u304f\u3055\u3044\n        while abs(2*a[l] - a[m]) > abs(2*a[l+1] - a[m]): \n                l += 1\n        while abs(2*a[r] - a[n-1] - a[m]) > abs(2*a[r+1] - a[n-1] - a[m]):\n                r += 1\n\n        bcde = [a[l], a[m]-a[l], a[r]-a[m],  a[n-1]-a[r]]\n        ans = min(ans, max(bcde)-min(bcde))\nprint(ans)\n", "N=int(input())\nalist=list(map(int,input().split()))\n\nslist=[]\nasum=0\nfor a in alist:\n  asum+=a\n  slist.append(asum)\n#print(alist)\n#print(slist)\n\ndic_lp,dic_rp={},{}\nlp,rp=0,2\nfor mp in range(1,N-2):\n  #p1\n  mindiff=slist[mp]\n  while(lp<mp+1):\n    sum1=slist[lp]\n    sum2=slist[mp]-slist[lp]\n    \n    diff=abs(sum1-sum2)\n    if mindiff>diff:\n      lp+=1\n      mindiff=diff\n    else:\n      lp-=1\n      dic_lp[mp]=lp\n      #print(mp,lp)\n      break\n    \n  rp=max(rp,mp+1)\n  mindiff=slist[-1]-slist[mp]\n  while(rp<N):\n    sum1=slist[-1]-slist[rp]\n    sum2=slist[rp]-slist[mp]\n    \n    diff=abs(sum1-sum2)\n    if mindiff>diff:\n      rp+=1\n      mindiff=diff\n    else:\n      rp-=1\n      dic_rp[mp]=rp\n      #print(mp,rp)\n      break\n    \nmin_diff=10**9\nfor mp in range(1,N-2):\n  lp=dic_lp[mp]\n  rp=dic_rp[mp]\n  \n  sum1=slist[lp]\n  sum2=slist[mp]-slist[lp]\n  sum3=slist[rp]-slist[mp]\n  sum4=slist[-1]-slist[rp]\n  #print(sum1,sum2,sum3,sum4)\n  \n  sum_list=[sum1,sum2,sum3,sum4]\n  sum_list.sort()\n  diff=sum_list[-1]-sum_list[0]\n  #print(lp,mp,rp,diff)\n  if diff<min_diff:\n    min_diff=diff\n    #print(min_diff)\n  \nprint(min_diff)", "import numpy as np\n\nN = int(input())\nA = np.zeros(N + 2, dtype = np.int64)\nA[1:-1] = input().split()\nnp.cumsum(A, out = A)\ntotal = A[-1]\nA[-1] = 10 ** 18\n\nleft = np.searchsorted(A, A/2)\nP1 = A[left - 1]\nP2 = A[left]\n\nQ1, Q2 = A - P1, A - P2\n\nnp.maximum(P1, Q2, out = P1)\nnp.minimum(P2, Q1, out = P2)\nP, Q = P1, P2\nright = np.searchsorted(A, (total + A)/2)\nR1 = A[right - 1] - A\nR2 = A[right] - A\nS1 = total - A[right - 1]\nS2 = total - A[right]\nnp.maximum(R1, S2, out = R1)\nnp.minimum(R2, S1, out = R2)\nR, S = R1, R2\n\nPQRS = np.vstack([P, Q, R, S])\nx = np.max(PQRS, axis = 0) - np.min(PQRS, axis = 0)\nanswer = (x[1: -1].min())\nprint (answer)", "import sys, os\nfrom itertools import accumulate\nimport bisect\n\nf = lambda:list(map(int,input().split()))\nif 'local' in os.environ :\n    sys.stdin = open('./input.txt', 'r')\n\nn = f()[0]\ndef get_mid(b, i):\n    nonlocal n\n    front_i_sum = b[i]\n\n    idx1 = bisect.bisect_right(b, front_i_sum/2)\n    if idx1 == 0:\n        idx1 = 1\n        max_fisrt = max(b[0], b[i]-b[0])\n        min_first = min(b[0], b[i]-b[0])\n    \n    else:\n\n\n        max1 = b[idx1]\n        min1 = b[i] - b[idx1]\n\n        max2 = b[i] - b[idx1-1]\n        min2 = b[idx1-1]\n\n        if max1 - min1 >= max2 - min2:\n            max_fisrt = max2\n            min_first = min2\n        else:\n            max_fisrt = max1\n            min_first = min1\n\n\n    idx2 = bisect.bisect_right(b, front_i_sum + (b[n-1] - b[i])/2)\n\n    if idx2 == i+1:\n        max_s = max(b[i+1]- b[i], b[n-1]- b[i+1])\n        min_s = min(b[i+1]- b[i], b[n-1]- b[i+1])\n\n    else:\n        max1 = b[idx2] - front_i_sum\n        min1 = b[n-1] - b[idx2]\n\n        max2 = b[n-1] - b[idx2-1]\n        min2 = b[idx2-1] - front_i_sum\n\n        if max1 - min1 >= max2 - min2:\n            max_s = max2\n            min_s = min2\n        else:\n            max_s = max1\n            min_s = min1\n    \n    return max(max_fisrt, max_s) - min(min_first, min_s)\n\n\ndef solve():\n    a = f()\n    b = list(accumulate(a))\n\n    ans = int(2e14)\n    for i in range(1, n-2):\n        ans = min(ans, get_mid(b, i))\n\n    print(ans)\n\n\n\n\nsolve()\n", "import sys\n\n\ndef cumsum(li):\n    ret = [0]\n    sum = 0\n    for i in li:\n        sum += i\n        ret.append(sum)\n    return ret\n\n\nsys.setrecursionlimit(10000)\nINF = float('inf')\n\nN = int(input())\nA = list(map(int, input().split()))\n# \u6700\u521d\u304c0\ncs = cumsum(A)\nassert len(cs) == N + 1\n\n\ndef calc_diff(d1, d2, d3):\n    diffs = [\n        cs[d1] - cs[0],\n        cs[d2] - cs[d1],\n        cs[d3] - cs[d2],\n        cs[N] - cs[d3]\n    ]\n    return max(diffs) - min(diffs)\n\n\n# \u5207\u308b\u4f4d\u7f6e\n# dn: n \u756a\u76ee\u306e\u6570\u5217\u306e\u958b\u59cb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\nd0 = 0\nd1 = 1\nd2 = 2\nd3 = 3\nd4 = N\nans = INF\nwhile d2 < d4 - 1:\n    d012 = abs((cs[d1] - cs[d0]) - (cs[d2] - cs[d1]))\n    while d1 < d2 - 1 and d012 > abs((cs[d1 + 1] - cs[d0]) - (cs[d2] - cs[d1 + 1])):\n        d1 += 1\n        d012 = abs((cs[d1] - cs[d0]) - (cs[d2] - cs[d1]))\n    d234 = abs((cs[d3] - cs[d2]) - (cs[d4] - cs[d3]))\n    while d3 < d4 - 1 and d234 > abs((cs[d3 + 1] - cs[d2]) - (cs[d4] - cs[d3 + 1])):\n        d3 += 1\n        d234 = abs((cs[d3] - cs[d2]) - (cs[d4] - cs[d3]))\n    ans = min(ans, calc_diff(d1, d2, d3))\n    d2 += 1\n\nprint(ans)\n", "from itertools import accumulate\nfrom bisect import bisect_left\n\nN = int(input())\nA = [int(s) for s in input().split()]\nS = [0] + list(accumulate(A))\n\n\ndef score(i, j, k):\n    mx = max(S[i], S[j] - S[i], S[k] - S[j], S[N] - S[k])\n    mn = min(S[i], S[j] - S[i], S[k] - S[j], S[N] - S[k])\n    return mx - mn\n\n\nans = float(\"inf\")\ni = 1\nk = 3\nfor j in range(2, N - 1):\n    while i < j - 1 and abs(S[j] - 2 * S[i]) > abs(S[j] - 2 * S[i+1]):\n        i += 1\n    while k <= j or k < N - 1 and abs(S[N] - 2 * S[k] + S[j]) > abs(S[N] - 2 * S[k+1] + S[j]):\n        k += 1\n    mx = max(S[i], S[j] - S[i], S[k] - S[j], S[N] - S[k])\n    mn = min(S[i], S[j] - S[i], S[k] - S[j], S[N] - S[k])\n    ans = min(ans, mx - mn)\nprint(ans)\n", "# D - Equal Cut\nimport bisect\n\nN = int(input())\nA = list(int(a) for a in input().split())\n\nAcum = [0] * (N+1)\nfor i in range(N):\n    Acum[i+1] = Acum[i] + A[i]\n\nans = 10**18\nfor i in range(2, N-1):\n    B = bisect.bisect_left(Acum, Acum[i]//2) - 1\n    if abs(Acum[B] * 2 - Acum[i]) > abs(Acum[B+1] * 2 - Acum[i]):\n        B += 1\n    if B == i:\n        B -= 1\n    elif B == 0:\n        B += 1\n    P = Acum[B]\n    Q = Acum[i] - Acum[B]\n    D = bisect.bisect_left(Acum, Acum[i] + (Acum[-1]-Acum[i])//2) - 1\n    if abs(Acum[D] * 2 - Acum[i] - Acum[-1]) > abs(Acum[D+1] * 2 - Acum[i] - Acum[-1]):\n        D += 1\n    if D == N:\n        D -= 1\n    elif D == i:\n        D += 1\n    R = Acum[D] - Acum[i]\n    S = Acum[-1] - Acum[D]\n    mi = min(P, Q, R, S)\n    ma = max(P, Q, R, S)\n    ans = min(ans, abs(ma - mi))\nprint(ans)", "from statistics import mean\n\nN = int(input())\nA = list(map(int, input().split()))\n\nS = [A[0]]\nfor i in range(1, N):\n    S.append(S[i - 1] + A[i])   \n\nleft_middle = 0\nright_middle = 2\n\nans = float('inf')\n\nfor middle in range(1, N - 2):\n    left_sum = S[left_middle]\n    right_sum = S[middle] - left_sum\n    diff = abs(left_sum - right_sum)\n\n    for i in range(left_middle+1, middle):\n        left_sum = S[i]\n        right_sum = S[middle] - left_sum\n        if diff > abs(left_sum - right_sum):\n            left_middle = i\n            diff = abs(left_sum - right_sum)\n        else:\n            break\n    \n    left_sum = S[right_middle] - S[middle]\n    right_sum = S[-1] - S[right_middle]\n    diff = abs(left_sum - right_sum)\n\n    for i in range(right_middle + 1, N):\n        left_sum = S[i] - S[middle]\n        right_sum = S[-1] - S[i]\n        if diff > abs(left_sum - right_sum):\n            right_middle = i\n            diff = abs(left_sum - right_sum)\n        else:\n            break\n    \n    s1 = S[left_middle]\n    s2 = S[middle] - s1\n    s3 = S[right_middle] - s1 - s2\n    s4 = S[-1] - s1 - s2 - s3\n\n    score = max(s1, s2, s3, s4) - min(s1, s2, s3, s4)\n    ans = min(ans, score)\n\nprint(ans)\n        \n", "from itertools import accumulate as ac\nn=int(input())\ns=list(ac(list(map(int,input().split()))))\nc=0\nd=2\nf=s[-1]\nk=f\nfor i in range(1,n-1):\n    while s[i]>s[c]+s[c+1]:\n        c+=1\n    while s[i]+f>s[d]+s[d+1]:\n        d+=1\n    j=[s[c],s[i]-s[c],s[d]-s[i],f-s[d]]\n    k=min(max(j)-min(j),k)\nprint(k)", "from itertools import accumulate\n\n\ndef solve(string):\n    n, *a = list(map(int, string.split()))\n    *a, = accumulate(a)\n    l, r, e = 0, 2, a[-1]\n    ans = e\n    for c in a[1:-2]:\n        while a[l] + a[l + 1] < c:\n            l += 1\n        while a[r] + a[r + 1] < c + e:\n            r += 1\n        tmp = sorted([a[l], c - a[l], a[r] - c, e - a[r]])\n        ans = min(ans, tmp[-1] - tmp[0])\n    return str(ans)\n\n\ndef __starting_point():\n    print((solve('\\n'.join([input(), input()]))))\n\n__starting_point()", "N = int(input())\nA_list = [int(i) for i in input().split()]\n\nTotal_list = []\ns = 0\nfor num in A_list:\n  s += num\n  Total_list.append(s)\n\nL = 0\nR = 2\nans = Total_list[N-1]+1\nfor Mid in range(1, N-2):\n  sum_L = Total_list[Mid]\n  sum_R = Total_list[N-1] - sum_L\n\n  while abs(sum_L - 2*Total_list[L]) > abs(sum_L - 2*Total_list[L+1]):\n    L += 1\n  \n  while abs((Total_list[N-1]-Total_list[R])-(Total_list[R] - sum_L)) > abs((Total_list[N-1]-Total_list[R+1])-(Total_list[R+1] - sum_L)):\n    R += 1\n  \n  P = Total_list[L]\n  Q = sum_L - Total_list[L]\n  S = Total_list[R] - sum_L\n  T = Total_list[N-1] - Total_list[R]\n\n  ans = min(ans, max(P, Q, S, T) - min(P, Q, S, T))\n\nprint(ans)\n", "n,*a=map(int,open(0).read().split())\nfor i in range(n-1):a[i+1]+=a[i]\nj,k,m=0,2,1e18\nfor i in range(1,n-1):\n while abs(a[j]*2-a[i])>abs(a[j+1]*2-a[i]):j+=1\n while abs(a[k]*2-a[i]-a[n-1])>abs(a[k+1]*2-a[i]-a[n-1]):k+=1\n t=a[j],a[i]-a[j],a[k]-a[i],a[n-1]-a[k];m=min(m,max(t)-min(t))\nprint(m)", "from bisect import bisect_right, bisect_left\nfrom itertools import accumulate\n\nN = int(input())\nA = list(map(int, input().split()))\nA = [0] + A\na = list(accumulate(A))\nanswer = a[-1]\n\n# \u5207\u308a\u53e3\u306fN-1\u500b, \u771f\u3093\u4e2d\u306e\u9078\u3073\u65b9\u306fN-3\nfor i in range(N - 3):\n    left = a[i + 2]\n    right = a[-1] - left\n    p = bisect_left(a, left // 2)\n    P1 = a[p]\n    Q1 = left - P1\n    P2 = a[p - 1]\n    Q2 = left - P2\n    if abs(P1 - Q1) <= abs(P2 - Q2):\n        P = P1\n        Q = Q1\n    else:\n        P = P2\n        Q = Q2\n\n    s = bisect_right(a, a[-1] - right // 2)\n    S1 = a[-1] - a[s - 1]\n    R1 = right - S1\n    S2 = a[-1] - a[s]\n    R2 = right - S2\n    if abs(S1 - R1) <= abs(S2 - R2):\n        S = S1\n        R = R1\n    else:\n        S = S2\n        R = R2\n\n    answer = min(answer, max(P, Q, R, S) - min(P, Q, R, S))\n\nprint(answer)", "#!/usr/bin/env python3\n\nfrom itertools import accumulate, islice\nfrom bisect import bisect_left\n\nn = int(input())\nxs = list(map(int, input().split()))\n\nys = list(accumulate(xs))\nzs, total = ys[:-1], ys[-1]\n\nres = max(xs) - min(xs)\nfor i, z in islice(enumerate(zs), 1, n-1):\n    j = bisect_left(zs, z//2)\n    splits = ((zs[j+k], z - zs[j+k]) for k in (-1, 0, 1) if 0 <= j+k <= i)\n    a, b = min(splits, key=lambda s: abs(s[0]-s[1]))\n\n    j = bisect_left(zs, (total - z)//2 + z)\n    splits = ((zs[j+k] - z, total - zs[j+k])\n              for k in (-1, 0, 1) if i <= j+k <= n-2)\n    c, d = min(splits, key=lambda s: abs(s[0]-s[1]))\n\n    minn, _, _, maxx = sorted((a, b, c, d))\n    if maxx - minn < res:\n        res = maxx - minn\n\nprint(res)\n", "N = int(input())\nA = tuple(map(int, input().split()))\n\nfrom itertools import accumulate\nCA = list(accumulate(A))\n\nmindiff = CA[-1]\nleft = 0\nright = 2\nfor c in range(1,N-1):\n    # left side\n    p = CA[left]\n    q = CA[c] - CA[left]\n    while True:\n        pi = CA[left+1]\n        qi = CA[c] - CA[left+1]\n        if abs(pi- qi) >= abs(p - q):\n            break\n        p = pi; q = qi\n        left += 1\n\n    # right side\n    r = CA[right] - CA[c]\n    s = CA[-1] - CA[right]\n    while True:\n        ri = CA[right+1] - CA[c]\n        si = CA[-1] - CA[right+1]\n        if abs(ri- si) >= abs(r - s):\n            break\n        r = ri; s = si\n        right += 1\n\n    mindiff = min(mindiff, max(p, q, r, s) - min(p, q, r, s))\nprint(mindiff)", "from itertools import accumulate\nfrom bisect import bisect_left\n\nn = int(input())\na = list(map(int, input().split()))\ns = list(accumulate(a))\n\nans = float(\"inf\")\n\nfor j in range(2,n-1):\n    i_list = []\n    i_left = bisect_left(s, s[j-1]//2)-1\n    if i_left != -1:\n        i_list.append([s[i_left], s[j-1]-s[i_left]])\n    if i_left != j-2:\n        i_list.append([s[i_left+1], s[j-1]-s[i_left+1]])\n\n    k_list = []\n    k_left = bisect_left(s, s[j-1]+(s[-1]-s[j-1])//2)-1\n    if k_left != j-1:\n        k_list.append([s[k_left] - s[j-1], s[-1]-s[k_left]])\n    if k_left != n-2:\n        k_list.append([s[k_left+1] - s[j-1], s[-1]-s[k_left+1]])\n    for i in i_list:\n        for k in k_list:\n            tmp = max(i+k)-min(i+k)\n            ans = min(ans, tmp)\nprint(ans)", "N = int(input())\nA = [0]*N\nS = 0\nfor i,a in enumerate(input().split()):\n  S += int(a)\n  A[i] = S\n\nanswer = S\n\n# index \u306f\u6700\u5f8c\u306b\u56de\u53ce\u3059\u308b\u756a\u53f7\u3067\u7ba1\u7406\nB = 0\nD = 2\n\nfor C in range(1,N-2):\n  D = max(D,C+1)\n  SB = A[B]\n  SC = A[C] - A[B]\n  SD = A[D] - A[C]\n  SE = S - A[D]\n  left_score = abs(SB - SC)\n  # BC\u306e\u5883\u754c\u306e\u8abf\u6574\n  while True:\n    B_ = B+1\n    SB_ = A[B_]\n    SC_ = A[C] - SB_\n    x = abs(SB_ - SC_)\n    if left_score > x:\n      B,SB,SC,left_score = B_,SB_,SC_,x\n      continue\n    break\n  right_score = abs(SD-SE)\n  # DE\u306e\u5883\u754c\u306e\u8abf\u6574\n  while True:\n    D_ = D+1\n    SD_ = A[D_] - A[C]\n    SE_ = S - A[D_]\n    x = abs(SD_ - SE_)\n    if right_score > x:\n      D,SD,SE,right_score = D_,SD_,SE_,x\n      continue\n    break\n  score = max(SB,SC,SD,SE) - min(SB,SC,SD,SE)\n  answer = min(answer,score)\n  \nprint(answer)\n", "N = int(input())\nA = list(map(int,input().split()))\n\nS = [0]\nfor i,a in enumerate(A,1):\n    S.append(S[i-1]+a)\nSn = S[-1]\nans = Sn\n\ni0 = 1\nk0 = 3\nfor j in range(2,N-1):\n    tmpS = S[j]\n    for i in range(i0,j):\n        if S[i] > tmpS/2:\n            break\n    i -= abs(tmpS - S[i] - S[i]) > abs(tmpS - S[i-1] - S[i-1])\n    i0 = i\n    for k in range(k0,N):\n        if S[k]-tmpS > (Sn-tmpS)/2:\n            break\n    k -= abs(Sn-S[k] - S[k] + tmpS) > abs(Sn - S[k-1] - S[k-1] + tmpS)\n    k0 = k\n    P = (S[i],S[j]-S[i],S[k]-S[j],S[-1]-S[k])\n    ans = min(ans,max(P)-min(P))\nprint(ans)", "n = int(input())\nA = list(map(int, input().split()))\n\ncumsum_A = []\ncumsum = 0\nfor a in A:\n    cumsum += a\n    cumsum_A.append(cumsum)\n\nans = float('INF')\nleft = 0\nright = 2\n\nfor center in range(1, n-2):\n    ll_value = cumsum_A[left]\n    lc_value = cumsum_A[center] - ll_value\n    cr_value = cumsum_A[right] - cumsum_A[center]\n    rr_value = cumsum_A[-1] - cumsum_A[right]\n\n    while abs(ll_value - lc_value) > abs(ll_value - lc_value + 2*A[left+1]):\n        if left == center - 1:\n            break\n        left += 1\n        ll_value += A[left]\n        lc_value -= A[left]\n\n    while abs(cr_value - rr_value) > abs(cr_value - rr_value + 2 * A[right + 1]):\n        if right == n - 2:\n            break\n        right += 1\n        cr_value += A[right]\n        rr_value -= A[right]\n\n    candidate = max(ll_value, lc_value, cr_value, rr_value) - min(ll_value, lc_value, cr_value, rr_value)\n    ans = min(ans, candidate)\n\nprint(ans)\n", "from itertools import accumulate, islice\nfrom bisect import bisect_left\n \nn = int(input())\nxs = [int(x) for x in input().split()]\n \nys = list(accumulate(xs))\nzs, total = ys[:-1], ys[-1]\n \nres = max(xs) - min(xs)\nfor i, z in islice(enumerate(zs), 1, n-1):\n    j = bisect_left(zs, z//2)\n    splits = ((zs[j+k], z - zs[j+k]) for k in (-1, 0, 1) if 0 <= j+k <= i)\n    a, b = min(splits, key=lambda s:abs(s[0]-s[1]))\n \n    j = bisect_left(zs, (total - z)//2 + z)\n    splits = ((zs[j+k] - z, total - zs[j+k]) for k in (-1, 0, 1) if i <= j+k <= n-2)\n    c, d = min(splits, key=lambda s:abs(s[0]-s[1]))\n \n    minn, _, _, maxx = sorted((a,b,c,d))\n    if maxx - minn < res:\n        res = maxx - minn\n \nprint(res)", "n=int(input())\nA=[int(i) for i in input().split()]\nAA=[A[0]]\nfor i in range(1,n):\n  AA.append(AA[-1]+A[i])\ntot=AA[-1]\nimport bisect\nans=float(\"inf\")\nfor i in range(1,n-2):\n  cur=AA[i]\n  l=bisect.bisect_left(AA,cur//2)\n  if l==0:\n    L1=[0,float(\"inf\")]\n  else:\n    L1=[AA[l-1],cur-AA[l-1]]\n  L2=[AA[l],cur-AA[l]]\n  \n  r=bisect.bisect_left(AA,cur+(tot-cur)//2)\n  if r-1==i:\n    R1=[0,float(\"inf\")]\n  else:\n    R1=[AA[r-1]-cur,tot-AA[r-1]]\n  R2=[AA[r]-cur,tot-AA[r]]\n  A11=L1+R1\n  A12=L1+R2\n  A21=L2+R1\n  A22=L2+R2\n  a11=max(A11)-min(A11)\n  a12=max(A12)-min(A12)\n  a21=max(A21)-min(A21)\n  a22=max(A22)-min(A22)\n\n  ans=min(ans,a11,a12,a21,a22)\nprint(ans)", "from itertools import accumulate\nfrom bisect import bisect_left\n\ndef main():\n    N, *A = list(map(int, open(0).read().split()))\n\n    A = [0] + list(accumulate(A))\n\n    ans = float(\"inf\")\n    for i in range(2, N - 1):\n        lm = A[i] // 2\n        l = bisect_left(A, lm)\n        if abs(A[l - 1] - lm) < abs(A[l] - lm):\n            l -= 1\n\n        rm = (A[i] + A[N]) // 2\n        r = bisect_left(A, rm)\n        if abs(A[r - 1] - rm) < abs(A[r] - rm):\n            r -= 1\n\n        P = A[l]\n        Q = A[i] - A[l]\n        R = A[r] - A[i]\n        S = A[N] - A[r]\n\n        ans = min(ans, max(P, Q, R, S) - min(P, Q, R, S))\n\n    print(ans)\n\nmain()\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    S = [0] * len(A)\n    s = 0\n    for i, a in enumerate(A):\n        s += a\n        S[i] = s \n    l = 0\n    b = 2\n    m = S[-1]\n    for c in range(1, N - 2):\n        p, q = S[l], S[c] - S[l]\n        while l + 1 < c:\n            pn, qn = S[l + 1], S[c] - S[l + 1]\n            if abs(pn - qn) >= abs(p - q):\n                break\n            p, q = pn, qn\n            l += 1\n        if b <= c:\n            b = c + 1\n        r, s = S[b] - S[c], S[-1] - S[b]\n        while b + 1 < N - 1:\n            rn, sn = S[b + 1] - S[c], S[-1] - S[b + 1]\n            if abs(rn - sn) >= abs(r - s):\n                break\n            r, s = rn, sn\n            b += 1\n        m = min(m, max(p, q, r, s) - min(p, q, r, s))\n    return m\n\n\nprint((main()))\n", "import sys\nfrom itertools import accumulate\n\nn, *a = map(int, sys.stdin.read().split())\n\ndef main():\n    ans = float('inf')\n    left = 0; right = 2\n    p = a[0]; q = 0; r = sum(a[1:3]); s = sum(a[3:])\n    for c in range(1, n-2):\n        q += a[c]; r -= a[c]\n        while left < c - 1:\n            nex = a[left+1]\n            if abs((q - nex) - (p + nex)) <= abs(q - p):\n                q -= nex; p += nex\n                left += 1\n            else:\n                break  \n        \n        while right < n - 2:\n            nex = a[right+1]\n            if abs((s - nex) - (r + nex)) <= abs(s - r):\n                s -= nex; r += nex\n                right += 1\n            else:\n                break\n\n        res = sorted([p, q, r, s])\n        ans = min(ans, res[-1] - res[0])\n\n    return ans\n\ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "from bisect import bisect_left\nn=int(input())\na=list(map(int,input().split()))\nbl=[0]\nfor i in a:bl.append(bl[-1]+i)\nbr=[0]\nfor i in a[::-1]:br.append(br[-1]+i)\ndef fl(r):\n  suma=bl[r+1]\n  ir=bisect_left(bl,suma//2)\n  ans11,ans12=bl[ir],suma-bl[ir]\n  ans21,ans22=bl[ir-1],suma-bl[ir-1]\n  if abs(ans11-ans12)<abs(ans21-ans22):return[ans11,ans12]\n  else:return[ans21,ans22]\ndef fr(l):\n  r=(n-1)-l\n  suma=br[r+1]\n  ir=bisect_left(br,suma//2)\n  ans11,ans12=br[ir],suma-br[ir]\n  ans21,ans22=br[ir-1],suma-br[ir-1]\n  if abs(ans11-ans12)<abs(ans21-ans22):return[ans11,ans12]\n  else:return[ans21,ans22]\nans=10**20\nfor i in range(1,n-1):\n  l=i\n  r=i+1\n  ll,lr=fl(i)\n  rl,rr=fr(i+1)\n  ans=min(ans,max(ll,lr,rl,rr)-min(ll,lr,rl,rr))\nprint(ans)", "def main():\n    from bisect import bisect_left\n\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # cumulative sum\n    # cs[i] = sum(a[:i+1])\n    cs = [0] * n\n    for i in range(n):\n        cs[i] = cs[i-1] + a[i]\n\n    # search all possible indexes of middle split\n    ans = 10**15\n    for middle in range(2, n-1):\n        # first_half = a[:middle]\n        first = bisect_left(cs, cs[middle-1]//2, lo=1, hi=middle)\n        if abs((cs[middle-1] - cs[first-1]) - cs[first-1]) < abs((cs[middle-1] - cs[first]) - cs[first]):\n            p = cs[first-1]\n            q = cs[middle-1] - cs[first-1]\n        else:\n            p = cs[first]\n            q = cs[middle-1] - cs[first]\n\n        # latter_half = a[middle:]\n        last = bisect_left(cs, (cs[-1] + cs[middle-1])//2, lo=middle+1, hi=n)\n        if abs((cs[-1] - cs[last-1]) - (cs[last-1] - cs[middle-1])) < abs((cs[-1] - cs[last]) - (cs[last] - cs[middle-1])):\n            r = cs[last-1] - cs[middle-1]\n            s = cs[-1] - cs[last-1]\n        else:\n            r = cs[last] - cs[middle-1]\n            s = cs[-1] - cs[last]\n        \n        diff = max(p, q, r, s) - min(p, q, r, s)\n        if diff < ans:\n            ans = diff\n    \n    print(ans)\n\nmain()", "N=int(input())\nA=list(map(int,input().split()))\ntmp=0\nlr=[0]\nfor a in A:\n  tmp+=a\n  lr.append(tmp)\n\nans=float('inf')\n\nf,g=1,3\nfor i in range(2,N-1):\n  while abs(lr[i]-lr[f]-lr[f])>abs(lr[i]-lr[f+1]-lr[f+1]):\n    f+=1\n  while abs((lr[-1]-lr[g])-(lr[g]-lr[i]))>abs((lr[-1]-lr[g+1])-(lr[g+1]-lr[i])):\n    g+=1\n  l=(lr[f],lr[i]-lr[f],lr[-1]-lr[g],lr[g]-lr[i])\n  ans=min(ans,max(l)-min(l))\n\nprint(ans)", "from itertools import accumulate\nN = int(input())\nA = list(map(int, input().split()))\n\nX = list(accumulate(A))\n\n# A[:m]\u3092\u3067\u304d\u308b\u3060\u3051\u5747\u7b49\u306b\u3001A[:l + 1], A[l + 1:]\u306b\u5206\u3051\u308b\u3088\u3046\u306al\u3092\u63a2\u3059\nl = 0\nL = [-1] * N\nfor m in range(2, N - 1):\n    target = X[m - 1] / 2\n    while (l + 1 <= m) and abs(target - X[l]) >= abs(target - X[l + 1]):\n        l += 1\n    L[m] = l\n\n# A[m:]\u3092\u3067\u304d\u308b\u3060\u3051\u5747\u7b49\u306b\u3001A[:r + 1], A[r + 1:]\u306b\u5206\u3051\u308b\u3088\u3046\u306ar\u3092\u63a2\u3059\nr = N - 1\nr_sum = 0\nR = [-1] * N\nfor m in reversed(list(range(2, N - 1))):\n    target = (X[-1] - X[m - 1]) / 2\n    while (r - 1 >= m) and abs((target - r_sum)) >= abs((target - (r_sum + A[r]))):\n        r_sum += A[r]\n        r -= 1\n    R[m] = r\n\nans = float('inf')\nfor m in range(2, N - 1):\n    li, ri = L[m], R[m]\n    B, C, D, E = X[li], X[m - 1] - X[li], X[ri] - X[m - 1], X[-1] - X[ri]\n    ans = min(ans, max(B, C, D, E) - min(B, C, D, E))\n\nprint(ans)\n", "n = int(input())\na = list(map(int,input().split()))\n\nleft = []\nnow = a[0]\nle = 1\ns = a[0]\nfor i in range(1,n):\n    s += a[i]\n    while le < i and abs(2*now-s) > abs(2*now+2*a[le]-s):\n        now += a[le]\n        le += 1\n    left.append([now,s-now])\n\nright = []\nnow = a[-1]\nri = 2\ns = a[-1]\nfor i in range(2,n+1):\n    s += a[-i]\n    \n    while ri < i and abs(2*now-s) > abs(2*now+2*a[-ri]-s):\n        now += a[-ri]\n        ri += 1\n    right.append([now,s-now])\n\nans = float(\"INF\")\nfor i in range(n-3):\n    a,b = left[i]\n    c,d = right[n-4-i]\n    ans = min(ans,max(a,b,c,d)-min(a,b,c,d))\nprint(ans)", "from itertools import accumulate\nfrom bisect import bisect_left\n\nN, *A = list(map(int, open(0).read().split()))\n\nA = [0] + list(accumulate(A))\n\nans = float(\"inf\")\nfor i in range(2, N - 1):\n    lm = A[i] // 2\n    l = bisect_left(A, lm)\n    if abs(A[l - 1] - lm) < abs(A[l] - lm):\n        l -= 1\n\n    rm = (A[i] + A[N]) // 2\n    r = bisect_left(A, rm)\n    if abs(A[r - 1] - rm) < abs(A[r] - rm):\n        r -= 1\n\n    P = A[l]\n    Q = A[i] - A[l]\n    R = A[r] - A[i]\n    S = A[N] - A[r]\n\n    ans = min(ans, max(P, Q, R, S) - min(P, Q, R, S))\n\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    F = [int()] * n\n    F[0] = A[0]\n    for b in range(1, n):\n        F[b] = F[b - 1] + A[b]\n\n    res = [0]*4\n    data = [10 ** 18] * 2\n    ex = [0]*4\n    ans = 10 ** 18\n    s = 0\n    t = 2\n    for i in range(1, n - 2):\n        bl = [True, True]\n        for j in range(s, i):\n            res[0] = F[j]\n            res[1] = F[i] - F[j]\n            if not bl[0]:\n                break\n            if data[0] > abs(res[1] - res[0]) or j == s:\n                s = j\n                ex[0] = res[0]\n                ex[1] = res[1]\n                data[0] = abs(res[1] - res[0])\n            else:\n                bl[0] = False\n        for k in range(t, n):\n            res[2] = F[k] - F[i]\n            res[3] = F[n - 1] - F[k]\n            if not bl[1]:\n                break\n            if data[1] > abs(res[3] - res[2]) or k == t:\n                t = k\n                ex[2] = res[2]\n                ex[3] = res[3]\n                data[1] = abs(res[3] - res[2])\n            else:\n                bl[1] = False\n        ans = min(ans, max(ex) - min(ex))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom itertools import accumulate\nfrom bisect import bisect_left as bi_l\n\nn, *a = map(int, sys.stdin.read().split())\n\ndef main():\n    s = list(accumulate(a))\n\n    ans = float('inf')\n    for center in range(1, n-2):\n        pq = s[center]\n        left = bi_l(s, pq / 2)\n        if left == 0:\n            p = s[0]\n        else:\n            if pq - s[left] < s[left-1]:\n                left -= 1\n            p = s[left]\n        q = pq - p\n\n        rt = s[-1] - pq\n        right = bi_l(s, pq + rt / 2)\n        if right == center + 1:\n            r = s[center+1] - pq\n        else:\n            if rt - (s[right] - pq) < s[right-1] - pq:\n                right -= 1\n            r = s[right] - pq\n        t = rt - r\n\n        res = sorted([p, q, r, t])\n        ans = min(ans, res[-1] - res[0])\n\n    return ans\n\ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "import bisect\nfrom collections import deque\nn=int(input())\nA=list(map(int,input().split()))\nS=[A[0]]\nfor i in range(n-1):\n  S.append(S[-1]+A[i+1])\nans=10**15\nA1=deque([A[0]])\nA2=deque(A[1:n])\nfor i in range(2,n-1):\n  A1.append(A[i-1])\n  A2.popleft()\n  if len(A1)==2:\n    M1=max(A1)\n    m1=min(A1)\n  else:\n    x=bisect.bisect_left(S,S[i-1]//2,lo=0,hi=i+1)\n    M11=max(S[x-1],S[i-1]-S[x-1])\n    m11=min(S[x-1],S[i-1]-S[x-1])\n    M12=max(S[x],S[i-1]-S[x])\n    m12=min(S[x],S[i-1]-S[x])\n    M1=min(M11,M12)\n    m1=max(m11,m12)\n  if len(A2)==2:\n    M2=max(A2)\n    m2=min(A2)\n  else:\n    x=bisect.bisect_left(S,S[i-1]+(S[-1]-S[i-1])//2,lo=0,hi=n)\n    M21=max(S[x-1]-S[i-1],S[-1]-S[x-1])\n    m21=min(S[x-1]-S[i-1],S[-1]-S[x-1])\n    M22=max(S[x]-S[i-1],S[-1]-S[x])\n    m22=min(S[x]-S[i-1],S[-1]-S[x])\n    M2=min(M21,M22)\n    m2=max(m21,m22)\n  a=max(M1,M2)-min(m1,m2)\n  if a<ans:\n    ans=a\nprint(ans)", "from itertools import *\nN = int(input())\nA = list(accumulate(map(int,input().split())))\nl = 0\nr = 2\nt = A[-1]\na = t\n\nfor m in A[1:-2]:\n  while abs(t-2*A[r]+m)>abs(t-2*A[r+1]+m):\n    r+=1\n  while abs(m-2*A[l])>abs(m-2*A[l+1]):\n    l+=1\n  x = sorted([A[l],m-A[l],A[r]-m,t-A[r]])\n  a = min(a,x[3]-x[0])\n\nprint(a)", "n=int(input())\na=list(map(int,input().split()))\naccuml=[0]*n\naccumr=[0]*n\naccuml[0]=a[0]\naccumr[0]=a[n-1]\nfor i in range(n-1):\n    accuml[i+1]+=a[i+1]+accuml[i]\n    accumr[i+1]+=a[n-i-2]+accumr[i]\nll=0\nrr=n-3\nans=10**18\nfor i in range(1,n-2):\n    sl=accuml[i]\n    sr=accumr[n-2-i]\n    while abs(accuml[ll+1]-sl/2)<abs(accuml[ll]-sl/2):\n        ll+=1\n    while abs(accumr[rr-1]-sr/2)<abs(accumr[rr]-sr/2):\n        rr-=1\n    maxi=max(sl-accuml[ll],accuml[ll],sr-accumr[rr],accumr[rr])\n    mini=min(sl-accuml[ll],accuml[ll],sr-accumr[rr],accumr[rr])\n    ans=min(ans,maxi-mini)\nprint(ans)", "import sys\nsys.setrecursionlimit(100000000)\ninput = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = 10 ** 15\nfrom itertools import accumulate\n\ndef main():\n    N = int(input())\n    A = list(map(int,input().split()))\n    cumsum = list(accumulate([0] + A))\n    ans = INF\n    l = 0\n    r = 2\n    fl = lambda i,l:abs(cumsum[i + 1] - 2*cumsum[l + 1])\n    fr = lambda i,r:abs(cumsum[-1] - cumsum[i + 1] - 2*(cumsum[r + 1] - cumsum[i + 1]))\n\n    for i in range(1,N - 2):\n        while fl(i,l + 1) < fl(i,l):\n            l += 1\n        while fr(i,r + 1) < fr(i,r):\n            r += 1\n        a = cumsum[l + 1]\n        b = cumsum[i + 1] - a\n        c = cumsum[r + 1] - a - b\n        d = cumsum[-1] - a - b - c\n        ans = min(ans,max(a,b,c,d) - min(a,b,c,d))\n    print(ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nAs = list(map(int, input().split()))\n\nans = float('inf')\niB, iD = 1, 3\n(P, Q, R), S = As[:3], sum(As[3:])\n\n# \u771f\u3093\u4e2d\u306e\u533a\u5207\u308a\u3092\u5168\u901a\u308a\u8a66\u3059\nfor iC in range(2, N - 1):\n    while P < Q and As[iB] <= Q - P:\n        P += As[iB]\n        Q -= As[iB]\n        iB += 1\n\n    while R < S and As[iD] <= S - R:\n        R += As[iD]\n        S -= As[iD]\n        iD += 1\n\n    ans = min(ans, max(P, Q, R, S) - min(P, Q, R, S))\n\n    Q += As[iC]\n    R -= As[iC]\n\nprint(ans)", "n=int(input())\nA=list(map(int,input().split()))\nS=[0] #\u7d2f\u7a4d\u548c\ncnt=0\nfor i in range(n):\n    cnt+=A[i]\n    S.append(cnt)\n\nans=S[n]\nd1=1 #\u3057\u304d\u308a1(i\u500b\u76ee\u306e\u53f3\u3067\u5207\u308b)\nd3=2 #\u3057\u304d\u308a3\n\nfor d2 in range(2,n-1): #\u3057\u304d\u308a2\u3092\u5168\u63a2\u7d22\n    L=S[d2]\n    R=S[n]-S[d2]\n    for i in range(d1,d2): #\u3057\u304d\u308a1\u3092\u53f3\u306b\u52d5\u304b\u3059\n        if S[i]>=L/2:\n            break\n    if abs(S[i]-L/2)>=abs(S[i-1]-L/2): #\u3057\u304d\u308a1\u3092\u66f4\u65b0\n        d1=i-1\n    else:\n        d1=i\n    for i in range(d3,n): #\u3057\u304d\u308a3\u3092\u53f3\u306b\u52d5\u304b\u3059\n        if S[i]-S[d2]>=R/2:\n            break\n    if abs(S[i]-S[d2]-R/2)>=abs(S[i-1]-S[d2]-R/2): #\u3057\u304d\u308a3\u3092\u66f4\u65b0\n        d3=i-1\n    else:\n        d3=i\n    s=[S[d1],S[d2]-S[d1],S[d3]-S[d2],S[n]-S[d3]] #4\u5206\u5272\u306e\u7d50\u679c\n    ans=min(max(s)-min(s),ans) #\u89e3\u7b54\u306e\u66f4\u65b0\n    #print(d1,d2,d3,s)\nprint(ans)", "# coding: utf-8\n# Your code here!\n\nimport sys\nsys.setrecursionlimit(10**6)\nreadline = sys.stdin.readline\n\n#n,x = [int(i) for i in readline().split()]\n#h,w = [int(i) for i in readline().split()]\nn = int(input())\na = [int(i) for i in readline().split()]\n\nfrom itertools import accumulate\nacc = list(accumulate([0]+a))\n\nj = 1\nk = 3\nans = 10**18\nfor i in range(2,n):\n    c = acc[i]//2\n    while j < i-1 and acc[j] < c:\n        j += 1\n\n    c = (acc[-1]-acc[i])//2\n    while k < n-1 and acc[k]-acc[i] < c:\n        k += 1\n\n    for jj in range(2):\n        for kk in range(2):\n            l = (acc[j-jj],acc[i]-acc[j-jj], acc[-1]-acc[k-kk], acc[k-kk]-acc[i])\n            res = max(l) - min(l)\n            ans = min(ans, res)\n\n    \nprint(ans)   \n    \n    \n    \n    \n\n\n\n\n", "from itertools import accumulate as acc\nfrom bisect import bisect_left as bl\n\ndef ans(n):\n    tmp=0\n    for i in range(N):\n        tmp+=abs(a[i]-a[n-1])\n    return tmp\n\n\nN=int(input())\na=list(map(int,input().split()))\na=list(acc(a))\n\nans=10**18\nfor j in range(1,N-2):\n    x=a[j]/2\n    p=bl(a,x)\n    if p==j: p-=1\n    elif p>0 and x-a[p-1]<a[p]-x: p-=1\n\n    y=(a[j]+a[N-1])/2\n\n    q=bl(a,y)\n    if q==N-1: q-=1\n    elif q>j+1 and y-a[q-1]<a[q]-y: q-=1\n\n    P,Q,R,S=a[p], a[j]-a[p], a[q]-a[j], a[N-1]-a[q]\n    ans=min(ans, max(P,Q,R,S)-min(P,Q,R,S))\n\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\n\nfrom itertools import accumulate\n\ns = list(accumulate(a))\n#s = [a[0]]\n#for i in range(1, n):\n#    s.append(a[i] + s[i-1])\n\nl = 0\nr = 2\nans = float(\"inf\")\n\nfor m in range(1, n-1):\n    while l < m - 1 and abs(s[m] - 2 * s[l]) > abs(s[m] - 2 * s[l+1]):\n        l += 1\n    while r <= m or r < n - 1 and abs(s[n-1] - 2 * s[r] + s[m]) > abs(s[n-1] - 2 * s[r+1] + s[m]):\n        r += 1\n    mx = max(s[l], s[m] - s[l], s[r] - s[m], s[n-1] - s[r])\n    mn = min(s[l], s[m] - s[l], s[r] - s[m], s[n-1] - s[r])\n    ans = min(ans, mx - mn)\n\nprint(ans)\n", "#\u89e3\u8aac\u89e3\u6cd5\n#15:49\nn = int(input())\na = list(map(int,input().split()))\nb = [a[0]]\nfor i in range(1,n):\n  b.append(b[-1] + a[i])\nc = []\nfor i in range(n):\n  c.append([abs(b[i] - b[-1]/2),i])\nh = -1\nj = min(c,key= lambda x:x[0])[1]\np = 0\nq = 0\nr = b[j]\ns = b[-1] - r\n#print(p,q,r,s)\ncan = []\nfor i in range(n-2):\n  q += a[i]\n  while True:\n    pnew = p + a[h+1]\n    qnew = q - a[h+1]\n    if abs(pnew-qnew) < abs(p-q):\n      h += 1\n      p = pnew\n      q = qnew\n    else:\n      break\n  r -= a[i]\n  while True:\n    rnew = r + a[j+1]\n    snew = s - a[j+1]\n    if abs(rnew-snew) < abs(r-s):\n      j += 1\n      r = rnew\n      s = snew\n    else:\n      break\n  if 1 <= i < n-2:\n    can.append(max(p,q,r,s) - min(p,q,r,s))\n    #print(p,q,r,s)\n#print(can)\nprint(min(can))", "N = int(input())\nA = [int(a) for a in input().split()]\n\nS = [0]*N\nS[0] = A[0]\nfor i in range(1, N):\n    S[i] = A[i]+S[i-1]\n    \nans = 2*10**14\nl = 0\ntemp = 2*10**14\nr = 2\n#for i in range(2, N):\n#    if abs(S[-1]-2*S[i]+S[1]) < temp:\n#        temp = abs(S[-1]-2*S[r]+S[1])\n#        r = i\n        \nfor i in range(2, N-1):\n    r = max(r, i)\n    while l+1 < i-1 and abs(S[i-1]-2*S[l]) > abs(S[i-1]-2*S[l+1]):\n        l += 1\n    while r+1 < N-1 and abs(S[N-1]-2*S[r]+S[i-1])  > abs(S[N-1]-2*S[r+1]+S[i-1]):\n        r += 1\n    t = max(S[N-1]-S[r], S[r]-S[i-1], S[i-1]-S[l], S[l]) - min(S[N-1]-S[r], S[r]-S[i-1], S[i-1]-S[l], S[l])\n    ans = min(ans, t)\n    \nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))\ns = 0\nS = [0]*N\nfor i, a in enumerate(A):\n    s += a\n    S[i] = s\n\nt = S[-1]\nans = 10**20\nj = 0\nk = 2\nfor i in range(1,N-2):\n    s = S[i]\n    while abs(s-2*S[j+1]  ) < abs(s-2*S[j]  ): j+=1\n    while abs(t-2*S[k+1]+s) < abs(t-2*S[k]+s): k+=1\n    \n    v = (S[j], s-S[j], S[k]-s, t-S[k])\n    ans = min(ans, max(v)-min(v))\n    \n    #print(i,j,k, v)\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int, input().split()))\nS = [0]\nfor a in A:\n    S += [S[-1] + a]\n\nans = float(\"inf\")\nl = 0\nr = 2\nfor i in range(1, N - 1):\n    while S[l] < S[i] - S[l + 1]:\n        l += 1\n    while S[r] - S[i] < S[N] - S[r + 1]:\n        r += 1\n\n    a = S[l]\n    b = S[i] - S[l]\n    c = S[r] - S[i]\n    d = S[N] - S[r]\n\n    ans = min(ans, max(a, b, c, d) - min(a, b, c, d))\nprint(ans)", "inf = float('inf')\n\nN = int(input())\na = tuple(map(int, input().split()))\n\nc_sum = [0]\nt = 0\nfor aa in a:\n    t += aa\n    c_sum.append(t)\n\nans = inf\np, q = 0, 2  # c_sum\u4e0a\u306eindex\nfor cut in range(2, N - 2 + 1):\n    # [0, cut)\u3068[cut, N)\u306b\u5206\u3051\u308b\n    # \u5404\u533a\u9593\u3092\u4e8c\u5206\u5272\u3059\u308b\n    # \u5206\u5272\u4f4d\u7f6e\u306f\u3001\u8981\u7d20\u306e\u5408\u8a08\u306e\u5dee\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306b\u53d6\u308b\n\n    # c_sum\u4e0a\u306e\u30ab\u30fc\u30bd\u30ebp\u3092\u52d5\u304b\u3059\n    # \u53f3\u533a\u9593\u306b\u4e00\u3064\u4ee5\u4e0a\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u306b\u3001p\u306fcut-1\u307e\u3067\u53d6\u308b\n    # c_sum[p]: \u4e8c\u5206\u5272\u3057\u305f\u5de6\u533a\u9593\u306e\u548c\n    # c_sum[cut] - c_sum[p]: \u4e8c\u5206\u5272\u3057\u305f\u53f3\u533a\u9593\u306e\u548c\n    while p < cut - 1:\n        if abs(c_sum[cut] - c_sum[p] * 2) >= abs(c_sum[cut] - c_sum[p + 1] * 2):\n            p += 1\n        else:\n            break\n\n    # c_sum\u4e0a\u306e\u30ab\u30fc\u30bd\u30ebq\u3092\u52d5\u304b\u3059\n    # \u53f3\u533a\u9593\u306b\u4e00\u3064\u4ee5\u4e0a\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u306b\u3001q\u306fN-1\u307e\u3067\u53d6\u308b\n    # c_sum[q]: \u4e8c\u5206\u5272\u3057\u305f\u5de6\u533a\u9593\u306e\u548c\n    # c_sum[N] - c_sum[q]: \u4e8c\u5206\u5272\u3057\u305f\u53f3\u533a\u9593\u306e\u548c\n    while q < N - 1:\n        if abs(c_sum[N] - c_sum[q] - (c_sum[q] - c_sum[cut])) >= abs(\n                c_sum[N] - c_sum[q + 1] - (c_sum[q + 1] - c_sum[cut])):\n            q += 1\n        else:\n            break\n\n    cands = [c_sum[cut] - c_sum[p], c_sum[p], c_sum[N] - c_sum[q], c_sum[q] - c_sum[cut]]\n    # print(cands)\n    ans = min(ans, max(cands) - min(cands))\nprint(ans)\n", "n=int(input())\na=list(map(int,input().split()))\nscore=[a[0],0,a[1]+a[2],sum(a[3:])]\nans=10**18\ni,k=1,3\nfor j in range(2,n-1):\n  score[1]+=a[j-1]\n  score[2]-=a[j-1]\n  while abs(score[0]-score[1])>abs(score[0]+a[i]-score[1]+a[i]):\n    score[0]+=a[i]\n    score[1]-=a[i]\n    i+=1\n  while abs(score[2]-score[3])>abs(score[2]+a[k]-score[3]+a[k]):\n    score[2]+=a[k]\n    score[3]-=a[k]\n    k+=1\n  ans=min(ans,max(score)-min(score))\nprint(ans)", "from itertools import accumulate\nn = int(input())\na = list(map(int, input().split()))\nc = list(accumulate(a))\nans = float(\"inf\")\nx, y = 0, 2\nfor i in range(1, n - 2):\n    while c[x] < c[i] - c[x + 1]:\n        x += 1\n    y = max(y, i + 1)\n    while c[y] - c[i] < c[-1] - c[y + 1]:\n        y += 1\n    ma = max(c[x], c[i] - c[x], c[y] - c[i], c[-1] - c[y])\n    mi = min(c[x], c[i] - c[x], c[y] - c[i], c[-1] - c[y])\n    ans = min(ans, ma - mi)\nprint(ans)", "#!/usr/bin/env python3\nimport sys\nimport itertools\nINF = float(\"inf\")\n\n\ndef solve(N: int, A: \"List[int]\"):\n\n    wa = list(itertools.accumulate(A))\n    # print(wa)\n    m = INF\n    # \u3057\u3083\u304f\u3068\u308a\u6cd5\n    atama1, atama2 = 0, 2\n    # \u771f\u3093\u4e2di\u3092\u56fa\u5b9a\u3059\u308b\n    for i in range(1, N-2):\n        # 0\u304b\u3089i-1\u307e\u3067\u306e\u5206\u5272\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b\n        # \u6700\u3082\u524d\u5f8c\u306e\u6570\u5217\u306e\u548c\u304c\u8fd1\u304f\u306a\u308b\u3088\u3046\u306b\n\n        # \u524d\u306e\u866b\n        s0, s1 = wa[atama1], wa[i]-wa[atama1]\n        for j in range(atama1+1, i):\n            t0, t1 = wa[j], wa[i]-wa[j]\n            # print(s0, s1, t0, t1, atama1)\n            if t0 >= t1:\n                if abs(s1-s0) >= abs(t1-t0):\n                    s0, s1 = t0, t1\n                    atama1 += 1\n                break\n            s0, s1 = t0, t1\n            atama1 += 1\n        # print(s0, s1, t0, t1)\n\n        # \u5f8c\u308d\u306e\u866b\n        s2, s3 = wa[atama2]-wa[i], wa[N-1]-wa[atama2]\n        for j in range(atama2+1, N):\n            t2, t3 = wa[j]-wa[i], wa[N-1]-wa[j]\n            if t2 >= t3:\n                if abs(s3-s2) >= abs(t3-t2):\n                    s2, s3 = t2, t3\n                    atama2 += 1\n                break\n            s2, s3 = t2, t3\n            atama2 += 1\n\n        s = [s0, s1, s2, s3]\n        # print(s)\n        s.sort()\n        m = min(s[3]-s[0], m)\n\n    print(m)\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = tuple(map(int, input().split()))\n\ndef calc(B):\n    P, Q = B[0], B[1]\n    ret = [None] * N\n    ret[1] = (P, Q)\n    mid = 1\n\n    for right in range(2, N - 2):\n        Q += B[right]\n        while mid < right:\n            newP = P + B[mid]\n            newQ = Q - B[mid]\n\n            if abs(newP - newQ) >= abs(P - Q):\n                break\n            mid += 1\n            P = newP\n            Q = newQ\n\n        ret[right] = (P, Q)\n\n    return ret\n\nleft = calc(A)[1: -2]\nright = calc(A[:: -1])[1: -2][:: -1]\n\nans = 10**10\nfor (P, Q), (R, S) in zip(left, right):\n    ans = min(ans, abs(max(P, Q, R, S) - min(P, Q, R, S)))\n\nprint(ans)\n", "N = int(input())\nAs = list(map(int,input().split()))\nsum_a = [0]\nfor i in range(N):\n  sum_a.append(As[i]+sum_a[i])\nans = float('inf')\np,q = 0,2\nfor cut in range(2,N-1):\n  while p < cut-1:\n    if abs(sum_a[cut]-sum_a[p]*2) >= abs(sum_a[cut]-sum_a[p+1]*2):\n      p += 1\n    else:\n      break\n      \n  while q < N-1:\n    if abs(sum_a[N]-sum_a[q]-(sum_a[q]-sum_a[cut])) >= abs(sum_a[N]-sum_a[q+1]-(sum_a[q+1]-sum_a[cut])):\n      q += 1\n    else:\n      break\n      \n  ls = [sum_a[N]-sum_a[q],sum_a[q]-sum_a[cut],sum_a[cut]-sum_a[p],sum_a[p]]\n  ans = min(ans,max(ls)-min(ls))\nprint(ans)\n  \n  \n  \n", "from itertools import accumulate\nfrom bisect import bisect_left\nN = int(input())\nA = [0] + list(map(int, input().split()))\n\n\nans = float('inf')\nA = list(accumulate(A))\n\nfor m in range(2, N - 1):\n    Lx = A[m] // 2\n    Li = bisect_left(A, Lx)\n    if abs(Lx - A[Li]) > abs(Lx - A[Li - 1]):\n        Li -= 1\n\n    Rx = (A[-1] + A[m]) // 2\n    Ri = bisect_left(A, Rx)\n    if abs(Rx - A[Ri]) > abs(Rx - A[Ri - 1]):\n        Ri -= 1\n\n    P, Q, R, S = A[Li], A[m] - A[Li], A[Ri] - A[m], A[-1] - A[Ri]\n    tmp_ans = max(P, Q, R, S) - min(P, Q, R, S)\n    ans = min(ans, tmp_ans)\n\n\nprint(ans)\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    X = [0 for _ in range(N + 1)]  # cum sum\n    for i in range(N):\n        X[i + 1] = X[i] + A[i]\n    # split to 2 parts (X_0, ..., X_i), (X_(i+1), ..., X_N)\n    ans = 10**10\n    left = 0\n    right = 2\n    for i in range(1, N):\n        while left < i:\n            d = abs(X[left] - (X[i] - X[left]))\n            d_next = abs(X[left + 1] - (X[i] - X[left + 1]))\n            if d_next > d:\n                break\n            left += 1\n        while right < N:\n            d = abs((X[N] - X[right]) - (X[right] - X[i]))\n            d_next = abs((X[N] - X[right + 1]) - (X[right + 1] - X[i]))\n            if d_next > d:\n                break\n            right += 1\n        p, q, r, s = X[left], X[i] - X[left], X[right] - X[i], X[N] - X[right]\n        ans = min([ans, max([p, q, r, s]) - min([p, q, r, s])])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from itertools import accumulate as acc\nfrom bisect import bisect_left as bl\n\ndef ans(n):\n    tmp=0\n    for i in range(N):\n        tmp+=abs(a[i]-a[n-1])\n    return tmp\n\n\nN=int(input())\na=list(acc(map(int,input().split())))\n\nans=a[-1]\np=0\nq=2\nfor j in range(1,N-2):\n    q=max(q,j+1)\n    while p<j-1 and abs(a[j]-a[p]*2)>abs(a[j]-a[p+1]*2):\n        p+=1\n    while q<N-2 and abs(a[j]+a[N-1]-a[q]*2)>abs(a[j]+a[N-1]-a[q+1]*2):\n        q+=1\n\n    x=[ a[p], a[j]-a[p], a[q]-a[j], a[N-1]-a[q] ]\n    ans=min(ans, max(x)-min(x))\n\nprint(ans)", "#!/usr/bin/env python\nfrom itertools import accumulate as ac\nN = int(input())\nA = list(ac(list(map(int, input().split()))))\nl, r, t = 0, 2, A[-1]\nc = t\n\nfor m in A[1:-2]:\n    while t+m > A[r]+A[r+1]:\n        r += 1\n    while m > A[l]+A[l+1]:\n        l += 1\n    x = sorted([A[l],m-A[l],A[r]-m,t-A[r]])\n    c = min(c,x[-1]-x[0])\nprint(c)\n", "N = int(input())\nA = [ int(x) for x in input().split()]\n\nS = [0]\n\nfor a in A:\n    S += [ S[-1] + a ]\n\nl = 0\nr = 2\nans = float('inf') \n\nfor i in range(1, N-1):\n    while S[i] - S[l+1] > S[l]:\n        l += 1\n\n    while S[N] - S[r+1] > S[r] - S[i]:\n        r += 1\n\n    a = S[l]\n    b = S[i] - S[l]\n    c = S[r] - S[i]\n    d = S[N] - S[r]\n  \n    ans = min(ans, max(a,b,c,d) - min(a,b,c,d))\nprint(ans)\n", "N = int(input())\nA = list(map(int, input().split()))\n\ncul_sum = [0 for _ in range(N+1)]\nfor i in range(N):\n    cul_sum[i+1] = A[i] + cul_sum[i]\n\ndef diff_left(center, left):\n    return abs(cul_sum[center+1] - 2 * cul_sum[left+1])\n\ndef diff_right(center, right):\n    return abs(cul_sum[N]-2*cul_sum[right+1]+cul_sum[center+1])\n\nL = [-1 for _ in range(N-1)]\nR = [-1 for _ in range(N-1)]\n# \u771f\u3093\u4e2d\u306e\u5207\u308a\u65b9\u304c i \u3068 i+1 \u306e\u9593\nl = 0\nr = 2\nans = float('inf')\nfor i in range(1, N-2):\n    while l < i and diff_left(i, l) > diff_left(i, l+1):\n        l += 1\n    if r <= i:\n        r = i+1\n    while r < N and diff_right(i, r) > diff_right(i, r+1):\n        r += 1\n    part_sum = [\n        cul_sum[l+1],\n        cul_sum[i+1] - cul_sum[l+1],\n        cul_sum[r+1] - cul_sum[i+1],\n        cul_sum[N] - cul_sum[r+1],\n    ]\n    ans = min(ans, max(part_sum)-min(part_sum))\n\nprint(ans)\n", "def solve(string):\n    n, *a = list(map(int, string.split()))\n    l, c, r = 1, 2, 3\n    sll, slr, srl, srr = sum(a[:l]), sum(a[l:c]), sum(a[c:r]), sum(a[r:])\n    ans = max(sll, slr, srl, srr) - min(sll, slr, srl, srr)\n    while c < n - 1:\n        d = abs(sll - slr)\n        dn = abs(sll + 2 * a[l] - slr)\n        while dn < d:\n            sll, slr = sll + a[l], slr - a[l]\n            l += 1\n            d = abs(sll - slr)\n            dn = abs(sll + 2 * a[l] - slr)\n        d = abs(srl - srr)\n        dn = abs(srl + 2 * a[r] - srr)\n        while dn < d:\n            srl, srr = srl + a[r], srr - a[r]\n            r += 1\n            d = abs(srl - srr)\n            dn = abs(srl + 2 * a[r] - srr)\n        ans = min(ans, max(sll, slr, srl, srr) - min(sll, slr, srl, srr))\n        slr += a[c]\n        srl -= a[c]\n        c += 1\n    return str(ans)\n\n\ndef __starting_point():\n    print((solve('\\n'.join([input(), input()]))))\n\n__starting_point()", "n,*a=map(int,open(0).read().split())\nfor i in range(n-1):\n    a[i+1]+=a[i]\nj,k=0,2\nm=1e18\nfor i in range(1,n-1):\n    while abs(a[j]*2-a[i])>abs(a[j+1]*2-a[i]):\n        j+=1\n    while abs(a[k]*2-a[i]-a[n-1])>abs(a[k+1]*2-a[i]-a[n-1]):\n        k+=1\n    t=a[j],a[i]-a[j],a[k]-a[i],a[n-1]-a[k]\n    m=min(m,max(t)-min(t))\nprint(m)", "import math\n\nn = int(input())\n\na = [int(i) for i in input().split(\" \")]\nar = a[::-1]\na = [0] + a\nar = [0] + ar\ns = [0] * (n + 1)\nsr = [0] * (n + 1)\nli = 0\nri = n\n\nfor i in range(1, n + 1):\n    s[i] = a[i] + s[i - 1]\n    sr[i] = ar[i] + sr[i - 1]\n    \ndef f(a):\n    return max(a) - min(a)\n\ndef fs(rr):\n    nonlocal li\n    while abs(s[rr] - 2 * s[li]) > abs(s[rr] - 2 * s[li + 1]):\n        li += 1\n        \ndef fsr(rr):\n    nonlocal ri\n    while abs(sr[rr] - 2 * sr[ri]) > abs(sr[rr] - 2 * sr[ri - 1]):\n        ri -= 1\n\nm_min = 2 * 10**14\nfor i in range(2, n - 1):\n    fs(i)\n    fsr(n - i)\n    m = f([s[li], s[i] - s[li], sr[ri], sr[n - i] - sr[ri]])\n    if m < m_min:\n        m_min = m\n        \nprint(m_min)", "from itertools import accumulate\n\nnim = int(input())\narray = list(accumulate([int(i) for i in input().split()]))\nl, r = 0, 1\nans = float(\"inf\")\nfor i in range(1, nim-2):\n    while abs(array[i] - 2 * array[l+1]) < abs(array[i] - 2 * array[l]) and l < i - 1: l += 1\n    while abs(array[-1] - 2 * array[r+1] + array[i]) < abs(array[-1] - 2 * array[r] + array[i]) and r < nim - 2: r += 1\n    t = [array[l], array[i] - array[l], array[r] - array[i], array[-1] - array[r]]\n    ans = min(ans, max(t) - min(t))\nprint(ans)", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN = INT()\nA = LIST()\n\nl = 1\nm = 2\nr = 3\na = sum(A[:l])\nb = sum(A[l:m])\nc = sum(A[m:r])\nd = sum(A[r:])\nans = max(a, b, c, d) - min(a, b, c, d)\n# \u5c3a\u53d6\u6cd5(3\u70b9\u52d5\u304b\u3059)\nwhile m < N-1:\n    # a,b\u306e\u5dee\u304c\u6700\u5c0f\u306b\u306a\u308b\u307e\u3067\u5de6\u3092\u52d5\u304b\u3059\n    while l < m-1 and abs(a - b) > abs(a+A[l] - (b-A[l])):\n        a += A[l]\n        b -= A[l]\n        l += 1\n    # c,d\u306e\u5dee\u304c\u6700\u5c0f\u306b\u306a\u308b\u307e\u3067\u53f3\u3092\u52d5\u304b\u3059\n    while r < N-1 and abs(c - d) > abs(c+A[r] - (d-A[r])):\n        c += A[r]\n        d -= A[r]\n        r += 1\n    ans = min(ans, max(a, b, c, d) - min(a, b, c, d))\n    # \u771f\u3093\u4e2d\u3092\u52d5\u304b\u3059\n    b += A[m]\n    c -= A[m]\n    m += 1\n    # \u771f\u3093\u4e2d\u304c\u53f3\u306b\u8ffd\u3044\u3064\u3044\u305f\u3089\u3001\u53f3\u3082\u5408\u308f\u305b\u3066+1\u3059\u308b\n    if m == r:\n        c += A[r]\n        d -= A[r]\n        r += 1\nprint(ans)\n", "from itertools import accumulate\n\n\ndef solve(string):\n    n, *a = list(map(int, string.split()))\n    *a, = accumulate(a)\n    l, r, e, ans = 0, 2, a[-1], a[-1]\n    for c in a[1:-2]:\n        while a[l] + a[l + 1] < c:\n            l += 1\n        while a[r] + a[r + 1] < c + e:\n            r += 1\n        t = sorted([a[l], c - a[l], a[r] - c, e - a[r]])\n        ans = min(ans, t[-1] - t[0])\n    return str(ans)\n\n\ndef __starting_point():\n    print((solve('\\n'.join([input(), input()]))))\n\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\nb = [0] * (n + 1)\nfor i in range(n):\n    b[i + 1] = b[i] + a[i]\nx = [[0, 0] for _ in range(n - 3)]\nj = 1\nfor i in range(2, n - 1):\n    while True:\n        if i == j + 1:\n            x[i - 2][0] = b[j]\n            break\n        if abs(b[i] - 2 * b[j]) > abs(b[i] - 2 * b[j + 1]):\n            j += 1\n        else:\n            x[i - 2][0] = b[j]\n            break\nj = n - 1\nfor i in range(n - 2, 1, -1):\n    while True:\n        if i == j - 1:\n            x[i - 2][1] = b[j]\n            break\n        if abs(b[n] + b[i] - 2 * b[j]) > abs(b[n] + b[i] - 2 * b[j - 1]):\n            j -= 1\n        else:\n            x[i - 2][1] = b[j]\n            break\nans = 1145141919810\nfor i in range(n - 3):\n    s = [x[i][0], b[i + 2] - x[i][0], x[i][1] - b[i + 2], b[n] - x[i][1]]\n    ans = min(ans, max(s) - min(s))\nprint(ans)", "#102_D\nN = int(input())\nA = [int(i) for i in input().split()]\ns = 0\nAS = []\nfor i in range(N):\n    s += A[i]\n    AS.append(s)\n#\u5c3a\u53d6\u308a\u6cd5\nAns = AS[N-1]+1\nL = 0\nR = 2\nfor Mid in range(1, N-2):\n    Sum_L = AS[Mid]\n    Sum_R = AS[N-1]-Sum_L\n    while abs((Sum_L - AS[L]) - AS[L]) > abs((Sum_L - AS[L+1]) - AS[L+1]):\n        L += 1\n\n    while abs((AS[N-1]-AS[R]) - (AS[R]-Sum_L)) > abs((AS[N-1]-AS[R+1]) - (AS[R+1]-Sum_L)):\n        R += 1\n    P = AS[L]\n    Q = Sum_L-AS[L]\n    S = AS[R]-Sum_L\n    T = AS[N-1]-AS[R]\n    #print(Mid,L,R,abs(max(P,Q,S,T)-min(P,Q,S,T)))\n    Ans = min(Ans, abs(max(P, Q, S, T)-min(P, Q, S, T)))\nprint(Ans)\n", "n = int(input())\na_list = [int(x) for x in input().split()]\n\ntemp_list = [0] * (n + 1)\nfor i in range(1, n + 1):\n    temp_list[i] = a_list[i - 1] + temp_list[i - 1]\n \nl = 1\nr = 3\nans = temp_list[-1]\nfor m in range(2, n - 1):\n    gap_min = abs((temp_list[m] - temp_list[l]) - (temp_list[l] - temp_list[0]))\n    while l < m:\n        l += 1\n        gap = abs((temp_list[m] - temp_list[l]) - (temp_list[l] - temp_list[0]))\n        if gap < gap_min:\n            gap_min = gap\n        else:\n            l -= 1\n            break\n    else:\n        l -= 1\n    \n    gap_min = abs((temp_list[n] - temp_list[r]) - (temp_list[r] - temp_list[m]))\n    while r < n:\n        r += 1\n        gap = abs((temp_list[n] - temp_list[r]) - (temp_list[r] - temp_list[m]))\n        if gap < gap_min:\n            gap_min = gap\n        else:\n            r -= 1\n            break\n    else:\n        r -= 1\n    \n    num_list = sorted([temp_list[l] - temp_list[0], temp_list[m] - temp_list[l], temp_list[r] - temp_list[m], temp_list[n] - temp_list[r]])\n    ans_temp = num_list[3] - num_list[0]\n    if ans_temp < ans:\n        ans = ans_temp\nprint(ans)", "N = int(input())\nA = list(map(int,input().split()))\nfrom itertools import accumulate\nP = list(accumulate(A))\nl,right = 0,2\ndiff = float('inf')\nfor c in range(1,N-1):\n    p = P[l]\n    q = P[c]-P[l]\n    while True:\n        if abs(p+2*A[l+1]-q)>=abs(p-q):\n            break\n        p = P[l+1]\n        q = P[c]-P[l+1]\n        l += 1\n    r = P[right]-P[c]\n    s = P[-1]-P[right]\n    while True:\n        if abs(r+2*A[right+1]-s)>=abs(r-s):\n            break\n        r = P[right+1]-P[c]\n        s = P[-1]-P[right+1]\n        right += 1\n    diff = min(diff,max(p,q,r,s)-min(p,q,r,s))\nprint(diff)"]