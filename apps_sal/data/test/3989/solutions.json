["def end(x) :\n    if x == 0 :\n        return \"1869\";\n    if x == 6 :\n        return \"1968\";\n    if x == 5 :\n        return \"1689\";\n    if x == 4 :\n        return \"6891\";\n    if x == 3 :\n        return  \"1689\";\n    if x == 2 :\n        return  \"1986\";\n    if x == 1 :\n        return  \"1896\";\n\nd = [0] * 10;\nfor c in input() :\n    d[int(c)] += 1;\nfor i in [1,6,8,9] :\n    d[i] -= 1;\n\ns = \"\";\nost = 0;\n\nfor i in range(10) :\n    for j in range(d[i]):\n        ost = (ost * 10 + i) % 7;\n\nost = (1869, 1896, 1986, 1698, 6198, 1689, 1968)[ost * 10000 % 7];\n\nfor c in (1,2,3,4,5,6,7,8,9) :\n    s += str(c) * d[c];\n\nprint((s + str(ost) + \"0\" * d[0]));\n", "def end(x) :\n    if x == 0 :\n        return \"1869\";\n    if x == 6 :\n        return \"1968\";\n    if x == 5 :\n        return \"1689\";\n    if x == 4 :\n        return \"6891\";\n    if x == 3 :\n        return  \"1698\";\n    if x == 2 :\n        return  \"1986\";\n    if x == 1 :\n        return  \"1896\";\n\nd = [0] * 10;\nfor c in input() :\n    d[int(c)] += 1;\nfor i in [1,6,8,9] :\n    d[i] -= 1;\n\ns = \"\";\nost = 0;\n\nfor i in range(10) :\n    for j in range(d[i]):\n        ost = (ost * 10 + i) % 7;\n\nost = ost * 10000 % 7;\n\nfor c in (1,2,3,4,5,6,7,8,9) :\n    s += str(c) * d[c];\n\nprint((s + end(ost) + \"0\" * d[0]));\n", "from itertools import permutations\n\nt, r = [0, 1, 4, 6, 5, 2], {i: 0 for i in '0123456789'}\nfor i in input(): r[i] += 1\nfor i in '1689': r[i] -= 1\n\ns = a = b = 0\nfor i in '9876543210':\n    a, b = b, (b + r[i]) % 6\n    s += int(i) * (t[b]\t- t[a])\nd = pow(10, b, 7)\n\nfor q in permutations('1689'):\n    q = ''.join(q)\n    if (s + d * int(q)) % 7 == 0:\n        print(q + ''.join(i * r[i] for i in '0123456789'))\n        break", "p, t = {}, input()\nfor i in '0123456789': p[i] = 0\nfor i in t: p[i] += 1\nfor i in '1689': p[i] -= 1\n\nq = [0] * 7\nr = pow(10, (len(t) - 4) % 6, 7)\nfor i, j in enumerate([9681, 6819, 6981, 6891, 8691, 9861, 1896]): q[(i * r) % 7] = j\n\ns = [0] + [int('1' * i) % 7 for i in range(1, 6)]\na = b = d = 0\nfor i in '0123456789':\n    b = (a + p[i]) % 6\n    d -= ((s[b] - s[a]) * int(i)) % 7\n    a = b\n\nprint(str(q[d % 7]) + ''.join(i * p[i] for i in '9876543210'))", "S='1689'\ns=input()\nZ=s.count('0')\ns=s.replace('0','')\nfor i in S:t=s.index(i);s=s[:t]+s[t+1:]\nk=0\nfor i in s:k=(k*10+ord(i)-ord('0'))%7\nfor a in S:\n    for b in S:\n        for c in S:\n            for d in S:\n                if len(set(a+b+c+d))==4 and (k*10000+int(a+b+c+d))%7==0:\n                    print(s+a+b+c+d+'0'*Z)\n                    return", "def main():\n    a = input()\n    l = len(a)\n    book = [0] * 128\n    a = list(a)\n    for i in range (l):\n        a[i] = chr(ord(a[i]) - ord('0'))\n        book[ord(a[i])] += 1\n    num = 0\n    m = 0\n    buf = []\n    for i in range (1,10):\n        if i in (1, 8, 6, 9):\n            for j in range (1, book[i]):\n                buf.append(i)\n                m = (10 * m + i) % 7\n                num += 1\n        else:\n            for j in range (1,book[i]+1):\n                buf.append(i)\n                m = (10 * m + i) % 7\n                num += 1\n    m = ( m * 10000 ) % 7\n    mp = [9681, 1896,9861, 1698, 6891, 6981, 6819]\n    buf.append(mp[m])\n    num += 4\n    buf.append('0' * (l - num))\n    print(''.join(map(str, buf)))\n\nmain()\n\n", "# Made By Mostafa_Khaled \nbot = True \na=input()\n\ncnt=[0]*10\n\nfor i in (1,6,8,9):\n\n\tcnt[i]=-1\n\nfor i in a:\n\n\tcnt[int(i)]+=1\n\nmod = [1869, 1968, 9816, 6198, 1698, 1986, 1896, 1869]\n\nmodCnt=0\n\nfor i in range(1,10):\n\n\tfor j in range(cnt[i]):\n\n\t\tmodCnt= (modCnt*3 + i)%7\n\n\tprint(str(i)*cnt[i], end='')\n\nmodCnt=(10000*modCnt)%7\n\nprint(str(mod[7-modCnt])+'0'*cnt[0])\n\n# Made By Mostafa_Khaled", "s=input()\ncnt=[0]*10\nfor c in s:\n    cnt[int(c)]+=1\n\nif cnt[1]==1 and cnt[6]==1 and cnt[8]==1 and cnt[9]==1 and sum(cnt)==cnt[0]+4:\n    print('9618'+'0'*cnt[0])\nelse:\n\n    cnt[1]-=1\n    cnt[6]-=1\n    cnt[8]-=1\n    cnt[9]-=1\n\n    s=[]\n    mod=0\n    for d in range(1,10):\n        for i in range(cnt[d]):\n            s+=[str(d)]\n            mod*=10\n            mod+=d\n            mod%=7\n\n    import itertools\n    a=[1,6,8,9]\n    for p in itertools.permutations(a):\n        x=p[0]*1000+p[1]*100+p[2]*10+p[3]\n        if (mod*10000+x)%7==0:\n            res=''.join(s)\n            res+=str(x)+'0'*cnt[0]\n            print(res)\n            break", "import sys\nfrom math import *\nfrom fractions import gcd\nreadints=lambda:list(map(int, input().strip('\\n').split()))\n\nn=input().strip('\\n')\n\nfrom itertools import permutations\nperms = [''.join(p) for p in permutations('1689')]\nmod={}\nfor p in perms:\n    p=int(p)\n    mod[p%7]=p\n\n\nfreq=[0]*10\nfor d in n:\n    d=int(d)\n    freq[d]+=1\n\n    \nfor d in (1,6,8,9):\n    freq[d]-=1\n\nm=0\nfor i in range(1,10):\n    for _ in range(freq[i]):\n        m=(10*m + i)%7\n\nsuf=''\nfor p in list(mod.values()):\n    cur=int(str(m)+str(p))\n    if cur%7==0:\n        suf=str(p)\n        break\n\nans=''\nfor i in range(1,10):\n    ans += str(i)*freq[i]\n\nans += suf\nans += '0'*freq[0]\n\nprint(ans)\n", "n = [int(d) for d in input()]\nfor x in [1,6,8,9]:\n\tfor i in range(len(n)):\n\t\tif n[i]==x:\n\t\t\tdel n[i]\n\t\t\tbreak\nprefix = [1869,6189,1689,6198,1698,9861,1896]\nL = sum([n[i]*pow(10,len(n)-i-1,7) for i in range(len(n))])%7\nprint(prefix[(-L)*pow(10,5*len(n),7)%7],end='')\nprint(*n, sep='')", "import sys\nn = [int(d) for d in sys.stdin.readline()[:-1]]\nfor x in [1,6,8,9]:\n\tfor i in range(len(n)):\n\t\tif n[i]==x:\n\t\t\tdel n[i]\n\t\t\tbreak\nprefix = [1869,6189,1689,6198,1698,9861,1896]\nL = sum([n[i]*pow(10,len(n)-i-1,7) for i in range(len(n))])%7\nprint(prefix[(-L)*pow(10,5*len(n),7)%7],end='')\nprint(*n, sep='')", "ans=[1,6,8,9]\nrem=[]\nfrom collections import *\nal=defaultdict(int)\nfor i in range(len(ans)):\n    for j in range(len(ans)):\n        for m in range(len(ans)):\n            for t in range(len(ans)):\n                re=[i,j,m,t]\n                if(len(set(re))==4):\n                    q=pow(10,3)*ans[i]+(pow(10,2)*ans[j])+(pow(10,1)*ans[m])+(ans[t])\n                    if(al[q%7]==0):\n                        \n                        rem.append([q%7,q])\n                       \n                        al[q%7]=1\n\ns=input()\nrem.sort()\nans=[]\nfor i in range(len(s)):\n    ans.append(int(s[i]))\ncount=0\nans.remove(1)\nans.remove(6)\nans.remove(8)\nans.remove(9)\ni=0\n\nwhile(i<len(ans)):\n   \n    if(i==0):\n        while(i<len(ans) and ans[i]==0):\n            count+=1\n            i+=1\n        i+=1\n    else:\n        i+=1\ntemp=[]\nfor i in range(count,len(ans)):\n    temp.append(ans[i])\nfin=0\nif(len(temp)==0):\n    s=str(rem[0][1])+'0'*count\n    print(s)\n    return\nelse:\n    for i in range(len(temp)):\n        fin=fin+(pow(10,len(temp)-i-1,7)*(temp[i]%7)%7)\n        fin%=7\n  \n    if(fin==0):\n        m=''.join(map(str,temp))+str(rem[fin][1])+('0'*count)\n    if(fin==1):\n         m=''.join(map(str,temp))+str(rem[3][1])+('0'*count)\n    if(fin==2):\n         m=''.join(map(str,temp))+str(rem[6][1])+('0'*count)\n\n    if(fin==3):\n        m=''.join(map(str,temp))+str(rem[2][1])+('0'*count)\n    if(fin==4):\n        m=''.join(map(str,temp))+str(rem[5][1])+('0'*count)\n    if(fin==5):\n        m=''.join(map(str,temp))+str(rem[1][1])+('0'*count)\n    if(fin==6):\n        m=''.join(map(str,temp))+str(rem[4][1])+('0'*count)\n        \n        \n    print(m)\n    \n        \n        \n    \n    \n", "ans=[1,6,8,9]\nrem=[]\nfrom collections import *\nal=defaultdict(int)\nfor i in range(len(ans)):\n    for j in range(len(ans)):\n        for m in range(len(ans)):\n            for t in range(len(ans)):\n                re=[i,j,m,t]\n                if(len(set(re))==4):\n                    q=pow(10,3)*ans[i]+(pow(10,2)*ans[j])+(pow(10,1)*ans[m])+(ans[t])\n                    if(al[q%7]==0):\n                        \n                        rem.append([q%7,q])\n                       \n                        al[q%7]=1\n \ns=input()\nrem.sort()\nans=[]\nfor i in range(len(s)):\n    ans.append(int(s[i]))\ncount=0\nans.remove(1)\nans.remove(6)\nans.remove(8)\nans.remove(9)\ni=0\n \nwhile(i<len(ans)):\n   \n    if(i==0):\n        while(i<len(ans) and ans[i]==0):\n            count+=1\n            i+=1\n        i+=1\n    else:\n        i+=1\ntemp=[]\nfor i in range(count,len(ans)):\n    temp.append(ans[i])\nfin=0\nif(len(temp)==0):\n    s=str(rem[0][1])+'0'*count\n    print(s)\n    return\nelse:\n    for i in range(len(temp)):\n        fin=fin+(pow(10,len(temp)-i-1,7)*(temp[i]%7)%7)\n        fin%=7\n  \n    if(fin==0):\n        m=''.join(map(str,temp))+str(rem[fin][1])+('0'*count)\n    if(fin==1):\n         m=''.join(map(str,temp))+str(rem[3][1])+('0'*count)\n    if(fin==2):\n         m=''.join(map(str,temp))+str(rem[6][1])+('0'*count)\n \n    if(fin==3):\n        m=''.join(map(str,temp))+str(rem[2][1])+('0'*count)\n    if(fin==4):\n        m=''.join(map(str,temp))+str(rem[5][1])+('0'*count)\n    if(fin==5):\n        m=''.join(map(str,temp))+str(rem[1][1])+('0'*count)\n    if(fin==6):\n        m=''.join(map(str,temp))+str(rem[4][1])+('0'*count)\n        \n        \n    print(m)\n    \n", "p, t = {}, input()\nfor i in '0123456789': p[i] = 0\nfor i in t: p[i] += 1\nfor i in '1689': p[i] -= 1\n \nq = [0] * 7\nr = pow(10, (len(t) - 4) % 6, 7)\nfor i, j in enumerate([9681, 6819, 6981, 6891, 8691, 9861, 1896]): q[(i * r) % 7] = j\n \ns = [0] + [int('1' * i) % 7 for i in range(1, 6)]\na = b = d = 0\nfor i in '0123456789':\n    b = (a + p[i]) % 6\n    d -= ((s[b] - s[a]) * int(i)) % 7\n    a = b\n \nprint(str(q[d % 7]) + ''.join(i * p[i] for i in '9876543210'))", "import os\nimport sys\nfrom io import BytesIO, IOBase\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\ndef binary(n):\n    return (bin(n).replace(\"0b\", \"\"))\n\n\ndef decimal(s):\n    return (int(s, 2))\n\n\ndef pow2(n):\n    p = 0\n    while (n > 1):\n        n //= 2\n        p += 1\n    return (p)\n\n\ndef isPrime(n):\n    if (n == 1):\n        return (False)\n    else:\n        root = int(n ** 0.5)\n        root += 1\n        for i in range(2, root):\n            if (n % i == 0):\n                return (False)\n        return (True)\ns=input()\nf=[0]*10\nmod=[1869,8961,6981,6198,1698,9861,1896]\nfor i in s:\n    f[int(i)]+=1\na=\"\"\ncm=0\nfor i in s:\n    if(i!=\"0\"):\n        n=int(i)\n        if(n==1 or n==6 or n==8 or n==9):\n            if(f[n]>1):\n                cm=(cm*10+n)%7\n                f[n]-=1\n                print(i,end=\"\")\n        else:\n            cm=(cm*10+n)%7\n            f[n]-=1\n            print(i,end=\"\")\n#print(a,cm)\nfor i in range(0,4):\n    cm=(cm*10)%7\nif(cm==0):\n    print(str(mod[cm]),end=\"\")\n    print('0'*f[0])\nelse:\n    print(str(mod[7-cm]), end=\"\")\n    print('0' * f[0])", "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nimport sys\nfrom heapq import heappush,heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input().rstrip()\ndef mi():return map(int,input().split())\ndef li():return list(mi())\ndef ceil(a,b): return (a+b-1)//b\nabc='abcdefghijklmnopqrstuvwxyz'\nmod=1000000007\n# mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('a')\n\n\ntest = 0\ndef solve():\n\n    # int( str(i)+x[i] ) is divisible by 7\n    x = ['1869','6198','1896','1689','1986','1968','8691']\n    freq = [0]*10\n    s = si()\n    for i in s:\n        freq[int(i)] +=1\n\n    freq[1] -= 1\n    freq[6] -= 1\n    freq[8] -= 1\n    freq[9] -= 1\n\n    res = \"\"\n    cur = 0\n    for i in range(1,10):\n        for j in range(freq[i]):\n            cur *= 10\n            cur += i\n            cur %= 7\n    for i in range(1,10):\n        print(str(i)*freq[i],end=\"\")\n    print(x[cur],end=\"\")\n    \n    print('0'*freq[0])\n\n\n    \n    \n        \n\n\n\n          \ndef __starting_point():\n\n   \n    if path.exists('input.txt'):\n        sys.stdin=open('input.txt', 'r')\n        sys.stdout=open('output.txt','w')\n    else:\n        input=sys.stdin.readline\n\n    t = 1\n    if test:\n        t = ii()\n\n    for _ in range(t):\n\n        solve()\n__starting_point()", "# by the authority of GOD     author: manhar singh sachdev #\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\ndef main():\n    x = input().strip()\n    ls = []\n    fl = [0,0,0,0]\n    st = '1689'\n    for i in x:\n        if i in st and not fl[st.index(i)]:\n            fl[st.index(i)] = 1\n            continue\n        ls.append(i)\n    ls1 = ls[::-1]\n    perm = ['1869','1968','1689','6198','1698','1986','1896']\n    val = [1,3,2,6,4,5]\n    rem = 0\n    for i in range(len(ls1)):\n        rem += (int(ls1[i])*val[i%6])%7\n        rem %= 7\n    ls = list(perm[((7-rem)*pow(pow(10,len(ls1),7),5,7))%7])+ls\n    print(''.join(ls))\n\n#Fast IO Region\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef __starting_point():\n    main()\n__starting_point()", "# Legends Always Come Up with Solution\n# Author: Manvir Singh\n\nimport os\nfrom io import BytesIO, IOBase\nimport sys\nfrom collections import defaultdict,deque,Counter\nfrom bisect import *\nfrom math import sqrt,pi,ceil,log\nimport math\nfrom itertools import permutations\nfrom copy import deepcopy\n\nfrom sys import setrecursionlimit\n\n\ndef main():\n    a=input().rstrip()\n    n=len(a)\n    a=Counter(a)\n    a[\"6\"]-=1\n    a[\"1\"]-=1\n    a[\"8\"]-=1\n    a[\"9\"]-=1\n    z,s,y=0,[],[1]\n    for i in range(n):\n        y.append((y[-1]*10)%7)\n    xx=1\n    for i in a:\n        if i!=\"0\":\n            x=int(i)\n            for j in range(a[i]):\n                s.append(i)\n                z=(z+x*y[n-xx])%7\n                xx+=1\n    f=1\n    for i in permutations([1,6,8,9]):\n        if (z+i[0]*y[n-xx]+i[1]*y[n-xx-1]+i[2]*y[n-xx-2]+i[3]*(y[n-xx-3]))%7==0:\n            f=0\n            s.extend([str(i[0]),str(i[1]),str(i[2]),str(i[3])])\n            break\n    if f:\n        print(0)\n    else:\n        s.append(\"0\"*a[\"0\"])\n        print(\"\".join(s))\n\n# region fastio\nBUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef __starting_point():\n    main()\n__starting_point()"]