["class Ddict:\n    def __init__(self):\n        self.dicts={}\n    def add(self,key):\n        d=self.dicts\n        for i in key:\n            if i not in d:\n                d[i]={}\n            d=d[i]\n        d[' ']=''\n    def find(self,key):\n        if key=='':\n            return '',''\n        d=self.dicts\n        q=[]\n        h=[key[0]]\n        for i in key:\n            if i not in d:\n                if ' ' in d and len(d)==1:\n                    return ''.join(q),''.join(h)\n                return '',''\n            q.append(i)\n            if len(d)!=1:\n                h=q[:]\n            d=d[i]\n        if ' ' in d and len(d)==1:\n            return ''.join(q),''.join(h)\n        return '',''\nwords = Ddict()\nans=0\nwhile True:\n    try:\n        x=input()\n        if not x:\n            break\n    except:\n        break\n    ans+=len(x)+1\n    ws=[[]]\n    for i in x:\n        if i in '.,?!\\'- ':\n            if ws[-1]:\n                ws.append([])\n        else:\n            ws[-1].append(i)\n    ws=list([''.join(e) for e in ws])\n    for w in ws:\n        next_word,helped_word = words.find(w)\n        if next_word and next_word!=helped_word:\n            ans-=len(next_word)-len(helped_word)-1\n        words.add(w)\nprint(ans)\n", "# python3\n# utf-8\n\nclass Trie:\n    def __init__(self):\n        self.letter___node = {}\n        self.words_nr = 0\n\n    def add_word(self, word):\n        word = word + '$'\n        curr_node = self\n        for letter in word:\n            if letter not in curr_node.letter___node:\n                curr_node.letter___node[letter] = Trie()\n            curr_node.words_nr += 1\n            curr_node = curr_node.letter___node[letter]\n\n    def check_word(self, word):\n        word = word + '$'\n        curr_node = self\n        for letter in word:\n            if letter not in curr_node.letter___node:\n                return False\n            curr_node = curr_node.letter___node[letter]\n        return True\n\n    def count_word(self, word):\n        word = word + '$'\n        curr_node = self\n        curr_state = 0\n        presses_saved = 0\n        for letter in word:\n            if letter not in curr_node.letter___node:\n                if curr_state == 1:\n                    # print(presses_saved)\n                    if '$' in curr_node.letter___node:\n                        return min(len(word) - 1,\n                            len(word) - 1 - presses_saved + 1\n                        )\n                    else:\n                        return len(word) - 1\n                if curr_state == 0:\n                    return len(word) - 1\n            if curr_node.words_nr > 1:\n                curr_node = curr_node.letter___node[letter]\n            elif curr_node.words_nr == 1:\n                # print(letter, presses_saved)\n                if curr_state == 0:\n                    curr_state = 1\n                presses_saved += 1\n                curr_node = curr_node.letter___node[letter]\n            elif curr_node.words_nr == 0:\n                if curr_state == 1:\n                    return min(len(word) - 1,\n                        len(word) - 1 - presses_saved + 1\n                    )\n                elif curr_state == 0:\n                    return len(word) - 1\n        if curr_node.words_nr == 0:\n            presses_saved -= 1\n            if curr_state == 1:\n                return min(len(word) - 1,\n                    len(word) - 1 - presses_saved + 1\n                )\n            elif curr_state == 0:\n                return len(word) - 1\n\n\n\n\ntext = ''\nwhile(1):\n    try:\n        line = input()\n        if line == '':\n            raise Exception('e')\n        text += line + '\\n'\n    except:\n        break\n# print(text)\nans = 0\nsyms = ['\\n', '.', ',', '?', '!', \"'\", '-']\nfor sym in syms:\n    text = text.replace(sym, ' ')\nans += text.count(' ')\nidx___word = text.split(' ')\nroot = Trie()\nroot.add_word('$')\nroot.add_word('$$')\nfor word in idx___word:\n    if word == '':\n        continue\n    count = root.count_word(word)\n    check = root.check_word(word)\n    # print(word, check, count)\n    ans += count\n    if not check:\n        root.add_word(word)\n\nprint(ans)\n", "import sys\nimport re\n\nSEPARATORS = \"[.,? !'-]\"\n\nclass TrieNode(object):\n    def __init__(self):\n        self.terminal = False\n        self.go = {}\n        self.count = 0\n\ndef insert(node, s):\n    nodes = [node]\n    unique, auto = 0, 0\n    for c in s:\n        if c not in node.go:\n            node.go[c] = TrieNode()\n        node = node.go[c]\n        nodes.append(node)\n        \n        if node.count == 1:\n            unique += 1\n        if node.terminal:\n            auto = max(unique - 2, 0)\n            \n    if not node.terminal:\n        node.terminal = True\n        for node in nodes:\n            node.count += 1\n    return auto\n\nroot = TrieNode()\nanswer = 0\nfor line in sys.stdin:\n    answer += len(line)\n    for word in [_f for _f in re.split(SEPARATORS, line.strip()) if _f]:\n        answer -= insert(root, word)\nprint(answer)\n", "import sys\nimport re\n\nSEPARATORS = \"[.,? !'-]\"\n\nclass TrieNode(object):\n    def __init__(self):\n        self.terminal = False\n        self.go = {}\n        self.count = 0\n\ndef insert(node, s):\n    nodes = [node]\n    unique, auto = 0, 0\n    for c in s:\n        if c not in node.go:\n            node.go[c] = TrieNode()\n        node = node.go[c]\n        nodes.append(node)\n        \n        if node.count == 1:\n            unique += 1\n        if node.terminal:\n            auto = max(unique - 2, 0)\n            \n    if not node.terminal:\n        node.terminal = True\n        for node in nodes:\n            node.count += 1\n    return auto\n\nroot = TrieNode()\nanswer = 0\nfor line in sys.stdin:\n    answer += len(line)\n    for word in [_f for _f in re.split(SEPARATORS, line.strip()) if _f]:\n        answer -= insert(root, word)\nprint(answer)\n"]