["x=int(input())\nif(x==2):\n    print(1)\nelse:\n    x-=1\n    cnt=0\n    for i in range(1,x):\n        ok=0\n        for j in range(2,i+1):\n            if(x%j==0 and i%j==0): ok=1\n        if(ok==0) :cnt+=1\n    print(cnt)\n", "p = int(input())\n\ndef f(x, p):\n    y = 1\n    for i in range(p - 2):\n        y = (y * x) % p\n        if y == 1: return False\n    return (y * x) % p == 1\n\nprint(sum(f(x, p) for x in range(1, p)))", "def phi(n):\n    t, i = n, 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            while n % i == 0: n //= i\n            t -= t // i\n        i += 1\n    return t - t // n if n > 1 else t\nprint(phi(int(input()) - 1))", "import sys\nimport fractions\n\ndef phi(n):\n    amount = 0\n\n    for k in range(1, n + 1):\n        if fractions.gcd(n, k) == 1:\n            amount += 1\n\n    return amount\n\ndef solve():\n    p = int(input())\n    return phi(p-1)\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    # if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\nimport fractions\n\ndef phi(n):\n    amount = 0\n\n    for k in range(1, n + 1):\n        if fractions.gcd(n, k) == 1:\n            amount += 1\n\n    return amount\n\ndef solve():\n    p = int(input())\n    return phi(p-1)\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    # if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "t=0\nfrom fractions import gcd\n\nx=int(input())-1\nfor i in range(1, x+1):\n     if gcd(x, i)==1:\n          t+=1\nprint(t)\n", "from fractions import gcd\ntt=0\n#phi(p-1)\nx=int(input())\nx-=1\nfor i in range(1, x+1):\n    if gcd(x,i)==1:\n        tt+=1\nprint(tt)\n", "from pprint import pprint\n\ndef fatoresPrimos(x):\n\tfatores = {}\n\n\tif (x in primeSet):\n\t\tfatores[x] = 1\n\t\treturn fatores\n\n\ti = 0\n\tatual = x\n\twhile (primes[i] < x):\n\t\tp = primes[i]\n\t\tif (atual % p == 0):\n\t\t\tatual = atual / p\n\t\t\tif (p in fatores):\n\t\t\t\tfatores[p] += 1\n\t\t\telse:\n\t\t\t\tfatores[p] = 1\n\t\telse:\n\t\t\ti += 1\n\n\treturn fatores\n\ndef phi(x):\n\n\tf = fatoresPrimos(x)\n\n\tres = 1\n\n\tfor i in list(f.keys()):\n\t\tres *= i ** f[i] * (1 - 1 / i)\n\n\treturn int(res)\n\n\n\np = int(input())\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003]\nprimeSet = set(primes)\nn = len(primes)\n\nprint(phi(phi(p)))\n", "def fatoresPrimos(x):\n\tfatores = {}\n\n\tif (x in primeSet):\n\t\tfatores[x] = 1\n\t\treturn fatores\n\n\ti = 0\n\tatual = x\n\twhile (primes[i] < x):\n\t\tp = primes[i]\n\t\tif (atual % p == 0):\n\t\t\tatual = atual / p\n\t\t\tif (p in fatores):\n\t\t\t\tfatores[p] += 1\n\t\t\telse:\n\t\t\t\tfatores[p] = 1\n\t\telse:\n\t\t\ti += 1\n\n\treturn fatores\n\ndef phi(x):\n\n\tf = fatoresPrimos(x)\n\n\tres = 1\n\n\tfor i in list(f.keys()):\n\t\tres *= i ** f[i] * (1 - 1 / i)\n\n\treturn int(res)\n\n\n\np = int(input())\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003]\nprimeSet = set(primes)\nn = len(primes)\n\nprint(phi(phi(p)))\n", "def main():\n    p = int(input())\n    if p < 5:\n        print(1 )\n        return\n    res, r = 0, list(range(p - 2))\n    for x in range(2, p):\n        xx = x\n        for _ in r:\n            xx %= p\n            if xx == 1:\n                break\n            xx *= x\n        else:\n            if xx % p == 1:\n                res += 1\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "p = int(input()) - 1\ndef hcf(a, b):\n    if a is 0:\n        return b\n    else:\n        return hcf(b % a, a)\ncnt = 0\nfor i in range(1, p + 1):\n    if hcf(i, p) is 1:\n        cnt += 1\nprint(cnt)\n", "import math\nsol = 0\np=int(input())\nfor e in range(1, p):\n     if math.gcd(p-1, e) == 1:\n          sol+=1\nprint(sol)", "n=int(input())\nif(n==2):\n    print(1)\n    return\nn-=1\nres=0\nfor i in range(1,n):\n    chk=True\n    for j in range(2,i+1):\n        if(n%j==0 and i%j==0): \n            chk=False\n    if(chk):\n        res+=1\nprint(res)", "p = int(input())\n\nans = 0\n\nfor i in range(1, p):\n\tt = 1\n\tfor j in range(1, p - 1):\n\t\tt = t * i % p\n\t\tif (t - 1) % p == 0:\n\t\t\tbreak\n\telse:\n\t\tt = t * i % p\n\t\tif (t - 1) % p == 0:\n\t\t\tans += 1\n\nprint(ans)\n", "def toi(n):\n  pre = n - 1\n  ans =  1 \n  for i in range(2,2000):\n    c = 0\n    if pre%i==0:\n      while pre%i == 0:\n        c +=1\n        pre//=i\n      ans*=(i-1)*(i**(c-1))\n    i+=1\n  return int(ans)\n  \nn = int(input())\nprint(toi(n))", "def f(p):\n    ans = 0\n    for x in range(1, p):\n        good = True\n        y = x\n        for i in range(1, p - 1):\n            if y == 1:\n                good = False\n                break\n            y = (y * x) % p\n        if y != 1:\n            good = False\n        if good:\n            ans += 1\n    return ans\n\nprint(f(int(input())))\n", "p=int(input())\nif p == 2:\n    print(1)\n    return\nans=0\nfor x in range(1,p):\n    m=x%p\n    if m==1:\n        if x==2:\n            q=True\n        else:\n            q=False\n    else:\n        q=False\n        for i in range(2,p):\n            m=(m*x)%p\n            if m==1:\n                if i==p-1:\n                    q=True\n                break\n    ans+=q\nprint(ans)\n    \n", "p=int(input())\nif p == 2:\n    print(1)\n    return\nans=0\nfor x in range(1,p):\n    m=x%p\n    if m==1:\n        if x==2:\n            q=True\n        else:\n            q=False\n    else:\n        q=False\n        for i in range(2,p):\n            m=(m*x)%p\n            if m==1:\n                if i==p-1:\n                    q=True\n                break\n    ans+=q\nprint(ans)\n    \n", "p=int(input())\ncount=0\nfor i in range(1,p):\n\tz,x=1,1\n\tfor j in range(1,p-1):\n\t\tx*=i\n\t\tx%=p\n\t\tif x==1:\n\t\t\tz=0\n\t\t\tbreak\n\tif z==1:\n\t\tx*=i\n\t\tx%=p\n\t\tif x==1:\n\t\t\tcount+=1\nprint(count)\n\t\n", "# python 3\n\"\"\"\nModular arithmetic:\nThis has something to do with Extended Euclidean Algorithm\n\"\"\"\n\n\ndef cows_and_primitive_roots(p_int):\n    if p_int == 2:\n        return 1\n    count = 0\n    for x in range(2, p_int):\n        x_to_i_mod_p = x\n        divisible = False\n        for i in range(2, p_int-1):\n            x_to_i_mod_p = (x * x_to_i_mod_p) % p_int\n            if x_to_i_mod_p == 1:\n                divisible = True\n                break\n        if not divisible:\n            count += 1\n            # print(x)\n\n    return count\n\n\ndef __starting_point():\n    \"\"\"\n    Inside of this is the test. \n    Outside is the API\n    \"\"\"\n    p = int(input())\n\n    print(cows_and_primitive_roots(p))\n\n__starting_point()", "from math import gcd\n\nn = int(input().strip())\ncount = 0\nfor i in range(1, n):\n    if gcd(i, n - 1) == 1:\n        count += 1\n        #print(i)\nprint(count)", "def prim_roots(number):\n    if number == 2:\n        return 1\n    elif number == 4:\n        return 2\n    z, h = 1, 2\n    p = list()\n    while h < number:\n        k = pow(h, z, number)\n        while k > 1:\n            z += 1\n            k = (k * h) % number\n        if z == number - 1:\n            p.append(h)\n        z = 1\n        h += 1\n    return len(p)\n\n\nprint(prim_roots(int(input())))", "from fractions import gcd\n\ntt=0\n\n#phi(p-1)\n\nx=int(input())\n\nx-=1\n\nfor i in range(1, x+1):\n\n    if gcd(x,i)==1:\n\n        tt+=1\n\nprint(tt)\n\n", "from math import gcd \np=int(input())-1\ncnt=0 \nfor i in range(1,p):\n    if gcd(i,p)==1: cnt+=1 \nprint(cnt if p!=1 else 1)", "p = int(input())\ndef gcd(a,b): \n      \n    # Everything divides 0  \n    if (b == 0): \n         return a \n    return gcd(b, a%b) \n\nc = 0\nfor i in range(1,p) :\n  if gcd(p-1,i) == 1 :\n    \n    c += 1\n    \nprint(c)"]