["n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nfed_left = {0 : a[0]}\nnot_fed_left = {0 : b[0]}\n\nfor i in range(1, n):\n\tfed_left[i] = max(fed_left[i-1] + b[i], not_fed_left[i-1] + a[i]) # max(fed left, fed right)\n\tnot_fed_left[i] = max(fed_left[i-1] + c[i], not_fed_left[i-1] + b[i]) # max(fed left and right, fed right)\n\nprint(fed_left[n-1])\n", "n = int( input() )\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nc = [int(x) for x in input().split()]\n\nDD = a[0]\nDP = b[0]\nPD = a[0]\nPP = b[0]\n\nfor i in range(1,n):\n\ttDD = max(DP+a[i], PP+a[i])\n\ttPD = max(PD+b[i], DD+b[i])\n\ttDP = max(DP+b[i], PP+b[i])\n\ttPP = max(PD+c[i], DD+c[i])\n\t\n\tDD = tDD\n\tPD = tPD\n\tDP = tDP\n\tPP = tPP\n\t\nif n==1:\n\tsol = DD\nelse:\n\tsol = max(DD, PD)\n\nprint( sol )\n", "n = int(input())\nt = [list(map(int, input().split())) for i in range(3)]\nt = list(zip(*t))\n\nF = {}\ndef g(i, j, k):\n    if j - i == 1: return t[i][1]\n    a, b, c = t[k]\n    t[k] = (b, c, 0)\n    s = f(i, j)\n    t[k] = (a, b, c)\n    return s\n    \ndef f(i, j):\n    if (i, j, t[i], t[j - 1]) in F: return F[(i, j, t[i], t[j - 1])]\n    if j - i == 1: return t[i][0]\n    k = (i + j) // 2\n    F[(i, j, t[i], t[j - 1])] = max(f(i, k) + g(k, j, k), g(i, k, k - 1) + f(k, j))\n    return F[(i, j, t[i], t[j - 1])]\n\nprint(f(0, n)) ", "n = int(input())\na, b, c = (list(map(int, input().split())) for i in range(3))\nu, v = a[0], b[0]\nfor i in range(1, n): u, v = max(v + a[i], u + b[i]), max(v + b[i], u + c[i])\nprint(u)", "n = int(input())\na, b, c = (list(map(int, input().split())) for i in range(3))\nd1, d2 = a[0], b[0]\nfor i in range(1, n):\n    d1, d2 = max(d2 + a[i], d1 + b[i]), max(d2 + b[i], d1 + c[i])\nprint(d1)", "n = int(input())\na, b, c = (list(map(int, input().split())) for i in range(3))\nd1, d2 = a[0], b[0]\nfor i in range(1, n):\n    d1, d2 = max(d2 + a[i], d1 + b[i]), max(d2 + b[i], d1 + c[i])\n    \n\nprint(d1)", "from sys import setrecursionlimit\nsetrecursionlimit(10 ** 6)\ndef dynamic(i, fed):\n    if d[i][fed] is not None:\n        return d[i][fed]\n    if fed:\n        d[i][fed] = max(b[i] + dynamic(i + 1, True), c[i] + dynamic(i + 1, False))\n    else:\n        d[i][fed] = max(a[i] + dynamic(i + 1, True), b[i] + dynamic(i + 1, False))\n    return d[i][fed]\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\nd = [[None, None] for i in range(n)]\nd[n - 1] = [a[n - 1], b[n - 1]]\nprint(dynamic(0, False))", "n = int(input())\na, b, c = (list(map(int, input().split())) for i in range(3))\n\nd1, d2 = a[0], b[0]\nfor i in range(1, n):\n    d1, d2 = max(d2 + a[i], d1 + b[i]), max(d2 + b[i], d1 + c[i])\nprint(d1)", "n = int(input())\na, b, c = (list(map(int, input().split())) for i in range(3))\n\nd1, d2 = a[0], b[0]\nfor i in range(1, n):\n    d1, d2 = max(d2 + a[i], d1 + b[i]), max(d2 + b[i], d1 + c[i])\n    \nprint(d1)", "n=int(input())\na=list(map(int,input().strip().split()))\nb=list(map(int,input().strip().split()))\nc=list(map(int,input().strip().split()))\nd1,d2=a[0],b[0]\nfor i in range(1,n):\n    d1,d2=max(d1+b[i],d2+a[i]),max(d1+c[i],d2+b[i])\nprint (d1)", "\"\"\"\nCreated on Fri Jan 18 12:23:03 2019\n\n@author: nm57315\n\"\"\"\n\nn = int(input())\na,b,c = (list(map(int,input().strip().split())) for x in range(3))\nd,e = a[0],b[0]\nfor x in range(1,n):\n    d,e = max(e+a[x],d+b[x]),max(e+b[x],d+c[x])\nprint(d)", "n = int(input())\nR = lambda: [int(i) for i in input().split()]\na, b, c = R(), R(), R()\nx, y = a[0], b[0]\nfor i in range(1, n):\n    x, y = max(a[i] + y, b[i] + x), max(b[i] + y, c[i] + x)\nprint(x)", "def main():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    c = list(map(int, input().split(' ')))\n    d0 = [0]*n\n    d0[n-1] = a[n-1]\n    d1 = [0]*n\n    d1[n-1] = b[n-1]\n\n    for i in range(n-2, -1, -1):\n        d0[i] = max(a[i]+d1[i+1], b[i]+d0[i+1])\n        d1[i] = max(b[i]+d1[i+1], c[i]+d0[i+1])\n    print(d0[0])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\n\nclass Solution():\n\tdef max_radiance(n, a, b, c):\n\t\tdp = [[0 for i in range(2)] for j in range(n+1)]\n\t\tdp[n-1][0] = a[n-1]\n\t\tdp[n-1][1] = b[n-1]\n\n\n\t\t# dp[i][0] - Max radiance for range [i:] when none on the left is yet fed\n\t\t# dp[i][1] - Max radiance for range [i:] when one of the left is fed\n\t\t\n\t\tfor i in range(n-2, -1, -1):\n\t\t\tdp[i][0] = max(a[i]+dp[i+1][1], b[i]+dp[i+1][0])\n\t\t\tdp[i][1] = max(b[i]+dp[i+1][1], c[i]+dp[i+1][0])\n\n\t\treturn dp[0][0]\n\nn = int(input())\n\na = list(map(int, input().strip(' ').split(' ')))\nb = list(map(int, input().strip(' ').split(' ')))\nc = list(map(int, input().strip(' ').split(' ')))\n\nprint(Solution.max_radiance(n, a, b, c))\n"]