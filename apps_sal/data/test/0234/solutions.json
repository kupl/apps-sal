["r, c = list(map(int, input().split()))\n\nb = [list(input()) for i in range(r)]\nfor y in range(r):\n    for x in range(c):\n        if b[y][x] == '.':\n            b[y][x] = '0'\n\nok = True\nfor Y in range(r):\n    for X in range(c):\n        if not b[Y][X].isdigit():\n            continue\n        p = 0\n        for dy in range(-1, 2):\n            for dx in range(-1, 2):\n                y = Y + dy\n                x = X + dx\n                if 0 <= y < r and 0 <= x < c:\n                    p += b[y][x] == '*'\n        if p != int(b[Y][X]):\n            ok = False\n\nprint([\"NO\", \"YES\"][ok])\n", "import sys\nimport io\n\nstream_enable = 0\n\ninpstream = \"\"\"\n2 4\n*.*.\n1211\n\"\"\"\n\nif stream_enable:\n    sys.stdin = io.StringIO(inpstream)\n    input()\n\ndef inpmap():\n    return list(map(int, input().split()))\n\nn, m = inpmap()\narr = []\nfor i in range(n):\n    arr.append(list(input()))\n# print(arr)\nfor i in range(n):\n    for j in range(m):\n        if arr[i][j] == \"*\":\n            continue\n        bomb = 0\n        for x, y in ((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 1), (1, 0)):\n            ii, jj = i + x, j + y\n            if 0 <= ii < n and 0 <= jj < m:\n                bomb += arr[ii][jj] == \"*\"\n        # print(i, j, bomb)\n        if bomb == 0 and arr[i][j] == '.' or arr[i][j].isdigit() and int(arr[i][j]) == bomb:\n            pass\n        else:\n            print(\"NO\")\n            return\nprint(\"YES\")\n\n", "n,m = list(map(int,input().split()))\na =[]\nfor i in range(n):\n    a.append(input())\nf = 1\nfor i in range(n):\n    for j in range(m):\n        c = 0\n        if a[i][j] == '.':t=0\n        elif a[i][j] == '*':t=-1\n        else:t=int(a[i][j])\n        if t!= -1:\n            for k1 in range(-1,2):\n                for k2 in range(-1,2):\n                    if (0 <= i+k1 < n)and(0 <= j+k2 <m):\n                        if a[i+k1][j+k2] == '*':c+=1\n            if c!=t:\n                f = 0\n                break\n\nif f:print('YES')\nelse:print('NO')\n", "n, m = list(map(int, input().split()))\narr = [[0 for i in range(m)] for j in range(n)]\nfl = 0\nfor i in range(n):\n    mass = input()\n    for j in range(m):\n        if mass[j] == '.':\n            arr[i][j] = 0\n        elif mass[j] == '*':\n            arr[i][j] = -1\n        else:\n            arr[i][j] = int(mass[j])\n            \nfor i in range(n):\n    for j in range(m):\n        if(arr[i][j] != -1):\n            c = 0\n            for x in range(-1, 2):\n                for y in range(-1, 2):\n                    if(i + x >= 0 and i + x < n and j + y >= 0 and j + y < m):\n                        if(arr[i+x][j+y] == -1):\n                            c += 1\n            if(c != arr[i][j]):\n                fl = 1\nif(fl == 0):\n    print('YES')\nelse:\n    print(\"NO\")\n                    \n", "def go():\n    n, m = (int(i) for i in input().split(' '))\n    board = []\n    for i in range(n):\n        board.append([i for i in input()])\n\n    def get_neighbour_bombs(i, j):\n        total = 0\n        for k in [-1, 0, 1]:\n            for l in [-1, 0, 1]:\n                if i + k >= n:\n                    continue\n                if i + k < 0:\n                    continue\n                if j + l >= m:\n                    continue\n                if j + l < 0:\n                    continue\n                if board[i + k][j + l] == '*':\n                    total += 1\n        return total\n\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] != '*':\n                if board[i][j] == '.':\n                    value = 0\n                else:\n                    value = int(board[i][j])\n                if value != get_neighbour_bombs(i, j):\n                    return 'NO'\n    return 'YES'\nprint(go())\n", "n, m = list(map(int, input().split()))\n\nboard = [list(input()) for _ in range(n)]\n\nns = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n\nvalid = True\n\nfor x, row in enumerate(board):\n    for y, c in enumerate(row):\n        b = 0\n        for (dx, dy) in ns:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(board) and 0 <= ny < len(row):\n                if board[nx][ny] == '*':\n                    b += 1\n        xx = '.' if b == 0 else str(b)\n        if c != '*' and xx != c:\n            valid = False\n\nprint('YES' if valid else 'NO')\n", "arr = []\n\ndef valid(i, j):\n    bombs = 0\n    if arr[i][j] == '*':\n        return True\n    if i != len(arr) - 1:\n        if arr[i + 1][j] == '*':\n            bombs += 1\n    if i != 0:\n        if arr[i - 1][j] == '*':\n            bombs += 1\n    if j != len(arr[0]) - 1:\n        if arr[i][j + 1] == '*':\n            bombs += 1\n    if j != 0:\n        if arr[i][j - 1] == '*':\n            bombs += 1\n    if i != 0 and j != 0:\n        if arr[i-1][j - 1] == '*':\n            bombs += 1\n    if i != 0 and j != len(arr[0]) - 1:\n        if arr[i-1][j + 1] == '*':\n            bombs += 1\n    if i != len(arr) - 1 and j != 0:\n        if arr[i+1][j - 1] == '*':\n            bombs += 1\n    if i != len(arr) - 1 and j != len(arr[0]) - 1:\n        if arr[i+1][j + 1] == '*':\n            bombs += 1\n    if bombs == 0 and (arr[i][j] == '.'):\n        return True\n    if arr[i][j] == '.':\n        return False\n    if int(arr[i][j]) == bombs:\n        return True\n    return False\n\n\nn, m = list(map(int, input().split()))\n\n\nfor i in range(n):\n    line = input()\n    arr2 = []\n    for j in range(m):\n        arr2.append(line[j:j+1])\n    arr.append(arr2)\n\nans = \"YES\"\n\nfor i in range(n):\n    for j in range(m):\n        if not valid(i, j):\n            ans = \"NO\"\n\nprint(ans)\n\n\n", "n, m = map(int, input().split())\nnum = ['.' * (m + 2)]\nfor i in range(n):\n    s = '.'\n    s += input()\n    s += '.'\n    num.append(s)\nflag = True\nnum.append('.' * (m + 2))\nans = 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if num[i][j] == '.':\n            if num[i - 1][j] != '*' and num[i - 1][j - 1] != '*' and num[i - 1][j + 1] != '*' and num[i][j - 1] != '*' and num[i][j + 1] != '*' and num[i + 1][j - 1] != '*' and num[i + 1][j] != '*' and num[i + 1][j + 1] != '*':\n                ans += 1\n            else:\n                flag = False\n        if num[i][j] != '.' and num[i][j] != '*':\n            x = int(num[i][j])\n            if num[i - 1][j] == '*':\n                x -= 1\n            if num[i - 1][j - 1] == '*':\n                x -= 1\n            if num[i - 1][j + 1] == '*':\n                x -= 1\n            if num[i][j - 1] == '*':\n                x -= 1\n            if num[i][j + 1] == '*':\n                x -= 1\n            if num[i + 1][j - 1] == '*':\n                x -= 1\n            if num[i + 1][j] == '*':\n                x -= 1\n            if num[i + 1][j + 1] == '*':\n                x -= 1\n            if x != 0:\n                flag = False\nif not flag:\n    print('NO')\nelse:\n    print('YES')", "n, m = [int(i) for i in input().split()]\nfield = []\nbomb = []\nfor i in range(n):\n\tfield.append([])\n\tdata = input()\n\tcount = 0\n\tfor j in data:\n\t\tif j == \".\":\n\t\t\tj = \"0\"\n\t\tif j == \"*\":\n\t\t\tbomb.append([i,count])\n\t\t\tj = \"-1\"\n\t\tfield[i].append(int(j))\n\t\tcount += 1\n\nans = []\nfor i in range(n):\n\tans.append([])\n\tfor j in range(m):\n\t\tans[i].append(0)\n\ndirectx = [-1, -1, -1, 0, 0, 0, 1, 1, 1]\ndirecty = [-1, 0, 1, -1, 0, 1, -1, 0, 1]\nfor i in bomb:\n\tx = i[0]\n\ty = i[1]\n\tans[x][y] = -1\n\tfor j in range(9):\n\t\tx1 = directx[j] + x\n\t\ty1 = directy[j] + y\n\t\tif (0 <= x1 < n) and (0 <= y1 < m):\n\t\t\tif ans[x1][y1] != -1:\n\t\t\t\tans[x1][y1] += 1\n\nfor i in range(n):\n\tfor j in range(m):\n\t\tif ans[i][j] != field[i][j]:\n\t\t\tprint(\"NO\")\n\t\t\tquit()\nprint(\"YES\")\n\n\n", "def check(board):\n\trows, cols = len(board), len(board[0])\n\n\tduv = [(0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1)]\n\tfor i, row in enumerate(board):\n\t\tfor j, x in enumerate(row):\n\t\t\tif '0' <= x <= '8':\n\t\t\t\tcnt = 0\n\t\t\t\tfor du, dv in duv:\n\t\t\t\t\tu, v = i + du, j + dv\n\t\t\t\t\tif 0 <= u < rows and 0 <= v < cols and board[u][v] == '*':\n\t\t\t\t\t\tcnt += 1\n\t\t\t\tif int(x) != cnt:\n\t\t\t\t\treturn False\n\treturn True\n\ndef main():\n\trows, cols = map(int, input().split())\n\t\n\tboard = []\n\tfor _ in range(rows):\n\t\tline = input().strip()\n\n\t\tboard.append(['0' if c == '.' else c for c in line])\n\n\n\tif check(board):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n\ndef __starting_point():\n\tmain()\n__starting_point()", "n, m = list(map(int, input().split()))\narr = [[0 for _ in range(m + 2)]] + [[] for _ in range(n)] + [[0 for _ in range(m + 2)]]\n\nfor i in range(1, n + 1):\n    s = input()\n    arr[i].append(0)\n    for j in s:\n        if j == '*':\n            arr[i].append(-1)\n        elif j == '.':\n            arr[i].append(0)\n        else:\n            arr[i].append(int(j))\n    arr[i].append(0)\n    \nflag = True\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        #print(i, j, ((arr[i - 1][j - 1] == -1) + (arr[i - 1][j] == -1) + (arr[i - 1][j + 1] == -1) +\\\n        #   (arr[i][j - 1] == -1) + (arr[i][j + 1] == -1) +\\\n        #   (arr[i + 1][j - 1] == -1) + (arr[i + 1][j] == -1) + (arr[i + 1][j + 1] == -1)))\n        if (arr[i][j] != -1) and (((arr[i - 1][j - 1] == -1) + (arr[i - 1][j] == -1) + (arr[i - 1][j + 1] == -1) +\\\n           (arr[i][j - 1] == -1) + (arr[i][j + 1] == -1) +\\\n           (arr[i + 1][j - 1] == -1) + (arr[i + 1][j] == -1) + (arr[i + 1][j + 1] == -1)) != arr[i][j]):\n            flag = False\n            break\n    if not flag:\n        break\nif flag:\n    print('YES')\nelse:\n    print('NO')\n", "n, m = list(map(int, input().split()))\nf = [list(input()) for _ in range(n)]\n\nans = \"YES\"\ncnt = [[0 for _ in range(m)] for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if f[i][j] != '*':\n            continue\n        for di in range(-1, 2):\n            for dj in range(-1, 2):\n                if 0 < abs(di) + abs(dj) and 0 <= i + di < n and 0 <= j + dj < m:\n                    cnt[i + di][j + dj] += 1\nfor i in range(n):\n    for j in range(m):\n        if f[i][j] == '.':\n            if cnt[i][j] != 0:\n                ans = \"NO\"\n        elif f[i][j] != '*':\n            if cnt[i][j] != int(f[i][j]):\n                ans = \"NO\"\nprint(ans)\n", "def pos(x,num):\n    if x < 0:\n        return -1\n    elif x >= num:\n        return -1\n    return x\ndef check(x,y,ai,n,m):\n    num = 0\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if i == 0 and j == 0:\n                continue\n            if pos(x+i,n) == -1 or pos(y+j,m) == -1:\n                continue\n            if ai[pos(x+i,n)][pos(y+j,m)] == \"*\":\n                num += 1\n    return num\nn, m = list(map(int,input().split()))\nai = [input() for i in range(n)]\nans = 1\nfor i in range(n):\n    for j in range(m):\n        if ai[i][j] == \"*\":\n            continue\n        temp = 0\n        if ai[i][j] != \".\":\n            temp = int(ai[i][j])\n        if temp != check(i,j,ai,n,m):\n            ans = 0\nif ans == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "def bad_num(k):\n    tb = 0\n    for x in [-1, 0, 1]:\n        for y in [-1, 0, 1]:\n            if pole[i+x][j+y] == '*':\n                tb +=1\n    return tb == k\n\nn, m = list(map(int, input().split()))\npole = []\nfor i in range(n):\n    arr = list(input().strip())\n    arr.append('.')\n    pole.append(arr)\npole.append('.'*(m+1))\n\nfor i in range(n):\n    for j in range(m):\n        cur = pole[i][j]\n        if cur == '.':\n            cur = '0'\n        if cur in '0123456789':\n            if bad_num(int(cur)):\n                continue\n            else:\n                print('NO')\n                return\n        elif cur != '*':\n            print('NO')\n            return\n\nprint('YES')\n", "m,n = list(map(int,input().split()))\nR = ['.']*m\nnR = [[0]*n for i in range(m)]\n\nfor i in range(m):\n    A = list(input())\n    #A.replace('.','0')\n    R[i] = A[:]\n    \nfor i in range(m):\n    for j in range(n):\n        if R[i][j] == '*':\n            for ii in range(-1,2):\n                for jj in range(-1,2):\n                    if ii==0 and jj == 0:\n                        continue\n                    if 0<=i+ii<m and 0<=j+jj<n:\n                        nR[i+ii][j+jj]+=1\n#print(nR)\nv = 1\nfor i in range(m):\n    for j in range(n):\n        if R[i][j]=='*':\n            continue\n        if R[i][j] == '.':\n            if nR[i][j]!=0:\n                v=0\n            continue\n        if int(R[i][j])!=nR[i][j]:\n            v=0\n\n\nif v == 1:\n    print('YES')\nelse:\n    print('NO')\n", "n,m = [int(s) for s in input().split(' ')]\n\na = []\n\na.append(\"x\"*(m+2))\nfor i in range(n):\n    a.append((\"x\"+input()+\"x\").replace('.','0'))\na.append(\"x\"*(m+2))\n\nn = n+2\nm = m+2\n\nall_ok = True\n\nfor i in range(1, n - 1):\n    if not all_ok:\n        break\n    for j in range(1, m - 1):\n        if not all_ok:\n            break\n            \n        if a[i][j] == 'x' or a[i][j] == '*':\n            continue\n        ssum = 0\n        for p in range(-1,2):\n            for q in range(-1,2):\n                if p == 0 and q == 0:\n                    continue\n                if a[i + p][j + q] == '*':\n                    ssum = ssum + 1\n        if str(ssum) != a[i][j]:\n            all_ok = False\n            break\n        \nif all_ok:\n    print('YES')\nelse:\n    print('NO')", "n,m=list(map(int,input().split()))\na=[]\nfor _ in range(n):\n\ta.append(list(map(str,input().strip())))\n#print(a)\nk=0\nfor i in range(n):\n\tfor j in range(m):\n\t\tp=a[i][j]\n\t\t#print(p)\n\t\tif p=='.':\n\t\t\tif i-1>=0:\n\t\t\t\tif j-1>=0 and a[i-1][j-1]=='*':\n\t\t\t\t\tk=1\n\t\t\t\tif j+1<m and a[i-1][j+1]=='*':\n\t\t\t\t\tk=1\n\t\t\t\tif a[i-1][j]=='*':\n\t\t\t\t\tk=1\n\t\t\tif j-1>=0 and a[i][j-1]=='*':\n\t\t\t\tk=1\n\t\t\tif j+1<m and a[i][j+1]=='*':\n\t\t\t\tk=1\n\t\t\tif i+1<n:\n\t\t\t\tif j-1>=0 and a[i+1][j-1]=='*':\n\t\t\t\t\tk=1\n\t\t\t\tif j+1<m and a[i+1][j+1]=='*':\n\t\t\t\t\tk=1\n\t\t\t\tif a[i+1][j]=='*':\n\t\t\t\t\tk=1\n\t\tif ord(p)>=ord('1') and ord(p)<=ord('8'):\n\t\t\tx=ord(p)-ord('0')\n\t\t\tc=0\n\t\t\tif i-1>=0:\n\t\t\t\tif j-1>=0 and a[i-1][j-1]=='*':\n\t\t\t\t\tc+=1\n\t\t\t\tif j+1<m and a[i-1][j+1]=='*':\n\t\t\t\t\tc+=1\n\t\t\t\tif a[i-1][j]=='*':\n\t\t\t\t\tc+=1\n\t\t\tif j-1>=0 and a[i][j-1]=='*':\n\t\t\t\tc+=1\n\t\t\tif j+1<m and a[i][j+1]=='*':\n\t\t\t\tc+=1\n\t\t\tif i+1<n:\n\t\t\t\tif j-1>=0 and a[i+1][j-1]=='*':\n\t\t\t\t\tc+=1\n\t\t\t\tif j+1<m and a[i+1][j+1]=='*':\n\t\t\t\t\tc+=1\n\t\t\t\tif a[i+1][j]=='*':\n\t\t\t\t\tc+=1\n\t\t\tif c!=x:\n\t\t\t\tk=1\n\t\t\t#print(\"c=%d x=%d\" %(c,x))\n\t\tif k==1:\n\t\t\tbreak\n\tif k==1:\n\t\tbreak\nif k==0:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\t\t\t\t\n\t\n", "T = input().split(' ')\nn = int(T[0])\nm = int(T[1])\nL = []\nM = [0] * (m+2)\nL.append(M)\nfor i in range(n):\n    M = [0] * (m+2)\n    t = input()\n    for j in range(m):\n        if t[j] == '*':\n            M[j+1] = -1\n        elif t[j] != '.':\n            M[j+1] = int(t[j])\n    L.append(M)\nM = [0] * (m+2)\nL.append(M)\nc = True\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        t = 0\n        for a in range(-1, 2):\n            for b in range(-1, 2):\n                if L[i+a][j+b] == -1:\n                    t+=1\n        if L[i][j] != -1 and L[i][j] != t:\n            c = False\n            break\nif c:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "import sys\n\nn, m = map(int, input().split())\nl1 = [list(input()) for i in range(n)]\nl2 = [[0]  * m for i in range(n)]\ndy = [1, 1, 1, 0, -1, -1, -1, 0]\ndx = [-1, 0, 1, 1, 1, 0, -1, -1]\nfor i in range(n):\n    for j in range(m):\n        for q in range(8):\n            if 0 <= i + dy[q] <= n - 1 and 0 <= j + dx[q] <= m - 1 and l1[i + dy[q]][j + dx[q]] == '*':\n                l2[i][j] += 1\nfor i in range(n):\n    for j in range(m):\n        if l1[i][j] != '*' and l1[i][j] != '.' and int(l1[i][j]) != l2[i][j]:\n            print('NO')\n            return\nfor i in range(n):\n    for j in range(m):\n        if l1[i][j] == '.' and l2[i][j] != 0:\n            print('NO')\n            return\nprint('YES')", "import os, sys, math\n\ndef main():\n\t#T = int(input())\n\t#for _ in range(T):\n\ttestcase()\n\ndef testcase():\n\tn,m = [int(x) for x in input().split()]\n\ttable = []\n\tfor i in range(n):\n\t\ttable.append(list(input()))\n\tif solve(table,n,m):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\ndef solve(l,n,m):\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\ttry:\n\t\t\t\tz = int(l[i][j])\t\t\t\t\n\t\t\texcept ValueError:\n\t\t\t\tif l[i][j] == '.':\n\t\t\t\t\tz = 0\n\t\t\t\telse:\n\t\t\t\t\tcontinue\n\t\t\tif z != neighbours(l,i,j):\n\t\t\t\tdebug(\"i,j:\",i,j)\n\t\t\t\treturn False\n\treturn True\n\ndef neighbours(l,i,j):\n\tn = [(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1),(-1,0),(-1,1)]\n\ts = 0\n\tfor x,y in n:\n\t\ttry:\n\t\t\tif j+y>=0 and i+x>=0:\n\t\t\t\ts += (1 if l[i+x][j+y]=='*' else 0)\n\t\texcept IndexError:\n\t\t\tpass\n\treturn s\n\ndef debug(*args):\n\tif 'DEBUG' in os.environ:\n\t\tprint(*args)\n\ndef __starting_point():\n\tmain()\n__starting_point()", "# n,m=int(input().split()[:2])\nn,m=[int(x)for x in input().split()[:2]]\nfd=[[-2 for i in range(m)]for i in range(n)]\ndef inbd(i,j):\n    if i>=0 and i<n and j>=0 and j<m:\n        return (i,j)\n    else:\n        return None\ndef neis(i,j):\n    ans=[inbd(i-1,j-1),inbd(i-1,j),inbd(i-1,j+1),inbd(i,j-1),inbd(i,j+1),inbd(i+1,j-1),inbd(i+1,j),inbd(i+1,j+1)]\n    ans=[x for x in ans if x!=None]\n    return ans\nfor i in range(n):\n    s=input()\n    for j in range(m):\n        c=s[j]\n        if c=='*':\n            fd[i][j]='*'\n        elif c=='.':\n            fd[i][j]=0\n        else:\n            fd[i][j]=int(c)\nfor i in range(n):\n    for j in range(m):\n        if fd[i][j]=='*':\n            for x,y in neis(i,j):\n                if fd[x][y]=='*':\n                    continue\n                fd[x][y]-=1\nfg=True\nfor i in range(n):\n    for j in range(m):\n        if fd[i][j]=='*' or fd[i][j]==0:\n            continue\n        else:\n            fg=False\n# print(fd)\nif fg:\n    print('YES')\nelse:\n    print('NO')", "\nn,m=[int(x) for x in input().strip().split(' ')]\na=[]\nfor _ in range(n):\n\ts=input().strip()\n\tb=[]\n\tfor i in range(m):\n\t\tif s[i]=='*':\n\t\t\tb.append(-100)\n\t\telif s[i]=='.':\n\t\t\tb.append(0)\n\t\telse:\n\t\t\tb.append(int(s[i]))\n\ta.append(b)\n#print(a)\nfor i in range(n):\n\tfor j in range(m):\n\t\tif a[i][j]<=-100:\n\t\t\tif i<n-1 and j<m-1:\n\t\t\t\ta[i+1][j+1]-=1\n\t\t\tif i<n-1 and j>0:\n\t\t\t\ta[i+1][j-1]-=1\n\t\t\tif i>0 and j<m-1:\n\t\t\t\ta[i-1][j+1]-=1\n\t\t\tif i>0 and j>0:\n\t\t\t\ta[i-1][j-1]-=1\n\t\t\tif j<m-1:\n\t\t\t\ta[i][j+1]-=1\n\t\t\tif i<n-1:\n\t\t\t\ta[i+1][j]-=1\n\t\t\tif i>0:\n\t\t\t\ta[i-1][j]-=1\n\t\t\tif j>0:\n\t\t\t\ta[i][j-1]-=1\nans=True\n#print(a)\nfor i in range(n):\n\tif ans==False:\n\t\tbreak\n\tfor j in range(m):\n\t\tif a[i][j]!=0 and a[i][j]>-100:\n\t\t\tans=False\n\t\t\tbreak\nif ans:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "para = input().split(\" \")\npara = [int(e) for e in para]\n\nbig = []\nfor i in range(para[0]):\n    small = input().strip()\n    assert len(small) == para[1]\n    l = []\n    for c in small:\n        if c == \"*\":\n            l.append(100)\n        elif c == \".\":\n            l.append(0)\n        else:\n            assert c in '12345678'\n            l.append(int(c))\n    big.append(l)\n\nfor i in range(len(big)):\n    for j in range(len(big[0])):\n        if big[i][j] > 50:\n            for ii in [i-1, i, i+1]:\n                for jj in [j-1, j, j+1]:\n                    if ii>=0 and ii<len(big) and jj>=0 and jj<len(big[0]):\n                        big[ii][jj] -= 1\n\nresult = True\nfor i in range(len(big)):\n    for j in range(len(big[0])):\n        if big[i][j] == 0 or big[i][j] > 50:\n            continue\n        else:\n            result = False\n            break\n\n    if not result:\n        break\n\nif result:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\n", "a=[]\nn,N=list(map(int,input().split()))\nfor i in range(n):\n    a.append(input())\nfor i in range(n):\n    for j in range(N):\n        m=(i and a[i-1][j]=='*')+(j and a[i][j-1]=='*')+(i<n-1 and a[i+1][j]=='*')+(j<N-1 and a[i][j+1]=='*')+(i and j and a[i-1][j-1]=='*')+(i<n-1 and j<N-1 and a[i+1][j+1]=='*')+(i and j<N-1 and a[i-1][j+1]=='*')+(i<n-1 and j and a[i+1][j-1]=='*')\n        if a[i][j]=='.' and m!=0 or '1'<=a[i][j]<='8' and int(a[i][j])!=m:\n            print('NO')\n            return\nprint('YES')\n        \n            \n    \n"]