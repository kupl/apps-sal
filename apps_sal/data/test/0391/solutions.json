["K = int(input())\nprint((\"-1\" if K & 1 else \"\".join([\"wb\\n\"[2 if k == K else (min(j, k, K - 1 - j,\n    K - 1 - k) ^ i) & 1] for i in range(2) for j in range(K) for k in range(K +\n        1)]) * (K >> 1)))\n", "K = int(input())\nprint((\"-1\" if K & 1 else \"\".join([\"wb\\n\"[2 if k == K else (min(j, k, K - 1 - j,\n    K - 1 - k) ^ i) & 1] for i in range(2) for j in range(K) for k in range(K +\n        1)]) * (K >> 1)))\n", "class CodeforcesTask323ASolution:\n    def __init__(self):\n        self.result = ''\n        self.k = 0\n\n    def read_input(self):\n        self.k = int(input())\n\n    def process_task(self):\n        if self.k % 2:\n            self.result = \"-1\"\n        elif self.k == 2:\n            self.result = \"bb\\nww\\n\\nbb\\nww\"\n        else:\n            level = \"b\"\n            cube = [[[None for y in range(self.k)] for x in range(self.k)] for z in range(self.k)]\n            for z in range(self.k):\n                level = \"w\" if z % 2 else \"b\"\n                for k in range(self.k // 2):\n                    # upper\n                    for x in range(2 * (k + 1)):\n                        cube[z][self.k // 2 - 1 - k][self.k // 2 - 1 - k + x] = level\n                    # lower\n                    for x in range(2 * (k + 1)):\n                        cube[z][self.k // 2 + k][self.k // 2 - 1 - k + x] = level\n                    # left\n                    for y in range(2 * (k + 1)):\n                        cube[z][self.k // 2 - 1 - k + y][self.k // 2 - 1 - k] = level\n                    # right\n                    for y in range(2 * (k + 1)):\n                        cube[z][self.k // 2 - 1 - k + y][self.k // 2 + k] = level\n                    level = \"w\" if level == \"b\" else \"b\"\n\n            for layer in cube:\n                for row in layer:\n                    print(\"\".join(row))\n                print(\" \")\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask323ASolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()"]