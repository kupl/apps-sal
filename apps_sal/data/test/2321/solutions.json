["#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\n\nisdebug = False\ntry :\n    #raise ModuleNotFoundError\n    import pylint\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\n    isdebug = True\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\ndef red_inout():\n    inId = 0\n    outId = 0\n    if not isdebug:\n        inId = 0\n        outId = 0\n    if inId>0:\n        dprint('use input', inId)\n        try:\n            f = open('input'+ str(inId) + '.txt', 'r')\n            sys.stdin = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n        except Exception:\n            dprint('invalid input file')\n    if outId>0:\n        dprint('use output', outId)\n        try:\n            f = open('stdout'+ str(outId) + '.txt', 'w')\n            sys.stdout = f #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n        except Exception:\n            dprint('invalid output file')\n            \n        atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n\nif isdebug and len(sys.argv) == 1:\n    red_inout()\n\ndef getIntList():\n    return list(map(int, input().split()))            \n\ndef solve(): \n    pass\n    \nT_ = 1    \nT_, = getIntList()\n\nfor iii_ in range(T_):\n    #solve()\n    N,  = getIntList()\n    #print(N)\n    s = input()\n    r = 0\n    for i in range(N):\n        if s[i] =='>':\n            r = i\n            break\n    r1 = 0\n    for i in range(N-1, -1, -1):\n        if s[i]=='<':\n            r1 = N-1-i\n            break\n    print(min(r,r1))\n", "ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\n\nfor _ in range(ii()):\n    n = ii()\n    s = input().strip()\n    c1 = c2 = 0\n    for c in s:\n        if c == '<':\n            c1 += 1\n        else:\n            break\n    for c in s[::-1]:\n        if c == '>':\n            c2 += 1\n        else:\n            break\n    print(min(c1, c2))", "t = int(input())\nfor _ in range(t):\n    input()\n    s = input()\n    pref_len = 0\n    for c in s:\n        if c != '<':\n            break\n        pref_len += 1\n    suf_len = 0\n    for c in reversed(s):\n        if c != '>':\n            break\n        suf_len += 1\n    print(min(suf_len, pref_len))\n", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    a, b = 999999999, 9999999999\n    if '>' in s:\n        a = s.index('>')\n    if '<' in s:\n        b = n - 1 - s.rindex('<')\n    print(min(a, b))\n", "for i in range(int(input())):\n    x = int(input())\n    y = input()\n    print(min(y.index(\">\")if \">\"in y else 10000000, y[::-1].index(\"<\") if \"<\" in y else 100000000))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    num = s.find(\">\")\n    num2 = s.rfind(\"<\")\n    if num == -1 or num2 == -1:\n        print(0)\n    else:\n        print(min(num,n - 1 - num2))\n", "t=int(input())\nfor _ in range(t):\n         n=int(input())\n         s=input()\n         ans1=n\n         ans2=n\n         for i in range(n):\n                  if(s[i]=='>'):\n                           ans1=i\n                           break\n         for i in range(n):\n                  if(s[i]=='<'):\n                           ans2=n-i-1\n         print(min(ans1,ans2))", "Q = int(input())\n\nfor _ in range(Q):\n    N = int(input())\n    s = input()\n    mi = N - 1\n    for i in range(N):\n        if s[i] == \">\":\n            mi = i\n            break\n    for i in range(N):\n        if s[N-1-i] == \"<\":\n            mi = min(mi, i)\n            break\n\n    print(mi)\n", "# stdin=open('input.txt')\n\n# def input():\n# \treturn stdin.readline()[:-1]\n\n# a, b = map(int, input().split())\n\n# l = list(map(int, input().split()))\n\n\n# CODE BEGINS HERE.................\n\nfor t in range(int(input())):\n\tn = int(input())\n\ta = input()\n\n\tcount1 = 0\n\tcount2 = 0\n\tfor i in a:\n\t\tif i == '<':\n\t\t\tcount1 += 1\n\t\telse:\n\t\t\tbreak\n\n\ta = a[::-1]\n\n\tfor i in a:\n\t\tif i == '>':\n\t\t\tcount2 += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(min(count1, count2))\n\n#CODE ENDS HERE....................\n\n\n", "rs = lambda : int(input())\nri = lambda : map(int, input().split())\nrli = lambda : list(map(int, input().split()))\n\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    s = input()\n    ans = k-1\n    ans1 = 0\n    while ans1 < k and s[ans1] == '<':\n        ans1+=1\n    ans2 = 0\n    while k-1-ans2 >= 0 and s[k-1-ans2] == '>':\n        ans2+=1\n    ans = min([ans, ans2, ans1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    k = 0\n    for i in range(n-1,-1,-1):\n        if s[i] is '<':\n            k = n-1-i\n            break\n    \n    for i in range(n):\n        if s[i] is '>':\n            k = min(k,i)\n            break\n    print(k)", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\n\n\n\n\nn=nn()\n\nfor i in range(n):\n\tl=nn()\n\n\ts=li()\n\n\tleftmin=0\n\trightmin=0\n\n\t\n\t\n\twhile leftmin<len(s) and s[leftmin]=='<':\n\t\tleftmin+=1\n\n\twhile rightmin<len(s) and s[~rightmin]=='>':\n\t\trightmin+=1\n\n\tprint(min(leftmin,rightmin))\n\n\n", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = 0\n    \n    for i in range(n):\n        if s[i] is '>':\n            ans = i\n            break\n    \n    \n    \n    for i in range(n-1,-1,-1):\n        if s[i] is '<':\n            ans = min(n-1-i,ans)\n            break\n    \n    print(ans)", "t = int(input())\nfor _ in range(t):\n    input()\n    s = input()\n    cl = 0\n    for c in s:\n        if c == '>':\n            break\n        cl += 1\n    cr = 0\n    for c in s[::-1]:\n        if c == '<':\n            break\n        cr += 1\n    print(min(cl,cr))\n", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if \">\" in s:\n        left = s.index(\">\")\n    else:\n        left = n+1\n    if \"<\" in s:\n        right = s[::-1].index(\"<\")\n    else:\n        right = n+1\n    print (min(left,right))", "t = int(input())\n\nfor test in range(0,t):\n\n    n = int(input())\n    s = input()\n\n    prefix_len=0\n    suffix_len=0\n\n    for i in range(0,n):\n\n        ##print(i)\n\n        if s[i]=='<':\n            prefix_len+=1\n\n        else:\n            break\n\n    for i in range(n-1,-1,-1):\n\n        ##print(i)\n\n        if s[i]=='>':\n            suffix_len+=1\n\n        else:\n            break\n\n    print(min(suffix_len,prefix_len))\n", "t = int(input())\nfor i in range(t):\n    n =int(input())\n    s=input()\n    if s[0] == '>' or s[-1]=='<':\n        print(0)\n    else:\n        q=0\n        w=0\n        for j in s:\n            if j=='<':\n                q+=1\n            else:\n                break\n        for j in range(len(s)-1, -1, -1):\n            if s[j]=='>':\n                w+=1\n            else:\n                break\n        print(min(q, w))\n", "t=int(input())\nwhile t:\n\tt-=1\n\tn=int(input())\n\ts=input()\n\tl=0\n\twhile l<n and s[l]!='>':\n\t\tl+=1\n\tr=n-1\n\twhile r>=0 and s[r]!='<':\n\t\tr-=1\n\tprint(min(min(l,n-1-r),n-1))", "for t in range(int(input())):\n\tn = int(input())\n\two = input().strip()\n\tii, jj = 0, 0\n\ti, j = 0, n-1\n\twhile i < n and wo[i] == '<':\n\t\tii += 1\n\t\ti += 1\n\twhile j >= 0 and wo[j] == '>':\n\t\tj-=1\n\t\tjj += 1\n\tprint(min(ii, jj))\n", "def solve():\n    n=int(input())\n    s=input()\n    if s.count('<')==0:\n        return 0\n    if s.count('>')==0:\n        return 0\n    if s[0] == '>':\n        return 0\n    if s[-1] == '<':\n        return 0\n    s1=0\n    s2=0\n    for i in range(n):\n        if s[i]=='<':\n            s1+=1\n        else:\n            break\n    for i in range(n-1,-1,-1):\n        if s[i]=='>':\n            s2+=1\n        else:\n            break\n    return min(s1,s2)\n\nt=int(input())\nfor i in range(t):\n    print(solve())\n", "from collections import defaultdict\nfrom functools import reduce\n\nmi = lambda: [int(i) for i in input().split()]\nflat = lambda l: reduce(lambda a, b: a + b, l)\n\nt = mi()[0]\n\nfor _ in range(t):\n    n = mi()[0]\n    s = input()\n\n    # print(min(s.find('>'), (len(s) - s.rfind('<') - 1)))\n    print(min(len(s) - len(s.lstrip('<')), len(s) - len(s.rstrip('>'))))\n", "n = int(input())\nfor i in range(n):\n    m = int(input())\n    s = input()\n    num1 = 0\n    num2 = 0\n    j1 = 0\n    j2 = m - 1\n    while j1 < m and s[j1] == '<':\n        num1 += 1\n        j1 += 1\n    while j2 >= 0 and s[j2] == '>':\n        num2 += 1\n        j2 -= 1\n    print(min(num1, num2))", "for _ in range(int(input())):\n    n=int(input())\n    s=list(input())\n    x,y=-1,-1\n    for i in range(n):\n        if s[i]=='>':\n            x=i\n            break\n    for i in range(n-1,-1,-1):\n        if s[i]=='<':\n            y=n-1-i\n            break\n    if x==-1 or y==-1:\n        print(0)\n    else:\n        print(min(x,y))"]