["n,m=map(int,input().split()) \nx,y,z=map(int,input().split())\nedge=[[]for _ in range(n)]\nfor _ in range(m):\n  a,b=map(int,input().split())\n  a-=1\n  b-=1\n  edge[a].append(b)\n  edge[b].append(a)\ncolor=[0]*n\ndef bfs(v,c):\n  color[v]=c\n  h=w=0\n  if c==1:h=1\n  else:w=1\n  for i in edge[v]:\n    if color[i]==c:return [False,h,w]\n    elif color[i]==0:\n      f,hh,ww=bfs(i,-c)\n      h+=hh\n      w+=ww\n      if not f:return [False,h,w]\n  return [True,h,w]\nq=[]\nfor i in range(n):\n  if color[i]==0:\n    f,h,w=bfs(i,1)\n    if not f:print(\"NO\");return\n    q.append([i,min(h,w),max(h,w)-min(h,w),1-2*(h<w)])\nyy=y\nfor _,i,__,___ in q:yy-=i\nif yy<0:print(\"NO\");return\ndp=[(yy+1)*[0]for _ in range(len(q)+1)]\ndp[0][0]=1\nfor i in range(len(q)):\n  _,__,ii,___=q[i]\n  for j in range(yy+1):dp[i+1][j]=dp[i][j]\n  for j in range(yy+1):\n    if ii+j>yy:break\n    dp[i+1][ii+j]|=dp[i][j]\nif dp[-1][-1]==0:print(\"NO\");return\nk=yy\nqq=[]\nfor i in range(len(q),0,-1):\n  if dp[i][k]==dp[i-1][k]:qq.append((q[i-1][0],-q[i-1][3]))\n  else:\n    qq.append((q[i-1][0],q[i-1][3]))\n    k-=q[i-1][2]\ncolor=[0]*n\nvisited=set()\nfor i,c in qq:\n  stack=[i]\n  visited.add(i)\n  color[i]=c\n  for j in stack:\n    for k in edge[j]:\n      if k in visited:continue\n      visited.add(k)\n      color[k]=-color[j]\n      stack.append(k)\nfor i in range(n):\n  if color[i]==1:color[i]=\"2\"\n  elif x:color[i]=\"1\";x-=1\n  else:color[i]=\"3\"\nprint(\"YES\")\nprint(\"\".join(color))"]