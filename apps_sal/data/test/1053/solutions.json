["a = [0]\ncur = 1\n\nwhile(cur < 10 ** 13):\n    x = a[-1]\n    a.append(x * 2 + cur)\n    cur *= 2\n\nn = int(input())\nn -= 1\n\nans = 0\ni = 1\ncur = 1\nwhile(n > 0):\n    x = n % 2\n    n = n // 2\n    if(x > 0):\n        ans += cur + a[i - 1]\n    i += 1\n    cur *= 2\n    \nprint(ans)", "n = int(input())\nres = 0\ninc = 1\nwhile n > 1:\n\tres += inc*(n//2)\n\tn += 1\n\tn //= 2\n\tinc *= 2\nprint(res)\n", "def f(n):\n  if n == 2:\n    return 1\n  if n == 3:\n    return 3\n  if n % 2 == 0:\n    return 2 * f(n // 2) + n // 2\n  else:\n    return 2 * f(n // 2 + 1) + n // 2\n\nn = int(input())\nprint(f(n))", "n = int(input())\na, t = n - 1, 1\nn -= 1\ni = 2\nwhile i <= n:\n    a += n // i * t\n    i *= 2\n    t *= 2\nprint(a)\n", "\"\"\"\nATSTNG's ejudge Python3 solution template\n(actual solution is below)\n\"\"\"\nimport sys, queue\n\ntry:\n    import dev_act_ffc429465ab634  # empty file in directory\n    DEV = True\nexcept:\n    DEV = False\n\ndef log(*s):\n    if DEV: print('LOG', *s)\n\nclass EJudge:\n    def __init__(self, problem=\"default\", reclim=1<<30):\n        self.problem = problem\n        sys.setrecursionlimit(reclim)\n\n    def use_files(self, infile='', outfile=''):\n        if infile!='':\n            self.infile = open(infile)\n            sys.stdin = self.infile\n        if outfile!='':\n            self.outfile = open(outfile, 'w')\n            sys.stdout = self.outfile\n\n    def use_bacs_files(self):\n        self.use_files(self.problem+'.in', self.problem+'.out')\n\n    def get_tl(self):\n        while True: pass\n\n    def get_ml(self):\n        tmp = [[[5]*100000 for _ in range(1000)]]\n        while True: tmp.append([[5]*100000 for _ in range(1000)])\n\n    def get_re(self):\n        s = (0,)[8]\n\n    def get_wa(self, wstr='blablalblah'):\n        for _ in range(3): print(wstr)\n        return\n\nclass IntReader:\n    def __init__(self):\n        self.ost = queue.Queue()\n\n    def get(self):\n        return int(self.sget())\n\n    def sget(self):\n        if self.ost.empty():\n            for el in input().split():\n                self.ost.put(el)\n        return self.ost.get()\n\n    def release(self):\n        res = []\n        while not self.ost.empty():\n            res.append(self.ost.get())\n        return res\n\ndef tokenized(s):\n    \"\"\" Parses given string into tokens with default rules \"\"\"\n    word = []\n\n    for ch in s.strip():\n        if ch == ' ':\n            if word: yield ''.join(word); word = []\n        elif 'a' <= ch <= 'z' or 'A' <= ch <= 'Z' or '0' <= ch <= '9':\n            word.append(ch)\n        else:\n            if word: yield ''.join(word); word = []\n            yield ch\n\n    if word: yield ''.join(word); word = []\n\n###############################################################################\nej = EJudge(  )\nint_reader = IntReader()\nfmap = lambda f,*l: list(map(f,*l))\nparse_int = lambda: fmap(int, input().split())\n\n# input\nn = bin(int(input())-1)[2:][::-1]\nlog(n)\nbit_full_cost = [(1 << i) * (i+1) for i in range(100)]\nbit_cost = [1<<i for i in range(100)]\nlog(bit_cost)\nans = 0\nfor i in range(len(n)):\n    if n[i] == '1':\n        if i > 0: ans += bit_full_cost[i-1]\n        ans += bit_cost[i]\n\n\n\nprint(ans)\n\n\n'''\n1 2 3 4 5 6 7 8\n\n\n8 7\n0 5\n  0\n\n'''\n\n", "n = int(input())\nlevel = 1\nres = 0\nwhile n >1:\n    res  += level*(n//2)\n    level *=2\n    n = (n//2) + (n%2)\n\nprint(res)\n\n\n", "import math\n\nn = int(input())\n\nans = 0\ncur = 1\n\nwhile cur < n:\n    cnt = math.ceil((n-cur)/(cur << 1))\n    ans += cnt*cur\n    cur <<= 1\n\nprint(ans)\n", "n = int(input())\nans = 0\n_pow = 2\n\nwhile 2 * n > _pow:\n    ans += (_pow //2 )* (n // _pow + (1 if n % _pow > _pow // 2 else 0))\n    _pow *= 2\n    \nprint(ans)\n", "n = int(input())\n\nans2 = [0]\n\nfor i in range(1, 64):\n  ans2.append(ans2[i - 1] + ans2[i - 1] + pow(2, i - 1))\n\ndef ans(n):\n  if n == 0:\n    return 0\n  else:\n    length = n.bit_length() - 1\n    if n == pow(2, length):\n      return ans2[length]\n    else:\n      return ans2[length] + ans(n - pow(2, length)) + pow(2, length)\nprint(ans(n))", "n=int(input())-1\nr=0\nwhile n!=0:\n    zz = 1\n    a = 1\n    z = 1\n    while zz <= n:\n        z<<=1\n        zz<<=1\n        zz+=1\n        a<<=1\n        a+=z\n    zz>>=1\n    a-=z\n    a>>=1\n    n-=zz\n    r+=a\n    if n:\n        n-=1\n        r+=z\nprint (r)", "def func(n):\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if(n%2):\n        return func(n//2)*2+(n//2)+1\n    else:\n        return func(n//2)*2+(n//2)\nn=int(input())\na=[1,2,1,4,1,2,1,8,1,2,1,4,1,2,1]\n\nprint(func(n-1))\n", "nn = input()\nn = int(nn)\nst = 0\ndv = 1\nstep = []\n\nwhile (dv <= n):\n    step.append(dv)\n    dv = dv*2\n    st += 1\nstep.append(dv)\nstep.append(dv*2)\notv = 0\nf = 1\nq = 0\nwhile (f != 0):\n    if n == 0:\n        break\n    if n == 1:\n        break\n    for i in range (len(step)):\n        if step[i] > n:\n            q = i - 1\n            break\n    if (n == step[q]):\n        otv += step[q-1] *(q)\n        n -= step[q]\n    else:\n        otv += step[q] + step[q-1] *(q)\n        n -= step[q]\nprint (otv)\n", "def f(n):\n    if n == 0:\n        return 0\n    return 2**(n-1) + 2*f(n-1)\n\nf = [0]*60\n\nfor n in range(1, 60):\n    f[n] = 2**(n-1) + 2*f[n-1]\n\nn = int(input())\n\nans = 0\n\nfor k in range(60, 0, -1):\n    if n >= 2**k:\n        ans += f[k]\n        n -= 2**k\n        if n > 0:\n            ans += 2**k\n\nprint(int(ans))", "from sys import stdin, stdout\n\n\nn = int(stdin.readline())\npsze = 41\nans = 0\n\n\ndef trans(s):\n    cnt = 0\n    \n    for i in range(psze * 2):\n        if (i < len(s) and s[i] == '1'):\n            cnt += (1 << i)\n    \n    return cnt\n\nn -= 1\n\nfor i in range(psze):\n    if 1 << i > n:\n        break\n    \n    s = '0' * i + '1'\n    cnt = 1\n    \n    l, r = 0, n + 1\n    while (r - l > 1):\n        m = (l + r) >> 1\n        \n        f = bin(m)[2:][::-1]\n        \n        if (trans(s + f) <= n):\n            l = m\n        else:\n            r = m\n    \n    ans += (1 << i) * (l + 1)\n\nstdout.write(str(ans))", "a = int(input())\n\ndef ans(n, p=1):\n    return ans( (n+1) // 2, p*2 ) + (n//2)*p if n > 1 else 0\n\nprint (ans(a))", "from math import log\n\n##n = int(input())\n##\n####print(n-1 + int(log(n-1)/log(2)))\n##\n##def ord2(n): ## max power of 2 that divides n\n##    ret = 1\n##\n##    while n%ret == 0:\n##        ret*=2\n##\n##    return ret//2\n##\n##total = 0\n##\n##for i in range(1, n):\n##    total += ord2(i)\n\n# fast way?\n\nn = int(input()) - 1\n\ndivider = 2**int(log(n)/log(2))\ntotal = 0\ndoubled = 0\n\nwhile divider > 0:\n\n    total += (n//divider - doubled)*divider\n\n    ##print('A total of', n//divider, 'work, and the number of doubled', doubled)\n    \n    doubled += n//divider - doubled\n\n    divider //=2\n\n##    total = 0\n##    power = 0\n##\n##    while 2**power <= n:\n##\n##        total += n//(2**power)\n##\n##        power += 1\n\nprint(total)\n", "L = input().split()\nn = int(L[0])\nn -= 1\nk = 0\nwhile (1<<k)<n:\n    k += 1\nans = 0\nfor i in range(0, k+1):\n\tans += (1<<i)*((n+(1<<(i+1))-(1<<i))//(1<<(i+1)))\nprint(ans)", "L=input().split();n=int(L[0])-1;k=0\nwhile (1<<k)<n:\n    k += 1\nans = 0\nfor i in range(0, k+1):\n\tans+=(1<<i)*((n+(1<<(i+1))-(1<<i))//(1<<(i+1)))\nprint(ans)", "n=int(input())-1;a=0\nfor i in range(0,40):\n\tk=1<<i;a+=k*((n+(k<<1)-k)//(k<<1))\nprint(a)", "n=int(input())-1;a=0\nfor i in range(40):\n\tk=1<<i;a+=(n+k)//(k<<1)*k\nprint(a)", "a=0;n=int(input())-1\nfor i in range(40):\n\tk=1<<i;a+=(n+k)//(k*2)*k\nprint(a)", "f = lambda x: f(x // 2) * 2 + (x + 1) // 2 if x else 0\nprint(f(int(input()) - 1))", "ans = 0\nn = int(input())\nk = 2**63\nlpre = [0]\nfor i in range(50):\n    lpre.append(lpre[-1]*2+2**i)\nlmax = -1\nfor i in range(42,-1,-1):\n    #print(i)\n    if n&2**i:\n        ans+=lpre[i]\n        if lmax != -1:\n            ans+=2**lmax\n        lmax = i\nprint(ans)\n"]