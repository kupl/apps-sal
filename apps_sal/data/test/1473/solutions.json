["n=int(input())\nd={}\nd1={}\nfor i in range(n):\n  a,b=list(map(int,input().split()))\n  d[a]=b\n  d1[b]=a\nr=[0]*n\nfront=0\ni=1\nwhile i<n:\n  r[i] = d.get(front)\n  front = r[i]\n  i += 2\nfor f in list(d.keys()):\n  if d1.get(f) == None:\n    front = f\n    break\nr[0]=front\ni=2\nwhile i<n:\n  r[i] = d.get(front)\n  front = r[i]\n  i += 2\nprint(*r)\n\n", "\nn = int(input())\nID = 1000001\nthprev = [-1 for i in range(ID)]\nthpost = [-1 for i in range(ID)]\nprev = []\npost = []\nfor i in range(n):\n    a,b = [int(s) for s in input().split()]\n    prev.append(a)\n    post.append(b)\n    thprev[a] = i\n    thpost[b] = i\n    \nsth = thprev[0]\nv = post[sth]\nq1 = []\nwhile v>0 and sth>=0:      \n    q1.append(v)\n    sth = thprev[v]\n    v = post[sth]\n\nstart1 = thprev[0]\nfor i in range(n):\n    if i!=start1 and thpost[prev[i]]==-1:\n        start2 = i\n        break\n    \nsth = start2\nu = prev[sth]\nv = post[sth]\nq2 = [u]\nwhile v>0 and sth>=0:      \n    q2.append(v)\n    sth = thprev[v]\n    v = post[sth]\n\n\nq1.reverse()\nq2.reverse()\nq = []\nlabel = 2\n\nwhile q1 or q2:\n    if label==1:\n        q.append(q1.pop())\n        label = 2\n    else:\n        q.append(q2.pop())\n        label = 1\nprint(' '.join(map(str,q)))\n        \n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n\n", "n = int(input())\na = {}\nb = {}\nans = [0] * n\ns = set()\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    a[x] = y\n    b[y] = x\n    s.add(x)\n    s.add(y)\ncur = a[0]\nfor i in range(1, n, 2):\n    ans[i] = cur\n    if cur in a:\n        cur = a[cur]\n\nfrst = -1\nfor i in s:\n    if i not in b:\n        frst = i\n        break\ncur = frst\ni = 0\nfor i in range(0, n, 2):\n    ans[i] = cur\n    if cur in a:\n        cur = a[cur]\n    \nprint(*ans)\n", "import bisect\n\nn = int(input())\npairs = [list(map(int, input().split())) for _ in range(n)]\n\nfront_set = set()\nrear_set = set()\n\nfor pair in pairs:\n    front_set.add(pair[0])\n    rear_set.add(pair[1])\n\nstudents = [-1] * n\n\npairs.sort()\nfronts = [pair[0] for pair in pairs]\nrears = [pair[1] for pair in pairs]\n\npos = 0\nstudents[pos + 1] = rears[pos]\npos += 2\n\nwhile pos + 1 < len(pairs):\n    i = bisect.bisect_left(fronts, students[pos - 1])\n    students[pos + 1] = rears[i]\n    pos += 2\n\nstudents[0] = [i for i in front_set - rear_set][0]\npos = 1\nwhile pos + 1< len(pairs):\n    i = bisect.bisect_left(fronts, students[pos - 1])\n    students[pos + 1] = rears[i]\n    pos += 2\n\nprint(' '.join(map(str, students)))\n", "n = int(input())\nafter = {}\nsets = [set(), set()]\nfor i in range(n):\n\ta, b = list(map(int, input().split()))\n\tsets[0].add(a)\n\tsets[1].add(b)\n\tafter[a] = b\noriginal_list = [0, (sets[0] - sets[1]).pop()]\nfor i in range(2, n + 2):\n\toriginal_list.append(after[original_list[i - 2]])\nprint(*original_list[1:n + 1])\n", "n = int(input())\nd1 = dict()\nd2 = dict()\nar = [0] * (30000000)\nfor i in range(n):\n    a, b = map(int, input().split())\n    ar[a] += 1\n    ar[b] += 1    \n    d1[a] = b\n    d2[b] = a\nif n % 2 == 0:\n    x = 0\n    ar1 = []\n    ar2 = []\n    while x in d1:\n        ar1.append(d1[x])\n        x = d1[x]\n    x = 0\n    while x in d2:\n        ar2.append(d2[x])\n        x = d2[x]\n    ar2 = list(reversed(ar2))\n    for i in range(len(ar2)):\n        print(ar2[i], end = ' ')\n        print(ar1[i], end = ' ')\nelse:\n    arx = []\n    for i in range(1000000):\n        if ar[i] == 1:\n            arx.append(i)\n    a = arx[0]\n    b = arx[1]\n    if b in d2:# a in d2\n        a, b = b, a\n    x = 0\n    ar1 = []\n    ar2 = []\n    while x in d1:\n        if d1[x] != 0:\n            ar1.append(d1[x])\n        x = d1[x]\n        if x == 0:\n            break\n    \n    x = a\n    while x in d2:\n        ar2.append(d2[x])\n        x = d2[x]    \n    ar2 = list(reversed(ar2))\n    for i in range(len(ar2)):\n        print(ar2[i], end = ' ')\n        print(ar1[i], end = ' ')    \n    print(a)", "n=int(input())\nd,d1={},{}\nfor i in range(n):\n  a,b=map(int,input().split())\n  d[a],d1[b]=b,a\nr = [list(filter(lambda f:d1.get(f)==None, d.keys()))[0], d.get(0)]\nfor i in range(2,n):\n  r.append(d.get(r[i-2]))\nprint(*r)", "import sys\n\ninp = sys.stdin\n\nn = int(inp.readline())\nafter = [-1] * (10 ** 6 + 1)\nbefore = [-1] * (10 ** 6 + 1)\nused = [0] * (10 ** 6 + 1)\n\nfor i in range(n):\n\tx, y = map(int, inp.readline().split())\n\tafter[x] = y\n\tbefore[y] = x\n\tused[x] = used[y] = 1\n\nans = [0] * n\ni = 1\nx = 0\nwhile after[x] > 0:\n\tx = after[x]\n\tans[i] = x\n\ti += 2\n\nfor i in range(10 ** 6 + 1):\n\tif used[i] == 1 and before[i] == -1:\n\t\tx = i\n\t\tbreak\n\ni = 0\nwhile (i < n) and (x > 0):\n\tans[i] = x\n\ti += 2\n\tx = after[x]\n\nfor i in ans:\n\tprint(i, end=' ')", "next={}\nappear={}\nfront={}\nn=int(input())\nfor i in range(1,n+1):\n\t[a,b]=[int(x) for x in input().split()]\n\tnext[a]=b\n\tfront[a]=True\n\tfront[b]=False\n\tif a not in appear:\n\t\tappear[a]=1\n\telse:\n\t\tappear[a]=2\n\tif b not in appear:\n\t\tappear[b]=1\n\telse:\n\t\tappear[b]=2\na=0\nb=0\nfor x in appear.keys():\n\tif appear[x]==1 and front[x]:\n\t\tprint(x,next[0],end=\" \")\n\t\ta=x\n\t\tb=next[0]\ncnt=2\nfor i in range(0,n-1):\n\tif cnt==n:\n\t\tbreak\n\tprint(next[a],end=\" \")\n\tcnt+=1\n\tif cnt==n:\n\t\tbreak\n\tprint(next[b],end=\" \")\n\tcnt+=1\n\tif cnt==n:\n\t\tbreak\n\ta=next[a]\n\tb=next[b]\nprint()\n", "def solve(xs):\n    starts = list({x[0] for x in xs}.difference({x[1] for x in xs}))\n    map_next = {x[0]:x[1] for x in xs}\n    ret = starts[:]\n    starts = [0]+starts\n    for _ in range(len(xs) - 1):\n        starts[0] = map_next[starts[0]]\n        ret.append(starts[0])\n        starts.reverse()\n    return ret\n\nxs = [list(map(int, input().split())) for i in range(int(input()))]\nprint(\" \".join(map(str, solve(xs))))", "\nn = int(input())\n\ns = dict()\nfor i in range(n):\n    (a,b) = [int(element) for element in input().split(' ')]\n    s[a] = b\n\nv = []\nv.append(0)\nt = set(s.values())\nfor key in list(s.keys()):\n    if(key not in t):\n        v.append(key)\n        break\nfor i in range(n-1):\n    v.append(s[v[-2]])\nv = [str(elem) for elem in v]\nprint(' '.join(v[1:]))\n", "n = int(input())\nqueue = []\ndist = [0]*1000001\ndist2= [0]*1000001\ndictx = {}\ndictx2 = {}\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    dictx[a] = b\n    dictx2[b] = a\n    dist[a]+=1\n    dist[b]+=1\n    dist2.append(a)\n    dist2.append(b)\nif n % 2 == 0:\n    indx = 0\n    final = [0] * n\n    curr = 0\n    while curr in dictx:\n        curr = dictx[curr]\n        final[2*indx+1] = str(curr)\n        indx += 1\n\n    indx = -1\n    curr = 0\n    while curr in dictx2:\n        curr = dictx2[curr]\n        final[2*indx] = str(curr)\n        indx -= 1\n        \n    print(' '.join(final))\n\nif n % 2 == 1:\n    yes = False\n    maf = []\n    for i in dist2:\n        if dist[i] == 1:\n            maf.append(i)    \n    \n    if maf[0] in dictx.keys():\n        frontmaf = maf[0]\n    else:\n        frontmaf = maf[1]\n    \n    ################## \n    indx = 0\n    final = [0] * n\n    curr = frontmaf\n    while curr in dictx:\n        final[2*indx] = str(curr)\n        curr = dictx[curr]\n        indx += 1\n    final[2*indx] = str(curr)\n\n    indx = 0\n    curr = 0\n    while curr in dictx and dictx[curr] != 0:\n        curr = dictx[curr]\n        final[2*indx + 1] = str(curr)\n        indx += 1\n\n    print(' '.join(final))", "'''\nCreated on \u0662\u0667\u200f/\u0661\u0661\u200f/\u0662\u0660\u0661\u0664\n\n@author: mohamed265\n'''\n \nfirst = set()\nsecond = set()\nmap = {}\nn = int(input())\nfor i in range(n):\n    temp = input().split()\n    first.add(int(temp[0]))\n    second.add(int(temp[1]))\n    map[int(temp[0])] = int(temp[1])\n    \n\n# print(first)\n# print(second)\n# print(map)\n\ntemp = 0\nres = [temp for x in range(n + 10)]\nj = 2 \ntemp = 0\n\nwhile temp in map.keys() :\n    if  j > n + 1:\n        break\n    temp = map[temp]\n    res[j] = temp\n    j += 2\n    \n# print(res)\nx = first - second\ntemp = int(x.pop())\nj = 1\n\nwhile temp != 0:\n    res[j] = temp\n    j += 2\n    try:\n        temp = map[temp]\n    except:\n        break\n    \n \nfor i,  x  in  enumerate(res):\n    if  i < n + 1:\n        if  i != 0:   \n            print(x , end=' ')\n    \n    \n    \n    \n", "def last(i, find, finish):\n    while dict_a[find] != finish:\n        keys_a[i] = dict_a[find]  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n        find = keys_a[i]\n        i += 2\n\nn = int(input())  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ndict_a = {}\ndict_b = {}\nfor i in range(n):\n    c = input().split()\n    dict_a[int(c[0])] = int(c[1])  # \ufffd dict_a \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    dict_b[int(c[1])] = None  # \ufffd dict_b - \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    \nkeys_a = sorted(dict_a.keys())\ndict_b = sorted(dict_b.keys())\n\npos = 0  # \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\nwhile keys_a[pos] == dict_b[pos]:\n    pos += 1\nstart = keys_a[pos]\nend = dict_b[pos]\n\nwhile (pos+1 < n) and (dict_b[pos+1] == start):\n    start = keys_a[pos+1]\n    pos += 1\nwhile (pos+1 < n) and (keys_a[pos+1] == end):\n    end = dict_b[pos+1]\n    pos += 1\n\nkeys_a = [start]+[0]*(n-2)+[end]  # \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd (\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd)\ndict_b = None\n\nif n % 2 == 0:\n    last(2, start, 0) \n    last(1, 0, end)\nelse:\n    last(2, start, end) \n    last(1, 0, 0)    \n\nfor i in range(n-1):\n    print(keys_a[i], end = ' ')\nprint(keys_a[n-1])", "def last(i, find, finish):\n    while dict_a[find] != finish:\n        keys_a[i] = dict_a[find]  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n        find = keys_a[i]\n        i += 2\n\nn = int(input())  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ndict_a = {}\ndict_b = {}\nfor i in range(n):\n    c = input().split()\n    dict_a[int(c[0])] = int(c[1])  # \ufffd dict_a \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    dict_b[int(c[1])] = None  # \ufffd dict_b - \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    \nkeys_a = sorted(dict_a.keys())\ndict_b = sorted(dict_b.keys())\n\npos = 0  # \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\nwhile keys_a[pos] == dict_b[pos]:\n    pos += 1\nstart = keys_a[pos]\nend = dict_b[pos]\n\nwhile (pos+1 < n) and (dict_b[pos+1] == start):\n    start = keys_a[pos+1]\n    pos += 1\nwhile (pos+1 < n) and (keys_a[pos+1] == end):\n    end = dict_b[pos+1]\n    pos += 1\n\nkeys_a = [start]+[0]*(n-2)+[end]  # \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd (\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd)\ndict_b = None\n\nif n % 2 == 0:\n    last(2, start, 0) \n    last(1, 0, end)\nelse:\n    last(2, start, end) \n    last(1, 0, 0)    \n\nfor i in range(n-1):\n    print(keys_a[i], end = ' ')\nprint(keys_a[n-1])", "n = int(input())\nmaxn = 10 ** 6 + 1\nnxt = [0] * maxn\nnxta = [0] * maxn\nans = [0] * n\nused = [0] * maxn\nfor i in range(n):\n    x, y = map(int, input().split())\n    if x == 0:\n        s = i\n    nxta[x] = i\n    nxt[i] = y\n    used[x] += 1\n    used[y] += 2\nfor i in range(maxn):\n    if used[i] == 1:\n        z = i\nfor i in range(n):\n    #print(z, s)\n    ans[i] = z\n    z, s = nxt[s], nxta[z]\nfor i in ans:\n    print(i, end = ' ')\n    \n", "n=int(input())\ntwoback={}\ntwofront={}\nfor i in range(n):\n    front,back=[int(x) for x in input().split(' ')]\n    twoback[front]=back\n    if not back in twoback:\n        twoback[back]=-1\n    twofront[back]=front\n\nif n%2==0:\n    outevens=[]\n    outodds=[]\n    fromleft=0\n    fromright=0\n    for i in range(int(n/2)):\n        outevens.append(twoback[fromleft])\n        fromleft=outevens[-1]\n        outodds.append(twofront[fromright])\n        fromright=outodds[-1]\n    tosendout=\"\"\n    for c, d in zip(outevens,reversed(outodds)):\n        tosendout+=str(d)+\" \"+str(c)+\" \"\n    print(tosendout.rstrip(\" \"))\nelse:\n    fromleft=0\n    for key,value in twoback.items():\n        if value==-1:\n            fromright=key\n            break\n    outevens=[]\n    outodds=[fromright]\n    for i in range(int(n/2)):\n        outevens.append(twoback[fromleft])\n        fromleft=outevens[-1]\n        outodds.append(twofront[fromright])\n        fromright=outodds[-1]\n    for c,d in zip(outevens,reversed(outodds)):\n        print(d,c,end=\" \")\n    print(outodds[0])\n\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Date    : 2014-12-03 16:10:54\n# @Author  : Your Name (you@example.org)\n# @Link    : http://example.org\n# @Version : $Id$\n\nimport os\n# print('now')\nmaxn = 1000010\npre, next, ans, vis = [], [], [], []\nfor i in range(maxn):\n\tpre.append(-1)\n\tnext.append(-1)\n\tans.append(-1)\n\tvis.append(0)\nn = int(input())\nfor i in range(n):\n\ta, b = \tinput().split()\n\t# print('in', a, b)\n\tx, y = int(a), int(b)\n\tvis[x] = vis[y] = 1\n\tpre[y] = x\n\tnext[x] = y\n# print('next[2]')\nans[0] = 0\nvis[0] = 2\ni = 0\nj = 2\nwhile next[i] != -1:\n\ti = next[i]\n\tif vis[i] == 2:\n\t\tbreak\n\tans[j] = i\n\tj += 2\n\tvis[i] = 2\nj = -1\nfor i in range(maxn):\n\tif vis[i] == 1:\n\t\tj = i\n\t\tbreak\nwhile pre[j] != -1:\n\tj = pre[j]\ni = j\nj = 3\nvis[i] = 2\nans[1] = i \nwhile next[i] != -1:\n\ti = next[i]\n\tans[j] = i\n\tj += 2\n\tvis[i] = 2\n# print(\"here\")\nfor i in range(n+2):\n\tif ans[i] > 0:\n\t\tprint(ans[i], end = ' ')\n", "n = int(input())\nbefore, after = {}, {}\nfor i in range(n):\n  a, b = list(map(int, input().split()))\n  after[a] = b\n  before[b] = a\nbegin = None\nfor key in list(after.keys()):\n  if key not in before:\n    begin = key\n    break\nsequence = n * [None]\nfor pos, x in [(0, begin), (1, after[0])]:\n  while True:\n    sequence[pos] = x\n    if x not in after or after[x] == 0:\n      break\n    x = after[x]\n    pos += 2\nprint(' '.join(map(str, sequence)))\n", "n=int(input())\nList=[0]*(n+1)\nL={}\nR={}\nl,r=0,0\nfront=0\nfor i in range(n):\n    l,r=list(map(int,input().split()))\n    L.update({l:r})\n    R.update({r:l})\nList[2]=L[0]\ni=2\nwhile i+2<=n:\n    List[i+2]=L[List[i]]\n    i+=2\n\nfor k in L:\n    if R.get(k)==None:\n        front=k\n        break\ni,List[1]=1,front\nwhile i+2<=n:\n    List[i+2]=L[List[i]]\n    i+=2\nprint(*List[1:])\n", "__author__ = 'Rakshak.R.Hegde'\nn = int(input())\nm = dict()\ns = [0] * (2 * n)\nxor2 = 0\nind = 0\nfor i in range(n):\n    a, b = map(int, input().split())\n    xor2 ^= a ^ b\n    s[ind] = a\n    ind += 1\n    s[ind] = b\n    ind += 1\n    m[a] = b\nl = r = 0\nsetBit = xor2 & ~(xor2 - 1)\nfor i in s:\n    if i & setBit:\n        l ^= i\n    else:\n        r ^= i\nif l not in m: l = r\na, b = 0, l\nans = str(b)\nfor i in range(1, n, 2):\n    a = m[a]\n    ans += ' ' + str(a)\n    b = m[b]\n    if b != 0:\n        ans += ' ' + str(b)\nprint(ans)", "x=int(input())\nleft=dict()\nlset=set()\nrset=set()\nq=[0]*x\ni=0\nwhile i<x:\n    l=[int(j) for j in input().split()]\n    left[l[0]]=l[1]\n    lset.add(l[0])\n    rset.add(l[1])\n    i+=1\ni=lset.difference(rset).pop()\nj=0\nq[0]=i\nk=1\nwhile k<x:\n    q[k]=left[j]\n    k+=1\n    if k<x:\n        q[k]=left[i]\n    k+=1\n    i=left[i]\n    j=left[j]\nprint(\" \".join([str(k) for k in q]))\n", "import bisect\n\nn = int(input())\npairs = [list(map(int, input().split())) for _ in range(n)]\n\nfront_set = set()\nrear_set = set()\n\nfor pair in pairs:\n    front_set.add(pair[0])\n    rear_set.add(pair[1])\n\nstudents = [-1] * n\n\npairs.sort()\nfronts = [pair[0] for pair in pairs]\nrears = [pair[1] for pair in pairs]\n\npos = 0\nstudents[pos + 1] = rears[pos]\npos += 2\n\nwhile pos + 1 < len(pairs):\n    i = bisect.bisect_left(fronts, students[pos - 1])\n    students[pos + 1] = rears[i]\n    pos += 2\n\nstudents[0] = [i for i in front_set - rear_set][0]\npos = 1\nwhile pos + 1< len(pairs):\n    i = bisect.bisect_left(fronts, students[pos - 1])\n    students[pos + 1] = rears[i]\n    pos += 2\n\nprint(' '.join(map(str, students)))", "a=int(input())\n#a1=a//2+1\nd={}\n#t=[]\ndinv={}\nfor i in range(a):\n\tb1=input().split()\n\tb=list(b1)\n\td[int(b[0])]=int(b[1]) #\u0442\u0430\u043a \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u0438\u043a \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n#\tt+=[int(b[1])]\n\tdinv[int(b[1])] = int(b[0])\n\nc1=[]\nn=0\n#n=d.get(0)\n#c1+=[n]\nfor i in range(a):\n\tn=d.get(n) # d[n]\n\tif n in d and n!=0:\n\t\tc1 += [n]\n\t#if n in d.values():\n\t#\tc1+=[n] // \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0432\u0441\u0435\u0445 \u0447\u0435\u0442\u043d\u044b\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432\n\telse:\n\t\tc1+=[n]\n\t\tbreak\n\n#print(c1)\nc2=[]\nfor i in d.keys():\n\tif i not in dinv:# and i!=0:\n\t\tk=i\n\t\tc2+=[k] #// \u043d\u0430\u0448\u043b\u0438 \u043d\u0430\u0447\u0430\u043b\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430\n\nfor i in range(a):\n\tk=d.get(k)\n\tif k in d and k!=0:\n\t\tc2+=[k]  #// \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a (\u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435)\n\telse:\n\t\tc2+=[k]\n\t\tbreak\n#print(c1)\n#print(c2)\nc1+=[0]\nc2+=[0]\nfor i in range(a):\n\tif c2[i]!=0:\n\t\tprint(c2[i], end=' ')\n\tif c1[i]!=0:\n\t\tprint(c1[i], end=' ')\n\telse:\n\t\tbreak\n\n\n\n\n\n"]