["n = int(input())\n\na = []\nfor i in range(2*n - 1):\n    a.append([int(c) for c in input().split()])\n\n\nc = []\nfor i in range(len(a)):\n    for j in range(len(a[i])):\n        c.append([a[i][j], i+1, j])\n\nc.sort(reverse=True)\nused = set()\nres = [0]*2*n\nfor cc in c:\n    if not cc[1] in used and not cc[2] in used:\n        res[cc[1]] = cc[2] + 1\n        res[cc[2]] = cc[1] + 1\n        used.add(cc[1])\n        used.add(cc[2])\n\nprint(' '.join(str(r) for r in res))\n", "n = int(input())\nnums = []\npeople = [True]*2*n\npairs = [-1]*2*n\nfor i in range(1, 2*n):\n\ti_nums = list(map(int, input().split()))\n\t# print(i_nums)\n\tnums += list(zip(i_nums, [i]*i, range(i)))\nnums.sort(key=lambda x: x[0], reverse=True)\nfor num, i, j in nums:\n\tif people[i] and people[j]:\n\t\tpeople[i] = people[j] = False\n\t\tpairs[i] = str(j + 1)\n\t\tpairs[j] = str(i + 1)\nprint(\" \".join(pairs))", "n = int(input())\np = [-1] * 2 * n\nk = []\nfor i in range(2 * n - 1):\n    a = list(map(int, input().split()))\n    for t in range(i + 1):\n        k.append([a[t], i + 1, t])\nk.sort()\nfor i in range(len(k) - 1, -1, -1):\n    if p[k[i][1]] == -1 and p[k[i][2]] == -1:\n        p[k[i][1]] = k[i][2] + 1\n        p[k[i][2]] = k[i][1] + 1\nprint(*p)\n\n", "n = int(input())\n\nstrs = [list(map(int, input().split())) for _ in range(2*n-1)]\nentries = sorted(((v, i, j) for i, row in enumerate(strs)\n                  for j, v in enumerate(row)), reverse=True)\nans = [-1] * (2*n)\n\nfor v, i, j in entries:\n    i += 1\n    if ans[i] != -1 or ans[j] != -1:\n        continue\n    ans[i] = j+1\n    ans[j] = i+1\n\nprint(' '.join(map(str, ans)))\n", "#import sys\n#sys.stdin = open(\"python/in\", \"r\")\n#from collections import defaultdict\n#import numpy as np\n#import array as rr\n#arr = rr.array('q')\n\nn = int(input())\n#n, m = [int (i) for i in input().split(\" \")]\nans = {}\narr = []\nfor con in range(1, 2*n):\n    str = [int (i) for i in input().split(\" \")]\n    arr.extend( [(str[i], i, con ) for i in range(len(str))])\narr.sort()\narr.reverse()\nfor s, a, b in arr:\n    if a in ans.keys() or b in ans.keys():\n        continue\n    ans[a] = b+1\n    ans[b] = a+1\n\nfor i in range(2*n):\n    print(ans[i], end=' ')\n    ", "#!/usr/bin/env python\n# 579B_member.py - Codeforces.com/problemset/problem/579/B by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Member Class (Main Program)\n###############################################################################\n\n\nclass Member:\n    \"\"\" Member representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n] = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.nums = []\n        for i in range(self.n*2-1):\n            self.nums.append(list(map(int, uinput().split())))\n\n        # Translating into pairs dict\n        self.pairs = []\n        for i in range(len(self.nums)):\n            for j in range(len(self.nums[i])):\n                self.pairs.append((self.nums[i][j], i+1, j))\n\n        self.spairs = reversed(sorted(self.pairs))\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = [0] * (self.n * 2)\n\n        paired = set()\n\n        for p in self.spairs:\n            if p[1] not in paired and p[2] not in paired:\n                result[p[1]] = p[2] + 1\n                result[p[2]] = p[1] + 1\n                paired.add(p[1])\n                paired.add(p[2])\n\n        return str(\" \".join(map(str, result)))\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Member class testing \"\"\"\n\n        # Constructor test\n        test = \"2\\n6\\n1 2\\n3 4 5\"\n        d = Member(test)\n        self.assertEqual(d.n, 2)\n        self.assertEqual(d.nums[0], [6])\n        self.assertEqual(d.nums[1], [1, 2])\n\n        # Sample test\n        self.assertEqual(Member(test).calculate(), \"2 1 4 3\")\n\n        # Sample test\n        test = (\n            \"3\\n487060\\n3831 161856\\n845957 794650 976977\\n\" +\n            \"83847 50566 691206 498447\\n\" +\n            \"698377 156232 59015 382455 626960\")\n        self.assertEqual(Member(test).calculate(), \"6 5 4 3 2 1\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Member(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Member(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Member(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Member().calculate())\n\n__starting_point()", "import operator\n\nn = int(input())\ndict = {}\nfor i in range(2, 2 * n + 1):\n    L = list(map(int, input().split()))\n    for j in range(len(L)):\n        dict[L[j]] = (i, j + 1)\n\nsorted_dict = sorted(dict.items(), key = operator.itemgetter(0), reverse = True)\n#print(sorted_dict)\nans = [0] * 2 * n\n\nfor i in sorted_dict:\n    if ans[i[1][0] - 1] == 0 and ans[i[1][1] - 1] == 0:\n        ans[i[1][0] - 1] = i[1][1]\n        ans[i[1][1] - 1] = i[1][0]\n        \nprint(' '.join(map(str, ans)))", "n = int(input())\ntable = []\nfor i in range(2 * n - 1):\n    li = list(map(int, input().split()))\n    for j in range(i+1):\n        table.append([li[j], i+2, j+1])\n\ntable.sort(key=lambda x:(x[0]), reverse=True)\nres = [0 for _ in range(2 * n)]\nentry = 0\nidx = 0\nwhile entry != n:\n    t = table[idx]\n    t1, t2 = t[1] - 1, t[2] - 1\n    if res[t1] == 0 and res[t2] == 0:\n        res[t1] = t2 + 1\n        res[t2] = t1 + 1\n        entry += 1\n    idx += 1\nprint(\" \".join(map(str, res)))\n", "n=int(input())\nl=[]\nfor i in range(2,2*n+1):\n  if i==2: s=[0,int(input())]\n  else: s=[0]+list(map(int,input().split()))\n  for j in range(1,i):\n    l+=[(s[j],i,j)]\nl=sorted(l)\ns=set()\nk=[0]*(2*n+1)\nfor x in l[::-1]:\n  if x[1] in s or x[2] in s: continue\n  s|={x[1],x[2]}\n  k[x[1]]=x[2]\n  k[x[2]]=x[1]\nprint(' '.join(map(str,k[1:])))\n", "def aaa():\n    n = int(input())\n    n*=2\n    a = [[0,0,0]]*(n*(n+1)//2)\n    b = [[]]*n\n    used = [-1]*(n+1)\n    for i in range(1,n):\n        b[i] = list(map(int, input().split()))\n    k = 0\n    for i in range(1, n):\n        for j in range(i):\n            a[k] = [b[i][j],i,j]\n            k+=1\n    a.sort(reverse=1)\n    k = n-1\n    for i in range(k*(k+1)//2):\n        if used[a[i][1]]==-1 and used[a[i][2]]==-1:\n            used[a[i][1]] = a[i][2]\n            used[a[i][2]] = a[i][1]\n        #print(*used)\n    for i in range(n):\n        print(used[i]+1, end = ' ')\naaa()", "import heapq\n\nn = int(input()) * 2\nans = [-1] * (n + 1)\n\nh = []\n\nfor i in range(2, n + 1):\n    j = 1\n    for e in input().split():\n        x = int(e)\n        heapq.heappush(h, [-x, i, j])\n        j += 1\n\ni = 1\nwhile True:\n    cur = heapq.heappop(h)\n    if ans[cur[1]] == -1 and ans[cur[2]] == -1:\n        ans[cur[1]] = cur[2]\n        ans[cur[2]] = cur[1]\n        \n    while ans[i] != -1 and i < n:\n        i += 1\n    if i == n:\n        break\n\nprint(*ans[1:])", "n = int(input())\nN = 2 * n\nans = [None] * N\na = [list(map(int, input().split())) for i in range(N - 1)]\n\nused = [False] * N\ninf = 10 ** 9\nfor i in range(n):\n    Max = -inf\n    for i in range(N - 1):\n        if not used[i + 1]:\n            for j in range(i + 1):\n                if not used[j] and a[i][j] > Max:\n                    Max = a[i][j]\n                    x, y = i + 1, j\n    used[x] = True\n    used[y] = True\n    ans[x] = y + 1\n    ans[y] = x + 1\n\nprint(' '.join(map(str, ans)))\n", "def main():\n    mode=\"filee\"\n    if mode==\"file\":f=open(\"test.txt\",\"r\")\n\n    if mode==\"file\":n=int(f.readline())\n    else:n=int(input())\n    w=[]\n    for i in range(2,2*n+1):\n        if mode==\"file\":g=[int(x) for x in f.readline().split()]\n        else:g=[int(x) for x in input().split()]\n        for j in range(1,i):\n            w.append([g[j-1],[i,j]])\n    w.sort()\n    free=2*n\n    fr=[-1]*(free+1)\n    w.reverse()\n    for e,k in w:\n        if fr[k[0]]==-1 and fr[k[1]]==-1:\n            fr[k[0]]=k[1]\n            fr[k[1]]=k[0]\n            free-=1\n            if free==0:\n                break\n    for i in fr[1:]:\n        print(i,end=' ')\n            \n\n    if mode==\"file\":f.close()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\nn=int(input())\nd=defaultdict()\nt=0\nb=[]\nc=[]\naa=[0]*((2*n)+1)\nwhile t<2*n-1:\n   # print(t)\n    a=[int(x) for x in input().split()]\n    for i in range(len(a)):\n        d[a[i]]=[t+2,i+1]\n    t=t+1\nl=sorted(d.items())\n#print(l)\ni=len(l)-1\nk=0\nwhile i>=0:\n    \n    if aa[l[i][1][0]]==0 and aa[l[i][1][1]]==0:\n        aa[l[i][1][0]]=l[i][1][1]\n        aa[l[i][1][1]]=l[i][1][0]\n        k=k+2\n        if k==(2*n):\n            break\n        #print(aa)\n    i=i-1    \nfor i in range(1,(2*n)+1):\n    print(aa[i],end=\" \")\n  \n", "from heapq import heapify\nfrom heapq import heappop\n\n\ndef cmp(a, b):\n    return a[0] > a[1]\n\n\nn = int(input())\narr = []\nfor i in range(n * 2):\n    arr.append([None] * (n * 2))\nelems = []\nfor i in range(1, (n * 2)):\n    lst = list(map(int, input().split()))\n    for j in range(len(lst)):\n        elems.append([-lst[j], i, j])\nheapify(elems)\nplayers = [True] * (n * 2)\nrez = [None] * (n * 2)\ncnt = 0\nwhile elems and cnt != n:\n    w, a, b = heappop(elems)\n    if players[a] and players[b]:\n        players[a] = False\n        players[b] = False\n        cnt += 1\n        rez[a] = b\n        rez[b] = a\nfor i in range(n * 2):\n    print(rez[i] + 1, end=' ')", "n = int(input())\nans = [0] * (n * 2 + 1)\nused = [False] * (n * 2 + 1)\narr = []\nfor i in range(2, n * 2+1):\n    qwe = [0] + [int(x) for x in input().split()]\n    for j in range(1, i):\n        arr.append((qwe[j], i, j))     \n\narr.sort(reverse=True)\nfor x in arr:\n    if not(used[x[1]]) and not(used[x[2]]):\n        used[x[1]] = used[x[2]] = True\n        ans[x[1]] = x[2]\n        ans[x[2]] = x[1]\n\nprint(*ans[1:])", "import sys; sys.setrecursionlimit(1000000); import math\ndef solve():\n    n, = rv()\n    l = list()\n    already = [-1] * (2 * n)\n    for i in range(2 * n - 1):\n        temp, = rl(1)\n        for j, val in enumerate(temp):\n            l.append((val, i + 1, j))\n    l.sort(key = lambda x : -x[0])\n    for tup in l:\n        f, s = tup[1], tup[2]\n        if already[f] == -1  and already[s] == -1:\n            already[f] = s\n            already[s] = f\n    print(' '.join(map(str, [val + 1 for val in already])))\n\n\ndef rv(): return list(map(int, input().split()))\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n\n", "#!/usr/bin/env python3\nimport sys\n\nN = int(input())\n\nscore_pairings = []\npartner_of = {}\npeople_with_partners = set()\n\nfor k in range(2*N - 1):\n  i = k + 2\n  line = list(map(int, input().split()))\n  for j in range(1, i):\n    score_pairings += [(line[j-1], (i, j))]\n\nscore_pairings = sorted(score_pairings)[::-1]\n\nfor score, (i, j) in score_pairings:\n  if i in people_with_partners or j in people_with_partners:\n    continue\n  partner_of[i] = j\n  partner_of[j] = i\n  people_with_partners.add(i)\n  people_with_partners.add(j)\n\nprint(' '.join(str(partner_of[i]) for i in partner_of))", "n = int(input())\na = []; b = [0]*(2*n+1); c = [0]*(2*n+1);\nz = dict()\nfor i in range(2*n-1):\n    k = list(map(int, input().split()));\n    for j in range(len(k)):\n        z[k[j]] = (i+2, j+1)\n    a += k\na.sort(reverse = True)\nfor d in range(len(a)):\n    i, j = z[a[d]]\n    if not c[i] and not c[j]:\n        b[i] = j\n        b[j] = i\n        c[i] = c[j] = True\nfor i in range(1, 2*n+1):\n    print(b[i], end=' ')\n", "n = int(input())\na = []\nteam = [None] * (n + n)\nfor i in range(1, n + n):\n    for j, v in enumerate(map(int, input().split())):\n        a.append((v, i, j))\na.sort(reverse=True)\n\nfor _, i, j in a:\n    if team[i] is None and team[j] is None:\n        team[i] = j + 1\n        team[j] = i + 1\n\nprint(' '.join(str(i) for i in team))\n", "import sys\n\n#sys.stdin = open(\"input.txt\")\n#sys.stdout = open(\"output.txt\", \"w\")\n\nn = int(input())\nstud = []\nfor i in range(1, 2*n):\n\tlst = [int(x) for x in input().split()]\n\tfor j in range(len(lst)):\n\t\tstud += [(lst[j], j, i)]\n\nstud.sort(reverse = True)\nans = [-1 for x in range(2 * n)]\n\nfor item in stud:\n\tfirst = item[1]\n\tsecond = item[2]\n\tif ans[first] == ans[second] == -1:\n\t\tans[first] = second\n\t\tans[second] = first\n\nfor x in ans:\n\tprint(x + 1, end = ' ')\nprint()\n\n\n", "def main():\n    n = int(input())\n    N = 2 * n\n    ans = [None] * N\n    a = [list(map(int, input().split())) for i in range(N - 1)]\n\n    used = [False] * N\n    for i in range(n):\n        Max = -(10 ** 9)\n        for i in range(N - 1):\n            if used[i + 1]:\n                continue\n            for j in range(i + 1):\n                if not used[j] and a[i][j] > Max:\n                    Max = a[i][j]\n                    x, y = i + 1, j\n        used[x] = used[y] = True\n        ans[x], ans[y] = y + 1, x + 1\n\n    print(' '.join(map(str, ans)))\nmain()", "def getKey(item):\n        return item[2]\n\nn = int(input())\n\nli = []\n\nfor _ in range(n*2-1):\n    li.append([int(x) for x in input().split()])\n\nans = [0]*(2*n+5)\n\ndict = []\n\nfor i in range(2*n-2,-1,-1):\n    for j in range(0,i+1):\n        dict.append([i+2,j+1,li[i][j]])\n\ndict = sorted(dict, key=getKey, reverse=True)\n\n#print(dict)\n\nfor i in dict:\n    if ans[i[0]] == 0 and ans[i[1]] == 0:\n        ans[i[0]] = i[1]\n        ans[i[1]] = i[0]\n\nprint(' '.join(map(str,ans[1:2*n+1])))\n\n"]