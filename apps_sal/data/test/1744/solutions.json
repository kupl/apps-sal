["import sys\ninput = sys.stdin.readline\nn, M = list(map(int, input().split()))\nt = list(map(int, input().split()))\nans = []\ntmp = [0] * 101\nfor i in range(n):\n    num = 0\n    T = t[i]\n    for j in range(1, 101):\n        if T + j * tmp[j] <= M:\n            num += tmp[j]\n            T += j * tmp[j]\n        else:\n            m = M - T\n            num += m // j\n            break\n\n    ans.append(i - num)\n    tmp[t[i]] += 1\n\nprint(*ans)\n", "import math\n\ndef main():\n    n,m = map(int,input().split())\n    time = list(map(int,input().split()))\n    ans = []\n    total = 0\n    counts = [0]*100\n    for i in range(n):\n        if m-total >= time[i]:\n            ans.append(0)\n        else:\n            count = 0\n            new = total\n            for j in range(99,-1,-1):\n                if counts[j] > 0:\n                    new -= counts[j]*(j+1)\n                    if m-new < time[i]:\n                        count += counts[j]\n                    else:\n                        new += counts[j]*(j+1)\n                        count += math.ceil((time[i]+new-m)/(j+1))\n                        break\n                    #print(new,j+1,counts[j],count)\n            ans.append(count)\n                \n        counts[time[i]-1] += 1\n        total += time[i]\n\n    for i in ans:\n        print(i,end = ' ')\n                \n\nmain()\n", "'''input\n5 100\n80 100 100 40 60\n'''\n# problem solving is essentially pattern recognition\nfrom sys import stdin, stdout\nimport math\nimport collections\n\n# main starts\nn, m = list(map(int, stdin.readline().split()))\narr = list(map(int, stdin.readline().split()))\naux = dict()\nfor i in range(1, 101):\n\taux[i] = 0\ncur_sum = 0\n\nfor i in range(len(arr)):\n\tcount = 0\n\tif cur_sum + arr[i] <= m:\n\t\tcount = 0\n\telse:\n\t\ttemp = 0\n\t\tfor k in range(100, 0, -1):\n\t\t\ttemp += k * aux[k]\n\t\t\tif cur_sum - temp + arr[i] <= m:\n\t\t\t\ttemp -= k * aux[k]\n\t\t\t\tstart = 1\n\t\t\t\tend = aux[k]\n\t\t\t\twhile True:\n\t\t\t\t\tif start >= end:\n\t\t\t\t\t\tif cur_sum - temp - ((start - 1) * k) + arr[i] <= m:\n\t\t\t\t\t\t\tstart -= 1\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tmid = (start + end) //2 \n\t\t\t\t\tif cur_sum - (mid * k) - temp + arr[i] <= m:\n\t\t\t\t\t\tend = mid - 1\n\t\t\t\t\telse:\n\t\t\t\t\t\tstart  = mid + 1\n\n\t\t\t\tif cur_sum - (start * k) - temp + arr[i] <= m:\n\t\t\t\t\tcount += start\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tcount += start + 1\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcount += aux[k]\n\n\tcur_sum += arr[i]\n\tprint(count, end = ' ')\n\taux[arr[i]] += 1", "a = [int(i) for i in input().split()]\nn = a[0]\nM = a[1]\nx = [int(i) for i in input().split()]\npref = [0 for i in x]\npref[0] = x[0]\nfreq = [0 for i in range(100)]\nfor i in range(1,n):\n\tpref[i] = pref[i-1] + x[i] \nfor j in range(n):\n\tans = pref[j]\n\tif(ans<=M):\n\t\tprint(0,end=' ')\n\telse:\n\t\tk = 0\n\t\twhile(ans>M):\n\t\t\tfor i in range(99,-1,-1):\n\t\t\t\tif(freq[i]==0):\n\t\t\t\t\tcontinue\n\t\t\t\ty = (ans-M)//(i+1)\n\t\t\t\t# print(y)\n\t\t\t\tif(y==0):\n\t\t\t\t\tans = ans - (i+1)\n\t\t\t\t\tk+=1\n\t\t\t\telif(freq[i]<=y):\n\t\t\t\t\tans = ans - freq[i]*(i+1)\n\t\t\t\t\tk+=freq[i]\n\t\t\t\telse:\n\t\t\t\t\tif(ans - (y)*(i+1)<=M):\n\t\t\t\t\t\tans = ans - (y)*(i+1)\n\t\t\t\t\t\tk+=(y)\n\t\t\t\t\telse:\n\t\t\t\t\t\tans = ans - (y+1)*(i+1)\n\t\t\t\t\t\tk+=(y+1)\n\t\t\t\t# print(ans,j)\n\t\t\t\tif(ans<=M):\n\t\t\t\t\tbreak\n\t\tprint(k,end=' ')\n\t\t# print(freq)\n\tfreq[x[j]-1]+=1", "from copy import deepcopy\niarr = list(map(int,input().split()))\nn = iarr[0]\nm = iarr[1]\ntar = list(map(int,input().split()))\nfreq = [0 for i in range(101)]\nfor i in range(n):\n\trem = m-tar[i]\n\t#yoar = deepcopy(tar[:i])\n\t#yoar.sort()\n\t#print(yoar)\n\tcount = 0\n\tcounthr = 0\n\tfor j in range(1,101):\n\t\tafteradd = counthr+freq[j]*j\n\t\tif afteradd > rem:\n\t\t\tcount+= (rem - counthr)//j\n\t\t\tcounthr += count*j\n\t\t\tbreak\n\t\telif afteradd == rem:\n\t\t\tcounthr = afteradd\n\t\t\tcount+=freq[j]\n\t\t\tbreak\n\t\telse:\t\n\t\t\tcounthr = afteradd\n\t\t\tcount+=freq[j]\n\t\t\n\tfreq[tar[i]]+=1\n\t\t# if counthr==rem:\n\t\t# count = i-count\n\t\t# elif counthr < rem:\t\n\t\t# \tcount = 0\n\t\t# else:\n\t\t# \tcount = i-count+1\t\t\n\tprint(i-count,end=\" \")\nprint()", "n, m = map(int, input().split())\nt = list(map(int, input().split()))\ntIndex = {}\ntIndexSum = {}\ns = 0\nfor i in range(n):\n    r = 0\n    if s + t[i] > m:\n        keys = list(tIndex.keys())\n        keys.sort(reverse = True)\n        s1 = s\n        for k in keys:\n            if s1 - tIndex[k] * k + t[i] > m:\n                s1 -= tIndex[k] * k\n                r += tIndex[k]\n            else:\n                r += (s1+t[i]-m)//k\n                s1 -= ((s1+t[i]-m)//k) * k\n                if s1 + t[i] > m:\n                    s1 -= k\n                    r += 1\n            if s1 + t[i] <= m:\n                break\n    print(r, end = ' ')\n            \n    if not(t[i] in tIndex):\n        tIndex[t[i]] = 0\n    tIndex[t[i]] += 1\n    if not(t[i] in tIndexSum):\n        tIndexSum[t[i]] = 0\n    tIndexSum[t[i]] += t[i]\n    s += t[i]\n##    print('s=',s)\n##    print(tIndex)\n            \n", "#  author: ThePonyCoder\n#  created: 19.06.2019, 17:45\n#  filename: a.py\n#  path: C:/Users/User/Desktop/python/Prog/CodeForces/rounds/cf_568/a.py\n\ndef ri():\n    return [int(i) for i in input().split()]\n\n\ndef fl(a, b):\n    return abs(a - b)\n\n\ndef gt_mx(d, l):\n    ans = 0\n    for i in reversed(range(1, 110)):\n        if(l < 0):\n            break\n        if d[i] > 0:\n            do = min(l // i, d[i])\n            ans += do\n            l -= do * i\n            if l > 0 and do < d[i]:\n                l -= i\n                ans += 1\n    \n    return ans\n\n\ndef main(n, m, t):\n    if m >= t[0]:\n        print(0, end=' ')\n    else:\n        print(1, end=' ')\n    d = {i: 0 for i in range(1, 110)}\n    d[t[0]] += 1\n    sm = t[0]\n    for i in range(1, len(t)):\n        sm += t[i]\n        if i == 5:\n            asd = 123\n        if sm > m:\n            delit = gt_mx(d, sm - m)\n            print(delit, end=' ')\n        else:\n            print(0, end=' ')\n        d[t[i]] += 1\n        \n        # print(ans, )\n    # return ans\n\n\nn, m = ri()\nt = ri()\nmain(n, m, t)\n", "n, m = map(int, input().strip().split())\na    = [int(x) for x in input().strip().split()]\nt    = [0 for i in range(0, 101)]\nfor i in range(0, n):\n    c, j, s = a[i], 1, 0\n    flag = 0\n    while(j < 101):\n        cnt = min(t[j], (m-c)//j)\n        s += cnt\n        c += j*cnt\n        if(cnt < t[j]):\n            flag = 1\n            break\n        j+=1\n    if(flag == 0):\n        print(0, end=' ')\n    else:\n        print(i-s, end=' ')\n    t[a[i]]+=1\n", "#!/usr/bin/env python\nn, M = list(map(int, input().split()))\nt = list(map(int, input().split()))\nf = [0 for _ in range(101)]\na = []\nfor i in range(n):\n    Mi = M - t[i]\n    c = 0\n    for j in range(1, 101):\n        k = min(Mi // j, f[j]) \n        Mi -= k * j\n        c += k\n    a.append(i - c)\n    f[t[i]] += 1\nprint(' '.join(map(str, a)))\n", "\ndef main1():\n    buf = input()\n    buflist = buf.split()\n    n = int(buflist[0])\n    M = int(buflist[1])\n    buf = input()\n    buflist = buf.split()\n    t = list(map(int, buflist))\n    student = []\n    minimum = []\n    for i in range(n):\n        count = 0\n        pointer = 0\n        while pointer < i:\n            if count + student[pointer] <= M - t[i]:\n                count += student[pointer]\n                pointer += 1\n            else:\n                break\n        minimum.append(i - pointer)\n        student.append(t[i])\n        student.sort()\n    print(' '.join(list(map(str, minimum))))\n\ndef main2():\n    buf = input()\n    buflist = buf.split()\n    n = int(buflist[0])\n    M = int(buflist[1])\n    buf = input()\n    buflist = buf.split()\n    t = list(map(int, buflist))\n    bucket = []\n    for i in range(101):\n        bucket.append(0)\n    minimum = []\n    for i in range(n):\n        target = M - t[i]\n        count = 0\n        subtotal = 0\n        for j in range(1, 101):\n            if subtotal + bucket[j] * j > target:\n                count += (target - subtotal) // j\n                break\n            else:\n                count += bucket[j]\n                subtotal += bucket[j] * j\n        minimum.append(i - count)\n        bucket[t[i]] += 1\n    print(' '.join(list(map(str, minimum))))\n\ndef __starting_point():\n    #main1() # for C1\n    main2() # for C2\n\n__starting_point()", "n, m = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\ncnt = [0]*101\ncurr = 0\nfor i in range(n):\n\tres = 0\n\tval = (curr+arr[i])-m\n\tt = 100\n\twhile t > 0 and val > 0:\n\t\td = min(cnt[t], (val+t-1)//t)\n\t\tres += d\n\t\tval -= d*t\n\t\tt -= 1\n\tprint(res, end=\" \")\n\tcurr += arr[i]\n\tcnt[arr[i]] += 1\n", "import math\nimport heapq\nimport copy\nfrom collections import OrderedDict\nfrom collections import deque  \n\n\n\nt=list(map(int,input().split()))\nd=t[1]\nk=list(map(int,input().split()))\nm=[0]*101\nans=list()\n\ntime=0\nfor i in range(t[0]):\n\ttime=time+k[i]\n\tif((d-time)>=0):\n\t\tans.append(0)\n\t\tm[k[i]]=m[k[i]]+1\n\t\t\n\telse:\n\t\tcount=0\n\t\ttest=time\n\t\tfor j in range(100,-1,-1):\n\t\t\tif(test<=d):\n\t\t\t\tbreak\n\t\t\tif(m[j]>0):\n\t\t\t\tcur=m[j]\n\t\t\t\tvv=cur*j\n\t\t\t\tif(abs(test-vv)<=d):\n\t\t\t\t\tif(vv<test or vv>test):\n\t\t\t\t\t\tx=math.ceil((test-d)/j)\n\t\t\t\t\t\tif(x<=cur):\n\t\t\t\t\t\t\tcount=count+x\n\t\t\t\t\t\t\ttest=test-(x*j)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tcount=count+cur\n\t\t\t\t\t\t\ttest=test-(cur*j)\n\t\t\t\t\telse:\n\t\t\t\t\t\tcount=count\n\t\t\t\t\t\ttest=test-vv\n\n\t\t\t\telse:\n\t\t\t\t\tcount=count+m[j]\n\t\t\t\t\ttest=test-vv\n\t\tans.append(count)\n\t\tm[k[i]]=m[k[i]]+1\nprint(*ans)", "#!/usr/bin/env python\nn, M = list(map(int, input().split()))\nt = list(map(int, input().split()))\nf = [0 for _ in range(101)]\na = []\nfor i in range(n):\n    Mi = M - t[i]\n    c = 0\n    for j in range(1, 101):\n        k = min(Mi // j, f[j]) \n        Mi -= k * j\n        c += k\n    a.append(i - c)\n    f[t[i]] += 1\nprint(' '.join(map(str, a)))\n", "n, m = [int(i) for i in input().split()]\nline = [int(x) for x in input().split()]\n\ncount = {i+1:0 for i in range(100)}\nsum = 0\n\nfor i in line:\n    p = sum + i\n    t = 0\n    if p > m:\n        for j in range(100, 0, -1):\n            if count[j] == 0:\n                continue\n            else:\n                if p - count[j] * j > m:\n                    p -= count[j] * j\n                    t += count[j]\n                else:\n                    l = (p - m) // j\n                    if p - l * j > m:\n                        l += 1\n                    t += l\n                    break\n    count[i] += 1\n    sum += i\n    print(t, end = \" \")\n", "n, m = list(map(int, input().split()))\nt = list(map(int, input().split()))\nfreq = []\nfor i in range(101):\n\tfreq.append(0)\nfor i in range(0, n):\n\ttime=m-t[i]\n\tnum=0\n\tfor j in range(1, 101):\n\t\tp = int(time/j)\n\t\tif(p>=freq[j]):\n\t\t\ttime-=freq[j]*j\n\t\t\tnum+=freq[j]\n\t\telse:\n\t\t\ttime-=p*j\n\t\t\tnum+=p\n\tprint(i-num, end=\" \")\n\tfreq[t[i]] += 1", "import itertools\nfrom heapq import heapify, heappush, heappop\nimport sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\nt = list(map(int, input().split()))\ntsum = list(itertools.accumulate(t))\nans = []\nfor i in range(n):\n    if tsum[i] <= m:\n        ans.append(0)\n    else:\n        heap = [-k for k in t[:i]]\n        heapify(heap)\n        remain = sum(t[:i]) - m\n        count = 0\n        for j in range(i, n):\n            uselist = []\n            remain += t[j]\n\n            while remain > 0:\n                count += 1\n                use = heappop(heap)\n                remain += use\n                uselist.append(use)\n            else:\n                ans.append(count)\n                uselist.sort(reverse = True)\n\n            summ = 0\n            for uses in uselist[:100]:\n                heappush(heap, uses)\n                remain -= uses\n                summ -= uses\n                count -= 1\n                if summ > 100:\n                    break\n            heappush(heap, -t[j])\n\n        break\n\nprint(\" \".join(map(str, ans)))\n", "import bisect\nn,m=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\nanswer=[]\nstudents=[0]*100\nfor i in range(n):\n    time=m-a[i]\n    counter=0\n    for j in range(100):\n        x=min(time//(j+1),students[j])\n        counter+=x\n        time-=(x*(j+1))\n    answer.append(i-counter)\n    students[a[i]-1]+=1\nprint(*answer)\n        \n    \n    \n", "n, m = map(int, input().split())\ntot_sum, curr_sum, d = 0, 0, {}\narr = list(map(int, input().split()))\nfor x in arr:\n    tot_sum += x\n    curr_sum += x\n    curr_res = 0\n    for it in sorted(d.keys(), reverse=True):\n        if curr_sum <= m:\n            break\n        take = min(d[it], (curr_sum - m + it - 1) // it)\n        curr_sum -= take * it\n        curr_res += take\n    d[x] = 1 if x not in d else d[x] + 1\n    curr_sum = tot_sum\n    print(curr_res, end=' ')\n", "arr = list(map(int, input().split()))\nn, m = arr[0], arr[1]\ns = str(input())\na = [int(i) for i in s.split()]\nanswers = []\ns = 0\ncount = 0\nmax_val = 0\nk = 0\narr = [0 for i in range(101)]\nfor elem in a:\n    if s + elem > m:\n        i = max_val\n        s2 = s\n        c2 = count\n        while s2 + elem > m:\n            if s2 - arr[i] * i + elem <= m:\n                ans = k - c2 + (arr[i] - (m - elem - (s2 - arr[i] * i)) // i)\n                s2 -= i * (arr[i] - (m - elem - (s2 - arr[i] * i)) // i)\n            else:\n                s2 -= arr[i] * i\n                c2 -= arr[i]\n                i -= 1\n        if elem < max_val:\n            arr[elem] += 1\n            arr[max_val] -= 1\n            s = s - max_val + elem\n            j = max_val\n            while arr[j] < 1:\n                j -= 1\n            max_val = j\n    else:\n        arr[elem] += 1\n        s += elem\n        ans = k - count\n        count += 1\n        if elem > max_val:\n            max_val = elem\n    answers.append(str(ans))\n    k += 1\n\nprint(' '.join(answers))\n\n\n", "n,m=list(map(int,input().split()))\nif n==1:\n\tprint(0)\n\treturn\nt=list(map(int,input().split()))\ndp=[0]*101\nans=[]\nfor i in range(len(t)):\n\ts=0\n\tlim=m-t[i]\n\tf=False\n\tc=0\n\tfor j in range(1,101):\n\t\tif f:\n\t\t\tc+=dp[j]\n\t\t\tcontinue\n\t\tif dp[j]:\n\t\t\tif s+dp[j]*j>lim:\n\t\t\t\tc+=dp[j]-(lim-s)//j\n\t\t\t\tf=True\n\t\t\ts+=dp[j]*j\n\tdp[t[i]]+=1\n\tans.append(c)\nprint(*ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "from heapq import *\nN, M = map(int, input().split())\nA = [int(a) for a in input().split()]\n\nh = []\ns = 0\nk = 0\nANS = []\nfor a in A:\n    t = []\n    while s + a > M:\n        t.append(heappop(h))\n        s += t[-1]\n    ANS.append(len(t)+k)\n    while t:\n        s -= t[-1]\n        heappush(h, t.pop())\n    s += a\n    heappush(h, -a)\n    if s > M:\n        s += heappop(h)\n        k += 1\nprint(*ANS)", "import math\n\nnM=input().split(' ')\nn = int(nM[0])\nM = int(nM[1])\n\na = list(map(int,input().split(' ')))\n\ncarr = [0 for i in range(100)]\n\ncarr[a[0]-1]+=1\nprint('0',end=' ')\n\nsum=a[0]\nfor i in range(1,len(a)):\n    failed=0\n    if sum+a[i] > M:\n        A = sum+a[i]\n        for itr in range(100,0,-1):\n            if A - carr[itr-1]*itr > M:\n                A-=carr[itr-1]*itr\n                failed+=carr[itr-1]\n                # print(A,itr,failed)\n            else:\n                failed+=math.ceil((A-M)/itr)\n                # print('vade',failed)\n                break\n        print(failed,end=' ')\n    else:\n        print(failed, end=' ')\n    \n    sum+=a[i]\n    carr[a[i]-1]+=1", "import sys\ndef nline():\n    return sys.stdin.readline()[:-1]\n \ndef ni():\n    return int(sys.stdin.readline())\n \ndef na():\n    return [int(v) for v in sys.stdin.readline().split()]\n\nn,m=na()\narr=na()\nsm=0\ncount=[0]*101\nfor i in range(0,n):\n\tdiff,k=sm+arr[i]-m,0\n\tif(diff>0):\n\t\tfor j in range(100,-1,-1):\n\t\t\ttmp=count[j]*j\n\t\t\tif(tmp>=diff):\n\t\t\t\tk+=(diff+j-1)//j\n\t\t\t\tbreak;\n\t\t\tk+=count[j]\n\t\t\tdiff-=tmp\n\tprint(k,end=\" \")\n\tsm+=arr[i]\n\tcount[arr[i]]+=1"]