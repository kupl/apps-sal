["n = int(input())\n\nfriends = dict()\n\nfor _ in range(n):\n    line = input().strip().split()\n    if line[0] not in friends:\n        friends[line[0]] = set()\n    for i in range(2, len(line)):\n        friends[line[0]].add(line[i])\n\ndef order(S):\n    S2 = [(len(e),e) for e in S]\n    S2.sort()\n\n    real = set()\n\n    for i in range(len(S2)):\n        d,e = S2[i]\n        flag = True\n        for j in range(i+1, len(S2)):\n            x = S2[j][1]\n            if x[-d:] == e:\n                flag = False\n                break\n        if flag:\n            real.add(e)\n    return real\n\nprint(len(friends))\nfor f in friends:\n    nums = order(friends[f])\n    st = ' '.join(nums)\n    print(f + ' ' + str(len(nums)) + ' ' + st)\n", "n = int(input())\nd = dict()\nfor i in range(n):\n    a = input().split()\n    if a[0] not in d:\n        d[a[0]] = []\n    for j in range(2, len(a)):\n        a[j] = a[j][::-1]\n    d[a[0]] += a[2:]\nprint(len(d))\nfor x in d:\n    a = d[x]\n    a.sort(reverse = True)\n    ##print(a)\n    b = [a[0]]\n    for i in range(1, len(a)):\n        if a[i - 1][:len(a[i])] != a[i]:\n            b += [a[i]]\n    for i in range(len(b)):\n        b[i] = b[i][::-1]\n    print(x, len(b), *b)\n", "from collections import defaultdict\nfrom sys import stderr\n\nn = int(input())\n\nfriends = defaultdict(lambda: set())\n\nfor i in range(n):\n    name, _, *numbers = input().split()\n    for number in numbers:\n        skip_number = False\n        for old_number in list(friends[name]):\n            if number.endswith(old_number):\n                friends[name].remove(old_number)\n            elif old_number.endswith(number):\n                skip_number = True\n        if not skip_number:\n            friends[name].add(number)\n\nprint(len(friends))\nfor name in friends:\n    print('{} {} {}'.format(name, len(friends[name]), ' '.join(friends[name])))\n", "n = int(input())\n\ndef is_suffix(phone, p):\n    if len(p) <= len(phone):\n        return False\n    return phone == p[-len(phone):]\n\ndef is_any_suffix(phone, phones):\n    for p in phones:\n        if is_suffix(phone, p):\n            return True\n    return False\n\nfrom collections import defaultdict\n\nname_map = defaultdict(list)\nfor i in range(n):\n    entry = input().split()\n    name = entry[0]\n    num = int(entry[1])\n    phones = entry[2:]\n    name_map[name].extend(phones)\n\nprint(len(name_map))\nfor name in name_map:\n    phones = name_map[name]\n    final_phones = set()\n    for phone in phones:\n        if not is_any_suffix(phone, phones) and phone not in final_phones:\n            final_phones.add(phone)\n    print(name, len(final_phones), ' '.join(final_phones))\n", "def print_arr(arr):\n\tfor i in arr:\n\t\tprint(i, \"\", end=\"\")\n\tprint()\t\n\n\nn = int(input())\nd = {}\nfor _ in range(n):\n\tname, num, *numbers = input().split()\n\tif name in d:\n\t\ts = d[name]\n\telse:\n\t\ts = []\t\n\tfor nm in numbers:\n\t\tfor i in s:\n\t\t\tif i.endswith(nm):\n\t\t\t\tstate=1\n\t\t\t\tbreak\n\t\t\tif nm.endswith(i):\n\t\t\t\ts.remove(i)\n\t\telse:\n\t\t\ts.append(nm)\n\td[name] = s\n\t\nprint(len(d))\t\nfor name in d:\n\tprint(name, len(d[name]), end=\" \")\n\tprint_arr(d[name])\t\t\t\t\t\t\t", "n = int(input())\nd = {}\nfor i in range(n):\n    s = [z for z in input().split()]\n    name = s[0]\n    count = int(s[1])\n    for z in range(count):\n        if name in d.keys():\n            d[name].append(s[2 + z])\n        else:\n            d[name] = [s[2 + z]]\n            \nfor k in d.keys():\n    a = set(d[k])\n    a = list(a)\n    b = []\n    for i in range(len(a)):\n        f = False\n        for j in range(len(a)):\n            if i != j:\n                if len(a[i]) <= len(a[j]):\n                    if a[j][len(a[j]) - len(a[i]):] == a[i]:\n                        f = True\n                        break\n        if f == False:\n            b.append(a[i])\n    d[k] = b\nprint(len(d))\nfor k in d.keys():\n    print(k, end = ' ')\n    print(len(d[k]), end = ' ')\n    print(' '.join(d[k]))\n                \n            \n    ", "n = int(input())\nd = {}\nfor i in range(n):\n    arr = input().split()\n    name = arr[0]\n    cnt = arr[1]\n    arr = arr[2:]\n    if name in d:\n        for j in arr:\n            d[name].append(j)\n    else:\n        d[name] = arr\n\nprint(len(d))\nfor name in list(d.keys()):\n    print(name)\n    d[name] = list(set(d[name]))\n    ans = []\n    for i in range(len(d[name])):\n        le = len(d[name][i])\n        for j in range(len(d[name])):\n            if(i!=j and le < len(d[name][j]) and d[name][j][-le:] == d[name][i]):\n                break\n        else:\n            ans.append(d[name][i])\n    ans = set(ans)\n    print(len(ans))\n    for i in ans:\n        print(i)\n    \n", "n = int(input())\ndic = {}\nfor i in range(n):\n    text = input().split()\n    nam = text[0]\n    if nam not in dic:\n        dic[nam] = set()\n    for elem in text[2 :]:\n        dic[nam].add(elem)\n# print(dic)\nprint(len(dic))\nfor nam, s in list(dic.items()):\n    ls = []\n    for e in s:\n        add = True\n        l = len(e)\n        for j in s:\n            if j != e and j[ -l : ] == e:\n                add = False\n                break\n        if add:\n            ls.append(e)\n    print(nam, len(ls), *ls)\n\n\n", "from sys import stdin, stdout\n\nn = int(stdin.readline().rstrip())\nnameDict = {}\nfor _ in range(n):\n    s = stdin.readline().rstrip().split()\n    name = s[0]\n    if name not in nameDict:\n        nameDict[name]=set()\n    for number in s[2:]:\n        nameDict[name].add(number)\n\nfor name in list(nameDict.keys()):\n    rem=set()\n    for no1 in nameDict[name]:\n        for no2 in nameDict[name]:\n            if no1==no2:\n                continue\n            l1 = len(no1)\n            l2 = len(no2)\n            if l1<l2 and no2[-l1:]==no1:\n                rem.add(no1)\n    for no in rem:\n        nameDict[name].remove(no)\n\nprint(len(list(nameDict.keys())))\nfor name in list(nameDict.keys()):\n    print(' '.join([name,str(len(nameDict[name]))]+list(nameDict[name])))\n", "n = int(input())\ndirectory = dict()\nfor _ in range(n):\n    name, k, *nums = input().split()\n    if name in directory:\n        directory[name] += nums\n    else:\n        directory[name] = nums\n\nprint(len(directory.keys()))\nfor name in directory:\n    nums = directory[name]\n    nums.sort(key=len)\n    new_list = []\n    for ind, num in enumerate(nums):\n        l = len(num)\n        if all(_num[-l:] != num for _num in nums[ind + 1:]):\n            new_list.append(num)\n    print(name, len(new_list), *new_list)", "n = int(input())\n\nnames = {}\n\nfor i in range(n):\n    entry = input().split(' ')\n    name, k, numbers = entry[0], int(entry[1]), entry[2:]\n    if not names.__contains__(name):\n        names[name] = numbers\n    else:\n        names[name] += numbers\n\nfor name in names:\n    lst = sorted(names[name], key=len)\n    i = 0\n    while i < len(lst):\n        letter = lst[i]\n        for j in range(i+1, len(lst)):\n            if lst[j].find(lst[i], (len(lst[j])-len(lst[i]))) >= 0:\n                lst.remove(lst[i])\n                i -= 1\n                break\n        i += 1\n    names[name] = lst\n\nprint(len(names))\nfor name in names:\n    print('%s %d '%(name, len(names[name])),end='')\n    for ent in names[name]:\n        print('%s '%ent, end='')\n    print()", "n = int(input())\np = {}\no = {}\nfor i in range(n):\n    e = input().split()\n    if not e[0] in p:\n        p[e[0]] = []\n    for x in e[2:]:\n        p[e[0]].append((len(x), x[::-1]))\nfor i in p:\n    for x in sorted(p[i])[::-1]:\n        f = False\n        if not i in o:\n            o[i] = []\n        for z in o[i]:\n            f |= x[1]==z or (x[0]<len(z) and x[1]==z[:x[0]])\n        if not f:\n            o[i].append(x[1])\nprint(len(o))\nfor i in o:\n    print(i + ' ' + str(len(o[i])) + ' ' + ' '.join(x[::-1] for x in o[i]))\n", "import sys\nimport copy\n\ncases = sys.stdin.readline()\nmy_input = []\nfor line in sys.stdin.readlines():\n  my_input.append(line.strip().split(\" \"))\n\n\nmy_dict = dict()\nfor line in my_input:\n  arr = []\n  for i in range(2, len(line)):\n    arr.append(line[i])\n  if (line[0] in my_dict):\n    my_dict[line[0]].update(arr)\n  else:\n    my_dict[line[0]] = set(arr)\n\nfor x in my_dict:\n  values = my_dict[x]\n  final_values = copy.deepcopy(values)\n  for a in values:\n    for b in values:\n      if(a.endswith(b) and a != b and b in final_values):\n        final_values.remove(b)\n  my_dict[x] = final_values\n\nprint(len(my_dict))\nfor x in my_dict:\n  print(str(x) + \" \" + str(len(my_dict[x])) +  \" \" + ' '.join(my_dict[x]))\n", "n=int(input())\ns=set()\narr=[]\na={}\nfor i in range(n):\n    rr=list(map(str,input().strip().split(' ')))\n    arr.append(rr)\nfor i in range(n):\n    t=arr[i]\n    s.add(t[0])\n    try:\n        p=a[t[0]]\n        for j in range(2,2+int(t[1])):\n            a[t[0]].append(t[j])\n    except:\n        p=t[2]\n        a[t[0]]=[p]\n        for j in range(3,2+int(t[1])):\n            a[t[0]].append(t[j])\n\nfor ii in s:\n    p=a[ii]\n    p=list(set(p))\n    \n    for i in range(len(p)):\n        if(p[i]!='-1'):\n            tt=p[i]\n            for j in range(len(p)):\n                if(j!=i):\n                    pp=p[j]\n                    if(len(pp)>=len(tt)):\n                        continue\n                    else:\n                        y=0\n                        ans=0\n                        for uu in range(len(tt)-len(pp),len(tt)):\n                            if(tt[uu]!=pp[y]):\n                                ans=1\n                            y+=1\n                        if(ans==0):\n                            p[j]='-1'\n    d=[]\n    \n    cnt=0\n    for oo in p:\n        if(oo!='-1'):\n            cnt+=1\n    d.append(cnt)\n\n    for oo in p:\n        if(oo!='-1'):\n            d.append(oo)\n\n    a[ii]=d\nprint(len(s))\nfor i in s:\n    print(i,end=' ')\n    t=a[i]\n    for j in t:\n        print(j,end=' ')\n    print()\n\n", "import math\nimport sys\nimport getpass\nimport bisect\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\nfiles = True\n\nif getpass.getuser().lower() == 'frohe' and files:\n    sys.stdin = open('test.in')\n    # sys.stdout = open('test.out', 'w')\n\nn = ria()[0]\nnm = {}\nfor i in range(n):\n    ar = [i.strip() for i in input().split()]\n    name = ar[0]\n    if not (name in nm):\n        nm[name] = []\n    for j in ar[2:]:\n        nm[name].append(j)\nfor i in nm:\n    nm[i] = sorted(nm[i], key=lambda x: len(x))\n\nnmfin = {}\nfor i in nm:\n    cur = nm[i]\n    nmfin[i] = []\n    for j in range(len(cur)):\n        bad = False\n        for j1 in range(j + 1, len(cur)):\n            if cur[j1].endswith(cur[j]):\n                bad = True\n\n                break\n        if not bad:\n            nmfin[i].append(cur[j])\nprint(len(nmfin))\nfor i in nmfin:\n    print(i,len(nmfin[i]), end=' ')\n    for j in nmfin[i]:\n        print(j,end=' ')\n    print()\n", "def same(x,y):\n    if(len(x)>len(y)):\n        if(y==x[len(x)-len(y):]):\n            return 2\n    else:\n        if(x==y[len(y)-len(x):]):\n            return 1\n        else:\n            return 0\n    return 0\n\nn=int(input())\npb=dict()\nfor i in range(n):\n    record=input().split()\n    if(record[0] in list(pb.keys())):\n        pb[record[0]]+=record[2:]\n    else:\n        pb[record[0]]=record[2:]\nfor i in list(pb.keys()):\n    rf=[]\n    for j in pb[i]:\n        flag=True\n        for k in range(len(rf)):\n            if(same(j,rf[k])==2):\n                flag=False\n                rf[k]=j\n            elif(same(j,rf[k])==1):\n                flag=False\n        if(flag):\n            rf.append(j)\n    pb[i]=rf\nprint(len(list(pb.keys())))\nfor i in list(pb.keys()):\n    print(i,len(pb[i]),*pb[i])\n        \n", "n = int( input() )\n\nL = []\n\nm = {}\nnames = []\n\nfor i in range( n ):\n    a = input().split()\n\n    name = a[0]\n    names.append( a[0] )\n\n    a = a[2:]\n\n    if name not in m:\n        m[ name ] = []\n\n    for j in a:\n        m[ name ].append( j )\n\nnames = set( names )\n\nfor i in names:\n\n    #print( i )\n\n    a = list( set(m[i] ) )\n    #print( a )\n\n    good = [True] * len(a)\n\n    for j in range( len(a) ):\n        for k in range( len(a) ):\n            if j != k:\n                if a[k].endswith( a[j] ):\n                    good[j] = False\n                    break\n\n    ok = False\n    cnt = 0\n    for j in range( len(a) ):\n        if good[j] == True:\n            cnt += 1\n            ok = True\n\n    if ok == False:\n        continue\n\n    out = i + \" \" + str(cnt)\n\n    for j in range( len(a) ):\n        if good[j]:\n            out += \" \" + a[j]\n\n    L.append( out )\n\nprint( len(L) )\nfor i in L:\n    print( i )\n\n\nreturn\n", "phones = dict()\nn = int(input())\n\nfor i in range(n):\n    name, num, *numbers = input().split()\n    for number in numbers:\n        try:\n            for el in phones[name]:\n                if el.endswith(number):\n                    break\n                if number.endswith(el):\n                    phones[name].remove(el)\n                    phones[name].add(number)\n                    break\n            else:\n                phones[name].add(number)\n        except KeyError:\n            phones[name] = {number}\n\nprint(len(phones))\nprint('\\n'.join([' '.join([name, ' '.join([str(len(numbers)), ' '.join(numbers)])]) for name, numbers in list(phones.items())]))\n\n", "n = int(input())\nbook = {}\nbook_cool = {}\nfor i in range(n):\n    li = list(input().split())\n    if li[0] not in book:\n        book[li[0]] = []\n    for num in li[2:int(li[1]) + 2]:\n        book[li[0]].append(num[::-1])\nfor name in book:\n    t = book[name]\n    t.sort()\n    book_cool[name] = set()\n    tt = book_cool[name]\n    for i in range(1, len(t)):\n        if t[i].startswith(t[i - 1]):\n            pass\n        else:\n            tt.add(t[i - 1])\n    tt.add(t[-1])\nprint(len(book_cool))\nfor i in book_cool:\n    print(i, len(book_cool[i]), end = ' ')\n    for j in book_cool[i]:\n        print(j[::-1], end = ' ')\n    print()\n    ", "n=int(input())\na={}\nfor i in range(n):\n    q=input().split()\n    if q[0] in a:\n        a[q[0]]+=q[2:]\n    else:\n        a[q[0]]=q[2:]\nprint(len(a))\nfor w in a:\n    b=a[w]\n    b.sort(key=lambda x:len(x))\n    i=0\n    while True:\n        j=i+0\n        while j!=len(b)-1:\n            j+=1\n            if b[i] == b[j][len(b[j])-len(b[i]):]:\n                del b[i]\n                break\n        else:\n            i+=1\n        if i==len(b):\n            break\n    print(w,len(b),*b)\n\n", "n = int(input())\nd = dict()\nfor i in range(n):\n    inp = input().split()\n    name, cnt = inp[0], int(inp[1])\n    d[name] = d.get(name, set())\n    d[name].update(inp[2:])\nprint(len(d))\nfor k, v in d.items():\n    v = list(v)\n    for i in range(len(v)):\n        for j in range(len(v)):\n            if i != j and len(v[i]) <= len(v[j]) and v[j][len(v[j]) - len(v[i]):] == v[i]:\n                v[i] = '-'\n    l = 0\n    for e in v:\n        if e != '-':\n            l += 1\n    print(k, l, end=' ')\n    for e in v:\n        if e != '-':\n            print(e, end=' ')\n    print()\n", "n = int(input())\n\nbook = dict()\n\nfor i in range(n):\n    phones = []\n    inp = [i for i in input().split()]\n\n    name = inp[0]\n\n    phones = [i for i in inp[2:]]\n\n    for ph in phones:\n        if not name in book:\n            book[name] = [ph]\n            continue\n        f= True\n        for j in range(len(book[name])):\n            if len(book[name][j]) <= len(ph) and ph.rfind(book[name][j]) + len(book[name][j]) == len(ph):\n                book[name][j] = ph\n                break\n            elif (len(book[name][j]) >= len(ph) and book[name][j].rfind(ph) + len(ph) == len(book[name][j])):\n                f = False\n        else:\n            if f:\n                book[name].append(ph)\n\nprint(len(book))\nfor name in book:\n    print(name, len(book[name]), end=' ')\n    for ph in book[name]:\n        print(ph + '', end=' ')\n    print()\n    \n", "def check(a, s1, s2):\n    s1, s2 = str(s1), str(s2)\n    #print(s1,s2)\n    #print(s1[len(s1) - len(s2):len(s1)],s2)\n    #print(s1[len(s1) - len(s2):len(s1)] == s2)\n    #print()\n    if s1[len(s1) - len(s2):len(s1)] == s2:\n        return True\n    elif s1 == s2 or not(s2 in a):\n        return False\n        \n\n\n\nn = int(input())\nname = []\nphone = []\n\nfor i in range(n):\n    a = list(input().split())\n    #for i in range(int(a[1]) + 1):\n        #a[i + 1] = int(a[i + 1])\n    if not(a[0] in name):\n        name.append(a[0])\n        phone.append(a[2:2 + int(a[1])])\n    else:\n        phone[name.index(a[0])] += a[2:2 + int(a[1])]\n\nans = []\nfor i in range(len(phone)):\n    phone[i] = list(set(phone[i]))\n    ans.append([])\n\nfor i in range(len(phone)):\n    for j in range(len(phone[i])):\n        kek = 0\n        for k in range(len(phone[i])):\n            if j != k and check(ans[i],phone[i][k],phone[i][j]):\n                kek += 1\n        if kek == 0:\n            ans[i].append(phone[i][j])\n\nprint(len(name))\nfor i in range(len(name)):\n    print(name[i], len(ans[i]), *ans[i])\n", "n=int(input())\nd={}\nfor _ in range(n):\n    a=input().split()\n    if a[0] in d:\n        for i in range(int(a[1])):\n            d[a[0]].append(a[2+i])\n        continue\n    d[a[0]]=[]\n    for i in range(int(a[1])):\n        d[a[0]].append(a[2+i])\nprint(len(d))\nfor i in d:\n    for j in range(len(d[i])):\n        for k in range(len(d[i])):\n            if j != k and d[i][k].endswith(d[i][j]):\n                d[i][j]='a'\n    print(i,len([e for e in d[i] if e!='a']),end=' ')\n    for g in d[i]:\n        if g!='a':\n            print(g,end=' ')\n    print()\n\n"]