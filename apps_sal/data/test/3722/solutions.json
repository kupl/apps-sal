["from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom operator import mul\nfrom functools import reduce\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 13\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.readline().rstrip().split()\ndef S(): return sys.stdin.readline().rstrip()\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n#a\u304bb\u306e\u3069\u3061\u3089\u304b\u306f\u7121\u9650\u306b\u5897\u3084\u305b\u308b\nn=I()\nc1=S()\nc2=S()\nc3=S()\nc4=S()\n\nif n<=3:\n    print((1))\n    return\n\nif c2==\"A\":\n    if c1==\"A\":\n        print((1))\n    else:\n        dp = [[0] * 2 for _ in range(n - 3)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        for i in range(1, n - 3):\n            dp[i][0] = sum(dp[i - 1]) % mod\n            dp[i][1] = dp[i - 1][0]\n        if c3==\"A\":\n            print((sum(dp[-1]) % mod))\n        else:\n            print((pow(2,n-3,mod)))\nelse:\n    if c4==\"B\":\n        print((1))\n    else:\n        dp = [[0] * 2 for _ in range(n - 3)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        for i in range(1, n - 3):\n            dp[i][0] = sum(dp[i - 1]) % mod\n            dp[i][1] = dp[i - 1][0]\n        if c3==\"B\":\n            print((sum(dp[-1]) % mod))\n        else:\n            print((pow(2,n -3,mod)))\n\n\n\n\n\n", "N = int(input())\nc1 = str(input())\nc2 = str(input())\nc3 = str(input())\nc4 = str(input())\n\nc=c1+c2+c3+c4\n\nif c in [\"AAAA\",\"AAAB\",\"AABA\",\"AABB\",\"ABAB\",\"BBAB\",\"ABBB\",\"BBBB\"]:\n\tprint((1))\n\nif c in [\"ABAA\",\"BABA\",\"BABB\",\"BBAA\"]:\n\tif N==2 or N==3:\n\t\tprint((1))\n\telse:\n\t\tans=1\n\t\tfor dummy in range(N-3):\n\t\t\tans*=2\n\t\t\tans=ans%(10**9+7)\n\t\t\n\t\tprint(ans)\n\nif c in [\"BAAA\",\"BAAB\",\"ABBA\",\"BBBA\"]:\n\tans=[1,1]\n\tif N==2 or N==3:\n\t\tprint((1))\n\telse:\n\t\tfor dummy in range(N-3):\n\t\t\tans+=[(ans[-1]+ans[-2])%(10**9+7)]\n\t\t\n\t\tprint((ans[-1]))\n\n\n\n\n# 2darray\n## [[0] * 4 for i in range(3)]\n\n# import itertools\n# import sys\n## return\n\n# l_2d = [[20, 3, 100], [1, 200, 30], [300, 10, 2]]\n# sorted(l_2d, key=lambda x: x[0])\n## [[1, 200, 30], [20, 3, 100], [300, 10, 2]]\n\n# import numpy as np\n# l_2d_t = np.array(l_2d).T.tolist()\n# l_2d_ts = sorted(l_2d_t, key=lambda x: x[0])\n# np.array(l_2d_ts).T.tolist()\n## [[3, 20, 100], [200, 1, 30], [10, 300, 2]]\n\n", "N = int(input())\naa = input()\nab = input()\nba = input()\nbb = input()\nMOD = 10**9+7\n\nif N <= 3:\n    print(1)\n    return\n\nif (aa == ab == 'A') or (ab == bb == 'B'):\n    print(1)\n    return\n\nif (aa+ab+ba == 'BAB') or (ab+ba+bb == 'BAA'):\n    print(pow(2,N-3,MOD))\n    return\n\npp = p = n = 1\nfor i in range(N-3):\n    pp = p\n    p = n\n    n = (pp + p) % MOD\nprint(n)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\nn = int(input())\ncaa,cab,cba,cbb = [input() for _ in range(4)]\nM = 10**9+7\ndone = False\ndef swap(w):\n    if w==\"A\":\n        return \"B\"\n    else:\n        return \"A\"\nif cab==\"B\":\n    caa,cab,cba,cbb = swap(caa), swap(cab), swap(cba), swap(cbb)\n    done = True\nif (not done and caa==\"A\") or (done and cbb==\"A\"):\n    ans = 1\nelse:\n    if n==2:\n        ans = 1\n    else:\n        if cba==\"B\":\n            ans = pow(2, n-3, M)\n        else:\n            def sub(n):\n                dp0 = [0]*(n-2)\n                dp1 = [0]*(n-2)\n                dp1[0] = 1\n                for i in range(1,n-2):\n                    dp0[i] = dp1[i-1]\n                    dp1[i] = dp1[i-1] + dp0[i-1]\n                    dp0[i] %= M\n                    dp1[i] %= M\n                ans = dp0[n-3] + dp1[n-3]\n                ans %= M\n#                 print(dp0, dp1)\n                return ans\n            ans = sub(n)%M\nprint(ans%M)", "U = 1010\nmod = 10**9+7\n \nfact = [1]*(U+1)\nfact_inv = [1]*(U+1)\n \nfor i in range(1,U+1):\n    fact[i] = (fact[i-1]*i)%mod\nfact_inv[U] = pow(fact[U], mod-2, mod)\n \nfor i in range(U,0,-1):\n    fact_inv[i-1] = (fact_inv[i]*i)%mod\n \ndef perm(n, k):\n    if k < 0 or k > n:\n        return 0\n    z = fact[n]\n    z *= fact_inv[n-k]\n    z %= mod\n    return z\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    z = fact[n]\n    z *= fact_inv[k]\n    z *= fact_inv[n-k]\n    z %= mod\n    return z\n\n\n#Q\u306f\u30bd\u30fc\u30c8\u6e08\u307f\uff08\u4f4e\u6b21\u306e\u3082\u306e\u304b\u3089\u4e26\u3076\u3088\u3046\u306b\u3059\u308b\uff09\ndef poly_mul(P, Q):\n    n = len(P)\n    d, c = Q[0]\n    if d:\n        c = 0\n    else:\n        Q = Q[1:]\n    for i in range(n-1, -1, -1):\n        P[i] *= c\n        P[i] %= mod\n        for j, b in Q:\n            if j > i:\n                break\n            P[i] += P[i-j] * b\n            P[i] %= mod\n\n#Q[0] != 0 \u304c\u5fc5\u8981\ndef poly_div(P, Q):\n    n = len(P)\n    d, c = Q[0]\n    Q = Q[1:]\n    inv = pow(c, mod-2, mod)\n    for i in range(n):\n        for j, b in Q:\n            if j > i:\n                break\n            P[i] -= P[i-j] * b\n            P[i] %= mod\n        P[i] *= inv\n        P[i] %= mod\n\n\n\nn = int(input())\naa = input()\nab = input()\nba = input()\nbb = input()\nif aa == \"A\" and ab == \"A\":\n    print(1)\n    return\nif bb == \"B\" and ab == \"B\":\n    print(1)\n    return\nans = 0\nif (ab == \"A\" and ba == \"A\") or (ab == \"B\" and ba == \"B\"):\n    for i in range(n):\n        for j in range(n):\n            if i + j != n-1:\n                continue\n            ans += comb(i-1, j)\n            ans %= mod\nelse:\n    F = [0]*1010\n    F[1] = 1\n    F[2] = -1\n    poly_div(F, ((0, 1), (1, -2)))\n    ans = F[n-1]\nans %= mod\nprint(ans)", "def inv_mod(a, p=10**9+7):\n    p = abs(p)\n    a %= p\n    stack = []\n    p0 = p\n    while a > 1:\n        d, a, p = p//a, p%a, a\n        stack.append(d)\n    x, y = 1, 0\n    while stack:\n        d = stack.pop()\n        x, y = y-d*x, x\n    return x % p0\n\nMOD = 10**9 + 7\ninpl = lambda: list(map(int,input().split()))\nN = int(input())\na = ord(input()) - ord('A')\nb = ord(input()) - ord('A')\nc = ord(input()) - ord('A')\nd = ord(input()) - ord('A')\nif N == 2 or N == 3:\n    print((1))\n    return\nif b == 0:\n    a, b, c, d = 1-d, 1-b, 1-c, 1-a\n\nif d == 1:\n    print((1))\nelif c == 0:\n    print((pow(2, N-3, MOD)))\nelse: # (d, c) = (0, 1)\n    n = N - 3\n    cur = 1\n    ans = cur\n    for k in range((n+1)//2):\n        cur *= (n-2*k)*(n-2*k+1)*inv_mod(k+1)*inv_mod(n-k+1)\n        cur %= MOD\n        ans += cur\n        ans %= MOD\n    print(ans)\n", "import sys\n\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x)-1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef MI1(): return map(int1, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef BI(): return sys.stdin.readline().rstrip().encode()\ndef SI(): return sys.stdin.readline().rstrip()\ndij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\ninf = 10**16\n# md = 998244353\nmd = 10**9+7\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef f(a):\n    if a==1 or a==0:return 1\n    return (f(a-1)+f(a-2))%md\n\ndef solve():\n    if n<4:return 1\n    if ab == \"A\":\n        if aa == \"A\":\n            return 1\n        if ba==\"A\":\n            return f(n-2)\n        return pow(2,n-3,md)\n    else:\n        if bb == \"B\":\n            return 1\n        if ba==\"B\":\n            return f(n-2)\n        return pow(2,n-3,md)\n\nn=II()\naa=SI()\nab=SI()\nba=SI()\nbb=SI()\nprint(solve())\n", "MOD = 10 ** 9 + 7\n\n\ndef solve(n, c_aa, c_ab, c_ba, c_bb):\n    if n <= 3:\n        return 1\n    # switch so that c_aa == 'A'\n    if c_ab == 'B':\n        if c_bb == 'A':\n            c_aa = 'B'\n        else:\n            c_aa = 'A'\n        if c_ba == 'A':\n            c_ba = 'B'\n        else:\n            c_ba = 'A'\n    # trivial case\n    if c_aa == 'A':\n        return 1\n    # c_ab == 'A', c_aa == 'B'\n    if c_ba == 'A':\n        # A_XXX_AB no 'BB'\n        dp = [[0, 0] for _ in range(n - 2)]\n        dp[0][0] = 1\n        for i in range(1, n - 2):\n            dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % MOD\n            dp[i][1] = dp[i - 1][0]\n        return (dp[-1][0] + dp[-1][1]) % MOD\n    # c_ab == 'A', c_aa == 'B', c_ba == 'B'\n    # A_XXX_AB: X: any\n    return pow(2, n - 3, MOD)\n\n\ndef main():\n    n = int(input())\n    c_aa = input()\n    c_ab = input()\n    c_ba = input()\n    c_bb = input()\n    res = solve(n, c_aa, c_ab, c_ba, c_bb)\n    print(res)\n\n\ndef test():\n    assert solve(4, 'A', 'B', 'B', 'A') == 2\n    assert solve(1000, 'B', 'B', 'B', 'B') == 1\n\n\ndef __starting_point():\n    test()\n    main()\n\n__starting_point()", "mod=10**9+7\nn=int(input())\naa=input()\nab=input()\nba=input()\nbb=input()\nif ab==\"A\" and aa==\"A\":\n  print((1))\n  return\nif ab==\"B\" and bb==\"B\":\n  print((1))\n  return\n\n\n#aa,ab,ba,bb\n#A,B,(A,B),(A,B)\n#B,A,(A,B),(A,B)\n\nif (ab==\"A\" and ba==\"A\")or(ab==\"B\" and ba==\"B\"):\n  # AAAAB+AAAAB+AAAB\n  # (A*(1~) + B*1)*(1~)\n  dp=[0]*(n+1)\n  dp[0]=1\n  for i in range(n-1):\n    for j in range(2,n+1):\n      if j+i>n:break\n      dp[i+j]+=dp[i]\n      dp[i+j]%=mod\n  print((dp[n]))\n  return\n\n# AAAAA + BBBBB + AAAAA + BBBBB + AAAAA + B\n# (A*(1~) + B*(1))*(1~) + A*(1~) + B*1\n\nif True:\n  dp=[0]*(n+1)\n  dp[0]=1\n  for i in range(n-1):\n    for j in range(2,n+1):\n      if j+i>n:break\n      dp[i+j]+=dp[i]*(j-1)\n      dp[i+j]%=mod\n  ans=0\n  for i in range(n-1):\n    ans+=dp[i]\n    ans%=mod\n  print(ans)\n", "mod = 10 ** 9 + 7\n\n\ndef fibo(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    f1 = 1\n    f2 = 2\n    for _ in range(n - 2):\n        f1, f2 = f2, f1 + f2\n        f2 %= mod\n    return f2\n\n\ndef main():\n    n = int(input())\n    Caa = input()\n    Cab = input()\n    Cba = input()\n    Cbb = input()\n    if n == 2 or n == 3:\n        return 1\n\n    if Cab == \"A\":\n        if Caa == \"A\":\n            return 1\n        if Cba == \"A\":\n            return fibo(n - 2)\n        return pow(2, n - 3, mod)\n    elif Cab == \"B\":\n        if Cbb == \"B\":\n            return 1\n        elif Cba == \"B\":\n            return fibo(n - 2)\n        return pow(2, n - 3, mod)\n\n\nprint(main())", "import sys\nn=int(input())\ncaa=input()\ncab=input()\ncba=input()\ncbb=input()\nMOD=10**9+7\nif n==2:\n  print((1))\n  return\ndpa=[0]*n\ndpb=[0]*n\ndpa[0]=1\nfor i in range(1,n-1):\n  dpa[i]=(dpa[i-1]+dpb[i-1])%MOD\n  dpb[i]=dpa[i-1]\nans=dpa[n-2]\nif cab=='A':\n  if caa=='A':\n    print((1))\n  else:\n    if cba=='B':\n      print((pow(2,n-3,MOD)))\n    else:\n      print(ans)\nelse:\n  if cbb=='B':\n    print((1))\n  else:\n    if cba=='A':\n      print((pow(2,n-3,MOD)))\n    else:\n      print(ans)\n", "mod = 10 ** 9 + 7\nn = int(input())\na, b, c, d = [input() for i in range(4)]\nl = [\"B\", \"A\"]\nif b == \"A\":\n    b = l[not b == \"A\"]\n    c = l[not c == \"A\"]\n    a, d = l[not d == \"A\"], l[not a == \"A\"]\nif n < 4:\n    print(1)\nelif d == \"B\":\n    print(1)\nelif c == \"A\":\n    print(pow(2, n - 3, mod))\nelse:\n    l = [1, 1]\n    for i in range(n):\n        l.append((l[-1] + l[-2]) % mod)\n    print(l[n - 2]) ", "P = 10**9 + 7\nN = int(input())\nAA = input()\nAB = input()\nBA = input()\nBB = input()\nTT = [0]*(N+1)\nTT[0] = 1\nTT[1] = 1\nfor i in range(2, N+1):\n    TT[i] = (TT[i-1]*i)%P\n\nif AB == \"A\" and AA == \"A\":\n    print((1))\nelif AB == \"B\" and BB == \"B\":\n    print((1))\nelif N <= 3:\n    print((1))\nelif AB == \"A\" and AA == \"B\":\n    if BA == \"A\":\n        ans = 0\n        for i in range(N//2):\n            ans += (((TT[N-2-i]*pow(TT[N-2-2*i], P-2, P))%P)*pow(TT[i], P-2, P))%P\n            ans %= P\n        print(ans)\n    else:\n        print((pow(2, N-3, P)))\nelif AB == \"B\" and BB == \"A\":\n    if BA == \"B\":\n        ans = 0\n        for i in range(N//2):\n            ans += (((TT[N-2-i]*pow(TT[N-2-2*i], P-2, P))%P)*pow(TT[i], P-2, P))%P\n            ans %= P\n        print(ans)\n    else:\n        print((pow(2, N-3, P)))\n\n", "from math import factorial\n\nn = int(input())\nAA = input()\nAB = input()\nBA = input()\nBB = input()\n\nmod = pow(10, 9) + 7\n\nif n == 2 or n == 3:\n    print(1)\n    return\n\nif AB == 'B':\n    if BB == 'B':\n        print(1)\n    else:\n        if BA == 'B':\n            count = 0\n            n -= 2\n            m = 0\n            while n >= 0:\n                count += factorial(n + m) // (factorial(n) * factorial(m))\n                count %= mod\n                n -= 2\n                m += 1\n            print(count)\n        else:\n            print(pow(2, n - 3, mod))\nelse:\n    if AA == 'A':\n        print(1)\n    else:\n        if BA == 'A':\n            count = 0\n            n -= 2\n            m = 0\n            while n >= 0:\n                count += factorial(n + m) // (factorial(n) * factorial(m))\n                count %= mod\n                n -= 2\n                m += 1\n            print(count)\n        else:\n            print(pow(2, n - 3, mod))", "mod = 10**9 + 7\n\ndef main():\n    n = int(input())\n    caa = input()\n    cab = input()\n    cba = input()\n    cbb = input()\n\n    if n <= 3:\n        print(1)\n        return\n\n    if cab == caa == 'A' or cab == cbb == 'B':\n        print(1)\n        return\n\n    if cab == cba:\n        dp = [0] * n\n        dp[1] = 1\n        for i in range(n-2):\n            dp[i+2] = (dp[i] + dp[i+1]) % mod\n        print(dp[n-1])\n        return\n\n    print(pow(2, n-3, mod))\n\nmain()", "\n\"\"\"\n\n2^4\u901a\u308a -> 16\n\nAB = A & AA = A \u306a\u30891\u901a\u308a\nAB = B & BB = B \u306a\u30891\u901a\u308a\n\nAB = A \u306e\u6642\u3060\u3051\u8003\u3048\u308c\u3070\u3042\u3068\u306f\u53cd\u8ee2\nAA = B \u306e\u6642\u3060\u3051\u8003\u3048\u308c\u3070\u3044\u3044\n\nBA = A\u306a\u3089\u7c21\u5358\nBA = B\u3060\u3068BB\u304c\u9023\u7d9a\u3067\u304d\u308b\n\n\n\"\"\"\n\nimport sys\nfrom sys import stdin\n\nmod = 10**9+7\nN = int(input())\naa = input()\nab = input()\nba = input()\nbb = input()\n\ndp = [1,0]\nfor i in range(N-3):\n    ndp = [0,0]\n    ndp[0] = (dp[0] + dp[1]) % mod\n    ndp[1] = dp[0]\n    dp = ndp\nANSC = sum(dp) % mod\n\nif N == 2:\n    print((1))\n    return\n\nif ab == \"A\":\n\n    if aa == \"A\":\n        print((1))\n        return\n    else:\n\n        if ba == \"B\":\n            print((pow(2,N-3,mod)))\n            return\n        else:\n            print (ANSC)\n            return\n\nelse:\n\n    if bb == \"B\":\n        print((1))\n        return\n\n    else:\n        if ba == \"A\":\n            print((pow(2,N-3,mod)))\n            return\n        else:\n            print (ANSC)\n            return\n", "Q = 10**9+7\ndef calc(N):\n    x, y = 1, 1\n    t = 2\n    while t < N:\n        x, y = y, (x+y)%Q\n        t += 1\n    return x\n\ndef main():\n    N = int( input())\n    CAA = input()\n    CAB = input()\n    CBA = input()\n    CBB = input()\n    if N == 2:\n        print((1))\n        return\n    S = CAA+CAB+CBA+CBB\n    A = \"A\"\n    B = \"B\"\n    Power =[\"ABAA\",\"BABA\",\"BABB\",\"BBAA\"]\n    Fibo = [\"ABBA\",\"BAAA\",\"BBBA\",\"BAAB\"]\n    if S in Power:\n        print((pow(2,N-3,Q)))\n    elif S in Fibo:\n        print((calc(N)))\n    else:\n        print((1))\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nc = [input() for i in range(4)]\nif n == 2 or n == 3:\n    print(1)\n    return\nmod = 10**9+7\nif c[1] == \"A\" and c[0] == \"A\":\n    print(1)\n    return\nif c[1] == \"B\" and c[3] == \"B\":\n    print(1)\n    return\nif c[1] == \"A\" and c[2] == \"B\":\n    print(pow(2,n-3,mod))\n    return\nif c[1] == \"B\" and c[2] == \"A\":\n    print(pow(2,n-3,mod))\n    return\ndp = [1,1]\nfor i in range(n):\n    dp.append((dp[-1]+dp[-2])%mod)\nprint(dp[n-2])", "n = int(input())\nc = [input() for _ in range(4)]\nmod = pow(10, 9) + 7\nd = dict()\nd[\"AA\"] = c[0]\nd[\"AB\"] = c[1]\nd[\"BA\"] = c[2]\nd[\"BB\"] = c[3]\nnow = set()\nnow.add(\"AB\")\ndp = [1] * max(n + 1, 4)\nfor i in range(1, 4):\n    x = list(now)\n    now0 = set()\n    for y in x:\n        for j in range(i):\n            z = list(y)\n            z.insert(j + 1, d[z[j] + z[j + 1]])\n            now0.add(\"\".join(z))\n    dp[i] = len(list(now0))\n    now = now0\nif dp[3] == 3:\n    for i in range(4, max(n + 1, 4)):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        dp[i] %= mod\nif dp[3] == 4:\n    for i in range(4, max(n + 1, 4)):\n        dp[i] = 2 * dp[i - 1]\n        dp[i] %= mod\nans = dp[n - 2]\nprint(ans)", "def Factorial(x,mod):\n    res=1\n    for i in range(1,x+1):\n        res*=i\n        res%=mod\n    return res\n\ndef Fib(N,mod):\n    L=[0]*N\n    L[0]=1\n    L[1]=1\n    for i in range(2,N):\n        L[i]=(L[i-1]+L[i-2])%mod\n\n    return L[-1]\n\n\n\ndef main():\n    debug=False\n    import sys\n    mod=10**9+7\n\n    if debug:\n        N=5\n        I=input()\n        Caa=I[0]\n        Cab=I[1]\n        Cba=I[2]\n        Cbb=I[3]\n    else:\n        N=int(sys.stdin.readline())\n        Caa=sys.stdin.readline().strip()\n        Cab=sys.stdin.readline().strip()\n        Cba=sys.stdin.readline().strip()\n        Cbb=sys.stdin.readline().strip()\n    Cs=Caa+Cab+Cba+Cbb\n    \n    if debug:\n        dic={\n            'AA':Caa,\n            'AB':Cab,\n            'BA':Cba,\n            'BB':Cbb,\n        }\n        s='AB'\n        def dfs(s):\n            if len(s)==N:\n                st.add(s)\n                return\n\n            for i in range(len(s)-1):\n                dfs(s[:i+1]+dic[s[i:i+2]]+s[i+1:])\n            \n\n        st=set()\n        dfs(s)\n        print(len(st))\n\n    if N==2:\n        return 1\n\n    if Cab=='A' and Caa=='A':#4\n        return 1\n    \n    if Cab=='B' and Cbb=='B':#4\n        return 1\n\n    if Cs in ['ABBA','BAAA','BAAB','BBBA']:\n        return Fib(N-1,mod)\n\n    if Cs in ['ABAA','BABA','BABB','BBAA']:\n        return pow(2,N-3,mod)\n    \n\n\n\n\nprint(main())", "N, = list(map(int, input().split()))\nX = dict()\nX[\"AA\"] = input().strip()\nX[\"AB\"] = input().strip()\nX[\"BA\"] = input().strip()\nX[\"BB\"] = input().strip()\nss = set([\"AB\"])\nR = [1]\nfor i in range(4):\n    nss = set()\n    for t in ss:\n        for j in range(i+1):\n            nt = t[:j+1] + X[t[j:j+2]] + t[j+1:]\n            nss.add(nt)\n    ss = nss\n    R.append(len(ss))\nMOD = 10**9+7\nif N-2 < 5:\n    print((R[N-2]))\nelse:\n    if R[-3]+R[-2] == R[-1]:\n        for _ in range(N-2-4):\n            R.append((R[-1]+R[-2])%MOD)\n        print((R[-1]))\n    elif R[-2] == R[-1]:\n        print((R[-1]))\n    elif R[-2]*2 == R[-1]:\n        for _ in range(N-2-4):\n            R.append(R[-1]*2%MOD)\n        print((R[-1]))\n#\n#print(ss)\n#print(len(ss))\n", "import sys\ninput=sys.stdin.readline\n\nn=int(input())\ncaa=input().rstrip()\ncab=input().rstrip()\ncba=input().rstrip()\ncbb=input().rstrip()\n\nINF=10**9+7\n\ndef modinv(a,m):\n    b=m\n    (x,lastx)=(0,1)\n    (y,lasty)=(1,0)\n    while not b==0:\n        q=a//b\n        (a,b)=(b,a%b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return lastx%m\n\nif n==2:\n    print(1)\n    return\n\nif cab=='A' and caa=='A':\n    ans=1\n\nif cab=='B' and cbb=='B':\n    ans=1\n\nif cab=='A' and caa=='B':\n    if cba=='B':\n        ans=pow(2,n-3,INF)\n\n    else:\n        ans=0\n        x=0\n        c=1\n        while n-2-x>=x:\n            ans=(ans+c)%INF\n            c=c*(n-3-2*x)*(n-2-2*x)*modinv(x+1,INF)*modinv(n-2-x,INF)\n            c=c%INF\n            x+=1\n\nif cab=='B' and cbb=='A':\n    if cba=='A':\n        ans=pow(2,n-3,INF)\n\n    else:\n        ans=0\n        x=0\n        c=1\n        while n-2-x>=x:\n            ans=(ans+c)%INF\n            c=c*(n-3-2*x)*(n-2-2*x)*modinv(x+1,INF)*modinv(n-2-x,INF)\n            c=c%INF\n            x+=1\n\nprint(ans)", "# coding:UTF-8\nimport sys\nfrom math import factorial\n\nMOD = 10 ** 9 + 7\n\n# \u4e8c\u9805\u4fc2\u6570 \u9806\u5217\u3000\u7d44\u307f\u5408\u308f\u305b\ndef combInit(n):\n    fact = [1]\n    finv = [1]\n    for i in range(1, n + 1):\n        fact.append(fact[i - 1] * i % MOD)\n        finv.append(pow(fact[i], MOD - 2, MOD))\n    return [fact, finv]\n\ndef comb(n, k, f):\n    if n < k:\n        return 0\n    elif n < 0 or k < 0:\n        return 0\n    else:\n        return f[0][n] * (f[1][k] * f[1][n - k] % MOD) % MOD\n\nN = int(input())    # \u6570\u5b57\ncaa = input()\ncab = input()\ncba = input()\ncbb = input()\n\nf = combInit(1000)\n\nif N <= 3:\n    print((1))\n    return\n\nif cab == \"A\":\n    if caa == \"A\":\n        res = 1\n    elif caa == \"B\":\n        if cba == \"A\":\n            res = 1\n            for i in range(1, (N-2)//2+1):\n                nt = N - 2 - i\n                t = comb(nt, i, f)\n                res = (res + t) % MOD\n        elif cba == \"B\":\n            res = pow(2, N-3, MOD)\nelif cab == \"B\":\n    if cbb == \"B\":\n        res = 1\n    elif cbb == \"A\":\n        if cba == \"B\":\n            res = 1\n            for i in range(1, (N-2)//2+1):\n                nt = N - 2 - i\n                t = comb(nt, i, f)\n                res = (res + t) % MOD\n        elif cba == \"A\":\n            res = pow(2, N-3, MOD)\n\nprint((\"{}\".format(res)))\n", "class comb():\n  F = [1, 1]\n  Fi = [1, 1]\n  I = [0, 1]\n  def __init__(self, num, mod):\n    self.MOD = mod\n    for i in range(2, num + 1):\n      self.F.append((self.F[-1] * i) % mod)\n      self.I.append(mod - self.I[mod % i] * (mod // i) % mod)\n      self.Fi.append(self.Fi[-1] * self.I[i] % mod)\n  def com(self, n, k):\n    if n < k: return 0\n    if n < 0 or k < 0: return 0\n    return self.F[n] * (self.Fi[k] * self.Fi[n - k] % self.MOD) % self.MOD\n\n\nN = int(input())\ncaa = input()\ncab = input()\ncba = input()\ncbb = input()\nMOD = 10 ** 9 + 7\n\nif (cab == \"A\" and caa == \"A\") or (cab == \"B\" and cbb == \"B\"):\n  print((1))\n  return\n\ncom = comb(N, MOD)\nif cab == cba:\n  ans = 0\n  for n in range((N - 2) // 2 + 1):\n    m = N - 2 - n\n    if m < n: continue\n    ans = (ans + com.com(m, n)) % MOD\n  print(ans)\n  return\n\nif N <= 3:\n  print((1))\nelse:\n  ans = pow(2, N - 3, MOD)\n  print(ans)\n", "n = int(input())\nC = [0 if input() == \"A\" else 1 for _ in range(4)]\nmod = 10**9 + 7\n\nl = 10**5\nfac = [1]*l\nfacr = [1]*l\n\nfor i in range(l-1):\n    fac[i+1] = fac[i]*(i+1) % mod\nfacr[l-1] = pow(fac[l-1], mod - 2, mod)\nfor i in range(1, l)[::-1]:\n    facr[i-1] = facr[i]*i % mod\n\n\ndef combi(N: int, K: int) -> int:\n    if N < K:\n        return 0\n    return fac[N]*facr[N-K] % mod*facr[K] % mod\n\n\nif n == 3 or n == 2:\n    print((1))\n    return\n\n\nif C[1] == 1 and C[3] == 1:\n    # xBxB\n    print((1))\n    return\nif C[1] == 0 and C[0] == 0:\n    # AAxx\n    print((1))\n    return\nif C[1] == C[2] == 1 and C[3] == 0:\n    # xBBA\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        ans += combi(n-i-1, i-1)\n        ans %= mod\n    print(ans)\n    return\nif C[0] == 1 and C[1] == C[2] == 0:\n    # BAAx\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        ans += combi(n-i-1, i-1)\n        ans %= mod\n    print(ans)\n    return\n\nif C[0] == C[2] == 1 and C[1] == 0:\n    print((pow(2, n-3, mod)))\n    return\nif C[1] == 1 and C[2] == C[3] == 0:\n    print((pow(2, n-3, mod)))\n    return\n", "n = int(input())\naa = input().lower()\nab = input().lower()\nba = input().lower()\nbb = input().lower()\n\nmod = 10 ** 9 + 7\nif n < 4:\n    print((1))\n    return\n\nif ab == \"b\":\n    if bb == \"b\":\n        print((1))\n    else:\n        if ba == \"a\":\n            print((pow(2, n-3, mod)))\n        else:\n            dp_a = dp_b = 1\n            for _ in range(n-4):\n                dp_a, dp_b = dp_b, (dp_a + dp_b) % mod\n            print(((dp_a + dp_b) % mod))\nelse:\n    if aa == \"a\":\n        print((1))\n    else:\n        if ba == \"b\":\n            print((pow(2, n-3, mod)))\n        else:\n            dp_a = dp_b = 1\n            for _ in range(n-4):\n                dp_a, dp_b = dp_b, (dp_a + dp_b) % mod\n            print(((dp_a + dp_b) % mod))\n", "n = int(input())\nc = [input() for _ in range(4)]\n\nmod = 10**9+7\n\nconst = [['A', 'A', 'A', 'A'],\n['A', 'A', 'A', 'B'],\n['A', 'A', 'B', 'A'],\n['A', 'A', 'B', 'B'],\n['A', 'B', 'A', 'B'],\n['A', 'B', 'B', 'B'],\n['B', 'B', 'A', 'B'],\n['B', 'B', 'B', 'B']]\n\nif c in const:\n    print(1)\n    return\n\nexps = [['A', 'B', 'A', 'A'],\n['B', 'A', 'B', 'A'],\n['B', 'A', 'B', 'B'],\n['B', 'B', 'A', 'A']]\n\nif c in exps:\n    print(pow(2,max(n-3,0),mod))\n    return\n\ndef fib(n,acm1=1,acm2=1):\n    if not n:\n        return acm2\n    return fib(n-1,acm2,acm1+acm2)\nprint(fib(max(n-3,0))%mod)", "import copy\nN = int(input())\ndef power_func(a,n,p):#a**n mod p\n    bi = str(format(n,\"b\"))#2\u9032\u8868\u73fe\u306b\n    res = 1\n    for i in range(len(bi)):\n        res = (res*res) %p\n        if bi[i] == \"1\":\n            res = (res*a) %p\n    return res\nmod = 10 ** 9 + 7\nc = [0] * 4\nfor i in range(4):\n  c[i] = str(input())\n  \nif c[0] == \"A\" and c[1] == \"A\":\n  ans = 1\nelif c[1] == \"B\" and c[3] == \"B\":\n  ans = 1\nelif c in [[\"B\",\"A\",\"A\",\"A\"],[\"B\",\"A\",\"A\",\"B\"],[\"A\",\"B\",\"B\",\"A\"],[\"B\",\"B\",\"B\",\"A\"]]:\n  if N == 2 or N == 3:\n    ans = 1\n  else:\n    N -= 3\n    one = 1\n    two = 1\n    while N != 0:\n      x = one\n      one += two\n      one %= mod\n      two = x\n      N -= 1\n      #print(one, two)\n    ans = one\nelse:\n  if N == 2 or N == 3:\n    ans = 1\n  else:\n    ans = power_func(2, N - 3, mod)\n  \n  \nprint(ans)  \n", "MOD = 10**9 + 7\n\ndef main():\n    n = int(input())\n    c = {}\n    c[\"AA\"] = input()\n    c[\"AB\"] = input()\n    c[\"BA\"] = input()\n    c[\"BB\"] = input()\n    if n <= 3:\n        print(1)\n    else:\n        if c[\"AB\"] == \"A\":\n            if c[\"AA\"] == \"A\":\n                print(1)\n            else:\n                if c[\"BA\"] == \"A\":\n                    dp = [[0]*2 for _ in range(n-2)]\n                    dp[0][0] = 1\n                    for i in range(1, n-2):\n                        dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % MOD\n                        dp[i][1] = dp[i-1][0]\n                    print((dp[-1][0] + dp[-1][1])%MOD)\n                else:\n                    print(pow(2, n-3, MOD))\n        else:\n            if c[\"BB\"] == \"B\":\n                print(1)\n            else:\n                if c[\"BA\"] == \"B\":\n                    dp = [[0]*2 for _ in range(n-2)]\n                    dp[0][0] = 1\n                    for i in range(1, n-2):\n                        dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % MOD\n                        dp[i][1] = dp[i-1][0]\n                    print((dp[-1][0] + dp[-1][1])%MOD)\n                else:\n                    print(pow(2, n-3, MOD))\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys \nsys.setrecursionlimit(2*10**5+1)\ninput = lambda:sys.stdin.readline().strip()\nn = int(input())\na = input()\nb = input()\nc = input()\nd = input()\nmod = 10**9+7\ne = 1\nf = 1\nfor i in range(n-3):\n    g = (e+f)%mod \n    e = f \n    f = g\nif n<=3:\n    print((1))\nelse:\n    if b=='B':\n        if d=='B':\n            print((1))\n        else:\n            if c=='A':\n                print((pow(2,n-3,mod)))\n            else:\n                print(f)\n    else:\n        if a=='A':\n            print((1))\n        else:\n            if c=='B':\n                print((pow(2,n-3,mod)))\n            else:\n                print(f)\n", "N, *S = open(0).read().split()\nN = int(N)\nS = ''.join(S)\nmod = 10**9 + 7\nif N == 2:\n    print((1))\nelif S in ['ABAA', 'BABA', 'BABB', 'BBAA']:\n    print((pow(2, N - 3, mod)))\nelif S in ['ABBA', 'BAAA', 'BAAB', 'BBBA']:\n    a = b = 1\n    for _ in range(N - 3):\n        a, b = b, a + b\n        a %= mod\n        b %= mod\n    print(b)\nelse:\n    print((1))\n", "n = int(input())\naa = input()\nab = input()\nba = input()\nbb = input()\nMOD = 10 ** 9 + 7\n\nif n == 2:\n    print(1)\n    return\n\nif ab == \"A\":\n    if aa == \"A\":\n        print(1)\n        return\n    else:\n        if ba == \"A\":\n            dp = [[0] * 2 for _ in range(n + 1)]\n            dp[0][0] = 1\n            for i in range(n):\n                dp[i + 1][0] = (dp[i][0] + dp[i][1]) % MOD\n                dp[i + 1][1] = (dp[i][0]) % MOD\n            print((dp[n - 3][0] + dp[n - 3][1]) % MOD)\n            return\n        else:\n            ans = pow(2, n - 3, MOD)\n            print(ans)\n            return\nelse:\n    if bb == \"B\":\n        print(1)\n        return\n    else:\n        if ba == \"B\":\n            dp = [[0] * 2 for _ in range(n + 1)]\n            dp[0][0] = 1\n            for i in range(n):\n                dp[i + 1][0] = (dp[i][0] + dp[i][1]) % MOD\n                dp[i + 1][1] = (dp[i][0]) % MOD\n            print((dp[n - 3][0] + dp[n - 3][1]) % MOD)\n            return\n        else:\n            ans = pow(2, n - 3, MOD)\n            print(ans)\n            return", "n = int(input())\ncaa = input()\ncab = input()\ncba = input()\ncbb = input()\nmod = 10 ** 9 + 7\ngroup1 = [(\"A\", \"A\", \"A\", \"A\"), (\"A\", \"A\", \"A\", \"B\"), (\"A\", \"A\", \"B\", \"A\"),\n          (\"A\", \"A\", \"B\", \"B\"), (\"A\", \"B\", \"A\", \"B\"), (\"A\", \"B\", \"B\", \"B\"),\n          (\"B\", \"B\", \"A\", \"B\"), (\"B\", \"B\", \"B\", \"B\")]\ngroup2 = [(\"A\", \"B\", \"A\", \"A\"), (\"B\", \"A\", \"B\", \"A\"), (\"B\", \"A\", \"B\", \"B\"),\n          (\"B\", \"B\", \"A\", \"A\")]\ngroup3 = [(\"A\", \"B\", \"B\", \"A\"), (\"B\", \"A\", \"A\", \"A\"), (\"B\", \"A\", \"A\", \"B\"),\n          (\"B\", \"B\", \"B\", \"A\")]\nif (caa, cab, cba, cbb) in group1:\n    print(1)\nelif (caa, cab, cba, cbb) in group2:\n    ans = 1\n    for i in range(n - 3):\n        ans *= 2\n        ans %= mod\n    print(ans)\nelse:\n    a1 = -1\n    a2 = 1\n    for i in range(n):\n        a3 = a1 + a2\n        a3 %= mod\n        a1 = a2\n        a2 = a3\n    else:\n        ans = a3\n    print(ans)", "\nMOD = 10**9+7\ndef calc(n):\n    dp = [ [0]*2 for _ in range(n) ]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(n-1):\n        dp[i+1][0] = (dp[i][0] + dp[i][1])%MOD\n        dp[i+1][1] = dp[i][0]%MOD\n    return (dp[n-1][0] + dp[n-1][1])%MOD\n\ndef calc2(n):\n    if n == 1: return 2\n\n    dp = [ [0]*4 for _ in range(n) ]\n    dp[1][0] = 1 #aa\n    dp[1][1] = 1 #ab\n    dp[1][2] = 1 #ba\n    dp[1][3] = 1 #bb\n    for i in range(1,n-1):\n        dp[i+1][0] = (dp[i][0]+dp[i][2])%MOD\n        dp[i+1][1] = (dp[i][0]+dp[i][2])%MOD\n        dp[i+1][2] = (dp[i][1]+dp[i][3])%MOD\n        dp[i+1][3] = (dp[i][1])%MOD\n    # print(dp)\n    return (sum(dp[n-1]))%MOD\n\n\ndef rev(s):\n    if s == 'A': return 'B'\n    else: return 'A'\n\n\n# print(calc2(3))\n# print(calc2(4))\n# print(calc2(5))\n# print(calc2(6))\n\n\nn = int(input())\naa = input()\nab = input()\nba = input()\nbb = input()\n\nif n == 2:\n    print(1)\n    return\nif n == 3:\n    print(1)\n    return\n\n# if ab == 'B':\n#     aa = rev(aa)\n#     ab = rev(ab)\n#     ba = rev(ba)\n#     bb = rev(bb)\n\n# print('---')\n# print(aa)\n# print(ab)\n# print(ba)\n# print(bb)\n\nif ab == 'A':\n    if aa == 'A':\n        print(1)\n        # print('www1')\n    else: # aa 'B\n        if ba == 'A':\n            ans = calc(n-3)\n            print(ans)\n            # print('www2')\n        else:\n            if bb == 'A':\n                ans = pow(2,n-3,MOD)\n                print(ans%MOD)\n            else:\n                ans = pow(2,n-3,MOD)\n                print(ans%MOD)\n                # else:\n                #     ans = calc2(n-3)\n                #     print(ans)\n                # print('www3')\n\nelse:\n    if bb == 'B':\n        print(1)\n        # print('www1')\n    else: # aa 'B\n        if ba == 'B':\n            ans = calc(n-3)\n            print(ans)\n            # print('www2')\n        else:\n            if aa == 'B':\n                ans = pow(2,n-3,MOD)\n                print(ans%MOD)\n            else:\n                ans = pow(2,n-3,MOD)\n                print(ans%MOD)", "mod = 1000000007\neps = 10**-9\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    N = int(input())\n    aa = input().rstrip('\\n')\n    ab = input().rstrip('\\n')\n    ba = input().rstrip('\\n')\n    bb = input().rstrip('\\n')\n\n    if N <= 3:\n        print((1))\n        return\n\n    if ab == \"A\":\n        if aa == \"A\":\n            print((1))\n        else:\n            if ba == \"A\":\n                dp_a = [0] * N\n                dp_b = [0] * N\n                dp_a[0] = 1\n                for i in range(1, N-1):\n                    dp_a[i] = (dp_a[i-1] + dp_b[i-1])%mod\n                    dp_b[i] = dp_a[i-1]\n                print((dp_a[N-2]))\n            else:\n                print((pow(2, N - 3, mod)))\n    else:\n        if bb == \"B\":\n            print((1))\n        else:\n            if ba == \"B\":\n                dp_a = [0] * N\n                dp_b = [0] * N\n                dp_a[0] = 1\n                for i in range(1, N-1):\n                    dp_a[i] = (dp_a[i-1] + dp_b[i-1])%mod\n                    dp_b[i] = dp_a[i-1]\n                print((dp_a[N-2]))\n            else:\n                print((pow(2, N - 3, mod)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\nimport sys\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef main():\n    n = int(input())\n    CAA = input()\n    CAB = input()\n    CBA = input()\n    CBB = input()\n    dp = [0]*(n+1)\n    dp[2] = 1\n    mod = 10**9+7\n    for i in range(3, n+1):\n        if CAB == 'A':\n            if CAA == 'A':\n                dp[i] = dp[i-1]\n            elif CAB == 'B' or CBA == 'B':\n                dp[i] = sum(dp[:i]) % mod\n            else:\n                dp[i] = dp[i-1]+dp[i-2]\n                dp[i] %= mod\n        else:\n            if CBB == 'B':\n                dp[i] = dp[i-1]\n            elif CAB == 'A' or CBA == 'A':\n                dp[i] = sum(dp[:i]) % mod\n            else:\n                dp[i] = dp[i-1]+dp[i-2]\n                dp[i] %= mod\n    print(dp[n])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\ncAA = input()\ncAB = input()\ncBA = input()\ncBB = input()\nmod = 10**9 + 7\n\ndef ans(value):\n  print(value)\n  return\n\ndef dp():\n  nA = 1\n  nB = 0\n  for i in range(N-3):\n    nA, nB = (nA + nB)%mod, nA\n  return (nA + nB)%mod\n\nif N<=3: ans(1)\n\nif cAA=='A' and cBB=='B': ans(1)\n\nif cAA==cBB:\n  if cAA==cAB: ans(1)\n  if cAB==cBA: ans(dp())\n  ans(pow(2, N-3, mod))\n\nif cAB==cBA: ans(dp())\nans(pow(2, N-3, mod))\n", "N = int(input())\nAA, AB, BA, BB = [input() == \"A\" for _ in range(4)]\nMOD = 10 ** 9 + 7\n\nif AB:\n    AB = not AB\n    BA = not BA\n    AA, BB = not BB, not AA\n# AB == False\n\nif N <= 3:\n    ans = 1\nelif BB == False:\n    ans = 1\nelif BA == True:\n    ans = pow(2, N - 3, MOD)\nelse:\n    a, b = 1, 0\n    for i in range(N - 1):\n        a, b = b, (a + b) % MOD\n    ans = b\n\nprint(ans)", "MOD = 10**9+7\nn = int(input())\na, b, c, d = [0 if input() == 'A' else 1 for _ in range(4)]\nif (a, b, c, d) in ((0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (0, 1, 0, 1), (0, 1, 1, 1), (1, 1, 0, 1), (1, 1, 1, 1)):\n    print((1))\nelif (a, b, c, d) in ((0, 1, 0, 0), (1, 0, 1, 0), (1, 0, 1, 1), (1, 1, 0, 0)):\n    if n == 2:\n        print((1))\n    else:\n        print((pow(2, n - 3, MOD)))\nelse:\n    a, b = 1, 1\n    for i in range(n - 2):\n        a, b = b, (a + b) % MOD\n    print(a)\n", "p=10**9+7\nn=int(input())\na,b,c,d=[input()==\"A\"for i in range(4)]\nif b:b^=1;c^=1;a,d=d^1,a^1\nif n<4or not d:print(1)\nelif c:print(pow(2,n-3,p))\nelse:\n l=[1,1]\n for i in range(n):l.append((l[-1]+l[-2])%p)\n print(l[n-2]) ", "N = int(input())\nlis = [input() for _ in range(4)]\nif N==2:\n  print((1))\n  return\ndp1 = [0]*(N+1)\ndp1[0] = 1\nMOD = 10**9+7\nfor i in range(1,N+1):\n  for j in range(i-1):\n    dp1[i] += dp1[j]\n    dp1[i] %= MOD\n# dp2 = [[0]*2 for _ in range(N+1)]\n# dp2[0][1] = 1\n# for i in range(1,N+1):\n#   for j in range(i):\n#     dp2[i][0] += dp2[j][1]\n#     dp2[i][0] %= MOD\n#     dp2[i][1] += dp2[j][0]\n#     dp2[i][1] %= MOD\nif lis[1]=='A':\n  if lis[0]=='A':\n    ans = 1\n  elif lis[2]=='A':\n    ans = dp1[-1]\n  else:\n    ans = pow(2,N-3,MOD)\nelse:\n  if lis[3]=='B':\n    ans = 1\n  elif lis[2]=='B':\n    ans = dp1[-1]\n  else:\n    ans = pow(2,N-3,MOD)\nprint(ans)\n\n", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**9)\n\nMOD = 10**9 + 7\n\nN = int(input())\nCaa = int(input().rstrip() != 'A')\nCab = int(input().rstrip() != 'A')\nCba = int(input().rstrip() != 'A')\nCbb = int(input().rstrip() != 'A')\nC = Caa*8 + Cab*4 +Cba*2 + Cbb\n\nptns = [1, 1, 1, 1, 4, 1, 3, 1, 3, 3, 4, 4, 4, 1, 3, 1]\n\nans3s = [1, 1, 1]\nfor i in range(N+10):\n    ans = ans3s[-2] + ans3s[-1]\n    ans3s.append(ans % MOD)\n#print('# ans3s:', ans3s, file=sys.stderr)\nans4s = [1, 1, 1]\nfor i in range(N+10):\n    ans = ans4s[-1] * 2\n    ans4s.append(ans % MOD)\n#print('# ans4s:', ans4s, file=sys.stderr)\n\nptn = ptns[C]\n#print('# C:', C, '/ ptn:', ptn, file=sys.stderr)\nif ptn == 1:\n    ans = 1\nelif ptn == 3:\n    ans = ans3s[N-1]\nelse:\n    ans = ans4s[N-1]\n\nprint((ans % MOD))\n", "MOD = 10**9+7\nn = int(input())\naa = input()\nab = input()\nba = input()\nbb = input()\n\nif ab == \"A\" and aa == \"A\":\n\tprint(1)\nelif ab == \"B\" and bb == \"B\":\n\tprint(1)\nelif ab == \"A\" and aa == \"B\":\n\tif ba == \"B\":\n\t\tprint(pow(2, max(n-3, 0), MOD))\n\telse:\n\t\tres = [1, 1]\n\t\tfor _ in range(max(n-3, 0)):\n\t\t\tres.append((res[-1] + res[-2]) % MOD)\n\t\tprint(res[-1])\nelse:\n\tif ba == \"A\":\n\t\tprint(pow(2, max(n-3, 0), MOD))\n\telse:\n\t\tres = [1, 1]\n\t\tfor _ in range(max(n-3, 0)):\n\t\t\tres.append((res[-1] + res[-2]) % MOD)\n\t\tprint(res[-1])", "import sys\ninput = sys.stdin.readline\n\nN=int(input())\nmod=10**9+7\n\nAA=input().strip()\nAB=input().strip()\nBA=input().strip()\nBB=input().strip()\n\nif (AA,AB,BA,BB) in {('A', 'A', 'A', 'A'),('A', 'A', 'A', 'B'),('A', 'A', 'B', 'A'),('A', 'A', 'B', 'B'),('A', 'B', 'A', 'B'),('A', 'B', 'B', 'B'),('B', 'B', 'A', 'B'),('B', 'B', 'B', 'B')}:    \n    print((1))\n\nelif (AA,AB,BA,BB) in {('A', 'B', 'A', 'A'),('B', 'A', 'B', 'A'),('B', 'A', 'B', 'B'),('B', 'B', 'A', 'A')}:\n    ANS=[0,0,1,1,2]\n    for i in range(1000):\n        ANS.append(ANS[-1]*2%mod)\n    print((ANS[N]))\n    \nelif (AA,AB,BA,BB) in {('A', 'B', 'B', 'A'),('B', 'A', 'A', 'A'),('B', 'A', 'A', 'B'),('B', 'B', 'B', 'A')}:\n    ANS=[0,0,1,1,2,3,5]\n    for i in range(1000):\n        ANS.append((ANS[-1]+ANS[-2])%mod)\n\n    print((ANS[N]))\n\n    \n", "def main():\n    MOD = 10 ** 9 + 7\n    N = int(input())\n    CAA = input()\n    CAB = input()\n    CBA = input()\n    CBB = input()\n    if N == 2:\n        print((1))\n        return\n    fibs = [1, 2]\n    for _ in range(N):\n        fibs.append((fibs[-1]+fibs[-2]) % MOD)\n\n    if (CAB == 'A' and CAA == 'A') or (CAB == 'B' and CBB == 'B'):\n        print((1))\n    elif (CAA == 'B' and CAB == CBA == 'A') or (CBB == 'A' and CAB == CBA == 'B'):\n        print((fibs[N-3]))\n    else:\n        print((pow(2, N-3, MOD)))\nmain()\n", "mod = 10**9+7\nn=int(input())\na=input()\nb=input()\nc=input()\nd=input()\nx = a+b+c+d\nif x=='BABB' or x=='BBAA' or x=='BABA' or x=='ABAA':\n    c = max(n-3,0)\n    ans = pow(2,c,mod)\n    print(ans)\nelif x=='BBBA' or x=='ABBA' or x=='BAAB' or x=='BAAA':\n    f = [1,1]\n    for j in range(n-3):\n        x = (f[-1]+f[-2])%mod\n        f.append(x)\n    print((f[n-2]))\n\nelse:\n    print((1))\n", "\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\nmod=10**9+7\n\n\"\"\"\n\u7aef\u304c\u56fa\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u8db3\u639b\u304b\u308a\u306b\u3057\u305f\u3044\n\u521d\u624b\u306fA,(Cab),B\u306f\u78ba\u5b9a\n\u6700\u7d42\u7684\u306bA,(Cax),...,(Cxb),B\u3082\u78ba\u5b9a\nA\u304b\u3089\u521d\u3081\u3066\uff0c\u9069\u5f53\u306b\u9032\u3081\u3066\uff0c\u6700\u5f8c\u3092\u5e33\u5c3b\u5408\u308f\u305b\u3059\u308b\u304b?\ndp\u3067\uff0c\u672b\u5c3e\u304ccaa~cbb\u306e4\u901a\u308a\u3092\u6301\u3063\u3066\u304a\u304f\u304b\uff0c\u3044\u3084\uff0c\u3053\u308c\u3060\u3068\u88ab\u308a\u3092\u691c\u77e5\u3067\u304d\u306a\u3044\u306e\u3067A,B\u306e2\u901a\u308a\u306b\u3057\u305f\u3044\n\nCab=A \u304b\u3064\u3000Caa=A\u3060\u3068\u4e00\u901a\u308a\nCab=B \u304b\u3064\u3000Cbb=B\u3060\u3068\u4e00\u901a\u308a\n\n\u306a\u306e\u3067\uff0c\nCab=A\u306a\u3089\u3070Caa=B\u3092\u4eee\u5b9a\u3057\u3066\u8a71\u3092\u9032\u3081\u3089\u308c\u308b.\n\u3053\u306e\u3068\u304d\uff0c\nCba=B\u306a\u3089\u3070\uff0c\u5148\u982dA\uff0c\u672b\u5c3eAB\u306e\u5168\u3066\u304c\u4f5c\u308c\u308b=2^(N-3)\nCba=A\u306a\u3089\u3070\uff0c\u5148\u982dA\uff0c\u672b\u5c3eAB\u304b\u3064BB\u3092\u542b\u307e\u306a\u3044\u6587\u5b57\u5217\u304c\u4f5c\u308c\u308b.\u3053\u308c\u306f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1F(N-2)\n\nCab=B\u3067\u3082\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\n\"\"\"\n\n\nN=I()\nL=[]\nfor _ in range(4):\n    c=input()\n    L.append(c)\n    \nif N<=3:\n    print((1))\n    return\n    \nif L[1]==\"A\" and L[0]==\"A\":\n    print((1))\n    return\nif L[1]==\"B\" and L[3]==\"B\":\n    print((1))\n    return\n    \nPOW=[1]\nfor _ in range(N):\n    p=POW[-1]\n    p=(p*2)%mod\n    POW.append(p)\n    \nF=[1,1]\nfor _ in range(N):\n    f=(F[-1]+F[-2])%mod\n    F.append(f)\n    \nif L[1]==\"A\":\n    if L[2]==\"B\":\n        print((POW[N-3]))\n        return\n    else:\n        print((F[N-2]))\n        return\nelse:\n    if L[2]==\"A\":\n        print((POW[N-3]))\n        return\n    else:\n        print((F[N-2]))\n        return\n", "MOD=10**9+7\na=['AAAA','BBBB','AAAB','AABA','AABB','ABAB','ABBB','BBAB']\nb=['ABAA','BABA','BABB','BBAA']\nc=['ABBA','BAAA','BAAB','BBBA']\n\nN=int(input())\nc=''.join([input() for _ in range(4)])\n\nif c in a or N==2:\n    print(1)\nelif c in b:\n    print(pow(2,N-3,MOD))\nelse:\n    dp=[0]*N\n    dp[0],dp[1]=1,1\n    for i in range(2,N):\n        dp[i]=(dp[i-1]+dp[i-2])%MOD\n    print(dp[N-2])", "n = int(input())\nc_aa = input()\nc_ab = input()\nc_ba = input()\nc_bb = input()\nmod = 10**9 + 7\nif(n==2):\n    print(1)\n    return\n\nnum = 0\nfor ci,i in zip([c_aa,c_ab,c_ba,c_bb], [0,1,2,3]):\n    if(ci == 'B'):\n        num += 2**i\n\nif(num in [1,6,7,9]):\n    dp = [0] * (n+1)\n    dp[2] = 1\n    for i in range(3,n+1):\n        dp[i] = (dp[i-1] + dp[i-2])%mod\n    print(dp[-1])\n    return\n\nelif(num in [2,3,5,13]):\n    ans = pow(2, n-3, mod)\n    print(ans)\n    return\n\nprint(1)", "def f(n, table):\n    s = {\"ab\"}\n    tmp = set()\n    for _ in range(n - 2):\n        for ss in s:\n            for i in range(len(ss) - 1):\n                tmp.add(ss[: i + 1] + table[ss[i : i + 2]] + ss[i + 1 :])\n        s, tmp = tmp, set()\n    return len(s)\n\n\nfrom functools import lru_cache\n\nM = 1_000_000_007\n\n\ndef fib(n):\n    ret = [1, 1]\n    cur = 1\n    for i in range(n):\n        ret.append(ret[cur] + ret[cur - 1])\n        cur += 1\n    return ret[n] % M\n\n\ndef t(n):\n    return (2 ** n) % M\n\n\nab = \"ab\"\nn = int(input().strip())\ntable = []\nfor _ in range(4):\n    table.append(input().strip().lower())\ntable = dict(list(zip([\"aa\", \"ab\", \"ba\", \"bb\"], table)))\n\nfn = f(5, table)\n\nif fn == 1:\n    print((1))\nelif fn == 3:\n    print((fib(n - 2)))\nelse:\n    if n == 2:\n        print((1))\n    else:\n        print((t(n - 3)))\n", "mod = 10**9+7\n\n\ndef fibonacci(n):\n    x1 = 1\n    x2 = 1\n    for _ in range(n-1):\n        nx1 = x2 % mod\n        nx2 = (x1+x2) % mod\n        x1 = nx1\n        x2 = nx2\n    return(x2)\n\n\nN = int(input())\ns = \"\"\nfor i in range(4):\n    s += input()\nif N == 2:\n    print(1)\nelif s[1] == \"B\" and s[3] == \"B\":\n    print(1)\nelif s[0] == \"A\" and s[1] == \"A\":\n    print(1)\nelif s == \"ABBA\" or s == \"BAAA\" or s == \"BAAB\" or s == \"BBBA\":\n    print(fibonacci(N-2))\nelse:\n    print(pow(2, N-3, mod))", "N = int(input())\nX = 0\nmod = int(1e9) + 7\nfor i in range(4):\n    X <<= 1\n    X += ord(input()) - 65\nF1 = {0, 1, 2, 3, 5, 7, 13, 15}\nFF = {6, 8, 9, 14}\nFB = {4, 10, 11, 12}\nif X in F1:\n    print(1)\nelif X in FF:\n    a, b = 1, 1\n    for i in range(N-2):\n        a, b = b, a + b\n        b %= mod\n    print(a % mod)\nelif X in FB:\n    t = N - 3\n    b = 1\n    while t > 0:\n        b *= 2\n        b %= mod\n        t -= 1\n    print(b)", "N = int(input())\nc = \"\".join(input() for _ in range(4))\n\nM = 10**9+7\nif c in (\"AAAA\", \"AAAB\", \"AABA\", \"AABB\", \"ABAB\", \"ABBB\", \"BBAB\", \"BBBB\"):\n  print((1))\nif c in (\"ABAA\", \"BABA\", \"BABB\", \"BBAA\"):\n  print((pow(2, max(0, N-3), M)))\nif c in (\"ABBA\", \"BAAA\", \"BAAB\", \"BBBA\"):\n  F = [1, 1]\n  while len(F)<=N:\n    F += [(F[-1]+F[-2])%M]\n  print((F[N-2]))\n", "from collections import Counter, defaultdict\nimport sys\nimport math\nfrom functools import cmp_to_key\nfrom itertools import permutations\n\nsys.setrecursionlimit(10 ** 6)\n\nmod = 1000000007\ninf = int(1e18)\n\ndef solve(n, caa, cab, cba, cbb):\n    s_list = {'AB'}\n    for i in range(n-2):\n        tmp = set()\n        for s in s_list:\n            for i in range(len(s)-1):\n                if s[i:i+2] == 'AA':\n                    tmp.add(s[:i+2] + caa + s[i+2:])\n                if s[i:i+2] == 'AB':\n                    tmp.add(s[:i+2] + cab + s[i+2:])\n                if s[i:i+2] == 'BA':\n                    tmp.add(s[:i+2] + cba + s[i+2:])\n                if s[i:i+2] == 'BB':\n                    tmp.add(s[:i+2] + cbb + s[i+2:])\n        s_list = tmp\n    print((\"{}\\t{}\".format(n, len(s_list))))\n\ndef main():\n    n=int(input())\n    caa, cab, cba, cbb = input(), input(), input(), input()\n    if n <= 3:\n        print((1))\n        return\n    if cab == 'A':\n        if caa == 'B':\n            if cba == cab:\n                p = 1\n                pp = 1\n                for i in range(3, n):\n                    v = (p + pp) % mod\n                    pp, p = p, v\n                print(p)\n            else:\n                print((pow(2, n-3, mod)))\n        else:\n            print((1))\n    else:\n        if cbb == 'A':\n            if cba == cab:\n                p = 1\n                pp = 1\n                for i in range(3, n):\n                    v = (p + pp) % mod\n                    pp, p = p, v\n                print(p)\n            else:\n                print((pow(2, n-3, mod)))\n        else:\n            print((1))\n\nmain()\n", "def main(n,caa,cab,cba,cbb):\n  if n<4:return 1\n  ary=[caa,cab,cba,cbb]\n  t='AB'\n  mod=10**9+7\n  if ary[0]=='A' and ary[1]=='A':\n    return 1\n  if ary[1]=='B' and ary[3]=='B':\n    return 1\n  #elif ary==['A','A','A','A']:\n  #elif ary==['A','A','A','B']:\n  #elif ary==['A','A','B','A']:\n  #elif ary==['A','A','B','B']:\n  elif ary==['A','B','A','A']: # \u5148\u982d\u306fA\u3001\u672b\u5c3e\u306fB\u3002xxx\u306e\u90e8\u5206\u306f\u4efb\u610f\u3002ABxxxxxxB\n    return pow(2,n-3,mod)\n  #elif ary==['A','B','A','B']:\n  elif ary==['A','B','B','A']: # \u5148\u982d\u306fA\u3001\u672b\u5c3e\u306fB\u3002xxx\u306e\u90e8\u5206\u3067A\u306f\u9023\u7d9a\u3057\u306a\u3044\u3002ABxxxxxxxB\n    dpa=[0]*(n-2) # dpa[i]:i+2\u6587\u5b57\u76ee\u304ca\n    dpb=[0]*(n-2) # dpb[i]:i+2\u6587\u5b57\u76ee\u304cb\n    dpa[0]=0\n    dpb[0]=1\n    for i in range(n-3):\n      dpa[i+1]+=dpb[i]\n      dpb[i+1]+=dpa[i]+dpb[i]\n      dpa[i+1]%=mod\n      dpb[i+1]%=mod\n    return (dpa[-1]+dpb[-1])%mod\n  #elif ary==['A','B','B','B']:\n  elif ary==['B','A','A','A']: # \u5148\u982d\u306fA\u3001\u672b\u5c3e\u306fB\u3002xxx\u306e\u90e8\u5206\u3067B\u306f\u9023\u7d9a\u3057\u306a\u3044\u3002AxxxxxxxAB\n    dpa=[0]*(n-2) # dpa[i]:i+2\u6587\u5b57\u76ee\u304ca\n    dpb=[0]*(n-2) # dpb[i]:i+2\u6587\u5b57\u76ee\u304cb\n    dpa[0]=1\n    dpb[0]=1\n    for i in range(n-3):\n      dpa[i+1]+=dpa[i]+dpb[i]\n      dpb[i+1]+=dpa[i]\n      dpa[i+1]%=mod\n      dpb[i+1]%=mod\n    return dpa[-1]\n  elif ary==['B','A','A','B']: # \u5148\u982d\u306fA\u3001\u672b\u5c3e\u306fB\u3002xxx\u306e\u90e8\u5206\u306f\u4efb\u610f\u3002ABxxxxxxxB\n    dpa=[0]*(n-2) # dpa[i]:i+2\u6587\u5b57\u76ee\u304ca\n    dpb=[0]*(n-2) # dpb[i]:i+2\u6587\u5b57\u76ee\u304cb\n    dpa[0]=1\n    dpb[0]=1\n    for i in range(n-3):\n      dpa[i+1]+=dpa[i]+dpb[i]\n      dpb[i+1]+=dpa[i]\n      dpa[i+1]%=mod\n      dpb[i+1]%=mod\n    return dpa[-1]\n  elif ary==['B','A','B','A']: # \u5148\u982d\u306fA\u3001\u672b\u5c3e\u306fB\u3002xxx\u306e\u90e8\u5206\u306f\u4efb\u610f\u3002AxxxxxxxAB\n    return pow(2,n-3,mod)\n  elif ary==['B','A','B','B']: \n    return pow(2,n-3,mod)\n  elif ary==['B','B','A','A']: # \u5148\u982d\u306fA\u3001\u672b\u5c3e\u306fB\u3002xxx\u306e\u90e8\u5206\u306f\u4efb\u610f\u3002ABxxxxxxxB\n    return pow(2,n-3,mod)\n  #elif ary==['B','B','A','B']:\n  elif ary==['B','B','B','A']: # \u5148\u982d\u306fA\u3001\u672b\u5c3e\u306fB\u3002xxx\u306e\u90e8\u5206\u3067A\u306f\u9023\u7d9a\u3057\u306a\u3044\u3002ABxxxxxxxB\n    dpa=[0]*(n-2) # dpa[i]:i+2\u6587\u5b57\u76ee\u304ca\n    dpb=[0]*(n-2) # dpb[i]:i+2\u6587\u5b57\u76ee\u304cb\n    dpa[0]=0\n    dpb[0]=1\n    for i in range(n-3):\n      dpa[i+1]+=dpb[i]\n      dpb[i+1]+=dpa[i]+dpb[i]\n      dpa[i+1]%=mod\n      dpb[i+1]%=mod\n    return (dpa[-1]+dpb[-1])%mod\n  #elif ary==['B','B','B','B']:\n  else:\n    return ary[5]\n\n\nn=int(input())\ncaa=input()\ncab=input()\ncba=input()\ncbb=input()\nprint(main(n,caa,cab,cba,cbb))", "N, = list(map(int, input().split()))\nX = dict()\nX[\"AA\"] = input().strip()\nX[\"AB\"] = input().strip()\nX[\"BA\"] = input().strip()\nX[\"BB\"] = input().strip()\nss = set([\"AB\"])\nR = [1]\nfor i in range(4):\n    nss = set()\n    for t in ss:\n        for j in range(i+1):\n            nt = t[:j+1] + X[t[j:j+2]] + t[j+1:]\n            nss.add(nt)\n    ss = nss\n    R.append(len(ss))\nMOD = 10**9+7\nif N-2 < 5:\n    print((R[N-2]))\nelse:\n    if R[-3]+R[-2] == R[-1]:\n        for _ in range(N-2-4):\n            R.append((R[-1]+R[-2])%MOD)\n    elif R[-2] == R[-1]:\n        pass\n    elif R[-2]*2 == R[-1]:\n        for _ in range(N-2-4):\n            R.append(R[-1]*2%MOD)\n    print((R[-1]))\n", "N = int(input())\n\ndef f(c):\n    return 'B' if c == 'A' else 'A'\n\nMOD = 10 ** 9 + 7\n\ncs = [input() for _ in range(4)]\ncaa, cab, cba, cbb = cs\n    \nif N == 2 or N == 3:\n    print(1)\n    return\n\ndpokanai = [0] * (N - 2)\ndpoku = [0] * (N - 2)\ndpokanai[0] = 1\nfor i in range(N - 3):\n    dpokanai[i + 1] = dpokanai[i] + dpoku[i]\n    dpoku[i + 1] = dpokanai[i]\n\n# print(dpoku, dpokanai)\n\nif cab == 'A':\n    if caa == 'B':\n        if cba == 'B':\n            print(pow(2, N - 3, MOD))\n        else:\n            print((dpokanai[-1] + dpoku[-1]) % MOD)\n    else:\n        print(1)\nif cab == 'B':\n    if cbb == 'A':\n        if cba == 'A':\n            print(pow(2, N - 3, MOD))\n        else:\n            print((dpokanai[-1] + dpoku[-1]) % MOD)\n    else:\n        print(1)", "import sys \nsys.setrecursionlimit(2*10**5+1)\ninput = lambda:sys.stdin.readline().strip()\nn = int(input())\na = input()\nb = input()\nc = input()\nd = input()\nmod = 10**9+7\ne = 1\nf = 1\nfor i in range(n-3):\n    g = (e+f)%mod \n    e = f \n    f = g\nif n<=3:\n    print((1))\nelse:\n    if b=='B':\n        if d=='B':\n            print((1))\n        else:\n            if c=='A':\n                print((pow(2,n-3,mod)))\n            else:\n                print(f)\n    else:\n        if a=='A':\n            print((1))\n        else:\n            if c=='B':\n                print((pow(2,n-3,mod)))\n            else:\n                print(f)\n", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\ncaa = readline().strip() == 'A'\ncab = readline().strip() == 'A'\ncba = readline().strip() == 'A'\ncbb = readline().strip() == 'A'\n\nMOD = 10**9+7\nif not cab:\n    caa, cbb = cbb^1, caa^1\n    cab ^= 1\n    cba ^= 1\n#print(N, caa, cab, cba, cbb)\n\nif N == 2:\n    print((1))\nelif N == 3:\n    print((1))\nelif caa:\n    print((1))\nelse:\n    if cba:\n        dp = [0]*(N-2)\n        dp1 = [0]*(N-2)\n        dp[0] = 1\n        dp1[0] = 0\n        for i in range(1, N-2):\n            dp[i] = (dp[i-1]+dp1[i-1])%MOD\n            dp1[i] = dp[i-1]\n        ans = (dp[N-3] + dp1[N-3])%MOD\n    else:\n        ans = pow(2, N-3, MOD)\n    print(ans)\n", "mod=10**9+7\n\nn=int(input())\nif n==2 or n==3:\n  print(1)\n  return\ncaa=input()\ncab=input()\ncba=input()\ncbb=input()\n\nfact=[1]\nfor i in range(1,3001):\n  fact.append((fact[-1]*i)%mod)\nrevfact=[pow(fact[-1],mod-2,mod)]\nfor i in range(3000,0,-1):\n  revfact.append((revfact[-1]*i)%mod)\nrevfact=revfact[::-1]\n\ndef comb(n,r):\n  return (fact[n]*revfact[r]*revfact[n-r])%mod\n\nif cab=='A' and cba=='A':\n  if caa=='A':\n    print(1)\n  else:\n    ans=0\n    for cnta in range(1,n):\n      sukima=cnta-1\n      cntb=n-1-cnta\n      if cntb>sukima:\n        continue\n      else:\n        ans+=comb(sukima,cntb)\n    print(ans%mod)\nelif cab=='A' and cba=='B':\n  if caa=='A':\n    print(1)\n  else:\n    print(pow(2,n-3,mod))\nelif cab=='B' and cba=='A':\n  if cbb=='B':\n    print(1)\n  else:\n    print(pow(2,n-3,mod))\nelif cab=='B' and cba=='B':\n  if cbb=='B':\n    print(1)\n  else:\n    ans=0\n    for cntb in range(1,n):\n      sukima=cntb-1\n      cnta=n-1-cntb\n      if cnta>sukima:\n        continue\n      else:\n        ans+=comb(sukima,cnta)\n    print(ans%mod)", "n = int(input())\nt = {\"A\":0, \"B\":1}\n\naa = t[input()]\nab = t[input()]\nba = t[input()]\nbb = t[input()]\n\nmax_n=n+10\nmod=10**9+7\n\nfrac=[1]\nfor i in range(1,max_n+1):\n    frac.append((frac[-1]*i)%mod)\n\ninv=[1,1]\ninv_frac=[1,1]\nfor i in range(2,max_n):\n    inv.append((mod-inv[mod%i]*(mod//i))%mod)\n    inv_frac.append((inv_frac[-1]*inv[-1])%mod)\n\ndef perm(m,n):\n    if m<n:\n        return 0\n    if m==1:\n        return 1\n    return (frac[m]*inv_frac[m-n])%mod\n\ndef comb(m,n):\n    if m<n:\n        return 0\n    if m==1:\n        return 1\n    return (frac[m]*inv_frac[n]*inv_frac[m-n])%mod\n\nif ab == 1:\n    ab = 1 - ab\n    ba = 1 - ba\n    aa,bb = 1 - bb, 1 - aa\n\n\nif aa == 0:\n    print((1))\nelif ba == 1:\n    if n <= 3:\n        print((1))\n    else:\n        print((pow(2, n-3, mod)))\nelse:\n    c = 0\n    for i in range(1,n//2+1):\n        c = (c + comb(n-i-1, i-1)) % mod\n    print(c)\n", "import sys\nimport copy\n\nsys.setrecursionlimit(10 ** 8)\n\ninput = sys.stdin.readline\n\n\ndef fibo(x):\n    MOD = 10 ** 9 + 7\n    dp = [0] * (x + 10)\n\n    dp[3] = 1\n    dp[4] = 2\n\n    for i in range(5, x + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n        dp[i] %= MOD\n\n    return dp[x]\n\n\ndef main():\n    N = int(input())\n    CAA = input().strip()\n    CAB = input().strip()\n    CBA = input().strip()\n    CBB = input().strip()\n\n    MOD = 10 ** 9 + 7\n\n    if N == 2:\n        print((1))\n        return\n\n    if CAA == \"A\" and CAB == \"A\" and CBA == \"A\" and CBB == \"A\":\n        print((1))\n    elif CAA == \"A\" and CAB == \"A\" and CBA == \"A\" and CBB == \"B\":\n        print((1))\n    elif CAA == \"A\" and CAB == \"A\" and CBA == \"B\" and CBB == \"A\":\n        print((1))\n    elif CAA == \"A\" and CAB == \"A\" and CBA == \"B\" and CBB == \"B\":\n        print((1))\n    elif CAA == \"A\" and CAB == \"B\" and CBA == \"A\" and CBB == \"A\":\n        print((pow(2, N - 3, MOD)))\n    elif CAA == \"A\" and CAB == \"B\" and CBA == \"A\" and CBB == \"B\":\n        print((1))\n    elif CAA == \"A\" and CAB == \"B\" and CBA == \"B\" and CBB == \"A\":\n        print((fibo(N)))\n    elif CAA == \"A\" and CAB == \"B\" and CBA == \"B\" and CBB == \"B\":\n        print((1))\n    elif CAA == \"B\" and CAB == \"A\" and CBA == \"A\" and CBB == \"A\":\n        print((fibo(N)))\n    # fibo\n    elif CAA == \"B\" and CAB == \"A\" and CBA == \"A\" and CBB == \"B\":\n        print((fibo(N)))\n    # fibo\n    elif CAA == \"B\" and CAB == \"A\" and CBA == \"B\" and CBB == \"A\":\n        print((pow(2, N - 3, MOD)))\n    elif CAA == \"B\" and CAB == \"A\" and CBA == \"B\" and CBB == \"B\":\n        print((pow(2, N - 3, MOD)))\n    elif CAA == \"B\" and CAB == \"B\" and CBA == \"A\" and CBB == \"A\":\n        print((pow(2, N - 3, MOD)))\n    elif CAA == \"B\" and CAB == \"B\" and CBA == \"A\" and CBB == \"B\":\n        print((1))\n    elif CAA == \"B\" and CAB == \"B\" and CBA == \"B\" and CBB == \"A\":\n        print((fibo(N)))\n    # fibo\n    elif CAA == \"B\" and CAB == \"B\" and CBA == \"B\" and CBB == \"B\":\n        print((1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nc = [input() for i in range(4)]\nif n == 2 or n == 3:\n    print(1)\n    return\nmod = 10**9+7\nif c[1] == \"A\" and c[0] == \"A\":\n    print(1)\n    return\nif c[1] == \"B\" and c[3] == \"B\":\n    print(1)\n    return\nif c[1] == \"A\" and c[2] == \"B\":\n    print(pow(2,n-3,mod))\n    return\nif c[1] == \"B\" and c[2] == \"A\":\n    print(pow(2,n-3,mod))\n    return\ndp = [1,1]\nfor i in range(n):\n    dp.append((dp[-1]+dp[-2])%mod)\nprint(dp[n-2])", "n = int(input())\naa = input()\nab = input()\nba = input()\nbb = input()\n\nmod = 10**9 + 7\n\ndef solve(n, aa, ab, ba, bb):\n    if n <= 3:\n        print(1)\n        return\n    if ab == aa == 'A':\n        print(1)\n    elif ab == bb == 'B':\n        print(1)\n    elif ab == 'A' and aa == 'B':\n        if ba == 'B':\n            print(pow(2, n-3, mod))\n        else:\n            # n-3\u306e\u533a\u9593\u306baa\u3092\u9664\u304f\u5168\u30d1\u30bf\u30fc\u30f3\n            dp = [[0] * 2 for i in range(n+1)]\n            dp[0][0] = 1\n            dp[0][1] = 1\n            for i in range(n):\n                dp[i+1][0] = (dp[i+1][0] + dp[i][1])%mod\n                dp[i+1][1] = (dp[i+1][1] + dp[i][0] + dp[i][1])%mod\n            ans = (dp[n-4][0] + dp[n-4][1])%mod\n            print(ans) \n    elif ab == 'B' and bb == 'A':\n        if ba == 'A':\n            print(pow(2, n-3, mod))\n        else:\n            # n-3\u306e\u533a\u9593\u306baa\u3092\u9664\u304f\u5168\u30d1\u30bf\u30fc\u30f3\n            dp = [[0] * 2 for i in range(n+1)]\n            dp[0][0] = 1\n            dp[0][1] = 1\n            for i in range(n):\n                dp[i+1][0] = (dp[i+1][0] + dp[i][1])%mod\n                dp[i+1][1] = (dp[i+1][1] + dp[i][0] + dp[i][1])%mod\n            ans = (dp[n-4][0] + dp[n-4][1])%mod\n            print(ans) \n    else:\n        pass\n        print('ptn5')\n\"\"\"\nfrom itertools import product\nfor n in range(3, 100):\n    for bit in product(['A', 'B'], repeat=4):\n        aa, ab, ba, bb = bit\n        solve(n, aa, ab, ba, bb)\n\"\"\"\nsolve(n, aa, ab, ba, bb)", "import sys\ninput = sys.stdin.readline\n\ndef ot(s):\n    return \"A\" if s == \"B\" else \"B\"\n\nmod = 10**9+7\nN = int(input())\nSs = [input().rstrip() for _ in range(4)]\n\ndef solve(caa, cab, cba, cbb):\n    if caa == cab or N <= 3:\n        return 1\n    if cba == \"A\":\n        dp = [[0, 0] for _ in range(N+1)]\n        dp[0][1] = 1\n        for n in range(N):\n            dp[n+1][0] = (dp[n][0] + dp[n][1]) % mod\n            dp[n+1][1] = dp[n][0]\n        return dp[N][1]\n    else:\n        return pow(2, N-3, mod)\n    \n\n\nif Ss[1] == \"B\":\n    Ss = [ot(Ss[3]), \"A\", ot(Ss[2]), ot(Ss[0])]\n\nprint((solve(Ss[0], Ss[1], Ss[2], Ss[3])))\n\n# AB = [\"A\", \"B\"]\n# for s1 in AB:\n#     for s2 in AB:\n#         for s3 in AB:\n#             for s4 in AB:\n#                 print(s1+s2+s3+s4)\n#                 T(6, [s1, s2, s3, s4])\n", "def cmb(n, r, mod):#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u306e\u9ad8\u901f\u8a08\u7b97\u3000\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod =  10**9+7\nN = 2*10**5\ng1 = [1]*(N+1) # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1]*(N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [1]*(N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1[i]=( ( g1[i-1] * i ) % mod )\n    inverse[i]=( ( -inverse[mod % i] * (mod//i) ) % mod )\n    g2[i]=( (g2[i-1] * inverse[i]) % mod )\ninverse[0]=0\n\nN = int(input())\naa = input()\nab = input()\nba = input()\nbb = input()\n\nif ab==\"A\":\n    if aa==\"A\":\n        print(1)\n    else:\n        if ba==\"A\":\n            res = 0\n            for k in range(1,N//2+1):\n                tmp = N - 1 - (2*k-1)\n                res += cmb(tmp+k-1,k-1,mod)\n                res %= mod\n            print(res)\n        else:\n            res = 0\n            for k in range(1,N//2+1):\n                tmp = N - 1 - (2*k-1)\n                res += cmb(tmp+2*k-2,2*k-2,mod)\n                res %= mod\n            print(res)\nelse:\n    if bb==\"B\":\n        print(1)\n    else:\n        if ba==\"B\":\n            res = 0\n            for k in range(1,N//2+1):\n                tmp = N - 1 - (2*k-1)\n                res += cmb(tmp+k-1,k-1,mod)\n                res %= mod\n            print(res)\n        else:\n            res = 0\n            for k in range(1,N//2+1):\n                tmp = N - 1 - (2*k-1)\n                res += cmb(tmp+2*k-2,2*k-2,mod)\n                res %= mod\n            print(res)", "from collections import defaultdict, Counter\nmod = 10 ** 9 + 7\nN = int(input())\naa, ab, ba, bb = input(), input(), input(), input()\ndic = {}\ndic['A', 'A'], dic['A', 'B'], dic['B', 'A'], dic['B', 'B'] = aa, ab, ba, bb\ndp = {\"AB\"}\nif N <= 3:\n  print((1))\nelse:\n  for _ in range(3):\n    dp2 = set()\n    for s in dp:\n      for i, (a, b) in enumerate(zip(s, s[1:]), 1):\n        dp2.add(s[: i] + dic[a, b] + s[i:])\n    dp = dp2\n  if len(dp) == 1:\n    print((1))\n  elif len(dp) == 3:\n    x, y = 1, 1\n    for _ in range(N - 3):\n      x, y = y, (x + y) % mod\n    print(y)\n  else:\n    print((pow(2, N - 3, mod)))\n", "N = int(input())\nc_AA = input()\nc_AB = input()\nc_BA = input()\nc_BB = input()\nMOD = 10 ** 9 + 7\n\ndef fibonacchi(n, mod):\n    dp = []\n    for i in range(0, n):\n        if i == 0 or i == 1:\n            dp.append(1)\n        else:\n            dp.append((dp[i - 2] + dp[i - 1]) % mod)\n    return dp[-1]\n\nif N == 2 or N == 3:\n    print((1))\nelse:\n    if c_AB == 'B':\n        if c_BB == 'B':\n            print((1))\n        else:\n            if c_BA == 'A':\n                print((pow(2, N - 3, MOD)))\n            else:\n                print((fibonacchi(N - 1, MOD)))\n    else:\n        if c_AA == 'A':\n            print((1))\n        else:\n            if c_BA == 'A':\n                print((fibonacchi(N - 1, MOD)))\n            else:\n                print((pow(2, N - 3, MOD)))\n", "mod=10**9+7\nN=int(input())\nC={}\nC[\"AA\"]=input()\nC[\"AB\"]=input()\nC[\"BA\"]=input()\nC[\"BB\"]=input()\nF=[1,1]\nfor i in range(N):\n    F.append((F[-1]+F[-2])%mod)\nif N<=3:\n    print((1))\nelif C[\"AB\"]==\"B\":\n    if C[\"BB\"]==\"B\":\n        print((1))\n    else:\n        if C[\"BA\"]==\"A\":\n            print((pow(2,N-3,mod)))\n        else:\n            print((F[N-2]))\nelse:\n    if C[\"AA\"]==\"A\":\n        print((1))\n    else:\n        if C[\"BA\"]==\"B\":\n            print((pow(2,N-3,mod)))\n        else:\n            print((F[N-2]))\n", "import sys\ninput = sys.stdin.readline\nN = int(input())\naa = input()[: -1]\nab = input()[: -1]\nba = input()[: -1]\nbb = input()[: -1]\nmod = 10 ** 9 + 7\nif N <= 3:\n  print(1)\n  return\nif ab == \"A\":\n  if aa == \"A\":\n    print(1)\n    return\n  else:\n    if ba == \"B\":\n      print(pow(2, N - 3, mod))\n      return\n    else:\n      table = [0] * (N + 1)\n      table[2] = 1\n      for i in range(1, N - 1): table[i + 2] = table[i + 1] + table[i]\n      print(table[N] % mod)\n      return\nif ab == \"B\":\n  if bb == \"B\":\n    print(1)\n    return\n  else:\n    if ba == \"A\":\n      print(pow(2, N - 3, mod))\n      return\n    else:\n      table = [0] * (N + 1)\n      table[2] = 1\n      for i in range(1, N - 1): table[i + 2] = table[i + 1] + table[i]\n      print(table[N] % mod)\n      return", "#!/usr/bin/env python3\nimport sys\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef main():\n    n = int(input())\n    CAA = input()\n    CAB = input()\n    CBA = input()\n    CBB = input()\n    dp = [0]*(n+1)\n    dp[2] = 1\n    mod = 10**9+7\n    for i in range(3, n+1):\n        if CAB == 'A':\n            if CAA == 'A':\n                dp[i] = dp[i-1]\n            elif CAB == 'B' or CBA == 'B':\n                dp[i] = sum(dp[:i]) % mod\n            else:\n                dp[i] = dp[i-1]+dp[i-2]\n                dp[i] %= mod\n        else:\n            if CBB == 'B':\n                dp[i] = dp[i-1]\n            elif CAB == 'A' or CBA == 'A':\n                dp[i] = sum(dp[:i]) % mod\n            else:\n                dp[i] = dp[i-1]+dp[i-2]\n                dp[i] %= mod\n    print(dp[n])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "mod = 10**9 + 7\n\ndef tr(c):\n    if c == 'A':\n        return 'B'\n    else:\n        return 'A'\n\nn = int(input())\nif n <= 3:\n    print((1))\n    return\ncaa = input()\ncab = input()\ncba = input()\ncbb = input()\nif cab == 'B':\n    caa, cbb = cbb, caa\n    caa = tr(caa)\n    cab = tr(cab)\n    cba = tr(cba)\n    cbb = tr(cbb)\nif caa == 'A':\n    print((1))\n    return\nif cba == 'B':\n    print((pow(2, n - 3, mod)))\n    return\nans, prev = 2, 1\nfor i in range(4, n):\n    ans, prev = (ans + prev) % mod, ans\nprint(ans)\n", "N=int(input())\nc1=input()\nc2=input()\nc3=input()\nc4=input()\n\nmod=10**9+7\ndp=[[0]*2 for _ in range(N)]\ndp[0][0]=1\ndp[0][1]=0\nfor i in range(1,N):\n  dp[i][0]=(dp[i-1][0]+dp[i-1][1])%mod\n  dp[i][1]=dp[i-1][0]\nx=dp[N-1][1]\n\nif N==2:\n  print(1)\n  return\n\nif c2==\"A\":\n  if c1==\"A\":\n    print(1)\n    return\n  else:\n    if c3==\"A\":\n      print(x)\n      return\n    else:\n      print(pow(2,N-3,mod))\n      return\nelse:\n  if c4==\"B\":\n    print(1)\n    return\n  else:\n    if c3==\"B\":\n      print(x)\n      return\n    else:\n      print(pow(2,N-3,mod))\n      return", "import sys\ninput = sys.stdin.readline\n\nmod = 10**9 + 7\nN = int(input())\nAA, AB, BA, BB = [input().rstrip() for _ in range(4)]\n\nif N <= 3:\n    print(1)\n    return\n\nfact = [1] * (N+1)\nfact_inv = [1] * (N+1)\nfor i in range(1, N+1):\n    fact[i] = i * fact[i-1] % mod\nfact_inv[N] = pow(fact[N], mod-2, mod)\nfor i in range(1, N+1)[::-1]:\n    fact_inv[i-1] = i * fact_inv[i] % mod\ncomb = lambda n, k: fact[n] * fact_inv[k] * fact_inv[n-k] % mod\n\nif AB == 'A':\n    if AA == 'A':\n        print(1)\n    else:\n        if BA == 'A':\n            ans = 0\n            for x in range(N - 3 + 1):\n                if N - 3 - x + 1 < x:\n                    break\n                ans = (ans + comb(N - 3 - x + 1, x)) % mod\n            print(ans)\n        else:\n            print(pow(2, N - 3, mod))\nelse:\n    if BB == 'B':\n        print(1)\n    else:\n        if BA == 'B':\n            ans = 0\n            for x in range(N - 3 + 1):\n                if N - 3 - x + 1 < x:\n                    break\n                ans = (ans + comb(N - 3 - x + 1, x)) % mod\n            print(ans)\n        else:\n            print(pow(2, N - 3, mod))", "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\nN = int(readline())\n#n,m = map(int,readline().split())\naa = readline().strip()\nab = readline().strip()\nba = readline().strip()\nbb = readline().strip()\nnxt = [aa,ab,ba,bb]\n\nn = 10\nans = [0]*n\nans[2] = 1\nd = {\"AB\"}\nk = [\"AA\",\"AB\",\"BA\",\"BB\"]\nfor i in range(3,n):\n    nd = set()\n    for v in d:\n        for j in range(i-2):\n            idx = k.index(v[j:j+2])\n            c = v[:j+1]+nxt[idx]+v[j+1:]\n            nd.add(c)\n    d = nd\n    ans[i] = len(d)\n\n#print(ans)\n\nMOD = 10**9+7\nr = (ans[2],ans[3],ans[4],ans[5])\nif r == (1,1,1,1):\n    print((1))\nelif r == (1,1,2,4):\n    if N==2: print((1))\n    else: print((pow(2,N-3,MOD)))\nelif r == (1,1,2,3):\n    x,y = 0,1\n    for i in range(N-2):\n        x,y = y,(x+y)%MOD\n    print((y%MOD))\n    \n", "#from collections import deque,defaultdict\nprintn = lambda x: print(x,end='')\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      map(int, input().split())\nins = lambda : input().strip()\nDBG = True # and False\nBIG = 10**18\nR = 10**9 + 7\n#R = 998244353\n\ndef ddprint(x):\n  if DBG:\n    print(x)\n\nn = inn()\naa = ins()\nab = ins()\nba = ins()\nbb = ins()\nif ab=='A' and aa=='A' or ab=='B' and bb=='B':\n    print(1)\nelif ab=='A' and aa=='B' and ba=='A' or \\\n     ab=='B' and bb=='A' and ba=='B':\n    d = [0]*(n+1)\n    d[0] = 1\n    for i in range(2,n+1):\n        for j in range(i-1):\n            d[i] = (d[i]+d[j])%R\n    print(d[n])\nelse:\n    d = [0]*(n+1)\n    d[0] = 1\n    x = 1\n    for i in range(2,n-1):\n        for j in range(i-1):\n            d[i] = (d[i]+d[j]*(i-j-1))%R\n        #ddprint(f\"{i=} {x=} {d[i]=}\")\n        x = (x+d[i])%R\n    print(x)\n", "n=int(input())\naa=ord(input())-65\nab=ord(input())-65\nba=ord(input())-65\nbb=ord(input())-65\nmo=10**9+7\ndef f(a):\n    r = 1\n    for i in range(1, a + 1): r *= i\n    return r\ndef c(a, b):\n    return f(a) // f(b) // f(a - b)\nif ab == 0:\n    ab = 1\n    ba = 1 - ba\n    bb = 1 - aa\nif n == 2:\n    print((1))\nelif bb == 1:\n    print((1))\nelif ba == 0:\n    print((2 ** (n - 3) % mo))\nelse:\n    m = n - 3\n    s = 0\n    for i in range(0, m + 1):\n        if i > m + 1 - i: break\n        s += c(m + 1 - i, i)\n    print((s % mo))\n", "import sys\n\nsys.setrecursionlimit(10**7)\ndef I(): return int(sys.stdin.readline().rstrip())\ndef MI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LI2(): return list(map(int,sys.stdin.readline().rstrip()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef LS2(): return list(sys.stdin.readline().rstrip())\n\n\nN = I()\nAA,AB,BA,BB = S(),S(),S(),S()\nmod = 10**9+7\n\nif N == 2:\n    print((1))\n    return\n\nfib = [1,1]\nfor i in range(N):\n    fib.append((fib[-1]+fib[-2]) % mod)\n\nif AB == 'A':\n    if AA == 'A':\n        print((1))\n    else:\n        if BA == 'B':\n            print((pow(2,N-3,mod)))\n        else:\n            print((fib[N-2]))\nelse:\n    if BB == 'B':\n        print((1))\n    else:\n        if BA == 'A':\n            print((pow(2,N-3,mod)))\n        else:\n            print((fib[N-2]))\n", "N = int(input())\ncaa = input()\ncab = input()\ncba = input()\ncbb = input()\nmod = 10**9+7\nif N <= 3 or (caa == 'A' and cab == 'A') or (cab == 'B' and cbb == 'B'):\n    print(1)\nelif (caa == 'B' and cab == 'A' and cba == 'B') or (cab == 'B' and cba == 'A' and cbb == 'A'):\n    print(pow(2, N-3, mod))\nelse:\n    dp = [0] * (N+1)\n    dp[2] = 1\n    for i in range(3, N+1):\n        dp[i] = (dp[i-1] + dp[i-2]) % mod\n    print(dp[N])", "mod = 10 ** 9 + 7\n\nN, aa, ab, ba, bb = open(0).read().split()\nN = int(N)\n\nif N <= 3 or aa == ab == \"A\" or ab == bb == \"B\":\n    print(1)\nelif aa + ab + ba == \"BAB\" or ab + ba + bb == \"BAA\":\n    print(pow(2, N - 3, mod))\nelse:\n    a, b = 1, 1\n    for _ in range(N - 3):\n        a, b = a + b, a\n    print(a % mod)", "n = int(input())\nmod = 10**9+7\nc_aa = input()\nc_ab = input()\nc_ba = input()\nc_bb = input()\n\ndef Fibo(n):\n    cache = {}\n    def impl(ni):\n        nonlocal cache\n        if ni <= 3:\n            return 1\n        if ni not in cache:\n            cache[ni] = impl(ni - 2) + impl(ni - 1)\n        return cache[ni]\n    return impl(n)\nif n <= 3:\n  print(1)\n  return\nif c_ab == \"B\":\n  if c_bb == \"B\":\n    print(1)\n    return\n  if c_bb  == \"A\":\n    if c_ba == \"A\":\n      print(2**(n-3)%mod)\n      return\n    elif c_ba == \"B\":\n      print(Fibo(n)%mod)\nelif c_ab == \"A\":\n  if c_aa == \"A\":\n    print(1)\n    return\n  elif c_aa == \"B\":\n    if c_ba == \"B\":\n      print(2**(n-3)%mod)\n      return\n    elif c_ba == \"A\":\n      print(Fibo(n)%mod)", "from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom operator import mul\nfrom functools import reduce\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 13\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.readline().rstrip().split()\ndef S(): return sys.stdin.readline().rstrip()\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n#a\u304bb\u306e\u3069\u3061\u3089\u304b\u306f\u7121\u9650\u306b\u5897\u3084\u305b\u308b\nn=I()\nc1=S()\nc2=S()\nc3=S()\nc4=S()\n\nif n<=3:\n    print((1))\n    return\n\nif c2==\"A\":\n    if c1==\"A\":\n        print((1))\n    else:\n        dp=[0]*(n-1)\n        dp[0]=1\n        dp[1]=1\n        for i in range(2,n-1):\n            dp[i]=(dp[i-1]+dp[i-2])%mod\n        if c3==\"A\":\n            print((dp[-1]))\n        else:\n            print((pow(2,n-3,mod)))\nelse:\n    if c4==\"B\":\n        print((1))\n    else:\n        dp = [0] * (n - 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n - 1):\n            dp[i] =(dp[i-1]+dp[i-2])%mod\n        if c3==\"B\":\n            print((dp[-1]))\n        else:\n            print((pow(2,n -3,mod)))\n\n\n\n\n\n", "N = int(input())\nC_AA, C_AB, C_BA, C_BB = [input() for _ in range(4)]\n\nif N <= 3:\n    print((1))\n    return\n\nmod = 10**9 + 7\ndef solve(n):\n    dp_a = [0] * (n+1)\n    dp_b = [0] * (n+1)\n    dp_b[0] = 1\n    for i in range(1, n+1):\n        dp_b[i] = (dp_a[i-1] + dp_b[i-1]) % mod\n        dp_a[i] = dp_b[i-1]\n    res = (dp_a[n] + dp_b[n]) % mod\n    return res\n\nif C_AB == \"B\":\n    if C_BB == \"B\":\n        ans = 1\n    else:\n        # [AB]xxxxxx[B]\n        if C_BA == \"B\":\n            # A \u306f 1 \u9023\u7d9a\u307e\u3067\n            ans = solve(N-3)\n        else:\n            # B \u3068 A \u306f\u4efb\u610f\n            ans = pow(2, N-3, mod)\nelse:\n    if C_AA == \"A\":\n        ans = 1\n    else:\n        # [A]xxxxxx[AB]\n        if C_BA == \"A\":\n            ans = solve(N-3)\n        else:\n            ans = pow(2, N-3, mod)\nprint(ans)\n", "import bisect\nimport heapq\nimport itertools\nimport sys\nimport math\nimport random\nimport time\nfrom collections import Counter, deque, defaultdict\nfrom functools import reduce\nfrom operator import xor\nfrom types import FunctionType\nfrom typing import List, Any\nfrom sys import stdin\n\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 9)\n\n\ndef lmi():\n    return list(map(int, stdin.readline().split()))\n\n\ndef narray(*shape, init: Any = 0):\n    if shape:\n        num = shape[0]\n        return [narray(*shape[1:], init=init) for _ in range(num)]\n    if callable(init):\n        return init()\n    return init\n\n\ndef main():\n    N = int(input())\n    AA = input()\n    AB = input()\n    BA = input()\n    BB = input()\n    ans = solve(N, AA, AB, BA, BB)\n    print(ans)\n    # for i in range(2, 10):\n    #     for pattern in itertools.product('AB', repeat=4):\n    #         N = i\n    #         ans = stupid(N, *pattern)\n    #         print(ans, *pattern)\n    #         # assert ans == solve(N, *pattern)\n    #     print('-' * 100)\n\n    # if AB == 'A':\n    #     if AA == 'A':\n    #         print(1)\n    #         return\n    #     else:\n    #         # AB: A, AA: B\n    #         pass\n    # else:\n    #     if BB == 'B':\n    #         print(1)\n    #     else:\n    #         pass\n\ndef solve(N, AA, AB, BA, BB):\n    pattern = ''.join([AA, AB, BA, BB])\n    ans = 1\n    if pattern in [\n        'AAAA',\n        'AAAB',\n        'AABA',\n        'AABB',\n        'ABAB',\n        'ABBB',\n        'BBAB',\n        'BBBB',\n    ]:\n        ans = f1(N)\n    elif pattern in [\n        'ABAA',\n        'BABA',\n        'BABB',\n        'BBAA',\n    ]:\n        ans = f2(N)\n    elif pattern in [\n        'ABBA',\n        'BAAA',\n        'BAAB',\n        'BBBA',\n    ]:\n        ans = f3(N - 1)\n    return ans\n\n\ndef f1(N):\n    return 1\n\ndef f2(N):\n    return pow(2, max(0, N - 3), mod)\n\ndef f3(N):\n    memo = [0] * (N + 3)\n    memo[1] = 1\n    memo[2] = 1\n    for i in range(3, N + 1):\n        memo[i] = memo[i - 1] + memo[i - 2]\n        memo[i] %= mod\n    return memo[N]\n\ndef stupid(N, AA, AB, BA, BB):\n    ret = set()\n    stack = ['AB']\n    while stack:\n        cur = stack.pop()\n        if len(cur) == N:\n            ret.add(cur)\n            continue\n        for i in range(len(cur) - 1):\n            next_s = ''\n            if cur[i: i + 2] == 'AA':\n                next_s = cur[:i + 1] + AA + cur[i + 1:]\n            elif cur[i: i + 2] == 'AB':\n                next_s = cur[:i + 1] + AB + cur[i + 1:]\n            elif cur[i: i + 2] == 'BA':\n                next_s = cur[:i + 1] + BA + cur[i + 1:]\n            elif cur[i: i + 2] == 'BB':\n                next_s = cur[:i + 1] + BB + cur[i + 1:]\n            stack.append(next_s)\n    # print(ret)\n    return len(ret)\n\n\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import io\nimport os\n\nfrom collections import Counter, defaultdict, deque\nimport sys\n\nsys.setrecursionlimit(10 ** 5)\n\n\nMOD = 10 ** 9 + 7\n\n\ndef solveBrute(N, AA, AB, BA, BB):\n\n    possible = set()\n\n    cache = set()\n\n    def f(s):\n        if s in cache:\n            return\n        cache.add(s)\n        if len(s) == N:\n            possible.add(s)\n            return\n        for i in range(len(s) - 1):\n            pair = s[i : i + 2]\n            if pair == \"AA\":\n                f(s[: i + 1] + AA + s[i + 1 :])\n            elif pair == \"AB\":\n                f(s[: i + 1] + AB + s[i + 1 :])\n            elif pair == \"BA\":\n                f(s[: i + 1] + BA + s[i + 1 :])\n            elif pair == \"BB\":\n                f(s[: i + 1] + BB + s[i + 1 :])\n\n    f(\"AB\")\n    return len(possible) % MOD\n\n\ndef solve(N, AA, AB, BA, BB):\n    if N == 2:\n        return 1\n    pattern = AA + AB + BA + BB\n\n    if pattern in [\"ABAA\", \"BABA\", \"BABB\", \"BBAA\"]:\n        return pow(2, N - 3, MOD)\n    elif pattern in [\"ABBA\", \"BAAA\", \"BAAB\", \"BBBA\"]:\n        fib = [0] * (N + 1)\n        fib[0] = 1\n        fib[1] = 1\n        for i in range(2, N + 1):\n            fib[i] = (fib[i - 1] + fib[i - 2]) % MOD\n        return fib[N - 2]\n    else:\n        return 1\n\nif False:\n    for mask in range(1 << 4):\n        for N in range(2, 10):\n            args = [(mask >> 3) & 1, (mask >> 2) & 1, (mask >> 1) & 1, (mask >> 0) & 1]\n            args = [\"AB\"[x] for x in args]\n            print((N, \"\".join(args), \"\\t\", solveBrute(N, *args)))\n            assert solveBrute(N, *args) == solve(N, *args)\n        print()\n\ndef __starting_point():\n\n    TC = 1\n    for tc in range(1, TC + 1):\n        N = int(input())\n        AA = input()\n        AB = input()\n        BA = input()\n        BB = input()\n        ans = solve(N, AA, AB, BA, BB)\n        print(ans)\n\n__starting_point()", "def main():\n\n    N = int(input())\n\n    if N == 2 or N == 3: return 1\n\n    cAA = input()\n    cAB = input()\n    cBA = input()\n    cBB = input()\n\n    mod = pow(10, 9) + 7\n\n    v1 = 1\n    for i in range(N-3): v1 = v1 * 2 % mod\n    v2 = 1\n    dp = [0, 1]\n    for i in range(N-3):\n        temp = [0, 0]\n        temp[0] = dp[1]\n        temp[1] = (dp[0] + dp[1]) % mod\n        dp = temp\n    v2 = sum(dp) % mod\n\n    # print(v1, v2)\n\n    if cAB == 'B':\n        if cBB == 'B': return 1\n        else:\n            if cBA == 'A':\n                return v1\n            else:\n                return v2\n    else:\n        if cAA == 'A': return 1\n        else:\n            if cBA == 'B':\n                return v1\n            else:\n                return v2\n\n\ndef __starting_point():\n    print(main())\n__starting_point()", "P = 10**9+7\nnn = 2000\nfa = [1] * (nn+1)\nfainv = [1] * (nn+1)\nfor i in range(nn):\n    fa[i+1] = fa[i] * (i+1) % P\nfainv[-1] = pow(fa[-1], P-2, P)\nfor i in range(nn)[::-1]:\n    fainv[i] = fainv[i+1] * (i+1) % P\n \nC = lambda a, b: fa[a] * fainv[b] % P * fainv[a-b] % P if 0 <= b <= a else 0\n\nN = int(input())\nif N < 4:\n  print(1)\n  return\nc = []\nfor _ in range(4):\n  c.append(input())\nif c[1] == \"A\":\n  if c[0] == \"A\":\n    print(1)\n  else:\n    if c[2] == \"B\":\n      N -= 3\n      ans = 1\n      for _ in range(N):\n        ans = 2*ans%P\n      print(ans)\n    else:\n      N -= 3\n      M = N//2\n      ans = 0\n      for m in range(M+1):\n        a = N-m\n        ans = (ans + C(a,m))%P\n        ans = (ans + C(a,m-1))%P\n      if N%2==1:\n        ans = (ans+1)%P\n      print(ans)\nelse:\n  if c[3] == \"B\":\n    print(1)\n  else:\n    if c[2] == \"A\":\n      N -= 3\n      ans = 1\n      for _ in range(N):\n        ans = 2*ans%P\n      print(ans)\n    else:\n      N -= 3\n      M = N//2\n      ans = 0\n      for m in range(M+1):\n        a = N-m\n        ans = (ans + C(a,m))%P\n        ans = (ans + C(a,m-1))%P\n      if N%2==1:\n        ans = (ans+1)%P\n      print(ans)", "import sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef S(): return sys.stdin.readline().rstrip()\n\n\nN = I()\nAA,AB,BA,BB = S(),S(),S(),S()\nmod = 10**9+7\n\nif N <= 3:\n    print((1))\n    return\n\nans1 = 1\n\nfib = [1,1]\nfor i in range(N-3):\n    fib.append((fib[-1]+fib[-2]) % mod)\nans2 = fib[-1]\n\nans3 = pow(2,N-3,mod)\n\n\nif AB == 'A':\n    if AA == 'A':\n        ans = ans1\n    else:\n        if BA == 'A':\n            ans = ans2\n        else:\n            ans = ans3\nelse:\n    if BB == 'B':\n        ans = ans1\n    else:\n        if BA == 'B':\n            ans = ans2\n        else:\n            ans = ans3\n\nprint(ans)\n", "mod=10**9+7\n\nn=int(input())\nif n==2 or n==3:\n  print(1)\n  return\nc=[input() for _ in range(4)]\nif c[0]==c[1]=='A' or c[1]==c[3]=='B':\n  print(1)\nelif (c[0]=='B' and c[1]==c[2]=='A') or (c[3]=='A' and c[1]==c[2]=='B'):\n  fact=[1]\n  for i in range(1,n+1):\n    fact.append((fact[-1]*i)%mod)\n  rfact=[pow(fact[-1],mod-2,mod)]\n  for i in range(n,0,-1):\n    rfact.append((rfact[-1]*i)%mod)\n  rfact=rfact[::-1]\n  ans=0\n  for i in range(n-1):\n    if 2*i-(n-2)<0:\n      continue\n    ans+=fact[i]*rfact[n-2-i]*rfact[2*i-(n-2)]\n  print(ans%mod)\nelse:\n  print(pow(2,n-3,mod))", "import sys\ndef input(): return sys.stdin.readline().strip()\ndef mapint(): return list(map(int, input().split()))\nsys.setrecursionlimit(10**9)\n\nN = int(input())\nAA = input()\nAB = input()\nBA = input()\nBB = input()\nmod = 10**9+7\n\nif N<=3:\n    print((1))\nelif AA=='A' and AB=='A':\n    print((1))\nelif BB=='B' and AB=='B':\n    print((1))\nelif (AA, AB, BA, BB) in [(\"A\", \"B\", \"A\", \"A\"),  (\"B\", \"A\", \"B\", \"A\"), (\"B\", \"A\", \"B\", \"B\"), (\"B\", \"B\", \"A\", \"A\")]:\n    print((pow(2, N-3, mod)))\nelse:\n    dp = [[0]*2 for _ in range(N)]\n    dp[0][0] = 1\n    for i in range(1, N):\n        # B\u304c\u9023\u7d9a\u3057\u306a\u3044\u3088\u3046\u306b\u7f6e\u304f\n        dp[i][0] = (dp[i-1][0] + dp[i-1][1])%mod\n        dp[i][1] = dp[i-1][0]%mod\n    print((dp[-1][1]))\n    \n\n# def f(aa, ab, ba, bb):\n#     l = [aa, ab, ba, bb]\n#     start = 'AB'\n#     se = set([start])\n#     while True:\n#         new = set()\n#         for s in se:\n#             lens = len(s)\n#             for i in range(lens-1):\n#                 new.add(s[:i+1]+l[lis.index(s[i:i+2])]+s[i+1:])\n#         if len(s)+1==N:\n#             return new\n#         se = new\n\n# N = 10\n# lis = ['AA', 'AB', 'BA', 'BB']\n# for AA in ('A', 'B'):\n#     for AB in ('A', 'B'):\n#         for BA in ('A', 'B'):\n#             for BB in ('A', 'B'):\n#                 print(AA, AB, BA, BB, len(f(AA, AB, BA, BB)))\n", "import sys\ninput = sys.stdin.readline\n\nN=int(input())\nmod=10**9+7\n\nAA=input().strip()\nAB=input().strip()\nBA=input().strip()\nBB=input().strip()\n\nif (AA,AB,BA,BB) in {('A', 'A', 'A', 'A'),('A', 'A', 'A', 'B'),('A', 'A', 'B', 'A'),('A', 'A', 'B', 'B'),('A', 'B', 'A', 'B'),('A', 'B', 'B', 'B'),('B', 'B', 'A', 'B'),('B', 'B', 'B', 'B')}:    \n    print((1))\n\nelif (AA,AB,BA,BB) in {('A', 'B', 'A', 'A'),('B', 'A', 'B', 'A'),('B', 'A', 'B', 'B'),('B', 'B', 'A', 'A')}:\n    ANS=[0,0,1,1,2]\n    for i in range(1000):\n        ANS.append(ANS[-1]*2%mod)\n    print((ANS[N]))\n    \nelif (AA,AB,BA,BB) in {('A', 'B', 'B', 'A'),('B', 'A', 'A', 'A'),('B', 'A', 'A', 'B'),('B', 'B', 'B', 'A')}:\n    ANS=[0,0,1,1,2,3,5]\n    for i in range(1000):\n        ANS.append((ANS[-1]+ANS[-2])%mod)\n\n    print((ANS[N]))\n\n    \n", "import sys\nMOD = 10**9 + 7\nN = int(input())\nif N == 2:\n  print((1))\n  return\n  \nc = [input() for _ in range(4)]\ns = \"\".join(c)\n\nDP = [0 for i in range(N+1)] #\u9593\u3092\u958b\u3051\u3066\u9078\u3076\u5834\u5408\u306e\u6570(i\u756a\u76ee\u3092\u9078\u3076\u5834\u5408)\nDP[0] = 1\nDP[1] = 1\nDP_sum = 2\nfor i in range(2,N-2):\n  DP[i] += DP_sum - DP[i-1]\n  DP_sum += DP[i]\n  \n  \nif s == \"AAAA\" or s == \"BBBB\" or s == \"AABA\" or s == \"BBAB\":\n  print((1))\nelif s == \"AAAB\" or s == \"ABBB\" or s == \"ABAB\" or s == \"AABB\":\n  print((1))\nelif s == \"ABAA\" or s == \"BABB\" or s == \"BABA\" or s == \"BBAA\":\n  print((2**(N-3) % MOD))\nelif s == \"ABBA\" or s == \"BAAB\" or s == \"BAAA\" or s == \"BBBA\":\n  if N == 3:\n    print((1))\n    return\n  print((DP_sum % MOD))\n  \n", "import math\nimport sys\nimport itertools\n\nA = 'A'\nB = 'B'\n\ndef c(s):\n    caa, cab, cba, cbb = s\n    return {A: {A: caa, B: cab}, B: {A: cba, B: cbb}}\n\ndef f(s, n, C):\n    if len(s) == n:\n        yield s\n    else:\n        for i in range(len(s) - 1):\n            yield from f(s[:i+1] + C[s[i]][s[i + 1]] + s[i+1:], n, C)\n\ndef g(n, s):\n    return len(set(f('AB', n, c(s))))\n\n\nn = int(input())\ncaa = input()\ncab = input()\ncba = input()\ncbb = input()\ns = ''.join([caa, cab, cba, cbb])\nmod = 10**9 + 7\n\nX = g(6, s)\nif n == 2:\n    print(1)\nelif X == 8:\n    print(pow(2, n - 3, mod))\nelif X == 5:\n    a = 0\n    b = 1\n    for i in range(n - 2):\n        a, b = b, (a + b) % mod\n    print(b)\nelif X == 1:\n    print(1)\n\nfor sx in itertools.product(*[[A, B]]*4):\n    s = ''.join(sx)\n    print(' '.join([s, *['%2d' % g(i, s) for i in range(2, 10)]]), file=sys.stderr)\n\n", "N=int(input())\nD={}\nD[(\"A\",\"A\")]=str(input())\nD[(\"A\",\"B\")]=str(input())\nD[(\"B\",\"A\")]=str(input())\nD[(\"B\",\"B\")]=str(input())\n\nVal=[{}for i in range(6)]\nVal[0][(\"A\",\"B\")]=1\n\n\nfor i in range(len(Val)):\n    for k,v in Val[i-1].items():\n        K=list(k)\n        #print(K)\n        for j in range(1,len(k)):\n          \n            A=K[0:j]+[D[(K[j-1],K[j])]]+K[j:]\n            #print(tuple(A))\n            Val[i][tuple(A)]=1\n#print(len(Val[-1]))\nmod=10**9+7\nif N<=7:\n    print(len(Val[-1-(7-N)]))\nelse:\n    if len(Val[-1])==1:\n        print(1)\n    elif len(Val[-1])==8:\n        L=[2,3]\n        for i in range(N-5):\n            L.append((L[-1]+L[-2])%mod)\n            \n        print((L[-1]))\n    else:\n        print(pow(2,N-3,mod))", "#!/usr/bin/env python3\nimport sys\nfrom collections import deque, Counter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_right\nfrom itertools import accumulate\n\nsys.setrecursionlimit(10**6)\nINF = 10**12\nm = 10**9 + 7\n\n\ndef main():\n    N = int(input())\n    caa = input()\n    cab = input()\n    cba = input()\n    cbb = input()\n    if N < 4:\n        print((1))\n        return\n    if cab == 'B':\n        if cbb == 'B':\n            print((1))\n        else:\n            if cba == 'A':\n                print((pow(2, N - 3, m)))\n            else:\n                f = [1, 2]\n                for i in range(N - 4):\n                    f.append((f[-1] + f[-2]) % m)\n                print((f[-1]))\n    else:\n        if caa == 'A':\n            print((1))\n        else:\n            if cba == 'B':\n                print((pow(2, N - 3, m)))\n            else:\n                f = [1, 2]\n                for i in range(N - 4):\n                    f.append((f[-1] + f[-2]) % m)\n                print((f[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from itertools import product\nP = 10 ** 9 + 7\nF = [0, 1]\nfor i in range(1010):\n    F.append(sum(F[-2:]) % P)\n# print(\"F =\", F[:20])\nN = int(input())\nAA = input()\nAB = input()\nBA = input()\nBB = input()\nP = 10 ** 9 + 7\ndef calc(aa, ab, ba, bb):\n    if N <= 3: return 1\n    ss = aa + ab + ba + bb\n    if aa == \"A\" and bb == \"B\":\n        return 1\n    if aa == \"A\" and ab == \"A\":\n        return 1\n    if bb == \"B\" and ab == \"B\":\n        return 1\n    if ss == \"ABAA\" or ss == \"BABB\" or ss == \"BABA\" or ss == \"BBAA\":\n        return pow(2, N - 3, P)\n    if ss == \"ABBA\" or ss == \"BAAB\" or ss == \"BAAA\" or ss == \"BBBA\":\n        return F[N-1]\n    return -1\n# for s in product(\"AB\", repeat = 4):\n#     print(s, calc(*s))\n\nprint(calc(AA, AB, BA, BB))"]