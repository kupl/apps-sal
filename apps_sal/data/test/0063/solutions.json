["n,k=map(int,input().split())\nl=list(map(int,input().split()))\npf=[]\nneeded=[]\nfor i in range(2,40000):\n\tif k%i==0:\n\t\tpf.append(i)\n\t\tc=0\n\t\twhile k%i==0:\n\t\t\tk//=i\n\t\t\tc+=1\n\t\tneeded.append(c)\nif k>1:\n\tpf.append(k)\n\tneeded.append(1)\npfl=len(pf)\ncnt=[[0]*n for i in range(pfl)]\nfor i in range(n):\n\tfor j in range(len(pf)):\n\t\tc=0\n\t\twhile l[i]%pf[j]==0:\n\t\t\tc+=1\n\t\t\tl[i]//=pf[j]\n\t\tcnt[j][i]=c\nhave=[sum(i) for i in cnt]\npos=n\ndef ok():\n\tfor i in range(len(pf)):\n\t\tif have[i]<needed[i]:\n\t\t\treturn False\n\treturn True\nif not ok():\n\tprint(0)\n\tquit()\nfor i in range(n-1,0,-1):\n\tfor j in range(len(pf)):\n\t\thave[j]-=cnt[j][i]\n\tif not ok():\n\t\tfor j in range(len(pf)):\n\t\t\thave[j]+=cnt[j][i]\n\t\tbreak\n\tpos=i\nans=n-pos+1\nfor x in range(n-1):\n\tfor j in range(len(pf)):\n\t\thave[j]-=cnt[j][x]\n\tif pos==(x+1):\n\t\tfor j in range(len(pf)):\n\t\t\thave[j]+=cnt[j][pos]\n\t\tpos+=1\n\twhile pos<n:\n\t\tif ok():\n\t\t\tbreak\n\t\telse:\n\t\t\tfor i in range(len(pf)):\n\t\t\t\thave[i]+=cnt[i][pos]\n\t\t\tpos+=1\n\tif ok():\n\t\tans+=n-pos+1\n\telse:\n\t\tbreak\nprint(ans)", "def gcd(a,b):\n  if a == 0:\n    return b\n  return gcd(b%a,a)\n\nn,k = [int(x) for x in input().split()]\na = [gcd(int(x),k) for x in input().split()]\n\nif k == 1:\n  print(((n+1)*(n+2))//2-n-1)\nelse:\n  s = 0\n  e = 0\n  total = ((n+1)*(n+2))//2-1-n\n  #print(total)\n  #extra = {}\n  c = 1\n  \n  while e < n:\n    flag = False\n    while c%k != 0 and e < n:\n      total -= e-s\n      c *= a[e]\n      e += 1\n    while c%k == 0 and s < e:\n      c //= a[s]\n      s += 1\n  total -= e-s\n  print(total)\n", "import sys\n\n\ndef get_primes(n: int):\n    from itertools import chain\n    from array import array\n    primes = {2, 3}\n    is_prime = (array('b', (0, 0, 1, 1, 0, 1, 0)) +\n                array('b', (1, 0, 0, 0, 1, 0))*((n-1)//6))\n\n    for i in chain.from_iterable((list(range(5, n+1, 6)), list(range(7, n+1, 6)))):\n        if is_prime[i]:\n            primes.add(i)\n            for j in range(i*3, n+1, i*2):\n                is_prime[j] = 0\n\n    return is_prime, primes\n\n\nn, k = list(map(int, input().split()))\ncards = list(map(int, input().split()))\n_, primes = get_primes(32000)\n\ndiv, div_cnt = [], []\nfor p in primes:\n    if k % p == 0:\n        div.append(p)\n        div_cnt.append(0)\n        while k % p == 0:\n            div_cnt[-1] += 1\n            k //= p\nif k > 1:\n    div.append(k)\n    div_cnt.append(1)\n\nm = len(div)\nacc = [[0]*m for _ in range(n+1)]\n\nfor i, x in enumerate(cards, start=1):\n    for j in range(m):\n        acc[i][j] += acc[i-1][j]\n        while x % div[j] == 0:\n            acc[i][j] += 1\n            x //= div[j]\n\nans = 0\nj = 0\nfor i in range(n):\n    j = max(j, i+1)\n    while j <= n and any(acc[j][k]-acc[i][k] < div_cnt[k] for k in range(m)):\n        j += 1\n    if j > n:\n        break\n    ans += n - j + 1\n\nprint(ans)\n"]