["read = lambda: map(int, input().split())\ns = input()\nk = int(input())\nif len(s) < k:\n    print('impossible')\nelse:\n    print(max(0, k - len(set(s))))", "3\n\ns = input()\nk = int(input())\nif len(s) < k:\n\tprint('impossible')\nelse:\n\tprint(max(0, k - len(set(s))))", "s = input()\nn = int(input())\nif n > len(s):\n\tprint(\"impossible\")\nelse:\n\twas = [False] * 26\n\tfor i in s:\n\t\twas[ord(i) - ord('a')] = True\n\tdif = 0\n\tfor i in was:\n\t\tif i:\n\t\t\tdif += 1\n\tprint(max(0, n - dif))", "from sys import stdin, stdout\nimport random\n\n\ns = list(stdin.readline().rstrip())\nk = int(stdin.readline().rstrip())\nsLen = len(s)\nsSet = set(s)\ndiffLet = len(sSet)\n\nif k>26 or k>sLen:\n    print('impossible')\nelif k<=diffLet:\n    print(0)\nelse:\n    print(k-diffLet)\n", "from collections import Counter\n\ns = input()\nc = Counter(list(s))\nk = int(input())\n\nif len(c.keys()) >= k:\n\tprint(0)\nelif len(c.keys()) < k <= len(s):\n\tprint(k - len(c.keys()))\nelse:\n\tprint('impossible')", "def sol():\n\ts = input()\n\tk = int(input())\n\tif k > len(s):\n\t\tprint(\"impossible\")\n\telse:\n\t\ts = set(s)\n\t\tprint(max(0, k - len(s)))\n\nsol()", "from collections import defaultdict\n\nls = defaultdict(int)\n\ns = input()\nk = int(input())\n\nif k > len(s):\n    print(\"impossible\")\n    return\n\nfor c in s:\n    ls[c] += 1\n\ndif_ls = 0\nfor (_,v) in list(ls.items()):\n    dif_ls += 1\n\nif dif_ls < k:\n    print(k - dif_ls)\nelse:\n    print(0)\n\n", "s = input()\nk = int(input())\nif len(s) < k:\n    print(\"impossible\")\nelse:\n    print(max(k - len(set([i for i in s])), 0))", "ord_a = ord('a')\nL = 26\n\ns = input()\nk = int(input())\n\nif len(s) < k:\n  print('impossible')\n  return\n\nf = [False]*L\n\nfor c in s:\n  f[ord(c)-ord_a] = True\n\n\nprint(max(k-sum(f),0))", "a = input()\nk = int(input())\nA = {}\nfor i in a:\n    A[i]=1\nif(len(a) < k):\n    print(\"impossible\")\nelse:\n    if k - len(A) > 0:\n        print(k - len(A))\n    else:\n        print(0)\n\n", "s = input()\nk = int(input())\na = []\ncou = 0\nfor i in range(len(s)):\n    if s[i] not in a:\n        a.append(s[i])\n        cou += 1\n\nif k > len(s):\n    print(\"impossible\")\nelse:\n    print(max(k - cou, 0))", "string = \"abcdefghijklmnopqrstuvwxyz\"\n\ns = input()\nn = int(input())\nm_set = set()\nfor i in range(len(s)):\n    m_set.add(s[i])\nif n > len(s):\n    print(\"impossible\")\nelse:\n    print(max(0, n - len(m_set)))", "string = input()\nk = int(input())\n\nif k > len(string):\n\tprint('impossible')\nelse:\n\tdifferent = set(string)\n\tif len(different) >= k:\n\t\tprint(0)\n\telse:\n\t\tprint(k - len(different))", "s = input().strip()\nk = int(input())\nif len(s) < k:\n    print(\"impossible\")\nelse:\n    s_set = set(map(str, list(s)))\n    if len(s_set) >= k:\n        print(0)\n    else:\n        print(k - len(s_set))\n", "s=str(input())\nk=int(input())\nl=[0 for i in range(26)]\na=0\nif k>len(s):\n    print(\"impossible\")\n    return\nfor c in s:\n    if l[ord(c)-97]==0:\n        l[ord(c)-97]=1\n        a+=1\nif a<=k:\n    print(k-a)\nelse:\n    print(0)", "3\n\n\ndef main():\n    data = input()\n    n = int(input())\n\n    if n > len(data):\n        return \"impossible\"\n    \n    uniq = len(set(data))\n    if n <= uniq:\n        return \"0\"\n    else:\n        return n-uniq\n\n\ndef __starting_point(): print(main())\n\n__starting_point()", "s = input()\nn = int(input())\nD = {}\nif n <= len(s):\n    for i in 'abcdefghijklmnopqrstuvwxyz':\n        D[i] = 0\n    for i in s:\n        D[i] += 1\n    ans = 0\n    for i in 'abcdefghijklmnopqrstuvwxyz':\n        if D[i] != 0:\n            ans += 1\n    if n >= ans:\n        print(n - ans)\n    else:\n        print(0)\nelse:\n    print('impossible')\n\n\n", "s, k = input(), int(input())\nss = set(s)\nif len(s) < k:\n    print('impossible')\nelse:\n    print(max(k - len(ss), 0))\n\n", "import sys\na = list(input())\nn = int(input())\nif len(a)<n:\n    print('impossible')\n    return\nb = {}\nc = 0\nfor i in a:\n    if i in list(b.keys()):\n        b[i] += 1\n        c += 1\n    else:\n        b[i] = 1\nif len(list(b.keys()))>= n:\n    print(0)\nelif n-len(list(b.keys()))<= c:\n    print(n-len(list(b.keys())))\nelse:\n    print('impossible')\n", "a = input()\nk = int(input())\nl = [0] * 26\nif len(a) < k or k > 26:\n    print(\"impossible\")\nelse:\n    for i in a:\n        l[ord(i) - ord('a')] = 1\n    if sum(l) >= k:\n        print(0)\n    else:\n        print(k - sum(l))", "s = input()\nn = int(input())\nm_set = set()\nfor i in range(len(s)):\n    m_set.add(s[i])\nif n > len(s):\n    print(\"impossible\")\nelse:\n    print(max(0, n - len(m_set)))", "s = input()\nn = int(input())\nif len(s) < n:\n    print(\"impossible\")\nelse:\n    letters = set()\n    for x in s:\n        letters.add(x)\n    print(max(0, n - len(letters)))", "word = input()\nn = int(input())\n\nns = {}\n\n\nfor c in word:\n    if not c in ns.keys():\n        ns[c] = 1\n    else:\n        ns[c] += 1\n\n# d = max(0, n - len(ns))\n\n# foo = list(filter(lambda i: i > 0, map(lambda x: x-1, ns.values())))\n\nif len(word) >= n:\n    print(max(0, n - len(ns)))\nelse:\n    print(\"impossible\")", "s = input()\nk = int(input())\nflag = 0\nif len(s) < k:\n    print('impossible')\n    flag = 1\nlist1 = set()\nif not flag:\n    for i in range(len(s)):\n        list1.add(s[i])\n    if k - len(list1) < 0:\n        print(0)\n    else:\n        print(k - len(list1))", "def __starting_point():\n\ts = input()\n\tl = len(s)\n\ts = set(list(s))\n\tk = int(input())\n\tif l<k:\n\t\tprint(\"impossible\")\n\telse:\n\t\tif (k-len(s))>0:\n\t\t\tprint(k-len(s))\n\t\telse :\n\t\t\tprint(0)\n\n__starting_point()"]