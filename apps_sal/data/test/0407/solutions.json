["'''input\n3\naa\njj\naa\n'''\n\ndef list_input():\n    return list(map(int,input().split()))\ndef map_input():\n    return map(int,input().split())\ndef map_string():\n    return input().split()\n \nn = int(input())\nd = {}\npos = {}\nfor _ in range(n):\n\ts = list(input())\n\ts = s[::-1]\n\tfor i in range(len(s)):\n\t\ttry:\n\t\t\td[s[i]] += 10**i\n\t\texcept:\n\t\t\td[s[i]] = 10**i\n\t\t\tpos[s[i]] = True\n\t\tif i == len(s)-1:\n\t\t\tpos[s[i]] = False\t\na = []\nb = []\nfor i in d:\n\ta.append(d[i])\n\tif pos[i]:\n\t\tb.append(d[i])\nif len(b):a.remove(max(b))\na.sort(reverse = True)\n# print(a)\nans = 0\nfor i in range(len(a)):\n\tans += (i+1)*a[i]\nprint(ans)\t\t\t\t", "n = int(input())\nmul = [0] * 10\ncan_zero = [True] * 10\n\nfor i in range(n):\n    s = input()\n    for j in range(len(s)):\n        mul[ord(s[j]) - 97] += 10 ** (len(s) - 1 - j)\n    can_zero[ord(s[0]) - 97] = False\n\nmax_zero, max_zero_idx = -1, -1\n\nfor i in range(10):\n    if can_zero[i]:\n        (max_zero, max_zero_idx) = max((max_zero, max_zero_idx), (mul[i], i))\n\nmul[max_zero_idx] = 10 ** 20\n\nmul.sort()\nans = 0\nfor i in range(10): ans += (9 - i) * mul[i]\nprint(ans)\n", "from collections import OrderedDict\n\nnum_list = [n for n in range(0, 10)]\nn = int(input())\nchar_priority_dict = {}\nzero_is_permitted = {}\ninputs = []\nfor c in 'abcdefghij':\n    char_priority_dict[c] = 0\n    zero_is_permitted[c] = True\n\nfor i in range(n):\n    s = input()\n    inputs.append(s)\n    zero_is_permitted[s[0]] = False\n    reversed_s = s[::-1]  # reversed\n    for (j, c) in enumerate(reversed_s):\n        char_priority_dict[c] += 10 ** j\n\nchar_priority_dict = OrderedDict(sorted(char_priority_dict.items(), key=lambda x: x[1], reverse=True))\nchar_num_dict = {}\n\nfor char in char_priority_dict.keys():\n    if 0 in num_list:\n        if zero_is_permitted[char]:\n            char_num_dict[char] = 0\n            num_list.remove(0)\n        else :\n            char_num_dict[char] = num_list[1]\n            num_list.remove(num_list[1])\n    else:\n        char_num_dict[char] = num_list[0]\n        num_list.remove(num_list[0])\n\nkeys = ''.join(list(char_num_dict.keys()))\nvalues = ''.join(list(map(str, char_num_dict.values())))\nrestored_values = []\nfor s in inputs:\n    restored_values.append(int(s.translate(s.maketrans(keys, values))))\n\nprint(sum(restored_values))", "n = int(input())\nprd = []\nadic = {'a':0,'b':1,'c':2,'d':3,'e':4,\n            'f':5,'g':6,'h':7,'i':8,'j':9}\nfst = [0]*10\nfor i in range(n):\n    raw = list(input())\n    fst[adic[raw[0]]]=1\n    for i in range(len(raw)):\n        prd.append([raw[i],10**(len(raw)-i-1)])\ncnt = [0]*10\nfor i in range(len(prd)):\n    k = adic[prd[i][0]]\n    cnt[k]+=prd[i][1]\nprt = []\np = 1\nfor i in range(10):\n    if fst[i]==1:\n        prt.append([i,p])\n        p+=1\n    else:\n        pass\ncob = []\nfor i in range(10):\n    cob.append([i,cnt[i],fst[i]])\nscob = sorted(cob,key = lambda d:d[1],reverse = True)\np = 1\nsum = 0\nt = 0\nfor j in range(10):\n    if scob[j][2]==1:\n        sum += scob[j][1] * p\n        p += 1\n    elif scob[j][2]==0 and t == 0:\n        t+=1\n        pass\n    else:\n        sum+=scob[j][1]*p\n        p+=1\nprint(sum)", "n = int(input())\nresult = 0\nweight = [0 for i in range(10)]\ncanzero = [True for i in range(10)]\nfor _ in range(n):\n    x = list(str(input()))\n    canzero[ord(x[0]) - 97] = False\n    x.reverse()\n    for i in range(len(x)):\n        weight[ord(x[i]) - 97] += pow(10, i)\n# print(canzero)\n# print(weight)\nzero = 10\ncl = weight[:]\nwhile True:\n    candidate = max(cl)\n    i = cl.index(candidate)\n    if canzero[i]:\n        zero = i\n        break\n    else:\n        cl[i] = -1\nweight.remove(weight[zero])\nweight = sorted(weight)\nweight.reverse()\nfor i in range(1, 10):\n    result += i * weight[i - 1]\n# print(cl, zero, weight)\nprint(result)\n", "def sumArr(ax):\n    sm=0\n    for i in range(len(ax)):\n        sm+=(10**i)*ax[i]\n    return sm\n\nn=int(input())\narr={}\nla='abcdefghij'\nfor i in la:\n    arr.update({i:{'m':[0,0,0,0,0,0],'not0':False,'sm':0}})\nwhile (n>0):\n    n-=1\n    x=input()[::-1]\n    L=len(x)\n    for i in range(L):\n        arr[x[i]]['m'][i]+=1\n        if i==L-1:\n            arr[x[i]]['not0']=True\narrF=[]\narrT=[]\nfor i in la:\n    arr[i]['sm']=sumArr(arr[i]['m'])\n    if arr[i]['not0']:\n        arrT.append(arr[i]['sm'])\n    else:\n        arrF.append(arr[i]['sm'])\n\narrF=sorted(arrF)\narrT=sorted(arrT)\narrF=arrF[::-1]\narrT=arrT[::-1]\n\niaT=0\nif len(arrF)>0:\n  iaF=1\n  arrQ=[arrF[0]]\nelse:\n  iaF=0\n  arrQ=[0]\nfor i in range(9):\n    mF,mT=-1,-1\n    if iaT<len(arrT):\n        mT=arrT[iaT]\n    if iaF<len(arrF):\n        mF=arrF[iaF]\n    if mF>=mT:\n        arrQ.append(mF)\n        iaF+=1\n    else:\n        arrQ.append(mT)\n        iaT+=1\nsm=0\n\nfor i in range(len(arrQ)):\n    sm+=arrQ[i]*i\nprint(sm)\n\n", "d = {}\nnon_zeroes = []\nletters = list('abcdefghij')\n\nfor letter in letters:\n    d[letter] = 0\n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    j = 1\n    for letter in s:\n        if j == 1 and letter not in non_zeroes:\n            non_zeroes.append(letter)\n        d[letter] += 10**(len(s) - j)\n        j += 1\n\nmax = 0\nzero = ''\n\nfor letter in d.keys():\n    if d[letter] > max and letter not in non_zeroes:\n        zero = letter\n        max = d[letter]\n\nif zero in d.keys():\n    d.pop(zero)\n\nsum = 0\nnum = 1\n\nfor item in sorted(d.items(), key=lambda x: -x[1]):\n    sum += num * item[1]\n    num += 1\n\nprint(sum)", "b=['a','b','c','d','e','f','g','h','i','j']\nl=[0]*10\nz=[]\nn=int(input())\nfor i in range(n):\n    s=input()\n    z.append(s[0])\n    for j in range(len(s)):\n        l[b.index(s[j])]+=10**(len(s)-j-1)\ns=0\nh=0\nj=1\nfor k in range(10):\n    ma=0\n    for i in range(10):\n        if l[i]>ma:\n            ma=l[i]\n    bi=b[l.index(ma)]\n    l[l.index(ma)]=0\n    if not(bi in z) and h==0:\n        h=1\n    else:\n        s+=ma*j\n        j+=1  \nprint(s)", "n = int(input())\nlin = 'abcdefghij'\nwei = [[0,False] for i in range(10)]\nweig = [i for i in range(10)]\ninp = []\nfor i in range(n):\n    inp.append(input())\ninp.sort(key = len)\nn = len(inp[-1])\nfor i in inp:\n    m = len(i)\n    wei[lin.index(i[0])][1] = True\n    for j in range(m):\n        wei[lin.index(i[j])][0] += 10**(m - j - 1)\nwei.sort(reverse = True)\nans = 0\nfor i in wei:\n    if i[1] and weig[0] == 0:\n        ans += i[0] * weig[1]\n        weig.remove(weig[1])\n    else:\n        ans += i[0] * weig[0]\n        weig.remove(weig[0])\nprint(ans)\n\n    \n        \n    \n", "# Minimum Sum\nfrom collections import defaultdict\n\nn = int(input())\nnums = []\ndigits = defaultdict(int)\nheads = set()\nfor i in range(n):\n    nums.append(input())\n    w = 1\n    heads.add(nums[-1][0])\n    for c in range(len(nums[-1]), 0, -1):\n        digits[nums[-1][c - 1]] += w\n        w *= 10\n\nmatching_digits = {}\nresult = sorted(list(digits.items()), key=lambda i: i[1])\n\nmatching_digits[result[-1][0]] = 1\n\nfor i in range(len(result) - 1, 0, -1):\n    if result[i - 1][0] not in heads:\n        matching_digits[result[i - 1][0]] = 0\n        break\n\nv = 2\nfor i in range(len(result) - 1, 0, -1):\n    if not result[i - 1][0] in matching_digits:\n        matching_digits[result[i - 1][0]] = v\n        v += 1\n\nsum = 0\nfor num in nums:\n    sum += int(''.join(str(matching_digits[c]) for c in num))\n\nprint(sum)\n", "#! /usr/bin/env python3\n#------------------------------------------------\n# Author:    krishna\n# Created:   Sun Dec 24 17:45:40 IST 2017\n# File Name: 910c.py\n# USAGE:\n#       910c.py\n# Description:\n# \n#------------------------------------------------\nimport sys, operator\n\n\ndata = []\n\nc = int(sys.stdin.readline().rstrip())\nfor i in range(c):\n    data.append(sys.stdin.readline().rstrip())\n\nmaxLen = max(len(line) for line in data)\ncantTakeZero = [line[0] for line in data]\n\nfor i in range(len(data)):\n    data[i] = ('0' * (maxLen - len(data[i]))) + data[i]\n\ncount = {chr(i):0 for i in range(ord('a'), ord('k'))}\n\nfor i in range(maxLen):\n    for line in data:\n        if (line[i] == '0'):\n            continue\n\n        count[line[i]] += 1\n\n    count = {k: v * 10 for (k,v) in list(count.items())}\n\ncount = {k: int(v / 10) for (k,v) in list(count.items())}\n\ncode = {}\ncounter = 1\nzeroUsed = 0\n\n# For given column, fix the values\nfor k in (sorted(list(count.items()), key=operator.itemgetter(1), reverse=True)):\n    if (k[0] in code):\n        continue\n\n    if (zeroUsed == 0) and ((k[0] in cantTakeZero) == False):\n        code[k[0]] = 0\n        zeroUsed = 1\n    else:\n        code[k[0]] = counter\n        counter += 1\n\ns = 0\nfor i in range(maxLen):\n    for line in data:\n        if (line[i] != '0'):\n            s += code[line[i]]\n\n    s *= 10\n\n# print(sorted(code.items()))\nprint(int(s / 10))\n", "n=int(input())\nL=[]\nStartswith=[]\nfor i in range(n):\n    L.append(input())\n    Startswith.append(L[i][0])\n\nCases=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ncoeff=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n\nfor i in L :\n    n=len(i)\n    for j in range(n):\n        coeff[Cases.index(i[j])]+=10**(n-j-1)\n\ncof=list(coeff)\nt=False\nk=0\nwhile((len(cof)!=0) and (t==False)):\n    m=max(cof)\n    p=cof.index(m)\n    if ( Cases[p]  in Startswith ) :\n        cof[p]=-1\n        \n    else :\n        \n        t=True\n        coeff[p]=-1\n        Cases[p]=0\n\nc=max(coeff)\nj=1\nwhile (len(coeff)!=0 and(c!=-1)):\n    c1=coeff.index(c)\n    coeff[c1]=-1\n    Cases[c1]=j\n    j+=1\n    c=max(coeff)\n\n\ndef convert(ch,Cases):\n    n=len(ch)\n    s=0\n    for i in range(n):\n        s+=(10**(n-i-1))*Cases[ord(ch[i])-97]\n    return(s)\n\nL=[convert(i,Cases) for i in L ]\nprint(sum(L))\n                             \n", "n=int(input())\nlist1=[0]*10\nlist2=[]\nlist4=[]\nfor i in range(0,n,1):\n    x=input()\n    m=len(x)\n    list2.append(x[0])\n    for i in range(0,m,1):\n        list1[ord(x[i])-97]+=10**(m-i-1)\nfor i in range(0,10,1):\n    list3=[list1[i],chr(i+97)]\n    list4.append(list3)\nset2=set(list2)\nlist4.sort(reverse=True)\nlist5=[0,1,2,3,4,5,6,7,8,9]\nh=0\nfor i in range(0,10,1):\n    if 0 in list5:\n        if list4[i][1] not in set2:\n            h=h+list4[i][0]*list5[0]\n            del list5[0]\n        else:\n            h=h+list4[i][0]*list5[1]\n            del list5[1]\n    else:\n            h=h+list4[i][0]*list5[0]\n            del list5[0]        \nprint(h)\n", "ch = ['a','b','c','d','e','f','g','h','i','j']\na = [0]*10 #array to store total decimal value of each element index wise\ninitial=[] #stores initials of each string\nn=int(input())\nfor i in range(n):\n    s=input()\n    initial.append(s[0])\n    for j in range(len(s)):\n        a[ch.index(s[j])]+=10**(len(s)-j-1)\nsum=0 #final sum\nflag=False #turns true after we have assigned zero\ncount=1 #digits we assign to each character\nfor k in range(10):\n    maxFreq=0 #stores max value of an char from a array\n    for l in range(10): #finds max value from a and assigns it to maxFreq var\n        if maxFreq<a[l]:\n            maxFreq=a[l]\n\n    temp=a.index(maxFreq)\n    currChar=ch[temp]\n    a[temp]=0\n    if currChar not in initial and not flag:\n        flag = True #we have assigned this currChar 0 and now we switch flag\n    else:\n        sum+=maxFreq*count\n        count+=1 #1 has been assigned now we assign 2 and so on...\nprint(sum)\n\n\n\n", "num=[]\n\nfor i in range(10):\n    num.append([])\n    num[i].append(1)\n    num[i].append(0)\n\nn=int(input())\nfor kk in range(n):\n    s=input()\n    num[ord(s[0])-97][0]=0\n    for i in range(len(s)):\n        num[ord(s[i])-97][1]+=pow(10,len(s)-i-1)\n\nnum=sorted(num,key=lambda s:s[1],reverse=True)\n\nboo=True\nans=0\nnow=1\n\nfor i in range(10):\n    if boo and num[i][0]==1:\n        ans+=0\n        boo=False\n    else:\n        ans+=num[i][1]*now\n        now+=1\n\nprint(ans)\n", "from collections import defaultdict\n\nn = int(input())\n\nis_first = []\nd = defaultdict(int)\nans = 0\n\nfor _ in range(n):\n    s = input()\n    slen = len(s)\n    for i in range(slen):\n        t = s[i]\n        if i == 0:\n            if t not in is_first:\n                is_first.append(t)\n        num = 10 ** (slen - i - 1)\n        d[t] += num\n\n\nl = sorted(list(d.items()), key=lambda v: v[1], reverse=True)\n\nfor i,x in enumerate(l):\n    if x[0] not in is_first:\n        l.pop(i)\n        break\n\nfor i,x in enumerate(l):\n    ans += x[1] * (i+1)\n\nprint(ans)\n\n\n", "import string\n\nn = int(input())\n\nL = [0]*10\nleaded = [False]*10\n\nfor i in range(n):\n    word = input()\n    for i in range(len(word)):\n        char = word[-(i+1)]\n        L[ord(char) - ord('a')] += 10**i\n    leaded[ord(word[0]) - ord('a')] = True\n\n\ntotal = 0\nindex = 1\nzeroed = False\nwhile sum(L) > 0:\n    t = max(L)\n    place = L.index(t)\n    if leaded[place] == False and not zeroed:\n        zeroed = True\n    else:\n        total += index*t\n        index += 1\n\n    L[place] = 0\n\nprint(total)\n", "mat=[]\nfor i in range(10):\n    l=[0 for i in range(10)]\n    mat.append(l)\n    l=[]\nverif=[True for i in range(10)]\nfind=[False for i in range(10)]\ns=[]\nn=int(input())\nfor i in range(n):\n    p=input()\n    for j in range(len(p)):\n        g=6-len(p)\n        mat[ord(p[j])-97][g+j]+=1\n        find[ord(p[j])-97]=True\n    verif[ord(p[0])-97]=False\nfor i  in range(10):\n    if(find[i]==True):\n        u=0\n        for j in range(6):\n            u=u+mat[i][j]*(10**(5-j))\n        s.append((u,i,verif[i]))\ns=sorted(s)\ns=s[::-1]\npos=0\nfor i in range(len(s)):\n    if(verif[s[i][1]]==True):\n        pos=i\n        break\nsomme=0\nk=1\nr=True\nfor i in range(len(s)):\n    if((s[i][2]==True)and(r==True)):\n        r=False\n    else:\n        somme=somme+k*s[i][0]\n        k=k+1\nprint(somme)", "b=['a','b','c','d','e','f','g','h','i','j']\nl=[0]*10\nz=set()\nn=int(input())\nfor i in range(n):\n    s=input()\n    z.add(s[0])\n    for j in range(len(s)):\n        l[b.index(s[j])]+=10**(len(s)-j-1)\ns=0\nh=0\nj=1\nnotfirst=set(b)-z\nfor k in range(10):\n    ma=0\n    value=0\n    for i in range(10):\n        if l[i]>ma:\n            ma=l[i]\n            value=i\n    if(b[value] in z) or h==1:\n        s+=ma*j\n        j+=1 \n    else:\n        h=1\n    l[value]=0\nprint(s)", "import math\nimport operator\nnum = int(input())\ntotal = 0\nstore = {}\nnonzero = []\n_max = 0\nfor i in range(num):\n    _in = input()\n    if _max < len(_in):\n    \t_max = len(_in)\n    if _in[0] not in nonzero:\n    \tnonzero.append(_in[0])\n    for j in range(len(_in)-1,-1,-1):\n    \tif _in[j] in store:\n    \t\tstore[_in[j]] += pow(10,len(_in)-j-1)\n    \telse:\n    \t\tstore[_in[j]] = pow(10,len(_in)-j-1)\nx = store\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n\nused = False\ncur = 1\nfor i in range(len(sorted_x)-1,-1,-1):\n\tif sorted_x[i][0] not in nonzero and used == False:\n\t\tused = True\n\telse:\n\t\ttotal += sorted_x[i][1] * cur\n\t\tcur += 1\nprint(total)", "m = {}\nf = {}\nfor c in \"abcdefghij\": \n\tm[c] = f[c] = 0\n\nn = int(input())\nfor _ in range(n):\n\ts = input()\n\tl = len(s)\n\tf[ s[0] ] = 1\n\tfor i, c in enumerate(s):\n\t\tm[c] += 10**(l-1-i)\n\nans = 0\nd = 1\nz = 1\nfor c, k in sorted(m.items(), key=lambda x: x[1], reverse=True):\n\tif z and not f[c]:\n\t\tz = 0\n\telse:\n\t\tans += d * k\n\t\td += 1\n\nprint(ans)\t", "d={}\nf={}\np={}\nn= int(input())\nfor i in range(n):\n    l=input()\n    f[l[0]]=1\n    t=0\n    for x in range(len(l)-1,-1,-1):\n        if l[x] in d:\n            d[l[x]]+=10**t\n        else:\n            d[l[x]]=10**t\n        t+=1\ny=list(d.items())\nl=y[:]\ny.sort(reverse=True,key=lambda x :x[1])\nfor (a,b) in y:\n    if a not in f:\n        p[a]='0'\n        y.remove((a,b))\n        break\nt='123456789'\nq=0\nfor (a,b) in y:\n    p[a]=t[q]\n    q+=1\ndef f(m):\n    return p[m]\nqa=[]\nfor (a,b) in l:\n    w=int(f(a))*b\n    qa.append(w)\nprint(sum(qa))", "alphabets=['a','b','c','d','e','f','g','h','i','j']\nmapping=[0]*10\nn=int(input())\nfirstLetter=[]\nfor i in range(n):\n\ts=input()\n\tfirstLetter.append(s[0])\n\tfor j in range(len(s)):\n\t\tmapping[alphabets.index(s[j])]+=10**(len(s)-j-1)\nflow=1\ncatchZero=0\nans=0\nfor i in range(10):\n\tsaikyu=0\n\tfor j in range(10):\n\t\tif saikyu<mapping[j]:\n\t\t\tsaikyu=mapping[j]\n\tif alphabets[mapping.index(saikyu)] not in firstLetter and catchZero==0:\n\t\tcatchZero=1\n\telse:\n\t\tans+=saikyu*flow\n\t\tflow+=1\n\tmapping[mapping.index(saikyu)]=0\nprint(ans)", "from pip._vendor.distlib.compat import raw_input\nn = int(input())\nnuly = [0]*10\ncisla = [0]*10\nfor i in range(10):\n    cisla[i] = [0,0]\nprirazeni = [0]*10\nje_nula_prirazena = False\nfor i in range(n):\n    vstup = raw_input()\n    cisla[ord(vstup[0])-97][1] = -1\n    for j in range(len(vstup)):\n        cisla[ord(vstup[j])-97][0]+= 10**(len(vstup)-j-1)\ncisla.sort(reverse=True)\nminimum = 1\n\nfor i in range(10):\n    if je_nula_prirazena == False:\n        if cisla[i][1] == 0:\n            prirazeni[i] = 0\n            je_nula_prirazena = True\n            continue\n    prirazeni[i] = minimum\n    minimum+=1\nprint(sum(prirazeni[i]*cisla[i][0] for i in range(10)))", "n=int(input())\ncounts={'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0}\ncan_be_zeros={'a':True,'b':True,'c':True,'d':True,'e':True,'f':True,'g':True,'h':True,'i':True,'j':True}\nfor i in range(n):\n\tline=input()\n\tlen_line=len(line)\n\tif len_line>=1:\n\t\tcan_be_zeros[line[0]]=False\n\tfor j in range(len_line):\n\t\tcounts[line[j]]+=10**(len_line-j-1)\n\nsorted_counts=sorted(counts,key=counts.get)[::-1]\nfor i in range(10):\n\tcur=sorted_counts[i]\n\tif counts[cur]>0 and can_be_zeros[cur]:\n\t\tcounts[cur]=0\n\t\tbreak\nresult=0\nfactor=1\nfor i in range(10):\n\tcur=sorted_counts[i]\n\tif counts[cur]>0:\n\t\tresult+=counts[cur]*factor\n\t\tfactor+=1\nprint(result)"]