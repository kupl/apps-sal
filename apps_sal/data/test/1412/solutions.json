["from heapq import heappop, heappush\n\nn, k = [int(x) for x in input().split()]\ncs = []\nfor i in range(n):\n    l, r = [int(x) for x in input().split()]\n    cs.append((l, r, i+1))\ncs.sort()\nh = []\nlcs = set()\nfor i in range(k-1):\n    heappush(h, [cs[i][1], cs[i][2]])\n    lcs.add(cs[i][2])\nl = -1\npoped = []\npush_i = k-1\nfor i in range(k-1, n):\n    heappush(h, [cs[i][1], cs[i][2]])\n    d = h[0][0] - cs[i][0]\n    if d > l:\n        l = d\n        for j in range(push_i, i+1):\n            lcs.add(cs[j][2])\n        for e in poped:\n            lcs.remove(e)\n        push_i = i+1\n        poped = []\n    poped.append(heappop(h)[1])\n\nprint(l+1)\nif l == -1:\n    for i in range(1, k+1):\n        print(i, end=' ')\n\nelse:\n    for i in lcs:\n        print(i, end=' ')\n\n", "from heapq import heappop, heappush\n\nn, k = [int(x) for x in input().split()]\ncs = []\nfor i in range(n):\n    l, r = [int(x) for x in input().split()]\n    cs.append((l, r, i+1))\ncs.sort()\nh = []\n\nfor i in range(k-1):\n    heappush(h, [cs[i][1], cs[i][2]])\nlcs = h[:]\nl = -1\npush_i = k-1\nfor i in range(k-1, n):\n    heappush(h, [cs[i][1], cs[i][2]])\n    d = h[0][0] - cs[i][0]\n    if d > l:\n        l = d\n        if push_i != k-1:\n            heappop(lcs)\n        for j in range(push_i, i):\n            heappush(lcs, [cs[j][1], cs[j][2]])\n            heappop(lcs)\n        heappush(lcs, [cs[i][1], cs[i][2]])\n        push_i = i+1\n    heappop(h)\n\nprint(l+1)\nif l == -1:\n    for i in range(1, k+1):\n        print(i, end=' ')\n\nelse:\n    for r, i in lcs:\n        print(i, end=' ')\n\n"]