["#!/usr/bin/env python3\n\ndef ri():\n    return list(map(int, input().split()))\n\nm = 10**9+7\ns = input()\nn = len(s)\no = [0 for i in range(len(s))]\nc = [0 for i in range(len(s))]\nfac = [0 for i in range(n)]\n\nfac[0] = 1\nfor i in range(1,n):\n    fac[i] = fac[i-1]*i%m\n\ninvfac = [pow(fac[i], m-2, m) for i in range(n)]\nif s[0] == '(':\n    o[0] = 1\nfor i in range(1,n):\n    if s[i] == '(':\n        o[i] = o[i-1] + 1\n    else:\n        o[i] = o[i-1]\n\nif s[n-1] == ')':\n    c[n-1] = 1\nfor i in range(n-2, -1, -1):\n    if s[i] == ')':\n        c[i] = c[i+1] + 1\n    else:\n        c[i] = c[i+1]\n\nans = 0\nfor i in range(n):\n    if s[i] == '(':\n        a = o[i]\n        b = c[i]\n        if a != 0 and b != 0:\n            ans += fac[a+b-1]*invfac[a]*invfac[b-1]\n            ans %= m\n\nprint(ans)\n\n", "mod = 10 ** 9 + 7\n\nfact, inv, invfact = [1, 1], [0, 1], [1, 1]\nfor i in range(2, 200200):\n    fact.append(fact[-1] * i % mod)\n    inv.append(inv[mod % i] * (mod - mod // i) % mod)\n    invfact.append(invfact[-1] * inv[-1] % mod)\n\ndef C(n, k):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * invfact[k] * invfact[n - k] % mod\n\ns = input()\nop, cl = 0, s.count(')')\nans = 0\nfor x in s:\n    if x == '(':\n        op += 1\n        cur = C(cl + op - 1, op)\n        ans += cur\n    else:\n        cl -= 1\n\nprint(ans % mod)\n", "mod = 10 ** 9 + 7\n\nF, inv, iF = [1,1], [0, 1], [1, 1]\n\nfor i in range(2, 200005):\n    F.append(F[-1] * i % mod)\n    inv.append(inv[mod%i] * (mod - mod // i) % mod)\n    iF.append(iF[-1] * inv[-1] % mod)\n\ndef C(n, k):\n    if k < 0 or k > n:\n        return  0\n    return  F[n] * iF[k] *  iF[n - k]\n\ns = input()\nopen, close = 0, s.count(')')\n\nans = 0\n\nfor c in s:\n    if c == '(':\n        open += 1\n        ans += C(close + open - 1, open)\n    else:\n        close -= 1\n\nprint(ans % mod)", "t = input()\nn, m = len(t) + 1, 1000000007\na, b = 0, t.count(')') - 1\nf = [1] * n\nfor i in range(2, n): f[i] = i * f[i - 1] % m\ng = [pow(q, m - 2, m) for q in f]\ns = 0\nfor q in t:\n    if b < 0: break\n    if q == '(':\n        a += 1\n        s += f[a + b] * g[a] * g[b]\n    else: b -= 1\nprint(s % m)", "mod = 10 ** 9 + 7\n\ns = input()\nn = len(s)\n\nf = [1] * (n + 1)\nfor i in range(1, n + 1): f[i] = i * f[i - 1] % mod\nfinv = [pow(x, mod - 2, mod) for x in f]\n\nop = 0\ncl = s.count(')')\nans = 0\nif cl > 0:\n  for c in s:\n    if c == '(':\n      op += 1\n      ans += f[op + cl - 1] * finv[cl - 1] * finv[op]\n    elif cl <= 1:\n      break\n    else:\n      cl -= 1\nprint(ans % mod)\n", "mod = 10 ** 9 + 7\n\ns = input()\nn = len(s)\n\nf = [1] * (n + 1)\nfor i in range(1, n + 1): f[i] = i * f[i - 1] % mod\nfinv = [pow(x, mod - 2, mod) for x in f]\n\nop = 0\ncl = s.count(')')\nans = 0\nif cl > 0:\n  for c in s:\n    if c == '(':\n      op += 1\n      ans += f[op + cl - 1] * finv[cl - 1] * finv[op]\n    elif cl <= 1:\n      break\n    else:\n      cl -= 1\nprint(ans % mod)\n\n#bruno\n", "s = input()\nMOD = 10 ** 9 + 7\nnum = 0\nN = len(s)\nR = [0] * (N + 1)\nL = [0] * (N + 1)\nd = []\nfor i in range(N):\n    if s[i] == ')':\n        R[i + 1] = 1\n    else:\n        L[i + 1] = 1\n        d.append(i)\n\nfor i in range(1, N + 1):\n    R[i] += R[i - 1]\n    L[i] += L[i - 1]\n\n\nM = 200005\nfact = [0] * M\nfact[0] = 1\nfor i in range(1, M):\n    fact[i] = fact[i - 1] * i\n    fact[i] %= MOD\n\nrfact = [0] * M\nrfact[M - 1] = pow(fact[M - 1], MOD - 2, MOD)\nfor i in range(M - 2, -1, -1):\n    rfact[i] = rfact[i + 1] * (i + 1)\n    rfact[i] %= MOD\n\n\ndef comb(n, k):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * rfact[n - k] * rfact[k] % MOD\n\n\nfor i in d:\n    if s[i] == '(':\n        l = L[i + 1] - 1\n        r = R[N] - R[i + 1]\n        num += comb(l + r, l + 1)\n        num %= MOD\n\nprint(num)\n", "mod = 10 ** 9 + 7\nmaxn = 200001\n\ndef C(n, k):\n    if k < 0 or k > n:\n        return 0\n    return fact[n] * invfact[k] * invfact[n - k] % mod\n \nfact = [1, 1]\ninv = [0, 1]\ninvfact = [1, 1]\n\nfor i in range(2, maxn):\n    fact.append(fact[-1] * i % mod)\n    inv.append(inv[mod % i] * (mod - mod // i) % mod)\n    invfact.append(invfact[-1] * inv[-1] % mod)\n\ns = input()\nop = 0 \ncl = s.count(')')\nans = 0\nfor x in s:\n    if x == '(':\n        op += 1\n        cur = C(cl + op - 1, op) % mod\n        ans += cur % mod\n    else:\n        cl -= 1\n \nprint(ans % mod)"]