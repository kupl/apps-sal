["line = input().split()\nn = int(line[0])\nm = int(line[1])\n\nlst = [input()]\nsml = []\nfor i in range(n - 1):\n    lst.append(input())\n    sml.append(False)\n\nans = 0\nfor i in range(m):\n    flag = True\n    for j in range(n - 1):\n        flag = flag and ((lst[j][i] <= lst[j + 1][i]) or sml[j])\n    if flag:\n        for j in range(n - 1):\n            if lst[j][i] < lst[j + 1][i]:\n                sml[j] = True\n    else:\n        ans += 1\n\nprint(str(ans))\n", "def main():\n    n, m = list(map(int, input().split()))\n    l = [input() for _ in range(n)]\n    lead = [[] for _ in range(n)]\n    x = 0\n    for nn in zip(*l):\n        for l, c in zip(lead, nn):\n            l.append(c)\n        if tuple(l[-1] for l in sorted(lead)) != nn:\n            x += 1\n            for l in lead:\n                del l[-1]\n    print(x)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def kkr():\n    n, m= [int(i) for i in input().split()]\n    a= []\n    for i in range(n):\n        a.append([i for i in input()])\n    ans= 0\n    \n    for i in range(m):\n        for j in range(n-1):\n            if a[j][:i+1]> a[j+1][:i+1]:\n                for k in range(n):\n                    a[k][i]= \"z\"\n                ans+= 1\n                break\n    \n    print(ans)\n\nkkr()\n        \n", "line = input().split()\nn = int(line[0])\nm = int(line[1])\ndata = []\nfor i in range(n):\n    data.append(input())\n    \nx = [1 for i in range(n)]\ndelete = 0\nfor i in range(m):\n    dum = [1 for j in range(n)]\n    status = 1\n    for j in range(1,n):\n        if data[j][i] > data[j-1][i]:\n            dum[j] = 0\n        elif data[j][i] == data[j-1][i]:\n            dum[j] = 1\n        else:\n            if x[j] == 1:\n                delete += 1\n                status = 0\n                break\n    if status == 1:\n        for j in range(len(dum)):\n            if dum[j] == 0:\n                x[j] = 0\nprint(delete)\n", "from copy import deepcopy\n\nn, m = list(map(int, input().split()))\nwords = [input() for _ in range(n)]\n\ni = 1\nans = 0\nwhile True:\n    if i > len(words[0]): break\n    for j in range(n-1):\n        if words[j][:i] > words[j+1][:i]:\n            ans += 1\n            words = [x[:(i-1)]+x[i:] for x in words]\n            i -= 1\n            break\n    i += 1\n\nprint(ans)\n        \n", "def sortedx(lst):\n    copy = lst[:]\n    copy.sort()\n    if copy == lst:\n        return True\n    return False\n\na, b = list(map(int, input().split(' ')))\nwords = [input() for i in range(a)]\neach = ['' for i in range(a)]\n\nfor j in range(b):\n    if sortedx([each[i] + words[i][j] for i in range(a)]):\n        for ix in range(a):\n            each[ix] = each[ix] + words[ix][j]\n            \n\nprint(b - len(each[0]))\n", "\n\n### NOT FINISHED\n# I really need to make it go from line to line:\n# first, the first 2 lines should be corrected\n# then, the third, and so on.\n\ndef issorted(l):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\ndef mainX(n,m,t):\n    ans = 0\n    while not issorted(t):\n        remove = -1\n        for i in range(len(t) - 1):\n            if t[i] > t[i+1]:\n                for j in range(len(t[i])):\n                    if t[i][j] != t[i+1][j]:\n                        remove = j\n                        break\n            if remove != -1:\n                print(i,remove)\n                break\n        t = [_t[:remove] + _t[remove+1:] for _t in t]\n        ans += 1\n    print(ans)\n\ndef is_good(s):\n    return all(s[i] <= s[i+1] for i in range(len(s)-1))\ndef line_is_good(a,j):\n    return all(a[i][j] <= a[i+1][j] for i in range(len(a)-1))\ndef main5(n,m,a):\n    if n <= 1 or m<=0 or is_good(a):\n        print(0)\n        return\n    bad = []\n    for i in range(0,m):\n        if line_is_good(a,i):\n            continue\n        #if bad == []: bad.append(i)\n        s = [\"\".join([k for b,k in enumerate(x) if b not in bad]) for x in a]\n        print(i,bad)\n        if is_good(s):\n            print(len(bad))\n            return\n        else:\n            bad.append(i)\n    print(m)\ndef main6(n,m,a):\n    if n <= 1 or m<=0 or is_good(a):\n        print(0)\n        return\n    bad = []\n    good = list(range(m))\n    ans = 0\n    while not is_good(a):\n        remove = -1\n\n    return\n    for i in range(0,m):\n        if line_is_good(a,i):\n            continue\n        bad.append(i)\n        #print(i)\n        s = [\"\".join([k for b,k in enumerate(x) if b not in bad]) for x in a]\n        if is_good(s):\n            print(len(bad))\n            return\n    print(m)\n\ndef main(n,m,a):\n    if n <= 1 or m<=0 or is_good(a):\n        print(0)\n        return\n    bad = []\n    ans = 0\n    while not is_good(a):\n        remove = -1\n        for i in range(n-1):\n            if a[i] > a[i+1]:\n                for j in range(len(a[i])):\n                    if a[i][j] > a[i+1][j]:\n                        remove = j\n                        break\n            if remove != -1:\n                break\n        a = [x[:remove] + x[remove+1:] for x in a]\n        ans += 1\n    print(ans)\n\ndef main_input():\n    n,m = [int(i) for i in input().split()]\n    a = [input() for s in range(n)]\n    main(n,m,a)\n\ndef __starting_point():\n    main_input()\n\n__starting_point()", "#!/usr/bin/env python3\n\nn, m = list(map(int, input().split()))\nwords = [input() for _ in range(n)]\n\ni = 1\nans = 0\nwhile True:\n    if i > len(words[0]): break\n    for j in range(n-1):\n        if words[j][:i] > words[j+1][:i]:\n            ans += 1\n            words = [x[:(i-1)]+x[i:] for x in words]\n            i -= 1\n            break\n    i += 1\n\nprint(ans)\n", "#!/usr/bin/env python\n#def input(f=open('in3')): return f.readline().rstrip()\n\nn, m = list(map(int, input().split()))\ntxt = [ input() for _ in range(n) ]\nsol = 0\n\npof = list(range(n-1))\nfor i in range(m):\n\n    cli = [ rw[i] for rw in txt ]\n    of = [x for (x,y) in zip(pof, [i+1 for i in pof])\n            if cli[x] > cli[y]]\n    if (len(of) > 0):\n        sol += 1\n        continue\n\n    nf = [x for (x,y) in zip(pof, [i+1 for i in pof])\n            if cli[x] < cli[y]]\n    pof = [t for t in pof\n             if t not in nf]\n\nprint(sol)\n", "v=list((input().split()))\nn=int(v[0])\nm=int(v[1])\nv=list()\nfor i in range(n):\n    v.append(input())\nif n==1:\n    print(0)\n    return\nkll=0\nj=0\nbrk=0\nwhile j<m:\n    for i in range (1,n):\n        if v[i][:j+1]<v[i-1][:j+1]:\n            brk=1\n            break\n    if brk:\n        for i in range(n):\n            tmp=list(v[i])\n            tmp.pop(j)\n            v[i]=\"\".join(tmp)\n        kll+=1\n        m-=1\n    else:\n        j+=1\n    brk=0\nprint(kll)", "__author__ = 'trunghieu11 - vuondenthanhcong11@gmail.com'\n\n# ---------- My Tools -------------\n\n# ------ Input output tools -------\ndef read_int(): return int(input())\ndef read_ints(): return map(int, input().split())\ndef read_list_int(): return list(map(int, input().split()))\ndef read_strings(row_count):\n    answer = []\n    for i in range(0, row_count): answer.append(input())\n    return answer\n\n\n# ---------- Actual Code ----------\n\nrow_count, column_count = read_ints()\ntable = read_strings(row_count)\n\nsave = set()\nanswer = 0\n\nfor j in range(0, column_count):\n    isOk = True\n    for i in range(1, row_count):\n        if table[i][j] < table[i - 1][j] and ((i - 1) << 15 | i) not in save:\n            isOk = False\n            answer += 1\n            break\n    if isOk:\n        for i in range(1, row_count):\n            if table[i][j] > table[i - 1][j]:\n                save.add(((i - 1) << 15 | i))\n\nprint(answer)", "import sys\nn, m = [int(i) for i in input().split()]\na = [[0] * n for i in range(m)]\nfor i in range(n):\n    temp = input()\n    for j in range(m):\n        a[j][i] = temp[j]\n\nc = 0\n\ndef blatant(a):\n    for i in range(1,len(a)):\n        if a[i] < a[i-1]:\n            return True\n    return False\n\nmatch = []\nwhile True:\n    if len(a) == 0:\n        print(m)\n        return\n    elif blatant(a[0]):\n        del a[0]\n        c += 1\n    else:\n        break\n\nfor i in range(1,n):\n    if a[0][i] == a[0][i-1]:\n        match.append(i)\n        \ndef rm(a,match):\n    c = 0\n    for m in match:\n        i = 1\n        while i < len(a):\n            if a[i][m] < a[i][m-1]:\n                del a[i]\n                c += 1\n            elif a[i][m] == a[i][m-1]:\n                i += 1\n            else:\n                break\n    return c\n\nwhile True:\n    temp = rm(a,match)\n    if temp == 0:\n        break\n    c += temp\n    \nprint(c)\n", "n, m = map(int, input().split())\nt = [input() for i in range(n)]\np = [''] * n\ns = r = 0\nfor k in range(m):\n    b = p[0] + t[0][k]\n    for j in range(1, n):\n        a, b = b, p[j] + t[j][k]\n        if a > b:\n            s += 1\n            break\n    if r < s: r = s\n    else:\n        for j in range(n): p[j] += t[j][k]\nprint(s)", "def input_split(f): return list(map(f, input().split()))\n\n\ndef main():\n    n, m = input_split(int)\n    lst = [input()]\n    sml = []\n    for i in range(n - 1):\n        lst.append(input())\n        sml.append(False)\n\n    ans = 0\n    for i in range(m):\n        flag = True\n        for j in range(n - 1):\n            flag = flag and ((lst[j][i] <= lst[j + 1][i]) or sml[j])\n        if flag:\n            for j in range(n - 1):\n                if lst[j][i] < lst[j + 1][i]:\n                    sml[j] = True\n        else:\n            ans += 1\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "R = input\nn, m = map(int, R().split())\nN = range(n)\nv = zip(*map(list, [R() for _ in N]))\ng = [0]*n\ns = 0\nfor r in v:\n    if sum(g[i] or r[i]>=r[i-1] for i in N[1:])<n-1:\n        s+=1\n    else:\n        for i in N[1:]:g[i]|=r[i]>r[i-1]\nprint(s)", "def remove(p, a):\n\tfor i in range(len(a)):\n\t\ta[i] = a[i][: p] + a[i][p + 1: ]\n\nn, m = [int(x) for x in input().split()]\na = []\nfor i in range(n):\n\ta.append(input())\nremoved = 0\nfor i in range(m):\n\ti -= removed\n\tfor j in range(n - 1):\n\t\tif a[j][: i + 1] > a[j + 1][: i + 1]:\n\t\t\tremove(i, a)\n\t\t\tremoved += 1\n\t\t\tbreak\nprint(removed)\n", "def lexyco(table, pos):\n    for i in range(len(table)-1):\n        for s2 in table[i+1:]:\n            if (table[i][:pos+1] > s2[:pos+1]):\n                return False\n    return True\n\nn, m = map(int, input().split())\ntable = []\nfor i in range(n):\n    table.append(input())\ncnt = 0\ni = 0\nwhile i < len(table[0]):\n    if lexyco(table, i):\n        i += 1\n    else:\n        cnt += 1\n        for s in range(len(table)):\n            table[s] = table[s][:i] + table[s][i+1:]\nprint(cnt)", "s = input()\ns = s.split()\nn = int(s[0]) # Linhas\nm = int(s[1]) # Colunas\nl = []\n\nfor i in range(0,n):\n\ts = input()\n\tl.append(s)\n\ncont = 0\n\nant = 0\ni = 0\nwhile (i < n):\n\tif (l[ant] > l[i]):\n\t\tfor k in range(0, n):\n\t\t\tl[k] = list(l[k])\n\t\tachou = False\n\n\t\tj = 0\n\t\tfor j in range(0, m):\n\t\t\tif (l[ant][j] > l[i][j]):\n\t\t\t\tachou = True\n\t\t\t\tbreak\n\n\t\tfor k in range(0, n):\n\t\t\tl[k].pop(j)\n\t\t\tl[k] = \"\".join(l[k])\n\n\t\ti = 0\n\t\tant = 0\n\t\tm -= 1\n\t\tcont += 1\n\n\telse: \n\t\tant = i\n\t\ti += 1\n\nprint(cont)", "s = input()\ns = s.split()\nn = int(s[0]) # Linhas\nm = int(s[1]) # Colunas\nl = []\n\nfor i in range(0,n):\n\ts = input()\n\tl.append(s)\n\ncont = 0\n\nant = 0\ni = 0\nwhile (i < n):\n\tif (l[ant] > l[i]):\n\t\tfor k in range(0, n):\n\t\t\tl[k] = list(l[k])\n\n\t\tfor j in range(0, m):\n\t\t\tif (l[ant][j] > l[i][j]):\n\t\t\t\tbreak\n\n\t\tfor k in range(0, n):\n\t\t\tl[k].pop(j)\n\t\t\tl[k] = \"\".join(l[k])\n\n\t\ti = 0\n\t\tant = 0\n\t\tm -= 1\n\t\tcont += 1\n\n\telse: \n\t\tant = i\n\t\ti += 1\n\nprint(cont)", "from collections import defaultdict, deque\ndef main():\n    n, m = map(int, input().split())\n    a = [[c for c in input()] for i in range(n) ]\n    che = [ [0 for i in range(n+2)] for j in range(n+2)]\n    ans = 0\n    for j in range(m):\n        check = False\n        for i in range(n-1):\n            if a[i][j] > a[i+1][j]:\n                if not che[i][i+1]:\n                    ans += 1\n                    check = True\n                    break\n        if not check:\n            for i in range(n-1):\n                if a[i][j] < a[i+1][j]:\n                    che[i][i+1] = 1\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "read = lambda: list(map(int, input().split()))\nn, m = read()\na = [input() for i in range(n)]\nans = 0\nind = [i for i in range(1, n)]\nfor i in range(m):\n    ind2 = []\n    for j in ind:\n        if a[j][i] < a[j - 1][i]:\n            ans += 1\n            break\n        elif a[j][i] == a[j - 1][i]:\n            ind2.append(j)\n    else:\n        ind = ind2[:]\nprint(ans)\n", "# from itertools import combinations\n# from bisect import bisect_left\n# from functools import *\n# from collections import Counter\n\ndef is_lexigraphic(s):\n  for i in range(len(s) - 1):\n    if s[i] > s[i + 1]:\n      return False\n  return True\n\nI = lambda: list(map(int, input().split()))\nn, m = I()\na = [input() for i in range(n)]\nmn = m\ncolumns = list(zip(*a))\nfor i in range(m):\n  curCol = columns[i]\n  if not is_lexigraphic(curCol):\n    continue\n  l = []\n  for j in range(n - 1):\n    if curCol[j] == curCol[j + 1]:\n      l.append(j)\n  x = 0\n  for k in range(i + 1, m):\n    if any([columns[k][a] > columns[k][a + 1] for a in l]):\n      x += 1\n    elif any([columns[k][a] == columns[k][a + 1] for a in l]):\n      l = [a for a in l if columns[k][a] == columns[k][a + 1]]\n    else:\n      break\n  mn = min(x + i, mn)\nprint(mn)", "# from itertools import combinations\n# from bisect import bisect_left\n# from functools import *\n# from collections import Counter\n\nI = lambda: list(map(int, input().split()))\nn, m = I()\nans = 0\ncolumns = list(zip(*[input() for i in range(n)]))\ng = [0 for _ in range(n)]\nfor column in columns:\n  if sum(g[i] or column[i] <= column[i + 1] for i in range(n - 1)) == n - 1:\n    for i in range(n - 1):\n      g[i] |= column[i] < column[i + 1]\n  else:\n    ans += 1\nprint(ans)", "def remove(p, a):\n\tfor i in range(len(a)):\n\t\ta[i] = a[i][: p] + a[i][p + 1: ]\n\nn, m = [int(x) for x in input().split()]\na = []\nfor i in range(n):\n\ta.append(input())\nremoved = 0\nfor i in range(m):\n\ti -= removed\n\tfor j in range(n - 1):\n\t\tif a[j][: i + 1] > a[j + 1][: i + 1]:\n\t\t\tremove(i, a)\n\t\t\tremoved += 1\n\t\t\tbreak\nprint(removed)\n\n\n\n\n# Made By Mostafa_Khaled\n", "n,m=map(int,input().split())\nans=0\nst=[input() for i in range(n)]\nnew=['']*n\nfor i in range(m):\n\tnewstr=[new[j]+st[j][i] for j in range(n)]\n\tif(newstr==sorted(newstr)):\n\t\tnew=newstr\n\telse:\n\t\tans+=1\nprint(ans)"]