["import sys\nreadline = sys.stdin.readline\n\nH, W = map(int, readline().split())\nG = [[1 if s == '#' else 0 for s in readline().strip()] for _ in range(H)]\n\nDIREC = [(0, 1), (1, 0), (-1, 0), (0, -1)]\ndef calc():\n    zh = 0      \n    for i in range(H):\n        cnt = 0\n        for j in range(W):\n            if G[i][j]:\n                if cnt == 0:\n                    cnt = 1\n                    continue\n                if cnt == 1:\n                    continue\n                if cnt == 2:\n                    return -1\n            else:\n                if cnt == 0:\n                    continue\n                cnt = 2\n        if cnt == 0:\n            zh = 1\n    zw = 0\n    for j in range(W):\n        cnt = 0\n        for i in range(H):\n            if G[i][j]:\n                if cnt == 0:\n                    cnt = 1\n                    continue\n                if cnt == 1:\n                    continue\n                if cnt == 2:\n                    return -1\n            else:\n                if cnt == 0:\n                    continue\n                cnt = 2\n        if cnt == 0:\n            zw = 1\n    if zw^zh:\n        return -1\n    ans = 0\n    used = set()\n    geta = W\n    for i in range(H):\n        for j in range(W):\n            if G[i][j] == 0:\n                continue\n            if (i*geta + j) in used:\n                continue\n            ans += 1\n            stack = [i*geta + j]\n            while stack:\n                nh, nw = divmod(stack.pop(), geta)\n                for dh, dw in DIREC:\n                    fh, fw = nh+dh, nw+dw\n                    if not 0 <= fh < H or not 0 <= fw < W:\n                        continue\n                    if not G[fh][fw]:\n                        continue\n                    vf = fh*geta + fw\n                    if vf in used:\n                        continue\n                    stack.append(vf)\n                    used.add(vf)\n    return ans\nprint(calc())", "from collections import deque\nimport sys\ndef input():\n\treturn sys.stdin.readline()[:-1]\nn, m = map(int, input().split())\ns = [\".\" * (m+2)] +  [\".\" + input() + \".\" for _ in range(n)] + [\".\" * (m+2)]\nok = True\nnum = 0\nn_zero = 0\nfor i in range(1, n+1):\n\tp = s[i].count(\"#\")\n\tnum += p\n\tif p == 0:\n\t\tn_zero += 1\n\nm_zero = 0\nfor j in range(1, m+1):\n\tfor i in range(1, n+1):\n\t\tif s[i][j] == \"#\":\n\t\t\tbreak\n\telse:\n\t\tm_zero += 1\n\nif n_zero * m_zero == 0 and n_zero + m_zero > 0:\n\tprint(-1)\n\treturn\nif num == 0:\n\tprint(0)\n\treturn\n\nfor i in range(n+2):\n\talready = False\n\tfor j in range(1, m+2):\n\t\tif already and s[i][j] == \"#\":\n\t\t\tok = False\n\t\t\tbreak\n\t\telif s[i][j-1] == \"#\" and s[i][j] == \".\":\n\t\t\talready = True\n\tif not ok:\n\t\tbreak\n\nfor j in range(m+2):\n\talready = False\n\tfor i in range(1, n+2):\n\t\tif already and s[i][j] == \"#\":\n\t\t\tok = False\n\t\t\tbreak\n\t\telif s[i-1][j] == \"#\" and s[i][j] == \".\":\n\t\t\talready = True\n\tif not ok:\n\t\tbreak\n\nif not ok:\n\tprint(-1)\n\treturn\n\ncnt = 0\nvisited = [[False for _ in range(m+2)] for _ in range(n+2)]\nDI = [1, 0, -1, 0]\nDJ = [0, 1, 0, -1]\n\ndef bfs(x, y):\n\tq = deque([x*(m+2)+y])\n\twhile q:\n\t\tl = q.popleft()\n\t\ti, j = l//(m+2), l%(m+2)\n\t\tfor di, dj in zip(DI, DJ):\n\t\t\tif s[i+di][j+dj] == \"#\" and visited[i+di][j+dj] == False:\n\t\t\t\tvisited[i+di][j+dj] = True\n\t\t\t\tq.append((i+di)*(m+2) + j+dj)\n\treturn\n\nfor i in range(n+2):\n\tfor j in range(m+2):\n\t\tif s[i][j] == \"#\" and visited[i][j] == False:\n\t\t\tcnt += 1\n\t\t\tvisited[i][j] = True\n\t\t\tbfs(i, j)\n\nprint(cnt)", "n, m = [int(x) for x in input().split()]\n\ngrid = [input() for _ in range(n)]\n\nimp_flag = False\nempty_row_flag = False\nempty_col_flag = False\n\nfor row in grid:\n    flag = False\n    for i in range(m-1):\n        if not flag and row[i] == \"#\" and row[i+1] == \".\":\n            flag = True\n        elif flag and row[i] == \".\" and row[i+1] == \"#\":\n            imp_flag = True\n            break\n    if all(x == \".\" for x in row):\n        empty_row_flag = True\n    if imp_flag:\n        break\n\nfor col_i in range(m):\n    flag = False\n    for i in range(n-1):\n        if not flag and grid[i][col_i] == \"#\" and grid[i+1][col_i] == \".\":\n            flag = True\n        elif flag and grid[i][col_i] == \".\" and grid[i+1][col_i] == \"#\":\n            imp_flag = True\n            break\n    if all(grid[j][col_i] == \".\" for j in range(n)):\n        empty_col_flag = True\n    if imp_flag:\n        break\n\nif imp_flag or (empty_row_flag != empty_col_flag):\n    import sys\n    print(-1)\n    return\n\ncc = 0\ncs = [[-1]*m for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == \".\" or cs[i][j] != -1:\n            continue\n        cs[i][j] = 1\n        cc += 1\n\n        s = [(i, j)]\n        while len(s):\n            ci, cj = s.pop()\n            for nbi, nbj in [(ci-1, cj), (ci+1, cj), (ci, cj+1), (ci, cj-1)]:\n                if 0 <= nbi < n and 0 <= nbj < m and cs[nbi][nbj] == -1 and \\\n                        grid[nbi][nbj] == \"#\":\n                    cs[nbi][nbj] = cs[ci][cj]\n                    s.append((nbi, nbj))\n\nprint(cc)\n", "from sys import stdin\ninput = stdin.readline\nr,c = list(map(int,input().split()))\nmat = [list(input()) for i in range(r)]\ndasie = True\nwiersze = []\nzerow = 0\nzerok = 0\nfor i in range(r):\n\tst = -1\n\tkon = -1\n\thasze = 0\n\tfor j in range(c):\n\t\tif mat[i][j] == '#':\n\t\t\thasze += 1\n\t\t\tif st == -1:\n\t\t\t\tst = j\n\t\t\tkon = j\n\twiersze.append([st,kon])\n\tif hasze == 0:\n\t\tzerow += 1\n\tif hasze != 0 and hasze != kon - st + 1:\n\t\tdasie = False\nfor j in range(c):\n\tst = -1\n\tkon = -1\n\thasze = 0\n\tfor i in range(r):\n\t\tif mat[i][j] == '#':\n\t\t\thasze +=1 \n\t\t\tif st == -1:\n\t\t\t\tst = i\n\t\t\tkon = i\n\tif hasze == 0:\n\t\tzerok += 1\n\tif hasze != 0 and hasze != kon - st + 1:\n\t\tdasie = False\nif not dasie:\n\tprint(-1)\nelse:\n\twyn = 0\n\twiersze = [[-1,-1]] + wiersze\n\tfor i in range(1,r+1):\n\t\tnad = wiersze[i-1]\n\t\tpod = wiersze[i]\n\t\tif pod != [-1,-1] and nad[0] > pod[1] or nad[1] < pod[0]:\n\t\t\twyn += 1\n\tif (zerok == 0 and zerow > 0) or (zerow == 0 and zerok > 0):\n\t\tprint(-1)\n\telse:\n\t\tprint(wyn)\n"]