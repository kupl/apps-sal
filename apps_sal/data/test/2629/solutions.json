["class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if n<1:\n             return []\n         left=0\n         right=n-1\n         up=0\n         bottom=n-1\n         self.matrix=[[0 for i in range(n)] for j in range(n)]\n         count=1\n         while left<=right:\n             if left<right:\n                 count=self.DrawRow(up,left,right,count)\n                 count=self.DrawCol(right,up,bottom,count)\n                 count=self.DrawRow(bottom,right,left,count)\n                 count=self.DrawCol(left,bottom,up,count)\n             else:\n                 count=self.DrawCol(left,up,bottom+1,count)\n                 break\n             up+=1\n             bottom+=-1\n             left+=1\n             right+=-1\n         return self.matrix\n \n     def DrawRow(self,row,start,end,value):\n         add=1\n         if start>end:\n             add=-1\n         for i in range(start,end,add):\n             self.matrix[row][i]=value\n             value+=1\n         return value\n     def DrawCol(self,col,start,end,value):\n         add=1\n         if start>end:\n             add=-1\n         for i in range(start,end,add):\n             self.matrix[i][col]=value\n             value+=1\n         return value", "class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         matrix = [[0 for i in range(n)] for i in range(n)]\n         start, end = 0, n - 1\n         count = 1\n         for j in range(int(n/2)):\n             for i in range(start, end + 1):\n                 matrix[start][i] = count\n                 count += 1\n             for i in range(start + 1, end + 1):\n                 matrix[i][end] = count\n                 count += 1\n             for i in range(end-1, start-1,-1):\n                 matrix[end][i] = count\n                 count += 1\n             for i in range(end-1, start, -1):\n                 matrix[i][start] = count\n                 count += 1\n             start += 1\n             end -= 1\n         if n%2!=0: matrix[start][end] = count\n         return matrix\n", "class Solution:\n     def generateMatrix(self, n):\n         res = [[0 for i in range(n)] for j in range(n)]\n         count, rowNum = 1, n\n         rowIndex1, rowIndex2, colIndex1, colIndex2 = 0, n - 1, n - 1, 0\n \n         while rowNum >= 1:\n             for i in range(colIndex2, colIndex1 + 1):\n                 res[rowIndex1][i] = count\n                 count += 1\n             rowIndex1 += 1\n \n             for i in range(rowIndex1, rowIndex2 + 1):\n                 res[i][colIndex1] = count\n                 count += 1\n             colIndex1 -= 1\n \n             for i in range(colIndex1, colIndex2 - 1, -1):\n                 res[rowIndex2][i] = count\n                 count += 1\n             rowIndex2 -= 1\n \n             for i in range(rowIndex2, rowIndex1 - 1, -1):\n                 res[i][colIndex2] = count\n                 count += 1\n             colIndex2 += 1\n             rowNum -= 2\n         return res\n", "class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if n == 0:\n             return []\n         elif n == 1:\n             return [[1]]\n         \n         cnt = 1\n         ret = [[None] * n for _ in range(n)]\n         def layer(width, margin):\n             if not width > 0:\n                 return\n             nonlocal cnt\n             for i in range(margin, margin+width):\n                 ret[margin][i] = cnt\n                 cnt += 1\n             for i in range(margin+1, margin+width):\n                 ret[i][margin+width-1] = cnt\n                 cnt += 1\n             for i in range(margin+width-2, margin-1, -1):\n                 ret[margin+width-1][i] = cnt\n                 cnt += 1\n             for i in range(margin+width-2, margin, -1):\n                 ret[i][margin] = cnt\n                 cnt += 1\n             layer(width-2, margin+1)\n         layer(n, 0)\n         return ret", "class Solution:\n     def generateMatrix(self, n):\n         matrix = []\n         if n == 0:\n             return matrix\n \n         matrix = [[0]*n for i in range(n)]\n         rowBegin = 0\n         rowEnd = n - 1\n         colBegin = 0\n         colEnd = n - 1\n         num = 0\n \n         while True:\n             # traverse right\n             for j in range(colBegin, colEnd+1):\n                 num += 1\n                 matrix[rowBegin][j] = num\n             rowBegin += 1\n             if rowBegin > rowEnd:\n                 break\n                 \n             # traverse down\n             for j in range(rowBegin, rowEnd+1):\n                 num += 1\n                 matrix[j][colEnd] = num\n             colEnd -= 1\n             if colBegin > colEnd:\n                 break\n                 \n             # traverse left\n             for j in range(colEnd, colBegin-1, -1):\n                 num += 1\n                 matrix[rowEnd][j] = num\n             rowEnd -= 1\n             if rowBegin > rowEnd:\n                 break\n                 \n             # traverse up\n             for j in range(rowEnd, rowBegin-1, -1):\n                 num += 1\n                 matrix[j][colBegin] = num\n             colBegin += 1\n             if colBegin > colEnd:\n                 break\n         return matrix", "class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         t=1\n         temp=[]\n         for i in range(n):\n         \ttemp.append([None]*n)\n         rep = int(n/2) if n%2==0 else int(n/2)+1\n         k=1\n \n         for i in range(rep):\n         \tfor j in range(i,n-i-1):\n         \t\ttemp[i][j] = k\n         \t\tk+=1\n         \tfor j in range(i,n-i-1):\n         \t\ttemp[j][n-i-1] = k\n         \t\tk+=1\n         \tfor j in range(n-i-1,i,-1):\n         \t\ttemp[n-i-1][j] = k\n         \t\tk+=1\n         \tfor j in range(n-i-1,i,-1):\n         \t\ttemp[j][i] = k\n         \t\tk+=1\n         if n%2==1:temp[int(n/2)][int(n/2)]=n*n\n         return temp        ", "class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         \n         left = 0\n         top = 0\n         right = n - 1\n         bottom = n - 1\n         \n         res = [[0 for _ in range(n)] for _ in range(n)]\n         \n         num = 1\n         \n         while left < right and top < bottom:\n             for i in range(left, right):\n                 res[top][i] = num\n                 num += 1\n             for i in range(top, bottom):\n                 res[i][right] = num\n                 num += 1\n             for i in range(right, left, -1):\n                 res[bottom][i] = num\n                 num += 1\n             for i in range(bottom, top, -1):\n                 res[i][left] = num\n                 num += 1\n             left += 1\n             right -= 1\n             top += 1\n             bottom -= 1\n         if left == right and top == bottom:\n             res[left][top] = num\n             \n         return res\n", "class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         retv = [[0 for i in range(n)] for j in range(n)]\n         num = n * n\n         i,j,di,dj = 0,0,0,1\n         for k in range(1, num+1):\n             retv[i][j] = k\n             if retv[(i+di)%n][(j+dj)%n]:\n                 di,dj = dj, -di\n             \n             i += di\n             j += dj\n             \n         return retv", "class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         arr = [a for a in range (1, n * n + 1)]\n         matrix = [[a for a in range (1, n + 1)] for b in range (1, n + 1)]\n         num = 0\n         row_s = 0\n         row_e = n - 1\n         col_s = 0\n         col_e = n - 1\n         while col_e > col_s and row_e > row_s:\n             for i in range (col_s, col_e):\n                 matrix[row_s][i] = arr[num]\n                 num += 1\n             for i in range (row_s, row_e):\n                 matrix[i][col_e] = arr[num]\n                 num += 1\n             for i in range (col_e, col_s, -1):\n                 matrix[row_e][i] = arr[num]\n                 num += 1\n             for i in range (row_e, row_s, -1):\n                 matrix[i][col_s] = arr[num]\n                 num += 1\n             row_s += 1\n             col_s += 1\n             row_e -= 1\n             col_e -= 1\n \n         if col_s == col_e:\n             for i in range (row_s, row_e + 1):\n                 matrix[i][col_e] = arr[num]\n                 num += 1\n         else:\n             for i in range (col_s, col_e + 1):\n                 matrix[row_s][i] = arr[num]\n                 num += 1\n         return matrix", "class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if n == 0:\n             return []\n         res = [[0]*n for _ in range(n)]\n         record = set()\n         rupper,rdown,cleft,cright,val = 0,n-1,0,n-1,1\n         while rupper<rdown and cleft<cright:\n             for col in range(cleft,cright):\n                 res[rupper][col] = val\n                 val +=1\n             for row in range(rupper,rdown):\n                 res[row][cright] = val\n                 val +=1\n             for col in range(cright,cleft,-1):\n                 res[rdown][col] = val\n                 val +=1\n             for row in range(rdown, rupper,-1):\n                 res[row][cleft] = val\n                 val +=1\n             rupper +=1\n             rdown -=1\n             cleft +=1\n             cright -=1\n         if n%2 !=0:\n             res[n//2][n//2] = val\n         return res", "class Solution:\n     def generateMatrix(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         if n == 0:\n             return []\n         nums = list(range(1, n*n+1))\n         matrix = [[nums[-1]]]\n         start = n*n - 1\n         \n         while start > 0:\n             matrix = matrix[::-1]\n             matrix = [*zip(*matrix)]\n             matrix = [nums[(start-len(matrix[0])):start]] + matrix\n             start = start - len(matrix[0])\n             \n         return [*map(list, matrix)]"]