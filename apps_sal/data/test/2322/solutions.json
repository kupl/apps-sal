["n,m = map(int, input().split())\nA = [0] * n\nfor i in range(n):\n    A[i] = input()\n    for j in range(m):\n        if A[i][j] == 'S':\n            per1,per2 = i,j\n            \nt1, t2 = per1, per2\nend1,end2 = per1,per2\nwhile True:\n    \n    \n    if per1 > 0 and (t1 != per1 - 1 or t2 != per2) and (A[per1-1][per2] == '*' or A[per1-1][per2] == 'S'):\n        t1 = per1\n        t2 =per2\n        per1 -=1\n        print('U', end ='')\n    elif per1 < n-1 and (t1 != per1 + 1 or t2!= per2) and (A[per1+1][per2] == '*' or A[per1+1][per2] == 'S'):\n        t1 = per1\n        t2 = per2\n        per1 += 1\n        print('D', end ='')\n    elif per2 > 0 and (t1!=per1 or t2  !=per2 - 1) and (A[per1][per2-1] == '*' or A[per1][per2-1] == 'S'):\n        t1 = per1\n        t2 = per2\n        per2 -=1\n        print('L', end ='')\n    elif per2 < m -1 and (t1!= per1 or t2 != per2+1) and (A[per1][per2+1] == '*' or A[per1][per2+1] == 'S'):\n        t1 = per1\n        t2 = per2\n        per2 += 1\n        print('R', end ='')\n    if end1 == per1 and end2 == per2:\n        break\n    \n        \n", "n, m = map(int, input().split())\nA = ['#'*(m+2)]\nfor i in range(1, n+1):\n    B = ['#'] + list(input()) + ['#']\n    A.append(B)\n    if 'S' in B:\n        C = [i, B.index('S')]\nA.append('#'*(m+2))\nN = C.copy()\nq = 'L'\nsh = 0\nwhile sh==0 or N!=C:\n    sh+=1\n    if (A[N[0]-1][N[1]]=='*' or A[N[0]-1][N[1]]=='S') and q!='D':\n        N[0]-=1\n        print('U', end='')\n        q = 'U'\n    elif (A[N[0]+1][N[1]]=='*' or A[N[0]+1][N[1]]=='S') and q!='U':\n        N[0]+=1\n        print('D', end='')\n        q = 'D'   \n    elif (A[N[0]][N[1]-1]=='*' or A[N[0]][N[1]-1]=='S') and q!='R':\n        N[1]-=1\n        print('L', end='')\n        q = 'L'  \n    elif (A[N[0]][N[1]+1]=='*' or A[N[0]][N[1]+1]=='S') and q!='L':\n        N[1]+=1\n        print('R', end='')\n        q = 'R'    ", "from copy import deepcopy\n\nn, m = list(map(int, input().split()))\npole = []\nx, y = 0, 0\ncount = 0\nfor i in range(n):\n    s = input()\n    pole.append(s)\n    for j in range(len(s)):\n        if s[j] == '*':\n            count += 1\n        if s[j] == 'S':\n            x = i\n            y = j\n\nX = [0, -1, 0, 1]     \nY = [-1, 0, 1, 0]\n\nd = dict()\nd[0] = 'L'\nd[1] = 'U'\nd[2] = 'R'\nd[3] = 'D'\n\nprevx, prevy = -1, -1\n\nxbegin, ybegin = deepcopy(x), deepcopy(y)\ns = ''\nnow = 0\nfor i in range(n):\n    for j in range(m):\n        for u in range(4):\n            if x + X[u] >= 0 and x + X[u] < n and y + Y[u] >= 0 and y + Y[u] < m:\n                if pole[x + X[u]][y + Y[u]] == '*' and (x + X[u] != prevx or y + Y[u] != prevy):\n                    prevx, prevy = deepcopy(x), deepcopy(y)\n                    x += X[u]\n                    y += Y[u]\n                    s += d[u]\n                    count -= 1\n                    break\n        if count == -1:\n            break\n    if count == -1:\n        break\nif x - 1 >= 0 and pole[x - 1][y] == 'S':\n    s += 'U'\nif x + 1 < n and pole[x + 1][y] == 'S':\n    s += 'D'\nif y - 1 >= 0 and pole[x][y - 1] == 'S':\n    s += 'L'\nif y + 1 < m and pole[x][y + 1] == 'S':\n    s += 'R'\nprint(s)\n\n                \n", "def read_ints():\n    return [int(x) for x in input(' ').split()]\n\n\ndef main():\n    n, m = read_ints()\n    field = []\n    x, y = None, None\n    for i in range(n):\n        line = input()\n        if 'S' in line:\n            x, y = i, line.find('S')\n        field.append(list(line))\n    field[x][y] = '*'\n    flag = False\n    curr_x, curr_y = x, y\n    delta = [(-1, 0, 'U'), (+1, 0, 'D'), (0, -1, 'L'), (0, +1, 'R')]\n    par_x, par_y = -1, -1\n    while True:\n        if flag:\n            field[curr_x][curr_y] = 'U'\n        flag = True\n        for dx, dy, label in delta:\n            next_x, next_y = curr_x + dx, curr_y + dy\n            if not 0 <= next_x < n:\n                continue\n            if not 0 <= next_y < m:\n                continue\n            if par_x == next_x and par_y == next_y:\n                continue\n            if field[next_x][next_y] == '*':\n                print(label, end='', flush=True)\n                par_x, par_y = curr_x, curr_y\n                curr_x, curr_y = next_x, next_y\n                break\n        if x == curr_x and y == curr_y:\n            break\n\ndef __starting_point():\n    main()\n__starting_point()", "y, x = list(map(int, input().split()))\nm = ['.'*(x+2)]\ne = ''\ntry:\n    for i in range(y):\n        m.append('.'+input()+'.')\n        a = m[i+1].find('S')\n        if a != -1:\n            b = [i+1, a]\nexcept:\n    pass\nm.append('.'*(x+2))\na = [b[0], b[1]]\nif m[a[0]-1][a[1]] == '*':\n    e += ('U')\n    a = [(a[0]-1), a[1]]\nelif m[a[0]][a[1]-1] == '*':\n    e += ('L')\n    a = [a[0], a[1]-1]\nelif m[a[0]+1][a[1]] == '*':\n    e += 'D'\n    a = [a[0]+1, a[1]]\nelse:\n    e += 'R'\n    a = [a[0], a[1]+1]\nwhile a != b:\n    if ((m[a[0]-1][a[1]] == '*') or (m[a[0]-1][a[1]] == 'S')) and e[-1] != 'D':\n        e += ('U')\n        a = [(a[0]-1), a[1]]\n    elif ((m[a[0]][a[1]-1] == '*') or (m[a[0]][a[1]-1] == 'S')) and e[-1] != 'R':\n        e += ('L')\n        a = [a[0], a[1]-1]\n    elif ((m[a[0]+1][a[1]] == '*') or (m[a[0]+1][a[1]] == 'S')) and e[-1] != 'U':\n        e += 'D'\n        a = [(a[0]+1), a[1]]\n    else:\n        e += 'R'\n        a = [a[0], a[1]+1]\nprint(e)\n", "def next1(x, y):\n    nonlocal data, ans\n    data[y][x][1] = True\n    if data[y][x - 1][0] == '*' and ( not data[y][x - 1][1]):\n        ans += 'L'\n        return x - 1, y\n    if data[y - 1][x][0] == '*' and ( not data[y - 1][x][1]):\n        ans += 'U'\n        return x, y - 1\n    if data[y][x + 1][0] == '*' and ( not data[y][x + 1][1]):\n        ans += 'R'\n        return x + 1, y\n    if data[y + 1][x][0] == '*' and ( not data[y + 1][x][1]):\n        ans += 'D'\n        return x, y + 1\n    return None, None\n    \n\nn, m = map(int, input().split())\ndata = []\ndata.append([])\nfor i in range(m + 2):\n    data[0].append(['.', False])\nfor i in range(n):\n    h = input()\n    sd = []\n    sd.append(['.', False])\n    for i in range(m):\n        sd.append([h[i], False])\n    sd.append(['.', False])\n    data.append(sd)\ndata.append([])\nfor i in range(m + 2):\n    data[-1].append(['.', False])\nf = True\nstartx, starty = -1, -1\nfor i in range(1, n + 1):\n    if f:\n        for j in range(1, m + 1):\n            if data[i][j][0] == 'S':\n                startx, starty = j, i\n                f = False\n                break\nx, y, h1, h2 = startx, starty, startx, starty\nans = ''\nif data[y][x - 1][0] == '*' and ( not data[y][x - 1][1]):\n    x, y =  x - 1, y\n    ans += 'L'\nelif data[y - 1][x][0] == '*' and ( not data[y - 1][x][1]):\n    x, y = x, y - 1\n    ans += 'U'\nelif data[y][x + 1][0] == '*' and ( not data[y][x + 1][1]):\n    x, y = x + 1, y\n    ans += 'R'\nelif data[y + 1][x][0] == '*' and ( not data[y + 1][x][1]):\n    x, y = x, y + 1\n    ans += 'D'\nwhile True:\n    x, y = next1(x, y)\n    if x == None and y == None:\n        break\n    else:\n        x1, y1 = x, y\nif x1 - startx == 1:\n    ans += 'L'\nelif x1 - startx == -1:\n    ans += 'R'\nelif y1 - starty == 1:\n    ans += 'U'\nelif y1 - starty == -1:\n    ans += 'D'\nprint(ans)", "n, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n    s = input().split()\n    a.append(s)\nfor i in range(n):\n    for j in range(m):\n        if a[i][0][j] == \"S\":\n            k = j\n            l = i\n            continue\ns = \"s\"\nx = k\ny = l\nif k == 0:\n    k = 1\nelse:\n    k = 0\nwhile a[l][0][k] != \"S\":\n    if y > 0:\n        if ((a[y - 1][0][x] == \"*\") or (a[y - 1][0][x] == \"S\")) and (s[len(s) - 1] != \"D\"):\n            s += \"U\"\n            y -= 1\n    if y < n - 1:\n        if ((a[y + 1][0][x] == \"*\") or (a[y + 1][0][x] == \"S\")) and (s[len(s) - 1] != \"U\"):\n            s += \"D\"\n            y += 1\n    if x > 0:\n        if ((a[y][0][x - 1] == \"*\") or (a[y][0][x - 1] == \"S\")) and (s[len(s) - 1] != \"R\"):\n            s += \"L\"\n            x -= 1\n    if x < m - 1:\n        if ((a[y][0][x + 1] == \"*\") or (a[y][0][x + 1] == \"S\")) and (s[len(s) - 1] != \"L\"):\n            s += \"R\"\n            x += 1\n    if a[y][0][x] == \"S\":\n        k = x\n        y = l\n\nprint(s[1:])\n\n"]