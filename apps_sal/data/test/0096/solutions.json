["def gg(n,lol):\n\tans = 0\n\tcur = 1\n\tlol2 = lol\n\twhile(2*lol+1<=n):\n\t\tcur *= 2\n\t\tans += cur\n\t\tlol = 2*lol+1\n\t\tlol2 *= 2\n\tif lol2*2 <= n:\n\t\tans += n-lol2*2+1\t\n\treturn ans\n\nn,k = list(map(int,input().split()))\nlow = 1\nhigh = n//2\nres = 1\nwhile low <= high:\n\tmid = (low+high)//2\n\tif gg(n,mid) >= k:\n\t\tres = mid\n\t\tlow = mid+1\n\telse:\n\t\thigh = mid-1\nif n == k:\n\tprint(1)\nelif(gg(n,res)-1-gg(n,res*2) >= k):\n\tprint(res*2+1)\nelse:\n\tprint(res*2)\t\t\t\t\t\n", "def ans(m, n):\n    q1, q2, k = m, 2, 0\n    while q1 <= n:\n        q1 *= 2\n        k += q2\n        q2 *= 2\n    q2 //= 2\n    q1 //= 2\n    if n-q1 < q2:\n        return k+n-q1-q2+1\n    return k\n\n\nn, k = list(map(int, input().split()))\nif k == n:\n    print(1)\nelif k == 1:\n    print(n)\nelse:\n    l, r = 1, n//2+1\n    while r-l > 1:\n        m = (l+r)//2\n        if ans(2*m, n) >= k:\n            l = m\n        else:\n            r = m\n    l1, r1 = 1, n // 2 + 1\n    while r1 - l1 > 1:\n        m = (l1 + r1) // 2\n        if ans(2 * m, n) >= k-1:\n            l1 = m\n        else:\n            r1 = m\n    print(max(l1, 2*l))\n", "n, k = list(map(int, input().split()))\ns = bin(n)[2:]\n\nans = 1\nif k == 1:\n    ans = n\nelse:\n    f = len(s)\n    for d in range(1, f):\n        rgt = int(s[-d:], 2)\n        lft = int(s[:-d], 2)\n        c = 2**d\n        # print(d, lft, rgt+c, 2*c-1)\n        if rgt+c >= k:\n            if rgt+c > k:\n                ans = max(lft*2, ans)\n            else:\n                ans = max(lft, ans)\n        if 2*c-1 >= k:\n            if 2*c-1 > k:\n                ans = max((lft-1)*2, ans)\n            else:\n                ans = max(lft-1, ans)\n\nprint(ans)\n", "import sys\n\ndef cnt(y, n):\n    # print(\"in count\")\n    #print(y)\n    if y <= 1:\n        return n\n    if y > n:\n        return 0\n    if y % 2 == 1:\n        return 1 + cnt(2 * y, n)\n    c = 0\n    p = 1\n    while p*y <= n:\n        mx = min(n, p*y + 2*p - 1)\n        c += mx - p*y + 1\n        p *= 2\n    return c\n\nn, k = input().split()\nn, k = int(n), int(k)\n\nif k == 1:\n    print(n)\n    return\n\nl, h = 1, n // 2\nwhile l < h:\n    m = (l + h) // 2\n    #print(\"l = \" + str(l))\n    #print(\"h = \" + str(h))\n    #print(\"m = \" + str(m))\n    #print(\"cnt = \" + str(cnt(m, n)))\n\n    if cnt(2 * m, n) < k:\n        h = m\n    else:\n        l = m + 1\nmx_even = 2 * l - 2\n    \nl, h = 1, n // 2\nwhile l < h:\n    m = (l + h) // 2\n    #print(\"l = \" + str(l))\n    #print(\"h = \" + str(h))\n    #print(\"m = \" + str(m))\n    #print(\"cnt = \" + str(cnt(m, n)))\n\n    if cnt(2 * m + 1, n) < k:\n        h = m\n    else:\n        l = m + 1\nmx_odd = 2 * l - 1\n#assert(cnt(mx_odd, n) >= k)\n#assert(cnt(mx_even, n) >= k)\n\nmx_heur = -1\ni = 0\nwhile i < 20 and n - i > 0:\n    if cnt(n - i, n) >= k:\n        mx_heur = n - i\n        break\n    i += 1\n\nprint(max(mx_even, max(mx_odd, mx_heur)))\n", "n,k=map(int,input().split())\ndef c(m):\n  a=b=m\n  ans=0\n  if m%2==0:b+=1\n  while b<=n:\n    ans+=b-a+1\n    a*=2\n    b*=2\n    b+=1\n  return ans+max(0,n-a+1)\n\nif n<100:\n  ans=1\n  for i in range(1,n+1):\n    if c(i)>=k:ans=i\n  print(ans);return\nfor i in range(n,n-100,-1):\n  if c(i)>=k:print(i);return\n\nng=0\nok=(n+1)//2*2\nwhile ng+2!=ok:\n  mid=(ok+ng)//4*2\n  if c(mid)<k:ok=mid\n  else:ng=mid\nx=ng\nng=-1\nok=(n+1)//2*2-1\nwhile ng+2!=ok:\n  mid=(ok+ng)//4*2+1\n  if c(mid)<k:ok=mid\n  else:ng=mid\nprint(max(ng,x))", "a, b = input().split()\na = int(a)\nb = int(b)\n\nif b == 1:\n\tprint(a)\nelif b == 2:\n\tif a % 2 == 0:\n\t\tprint(a // 2)\n\telse:\n\t\tprint(a-1)\nelse:\n\n\tchopped_even = bin(b+1)[3:]\n\tlen_even = len(chopped_even)\n\tbest_even = ((a - int(chopped_even, 2))//(2**len_even))*2\n\n\tchopped_odd = bin(b)[2:]\n\tlen_odd = len(chopped_odd)\n\tbest_odd = ((a - b) // (2**len_odd))*2 + 1\n\n\tif best_even > best_odd:\n\t\tprint(best_even)\n\telse:\n\t\tprint(best_odd)", "def gg(n, lol):\n    ans = 0\n    cur = 1\n    lol2 = lol\n    while (2 * lol + 1 <= n):\n        cur *= 2\n        ans += cur\n        lol = 2 * lol + 1\n        lol2 *= 2\n    if lol2 * 2 <= n:\n        ans += n - lol2 * 2 + 1\n    return ans\n\n\nn, k = map(int, input().split())\nlow = 1\nhigh = n // 2\nres = 1\nwhile low <= high:\n    mid = (low + high) // 2\n    if gg(n, mid) >= k:\n        res = mid\n        low = mid + 1\n    else:\n        high = mid - 1\nif n == k:\n    print(1)\nelif (gg(n, res) - 1 - gg(n, res * 2) >= k):\n    print(res * 2 + 1)\nelse:\n    print(res * 2)", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int,minp().split()))\n\ndef full(x, n):\n\tif ((n + 1) & n) != 0:\n\t\traise Exception(\"qwe\")\n\tr = 1\n\twhile True:\n\t\tif r >= x:\n\t\t\treturn n\n\t\tif n == 1:\n\t\t\treturn None\n\t\tr *= 2\n\t\tn -= 1\n\t\tif r >= x:\n\t\t\treturn n\n\t\tn //= 2\n\t\tr += 1\n\ndef is_good(x, n):\n\tl = x\n\tr = x\n\trp = x\n\tif x % 2 == 0:\n\t\treturn None\n\twhile l <= n:\n\t\tif l <= n and r > n:\n\t\t\treturn None\n\t\tl *= 2\n\t\trp = r\n\t\tr = r * 2 + 1\n\treturn rp\n\ndef full2(x, c, rp):\n\tr = 1\n\twhile True:\n\t\tif r >= x:\n\t\t\treturn rp\n\t\tif rp == c:\n\t\t\treturn None\n\t\tr *= 2\n\t\trp -= 1\n\t\tif r >= x:\n\t\t\treturn rp\n\t\trp //= 2\n\t\tr += 1\n\treturn None\n\n\ndef full1(k, x, n):\n\trp = is_good(x, n)\n\tif rp == None:\n\t\tr = None\n\t\tif f(x, n) >= k:\n\t\t\tr = x\n\t\tif 2*x <= n:\n\t\t\tr1 = full1(k, 2*x, n)\n\t\t\tif r1 != None and (r == None or r < r1):\n\t\t\t\tr = r1\n\t\tif 2*x + 1 <= n:\n\t\t\tr1 = full1(k, 2*x + 1, n)\n\t\t\tif r1 != None and (r == None or r < r1):\n\t\t\t\tr = r1\n\t\treturn r\n\telse:\n\t\treturn full2(k, x, rp)\n\ndef fulls(k, n):\n\tr = 1\n\tfor i in range(1,n+1):\n\t\tif f(i,n) >= k:\n\t\t\tr = i\n\treturn r\n\ndef f(x, n):\n\tr = 0\n\trp = is_good(x, n)\n\tif rp != None:\n\t\tr = 1\n\t\twhile rp != x:\n\t\t\tr = (r*2 + 1)\n\t\t\trp //= 2\n\t\treturn r\n\n\tif x <= n:\n\t\tr += 1\n\tif x % 2 == 0 and x + 1 <= n:\n\t\tr += f(x + 1, n)\n\tif 2 * x <= n:\n\t\tr += f(x * 2, n)\n\t#print(x, r)\n\treturn r\n\ndef f1(x, n):\n\tr = 0\n\tif x <= n:\n\t\tr += 1\n\tif x % 2 == 0 and x + 1 <= n:\n\t\tr += f(x + 1, n)\n\tif 2 * x <= n:\n\t\tr += f(x * 2, n)\n\t#print(x, r)\n\treturn r\n\n'''\nfrom random import randint\nwhile True:\n\tn = randint(1, 1024)\n\tx = randint(1, n)\n\tif full1(x, 1, n) != fulls(x, n):\n\t\tprint(x, n, full1(x, 1, n), fulls(x,n))\n'''\nn, k = mints()\nprint(full1(k, 1, n))\n", "from math import *\nfrom collections import *\nimport sys\nsys.setrecursionlimit(10**9)\n\ndef check(ch):\n\tif(ch > n): return 0\n\tif(ch %2 == 0):\n\t\tif(ch == n): return 1\n\t\telse: \n\t\t\tst = 4\n\t\t\tans = 2\n\telse:\n\t\tst = 2\n\t\tans  = 1\n\tch *= 2\n\twhile(ch < n):\n\t\tif(ch > n + 1 - st):\n\t\t\tans += n+1-ch\n\t\t\tbreak\n\t\telse:\n\t\t\tans += st\n\t\tst *= 2\n\t\tif(ch > n - ch):\n\t\t\tbreak\n\t\telse:\n\t\t\tch *= 2\n\treturn ans\n\n\nmod = 10**9 + 7\nn,x = map(int,input().split())\n\nl = 1\nr = n\nans1 = 0\nwhile(r >= l):\n\tmid = (r+l)//2\n\tmid *= 2\n\tif(check(mid) >= x):\n\t\tl = mid//2 + 1\n\t\tans1 = mid\n\telse:\n\t\tr = mid//2 - 1\n\t#print(mid,check(mid))\nl = 1\nr = n\nans2 = 0\nwhile(r >= l):\n\tmid = (r+l)//2\n\tmid = mid*2-1\n\tif(check(mid) >= x):\n\t\tl = (mid+1)//2 + 1\n\t\tans2 = mid\n\telse:\n\t\tr = (mid+1)//2 - 1\n\t#print(mid,check(mid))\nprint(max(ans1,ans2))"]