["(lambda R:(lambda N:(lambda n:any((lambda z,r:all((lambda p:all(p==k for k in n[j:j+i]))(n[j])for j in range(0,N,i))and all(all((lambda q:q==z or q==r)(j[k:k+i])for k in range(0,N,i))for j in n)and[print(i)])('0'*i,'1'*i)for i in range(N,0,-1)if N%i==0))([bin(int(R(),16))[2:].zfill(N)for i in range(N)]))(int(R())))(__import__('sys').stdin.readline)", "n=int(input())\nMAT=[format(int(input(),16),\"b\").zfill(n) for i in range(n)]\n\nR=[]\n\nNOW=1\nfor i in range(1,n):\n    if MAT[i]==MAT[i-1]:\n        NOW+=1\n    else:\n        R.append(NOW)\n        NOW=1\n\nR.append(NOW)\n\nC=[]\ndef matchcol(i):\n    for j in range(n):\n        if MAT[j][i-1]!=MAT[j][i]:\n            return 0\n    else:\n        return 1\n\nNOW=1\nfor i in range(1,n):\n    if matchcol(i):\n        NOW+=1\n    else:\n        C.append(NOW)\n        NOW=1\n\nC.append(NOW)\n\ndef gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\nANS=R[0]\nfor x in R+C:\n    ANS=gcd(ANS,x)\n\nprint(ANS)\n        \n    \n    \n", "from math import gcd\n\nn = int(input())\na = []\nfor i in range(n):\n    row = input()\n    a.append(bin(int(row,16))[2:].zfill(n))\n# print(*a, sep='\\n')\nto_vis = [0]*n\nans = n\nfor i in range(n):\n    br = False\n    j = to_vis[i]\n    while j < n:\n        # print('j', j)\n        currx = 1\n        d = a[i][j]\n        expand = True\n        while expand and currx+i < n and currx+j < n:\n            for ki in range(i, i+currx+1):\n                if a[ki][j+currx] != d:\n                    expand = False\n                    break\n            if expand:\n                for kj in range(j, j+currx+1):\n                    if a[i+currx][kj] != d:\n                        expand = False\n                        break\n            if expand:\n                currx += 1\n        for ki in range(i, i+currx):\n            if to_vis[ki] == j:\n                to_vis[ki] = j+currx\n        # print(currx)\n        ans = gcd(ans, currx)\n        if ans == 1:\n            br = True\n            break\n        j += currx\n        # print(to_vis)\n    if br:\n        break\n\nprint(ans)\n", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nn = int(input())\nans = n\nc = 0\npre = \"\"\nfor i in range(n):\n    s = bin((1<<n)+int(input(),16))[3:]\n    if i == 0 or s != pre:\n        pre = s\n        ans = gcd(ans, c)\n        # print(\"c\",c,\"ans\",ans)\n        c = 1\n        cc = 1\n        for j in range(1, n):\n            if s[j] == s[j-1]:\n                cc += 1\n            else:\n                ans = gcd(ans, cc)\n                # print(\"cc\",cc,\"ans\",ans)\n                cc = 1\n                \n    else:\n        c += 1\n    \nans = gcd(ans, c)\n# print(s)\nprint(ans)\n", "import sys\n\nhex2bin = ['']*256\nhex2bin[ord('0')] = '0000'\nhex2bin[ord('1')] = '0001'\nhex2bin[ord('2')] = '0010'\nhex2bin[ord('3')] = '0011'\nhex2bin[ord('4')] = '0010'\nhex2bin[ord('5')] = '0010'\nhex2bin[ord('6')] = '0110'\nhex2bin[ord('7')] = '0111'\nhex2bin[ord('8')] = '1000'\nhex2bin[ord('9')] = '1001'\nhex2bin[ord('A')] = '0010'\nhex2bin[ord('B')] = '0010'\nhex2bin[ord('C')] = '1100'\nhex2bin[ord('D')] = '0010'\nhex2bin[ord('E')] = '1110'\nhex2bin[ord('F')] = '1111'\n\n\nn = int(input())\n\nbuckets = [0]*(n+1)\n\ninp = sys.stdin.read().splitlines()\n\nprev = ''\ncount = 0\nfor i in range(n):\n    if inp[i]==prev:\n        count += 1\n    else:\n        buckets[count] += 1\n        count = 1\n        prev = inp[i]\n\n        prev_c = ''\n        counter = 0\n        for hexx in prev:\n            for c in hex2bin[ord(hexx)]:\n                if c==prev_c:\n                    counter += 1\n                else:\n                    buckets[counter] += 1\n                    counter = 1\n                    prev_c = c\n        buckets[counter] += 1\n    if buckets[1]!=0 or (buckets[2]!=0 and buckets[3]!=0):\n        print(1)\n        return\n\nbuckets[count] += 1\n\nx = 0\nfor i in range(1,n+1):\n    if buckets[i]:\n        while i:\n            i,x=x%i,i\nprint(x)", "from sys import stdin,stdout\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\nn=int(stdin.readline())\ntemp=\"\"\nans=n\np=0\nfor i in range(n):\n    s=bin((1<<n)+int(stdin.readline(),16))[3:]\n    if i==0 or temp!=s:\n        temp=s\n        ans=gcd(ans,p)\n        p=1\n        pp=1\n        for j in range(1,n):\n            if s[j]==s[j-1]:\n                pp+=1\n            else:\n                ans=gcd(ans,pp)\n                pp=1\n    else:\n        p+=1\nans=gcd(ans,p)\nprint(ans)", "from sys import stdin,stdout\ndef hexa(c):\n\tif c=='0':\n\t\treturn \"0000\"\n\tif c=='1':\n\t\treturn \"0001\"\n\tif c=='2':\n\t\treturn \"0010\"\n\tif c=='3':\n\t\treturn \"0011\"\n\tif c=='4':\n\t\treturn \"0100\"\n\tif c=='5':\n\t\treturn \"0101\"\n\tif c=='6':\n\t\treturn \"0110\"\n\tif c=='7':\n\t\treturn \"0111\"\n\tif c=='8':\n\t\treturn \"1000\"\n\tif c=='9':\n\t\treturn \"1001\"\n\tif c=='A':\n\t\treturn \"1010\"\n\tif c=='B':\n\t\treturn \"1011\"\n\tif c=='C':\n\t\treturn \"1100\"\n\tif c=='D':\n\t\treturn \"1101\"\n\tif c=='E':\n\t\treturn \"1110\"\n\tif c=='F':\n\t\treturn \"1111\"\n#hexa = ['0000','0001','0010','0011','0100','0101','0110','0111','1000','1001','1010','1011','1100','1101','1110','1111']\ndef gcd(a,b):\n\tif b==0:\n\t\treturn a\n\treturn gcd(b,a%b)\n\nn=int(stdin.readline())\na=[0]*n\nfor _ in range(n):\n\ts = stdin.readline().strip()\n\tt=\"\"\n\tfor i in s:\n\t\t\n\t\tt+=hexa(i)\n\ta[_] = t\n\nr=[]\nt= 1\nfor i in range(1,n):\n\tif a[i]==a[i-1]:\n\t\tt+=1\n\telse:\n\t\tr.append(t)\n\t\tt=1\nr.append(t)\n\nc=[]\nt=1\nfor i in range(1,n):\n\tf=1\n\tfor j in range(n):\n\t\tif a[j][i-1]!=a[j][i]:\n\t\t\tf=0\n\t\t\tbreak\n\tif f==1:\n\t\tt+=1\n\telse:\n\t\tc.append(t)\n\t\tt=1\nc.append(t)\n\nans = r[0]\nfor i in r+c:\n\tans = gcd(ans,i)\n\nstdout.write(\"%d\" %ans)\n", "from sys import stdin,stdout\n\ndef gcd(a,b):\n\tif b==0:\n\t\treturn a\n\treturn gcd(b,a%b)\n\nn=int(stdin.readline())\na=[0]*n\nfor _ in range(n):\n\ta[_] = format(int(stdin.readline().strip(),16),\"b\").zfill(n)\n\t\n\nr=[]\nt= 1\nfor i in range(1,n):\n\tif a[i]==a[i-1]:\n\t\tt+=1\n\telse:\n\t\tr.append(t)\n\t\tt=1\nr.append(t)\n\nc=[]\nt=1\nfor i in range(1,n):\n\tf=1\n\tfor j in range(n):\n\t\tif a[j][i-1]!=a[j][i]:\n\t\t\tf=0\n\t\t\tbreak\n\tif f==1:\n\t\tt+=1\n\telse:\n\t\tc.append(t)\n\t\tt=1\nc.append(t)\n\nans = r[0]\nfor i in r+c:\n\tans = gcd(ans,i)\n\nstdout.write(\"%d\" %ans)\n", "import sys\nn = int(sys.stdin.readline())\na = [[] for i in range(n)]\nfor i in range(n):\n    a[i] = bin((1 << n) | int(sys.stdin.readline(), 16))[3:]\n\nfrom math import gcd\nans = 0\ni = 0\nwhile i < n:\n    j = i + 1\n    while j < n and a[i] == a[j]:\n        j += 1\n    ans = gcd(ans, j - i)\n    k = 0\n    while k < n:\n        l = k + 1\n        while l < n and a[i][k] == a[i][l]:\n            l += 1\n        ans = gcd(ans, k - l)\n        k = l\n    i = j\n    \nprint(ans)\n", "from math import gcd\nfrom functools import reduce\nimport sys\nimport os \nd=sys.stdin.readlines()\nif d[-1][-1] != \"\\n\":\n    d[-1]+=\"\\n\"\n\nn = int(d[0])\ncur_tab = [0 for _ in range(n+1)]\n\ndef group(l):\n    cur = 1\n    for x in range(1,n):\n        if l[x] == l[x-1]:\n            cur+=1\n        else:\n            cur_tab[cur]=1\n            cur=1\n    cur_tab[cur]=1\n\n\nmat=[None for _ in range(n)]\neuh=0\n\nfor x in d[1:]:\n    line = x[:-1]\n    s=str(bin(int(line, 16)))[2:].zfill(n)\n    mat[euh]=s\n    euh+=1\n    group(s)\nfor i in range(n):\n    cur=1\n    for x in range(1,n):\n        if mat[x][i] == mat[x-1][i]:\n            cur+=1\n        else:\n            cur_tab[cur]=1\n            cur=1\n    cur_tab[cur]=1\nprint(reduce(gcd, [index for index in range(n+1) if cur_tab[index] == 1]))", "from math import gcd\nfrom functools import reduce\nimport sys\nimport os \nd=sys.stdin.readlines()\nif d[-1][-1] != \"\\n\":\n    d[-1]+=\"\\n\"\n\nn = int(d[0])\ncur_tab = [0 for _ in range(n+1)]\n\ndef group(l):\n    cur = 1\n    for x in range(1,n):\n        if l[x] == l[x-1]:\n            cur+=1\n        else:\n            cur_tab[cur]=1\n            cur=1\n    cur_tab[cur]=1\n    if cur_tab[1]==1:\n        print(1)\n        return\n\n\nmat=[None for _ in range(n)]\neuh=0\n\nfor x in d[1:]:\n    line = x[:-1]\n    s=str(bin(int(line, 16)))[2:].zfill(n)\n    mat[euh]=s\n    euh+=1\n    group(s)\nfor i in range(n):\n    cur=1\n    for x in range(1,n):\n        if mat[x][i] == mat[x-1][i]:\n            cur+=1\n        else:\n            cur_tab[cur]=1\n            cur=1\n    cur_tab[cur]=1\n    if cur_tab[1]==1:\n        print(1)\n        return\nprint(reduce(gcd, [index for index in range(n+1) if cur_tab[index] == 1]))", "from math import gcd\nfrom functools import reduce\nimport sys\nimport os \nd=sys.stdin.readlines()\n\n\nn = int(d[0])\ncur_tab = [0 for _ in range(n+1)]\n\ndef group(l):\n    cur = 1\n    for x in range(1,n):\n        if l[x] == l[x-1]:\n            cur+=1\n        else:\n            cur_tab[cur]=1\n            cur=1\n    cur_tab[cur]=1\n    if cur_tab[1]==1:\n        print(1)\n        return\n\n\nmat=[None for _ in range(n)]\neuh=0\n\nfor x in d[1:]:\n    line = x[:-1]\n    s=str(bin(int(line, 16)))[2:].zfill(n)\n    mat[euh]=s\n    euh+=1\n    group(s)\n    \nfor i in range(n):\n    cur=1\n    for x in range(1,n):\n        if mat[x][i] == mat[x-1][i]:\n            cur+=1\n        else:\n            cur_tab[cur]=1\n            cur=1\n    cur_tab[cur]=1\n    if cur_tab[1]==1:\n        print(1)\n        return\nprint(reduce(gcd, [index for index in range(n+1) if cur_tab[index] == 1]))", "from math import gcd\nfrom functools import reduce\nimport sys\nimport os \nd=sys.stdin.readlines()\n\nclass Tab(object):\n    def __init__(self):\n        self.value = [0 for _ in range(n+1)]\n    \n    def set_one(self, ind):\n        if ind==1:\n            print(1)\n            return\n        else:\n            self.value[ind]=1\n    \n    def ones(self):\n        return [index for index in range(n+1) if self.value[index] == 1]\n\nn = int(d[0])\ncur_tab = Tab()\n\n\ndef group(l):\n    cur = 1\n    for x in range(1,n):\n        if l[x] == l[x-1]:\n            cur+=1\n        else:\n            cur_tab.set_one(cur)\n            cur=1\n    cur_tab.set_one(cur)\n\n\nmat=[None for _ in range(n)]\neuh=0\n\nfor x in d[1:]:\n    line = x[:-1]\n    s=str(bin(int(line, 16)))[2:].zfill(n)\n    mat[euh]=s\n    euh+=1\n    group(s)\nfor i in range(n):\n    cur=1\n    for x in range(1,n):\n        if mat[x][i] == mat[x-1][i]:\n            cur+=1\n        else:\n            cur_tab.set_one(cur)\n            cur=1\n    cur_tab.set_one(cur)\nprint(reduce(gcd, cur_tab.ones()))", "from math import gcd\nfrom functools import reduce\nimport sys\nimport os \n# Testing burritos code\nd=sys.stdin.read().splitlines()\n\nclass Tab(object):\n    def __init__(self):\n        self.value = [0 for _ in range(n+1)]\n    \n    def set_one(self, ind):\n        if ind==1:\n            print(1)\n            return\n        else:\n            self.value[ind]=1\n    \n    def ones(self):\n        return [index for index in range(n+1) if self.value[index] == 1]\n\nn = int(d[0])\ncur_tab = Tab()\n\n\ndef group(l):\n    cur = 1\n    for x in range(1,n):\n        if l[x] == l[x-1]:\n            cur+=1\n        else:\n            cur_tab.set_one(cur)\n            cur=1\n    cur_tab.set_one(cur)\n\n\nmat=[None for _ in range(n)]\neuh=0\n\nfor line in d[1:]:\n    s=str(bin(int(line, 16)))[2:].zfill(n)\n    mat[euh]=s\n    euh+=1\n    group(s)\nfor i in range(n):\n    cur=1\n    for x in range(1,n):\n        if mat[x][i] == mat[x-1][i]:\n            cur+=1\n        else:\n            cur_tab.set_one(cur)\n            cur=1\n    cur_tab.set_one(cur)\nprint(reduce(gcd, cur_tab.ones()))", "from math import gcd\nimport sys\nn = int(sys.stdin.readline())\na = [[] for i in range(n)]\nfor i in range(n):\n    a[i] = bin((1 << n) | int(sys.stdin.readline(), 16))[3:]\n\n\nans, i = 0, 0\nwhile i < n:\n    j = i + 1\n    while j < n and a[i] == a[j]:\n        j += 1\n    ans = gcd(ans, j - i)\n\n    k = 0\n    while k < n:\n        l = k + 1\n        while l < n and a[i][k] == a[i][l]:\n            l += 1\n        ans = gcd(ans, abs(l - k))\n        k = l\n    i = j\nprint(ans)\n", "import sys\nfrom math import gcd\n\nn = int(sys.stdin.readline())\nmatrix = [[] for _ in range(n)]\nfor i in range(n):\n\tmatrix[i] = bin((1<<n) | int(sys.stdin.readline(), 16))[3:]\n\nans = 0\ni = 0\n\nwhile(i<n):\n\tj = i+1\n\twhile(j<n and matrix[i]==matrix[j]): #Recorro por filas\n\t\tj+=1\n\tans = gcd(ans,j-i)\n\n\tcol = 0\n\twhile(col<n):\n\t\tl = col + 1\n\t\twhile(l<n and matrix[i][col]==matrix[i][l]): #Recorro por columnas\n\t\t\tl+=1\n\t\tans = gcd(ans, col-l)\n\t\tcol = l\n\ti = j\n\nprint(ans)", "from math import gcd\ndef D():\n\n\tn = int(input())\n\tmatrix = [0 for _ in range(n)]\n\tfor i in range(n):\n\t\ta = bin(int(input(), 16))[2:]\n\t\tmatrix[i] = '0'*(n-len(a))+ a\n\n\tans = 0\n\ti = 0\n\n\twhile(i<n):\n\t\tj = i+1\n\t\twhile(j<n and matrix[i]==matrix[j]): #Recorro por filas\n\t\t\tj+=1\n\t\tans = gcd(ans,j-i)\n\n\t\tcol = 0\n\t\twhile(col<n):\n\t\t\tl = col + 1\n\t\t\twhile(l<n and matrix[i][col]==matrix[i][l]): #Recorro por columnas\n\t\t\t\tl+=1\n\t\t\tans = gcd(ans, col-l)\n\t\t\tcol = l\n\t\ti = j\n\n\tprint(ans)\n\nD()", "import sys\nfrom math import gcd\nn = int(sys.stdin.readline())\nmatrix = [[] for _ in range (n)]\nfor i in range (n) : matrix[i] = bin((1 << n) | int(sys.stdin.readline(), 16))[3:]\ni = ans = 0\nwhile i < n :\n\tj = i + 1\n\twhile j < n and matrix[i] == matrix[j] : j += 1\n\tans = gcd(ans, j - i)\n\tcol = 0\n\twhile col < n :\n\t\tl = col + 1\n\t\twhile l < n and matrix[i][col] == matrix[i][l] : l += 1\n\t\tans = gcd(ans, col - l)\n\t\tcol = l\n\ti = j\nprint(ans)\n"]