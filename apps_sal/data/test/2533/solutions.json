["# cook your dish here\nimport sys\nfrom collections import defaultdict\n\nclass Graph(object):\n\t\"\"\"docstring for Graph\"\"\"\n\tdef __init__(self, vertices):\n\t\tself.vertices = vertices\n\t\tself.graph = defaultdict(list)\n\n\tdef add_edge(self,a,b):\n\t\tself.graph[a].append(b)\n\t\tself.graph[b].append(a)\n\n\tdef eulerPath(self):\n\t\tg = self.graph\n\t\todd = [k for k, v  in g.items() if len(v)%2 == 1]\n\t\tif len(odd) == 0 :\n\t\t\todd = [list(g.keys())[0]]\n\t\telif len(odd) == 1 or len(odd) > 2 :\n\t\t\treturn None\n\t\tpath = []\n\t\tstack = [odd[-1]]\n\t\twhile stack:\n\t\t\tu = stack[-1]\n\t\t\tif g[u]:\n\t\t\t\tv = g[u][0]\n\t\t\t\tdel g[u][0]\n\t\t\t\tdel g[v][g[v].index(u)]\n\t\t\t\tstack.append(v)\n\t\t\telse:\n\t\t\t\tpath.append(stack.pop())\n\t\treturn path\n\nn, e = map(int, sys.stdin.readline().strip().split())\ng = Graph(n)\n\nu = []\nv = []\n\nfor i in range(e):\n\ta, b = map(int, sys.stdin.readline().strip().split())\n\tg.add_edge(a,b)\n\tu.append(a)\n\tv.append(b)\n\t\nans = g.eulerPath()\n\nif ans is None:\n\tprint('NO')\nelse:\n\tif len(ans) == (e+1) and ans[0] == ans[-1]:\n\t\tprint(\"YES\")\n\t\ttemp = defaultdict(defaultdict)\n\t\tfor i in range(len(ans)-1, 0, -1):\n\t\t\ttemp[ans[i]][ans[i - 1]] = True\n\t\tfor i in range(e):\n\t\t\tif u[i] in temp and v[i] in temp[u[i]]:\n\t\t\t\tprint(u[i], v[i])\n\t\t\telse:\n\t\t\t\tprint(v[i], u[i]) \t\t\n\telse:\n\t\tprint(\"NO\")", "class Graph(object):\r\n\t\"\"\"docstring for Graph\"\"\"\r\n\tdef __init__(self, vertices):\r\n\t\tself.vertices = vertices\r\n\t\tgraph = dict()\r\n\t\tfor i in range(1, vertices+1):\r\n\t\t\tgraph[i] = []\r\n\t\tself.graph = graph\r\n\r\n\tdef add_edge(self,a,b):\r\n\t\tself.graph[a].append(b)\r\n\t\tself.graph[b].append(a)\r\n\r\n\tdef eulerPath(self):\r\n\t\tg = self.graph\r\n\t\todd = [k for k, v  in g.items() if len(v)%2 == 1]\r\n\t\tif len(odd) == 0 :\r\n\t\t\todd = [list(g.keys())[0]]\r\n\t\telif len(odd) == 1 or len(odd) > 2 :\r\n\t\t\treturn None\r\n\t\tpath = []\r\n\t\tstack = [odd[-1]]\r\n\t\twhile stack:\r\n\t\t\tu = stack[-1]\r\n\t\t\tif g[u]:\r\n\t\t\t\tv = g[u][0]\r\n\t\t\t\tdel g[u][0]\r\n\t\t\t\tdel g[v][g[v].index(u)]\r\n\t\t\t\tstack.append(v)\r\n\t\t\telse:\r\n\t\t\t\tpath.append(stack.pop())\r\n\t\treturn path\r\n\r\nn, e = map(int, input().strip().split())\r\ng = Graph(n)\r\n\r\nu = []\r\nv = []\r\n\r\nfor i in range(e):\r\n\ta, b = map(int, input().strip().split())\r\n\tg.add_edge(a,b)\r\n\tu.append(a)\r\n\tv.append(b)\r\n\t\r\nans = g.eulerPath()\r\n\r\nif ans is None:\r\n\tprint('NO')\r\nelse:\r\n\tif len(ans) == (e+1) and ans[0] == ans[-1]:\r\n# \t\tprint(ans)\r\n\t\tprint(\"YES\")\r\n\t\ttemp_dict = {}\r\n\t\tfor i in range(len(ans)-1,0,-1):\r\n\t\t\tif ans[i] in temp_dict:\r\n\t\t\t\ttemp_dict[ans[i]][ans[i-1]] = True\r\n\t\t\telse:\r\n\t\t\t\ttemp_dict[ans[i]] = {ans[i-1]:True}\r\n\t\tfor i in range(e):\r\n\t\t\tif u[i] in temp_dict and v[i] in temp_dict[u[i]]:\r\n\t\t\t\tprint(u[i] , v[i])\r\n\t\t\telse:\r\n\t\t\t\tprint(v[i], u[i])\r\n\telse:\r\n\t\tprint(\"NO\")"]