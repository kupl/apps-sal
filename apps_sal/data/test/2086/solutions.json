["n = int(input())\na = [int(i) for i in input().split()]\ns, f = [int(i) for i in input().split()]\na = a + a\nln = f - s\nans = sum(a[:ln])\nmx = ans\nh = s\nfor i in range(n - 1):\n    ans = ans - a[i] + a[i + ln]\n    if ans > mx:\n        ans = mx\n        k = s + (n - (i + 2) + 1)\n        if k > n:\n            k -= n  \n        h = k\n    elif ans == mx:\n        k = s + (n - (i + 2) + 1)\n        if k > n:\n            k -= n    \n        h = min(h, k)\nprint(h)\n", "import sys, math\n\n#f = open('input/input_1', 'r')\nf = sys.stdin\n\nN = int(f.readline())\na = list(map(int, f.readline().split()))\nstart, end = list(map(int, f.readline().split()))\n\ntime_len = end-start\nsum_p = 0\nmax_sum = -1\nmax_sum_end = 10000000\nfor i in range(N*2):\n  if i >= time_len:\n    sum_p -= a[(i-time_len)%N]\n  sum_p += a[i % N]\n  ans = (2*N + end - i - 1) % N\n  if ans == 0:\n    ans = N\n  if i >= time_len-1 and \\\n    (max_sum < sum_p or (max_sum == sum_p and max_sum_end > ans)):\n    max_sum = sum_p\n    max_sum_end = ans\n\nprint(max_sum_end)\n\n'''\n5\n10 2 3 4 10\n1 5\n\n1 2 3 4 5\n4 5 1 2 3\n'''\n", "n = int(input())\nL = list(map(int, input().split()))\ns, f = list(map(int, input().split()))\ncount = 0\ncount_max = 0\nans = 0\nfor i in range(s - 1, f - 1):\n    count += L[i]\nfor i in range(n):\n    count -= L[f - 1]\n    s -= 1\n    f -= 1\n    if s == -1:\n        s = n - 1\n    if f == -1:\n        f = n - 1\n    count += L[s]\n    if count > count_max:\n        count_max = count\n        ans = i\nprint(ans + 1) \n", "R = lambda : map(int, input().split())\n\nn = int(input())\na = list(R())\ns,f = R()\n\nd = f-s\n\ndef solve(a,d,n,s):\n    if (n < d + 1):\n        return s\n\n    t = 0\n    for i in range(0, d):\n        t += a[i]\n\n    m = t\n    res = s\n    for i in range(1, n):\n        t += a[(i + d - 1) % n] - a[i - 1]\n        if t > m:\n            m = t\n            res = gr(i,s,n)\n        elif t == m:\n            res = min(res, gr(i,s,n))\n    \n    return res\n    \n\ndef gr(i,s,n):\n    res = (s-i) % n\n    if (res <= 0):\n        return n-res\n    return res\n\nprint(solve(a,d,n,s))", "#This code sucks, you know it and I know it.  \n#Move on and call me an idiot later.\n\ndef ps(l, i, j):\n    if i > j:\n        return l[-1]-l[i-1] + l[j]\n    if i==0:\n        return l[j]\n    else:\n        return l[j]-l[i-1]\n\nn =  int(input())\na = list(map(int, input().split()))\ns, f = map(int, input().split())\n\nl = [a[0]]\nfor i in a[1:]:\n    l.append(l[-1]+i)\nx = s-1\ny = f-2\nans = 0\ntm = 0\nfor i in range(n):\n    temp = ps(l, x, y)\n    if temp > ans:\n        tm = i+1\n        ans = temp \n    x -= 1\n    y -= 1\n    if x < 0:\n        x = n-1\n    if y < 0:\n        y = n-1\nprint(tm)", "n = int(input())\narr = list(map(int, input().split()))\ns, f = list(map(int, input().split()))\n\nnum = 0\nfor i in range(s - 1, f - 1):\n\tnum += arr[i]\n\nt = 0\ncurrent = num\nfor time in range(n):\n\tcurrent = current - arr[(s - 1 + time) % n] + arr[(f - 1 + time) % n]\n\tif (current >= num):\n\t\tnum = current\n\t\tt = time\n\nprint(n - t)\n", "# C\n\nimport copy\n\nN = int(input())\nA = list(map(int, input().split()))\ns, f = list(map(int, input().split()))\n\nB = copy.deepcopy(A)\nC = A + B  # A\u3092\u4e8c\u3064\u9023\u7d50\u3057\u305f\u30ea\u30b9\u30c8\n\nl = f - s\nmax_list = []\nmax_number = 0\n\nsumC = [0 for i in range(N)]\n\nsumC[0] = sum(C[0:l])\nfor i in range(1, N):\n    sumC[i] = sumC[i-1] + C[i+l-1] - C[i-1]\n\nfor i in range(N):\n    if sumC[i] > max_number:\n        max_list = [i]\n        max_number = sumC[i]\n    elif sumC[i] == max_number:\n        max_list.append(i)\n\nans_list = []\nfor j in max_list:\n    for i in range(N):\n        if j + i < N:\n            if s + i <= N:\n                A[j + i] = s + i\n            else:\n                A[j + i] = s + i - N\n        else:\n            if s + i <= N:\n                A[j + i - N] = s + i\n            else:\n                A[j + i - N] = s + i - N\n    ans_list.append(A[0])\n\nprint(min(ans_list))\n", "n = int(input())\na = [int(i) for i in input().split()]\ns, f = map(int, input().split())\ns -= 1\nf -= 2\npref = [0] * n\npref[0] = a[0]\nfor i in range(1, n):\n\tpref[i] = pref[i - 1] + a[i]\nmx = -1\nans = 0\nfor hour in range(n):\n\tleft = s - hour\n\tright = f - hour\n\tif left < 0:\n\t\tleft += n\n\tif right < 0:\n\t\tright += n\n\tres = -1\n\tif left <= right:\n\t\tres = pref[right] - (pref[left - 1] if left > 0 else 0)\n\telse:\n\t\tres = pref[n - 1] - (pref[left - 1] if left > 0 else 0) + pref[right]\n\tif res > mx:\n\t\tmx = res\n\t\tans = hour + 1\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\ns, f = list(map(int, input().split()))\n\nd = f-s\nmsum = 0\nminx = 10**6\ntemp = a+a[:d+1]\nsumt=0\n\nfor x in range(n + d + 1):\n    sumt+=temp[x]\n    if (x >= d):\n        sumt-= temp[x-d]\n    #print(sumt, (n - x + s + d- 2)%n + 1, x)\n    if (sumt > msum):\n        minx = 10**6\n        msum = sumt\n        minx = min(minx, (n-x+s+d - 2)%n + 1)\n    elif (sumt == msum):\n        minx = min(minx, (n-x+s+d - 2)%n + 1)\nprint(minx)\n", "n = int(input())\n\nA = list(map(int, input().split()))\n\ns, f = list(map(int, input().split()))\n\ns -= 1\nf -= 1\n\nm = int(1e+9)\n\nbest_sum = sum(A[s: f + 1])\ncur_sum = best_sum\nbest_i = 0\n\nfor i in range(1, n):\n    cur_sum += A[(s - i + n) % n]\n    cur_sum -= A[(f - i + n) % n]\n    if cur_sum > best_sum:\n        best_sum = cur_sum\n        best_i = i\n\nprint(best_i + 1)\n", "n = int(input())\na = list(map(int, input().split()))\ns, f = map(int, input().split())\ns -= 1\nf -= 1\nbest_sum = sum(a[s:f + 1])\nbest_i = 0\ncur_sum = best_sum\nfor i in range(1, n):\n    cur_sum += a[(s - i + n) % n]\n    cur_sum -= a[(f - i + n) % n]\n    if cur_sum > best_sum:\n        best_sum = cur_sum\n        best_i = i\nprint(best_i + 1)", "n = int(input())\na = [0]\nb =input().split()\na = a+b\nans  = 0\nm = 0\nfor i in range(1,n+1):\n    a[i] = int(a[i])\ns,f = input().split()\ns = int(s)\nf = int(f)\nfor i in range(s,f):\n    m+=a[i]\nma = m\nans = 1\nstart = s-1\ncount = f-1\nif count<1:\n    count = n\nif start<1:\n    start = n\nfor i in range(2,n+1):\n    m = m-a[count] + a[start]\n    count = count-1\n    start = start - 1\n    if count==0:\n        count = n\n    if start==0:\n        start = start=n\n    if m>ma:\n        ma = m\n        ans = i\nprint(ans) ", "n = int(input())\na = list(map(int, input().split()))\ns, f = map(int, input().split())\ns -= 1\nf -= 1\nbest_sum = sum(a[s:f])\nbest_i = 0\ncur_sum = best_sum\nfor i in range(1, n):\n    cur_sum += a[(s - i + n) % n]\n    cur_sum -= a[(f - i + n) % n]\n    if cur_sum > best_sum:\n        best_sum = cur_sum\n        best_i = i\nprint(best_i + 1)", "n = int(input())\nA = [int(x) for x in input().split()]\nA = A+A\ns,f = list(map(int,input().split()))\n\nl = f-s\nS = sum(A[:l])\nmi = 0\nmS = S\nans = (s-1-mi)%n + 1\nfor i in range(n-1):\n    S = S + A[i+l] - A[i] \n    if mS == S:\n        mi = i+1\n        ans = min(ans, (s-1-mi)%n + 1) # Update min\n    if mS < S:\n        mS = S\n        mi = i+1\n        ans = (s-1-mi)%n + 1 # Set min\nprint(ans)\n", "#import sys\n#sys.stdin = open ('464-C.in', 'r')\n\nn = int(input())\nn = n*2\na = list(map(int,input().split()))\na = a+a\ns, f = list(map(int, input().split()))\nsum = [0 for i in range(n+1)]\nfor i in range(1,n+1):\n    sum[i] = sum[i-1]+a[i-1]\nran = f-s\nmsum, idx = 0, 0\nbb = int(1e18)\nfor i in range(ran,n+1):\n   # print (i, \" = \", sum[i]-sum[i-ran])\n    if sum[i]-sum[i-ran] > msum:\n        msum = sum[i] - sum[i - ran]\n        idx = i-ran+1\n        if idx < s:\n            idx = s - idx + 1\n        elif idx > s:\n            idx = 1 - abs(s - idx)\n            idx += n\n        else:\n            idx = 1\n        idx = idx % (int(n / 2))\n        if (idx == 0):\n            idx = int(n / 2)\n        bb = idx\n    elif sum[i]-sum[i-ran] == msum:\n        idx = i - ran + 1\n        if idx < s:\n            idx = s - idx + 1\n        elif idx > s:\n            idx = 1 - abs(s - idx)\n            idx += n\n        else:\n            idx = 1\n        idx = idx % (int(n / 2))\n        if (idx == 0):\n            idx = int(n / 2)\n        if idx < bb:\n            bb = idx\n            msum = sum[i] - sum[i - ran]\n\n\n#print (msum, \" \", idx)\n\nprint (bb)", "n = int(input())\na = [int(x) for x in input().split()]\ns,f = [int(x) for x in input().split()]\nzones = f-s\ncurrans = 1\ncurrmax = sum(a[s-1 : f-2])\nans=1\nmaxppl = currmax\nfst = s-1\nlst = f-2\nfor currans in range(2, n+1):\n    currmax += a[fst-1 if fst > 0 else n-1]\n    currmax -= a[lst]\n    fst = fst-1 if fst > 0 else n-1\n    lst = lst - 1 if lst > 0 else n - 1\n    if currmax > maxppl:\n        maxppl = currmax\n        ans = currans\nprint(ans)\n", "n=int(input())\na=[int(i) for i in input().split()]\ns,f=(int(i) for i in input().split())\npref=[a[0]]\nfor i in range(1,n):\n\tpref.append(a[i]+pref[i-1])\n\t\ndef nb_people(strt, end):\n\tif strt<=end:\n\t\tif strt==0:\n\t\t\treturn pref[end]\n\t\telse:\n\t\t\treturn pref[end]-pref[strt-1]\n\telse:\n\t\tret = pref[end]+pref[n-1]\n\t\tif strt>0:\n\t\t\tret-=pref[strt-1]\n\t\treturn ret\n\t\nmax_people=0\nopt_h=0\nfor h in range(1,n+1):\n\tstrt=s-h+1#\u00e0 h heures ds le 1er fuseau o\u00f9 est - il s heures ?\n\tif strt<=0:\n\t\tstrt+=n\n\tend =f-h#pareil avec f-1\n\tif end<=0:\n\t\tend+=n\n\ttmp_people = nb_people(strt-1, end-1)\n\t#print(\"h\",h,\"strt\", strt, \"end\", end,\"tmp_people\",tmp_people)\n\tif tmp_people>max_people:\n\t\tmax_people=tmp_people\n\t\topt_h = h\nprint(opt_h)\n", "from sys import stdin as si\nfrom collections import Counter as c\n\n\nclass Solution:\n\n    def bazinga(self, n,m, k):\n        mnp = sum(m[k[0]-1:k[1]-1])    # min number of participants\n        diff = k[1]-k[0]\n        mxp,ans = mnp, 0              # maximizing participants\n        for i in range(1,n):\n            # print (i,diff, mxp,mnp, sum(m[i: diff+i]))\n            mxp +=  m[(k[0]-i-1 + n) % n]\n            mxp -= m[(k[1]-i-1 + n) % n]\n            if mxp > mnp:\n                mnp,ans = mxp, i\n        return ans +1\n\n\ndef __starting_point():\n    #for i in range(int(si.readline().strip())):\n    n = int(si.readline().strip())\n    m = list(map(int, si.readline().strip().split()))\n    k = tuple(map(int, si.readline().strip().split()))\n    S = Solution()\n    print(S.bazinga(n, m, k))\n\n\n\n'''\nhttp://codeforces.com/contest/939/problem/C\n'''\n__starting_point()", "n = int(input())\na = [0] + list(map(int, input().split()))\ns, f = list(map(int, input().split()))\n\nw = f - s\nmax_s = cur_s = sum(a[s:f])\nmax_h = cur_h = s\n\nfor i in range(2, n+1):\n\tcur_h -= 1\n\tif cur_h == 0: \n\t\tcur_h = n\n\tj = i + w - 1\n\tif j > n:\n\t\tj -= n\n\tcur_s = cur_s - a[i-1] + a[j]\n\tif (cur_s > max_s) or (cur_s == max_s and cur_h < max_h):\n\t\tmax_s = cur_s\n\t\tmax_h = cur_h\n\t\t\nprint(max_h)\n\t\n\t\n", "def main():\n    n = int(input())\n\n    a = [int(x) for x in input().split()]\n    a += a\n\n    s, f = [int(x) for x in input().split()]\n\n    dp = [0 for _ in range(2 * n + 1)]\n    for i in range(2 * n):\n        dp[i + 1] = dp[i] + a[i]\n\n    ans, sum = 0, 0\n\n    for i in range(n):\n        cur_sum = dp[f + n - i - 1] - dp[s + n - i - 1]\n\n        if cur_sum > sum:\n            ans = i\n            sum = cur_sum\n\n    ans += 1\n    print(ans)        \n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nps = [ int(a) for a in input().split() ]\ns,f = [ int(a) for a in input().split() ]\n\nwindow = f-s\nps += ps[:window]\n\ndef f(x):\n    return (s-1-x)%n + 1\n\nanswers = []\nc = m = sum(ps[:window])\nfor i in range(n):\n    if c > m:\n        answers = [f(i)]\n        m = c\n    elif c == m:\n        answers += [f(i)]\n    c += ps[i+window]-ps[i]\n\nprint(min(answers))", "h = int(input())\nppl = [int(x) for x in input().split()]\nsl = [int(x) for x in input().split()]\nn = sl[1] - sl[0] if sl[1] > sl[0] else sl[1] - sl[0] + h\nm = 0\nindex = 0\ntemp = sum(ppl[0:n])\nans = []\nfor i in range(h):\n    if m < temp:\n        m = temp \n        ans.clear()\n        ans.append(i)\n    elif m == temp:\n        ans.append(i)\n    temp -= ppl[i]\n    temp += ppl[(i+n) % h]\nres = [(sl[0] + h - index - 1) % h + 1  for index in ans]\n# print(n)\n# print(m)\nprint(min(res))\n\n    \n", "# Q.C\nn = int(input())\na = input().split(\" \")\na = list(map(int,a))\ns,f = list(map(int, input().split(\" \")))\na.insert(0,0)\n\nx = 1\nxm = x\nli = s-x+1\nri = f-x\ntotalm = sum(a[i] for i in range(li,ri+1))\ntotal = totalm\n\nfor x in range(2, n+1):\n    li -= 1\n    if li == 0:\n        li = n\n    total += a[li]\n    total -= a[ri]\n    ri -= 1\n    if ri == 0:\n        ri = n\n    if total > totalm:\n        totalm = total\n        xm = x\nprint(xm)", "n = int(input())\n\ninp = input().split(\" \")\n\npeople = []\nfor i in range(n):\n\tpeople.append(int(inp[i]))\n\ninp = input().split(\" \")\nstart = int(inp[0])\nend = int(inp[1])\ndiff = end - start\n\noptimal = 1\npeople = people + people\nm = sum(people[0: diff])\nprev_sum = m\n\nfor i in range(1, n):\n\toffset = min(diff, n - i)\n\tprev_sum -= people[i - 1]\n\tprev_sum += people[i + diff - 1]\n\n\tif prev_sum > m:\n\t\tm = prev_sum\n\t\toptimal = i + diff\n\t\toptimal = (end - optimal) % n\n\t\tif optimal == 0:\n\t\t\toptimal = n\n\t\t\t\n\tif prev_sum == m:\n\t\toptimal2 = i + diff\n\t\toptimal2 = (end - optimal2) % n\n\t\tif optimal2 == 0:\n\t\t\toptimal2 = n\n\n\t\tif optimal2 < optimal:\n\t\t\toptimal = optimal2\n\nif m == 0:\n\toptimal = 1\n\nprint(optimal)\n"]