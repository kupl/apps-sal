["import sys\n\nNORM = 2000000\nLIMIT = NORM * 2 + 1\n\nclass segmentTree:\n\tdef __init__(self, n):\n\t\tself.n = n\n\t\tself.t = [0] * (n * 2)\n\t\tself.lazy = [0] * n\n\n\tdef apply(self, p, value):\n\t\tself.t[p] += value\n\t\tif p < self.n:\n\t\t\tself.lazy[p] += value\n\t\t\n\tdef build(self, p):\n\t\twhile p > 1:\n\t\t\tp >>= 1\n\t\t\tself.t[p] = max(self.t[p * 2], self.t[p * 2 + 1]) + self.lazy[p]\n\t\n\tdef push(self, p):\n\t\tlog = 0\n\t\twhile (1 << log) <= self.n:\n\t\t\tlog += 1\n\t\t\n\t\tfor s in range(log, 0, -1):\n\t\t\tparent = p >> s\n\t\t\tif self.lazy[parent] != 0:\n\t\t\t\tself.apply(parent * 2, self.lazy[parent])\n\t\t\t\tself.apply(parent * 2 + 1, self.lazy[parent])\n\t\t\t\tself.lazy[parent] = 0 \n\t\n\tdef inc(self, l, r, value):\n\t\tl += self.n\n\t\tr += self.n\n\t\tl0, r0 = l, r\n\t\twhile l < r:\n\t\t\tif l & 1: \n\t\t\t\tself.apply(l, value)\n\t\t\t\tl += 1\n\t\t\tif r & 1:\n\t\t\t\tself.apply(r - 1, value)\n\t\t\t\tr -= 1\n\t\t\tl >>= 1\n\t\t\tr >>= 1\n\t\tself.build(l0)\n\t\tself.build(r0 - 1)\n\t\n\tdef query(self, l, r):\n\t\tl += self.n\n\t\tr += self.n\n\t\tself.push(l)\n\t\tself.push(r - 1)\n\t\tres = 0\n\t\twhile l < r:\n\t\t\tif l & 1:\n\t\t\t\tres = max(res, self.t[l])\n\t\t\t\tl += 1\n\t\t\tif r & 1:\n\t\t\t\tres = max(res, self.t[r - 1])\n\t\t\t\tr -= 1\n\t\t\tl >>= 1\n\t\t\tr >>= 1\n\t\treturn res\n\ninp = [int(x) for x in sys.stdin.read().split()]\nn, r = inp[0], inp[1]\ninp_idx = 2\n\npoints = []\nenv = {}\n\nfor _ in range(n):\n\tx, y = inp[inp_idx], inp[inp_idx + 1]\n\tinp_idx += 2\n\n\tnew_x = x - y\n\tnew_y = x + y\n\tnew_x += NORM\n\tnew_y += NORM\n\t\n\tif not new_y in env:\n\t\tenv[new_y] = []\n\tenv[new_y].append(new_x)\n\tpoints.append([new_x, new_y])\n\nsq_side = r * 2\n\ntree = segmentTree(LIMIT)\n\nys = []\nfor y in list(env.keys()):\n\tys.append(y)\nys = sorted(ys)\n\nans = 0\nlast = 0\nfor i in range(len(ys)):\n\ty = ys[i]\n\twhile i > last and ys[last] < y - sq_side:\n\t\tlow_y = ys[last]\n\t\tfor x in env[low_y]:\n\t\t\tlow_x = max(0, x - sq_side)\n\t\t\ttree.inc(low_x, x + 1, -1)\n\t\tlast += 1\n\t\n\tfor x in env[y]:\n\t\tlow_x = max(0, x - sq_side)\n\t\ttree.inc(low_x, x + 1, +1)\n\n\tans = max(ans, tree.query(0, LIMIT))\n\nprint(ans)\n\t\n\n\n\n"]