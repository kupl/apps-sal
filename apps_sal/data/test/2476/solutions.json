["N = int(input())\nA = list(map(int,input().split()))\nfrom collections import Counter\nfrom bisect import bisect\nvs = list(Counter(A).values())\nvs.sort()\ncums = [0]\nfor v in vs:\n    cums.append(cums[-1] + v)\n\ndef is_ok(k,m):\n    j = bisect(vs,m)\n    z = cums[j] + m*(len(vs)-j)\n    return z >= m*k\n\nans = []\nfor k in range(1,N+1):\n    if k > len(vs):\n        ans.append(0)\n    else:\n        ok = 0\n        ng = N//k + 1\n        while ng-ok > 1:\n            m = (ok+ng)//2\n            if is_ok(k,m):\n                ok = m\n            else:\n                ng = m\n        ans.append(ok)\n\nprint(*ans, sep='\\n')", "from collections import Counter\nimport bisect\nN=int(input())\nA=list(map(int,input().split()))\nC=list(Counter(A).values())\nC.sort()\nL=len(C)\n\n# C\u306e\u3046\u3061x\u4ee5\u4e0a\u306e\u3082\u306e\u306e\u500b\u6570D[x]\u3092\u8a08\u7b97(x=0,...,N)\nD=[L-bisect.bisect_left(C,x) for x in range(N+1)]\nS=[0]\nfor n in range(1,N+1):\n    S.append(S[-1]+D[n])\n\n# T[x]=S[x]/x(x=1,...,N)\u3068\u3057\u3066K\u3092bisect_right\u3067\u633f\u5165\u3057\u305f\u6642\u306eindex\u304c\u7b54\u3048\nT=[x/S[x] for x in range(1,N+1)]\nfor K in range(1,N+1):\n    print(bisect.bisect_right(T,1/K))", "from collections import Counter\nfrom bisect import bisect_left\nfrom itertools import accumulate\n\n# https://betrue12.hateblo.jp/entry/2019/10/20/001106\n\nN = int(input())\nA = list(map(int, input().split()))\na = list(Counter(A).values())\na.sort()\nb = list(accumulate(a))\nlength = len(a)\n\nfor i in range(1, N + 1):\n    if i == 1:\n        print(b[-1])\n    elif len(a) < i:\n        print(0)\n    else:\n        n = b[-1] // i\n        for j in reversed(range(1, n + 1)):\n            t = bisect_left(a, j)\n            if j * i <= b[t - 1] + (length - t) * j:\n                print(j)\n                break", "from collections import Counter\nfrom itertools import accumulate\nn = int(input())\nA = tuple(map(int, input().split()))\nC = Counter(A)\nD = [0]*(n+1)\nfor v in C.values():\n  D[v] += 1\nE = tuple(accumulate(k*d for k, d in enumerate(D)))\nD = tuple(accumulate(D))\nF = [0]*(n+1)\nfor x in range(1, n+1):\n  temp = (E[x] + x*(D[n]-D[x])) // x\n  F[x] = temp\nfor k in range(1, n+1):\n  ok = 0\n  ng = n+1\n  while ng-ok > 1:\n    mid = (ok+ng)//2\n    if k <= F[mid]:\n      ok = mid\n    else:\n      ng = mid\n  print(ok)", "from collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\nc = Counter(a)\nd = Counter(c.values())\n\ndx = [0 for _ in range(n+1)]\nfor i in range(1, n+1):\n\tdx[i] = dx[i-1] + i*d[i]\n\nxdx = [0 for _ in range(n+2)]\nxdx[n] = d[n]\nfor i in range(n-1, 0, -1):\n\txdx[i] = xdx[i+1] + d[i]\n\nres = [0] + [(dx[i] + i*xdx[i+1]) // i for i in range(1, n+1)]\nans = [0 for _ in range(n)]\ncur = n\nfor i in range(n):\n\twhile cur > 0 and res[cur] < i+1:\n\t\tcur -= 1\n\tif cur > 0:\n\t\tans[i] = cur\nprint(*ans, sep=\"\\n\")", "N = int(input())\nA = list(map(int, input().split()))\nC = [0]*N\nfor a in A:\n    C[a - 1] += 1\nD = [0]*(N + 1)\nfor c in C:\n    D[c] += 1\n\nDk_accum = [0]*(N + 1)\nfor i in range(1, N + 1):\n    Dk_accum[i] = Dk_accum[i - 1] + i*D[i]\n    \nD_sum = sum(D)\nD_accum = [0]*(N + 2)\nD_accum[0] = D_sum\nfor i in range(1, N + 1):\n    D_accum[i] = D_accum[i - 1] - D[i - 1]\n    \nF = [0]*(N + 1)\nfor i in range(1, N + 1):\n    F[i] = (Dk_accum[i]//i + D_accum[i + 1])\n\ni = N\nfor K in range(1, N + 1):\n    while i > 0 and K > F[i]:\n        i -= 1\n    print(i)\n", "# coding: utf-8\n# Your code here!\ndef f(m,k):#\u6700\u521d\u306em\u500b, k\u305a\u3064\n    if m == 0: return 0\n    if m < k: return 0\n#    if (m,k) in memo:\n#        return memo[(m,k)]\n    z = 0\n    if acc[m]//k >= c[m]:\n        return acc[m]//k\n    else:\n        return f(m-1,k-1)\n\n\nimport sys\n#sys.setrecursionlimit(10**6)\nreadline = sys.stdin.readline \n\nfrom itertools import accumulate\n\nn = int(input())\na = [int(i) for i in readline().split()]\n\nres = [0]*(n+1)\nfor i in a: res[i] += 1\n\nc = [0]\nfor i in res:\n    if i > 0: c.append(i)\nc.sort()#reverse=True)\n\nl = len(c)-1\n#print(c)\nacc = list(accumulate(c))\n\n#print(acc,c)\nres = [n]+[acc[m]//c[m] for m in range(1,l+1)]\n\n\n#print(l,res)\n\n\nm = l\nfor k in range(1,n+1):\n    k -= l-m\n    if res[m] >= k:\n        print((acc[m]//k))\n    else:\n#        print(k,m)\n        while res[m] < k:\n            m -= 1\n            k -= 1\n        print((acc[m]//(k)))\n\n\n\n\n\n", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\nC = sorted(list(Counter(A).values()), reverse=True)\nL = len(C)\nB = []\n\nnum = C[0]\nfor i, c in enumerate(C):\n    for _ in range(num-c):\n        B.append(i)\n    num = c\nfor _ in range(num):\n    B.append(L)\n\nans = [N]\nfor n in range(2, N+1):\n    if n > L:\n        ans.append(0)\n        continue\n    count = 0\n    stack = []\n    for b in B:\n        tmp = b\n        while stack:\n            if tmp >= n:\n                last = stack.pop()\n                tmp = tmp + last - n\n                count += 1\n            else:\n                break\n        count += tmp//n\n        stack.append(tmp%n)\n    ans.append(count)\n\nprint(*ans, sep='\\n')", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nc = list(Counter(a).values())\nc.sort()\n\nans = n\ncnt = 0\nfor i in range(n):\n    m = i + 1 - cnt\n    while c and c[-1] > ans // m:\n        ans -= c.pop()\n        cnt += 1\n        m -= 1\n    print(ans // m)", "import os\nimport sys\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n# \u89e3\u8aacAC\n# https://twitter.com/maspy_stars/status/1185552225474498560\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\n\nC = list(np.bincount(A).tolist())\nC.sort()\ndeleted = 0\nS = N\n\n\ndef solve(k):\n    nonlocal S, deleted\n\n    k -= deleted\n    while k > 0 and C[-1] > S // k:\n        S -= C.pop()\n        deleted += 1\n        k -= 1\n    if k > 0:\n        return S // k\n    return 0\n\n\nfor k in range(1, N + 1):\n    print((solve(k)))\n", "N = int(input())\n \nA = list(map(int,input().split()))\n \ndic = {}\n \nfor a in A:\n \n    if a not in dic:\n        dic[a] = 1\n    else:\n        dic[a] += 1\n \nB = []\nfor i in dic:\n    B.append(dic[i])\n \nB.sort()\n \nB_sub = B.copy()\n \nfor i in range(len(B)-1):\n    B_sub[i+1] += B_sub[i] \n \naind = N + 1\nnind = len(B) - 1\n \n#print (B,B_sub)\n \nfor i in range(N):\n \n    i += 1\n \n    while True:\n \n        while nind > 0 and B[nind] > aind - 1:\n \n          nind -= 1\n \n        if i > len(B):\n            print (0)\n            break\n \n        elif ((len(B) - 1) - nind ) * (aind-1) + B_sub[nind] >= (aind - 1) * i:\n            print (aind - 1)\n            break\n \n        aind -= 1", "import collections\nimport numpy as np\n\n# \u30ea\u30b9\u30c8arr\u304b\u3089x\u500b\u306e\u540c\u3058\u9577\u3055\u306e\u5217\u3092\u53d6\u308a\u51fa\u3059\u6642\u306e\u6700\u5927\u306e\u9577\u3055\n# \u767a\u60f3: x\u500b\u53d6\u308a\u51fa\u3059\u6642\u3001\u3042\u308b\u6587\u5b57\u3092x\u500b\u3088\u308a\u591a\u304f\u53d6\u308a\u51fa\u3057\u3066\u5217\u306b\u542b\u3080\u3053\u3068\u306f\u306a\u3044\n#       \u4e00\u65b9\u3042\u308b\u6587\u5b57\u3092\u305d\u306e\u6587\u5b57\u304c\u3042\u308b\u6570\u3088\u308a\u3082\u53d6\u308a\u51fa\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u306a\u3044\n#       \u3064\u307e\u308a\u3001min(arr.count(a), x)\u3067\u3001x\u500b\u306e\u540c\u3058\u9577\u3055\u306e\u5217\u306b\u4f7f\u3048\u308ba\u306e\u6570\u304c\u308f\u304b\u308b\n#       \u3055\u3089\u306b\u3001sum(min(arr.count(a),x))\u3067\u3001x\u500b\u306e\u540c\u3058\u9577\u3055\u306e\u5217\u306b\u4f7f\u3048\u308b\u6587\u5b57\u306e\u6570\u304c\u308f\u304b\u308b\n#       \u3088\u3063\u3066\u3001sum(min(arr.count(a),x))//x\u3067\u3001x\u500b\u306e\u540c\u3058\u9577\u3055\u306e\u5217\u306e\u9577\u3055\u304c\u308f\u304b\u308b\n#       \u767a\u5c55\u7684\u306b\u3001longest(arr,x)\u307e\u3067\u306e\u8a08\u7b97\u72b6\u6cc1\u304b\u3089longest(arr,x+1)\u304c\u8a08\u7b97\u3067\u304d\u308b\n# def longest(arr, x):    # legacy\n#     return sum(min(arr.count(a), x) for a in arr) // x\n\n\nn = int(input())\na = list(map(int, input().split()))\n\ncounter = collections.Counter(a)        #O(n)\nnums = list(counter.values())           #O(n)\nnum_counter = collections.Counter(nums) #O(n)\nlastest_add = np.count_nonzero(nums)    #O(n)\nbuilding, longests = [0], [0]\nfor i in range(1, n+1):                 #O(n)\n    appended = building[-1] + lastest_add   #O(1)\n    building.append(appended)               #O(1)\n    longests.append(appended // i)          #O(1)\n    lastest_add -= num_counter[i]           #O(1)\n\n\nlastest_longest = 0\nk_most = []\nfor i, x in enumerate(reversed(longests)):\n    while x > lastest_longest:\n        lastest_longest += 1\n        k_most.append(n-i)\n\nk_most.extend([0]*(n-len(k_most)))      # zero padding\n\nfor longests_num in k_most:\n    print(longests_num)\n\n# print('----------------')\n# for k in range(1, n+1):\n#     maxindexes = list(i for i, x in enumerate(longests) if x >= k)\n#     if maxindexes:\n#         print(maxindexes[-1])\n#     else:\n#         print(0)\n", "import bisect\n\nn = int(input())\nA = list(map(int, input().split()))\ncounts = [0]*(n)\nfor a in A:\n    counts[a-1] += 1\ncounts.sort()\n\ncumsum = []\nnum = 0\nfor count in counts:\n    num += count\n    cumsum.append(num)\n\nanswers = [0]*(n)\nfor i in range(1, n+1):\n    idx = bisect.bisect_right(counts, i)\n    left = cumsum[idx-1]\n    right = (n-idx)*i\n    K = (right+left)//i\n    answers[K-1] = i\n\nnow = 0\nfor i in range(n-1, -1, -1):\n    if answers[i] == 0:\n        answers[i] = now\n    now = answers[i]\n\nfor ans in answers:\n    print(ans)", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    C = [0] * (N+1)\n    Cnt_A = [0] * (N+1)\n    for a in A:\n        Cnt_A[a] += 1\n        cnt = Cnt_A[a]\n        C[cnt] += 1\n    cum_C = []\n    cu = 0\n    for c in C:\n        cu += c\n        cum_C.append(cu)\n    Ans = []\n    for k in range(1, N+1):\n        # K = k \u306e\u3068\u304d\u3001 n \u7d44\u4ee5\u4e0a\u4f5c\u308c\u308b <=> \u4f7f\u3048\u308b\u30ab\u30fc\u30c9\u304c nk \u679a\u4ee5\u4e0a\n        # n \u7d44\u4ee5\u4e0a\u4f5c\u308c\u308b <=> \u540c\u3058\u30ab\u30fc\u30c9\u306f n \u679a\u4ee5\u4e0b\n        # \u540c\u3058\u30ab\u30fc\u30c9\u306f n \u679a\u4ee5\u4e0b\u3067\u5168\u4f53\u3068\u3057\u3066 nk \u679a\u4ee5\u4e0a\u7528\u610f\u3067\u304d\u308b\u304b\uff1f\n        ok, ng = 0, N//k+1\n        while ok + 1 < ng:\n            n = ok+ng>>1\n            if cum_C[n] >= n*k:\n                ok = n\n            else:\n                ng = n\n        Ans.append(ok)\n    print((\"\\n\".join(map(str, Ans))))\n\nmain()\n", "n = int(input())\narr = list(map(int,input().split()))\n\nfrom collections import Counter\nc = Counter(arr)\nc = list(c.values())\nc.sort()\ns = n\n\nsol = []\nremoved = 0\nfor k in range(1,n+1):\n    rest = k - removed\n    while c and c[-1] > s//rest:\n        s -= c[-1]\n        c.pop()\n        rest -= 1\n        removed += 1\n    sol.append(s//rest)\n\nprint(\"\\n\".join(map(str,sol)))", "N = int(input())\nA = list(map(int, input().split()))\n\nC = [0] * N\nD = [0] * (N + 1)\nfor a in A:\n    C[a - 1] += 1\n    D[C[a - 1]] += 1\n\nS = [0] * (N + 1)\nfor i in range(N):\n    S[i + 1] = S[i] + D[i + 1]\n\nans = N\nfor K in range(1, N + 1):\n    while ans > 0 and S[ans] < K * ans:\n        ans -= 1\n    print(ans)", "#!/usr/bin/env python3\nimport sys\nimport collections\n\ndef solve(N: int, A: \"List[int]\"):\n    counter = sorted(list(collections.Counter(A).values()),reverse=True)\n    c_index = 0\n    k=0\n    for i in range(1,N+1):\n        k+=1\n        if len(counter)<i:\n            print((0))\n            continue\n        while counter[c_index]*k > N and c_index<len(counter)-1:\n            N-=counter[c_index]\n            c_index+=1\n            k-=1\n        print((N//k))\n    return\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\nimport time,random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\ndef JA(a, sep): return sep.join(map(str, a))\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\n\n\ndef main():\n    n = I()\n    c = sorted(collections.Counter(LI()).values(), reverse=True) + [0]\n    ci = 0\n    t = n\n    r = [0]\n    for i in range(n,0,-1):\n        while c[ci] > i:\n            ci += 1\n        t -= ci\n        r.append(t // i)\n\n    rr = []\n    r.reverse()\n    ri = 0\n    for i in range(n,0,-1):\n        while r[ri] >= i:\n            ri += 1\n        rr.append(ri)\n\n    rr.reverse()\n\n    return JA(rr,\"\\n\")\n\n\nprint(main())\n\n\n", "from collections import Counter\nN = int(input())\nC = sorted(list(Counter(list(map(int, input().split()))).values()))\n\nrest = N\nremoved = 0\nfor K in range(1, N + 1):\n    d = K - removed\n    while C and C[- 1] > rest//d:\n        rest -= C[- 1]\n        C.pop()\n        removed += 1\n        d -= 1\n    print((rest//d))\n", "# F - Distinct Numbers\nfrom bisect import bisect_left\n\ndef isOK(c, k, N, L, cum_sum):\n    i = bisect_left(L, c)\n    s = c * (N - i) + cum_sum[i];\n    return (s >= c * k)\n\nN = int(input())\nD = list(map(int, input().split()))\nfreq = [0] * N\nfor d in D:\n    freq[d - 1] += 1\n    \nfreq.sort()\ncum_sum = [0] * (N + 1)\nfor i in range(N):\n    cum_sum[i + 1] = cum_sum[i] + freq[i]\n    \nfor k in range(1, N + 1):\n    l = 0\n    r = int(N / k) + 1\n    while l + 1 < r:\n        c = int((l + r) / 2)\n        ok = isOK(c, k, N, freq, cum_sum)\n        if ok:\n            l = c\n        else:\n            r = c\n    print(l)\n", "import sys\ninput = sys.stdin.readline\n\nfrom collections import Counter\nfrom itertools import accumulate\nfrom math import floor\nfrom bisect import bisect_left\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    c = Counter(a)\n    c = list(c.values())\n\n    d = Counter(c)\n    d_li = [0] * (n + 1)\n    for k, v in list(d.items()):\n        d_li[k] = v\n\n    dk_acm = list(accumulate(d_li))\n\n    kdk_acm = [0]\n    for k, e in enumerate(d_li[1:], 1):\n        kdk_acm.append(kdk_acm[-1] + k * e)\n\n    def f(x):\n        kdk_sm = kdk_acm[x]\n        dk_sm = dk_acm[n] - dk_acm[x]\n\n        return floor((kdk_sm + x * dk_sm) / x)\n\n    fs = [float(\"inf\")] + [f(x) for x in range(1, n + 1)]\n    fs = fs[::-1]\n\n    for k in range(1, n + 1):\n        print((n - bisect_left(fs, k)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys \nimport collections as cl\n\n\nN=int(input())\nA=list(map(int,sys.stdin.readline().split()))\nc=cl.Counter(A)\nNumberTupleList=c.most_common()\nNumberList=[x[1] for x in NumberTupleList[::-1]]\nLengthOfNumberList=len(NumberList)\nFormulaList=[0 for i in range(N)]\nflag=0\nS=sum(NumberList)\nfor x in range(1,N+1):\n    while flag<LengthOfNumberList and NumberList[flag]<=x:\n        flag+=1\n    if flag<LengthOfNumberList:\n        FormulaList[x-1]=(sum(NumberList[:flag])+x*(LengthOfNumberList-flag))/x\n    else:\n        FormulaList[x-1]=S/x\npin=N-1\nfor K in range(1,N+1):\n    while pin>=0 and K>FormulaList[pin]:\n        pin-=1\n    print((pin+1))\n\n", "from bisect import bisect_left\n\nN = int(input())\nA = list(map(int, input().split()))\n\nlst = [0] * (N + 1)\nfor a in A:\n    lst[a - 1] += 1\nlst.sort() #\u983b\u5ea6\u5217\n\ns = [0] * (N + 1)\nfor i in range(N):\n    s[i + 1] = s[i] + lst[i + 1]\n\n# print (lst)\n# print (s)\n\ndef check(x, k):\n    i = bisect_left(lst, x) - 1\n    total = x * (N - i) + s[i]\n    return total >= x * k\n\n\nfor k in range(1, N + 1):\n    l = 0 #OK\n    r = N // k + 1 #NG\n    while l + 1 < r:\n        c = (l + r) // 2\n        if check(c, k):\n            l = c\n        else:\n            r = c\n    print (l)\n", "import os\nimport sys\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n# \u89e3\u8aacAC\n# https://img.atcoder.jp/abc143/editorial.pdf\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\n\nA = np.array(A, dtype=int)\nC = np.bincount(A, minlength=N + 2)\nD = np.bincount(C, minlength=N + 2)\n\nld = (D * np.arange(len(D))).cumsum()\nud = D[::-1].cumsum()[::-1]\n\nX = np.arange(1, N + 1, dtype=int)\n# L[x]: x \u56de\u53d6\u308c\u308b\u3068\u304d\u306e\u6700\u5927\u306e\u9577\u3055 k\nL = np.zeros(N + 1, dtype=int)\nL[X] = (ld[X] + X * ud[X + 1]) // X\n\ni = len(L) - 1\nfor k in range(1, N + 1):\n    while i > 0 and L[i] < k:\n        i -= 1\n    print(i)\n", "from collections import Counter\nN = int(input())\n#C = sorted(list(Counter(map(int, input().split())).values()))\nC = list(Counter(map(int, input().split())).values())\nC.sort()\n\nrest = N\nremoved = 0\nfor K in range(1, N + 1):\n    d = K - removed\n    while C and C[- 1] > rest//d:\n        rest -= C[- 1]\n        C.pop()\n        removed += 1\n        d -= 1\n    print(rest//d)", "import sys\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnn = lambda: list(stdin.readline().split())\nns = lambda: stdin.readline().rstrip()\n\nimport bisect\nfrom collections import Counter\n\nn = ni()\na = na()\n\nc = sorted(Counter(a).values())\ncc = [0]\nm = len(c)\nfor i in c:\n    cc.append(cc[-1]+i)\n\ndef is_ok(k,arg):\n    b = bisect.bisect_right(c,arg)\n    p = cc[b] + (m-b)*arg\n    return True if p >= arg*k else False\n\nfor k in range(1,n+1):\n    if k > m:\n        print((0))\n        continue\n    #\u306b\u3076\u305f\u3093\n    ok,ng = -1,n//k+1\n    while (abs(ok - ng) > 1):\n        mid = (ok + ng) // 2\n        if is_ok(k,mid):\n            ok = mid\n        else:\n            ng = mid\n    \n    print(ok)\n", "import sys\ninput = sys.stdin.readline\nn=int(input())\na=[int(j) for j in input().split()]\nfrom collections import Counter\nc=Counter(a)\nl=c.most_common()\nll=[]\nfor i,j in l:\n    ll.append(j)\nll.sort()\ns=sum(ll)\nrem=0\nfor k in range(1,n+1):\n    rest=k-rem\n    while ll and ll[-1]>s//rest:\n        s-=ll[-1]\n        ll.pop()\n        rem+=1\n        rest-=1\n    print((s//rest))\n\n\n\n\n", "import sys\ninput = sys.stdin.readline\n\nN=int(input())\nA=list(map(int,input().split()))\n\nfrom collections import Counter\nfrom itertools import accumulate\nimport bisect\n\nC=Counter(A)\n\nLIST=sorted(C.values())\nLEN=len(LIST)\nSUM=[0]+list(accumulate(LIST))\nMIN=0\nMAX=SUM[-1]\n\nfor k in range(1,N+1):\n    MIN=0\n    while MIN!=MAX:\n        mid=(MIN+MAX+1)//2\n        x=bisect.bisect_right(LIST,mid)\n\n        if SUM[x]+(LEN-x)*mid>=mid*k:\n            MIN=mid\n        else:\n            MAX=mid-1\n\n    print(MIN)\n", "from bisect import bisect_left\n\nN = int(input())\nA = list(map(int, input().split()))\n\nlst = [0] * (N + 1)\nfor a in A:\n    lst[a - 1] += 1\nlst.sort() #\u983b\u5ea6\u5217\n\ns = [0] * (N + 1)\nfor i in range(N):\n    s[i + 1] = s[i] + lst[i + 1]\n\n# print (lst)\n# print (s)\n\ndef check(x, k):\n    i = bisect_left(lst, x) - 1\n    total = x * (N - i) + s[i]\n    return total >= x * k\n\nans = N\nfor k in range(1, N + 1):\n    while True:\n        if check(ans, k):\n            break\n        ans -= 1\n    print (ans)\n", "# -*- coding: utf-8 -*-\nfrom collections import Counter\nfrom itertools import accumulate\n\nN = int(input())\nA = list(map(int,input().split()))\n\nB = list(Counter(A).values())\n\nC = [0] * N \nfor i in B:\n    C[i-1] += 1\n\nF = list(accumulate(C))\n\nS = [0] * N\nf = [0] * N\nS[0] = f[0] = sum(C) \nfor i in range(2, N+1):\n    S[i-1] = (S[i-2] + C[i-1] + S[0] - F[i-1] ) \n    f[i-1] = S[i-1] / i\n\nf.sort()\nn = 0     \nK = 1\n    \nwhile K != N+1:\n    if K <= f[n]:\n        print(N-n)\n        K += 1\n    else:\n        n += 1\n    if n == N:\n        for i in range(N-K+1):\n            print(0)\n        K = N+1    ", "import itertools\nimport collections\nN = int(input())\nA = [int(_) for _ in input().split()]\nc = sorted(collections.Counter(A).values())\nacc = list(itertools.accumulate([0] + c))\nn = len(acc) - 1\nj = 0\nfor i in range(1, n + 1):\n    r = 0\n    while i - j > 0:\n        if (i - j) * c[-1 - j] <= acc[-1 - j]:\n            r = acc[-1 - j] // (i - j)\n            break\n        else:\n            j += 1\n    print(r)\nfor _ in range(N - n):\n    print((0))\n", "from collections import Counter\nimport bisect\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    count_list = list(Counter(A).values())\n    count_list.sort()\n    cumsum_count = [0] * len(count_list)\n    cumsum_count[0] = count_list[0]\n    for i in range(1, len(count_list)):\n        cumsum_count[i] = cumsum_count[i - 1] + count_list[i]\n    ans_list = [0] * N\n    n_max = N\n    for k in range(1, len(count_list) + 1):\n        # \u6700\u5927\u3067\u3082 N // k \u56de\u307e\u3067\u3002\n        # \u5404\u30ab\u30fc\u30c9 n_max \u679a\u307e\u3067\u4f7f\u3063\u3066 k * n_max \u306e\u9577\u65b9\u5f62\u9818\u57df\u3092\u5168\u90e8\u57cb\u3081\u5c3d\u304f\u305b\u308b\u304b\u3092\u8abf\u3079\u308b\u3002\n        # \u57cb\u3081\u5c3d\u304f\u305b\u308b\u6700\u5c0f\u306e n_max \u304c\u7b54\u3048\u3002\n        n_max = min(n_max, N // k)\n        s = 0\n        while True:\n            # n_max \u679a\u4ee5\u4e0a\u3042\u308b\u30ab\u30fc\u30c9\u306f n_max \u679a\u56fa\u5b9a\n            index = bisect.bisect_left(count_list, n_max)\n            s = n_max * (len(count_list) - index)\n            # \u305d\u308c\u672a\u6e80\u306e\u30ab\u30fc\u30c9\u306f\u305d\u306e\u307e\u307e\u5168\u90e8\u4f7f\u3046\n            if index > 0:\n                s += cumsum_count[index - 1]\n            if s >= k * n_max or n_max == 0:\n                break\n            n_max -= 1\n        ans_list[k - 1] = n_max\n    for ans in ans_list:\n        print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\nA = list(map(int,input().split()))\nB = [0]*(n+1)\nC = [0]*(n+1)\nfor a in A:\n    B[a] += 1\n    C[B[a]] += 1\n\nX = [0]\nfor i in range(1,n+1):\n    X.append(X[i-1] + C[i])\nfor j in range(1,n+1):\n    X[j] = X[j] // j\n\nind = n\nk = 1\nwhile k<=n:\n    if ind<0:\n        for _ in range(n-k+1):\n            print(0)\n        break\n    if k<=X[ind]:\n        print(ind)\n        k += 1\n    else:\n        ind -= 1", "from itertools import accumulate\n\nN, *A = map(int, open(0).read().split())\n\nC = [0] * (N + 1)\nD = [0] * (N + 1)\nfor a in A:\n    C[a] += 1\n    D[C[a]] += 1\n\nT = [0] + [s // i for i, s in enumerate(accumulate(D[1:]), 1)]\n\nans = []\nx = N\nfor k in range(1, N + 1):\n    while 0 < x and T[x] < k:\n        x -= 1\n    ans.append(x)\n\nprint(\"\\n\".join(map(str, ans)))", "from collections import Counter\nfrom bisect import bisect_left\nfrom itertools import accumulate\n\nN = int(input())\nA = list(map(int, input().split()))\na = list(Counter(A).values())\na.sort()\nb = list(accumulate(a + [0]))\ns = sum(a)\nlength = len(a)\n\nfor i in range(1, N + 1):\n    if i == 1:\n        print(s)\n    elif len(a) < i:\n        print(0)\n    else:\n        n = s // i\n        for j in reversed(range(1, n + 1)):\n            t = bisect_left(a, j)\n            if j * i <= b[t - 1] + (length - t) * j:\n                print(j)\n                break", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    # C[x]: \u66f8\u304b\u308c\u3066\u3044\u308b\u6574\u6570\u304cx\u3067\u3042\u308b\u30ab\u30fc\u30c9\u306e\u679a\u6570\n    C = [0] * (N + 1)\n    D = [0] * (N + 1)\n    for a in A:\n        C[a] += 1\n        D[C[a]] += 1\n\n    # A\u304b\u3089K(1<=K<=N)\u679a\u305a\u3064\u30ab\u30fc\u30c9\u3092\u629c\u3044\u3066\u3063\u305f\u3068\u304d\u306b\u3001\n    # x\u56de\u4ee5\u4e0a\u629c\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u5224\u5b9a\u3059\u308b\u3002\n    # \u629c\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u5224\u5b9a\u3055\u308c\u305fx\u306e\u6700\u5927\u5024\u304c\u7b54\u3048\u306b\u306a\u308b\u3002\n\n    # \u4f8b\u3048\u3070\u3001A = [1 1 1 1 1 2 2 3] \u3068\u3059\u308b\u3002\n    # -> C = [5 2 1 0 0 0 0 0]\n    # \u3053\u3053\u304b\u30892\u679a\u305a\u3064\u30ab\u30fc\u30c9\u3092\u629c\u3051\u308b\u56de\u6570\u3092\u8003\u3048\u308b\u3068\u304d\u3001\n    # \u300c3\u56de\u629c\u304f\u300d\u3068\u3059\u308b\u3068\u3001\u6570\u5b57\u306e1\u306f\u3001\u3069\u3046\u3084\u3063\u3066\u30822\u500b\u306f\u7d76\u5bfe\u4f59\u308b\n    # \u305d\u3053\u3067\u3001\u7d76\u5bfe\u4f59\u308b\u90e8\u5206\u3092\u6368\u3066\u3066C\u3092\u4f5c\u308a\u76f4\u3059(=E\u3068\u3059\u308b)\u3068\u3001\n    # E = [3 2 1 0 0 0 0 0]\n    # \u3053\u3053\u304b\u30892\u679a\u305a\u30643\u56de\u629c\u3051\u308b\u304b\u5224\u5b9a\u3059\u308b\u306a\u3089\u3001\n    # sum(E) >= 2 * 3 = 6\n    # \u3067\u3042\u308b\u304b\u898b\u308c\u3070\u3088\u3044\u3002\u4eca\u56de\u306e\u5834\u5408\u3061\u3087\u3046\u30696\u306a\u306e\u3067\u30012\u679a\u305a\u30643\u56de\u306f\u629c\u3051\u308b\u3002\n    \n    # 3\u679a\u305a\u30642\u56de\u306c\u3051\u308b\u304b\u8abf\u3079\u308b\u5834\u5408\u3001\n    # E = [2 2 1] \u3068\u306a\u308a\u3001sum(E) = 5 < 3 * 2 = 6 \u306a\u306e\u3067\u3001\u629c\u3051\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308b\n\n    # \u3088\u3063\u3066\u3001\n    # sum(min(C[i], x)) >= K * x \u3067\u3042\u308c\u3070\u629c\u304f\u3053\u3068\u304c\u3067\u304d\u308b\n    # S(x) = sum(min(C[i], x)) \u3068\u3059\u308b\u3068\u3001\n    # S(x) = S(x-1) + [C\u306e\u4e2d\u3067C[i] >= x \u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570]\n    # \u3068\u306a\u308b\u3053\u3068\u304b\u3089\u3001C\u306e\u4e2d\u3067C[i] >= x \u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570 = D(x) \u3068\u3059\u308b\u3068\u3001\n    # S(x) = sum_(1~x) D(i) \u3068\u306a\u308b\u3002\n    # \u3064\u307e\u308a\u3001S(x)\u306f\u3001D(x) \u3092\u6700\u521d\u306b\u5168\u90e8\u8a08\u7b97\u3057\u3066\u304a\u3044\u3066\u3001\u7d2f\u7a4d\u548c\u3092\u3068\u308b\u3053\u3068\u3067\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u308b\u3002\n\n    # S(x) >= K * x \u3068\u306a\u308bx\u306e\u6700\u5927\u5024\u3092\u3001k\u30921\u304b\u3089N\u307e\u3067\u52d5\u304b\u3057\u3066\u898b\u3064\u3051\u308c\u3070\u3088\u3044\u3002\n    # \u3053\u3053\u3067\u3001x\u3092\u5de6\u8fba\u306b\u3082\u3063\u3066\u3044\u3063\u3066\u3001\n    # S(x) / x >= K\u3068\u306a\u308bx\u306e\u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n    # \u307e\u305f\u3001S(x) / x = f(x) \u3068\u304a\u304f\u3002\n\n    # \u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b2\u5206\u63a2\u7d22\u3057\u3066\u3082\u3044\u3044\u304c\u3001\n    # K\u304c\u5897\u3048\u308b\u3068\u3001\u7b54\u3048\u306f\u4ee5\u524d\u306e\u5024\u4ee5\u4e0b\u306b\u306a\u308b\u306f\u305a\u306a\u306e\u3067\u3001\n    # K+1\u306e\u3068\u304d\u3001K\u3067\u306e\u7b54\u3048\u306e\u4f4d\u7f6e\u304b\u30890\u3078\u3068\u63a2\u7d22\u3057\u3066\u3044\u3051\u3070\u3001O(N)\u3067\u7b54\u3048\u304c\u898b\u3064\u304b\u308b\n    S = [0] * (N + 1)\n    f = [0] * (N + 1)\n    for x in range(1, N+1):\n        S[x] = S[x-1] + D[x]\n        f[x] = S[x] // x\n\n    ans = []\n    prev_ans = N\n    for K in range(1, N+1):\n        a = prev_ans\n        while True:\n            if f[a] >= K or a == 0:\n                break\n            a -= 1\n        ans.append(a)\n        prev_ans = a\n\n    print(*ans, sep='\\n')\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    from sys import stdin\n    input = stdin.readline\n    from collections import Counter as ct\n    from bisect import bisect_left as bl\n\n    n = int(input())\n    max_a = sorted(ct(list(map(int, input().split()))).values())\n    now_a = [i for i in max_a]\n    m = len(max_a)\n    cnt = m\n    ans = 0\n    ans_list = [0]*(n-m)\n\n    for use in range(m, 1, -1):\n        rest = ans\n        nex = now_a[0]\n        while rest:\n            val = nex\n            start = bl(now_a, val+1)\n            nex += 1\n            q = max(-1, start-1-rest, bl(max_a, now_a[start-1]+1)-1)\n            for i in range(start-1, q, -1):\n                now_a[i] += 1\n            if now_a[start-1] == 1:\n                cnt += start-1-q\n            rest -= start-1-q\n            if start != m:\n                nex = now_a[start]\n        while cnt >= use:\n            ans += 1\n            rest = use\n            nex = now_a[-1]\n            end = m\n            while rest:\n                val = nex\n                start = bl(now_a, val)\n                if start != 0:\n                    nex = now_a[start-1]\n                end = min(end, bl(now_a, val+1), start+rest)\n                for i in range(start, end):\n                    now_a[i] -= 1\n                if now_a[start] == 0:\n                    cnt -= end-start\n                rest -= end-start\n                end = start\n        ans_list.append(ans)\n    print(n)\n    for i in ans_list[::-1]:\n        print(i)\n\n\nmain()", "N = int(input())\nA = list(map(int,input().split()))\nC = [0] * (N + 1)\nfor a in A:\n    C[a] += 1\nD = [0] * (N + 1)\nfor c in C:\n    D[c] += 1\nP = [0] * (N + 1)\nQ = [0] * (N + 1)\nfor i in range(1, N+1):\n    P[i] = P[i-1] + i * D[i]\n    Q[i] = Q[i-1] + D[i]\nF = [0] * (N + 1)\nfor i in range(1, N+1):\n    F[i] = int((P[i] + i * (Q[N] - Q[i])) / i)\nindex = N\nfor i in range(1, N+1):\n    while True:\n        if index == 0:\n            print(0)\n            break\n        if F[index] >= i:\n            print(index)\n            break\n        else:\n            index -= 1", "from collections import defaultdict\nfrom bisect import bisect\nN = int(input())\nA = list(map(int,input().split()))\n\nd = defaultdict(lambda:0)\n\nfor i in range(N):\n    d[A[i]] += 1\n\nC = [0]*(N+1)\n\nfor i in d:\n    C[d[i]] += 1\n\nC1 = [0]*(N+1)\nC2 = [0]*(N+1)\n\nfor i in range(N):\n    C1[i+1] = C1[i] + (i+1)*C[i+1]\n    C2[i+1] = C2[i] + C[i+1]\n\nl = [0]*N\nfor n in range(N):\n    l[n] = C1[n+1]//(n+1)+C2[N]-C2[n+1]\n    l[n] *= -1\n\n\nfor i in range(N):\n    print(bisect(l,-(i+1)))", "\nN = int(input())\n\nA = list(map(int,input().split()))\n\ndic = {}\n\nfor a in A:\n\n    if a not in dic:\n        dic[a] = 1\n    else:\n        dic[a] += 1\n\nB = []\nfor i in dic:\n    B.append(dic[i])\n\nB.sort()\n\nB_sub = B.copy()\n\nfor i in range(len(B)-1):\n    B_sub[i+1] += B_sub[i] \n\naind = N + 1\nnind = len(B) - 1\n\n#print (B,B_sub)\n\nfor i in range(N):\n\n    i += 1\n\n    while True:\n\n        while nind > 0 and B[nind] > aind - 1:\n\n          nind -= 1\n\n        if i > len(B):\n            print((0))\n            break\n\n        elif ((len(B) - 1) - nind ) * (aind-1) + B_sub[nind] >= (aind - 1) * i:\n            print((aind - 1))\n            break\n\n        aind -= 1\n\n", "N = int(input())\nA = list(map(int, input().split()))\n\nnum = [0 for _ in range(N)]\nfor a in A:\n    num[a-1] += 1\nnum.sort()\ncum = [0 for _ in range(N)]\ncum[0] = num[0]\nfor i in range(1, N):\n    cum[i] = cum[i-1] + num[i]\n\nindex = N - 1\nans = N\nfor k in range(1, N+1):\n    while ans > 0:\n        tmp_index = index\n        while tmp_index >= 0 and num[tmp_index] > ans:\n            tmp_index -= 1\n        decided = N - tmp_index - 1\n        rest_total = 0 if tmp_index < 0 else cum[tmp_index]\n        if rest_total >= ans * (k - decided):\n            index = tmp_index\n            break\n        ans -= 1\n    print(ans)", "import sys\nfrom collections import Counter\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    aa = list(map(int, input().split()))\n    aa = list(Counter(aa).values())\n    aa.sort()\n    cs = [0]\n    s = 0\n    for a in aa:\n        s += a\n        cs += [s]\n    # print(aa)\n    # print(cs)\n    ans = n + 1\n    i = len(aa)\n    for k in range(1, n + 1):\n        while 1:\n            while i > 0 and aa[i - 1] >= ans:\n                i -= 1\n            s = cs[i] + ans * (len(aa) - i)\n            if s >= ans * k:\n                break\n            else:\n                ans -= 1\n        print(ans)\n\nmain()\n", "N=int(input())\nA=list(map(int,input().split()))\n\nc = [0] * (N + 1)\nDx = [0] * (N + 1)\nfor a in A:\n    c[a] += 1 #c\u306f\u3001a\u3068\u3044\u3046\u6570\u304c\u51fa\u305f\u56de\u6570\u3092\u8a18\u9332\n    Dx[c[a]]+=1\n    #Dx\u306f\u3001\u305d\u306e\u56de\u6570\u306e\u3068\u3053\u308d\u306b\u7a2e\u985e\u3092\u8a18\u9332\u3002\u8ce2\u3044\u3002\n\nSx=[0]#\u521d\u9805\u306f0\nfor j in range(1,N+1):\n    Sx.append(Sx[j-1]+Dx[j])\n#\u89e3\u6cd52\u3092\u771f\u4f3c\u3057\u3066\u307f\u308b\u3002\nfor h in range(1,N+1):\n    Sx[h]=Sx[h]/h\n\nx=N\nk=1\nwhile k<N+1:\n    if x<0:\n        for _ in range(N-k+1):\n            print((0))\n        return\n    if k<=Sx[x]:\n        print(x)\n        k+=1\n    else:\n        x-=1\n", "from collections import Counter\n\nN = int(input())\nAs = list(map(int, input().split()))\n\ncntA = Counter(As)\ncntCntA = Counter(list(cntA.values()))\n\naccDs = [cntCntA[0]]\nfor i in range(1, N+1):\n    accDs.append(accDs[-1] + cntCntA[i])\n\naccKDs = [0]\nfor i in range(1, N+1):\n    accKDs.append(accKDs[-1] + i*cntCntA[i])\n\nfXs = [0]\nfor X in range(1, N+1):\n    fXs.append((accKDs[X] + X*(accDs[N]-accDs[X])) // X)\n\nanss = [0] * (N+1)\nfor X, fX in enumerate(fXs):\n    anss[fX] = X\n\nfor i in reversed(list(range(N))):\n    if anss[i] == 0:\n        anss[i] = anss[i+1]\n\nprint(('\\n'.join(map(str, anss[1:]))))\n", "from bisect import bisect_left\n\nN = int(input())\nA = list(map(int, input().split()))\n\nlst = [0] * (N)\nfor a in A:\n    lst[a - 1] += 1\nlst.sort() #\u983b\u5ea6\u5217\n\ns = [0] * (N + 1)\nfor i in range(N):\n    s[i + 1] = s[i] + lst[i]\n\n# print (lst)\n# print (s)\n\n# def check(x, k):\n#     i = bisect_left(lst, x) - 1\n#     total = x * (N - i) + s[i]\n#     return total >= x * k\n\n\nans = N\ni = N\nfor k in range(1, N + 1):\n    while True:\n        while  i >= 1 and lst[i - 1] >= ans:\n            i -= 1\n        total = ans * (N - i) + s[i]\n        if total >= ans * k:\n            break\n        ans -= 1\n    # print ('i =', i)\n    print (ans)\n", "from collections import Counter\nN = int(input())\nC = sorted(list(Counter(list(map(int, input().split()))).values()))\n\nrest = N\nremoved = 0\nfor K in range(1, N + 1):\n    d = K - removed\n    while C and C[- 1] > rest//d:\n        rest -= C[- 1]\n        C.pop()\n        removed += 1\n        d -= 1\n    print((rest//d))\n"]