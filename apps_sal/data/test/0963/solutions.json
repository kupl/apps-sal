["n, k = map(int, input().split())\nl = [(0, 0) for i in range(k)]\nfor i in range(k):\n    start, end = map(int, input().split())\n    l[i] = start, end\n\ndp = [0 for i in range(n+1)]\nprefixSum = [0 for i in range(n+1)]\n\ndp[1] = 1\nprefixSum[1] = 1\n\nfor i in range(2, n + 1):\n    for j in range(k):\n        start, end = l[j]\n        i_s = max(i - start, 0)\n        i_e = max(i - end -1, 0)    \n        dp[i] += prefixSum[i_s] - prefixSum[i_e]\n        dp[i] %= 998244353\n    prefixSum[i] = prefixSum[i-1] + dp[i]\n    prefixSum[i] %= 998244353\n\nprint(dp[n])", "#!/usr/bin/env python3\nimport sys\n\nMOD = 998244353  # type: int\n\n\ndef solve(N: int, K: int, L: \"List[int]\", R: \"List[int]\"):\n    cum = [0]*(N+1)\n    dp = [0]*(N+1)\n\n    cum[1] = 1\n    dp[1] = 1\n\n    cnt = 0\n\n\n    for i in range(2, N+1):\n        for j in range(K):\n            li = i - L[j]\n            ri = i - R[j]\n            if li < 0:\n                continue\n\n            ri = max(ri, 1)\n\n            dp[i] += cum[li] - cum[ri-1]\n        cum[i]=(cum[i-1]+dp[i])%MOD\n\n    return print(dp[N]%MOD)\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    L = [int()] * (K)  # type: \"List[int]\"\n    R = [int()] * (K)  # type: \"List[int]\"\n    for i in range(K):\n        L[i] = int(next(tokens))\n        R[i] = int(next(tokens))\n    solve(N, K, L, R)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = [int(i) for i in input().split()]\nrng = [[int(i) for i in input().split()] for i in range(k)]\nmod = 998244353\ndp = [0] * n\n\ndp[0] = 1\ndp_acc = [0, 1]\n\nfor i in range(1, n):\n    for l, r in rng:\n        dp[i] += dp_acc[max(0, i-l+1)] - dp_acc[max(0, i-r)]\n        dp[i] %= mod\n    dp_acc.append(dp_acc[i] + dp[i])\n\nprint((dp[n-1]))\n", "import sys\n#import time\nfrom collections import deque, Counter, defaultdict\n#from fractions import gcd\nimport bisect\nimport heapq\n#import math\nimport itertools\nimport numpy as np\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\ninf = 10**18\nMOD = 1000000007\nri = lambda : int(input())\nrs = lambda : input().strip()\nrl = lambda : list(map(int, input().split()))\nmod = 998244353\n\nn,k = rl()\nch = []\nfor i in range(k):\n    ch.append(tuple(rl()))\ndp=[0]*(n+1)\ndp[0]=0\ndp[1]=1\nfor i in range(1,n):\n    for e in ch:\n        left = max(0, i-e[1])\n        right = max(0,i-e[0]+1)\n        dp[i+1]+= dp[right]-dp[left]\n    dp[i+1] += dp[i]\n    dp[i+1]%=mod\nprint((dp[n] - dp[n-1])%mod)", "N,K = map(int, input().split())\nmod = 998244353\nL = list()\nR = list()\nfor i in range(K):\n  l,r = map(int, input().split())\n  L.append(l)\n  R.append(r)\ndp = [0] * (N+1)\ndp[1] = 1\ndpSum = [0] * (N+1)\ndpSum[1] = 1\nfor i in range(2,N+1,1):\n  for j in range(K):\n    li = i-R[j]\n    ri = i-L[j]\n    if ri < 0:\n      continue\n    li = max(li,1)\n    dp[i] += dpSum[ri] % mod - dpSum[li-1] % mod\n  dpSum[i] = dpSum[i-1] % mod + dp[i] % mod\nans = dp[N]\nprint(ans % mod)", "n, k = map(int, input().split())\nq = [tuple(map(int, input().split())) for _ in range(k)]\ndp = [0] * (n + 5)\nMOD = 998244353\ncnt = 1\nfor i in range(1, n+5):\n    cnt += dp[i]\n    cnt %= MOD\n    for p in q:\n        if i + p[0] < n + 5:\n            dp[i+p[0]] += cnt\n            dp[i+p[0]] %= MOD\n        if i + p[1] + 1 < n + 5:\n            dp[i+p[1]+1] -= cnt\n            dp[i+p[1]+1] %= MOD\nprint(dp[n])", "mod = 998244353\nn, k, *LR = map(int, open(0).read().split())\ndp = [0] * (3*n)\ndp[1] = 1\ndp[2] = -1\nfor i in range(1, n+1):\n    dp[i+1] += dp[i]\n    dp[i+1] %= mod\n    for l in LR[::2]:\n        dp[i+l] += dp[i]\n        dp[i+l] %= mod\n    for r in LR[1::2]:\n        dp[i+r+1] -= dp[i]\n        dp[i+r+1] %= mod\nprint(dp[n])", "N, K = map(int, input().split())\nmove = set()\nMOD = 998244353\nmove = []\nfor i in range(K):\n    move.append(tuple(map(int, input().split())))\n\n\ndp = [0] * (2 * N + 3)\nadd = [0] * (2 * N + 3)\nheight = 0\ndp[0] = dp[1] = 1\nfor i in range(1, N+1):\n    height += add[i] % MOD\n    if i != 1:\n        dp[i] = height\n    for L, R in move:\n        add[i + L] += dp[i] % MOD\n        add[i + R + 1] -= dp[i] % MOD\nprint(dp[N] % MOD)", "def main():\n    CONST = 998244353\n    N,K = list(map(int,input().split()))\n    lis = [0]*N*3\n    MoveLis = []\n    SumLis = [0]*N*3\n    for i in range(K):\n        L,R = list(map(int,input().split()))\n        MoveLis.append((L,R))\n    lis[1] = 1\n    SumLis[1] = 1\n    for i_n in range(2,N+1):\n        for i_k in range(K):\n            lis[i_n] += SumLis[max(i_n-MoveLis[i_k][0],0)] - SumLis[max(i_n-MoveLis[i_k][1]-1,0)]\n            lis[i_n] %= CONST\n        SumLis[i_n] += SumLis[i_n -1] + lis[i_n]\n        SumLis[i_n] %= CONST\n    print((lis[N]))\n             \n\n\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "n, k = map(int, input().split())\nmod = 998244353\ns = []\n\nfor i in range(k):\n    si = list(map(int, input().split()))\n    s.append(si)\n    \ndp = [0] * (n+1)\ndpsum = [0] * (n+1)\ndp[1] = 1\ndpsum[1] = 1\n\nfor j in range(2, n+1):\n    for m in range(k):\n        l = j - s[m][0]\n        r = j - s[m][1]\n        if l < 0:\n            continue\n        r = max(r, 1)\n        dp[j] += dpsum[l] - dpsum[r-1]\n    dpsum[j] = (dpsum[j-1] + dp[j])%mod \n\nans = dp[n]%mod\nprint(ans)", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 998244353\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N, K = LI()\n    LR = [LI() for _ in range(K)]\n\n    dp = [0] * N\n    dp[0] = 1\n    dp_acm = list(itertools.accumulate(dp, initial=0))\n    for i in range(1, N):\n        for l, r in LR:\n            dp[i] += dp_acm[max(i-l+1, 0)] - dp_acm[max(i-r, 0)]\n            dp[i] %= MOD\n        dp_acm[i+1] = dp_acm[i] + dp[i]\n        dp_acm[i+1] %= MOD\n    # print(dp)\n    # print(dp_acm)\n\n    print((dp[-1]))\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "#!/usr/bin/env python3\nimport sys\n\nMOD = 998244353  # type: int\n\n\ndef solve(N: int, K: int, L: \"List[int]\", R: \"List[int]\"):\n    cum = [0]*(N+1)\n    dp = [0]*(N+1)\n\n    cum[1] = 1\n    dp[1] = 1\n\n    cnt = 0\n\n\n    for i in range(2, N+1):\n        for j in range(K):\n            if L[j] - 1 < 0:\n                continue\n            dp[i] += cum[i - L[j]] - cum[i - R[j] -1]\n        cum[i]= (cum[i-1] + dp[i])%MOD\n\n    return print(dp[N]%MOD)\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    L = [int()] * (K)  # type: \"List[int]\"\n    R = [int()] * (K)  # type: \"List[int]\"\n    for i in range(K):\n        L[i] = int(next(tokens))\n        R[i] = int(next(tokens))\n    solve(N, K, L, R)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\nmod = 998244353\nlr = []\ns = set()\nfor i in range(k):\n  l,r = map(int, input().split())\n  for j in range(l,r+1):\n    s.add(j)\n  lr.append([l,r])\n\ndp = [0 for i in range(n+1)]\ndp[1] = 1\ntot = [0 for i in range(k)]\n\nfor i in range(1,n+1):\n  for j in range(k):\n    l,r = lr[j][0],lr[j][1]\n    if i-l < 1:\n      continue\n    tot[j] += dp[i-l]\n    if i-r > 1:\n      tot[j] -= dp[i-r-1]\n    dp[i] += tot[j]\n    dp[i] %= mod\nprint (dp[n])", "MOD = 998244353\nN, K = list(map(int, input().split())) #N\u306f\u30de\u30b9\u76ee\u306e\u6570\u3001K\u306f\u533a\u9593\u306e\u6570(K\u306f10\u4ee5\u4e0b)\nkukan = [tuple(map(int, input().split())) for _ in range(K)]\n\ndp = [0] * (N+1)\ndp[1] = 1\n\nsumdp = [0] * (N+1)\nsumdp[1] = 1\n\nfor i in range(2, N+1):\n    for l, r in kukan:\n        li = max(i - l, 0)\n        ri = max(i - r - 1, 0)\n\n        dp[i] += sumdp[li] - sumdp[ri]\n        dp[i] %= MOD\n\n    sumdp[i] = sumdp[i-1] + dp[i]\n\nprint((dp[N]))\n", "n,k=list(map(int,input().split()))\nmod=998244353\nlr=[]\na=[0]*(n+1)\na[1]=1\nfor _ in range(k):\n  l,r=list(map(int,input().split()))\n  lr.append([l,r])\nfor i in range(2,n+1):\n  for l,r in lr:\n    if i-l<0: #i\u306b\u5230\u9054\u53ef\u80fd\u306a\u3084\u308a\u65b9\u304c\u306a\u3044\u3068\u304d\n      continue\n    a[i]+=a[i-l]-a[max(0,i-r-1)] #1\u624b\u3067\u5230\u9054\u53ef\u80fd\u306a\u306e\u306f\u6b63\u5473\u3067\u4f55\u901a\u308a\u304b\u3092\u8a08\u7b97\n  a[i]+=a[i-1] #\u540c\u4e00\u533a\u9593\u306e\u5206\u3092\u96c6\u7d04\n  a[i]%=mod\nprint(((a[n]-a[n-1])%mod))\n", "N , K = map(int,input().split())\nmod = 998244353\nL = [0]*K\nR = [0]*K\nfor i in range(K):\n  L[i] , R[i] = map(int,input().split())\nL.sort()\nR.sort()\ndp = [0]*(N+1)\nsdp = [0]*(N+1)\ndp[1] = 1\nsdp[1] = 1\nfor i in range(1,N):\n  tdp = 0\n  for j in range(K):\n    if i - L[j] + 1 >= 0 :\n      s1 = sdp[i - L[j] + 1]\n    else:\n      s1 = 0\n    if i - R[j] >= 0:\n      s2 = sdp[i - R[j]]\n    else:\n      s2 = 0\n    tdp += s1 - s2\n  dp[i+1] = tdp%mod\n  sdp[i+1] = (sdp[i] + dp[i+1])%mod\nprint(dp[N]%mod)  ", "mod=998244353\nn,k=map(int,input().split())\nL=[]\nR=[]\nfor _ in range(k):\n    l,r=map(int,input().split())\n    L.append(l)\n    R.append(r)\n\nsdp = [1]\n\ndef f(x):\n    if x<0:\n        return 0\n    else:\n        return sdp[x]\n\nfor i in range(1,n):\n    x=0\n    for j in range(k):\n        x+=f(i-L[j])+mod-f(i-R[j]-1)\n        x%=mod\n    sdp.append((x+sdp[i-1])%mod)\n\nprint((sdp[n-1]+mod-sdp[n-2])%mod)", "N, K = list(map(int, input().split()))\nS = []\n\nfor i in range(K):\n    l, r = list(map(int, input().split()))\n    S.append([l, r])\n\nd = {}\nacc = {}\n\n\ndef get_acc_num(i, l, r):\n    if i - l <= 0:\n        return 0\n    if i - r <= 0:\n        return acc[i-l]\n    else:\n        return acc[i-l] - acc[i-r-1]\n\nMOD = 998244353\nfor i in range(1, N+1):\n    # print(f\"{i}-------------------\")\n    if i == 1:\n        d[i] = 1\n        acc[0] = 0\n        acc[i] = 1\n    else:\n        d[i] = 0\n        for l, r in S:\n            # print(f\"{l, r}\")\n            # print(get_acc_num(i, l, r))\n            # print(get_acc_num(i, l, r))\n            d[i] += get_acc_num(i, l, r) % MOD\n            acc[i] = (acc[i-1] + d[i]) % MOD\n\nprint((d[N] % 998244353))\n\n", "n, k = list(map(int, input().split()))\nsec = [tuple(map(int, input().split())) for _ in range(k)]\n\nmod = 998244353\ndp = [0] * n\nsdp = [0] * (n+1)\ndp[0] = 1\nsdp[1] = 1\nfor i in range(1, n):\n    for l, r in sec:\n        dp[i] += sdp[max(i-l+1, 0)] - sdp[max(i-r, 0)]\n        dp[i] %= mod\n    sdp[i+1] = sdp[i] + dp[i]\n    sdp[i+1] %= mod\n\nprint((dp[n-1]))\n", "n, k = map(int, input().split())\nmod = 998244353\nl, r = [0] * n, [0] * n\ndp = [0] * (n + 1)\nans = [0] * n\nans[0] = 1\ndp[1] = 1\nfor i in range(k):\n    l[i], r[i] = map(int, input().split())\n    \n    \nfor i in range(1, n):\n    total = 0\n    for j in range(k):\n        total += dp[i - l[j] + 1] - dp[i - r[j]]\n    ans[i] = total % mod\n    dp[i + 1] = dp[i] + ans[i]\nprint(ans[-1])", "def main():\n    n, k = list(map(int, input().split()))\n    ruiseki = [0] * (n + 1)\n    mod = 998244353\n\n    move_list = [list(map(int, input().split())) for i in range(k)]\n    sorted_list = sorted(move_list)\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    ruiseki[1] = 1\n    for i in range(2, n+1):\n        for rng in sorted_list:\n            left = max(0, i - rng[1]-1)\n            right = min(i - rng[0], i - 1)\n            if left < right:\n                dp[i] += ruiseki[right] - ruiseki[left]\n            else:\n                break\n        ruiseki[i] = ruiseki[i - 1] % mod + dp[i] % mod\n    print((dp[-1] % mod))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "mod = 998244353\nn,k = map(int,input().split())\nlr = [list(map(int,input().split())) for _ in range(k)]\ndp = [0]*(n+1)\ndp[1] = 1\ndpt = [0]*(n+1)\ndpt[1] = 1\nfor i in range(1,n+1):\n  for l,r in lr:\n    if i-l>0:\n      dp[i] += dpt[i-l]\n      if i-r-1>0:\n        dp[i] -= dpt[i-r-1]\n  dp[i] %= mod\n  dpt[i] = dpt[i-1]+dp[i]\n  dpt[i] %= mod\nprint(dp[n])", "def main():\n    n, k = list(map(int, input().split()))\n    lr = [list(map(int, input().split())) for _ in [0]*k]\n    bit = [0]*(n+1)\n    bit[1] = 1\n    mod = 998244353\n    for i in range(1, n+1):\n        if i+1 < n:\n            bit[i+1] = (bit[i+1]+bit[i]) % mod\n        k = bit[i]\n        for l, r in lr:\n            l += i\n            if l > n:\n                continue\n            bit[l] = (bit[l]+k) % mod\n            r += i+1\n            if r <= n:\n                bit[r] = (bit[r]-k) % mod\n    print((bit[n] % mod))\n\n\nmain()\n", "MOD = 998244353\n\ndef solve(n, k, l, r):\n    dp = [0] * n\n    dp[0] = 1\n    memo = [1] * n\n    for i in range(1, n):\n        v = 0\n        for x, y in zip(l, r):\n            a = i - x\n            if a < 0:\n                continue\n            v += memo[a]\n            b = i - y - 1\n            if b < 0:\n                continue\n            v -= memo[b]\n        dp[i] = v % MOD\n        memo[i] = (memo[i-1] + dp[i]) % MOD\n    return dp[n-1]\n\nn, k = list(map(int, input().split()))\nl, r = list(zip(*[list(map(int, input().split())) for i in range(k)]))\nprint((solve(n, k, l, r)))\n", "N, K = map(int, input().split())\n\nmod = 998244353\n\nlr = []\nans = [0] * (N+1)\nans[1] = 1 \nlr = []\nfor _ in range(K):\n    l,r = map(int, input().split())\n    lr.append([l,r])\n\nfor i in range(2,N+1):\n    for l, r in lr:\n        if i-l < 0:\n            continue\n        ans[i] += ans[i-l] - ans[max(0, i-r-1)]\n    ans[i] += ans[i-1]\n    ans[i] %= mod\n\nprint((ans[N] - ans[N-1]) % mod)", "n,k = map(int, input().split())\nmod = 998244353\nS = []\nfor _ in range(min(n, k)):\n    l, r = map(int, input().split())\n    S.append((l, r+1))\ndp = [0] * (n+1)\ncum = [0] * (n+1)\ndp[1] = 1\ncum[1] = 1\nfor i in range(2, n+1):\n    # \u3082\u3089\u3046dp\n    for l, r in S:\n        ll = max(0, i - r)\n        rr = max(0, i - l)\n        dp[i] += cum[rr] - cum[ll]\n        dp[i] %= mod\n    cum[i] = (cum[i-1] + dp[i]) % mod\n\nprint(dp[n])", "N,K = map(int, input().split())\nmod = 998244353\nL = list()\nR = list()\nfor i in range(K):\n  l,r = map(int, input().split())\n  L.append(l)\n  R.append(r)\ndp = [0] * (N+1)\ndp[1] = 1\ndpSum = [0] * (N+1)\ndpSum[1] = 1\nfor i in range(2,N+1,1):\n  for j in range(K):\n    li = i-R[j]\n    ri = i-L[j]\n    if ri < 0:\n      continue\n    li = max(li,0)\n    dp[i] += dpSum[ri] % mod - dpSum[li-1] % mod\n  dpSum[i] = dpSum[i-1] % mod + dp[i] % mod\nans = dp[N]\nprint(ans % mod)", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\nfrom itertools import accumulate, permutations, combinations, product, groupby, combinations_with_replacement\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 998244353\n\nN, K = MAP()\nLR = [LIST() for _ in range(K)]\ndp = [0]*(N+1)\ndp_acc = [0]*(N+1)\ndp[1] = 1\ndp_acc[1] = 1\n\nfor i in range(2, N+1):\n    for L, R in LR:\n        l = max(0, i-R-1)\n        r = max(0, i-L)\n        dp[i] += dp_acc[r]-dp_acc[l]\n        dp[i] %= mod\n    dp_acc[i] = dp_acc[i-1] + dp[i]\n    dp_acc[i] %= mod\n    \nprint((dp[-1]))\n", "n, k= map(int, input().split())\nlr = [tuple(map(int, input().split())) for i in range(k)]\n\nMOD = 998244353\n\ndp = [0] * n\ndp[0] = 1\n\nimos = [0] * n\n\nfor i in range(0, n):\n\timos[i] += imos[i - 1]\n\timos[i] %= MOD\n\tdp[i] += imos[i]\n\tdp[i] %= MOD\n\tfor l, r in lr:\n\t\tif i + l < n:\n\t\t\timos[i + l] += dp[i]\n\t\tif i + r + 1 < n:\n\t\t\timos[i + r + 1] -= dp[i]\nprint(dp[n - 1])", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    mod = 998244353\n\n    n, k = list(map(int, input().split()))\n    bk = []\n    for _ in range(k):\n        dl, dr = list(map(int, input().split()))\n        bk.append((dl, dr))\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n\n    acc = [0] * (n + 1)\n    acc[1] = 1\n\n    for i in range(2, n + 1):\n        for dl, dr in bk:\n            r = i - dl\n            if r < 1:\n                continue\n            l = max(1, i - dr)\n            dp[i] = (dp[i] + acc[r] - acc[l - 1]) % mod\n        acc[i] = (acc[i - 1] + dp[i]) % mod\n    print((dp[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,k = map(int,input().split())\nmod = 998244353\ns = []\nfor _ in range(k):\n    l,r = map(int,input().split())\n    s += [(l,r)]\n\ns.sort()\na = [0]*(n+1)\na[1] = 1\nfor i in range(2, n+1):\n    a[i] = a[i-1]\n    for l,r in s:\n        a[i] += a[max(0, i-l)] - a[max(0, i-r-1)]\n    a[i] %= mod\nprint((a[n] - a[n-1]) % mod)", "##D\nN, K = map(int, input().split())\nMOD = 998244353\nL = [0]*K\nR = [0]*K\nfor i in range(K):\n    L[i], R[i] = map(int, input().split())\n\ndp = [0] * (N + 1)##dp\u3092\u7d2f\u7a4d\u548c\u306e\u30ea\u30b9\u30c8\u306b\u3059\u308b\ndp[1] = 1\n\nfor i in range(1,N):\n    for e in range(K):##K=i\u306e\u6642\u306e\u7d2f\u7a4d\u548c\u306e\u7bc4\u56f2\n        left = max(0, i-R[e])##\u5de6\u5074\uff1a\u3068\u308a\u3046\u308b\u4e00\u756a\u5c0f\u3055\u3044Idx\n        right = max(0,i-L[e]+1)##\u53f3\u5074\uff1a\u3068\u308a\u3046\u308b\u4e00\u756a\u5927\u304d\u3044Idx\n        dp[i+1] += dp[right]-dp[left]##i+1\u756a\u76ee\u306edp\u306fdp\u306e\u53f3\u30fc\u5de6\n        ##print(dp)\n    dp[i+1] += dp[i]##\u7d2f\u7a4d\u548c\uff08\uff1d\u73fe\u5728\u306e\u6570\u5b57\uff0b\u4e00\u3064\u524d\u306e\u7d2f\u7a4d\u548c\uff09\u306b\u3059\u308b\u305f\u3081\u306b\u4e00\u3064\u524d\u306edp\u3092\u8db3\u3059\n    ##print(dp)\n    dp[i+1]%=MOD\nprint((dp[N] - dp[N-1])%MOD)", "q = 998244353\n\nn, k = map(int, input().split())\n\nlr = [list(map(int, input().split())) for _ in range(k)]\n\ndp = [0] * (n + 1)\ndpsum = [0] * (n + 1)\n\n\ndp[1] = 1\ndpsum[1] = 1\n\nfor i in range(2, n + 1):\n    for l, r in lr:\n        li = i - r\n        ri = i - l\n        if ri < 1: continue\n        li = max(li, 1)\n        dp[i] += (dpsum[ri] - dpsum[li - 1])\n        dp[i] %= q\n    dpsum[i] = dp[i] + dpsum[i - 1]\n    dpsum[i] %= q\n\nprint(dp[n])", "N, K = map(int, input().split())\nMOD = 998244353\n\nLR = [list(map(int, input().split())) for _ in range(K)]\n\ndp = [0] * (N + 1)\ndp[0] = 0\ndp[1] = 1\n\nprefix_sum = [0] * (N + 1)\nprefix_sum[1] = 1\n\nfor i in range(2, N + 1):\n    for j in range(K):\n        l, r = LR[j]\n        \n        l1 = max(i - r - 1, 0)\n        r1 = max(i - l, 0)\n\n        dp[i] += prefix_sum[r1] - prefix_sum[l1]\n        dp[i] %= MOD\n\n    prefix_sum[i] = (prefix_sum[i - 1] + dp[i]) % MOD\n\nprint(dp[-1])", "n,k = list(map(int, input().split()))\ns = []\nfor _ in range(k):\n    l,r = list(map(int, input().split()))\n    s.append((l,r+1))\n\ndp = [0] * (n+1)    # dp[i+1]: Num of ways to reach cell i (0-based).\ndif = [0] * (n+1)   # dif[i] = dp[i] - dp[i-1] for  i > 0.\n\ndif[1] = 1\ndif[2] = -1\nfor i in range(1,n+1):\n    dp[i] = (dp[i-1] + dif[i]) % 998244353\n    for l,r in s:\n        if i+l <= n:\n            dif[i+l] += dp[i]\n        if i+r <= n:\n            dif[i+r] -= dp[i]\n\nprint(dp[-1])", "# import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# from collections import deque\n# import heapq\n\n# \u5165\u529b\n# N = int(input())\n# S = input()\n# n, *a = map(int, open(0))\nN, K = map(int, input().split())\n# L_R = list(map(int, input().split()))\n# A = list(map(lambda x: int(x)*(-1), input().split()))\nL_R = [list(map(int,input().split())) for _ in range(K)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# edges = [list(map(int,input().split())) for _ in range(N - 1)]\n# tree = [[] for _ in range(N + 1)]\n\n# for edge in edges:\n#     tree[edge[0]].append(edge[1])\n#     tree[edge[1]].append(edge[0])\n\n# depth = [-1] * (N + 1)\n# depth[1] = 0\n# count = [0] * (N + 1)\n\n# for i in range(Q):\n#     p, x = map(int, input().split())\n#     count[p] += x\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + 1\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# \u7d20\u56e0\u6570\u5206\u89e3\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\n# \u7d04\u6570\u5217\u6319\n# def make_divisors(n):\n#     lower_divisors , upper_divisors = [], []\n#     i = 1\n#     while i*i <= n:\n#         if n % i == 0:\n#             lower_divisors.append(i)\n#             if i != n // i:\n#                 upper_divisors.append(n//i)\n#         i += 1\n#     return lower_divisors + upper_divisors[::-1]\n\n# bfs\n# tree = [[] for _ in range(N + 1)]\n# edges = [list(map(int,input().split())) for _ in range(M)]\n\n# for edge in edges:\n#     tree[edge[0]].append(edge[1])\n#     tree[edge[1]].append(edge[0])\n\n# depth = [-1] * (N + 1)\n# depth[1] = 0\n\n# d = deque()\n# d.append(1)\n\n# ans = [0] * (N + 1)\n# while d:\n#  v = d.popleft()\n#  for i in tree[v]:\n#    if depth[i] != -1:\n#      continue\n#    depth[i] = depth[v] + 1\n#    ans[i] = v\n#    d.append(i)\n\n# # ans = depth[2:]\n# print('Yes')\n# print(*ans[2:], sep=\"\\n\")\n\n# def gcd_list(numbers):\n#     return reduce(math.gcd, numbers)\n\n# # \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\u6e96\u5099\n# MAXN = 10**6+10\n# sieve = [i for i in range(MAXN+1)]\n# p = 2\n# while p*p <= MAXN:\n#     if sieve[p] == p:\n#         for q in range(2*p, MAXN+1, p):\n#             if sieve[q] == q:\n#                 sieve[q] = p\n#     p += 1\n\nMOD = 998244353\nL_R.sort()\n\nf = [0] * N  # f: \u30de\u30b9i\u307e\u3067\u79fb\u52d5\u3059\u308b\u65b9\u6cd5\u306e\u500b\u6570(0-index)\nf[0] = 1\na = [0] * (N + 1) # ai := fi - f_i-1\na[1] = -1  # \u3053\u306e\u521d\u671f\u6761\u4ef6\u306e-1\u3092\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f!\n\nfor i in range(N - 1):\n    for l, r in L_R:\n        if i + l < N:\n            a[i + l] += f[i]\n            a[i + l] %= MOD\n        if i + r + 1 < N:\n            a[i + r + 1] -= f[i]\n            a[i + r + 1] %= MOD\n    f[i + 1] = (f[i] + a[i + 1]) % MOD\n\nprint(f[-1])", "n,k=map(int,input().split())\ns = [list(map(int, input().split())) for _ in range(k)]\nmod=998244353\n\ndp=[0]*n\nsdp=[0]*(n+1)\n\ndp[0]=1\nsdp[1]=1\n\nfor i in range(1,n):\n    tmp=0\n    for l,r in s:\n        tmp+=sdp[i-l+1]-sdp[i-r]\n    dp[i]=tmp%mod\n    sdp[i+1]=sdp[i]+dp[i]\nprint(dp[-1])", "N,K = list(map(int,input().split()))\nmod = 998244353\n\ndp = [0] * (N+1)\ndpSum = [0] * (N+1)\nR = list()\nL = list()\n\nfor i in range(K):\n  l,r = list(map(int,input().split()))\n  R.append(r)\n  L.append(l)\n\ndp[1] = 1\ndpSum[1] = 1\n\nfor i in range(2,N+1,1):\n  for j in range(K):\n    li = i - R[j]\n    ri = i - L[j]\n    if ri <= 0:\n      continue\n    li = max(li,1)\n    dp[i] += dpSum[ri] % mod - dpSum[li-1] % mod\n  dpSum[i] = (dpSum[i-1] + dp[i]) % mod\n\nans = dp[N] % mod\nprint(ans)\n", "n,k=list(map(int,input().split()))\nlr=[]\nfor i in range(k):\n  l_,r_=list(map(int,input().split()))\n  lr.append([l_,r_])\n\ndp=[0]*(n+1)\nsdp=[0]*(n+1)\ndp[1]=1\nsdp[1]=1\np=998244353\nfor i in range(2,n+1):\n  for l,r in lr:\n    if i-l>=1:\n      if i-r>=1:\n        dp[i]=(dp[i]+sdp[i-l]-sdp[i-r-1])%p\n      else:\n        dp[i]=(dp[i]+sdp[i-l])%p\n  sdp[i]=(sdp[i-1]+dp[i])%p\n\nprint((dp[n]%p))\n\n", "N,K=map(int,input().split())\nmod=998244353\nL=[0]*K;R=[0]*K\nm=[0]*3*N\nm[0]=1;m[1]=-1\nfor i in range(K):\n  L[i],R[i]=map(int,input().split())\n#print(m)\n\nfor j in range(N):\n  m[j+1]+=m[j]%mod\n  for i in range(K):\n#    if j+L[i]>N-1:break\n    m[j+L[i]] +=m[j]%mod\n    m[j+R[i]+1] -=m[j]%mod\n#a    print(j,i,m)\nprint(m[N-1]%mod)", "n,k=list(map(int,input().split()))\nmod=998244353\nhee=[tuple(map(int,input().split())) for _ in range(k)]\ndp=[0]*(n+1)\ndp[1]=1\nsummdp=[0]*(n+1)\nsummdp[1]=1\nfor i in range(2,n+1):\n    for l,r in hee:\n        li=max(i-l,0)\n        ri=max(i-r-1,0)\n        dp[i]+=summdp[li]-summdp[ri]\n        dp[i]%=mod\n    summdp[i]=summdp[i-1]+dp[i]\nprint((dp[n]))\n\n", "mod = 998244353\nn, k = map(int, input().split())\nlr = [list(map(int, input().split())) for i in range(k)]\ndp = [0] * n\ncum = [0] * n\ndp[0] = 1\ncum[0] = 1\nfor i in range(n):\n    for l, r in lr:\n        if i-l >= 0:\n            dp[i] += cum[i-l]\n        if i-r-1 >= 0:\n            dp[i] -= cum[i-r-1]\n        dp[i] %= mod\n        cum[i] = cum[i-1] + dp[i]\n        cum[i] %= mod\nprint(dp[-1]%mod)", "N,K=map(int,input().split())\nmod=998244353\nL=[0]*K;R=[0]*K\nm=[0]*3*N\nm[0]=1;m[1]=-1\nfor i in range(K):\n  L[i],R[i]=map(int,input().split())\n#print(m)\n\nfor j in range(N):\n  m[j+1]+=m[j]%mod\n  for i in range(K):\n    if j+L[i]>N-1:continue\n    m[j+L[i]] +=m[j]%mod\n    m[j+R[i]+1] -=m[j]%mod\n#a    print(j,i,m)\nprint(m[N-1]%mod)", "N, K =map(int, input().split())\nmod = 998244353\nL = list()\nR = list()\n\ndp = [0] * (N+1)\ndpSum = [0] * (N+1)\ndp[1] = 1\ndpSum[1] = 1\n\nfor i in range(K):\n  l,r = list(map(int,input().split()))\n  L.append(l)\n  R.append(r)\n\nfor i in range(2,N+1,1):\n  for j in range(K):\n    li = i - R[j]\n    ri = i - L[j]\n    if ri < 0:\n      continue\n    li = max(li,1)\n    dp[i] += dpSum[ri] % mod - dpSum[li-1] % mod\n  dpSum[i] = dpSum[i-1] % mod + dp[i] % mod\n\nans = dp[N] % mod\nprint(ans)", "\"\"\"\n\u7d2f\u7a4d\u548c\u306b\u3088\u308bDP\u9ad8\u901f\u5316\n\"\"\"\n\nN, K = map(int, input().split())\nLR = [list(map(int, input().split())) for _ in range(K)]\nmod = 998244353\n\nS = []\nfor k in range(K):\n    for i in range(LR[k][0], LR[k][1] + 1):\n        S.append(i)\n\ndp = [0] * N # dp\u30c6\u30fc\u30d6\u30eb\nsdp = [0] * (N+1) # dp\u30c6\u30fc\u30d6\u30eb\u306e\u7d2f\u7a4d\u548c\n\n# DP\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\ndp[0] = 1\nsdp[1] = 1\n\nfor n in range(1, N):\n    for lr in LR:\n        left = max(0, n - lr[1])\n        right = max(0, n - lr[0] + 1)\n        dp[n] += sdp[right] - sdp[left]\n        dp[n] %= mod\n    sdp[n+1] = (sdp[n] + dp[n]) % mod\n\nres = dp[N-1]\nprint(res)", "n, k = map(int, input().split())\nmod = 998244353\nlr = [list(map(int, input().split())) for i in range(k)]\n\n\ndp = [0] * (n+1)\ndp[1] = 1\ncum = [0] * (n+1)\ncum[1] =  1\n\nfor i in range(2, n+1):\n    for l, r in lr:\n        li = max(i-r, 1)\n        ri = i-l\n        if ri < 0: continue\n        dp[i] += cum[ri] - cum[li-1]\n        dp[i] %= mod\n    cum[i] = dp[i] + cum[i-1]\n    cum[i] %= mod\nprint(dp[n]%mod)", "N, K = map(int, input().split())\nrng = [list(map(int, input().split())) for i in range(K)]\ndp = [0]*(N+1)\ndp[1] = 1\ns = [0]*(N+1)\ns[1] = 1\nMOD = 998244353\nfor i in range(2, N+1):\n    for j, k in rng:\n        if i - j < 1:\n            pass\n        elif i - k < 1:\n            k = i - 1\n        dp[i] += s[i-j] - s[i-k-1]\n        dp[i] %= MOD\n    s[i] += (s[i-1] + dp[i])%MOD\nprint(dp[-1])", "N, K, *LR = list(map(int, open(0).read().split()))\nMOD = 998244353\ndp = [0] * N\nacc = [0] * (N + 1)\ndp[0] = 1\nacc[1] = 1\nfor i in range(N):\n    for l, r in zip(*[iter(LR)] * 2):\n        left = max(0, i - r)\n        right = max(0, i - l + 1)\n        dp[i] += acc[right] - acc[left]\n        dp[i] %= MOD\n    acc[i + 1] = acc[i] + dp[i]\n    acc[i + 1] %= MOD\nprint((dp[-1]))\n", "N,K = map(int,input().split())\nS=[]\nfor _ in range(K):\n  L,R = map(int,input().split())\n  S.append([L,R])\na=[0]*(N+1)\nd=[0]*(3*N)\nd[0] = 1     #d[i] = a[i+1]-a[i]\nd[1] = -1\nfor i in range(1,N+1):\n    a[i] = (a[i-1]+d[i-1])%998244353\n    for l,r in S:\n        d[i+l-1] += a[i]\n        d[i+r] -= a[i]\nprint(a[N])", "import sys\nmod = 998244353\n\nN, K = list(map(int, sys.stdin.readline().strip().split()))\n\nstep = []\nfor _ in range(K):\n    L, R = list(map(int, sys.stdin.readline().strip().split()))\n\n    step.append((L, R))\nstep.sort()\n\ndp = [0] * (N + 1)\ndp[1] = 1\n\ncusum = [0] * (N + 1)\ncusum[1] = 1\n\nfor i in range(2, N + 1):\n    for L, R in step:\n        iter_L = i - R\n        iter_R = i - L\n\n        if iter_R <= 0:\n            continue\n        \n        iter_L = max(1, iter_L)\n\n        dp[i] += (cusum[iter_R] - cusum[iter_L - 1]) % mod\n    \n    cusum[i] = (cusum[i - 1] + dp[i]) % mod\n\nprint((dp[N] % mod))\n", "n,k=map(int,input().split())\nmod=998244353\nM=[]\nfor i in range(k):\n    l,r=map(int,input().split())\n    M.append([l,r])\n\ndp=[0]*(3*n)\ndp[0]=1\ndp[1]=-1\n#imos\nfor i in range(n):\n    for l,r in M:\n        dp[l+i]+=dp[i]\n        dp[i+r+1]-=dp[i]\n    dp[i+1]=(dp[i]+dp[i+1])%mod\nprint(dp[n-1])", "N, K = list(map(int, input().split()))\nMOD = 998244353\nL = [0] * K\nR = [0] * K\nfor i in range(K):\n    L[i], R[i] = list(map(int, input().split()))\n\ndp = [0] * (N + 1)  # dp\u3092\u5230\u9054\u65b9\u6cd5\u306e\u7d2f\u7a4d\u548c\u306e\u30ea\u30b9\u30c8\u306b\u3059\u308b\ndp[1] = 1\n\nfor i in range(1, N):\n    for e in range(K):  # K=i\u306e\u6642\u306e\u7d2f\u7a4d\u548c\u306e\u7bc4\u56f2\n        left = max(0, i - R[e])  # \u5de6\u5074\uff1a\u3068\u308a\u3046\u308b\u4e00\u756a\u5c0f\u3055\u3044Idx\n        right = max(0, i - L[e] + 1)  # \u53f3\u5074\uff1a\u3068\u308a\u3046\u308b\u4e00\u756a\u5927\u304d\u3044Idx\n        dp[i + 1] += dp[right] - dp[left]  # i+1\u756a\u76ee\u306edp\u306fdp\u306e\u53f3\u30fc\u5de6\n    dp[i + 1] += dp[i]  # \u7d2f\u7a4d\u548c\uff08\uff1d\u73fe\u5728\u306e\u6570\u5b57\uff0b\u4e00\u3064\u524d\u306e\u7d2f\u7a4d\u548c\uff09\u306b\u3059\u308b\u305f\u3081\u306b\u4e00\u3064\u524d\u306edp\u3092\u8db3\u3059\n    dp[i + 1] %= MOD\nprint(((dp[N] - dp[N - 1]) % MOD))\n", "\n\n\ndef __starting_point():\n  \n  N,K = [int(x) for x in input().split()]\n  S = []\n  l = [0] * K\n  r = [0] * K\n  for i in range(K):\n    l[i],r[i] = [int(x) for x in input().split()]\n  \n  dp = [0] * N\n  dp[0] = 1\n  sdp = [0] * (N+1)\n  sdp[0] = 0\n  sdp[1] = 1\n  for i in range(1,N):\n\n    dp[i] = sum([sdp[max([i-l[k]+1, 0])] - sdp[max([i-r[k], 0])]\n                 for k in range(K)]) % 998244353\n    sdp[i+1] = (dp[i] + sdp[i]) % 998244353\n    \n\n  \n    \n  print((dp[-1]))\n\n  \n  \n  \n\n\n\n\n  \n\n  \n      \n\n\n  \n    \n  \n  \n\n\n__starting_point()", "q = 998244353\n\nN, K = map(int, input().split())\n\nS = []\nfor _ in range(K):\n    S.append(list(map(int, input().split())))\n\nresult = [0]*N\nresult[0] = 1\nresult[1] = -1\n\nfor i in range(N - 1):\n    for l, r in S:\n        if i + l < N:\n            result[i + l] = (result[i + l] + result[i]) % q\n            if i + r + 1 < N:\n                result[i + r + 1] = (result[i + r + 1] - result[i]) % q\n    result[i + 1] = (result[i] + result[i + 1]) % q\n\nprint(result[-1])", "N,K = map(int, input().split())\nmod = 998244353\nL = list()\nR = list()\nfor i in range(K):\n  l,r = map(int, input().split())\n  L.append(l)\n  R.append(r)\ndp = [0] * (N+1)\ndpSum = [0] * (N+1)\ndp[1] = 1\ndpSum[1] = 1\nfor i in range(2,N+1,1):\n  for j in range(K):\n    li = i-R[j]\n    ri = i-L[j]\n    if ri < 0:\n      continue\n    li = max(li,1)\n    dp[i] += dpSum[ri] % mod - dpSum[li-1] % mod\n  dpSum[i] = dpSum[i-1] % mod + dp[i] % mod\nans = dp[N] % mod\nprint(ans)", "n,k=map(int,input().split())\nS=[]\nfor i in range(k):\n    s=list(map(int,input().split()))\n    S.append(s)\nmod=998244353\nDP=[0 for i in range(n+1)]\nDP[1]=1\nR=[0 for i in range(n+1)]\nR[1]=1\nfor i in range(2,n+1):\n    for l,r in S:\n        li=i-r\n        ri=i-l\n        if ri<0:\n            continue\n        DP[i]+=R[ri]-R[max(li-1,0)]\n        DP[i]%=mod\n    R[i]=R[i-1]+DP[i]\n    R[i]%=mod\nprint(DP[n])", "mod = 998244353\nn, k, *LR = map(int, open(0).read().split())\ndp = [0] * (3*n)\ndp[1] = 1\ndp[2] = -1\nfor i in range(1, n+1):\n    dp[i+1] += dp[i]\n    dp[i+1] %= mod\n    for l, r in zip(LR[::2], LR[1::2]):\n        dp[i+l] += dp[i]\n        dp[i+l] %= mod\n        dp[i+r+1] -= dp[i]\n        dp[i+r+1] %= mod\nprint(dp[n])", "#\u53c2\u8003\n#https://atcoder.jp/contests/abc179/submissions/16904040\n\nMOD = 998244353\n \ndef solve(lr, dp, n):\n    acc_dp = [1] * n    # \u7d2f\u7a4d\u548c\n    for i in range(1, n):\n        val = 0\n        for d in lr: # \u5404\u533a\u9593\u306b\u3064\u3044\u3066\u533a\u9593\u548c\u3092\u6c42\u3081\u8db3\u3057\u3066\u3044\u304f\n            a = i - d[0]\n            if a < 0:\n                continue\n            b = i - d[1] - 1 \n            val += acc_dp[a] - (acc_dp[b] if b >= 0 else 0) # \u533a\u9593\u548c\u3092\u7d20\u65e9\u304f\u6c42\u3081\u308b\n        dp[i] = val % MOD\n        acc_dp[i] = (acc_dp[i - 1] + dp[i]) % MOD\n    return dp[n - 1]\n \n \ndef main():\n    f = open(0)\n    n, k = [int(x) for x in f.readline().split()]\n    lr = [[int(x) for x in f.readline().split()] for _ in range(k)]\n    dp = [0] * n\n    dp[0] = 1\n    ans = solve(lr, dp, n)\n    print(ans)\n \nmain()", "import sys,collections as cl,bisect as bs\nsys.setrecursionlimit(100000)\ninput = sys.stdin.readline\nmod = 10**9+7\nMax = sys.maxsize\ndef l(): #int\u306elist\n    return list(map(int,input().split()))\ndef m(): #\u8907\u6570\u6587\u5b57\n    return list(map(int,input().split()))\ndef onem(): #N\u3068\u304b\u306e\u53d6\u5f97\n    return int(input())\ndef s(x): #\u5727\u7e2e\n    a = []\n    if len(x) == 0:\n        return []\n    aa = x[0]\n    su = 1\n    for i in range(len(x)-1):\n        if aa != x[i+1]:\n            a.append([aa,su])\n            aa = x[i+1]\n            su = 1\n        else:\n            su += 1\n    a.append([aa,su])\n    return a\ndef jo(x): #list\u3092\u30b9\u30da\u30fc\u30b9\u3054\u3068\u306b\u5206\u3051\u308b\n    return \" \".join(map(str,x))\ndef max2(x): #\u4ed6\u306e\u3068\u304d\u3082\u3069\u3046\u3088\u3046\u306b\u4f5c\u6210\u53ef\u80fd\n    return max(list(map(max,x)))\ndef In(x,a): #a\u304c\u30ea\u30b9\u30c8(sorted)\n    k = bs.bisect_left(a,x)\n    if k != len(a) and a[k] ==  x:\n        return True\n    else:\n        return False\n\ndef pow_k(x, n):\n    ans = 1\n    while n:\n        if n % 2:\n            ans *= x\n        x *= x\n        n >>= 1\n    return ans\n\n\"\"\"\ndef nibu(x,n,r):\n    ll = 0\n    rr = r\n    while True:\n        mid = (ll+rr)//2\n\n    if rr == mid:\n        return ll\n    if (\u3053\u3053\u306b\u8a55\u4fa1\u5165\u308c\u308b):\n        rr = mid\n    else:\n        ll = mid+1\n\"\"\"\n\nn,k = m()\nmod = 998244353\nans = [0 for i in range(n+1)]\n\ndata = []\nfor i in range(k):\n    data.append(l())\n\nfor i in range(0,n):\n    if i == 0:\n        ans[i] = 1\n    else:\n        ans[i] += ans[i-1]\n        ans[i] %= mod\n        for j in range(k):\n            l,r = data[j]\n            r += 1\n            if l + i <= n:\n                ans[i+l] += ans[i]\n                ans[i+l] %= mod\n            if r + i <= n:\n                ans[i+r] -= ans[i]\n                ans[i+r] %= mod\n\nprint((ans[-1]))\n\n\n\n\n\n\n\n", "n, k = list(map(int, input().split()))\nmod = 998244353\narr = []\nfor i in range(k):\n    arr.append(list(map(int, input().split())))\narr.sort()\ndp = [0] * (n+1)\ndp[1] = 1\npresum = [0] * 10\nfor i in range(2, n+1):\n    for j in range(k):\n        presumj = presum[j]\n        if i - arr[j][0] >= 1:\n            presumj += dp[i - arr[j][0]]\n        if i - arr[j][1] -1 >= 1:\n            presumj -= dp[i - arr[j][1] -1]\n        presumj %= mod\n        presum[j] = presumj\n        dp[i] += presumj\n        dp[i] %= mod\nprint(dp[n])", "N, K = list(map(int, input().split()))\nS = [list(map(int, input().split())) for _ in range(K)]\ndp = [0 for _ in range(N + 1)]\nS.sort()\n\ndp[0] = 0\nfor i in range(1, S[0][0]+1):\n    dp[i] = 1\n\n\nfor i in range(S[0][0]+1, N+1):\n    rui = 0\n    for s in S:\n        # \u533a\u9593\u306e\u7d42\u308f\u308a\u304c0\u3088\u308a\u5927\u304d\u3044\u5834\u5408\n        if i - s[0] > 0:\n            # \u533a\u9593\u306e\u59cb\u307e\u308a\u3092\u8a08\u7b97\u3057\u3001\u5b9f\u969b\u306eend\u3092\u8a08\u7b97\u3059\u308b\n            end = max([i - s[1], 0])\n            # \u8ffd\u8de1\u308f\u306b\u3088\u308a\u3001\u5834\u5408\u306e\u548c\u3092\u52a0\u3048\u308b\n            rui += (dp[i - s[0]] - dp[end - 1]) % 998244353\n    # \u7d2f\u7a4d\u548c\u3068\u3057\u3066dp\u306b\u8a18\u5165\u3059\u308b\n    dp[i] = (dp[i-1] + rui) % 998244353\nprint(((dp[N]-dp[N-1]) % 998244353))\n", "n, k = [int(x) for x in input().split()]\nlr = [[int(x) for x in input().split()] for _ in range(k)]\n\naccsum = [0, 1] + [0] * n\n\n\ndef sum_between(l: int, r: int) -> int:\n    if r >= 1:\n        return accsum[r] - accsum[max(l - 1, 0)]\n    else:\n        return 0\n\n\nfor i in range(2, n + 1):\n    accsum[i] = (accsum[i - 1] + sum(sum_between(i - r, i - l) for l, r in lr)) \\\n        % 998244353\n\n\nprint(((accsum[n] - accsum[n - 1]) % 998244353))\n", "def main():\n  mod=998244353\n  N,K=map(int,input().split())\n  S=[tuple(map(int,input().split())) for _ in range(K)]\n  S.sort()\n  \n  f=[0]*N\n  f[0]=1\n  a=[0]*(N+1)\n  a[1]=-1\n  \n  for i in range(0,N-1):\n    for l,r in S:\n      if i+l<N:\n        a[i+l]+=f[i]\n        a[i+l]%=mod\n      if i+r+1<N:\n        a[i+r+1]-=f[i]\n        a[i+r+1]%=mod\n    f[i+1]=(f[i]+a[i+1])%mod\n  print(f[-1])\n  \n  \n  \n  \ndef __starting_point():\n  main()\n__starting_point()", "N,K = list(map(int,input().split()))\nmod = 998244353\ndp = [0] * (N+1)\ndpSum = [0] * (N+1)\nR = []\nL = []\n\nfor i in range(K):\n  l,r = list(map(int,input().split()))\n  L.append(l)\n  R.append(r)\n\ndp[1] = 1\ndpSum[1] = 1\nfor i in range(2,N+1,1):\n  for j in range(K):\n    li = i - R[j]\n    ri = i - L[j]\n    if ri < 1:\n      continue\n    li = max(li, 1)\n    dp[i] += dpSum[ri] % mod - dpSum[li-1] % mod\n  dpSum[i] = dpSum[i-1] % mod + dp[i] % mod\nans = dp[N] % mod\nprint(ans)\n", "N,K = map(int,input().split())\nmod = 998244353\ndp = [0] * (N+1)\nR = []\nL = []\nfor i in range(K):\n  l,r = map(int,input().split())\n  L.append(l)\n  R.append(r)\n  \ndp[1] = 1\ns = [0] * (N+1)\ns[1] = 1\nfor i in range(2,N+1,1):\n  for j in range(K):\n    li = i - R[j]\n    ri = i - L[j]\n    if ri < 1:\n      continue\n    li = max(li, 1)\n    dp[i] += s[ri]%mod - s[li-1]%mod\n  s[i] = s[i-1]%mod + dp[i]%mod\nans = dp[N] % mod\nprint(ans)", "MOD = 998244353\nN, K = map(int, input().split())\nS = []\nfor _ in range(K):\n    s = list(map(int, input().split()))\n    S.append(s)\n\ndp = [0] * N\ndp[0] = 1\nds = [1] * N\nfor i in range(1, N):\n    for s in S:\n        if i - s[0] < 0:\n            continue\n        if i - s[1] - 1 < 0:\n            dp[i] += ds[i - s[0]] % MOD\n        else:\n            dp[i] += (ds[i - s[0]] - ds[i - s[1] - 1]) % MOD\n    ds[i] = ds[i - 1] + dp[i] % MOD\n\nprint(dp[-1] % MOD)", "N, K = list(map(int, input().split()))\nmod = 998244353\nL = list()\nR = list()\nfor i in range(K):\n  l,r = list(map(int, input().split()))\n  L.append(l)\n  R.append(r)\ndp = [0] * (N+1)\ndpSum = [0] * (N+1)\ndp[1] = 1\ndpSum[1] = 1\nfor i in range(2,N+1,1):\n  for j in range(K):\n    li = i - R[j]\n    ri = i - L[j]\n    if ri <= 0:\n      continue\n    li = max(li, 1)\n    dp[i] += dpSum[ri] % mod - dpSum[li-1] % mod\n  dpSum[i] = dpSum[i-1] % mod + dp[i] % mod\nans = dp[N] % mod\nprint(ans)\n", "mod = 998244353\nn,k = list(map(int,input().split()))\nlr = [list(map(int,input().split())) for _ in range(k)]\ndp = [0]*(n+1)\ndp[1] = 1\ndpt = [0]*(n+1)\ndpt[1] = 1\nfor i in range(1,n+1):\n  for l,r in lr:\n    if i-l>0:\n      dp[i] += dpt[i-l]\n      if i-r-1>0:\n        dp[i] -= dpt[i-r-1]\n  dp[i] %= mod\n  dpt[i] = dpt[i-1]+dp[i]\n  dpt[i] %= mod\nprint((dp[n]))\n", "N, K = list(map(int, input().split()))\nMOD = 998244353\n\nLR = [list(map(int, input().split())) for _ in range(K)]\n# LR.sort(key=lambda x: x[0], reverse=True)\n\ndp = [0] * (N + 1)\ndp[0] = 0\ndp[1] = 1\n\nprefix_sum = [0]\nprefix_sum.append(1)\n\nfor i in range(2, N + 1):\n    for j in range(K):\n        l, r = LR[j]\n\n        l1 = max(i - r - 1, 0)\n        r1 = max(i - l, 0)\n\n        dp[i] += prefix_sum[r1] - prefix_sum[l1]\n        dp[i] %= MOD\n\n    prefix_sum.append(prefix_sum[-1] + dp[i])\n\nprint((dp[-1]))\n", "def main():\n    n,k = map(int,input().split())\n    mod = 998244353\n    s = [list(map(int,input().split()))]\n    for _ in range(k-1):\n        l,r = map(int,input().split())\n        s.append([l,r])\n    ans = [0] * (n+1)\n    d = [0] * (n+1)\n    d[1] = 1\n    d[2] = -1\n    for i in range(1,n+1):\n        ans[i] += (ans[i-1] + d[i]) % mod\n        for l,r in s:\n            if i+l < n+1:\n                d[i+l] += ans[i] % mod\n            if i+r+1 < n+1:\n                d[i+r+1] -= ans[i] % mod\n    print(ans[-1]%mod)\n\ndef __starting_point():\n    main()\n__starting_point()", "n, k= map(int, input().split())\nlr = [tuple(map(int, input().split())) for i in range(k)]\n\nMOD = 998244353\n\ndp = [0] * n\ndp[0] = 1\n\nimos = [0] * n\n\nfor i in range(0, n):\n\timos[i] += imos[i - 1]\n\tdp[i] += imos[i]\n\tdp[i] %= MOD\n\tfor l, r in lr:\n\t\tif i + l < n:\n\t\t\timos[i + l] += dp[i]\n\t\t\timos[i] %= MOD\n\t\tif i + r + 1 < n:\n\t\t\timos[i + r + 1] -= dp[i]\nprint(dp[n - 1])", "# coding: utf-8\n# Your code here!\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n \n#n,q = map(int, readline().split())\n#*a, = map(int, readline().split())\n \ndef get(i,l,r):\n    a = i-r\n    b = i-l\n    if b < 0: return 0\n    return acc[b] - (acc[a-1] if a-1 >= 0 else 0)\n \n \n \nn,k = map(int, readline().split())\nlr = [list(map(int, readline().split())) for _ in range(k)]\n \ndp = [0]*(n)\ndp[0] = 1\nacc = [1]*(n)\n \n \nMOD = 998244353\nfor i in range(1,n):\n    v = 0\n    for l,r in lr:\n        v += get(i,l,r)\n    dp[i] = v%MOD\n    acc[i] = (acc[i-1] + dp[i])%MOD\n    #print(dp,acc)\n \nprint(dp[n-1]%MOD)", "N, K = list(map(int, input().split()))\nA = []\nfor i in range(K):\n  l, r = list(map(int, input().split()))\n  A.append((l, r))\nM = 998244353\ndp = [0 for i in range(N+1)]\nsumdp = [0 for i in range(N+1)]\ndp[1] = 1\nsumdp[1] = 1\nfor i in range(2, N+1):\n  tmp = 0\n  for l, r in A:\n    l, r = i-r, i-l\n    if r <= 0:\n      continue\n    l = max(1, l)\n    tmp += (sumdp[r] - sumdp[l-1])\n    tmp %= M\n  dp[i] = tmp\n  sumdp[i] = (sumdp[i-1] + dp[i])%M\nprint((dp[N]))\n", "MOD = 998244353\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    ranges = [None] * K\n    for i in range(K):\n        L, R = list(map(int, input().split()))\n        ranges[i] = (L, R)\n    delta = [0] * (N+1)\n    ans = [0] * (N+1)\n    delta[1] = 1\n    delta[2] = (-1) % MOD\n    for i in range(1, N+1):\n        ans[i] = (ans[i-1] + delta[i]) % MOD\n        for L, R in ranges:\n            if i + L <= N:\n                delta[i+L] = (delta[i+L] + ans[i]) % MOD\n            if i + R + 1 <= N:\n                delta[i+R+1] = (delta[i+R+1] - ans[i]) % MOD\n    print((ans[N]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = map(int, input().split())\nlr = [list(map(int, input().split())) for _ in range(K)]\n\nmod = 998244353\ndp = [0]*(N+1)\ndp[1] = 1\n\nfor i in range(2, N+1):\n    for l, r in lr:\n        if i-l < 1:\n            continue\n        dp[i] += dp[i-l]-dp[max(i-r-1, 0)]\n    dp[i] += dp[i-1]\n    dp[i] %= mod\n\nprint((dp[N]-dp[N-1])%mod)", "n, k = map(int, input().split())\nlr = [list(map(int, input().split())) for _ in range(k)]\nmod = 998244353\ndp = [0]*(n+1)\nimos = [0]*(n+1)\n\nfor i in range(n):\n    if i == 0:\n        tmp = 1\n    else:\n        imos[i] = (imos[i] + imos[i-1])%mod\n        tmp = imos[i]\n    for j in range(k):\n        if lr[j][0]+i >n: continue\n        imos[lr[j][0]+i] += tmp\n        imos[min(lr[j][1]+1+i, n)] -= tmp\nprint(imos[-2]%mod)", "n, k = map(int,input().split())\nmod = 998244353\ndp = [0]*(n*3)\n\nlr = []\nfor _ in range(k):\n    l, r = map(int,input().split())\n    lr.append((l,r))\n\nlr.sort()\n\nimos = [0]*(n*3)\nimos[1] = 1\ndp[1] = 1\n\nfor i in range(1, n):\n    if i >= 2:\n        dp[i+1] += dp[i]\n    for l, r in lr: # i = 1\u306e\u6642\u70b9\u3067dp[2]\u306f\u78ba\u5b9a\u3057\u3066\u3044\u308b\u3002\u305d\u306e\u305f\u3081i>=2\u3067\u306f\u540c\u6642\u306b\u7d2f\u7a4d\u548c\u3092\u6c42\u3081\u308b\u3002\n        dp[i+l] += dp[i]\n        dp[i+l] %= mod\n        dp[i+r+1] -= dp[i]\n        dp[i+r+1] %= mod\n\n        \nprint(dp[n]%mod)", "N, K=map(int,input().split())\nmod=998244353\nM=[]\nfor i in range(K):\n    l,r=map(int,input().split())\n    M.append([l,r])\n \ndp=[0]*(3*N)\ndp[0]=1\ndp[1]=-1\n#imos\nfor i in range(N):\n    for l,r in M:\n        dp[l+i]+=dp[i]\n        dp[i+r+1]-=dp[i]\n    dp[i+1]=(dp[i]+dp[i+1])%mod\nprint(dp[N-1])", "N, K = map(int, input().split())\nLR = [list(map(int, input().split())) for _ in range(K)]\nmod = 998244353\n\nz = [1]+[0]*(N-1)\ns = [0]*(N+2)\nfor j in range(N):\n    for l, r in LR:\n        z[j] += s[j-l] - s[j-r-1]\n    s[j] = (s[j-1] + z[j])%mod\n\nprint(z[-1]%mod)", "n, k = list(map(int, input().split()))\nl = [None] * k\nr = [None] * k\nfor i in range(k):\n    l[i], r[i] = list(map(int, input().split()))\nmod = 998244353\ns = [0] * n\nd = [0] * n\ns[0] = 1\nfor i in range(n - 1):\n    for j in range(k):\n        if i + l[j] < n:\n            d[i + l[j]] += s[i]\n            d[i + l[j]] %= mod\n        if i + r[j] + 1 < n:\n            d[i + r[j] + 1] -= s[i]\n            d[i + r[j] + 1] %= mod\n    s[i + 1] = s[i] + d[i + 1]\n    s[i + 1] %= mod\nprint((d[n - 1]))\n", "N,K=list(map(int,input().split()))\nmod=998244353\nL=[0]*K;R=[0]*K\nm=[0]*3*N\nm[0]=1;m[1]=-1\nfor i in range(K):\n  L[i],R[i]=list(map(int,input().split()))\n\nfor j in range(N):\n  m[j+1]+=m[j]%mod\n  for i in range(K):\n    if j+L[i]>N-1:continue\n    m[j+L[i]] +=m[j]%mod\n    m[j+R[i]+1] -=m[j]%mod\nprint((m[N-1]%mod))\n", "N,K=map(int,input().split())\nlr=[list(map(int,input().split())) for i in range(K)]\ndp=[0]*(N+1)\na=[0]*(N+1)\ndp[1]=1;a[1]=1\nmod=998244353\nfor i in range(1,N+1):\n   for l,r in lr:\n      if i-l>0:\n         dp[i]+=a[i-l]\n      if i-r-1>0:\n         dp[i]-=a[i-r-1]\n   dp[i]%=mod\n   a[i]=a[i-1]+dp[i]\n   a[i]%=mod\nprint(dp[N])", "mod = 998244353\nn,k=map(int,input().split())\ns=[list(map(int,input().split())) for _ in range(k)]\ndp=[0]*(n+1)\ndp[1]=1\ndpsum=[0]*(n+1)\ndpsum[1]=1\n\nfor i in range(2,n+1):\n  for s1,s2 in s:\n    l=i-s2\n    r=i-s1\n    if r<1:\n      continue\n    l=max(l,1)\n    dp[i]+=(dpsum[r]-dpsum[l-1])%mod\n  dpsum[i]=(dpsum[i-1]+dp[i])%mod\nprint(dp[-1]%mod)", "mod = 998244353\nn, k = map(int, input().split())\nlist_N = [0] * (n + 1)\nlist_N[1] = 1\nlist_N[2] = -1\nd = []\nfor _ in range(k):\n    l, r = map(int, input().split())\n    d.append([l, r])\ncnt = 0\nfor i in range(1, n + 1):\n    cnt += list_N[i]\n    cnt %= mod\n    if cnt != 0:\n        for l, r in d:\n            if i + l <= n:\n                list_N[i + l] += 1 * cnt\n            if i + r + 1 <= n:\n                list_N[i + r + 1] -= 1 * cnt\n\nprint(cnt % mod)", "n, k = map(int, input().split())\nL = [0 for i in range(k)]\nR = [0 for i in range(k)]\nfor i in range(k):\n    L[i], R[i] = map(int, input().split())\n\nDP = [0 for i in range(n+1)] # DP[0] is not used\nS = [0 for i in range(n+1)]\nmod = 998244353\nDP[1] = 1\nS[1] = 1\nfor i in range(2, n+1):\n    for j in range(k):\n        imin, imax = max(0, i - R[j]), max(0, i - L[j]) \n        DP[i] = (DP[i] + S[imax] - S[imin - 1]) % mod # sum DP[i-R[j]]~DP[i-L[j]]\n    S[i] = (S[i-1] + DP[i]) % mod\n\nprint(DP[n])", "mod=998244353\nn,k=map(int,input().split())\nL=[]\nR=[]\nfor _ in range(k):\n    l,r=map(int,input().split())\n    L.append(l)\n    R.append(r)\ndp=[0]*n\ndp[0]=1\ndp_s=[0]*n\ndp_s[0]=1\nfor i in range(1,n):\n    for j in range(k):\n        l=L[j]\n        r=R[j]\n        if i-l>=0:\n            if i-r>=1:\n                dp[i]=(dp[i]+dp_s[i-l]-dp_s[i-r-1])%mod\n            else:\n                dp[i]=(dp[i]+dp_s[i-l])%mod\n    dp_s[i]=(dp_s[i-1]+dp[i])%mod\nprint(dp[n-1])", "n, k = list(map(int,input().split()))\np = 998244353\nl = []\nr = []\n\nfor i in range(0, k):\n  x, y = list(map(int,input().split()))\n  l.append(x)\n  r.append(y)\n\na = [0] * (n + 1)\ns = [0] * (n + 1)\na[1] = 1\ns[1] = 1\n\nfor i in range(2, n + 1):\n  for j in range(0, k):\n    L = max(i - r[j], 1)\n    R = max(i - l[j], 0)\n    a[i] += s[R] - s[L - 1]\n    a[i] %= p\n  s[i] = s[i - 1] + a[i]\n  s[i] %= p\n\nprint((a[n]))\n", "N, K = map(int, input().split())\nL = [list(map(int, input().split())) for i in range(K)]\n\n#print (L)                                                                                                                                                                 \n\ndp = [0 for i in range(N + 10)]\nsdp = [0 for i in range(N + 11)]\ndp[0] = 1\nsdp[1] = 1\n\nfor i in range(1, N):\n    #print('i:',i)                                                                                                                                                         \n    for array in L:\n        #print('array loop:', array)                                                                                                                                       \n        if i - array[-1] < 0:\n            start = 0\n        else:\n            start = i - array[-1]\n        if i - array[0] < 0:\n            end = 0\n        else:\n            end = i - array[0] + 1\n                                                                                                                                       \n        dp[i] += sdp[end] - sdp[start]\n    dp[i] = dp[i] % 998244353\n    sdp[i+1] = sdp[i] + dp[i]                                                                                                                                                         \n\nprint(dp[N-1])", "n,k=map(int,input().split());A=[1]+[0]*n;S=[[*map(int,input().split())]for _ in\"_\"*k];m=998244353\nfor i in range(1,n):\n  A[i]+=A[i-1]\n  for l,r in S:\n    if i>r:A[i]-=A[i-r-1]\n    if i>=l:A[i]+=A[i-l]\n  A[i]%=m\nprint((A[n-1]-A[n-2])%m)", "N,K=map(int,input().split())\nLR=[list(map(int,input().split())) for i in range(K)]\nd=[0]*(N+1)\nda=[0]*(N+1)\nd[1]=da[1]=1\nm=998244353\nfor i in range(1,N):\n    for l,r in LR:\n        if l<=i+1:\n            d[i+1]+=da[i+1-l]-da[max(0,i-r)]\n    da[i+1]=(da[i]+d[i+1])%m\nprint(d[-1]%m)", "n, k = map(int,input().split())\nl = []\nr = []\nMOD = 998244353\nfor i in range(k):\n    i1, i2 = map(int, input().split())\n    l.append(i1)\n    r.append(i2)\n\ndp =[0]*(n+1)\ndpsum = [0]*(n+1)\ndp[1] = 1\ndpsum[1]= 1\n\nfor i in range(1,n+1):\n    for j in range(k):\n        li = i-r[j]\n        ri = i-l[j]\n        if ri < 0:\n            continue\n        li = max(0,li)\n        dp[i] += (dpsum[ri] - dpsum[li-1])%MOD\n    dpsum[i] = (dpsum[i-1] + dp[i])%MOD\n\nprint(dp[n]%MOD)", "n, k = list(map(int, input().split()))\nmod = 998244353\ndp = [0 for _ in range(n + 5)]\ndpsum = [0 for _ in range(n + 5)]\ndp[1] = 1\ndpsum[1] = 1\nl = []\nr = []\n\nfor i in range(k):\n    ll, rr = list(map(int, input().split()))\n    l.append(ll)\n    r.append(rr)\n\nfor i in range(1, n + 1):\n    for j in range(k):\n        # \u5de6\u7aef\u306fi-\u533a\u9593\u53f3\u7aef\n        lindex = i - r[j]\n        rindex = i - l[j]\n        dp[i] += dpsum[rindex] - dpsum[lindex - 1]\n        dp[i] %= mod\n    dpsum[i] = dpsum[i - 1] + dp[i]\n    dpsum[i] %= mod\n# print(dp)\n# print(dpsum)\n\nprint((dp[n]))\n", "#!/usr/bin/env python3\nimport sys\n\nMOD = 998244353  # type: int\n\ndef solve(N: int, K: int, L: \"List[int]\", R: \"List[int]\"):\n    n = N+1\n    a = [0] * n\n    s = [0] * n\n    a[1] = 1\n    s[1] = 1\n    for i in range(2, n):\n        for k in range(K):\n            l = max(i - R[k], 0)\n            r = max(i - L[k], 0)\n            a[i] += s[r] - s[l-1]\n            a[i] %= MOD\n        s[i] = s[i-1] + a[i]\n        s[i] %= MOD\n    return a[N] % MOD\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    L = [int()] * (K)  # type: \"List[int]\"\n    R = [int()] * (K)  # type: \"List[int]\"\n    for i in range(K):\n        L[i] = int(next(tokens))\n        R[i] = int(next(tokens))\n    print((solve(N, K, L, R)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N,K = map(int,input().split())\nmod = 998244353\n\nLR = [list(map(int,input().split())) for _ in range(K)]\n\ndp = [0]*(N+1)\ndp[1] = 1\n\nmemo = [0]\nmemo.append(1)\nfor i in range(2, N+1):\n    for l,r in LR:\n        dp[i] += memo[max(0,i-l)] - memo[max(0,i-r-1)]\n        dp[i] %= mod\n    memo.append(memo[-1] + dp[i])\nprint(dp[-1])", "# -*- coding utf-8 -*-\n\nMOD = 998244353\n\nN, K = list(map(int, input().split()))\nLR_K = [list(map(int, input().split())) for _ in range(K)]\n\nS = set()\nfor LR in LR_K:\n    S |= set(range(LR[0], LR[1] + 1))\n\ndp = [0] * (N + 1)\ndp[1] = 1\n\ndpsum = [0] * (N + 1)\ndpsum[1] = 1\n\nfor i in range(2, N + 1):\n    for LR in LR_K:\n        li = max(i - LR[1], 1)\n        ri = i - LR[0]\n        if ri < 0:\n            continue\n        dp[i] += dpsum[ri] - dpsum[li - 1]\n        dp[i] %= MOD\n    dpsum[i] = dpsum[i - 1] + dp[i]\nprint((dp[N]))\n", "n, k = list(map(int, input().split()))\ndp = [0]*(n)\na = [list(map(int, input().split())) for i in range(k)]\n\ndp[0] = 1\ndp[1] = -1\nfor i in range(n-1):\n    for l, r in a:\n        if i+l < n:\n            dp[i+l] += dp[i]\n    for l, r in a:\n        if i+r+1 < n:\n            dp[i+r+1] -= dp[i]\n\n    dp[i+1] += dp[i]\n    dp[i+1] %= 998244353\n\nprint((dp[n-1]))\n"]