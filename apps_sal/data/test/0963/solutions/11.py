#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(N: int, K: int, L: "List[int]", R: "List[int]"):
    cum = [0] * (N + 1)
    dp = [0] * (N + 1)

    cum[1] = 1
    dp[1] = 1

    cnt = 0

    for i in range(2, N + 1):
        for j in range(K):
            if L[j] - 1 < 0:
                continue
            dp[i] += cum[i - L[j]] - cum[i - R[j] - 1]
        cum[i] = (cum[i - 1] + dp[i]) % MOD

    return print(dp[N] % MOD)


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    L = [int()] * (K)  # type: "List[int]"
    R = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, K, L, R)


def __starting_point():
    main()


__starting_point()
