["h,w = map(int,input().split())\ns = [list(input()) for i in range(h)]\nhh = -1\ntmp = -1\nfor k,i in enumerate(s):\n    a = i.count('*')\n    if tmp < a:\n        tmp = a\n        hh = k\n\nt = [list(i) for i in list(zip(*s))]\nww = -1\ntmp = -1\nfor k,i in enumerate(t):\n    a = i.count('*')\n    if tmp < a:\n        tmp = a\n        ww = k\n\nif s[hh][ww] != '*':\n    print('NO')\n    return\n\nif hh in (0, h - 1) or ww in (0, w - 1):\n    print('NO')\n    return\n\nif '.' in (s[hh-1][ww], s[hh+1][ww], s[hh][ww-1], s[hh][ww+1]):\n    print('NO')\n    return\n\ncnt = 1\nfor i in range(hh - 1, -1, -1):\n    if s[i][ww] == '.':\n        break\n    cnt += 1\nfor i in range(ww - 1, -1, -1):\n    if s[hh][i] == '.':\n        break\n    cnt += 1\nfor i in range(hh + 1, h):\n    if s[i][ww] == '.':\n        break\n    cnt += 1\nfor i in range(ww + 1, w):\n    if s[hh][i] == '.':\n        break\n    cnt += 1\n\nfor i in range(h):\n    for j in range(w):\n        cnt -= (s[i][j] == '*')\n\nif cnt != 0:\n    print('NO')\nelse:\n    print('YES')", "n, m = map(int, input().split())\na = [[i == '*' for i in input()] for j in range(n)]\nt = ()\nfor i in range(1, n - 1):\n    for j in range(1, m - 1):\n        if a[i][j] and a[i][j + 1] and a[i][j - 1] and a[i + 1][j] and a[i - 1][j]:\n            if not t:\n                t = (i, j)\n            else:\n                print('NO')\n                return\nif not t:\n    print('NO')\n    return\nfor i in range(t[0], -1, -1):\n    if a[i][t[1]]:\n        a[i][t[1]] = False\n    else:\n        break\nfor i in range(t[0] + 1, n):\n    if a[i][t[1]]:\n        a[i][t[1]] = False\n    else:\n        break\nfor i in range(t[1] - 1, -1, -1):\n    if a[t[0]][i]:\n        a[t[0]][i] = False\n    else:\n        break\nfor i in range(t[1] + 1, m):\n    if a[t[0]][i]:\n        a[t[0]][i] = False\n    else:\n        break\n# print(a)\nfor el in a:\n    for ell in el:\n        if ell:\n            print('NO')\n            return\nprint('YES')", "r, c = map(int, input().split())\nboard = [input() for i in range(r)]\nstars = sum([i.count('*') for i in board])\n\ndef valid(x, y):\n  nonlocal r, c\n  return 0<=x<r and 0<=y<c \n\ndef f(r, c):\n  nonlocal board\n  cnt = 1\n\n  for dr, dc in (1, 0), (-1, 0), (0, 1), (0, -1):\n    i = 1\n    while valid(r + i*dr, c + i*dc):\n      if board[r+i*dr][c+i*dc] == '*':\n        cnt += 1\n      else:\n        break\n      i += 1\n  \n  return cnt\n\nfor i in range(1, r-1):\n  for j in range(1, c-1):\n    if '*' == board[i][j] == board[i-1][j] == board[i+1][j] == board[i][j-1] == board[i][j+1]:\n      if f(i, j) == stars:\n        print(\"YES\")\n        return\n\nprint(\"NO\")", "h, w = map(int, input().split())\nT = [[] for i in range(h)]\nnum = 0\nfor i in range(h):\n    T[i] = list(input())\n    for j in range(w):\n        if T[i][j] == '*':\n            num += 1\nif num >= h + w:\n    print('NO')\n    return\nfor i in range(h):\n    for j in range(w):\n        if T[i][j] == '*':\n            tmp = 1\n            x, y = i, j\n            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                nx, ny = x + dx, y + dy\n                if not (0 <= nx < h and 0 <= ny < w and T[nx][ny] == '*'):\n                    tmp = -1000000\n                    break\n                while 0 <= nx < h and 0 <= ny < w and T[nx][ny] == '*':\n                    tmp += 1\n                    nx, ny = nx + dx, ny + dy\n\n            if tmp == num:\n                print('YES')\n                return\n\nprint('NO')", "def solve():\n    H, W = map(int, input().split())\n    \n    G = [[1 if s == '*' else 0 for s in input()] for _ in range(H)]\n    \n    h = -1\n    cnt = 0\n    for i, g in enumerate(G):\n        cnt += sum(g)\n        if sum(g) > 1:\n            if h == -1:\n                h = i\n            else:\n                return False\n    \n    G = list(map(list, zip(*G)))\n    w = -1\n    for i, g in enumerate(G):\n        if sum(g) > 1:\n            if w == -1:\n                w = i\n            else:\n                return False\n    \n    G = list(map(list, zip(*G)))\n    \n    c, c1, c2, c3, c4 = 1, 0, 0, 0, 0\n    for i in range(w+1, W):\n        if not G[h][i]:\n            break\n        c1 += 1\n    for i in range(w-1, -1, -1):\n        if not G[h][i]:\n            break\n        c2 += 1\n    for i in range(h+1, H):\n        if not G[i][w]:\n            break\n        c3 += 1\n    for i in range(h-1, -1, -1):\n        if not G[i][w]:\n            break\n        c4 += 1\n    c += c1 +c2 + c3 + c4\n    if c == cnt and c1*c2*c3*c4:\n        return True\n    return False\n\nif solve():\n    print('YES')\nelse:\n    print('NO')", "h,w=map(int,input().split())\narr=[]\nfor i in range(h):\n\ts=str(input())\n\tarr1=[]\n\tfor j in range(w):\n\t\tarr1.append(s[j])\n\tarr.append(arr1)\nflag=0\nh1=-1\nw1=-1\nfor i in range(1,h-1):\n\tfor j in range(1,w-1):\n\t\tif(arr[i][j]=='*'):\n\t\t\tif(arr[i-1][j]==arr[i+1][j]==arr[i][j-1]==arr[i][j+1]=='*'):\n\t\t\t\tflag=1\n\t\t\t\th1=i\n\t\t\t\tw1=j\n\t\t\t\tbreak\n\tif(flag==1):\n\t\tbreak\nif(flag==1):\n\ti=h1\n\twhile(i>=0 and arr[i][w1]=='*'):\n\t\tarr[i][w1]='?'\n\t\ti-=1\n\n\ti=h1+1\n\twhile(i<h and arr[i][w1]=='*'):\n\t\tarr[i][w1]='?'\n\t\ti+=1\n\n\tj=w1-1\n\twhile(j>=0 and arr[h1][j]=='*'):\n\t\tarr[h1][j]='?'\n\t\tj-=1\n\tj=w1+1\n\twhile(j<w and arr[h1][j]=='*'):\n\t\tarr[h1][j]='?'\n\t\tj+=1\n\n\t# for i in range(h):\n\t# \tprint(*arr[i])\n\n\tflag2=0\n\tfor i in range(h):\n\t\tfor j in range(w):\n\t\t\tif(arr[i][j]=='*'):\n\t\t\t\tflag2=1\n\t\t\t\tbreak\n\t\tif(flag2==1):\n\t\t\tbreak\n\n\tif(flag2==0):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nelse:\n\tprint('NO')", "\ndef main():\n    buf = input()\n    buflist = buf.split()\n    h = int(buflist[0])\n    w = int(buflist[1])\n    S = []\n    for i in range(h):\n        buf = input()\n        S.append(buf)\n    cross_point = []\n    for i in range(h):\n        cross_point.append([])\n        for j in range(w):\n            if i > 0 and i < h-1 and j > 0 and j < w-1:\n                if S[i][j] == '*' and S[i-1][j] == '*' and S[i+1][j] == '*' and S[i][j-1] == '*' and S[i][j+1] == '*':\n                    cross_point[i].append(True)\n                    continue\n            cross_point[i].append(False)\n    cross_point_location = None\n    for i in range(h):\n        for j in range(w):\n            if cross_point[i][j]:\n                if cross_point_location == None:\n                    cross_point_location = (i, j)\n                else:\n                    print('NO') # multiple crosses\n                    return\n    if cross_point_location == None:\n        print('NO') # no crosses\n        return\n    group = []\n    for i in range(h):\n        group.append([])\n        for j in range(w):\n            group[i].append(False)\n    # down\n    for i in range(cross_point_location[0], h):\n        if S[i][cross_point_location[1]] == '*':\n            group[i][cross_point_location[1]] = True\n        else:\n            break\n    # up\n    for i in range(cross_point_location[0], -1, -1):\n        if S[i][cross_point_location[1]] == '*':\n            group[i][cross_point_location[1]] = True\n        else:\n            break\n    # right\n    for j in range(cross_point_location[1], w):\n        if S[cross_point_location[0]][j] == '*':\n            group[cross_point_location[0]][j] = True\n        else:\n            break\n    # left\n    for j in range(cross_point_location[1], -1, -1):\n        if S[cross_point_location[0]][j] == '*':\n            group[cross_point_location[0]][j] = True\n        else:\n            break\n    for i in range(h):\n        for j in range(w):\n            if S[i][j] == '*' and not group[i][j]:\n                print('NO') # others are not empty\n                return\n    print('YES')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nh,w=list(map(int,input().split()))\nMAP=[list(input()) for i in range(h)]\nflag=0\n\nfor i in range(1,h-1):\n    for j in range(1,w-1):\n        if MAP[i][j]==MAP[i-1][j]==MAP[i+1][j]==MAP[i][j-1]==MAP[i][j+1]==\"*\":\n            CI=i\n            CJ=j\n            flag=1\n            break\n\n    if flag==1:\n        break\n\nif flag==0:\n    print(\"NO\")\n    return\n\nLIST=[[0]*w for i in range(h)]\n\nfor i in range(CI,-1,-1):\n    if MAP[i][CJ]==\"*\":\n        LIST[i][CJ]=1\n    else:\n        break\n\nfor i in range(CI,h):\n    if MAP[i][CJ]==\"*\":\n        LIST[i][CJ]=1\n    else:\n        break\n\nfor j in range(CJ,-1,-1):\n    if MAP[CI][j]==\"*\":\n        LIST[CI][j]=1\n    else:\n        break\n\nfor j in range(CJ,w):\n    if MAP[CI][j]==\"*\":\n        LIST[CI][j]=1\n    else:\n        break\n\n#print(LIST)\n\nfor i in range(h):\n    for j in range(w):\n        if MAP[i][j]==\"*\" and LIST[i][j]==0:\n            print(\"NO\")\n            return\n\nprint(\"YES\")\n", "import sys\n\nn, m = map(int, input().split())\n\ngrid = []\n\nstars = []\n\nfor r in range(n):\n\tgrid.append([])\n\tfor c in range(m):\n\t\tif sys.stdin.read(1) == \"*\":\n\t\t\tstars.append((r, c))\n\t\t\tgrid[-1].append(1)\n\t\telse:\n\t\t\tgrid[-1].append(0)\n\tsys.stdin.read(1)\n\nrc = {}\ncc = {}\n\nfor r, c in stars:\n\trc[r] = rc.get(r, 0) + 1\n\tcc[c] = cc.get(c, 0) + 1\n\nif len(rc) != 1 + list(rc.values()).count(1):\n\tprint(\"NO\")\nelif len(cc) != 1 + list(cc.values()).count(1):\n\tprint(\"NO\")\nelse:\n\tx = [i for i in rc if rc[i] > 1][0]\n\ty = [i for i in cc if cc[i] > 1][0]\n\tcenter = (x, y)\n\ttry:\n\t\tif not (grid[x - 1][y] and grid[x + 1][y] and grid[x][y - 1] and grid[x][y + 1]):\n\t\t\tprint(\"NO\")\n\t\telse:\n\t\t\tcount = 0\n\t\t\tfor delta in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n\t\t\t\tcx, cy = center\n\t\t\t\twhile 0 <= cx < n and 0 <= cy < m and grid[cx][cy]:\n\t\t\t\t\tcx, cy = cx + delta[0], cy + delta[1]\n\t\t\t\t\tcount += 1\n\t\t\tif len(stars) == count - 3:\n\t\t\t\tprint(\"YES\")\n\t\t\telse:\n\t\t\t\tprint(\"NO\")\n\texcept:\n\t\tprint(\"NO\")", "def gns():\n    return list(map(int,input().split()))\nr,c=gns()\nm=[[0]*c for i in range(r)]\nrm,cm=[0]*r,[0]*c\nfor i in range(r):\n    x=input()\n    for j in range(c):\n        if x[j]=='*':\n            m[i][j]=1\n            rm[i]+=1\n            cm[j]+=1\nx,y=0,0\nfor i in range(r):\n    if rm[i]>=3:\n        x=i\nfor j in range(c):\n    if cm[j]>=3:\n        y=j\nans=1\nif (x==0 or x==r-1 or y==0 or y==c-1) or m[x][y]+m[x-1][y]+m[x+1][y]+m[x][y-1]+m[x][y+1]<5:\n    print('NO')\n    quit()\nj=y-1\nwhile j>=0:\n    if m[x][j]==1:\n        ans+=1\n    else:\n        break\n    j-=1\nj=y+1\nwhile j<c:\n    if m[x][j]==1:\n        ans+=1\n    else:\n        break\n    j+=1\ni=x-1\nwhile i>=0:\n    if m[i][y]==1:\n        ans+=1\n    else:\n        break\n    i-=1\ni=x+1\nwhile i<r:\n    if m[i][y]==1:\n        ans+=1\n    else:\n        break\n    i+=1\nif ans==sum(rm):\n    print('YES')\nelse:\n    print('NO')\n", "n, m = map(int, input().split())\ns = []\nfor i in range(n):\n    s.append(input())\n\nflag = False\n\ndef check(x, y):\n    if s[x-1][y-1] == s[x-1][y+1] == s[x+1][y-1] == s[x+1][y+1] == '.' and s[x-1][y] == s[x][y] == s[x+1][y] == s[x][y-1] == s[x][y+1] == '*':\n        return True\n    return False\n\ndef supercheck(x, y):\n    k = 1\n    i = x-1\n    while i >= 0 and s[i][y] == '*':\n        i -= 1\n        k += 1\n\n    i = x+1\n    while i < n and s[i][y] == '*':\n        i += 1\n        k += 1\n\n    i = y - 1\n    while i >= 0 and s[x][i] == '*':\n        i -= 1\n        k += 1\n\n    i = y + 1\n    while i < m and s[x][i] == '*':\n        i += 1\n        k += 1\n\n    true_k = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == '*':\n                true_k += 1\n\n    if true_k == k:\n        return True\n    return False\n\n\nfor i in range(1, n - 1):\n    for j in range(1, m - 1):\n        if s[i][j] != '*': continue\n        if check(i, j):\n            if supercheck(i, j):\n                print('YES')\n                return\n            else:\n                print('NO')\n                return\n\nprint('NO')", "n,m=map(int,input().split())\na=[]\nfor i in range(n):\n    a.append(list(input()))\nb=0\nfor i in a:\n    b+=i.count('*')\nx=y=-1\nfor i in range(1,n-1):\n    for j in range(1,m-1):\n        if a[i][j]==a[i][j-1]==a[i][j+1]==a[i-1][j]==a[i+1][j]=='*':\n            x=i\n            y=j\n            break\nif x==y==-1:\n    print('NO');return\nr=1\nfor i in range(x+1,n):\n    if a[i][y]=='*':\n        r+=1\n    else:\n        break\nfor i in range(x-1,-1,-1):\n    if a[i][y]=='*':\n        r+=1\n    else:\n        break\nfor i in range(y+1,m):\n    if a[x][i]=='*':\n        r+=1\n    else:\n        break\nfor i in range(y-1,-1,-1):\n    if a[x][i]=='*':\n        r+=1\n    else:\n        break\nif r==b:\n    print('YES')\nelse:\n    print('NO')\n\n\n\n        ", "h,w=map(int,input().split())\narr=[input() for _ in range(h)]\ncnt_center=0\npos_center_x=0\npos_center_y=0\ncnt_plus=1\ncnt_black=0\nif h>=3 and w>=3:\n  for i in range(1,h-1):\n    for j in range(1,w-1):\n      if arr[i][j]=='*':\n        if arr[i-1][j]=='*' and arr[i+1][j]=='*' and arr[i][j-1]=='*' and arr[i][j+1]=='*':\n          cnt_center+=1\n          pos_center_y=i\n          pos_center_x=j\n  if cnt_center!=1:\n    print('NO')\n  else:\n    for i in range(pos_center_x-1,-1,-1):\n      if arr[pos_center_y][i]=='*':\n        cnt_plus+=1\n      else:\n        break\n    for i in range(pos_center_x+1,w):\n      if arr[pos_center_y][i]=='*':\n        cnt_plus+=1\n      else:\n        break\n    for i in range(pos_center_y-1,-1,-1):\n      if arr[i][pos_center_x]=='*':\n        cnt_plus+=1\n      else:\n        break\n    for i in range(pos_center_y+1,h):\n      if arr[i][pos_center_x]=='*':\n        cnt_plus+=1\n      else:\n        break\n    for i in range(h):\n      for j in range(w):\n        if arr[i][j]=='*':\n          cnt_black+=1\n    if cnt_plus==cnt_black:\n      print('YES')\n    else:\n      print('NO')\nelse:\n  print('NO')", "\ndef __starting_point():\n    h, w = list(map(int, input().split()))\n    s = []\n    for _ in range(h):\n        s.append(list(input()))\n\n    rr, cc = None, None\n\n    for r in range(1, h-1):\n        for c in range(1, w - 1):\n            if s[r][c] == s[r-1][c] == s[r][c-1] == s[r+1][c] == s[r][c+1] == '*':\n                s[r][c] = '.'\n\n                i = r + 1\n                while i < h and s[i][c] == '*':\n                    s[i][c] = '.'\n                    i += 1\n\n                i = r - 1\n                while i >= 0 and s[i][c] == '*':\n                    s[i][c] = '.'\n                    i -= 1\n\n                i = c + 1\n                while i < w and s[r][i] == '*':\n                    s[r][i] = '.'\n                    i += 1\n\n                i = c - 1\n                while i >= 0 and s[r][i] == '*':\n                    s[r][i] = '.'\n                    i -= 1\n\n                for i in range(h):\n                    for j in range(w):\n                        if s[i][j] == '*':\n                            print(\"NO\")\n                            return\n\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\n\n__starting_point()", "n, m = list(map(int, input().split()))\narr = []\nfor i in range(n):\n  arr.append(input())\n\nseen = set()\n\ndef get_first_star():\n  r, c = -1, -1\n  for i in range(n):\n    for j in range(m):\n      if arr[i][j] == '*':\n        seen.add((i, j))\n        return i, j\n  return r, c\n\ndef vertical_points(r, c):\n  i = r+1\n  while i < n and arr[i][c] == '*':\n    seen.add((i, c))\n    i += 1\n  return i\n\ndef find_horizontal(r, re, c):\n  i = r+1\n  found = False\n  while i < re-1:\n    if arr[i][c-1] == '*' and arr[i][c+1] == '*':\n      found = True\n      break\n    i += 1\n  if not found:\n    return -1\n  j = c-1\n  while j >= 0 and arr[i][j] == '*':\n    seen.add((i, j))\n    j -= 1\n  j = c+1\n  while j < m and arr[i][j] == '*':\n    seen.add((i, j))\n    j += 1\n  return 1\n\ndef find_answer():\n  r, c = get_first_star()\n  if c <=0 or c >= m-1:\n    return -1\n\n  re = vertical_points(r, c) \n  res = find_horizontal(r, re, c) \n  if res == -1:\n    return -1\n\n  for i in range(n):\n    for j in range(m):\n      if (i, j) not in seen and arr[i][j] == '*':\n        return -1\n\n  return 1\n\nprint(\"YES\" if find_answer() == 1 else \"NO\")\n", "def printGrid(grid):\n\tfor row in grid:\n\t\tprint(' '.join(list(map(str, row))))\n\nn, m = map(int, input().strip().split())\ngrid = [list(input().strip()) for _ in range(n)]\nc = 0\nfound = False\nfor i in range(1, n-1):\n\tif found:\tbreak\n\tfor j in range(1, m-1):\n\t\tif grid[i][j] == '*' and grid[i-1][j] == '*' and grid[i+1][j] == '*' and grid[i][j-1] == '*' and grid[i][j+1] == '*':\n\t\t\tgrid[i][j] = '.'\n\t\t\tr, c = i-1, j\n\t\t\twhile r >= 0:\n\t\t\t\tif grid[r][c] == '*':\n\t\t\t\t\tgrid[r][c] = '.'\n\t\t\t\t\tr -= 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tr, c = i+1, j\n\t\t\twhile r < n:\n\t\t\t\tif grid[r][c] == '*':\n\t\t\t\t\tgrid[r][c] = '.'\n\t\t\t\t\tr += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tr, c = i, j-1\n\t\t\twhile c >= 0:\n\t\t\t\tif grid[r][c] == '*':\n\t\t\t\t\tgrid[r][c] = '.'\n\t\t\t\t\tc -= 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tr, c = i, j+1\n\t\t\twhile c < m:\n\t\t\t\tif grid[r][c] == '*':\n\t\t\t\t\tgrid[r][c] = '.'\n\t\t\t\t\tc += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tfound = True\n\t\t\tbreak\nif not found:\n\tprint('NO');return\nfor row in grid:\n\tif '*' in row:\n\t\tprint('NO');return\nprint('YES')", "n,m=list(map(int,input().split()))\ndef parc(pt,j):\n    if l[pt[0]][pt[1]]:\n        l[pt[0]][pt[1]]=False\n        parc(j(pt),j)\ndef f():\n    mv=[lambda x:(x[0]+1,x[1]),lambda x:(x[0]-1,x[1]),lambda x:(x[0],x[1]-1),lambda x:(x[0],x[1]+1)]\n    for k in range(2,n):\n        for i in range(2,m):\n            if l[k][i] and min(l[j[0]][j[1]] for j in [h((k,i)) for h in mv]):\n                for j in mv:\n                    parc(j((k,i)),j)\n                l[k][i]=False\n                if max(list(map(max,l))):\n                    return False\n                return True\n    return False\n\nl=[[False]*(m+2)]\nfor k in range(n):\n    l.append([False]+[i=='*' for i in input()]+[False])\nl.append([False]*(m+2))\nif f():\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "import io, sys, atexit, os\nimport math as ma\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\n\ndef li ():\n\treturn list (map (int, input ().split ()))\n\n\ndef num ():\n\treturn map (int, input ().split ())\n\n\ndef nu ():\n\treturn int (input ())\n\n\ndef find_gcd ( x, y ):\n\twhile (y):\n\t\tx, y = y, x % y\n\treturn x\n\n\ndef lcm ( x, y ):\n\tgg = find_gcd (x, y)\n\treturn (x * y // gg)\n\n\nmm = 1000000007\nyp = 0\n\ndef solve ():\n\tt = 1\n\tfor _ in range (t):\n\t\th,w=num()\n\t\txp=[0]*h\n\t\tfor i in range(h):\n\t\t\txp[i]=[0]*w\n\t\t\tlp=input()\n\t\t\tfor j in range(len(lp)):\n\t\t\t\tif(lp[j]==\".\"):\n\t\t\t\t\txp[i][j]=0\n\t\t\t\telse:\n\t\t\t\t\txp[i][j]=1\n\t\tfl=False\n\t\tfor i in range(h):\n\t\t\tfor j in range(w):\n\t\t\t\tif(xp[i][j]==1):\n\t\t\t\t\tif((i-1>=0 and xp[i-1][j]==1) and (i+1<h and xp[i+1][j]==1) and (j-1>=0 and xp[i][j-1]==1) and (j+1<w and xp[i][j+1]==1)):\n\t\t\t\t\t\tfl=True\n\t\t\t\t\t\txp[i][j]=2\n\t\t\t\t\t\tfor k in range(i-1,-1,-1):\n\t\t\t\t\t\t\tif(xp[k][j]==1):\n\t\t\t\t\t\t\t\txp[k][j]=2\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tfor k in range(i+1,h):\n\t\t\t\t\t\t\tif (xp [ k ] [ j ] == 1):\n\t\t\t\t\t\t\t\txp [ k ] [ j ] = 2\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tfor k in range(j-1,-1,-1):\n\t\t\t\t\t\t\tif (xp [ i ] [ k ] == 1):\n\t\t\t\t\t\t\t\txp [ i ] [ k ] = 2\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tfor k in range(j+1,w):\n\t\t\t\t\t\t\tif (xp [ i ] [ k ] == 1):\n\t\t\t\t\t\t\t\txp [ i ] [ k ] = 2\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tbreak\n\t\t\tif(fl):\n\t\t\t\tbreak\n\t\tif(fl):\n\t\t\top=True\n\t\t\tfor i in range(h):\n\t\t\t\tfor j in range(w):\n\t\t\t\t\tif(xp[i][j]==1):\n\t\t\t\t\t\top=False\n\t\t\tif(op==False):\n\t\t\t\tprint(\"NO\")\n\t\t\telse:\n\t\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\ndef __starting_point():\n\tsolve ()\n__starting_point()", "n, m = list(map(int, input().split()))\nseen = [[False]*m for _ in range(n)]\nmat = [input() for _ in range(n)]\n\n\ndef is_cross(i, j):\n\tif i == 0 or i == n -1 or j == 0 or j == m-1 or mat[i-1][j] != '*' or mat[i+1][j] != '*' or mat[i][j-1] != '*' or mat[i][j+1] != '*':\n\t\treturn (False, None, None)\n\telse:\n\t\ttop = i-1\n\t\tbot = i+1\n\t\tleft = j-1\n\t\tright = j+1\n\t\twhile top > 0 and mat[top-1][j] == '*':\n\t\t\ttop -= 1\n\t\twhile left > 0 and mat[i][left-1] == '*':\n\t\t\tleft -= 1\n\t\twhile bot < n-1 and mat[bot+1][j] == '*':\n\t\t\tbot += 1\n\t\twhile right < m-1 and mat[i][right+1] == '*':\n\t\t\tright += 1\n\n\t\treturn (True, [[top, bot], [left, right]], (i, j))\n\n\nfound = False\nfor i in range(n):\n\tfor j in range(m):\n\t\tif mat[i][j] == '*':\n\t\t\tis_a_cross, sizes, center = is_cross(i, j)\n\t\t\tif is_a_cross:\n\t\t\t\tfound = True\n\t\t\t\tbreak\n\tif found:\n\t\tbreak\n\nanswered = False\n\nif found:\n\ttop, bot = sizes[0]\n\tleft, right = sizes[1]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif mat[i][j] == '*':\n\t\t\t\tif i == center[0]:\n\t\t\t\t\tif j not in list(range(left, right + 1)):\n\t\t\t\t\t\tprint('NO')\n\t\t\t\t\t\tanswered = True\n\t\t\t\telif j == center[1]:\n\t\t\t\t\tif i not in list(range(top, bot + 1)):\n\t\t\t\t\t\tprint('NO')\n\t\t\t\t\t\tanswered = True\n\t\t\t\telse:\n\t\t\t\t\tprint('NO')\n\t\t\t\t\tanswered = True\n\t\t\tif answered:\n\t\t\t\tbreak\n\t\tif answered:\n\t\t\tbreak\n\tif not answered:\n\t\tprint('YES')\n\nelse:\n\tprint('NO')\n", "def main():\n    h, w = list(map(int, input().split()))\n    matrix = [input() for j in range(h)]\n    cnt = 0\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == '*':\n                cnt += 1\n    if w < 3 or h < 3:\n        print(\"NO\")\n    else:\n        ok = False\n        for y in range(1, h - 1):\n            for x in range(1, w - 1):\n                if matrix[y][x] == '*' and matrix[y + 1][x] == '*' and matrix[y - 1][x] == '*' and matrix[y][x + 1] == '*' and matrix[y][x - 1] == '*':\n                    r = \"\"\n                    c = \"\"\n                    for i in range(w):\n                        r += matrix[y][i]\n                    for i in range(h):\n                        c += matrix[i][x]\n                    # sooqa blya\n                    subbuff = 0\n                    left, right = r.find('*'), r.rfind('*')\n                    for i in range(left, right + 1):\n                        if r[i] != '*':\n                            break\n                        else:\n                            subbuff += 1\n                    if subbuff != right - left + 1:\n                        ok = False\n                        break\n                    buff = 0\n                    left, right = c.find('*'), c.rfind('*')\n                    for i in range(left, right + 1):\n                        if c[i] != '*':\n                            break\n                        else:\n                            buff += 1\n                    if buff != right - left + 1:\n                        ok = False\n                        break\n                    if subbuff + buff == cnt + 1:\n                        ok = True\n                    break\n        if ok:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nmain()\n", "def get_int_list():\n    return list(map(int, input().split()))\n\nimport sys\n\nh, w = tuple(map(int, input().split()))\n\ndata = []\nfor i in range(h):\n    data.append(list([[x, False] for x in input()]))\n\nfound = False\nfor i in range(h):\n    for j in range(w):\n        if not found and data[i][j][0] == \"*\" and i > 0 and j > 0 and i < h - 1 and j < w - 1:\n            if data[i - 1][j][0] == \"*\" and data[i + 1][j][0] == \"*\" and \\\n                data[i][j - 1][0] == \"*\" and data[i][j + 1][0] == \"*\":\n                found = True\n                data[i][j][1] = True\n                row = i - 1\n                while row >= 0 and data[row][j][0] == \"*\":\n                    data[row][j][1] = True\n                    row -= 1\n                row = i + 1\n                while row < h and data[row][j][0] == \"*\":\n                    data[row][j][1] = True\n                    row += 1\n                column = j - 1\n                while column >= 0 and data[i][column][0] == \"*\":\n                    data[i][column][1] = True\n                    column -= 1\n                column = j + 1\n                while column < w and data[i][column][0] == \"*\":\n                    data[i][column][1] = True\n                    column += 1\n                    \nfor i in range(h):\n    for j in range(w):\n        if data[i][j][0] == \"*\" and not data[i][j][1]:\n            print(\"NO\")\n            return\n            \nprint(\"YES\" if found else \"NO\")\n                        \n        \n", "H, W = list(map(int, input().split()))\nX = [[[0, 1][a==\"*\"] for a in input()] for i in range(H)]\n\ndef main():\n    s = sum([sum(x) for x in X])\n    # print(X, s)\n    \n    h, w = -1, -1\n    for i in range(H):\n        for j in range(W):\n            if X[i][j]:\n                w = j\n                break\n        if w >= 0:\n            break\n    else:\n        return 0\n    \n    for j in range(W):\n        for i in range(H):\n            if X[i][j]:\n                h = i\n                break\n        if h >= 0:\n            break\n    else:\n        return 0\n    \n    if X[h][w] == 0:\n        return 0\n    \n    c = 1\n    for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]:\n        # print(di, dj)\n        i, j = h, w\n        # print(\"h, w =\", h, w)\n        if 0<=i+di<H and 0<=j+dj<W:\n            if X[i+di][j+dj] == 0:\n                return 0\n        else:\n            return 0\n        \n        while 0<=i+di<H and 0<=j+dj<W:\n            i += di\n            j += dj\n            # print(\"--\", i,j)\n            if X[i][j] == 0:\n                break\n            # print(\"i, j =\", i, j)\n            c += 1\n    # print(s, c)\n    if s == c:\n        return 1\n    return 0\n            \nif main():\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "h,w=map(int, input().split())\ninpL = []\nisTrue = False\nfor z in range(h):\n     inpL.append(list(str(input())))\nfor i in range(1,h-1):\n    for j in range(1, w-1):\n        if inpL[i][j] == \"*\":\n            if inpL[i+1][j] == \"*\":\n                if inpL[i-1][j] == \"*\":\n                    if inpL[i][j+1] == \"*\":\n                        if inpL[i][j-1] == \"*\":\n                            isTrue = True\n                            x = i+0\n                            while x >= 0:\n                                if inpL[x][j] == \"*\":\n                                    inpL[x][j] = \".\"\n                                else:\n                                    break\n                                x-=1\n                            x = i+1\n                            while x < h:\n                                if inpL[x][j] == \"*\":\n                                    inpL[x][j] = \".\"\n                                else:\n                                    break\n                                x+=1\n                            y = j-1\n                            while y >= 0:\n                                if inpL[i][y] == \"*\":\n                                    inpL[i][y] = \".\"\n                                else:\n                                    break\n                                y-=1\n                            y=j+1\n                            while y < w:\n                                if inpL[i][y] == \"*\":\n                                    inpL[i][y] = \".\"\n                                else:\n                                    break\n                                y+=1\n                            break\n    if isTrue:\n        break\n#print(*inpL)\n\nif isTrue:\n    isTrue = True\n    for i in range(h):\n        if \"*\" in inpL[i]:\n            isTrue=False\n            break\n    if isTrue:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")", "m, n = list(map(int, input().split()))\nt = [input() for i in range(m)]\nc = 0\nimport sys\nfor i in range(m):\n\tif c == 1:\n\t\tbreak\n\tfor j in range(n):\n\t\tif c == 1:\n\t\t\tbreak\n\t\tif t[i][j] == \"*\":\n\t\t\tp = [0] * 4\n\t\t\tp[0] = (i < m - 1 and t[i+1][j] == \"*\")\n\t\t\tp[1] = (j > 0 and t[i][j-1] == \"*\")\n\t\t\tp[2] = (i > 0 and t[i-1][j] == \"*\")\n\t\t\tp[3] = (j < n - 1 and t[i][j+1] == \"*\")\n\t\t\tif sum(p) == 4:\n\t\t\t\tc = 1\n\t\t\t\tr = i\n\t\t\t\tc = j\nif c == 0:\n\tprint(\"NO\")\n\treturn\nelse:\n\ti = r\n\tj = c\n\tw = 1\n\twhile True:\n\t\tif i < m - 1 and t[i+1][j] == \"*\":\n\t\t\ti += 1\n\t\t\tw += 1\n\t\telse:\n\t\t\tbreak\n\ti = r\n\tj = c\n\twhile True:\n\t\tif j > 0 and t[i][j-1] == \"*\":\n\t\t\tj -= 1\n\t\t\tw += 1\n\t\telse:\n\t\t\tbreak\n\ti = r\n\tj = c\n\twhile True:\n\t\tif i > 0 and t[i-1][j] == \"*\":\n\t\t\ti -= 1\n\t\t\tw += 1\n\t\telse:\n\t\t\tbreak\n\ti = r\n\tj = c\n\twhile True:\n\t\tif j < n - 1 and t[i][j+1] == \"*\":\n\t\t\tj += 1\n\t\t\tw += 1\n\t\telse:\n\t\t\tbreak\n\th = 0\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\tif t[i][j] == \"*\":\n\t\t\t\th += 1\nif h != w:\n\tprint(\"NO\")\n\treturn\nprint(\"YES\")\n"]