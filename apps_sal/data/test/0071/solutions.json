["n, m, k, x, y = list(map(int, input().split()))\n\nans = [[0] * m for x in range(n)]\n\nonebig = (2*n-2)*m or m\n\noo = k // onebig\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0 or i == n-1:\n            ans[i][j] += oo\n            k -= oo\n        else:\n            ans[i][j] += 2*oo\n            k -= 2*oo\n\nfrom itertools import chain\n\nfor i in chain(list(range(n)), list(range(n-2, 0, -1))):\n    if not k:\n        break\n    for j in range(m):\n        if not k:\n            break\n        ans[i][j] += 1\n        k -= 1\n\n_max = max(list(map(max, ans)))\n_min = min(list(map(min, ans)))\n_ans = ans[x-1][y-1]\n\n\nprint(_max, _min, _ans)\n", "n,m,k,x,y = map(int,input().split())\n\narr = [[0 for i in range(m)] for j in range(n)]\n\nif(n==1):\n    loop = k//m\n    for i in range(m):\n        arr[0][i] += loop\n    rest = k%m\n\n    i = 0\n    j = 0\n    while(rest>0):\n        arr[i][j] += 1\n        j += 1\n        if(j==m):\n            i += 1\n            j = 0\n        rest -= 1\n\n    print(max(arr[0]), min(arr[0]), arr[x-1][y-1])\n    return\n\nloop = k//((n*2-2)*m)\n\nfor i in range(m):\n    arr[0][i] += loop\n    for j in range(1, n-1):\n        arr[j][i] += loop*2\n    arr[n-1][i] += loop\n\nrest = k%((n*2-2)*m)\n\n\ni = 0\nj = 0\nwhile(rest>0):\n    arr[i][j] += 1\n    rest -= 1\n    j += 1\n    if(j==m):\n        j = 0\n        i += 1\n        if(i==n):\n            break\n\ni = n-2\nj = 0\nwhile(rest>0):\n    arr[i][j] += 1\n    rest -= 1\n    j += 1\n    if(j==m):\n        j = 0\n        i -= 1\n\nmx = 0\nmn = 100000000000000000000000\nfor i in range(n):\n    mx = max(mx, max(arr[i]))\n    mn = min(mn, min(arr[i]))\n\n\nprint(mx, mn, arr[x-1][y-1])", "n, m, k, x, y = list(map(int, input().split()))\nx -= 1\ny -= 1\nif n == 1:\n\tprint((k + m - 1) // m, k // m, k // m + (k % m > y))\nelse:\n\tcnt = m * (n + n - 2)\n\tk -= 1\n\tc = [[k // cnt * (1 + (0 < i < n - 1)) + (k % cnt >= i * m + j) + (0 < i < n - 1) * (k % cnt >= n * m + (n - i - 2) * m + j) for j in range(m)] for i in range(n)]\n\tprint(max([max(c[i]) for i in range(n)]), min([min(c[i]) for i in range(n)]), c[x][y])\n\n", "def sv(N, M, K, X, Y):\n\tX -= 1\n\tY -= 1\n\tif N > 1:\n\t\trounds = K // ((N-1)*M)\n\t\trem = K % ((N-1)*M)\n\t\tgd = [[0]*M for n in range(N)]\n\t\tfor m in range(0, M):\n\t\t\tgd[0][m] = (rounds+1) // 2\n\t\t\tgd[N-1][m] = rounds // 2\n\t\tfor n in range(1, N-1):\n\t\t\tfor m in range(0, M):\n\t\t\t\tgd[n][m] = rounds\n\t\tif rounds % 2 == 1:\n\t\t\tfor n in range(N-1, -1, -1):\n\t\t\t\tif not rem: break\n\t\t\t\tfor m in range(0, M):\n\t\t\t\t\tif not rem: break\n\t\t\t\t\trem -= 1\n\t\t\t\t\tgd[n][m] += 1\n\t\telse:\n\t\t\tfor n in range(0, N):\n\t\t\t\tif not rem: break\n\t\t\t\tfor m in range(0, M):\n\t\t\t\t\tif not rem: break\n\t\t\t\t\trem -= 1\n\t\t\t\t\tgd[n][m] += 1\n\telse:\n\t\trounds = K // M\n\t\trem = K % M\n\t\tgd = [[rounds]*M]\n\t\tfor m in range(rem):\n\t\t\tgd[0][m] += 1\n\ta1 = max(max(x) for x in gd)\n\ta2 = min(min(x) for x in gd)\n\ta3 = gd[X][Y]\n\tprint(a1, a2, a3)\nN, M, K, X, Y = list(map(int, input().split()))\nsv(N, M, K, X, Y)\n", "R, C, k, x, y = list(map(int, input().split()))\n\ngrid = [[0 for _ in range(C)] for _ in range(R)]\n\ntotal_in_sweep = R * C + max(R-2, 0) * C\nalloc = k // total_in_sweep\n\nfor r in range(R):\n    for c in range(C):\n        grid[r][c] = alloc * (1 if r == 0 or r == R-1 else 2)\n\nk -= alloc * total_in_sweep\nr = 0\nc = 0\n\nfor r in range(R):\n    if k <= 0: break\n    for c in range(C):\n        if k <= 0: break\n        k -= 1\n        grid[r][c] += 1\n\nfor r in range(R-2, -1, -1):\n    if k <= 0: break\n    for c in range(C):\n        if k <= 0: break\n        k -= 1\n        grid[r][c] += 1\n\na = max(list(map(max, grid)))\nb = min(list(map(min, grid)))\nc = grid[x-1][y-1]\n\nprint(\"%d %d %d\" % (a, b, c))\n", "n, m, k, x, y = list(map(int, input().split()))\nprohod = (2 * n - 2) * m\nif n == 1:\n    prohod = m\nlast = k % prohod\nminimum = k // prohod\nmaximum = (k // prohod) * 2\nline = []\na1 = 10000000000000000000000000\na2 = -10000000000000000000000000\nfor i in range(n):\n    if i == 0 or i == n-1:\n        line += [minimum]\n    else:\n        line += [maximum]\nask = True\nfor i in range(n):\n    if (last >= m):\n        last -= m\n        line[i] += 1\n    else:\n        if (last > 0):\n            if (i == x - 1 and last < y):\n                ask = False            \n            line[i] += 1\n            a1 = min(a1, line[i] - 1) \n            a2 = max(a2, line[i])\n            last = 0\n        else:\n            a1 = min(a1, line[i]) \n            a2 = max(a2, line[i])            \n    a2 = max(a2, line[i]) \n    a1 = min(a1, line[i])     \ni = n - 2\nwhile i > 0:\n    if (last >= m):\n        last -= m\n        line[i] += 1\n    else:\n        if (last > 0):\n            if (i == x - 1 and last < y):\n                ask = False            \n            line[i] += 1\n            a1 = min(a1, line[i] - 1) \n            a2 = max(a2, line[i])  \n            last = 0\n        else:\n            a1 = min(a1, line[i]) \n            a2 = max(a2, line[i])             \n        break\n    a2 = max(a2, line[i]) \n    a1 = min(a1, line[i]) \n    i -= 1\na3 = line[x - 1]\nif not ask:\n    a3 -= 1\nprint(a2, a1, a3)\n", "n, m, k, x, y = list(map(int, input().split()))\n\nrw = [0] * n\npl = [[0] * m for r in range(n)]\n\ndef call():\n    nonlocal k, rw, pl\n    if n == 1:\n\n        a, b = k // m, k % m;\n\n        for i in range(m):\n            pl[0][i] = a\n\n        for i in range(b):\n            pl[0][i] += 1\n\n        return\n\n    if k >= 30000:\n        ite = 2 * m * (n-1)\n        t = k // ite\n        for i in range(n):\n            rw[i] += 2 * t;\n\n        rw[0] -= t\n        rw[-1] -= t\n\n        k -= t * ite\n\n\n    act = 0\n    up = 1\n    while 1:\n        if k > m:\n            rw[act] += 1\n\n            if up:\n                act += 1\n            else:\n                act -= 1\n\n            if act == n:\n                act = n - 2\n                up = 0\n\n            if act == -1:\n                act = 1\n                up = 1\n\n            k -= m\n\n        else:\n            for i in range(k):\n                pl[act][i] += 1\n            return\n\ncall()\n\nfor i in range(n):\n    for j in range(m):\n        pl[i][j] += rw[i]\n\nmxges = max([max(pl[i]) for i in range(n)])\nmnges = min([min(pl[i]) for i in range(n)])\ngg = pl[x-1][y-1]\n\nprint(\"{} {} {}\".format(mxges, mnges, gg))\n", "n, m, k, x, y = map(int, input().split())\nif k < n * m:\n    print('1 0', end=' ')\n    if (x - 1) * m + y - 1 >= k:\n        print(0)\n    else:\n        print(1)\nelse:\n    a = 1\n    if n != 1:\n        k -= n * m\n        a += k // (2 * (n - 1) * m) * 2\n        k = k % (2 * (n - 1) * m)\n        our = [[0] * m for i in range(n)]\n        for i in range(m):\n            our[0][i] = a // 2 + 1\n            our[-1][i] = a // 2 + 1\n        for i in range(1, n - 1):\n            for j in range(m):\n                our[i][j] = a\n        curr_i = n - 2\n        curr_j = -1\n        diff = -1\n        while k > 0:\n            k -= 1\n            curr_j += 1\n            if curr_j == m:\n                curr_j = 0\n                curr_i += diff\n                if curr_i == -1:\n                    curr_i += 2\n                    diff = 1\n                elif curr_i == n:\n                    curr_i -= 2\n                    diff = -1\n            our[curr_i][curr_j] += 1\n        ma = 0\n        mi = 10 ** 300\n        for elem in our:\n            ma = max(ma, max(elem))\n            mi = min(mi, min(elem))\n        print(ma, mi, our[x - 1][y - 1])\n    else:\n        a = k // m\n        k %= m\n        if k == 0:\n            print(a, a, a)\n        else:\n            print(a + 1, a, a + (1 if y <= k else 0))\n    ", "\n\nn, m, k, x, y = list(map(int, input().split()))\n\nif n != 1:\n    full_rounds = k // (2 * (n - 2) * m + 2 * m)\n\n    #print(full_rounds)\n    #print(2 * full_rounds)\n\n    k %= (2 * (n - 2) * m + 2 * m)\n\n    A = [[0 for j in range(m)] for i in range(n)]\n\n    row = 0\n    col = 0\n\n    while k != 0 and row < n and col < m:\n        #print(str(row) + \" \" + str(col))\n        A[row][col] += 1\n        k -= 1\n        col += 1\n        if col == m:\n            row += 1\n            col = 0\n\n    row = n - 2\n    col = 0\n    while k != 0:\n        #print(str(row) + \" \" + str(col))\n        A[row][col] += 1\n        k -= 1\n        col += 1\n        if col == m:\n            row -= 1\n            col = 0\n\n    small = 10**18\n    big = 0\n\n    if x == n or x == 1:\n        serg = full_rounds + A[x - 1][y - 1]\n    else:\n        serg = 2 * full_rounds + A[x - 1][y - 1]\n\n    for row in A[1:-1]:\n        small = min([small] + [2 * full_rounds + a for a in row])\n        big = max([big] + [2 * full_rounds + a for a in row])\n\n    small = min([small] + [full_rounds + a for a in A[0]])\n    big = max([big] + [full_rounds + a for a in A[0]])\n\n    small = min([small] + [full_rounds + a for a in A[-1]])\n    big = max([big] + [full_rounds + a for a in A[-1]])\n\n    print(str(big) + \" \" + str(small) + \" \" + str(serg))\n\nelse:\n    A = [k // m] * m\n    k %= m\n    i = 0\n    while k != 0:\n        A[i] += 1\n        k -= 1\n        i += 1\n\n    small = 10**18\n    big = 0\n\n    serg = A[y - 1]\n    small = min([small] + A)\n    big = max([big] + A)\n\n    print(str(big) + \" \" + str(small) + \" \" + str(serg))\n", "def main():\n    n, m, k, x, y = list(map(int, input().split()))\n    A = [[0] * m for i in range(n)]\n    MOD = (2 * n - 2) * m\n    if n > 1:\n        for i in range(m):\n            A[0][i] += k // MOD\n            A[-1][i] += k // MOD\n        for i in range(1, n - 1):\n            for j in range(m):\n                A[i][j] += 2 * (k // MOD)\n        k %= MOD\n        for i in range(n):\n            for j in range(m):\n                if k > 0:\n                    A[i][j] += 1\n                    k -= 1\n        for i in range(n - 2, -1, -1):\n            for j in range(m):\n                if k > 0:\n                    A[i][j] += 1\n                    k -= 1\n    else:\n        MOD = m\n        for i in range(m):\n            A[0][i] = k // MOD\n        k %= MOD\n        for i in range(m):\n            if k > 0:\n                A[0][i] += 1\n                k -= 1\n    maxx = -1\n    minn = 10 ** 100\n    for row in A:\n        maxx = max(maxx, max(row))\n        minn = min(minn, min(row))\n    print(maxx, minn, A[x - 1][y - 1])        \n    \n    \nmain()\n", "n, m, k, x, y = [int(x) for x in input().split()]\nmaxi = 0\nmini = 0\nser = 0\nif (n == 1):\n    if (k % m == 0):\n        maxi = k // m\n        mini = k // m\n        ser = k // m\n    else:\n        maxi = k // m + 1\n        mini = k // m\n        if (y <= (k % m)):\n            ser = maxi\n        else:\n            ser = mini\n    print(maxi, mini, ser)\n    return\nif (n == 2):\n    if (k % (2 * m) == 0):\n        maxi = k // (2 * m)\n        mini = k // (2 * m)\n        ser = k // (2 * m)\n    else:\n        maxi = k // (2 * m) + 1\n        mini = k // (2 * m)\n        if ((x - 1) * m + y <= (k % (2 * m))):\n            ser = maxi\n        else:\n            ser = mini\n    print(maxi, mini, ser)\n    return\nif (k < (2 * n - 2) * m):\n    if (k < n * m):\n        maxi = 1\n        mini = 0\n        if ((x - 1) * m + y <= k):\n            ser = 1\n        else:\n            ser = 0\n    elif (k == n * m):\n        maxi = 1\n        mini = 1\n        ser = 1\n    else:\n        maxi = 2\n        mini = 1\n        if ((x == 1) or (x == n)):\n            ser = 1\n        else:\n            if (k - n * m >= y + (n - 1 - x) * m):\n                ser = 2\n            else:\n                ser = 1\n    print(maxi, mini, ser)\nelse:\n    mini = k // ((2 * n - 2) * m)\n    maxi = 2 * mini\n    if (k % ((2 * n - 2) * m) > m):\n        if (k % ((2 * n - 2) * m) > m * n):\n            maxi += 2\n            mini += 1\n        else:\n            maxi += 1\n        if (k % ((2 * n - 2) * m) == m * n):\n            mini += 1\n    if (x == 1):\n        ser = k // ((2 * n - 2) * m)\n        if (k % ((2 * n - 2) * m) >= y):\n            ser += 1\n    elif (x == n):\n        ser = k // ((2 * n - 2) * m)\n        if (k % ((2 * n - 2) * m) >= y + (n - 1) * m):\n            ser += 1\n    else:\n        if (k % ((2 * n - 2) * m) <= n * m):\n            if ((x - 1) * m + y <= k % ((2 * n - 2) * m)):\n                ser = (k // ((2 * n - 2) * m)) * 2 + 1\n            else:\n                ser = (k // ((2 * n - 2) * m)) * 2\n        else:\n            ser = (k // ((2 * n - 2) * m)) * 2 + 1\n            if (k % ((2 * n - 2) * m) - n * m >= (n - 1 - x) * m + y):\n                ser += 1\n    print(maxi, mini, ser)\n\n", "n,m,k,x,y = map(int, input().split(\" \"))\n\n\ndef s(row, col):\n\tret = 0\n\tif (l % 2 == 0):\n\t\tif(row == n or row == 1):\n\t\t\tret = l//2\n\t\telse:\n\t\t\tret = l\n\t\tif (rl >= row or (rl+1 == row and col <= rr)):\n\t\t\tret += 1\n\telse:\n\t\tif(row == n):\n\t\t\tret = (l-1)//2\n\t\telif (row == 1):\n\t\t\tret = (l+1)//2\n\t\telse:\n\t\t\tret = l\n\t\tif (n-rl<row or (n-rl==row and col <= rr)):\n\t\t\tret += 1\n\treturn ret\n\nif n == 1:\n\t# \u603b\u5171\u5b8c\u6210\u7684\u884c\u6570\n\tr = k // m\n\n\t# \u6700\u540e\u4e00\u884c\uff08\u672a\u5b8c\u6210\uff09\u5269\u4e0b\n\trr = k % m\n\n\tif (rr > 0):\n\t\tmaxi = r+1\n\telse:\n\t\tmaxi = r\n\tmini = r\n\tif y <= rr:\n\t\tsergei = r + 1\n\telse:\n\t\tsergei = r\nelse:\n\t# \u603b\u5171\u5b8c\u6210\u7684\u884c\u6570\n\tr = k // m\n\n\t# \u6700\u540e\u4e00\u884c\uff08\u672a\u5b8c\u6210\uff09\u5269\u4e0b\n\trr = k % m\n\n\t# \u603b\u5171\u8f6e\u6570\uff1a\n\tl = r // (n-1)\n\n\t# \u6700\u540e\u4e00\u8f6e\u5b8c\u6210\u7684\u884c\u6570\n\trl = r % (n-1)\n\n\tif l % 2 == 0:\n\t\tmaxi = max(s(2, 1),s(1, 1))\n\t\tmini = s(n, 1)\n\telse:\n\t\tmaxi = max(s(n-1, 1), s(1,1))\n\t\tmini = s(n, m)\n\tsergei = s(x, y)\n\n# print(r,rr,l,rl)\n# print(s(1,1))\nprint(maxi, mini, sergei)", "n, m, k, x, y = list(map(int, input().split()))\nif n == 1:\n    t = m\nelif m == 1:\n    t = n + n - 2\nelse:\n    t = n * m + (n - 2) * m\n\nma = -1\nmi = 10 ** 30\n\na = [[0] * m for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        a[i][j] = k // t\n        if i != 0 and i != n - 1:\n            a[i][j] *= 2\nk = k % t\nfor i in range(n):\n    for j in range(m):\n        if k > 0:\n            a[i][j] += 1\n            k -= 1\n            \nfor i in range(n - 2, -1, -1):\n    for j in range(m):\n        if k > 0:\n            a[i][j] += 1\n            k -= 1\n            \nfor i in range(n):\n    for j in range(m):\n        ma = max(ma, a[i][j])\n        mi = min(mi, a[i][j])\nprint(ma, mi, a[x - 1][y - 1])\n\n", "import sys\n\nn, m, k, x, y = map(int, input().split())\n\nif n == 1:\n    max_q = k // m + (k % m != 0)\n    min_q = k // m\n    serg_q = k // m + (y <= k % m)\n    pass\nelse:\n    num_q = [[0] * m for i in range(n)]\n\n    loop = k // ((2 * n - 2) * m)\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0 or i == n - 1:\n                num_q[i][j] = loop\n            else:\n                num_q[i][j] = 2 * loop\n\n    amari = k % ((2 * n - 2) * m)\n    zenhan = min((n - 1) * m, amari)\n    kouhan = max(amari - (n - 1) * m, 0)\n\n    for i in range(zenhan):\n        num_q[i // m][i % m] += 1\n\n    for i in range(kouhan):\n        num_q[(n - 1) - (i // m)][i % m] += 1\n\n    max_q = -1\n    min_q = float('inf')\n\n    for i in range(n):\n        max_q = max(max_q, max(num_q[i]))\n        min_q = min(min_q, min(num_q[i]))\n\n    serg_q = num_q[x - 1][y - 1]\n\n    pass\n# print(num_q)\n\nprint(max_q, min_q, serg_q)", "n, m, k, x1, y1 = map(int, input().split())\nc = 0\nif (n == 1):\n    mi = k // m\n    ma = mi + 1 * int(k % m != 0)\n    s = mi + 1 * int(k % m > y1 - 1)\nelse:\n    c = k // (m * (2 * n - 2))\n    d = k % (m * (2 * n - 2))\n    q = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if 0 < i < n - 1:\n                q[i][j] = 2 * c\n            else:\n                q[i][j] = c\n    i = 0\n    while d > 0:\n        if i % (2 * n - 2) > n - 1:\n            x = 2 * n - 2 - (i % (2 * n - 2))\n        else:\n            x = i % (2 * n - 2)\n        j = 0\n        while d > 0 and j < m:\n            q[x][j] += 1\n            d -= 1\n            j += 1\n        i += 1\n    ma = -1\n    mi = 10 ** 100\n    for i in range(n):\n        for j in range(m):\n            mi = min(q[i][j], mi)\n            ma = max(q[i][j], ma)\n    s = q[x1 - 1][y1 - 1]\nprint(ma, mi, s)", "n, m, k, x, y = list(map(int, input().split()))\n\nif n == 1:\n  cnt = k // m\n  k %= m\nelse:\n  cnt = k // (2 * m * (n - 1)) \n  k %= 2 * m * (n - 1)\n\nq = [[2 * cnt] * m for i in range(n)]\nq[0] = [cnt] * m\nq[-1] = [cnt] * m\n\ni = 0\nj = 0\nd = 1\nwhile k > 0:\n  q[i][j] += 1\n  \n  k -= 1\n  j += 1\n  if d == 1:\n    i += j // m\n    j %= m\n  elif d == -1:\n    i -= j // m\n    j %= m\n  \n  if i == n:\n    i = n - 2\n    d = -1\n\ngmin = 10**18\ngmax = 0\nfor line in q:\n  gmin = min(gmin, min(line))\n  gmax = max(gmax, max(line))\nprint(gmax, gmin, q[x - 1][y - 1])\n", "n,m,k,x,y=[int(x) for x in input().split()]\nma=0\nmi=0\nminn=199999999999999999\nmaxx=-1\nif n is 1:\n    mi=k//m\n    ma=mi\n    k=k%m\n    a=[0]*m\n    for p in range (m):\n        if k is 0:\n            break\n        a[p]=1\n        k-=1\n    for p in range(m):\n        if a[p]>maxx:\n            maxx=a[p]\n        if a[p]<minn:\n            minn=a[p]\n    print(ma+maxx,mi+minn,mi+a[y-1])\nelse:\n    i=(2*n-2)*m\n    mi=k//i\n    if n>2:\n        ma=mi*2\n    else:\n        ma=mi\n    k=k%i\n    a = [[0 for p in range(m)] for q in range(n)]\n    for p in range(n):\n        for q in range(m):\n            if p is 0 or p is n-1:\n                a[p][q]=mi\n            else:\n                a[p][q]=ma\n    for p in range(n):\n        if k is 0:\n            break\n        for q in range(m):\n            if k is 0:\n                break\n            a[p][q]+=1\n            k-=1\n    for p in range(n):\n        if k is 0:\n            break\n        for q in range(m):\n            if k is 0:\n                break\n            a[n-2-p][q]+=1\n            k-=1\n    for p in range(n):\n        for q in range(m):\n            if a[p][q]>maxx:\n                maxx=a[p][q]\n            if a[p][q]<minn:\n                minn=a[p][q]\n    if x is 1 or x is n:\n        print(maxx,minn,a[x-1][y-1])\n    else:\n        print(maxx,minn,a[x-1][y-1])\n", "n, m, k, x, y = map(int, input().split())\nmatrix = [[0] * m for i in range(n)]\nin_cycle = (n + n - 2) * m\nif n == 1:\n    in_cycle = m\n    for i in range(m):\n        matrix[0][i] += k // in_cycle\n    k %= in_cycle\n    for i in range(m):\n        if k > 0:\n            matrix[0][i] += 1\n            k -= 1\n    mx = -1\n    mn = 10 ** 19\n    for i in matrix:\n        mx = max(mx, max(i))\n        mn = min(mn, min(i))\n    print(mx, mn, matrix[x - 1][y - 1])            \nelse:\n    for i in range(m):\n        matrix[0][i] += k // in_cycle\n        matrix[-1][i] += k // in_cycle\n    for i in range(1, n - 1):\n        for j in range(m):\n            matrix[i][j] += (k // in_cycle) * 2\n    k %= in_cycle\n    for i in range(n):\n        for j in range(m):\n            if k > 0:\n                matrix[i][j] += 1\n                k -= 1\n    for i in range(n - 2, -1, -1):\n        for j in range(m):\n            if k > 0:\n                matrix[i][j] += 1\n                k -= 1\n    mx = -1\n    mn = 10 ** 19\n    for i in matrix:\n        mx = max(mx, max(i))\n        mn = min(mn, min(i))\n    print(mx, mn, matrix[x - 1][y - 1])", "def main():\n\tn, m, k, x, y = map(int, input().split())\n\tx -= 1\n\ty -= 1\n\n\tif (n == 1):\n\t\tever = [k // m for i in range(m)]\n\t\tk %= m\n\t\tfor i in range(k):\n\t\t\tever[i] += 1\n\t\tprint(max(ever), min(ever), ever[y])\n\t\treturn\n\n\tper_leng = m * (2 * n - 2)\n\tper_num = k // per_leng\n\t\n\tevery_raw = [2 * per_num for i in range(n)]\n\tevery_raw[0] -= per_num;\n\tif (every_raw[-1] == 2 * per_num):\n\t\tevery_raw[-1] -= per_num\n\tk %= per_leng\n\n\tcurr_raw = 0\n\tdire = 0\n\twhile (k >= m):\n\t\tevery_raw[curr_raw] += 1\n\t\tif (dire == 0):\n\t\t\tif (curr_raw + 1 < n):\n\t\t\t\tcurr_raw += 1\n\t\t\telse:\n\t\t\t\tdire = 1\n\t\t\t\tcurr_raw -= 1\n\t\telse:\n\t\t\tcurr_raw -= 1\n\n\t\tk -= m\n\n\n\n\tif (k == 0):\n\t\tprint(max(every_raw), min(every_raw), every_raw[x])\n\telse:\n\t\tspec = [every_raw[curr_raw] for i in range(m)]\n\t\tfor i in range(k):\n\t\t\tspec[i] += 1\n\t\tall_arr = []\n\t\tfor i in range(n):\n\t\t\tif (i != curr_raw):\n\t\t\t\tall_arr.append(every_raw[i])\n\t\t\telse:\n\t\t\t\tall_arr += spec\n\t\tprint(max(all_arr), min(all_arr), end = \" \")\n\t\tif (x == curr_raw):\n\t\t\tprint(spec[y])\n\t\telse:\n\t\t\tprint(every_raw[x])\n\n\n\n\n\nmain()", "n, m, k, x, y = tuple(map(int, input().split()))\n\nmaxq = minq = sergeiq = 0\nif n == 1:\n\tmaxq = k // m\n\tif k % m > 0:\n\t\tmaxq +=1\n\t\tminq = maxq - 1\n\t\tif y <= k % m:\n\t\t\tsergeiq = maxq\n\t\telse:\n\t\t\tsergeiq = minq\n\telse:\n\t\tminq = maxq\n\t\tsergeiq = minq\nelif n == 2:\n\tmaxq = minq = sergeiq = k // (2*m)\n\tif k % (2*m) > 0:\n\t\tmaxq += 1\n\t\tif x == 1 and y <= k % (2*m):\n\t\t\tsergeiq += 1\n\t\telif x == 2 and k % (2*m) >= y + m:\n\t\t\tsergeiq += 1\nelif k < n * m:\n\tmaxq = 1\n\tminq = 0\n\tif k / m >= x:\n\t\tsergeiq = 1\n\telif k / m <= x-1:\n\t\tsergeiq = 0\n\telif k % m >= y:\n\t\tsergeiq = 1\n\telse:\n\t\tsergeiq = 0\nelif k == n*m:\n\tmaxq = 1\n\tminq = 1\n\tsergeiq = 1\nelse:\n\tmaxq = 2*(k // (m * 2 * (n-1)))\n\tminq = k // (m * 2 * (n-1))\n\tif x == 1 or x == n:\n\t\tsergeiq = minq\n\telse:\n\t\tsergeiq = maxq\n\tremainder = k % (m * 2* (n-1))\n\tif remainder > 0:\n\t\tif remainder <= m:\n\t\t\tif x == 1 and y <= remainder:\n\t\t\t\tsergeiq += 1\n\t\telif remainder <= m * n:\n\t\t\tmaxq += 1\n\t\t\tif x <= remainder / m:\n\t\t\t\tsergeiq += 1\n\t\t\telif x-1 < remainder / m and remainder % m >= y:\n\t\t\t\tsergeiq += 1\n\t\t\tif remainder == m*n:\n\t\t\t\tminq += 1\n\t\telse:\n\t\t\tmaxq += 2\n\t\t\tsergeiq += 1\n\t\t\tminq += 1\n\t\t\tif x != 1 and x != n:\n\t\t\t\tif (remainder - (n*m)) / m >= n-x:\n\t\t\t\t\tsergeiq += 1\n\t\t\t\telif (remainder - (n*m)) / m > n-x-1 and (remainder - (n*m)) % m >= y:\n\t\t\t\t\tsergeiq += 1\nprint(str(maxq) + ' ' + str(minq) + ' ' + str(sergeiq))\n\n", "n, m, k, x, y = list(map(int, input().split()))\n\nt = m if n == 1 else n * m + (n - 2) * m\n\na = k // t\nf = [[0] * 101 for _ in range(101)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        f[i][j] = a\n        if i > 1 and i < n:\n            f[i][j] += a\n\nb = k % t\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if b == 0:\n            break\n        f[i][j] += 1\n        b -= 1\n    if b == 0:\n        break\nfor i in range(n - 1, 1, -1):\n    for j in range(1, m + 1):\n        if b == 0:\n            break\n        f[i][j] += 1\n        b -= 1\n    if b == 0:\n        break\n\nmaxnum = max(f[1][1], f[2][1], f[n - 1][1])\nminnum = f[n][m]\nsergei = f[x][y]\n\nprint(maxnum, minnum, sergei)\n", "n, m, k, y, x = map(int, input().split())\n\nmaxnum = 0\nminnum = 0\nsergei = 0\n\nif n == 1:\n    maxnum = k // m + (1 if k % m > 0 else 0)\n    minnum = k // m\n    sergei = maxnum if x <= k % m else minnum\nelif n == 2:\n    maxnum = k // (m * 2) + (1 if k % (m * 2) > 0 else 0)\n    minnum = k // (m * 2)\n    sergei = maxnum if (m * (y - 1) + x) <= k % (m * 2) else minnum\nelse:\n    z = (n * 2 - 2) * m\n    a = k // z\n    b = k % z\n    maxnum = a * 2 + (1 if b > n * m else 0)\n    maxnum += 1 if a == 0 and b > 0 else 0\n    maxnum += 1 if a > 0 and b > m else 0\n    minnum = a + (1 if b >= n * m else 0)\n    if y == 1:\n        sergei = a + (1 if x <= b else 0)\n    elif y == n:\n        sergei = a + (1 if x + (n - 1) * m <= b else 0)\n    else:\n        sergei = a * 2\n        sergei += 1 if x + (y - 1) * m <= b else 0\n        sergei += 1 if x + (n * 2 - 1 - y) * m <= b else 0\n    \nprint(maxnum, minnum, sergei)", "n,m,k,x,y=list(map(int,input().split()))\nt=n*m+(n-2)*m if n!=1 else m\nb=k//t\ng=[]\ng.append([b for _ in range(m)])\nfor _ in range(n-2):\n  g.append([2*b for _ in range(m)])\ng.append([b for _ in range(m)])\n\nr=k%t\nmx=-1\nmn=int(1e18)\nfor i in range(n):\n  for j in range(m):\n    if r>0:\n      r-=1\n      g[i][j]+=1\n    mx=max(mx,g[i][j])\n    mn=min(mn,g[i][j])\nfor i in range(n-2,0,-1):\n  for j in range(m):\n    if r>0:\n      r-=1\n      g[i][j]+=1\n    mx=max(mx,g[i][j])\n    mn=min(mn,g[i][j])\nprint(mx,mn,g[x-1][y-1])\n\n"]