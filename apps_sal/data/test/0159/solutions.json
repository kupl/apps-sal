["import fractions\n\nn = int(input())\nA = [int(x) for x in input().split()]\nB = []\nfor i in range(n-1):\n    B.append(A[i])\n    if fractions.gcd(A[i], A[i+1]) != 1:\n        B.append(1)\nB.append(A[-1])\nprint(len(B) - n)\nprint(' '.join(map(str, B)))\n\n\n", "from fractions import gcd\n\nn = int(input())\na = list(map(int, input().split()))\nprev = a[0]\nk = 0\nfor c in a[1:]:\n    if gcd(prev, c) != 1:\n        k += 1\n    prev = c\nprint(k)\nprev = a[0]\nfor c in a[1:]:\n    print(prev, end=' ')\n    if gcd(prev, c) != 1:\n        print(1, end=' ')\n    prev = c\nprint(prev)\n", "#!/usr/bin/env python3\n\nfrom fractions import gcd\n\ntry:\n    while True:\n        n = int(input())\n        a = list(map(int, input().split()))\n        result = [a[0]]\n        for x in a[1:]:\n            if gcd(x, result[-1]) != 1:\n                result.append(1)\n            result.append(x)\n        print(len(result) - len(a))\n        print(' '.join(map(str, result)))\n\nexcept EOFError:\n    pass\n", "n = int(input())\na = [int(i) for i in input().split()]\nc = 0\ni = 0\nwhile i < n - 1:\n    x = a[i]\n    y = a[i + 1]\n    while y > 0:\n        x, y = y, x % y\n    if x > 1:\n        a = a[:i + 1] + [1] + a[i + 1:]\n        i += 2\n        c += 1\n        n += 1\n    else:\n        i += 1\nprint(c)\nprint(*a)", "from fractions import gcd\n\n\ndef is_co_prime(x, y):\n    return gcd(x, y) != 1\n\n\ndef solve():\n    N = int(input())\n    L = list(map(int, input().split()))\n\n    ans = [str(L[0])]\n\n    x = 0\n    for i in range(1, N):\n        if is_co_prime(L[i], L[i - 1]):\n            x += 1\n            ans.append('1')\n        ans.append(str(L[i]))\n\n    print(x)\n    print(' '.join(ans))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "def mp():  return list(map(int,input().split()))\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\n\nn = it()\nL = lt()\ndef gcd(x,y):\n    if x % y == 0:\n        return y\n    else:\n        return gcd(y,x%y)\nc = 0\ni = 0\nwhile i+1 < len(L):\n    d = gcd(L[i],L[i+1])\n    if d != 1:\n        L.insert(i+1,1)\n        c += 1\n    i += 1\nprint(c)\nprint(' '.join([str(x) for x in L]))\n        \n", "from fractions import gcd\nn, a, v = int(input()), list(map(int, input().split())), []\nfor i, ai in enumerate(a):\n    v.append(ai)\n    if i < n - 1 and gcd(ai, a[i + 1]) > 1:\n        v.append(1)\nprint(len(v) - len(a))\nprint(' '.join(map(str, v)))", "def gcd(a, b):\n    if b == 0: return a\n    else: return gcd(b, a % b)\ndef __starting_point():\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans, cnt = [A[0]], 0\n    for i in range(1, n):\n        if gcd(A[i], A[i - 1]) != 1:\n            ans.append(1)\n            cnt += 1\n        ans.append(A[i])\n    print(cnt)\n    print(' '.join(str(i) for i in ans))        \n__starting_point()", "n = int(input())\na = [int(s) for s in input().split()]\n\ndef evklid(a, b):\n    while a!=0 and b!=0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n\n\ns = ''\nk = 0\ns += str(a[0])\nfor i in range(1, n):\n    if evklid(a[i], a[i-1]) != 1:\n        k += 1\n        s += ' 1 ' + str(a[i])\n    else:\n        s += ' ' + str(a[i])\nprint(k)\nprint(s)\n", "def prost(a, b):\n\ta, b = max(a, b), min(a,b)\n\twhile b!=0:\n\t\ta = a%b\n\t\ta, b = b, a\n\tif a==1:\n\t\treturn (0)\n\telse:\n\t\treturn (1)\n\nn = int(input())\ns = input().split()\nk = 0\nfor i in range(len(s)-1):\n\tif prost(int(s[i]), int(s[i+1]))==1: \n\t\ts[i] = s[i] + ' ' + '1'\n\t\tk = k+1\nprint (k)\nprint (' '.join(x for x in s))", "input()\n\n\ndef nod(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    a = list(map(int, input().split()))\n    out = []\n    k = 0\n    for i in range(0, len(a)-1):\n        out.append(a[i])\n        if nod(a[i], a[i+1]) != 1:\n            out.append(1)\n            k += 1\n    out.append(a[len(a)-1])\n    str_out = \" \".join(map(str, out))\n    print(k)\n    print(str_out)\n\nmain()\n", "from math import gcd\n\nn = int(input())\narr = list(map(int, input().split(' ')))\narr2 = []\n\nfor i in range(len(arr)-1):\n  if not gcd(arr[i], arr[i+1]) == 1:\n    #print (arr[i], arr[i+1], gcd(arr[i], arr[i+1]))\n    arr2.append(str(arr[i]))\n    arr2.append(str(1))\n  else:\n    arr2.append(str(arr[i]))\n\narr2.append(str(arr[-1]))\n\nprint(len(arr2)-len(arr))\nprint(' '.join(arr2))\n", "from fractions import gcd\nn = int(input())\nl = list(map(int, input().split()))\nans = 0\nnew = [l[0]]\nfor i in range(1, n):\n    if gcd(l[i], l[i - 1]) != 1:\n        ans += 1\n        new.append(1)\n    new.append(l[i])\nprint(ans)\nprint(*new)", "from fractions import gcd\nn=int(input())\ncount=0\nip=list(map(int,input().split()))\nop=[ip[0]]\nif n==1:\n    print(0)\n    print(ip[0])\nelse:\n    for i in range(n-1):\n        if gcd(ip[i],ip[i+1])!=1:\n            for j in range(2,100000000):\n                if gcd(ip[i],j)==1 and gcd(ip[i+1],j)==1:\n                    op.append(j)\n                    op.append(ip[i+1])                \n                    count+=1\n                    break\n        else:\n            op.append(ip[i+1])\n    print(count)\n    for i in op:\n        print(i,end=' ')\n", "def gcd(x, y):\n    if x < y:\n        t = x\n        x = y\n        y = t\n    if x%y == 0:\n        return y\n    else:\n        return gcd(y, x%y)\n\nn = int(input())\na = input().split()\nfor i in range(n):\n    a[i] = int(a[i])\nb = [a[0]]\nk = 0\nfor i in range(1, n):\n    if gcd(a[i-1], a[i]) != 1:\n        b.append(1)\n        k += 1\n    b.append(a[i])\ns = str(b[0])\nfor i in range(1, len(b)):\n    s += ' ' + str(b[i])\nprint(k)\nprint(s)\n", "n=int(input())\nl=list(map(int,input().split()))\nans=[str(l[0])]\ndef gcd(a,b): \n  while b: a,b=b,a%b\n  return a\nfor i in range(1,n): \n  if gcd(l[i],l[i-1])>1: ans+=[\"1\"]\n  ans+=[str(l[i])]\nprint(len(ans)-n)\nprint(' '.join(ans))", "n = int(input())\nmass = list(map(int, input().split()))\n\ndef gcd(a, b):\n    if b:\n        return(gcd(b, a % b))\n    else:\n        return a\n\n#def add(a, b):\n    #k = 1\n    #while gcd(k, a) != 1\n#print(tmp_mass)\ni = 0\nc = len(mass)\ncount = 0\nwhile i < c - 1:\n    #print(i, c)\n    k = gcd(mass[i], mass[i + 1])\n    if k == 1:\n        i+= 1\n        continue\n    else:\n        count += 1\n        mass.insert(i+1, 1)\n        c += 1\n        i += 2\nprint(count)\nprint(' '.join(map(str, mass)))\n", "n = int(input())\nmass = list(map(int, input().split()))\n\ndef gcd(a, b):\n    if b:\n        return(gcd(b, a % b))\n    else:\n        return a\ni = 0\nc = len(mass)\ncount = 0\nwhile i < c - 1:\n    k = gcd(mass[i], mass[i + 1])\n    if k == 1:\n        i+= 1\n        continue\n    else:\n        count += 1\n        mass.insert(i+1, 1)\n        c += 1\n        i += 2\nprint(count)\nprint(' '.join(map(str, mass)))\n", "import math\nans=[]\ncount=0\nn=int(input())\na=list(map(int,input().split()))\nif n==1:\n    print(0)\n    print(a[0])\n    return\n    \n\nfor i in range(n-1):\n    ans.append(str(a[i]))\n    if math.gcd(a[i],a[i+1])!=1:\n        count +=1\n        ans.append('1')\n\n\nans.append(str(a[i+1]))\nprint(count)\nprint(' '.join(ans))\n\n\n    \n\n", "import math\nn=int(input())\nmas=[int(c) for c in  input().split()]\nl=[]\nm=mas[0]\nfor i in range(n-1):\n    if math.gcd(mas[i],mas[i+1])!=1:\n        l.append(i+1)\n       # print(l)\nfor i in l[::-1]:\n    mas.insert(i,1)\nk=len(mas)-n\nprint(k)\nfor i in mas:\n    print(i,end=' ')\n\n", "import fractions\nimport sys\nn=int(input())\nl=list(map(int,input().split()))\nans=[]\nfor i in range(1,n):\n    ans.append(l[i-1])\n    if fractions.gcd(l[i],l[i-1])>1:\n        ans.append(\"1\")\nans.append(l[n-1])\nprint(len(ans)-n)\nfor i in ans:\n    sys.stdout.write(str(i)+\" \")", "\n\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n    \n    \nn = int(input())\n\na = list(map(int, input().split()))\n\n\nlast = 1\nans = []\n\nfor i in range(n):\n    if gcd(a[i], last) != 1:\n        ans.append(1)\n    ans.append(a[i])\n    last = a[i]\n\n\nprint(len(ans) - n)\n\nfor i in range(len(ans) - 1):\n    print(ans[i], end = ' ')\n\n\nprint(ans[len(ans) - 1])\n\n\n\n\n    \n    \n\n\n\n\n", "from math import sqrt\nn=int(input())\na=[int(i) for i in input().split()]\ninsert=[0]*n\nans=[]\ncnt=0\n\ndef is_co_prime(A,B) :\n    t=A%B\n    if t==0 :\n        return B==1,B\n    while True :\n        A,B=B,t\n        if A%B :\n            t=A%B\n        else :\n            C=B\n            break\n    return C==1,C\n\nfor i in range(n-1) :\n    check=is_co_prime(a[i],a[i+1])\n    if check[0] : continue\n    else :\n        T=int(sqrt(check[1]))\n        while True:\n            if is_co_prime(a[i],T)[0] and is_co_prime(T,a[i+1])[0] :\n                break\n            T+=1\n        insert[i]=T\n        cnt+=1\n\nfor i in range(n):\n    ans.append(a[i])\n    if insert[i] :\n        ans.append(insert[i])\n\nprint(cnt)\nprint(\" \".join(map(str,ans)))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    b = [a[0]]\n    for i in range(1, n):\n        if gcd(a[i - 1], a[i]) != 1:\n            b.append(1)\n        b.append(a[i])\n\n    print(len(b) - n)\n    print(\" \".join(map(str, b)))\n\n\nmain()", "n = int(input())\na = list(map(int, input().split()))\nb = []\n\ndef gcd(x, y) :\n    while y :\n        x, y = y, x % y\n    return x + y\n\nfor i in range(0, n) :\n    b.append(a[i])\n    if i + 1 < n and gcd(a[i], a[i + 1]) != 1 : b.append(1)\n\nprint(len(b) - n)\nfor x in b : print(x, end = ' ')\n"]