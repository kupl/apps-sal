["def bel(mask, bit):\n    return (mask & (1 << bit)) != 0\nread = lambda: map(int, input().split())\nn, k = read()\nf = [0] * 100\nfor i in range(n):\n    cur = int(''.join(input().split()), 2)\n    cur ^= (1 << k) - 1\n    f[cur] = 1\nans = 'NO'\nif k == 1:\n    if f[1]:\n        ans = 'YES'\nif k == 2:\n    f1 = f2 = 0\n    for i in range(4):\n        if f[i]:\n            if bel(i, 0): f1 = 1\n            if bel(i, 1): f2 = 1\n    if f1 and f2:\n        ans = 'YES'\nif k == 3:\n    p = [0] * 3\n    for i in range(8):\n        if f[i]:\n            for j in range(3):\n                if bel(i, j): p[j] = 1\n    for i in range(8):\n        if f[i]:\n            if bel(i, 0) and bel(i, 1) and p[2]: ans = 'YES'\n            if bel(i, 0) and p[1] and bel(i, 2): ans = 'YES'\n            if p[0] and bel(i, 1) and bel(i, 2): ans = 'YES'\nif k == 4:\n    for i in range(16):\n        if f[i]:\n            for j in range(16):\n                if f[j]:\n                    if (i | j) == 15:\n                        ans = 'YES'\nprint(ans)", "n,k=list(map(int,input().split()))\na=[int(input().replace(\" \",\"\"),2) for i in range(n)]\n\n# https://stackoverflow.com/questions/374626/how-can-i-find-all-the-subsets-of-a-set-with-exactly-n-elements\nfrom itertools import chain, combinations\n\ndef powerset(iterable):\n    xs = list(iterable)\n    return chain.from_iterable(combinations(xs,n) for n in range(len(xs)+1))\n\nfor s in powerset([x for x in range(1<<k) if x in a]):\n    if len(s) == 0: continue\n    good = True\n    for i in range(k):\n        c = [(p >> i) & 1 for p in s]\n        if c.count(1) > c.count(0):\n            good = False\n    if good:\n        print(\"YES\")\n        return\n\nprint(\"NO\")\n", "n, k = map(int, input().split())\na = set()\nyes = False\nfor i in range(n):\n\ta.add(input())\nfor w in a:\n\tfor w2 in a:\n\t\tx = list(map(int, w.split()))\n\t\ty = list(map(int, w2.split()))\n\t\tcount = 0\n\t\tfor i in range(k):\n\t\t\tif x[i] + y[i] != 2:\n\t\t\t\tcount += 1\n\t\tif count == k:\n\t\t\tyes = True\nif yes:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "n,k = list(map(int,input().split()))\nprobs = list([0]*n for _ in range(k))\npbtype = [0]*2**k\ne = [False]*2**k\nei = [False]*k\n\nfor i in range(n):\n    x = list(map(int,input().split()))\n    sum = 0\n    for j in range(k):\n        if x[j] == 0:\n            sum += 2**j\n            ei[j] = True\n    pbtype[sum] += 1\n    e[sum] = True\n\nsuccess = False\nif e[2**k-1]:\n    success = True\nfor i in range(k):\n    if e[2**k-1-2**i] and ei[i]:\n        success = True\nif k == 4:\n    if e[3] and e[12]:\n        success = True\n    if e[6] and e[9]:\n        success = True\n    if e[5] and e[10]:\n        success = True\n\nif success:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Oct  5 13:30:23 2017\n\n@author: savit\n\"\"\"\n\nn,k=list(map(int,input().split()))\ns=[]\nA=[]\nfor i in range(16):\n    A.append(False)\nfor i in range(n):\n    s.append(input())\n    s[i]=s[i].replace(' ','')\n    s[i]=s[i] + '0'*(4-k)\n    s[i]=int(s[i],2)\n    A[s[i]]=True\nfl=False\nif(A[0]):\n    fl=True\nif(A[1]):\n    for i in range(2,16,2):\n        if(A[i]):\n            fl=True\nif(A[2] and (A[4] or A[5] or A[8] or A[9] or A[12] or A[13] or A[1])):\n    fl=True\nif(A[4] and (A[8] or A[9] or A[10] or A[11] or A[3] or A[1] or A[2])):\n    fl=True\nif(A[8]):\n    for i in range(8):\n        if(A[i]):\n            fl=True\nif(A[3] and A[12]):\n    fl=True\nif(A[6] and A[9]):\n    fl=True\nif(A[5] and A[10]):\n    fl=True\nif(fl):\n    print('YES')\nelse:\n    print('NO')\n\n\n", "n,k=list(map(int,input().split()))\nsp=[0]*(2**k)\nfor i in range(n):\n    ci=list(map(int,input().split()))\n    c=0\n    for j in range(k-1,-1,-1):\n        c+=(1-ci[j])*(2**j)\n    sp[c]+=1\ned=[False]*k\nfor i in range(2**k-1,-1,-1):\n    ci=[]\n    t=i\n    for j in range(k-1,-1,-1):\n        ci.append(t//(2**j))\n        t%=2**j\n    if sp[i]>0:\n        for j in range(k):\n            if ci[j]==1:\n                ed[j]=True\n        break\np=i-1\nfor i in range(p,-1,-1):\n    ci=[]\n    t=i\n    for j in range(k-1,-1,-1):\n        ci.append(t//(2**j))\n        t%=2**j\n    if sp[i]>0:\n        for j in range(k):\n            if not(ci[j]==1 or ed[j]):\n                break\n        else:\n            print('YES')\n            return\nif sp[2**k-1]>0:\n    print('YES')\nelse:\n    print('NO')\n            \n    \n", "# IAWT\nn, k = list(map(int, input().split()))\ncnt = {}\nfor i in range(2 ** k):\n    cnt[bin(i)[2:].zfill(k)] = 0\n\nfor i in range(n):\n    l = input().split()\n    s = ''\n    for x in l:\n        s += x\n    cnt[s] += 1\n\ndef f1():\n    if cnt['0'] > 0:\n        print('YES')\n    else:\n        print('NO')\n\ndef f2():\n    if cnt['00'] > 0:\n        print('YES')\n        return\n    if cnt['01'] > 0 and cnt['10'] > 0:\n        print('YES')\n        return\n    print('NO')\n\ndef f3():\n    if cnt['000'] > 0:\n        print('YES')\n        return\n    a = int(cnt['100'] > 0)\n    b = int(cnt['010'] > 0)\n    c = int(cnt['001'] > 0)\n    if a + b + c > 1:\n        print('YES')\n        return\n    if a and cnt['011']:\n        print('YES')\n        return\n    if b and cnt['101']:\n        print('YES')\n        return\n    if c and cnt['110']:\n        print('YES')\n        return\n    print('NO')\n\n\ndef f4():\n    if cnt['0000'] > 0:\n        print('YES')\n        return\n    ms = ['0001', '1110', '0010', '1101',\n          '0100', '1011', '1000', '0111',\n          '1100', '0011', '1010', '0101',\n          '1001', '0110']\n    \n    for i in range(len(ms) // 2):\n        if cnt[ms[2*i]] > 0 and cnt[ms[2*i+1]] > 0:\n            print('YES')\n            return\n    x = 0\n    for i in range(4):\n        if cnt[ms[i * 2]] > 0:\n            x += 1\n    if x > 1:\n        print('YES')\n        return\n    ind = []\n    if cnt['0001'] > 0:\n        ind.append(3)\n    if cnt['0010'] > 0:\n        ind.append(2)\n    if cnt['0100'] > 0:\n        ind.append(1)\n    if cnt['1000'] > 0:\n        ind.append(0)\n    \n    for i in range(len(ms)):\n        b = False\n        for x in ind:\n            if ms[i][x] == '0':\n                b = True\n        if not b: continue\n        if cnt[ms[i]] > 0:\n            print('YES')\n            return\n    print('NO')\n    return\n\n[f1, f2, f3, f4][k - 1]()\n", "import sys\n\ndef ReadInput():\n  return sys.stdin.read().splitlines()\n\ndef GetIA(s, delim=' '):\n  return [int(x) for x in s.split(delim)]\n\ndef GetKey(flags):\n  key = 0\n  for a in flags:\n    key <<= 1\n    key += a\n  # print(flags)\n  # print(key)\n  return key\n\ndef main():\n  input = ReadInput()\n  seen = dict()\n  for s in input[1:]:\n    seen[GetKey(GetIA(s))] = True\n\n  for a in seen.keys():\n    for b in seen.keys():\n      if (a & b) == 0:\n        print('YES')\n        return\n\n  print('NO')\n\nmain()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**15\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\ndef main():\n    n,k = LI()\n    s = set()\n    for _ in range(n):\n        t = LI()\n        c = sum(t)\n        if c == 0:\n            return 'YES'\n        s.add(tuple(t))\n\n    l = list(s)\n    ll = len(s)\n    for i in range(ll):\n        for j in range(i+1,ll):\n            f = True\n            for li in range(k):\n                if l[i][li] == 1 and l[j][li] == 1:\n                    f = False\n                    break\n            if f:\n                return 'YES'\n\n    return 'NO'\n\n\nprint(main())\n\n\n", "n, k = [int(i) for i in input().split()]\ns = set([int(\"\".join(input().split()), base=2) for j in range(n)])\nfor t in s:\n    for m in range(1 << k):\n        if m in s:\n            for i in range(k):\n                if ((t >> i) & 1) and ((m >> i) & 1):\n                    break\n            else:\n                print(\"YES\")\n                return\nprint(\"NO\")\n    \n", "n, k = [int(i) for i in input().split()]\ns = set([int(\"\".join(input().split()), base=2) for j in range(n)])\nfor t in s:\n    for m in range(1 << k):\n        if m in s:\n            for i in range(k):\n                if ((t >> i) & 1) and ((m >> i) & 1):\n                    break\n            else:\n                print(\"YES\")\n                return\nprint(\"NO\")\n    \n", "import sys\nN,K= list(map( int,input().split() ))\n\nstates=set([(0,0)])\n\nfor _ in range(N):\n\tcan_solve=list( map(int,input().split()) )\n\n\tnext_states=set()\n\tfor (selected,bm) in states:\n\t\tcnts =[(bm>>i)&1 for i in range(K)][::-1]\n\n\t\tnext_cnts=[cnts[i]+can_solve[i] for i in range(K)]\n\t\tnext_selected=selected+1\n\n\t\tif max(next_cnts)<=next_selected/2 and next_selected>0:\n\t\t\tprint(\"YES\")\n\n\t\t\treturn\n\t\t\n\t\tif max(next_cnts)<=1 and next_selected<=4:\n\t\t\tbin_num= int(''.join( map(str,next_cnts) ) ,2)\n\t\t\tnext_states.add( (next_selected,bin_num) )\n\t\t\t\n\tstates|=next_states\n\nprint(\"NO\")\n\n", "n,k=map(int, input().split())\nvis = [0] * 17\nfor _ in range(n):\n\ta = list(map(int, input().split()))\n\tvis[sum(a[i]*(1<<i) for i in range(k))] = 1\nflag=0\nfor i in range(16):\n\tfor j in range(16):\n\t\tif i&j==0 and vis[i] and vis[j]: flag=1\nprint(\"YES\" if flag else \"NO\")", "n, k = [int(z) for z in input().split()]\nans = [0] * 16\nfor i in range(n):\n    problem = [int(z) for z in input().split()]\n    s = 0\n    for j in range(k):\n        s = s * 2 + problem[j]\n    ans[s] += 1\n#print(ans)\nfor i in range(16):\n    for j in range(16):\n        if ans[i] > 0 and ans[j] > 0 and (i & j) == 0:\n            print(\"YES\")\n            return\nprint(\"NO\")", "\nn, k = [int(i) for i in input().split()]\ns = set([int(\"\".join(input().split()), base=2) for j in range(n)])\n\nfor t in s:\n    for m in range(1 << k):\n        if m in s:\n            for i in range(k):\n                if ((t >> i) & 1) and ((m >> i) & 1):\n                    break\n            else:\n                print(\"YES\")\n                return\n                \nprint(\"NO\")", "n, k = [int(i) for i in input().split()]\n\nK = 1 << k\np = [0] * K\n\nfor i in range(n):\n    pi = [int(j) for j in input().split()]\n    pc = sum(pi[j] << j for j in range(k))\n    p[pc] += 1\n\ns = [0] * k\n\ndef go(i0, used):\n    if i0 >= K: return False\n    if p[i0]:\n        s0 = s[:]\n        ok = True\n        used += 1\n        for j in range(k):\n            f = (i0 >> j) & 1\n            assert f == 0 or f == 1\n            s[j] += (i0 >> j) & 1\n            if s[j] * 2 > used: ok = False\n        if ok: return True\n        if go(i0+1, used): return True\n        s[:] = s0\n        used -= 1\n    return go(i0+1, used)\n\nans = \"YES\" if go(0, 0) else \"NO\"\nprint(ans)", "def bel(mask, bit):\n    return (mask & (1 << bit)) != 0\nread = lambda: map(int, input().split())\nn, k = read()\nf = [0] * 100\nfor i in range(n):\n    cur = int(''.join(input().split()), 2)\n    cur ^= (1 << k) - 1\n    f[cur] = 1\nans = 'NO'\nif k == 1:\n    if f[1]:\n        ans = 'YES'\nif k == 2:\n    f1 = f2 = 0\n    for i in range(4):\n        if f[i]:\n            if bel(i, 0): f1 = 1\n            if bel(i, 1): f2 = 1\n    if f1 and f2:\n        ans = 'YES'\nif k == 3:\n    p = [0] * 3\n    for i in range(8):\n        if f[i]:\n            for j in range(3):\n                if bel(i, j): p[j] = 1\n    for i in range(8):\n        if f[i]:\n            if bel(i, 0) and bel(i, 1) and p[2]: ans = 'YES'\n            if bel(i, 0) and p[1] and bel(i, 2): ans = 'YES'\n            if p[0] and bel(i, 1) and bel(i, 2): ans = 'YES'\nif k == 4:\n    for i in range(16):\n        if f[i]:\n            for j in range(16):\n                if f[j]:\n                    if (i | j) == 15:\n                        ans = 'YES'\nprint(ans)", "\ninp = input().split(\" \")\nn = int(inp[0])\nk = int(inp[1])\n\ns = set()\nfor i in range(n):\n    a = input().split(' ')\n    x = 0\n    for j in range(k):\n        x = 2 * x + int(a[j])\n    s.add(x)\n\nfor i in range(16):\n    if i in s:\n        for j in range(16):\n            if j in s:\n                if i & j == 0:\n                    print(\"YES\")\n                    return\n\n\nprint(\"NO\")\n", "def main():\n    m, k = list(map(int, input().split()))\n    all = set()\n    zeros = ''\n    for _ in range(k):\n        zeros += '0'\n\n    for _ in range(m):\n        line = input().replace(' ', '')\n        if line == zeros:\n            print('YES')\n            return\n        all.add(line)\n\n    for s1 in all:\n        for s2 in all:\n            if s1 == s2:\n                continue\n            bad = False\n            for i in range(0, len(s1)):\n                if s1[i] == '1' and s2[i] == '1':\n                    bad = True\n            if not bad:\n                print('YES')\n                return\n    print('NO')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def test(masks, wanted):\n    for w in wanted:\n        if w not in masks:\n            return False\n    return True\n\ndef any_test(masks, tests):\n    for t in tests:\n        if test(masks, t):\n            return True\n    return False\n\ndef inflate(perm):\n    count = max(perm)\n    masks = [[0 for i in range(len(perm))] for j in range(count)]\n\n    for i in range(len(perm)):\n        if perm[i] == 0:\n            continue\n        masks[perm[i] - 1][i] = 1\n    return [tuple(m) for m in masks]\n\ndef gen(st, lev, teams, tests):\n    if lev >= teams:\n        if max(st) > 1:\n            tests.append(inflate(st))\n        return\n\n    for i in range(teams + 1):\n        st[lev] = i\n        gen(st, lev + 1, teams, tests)\n\ndef gen_tests(teams):\n    tests = []\n    st = [0 for i in range(teams)]\n\n    gen(st, 0, teams, tests)\n    return tests\n\ndef back(masks, teams):\n    tests = gen_tests(teams)\n    return any_test(masks, tests)\n\ndef main():\n    probs, teams = list(map(int, input().split()))\n    masks = set()\n    \n    for i in range(probs):\n        conf = tuple(list(map(int, input().split())))\n        if 1 not in conf:\n            print('YES')\n            return\n        masks.add(conf)\n\n    if teams == 1:\n        print('NO')\n        return\n\n    if teams == 2:\n        good = test(masks, [(0, 1), (1, 0)])\n    else:\n        good = back(masks, teams)\n\n    print('YES' if good else 'NO')\n\nmain()\n", "n,k = [int(i) for i in input().split()]\nif k == 1:\n    alert = 0\n    for time in range(n):\n        term = str(input())\n        if term == \"0\":\n            alert = 1\n            break\n    print(\"NO\") if alert == 0 else print(\"YES\")\nelif k == 2:\n    (s1,s2) = (0,0)\n    for time in range(n):\n        term = str(input())\n        if term == \"0 0\":\n            (s1,s2) = (1,1)\n            break\n        else:\n            if term == \"0 1\":\n                s1 = 1\n            elif term == \"1 0\":\n                s2 = 1\n        if (s1,s2) == (1,1):\n            break\n    print(\"YES\") if (s1,s2) == (1,1) else print(\"NO\")\nelif k == 3:\n    alert = 0\n    s = {str(input()) for i in range(n)}\n    if \"0 0 0\" in s:\n        alert = 1\n    if \"0 0 1\" in s:\n        if \"1 1 0\" in s or \"1 0 0\" in s or \"0 1 0\" in s:\n            alert = 1\n    if \"0 1 0\" in s:\n        if \"1 0 1\" in s or \"1 0 0\" in s or \"0 0 1\" in s:\n            alert = 1\n    if \"1 0 0\" in s:\n        if \"0 0 1\" in s or \"0 1 0\" in s or \"0 1 1\" in s:\n            alert = 1\n    print(\"YES\") if alert == 1 else print(\"NO\")\nelif k == 4:\n    alert = 0\n    s = {str(input()) for i in range(n)}\n    s = list(s)\n    #print(s)\n    if \"0 0 0 0\" in s:\n        alert = 1\n    if \"1 1 0 0\" in s:\n        for i in range(len(s)):\n            if (s[i])[0] == '0' and (s[i])[2] == '0':\n                alert = 1\n    if \"1 0 1 0\" in s:\n        for i in range(len(s)):\n            if (s[i])[0] == '0' and (s[i])[4] == '0':\n                alert = 1\n    if \"1 0 0 1\" in s:\n        for i in range(len(s)):\n            if (s[i])[0] == '0' and (s[i])[6] == '0':\n                alert = 1\n    if \"0 1 1 0\" in s:\n        for i in range(len(s)):\n            if (s[i])[2] == '0' and (s[i])[4] == '0':\n                alert = 1\n    if \"0 1 0 1\" in s:\n        for i in range(len(s)):\n            if (s[i])[2] == '0' and (s[i])[6] == '0':\n                alert = 1\n    if \"0 0 1 1\" in s:\n        for i in range(len(s)):\n            if (s[i])[4] == '0' and (s[i])[6] == '0':\n                alert = 1\n    if \"1 0 0 0\" in s:\n        for i in range(len(s)):\n            if (s[i])[0] == '0':\n                alert = 1\n    if \"0 1 0 0\" in s:\n        for i in range(len(s)):\n            if (s[i])[2] == '0':\n                alert = 1\n    if \"0 0 1 0\" in s:\n        for i in range(len(s)):\n            if (s[i])[4] == '0':\n                alert = 1\n    if \"0 0 0 1\" in s:\n        for i in range(len(s)):\n            if (s[i])[6] == '0':\n                alert = 1\n    print(\"YES\") if alert == 1 else print(\"NO\")\n\n\n", "v = [0 for i in range(20)]\nn,m = list(map(int ,input().split()))\nfor i in range(n):\n    x = list(map(int, input().split()))\n    sum = 0\n    for j in range(m):\n        sum += x[j] * (1<<j)\n    v[sum] = 1\nflag = 0\nfor i in range(16):\n    for j in range(16):\n        if i&j == 0 and v[i] and v[j]:\n            flag = 1\n\nif flag:\n    print(\"YES\")\nelse :\n    print(\"NO\")\n", "n, k = map(int, input().split())\nexist = [False] * 16\nzero = [False] * 4\nfor i in range(n):\n    part = list(map(int, input().split()))\n    P = [0] * (4 - k)\n    for elem in part:\n        P.append(elem)\n    num = 0\n    for j in range(4):\n        if P[j] == 0:\n            zero[j] = True\n    for j in range(4):\n        if P[3 - j] == 1:\n            num += 2 ** j\n    exist[num] = True\nans = False\nif exist[0] or (exist[1] and zero[3]) or (exist[2] and zero[2]) or (exist[4] and zero[1]) or (exist[8] and zero[0]) or (exist[3] and exist[12]) or (exist[5] and exist[10]) or (exist[6] and exist[9]):\n    ans = True\nif ans:\n    print('YES')\nelse:\n    print('NO')"]