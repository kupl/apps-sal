["3\n\nimport sys\n\n(n, m) = list(map(int, input().split()))\n\nfirstData = None \n\nmaxHeight = -1\n\nfor i in range(m):\n    (d, h) = list(map(int, input().split()))\n\n    if firstData is None:\n        firstData = (d, h)\n    else:\n        if (d - prevD) < abs(h - prevH):\n            print (\"IMPOSSIBLE\")\n            return\n        maxH = max(h, prevH)\n        minH = min(h, prevH)\n        resource = d - prevD - (maxH - minH) # \"free\" days for going up-down\n        possibleH = maxH + resource // 2\n        maxHeight = max(maxHeight, possibleH)\n\n    (prevD, prevH) = (d, h)\n    lastData = (d, h)\n\nmaxHeight = max(maxHeight, firstData[1] + firstData[0] - 1)\nmaxHeight = max(maxHeight, lastData[1] + (n - lastData[0]))\n\nprint (maxHeight)\n", "n,m = list(map(int,input().split(' ')))\nd = []\nfor i in range(m):\n    d.append(list(map(int,input().split(' '))))\nispossible = True\nmaxheights = []\n# first and last days\nmaxheights.append(d[0][1]+d[0][0]-1)\nmaxheights.append(d[-1][1]+n-d[-1][0])\n# other days\nfor i in range(m-1):\n    d1 = d[i]\n    d2 = d[i+1]\n    if abs(d2[1]-d1[1]) > d2[0]-d1[0]:\n        ispossible = False\n    maxheights.append((d1[1]+d2[1]+d2[0]-d1[0]) // 2)\nif ispossible:\n    print(max(maxheights))\nelse:\n    print('IMPOSSIBLE')\n", "import sys\nf = sys.stdin\n\nn, m  = map(int, f.readline().strip().split())\n\nres = True\nfor i in range(m):\n   d, h  = map(int, f.readline().strip().split()) \n   if i==0:\n       maxH = h + (d - 1)\n       hpr = h\n       dpr = d\n   else: \n       if abs(h-hpr)>(d-dpr):\n           res = False\n       else:\n           dt = d - dpr - (max(hpr, h) - min(hpr, h))\n           maxH = max(maxH, max(hpr, h) + (dt // 2))\n           hpr = h\n           dpr = d       \n\nmaxH = max(maxH, hpr + (n - dpr))\n\n       \nif res:\n    print(maxH)  \nelse :\n    print('IMPOSSIBLE')", "n, m = list(map(int, input().split()))\nnotes = [list(map(int, input().split())) for _ in range(m)]\n\nif m == 1:\n    d, h = notes[0]\n    print(max(h+(d-1), h+(n-d)))\n    return\n\nd0, h0 = notes[0]\nans = h0+(d0-1)\nfor i in range(m-1):\n    d1, h1 = notes[i]\n    d2, h2 = notes[i+1]\n    if d2-d1 < abs(h1-h2):\n        ans = -1\n        break\n    else:\n        ans = max((h1+h2+(d2-d1))//2, ans)\nelse:\n    dm, hm = notes[m-1]\n    ans = max(ans, hm+(n-dm))\nprint(ans if ans != -1 else 'IMPOSSIBLE')\n        \n    \n", "n,m = list(map(int,input().split()))\nl = []\nfor i in range(m):\n    l.append(list(map(int,input().split())))\nans = max(l[0][1]+l[0][0]-1,l[-1][1]+n-l[-1][0])\nfor i in range(m-1):\n    if abs(l[i][1]-l[i+1][1]) > abs(l[i][0]-l[i+1][0]):\n        ans = 'IMPOSSIBLE'\n        break\n    if l[i][1] > l[i+1][1]:\n        ans = max(ans,l[i][1]+((l[i+1][0]-l[i][0])-(l[i][1]-l[i+1][1]))//2)\n    else:\n        ans = max(ans,l[i+1][1]+((l[i+1][0]-l[i][0])-(l[i+1][1]-l[i][1]))//2)\nprint(ans)\n", "__author__ = '\u0414\u0430\u043d\u0438\u043b\u0430'\nn, m = map(int, input().split())\nl = []\nfor i in range(m):\n    d, h = map(int, input().split())\n    l.append((d, h))\nk = - 1\nflag = True\nfor i in range(m - 1):\n    b = l[i + 1][1]\n    a = l[i][1]\n    y = l[i + 1][0]\n    x = l[i][0]\n    if a + y - x >= b and a - y + x <= b:\n        if (y - x - a + b)//2 >= b - a:\n            k1 = (y - x - a + b)//2 + a\n            if k1 > k:\n                k = k1\n        else:\n            k1 = max(a, b)\n            if k1 > k:\n                k = k1\n    else:\n        flag = False\n\nb = l[0][0] - 1 + l[0][1]\na = l[-1][1] + n - l[-1][0]\nif flag:\n    print(max(k, a, b))\nelse:\n    print('IMPOSSIBLE')", "def maxheight(start, end):\n    start_day, start_height = start\n    end_day, end_height = end\n    \n    ddays = end_day - start_day\n    dheight = end_height - start_height\n    \n    xdays = ddays - abs(dheight)\n    \n    if xdays < 0:\n        return -1\n    else:\n        return xdays // 2 + max(start_height, end_height)\n\nimport sys\ndata = sys.stdin\n\ndays = int(data.readline().split()[0])\n\nentries = []\nfor l in data.read().splitlines():\n    entries.append(tuple(map(int, l.split(' '))))\nentries.sort()\n\nmaxheights = []\n\nfor e in entries:\n    maxheights.append(e[1])\n\nfor i in range(len(entries) - 1):\n    h = maxheight(entries[i], entries[i+1])\n    if h < 0:\n        print(\"IMPOSSIBLE\")\n        break\n    else:\n        maxheights.append(h)\nelse:\n    first = entries[0]\n    maxheights.append(first[0] - 1 + first[1])\n\n    last = entries[-1]\n    maxheights.append(days - last[0] + last[1])\n\n    print(str(max(maxheights)))", "import sys\n\n\nn, m = list(map(int, str.split(sys.stdin.readline())))\npd = ph = None\ntop = None\nfor _ in range(m):\n\n    d, h = list(map(int, str.split(sys.stdin.readline())))\n    if pd is None:\n\n        top = d - 1 + h\n\n    else:\n\n        if pd and d - pd < abs(h - ph):\n\n            print(\"IMPOSSIBLE\")\n            return\n\n        delta = d - pd - 1 - abs(h - ph)\n        top = max(top, max(ph, h) + (delta // 2) + (delta % 2))\n\n    pd, ph = d, h\n\ntop = max(top, h + n - d)\nprint(top)\n", "n, m = list(map(int, input().split(' ')))\nl = [list(map(int, input().split(' '))) for _ in range(m)]\n\nans = max(l[0][0] + l[0][1] - 1, n - l[-1][0] + l[-1][1])\n\nfor i in range(1, m):\n    dd, dh = abs(l[i][0] - l[i - 1][0]), abs(l[i][1] - l[i - 1][1])\n    if dd < dh:\n        print('IMPOSSIBLE')\n        return\n    ans = max(ans, max(l[i][1], l[i - 1][1]) + ((dd - dh) >> 1))\n\nprint(ans)\n", "def main():\n    import sys\n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    result = 0\n    n, m = tokens.pop(), tokens.pop()\n    pd, ph = 0, 0\n    for i in range(m):\n        d, h = tokens.pop(), tokens.pop()\n        if i == 0:\n            result = h + (d - 1)\n        else:\n            delta_d = d - pd\n            delta_h = abs(h - ph)\n            if delta_h > delta_d:\n                print(\"IMPOSSIBLE\")\n                return\n            else:\n                result = max(result, max(h, ph) + (delta_d - delta_h) // 2)\n        if i == m - 1:\n            result = max(result, h + (n - d))\n        pd, ph = d, h\n    print(result)\n    \nmain()", "n, m = map(int, input().split())\npossible = True\nday_prev, h_prev = map(int, input().split())\nh_max = h_prev + (day_prev - 1)\nfor i in range(m - 1):\n    day, h = map(int, input().split())\n    if abs(h - h_prev) > day - day_prev:\n        possible = False\n        break\n    h_new = max(h, h_prev) + (day - day_prev - abs(h - h_prev)) // 2\n    h_max = max(h_max, h_new)\n    day_prev, h_prev = day, h\nh_max = max(h_max, h_prev + (n - day_prev))\nif possible:\n    print(h_max)\nelse:\n    print(\"IMPOSSIBLE\")", "n, m = map(int, input().split())\nd, h = [], []\nfor i in range(m):\n    di, hi = map(int, input().split())\n    d.append(di)\n    h.append(hi)\nmaximum = h[0]\nif d[0] != 1:\n    d.insert(0, 1)\n    h.insert(0, -1)\n    m += 1\nflag = 0\nfor i in range(1, m):\n    diff = d[i] - d[i - 1]\n    if h[i - 1] == -1:\n        if diff + h[i] > maximum:\n            maximum = diff + h[i]\n    else:\n        if abs(h[i] - h[i - 1]) > diff:\n            flag = 1\n            break\n        elif abs(h[i] - h[i - 1]) < diff:\n            p = diff - (abs(h[i - 1] - h[i]))\n            if max(h[i], h[i - 1]) + p // 2 > maximum:\n                maximum = p // 2 + max(h[i], h[i - 1])\n        else:\n            if max(h[i], h[i - 1]) > maximum:\n                maximum = max(h[i], h[i - 1])\nif d[m - 1] < n:\n    if maximum < h[m - 1] + n - d[m - 1]:\n        maximum = h[m - 1] + n - d[m - 1]\nif flag == 1:\n    print(\"IMPOSSIBLE\")\nelse:\n    print(maximum)", "n, m = list(map(int, input().split()))\nl_d, l_h = list(map(int, input().split()))\nm_h = l_h + l_d - 1\nfor i in range(1, m):\n    n_d, n_h = list(map(int, input().split()))\n    if abs(n_h - l_h) > n_d - l_d:\n        print(\"IMPOSSIBLE\")\n        return\n    m_h = max(m_h, max(l_h, n_h) + (n_d - l_d - abs(n_h - l_h)) // 2)\n    l_d, l_h = n_d, n_h\nm_h = max(m_h, l_h + n - l_d)\nprint(m_h)\n", "n, m = input().split()\nn = int(n)\nm = int(m)\n#print(str(n)+' '+str(m))\narr = []\nfor i in range(m):\n    d, h = input().split()\n    arr.append([int(d), int(h)])\n\nlast = arr[0]\nres = arr[0][1]\nfor i in range(1, m):\n    if arr[i][0] - last[0] < abs(arr[i][1] - last[1]):\n        print(\"IMPOSSIBLE\")\n        return\n    else:\n        diff = arr[i][1] - last[1]\n        res = max(res, (arr[i][0]-last[0]+diff)//2 + last[1])\n        res = max(res, arr[i][1])\n        last = arr[i]\nprint(max(arr[0][1]+arr[0][0]-1, max(res, n - arr[len(arr)-1][0] + arr[len(arr)-1][1]))) ", "N,M = list(map(int,input().split()))\nH = []\nfor i in range(M):\n    d,h = list(map(int,input().split()))\n    H.append((d,h))\n#print(H[0])\nbest = (H[0][0]-1) + H[0][1]\nfor i in range(M - 1):\n    diffd = H[i + 1][0] - H[i][0]\n    diffh = abs(H[i + 1][1] - H[i][1])\n    if (diffd >= diffh):\n        best = max(best,max(H[i + 1][1],H[i][1]) + ((diffd - diffh) // 2))\n    else:\n        print(\"IMPOSSIBLE\")\n        break\nelse:\n    best = max(best,H[M - 1][1] + (N - H[M - 1][0]))\n    print(best)", "n, m = list(map(int, input().split()))\nld, lh = list(map(int, input().split()))\nmh = lh + (ld - 1) # 1-indexed\nfor i in range(1, m):\n\td, h = list(map(int, input().split()))\n\tif abs(h - lh) > (d - ld):\n\t\tprint('IMPOSSIBLE')\n\t\treturn\n\tmh = max(mh, max(h, lh) + ((d - ld) - abs(h - lh)) // 2)\n\tld, lh = d, h\nmh = max(mh, lh + (n - ld))\nprint(mh) \n", "n, m = [int(x) for x in input().split()]\nd = []\nh = []\ns = 0\namax = 0\nfor i in range(m):\n    p, q = [int(x) for x in input().split()]\n    d.append(p)\n    h.append(q)\nfor i in range(m-1):\n    if abs((h[i+1]-h[i]))/(d[i+1]-d[i]) > 1:\n        print('IMPOSSIBLE')\n        s += 1\n        break\nif s == 0:\n    for i in range(m-1):\n        lshift = h[i]-0\n        rshift = h[i+1]-0\n        a = d[i+1] + rshift - (d[i] - lshift)\n        if a // 2 > amax:\n            amax = a // 2\n    b = h[0] + d[0] - 1\n    c = h[m-1] + n - d[m-1]\n    if amax >= b and amax >= c:\n        print(amax)\n    elif b >= amax and b >= c:\n        print(b)\n    else:\n        print(c)\n", "[n, k] = [int(x) for x in input().split()]\nData = type('Data', (object,), {'index': 0, 'value': 0})\n\ndata = [Data() for _ in range(k)]\nfor i in range(k):\n    [data[i].index, data[i].value] = [int(x) for x in input().split()]\n\ndata.sort(key=lambda x: x.index)\n\nans = max(data[0].value + data[0].index - 1, data[k-1].value + n - data[k-1].index)\n\nfor i in range(1, k):\n    L = data[i].index - data[i-1].index\n    minH = min(data[i].value, data[i-1].value)\n    maxV = max(data[i].value, data[i-1].value)\n\n    if minH + L < maxV:\n        ans = -1\n        break\n\n    ans = max(ans, (L + minH + maxV) // 2)\n\nif ans < 0:\n    print(\"IMPOSSIBLE\")\nelse:\n    print(ans)\n", "n,m=[int(x) for x in input().split()]\nL=[[int(x) for x in input().split()] for z in range(m)]\nmaxh=max([x[1] for x in L])\ndef possible(a,b):\n\tif abs(a[1]-b[1])>abs(a[0]-b[0]):\n\t\treturn False\n\treturn True\ndef maxp(a,b):\n\tt=abs(a[0]-b[0])\n\tt-=abs(a[1]-b[1])\n\tm=max(a[1],b[1])\n\treturn m+(t//2)\nposs=True\nfor i in range(len(L)-1):\n\tif not possible(L[i],L[i+1]):\n\t\tposs=False\n\t\tbreak\n\tmaxh=max(maxh,maxp(L[i],L[i+1]))\nmaxh=max(maxh,L[0][0]-1+L[0][1],n-L[-1][0]+L[-1][1])\nif poss:\n\tprint(maxh)\nelse:\n\tprint('IMPOSSIBLE')\n", "\nimport os\nimport sys\nimport functools\nimport collections\nimport itertools\n\n\nclass Solution:\n    def __init__(self):\n        self.M = 0\n        self.N = 0\n        self.notes = None\n\n    def readInput(self):\n        self.N, self.M = [int(x) for x in input().split()]\n        self.notes = []\n        for i in range(self.M):\n            di, hi = [int(x) for x in input().split()]\n            self.notes.append((di, hi))\n    def readMockInput(self):\n        pass\n\n    def solve(self):\n\n        if self.notes[0][0] > 1:\n            self.notes = [(1, sum(self.notes[0])-1)] + self.notes\n        if self.notes[-1][0] < self.N:\n            self.notes.append((self.N, self.notes[-1][1]+self.N-self.notes[-1][0]))\n\n        res = max([x[1] for x in self.notes])\n        for i in range(1, len(self.notes)):\n            d1, h1 = self.notes[i-1]\n            d2, h2 = self.notes[i]\n            if abs(h1-h2) > abs(d1-d2):\n                print('IMPOSSIBLE')\n                return\n            res = max(res, (abs(d1-d2)+h1+h2) // 2)\n\n        print(res)\n\n\n\n\ns = Solution()\ns.readInput()\n# s.readMockInput()\ns.solve()", "n,m = list(map(int, input().split()))\nmax_height = 0\nprev_d, prev_h = [0,0]\nfor i in range(m) :\n\td,h = list(map(int, input().split()))\n\tif(i == 0) :\n\t\tmax_height = (d-1) + h\n\t\tprev_d = d\n\t\tprev_h = h\n\n\t\t#crap - fix this\n\t\tif(i == m-1) :\n\t\t\tmax_height = max(max_height, n-d+h)\n\n\t\tcontinue\n\n#\tprint(\"calculating  \",  prev_d, prev_h,d,h) \n\tintersection = (-1*(prev_d - prev_h) + (d + h))/2\n\tday = (intersection - prev_h) + prev_d\n#\tprint(\"intersection: \", intersection, \" at day \", day)\n\n\tif(day > d or day < prev_d) :\n#\tif(day > d) :\n\t\tmax_height = -1\n\t\tbreak\n\t\t\n\tmax_height = max(max_height, int(intersection))\n\t\n\tif(i == m-1) :\n\t\tmax_height = max(max_height, n-d+h)\n\n\t\t\n\t\t\n\t\t\n\tprev_d = d\n\tprev_h = h\n\t\nif(max_height >= 0) :\n\tprint(max_height)\nelse :\n\tprint(\"IMPOSSIBLE\")\n\n#16160178\n", "import math\nn,m = map(int,input().split())\na = []\nfor i in range(m):\n    d,h = map(int,input().split())\n    a.append([d,h])\nmax_ = -1\nc1 = 0\ng = (a[0][0] - 1) + a[0][1]\nif (g > max_):\n    max_ = g\nfor i in range(len(a)-1):\n    g = math.floor(((a[i+1][0] - a[i][0]) + a[i][1] + a[i+1][1]) / 2)\n    if ((a[i][1] > g) or (a[i+1][1] > g)):\n        c1 = -1\n        break\n    else:\n        if (g > max_):\n            max_ = g\ng = (n - a[len(a)-1][0]) + a[len(a)-1][1]\nif (g > max_):\n    max_ = g\nif (c1 != -1):\n    print(max_)\nelse:\n    print('IMPOSSIBLE')", "#  Precondition: d1 < d2\ndef possible(d1,h1,d2,h2):\n    if (d2-d1 < abs(h2-h1)):\n        return -1\n    elif h1==h2:\n        return (d2-d1)//2 + h1\n    elif h1 > h2:\n        diff = h1 - h2\n        newd2 = d2 - diff\n        if newd2 < d1:\n           return -1\n        else:\n           return (newd2-d1)//2 + h1\n    else:  # h1 < h2\n        diff = h2 - h1\n        newd1 = d1+diff\n        if newd1 > d2:\n            return -1\n        else:\n            return (d2-newd1)//2 + h2\n\n# print (\"Input n and m (days and notes)\")\ninfo = input().split()\nn = int(info[0])\nm = int(info[1])\n\n# print (\"Input first day/height pair\")\nfirst = input().split()\noldd = int(first[0])\noldh = int(first[1])\nanswer = (oldd-1) + oldh  # Compute what day one could be\n\nbad = False\nfor i in range(m-1):\n    # print (\"Input next day/height pair\")\n    inf = input().split()\n    newd = int(inf[0])\n    newh = int(inf[1])\n    pos = possible(oldd, oldh, newd, newh)\n    if (pos == -1):\n        print (\"IMPOSSIBLE\")\n        bad = True\n        break\n    else:   #  Can do it--check to see if a greater height\n        if pos > answer:\n            answer = pos\n    oldd = newd\n    oldh = newh\n\n#  If we are still OK, compute what the last day could be\nif (not bad):\n    endheight = (n - oldd) + oldh\n    if endheight > answer:\n        answer = endheight\n    print (answer)\n        \n        \n    \n    \n\n\n        \n       \n", "N, M = list(map(int, input().split()))\nH = []\nD = []\nfor i in range(M):\n    d, h = list(map(int, input().split()))\n    H.append(h)\n    D.append(d)\n\nres = max(max(H), H[M - 1] + N - D[M - 1])\nres = max(res, H[0] + D[0] - 1)\n\nfor i in range(M - 1):\n    dest = D[i + 1] - D[i]\n    diff = abs(H[i + 1] - H[i])\n    if diff > dest:\n        res = float('inf')\n        break\n    else:\n        res = max(res, (dest - diff) // 2 + max(H[i + 1], H[i]))\n\nif res == float('inf'):\n    print(\"IMPOSSIBLE\")\nelse:\n    print(res)\n    \n", "from sys import stdin\ninput = stdin.readline\n\nn, m = (int(x) for x in input().split())\npd, ph = (int(x) for x in input().split())\nres = ph + pd - 1\nfor i in range(1, m):\n\td, h = (int(x) for x in input().split())\n\tdd = d - pd\n\tdh = abs(h - ph)\n\tif dd < dh:\n\t\tprint('IMPOSSIBLE')\n\t\treturn\n\tdd -= dh\n\tres = max(res, max(ph, h) + dd // 2)\n\tpd = d\n\tph = h\nres = max(res, ph + (n - pd))\nprint(res)\n"]