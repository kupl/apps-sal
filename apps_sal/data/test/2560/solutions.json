["t = int(input())\nfor i in range(0, t) :\n    n, l, r = [int(s) for s in input().split()]\n    print('Yes' if n % l <= (r - l) *  (n // l) else 'No')", "T=int(input())\nwhile T>0:\n    T-=1\n    n,l,r=list(map(int,input().split()))\n    t = n//l\n    if t*r>=n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n", "for i in range(int(input())):\n    n, l, r = map(int, input().split())\n    print('No' if (n // l) * r < n else 'Yes')", "t = int(input())\nfor _ in range(t):\n  n, l, r = map(int, input().split())\n  print(\"No\" if n // l * r < n else \"Yes\")", "import sys; sys.setrecursionlimit(1000000)\n\ndef solve():\n    tests, = rv()\n    for test in range(tests):\n        n,l,r, = rv()\n        largestused = (n + r - 1) // r\n        totalnum = largestused * r\n        mostcansubtract = largestused * (r - l)\n        lowerbound = totalnum - mostcansubtract\n        if lowerbound <= n:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n\ndef rv(): return list(map(int, input().split()))\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n\n\n", "for i in range(int(input())):\n    n, l, r = map(int, input().split())\n    print('No' if (n // l) * r < n else 'Yes')", "# from dust i have come, dust i will be\n\nt=int(input())\n\nwhile t>0:\n    t-=1\n    n,l,r=map(int,input().split())\n\n    k=n//l\n\n    if r*k>=n:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n\n    n, l, r = list(map(int, input().split()))\n\n    print('No' if (n // l) * r < n else 'Yes')\n\n\n\n# Made By Mostafa_Khaled\n", "def possible(numbers):\n    if int(numbers[0])==int(numbers[1]) or int(numbers[0])==int(numbers[2]) or (int(numbers[0])>int(numbers[1]) and int(numbers[0])<int(numbers[2])):\n        return 'Yes'\n    elif int(numbers[0])<int(numbers[1]) or int(numbers[0])//int(numbers[1])<int(numbers[1])-int(numbers[2]):\n        return 'No'\n    else:\n        if int(numbers[0])%int(numbers[1])==0 or int(numbers[0])%int(numbers[1])+int(numbers[1])<int(numbers[2]) or (int(numbers[0])%int(numbers[1])+int(numbers[1])*(int(numbers[0])//int(numbers[1])-1)<=int(numbers[2]) and int(numbers[0])%int(numbers[1])+int(numbers[1])*(int(numbers[0])//int(numbers[1])-1)>=int(numbers[1])) or int(numbers[0])%int(numbers[1])//(int(numbers[0])//int(numbers[1]))<int(numbers[2])-int(numbers[1]):\n            return 'Yes'\n        return 'No'\nfor i in range(0,int(input())):\n    numbers=input().split(' ')\n    if i == -1 and int(numbers[0])!=2:\n        print(numbers)\n    print(possible(numbers))\n", "def possible(numbers):\n        if int(numbers[0])//int(numbers[1])!=0 and int(numbers[0])%int(numbers[1])//(int(numbers[0])//int(numbers[1]))<=int(numbers[2])-int(numbers[1]) and (int(numbers[0])%int(numbers[1])%(int(numbers[0])//int(numbers[1])) == 0 or int(numbers[0])%int(numbers[1])%int(numbers[0])//int(numbers[1])+int(numbers[0])%int(numbers[1])%(int(numbers[0])//int(numbers[1]))<=(int(numbers[2])-int(numbers[1]))*(int(numbers[0])//int(numbers[1])-int(numbers[0])//int(numbers[2]))):\n            return 'Yes'\n        return 'No'\nfor i in range(0,int(input())):\n    numbers=input().split(' ')\n    if i == -1 and int(numbers[0])!=2 and int(numbers[0])!=912247143:\n        print(numbers)\n    print(possible(numbers))\n", "def possible(numbers):\n        if int(numbers[0])//int(numbers[1])!=0 and int(numbers[0])%int(numbers[1])//(int(numbers[0])//int(numbers[1]))<=int(numbers[2])-int(numbers[1]) and int(numbers[0])%int(numbers[1])%int(numbers[0])//int(numbers[1])+int(numbers[0])%int(numbers[1])%(int(numbers[0])//int(numbers[1]))<=(int(numbers[2])-int(numbers[1]))*(int(numbers[0])//int(numbers[1])-int(numbers[0])//int(numbers[2])):\n            return 'Yes'\n        return 'No'\nfor i in range(0,int(input())):\n    numbers=input().split(' ')\n    if i == -1 and int(numbers[0])!=2 and int(numbers[0])!=912247143:\n        print(numbers)\n    print(possible(numbers))\n", "def possible(numbers):\n        return int(numbers[0])//int(numbers[1])!=0 and int(numbers[0])%int(numbers[1])//(int(numbers[0])//int(numbers[1]))<=int(numbers[2])-int(numbers[1]) and int(numbers[0])%int(numbers[1])%int(numbers[0])//int(numbers[1])+int(numbers[0])%int(numbers[1])%(int(numbers[0])//int(numbers[1]))<=(int(numbers[2])-int(numbers[1]))*(int(numbers[0])//int(numbers[1])-int(numbers[0])//int(numbers[2]))\nfor i in range(0,int(input())):\n    print('Yes' if possible(input().split(' ')) else 'No')\n", "# https://codeforces.com/problemset/problem/397/B\nimport sys\nsys.setrecursionlimit(1500)\n\ninst_num = int(input())\n\n#reading data\nn = 0\nl = 0\nr = 0\n\ndef payment_possible(total, l, r):\n    max_coins = int(total/l)\n    if r * max_coins >= total:\n        return True\n    else:\n        return False\n        \n\n\n\n    if total < coins[0]:\n        return False\n    return False\n\nfor i in range(0, inst_num):\n    line_data = input().split()\n    n = int(line_data[0])\n    l = int(line_data[1])\n    r = int(line_data[2])\n\n    if n > 0 and l == 1:\n        print(\"Yes\")\n        continue\n    if n >= l and n <= r:\n        print(\"Yes\")\n        continue\n\n    if payment_possible(n, l, r):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\"\"\"\n    if sum > 0 and l == 1:\n        return True\n    if sum >= l and sum <= r:\n        return True\n    if sum == 0:\n        return True\n    if sum > 0 and r < l:\n        return False\n\n    new_sum = sum - (r * int(sum / r))\n    print(new_sum, r)\n    r -= 1\n    return payment_possible(new_sum, l, r)\n\"\"\"", "for i in range(int(input())):\n    n, l, r = map(int, input().split())\n    if n % l <= (n // l) * (r - l):\n        print('Yes')\n    else:\n        print('No')", "def possible(numbers):\n    return int(numbers[0]) // int(numbers[1]) != 0 and int(numbers[0]) % int(numbers[1]) // (int(numbers[0]) // int(numbers[1])) <= int(numbers[2]) - int(numbers[1]) and int(numbers[0]) % int(numbers[1]) % int(numbers[0]) // int(numbers[1]) + int(numbers[0]) % int(numbers[1]) % (int(numbers[0]) // int(numbers[1])) <= (int(numbers[2]) - int(numbers[1])) * (int(numbers[0]) // int(numbers[1]) - int(numbers[0]) // int(numbers[2]))\n\n\nfor i in range(0, int(input())):\n    print('Yes' if possible(input().split(' ')) else 'No')\n", "for i in range(int(input())):\n\tn,l,r = map(int,input().split())\n\tprint('No') if (n//l)<n/r else print('Yes')", "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        for _ in range(self.t):\n            self.queries.append([int(x) for x in input().split(\" \")])\n\n    def process_task(self):\n        res = []\n        for query in self.queries:\n            k = query[0] // query[1]\n            res.append(\"Yes\" if k * query[2] >= query[0] else \"No\")\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()"]