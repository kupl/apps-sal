["n = input()\ns = [int(x) for x in input().split(' ')]\ng = input()\nA = 0\nB = 0\nfor i in range(len(g)):\n\tif g[i] == 'A':\n\t\tA += s[i]\n\telse:\n\t\tB += s[i]\n\nstartA, startB = A, B\nmaximum = B\n\nfor i in range(len(g)):\n\tif g[i] == 'A':\n\t\tA -= s[i]\n\t\tB += s[i]\n\telse:\n\t\tA += s[i]\n\t\tB -= s[i]\n\tif B > maximum:\n\t\tmaximum = B\n\nA, B = startA, startB\n\nfor i in reversed(range(len(g))):\n\tif g[i] == 'A':\n\t\tA -= s[i]\n\t\tB += s[i]\n\telse:\n\t\tA += s[i]\n\t\tB -= s[i]\n\tif B > maximum:\n\t\tmaximum = B\n\nprint(maximum)", "read = lambda: list(map(int, input().split()))\nn = int(input())\np = list(read())\na = [{'B': 1, 'A': 0}[i] for i in input()]\ncur = sum(p[i] for i in range(n) if a[i])\nans = cur\nb = a[:]\nfor i in range(n):\n    b[i] = int(not a[i])\n    if b[i]: cur += p[i]\n    else: cur -= p[i]\n    ans = max(ans, cur)\ncur = sum(p[i] for i in range(n) if a[i])\nb = a[:]\nfor i in range(n - 1, -1, -1):\n    b[i] = int(not a[i])\n    if b[i]: cur += p[i]\n    else: cur -= p[i]\n    ans = max(ans, cur)\nprint(ans)\n", "n = int(input())\nstrength = list(map(int, input().split()))\npieces = input()\n\nbob = 0\n\nfor pos, p in enumerate(pieces):\n    if p == \"B\":\n        bob += strength[pos]\n\n\nbest_flip = 0\ncur_flip = 0\n\nfor st, p in zip(strength, pieces):\n    if p == \"A\":\n        cur_flip += st\n    else:\n        cur_flip -= st\n\n    best_flip = max(best_flip, cur_flip)\n\ncur_flip = 0\nfor st, p in zip(reversed(strength), reversed(pieces)):\n    if p == \"A\":\n        cur_flip += st\n    else:\n        cur_flip -= st\n\n    best_flip = max(best_flip, cur_flip)\n\nprint(bob + best_flip)", "from itertools import accumulate\nimport math\n\nn = int(input())\np = [int(x) for x in input().split()]\nS1 = sum(p)\nd = [x == 'A' for x in input()]\nfor i in range(n):\n    if d[i]: p[i] = -p[i]\nprefix = list(accumulate([0] + p))\nS = prefix[-1]\nm, M = min(prefix), max(prefix)\nprint((S1 + max(S - 2*m, 2*M - S)) // 2)\n", "n = int(input())\npi = list(map(int,input().split()))\nab = input()\n\nnumi = [0]*n\nnumi2 = [0]*n\nif ab[0] == \"B\":\n    numi[0] = pi[0]\nelse:\n    numi2[0] = pi[0]\n    \nfor i in range(1,n):\n    if ab[i] == \"B\":\n        numi[i] = numi[i-1] + pi[i]\n        numi2[i] = numi2[i-1]\n    else:\n        numi2[i] = numi2[i-1] + pi[i]\n        numi[i] = numi[i-1]\nn2 = n-1\nmaxi = numi[n2] \nfor i in range(n):\n    maxi = max(maxi,numi[n2] - numi[i] + numi2[i])\nfor i in range(n-2,-1,-1):\n    maxi = max(maxi,numi[i] + numi2[n2] - numi2[i])\nprint(maxi)\n", "n = int(input())\np = list(map(int, input().split()))\nl = input()\nchange = 0\nmax_change = 0\ninit_str = 0\nfor i in range(len(l)):\n    if l[i] == 'A':\n        change += p[i]\n    else:\n        change -= p[i]\n        init_str += p[i]\n    if max_change < change:\n        max_change = change\nmax_change_back = 0\nchange = 0\nfor i in range(len(l) - 1, -1, -1):\n    if l[i] == 'A':\n        change += p[i]\n    else:\n        change -= p[i]\n    if max_change_back < change:\n        max_change_back = change\nprint(max(max_change_back, max_change) + init_str)\n", "n = int(input())\nprices = list(map(int, input().split()))\nwho = input()\nbasic = 0\nfor i in range(len(who)):\n    if who[i] == \"B\":\n        basic += prices[i]\nmax = basic\nnow = basic\nfor i in range(len(who)):\n    if who[i] == \"A\":\n        now += prices[i]\n    else:\n        now -= prices[i]\n    if now > max:\n        max = now\nnow = basic\nfor i in range(len(who) - 1, -1, -1):\n    if who[i] == \"A\":\n        now += prices[i]\n    else:\n        now -= prices[i]\n    if now > max:\n        max = now\nprint(max)", "import collections\nimport math\n\n#n, p = map(int, input().split())\nn = int(input())\np = list(map(int, input().split()))\ns = input()\n\ndef solve(p, s):\n    a, b = [0] * n, [0] * n\n    m = 0\n    if s[0] == 'B':\n        b[0] = p[0]\n        m += p[0]\n    else:\n        a[0] = p[0]\n    for i in range(1, n):\n        if s[i] == 'B':\n            b[i] += p[i]\n            m += p[i]\n        else:\n            a[i] += p[i]\n        a[i] += a[i - 1]\n        b[i] += b[i - 1]\n    ans = m\n    for i in range(n):\n        if m - b[i] + a[i] > ans:\n            ans = m - b[i] + a[i]\n    return ans\nprint(max(solve(p, s), solve(p[::-1], s[::-1])))", "n = int(input())\nps = list(map(int, input().split()))\nqs = input()\n\nB = 0\nfor i in range(n):\n    if qs[i] == 'B':\n        B += ps[i]\n\nmaxi = B\nb = B\nfor i in range(n):\n    if qs[i] == 'A':\n        b += ps[i]\n    elif qs[i] == 'B':\n        b -= ps[i]\n    maxi = max(maxi, b)\n\nb = B\nfor i in range(n-1, -1, -1):\n    if qs[i] == 'A':\n        b += ps[i]\n    elif qs[i] == 'B':\n        b -= ps[i]\n    maxi = max(maxi, b)\n\nprint(maxi)\n", "def cnt(step):\n    temp_total, ans = total, 0\n    for i in range(N)[::step]:\n        if chars[i] == 'A':\n            temp_total += strengths[i]\n        else:\n            temp_total -= strengths[i]\n        ans = max(temp_total, ans)\n    return ans\n\nN = int(input())\nstrengths = [int(_) for _ in input().split()]\nchars = list(input())\n\n\ntotal = 0\nfor i, c in enumerate(chars):\n    if c == 'B':\n        total += strengths[i]\n\nprint(max([total, cnt(1), cnt(-1)]))", "#!/usr/bin/env python3\n\nN = int(input())\narr = list(map(int, input().split()))\nteams = input()\n\ninitial = sum(arr[i] for i in range(N) if teams[i] == 'B')\nbest = initial\n\n# prefixes\ncur = initial\nfor i in range(N):\n    if teams[i] == 'B':\n        cur -= arr[i]\n    else:\n        cur += arr[i]\n        if cur > best:\n            best = cur\n\n# suffixes\ncur = initial\nfor i in range(N-1, -1, -1):\n    if teams[i] == 'B':\n        cur -= arr[i]\n    else:\n        cur += arr[i]\n        if cur > best:\n            best = cur\n\nprint(best)\n", "n = int(input())\nA = list(map(int, input().split()))\nb = input()\nans = 0\nper = 0\nstart = 0\nfor i in range(n):\n    if b[i] == 'B':\n        start += A[i]\nfor i in range(n):\n    if b[i] == 'A':\n        per += A[i]\n    else:\n        per -= A[i]\n    ans = max(per, ans)\n\nper = 0\nfor i in range(n-1, -1,-1):\n    if b[i] == 'A':\n        per += A[i]\n    else:\n        per -= A[i]\n    ans = max(per, ans)\nprint(start+ans)", "3\n\nn = int(input())\nstrength = [int(i) for i in input().split()]\ns = input()\n\ntotal = 0\nfor i in range(n):\n\tif s[i] == 'B':\n\t\ttotal += strength[i]\nprefix = [0]*n\nsuffix = [0]*n\nfor i in range(n):\n\tif s[i] == 'A':\n\t\tif i == 0:\n\t\t\tprefix[i] = 0 + strength[i]\n\t\telse:\n\t\t\tprefix[i] = prefix[i-1] + strength[i]\n\telse:\n\t\tif i == 0:\n\t\t\tprefix[i] = 0 - strength[i]\n\t\telse:\n\t\t\tprefix[i] = prefix[i-1] - strength[i]\n\nfor i in range(n-1, -1, -1):\n\tif s[i] == 'A':\n\t\tif i == n-1:\n\t\t\tsuffix[i] = 0 + strength[i]\n\t\telse:\n\t\t\tsuffix[i] = suffix[i+1] + strength[i]\n\telse:\n\t\tif i == n-1:\n\t\t\tsuffix[i] = 0 - strength[i]\n\t\telse:\n\t\t\tsuffix[i] = suffix[i+1] - strength[i]\nx = 0\nfor i in range(n):\n\tif prefix[i] > x:\n\t\tx = prefix[i]\nfor i in range(n):\n\tif suffix[i] > x:\n\t\tx = suffix[i]\n#print(str(total))\n#print(str(x))\ntotal += x\nprint(str(total))\n", "n = int(input())\npower = list(map(int, input().split()))\ns = input()\ncnt = 0\nfor i in range(n):\n    if s[i] == 'B':\n        cnt += power[i]\nans = cnt\nk = cnt\nfor i in range(n):\n    if s[i] == 'B':\n        k -= power[i]\n    else:\n        k += power[i]\n    ans = max(ans, k)\n    \nk = cnt\nfor i in range(n - 1, -1, -1):\n    if s[i] == 'B':\n        k -= power[i]\n    else:\n        k += power[i]\n    ans = max(ans, k)\nprint(ans)", "n = int(input())\npower = list(map(int, input().split()))\ns = input()\ncnt = 0\nfor i in range(n):\n    if s[i] == 'B':\n        cnt += power[i]\nans = cnt\nk = cnt\nfor i in range(n):\n    if s[i] == 'B':\n        k -= power[i]\n    else:\n        k += power[i]\n    ans = max(ans, k)\n    \nk = cnt\nfor i in range(n - 1, -1, -1):\n    if s[i] == 'B':\n        k -= power[i]\n    else:\n        k += power[i]\n    ans = max(ans, k)\nprint(ans)", "n = int(input())\nP = list(map(int, input().split()))\nS = list(input())\na_sum = 0\nb_sum = 0\nfor i in range(n):\n    if S[i] == 'A':\n        a_sum += P[i]\n    else:\n        b_sum += P[i]\n\nmax_b = b_sum\nb_sum_copy = b_sum\nfor i in range(n):\n    if S[i] == 'A':\n        b_sum += P[i]\n    else:\n        b_sum -= P[i]\n    max_b = max(max_b, b_sum)\n\nb_sum = b_sum_copy\nfor i in range(n-1,-1,-1):\n    if S[i] == 'A':\n        b_sum += P[i]\n    else:\n        b_sum -= P[i]\n    max_b = max(max_b, b_sum)\nprint(max_b)", "n = int(input())\np = [int(_) for _ in input().split()]\ns = input()\nans = 0\nfor i in range(n):\n    if s[i] == 'B':\n        ans += p[i]\ntmp = 0\nmx = 0\nfor i in range(n):\n    tmp += p[i] if s[i] == 'A' else -p[i]\n    mx = max(tmp, mx)\ntmp = 0\nfor i in range(n)[::-1]:\n    tmp += p[i] if s[i] == 'A' else -p[i]\n    mx = max(tmp, mx)\nans += mx\nprint(ans)\n", "from sys import stdin\nimport operator\n\nN = int(stdin.readline())\n\np = list(map(int, stdin.readline().strip().split(\" \")))\nteams = list([1 if x == \"B\" else -1 for x in stdin.readline().strip()])\n\nvalues = list(map(operator.mul, p, teams))\n\nstart = sum([x for x in values if max(x, 0)])\n# print(start)\n\ntotal = start\nbest = start\nfor i in values:\n\ttotal -= i\n\tbest = max(total, best)\n\ntotal = start\nfor i in reversed(values):\n\ttotal -= i\n\tbest = max(total, best)\n\n# print(p, teams, values, best)\nprint(best)\n", "power = 0\n\nn = int(input())\npowers = [ int(x) for x in (input().split(' ')) ]\nalisa_move = input()\n\n\n\ndef power_at(i,powers):\n    p = powers[i]\n    return p\n    \n\n\nmove = list(alisa_move)\nmove1 = []\nmove1.extend(reversed(list(alisa_move)))\n\np_max = 0\nfor i in range(0,n):\n    if move[i] == 'B':\n        p_max+=power_at(i,powers)\n\n\np_temp = p_max\nfor i in range(0,n):\n    if move[i] == 'A':\n        move[i] = 'B'\n        p_temp += power_at(i,powers)\n        if (p_max < p_temp):\n            p_max = p_temp\n    elif move[i] == 'B':\n        move[i] = 'A'\n        p_temp -= power_at(i,powers)\n        \n\npowers1=[]\npowers1.extend(reversed(powers))\n\n\n\np_temp=0\nfor i in range(0,n):\n    if move1[i] == 'B':\n        p_temp+=power_at(i,powers1)\n\n\n\nfor i in range(0,n):\n    if move1[i] == 'A':\n        move1[i] = 'B'\n        p_temp += power_at(i,powers1)\n        if (p_max < p_temp):\n            p_max = p_temp\n    elif move1[i] == 'B':\n        move1[i] = 'A'\n        p_temp -= power_at(i,powers1)\n            \nprint(p_max)", "n = input()\ns = [int(x) for x in input().split(' ')]\ng = input()\nA = 0\nB = 0\nfor i in range(len(g)):\n    if g[i] == 'A':\n        A += s[i]\n    else:\n        B += s[i]\n\nstartA, startB = A, B\nmaximum = B\n\nfor i in range(len(g)):\n    if g[i] == 'A':\n        A -= s[i]\n        B += s[i]\n    else:\n        A += s[i]\n        B -= s[i]\n    if B > maximum:\n        maximum = B\n\nA, B = startA, startB\n\nfor i in reversed(range(len(g))):\n    if g[i] == 'A':\n        A -= s[i]\n        B += s[i]\n    else:\n        A += s[i]\n        B -= s[i]\n    if B > maximum:\n        maximum = B\n\nprint(maximum)", "n = int(input())\nP = list(map(int, input().split()))\ns = input()\nres = sum(P[i] for i in range(n) if s[i] == 'B')\nmaxdiff = 0\nsuma = 0\nsumb = 0\nfor i in range(n):\n    if(s[i] == 'A'):\n        suma += P[i]\n    else:sumb += P[i]\n    if(suma - sumb > maxdiff):\n        maxdiff = suma - sumb\n\nsuma = 0\nsumb = 0\nfor i in range(n)[::-1]:\n    if(s[i] == 'A'):\n        suma += P[i]\n    else:sumb += P[i]\n    if(suma - sumb > maxdiff):\n        maxdiff = suma - sumb\n\nprint(res + maxdiff)\n", "import sys\nimport math\n# sys.stdin = open('input.txt')\n# sys.stdout = open('output.txt', 'w')\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input()\n    prefa = [0] * n\n    prefb = [0] * n\n    for i in range(n):\n        if i != 0:\n            prefa[i] = prefa[i - 1]\n            prefb[i] = prefb[i - 1]\n        if s[i] == 'A':\n            prefa[i] += p[i]\n        else:\n            prefb[i] += p[i]\n    suffa = [0] * n\n    suffb = [0] * n\n    for i in reversed(range(n)):\n        if i != n - 1:\n            suffa[i] = suffa[i + 1]\n            suffb[i] = suffb[i + 1]\n        if s[i] == 'A':\n            suffa[i] += p[i]\n        else:\n            suffb[i] += p[i]\n    maxa = suffb[0]\n    for i in range(n):\n        t1 = prefa[i]\n        if i != n - 1:\n            t1 += suffb[i + 1]\n        t2 = suffa[i]\n        if i != 0:\n            t2 += prefb[i - 1]\n        maxa = max([maxa, t1, t2])\n    print(maxa)\n\nmain()", "n=int(input())\np=list(map(int,input().split()))\ns=input()\nmaxi=0\ntemp=0\nlocal=-1\nfor i in range(n):\n    if s[i]=='A':\n        temp+=p[i]\n    else:\n        temp-=p[i]\n    if temp>maxi:\n        local=i\n        maxi=temp\nans=0\n\nfor i in range(local+1):\n    if s[i]=='A':\n        ans+=p[i]\n\n\nfor i in range(local+1,n):\n    if s[i]=='B':\n        ans+=p[i]\n\nmaxi=0\ntemp=0\nlocal=-1\np=list(reversed(p))\ns=s[::-1]\nfor i in range(n):\n    if s[i]=='A':\n        temp+=p[i]\n    else:\n        temp-=p[i]\n    if temp>maxi:\n        local=i\n        maxi=temp\nans1=0\nfor i in range(local+1):\n    if s[i]=='A':\n        ans1+=p[i]\nfor i in range(local+1,n):\n    if s[i]=='B':\n        ans1+=p[i]\n\nprint(max(ans,ans1))\n", "n = int(input())\npowers = [int(n) for n in  input().split()]\nmarks = input()\nBob_power = sum([powers[i] for i in range(n) if marks[i] == 'B'])\nmax_Bob_power = Bob_power\nstart_Bob_power = Bob_power\nfor i in range(n):\n    Bob_power += powers[i]*(1 if marks[i] == 'A' else -1)\n    if max_Bob_power < Bob_power:\n        max_Bob_power = Bob_power\nBob_power = start_Bob_power\nfor i in range(1, n + 1):\n    Bob_power += powers[-i]*(1 if marks[-i] == 'A' else -1)\n    if max_Bob_power < Bob_power:\n        max_Bob_power = Bob_power\nprint(max_Bob_power)", "def main():\n    input()\n    pp = list(map(int, input().split()))\n    mask = [c == 'B' for c in input()]\n    s = t = sum(p for p, m in zip(pp, mask) if m)\n    res = [s]\n    for p, m in zip(pp, mask):\n        if m:\n            s -= p\n        else:\n            s += p\n            res.append(s)\n    pp.reverse()\n    mask.reverse()\n    for p, m in zip(pp, mask):\n        if m:\n            t -= p\n        else:\n            t += p\n            res.append(t)\n    print(max(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]