["k=int(input())\na=0\nb=1\nfor i in range(k):\n  a+=b\n  print(a)\n  if b<(a+b)/sum(map(int,str(a+b))):\n    b*=10", "def S(n):\n    return sum(map(int, str(n)))\n\n\nK = int(input())\n\nx = 1\nd = 1\nwhile K > 0:\n    if S(x) * d < x:\n        x += 9 * d\n        d *= 10\n    else:\n        print(x)\n        x += d\n        K -= 1", "K = int(input())\n\n\ndef digit_sum(s):\n    return sum([int(i) for i in str(s)])\n\n\ndef f(n):\n    n = str(n)\n    f_min, f_ans = float('inf'), -1\n    for i in range(len(n)):  # \u4e0a\u304b\u3089\u4f55\u6841\u76ee\u3092\u3044\u3058\u308b\u304b\n        for x in range(int(n[i]), 10):\n            s = n[:i] + str(x) + '9' * (len(n) - i - 1)\n            if f_min > int(s) / digit_sum(s):\n                f_min = int(s) / digit_sum(s)\n                f_ans = int(s)\n    return f_ans\n\n\nans = [1]\nfor k in range(K - 1):\n    ans.append(f(ans[-1] + 1))\n\nprint(*ans, sep='\\n')\n", "def cal(n):\n    m = n\n    ret = 0\n    while n != 0:\n        ret += n % 10\n        n //= 10\n    return m/ret\n\n# n\u4ee5\u4e0a\u3067 s(n) \u304c\u6700\u5c0f\u3068\u306a\u308b\u6574\u6570\u5024\ndef f(n):\n    cand = []\n    s = str(n)\n    for i in range(len(s)-1,-1,-1):\n        if s[i] == \"9\":\n            continue\n        for j in range(int(s[i]), 10):\n            t = int(s[:i] + str(j) + s[i+1:])\n            cand += [ t ]\n        s = s[:i] + \"9\" + s[i+1:]\n\n    ret = n\n    for x in cand:\n        if cal(x) < cal(ret):\n            ret = x\n    return ret \n\n\nk = int(input())\nans = 1\n\nfor _ in range(k):\n    print(ans)\n    ans = f(ans+1)\n", "k = int(input())\n\ncnt = 0\nstep = 1\nbase = 1\ntail = \"\"\nnow = 0\ndef f(x):\n    s = list(str(x))\n    return sum([int(i) for i in s])\nwhile 1:\n    now += step\n    if now > step*f(now):\n        now -= step\n        step *= 10\n    else:\n        cnt += 1\n        print(now)\n        if cnt == k:\n            return\n     \n", "K = int(input())\n\n\ndef f(n):\n    return n / sum([int(s) for s in str(n)])\n\n\nans = [1]\nfor k in range(K - 1):\n    min_f_val, next_snuke = float('inf'), None\n    n = str(ans[-1] + 1)\n\n    for i in range(len(n)):\n        for x in range(int(n[i]), 10):\n            X = n[:i] + str(x) + '9' * (len(n) - i - 1)\n            f_val = f(int(X))\n\n            if f_val < min_f_val:\n                next_snuke = int(X)\n                min_f_val = f_val\n\n    ans.append(next_snuke)\n\nprint(*ans, sep='\\n')\n", "#!/usr/bin/env python3\n\ndef main():\n    K = int(input())\n\n    l = []\n    for i in range(1, 1000):\n        l.append(i)\n    for k in range(1, 13):\n        n0 = 10 ** k\n        for i in range(100, 1000):\n            l.append(i * n0 + n0 - 1)\n\n    r = []\n    for n in l:\n        sn = 0\n        d = n\n        while 0 < d:\n            d, m = int(d / 10), d % 10\n            sn += m\n        r.append(n / sn)\n\n    min_r = r[-1]\n    for i in range(len(r) - 2, -1, -1):\n        if min_r < r[i]:\n            r.pop(i)\n            l.pop(i)\n        else:\n            min_r = r[i]\n\n    for i in range(K):\n        print((l[i]))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "K = int(input())\nsnuke = [1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 29, 39, 49, 59, 69, 79, 89, 99, 199, 299, 399, 499, 599, 699, 799, 899, 999, 1099, 1199, 1299, 1399, 1499, 1599, 1699, 1799, 1899, 1999, 2999, 3999, 4999, 5999, 6999, 7999, 8999, 9999, 10999, 11999, 12999, 13999, 14999, 15999, 16999, 17999, 18999, 19999, 20999, 21999, 22999, 23999, 24999, 25999, 26999, 27999, 28999, 29999, 39999, 49999, 59999, 69999, 79999, 89999, 99999, 109999, 119999, 129999, 139999, 149999, 159999, 169999, 179999, 189999, 199999, 209999, 219999, 229999, 239999, 249999, 259999, 269999, 279999, 289999, 299999, 309999, 319999, 329999, 339999, 349999, 359999, 369999, 379999, 389999, 399999, 499999, 599999, 699999, 799999, 899999, 999999, 1099999, 1199999, 1299999, 1399999, 1499999, 1599999, 1699999, 1799999, 1899999, 1999999, 2099999, 2199999, 2299999, 2399999, 2499999, 2599999, 2699999, 2799999, 2899999, 2999999, 3099999, 3199999, 3299999, 3399999, 3499999, 3599999, 3699999, 3799999, 3899999, 3999999, 4099999, 4199999, 4299999, 4399999, 4499999, 4599999, 4699999, 4799999, 4899999, 4999999, 5999999, 6999999, 7999999, 8999999, 9999999, 10999999, 11999999, 12999999, 13999999, 14999999, 15999999, 16999999, 17999999, 18999999, 19999999, 20999999, 21999999, 22999999, 23999999, 24999999, 25999999, 26999999, 27999999, 28999999, 29999999, 30999999, 31999999, 32999999, 33999999, 34999999, 35999999, 36999999, 37999999, 38999999, 39999999, 40999999, 41999999, 42999999, 43999999, 44999999, 45999999, 46999999, 47999999, 48999999, 49999999, 50999999, 51999999, 52999999, 53999999, 54999999, 55999999, 56999999, 57999999, 58999999, 59999999, 69999999, 79999999, 89999999, 99999999, 109999999, 119999999, 129999999, 139999999, 149999999, 159999999, 169999999, 179999999, 189999999, 199999999, 209999999, 219999999, 229999999, 239999999, 249999999, 259999999, 269999999, 279999999, 289999999, 299999999, 309999999, 319999999, 329999999, 339999999, 349999999, 359999999, 369999999, 379999999, 389999999, 399999999, 409999999, 419999999, 429999999, 439999999, 449999999, 459999999, 469999999, 479999999, 489999999, 499999999, 509999999, 519999999, 529999999, 539999999, 549999999, 559999999, 569999999, 579999999, 589999999, 599999999, 609999999, 619999999, 629999999, 639999999, 649999999, 659999999, 669999999, 679999999, 689999999, 699999999, 799999999, 899999999, 999999999, 1099999999, 1199999999, 1299999999, 1399999999, 1499999999, 1599999999, 1699999999, 1799999999, 1899999999, 1999999999, 2099999999, 2199999999, 2299999999, 2399999999, 2499999999, 2599999999, 2699999999, 2799999999, 2899999999, 2999999999, 3099999999, 3199999999, 3299999999, 3399999999, 3499999999, 3599999999, 3699999999, 3799999999, 3899999999, 3999999999, 4099999999, 4199999999, 4299999999, 4399999999, 4499999999, 4599999999, 4699999999, 4799999999, 4899999999, 4999999999, 5099999999, 5199999999, 5299999999, 5399999999, 5499999999, 5599999999, 5699999999, 5799999999, 5899999999, 5999999999, 6099999999, 6199999999, 6299999999, 6399999999, 6499999999, 6599999999, 6699999999, 6799999999, 6899999999, 6999999999, 7099999999, 7199999999, 7299999999, 7399999999, 7499999999, 7599999999, 7699999999, 7799999999, 7899999999, 7999999999, 8999999999, 9999999999, 10999999999, 11999999999, 12999999999, 13999999999, 14999999999, 15999999999, 16999999999, 17999999999, 18999999999, 19999999999, 20999999999, 21999999999, 22999999999, 23999999999, 24999999999, 25999999999, 26999999999, 27999999999, 28999999999, 29999999999, 30999999999, 31999999999, 32999999999, 33999999999, 34999999999, 35999999999, 36999999999, 37999999999, 38999999999, 39999999999, 40999999999, 41999999999, 42999999999, 43999999999, 44999999999, 45999999999, 46999999999, 47999999999, 48999999999, 49999999999, 50999999999, 51999999999, 52999999999, 53999999999, 54999999999, 55999999999, 56999999999, 57999999999, 58999999999, 59999999999, 60999999999, 61999999999, 62999999999, 63999999999, 64999999999, 65999999999, 66999999999, 67999999999, 68999999999, 69999999999, 70999999999, 71999999999, 72999999999, 73999999999, 74999999999, 75999999999, 76999999999, 77999999999, 78999999999, 79999999999, 80999999999, 81999999999, 82999999999, 83999999999, 84999999999, 85999999999, 86999999999, 87999999999, 88999999999, 89999999999, 99999999999, 109999999999, 119999999999, 129999999999, 139999999999, 149999999999, 159999999999, 169999999999, 179999999999, 189999999999, 199999999999, 209999999999, 219999999999, 229999999999, 239999999999, 249999999999, 259999999999, 269999999999, 279999999999, 289999999999, 299999999999, 309999999999, 319999999999, 329999999999, 339999999999, 349999999999, 359999999999, 369999999999, 379999999999, 389999999999, 399999999999, 409999999999, 419999999999, 429999999999, 439999999999, 449999999999, 459999999999, 469999999999, 479999999999, 489999999999, 499999999999, 509999999999, 519999999999, 529999999999, 539999999999, 549999999999, 559999999999, 569999999999, 579999999999, 589999999999, 599999999999, 609999999999, 619999999999, 629999999999, 639999999999, 649999999999, 659999999999, 669999999999, 679999999999, 689999999999, 699999999999, 709999999999, 719999999999, 729999999999, 739999999999, 749999999999, 759999999999, 769999999999, 779999999999, 789999999999, 799999999999, 809999999999, 819999999999, 829999999999, 839999999999, 849999999999, 859999999999, 869999999999, 879999999999, 889999999999, 899999999999, 909999999999, 919999999999, 929999999999, 939999999999, 949999999999, 959999999999, 969999999999, 979999999999, 989999999999, 999999999999, 1099999999999, 1199999999999, 1299999999999, 1399999999999, 1499999999999, 1599999999999, 1699999999999, 1799999999999, 1899999999999, 1999999999999, 2099999999999, 2199999999999, 2299999999999, 2399999999999, 2499999999999, 2599999999999, 2699999999999, 2799999999999, 2899999999999, 2999999999999, 3099999999999, 3199999999999, 3299999999999, 3399999999999, 3499999999999, 3599999999999, 3699999999999, 3799999999999, 3899999999999, 3999999999999, 4099999999999, 4199999999999, 4299999999999, 4399999999999, 4499999999999, 4599999999999, 4699999999999, 4799999999999, 4899999999999, 4999999999999, 5099999999999, 5199999999999, 5299999999999, 5399999999999, 5499999999999, 5599999999999, 5699999999999, 5799999999999, 5899999999999, 5999999999999, 6099999999999, 6199999999999, 6299999999999, 6399999999999, 6499999999999, 6599999999999, 6699999999999, 6799999999999, 6899999999999, 6999999999999, 7099999999999, 7199999999999, 7299999999999, 7399999999999, 7499999999999, 7599999999999, 7699999999999, 7799999999999, 7899999999999, 7999999999999, 8099999999999, 8199999999999, 8299999999999, 8399999999999, 8499999999999, 8599999999999, 8699999999999, 8799999999999, 8899999999999, 8999999999999, 9099999999999, 9199999999999, 9299999999999, 9399999999999, 9499999999999, 9599999999999, 9699999999999, 9799999999999, 9899999999999, 9999999999999, 10999999999999, 11999999999999, 12999999999999, 13999999999999, 14999999999999, 15999999999999, 16999999999999, 17999999999999, 18999999999999, 19999999999999, 20999999999999, 21999999999999, 22999999999999, 23999999999999, 24999999999999, 25999999999999, 26999999999999, 27999999999999, 28999999999999, 29999999999999, 30999999999999, 31999999999999, 32999999999999, 33999999999999, 34999999999999, 35999999999999, 36999999999999, 37999999999999, 38999999999999, 39999999999999, 40999999999999, 41999999999999, 42999999999999, 43999999999999, 44999999999999, 45999999999999, 46999999999999, 47999999999999, 48999999999999, 49999999999999, 50999999999999, 51999999999999, 52999999999999, 53999999999999, 54999999999999, 55999999999999, 56999999999999, 57999999999999, 58999999999999, 59999999999999, 60999999999999, 61999999999999, 62999999999999, 63999999999999, 64999999999999, 65999999999999, 66999999999999, 67999999999999, 68999999999999, 69999999999999, 70999999999999, 71999999999999, 72999999999999, 73999999999999, 74999999999999, 75999999999999, 76999999999999, 77999999999999, 78999999999999, 79999999999999, 80999999999999, 81999999999999, 82999999999999, 83999999999999, 84999999999999, 85999999999999, 86999999999999, 87999999999999, 88999999999999, 89999999999999, 90999999999999, 91999999999999, 92999999999999, 93999999999999, 94999999999999, 95999999999999, 96999999999999, 97999999999999, 98999999999999, 99999999999999, 100999999999999, 101999999999999, 102999999999999, 103999999999999, 104999999999999, 105999999999999, 106999999999999, 107999999999999, 108999999999999, 109999999999999, 119999999999999, 129999999999999, 139999999999999, 149999999999999, 159999999999999, 169999999999999, 179999999999999, 189999999999999, 199999999999999, 209999999999999, 219999999999999, 229999999999999, 239999999999999, 249999999999999, 259999999999999, 269999999999999, 279999999999999, 289999999999999, 299999999999999, 309999999999999, 319999999999999, 329999999999999, 339999999999999, 349999999999999, 359999999999999, 369999999999999, 379999999999999, 389999999999999, 399999999999999, 409999999999999, 419999999999999, 429999999999999, 439999999999999, 449999999999999, 459999999999999, 469999999999999, 479999999999999, 489999999999999, 499999999999999, 509999999999999, 519999999999999, 529999999999999, 539999999999999, 549999999999999, 559999999999999, 569999999999999, 579999999999999, 589999999999999, 599999999999999, 609999999999999, 619999999999999, 629999999999999, 639999999999999, 649999999999999, 659999999999999, 669999999999999, 679999999999999, 689999999999999, 699999999999999, 709999999999999, 719999999999999, 729999999999999, 739999999999999, 749999999999999, 759999999999999, 769999999999999, 779999999999999, 789999999999999, 799999999999999, 809999999999999, 819999999999999, 829999999999999, 839999999999999, 849999999999999, 859999999999999, 869999999999999, 879999999999999, 889999999999999, 899999999999999, 909999999999999, 919999999999999, 929999999999999, 939999999999999, 949999999999999, 959999999999999, 969999999999999, 979999999999999, 989999999999999, 999999999999999]\nfor k in range(K):\n    print((snuke[k]))\n", "#!/usr/bin/env python\n# coding: utf-8\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(input().split())\n\ndef rli():\n    return list(map(int, input().split()))\n\ndef calc(n):\n    s = sum(map(int, str(n)))\n    return n / s\n\ndef f(n):\n    ld = list(map(int, str(n)))\n    cand = []\n    for i in range(len(ld)-1):\n        d = len(ld)-1-i\n        ld[d] = 9\n        for i in range(1, 10):\n            if i < ld[d-1]:\n                continue\n            ld[d-1] = i\n            p = int(\"\".join(map(str, ld)))\n            cand.append((calc(p), p))\n    cand.sort()\n    return cand[0][1]\n\nMAX = 10**15\ndef main():\n    k = ri()\n    cand = list(range(1, 10))\n    n = 10\n    while True:\n        if n > MAX:\n            break\n        p = f(n)\n        cand.append(p)\n        n = p+1\n    print((\"\\n\".join(map(str, cand[:k]))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "t=1\ni=1\nl=int(input()) \nwhile l:\n  if t<i/sum(map(int,list(str(i)))):\n    i+=9*t\n    t*=10\n  else:\n    print(i)\n    i+=t\n    l-=1", "def f(n):\n    s=str(n)\n    return sum([int(s[i]) for i in range(len(s))])\n\nsunuke=[]\nfor i in range(16):\n    for j in range(1,500):\n        sunuke.append(j*(10**i)-1)\n\nsunuke=list(set(sunuke))\nsunuke.sort()\nsunuke.pop(0)\nL=len(sunuke)\n\ntmp1,tmp2=sunuke[L-1],f(sunuke[L-1])\nans=[sunuke[L-1]]\nfor i in range(len(sunuke)-2,-1,-1):\n    x=sunuke[i]\n    if x*tmp2<=tmp1*f(x):\n        ans.append(x)\n        tmp1,tmp2=x,f(x)\n\nans.sort()\n\n    \n\nfor i in range(int(input())):\n    print(ans[i])", "def R(x):\n    return x / sum(map(int, str(x)))\nK = int(input())\nD = 0\nl = 0\nfor i in range(K):\n    D += 10**l\n    print(D)\n    if 10**l < R(D+10**l):\n        l += 1", "# -*- coding: utf-8 -*-\n\n\"\"\"\n\u53c2\u8003\uff1ahttps://nuekodory.github.io/2018/06/24/AtCoder-ABC101-ARC-099-%E3%82%92-Python3-%E3%81%A7%E8%A7%A3%E3%81%8F/\n\u3000\u3000\u3000http://xxxasdfghjk999.hatenablog.jp/entry/2018/07/22/162323\n\u3000\u3000\u3000http://drken1215.hatenablog.com/entry/2018/06/24/010600\n\u3000\u3000\u3000http://phyllo-algo.hatenablog.com/entry/2018/06/24/160442\n\u30fb\u4e8b\u524d\u306b\u3044\u304f\u3064\u304b\u306e\u7bc4\u56f2\u3092\u8abf\u3079\u3066\u3001\u5019\u88dc\u306e\u6570\u304cabc9999....\u306e\u3042\u305f\u308a\u3060\u3051\u3060\u3068\u4e88\u6e2c\u3057\u3066\u304a\u304f\u3002\n\u30fb\u5019\u88dc\u306e\u5024\u3060\u3051\u306b\u7d5e\u3063\u3066\u6700\u5927\u5024\u304b\u3089\u4e0b\u304c\u3063\u3066\u3044\u304f\u3002\n\"\"\"\n\nK = int(input())\n\ndef make_snk(num):\n    s = str(num)\n    sm = 0\n    for c in s:\n        sm += int(c)\n    return num / sm\n\nsnk_list = []\nmn = float('inf')\nsuff = '999999999999'\n# \u5f8c\u308d\u306b\u4ed8\u3051\u308b9\u306e\u6570\u3092\u6e1b\u3089\u3057\u3066\u300110^15-1\u304b\u308910099\u307e\u3067\u3092\u4f5c\u308b\nfor i in range(11):\n    # 999\uff5e100\u307e\u3067\u30eb\u30fc\u30d7\n    for j in range(999, 99, -1):\n        j = int(str(j) + suff)\n        num = make_snk(j)\n        if num <= mn:\n            snk_list.append(j)\n            mn = num\n    suff = suff[:-1]\n# 9999\u4ee5\u4e0b\u306f\u666e\u901a\u306b\u5168\u90e8\u3084\u308b(\u5927\u3057\u305f\u5927\u304d\u3055\u3058\u3083\u306a\u3044\u306e\u3067)\nfor i in range(9999, 0, -1):\n    num = make_snk(i)\n    if num <= mn:\n        snk_list.append(i)\n        mn = num\nsnk_list.reverse()\nfor i in range(K):\n    print((snk_list[i]))\n", "serch_table = []\n\nfor i in range(100):\n    for j in range(1,1000):\n        x = str(j) + '9'*i\n        x = int(x)\n        serch_table.append(x)\n#print(serch_table)\n\nL = []\nfor i in serch_table:\n    l = [x for x in str(i)]\n    x = sum(map(int,l))\n    l = [i/x,i]\n    L.append(l)\nL= sorted(L)\nM = []\ntmp = -1\nfor i in L:\n    if tmp < i[1]:\n        M.append(i[1])\n        tmp = i[1]\n#print(M,len(serch_table ))\nN = int(input())\nfor i in range(N):\n    print((M[i]))\n", "import math\n\ndef s(n):\n    ret = 0\n\n    while n > 0:\n        ret += n % 10\n        n = n // 10\n        \n    return ret\n\ndef snuke(n):\n    candidate = []\n\n    for d in range(int(math.log(n, 10)) + 2):\n        x = n - (n % 10**d) + (10**d - 1)\n        candidate.append(x)\n    \n    min_value = candidate[0] / s(candidate[0])\n    ans = candidate[0]\n    for c in candidate[1:]:\n        tmp = c / s(c)\n        if tmp < min_value:\n            min_value = tmp\n            ans = c\n            \n    return ans\n\nK = int(input())\n\nN = 0\nfor i in range(K):\n    N = snuke(N + 1)\n    print(N)\n", "k = int(input())\n\ndef func(a):\n    s = 0\n    for i in str(a):\n        s += int(i)\n    return a/s\n\ncandidate_lst = []\nfor i in range(18):\n    for j in range(1, 150):\n         candidate_lst.append(int(str(j) + '9' * i))\ncandidate_lst = sorted(list(set(candidate_lst)))\n\ncount = 0\nindex = -1\nsnuke = 1\nwhile count < k:\n    min_snuke = 10**100\n    for m, i in enumerate(candidate_lst[index+1:]):\n        if i > 100*snuke:\n            break\n        po_snuke = func(i)\n        if min_snuke > po_snuke:\n            min_snuke = po_snuke\n            next_snuke = i\n            next_index = m\n    print(next_snuke)\n    snuke = next_snuke\n    index = index + next_index + 1\n    count += 1          ", "k = int(input())\n\ndef digit_sum(s):\n    return sum(map(int, list(s)))\n\ndef func1(s):\n    return int(s)/digit_sum(s)\n\ndef func2(n):\n    n = str(n)\n    fm, fa = float(\"inf\"), -1\n    for i in range(len(n)):\n        s = n[:i+1] + \"9\"*(len(n)-i-1)\n        if fm > func1(s):\n            fm = func1(s)\n            fa = int(s)\n    return fa\n\nn = 1\nfor _ in range(k):\n    print(n)\n    n = func2(n+1)\n\n\n", "import sys \n\nK = int(input())\n\nif K <= 0:\n    return\n\nstep = 1 \nsnuke = 1 \n\nwhile K > 0:\n    if step < snuke/sum(map(int, str(snuke))):\n        snuke += 9 * step\n        step *= 10\n    else:\n        print(snuke)\n        snuke += step\n        K -= 1", "def S(i):\n    ans = 0\n    while i // 10 > 0:\n        ans += i % 10\n        i //= 10\n    ans += i\n    return ans\n\nK = int(input())\nAns, count, N = [], 0, 1\nwhile count < K:\n    N2, Nd = N, 1\n    while N2//10 > 0:\n        Nd += 1\n        N2 //= 10\n    minX, X = N/S(N), N\n    for i in range(Nd+2):\n        x = (N//10**(i+1) + 1) * 10**(i+1) -1\n        if minX > x/S(x):\n            minX, X = x/S(x), x\n    Ans.append((minX, X))\n    count += 1\n    N = X+1\n\nfor i in range(K):\n    print(Ans[i][1])", "k=int(input())\nA=[]\nfor i in range(1,9):\n    A.append([i,1])\nnow=0\nfor i in range(15):\n    now+=9*10**i\n    for j in range(1000):\n        c=now+j*10**(i+1)\n        S=str(c)\n        cnt=0\n        for s in S:\n            cnt+=int(s)\n        A.append([c,c/cnt])\nA=list(reversed(sorted(A)))\nnow=0\nm=A[0][1]\nAns=[]\nfor a in A:\n    if a[0]==now:\n        continue\n    else:\n        now=a[0]\n        if a[1]<=m:\n            Ans.append(now)\n            m=a[1]\nAns=list(reversed(Ans))\nfor i in range(k):\n    print(Ans[i])", "# -*- coding: utf-8 -*-\nimport bisect\nimport heapq\nimport math\nimport random\nimport sys\nfrom collections import Counter, defaultdict\nfrom decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal\nfrom functools import lru_cache, reduce\nfrom itertools import combinations, combinations_with_replacement, product, permutations\n\nsys.setrecursionlimit(10000)\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_int_n():\n    return list(map(int, input().split()))\n\n\ndef read_float():\n    return float(input())\n\n\ndef read_float_n():\n    return list(map(float, input().split()))\n\n\ndef read_str():\n    return input()\n\n\ndef read_str_n():\n    return list(map(str, input().split()))\n\n\ndef error_print(*args):\n    print(*args, file=sys.stderr)\n\n\ndef mt(f):\n    import time\n\n    def wrap(*args, **kwargs):\n        s = time.time()\n        ret = f(*args, **kwargs)\n        e = time.time()\n\n        error_print(e - s, 'sec')\n        return ret\n\n    return wrap\n\n\ndef S(n):\n    s = 0\n    while n != 0:\n        s += n % 10\n        n //= 10\n    return s\n\n# @mt\ndef slv(K):\n    ans = [(i, i/S(i)) for i in range(1, 10)]\n    for i in range(16):\n        a = i\n        if a > 4:\n            a = 4\n        for j in range(1, 10**a):\n            b = (10**(i-a+1))*j + (10**(i-a+1)-1)\n            if b < 10**(i-1):\n                continue\n            s = S(b)\n            \n            while ans[-1][1] > b/s or ans[-1][0] == b:\n                (ans.pop())\n            ans.append((b, b/s))\n            # print(ans[-1])\n    # error_print(len(ans))\n    # for r in ans:\n    #     error_print(r)\n    error_print(len(ans))\n    \n    return '\\n'.join(map(str, map(lambda x: x[0], ans[:K])))\n\n\ndef main():\n    K = read_int()\n    print(slv(K))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def sunuke_sum(arg):\n    sum_digit = 0\n    for char in arg:\n        sum_digit += int(char)\n    return sum_digit\n\n\ninput_num = int(input())\n\nsunuke_dict = {}\n\nmin_sunuke_div = 10 ** 20\nfor d in reversed(range(1, 16)):\n    for n in reversed(range(10, 1000)):\n        i = n * (10 ** d) + (10 ** d - 1)\n        sunuke_div = i / sunuke_sum(str(i))\n        sunuke_dict[i] = sunuke_div\n\nfor i in reversed(range(1, 110)):\n    sunuke_div = i / sunuke_sum(str(i))\n    sunuke_dict[i] = sunuke_div\n\nsunuke_sorted = sorted(sunuke_dict.items())\nsunuke_list = []\n\nfor value, div_value in reversed(sunuke_sorted):\n    if min_sunuke_div >= div_value:\n        sunuke_list.append(value)\n        min_sunuke_div = div_value\n\nsunuke_list.reverse()\n\nfor i in range(0, input_num):\n    print(str(sunuke_list[i]))", "k = int(input())\n\ndef snuke(n):\n    s = sum(map(int, str(n)))\n    return n / s\n\ndigit = 0\nans = 1\nfor _ in range(k):\n    print(ans)\n    if snuke(ans + 10 ** digit) > snuke(ans + 10 ** (digit + 1)):\n        digit += 1\n    ans += 10 ** digit\n", "from math import log10\ndef nsn(N):\n    K = sum( list( map( int, list( str(N)))))\n    return N/K\n\ndef snuke(N):\n    k = int( log10(N))+1\n    s = N\n    now = nsn(N)\n    for d in range(k+1):\n        x = (10**(d+1))*(N//(10**(d+1)) + 1) - 1\n        y = nsn(x)\n        if y < now:\n            s = x\n            now = y\n    return s\n\nK = int( input())\nans = 1\nprint((1))\nfor i in range(K-1):\n    ans = snuke( ans + 1)\n    print(ans)\n\n", "from math import log10\ndef nsn(N):\n    K = sum( list( map( int, list( str(N)))))\n    return N/K\n\ndef snuke(N):\n    k = int( log10(N))+1\n    s = N\n    now = nsn(N)\n    for d in range(k+1):\n        x = (10**(d+1))*(N//(10**(d+1)) + 1) - 1\n        y = nsn(x)\n        if y < now:\n            s = x\n            now = y\n    return s\n\nK = int( input())\nans = 1\nprint((1))\nfor i in range(K-1):\n    ans = snuke( ans + 1)\n    print(ans)\n\n", "import sys\ninput = sys.stdin.readline\n\n\ndef s(n):\n    return sum(map(int, list(str(n))))\n\n\ndef f(x):\n    nines = max(0, len(str(x)) - 3)\n    base = 10**nines - 1\n    d = 10**nines\n    snuke = x\n    ratio = x / s(x)\n    candidate = base + (x-base+d-1) // d * d\n    for _ in range(150):\n        new_ratio = candidate / s(candidate)\n        if new_ratio < ratio:\n            snuke = candidate\n            ratio = new_ratio\n        candidate += d\n    return snuke\n\n\ndef main():\n    k = int(input())\n    snuke = 0\n    for _ in range(k):\n        snuke = f(snuke+1)\n        print(snuke)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "K = int(input())\n\ndef calc_sunuke(num):\n    st = str(num)\n    s_num = 0\n    for c in st:\n        s_num += int(c)\n    return num / s_num\n\ndef search_sunuke(num):\n    num_sunuke = calc_sunuke(num)\n    if num >= 100:\n        digits = len(str(num))\n        if digits < 12:\n            for i in range(count + 10**(digits-2), 10**digits, 10**(digits-2)):\n                if num_sunuke > calc_sunuke(i):\n                    return False\n            return True\n        else:\n            for i in range(count + 10**(digits-3), 10**digits, 10**(digits-3)):\n                if num_sunuke > calc_sunuke(i):\n                    return False\n            return True\n    else:\n        for i in range(count+1, 100):\n            if num_sunuke > calc_sunuke(i):\n                return False\n        return True\n\n\n\ncount = 1\nsunuke_num = 0\nwhile sunuke_num != K:\n    if search_sunuke(count):\n        print(count)\n        sunuke_num += 1\n    if count < 99:\n        count += 1\n    else:\n        count_str = str(count)\n        digits = len(count_str)\n        r_count = count\n        if digits < 12:\n            for c in count_str:\n                if c != '9':\n                    count += 10**(digits - 2)\n                    break\n            if r_count == count:\n                count += 10**(digits - 1)\n        else:\n            for c in count_str:\n                if c != '9':\n                    count += 10**(digits - 3)\n                    break\n            if r_count == count:\n                count += 10**(digits - 2)\n        \n\n", "def sum_digit(n):\n    n_str = str(n)\n    ans = 0\n    for dig in n_str:\n        ans += int(dig)\n    return ans\n\ndef snuke(n):\n    return n / sum_digit(n)\n\nK = int(input())\n\nans = 1\nprint(ans)\nfor i in range(K - 1):\n    s = len(str(ans))\n    x = snuke(ans)\n    L = [[ans + 10 ** k, snuke(ans + 10 ** k)] for k in range(s+1)]\n    L.sort(key = lambda x: x[1])\n    ans = L[0][0]\n    print(ans)\n", "def s(n):\n  return n / sum(map(int,str(n)))\n\nk = int(input())\n\nx = 1\ne = 0\ni = 0\n\nwhile i < k:\n  \n  tmp = (x + 1) * 10 ** e - 1\n  nxt = (x + 2) * 10 ** e - 1\n  \n  if s(tmp) <= s(nxt):\n    print(tmp)\n    x += 1\n    i += 1\n  else:\n    e += 1\n    x = (x + 1)//10", "k=int(input())\nans=[]\nfor i in range(1,10): #1\u6841\u306e\u6570\n  ans.append(str(i))\n  \nfor i in range(1,10): #2\u6841\u306e\u6570\n  ans.append(str(i)+'9')\n  \nfor i in range(1,10): #3\u6841\u306e\u6570\n  ans.append(str(i)+'99')\n  \nfor i in range(10): #4\u6841\u306e\u6570\n  ans.append('1'+str(i)+'99')\nfor i in range(2,10): #4\u6841\u306e\u6570\n  ans.append(str(i)+'999')\n  \nfor i in range(1,3): #5\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'999')\nfor i in range(3,10): #5\u6841\u306e\u6570\n  ans.append(str(i)+'9999')\n  \nfor i in range(1,4): #6\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'9999')\nfor i in range(4,10): #6\u6841\u306e\u6570\n  ans.append(str(i)+'99999')\n  \nfor i in range(1,5): #7\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'99999')\nfor i in range(5,10): #7\u6841\u306e\u6570\n  ans.append(str(i)+'999999')\n\nfor i in range(1,6): #8\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'999999')\nfor i in range(6,10): #8\u6841\u306e\u6570\n  ans.append(str(i)+'9999999')\n  \nfor i in range(1,7): #9\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'9999999')\nfor i in range(7,10): #9\u6841\u306e\u6570\n  ans.append(str(i)+'99999999')\n\nfor i in range(1,8): #10\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'99999999')\nfor i in range(8,10): #10\u6841\u306e\u6570\n  ans.append(str(i)+'999999999')\n\nfor i in range(1,9): #11\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'999999999')\nfor i in range(9,10): #11\u6841\u306e\u6570\n  ans.append(str(i)+'9999999999')\n  \nfor i in range(1,10): #12\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'9999999999')\nfor i in range(10,10): #12\u6841\u306e\u6570\n  ans.append(str(i)+'99999999999')\n\nfor i in range(1,10): #13\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'99999999999')\nfor i in range(10,10): #13\u6841\u306e\u6570\n  ans.append(str(i)+'999999999999')\n  \nfor i in range(1,10): #14\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'999999999999')\nfor i in range(10,10): #14\u6841\u306e\u6570\n  ans.append(str(i)+'9999999999999')\n\nfor i in range(10): #15\u6841\u306e\u6570\n  ans.append('10'+str(i)+'999999999999')\nfor i in range(1,10): #15\u6841\u306e\u6570\n  ans.append('1'+str(i)+'9999999999999')\nfor i in range(2,10): #15\u6841\u306e\u6570\n  for j in range(10):\n    ans.append(str(i)+str(j)+'9999999999999')\n  \nfor val in ans[:k]:\n  print(val)", "K = int(input())\n\ndef minSunuke(n) :  # n\u4ee5\u4e0a\u306e n/S(n) \u306e\u6700\u5c0f\u5024\n    sumDigit = sum(map(int, list(str(n))))\n    return n / sumDigit\n\ndigit = 0\nnow = 1\n\nfor i in range(K) :\n    print(now)\n    if minSunuke(now + 10**digit) > minSunuke(now + 10**(digit + 1)) :\n        digit += 1\n    now += 10**digit\n", "def snk_cal(i):\n    snk = i\n    i = str(i)\n    q = 0\n    for j in range(len(i)):\n        q += int(i[j])\n    snk /= q\n    return snk\n\nK = int(input())\nif K <= 9:\n    for i in range(K):\n        print((i+1))\nelse:\n    for i in range(9):\n        print((i+1))\n    K -= 9\n    snk = 9\n    while K > 0:\n        res = snk+1\n        d = len(str(res))\n        l = []\n        for i in range(d):\n            n = int(str(res)[:-i-1]+'9'*(i+1))\n            l.append(snk_cal(n))\n        i = l.index(min(l))\n        snk = int(str(res)[:-i-1]+'9'*(i+1))\n        print(snk)\n        K -= 1\n", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, log10\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nK = INT()\n\ndef S(n): # \u548c,n\u306f\u6587\u5b57\u5217\n\treturn sum([int(x) for x in list(n)])\n\ndef f(N):\n\tsunuke = []\n\tfor d in range(-1, int(log10(N)+1)):\n\t\tsunuke.append(10**(d+1) * (N//(10**(d+1))+1)-1)\n\tsunuke2 = [x/S(str(x)) for x in sunuke]\n\treturn sunuke[sunuke2.index(min(sunuke2))]\n\nN = 1\nfor _ in range(K):\n\tprint(N)\n\tN = f(N+1)\n", "k = int(input())\ncandili = []\nfor i in range(1, 1000):\n    candili.append(i)\n\ntmpli = []\nfor i in candili:\n    for j in range(1, 15):\n        tmpli.append(int(str(i) + \"9\" * j))\ntmpli = list(set(tmpli))\n\ntmp2li = []\nfor i in tmpli:\n    if i <= 10 ** 15:\n        tmp2li.append(i)\ncandili += tmp2li\ncandili = list(set(candili))\ncandili.sort()\n\ndef S(n):\n    return sum(int(i) for i in str(n))\n\nconli = []\n\nfor i in candili:\n    conli.append(i/S(i))\n\nansli = []\nfor i in range(len(conli)):\n    for j in range(i, len(conli)):\n        if conli[i] > conli[j]:\n            break\n    else:\n        ansli.append(candili[i])\n\nfor i in range(k):\n    print(ansli[i])", "K=int(input())\nD={}\nfor i in range(1,10**4):\n    for j in range(12):\n        Sunuke=str(i)+(\"9\"*j)\n        if len(Sunuke)<=15 and Sunuke not in D:\n            S=0\n            for k in range(len(Sunuke)):\n                S+=int(Sunuke[k])\n            D[int(Sunuke)]=S\nD=list(D.items())\nD.sort()\n#print(D[:10])\nimport bisect\n\nd=[10**16 for i in range(len(D))]\nd[0]=0\nans=[0 for i in range(len(D))]\nfor i in range(len(D)):\n    ans[bisect.bisect_right(d,D[i][0]/D[i][1])]=D[i][0]\n    d[bisect.bisect_right(d,D[i][0]/D[i][1])]=D[i][0]/D[i][1]\n    \n#print(ans[:50])\nANS=[]\nMAX=0\nfor i in range(len(ans)):\n    if ans[i]>MAX:\n        ANS.append(ans[i])\n        MAX=ans[i]\n#print(ANS[:100])\nfor i in range(K):\n    print((ANS[i]))\n#print(d[:10])\n", "K = int(input())\n\ndef S(n):\n    return sum(int(c) for c in str(n))\nd9 = 0\ncnt = 0\nupper = 1\nwhile cnt < K:\n    n = int(str(upper) + ('9' * d9))\n    if n <= S(n) * (10 ** d9):\n        print(n)\n        cnt += 1\n        upper += 1\n    else:\n        d9 += 1\n        upper //= 10\n", "#!/usr/bin/env python3\nfrom fractions import Fraction\nimport sys\n\n\ndef g():\n    i = 1\n    while True:\n        si = str(i)\n        ni = min({\n            int(si[:j] + \"9\" * (len(si) - j))\n            for j in range(len(si) + 1)\n        }, key=lambda a: (Fraction(a, sum(int(x) for x in str(a))), a))\n        yield ni\n        i = ni + 1\n\n\ndef solve(K: int):\n    it = g()\n    for i in range(K):\n        print((next(it)))\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    K = int(next(tokens))  # type: int\n    solve(K)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# -*- coding: utf-8 -*-\nk = int(input())\n\n\ndef snuke(n):\n    s = 0\n    for _ in str(n):\n        s += int(_)\n    return n / s\n\n\nn = 1\nd = 0\nfor _ in range(k):\n    print(n)\n    if snuke(n + 10**d) > snuke(n + 10**(d + 1)):\n        d += 1\n    n += 10**d\n", "def main():\n    s=set()\n    for digit in range(16):\n        for i in range(1,1000):\n            c=i*10**digit+int('9'*digit or 0)\n            if c<10**15:\n                s.add(c)\n    c=sorted(s)\n    for i,n in enumerate(c):\n        sn=n/sum(map(int,str(n)))\n        for m in c[i+1:i+100]:\n            sm=m/sum(map(int,str(m)))\n            if sm<sn:\n                s.remove(n)\n                break\n    print(*sorted(s)[:int(input())],sep='\\n')\nmain()", "K = int(input())\n\ndef snuke(n):\n  n_list = [int(i) for i in list(str(n))]\n  return n / sum(n_list)\n\nans = 1\ndigit = 0\n\nwhile K > 0:\n  print(ans)\n  if snuke(ans + 10**digit) > snuke(ans + 10**(digit+1)):\n    digit += 1\n  ans += 10**digit\n  K -= 1\n", "K = int(input())\n\ndef sunuke(n) :\n    sumN = sum(map(int, list(str(n))))\n    return n / sumN\n\ndigit = 0\nnow = 1\n\nfor i in range(K) :\n    print(now)\n    if sunuke(now + 10**digit) > sunuke(now + 10**(digit + 1)) :\n        digit += 1\n    now += 10**digit", "K = int(input())\n \ndef f(n):\n    return n / sum([int(s) for s in str(n)])\n\nans = [1]\nfor k in range(K - 1):\n    min_f_val, next_snuke = float('inf'), None\n    n = str(ans[-1] + 1)\n    for i in range(len(n)):\n        for x in range(int(n[i]), 10):\n            X = n[:i] + str(x) + '9' * (len(n) - i - 1)\n            f_val = f(int(X))\n            if f_val < min_f_val:\n                next_snuke = int(X)\n                min_f_val = f_val\n    ans.append(next_snuke)\nprint(*ans, sep='\\n')", "l=int(input())\n\ndef f(n):\n\treturn n/sum(list(map(int,list(str(n)))))\n\na=[]\nfor i in range(1,16):\n\tif i<=3:\n\t\tfor j in range(1,10):\n\t\t\ta.append((j+1)*(10**(i-1))-1)\n\telif i<=12:\n\t\tfor j in range(1,10):\n\t\t\tb=[j*(10**(i-1))+(k+1)*(10**(i-2))-1 for k in range(10)]\n\t\t\tfor k in range(9)[::-1]:\n\t\t\t\tif f(b[k])>f(b[k+1]):\n\t\t\t\t\tb.pop(k)\n\t\t\ta+=b\n\telse:\n\t\tfor j in range(1,10):\n\t\t\tb=[j*(10**(i-1))+(k+1)*(10**(i-3))-1 for k in range(100)]\n\t\t\tfor k in range(99)[::-1]:\n\t\t\t\tif f(b[k])>f(b[k+1]):\n\t\t\t\t\tb.pop(k)\n\t\t\ta+=b\n\nfor i in range(l):\n\tprint((a[i]))\n", "k = int(input())\n\ndef s(n):\n    r = 0\n    while n > 0:\n        r += n % 10\n        n = n // 10\n    return r\n    \n\ndef find_next(n):\n    d = 0\n    m = n // 10\n    sm = s(m)\n    r = 0\n    grad = 10 * m + 1 - sm - 9 * d - 1/(10**d)\n    while grad > 0:\n        r += 9 * 10**d\n        d += 1\n        sm -= m % 10\n        m = m // 10\n        grad = 10 * m + 1 - sm - 9 * d - 1/(10**d)\n    r += (n // 10**d) * 10**d\n    return r\n\nfor i in range(1, min(k, 9) + 1):\n    print(i)\n    \nk -= min(k, 9)\np = 10\n\nfor i in range(0, k):\n    p = find_next(p)\n    print(p)\n    p += 1", "def S(n):\n    k=list(str(n))\n    import functools\n    return functools.reduce(lambda x,y:x+y,[int(i) for i in k])\nk=int(input())\ndef T(n):\n    return n/S(n)\ndef f(N):\n    len_N=len(str(N))\n    A=[10**len_N+10**i-1 for i in range(len_N)]\n    B=[T(i) for i in A]\n    ans1=A[B.index(min(B))]\n    i=0\n    while True:\n        I=10**(len_N-1)+10**i-1\n        J=10**(len_N-1)+10**(i+1)-1\n        if T(J)<T(I):\n            i+=1\n        else:\n            break\n    C=[((N+1)//(10**i))*10**i+j*10**i-1 for j in range(1,11)]\n    D=[T(i) for i in C]\n    ans2=C[D.index(min(D))]\n    if T(ans1)<T(ans2):\n        return(ans1)\n    else:\n        return(ans2)\nK=[]\nN=1\nwhile len(K)<k:\n    K.append(N)\n    N=f(N)\nfor i in range(k):\n    print((K[i]))\n", "#D\u554f\u984c\nK=int(input())\nketa=1\nnow=1\ncount=0\n\ndef sunuke(n):\n    a=0\n    for i in str(n):\n        a+=int(i)\n    return(n/a)\n\nwhile count < K:\n    if sunuke(now) <= sunuke(now+keta):\n        print(now)\n        now+=keta\n        count+=1\n    else:\n        now+=9*keta\n        keta*=10\n\n", "import math\n# import datetime\n\ndef s(n):\n\tsum = 0\n\tfor c in str(n):\n\t\tsum += int(c)\n\treturn sum\n\nk = int(input())\nfound=0\n\ndef next_sunuke(n, s_n, s_n_div):\n\n\tnonlocal found\n\n\tif n == 1:\n\t\treturn\n\n\tlog_n = int(math.log(n,10))\n\tm = n - 10 ** int(log_n // 1.25)\n\t# m = n - 1\n\n\twhile m >= 1:\n\t\ts_m = s(m)\n\t\ts_mplus1 = s(m + 1)\n\n\t\t# if (s_m < s_mplus1 or (s_n - s_m != 1 and s_n - s_m != -8)) and m > 9:\n\t\tif (s_m < s_mplus1) and m > 9:\n\t\t\tm -= 10 ** int(log_n // 1.25)\n\t\t\tcontinue\n\n\t\t# print(\"check: \" + str(m))\n\n\t\ts_m_div = m / s(m)\n\n\t\tif s_m_div <= s_n_div:\n\t\t\tnext_sunuke(m, s_m, s_m_div)\n\t\t\tif found >= k:\n\t\t\t\treturn\n\n\t\t\tfound += 1\n\t\t\t# print(\"{0:d}\".format(m), \"{0:+d}\".format(n-m), \"{0:d}\".format(s_m), s_m_div)\n\t\t\tprint(m)\n\t\t\tbreak\n\t\t# else:\n\t\t# \tlog_m = int(math.log(m,10))\n\t\t# \tif (m + 1) / (10 ** (log_m - 1)) == 19:\n\n\t\t# \t\tprint (\"skip: \" + str(m) + \" to \" + str(10 ** log_m - 1))\n\n\t\t# \t\tm = 10 ** log_m - 1\n\t\t# \t\ts_mplus1 = s(m+1)\n\t\t# \t\tcontinue\n\n\t\tm -= 10 ** int(log_n // 1.25)\n\n\n# \u9069\u5f53\u306a\u5927\u304d\u3044\u30b9\u30cc\u30b1\u6570\ncurrent_sunuke = 999999999999999\ns_current_sunuke = s(current_sunuke)\ns_current_sunuke_div = current_sunuke / s_current_sunuke\n\n# start = datetime.datetime.now()\nnext_sunuke(current_sunuke, s_current_sunuke, s_current_sunuke_div)\nif found < k:\n\tprint(current_sunuke)\n# end = datetime.datetime.now()\n# print(str(end-start))\n\n# sunukes=[]\n\n# n = current_sunuke - 1\n\n# while(n >= 1):\n# \ts_n = n / s(n)\n# \tif s_n <= current_sunuke_n:\n# \t\t#sunukes.insert(0,n)\n# \t\tsunukes.append(n)\n# \t\tcurrent_sunuke = n\n# \t\tcurrent_sunuke_n = s_n\n# \tn -= 1\n\n# for n in sunukes:\n# \tprint (n)\n", "K = int(input())\n\ndef snuke(n):\n  sum_num = sum(map(int, list(str(n))))\n  return n / sum_num\n\nans = 1\ndigit = 0\nwhile K > 0:\n  print(ans)\n  if snuke(ans + 10**digit) > snuke(ans + 10**(digit+1)):\n    digit += 1\n  ans += 10**digit\n  K -= 1", "def f(N):\n    l = 0\n    NN = N\n    while True:\n        l += 1\n        NN //= 10\n        if NN < 10:\n            break\n    m = N / sum(map(int,list(str(N))))\n    num = -1\n    for d in range(0,l+2):\n        x = (10 ** (d+1)) * int(N/(10**(d+1))+1) - 1\n        sx = sum(map(int,list(str(x))))\n        value = x/sx\n        if value < m:\n            m = value\n            num = d\n    if num == -1:\n        return N\n    else:\n        return (10 ** (num+1)) * int(N/(10**(num+1))+1) - 1\n\nK = int(input())\n\nN = 1\nans = [1]\n\nwhile len(ans) < K:\n    N = f(N+1)\n    ans.append(N)\n\nfor i in ans:\n    print(i)\n", "import sys\nstdin = sys.stdin\n\nsys.setrecursionlimit(10**5)\n\ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x)-1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\ndef ds(n:int):\n    return sum([int(i) for i in str(n)])\n\ndef snuke(n:int):\n    return n/ds(n)\n\ndef cands(n:int):\n    ret = []\n    nl = len(str(n))\n    for i in range(nl):\n        ret.append(str(n)[:nl-i-1] + \"9\"*(i+1))\n        \n    return ret\n\nk = ni()\n\n# 1\u304b\u30899\u307e\u3067\nans = [i for i in range(1,10)]\n\n# \u6b21\u306e\u5019\u88dc\ncur = 10\nwhile len(ans) < k:\n    cand = cands(cur)\n    temp = 10**18\n    nex = -1\n    for c in cand:\n        if snuke(int(c)) <= temp:\n            temp = snuke(int(c))\n            nex = int(c)\n            \n    ans.append(nex)\n    cur = nex+1\n    \nfor ai in ans[:k]:\n    print(ai)", "def s(n):\n  return n / sum(map(int, str(n)))\nk = int(input())\np = 1\ne = 0\ni = 0\nwhile i < k:\n  n = (p + 1) * 10**e - 1\n  nxt = (p + 2) * 10**e - 1\n  if s(n) <= s(nxt):\n    print(n)\n    p += 1\n    i += 1\n  else:\n    e += 1\n    p = (p + 1) // 10\n", "def sk(k):\n    tk = k\n    ret = 0\n    while tk!=0:\n        ret+=tk%10\n        tk//=10\n    return ret\nan = []\nfor i in range(1,100):\n    tp = i/sk(i)\n    if len(an)==0:an.append((i,tp))\n    else:\n        ls=an[-1]\n        if ls[1]>tp:an[-1]=(i,tp)\n        else:an.append((i,tp))\nfor j in range(15):\n    for i in range(100,1000):\n        ns=str(i)+''.join(['9']*j)\n        nm=int(ns)\n        tp=nm/sk(nm)\n        if an[-1][1] > tp:\n            while an[-1][1]>tp:\n                an.pop()\n        an.append((nm,tp))\nfor i in range(int(input())):print(an[i][0])", "K = int(input())\n\n\ndef dsum(n):\n    return sum(list(map(int, str(n))))\n\n\ndef g(n):\n    return n / dsum(n)\n\nj = 1\norder = 1\nfor i in range(K):\n    print(j)\n    if g(j + 10 ** (order - 1)) > g(j + 10 ** order):\n        order += 1\n    j += 10 ** (order - 1)\n", "K = int(input())\n\n#\u3059\u306c\u3051\u6570\u5019\u88dc\n# [n, S(n)/n] \u3067\u899a\u3048\u308b\nsnukePairs = []\n\nfor i in range(1, 16):\n    top = 1  #\u4e0a\u4f4d\u4f55\u6841\u30921-9\u306e\u8d70\u67fb\u7bc4\u56f2\u3068\u3059\u308b\u304b\n    if i >= 12:\n        top = 3\n    elif i >= 4:\n        top = 2\n    p = pow(10, i - top)\n    fill9 = p - 1\n    top_num = pow(10, max(top, 1)) #\u305f\u304b\u304c1000\u3002\u5168\u90e8\u56de\u3059\n    check_index = len(snukePairs)\n    for j in range(pow(10, top - 1), top_num):\n        num = j * p + fill9\n        nn = num\n        s = 0\n        #\u5404\u6841\u5408\u8a08\u3001 S(n) / n \u8a08\u7b97\n        while nn > 0:\n            s += nn % 10\n            nn = nn // 10\n        val = num / s\n\n        #\u65e2\u5b58\u306e\u3082\u306e\u306e\u3046\u3061\u3001val\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u3092\u9664\u5916\n        idx = len(snukePairs) - 1\n        while idx >= 0:\n            if snukePairs[idx][1] > val:\n                del snukePairs[idx]\n            idx -= 1\n        snukePairs.append([num, val])\n\nfor i in range(0, K):\n    print((snukePairs[i][0]))\n\n", "k = int(input())\nketa = 1\nima = 1\ndef sunuke(n) :\n    a = 0\n    for i in str(n) :\n        a += int(i)\n    return(n/a)\ncount = 0\nwhile count < k :\n    if sunuke(ima) <= sunuke(ima+keta) :\n        print(ima)\n        ima += keta\n        count += 1\n    else :\n        ima += 9*keta\n        keta *= 10", "K=int(input())\n\ndef NS(N):\n  NS=0\n  while(N>0):\n    NS+=N%10\n    N//=10\n  return NS\n\nanswer,diff=0,1\nfor i in range(K):\n  answer+=diff\n  print(answer)\n  \n  if diff<(answer+diff)/NS(answer+diff):\n    diff*=10", "import math\n\n\ndef next_sunuke(N):\n    D = math.ceil(math.log(N, 10) + 1)\n    z = str(N)\n    zx = [int(z[:1]) for z in z]\n    Z = N / sum(zx)\n    ret_val = N\n    ret_vals = [ret_val]\n    for d in range(0, D):\n        x = ((10 ** (d + 1)) * math.floor((N / (10 ** (d + 1))) + 1)) - 1\n        w = str(x)\n        sx = [int(w[:1]) for w in w]\n        y = x / sum(sx)\n        if y == Z:\n            Z = y\n            ret_vals.append(x)\n        elif y < Z:\n            Z = y\n            ret_vals = []\n            ret_vals.append(x)\n    return min(ret_vals)\n\n\nK = int(input())\nn = 1\nfor i in range(1, K + 1):\n    print((next_sunuke(n)))\n    n = next_sunuke(n) + 1\n", "import math\n# import datetime\n\ndef s(n):\n\tsum = 0\n\tfor c in str(n):\n\t\tsum += int(c)\n\treturn sum\n\nk = int(input())\nfound=0\n\ndef next_sunuke(n, s_n, s_n_div):\n\n\tnonlocal found\n\n\tif n == 1:\n\t\treturn\n\n\tlog_n = int(math.log(n,10))\n\tm = n - 10 ** int(log_n // 1.25)\n\n\twhile m >= 1:\n\t\ts_m = s(m)\n\t\ts_mplus1 = s(m + 1)\n\n\t\tif (s_m < s_mplus1 or (s_n - s_m != 1 and s_n - s_m != -8 and s_n - s_m != -17)) and m > 9:\n\t\t\tm -= 10 ** int(log_n // 1.25)\n\t\t\tcontinue\n\n\t\t# print(\"check: \" + str(m))\n\n\t\ts_m_div = m / s(m)\n\n\t\tif s_m_div <= s_n_div:\n\t\t\tnext_sunuke(m, s_m, s_m_div)\n\t\t\tif found >= k:\n\t\t\t\treturn\n\n\t\t\tfound += 1\n\t\t\t# print(\"{0:d}\".format(m), \"{0:+d}\".format(n-m), \"{0:d}\".format(s_m), s_m_div)\n\t\t\tprint(m)\n\t\t\tbreak\n\n\n\t\tm -= 10 ** int(log_n // 1.25)\n\n\n# \u9069\u5f53\u306a\u5927\u304d\u3044\u30b9\u30cc\u30b1\u6570\ncurrent_sunuke = 999999999999999\ns_current_sunuke = s(current_sunuke)\ns_current_sunuke_div = current_sunuke / s_current_sunuke\n\n# start = datetime.datetime.now()\nnext_sunuke(current_sunuke, s_current_sunuke, s_current_sunuke_div)\nif found < k:\n\tprint(current_sunuke)\n# end = datetime.datetime.now()\n# print(str(end-start))\n", "K =int(input())\na = 0\nb = 1\n\nfor k in range(K):\n  a+=b\n  print(a)\n  \n  if b<(a+b)/sum(map(int,str(a+b))):\n    b*=10", "k = int(input())\n\n# \u95a2\u6570S(n)\ndef S(num):\n  s = sum(map(int,list(str(num))))\n  return num/s\n\n#1~9\u3068 \u30079-> \u300799 -> \u3007999 \u3092\u51fa\u529b\nten = 0\nnow = 1\n# k\u56de\u30eb\u30fc\u30d7\nfor _ in range(k) :\n  print(now)\n  # \u6841\u304c\u5909\u308f\u308b\u6642\u306bten+=1\u3059\u308b\n  if S(now + 10**ten) > S(now + 10**(ten + 1)) :\n    #print(now,S(now + 10**ten), S(now + 10**(ten + 1)))\n    ten += 1\n  now += 10**ten\n    \n    \n  \n  \n  \n  \n\n\n", "k = int(input())\n\ndef f(num):\n  return num / sum(map(int, list(str(num))))\n\norder = 0\nsunuke = 1\nfor i in range(k):\n  print(sunuke)\n  sunuke += 10**order\n  if f(sunuke + 10**(order+1)) < f(sunuke + 10**order):\n    order += 1", "k = int(input())\n\nl = []\nfor i in range(17):\n    ten = 10**i\n    for j in range(1,1000):\n        a = ten\n        b = j\n        n = a*b-1\n        if n == 0:\n            continue\n        s = sum(map(int,str(n)))\n        l.append([n/s,n])\nl.sort()\nnow = 0\ncount = 0\ni = 0\nwhile count < k:\n    if l[i][1] > now:\n        now = l[i][1]\n        count += 1\n        print((l[i][1]))\n    i += 1\n", "def sk(k):\n  tk = k\n  ret = 0\n  while tk!=0:\n    ret+=tk%10\n    tk//=10\n  return ret\n\nans = []\nfor i in range(1,100):\n  tmp = i/sk(i)\n  if len(ans)==0:\n    ans.append((i,tmp))\n  else:\n    l=ans[-1]\n    if l[1]>tmp:\n      ans[-1]=(i,tmp)\n    else:\n      ans.append((i,tmp))\n\nfor j in range(15):\n  for i in range(100,1000):\n    n=int(str(i)+''.join(['9']*j))\n    tmp=n/sk(n)\n    if ans[-1][1] > tmp:\n      while ans[-1][1]>tmp:\n        ans.pop()\n    ans.append((n,tmp))\n\nfor i in range(int(input())):\n  print(ans[i][0])", "def S(i):\n    ans = 0\n    while i // 10 > 0:\n        ans += i % 10\n        i //= 10\n    ans += i\n    return ans\n\nK = int(input())\ncount, N = 0, 1\nwhile count < K:\n    N2, Nd = N, 1\n    while N2//10 > 0:\n        Nd += 1\n        N2 //= 10\n    minX, X = N/S(N), N\n    for i in range(Nd+2):\n        x = (N//10**(i+1) + 1) * 10**(i+1) -1\n        if minX > x/S(x):\n            minX, X = x/S(x), x\n    print(X)\n    count += 1\n    N = X+1", "def f(x):\n    return x / sum(map(int, str(x)))\n \nK = int(input()) \nx, y = 1, 1\n \nfor i in range(K):\n    print(x)\n    if f(x + y) > f(x + y * 10):\n        y *= 10\n    x += y", "K = int(input())\n \nres = [(0, 0)]\nmm = 0\ncands = []\nfor i in range(1, 1000):\n  v = i\n  for j in range(16):\n    cands.append(v)\n    v = 10 * v + 9\n\ncands = list(sorted(set(cands)))\n\nfor x in cands:\n  i = sum(ord(c) - ord('0') for c in str(x))\n  while x / i < res[-1][0]:\n    res = res[:-1]\n  res.append((x / i, x))\n \nfor i in range(1, K + 1):\n  print(res[i][1])", "K = int(input())\nn = 1\ndn = 1\nc = 0\nwhile c < K:\n    print(n)\n    c += 1\n    if (n + dn) > sum(map(int, str(n + dn))) * dn:\n        dn *= 10\n    n += dn\n", "K = int(input())\n\ndef nd(n):\n    ans = 0\n    nn = n\n    while(nn > 0):\n        ans += nn%10\n        nn //= 10\n    return ans/n\n\ndef k_next(k):\n  d = 1\n  c_max = 0\n  ans = k\n  while(d < k*10):\n    cand = (k//d+1)*d+(k%d)\n    if nd(cand) >= c_max:\n      c_max = nd(cand)\n      ans = cand\n    d *= 10\n  return ans\n\nk = 1\nfor i in range(K):\n  print(k)\n  k = k_next(k)\n\n\n", "#!/usr/bin/env python\n# coding: utf-8\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(input().split())\n\ndef rli():\n    return list(map(int, input().split()))\n\ndef calc(n):\n    s = sum(map(int, str(n)))\n    return n / s\n\ndef main():\n    k = ri()\n    cand = list(range(1, 10))\n    last = 9\n    for n in range(1, 15):\n        pow10n = pow(10, n)\n        for d in range(1, 10):\n            lim = (d+1)*pow10n\n            e = 0\n            while True:\n                e1 = d*pow10n+e*(last+1)+last\n                if e1 >= lim:\n                    break\n                e2 = e1 + (last+1)\n                if calc(e1) > calc(e2):\n                    last = last*10+9\n                    e = 0\n                    continue\n                cand.append(e1)\n                e += 1\n    cand = sorted(list(set(cand)))\n    print((\"\\n\".join(map(str, cand[:k]))))\n\n\ndef __starting_point():\n    main()\n\n\"\"\"\n1 1.0\n2 1.0\n3 1.0\n4 1.0\n5 1.0\n6 1.0\n7 1.0\n8 1.0\n9 1.0\n19 1.9\n29 2.6363636363636362\n39 3.25\n49 3.769230769230769\n59 4.214285714285714\n69 4.6\n79 4.9375\n89 5.235294117647059\n99 5.5\n199 10.473684210526315\n299 14.95\n399 19.0\n499 22.681818181818183\n599 26.043478260869566\n699 29.125\n799 31.96\n899 34.57692307692308\n999 37.0\n1099 57.8421052631579\n1199 59.95\n1299 61.857142857142854\n1399 63.59090909090909\n1499 65.17391304347827\n1599 66.625\n1699 67.96\n1799 69.1923076923077\n1899 70.33333333333333\n1999 71.39285714285714\n2999 103.41379310344827\n3999 133.3\n4999 161.25806451612902\n5999 187.46875\n6999 212.0909090909091\n7999 235.26470588235293\n8999 257.1142857142857\n9999 277.75\n10999 392.82142857142856\n11999 413.7586206896552\n12999 433.3\n13999 451.5806451612903\n14999 468.71875\n15999 484.8181818181818\n16999 499.97058823529414\n17999 514.2571428571429\n18999 527.75\n19999 540.5135135135135\n20999 724.1034482758621\n21999 733.3\n22999 741.9032258064516\n23999 749.96875\n24999 757.5454545454545\n25999 764.6764705882352\n26999 771.4\n27999 777.75\n28999 783.7567567567568\n29999 789.4473684210526\n39999 1025.6153846153845\n49999 1249.975\n59999 1463.3902439024391\n69999 1666.642857142857\n79999 1860.4418604651162\n89999 2045.4318181818182\n99999 2222.2\n109999 2972.945945945946\n119999 3157.8684210526317\n129999 3333.3076923076924\n139999 3499.975\n149999 3658.512195121951\n159999 3809.5\n169999 3953.4651162790697\n179999 4090.8863636363635\n189999 4222.2\n199999 4347.804347826087\n209999 5526.289473684211\n219999 5641.0\n229999 5749.975\n239999 5853.634146341464\n249999 5952.357142857143\n259999 6046.488372093023\n269999 6136.340909090909\n279999 6222.2\n289999 6304.326086956522\n299999 6382.95744680851\n309999 7948.692307692308\n319999 7999.975\n329999 8048.756097560976\n339999 8095.214285714285\n349999 8139.511627906977\n359999 8181.795454545455\n369999 8222.2\n379999 8260.847826086956\n389999 8297.851063829787\n399999 8333.3125\n499999 10204.061224489797\n599999 11999.98\n699999 13725.470588235294\n799999 15384.596153846154\n899999 16981.11320754717\n999999 18518.5\n\"\"\"\n\n\n__starting_point()", "# \u4e0bd+1\u6841\u76ee\u304c\u521d\u3081\u30669\u3067\u306a\u3044\u3068\u3059\u308b\n# [__X__]99999\n# [_X++_]99999\u306b\u52dd\u3064\u5fc5\u8981\u304c\u3042\u308b\n# 10^d(X+1)-1 / (S(X) + 9d) <= (10^d(X+2)-1) / (S(X)+9d+1)\n# (S(X)+9d+1)/(S(X)+9d) <= (10^d(X+2)-1)/(10^d(X+1)-1)\n# 1/(S(X)+9d) <= 10^d / (10^d(X+1)-1) <= 1/X\n# X <= S(X)+9d <= 135\n\ndef S(n):\n  if n < 10:\n    return n\n  return S(n//10) + n%10\n  \nli = [] # \u5019\u88dc\u3001\u3068\u308a\u3042\u3048\u305a\u5341\u5206\u91cf\u4f5c\u308b\n\nfor d in range(20):\n  a = 10**d\n  for x in range(200):\n    y = (x+1)*a-1\n    if y > 0:\n      z = S(y)\n      li.append((y,z))\n    \nli = sorted(list(set(li)),reverse=True)\n\n# \u53f3\u304b\u3089\u898b\u3066\u3044\u3063\u3066\u3001\u305d\u306e\u6642\u70b9\u3067\u306e\u6700\u5c0f\u5024\u30bf\u30a4\u4ee5\u4e0b\u306a\u3089\u63a1\u7528\nanswer = []\nmin_N,min_S = li[0]\nfor n,s in li[1:]:\n  # n/s < min_N/min_S\n  if n*min_S <= s*min_N:\n    min_N = n\n    min_S = s\n    answer.append(n)\n\n\nK = int(input())\nanswer.sort()\nanswer = answer[:K]\nprint(('\\n'.join(map(str,answer))))\n\n", "import numpy as np\n\ndef set_power(a, power_array):\n    res = 1\n    for i in range(len(power_array)):\n        power_array[i] = res\n        res *= a\n\n\ndef solve(ans, K, arr):\n    p = 0\n    for d in range(15):\n        pow = arr[d]\n        x = pow - 1\n        for i in range(1, 10):\n            if d > 2:\n                y = i * pow + arr[d - 1] - 1\n                if y <= (9*(d - 1) + 1)*arr[d - 1]:\n                    for j in range(0, 9):\n                        if d > 9:\n                            z = i*pow + j*arr[d - 1] + arr[d - 2] - 1\n                            if z <= (9 * (d - 2) + j + 1) * arr[d - 2]:\n                                for j2 in range(0, 9):\n                                    ans[p] = z + j2 * arr[d - 2]\n                                    p += 1\n                        ans[p] = y + j * arr[d - 1]\n                        p += 1\n            ans[p] = i * pow + x\n            p += 1\n    return p\n\nK = int(input())\nans = np.empty(10000, dtype=np.int64)\npower_array = np.empty(16, dtype=np.int64)\nset_power(10, power_array)\np = solve(ans, K, power_array)\nprint(*ans[:K].tolist(), sep='\\n')\n", "k = int(input())\n\ndef snuke(n):\n    def func(a):\n        s = 0\n        for i in str(a):\n            s += int(i)\n        return a/s\n    \n    len_n = len(str(n))\n    min_snu = 10 ** 100\n    for i in range(len_n):\n        snu = str(n)[:len_n-i] + i * '9'\n        func_snu = func(int(snu))\n        if min_snu > func_snu:\n            min_snu = func_snu\n            snukee = int(snu)\n            \n    return snukee\n\ncount = 0\nn = 1\nwhile count < k:\n    next_snuke = snuke(n)\n    print(next_snuke)\n    n = next_snuke + 1\n    count += 1", "k=int(input())\ndef s(n):\n    m=str(n)\n    l=list(m)\n    l=map(int,l)\n    return n/sum(l)\np=1\nq=0\nfor i in range(k):\n    print(p)\n    if s(p+10**q)>s(p+10**(q+1)):\n        q+=1\n    p+=10**q", "K = int(input())\n\nP = [n for n in range(1, 10)]\nQ = [n for n in range(1, 10)]\nfor d in range(20):\n    if d < 12:\n        for m in range(10, 100):\n            P.append(int(str(m)+\"9\"*d))\n            Q.append(m//10+m%10+9*d)\n    else:\n        for m in range(100, 1000):\n            P.append(int(str(m)+\"9\"*(d-1)))\n            Q.append(sum([int(s) for s in str(m)])+9*(d-1))\n\nL = len(P)\nc = 0\nfor i, (p, q) in enumerate(zip(P, Q)):\n    ok = True\n    for j in range(i+1, L):\n        np, nq = P[j], Q[j]\n        if np*q < nq*p:\n            ok = False\n            break\n    if ok:\n        print(p)\n        c += 1\n    if c == K:\n        break\n\n\n\"\"\"\nimport matplotlib.pyplot as plt\n\nA = []\nB = []\nfor n in range(-1+10**10, 10**14, 10**10):\n    m = sum([int(s) for s in str(n)])\n    A.append(n)\n    B.append(n/m)\n\n\nplt.plot(A, B)\nplt.show()\n\"\"\"", "def snuke(n) :\n    s=sum(map(int,str(n)))\n    return n/s\n\nk=int(input())\ndigit=0\nans=1\nfor _ in range(k):\n    print(ans)\n    if snuke(ans+10**digit)>snuke(ans+10**(digit+1)):\n        digit+=1\n    ans+=10**digit", "import sys\n\ndef S(n):\n  return n / sum(map(int, str(n)))\n\n\ndef f(n):\n  d = 0\n  C = [n]\n  while S(n) > (10**d / 9*(d+1)):\n    c = 10**(d+1) * (n // 10**(d+1) + 1) - 1\n    C.append(c)\n    d += 1\n  Smin = float('inf')\n  res = 0\n  for c in C:\n    if S(c) < Smin:\n      Smin = S(c)\n      res = c  \n  return res\n\n\ndef main():\n  input = sys.stdin.readline\n  K = int(input())\n  ans = 1\n  for _ in range(K):\n    print(ans)\n    ans = f(ans+1)\n\n\ndef __starting_point():\n  main()\n__starting_point()", "from collections import deque\nk = int(input())\n\ndigsum = lambda x: sum(map(int, list(str(x))))\ndignorm = lambda x: x/digsum(x)\n\nn = 1\norder = 1\nwhile k > 0:\n    print(n)\n    k -= 1\n    if dignorm(n+10**(order-1)) > dignorm(n+10**order):\n        order += 1\n    n += 10**(order-1)\n\n", "import math\nK=int(input())\nk=2\nm=0\ndef D(x):\n  s=str(x)\n  array=list(map(int,list(s)))\n  return sum(array)\nN=1\nS=1\na=0\nprint((1))\nwhile k<=K:\n  N+=10**a\n  S=D(N)\n  if a<math.log10(N/S):\n    a+=1\n    N=(N//10**a+1)*10**a-1\n  S=D(N)\n  print(N)\n  k+=1\n    \n    \n", "from math import log10, ceil\n\n\ndef S(n: int) -> int:\n    \"\"\"n \u3092\u5341\u9032\u6cd5\u3067\u8868\u3057\u305f\u6642\u306e\u5404\u6841\u306e\u3042\u305f\u3044\u306e\u7dcf\u548c\n    :param n: \u4efb\u610f\u306e\u6b63\u306e\u6574\u6570\n    :return: \u5341\u9032\u6cd5\u306e\u5404\u6841\u306e\u548c\n    \"\"\"\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n\n\ndef f(N: int) -> int:\n    if N < 10:\n        return N\n\n    D = ceil(log10(N) + 1)\n    x = 10 * (N // 10 + 1) - 1\n    for d in range(1, D + 1):\n        td = 10 ** (d + 1)\n        nx = td * (N // td + 1) - 1\n\n        if nx / S(nx) < x / S(x):\n            x = nx\n    return x\n\n\ndef __starting_point():\n    K = int(input())\n    N = 1\n    for _ in range(K):\n        print(N)\n        N = f(N+1)\n\n__starting_point()", "import sys\nK = int(input())\ncount = 0\nnine = \"\"\n\narr = []\narr_sunuke = []\nfor k in range(14):\n    for i in range(10):\n        for j in range(10):\n            for l in range(10):\n                if i == 0 and nine != \"\":\n                    pass\n                else:\n                    arr.append(int(str(i)+str(j)+str(l)+nine))\n                    arr_sunuke.append(i + j + l + k*9)\n    nine = nine + str(9)\n\narr.remove(0)\narr_sunuke.remove(0)\narr_sunuke2 = [arr[i]/arr_sunuke[i] for i in range(len(arr))]\n\nans = []\ntmp = 10**15\nfor i in range(len(arr)-1, -1, -1):\n    if arr_sunuke2[i] <= tmp:\n        ans.append(arr[i])\n        tmp = arr_sunuke2[i]\n\nans = ans[::-1]\nfor i in range(K):\n    print(ans[i])", "m=float(\"INF\")\nsunukes=[]\nfor i in range(7,-1,-1):\n    for j in range(1000,10,-1):\n        #print(i,j)\n        sunuke=j*(100**i)-1\n        s=str(sunuke)\n        sn=0\n        for k in range(len(s)):\n            sn+=int(s[k])\n        x=sunuke/sn\n        #print(sunuke,x)\n        if x<=m :\n            m=x\n            sunukes.append(sunuke)\nfor i in range(9,0,-1):\n    sunukes.append(i)\nsunukes=sunukes[::-1]\nk=int(input())\n#print(sunukes)\nfor i in range(k):\n    print(sunukes[i])", "k = int(input())\nn = 1\ndif = 1\ncnt = 0\n\nwhile cnt!=k:\n  sn = 0\n  for ele in str(n):\n    sn+=int(ele)\n\n  m = n+dif\n  sm = 0\n  for ele in str(m):\n    sm+=int(ele)\n  if (n/sn) <= (m/sm):\n    print(n)\n    cnt+=1\n    n+=dif\n  else:\n    n-=dif\n    dif*=10\n    n+=dif", "K = int(input())\n\n\ndef ns(n):\n    ret, tmp = 0, n\n\n    while tmp > 0:\n        tmp, r = divmod(tmp, 10)\n        ret += r\n\n    return ret\n\n\nans, base = 0, 1\nfor _ in range(K):\n    ans += base\n    print(ans)\n\n    if (ans + base) / ns(ans + base) > (ans + 10 * base) / ns(ans + 10 * base):\n        base *= 10", "K=int(input())\nn=1\nk=0\nx=[]\ny=x.append\nwhile(n<=10**15):\n    plus=10**k\n    if n>=1350*plus:\n        n+=9*plus\n        k+=1\n        plus*=10\n    y([n,n/sum(map(int,list(str(n))))])\n    n+=plus\nx2=[]\ny2=x2.append\nmin_=10**15\nfor i in range(len(x)-1,-1,-1):\n    if x[i][1]<=min_:\n        y2(x[i][0])\n        min_=x[i][1]\nx2=list(reversed(x2))\nfor i in range(K):\n    print(x2[i])", "def f(n):\n    s=str(n)\n    return sum([int(s[i]) for i in range(len(s))])\n\nsunuke=[]\nfor i in range(16):\n    for j in range(1,200):\n        sunuke.append(j*(10**i)-1)\n\nsunuke=list(set(sunuke))\nsunuke.sort()\nsunuke.pop(0)\nL=len(sunuke)\n\ntmp1,tmp2=sunuke[L-1],f(sunuke[L-1])\nans=[sunuke[L-1]]\nfor i in range(len(sunuke)-2,-1,-1):\n    x=sunuke[i]\n    if x*tmp2<=tmp1*f(x):\n        ans.append(x)\n        tmp1,tmp2=x,f(x)\n\nans.sort()\n\n    \n\nfor i in range(int(input())):\n    print(ans[i])", "k = int(input())\nsunuke_list = [1,2,3,4,5,6,7,8]\ndef s(n):\n    n_charlist = list(str(n))\n    return sum(list(map(int, n_charlist)))\ndef combine_int(i,n):\n    i_charlist = list(str(i))\n    n_charlist = ['9'] * n\n    ret_charlist = i_charlist + n_charlist\n    ret_str = ''.join(ret_charlist)\n    return int(ret_str)\nfor n in range(1,14):\n    if n >= 12:\n        i = n-2\n    else:\n        i = n-1\n    while((i+1)/(s(i)+9*n) <= (i+2)/(s(i+1)+9*n)):\n        sunuke_list.append(combine_int(i,n))\n        i += 1\nfor i in range(k):\n    print((sunuke_list[i]))\n", "t = i = 1\nk = int(input()) \nwhile k:\n  if t < i / sum(map(int, list(str(i)))):\n    i += 9 * t\n    t *= 10\n  else:\n    print(i)\n    i += t\n    k -= 1", "k = int(input())\n\nl = []\nfor i in range(17):\n    ten = 10**i\n    for j in range(1,1000):\n        a = ten\n        b = j\n        n = a*b-1\n        if n == 0:\n            continue\n        s = sum(map(int,str(n)))\n        l.append([n/s,n])\nl.sort()\nnow = 0\ncount = 0\ni = 0\nwhile count < k:\n    if l[i][1] > now:\n        now = l[i][1]\n        count += 1\n        print(l[i][1])\n    i += 1", "t = i = 1\nk = int(input()) \nwhile k:\n  if t < i / sum(map(int, list(str(i)))):\n    i += 9 * t\n    t *= 10\n  else:\n    print(i)\n    i += t\n    k -= 1\n", "K = int(input())\n\n\ndef ns(n):\n    ret, tmp = 0, n\n\n    while tmp > 0:\n        #        tmp, r = divmod(tmp, 10)\n        r = tmp % 10\n        tmp //= 10\n        ret += r\n\n    return ret\n\n\nans, base = 0, 1\nfor _ in range(K):\n    ans += base\n    print(ans)\n\n    if (ans + base) / ns(ans + base) > (ans + 10 * base) / ns(ans + 10 * base):\n        base *= 10", "from collections import deque\nk = int(input())\n\ndigsum = lambda x: sum(list(map(int, list(str(x)))))\ndignorm = lambda x: x/digsum(x)\n\nn = 1\norder = 1\nwhile k > 0:\n    print(n)\n    k -= 1\n    if dignorm(n+10**(order-1)) > dignorm(n+10**order):\n        order += 1\n    n += 10**(order-1)", "res = []\nfor digit in range(1,16):\n    if digit<=3:\n        for i in range(2,11):\n            res.append(10**(digit-1)*i-1)\n    elif 4<=digit<=12:\n        for i in range(11,(digit-2)*10):\n            res.append(i*10**(digit-2)-1)\n        for i in range(digit-2,11):\n            res.append(i*10**(digit-1)-1)\n    elif digit==15:\n        for i in range(101,110):\n            res.append(i*10**(digit-3)-1)\n        for i in range(11,101):\n            res.append(i*10**(digit-2)-1)\n    else:\n        for i in range(11,101):\n            res.append(i*10**(digit-2)-1)\nfor i in range(int(input())):\n    print((res[i]))\n", "K=int(input())\n\ndef NS(N):\n  NS=0\n  while(N>0):\n    NS+=N%10\n    N//=10\n  return NS\n\nanswer,diff=0,1\nfor i in range(K):\n  answer+=diff\n  print(answer)\n  \n  if (answer+diff)/NS(answer+diff)>(answer+10*diff)/NS(answer+10*diff):\n    diff*=10", "def snu(n):\n    s=str(n)\n    kei=sum(int(x) for x in s)\n    return n/kei\n\ndef nn(n):\n    s=str(n)\n    kt=len(str(int(snu(n))))\n    if s[-kt:].count(\"9\")==kt:\n        if s[-kt-1]==\"9\":\n            n+=10**kt\n            s=str(n)\n            kt = len(str(int(snu(n))))\n            if s[-kt:].count(\"9\") == kt:\n                return n\n            else:\n                s = s[:-kt] + \"9\" * kt\n                return int(s)\n        else:\n            return n+10**kt\n    else:\n        s=s[:-kt]+\"9\"*kt\n        return int(s)\n\nk=int(input())\nt=9 if k>9 else k\nfor i in range(1,t+1):\n    print(i)\nif k<=9:return\nn=19\nfor _ in range(k-9):\n    print(n)\n    n=nn(n)", "from math import log10 as l\ns=lambda f:sum(map(int,list(str(f))))\np=lambda a,j:(a//10**(j+1)+1)*10**(j+1)-1\nn=int(input())\na=1\nfor i in range(n):\n  print(a)\n  if(a<9):\n    a+=1\n    continue\n  a+=1\n  k=[p(a,j) for j in range(int(l(a)))]\n  o=[p(a,j)/s(p(a,j)) for j in range(int(l(a)))]\n  a=k[o.index(min(o))]"]