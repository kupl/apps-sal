["from math import inf\nn=int(input())\n\na = input()\na= [int(i) for i in a.split()]\ns  =input()\ns  = [int(i) for i in s.split()]\nans  =  inf\nfor j in range(1 , n-1):\n    ll , lr = inf , inf\n    for q in range(j+1,n):\n        if a[j]<a[q]:\n            lr = min(lr , s[q])\n    for q in range(j):\n        if a[j]>a[q]:\n            ll = min(ll , s[q]) \n    ans= min(ans , ll+lr+s[j])\nif ans==inf:\n    print(-1)\nelse:\n    print(ans)\n", "from math import inf\nn = int(input())\ns = [int(e) for e in input().split()]\nc = [int(e) for e in input().split()]\nd = [[inf, inf] for i in range(n)]\nfor i in range(n):\n    s1 = s[i]\n    for j in range(i):\n        if s[j] < s1:\n            if c[j] < d[i][0]:\n                d[i][0] = c[j]\n            if d[j][0] < d[i][1]:\n                d[i][1] = d[j][0]\n    d[i][0] += c[i]\n    d[i][1] += c[i]\nm = min([e[1] for e in d])\nprint(m if m < inf else -1)", "n=int(input())\nl=list(map(int,input().split()))\nv=list(map(int,input().split()))\nd=dict()\nfor i in range(n):\n    take=[]\n    for j in range(i+1,n):\n        if l[i]<l[j]:\n            take.append(v[j])\n    \n    d[i]=sorted(take)\nmini=99999999999\nfor i in range(n):\n    sum1=v[i]\n    for j in range(i+1,n):\n        if l[i]<l[j]:\n            sum1=v[j]+v[i]\n            if len(d[j])!=0:\n                sum1=v[i]+v[j]+d[j][0]\n                if mini>sum1:\n                    mini=sum1\nif mini==99999999999:\n    print(\"-1\")\nelse:\n    print(mini)\n            \n", "n = int(input())\ns = list(map(int, input().split()))\nc = list(map(int, input().split()))\nnum = float(\"inf\")\nrec1 = [float(\"inf\")] * n\nrec2 = [float(\"inf\")] * n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if s[i] < s[j] and rec1[i] > c[j]:\n            rec1[i] = c[j]\n\nfor i in range(1, n):\n    for j in range(i):\n        if s[j] < s[i] and rec2[i] > c[j]:\n            rec2[i] = c[j]\n\nfor i in range(n):\n    num = min(num, rec1[i] + c[i] + rec2[i])\n\n\nif num == float(\"inf\"):\n    print(-1)\nelse:\n    print(num)", "n = int(input())\na = list(map(int, input().split()))\nc = list(map(int, input().split()))\nMAXANS = 300000010\nf = {\n\t1:[c[i] for i in range(n)],\n\t2:[MAXANS for _ in range(n)],\n\t3:[MAXANS for _ in range(n)]\n\t}\nv = [False for _ in range(n)]\nl = 2\nfor i in range(n - 1):\n\tif v[i]:\n\t\tcontinue\n\tfor j in range(i + 1, n):\n\t\tif (a[j] > a[i]) and (c[j] > c[i]):\n\t\t\tv[j] = True\n\t\tif (a[i] < a[j]) and (f[l-1][i] + c[j] < f[l][j]):\n\t\t\t\tf[l][j] = f[l-1][i] + c[j]\nl = 3\nfor i in range(n - 1):\n\tif f[2][i] == MAXANS:\n\t\tcontinue\n\tfor j in range(i + 1, n):\n\t\tif (a[i] < a[j]) and (f[l-1][i] + c[j] < f[l][j]):\n\t\t\t\tf[l][j] = f[l-1][i] + c[j]\n\nans = min(f[3])\nif ans == MAXANS:\n\tprint(-1)\nelse:\n\tprint(ans)\n\n", "import sys\nfrom collections import deque\n\nn = int(sys.stdin.readline().strip())\ns = list(map(int, sys.stdin.readline().strip().split(' ')))\nc = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nlower = [float('inf') for i in range(n)]\nupper = [float('inf') for i in range(n)]\nfor i in range(n):\n\tfor j in range(i):\n\t\tif s[i] > s[j]:\n\t\t\tlower[i] = min(lower[i], c[j])\nfor i in range(n-1,-1,-1):\n\tfor j in range(i+1,n):\n\t\tif s[j] > s[i]:\n\t\t\tupper[i] = min(upper[i], c[j])\nans = float('inf')\nfor i in range(n):\n\tans = min(ans, lower[i] + c[i] + upper[i])\nprint([-1,ans][ans!=float('inf')])", "n = int(input())\ns = [int(x) for x in input().split()]\nc = [int(x) for x in input().split()]\nf1 = [0 for x in range(0,3005)]\nf = [[99999999999 for x in range(0,3005)] for i in range(1,4)]\nf.insert(0,f1)\nfor i in range(0,n):\n    f[1][i] = c[i]\nfor x in range(2,4):\n    for i in range(x-1,n):\n        for j in range(0,i):\n            if s[j] < s[i] and f[x-1][j] != 99999999999:\n                f[x][i] = min(f[x-1][j]+c[i], f[x][i])\nfor i in range(1,n):\n    f[3][i] = min(f[3][i-1],f[3][i])\nif f[x][i] != 99999999999:\n    print(f[x][i])\nelse:\n    print(-1)", "R=lambda:list(map(int,input().split()))\nI=3*10**8\nn=int(input())\ns,c=R(),R()\nr=min(c[j]+min([I]+[c[i]for i in range(j)if\ns[i]<s[j]])+min([I]+[c[i] for i in range(j+1,n)if\ns[i]>s[j]])for j in range(1,n-1))\nprint((r,-1)[r>I])", "R=lambda:list(map(int,input().split()))\nI=3*10**8\nn=int(input())\ns,c=R(),R()\nr=min(c[j]+min([I]+[c[i]for i in range(j)if\ns[i]<s[j]])+min([I]+[c[i] for i in range(j+1,n)if\ns[i]>s[j]])for j in range(n))\nprint((r,-1)[r>I])", "n = int(input())\nS = [int(x) for x in input().split()]\ns = tuple(S)\nc = tuple(int(x) for x in input().split())\nS.sort()\ndef min(x, y):\n    if x < y:\n        return x\n    else:\n        return y\ndef rank(x):\n    l = 0; r = n - 1\n    while l < r:\n        mid = (l + r) >> 1\n        if S[mid] < x:\n            l = mid + 1\n        else:\n            r = mid\n    return l\nrk = tuple(rank(x) for x in s)\nMin = [10000000000 for i in range(30000)]\ndef insert(x, l, r, p, v):\n    Min[x] = min(Min[x], v)\n    if l == r:\n        return\n    mid = (l + r) >> 1\n    if p > mid:\n        insert(x << 1 | 1, mid + 1, r, p, v)\n    else:\n        insert(x << 1, l, mid, p, v)\ndef query(x, l ,r ,L ,R):\n    if l >= L and r <= R:\n        return Min[x]\n    mid = (l + r) >> 1; ans = 10000000000\n    if L <= mid:\n        ans = min(ans, query(x << 1, l, mid, L, R))\n    if R > mid:\n        ans = min(ans, query(x << 1 | 1, mid + 1, r, L, R))\n    return ans\ndp = list(c)\nMin = [10000000000 for i in range(30000)]\nfor i in range(0, n):\n    insert(1, 0, n - 1, rk[i], dp[i])\n    dp[i] = c[i]\n    if rk[i] == 0:\n        dp[i] += 10000000000\n    else:\n        dp[i] += query(1, 0, n - 1, 0, rk[i] - 1)\nMin = [10000000000 for i in range(30000)]\nfor i in range(0, n):\n    insert(1, 0, n - 1, rk[i], dp[i])\n    dp[i] = c[i]\n    if rk[i] == 0:\n        dp[i] += 10000000000\n    else:\n        dp[i] += query(1, 0, n - 1, 0, rk[i] - 1)\nans = 10000000000\nfor i in dp:\n    ans = min(ans, i)\nif ans > 3000000000:\n    print(-1)\nelse:\n    print(ans)", "R=lambda:list(map(int,input().split()))\nI=3*10**8\nn=int(input())\ns,c=R(),R()\nr=min(c[j]+min([I]+[c[i]for i in range(j)if\ns[i]<s[j]])+min([I]+[c[i] for i in range(j+1,n)if\ns[i]>s[j]])for j in range(n))\nprint((r,-1)[r>I])\n", "#R=lambda:list(map(int,input().split()))\nR=lambda:[int(i)for i in input().split()]\nI=3*10**8\nn=int(input())\ns,c=R(),R()\nr=min(c[j]+min([I]+[c[i]for i in range(j)if\ns[i]<s[j]])+min([I]+[c[i] for i in range(j+1,n)if\ns[i]>s[j]])for j in range(n))\nprint((r,-1)[r>I])\n", "import math;\ndef getIntList():\n    return list(map(int, input().split()));\ndef getTransIntList(n):\n    first=getIntList();\n    m=len(first);\n    result=[[0]*n for _ in range(m)];\n    for i in range(m):\n        result[i][0]=first[i];\n    for j in range(1, n):\n        curr=getIntList();\n        for i in range(m):\n            result[i][j]=curr[i];\n    return result;\nn=int(input());\ns=getIntList();\nc=getIntList();\nmaxValue=10**8+1;\nresult=maxValue*3;\nminLeft=[0]*n;\nminRight=[0]*n;\nminLeft[0]=c[0];\nfor i in range(1, n):\n    minLeft[i]=min(c[i], minLeft[i-1]);\nminRight[n-1]=c[n-1];\nfor i in range(n-2, -1, -1):\n    minRight[i]=min(c[i], minRight[i+1]);\nminSLeft=[0]*n;\nmaxSRight=[0]*n;\nminSLeft[0]=s[0];\nfor i in range(1, n):\n    minSLeft[i]=min(s[i], minSLeft[i-1]);\nmaxSRight[n-1]=s[n-1];\nfor i in range(n-2, -1, -1):\n    maxSRight[i]=max(s[i], maxSRight[i+1]);\nprices=[(c[j], j) for j in range(1, n-1)];\nprices.sort();\nfor currC, j in prices:\n    if minLeft[j-1]+c[j]+minRight[j+1]>=result:\n        continue;\n    if minSLeft[j-1]>=s[j] or s[j]>=maxSRight[j+1]:\n        continue;\n    a=maxValue;\n    for i in range(j):\n        if s[i]<s[j]:\n            a=min(a, c[i]); \n    b=maxValue;\n    for k in range(j+1, n):\n        if (s[j]<s[k]):\n            b=min(b, c[k]);\n    curr=a+b+c[j];\n    result=min(result, curr);\nif result==maxValue*3:\n    result=-1;\nprint(result);\n", "#R=lambda:list(map(int,input().split()))\n\"\"\"\nR=lambda:[int(i)for i in input().split()]\nI=3*10**8\nn=int(input())\ns,c=R(),R()\nr=min(c[j]+min([I]+[c[i]for i in range(j)if\ns[i]<s[j]])+min([I]+[c[i] for i in range(j+1,n)if\ns[i]>s[j]])for j in range(n))\nprint((r,-1)[r>I])\n\"\"\"\nR=lambda:[int(i)for i in input().split()]\nI=3*10**9\nn=int(input())\ns,c=R(),R()\nr = I\nfor j in range(n):\n    t1 = I\n    for i in range(j):\n        if s[i] < s[j]:\n            t1 = min(t1, c[i])\n    t2 = I\n    for i in range(j+1, n):\n        if s[i] > s[j]:\n            t2 = min(t2, c[i])\n    r = min(c[j] + t1 + t2, r)\nif r < I:\n    print(r)\nelse:\n    print(\"-1\")\n", "#R=lambda:list(map(int,input().split()))\n\"\"\"\nR=lambda:[int(i)for i in input().split()]\nI=3*10**8\nn=int(input())\ns,c=R(),R()\nr=min(c[j]+min([I]+[c[i]for i in range(j)if\ns[i]<s[j]])+min([I]+[c[i] for i in range(j+1,n)if\ns[i]>s[j]])for j in range(n))\nprint((r,-1)[r>I])\n\"\"\"\nR=lambda:[int(i)for i in input().split()]\nI=10**9\nn=int(input())\ns,c=R(),R()\nr = I\nfor j in range(n):\n    t1 = I\n    for i in range(j):\n        if s[i] < s[j]:\n            t1 = min(t1, c[i])\n    t2 = I\n    for i in range(j + 1, n):\n        if s[i] > s[j]:\n            t2 = min(t2, c[i])\n    r = min(c[j] + t1 + t2, r)\nif r < I:\n    print(r)\nelse:\n    print(\"-1\")\n", "from sys import stdin \n\nn = int(stdin.readline())\n\nsize = list(map(int,stdin.readline().split()))\nprice = list(map(int,stdin.readline().split()))\n\ntemp = [3*10**8 + 1] * n\nans = [3*10**8 + 1] * n\n\nfor i in range(n):\n    for j in range(i+1,n) :\n        if (size[i] >= size[j]) :\n            continue\n        temp[j] = min(temp[j],price[i]+price[j])\nfor i in range(n):\n    for j in range(i+1,n):\n        if(size[i] >= size[j]):\n            continue\n        ans[j] = min(ans[j],temp[i]+price[j])\nres = 3*10**8 + 1\nfor i in range(n):\n    if (res > ans[i]) :\n        res = ans[i]\nif (res == 3*10**8 + 1):\n    print(\"-1\")\nelse :\n    print(res)\n\n\n\n", "R=lambda:list(map(int,input().split()))\nI=2**29\nn=int(input())\ns,c=R(),R()\nr=min(c[j]+min([c[i]for i in range(j)if\ns[i]<s[j]],default=I)+min([c[i] for i in range(j+1,n)if\ns[i]>s[j]],default=I)for j in range(n))\nprint((r,-1)[r>I])", "R=lambda:map(int,input().split())\nI=10**10\nn=int(input())\ns,c=list(R()),list(R())\nr=min(c[j]+min([I]+[c[i]for i in range(j)if\ns[i]<s[j]])+min([I]+[c[i]for i in range(j+1,n)if\ns[i]>s[j]])for j in range(n))\nprint((r,-1)[r>I])", "n=int(input())\ns=[int(x) for x in input().split()]\nc=[int(x) for x in input().split()]\n\ncost=min(min([3e10]+[c[j] for j in range(i) if s[j]<s[i]])+c[i]+min([3e10]+[c[k] for k in range(i+1, n) if s[k]>s[i]]) for i in range(n))\n\nif cost>=3e10:   \n    cost=-1\nprint(cost)", "def main():\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    Max = 2 * sum(c)\n\n    f = [x for x in c]\n    # f[i] means when the last element in the 3-elements sequence is the i-th element in the original sequence\n    # the minimum cost of the 3-element sequence\n    for _ in range(2):\n        for i in range(n - 1, -1, -1):\n            min_fj = Max\n            for j in range(i):\n                if s[j] < s[i]:\n                    min_fj = min(f[j], min_fj)\n            if min_fj == Max:\n                f[i] = Max\n            else:\n                f[i] = min_fj + c[i]\n\n    min_cost = min(f)\n    if min_cost == Max:\n        print(-1)\n    else:\n        print(min_cost)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\nimport sys\nimport math\nimport os.path\n\n\ndef log(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\ndef ni():\n    return list(map(int, input().split(\" \")))\n\n\ndef nio(offset):\n    return [int(x) + offset for x in input().split(\" \")]\n\n\ndef nia():\n    return list(map(int, input().split()))\n\n\nCMAX = 1000000000\n\nn, = ni()\ns = nia()\nc = nia()\n\n# log(f\"s = {s}\")\n# log(f\"c = {c}\")\n\n# log(f\"small = {small}\")\nl1 = [CMAX for _ in range(n)]\nl2 = [CMAX for _ in range(n)]\n\nfor j in range(1, n):\n    for i in range(j):\n        if (s[i] < s[j]):\n            # log(f\"s[{i}] = {s[i]} s[{j}]={s[j]}\")\n            l1[j] = min(l1[j], c[i])\n            l2[i] = min(l2[i], c[j])\n\n# log(f\"l1 = {l1}\")\n# log(f\"l2 = {l2}\")\n\nres = CMAX\n\nfor i in range(n):\n    res = min(res, l1[i] + l2[i] + c[i])\n\nif (res < CMAX):\n    print(res)\nelse:\n    print(-1)\n", "\nimport sys\nimport math\nimport os.path\n\n\ndef log(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\ndef ni():\n    return list(map(int, input().split(\" \")))\n\n\ndef nio(offset):\n    return [int(x) + offset for x in input().split(\" \")]\n\n\ndef nia():\n    return list(map(int, input().split()))\n\n\nCMAX = 1000000000\n\nn, = ni()\ns = nia()\nc = nia()\n\n# log(f\"s = {s}\")\n# log(f\"c = {c}\")\n\n# log(f\"small = {small}\")\nl1 = [CMAX]*n\nl2 = [CMAX]*n\n\nfor j in range(1, n):\n    for i in range(j):\n        if (s[i] < s[j]):\n            # log(f\"s[{i}] = {s[i]} s[{j}]={s[j]}\")\n            l1[j] = min(l1[j], c[i])\n            l2[i] = min(l2[i], c[j])\n\n# log(f\"l1 = {l1}\")\n# log(f\"l2 = {l2}\")\n\nres = CMAX\n\nfor i in range(n):\n    res = min(res, l1[i] + l2[i] + c[i])\n\nif (res < CMAX):\n    print(res)\nelse:\n    print(-1)\n", "\nimport sys\nimport math\nimport os.path\n\n\ndef log(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n\n\ndef ni():\n    return list(map(int, input().split(\" \")))\n\n\ndef nio(offset):\n    return [int(x) + offset for x in input().split(\" \")]\n\n\ndef nia():\n    return list(map(int, input().split()))\n\n\nCMAX = 1000000000\n\nn, = ni()\ns = nia()\nc = nia()\n\n# log(f\"s = {s}\")\n# log(f\"c = {c}\")\n\n# log(f\"small = {small}\")\nl1 = {}\nl2 = {}\n\nfor j in range(1, n):\n    for i in range(j):\n        if (s[i] < s[j]):\n            # log(f\"s[{i}] = {s[i]} s[{j}]={s[j]}\")\n            l1[j] = min(l1.get(j,CMAX), c[i])\n            l2[i] = min(l2.get(i,CMAX), c[j])\n\n# log(f\"l1 = {l1}\")\n# log(f\"l2 = {l2}\")\n\nres = CMAX\n\nfor i in range(n):\n    res = min(res, l1.get(i, CMAX) + l2.get(i,CMAX) + c[i])\n\nif (res < CMAX):\n    print(res)\nelse:\n    print(-1)\n", "from heapq import heappush\nimport bisect\nn=int(input())\ns=list(map(int,input().split()))\nc=list(map(int,input().split()))\na={}\nb=[]\nak=[]\naki=[]\nfor i in range(n-1,-1,-1):\n    ind0=bisect.bisect(ak,s[i])\n    ak.insert(ind0,s[i])\n    aki.insert(ind0,i)\n    a[i]=[]\n    ind=-1\n    for j in aki[ind0:]:\n        if s[j]>s[i]:\n            if len(a[j])==1:\n                heappush(b,c[i]+c[j]+c[a[j][0]])\n            if ind==-1 or m>=c[j]:\n                m,ind=c[j],j\n    if ind!=-1:\n        a[i]=[ind]\nif b:\n    print(b[0])\nelse:\n    print(-1)", "from math import inf\n\nn = int(input())\n\ns = list(map(int, input().split(' ')))\nc = list(map(int, input().split(' ')))\n\ndp = [[0, inf, inf, inf][:] for i in range(n)]\ndp[0][1] = c[0]\n\nfor j in range(1, 4):\n    for i in range(1, n):\n        for k in reversed(list(range(i))):\n            if j == 1 or s[k] < s[i]:\n                dp[i][j] = min(dp[i][j], dp[k][j - 1] + c[i])\n\nr = min(x[3] for x in dp)\nif r == inf:\n    print(-1)\nelse:\n    print(r)\n\n"]