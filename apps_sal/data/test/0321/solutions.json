["def isPrime(n) : \n    # Corner cases \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop \n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n  \n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n  \n    return True\nt=int(input())\nfor yes in range(t):\n\ta,b=map(int,input().split())\n\txx=a-b\n\tyy=a+b \n\tif xx==1 and isPrime(yy)==True:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "read = lambda: map(int, input().split())\ndef prime(x):\n    d = 2\n    while d*d<= x:\n        if x % d == 0: return 0\n        d += 1\n    return 1\nt = int(input())\nres = \"\"\nfor i in range(t):\n    a, b = read()\n    res += \"YES\\n\" if a-b==1 and prime(a+b) else \"NO\\n\"\nprint(res)", "def isPrime(n):\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n\n    return True\nfor i in ' '*int(input()):\n    a,b=map(int,input().split())\n    if a-b>1:print('NO')\n    else:\n        print(['NO','YES'][isPrime(a+b)])", "def check_prime(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\nt = int(input())\nfor tnum in range(t):\n    a, b = map(int, input().split())\n    if a != b + 1:\n        print(\"NO\")\n    else:\n        print(\"YES\" if check_prime(a + b) else \"NO\")", "from math import sqrt\nn = int(input())\nfor i in range(n):\n    a, b = map(int, input().split())\n    first = a - b\n    second = a + b\n    if first != 1:\n        print('NO')\n    else:\n        f = False\n        for i in range(2, int(sqrt(second)) + 1):\n            if second % i == 0:\n                f = True\n                break\n        if f:\n            print('NO')\n        else:\n            print('YES')", "def prime(n):\n    if n < 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for k in range(3, 1 + int(n ** .5), 2):\n            if n % k == 0:\n                return False\n    return True\n\n\nt = int(input())\nfor i in range(t):\n    a, b = list(map(int, input().split()))\n    n = (a + b)\n    if a - b > 1:\n        print('NO')\n    else:\n        if prime(n):\n            print('YES')\n        else:\n            print('NO')\n", "t = int(input())\nfor _ in range(t):\n    a, b = list(map(int, input().split()))\n    if a - b != 1:\n        print(\"NO\")\n        continue\n    c = a + b\n    for t in range(2, int(c ** 0.5) + 1):\n        if c % t == 0:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "def check(a):\n    for i in range(2, round(a**0.5 + 1)):\n        if not a % i:\n            return 0\n    return 1\n\n\nfor i in range(int(input())):\n    a, b = map(int, input().split())\n    if (a - b) > 1 and (a + b) > 1:\n        print('NO')\n    else:\n        print('YES' if check(a**2-b**2) else 'NO')", "from math import sqrt \nfrom itertools import count, islice\n\ndef isPrime(n):\n    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))\n\nt=int(input())\n\nfor i in range(t):\n\ta,b=map(int,input().split())\n\tans = False\n\tif a-b==1:\n\t\tx = a+b\n\t\tans=isPrime(x)\n\n\tif ans:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "t=int(input())\nimport math\nfor i in range(t):\n    a,b=list(map(int,input().split()))\n    if((a-b)!=1):\n        print(\"NO\")\n    else:\n        l=2*a-1\n        p=0\n        for k in range(2,int(math.sqrt(l))+1):\n            if(l%k==0):\n                print(\"NO\")\n                p=1\n                break \n        if(p==0):\n            print(\"YES\")\n", "def prime(x):\n    if x==1:\n        return False\n    ret=True\n    for i in range(2,int(x**0.5)+1):\n        if x%i==0:\n            ret=False\n    return ret\n\nn=int(input())\nfor i in range(n):\n    s=input().split()\n    d=int(s[0])-int(s[1])\n    if d!=1:\n        print(\"NO\")\n    else:\n        if prime(int(s[0])+int(s[1])):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "t = int(input())\nwhile t > 0:\n    a, b = list(map(int,input().split()))\n    if a - b != 1 :\n        print(\"NO\")\n    else:\n        num = a + b\n        num2 = int(num ** 0.5)\n        num3 = 2\n        ans = 0\n        while num3 <= num2:\n            if num % num3 == 0:\n                ans = 1\n            num3 += 1\n        if ans == 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    t -= 1\n", "import sys\n\ndef isprime(x):\n    import math\n    if x == 1:\n        return True\n\n    for i in range(2, math.ceil(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef __starting_point():\n    cin = sys.stdin\n\n    T = int(next(cin))\n    for _ in range(T):\n        n, m = list(map(int, next(cin).split()))\n\n        # n**2-m**2 = (n-m)*(n+m)\n\n        if n-m == 1 and isprime(n+m):\n            print('YES')\n        else:\n            print('NO')\n\n__starting_point()", "def isPrime(n) : \n    # Corner cases \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop \n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n  \n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n  \n    return True\nt=int(input())\nfor l in range(t):\n\ta,b=list(map(int,input().split()))\n\tif(a-b!=1):\n\t\tprint(\"NO\")\n\telse:\n\t\tif(isPrime(a+b)):\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\n", "from math import sqrt; from itertools import count, islice\n\nn = int(input())\n\n\ndef isPrime(n):\n    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))\n\ndef eval_(a, b):\n    if  abs(a - b)!=1:\n        return \"NO\"\n    result = isPrime(a + b)\n    if result:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nfor i in range(n):\n    (a, b) = [int(x) for x in input().split()]\n    print(eval_(a, b))", "import math\n\nt = int(input())\n\n\ndef isprime(c):\n\t# print(int(math.ceil(math.sqrt(c)))+1)\n\tfor x in range(2, int(math.ceil(math.sqrt(c)))+1):\n\t\t# print(\"x: {}\".format(x))\n\t\tif c % x == 0:\n\t\t\treturn False\n\n\treturn True\n\nfor x in range(t):\n\ta, b = list(map(int, input().split()))\n\tif (1 == a-b) and isprime(a + b):\n\t\tprint (\"YES\")\n\telse:\n\t\tprint (\"NO\")\n\n\n\n", "from math import sqrt, floor\n\n\ndef check(n):\n    for i in range(2, floor(sqrt(n)) + 1):\n        if (n % i == 0):\n            return False\n\n    return True\n\n\nt = int(input())\n\nfor i in range(t):\n    a, b = list(map(int, input().split()))\n\n    if (a - b == 1 and check(a + b)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "t = int(input())\n\ndef divider(n):\n    i = 2\n    j = 0\n    while i**2 <= n and j != 1:\n        if n%i == 0:\n            j = 1\n        i += 1\n    if j == 1:\n        return False\n    else:\n        return True\n\n\nfor i in range(t):\n    a, b = list(map(int,input().split()))\n    if a-b == 1 and divider(a+b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "def isprime(n):\n    i = 2\n    m = n\n    while (i * i <= n):\n        while (n % i == 0):\n            n /= i\n        i += 1\n    return m == n\n\n\nt = int(input())\nfor i in range(t):\n    a, b = map(int, input().split())\n    if (isprime(a + b) and a - b == 1):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "t=int(input())\na=[]\nb=[]\nfor i in range(t):\n    aa,bb=[int(el) for el in input().split()]\n    a.append(aa)\n    b.append(bb)\n\ndef prost(n):\n    if n==3:\n        return True\n    if n%2==0:\n        return False\n    for i in range (3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n    return\n\nfor i in range(t):\n    if a[i]-b[i]!=1:\n        print ('NO')\n        continue\n    if prost(a[i]+b[i]):\n        print('YES')\n    else:\n        print('NO')\n", "import random\ndef MillerRabinPrimalityTest(number):\n    '''\n    because the algorithm input is ODD number than if we get\n    even and it is the number 2 we return TRUE ( spcial case )\n    if we get the number 1 we return false and any other even \n    number we will return false.\n    '''\n    if number == 2:\n        return True\n    elif number == 1 or number % 2 == 0:\n        return False\n    \n    ''' first we want to express n as : 2^s * r ( were r is odd ) '''\n    \n    ''' the odd part of the number '''\n    oddPartOfNumber = number - 1\n    \n    ''' The number of time that the number is divided by two '''\n    timesTwoDividNumber = 0\n    \n    ''' while r is even divid by 2 to find the odd part '''\n    while oddPartOfNumber % 2 == 0:\n        oddPartOfNumber = oddPartOfNumber // 2\n        timesTwoDividNumber = timesTwoDividNumber + 1 \n     \n    '''\n    since there are number that are cases of \"strong liar\" we \n    need to check more then one number\n    '''\n    for time in range(3):\n        \n        ''' choose \"Good\" random number '''\n        while True:\n            ''' Draw a RANDOM number in range of number ( Z_number )  '''\n            randomNumber = random.randint(2, number)-1\n            if randomNumber != 0 and randomNumber != 1:\n                break\n        \n        ''' randomNumberWithPower = randomNumber^oddPartOfNumber mod number '''\n        randomNumberWithPower = pow(randomNumber, oddPartOfNumber, number)\n        \n        ''' if random number is not 1 and not -1 ( in mod n ) '''\n        if (randomNumberWithPower != 1) and (randomNumberWithPower != number - 1):\n            # number of iteration\n            iterationNumber = 1\n            \n            ''' while we can squre the number and the squered number is not -1 mod number'''\n            while (iterationNumber <= timesTwoDividNumber - 1) and (randomNumberWithPower != number - 1):\n                ''' squre the number '''\n                randomNumberWithPower = pow(randomNumberWithPower, 2, number)\n                \n                # inc the number of iteration\n                iterationNumber = iterationNumber + 1\n            '''     \n            if x != -1 mod number then it because we did not found strong witnesses\n            hence 1 have more then two roots in mod n ==>\n            n is composite ==> return false for primality\n            '''\n            if (randomNumberWithPower != (number - 1)):\n                return False\n            \n    ''' well the number pass the tests ==> it is probably prime ==> return true for primality '''\n    return True\ncases=int(input())\nfor case in range(cases):\n    a,b=map(int,input().split())\n    t=MillerRabinPrimalityTest((a**2)-(b**2))\n    if t:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def divider(n):\n    i = 2\n    j = 0\n    while i**2 <= n and j != 1:\n        if n % i == 0:\n            j = 1\n        i += 1\n    if j == 1:\n        return False\n    else:\n        return True\n\n\ni = int(input())\nfor i in range(i):\n    a, b = list(map(int, input().split()))\n    if a - b == 1 and divider(a+b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "import math\n\ndef is_prime(n):\n    bound = int(math.sqrt(n + 1) + 1)\n    for k in range(2, bound):\n        if n % k == 0:\n            return False\n    return True\n\n\ndef solve():\n    a, b = (int(x) for x in input().split())\n    if a - b != 1:\n        print('NO')\n        return\n\n    if is_prime(a+b):\n        print('YES')\n    else:\n        print('NO')\n\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    solve()\n", "\nimport math as m\ndef f(a):\n\tif (a==2) : return True\n\tfor i in range(2,round(m.sqrt(a))+1):\n\t\tif a%i==0:\n\t\t\treturn False\n\treturn True\n\nt=int(input())\n\n\nfor i in range(t):\n\ta,b=input().split()\n\n\ta=int(a)\n\tb=int(b)\n\n\tif (a-b)==1 and f(a+b) :\n\t\tprint(\"YES\")\n\telse :\n\t\tprint(\"NO\")\n\n"]