["t=int(input())\nno_of_chars = 256\n  \n# Function to find smallest window  \n# containing all characters of 'pat'  \ndef findSubString(string, pat):  \n    len1 = len(string)  \n    len2 = len(pat)  \n    if len1 < len2:  \n      \n        return 0\n    hash_pat = [0] * no_of_chars \n    hash_str = [0] * no_of_chars  \n    for i in range(0, len2):  \n        hash_pat[ord(pat[i])] += 1\n  \n    start, start_index, min_len = 0, -1, float('inf')  \n    count = 0 # count of characters  \n    for j in range(0, len1):  \n        hash_str[ord(string[j])] += 1\n        if (hash_pat[ord(string[j])] != 0 and\n            hash_str[ord(string[j])] <= \n            hash_pat[ord(string[j])]):  \n            count += 1\n        if count == len2:  \n            while (hash_str[ord(string[start])] >  \n                   hash_pat[ord(string[start])] or\n                   hash_pat[ord(string[start])] == 0):  \n              \n                if (hash_str[ord(string[start])] >  \n                    hash_pat[ord(string[start])]):  \n                    hash_str[ord(string[start])] -= 1\n                start += 1\n            len_window = j - start + 1\n            if min_len > len_window:  \n              \n                min_len = len_window  \n                start_index = start  \n    if start_index == -1: \n        return 0\n      \n    # Return substring starting from  \n    # start_index and length min_len  \n    return min_len\nwhile t:\n    t-=1\n    a=input()\n    x=\"123\"\n    print(findSubString(a,x))\n    \n", "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nout = []\n\nfor _ in range(t):\n    s = input().strip()\n    n = len(s)\n    best = n + 1\n    last1 = -best\n    last2 = -best\n    last3 = -best\n    for i in range(n):\n        c = s[i]\n        if c == '1':\n            last1 = i\n        elif c == '2':\n            last2 = i\n        else:\n            last3 = i\n        curr = i - min(last1, last2, last3) + 1\n        best = min(best, curr)\n    if best <= n:\n        out.append(best)\n    else:\n        out.append(0)\nprint(*out, sep = '\\n')\n    \n", "from math import *\nfrom random import *\nfor t in range(int(input())):\n    s = input()\n    n = len(s)\n    p1 = -100000000000\n    p2 = p1\n    p3 = p1\n    otv = 999999999\n    for i in range(n):\n        if s[i] == '1':\n            otv = min(otv, i - min(p2, p3) + 1)\n            p1 = i\n        if s[i] == '2':\n            otv = min(otv, i - min(p1, p3) + 1)\n            p2 = i\n        if s[i] == '3':\n            otv = min(otv, i - min(p2, p1) + 1)\n            p3 = i\n    if otv > len(s):\n        print(0)\n    else:\n        print(otv)", "tt = int(input())\nwhile tt > 0 :\n\ttt -= 1\n\ts = input()\n\tn = len(s)\n\to, t, r= [0] * n, [0] * n, [0] * n\n\to[0] = t[0] = r[0] = -1\n\tans = n + 1\n\tfor i in range(n) :\n\t\tif i > 0 :\n\t\t\to[i] = o[i - 1]\n\t\t\tt[i] = t[i - 1]\n\t\t\tr[i] = r[i - 1]\n\t\tif s[i] == '1' :\n\t\t\to[i] = i\n\t\telif s[i] == '2' :\n\t\t\tt[i] = i\n\t\telse :\n\t\t\tr[i] = i\n\t\tmn = min(o[i], t[i], r[i])\n\t\tif mn > -1 :\n\t\t\tans = min(ans, i - mn + 1)\n\tif ans == n + 1:\n\t\tans = 0\n\tprint(ans)", "import sys\n\nreadline = sys.stdin.readline\nread = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    s = list(map(lambda x:int(x) - 1, list(ns())))\n    n = len(s)\n    l = [3*n]*3\n    ans = 3*n\n    for i in range(n-1, -1, -1):\n        l[s[i]] = i\n        ans = min(ans, max(l) - i + 1)\n    print(ans if ans <= n else 0)\n    return\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n", "t = int(input())\nfor _ in range(t):\n    s = input()\n    a = -1\n    b = -1\n    c = -1\n    mn = 10 ** 9\n    for i in range(len(s)):\n        if s[i] == '1':\n            a = i\n        elif s[i] == '2':\n            b = i\n        else:\n            c = i\n        if a != -1 and b != -1 and c != -1:\n            mn = min(mn, max(a, b, c) - min(a, b, c) + 1)\n    if mn == 10 ** 9:\n        print(0)\n    else:\n        print(mn)\n\n", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    s = input()\n    cnt = dict()\n    cnt['1'] = 0\n    cnt['2'] = 0\n    cnt['3'] = 0\n    ans = len(s) + 1\n    l = 0\n    r = -1\n    while r < len(s):\n        while cnt['1'] == 0 or cnt['2'] == 0 or cnt['3'] == 0:\n            r += 1\n            if r >= len(s):\n                break\n            cnt[s[r]] += 1\n        if cnt['1'] > 0 and cnt['2'] > 0 and cnt['3'] > 0:\n            ans = min(ans, r - l + 1)\n        cnt[s[l]] -= 1\n        l += 1\n    print(ans if ans <= len(s) else 0)\n", "for nt in range(int(input())):\n\ts=input()\n\tn=len(s)\n\tarr=[]\n\tc=1\n\tprev=s[0]\n\tfor i in range(1,n):\n\t\tif s[i]==prev:\n\t\t\tc+=1\n\t\telse:\n\t\t\tarr.append((prev,c))\n\t\t\tprev=s[i]\n\t\t\tc=1\n\tarr.append((prev,c))\n\t# print (arr)\n\tm=10**9\n\tfor i in range(len(arr)-2):\n\t\tif arr[i][0]!=arr[i+1][0] and arr[i][0]!=arr[i+2][0]:\n\t\t\tm=min(m,arr[i+1][1]+2)\n\tif m==10**9:\n\t\tprint (0)\n\telse:\n\t\tprint (m)", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n \nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nfor _ in range(val()):\n    i = j = 0\n    s = li3()\n    n = len(s)\n    a = b = c = 0\n    ans = float('inf')\n    # print(s)\n    while j < len(s):\n        if s[j] == 1:a += 1\n        elif s[j] == 2:b += 1\n        else:c += 1\n        if a and b and c:\n            while i < j:\n                if s[i] == 1:\n                    if a > 1:a -= 1\n                    else:break\n                elif s[i] == 2:\n                    if b > 1:b -= 1\n                    else:break\n                else:\n                    if c > 1:c -= 1\n                    else:break\n                i += 1\n            ans = min(ans,j - i + 1)\n        j += 1\n    if ans != float('inf'):\n        print(ans)\n    else:print(0)"]