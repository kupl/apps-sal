["n = int(input())\n\nbestP = 10**9\nsol = 0\nfor i in range(0, n):\n    a, p = list(map(int, input().split()))\n\n    bestP = min(bestP, p)\n    sol += a * bestP\n\nprint(sol)\n", "n = int(input())\nmini = 10 ** 9 + 7\nsum = 0\nfor i in range(n):\n    a, p = list(map(int, input().split()))\n    mini = min(mini, p)\n    sum += mini * a\nprint(sum)\n    \n", "n = int(input())\nans = 0\nminp = 10**10\nfor i in range(n):\n    a, p = list(map(int, input().split()))\n    if p < minp:\n        minp = p\n    ans += a*minp\nprint(ans)\n", "ans, cur = 0, 1 << 179\nfor i in range(int(input())):\n    a, p = list(map(int, input().split()))\n    cur = min(cur, p)\n    ans += a * cur\nprint(ans)\n", "n = int(input())\ns = 0\nmi = 1e9\nfor i in range(n):\n    a, p = map(int, input().split())\n    mi = min(mi, p)\n    s += a * mi\nprint(s)", "n=int(input())\np=[list(map(int,input().split())) for i in range(n)]\nm=1000\ns=0\nfor x in p:\n   if m>x[1]: m=x[1]\n   s+=x[0]*m\nprint(s)", "n = int(input())\nx = []\ny = []\nm = 101\nr = 0\nfor i in range(n):\n    a,b = list(map(int,input().split()))\n    if b<m:\n        m = b\n    r = r + a*m\n\nprint (r)\n", "n = int(input())\na = []\np = []\nprev = 1e9\nans = 0\nfor i in range(n):\n    x, y = map(int, input().split())\n    if y < prev:\n        prev = y\n    ans += x * prev\nprint(ans)", "import sys\n\nn = int(input())\nmenor = 10000000\nsum = 0\nfor i in range(n):\n    line = input()\n    v = [int(x) for x in line.split()]\n    if(v[1] < menor):\n        menor = v[1]\n    sum += menor*v[0]\nprint(sum)", "n = int(input())\n\npmin = 1000\n\nsum = 0\n\nfor i in range(n):\n    a, p = map(int, input().split())\n    if p < pmin:\n        pmin = p\n    sum += a * pmin\n    \nprint(sum)", "n = int(input())\nprice = [0 for i in range(n)]\nreq = [0 for i in range(n)]\nfor i in range(n):\n    req[i], price[i] = map(int, input().split())\n\ncur_min = price[0]\nans = 0\nfor i in range(n):\n    cur_min = min([price[i], cur_min])\n    ans += cur_min*req[i]\nprint(ans)", "n = int(input())\na, p = list(map(int, input().split()))\nminpref = p\nans = a * p\nfor i in range(n - 1):\n    a, p = list(map(int, input().split()))\n    minpref = min(minpref, p)\n    ans += a * minpref\nprint(ans)\n    \n", "import sys\n\n\n#sys.stdin = open(\"input.txt\")\n#sys.stdout = open(\"output.txt\", \"w\")\n\nn = int(input())\na = []\np = []\nfor i in range(n):\n\tx, y = [int(i) for i in input().split()]\n\ta.append(x)\n\tp.append(y)\n\nans, price = 0, p[0]\nfor i in range(n):\n\tprice = min(price, p[i])\n\tans += a[i] * price\n\nprint(ans)\n\n", "n = int(input())\nminn = 101\nans = 0\nfor i in range(n):\n    a, p = input().split()\n    a = int(a)\n    p = int(p)\n    if p < minn:\n        minn = p\n    ans += minn*a\nprint(ans)", "def __starting_point():\n    n = int(input())\n    prices = []\n    needs = []\n\n    for i in range(n):\n        n, p = map(int, input().split())\n        prices.append(p)\n        needs.append(n)\n\n    total = 0\n    curr = needs[0]\n    curr_p = prices[0]\n\n    for i in range(1, len(prices)):\n        if prices[i] < curr_p:\n            total += curr_p * curr\n            curr = 0\n            curr_p = prices[i]\n\n        curr += needs[i]\n\n    total += curr_p * curr\n\n    print(total)\n__starting_point()", "n = int(input())\na = [0] * n\np = [0] * n\nfor i in range(n):\n    a[i], p[i] = map(int, input().split())\nminP = [p[0]] * n\nfor i in range(1, n):\n    minP[i] = min(minP[i - 1], p[i])\nans = 0\nfor i in range(n):\n    ans += a[i] * minP[i]\nprint(ans)", "n = int(input())\n\na = []\np = []\ndp = []\n\nfor i in range(n):\n    cur1, cur2 = map(int, input().split())\n    a.append(cur1)\n    p.append(cur2)\n\ndp.append(p[0])\nsum = p[0] * a[0]\n\nfor i in range(1, n):\n    if p[i] >= dp[-1]:\n        dp.append(dp[-1])\n    else:\n        dp.append(p[i])\n    sum += dp[-1] * a[i]\n\nprint(sum)", "n = int(input())\nans = 0\ncurMin = 101\nfor i in range(n):\n    a, p = list(map(int,input().strip().split()))\n    curMin = min(p, curMin)\n    ans += a*curMin\n\nprint(ans)\n", "n = int(input())\nmeat = [0] * n\nprice = [0] * n\nfor i in range(n):\n    meat[i], price[i] = list(map(int, input().split()))\nmin_price = price[0]\nans = 0\nfor i in range(n):\n    min_price = min(min_price, price[i])\n    ans += min_price * meat[i]\nprint(ans)\n", "n = int(input())\na = []\np = []\n\nfor i in range(n):\n    ai, pi = list(map(int, input().split()))\n    a.append(ai)\n    p.append(pi)\n\ncost = 0\nmeat = 0\nfor i in range(n):\n    if meat == 0:\n        cost += p[i] * a[i]\n        meat += a[i]\n        for j in range(i+1, n):\n            if p[j] < p[i]:\n                break\n            cost += p[i] * a[j]\n            meat += a[j]\n\n    meat -= a[i]\n\nprint(cost)\n\n", "from itertools import islice\n\nn = int(input())\na = [0] * n\np = [0] * n\nfor i in range(n):\n    a[i], p[i] = list(map(int, input().split()))\nprev_price = p[0]\nresult = 0\ns = a[0]\nfor i in range(1, n):\n    if p[i] < prev_price:\n        result += prev_price * s\n        s = a[i]\n        prev_price = p[i]\n    else:\n        s += a[i]\nprint(result + prev_price * s)\n", "n = int(input())\n\ncurr_p = 1000\ncurr_meat = 0\ncoast = 0\n\nfor i in range(n):\n    a, p = map(int, input().split())\n    if p < curr_p:\n        coast += curr_p * curr_meat\n        curr_p = p\n        curr_meat = a\n    else:\n        curr_meat += a\n\ncoast += curr_p * curr_meat\nprint(coast)", "n = int(input())\na, p = [], []\nfor _ in range(n):\n    x,y = map(int, input().split())\n    a.append(x)\n    p.append(y)\n    \ncur_min = float('inf')\ncost = 0\n\nfor i in range(n):\n    cur_min = min(cur_min, p[i])\n    cost += cur_min * a[i]\nprint(cost)", "n = int(input())\nans = 0\nmoney = float('inf')\nfor i in range(n):\n    a, b = map(int, input().split())\n    money = min(money, b)\n    ans += money * a\nprint(ans)", "# import sys\n# sys.stdin = open('cf588a.in')\n\nn = int(input())\nvals = [tuple(int(v) for v in input().split()) for _ in range(n)]\n\nother = [(p, i) for i, (a, p) in enumerate(vals)]\nother.sort()\n\nlast = n\nans = 0\n\nfor p, i in other:\n\tif i > last:\n\t\tcontinue\n\tans += sum(a for a, pp in vals[i:last]) * p\n\tlast = i\n\tif last == 0:\n\t\tbreak\n\nprint(ans)"]