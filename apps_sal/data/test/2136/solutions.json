["for _ in range(int(input())):\n    n = int(input())\n    arr = [list(input()) for _ in range(n)]\n    res = []\n    if arr[n-2][n-1] == arr[n-1][n-2]:\n        if arr[0][1] == arr[n-2][n-1]:\n            res.append((1, 2))\n        if arr[1][0] == arr[n-2][n-1]:\n            res.append((2, 1))\n    elif arr[0][1] == arr[1][0]:\n        if arr[n-2][n-1] == arr[0][1]:\n            res.append((n-1, n))\n        if arr[n-1][n-2] == arr[0][1]:\n            res.append((n, n-1))\n    else:\n        if arr[0][1] == \"1\":\n            res.append((1, 2))\n        if arr[1][0] == \"1\":\n            res.append((2, 1))\n        if arr[n-2][n-1] == \"0\":\n            res.append((n-1, n))\n        if arr[n-1][n-2] == \"0\":\n            res.append((n, n-1))\n    print(len(res))\n    for e in res:\n        print(*e)\n", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    maze = [input().strip() for _ in range(n)]\n    ans = []\n    if maze[0][1] == \"0\":\n        ans.append((1, 2))\n    if maze[1][0] == \"0\":\n        ans.append((2, 1))\n    if maze[n - 1][n - 2] == \"1\":\n        ans.append((n, n - 1))\n    if maze[n - 2][n - 1] == \"1\":\n        ans.append((n - 1, n))\n    if len(ans) <= 2:\n        print(len(ans))\n        for row in ans:\n            print(*row)\n        return\n    ans = []\n    if maze[0][1] == \"1\":\n        ans.append((1, 2))\n    if maze[1][0] == \"1\":\n        ans.append((2, 1))\n    if maze[n - 1][n - 2] == \"0\":\n        ans.append((n, n - 1))\n    if maze[n - 2][n - 1] == \"0\":\n        ans.append((n - 1, n))\n    if len(ans) <= 2:\n        print(len(ans))\n        for row in ans:\n            print(*row)\n    \nfor _ in range(int(input())):\n    main()", "l = [(1, 0), (0, 1), (-1, -2), (-2, -1)]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = [input() for _ in range(n)]\n    cnt = 0\n    for x, y in l:\n        if (s[x][y] == '1') ^ (x >= 0):\n            cnt += 1\n    if cnt >= 2:\n        print(4 - cnt)\n        for x, y in l:\n            if (s[x][y] == '1') ^ (x < 0):\n                print(x % n + 1, y % n + 1)\n    else:\n        print(cnt)\n        for x, y in l:\n            if (s[x][y] == '1') ^ (x >= 0):\n                print(x % n + 1, y % n + 1)\n", "def main():\n    n = int(input())\n    lst = []\n    for i in range(n):\n        line = input()\n        lst.append(line)\n    top_left = lst[0][1]\n    top_right = lst[1][0]\n    bot_left = lst[n - 1][n - 2]\n    bot_right = lst[n - 2][n - 1]\n    if top_left == top_right:\n        if bot_left == bot_right and bot_left == top_left:\n            print(2)\n        elif bot_left != bot_right:\n            print(1)\n        else:\n            print(0)\n        if bot_left == top_left:\n            print(n, n - 1)\n        if bot_right == top_right:\n            print(n - 1, n)\n    elif bot_left == bot_right:\n        print(1)\n        if bot_left == top_left:\n            print(1, 2)\n        if bot_right == top_right:\n            print(2, 1)\n    else:\n        print(2)\n        print(2, 1)\n        if bot_left == top_left:\n            print(n, n - 1)\n        else:\n            print(n - 1, n)\n\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n  N = int(input())\n  a = [list(input())[: -1] for _ in range(N)]\n  res = []\n  if a[0][1] == a[1][0]:\n    x = a[0][1]\n    if a[-1][-2] == x: res.append((N, N - 1))\n    if a[-2][-1] == x: res.append((N - 1, N))\n  else:\n    if a[-1][-2] == a[-2][-1]:\n      x = a[-1][-2]\n      if a[0][1] == x: res.append((1, 2))\n      if a[1][0] == x: res.append((2, 1))\n    else:\n      x = a[0][1]\n      res.append((2, 1))\n      if a[-1][-2] == x: res.append((N, N - 1))\n      if a[-2][-1] == x: res.append((N - 1, N))\n  print(len(res))\n  for r in res: print(*r)", "def st(a, b):\n    return str(a + 1) + ' ' + str(b + 1)\n\n\nans = []\nfor _ in range(int(input())):\n    n = int(input())\n    u = []\n    for i in range(n):\n        u.append(list(input()))\n    a = [u[0][1], u[1][0], u[n - 1][n - 2], u[n - 2][n - 1]]\n    if a[0] == a[1] and a[2] == a[3]:\n        if a[1] != a[2]:\n            ans.append(0)\n        else:\n            ans.append(2)\n            ans.append(st(0, 1))\n            ans.append(st(1, 0))\n    elif a[0] == a[1]:\n        ans.append(1)\n        if a[2] == a[1]:\n            ans.append(st(n - 1, n - 2))\n        else:\n            ans.append(st(n - 2, n - 1))\n    elif a[2] == a[3]:\n        ans.append(1)\n        if a[0] == a[2]:\n            ans.append(st(0, 1))\n        else:\n            ans.append(st(1, 0))\n    else:\n        ans.append(2)\n        if a[0] == a[2]:\n            ans.append(st(0, 1))\n            ans.append(st(n - 2, n - 1))\n        else:\n            ans.append(st(0, 1))\n            ans.append(st(n - 1, n - 2))\nprint('\\n'.join(map(str, ans)))\n", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = []\n    for i in range(n):\n        a.append(input())\n    ans = []\n    pos = [(0, 1), (1, 0), (n - 1, n - 2), (n - 2, n - 1)]\n    target = '0011'\n    for i, p in enumerate(pos):\n        if a[p[0]][p[1]] != target[i]:\n            ans.append((p[0] + 1, p[1] + 1))\n    if len(ans) <= 2:\n        print(len(ans))\n        for r, c in ans:\n            print(r, c)\n    else:\n        target = '1100'\n        ans = []\n        for i, p in enumerate(pos):\n            if a[p[0]][p[1]] != target[i]:\n                ans.append((p[0] + 1, p[1] + 1))\n        print(len(ans))\n        for r, c in ans:\n            print(r, c)\n", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    n = val()\n    l = []\n    for i in range(n):l.append(list(st()))\n\n\n    ans = []\n    if l[0][1] == l[1][0]:\n        if l[-1][-2] == l[0][1]:\n            ans.append([n - 1, n - 2])\n        if l[-2][-1] == l[0][1]:\n            ans.append([n - 2, n - 1])\n    else:\n        if l[-1][-2] == l[-2][-1]:\n            if l[-1][-2] == l[0][1]:\n                ans.append([0, 1])\n            else:\n                ans.append([1, 0])\n        else:\n            if l[-1][-2] == l[0][1]:\n                ans.append([0, 1])\n                ans.append([n - 2, n - 1])\n            else:\n                ans.append([1, 0])\n                ans.append([n - 2, n - 1])\n    \n    print(len(ans))\n    for i in ans:\n        print(i[0] + 1, i[1] + 1)\n", "T = int(input())\n\nfor t in range(T):\n    N = int(input())\n    M = []\n    for i in range(N):\n        M.append(input())\n\n    inverts = []\n    if M[0][1] == '0' and M[1][0] == '0':\n        if M[N-2][N-1] == '0':\n            inverts.append((N-2, N-1))\n        if M[N-1][N-2] == '0':\n            inverts.append((N-1, N-2))\n    elif M[0][1] == '1' and M[1][0] == '1':\n        if M[N-2][N-1] == '1':\n            inverts.append((N-2, N-1))\n        if M[N-1][N-2] == '1':\n            inverts.append((N-1, N-2))\n    elif M[0][1] == '0' and M[1][0] == '1':\n        if M[N-2][N-1] == '1' and M[N-1][N-2] == '1':\n            inverts.append((1, 0))\n        if M[N-2][N-1] == '0' and M[N-1][N-2] == '0':\n            inverts.append((0, 1))\n        if M[N-2][N-1] == '1' and M[N-1][N-2] == '0':\n            inverts.append((1, 0))\n            inverts.append((N-1, N-2))\n        if M[N-2][N-1] == '0' and M[N-1][N-2] == '1':\n            inverts.append((1, 0))\n            inverts.append((N-2, N-1))\n    elif M[0][1] == '1' and M[1][0] == '0':\n        if M[N-2][N-1] == '0' and M[N-1][N-2] == '0':\n            inverts.append((1, 0))\n        if M[N-2][N-1] == '1' and M[N-1][N-2] == '1':\n            inverts.append((0, 1))\n        if M[N-2][N-1] == '0' and M[N-1][N-2] == '1':\n            inverts.append((1, 0))\n            inverts.append((N-1, N-2))\n        if M[N-2][N-1] == '1' and M[N-1][N-2] == '0':\n            inverts.append((1, 0))\n            inverts.append((N-2, N-1))\n\n    print(len(inverts))\n    for i in inverts:\n        print(i[0]+1, i[1]+1)\n", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = [input() for i in range(n)]\n\n    a = arr[0][1]\n    b = arr[1][0]\n    c = arr[n-2][n-1]\n    d = arr[n-1][n-2]\n\n    if (a == b):\n        ans = []\n        if c == a:\n            ans.append([n-1, n])\n        if d == a:\n            ans.append([n, n-1])\n\n        print(len(ans))\n        for item in ans:\n            print(item[0], item[1])\n\n    elif (c == d):\n        ans = []\n        if c == a:\n            ans.append([1, 2])\n        if c == b:\n            ans.append([2, 1])\n\n        print(len(ans))\n        for item in ans:\n            print(item[0], item[1])\n\n    else:\n        if (a == c) and (b == d):\n            print(2)\n            print(1, 2)\n            print(n, n-1)\n        else:\n            print(2)\n            print(2, 1)\n            print(n, n-1)\n    \n", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n=int(input())\n    grid=[]\n    for i in range(n):\n        line=input()\n        line=line[0:n]\n        grid.append(line)\n    if grid[0][1]==grid[1][0]:\n        c=0\n        cs=[]\n        if grid[-1][-2]==grid[0][1]:\n            c+=1\n            cs.append([n,n-1])\n        if grid[-2][-1]==grid[0][1]:\n            c+=1\n            cs.append([n-1,n])\n        print(c)\n        for x in cs:\n            print(*x)\n    else:\n        if grid[-1][-2]==grid[-2][-1]:\n            print(1)\n            if grid[0][1]==grid[-1][-2]:\n                print(1,2)\n            else:\n                print(2,1)\n        else:\n            print(2)\n            print(2,1)\n            if grid[-2][-1]==grid[0][1]:\n                print(n-1,n)\n            else:\n                print(n,n-1)", "for _ in range(int(input())):\n    n=int(input())\n    a=[]\n    for i in range(n):\n        s=input()\n        t=[]\n        for j in s:\n            t.append(j)\n        a.append(t)\n    if a[0][1]==a[1][0]:\n        if a[n-1][n-2]==a[n-2][n-1]:\n            if a[n-1][n-2]==a[0][1]:\n                print(2)\n                print(n,n-1)\n                print(n-1,n)\n            else:\n                print(0)\n        else:\n            if a[n-1][n-2]==a[0][1]:\n                print(1)\n                print(n,n-1)\n            else:\n                print(1)\n                print(n-1,n)\n    else:\n        if a[n-1][n-2]==a[n-2][n-1]:\n            if a[n-1][n-2]==a[0][1]:\n                print(1)\n                print(1,2)\n            else:\n                print(1)\n                print(2,1)\n        else:\n            print(2)\n            if a[0][1]=='0':\n                print(2,1)\n            else:\n                print(1,2)\n            if a[n-1][n-2]=='1':\n                print(n-1,n)\n            else:\n                print(n,n-1)\n", "import sys\ninput = lambda: sys.stdin.readline().rstrip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = []\n    for _ in range(n):\n        s.append(input())\n    x0, x1, x2, x3 = int(s[0][1]), int(s[1][0]), int(s[-1][-2]), int(s[-2][-1])\n    ans = []\n    if x0==1:\n        ans.append((1, 2))\n    if x1==1:\n        ans.append((2, 1))\n    if x2==0:\n        ans.append((n, n-1))\n    if x3==0:\n        ans.append((n-1, n))\n    if len(ans)<=2:\n        print(len(ans))\n        for i in ans:\n            print(*i)\n        continue\n    ans = []\n    if x0==0:\n        ans.append((1, 2))\n    if x1==0:\n        ans.append((2, 1))\n    if x2==1:\n        ans.append((n, n-1))\n    if x3==1:\n        ans.append((n-1, n))\n    print(len(ans))\n    for i in ans:\n        print(*i)", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    B = [input() for _ in range(n)]\n    a,b = list(map(int, (B[0][1],B[1][0])))\n    c,d = list(map(int, (B[-1][-2],B[-2][-1])))\n\n    ans = []\n    if abs(a-1)+abs(b-1) + abs(c-0)+abs(d-0) <= 2:\n        if a == 0:\n            ans.append((1, 2))\n        if b == 0:\n            ans.append((2, 1))\n        if c == 1:\n            ans.append((n, n-1))\n        if d == 1:\n            ans.append((n-1, n))\n    else:\n        if a == 1:\n            ans.append((1, 2))\n        if b == 1:\n            ans.append((2, 1))\n        if c == 0:\n            ans.append((n, n-1))\n        if d == 0:\n            ans.append((n-1, n))\n    print(len(ans))\n    for p in ans:\n        print(*p)\n", "def testcase():\n\n    n = int(input())\n    grid = []\n    for _ in range(n):\n        grid.append(input())\n\n    s1, s2 = grid[0][1], grid[1][0]\n    f1, f2 = grid[-1][-2], grid[-2][-1]\n\n    if s1 == s2:\n        if f1 == f2:\n            if s1 == f1:\n                print(2)\n                print(1, 2)\n                print(2, 1)\n                return\n            else:\n                print(0)\n                return\n        else:\n            if s1 == f1:\n                print(1)\n                print(n, n - 1)\n                return\n            if s2 == f2:\n                print(1)\n                print(n - 1, n)\n                return\n    else:\n        if f1 == f2:\n            if s1 == f1:\n                print(1)\n                print(1, 2)\n                return\n            if s2 == f2:\n                print(1)\n                print(2, 1)\n                return\n        else:\n            x = s2\n            print(2)\n            print(2, 1)\n            if f1 == x:\n                print(n - 1, n)\n            else:\n                print(n, n - 1)\n\n\n\n    return\n\nt = int(input())\nfor _ in range(t):\n    testcase()"]