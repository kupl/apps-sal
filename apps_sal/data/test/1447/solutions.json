["n, m = map(int, input().split())\n\nif n == 1:\n    print(1)\nelse:\n    print('{:9}'.format((n-1)/n * (m - 1) / (n*m - 1) + 1 / n))", "F=[1,1]\nfor i in range(2,1001):\n    F.append(F[-1]*i)\ndef ncr(x,y):\n    return F[x]//(F[y]*F[x-y])\n\nn,m=list(map(int,input().split()))\nP=[0]*2000\n\nfor j in range(1,min(m,n)+1):\n    mine=m\n    total=n*m\n    p=1\n    for x in range(j):\n        p*=mine/total\n        mine-=1\n        total-=1\n    for x in range(n-j):\n        p*=(total-mine)/total\n        total-=1\n    p*=n\n    p*=ncr(n,j)\n    P[j]=p\n\nans=0\n\nfor j in range(1,min(m,n)+1):\n    # What is the probability that the deck will contain j cards of type i\n    p=P[j]\n    ans+=P[j]*(j*j)/(n*n)\nprint(ans)\n", "from math import *\n\n# logger[n] = log(n!)\nlogger = []\nfor n in range(1000111):\n    if n == 0:\n        logger.append(log(factorial(0)))\n    else:\n        logger.append(logger[n - 1] + log(n))\n\ndef binomial(n, k):\n    if k < 0:\n        return 0\n    tmp = logger[n] - logger[k] - logger[n - k]\n    return tmp\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        tmp = binomial((n-1)*m, n-1-i) + binomial(m-1, i) + log(i + 1)\n        tmp -= (log(n) + binomial(n*m - 1, n - 1))\n        ans += exp(tmp)\n    print('%.12lf' % ans)\n\nmain()", "# -- code beginning\nimport sys\nn, m = list(map(int, sys.stdin.read().split()))\nif m * n == 1: print(1)\nelse: print(1-((m*(n-1)**2)/((m*n-1)*n)))\n", "n, m = map(int, input().split())\nif n == 1 and m == 1:\n    print(1)\nelse:\n    print(1 / n + ((n - 1) / n) * (m - 1) / (n * m - 1))", "n, m=(int(x) for x in input().split(' '))\nif n!=1 or m!=1:\n    print(1/n+(n-1)/n*(m-1)/(m*n-1))\nelse:\n    print(1)\n", "n, m = list(map(int, input().split()))\nprint('{:.9}'.format((1 + (n - 1) * (m - 1) / (n * m - 1)) / n if n > 1 or m > 1 else 1.0))\n", "n, m = list(map(int, input().split()))\nprint('{:.9}'.format((1 + (n - 1) * (m - 1) / (n * m - 1)) / n) if n > 1 or m > 1 else 1)\n", "n,m=map(int,input().split())\nif n*m==1:\n    print(1)\nelse:\n    print(1/n+(n-1)*(m-1)/(n*(n*m-1)))", "n, m = map(int, input().split())\nt = m * n\nprint(1 if t == 1 else (2 * t - (m + n)) / (n * (t - 1)))", "n, m = map(float, input().split())\nif n == 1 and m == 1 :\n    print(1)\nelse :\n    print(1 / n + (n - 1) * (m - 1) / n / (n * m - 1))", "n,m=list(map(int,input().split()))\nprint(1.0 if n==m==1 else 1/n*((n-1)*(m-1)/(n*m-1)+1))\n", "import itertools\nimport math\n\n\nS = 1000000\n\n\ndef __starting_point():\n    fact = list(itertools.accumulate(list(range(S + 1)), lambda x, y: x + math.log(y)))\n    n, m = [int(x) for x in input().split()]\n    res = 0.0\n    for i in range(1, min(n, m) + 1):\n        res += math.exp(\n                math.log(n) + (fact[m] - fact[i] - fact[m - i]) +\\\n                        (fact[(n - 1) * m] - fact[n - i] - fact[(n - 1) * m - n + i]) -\\\n                        (fact[n * m] - fact[n] - fact[n * m - n]) +\\\n                        math.log((1.0 * i / n) ** 2))\n    print(res)\n\n__starting_point()", "m, n = map(int, input().split())\n\nif m == 1:\n    print(1)\nelse:\n    print(1 / m + (n - 1) * (m - 1) / (m * (m * n - 1)))", "n,m=map(int,input().split())\nprint(1.0 if n==m==1 else ((n*m-n-m+1)/(n*m-1)+1)/n)", "import sys\nimport os\n\nn,m = map(float, sys.stdin.readline().split())\n\nres = 0\nif (n == 1):\n    res = 1\nelse:\n    res = (1+(n-1)*(m-1)/(n*m-1))/n\nprint(res)", "def main():\n    n, m = list(map(int, input().split()))\n    if n == 1 == m:\n        res = 1.\n    else:\n        res = (2 * n * m - n - m) / (n * m - 1) / n\n\n    print('{:.16f}'.format(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m = map(float, input().split())\nif n==1:print(1)\nelse:print((1+(n-1)*(m-1)/(n*m-1))/n)", "import math\nimport decimal\nimport functools\n\n\n@functools.lru_cache(maxsize=None)\ndef factorial(n):\n    return math.factorial(n)\n\n\n@functools.lru_cache(maxsize=None)\ndef binomial(k, n):\n    if k > n // 2:\n        return product(list(range(k + 1, n + 1))) / factorial(n - k)\n    else:\n        return product(list(range(n - k + 1, n + 1))) / factorial(k)\n\n\ndef P(k, n, m):\n    return k ** 2 / n * binomial(k, n) * product((m - i) / (m * n - i) for i in range(k)) * product(\n        (m * n - i - (m - k)) / (m * n - i) for i in range(k, n))\n\n\ndef product(iterable):\n    res = 1\n    for e in iterable:\n        res *= e\n    return res\n\n\ndef solve(n, m):\n    return sum(P(k, n, m) for k in range(1, min(n, m) + 1))\n\n\ndef __starting_point():\n    n, m = list(map(int, input().split()))\n    print(solve(n, m))\n\n__starting_point()", "S=str(input())\nl=list(map(int, S.split(' ')))\nn,m=l[0],l[1]\nS=0\nt=1/n\nl=m*n-m-n\ny=min(n,m)\nz=max(n,m)\nfor i in range(1,y+1):\n    if i>1:\n        t=t*i*(m+1-i)*(m*n-z-i+2)*(n+1-i)/((i-1)*(i-1)*(l+i)*(n*m-i+1))\n    S=S*(m*n-z-i+2)/(n*m-i+1)+t\nprint(S)", "var=input(\"\")\nvar=var.split(\" \")\nx=int(var[0])\ny=int(var[1])\nif x==1 and y==1:\n    print( \"1\")\nelse:\n    p1=(y-1)/(x*y-1)\n    p2=(1-p1)*(1/x)\n    print(p1+p2)\n    \n", "n, m = map(int, input().split())\n\nprint(1 if n*m == 1 else 1/n + (n-1) / n * (m-1) / (n*m - 1))", "n, m = list(map(int, input().split()))\nif 1 == n:\n    print(1)\nelse:\n    print(1 / n + (n - 1) * (m - 1) / (n * (n * m - 1)))\n", "m, n = map(int, input().split())\nif m == 1:\n    print(1)\nelse:\n  print(1/m + (m-1)/m*(n-1)/(n*m-1))", "n,m=list(map(int,input().split()))\n\nprint(1.0 if n==m==1 else 1/n*((n-1)*(m-1)/(n*m-1)+1))\n\n\n\n\n\n# Made By Mostafa_Khaled\n"]