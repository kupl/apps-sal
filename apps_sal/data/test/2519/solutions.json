["n,k = map(int, input().split())\nP = list(map(int, input().split()))\ne = []\nfor i in P:\n    e.append((i+1)/2)\ncumsum = [0]*(n+1)\nfor i in range(1,n+1):\n    cumsum[i] = cumsum[i-1]+e[i-1]\nk_sum = cumsum.copy()\nfor i in range(n+1):\n    if i>=k:\n        k_sum[i] -= cumsum[i-k]\nprint(max(k_sum[k-1:]))", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nimport numpy as np\ndef main():\n    n, k = list(map(int, input().split()))\n    p = np.array(read().split(), np.int32)\n    p += 1\n    pcum = np.zeros(n + 1, np.int32)\n    pcum[1:] = p.cumsum()\n    sum_k = pcum[k:] - pcum[:-k]\n    print((sum_k.max()/2))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N,K = map(int,input().split())\nP = list(map(int,input().split()))\nT = [0]*N\n\nfor i in range(N):\n    P[i] = (1 + P[i])/2\n\nif N == K:\n    print(sum(P))\n\nelse:\n    for i in range(1,N):\n        P[i] += P[i-1]\n\n    for i in range(K,N):\n        T[i] = P[i] - P[i-K]\n\n    T = T[K:]\n\n    print(max(T))", "def dice_expectation(p):\n  return ((1 + p) * p / 2) * (1/p)\n\nn, k = list(map(int, input().split()))\npp = [0] * (n+1)\nfor i, p in enumerate(map(int, input().split())):\n  pp[i+1] = pp[i] + dice_expectation(p)\n\nmax = -1\nfor i in range(k, n+1, 1):\n  max = pp[i] - pp[i-k] if pp[i] - pp[i-k] > max else max\n\nprint(max)\n", "n, k = map(int, input().split())\np = list(map(int, input().split()))\ntotal = sum([((p[i]*(p[i]+1))//2)/p[i] for i in range(k)])\nans = total\nfor i in range(k, n):\n    pre = ((p[i-k]*(p[i-k]+1))//2)/p[i-k]\n    nxt = ((p[i]*(p[i]+1))//2)/p[i]\n\n    ans = max(ans, total-pre+nxt)\n    total = total-pre+nxt\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep  7 22:29:36 2020\n\n@author: liang\n\"\"\"\nN, K = map(int, input().split())\n\nP = [1 + (int(p)-1)*0.5 for p in input().split()]\n#print(P)\n\ntmp = sum(P[:K])\nans = tmp\nfor i in range(N-K):\n    tmp += P[K+i] - P[i]\n    if tmp > ans:\n        ans = tmp\n    \nprint(ans)", "def expect(n):\n        return (n+1)/2\n\nnk = input().split()\nN = int(nk[0])\nK = int(nk[1])\np = input().split()\n\ntmp = 0\nfor i in range (K):\n    tmp += expect(int(p[i]))\n\ntmpMax = tmp\n\nfor i in range(N - K):\n    tmp -= expect(int(p[i]))\n    tmp += expect(int(p[i+K]))\n    tmpMax = max(tmpMax, tmp)\n\nprint(tmpMax)\n\n", "n,k=map(int,input().split())\np=list(map(int,input().split()))\ndata=[0]*n\nfor i in range(n):\n  data[i]=p[i]/2+float(0.5)\nres=sum(data[0:k])\nans=sum(data[0:k])\nfor i in range(n-k):\n  res-=data[i]-data[i+k]\n  ans=max(ans,res)\nprint(ans)", "N,K=map(int,input().split())\n*P,=map(int,input().split())\n\nQ=[(i+1)/2 for i in P]\n\np=ans=sum(Q[:K])\n\nfor i in range(N-K):\n    p=p-Q[i]+Q[i+K]\n    # print(i, ans, t,i+K,Q[i],Q[i+K])\n    ans=max(ans, p)\nprint(ans)", "N, K = list(map(int, input().split()))\nP = list(map(int, input().split()))\n\nE = []\n\nfor i in range(N):\n    E.append((P[i]+1)/2)\n\ntnt = sum(E[:K])\nans = tnt\n\nfor i in range(N-K):\n    tnt = tnt + E[K+i] - E[i]\n    ans = max(ans, tnt)\n\nprint(ans)\n", "def f(x):\n    x = int(x)\n    return x*(x+1)//2/x\n\nn, k = list(map(int, input().split()))\np = list(map(f, input().split()))\n\ns = sum(p[:k])\na = s\nfor i in range(k, len(p)):\n    s += p[i] - p[i-k]\n    a = max(a, s)\n\nprint(a)\n", "N, K = list(map(int, input().split()))\np = list(map(int, input().split()))\n\nI = [0] * N\nfor i in range(N):\n    I[i] = (p[i] + 1) / 2\n\nS = sum(I[:K])\nans = S\nl = 0\nr = K\nwhile r < N:\n    S = S - I[l] + I[r]\n    ans = max(ans, S)\n    l += 1\n    r += 1\n\nprint(ans)\nreturn\n\n\n", "from itertools import accumulate\nN, K = list(map(int, input().split()))\nP = list(map(int, input().split()))\n\nP = [((x+1) * x / 2) / x for x in P]\nA = list(accumulate(P))\n\nans = A[K-1]\nfor i in range(K, N):\n    ans = max(ans, A[i] - A[i-K])\n\nprint(ans)\n", "n,k = map(int,input().split())\ns = list(map(int,input().split()))\nnum =0\nw =[]\nw = [1+0.5*(i-1) for i in s]\ncnt =sum(w[:k])\nans = cnt\nfor i in range(n-k):\n    cnt -= w[i]\n    cnt += w[i+k]\n    if cnt > ans:\n        ans = cnt\nprint(ans)", "from collections import deque\nn, k = list(map(int, input().split()))\np = list(map(int,input().split()))\n\nkitai = [0]*1000\ntmp = 0\nfor i in range(1000):\n  tmp += i+1\n  kitai[i] = tmp/(i+1)\n#print(kitai)\n\ntotal_kitai = [0]*(n+1)\ntmp = 0\nfor i in range(n):\n  tmp += kitai[p[i]-1]\n  total_kitai[i+1] = tmp\n#print(total_kitai)\n\nans = 0\nfor i in range(n-k+1):\n  ans = max(total_kitai[i+k]-total_kitai[i],  ans)\nprint(ans)\n", "N, K = map(int, input().split())\np = list(map(int, input().split()))\n\n# max_list = []\n# max_sum = 0\n\n# for i in range(N - K + 1):\n# \tif sum(p[i:i + K]) >= max_sum:\n# \t\tmax_sum = sum(p[i:i+K])\n# \t\tmax_list = p[i:i + K]\n# ans = 0\n# for n in max_list:\n# \tans += (n + 1) / 2\n\n# print(ans)\nexpected = [0] * N\nfor i in range(N):\n\texpected[i] = (p[i] + 1) / 2\n\nans = 0\nagg = 0\nfor i in range(N):\n\tif i < K:\n\t\tagg += expected[i]\n\telse:\n\t\tagg += expected[i]\n\t\tagg -= expected[i - K]\n\tans = max(ans, agg)\nprint(ans)", "def resolve():\n    n,k = map(int,input().split())\n    p = tuple(map(int,input().split()))\n    s = [(i+1)/2 for i in p]\n    a = sum(s[:k])\n    ans = a\n    for i in range(1,n-k+1):\n        a = a - s[i-1] + s[k+i-1]\n        ans = max(ans,a)\n    print(ans)\nresolve()", "def e(n):\n  return (int(n) + 1) / 2\nn,k = map(int,input().split())\np = list(map(e,input().split()))\nans = sum(p[0:k])\ntemp = sum(p[0:k])\nfor i in range(1,n-k+1):\n  temp += p[i+k-1] - p[i-1]\n  ans = max(ans,temp)\nprint(ans)", "import numpy as np\n\nN,K=map(int,input().split())\np=list(map(lambda x:(int(x)+1)/2,input().split()))\n\nif N==K:\n    print(sum(p))\nelse:\n    cs=np.cumsum(p)\n    m=[]\n    for i in range(N-K):\n        m.append(cs[K+i]-cs[i])\n\n    print(max(m))", "N, K = map(int, input().split())\nP = list(map(int, input().split()))\nP = [(1+p)/2 for p in P]\nL = [0]*(N+1)\nfor i in range(N):\n  L[i+1] = L[i]+P[i]\nprint(max(L[i+K]-L[i] for i in range(N-K+1)))", "# coding: utf-8\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    tmp, ans = 0.0, 0.0\n    P = list(map(int, input().split()))\n\n    for i in range(N):\n        if i < K:\n            tmp += P[i]\n            ans = tmp\n        else:\n            tmp += P[i] - P[i - K]\n            ans = max(ans, tmp)\n    \n    ans = (ans + K) / 2\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = map(int, input().split())\np = list(map(int, input().split()))\n \nI = [0] * N\nfor i in range(N):\n    I[i] = (p[i] + 1) / 2\n \nS = sum(I[:K])\nans = S\nl = 0\nr = K\nwhile r < N:\n    S = S - I[l] + I[r]\n    ans = max(ans, S)\n    l += 1\n    r += 1\n \nprint(ans)\nreturn", "N, K = [int(s) for s in input().split(' ')]\nP = [int(s) for s in input().split(' ')]\ns = []\na = sum(P[0:K])\ns.append(a)\nfor p0, p1 in zip(P, P[K:]):\n    a = a - p0 + p1\n    s.append(a)\n\nprint(((max(s) + K) / 2))\n", "N,K = map(int,input().split())\nP = list(map(int,input().split()))\nls = [0] * (N + 1)\n\nfor i in range(N):\n  ls[i+1] += ls[i] + (P[i] + 1) / 2\n  \nans = 0\nfor j in range(N-K+1):\n  tmp = ls[K+j] - ls[j]\n  ans = max(ans, tmp)\n  \nprint(ans)", "def rsum(n):return (n+1)*(n//2)+((n+1)//2) if n%2 else (n+1)*(n//2)\nN,K=map(int,input().split())\np=list(map(int,input().split()))\nl=[0]*N\nfor i in range(N):l[i]=rsum(p[i])*(1/p[i])\ns=sum(l[0:K])\nans=0\nfor i in range(N-K):\n    ans=max(ans,s)\n    s-=l[i]\n    s+=l[i+K]\nprint(max(ans,s))", "N, K = [int(n) for n in input().split()]\nA = [int(n) for n in input().split()]\nE = [0] * N\n\nElist = {}\nfor val in set(A):\n    e = 0\n    for i in range(1, val + 1):\n        e += i / val\n    Elist[val] = e\n\nfor i in range(N):\n    E[i] = Elist[A[i]]\n\n#print(E)\n\nEn = sum(E[:K])\nEmax = En\nfor j in range(1, N-K+1):\n    En = En - E[j-1] + E[j-1+K]\n    Emax = max(Emax, En)\n\nprint(Emax) \n", "from itertools import accumulate\nn, k = list(map(int, input().split()))\nPcum = [0]+list(accumulate(list(map(int, input().split()))))\n\nans = 0\nfor L in range(n):\n    R = L+k\n    if n < R:\n        break\n    cnt = (Pcum[R]-Pcum[L]+k)/2\n    if ans < cnt:\n        ans = cnt\nprint(ans)\n", "N,K= map(int,input().split())\np = list(map(int,input().split()))\nsum1=0.0\nfor i in range (K):\n    sum1=((p[i]+1)/2.0)+sum1\nsum2=sum1\nfor i in range(N-K):\n    sum1=sum1+((p[i+K]-p[i])/2.0)\n    if sum1>sum2:\n        sum2=sum1\nprint(sum2)", "n, k = map(int, input().split())\np = list(map(int, input().split()))\nq = [0]\nm = 0\nfor i in p:\n    m += (1+i)/2\n    q.append(m)\nans = 0\nfor i in range(k, n+1):\n    ans = max(q[i]-q[i-k], ans)\n\n#\u3042\u307e\u308a\u6df1\u304f\u4e8b\u3092\u8003\u3048\u305a\u306b\nprint(ans)", "def main():\n    n, k = map(int, input().split())\n    p_lst = list(map(int, input().split()))\n    lst = []\n\n    for i in range(n):\n        lst.append((p_lst[i] + 1) / 2)\n\n    tmp_sum = sum(lst[:k])\n    maximum = tmp_sum\n    for i in range(n - k):\n        tmp_sum -= lst[i]\n        tmp_sum += lst[i + k]\n        maximum = max(maximum, tmp_sum)\n\n    print(maximum)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n,k = map(int,input().split())\nlst = list(map(int,input().split()))\nE = [0]\nfor x in lst:\n  E.append((1+x)/2+E[-1])\ns = 0\nfor i in range(n+1-k):\n  if s < E[i+k] - E[i]:\n    s = E[i+k] - E[i]\nprint(s)    ", "n, k = map(int,input().split())\np = list(map(int,input().split()))\nmu = [(a+1)/2 for a in p]\nmaxsum = sum(mu[:k])\nnow = maxsum\nleft = 0\nright = k\nwhile right<n:\n    now = now+mu[right]-mu[left]\n    if maxsum<now:\n        maxsum = now\n    left += 1\n    right += 1\nprint(maxsum)", "from numpy import *\nN,K = map(int,input().split())\nP = list(map(int,input().split()))\nQ = (N-K+1)*[0]\nR = sum(P[0:K])\nQ[0] = R\n\nfor n in range(1,N-K+1):\n  R+=P[n-1+K]-P[n-1]\n  Q[n] = R\n\nS = argmax(Q)\nprint(0.5*(sum(P[S:S+K])+K))", "import math\nini = lambda : int(input())\ninm = lambda : map(int,input().split())\ninl = lambda : list(map(int,input().split()))\ngcd = lambda x,y : gcd(y,x%y) if x%y else y\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n \n        if x == y:\n            return\n \n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n \n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n \n    def size(self, x):\n        return -self.parents[self.find(x)]\n \n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n \n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n \n    def group_count(self):\n        return len(self.roots())\n \n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n \n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\nmod = 10**9 + 7\nsigma = lambda x : x*(x+1)//2\n\n#--maincode----------------\n\nn,k = inm()\np = inl()\ns = sum(p[:k])\nc = s\nd = 0\nfor i in range(k,n):\n    s = s - p[i-k] + p[i]\n    if c < s:\n        c = s\n        d = i-k+1\nans = sum(sigma(x)/x for x in p[d:d+k])\nprint(ans)", "N, K = map(int, input().split())\nP = [(int(x)+1)/2 for x in input().split()]\n\nQ=[0]*(N+1)\nfor n in range(N):\n  Q[n+1]=Q[n]+P[n]\n\nans=0\nfor n in range(K,N+1):\n  ans=max(ans, Q[n]-Q[n-K])\n\nprint(ans)", "N, K = map(int, input().split())\np = list(map(int, input().split()))\n  \n# \u300c\u548c\u306e\u671f\u5f85\u5024\u300d\u306f\u300c\u671f\u5f85\u5024\u306e\u548c\u300d\u306a\u306e\u3067\u3001\u5148\u306b\u671f\u5f85\u5024\u3092\u6c42\u3081\u308b\nfor i in range(N):\n  p[i] = (1+p[i])/2\n\n# \u7d2f\u7a4d\u548c\nS = [0]*N\nS[0] = p[0]\nfor i in range(N-1):\n  S[i+1] = S[i] + p[i+1]\n\nans = S[K-1]\nfor i in range(N-K):\n  ans = max(ans, S[i+K] - S[i])\n\nprint(ans)", "N,K = map(int, input().split())\nP = list(map(int, input().split()))\n\n#\u671f\u5f85\u5024 : (p+1)//2\nrange_total = sum(P[:K]) + K\nmax_value = range_total\nfor i in range(N-K):\n    range_total += P[K+i] - P[i]\n    max_value = max(max_value, range_total)\nprint(max_value / 2)", "n,k=map(int,input().split())\nl=list(map(int,input().split()))\n\nfor i in range(n):\n  l[i]=(l[i]+1)/2\n\nlis=[0]*(n+1)\nfor i in range(n):\n  lis[i+1]=lis[i]+l[i]\n  \nans=0\nfor i in range(n-k+1):\n  num=lis[i+k]-lis[i]\n  ans=max(num,ans)\n  \nprint(ans)", "N,K=list(map(int,input().split()))\np=list(map(int,input().split()))\nfor i in range(N):\n    p[i]=(p[i]+1)/2\na=[0]\nfor i in range(N):\n    a.append(a[-1]+p[i])\nans=0\nfor i in range(N-K+1):\n    ans=max(ans,a[i+K]-a[i])\nprint(ans)\n", "import sys\ninput = sys.stdin.readline # for speed up\n#sys.setrecursionlimit(10**9)\n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nb=[0]*n\nfor ii in range(n):\n    b[ii]=(1+a[ii])/2\n\ntemp=sum(b[0:k])\nans=temp\nfor ii in range(n-k):\n  temp+=b[ii+k]-b[ii]\n  if temp>ans:\n    ans=temp\n\nprint(ans)", "nk = input().split()\nn = int(nk[0])\nk = int(nk[1])\np_s = input().split()\np = [int(s) for s in p_s]\nmax_val = 0\nfor i in range(0,k):\n    max_val+=p[i]\ntmp = max_val\nfor i in range(k,len(p)):\n    tmp = tmp - p[i-k] + p[i]\n    if tmp > max_val:\n        max_val=tmp\nprint(max_val/2 + 0.5 * k)", "N, K = map(int, input().split())\nP = list(map(int, input().split()))\nP = [sum(P[:K])+K]+P\nfor i in range(N-K):\n    P[i+1] = P[i]-P[i+1]+P[K+i+1]\nprint(max(P[:N-K+1])/2)", "N, K = map(int, input().split())\np = list(map(int, input().split()))\nfor i in range(N):\n    p[i] = p[i] / 2 + 0.5\n\ns = 0\nfor i in range(K):\n    s += p[i]\nmaxSum = s\nj = 0\n\nfor i in range(K, N):\n    s = s + p[i] - p[i-K]\n    maxSum = max(maxSum, s)\nprint(maxSum)", "# import itertools\n# import math\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n\n# N = int(input())\n# S = input()\n# n, *a = map(int, open(0))\nN, K = map(int, input().split())\nP = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\nE = [0]\ntot = 0\nfor p in P:\n    tot += (p + 1) / 2\n    E.append(tot)\n\n\nm = 0\nfor i in range(N - (K - 1)):\n    _ = E[i + K] - E[i]\n    if _ > m:\n        m = _\n\nprint(m)", "n,k = map(int,input().split())\np = list(map(int,input().split()))\n\nd_tmp = sum(p[0:k])\nd_max = sum(p[0:k])\nfor i in range(n-k):\n  d_tmp = d_tmp + p[k+i] - p[i]\n  d_max = max(d_max,d_tmp)\n\nans = (d_max + k)/2\nprint(ans)", "N,K=list(map(int,input().split()))\np=list(map(int,input().split()))\nsum=0\nv=[]\nfor i in range(K):\n    sum+=p[i]\nv.append(sum)\nfor i in range(K,N):\n    sum+=p[i]\n    sum-=p[i-K]\n    v.append(sum)\nM=0\nfor i in range(N+1-K):\n    M=max(M,v[i])\nprint(((M+K)/2))\n", "N,K = map(int,input().split())\np = list(map(lambda x: int(x)+1,input().split()))\nans = sum(p[0:K])\ns = ans\nfor i in range(1,N-K+1):\n    s += p[i+K-1]-p[i-1]\n    ans = max(ans,s)\nprint(ans/2)", "#import math\n#import collections\nn,k = map(int, input().split( ))\nA = list(map(int, input().split( )))\n\narr = [0]*n\nfor i in range(n):\n  arr[i] = (A[i]+1)/2\n\ns = sum(arr[:k])\nans = s\nfor j in range(n-k):\n  s = s - arr[j] + arr[j+k]\n  ans = max(s,ans)\nprint(ans)", "n,k=map(int,input().split())\ndata=list(map(float,input().split()))\nnew_data=[0]*n\nfor i in range(n):\n    new_data[i]=(data[i]+1)/2\ntemp=0\nfor i in range(k):\n    temp+=new_data[i]\nans=temp\nfor i in range(n-k):\n    temp=temp-new_data[i]+new_data[i+k]\n    ans=max(ans,temp)\nprint(ans)", "n,k = map(int,input().split())\np = list(map(int,input().split()))\nq = [0]*n\nfor i in range(n):\n  q[i] = (1+p[i])/2\ns = [0]*(n+1)\nfor j in range(n):\n  s[j+1]=s[j]+q[j]\nt = k+1\nanswer = s[k]-s[0]\nwhile(t<=n):\n  answer = max(answer,s[t]-s[t-k])\n  t +=1\nprint(answer)", "N, K = list(map(int, input().split()))\nP = [(int(x)+1)/2 for x in input().split()]\n\ntotal=ans=sum(P[:K])\nfor n in range(K,N):\n  total+=P[n]-P[n-K]\n  ans=max(ans, total)\n\nprint(ans)\n", "n,k=map(int,input().split())\np=list(map(int,input().split()))\ndp=[0]*(n-k+1)\ndp[0]=sum(p[:k])\nfor i in range(n-k):\n    dp[i+1]=dp[i]+p[k+i]-p[i]\nprint((max(dp)+k)/2)", "N, K = list(map(int, input().split()))\nlst = list(map(int, input().split()))\n\nn = sum(lst[:K])\nm = n\n\nfor i in range(N - K):\n    l = lst[i]\n    r = lst[i + K]\n    n = n + r - l\n\n    if m < n:\n        m = n\n\nans = (m + K)/2\nprint(ans)\n", "n, k = list(map(int, input().split()))\np = list(map(int, input().split()))\n\ndef ev(n):\n    return n * (n + 1) / (2 * n)\n\nq = [0]\nfor i in range(n):\n    q.append(ev(p[i]))\n    q[i + 1] = q[i] + ev(p[i])\n#print(q)\n\ntmp = 0\nfor j in range(n - k + 1):\n    if tmp <= q[j + k] - q[j]:\n        tmp = q[j + k] - q[j]\nprint(tmp)\n", "n,k = map(int, input().split())\np = list(map(lambda x: (int(x)+1)/2, input().split()))\n\nt = sum(p[:k])\nans = t\nfor i in range(k,n):\n  t += p[i] - p[i-k]\n  if ans < t: ans = t\nprint(ans)", "from itertools import accumulate\nn, k = list(map(int, input().split()))\nPcum = [0]+list(accumulate([int(x)+1 for x in input().split()]))\n\nans = 0\nfor L in range(n):\n    R = L+k\n    if n < R:\n        break\n    cnt = (Pcum[R]-Pcum[L])/2\n    if ans < cnt:\n        ans = cnt\nprint(ans)\n", "def main():\n\tN, K = [int(x) for x in input().split(\" \")]\n\tP = [int(p) for p in input().split(\" \")]\n\tE = [sum(P[:K])]\n\tfor i in range(N - K):\n\t\tE.append(E[-1] - P[i] + P[i + K])\n\tprint((max(E) + K)/2)\n\nmain()", "N,K=list(map(int,input().split()))\np=list(map(int,input().split()))\ns=0\nhoge=0\nans=0\nfor i in range(K):\n    s+=p[i]\n    temp=s\nfor j in range(N-K):\n    s=s-p[j]+p[j+K]\n    if temp<s:\n        temp=s\n        hoge=j+1\n\nfor k in range(K):\n    ans+=(1+p[hoge+k])/2\n\nprint(ans)\n", "n,k=map(int,input().split())\np=list(map(int,input().split()))\n\n\na=[]\nfor i in range(n):\n    a.append((1+p[i])/2)\n\ntotal=sum(a[i] for i in range(k))\nans=total\n\nfor i in range(0,n-k):\n    total=total-a[i]+a[i+k]\n    if total>ans:\n        ans=total\nprint(ans)", "N, K = map(int, input().split())\np_list = list(map(int, input().split()))\n\np_list_E = []\np_list_E_temp = [1, 1.5, 2, 2.5, 3, 3.5]\n\nfor i in range(len(p_list)):\n    p_list_E.append((p_list[i]+1)*0.5)\n#print(p_list_E)\n\np_list_sum = [0]\nfor i in range(0,N):\n    p_list_sum.append(p_list_sum[i]+p_list_E[i])\n#print(p_list_sum)\n\nans = 0\nfor i in range(K,N+1):\n    ans = max(ans, p_list_sum[i]-p_list_sum[i-K])\nprint(ans)", "n, k = map(int, input().split())\np = list(map(int, input().split()))\ne = []\n\nfor i in range(n):\n    e.append(p[i] + 1)\n\nsum_e = [0]\n\nfor i in range(1,n+1):\n    sum_e.append(sum_e[i-1]+e[i-1])\n\nans = []\n\nfor i in range(n-k+1):\n    ans.append(sum_e[i+k]-sum_e[i])\n\nprint(max(ans)/2)", "\ndef main():\n    n, k = map(int, input().split(\" \"))\n    p = list(map(int, input().split(\" \")))\n    u = [0]\n    v = []\n    w = []\n    for i in range(n):\n        u.append(u[i]+p[i])\n    for i in range(n-k+1):\n        w.append(u[k+i]-u[i])\n    x = w.index(max(w))\n    for i in range(k):\n        v.append(p[x+i])\n    a=0\n    for i in range(k):\n        a += 1+0.5*(v[i]-1)\n    print(a)\n\ndef __starting_point():\n    main()\n__starting_point()", "raw = input().split(\" \")\nn = int(raw[0])\nk = int(raw[1])\npref = []\nraw = input().split(\" \")\nfor i in range(n):\n    elem = float(raw[i])\n    if(len(pref) == 0):\n        pref.append((elem + 1)/2)\n    else:\n        pref.append(pref[-1] + (elem + 1)/2)\n\nbest = 0\nidx = k - 1\nwhile(idx < n):\n    if(idx == k - 1):\n        best = pref[idx]\n    else:\n        best = max(best, pref[idx] - pref[idx - k])\n    idx += 1\n\nprint(best)", "N,K=map(int,input().split())\np=list(map(int,input().split()))\nl=[sum(p[:K])]\nfor i in range(1,N-K+1):\n  l.append(l[-1]-p[i-1]+p[i+K-1])\nprint((max(l)+K)/2)", "import sys\n\nN,K=list(map(int,input().split()))\nP=list(map(int,input().split()))\nQ=[(1+p)/2 for p in P]\ntemp=sum(Q[:K])\nans=temp\nfor i in range(N):\n  try:\n    temp=temp-Q[i]+Q[i+K]\n    ans=max(ans,temp)\n  except:\n    pass\nelse:\n  print(ans)\n", "n,k=[int(i) for i in input().split()]\np=[(int(i)+1)/2 for i in input().split()]\n\nans=0\nsum_num=sum(p[:k])\nfor i in range(n-k+1):\n    if i==0:\n        sum_num = sum(p[:k])\n    else:\n        sum_num+=p[i+k-1]-p[i-1]\n    ans=max(ans,sum_num)\nprint(ans)", "#!/usr/bin/env python3\ndef main():\n    import numpy as np\n\n    N, K = list(map(int, input().split()))\n    P = np.array(input().split(), np.int32)\n\n    P[:] += 1\n    Pcum = np.zeros(N + 1, np.int32)\n    Pcum[1:] = np.cumsum(P)\n    length_K_sums = Pcum[K:] - Pcum[:-K]\n    print((length_K_sums.max() / 2))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = map(int, input().split())\np = list(map(int, input().split()))\n  \n# \u300c\u548c\u306e\u671f\u5f85\u5024\u300d\u306f\u300c\u671f\u5f85\u5024\u306e\u548c\u300d\u306a\u306e\u3067\u3001\u671f\u5f85\u5024\u3092\u6c42\u3081\u3066\u304a\u304f\nfor i in range(N):\n  p[i] = (1+p[i])/2\n\n# \u3059\u308b\u3068\u7d50\u5c40[(p_1+1)/2,...,(p_N+1)/2]\u306e\u914d\u5217\u304b\u3089\u3001\u96a3\u63a5\u3059\u308bK\u500b\u306e\u548c\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n# N=10^5\u306a\u306e\u3067\u3001O(N)\u3067\u89e3\u304f\n# 2\u91cd\u30eb\u30fc\u30d7\u306f\u9593\u306b\u5408\u308f\u306a\u3044\u30fb\u30fb\u30fb\u7d2f\u7a4d\u548c\uff01\n# \u7d2f\u7a4d\u548c\u306b\u3088\u3063\u3066\u3001\u914d\u5217\u4e0a\u306e\u533a\u9593\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u51e6\u7406\u3092\u9ad8\u901f\u5316\uff01\nS = [0]*(N+1)\nfor i in range(N):\n  S[i+1] = S[i] + p[i]\n'''\nS[0] = 0\nS[1] = p[0]\nS[2] = p[0] + p[1]\nS[N] = p[0] + ... + p[N-1]\n\nS[K]-S[0] = p[K-1] + ... + p[0]\nS[K+1]-S[1] = p[K] + ... + p[1]\nS[K+2]-S[2] = p[K+1] + ... + p[2]\nS[N]-S[N-K] = p[N-1] + ... + p[N-K]\n'''\n\nans = 0\n# max(S[K]-S[0],S[K+1]-S[1],...,S[N]-S[N-K]) \u3092\u6c42\u3081\u308b\nfor i in range(N-K+1):\n  ans = max(ans, S[i+K] - S[i])\n  \nprint(ans)", "N, K = [int(x) for x in input().split()]\np = [int(x) for x in input().split()]\n\na = sum(p[:K])\ns = sum(p[:K])\nfor i in range(K, N):\n    s += p[i] - p[i - K]\n    a = max(a, s)\n\nans = (a + K) / 2\nprint(ans)", "N, K = map(int, input().split())\np = list(map(int, input().split()))\n\n# \u300c\u548c\u306e\u671f\u5f85\u5024\u300d\u306f\u300c\u671f\u5f85\u5024\u306e\u548c\u300d\u306a\u306e\u3067\u3001\u671f\u5f85\u5024\u3092\u6c42\u3081\u3066\u304a\u304f\nfor i in range(N):\n  p[i] = (1+p[i])/2\n\n# \u3059\u308b\u3068\u7d50\u5c40[(p_1+1)/2,...,(p_N+1)/2]\u306e\u914d\u5217\u304b\u3089\u3001\u96a3\u63a5\u3059\u308bK\u500b\u306e\u548c\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n# N=10^5\u306a\u306e\u3067\u3001O(N)\u3067\u89e3\u304f\n# 2\u91cd\u30eb\u30fc\u30d7\u306fO(NK)\u3067\u9593\u306b\u5408\u308f\u306a\u3044\n# \u7d2f\u7a4d\u548c\u3092\u7528\u3044\u308b\u3068O(N)\u3067\u89e3\u3051\u308b\uff01\uff08\u7d2f\u7a4d\u548c\u3068\u306f\u3001\u914d\u5217\u4e0a\u306e\u533a\u9593\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u51e6\u7406\u3092\u9ad8\u901f\u5316\u3059\u308b\u624b\u6cd5\uff09\nS = [0]*(N+1)\nfor i in range(N):\n  S[i+1] = S[i] + p[i]\n'''\nS[0] = 0\nS[1] = p[0]\nS[2] = p[0] + p[1]\nS[N] = p[0] + ... + p[N-1]\n \nS[K]-S[0] = p[K-1] + ... + p[0]\nS[K+1]-S[1] = p[K] + ... + p[1]\nS[K+2]-S[2] = p[K+1] + ... + p[2]\nS[N]-S[N-K] = p[N-1] + ... + p[N-K]\n'''\n \nans = 0 # ans = max(S[K]-S[0],S[K+1]-S[1],...,S[N]-S[N-K])\nfor i in range(N-K+1):\n  ans = max(ans, S[i+K] - S[i])\n  \nprint(ans)", "n,k = map(int,input().split())\np = list(map(int,input().split()))\n\nfor i in range(n):\n    p[i] = (1+p[i]) / 2\n    \nres = sum(p[:k])\nans = res\n    \nfor i in range(n-k):\n    res += -p[i] + p[i+k]\n    ans = max(ans,res)\n    \nprint(ans)", "n,k=map(int,input().split())\np=list(map(int,input().split()))\nli=[sum(p[0:k])]\nfor i in range(n-k):\n  li.append(li[i]-p[i]+p[i+k])\nprint((max(li)+k)/2)", "N,K= list(map(int, input().split()))\nPs = list(map(int, input().split()))\n\nruisekiwa = [0]\n\nfor P in Ps:\n    ruisekiwa.append(P + ruisekiwa[-1])\n\n#print(ruisekiwa)\nans = 0\nfor i in range(N-K+1):\n    ans = max(ans, (ruisekiwa[i+K] - ruisekiwa[i] + K) / 2)\n#    print(ans)\nprint(ans)", "n, k = map(int,input().split())\np = list(map(lambda x:int(x)+1,input().split()))\n\ns = [0]*(n+1)\n\nfor i in range(n):\n    s[i+1] = s[i] + p[i]\n    \nres = 0\nfor i in range(n-k+1):\n    res = max(res,s[i+k]-s[i])\nprint(res/2)", "n,k = list(map(int,input().split()))\np = list(map(int,input().split()))\n\nsample = []\nfor i in range(1,1001) :\n    sample.append((1+i)/2)\n\nkitaichi = []\nfor i in range(n) :\n    kitaichi.append(sample[p[i]-1])\n\nmaxkitaichi = 0\nsum = 0\nfor i in range(k) :\n    maxkitaichi += kitaichi[i]\n    sum += kitaichi[i]\n\nfor i in range(1,n-k+1) :\n    sum = sum + kitaichi[i+k-1] - kitaichi[i-1]\n    if sum >= maxkitaichi :\n        maxkitaichi = sum\n        \nprint(maxkitaichi)\n", "N, K = map(int, input().split())\np=list(map(int,input().split()))\n\nfor i in range(N):\n  p[i]=(1+p[i])/2\n  \nans=[0]*(N-K+1)\nans[0]=sum(p[:K])\nfor i in range(1, N-K+1):\n  ans[i]=ans[i-1]-p[i-1]+p[i+K-1]\n\nprint(max(ans))", "n, k = map(int, input().split())\np = list(map(int, input().split()))\n\na = [1+(i-1)/2 for i in p]\nl = sum(a[:k])\nans = l\nfor i in range(1, n-k+1):\n    l = l-a[i-1]+a[k+i-1]\n    ans = max(ans, l)\nprint(ans)", "N,K=map(int,input().split())\np=list(map(int,input().split()))\nl=[sum(p[:K])]\n#return\nfor i in range(1,N-K+1):\n  l.append(l[-1]-p[i-1]+p[i+K-1])\n#L=l.index(max(l))\n#print(l)\nprint((max(l)+K)/2)", "from functools import reduce\nn, k = [int(i) for i in input().split()]\np = [int(i) for i in input().split()]\ntmp_max = sum([i / 2 + 0.5 for i in p[0:k]])\ntmp = tmp_max\nidx = 0\nfor i in range(1, len(p) - k + 1):\n\ttmp -= p[i - 1] / 2 + 0.5\n\tif i + k - 1 < len(p):\n\t\ttmp += p[i + k - 1] / 2 + 0.5\n\ttmp_max = max(tmp_max, tmp)\nprint(tmp_max)", "n, k = map(int, input().split())\np = list(map(int,input().split()))\nq = [(x+1)/2 for x in p]\nq1 = sum(q[:k])\nans = q1\n\nfor i in range(n-k):\n  x = q1-q[i] +q[i+k]\n  q1 = x\n  if ans < x:\n    ans = x\n  \nprint(ans)", "N,K = map(int,input().split())\nP = list(map(int,input().split()))\nQ = sum(P[:K])\nR = Q\n\nfor n in range(N-K):\n  Q = Q-P[n]+P[n+K]\n  R = max(Q,R)\n\nprint((R+K)/2)", "#!/usr/bin/env python3\ndef main():\n    def expected_val(limit):\n        return (1 + limit) / 2\n\n    N, K = list(map(int, input().split()))\n    P = [int(x) for x in input().split()]\n\n    lst = [0]\n    res = 0\n    for p in P:\n        # res += (p + 1) / 2\n        res += expected_val(p)\n        lst.append(res)\n    ans = 0\n    for i in range(N - K + 1):\n        res = lst[i + K] - lst[i]\n        ans = res if res > ans else ans\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,k = map(int,input().split())\nP = list(map(int,input().split()))\n\nP[0] = (P[0]+1.)/2\nfor i in range(1,len(P)):\n    P[i] = (P[i]+1.)/2\n    P[i] = P[i-1]+P[i]\n\nans = 0.\n\nif n==1:\n    ans = P[0]\n\nelif len(P)-k==0:\n    ans = P[k-1]\nelse:\n    for i in range(len(P)-k):\n        ans = max(ans,(P[i+k]-P[i]))\n        \n    \nprint(ans)", "N,K=map(int,input().split())\nList = list(map(int, input().split()))\nINF = 10000000000\nexpList = [INF]*1001\ndef expectationF(num):\n  if expList[num] == INF:\n    exp = 0\n    for i in range(1,num+1):\n      exp += i/num\n    expList[num] = exp\n  return expList[num]\n\nres = 0\nmid = 0\nmidList=[]\nfor i in range(N):\n  if i>=1:\n    midList.append(expectationF(List[i])+midList[i-1])\n  else:\n    midList.append(expectationF(List[i]))\nm=K-1\nfor j in range(N-m):\n  if j == 0:\n    mid = midList[j+m]\n  else:\n    mid = midList[j+m]- midList[j-1] \n  res = max(res,mid)\nprint(res)", "from itertools import accumulate\nN, K = map(int, input().split())\nP = list(map(int, input().split()))\n\nA = list(accumulate(P))\n\nlargest = A[K-1]\npoint = 0\nfor i in range(K, N):\n    if largest < A[i] - A[i-K]:\n        largest = A[i] - A[i-K]\n        point = i\n\nans = 0\nfor j in range(point - K + 1, point+1):\n    p = P[j]\n    ans += (((p + 1) * p) / 2) / p\n\nprint(ans)", "N,K = map(int,input().split())\np = list(map(int,input().split()))\nans = sum(p[0:K])\ns = ans\nfor i in range(1,N-K+1):\n    s += p[i+K-1]-p[i-1]\n    ans = max(ans,s)\nprint((K+ans)/2)", "N, K = map(int, input().split())\np = list(map(int, input().split()))\n\ns = sum(p[:K])\nss = []\nss.append(s)\n\nfor i in range(N - K):\n    s = s - p[i] + p[i+K]\n    ss.append(s)\n\nprint(K + (max(ss) - K) / 2)", "n, k = list(map(int, input().split(' ')))\naaa = list(map(int, input().split(' ')))\nans = 0\nv = []\nfor a in aaa:\n  v.append((a * (a + 1)) / (2.0 * a))\n\ncurrent = 0\nfor i in range(n):\n  current += v[i]\n  if i >= k:\n    current -= v[i-k]\n  ans = max(ans, current)\nprint(ans)", "import sys\n#import time\nfrom collections import deque, Counter, defaultdict\n#from fractions import gcd\nimport bisect\nimport heapq\nimport math\nimport itertools\n#import numpy as np\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\ninf = 10**18\nMOD = 1000000007\nri = lambda : int(input())\nrs = lambda : input().strip()\nrl = lambda : list(map(int, input().split()))\nmod = 998244353\n\n'''\n1 3 3 10 15\n1 1.5 1.5 2.5 3 \n'''\n\nn, k = rl()\np = rl()\nsum_=0\ncum, ans, ser = [],[],[]\nfor i in range(1,2000):\n    sum_+=i\n    cum.append(sum_/i)\nfor i in p:\n    ans.append(cum[i-1])\ncs = [0]\nfor i in range(n):\n    cs.append(cs[i]+ans[i])\nfor i in range(n+1-k):\n    ser.append(cs[i+k]-cs[i])\nprint((max(ser)))\n    \n", "n, k = map(int, input().split())\np = list(map(int, input().split()))\n\ns = 0\nacsum = [0]\nfor x in p:\n    s += (x + 1)/2\n    acsum.append(s)\n\nans = -1\nfor i in range(n - k + 1):\n    ans = max(ans, acsum[i + k] - acsum[i])\nprint(ans)", "N,K = map(int,input().split())\nP = list(map(int,input().split()))\n\n# \u7d2f\u7a4d\u548c \ns = [0] * (N+1)\nfor i in range(N):# O(N)\n    s[i+1] = s[i] + P[i]\n\n# [j,j+K) \u306e\u548c\u306e\u6700\u5927\u5024\u3068 j \u3092\u4fdd\u6301 \nm = 0\nmidx = 0\nfor j in range(N-K+1):# O(N)\n    v = s[j+K] - s[j]\n    if v > m:\n        m = v\n        midx = j\n        \nE = 0\nfor k in range(midx,midx+K):# O(K)\n    x = P[k]\n    E += (1/x)*(x*(x+1)/2)\nprint(E)", "\n\n\ninp  = input().split(' ')\nn = int(inp[0])\nk = int(inp[1])\n\nnums = input().split(' ')\nnums = [int(x) for x in nums]\nsums = [0]\nfor x in nums:\n  sums += [x + sums[-1]]\n\nm = 0\nfor i in range(0, n-k+1):\n  m = max(m, sums[i+k] - sums[i])\nprint(((m+k)/2))\n\n\n\n\n\n", "N,K=map(int,input().split())\n*P,=map(int,input().split())\n\nQ=[(i+1)/2 for i in P]\np=R=sum(Q[:K])\n\nfor i in range(N-K):\n p=p-Q[i]+Q[i+K]\n R=max(R, p)\nprint(R)", "N, K = [int(s) for s in input().split()]\nP = [int(s) for s in input().split()]\n\n# Pi\u306e\u671f\u5f85\u5024 (1 + Pi) // 2\nE = list(map(lambda x: (x + 1) / 2, P))\nE_SUMS = [E[0]]\nfor i in range(1, N):\n    E_SUMS.append(E_SUMS[i - 1] + E[i])\n\nm = E_SUMS[K - 1]\nfor i in range(K, N):\n    m = max(m, E_SUMS[i] - E_SUMS[i - K])\n\nprint(m)", "import os, sys, re, math\n\n\ndef get_exp_value(number):\n    if number == 0:\n        return 0\n    a = (number + 1) / number\n    exp = a * (number // 2)\n    if number % 2 != 0:\n        exp += a / 2\n\n    return exp\n\n\n(N, K) = [int(n) for n in input().split()]\nP = [int(n) for n in input().split()]\n\nexps = [get_exp_value(i) for i in range(200001)]\n\ns = sum(P[0:K])\nmax_sum = 0\nmax_pos = 0\nfor i in range(K, N):\n    s = s - P[i - K] + P[i]\n    if s > max_sum:\n        max_sum = s\n        max_pos = i\n\nanswer = 0\nfor i in range(max_pos - K, max_pos):\n    answer += exps[P[i + 1]]\n\nprint(answer)\n", "N, K = map(int, input().split())\nP = list(map(int, input().split()))\nans = 0\nfor i in range(K):\n    ans += (P[i]+1)/2\n\ntmp = ans\nfor i in range(K, N):\n    tmp = tmp + (P[i]+1)/2 - (P[i-K]+1)/2\n    ans = max(ans, tmp)\n\nprint(ans)", "n, k = map(int, input().split())\np = [(int(i) + 1) / 2 for i in input().split()]\nres = [sum(p[:k])]\nfor i in range(n-k): res.append(res[i] - p[i] + p[i+k])\nprint(max(res))", "N, K = list(map(int, input().split()))\nA = list([int(s)+1 for s in input().split()])\nans = sum(A[0:K])\ntmp = ans\n#print(A)\nfor i in range(N-K):\n  tmp += (A[i+K]-A[i])\n  ans = max(ans, tmp)\nprint((ans/2))\n", "def main():\n\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    ex = [0]\n    for x in p:\n        ex.append(ex[-1] + (x+1)/2)\n\n    ans = 0\n    for i in range(k, n+1):\n        ans = max(ans, ex[i] - ex[i-k])\n\n    print(ans)\n\nmain()", "import copy\nn, k = list(map(int, input().split()))\nP = list(map(int, input().split()))\nU = [0]*n\n\nfor i in range(n):\n    U[i] = (P[i]+1)/2\n\nans = sum(U[:k])\nt = copy.copy(ans)\n\nfor i in range(n-k):\n    t =  t+U[k+i]-U[i]\n    ans = max(ans, t)\n    \nprint(ans)\n"]