["# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Apr  2 22:42:34 2017\n\n@author: Sean38\n\"\"\"\n\nn = int(input().rstrip())\ns = input()\na = [int(ch) for ch in s.split()]\na = a[0:n]\na.sort()\n\ndef check_num(p, i):\n\n    # i = ap + b(p+1)\n    # min(a+b) <=> max(b)\n    # b(p+1) <= i\n    # b == i (mod p)\n    max_b = (i // (p + 1))\n    b = i % p + ((max_b - i % p) // p) * p\n    # cur = a + b\n    cur = (i - b) // p\n\n    #print(cur - b, b, p)\n    if b < 0:\n        return None\n    return cur\n\ndef sets_num(p):\n    \n    total = 0\n    for i in a:\n        if check_num(p, i):\n            total += check_num(p, i)\n        else:\n            return None\n    return total\n\nfor div_sets in range(1, a[0] + 1):\n    p, q = divmod(a[0], div_sets)\n    if (q == 0):\n        if sets_num(p):\n            print(sets_num(p))\n            break\n        if (p > 0) and sets_num(p - 1):\n            print(sets_num(p - 1))\n            break\n    else:\n        if sets_num(p):\n            print(sets_num(p))\n            break", "from math import sqrt\n\ndef divide_into_p(p, a):\n    q = a // (p+1)\n    r = a % (p+1)\n    if r == 0:\n        return q\n    elif q + r >= p:\n        return q+1\n    else:\n        return None\n\ndef divisible_into_p(p, lst):\n    lgth = 0\n    for l in lst:\n        dp = divide_into_p(p, l)\n        if dp == None:\n            return None\n        else:\n            lgth += dp\n    return lgth\n\ndef index_lst(a,sqrta):\n    lst = []\n    for i in range(1, sqrta + 1):\n        p = a//i\n        lst.append(p)\n        if not a%p:\n            lst.append(p-1)\n    for i in range(sqrta+1,0,-1):\n        lst.append(i)\n    return lst\n\ndef check_all_p(balls):\n    a = balls[0]\n    sqrt_a = int(sqrt(a))\n    indices = index_lst(a,sqrt_a)\n    for i in indices:\n        dp = divisible_into_p(i, balls)\n        if dp != None:\n            return dp\n    \n        \ninput()\nballs = sorted([int(x) for x in input().split()])\n\nprint(check_all_p(balls))\n\n", "# Returns the number of coins that is necessary for paying the amount\n# with the two types of coins that have value of coin and coin + 1\ndef pay(coin, amount):\n    if amount // coin < amount % coin:\n        return -1;\n    if amount < coin * (coin + 1):\n        return amount // coin\n    return (amount - 1) // (coin + 1) + 1;\n\ndef pay_all(coin):\n    sum = 0\n    for i in range(n):\n        p = pay(coin, a[i])\n        if p == -1:\n            return -1\n        sum += p\n    return sum\n\nn = int(input())\na = list(map(int, input().split()))\namin = min(a)\ncoin = amin\nk = 1\np = -1\nwhile p == -1:\n    p = pay_all(coin)\n    if p == -1 and amin % coin == 0:\n        p = pay_all(coin - 1)\n    k += 1\n    coin = amin // k\nprint(p)", "3\nimport sys\n\nn = int(sys.stdin.readline())\na = [int(x) for x in sys.stdin.readline().split()]\n\ndef is_valid(s, k):\n    # Ali lahko zapakiramo s steklenic v \u0161katle velikosti k in k + 1?\n    # s = x * k + y * (k + 1) = (x + y) * k + y, kjer je 0 <= y < k\n    y = s % k\n    return s // k >= y\n\ndef all_valid(a, k):\n    for s in a:\n        if not is_valid(s, k):\n            return False\n    return True\n\nbest_sol = 1\n\nk = 1\nwhile k*k <= a[0]:\n    if all_valid(a, k):\n        best_sol = max(best_sol, k)\n    k += 1\n\n# t je skupno \u0161tevilo \u0161katel.\nt = 1\nwhile t*t <= a[0]:\n    k = a[0] // t\n    if all_valid(a, k):\n        best_sol = max(best_sol, k)\n    if a[0] % t == 0 and k > 1:\n        if all_valid(a, k - 1):\n            best_sol = max(best_sol, k - 1)\n    t += 1\n\n# print(best_sol, best_sol + 1)\n\nprint(sum(s // (best_sol + 1) + (0 if s % (best_sol + 1) == 0 else 1) for s in a))\n", "def judge(lists, x):\n    ans = 0\n    for i in lists:\n        t = i//x\n        d = i%x\n        if d == 0:\n            ans += t\n        elif t+d >= x-1:\n            ans += t+1\n        else:\n            return -1\n\n    return ans\n\nwhile True:\n    try:\n        n = input()\n        balls = list(map(int, input().split()))\n        minn = min(balls)\n        for i in range(1, minn+1):\n            if judge(balls, minn//i + 1) >= 0:\n                ans = judge(balls, minn//i + 1)\n                break\n            elif judge(balls, minn//i) >= 0:\n                ans = judge(balls, minn//i)\n                break\n            \n        print(ans)\n    except EOFError:\n        break\n\n", "import time\nimport sys\nfrom math import sqrt\n\nn = int(input())\na = list(map(int, input().split()))\n\nsq = int(sqrt(a[0]))+2\ns = set()\n\nfor box in range(1, sq):\n    if a[0] % box == 0:\n        s.add(a[0] // box)\n        s.add(a[0] // box - 1)\n    else:\n        s.add(a[0] // box)\n\nfor balls in range(1, sq):\n    if a[0] % balls <= a[0] // balls:\n        s.add(balls)\n\n\nfor size in sorted(s, reverse=True):\n    ans = 0\n    for x in a:\n        if x / size >= x % size:\n            ans += (x+size) // (size+1)\n        else:\n            break\n    else:\n        print(ans)\n        return\n"]