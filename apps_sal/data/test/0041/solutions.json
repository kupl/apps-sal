["inf = 10 ** 6\nn = int(input())\na = list(map(int, input().split()))\ndist = [inf] * n\nfor i in range(len(a)):\n    if not a[i]:\n        dist[i] = 0\n        cur = 1\n        i1 = i\n        while i1 - 1 > - 1 and a[i1 - 1] != 0:\n            dist[i1 - 1] = min(dist[i1 - 1], cur)\n            i1 -= 1\n            cur += 1\n        i1 = i\n        cur = 1\n        while i1 + 1 < n and a[i1 + 1] != 0:\n            dist[i1 + 1] = min(dist[i1 + 1], cur)\n            i1 += 1\n            cur += 1\nprint(*dist)", "inf = 10**10\ninput()\nnums = [int(x) for x in input().split()]\n\ndef run(ns):\n    curr = inf\n    res = []\n    for num in ns:\n        if num == 0:\n            curr = 0\n        res.append(curr)\n        curr += 1\n    return res\n\nfw = run(nums)\nrew = (run(reversed(nums)))[::-1]\n\nprint(' '.join(str(min(fw[i], rew[i])) for i in range(len(nums))))\n", "#!/usr/bin/env python3\n\ndef main():\n    try:\n        while True:\n            n = int(input())\n            a = list(map(int, input().split()))\n            b = [0] * n\n            last = 400000\n            for i in range(n - 1, -1, -1):\n                if a[i] == 0:\n                    last = i\n                b[i] = last - i\n\n            last = -400000\n            for i in range(n):\n                if a[i] == 0:\n                    last = i\n                print(min(i - last, b[i]), end=' ')\n            print()\n\n    except EOFError:\n        pass\n\nmain()\n", "n = int(input())\na = list(map(int, input().split()))\n\nans = [n for _ in range(n)]\ntmp = n\nfor i in range(n):\n    if a[i] == 0:\n        tmp = 0\n    else:\n        tmp += 1\n    ans[i] = min(ans[i], tmp)\n\ntmp = n\nfor i in range(n - 1, -1 , -1):\n    if a[i] == 0:\n        tmp = 0\n    else:\n        tmp += 1\n    ans[i] = min(ans[i], tmp)\n\nprint(' '.join(map(str, ans)))\n\n", "n = int(input())\nl = list(map(int,input().split()))\nzeroes = []\nfor i in range(len(l)):\n    if l[i]==0:\n        zeroes.append(i)\nzero = -1\nfor i in range(n):\n    zeroes.append(zeroes[-1])\ns = \"\"\nfor i in range(len(l)):\n    if i > zeroes[zero+1]:\n        zero += 1\n    if l[i]==0:\n        s +=\" 0\"\n    else:\n        try:\n            s += \" \"+str(min(abs(i-zeroes[zero]),abs(i-zeroes[zero+1]),abs(i-zeroes[zero+2])))\n        except:\n            s += \" \"+str(min(abs(zeroes[zero+1]-i),abs(i-zeroes[zero])))\nprint(s[1:])\n", "import sys\n\ninf = 1 << 30\n\ndef solve():\n    n = int(input())\n    a = [inf if ai != '0' else 0 for ai in input().split()]\n\n    for i in range(n):\n        if a[i] == 0:\n            for j in range(i - 1, -1, -1):\n                if a[j] > i - j:\n                    a[j] = i - j\n                else:\n                    break\n\n            for j in range(i + 1, n):\n                if a[j] > j - i:\n                    a[j] = j - i\n                else:\n                    break\n\n    print(*a)\n\ndef __starting_point():\n    solve()\n__starting_point()", "from collections import deque\nimport sys\n\n# def search(matrix, inicial, dirs, final):\n#     queue = deque()\n#     queue.append(inicial)\n#     matrix[inicial[0]][inicial[1]] = 0\n#     while len(queue) > 0:\n#         aux = queue.popleft()\n# \n#         tupla = (aux[0], aux[1] + 1)\n#         if matrix[tupla[0]][tupla[1]] != -1:\n#             if matrix[tupla[0]][tupla[1]] == -9 or matrix[tupla[0]][tupla[1]] == -8:\n#                 queue.append(tupla)\n#                 matrix[tupla[0]][tupla[1]] = matrix[aux[0]][aux[1]] \n#                 \n#                 dirs[tupla[0]][tupla[1]] = 'R'\n#                 if dirs[tupla[0]][tupla[1]] != dirs[aux[0]][aux[1]]:\n#                     matrix[tupla[0]][tupla[1]] += 1\n#                                         \n#         tupla = (aux[0], aux[1] - 1)\n#         if matrix[tupla[0]][tupla[1]] != -1:        \n#             if matrix[tupla[0]][tupla[1]] == -9 or matrix[tupla[0]][tupla[1]] == -8:\n#                 queue.append(tupla)\n#                 matrix[tupla[0]][tupla[1]] = matrix[aux[0]][aux[1]] \n#                 \n#                 dirs[tupla[0]][tupla[1]] = 'L'\n#                 if dirs[tupla[0]][tupla[1]] != dirs[aux[0]][aux[1]]:\n#                     matrix[tupla[0]][tupla[1]] += 1           \n#         \n#         tupla = (aux[0] - 1, aux[1])        \n#         if matrix[tupla[0]][tupla[1]] != -1:           \n#             if matrix[tupla[0]][tupla[1]] == -9 or matrix[tupla[0]][tupla[1]] == -8:\n#                 queue.append(tupla)\n#                 matrix[tupla[0]][tupla[1]] = matrix[aux[0]][aux[1]] \n#                 \n#                 dirs[tupla[0]][tupla[1]] = 'U'\n#                 if dirs[tupla[0]][tupla[1]] != dirs[aux[0]][aux[1]]:\n#                     matrix[tupla[0]][tupla[1]] += 1\n#                     \n#                         \n#         tupla = (aux[0] + 1, aux[1])\n#         if matrix[tupla[0]][tupla[1]] != -1:          \n#             if matrix[tupla[0]][tupla[1]] == -9 or matrix[tupla[0]][tupla[1]] == -8:\n#                 queue.append(tupla)\n#                 matrix[tupla[0]][tupla[1]] = matrix[aux[0]][aux[1]] \n#                 \n#                 dirs[tupla[0]][tupla[1]] = 'D'\n#                 if dirs[tupla[0]][tupla[1]] != dirs[aux[0]][aux[1]]:\n#                     matrix[tupla[0]][tupla[1]] += 1     \n#                 \n#     \n# \n# \n# n, m = map(int, sys.stdin.readline().strip().split(\" \"))\n# \n# matrix = []\n# dirs = []\n# aux = [-1 for i in range(m + 2)]\n# matrix.append(aux)\n# dirs.append(aux)\n# \n# inicial = ()\n# final = ()\n# for i in range(n):\n#     line = [-1] + list(sys.stdin.readline().strip()) + [-1]\n#     matrix.append(line)\n#     aux = [-1 for i in range(m + 2)]\n#     dirs.append(aux)\n#     for j in range(1, m + 1):\n#         if line[j] == 'S':\n#             inicial = (i + 1, j)\n#         elif line[j] == 'T':\n#             matrix[i + 1][j] = -8\n#             final = (i + 1, j)\n#         elif line[j] == '*':\n#             matrix[i + 1][j] = -10\n#         elif line[j] == '.':\n#             matrix[i + 1][j] = -9        \n#             \n# aux = [-1 for i in range(m + 2)]\n# matrix.append(aux)\n# dirs.append(aux)\n# \n# search(matrix, inicial, dirs, final)\n# if matrix[final[0]][final[1]] <= 3 and matrix[final[0]][final[1]] >= 0:\n#     print(\"YES\")\n# else:\n#     print(\"NO\")\n    \n\nn = int(sys.stdin.readline().strip())\narray = list(map(int, sys.stdin.readline().strip().split(\" \")))\nzeros = [-float('Inf')]\nfor i in range(n):\n    if array[i] == 0:\n        zeros.append(i)\nzeros.append(float('Inf'))\n      \nj = 1\nfor i in range(n):\n    if array[i] == 0:\n        j += 1\n        print(array[i], end=\" \")\n    else:\n        aux = min(abs(zeros[j] - i), abs(zeros[j - 1] - i))\n        print(aux, end=\" \")\n\n\n\n", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    zero_i = None\n    f = []\n    for i, ai in enumerate(a):\n        if ai == 0:\n            zero_i = i\n\n        if zero_i is None:\n            f.append(n)\n        else:\n            f.append(i - zero_i)\n\n    zero_i = None\n    b = []\n    for i, ai in enumerate(reversed(a)):\n        if ai == 0:\n            zero_i = i\n\n        if zero_i is None:\n            b.append(n)\n        else:\n            b.append(i - zero_i)\n\n    res = (min(fi, bi) for fi, bi in zip(f, reversed(b)))\n    for x in res:\n        print(x, end=' ')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "BIG = 10000000000\n\ndef main(n, arr):\n    dist = BIG\n    res = []\n    for x in arr:\n        if x == 0:\n            dist = 0\n        elif dist != BIG:\n            dist += 1\n        res.append(dist)\n\n    dist = BIG\n    for i in range(len(arr)-1, -1, -1):\n        x = arr[i]\n        if x == 0:\n            dist = 0\n        elif dist != BIG:\n            dist += 1\n\n        if res[i] > dist:\n            res[i] = dist\n\n    print(' '.join(map(str, res)))\n\n\n\n\nn = int(input())\narr = [int(x) for x in input().split()]\nmain(n, arr)\n", "n = int(input())\na = list(map(int, input().split() ))\n\nx = [0]*len(a)\ny = [0]*len(a)\n\nc1 = 0\nz1 = False\nc2 = 0\nz2 = False\n\nfor i in range(len(a)):\n    if a[i] == 0:\n        z1 = True\n        c1 = 1\n    elif z1:\n        x[i] = c1\n        c1+=1\n    else:\n        x[i] = 0\n\n    if a[n-i-1] == 0:\n        z2 = True\n        c2 = 1\n    elif z2:\n        y[n-i-1] = c2\n        c2+=1\n    else:\n        y[n-i-1] = 0\n\nans = \"\"\nfor i in range(len(a)):\n    if (x[i] == 0):\n        if y[i] == 0:\n            ans += \"0 \"\n        else:\n            ans += str(y[i]) + \" \"\n    else:\n        if y[i] == 0:\n            ans += str(x[i]) + \" \"\n        else:\n            ans += str(min(x[i], y[i])) + \" \"\nprint(ans)\n            \n\n        \n", "def qa():\n    n, k = map(int, input().split())\n    if k > n :\n        print('-1')\n        return\n    matrix = [[0]*n for _ in range(n)]\n    for i in range(k):\n        matrix[i][i] = 1\n    for line in matrix:\n        print(' '.join(map(str,line)))\ndef qb():\n    _ = input()\n    d = [*map(int,input().split())]\n    zeroIndex = [0 if v == 0 else len(d) for i, v in enumerate(d) ]\n    counter = len(d)\n    for i in range(len(d)):\n        if zeroIndex[i] == 0:\n            counter = 0\n            continue\n        counter += 1\n        zeroIndex[i] = min(counter, zeroIndex[i])\n    counter = len(d)\n    for i in range(len(d)-1,-1,-1):\n        if zeroIndex[i] == 0:\n            counter = 0\n            continue\n        counter += 1\n        zeroIndex[i] = min(counter, zeroIndex[i])\n    print(' '.join(map(str,zeroIndex)))\nqb()", "n=int(input())\na=[]\na=list(map(int,input().split()))\n\ndist = pow(10,9)\nd=[dist]*len(a)\n\nfor i in range(len(a)):\n    if(a[i]==0):\n        d[i]=0\n        dist = 0\n    elif(dist < d[i]):\n        dist+=1\n        d[i] = dist\n\nfor i in range(len(a)-1,-1,-1):\n    #print(dist)\n    if(a[i]==0):\n        d[i]=0\n        dist = 0\n    elif(dist + 1 < d[i]):\n        dist+=1\n        d[i] = dist\nfor i in d:\n    print(str(i)+' ',end='')\n", "from math import *\nlength=int(input())\na=list(map(int,input().strip().split()))\np=[-inf]\nfor i in range(length):\n    if a[i]==0:\n        p.append(i)\np.append(inf)\ni=0\nj=1\nb=[0 for _ in range(length)]\nfor k in range(length):\n    if k<p[j]:\n        b[k]=min(k-p[i],p[j]-k)\n    if k==p[j]:\n        j+=1\n        i+=1\nfor i in b:\n    print(i,end=' ')\n", "n  = int(input())\n\nl = list(map(int, input().split()))\nans = [400001 for i in range(n)]\nzs=[]\nfor x in range(n):\n    if l[x]==0:\n        zs.append(x)\n        ans[x]=0\n\nfor i in zs:\n    lp=i-1\n    rp=i+1\n    cntL=1\n    cntR=1\n    while lp!=-1:\n        \n        if ans[lp]<=cntL:\n            break\n        ans[lp]=cntL\n        cntL+=1\n        lp-=1\n    while rp!=n:\n        if ans[rp]<=cntR:\n            break\n        ans[rp]=cntR\n        cntR+=1\n        rp+=1\n         \nprint(' '.join([str(x) for x in ans]))\n", "def Posicion(L):\n    i = 1\n    A = L\n    for k in range (len(L)):\n        if L[k]!=0:\n            A[k]=i\n            i +=1\n        else:\n            i=1\n    return A     \ndef SepararDerecha(L):\n    B=[]\n    Mayork = 0\n    for k in range (len(L)):\n        if L[k]==0:\n            if k > Mayork:\n                Mayork = k\n    c = Mayork+1\n    while c < len(L):\n        B.append(L[c])\n        c += 1\n    return B\ndef SepararIzquierda(L):\n    B = []\n    k = 0\n    while L[k]!=0:\n        B.append(L[k])\n        k += 1\n    return B\ndef Invertir(L):\n    B =[]\n    k=len(L)-1\n    while k>=0:\n        B.append(L[k])\n        k -=1\n    return B    \nN = int(input())\nL = input()\nL = L.split()\nA = []\nfor k in range (len(L)):\n    A.append(int(L[k]))\nPI = SepararIzquierda(A)\nz = len(PI)\nPIII = []\nfor k in range (len(PI)):\n    PIII.append(z)\n    z-=1\npizquierda = len(PIII)\nPD = SepararDerecha(A)\nPD = Posicion(PD)\npderecha = len(PD)\nD = []\nfor k in range (pizquierda,len(A)-pderecha):\n    D.append(A[k])\nAI = Posicion(D)\nAD =  Invertir(D)\nAD = Posicion(AD)\nAD = Invertir(AD)\nB = []\nfor k in range (len(AD)):\n    if AD[k] < AI[k]:\n        B.append(AD[k])\n    else:\n        B.append(AI[k])\nC =[]\nfor k in range (len(PIII)):\n    C.append(PIII[k])\nfor k in range (len(B)):\n    C.append(B[k])\nfor k in range (len(PD)):\n    C.append(PD[k])\nRespuesta = str(C[0])\nfor k in range (1,len(C)):\n    Respuesta += ' ' + str(C[k])\nprint(Respuesta)\n", "#!/usr/bin/env python3\nfrom sys import stdin,stdout\n\ndef ri():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\nn = int(input())\na = list(ri())\n\nfor i in range(n):\n    if a[i] != 0:\n        a[i] = -1\n\nfor i in range(n):\n    if a[i] != 0:\n        continue\n    for j in range(i+1, n):\n        if a[j] == 0:\n            break\n        if a[j] == -1 or a[j] > j-i:\n            a[j] = j-i\n    for j in range(i-1, -1, -1):\n        if a[j] == 0:\n            break\n        if a[j] == -1 or a[j] > i-j:\n            a[j] = i-j\n\nprint(\" \".join(map(str, a)))\n", "n = int(input())\nnums = [int(x) for x in input().split(' ')]\nfirstZero = nums.index(0)\nlastZero = len(nums) - 1 - nums[::-1].index(0)\n\nfor i in range(len(nums[firstZero:])):\n\tif nums[firstZero + i] == 0:\n\t\tc = 0\n\telse:\n\t\tc += 1\n\tnums[firstZero + i] = c\nnums = nums[::-1]\nfor i in range(len(nums)):\n\tif nums[i] == 0:\n\t\tc = 0\n\telse:\n\t\tc += 1\n\n\tif i > len(nums) - firstZero:\n\t\tnums[i] = c\n\t\tcontinue\n\t\n\tif nums[i] >= c or nums[i] < 0:\n\t\tnums[i] = c \n\nprint(' '.join([str(x) for x in nums[::-1]]))", "import math\nn = int(input())\ndata = []\ndata = list(map(int,input().split()))\nl = [0] * n\nr = [0] * n\np = 2 * n\np1 = 2 * n\ns = ''\nfor i in range(n):\n    l[i] = p\n    if data[i] == 0:\n        p = i\n    \nfor i in range(n - 1,-1, -1):\n    r[i] = p1\n    if data[i] == 0:\n        p1 = i \n\nfor i in range(n): \n    if data[i] != 0:\n        print(min(abs((l[i] - i)),abs((r[i] - i))), end = ' ')\n    else:\n        print(0, end = ' ')\n        \n\n    ", "\nn = int(input())\narr = input().split(' ')\n\n\nlast_zeros = [0]*n\nlast_zero = -1\nfor i in range(n):\n    arr[i] = int(arr[i])\n    if arr[i] == 0:\n        last_zero = i\n    if last_zero == -1:\n        last_zeros[i] = 10**10\n    else:\n        last_zeros[i] = i - last_zero\n\nlast_zero = -1\nfor i in reversed(range(n)):\n    if arr[i] == 0:\n        last_zero = i\n    if last_zero != -1:\n        last_zeros[i] = min(last_zeros[i], last_zero - i)\n\nfor el in last_zeros:\n    print(el, end=' ')", "n=int(input())\na=list(input().split())\nb=[i for i in range(n) if a[i]==\"0\"]\nc=\"\"\nj=0\nfor i in range(n):\n    if b[0]>=i:\n        t=b[0]-i\n        c+=\"{} \".format(t)\n    elif j!=len(b)-1:\n        t=min(abs(i-b[j]),abs(i-b[j+1]))\n        if t==0:\n            j+=1\n        c+=\"{} \".format(t)\n    else:\n        c+=\"{} \".format(i-b[j])\nprint(c)\n    \n", "import sys\n\ninf = 1 << 30\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    ans = [inf]*n\n\n    d = inf\n\n    for i in range(n):\n        if a[i] == 0:\n            d = 0\n\n        ans[i] = d\n        d += 1\n\n    d = inf\n\n    for i in reversed(range(n)):\n        if a[i] == 0:\n            d = 0\n\n        ans[i] = min(ans[i], d)\n        d += 1\n\n    print(*ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\nl,r,ll,rr,c=[0]*n,[0]*n,-10**9,10**9,[]\nfor i in range(n):\n  if not a[i]:ll=i\n  l[i]=i-ll\nfor i in range(n-1,-1,-1):\n  if not a[i]:rr=i\n  r[i]=rr-i\nfor i in range(n):c.append(str(min(l[i],r[i])))\nprint(' '.join(c))\n", "import sys\nimport math\nn = int(input())\na = list(map(int, input().split()))\nans = [n for i in range(n)]\nlind = -n\nfor i in range(n):\n    if a[i] == 0:\n        lind = i\n    ans[i] = min(ans[i], abs(i - lind))\nlind = -n\nfor i in range(n - 1, -1, -1):\n    if a[i] == 0:\n        lind = i\n    ans[i] = min(ans[i], abs(i - lind))\nfor  i in range(n):\n    print(ans[i], end  = \" \" )", "n = int(input())\na = list(map(int, input().split()))\n\ninf = 10 ** 9\nans = [inf] * n\nl = inf\nfor i in range(n):\n    if not a[i]:\n        l = 0\n    \n    ans[i] = min(ans[i], l)\n    l += 1\n\nl = inf\nfor i in range(n - 1, -1, -1):\n    if not a[i]:\n        l = 0\n    \n    ans[i] = min(ans[i], l)\n    l += 1\n    \nprint(' '.join(map(str, ans)))"]