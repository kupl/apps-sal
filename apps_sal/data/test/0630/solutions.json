["# python3\n\ndef readline(): return tuple(map(int, input().split()))\n\n\ndef main():\n    n, k = readline()\n    a = readline()\n\n    answer = list()\n\n    for (i, link) in enumerate(a):\n        bottom = max(0, i - k)\n        top = min(n, i + k + 1)\n\n        if link == 0:\n            answer.append(top - bottom)\n        else:\n            bottom = max(bottom, link + k)\n            answer.append(max(0, top - bottom) + answer[link - 1])\n\n    print(\" \".join(map(str, answer)))\n\n\nmain()\n", "n, k = map(int, input().split())\na = list(map(lambda x: int(x) - 1, input().split()))\ndp = [0] * n\nfor i in range(n):\n\tif a[i] == -1:\n\t\tdp[i] = min(i, k) + min(n - i - 1, k) + 1\n\telse:\n\t\tdp[i] = dp[a[i]] - min(n - a[i] - 1, k) + min(n - i - 1, k) + min(2 * k, i - a[i] - 1) + 1\nprint(' '.join(list(map(str, dp))))", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nb=[min(1+k,n)]*n\nfor i in range(1,n):\n    x = a[i] - 1\n    if x==-1:\n        b[i]=min(i,k)+1+min(n-i-1,k)\n    else:\n        b[i]=b[x]+min(k+1,i-(x+min(k,n-x-1)))+min(n-i-1,k)\nprint(*b)\n", "n, k = map(int,input().split())\ndp = [0]\nbound = [0]\na = list(map(int,input().split()))\n\nfor i in range(1, n+1):\n    dp.append(dp[a[i-1]])\n    bound.append(i+k)\n    t1 = max(bound[a[i-1]]+1, i-k)\n    t2 = min(i+k, n)\n    t3 = t2 - t1 + 1\n    if t3>0: dp[i] += t3\n\nfor i in range(1, n+1):\n    print(dp[i],end = ' ')\n", "n, k = map(int, input().split())\na = [int(x) for x in input().split()]\n\nans = []\nfor i in range(n):\n    c = 0\n    imin = max(0, i - k)\n    imax = min(n-1, i + k)\n    if a[i] != 0:\n        c += ans[a[i]-1]\n        amin = max(0, a[i]-1 - k)\n        amax = min(n - 1, a[i]-1 + k)\n        if imin > amax:\n            c += imax-imin + 1\n        else:\n            c += imax-amax\n    else:\n        c += imax-imin + 1\n    ans.append(c)\n\nprint(\" \".join([str(x) for x in ans]))", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nans = [0] * n\nfor i in range(n):\n    ans[i] += min(n, i + 1 + k) - max(1, i + 1 - k) + 1\n    if a[i] != 0:\n        ans[i] += ans[a[i] - 1] - max(0, min(n, a[i] + k) - max(1, i + 1 - k) + 1)\nprint(*ans)\n", "def read_ints():\n    return list(map(int, input().split()))\n\nn_messages, n_visible = read_ints()\n\nrefs = read_ints()\n\nNO_REF = -1\n\n# To match indexes in list\nrefs = [i-1 for i in refs]\n\nread = [0] * n_messages\n\ndef messages_seen_at(index):\n    return 1 + min(index, n_visible) + min(n_messages - index - 1, n_visible)\n\ndef intersection_seen(index, reference):\n    if index <= reference:\n        print(\"NOoooooooooo\")\n\n    def segment(index):\n        return (max(0, index - n_visible), min(reference + n_visible, n_messages - 1))\n\n    a, b = segment(reference)\n    c, d = segment(index)\n\n    return max(b - c + 1, 0)\n\ndef get_read(index):\n    if refs[index] == NO_REF:\n        read[index] = messages_seen_at(index)\n    else:\n        reads_by_ref = read[refs[index]]\n        read[index] = reads_by_ref + messages_seen_at(index) - intersection_seen(index, refs[index])\n    return read[index]\n\nfor i in range(n_messages):\n    get_read(i)\n\nprint(' '.join(map(str, read)))", "n,k=map(int,input().split())\ns=list(map(int,input().split()))\nans=[[0] for i in range(n)]\nfor i in range(len(s)):\n    s[i]-=1\nfor i in range(n):\n    l=max(0,i-k)\n    r=min(n-1,i+k)\n    if s[i]==-1:   \n        ans[i]=[r-l+1,r]\n    else:    \n        ans[i]=[ans[s[i]][0]+(r-l+1)-max(0,ans[s[i]][1]-l+1),r]\nfor j in range(n):\n    print(ans[j][0],end=' ')\n\n        \n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = [min(i - 1, k) + 1 + min(n - i, k) for i in range(1, n + 1)]\n\n# l + 1 + min(n - l, k) - (r - min(r - 1, k)) - \u0447\u0438\u0441\u043b\u043e \u043f\u0435\u0440\u0435\u043a\u0440\u044b\u0432\u0430\u044e\u0438\u0445\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n\nfor i in range(1, n + 1):\n    a_ = a[i - 1]\n\n    if a_ != 0:\n        l, r = sorted([i, a_])\n\n        d1 = ans[a_ - 1]\n        d2 = max(0, l + 1 + min(n - l, k) - (r - min(r - 1, k)))\n\n        delta = d1 - d2\n\n        ans[i - 1] += delta\n\nprint(' '.join(map(str, ans)))\n", "q,w=map(int,input().split())\na=[0]+list(map(int,input().split()))\ns=[0 for i in range(0,q+1)]\ndef f(q,w,pos):\n    d=1\n    if w>=pos:\n        d+=pos-1\n    else:\n        d+=w\n    if pos>=q-w:\n        d+=q-pos\n    else:\n        d+=w\n    return d\ndef g(q,w,i,j):\n    ans=w*2-j+i+1\n    if j-w<=0:\n        ans-=w-j+1\n    if i+w>q:\n        ans-=i+w-q\n    return ans\n    \nfor i in range(1,q+1):\n    if a[i]==0:\n        s[i]=f(q,w,i)\n    else:\n        t=i-a[i]\n        if t>2*w:\n            s[i]=f(q,w,i)+s[a[i]]\n        else:\n            s[i]=s[a[i]]+f(q,w,i)-g(q,w,a[i],i)\nprint(*s[1:])", "def main():\n    n, k = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a = [0] * n\n    for i in range(n):\n        l, r = 0, n - 1\n        a[i] = 0\n        if b[i]:\n            l = b[i] + k\n            a[i] += a[b[i] - 1]\n        l = max(l, i - k)\n        r = min(r, i + k)\n        if r >= l:\n            a[i] += r - l + 1\n\n    print(' '.join(map(str, a)))\n\n\nmain()\n", "n,k = map(int, input().split())\na = list(map(int , input().split()))\na = [i-1 for i in a]\nans = []\nfor i in range(n):\n    if a[i] == -1:\n        ans.append(1 + min(n-i-1, k) + min(i, k))\n    else:\n        ref = a[i]\n        r1 = min(ref+k, n-1)\n        r2 = min(i+k, n-1)\n        l2 = max(i-k, 0)\n        if l2 > r1:\n            ans.append(ans[ref] + (r2-l2+1))\n        else:\n            ans.append(ans[ref] + (r2-r1))\nprint(' '.join([str(i) for i in ans]))", "n, k = input().split(' ')\nn = int(n)\nk = int(k)\narr = input().split(' ')\narr = list(map(lambda x: int(x), arr))\n\narr_d = [0] * 100005;\narr_d_right = [0] * 100005;\n\ndef count(i, k, n):\n    # total_count = 0\n    # while True:\n    if i - k > 0:\n        left_ind = i - k\n    else:\n        left_ind = 0\n        \n    if i + k < n - 1:\n        right_ind = i + k\n    else:\n        right_ind = n - 1 \n        \n    #print(arr_d[:n])\n    #print(arr_d_right[:n])\n    #print('>>>>>')\n    next_i = arr[i] - 1\n    \n    if next_i != -1:\n        prev_val = arr_d[next_i]\n        #print(left_ind, right_ind)\n        if left_ind <= arr_d_right[next_i]:\n            left_ind = arr_d_right[next_i] + 1\n    else:\n        prev_val = 0\n        \n    arr_d[i] = prev_val + right_ind - left_ind + 1\n    arr_d_right[i] = right_ind\n    return arr_d[i]\n    \nres_arr = []\nfor ind in range(0, len(arr)): \n    res_arr.append(str(count(ind, k, n)))\n        \nprint(' '.join(res_arr))", "n, k = map(int, input().split())\nmes = list(map(int, input().split()))\nss = [0] * n\ndef calc(start):\n  last = n\n  cur = start\n  s = 0\n  while (cur != 0) and (last > 0):\n    if cur <= last:\n      s += 1\n      s += min(k, cur - 1)\n      s += min(k, last - cur)\n    else:\n      s += max(last - (cur - min(k, cur - 1) - 1), 0)\n    \n    last = cur - min(k, cur - 1) - 1\n    cur = mes[cur - 1]\n\n    if ss[cur - 1] != 0:\n      s += max(ss[cur - 1] - max(min(cur + k, n) - last, 0), 0)\n      break\n    \n  ss[start - 1] = s\n  return s\n    \nfor i in range(1, len(mes)):\n  print(calc(i), end=' ')\nprint(calc(len(mes)))", "from sys import setrecursionlimit\nsetrecursionlimit(10**6)\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nsave = [[] for i in range(0, len(a)+1)]\n\ndef fun(pos):\n    if save[pos] == []:\n        left = max(pos-1-k, 0)\n        right = min(pos+k, len(a))\n        if a[pos-1] != 0:\n            new_set=fun(a[pos-1])\n            if new_set[-1][1]>=left:\n                new_set[-1]=(new_set[-1][0],right)\n            else:\n                new_set.append(tuple([left,right]))\n        else:\n            new_set=[tuple([left,right])]\n        save[pos]=new_set\n        return new_set.copy()\n    else:\n        return save[pos].copy()\ndef enc(a):\n    #print(a)\n    z=0\n    for i in a:\n        z=z+i[1]-i[0]\n    return z\n\nfor i in range(1, len(a)+1):\n    #print(fun(i))\n    print(enc(fun(i)),end=' ')\n", "n, k = map(int, input().split())\na = map(int, input().split())\nb = [0] * n\nfor i, p in enumerate(a):\n    cur_start = max(0, i - k)\n    cur_end = min(n - 1, i + k)\n    if p == 0:\n        b[i] = cur_end - cur_start + 1\n    else:\n        p -= 1\n        prev_end = min(n-1, p + k)\n        if cur_start > prev_end:\n            b[i] = b[p] + cur_end - cur_start + 1\n        else:\n            b[i] = b[p] + cur_end - prev_end\n\nprint(' '.join(map(str, b)))", "def s(x,y):\n    nonlocal k,n\n    if x-y-1>=2*k:\n        return k+1+min(k,n-x-1)\n    elif x-y-1>=k:\n        return min(n-x-1,k)+x-y-k\n    else:\n        return min(n-1,x+k) - min(n-1,y+k)\ndef search(i):\n    nonlocal a,n,k,ans\n    if a[i]==-1:\n        ans[i] = min(k,i)+min(k,n-i-1)+1\n        return min(k,i)+min(k,n-i-1)+1\n    else:\n      if ans[i]==0:\n          ans[i] = search(a[i])+s(i,a[i])\n          return search(a[i])+s(i,a[i])\n      else:\n          return ans[i]\n\nn,k = input().split()\nn = int(n)\nk = int(k)\nans = []\na = input().split()\nfor i in range(n):\n    a[i] = int(a[i])-1\n    ans.append(0)\nfor i in range(n):\n    if ans[i]==0:\n        ans[i]=search(i)\nfor i in range(len(ans)):\n    print(ans[i],end = ' ')\n    ", "def read():\n    return list(map(int,input().split()))\nn,k=read()\na=read()\nb=[min(k,n-1)+1]\nfor i in range(1,n):\n    if a[i]==0:\n        b.append(min(i,k)+1+min(n-i-1,k))\n    else:\n        b.append(b[a[i]-1]-min(k,n-a[i])+min(i-a[i],2*k)+min(n-i-1,k)+1)\nprint(*b)\n\n    \n        \n", "def count_unic_mess(crt, display, array, n, result_arr):\n    low_bound = 0 if crt - display < 0 else crt - display\n\n    high_bound = n if crt + display + 1 > n else crt + display + 1\n\n    result = high_bound - low_bound\n\n    if array[crt] == 0:\n        result_arr.append(result)\n        return result\n\n    ref = array[crt] - 1\n    high_bound_ref = n if ref + display + 1 > n else ref + display + 1\n\n    if high_bound_ref >= low_bound:\n        result += result_arr[ref] - high_bound_ref + low_bound\n    else:\n        result += result_arr[ref]\n\n    result_arr.append(result)\n    return result\n\n\nn, k = map(int, input().split(' '))\n\nlinks = [int(x) for x in input().split(' ')]\ncount_arr = []\n\nfor i in range(n):\n    print(count_unic_mess(i, k, links, n, count_arr), end=' ')\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n  if a[i] == 0:\n    b[i] = min(k,i)\n\nfor i in range(n):\n  if a[i] != 0:\n    b[i] = b[a[i]-1] + min(2*k, i - a[i]) + 1\nans = [0] * n\n\nfor i in range(n):\n  ans[i] = b[i] + min(k, n - i - 1) + 1\n\nprint(*ans)", "n, k = map(int, input().split())\nk = min(k, n - 1)\na = list(map(lambda x: int(x) - 1, input().split()))\nkek = [0 for i in range(n)]\nans = [0 for i in range(n)]\nfor i in range(n):\n    if a[i] == -1:\n        cur_l = max(0, i - k)\n        cur_r = min(i + k, n - 1)\n        ans[i] = (i - cur_l) + (cur_r - i) + 1\n    else:\n        x = ans[a[i]]\n        d = (i - a[i] - 1)\n        if d >= 2 * k:\n            x += min(k, i) + min(k, n - i - 1) + 1\n        else:\n            o = 0\n            cur_l = max(0, i - k)\n            cur_r = min(i + k, n - 1)\n            his_l = min(0, a[i] - k)\n            his_r = min(a[i] + k, n - 1)\n            if 2 * k >= d >= k:\n                o = d - 2 * (k)\n            elif d == k - 1:\n                o = (-d - 2)\n            else:\n                o = (-(his_r - a[i] + 1)) - (a[i] - cur_l)\n            #print(d, o, x, i, cur_l, cur_r)\n            x += (i - cur_l) + (cur_r - i) + 1 + o\n        ans[i] = x\nprint(' '.join(map(str, ans)))", "# python3\n# utf-8\n\ndef solve():\n    n, k = (int(x) for x in input().split())\n    idx___parent = [int(x) - 1 for x in input().split()]\n    idx___l_cl = [max(0, idx - k) for idx in range(n)]\n    idx___r_op = [min(n, idx + k + 1) for idx in range(n)]\n\n    idx___message_count = []\n    for idx in range(n):\n        curr_l_cl = idx___l_cl[idx]\n        curr_r_op = idx___r_op[idx]\n        if idx___parent[idx] == -1:\n            idx___message_count.append(curr_r_op - curr_l_cl)\n            continue\n        parent = idx___parent[idx]\n        prev_r_op = idx___r_op[parent]\n        curr_message_count = idx___message_count[parent]\n        if prev_r_op > curr_l_cl:\n            curr_l_cl = prev_r_op\n        curr_message_count += curr_r_op - curr_l_cl\n        idx___message_count.append(curr_message_count)\n    print(*idx___message_count)\n\nt = 1\n# t = int(input())\nfor _ in range(t):\n    solve()\n", "from math import *\nfrom random import *\nfrom copy import *\nimport os, sys\n\nn, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\nres = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n  prev = A[i - 1]\n  res[i] = res[prev]\n  prev = prev - k if prev == 0 else prev\n  res[i] += min(max(0, i - prev - k - 1), k) + max(0, min(k + 1, n - i + 1) - max(0, min(n - prev + 1, prev + k - i + 1)))\nprint(' '.join(list(map(str, res[1 :]))))\n", "n, k = (int(s) for s in input().split())\na = [0] + [int(s) for s in input().split()]\nans = [0,]\n\nfor i in range(1, n + 1):\n    if not a[i]:\n        ans.append( min(i - 1, k) + 1 + min(n - i, k) )\n    else:\n        if a[i] + k < i - k:\n            ans.append( min(i - 1, k) + 1 + min(n - i, k) + ans[a[i]] )\n        else:\n            ans.append( ans[a[i]] + min(n, i + k) - a[i] - min(k, n - a[i]))\n    \nprint(*ans[1:])"]