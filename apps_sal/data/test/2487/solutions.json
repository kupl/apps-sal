["n=int(input())\nki=[[] for _ in range(n)]\nans=0\nfor i in range(1,n+1):\n    ans+=i*(n-i+1)\n\nfor _ in range(n-1):\n    u,v=map(int,input().split())\n    if u>v:u,v=v,u\n    ans-=u*(n-v+1)\nprint(ans)", "N = int(input())\nret = 0\n# L,R\u3092\u7dcf\u5f53\u305f\u308a\u3057\u305f\u3068\u304d\u306e\u9802\u70b9\u6570\u306e\u7dcf\u548c\nfor i in range(N):\n    ret += (i+1) * (N-i)\nfor _ in range(N-1):\n    # \u8fba\u304c1\u3064\u6709\u52b9\u306b\u306a\u308b\u3054\u306b\u3001\u9023\u7d50\u6210\u5206\u304c1\u3064\u6e1b\u308b\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    if x > y:\n        x, y = y, x\n    ret -= (x+1) * (N-y)\n\nprint(ret)", "N=int(input())\nl = [list(map(int, input().split())) for l in range(N-1)]\nc=0\nfor i in range(N-1):c+=min(l[i])*(N+1-max(l[i]))\nprint(N*(N+1)*(N+2)//6-c)", "n = int(input())\nans = int((n * (n+1) * (n+2))/6)\nfor i in range(n-1):\n\tx, y = map(int, input().split(' '))\n\tans -= y * (n + 1 - x) if x > y else x * (n + 1 - y)\nprint(ans)", "n = int(input())\ncnt = 0\nfor i in range(1,n):\n    u, v = map(int, input().split())\n    l = min(u,v)\n    h = max(u,v)\n    cnt -= l*(n-h+1)\n    cnt += i*(n-i+1)\ncnt += n\n    \nprint(cnt)", "n = int(input())\nd = [0] * n\npresent = [[] for i in range(n)]\nfor i in range(n - 1):\n    u, v = list(map(int, input().split()))\n    u -= 1\n    v -= 1\n    if u > v:\n        u, v = v, u\n    d[v] += 1\n    present[u].append(v)\nans = 0\ncur = 0\nfor v in range(n):\n    cur += (n - v) * d[v]\nfor l in range(n):\n    ans += (l + 1) * (l + 2) // 2\n    ans -= cur\n    for v in present[l]:\n        cur -= (n - v)\nprint(ans)\n", "\nN=int(input())\nE=[]\nfor i in range(N-1):\n    E.append(list(map(int,input().split())))\nV=[]\nfor i in range(N):\n    V.append([])\nfor e in E:\n    if e[0]>e[1]:\n        V[e[0]-1].append(e[1]-1)\n    else:\n        V[e[1]-1].append(e[0]-1)\nS=0\nF=0\nfor i in range(N):\n    F=F+i+1-sum([j+1 for j in V[i]])\n    S+=F\nprint(S)", "N = int(input())\nV = sum([i * (N - i + 1) for i in range(1, N + 1)])\nE = 0\nfor i in range(N - 1):\n    a, b = list(map(int, input().split()))\n    a, b = min(a, b), max(a, b)\n    E += a * (N - b + 1)\nprint((V - E))\n", "N = int(input())\nM = 0\nfor _ in range(N - 1):\n    u, v = sorted(map(int, input().split()))\n    M += u * (N - v + 1)\nV = 0\nfor r in range(1, N + 1):\n    V += r * (N - r + 1)\nprint((V - M))\n", "# after editorial\n\n#\n# PROP.\n#   Subgraph of tree is forest.\n#\n# PROP.\n#   For forest,\n#     <num-verts> = <num-edges> + <num-components>\n#   since for each component,\n#     Vc = Ec + 1.\n#\n# PROP.\n#   result = \\sum_{i <= j} num_components(i, j)\n#          = \\sum num_verts(i, j) - num_edges(i, j)\n#          = (\\sum num_verts(i, j)) - (\\sum num_edges(i, j))\n#\n#   \\sum num_verts(i, j) = 1 + .. + (n-1) + n +\n#                          1 + .. + (n-1) +\n#                          ... +\n#                          1\n#                        = (tetrahedral number) = binom(n + 2, 3)\n#\n#   \\sum num_edges(i, j) = \\sum_e |{(i, j) | e in [i, j]}|\n#                        = \\sum_e (i0 * (n + 1 - j0))  (where e = (i0, j0))\n#\n\ndef solve(ls, debug=0):\n    n = len(ls) + 1\n    term1 = ((n + 2) * (n + 1) * n) // 6  # 1st term in above PROP\n    term2 = 0  # 2nd term in above PROP\n    for i, j in ls:\n        if i > j:\n            i, j = j, i\n        term2 += i * (n + 1 - j)\n\n    return term1 - term2\n\n\ndef main(istr, ostr):\n    n = int(istr.readline())\n    ls = []\n    for i in range(n - 1):\n        v1, v2 = list(map(int, istr.readline().strip().split()))\n        ls.append([v1, v2])\n    result = solve(ls)\n    print(result, file=ostr)\n\n\ndef __starting_point():\n    import sys\n\n    main(sys.stdin, sys.stdout)\n\n__starting_point()", "def main():\n    n = int(input())\n    x = 0\n    y = 0\n    for i in range(1, n+1):\n        x += (n-i+1)*i\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        if v < u:\n            u, v = v, u\n        y += u*(n-v+1)\n    print(x-y)\n\ndef __starting_point():\n    main()\n__starting_point()", "# F - Intervals on Tree\n\n# \u03a3\u9023\u7d50\u6210\u5206\u306e\u500b\u6570\uff1d\u03a3\u9802\u70b9\u306e\u500b\u6570 \u2212 \u03a3\u8fba\u306e\u500b\u6570\n\nN = int(input())\nV = 0\nE = 0\n\nfor _ in range(N-1):\n    u, v = map(int, input().split())\n    if v < u:\n        u, v = v, u\n    E += u * (N-v+1)\n\nfor i in range(1, N+1):\n    V += i * (N+1-i)\n\nprint(V - E)", "N=int(input())\nANS=0\n\nfor i in range(1,N+1):\n    ANS+=i*(i+1)//2\n\nfor i in range(N-1):\n    x,y=sorted(map(int,input().split()))\n    ANS-=x*(N-y+1)\n    \nprint(ANS)", "n=int(input())\na=0\nb=0\nfor i in range(1,n+1):\n    a+=(n-i+1)*(n-i+2)//2\nfor i in range(n-1):\n    u,v=map(int,input().split())\n    b+=min(u,v)*(n-max(u,v)+1)\nprint(a-b)", "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**8)\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return [LIST() for _ in range(n)]\n\n\nINF = float(\"inf\")\n\n\ndef main():\n    ans = 0\n    N = INT()\n    for i in range(N):\n        ans += (N-i)*(N-i+1)//2\n    uv = ZIP(N-1)\n    for u, v in uv:\n        if v < u:\n            u, v = v, u\n        ans -= u * (N-v+1)\n    print(ans)\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n = ni()\n    a = n * (n + 1) * (n + 2) // 6\n    for i in range(n-1):\n        u, v = nm()\n        if u > v:\n            u, v = v, u\n        a -= u * (n - v + 1)\n    print(a)\n    return\n\nsolve()\n", "import numpy as np\nN = int(input())\nnum = N * (N+1) * (N+2) // 6\nfor _ in range(N-1):\n  u, v = sorted(map(int, input().split()))\n  num -= (N+1-v) * u\nprint(num)", "# coding: utf-8\nimport sys\n# from operator import itemgetter\nsysread = sys.stdin.readline\nread = sys.stdin.read\nsys.setrecursionlimit(10 ** 7)\nfrom heapq import heappop, heappush\n#from collections import OrderedDict, defaultdict\n#import math\n#from itertools import product, accumulate, combinations, product\n#import bisect# lower_bound etc\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#import numba\n\ndef sum_between(a, b):\n    l, r = min(a,b), max(a,b)\n    return (r-l+1) * (r+l) // 2\n\ndef run():\n    N = int(input())\n    n_dots = 0\n    for i in range(1, N+1):\n        n_dots += (1+i) * i // 2\n    #print(n_dots)\n    ans = (N-1) * (N+1) * N // 2\n    #print(ans)\n    for i in range(N-1):\n        u, v = map(int, input().split())\n        l, r = min(u, v), max(u, v)\n        tmp = 0\n        if l > 1: tmp += sum_between(r-1, r-l+1)\n        tmp += r-l\n        tmp += sum_between(N-l, 1)\n        #print(tmp)\n        ans -= tmp\n\n    print(n_dots - ans)\n\n\n    ans = (N-1) * N * N\n\n\ndef __starting_point():\n    run()\n__starting_point()", "N = int(input())\ncount = [1 for _ in range(N+2)]\ncount[-1] = 0\ncount[0] = 0\nnextpoint = [[] for _ in range(N+1)]\nfor _ in range(N-1):\n  u, v = list(map(int, input().split()))\n  if u > v:\n    nextpoint[v].append(u)\n  else:\n    nextpoint[u].append(v)\n\n#print(nextpoint)\nfor k in range(N+1):\n  if len(nextpoint[k]) > 0:\n    nextpoint[k].sort()\n\n#print(nextpoint)\nfor k in range(1, N):\n  for item in nextpoint[k]:\n    count[item] -= 1\n\n#print(count)\nans = 0\nfor k in range(1, N):\n  count[k+1] += count[k]\n#print(count)\nans = sum(count) #L=1\n#print(ans)\nbefore = ans\nfor k in range(1, N):#L=2~N\n  before -= N-k+1\n  for item in nextpoint[k]:\n    before += N+1-item\n  ans += before\nprint(ans)\n\n", "# coding: utf-8\nimport sys\n# from operator import itemgetter\nsysread = sys.stdin.readline\nread = sys.stdin.read\nsys.setrecursionlimit(10 ** 7)\nfrom heapq import heappop, heappush\n#from collections import OrderedDict, defaultdict\n#import math\n#from itertools import product, accumulate, combinations, product\n#import bisect# lower_bound etc\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#import numba\n\ndef sum_between(a, b):\n    if a > b:a, b = b, a\n    return (b-a+1) * (b+a) // 2\n\ndef run():\n    N = int(input())\n    n_dots = 0\n    for i in range(1, N+1):\n        n_dots += (1+i) * i // 2\n    #print(n_dots)\n    ans = (N-1) * (N+1) * N // 2\n    #print(ans)\n    for i in range(N-1):\n        l, r = map(int, input().split())\n        if l > r: l,r = r,l\n        tmp = 0\n        if l > 1: tmp += sum_between(r-1, r-l+1)\n        tmp += r-l\n        tmp += sum_between(N-l, 1)\n        #print(tmp)\n        ans -= tmp\n\n    print(n_dots - ans)\n\n\n    ans = (N-1) * N * N\n\n\ndef __starting_point():\n    run()\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\ndef main():\n  n = int(input())\n  tree = [[] for _ in range(n)]\n  for i in range(n-1):\n    v, w = list(map(int, input().split()))\n    if v > w:\n      v, w = w, v\n    tree[w-1].append(v-1)\n  \n  ans = 0\n  count = 0\n  for i in range(n):\n    count += i+1\n    for v in tree[i]:\n      count -= v+1\n    ans += count\n  \n  print(ans)\n  \ndef __starting_point():\n  main()\n\n__starting_point()", "# coding: utf-8\nimport sys\n# from operator import itemgetter\nsysread = sys.stdin.readline\nread = sys.stdin.read\nsys.setrecursionlimit(10 ** 7)\nfrom heapq import heappop, heappush\n#from collections import OrderedDict, defaultdict\n#import math\n#from itertools import product, accumulate, combinations, product\n#import bisect# lower_bound etc\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#import numba\n\ndef sum_between(a, b):\n    if a > b:a, b = b, a\n    return (b-a+1) * (b+a) // 2\n\ndef run():\n    N = int(input())\n    n_dots = 0\n    for i in range(1, N+1):\n        n_dots += (1+i) * i // 2\n    #print(n_dots)\n    ans = (N-1) * (N+1) * N // 2\n    #print(ans)\n    for i in range(N-1):\n        l, r = map(int, sysread().split())\n        if l > r: l,r = r,l\n        tmp = 0\n        if l > 1: tmp += sum_between(r-1, r-l+1)\n        tmp += r-l\n        tmp += sum_between(N-l, 1)\n        #print(tmp)\n        ans -= tmp\n\n    print(n_dots - ans)\n\n\n    ans = (N-1) * N * N\n\n\ndef __starting_point():\n    run()\n__starting_point()", "N=int(input())\n\nanswer=N*(N+1)*(N+2)//6\nfor _ in range(N-1):\n  u,v=map(int,input().split())\n  if u>v:\n    u,v=v,u\n  answer-=u*(N-v+1)\n  \nprint(answer)", "class edge:\n    def __init__(self, u, v):\n        self.u = u\n        self.v = v\n    def min(self):\n        return min(self.u, self.v)\n    def max(self):\n        return max(self.u, self.v)\n\nN = int(input())\n \nedge_list = []\nfor i in range(N - 1):\n    u, v = list(map(int, input().split()))\n    edge_list.append(edge(u - 1, v - 1))\n \nver_num = int(N * (N + 1) * (N + 2) / 6)\n \nedge_num = 0\nfor e in edge_list:\n    edge_num += (N + 1 - (e.max() + 1)) * (e.min() + 1)\n    \nprint((ver_num - edge_num))\n", "import numpy as np\nN = int(input())\nnum = 0\nfor i in range(1, N+1):\n  num += i * (N+1-i)\nfor _ in range(N-1):\n  u, v = map(int, input().split())\n  x, y = min(u, v), max(u, v)\n  num -= (N+1-y) * x\nprint(num)", "import sys\ninput=sys.stdin.readline\nn=int(input())\nans=0\nfor i in range(n):\n\tans+=(i+1)*(n-i)\nfor i in range(n-1):\n\ta,b=map(int,input().split())\n\ta,b=min(a,b),max(a,b)\n\tans-=a*(n-b+1)\nprint(ans)", "N = int(input())\nUV = [list(map(int, input().split())) for _ in range(N-1)]\nans = 0\nfor i in range(N):\n    ans += (i+1) * (N-i)\nfor u, v in UV:\n    if u > v:\n        u, v = v, u\n    ans -= u * (N-v+1)\nprint(ans)\n", "N=int(input())\nl = [sorted(list(map(int, input().split()))) for l in range(N-1)]\nc=0\nfor i in range(N-1):c+=l[i][0]*(N+1-l[i][1])\nprint(N*(N+1)*(N+2)//6-c)", "N = int(input())\nedge = 0\nfor i in range(N-1):\n    u,v = map(int,input().split())\n    if u > v:\n        a = u\n        u = v\n        v = a\n    edge += u*(N-v+1)\n\nvertice = 0    \nfor i in range(1,N+1):\n    vertice += i*(N-i+1)\n    \nprint(vertice-edge)", "N = 0\na = 0\n\ntry:\n    N = int(input())\n    for i in range(N + 1):\n        a += i * (i + 1) // 2\n    for i in range(N - 1):\n        line = input().split()\n        u = min(int(line[0]), int(line[1])) - 1\n        v = max(int(line[0]), int(line[1])) - 1\n        a -= (u + 1) * (N - v)        \nexcept:\n  pass\n\nprint(a)", "n = int(input())\nans = 0\nfor i in range(n):\n    ans += (i + 1) * (n - i)\nfor i in range(n-1):\n    u, v = map(int, input().split())\n    ans -= min(u, v) * (n - max(u, v) + 1)\nprint(ans)", "import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n = ni()\n    ans = n * (n + 1) ** 2 // 2 - n * (n + 1) * (2 * n + 1) // 6\n    for _ in range(n-1):\n        u, v = nm()\n        if u > v:\n            u, v = v, u\n        ans -= u * (n - v + 1)\n    print(ans)\n    return\n\nsolve()\n", "N = int(input())\n\ndef solve():\n    nedge = 0\n    npoint = N*(N+1)*(N+2)//6\n    for _ in range(N-1):\n        u, v = list(map(int, input().split()))\n        u, v = min(u, v), max(u, v)\n        nedge += u * (N-v+1)\n    return npoint - nedge\n\n\ndef __starting_point():\n    print((solve()))\n\n__starting_point()", "def main():\n    N = int( input())\n    UV = [ tuple( map( int, input().split())) for _ in range(N-1)]\n    ans = 0\n    for i in range(1, N+1):\n        ans += i*(N-i+1)\n    for u, v in UV:\n        if u > v:\n            u, v = v, u\n        ans -= u*(N-v+1)\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\nans = 0\nfor i in range(1, n + 1):\n    ans += i * (i + 1) // 2\n\nfor _ in range(n - 1):\n    u, v = list(map(int, input().split()))\n    if v < u:\n        u, v = v, u\n    ans -= u * (n - v + 1)\n\nprint(ans)\n", "N=int(input())\nans=N*(N+1)*(N+2)//6\nfor _ in range(N-1):\n    u,v=map(int,input().split())\n    if v < u:\n        u,v=v,u\n    # u <= v\n    ans -= u*(N-v+1)\nprint(ans)", "n=int(input())\na=0\nfor i in range(n):\n  a+=(i+1)*(n-i)\nfor _ in range(n-1):\n  u,v=map(int,input().split())\n  if u>v: u,v=v,u\n  a-=u*(n-v+1)\nprint(a)", "# self.author = Fuad Ashraful Mehmet ,CSE-UAP\n\nfrom sys import stdin\ninput=stdin.readline\n\n\ndef fun():\n    n=int(input())\n    ans=n*(n**2+3*n+2)//6\n\n    for _ in range(n-1):\n        a,b=map(int,input().split())\n\n        if a>b:\n            a,b=b,a\n        ans-=a*(n-b+1)\n    print(ans)\n\nfun()", "def main():\n    n = int(input())\n    ans = n * (n + 1) * (n + 2) // 6\n    \n    for i in range(n-1):\n        x, y = list(map(int, input().split()))\n        if x > y:\n            y, x = x, y\n        ans -= x * (n - y + 1)\n    print(ans)\n    \nmain()\n", "n=int(input())\n\nans=0\nfor i in range(1,n+1):\n    ans+=i*(n-i+1)\n\nfor _ in range(n-1):\n    a,b=map(int,input().split())\n    if a>b:\n        a,b=b,a\n    ans-=a*(n-b+1)\n\nprint(ans)", "import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n = ni()\n    a = n * (n + 1) * (n + 2) // 6\n    for _ in range(n-1):\n        u, v = nm()\n        if u > v:\n            u, v = v, u\n        a -= u * (n - v + 1)\n    print(a)\n    return\n\nsolve()\n", "def solve(n, u, v):\n    res = (n*(n+1)*(2*n+1)//6 + n*(n+1)//2) // 2\n    for l, r in zip(u, v):\n        if l > r:\n            l, r = r, l\n        res -= l * (n - r + 1)\n    return res\n\nn = int(input())\nu = [0] * n\nv = [0] * n\nfor i in range(n-1):\n    u[i], v[i] = map(int, input().split())\nprint(solve(n, u, v))", "n = int(input())\nV = E = 0\nfor d in range(1,n+1): V += d * (d + 1) // 2\nfor _ in range(n-1):\n    a, b = list(map(int, input().split()))\n    if a > b: a, b = b, a\n    E += a * (n - b + 1)\nprint((V - E))\n", "n = int(input())\ntree = [[] for _ in range(n)]\nfor i in range(n-1):\n  v, w = map(int, input().split())\n  if v > w:\n    v, w = w, v\n  tree[w-1].append(v-1)\n  \nans = 0\ncount = 0\nfor i in range(n):\n  count += i+1\n  for v in tree[i]:\n    count -= v+1 \n  ans += count\n  \nprint(ans)", "N=int(input())\nans=0\nfor _ in range(N-1):\n    u,v=map(int,input().split())\n    u,v=min(u-1,v-1),max(u-1,v-1)\n    ans-=(u+1)*(N-v)\nfor i in range(1,N+1):\n    ans+=i*(i+1)//2\nprint(ans)", "N,*t=map(int,open(0).read().split())\nt=iter(t)\nprint(N*(N+1)*(N+2)//6+sum([-min(a,b)*(N-max(a,b)+1) for a,b in zip(t,t)]))", "n=int(input())\nV=0\nE=0\nfor i in range(n-1):\n    u,v=map(int,input().split())\n    if u > v:\n        u, v = v, u\n    E+=u*(n-v+1)\n\nfor i in range(n-1):\n    V+=(i+1)*(n-i)\nprint(V-E+n)", "import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n = ni()\n    a = n\n    for i in range(n-1):\n        a += (i+1) * (n-i)\n        u, v = nm()\n        if u > v:\n            u, v = v, u\n        a -= u * (n - v + 1)\n    print(a)\n    return\n\nsolve()\n", "n = int(input())\nV = E = 0\nfor i in range(1, n+1): V += i * (n - i + 1)\nfor _ in range(n-1):\n    a, b = list(map(int, input().split()))\n    if a > b: a, b = b, a\n    E += a * (n - b + 1)\nprint((V - E))\n", "N = int(input())\nsum_E = 0\nfor _ in range(N-1):\n    u, v = sorted(map(int, input().split()))\n    sum_E += u * (N-v+1)\n\nsum_V = N*(N+1)*(N+2) // 6\nprint((sum_V - sum_E))\n", "N, *UV = map(int, open(0).read().split())\n\nans = N * (N + 1) * (N + 2) // 6\nfor u, v in zip(*[iter(UV)] * 2):\n    if v < u:\n        u, v = v, u\n    ans -= u * (N - v + 1)\n\nprint(ans)", "3\nimport sys\ninput = lambda: sys.stdin.readline().strip()\nn = int(input())\nans = sum(i * (n - i + 1) for i in range(1, n + 1))\nfor _ in range(n - 1):\n    u, v = [int(x) for x in input().split()]\n    ans -= min(u, v) * (n - max(u, v) + 1)\nprint(ans)\n", "N = int(input())\n\nans = 0\nfor v in range(1, N + 1):\n    ans += v * (N - v + 1)\n\nfor _ in range(N - 1):\n    u, v = map(int, input().split())\n    u, v = min(u, v), max(u, v)\n    ans -= u * (N - v + 1)\n\nprint(ans)", "def main():\n    N = int(input())\n    uv = [list(map(int, input().split())) for _ in range(N -1)]\n\n    ans = 0\n    # \u9802\u70b9\u306e\u8db3\u3057\u5408\u308f\u305b\n    for i in range(N):\n        ans += (i + 1) * (N - i)\n\n    # \u8fba\u306e\u6570\u3092\u5f15\u304f\n    for u, v in uv:\n        ans -= min(u, v) * (N - max(u, v) + 1)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\nans = (n+2)*(n+1)*n//6\n\nfor i in range(n-1):\n  v, w = map(int, input().split())\n  if v > w:\n    v, w = w, v\n  ans -= v*(n-w+1)\nprint(ans)", "N = int(input())\n\nans = 0\nfor i in range(1, N + 1):\n    ans += i * (N + 1 - i)\n\nfor i in range(N - 1):\n    u, v = list(map(int, input().split()))\n    u, v = min(u, v), max(u, v)\n    ans -= (N - v + 1) * u\n\nprint(ans)\n", "I,J,R=input,int,range;n=J(I());A=sum(i*(n-i+1)for i in R(1,n+1))\nfor i in R(n-1):u,v=map(J,I().split());A-=min(u,v)*(n-max(u,v)+1)\nprint(A)", "from math import ceil\nN = int(input())\n\nnodes, edges = 0, 0\nnodes = sum([i * (N - i + 1) for i in range(1, N + 1)])\n\nfor i in range(N - 1):\n    u, v = list(map(int, input().split()))\n    u, v = min(u, v), max(u, v)\n    edges += u * (N - v + 1)\n\nprint((nodes - edges))\n", "import sys\ninput = sys.stdin.readline\n\nN = int(input())\nedges = []\nfor _ in range(N-1):\n    u, v = list(map(int, input().split()))\n    u, v = u-1, v-1\n    if u > v:\n        u, v = v, u\n    edges.append((u, v))\n\nnumV = 0\nfor i in range(N):\n    numV += (i+1) * (N-i)\n\nnumE = 0\nfor u, v in edges:\n    numE += (u+1) * (N-v)\n\nans = numV - numE\nprint(ans)\n", "import sys, math, operator, itertools, collections, heapq, bisect\n# sys.setrecursionlimit(10**4)\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solve(self, *Input):\n        n,edges = Input\n        ans = (n * (n+2) * (n+1) // 3) >> 1\n        for edge in edges:\n            a,b = sorted(edge)\n            ans -= a * (n + 1- b)\n        return ans\n\n    def create(self, *Input):\n        return []\n\n    def check(self, *Input):\n        return True\n\n    def sieve_classic(self,a,b):\n        self.primes = [True] * (b+1)\n        self.primes[0] = self.primes[1] = False\n        for i in range(2,b+1):\n            if self.primes[i] and i*i <= b:\n                for j in range(i*i,b+1,i):\n                    self.primes[j] = False\n        self.primes = [x for x,y in enumerate(self.primes) if y]\n        ind = bisect.bisect_left(self.primes,a)\n        self.primes[:ind] = []\n        return None\n\n\ndef __starting_point():\n    solution = Solution()\n\n    inputs = iter(sys.stdin.readlines())\n    n = int(next(inputs))\n    edges = [list(map(int,next(inputs).split())) for _ in range(n-1)]\n    ans = solution.solve(n,edges)\n    print(ans)\n\n__starting_point()", "n=int(input())\nvertex=[(1+n-i)*(n-i)//2 for i in range(n)]\nside=[0]*(n-1)\nfor i in range(n-1):\n    l,r=list(map(int,input().split()))\n    if l>r:\n        l,r=r,l\n    side[i]=l*(n-r+1)\nprint(sum(vertex)-sum(side))", "N=int(input())\nS=list(range(1, N+1))#\u9802\u70b9\u306e\u6570\nH = [sorted(list(map(int,input().split()))) for i in range(N-1)]#\u8fba\u306e\u30ea\u30b9\u30c8\u3002\u9802\u70b9\u306f\u53f3\u306b\u3044\u304f\u307b\u3069\u5927\u304d\u3044\nF = 0\ntyouten = int(N*(N+1)*(N+2)/6)\nfor i in range(len(H)):\n    F += H[i][0]*(N-H[i][1]+1)#uV\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u308b\u8fba\u306e\u6570\u3092F\u306b\u8ffd\u52a0\nprint(tyouten-F)#\u9802\u70b9\u6570\u304b\u3089Hselect\u306e\u8981\u7d20\u6570\u3092\u5f15\u3044\u305f\u6570\uff1d\u9023\u7d50\u6210\u5206\u6570", "def main():\n    N = int(input())\n    h = 0\n    for _ in range(N - 1):\n        u, v = list(map(int, input().split()))\n        if u > v:\n            u, v = v, u\n        h += u * (N + 1 - v)\n\n    return N * (N + 1) * (N + 2) // 6 - h\n\nprint((main()))\n", "#!python3\n\nLI = lambda: list(map(int, input().split()))\n\n# input\nN = int(input())\nUV = [LI() for _ in range(N - 1)]\n\n\ndef main():\n    ans = N * (N + 1) * (N + 2) // 6\n    for u, v in UV:\n        if u > v:\n            u, v = v, u\n        ans -= u * (N - v + 1)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nans = n * (n + 1) * (n + 2) // 6\nfor i in range(n - 1):\n    l, r = [int(i) for i in input().split()]\n    if l > r:\n        l, r = r, l\n    ans -= l * (n - r + 1)\nprint(ans)\n", "import sys\n\n\ndef read():\n    return sys.stdin.readline()\n\n\ndef main():\n    n = int(read())\n    d = [0] * n\n    present = [[] for i in range(n)]\n    for i in range(n - 1):\n        u, v = sorted([int(x) - 1 for x in read().split()])\n        d[v] += 1\n        present[u].append(v)\n    ans, cur = 0, 0\n    for v in range(n):\n        cur += (n - v) * d[v]\n    for L in range(n):\n        ans += (L + 1) * (L + 2) // 2 - cur\n        for v in present[L]:\n            cur -= (n - v)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\nans=0\nfor i in range(n):\n    ans+= (i+1)*(n-i)\nfor j in range(n-1):\n    u,v= list(map(int,input().split(' ')))\n    if u<=v:\n        ans-= u*(n-v+1)\n    else:\n        ans-= v*(n-u+1)\nprint(ans)\n", "n = int(input())\nV = n*(n+1)*(n+2)//6; E = 0\nfor _ in range(n-1):\n    a, b = list(map(int, input().split()))\n    if a > b: a, b = b, a\n    E += a * (n - b + 1)\nprint((V - E))\n", "n = int(input())\n\nV = 0\nfor i in range(1,n+1):\n    V += i*(n-(i-1))\n\nE = 0\nfor _ in range(n-1):\n  u,v = map(int,input().split())\n  if u > v:\n    u,v = v,u\n  E += u*(n-(v-1))\n\nprint(V-E)", "# coding: utf-8\nimport sys\n# from operator import itemgetter\nsysread = sys.stdin.readline\nread = sys.stdin.read\nsys.setrecursionlimit(10 ** 7)\nfrom heapq import heappop, heappush\n#from collections import OrderedDict, defaultdict\n#import math\n#from itertools import product, accumulate, combinations, product\n#import bisect# lower_bound etc\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#import numba\n\ndef sum_between(a, b):\n    if a > b:a, b = b, a\n    return (b-a+1) * (b+a) // 2\n\ndef run():\n    N = int(input())\n    n_dots = 0\n    for i in range(1, N+1):\n        n_dots += (1+i) * i // 2\n    #print(n_dots)\n    ans = (N-1) * (N+1) * N // 2\n    #print(ans)\n    for i in range(N-1):\n        u, v = map(int, input().split())\n        l, r = min(u, v), max(u, v)\n        tmp = 0\n        if l > 1: tmp += sum_between(r-1, r-l+1)\n        tmp += r-l\n        tmp += sum_between(N-l, 1)\n        #print(tmp)\n        ans -= tmp\n\n    print(n_dots - ans)\n\n\n    ans = (N-1) * N * N\n\n\ndef __starting_point():\n    run()\n__starting_point()", "n=int(input())\nans=0\nfor i in range(1,n+1): #\u9802\u70b9\u6570\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\n ans+=i*(n-i+1)\nfor _ in range(n-1): #\u5404\u8fba\u306b\u3064\u3044\u3066u*(n-v+1)\u3092\u9802\u70b9\u6570\u306e\u7dcf\u548c\u304b\u3089\u5f15\u304f\n u,v=map(int,input().split())\n if u>v: #\u4e0a\u8a18\u3067\u306fu<v\u3092\u4eee\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067u>v\u306e\u3068\u304du\u3068v\u3092\u5165\u308c\u66ff\u3048\u308b\n   u,v=v,u\n ans-=u*(n-v+1)\nprint(ans)", "from collections import deque\nimport math\n\ndef Next(): return input()\ndef NextInt(): return int(Next())\ndef NextInts(): return map(int,input().split())\ndef Nexts(): return map(str,input().split())\ndef NextIntList(): return list(map(int,input().split()))\ndef RowInts(n): return [input() for i in range(n)]\n\nn = NextInt()\nans = 0\nfor i in range(n):\n    ans += (n-i)*(i+1)\nfor i in range(n-1):\n    u,v = NextInts()\n    if u > v:\n        u,v = v,u\n    ans -= u*(n-v+1)\nprint(ans)", "import sys\nN = int(sys.stdin.readline().rstrip())\n\nV = 0\nfor i in range(N):\n    V += (N - i) * (i + 1)\n\nE = 0\nfor _ in range(N - 1):\n    u, v = list(map(int, sys.stdin.readline().rstrip().split()))\n    if u > v:\n        u, v = v, u\n    E += u * (N - v + 1)\n\n# print(V,E)\nprint((V - E))\n", "N = int(input())\ncount = [1 for _ in range(N+2)]\ncount[-1] = 0\ncount[0] = 0\nnextpoint = [[] for _ in range(N+1)]\nfor _ in range(N-1):\n  u, v = list(map(int, input().split()))\n  if u > v:\n    nextpoint[v].append(u)\n  else:\n    nextpoint[u].append(v)\n\n\n\n#print(nextpoint)\nfor k in range(1, N):\n  for item in nextpoint[k]:\n    count[item] -= 1\n\n#print(count)\nans = 0\nfor k in range(1, N):\n  count[k+1] += count[k]\n#print(count)\nans = sum(count) #L=1\n#print(ans)\nbefore = ans\nfor k in range(1, N):#L=2~N\n  before -= N-k+1\n  for item in nextpoint[k]:\n    before += N+1-item\n  ans += before\nprint(ans)\n\n", "N,*l=map(int,open(0).read().split());print(N*(N+1)*(N+2)//6-sum((N-max(l[i],l[i+1])+1)*min(l[i],l[i+1]) for i in range(0,2*N-2,2)))", "#!/usr/bin/env python3\nfrom collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\n\n\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\n\n\ndef solve():\n    N = int(input())\n    edges = []\n    for _ in range(N - 1):\n        U, V = list(map(int, input().split()))\n        edges.append((U, V))\n\n    ans = 0\n    for i in range(1, N + 1):\n        ans += i * (N - i + 1)\n\n    for u, v in edges:\n        if u > v:\n            u, v = v, u\n        ans -= u * (N - v + 1)\n    print(ans)\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\nans=sum((n-l+1)*(n-l+2)//2 for l in range(1,n+1))\nfor i in range(n-1):\n    a,s=map(int,input().split())\n    if a>s:a,s=s,a\n    ans-=a*(n+1-s)\nprint(ans)", "#!/usr/bin/env python3\nn = int(input())\nes = [[0, 0]] * (n - 1)\nfor i in range(n - 1):\n    u, v = [int(x) - 1 for x in input().split()]\n    u, v = min(u, v), max(u, v)\n    es[i] = [u, v]\n\nsv = 0\nfor i in range(n):\n    sv += (i + 1) * (n - i)\nse = 0\nfor u, v in es:\n    se += (u + 1) * (n - v)\nprint((sv - se))\n", "import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n = ni()\n    ans = 0\n    for i in range(1, n+1):\n        ans += i * (n - i + 1)\n    for _ in range(n-1):\n        u, v = nm()\n        if u > v:\n            u, v = v, u\n        ans -= u * (n - v + 1)\n    print(ans)\n    return\n\nsolve()\n", "N = int(input())\nV = 0\nE = 0\nfor i in range(N+1):\n    V += i * (N-i+1)\nfor i in range(N-1):\n    a, b = list(map(int, input().split()))\n    if a > b:\n        a, b = b, a\n    E += a * (N-b+1)\nans = V - E\nprint(ans)\n", "n = int(input())\nuv = [sorted(map(int, input().split())) for _ in range(n - 1)]\n\n# \u89e3\u8aacAC\nans = sum(i * (n + 1 - i) for i in range(n + 1))\nfor u, v in uv:\n    ans -= u * (n - v + 1)\nprint(ans)\n", "N, *UV = [int(_) for _ in open(0).read().split()]\nans = N * (N + 1) * (N + 2) // 6\nfor u, v in zip(UV[::2], UV[1::2]):\n    if v > u:\n        u, v = v, u\n    ans -= v * (N + 1 - u)\nprint(ans)\n", "n=int(input())+1\na=(n**3-n)//6\nfor _ in range(n-2):\n  u,v=map(int,input().split())\n  a-=min(u,v)*(n-max(u,v))\nprint(a)", "n = int(input())\nside = 0\nfor _ in range(n-1):\n    u,v = map(int, input().split())\n    if v > u:\n        side += u*(n-v+1)\n    else:\n        side += v*(n-u+1)\n\nans = 0\nvertex = 0\nfor i in range(n):\n    vertex += (i+1)*(n-i)\n\nans= vertex -side\nprint(ans)", "n = int(input())\nans = 0\n\nfor i in range(1, n+1):\n    ans += i * (n-i+1)\nfor _ in range(n-1):\n    u, v = map(int, input().split())\n    if u > v:\n        u, v = v, u\n    ans -= u*(n-v+1)\nprint(ans)", "n=int(input())\na=sum(-~i*(n-i) for i in range(n))\nfor _ in range(n-1):\n  u,v=map(int,input().split())\n  if u>v: u,v=v,u\n  a-=u*(n-v+1)\nprint(a)", "# coding: utf-8\nimport sys\n# from operator import itemgetter\nsysread = sys.stdin.readline\nread = sys.stdin.read\nsys.setrecursionlimit(10 ** 7)\nfrom heapq import heappop, heappush\n#from collections import OrderedDict, defaultdict\n#import math\n#from itertools import product, accumulate, combinations, product\n#import bisect# lower_bound etc\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#import numba\n\ndef sum_between(a, b):\n    if a > b:a, b = b, a\n    return (b-a+1) * (b+a) // 2\n\ndef run():\n    N = int(input())\n    n_dots = 0\n    for i in range(1, N+1):\n        n_dots += (1+i) * i // 2\n    #print(n_dots)\n    ans = (N-1) * (N+1) * N // 2\n    #print(ans)\n    lr = list(map(int, read().split()))\n    l = lr[::2]\n    r = lr[1::2]\n    for l,r in zip(l, r):\n        if l > r: l,r = r,l\n        tmp = 0\n        if l > 1: tmp += sum_between(r-1, r-l+1)\n        tmp += r-l\n        tmp += sum_between(N-l, 1)\n        #print(tmp)\n        ans -= tmp\n\n    print(n_dots - ans)\n\n\n    ans = (N-1) * N * N\n\n\ndef __starting_point():\n    run()\n__starting_point()", "# coding: utf-8\nimport sys\n# from operator import itemgetter\nsysread = sys.stdin.readline\nread = sys.stdin.read\nsys.setrecursionlimit(10 ** 7)\nfrom heapq import heappop, heappush\n#from collections import OrderedDict, defaultdict\n#import math\n#from itertools import product, accumulate, combinations, product\n#import bisect# lower_bound etc\n#import numpy as np\n#from copy import deepcopy\n#from collections import deque\n#import numba\n\ndef sum_between(a, b):\n    return (abs(b-a)+1) * (b+a) // 2\n\ndef run():\n    N = int(input())\n    n_dots = 0\n    for i in range(1, N+1):\n        n_dots += (1+i) * i // 2\n    #print(n_dots)\n    ans = (N-1) * (N+1) * N // 2\n    #print(ans)\n    lr = list(map(int, read().split()))\n    l = lr[::2]\n    r = lr[1::2]\n    for l,r in zip(l, r):\n        if l > r: l,r = r,l\n        tmp = 0\n        if l > 1: tmp += sum_between(r-1, r-l+1)\n        tmp += r-l\n        tmp += sum_between(N-l, 1)\n        #print(tmp)\n        ans -= tmp\n\n    print(n_dots - ans)\n\n\n    ans = (N-1) * N * N\n\n\ndef __starting_point():\n    run()\n__starting_point()", "n = int(input())\nE = 0\nV = 0\nfor i in range(n-1):\n    u, v = list(map(int, input().split()))\n    u -= 1\n    v -= 1\n    if u > v:\n        u, v = v, u\n    E += (u+1)*(n-v)\n\nfor i in range(n):\n    V += n+i*n-i-(i*i)\n\nprint((V-E))\n", "n = int(input())\nans = 0\nfor i in range(1, n+1):\n    ans += i*(n-i+1)\n\nfor _ in range(n-1):\n    u, v = [int(x)-1 for x in input().split()]\n    if u > v: u, v = v, u\n    ans -= (u+1) * (n-v)\n\nprint(ans)\n", "n = int(input())\nUV = [list(map(int, input().split())) for _ in range(n - 1)]\n\nans = 0\nfor i in range(1, n + 1):\n  ans += i * (i + 1) // 2\n\nfor uv in UV:\n  u, v = sorted(uv)\n  ans -= u * (n - v + 1)\n\nprint(ans)\n", "import sys\n\ninput = sys.stdin.readline\n\nn = int(input())\nnum_edge = 0\nnum_vertex = 0\nfor i in range(1, n): \n    u_v = list(map(int, input().split()))\n    u = u_v[0]\n    v = u_v[1]\n    if v < u:\n        tmp = v\n        v = u\n        u = tmp\n    num_edge += u * (n - v + 1)\n    num_vertex += i * (n - i + 1)\nnum_vertex += n\n\nprint((num_vertex - num_edge))\n\n", "n,*l=map(int,open(0).read().split());n+=1;i=iter(l);print((n**3-n)//6-sum(min(u,v)*(n-max(u,v))for u,v in zip(i,i)))", "n=int(input())\nans=0\nfor i in range(n):\n    ans+=(i+1)*(n-i)\nfor _ in range(n-1):\n    a=list(map(int,input().split()))\n    u=max(a)-1\n    v=min(a)-1\n    ans-=(v+1)*(n-u)\nprint(ans)", "def main():\n    N = int(input())\n    r = 0\n    for i in range(1, N+1):\n        r += i * (N + 1 - i)\n    for i in range(N-1):    \n        u, v = list(map(int, input().split()))\n        u, v = min(u, v), max(u, v)\n        r -= u * (N + 1 - v)\n    return r\nprint((main()))\n", "n = int(input())\nV = n*(n+1)*(n+2)//6; E = 0\nfor _ in range(n-1):\n    u, v = list(map(int, input().split()))\n    if u > v: u, v = v, u\n    E += u * (n - v + 1)\nprint((V - E))\n", "def main():\n    import sys\n    def input(): return sys.stdin.readline().rstrip()\n    \n    n = int(input())\n    edges = 0\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        edges += min(u, v)*(n-max(u, v)+1)\n    ans = n*(n+1)*(n+2)//6 - edges\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\nN = int(input())\nnum = 0\nfor i in range(1, N+1):\n  num += i * (N+1-i)\nfor _ in range(N-1):\n  u, v = sorted(map(int, input().split()))\n  num -= (N+1-v) * u\nprint(num)"]