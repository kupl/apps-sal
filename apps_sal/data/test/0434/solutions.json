["import sys\nimport math\n\nn = int(sys.stdin.readline())\nif n <= 2:\n  print(1)\n  return\n\na = [int(s) for s in sys.stdin.readline().split()]\n\nst = -1 # index of first positive number in current subset of a\ned = -1 # index last positive number in current subset of a \n        # differation is (a[ed] - a[st])/(ed - st)\nleading_zeros = 0 # -1 before a[st]\nseg_count = 1\n\nfor (i, v) in enumerate(a):\n  if v == -1:\n    if st == -1:\n      leading_zeros += 1\n    else:\n      if ed != -1:\n        # check if v should be a non-positive number\n        if a[ed] + (i-ed) * (a[ed] - a[st])/(ed-st) <= 0:\n          st = -1\n          ed = -1\n          leading_zeros = 1\n          seg_count += 1\n        else:\n          pass\n      else:\n        pass\n  else:\n    if st == -1:\n      st = i # find first positive number\n    else:\n      if ed == -1:\n        ed = i\n        #print(i)\n        if (v - a[st]) % (i-st) != 0 or a[st] - (v-a[st])/(i-st) * leading_zeros <= 0:\n          # a[st..i] can't be an arithmetic progression\n          st = i\n          ed = -1\n          seg_count += 1\n          leading_zeros = 0\n        else:\n          ed = i\n      else:\n        if (v-a[ed])%(i-ed) != 0 or (v-a[ed]) * (ed - st) != (a[ed] - a[st]) * (i-ed):\n          st = i\n          ed = -1\n          seg_count += 1\n          leading_zeros = 0\n        else:\n          ed = i #leave ed the first positive number after a[st] is also ok\n  #print( \"[\" +str(st) + \" \" + str(ed) + \"] \" + str(seg_count) + \" \" + str(leading_zeros) )\n\nprint(seg_count)", "n = int(input())\na = list(map(int, input().split()))\ni = 0\nans = 0\nwhile i < n:\n    ans += 1\n    i1 = i\n    while i1 < n and a[i1] == -1:\n        i1 += 1\n    if i1 == n:\n        break\n    i2 = i1 + 1\n    while i2 < n and a[i2] == -1:\n        i2 += 1\n    if i2 == n:\n        break\n    dist = i2 - i1\n    step = (a[i2] - a[i1]) // dist\n    if (a[i2] - a[i1]) % dist != 0 or (step > 0 and a[i1] - (i1 - i) * step <= 0):\n        i = i2\n        continue\n    i3 = i2 + 1\n    while i3 < n:\n        nxt = a[i2] + step * (i3 - i2)\n        if nxt <= 0 or (a[i3] != -1 and a[i3] != nxt):\n            break\n        i3 += 1\n        \n    i = i3\nprint(ans)\n\n    \n", "n = int(input())\na = list(map(int, input().split()))\ni = 0\nans = 0\nwhile i < n:\n    ans += 1\n    i1 = i\n    while i1 < n and a[i1] == -1:\n        i1 += 1\n    if i1 == n:\n        break\n    i2 = i1 + 1\n    while i2 < n and a[i2] == -1:\n        i2 += 1\n    if i2 == n:\n        break\n    dist = i2 - i1\n    step = (a[i2] - a[i1]) // dist\n    if (a[i2] - a[i1]) % dist != 0 or (step > 0 and a[i1] - (i1 - i) * step <= 0):\n        i = i2\n        continue\n    i3 = i2 + 1\n    while i3 < n:\n        nxt = a[i2] + step * (i3 - i2)\n        if nxt <= 0 or (a[i3] != -1 and a[i3] != nxt):\n            break\n        i3 += 1\n        \n    i = i3\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\ni = 0\nans = 0\n\nwhile i < n:\n    ans += 1\n    i1 = i\n    while i1 < n and a[i1] == -1:\n        i1 += 1\n    if i1 == n:\n        break\n    i2 = i1 + 1\n    while i2 < n and a[i2] == -1:\n        i2 += 1\n    if i2 == n:\n        break\n    dist = i2 - i1\n    step = (a[i2] - a[i1]) // dist\n    if (a[i2] - a[i1]) % dist != 0 or (step > 0 and a[i1] - (i1 - i) * step <= 0):\n        i = i2\n        continue\n    i3 = i2 + 1\n    while i3 < n:\n        nxt = a[i2] + step * (i3 - i2)\n        if nxt <= 0 or (a[i3] != -1 and a[i3] != nxt):\n            break\n        i3 += 1\n        \n    i = i3\nprint(ans)"]