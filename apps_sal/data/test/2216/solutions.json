["\"\"\"\nCodeforces Round 252 Div 2 Problem C\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0:\n        return inputs\n    if mode == 1:\n        return inputs.split()\n    if mode == 2:\n        return [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n    if isinstance(s, list): s = \" \".join(s)\n    s = str(s)\n    print(s, end=\"\")\n\n################################################### SOLUTION\nn,m,k = read()\n\ncells = []\nfor i in range(n):\n    if not i%2:\n        for j in range(m): cells.append((i+1,j+1))\n    else:\n        for j in range(m-1, -1, -1): cells.append((i+1,j+1))\n\nct = 0\nfor i in range(k-1):\n    print(2, cells[ct][0], cells[ct][1], cells[ct+1][0], cells[ct+1][1])\n    ct += 2\n\nprint(len(cells) - ct, end=\" \")\nfor i in cells[ct:]:\n    print(i[0], i[1], end=\" \")", "n, m, k = [int(i) for i in input().split()]\ncur = 0\ncolored = 0\na = [[0] * m for i in range(n)]\nres = [[] for i in range(k)]\nfor i in range(0, n - 1, 2):\n    for j in range(m):\n        if colored == 2:\n            cur = min(cur + 1, k - 1)\n            colored = 0\n        res[cur].append(i)\n        res[cur].append(j)\n        colored += 1\n    for j in range(m - 1, -1, -1):\n        if colored == 2:\n            colored = 0\n            cur = min(cur + 1, k - 1)\n        res[cur].append(i + 1)\n        res[cur].append(j)\n        colored += 1\nif n % 2 == 1:\n    for j in range(m):\n        if colored == 2:\n            colored = 0\n            cur = min(cur + 1, k - 1)\n        res[cur].append(n - 1)\n        res[cur].append(j)\n        colored += 1\n\nfor i in res:\n    print(len(i) // 2, end=\" \")\n    print(\" \".join([str(j + 1) for j in i]))", "n,m,k = [int(i) for i in input().split()]\nimport sys\nseq = []\nrev = False\nfor i in range(n):\n    l = list(zip([i+1]*m,range(1,m+1)))\n    if rev:\n        l.reverse()\n    seq += l\n    rev = not rev\n\nfor i in range(k-1):\n    sys.stdout.write('2 ' + str(seq[i*2][0]) + ' ' + str(seq[i*2][1]) + ' ' + str(seq[i*2+1][0]) + ' ' + str(seq[i*2+1][1]) + '\\n')\n\nprint(len(seq) - k*2 + 2,end=' ')\nfor a,b in seq[k*2-2:]:\n    sys.stdout.write(str(a) + ' ' + str(b) + ' ')\n", "n, m, k = [int(c) for c in input().split()]\n\nx, y = [1, 1]\n\ndef next_cell(x, y):\n    if x % 2 == 1 and y < m:\n        return [x, y + 1]\n    elif x % 2 == 0 and y > 1:\n        return [x, y - 1]\n    else:\n        return [x + 1, y]\n\nfor i in range(1, k):\n    x2, y2 = next_cell(x, y)\n    print(2, x, y, x2, y2)\n    x, y = next_cell(x2, y2)\n\nlast = [x, y]\n\nreq_len = n*m - (k-1)*2\n\nwhile len(last) < req_len * 2:\n    x, y = next_cell(x, y)\n    last.append(x)\n    last.append(y)\n\nprint(len(last) // 2, ' '.join(map(str,last)))", "n,m,k=map(int,input().split())\nx=1\ny=1\na=[[1,1]]\ninv=1\nz=n*m\nwhile z>1:\n    z-=1\n    if y<m and inv==1:\n        y+=1\n    elif y>1 and inv==-1:\n        y-=1\n    else:\n        x+=1\n        inv=-inv\n    a.append([x,y])\nwhile k>1:\n    print(2,*a.pop(),end=' ')\n    print(*a.pop())\n    k-=1\nprint(len(a),end=' ')\nfor i in a:\n    print(*i,end=' ')\nprint()", "n,m,k = list(map(int,input().split()))\nunit_tube = (n * m) // k\nlong_tube = (n * m) % k + unit_tube\n\nprint(long_tube,end='')\ni = 0\nj = 0\nref = 0\nfor _ in range(long_tube):\n    print(' {0} {1}'.format(i + 1,abs(j + 1 - ref)),end='')\n    if((j + 1) % (m) == 0):\n        i+=1\n        ref = 0 if(ref) else m + 1\n    j = (j + 1) % m\nprint()\nfor _ in range(k - 1):\n    print(unit_tube,end='')\n    for _ in range(unit_tube):\n        print(' {0} {1}'.format(i + 1,abs(j + 1 - ref)),end='')\n        if((j + 1) % (m) == 0):\n            i+=1\n            ref = 0 if(ref) else m + 1\n        #j = abs((j + 1) % (m) - ref)\n        j = (j + 1) % m\n    print()\n        ", "n, m, k = map(int,input().split())\nx = 1\ny = 1\nadd = 1\nfor pNum in range(k-1):\n    print(2, end = ' ')\n    print(x, y, end = ' ')\n    y += add\n    if y == m+1:\n        y = m\n        add = -1\n        x = x + 1\n    if y == 0:\n        y = 1\n        add = 1\n        x = x + 1\n    print(x, y, end = ' ')\n    y += add\n    if y == m+1:\n        y = m\n        add = -1\n        x = x + 1\n    if y == 0:\n        y = 1\n        add = 1\n        x = x + 1\n    print()\nprint(n * m - 2 * (k-1), end = ' ')\nwhile x < n+1:\n    print(x, y, end = ' ')\n    y += add\n    if y == m+1:\n        y = m\n        add = -1\n        x = x + 1\n    if y == 0:\n        y = 1\n        add = 1\n        x = x + 1\nprint()", "n, m, k = list(map(int, input().split(\" \")))\n\ns = False\n\ndef nex(x, y, s):\n\tif (y == 1 or y == m) and s:\n\t\treturn x + 1, y, False\n\tif x % 2:\n\t\treturn x, y + 1, True\n\treturn x, y - 1, True\n\nxc = 1\nyc = 1\nfor i in range(k - 1):\n\tprint(2, end = \" \")\n\tprint(xc, yc, end = \" \")\n\txc, yc, s = nex(xc, yc, s)\n\tprint(xc, yc)\n\txc, yc, s = nex(xc, yc, s)\n\nprint(n * m - (k - 1) * 2, end = \" \")\nfor i in range(n * m - (k - 1) * 2):\n\tprint(xc, yc, end=\" \")\n\txc, yc, s = nex(xc, yc, s)\n\n", "n, m, k = map(int, input().split())\nd, s, p = 0, [], [list(map(str, range(1, m + 1)))]\np.append(list(reversed(p[0])))\nfor i in map(str, range(1, n + 1)):\n    s += [i + ' ' + j for j in p[d]]\n    d = 1 - d\nd = 2 * k - 2\nfor i in range(0, d, 2): print(2, s[i] + ' ' + s[i + 1])\nprint(n * m - d, ' '.join(s[d: ]))", "n, m, k = map(int, input().split())\ndef z():\n  for i in range(n):\n    for j in range(m):\n      if i % 2 == 0:\n        yield i + 1, j + 1\n      else:\n        yield i + 1, m - j\ndef p(a):\n  print(len(a), ' '.join(\"{} {}\".format(x, y) for x, y in a))\na = list(z())\nl = n * m // k\nfor i in range(k - 1):\n  p(a[i * l : (i + 1) * l])\np(a[l * (k - 1):])", "# -*- coding: utf-8 -*-\nimport sys\nf = sys.stdin\n#f = open('H:\\\\Portable Python 3.2.5.1\\\\test_248B1.txt') \nn, m, k  = map(int, f.readline().strip().split())\n\n\n\nki = 1    \nps = []\nl = 0\np = []\nfor i in range(1,n+1): \n    if i % 2 == 0:\n        r = range(m,0,-1)\n    else :\n        r = range(1,m+1)\n    for j in r:\n        p.append(str(i))\n        p.append(str(j))\n        l += 1\n        if ki<k and l==2:\n            ps.append( '2 '+' '.join(p)  )\n            l = 0\n            p = []\n            ki += 1\nps.append( str(l) + ' ' + ' '.join(p) )\n\nprint('\\n'.join(ps))", "n, m, k = map(int, input().split())\n\ndef printTube(tube):\n\tprint(len(tube), end=' ')\n\tfor cell in tube:\n\t\tprint(cell[0] + 1, cell[1] + 1, end=' ')\n\tprint()\n\nnbTubes = 0\ncurrTube = []\nfor i in range(n):\n\tif i % 2 == 0:\n\t\tjDomain = range(m)\n\telse:\n\t\tjDomain = reversed(range(m))\n\n\tfor j in jDomain:\n\t\tcurrTube.append((i, j))\n\t\tif len(currTube) >= 2 and nbTubes < k-1:\n\t\t\tprintTube(currTube)\n\t\t\tcurrTube = []\n\t\t\tnbTubes += 1\nprintTube(currTube)", "n, m, k = [int(x) for x in input().split()]\n\ndef walk(n, m):\n\tfor i in range(n):\n\t\tif i%2==0:\n\t\t\tfor j in range(m):\n\t\t\t\tyield (i+1, j+1)\n\t\telse:\n\t\t\tfor j in range(m-1, -1, -1):\n\t\t\t\tyield (i+1, j+1)\n\nw = walk(n, m)\nfor s in range(k-1):\n\tprint(\"2 \", end=\"\")\n\tprint(\"{} {} \".format(*next(w)), end=\"\")\n\tprint(\"{} {}\".format(*next(w)), end=\"\")\n\tprint()\n\nr = []\nwhile True:\n\ttry:\n\t\tr.append(next(w))\n\texcept StopIteration as e:\n\t\tbreak\nprint(\"{} \".format(len(r)), end=\"\")\nfor i in r:\n\tprint(\"{} {} \".format(*i), end=\"\")\nprint()\n\n", "n, m, k = map(int, input().split())\nr = []\nfor i in range(n):\n    for j in range(m)[::-(i % 2) * 2 + 1]:\n        r += [str(i+1), str(j+1)]\n\nchunk = m*n//k\nfor i in range(k-1):\n    print(chunk, ' '.join(r[2*i*chunk:2*(i+1)*chunk]))\n\nprint(len(r)- 2*(k-1)*chunk)//2, ' '.join(r[2*(k-1)*chunk:])", "n, m, k = map(int, input().split())\n\ndef printTube(tube):\n    print(len(tube), end=' ')\n    for cell in tube:\n        print(cell[0] + 1, cell[1] + 1, end=' ')\n    print()\n\nnbTubes = 0\ncurrTube = []\nfor i in range(n):\n    if i % 2 == 0:\n        jDomain = range(m)\n    else:\n        jDomain = reversed(range(m))\n\n    for j in jDomain:\n        currTube.append((i, j))\n        if len(currTube) >= 2 and nbTubes < k-1:\n            printTube(currTube)\n            currTube = []\n            nbTubes += 1\nprintTube(currTube)", "n, m, k = [int(k) for k in input().split()]\ntotal = n * m\nlength = [int(total/k)]*(k-1)\nlength.append(total - (int(total/k))*(k-1))\n#print(length)\ntable =[[0]*(n+1) for _ in range(m+1)]\ni = 1\n\n\npath = []\nfor r in range(1, m+1):\n    if r % 2 == 0: #odd rows, go forward\n        for c in range(n, 0,-1):\n            path.append(c)\n            path.append(r)\n    else: #even rows, go backwards\n        for c in range(1, n+1):\n            path.append(c)\n            path.append(r)\n\n#print(path)\ni = 0    \nfor l in length:\n    print(l, end = \" \")\n    s = \"\"\n    for x in path[i:i+2*l]:\n        s += str(x) + \" \"\n    print(s)\n    #print(path[i:i+2*l], end = \" \")\n    i = i+2*l\n   ", "# 441C\n\n__author__ = 'artyom'\n\nn, m, k = map(int, input().split())\ni, j, d, t = 1, 1, 1, 1\nans = ''\n\n\ndef get_next(x, y, dir):\n  y += dir\n  if y > m:\n    y = m\n    x += 1\n    dir = -1\n  if y == 0:\n    y = 1\n    x += 1\n    dir = 1\n  return x, y, dir\n\n\nwhile t < k:\n  ans += '2 ' + str(i) + ' ' + str(j)\n  i, j, d = get_next(i, j, d)\n  ans += ' ' + str(i) + ' ' + str(j) + '\\n'\n  i, j, d = get_next(i, j, d)\n  t += 1\nrem = n * m - (t - 1) * 2\nans += str(rem)\nwhile rem > 0:\n  ans += ' ' + str(i) + ' ' + str(j)\n  i, j, d = get_next(i, j, d)\n  rem -= 1\n\nprint(ans)", "def addX(x, y):\n    if y % 2 == 0:\n        x += 1\n        if x == m:\n            y += 1\n            x -= 1\n    else:\n        x -= 1\n        if x == -1:\n            y += 1\n            x += 1\n    return x, y\n\nn, m, k = [int(x) for x in input().split()]\nres = []\ncurx, cury, curk, curlen = 0, 0, 0, 0\nfor i in range(k-1):\n    res.append([])\n    for j in range(2):\n        res[i].append([cury+1, curx+1])\n        curx, cury = addX(curx, cury)\nres.append([])\nwhile cury < n:\n    res[k-1].append([cury+1, curx+1])\n    curx, cury = addX(curx, cury)\nprint('\\n'.join(str(len(x)) + ' ' + ' '.join(' '.join(list(map(str, y))) for y in x) for x in res))\n#print(res)\n", "x, y, k = map(int, input().split(' '))\n\ndef nxt(lst):\n    a = lst[0]\n    b = lst[1]\n    if not (1<=a<=x and 1<=b<=y):\n        return [-420420, -420]\n    if a%2 == 1 and b == y:\n        return [a+1, b]\n    if a%2 == 0 and b == 1:\n        return [a+1, b]\n    if a%2 == 0:\n        return [a, b-1]\n    else:\n        return [a, b+1]\n\na = [1, 1]\nfor i in range(k-1):\n    a1 = a[0]\n    a2 = a[1]\n    a = nxt(a)\n    a3 = a[0]\n    a4 = a[1]\n    a = nxt(a)\n    print(2, a1, a2, a3, a4)\n\nxx = []\nprint(x*y-2*(k-1), end = ' ')\nwhile (nxt(a) != [-420420, -420]):\n    print(a[0], a[1], end = ' ')\n    a = nxt(a)\n    \n", "def main():\n    n, m, k = list(map(int, input().split()))\n    pipe, res = [], []\n    for y in range(1, n + 1):\n        for x in list(range(1, m + 1)) if y & 1 else list(range(m, 0, -1)):\n            pipe.append(str(y))\n            pipe.append(str(x))\n    for i in range(0, k * 4 - 4, 4):\n        res.append(\"2 \")\n        res.append(' '.join(pipe[i:i + 4]))\n        res.append('\\n')\n    res.append(str(n * m - k * 2 + 2) + ' ')\n    res.append(' '.join(pipe[k * 4 - 4:]))\n    print(''.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\nimport collections, itertools, fractions, functools, heapq, math, queue\n\ndef solve():\n  n, m, k = map(int, input().split())\n\n  cells = []\n  for i in range(n):\n    if i%2 == 0:\n      for j in range(m):  # left to right\n        cells.append((i+1, j+1))\n    else:\n      for j in range(m, 0, -1):\n        cells.append((i+1, j))\n\n  for _ in range(k-1):\n    print(2, *cells[-1], *cells[-2])\n    cells.pop()\n    cells.pop()\n\n  print(len(cells), end=' ')\n  for c in cells:\n    print(*c, end=' ')\n  print()\n\ndef __starting_point():\n  solve()\n\n\n__starting_point()", "from collections import defaultdict,deque,Counter,OrderedDict\n\ndef main():\n    n,m,k = map(int,input().split())\n    l,ans = [],[]\n    for i in range(1,n+1):\n        if i%2 == 0:\n            for j in range(m,0,-1):\n                l.append((i,j))\n        else:\n            for j in range(1,m+1):\n                l.append((i,j))\n    curr = 0\n    while k > 1:\n        ans.append([l[curr][0], l[curr][1], l[curr + 1][0], l[curr + 1][1]])\n        curr += 2\n        k -= 1\n    ans.append([])\n    for i in range(curr,len(l)):\n        ans[-1].append(l[i][0])\n        ans[-1].append(l[i][1])\n    for i in ans:\n        print(len(i)//2,\" \".join(map(str,i)))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "'''\ndef main():\n\tfrom sys import stdin,stdout\ndef __starting_point():\n\tmain()\n'''\n#Journey to moon\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\tN,I =map(int,stdin.readline().split())\n\tvisited=list(0 for x in range(N))\n\tG=collections.defaultdict(list)\n\tgroups=[0]\n\tfor _ in range(I):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tG[a].append(b)\n\t\tG[b].append(a)\n\tq=collections.deque()\n\tflag=0\n\tfor i in range(N):\n\t\tif not visited[i]:\n\t\t\tq.append(i)\n\t\t\tvisited[i]=flag+1\n\t\t\tgroups[flag]+=1\n\t\t\twhile len(q):\n\t\t\t\ttop=q.popleft()\n\t\t\t\tfor j in G[top]:\n\t\t\t\t\tif visited[j]!=visited[top]:\n\t\t\t\t\t\tvisited[j]=flag+1\n\t\t\t\t\t\tgroups[flag]+=1\n\t\t\t\t\t\tq.append(j)\n\t\t\tflag+=1\n\t\t\tgroups.append(0)\n\tcounter=0\n\tfor i in range(len(groups)-1):\n\t\tfor j in range(i+1,len(groups)):\n\t\t\tcounter+=groups[i]*groups[j]\n\tstdout.write(str(counter))\ndef __starting_point():\n\tmain()\n'''\n#Djikstra's\n'''\nimport collections\nclass Graph:\n\tdef __init__(self):\n\t\tself.nodes=set()\n\t\tself.edges=collections.defaultdict(list)\n\t\tself.distances = {}\n\n\tdef add_node(self, value):\n\t\tself.nodes.add(value)\n\n\tdef add_edge(self, from_node, to_node, distance):\n\t\tself.edges[from_node].append(to_node)\n\t\tself.edges[to_node].append(from_node)\n\t\tself.distances[(from_node, to_node)] = distance\n\t\tself.distances[(to_node, from_node)] = distance\n\n\ndef dijsktra(graph, initial):\n\tvisited = {initial: 0}\n\tpath = {}\n\n\tnodes = set(graph.nodes)\n\n\twhile nodes:\n\t\tmin_node = None\n\t\tfor node in nodes:\n\t\t\tif node in visited:\n\t\t\t\tif min_node is None:\n\t\t\t\t\tmin_node = node\n\t\t\t\telif visited[node] < visited[min_node]:\n\t\t\t\t\tmin_node = node\n\n\t\tif min_node is None:\n\t\t\tbreak\n\n\t\tnodes.remove(min_node)\n\t\tcurrent_weight = visited[min_node]\n\n\t\tfor edge in graph.edges[min_node]:\n\t\t\tweight = current_weight + graph.distances[(min_node, edge)]\n\t\t\tif edge not in visited or weight < visited[edge]:\n\t\t\t\tvisited[edge] = weight\n\t\t\t\tpath[edge] = min_node\n\n\treturn visited, path\n\ndef main():\n\tfrom sys import stdin,stdout\n\tfor _ in range(int(stdin.readline())):\n\t\tn,m=map(int,stdin.readline().split())\n\t\tG=Graph()\n\t\tfor i in range(n):\n\t\t\tG.add_node(i+1)\n\t\tfor i in range(m):\n\t\t\ta,b,c=map(int,stdin.readline().split())\n\t\t\tG.add_edge(a,b,c)\n\t\tinitial=int(stdin.readline())\n\t\tv,p=dijsktra(G, initial)\n\t\t#print(v)\n\t\t#print(p)\n\t\tfor i in range(1,n+1):\n\t\t\tif i!=initial:\n\t\t\t\tk=v.get(i,-1)\n\t\t\t\tstdout.write(str(k)+' ')\n\t\tstdout.write('\\n')\ndef __starting_point():\n\tmain()\n'''\n#Larget pallindrome in String\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tstring=stdin.readline().strip()\n\tl=len(string)\n\t#Triangle logic\t\n\t\n\tarrlen=(l*(l-1))//2\n\tarr=list(0 for x in range(arrlen))\n\tf=0\n\tc=l-1\n\tfor i in range(l-1):\n\t\tfor j in range(i+1,l):\n\t\t\tif string[i]==string[j]:\n\t\t\t\tarr[f+j-i-1]=1\n\t\tf+=c\n\t\tc-=1\n\t#print(arr)\n\tif any(arr):\n\t\t\n\telse:\n\t\tif l & 1:\n\t\t\tstdout.write('First')\n\t\telse:\n\t\t\tstdout.write('Second')\n\t#2-d Array Logic\n\tarr=list(list(0 for i in range(l)) for j in range(l))\n\tfor i in range(l):\n\t\tfor j in range(l):\n\t\t\tif string[i]==string[j]:\n\t\t\t\tarr[i][j]=1\n\tmaxim=0\n\tfor i in range(0,l*(l-1)-2,l+1):\n\t\ta,b=i+1,i+2\n\t\t#print(a,b)\n\t\tacount=0\n\t\tx=a//5\n\t\ty=a%5\n\t\tacount=arr[x][y]\t\t\n\t\tx-=1\n\t\ty-=1\n\t\twhile x>=0 and y>=0:\n\t\t\tacount+=arr[x][y]\n\t\t\tx-=1\n\t\t\ty-=1\n\t\tx=b//5\n\t\ty=b%5\n\t\tbcount=arr[x][y]\t\t\n\t\tx-=1\n\t\ty-=1\n\t\twhile x>=0 and y>=0:\n\t\t\tbcount+=arr[x][y]\n\t\t\tx-=1\n\t\t\ty-=1\n\t\tmaxim=max((acount,bcount,maxim))\n\tmaxim=max(maxim,arr[l-2][l-1])\n\tmaxim=(maxim<<1)^1\n\tdelta=l-maxim\n\tif delta & 1:\n\t\tstdout.write('Second')\n\telse:\n\t\tstdout.write('First')\ndef __starting_point():\n\tmain()\n'''\n#276B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\ts=stdin.readline().strip()\n\tcount=collections.Counter(s)\n\tl=list(filter(lambda x: count[x] & 1,list(x for x in count)))\n\tremoved=sum(list(count[x] for x in l))-max(list(count[x] for x in l)+[0])\n\tif removed & 1:\n\t\tstdout.write('Second')\n\telse:\n\t\tstdout.write('First')\ndef __starting_point():\n\tmain()\n'''\n#362B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tif m:\n\t\tdirty=sorted(map(int,stdin.readline().split()))\n\t\tif dirty[0]==1 or dirty[-1]==n:\n\t\t\tstdout.write('NO')\n\t\telse:\n\t\t\tflag=True\n\t\t\tfor i in range(m-2):\n\t\t\t\tif dirty[i+1]==dirty[i]+1 and dirty[i+2]==dirty[i]+2:\n\t\t\t\t\tflag=False\n\t\t\t\t\tbreak\n\t\t\tif flag:\n\t\t\t\tstdout.write('YES')\n\t\t\telse:\n\t\t\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES')\ndef __starting_point():\n\tmain()\n'''\n#279B SUM OF SUB-ARRAY\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,t=map(int,stdin.readline().split())\n\tarr=list(map(int,stdin.readline().split()))\n\tmaxim=0\n\tcurr_sum=arr[0]\n\ti=0\n\tj=1\n\tif curr_sum <=t:\n\t\tcount=1\n\telse:\n\t\tcurr_sum=0\n\t\tcount=0\n\t\ti=1\n\t\tj=2\n\twhile j<n:\n\t\tif curr_sum+arr[j]<=t:\n\t\t\tcount+=1\n\t\t\tcurr_sum+=arr[j]\n\t\t\tj+=1\n\t\telse:\n\t\t\tmaxim=max(count,maxim)\n\t\t\tif curr_sum:\n\t\t\t\tcurr_sum-=arr[i]\n\t\t\t\tcount-=1\n\t\t\telse:\n\t\t\t\tj+=1\n\t\t\ti+=1\n\tmaxim=max(count,maxim)\n\tstdout.write(str(maxim))\ndef __starting_point():\n\tmain()\n'''\n#469B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tp,q,l,r=map(int,stdin.readline().split())\n\ta=[]\n\tb=[]\n\tvisited=list(0 for x in range(r-l+1))\n\t#print(visited)\t\n\tfor i in range(p):\n\t\tx,y=map(int,stdin.readline().split())\n\t\ta.append(x)\n\t\tb.append(y)\n\tfor i in range(q):\n\t\tx,y=map(int,stdin.readline().split())\n\t\tx+=l\n\t\ty+=l\n\t\tfor j in range(p):\n\t\t\t#print('x=',x,'y=',y)\n\t\t\tlower=max(0,a[j]-y)\n\t\t\tupper=min(b[j]-x,r)+1\n\t\t\tif upper > lower:\n\t\t\t\tdelta=upper-lower\n\t\t\t\t#print('upper=',upper,'lower=',lower)\n\t\t\t\tvisited[lower:upper]=list(1 for x in range(delta))\n\t\t\t\t#print('visited:\\n',visited)\n\t#\tprint(visited)\n\tstdout.write(str(visited[:r-l+1].count(1)))\ndef __starting_point():\n\tmain()\n'''\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\t#import numpy as np\n\tn,k=map(int,stdin.readline().split())\n\ta=tuple(map(int,stdin.readline().split()))\n\tminim=min(a)\n\tmaxim=max(a)\n\tarr=list(a)\t\n\tfor i in range(n):\n\t\tarr[i]-=minim\n\tif max(arr) > k:\n\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES\\n')\n\t\tfor i in a:\n\t\t\tstdout.write('1 '*minim)\n\t\t\tfor j in range(i-minim):\n\t\t\t\tstdout.write(str(j%k+1)+' ')\n\t\t\tstdout.write('\\n')\ndef __starting_point():\n\tmain()\n'''\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,p=[],[]\n\tfor _ in range(int(stdin.readline())):\n\t\tlast=int(stdin.readline())\n\t\tif last<0:\n\t\t\tn.append(-1*last)\n\t\telse:\n\t\t\tp.append(last)\n\tif sum(p)>sum(n):\n\t\tstdout.write('first')\n\telif sum(n)>sum(p):\n\t\tstdout.write('second')\n\telse:\n\t\tmaxim=max(n,p)\n\t\t#print(maxim)\n\t\tif maxim==p:\n\t\t\tif maxim==n:\n\t\t\t\tif last<0:\n\t\t\t\t\tstdout.write('second')\n\t\t\t\telse:\n\t\t\t\t\tstdout.write('first')\n\t\t\telse:\n\t\t\t\tstdout.write('first')\n\t\telse:\n\t\t\tstdout.write('second')\n\t\t\ndef __starting_point():\n\tmain()\n'''\n#286C\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tm,n=map(int,stdin.readline().split())\n\tminim=min(m,n)\n\tstdout.write(str(minim+1)+'\\n')\n\tif n==minim:\n\t\tfor i in range(minim+1):\n\t\t\tstdout.write(str(m)+' '+str(i)+'\\n')\n\t\t\tm-=1\n\telse:\n\t\tfor i in range(minim+1):\n\t\t\tstdout.write(str(i)+' '+str(n)+'\\n')\n\t\t\tn-=1\ndef __starting_point():\n\tmain()\n'''\n#387B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\ta=tuple(map(int,stdin.readline().split()))\n\tb=tuple(map(int,stdin.readline().split()))\n\ti=0\n\tj=0\n\twhile True:\n\t\t#print(i,j)\n\t\tif i>=n or j>=m:\n\t\t\tbreak\n\t\tif b[j]>=a[i]:\n\t\t\ti+=1\n\t\t\tj+=1\n\t\telse:\n\t\t\tj+=1\n\tstdout.write(str(n-i))\ndef __starting_point():\n\tmain()\n'''\n#365B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn=int(stdin.readline())\n\ta=tuple(map(int,stdin.readline().split()))\n\tmaxim=2\n\tcount=2\n\ti=2\n\twhile True:\n\t\tif i>=n:\n\t\t\tbreak\n\t\tif a[i]==a[i-1]+a[i-2]:\n\t\t\tcount+=1\n\t\t\tmaxim=max(count,maxim)\n\t\telse:\n\t\t\tcount=2\n\t\ti+=1\n\tstdout.write(str(min(maxim,n)))\ndef __starting_point():\n\tmain()\n'''\t#474D\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tMOD=int(1e9)+7\n\tT,k=map(int,stdin.readline().split())\n\tfib=[x for x in range(1,k+1)]\n\tfor i in range(k,100001):\n\t\tfib.append((fib[i-1]+fib[i-k]+1)%MOD)\n\tfor _ in range(T):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstdout.write(str((fib[b]-fib[a-1])%MOD)+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#330B\n#not working\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\troad_not=collections.defaultdict(set)\n\tn,m=map(int,stdin.readline().split())\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\troad_not[a].add(b)\n\t\troad_not[b].add(a)\n\tcounter=0\n\troad=collections.defaultdict(set)\n\tvisited=[0 for x in range(n)]\n\tvisited[0]=True\n\tfor index in range(1,n+1):\n\t\tfor i in range(1,n+1):\n\t\t\tif not visited[i-1]:\n\t\t\t\tif i not in road_not[index] and i!=index:\n\t\t\t\t\tcounter+=1\n\t\t\t\t\troad[index].add(i)\n\t\t\t\t\tvisited[i-1]=True\n\tstdout.write(str(counter)+'\\n')\n\tfor i in road:\n\t\tfor j in road[i]:\n\t\t\tstdout.write(str(i)+' '+str(j)+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#208D\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport bisect\n\tn=int(stdin.readline())\n\tp=tuple(map(int,stdin.readline().split()))\n\tP=tuple(map(int,stdin.readline().split()))\n\trecord=[0 for x in range(5)]\n\tpoints=0\n\tfor i in p:\n\t\tpoints+=i\n\t\twhile points>=P[0]:\n\t\t\tindex=bisect.bisect_right(P,points)\n\t\t\tif index:\n\t\t\t\tindex-=1\n\t\t\t\tnumber=points//P[index]\n\t\t\t\trecord[index]+=number\n\t\t\t\tpoints-=P[index]*number\n\tfor i in record:\n\t\tstdout.write(str(i)+' ')\n\tstdout.write('\\n'+str(points))\ndef __starting_point():\n\tmain()\n'''\n#339D Using Al.Cash's Segment Trees\n#Segment Tree\n#not-working\n'''\npowers=1\nt=[0 for x in range(3*int(1e5))]\ndef build(n):\n\tnonlocal t,powers\n\tflag=False\n\tfor i in range(n-1,0,-1):\n\t\tif i==powers-1:\n\t\t\tflag=not flag\n\t\t\tpowers>>=1\n\t\tif flag:\n\t\t\tt[i]=t[i<<1]^t[i<<1|1]\n\t\telse:\n\t\t\tt[i]=t[i<<1]|t[i<<1|1]\n\ndef modify(i,v,n):\n\tnonlocal t\n\tflag=False\n\tif t[i+n-1]==v or v|t[(i+n-1)^1]==t[(i+n-1)>>1]:\n\t\t#print('skipped')\n\t\t#print('t[i+n-1]=',t[i+n-1],'v=',v)\n\t\t#print('v|t[(i+n-1)^1]=',v|t[(i+n-1)^1],'t[(i+n-1)>>1]',t[(i+n-1)>>1])\t\t\n\t\tt[i+n-1]=v\t\t\n\t\treturn\n\tt[i+n-1]=v\n\tp=i+n-1\n\twhile p>1:\n\t\tif flag:\n\t\t\tif t[p>>1]==t[p]^t[p^1]:\n\t\t\t\tbreak\n\t\t\tt[p>>1]=t[p]^t[p^1]\n\t\t\tflag=not flag\n\t\telse:\n\t\t\tif t[p>>1]==t[p]|t[p^1]:\n\t\t\t\tbreak\n\t\t\tt[p>>1]=t[p]|t[p^1]\n\t\t\tflag=not flag\n\t\tp>>=1\n\ndef main():\n\tfrom sys import stdin,stdout\n\tnonlocal t,powers\n\tn,m=map(int,stdin.readline().split())\n\tp=tuple(map(int,stdin.readline().split()))\n\tpowers=1<<(n-1)\t\n\tn=1<<(n)\t\n\tfor i in range(n):\n\t\tt[i+n]=p[i]\n\tbuild(n)\n\t#print(t[:2*n])\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tmodify(a,b,n)\n\t\t#print(t[:2*n])\n\t\tstdout.write(str(t[1])+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#330B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tstart_not=set()\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstart_not.add(a-1)\n\t\tstart_not.add(b-1)\n\tvisited=[False for _ in  range(n)]\n\tfor i in range(n):\n\t\tif i not in start_not:\n\t\t\tcenter=i\n\t\t\tbreak\n\tstdout.write(str(n-1)+'\\n')\n\tfor i in range(n):\n\t\tif i != center:\n\t\t\tstdout.write(str(center+1)+' '+str(i+1)+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#116B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tarr=[]\n\tfor _ in range(n):\n\t\tarr.append(stdin.readline().strip())\n\tpigs=set()\n\tcount=0\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif arr[i][j]=='W':\n\t\t\t\tflag=0\n\t\t\t\tif i>0:\n\t\t\t\t\tif arr[i-1][j]=='P':\n\t\t\t\t\t\tpigs.add((i-1,j))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif i<n-1:\n\t\t\t\t\tif arr[i+1][j]=='P':\n\t\t\t\t\t\tpigs.add((i+1,j))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif \tj>0:\n\t\t\t\t\tif arr[i][j-1]=='P':\n\t\t\t\t\t\tpigs.add((i,j-1))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif j<m-1:\n\t\t\t\t\tif arr[i][j+1]=='P':\n\t\t\t\t\t\tpigs.add((i,j+1))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif flag:\n\t\t\t\t\tcount+=1\n\tstdout.write(str(min(len(pigs),count)))\ndef __starting_point():\n\tmain()\n'''\n#339D using Al.Cash's Segment Tree Implementation\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tanswers=()\n\tn,m=map(int,stdin.readline().split())\n\tp=tuple(map(int,stdin.readline().split()))\n\tpowers=1<<(n-1)\n\tn=powers<<1\n\tt=[0 for _ in range(n<<1)]\n\tfor i in range(n):\n\t\tt[n+i]=p[i]\n\tflag=False\n\tfor i in range(n-1,0,-1):\n\t\tif i==powers-1:\n\t\t\tflag=not flag\n\t\t\tpowers>>=1\n\t\tif flag:\n\t\t\tt[i]=t[i<<1]^t[i<<1|1]\n\t\telse:\n\t\t\tt[i]=t[i<<1]|t[i<<1|1]\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tflag=False\n\t\tif t[a+n-1]==b or b|t[(a+n-1)^1]==t[(a+n-1)>>1]:\n\t\t\tt[a+n-1]=b\n\t\telse:\n\t\t\tt[a+n-1]=b\n\t\t\tp=a+n-1\n\t\t\twhile p > 1:\n\t\t\t\tif flag:\n\t\t\t\t\tif t[p>>1]==t[p]^t[p^1]:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tt[p>>1]=t[p]^t[p^1]\n\t\t\t\t\tflag=not flag\n\t\t\t\telse:\n\t\t\t\t\tif t[p>>1]==t[p]|t[p^1]:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tt[p>>1]=t[p]|t[p^1]\n\t\t\t\t\tflag= not flag\n\t\t\t\tp>>=1\n\t\tstdout.write(str(t[1])+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#515C\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\tnc=[0 for x in range(10)]\n\tn=int(stdin.readline())\n\tnum=stdin.readline().strip()\n\tfor i in num:\n\t\tk=int(i)\n\t\tif k==9:\n\t\t\tnc[7]+=1\n\t\t\tnc[3]+=2\n\t\t\tnc[2]+=1\n\t\telif k==8:\n\t\t\tnc[7]+=1\n\t\t\tnc[2]+=3\n\t\telif k==7:\n\t\t\tnc[7]+=1\n\t\telif k==6:\n\t\t\tnc[5]+=1\n\t\t\tnc[3]+=1\n\t\telif k==5:\n\t\t\tnc[5]+=1\n\t\telif k==4:\n\t\t\tnc[3]+=1\n\t\t\tnc[2]+=2\n\t\telif k==3:\n\t\t\tnc[3]+=1\n\t\telif k==2:\n\t\t\tnc[2]+=1\n\tans=''\n\tfor i in range(10):\n\t\tans+=str(9-i)*nc[9-i]\n\tstdout.write(ans)\t\t\ndef __starting_point():\n\tmain()\n'''\n#313B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\ts=stdin.readline().strip()\n\tflag=s[0]\n\tif flag=='.':\n\t\tanti='#'\n\telse:\n\t\tanti='.'\n\tn=len(s)\n\tl=[0 for x in range(n)]\n\tfor i in range(1,n):\n\t\tif s[i]==flag:\n\t\t\tl[i]=l[i-1]+1\n\t\telse:\n\t\t\tflag,anti=anti,flag\n\t\t\tl[i]=l[i-1]\n\t#print(l)\n\tfor _ in range(int(stdin.readline())):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstdout.write(str(l[b-1]-l[a-1])+'\\n')\ndef __starting_point():\n\tmain()\n'''\n#431C\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tMOD=int(1e9)+7\n\tn,k,d=map(int,stdin.readline().split())\n\td-=1\n\tklist=[(1<<i)%MOD for i in range(k)]\n\tklist=[1]+klist\n\tfor i in range(k+1,n+1):\n\t\tklist.append((klist[i-1]*2-klist[i-1-k])%MOD)\n\tif d:\t\n\t\tdlist=[(1<<i)%MOD for i in range(d)]\n\t\tdlist=[1]+dlist\n\t\tfor i in range(d+1,n+1):\n\t\t\tdlist.append((dlist[i-1]*2-dlist[i-1-d])%MOD)\n\t#print(klist)\n\t#print(dlist)\n\t\tans=klist[n]-dlist[n]\n\telse:\n\t\tans=klist[n]\n\tstdout.write(str(ans%MOD))\ndef __starting_point():\n\tmain()\n'''\n#441C\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m,k=list(map(int,stdin.readline().split()))\n\tif n>=m:\n\t\ti=-1\n\t\tj=-1\n\t\tnum=n*m\n\t\twhile k:\n\t\t\tans=num//k\n\t\t\tstdout.write(str(ans)+' ')\n\t\t\tcounter=0\n\t\t\twhile counter<ans:\n\t\t\t\tif j==-1:\n\t\t\t\t\tflag=True\n\t\t\t\t\ti+=1\n\t\t\t\t\tj+=1\n\t\t\t\tif j==m:\n\t\t\t\t\tflag=False\n\t\t\t\t\ti+=1\n\t\t\t\t\tj-=1\n\t\t\t\tstdout.write(str(i+1)+' '+str(j+1)+' ')\n\t\t\t\tif flag:\n\t\t\t\t\tj+=1\n\t\t\t\telse:\n\t\t\t\t\tj-=1\n\t\t\t\tcounter+=1\n\t\t\tnum-=ans\n\t\t\tk-=1\n\t\t\tstdout.write('\\n')\n\telse:\n\t\ti=-1\n\t\tj=-1\n\t\tnum=n*m\n\t\twhile k:\n\t\t\tans=num//k\n\t\t\tstdout.write(str(ans)+' ')\n\t\t\tcounter=0\n\t\t\twhile counter<ans:\n\t\t\t\tif i==-1:\n\t\t\t\t\tflag=True\n\t\t\t\t\tj+=1\n\t\t\t\t\ti+=1\n\t\t\t\tif i==n:\n\t\t\t\t\tflag=False\n\t\t\t\t\tj+=1\n\t\t\t\t\ti-=1\n\t\t\t\tstdout.write(str(i+1)+' '+str(j+1)+' ')\n\t\t\t\tif flag:\n\t\t\t\t\ti+=1\n\t\t\t\telse:\n\t\t\t\t\ti-=1\n\t\t\t\tcounter+=1\n\t\t\tnum-=ans\n\t\t\tk-=1\n\t\t\tstdout.write('\\n')\ndef __starting_point():\n\tmain()\n\n__starting_point()", "from sys import stdin\nfirstline = stdin.readline().rstrip().split()\nrows = int(firstline[0])\ncols = int(firstline[1])\nk = int(firstline[2])\n\nflip = True\nflat_matrix=[]\nfor row in range(rows):\n    col_traversal = (range(cols-1, -1, -1), range(cols))[flip]\n    for col in col_traversal:\n        flat_matrix.append((row+1, col+1))\n    flip = not flip\n\npoint = 0\nfor tube in range(k):\n    if tube != k-1:\n        print(\"2 \", end='')\n        for cell in range(2):\n            point + cell\n            print(str(flat_matrix[point+cell][0]) + \" \" + str(flat_matrix[point+cell][1]) + \" \", end='')\n        point += 2\n        print()\n    else:\n        print(str(len(flat_matrix)-point) + \" \", end='')\n        for cell in range(len(flat_matrix)-point):\n            print(str(flat_matrix[point+cell][0]) + \" \" + str(flat_matrix[point+cell][1]) + \" \", end='')\nprint()\n", "import sys\n\ndef main():\n    (n, m, k) = list(map(int, sys.stdin.readline().split(' ')))\n    l = []\n    alt = False\n    for i in range(n):\n        if not alt:\n            for j in range(m):\n                l.append((i + 1, j + 1))\n        else:\n            for j in range(m - 1, -1, -1):\n                l.append((i + 1, j + 1))\n        alt ^= True\n    length = (n * m) // k\n    i = 0\n    for j in range(1, k + 1):\n        g = l[i:j*length]\n        if j == k:\n            g = l[i:]\n        s = ' '.join(list([' '.join(map(str, x)) for x in g]))\n        sys.stdout.write('{} {}\\n'.format(len(g), s))\n        i = j * length\n\nmain()  \n"]