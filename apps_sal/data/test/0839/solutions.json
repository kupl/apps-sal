["from itertools import permutations\n\ntab = []\n\nfor i in range(5):\n  buf = input().split(\" \")\n  X = []\n  for j in range(5):\n    X.append(int(buf[j]))\n  tab.append(X)\n\nres = 0\n\nfor perm in permutations([0,1,2,3,4], 5):\n  wyn = 0\n  wyn += tab[perm[0]][perm[1]]\n  wyn += tab[perm[1]][perm[0]]\n  wyn += tab[perm[2]][perm[3]]\n  wyn += tab[perm[3]][perm[2]]\n  \n  wyn += tab[perm[1]][perm[2]]\n  wyn += tab[perm[3]][perm[4]]\n  wyn += tab[perm[2]][perm[1]]\n  wyn += tab[perm[4]][perm[3]]\n  \n  wyn += tab[perm[2]][perm[3]]\n  wyn += tab[perm[3]][perm[2]]\n  \n  wyn += tab[perm[3]][perm[4]]\n  wyn += tab[perm[4]][perm[3]]\n  \n  res = max(wyn, res)\n  \nprint(res)", "import random\nimport sys\n#sys.stdin = open('input.txt', 'r')\n#sys.stdout = open('output.txt', 'w')\na = [[0] * 5 for i in range(5)]\na[0] = list(map(int, input().split()))\na[1] = list(map(int, input().split()))\na[2] = list(map(int, input().split()))\na[3] = list(map(int, input().split()))\na[4] = list(map(int, input().split()))\nans = 0\nfor i in range(5):\n    for j in range(5):\n        for k in range(5):\n            for l in range(5):\n                for s in range(5):\n                    if i == j or i == k or i == l or i == s or j == k or j == l or j == s or k == l or k == s or l == s:\n                        continue\n                    ans = max(ans, a[i][j] + a[j][i] + a[k][l] + a[l][k] + a[j][k] + a[k][j] + a[l][s] + a[s][l] + a[k][l] + a[l][k] + a[l][s] + a[s][l])\nprint(ans)", "from sys import stdin\n\ndef generator(k):\n    nonlocal generation\n    nonlocal resnum\n    nonlocal a\n    if(k == 5):\n        sm = a[generation[0]][generation[1]] + a[generation[1]][generation[0]] + 2 * a[generation[2]][generation[3]] + 2 * a[generation[3]][generation[2]] + a[generation[1]][generation[2]] + a[generation[2]][generation[1]] + 2 * a[generation[3]][generation[4]] + 2 * a[generation[4]][generation[3]]\n        if(sm > resnum):\n            resnum = sm\n    else:\n        for i in range(5):\n            if not(i in generation):\n                generation[k] = i\n                generator(k + 1)\n                generation[k] = -1\n\n\na = []\nfor i in range(5):\n    a.append(list(map(int, stdin.readline().split())))\nprint()\ngeneration = [-1 for i in range(5)]\nresnum = -1\ngenerator(0)\nprint(resnum)", "from itertools import *\na=[]\nfor i in range(5):\n    a.append(list(map(int,input().split())))\nans=[]\nm=0\nfor p in permutations(range(5)):\n    t=0\n    for i in range(4):\n        for j in range(i,5,2):\n            if j!=4:\n                t+=a[p[j]][p[j+1]]+a[p[j+1]][p[j]]\n    if t>=m:\n        m=t\nprint(m)", "import itertools\n\n\ndef calc(comb):\n\n    if len(comb) < 2:\n\n        return 0\n\n    s = 0\n    for i in range(0, len(comb) // 2 * 2, 2):\n\n        a, b = comb[i:i + 2]\n        s += m[a, b] + m[b, a]\n\n    return s + calc(comb[1:])\n\nm = {}\nfor y in range(5):\n\n    for x, v in enumerate(str.split(input())):\n\n        m[x, y] = int(v)\n\nprint(max(list(map(calc, itertools.permutations(list(range(5)))))))\n\n\n", "# 5 chel och\n# pervii so vtorim etc, esli nechet lst stoit\n\nradost = []\nfor i in range(5):\n    radost.append(list(map(int, input().split())))\n\nmr = 0\n\ndef cr(m):\n    nonlocal radost\n    return  radost[m[0]][m[1]] + \\\n            radost[m[1]][m[0]] + \\\n            radost[m[1]][m[2]] + \\\n            radost[m[2]][m[1]] + \\\n           (radost[m[2]][m[3]] + \\\n            radost[m[3]][m[2]]) * 2 + \\\n           (radost[m[3]][m[4]] + \\\n            radost[m[4]][m[3]]) * 2\n\nfor a in range(5):\n    for b in range(5):\n        for c in range(5):\n            for d in range(5):\n                for e in range(5):\n                    m = [a, b, c, d, e]\n                    if len(set(m))==5:\n                        mr = max(mr, cr(m))\n\nprint(mr)\n", "import sys, itertools\n\nf = sys.stdin\ng = []\nfor i in range(5):\n    g.append( [int(u) for u in f.readline().strip().split()] )\n\n\np_all = itertools.permutations(list(range(5)))\nmax_S = 0\nfor p in p_all:\n    S = g[p[0]][p[1]] + g[p[1]][p[0]] + g[p[2]][p[3]] + g[p[3]][p[2]] \n    S += g[p[1]][p[2]] + g[p[2]][p[1]] + g[p[3]][p[4]] + g[p[4]][p[3]]\n    S += g[p[2]][p[3]] + g[p[3]][p[2]] + g[p[3]][p[4]] + g[p[4]][p[3]]\n    max_S = max(S, max_S)\n\nprint(max_S)\n", "def str(l, l1, l2, l3, l4):\n    s = [l, l1, l2, l3, l4]\n    return s\ndef count(u):\n    sum = 0\n    lim = 0\n    while lim != 5:\n        for i in range(0, len(u) - 1, 2):\n            sum += a[u[i]-1][u[i+1]-1]\n            sum += a[u[i+1]-1][u[i]-1]\n        u = u[1:]\n        lim += 1\n    return sum\na = []\nu = [1, 2, 3, 4 ,5]\nfor i in range(5):\n    a.append(list(map(int, input().split())))\nb = []\nc = []\no = set()\nfor i in range(1, 6):\n    for j in range(1, 6):\n        for k in range(1, 6):\n            for l in range(1, 6):\n                for p in range(1, 6):\n                    o.add(i)\n                    o.add(j)\n                    o.add(k)\n                    o.add(l)\n                    o.add(p)\n                    if len(o) == 5:\n                        b.append(str(i, j, k, l, p))\n                    o = set()\nfor i in range(len(b)):\n    c.append(count(b[i]))\nc = sorted(c)\nprint(c[-1])", "a = []\nfor i in range(5):\n    a.append(list(map(int, input().split())))\n    \nused = [False] * 5\nans = 0\nfor i1 in range(5):\n    used[i1] = True\n    for i2 in range(5):\n        if not used[i2]:\n            used[i2] = True\n            \n            for i3 in range(5):\n                if not used[i3]:\n                    used[i3] = True\n                    for i4 in range(5):\n                        if not used[i4]:\n                            used[i4] = True\n                            for i5 in range(5):\n                                if not used[i5]:\n                                    m = 0\n                                    used[i5] = True\n                                    o = [i1, i2, i3, i4, i5]\n                                    for j in range(5):\n                                        for i in range(0, len(o) - 1, 2):\n                                            m += a[o[i]][o[i + 1]] + a[o[i + 1]][o[i]]\n                                        o = o[1:]\n                                    if m > ans:\n                                        ans = m\n                                    used[i5] = False\n                            used[i4] = False\n                    used[i3] = False\n            used[i2] = False\n    used[i1] = False\nprint(ans)", "g = []\nfor i in range(5):\n    g.append(list(map(int,input().split())))\nmax = 0\nfor i in range(5):\n    for j in range(5):\n        if i!=j:\n            for k in range(5):\n                if i!=k and j!=k:\n                    for l in range(5):\n                        if i!=l and j!=l and k!=l:\n                            m = 10 - i - j - k - l\n                            sum = g[i][j]+g[j][i]+g[j][k]+g[k][j]\n                            sum += 2*(g[k][l]+g[l][k]+g[l][m]+g[m][l])                          \n                            if sum > max:\n                                max = sum                           \nprint(max)\n                \n", "import sys\n#sys.stdin = open('input.txt', 'r')\ng = []\nfor i in range(5):\n\tg.append([])\n\tg[i] = list(map(int, input().split()))\nfrom itertools import permutations\nM = -1\nfor p in permutations(list(range(1,6))):\n\tM = max(M, g[p[0]-1][p[1]-1] + g[p[1]-1][p[0]-1] + g[p[1]-1][p[2]-1] + g[p[2]-1][p[1]-1] + 2*(g[p[2]-1][p[3]-1] + g[p[3]-1][p[2]-1] + g[p[3]-1][p[4]-1] + g[p[4]-1][p[3]-1]))\nprint(M)\n\n\n", "from itertools import permutations\nmatrix, ans = [list(map(int, input().split())) + [0] for x in range(5)] + [[0] * 6], 0\nfor perm in permutations(list(range(5))):\n    x = list(perm) + [5]\n    temp = 0\n    for i in range(5):\n        for j in range(i, 5, 2):\n            temp += matrix[x[j]][x[j + 1]] + matrix[x[j + 1]][x[j]]\n    ans = max(ans, temp)\nprint(ans)\n", "import itertools\n\n\ng = [list(map(int, input().split())) for _ in range(5)]\nmaximum = 0\n\nfor p in itertools.permutations(list(range(5))):\n    p = list(p)\n    maximum = max(maximum, g[p[0]][p[1]] + g[p[1]][p[0]] + g[p[2]][p[3]]\n            + g[p[3]][p[2]] + g[p[1]][p[2]] + g[p[2]][p[1]] + g[p[3]][p[4]]\n            + g[p[4]][p[3]] + g[p[2]][p[3]] + g[p[3]][p[2]] + g[p[3]][p[4]]\n            + g[p[4]][p[3]])\n\nprint(maximum)\n", "#!/usr/bin/env python\n\nimport itertools\n\ndef main( ):\n    g = list( )\n    for i in range( 5 ):\n        g.append( list( map( int, input( ).split( ) ) ) )\n\n    print(( max( [ \n        g[ l[0] ][ l[1] ] + g[ l[1] ][ l[0] ] + 2 * g[ l[2] ][ l[3] ] + 2 * g[ l[3] ][ l[2] ] +\n        g[ l[1] ][ l[2] ] + g[ l[2] ][ l[1] ] + 2 * g[ l[3] ][ l[4] ] + 2 * g[ l[4] ][ l[3] ]\n        for l in itertools.permutations( list( range( 5 ) ) ) ] ) ))\n\ndef __starting_point():\n    main( )\n\n\n__starting_point()", "def fun(mas, h):\n    nonlocal ans,a\n    \n    if (h < 5):\n        for i in range(5):\n            if not(i in mas):\n                fun(mas + [i], h+1)\n        return 0\n\n    res = 0\n    for i in range(5):\n        if (len(mas) > 1):\n            res += a[mas[0]][mas[1]] \n            res += a[mas[1]][mas[0]] \n        if (len(mas) > 3):\n            res += a[mas[2]][mas[3]] \n            res += a[mas[3]][mas[2]] \n        mas.pop(0)      \n    \n    if (res > ans): ans = res\n\n\na = [[0]*5]*5\n\nfor i in range(5):\n    a[i] = [int(j) for j in input().split()]\n\nans = 0\nfor i in range(5):\n    mas = [i]\n    fun(mas,1)\n\nprint(ans)", "3\n\nimport sys\nimport itertools\n\n#Approach: Since there are only 5 students, we can brute force through all 5! (=120) lineups. Don't know if that will be fast enough, though, but let's see. We'll go through each lineup, and measure the happiness.\n\nh_1 = list(map(int, input().split())) #i's happiness\nh_2 = list(map(int, input().split()))\nh_3 = list(map(int, input().split()))\nh_4 = list(map(int, input().split()))\nh_5 = list(map(int, input().split()))\n\nall_hap = []\nall_hap.append(h_1)\nall_hap.append(h_2)\nall_hap.append(h_3)\nall_hap.append(h_4)\nall_hap.append(h_5)\n\nall_permutations = list(itertools.permutations([0, 1, 2, 3, 4], 5))\nmax_hap = 0\n\nfor perm in all_permutations:\n\thap = 0\n\thap = hap + all_hap[perm[0]][perm[1]] + all_hap[perm[1]][perm[0]] + all_hap[perm[2]][perm[3]] + all_hap[perm[3]][perm[2]]#When no one is showering.\n\thap = hap + all_hap[perm[1]][perm[2]] + all_hap[perm[2]][perm[1]] + all_hap[perm[3]][perm[4]] + all_hap[perm[4]][perm[3]]#When first guy is in the shower\n\thap = hap + all_hap[perm[2]][perm[3]] + all_hap[perm[3]][perm[2]]#When second guy is in the shower\n\thap = hap +all_hap[perm[3]][perm[4]] + all_hap[perm[4]][perm[3]]#When third guy is in the shower\n\tif (hap > max_hap):\n\t\tmax_hap = hap\n\nprint(max_hap)\n", "from sys import stdin as cin\nfrom itertools import permutations as p\na=[]*5\nfor i in range(5):\n    a.append(list(map(int,cin.readline().split())))\nb = list(p([0,1,2,3,4]))\nsum = 0\nmax = 0\nfor x in b:\n    sum =(a[x[0]][x[1]]+a[x[2]][x[3]]+a[x[1]][x[2]]+a[x[3]][x[4]]+a[x[2]][x[3]]+a[x[3]][x[4]])+ a[x[1]][x[0]]+a[x[3]][x[2]]+a[x[2]][x[1]]+a[x[4]][x[3]]+a[x[3]][x[2]]+a[x[4]][x[3]]\n    if sum> max:\n        max = sum\nprint(max)\n\n\n\n\n", "g=[0]*5\nfor i in range(5):\n    g[i]=[0]*5\n    g[i]=list(map(int, input().split()))\nmax=0\nfor i in range(5):\n    for j in range(5):\n        if j!=i:\n            for m in range(5):\n                if m!=j and m!=i:\n                    for n in range(5):\n                        if n!=m and n!=j and n!=i:\n                            s=10-n-m-j-i\n                            if g[i][j]+g[j][i]+g[j][m]+g[m][j]+2*(g[m][n]+g[n][m])+2*(g[n][s]+g[s][n])>max:\n                                max=g[i][j]+g[j][i]+g[j][m]+g[m][j]+2*(g[m][n]+g[n][m])+2*(g[n][s]+g[s][n])\nprint(max)\n\n    \n", "F=[]\n\ndef gen(T,X):\n    if(len(X)==5):\n        F.append(list(X))\n        return\n    for item in T:\n        H=list(T)\n        H.remove(item)\n        X.append(item)\n        gen(H,X)\n        X.remove(item)\n    return\nG=[]\nfor i in range(5):\n    G.append(list(map(int,input().split())))\ngen([0,1,2,3,4],[])\nans=0\nfor item in F:\n    X=item\n    t=0\n    for i in range(5):\n        for j in range(i,5,2):\n            if(j==4):\n                continue\n            t+=G[X[j]][X[j+1]]\n            t+=G[X[j+1]][X[j]]\n    ans=max(ans,t)\nprint(ans)", "g = [list(map(int, input().split())) for i in range(5)]\nans = 0\nfor i1 in range(5):\n    for i2 in range(5):\n        for i3 in range(5):\n            for i4 in range(5):\n                for i5 in range(5):\n                    if i1 != i2 and i3 != i1 and i3 != i2 and i4 != i1 and i4 != i2 and i4 != i3 and i5 != i1 and i5 != i2 and i5 != i3 and i5 != i4:\n                        ans = max(ans, g[i1][i2] + g[i2][i1] + g[i3][i4] + g[i4][i3] + g[i2][i3] + g[i3][i2] + g[i4][i5] + g[i5][i4] + g[i3][i4] + g[i4][i3] + g[i4][i5] + g[i5][i4])\nprint(ans)", "__author__ = 'Lipen'\n\ndef main():\n\tg = []\n\tfor i in range(5):\n\t\tg.append(list(map(int, input().split())))\n\n\talready = []\n\tsmax = 0\n\tfor q1 in range(5):\n\t\tfor q2 in range(5):\n\t\t\tif q2 not in [q1]:\n\t\t\t\tfor q3 in range(5):\n\t\t\t\t\tif q3 not in [q1, q2]:\n\t\t\t\t\t\tfor q4 in range(5):\n\t\t\t\t\t\t\tif q4 not in [q1, q2, q3]:\n\t\t\t\t\t\t\t\tfor q5 in range(5):\n\t\t\t\t\t\t\t\t\tif q5 not in [q1, q2, q3, q4]:\n\t\t\t\t\t\t\t\t\t\ts = g[q1][q2]+g[q2][q1]+2*g[q3][q4]+2*g[q4][q3]+g[q2][q3]+g[q3][q2]+2*g[q4][q5]+2*g[q5][q4]\n\t\t\t\t\t\t\t\t\t\tif s > smax:\n\t\t\t\t\t\t\t\t\t\t\tsmax = s\n\tprint(smax)\n\nmain()", "from itertools import permutations\nq, t = 0, [list(map(int, input().split())) for i in range(5)]\nfor a, b, c, d, e in permutations([0, 1, 2, 3, 4]):\n    s = t[a][b] + t[b][a] + t[b][c] + t[c][b] + 2 * (t[c][d] + t[d][c] + t[d][e] + t[e][d])\n    if s > q: q = s\nprint(q)", "def next (a):\n    k = len(a) - 2\n\n    while a[k] > a[k+1]:\n        k -= 1;\n\n    t = k + 1\n\n    while t < len(a) - 1 and a[t+1] > a[k]:\n        t += 1\n\n    a[t], a[k] = a[k], a[t]\n\n    sub = a[k+1:]\n    sub.reverse()\n\n    res = a[:k+1]+sub\n\n    return res\n\ndef countCurrent (a,happiness):\n    res = 0\n\n    for i in range(len(a) // 2):\n        f = a[2*i]\n        n = a[2*i + 1]\n        res += happiness[f][n] + happiness[n][f]\n\n    return res\n\ndef count (a,happiness):\n    res = 0\n    tmp = a\n\n    while len(tmp) > 1:\n        res += countCurrent(tmp,happiness)\n        tmp = tmp[1:]\n\n    return res\n\n\nhappiness = []\n\nfor x in range(5):\n    happiness.append([int(c) for c in input().split()])\n\ntest = [0,1,2,3,4]\nk = 0\n\nwhile True:\n    c = count(test,happiness)\n    if c > k:\n        k = c\n    if test != [4,3,2,1,0]:\n        test = next(test)\n    else:\n        break\n\nprint(k)\n\n\n\n", "from itertools import permutations\ng = [list(map(int, input().split())) for i in range(5)]\nj = lambda p: g[p[0]][p[1]] + g[p[1]][p[0]] + 2 * (g[p[2]][p[3]] + g[p[3]][p[2]]) + g[p[1]][p[2]] + g[p[2]][p[1]] + 2 * (g[p[3]][p[4]] + g[p[4]][p[3]])\nprint(max(j(p) for p in permutations(range(5))))"]