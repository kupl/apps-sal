["n = int(input())\n\nd = {}\n\nfor i in range(n):\n\ts = input()\n\tif s in d:\n\t\td[s] += 1\n\telse:\n\t\td[s] = 1\n\nprint(d[max(d,key=d.get)])", "N = int(input())\nd = {}\nfor i in range(N):\n    l = input()\n    if l not in d:\n        d[l] = 0\n    d[l] += 1\n\nprint(max(d.values()))\n", "n = int(input())\np = []\nfor i in range(n):\n   p.append(list(input()))\nmax = 0\nfor i in range(n):\n   q = p\n   for t in range(n):\n      if q[i][t] == '0':\n          for k in range(n):\n                 if q[k][t] == '0':\n                    q[k][t] = '1'\n                 else:\n                    q[k][t] = '0'\n   col = 0\n   for t in range(n):\n      sum = 0\n      for e in range(n):\n         if q[t][e] == '1':\n            sum += 1\n      if sum == n:\n           col += 1\n   if col > max:\n      max = col\nprint(max)\n      \n", "a = int(input())\ns = dict()\nfor i in range(a):\n    cur = input()\n    if s.get(cur) != None:\n        s[cur] += 1\n    else:\n        s[cur] = 1\nprint(max(s.values()))", "n = int(input())\ndic = dict()\nfor i in range(n):\n    s = input()\n    if s not in dic:\n        dic[s] = 1\n    else:\n        dic[s] += 1\nprint(max(dic.values()))\n", "n = int(input())\nd = dict()\nfor i in range(n):\n    a = input()\n    if a not in d:\n        d[a] = 1\n    else:\n        d[a] += 1\nm = 0\nfor elem in d:\n    m = max(m, d[elem])\nprint(m)", "n = int(input())\nmt = dict()\n\nfor i in range(n):\n    line = input()\n    if line in mt:\n        mt[line] += 1\n    else:\n        mt[line] = 1\n\nprint(max(mt.values()))", "n = int(input())\nd = {}\nfor i in range(n) :\n  s = input()\n  if s in list(d.keys()) : d[s]+=1\n  else : d[s] = 1\nprint(max(d.values()))\n", "n = int(input())\nslv = dict()\narr = []\nmatrix = [[0] * n for i in range(n)]\nfor i in range(n):\n    curr = input()\n    if slv.get(curr) == None:\n        slv[curr] = 1\n    else:\n        slv[curr] += 1\nprint(max(slv.values()))", "n = int(input())\na = []\nfor i in range(n):\n    a.append(input())\nfor i in range(n):\n    t = a[i]\n    a[i] = []\n    for j in range(n):\n        a[i].append(t[j] == '1')\n#print(a)\nmaxRes = -1\nfor i in range(n):\n    s = []\n    b = a[:]\n    for j in range(n):\n        s.append(not a[i][j])\n        b[i][j] = True\n    for j in range(i):\n        for k in range(n):\n            if s[k]:\n                b[j][k] = not b[j][k]\n    #print(s)\n    for j in range(i+1, n):\n        for k in range(n):\n            if s[k]:\n                b[j][k] = not b[j][k]\n    res = 0\n    for j in range(n):\n        t = True\n        for k in range(n):\n            if not b[j][k]:\n                t = False\n        if t:\n            res += 1\n    maxRes = max(maxRes, res)\n    #print(b)\n    #print()\nprint(maxRes)\n", "def main():\n    n = int(input())\n    lines = []\n    d = {}\n    for _ in range(n):\n        l = input()\n        if l not in d:\n            d[l] = 0\n        d[l] +=1\n    ans = max(d.values())\n    print(ans)\n\ndef __starting_point():\n    main()\n    \n\n__starting_point()", "from collections import Counter\n\nn = int(input())\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nprint(Counter(grid).most_common(1)[0][1])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\nn       = int(input())\ntable   = []\n\nfor i in range(n):\n    table.append([int(i) for i in input().split()])\n\nstart = time.time()\nans   = 0\n\nfor i in range(n):\n    buf = 0\n    for j in range(n):\n        if table[i] == table[j]:\n            buf += 1\n    if buf > ans:\n        ans = buf\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "#!/usr/bin/env python3\n\nn = int(input())\n\nrows = []\n\nfor i in range(n):\n\trow = input()\n\trows += [row]\n\n\ndef sweepColumn(rows, i):\n\tdef sweep(row):\n\t\treturn row[0:i] + ('1' if row[i] == '0' else '0') + row[i+1:]\n\treturn [sweep(row) for row in rows]\n\ndef sweepColumns(rows, idxs):\n\tif len(idxs) == 0: return rows\n\treturn sweepColumns(sweepColumn(rows, idxs[0]), idxs[1:])\n\ndef numCleanRows(rows):\n\treturn len(list(row for row in rows if '1' not in row))\n\ndef dirtyIdxs(row):\n\treturn list(i for i, e in enumerate(row) if e == '1')\n\nprint(max(numCleanRows(sweepColumns(rows, dirtyIdxs(row))) for row in rows))", "def main():\n    n = int(input())\n    grid = [input() for _ in range(n)]\n\n    row_map = {}\n    max_frequency = 0\n    for row in grid:\n        if row in row_map:\n            row_map[row] += 1\n        else:\n            row_map[row] = 1\n\n        max_frequency = max(max_frequency, row_map[row])\n\n    print(max_frequency)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2015 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\n\ndef check(c):\n    for char in c:\n        if char == '0':\n            return False\n    return True    \n\nn = int(input())\n\ns = []\neq = [0 for i in range(n)]\nfor i in range(n):\n    s.append(input())\n\nclean = 0\n\nfor c in s:\n    if check(c):\n        clean += 1\n\nfor i in range(n):\n    for j in range(i, n):\n        if s[i] == s[j]:\n            eq[i] += 1\nprint(max(clean, max(eq)))            \n", "n = int(input())\n\na = []\nfor i in range(n):\n    a.append(input())\nif n<2:\n    print(1)\n    return\na.sort()\nb = []\nk = 0\nfor i in range(n-1):\n    if a[i] == a[i+1]:\n        k += 1\n    else:\n        b.append(k+1)\n        k = 0\n    if i == n-2:\n        b.append(k+1)\nb.sort()\nprint(b[len(b)-1])\n\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\ndef ELIST(n): return [[] for i in range(n)]\ndef MI(n=None,m=None): # input matrix of integers\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = VI()\n    return arr\ndef MS(n=None,m=None): # input matrix of strings\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = input()\n    return arr\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\n    if n is None: n,m = VI()\n    a = MI(n,m)\n    arr = LIST(m,n)\n    for i,l in enumerate(a):\n        for j,x in enumerate(l):\n            arr[j][i] = x\n    return arr\n\n\n\ndef main(info=0):\n    n = I()\n    a = MS(n)\n    d = defaultdict(int)\n    for x in a:\n        d[x] += 1\n    print(max(d.values()))\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\ns=[]\nfor i in range(n):\n    s.append(input())\nc={}\nfor i in s:\n    if(any(i in d for d in c)):\n        c[i]=c[i]+1\n    else:\n        c[i]=1\nmax=1\nfor key in c:\n    if c[key]>max:\n        max=c[key]\nprint(max)", "n = int(input())\na = [list(input()) for i in range(n)]\n\nMax = 0\nfor i in a:\n\tcnt = 0\n\tfor j in a:\n\t\tif i == j:\n\t\t\tcnt += 1\n\tMax = max(cnt, Max)\nprint(Max)", "def func(x):\n    pass\n\ndef __starting_point():\n    x = int(input())\n    grid = {}\n    for _ in range(x):\n        row = input()\n        if row not in grid:\n            grid[row] = 1\n        else:\n            grid[row] += 1\n    best_value = 0\n    for key, value in list(grid.items()):\n        if value > best_value:\n            best_value = value\n    print(best_value)\n\n__starting_point()", "s = int(input())\nk = []\nfor i in range(0,s):\n    a=input()\n    k.append(a)\namount = []\nfor i in range(s):\n    amount.append(0)\n    for j in range(s):\n        if k[i] == k[j]:\n            amount[i] += 1\nans = max(amount)\nprint (ans)", "__author__ = 'taras-sereda'\nfrom collections import Counter\n\ndef b():\n    n = int(input())\n\n    mat = [input() for i in range(n)]\n    return Counter(mat).most_common(1)[0][1]\n\ndef __starting_point():\n    print(b())\n\n__starting_point()", "n = int(input())\ngrid = [[0]*n for i in range(n)]\nfor r in range(n):\n    s = input()\n    for c in range(n):\n        grid[r][c] = ord(s[c]) - ord('0')\nmax_clean_count = 0\nfor r in range(n):\n    state = [x ^ 1 for x in grid[r]]\n    clean_count = 0\n    for r2 in range(n):\n        if all(grid[r2][c] ^ state[c] == 1 for c in range(n)):\n            clean_count += 1\n    max_clean_count = max(max_clean_count, clean_count)  \nprint(max_clean_count)    ", "__author__ = 'Andrey'\n\n\ndef count_clean():\n    nonlocal room\n    nonlocal n\n    c = 0\n    for row in room:\n        if sum(row) == n:\n            c += 1\n    return c\n\n\ndef invert(row):\n    nonlocal room\n    nonlocal n\n    cleaned = []\n    for i in range(n):\n        if room[row][i] == 0:\n            for j in range(n):\n                room[j][i] = 1 - room[j][i]\n            cleaned.append(i)\n    c = count_clean()\n    for w in cleaned:\n        for j in range(n):\n                room[j][w] = 1 - room[j][w]\n    return c\n\nroom = []\nm = 0\nn = int(input())\nfor q in range(n):\n    room.append(list(map(int, list(input()))))\nfor i in range(n):\n    m = max(invert(i), m)\nprint(m)"]