["s = input()\npole = input()\nt = 0\ncount = 0\nfor i in range(len(pole)):\n    if pole[i] == s[t]:\n        t += 1\n    if t == len(s):\n        break\n    count += 1\nt -= 1\nfor i in range(len(pole) - 1, -1, -1):\n    if pole[i] == s[t]:\n        t -= 1\n    if t == -1:\n        count1 = i\n        break\nif count1 - count > 0:\n    print(count1 - count)\nelse:\n    print(0)", "def main():\n    s = input()\n    t = input()\n    i, j, m, l = 0, len(t) - 1, 0, len(s) - 1\n    while i < j:\n        if m != len(s):\n            if t[i] == s[m]:\n                m += 1 \n            if m != len(s):\n                i += 1\n        if l != -1:\n            if t[j] == s[l]:\n                l -= 1\n            if l != -1:\n                j -= 1\n        if m == len(s) and l == -1:\n            print(j-i)\n            break\n    else:\n        print(0)\n        \ndef __starting_point():\n    main()\n\n__starting_point()", "__author__ = '\u0420\u0443\u0441\u043b\u0430\u043d'\nname = input()\nfinder = input()\nleft_pos = 0\nright_pos = len(finder)\nisfind = True\nfor i in name:\n    left_pos = finder.find(i, left_pos)\n    if left_pos == -1:\n        isfind = False\n        break\n    else:\n        left_pos += 1\n\n\nif isfind:\n    for i in name[::-1]:\n        right_pos = finder.rfind(i, 0, right_pos)\n\nif right_pos >= left_pos and isfind:\n    print(right_pos - left_pos+1)\nelse:\n    print(0)", "p = input() #name\ns = input()\nanswer = 0\nj = 0\nmini = 0\nmaxi = 0\nlengthP = len(p)\nlengthS = len(s)\nfor i in range(lengthS):\n    if s[i] == p[j]:\n        j += 1\n        if j == lengthP:\n            j = 0\n            answer += 1\n            if answer == 1:\n                mini = i\nif answer > 1:\n    j = lengthP - 1\n    for i in range(lengthS-1,-1,-1):\n        if s[i] == p[j]:\n            j -= 1\n            if j == -1:\n                maxi = i\n                break\nif answer == 1 or answer == 0:\n    print(0)\nelse:\n    print(maxi-mini)", "s = input().rstrip()\nline = input().rstrip()\ni = 0\nil = 0\nwhile i != len(s) and il < len(line):\n    if s[i] == line[il]:\n        i += 1\n    il += 1\nx = il - 1\ni = len(s) - 1\nil = len(line) - 1\nwhile i >= 0 and il >= 0:\n    if s[i] == line[il]:\n        i -= 1\n    il -= 1\ny = il + 1\nif y - x > 0:\n    print(y - x)\nelse:\n    print(0)", "class word:\n    l, r = -1, -1\n\nleft_word = word()\nright_word = word()\n\nsubs = input()\ns = input()\n\npos = 0\nfor i in range(len(s)):\n    if s[i] == subs[pos]:\n        if pos == 0:\n            left_word.l = i\n        if pos == len(subs) - 1:\n            left_word.r = i\n            break\n        \n        pos += 1\n \npos = len(subs) - 1\nfor i in range(len(s) - 1, -1, -1):\n    if s[i] == subs[pos]:\n        if pos == len(subs) - 1:\n            right_word.r = i\n        if pos == 0:\n            right_word.l = i\n            break                        \n            \n        pos -= 1   \n        \nprint(max(0, right_word.l - left_word.r))\n\n", "name = input()\nline = input()\n\ni_name = 0\ni_line = 0\n\nwhile i_name < len(name) and i_line < len(line):\n    if name[i_name] == line[i_line]:\n        i_name += 1\n    i_line += 1\n\nj_name = len(name) - 1\nj_line = len(line) - 1\n\nwhile j_name >= 0 and j_line >= 0:\n    if name[j_name] == line[j_line]:\n        j_name -= 1\n    j_line -= 1\n\nif i_line <= j_line:\n    print(j_line - i_line + 2)\nelif i_line - 1 == j_line:\n    print(1)\nelse:\n    print(0)\n", "import sys\n\nt = sys.stdin.readline().strip()\ns = sys.stdin.readline().strip()\n\nt_pos = 0\nfirst = None\nfor i, c in enumerate(s):\n    if c == t[t_pos]:\n        t_pos += 1\n        if t_pos == len(t):\n            first = i\n            break\n\nt_pos = len(t) - 1\nlast = None\nfor i, c in reversed(list(enumerate(s))):\n    if c == t[t_pos]:\n        t_pos -= 1\n        if t_pos == -1:\n            last = i\n            break\n\nif first == None or last == None or first > last:\n    sys.stdout.write('0\\n')\nelse:\n    sys.stdout.write(str(last - first) + '\\n')\n", "name = input()\nstroka = input()\nlengthName = len(name)\nlengthStroka = len(stroka)\nindexFirst = 0\nindexLast = 0\nfor i in range(lengthName):\n    j = 0\n    while((j + indexFirst) != lengthStroka):\n        if stroka[j + indexFirst] == name[i]:\n            indexFirst = j + indexFirst + 1\n            break\n        j+= 1\ni = 0    \nstroka = stroka[::-1]\nname = name[::-1]\nfor i in range(lengthName):\n    j = 0\n    while((j + indexLast) != lengthStroka):\n        if stroka[j + indexLast] == name[i]:\n            indexLast = j + indexLast + 1\n            break\n        j+= 1\nif (lengthStroka - indexLast - indexFirst + 1)<0:\n    print(0)\nelse:\n    print(lengthStroka - indexLast - indexFirst + 1)\n", "import sys\n\ns = input()\nt = input()\n\nhas = True\n\nindex_old = -1\nfor i in list(s):\n    index = t.find(i, index_old+1)\n    has = index > index_old \n    index_old = index\n    if (not has):\n        print(0)\n        return\n\nleft = index_old + 1\nindex_old = len(t)\nfor i in s[::-1]:\n    index = t.rfind(i,left,index_old)\n    has = (index != -1 and index < index_old)\n    index_old = index\n    if (not has):\n        print(0)\n        return\n\nprint(index_old-left+1)\n", "s=input()\na=input()\nj=0\nv=0\nc=0\nflag=0\nif len(s)>len(a):\n    pass\nelse:\n    for i in range(len(s)):\n        k=s[i]\n        while j<len(a):\n            if a[j]==k:\n                flag+=1\n                if flag==len(s):\n                    c=j\n                    break\n                else:\n                    break\n            j+=1\n        j+=1\n    j=len(a)-1\n    flag=0\n    for i in range(len(s)-1,-1,-1):\n        k=s[i]\n        while j>c:\n            if a[j]==k:\n                flag+=1\n                if flag==len(s):\n                    v=j-c\n                    break\n                else:\n                    break\n            j-=1\n        j-=1\nprint(v)\n", "name = input()\ntext = input()\n\n\ndef fun():\n    first_end = len(text)\n    last_start = 0\n    current_index = 0\n    for i in range(len(text)):\n        if text[i] == name[current_index]:\n            current_index += 1\n            if current_index == len(name):\n                first_end = i\n                break\n    current_index = len(name) - 1\n    for i in range(len(text) - 1, first_end, -1):\n        if text[i] == name[current_index]:\n            current_index -= 1\n            if current_index == -1:\n                last_start = i\n                break\n    diff = last_start - first_end\n    if diff < 1:\n        print('0')\n    else:\n        print(diff)\n\n\nfun()\n", "__author__ = 'ruckus'\n\ns = input()\nt = input()\ninlines = []\nj = 0\nfor i in range(len(t)):\n    if t[i] == s[j]:\n        if j == 0:\n            inlines.append([i])\n        j += 1\n        if j >= len(s):\n            inlines[len(inlines)-1].append(i)\n            break\nj = len(s)-1\nfor i in range(len(t)-1, -1, -1):\n    if t[i] == s[j]:\n        if j == len(s)-1:\n            inlines.append([i])\n        j -= 1\n        if j < 0:\n            inlines[1].append(i)\n            break\nif len(inlines) < 2 or len(inlines[1]) < 2 or inlines[1][1]-inlines[0][1] < 0:\n    print(0)\nelse:\n    print(inlines[1][1]-inlines[0][1])", "name = input()\nphrase = input()\npos = []\nj = 0\nlen_name = len(name)\nlen_phrase = len(phrase)\ntest = False\nif len_name>=len_phrase:\n    print(0)\n    return\nfor n, i in enumerate(phrase):\n    if name[j] == i:\n        if not test:\n            pos.append([n])\n            test = True\n        j += 1\n        if j == len_name:\n            pos[-1].append(n)\n            test = False\n            break\n\nj = 0\n\nfor n, i in enumerate(phrase[::-1]):\n    if name[len_name-1-j] == i:\n        if not test:\n            pos.append([len_phrase-n-1])\n            test = True\n        j += 1\n        if j == len_name:\n            pos[-1].append(len_phrase-n-1)\n            test = False\n            break\n\nif pos[0][1] < pos[1][1]:\n    print(pos[1][1] - pos[0][1])\nelse:\n    print(0)", "s=input()\nt=input()\nif len(t)<=len(s):\n    print(0)\nelif len(s)==1:\n    p1=t.find(s)\n    p2=t.rfind(s)\n    if p2-p1==0:\n        print(0)\n    else:\n        print(p2-p1)\nelse:\n    p1=0    \n    for i in range(len(s)):\n        while s[i]!=t[p1]:\n            p1+=1\n        else:\n            p1+=1\n    p1-=1\n    p2=len(t)-1\n    for i in range(len(s)-1,-1,-1):\n        while s[i]!=t[p2]:\n            p2-=1\n        else:\n            p2-=1\n    p2+=1\n    if p2-p1<=0:\n        print(0)\n    else:\n        print(p2-p1)", "def go(s, t):\n    sb = None\n    si = 0\n    for i in range(len(t)):\n        if t[i] == s[si]:\n            si += 1\n            if si == 1:\n                sb = (i,)\n            if si == len(s):\n                sb += (i,)\n                return sb\n    return None\n\ns = input()\nt = input()\n\nsi = 0\nf = go(s, t)\ns = [x for x in reversed(s)]\nt = [x for x in reversed(t)]\nl = go(s, t)\n\nprint((len(t) - l[1] - 1) - f[1] if f and l and (len(t) - l[1] - 1) - f[1] > 0 else 0)", "s1 = input().rstrip()\ns2 = input().rstrip()\nlen1 = len(s1)\nlen2 = len(s2)\nl = 1\nr = 0\ngot = 0\nfor i in range(0,len2):\n    if s2[ i ] == s1[ got ] :\n        got = got + 1\n        if got == len1 :\n            l = i\n            break\ngot = len1 - 1\nfor j in range(0,len2):\n    i = len2 - j - 1\n    if s2[ i ] == s1[ got ] :\n        got = got - 1\n        if got < 0 :\n            r = i - 1\n            break\nif l <= r :\n    print( r - l + 1 )\nelse :\n    print( \"0\" )\n", "s1 = input()\ns2 = input()\nlen1 = len(s1)\nlen2 = len(s2)\nl = 1\nr = 0\ngot = 0\nfor i in range(0,len2):\n    if s2[ i ] == s1[ got ] :\n        got = got + 1\n        if got == len1 :\n            l = i\n            break\ngot = len1 - 1\nfor j in range(0,len2):\n    i = len2 - j - 1\n    if s2[ i ] == s1[ got ] :\n        got = got - 1\n        if got < 0 :\n            r = i - 1\n            break\nif l <= r :\n    print( r - l + 1 )\nelse :\n    print( \"0\" )\n", "def search_podstroki(t,s):\n    c1 = 0\n    for i in range(len(t)):\n        if (t[i] == s[0]):\n            s = s[1::]\n            if (len(s) == 0):\n                c1 = -1\n                return i+1\n    if (c1 == 0):\n        return -1\n            \n\n\n\n\n\n\n\ns = input()\nt = input()\ne = 0\nif (len(t) <= len(s)):\n    print('0')\nelse:\n    s1 = s\n    h = search_podstroki(t,s1)\n    s1 = s1[::-1]\n    t = t[::-1]\n    g = search_podstroki(t,s1)\n    if ((g == -1) or (h == -1)):\n        print('0')\n    else:\n        g = (len(t) - g) + 1\n        if (g < h):\n            print('0')\n        else:\n            print(g-h)", "#! /usr/bin/python3\n\n\n    \ndef solve():\n    s = input()\n    t = input()\n    \n    ls = len(s)\n    if s[ls - 1] == '\\n':\n        ls = ls - 1\n    lt = len(t)\n    if t[lt - 1] == '\\n':\n        lt = lt - 1\n    \n    #print(\"ls = \",ls,\" lt = \", lt)\n    i = 0\n    j = 0\n    pos = -1\n    while 1:\n        if s[i] == t[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            j = j + 1\n        \n        if i == ls:\n            pos = j\n        \n        if i == ls or j == lt:\n            break\n    \n    if pos == -1:\n        print(0)\n        return\n    i = ls - 1\n    j = lt - 1\n    reverse = -1\n    \n    while 1:\n        if s[i] == t[j]:\n            i = i - 1\n            j = j - 1\n        else:\n            j = j - 1\n        \n        if i == -1:\n            reverse = j\n        \n        if i == -1 or j == -1:\n            break\n    # print(\"pos = \",pos,\"  reverse = \", reverse)\n    reverse = reverse + 1\n    pos = pos - 1\n    if reverse == -1 or reverse < pos:\n        print(0)\n    else:\n        print(reverse - pos)\n        \nsolve()", "from functools import reduce\nfrom operator import *\nfrom math import *\nfrom sys import *\nfrom string import *\nfrom collections import *\nsetrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda: list(map(int,input().split()))\nRS=lambda: input().rstrip().split()\n#################################################\ndef findMatch(a,b):\n    i,j=0,0\n    while i<len(a) and j<len(b):\n        if a[i]==b[j]:\n            j+=1\n        i+=1\n    return i\ns=RS()[0]\nt=RS()[0]\nx=findMatch(t,s)\ny=len(t)-findMatch(t[::-1],s[::-1])\nprint( max(y-x+1, 0))\n\n\n\n\n", "t = input()\ns = input()\nl_t = len(t)\nl_s = len(s)\nx = 0\nf = l_s+1\nfor i in range(l_s):\n    if t[x] == s[i]: x += 1\n    if x == l_t:\n        f = i\n        break\nc = -1\ny = l_t-1\nfor i in range(l_s-1,-1,-1):\n    if t[y] == s[i]: y -= 1\n    if y == -1:\n        c = i\n        break\nif c - f <= 0: print(0)\nelse: print(c - f)\n\n", "name = input()\ns = input()\n\nname_len = len(name)\nl = -1\nr = len(s)\n\nindex = 0\nfor ch in s:\n    l += 1\n    if ch == name[index]:\n        index += 1\n    if index == name_len:\n        break\n\nindex = name_len - 1\nfor ch in s[::-1]:\n    r -= 1\n    if ch == name[index]:\n        index -= 1\n    if index == -1:\n        break\n\nif l < r:\n    print(r - l)\nelse:\n    print(0)", "t = input()\ns = input()\nl_t = len(t)\nl_s = len(s)\nx = 0\nf = l_s+1\nfor i in range(l_s):\n    if t[x] == s[i]: x += 1\n    if x == l_t:\n        f = i\n        break\nc = -1\ny = l_t-1\nfor i in range(l_s-1,-1,-1):\n    if t[y] == s[i]: y -= 1\n    if y == -1:\n        c = i\n        break\nif c - f <= 0: print(0)\nelse: print(c - f)\n", "s = input()\nt = input()\n\nposition_left = 0\nseen_left = 0\n\nwhile seen_left < len(s) and position_left < len(t):\n    if t[position_left] == s[seen_left]:\n        seen_left += 1\n    position_left += 1\n\nif seen_left < len(s):\n    print(0)\n    return\n\nposition_right = len(t) - 1\nseen_right = 0\n\nwhile seen_right < len(s) and position_right >= 0:\n    if t[position_right] == s[len(s) - seen_right - 1]:\n        seen_right += 1\n    position_right -= 1\n\nif position_left <= position_right:\n    print(position_right - position_left + 2)\nelse:\n    print(0)\n"]