["from sys import stdin, stdout\n\nk = int(stdin.readline())\nn, m = map(int, stdin.readline().split())\nleft, right, down, up = [], [], [], []\ncoordinates = []\n\nfor i in range(k):\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    \n    if x1 == x2:\n        if y1 < y2:\n            coordinates.append((x1, y1, x2, y2, i))\n        else:\n            coordinates.append((x2, y2, x1, y1, i))\n    else:\n        if x1 < x2:\n            coordinates.append((x1, y1, x2, y2, i))\n        else:\n            coordinates.append((x2, y2, x1, y1, i))\n    \n    left.append(coordinates[-1])\n    right.append(coordinates[-1])\n    up.append(coordinates[-1])\n    down.append(coordinates[-1])\n\nleft.sort(key = lambda x: (x[0], x[2]))\ndown.sort(key = lambda x: (x[1], x[3]))\n\nchallengers = [[], [], [], []]\ncntl, cntr, cntd, cntu = map(int, stdin.readline().split())\nlabel = 1\n\nif cntl or not cntl:\n    for i in range(cntl, -1, -1):\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n            challengers[0].append(left[i][-1])  \n        else:\n            break\n        \n    for i in range(cntl + 1, k):\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:\n            label = 0\n        \n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n            challengers[0].append(left[i][-1])  \n        else:\n            break\n\nif cntr or not cntr:\n    for i in range(k - 1 - cntr, k):\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n            challengers[1].append(left[i][-1])\n        else:\n            break\n    \n    for i in range(k - 2 - cntr, -1, -1):\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:\n            label = 0\n        \n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n            challengers[1].append(left[i][-1])\n        else:\n            break\n\n#!!!!!!!!!!!\n\nif cntd or not cntd:\n    for i in range(cntd, -1, -1):\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n            challengers[2].append(down[i][-1])\n        else:\n            break\n        \n    for i in range(cntd + 1, k):\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:\n            label = 0\n            \n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n            challengers[2].append(down[i][-1])  \n        else:\n            break\n        \nif cntu or not cntu:\n    for i in range(k - 1 - cntu, k):\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n            challengers[3].append(down[i][-1])\n        else:\n            break\n    \n    for i in range(k - 2 - cntu, -1, -1):\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:\n            label = 0\n        \n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n            challengers[3].append(down[i][-1])\n        else:\n            break\n\nans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])\n\nif not len(ans) or not label:\n    stdout.write('-1')\nelse:\n    stdout.write(str(list(ans)[0] + 1))", "#!/usr/bin/env python3\n\n\nd = int(input().strip())\n[n, m] = list(map(int, input().strip().split()))\nHxds = [0 for _ in range(n)]\nHyds = [0 for _ in range(m)]\nVxds = [0 for _ in range(n)]\nVyds = [0 for _ in range(m)]\nds = []\nfor i in range(d):\n\tx1, y1, x2, y2 = list(map(int, input().strip().split()))\n\tif x1 == x2:\n\t\tHxds[x1 - 1] += 1\n\t\tHyds[min(y1, y2) - 1] += 1\n\t\tds.append((x1 - 1, min(y1, y2) - 1, 'h'))\n\telse:\n\t\tVxds[min(x1, x2) - 1] += 1\n\t\tVyds[y1 - 1] += 1\n\t\tds.append((min(x1, x2) - 1, y1 - 1, 'v'))\ncl, cr, ct, cb = list(map(int, input().strip().split()))\n\nif (d - 1 - cl - cr) * (d - 1 - ct - cb) > 0:\n\tprint(-1)\n\treturn\n\n\ndef makeI(xs):\n\tI = [0 for _ in range(len(xs) + 1)]\n\tfor i in range(len(xs)):\n\t\tI[i + 1] = I[i] + xs[i]\n\treturn I\n\ndef find_x_Hor(IH, IV, l, cl, cr):\n\tif cl + cr > d - 1:\n\t\treturn -1\n\tx = 0\n\twhile x <= l and (IH[x] + IV[x] < cl or d - IH[x + 1] - IV[x] > cr):\n\t\tx += 1\n\tif x < l and IH[x] + IV[x] == cl and (d - IH[x + 1] - IV[x]) == cr:\n\t\treturn x\n\treturn -1\n\ndef find_x_Vert(IH, IV, l, cl, cr):\n\tif cl + cr < d - 1:\n\t\treturn -1\n\tx = 0\n\twhile x < l and (IH[x + 1] + IV[x + 1] < cl + 1 or d - IH[x + 1] - IV[x] > cr + 1):\n\t\tx += 1\n\tif x < l and IH[x + 1] + IV[x + 1] == cl + 1 and (d - IH[x + 1] - IV[x]) == cr + 1:\n\t\treturn x\n\treturn -1\n\t\n\nIHx = makeI(Hxds)\nIHy = makeI(Hyds)\nIVx = makeI(Vxds)\nIVy = makeI(Vyds)\n\nif ct + cb >= d - 1 and cr + cl <= d - 1:  # horizontal sofa\n\tx = find_x_Hor(IHx, IVx, n, cl, cr)\n\ty = find_x_Vert(IVy, IHy, m, ct, cb)\n\tif x >= 0 and y >= 0:\n\t\tif (x, y, 'h') in ds:\n\t\t\tprint(ds.index((x, y, 'h')) + 1)\n\t\t\treturn\n\nif ct + cb <= d - 1 and cr + cl >= d - 1:  # vertical sofa\n\tx = find_x_Vert(IHx, IVx, n, cl, cr)\n\ty = find_x_Hor(IVy, IHy, m, ct, cb)\n\tif x >= 0 and y >= 0:\n\t\tif (x, y, 'v') in ds:\n\t\t\tprint(ds.index((x, y, 'v')) + 1)\n\t\t\treturn\n\nprint(-1)\n\n", "from sys import stdin, stdout\n\n\n\nk = int(stdin.readline())\n\nn, m = list(map(int, stdin.readline().split()))\n\nleft, right, down, up = [], [], [], []\n\ncoordinates = []\n\n\n\nfor i in range(k):\n\n    x1, y1, x2, y2 = list(map(int, stdin.readline().split()))\n\n    \n\n    if x1 == x2:\n\n        if y1 < y2:\n\n            coordinates.append((x1, y1, x2, y2, i))\n\n        else:\n\n            coordinates.append((x2, y2, x1, y1, i))\n\n    else:\n\n        if x1 < x2:\n\n            coordinates.append((x1, y1, x2, y2, i))\n\n        else:\n\n            coordinates.append((x2, y2, x1, y1, i))\n\n    \n\n    left.append(coordinates[-1])\n\n    right.append(coordinates[-1])\n\n    up.append(coordinates[-1])\n\n    down.append(coordinates[-1])\n\n\n\nleft.sort(key = lambda x: (x[0], x[2]))\n\ndown.sort(key = lambda x: (x[1], x[3]))\n\n\n\nchallengers = [[], [], [], []]\n\ncntl, cntr, cntd, cntu = list(map(int, stdin.readline().split()))\n\nlabel = 1\n\n\n\nif cntl or not cntl:\n\n    for i in range(cntl, -1, -1):\n\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n\n            challengers[0].append(left[i][-1])  \n\n        else:\n\n            break\n\n        \n\n    for i in range(cntl + 1, k):\n\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:\n\n            label = 0\n\n        \n\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n\n            challengers[0].append(left[i][-1])  \n\n        else:\n\n            break\n\n\n\nif cntr or not cntr:\n\n    for i in range(k - 1 - cntr, k):\n\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n\n            challengers[1].append(left[i][-1])\n\n        else:\n\n            break\n\n    \n\n    for i in range(k - 2 - cntr, -1, -1):\n\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:\n\n            label = 0\n\n        \n\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n\n            challengers[1].append(left[i][-1])\n\n        else:\n\n            break\n\n\n\n#!!!!!!!!!!!\n\n\n\nif cntd or not cntd:\n\n    for i in range(cntd, -1, -1):\n\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n\n            challengers[2].append(down[i][-1])\n\n        else:\n\n            break\n\n        \n\n    for i in range(cntd + 1, k):\n\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:\n\n            label = 0\n\n            \n\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n\n            challengers[2].append(down[i][-1])  \n\n        else:\n\n            break\n\n        \n\nif cntu or not cntu:\n\n    for i in range(k - 1 - cntu, k):\n\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n\n            challengers[3].append(down[i][-1])\n\n        else:\n\n            break\n\n    \n\n    for i in range(k - 2 - cntu, -1, -1):\n\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:\n\n            label = 0\n\n        \n\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n\n            challengers[3].append(down[i][-1])\n\n        else:\n\n            break\n\n\n\nans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])\n\n\n\nif not len(ans) or not label:\n\n    stdout.write('-1')\n\nelse:\n\n    stdout.write(str(list(ans)[0] + 1))\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\ntry:\n    fin=open('in')\nexcept:\n    fin=sys.stdin\ninput=fin.readline\n\nd = int(input())\nn, m = map(int, input().split())\nx1, y1, x2, y2 = [], [], [], []\nT=[]\nfor _ in range(d):\n    u, v, w, x = map(int, input().split())\n    if u>w:u,w=w,u\n    if v>x:v,x=x,v\n    x1.append(u)\n    y1.append(v)\n    x2.append(-w)#the other direction pog?\n    y2.append(-x)\n    T.append([u,v,w,x])\n\nx1.sort()\nx2.sort()\ny1.sort()\ny2.sort()\n\nreq=list(map(int,input().split())) # x1,x2,y1,y2\nimport bisect\nfor i in range(len(T)):\n    # binary search\n    u,v,w,x=T[i]\n    if req[0]==bisect.bisect_left(x1,w)-(u!=w):\n        if req[1]==bisect.bisect_left(x2,-u)-(u!=w):\n            if req[2]==bisect.bisect_left(y1,x)-(v!=x):\n                if req[3]==bisect.bisect_left(y2,-v)-(v!=x):\n                    print(i+1)\n                    break\nelse:\n    print(-1)"]