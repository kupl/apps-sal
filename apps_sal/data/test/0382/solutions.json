["#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept ModuleNotFoundError:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, M, Q = getIntList()\n\ns1 = input()\ns2 = input()\n\ntot = 0\nzt = [0]\n\nfor i in range(N):\n    if s1[i:i+M] == s2:\n        tot+=1\n    zt.append(tot)\ndprint(zt)\nfor i in range(Q):\n    a,b = getIntList()\n    b0 = b- M+1\n    if b0<a:\n        print(0)\n    else:\n        print(zt[b0] - zt[a-1])\n\n\n\n\n\n\n\n", "n,m,q = list(map(int,input().split()))\ns = input()\nt = input()\nl = []\nr = []\nfor i in range(n-m+1):\n    if s[i:i+m] == t:\n        l.append(i)\n        r.append(i+m-1)\nfor i in range(q):\n    x,y = list(map(int,input().split()))\n    x-=1\n    y-=1\n    ans = 0\n    for j in range(len(l)):\n        if x <= l[j] and y >= r[j]:\n            ans+=1\n    print(ans)\n", "import re, bisect\n\nn, m, q = [int(v) for v in input().split()]\ns = input().strip()\nt = input().strip()\n\nstarts = [m.start() for m in re.finditer('(?=%s)' % t, s)]\n\nfor _ in range(q):\n    l, r = [int(v) for v in input().split()]\n    if r - l + 1 < len(t):\n        print(0)\n    else:\n        print(bisect.bisect_right(starts, r - len(t)) - bisect.bisect_left(starts, l - 1))\n", "n, m, q = [int(i) for i in input().split()]\ns = list(input())\nt = list(input())\nlt = len(t)\nls = len(s)\nstart = []\nfor i in range(ls - lt +1):\n    j = i\n    count = 0\n    while s[j] == t[count]:\n        j += 1\n        count += 1\n        if count >= lt:\n            break\n    if count == lt:\n        start.append(i + 1)\n\nstart += [n + 1]\nfor i in range(q):\n    l, r = [int(j) for j in input().split()]\n    r -= lt - 1\n    if l > r:\n        print(0)\n        continue\n    f = False\n    for j in range(len(start)):\n        if (f == False) and (start[j] >= l):\n            f = True\n            begin = j\n        if (f) and (start[j] > r):\n            end = j\n            break\n    print(end - begin)\n\n\n", "import sys\nimport io\n\nstream_enable = 0\n\ninpstream = \"\"\"\n15 2 3\nabacabadabacaba\nba\n1 15\n3 4\n2 14\n\"\"\"\n\nif stream_enable:\n    sys.stdin = io.StringIO(inpstream)\n    input()\n\ndef inpmap():\n    return list(map(int, input().split()))\n\nn, m, q = inpmap()\na = input()\nb = input()\ns = [0] * n\ns[0] = int(a.startswith(b))\nfor i in range(1, n):\n    s[i] = s[i - 1] + int(a[i:i+m] == b)\nfor i in range(q):\n    x, y = inpmap()\n    r = (s[y - m] if y - m >= 0 else 0) - (s[x - 2] if x - 2 >= 0 else 0)\n    print(max(r, 0))\n\n", "n,m,q=list(map(int,input().split()))\ns=str(input())\nt=str(input())\narrx=[]\ni=0\ncount=0\nwhile(i<n):\n    if(s[i]==t[0]):\n        j=0\n        while(j+i<n and j<m and s[j+i]==t[j]):\n            j+=1\n        if(j==len(t)):\n            count+=1\n    arrx.append(count)\n    i+=1\nfor i in range(q):\n    x,y=list(map(int,input().split()))\n    if(y-x<m-1):\n        print(0)\n    else:\n        if(x==1):\n            print(arrx[y-m])\n        else:\n            print(arrx[y-m]-arrx[x-2])\n", "from sys import stdin\nfrom math import *\n\nline = stdin.readline().rstrip().split()\nn = int(line[0])\nm = int(line[1])\nq = int(line[2])\n\ns = stdin.readline().rstrip().split()[0]\nt = stdin.readline().rstrip().split()[0]\n\nbools = [0] * (n - m + 1 + 1)\n\naccum = 0\nfor i in range(n - m, -1, -1):\n    if s[i:i+m] == t:\n        accum += 1\n    bools[i] = accum\n\nfor i in range(q):\n    numbers = list(map(int, stdin.readline().rstrip().split()))\n    l = numbers[0] - 1\n    r = numbers[1] - 1 - m + 1 + 1\n    if r > l:\n        print(bools[l] - bools[r])\n    else:\n        print(0)\n #suma = 0\n#    for j in range(l, r+1):\n#        if bools[j]:\n#            suma += 1\n\n\n", "n, m, q = list(map(int, input().split()))\ns = list(input())\nt = list(input())\na = [list(map(int, input().split())) for i in range(q)]\n\nif n < m:\n    for i in range(q):\n        print(0)\n    return\n\nres = [0] * (n - m + 1)\nfor i in range(n - m + 1):\n    if s[i:(i + m)] == t:\n        res[i] = 1\n\nfor u in range(q):\n    l = a[u][0]\n    r = a[u][1]\n\n    ans = 0\n    for y in range(l - 1, r - m + 1):\n        # print(y)\n        if res[y] == 1:\n            ans += 1\n\n    print(ans)", "n, m, q = map(int, input().split())\ns = input()\nt = input()\narr = []\nfor i in range(n - m + 1):\n    if s[i:i + m] == t:\n        arr.append(i)\nfor i in range(q):\n    l, r = map(int, input().split())\n    k = 0\n    for j in range(len(arr)):\n        if arr[j] >= l - 1 and arr[j] + m - 1<= r - 1:\n            k = k + 1\n    print(k)", "n, m, q = list(map(int, input().split()))\ns = input()\nt = input()\narr = [0] * n\nfor i in range(n - m + 1):\n    if t == s[i:i+m]:\n        arr[i] = 1\n    if i: arr[i] += arr[i - 1]\nfor i in range(q):\n    l, r = list(map(int, input().split()))\n    l -= 1\n    r -= 1\n    L = l - 1\n    R = r - m + 1\n    if R < L: \n        print(0)\n        continue\n    if L >= 0: \n        print(arr[R] - arr[L])\n    else:\n        print(arr[R])\n", "#list_int \u4e26\u3079\u3066\u51fa\u529b print (' '.join(map(str,ans_li)))\n#list_str \u4e26\u3079\u3066\u51fa\u529b print (' '.join(list))\n\n# 2\u9032\u6570 format(10, 'b') # '1010'\n\n''' \u4e8c\u6b21\u5143\u914d\u5217\u3092\u4e00\u5217\u305a\u3064\nfor i in ans:\n\tprint(*i)\n'''\n''' heapq\nqueue = []\nheapq.heapify(queue) #heapq\u306e\u4f5c\u6210\nheapq.heappush(queue,num) #num\u306epush(\u5024\u306e\u8ffd\u52a0)\npop = heapq.heappop(queue) #num\u306epop(\u6700\u5c0f\u5024\u306e\u51fa\u529b)\npop = heapq.heappushpop(queue,num) #push -> pop\n\n'''\n\nfrom collections import defaultdict\nimport sys,heapq,bisect,math,itertools,string,queue,datetime\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\nAtoZ = [chr(i) for i in range(65,65+26)]\natoz = [chr(i) for i in range(97,97+26)]\n\ndef inpl(): return list(map(int, input().split()))\ndef inpl_str(): return list(input().split())\n\nN,M,q = inpl()\nS = input()\nT = input()\nazu = [0]*(N-M+1)\nqq = []\n\nfor i in range(q):\n\tqq.append(inpl())\n\nif M > N:\n\tfor i in range(q):\n\t\tprint(0)\n\treturn\n\nfor i in range(0,N-M+1):\n\tif S[i:i+M] == T:\n\t\tazu[i] = 1\n\nSUM = 0\nnyan = [0]\nfor az in azu:\n\tSUM += az\n\tnyan.append(SUM)\n\n\nfor l,r in qq:\n\tl -= 1\n\tif r - l < M:\n\t\tprint(0)\n\telse:\n\t\tprint(nyan[r-M+1] - nyan[l])\n", "import sys\n\n\ndef main():\n    n, m, q = list(map(int, input().strip().split()))\n    s = input()\n    t = input()\n\n    pos = []\n    for i in range(len(s)):\n\n        if i + len(t) <= len(s) and s[i:i+len(t)] == t:\n            pos.append(1)\n        else:\n            pos.append(0)\n\n    sum = [0]\n    for i in range(len(pos)):\n        sum.append(sum[-1] + pos[i])\n\n    for _ in range(q):\n        l, r = list(map(int, input().strip().split()))\n        r = r - len(t) + 1\n        l -= 1\n\n        if l < r:\n            print(sum[r] - sum[l])\n        else:\n            print(0)\n\n    return 0\n\n\ndef test(i):\n    with open(\"test_{}.txt\".format(i)) as fin:\n        sys.stdin = fin\n        main()\n\n\ndef __starting_point():\n    # test(1)\n    # test(2)\n    return(main())\n\n__starting_point()", "n,m, q = list(map(int, input().split()))\ns = str(input())\nt = str(input())\n\ndef is_in(index):\n    if index + m > n:\n        return False\n    \n    for j in range(m):\n        if not t[j] == s[index + j]:\n            return False\n    return True\n        \nprecalc_ar_2 = [0 for  i in range(n  +1)]\nin_was = [ False for i in range(n)]\n\nfor i in range(n):\n    if is_in(i):\n        in_was[i] = True\n\n\nval = 0\nfor i in range(1, n + 1):\n    if in_was[i - 1]:\n        val +=1\n    precalc_ar_2[i] = val        \n\n\nfor i in range(q):\n    l, r = list(map(int,input().split()))\n    if r- m + 1 < 0 or r- m + 1 < l  - 1:\n        print(0)\n    else:\n        print(precalc_ar_2[r - m +1] - precalc_ar_2[l - 1])\n", "3\n\ndef calc(l, r, layers, li):\n    if r - l == 1:\n        return layers[li][l]\n\n    xl = l\n    if l % 2 == 1:\n        xl -= 1\n    xr = r\n    if r % 2 == 1:\n        xr += 1\n\n    ans = calc(xl // 2, xr // 2, layers, li + 1)\n    if xl != l:\n        ans -= layers[li][xl]\n    if xr != r:\n        ans -= layers[li][xr - 1]\n    return ans\n\n\ndef solve(N, M, Q, S, T, A):\n    base = [0] * N\n    i = 0\n    while True:\n        try:\n            i = S.index(T, i)\n            base[i] = 1\n            i += 1\n        except ValueError:\n            break\n\n    layers = [base]\n    while len(layers[-1]) > 1:\n        prev = layers[-1]\n        if len(prev) % 2 == 1:\n            prev.append(0)\n\n        layer = []\n        for i in range(len(prev) // 2):\n            layer.append(prev[2 * i] + prev[2 * i + 1])\n\n        layers.append(layer)\n\n    ans = []\n    for (l, r) in A:\n        l -= 1\n\n        r -= M - 1\n        if r <= l:\n            ans.append(0)\n            continue\n\n        ans.append(calc(l, r, layers, 0))\n\n    return ans\n\n\ndef main():\n    N, M, Q = [int(e) for e in input().split(' ')]\n    S = input()\n    T = input()\n    A = [map(int, input().split(' ')) for _ in range(Q)]\n\n    assert len(S) == N\n    assert len(T) == M\n\n    print(*solve(N, M, Q, S, T, A), sep='\\n')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nn,m,q=list(map(int,input().split()))\ns=input()\nt=input()\nA=[None]*q\nfor i in range(q):\n    A[i]=list(map(int,input().split()))\n\nif m>n:\n    for i in range(q):\n        print(0)\n\n    return\n\nscore=[0 for i in range(n-m+1)]\nfor i in range(n-m+1):\n    if t==s[i:i+m]:\n        score[i]=1\n\nSUM=[0 for i in range(n-m+1)]\nSUM[0]=score[0]\nfor i in range(1,n-m+1):\n    SUM[i]=score[i]+SUM[i-1]\n\n\nSUM=[0]+SUM\nfor i in range(q):\n    if A[i][1]-m+1<=A[i][0]-1:\n        print(0)\n    else:\n        print(SUM[A[i][1]-m+1]-SUM[A[i][0]-1])\n", "# from math import ceil\n#from sys import stdout\n\nt = 1#int(input())\nfor test in range(1,t+1):\n    n,m,q = list(map(int, input().split()))\n    s = input()\n    t = input()\n    indices = [0 for i in range(n)]\n    for i in range(n):\n        tmp = s.find(t, i)\n        if tmp==-1:\n            break\n        else:\n            indices[tmp] = 1\n    pref = [0]\n    for i in indices:\n        pref.append(i+pref[-1])\n    for i in range(q):\n        l,r = list(map(int, input().split()))\n        if r-l+1<m:\n            print(0)\n            continue\n        print(pref[r-m+1]-pref[l-1])\n\n        \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n", "n, m, q = list(map(int, input().split()))\na = input()\nb = input()\nc = [0]\nfor i in range(1, n + 1):\n    # print(a[max(i - m, 0):i])\n    c.append(c[i - 1] + (a[max(i - m, 0):i] == b))\n\n# print(c)\nfor i in range(q):\n    l, r = list(map(int, input().split()))\n    if r - l >= m - 1:\n        print(max(c[r] - c[l + m - 2], 0))\n    else:\n        print(0)\n", "def coun(s, t):\n    d = 0\n    for i in range(len(s) - len(t) + 1):\n        if s[i:i + len(t)] == t:\n            d += 1\n    return(d)\n\nn, m, q = list(map(int, input().split()))\ns = input()\nt = input()\nx = [0]\n\nfor j in range(n):\n    x.append(coun(s[:j + 1], t))\nfor i in range(q):\n    l, r = list(map(int, input().split()))\n    r += 1\n    if m <= r - l:\n        print(x[r - 1] - x[max(0, l + m - 2)])\n    else:\n        print(0)\n", "# n=int(input())\n# ns=[int(x) for x in input().split()]\n# dp=[None]*n\n# def greater(i,num):\n#     return ns[i]+ns[i+1]>=num\n# def biSearch(t,l,r):\n#     if r-l<=1:\n#         return l\n#     m=(l+r)//2\n#     if greater(m,t)\n#\n#\n# def update(t):\n#     l=ns[t]\nn,m,q=[int(x)for x in input().split()]\nsn=input()\nsm=input()\n\n\ndef eq(i):\n    for j in range(m):\n        if sn[i+j]!=sm[j]:\n            return False\n    return True\nre=[0]*n\nfor i in range(n-m+1):\n    if eq(i):\n        re[i]=1\nfor i in range(1,n):\n    re[i]+=re[i-1]\n\nfor i in range(q):\n    l,r=[int(x)-1 for x in input().split()]\n    if r-l+1<m:\n        print(0)\n        continue\n    if l==0:\n        print(re[r-m+1])\n    else:\n        print(re[r-m+1]-re[l-1])", "N,M,Q = [int(x) for x in input().split()]\nS = input() #length N\nT = input() #length M\nA = []\npref = []\nfor i in range(N):\n  A.append(0)\n  pref.append(0)\nfor i in range(N):\n  if S[i:i+M] == T:\n    A[i] = 1\n  if i > 0:\n    pref[i] = pref[i-1] + A[i]\n  else:\n    pref[i] = A[i]\nfor i in range(Q):\n  l,r = [int(x) for x in input().split()]\n  l -= 1\n  r -= 1\n  if r-l+1 >= M:\n    if r-M+1 >= 0:\n      if l-1>=0:\n        print(pref[r-M+1]-pref[l-1])\n      else:\n        print(pref[r-M+1])\n    else:\n      print(0)\n  else:\n    print(0)", "n,m,q=list(map(int,input().split()))\ns=input()\nt=input()\ntt=[0]*1111\nfor i in range(n-m+1):\n    j=0\n    while j<m and s[i+j]==t[j]: j+=1\n    if j>=m: tt[i+1]=1\nfor i in range(1,n+1): tt[i]+=tt[i-1]\nfor i in range(q):\n    a,b=list(map(int,input().split()))\n    if b-a+1<m:\n        print(0)\n        continue\n    print(tt[b-m+1]-tt[a-1])\n\n\n\n\n\n'''\n////////////////      //////        ///////      //             ///////     //  //   //\n////          //    ///   ///     ///    ///     //            ///  ///     ////     //\n////    ////       ///     ///   ///      ///    //           /////////     ////     ///////\n////     /////    ///       /// ///        ///   //          ///    ///     ////     //   //\n//////////////     ///////////   ///////////     //////     ///     ///     //  //   //   //\n'''\n\n", "'''input\n3 5 2\naaa\nbaaab\n1 3\n1 1\n'''\nfrom bisect import bisect_left, bisect_right\n\nn, m, q = list(map(int, input().split()))\ns, t = input(), input()\nx = []\nfor i in range(len(s) - len(t) + 1):\n\tif s[i:i+len(t)] == t:\n\t\tx.append(i)\nsx = set(x)\nfor _ in range(q):\n\tl, r = list(map(int, input().split()))\n\tif r - l + 1 < len(t):\n\t\tprint(0)\n\t\tcontinue\n\ti = bisect_right(x, l - 1)\n\tj = bisect_left(x, r - len(t))\n\tif l - 1 in sx:\n\t\ti -= 1\n\tif r - len(t) not in sx:\n\t\tj -= 1\n\tprint(j - i + 1)\n\n\n\n", "from bisect import bisect_left, bisect_right\n   \ndef main():\n    n, m, q = list(map(int, input().split(' ')))\n    s = input()\n    t = input()\n\n    ps = []\n    for i in range(n-m+1):\n        if t == s[i:i+m]:\n            ps.append(i)\n    \n    ans = []\n    for _ in range(q):\n        l, r = list(map(int, input().split(' ')))\n        l, r = l - 1, r - 1\n        i = bisect_left(ps, l)\n        j = bisect_right(ps, r - m + 1)\n        ans.append(max(j - i, 0))\n    for x in ans:\n        print(x)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\ndef mi():\n\treturn list(map(int, input().split()))\n\nn,m,q = mi()\ns = list(input())\nt = list(input())\npre1 = [0]*n\npre2 = [0]*n\nif n>=m:\n\tfor i in range(n-m+1):\n\t\tif (s[i:i+m]==t):\n\t\t\tpre1[i+m-1] = 1\n\t\t\tpre2[i] = 1\n\tfor i in range(1,n):\n\t\tpre1[i]+=pre1[i-1]\n\t\tpre2[i]+=pre2[i-1]\npre1.insert(0,0)\npre2.insert(0,0)\n\n\nwhile q:\n\tq-=1\n\tl,r = mi()\n\ts1, s2 = 0,0\n\t#for i in range(l, r+1):\n\t\t#s1+=pre1[i]\n\t\t#s2+=pre2[i]\n\tif m>n:\n\t\tprint(0)\n\t\tcontinue\n\tif r<m or r-l+1<m or n-l+1<m:\n\t\tprint(0)\n\t\tcontinue\n\ts1 = pre1[r]-pre1[l-1+m-1]\n\ts2 = pre2[r-m+1]-pre2[l-1]\n\tif s1>0 and s2>0:\n\t\tprint(min(s1,s2))\n\telse:\n\t\tprint(0)\n\t\n"]