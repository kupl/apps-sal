["import random\ndef S(L):\n    Ans=[]\n    s=0\n    for item in L:\n        s+=item\n        Ans.append(s)\n    return Ans\n\nn,k=map(int,input().split())\n\nB=list(map(int,input().split()))\n\n\n\nSums=[]\ns=0\nfor i in range(n):\n    s+=B[i]\n    Sums.append(s)\n\nif(k<=n):\n    for i in range(k):\n        print(i+1,end=\"\")\n        for j in range(i+1):\n            print(\" \"+str(B[j]),end=\"\")\n        print()\n\nelse:\n    Ans=[]\n    length=1\n    Taken={}\n    Sums=S(B)\n    while(len(Ans)<k):\n        if(length>n):\n            length=1\n            random.shuffle(B)\n            Sums=S(B)\n        for i in range(n):\n            if(i+length-1>=n):\n                break\n            x=Sums[i+length-1]-Sums[i]+B[i]\n            if(x in Taken):\n                continue\n            Taken[x]=True\n            L=[length]\n            done=True\n            for j in range(i,i+length):\n                if(B[j] in L[1:]):\n                    done=False\n                    break\n                L.append(B[j])\n            if(done):\n                Ans.append(list(L))\n        length+=1\n    for i in range(k):\n        item=Ans[i]\n        print(item[0],end=\"\")\n        for z in range(1,len(item)):\n            print(\" \"+str(item[z]),end=\"\")\n        print()\n\n            \n", "n, k = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\nt = [[i] for i in p]\nfor i in range(1, n):\n    t += [t[-1] + i for i in t[: n - i]]\nprint('\\n'.join(str(len(i)) + ' ' + ' '.join(map(str, i)) for i in t[: k]))", "n,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\nC=[]\nU=len(A)\nc=0\ng=0\nfor i in range(k):\n    print(len(C+[A[g]]),' '.join(map(str,C+[A[g]])))\n    g+=1\n    if g==len(A):\n        g=0\n        C.append(max(A))\n        A.remove(max(A))", "n, k = map(int, input().split())\np = list(map(int, input().split()))\np.sort()\nt = [[i] for i in p]\nfor i in range(1, n):\n    t += [t[-1] + i for i in t[: n - i]]\nprint('\\n'.join(str(len(i)) + ' ' + ' '.join(map(str, i)) for i in t[: k]))", "n, k = list(map(int, input().split()))\nsoldiers = list(map(int, input().split()))\ncount = 0\nseen = { 0: 0 }\nwhile count != k:\n\tfor beauty, bits in list(seen.items()):\n\t\tfor i, x in enumerate(soldiers):\n\t\t\tif (bits&(1 << i)) != 0 or beauty+x in seen:\n\t\t\t\tcontinue\n\t\t\tnew_bits = (bits|(1 << i))\n\t\t\tseen[beauty+x] = new_bits\n\t\t\t#print('%d + %d = %d' % (beauty, x, beauty+x))\n\t\t\tgroup = []\n\t\t\tfor j, y in enumerate(soldiers):\n\t\t\t\tif (new_bits&(1 << j)) != 0:\n\t\t\t\t\tgroup.append(y)\n\t\t\tprint(' '.join(map(str, [len(group)]+group)))\n\t\t\tcount += 1\n\t\t\tif count == k:\n\t\t\t\tbreak\n\t\tif count == k:\n\t\t\tbreak\n", "n, k = list(map(int, input().split()))\nsoldiers = list(map(int, input().split()))\ncount = 0\nseen = { 0: 0 }\nbeauties = [ 0 ]\nwhile count != k:\n\tfor beauty in beauties:\n\t\tbits = seen[beauty]\n\t\tfor i, x in enumerate(soldiers):\n\t\t\tif (bits&(1 << i)) != 0 or beauty+x in seen:\n\t\t\t\tcontinue\n\t\t\tnew_bits = (bits|(1 << i))\n\t\t\tseen[beauty+x] = new_bits\n\t\t\tbeauties.append(beauty+x)\n\t\t\tgroup = []\n\t\t\tfor j, y in enumerate(soldiers):\n\t\t\t\tif (new_bits&(1 << j)) != 0:\n\t\t\t\t\tgroup.append(y)\n\t\t\tprint(' '.join(map(str, [len(group)]+group)))\n\t\t\tcount += 1\n\t\t\tif count == k:\n\t\t\t\tbreak\n\t\tif count == k:\n\t\t\tbreak\n", "n,k = map(int,input().split())\na = list(map(int,input().split()))\na.sort()\ncnt = n\nwhile k:\n    for i in range(cnt):\n        print(n-cnt+1, a[i])\n        for j in range(cnt,n):\n            print (a[j])\n        k -= 1\n        if k==0:\n            break\n    cnt -= 1", "n, k = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\np.sort()\n\nt = [[i] for i in p]\n\nfor i in range(1, n):\n\n    t += [t[-1] + i for i in t[: n - i]]\n\nprint('\\n'.join(str(len(i)) + ' ' + ' '.join(map(str, i)) for i in t[: k]))\n\n\n\n# Made By Mostafa_Khaled\n", "n,k=map(int,input().split())\nl=[int(i) for i in input().split()]\nl.sort(reverse=True)\nelems=[]\nj=-1\ncnt=0 \nfor i in range(n):\n    if cnt==k:\n        break \n    j+=1 \n    fixed=l[0:j]\n    for z in range(j,n):\n        if cnt==k:\n            continue \n        print(j+1,*(fixed+[l[z]]))\n        cnt+=1 \n        if cnt==k:\n            break ", "import sys\ndef fastio():\n    from io import StringIO\n    from atexit import register\n    nonlocal input\n    sys.stdin = StringIO(sys.stdin.read())\n    input = lambda : sys.stdin.readline().rstrip('\\r\\n')\n    sys.stdout = StringIO()\n    register(lambda : sys.__stdout__.write(sys.stdout.getvalue()))\nfastio()\n\ndef debug(*var, sep = ' ', end = '\\n'):\n    print(*var, file=sys.stderr, end = end, sep = sep)\n\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\nn, k = I()\na = I()\na.sort(reverse = 1)\n\np = [0] * (n + 1)\nfor i in range(1, n + 1):\n    p[i] += p[i - 1] + a[i - 1]\n\ns = set()\nwindow = 1\nans = []\nwhile k and window <= n:\n    for i in range(window, n + 1):\n        print(window, *ans, a[i - 1])\n        k -= 1\n        if not k:\n            break\n    ans.append(a[window - 1])\n    window += 1", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort(reverse = True)\ncur_len, res = 1, []\nwhile k > 0 and cur_len <= n:\n    for i in range(cur_len, n+1):\n        print(cur_len, *res, a[i-1])\n        k -= 1\n        if k == 0: break\n    res.append(a[cur_len-1])\n    cur_len += 1\n", "from sys import stdin\n\n\ndef arr_inp(n):\n    if n == 1:\n        return [int(x) for x in stdin.readline().split()]\n    elif n == 2:\n        return [float(x) for x in stdin.readline().split()]\n    else:\n        return list(stdin.readline()[:-1])\n\n\nn, k = arr_inp(1)\nc = sorted(arr_inp(1))[::-1]\n\nfor i in range(min(n, k)):\n    print(1, c[i])\n    k -= 1\n\ntem = []\nfor i in range(min(n - 1, k)):\n    tem.append(c[i])\n    for j in range(n - 1, i, -1):\n        print(i + 2, end=' ')\n        print(*(tem + [c[j]]))\n        k -= 1\n        if not k:\n           return\n\n", "#------------------------template--------------------------#\nimport os\nimport sys\nfrom math import *\nfrom collections import *\nfrom fractions import *\nfrom bisect import *\nfrom heapq import*\nfrom io import BytesIO, IOBase\ndef vsInput():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nALPHA='abcdefghijklmnopqrstuvwxyz'\nM=10**9+7\nEPS=1e-6\ndef value():return tuple(map(int,input().split()))\ndef array():return [int(i) for i in input().split()]\ndef Int():return int(input())\ndef Str():return input()\ndef arrayS():return [i for i in input().split()]\n\n\n#-------------------------code---------------------------#\n# vsInput()\n\nn,k=value()\na=sorted(array())\n\nma=set()\nsetNo=1\n\nwhile(True):\n\n    t=ma\n    for i in a:\n        if(k<setNo):return\n\n        if(i not in t):\n            print(len(ma)+1,*ma,i)\n            setNo+=1\n    key=-1\n    for i in a:\n        if(i not in ma):\n            key=max(key,i)\n    ma.add(key)\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                \n\n    \n\n\n\n\n\n\n\n\n\n    \n"]