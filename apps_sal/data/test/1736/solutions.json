["\nl = 0\nr = -1\nsegL, time = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nsegSum = 0\nsegments = []\n\n##while r < segL-1:\t\n##    r += 1\n##    segSum += a[r]\n##    if segSum == time:\n##        segments.append(r+1-l)\n##    elif segSum > time:\n##        segments.append(r-l)\n##        while segSum > time or l < r:\n##            # Shifting l to the right\n##            # until reaching next suitable segment sum\n##            segSum -= a[l]\n##            l += 1\n##        #segments.append(r+1-l)\n##\n##[1,2,5,3,7,4,5]\n\nwhile r < segL-1:\n    r += 1\n    segSum += a[r]\n    if segSum == time:\n        segments.append(r+1-l)\n        segSum -= a[l]\n        l += 1\n    elif segSum > time:\n        segments.append(r-l)\n        while segSum >= time:\n            segSum -= a[l]\n            l += 1\nelse:\n    segments.append(r+1-l)\n\nprint(max(segments))\n", "3\n\nn, t = tuple(map(int, input().split()))\na = list(map(int, input().split()))\ns = 0\nans = 0\ni = 0\nfor j in range(n):\n    s += a[j]\n    while s > t:\n        s -= a[i]\n        i += 1\n    ans = max(ans, j - i + 1)\nprint(ans)\n", "import sys\nf = sys.stdin\n# f = open(\"input.txt\", \"r\")\nn, t = map(int, f.readline().split())\na = [int(i) for i in f.readline().strip().split()]\ns = 0\nres = 0\nleft, right = 0, 0\nwhile left < n:\n    while right < n and s+a[right] <= t:\n        s += a[right]\n        right += 1\n    res = max(res, right-left)\n    s -= a[left]\n    left += 1\nprint(res)", "n, t = [int(x) for x in input().split()]\n\nminutes = [int(x) for x in input().split()]\n\ns = 0\nresult = 0\n\nleft = 0\nright = 0\n\nwhile left < n:\n    while right < n and s + minutes[right] <= t:\n        s += minutes[right]\n        right += 1\n    result = max(result, right - left)\n    s -= minutes[left]\n    left += 1\n\nprint(\"%d\" % result)\n", "n, k = map(int, input().split())\nt = [0] + list(map(int, input().split())) + [k + 1]\nfor i in range(2, len(t)):\n    t[i] += t[i - 1]\ni, j, s = 0, 1, 0\nn += 2\nwhile j < n:\n    while j < n and t[j] <= k + t[i]: j += 1\n    i += 1\n    s = max(s, j - i)\nprint(s)", "def read_books(start_index, time, books):\n    remaining = time\n    current_index = start_index\n    books_read = 0\n    while True:\n        # If we ran out of books\n        if current_index == len(books):\n            return (books_read, remaining, current_index)\n        \n        if remaining >= books[current_index]:\n            books_read += 1\n            remaining -= books[current_index]\n            current_index += 1\n        else:\n            return (books_read, remaining, current_index)\n        \n\ndef max_books(time, books):\n    nbooks = [-1]*len(books)\n    \n    # Compute if we started with the first book\n    nbooks[0] = read_books(0, time, books)\n\n    # compute if we start from the next index\n    for i in range(1, len(books)):\n        # read what you read previously without the previous book\n        min_books = nbooks[i-1][0] - 1\n        max_remaining = nbooks[i-1][1] + books[i-1]\n        \n        # Try to read some more\n        extra = read_books(nbooks[i-1][2], max_remaining, books)\n\n        # compute the total\n        nbooks[i] = (min_books + extra[0], extra[1], extra[2])\n        \n    return max(nbooks)[0]\n\nfl = input().split()\nt = int(fl[1])\nbooks = [int(item) for item in input().split()]\n\nprint((max_books(t, books\n)))\n", "n,t=list(map(int,input().split()))\n\nA=list(map(int,input().split()))\n\n\nans=0\n\n\nind=0\nbest=0\nfor i in range(n):\n    if(i>=ind):\n        ind=i\n        ans=0\n    while(ind < n and t>=A[ind]):\n        ans+=1\n        t-=A[ind]\n        ind+=1\n    if(ans>best):\n        best=ans\n    if(ind==n):\n        break\n    if(ind!=i):\n        t+=A[i]\n        ans-=1\nprint(best)\n    \n", "n, t = map(int,input().split())\na = list(map(int,input().split()))\nj = ans = sumition = 0\nfor i in range(n):\n    sumition += a[i]\n    while sumition > t:\n        sumition -= a[j]\n        j += 1\n    ans = max(ans, i - j + 1)\nprint(ans)", "inp1,inp2 = [int(i) for i in input().split(\" \")],[int(i) for i in input().split(\" \")]\nmax = right = result = 0\nl = len(inp2)\nfor i in range(0,l):\n    if max < len(inp2):\n        while right < l and result + inp2[right] <= inp1[1]:\n            result+=inp2[right]\n            right+=1\n        if max < right - i:\n            max = right - i\n        result-= inp2[i]\n    else:\n        print(max)\n        return\nprint(max)", "n, t = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nr = 0\ns = 0\nres = 0\nfor i in range(n):\n\tif i:\n\t\ts -= a[i - 1]\n\twhile r < n and s + a[r] <= t:\n\t\ts += a[r]\n\t\tr += 1\n\tres = max(res, r - i)\n\tr = max(i, r)\nprint(res)\n", "def main():\n    n, t = map(int, input().split())\n    l = list(map(int, input().split()))\n    start = stop = 0\n    res = []\n    try:\n        while True:\n            while t >= 0:\n                res.append(stop - start)\n                if stop == n:\n                    raise StopIteration\n                t -= l[stop]\n                stop += 1\n            while t < 0:\n                t += l[start]\n                start += 1\n    except StopIteration:\n        print(max(res))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n, t = map(int, input().split())\n    l = list(map(int, input().split()))\n    start, res = 0, []\n    for stop, a in enumerate(l):\n        t -= a\n        while t < 0:\n            t += l[start]\n            start += 1\n        res.append(stop - start)\n    print(max(res) + 1)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# coding: utf-8\nn, t = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nstart = 0\nend = 0\nsumtime = 0\nans = 0\nfor i in range(n):\n    sumtime += a[i]\n    end = i+1\n    while start<end and sumtime > t:\n        sumtime -= a[start]\n        start += 1\n    if end-start > ans:\n        ans = end-start\nprint(ans)\n", "import sys\nimport math\n\nan = []\n\ndef binary_s(st, key, z, ll):\n    l = st\n    r = ll\n    while(l < r - 1):\n        m = (l + r) // 2\n        if(an[m] - z <= key):\n            l = m\n        else:\n            r = m\n\n    return r - st;\n\nn, t = list(map(int, input().split()))\n\ns = 0\nfor i in input().split():\n    intt = int(i)\n    an.append(s + intt)\n    s += intt\n\nres = 0\nz = 0\nfor i in range(n):\n    p = binary_s(i, t, z, n);\n\n\n    if(p > res and an[i + p - 1] - z <= t):\n        res = p\n\n    z = an[i]\nprint(res)", "n, t = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\ns, r = 0, 0\nfor l in range(n):\n    while (r < n) and (s + a[r] <= t):\n        s += a[r]        \n        r += 1\n    ans = max(ans, r - l)\n    s -= a[l]\nprint (ans)", "n, t = map(int, input().split())\nc = list(map(int, input().split()))\nu, s, z = 0, 0, 0\nfor v in range(n):\n    s += c[v]\n    while s > t:\n        s -= c[u]\n        u += 1\n    z = max(z, v-u+1)\nprint(z)", "n, t = map(int, input().split())\nc = list(map(int, input().split()))\nfor i in range(1, n):\n    c[i] += c[i-1]\nx, y = -1, 0\nm = 0\nwhile y < n:\n    if x == -1:\n        if c[y] <= t:\n            m = max(m, y + 1)\n            y += 1\n        else:\n            x += 1\n    elif c[y] - c[x] <= t:\n        m = max(m, y - x)\n        y += 1\n    else:\n        x += 1\nprint(m)", "n, t = list(map(int, input().split()))\ntlist = [int(t) for t in input().split()]\nmaxcount = 0\ntime = 0\ni = 0\nj = 0\ncount = 1\nwhile j != n:\n    if time + tlist[j] <= t:\n        time += tlist[j]\n        if maxcount < count:\n            maxcount = count\n        j += 1\n        count += 1\n    else:\n        time -= tlist[i]\n        i += 1\n        count -= 1\n\nprint(maxcount)\n\n# \u0412\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u0430 - 2n\n", "inputs = [int(x) for x in input().split()]\n\nmins = inputs[1]\nbook_times = [int(x) for x in input().split()]\n\ncurrent_max = -1\ncurrent_time = 0\nstart_idx = 0\nend_idx = -1\n\nfor i in range(len(book_times)):\n    t = book_times[i]\n    \n#     print(str(start_idx) + ' ' + str(end_idx))\n    \n    if t + current_time > mins:\n        \n        #Keep bumping start pointer till we fit  \n        current_max = end_idx - start_idx if end_idx - start_idx > current_max else current_max\n                \n        while start_idx <= end_idx and t + current_time > mins:\n            current_time -= book_times[start_idx]\n            start_idx += 1\n            \n        \n    if t + current_time <= mins:\n        current_time += t\n    else:\n        current_time = 0\n        start_idx = i + 1\n    \n    end_idx = i\n    \n#     print(str(start_idx) + ' ' + str(end_idx))\n#     print(str(current_max + 1) + ' current time:' + str(current_time) ) \n#     print(' ')   \n\ncurrent_max = end_idx - start_idx if end_idx - start_idx > current_max else current_max\n\nprint(current_max + 1)            \n            \n        \n", "__author__ = \"runekri3\"\n\nn, t = list(map(int, input().split()))\ntimes = list(map(int, input().split()))\n\nmax_books = 0\nmax_books_changed = 0\n# last_time = 0\nmin_time = 0\nfor i in range(n):\n    first_book_time = times[i]\n    # last_book_time = times[i+max_books]\n    try:\n        min_time += times[i + max_books]\n    except IndexError:\n        break\n    # if max_books_changed:\n    #     min_time += sum(times[i + max_books - max_books_changed:i + max_books + 1])\n    # else:\n    #     min_time += times[i + max_books]\n    if min_time <= t:\n        max_books_changed = 1\n        while 1:\n            try:\n                temp_min_time = min_time + times[i + max_books + max_books_changed]\n            except IndexError:\n                break\n            if temp_min_time <= t:\n                min_time = temp_min_time\n                max_books_changed += 1\n            else:\n                min_time = temp_min_time\n                break\n        max_books += max_books_changed\n        pass  # Check if max_books can be increased more\n    min_time -= first_book_time\n\nprint(max_books)\n", "\n\nn,t=list(map(int,input().split()))\n\nli=list(map(int,input().split()))\n\nad =0\nun =0\nmx =0\n\nfor i in range(n):\n\n    ad+=li[i]\n\n    if ad>t:\n\n        ad-=li[un]\n\n        un+=1\n\n    mx=max(mx,i-un+1)\n\n\n\nprint (mx)     \n\n    \n", "n, t = list(map(int, input().split()))\nl = list(map(int, input().split()))\nstart, res = 0, []\nfor stop, a in enumerate(l):\n    t -= a\n    while t < 0:\n        t += l[start]\n        start += 1\n    res.append(stop - start)\nprint(max(res) + 1)\n", "n, t = map(int, input().split())\ntimes = list(map(int, input().split())) + [0]\nfor i in range(1, n):\n    times[i] += times[i - 1]\nl = 0\nr = n + 1\nwhile l + 1 < r:\n    label = False\n    m = (r + l) // 2\n    for i in range(m - 1, n):\n        if times[i] - times[i - m] <= t:\n            label = True\n            break\n    if label:\n        l = m\n    else:\n        r = m\nprint(l)", "n,t = list(map(int,input().split()))\nA = list(map(int, input().split()))\nd = 0\nf = 1\ns = A[0]\nr = 0 + (s <= t)\nwhile f < n:\n    while s <= t and f < n:\n        s += A[f]\n        f += 1\n    r = max(r,f-d-(s>t))\n    if f == n:\n        break\n    while s > t:\n        s -= A[d]\n        d += 1\nprint(r)\n", "n,t=map(int,input().split())\nl=list(map(int,input().split()))\nma=j=k=kt=0\nfor i in range(n):\n    if l[i]+kt<=t:\n        k+=1\n        kt+=l[i]\n        if ma<k: ma=k\n    else:\n        while l[i]+kt>t:\n            if k==0: j=i+1; break\n            kt-=l[j]\n            k-=1\n            j+=1\n        if kt+l[i]<=t:\n            k+=1\n            kt+=l[i]\n            if ma<k: ma=k\nprint(ma)"]