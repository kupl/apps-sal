["n = int(input())\nf = [int(x) - 1 for x in input().split()]\np = [-1] * n\ng = [0] * n\nh = [0] * n\nm = 0\nfor i in range(n):\n    if f[i] == i:\n        p[i] = m\n        h[m] = i + 1\n        m += 1\n\nh = h[:m]\n\nfor i in range(n):\n    if p[f[i]] == -1:\n        print(-1)\n        return\n    g[i] = p[f[i]] + 1\n\nprint(m)\nprint(\" \".join([str(x) for x in g]))\nprint(\" \".join([str(x) for x in h]))\n\n", "def main():\n\tn = int(input())\n\tar = []\n\tfi_values = map(int, input().strip().split())\n\tgroups = dict()\n\tfor i, fi in enumerate(fi_values):\n\t\tif fi not in groups:\n\t\t\tgroups[fi] = []\n\t\tgroups[fi].append(i+1)\n\n\tg = [0] * n\n\th = []\n\tfor k, v in groups.items():\n\t\tif k not in v:\n\t\t\tprint(-1)\n\t\t\treturn\n\n\t\telse:\n\t\t\th.append(k)\n\t\t\tfor i in v:\n\t\t\t\tg[i-1] = len(h)\n\n\tprint(len(h))\n\tprint(\" \".join(map(str, g)))\n\tprint(\" \".join(map(str, h)))\n\nmain()", "import sys\n\nn = int(input())\n\nf = [int(x) for x in input().split(' ')]\n\nimage = set()\n\nh = []\n\nfor i, x in enumerate(f):\n\tif x not in image:\n\t\timage.add(x)\n\t\th.append(x)\n\ninv_h = [None for _ in range(n+1)]\n\nfor i, x in enumerate(h, 1):\n\tinv_h[x] = i\n\nfor val in h:\n\tif f[val-1] != val:\n\t\tprint(-1)\n\t\treturn\n\nprint(len(h))\n\ng = [None for _ in range(n)]\n\nfor i in range(n):\n\tg[i] = inv_h[f[i]]\n\nfor x in g:\n\tprint(x, end=' ')\nprint('')\n\nfor x in h:\n\tprint(x, end=' ')\nprint('')\n\n\n\n\n", "n = int(input())\nf = [None] + list(map(int, input().split(' ')))\ninvalid = False\n\ng = [None] + [0] * n\nh = [None]\nx_is_f_which = [None] + [0] * n\nm = 0\nvis = [None] + [False] * n\n\nfor i in range(1, n + 1):\n    x = f[i]\n    if f[x] != x:\n        invalid = True\n        break\n    if not vis[x]:\n        vis[x] = True\n        m = m + 1\n        h.append(x)\n        x_is_f_which[x] = m\n\nif invalid:\n    print('-1')\nelse:\n    for i in range(1, n + 1):\n        g[i] = x_is_f_which[f[i]]\n    print(m)\n    def print_list(l):\n        print(' '.join(list(map(str, l[1:]))))\n    print_list(g)\n    print_list(h)\n\n", "n = int(input())\nline = list(map(int, input().split()))\nh = []\nsets = set()\nmm = dict()\nout = False\nfor i in range(len(line)):\n    element = line[i]\n    if line[element - 1] != element:\n        print(-1)\n        out = True\n        break\n    else:\n        if element not in sets:\n            h += [element]\n            mm[element] = len(h) - 1\n            sets.add(element)\nif not out:\n    g = []\n    for i in range(n):\n        element = line[i]\n        index = mm[element]\n        g += [index + 1]\n    if not out:\n        print(len(h))\n        print(\" \".join(map(str, g)))\n        print(\" \".join(map(str, h)))\n", "import sys\nfrom collections import defaultdict\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    n = int(input())\n    f = [int(i) for i in input().split()]\n    inv = defaultdict(set)\n\n    for i, y in enumerate(f, start=1):\n        inv[y].add(i)\n\n    # debug(inv, locals())\n    m = len(inv)\n    g = [0] * (n + 1)\n    h = [0] * (m + 1)\n\n    for i, x in enumerate(inv, start=1):\n        if x not in inv[x]:\n            print(-1)\n            return\n\n        for a in inv[x]:\n            g[a] = i\n\n        h[i] = x\n\n    print(m)\n    print(*g[1:])\n    print(*h[1:])\n\ndef __starting_point():\n    solve()\n__starting_point()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n = II()\n    a = list([x-1 for x in LI()])\n    g = [-1] * n\n    h = list(set(a))\n    l = len(h)\n    d = {}\n    for i in range(l):\n        hi = h[i]\n        g[hi] = i\n    for i in range(n):\n        if g[i] == -1:\n            g[i] = g[a[i]]\n        elif g[i] != g[a[i]]:\n            return -1\n    print(l)\n    print(' '.join([str(x+1) for x in g]))\n    return ' '.join([str(x+1) for x in h])\n\n\nprint(main())\n", "import bisect\n\nn = int(input())\nf = [0] + list(map(int, input().split()))\npossible = True\nfor x in range(1, n + 1):\n    if f[f[x]] != f[x]:\n        possible = False\n        break\nif possible:\n    h = sorted(set(f))\n    g = [0]\n    for x in range(1, n+1):\n        # g.append(h.index(f[x]))\n        g.append(bisect.bisect_left(h, f[x]))\n    print(len(h) - 1)\n    print(*g[1:])\n    print(*h[1:])\nelse:\n    print(-1)\n", "n = int(input())\nf = [0] + list(map(int, input().split()))\n\nvis = set()\nsame = set()\nfor i in range(1, n+1):\n    vis.add(f[i])\n    if f[i] == i:\n        same.add(f[i])\nif len(vis) > len(same):\n    print(-1)\n    quit()\n\nm = len(same)\nsame = [0] + list(same)\ng = [0 for i in range(n+1)]\nh = [0 for i in range(m+1)]\nfor i in range(1, m+1):\n    h[i] = same[i]\n    g[same[i]] = i\nfor i in range(1, n+1):\n    g[i] = g[f[i]]\n\nprint(m)\nprint(*g[1:], sep=' ')\nprint(*h[1:], sep=' ')", "n = int(input())\na = list(map(int, input().split()))\ni = 0\nh = dict()\ng = []\nfor x in a:\n    cur = x\n    if a[cur - 1] != cur:\n        print(\"-1\")\n        quit()\n    if not h.__contains__(cur):\n        h[cur] = len(g)\n        g.append(cur)\nprint(len(g))\nfor x in a:\n    print(h[x] + 1, end=\" \")\nprint()\nfor x in g:\n    print(x, end=\" \")\n", "a = int(input())\nb = list(map(int,input().split()))\ncount = 1\ns = set()\nd = list()\nf = dict()\nsuc = list()\nsucc = True\nfor i in b:\n    if i in f:\n        d.append(f[i])\n    else:\n        f[i] = count\n        suc.append(i)\n        d.append(count)\n        count+=1\nfor i in range(len(suc)):\n    if d[suc[i]-1] != i+1:\n        print(-1)\n        return\nprint(count-1)\nprint(*d)\nprint(*suc)", "n = int(input())\nf = [y for y in map(int, input().split())]\n\nim_f = list(set(f))\nok = True\nfor y in im_f:\n    index = y - 1\n    ok &= f[index] == y\n\nif ok:\n    m = len(im_f)\n    ind = {}\n    for i, y in enumerate(im_f):\n        ind[y] = i + 1\n    print(m)\n    values = []\n    for y in f:\n        values.append(ind[y])\n    print(' '.join(map(str, values)))\n    print(' '.join(map(str, im_f)))\n\nelse:\n    print(-1)\n\n\n\n", "n = int(input())\nf = [int(x) - 1 for x in input().split()]\np = [-1] * n\ng = [0] * n\nh = [0] * n\nm = 0\nfor i in range(n):\n    if f[i] == i:\n        p[i] = m\n        h[m] = i + 1\n        m += 1\n\nh = h[:m]\n\nfor i in range(n):\n    if p[f[i]] == -1:\n        print(-1)\n        return\n    g[i] = p[f[i]] + 1\n\nprint(m)\nprint(\" \".join([str(x) for x in g]))\nprint(\" \".join([str(x) for x in h]))", "n = int(input())\nf = [y for y in map(int, input().split())]\n\nim_f = list(set(f))\nflag = True\nfor y in im_f:\n    index = y - 1\n    flag &= f[index] == y\n\nif flag:\n    m = len(im_f)\n    ind = {}\n    for i, y in enumerate(im_f):\n        ind[y] = i + 1\n    print(m)\n    values = []\n    for y in f:\n        values.append(ind[y])\n    print(' '.join(map(str, values)))\n    print(' '.join(map(str, im_f)))\n\nelse:\n    print(-1)", "import sys\n\nn = int(input())\ns = input().split()\na = [int(i) for i in s]\na.insert(0,0)\n\nhash = [0 for i in range(n+1)]\ng = [0 for i in range(n+1)]\nh = [0 for i in range(n+1)]\nindex = 1\n\nfor i in range(1, n+1):\n\tif hash[a[i]] == 0:\n\t\tif index>n:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\thash[a[i]]=index\n\t\tg[i] = index\n\t\th[index] = a[i]\n\t\tindex+=1\n\telse:\n\t\tg[i] = hash[a[i]]\n\t\t\nfor i in range(1,index):\n\tif g[h[i]]!=i:\n\t\tprint(-1)\n\t\treturn\n\nprint(index-1)\nprint(' '.join([str(i) for i in g[1:n+1]]))\nprint(' '.join([str(i) for i in h[1:index]]))", "n = int(input())\nf = [-1] + list(map(int, input().split()))\ng = [-1]*(n+1)\nh = [-1]\nc = 1\nfor i in range(1, n+1):\n\tif(f[i] == i):\n\t\tg[i] = c\n\t\th += [i]\n\t\tc += 1\n\nhinv = {}\nm = len(h)-1\nfor i in range(1, m+1):\n\thinv[h[i]] = i\n\nfor i in range(1, n+1):\n\tif(g[i] == -1):\n\t\ttry:\n\t\t\tg[i] = hinv[f[i]]\n\t\texcept:\n\t\t\tprint(-1)\n\t\t\treturn\nprint(m)\nprint(*g[1:])\nprint(*h[1:])", "n = int(input())\nf = [-1] + list(map(int, input().split()))\ng = [-1]*(n+1)\nh = [-1]\nc = 1\nfor i in range(1, n+1):\n\tif(f[i] == i):\n\t\tg[i] = c\n\t\th += [i]\n\t\tc += 1\n\nhinv = {}\nm = len(h)-1\nfor i in range(1, m+1):\n\thinv[h[i]] = i\n\nfor i in range(1, n+1):\n\tif(g[i] == -1):\n\t\ttry:\n\t\t\tg[i] = hinv[f[i]]\n\t\texcept:\n\t\t\tprint(-1)\n\t\t\treturn\nprint(m)\nprint(*g[1:])\nprint(*h[1:])", "n = int(input())\nf = list(map(int, input().split()))\nh = []\nind_h = [-1] * (n + 1)\ng = [0] * n\noccs = {}\nfor i in range(len(f)):\n    if f[i] not in occs:\n        occs[f[i]] = {i + 1}\n        h.append(f[i])\n        ind_h[f[i]] = len(h) - 1\n        g[i] = len(h)\n    else:\n        g[i] = ind_h[f[i]] + 1\n        occs[f[i]].add(i + 1)\nfor k in occs:\n    if k not in occs[k]:\n        print(-1)\n        return\nprint(len(h))\nprint(*g)\nprint(*h)\n", "n = int(input())\nf = list(map(int,input().split()))\nh={}\ng=[]\nfor i in f:\n    if f[i-1]!=i:\n        print(-1)\n        return\n    elif i not in h:\n        h[i]=len(g)\n        g.append(i)\nprint(len(g))\nfor i in f:\n    print(h[i]+1,end=' ')\nprint()\nprint(*g)\n", "n = int(input())\nl = list(map(int,input().split()))\na = [0]*n\nb = []\nc = []\nptr = 1\nfor i in range(n):\n    if(a[l[i]-1]==0):\n        c.append(l[i])\n        a[l[i] - 1]= ptr\n        ptr+=1\n    b.append(a[l[i] - 1])\nfor i in range(n):\n    if(c[b[i]-1]!=l[i]):\n        print(-1)\n        return\nfor i in range(ptr-1):\n    if(b[c[i]-1]-1!=i):\n        print(-1)\n        return\n\n\nprint(ptr-1)\nfor i in b: print(i,end = \" \")\nprint()\nfor i in c:print(i,end = \" \")", "n = int(input())\nl = list(map(int,input().split()))\na = [0]*n\nb = []\nc = []\nptr = 1\nfor i in range(n):\n    if(a[l[i]-1]==0):\n        c.append(l[i])\n        a[l[i] - 1]= ptr\n        ptr+=1\n    b.append(a[l[i] - 1])\nfor i in range(n):\n    if(c[b[i]-1]!=l[i]):\n        print(-1)\n        return\nfor i in range(ptr-1):\n    if(b[c[i]-1]-1!=i):\n        print(-1)\n        return\n\n\nprint(ptr-1)\nfor i in b: print(i,end = \" \")\nprint()\nfor i in c:print(i,end = \" \")"]