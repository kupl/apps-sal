["\n\ntry:\n n,k = map(int,input().split())\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass", "# cook your dish here\n# cook your dish here\ntry:\n n,k = map(int,input().split())\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass", "# cook your dish here\n# cook your dish here\ntry:\n n,k = map(int,input().split())\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass", "# cook your dish here\nn, k = map(int, input().split())\nk=min(k,n)\nif k%2==1:\n k-=1 \nif k==0:\n print(0)\nelse:\n half_k=k>>1\n prices=[]\n for _ in range(n):\n  prices.append(int(input()))\n minimi=[[0 for _ in range(n)] for _ in range(n)]\n for i in range(n):\n  for j in range(i,n):\n   if i==j:\n    minimi[i][j]=prices[j]\n   else:\n    minimi[i][j]=min(minimi[i][j-1], prices[j])\n tabella=[[0 for _ in range(n)] for _ in range(half_k)]\n for j in range(1,n):\n  tabella[0][j]=max(prices[j]-minimi[0][j-1], tabella[0][j-1])\n for i in range(1,half_k):\n  for j in range(1,n):\n   tabella[i][j]=max(tabella[i][j-1], tabella[i-1][j])\n   appo=0\n   for k in range(j-1):\n    appo=max(appo, tabella[i-1][k]+prices[j]-minimi[k+1][j-1])\n   tabella[i][j]=max(tabella[i][j], appo)\n print(tabella[-1][-1])", "# cook your dish here\ntry:\n n,k = map(int,input().split())\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass", "try:\n n,k = list(map(int,input().split()))\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass\n", "try:\n n,k = list(map(int,input().split()))\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass\n", "# N,K = input().split() #N is the number of days    #K is the number of visits\n# N = int(N)\n# K = int(K)\n\n# cook your dish here\n# stock buy/sell to maximize profit\ntry:\n n,k = map(int,input().split())\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass", "# cook your dish here\ndef max_profit(prices,n,k):\n\n profit = [[0 for i in range(n)] for j in range(k+1)] \n for i in range(1,k+1):\n\n  diff = (-1)*prices[0]\n  for j in range(1,n):\n   diff = max(profit[i-1][j]-prices[j],diff)\n   profit[i][j] = max(profit[i][j-1],diff+prices[j])\n \n return profit[k][n-1]\n \ntry:\n n,k = map(int,input().split())\n prices = [int(input()) for _ in range(n)]\n print(max_profit(prices,n,k//2))\n\nexcept:\n pass", "# cook your dish here\nn,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n l.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n\n #print(\"pr bef:\\n\",pr)\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n\n   #print(\"\\ni,j:\",i,j,\"\\ncomparing:pd\",pd,\"--and pr[i-1][j-1]  - p[j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1]\",pr[i-1][j-1],\"-\",p[j-1])\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n\n\n   #print(\"pr[i][j] by comparing : pr[i][j-1],p[j]+pd ka max:\",pr[i][j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1],p[j],\"+\",pd)\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n\n   #print(\"pr:\",pr)\n\n\n\n #print(\"pr aft:\\n\",pr)\n return pr[k][n-1]\nprint(fip(l,n,k))", "# cook your dish here\n# stock buy/sell to maximize profit\ntry:\n n,k = map(int,input().split())\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n l.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n\n #print(\"pr bef:\\n\",pr)\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n\n   #print(\"\\ni,j:\",i,j,\"\\ncomparing:pd\",pd,\"--and pr[i-1][j-1]  - p[j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1]\",pr[i-1][j-1],\"-\",p[j-1])\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n\n\n   #print(\"pr[i][j] by comparing : pr[i][j-1],p[j]+pd ka max:\",pr[i][j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1],p[j],\"+\",pd)\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n\n   #print(\"pr:\",pr)\n\n\n\n #print(\"pr aft:\\n\",pr)\n return pr[k][n-1]\nprint(fip(l,n,k))", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n l.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n\n #print(\"pr bef:\\n\",pr)\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n\n   #print(\"\\ni,j:\",i,j,\"\\ncomparing:pd\",pd,\"--and pr[i-1][j-1]  - p[j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1]\",pr[i-1][j-1],\"-\",p[j-1])\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n\n\n   #print(\"pr[i][j] by comparing : pr[i][j-1],p[j]+pd ka max:\",pr[i][j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1],p[j],\"+\",pd)\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n\n   #print(\"pr:\",pr)\n\n\n\n #print(\"pr aft:\\n\",pr)\n return pr[k][n-1]\nprint(fip(l,n,k))", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n l.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n\n #print(\"pr bef:\\n\",pr)\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n\n   #print(\"\\ni,j:\",i,j,\"\\ncomparing:pd\",pd,\"--and pr[i-1][j-1]  - p[j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1]\",pr[i-1][j-1],\"-\",p[j-1])\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n\n\n   #print(\"pr[i][j] by comparing : pr[i][j-1],p[j]+pd ka max:\",pr[i][j\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-1],p[j],\"+\",pd)\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n\n   #print(\"pr:\",pr)\n\n\n\n #print(\"pr aft:\\n\",pr)\n return pr[k][n-1]\nprint(fip(l,n,k))", "# cook your dish here\n# stock buy/sell to maximize profit\ntry:\n n,k = map(int,input().split())\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass", "# cook your dish here\n# stock buy/sell to maximize profit\ntry:\n n,k = map(int,input().split())\n x = [int(input()) for _ in range(n)]\n k = k//2\n dp = [0]*(k+1)\n for i in range(k+1):\n  dp[i] = [0]*n\n #print(dp)\n for i in range(1,k+1):\n  #print(\"*\",dp[i-1][0])\n  diff = (-1)*x[0]\n  for j in range(1,n):\n   diff = max(dp[i-1][j]-x[j],diff)\n   dp[i][j] = max(dp[i][j-1],diff+x[j])\n print(dp[k][n-1])\nexcept:\n pass", "n,k=list(map(int,input().split()))\nk=k//2\nl=[]\nd={}\nfor i in range(n):\n l.append(int(input()))\nfor i in range(k+1):\n d[i]=[0]*n\nfor i in range(1,k+1):\n maxdiff=d[i-1][0]-l[0]\n for j in range(1,n):\n  maxdiff=max(d[i-1][j]-l[j],maxdiff)\n  d[i][j]=max(d[i][j-1],maxdiff+l[j])\n#print(d)\nprint(d[k][-1])\n\n", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n l.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n return pr[k][n-1]\nprint(fip(l,n,k))", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n l.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n return pr[k][n-1]\nprint(fip(l,n,k))", "n,k=map(int,input().split())\nk=k//2\nl = []\nfor _ in range(n):\n l.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n return pr[k][n-1]\nprint(fip(l,n,k))", "# cook your dish here\nn,k=list(map(int,input().split()))\nli=[]\nk=k//2\nfor i in range(n):\n li.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n return pr[k][n-1]\nprint(fip(li,n,k))\n", "# cook your dish here\nn,k=list(map(int,input().split()))\nli=[]\nk=k//2\nfor i in range(n):\n li.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n return pr[k][n-1]\nprint(fip(li,n,k))\n", "n,k=list(map(int,input().split()))\nli=[]\nk=k//2\nfor i in range(n):\n li.append(int(input()))\ndef fip(p,no,kt):\n pr=[[0 for i in range(n+1)] for j in range(k+1)]\n for i in range(1,k+1):\n  pd=float('-inf')\n  \n  for j in range(1,n):\n   pd=max(pd,pr[i-1][j-1]-p[j-1])\n   pr[i][j]=max(pr[i][j-1],p[j]+pd)\n return pr[k][n-1]\nprint(fip(li,n,k))\n"]