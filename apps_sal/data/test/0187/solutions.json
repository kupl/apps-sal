["def list_input():\n    return list(map(int,input().split()))\ndef map_input():\n    return map(int,input().split())\ndef map_string():\n    return input().split()\n    \nn = int(input())    \na = []\nfor _ in range(n):\n\ta.append(int(input()))\nb = list(set(a[::]))\nif(len(b) == 2 and a.count(a[0]) == n//2):\n\tprint(\"YES\")\n\tprint(b[0],b[1])\t\nelse: print(\"NO\")\t", "n = int(input())\na = [int(input()) for i in range(n)]\nb = list(set(a))\nif len(b) == 2 and a.count(b[0]) == a.count(b[1]) == n // 2:\n    print('YES')\n    print(*b)\nelse:\n    print('NO')", "n = int(input())\n\na = [int(input()) for _ in range(n)]\n\ns = list(set(a))\nif len(s) == 2 and a.count(s[0]) == a.count(s[1]):\n    print('YES')\n    print(*s)\nelse:\n    print('NO')\n", "n = int(input())\na = [int(input()) for i in range(n)]\na.sort()\nb = [ai for ai in a if ai==a[0]]\nc = [ai for ai in a if ai!=a[0]]\nif len(b)==len(c) and c[0]==c[-1]:\n    print('YES')\n    print(b[0], c[0])\nelse:\n    print('NO')", "from sys import stdin, stdout\n\nn = int(stdin.readline().rstrip())\ncards = []\nfor _ in range(n):\n    cards.append(int(stdin.readline().rstrip()))\n    \nn1 = max(cards)\nn2 = min(cards)\n\nc1 = cards.count(n1)\nc2 = cards.count(n2)\n\nif c1==c2 and c1+c2==n and n1!=n2:\n    print('YES')\n    print(str(n1) + ' ' + str(n2))\nelse:\n    print('NO')\n", "n=int(input())\na=[int(input()) for i in range(n)]\n\ns=set(a)\nif len(s)!=2:\n\tprint('NO')\n\treturn\n\nb=list(s)\nif a.count(b[0])==a.count(b[1]):\n\tprint('YES')\n\tprint(b[0],b[1])\nelse:\n\tprint('NO')\n", "from collections import Counter\n\nn = int(input())\n\nc = list()\n\nfor i in range(n):\n    c.append(int(input()))\n\nc = Counter(c)\n\nd = dict()\n\nfor k in c:\n    v = c[k]\n    if d.get(v, -1) != -1:\n        d[v].append(k)\n    else:\n        d[v] = [k]\n\nfl = False\nfor k in d:\n    v = d[k]\n    if len(v) > 1 and len(d) == 1 and len(v) == 2:\n        fl = True\n        print(\"YES\")\n        print(*v)\n        break\nif (not fl):\n    print(\"NO\")", "n = int(input())\n\nd = {}\n\nfor _ in range(n):\n    t = int(input())\n    if t not in d:\n        d[t] = 0\n    d[t] += 1\n\nif len(d) != 2:\n    print(\"NO\")\n    return\n\nk = list(d.keys())\n\nif d[k[0]] != d[k[1]]:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(str(k[0]) + \" \" + str(k[1]))\n\n", "n=int(input())\nl=[]\nfor i in range(n):\n    l+=[int(input())]\nl.sort(key=int)\nif l.count(l[0])==n>>1 and l.count(l[-1])==n>>1:\n    print(\"YES\")\n    print(l[0],l[-1])\nelse:\n    print(\"NO\")\n", "n = int(input())\nl = [0]*n\nfor i in range(n):\n\tl[i]=int(input())\nl.sort()\nif l.count(l[0])==l.count(l[n-1])==n/2:\n\tprint('YES')\n\tprint(l[0] , l[n-1])\nelse:\n\tprint(\"NO\")", "def solve():\n\n    n = int(input())\n    nums = [int(input()) for i in range(n)]\n    numdict = {}\n\n    for num in nums:\n        if num in numdict:\n            numdict[num] += 1\n        else:\n            numdict[num] = 1\n\n    if len(numdict) != 2:\n        print(\"NO\")\n\n    else:\n        nums = list(numdict.keys())\n        if numdict[nums[0]] == numdict[nums[1]]:\n            print(\"YES\")\n            print(nums[0], nums[1])\n        else:\n            print(\"NO\")\n\n    return\n\nsolve()\n", "n = int(input())\nd = {}\nfor i in range(n):\n    val = int(input())\n    if val in list(d.keys()):\n        d[val] += 1\n    else:\n        d[val] = 1\nfor i in list(d.keys()):\n    for j in list(d.keys()):\n        if i==j:\n            continue\n        if d[i] == d[j]:\n            if d[i]+d[j] == n:\n                print('YES')\n                print(i,j)\n                quit()\nprint('NO')\n", "cardNum = int(input())\n\ncards = [input() for i in range(cardNum)]\n\nvalues = {}\nif len(set(cards)) > 2:\n    print(\"NO\")\nelse:\n    for card in set(cards):\n        value = cards.count(card)\n        if value in values:\n            print(\"YES\")\n            print(card, values[value])\n            break\n        values[value] = card\n    else:\n        print(\"NO\")\n", "def readln(): return list(map(int, input().rstrip().split()))\n\n\nn = int(input())\ndata = []\nfor i in range(0, n):\n    data.append(input())\n\nx = data[0]\ndata = list([a for a in data if a != x])\ncx = n - len(data)\n\nif len(data) == 0:\n    print(\"NO\")\n    return\n\ny = data[0]\ndata = list([a for a in data if a != y])\ncy = n - cx - len(data)\n\nif cx != cy or len(data) != 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(\"{} {}\".format(x, y))\n", "n = int(input())\nL = [0] * 101\nfor i in range(n):\n    L[int(input())] += 1\nS = set()\nfor i in range(len(L)):\n    if L[i]:\n        S.add(i)\nif len(S) == 2:\n    M = list(S)\n    if L[M[0]] == L[M[1]]:\n        print('YES')\n        print(M[0], M[1])\n    else:\n        print('NO')    \nelse:\n    print('NO')\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom collections import Counter\n\ndef main():\n    N = int(input())\n    A = [int(input()) for _ in range(N)]\n\n    cnt = Counter(A)\n    if len(cnt) != 2:\n        print(\"NO\")\n        return\n\n    ps = list(cnt.items())\n    if ps[0][1] != ps[1][1]:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    print(ps[0][0], ps[1][0])\n\ndef __starting_point(): main()\n\n__starting_point()", "#python3\n#utf-8\nfrom collections import Counter\n\ncards_nr = int(input())\nnumber_counter = Counter()\n\nfor _ in range(cards_nr):\n    curr_number = int(input())\n    number_counter[curr_number] += 1\n\nif len(number_counter) != 2:\n    print('NO')\nelse:\n    num1, num2 = list(number_counter)\n    if number_counter[num1] != number_counter[num2]:\n        print('NO')\n    else:\n        print('YES')\n        print(num1, num2)\n", "n = int(input())\na = [int(input()) for _ in range(n)]\n\ncnt = {}\nfor ai in a:\n    if ai in cnt:\n        cnt[ai] += 1\n    else:\n        cnt[ai] = 1\nans = []\nfor k, v in list(cnt.items()):\n    if v * 2 == n:\n        ans.append(k)\nif len(cnt) != 2:\n    ans = []\nif len(ans) == 2:\n    print(\"YES\")\n    print(' '.join(map(str, ans)))\nelse:\n    print(\"NO\")\n", "n = int(input())\narr = []\nfor _ in range(n):\n\tarr.append(int(input()))\nif(len(set(arr)) != 2 or n%2 == 1):\n\tprint('NO')\nelse:\n\ta,b = map(int, list(set(arr)))\n\tif(arr.count(a) == arr.count(b)):\n\t\tprint('YES')\n\t\tprint(a,b)\n\telse:\n\t\tprint('NO')", "a=[]\nb=[]\nfor i in range(int(input())):\n    a.append(int(input()))\nb=list(set(a))\n \nif len(b)!=2:\n    print('NO')\nelif a.count(b[0])==a.count(b[1]):\n    print('YES')\n    b.sort()\n    print(*b)\nelse:\n    print('NO')\n", "from collections import defaultdict\n\nn = int(input())\narr = []\nnums = set()\nf = defaultdict(int)\n\nfor _ in range(n):\n\tarr.append(int(input()))\n\nif n % 2 == 1:\n\tprint(\"NO\")\n\treturn\n\nfor num in arr:\n\tnums.add(num)\n\tf[num] += 1\n\tif len(nums) > 2:\n\t\tprint(\"NO\")\n\t\treturn\n\nnums = list(nums)\n\nif len(nums) == 2:\n\tif f[nums[0]] == f[nums[1]]:\n\t\tprint(\"YES\")\n\t\tprint(nums[0], nums[1])\n\t\treturn\n\t\t\nprint(\"NO\")\n", "from collections import Counter\nn = int(input())\na = Counter()\nfor _ in range(n):\n    a[int(input())] += 1\n\ntry:\n    x, y = a.popitem(), a.popitem()\nexcept KeyError:\n    print('NO')\n    return\nif not a and x[1] == y[1]:\n    print('YES')\n    print(x[0], y[0])\nelse:\n    print('NO')\n", "n = int(input())\nA = []\nD = {}\nk = []\nfor i in range(n):\n    x = int(input())\n    A.append(x)\n    if x not in D:\n        D[x] = 0\n        k.append(x)\n    D[x] += 1\nif(len(D)!=2):\n    print (\"NO\")\nelif(D[k[0]] == D[k[1]]):\n    print (\"YES\")\n    print(k[0],k[1])\nelse:\n    print (\"NO\")\n\n"]