["from collections import Counter\n\n\ndef input_matrix():\n    res = tuple((Counter() for _ in range(n + m)))\n    for i in range(n):\n        for j, a in enumerate(map(int, input().split())):\n            res[i + j][a] += 1\n    return res\n\n\nn, m = list(map(int, input().split()))\nif input_matrix() == input_matrix():\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "# -*- coding: utf-8 -*-\n\nfrom collections import defaultdict\n\n\ndef rli():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n, m = rli()\n    cnt = [defaultdict(int) for i in range(n + m + 10)]\n    for i in range(n):\n        nums = rli()\n        for j in range(m):\n            cnt[i + j][nums[j]] += 1\n    for i in range(n):\n        nums = rli()\n        for j in range(m):\n            cnt[i + j][nums[j]] -= 1\n    for i in range(n + m + 10):\n        for v in list(cnt[i].values()):\n            if v != 0:\n                print('NO')\n                return\n    print('YES')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m = map(int,input().split())\n# rows and columns\n# max 500\n\nfrom collections import defaultdict\ndiag_a = defaultdict(list)\ndiag_b = defaultdict(list)\n\nfor x in range(n):\n    for i,val in enumerate(list(map(int,input().split()))):\n        diag_a[x+i].append(val)\n\nfor x in range(n):\n    for i,val in enumerate(list(map(int,input().split()))):\n        diag_b[x+i].append(val)\n\ndiag_a = {k:sorted(v) for k,v in diag_a.items()}\ndiag_b = {k:sorted(v) for k,v in diag_b.items()}\nfor k in diag_a.keys():\n    if diag_a[k] != diag_b[k]:\n        print (\"NO\")\n        return\nprint (\"YES\")", "ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\n\nn, m = mi()\na = [li() for i in range(n)]\nb = [li() for i in range(n)]\np = [[] for i in range(n + m)]\nq = [[] for i in range(n + m)]\nfor i in range(n):\n    for j in range(m):\n        p[i + j].append(a[i][j])\n        q[i + j].append(b[i][j])\nprint('YES' if all(sorted(x) == sorted(y) for x, y in zip(p, q)) else 'NO')", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\nn, m = mints()\nz = [None,None]\nfor k in range(2):\n\tx = [[] for i in range(n+m)]\n\tfor i in range(n):\n\t\ta = list(mints())\n\t\tfor j in range(m):\n\t\t\tx[i+j].append(a[j])\n\tz[k] = x\nfor i in range(n+m):\n\ta = z[0][i]\n\tb = z[1][i]\n\ta.sort()\n\tb.sort()\n\tif a != b:\n\t\tprint(\"NO\")\n\t\treturn\nprint(\"YES\")\n", "N, M = list(map(int, input().split()))\nA = [[int(a) for a in input().split()] for _ in range(N)]\nB = [[int(a) for a in input().split()] for _ in range(N)]\n\nAA = [[] for _ in range(N+M-1)]\nBB = [[] for _ in range(N+M-1)]\n\nfor n in range(N):\n    for m in range(M):\n        AA[n+m].append(A[n][m])\n        BB[n+m].append(B[n][m])\n\nfor i in range(N+M-1):\n    AA[i] = sorted(AA[i])\n    BB[i] = sorted(BB[i])\n    if AA[i] != BB[i]:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")\n", "n, m, *_ = list(map(int, input().split()))\n\nb1 = []\nfor i in range(n):\n    b1.append(input().split())\n\nb2 = []\nfor i in range(n):\n    b2.append(input().split())\n\ndef works(n, m, b1, b2):\n    for diag in range(n + m - 1):\n        l1 = []\n        l2 = []\n        for col in range(diag + 1):\n            point = [col, diag-col]\n            if 0 <= point[0] < n and 0 <= point[1] < m:\n                l1.append(b1[point[0]][point[1]])\n                l2.append(b2[point[0]][point[1]])\n        if sorted(l1) != sorted(l2):\n            return False\n    return True\n\nif works(n, m, b1, b2):\n    print('YES')\nelse:\n    print('NO')\n", "# import getpass\n# import math\n# import sys\n# import string\n# import re\n# import math\n# import random\n# from decimal import Decimal, getcontext\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\n# if getpass.getuser() != 'frohenk':\n#     filename = 'half'\n#     # sys.stdin = open('input.txt')\n#     # sys.stdout = open('output.txt', 'w')\n# else:\n#     sys.stdin = open('input.txt')\n#     # sys.stdin.close()\n\nh, w = ria()\n\nmt1 = []\nmt2 = []\n\nfor y in range(h):\n    mt1.append(ria())\nfor y in range(h):\n    mt2.append(ria())\n# now its y then x\n\n# print(mt1, mt2)\n\nfor x in range(w):\n    st1 = []\n    st2 = []\n\n    y = 0\n    while w > x >= 0 and h > y >= 0:\n        st1.append(mt1[y][x])\n        st2.append(mt2[y][x])\n        x -= 1\n        y += 1\n\n    st1.sort()\n    st2.sort()\n    if st1 != st2:\n        print('NO')\n        return\n\nfor y in range(h):\n    st1 = []\n    st2 = []\n\n    x = w - 1\n    while w > x >= 0 and h > y >= 0:\n        st1.append(mt1[y][x])\n        st2.append(mt2[y][x])\n        x -= 1\n        y += 1\n    # print(st1)\n    # print(st2)\n    #\n    st1.sort()\n    st2.sort()\n    if st1 != st2:\n        print('NO')\n        return\nprint('YES')", "'''input\n3 3\n1 2 3\n4 5 6\n7 8 9\n1 4 7\n2 5 6\n3 8 9\n'''\nimport sys\nfrom collections import defaultdict as dd\nfrom itertools import  permutations as pp\nfrom itertools import combinations as cc\nfrom collections import Counter as ccd\nfrom random import randint as rd\nfrom bisect import bisect_left as bl\nimport heapq\nmod=10**9+7\n\ndef ri(flag=0):\n\tif flag==0:\n\t\treturn [int(i) for i in sys.stdin.readline().split()]\n\telse:\n\t\treturn int(sys.stdin.readline())\n\nn,m=ri()\n\nmat=[]\nmat1=[]\nfor i in range(n):\n\tmat.append(ri())\nfor i in range(n):\n\tmat1.append(ri())\none=dd(list)\nfor i in range(n):\n\tfor j in range(m):\n\t\tone[i+j].append(mat[i][j])\n\ntwo=dd(list)\nfor i in range(n):\n\tfor j in range(m):\n\t\ttwo[i+j].append(mat1[i][j])\n\nfor i in one:\n\tone[i].sort()\nfor i in two:\n\ttwo[i].sort()\n\nf=1\nfor i in one:\n\tif one[i]!=two[i]:\n\t\tf=0\nif f:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "n,m = list(map(int,input().split()))\nm1 = [list(map(int,input().split())) for i in range(n)]\nm2 = [list(map(int,input().split())) for i in range(n)]\nimport sys\nfor j in range(m + n - 1):\n\tx1 = {}\n\tx2 = {}\n\tfor i in range(j + 1):\n\t\tif j - i < n and i < m:\n\t\t\tx1[m1[j-i][i]] = 0\n\t\t\tx2[m2[j-i][i]] = 0\n\tfor i in range(j + 1):\n\t\tif j - i < n and i < m:\n\t\t\tx1[m1[j-i][i]] += 1\n\t\t\tx2[m2[j-i][i]] += 1\n\tif x1 != x2:\n\t\tprint(\"NO\")\n\t\treturn\nprint(\"YES\")", "n, m = map(int, input().split())\nm1 = []\nm2 = []\nfor i in range(n):\n    m1.append([int(j) for j in input().split()])\nfor i in range(n):\n    m2.append([int(j) for j in input().split()])\nd1 = [[] for i in range(n + m - 1)]\nd2 = [[] for i in range(n + m - 1)]\nfor i in range(n):\n    for j in range(m):\n        d1[i + j].append(m1[i][j])\n        d2[i + j].append(m2[i][j])\nflag = True\nfor i in range(n + m - 1):\n    d1[i].sort()\n    d2[i].sort()\n    if d1[i][::] != d2[i][::]:\n        flag = False\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "n, m = list(map(int, input().split()))\na = [list(map(int, input().split())) for _ in range(n)]\nb = [list(map(int, input().split())) for _ in range(n)]\nl1, l2 = [[] for i in range(n + m)], [[] for i in range(n + m)]\nfor i in range(n):\n    for j in range(m):\n        l1[i + j].append(a[i][j])\n        l2[i + j].append(b[i][j])\nfor i in l1:\n    i.sort()\nfor i in l2:\n    i.sort()\nprint('YES' if l1 == l2 else 'NO')\n", "n, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nb = []\nfor i in range(n):\n    b.append(list(map(int, input().split())))\n\nok = 'YES'\nfor i in range(m - 1 + n - 1 + 1):\n    d = dict()\n    for x in range(min(i + 1, m)):\n        if i - x < n:\n            if a[i - x][x] in d:\n                d[a[i - x][x]] += 1\n            else:\n                d[a[i - x][x]] = 1\n    for x in range(min(i + 1, m)):\n        if i - x < n:\n            if b[i - x][x] in d:\n                d[b[i - x][x]] -= 1\n                if d[b[i - x][x]] == 0:\n                    d.__delitem__(b[i - x][x])\n            else:\n                print('NO')\n                return\nprint('YES')\n", "# -*- coding: utf-8 -*-\n# @Time    : 2019/3/12 1:05\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : C. Nastya Is Transposing Matrices.py\n\nfrom collections import defaultdict\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    b = [list(map(int, input().split())) for _ in range(n)]\n\n    dict1 = defaultdict(list)\n    for i in range(n):\n        for j in range(m):\n            dict1[i + j].append(a[i][j])\n\n    dict2 = defaultdict(list)\n    for i in range(n):\n        for j in range(m):\n            dict2[i + j].append(b[i][j])\n    # print(dict1)\n    # print(dict2)\n\n    for i in range(n + m - 1):\n        if sorted(dict1[i]) != sorted(dict2[i]):\n            print('NO')\n            return\n    print('YES')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\nb = [list(map(int, input().split())) for _ in range(n)]\naa = [[] for _ in range(n+m)]\nbb = [[] for _ in range(n+m)]\nfor i in range(n):\n    for k in range(m):\n        aa[i+k].append(a[i][k])        \n        bb[i+k].append(b[i][k])\nprint(\"YES\" if all(map(lambda x, y: sorted(x) == sorted(y), aa, bb)) else \"NO\")", "from collections import defaultdict\n\nn, m = (int(t) for t in input().split(' '))\nm1 = [[int(t) for t in input().split(' ')] for _ in range(n)]\nm2 = [[int(t) for t in input().split(' ')] for _ in range(n)]\n\ndef get_csum(mx):\n    csum = [defaultdict(int) for _ in range(n+m+1)]\n    for i in range(n):\n        for j in range(m):\n            csum[i+j][mx[i][j]] += 1\n    return csum\n\ncsum1 = get_csum(m1)\ncsum2 = get_csum(m2)\nprint('YES' if csum1 == csum2 else 'NO')\n", "n,m = [int(x) for x in input().split()]\n\nA = []\n\nB = []\n\nfor _ in range(n):\n    A.append([int(x) for x in input().split()])\n\nfor _ in range(n):\n    B.append([int(x) for x in input().split()])\n\nAD = []\nBD = []\nfor s in range(2,m+n+1):\n    at = []\n    bt = []\n    for r in range(1,n+1):\n        c = s-r\n        if 1 <= c and c <= m:\n            at.append(A[r-1][c-1])\n            bt.append(B[r-1][c-1])\n    at.sort()\n    bt.sort()\n    AD.append(at)\n    BD.append(bt)\n    \nif AD == BD:\n    print('YES')\n\nelse:\n    print('NO')", "n,m=[int(x) for x in input().split()]\nA=[]\nB=[]\nfor i in range(n):\n    a=[int(x) for x in input().split()]\n    A.append(a)\nfor i in range(n):\n    a=[int(x) for x in input().split()]\n    B.append(a)\na_list=[]\nfor i in range(n):\n    a=[]\n    j=0\n    a.append(A[i][j])\n    while 1:\n        if i-1>=0 and j+1<=m-1:\n            i-=1\n            j+=1\n            a.append(A[i][j])\n        else:\n            break\n    a_list.append(a)\ni=n-1\nfor j in range(1,m):\n    i=n-1\n    a=[]\n    a.append(A[i][j])\n    while 1:\n        if i-1>=0 and j+1<=m-1:\n            i-=1\n            j+=1\n            a.append(A[i][j])\n        else:\n            break\n    a_list.append(a)\n    \nb_list=[]\nfor i in range(n):\n    a=[]\n    j=0\n    a.append(B[i][j])\n    while 1:\n        if i-1>=0 and j+1<=m-1:\n            i-=1\n            j+=1\n            a.append(B[i][j])\n        else:\n            break\n    b_list.append(a)\ni=n-1\nfor j in range(1,m):\n    a=[]\n    i=n-1\n    a.append(B[i][j])\n    while 1:\n        if i-1>=0 and j+1<=m-1:\n            i-=1\n            j+=1\n            a.append(B[i][j])\n        else:\n            break\n    b_list.append(a)\nfor i in range(len(a_list)):\n    a=sorted(a_list[i])\n    b=sorted(b_list[i])\n    if a!=b:\n        print('NO')\n        break\nelse:\n    print('YES')\n", "n,m=list(map(int,input().split()))\na=[]\nfor i in range(n):\n    a.append(list(map(int,input().split())))\nb=[]\nflag=True\nfor i in range(n):\n    b.append(list(map(int,input().split())))\nfor i in range(m+n-1):\n    cur=[]\n    curb=[]\n    for l in range(i+1):\n        try:\n            cur.append(a[i-l][l])\n            curb.append(b[i-l][l])\n        except:\n            pass\n    cur.sort()\n    curb.sort()\n    if cur!=curb:\n        flag=False\nif flag:\n    print('YES')\nelse:\n    print('NO')\n", "n,m=list(map(int,input().split()))\narr1=[]\nfor i in range(n):\n\ttemp=list(map(int,input().split()))\n\tarr1.append(temp)\narr2=[]\nfor i in range(n):\n\ttemp=list(map(int,input().split()))\n\tarr2.append(temp)\n\nflag=0\nfor i in range(n):\n\ttemparr1=[]\n\ttemparr2=[]\n\tindexi=i\n\tindexj=0\n\twhile(indexi>=0 and indexj<m):\n\t\ttemparr1.append(arr1[indexi][indexj])\n\t\ttemparr2.append(arr2[indexi][indexj])\n\t\tindexi-=1\n\t\tindexj+=1\n\ttemparr1.sort()\n\ttemparr2.sort()\n\t#print(*temparr1)\n\t#print(*temparr2)\n\tfor j in range(len(temparr1)):\n\t\tif(temparr1[j]!=temparr2[j]):\n\t\t\tflag=1\n\t\t\tbreak\nif(flag==1):\n\tprint('NO')\nelse:\n\tfor i in range(1,m):\n\t\ttemparr1=[]\n\t\ttemparr2=[]\n\t\tindexi=n-1\n\t\tindexj=i\n\t\twhile(indexi>=0 and indexj<m):\n\t\t\ttemparr1.append(arr1[indexi][indexj])\n\t\t\ttemparr2.append(arr2[indexi][indexj])\n\t\t\tindexi-=1\n\t\t\tindexj+=1\n\t\ttemparr1.sort()\n\t\ttemparr2.sort()\n\t\t#print(*temparr1)\n\t\tfor j in range(len(temparr1)):\n\t\t\tif(temparr1[j]!=temparr2[j]):\n\t\t\t\tflag=1\n\t\t\t\tbreak\n\tif(flag==0):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n", "n, m = map(int, input().split())\nmat1 = [[0 for i in range(m)] for j in range(n)]\nmat2 = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    mat1[i] = list(map(int, input().split()))\nfor i in range(n):\n    mat2[i] = list(map(int, input().split()))\nl1 = [dict() for i in range(n + m - 1)]\nl2 = [dict() for i in range(n + m - 1)]\nfor i in range(n):\n    for j in range(m):\n        if mat1[i][j] in l1[i + j]:\n            l1[i + j][mat1[i][j]] += 1\n        else:\n            l1[i + j][mat1[i][j]] = 1\n        if mat2[i][j] in l2[i + j]:\n            l2[i + j][mat2[i][j]] += 1\n        else:\n            l2[i + j][mat2[i][j]] = 1\nflag = 0\nfor i in range(n + m - 1):\n    if l1[i] != l2[i]:\n        flag = 1\nprint(flag * \"NO\" + (1 - flag) * \"YES\")", "n , m = list(map(int,input().split()))\na , b = [] , []\nfor _ in range(n):\n    aux = [int(x) for x in input().split()]\n    a.append(aux)\nfor _ in range(n):\n    aux = [int(x) for x in input().split()]\n    b.append(aux)\n\ndef diagonalOrder(a,b):\n    for line in range(1,n+m):\n        start_col = max(0,line-n)\n        count = min(line,(m-start_col),n)\n        aux_a = []\n        aux_b = []\n        for j in range(count):\n            aux_a.append(a[min(n,line)-j-1][start_col+j])\n            aux_b.append(b[min(n,line)-j-1][start_col+j])\n        if(sorted(aux_a)!=sorted(aux_b)): return(\"NO\")\n    return(\"YES\")\n\n\nprint(diagonalOrder(a,b))\n", "n,m = list(map(int, input().split()))\n\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nb = []\nfor i in range(n):\n    b.append(list(map(int, input().split())))\n\nfor i in range(m + n -1):\n    d1 = {}\n    d2 ={}\n\n    for j in range(n):\n        l = j\n        r = i - j\n        if l >=0 and l < n and r >= 0 and r < m:\n            e = a[l][r]\n            if e not in d1:\n                d1[e] = 0\n            d1[e] += 1\n\n    for j in range(n):\n        l = j\n        r = i - j\n        if l >= 0 and l < n and r >= 0 and r < m:\n            e = b[l][r]\n            if e not in d2:\n                d2[e] = 0\n            d2[e] += 1\n\n    for k in d1:\n        if k not in d2:\n            print('NO')\n            return\n        if d1[k] != d2[k]:\n            print('NO')\n            return\nprint('YES')\n", "n,m = list(map(int, input().strip().split()))\na = []\nb = []\nfor i in range(n):\n    l = list(map(int, input().strip().split()))\n    a.append(l)\nfor i in range(n):\n    l = list(map(int, input().strip().split()))\n    b.append(l)\ntest = True\nfor i in range(n+m-1):\n    c = []\n    d = []\n    if i < m-1:\n        for j in range(i,-1,-1):\n            c.append(a[i-j][j])\n            d.append(b[i-j][j])\n            if i-j == n-1:\n                break\n        c.sort()\n        d.sort()\n        if c!= d:\n            test = False\n            break\n    else:\n        x = i- (m-1)\n        for j in range(x,n):\n            c.append(a[j][m-1-(j-x)])\n            d.append(b[j][m-1-(j-x)])\n            if m-1-(j-x) == 0:\n                break\n        c.sort()\n        d.sort()\n        if c!= d:\n            test = False\n            break\nif test == True:\n    print('YES')\nelse:\n    print('NO')\n", "def main():\n    n, m = map(int, input().split())\n\n    a = [[] for i in range(n)]\n    b = [[] for i in range(n)]\n    aDicts = [dict() for i in range(n + m - 1)]\n    bDicts = [dict() for i in range(n + m - 1)]    \n    \n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n    for i in range(n):\n        b[i] = list(map(int, input().split()))\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] in aDicts[i + j].keys():\n                aDicts[i + j][a[i][j]] += 1\n            else:\n                aDicts[i + j][a[i][j]] = 1\n    \n            if b[i][j] in bDicts[i + j].keys():\n                bDicts[i + j][b[i][j]] += 1\n            else:\n                bDicts[i + j][b[i][j]] = 1            \n\n    for i in range(n + m - 1):\n        if aDicts[i] != bDicts[i]:\n            print(\"NO\")\n            return 0\n    print(\"YES\")\n    return 0\n\nmain()"]