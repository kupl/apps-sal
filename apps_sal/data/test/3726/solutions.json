["import itertools\nfrom math import sqrt\ndef chunk(a):\n    i = 0\n    res = []\n    while i < len(a):\n        res.append(a[i])\n        while i != len(a) - 1 and a[i + 1] == a[i] + 1:\n            i += 1\n        res.append(a[i] + 1)\n        i += 1\n    return res\n\ndef augment(g, src, dest):\n    o = [None] * len(g)\n    q = [(src, src)]\n    while q:\n        w = q.pop()\n        if o[w[0]] is None:\n            o[w[0]] = w[1]\n            for s in g[w[0]]:\n                if o[s] is None:\n                    q.append((s, w[0]))\n    if not o[dest]:\n        return False\n    i = dest\n    while i != src:\n        g[o[i]].discard(i)\n        g[i].add(o[i])\n        i = o[i]\n    return True\n\ndef match(a):\n    l = {}\n    c = 0\n    matches = 0\n    for i, j in a:\n        if i not in l:\n            l[i] = c\n            c += 1\n        if j not in l:\n            l[j] = c\n            c += 1\n    L = {v: k for k, v in l.items()}\n    g = [set() for i in range(len(l) + 2)]\n    src = len(l)\n    dest = src + 1\n    for i, j in a:\n        g[src].add(l[i])\n        g[l[i]].add(l[j])\n        g[l[j]].add(dest)\n    while augment(g, src, dest):\n        matches += 1\n    return matches\n\ndef prime(n):\n    for i in range(2, min(n, int(sqrt(n) + 7))):\n        if n % i == 0:\n            return False\n    return n > 1\n\ndef pairs(b):\n    c = []\n    for i in b:\n        for j in b:\n            if i % 2 == 0 and j % 2 == 1 and prime(abs(i - j)):\n                c.append((i, j))\n    return c\n\nn = int(input())\na = list(map(int, input().split()))\nb = chunk(a)\nr = match(pairs(b))\ne = len(list(filter(lambda x: x % 2 == 0, b)))\no = len(b) - e\nprint(int(r + 2 * ((e - r) // 2 + (o - r) // 2) + 3 * ((e - r) % 2)))", "import sys\ninput = sys.stdin.readline\n\nimport itertools\nfrom collections import defaultdict\nimport numpy as np\n\nN = int(input())\nX = set(int(x) for x in input().split())\n\n# 2\u306f\u7d20\u6570\u3067\u306a\u3044\u3068\u3057\u3066\u6271\u3063\u3066\nU = 10**7 + 100\nis_prime = np.zeros(U,dtype=np.bool)\nis_prime[3::2] = 1\nfor p in range(3,U,2):\n    if p*p > U:\n        break\n    if is_prime[p]:\n        is_prime[p*p::p+p] = 0\n\n# imos\u3067\u5024\u3092\u5165\u308c\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u5834\u6240\nX ^= set(x+1 for x in X)\n\nEV = set(x for x in X if x%2 == 0)\nOD = set(x for x in X if x%2 == 1)\n\n# 1\u624b\u3067\u3068\u308c\u308b\u30da\u30a2\u3092\u898b\u3064\u3051\u308b\uff1a\u6700\u5927\u30de\u30c3\u30c1\u30f3\u30b0\n# \u5947\u70b9\u304b\u3089\u5076\u70b9\u306b\u8fba\u3092\u8cbc\u308b\nsource = -1\nsink = -2\ngraph = defaultdict(dict)\nfor x in EV:\n    graph[x][sink] = 1\n    graph[sink][x] = 0\nfor x in OD:\n    graph[source][x] = 1\n    graph[x][source] = 0\nfor x,y in itertools.product(OD,EV):\n    if is_prime[abs(x-y)]:\n        graph[x][y] = 1\n        graph[y][x] = 0\n\ndef bfs():\n    level = defaultdict(int)\n    q = [source]\n    level[source] = 1\n    d = 1\n    while q:\n        d += 1\n        if level[sink] != 0:\n            break\n        qq = []\n        for x in q:\n            for y,cap in graph[x].items():\n                if cap==0 or level[y]!=0:\n                    continue\n                level[y] = d\n                qq.append(y)\n        q = qq\n    return level\n\ndef dfs(v,f,level,itr):\n    if v == sink:\n        return f\n    for w,cap in itr[v]:\n        if cap==0 or level[w]!=level[v]+1:\n            continue\n        d = dfs(w,min(f,cap),level,itr)\n        if d:\n            graph[v][w] -= d\n            graph[w][v] += d\n            return d\n    return 0\n\ndef max_flow():\n    flow = 0\n    while True:\n        level = bfs()\n        if level[sink] == 0:\n            return flow\n        itr = {v:iter(graph[v].items()) for v in graph}\n        while True:\n            f = dfs(source,10**9,level,itr)\n            if f == 0:\n                break\n            flow += f\n\nf = max_flow()\n\nod = len(OD); ev = len(EV)\nanswer = f\nod -= f; ev -= f\nanswer += 2*(od//2); od %= 2\nanswer += 2*(ev//2); ev %= 2\nif od:\n    answer += 3\nprint(answer)"]