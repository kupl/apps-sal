["import sys\n\nfin = sys.stdin\nfout = sys.stdout\n\na = [0] * 6\nfor i in range(6):\n    a[i] = [0] * 6\nfor i in range(2):\n    a[i][0] = 3\n    a[i][1] = 3\n    a[i][2] = 4\n    a[i][3] = 4\n    a[i][4] = 3\n    a[i][5] = 3\nfor i in range(2, 4):\n    a[i][0] = 2\n    a[i][1] = 2\n    a[i][2] = 3\n    a[i][3] = 3\n    a[i][4] = 2\n    a[i][5] = 2\nfor i in range(4, 6):\n    a[i][0] = 1\n    a[i][1] = 1\n    a[i][2] = 2\n    a[i][3] = 2\n    a[i][4] = 1\n    a[i][5] = 1\n\nansI = -1\nansJ = -1\n\nmax = -1\n\nansL = []\n\nfor i in range(6):\n    s = fin.readline().strip()\n    ansL.append(s)\n    s = s.replace(\"-\", \"\")\n    for j in range(6):\n        if s[j] == '.' and a[i][j] > max:\n            max = a[i][j]\n            ansI = i\n            ansJ = j\n\n# print(ansI, ansJ)\nfor i in range(len(ansL)):\n    cur = ansL[i]\n    realJ = -1\n    for j in range(len(cur)):\n        if (cur[j] != '-'):\n            realJ += 1\n        if i == ansI and realJ == ansJ and cur[j] != '-':\n            fout.write('P')\n        else:\n            fout.write(cur[j])\n\n    fout.write(\"\\n\")\nfin.close()\nfout.close()\n", "table = [[3, 3, 0, 4, 4, 0, 3, 3],\n         [3, 3, 0, 4, 4, 0, 3, 3],\n         [2, 2, 0, 3, 3, 0, 2, 2],\n         [2, 2, 0, 3, 3, 0, 2, 2],\n         [1, 1, 0, 2, 2, 0, 1, 1],\n         [1, 1, 0, 2, 2, 0, 1, 1]]\n\n\n\nl = []\nfor i in range(6):\n    s = input();\n    ll = [] \n    for c in s:\n        ll.append(c)\n    l.append(ll)    \n\nfor k in [4, 3, 2, 1]:\n    for i in range(6):\n        for j in range(8):\n            if (table[i][j] == k and l[i][j] == \".\"):\n                l[i][j] = 'P';\n                for ll in l:\n                    s = \"\"\n                    for c in ll:\n                        s = s + c \n                    print(s)                \n                return", "cost = [\n  [3, 3, 0, 4, 4, 0, 3, 3],\n  [3, 3, 0, 4, 4, 0, 3, 3],\n  [2, 2, 0, 3, 3, 0, 2, 2],\n  [2, 2, 0, 3, 3, 0, 2, 2],\n  [1, 1, 0, 2, 2, 0, 1, 1],\n  [1, 1, 0, 2, 2, 0, 1, 1]]\n\narr = []\nans = 0\n\nfor row in range(6):\n  arr.append(input())\n  for col in range(8):\n    if cost[row][col] > ans and arr[row][col] == '.':\n      ans = cost[row][col]\n\nfor row in range(6):\n  for col in range(8):\n    if cost[row][col] == ans and arr[row][col] == '.':\n      arr[row] = arr[row][:col] + 'P' + arr[row][col + 1:]\n      ans = -1\n      break\n  print(arr[row])\n", "a = []\n\nb = []\nb.append(3)\nb.append(3)\nb.append(0)\nb.append(4)\nb.append(4)\nb.append(0)\nb.append(3)\nb.append(3)\na.append(b)\nb = []\nb.append(3)\nb.append(3)\nb.append(0)\nb.append(4)\nb.append(4)\nb.append(0)\nb.append(3)\nb.append(3)\na.append(b)\nb = []\nb.append(2)\nb.append(2)\nb.append(0)\nb.append(3)\nb.append(3)\nb.append(0)\nb.append(2)\nb.append(2)\na.append(b)\nb = []\nb.append(2)\nb.append(2)\nb.append(0)\nb.append(3)\nb.append(3)\nb.append(0)\nb.append(2)\nb.append(2)\na.append(b)\nb = []\nb.append(1)\nb.append(1)\nb.append(0)\nb.append(2)\nb.append(2)\nb.append(0)\nb.append(1)\nb.append(1)\na.append(b)\nb = []\nb.append(1)\nb.append(1)\nb.append(0)\nb.append(2)\nb.append(2)\nb.append(0)\nb.append(1)\nb.append(1)\na.append(b)\nmax = 0\na1 = []\npos1 = 0\npos2 = 0\nfor i in range(6):\n    str = input()\n    for i1 in range(8):\n        if (str[i1] == '.' and a[i][i1] > max):\n            max = a[i][i1]\n            pos1 = i\n            pos2 = i1\n    a1.append(str)\nfor i in range(6):\n    for i1 in range(8):\n        if (i == pos1 and i1 == pos2):\n            print('P',end='')\n        else:\n            print(a1[i][i1], end='')\n    print()\n", "a = [[3, 3, 4, 4, 3, 3],\n     [3, 3, 4, 4, 3, 3],\n     [2, 2, 3, 3, 2, 2],\n     [2, 2, 3, 3, 2, 2],\n     [1, 1, 2, 2, 1, 1],\n     [1, 1, 2, 2, 1, 1]]\n\nb = []\ngo = True\nfor i in range(6):\n    b.append(input())\nfor x in range(4, 0, -1):\n    for i in range(6):\n        for j in range(6):\n            if a[i][j] == x:\n                if b[i][j + j // 2] == '.':\n                    b[i] = b[i][:j + j // 2] + 'P' + b[i][j + j // 2 + 1:]\n                    go = False\n                    break\n        if not go:\n            break\n    if not go:\n        break\n[print(i) for i in b]", "def good(i, j):\n    x = i // 2\n    y = j // 2\n    return (3 - x) + (y == 1)\n\n\nb = [0] * 6\nfor i in range(6):\n    b[i] = input().split('-')\n    b[i] = [b[i][0][0], b[i][0][1], b[i][1][0], b[i][1][1], b[i][2][0], b[i][2][1]]\nmx = 0\nmi = 0\nmj = 0;\nfor i in range(6):\n    for j in range(6):\n        if b[i][j] == '.':\n            if (good(i, j) > mx):\n                mx = good(i, j)\n                mi = i\n                mj = j\nb[mi][mj] = 'P'\nfor i in range(6):\n    print(b[i][0] + b[i][1] + '-' + b[i][2] + b[i][3] + '-' + b[i][4] + b[i][5])\n\n    \n\n", "a = [[3, 3, 4, 4, 3, 3], [3, 3, 4, 4, 3, 3], [2, 2, 3, 3, 2, 2], [2, 2, 3, 3, 2, 2], [1, 1, 2, 2, 1, 1], [1, 1, 2, 2, 1, 1]]\nb = [\"\".join(input().split('-')) for i in range(6)]\nans = []\nfor i in range(6):\n\tfor j in range(6):\n\t\tif b[i][j] == '.':\n\t\t\tans.append([a[i][j], i, j])\nans.sort(reverse=True)\nfor i in range(6):\n\tfor j in range(6):\n\t\tif i == ans[0][1] and j == ans[0][2]:\n\t\t\tprint('P', end='')\n\t\telse:\n\t\t\tprint(b[i][j], end='')\n\t\tif j == 1 or j == 3:\n\t\t\tprint('-', end='')\n\tprint('')", "all = []\nfor i in range(6):\n    all.append(''.join(input().split('-')))\ngood = [[3, 3, 4, 4, 3, 3],\n        [3, 3, 4, 4, 3, 3],\n        [2, 2, 3, 3, 2, 2],\n        [2, 2, 3, 3, 2, 2],\n        [1, 1, 2, 2, 1, 1],\n        [1, 1, 2, 2, 1, 1]]\nm = 0\nmi = [0, 0]\nfor i in range(6):\n    for j in range(6):\n        if all[i][j] == '.' and good[i][j] > m:\n            m = good[i][j]\n            mi = [i, j]\nall[mi[0]] = all[mi[0]][:mi[1]]+'P'+all[mi[0]][mi[1]+1:]\nfor i in range(6):\n    print(all[i][0]+all[i][1]+'-'+all[i][2]+all[i][3]+'-'+all[i][4]+all[i][5])", "txt = []\na =''\nfor i in range(6):\n    a = input()\n    txt.append(a)\n\nb = [[3,3,0,4,4,0,3,3], [3,3,0,4,4,0,3,3], [2,2,0,3,3,0,2,2], [2,2,0,3,3,0,2,2], [1,1,0,2,2,0,1,1], [1,1,0,2,2,0,1,1]]\n\nmax = 0\nmaxi =0\nmaxj = 0\nfor i in range(6):\n    for j in range(8):\n        if (txt[i][j] == '.'):\n            if(b[i][j] > max):\n                max = b[i][j]\n                maxi = i\n                maxj = j\n\nfor i in range(6):\n    if (i == maxi):\n        print(txt[i][:maxj] + 'P' + txt[i][maxj+1:])\n        continue\n    print(txt[i])\n", "cc = [[3,3,0,4,4,0,3,3],[3,3,0,4,4,0,3,3], [2,2,0,3,3,0,2,2] , [2,2,0,3,3,0,2,2],[1,1,0,2,2, 0,1,1],[1,1,0,2,2,0,1,1]]\nm = 0\nmi = -1\nmj = -1\nss=[]\nfor i in range(6):\n    s = list(input())\n    ss.append(s)\n    for j in range(8):\n        if s[j] == '.':\n            if cc[i][j] > m:\n                m = cc[i][j]\n                mi = i\n                mj = j\nif mi != -1 and mj != -1:\n    ss[mi][mj] = 'P'\nfor i in range(6):\n    print(''.join(ss[i]))", "room = []\n\nvalues = [[3,3,0,4,4,0,3,3],[3,3,0,4,4,0,3,3],[2,2,0,3,3,0,2,2],[2,2,0,3,3,0,2,2],[1,1,0,2,2,0,1,1],[1,1,0,2,2,0,1,1]]\n\nfor i in range(6):\n    room.append(input())\n\npx, py = -1, -1\nbest = -1\nfor i in range(6):\n    for j in range(8):\n        if room[i][j] == '.' and best < values[i][j]:\n            px, py = i, j\n            best = values[i][j]\nans = []\nfor i in range(6):\n    if px != i:\n        ans.append(room[i])\n    else:\n        ans.append((room[i])[:py] + 'P' + (room[i])[py+1:])\nfor i in range(6):\n    print(ans[i])", "n = 6\ntable = []\nans = []\nfor i in range(n):\n\ts = input()\n\ttable.append(s)\n\nind = 0\nif table[0][3] == '.':\n\tans.append(table[0][:3] + 'P' + table[0][4:])\n\tind = 1\nelif table[0][4] == '.':\n\tans.append(table[0][:4] + 'P' + table[0][5:])\n\tind = 1\nelif table[1][3] == '.':\n\tans.append(table[0])\n\tans.append(table[1][:3] + 'P' + table[1][4:])\n\tind = 2\nelif table[1][4] == '.':\n\tans.append(table[0])\n\tans.append(table[1][:4] + 'P' + table[1][5:])\n\tind = 2\n\n\nelif table[0][0] == '.':\n\tans.append('P' + table[0][1:])\n\tind = 1\nelif table[0][1] == '.':\n\tans.append(table[0][:1] + 'P' + table[0][2:])\n\tind = 1\nelif table[0][6] == '.':\n\tans.append(table[0][:6] +'P' + table[0][7:])\n\tind = 1\nelif table[0][7] == '.':\n\tans.append(table[0][:7] +'P')\n\tind = 1\n\nelif table[1][0] == '.':\n\tans.append(table[0])\n\tans.append('P' + table[1][1:])\n\tind = 2\nelif table[1][1] == '.':\n\tans.append(table[0])\n\tans.append(table[1][:1] + 'P' + table[1][2:])\n\tind = 2\nelif table[1][6] == '.':\n\tans.append(table[0])\n\tans.append(table[1][:6] +'P' + table[1][7:])\n\tind = 2\nelif table[1][7] == '.':\n\tans.append(table[0])\n\tans.append(table[1][:7] +'P')\n\tind = 2\n\n\nelif table[2][3] == '.':\n\tans.append(table[0])\n\tans.append(table[1])\n\tans.append(table[2][:3] + 'P' + table[2][4:])\n\tind = 3\nelif table[2][4] == '.':\n\tans.append(table[0])\n\tans.append(table[1])\n\tans.append(table[2][:4] + 'P' + table[2][5:])\n\tind = 3\nelif table[3][3] == '.':\n\tans.append(table[0])\n\tans.append(table[1])\n\tans.append(table[2])\n\tans.append(table[3][:3] + 'P' + table[3][4:])\n\tind = 4\nelif table[3][4] == '.':\n\tans.append(table[0])\n\tans.append(table[1])\n\tans.append(table[2])\n\tans.append(table[3][:4] + 'P' + table[3][5:])\n\tind = 4\n\nelif table[2][0] == '.':\n\tans.append(table[0])\n\tans.append(table[1])\n\tans.append('P' + table[2][1:])\n\tind = 3\nelif table[2][1] == '.':\n\tans.append(table[0])\n\tans.append(table[1])\n\tans.append(table[2][:1] + 'P' + table[2][2:])\n\tind = 3\nelif table[2][6] == '.':\n\tans.append(table[0])\n\tans.append(table[1])\n\tans.append(table[2][:6] +'P' + table[2][7:])\n\tind = 3\nelif table[2][7] == '.':\n\tans.append(table[0])\n\tans.append(table[1])\n\tans.append(table[2][:7] +'P')\n\tind = 3\n\nelif table[3][0] == '.':\n\tfor i in range(0, 3):\n\t\tans.append(table[i])\n\tans.append('P' + table[3][1:])\n\tind = 4\nelif table[3][1] == '.':\n\tfor i in range(0, 3):\n\t\tans.append(table[i])\n\tans.append(table[3][:1] + 'P' + table[3][2:])\n\tind = 4\nelif table[3][6] == '.':\n\tfor i in range(0, 3):\n\t\tans.append(table[i])\n\tans.append(table[3][:6] +'P' + table[3][7:])\n\tind = 4\nelif table[3][7] == '.':\n\tfor i in range(0, 3):\n\t\tans.append(table[i])\n\tans.append(table[3][:7] +'P')\n\tind = 4\n\nelif table[4][3] == '.':\n\tfor i in range(0, 4):\n\t\tans.append(table[i])\n\tans.append(table[4][:3] + 'P' + table[4][4:])\n\tind = 5\nelif table[4][4] == '.':\n\tfor i in range(0, 4):\n\t\tans.append(table[i])\n\tans.append(table[4][:4] + 'P' + table[4][5:])\n\tind = 5\nelif table[5][3] == '.':\n\tfor i in range(0, 5):\n\t\tans.append(table[i])\n\tans.append(table[5][:3] + 'P' + table[5][4:])\n\tind = 6\nelif table[5][4] == '.':\n\tfor i in range(0, 5):\n\t\tans.append(table[i])\n\tans.append(table[5][:4] + 'P' + table[5][5:])\n\tind = 6\n\t\n\n\t\nelif table[4][0] == '.':\n\tfor i in range(0, 4):\n\t\tans.append(table[i])\n\tans.append('P' + table[4][1:])\n\tind = 5\nelif table[4][1] == '.':\n\tfor i in range(0, 4):\n\t\tans.append(table[i])\n\tans.append(table[4][:1] + 'P' + table[4][2:])\n\tind = 5\nelif table[4][6] == '.':\n\tfor i in range(0, 4):\n\t\tans.append(table[i])\n\tans.append(table[4][:6] +'P' + table[4][7:])\n\tind = 5\nelif table[4][7] == '.':\n\tfor i in range(0, 4):\n\t\tans.append(table[i])\n\tans.append(table[4][:7] +'P')\n\tind = 5\n\nelif table[5][0] == '.':\n\tfor i in range(0, 5):\n\t\tans.append(table[i])\n\tans.append('P' + table[5][1:])\n\tind = 6\nelif table[5][1] == '.':\n\tfor i in range(0, 5):\n\t\tans.append(table[i])\n\tans.append(table[5][:1] + 'P' + table[5][2:])\n\tind = 6\nelif table[5][6] == '.':\n\tfor i in range(0, 5):\n\t\tans.append(table[i])\n\tans.append(table[5][:6] +'P' + table[5][7:])\n\tind = 6\nelif table[5][7] == '.':\n\tfor i in range(0, 5):\n\t\tans.append(table[i])\n\tans.append(table[5][:7] +'P')\n\tind = 6\n\nfor i in range(ind, n):\n\tans.append(table[i])\n\nfor i in ans:\n\tprint(i)", "n = 6\nm = 8\ndesk = []\nstat = []\nstat.append(\"33-44-33\")\nstat.append(\"33-44-33\")\nstat.append(\"22-33-22\")\nstat.append(\"22-33-22\")\nstat.append(\"11-22-11\")\nstat.append(\"11-22-11\")\nfor i in range(n):\n    desk.append(input())\nflag = 0\nval = 4\nwhile flag == 0 :\n    for i in range(n) :\n        for j in range(m) : \n            if (desk[i][j] == '.') :\n                if (flag == 0 and val == 4 and stat[i][j] == '4') :\n                    desk[i] = desk[i][:j] + 'P' + desk[i][j+1:]\n                    flag = 1\n                if (flag == 0 and val == 3 and stat[i][j] == '3') :\n                    desk[i] = desk[i][:j] + 'P' + desk[i][j+1:]\n                    flag = 1\n                if (flag == 0 and val == 2 and stat[i][j] == '2') :\n                    desk[i] = desk[i][:j] + 'P' + desk[i][j+1:]\n                    flag = 1\n                if (flag == 0 and val == 1 and stat[i][j] == '1') :\n                    desk[i] = desk[i][:j] + 'P' + desk[i][j+1:]\n                    flag = 1\n    val = val - 1\n\nfor i in desk :\n    print(i)\n                \n        \n    \n", "arr = [[3, 3, 4, 4, 3, 3],\n[3, 3, 4, 4, 3, 3],\n[2, 2, 3, 3, 2, 2],\n[2, 2, 3, 3, 2, 2],\n[1, 1, 2, 2, 1, 1],\n[1, 1, 2, 2, 1, 1]]\n\nbestX = -1\nbestY = -1\nbestI = -1\n\nlines = [''] * 6\nfor i in range(6):\n    lines[i] = input()\n    cnt = 0\n    for j in range(8):\n        if lines[i][j] == '.':\n            if bestX == -1 or arr[bestY][bestX] < arr[i][cnt]:\n                bestY, bestX, bestI = i, cnt, j\n\n        if j != 2 and j != 5:\n            cnt += 1\n\nlines[bestY] = lines[bestY][:bestI] + 'P' + lines[bestY][bestI + 1:]\n\n\nfor i in range(6):\n    print(lines[i])\n", "def print_results(rows):\n    for item in rows:\n        print(item)\n\n\ndef main():\n    rows = []\n\n    for i in range(6):\n        rows.append(input())\n\n    new_row = \"\"\n    for i, row in (enumerate(rows)):\n        if row[3] == '.':\n            rows[i] = row[:3] + \"P\" + row[4:]\n            print_results(rows)\n            return\n        elif row[4] == '.':\n            rows[i] = row[:4] + \"P\" + row[5:]\n            print_results(rows)\n            return\n        \n        if (new_row != \"\"):\n            rows[i - 1] = new_row\n            print_results(rows)\n            return\n\n        if row[0] == '.':\n            new_row = \"P\" + row[1:]\n        elif row[1] == '.':\n            new_row = row[0] + \"P\" + row[2:]\n        elif row[6] == '.':\n            new_row = row[:6] + \"P\" + row[7]\n        elif row[7] == '.':\n            new_row = row[:7] + \"P\"\n    \n    rows[5] = new_row\n    print_results(rows)\n    return\n\nmain()", "l = [[],[],[],[],[],[]];\ny = [[3, 3, 4, 4, 3, 3],\n     [3, 3, 4, 4, 3, 3],\n     [2, 2, 3, 3, 2, 2],\n     [2, 2, 3, 3, 2, 2],\n     [1, 1, 2, 2, 1, 1],\n     [1, 1, 2, 2, 1, 1]]\nfor i in range(6):\n    s = input()\n    for j in s:\n        if (j != '-'):\n            l[i].append(j)\nmaxm = 0\nmaxi = 0\nmaxj = 0\nfor i in range(6):\n    for j in range(6):\n        if (l[i][j] == '.'):\n            if (y[i][j] > maxm):\n                maxm = y[i][j]\n                maxi = i\n                maxj = j\nl[maxi][maxj] = 'P'\nfor i in range(6):\n    print(l[i][0], l[i][1], '-', l[i][2], l[i][3], '-',l[i][4], l[i][5], sep = '')", "#!/usr/bin/env python3\n\n\nvariants = []\nprice = (\n    (3,4,3),\n    (3,4,3),\n    (2,3,2),\n    (2,3,2),\n    (1,2,1),\n    (1,2,1)\n)\nmax_price = (0, 0, 0, 0)\nclass_map = []\nfor i in range(6):\n    current_row = input().split('-')\n    class_map.append(current_row)\n    for j, parta in enumerate(current_row):\n        for n, place in enumerate(parta):\n            if place == '.' and price[i][j] > max_price[0]:\n                max_price = (price[i][j], i, j, n)\ni, j, n = max_price[1:]\nto_change = class_map[i][j]\nif n:\n    class_map[i][j] = class_map[i][j][0] + 'P'\nelse:\n    class_map[i][j] = 'P' + class_map[i][j][1]\nfor row in class_map:\n    print('-'.join(row))", "def f(x, y) :\n    return  3 -  y + (x == 1)\n\ndef g(y) :\n    return y // 2\nS = list()\nans = 0\nfor i in range(0, 6) :\n    s = input()\n    for j in range(0, len(s)) :\n        if (s[j] == '.') :\n            ans = max(ans, f(j // 3, g(i)))\n    S.append(s)\nflag = True;\nfor i in range(0, 6) :\n    s = S[i]\n    if flag :\n        for j in range(0, len(s)) :\n            if (s[j] == '.' and f(j // 3, g(i)) == ans) :\n                if (j == 0) :\n                    s = 'P' + s[1:]\n                else :\n                    s = s[0:j] + 'P' + s[(j + 1):]\n                flag = False\n                break\n    print(s)", "\nfrom sys import stdin\n\narr = [stdin.readline().strip() for i in range(6)]\n\nprice = [\n    [3, 3, 4, 4, 3, 3],\n    [3, 3, 4, 4, 3, 3],\n    [2, 2, 3, 3, 2, 2],\n    [2, 2, 3, 3, 2, 2],\n    [1, 1, 2, 2, 1, 1],\n    [1, 1, 2, 2, 1, 1]\n]\n\nbest = 0\nfor i in range(6):\n    for j in range(2, 4):\n        if (arr[i][j + 1] == '.'):\n            best = max(best, price[i][j])\n    for j in range(0, 2):\n        if (arr[i][j] == '.'):           \n            best = max(best, price[i][j])\n    for j in range(4, 6):     \n        if (arr[i][j + 2] == '.'):\n            best = max(best, price[i][j])\n\n#print(best)\n\nfor i in range(6):\n    for j in range(2, 4):\n        if (arr[i][j + 1] == '.' and price[i][j] == best):\n            arr[i] = arr[i][:j + 1] + 'P' + arr[i][j + 2:]\n            print('\\n'.join(arr))\n            return\n    for j in range(0, 2):\n        if (arr[i][j] == '.' and price[i][j] == best):\n            arr[i] = arr[i][:j] + 'P' + arr[i][j + 1:]\n            print('\\n'.join(arr))\n            return\n    for j in range(4, 6):\n        if (arr[i][j + 2] == '.' and price[i][j] == best):\n            arr[i] = arr[i][:j + 2] + 'P' + arr[i][j + 3:]\n            print('\\n'.join(arr))\n            return\n", "\nar = [\n    [3, 3, -1, 4, 4, -1, 3, 3],\n    [3, 3, -1, 4, 4, -1, 3, 3],\n    [2, 2, -1, 3, 3, -1, 2, 2],\n    [2, 2, -1, 3, 3, -1, 2, 2],\n    [1, 1, -1, 2, 2, -1, 1, 1],\n    [1, 1, -1, 2, 2, -1, 1, 1],\n]\n\nstd = []\n\ndef main():\n    mx = -1\n    mq = -1\n    mi = -1\n    for q in range(6):\n        s = input()\n        std.append(s)\n        for i in range(8):\n            if( s[i] == '.' and ar[q][i] > mx):\n                mx = ar[q][i]\n                mq = q\n                mi = i\n    for q in range(6):\n        s = \"\"\n        for i in range(8):\n            if(q == mq and i == mi):\n                s += \"P\"\n            else:\n                s += std[q][i]\n        print(s)\n\nmain()\n", "def pr(u):\n    for i in range(6):\n        s = ''\n        for j in range(8):\n            s += u[i][j]\n        print(s)\n\np = []\nfor i in range(6):\n    s = input()\n    p.append(list(s))\n\npriority = [[0,3],[0,4],[1,3],[1,4],[0,0],[0,1],[0,6],[0,7],[1,0],[1,1],[1,6],[1,7],[2,3],[2,4],[3,3],[3,4],[2,0],[2,1],[2,6],[2,7],[3,0],[3,1],[3,6],[3,7],[4,3],[4,4],[5,3],[5,4],[4,0],[4,1],[4,6],[4,7],[5,0],[5,1],[5,6],[5,7]]\nfor a in priority:\n    if p[a[0]][a[1]] == '.':\n        p[a[0]][a[1]] = 'P'\n        pr(p)\n        break\n\n    \n\n", "m = [\n    [3,3,4,4,3,3],\n    [3,3,4,4,3,3],\n    [2,2,3,3,2,2],\n    [2,2,3,3,2,2],\n    [1,1,2,2,1,1],\n    [1,1,2,2,1,1]\n]\nmx = 0\nk = [list(input().replace('-', '')) for i in range(6)]\nfor y in range(6):\n    for x in range(6):\n        if k[y][x] == '.':\n            if m[y][x] > mx:\n                mx = max(m[y][x], mx)\n                maxpos = (y, x)\nk[maxpos[0]][maxpos[1]] = 'P'\nk = [l[:2]+['-']+l[2:4]+['-']+l[4:] for l in k]\nfor l in k:\n    print(*l,sep='')", "conv_map = [[3, 3, 0, 4, 4, 0, 3, 3], [2, 2, 0, 3, 3, 0, 2, 2], [1, 1, 0, 2, 2, 0, 1, 1]]\n\nres, prev = 0, None\n\na = [list(input()) for _ in range(6)]\nfor i in range(6):\n    for j in range(8):\n        if a[i][j] == '.':\n            if conv_map[i // 2][j] > res:\n                a[i][j] = 'P'\n                if prev:\n                    a[prev[0]][prev[1]] = '.'\n                prev = (i, j)\n                res = conv_map[i // 2][j]\n\nprint('\\n'.join(''.join(ai) for ai in a))\n", "\na=[[3,3,0,4,4,0,3,3],[3,3,0,4,4,0,3,3],[2,2,0,3,3,0,2,2],[2,2,0,3,3,0,2,2],[1,1,0,2,2,0,1,1],[1,1,0,2,2,0,1,1]]\n\nmx=0\nk=[]\nfor i in range(6):\n\ts=input()\n\tk.append(s)\n\tfor j in range(len(s)):\n\t\tif(s[j]=='.'):\n\t\t    if(a[i][j]>mx):\n\t\t        mx=a[i][j]\n\t\t        i1=i\n\t\t        i2=j\n\n\nfor i in range(6):\n    for j in range(8):\n\n        if(i==i1 and j==i2):\n            print(\"P\",end='')\n        else:\n            print(k[i][j],end='')\n    print()\n"]