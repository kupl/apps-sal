["import sys\n\ninp = sys.stdin\n#inp = open('input.txt', 'r')\n\nn = int(inp.readline())\na = list(map(int, inp.readline().split()))\n\n\nbest = [0, 0, 0]\nfor i in range(n):\n    nx_best = [0, 0, 0]\n    if a[i] in (1, 3):\n        nx_best[1] = max(best[0], best[2]) + 1\n    if a[i] in (2, 3):\n        nx_best[2] = max(best[0], best[1]) + 1\n    nx_best[0] = max(best)\n\n    best = nx_best[:]\n\nprint(n - max(best))\n", "3\n\nn = int(input())\na = list(map(int, input().split()))\n\ndp = [[-1791791791] * 4 for i in range(n)]\n\ndp[0][0] = 0\nif a[0] & 1:\n    dp[0][1] = 1\nif a[0] & 2:\n    dp[0][2] = 1\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1])\n    for j in range(1, 3):\n        if a[i] & j:\n            dp[i][j] = max(dp[i - 1][:j] + dp[i - 1][j + 1:]) + 1\n\nans = max(dp[-1])\nprint(n - ans)\n", "input()\nB = 10000\ns = [0, B, B]\nfor x in map(int, input().split()):\n\ts = [min(s) + 1, min(s[0::2]) if x & 1 else B, min(s[:2]) if x & 2 else B]\nprint(min(s))\n", "def dp(prev, ind):\n    nonlocal dar, n, con, gym\n    if ind >= n:\n        return 0\n    if (prev, ind) not in dar:\n        m = dp('free', ind+1)+1\n        if prev != 'con' and con[ind]:\n            m = min(m, dp('con', ind+1))\n        if prev != 'gym' and gym[ind]:\n            m = min(m, dp('gym', ind+1))\n        dar[(prev, ind)] = m\n\n    return dar[(prev, ind)]\n    \n\ndar = {}\nn = int(input())\nL = [int(x) for x in input().split()]\ncon = [x&1 for x in L]\ngym = [x&2 for x in L]\nprint(dp('free', 0))\n\n", "x = int(input())\nm = list(map(int, input().split()))\na = [[-1791791791] * 4 for i in range(x)]\na[0][0] = 0\nif m[0] & 1:\n    a[0][1] = 1\nif m[0] & 2:\n    a[0][2] = 1\nfor i in range(1, x):\n    a[i][0] = max(a[i - 1])\n    for j in range(1, 3):\n        if m[i] & j:\n            a[i][j] = max(a[i - 1][:j] + a[i - 1][j + 1:]) + 1\nmaxx = max(a[-1])\nprint(x - maxx)\n", "def main():\n\tn = input()\n\tL = [int(x) for x in input().split()]\n\tprint(solver(L))\n\ndef solver(L):\n\treturn helper(L, None)\n\ndef helper(L, last):\n\tif len(L) == 0:\n\t\treturn 0\n\tx = L[0]\n\tif last == \"gym\":\n\t\tif L[0] in [0, 2]:\n\t\t\treturn 1 + helper(L[1:], None)\n\t\telif L[0] in [1, 3]:\n\t\t\treturn helper(L[1:], \"contest\")\n\telif last == \"contest\":\n\t\tif L[0] in [0, 1]:\n\t\t\treturn 1 + helper(L[1:], None)\n\t\telif L[0] in [2, 3]:\n\t\t\treturn helper(L[1:], \"gym\")\n\telif last == None:\n\t\tif L[0] == 0:\n\t\t\treturn 1 + helper(L[1:], None)\n\t\telif L[0] == 1:\n\t\t\treturn helper(L[1:], \"contest\")\n\t\telif L[0] == 2:\n\t\t\treturn helper(L[1:], \"gym\")\n\t\telif L[0] == 3:\n\t\t\tfor i in range(1, len(L)):\n\t\t\t\tif L[i] == 0:\n\t\t\t\t\treturn 1 + helper(L[i + 1:], None)\n\t\t\t\telif L[i] == 1:\n\t\t\t\t\treturn helper(L[i + 1:], \"contest\")\n\t\t\t\telif L[i] == 2:\n\t\t\t\t\treturn helper(L[i + 1:], \"gym\")\n\t\t\treturn 0\n\telse:\n\t\tassert(False)\n\n# print(solver([1, 3, 2, 0]))\n# print(solver([1, 3, 3, 2, 1, 2, 3]))\n# print(solver([2, 2]))\n\nmain()", "def main():\n    input()\n    a1 = a2 = x1 = x2 = z = 0\n    for b in map(int, input()[::2]):\n        if 0 < b < 3:\n            if a1 == b:\n                a1 = 0\n                x1 += 1\n            else:\n                a1 = b\n            if a2 == b:\n                a2 = 0\n                x2 += 1\n            else:\n                a2 = b\n            if x1 != x2:\n                if x1 > x2:\n                    x1, a1 = x2, a2\n                else:\n                    x2, a2 = x1, a1\n        elif b:  # 3\n            a1 = 1 if a1 != 1 else 2\n            a2 = 2 if a2 != 2 else 1\n        else:  # 0\n            a1 = a2 = 0\n            z += 1\n    print(x1 + z)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\n\nd = [[10 ** 6] * 3 for i in range(n)]\nd[0][0] = 1\nif a[0] & 1:\n    d[0][1] = 0\nif a[0] & 2:\n    d[0][2] = 0\n\nfor i in range(1, n):\n    d[i][0] = min(d[i - 1]) + 1\n    if a[i] & 1:\n        d[i][1] = min(d[i - 1][0], d[i - 1][2])\n    if a[i] & 2:\n        d[i][2] = min(d[i - 1][0], d[i - 1][1])\n\nprint(min(d[-1]))\n", "\"\"\"\n    This code is part of the codeforces problems solved in the repository[1]. \n    All solutions are written in python3.\n    \n    [1]: https://github.com/praveendath92/codeforces\n\"\"\"\n\n####### common base functions ########\ndef read_line():\n    return input().strip()\n\ndef read_int():\n    return int(read_line())\n\ndef read_int_array():\n    return [int(i) for i in read_line().split(' ')]\n\ndef read_string_array():\n    return [i for i in read_line().split(' ')]\n\n####### End of base functions ########\n\n\n#=========== Start of main code ============\nT = read_int()\nD = read_int_array()\n\n# Day one checking and init of actual tasks per day\nAD = [-1]*len(D)\nAD[0] = D[0]\nrests = 1 if AD[0] == 0 else 0\n\n# Check for the remaining days\nfor i in range(1, len(D)):\n\tif D[i] == 0:\n\t\trests += 1\n\t\tAD[i] = 0\n\telif D[i] == 1:\n\t\tif AD[i-1] == 1:\n\t\t\trests += 1\n\t\t\tAD[i] = 0\n\t\telse:\n\t\t\tAD[i] = 1\n\telif D[i] == 2:\n\t\tif AD[i-1] == 2:\n\t\t\trests += 1\n\t\t\tAD[i] = 0\n\t\telse:\n\t\t\tAD[i] = 2\n\telif D[i] == 3:\n\t\tif AD[i-1] == 3:\n\t\t\tAD[i] = 3\n\t\telse:\n\t\t\tAD[i] = D[i] - AD[i-1]\n\nprint(rests)", "n, vr, vg, vc = int(input()), 0, 0, 0\nfor x in map(int, input().split()):\n    cr = min(vr, vg, vc) + 1\n    cg = min(vr, vc) if x & 2 else n\n    cc = min(vr, vg) if x & 1 else n\n    vr, vg, vc = cr, cg, cc\nprint(min(vr, vg, vc))", "n = int(input())\na = list(map(int, input().split()))\ncur = ans = 0\nfor i in a:\n    if i == 0:\n        cur = 0\n        ans += 1\n    if i == 1:\n        if cur in (0, 1):\n            cur = 2\n        else:\n            cur = 0\n            ans += 1\n    if i == 2:\n        if cur in (0, 2):\n            cur = 1\n        else:\n            cur = 0\n            ans += 1\n    if i == 3:\n        cur = {0: 0, 1: 2, 2: 1}[cur]\nprint(ans)\n", "n = int(input())\ndays = input().split()\nlast = '0'\ncounter = 0\nfor i in range(n):\n    if last == days[i] or days[i] == '0':\n        counter += 1\n        last = '0'\n    else:\n        if days[i] != '3':\n            last = days[i]\n        else:\n            if last == '1':\n                last = '2'\n            elif last == '2':\n                last = '1'\n            else:\n                if i < n - 1:\n                    if days[i+1] == '1':\n                        last = '2'\n                    elif days[i+1] == '2':\n                        last = '1'\nprint(counter)\n", "def val(a, action):\n    res = 1000\n    if a == 3:\n        res = 0\n    elif a == 1 and action == 'C':\n        res = 0\n    elif a == 2 and action == 'G':\n        res = 0\n    return res\n        \n\nn = int(input())\na = list(map(int, input().split()))\ncurr = {}\nprev = {'G':0,'C':0,'R':0}\nfor i in a:\n    curr['G'] = min(prev['C'], prev['R']) + val(i, 'G')\n    curr['C'] = min(prev['G'], prev['R']) + val(i, 'C')\n    curr['R'] = min(prev['C'], prev['G'], prev['R']) + 1\n    prev = curr.copy()\n\nprint(min(prev.values()))\n", "\"\"\"\n    http://codeforces.com/problemset/problem/698/A\n\n\"\"\"\nfrom sys import stdin, stdout\nfrom array import array\n\n\ndef solve(days):\n    rest_num = 0\n    prev_act = 0\n    for i in range(0, len(days)-1):\n        cur_act = days[i]\n        next_act = days[i+1]\n        # stdout.write(str(cur_act))\n        if cur_act == 0 or prev_act == cur_act:\n            prev_act = 0\n            rest_num += 1\n        elif prev_act != cur_act and cur_act != 3:\n            prev_act = cur_act\n        else:  # cur_act == 3\n            if prev_act in (1, 2):\n                prev_act = prev_act % 2 + 1\n            else:\n                if next_act in (1, 2):\n                    prev_act = next_act % 2 + 1\n\n        # rest_num += 1\n    return rest_num\n\n\ndef __starting_point():\n    use_stdio = True\n    days = []\n    if use_stdio:\n        length = int(stdin.readline())\n        days = array('i', list(map(int, stdin.readline().split()))+[3])\n        stdout.write(str(solve(days)))\n    else:\n        with open('input', 'r') as fin, open('output', 'w') as fout:\n            length = int(fin.readline())\n            days = array('i', list(map(int, fin.readline().split()))+[3])\n            fout.write(str(solve(days)))\n\n__starting_point()", "n = int(input())\ndp = [[0 for i in range(3)] for j in range(n+1)]\na = list(map(int,input().split()))\nfor i in range(1,n+1):\n    if a[i-1] == 1 or a[i-1] == 3:\n        dp[i][1] = max(dp[i-1][0],dp[i-1][2])+1\n    if a[i-1] == 2 or a[i-1] == 3:\n        dp[i][2] = max(dp[i-1][0],dp[i-1][1])+1\n    dp[i][0] = max(max(dp[i-1][0],dp[i-1][1]),dp[i-1][2])\n\nprint(n - max(max(dp[n][0],dp[n][1]),dp[n][2]))", "INF = 1000\n\nn = int(input())\ndesc = list(map(int, input().split()))\nr = {}\ng = {}\nc = {}\n\nr[0] = 0\ng[0] = 0\nc[0] = 0\ni = 0\n\nfor x in desc:\n    i += 1\n    if x == 0:\n        g[i] = INF\n        c[i] = INF\n        r[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n    elif x == 1:\n        g[i] = INF\n        c[i] = min(r[i-1], g[i-1])\n        r[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n    elif x == 2:\n        g[i] = min(r[i-1], c[i-1])\n        c[i] = INF\n        r[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n    elif x == 3:\n        r[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n        g[i] = min(r[i-1], c[i-1])\n        c[i] = min(r[i-1], g[i-1])\n\nprint(min([r[n], g[n], c[n]]))\n", "INF = 1000\nn = int(input())\ndesc = list(map(int, input().split()))\nr, g, c = {}, {}, {}\nr[0], g[0], c[0], i = 0, 0, 0, 0\nfor x in desc:\n    i += 1\n    r[i] = 1 + min([g[i-1], r[i-1], c[i-1]])\n    g[i] = INF if x < 2 else min(r[i-1], c[i-1])\n    c[i] = INF if x % 2 == 0 else min(r[i-1], g[i-1])\nprint(min([r[n], g[n], c[n]]))\n", "days = int(input())\nevents = [int(_) for _ in input().split()]\n\nrests = 0\nlast = 0\nfor event in events:\n    if event == 0:\n        rests += 1\n        last = 0\n    elif event == 1:\n        if last == 1:\n            rests += 1\n            last = 0\n        else:\n            last = 1\n    elif event == 2:\n        if last == 2:\n            rests += 1\n            last = 0\n        else:\n            last = 2\n    else:\n        if last == 1:\n            last = 2\n        elif last == 2:\n            last = 1\nprint(rests)\n", "n = int(input())\nl = list(map(int, input().split()))\noutput = 1 if l[0] == 0 else 0\nu = False\nfor i in range(1, n):\n    if l[i] == 0:\n        output += 1\n    elif l[i] == l[i - 1] and l[i] != 3:\n        output += 1\n        l[i] = 0\n    elif l[i] == 3:\n        if l[i - 1] == 1:\n            l[i] = 2\n        elif l[i - 1] == 2:\n            l[i] = 1\nprint(output)", "user = int(input())\nn = list(input().split(\" \"))\nl = len(n)-1\nif int(n[0]) == 3 and int(n[l])!=3:\n\tn.reverse()\nr = 0\na = 0\nc = 0\nres = []\nfor i in n:\n\tif int(i) == 0:\n\t\tr = r + 1\n\t\ta = 0\n\t\tc = c + 1\n\tif int(i) == 1 :\n\t\tif a == 0 or a!=2:\n\t\t\ta = 2\n\t\t\tc = c + 1\n\t\telse:\n\t\t\tr = r + 1 \n\t\t\ta = 0\n\t\t\tc = c + 1\n\tif int(i) == 2:\n\t\tif a == 0 or a!=1:\n\t\t\ta = 1\n\t\t\tc = c + 1\n\t\telse:\n\t\t\tr = r + 1\n\t\t\ta = 0\n\t\t\tc = c + 1\n\tif int(i) == 3:\n\t\tif a==0:\n\t\t\twhile c < len(n) and n[c] == 3:\n\t\t\t\tc = c + 1\n\t\t\tif c < len(n):\n\t\t\t\tif n[c] == 1:\n\t\t\t\t\ta = 2\n\t\t\t\telif n[c] == 2:\n\t\t\t\t\ta = 1\n\t\telif a!=1:\n\t\t\ta = 1\n\t\telif a!=2:\n\t\t\ta = 2\nprint(r)", "# Name : Sachdev Hitesh\n# College : GLSICA\nuser = int(input())\nn = list(input().split(\" \"))\nl = len(n)-1\n#if int(n[0]) == 3 and int(n[l])!=3:\n#\tn.reverse()\nr = 0\na = 0\nc = 0\nres = []\nfor i in n:\n\tif int(i) == 0:\n\t\tr = r + 1\n\t\ta = 0\n\t\tc = c + 1\n\tif int(i) == 1 :\n\t\tif a == 0 or a!=2:\n\t\t\ta = 2\n\t\t\tc = c + 1\n\t\telse:\n\t\t\tr = r + 1 \n\t\t\ta = 0\n\t\t\tc = c + 1\n\tif int(i) == 2:\n\t\tif a == 0 or a!=1:\n\t\t\ta = 1\n\t\t\tc = c + 1\n\t\telse:\n\t\t\tr = r + 1\n\t\t\ta = 0\n\t\t\tc = c + 1\n\tif int(i) == 3:\n\t\tif a==0:\n\t\t\twhile c < len(n) and n[c] == 3:\n\t\t\t\tc = c + 1\n\t\t\tif c < len(n):\n\t\t\t\tif n[c] == 1:\n\t\t\t\t\ta = 2\n\t\t\t\telif n[c] == 2:\n\t\t\t\t\ta = 1\n\t\telif a!=1:\n\t\t\ta = 1\n\t\telif a!=2:\n\t\t\ta = 2\nprint(r)", "def get_ints(string):\n    return list(map(int, string.split()))\n\n\ndef get_input():\n    n = int(input())\n    xs = get_ints(input())\n    return n, xs\n\n\ndef foo(xs, res, last):\n    # print(xs)\n    if len(xs) is []:\n        return res\n    for i, x in enumerate(xs):\n        if x == 0:\n            res += 1\n            last = 0\n\n        elif x == 1 and last == 1:\n            res += 1\n            last = 0\n        elif x == 1:\n            last = 1\n\n        elif x == 2 and last == 2:\n            res += 1\n            last = 0\n        elif x == 2:\n            last = 2\n\n        else:\n            if last == 1:\n                last = 2\n            elif last == 2:\n                last = 1\n            elif i < len(xs)-1 and xs[i+1] == 0:\n                last = 1\n            else:\n                return min(foo(xs[i+1:], res, 1), foo(xs[i+1:], res, 2))\n\n    return res\n\n\ndef main():\n    n, xs = get_input()\n    res = foo(xs, 0, 0)\n\n    print(res)\n    return res\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\ndef sport(v):\n    return v >= 2\n\n\ndef contest(v):\n    return v in [1, 3]\n\n\nLAST_CONTEST = 0\nLAST_SPORT = 1\n\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    \n    prev = [0, 0]\n    dp = [0, 0]\n    \n    for i in range(n):\n        v = a[i]\n        curr = [dp[0], dp[1]]\n        if sport(v):\n            curr[LAST_SPORT] = max(\n                dp[LAST_SPORT],\n                1 + prev[LAST_SPORT],\n                1 + dp[LAST_CONTEST])\n                \n        if contest(v):\n            curr[LAST_CONTEST] = max(\n                dp[LAST_CONTEST],\n                1 + prev[LAST_CONTEST],\n                1 + dp[LAST_SPORT])\n        prev = dp\n        dp = curr\n        #print(dp, contest(v), sport(v))\n    \n    print(n - max(dp))\n\n__starting_point()", "def __starting_point():\n    MAX = 100\n    n = int(input())\n    num = list()\n    for i in range(n + 1):\n        num.append([0, 0, 0])\n    line = str(input()).split()\n    for i in range(n):\n        if line[i] == '0':\n            num[i + 1][0] = 1 + min(num[i])\n            num[i + 1][1] = MAX\n            num[i + 1][2] = MAX\n        elif line[i] == '1':\n            num[i + 1][0] = 1 + min(num[i])\n            num[i + 1][1] = min(num[i][0], num[i][2])\n            num[i + 1][2] = MAX\n        elif line[i] == '2':\n            num[i + 1][0] = 1 + min(num[i])\n            num[i + 1][1] = MAX\n            num[i + 1][2] = min(num[i][0], num[i][1])\n        elif line[i] == '3':\n            num[i + 1][0] = 1 + min(num[i])\n            num[i + 1][1] = min(num[i][0], num[i][2])\n            num[i + 1][2] = min(num[i][0], num[i][1])\n    print(min(num[n]))\n\n__starting_point()"]