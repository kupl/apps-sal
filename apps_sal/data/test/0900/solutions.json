["def main():\n  S = str(input())\n \n  ans = [0] * 13\n  ans[0] = 1\n  MOD = 10**9 + 7\n\n  for i in S:\n      dp = [0] * 13\n      for j in range(13):\n          dp[(j * 10) % 13] = ans[j] % MOD\n      dp += dp\n      if i == '?':\n          for j in range(13):\n              ans[j] = sum(dp[j+4:j+14])\n      else:\n          for j in range(13):\n              ans[j] = dp[j + 13 - int(i)]\n\n  print(ans[5] % MOD)\n\ndef __starting_point():\n    main()\n__starting_point()", "MOD = 1000000007\n\ns = [-1 if x == '?' else int(x) for x in input()]\nn = len(s) + 1\n\ndp = [0] * 13\ndp[0] = 1\n\nr = [[(j-i)*4%13 for i in range(10)]for j in range(13)]\n\nfor i, x in enumerate(s):\n    next_dp = [0] * 13\n    if x == -1:\n        next_dp = [sum(dp[i] for i in j) for j in r]\n    else:\n        next_dp = [dp[j[x]] for j in r]\n    dp = [k % MOD for k in next_dp]\n\nprint(dp[5])", "import numpy as np\nfrom numpy.fft import rfft, irfft\nfrom itertools import cycle\n\nmod = 10 ** 9 + 7\nS = input()\n\nmat = []\nfor i in range(6):\n    w = np.zeros(13)\n    for j in range(10):\n        w[(10 ** i * j) % 13] += 1\n    mat.append(rfft(w))\n\nress = [[(10 ** i * j) % 13 for j in range(10)] for i in range(6)]\n\n\nstate = np.zeros(13)\nstate[0] = 1\nstate = rfft(state)\n\nres = 5\nfor keta, s in zip(cycle(list(range(6))), reversed(S)):\n    if s == \"?\":\n        state = state * mat[keta]\n    else:\n        res -= ress[keta][int(s)]\n\n    if state[0] >= 2 ** 50:\n        state = np.round(irfft(state, 13))\n        state = rfft(np.remainder(state, mod))\n\n\nstate = irfft(state, 13)\nprint((int(np.round(state[res % 13])) % mod))\n", "import sys\n#input = sys.stdin.buffer.readline\n\ndef main():\n    s = str(input())\n    l = len(s)\n    ans = [0 for _ in range(13)]\n    MOD = 10**9+7\n    ans[0] = 1\n    \n    for st in s:\n        dp = [0 for _ in range(13)]\n        for i in range(13):\n            dp[(10*i)%13] = ans[i]%MOD\n        dp += dp\n        if st != \"?\":\n            for i in range(13):\n                num = int(st)\n                ans[i] = dp[i+13-num]\n        else:\n            for i in range(13):\n                ans[i] = sum(dp[i+4:i+14])\n    \n    print(ans[5]%MOD)\n\ndef __starting_point():\n    main()\n__starting_point()", "mod1,mod2=10**9+7,998244353\nmod=mod1\ndp=[0]*13\ndp[0]=1\nfor i in input():\n    if i==\"?\":\n        dp=[sum(dp[4*(j-k)%13]for k in range(10))%mod for j in range(13)]\n    else:\n        x=int(i)\n        dp=[dp[4*(j-x)%13]for j in range(13)]\n    \n    #print(dp)\nprint(dp[5])", "S = [int(x) if x != \"?\" else -1 for x in input()]\nmod = int(1e9+7)\nr = [0]*13\nif S[0] != -1:\n    r[S[0]] = 1\nelse:\n    for i in range(10):\n        r[i] = 1\nfor i in range(1, len(S)):\n    dp = [0] * 26\n    for j in range(13):\n        dp[j * 10 % 13] += (r[j] % mod)\n\n    dp[13:26] = dp[0:13]\n    r = [0]*13\n    if S[i] == -1:\n        s = sum(dp[4:14])\n        for j in range(13):\n            r[j] += s\n            s += dp[j+1] - dp[4+j]\n    else:\n        for j in range(13):\n            r[j] += dp[13 - S[i] + j]\nprint(r[5] % mod)", "def main():\n  s = input()[::-1]\n  multiplier = 1\n  divisor = 10 ** 9 + 7\n  list10 = list(range(10))\n  list13 = list(range(13))\n  p = [0] * 13\n  np = [0] * 13\n  rt = [i % 13 for i in range(121)]\n  p[0] = 1\n  for i in range(len(s)):\n    if s[i] != '?':\n      r = rt[int(s[i]) * multiplier]\n      for j in list13:\n        np[rt[j + r]] = p[j]\n    else:\n      r = 0\n      for j in list10:\n        for k in list13:\n          np[rt[k + r]] += p[k]\n        r = rt[r + multiplier]\n    for j in list13:\n      p[j] = np[j] % divisor\n      np[j] = 0\n    multiplier = rt[10 * multiplier]\n  print((p[5]))\nmain()\n", "import sys,math,copy\n\ndef main():\n    # import numpy as np\n    input = sys.stdin.readline\n    S = ''.join(reversed(input().strip()))\n\n    # dp = np.zeros((13), dtype=int)\n    # dp_ = np.zeros((13), dtype=int)\n    dp = [0] * 13\n    dp_ = [0] * 13\n    mod13_list = [i % 13 for i in range(12 ** 2 + 1)]\n    list10 = list(range(10))\n    list13 = list(range(13))\n    divisor = 10 ** 9 + 7\n    dp_[0] = 1\n    mul = 1\n    for i in range(len(S)):\n        s = S[i]\n        if s == '?':\n            for d in list10:\n                m = mod13_list[(d * mul)]\n                for pm in list13:\n                    dp[mod13_list[(pm+m)]] += dp_[pm]\n\n        else:\n            si = int(s)\n            m = mod13_list[(si * mul)]\n            for pm in list13:\n                dp[mod13_list[(pm+m)]] = dp_[pm]\n\n        # dp_ = dp % divisor\n        # dp = dp * 0 # np.zeros((13), dtype=int)\n        for j in list13:\n            dp_[j] = dp[j] % divisor\n            dp[j] = 0\n        mul = mod13_list[(mul * 10)]\n    print(dp_[5])\n\ndef __starting_point():\n    main()\n__starting_point()", "S=input()\nmod=10**9+7\ndp=[0]*13\ndp[0]=1\nfor i in range(len(S)):\n  if S[i]=='?':\n    dp=[sum(dp[4*(j-k)%13] for k in range(10))%mod for j in range(13)]\n  else:\n    a=int(S[i])\n    dp=[dp[4*(j-a)%13]%mod for j in range(13)]\nprint(dp[5])", "# solution\n\nmodulous=10**9+7\nr=[[(j-i)*4%13 for i in range(10)]for j in range(13)]\nd=[1]+[0]*12\nfor c in input():\n  if c>\"9\":\n    d=[(sum(d[i] for i in j))%modulous for j in r]\n  else:\n    d=[d[((j-int(c))*4%13)] for j in range(13)]\n    \nprint(d[5])", "def main():\n    M=10**9+7\n    r=tuple(tuple((j-k)*9%13 for j in range(10))for k in range(13))\n    d=[1]+[0]*12\n    for c in input():\n      if c>'9':\n        d=[sum(d[j]for j in k)%M for k in r]\n      else:\n        d=[d[(int(c)-k)*9%13]for k in range(13)]\n    print(d[5])\nmain()", "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# #11254823\u3092\u53c2\u8003\n\n\ndef solve():\n    S = input()\n    mod = 10 ** 9 + 7\n\n    '''\n    \u6841\u6570\u6bce\u30fb\u4f59\u308a\u306e\u6570\u5b57\u3054\u3068\u306edp\u3092\u4f5c\u6210\u3059\u308b\u306b\u3042\u305f\u308a\u3001map\u3092\u4f5c\u308b.\n    \u305f\u3068\u3048\u3070\u65b0\u3057\u3044\u6570\u5b57Y\u306f\u524d\u306e\u6570\u5b57X\u306e\u53f3\u5074\u306b\u65b0\u305f\u306b\u6841\u3092\u4f5c\u3063\u3066\n        Y = X(\u524d\u306e\u6570\u5b57) * 10 + i(0 <= i <= 9)\n    \u3068\u8868\u305b\u308b.\n    \u3053\u306e Y \u306e\u4f59\u308a\u306f\u3001\n        Y % 13 = ((X % 13) * 10 + i) % 13\n    \u3068\u8868\u305b\u308b\u306e\u3067\u300110 * 13 \u306e\u30de\u30c3\u30d7\u3067\u3042\u3089\u304b\u3058\u3081\u8a08\u7b97\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u3067\u304d\u308b.\n    \u3053\u306e\u30de\u30c3\u30d7\u3092\u4ee5\u4e0b\u3067\u4f5c\u3063\u3066\u3044\u308b.\n        modmap[\u65b0\u3057\u3044\u6841\u306e\u6570\u5b57i][\u65b0\u3057\u3044\u4f59\u308a(Y % 13 = k)] = \u524d\u306e\u6570\u5b57\u306e\u6642\u306e\u4f59\u308a(X % 13 = j)\n    '''\n    modmap = []\n    for i in range(10):\n        modmap.append([0] * 13)\n        for j in range(13):\n            k = (j * 10 + i) % 13\n            modmap[i][k] = j\n\n    # \u306a\u305c\u6700\u521d\u30921\u306b\u3059\u308b\u306e\u304b\uff1f\n    # \u2192 S\u306e\u5148\u982d\u306b 0 \u3092\u56fa\u5b9a\u3067\u3064\u3051\u3066\u3082\u7d50\u679c\u306f\u5909\u5316\u3057\u306a\u3044. \u307e\u305f\u4ed8\u3051\u305f\u5834\u5408\u306e\u6700\u521d\u306e\u8a08\u7b97\u3067\u306f\u4f59\u308a0\u3068\u306a\u308b.\n    # \u2192 \u3069\u3093\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u3082\u5171\u901a\u306e\u521d\u671f\u72b6\u614b\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b.\n    dp = [1] + [0] * 12\n    for s in S:\n        if s == '?':\n            dp = [sum(dp[l] for l in modlist) % mod for modlist in zip(*modmap)]\n        else:\n            modlist = modmap[int(s)]\n            dp = [dp[modlist[l]] % mod for l in range(13)]\n\n    print((dp[5]))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "import numpy as np\n\nMOD = 1000000007\nS = input()[::-1]\n\na = 10 ** np.arange(6) % 13\nb = np.tile(np.arange(10),(6, 1))\nc = a * b.T % 13\nc = c.T\nf = np.zeros((6, 13, 13), dtype=np.int64)\nfor i in range(6):\n    f[i, 0, c[i]] = 1\n    for j in range(12):\n        f[i, j + 1] = np.roll(f[i, j], 1)\n\nprev = np.zeros(13, dtype=np.int64)\nprev[0] = 1\ndigit = 0\n\nfor i, c in enumerate(S):\n    k = i % 6\n    if c == '?':\n        cur = np.dot(prev, f[k]) % MOD\n        prev, cur = cur, prev\n    else:\n        digit += a[k] * (ord(c) - ord('0'))\n\nm = (5 - digit) % 13\nprint(prev[m])", "import numpy as np\nMOD = 10 ** 9 + 7\n\nS = [int(x) if x != \"?\" else -1 for x in input()]\nN = len(S)\n\n# \u73fe\u5728\u8003\u3048\u3066\u308b\u4e00\u3064\u524d\u306e\u6841\u6570\u3067\u3001\u4f59\u308a\u304c i \u306b\u306a\u308b\u6574\u6570\u306e\u500b\u6570\nr = [0]*13\n\n# \u307e\u305a\u4e00\u3064\u76ee\u306e\u5024\u304c\uff11\u306e\u4f4d\u3068\u3059\u308b\ns = S[0]\nif s != -1:\n  r[s] = 1\nelse:\n  for i in range(10):\n    r[i] = 1\n\n# \u6841\u3092\u9032\u3081\u306a\u304c\u3089\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8\nfor i in range(1, N):\n    # dp[j]\n    # \u73fe\u5728\u8003\u3048\u3066\u3044\u308b\u6841(i)\u3092\u9664\u304f\u3001\u4f59\u308a\u304c j \u3068\u306a\u308b\u6574\u6570\u306e\u500b\u6570\n    dp = [0]*26\n    # \u6841\u304c\u4e00\u3064\u4e0a\u304c\u308b\u306e\u3067\u3001\u4e00\u3064\u524d\u306e\u4f59\u308a\u304c 10 \u500d\u306b\u306a\u308b\n    for j in range(13):\n      dp[j*10%13] += r[j] % MOD\n    # \u30a2\u30af\u30bb\u30b9\u3092\u9ad8\u901f\u306b\u3059\u308b\u305f\u3081\uff12\u500d\u306e\u9577\u3055\u3068\u308b (dp[i] == dp[i + 13])\n    dp[13:26] = dp[0:13]\n    r = [0]*13\n    s = S[i]\n    if s == -1:\n      w = sum(dp[4:14])\n      for j in range(13):\n        r[j] += w\n        w += dp[j+1] -dp[j+4]\n    else:\n      for j in range(13):\n        r[j] += dp[13-s+j]\nprint(r[5]%MOD)        ", "S = str(input())\n\nans = [0] * 13\nans[0] = 1\nMOD = 10**9 + 7\n\nfor i in S:\n    dp = [0] * 13\n    for j in range(13):\n        dp[(j * 10) % 13] = ans[j] % MOD\n    dp += dp\n    if i == '?':\n        for j in range(13):\n            ans[j] = sum(dp[j+4:j+14])\n    else:\n        for j in range(13):\n            ans[j] = dp[j + 13 - int(i)]\n\nprint(ans[5] % MOD)", "MOD=10**9+7\nS=input()\nN=len(S)\nif N==1:\n  if S=='?' or int(S)==5:\n    print(1)\n  else:\n    print(0)\n  return\n\nif S[0]=='?':\n  x=[1]*10+[0]*3\nelse:\n  x=[0]*13\n  x[int(S[0])]=1\n\nfor i in range(1, N):\n  if S[i]=='?':\n    tmp=sum(x)\n    x=[\n      tmp-x[4]-x[8]-x[12],\n      tmp-x[3]-x[8]-x[12],\n      tmp-x[3]-x[7]-x[12],\n      tmp-x[3]-x[7]-x[11],\n      tmp-x[2]-x[7]-x[11],\n      tmp-x[2]-x[6]-x[11],\n      tmp-x[2]-x[6]-x[10],\n      tmp-x[1]-x[6]-x[10],\n      tmp-x[1]-x[5]-x[10],\n      tmp-x[1]-x[5]-x[9],\n      tmp-x[0]-x[5]-x[9],\n      tmp-x[0]-x[4]-x[9],\n      tmp-x[0]-x[4]-x[8]\n    ]\n  elif S[i]=='0':\n    x=[x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9]]\n  elif S[i]=='1':\n    x=[x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5]]\n  elif S[i]=='2':\n    x=[x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1]]\n  elif S[i]=='3':\n    x=[x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10]]\n  elif S[i]=='4':\n    x=[x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6]]\n  elif S[i]=='5':\n    x=[x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2]]\n  elif S[i]=='6':\n    x=[x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11]]\n  elif S[i]=='7':\n    x=[x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7]]\n  elif S[i]=='8':\n    x=[x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3]]\n  elif S[i]=='9':\n    x=[x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12]]\n    \n  x=[x[j]%MOD for j in range(13)]\n\nprint(x[5])", "m=10**9+7\ns=input()\nd=[1]+[0]*12\nfor i in range(len(s)):\n if s[i]== \"?\":d=[sum(d[(j-k)*4%13]for k in range(10))%m for j in range(13)]\n else:d=[d[(j-int(s[i]))*4%13]%m for j in range(13)]\nprint(d[5])", "s = input()\nq = s.count(\"?\")\nans = [0] * 13\nans[0] = 1\n\nfor v in s:\n    dp = [0] * 13\n    for j in range(13):\n        dp[(j * 10) % 13] = ans[j] % 1000000007\n    dp += dp\n    for j in range(13):\n        if v == '?':\n            ans[j] = sum(dp[j+4:j+14])\n        else:\n            ans[j] = dp[j - int(v)]\n\nprint((ans[5] % 1000000007))\n", "\ns = input()\nn = len(s)\ndp1 =[0 for _ in range(13)]\ndp1[0]=1\n\n\nmove = [[] for _ in range(13)]\n\nfor i in range(10):\n    for j in range(13):\n        move[(10*j+i)%13].append(j)\n\n\n\nfor i in range(n):\n    dp2 =[0 for _ in range(13)]\n    if s[i]==\"?\":\n        si = list(range(10))\n        for mod,ex in enumerate(move):\n            dp2[mod] += sum([dp1[x] for x in ex])\n    else:\n        si = int(s[i])\n        for j in range(13):\n            dp2[(10*j+si)%13]+=dp1[j]\n    dp1 = [x%(10**9+7) for x in dp2] \n\n\nprint((dp1[5]))\n", "S = str(input())\nans = [0] * 13\nans[0] = 1\nMOD = 10**9 + 7\nfor i in S:\n    dp = [0] * 13\n    for j in range(13):\n        dp[(j * 10) % 13] = ans[j] % MOD\n    dp += dp\n    if i == '?':\n        for j in range(13):\n            ans[j] = sum(dp[j+4:j+14])\n    else:\n        for j in range(13):\n            ans[j] = dp[j + 13 - int(i)]\nprint(ans[5] % MOD)", "MOD = 1000000007;\n\ns = [int(x) if x!=\"?\" else -1 for x in input()]\n\nn=len(s)\n\nr=[0]*13\n\nc=s[0]\nif (c!=-1):\n\tr[c]=1\nelse:\n\tfor i in range(10):r[i]=1\n\nfor i in range(1,n):\n\tdp=[0]*26\n\tfor j in range(13):dp[j*10%13]+=(r[j]%MOD)\n\tdp[13:26]=dp[0:13]\n\tc=s[i]\n\tr=[0]*13\n\tif (c==-1):\n\t\tw=sum(dp[4:14])\n\t\tfor j in range(13):\n\t\t\t\tr[j]+=w\n\t\t\t\tw=w+dp[j+1]-dp[4+j]\n\telse:\n\t\tfor j in range(13):\n\t\t\tr[j]+=dp[13-c+j]\nprint((r[5]%MOD))\n", "import numpy as np\n\n\ndef main():\n    n = 13\n    mod = 1000000007\n    r = 5\n    in_str = input()\n\n    amari_l = amari_list(n)\n    amari_m = amari_matrix(n, amari_l)\n\n    ans_list = initial(in_str[-1:], n)\n\n    for i, s in enumerate(reversed(in_str)):\n        if i == 0:\n            continue\n        if s == \"?\":\n            ans_list = np.dot(ans_list, amari_m[i % len(amari_m)]) % mod\n        else:\n            t = int(s) * amari_l[i % len(amari_l)] % n\n            ans_list = np.roll(ans_list, t)\n\n    print((int(ans_list[r] % mod)))\n\n\ndef initial(s, n):\n    if s == \"?\":\n        return np.array([1 if i < 10 else 0 for i in range(n)], dtype='int64')\n    else:\n        return np.array([1 if i == int(s) else 0 for i in range(n)], dtype='int64')\n\n\ndef shift(n, r):\n    return np.array([[1 if (i - j + r) % n == 0 else 0 for j in range(n)] for i in range(n)])\n\n\ndef amari_list(n):\n    ret = []\n    for i in range(n + 1):\n        r = 10**i % n\n        if r in ret:\n            return ret\n        else:\n            ret.append(r)\n\n\ndef amari_matrix(n, amari_list):\n    ret = np.zeros((len(amari_list), n, n))\n    for i, j in enumerate(amari_list):\n        tmp = np.zeros((n, n))\n        for k in range(10):\n            tmp += shift(n, j * k % n)\n        ret[i] = tmp\n    return ret\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys,math,copy\n\ndef main():\n    # import numpy as np\n    input = sys.stdin.readline\n    S = ''.join(reversed(input().strip()))\n\n    # dp = np.zeros((13), dtype=int)\n    # dp_ = np.zeros((13), dtype=int)\n    dp = [0] * 13\n    dp_ = [0] * 13\n    mod13_tuple = tuple([i % 13 for i in range(12 ** 2 + 1)])\n    tuple10 = tuple(range(10))\n    tuple13 = tuple(range(13))\n    divisor = 10 ** 9 + 7\n    dp_[0] = 1\n    mul = 1\n    for i in range(len(S)):\n        s = S[i]\n        if s == '?':\n            for d in tuple10:\n                m = mod13_tuple[(d * mul)]\n                for pm in tuple13:\n                    dp[mod13_tuple[(pm+m)]] += dp_[pm]\n\n        else:\n            si = int(s)\n            m = mod13_tuple[(si * mul)]\n            for pm in tuple13:\n                dp[mod13_tuple[(pm+m)]] = dp_[pm]\n\n        # dp_ = dp % divisor\n        # dp = dp * 0 # np.zeros((13), dtype=int)\n        for j in tuple13:\n            dp_[j] = dp[j] % divisor\n            dp[j] = 0\n        mul = mod13_tuple[(mul * 10)]\n    print(dp_[5])\n\nmain()", "S = [int(x) if x != \"?\" else -1 for x in input()]\ng = 10 ** 9 + 7\nx = 1\nDP = [[0] * 13 for _ in range(2)]\nDP[0][0] = 1\nfor i in range(len(S)):\n    for j in range(13):\n        DP[1][j] = DP[0][j] % g\n        DP[0][j] = 0\n    for j in range(13):\n        if S[i] == -1:\n            s = (j*10)%13\n            e = (s+10)%13\n        else:\n            s = (j*10+S[i])%13\n            e = (s+1)%13\n        DP[0][s] += DP[1][j]\n        if s > e:\n            DP[0][0] += DP[1][j]\n        DP[0][e] -= DP[1][j]\n    w = 0\n    for j in range(13):\n        w += DP[0][j]\n        DP[0][j] = w\n\nprint((DP[0][5] % g))\n", "mod=10**9+7\nr=[[(j-k)*9%13 for j in range(10)] for k in range(13)]\ndp=[1]+[0]*12\nfor c in input():\n  dp = [sum(dp[j] for j in k)%mod for k in r] if c>'9' else [dp[(int(c)-k)*9%13] for k in range(13)]\nprint(dp[5])", "S=input()\nA=[1,0,0,0,0,0,0,0,0,0,0,0,0]\na=10**9+7\nfor i in range(len(S)):\n  B=A[:]\n  if S[i]==\"?\":\n    A[0]=(B[0]+B[9]+B[5]+B[1]+B[10]+B[6]+B[2]+B[11]+B[7]+B[3])%a\n    A[1]=(B[4]+B[0]+B[9]+B[5]+B[1]+B[10]+B[6]+B[2]+B[11]+B[7])%a\n    A[2]=(B[8]+B[4]+B[0]+B[9]+B[5]+B[1]+B[10]+B[6]+B[2]+B[11])%a\n    A[3]=(B[12]+B[8]+B[4]+B[0]+B[9]+B[5]+B[1]+B[10]+B[6]+B[2])%a\n    A[4]=(B[3]+B[12]+B[8]+B[4]+B[0]+B[9]+B[5]+B[1]+B[10]+B[6])%a\n    A[5]=(B[7]+B[3]+B[12]+B[8]+B[4]+B[0]+B[9]+B[5]+B[1]+B[10])%a\n    A[6]=(B[11]+B[7]+B[3]+B[12]+B[8]+B[4]+B[0]+B[9]+B[5]+B[1])%a\n    A[7]=(B[2]+B[11]+B[7]+B[3]+B[12]+B[8]+B[4]+B[0]+B[9]+B[5])%a\n    A[8]=(B[6]+B[2]+B[11]+B[7]+B[3]+B[12]+B[8]+B[4]+B[0]+B[9])%a\n    A[9]=(B[10]+B[6]+B[2]+B[11]+B[7]+B[3]+B[12]+B[8]+B[4]+B[0])%a\n    A[10]=(B[1]+B[10]+B[6]+B[2]+B[11]+B[7]+B[3]+B[12]+B[8]+B[4])%a\n    A[11]=(B[5]+B[1]+B[10]+B[6]+B[2]+B[11]+B[7]+B[3]+B[12]+B[8])%a\n    A[12]=(B[9]+B[5]+B[1]+B[10]+B[6]+B[2]+B[11]+B[7]+B[3]+B[12])%a\n  else:\n    s=int(S[i])\n    for i in range(13):\n      A[i]=B[(i*4+9*s)%13]\nprint((A[5]))\n    \n        \n   \n", "M=10**9+7\nr=[[(j-i)*4%13 for i in range(10)]for j in range(13)]\nd=[1]+[0]*12\nfor c in input():\n  if c>\"9\":\n    d=[(sum(d[i] for i in j))%M for j in r]\n  else:\n    d=[d[((j-int(c))*4%13)] for j in range(13)]\n    \nprint(d[5])", "s = input()\n\nfrommap = []\nfor d in range(10):\n    frommap.append([0] * 13)\n    for m in range(13):\n        m2 = (m * 10 + d) % 13\n        frommap[d][m2] = m\ntransmap = list(zip(*frommap))\n\ndp = [1] + [0] * 12\nfor c in s:\n    if c == '?':\n        dp = [sum(dp[f] for f in fromlist) % 1000000007 for fromlist in transmap]\n    else:\n        dp = [dp[f] for f in frommap[int(c)]]\n\nprint(dp[5])", "MOD = 10**9 + 7\nS = input()\n\ncur = [0] * 13\ncur[0] = 1\nr = 1\nbase = 0\nfor i in range(len(S)):\n    s = S[-(i+1)]\n    if s == '?':\n        prev = cur\n        cur = [sum(prev)] * 13\n        for m in range(13):\n            for d in range(10,13):\n                cur[(m + r*d) % 13] -= prev[m]\n        for m in range(13):\n            cur[m] %= MOD\n    else:\n        base = (base + r*int(s)) % 13\n\n    r = (10 * r) % 13\n\nprint(cur[(5-base) % 13])", "def main():\n  s = ''.join(reversed(input()))\n  multiplier = 1\n  divisor = 10 ** 9 + 7\n  list10 = list(range(10))\n  list13 = list(range(13))\n  p = [0 for i in list13]\n  np = [0 for i in list13]\n  rt = [i % 13 for i in range(100)]\n  if s[0] != '?':\n    p[int(s[0])] = 1\n  else:\n    for j in range(10):\n      p[j] = 1\n  for i in range(1, len(s)):\n    multiplier = (10 * multiplier) % 13\n    if s[i] != '?':\n      r = int(s[i]) * multiplier\n      for j in list13:\n        np[(j + r) % 13] = p[j]\n    else:\n      for j in range(10):\n        r = multiplier * j % 13\n        for k in list13:\n          np[rt[k + r]] += p[k]\n    for j in list13:\n      p[j] = np[j] % divisor\n      np[j] = 0\n  print(p[5] % divisor)\nmain()", "M=10**9+7\nr=[[(j-k)*9%13 for j in range(10)]for k in range(13)]\nd=[1]+[0]*12\nfor c in input():\n    d = [sum(d[j]for j in k)%M for k in r] if c>'9' else [d[(int(c)-k)*9%13]for k in range(13)]\nprint(d[5])", "MOD = 1000000007;\n \ns = [int(x) if x!=\"?\" else -1 for x in input()]\n#print(s)\nn=len(s)\n \nr=[0]*13\n \nc=s[0]\nif (c!=-1):\n    r[c]=1\nelse:\n    for i in range(10):r[i]=1\nfor i in range(1,n):\n    dp=[0]*26\n    for j in range(13):dp[j*10%13]+=(r[j]%MOD)\n    dp[13:26]=dp[0:13]\n    c=s[i]\n    r=[0]*13\n    if (c==-1):\n        w=sum(dp[4:14])\n        for j in range(13):\n            r[j]+=w\n            w=w+dp[j+1]-dp[4+j]\n    else:\n        for j in range(13):\n            r[j]+=dp[13-c+j]\nprint (r[5]%MOD)", "s = input()\nans,mod = [0]*13,10**9+7\nif s[0]==\"?\": ans = [1]*10+[0]*3\nelse: ans[int(s[0])] = 1\nfor i in s[1:]:\n    dp = [0]*13\n    for j in range(13): dp[j*10%13] = ans[j]%mod\n    dp+=dp\n    if i==\"?\":\n        for j in range(13): ans[j] = sum(dp[j+4:j+14])\n    else:\n        for j in range(13): ans[j] = dp[j+13-int(i)]\nprint(ans[5]%mod)", "M = 10**9+7\nr = tuple(tuple((j-i) * 4 % 13 for i in range(10)) for j in range(13))\nd = [1] + [0] * 12\nfor c in input():\n    if c > \"9\":\n        d = [(sum(d[i] for i in j)) % M for j in r]\n    else:\n        d = [d[((j - int(c)) * 4 % 13)] for j in range(13)]\nprint(d[5])", "import sys\n \ns= sys.stdin.readline().strip()\n#\nMOD=10**9+7\nmmap= []\nfor i in range(6):\n    b = 10**i % 13\n    mmap.append( [ [ (b*i+j)%13 for i in range(1,10) ] for j in range(13) ] )\n#\ndp= [ 0 ] * 13\ndp[0] = 1\nj= 0\nfor c in reversed(s):\n    tmp = dp.copy()\n    #\n    if c==\"0\": pass\n    elif c==\"?\":\n        bset = mmap[j]\n        for m,num in enumerate(tmp):\n            if num==0: continue\n            for idx in bset[m]: dp[idx]+=num\n        #\n        for i in range(13): dp[i]%=MOD\n    else:\n        b= mmap[j][0][int(c)-1]\n        for m in range(13):\n            idx= (m+b)%13\n            dp[idx]= tmp[m]\n    #\n    if j==5: j=0\n    else: j+=1\n#\nprint((dp[5]))\n", "import numpy as np\ns = input()\n\nA = []\nfor i in range(6):\n    m = [-(j*10**i%13)%13 for j in range(10)]\n    tmp = []\n    for j in m:\n        tmp.append([[1 if (k-l)%13==j else 0 for k in range(13)] for l in range(13)])\n    tmp.append([[1 if (k-l)%13 in m else 0 for k in range(13)] for l in range(13)])\n    A.append(tmp)\nA = np.array(A)\n\ndp = np.zeros(13, dtype=int)\ndp[0] = 1\nm = 1\nfor ind, i in enumerate(reversed(s)):\n    i = int(i) if i!='?' else 10\n    tmp = np.dot(A[ind%6, i, :, :], dp)\n    dp = tmp%(10**9+7)\nprint((dp[5]))\n", "def main():\n    MOD = 10 ** 9 + 7\n\n    s = input()\n    r = [0] * 13\n    r[0] = 1\n    p = 1\n    for c in reversed(s):\n        if c == '?':\n            tank = []\n            for x in range(10):\n                x = x * p % 13\n                tank.append(r[13 - x:] + r[:13 - x])\n            r = list(map(sum, list(zip(*tank))))\n            *r, = [x % MOD for x in r]\n\n\n        else:\n            x = int(c)\n            x = x * p % 13\n            r = r[13 - x:] + r[:13 - x]\n        p = p * 10 % 13\n\n    print((r[5]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n  M=10**9+7\n  r=tuple(tuple((j-k)*9%13for j in range(10))for k in range(13))\n  d=[1]+[0]*12\n  for c in input():\n    if c>'9':\n      d=[sum(d[j]for j in k)%M for k in r]\n    else:\n      d=[d[(int(c)-k)*9%13]for k in range(13)]\n  print(d[5])\nmain()", "#coding: utf-8\nimport math\nimport heapq\nimport bisect\n\nMOD = 10**9+7\n\nS = input()\nans = [0]*13\nans[0]=1\n \nfor c in S:\n    dp=[0]*13\n    for i in range(13):\n        #dp\u306fans\u3092\u4e00\u6841\u305a\u3089\u3057\u305f\u3082\u306e\n        dp[(i*10)%13]=ans[i]%MOD\n    #0~12\u306813~25\u3068\u540c\u3058\u3082\u306e\u3092\u5897\u8a2d\n    dp+=dp\n \n    if c=='?':\n        for i in range(13):\n            #\u6dfb\u5b57\u309213\u304b\u308926\u307e\u3067\u5897\u3084\u3057\u305f\u304b\u3089\u3001\u3053\u3053\u3067\u3053\u3046\u697d\u306a\u8a08\u7b97\u304c\u3067\u304d\u308b\u3002\n            ans[i]=sum(dp[i+4:i+14])\n    else:\n        for i in range(13):\n            ans[i]=dp[i+13-int(c)]\n\nprint(ans[5]%MOD)", "def main():\n  s = input()\n  divisor = 10 ** 9 + 7\n  dp = [[0] * 13 for _ in range(len(s) + 1)]\n  dp[0][0] = 1\n  lut = [i % 13 for i in range(130)]\n  list10 = list(range(10))\n  list13 = list(range(13))\n  for i in range(len(s)):\n    dpi = dp[i]\n    dpi1 = dp[i + 1]\n    if s[i] == '?':\n      j10 = 0\n      for j in list13:\n        dpij = dpi[j]\n        for k in list10:\n          dpi1[lut[j10 + k]] += dpij\n        j10 += 10\n    else:\n      t = int(s[i])\n      for j in list13:\n        dpi1[t] += dpi[j]\n        t = lut[t + 10]\n    for k in list13:\n      dpi1[k] %= divisor\n  print((dp[len(s)][5]))\nmain()\n", "s = input()\n\nmod = 10**9+7\nn = len(s)\nres = [1] + [0] * 12\nfor ss in s:\n    dp = [0] * 13\n    for i in range(13):\n        dp[(10*i)%13] = res[i]\n    dp += dp\n\n    if ss == '?':\n        for i in range(13):\n            res[i] = sum(dp[i+4:i+14])\n    else:\n        for i in range(13):\n            res[i] = dp[i+13-int(ss)]\n    res = [v%mod for v in res]\nprint((res[5]))\n", "r = [[(j - k) * 9 % 13 for j in range(10)] for k in range(13)]\nd = [1] + [0] * 12\nM = 10 ** 9 + 7\nfor c in input():\n    if c == '?':\n        d = [sum(d[j] for j in k) % M for k in r]\n    else:\n        d = [d[(int(c) - k) * 9 % 13] for k in range(13)]\n    #print(d)\nprint(d[5])", "MOD = 10**9 + 7\nS = input()\n \ncur = [0] * 13\ncur[0] = 1\nr = 1\nbase = 0\nfor i in range(len(S)):\n    s = S[-(i+1)]\n    if s == '?':\n        prev = cur\n        cur = [sum(prev)] * 13\n        for m in range(13):\n            for d in range(10,13):\n                cur[(m + r*d) % 13] -= prev[m]\n        for m in range(13):\n            cur[m] %= MOD\n    else:\n        base = (base + r*int(s)) % 13\n \n    r = (10 * r) % 13\n \nprint(cur[(5-base) % 13])", "from itertools import accumulate\n\ndef solve():\n    MOD = 10**9 + 7\n\n    Ss = input()\n\n    dp = [0] * 13\n    dp[0] = 1\n    for d, Sd in enumerate(Ss):\n        dp2 = [0] * 26\n        for mod13 in range(13):\n            if Sd != '?':\n                x = int(Sd)\n                mod13n = (10*mod13 + x) % 13\n                dp2[mod13n] += dp[mod13]\n                dp2[mod13n+1] -= dp[mod13]\n            else:\n                mod13n = (10*mod13 + 0) % 13\n                dp2[mod13n] += dp[mod13]\n                dp2[mod13n+10] -= dp[mod13]\n        dp2 = list(accumulate(dp2))\n        dp = [(a+b) % MOD for a, b in zip(dp2[:13], dp2[13:])]\n\n    print((dp[5]))\n\n\nsolve()\n", "import numpy as np\n \ns = input()\np = np.array([0]*13)\np[0] = 1\n \namari = [[0]*13 for _ in range(13)]\nfor j in range(10):\n  for i in range(13):\n    amari[i][(i*10+j)%13] += 1\nM = np.array(amari)\n \nfor si in range(len(s)):\n  a = np.array([0]*13)\n  if s[si] == '?':\n    a = np.dot(p,M)\n  else:\n    c = int(s[si])\n    for i in range(13):\n      a[(i*10+c)%13] += p[i]\n  p = np.mod(a,1000000007)\nprint(p[5])", "S=input()\nimport numpy as np\nM=13\nMOD=10**9+7\ndp=np.zeros(M, dtype=np.int64)\ndp[0]=1\nidx = np.zeros(M, dtype=np.int8)\nwindow = np.ones(10, dtype=np.int8)\nfor i in range(M):\n  idx[i * 10 % M] = i\nfor s in S:\n  if s=='?':\n    tdp=dp[idx]\n    ndp = np.concatenate([tdp[4:], tdp])\n    dp = np.convolve(ndp, window, mode='valid') % MOD\n  else:\n    dp=np.roll(dp[idx],int(s))\nprint((dp[5]%MOD))\n\n", "from copy import copy\n\nMOD = 10**9 + 7\ns = input()\ncount = [0 for _ in range(13)]\ncount[0] = 1\nfor i in range(len(s)):\n    new = [0 for _ in range(13)]\n    for m in range(13):\n        new[(m * 10) % 13] = count[m]\n    count = new\n    if s[i] != \"?\":\n        div = int(s[i])\n        count = count[-div:] +  count[:-div]\n    else:\n        new = [0 for _ in range(13)]\n        pre = sum(count[:3])\n        SUM = sum(count) % MOD\n        for j in range(13):\n            pre += count[(j+3) % 13]\n            pre -= count[j % 13]\n            new[j] = (SUM - pre) % MOD\n        count = new\nprint(count[5])", "def main():\n  s = input()\n  divisor = 10 ** 9 + 7\n  dp = [[0] * 13 for _ in range(len(s) + 1)]\n  dp[0][0] = 1\n  lut = [i % 13 for i in range(130)]\n  list10 = list(range(10))\n  for i in range(len(s)):\n    dpi = dp[i]\n    dpi1 = dp[i + 1]\n    if s[i] == '?':\n      j10 = 0\n      for j in range(13):\n        dpij = dpi[j]\n        for k in list10:\n          dpi1[lut[j10 + k]] += dpij\n        j10 += 10\n    else:\n      t = int(s[i])\n      for j in range(13):\n        dpi1[lut[t]] += dpi[j]\n        t += 10\n    for k in range(13):\n      dp[i + 1][k] %= divisor\n  print((dp[len(s)][5]))\nmain()\n", "def dot(A, x):\n  return [sum([x[t]*A[s][t] for t in range(13)]) for s in range(13)]\n\nS=input()\nN=len(S)\nif N==1:\n  if S=='?' or int(S)==5:\n    print(1)\n  else:\n    print(0)\n  return\n\nMOD=10**9+7\n\nif S[0]=='?':\n  x=[1]*10+[0]*3\nelse:\n  x=[0]*13\n  x[int(S[0])]=1\n  \nP=[\n  [\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n  ],\n  [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]\n  ],\n  [\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  ],\n  [\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\n  ],\n  [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\n  ],\n  [\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  ],\n  [\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]\n  ],\n  [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]\n  ],\n  [\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  ],\n  [\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\n  ]\n]\n\nfor i in range(1, N):\n  if S[i]=='?':\n    tmp=sum(x)\n    x=[\n      tmp-x[4]-x[8]-x[12],\n      tmp-x[3]-x[8]-x[12],\n      tmp-x[3]-x[7]-x[12],\n      tmp-x[3]-x[7]-x[11],\n      tmp-x[2]-x[7]-x[11],\n      tmp-x[2]-x[6]-x[11],\n      tmp-x[2]-x[6]-x[10],\n      tmp-x[1]-x[6]-x[10],\n      tmp-x[1]-x[5]-x[10],\n      tmp-x[1]-x[5]-x[9],\n      tmp-x[0]-x[5]-x[9],\n      tmp-x[0]-x[4]-x[9],\n      tmp-x[0]-x[4]-x[8]\n    ]\n  elif S[i]=='0':\n    x=[x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9]]\n  elif S[i]=='1':\n    x=[x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5]]\n  elif S[i]=='2':\n    x=[x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1]]\n  elif S[i]=='3':\n    x=[x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10]]\n  elif S[i]=='4':\n    x=[x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6]]\n  elif S[i]=='5':\n    x=[x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2]]\n  elif S[i]=='6':\n    x=[x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11]]\n  elif S[i]=='7':\n    x=[x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7]]\n  elif S[i]=='8':\n    x=[x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3]]\n  elif S[i]=='9':\n    x=[x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12]]\n    \n  x=[x[j]%MOD for j in range(13)]\n    \nprint(x[5])", "#abc135d\ns=input()\nmod=10**9+7\nres=[0]*13\nres[0]=1\nfor i in s:\n dp=[0]*13\n for j in range(13):\n  dp[(j*10)%13]=res[j]%mod\n dp+=dp\n if i=='?':\n  for k in range(13):\n   res[k]=sum(dp[k+4:k+14])\n else:\n  for k in range(13):\n   res[k]=dp[k+13-int(i)]\nprint(res[5]%mod)\n", "import numpy as np\nfrom numpy.fft import rfft, irfft\n\nmod = 10 ** 9 + 7\nS = input()\n\nmat = []\nfor i in range(6):\n    w = np.zeros(13)\n    for j in range(10):\n        w[(10 ** i * j) % 13] += 1\n    mat.append(rfft(w))\n\nress = [[(10 ** i * j) % 13 for j in range(10)] for i in range(6)]\n\n\nstate = np.zeros(13)\nstate[0] = 1\nstate = rfft(state)\n\nketa = 0\nres = 5\nfor s in reversed(S):\n    if s == \"?\":\n        state = state * mat[keta % 6]\n    else:\n        res -= ress[keta % 6][int(s)]\n\n    if state[0] >= 2 ** 50:\n        state = np.round(irfft(state, 13))\n        state = rfft(np.remainder(state, mod))\n\n    keta += 1\n\nstate = irfft(state, 13)\nprint((int(np.round(np.real(state[res % 13]))) % mod))\n", "def main():\n    s = input()\n    mod = 10 ** 9 + 7\n    table1 = [0] * 13\n    table2 = [0] * 13\n    table1[0] = 1\n    pre = [[((10 * i + j) % 13) for j in range(10)] for i in range(13)]\n\n    for l in s:\n        for i in range(13):\n            q = table1[i] % mod\n            if q == 0:\n                continue\n            if l == '?':\n                for k in pre[i]:\n                    table2[k] += q\n            else:\n                k = (10 * i + int(l)) % 13\n                table2[k] += q\n\n        table1 = table2\n        table2 = [0] * 13\n\n    print((table1[5] % mod))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\nfrom numpy.fft import rfft, irfft\nfrom itertools import cycle\n\nmod = 10 ** 9 + 7\nS = input()\n\nmat = []\nfor i in range(6):\n    w = np.zeros(13)\n    for j in range(10):\n        w[(10 ** i * j) % 13] += 1\n    mat.append(rfft(w))\n\nress = [[(10 ** i * j) % 13 for j in range(10)] for i in range(6)]\n\n\nstate = np.zeros(13)\nstate[0] = 1\nstate = rfft(state)\n\nres = 5\nfor keta, s in zip(cycle(list(range(6))), S[::-1]):\n    if s == \"?\":\n        state = state * mat[keta]\n        if state[0] >= 2 ** 50:\n            state = np.round(irfft(state, 13))\n            state = rfft(np.remainder(state, mod))\n    else:\n        res -= ress[keta][int(s)]\n\n\nstate = irfft(state, 13)\nprint((int(np.round(state[res % 13])) % mod))\n", "s = input()\n\nfrommap = []\nfor d in range(10):\n    frommap.append([0] * 13)\n    for m in range(13):\n        m2 = (m * 10 + d) % 13\n        frommap[d][m2] = m\n\ndp = [1] + [0] * 12\nfor c in s:\n    if c == '?':\n        dp = [sum(dp[f] for f in fromlist) % 1000000007 for fromlist in zip(*frommap)]\n    else:\n        dp = [dp[f] for f in frommap[int(c)]]\n\nprint(dp[5])", "modarr61=[76924, 76923, 76923, 76923, 76923, 76923, 76923, 76923, 76923, 76923, 76923, 76923, 76923]\nmodarr51=[7693, 7692, 7692, 7692, 7693, 7692, 7692, 7693, 7692, 7692, 7693, 7692, 7692]\nmodarr52=[7693, 7693, 7692, 7692, 7692, 7693, 7692, 7692, 7692, 7693, 7692, 7692, 7692]\nmodarr53=[7693, 7692, 7692, 7692, 7692, 7692, 7692, 7692, 7692, 7692, 7693, 7693, 7693]\nmodarr54=[7693, 7692, 7692, 7693, 7692, 7692, 7693, 7692, 7692, 7693, 7692, 7692, 7692]\nmodarr55=[7693, 7692, 7692, 7692, 7693, 7692, 7692, 7692, 7693, 7692, 7692, 7692, 7693]\nmodarr56=[7693, 7693, 7693, 7693, 7692, 7692, 7692, 7692, 7692, 7692, 7692, 7692, 7692]\nmodarr41=[770, 769, 769, 769, 769, 770, 769, 769, 769, 770, 769, 769, 769]\nmodarr42=[769, 769, 769, 769, 770, 769, 769, 770, 769, 769, 770, 769, 769]\nmodarr43=[770, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 770, 770]\nmodarr44=[772, 768, 768, 771, 769, 768, 770, 770, 768, 769, 771, 768, 768]\nmodarr45=[769, 770, 769, 769, 769, 770, 769, 769, 769, 770, 769, 769, 769]\nmodarr46=[770, 769, 769, 770, 769, 769, 770, 769, 769, 769, 769, 769, 769]\nmodarr47=[769, 769, 769, 769, 770, 769, 769, 769, 770, 769, 769, 769, 770]\nmodarr48=[772, 769, 768, 768, 771, 770, 768, 768, 770, 771, 768, 768, 769]\nmodarr49=[769, 769, 769, 769, 769, 769, 769, 769, 769, 769, 770, 770, 770]\nmodarr410=[770, 769, 769, 769, 770, 769, 769, 769, 770, 769, 769, 769, 769]\nmodarr411=[770, 769, 769, 769, 769, 769, 769, 770, 769, 769, 770, 769, 769]\nmodarr412=[769, 770, 770, 770, 769, 769, 769, 769, 769, 769, 769, 769, 769]\nmodarr413=[772, 771, 770, 769, 768, 768, 768, 768, 768, 768, 769, 770, 771]\nmodarr414=[769, 769, 769, 770, 769, 769, 770, 769, 769, 770, 769, 769, 769]\nmodarr415=[770, 770, 770, 769, 769, 769, 769, 769, 769, 769, 769, 769, 769]\nmodarr31=[77, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77]\nmodarr32=[77, 77, 77, 77, 76, 78, 77, 76, 77, 78, 76, 77, 77]\nmodarr33=[79, 76, 76, 78, 77, 76, 77, 78, 76, 76, 79, 76, 76]\nmodarr34=[77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 77, 77]\nmodarr35=[79, 76, 76, 76, 79, 77, 76, 76, 78, 78, 76, 76, 77]\nmodarr36=[76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77]\nmodarr37=[77, 76, 77, 77, 77, 76, 77, 77, 77, 76, 77, 78, 78]\nmodarr38=[77, 77, 77, 76, 78, 77, 76, 77, 78, 76, 77, 77, 77]\nmodarr39=[79, 77, 76, 76, 78, 78, 76, 76, 77, 79, 76, 76, 76]\nmodarr310=[77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 77, 77, 77]\nmodarr311=[77, 77, 77, 77, 76, 77, 77, 77, 77, 77, 77, 77, 77]\nmodarr312=[77, 76, 76, 76, 77, 77, 77, 78, 77, 77, 78, 77, 77]\nmodarr313=[79, 79, 78, 77, 76, 76, 76, 76, 76, 76, 76, 77, 78]\nmodarr314=[79, 76, 76, 79, 76, 76, 78, 77, 76, 77, 78, 76, 76]\nmodarr315=[76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77]\nmodarr316=[77, 77, 77, 78, 77, 77, 78, 77, 77, 77, 76, 76, 76]\nmodarr317=[77, 77, 77, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77]\nmodarr318=[77, 78, 78, 77, 76, 77, 77, 77, 76, 77, 77, 77, 76]\nmodarr319=[79, 78, 77, 76, 76, 76, 76, 76, 76, 76, 77, 78, 79]\nmodarr320=[77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76]\nmodarr21=[8, 7, 8, 8, 7, 8, 8, 7, 8, 8, 7, 8, 8]\nmodarr22=[7, 7, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8]\nmodarr23=[10, 7, 7, 7, 9, 8, 7, 7, 8, 9, 7, 7, 7]\nmodarr24=[7, 8, 8, 7, 8, 8, 7, 8, 8, 7, 8, 8, 8]\nmodarr25=[8, 7, 8, 8, 8, 7, 8, 8, 8, 7, 7, 8, 8]\nmodarr26=[8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]\nmodarr27=[7, 8, 8, 8, 7, 8, 8, 7, 8, 8, 7, 8, 8]\nmodarr28=[10, 7, 7, 9, 7, 7, 8, 8, 7, 7, 9, 7, 7]\nmodarr29=[7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7]\nmodarr210=[8, 8, 8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 7]\nmodarr211=[7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8]\nmodarr212=[10, 9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9]\nmodarr213=[8, 8, 8, 7, 8, 8, 7, 8, 8, 7, 8, 8, 7]\nmodarr214=[7, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 7]\nmodarr215=[8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7]\nmodarr11=[1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]\nmodarr12=[1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1]\nmodarr13=[1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmodarr14=[1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0]\nmodarr15=[1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1]\nmodarr16=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]\n\ndef makemod(n):\n  if n==100000:\n    return modarr11\n  elif n==10000:\n    return modarr12\n  elif n==1000:\n    return modarr13\n  elif n==100:\n    return modarr14\n  elif n==10:\n    return modarr15\n  elif n==1:\n    return modarr16\n  elif n==110000:\n    return modarr21\n  elif n==101000:\n    return modarr22\n  elif n==100100:\n    return modarr23\n  elif n==100010:\n    return modarr24\n  elif n==100001:\n    return modarr25\n  elif n==11000:\n    return modarr26\n  elif n==10100:\n    return modarr27\n  elif n==10010:\n    return modarr28\n  elif n==10001:\n    return modarr29\n  elif n==1100:\n    return modarr210\n  elif n==1010:\n    return modarr211\n  elif n==1001:\n    return modarr212\n  elif n==110:\n    return modarr213\n  elif n==101:\n    return modarr214\n  elif n==11:\n    return modarr215\n  elif n==111000:\n    return modarr31\n  elif n==110100:\n    return modarr32\n  elif n==110010:\n    return modarr33\n  elif n==110001:\n    return modarr34\n  elif n==101100:\n    return modarr35\n  elif n==101010:\n    return modarr36\n  elif n==101001:\n    return modarr37\n  elif n==100110:\n    return modarr38\n  elif n==100101:\n    return modarr39\n  elif n==100011:\n    return modarr310\n  elif n==11100:\n    return modarr311\n  elif n==11010:\n    return modarr312\n  elif n==11001:\n    return modarr313\n  elif n==10110:\n    return modarr314\n  elif n==10101:\n    return modarr315\n  elif n==10011:\n    return modarr316\n  elif n==1110:\n    return modarr317\n  elif n==1101:\n    return modarr318\n  elif n==1011:\n    return modarr319\n  elif n==111:\n    return modarr320\n  elif n==111100:\n    return modarr41\n  elif n==111010:\n    return modarr42\n  elif n==111001:\n    return modarr43\n  elif n==110110:\n    return modarr44\n  elif n==110101:\n    return modarr45\n  elif n==110011:\n    return modarr46\n  elif n==101110:\n    return modarr47\n  elif n==101101:\n    return modarr48\n  elif n==101011:\n    return modarr49\n  elif n==100111:\n    return modarr410\n  elif n==11110:\n    return modarr411\n  elif n==11101:\n    return modarr412\n  elif n==11011:\n    return modarr413\n  elif n==10111:\n    return modarr414\n  elif n==1111:\n    return modarr415\n  elif n==111110:\n    return modarr51\n  elif n==111101:\n    return modarr52\n  elif n==111011:\n    return modarr53\n  elif n==110111:\n    return modarr54\n  elif n==101111:\n    return modarr55\n  elif n==11111:\n    return modarr56\n\ns=input()\nl=len(s)\nif l%6!=0:\n  s='0'*(6-l%6)+s\n  l+=(6-l%6)\nmod=10**9+7\ncnt=0\ndp=[[0]*13 for _ in range(l//6+1)]\nfor i in range(l-1,-1,-6):\n  num=0\n  qpos=0\n  for j in range(6):\n    if s[i-j]=='?':\n      qpos+=1*(10**j)\n    else:\n      num+=int(s[i-j])*(10**j)\n  if qpos==0:\n    tmod=[0]*13\n    tmod[num%13]=1\n  elif qpos==111111:\n    tmod=modarr61\n  else:\n    tpos=num%13\n    tmod=makemod(qpos)\n    tmod=tmod[-tpos:]+tmod[:-tpos]\n  if cnt==0:\n    dp[1]=tmod\n  else:\n    for k in range(13):\n      for l in range(13):\n        dp[cnt+1][(k+l)%13]+=(tmod[k]*dp[cnt][l])%mod\n  cnt+=1\nprint(dp[cnt][5]%mod)", "import numpy as np\n\n\ndef main():\n    S = {i:s for i, s in enumerate(input()[::-1])}\n    MOD = 10**9 + 7\n    \n    DP_table = np.zeros(13).astype(np.int64)\n    \n    # \u521d\u671f\u5316\n    digit = S[0]\n    if digit == '?':\n        for i in range(10):\n            DP_table[i] = 1\n    else:\n        DP_table[int(digit)] = 1\n        \n    transition_matrixes = {}\n    for multiplier in range(13):\n        for digit in range(10):\n            transition_matrix = np.zeros((13, 13)).astype(np.int64)\n            for k in range(13):\n                transition_matrix[(digit * multiplier + k) % 13, k] = 1\n            transition_matrixes[(multiplier, digit)] = transition_matrix\n\n    transition_matrixes2 = {}\n    for multiplier in range(13):\n        transition_matrixes2[multiplier] = np.zeros((13, 13)).astype(np.int64)\n        for digit in range(10):\n            transition_matrixes2[multiplier] += transition_matrixes[(multiplier, digit)]\n            \n    # DP\n    multiplier = 1\n    for i in range(1, len(S)):\n        multiplier = multiplier * 10 % 13\n        digit = S[i]\n        if digit == '?':\n            transition_matrix = transition_matrixes2[multiplier]\n        else:\n            transition_matrix = transition_matrixes[(multiplier, int(digit))]\n        \n        DP_table = np.dot(transition_matrix, DP_table)\n        DP_table %= MOD\n\n    print((int(DP_table[5])))\n\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "# ABC135D - Digits Parade\n# digit DP\ndef main():\n    S = input().rstrip()\n    ans, MOD = [0] * 13, 10 ** 9 + 7\n    ans[0] = 1\n    for c in S:\n        dp = [0] * 13\n        for i in range(13):\n            dp[(i * 10) % 13] = ans[i] % MOD\n        dp += dp\n        if c == \"?\":\n            for i in range(13):\n                ans[i] = sum(dp[i + 4 : i + 14])\n        else:\n            x = int(c)\n            for i in range(13):\n                ans[i] = dp[i + 13 - x]\n    print(ans[5] % MOD)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "M=10**9+7\nr=[[(j-k)*9%13for j in range(10)]for k in range(13)]\nd=[1]+[0]*12\nfor c in input():\n  d = [sum(d[j]for j in k)%M for k in r] if c>'9' else [d[(int(c)-k)*9%13]for k in range(13)]\nprint(d[5])", "from sys import stdin\nimport numpy as np\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    mod=10**9+7\n    s=readline().strip()\n    n=len(s)\n\n    convert=[[0]*13 for i in range(13)]\n    for a in range(13):\n        for b in range(10):\n            convert[a][(10*a+b)%13]=1\n\n    convert=np.array(convert,dtype=np.int64)\n    dp=np.zeros(13,dtype=np.int64)\n    dp[0]=1\n    for i in range(n):\n        if s[i]==\"?\":\n            tmp=np.dot(dp,convert)\n        else:\n            x=int(s[i])\n            tmp=np.zeros(13,dtype=np.int64)\n            for j in range(13):\n                tmp[(j*10+x)%13]=dp[j]\n        tmp%=mod\n        dp=tmp\n\n    print(dp[5])\n    \ndef __starting_point():\n    main()\n__starting_point()", "def solve(S):\n    N = len(S)\n    MOD = 1_000_000_007\n    dp = [0] * 13\n    dp[0] = 1\n    for i in range(N):\n        tmp = [0] * 13\n        c = -1 if S[i] == \"?\" else int(S[i])\n        for j in range(10):\n            if c != -1 and c != j:\n                continue\n            for k in range(13):\n                tmp[(j + k * 10) % 13] += dp[k]\n        for j in range(13):\n            dp[j] = tmp[j] % MOD\n    return dp[5]\n\n\nprint((solve(input())))\n", "import numpy as np\nMOD=10**9+7\n\nS=[int(x) if x != \"?\" else -1 for x in input()]\nN=len(S)\n\n#\u73fe\u5728\u8003\u3048\u3066\u308b1\u3064\u524d\u306e\u6841\u6570\u3067, \u4f59\u308a\u304ci\u306b\u306a\u308b\u6574\u6570\u306e\u500b\u6570\nr=[0]*13\n\n#\u307e\u305a1\u3064\u76ee\u306e\u5024\u304c1\u306e\u4f4d\u3068\u3059\u308b\ns=S[0]\nif s != -1:\n  r[s] = 1\nelse:\n  for i in range(10):\n    r[i] = 1\n\n#\u6841\u3092\u9032\u3081\u306a\u304c\u3089\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8\nfor i in range(1,N):\n  #dp[j]\n  #\u73fe\u5728\u8003\u3048\u3066\u3044\u308b\u6841(i)\u3092\u9664\u304f, \u4f59\u308a\u304cj\u3068\u306a\u308b\u6574\u6570\u306e\u500b\u6570\n  dp = [0]*26\n  #\u6841\u304c1\u3064\u4e0a\u304c\u308b\u306e\u3067, 1\u3064\u524d\u306e\u3042\u307e\u308a\u304c10\u500d\u306b\u306a\u308b\n  for j in range(13):\n    dp[j*10%13] += r[j] % MOD\n  #\u30a2\u30af\u30bb\u30b9\u3092\u9ad8\u901f\u306b\u3059\u308b\u305f\u30812\u500d\u306e\u9577\u3055\u3092\u3068\u308b(dp[i]==di[i+13])\n  dp[13:26] = dp[0:13]\n  r=[0]*13\n  s=S[i]\n  if s == -1:\n    w=sum(dp[4:14])\n    for j in range(13):\n      r[j] += w\n      w += dp[j+1] -dp[j+4]\n  else:\n    for j in range(13):\n      r[j] += dp[13-s+j]\nprint(r[5]%MOD)", "def main():\n    M=10**9+7\n    r=tuple(tuple((j-k)*9%13for j in range(10))for k in range(13))\n    d=[1]+[0]*12\n    for c in input():\n        if c > '9':\n            d = [sum(d[j] for j in k)%M for k in r] \n        else:\n            d = [d[(int(c)-k)*9%13] for k in range(13)]\n    print((d[5]))\nmain()\n", "M=10**9+7\nr=[[(j-k)*9%13for j in range(10)]for k in range(13)]\nd=[1]+[0]*12\nfor c in input():\n  d = [sum(d[j]for j in k)%M for k in r] if c>'9' else [d[(int(c)-k)*9%13]for k in range(13)]\nprint(d[5])", "M=10**9+7\nr=tuple(tuple((j-i)*4%13 for i in range(10))for j in range(13))\nd=[1]+[0]*12\nfor c in input():\n  if c>\"9\":\n    d=[(sum(d[i] for i in j))%M for j in r]\n  else:\n    d=[d[((j-int(c))*4%13)] for j in range(13)]\n    \nprint(d[5])", "MOD = 10 ** 9 + 7\n\n\ndef main(s):\n    reminder = [[(j - k) * 9 % 13 for j in range(10)] for k in range(13)]\n    dp = [1] + [0] * 12\n    for char in s:\n        if char == \"?\":\n            dp = [sum(dp[j] for j in k) % MOD for k in reminder]\n        else:\n            dp = [dp[(int(char) - k) * 9 % 13] for k in range(13)]\n\n    return dp[5]\n\n\nS = input()\nprint(main(S))", "MOD = 10**9 + 7\n\ndef solve(s, p=13):\n    a = [0] * p\n    a[0] = 1\n    for c in s:\n        b = [0] * p\n        for i in range(p):\n            b[(i*10)%p] = a[i] % MOD\n        b += b\n        if c == \"?\":\n            for i in range(p):\n                a[i] = sum(b[i+4:i+p+1])\n        else:\n            for i in range(p):\n                a[i] = b[i+p-int(c)]\n    return a[5] % MOD\n\ns = input()\nprint(solve(s))", "s = str(input())\nmod = 10**9 + 7\nn = len(s)\n\nif s[0] == \"?\":\n  ans = [1,1,1,1,1,1,1,1,1,1,0,0,0]\nelse:\n  ans = [0,0,0,0,0,0,0,0,0,0,0,0,0]\n  ans[int(s[0])] = 1\n\n\nfor i in s[1:]:\n  dp = [0]*13\n  for j in range(13):\n    dp[j*10%13] = ans[j] % mod\n  dp += dp\n  if i == \"?\":\n    for j in range(13):\n      ans[j] = sum(dp[j+4:j+14])\n  else:\n    for j in range(13):\n      ans[j] = dp[j+13-int(i)]\nprint(ans[5]%mod)", "\n# dp[i][k] := \u5148\u982di\u6841\u309213\u3067\u5272\u3063\u305f\u4f59\u308a\u304ck\u3068\u306a\u308b\u3082\u306e\u306e\u500b\u6570 or\n# dp[i][k] := \u5148\u982di\u6841\uff08\u6b8b\u308a\u306f\u3059\u3079\u30660\uff09\u309213\u3067\u5272\u3063\u305f\u4f59\u308a\u304ck\u3068\u306a\u308b\u3082\u306e\u306e\u500b\u6570\n# \u3069\u3061\u3089\u304c\u826f\u3044\u304b?\n# \u5f8c\u8005\u3067\u3002\n# \u5148\u982d\u304b\u3089\u3067\u3082\u4e0b\u4f4d\u304b\u3089\u3067\u3082\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u540c\u3058\u306f\u305a\u3002\u4e0b\u4f4d\u304b\u3089\u306e\u307b\u3046\u304c\u6dfb\u3048\u5b57\u304c\u898b\u3084\u3059\u3044\u3002\n# \u2192\u5c3a\u53d6\u3063\u307d\u304f\u3084\u308b\u306e\u306f\u4e0b\u4f4d\u306e\u6841\u3092\u8ffd\u52a0\u3057\u305f\u3068\u304d\u3060\u3002\u4e0a\u4f4d\u304b\u3089\u6c7a\u3081\u306a\u3044\u3068\u30c0\u30e1\u3058\u3083\u306d?\n# \u2192\u524d\u8005\u3058\u3083\u306a\u3044\u3068\u30c0\u30e1\u304b\u3002\n\n# \u914d\u308bDP\n# \u6841d\u304c\u3042\u308c\u3070\uff1adp[i+1][k+ (d * 10 ** a)% 13] = dp[i][k]\n# \u6841\u304c?\u306a\u3089\u3070\uff1a10\u901a\u308a\u3042\u308b\u304b\u308910\u56de\u914d\u308b? dp[i+1][k+ (d * 10 ** a)% 13] = dp[i][k]\n# 10^5 * 10 * 13\u306f\u7121\u7406\u3058\u3083\u306a\u3044?\n# \u5168\u4f53-\u6b8b\u308a3\u3064\u3068\u3057\u3066\u3001+-\u3057\u306a\u304c\u3089\u7ba1\u7406\u3000\uff08\u3053\u308c\u304c\u3067\u304d\u308b\u306e\u306f1\u306e\u6841\u306e\u5834\u5408\u3060\u3051\uff09\n\ns = input()\nl = len(s)\ndp = [[0 for _ in range(13)] for _ in range(l+1)]\ndp[0][0] = 1\ntemp = [0] * 13\nsumm = 1\nmod = 10 ** 9 + 7\n\nfor i in range(0, l):\n    if s[i] != '?':\n        for k in range(13):\n            dp[i+1][(k*10+int(s[i])) % 13] = dp[i][k]\n    else:\n        # ?\u306e\u5834\u5408\n        for k in range(13):\n            temp[(k*10) % 13] = dp[i][k]\n        \n        excluded = temp[1] + temp[2] + temp[3]\n        for k in range(13):\n            dp[i+1][k] = (summ - excluded) % mod\n            excluded -= temp[(k+1)%13]\n            excluded += temp[(k+4)%13]\n\n        summ *= 10\n        summ %= mod\n\nprint((dp[l][5]))\n# print(dp)            \n\n\n", "s = input()\n\nfrommap = []\nfor d in range(10):\n    frommap.append([0] * 13)\n    for m in range(13):\n        m2 = (m * 10 + d) % 13\n        frommap[d][m2] = m\n\ndp = [1] + [0] * 12\nfor c in s:\n    if c == '?':\n        dp = [sum(dp[f] for f in fromlist) % 1000000007 for fromlist in zip(*frommap)]\n    else:\n        f = frommap[int(c)]\n        dp = [dp[f[m]] for m in range(13)]\n\nprint(dp[5])", "S=input()\na=[0]*13\na[0]= 1\n\nfor c in S:\n  dp=[0]*13\n  for i in range(13):\n    dp[(i*10)%13]=a[i]%(10**9+7)\n  dp+=dp\n\n  if c=='?':\n    for i in range(13):\n      a[i]=sum(dp[i+4:i+14])\n  else:\n    for i in range(13):\n      a[i]=dp[i+13-int(c)]\n\nprint((a[5]%(10**9+7)))\n", "def dot(A, x):\n  return [sum([x[t]*A[s][t] for t in range(13)]) for s in range(13)]\n\nMOD=10**9+7\n\nS=input()\nN=len(S)\nif N==1:\n  if S=='?' or int(S)==5:\n    print(1)\n  else:\n    print(0)\n  return\n\nif S[0]=='?':\n  x=[1]*10+[0]*3\nelse:\n  x=[0]*13\n  x[int(S[0])]=1\n\nfor i in range(1, N):\n  if S[i]=='?':\n    tmp=sum(x)\n    x=[\n      tmp-x[4]-x[8]-x[12],\n      tmp-x[3]-x[8]-x[12],\n      tmp-x[3]-x[7]-x[12],\n      tmp-x[3]-x[7]-x[11],\n      tmp-x[2]-x[7]-x[11],\n      tmp-x[2]-x[6]-x[11],\n      tmp-x[2]-x[6]-x[10],\n      tmp-x[1]-x[6]-x[10],\n      tmp-x[1]-x[5]-x[10],\n      tmp-x[1]-x[5]-x[9],\n      tmp-x[0]-x[5]-x[9],\n      tmp-x[0]-x[4]-x[9],\n      tmp-x[0]-x[4]-x[8]\n    ]\n  elif S[i]=='0':\n    x=[x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9]]\n  elif S[i]=='1':\n    x=[x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5]]\n  elif S[i]=='2':\n    x=[x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10], x[1]]\n  elif S[i]=='3':\n    x=[x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6], x[10]]\n  elif S[i]=='4':\n    x=[x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2], x[6]]\n  elif S[i]=='5':\n    x=[x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11], x[2]]\n  elif S[i]=='6':\n    x=[x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7], x[11]]\n  elif S[i]=='7':\n    x=[x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3], x[7]]\n  elif S[i]=='8':\n    x=[x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12], x[3]]\n  elif S[i]=='9':\n    x=[x[3], x[7], x[11], x[2], x[6], x[10], x[1], x[5], x[9], x[0], x[4], x[8], x[12]]\n    \n  x=[x[j]%MOD for j in range(13)]\n    \nprint(x[5])", "MOD = 10**9 + 7\n\ndef main():\n    s = [int(in_i) if in_i != '?' else -1 for in_i in list(open(0).read())[:-1]]\n    n = len(s)\n\n    cnt = [0] * 13\n    if s[0] == -1:\n        for j in range(10):\n           cnt[j] = 1\n    else:\n        cnt[s[0]] = 1\n\n    for cur_s in s[1:]:\n        dp = [0] * 26\n        for i in range(13):\n            dp[i*10%13] = cnt[i] % MOD\n        dp[13:] = dp[:13]\n\n        if cur_s == -1:\n            for i in range(13):\n                cnt[i] = sum(dp[i+4:i+14])\n        else:\n            for i in range(13):\n                cnt[i] = dp[i+13-cur_s]\n\n    ans = cnt[5] % MOD\n    print(ans)\n    return()\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# -*- coding: utf-8 -*-\n\nR10 = list(range(10))\nR13 = list(range(13))\n\nS = input()\nR = [[(M-N)*4 % 13 for N in R10] for M in R13]\nAM = 10**9+7\n\nMOD =[1]+[0]*12\n\nfor D in S:\n    if D == '?':\n        MOD = [sum([MOD[N] for N in M])%AM for M in R]\n    else:\n        C = int(D)\n        MOD = [MOD[M[C]] for M in R]\n    #end if\n#end for\n\nprint((MOD[5]))\n", "import numpy as np\n\ns = input()\np = np.array([0]*13)\np[0] = 1\n\namari = [[0]*13 for _ in range(13)]\nfor j in range(10):\n  for i in range(13):\n    amari[i][(i*10+j)%13] += 1\nM = np.array(amari)\n\nfor si in range(len(s)):\n  a = np.array([0]*13)\n  if s[si] == '?':\n    a = np.dot(p,M)\n  else:\n    c = int(s[si])\n    for i in range(13):\n      a[(i*10+c)%13] += p[i]\n  p = np.mod(a,1000000007)\nprint(p[5])", "def main():\n    S = [int(i) if i != '?' else -1 for i in input()]\n    s = len(S)\n    mod = 10 ** 9 + 7\n    dp = [[0] * 13 for _ in range(s)]\n\n    table = [[0] * 10 for _ in range(13)]\n    for i in range(13):\n        for j in range(10):\n            table[i][j] = (i * 10 + j) % 13\n\n    table2 = [[] for _ in range(13)]\n    for i in range(13):\n        for j in range(10):\n            table2[table[i][j]].append(i)\n    t = set(range(13))\n    table2 = [t - set(i) for i in table2]\n\n    if S[0] == -1:\n        for i in range(10):\n            dp[0][i] += 1\n    else:\n        dp[0][S[0] % 13] += 1\n\n    for i in range(1, s):\n        if S[i] == -1:\n            temp = sum(dp[i - 1])\n            for j in range(13):\n                dp[i][j] = temp\n                for k in table2[j]:\n                    dp[i][j] -= dp[i - 1][k]\n                dp[i][j] %= mod\n        else:\n            for j in range(13):\n                dp[i][table[j][S[i]]] = dp[i - 1][j]\n\n    print(dp[-1][5] % mod)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\n\n\ndef solve(s):\n    MOD = 10 ** 9 + 7\n    dp = np.zeros(13, dtype=np.int64)\n    dp[0] = 1\n    idx = np.zeros(13, dtype=np.int8)\n    for i in range(13):\n        idx[i * 10 % 13] = i\n    window = np.ones(10, dtype=np.int8)\n    for c in s:\n        if c == '?':\n            tdp = dp[idx]\n            ndp = np.concatenate([tdp[4:], tdp])\n            dp = np.convolve(ndp, window, mode='valid') % MOD\n        else:\n            dp = np.roll(dp[idx], int(c))\n    return dp[5]\n\n\ns = input()\nprint((solve(s)))\n", "inf = 10**9 + 7\ns = input()\nr = [[(j-k)*9%13 for j in range(10)] for k in range(13)]\nd = [1] + [0]*12\nfor c in s:\n    d = [sum(d[j] for j in k)%inf for k in r] if c > '9' else [d[(int(c)-k)*9%13] for k in range(13)]\nprint((d[5]))\n", "MOD = 1000000007;\n\ns = [int(x) if x!=\"?\" else -1 for x in input()]\n\nn=len(s)\n\nr=[0]*13\n\nc=s[0]\nif (c!=-1):\n\tr[c]=1\nelse:\n\tfor i in range(10):r[i]=1\n\nfor i in range(1,n):\n\tdp=[0]*26\n\tfor j in range(13):dp[j*10%13]+=(r[j]%MOD)\n\tdp[13:26]=dp[0:13]\n\tc=s[i]\n\tr=[0]*13\n\tif (c==-1):\n\t\tw=sum(dp[4:14])\n\t\tfor j in range(13):\n\t\t\t\tr[j]+=w\n\t\t\t\tw=w+dp[j+1]-dp[4+j]\n\telse:\n\t\tfor j in range(13):\n\t\t\tr[j]+=dp[13-c+j]\nprint((r[5]%MOD))\n", "#coding: utf-8\nimport math\nimport heapq\nimport bisect\n\nMOD = 10**9+7\n\nS = input()\nans = [1]+[0]*12\n \nfor c in S:\n    dp=[0]*13\n    for i in range(13):\n        #dp\u306fans\u3092\u4e00\u6841\u305a\u3089\u3057\u305f\u3082\u306e\n        dp[(i*10)%13]=ans[i]%MOD\n    #0~12\u306813~25\u3068\u540c\u3058\u3082\u306e\u3092\u5897\u8a2d\n    dp+=dp\n \n    if c=='?':\n        for i in range(13):\n            #\u6dfb\u5b57\u309213\u304b\u308926\u307e\u3067\u5897\u3084\u3057\u305f\u304b\u3089\u3001\u3053\u3053\u3067\u3053\u3046\u697d\u306a\u8a08\u7b97\u304c\u3067\u304d\u308b\u3002\n            ans[i]=sum(dp[i+4:i+14])\n    else:\n        for i in range(13):\n            ans[i]=dp[i+13-int(c)]\n\nprint(ans[5]%MOD)", "def main():\n  s = ''.join(reversed(input()))\n  multiplier = 1\n  divisor = 10 ** 9 + 7\n  list10 = list(range(10))\n  list13 = list(range(13))\n  p = [0] * 13\n  np = [0] * 13\n  rt = [i % 13 for i in range(121)]\n  p[0] = 1\n  for i in range(len(s)):\n    if s[i] != '?':\n      r = rt[int(s[i]) * multiplier]\n      for j in list13:\n        np[rt[j + r]] = p[j]\n    else:\n      r = 0\n      for j in list10:\n        for k in list13:\n          np[rt[k + r]] += p[k]\n        r = rt[r + multiplier]\n    for j in list13:\n      p[j] = np[j] % divisor\n      np[j] = 0\n    multiplier = rt[10 * multiplier]\n  print(p[5])\nmain()", "import sys\ninput = sys.stdin.readline\n\nS=list(input().rstrip('\\n'))\n\nkake10 = [0,10,7,4,1,11,8,5,2,12,9,6,3]\nnow = {0:1,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0}\nfor i in S:\n  now = {kake10[x]:now[x] for x in range(13)}\n  if i=='?':\n    now2 = {x:sum(now[(x+y)%13] for y in range(4,14))%1000000007 for x in range(13)}\n    now = now2\n  else:\n    a = int(i)\n    now = {(x+a)%13:now[x] for x in range(13)}\nprint(now[5])", "M=10**9+7\n#\u30ea\u30b9\u30c8\u306b\u5165\u529b\uff08\u6587\u5b57\u5217\uff09\ntext=input()\nlst=list(text)\nlst.reverse()\ndigit=len(lst)\n\n######\u516d\u6841\u3054\u3068\u306b\u533a\u5207\u3063\u3066\u3001?\u306e\u6570\u3068\u305d\u306e\u4ed6\u306e\u6570\u5b57\u3092\u6570\u3048\u308b\n######\u305f\u3068\u3048\u3070\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u304c\u300c9?????81????\u300d\u3060\u3063\u305f\u3089\n######[[17,0],[8,1],[0,2],[0,2],[0,2],[0,2]]\u306b\u306a\u308b\nsix=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]\nfor i in range(digit):\n  if(lst[i]==\"?\"):\n    six[i%6][1]=six[i%6][1]+1\n  else:\n    six[i%6][0]=(six[i%6][0]+int(lst[i]))%13\n\n    \n######\u6570\u5b57\u90e8\u5206\u306e\u4f59\u308a\u304b\u30895\u3092\u5f15\u304f    \nrem=-(six[0][0]-3*six[1][0]-4*six[2][0]\n      -1*six[3][0]+3*six[4][0]+4*six[5][0]-5)%13\n\n######\u6f38\u5316\u5f0f\u30926\u500b\u7528\u610f\ndef mat1(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-1)%13]+ls[(i-2)%13]\n               +ls[(i-3)%13]+ls[(i-4)%13]+ls[(i-5)%13]\n               +ls[(i-6)%13]+ls[(i-7)%13]+ls[(i-8)%13]\n               +ls[(i-9)%13])%M\n  return val_ls\ndef mat10(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+3)%13]+ls[(i+6)%13]\n               +ls[(i+9)%13]+ls[(i+12)%13]+ls[(i+15)%13]\n               +ls[(i+18)%13]+ls[(i+21)%13]+ls[(i+24)%13]\n               +ls[(i+27)%13])%M\n  return val_ls\ndef mat100(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+4)%13]+ls[(i+8)%13]\n               +ls[(i+12)%13]+ls[(i+16)%13]+ls[(i+20)%13]\n               +ls[(i+24)%13]+ls[(i+28)%13]+ls[(i+32)%13]\n               +ls[(i+36)%13])%M\n  return val_ls\ndef mat1000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+1)%13]+ls[(i+2)%13]\n               +ls[(i+3)%13]+ls[(i+4)%13]+ls[(i+5)%13]\n               +ls[(i+6)%13]+ls[(i+7)%13]+ls[(i+8)%13]\n               +ls[(i+9)%13])%M\n  return val_ls\ndef mat10000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-3)%13]+ls[(i-6)%13]\n               +ls[(i-9)%13]+ls[(i-12)%13]+ls[(i-15)%13]\n               +ls[(i-18)%13]+ls[(i-21)%13]+ls[(i-24)%13]\n               +ls[(i-27)%13])%M\n  return val_ls\ndef mat100000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-4)%13]+ls[(i-8)%13]\n               +ls[(i-12)%13]+ls[(i-16)%13]+ls[(i-20)%13]\n               +ls[(i-24)%13]+ls[(i-28)%13]+ls[(i-32)%13]\n               +ls[(i-36)%13])%M\n  return val_ls\n\n\n######\u6f38\u5316\u5f0f\u3092\u9069\u7528\nmodulos=[1,0,0,0,0,0,0,0,0,0,0,0,0]\nfor j in range(six[0][1]):\n  modulos=mat1(modulos)\nfor j in range(six[1][1]):\n  modulos=mat10(modulos)\nfor j in range(six[2][1]):\n  modulos=mat100(modulos)\nfor j in range(six[3][1]):\n  modulos=mat1000(modulos)\nfor j in range(six[4][1]):\n  modulos=mat10000(modulos)\nfor j in range(six[5][1]):\n  modulos=mat100000(modulos)\nprint((modulos[rem]))\n", "import sys,math,copy\n\ndef main():\n    # import numpy as np\n    input = sys.stdin.readline\n    S = ''.join(reversed(input().strip()))\n\n    # dp = np.zeros((13), dtype=int)\n    # dp_ = np.zeros((13), dtype=int)\n    dp = [0] * 13\n    dp_ = [0] * 13\n    mod13_list = [i % 13 for i in range(12 ** 2 + 1)]\n    list10 = list(range(10))\n    list13 = list(range(13))\n    divisor = 10 ** 9 + 7\n    dp_[0] = 1\n    mul = 1\n    for i in range(len(S)):\n        s = S[i]\n        if s == '?':\n            for d in list10:\n                m = mod13_list[(d * mul)]\n                for pm in list13:\n                    dp[mod13_list[(pm+m)]] += dp_[pm]\n\n        else:\n            si = int(s)\n            m = mod13_list[(si * mul)]\n            for pm in list13:\n                dp[mod13_list[(pm+m)]] = dp_[pm]\n\n        # dp_ = dp % divisor\n        # dp = dp * 0 # np.zeros((13), dtype=int)\n        for j in list13:\n            dp_[j] = dp[j] % divisor\n            dp[j] = 0\n        mul = mod13_list[(mul * 10)]\n    print(dp_[5])\n\nmain()", "import numpy as np\n\nS = input()\nmod = int(10**9 + 7)\ndp = np.zeros(13, dtype=int)\ndp[0] = 1\n\nM = np.zeros((13, 13), dtype=int)\nfor i in range(13):\n    for d in range(10):\n        M[i][(i * 10 + d) % 13] += 1\n\nfor s in S:\n    ndp = np.zeros(13, dtype=int)\n    if s == '?':\n        ndp = np.dot(dp, M)\n    else:\n        d = int(s)\n        for j in range(13):\n            ndp[(j * 10 + d) % 13] += dp[j]\n    dp = ndp % mod\n\nprint(dp[5])", "import sys\nimport numpy as np\nfrom collections import defaultdict\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef convolve(x, y):\n    MOD = 10**9+7\n    z = np.convolve(x, y) % MOD\n    z[:12] += z[13:25]\n    return z[:13] % MOD\n\n\ndef main():\n    mod = 10**9+7\n    S = input()[::-1]\n    dp = np.zeros((len(S), 13), dtype='int64')\n    amari = 1\n    if S[0] == '?':\n        for j in range(10):\n            dp[0][j] = 1\n    else:\n        dp[0][int(S[0])] = 1\n\n    for i in range(1, len(S)):\n        arr = np.zeros(13, dtype='int64')\n        amari = 10*amari % 13\n        if S[i] == '?':\n            for si in range(10):\n                arr[amari*si % 13] += 1\n        else:\n            arr[amari*int(S[i]) % 13] = 1\n        dp[i] = convolve(dp[i-1], arr)\n\n    print(dp[len(S)-1][5])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\ns = input()\neffects = [1, 10, 9, 12, 3, 4]\nmod = 10**9+7\n\namari = np.array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\narrays = [np.eye(13, k=i, dtype=np.int64)+np.eye(13, k=i-13, dtype=np.int64) for i in range(13)]\nbrrays = [sum(arrays[c*effects[i]%13] for c in range(10)) for i in range(6)]\nfor i, c in enumerate(reversed(s)) :\n    if c != \"?\" :\n        c = int(c)\n        array = arrays[c*effects[i%6]%13]\n        amari = np.dot(amari, array)\n    else :\n        array = brrays[i%6]\n        amari = np.dot(amari, array)%mod\n\nprint(amari[5])", "M=10**9+7\nr=tuple(tuple((j-k)*9%13for j in range(10))for k in range(13))\nd=[1]+[0]*12\nfor c in input():\n    if c>'9':\n        d=[sum(d[j]for j in k)%M for k in r]\n    else:\n        d=[d[(int(c)-k)*9%13]for k in range(13)]\nprint(d[5])", "import numpy as np\nimport sys\ndef input():\n    return sys.stdin.readline()[:-1]\n\n# S = [int(x) if x!=\"?\" else -1 for x in input()]\n\n# print (S)\n\n# div_num = 1000000007\n# arr = np.arange(13, dtype = np.uint64)\n# # dp = np.zeros([2, 13], dtype = np.uint64)\n\n# div13_list = [1]\n# for ii in range(1, len(S)):\n#     n = div13_list[-1] * 10 % 13\n#     if n in div13_list:\n#         break\n#     else:\n#         div13_list.append(n)\n# div13_mat = np.array([div13_list] * 10, dtype = int)\n# div13_mat = (div13_mat * np.arange(10)[:, None] % 13).T\n\n# if S[-1] == -1:\n#     dp[0, :10] = 1\n# else:\n#     dp[0, S[-1]] = 1\n\n# for ii in range(1, len(S)):\n#     # ind = -ii-1\n#     # tmp = div13_mat[ii%6]\n#     # if S[ind] == -1:\n#     #     for n in range(10):\n#     #         res = np.roll(arr, -tmp[n])\n#     #         # dp[1, res] += dp[0, arr]\n#     # else:\n#     #     res = np.roll(arr, -tmp[S[ind]])\n#     #     # dp[1, res] += dp[0, arr]\n#     dp[0] = dp[1] % div_num\n#     dp[1] = 0\n\n\n# print (dp[0, 5])\n\n#\n# \u5927\u304d\u3044\u65b9\u306e\u6841\u304b\u3089\u3084\u3063\u3066\u304f\u65b9\u6cd5\n#\n\nMOD = 1000000007;\n\nS = [int(x) if x!=\"?\" else -1 for x in input()]\nn = len(S)\n\n# r[i]\n# \u73fe\u5728\u8003\u3048\u3066\u308b\u4e00\u3064\u524d\u306e\u6841\u6570\u3067\u3001\u4f59\u308a\u304c i \u306b\u306a\u308b\u6574\u6570\u306e\u500b\u6570\nr = [0] * 13\n\n# \u307e\u305a\u4e00\u3064\u76ee\u306e\u5024\u304c\uff11\u306e\u4f4d\u3068\u3059\u308b\ns = S[0]\nif (s != -1):\n    r[s] = 1\nelse:\n    for i in range(10): r[i] = 1\n\n# \u6841\u3092\u9032\u3081\u306a\u304c\u3089\u500b\u6570\u3092\u30ab\u30a6\u30f3\u30c8\nfor i in range(1, n):\n    # dp[j]\n    # \u73fe\u5728\u8003\u3048\u3066\u3044\u308b\u6841(i)\u3092\u9664\u304f\u3001\u4f59\u308a\u304c j \u3068\u306a\u308b\u6574\u6570\u306e\u500b\u6570\n    dp = [0] * 26\n\n    # \u6841\u304c\u4e00\u3064\u4e0a\u304c\u308b\u306e\u3067\u3001\u4e00\u3064\u524d\u306e\u4f59\u308a\u304c 10 \u500d\u306b\u306a\u308b\n    for j in range(13):\n        dp[j*10%13] += r[j] % MOD\n\n    # \u30a2\u30af\u30bb\u30b9\u3092\u9ad8\u901f\u306b\u3059\u308b\u305f\u3081\uff12\u500d\u306e\u9577\u3055\u3068\u308b (dp[i] == dp[i + 13])\n    dp[13:26] = dp[0:13]\n\n    r = [0]*13\n\n    s = S[i]\n    if (s == -1):\n        w = sum(dp[4:14])\n        for j in range(13):\n            r[j] += w\n            w += dp[j + 1]-dp[j + 4]\n    else:\n        for j in range(13):\n            r[j] += dp[13-s+j]\nprint((r[5]%MOD))\n", "s = input()\n \nmod = 10**9+7\nn = len(s)\nres = [1] + [0] * 12\nfor ss in s:\n    dp = [0] * 13\n    for i in range(13):\n        dp[(10*i)%13] = res[i]\n    dp += dp\n \n    if ss == '?':\n        for i in range(13):\n            res[i] = sum(dp[i+4:i+14])\n    else:\n        for i in range(13):\n            res[i] = dp[i+13-int(ss)]\n    res = [v%mod for v in res]\nprint(res[5])", "s = input()\npre = [1]+[0]*12\nn = 10**9 + 7\ntem = [[i*j%13 for i in range(10)] for j in range(13)]\nt = 1\nfor i in range(len(s)):\n    if s[-1*i-1] > \"9\":\n        pre = [sum([pre[k-i] for i in tem[t]])%n for k in range(13)]      \n    else:\n        te = int(s[-1*i-1])*t % 13\n        pre = [pre[i-te] for i in range(13)]\n    t = t*10 % 13\nprint(pre[5])"]