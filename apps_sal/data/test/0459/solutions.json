["l=list(map(int,input().split()))\nl.insert(0,0)\nc1=[1,6,3,8,5,10,7,12,9,23,11,21,13,14,15,16,17,18,19,20,4,22,2,24]\nc2=[1,23,3,21,5,2,7,4,9,6,11,8,13,14,15,16,17,18,19,20,12,22,10,24]\nc3=[1,2,3,4,5,6,15,16,9,10,11,12,13,14,23,24,17,18,7,8,21,22,19,20]\nc4=[1,2,3,4,5,6,19,20,9,10,11,12,13,14,7,8,17,18,23,24,21,22,15,16]\nc5=[1,2,16,14,5,6,7,8,19,17,11,12,13,9,15,10,3,18,4,20,21,22,23,24]\nc6=[1,2,17,19,5,6,7,8,14,16,11,12,13,4,15,3,10,18,9,20,21,22,23,24]\nflag=0\nmark=0\nfor i in range(6):\n\tif(l[c1[4*i]] == l[c1[4*i+1]] == l[c1[4*i+2]] == l[c1[4*i+3]]):\n\t\tmark=1\n\telse:\n\t\tmark=0\n\t\tbreak\nif(mark):\n\tflag=1\n\nmark=0\nfor i in range(6):\n\tif(l[c2[4*i]] == l[c2[4*i+1]] == l[c2[4*i+2]] == l[c2[4*i+3]]):\n\t\tmark=1\n\telse:\n\t\tmark=0\n\t\tbreak\nif(mark):\n\tflag=1\n\nmark=0\nfor i in range(6):\n\tif(l[c3[4*i]] == l[c3[4*i+1]] == l[c3[4*i+2]] == l[c3[4*i+3]]):\n\t\tmark=1\n\telse:\n\t\tmark=0\n\t\tbreak\nif(mark):\n\tflag=1\n\nmark=0\nfor i in range(6):\n\tif(l[c4[4*i]] == l[c4[4*i+1]] == l[c4[4*i+2]] == l[c4[4*i+3]]):\n\t\tmark=1\n\telse:\n\t\tmark=0\n\t\tbreak\nif(mark):\n\tflag=1\n\nmark=0\nfor i in range(6):\n\tif(l[c5[4*i]] == l[c5[4*i+1]] == l[c5[4*i+2]] == l[c5[4*i+3]]):\n\t\tmark=1\n\telse:\n\t\tmark=0\n\t\tbreak\nif(mark):\n\tflag=1\n\nmark=0\nfor i in range(6):\n\tif(l[c6[4*i]] == l[c6[4*i+1]] == l[c6[4*i+2]] == l[c6[4*i+3]]):\n\t\tmark=1\n\telse:\n\t\tmark=0\n\t\tbreak\nif(mark):\n\tflag=1\n\nif(flag):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "faces = [[5,6,17,18,21,22,13,14],\n         [7,8,19,20,23,24,15,16],\n         [1,3,5,7,9,11,24,22],\n         [2,4,6,8,10,12,23,21],\n         [3,4,17,19,10,9,16,14],\n         [1,2,18,20,12,11,15,13]]\n\ncube = input().split(\" \")\n\ndef legit(cube):\n    for i in range(6):\n        for j in range(4):\n            if cube[4*i] != cube[4*i+j]:\n                return False\n\n    return True\nt = False\n\nfor rotato in faces:\n    cubea = cube.copy()\n    for i in range(8):\n        cubea[rotato[i]-1] = cube[rotato[(i+2)%8]-1]\n\n    cubeb = cubea.copy()\n    for i in range(8):\n        cubeb[rotato[i]-1] = cubea[rotato[(i+2)%8]-1]\n\n    cubec = cubeb.copy()\n    for i in range(8):\n        cubec[rotato[i]-1] = cubeb[rotato[(i+2)%8]-1]\n\n    if legit(cubea) or legit(cubec):\n        t = True\nif not t:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n", "a = [0]\na.extend(list(map(int, input().split())))\nif (a[2] == a[4] == a[22] == a[24]) and (a[1] == a[3] == a[6] == a[8]) and (a[13] == a[14] == a[15] == a[16]) and (a[17] == a[18] == a[19] == a[20]) and (a[21] == a[23] == a[9] == a[11]) and (a[5] == a[7] == a[10] == a[12]):\n    print(\"YES\")\nelif (a[13] == a[14] == a[15] == a[16]) and (a[17] == a[18] == a[19] == a[20]) and (a[2] == a[4] == a[5] == a[7]) and (a[6] == a[8] == a[9] == a[11]) and (a[10] == a[12] == a[22] == a[24]) and (a[1] == a[3] == a[21] == a[23]):\n    print(\"YES\")\nelif (a[1] == a[2] == a[3] == a[4]) and (a[9] == a[10] == a[11] == a[12]) and (a[13] == a[14] == a[23] == a[24]) and (a[5] == a[6] == a[15] == a[16]) and (a[17] == a[18] == a[7] == a[8]) and (a[21] == a[22] == a[19] == a[20]):\n    print(\"YES\")\nelif (a[1] == a[2] == a[3] == a[4]) and (a[9] == a[10] == a[11] == a[12]) and (a[13] == a[14] == a[7] == a[8]) and (a[5] == a[6] == a[19] == a[20]) and (a[17] == a[18] == a[23] == a[24]) and (a[21] == a[22] == a[15] == a[16]):\n    print(\"YES\")\nelif (a[5] == a[6] == a[7] == a[8]) and (a[21] == a[22] == a[23] == a[24]) and (a[3] == a[4] == a[13] == a[15]) and (a[14] == a[16] == a[11] == a[12]) and (a[9] == a[10] == a[18] == a[20]) and (a[17] == a[19] == a[1] == a[2]):\n    print(\"YES\")\nelif (a[5] == a[6] == a[7] == a[8]) and (a[21] == a[22] == a[23] == a[24]) and (a[3] == a[4] == a[18] == a[20]) and (a[14] == a[16] == a[1] == a[2]) and (a[9] == a[10] == a[13] == a[15]) and (a[17] == a[19] == a[11] == a[12]):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    \n", "from itertools import groupby\n\n\ndef isSolved(c):\n    cons = [x[0] for x in groupby(c)]\n    return len(cons) == 6\n\n\ncolor = list(map(int, input().strip().split()))\n\nfaces = [[2, 4, 6, 8, 10, 12, 23, 21], [13, 14, 5, 6, 17, 18, 21, 22],\n         [15, 16, 7, 8, 19, 20, 23, 24], [1, 3, 5, 7, 9, 11, 24, 22],\n         [9, 10, 19, 17, 4, 3, 14, 16], [1, 2, 18, 20, 12, 11, 15, 13]]\n\n\ndef rotate(g, face):\n    c = g[:]\n    temp1 = c[face[0]-1]\n    temp2 = c[face[1]-1]\n    for i in range(0, 6, 2):\n        c[face[i]-1] = c[face[i+2]-1]\n        c[face[i+1]-1] = c[face[i+3] - 1]\n    c[face[-2]-1] = temp1\n    c[face[-1]-1] = temp2\n    return c\n\n\ndef canSolve(c):\n    for i in faces:\n        rot = rotate(c, i)\n        if isSolved(rot):\n            return True\n        x = list(reversed(i))\n        rot2 = rotate(c, x)\n        if isSolved(rot2):\n            return True\n    return False\n\n\nif canSolve(color):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "a = [int(w) for w in input().split()]\n\ncycles = [\n    [5,6,17,18,21,22,13,14],\n    [9,10,19,17,4,3,14,16],\n    [8,7,16,15,24,23,20,19],\n    [7,5,3,1,22,24,11,9],\n    [6,8,10,12,23,21,2,4],\n    [18,20,12,11,15,13,1,2],\n]\ncycles = [[i-1 for i in cycle] for cycle in cycles]\ncycles += [list(reversed(cycle)) for cycle in cycles]\n\ndef rotate(a, cycle):\n    b = a[:]\n    for i in range(8):\n        b[cycle[(i+2)%8]] = a[cycle[i]]\n    return b\n\ndef ordered(a):\n    for side in range(6):\n        if not(a[side*4] == a[side*4+1] == a[side*4+2] == a[side*4+3]):\n            return False\n    return True\n\nfor cycle in cycles:\n    if ordered(rotate(a, cycle)):\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n", "colors = [\"SHIT\"] + list(map(int,input().split()))\n\nfaces = [(1,2,3,4), (5,6,7,8),\n         (9,10,11,12), (13,14,15,16),\n         (17,18,19,20),(21,22,23,24)]\n\ndef is_good(colors):\n    return all([all([colors[i] == colors[face[0]] for i in face]) for face in faces])\n\nrotations = {(1,2,3,4) : ([13,5,17,21], [14,6,18,22]),\n(5,6,7,8) : ([14, 9, 19, 4], [16,10,17, 3]),\n(9, 10, 11, 12): ([7, 15, 23, 19], [8, 16, 24, 20]),\n(13, 14, 15, 16): ([5, 1, 24, 9], [7, 3, 22, 11]),\n(17,18,19,20): ([6, 10, 23, 2], [8, 12, 21, 4]),\n(21, 22, 23, 24): ([1, 18, 12, 15], [2, 20, 11, 13]),}\n\ndef rotate(colors, face):\n    result1 = colors.copy()\n    rule1, rule2 = rotations[face]\n    for i in range(4):\n        result1[rule1[i]] = colors[rule1[(i+1)%4]]\n        result1[rule2[i]] = colors[rule2[(i + 1) % 4]]\n\n    result2 = colors.copy()\n    for i in range(4):\n        result2[rule1[(i + 1) % 4]] = colors[rule1[i]]\n        result2[rule2[(i + 1) % 4]] = colors[rule2[i]]\n    return (result1, result2)\n\nfor face in faces:\n    rotated = rotate(colors, face)\n    if is_good(rotated[0]) or is_good(rotated[1]):\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")", "import itertools, sys\nid = '''\n  12\n  34\nef56ijmn\ngh78klop\n  9a\n  bc\n'''\n\ntransforms = [\n    [\n        [1,2,3,4],\n        [22,21,18,17,6,5,14,13]\n    ],\n    [\n        [9,10,11,12],\n        [15,16,7,8,19,20,23,24],\n    ],\n    [\n        [5,6,7,8],\n        [3,4,17,19,10,9,16,14],\n    ],\n    [\n        [13,14,15,16],\n        [1,3,5,7,9,11,24,22],\n    ],\n    [\n        [17,18,19,20],\n        [4,2,21,23,12,10,8,6],\n    ],\n    [\n        [21,22,24,23],\n        [2,1,13,15,11,12,20,18]\n    ],\n]\n\ndef rot(c, perm, rev):\n    new = list(c)\n    if rev:\n        for i in range(len(perm)):\n            new[perm[i] - 1] = c[perm[(i+1) % len(perm)] - 1]\n    else:\n        for i in range(len(perm)):\n            new[perm[(i+1) % len(perm)] - 1] = c[perm[i] - 1]\n    return new\n\ndef do_t(c, t, rev):\n    return rot(rot(rot(c, t[0], rev), t[1], rev), t[1], rev)\n\nfaces = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24]]\ncolors = input().split()\n\nfor rev, t in itertools.product([0,1], transforms):\n    newc =  do_t(colors, t, rev)\n    ok = True\n    for f in faces:\n        fc = [ newc[i-1] for i in f ]\n        if fc.count(fc[0]) != 4:\n            ok = False\n\n    if ok:\n        #print('rotate', rev, t)\n        print('YES')\n        return\n\nprint('NO')\n", "import sys\n\n\ndef check(q):\n    if q[1] == q[2] == q[3] == q[4] and q[5] == q[6] == q[7] == q[8] and q[9] == q[10] == q[11] == q[12] and q[13] == q[14] == q[15] == q[16] and q[17] == q[18] == q[19] == q[20] and q[21] == q[22] == q[23] == q[24]:\n        return True\n    else:\n        return False\na = [0] + [int(x) for x in input().split()]\nswaps = []\nb = a[:]\nb[17] = a[3]\nb[19] = a[4]\nb[10] = a[17]\nb[9] = a[19]\nb[14] = a[9]\nb[16] = a[10]\nb[4] = a[14]\nb[3] = a[16]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[17] = a[10]\nb[19] = a[9]\nb[10] = a[16]\nb[9] = a[14]\nb[14] = a[4]\nb[16] = a[3]\nb[4] = a[19]\nb[3] = a[17]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[13] = a[21]\nb[14] = a[22]\nb[5] = a[13]\nb[6] = a[14]\nb[17] = a[5]\nb[18] = a[6]\nb[21] = a[17]\nb[22] = a[18]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[21] = a[13]\nb[22] = a[14]\nb[13] = a[5]\nb[14] = a[6]\nb[5] = a[17]\nb[6] = a[18]\nb[17] = a[21]\nb[18] = a[22]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[7] = a[19]\nb[8] = a[20]\nb[19] = a[23]\nb[20] = a[24]\nb[23] = a[15]\nb[24] = a[16]\nb[15] = a[7]\nb[16] = a[8]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[19] = a[7]\nb[20] = a[8]\nb[23] = a[19]\nb[24] = a[20]\nb[15] = a[23]\nb[16] = a[24]\nb[7] = a[15]\nb[8] = a[16]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[1] = a[5]\nb[3] = a[7]\nb[5] = a[9]\nb[7] = a[11]\nb[9] = a[22]\nb[11] = a[24]\nb[22] = a[1]\nb[24] = a[3]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[5] = a[1]\nb[7] = a[3]\nb[9] = a[5]\nb[11] = a[7]\nb[22] = a[9]\nb[24] = a[11]\nb[1] = a[22]\nb[3] = a[24]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[10] = a[6]\nb[12] = a[8]\nb[6] = a[2]\nb[8] = a[4]\nb[2] = a[23]\nb[4] = a[21]\nb[23] = a[10]\nb[21] = a[12]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[6] = a[10]\nb[8] = a[12]\nb[2] = a[6]\nb[4] = a[8]\nb[23] = a[2]\nb[21] = a[4]\nb[10] = a[23]\nb[12] = a[21]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[1] = a[18]\nb[2] = a[20]\nb[18] = a[12]\nb[20] = a[11]\nb[12] = a[15]\nb[11] = a[13]\nb[15] = a[1]\nb[13] = a[2]\nif check(b):\n    print(\"YES\")\n    return\nb = a[:]\nb[18] = a[1]\nb[20] = a[2]\nb[12] = a[18]\nb[11] = a[20]\nb[15] = a[12]\nb[13] = a[11]\nb[1] = a[15]\nb[2] = a[13]\nif check(b):\n    print(\"YES\")\n    return\nprint(\"NO\")\n\n\n\n\n", "a = list(map(int, input().split()))\n\nans = 'NO'\npairs = [[1, 9], [5, 21], [13, 17]]\ncells = {\n    1: [5, 6, 17, 18, 21, 22, 13, 14],\n    9: [7, 8, 19, 20, 23, 24, 15, 16],\n    5: [9, 10, 19, 17, 4, 3, 14, 16],\n    21: [11, 12, 20, 18, 2, 1, 13, 15],\n    13: [7, 5, 3, 1, 22, 24, 11, 9],\n    17: [8, 6, 4, 2, 21, 23, 12, 10],\n}\n\nfor i, j in pairs:\n    if 1 < len(set(a[i - 1: i + 3])) or 1 < len(set(a[j - 1: j + 3])):\n        continue\n    ci = cells[i]\n    cj = cells[j]\n    for d in [2, 6]:\n        f = True\n        for k in range(0, 8, 2):\n            if a[ci[k] - 1] != a[ci[(k + 1) % 8] - 1]:\n                f = False\n            if a[cj[k] - 1] != a[cj[(k + 1) % 8] - 1]:\n                f = False\n            if a[ci[k] - 1] != a[cj[(k + d) % 8] - 1]:\n                f = False\n        if f:\n            ans = 'YES'\n\nprint(ans)\n", "original = input().split()\noriginal = [int(x) for x in original]\ndef transform(T, a):\n    b = a[:]\n    for i in range(0, 24):\n        b[T[i]] = a[i]\n    return b\n\ndef generate_transformation(delta):\n    ans0 = [x for x in range(0, 24)]\n    ans1 = [x for x in range(0, 24)]\n    for k, v in delta.items():\n        ans0[k - 1] = v - 1\n        ans1[v - 1] = k - 1\n    return (ans0, ans1)\n\nfacegroup = [\n        [1,2,3,4],\n        [5,6,7,8],\n        [9,10,11,12],\n        [13,14,15,16],\n        [17,18,19,20],\n        [21,22,23,24]\n        ]\ndef check_done(facegroup, faces):\n    for fg in facegroup:\n        for cell in fg:\n            if faces[cell - 1] != faces[fg[0] - 1]:\n                return False\n    return True\n\n\ntl = { 1: 5, 3: 7, 5: 9, 7: 11, 9: 24, 11: 22,24:1,22:3, 14:16, 16:15, 15:13, 13:14 }\ntr = { 2: 6, 4: 8, 6:10, 8:12, 10:23, 12: 21, 23:2,21:4, 17:19,19:20,20:18,18:17}\ntt = {13:5,14:6,5:17,6:18,17:21,18:2,21:13,22:14,1:3,3:4,4:2,2:1}\ntd = {15:7,16:8,7:19,8:20,19:23,20:24,23:15,24:16,9:10,10:12,12:11,11:9}\ntf = {5:6,6:7,7:8,8:6,14:9,16:10,9:19,10:17,19:4,17:3,4:14,3:16}\ntb = {23:21,21:22,22:24,24:23,2:13,1:15,13:11,15:12,11:20,12:18,20:2,18:1}\nt = [tl, tr, tt, td, tf, tb]\n\nok = False\n\nfor trans in t:\n    (u, v) = generate_transformation(trans)\n    if check_done(facegroup, transform(u, original)):\n        ok = True\n        break\n    if check_done(facegroup, transform(v, original)):\n        ok = True\n        break\n\nif ok:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "def f(a, b, c, d):\n    return a == b == c == d\n\na = [0]\na.extend(list(map(int, input().split())))\nif f(a[13], a[14], a[15], a[16]) and f(a[17], a[18], a[19], a[20]):\n    if f(a[6], a[8], a[1], a[3]) and f(a[2], a[4], a[22], a[24]):\n        if f(a[21], a[23], a[9], a[11]) and f(a[10], a[12], a[5], a[7]):\n            print('YES')\n            return\n    if f(a[6], a[8], a[9], a[11]) and f(a[10], a[12], a[22], a[24]):\n        if f(a[21], a[23], a[1], a[3]) and f(a[2], a[4], a[5], a[7]):\n            print('YES')\n            return\nif f(a[5], a[6], a[7], a[8]) and f(a[21], a[22], a[23], a[24]):\n    if f(a[17], a[19], a[1], a[2]) and f(a[3], a[4], a[13], a[15]):\n        if f(a[14], a[16], a[11], a[12]) and f(a[9], a[10], a[18], a[20]):\n            print('YES')\n            return\n    if f(a[18], a[20], a[3], a[4]) and f(a[1], a[2], a[14], a[16]):\n        if f(a[13], a[15], a[9], a[10]) and f(a[11], a[12], a[17], a[19]):\n            print('YES')\n            return\nif f(a[9], a[10], a[11], a[12]) and f(a[1], a[2], a[3], a[4]):\n    if f(a[13], a[14], a[7], a[8]) and f(a[5], a[6], a[19], a[20]):\n        if f(a[17], a[18], a[23], a[24]) and f(a[21], a[22], a[15], a[16]):\n            print('YES')\n            return\n    if f(a[15], a[16], a[5], a[6]) and f(a[7], a[8], a[17], a[18]):\n        if f(a[19], a[20], a[21], a[22]) and f(a[23], a[24], a[13], a[14]):\n            print('YES')\n            return\nprint('NO')", "line = list(map(int, input().split()))\nyes = False\nq = [1, -1]\nif line[4] == line[5] and line[5] == line[6] and line[6] == line[7]:\n    if line[20] == line[21] and line[21] == line[22] and line[22] == line[23]:\n        can = True\n        c1 = []\n        if line[15] != line[13]:\n            can = False\n        else:\n            c1 += [line[15]]\n        if line[3] != line[2]:\n            can = False\n        else:\n            c1 += [line[3]]        \n        if line[16] != line[18]:\n            can = False\n        else:\n            c1 += [line[16]]\n        if line[8] != line[9]:\n            can = False\n        else:\n            c1 +=[line[8]] \n        c2 = []\n        if line[12] != line[14]:\n            can = False\n        else:\n            c2 += [line[14]]         \n        if line[0] != line[1]:\n            can = False\n        else:\n            c2 += [line[1]]\n        if line[17] != line[19]:\n            can = False\n        else:\n            c2 += [line[19]]        \n        if line[10] != line[11]:\n            can = False\n        else:\n            c2 += [line[11]]        \n        if can:\n            for i in range(2):\n                c3 = []\n                for j in range(4):\n                    c3 += [c1[(q[i]+j)%4]]\n                if c3 == c2:\n                    yes = True\nif line[0] == line[1] and line[1] == line[2] and line[2] == line[3]:\n    if line[8] == line[9] and line[9] == line[10] and line[10] == line[11]:\n        can = True\n        c1 = []\n        if line[12] != line[13]:\n            can = False\n        else:\n            c1 += [line[12]]\n        if line[4] != line[5]:\n            can = False\n        else:\n            c1 += [line[4]]        \n        if line[16] != line[17]:\n            can = False\n        else:\n            c1 += [line[16]]\n        if line[20] != line[21]:\n            can = False\n        else:\n            c1 += [line[21]] \n        c2 = []\n        if line[14] != line[15]:\n            can = False\n        else:\n            c2 += [line[14]]\n        if line[6] != line[7]:\n            can = False\n        else:\n            c2 += [line[7]]      \n        if line[18] != line[19]:\n            can = False\n        else:\n            c2 += [line[19]]\n        if line[22] != line[23]:\n            can = False\n        else:\n            c2 += [line[23]] \n        if can:\n            for i in range(2):\n                c3 = []\n                for j in range(4):\n                    c3 += [c1[(q[i]+j)%4]]\n                if c3 == c2:\n                    yes = True\nif line[12] == line[13] and line[13] == line[14] and line[14] == line[15]:\n    if line[16] == line[17] and line[17] == line[18] and line[18] == line[19]:\n        can = True\n        c1 = []\n        if line[0] != line[2]:\n            can = False\n        else:\n            c1 += [line[2]]\n        if line[4] != line[6]:\n            can = False\n        else:\n            c1 += [line[4]]        \n        if line[8] != line[10]:\n            can = False\n        else:\n            c1 += [line[10]]\n        if line[23] != line[21]:\n            can = False\n        else:\n            c1 += [line[21]] \n        c2 = []\n        if line[1] != line[3]:\n            can = False\n        else:\n            c2 += [line[1]]\n        if line[5] != line[7]:\n            can = False\n        else:\n            c2 += [line[7]]        \n        if line[11] != line[9]:\n            can = False\n        else:\n            c2 += [line[9]]\n        if line[22] != line[20]:\n            can = False\n        else:\n            c2 += [line[20]]  \n        if can:\n            for i in range(2):\n                c3 = []\n                for j in range(4):\n                    c3 += [c1[(q[i]+j)%4]]\n                if c3 == c2:\n                    yes = True\nif yes:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "c = [0] + list(map(int, input().split()))\nans = False\nif c[1] == c[2] == c[17] == c[19] and \\\n    c[18] == c[20] == c[9] == c[10] and \\\n    c[11] == c[12] == c[14] == c[16] and \\\n    c[13] == c[15] == c[3] == c[4] and \\\n    c[21] == c[22] == c[23] == c[24] and \\\n    c[5] == c[6] == c[7] == c[8]:\n    ans = True\nelif c[1] == c[2] == c[14] == c[16] and \\\n    c[18] == c[20] == c[3] == c[4] and \\\n    c[11] == c[12] == c[17] == c[19] and \\\n    c[13] == c[15] == c[9] == c[10] and \\\n    c[21] == c[22] == c[23] == c[24] and \\\n    c[5] == c[6] == c[7] == c[8]:\n    ans = True\nelif c[21] == c[22] == c[15] == c[16] and \\\n    c[13] == c[14] == c[7] == c[8] and \\\n    c[5] == c[6] == c[19] == c[20] and \\\n    c[17] == c[18] == c[23] == c[24] and \\\n    c[1] == c[2] == c[3] == c[4] and \\\n    c[9] == c[10] == c[11] == c[12]:\n    ans = True\nelif c[21] == c[22] == c[19] == c[20] and \\\n    c[13] == c[14] == c[23] == c[24] and \\\n    c[5] == c[6] == c[15] == c[16] and \\\n    c[17] == c[18] == c[7] == c[8] and \\\n    c[1] == c[2] == c[3] == c[4] and \\\n    c[9] == c[10] == c[11] == c[12]:\n    ans = True\nelif c[21] == c[23] == c[1] == c[3] and \\\n    c[2] == c[4] == c[5] == c[7] and \\\n    c[6] == c[8] == c[9] == c[11] and \\\n    c[10] == c[12] == c[22] == c[24] and \\\n    c[13] == c[14] == c[15] == c[16] and \\\n    c[17] == c[18] == c[19] == c[20]:\n    ans = True\nelif c[21] == c[23] == c[9] == c[11] and \\\n    c[2] == c[4] == c[22] == c[24] and \\\n    c[6] == c[8] == c[1] == c[3] and \\\n    c[10] == c[12] == c[5] == c[7] and \\\n    c[13] == c[14] == c[15] == c[16] and \\\n    c[17] == c[18] == c[19] == c[20]:\n    ans = True\nprint('YES' if ans else 'NO')\n\n", "def f(i):\n    nonlocal cube\n    return cube[i-1]\ncube=input().split()\n\nif f(1)==f(2) and f(1)==f(3) and f(1)==f(4):\n    if f(9)==f(10) and f(9)==f(11) and f(9)==f(12):\n        if f(5)==f(6) and f(5)==f(15) and f(5)==f(16):\n            if f(13)==f(14) and f(13)==f(23) and f(13)==f(24):\n                if f(7)==f(8) and f(7)==f(17) and f(7)==f(18):\n                    if f(21)==f(22) and f(21)==f(19) and f(21)==f(20):\n                        print (\"YES\")\n                        return\n        if f(13)==f(14) and f(13)==f(7) and f(13)==f(8):\n            if f(5)==f(6) and f(5)==f(19) and f(5)==f(20):\n                if f(17)==f(18) and f(17)==f(23) and f(17)==f(24):\n                    if f(21)==f(22) and f(21)==f(15) and f(21)==f(16):\n                        print (\"YES\")\n                        return\nif f(17)==f(18) and f(17)==f(19) and f(17)==f(20):\n    if f(13)==f(14) and f(13)==f(15) and f(13)==f(16):\n        if f(24)==f(22) and f(24)==f(10) and f(24)==f(12):\n            if f(1)==f(3) and f(1)==f(23) and f(1)==f(21):\n                if f(5)==f(7) and f(5)==f(2) and f(5)==f(4):\n                    if f(9)==f(11) and f(9)==f(6) and f(9)==f(8):\n                        print(\"YES\")\n                        return\n        if f(24)==f(22) and f(24)==f(2) and f(24)==f(4):\n            if f(1)==f(3) and f(1)==f(6) and f(1)==f(8):\n                if f(5)==f(7) and f(5)==f(10) and f(5)==f(12):\n                    if f(9)==f(11) and f(9)==f(23) and f(9)==f(21):\n                        print(\"YES\")\n                        return\nif f(5)==f(6) and f(5)==f(7) and f(5)==f(8):\n    if f(21)==f(22) and f(21)==f(23) and f(21)==f(24):\n        if f(3)==f(4) and f(17)==f(19) and f(10)==f(9) and f(16)==f(14):\n            if f(1)==f(2) and f(18)==f(20) and f(12)==f(11) and f(15)==f(13):\n                if f(3)==f(18) and f(17)==f(12) and f(10)==f(15) and f(16)==f(1):\n                    print(\"YES\")\n                    return\n                if f(3)==f(15) and f(17)==f(1) and f(10)==f(18) and f(16)==f(12):\n                    print(\"YES\")\n                    return\nprint(\"NO\")\n                \n", "\ndef ok(v):\n\tfor i in range(0, 24, 4):\n\t\tif len(set(v[i:i+4])) > 1:\n\t\t\treturn False\n\treturn True\n\na = list(map(int, input().split()))\n\nv = a[:]\nv[2] = a[15]\nv[3] = a[13]\nv[16] = a[2]\nv[18] = a[3]\nv[8] = a[18]\nv[9] = a[16]\nv[13] = a[8]\nv[15] = a[9]\nif ok(v):\n\tprint('YES')\n\treturn\n\nv = a[:]\nv[2] = a[16]\nv[3] = a[18]\nv[16] = a[9]\nv[18] = a[8]\nv[8] = a[13]\nv[9] = a[15]\nv[13] = a[3]\nv[15] = a[2]\nif ok(v):\n\tprint('YES')\n\treturn\n\nv = a[:]\nv[5] = a[13]\nv[4] = a[12]\nv[17] = a[5]\nv[16] = a[4]\nv[21] = a[17]\nv[20] = a[16]\nv[13] = a[21]\nv[12] = a[20]\n\nif ok(v):\n\tprint('YES')\n\treturn\n\nv = a[:]\nv[5] = a[17]\nv[4] = a[16]\nv[17] = a[21]\nv[16] = a[20]\nv[21] = a[13]\nv[20] = a[12]\nv[13] = a[5]\nv[12] = a[4]\n\nif ok(v):\n\tprint('YES')\n\treturn\n\nv = a[:]\nv[0] = a[4]\nv[2] = a[6]\nv[4] = a[8]\nv[6] = a[10]\nv[8] = a[23]\nv[10] = a[21]\nv[23] = a[0]\nv[21] = a[2]\n\nif ok(v):\n\tprint('YES')\n\treturn\n\nv = a[:]\nv[0] = a[23]\nv[2] = a[21]\nv[4] = a[0]\nv[6] = a[2]\nv[8] = a[4]\nv[10] = a[6]\nv[23] = a[8]\nv[21] = a[10]\n\nif ok(v):\n\tprint('YES')\n\treturn\n\nprint('NO')", "cube = [-1] + list(map(int, input().split()))\n\ndef ok(cube):\n    counter = 0\n    last = cube[1]\n    for i in cube:\n        if i == -1:\n            continue\n        elif last == i:\n            counter+=1\n        else:\n            if counter != 4:\n                return False\n            else:\n                counter = 1\n                last = i\n    return True\n\ndef rotl(cube):\n    cube_n = cube[:]\n    cube_n[1] = cube[3]\n    cube_n[2] = cube[1]\n    cube_n[3] = cube[4]\n    cube_n[4] = cube[2]\n    cube_n[5] = cube[17]\n    cube_n[6] = cube[18]\n    cube_n[17] = cube[21]\n    cube_n[18] = cube[22]\n    cube_n[21] = cube[13]\n    cube_n[22] = cube[14]\n    cube_n[13] = cube[5]\n    cube_n[14] = cube[6]\n    return cube_n\n\ndef rotr(cube):\n    cube_n = cube[:]\n    cube_n[1] = cube[2]\n    cube_n[2] = cube[4]\n    cube_n[3] = cube[1]\n    cube_n[4] = cube[3]\n    cube_n[5] = cube[13]\n    cube_n[6] = cube[14]\n    cube_n[17] = cube[5]\n    cube_n[18] = cube[6]\n    cube_n[21] = cube[17]\n    cube_n[22] = cube[18]\n    cube_n[13] = cube[21]\n    cube_n[14] = cube[22]\n    return cube_n\n\ndef next(cube):\n    cube_n = cube[:]\n    cube_n[1] = cube[5]\n    cube_n[2] = cube[6]\n    cube_n[3] = cube[7]\n    cube_n[4] = cube[8]\n    cube_n[5] = cube[9]\n    cube_n[6] = cube[10]\n    cube_n[7] = cube[11]\n    cube_n[8] = cube[12]\n    cube_n[9] = cube[24]\n    cube_n[10] = cube[23]\n    cube_n[11] = cube[22]\n    cube_n[12] = cube[21]\n    cube_n[13] = cube[14]\n    cube_n[14] = cube[16]\n    cube_n[15] = cube[13]\n    cube_n[16] = cube[15]\n    cube_n[17] = cube[19]\n    cube_n[18] = cube[17]\n    cube_n[19] = cube[20]\n    cube_n[20] = cube[18]\n    cube_n[21] = cube[4]\n    cube_n[22] = cube[3]\n    cube_n[23] = cube[2]\n    cube_n[24] = cube[1]\n    return cube_n\n\ndef next2(cube):\n    cube_n = cube[:]\n    cube_n[1] = cube[3]\n    cube_n[2] = cube[1]\n    cube_n[3] = cube[4]\n    cube_n[4] = cube[2]\n    cube_n[5] = cube[17]\n    cube_n[6] = cube[18]\n    cube_n[7] = cube[19]\n    cube_n[8] = cube[20]\n    cube_n[9] = cube[10]\n    cube_n[10] = cube[12]\n    cube_n[11] = cube[9]\n    cube_n[12] = cube[11]\n    cube_n[13] = cube[5]\n    cube_n[14] = cube[6]\n    cube_n[15] = cube[7]\n    cube_n[16] = cube[8]\n    cube_n[17] = cube[21]\n    cube_n[18] = cube[22]\n    cube_n[19] = cube[23]\n    cube_n[20] = cube[24]\n    cube_n[21] = cube[13]\n    cube_n[22] = cube[14]\n    cube_n[23] = cube[15]\n    cube_n[24] = cube[16]\n    return cube_n\n\n\ndef main(cube):\n    return ok(rotl(cube)) or ok(rotr(cube))\n\n\nfor i in range(4):\n    cube = next(cube)\n    if main(next(cube)):\n        print(\"YES\")\n        return\nfor i in range(4):\n    cube = next2(cube)\n    if main(next(cube)):\n        print(\"YES\")\n        return\nprint(\"NO\")\n", "colors = list(map(int, input().split()))\n\nfaces = {}\nfaces['top'] = colors[:4]\nfaces['front'] = colors[4:8]\nfaces['bottom'] = colors[8:12]\nfaces['left'] = colors[12:16]\nfaces['right'] = colors[16:20]\nfaces['back'] = [colors[21], colors[20], colors[23], colors[22]]\n\nstatus = {}\nfor face in list(faces.keys()):\n\tcolors = faces[face]\n\tif max(colors) == min(colors):\n\t\tstatus[face] = 'ok'\n\telse:\n\t\tif colors[0] == colors[1] and colors[2] == colors[3]:\n\t\t\tstatus[face] = 'h'\n\t\telif colors[0] == colors[2] and colors[1] == colors[3]:\n\t\t\tstatus[face] = 'v'\n\t\telse:\n\t\t\tstatus[face] = 'bad'\n\n# print(status)\n# print(faces)\n\nif 'bad' in list(status.values()):\n\tprint('NO')\nelse:\n\tif status['top'] == status['bottom'] == 'ok' and status['front'] == status['left'] == status['right'] == status['back'] == 'h':\n\t\tif (faces['front'][0] == faces['left'][3] and\n\t\t\tfaces['left'][0] == faces['back'][3] and\n\t\t\tfaces['back'][0] == faces['right'][3] and\n\t\t\tfaces['right'][0] == faces['front'][3] \n\t\t\tor\n\t\t\tfaces['front'][0] == faces['right'][3] and\n\t\t\tfaces['right'][0] == faces['back'][3] and\n\t\t\tfaces['back'][0] == faces['left'][3] and\n\t\t\tfaces['left'][0] == faces['front'][3]):\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\telif status['left'] == status['right'] == 'ok' and status['front'] == status['top'] == status['bottom'] == status['back'] == 'v':\n\t\tif (faces['front'][0] == faces['top'][3] and\n\t\t\tfaces['top'][0] == faces['back'][3] and\n\t\t\tfaces['back'][0] == faces['bottom'][3] and\n\t\t\tfaces['bottom'][0] == faces['front'][3] \n\t\t\tor\n\t\t\tfaces['front'][0] == faces['bottom'][3] and\n\t\t\tfaces['bottom'][0] == faces['back'][3] and\n\t\t\tfaces['back'][0] == faces['top'][3] and\n\t\t\tfaces['top'][0] == faces['front'][3]):\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\telif status['front'] == status['back'] == 'ok' and status['left'] == status['right'] == 'v' and status['top'] == status['bottom'] == 'h':\n\t\tif (faces['top'][0] == faces['left'][1] and\n\t\t\tfaces['left'][0] == faces['bottom'][0] and\n\t\t\tfaces['bottom'][3] == faces['right'][0] and\n\t\t\tfaces['right'][3] == faces['top'][3] \n\t\t\tor\n\t\t\tfaces['top'][0] == faces['right'][0] and\n\t\t\tfaces['right'][1] == faces['bottom'][0] and\n\t\t\tfaces['bottom'][3] == faces['left'][1] and\n\t\t\tfaces['left'][0] == faces['top'][3]):\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\telse:\n\t\tprint('NO')\n", "l = [0] + [int(i) for i in input().split(\" \")]\n\nif l[13] == l[14] == l[15] == l[16] and \\\n    l[17] == l[18] == l[19] == l[20]:\n    if l[5] == l[7] == l[10] == l[12] and \\\n        l[9] == l[11] == l[21] == l[23] and \\\n        l[1] == l[3] == l[6] == l[8] and \\\n        l[2] == l[4] == l[22] == l[24]:\n        print('YES')\n        return\n    if l[5] == l[7] == l[2] == l[4] and \\\n        l[9] == l[11] == l[6] == l[8] and \\\n        l[1] == l[3] == l[21] == l[23] and \\\n        l[10] == l[12] == l[22] == l[24]:\n        print('YES')\n        return\nif l[1] == l[2] == l[3] == l[4] and \\\n    l[9] == l[10] == l[11] == l[12]:\n    if l[5] == l[6] == l[19] == l[20] and \\\n        l[17] == l[18] == l[23] == l[24] and \\\n        l[21] == l[22] == l[15] == l[16] and \\\n        l[13] == l[14] == l[7] == l[8]:\n        print('YES')\n        return\n    if l[5] == l[6] == l[15] == l[16] and \\\n        l[13] == l[14] == l[23] == l[24] and \\\n        l[21] == l[22] == l[19] == l[20] and \\\n        l[17] == l[18] == l[7] == l[8]:\n        print('YES')\n        return\nif l[5] == l[6] == l[7] == l[8] and \\\n    l[21] == l[22] == l[23] == l[24]:\n    if l[3] == l[4] == l[18] == l[20] and \\\n        l[17] == l[19] == l[11] == l[12] and \\\n        l[9] == l[10] == l[13] == l[15] and \\\n        l[14] == l[16] == l[1] == l[2]:\n        print('YES')\n        return\n    if l[3] == l[4] == l[13] == l[15] and \\\n        l[14] == l[16] == l[11] == l[12] and \\\n        l[9] == l[10] == l[18] == l[20] and \\\n        l[17] == l[19] == l[1] == l[2]:\n        print('YES')\n        return\nprint('NO')\n", "def eq(cube, a,b,c,d):\n\treturn cube[a] == cube[b] and cube[b] == cube[c] and cube[c] == cube[d]\n\nopp = [2,5,0,4,3,1]\ncube = input().strip().split()\nfor i in range(6):\n\tif cube[4*i + 0] == cube[4*i + 1] and cube[4*i + 2] == cube[4*i + 1] and cube[4*i + 2] == cube[4*i + 3]:\n\t\tif cube[4*opp[i] + 0] == cube[4*opp[i] + 1] and cube[4*opp[i] + 2] == cube[4*opp[i] + 1] and cube[4*opp[i] + 2] == cube[4*opp[i] + 3]:\n\t\t\t# face1 = 0\n\t\t\t# for j in range(6):\n\t\t\t# \tif j != i and j != opp[i]:\n\t\t\t# \t\tface = j\n\t\t\t# \t\tbreak\n\t\t\t# face2 = 0\n\t\t\t# for j in range(6):\n\t\t\t# \tif j != face1 and j != i and j != opp[face1] and j != opp[i]:\n\t\t\t# \t\tface2 = j\n\t\t\t# \t\tbreak\n\t\t\tif (i == 0 or i == opp[0]):\n\t\t\t\tif (cube[4] == cube[5] and cube[4] == cube[18] and cube[18] == cube[19]):\n\t\t\t\t\tif (cube[16] == cube[17] and cube[17] == cube[22] and cube[22] == cube[23]):\n\t\t\t\t\t\tif (cube[20] == cube[21] and cube[21] == cube[14] and cube[14] == cube[15]):\n\t\t\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\t\t\treturn\n\t\t\t\tif (cube[4] == cube[5] and cube[4] == cube[15] and cube[14] == cube[15]):\n\t\t\t\t\tif cube[12] == cube[13] and cube[12] == cube[23] and cube[22] == cube[23]:\n\t\t\t\t\t\tif (cube[20] == cube[21] and cube[18] == cube[19] and cube[20] == cube[18]):\n\t\t\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\t\t\treturn\n\t\t\tif (i == 1  or i == opp[1]):\n\t\t\t\tif (eq(cube,2,3,12,14)):\n\t\t\t\t\tif (eq(cube,13, 15, 10, 11)):\n\t\t\t\t\t\tif (eq(cube, 8,9,19,17)):\n\t\t\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\t\t\treturn\n\t\t\t\tif eq(cube,2,3,17,19) and eq(cube,16,18,10,11) and eq(cube,8,9,12,14):\n\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\treturn\n\t\t\tif (i == 3 or i == opp[3]):\n\t\t\t\tif eq(cube,4,6,1,3) and eq(cube,0,2,20,22) and eq(cube,21,23,9,11):\n\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\treturn\n\t\t\t\tif eq(cube,4,6,9,11) and eq(cube,8,10,20,22) and eq(cube,21,23,1,3):\n\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\treturn\n\nprint(\"NO\")", "a = [(1,5),(3,7),(5,9),(7,11),(9,24),(11,22),(22,3),(24,1)]\nb = [(2,6),(4,8),(6,10),(8,12),(10,23),(12,21),(23,2),(21,4)]\nc = [(5,13),(6,14),(17,5),(18,6),(21,17),(22,18),(14,22),(13,21)]\nd = [(7,15),(8,16),(19,7),(20,8),(23,19),(24,20),(16,24),(15,23)]\ne = [(3,17),(4,19),(17,10),(19,9),(10,16),(9,14),(16,3),(14,4)]\nf = [(1,18),(2,20),(18,12),(20,11),(12,15),(11,13),(15,1),(13,2)]\n\n\nhh = list(map(int,input().split(\" \")))\nflag = False\n#hh = [ i//4 + 1 for i in range(24)]\n\nfor i in [a,b,c,d,e,f]:\n    # for j,k in i:\n    #     count[j] += 1\n    #     count[k] += 1\n    f = True\n    h = [hh[j] for j in range(24)]\n    for j,k in i:\n        h[j-1]= hh[k-1]\n    for j in range(6):\n        z = []\n        for k in range(4):\n            num = j * 4 + k\n            z.append(h[num])\n        cnt = 0\n        for c in range(1,7):\n            if c in z:\n                cnt+=1\n        if cnt != 1:\n            f = False\n    if f:\n        flag = True\n    f = True\n    h = [hh[j] for j in range(24)]\n    for j,k in i:\n        h[k-1]= hh[j-1]\n    for j in range(6):\n        z = []\n        for k in range(4):\n            num = j * 4 + k\n            z.append(h[num])\n        cnt = 0\n        for c in range(1,7):\n            if c in z:\n                cnt+=1\n        if cnt != 1:\n            f = False\n    if f:\n        flag = True\n\n\n\n\nif flag :\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "indexes = [ \\\n[[1, 2, 3, 4], [9, 10, 11, 12], [13, 14, 7, 8], [5, 6, 19, 20], [17, 18, 23, 24], [21, 22, 15, 16]], \\\n[[1, 2, 3, 4], [9, 10, 11, 12], [5, 6, 15, 16], [17, 18, 7, 8], [21, 22, 19, 20], [13, 14, 23, 24]], \\\n[[17, 18, 19, 20], [13, 14, 15, 16], [21, 23, 1, 3], [10, 12, 22, 24], [6, 8, 9, 11], [2, 4, 5, 7]], \\\n[[17, 18, 19, 20], [13, 14, 15, 16], [2, 4, 22, 24], [9, 11, 21, 23], [5, 7, 10, 12], [1, 3, 6, 8]], \\\n[[5, 6, 7, 8], [21, 22, 23, 24], [3, 4, 18, 20], [17, 19, 11, 12], [9, 10, 13, 15], [1, 2, 14, 16]], \\\n[[5, 6, 7, 8], [21, 22, 23, 24], [1, 2, 17, 19], [9, 10, 18, 20], [14, 16, 11, 12], [3, 4, 13, 15]]]\n\ndef same_color(ls, cube):\n    first = cube[ls[0]]\n    for ind in ls:\n        if cube[ind] != first:\n            return False\n    return True\n\ninp = input().split(\" \")\n#print(inp)\ninp = [ '0' ] + inp\n\nwork = False\nfor turn in indexes:\n    work = True\n    for grain in turn:\n        if not same_color(grain, inp):\n            work = False\n    if work:\n        print(\"YES\")\n        return\nprint(\"NO\")\n", "\ndef solvable(la):\n    colors_faces = [set() for _ in range(6)]\n    for i, a in zip(list(range(50)), la):\n        face = i // 4\n        colors_faces[face].add(a)\n        if len(colors_faces[face]) > 2: return False\n    ones = []\n    twos = []\n    for i, face_set in enumerate(colors_faces):\n        if len(face_set) == 1:\n            ones.append(i)\n        else:\n            twos.append(i)\n    twos.sort()\n    possibilities = [[0,1,2,5],[0,2,3,4],[1,3,4,5]]\n    if twos not in possibilities:\n        return False\n    yep = False\n    if twos == [0,1,2,5]:\n        yep = ((    la[0]==la[2] and la[2]==la[5] and la[5]==la[7]\n                and la[1]==la[3] and la[3]==la[21] and la[21]==la[23]\n                and la[4]==la[6] and la[6]==la[9] and la[9]==la[11]\n                and la[8]==la[10] and la[10]==la[20] and la[20]==la[22])\n        or (        la[0]==la[2] and la[2]==la[20] and la[20]==la[22]\n                and la[1]==la[3] and la[3]==la[4] and la[4]==la[6]\n                and la[5]==la[7] and la[7]==la[8] and la[8]==la[10]\n                and la[9]==la[11] and la[11]==la[21] and la[21]==la[23]))\n    elif twos == [0,2,3,4]:\n        yep = ((    la[0]==la[1] and la[1]==la[16] and la[16]==la[18]\n                and la[17]==la[19] and la[19]==la[9] and la[9]==la[8]\n                and la[10]==la[11] and la[11]==la[15] and la[15]==la[13]\n                and la[2]==la[3] and la[3]==la[12] and la[12]==la[14])\n        or    (     la[0]==la[1] and la[1]==la[13] and la[13]==la[15]\n                and la[2]==la[3] and la[3]==la[17] and la[17]==la[19]\n                and la[12]==la[14] and la[14]==la[8] and la[8]==la[9]\n                and la[10]==la[11] and la[11]==la[16] and la[16]==la[18]))\n    elif twos == [1,3,4,5]:\n        yep = ((    la[12]==la[13] and la[13]==la[6] and la[6]==la[7]\n                and la[4]==la[5] and la[5]==la[18] and la[18]==la[19]\n                and la[16]==la[17] and la[17]==la[22] and la[22]==la[23]\n                and la[20]==la[21] and la[21]==la[14] and la[14]==la[15])\n        or    (     la[14]==la[15] and la[4]==la[5] and la[14]==la[4]\n                and la[6]==la[7] and la[6]==la[16] and la[16]==la[17]\n                and la[18]==la[19] and la[19]==la[20] and la[20]==la[21]\n                and la[12]==la[13] and la[13]==la[22] and la[22]==la[23]))\n    return yep\n\nla = list(map(int, input().split()))\nprint('YES' if solvable(la) else 'NO')\n\n", "moves = [\n    [1,3,5,7,9,11,24,22],\n    [2,4,6,8,10,12,23,21],\n    [13,14,5,6,17,18,21,22],\n    [15,16,7,8,19,20,23,24],\n    [2,1,13,15,11,12,20,18],\n    [4,3,14,16,9,10,19,17]\n    ]\ndata = [0]+list(map(int, input().split()))\n\ndef check(data):\n    if data[1]==data[2]==data[3]==data[4] and data[5]==data[6]==data[7]==data[8] and data[9]==data[10]==data[11]==data[12] and data[13]==data[14]==data[15]==data[16] and data[17]==data[18]==data[19]==data[20] and data[21]==data[22]==data[23]==data[24]:\n        return True\n    else:\n        return False\n\nfor row in moves:\n    temp = data[:]\n    for i in range(8):\n        temp[row[i]]=data[row[(i+2)%8]]\n    if check(temp):\n        print('YES')\n        break\n    temp = data[:]\n    for i in range(8):\n        temp[row[i]]=data[row[(8+i-2)%8]]\n    if check(temp):\n        print('YES')\n        break\nelse:\n    print('NO')\n"]