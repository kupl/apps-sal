["n = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\nnew = [[0] * n for i in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] == 'o':\n            new[i][j] = 1\nflag = True\nfor i in range(n):\n    for j in range(n):\n        s = 0\n        if i > 0 and new[i - 1][j] == 1:\n            s += 1\n        if i < n - 1 and new[i + 1][j] == 1:\n            s += 1\n        if j > 0 and new[i][j - 1] == 1:\n            s += 1\n        if j < n - 1 and new[i][j + 1] == 1:\n            s += 1\n        if s % 2 == 1:\n            flag = False\n            break\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "N = int(input())\nm = [input() for i in range(N)]\n\ndx, dy = [0, 0, 1, -1], [1, -1, 0, 0]\n\nfor x in range(N):\n    for y in range(N):\n        cnt = 0\n        for i in range(4):\n            tx, ty = x + dx[i], y + dy[i]\n            if 0 <= tx < N and 0 <= ty < N and m[ty][tx] == 'o':\n                cnt += 1\n        if cnt % 2:\n            print('NO')\n            return\nprint('YES')\n", "n=int(input())\n\n\nb=[[0 for i in range(n+2)] for j in range(n+2)]\n\nfor i in range(1,n+1):\n\ts=input()\n\tfor j in range(1, n+1):\n\t\tif s[j-1]=='o':\n\t\t\tb[i-1][j]+=1\n\t\t\tb[i+1][j]+=1\n\t\t\tb[i][j+1]+=1\n\t\t\tb[i][j-1]+=1\nyes=True\nfor i in range(1,n+1):\n\tif not yes:\n\t\tbreak\n\tfor j in range(1, n+1):\n\t\tif b[i][j]%2==1:\n\t\t\tprint(\"NO\")\n\t\t\tyes=False\n\t\t\tbreak\nif yes:\n\tprint(\"YES\")", "import sys\n\ndef o_s(i, j):\n    ret = 0\n    if board[i-1][j] == 'o': ret += 1\n    if board[i+1][j] == 'o': ret += 1\n    if board[i][j-1] == 'o': ret += 1\n    if board[i][j+1] == 'o': ret += 1\n    return ret\n\nn = int(sys.stdin.readline())\nboard = ['x'*(n+2)]\nfor i in range(n): board.append('x' + sys.stdin.readline().strip() + 'x')\nboard.append('x'*(n+2))\n\neven = True\nfor i in range(1, n+1):\n    for j in range(1, n+1):\n        if o_s(i, j) % 2 == 1: even = False\n        if not even: break\n    if not even: break\nif even: print(\"YES\")\nelse: print(\"NO\")", "n=int(input())\ndesk=[input() for i in range(n)]\nfl=True\nfor i in range(n):\n    for g in range(n):\n        a=0\n        if g-1>=0:\n            if desk[i][g-1]=='o':\n                a+=1\n        if g+1<n:\n            if desk[i][g+1]=='o':\n                a+=1\n        if i-1>=0:\n            if desk[i-1][g]=='o':\n                a+=1\n        if i+1<n:\n            if desk[i+1][g]=='o':\n                a+=1\n        if a%2!=0:\n            fl=False\n            break\n    if not fl:\n        print('NO')\n        break\nif fl:\n    print('YES')", "n=int(input())\na=[input() for i in range(n)]\nif n==1:\n    print(\"YES\")\nelse:\n    ans=True\n    c=0\n    for i in range(n):\n        for j in range(n):\n            if i==0 and j==0:\n                c+=int(a[i+1][j]=='o')+int(a[i][j+1]=='o')\n            elif i==n-1 and j==n-1:\n                c+=int(a[i-1][j]=='o')+int(a[i][j-1]=='o')\n            elif i==0 and j==n-1:\n                c+=int(a[i+1][j]=='o')+int(a[i][j-1]=='o')\n            elif i==n-1 and j==0:\n                c+=int(a[i-1][j]=='o')+int(a[i][j+1]=='o')\n            elif i==0:\n                c+=int(a[i+1][j]=='o')+int(a[i][j+1]=='o')+int(a[i][j-1]=='o')\n            elif i==n-1:\n                c+=int(a[i-1][j]=='o')+int(a[i][j+1]=='o')+int(a[i][j-1]=='o')\n            elif j==0:\n                c+=int(a[i+1][j]=='o')+int(a[i-1][j]=='o')+int(a[i][j+1]=='o')\n            elif j==n-1:\n                c+=int(a[i+1][j]=='o')+int(a[i-1][j]=='o')+int(a[i][j-1]=='o')\n            else:\n                c+=int(a[i+1][j]=='o')+int(a[i][j+1]=='o')+int(a[i][j-1]=='o')+int(a[i-1][j]=='o')\n            if c%2!=0:\n                ans=False\n    print([\"NO\",\"YES\"][ans])", "n = int(input())\nA = []\ns = ''\nst = ''\nfor i in range(n + 2):\n    st += 'x'\nA.append(st)\nfor i in range(n):\n    s = 'x' + input() + 'x'\n    A.append(s)\nA.append(st)\nans = \"YES\"\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        c = 0\n        if A[i + 1][j] == 'o': c += 1\n        if A[i - 1][j] == 'o': c += 1\n        if A[i][j + 1] == 'o': c += 1\n        if A[i][j - 1] == 'o': c += 1\n        if c % 2 == 0:\n            continue\n        else:\n            ans = \"NO\"\n            break\nprint(ans)\n", "n = int(input())\nb = []\nk = 0\nans = 'YES'\nfor i in range(n):\n    b.append(input())\nfor i in range(n):\n    for j in range(n):\n        if j - 1 >= 0:\n            if b[i][j-1] == 'o':\n                k += 1\n        if j + 1 < n:\n            if b[i][j+1] == 'o':\n                k += 1\n        if i - 1 >= 0:\n            if b[i-1][j] == 'o':\n                k += 1\n        if i + 1 < n:\n            if b[i+1][j] == 'o':\n                k += 1\n        if k % 2 == 1:\n            ans = 'NO'\nprint(ans)\n                \n", "n = int(input())\ncount = 0\nboard = []\nfail = False\nwhile count < n:\n    x = input()\n    for letter in x:\n        board.append(letter)\n    count += 1\nfor i in range(n**2):\n    total = 0\n    if i-n < 0:\n        pass\n    else:\n        if board[i-n] == 'o':\n            total += 1\n    if i-1 < 0:\n        pass\n    elif i % n == 0:\n        pass\n    else:\n        if board[i-1] == 'o':\n            total += 1\n    if i+1 > n**2-1:\n        pass\n    elif i % n == n-1:\n        pass\n    else:\n        if board[i+1] == 'o':\n            total += 1\n    if i+n > n**2-1:\n        pass\n    else:\n        if board[i+n] == 'o':\n            total += 1\n    if total % 2 == 1:\n        fail = True\nif fail == True:\n    print(\"NO\")\nelse:\n    print(\"YES\")", "n = int(input())\na = ['#' * (n + 2)]\nfor i in range(1, n+1):\n    a.append('#')\n    a[i] += input()\n    a[i] += '#'\na.append('#' * (n + 2))\no = True\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        cnt = 0\n        if a[i-1][j] == 'o':\n            cnt += 1\n        if a[i][j-1] == 'o':\n            cnt += 1\n        if a[i+1][j] == 'o':\n            cnt += 1\n        if a[i][j+1] == 'o':\n            cnt += 1\n        if cnt % 2 != 0:\n            o = False\n            break\n    if o == False:\n        break\nif o:\n    print('YES')\nelse:\n    print('NO')", "__author__ = 'Natik'\nn = int(input())\nmas = [[100] * n for i in range(n)]\nfor i in range(0, n):\n    mas[i] = input()\not = 0\nfor i in range(0, n):\n    for j in range(0, n):\n        klo = 0\n        if j+1 < n:\n            if mas[i][j+1] == 'o':\n                klo += 1\n        if i+1 < n:\n            if mas[i+1][j] == 'o':\n                klo += 1\n        if i-1 >= 0:\n            if mas[i-1][j] == 'o':\n                klo += 1\n        if j-1 >= 0:\n            if mas[i][j-1] == 'o':\n                klo += 1\n        if klo % 2 == 1:\n            ot = 1\nif ot == 0:\n    print('YES')\nelse:\n    print('NO')", "table = []\n\nactions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n\ndef go(pos, diff):\n  return (pos[0] + diff[0], pos[1] + diff[1])\n\ndef check(pos, n):\n  return pos[0] >= 0 and pos[0] < n and pos[1] >= 0 and pos[1] < n\n\ndef pt(pos):\n  return pos[1] + pos[0] * n\n\ndef is_even(table, pos):\n  nonlocal actions\n  count = 0\n  for action in actions:\n    tgt = go(pos, action)\n    if check(tgt, n):\n      if(table[pt(tgt)] == 'o'):\n        count += 1\n        #print(tgt)\n  #print(count)\n  return count % 2 == 0\n\nn = int(input())\nfor x in range(n):\n  table += input()\n\nfor i in range(n):\n  for j in range(n):\n    if not is_even(table, (i, j)):\n      #print(i, j)\n      print(\"NO\")\n      quit()\n\nprint(\"YES\")\n\n", "n=int(input())\nm=list()\nfor i in range (n):\n    m.append(input())\n    \nfor i in range(n):\n    for j in range(n):\n        k=0\n        if (i>0) and (m[i-1][j]=='o'):\n            k+=1\n        if (i<(n-1)) and (m[i+1][j]=='o'):\n            k+=1\n        if (j>0) and (m[i][j-1]=='o'):\n            k+=1\n        if (j<n-1) and (m[i][j+1]=='o'):\n            k+=1\n        if (k%2):\n            print(\"NO\")\n            return\nprint(\"YES\")", "n = int(input())\nboard = []\nfor i in range(n):\n    r = input()\n    board.append(r)\n#print(board)\ncan = True\nfor i in range(n):\n    row = board[i]\n    for j in range(n):\n        ele = row[j]\n        c = 0\n        ind_r = [j + 1, j - 1]\n        ind_c = [i + 1, i - 1]\n        for k in range(2):\n            if ind_r[k] >= n or ind_r[k] < 0 :\n                continue\n            \n            else:\n                #print(row[ind_r[k]])\n                #print(\"----------\")\n                if row[ind_r[k]] == 'o':\n                    c += 1\n        for k in range(2):\n            if ind_c[k] >= n or ind_c[k] < 0:\n                continue\n            \n            else:\n                #print(board[ind_c[k]][j])\n                #print(\"----------\")\n                if board[ind_c[k]][j] == 'o':\n                    c += 1\n        #print(c)\n        if c % 2 != 0:\n            can = False\n            break\n    if can == False:\n        break\nif can == True:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    \n            \n        \n        \n", "import collections\nimport itertools\n\n\nn = int(input())\nm = collections.defaultdict(lambda: \"x\")\nfor y in range(n):\n\n    for x, ch in enumerate(input()):\n\n        m[x, y] = ch\n\ndeltas = ((-1, 0), (0, -1), (1, 0), (0, 1))\nfor p in itertools.product(list(range(n)), repeat=2):\n\n    cps = [tuple(map(sum, list(zip(p, dp)))) for dp in deltas]\n    if len(tuple([cp for cp in cps if m[cp] == \"o\"])) % 2:\n\n        print(\"NO\")\n        return\n\nprint(\"YES\")\n", "n=int(input())\ni=0\nthelist=[]\nwhile i<n:\n    newline=input()\n    j=0\n    newlist=[]\n    while j<len(newline):\n        newlist.append(newline[j])\n        j+=1\n    thelist.append(newlist)\n    i+=1\n#print(thelist)\nfinallist=[]\nx=0\ny=0\nrow=[]\nwhile y<len(thelist)+2:\n    row.append(0)\n    y+=1\n#print(row)\nfinallist.append(row)\nfor item in thelist:\n    item_0=[0]\n    for x in item:\n        if x==\"o\":\n            item_0.append(1)\n        else:\n            item_0.append(0)\n    item_0.append(0)\n    finallist.append(item_0)\nfinallist.append(row)\n#print(finallist)\nistrue=\"YES\"\ni=1\nj=1\n#print(len(finallist))\nwhile i<len(finallist)-1:\n    while j<len(finallist)-1:\n        thecount=finallist[i-1][j]+finallist[i+1][j]+finallist[i][j-1]+finallist[i][j+1]\n        #print(thecount)\n        if thecount % 2 ==1:\n            istrue=\"NO\"\n        j+=1\n    i+=1\n    j=1\nprint(istrue)\n", "n, l, flag, o = int(input()), [], True, 0\nfor i in range(n):\n    l.append('0')\n    l[i] = str(input())\nfor i in range(n):\n    for el in range(n):\n        if el - 1 >= 0:\n            if l[i][el - 1] == 'o':\n                o += 1\n        if el + 1 < n:\n            if l[i][el + 1] == 'o':\n                o += 1\n        if i - 1 >= 0:\n            if l[i - 1][el] == 'o':\n                o += 1\n        if i + 1 < n:\n            if l[i + 1][el] == 'o':\n                o += 1\n        flag &= (o % 2 == 0)\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "__author__ = '\u0413\u043b\u0435\u0431'\nimport sys\nn = int(input())\ndesk = [[0] * (n + 10) for j in range(n + 10)]\nfor i in range(n):\n    str = input()\n    for j in range(n):\n        if str[j] == 'x':\n            desk[i][j] = 0\n        else:\n            desk[i][j] = 1\nfor i in range(n):\n    for j in range(n):\n        if (desk[i][j + 1] + desk[i][j - 1] + desk[i + 1][j] + desk[i - 1][j]) % 2 != 0:\n            print('NO')\n            return\nprint('YES')", "li=[]\nn= int(input())\nmatrix = [[0 for i in range(n)] for i in range(n)]\nfor _ in range(n):\n\tl=input()\n\tli.append(l)\nflag = 0\nfor i in range(n):\n\tfor j in range(n):\n\t\tcount = 0\n\t\tif(j>=1):\n\t\t\tif(li[i][j-1]=='o'):\n\t\t\t\tcount = count+1\n\t\tif(j<n-1):\n\t\t\tif(li[i][j+1]=='o'):\n\t\t\t\tcount = count+1\n\t\tif(i<n-1):\n\t\t\tif(li[i+1][j]=='o'):\n\t\t\t\tcount = count+1\n\t\tif(i>=1):\n\t\t\tif(li[i-1][j]=='o'):\n\t\t\t\tcount = count+1\n\t\tif(count%2!=0):\n\t\t\tflag=1\n\t\t\tbreak\n\t\t\tbreak\nif(flag==0):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "p = 1\nn = int(input())\ngrid = []\nfor i in range(0,n):\n    grid.append(input())\ndifx = (1,-1,0,0)\ndify = (0,0,-1,1)\nfor i in range(0,n):\n    for j in range(0,n):\n        count = 0\n        for c in range(0,4):\n            x = i+difx[c]\n            y = j+dify[c]\n            if x < 0 or x >= n or y < 0 or y >= n:\n                continue\n            if grid[x][y] == 'o':\n                count += 1\n        if count%2 != 0:\n            p = 0\n            \n\n\nif p == 1:\n    print (\"YES\")\nelse:\n    print(\"NO\")\n", "n = int(input())\n\nb = [input() for _ in range(n)]\nans = True\nfor i in range(n):\n    for j in range(n):\n        ans &= len([1 for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)] if 0 <= i + di < n and 0 <= j + dj < n and b[i + di][j + dj] == 'o']) % 2 == 0\nprint('YES' if ans else 'NO')", "tcs = int(input())\nboard = [['.']*(tcs+2)]+[['.']+[x for x in input()]+['.'] for i in range(tcs)]+[['.']*(tcs+2)]\n\ndef do(board, size):\n    for i in range(1, size+1):\n        for j in range(1, size+1):\n            listx = [board[i+1][j], board[i-1][j], board[i][j-1], board[i][j+1]]\n            if listx.count('o')%2 != 0:\n                return False\n    return True\n\nif do(board, tcs):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "def prepare(n):\n    table = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        line = input()\n        for j in range(n):\n            if line[j] == 'o':\n                if i - 1 >= 0:\n                    table[i - 1][j] = (table[i - 1][j] + 1) % 2\n                    if table[i - 1][j] != 0:\n                        return 'NO'\n                if j - 1 >= 0:\n                    table[i][j - 1] = (table[i][j - 1] + 1) % 2\n                if j + 1 < n:\n                    table[i][j + 1] = (table[i][j + 1] + 1) % 2\n                if i + 1 < n:\n                    table[i + 1][j] = (table[i + 1][j] + 1) % 2\n    for j in range(n):\n        if table[n - 1][j] != 0:\n            return 'NO'\n    return 'YES'\n\n\ndef __starting_point():\n    n = int(input())\n    \n    print(prepare(n))\n\n\n__starting_point()", "n = int(input())\na = [\"x\" * (n + 2)] + [\"x\" + input() + \"x\" for i in range(n)] + [\"x\" * (n + 2)]\ndef f(i, j):\n  c = 0\n  if a[i - 1][j] == 'o':\n    c += 1\n  if a[i][j - 1] == 'o':\n    c += 1\n  if a[i + 1][j] == 'o':\n    c += 1\n  if a[i][j + 1] == 'o':\n    c += 1\n  return c % 2 == 0\nprint(\"YES\" if all(f(i + 1, j + 1) for i in range(n) for j in range(n)) else \"NO\")"]