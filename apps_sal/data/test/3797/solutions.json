["from collections import defaultdict\n\nMOD = 1000000007\niist = lambda: map(int,input().split())\n\nN,M = iist()\nQ = defaultdict(list)\nfor i in range(M):\n  l,r,x = iist()\n  Q[r].append((l,x))\n\nif any(x != 1 for l,x in Q[1]):\n  print(0)\n  return\n\ndp = defaultdict(int)\ndp[0,0] = 3\n\nx_sum = [3]\ny_sum = [3]\ns = 3\n\nfor pk in range(1,N):\n  k = pk+1\n\n  for i,(a,b) in enumerate(zip(x_sum,y_sum)):\n    c = (a+b)%MOD\n    dp[i,pk] = c\n    x_sum[i] += c\n\n  x_sum.append(0)\n  y_sum.append((2*s)%MOD)\n  s *= 3\n  subQ = Q[k]\n\n  for i,j in list(dp.keys()):\n    for l,x in subQ:\n      if x != (l<=i)+(l<=j)+1:\n        c = dp[i,j]\n        x_sum[i] -= c\n        y_sum[j] -= c\n        s -= c\n        del dp[i,j]\n        break\n\n  for i in range(pk):\n    x_sum[i] %= MOD\n    y_sum[i] %= MOD\n  s %= MOD\n\nprint(s)", "MOD = 10**9 + 7\nN, M = map(int, input().split())\nS = [[N]*(N+1) for i in [0,1,2]]\nT = [[0]*(N+1) for i in [0,1,2]]\n\nC = [0]*(N+1)\nfor i in range(M):\n    l, r, x = map(int, input().split())\n    S[x-1][r] = min(S[x-1][r], l)\n    T[x-1][r] = max(T[x-1][r], l)\n    C[r] = 1\n\nS0, S1, S2 = S\nT0, T1, T2 = T\n\nok = 1\nfor i in range(N+1):\n    if not T2[i] < S1[i] or not T1[i] < S0[i]:\n        ok = 0\n        break\n\nif not ok:\n    print(0)\n    return\n\n\nX = {(0, 0): 3}\nfor b in range(1, N):\n    t2 = T2[b+1]; s1 = S1[b+1]; t1 = T1[b+1]; s0 = S0[b+1]\n    check = lambda r, g: t2 <= r < s1 and t1 <= g < s0\n\n    Z = [0]*(N+1)\n    if C[b+1]:\n        if t1 <= b < s0:\n            for (r, g), v in X.items():\n                if t2 <= g < s1:\n                    # r <- b+1\n                    Z[g] += v\n                if t2 <= r < s1:\n                    # g <- b+1\n                    Z[r] += v\n        X = {(r, g): v for (r, g), v in X.items() if t2 <= r < s1 and t1 <= g < s0}\n    else:\n        Z = [0]*(N+1)\n        for (r, g), v in X.items():\n            # r <- b+1\n            Z[g] += v\n            # g <- b+1\n            Z[r] += v;\n    for z, v in enumerate(Z):\n        if v:\n            X[z, b] = v % MOD\nprint(sum(X.values()) % MOD)", "import sys\ninput = sys.stdin.readline\nimport numpy as np\nfrom collections import defaultdict\n\n# \u6700\u5f8c\u306b\u7f6e\u3044\u305f\u3082\u306e\u306f\u8d64\u3068\u3059\u308b\uff083\u500d\uff09\n# \u9752\u3001\u7dd1\u3092\u6700\u5f8c\u306b\u3044\u3064\u7f6e\u3044\u305f\u306e\u304b\u3092\u6301\u3063\u3066dp\n\nMOD = 10 ** 9 + 7\nN,M = map(int,input().split())\nLRX = [[int(x) for x in input().split()] for _ in range(M)]\n\nR_to_LX = defaultdict(list)\nfor l,r,x in LRX:\n    R_to_LX[r].append((l,x))\n\n# 1\u500b\u76ee\u3092\u7f6e\u3044\u305f\u6642\u70b9\nfor n in range(1,N+1):\n    if n == 1:\n        dp = np.zeros((n,n), dtype = np.int64)\n        dp[0,0] = 1\n    else:\n        prev = dp\n        dp = np.zeros((n,n), dtype = np.int64)\n        # \u540c\u8272\n        dp[:-1,:-1] = prev\n        # \u9752\u304b\u3089\u8d64\u306b\n        dp[n-1,:-1] = prev.sum(axis = 0)\n        # \u7dd1\u304b\u3089\u8d64\u306b\n        dp[:-1,n-1] = prev.sum(axis = 1)\n    # \u30eb\u30fc\u30eb\u9055\u53cd\u3092\u9664\u5916\u3059\u308b\n    for l,x in R_to_LX[n]:\n        if x == 1:\n            dp[l:,:] = 0\n            dp[:,l:] = 0\n        elif x == 2:\n            dp[l:,l:] = 0\n            dp[:l,:l] = 0\n        elif x == 3:\n            dp[:l,:] = 0\n            dp[:,:l] = 0\n    dp %= MOD\n\nanswer = dp.sum() * 3 % MOD\nprint(answer)", "MOD = 10**9 + 7\nN, M = map(int, input().split())\nS = [[N+1]*(N+1) for i in [0,1,2]]\nT = [[0]*(N+1) for i in [0,1,2]]\n\nC = [0]*(N+1)\nfor i in range(M):\n    l, r, x = map(int, input().split())\n    if r-l < x-1:\n        print(0)\n        return\n    S[x-1][r] = min(S[x-1][r], l)\n    T[x-1][r] = max(T[x-1][r], l)\n    C[r] = 1\n\nS0, S1, S2 = S\nT0, T1, T2 = T\n\nok = 1\nfor i in range(N+1):\n    if not T2[i] < S1[i] or not T1[i] < S0[i]:\n        ok = 0\n        break\n\nif not ok:\n    print(0)\n    return\n\nRM = [N+1]*(N+1); GM = [N+1]*(N+1)\nfor i in range(N-1, -1, -1):\n    RM[i] = min(RM[i+1], S1[i+1])\n    GM[i] = min(GM[i+1], S0[i+1])\n\n\nX = {(0, 0): 3}\nD = [0]*(N+1); D[0] = 6\nB = [{} for i in range(N+1)]\nB[0][0] = 3\nbb = 0\nfor b in range(1, N):\n    t2 = T2[b+1]; s1 = S1[b+1]; t1 = T1[b+1]; s0 = S0[b+1]\n\n    rm = RM[b]\n    gm = GM[b]\n    if t1 <= b < gm:\n        F = B[b]\n        for z in range(t2, min(rm, b)):\n            v = D[z] % MOD\n            if v:\n                F[z] = v; D[z] += v; D[b] += v\n    if C[b+1]:\n        for g in range(bb, min(t1, b)):\n            for r, v in B[g].items():\n                D[r] -= v; D[g] -= v\n            B[g] = None\n        bb = max(t1, bb)\n        for g in range(bb, b):\n            for r, v in B[g].items():\n                if not t2 <= r < s1:\n                    D[r] -= v; D[g] -= v\n            B[g] = {r: v for r, v in B[g].items() if t2 <= r < s1}\nans = 0\nfor b in range(bb, N+1):\n    if B[b]:\n        ans += sum(B[b].values())\nprint(ans % MOD)", "from collections import defaultdict\n\nMOD = 1000000007\niist = lambda: map(int,input().split())\n\nN,M = iist()\nQ = defaultdict(list)\nfor i in range(M):\n  l,r,x = iist()\n  Q[r].append((l,x-1))\n\nif any(x != 0 for l,x in Q[1]):\n  print(0)\n  return\n\ndp = {(0,0):3}\nmemo = [6]\ns = 3\n\nfor pk in range(1,N):\n  k = pk+1\n\n  for i,c in enumerate(memo):\n    c %= MOD\n    dp[i,pk] = c\n    memo[i] *= 2\n    memo[i] %= MOD\n\n  memo.append(2*s%MOD)\n  s = 3*s%MOD\n  subQ = Q[k]\n\n  for i,j in list(dp.keys()):\n    for l,x in subQ:\n      if x != (l<=i)+(l<=j):\n        c = dp[i,j]\n        memo[i] -= c\n        memo[j] -= c\n        s -= c\n        del dp[i,j]\n        break\n\n  s %= MOD\n\nprint(s)", "import sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\n# \u4e00\u756a\u5f8c\u308d\u306e\u8272\u3092(\u8d64\u306b)\u56fa\u5b9a\u3057\u305f\u4e0a\u3067\u3001\u3082\u3089\u3046DP\u306b\u66f8\u304d\u63db\u3048\ndef main():\n    md = 10 ** 9 + 7\n    n, m = MI()\n    rtol = defaultdict(list)\n    for _ in range(m):\n        l, r, x = MI()\n        rtol[r].append([l, x])\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for k in range(1, n + 1):\n        for i in range(k - 1):\n            dp[i][k - 1] = dp[k - 1][i] = sum(dp[i][:k - 1]) % md\n        for l, x in rtol[k]:\n            if x == 1:\n                for i in range(l, k):\n                    for j in range(k):\n                        dp[i][j] = dp[j][i] = 0\n            if x == 2:\n                for i in range(l, k):\n                    for j in range(i + 1, k):\n                        dp[i][j] = dp[j][i] = 0\n                for i in range(l):\n                    for j in range(i + 1):\n                        dp[i][j] = dp[j][i] = 0\n            if x == 3:\n                for i in range(l):\n                    for j in range(k):\n                        dp[i][j] = dp[j][i] = 0\n\n    # p2D(dp)\n    print(sum(sum(dr) for dr in dp) * 3 % md)\n\nmain()\n"]