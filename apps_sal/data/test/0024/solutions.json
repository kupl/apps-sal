["s = [ [ c for c in input() ] for i in range(10) ]\ndef win():\n  for i in range(10):\n    for j in range(10):\n      ok = True\n      for k in range(5):\n        if j+k>9: ok = False\n        elif s[i][j+k] != 'X': ok = False\n      if ok: return True\n      ok = True\n      for k in range(5):\n        if i+k>9: ok = False\n        elif s[i+k][j] != 'X': ok = False\n      if ok: return True\n      ok = True\n      for k in range(5):\n        if j+k>9 or i+k>9: ok = False\n        elif s[i+k][j+k] != 'X': ok = False\n      if ok: return True\n      ok = True\n      for k in range(5):\n        if i-k<0 or j+k>9: ok = False\n        elif s[i-k][j+k] != 'X': ok = False\n      if ok: return True\n  return False\nfor i in range(10):\n  for j in range(10):\n    if s[i][j]=='.':\n      s[i][j] = 'X'\n      if win():\n        print('YES')\n        return\n      s[i][j] = '.'\nprint('NO')\n", "\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n\ng=[list(input().strip()) for _ in range(10)]\n\nans=0\n\nfor i in range(10):\n    for j in range(10):\n        if g[i][j]!='.': continue\n        g[i][j]='X'\n        # check possible\n        for p in range(10):\n            for q in range(10):\n                # cancer\n                if p+4<10:\n                    cnt=0\n                    for r in range(5):\n                        if g[p+r][q]=='X':\n                            cnt+=1\n                    if cnt==5: ans=1\n                if q+4<10:\n                    cnt=0\n                    for r in range(5):\n                        if g[p][q+r]=='X':\n                            cnt+=1\n                    if cnt==5: ans=1\n                if p+4<10 and q+4<10:\n                    cnt=0\n                    for r in range(5):\n                        if g[p+r][q+r]=='X':\n                            cnt+=1\n                    if cnt==5: ans=1\n                    cnt=0\n                    for r in range(5):\n                        if g[p+4-r][q+r]=='X':\n                            cnt+=1\n                    if cnt==5: ans=1\n        # done\n        g[i][j]='.'\n\nprint(\"YES\" if ans else \"NO\")", "a = []\nfor i in range(10):\n    a.append(input())\n\ndef valid(x, y):\n    if 0 <= x <= 9 and 0 <= y <= 9:\n        return True\n    return False\n\ndef check(x, y, direction):\n    ans = 1\n    curr_x = x + direction[0]\n    curr_y = y + direction[1]\n    while valid(curr_x, curr_y) and a[curr_x][curr_y] == 'X':\n        ans += 1\n        curr_x += direction[0]\n        curr_y += direction[1]\n    curr_x = x - direction[0]\n    curr_y = y - direction[1]\n    while valid(curr_x, curr_y) and a[curr_x][curr_y] == 'X':\n        ans += 1\n        curr_x -= direction[0]\n        curr_y -= direction[1]\n    return ans\n\ncurr = 0\nfor i in range(10):\n    for j in range(10):\n        if a[i][j] == '.':\n            for direction in [[1, 0], [0, 1], [1, 1], [1, -1]]:\n                curr = max(curr, check(i, j, direction))\n\nif curr >= 5:\n    print('YES')\nelse:\n    print('NO')\n            \n", "def check(r0, c0, dr, dc):\n    cntx = 0\n    cnte = 0\n    for i in range(5):\n        r = r0 + dr * i\n        c = c0 + dc * i\n        if r < 0 or 9 < r or c < 0 or 9 < c:\n            break\n        elif cells[r][c] == 'X':\n            cntx += 1\n        elif cells[r][c] == '.':\n            cnte += 1\n    return cntx == 4 and cnte == 1\n\ncells = [list(input()) for _ in range(10)]\ndrc = [(1, 0), (0, 1), (1, 1), (1, -1)]\nans = 'NO'\nfor r0 in range(10):\n    for c0 in range(10):\n        for (dr, dc) in drc:\n            if check(r0, c0, dr, dc):\n                ans = 'YES'\nprint(ans)\n", "def main():\n    \n    \n    \n    \n    Map=[]\n    for i in range(10):\n        Map+=[input()]\n        \n\n    \n    \n    \n    \n    for i in range(10):\n        for j in range(10):\n            count=0\n            count2=0\n            if i<=5:\n                for k in range(5):\n                    if Map[i+k][j]=='X':\n                        count+=1\n                    elif Map[i+k][j]=='.':\n                        count2+=1\n                if count==4 and count2==1:\n                    print('YES')\n                    return 0\n\n            count=0\n            count2=0\n            if j<=5:\n                for k in range(5):\n                    if Map[i][j+k]=='X':\n                        count+=1\n                    elif Map[i][j+k]=='.':\n                        count2+=1                   \n                if count==4 and count2==1:\n                    print('YES')\n                    return 0\n            \n            count=0\n            count2=0            \n            \n            if i<=5 and j<=5:\n                for k in range(5):\n                    if Map[i+k][j+k]=='X':\n                        count+=1\n                    elif Map[i+k][j+k]=='.':\n                        count2=1                    \n                if count==4 and count2==1:\n                    print('YES')\n                    return 0\n            count=0\n            count2=0            \n            \n            if i>=4 and j<=5:\n                count=0\n                for k in range(5):\n                    if Map[i-k][j+k]=='X':\n                        count+=1\n                    elif Map[i-k][j+k]=='O':\n                        count-=1                                  \n                        \n                if count==4:\n                    print('YES')\n                    return 0\n    print('NO')\n    return 0\n    \nmain()                    \n", "def check(a, x, y):\n    left = 0\n    right = 0\n    for i in range(1, 11):\n        if x - i >= 0:\n            if a[x - i][y] == 'X':\n                left += 1\n            else:\n                break\n        else:\n            break\n    for i in range(1, 11):\n        if x + i < 10:\n            if a[x + i][y] == 'X':\n                right += 1\n            else:\n                break\n        else:\n            break\n    if right + left >= 4:\n        return 1\n    left = 0\n    right = 0\n    for i in range(1, 11):\n        if y - i >= 0:\n            if a[x][y - i] == 'X':\n                left += 1\n            else:\n                break\n        else:\n            break\n    for i in range(1, 11):\n        if y + i < 10:\n            if a[x][y + i] == 'X':\n                right += 1\n            else:\n                break\n        else:\n            break\n    if right + left >= 4:\n        return 1\n    left = 0\n    right = 0\n    for i in range(1, 11):\n        if x - i >= 0 and y - i >= 0:\n            if a[x - i][y - i] == 'X':\n                left += 1\n            else:\n                break\n        else:\n            break\n    for i in range(1, 11):\n        if x + i < 10 and y + i < 10:\n            if a[x + i][y + i] == 'X':\n                right += 1\n            else:\n                break\n        else:\n            break\n    if right + left >= 4:\n        return 1\n    left = 0\n    right = 0\n    for i in range(1, 11):\n        if x - i >= 0 and y + i < 10:\n            if a[x - i][y + i] == 'X':\n                left += 1\n            else:\n                break\n        else:\n            break\n    for i in range(1, 11):\n        if x + i < 10 and y - i >= 0:\n            if a[x + i][y - i] == 'X':\n                right += 1\n            else:\n                break\n        else:\n            break\n    if right + left >= 4:\n        return 1\n    return 0\n    \na = []\nfor i in range(10):\n    gg = input()\n    a.append([])\n    for j in range(10):\n        a[i].append(gg[j])\nfor i in range(10):\n    for j in range(10):\n        if a[i][j] == '.':\n            a[i][j] = 'X'\n            if check(a, i, j):\n                print(\"YES\")\n                return\n            a[i][j] = '.'\nprint(\"NO\")\n    \n", "def check(a, b, c, d, e):\n\tcountX = 0\n\tcountD = 0\n\t\n\tif a == 'X': countX += 1\n\telif a == '.': countD += 1\n\t\n\tif b == 'X': countX += 1\n\telif b == '.': countD += 1\n\t\n\tif c == 'X': countX += 1\n\telif c == '.': countD += 1\n\t\n\tif d == 'X': countX += 1\n\telif d == '.': countD += 1\n\t\n\tif e == 'X': countX += 1\n\telif e == '.': countD += 1\n\t\n\treturn countX == 4 and countD == 1\n\ndef f(a):\n\tfor i in range(10):\n\t\tfor j in range(6):\n\t\t\tif (check(a[i][j], a[i][j+1], a[i][j+2], a[i][j+3], a[i][j+4])\n\t\t\tor i < 6 and check(a[i][j], a[i+1][j+1], a[i+2][j+2], a[i+3][j+3], a[i+4][j+4])):\n\t\t\t    return True\n\t\n\tfor i in range(10):\n\t\tfor j in range(6):\n\t\t\tif (check(a[j][i], a[j+1][i], a[j+2][i], a[j+3][i], a[j+4][i])\n\t\t\tor i > 3 and check(a[j][i], a[j+1][i-1], a[j+2][i-2], a[j+3][i-3], a[j+4][i-4])):\n\t\t\t\treturn True\n\t\nprint('YES' if f([input() for _ in range(10)]) else 'NO')", "#!/usr/local/bin/python3\n\nimport sys\n\ntable = [line.strip() for line in sys.stdin]\n\ndef check_position(table, row, column):\n\n    if table[row][column] != '.':\n        return False\n    \n    left_sum = 0\n    tmp = column - 1\n    while (tmp >= 0) and table[row][tmp] == 'X':\n        left_sum += 1\n        tmp -= 1\n\n    right_sum = 0\n    tmp = column + 1\n    while (tmp < 10) and table[row][tmp] == 'X':\n        right_sum += 1\n        tmp += 1\n\n    if left_sum + right_sum >= 4:\n        return True\n\n    # -----\n\n    up_sum = 0\n    tmp = row - 1\n    while (tmp >= 0) and table[tmp][column] == 'X':\n        up_sum += 1\n        tmp -= 1\n\n    down_sum = 0\n    tmp = row + 1\n    while (tmp < 10) and table[tmp][column] == 'X':\n        down_sum += 1\n        tmp += 1\n\n    if up_sum + down_sum >= 4:\n        return True \n\n    # -----\n\n    maindup_sum = 0\n    tmp_row = row - 1\n    tmp_col = column - 1\n    while (tmp_row >= 0) and (tmp_col >= 0) and table[tmp_row][tmp_col] == 'X':\n        tmp_row -= 1\n        tmp_col -= 1\n        maindup_sum += 1\n    \n    maindup_down = 0\n    tmp_row = row + 1\n    tmp_col = column + 1\n    while (tmp_row < 10) and (tmp_col < 10) and table[tmp_row][tmp_col] == 'X':\n        tmp_row += 1\n        tmp_col += 1\n        maindup_down += 1\n\n    if maindup_sum + maindup_down >= 4:\n        return True\n\n    # -----\n    \n    dup_sum = 0\n    tmp_row = row - 1\n    tmp_col = column + 1\n    while (tmp_row >= 0) and (tmp_col < 10) and table[tmp_row][tmp_col] == 'X':\n        tmp_row -= 1\n        tmp_col += 1\n        dup_sum += 1\n    \n    dup_down = 0\n    tmp_row = row + 1\n    tmp_col = column - 1\n    while (tmp_row < 10) and (tmp_col >= 0) and table[tmp_row][tmp_col] == 'X':\n        tmp_row += 1\n        tmp_col -= 1\n        dup_down += 1\n\n    if dup_sum + dup_down >= 4:\n        return True\n\n    return False\n\nfor row in range(10):\n    for column in range(10):\n        if check_position(table, row, column):\n            print(\"YES\")\n            return\n\nprint(\"NO\")\n", "a=[0 for i in range(10)]\nfor i in range(10):\n    a[i]=input()\n\nb=[[0 for i in range(10)] for i in range(10)]\n\nf=False\nfor x1 in range(10):\n    for y1 in range(10):\n        for i in range(10):\n            for j in range(10):\n                b[i][j]=a[i][j]\n        if b[x1][y1]=='.':\n            b[x1][y1]='X'\n        can=False\n        for i in range(10): #\u00c5\u00d0\u00b6\u00cf\u00ca\u00e4\u00d3\u00ae\n            for j in range(10):\n                if j<6 and b[i][j]=='X' and b[i][j+1]=='X' and b[i][j+2]=='X' and b[i][j+3]=='X' and b[i][j+4]=='X':\n                    can=True\n                if i<6 and b[i][j]=='X' and b[i+1][j]=='X' and b[i+2][j]=='X' and b[i+3][j]=='X' and b[i+4][j]=='X':\n                    can=True\n                if i<6 and j<6 and b[i][j]=='X' and b[i+1][j+1]=='X' and b[i+2][j+2]=='X' and b[i+3][j+3]=='X' and b[i+4][j+4]=='X':\n                    can=True\n                if i<6 and j>3 and b[i][j]=='X' and b[i+1][j-1]=='X' and b[i+2][j-2]=='X' and b[i+3][j-3]=='X' and b[i+4][j-4]=='X':\n                    can=True\n        if can==True:\n            f=True\n\nif f:\n    print('YES')\nelse:\n    print('NO')\n                \n", "s=10*[0]\nfor i in range(10):\n\ts[i]=input()\ndef trav(i,j,s,n):\n\tif n==1:\n\t\tif(i<9):\n\t\t\tif s[i+1][j]=='X':\n\t\t\t\treturn 1 + trav(i+1,j,s,n)\n\t\t\treturn 0\n\t\treturn 0\n\tif n==-1:\n\t\tif(i>0):\n\t\t\tif s[i-1][j]=='X':\n\t\t\t\treturn 1 + trav(i-1,j,s,n)\n\t\t\treturn 0\n\t\treturn 0\n\tif n==2:\n\t\tif(j<9):\n\t\t\tif s[i][j+1]=='X':\n\t\t\t\treturn 1 + trav(i,j+1,s,n)\n\t\t\treturn 0\n\t\treturn 0\n\tif n==-2:\n\t\tif(j>0):\n\t\t\tif s[i][j-1]=='X':\n\t\t\t\treturn 1 + trav(i,j-1,s,n)\n\t\t\treturn 0\n\t\treturn 0\n\tif n==3:\n\t\tif(i<9 and j<9):\n\t\t\tif s[i+1][j+1]=='X':\n\t\t\t\treturn 1 + trav(i+1,j+1,s,n)\n\t\t\treturn 0\n\t\treturn 0\n\tif n==-3:\n\t\tif(i>0 and j>0):\n\t\t\tif s[i-1][j-1]=='X':\n\t\t\t\treturn 1 + trav(i-1,j-1,s,n)\n\t\t\treturn 0\n\t\treturn 0\n\tif n==4:\n\t\tif(i>0 and j<9):\n\t\t\tif s[i-1][j+1]=='X':\n\t\t\t\treturn 1 + trav(i-1,j+1,s,n)\n\t\t\treturn 0\n\t\treturn 0\n\tif n==-4:\n\t\tif(i<9 and j>0):\n\t\t\tif s[i+1][j-1]=='X':\n\t\t\t\treturn 1 + trav(i+1,j-1,s,n)\n\t\t\treturn 0\n\t\treturn 0\n\nflag=False\t\t\nfor i in range(10):\n\tfor j in range(10):\n\t\tif s[i][j]=='.':\n\t\t\t#print(trav(i,j,s,-2))\n\t\t\t#input()\n\t\t\tif trav(i,j,s,1)+trav(i,j,s,-1)>=4 or trav(i,j,s,2)+trav(i,j,s,-2)>=4 or trav(i,j,s,3)+trav(i,j,s,-3)>=4 or trav(i,j,s,4)+trav(i,j,s,-4)>=4:\n\t\t\t\tflag=True;\n\t\t\t\tprint ('YES')\n\t\t\t\tbreak\n\tif flag:\n\t\tbreak\nif not flag:\n\tprint('NO')", "matrix = []\nN = 10\n\nfor i in range(N):\n\tmatrix.append(list(input()))\n\nwon = False\n\ndef check_alice_won(matrix):\n\tmaxScore = 0\n\tfor i in range(N):\n\t\tcurScore = 0\n\t\tfor j in range(N):\n\t\t\tif matrix[i][j] == 'X':\n\t\t\t\tcurScore += 1\n\t\t\telse:\n\t\t\t\tif curScore > maxScore:\n\t\t\t\t\tmaxScore = curScore\n\t\t\t\tcurScore = 0\n\t\tif curScore >= maxScore:\n\t\t\tmaxScore = curScore\n\t\tif maxScore >= 5:\n\t\t\treturn True\n\n\tmaxScore = 0\n\tfor i in range(N):\n\t\tcurScore = 0\n\t\tfor j in range(N):\n\t\t\tif matrix[j][i] == 'X':\n\t\t\t\tcurScore += 1\n\t\t\telse:\n\t\t\t\tif curScore > maxScore:\n\t\t\t\t\tmaxScore = curScore\n\t\t\t\tcurScore = 0\n\t\tif curScore >= maxScore:\n\t\t\tmaxScore = curScore\n\t\tif maxScore >= 5:\n\t\t\treturn True\n\n\tmaxScore = 0\n\tfor p in range(0, 2*N - 1):\n\t\tcurScore = 0\n\t\t# print(max(0, p - N + 1), min(p, N - 1) + 1)\n\t\t# print(list(range(max(0, p - N + 1), min(p, N - 1) + 1)))\n\t\tfor q in list(range(max(0, p - N + 1), min(p, N - 1) + 1)):\n\t\t\t# print(matrix[p-q][q], end='')\n\t\t\tif matrix[p-q][q] == 'X':\n\t\t\t\tcurScore += 1\n\t\t\telse:\n\t\t\t\tif curScore > maxScore:\n\t\t\t\t\tmaxScore = curScore\n\t\t\t\tcurScore = 0\n\t\tif curScore >= maxScore:\n\t\t\tmaxScore = curScore\n\t\tif maxScore >= 5:\n\t\t\treturn True\n\n\tmaxScore = 0\n\tfor p in range(0, 2*N - 1):\n\t\tcurScore = 0\n\t\t# print(max(0, p - N + 1), min(p, N - 1) + 1)\n\t\t# print(list(range(max(0, p - N + 1), min(p, N - 1) + 1)))\n\t\tfor q in list(range(max(0, p - N + 1), min(p, N - 1) + 1)):\n\t\t\t# print(matrix[p-q][N - 1 - q], end='')\n\t\t\tif matrix[p-q][N - 1 - q] == 'X':\n\t\t\t\tcurScore += 1\n\t\t\t\t# print(curScore)\n\t\t\telse:\n\t\t\t\tif curScore >= maxScore:\n\t\t\t\t\tmaxScore = curScore\n\t\t\t\tcurScore = 0\n\t\tif curScore >= maxScore:\n\t\t\tmaxScore = curScore\n\t\t# print(\"MAX\")\n\t\t# print(maxScore)\n\t\t# input()\n\t\tif maxScore >= 5:\n\t\t\treturn True\n\n\treturn False\n\nfor i in range(N):\n\tfor j in range(N):\n\t\tif matrix[i][j] == '.' and won == False:\n\t\t\tmatrix[i][j] = 'X'\n\t\t\t# print(matrix)\n\t\t\tif check_alice_won(matrix) == True:\n\t\t\t\twon = True\n\t\t\t# print(won)\n\t\t\t# input()\n\t\t\tmatrix[i][j] = '.'\n\nif won:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "field = []\nfor _ in range(10):\n    field.append(input())\n\nrows = [row for row in field]\ncolumns = []\nfor i in range(10):\n    s = ''\n    for j in range(10):\n        s += field[j][i]\n    columns.append(s)\nmaindiags = []\nfor k in range(-9, 10):\n    s = ''\n    if k >= 0:\n        for i in range(10 - k):\n            for j in range(k, 10):\n                if i == j - k:\n                    s += field[i][j]\n    else:\n        for i in range(-k, 10):\n            for j in range(10 + k):\n                if i == j - k:\n                    s += field[i][j]\n    maindiags.append(s)\ndiags = []\nfor k in range(-9, 10):\n    s = ''\n    if k >= 0:\n        for i in range(k, 10):\n            for j in range(k, 10):\n                if i == 9 - j + k:\n                    s += field[i][j]\n    else:\n        for i in range(10 + k):\n            for j in range(10 + k):\n                if i == 9 - j + k:\n                    s += field[i][j]\n    diags.append(s)\ndef answer(a):\n    patterns = ['.XXXX','X.XXX','XX.XX','XXX.X','XXXX.']\n    for elem in a:\n        if len(elem) >= 5:\n            for k in range(5):\n                for i in range(len(elem) - 4):\n                    flag = True\n                    for j in range(5):\n                        if elem[i + j] != patterns[k][j]:\n                            flag = False\n                    if flag:\n                        return True\n    return False\n\na = rows + columns + maindiags + diags\nprint('YES' if answer(a) else 'NO')", "import os\n\ndef f():\n    board = []\n    for i in range(10):\n        board.append(input())\n    for i, row in enumerate(board):\n        for j, c in enumerate(row):\n            if c == '.':\n                #horizonal\n                d1 = d2 = 0\n                b = j - 1\n                while b >= 0:\n                    if row[b] == 'X':\n                        d1 += 1\n                        b -= 1\n                    else:\n                        break\n                b = j + 1\n                while b <= 9:\n                    if row[b] == 'X':\n                        d2 += 1\n                        b += 1\n                    else:\n                        break\n                if d1 + d2 >= 4:\n                    print('YES')\n                    return            \n                #vertical\n                d1 = d2 = 0\n                a = i - 1\n                while a >= 0:\n                    if board[a][j] == 'X':\n                        d1 += 1\n                        a -= 1\n                    else:\n                        break\n                a = i + 1\n                while a <= 9:\n                    if board[a][j] == 'X':\n                        d2 += 1\n                        a += 1\n                    else:\n                        break\n                if d1 + d2 >= 4:\n                    print('YES')\n                    return\n                #diagonal\n                d1 = d2 = 0\n                a = i - 1\n                b = j - 1\n                while a >= 0 and b >= 0:\n                    if board[a][b] == 'X':\n                        d1 += 1\n                        a -= 1\n                        b -= 1\n                    else:\n                        break\n                a = i + 1\n                b = j + 1\n                while a <= 9 and b <= 9:\n                    if board[a][b] == 'X':\n                        d2 += 1\n                        a += 1\n                        b += 1\n                    else:\n                        break\n                if d1 + d2 >= 4:\n                    print('YES')\n                    return\n                #another diagonal\n                d1 = d2 = 0\n                a = i + 1\n                b = j - 1\n                while a <= 9 and b >= 0:\n                    if board[a][b] == 'X':\n                        d1 += 1\n                        a += 1\n                        b -= 1\n                    else:\n                        break\n                a = i - 1\n                b = j + 1\n                while a >= 0 and b <= 9:\n                    if board[a][b] == 'X':\n                        d2 += 1\n                        a -= 1\n                        b += 1\n                    else:\n                        break\n                if d1 + d2 >= 4:\n                    print('YES')\n                    return\n    print('NO')\n\nf()", "import os\n\ndef f():\n    board = []\n    for i in range(10):\n        board.append(input())\n    for i, row in enumerate(board):\n        for j, c in enumerate(row):\n            if c == '.':\n                #horizonal\n                d1 = d2 = 0\n                b = j - 1\n                while b >= 0:\n                    if row[b] == 'X':\n                        d1 += 1\n                        b -= 1\n                    else:\n                        break\n                b = j + 1\n                while b <= 9:\n                    if row[b] == 'X':\n                        d2 += 1\n                        b += 1\n                    else:\n                        break\n                if d1 + d2 >= 4:\n                    print('YES')\n                    return            \n                #vertical\n                d1 = d2 = 0\n                a = i - 1\n                while a >= 0:\n                    if board[a][j] == 'X':\n                        d1 += 1\n                        a -= 1\n                    else:\n                        break\n                a = i + 1\n                while a <= 9:\n                    if board[a][j] == 'X':\n                        d2 += 1\n                        a += 1\n                    else:\n                        break\n                if d1 + d2 >= 4:\n                    print('YES')\n                    return\n                #diagonal\n                d1 = d2 = 0\n                a = i - 1\n                b = j - 1\n                while a >= 0 and b >= 0:\n                    if board[a][b] == 'X':\n                        d1 += 1\n                        a -= 1\n                        b -= 1\n                    else:\n                        break\n                a = i + 1\n                b = j + 1\n                while a <= 9 and b <= 9:\n                    if board[a][b] == 'X':\n                        d2 += 1\n                        a += 1\n                        b += 1\n                    else:\n                        break\n                if d1 + d2 >= 4:\n                    print('YES')\n                    return\n                #another diagonal\n                d1 = d2 = 0\n                a = i + 1\n                b = j - 1\n                while a <= 9 and b >= 0:\n                    if board[a][b] == 'X':\n                        d1 += 1\n                        a += 1\n                        b -= 1\n                    else:\n                        break\n                a = i - 1\n                b = j + 1\n                while a >= 0 and b <= 9:\n                    if board[a][b] == 'X':\n                        d2 += 1\n                        a -= 1\n                        b += 1\n                    else:\n                        break\n                if d1 + d2 >= 4:\n                    print('YES')\n                    return\n    print('NO')\n\nf()", "rs = []\nfor i in range(10):\n    length = input()\n    rs.append(length)\ntemp1 = 1\nflag1 = 1\n\ndef check(i, j, direct,temp,flag):\n    if direct == 1:\n        if j == 0:\n            return 0\n        j -= 1\n    elif direct == 2:\n        if j == 9:\n            return 0\n        j += 1\n    elif direct == 3:\n        if i == 0:\n            return 0\n        i -= 1\n    elif direct == 4:\n        if i == 9:\n            return 0\n        i += 1\n    elif direct == 5:\n        if i == 0 or j == 0:\n            return 0\n        j -= 1\n        i -= 1\n    elif direct == 6:\n        if i == 9 or j == 0:\n            return 0\n        j -= 1\n        i += 1\n    elif direct == 7:\n        if i == 0 or j == 9:\n            return 0\n        j += 1\n        i -= 1\n    elif direct == 8:\n        if i == 9 or j == 9:\n            return 0\n        j += 1\n        i += 1\n    if rs[i][j] == 'X':\n        temp += 1\n        if(temp > 4):\n            return 1\n        return check(i,j,direct,temp,flag)\n    elif rs[i][j] == '.' and flag == 1:\n        temp += 1\n        flag = 0\n        if(temp > 4):\n            return 1\n        return check(i,j,direct,temp,flag)\n    else:\n        return 0  \n\ndef result():\n    for i in range(10):\n        for j in range(10):\n            if rs[i][j] == 'X':\n                for k in range(1,9):\n                    if check(i,j,k,temp1,flag1) == 1:\n                        return 1\n    return 0\nif result() == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "import sys\n\ndef check(x):\n    t,p = 0,0\n    for i in range(5):\n        if x[i]=='X':\n            t+=1\n        elif x[i]=='.':\n            p+=1\n    if t==4 and p==1:\n        return True\n    return False\n\n\ndef main():\n\n    x = []\n    for i in range(10):\n        x.append(sys.stdin.readline().rstrip())\n\n    flag = False\n\n    for i in range(10):\n        for j in range(10):\n            if j+4<10 and check([x[i][k] for k in range(j,j+5) ]):\n                flag = True\n            if i+4<10 and check([x[k][j] for k in range(i,i+5) ]):\n                flag = True\n            if i+4<10 and j+4<10 and check([ x[i+k][j+k] for k in range(5)]):\n                flag = True\n            if i+4<10 and j-4>=0 and check([ x[i+k][j-k] for k in range(5)]):\n                flag = True\n\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n    \nmain()\n", "r = [input() for _ in range(10)]\nc = []\nfor i in range(10):\n  t = \"\"\n  for j in range(10):\n    t += r[j][i]\n  c.append(t)\nfor x in r:\n  if any(s in x for s in [\".XXXX\", \"X.XXX\", \"XX.XX\", \"XXX.X\", \"XXXX.\"]):\n    print(\"YES\")\n    quit()\nelse:\n  for y in c:\n    if any(s in y for s in [\".XXXX\", \"X.XXX\", \"XX.XX\", \"XXX.X\", \"XXXX.\"]):\n      print(\"YES\")\n      quit()\n  else:\n    for a in range(6):\n      z1 = \"\"\n      z2 = \"\"\n      for b in range(10-a):\n        z1 += r[a+b][b]\n        z2 += r[b][a+b]\n      if any(s in z1 for s in [\".XXXX\", \"X.XXX\", \"XX.XX\", \"XXX.X\", \"XXXX.\"]):\n        print(\"YES\")\n        quit()\n      if any(s in z2 for s in [\".XXXX\", \"X.XXX\", \"XX.XX\", \"XXX.X\", \"XXXX.\"]):\n        print(\"YES\")\n        quit()\n    c = list(zip(*r[::-1]))\n    for a in range(6):\n      z1 = \"\"\n      z2 = \"\"\n      for b in range(10-a):\n        z1 += c[a+b][b]\n        z2 += c[b][a+b]\n      if any(s in z1 for s in [\".XXXX\", \"X.XXX\", \"XX.XX\", \"XXX.X\", \"XXXX.\"]):\n        print(\"YES\")\n        quit()\n      if any(s in z2 for s in [\".XXXX\", \"X.XXX\", \"XX.XX\", \"XXX.X\", \"XXXX.\"]):\n        print(\"YES\")\n        quit()\n  print(\"NO\")\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "corr = lambda i, j: 0 <= i < 10 and 0 <= j < 10\ndef can(b):\n    for i in range(10):\n        for j in range(10):\n            for t in range(4):\n                flag = 1\n                for k in range(5):\n                    ni = i + dx[t] * k\n                    nj = j + dy[t] * k\n                    if not corr(ni, nj) or b[ni][nj] != 'X':\n                        flag = 0\n                        break\n                if flag:\n                    return 1\n    return 0\n\ndef solve():\n    b = [list(i) for i in a]\n    for i in range(10):\n        for j in range(10):\n            if b[i][j] == '.':\n                temp = b[i][j]\n                b[i][j] = 'X'\n                if can(b): return 1\n                b[i][j] = temp\n    return 0\n\ndx, dy = [0, 1, 1, -1], [1, 0, 1, 1]\na = [input() for i in range(10)]\nprint('YES' if solve() else 'NO')", "l = [input() for _ in range(10)]\n\nfor c in range(5):\n        t = ['X'] * 5\n        t[c] = '.'\n        for i in range(10):\n                for j in range(6):\n                        cnt = 0\n                        for k in range(5):\n                                if l[i][j + k] == '.':\n                                        cnt += 1\n                                elif l[i][j + k] == 'O':\n                                        cnt += 2\n                        if cnt == 1:\n                                print('YES')\n                                return\n                                \n        for i in range(6):\n                for j in range(10):\n                        cnt = 0\n                        for k in range(5):\n                                if l[i + k][j] == '.':\n                                        cnt += 1\n                                elif l[i + k][j] == 'O':\n                                        cnt += 2\n                        if cnt == 1:\n                                print('YES')\n                                return\n                                \n        for i in range(6):\n                for j in range(6):\n                        cnt = 0\n                        for k in range(5):\n                                if l[i + k][j + k] == '.':\n                                        cnt += 1\n                                elif l[i + k][j + k] == 'O':\n                                        cnt += 2\n                        if cnt == 1:\n                                print('YES')\n                                return\n        \n        for i in range(4, 10):\n                for j in range(6):\n                        cnt = 0\n                        for k in range(5):\n                                if l[i - k][j + k] == '.':\n                                        cnt += 1\n                                elif l[i - k][j + k] == 'O':\n                                        cnt += 2\n                        if cnt == 1:\n                                print('YES')\n                                return\n        \nprint('NO')", "A = [list(input()) for i in range(10)]\n\nfor i in range(10):\n\tA[i] += [\"O\"] * 5\nfor i in range(5):\n\tA.insert(0,[\"O\"] * 15)\n\tA.append([\"O\"] * 15)\nD = [(1,0),(0,1),(1,1),(-1,1)]\nflag = False\nfor i in range(5,15):\n\tfor j in range(10):\n\t\tif (A[i][j] == \"X\" or\n\t\t\tA[i][j + 1] == \"X\" or\n\t\t\tA[i + 1][j] == \"X\" or\n\t\t\tA[i + 1][j + 1] == \"X\" or\n\t\t\tA[i - 1][j + 1] == \"X\"):\n\t\t\tcnt = [0,0,0,0]\n\t\t\tfor k in range(5):\n\t\t\t\tfor n,d in enumerate(D):\n\t\t\t\t\tdx = k * d[0]\n\t\t\t\t\tdy = k * d[1]\n\t\t\t\t\tif A[i + dx][j + dy] == \"X\":\n\t\t\t\t\t\tcnt[n] += 1\n\t\t\t\t\tif A[i + dx][j + dy] == \"O\":\n\t\t\t\t\t\tcnt[n] = -10\n\t\t\tfor c in cnt:\n\t\t\t\tif c == 4:\n\t\t\t\t\tflag = True\n\t\t\t\t\tbreak\n\t\tif flag == True:\n\t\t\tbreak\n\tif flag == True:\n\t\tbreak\nif flag == True:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\n\n\n", "matrix=[None]*10\nfor i in range(10):\n\tmatrix[i]=input()\n\nfor i in range(10):\n\tfor j in range(10):\n\t\tif 0<=j and j<=5:\n\t\t\tcount_x=0\n\t\t\thas_o=False\n\t\t\tfor k in range(5):\n\t\t\t\tif matrix[i][j+k]=='X':\n\t\t\t\t\tcount_x+=1\n\t\t\t\telif matrix[i][j+k]=='O':\n\t\t\t\t\thas_o=True\n\t\t\t\t\tbreak\n\t\t\tif count_x==4 and not has_o:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\n\n\t\t\tif 0<=i and i<=5:\n\t\t\t\tcount_x=0\n\t\t\t\thas_o=False\n\t\t\t\tfor k in range(5):\n\t\t\t\t\tif matrix[i+k][j+k]=='X':\n\t\t\t\t\t\tcount_x+=1\n\t\t\t\t\telif matrix[i+k][j+k]=='O':\n\t\t\t\t\t\thas_o=True\n\t\t\t\t\t\tbreak\n\t\t\t\tif count_x==4 and not has_o:\n\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\treturn\n\n\t\tif 0<=i and i<=5:\n\t\t\tcount_x=0\n\t\t\thas_o=False\n\t\t\tfor k in range(5):\n\t\t\t\tif matrix[i+k][j]=='X':\n\t\t\t\t\tcount_x+=1\n\t\t\t\telif matrix[i+k][j]=='O':\n\t\t\t\t\thas_o=True\n\t\t\t\t\tbreak\n\t\t\tif count_x==4 and not has_o:\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\n\n\t\t\tif 4<=j and j<=9:\n\t\t\t\tcount_x=0\n\t\t\t\thas_o=False\n\t\t\t\tfor k in range(5):\n\t\t\t\t\tif matrix[i+k][j-k]=='X':\n\t\t\t\t\t\tcount_x+=1\n\t\t\t\t\telif matrix[i+k][j-k]=='O':\n\t\t\t\t\t\thas_o=True\n\t\t\t\t\t\tbreak\n\t\t\t\tif count_x==4 and not has_o:\n\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\treturn\nprint(\"NO\")", "\ndef is_in_row(field):\n    for s in field:\n        for i in range(len(s) - 4):\n            if s[i:i+5].count('X') == 4 and s[i:i+5].count('.') == 1:\n                print('YES')\n                return True\n    return False\n\ndef is_in_col(field):\n    for s in [''.join(x) for x in zip(*field)]:\n        for i in range(len(s) - 4):\n            if s[i:i+5].count('X') == 4 and s[i:i+5].count('.') == 1:\n                print('YES')\n                return True\n    return False\n\ndef is_in_diag(field):\n    shift = []\n    for i in range(len(field)):\n        shift.append(field[i][i:])\n        shift[-1] += 'O' * (10 - len(shift[-1]))\n\n    for s in [''.join(x) for x in zip(*shift)]:\n        for i in range(len(s) - 4):\n            if s[i:i+5].count('X') == 4 and s[i:i+5].count('.') == 1:\n                print('YES')\n                return True\n            \n    shift = []\n    for i in range(len(field)):\n        shift.append(field[i][:i][::-1])\n        shift[-1] += 'O' * (10 - len(shift[-1]))\n\n    for s in [''.join(x) for x in zip(*shift)]:\n        for i in range(len(s) - 4):\n            if s[i:i+5].count('X') == 4 and s[i:i+5].count('.') == 1:\n                print('YES')\n                return True\n    return False\n\nfield = [input() for _ in range(10)]\n\nif is_in_row(field): return\nif is_in_col(field): return\nif is_in_diag(field): return\nif is_in_diag(list([x[::-1] for x in field])): return\n    \nprint('NO')\n", "def check(a, b):\n    if m[a][b] != '.':\n        return False\n    else:\n        cnt = 0\n        p = a + 1\n        while p < 10 and m[p][b] == 'X':\n            p += 1\n            cnt += 1\n        p = a - 1\n        while p >= 0 and m[p][b] == 'X':\n            p -= 1\n            cnt += 1\n        if cnt >= 4:\n            return True\n        cnt = 0\n        p = b + 1\n        while p < 10 and m[a][p] == 'X':\n            p += 1\n            cnt += 1\n        p = b - 1\n        while p >= 0 and m[a][p] == 'X':\n            p -= 1\n            cnt += 1\n        if cnt >= 4:\n            return True\n        cnt = 0\n        p = 1\n        while a + p < 10 and b + p < 10 and m[a + p][b + p] == 'X':\n            p += 1\n            cnt += 1\n        p = -1\n        while a + p >= 0 and b + p >= 0 and m[a + p][b + p] == 'X':\n            p -= 1\n            cnt += 1\n        if cnt >= 4:\n            return True\n        cnt = 0\n        p = 1\n        while a + p < 10 and b - p >= 0 and m[a + p][b - p] == 'X':\n            p += 1\n            cnt += 1\n        p = -1\n        while a + p >= 0 and b - p < 10 and m[a + p][b - p] == 'X':\n            p -= 1\n            cnt += 1\n        if cnt >= 4:\n            return True\n    return False\n\nm = []\nfor i in range(10):\n    m.append(input())\nF = False\nfor i in range(10):\n    for j in range(10):\n        if check(i, j):\n            F = True\nif F:\n    print('YES')\nelse:\n    print('NO')", "def is_win(matrix):\n    variants = ['.XXXX', 'X.XXX', 'XX.XX', 'XXX.X', 'XXXX.']\n    for i in matrix:\n        for exp in variants:\n            if exp in ''.join(i):\n                return True\n    new_matrix = []\n    for i in range(10):\n        matrix_part = []\n        for j in matrix:\n            matrix_part.append(j[i])\n        new_matrix.append(matrix_part)\n    for i in new_matrix:\n        for exp in variants:\n            if exp in ''.join(i):\n                return True\n    lines = [\n        [matrix[0][0],matrix[1][1],matrix[2][2], matrix[3][3], matrix[4][4], matrix[5][5], matrix[6][6], matrix[7][7], matrix[8][8], matrix[9][9]],\n        [matrix[0][1], matrix[1][2], matrix[2][3], matrix[3][4], matrix[4][5], matrix[5][6], matrix[6][7], matrix[7][8], matrix[8][9]],\n        [matrix[0][2], matrix[1][3], matrix[2][4], matrix[3][5],matrix[4][6],matrix[5][7],matrix[6][8],matrix[7][9]],\n        [matrix[0][3], matrix[1][4], matrix[2][5], matrix[3][6], matrix[4][7], matrix[5][8], matrix[6][9]],\n        [matrix[0][4], matrix[1][5],matrix[2][6],matrix[3][7],matrix[4][8],matrix[5][9]],\n        [matrix[0][5], matrix[1][6], matrix[2][7],matrix[3][8],matrix[4][9]],\n        [matrix[1][0], matrix[2][1], matrix[3][2], matrix[4][3], matrix[5][4], matrix[6][5], matrix[7][6], matrix[8][7], matrix[9][8]],\n        [matrix[2][0], matrix[3][1], matrix[4][2], matrix[5][3],matrix[6][4],matrix[7][5],matrix[8][6],matrix[9][7]],\n        [matrix[3][0], matrix[4][1], matrix[5][2], matrix[6][3], matrix[7][4], matrix[8][5], matrix[9][6]],\n        [matrix[4][0], matrix[5][1],matrix[6][2],matrix[7][3],matrix[8][4],matrix[9][5]],\n        [matrix[5][0], matrix[6][1], matrix[7][2],matrix[8][3],matrix[9][4]],\n    ]\n    for line in lines:\n        for exp in variants:\n            if exp in ''.join(line):\n                return True\n    for i in range(10):\n        matrix[i] = matrix[i][::-1]\n    lines = [\n        [matrix[0][0],matrix[1][1],matrix[2][2], matrix[3][3], matrix[4][4], matrix[5][5], matrix[6][6], matrix[7][7], matrix[8][8], matrix[9][9]],\n        [matrix[0][1], matrix[1][2], matrix[2][3], matrix[3][4], matrix[4][5], matrix[5][6], matrix[6][7], matrix[7][8], matrix[8][9]],\n        [matrix[0][2], matrix[1][3], matrix[2][4], matrix[3][5],matrix[4][6],matrix[5][7],matrix[6][8],matrix[7][9]],\n        [matrix[0][3], matrix[1][4], matrix[2][5], matrix[3][6], matrix[4][7], matrix[5][8], matrix[6][9]],\n        [matrix[0][4], matrix[1][5],matrix[2][6],matrix[3][7],matrix[4][8],matrix[5][9]],\n        [matrix[0][5], matrix[1][6], matrix[2][7],matrix[3][8],matrix[4][9]],\n        [matrix[1][0], matrix[2][1], matrix[3][2], matrix[4][3], matrix[5][4], matrix[6][5], matrix[7][6], matrix[8][7], matrix[9][8]],\n        [matrix[2][0], matrix[3][1], matrix[4][2], matrix[5][3],matrix[6][4],matrix[7][5],matrix[8][6],matrix[9][7]],\n        [matrix[3][0], matrix[4][1], matrix[5][2], matrix[6][3], matrix[7][4], matrix[8][5], matrix[9][6]],\n        [matrix[4][0], matrix[5][1],matrix[6][2],matrix[7][3],matrix[8][4],matrix[9][5]],\n        [matrix[5][0], matrix[6][1], matrix[7][2],matrix[8][3],matrix[9][4]],\n    ]\n    for line in lines:\n        for exp in variants:\n            if exp in ''.join(line):\n                return True\n    return False\nmatrix = []\nfor i in range(10):\n    matrix.append(input())\nif is_win(matrix):\n    print('YES')\nelse:\n    print('NO')\n"]