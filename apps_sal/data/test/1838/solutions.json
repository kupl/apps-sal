["n,m,q=list(map(int,input().split()))\na=input().split()\nc={x:([x],[]) for x in a}\nfor i in range(m):\n    t,x,y=input().split()\n    if t=='2':\n        sign=1\n    else: sign=0\n    if c[x][0] is c[y][1-sign]:\n        print(\"NO\")\n        continue\n    print(\"YES\")\n    if c[x][0] is c[y][sign]:\n        continue\n    c1,c2=c[x],c[y]\n    if len(c1[0])+len(c1[1])<len(c2[0])+len(c2[1]):\n        c1,c2=c2,c1\n    s1,a1=c1\n    if sign==0:\n        s2,a2=c2\n    else:\n        a2,s2=c2\n    s1+=s2\n    a1+=a2\n    cs=s1,a1\n    for x in s2:\n        c[x]=cs\n    ca=a1,s1\n    for x in a2:\n        c[x]=ca\nfor i in range(q):\n    x,y=input().split()\n    if c[x][0] is c[y][0]:\n        print(1)\n    elif c[x][0] is c[y][1]:\n        print(2)\n    else:\n        print(3)\n", "f = lambda: input().split()\nn, m, k = map(int, f())\nu = list(range(n + 1))\nv = [n] * n\ns = {q: i for i, q in zip(u, f())}\np = ['YES'] * m\n\ndef g(i):\n    k = u[i]\n    while k != u[k]: k = u[k]\n    while u[i] != k: i, u[i] = u[i], k\n    return k\n\nfor l in range(m):\n    r, x, y = f()\n    i, j = s[x], s[y]\n    a, b = g(i), g(j)\n    i, j = v[a], v[b]\n    c, d = g(i), g(j)\n    if r == '2': b, d = d, b\n    if a == d: p[l] = 'NO'\n    elif c == b == n: v[a], v[d] = d, a\n    elif c == b: p[l] = 'NO'\n    elif c == n: u[a] = b\n    elif b == n: u[d] = c\n    elif d == n: u[b] = a\n    else: u[a], u[c] = b, d\n\nu = [g(q) for q in u]\nv = [u[q] for q in v]\n\nfor l in range(k):\n    x, y = f()\n    i, j = s[x], s[y]\n    a, c = u[i], u[j]\n    p.append(str(3 - 2 * (a == c) - (a == v[c])))\n\nprint('\\n'.join(p))", "f = lambda: input().split()\nn, m, k = map(int, f())\nc = {x: ([x], []) for x in f()}\n\nfor i in range(m):\n    t, x, y = f()\n    s = 2 - int(t)\n    cx, cy = c[x], c[y]\n\n    if cx[0] is cy[s]:\n        print('NO')\n        continue\n    \n    print('YES')\n    if cx[0] is cy[1 - s]: continue\n    if len(cx[0]) + len(cx[1]) < len(cy[0]) + len(cy[1]): cx, cy = cy, cx\n    \n    ux, vx = cx\n    if s: uy, vy = cy\n    else: vy, uy = cy\n    ux += uy\n    vx += vy\n    \n    for x in uy: c[x] = (ux, vx)\n    for x in vy: c[x] = (vx, ux)\n\nfor i in range(k):\n    x, y = f()\n    print(1 if c[x][0] is c[y][0] else 2 if c[x][0] is c[y][1] else 3)", "def get_relation(synonyms, antonyms, word1, word2):\n  if word1 not in synonyms or word2 not in synonyms:\n    return '3'\n\n  group1 = synonyms[word1]\n  group2 = synonyms[word2]\n\n  if group1 == group2:\n    return '1'\n  \n  if group1 in antonyms and antonyms[group1] == group2:\n    return '2'\n \n  return '3'\n\ndef unify_synonyms(synonyms, groups, group1, group2):\n  min_group = min(group1, group2)\n  max_group = max(group1, group2)\n\n  max_synonyms = groups[max_group]\n\n  for synonym in max_synonyms:\n    synonyms[synonym] = min_group\n  \n  update_groups(groups, min_group, max_synonyms)\n\n  return min_group, max_group\n\ndef make_synonyms(synonyms, antonyms, groups, group1, group2):\n  min_group1, max_group1 = unify_synonyms(synonyms, groups, group1, group2)\n\n  if group1 in antonyms and group2 in antonyms:\n    min_group2, max_group2 = unify_synonyms(synonyms, groups, antonyms[group1], antonyms[group2])\n\n    del antonyms[min_group1]\n    del antonyms[max_group1]\n    del antonyms[min_group2]\n    del antonyms[max_group2]\n\n    antonyms[min_group1] = min_group2\n    antonyms[min_group2] = min_group1\n\n    return min_group1\n\n  if max_group1 in antonyms:\n    antonym_group = antonyms[max_group1]\n    del antonyms[max_group1]\n\n    antonyms[min_group1] = antonym_group\n    antonyms[antonym_group] = min_group1\n  \n  return min_group1\n\ndef update_groups(groups, group, words):\n  if group in groups:\n    groups[group].update(words)\n  else:\n    groups.update({group: set(words)})\n\ndef make_relation(synonyms, antonyms, groups, word1, word2, relation, current_group):\n  if relation == '1':\n    if word1 not in synonyms and word2 not in synonyms:\n      current_group += 1\n      synonyms[word1] = current_group\n      synonyms[word2] = current_group\n      update_groups(groups, current_group, [word1, word2])\n      return current_group\n\n    if word1 not in synonyms:\n      synonyms[word1] = synonyms[word2]\n      update_groups(groups, synonyms[word2], [word1])\n      return current_group\n    \n    if word2 not in synonyms:\n      synonyms[word2] = synonyms[word1]\n      update_groups(groups, synonyms[word1], [word2])\n      return current_group\n    \n    group1 = synonyms[word1]\n    group2 = synonyms[word2]\n    if group1 != group2:\n      make_synonyms(synonyms, antonyms, groups, group1, group2)\n    \n    return current_group\n  \n  if relation == '2':\n    if word1 not in synonyms:\n      current_group += 1\n      group1 = current_group\n      synonyms[word1] = group1\n      update_groups(groups, group1, [word1])\n    else:\n      group1 = synonyms[word1]\n    \n    if word2 not in synonyms:\n      current_group += 1\n      group2 = current_group\n      synonyms[word2] = group2\n      update_groups(groups, group2, [word2])\n    else:\n      group2 = synonyms[word2]\n    \n    if group1 not in antonyms and group2 not in antonyms:\n      antonyms[group1] = group2\n      antonyms[group2] = group1\n\n      return current_group\n    \n    if group1 in antonyms and antonyms[group1] != group2:\n      antonym_group = antonyms[group1]\n      group2 = make_synonyms(synonyms, antonyms, groups, group2, antonym_group)\n    \n    if group2 in antonyms and antonyms[group2] != group1:\n      antonym_group = antonyms[group2]\n      make_synonyms(synonyms, antonyms, groups, group1, antonym_group)\n\n  return current_group\n\ndef make_relations(relation_no):\n  synonyms = dict()\n  antonyms = dict()\n  groups = dict()\n  current_group = 0\n\n  for relation in range(relation_no):\n    relation, word1, word2 = input().split()\n    current_relation = get_relation(synonyms, antonyms, word1, word2)\n\n    if current_relation == '2' and relation == '1':\n      print ('NO')\n      continue\n    \n    if current_relation == '1' and relation == '2':\n      print ('NO')\n      continue\n    \n    print ('YES')\n    current_group = make_relation(synonyms, antonyms, groups, word1, word2, relation, current_group)\n\n  return synonyms, antonyms\n\ndef answer_questions(question_no, synonyms, antonyms):\n  for question in range(question_no):\n    word1, word2 = input().split()\n    print(get_relation(synonyms, antonyms, word1, word2))\n\ndef main():\n  word_no, relation_no, question_no = [int(number) for number in input().split()]\n  input()\n\n  synonyms, antonyms = make_relations(relation_no)\n  answer_questions(question_no, synonyms, antonyms)\n\nmain()", "class Union:\n    def __init__(self, n):\n        self.p    = {i:i for i in range(n)}\n        self.rank = {i:1 for i in range(n)} \n        \n    def find(self, x):\n        if x < 0: return x\n    \n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n    \n    def union(self, x, y):\n        if x < 0 or y < 0:return\n        \n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            if self.rank[x] < self.rank[y]:\n                self.p[x]     = y\n                self.rank[y] += self.rank[x]\n            else:\n                self.p[y]     = x\n                self.rank[x] += self.rank[y]\n                \nn,m,q = map(int, input().split())\nlistW = input().split()\ndic   = {w:i for i, w in enumerate(listW)}\nu = Union(n)\nopposite = {i: -(i+1) for i in range(n)}\n\nfor i in range(m):\n    t, s1, s2 = input().split()\n    x = u.find(dic[s1])\n    y = u.find(dic[s2])\n    \n    if t == '1':\n        if opposite[x] == y:\n            print('NO')\n        else:\n            print('YES')\n            if x != y:\n                ox = opposite[x]\n                oy = opposite[y]\n                op = max(ox, oy)\n            \n                u.union(x, y)\n                u.union(ox,oy)\n            \n                op = u.find(op)\n                p  = u.find(x)\n            \n                if op > 0:\n                    opposite[p]  = op\n                    opposite[op] =  p\n                \n    else:\n        if x == y:\n            print('NO')\n        else:   \n            print('YES')\n            if opposite[x] != y:\n                u.union(y, opposite[x])\n                u.union(x, opposite[y])\n                x = u.find(x)\n                y = u.find(y)\n                opposite[x] = y\n                opposite[y] = x\n                \nfor _ in range(q):\n    s1, s2    = input().split()\n    id1, id2  = u.find(dic[s1]), u.find(dic[s2]) \n    \n    if id1 == id2:\n        print(1)\n    elif opposite[id1] == id2:\n        print(2)\n    else:\n        print(3)"]