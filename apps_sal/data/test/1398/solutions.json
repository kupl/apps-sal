["import sys\nfrom bisect import *\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nans=n=int(input())\na=sorted(map(int,sys.stdin.readline().split()))\nfor i in range(n):ans=min(ans,n-bisect_right(a,a[i]*2)+i)\nprint(ans)", "import sys\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n\nn = int(input())\nt = list(map(int,sys.stdin.readline().split()))\np = [0] * 5001\nfor i in t:\n    p[i] += 1\nq = p[:]\nfor i in range(1, 5001):\n    q[i] += q[i - 1]\nans = q[5000] - q[2499]\nfor i in range(1, 2501):\n    if p[i]:\n        s = q[2 * i] - q[i - 1]\n        if s > ans: ans = s\nprint(n - ans)", "f = open('input.txt', 'r')\nn = int(f.readline())\nc = sorted(map(int, f.readline().split()))\nj, v = 0, n - 1\nfor i in range(n):\n    while j < n - 1 and 2 * c[i] >= c[j + 1]:\n        j += 1\n    v = min(v, n + i - j - 1)\nopen('output.txt', 'w').write(str(v))", "import sys\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nn = int(input())\nres = [int(t) for t in input().split()]\nres.sort()\nmin_erase = n\ni, j = 0, 0\nwhile i != n - 1:\n    if res[j] <= 2 * res[i]:\n        ans = True\n        if n - (j - i + 1) < min_erase:\n            min_erase = n - (j - i + 1)\n    else:\n        ans = False\n    if ans and j != n - 1:\n        j += 1\n    else:\n        i += 1\nprint(min_erase)\n", "import sys\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nn = int(input())\nres = [int(t) for t in input().split()]\nres.sort()\nmin_erase = n\ni, j = 0, 0\nwhile i != n - 1:\n    if res[j] <= 2 * res[i]:\n        ans = True\n        if n - (j - i + 1) < min_erase:\n            min_erase = n - (j - i + 1)\n    else:\n        ans = False\n    if ans and j != n - 1:\n        j += 1\n    else:\n        i += 1\nprint(min_erase)\n", "def main():\n    import sys\n    from bisect import bisect\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n    n = int(input())\n    cc = sorted(map(int, input().split()))\n    print(n - max(bisect(cc, c * 2, i) - i for i, c in enumerate(cc)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    import sys\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n    n, res, j = int(input()), [], 0\n    cc, f = sorted(map(int, input().split())), res.append\n    for i, c in enumerate(cc):\n        while cc[j] * 2 < c:\n            j += 1\n        f(i - j)\n    print(n - max(res) - 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nimport bisect\ndef find_ge(a, x):\n    i = bisect.bisect_left(a, x)\n    if i != len(a):\n        return i\nn = int(input())\narray = sorted([int(i) for i in input().split()])\ndouble = [2*i for i in array]\nminimum = n\nfor i in range(n-1, -1, -1):\n    minimum = min(n - 1 - i + find_ge(double, array[i]), minimum)\nprint(minimum)", "f = open('input.txt', 'r')\n\nn = int(f.readline())\n\nc = sorted(map(int, f.readline().split()))\n\nj, v = 0, n - 1\n\nfor i in range(n):\n\n    while j < n - 1 and 2 * c[i] >= c[j + 1]:\n\n        j += 1\n\n    v = min(v, n + i - j - 1)\n\nopen('output.txt', 'w').write(str(v))\n\n\n\n# Made By Mostafa_Khaled\n", "import bisect\ndef physics(f):\n        num = int(file.readline())\n        res = list(map(int,file.readline().split()))\n        res.sort()\n        y = res[num-1]\n        x = res[0]\n        m = num\n        if y <= 2*x:\n               return 0\n        else:\n          for index,x in enumerate(res):\n             y = 2*x\n             i = bisect.bisect(res,y,index+1,num)\n             \n             if res[i-1] <= 2*x:   \n                     removes = (index + num - i)\n                     m = min(m,removes)\n             if index >= m:\n                    return m\n        \n\nfile = open('input.txt', 'r')\nopen('output.txt', 'w').write(str(physics(file)))\n", "f = open('input.txt', 'r')\nn = int(f.readline())\nc = sorted(map(int, f.readline().split()))\nj, v = 0, n - 1\nfor i in range(n):\n    while j < n - 1 and 2 * c[i] >= c[j + 1]:\n        j += 1\n    v = min(v, n + i - j - 1)\nopen('output.txt', 'w').write(str(v))\n", "import sys\nsys.stdin = open('input.txt')\nsys.stdout = open('output.txt','+w')\n\nn = int(input())\na = [0] + sorted(list(map(int, input().split())))\n\nstart = 1\nres = 0\nfor end in range(1,n+1):\n\twhile(a[end] > 2*a[start]):\n\t\tstart += 1\n\tres = max(res, end - start + 1)\nprint(n - res)", "import sys\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\n\nn, = I()\nfrom bisect import bisect_right as br\n\nl = I() + [MOD]\n\nl.sort()\nans = MOD\nfor i in range(n):\n\tk = l[i]\n\tj = br(l, 2*l[i])\n\tans = min(ans, n - (j - i))\nprint(ans)", "import sys\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\n\nn, = I()\nfrom bisect import bisect_right as br\n\nl = I()\n\nl.sort()\nans = MOD\nfor i in range(n):\n\tk = l[i]\n\tj = br(l, 2*l[i])\n\tans = min(ans, n - (j - i))\nprint(ans)", "f=open(\"input.txt\",\"r\")\nf1=open(\"output.txt\",\"w\")\ndef search(mas,val):\n    p=0\n    ost = len(mas) - 1\n    while (p <= ost):\n        mid = (p + ost) // 2;\n        if mas[mid] > val*2:\n            ost = mid - 1;\n        else :\n            p = mid + 1;\n                \n\n            \n    return p;\nn=int(f.readline())\nma=n-1\nl=list(map(int,f.readline().split()))\nl=sorted(l)\n\nfor i in range(n) :\n    e=search(l,l[i])\n    \n    w=i+n-e\n    ma=min(ma,w)\nma=str(ma)\nf1.write(ma)\nf.close()\nf1.close()\n    \n", "def solve(seq):\n    n = len(seq)\n    cnt = [0] * 5001\n    for e in seq:\n        cnt[e] += 1\n\n    acc = [0]\n    for i in range(1, 5001):\n        acc.append(acc[-1] + cnt[i])\n\n    ans = n\n    for i in range(5001):\n        if cnt[i] > 0:\n            if 2 * i < 5001:\n                n2remove = n - acc[2*i] + acc[i-1]\n            else:\n                n2remove = n - acc[-1] + acc[i-1]\n            ans = min(ans, n2remove)\n\n    return ans\n\n\ndef main():\n    with open('input.txt') as f:\n        _ = int(f.readline())\n        seq = list(map(int, f.readline().split()))\n\n    ans = solve(seq)\n\n    with open('output.txt', 'w') as f:\n        f.write(str(ans))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def solve(seq):\n    n = len(seq)\n    cnt = [0] * 5001\n    for e in seq:\n        cnt[e] += 1\n\n    acc = [0]\n    for i in range(1, 5001):\n        acc.append(acc[-1] + cnt[i])\n\n    ans = n\n    for i in range(5001):\n        if cnt[i] > 0:\n            n2remove = n - acc[min(2*i, 5000)] + acc[i-1]\n            ans = min(ans, n2remove)\n\n    return ans\n\n\ndef main():\n    with open('input.txt') as f:\n        _ = int(f.readline())\n        seq = list(map(int, f.readline().split()))\n\n    ans = solve(seq)\n\n    with open('output.txt', 'w') as f:\n        f.write(str(ans))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "with open('input.txt') as f:\n    n = int(f.readline())\n    arr = list(map(int, f.readline().split()))\nmark = [0 for _ in range(5001)]\nsumMark = [0 for _ in range(5001)]\ntotal = 0\nminA = 1000000\nfor v in arr:\n    mark[v] += 1\n    total+=1\nfor i in range(1,5001):\n    if mark[i]>0:\n        sumMark[i] = sumMark[i-1]+mark[i]\n    else:\n        sumMark[i] = sumMark[i-1]\nfor i in range(1,5001):\n    if i <=2500:\n        if mark[i] >0:\n            preValue = sumMark[i-1]\n            postValue = total-sumMark[i*2]\n            remove = postValue +preValue\n            ret = total-remove\n            if remove<minA:\n                minA = remove\n    else:\n        if mark[i] >0:\n            remove = sumMark[i-1]\n            ret = total-remove\n            if remove<minA:\n                minA = remove\nwith open('output.txt', 'w') as f:\n    f.write(str(minA))", "from bisect import bisect_right\nR = lambda: map(int, input().split())\nf = open(\"input.txt\",\"r\")\nn = int(f.readline())\nL = sorted(map(int, f.readline().split()))\nres = 10**9\nfor i in range(n):\n    k = bisect_right(L,2*L[i])\n    if k == n:\n        res = min(res,i)\n        break\n    res = min(res,i+n-k)\nopen('output.txt', 'w').write(str(res))", "f = open('input.txt', 'r')\nn = int(f.readline())\narr = sorted(map(int, f.readline().split()))\nj, res = 0, n - 1\nfor i in range(n):\n    while j < n - 1 and 2 * arr[i] >= arr[j + 1]: j += 1\n    res = min(res, n + i - j - 1)\nopen('output.txt', 'w').write(str(res))\n", "f = open('input.txt', 'r')\nn = int(f.readline())\narr = sorted(map(int, f.readline().split()))\nj = 0\nres = n - 1\n\nfor i in range(n):\n    while j < n - 1 and 2 * arr[i] >= arr[j + 1]:\n        j += 1\n    res = min(res, n + i - j - 1)\n\n\nopen('output.txt', 'w').write(str(res))\n", "import sys\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\n\nn, = I()\nfrom bisect import bisect_right as br\n\nl = I()\n\nl.sort()\nans = MOD\nfor i in range(n):\n\tk = l[i]\n\tj = br(l, 2*l[i])\n\tans = min(ans, n - (j - i))\nprint(ans)\n", "class CodeforcesTask253BSolution:\n    def __init__(self):\n        self.result = ''\n        self.measure_count = 0\n        self.measurements = []\n\n    def read_input(self):\n        in_ = open(\"input.txt\", \"r\").read().split(\"\\n\")\n        self.measure_count = int(in_[0])\n        self.measurements = [int(x) for x in in_[1].split(\" \")]\n\n    def process_task(self):\n        occurs = [0 for x in range(5000)]\n        for m in self.measurements:\n            occurs[m - 1] += 1\n        dels = [sum(occurs[:m-1]) + sum(occurs[m * 2:]) for m in range(1, 5000)]\n        self.result = str(min(dels))\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask253BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    open(\"output.txt\", \"w\").write(Solution.get_result())\n\n__starting_point()", "#   In this template you are not required to write code in main\nimport sys\n# inf = float(\"inf\")\n# abc='abcdefghijklmnopqrstuvwxyz'\n# abd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n# mod,MOD=1000000007,998244353\n# vow=['a','e','i','o','u']\n# dx,dy=[-1,1,0,0],[0,0,1,-1]\n#sys.setrecursionlimit(1000000)\n#from cmath import sqrt\n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi,gcd\nfrom bisect import bisect_left,bisect_right\n#import numpy as np\ndef get_array(): return list(map(int , sys.stdin.readline().strip().split()))\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n\nn=int(input())\narr=get_array()\narr.sort()\nmaxi=-1\nfor i in range(n):\n    x=bisect_right(arr,2*arr[i])\n    x-=1\n    maxi=max(maxi,x-i+1)\nprint(n-maxi)\n", "fd = open(\"input.txt\",\"r\")\nfd1 = open(\"output.txt\",\"w\")\nn = int(fd.readline())\narr = list(map(int,fd.readline().split()))\nfreq = [0 for i in range(5001)]\nfor i in range(n):\n\tfreq[arr[i]]+=1\npresum = [0 for i in range(5001)]\nfor i in range(1,5001):\n\tpresum[i] = presum[i-1]+freq[i]\ntot = n\nmini = n\nfor i in range(1,5001):\n\tmaxa = 2*i\n\tif maxa>5001:\n\t\tbreak\n\tans = n-( presum[maxa] - presum[i] + freq[i])\n\tmini = min(mini,ans)\nfd1.write(str(mini))\n\n\n"]