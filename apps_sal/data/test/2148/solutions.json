["import sys\ninput = sys.stdin.readline\n\nn, r = map(int, input().split())\nxs = list(map(int, input().split()))\n\npoints = []\n\nfor x in xs:\n  y = r\n  for x0, y0 in points:\n    if abs(x - x0) <= 2 * r:\n      y = max(y, y0 + ((2*r)**2 - (x-x0)**2)**0.5)\n  points.append((x, y))\n\nprint(\" \".join(\"%.20f\" % p[1] for p in points))", "n,r = list(map(int,input().split()))\nX = [int(x) for x in input().split()]\n\nY = []\nfor i in range(n):\n    forcedy = r\n    for j in range(len(Y)):\n        dist = abs(X[i]-X[j])\n        if dist <= 2*r:\n            y = Y[j] + ((2*r)**2-dist**2)**.5\n            forcedy = max(y,forcedy)\n    Y.append(forcedy)\nprint(*Y)\n        \n", "from math import sqrt\nn, r = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = []\nfor i in range(n):\n    y.append(r)\n    for j in range(i):\n        d = abs(x[i] - x[j])\n        if d > 2 * r:\n            continue\n        inc = sqrt(4 * r * r - d * d)\n        y[i] = max(y[i], y[j] + inc)\nprint(' '.join(map(str, y)))\n", "from math import sqrt\nn, r = list(map(int, input().split()))\nr2 = r**2\n*X, = list(map(int, input().split()))\nY = [0]*n\nans = []\nfor i in range(n):\n    y = r\n    for j in range(i):\n        diff = abs(X[i] - X[j])\n        if diff == 2*r:\n            y = max(y, Y[j])\n        elif diff < 2*r:\n            y = max(y, sqrt(4*r2 - diff**2) + Y[j])\n    Y[i] = y\n    ans.append(\"%.010f\" % Y[i])\nprint(*ans)\n", "import math\ndef collide(x1,r1,x2,r2,y2):\n    y = r1\n    D = (r1+r2)**2-(x1-x2)**2\n    if D>=0:\n        y = max(y,math.sqrt(D)+y2)\n    return y\nn,r = [int(x) for x in input().split()]\nX = [int(x) for x in input().split()]\nY = []\nfor i in range(n):\n    y = r\n    for j in range(i):\n        y = max(y,collide(X[i],r,X[j],r,Y[j]))\n    Y.append(y)\nprint(*Y)\n", "from math import *\nn, m = input().split()\nn = int(n)\nm = int(m)\nxcenters = [int(i) for i in input().split()]\nresult = []\n\nfor i in range(0, n):\n    badones = []\n    for j in range(0, i):\n        if abs(xcenters[j] - xcenters[i]) <= 2 * m:\n            badones.append(j)\n    if len(badones) == 0:\n        result.append(m)\n        continue\n\n    maxheight = m\n    for x in badones:\n        temp = result[x] + sqrt((4 * m * m) - ((xcenters[x] - xcenters[i]) ** 2))\n        if maxheight < temp:\n            maxheight = temp\n    result.append(maxheight)\n\nprint(*result)", "from math import sqrt\n\ns = str(input())\nn, r = int(s.split(' ')[0]), float(s.split(' ')[1])\nxs = str(input()).split(' ')\nxs = [int(x) for x in xs]\nlocations = []\n\nfor x in xs:\n\ty = r\n\tfor loc in locations:\n\t\tx2, y2 = loc\n\t\tif abs(x2 - x) <= 2 * r:\n\t\t\ty = max(y, y2 + sqrt(4 * r * r - abs(x2 - x) * abs(x2 - x)))\n\tlocations.append((x, y))\n\nfor l in locations:\n\tprint(str(l[1]), end=' ')", "n, r = map(int, input().split())\nx = list(map(int, input().split()))\ny = [r] * n\nfor i in range(n):\n    for j in range(i):\n        if not (abs(x[i] - x[j]) > 2 * r):\n            y[i] = max(y[i], (4 * r ** 2 - (x[i] - x[j]) ** 2) ** 0.5 + y[j])\n\nfor i in y:\n    print(i, end=' ')", "read = lambda: list(map(int, input().split()))\nn, r = read()\nx = list(read())\ny = [0] * n\nfor i in range(n):\n    cur = r\n    for j in range(i):\n        if 2 * r >= abs(x[i] - x[j]):\n            cur = max(cur, y[j] + ((4 * r * r - (x[i] - x[j]) ** 2) ** 0.5))\n    y[i] = cur\nprint(*y)\n", "n, r = list(map(int, input().split()))\nx = list(map(int, input().split()))\n\nr2r4 = 4 * r**2 \n\ny=[]\nfor i in range(0, n):\n    max_y = r\n    for j in range(i):\n        if r2r4 >= (x[i] - x[j]) ** 2:\n            max_y = max(max_y, y[j] + (r2r4 - (x[i]- x[j])**2)**0.5)\n    y.append(max_y)    \n\nprint(*y)\n", "import math\nn, r = map(int, input().split())\nx = list(map(int, input().split()))\ny = [r]\nfor i in range(1, len(x)):\n\tcur = r\n\tfor j in range(i):\n\t\td = abs(x[i] - x[j])\n\t\tif d <= 2 * r:\n\t\t\tcur = max(cur, y[j] + math.sqrt(4 * r**2 - d**2))\n\ty.append(cur)\nprint(*y)", "import bisect\n\nn, r = input().split()\nn, r = int(n), int(r)\n\ndisks = list(map(int, input().split()))\n\nd = dict()\n\nfinal = []\n\nfor x in disks:\n    first = bisect.bisect_left(final, x - 2*r)\n    last = bisect.bisect_right(final, x + 2*r)\n\n    m = 0\n\n    for i in range(first, last):\n        loc = final[i]\n        if (x - 2*r <= loc <= x + 2*r):\n            m = max(m, (4*r**2 - (x - loc)**2)**0.5 + d[loc])\n\n    d[x] = m\n    print(m + r, end=' ')\n    bisect.insort(final, x)\n", "a=list(map(int, input().split(\" \")))\ny=list(map(int, input().split(\" \")))\ncirc=[]\nfor i in range(a[0]):\n    fy=a[1]\n    for j in circ:\n        delta=abs(y[i]-j[0])\n        if delta<=2*a[1]:\n            fy=max(fy,j[1]+((2*a[1])**2-delta**2)**.5)\n    circ.append([y[i],fy])\nfor i in circ:\n    print(i[1], end=\" \")", "n,r = map(int, input().split())\nxs = list(map(int, input().split()))\n\nimport math\ndef ch(c1, c2):\n    d = abs(c1[0] - c2[0])\n    ph = math.sqrt(2*2*r*r - d*d)\n    return c2[1]+ ph\n\ncs = []\nfor i in range(len(xs)):\n    h = r\n    x = xs[i]\n    for c in cs:\n        if abs(x - c[0]) > 2*r:\n            continue\n        else:\n            h = max(h, ch([x, h], c))\n    cs.append([x, h])\n\nprint(' '.join([str(i[1]) for i in cs]))", "from math import *\n\nn, r = list(map(int, input().split()))\nx = list(map(int, input().split()))\nans = []\n\nfor i in range(n):\n    yi = r\n    for j in range(i):\n        if abs(x[j] - x[i]) <= 2 * r:\n            yi = max(yi, ans[j] + sqrt(4 * r**2 - (x[j] - x[i])**2))\n    ans.append(yi)\nprint(' '.join(map(str, ans)))\n", "import math\n\ndef __starting_point():\n  n, r = [int(x) for x in input().split()]\n  x = [int(x) for x in input().split()]\n  h = [None] * n\n  for i in range(n):\n    h[i] = r\n    for j in range(i):\n      if abs(x[i] - x[j]) <= 2 * r:\n        h[i] = max(h[i], h[j] + math.sqrt(math.pow(2 * r, 2) - math.pow(x[i] - x[j], 2)))\n  print(*h)\n\n__starting_point()", "import math\nn,r=map(int,input().split())\nv=[]\nfor i in list(map(int,input().split())):\n    my=r+0\n    for j in v:\n        if j[0]<i and j[0]+r>=i-r or j[0]>=i and j[0]-r<=i+r:\n            y=j[1]+math.sqrt(4*r*r-(j[0]-i)**2)\n            if y>my:\n                my=y\n    v.append((i,my))\nfor i in v:\n    print(i[1],end=' ')\n    \n    \n", "import math\n\n\nn,r=list(map(int,input().split()))\na=list(map(int,input().split()))\n\n\n\nnew=[r for i in range(n)]\n\nfor i in range(1,n):\n    for j in range(i):\n        temp=(2*r)**2 - (a[i]-a[j])**2        \n        if(temp>=0):\n            new[i]=max(new[i],math.sqrt(temp)+new[j])\nprint(*new)\n\n\n\n\n", "from math import sqrt\n\nn, r = [int(x) for x in input().split()]\n\nxcoords = [int(x) for x in input().split()]\nycoords = [-1 for x in xcoords]\n\nfor i, disk in enumerate(xcoords):\n    maxy = r\n    for j, disk2 in enumerate(xcoords):\n        if disk2 < disk - 2 * r or disk2 > disk + 2 * r or ycoords[j] == -1:\n            continue\n\n        y = sqrt(pow(2 * r, 2) - pow(abs(disk2 - disk), 2)) + ycoords[j]\n\n        if y > maxy:\n            maxy = y\n\n    ycoords[i] = maxy\n\ns = \"\"\nfor disk in ycoords:\n    s += str(disk) + \" \"\n\nprint(s[:-1])\n", "\nfrom math import sqrt\n\nN, R = map(int, input().split())\n\ndisk_xs = map(int, input().split())\n\ndisks = []\nfor x in disk_xs:\n    y = R\n    for (x0, y0) in disks:\n        sq = 4*(R**2) - (x0 - x)**2\n        if sq >= 0:\n            y1 = y0 + sqrt(sq)\n            y = max(y, y1)\n\n    disks.append((x, y))\n\nprint(' '.join(map(lambda x: str(x[1]), disks)))", "import sys\n\n#f = open('input', 'r')\nf = sys.stdin\nn, r = list(map(int, f.readline().split()))\nxs = list(map(int, f.readline().split()))\n\nimport math\n\nxy_before = []\nans = []\nfor x in xs:\n  max_y = r\n  for bx, by in xy_before:\n    if abs(x - bx) <= 2*r:\n      if max_y < by + math.sqrt((2*r)**2 - (x-bx)**2):\n        max_y = by + math.sqrt((2*r)**2 - (x-bx)**2)\n  ans.append(max_y)\n  xy_before.append((x, max_y))\n\nprint(' '.join(map(str, ans)))\n", "n,r=map(int,input().split())\nx=list(map(int,input().split()))\ny=[]\nfor i in range(n):\n    s = []\n    for j in range(i):\n        if abs(x[i]-x[j]) < 2 * r + 0.0000001:\n            s.append(j)\n    max = r\n    for j in s:\n        if (4 * r * r - (x[i]-x[j])**2)**0.5 + y[j] > max:\n            max = (4 * r * r - (x[i]-x[j])**2)**0.5 + y[j]\n    y.append(max)\nfor i in y:\n    print(i, end=' ')\n            \n", "import math\n\n\nclass Point:\n\n    def __init__(self, x , y):\n        self.x = x\n        self.y = y\n\n\nclass Curling:\n\n    def __init__(self, r):\n        self.r = r\n        self.r2 = r * r\n        self.d = r * 2\n        self.disks = []\n        self.results = []\n\n    def add(self, x):\n        min_y = [self.r]\n        for disk in self.disks:  # type: Point\n            x_distance = abs(x - disk.x)\n            if x_distance == 0:\n                min_y.append(disk.y + self.d)\n            elif x_distance == self.d:\n                min_y.append(disk.y)\n            elif x_distance < self.d:\n                min_y.append(self.calc_min_y(disk, x))\n        disk = Point(x, max(min_y))\n        self.disks.append(disk)\n        self.results.append(str(disk.y))\n\n    def calc_min_y(self, disk: Point, x):\n        cx = abs(disk.x - x) / 2\n        dy = math.sqrt(self.r2 - cx * cx)\n        return disk.y + 2 * dy\n\n\n[n, r] = list(map(int, input().split()))\ncurling = Curling(r)\nx_positions = list(map(int, input().split()))\nfor x_position in x_positions:\n    curling.add(x_position)\nprint(\" \".join(curling.results))\n", "import math;\nn, r = map(int, input().split());\nX = list(map(int, input().split()));\nC = [];\nfor q in range(len(X)):\n    y = r;\n    for w in range(len(C)):\n        if abs(X[w] - X[q]) <= 2 * r:\n            yc = math.sqrt(4 * r * r - (X[w] - X[q]) ** 2) +C[w];\n            #print(yc);\n            y = max(y, yc);\n    C.append(y);\nprint(*C);", "import math\n\nn, r = map(int, input().split())\n\ndisk_list = map(int, input().split())\n\nt = [-1 * r for i in range(1001)]\n\nresult = []\nfor disk in disk_list:\n\n\tstart = disk - r * 2\n\tif start < 0:\n\t\tstart = 0\n\n\tend = disk + r * 2\n\tif end > 1000:\n\t\tend = 1000\n\n\tmax_y = 0\n\tfor i in range(start, end + 1):\n\n\t\tx1 = i\n\t\ty1 = t[i]\n\n\t\tx2 = disk\n\n\t\t#Calculate y2\n\t\ty2 = math.sqrt(4 * (r**2) - (abs(x1 - x2) ** 2)) + y1\n\n\n\t\tif y2 > max_y:\n\t\t\tmax_y = y2\n\n\tt[disk] = max_y\n\tresult.append(max_y)\n\nfor i in result:\n    print(i, end=\" \")\n\n#print(t[:10])\n"]