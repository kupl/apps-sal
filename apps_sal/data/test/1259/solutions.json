["import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\ne = [tuple(map(int, input().split())) for _ in range(m)]\ng = [[] for _ in range(n + 1)]\nfor u, v in e:\n    g[u].append(v)\n    g[v].append(u)\n\nreq = 1\nwhile req * req < n:\n    req += 1\n\ndef dfs():\n    dep = [0] * (n + 1)\n    par = [0] * (n + 1)\n    mk = [0] * (n + 1)\n    st = [1]\n    st2 = []\n    while st:\n        u = st.pop()\n        if dep[u]:\n            continue\n        st2.append(u)\n        dep[u] = dep[par[u]] + 1\n        for v in g[u]:\n            if not dep[v]:\n                par[v] = u\n                st.append(v)\n            elif dep[u] - dep[v] + 1 >= req:\n                ans = []\n                while u != par[v]:\n                    ans.append(u)\n                    u = par[u]\n                return (None, ans)\n    while st2:\n        u = st2.pop()\n        if not mk[u]:\n            for v in g[u]:\n                if dep[v] < dep[u]:\n                    mk[v] = 1\n    return ([u for u in range(1, n + 1) if not mk[u]][:req], None)\n\niset, cyc = dfs()\nif iset:\n    print(1)\n    print(*iset)\nelse:\n    print(2)\n    print(len(cyc))\n    print(*cyc)\n", "import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\ne = [tuple(map(int, input().split())) for _ in range(m)]\ng = [[] for _ in range(n + 1)]\nfor u, v in e:\n\tg[u].append(v)\n\tg[v].append(u)\n\nreq = 1\nwhile req * req < n:\n\treq += 1\n\ndef dfs():\n\tdep = [0] * (n + 1)\n\tpar = [0] * (n + 1)\n\tst = [1]\n\tst2 = []\n\twhile st:\n\t\tu = st.pop()\n\t\tif dep[u]:\n\t\t\tcontinue\n\t\tst2.append(u)\n\t\tdep[u] = dep[par[u]] + 1\n\t\tfor v in g[u]:\n\t\t\tif not dep[v]:\n\t\t\t\tpar[v] = u\n\t\t\t\tst.append(v)\n\t\t\telif dep[u] - dep[v] + 1 >= req:\n\t\t\t\tcyc = []\n\t\t\t\twhile u != par[v]:\n\t\t\t\t\tcyc.append(u)\n\t\t\t\t\tu = par[u]\n\t\t\t\treturn (None, cyc)\n\tmk = [0] * (n + 1)\n\tiset = []\n\twhile st2:\n\t\tu = st2.pop()\n\t\tif not mk[u]:\n\t\t\tiset.append(u)\n\t\t\tfor v in g[u]:\n\t\t\t\tmk[v] = 1\n\treturn (iset[:req], None)\n\niset, cyc = dfs()\nif iset:\n\tprint(1)\n\tprint(*iset)\nelse:\n\tprint(2)\n\tprint(len(cyc))\n\tprint(*cyc)\n"]