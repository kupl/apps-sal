["'''input\naabc\n'''\n\ndef list_input():\n    return list(map(int,input().split()))\ndef map_input():\n    return map(int,input().split())\ndef map_string():\n    return input().split()\n    \ns = input()\na = s.count('a')\nb = s.count('b')\nc = s.count('c')\nans = \"YES\"\nif(a == 0 or b == 0): ans = \"NO\"\nif(c != a and c != b): ans = \"NO\"\nfor i in range(len(s)-1):\n\tif(s[i] > s[i+1]): ans = \"NO\"\nprint(ans)\t", "a = input()\nif a.count('a') == a.find('b') and a.count('a') + a.count('b') == a.find('c') and (a.count('a') == a.count('c') or a.count('b') == a.count('c')) and a.count('a') * a.count('b'):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "string = input()\n\na = string.count('a')\nb = string.count('b')\nc = string.count('c')\n\nad = False\nbd = False\ncd = False\n\nans = True\n\nba = string.count('ba')\ncb = string.count('cb')\nca = string.count('ca')\n\n\nif (a > 0) and (b > 0) and ((a == c) or (b == c)) and (ba == 0) and (cb == 0) and (ca == 0):\n    print('YES')\nelse:\n    print('NO')\n    \n", "'''input\nbbcc\n'''\ndef ii():\n\treturn input()\ndef arr():\n\treturn list(map(int,ii().split()))\n\ns = ii()\na = 0\nb = 0\nc = 0\n\nfor ch in s:\t\n\tif ch =='a':\n\t\ta+=1\n\t\tif b!=0 or c!=0:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\telif ch =='b':\n\t\tb = b+1\n\t\tif c!=0:\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\telse:\n\t\tc = c + 1\n\nif a!=0 and b!=0 and c!=0:\n\tif c == a or c== b:\n\t\tprint(\"YES\")\n\t\treturn\n\nprint(\"NO\")\n", "x=input()\nlast=''\nfor i in x:\n if i==last: continue\n elif last=='' and i=='a':\n  last='a'\n elif last=='a' and i=='b':\n  last='b'\n elif last=='b' and i=='c':\n  last='c'\n else:\n  print('NO')\n  return\n\nif x.count('a') and x.count('b') and (x.count('a')==x.count('c') or x.count('b')==x.count('c')):\n print('YES')\nelse: print('NO')", "s = input()\ni = 0\nwhile i < len(s):\n    if s[i] == 'a':i+=1\n    else:break\nwhile i < len(s):\n    if s[i] == 'b':i+=1\n    else:break\nwhile i < len(s):\n    if s[i] == 'c':i+=1\n    else:break\nac =s.count('a')\nbc = s.count('b')\ncc = s.count('c')\nif ac > 0 and bc > 0 and cc > 0 and (cc in[ac,bc]) and (i == len(s)):print('YES')\nelse:print('NO')\n", "import re\n\npattern = r'^a+b+c+$'\n\ns = input()\n\nif re.match(pattern,s):\n\tl = len(s)\n\tpos_b = s.index('b')\n\tpos_c = s.index('c')\n\tlen_c = l-pos_c\n\tlen_b = l-len_c-pos_b\n\tlen_a = l-len_c-len_b\n\tprint (('NO','YES')[len_c in (len_b,len_a)])\n\nelse:\n\tprint ('NO')", "import re\n\ndef sv():\n\tS = input()\n\tif not re.match(r'^a+b+c+$', S):\n\t\treturn False\n\tchrs = {'a':0,'b':0,'c':0}\n\tfor c in S:\n\t\tchrs[c] += 1\n\treturn chrs['c'] == chrs['a'] or chrs['c'] == chrs['b']\n\nprint('YES' if sv() else 'NO')\n", "s=input()\n\na=0\nb=0\nc=0\n\nif (''.join(sorted(s))==s):\n    for i in s:\n        if i=='a':\n            a+=1\n        elif i=='b':\n            b+=1\n        elif i=='c':\n            c+=1\n    #print(a,b,c)\n    if a>0 and b>0 and (c==a or c==b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nelse:\n    print(\"NO\")\n", "import fileinput\nimport sys\n\nclass MyInput(object) :\n    def __init__(self,default_file=None) :\n        self.fh = sys.stdin\n        if (len(sys.argv) >= 2) : self.fh = open(sys.argv[1])\n        elif default_file is not None : self.fh = open(default_file)\n    def getintline(self,n=-1) : \n        ans = tuple(int(x) for x in self.fh.readline().rstrip().split())\n        if n > 0 and len(ans) != n : raise Exception('Expected %d ints but got %d in MyInput.getintline'%(n,len(ans)))\n        return ans\n    def getfloatline(self,n=-1) :\n        ans = tuple(float(x) for x in self.fh.readline().rstrip().split())\n        if n > 0 and len(ans) != n : raise Exception('Expected %d floats but got %d in MyInput.getfloatline'%(n,len(ans)))\n        return ans\n    def getstringline(self,n=-1) :\n        ans = tuple(self.fh.readline().rstrip().split())\n        if n > 0 and len(ans) != n : raise Exception('Expected %d strings but got %d in MyInput.getstringline'%(n,len(ans)))\n        return ans\n    def getbinline(self,n=-1) :\n        ans = tuple(int(x,2) for x in self.fh.readline().rstrip().split())\n        if n > 0 and len(ans) != n : raise Exception('Expected %d bins but got %d in MyInput.getbinline'%(n,len(ans)))\n        return ans\n\ndef compress(s) :\n    s2 = [s[0]]\n    for c in s :\n        if c != s2[-1] : s2.append(c)\n    return \"\".join(s2)\n\ndef __starting_point():\n    myin = MyInput()\n    (s,) = myin.getstringline(1)\n    ## Make sure there are a's followed by b's followed by c's\n    ## Make sure the count of cs either equals count of as or count of bs\n    s1 = compress(s)\n    ans = \"NO\"\n    if s1 == 'abc' and ( s.count('c') == s.count('a') or s.count('c') == s.count('b') ) : ans = \"YES\"\n    print(ans)\n\n\n__starting_point()", "def main():\n    s = input()\n    cnt_a = 0\n    cnt_b = 0\n    cnt_c = 0\n    for c in s:\n        if c == 'a':\n            if cnt_b != 0 or cnt_c != 0:\n                print('NO')\n                return\n            cnt_a += 1\n        if c == 'b':\n            if cnt_c != 0:\n                print('NO')\n                return\n            cnt_b += 1\n        if c == 'c':\n            cnt_c += 1\n    if cnt_a != 0 and cnt_b != 0 and (cnt_c == cnt_a or cnt_c == cnt_b):\n        print('YES')\n        return\n    print('NO')\n\n\nmain()", "s = input()\na = 0\nb = 0\nc = 0\ni = 0\nwhile i < len(s) and s[i] == 'a':\n    a+=1\n    i+=1\nwhile i < len(s) and s[i] == 'b':\n    b+=1\n    i+=1\nwhile i < len(s) and s[i] == 'c' :\n    c+=1\n    i+=1\nif i == len(s) and  (a == c or b == c) and a*b!=0:\n    print(\"YES\")\nelse:print(\"NO\")", "s = str(input())\na = 0\nb = 0\nc = 0\nstage = 0\nfor i in range(len(s)):\n    if s[i] == 'a' and stage <= 1:\n        a += 1\n        stage = 1\n    elif s[i] == 'b' and stage > 0 and stage < 3:\n        b += 1\n        stage = 2\n    elif s[i] == 'c' and stage > 1 and stage < 4:\n        c += 1\n        stage = 3\n    else:\n        stage = 100\n        break\nif stage == 3 and a > 0 and b > 0 and (c == a or c == b):\n    print('YES')\nelse:\n    print('NO')\n\n\n", "s = input()\nflag = 0\nans = 1\naa = s.count(\"a\")\nbb = s.count(\"b\")\ncc = s.count(\"c\")\nif min(aa,bb) == 0 or (bb != cc and aa != cc):\n    print(\"NO\")\nelse:\n    for i in s:\n        if flag == 0:\n            if i == \"b\":\n                flag = 1\n                continue\n            if i != \"a\":\n                ans = 0\n                break\n        elif flag == 1:\n            if i == \"c\":\n                flag = 2\n                continue\n            if i != \"b\":\n                ans = 0\n                break\n        else:\n            if i != \"c\":\n                ans = 0\n                break\n    if ans == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "s = input()\ni = 0\nn = len(s)\nwhile i < n-1:\n   if ord(s[i]) <= ord(s[i+1]):\n      i += 1\n   else:\n      break\nif i == n-1 and s.count('a') > 0 and s.count('b') > 0 and (s.count('c') == s.count('a') or s.count('c') == s.count('b')):\n   print('YES')\nelse:\n   print('NO')\n", "s=input()\nL=[0,0,0]\nss=s.lstrip(\"a\")\nL[0]=len(s)-len(ss)\nsss=ss.lstrip(\"b\")\nL[1]=len(ss)-len(sss)\nssss=sss.lstrip(\"c\")\nL[2]=len(sss)-len(ssss)\nif ssss!=\"\":\n    print(\"NO\")\nelif 0 in L:\n    print(\"NO\")\nelse:\n    if L[2] in (L[0],L[1]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "state = 1\n\ns = input()\n\n\nif ((s.count('a') == 0) or (s.count('b') == 0) or ((s.count('c') != s.count('a') and (s.count('c') != s.count('b'))))):\n    print('NO')\n    return\n\nfor el in s:\n    if el == 'b':\n        state = max(state, 2)\n    if el == 'c':\n        state = max(state, 3)\n    if state != 1 and el == 'a':\n        print(\"NO\")\n        return\n    if state != 2 and el == 'b':\n        print(\"NO\")\n        return\n    if state != 3 and el == 'c':\n        print(\"NO\")\n        return\n        \nprint(\"YES\")", "from collections import Counter\n\ns = list(input().strip())\nif s != sorted(s):\n    print('NO')\n    return\nif set(s) != set(['a', 'b', 'c']):\n    print('NO')\n    return\n\nx = Counter(s)\nif x['c'] == x['a'] or x['c'] == x['b']:\n    print('YES')\nelse:\n    print('NO')\n", "import sys\n\ns = input()\na = 0\nb = 0\nc = 0\nstate = 'a'\nfor i in s:\n    if state == 'a':\n        if i == 'a':\n            a += 1\n        elif i == 'b':\n            b += 1\n            state = 'b'\n        elif i == 'c':\n            state = 'c'\n            c += 1\n        else:\n            print(\"NO\")\n            return\n    elif state == 'b':\n        if i == 'a':\n            print(\"NO\")\n            return\n        elif i == 'b':\n            b += 1\n        elif i == 'c':\n            state = 'c'\n            c += 1\n        else:\n            print(\"NO\")\n            return\n    elif state == 'c':\n        if i == 'a':\n            print(\"NO\")\n            return\n        elif i == 'b':\n            print(\"NO\")\n            return\n        elif i == 'c':\n            state = 'c'\n            c += 1\n        else:\n            print(\"NO\")\n            return\nif a == 0 or b == 0 or (c != a and c != b):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "from collections import Counter as Cnt\n\ns = input()\n\ncur = 0\nwhile cur < len(s) and s[cur] == 'a':\n\tcur += 1\n\nif cur == len(s):\n\tprint('NO')\n\treturn\n\nwhile cur < len(s) and s[cur] == 'b':\n\tcur += 1\n\nwhile cur < len(s) and s[cur] == 'c':\n\tcur += 1\n\nif cur != len(s):\n\tprint('NO')\n\treturn\n\nc = Cnt(s)\nif c['a'] > 0 and c['b'] > 0 and (c['c'] == c['a'] or c['c'] == c['b']):\n\tprint('YES')\nelse:\n\tprint('NO')", "# -*- coding: UTF-8 -*-\n\ns = input()\nstatus = ['a', 'b', 'c']\ncount = [0, 0, 0]\np = 0\nflag = True\n\nfor c in s:\n    while p < 3 and c != status[p]:\n        p += 1\n    if p >= 3:\n        flag = False\n        break\n    count[p] += 1\n\nif count[0] == 0 or count[1] == 0 or count[2] == 0:\n    flag = False\nif count[0] != count[2] and count[1] != count[2]:\n    flag = False\nif flag:\n    print('YES')\nelse:\n    print('NO')\n", "s = input()\na = [0] * 3\nk = 0\nok = True\nfor i in s:\n    c = ord(i) - ord('a')\n    if c == k:\n        a[k] += 1\n    elif c == k + 1:\n        k += 1\n        a[k] += 1\n    else:\n        ok = False\n        break\nif a[0] == 0 or a[1] == 0 or (a[0] != a[2] and a[1] != a[2]):\n    ok = False\nif ok: print('YES')\nelse: print('NO')\n"]