["k = int(input())\ncodeforces = \"codeforces\"\nans = [1 for _ in range(len(codeforces))]\ni = 0\ntot = 1\nwhile tot < k:\n    tot //= ans[i]\n    ans[i] += 1\n    tot *= ans[i]\n    i += 1\n    i %= len(codeforces)\nfor i in range(len(codeforces)):\n    print(codeforces[i] * ans[i], end = \"\")\nprint()\n", "import sys\nreadline = sys.stdin.readline\nK = int(readline())\n\nS = 'codeforces'\n\narr = [1]*10\n\nfor _ in range(1000):\n    res = 1\n    for a in arr:\n        res *= a\n    if res >= K:\n        break\n    arr[arr.index(min(arr))] += 1\n    \n    \n\nans = ''\nfor i in range(10):\n    ans = ans + S[i]*arr[i]\n\nprint(ans)", "from math import floor\nk = int(input())\narr = [floor(k**(1/10))] * 10\ndef prod(arr):\n    acc = 1\n    for e in arr:\n        acc *= e\n    return acc\nfor i in range(len(arr)):\n    if prod(arr) >= k:\n        break\n    arr[i] += 1 \nprint(\"\".join([arr[i]*\"codeforces\"[i] for i in range(10)]))\n", "from collections import defaultdict as dd\nfrom collections import deque\nimport bisect\nimport heapq\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\n\ndef solve():\n    n = ri()\n    word = 'codeforces'\n    mult = [1] * 10\n    count = 1\n    i = -1\n    while count < n:\n        i = (i + 1) % 10\n        mult[i] += 1\n        count = (count // (mult[i] - 1)) * mult[i]\n    out = \"\"\n    for i in range(10):\n        out += word[i] * mult[i]\n\n    print (out)\n\n\n\n\n\nmode = 's'\n\nif mode == 'T':\n    t = ri()\n    for i in range(t):\n        solve()\nelse:\n    solve()\n", "from math import *\n\ndef rr(t):\n    zzz = [t(i) for i in input().split()]\n    if len(zzz) == 1:\n        return zzz[0]\n    return zzz\n\ndef r3(t):\n    return [t(i) for i in input()]\n\nk = int(input())\ncnt = 1\ns = [i for i in 'codeforces']\nts = [1 for i in s]\nci = 0\nwhile cnt < k:\n    cnt = cnt * (ts[ci] + 1) // ts[ci]\n    ts[ci] += 1\n    ci = (ci + 1) % len(s)\n\nfor i in range(len(ts)):\n    print(s[i]*ts[i], end='')\nprint()\n", "s = 'codeforces'\na = [1] * len(s)\nans, cp, n = 1, 0, len(s)\nk = int(input())\nwhile ans < k:\n    ans = ans // a[cp]\n    a[cp] += 1\n    ans *= a[cp]\n    cp = (cp + 1) % n\nprint(''.join([s[x] * y for x, y in enumerate(a)]))\n", "from math import *\nfrom random import *\ns = \"codeforces\"\nn = len(s)\nk = int(input())\ncnt = [1 for i in range(n)]\nmlt = 1\npos = 0\nwhile mlt < k:\n    mlt //= cnt[pos]\n    cnt[pos] += 1\n    mlt *= cnt[pos]\n    pos += 1\n    if pos >= n:\n        pos -= n\nfor i in range(n):\n    for j in range(cnt[i]):\n        print(s[i], end='')", "import sys\ninput = sys.stdin.readline\nk=int(input())\nw=\"codeforces\"\nnums=[1]*10\nprod=1\ni=0\nwhile prod<k:\n    prod//=nums[i]\n    nums[i]+=1\n    prod*=nums[i]\n    i+=1\n    if i==10:\n        i=0\nsol=\"\"\nfor i in range(10):\n    for j in range(nums[i]):\n        sol+=w[i]\nprint(sol)", "import sys\ninput = sys.stdin.readline\n\nk=int(input())\nS=\"codeforces\"\nANS=[1]*10\nNOW=1\nind=0\nwhile NOW<k:\n    ANS[ind]+=1\n    NOW=NOW*ANS[ind]//(ANS[ind]-1)\n    ind=(ind+1)%10\n\nfor i in range(10):\n    print(S[i]*ANS[i],end=\"\")\nprint()\n", "k = int(input())\n\ndef product(s):\n    res = 1\n    for e in s:\n        res *= e\n    return res\n\nstring = \"codeforces\"\nnums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nindex = 0\nwhile True:\n    p = product(nums)\n    if p < k:\n        nums[index] += 1\n        index = (index + 1) % len(nums)\n    else:\n        break\n\nresult = \"\"\nfor i, e in enumerate(nums):\n    result += e * string[i]\n\nprint(result)\n", "k=int(input())\ns='codeforces'\na=[1]*10\nans=1\npointer=0\nwhile ans<k:\n    ans=ans//a[pointer]\n    a[pointer]+=1\n    ans=ans*a[pointer]\n    pointer=(pointer+1)%10\nans1=[]\nfor i in range(10):\n    for j in range(a[i]):\n        ans1.append(s[i])\nprint(''.join(ans1))\n", "from functools import reduce\n\nn = int(input())\ns = 'codeforces'\n\nc = [0] * len(s)\nci = 0\n\nwhile reduce(int.__mul__, c) < n:\n    c[ci] += 1\n    ci += 1\n    ci %= len(s)\n\nx = ''\n\nfor j, i in enumerate(s):\n    print(i * c[j], end='')\n"]