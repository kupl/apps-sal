["n, m = map(int, input().split())\n\np = ''\nq = []\n\narr = [input() for __ in range(n)]\ns = set(arr)\nfor z in arr:\n    if z == z[::-1]:\n        p = z\n    else:\n        if z not in s: continue\n        if z[::-1] in s:\n            s.remove(z)\n            s.remove(z[::-1])\n            q += z,\n\nres = ''.join(q)\nres = res + p + res[::-1]\nprint(len(res))\nprint(res)", "n,m = [int(i) for i in input().split()]\ns = [input() for i in range(n)]\nans = \"\"\ni = 0\nmid = \"\"\nwhile i < len(s):\n    l = s.pop()\n    if l[::-1] == l:\n        if len(mid) < len(l):\n            mid = l\n    elif l[::-1] in s:\n        s.remove(l[::-1])\n        ans += l\n\nprint(len(ans)*2+len(mid))\nprint(ans+mid+ans[::-1])", "from collections import defaultdict\nn,m=list(map(int,input().split()))\ndict=defaultdict(int)\nlarr=''\nrarr=''\nmxeq=''\nmxln=0\nfor _ in range(n):\n    s=input()\n    if dict[s[::-1]]==1:\n        rarr+=s\n        larr=s[::-1]+larr\n        del dict[s[::-1]]\n    elif s==s[::-1]:\n        if len(s)>mxln:\n            mxln=len(s)\n            mxeq=s\n    else:\n        dict[s]=1\n\nfarr=larr+mxeq+rarr\nprint(len(farr))\nprint(farr)\n\n\n", "n, m = list(map(int, input().split()))\nar = []\nfor _ in range(n):\n    ar.append(input())\nans1 = ''\nans2 = ''\nkek = set()\nfor i in range(n):\n    for j in range(i + 1, n):\n        if ar[i] == ar[j][::-1]:\n            ans1 += ar[i]\n            ans2 = ar[j] + ans2\n            kek.add(ar[i])\nfor i in range(n):\n    if ar[i] == ar[i][::-1] and ar[i] not in kek:\n        ans1 += ar[i]\n        break\nprint(len(ans1) + len(ans2))\nprint(ans1 + ans2)", "n, m = list(map(int, input().split()))\ns = []\nfor i in range(n):\n\ts.append(input())\n\nA, B = '', ''\nM = ''\nd = {}\n\nfor i in range(n):\n\tfor j in range(i+1, n):\n\t\tif s[i][::-1] == s[j] and i not in d and j not in d:\n\t\t\tA = A + s[i]\n\t\t\tB = s[j] + B\n\t\t\t\n\t\t\td[i] = True\n\t\t\td[j] = True\n\nfor i in range(n):\n\tif s[i][::-1] == s[i] and i not in d:\n\t\tM = s[i]\n\nprint(len(A) + len(M) + len(B))\nprint(A + M + B)\n", "from math import *\n\nn,m = map(int,input().split())\na = []\nfor y in range(n):\n\ta.append(input())\nx = [0 for i in range(n)]\nt = \"\"\nfor i in range(n):\n\tfor j in range(i+1,n):\n\t\tif(x[j] == 1 or x[i] == 1): continue\n\t\tif(a[i] == a[j][::-1]):\n\t\t\tt = a[i] + t + a[j]\n\t\t\t#print(t)\n\t\t\tx[i] = 1\n\t\t\tx[j] = 1\n#print(t)\nfor i in range(n):\n\tif(x[i] == 1): continue\n\tif(a[i] == a[i][::-1]):\n\t\tt = t[:len(t)//2]+a[i]+t[len(t)//2:]\n\t\tbreak\nprint(len(t))\nprint(t)", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n \nM = mod = 10**9 + 7\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n').split(' ')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nn,m = li()\nl = []\nfor i in range(n):l.append(st())\nl.sort()\ncnt = Counter()\nfor i in l:\n    cnt[i] += 1\ntoadd = []\nd1 = ''\nfor i in cnt:\n    if cnt[i]:\n        if i == i[::-1]:\n            toadd.append(i*(cnt[i]//2))\n            cnt[i] -= 2*(cnt[i]//2)\n            if cnt[i] and len(i)>len(d1):\n                d1 = i\n                cnt[i] -= 1\n        elif cnt[i[::-1]]:\n            toadd.append(i)\n            cnt[i]-=1\n            cnt[i[::-1]]-=1\n        elif i == i[::-1] and len(i)>len(d1):\n            d1 = i\n            cnt[i] -= 1\ns = ''\nfor i in toadd:\n    s += i\ns = s + d1 + s[::-1]\nprint(len(s))\nprint(s)\n", "num, n = map(int, input().split())\n\na = []\nb = []\ncenter = \"\"\n\nfor i in range(num):\n    s = input()\n    if s[::-1] == s:\n        center = s\n    if s[::-1] in a:\n        b.append(s)\n    else:\n        a.append(s)\n\nans = \"\"\n\nfor x in b:\n    ans += x\n\nans = ans + center + ans[::-1]\n\nprint(len(ans))\nprint(ans)", "n,m = map(int,input().split())\n\npair = []\nown = []\nmentu = []\nfor _ in range(n):\n    s = list(input())\n    if s == s[::-1]:\n        own.append(s)\n    else:\n        if s[::-1] in mentu:\n            pair.append(s)\n        else:\n            mentu.append(s)\nk = 1 if own else 0\nprint(k * m + len(pair) * 2 * m)\nans = \"\"\nfor s in pair:\n    ans += \"\".join(s)\nif own:\n    for s in own[0]:\n        ans += \"\".join(s)\nfor s in pair[::-1]:\n    ans += \"\".join(s[::-1])\nprint(ans)", "def solve(N, M, A):\n    strs = set(A)\n    used = set()\n    forward = []\n    mid = []\n\n    for x in strs:\n        rev = x[::-1]\n        if x == rev:\n            mid.append(x)\n        elif rev in strs and x not in used:\n            forward.append(x)\n            used.add(x)\n            used.add(rev)\n\n    front = \"\".join(forward)\n    back = front[::-1]\n    if mid:\n        ret = front + next(iter(mid)) + back\n    else:\n        ret = front + back\n    return str(len(ret)) + \"\\n\" + ret\n\n\ndef __starting_point():\n\n    N, M = list(map(int, input().split()))\n    A = []\n    for i in range(N):\n        S = input()\n        assert len(S) == M\n        A.append(S)\n    ans = solve(N, M, A)\n    print(ans)\n\n__starting_point()", "n,m = list(map(int,input().split()))\n\ns = [input() for i in range(n)]\n\nd = {}\nfor i in s:\n\ttry:\n\t\td[i] += 1\n\texcept:\n\t\td[i] = 1\n\n\nrevis = []\npal = \"\"\n\nfor i in d:\n\trevi = i[::-1]\n\t# print(revi,i)\n\n\tif revi == i:\n\t\tif d[i]&1:\n\t\t\tif len(i) > len(pal):\n\t\t\t\tpal = i\n\t\telse:\n\t\t\tx = d[i]//2\n\t\t\tfor j in range(x):\n\t\t\t\trevis.append(i)\n\telse:\n\t\tif revi in d:\n\t\t\tx = min(d[i], d[revi])\n\t\t\td[i] -= x\n\t\t\td[revi] -= x\n\t\t\tfor j in range(x):\n\t\t\t\trevis.append(i)\n\nss = \"\"\nfor i in revis:\n\tss += i\nss = ss + pal + ss[::-1]\n\nprint(len(ss))\nprint(ss)\n", "n, m = map(int, input().split())\nK = list(set(input() for _ in range(n)))\nn = len(K)\n\ndef is_pal(S):\n    nonlocal m\n    ret = True\n    for i in range(m//2+1):\n        if S[i] != S[-i-1]:\n            ret = False\n    return ret\n\nans = \"\"\n\nfor k in K:\n    if is_pal(k):\n        ans = k\n        break\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if K[i] == K[j][::-1]:\n            ans = K[i] + ans + K[j]\n            break\n\nprint(len(ans))\nprint(ans)", "def palindrome(s):\n    for i in range(len(s)//2):\n        if s[i] != s[len(s)-1-i]:\n            return False\n\n    return True\n\ndef main():\n    n,m = list(map(int,input().split()))\n    strings = []\n    for i in range(n):\n        strings.append(input())\n        \n    pairs = []\n    alone = []\n    for i in range(n):\n        found = False\n        s1 = strings[i]\n        for j in range(i+1,n):\n            s2 = strings[j][::-1]\n            #print(s1,s2)\n            if s1 == s2:\n                found = True\n                pairs.append((s1,strings[j]))\n                break\n            \n        if not found:\n            if palindrome(s1):\n                alone.append(s1)\n\n    #print(pairs)\n    s = ''\n    for i in pairs:\n        s += i[0]\n\n    while len(alone) > 1:\n        alone.pop()\n        \n    for i in alone:\n        s += i\n\n    pairs.reverse()\n    for i in pairs:\n        s += i[1]\n\n    print(len(s))\n    print(s)\n\nmain()\n", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    N, M = list(map(int, input().split()))\n    has_rev = {}\n    pal = []\n    for _ in range(N):\n        s = input().rstrip('\\n')\n        s_rev = s[::-1]\n        if s == s_rev:\n            pal.append(s)\n        else:\n            if s_rev in has_rev:\n                has_rev[s_rev] = 1\n            else:\n                has_rev[s] = 0\n    ans = []\n    for s in has_rev:\n        if has_rev[s]:\n            ans.append(s)\n    if ans:\n        ans = ''.join(ans)\n        ans_rev = ans[::-1]\n    else:\n        ans = ''\n        ans_rev = ''\n    if pal:\n        ans = ans + pal[0] + ans_rev\n        print(len(ans))\n        print(ans)\n    else:\n        ans = ans + ans_rev\n        print(len(ans))\n        print(ans)\n\n\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m=map(int,input().split())\nls=set()\nfinal=\"\"\nfor i in range(n):\n    s=input()\n    if(s[::-1] in ls):\n        ls.remove(s[::-1])\n        final=s+final+s[::-1]\n    else:\n        ls.add(s)\nfor s in ls:\n    flag=True\n    for i in range(m//2):\n        if(s[i]!=s[m-i-1]):\n            flag=False\n    if(flag):\n        final=final[0:len(final)//2]+s+final[len(final)//2:]\n        break\nprint(len(final))    \nprint(final)        ", "n,m = map(int,input().split())\ndata = [input() for _ in range(n)]\ndata_rev = [x[::-1] for x in data]\n\nnow = \"\"\nans = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        if data[i] == data_rev[j]:\n            now = data[i] + now + data[j]\n\nans = len(now)\nfor i in range(n):\n    if data[i] == data_rev[i]:\n        now2 = data[i]\n        for j in range(n):\n            if j == i:continue\n            for k in range(j+1,n):\n                if k == i:continue\n                if data[j] == data_rev[k]:\n                    now2 = data[j] + now2 + data[k]\n        if ans < len(now2):\n            now = now2\n            ans = len(now2)\n\nprint(ans)\nprint(now)", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\nN, M = map(int, input().split())\nSs = [input().rstrip() for _ in range(N)]\n\nC = Counter(Ss)\n\nans1 = \"\"\nonly_used = \"\"\nfor S in Ss:\n    Is = S[::-1]\n    if S != Is:\n        if Is in C and C[Is] > 0:\n            C[Is] -= 1\n            C[S] -= 1\n            ans1 += S\n    else:\n        if S in C and C[Is] > 1:\n            C[S] -= 2\n            ans1 += S\n        elif S in C and C[Is] == 1:\n            C[S] = 0\n            only_used = S\n\nans = ans1 + only_used + ans1[::-1]\nprint(len(ans))\nprint(ans)", "n, m = list(map(int, input().split()))\nk = set()\ns = \"\"\nans = \"\"\nfor i in range(n):\n    new_s = input()\n    if new_s[::-1] in k:\n        ans += new_s\n    elif new_s == new_s[::-1]:\n        s = new_s\n    k.add(new_s)\nprint(2 * len(ans) + len(s))\nprint(ans + s + ans[::-1])\n", "n, m = list(map(int, input().split()))\nstrings = []\npal = []\npairs = []\n\nfor i in range(n):\n    s = input()\n    r = s[::-1]\n    if s == r:\n        pal.append(s)\n    else:\n        if r in strings:\n            pairs.insert(0, s)\n            pairs.append(r)\n            strings.remove(r)\n        else:\n            strings.append(s)\nl = len(pairs)\nans = ''\nfor i in range(l // 2):\n    ans += pairs[i]\nif pal:\n    ans += max(pal, key=lambda a: len(a))\nfor i in range(l // 2):\n    ans += pairs[l // 2 + i]\nprint(len(ans))\nprint(ans)\n\n"]