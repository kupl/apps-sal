["def main():\n    n = int(input())\n    l = [0] * 85\n    for c in input():\n        l[ord(c)] += 1\n    a, c, g, t = sorted(l[_] for _ in (65, 67, 71, 84))\n    if g < t:\n        print(1)\n    elif c < g:\n        print(pow(2, n, 1000000007))\n    elif a < c:\n        print(pow(3, n, 1000000007))\n    else:\n        print(pow(4, n, 1000000007))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n# sys.stdin = open('in.txt')\nR = lambda: map(int, input().split())\n\nn = int(input())\ns = input()\n\nca = s.count('A')\ncg = s.count('G')\ncc = s.count('C')\nct = s.count('T')\nmx = max(ca, cg, cc, ct)\n\nsum = (ca==mx)+(cg==mx)+(cc==mx)+(ct==mx)\n\nans = 1\n\nfor i in range(n):\n    ans = (ans*sum)%1000000007\n\nprint(ans)", "n, s = input(), input()\na = {'A' : 0, 'C' : 1, 'G' : 2, 'T' : 3}\nA = [0, 0, 0, 0]\nfor x in s:\n    A[a[x]] += 1\nMOD = 10 ** 9 + 7\nprint((A.count(max(A)) ** len(s)) % MOD)\n", "n = int(input())\ns = input()\nnum = s.count(\"A\")\nnum1 = s.count(\"C\")\nnum2 = s.count(\"T\")\nnum3 = s.count(\"G\")\nnum4 = max(num,num1,num2,num3)\nnum5 = 0\nif num == num4:\n    num5 += 1\nif num1 == num4:\n    num5 += 1\nif num2 == num4:\n    num5 += 1\nif num3 == num4:\n    num5 += 1\nif num5 == 1 or n == 1:\n    print(1)\nelse:\n    print((num5**n)%(10**9+7))\n", "n = int(input())\ns = input()\na = [0] * 300\nfor i in s:\n  a[ord(i)] += 1\nprint((a.count(max(a)) ** len(s)) % (10**9 + 7))\n", "n = int(input().rstrip())\ns = str(input().rstrip())\nkol = 0\nmx = 0\nmas = [0] * 4\nfor i in range(n):\n    if s[i] == 'A': mas[0] += 1\n    if s[i] == 'C': mas[1] += 1\n    if s[i] == 'G': mas[2] += 1\n    if s[i] == 'T': mas[3] += 1\nmx = max(mas)\nkol = mas.count(mx)\nprint(kol ** n % 1000000007)", "n = int(input())\ns = input()\nlst = {'A' : 0, 'C' : 0, 'G' : 0, 'T' : 0}\nk, l = 0, 1\nfor i in s:\n    lst[i] += 1\n    if k < lst[i]:\n        k = lst[i]\n        l = 1\n    else:\n        if k == lst[i]:\n            l += 1\nprint(l ** n % (10 ** 9 + 7))\n", "n = int(input())\ns = str(input()).upper()\nprobability_max = 0\nMax = 0\nmodulo = 1000000007\nbase_acids = [0] * 4\nfor i in range(n):\n    if s[i] == 'A': base_acids[0] += 1\n    if s[i] == 'C': base_acids[1] += 1\n    if s[i] == 'G': base_acids[2] += 1\n    if s[i] == 'T': base_acids[3] += 1\nkol = base_acids.count(max(base_acids))\nprint(kol ** n % modulo)\n                       \n", "N = int(input()) \ndna = input() \n\nA_num = 0 \nC_num = 0 \nG_num = 0 \nT_num = 0 \n\nfor i in range(N): \n    if dna[i] == 'A': \n        A_num += 1 \n \n    elif dna[i] == 'C': \n        C_num += 1 \n \n    elif dna[i] == 'T': \n        T_num += 1 \n \n    else: \n        G_num += 1 \n\nnumbers = [A_num, C_num, G_num, T_num] \n\nnumbers.sort(key = lambda x: -x) \n\nif numbers[0] > numbers[1]: \n    print(1) \n\nelif numbers[1] > numbers[2]: \n    print(pow(2, N, 1000000007)) \n\nelif numbers[2] > numbers[3]: \n    print(pow(3, N, 1000000007)) \n\nelse: \n    print(pow(4, N, 1000000007)) \n", "n=int(input())\ns=input().strip()\na=s.count('T')\nb=s.count('G')\nc=s.count('C')\nd=s.count('A')\nq=max(a,b,c,d)\ne=0\nif q==a:\n    e+=1\nif q==b:\n    e+=1\nif q==c:\n    e+=1\nif q==d:\n    e+=1\nprint(e**n%1000000007)", "n = int(input())\ns = input()\na = s.count('A')\nc = s.count('C')\ng = s.count('G')\nt = s.count('T')\nq = max(a,c,g,t)\ncnt = [a,c,g,t].count(q)\nprint(pow(cnt, n, 1000000007))\n", "n = int(input())\ns = str(input()).upper()\nprobability_max = 0\nMax = 0\nmodulo = 1000000007\nbase_acids = [0] * 4\nfor i in range(n):\n    if s[i] == 'A': base_acids[0] += 1\n    if s[i] == 'C': base_acids[1] += 1\n    if s[i] == 'G': base_acids[2] += 1\n    if s[i] == 'T': base_acids[3] += 1\nkol = base_acids.count(max(base_acids))\nprint(kol ** n % modulo)\n", "n = int(input())\ns = input()\na = s.count('A')\nc = s.count('C')\ng = s.count('G')\nt = s.count('T')\nq = max(a,c,g,t)\ncnt = [a,c,g,t].count(q)\nprint(pow(cnt, n, 1000000007))", "length, dna = int(input()), input()\nnums = [dna.count('A'), dna.count('C'), dna.count('G'), dna.count('T')]\nprint((nums.count(max(nums))**length) % 1000000007)\n", "n = int(input())\ns = input()\nca = cb = cc = cd =0\nfor c in s:\n\tca += (c == 'A')\n\tcb += (c == 'C')\n\tcc += (c == 'G')\n\tcd += (c == 'T')\nm = max(ca, cb, cc, cd)\ncount = (ca == m) + (cb == m) + (cc == m) + (cd == m)\nprint((count**n) % int(1e9+7))\n", "n=int(input())\ns=input()\nca=cb=cc=cd=0\nfor c in s:\n\tca+=(c == 'A')\n\tcb+=(c == 'C')\n\tcc+=(c == 'G')\n\tcd+=(c == 'T')\nm = max(ca, cb, cc, cd)\ncount = (ca == m) + (cb == m) + (cc == m) + (cd == m)\nprint ((count**n) % int(1e9+7))", "#!/usr/bin/env python3\n\nn = int(input())\ns = input()\n\nfrom collections import defaultdict\ncount = defaultdict(int)\nfor c in s:\n    count[c] += 1\nmax_count = max(count.values())\n\nk = sum([1 for value in list(count.values()) if value == max_count])\n\nmod = 10**9 + 7\nanswer = 1\nfor i in range(n):\n    answer = answer * k % mod\n\nprint(answer)\n", "mod_by = 10**9 + 7\n\nn = int(input())\ns = input()\n\na = s.count(\"A\")\nc = s.count(\"C\")\ng = s.count(\"G\")\nt = s.count(\"T\")\n\nm = max(a,c,g,t)\nct = [a,c,g,t].count(m)\n\nprint(pow(ct, n, mod_by))", "n=int(input())\ns=input()\nx=[s.count(i) for i in ['A','C','G','T']]\n\nz=x.count(max(x))\n\nprint((z**n)%(10**9+7))\n", "n, s = int(input()), input()\nc = sorted(s.count(b) for b in 'ACGT')\nprint(c.count(c[-1]) ** n % (10 ** 9 + 7))", "n, s = int(input()), input()\nc = sorted(s.count(b) for b in 'ACGT')\nprint(pow(c.count(c[-1]), n, 10 ** 9 + 7))"]