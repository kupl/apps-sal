["from collections import defaultdict\nimport bisect\n\nn = int(input())\nx0, y0 = list(map(int, input().split(' ')))\nverticale = []\nhorizontale = []\ndiagonale1 = []\ndiagonale2 = []\nfor _ in range(n):\n    t, x, y = input().split(' ')\n    x, y = int(x), int(y)\n    if x == x0:\n        verticale.append((y, t))\n    if y == y0:\n        horizontale.append((x, t))\n    if x+y == x0+y0:\n        diagonale1.append((x, t))\n    if x-y == x0-y0:\n        diagonale2.append((x, t))\n\ndead = False\nv = sorted(verticale)\nif v:\n    l = bisect.bisect(v, (y0, 'K'))\n    if 0 < l < len(v):\n        if v[l][1] in {'Q', 'R'} or v[l-1][1] in {'Q', 'R'}:\n            dead = True\n    elif l == 0:\n        if v[0][1] in {'Q', 'R'}:\n            dead = True\n    else:\n        if v[len(v)-1][1] in {'Q', 'R'}:\n            dead = True\nv = sorted(horizontale)\nif v:\n    l = bisect.bisect(v, (x0, 'K'))\n    if 0 < l < len(v):\n        if v[l][1] in {'Q', 'R'} or v[l-1][1] in {'Q', 'R'}:\n            dead = True\n    elif l == 0:\n        if v[0][1] in {'Q', 'R'}:\n            dead = True\n    else:\n        if v[len(v)-1][1] in {'Q', 'R'}:\n            dead = True\nv = sorted(diagonale1)\nif v:\n    l = bisect.bisect(v, (x0, 'K'))\n    if 0 < l < len(v):\n        if v[l][1] in {'Q', 'B'} or v[l-1][1] in {'Q', 'B'}:\n            dead = True\n    elif l == 0:\n        if v[0][1] in {'Q', 'B'}:\n            dead = True\n    else:\n        if v[len(v)-1][1] in {'Q', 'B'}:\n            dead = True\nv = sorted(diagonale2)\nif v:\n    l = bisect.bisect(v, (x0, 'K'))\n    if 0 < l < len(v):\n        if v[l][1] in {'Q', 'B'} or v[l-1][1] in {'Q', 'B'}:\n            dead = True\n    elif l == 0:\n        if v[0][1] in {'Q', 'B'}:\n            dead = True\n    else:\n        if v[len(v)-1][1] in {'Q', 'B'}:\n            dead = True\nif dead:\n    print('YES')\nelse:\n    print('NO')\n", "from sys import stdin\n\nn = int(stdin.readline())\nx, y = map(int, stdin.readline().split())\nuld = 10 ** 10\nul = None\nud = 10 ** 10\nu = None\nurd = 10 ** 10\nur = None\nrd = 10 ** 10\nr = None\nld = 10 ** 10\nl = None\ndd = 10 ** 10\nd = None\ndrd = 10 ** 10\ndr = None\ndld = 10 ** 10\ndl = None\nfor i in range(n):\n    t, dx, dy = stdin.readline().split()\n    dx = int(dx)\n    dy = int(dy)\n    if dx == x:\n        if dy > y:\n            if ud > dy - y:\n                ud = dy - y\n                u = t\n        else:\n            if dd > y - dy:\n                dd = y - dy\n                d = t\n    if dy == y:\n        if dx > x:\n            if rd > dx - x:\n                rd = dx - x\n                r = t\n        else:\n            if ld > x - dx:\n                ld = x - dx\n                l = t\n    if dx - x == dy - y:\n        if dy > y:\n            if urd > dy - y:\n                urd = dy - y\n                ur = t\n        else:\n            if dld > y - dy:\n                dld = y - dy\n                dl = t\n    if -(dx - x) == dy - y:\n        if dy > y:\n            if uld > dy - y:\n                uld = dy - y\n                ul = t\n        else:\n            if drd > y - dy:\n                drd = y - dy\n                dr = t\n\nif 'B' in (ul, ur, dl, dr) or 'R' in (u, d, l, r) or 'Q' in (ul, ur, dl, dr, u, d, l, r):\n    print('YES')\nelse:\n    print('NO')", "def main():\n    n = int(input())\n    x, y = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(input().split())\n    for i in range(n):\n        a[i][1] = int(a[i][1]) - x\n        a[i][2] = int(a[i][2]) - y\n    typneedbql = []\n    typneedbqr = []\n    typneedbqu = []\n    typneedbqd = []\n    typneedrlu = []\n    typneedrru = []\n    typneedrld = []\n    typneedrrd = []\n    for i in range(n):\n        if (a[i][1] * a[i][2] == 0 and a[i][1] < 0):\n            typneedbql.append([abs(a[i][1] + a[i][2])] + a[i])\n        elif (a[i][1] * a[i][2] == 0 and a[i][1] > 0):\n            typneedbqr.append([abs(a[i][1] + a[i][2])] + a[i])\n        elif (a[i][1] * a[i][2] == 0 and a[i][2] > 0):\n            typneedbqu.append([abs(a[i][1] + a[i][2])] + a[i])\n        elif (a[i][1] * a[i][2] == 0 and a[i][2] < 0):\n            typneedbqd.append([abs(a[i][1] + a[i][2])] + a[i])\n        elif (abs(a[i][1] / a[i][2]) == 1 and a[i][1] < 0 and a[i][2] < 0):\n            typneedrlu.append([abs(a[i][1])] + a[i])\n        elif (abs(a[i][1] / a[i][2]) == 1 and a[i][1] < 0 and a[i][2] > 0):\n            #print(i, a[i][1], a[i][2])\n            typneedrld.append([abs(a[i][1])] + a[i])\n        elif (abs(a[i][1] / a[i][2]) == 1 and a[i][1] > 0 and a[i][2] > 0):\n            typneedrrd.append([abs(a[i][1])] + a[i])\n        elif (abs(a[i][1] / a[i][2]) == 1 and a[i][1] > 0 and a[i][2] < 0):\n            typneedrru.append([abs(a[i][1])] + a[i])\n    typneedbql.sort()\n    typneedbqr.sort()\n    typneedbqd.sort()\n    typneedbqu.sort()\n    typneedrlu.sort()\n    typneedrru.sort()\n    typneedrld.sort()\n    typneedrrd.sort()\n    #print(a)\n    #print(typneedrld)\n    for i in range(len(typneedbql)):\n        if typneedbql[i][1] == \"R\" or typneedbql[i][1] == \"Q\":\n            print(\"YES\")\n            return\n        else:\n            break\n    for i in range(len(typneedbqr)):\n        if typneedbqr[i][1] == \"R\" or typneedbqr[i][1] == \"Q\":\n            print(\"YES\")\n            return\n        else:\n            break\n    for i in range(len(typneedbqu)):\n        if typneedbqu[i][1] == \"R\" or typneedbqu[i][1] == \"Q\":\n            print(\"YES\")\n            return\n        else:\n            break\n    for i in range(len(typneedbqd)):\n        if typneedbqd[i][1] == \"R\" or typneedbqd[i][1] == \"Q\":\n            print(\"YES\")\n            return\n        else:\n            break\n    for i in range(len(typneedrlu)):\n        if typneedrlu[i][1] == \"B\" or typneedrlu[i][1] == \"Q\":\n            print(\"YES\")\n            return\n        else:\n            break\n    for i in range(len(typneedrld)):\n        if typneedrld[i][1] == \"B\" or typneedrld[i][1] == \"Q\":\n            print(\"YES\")\n            return\n        else:\n            break\n    for i in range(len(typneedrrd)):\n        if typneedrrd[i][1] == \"B\" or typneedrrd[i][1] == \"Q\":\n            print(\"YES\")\n            return\n        else:\n            break\n    for i in range(len(typneedrru)):\n        if typneedrru[i][1] == \"B\" or typneedrru[i][1] == \"Q\":\n            print(\"YES\")\n            return\n        else:\n            break\n    print(\"NO\")\nmain()\n", "n = int(input())\nkx, ky = map(int, input().split())\nnearest = [None]*8 \nfor i in range(n):\n  ft, fx, fy = input().split()\n  fx = int(fx)\n  fy = int(fy)\n  if kx == fx:\n    if ky > fy:\n      if not nearest[0] or nearest[0][1] < fy:\n        nearest[0] = (ft, fy)\n    else:\n      if not nearest[1] or nearest[1][1] > fy:\n        nearest[1] = (ft, fy)\n  elif ky == fy: \n    if kx > fx:\n      if not nearest[2] or nearest[2][1] < fx:\n        nearest[2] = (ft, fx)\n    else:\n      if not nearest[3] or nearest[3][1] > fx:\n        nearest[3] = (ft, fx)\n  elif kx + ky == fx + fy: \n    if kx - ky > fx - fy:\n      if not nearest[4] or nearest[4][1] < fx - fy:\n        nearest[4] = (ft, fx - fy)\n    else:\n      if not nearest[5] or nearest[5][1] > fx - fy:\n        nearest[5] = (ft, fx - fy)\n  elif kx - ky == fx - fy: \n    if kx + ky > fx + fy:\n      if not nearest[6] or nearest[6][1] < fx + fy:\n        nearest[6] = (ft, fx + fy)\n    else:\n      if not nearest[7] or nearest[7][1] > fx + fy:\n        nearest[7] = (ft, fx + fy)\n\nres = \"NO\"\nfor i in range(4):\n  if nearest[i] and nearest[i][0] != \"B\":\n    res = \"YES\"\nfor i in range(4,8):\n  if nearest[i] and nearest[i][0] != \"R\":\n    res = \"YES\"\nprint(res)", "n = int(input())\nxo,yo = (int(x) for x in input().split())\ninf = 1000000000000\nabove = [inf,'N']\nbelow = [inf,'N']\nleft = [inf,'N']\nright = [inf,'N']\nupright = [inf,'N']\nupleft = [inf,'N']\nbotright = [inf,'N']\nbotleft = [inf,'N']\nfor i in range(n):\n\t[T,curx,cury] = input().split()\n\tx = int(curx)\n\ty = int(cury)\n\tif x == xo:\n\t\tif y > yo and y - yo < above[0]:\n\t\t\tabove[0] = y - yo\n\t\t\tabove[1] = T\n\t\telif y < yo and yo - y < below[0]:\n\t\t\tbelow[0] = yo - y\n\t\t\tbelow[1] = T\n\telif y == yo:\n\t\tif x > xo and x - xo < right[0]:\n\t\t\tright[0] = x - xo\n\t\t\tright[1] = T\n\t\telif x < xo and xo - x < left[0]:\n\t\t\tleft[0] = xo - x\n\t\t\tleft[1] = T\n\n\tif x - xo == y - yo:\n\t\tif x > xo and x - xo < upright[0]:\n\t\t\tupright[0] = x - xo\n\t\t\tupright[1] = T\n\t\telif x < xo and xo - x < botleft[0]:\n\t\t\tbotleft[0] = xo - x\n\t\t\tbotleft[1] = T\n\telif x - xo == yo - y:\n\t\tif x > xo and x - xo < botright[0]:\n\t\t\tbotright[0] = x - xo\n\t\t\tbotright[1] = T\n\t\telif x < xo and xo - x < upleft[0]:\n\t\t\tupleft[0] = xo - x\n\t\t\tupleft[1] = T\n\n\nif botright[1] == 'B' or botright[1] == 'Q' or botleft[1] == 'B' or botleft[1] == 'Q' or upleft[1] == 'B' or upleft[1] == 'Q' or upright[1] == 'B' or upright[1] == 'Q' or above[1] == 'R' or above[1] == 'Q' or below[1] == 'R' or below[1] == 'Q' or left[1] == 'R' or left[1] == 'Q' or right[1] == 'R' or right[1] == 'Q':\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n = int(input())\nx0, y0 = [int(x) for x in input().split()]\nuv = [-1, -10**10, 'n']\ndv = [-1, 10**10, 'n']\nlh = [-10**10, -1 , 'n']\nrh = [10**10, -1, 'n']\nldd = [-10**10, -1, 'n']\nlud = [-10**10, -1, 'n']\nrdd = [10**10, -1, 'n']\nrud = [10**10, -1, 'n']\nfor i in range(n):\n    t, x, y = [x for x in input().split()]\n    x = int(x)\n    y = int(y)\n    if x == x0:\n        if y < y0:\n            if y0 - y < y0 - uv[1]:\n                uv = [x, y, t]\n        else:\n            if y - y0 < dv[1] - y0:\n                dv = [x, y, t]\n    if y == y0:\n        if x < x0:\n            if x0 - x < x0 - lh[0]:\n                lh = [x, y, t]\n        else:\n            if x - x0 < rh[0] - x0:\n                rh = [x, y, t]\n    if abs(x-x0) == abs(y-y0):\n        if x < x0 and y < y0:\n            if x0 - x < x0 - ldd[0]:\n                ldd = [x,y,t]\n        if x < x0 and y > y0:\n            if x0 - x < x0 - lud[0]:\n                lud = [x,y,t]\n        if x > x0 and y < y0:\n            if x - x0 < rdd[0] - x0:\n                rdd = [x,y,t]\n        if x > x0 and y > y0:\n            if x - x0 < rud[0] - x0:\n                rud = [x,y,t]\n\nans = 'NO'\nif uv[2] in ('R', 'Q') or dv[2] in ('R', 'Q') or lh[2] in ('R', 'Q') or rh[2] in ('R', 'Q'):\n    ans = 'YES'\n\nif ldd[2] in ('B', 'Q') or lud[2] in ('B', 'Q') or rdd[2] in ('B', 'Q') or rud[2] in ('B', 'Q'):\n    ans = 'YES'\nprint(ans)", "n = int(input())\nx0, y0 = map(int, input().split())\nNord = 10 ** 9 + 1\nfNord = '-'\nEast = 10 ** 9 + 1\nfEast = '-'\nSouth = -10 ** 9 - 1\nfSouth = '-'\nWest = -10 ** 9 - 1\nfWest = '-'\n\nNE = 10 ** 9 + 1\nfNE = '-'\nNW = 10 ** 9 + 1\nfNW = '-'\nSE = -10 ** 9 - 1\nfSE = '-'\nSW = -10 ** 9 - 1\nfSW = '-'\n\nfor i in range(n):\n    f, x, y = input().split()\n    x = int(x)\n    y = int(y)\n    if x == x0:\n        if y0 < y < Nord:\n            fNord = f\n            Nord = y\n        elif y0 > y > South:\n            fSouth = f\n            South = y\n    if y == y0:\n        if x0 < x < East:\n            fEast = f\n            East = x\n        elif x0 > x > West:\n            fWest = f\n            West = x\n            \n    if x + y == x0 + y0:\n        if y0 < y < NW:\n            fNW = f\n            NW = y\n        elif y0 > y > SE:\n            fSE = f\n            SE = y\n    if x - y == x0 - y0:\n        if y0 < y < NE:\n            fNE = f\n            NE = y\n        elif y0 > y > SW:\n            fSW = f\n            SW = y\nans  = False\nif fSW == 'Q' or fSE == 'Q' or fNW == 'Q' or fNE == 'Q':\n    ans = True\nif fNord == 'Q' or fSouth == 'Q' or fWest == 'Q' or fEast == 'Q':\n    ans = True\nif fSW == 'B' or fSE == 'B' or fNW == 'B' or fNE == 'B':\n    ans = True\nif fNord == 'R' or fSouth == 'R' or fWest == 'R' or fEast == 'R':\n    ans = True\n\n#print(fSW, fSE, fNW, fNE) \n#print(fNord, fSouth, fWest, fEast)\nprint('YES' if ans else 'NO')", "n = int(input())\n\nx, y = map(int, input().split())\n\ndirections = [None for x in range(8)]\n# u, ur, r, rd, d, dl, l, lu\n\nfor i in range(n):\n    line = input().split()\n    xi = int(line[1])\n    yi = int(line[2])\n    \n    if yi == y:\n        if xi < x:\n            #left\n            if directions[6] == None:\n                directions[6] = (xi, yi, line[0])\n            elif directions[6][0] < xi:\n                directions[6] = (xi, yi, line[0])\n        else:\n            #right\n            if directions[2] == None:\n                directions[2] = (xi, yi, line[0])\n            elif directions[2][0] > xi:\n                directions[2] = (xi, yi, line[0])\n    elif xi == x:\n        if yi < y:\n            #down\n            if directions[4] == None:\n                directions[4] = (xi, yi, line[0])\n            elif directions[4][1] < yi:\n                directions[4] = (xi, yi, line[0])\n        else:\n            #up\n            if directions[0] == None:\n                directions[0] = (xi, yi, line[0])\n            elif directions[0][1] > yi:\n                directions[0] = (xi, yi, line[0])\n    elif xi - x == yi - y:\n        if xi > x:\n            #upright\n            if directions[1] == None:\n                directions[1] = (xi, yi, line[0])\n            elif directions[1][0] > xi:\n                directions[1] = (xi, yi, line[0])\n        else:\n            #downleft\n            if directions[5] == None:\n                directions[5] = (xi, yi, line[0])\n            elif directions[5][1] < yi:\n                directions[5] = (xi, yi, line[0])\n    elif xi - x == y - yi:\n        if xi > x:\n            #rightdown\n            if directions[3] == None:\n                directions[3] = (xi, yi, line[0])\n            elif directions[3][0] > xi:\n                directions[3] = (xi, yi, line[0])\n        else:\n            #leftup\n            if directions[7] == None:\n                directions[7] = (xi, yi, line[0])\n            elif directions[7][1] > yi:\n                directions[7] = (xi, yi, line[0])\n                \nfor i in range(8):\n    if directions[i] != None:\n        if i % 2 == 0:\n            if directions[i][2] == \"R\" or directions[i][2] == \"Q\":\n                print(\"YES\")\n                return\n        else:\n            if directions[i][2] == \"B\" or directions[i][2] == \"Q\":\n                print(\"YES\") \n                return\n            \nprint(\"NO\")", "BORDER = 10 ** 10\n\ndef get_type(x, y):\n\tif x == 0:\n\t\treturn 1 if y > 0 else 5\n\tif y == 0:\n\t\treturn 3 if x > 0 else 7\n\tif x == -y:\n\t\treturn 0 if y > 0 else 4\n\tif x == y:\n\t\treturn 2 if y > 0 else 6\n\treturn -1\n\ndef __starting_point():\n\tn, = list(map(int, input().split()))\n\tx0, y0 = list(map(int, input().split()))\n\tcheck = False\n\tblock = [(-BORDER, BORDER), (0, BORDER), (BORDER, BORDER), (BORDER, 0), (BORDER, -BORDER), (0, -BORDER), (-BORDER, -BORDER), (-BORDER, 0)]\n\tkiller = [None for _ in range(8)]\n\tfor _ in range(n):\n\t\tf, xs, ys = input().split()\n\t\tx, y = list(map(int, (xs, ys)))\n\t\tx, y = x-x0, y-y0\n\t\ttp = get_type(x, y)\n\t\tif tp < 0:\n\t\t\tcontinue\n\t\tif ((f == 'B' and tp % 2 == 1) or (f == 'R' and tp % 2 == 0)):\n\t\t\tif abs(block[tp][0]) + abs(block[tp][1]) > abs(x) + abs(y):\n\t\t\t\tblock[tp] = (x, y)\n\t\telse:\n\t\t\tif abs(block[tp][0]) + abs(block[tp][1]) < abs(x) + abs(y):\n\t\t\t\tcontinue\n\t\t\tif killer[tp] is None:\n\t\t\t\tkiller[tp] = (x, y)\n\t\t\t\tcontinue\n\t\t\tif abs(killer[tp][0]) + abs(killer[tp][1]) > abs(x) + abs(y):\n\t\t\t\tkiller[tp] = (x, y)\n\t\t\t\tcontinue\n\tfor tp in range(8):\n\t\tif killer[tp] is None:\n\t\t\tcontinue\n\t\tif abs(killer[tp][0]) + abs(killer[tp][1]) < abs(block[tp][0]) + abs(block[tp][1]):\n\t\t\tcheck = True\n\t\t\tbreak\n\tif check:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\n__starting_point()", "n=int(input())\ntemp=input().split()\nx0=int(temp[0])\ny0=int(temp[1])\n\nN=['T',10**20]\nNE=['T',10**20]\nE=['T',10**20]\nSE=['T',10**20]\nS=['T',10**20]\nSW=['T',10**20]\nW=['T',10**20]\nNW=['T',10**20]\n\nfor i in range(n):\n\ttemp=input().split()\n\tx=int(temp[1])\n\ty=int(temp[2])\n\tif x-x0==0 and y-y0>0 and y-y0<N[1]:\n\t\tN=[temp[0],y-y0]\n\telif x-x0==y-y0 and x-x0>0 and x-x0<NE[1]:\n\t\tNE=[temp[0],x-x0]\n\telif y-y0==0 and x-x0>0 and x-x0<E[1]:\n\t\tE=[temp[0],x-x0]\n\telif x-x0==-(y-y0) and x-x0>0 and x-x0<SE[1]:\n\t\tSE=[temp[0],x-x0]\n\telif x-x0==0 and y-y0<0 and y0-y<S[1]:\n\t\tS=[temp[0],y0-y]\n\telif x-x0==y-y0 and x-x0<0 and x0-x<SW[1]:\n\t\tSW=[temp[0],x0-x]\n\telif y-y0==0 and x-x0<0 and x0-x<W[1]:\n\t\tW=[temp[0],x0-x]\n\telif x-x0==-(y-y0) and x-x0<0 and x0-x<NW[1]:\n\t\tNW=[temp[0],x0-x]\n\nif 'R' in [N[0],E[0],S[0],W[0]] or 'B' in [NE[0],SE[0],SW[0],NW[0]]:\n\tprint(\"YES\")\nelif 'Q' in [N[0],E[0],S[0],W[0],NE[0],SE[0],SW[0],NW[0]]:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "n = int(input())\nx, y = map(int, input().split())\nx += (10 ** 9 + 1)\ny += (10 ** 9 + 1)\narr = [[] for i in range(n)]\nfor i in range(n):\n    arr[i] = input().split()\n    arr[i][1] = int(arr[i][1]) + (10 ** 9 + 1)\n    arr[i][2] = int(arr[i][2]) + (10 ** 9 + 1)\nt1 = -1\nt2 = -1\nt3 = -1\nt4 = -1\nt5 = -1\nt6 = -1\nt7 = -1\nt8 = -1\n\nind1 = ''\nind2 = ''\nind3 = ''\nind4 = ''\nind5 = ''\nind6 = ''\nind7 = ''\nind8 = ''\n\nfor i in range(n):\n    x1 = arr[i][1]\n    y1 = arr[i][2]\n    if x1 == x:\n        if y > y1:\n            if t4 == -1:\n                t4 = y - y1\n                ind4 = arr[i][0]\n            elif (y - y1) < t4:\n                t4 = y - y1\n                ind4 = arr[i][0]\n        else:\n            if t2 == -1:\n                t2 = y1 - y\n                ind2 = arr[i][0]\n            elif y1 - y < t2:\n                t2 = y1 - y\n                ind2 = arr[i][0]\n    \n    \n    if y1 == y:\n        if x > x1:\n            if t1 == -1:\n                t1 = x - x1\n                ind1 = arr[i][0]\n            elif (x - x1) < t1:\n                t1 = x - x1\n                ind1 = arr[i][0]\n        else:\n            if t3 == -1:\n                t3 = x1 - x\n                ind3 = arr[i][0]\n            elif x1 - x < t3:\n                t3 = x1 - x\n                ind3 = arr[i][0]\n                \n    \n    if abs(x1 - x) == abs(y1 - y):\n        if y1 > y:\n            if x1 < x:\n                if t5 == -1:\n                    t5 = x - x1\n                    ind5 = arr[i][0]\n                elif(x - x1) < t5:\n                    t5 = x - x1\n                    ind5 = arr[i][0]\n            else:\n                if t6 == -1:\n                    t6 = x1 - x\n                    ind6 = arr[i][0]\n                elif(x1 - x) < t6:\n                    t6 = x1 - x\n                    ind6 = arr[i][0]\n        else:\n            if x1 < x:\n                if t8 == -1:\n                    t8 = x - x1\n                    ind8 = arr[i][0]\n                elif (x - x1) < t8:\n                    t8 = x - x1\n                    ind8 = arr[i][0]\n            else:\n                if t7 == -1:\n                    t7 = x1 - x\n                    ind7 = arr[i][0]\n                elif (x1 - x) < t7:\n                    t7 = x1 - x\n                    ind7 = arr[i][0]\nif ind1 == \"R\" or ind1 == 'Q' or ind2 == \"R\" or ind2 == 'Q' or ind3 == \"R\" or ind3 == 'Q' or ind4 == \"R\" or ind4 == 'Q' or ind5 == 'B' or ind5 == 'Q' or ind6 == 'B' or ind6 == 'Q' or ind7 == 'B' or ind7 == 'Q' or ind8 == 'B' or ind8 == 'Q':\n    print(\"YES\")\nelse:\n    print(\"NO\")", "def is_parallel(x1, y1, x2, y2):\n    return x1 == x2 or y1 == y2\n\ndef is_diagonal(x1, y1, x2, y2):\n    return abs(x1 - x2) == abs(y1 - y2)\n\nn = int(input())\nxs = input().split(\" \")\nx0 = int(xs[0])\ny0 = int(xs[1])\n\ninf = 1000000000000000000\nmins = [inf, inf, inf, inf, inf, inf, inf, inf]\n#       <-    ^    ->   v    NE   SE   SW   NW\nminx = ['B', 'B', 'B', 'B', 'R', 'R', 'R', 'R']\n\nfor i in range(0, n):\n    xs = input().split(\" \")\n    t = xs[0]\n    x = int(xs[1])\n    y = int(xs[2])\n\n    if (is_parallel(x0, y0, x, y)):\n        if (y > y0):\n            if (y - y0 < mins[1]):\n                mins[1] = y - y0\n                minx[1] = t\n        elif (y < y0):\n            if (y0 - y < mins[3]):\n                mins[3] = y0 - y\n                minx[3] = t\n        elif (x > x0):\n            if (x - x0 < mins[2]):\n                mins[2] = x - x0\n                minx[2] = t\n        else:\n            if (x0 - x < mins[0]):\n                mins[0] = x0 - x\n                minx[0] = t\n    elif (is_diagonal(x0, y0, x, y)):\n        if (x > x0 and y > y0):\n            if (x - x0 < mins[4]):\n                mins[4] = x - x0\n                minx[4] = t\n        elif (x > x0 and y < y0):\n            if (x - x0 < mins[5]):\n                mins[5] = x - x0\n                minx[5] = t\n        elif (x < x0 and y < y0):\n            if (x0 - x < mins[6]):\n                mins[6] = x0 - x\n                minx[6] = t\n        else:\n            if (x0 - x < mins[7]):\n                mins[7] = x0 - x\n                minx[7] = t\n\nif (minx[0] != 'B' or minx[1] != 'B' or minx[2] != 'B' or minx[3] != 'B' or minx[4] != 'R' or minx[5] != 'R' or minx[6] != 'R' or minx[7] != 'R'):\n    print (\"YES\")\nelse:\n    print (\"NO\")\n\n", "def main():\n    n = int(input())\n    inf = 10 ** 10\n    x0, y0 = list(map(int, input().split()))\n    h, v, d1, d2 = ([(-inf, 'K'), (0, 'K'), (inf, 'K')] for _ in range(4))\n    for _ in range(n):\n        f, x, y = input().split()\n        x = int(x) - x0\n        y = int(y) - y0\n        if not x:\n            h.append((y, f))\n        elif not y:\n            v.append((x, f))\n        elif x == y:\n            d1.append((x, f))\n        elif x == -y:\n            d1.append((x, f))\n    res = False\n    for l in h, v, d1, d2:\n        l.sort()\n    i = h.index((0, 'K'))\n    if h[i - 1][1] in \"RQ\":\n        res = True\n    if h[i + 1][1] in \"RQ\":\n        res = True\n    i = v.index((0, 'K'))\n    if v[i - 1][1] in \"RQ\":\n        res = True\n    if v[i + 1][1] in \"RQ\":\n        res = True\n    i = d1.index((0, 'K'))\n    if d1[i - 1][1] in \"BQ\":\n        res = True\n    if d1[i + 1][1] in \"BQ\":\n        res = True\n    i = d2.index((0, 'K'))\n    if d2[i - 1][1] in \"BQ\":\n        res = True\n    if d2[i + 1][1] in \"BQ\":\n        res = True\n    print((\"NO\", \"YES\")[res])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nx,y = [int(i) for i in input().split()]\n\nMIN_B = -10**9-1\nMAX_B = 10**9+1\n\nl_v = [MIN_B,0]\nu_v = [MAX_B,0]\nl_h = [MIN_B,0]\nu_h = [MAX_B,0]\nl_v1  = [MIN_B,MIN_B,0]\nu_v1 = [MAX_B,MAX_B,0]\nl_v2 = [MIN_B,MAX_B,0]\nu_v2 = [MAX_B,MIN_B,0]\n\nchess = []\n\ndef ok(type1,x1,y1,x,y):\n    if type(type1) is int:\n        return False\n    if type1 == 'R':\n        return x1 == x or y1 == y\n    elif type1 == 'B':\n        return -x1+y1 == y-x or x1+y1 == x+y\n    elif type1 == 'Q':\n        return x1 == x or y1 == y or -x1+y1 == y-x or x1+y1 == x+y\n\nfor i in range(n):\n    t1,t2,t3 = [i for i in input().split()]\n    chess.append((t1,int(t2),int(t3)))\n\nfor i in chess:\n    if i[1] == x: #vertical\n        if i[2] > y and i[2] < u_v[0]:\n            u_v = [i[2],i[0]]\n        if i[2] < y and i[2] > l_v[0]:\n            l_v = [i[2],i[0]]\n    if i[2] == y: #hori\n        if i[1] > x and i[1] < u_h[0]:\n            u_h = [i[1],i[0]]\n        if i[1] < x and i[1] > l_h[0]:\n            l_h = [i[1],i[0]]\n    if -i[1] + i[2] == y - x:\n        if (i[1] > x and i[2] > y) and (i[1] < u_v1[0] and i[2] < u_v1[1]):\n            u_v1 = [i[1],i[2],i[0]]\n        if (i[1] < x and i[2] < y) and (i[1] > l_v1[0] and i[2] > l_v1[1]):\n            l_v1 = [i[1],i[2],i[0]]\n    if i[1] + i[2] == x+y:\n        if (i[1] > x and i[2] < y) and (i[1] < u_v2[0] and i[2] > u_v2[1]):\n            u_v2 = [i[1],i[2],i[0]]\n        if (i[1] < x and i[2] > y) and (i[1] > l_v2[0] and i[2] < l_v2[1]):\n            l_v2 = [i[1],i[2],i[0]]\n\nc = False\nc = c or ok(l_v[1],x,l_v[0],x,y)\nc = c or ok(u_v[1],x,u_v[0],x,y)\nc = c or ok(l_h[1],l_h[0],y,x,y)\nc = c or ok(u_h[1],u_h[0],y,x,y)\nc = c or ok(l_v1[2],l_v1[0],l_v1[1],x,y)\nc = c or ok(u_v1[2],u_v1[0],u_v1[1],x,y)\nc = c or ok(l_v2[2],l_v2[0],l_v2[1],x,y)\nc = c or ok(u_v2[2],u_v2[0],u_v2[1],x,y)\n\nif c:\n    print('YES')\nelse:\n    print('NO')\n\n\n        \n    \n        \n        \n        \n    \n                 \n    \n\n", "import math,sys,re,itertools,pprint,collections,copy\nrs,ri,rai,raf=input,lambda:int(input()),lambda:list(map(int, input().split())),lambda:list(map(float, input().split()))\n\nn = ri()\nx0, y0 = rai()\n\nrays = [\n    [ [], lambda x, y: x == x0 and y > y0 ],             # top\n    [ [], lambda x, y: x == x0 and y < y0 ],             # bottom\n    [ [], lambda x, y: y == y0 and x > x0 ],             # right\n    [ [], lambda x, y: y == y0 and x < x0 ],             # left\n    [ [], lambda x, y: x - x0 == y - y0 and x > x0 ],    # right top\n    [ [], lambda x, y: x - x0 == y - y0 and x < x0 ],    # left bottom\n    [ [], lambda x, y: x - x0 == -(y - y0) and x > x0 ], # right bottom\n    [ [], lambda x, y: x - x0 == -(y - y0) and x < x0 ], # left top\n]\n\nfor i in range(n):\n    t = input().split()\n    x, y = int(t[1]), int(t[2])\n    t = (t[0], x, y)\n    for k, v in rays:\n        if v(x, y):\n            k.append(t)\n\ndist = lambda a: abs(x0 - a[1]) + abs(y0 - a[2])\n\nflag = False\nfor i, (k, v) in enumerate(rays):\n    k.sort(key=dist)\n    if len(k) > 0 and i > 3 and k[0][0] in \"BQ\":\n        flag = True\n        break\n    if len(k) > 0 and i <= 3 and k[0][0] in \"RQ\":\n        flag = True\n        break\n\nprint(\"YES\" if flag else \"NO\")\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom math import sqrt\nfrom copy import copy\nclass figure:\n    def __init__(self,ras=None,type=None):\n        self.ras=copy(ras)\n        self.type=type\nn=int(input())\nx0,y0=map(int,input().split())\nsup='NO'\nf=[]\nfor i in range(8):\n    d=figure(10**11)\n    f.append(d)\nfor i in range(n):\n    teg,x,y=map(str,input().split())\n    x,y=int(x),int(y)\n    if x==x0:\n        if y<y0:\n            ras=abs(y-y0)\n            if ras<f[0].ras:\n                f[0]=figure(ras,teg)\n        if y>y0:\n            ras=abs(y0-y)\n            if ras<f[1].ras:\n                f[1]=figure(ras,teg)\n    if y==y0:\n        if x>x0:\n            ras=abs(x-x0)\n            if ras<f[2].ras:\n                f[2]=figure(ras,teg)\n        if x<x0:\n            ras=abs(x0-x)\n            if ras<f[3].ras:\n                f[3]=figure(ras,teg)\n    if abs(x-x0)==abs(y-y0):\n        if y<y0 and x<x0:\n            ras=sqrt(2)*abs(x-x0)\n            if ras<f[4].ras:\n                f[4]=figure(ras,teg)\n        if y<y0 and x>x0:\n            ras=sqrt(2)*abs(x-x0)\n            if ras<f[5].ras:\n                f[5]=figure(ras,teg)\n        if y>y0 and x>x0:\n            ras=sqrt(2)*abs(x-x0)\n            if ras<f[6].ras:\n                f[6]=figure(ras,teg)\n        if y>y0 and x<x0:\n            ras=sqrt(2)*abs(x-x0)\n            if ras<f[7].ras:\n                f[7]=figure(ras,teg)\nfor i in range(8):\n    if i in [0,1,2,3]:\n        if f[i].type=='R' or f[i].type=='Q':\n            sup='YES'\n    elif i in [4,5,6,7]:\n        if f[i].type=='Q' or f[i].type=='B':\n            sup='YES'\nprint(sup)", "n = int(input())\nking_x, king_y = map(int, input().split())\nnomakers = {'Rook': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Bishop': {'left':[], 'right':[], 'up':[], 'down':[]}}\nyes = {'Queen':{'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[],'left':[], 'right':[], 'up':[], 'down':[]},'Bishop': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Rook': {'left':[], 'right':[], 'up':[], 'down':[]}}\nfor i in range(n):\n    figure, figure_x, figure_y = input().split()\n    figure_x, figure_y = int(figure_x), int(figure_y)\n    if figure == 'Q':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Queen'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x < king_x: half = 'left'\n            else: half = 'right'\n            yes['Queen'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Queen'][quarter].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i]<yes['Queen'][quarter][-1]:\n                    del yes['Queen'][quarter][-1]\n                    break\n    elif figure == 'R':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Rook'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x > king_x: half = 'right'\n            else: half = 'left'\n            yes['Rook'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            nomakers['Rook'][quarter].append(abs(figure_x - king_x))\n            i = 0\n            n = len(yes['Queen'][quarter])\n            while i < n:\n                element = yes['Queen'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Queen'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Bishop'][quarter])\n            while i < n:\n                element = yes['Bishop'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Bishop'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n    else:\n        if abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Bishop'][quarter].append(abs(figure_x - king_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i] < yes['Bishop'][quarter][-1]:\n                    del yes['Bishop'][quarter][-1]\n                    break\n        elif figure_x == king_x or figure_y == king_y:\n            if figure_y < king_y:\n                a = figure_y - king_y\n                half = 'down'\n            elif figure_y > king_y:\n                half = 'up'\n                a = figure_y - king_y\n            elif figure_x > king_x:\n                a = figure_x - king_x\n                half = 'right'\n            else:\n                a = figure_x - king_x\n                half = 'left'\n            nomakers['Bishop'][half].append(abs(a))\n            i = 0\n            n = len(yes['Rook'][half])\n            while i < n:\n                element = yes['Rook'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Rook'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Queen'][half])\n            while i < n:\n                element = yes['Queen'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Queen'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\nif len(yes['Queen']['left']) > 0 or len(yes['Queen']['right']) > 0 or len(yes['Queen']['down']) > 0 or len(yes['Queen']['up']) > 0 or len(yes['Queen']['left-up']) > 0 or len(yes['Queen']['left-down']) > 0 or len(yes['Queen']['right-up']) > 0 or len(yes['Queen']['right-down']) > 0 or len(yes['Bishop']['right-down']) > 0 or len(yes['Bishop']['right-up']) > 0 or len(yes['Bishop']['left-up']) > 0 or len(yes['Bishop']['left-down']) > 0 or len(yes['Rook']['left']) > 0 or len(yes['Rook']['right']) > 0 or len(yes['Rook']['up']) > 0 or len(yes['Rook']['down']) > 0:\n    print(\"YES\")\nelse: print(\"NO\")", "def in_ls(name_type,string):\n\tstring = string.split()\n\tstring = map(name_type, string)\n\tstring = list(string)\n\treturn string\nn = int(input())\nking = in_ls(int,input())\ncord = {}\nfor i in range(0,n):\n\tin_str = input().split()\n\tx = int(in_str[1])\n\ty = int(in_str[2])\n\tcord[(x,y)] = in_str[0]\nnearest = []\nfor i in range (0,8):\n    nearest.append((1000000000000000000, 0))\nfor el in cord.keys():\n    res = (el[0]-king[0], el[1]-king[1])\n    if res[0] == 0:\n        if res[1] > 0:\n            if abs(res[1]) < nearest[0][0]:\n                nearest[0] = (abs(res[1]), el)\n        else:\n            if abs(res[1]) < nearest[4][0]:\n                nearest[4] = (abs(res[1]), el)\n    if res[1] == 0:\n        if res[0] > 0:\n            if abs(res[0]) < nearest[6][0]:\n                nearest[6] = (abs(res[0]), el)\n        else:\n            if abs(res[0]) < nearest[2][0]:\n                nearest[2] = (abs(res[0]), el)\n    if abs(res[0]) == abs(res[1]):\n        if res[0] > 0 and res[1] > 0:\n            if abs(res[0]) < nearest[7][0]:\n                nearest[7] = (abs(res[0]), el)\n        if res[0] < 0 and res[1] > 0:\n            if abs(res[0]) < nearest[1][0]:\n                nearest[1] = (abs(res[0]), el)\n        if res[0] < 0 and res[1] < 0:\n            if abs(res[0]) < nearest[3][0]:\n                nearest[3] = (abs(res[0]), el)\n        if res[0] > 0 and res[1] < 0:\n            if abs(res[0]) < nearest[5][0]:\n                nearest[5] = (abs(res[0]), el)\ncheck = False\nfor i in range (8):\n    if nearest[i][1] != 0:\n        if i in [1,3,5,7]:\n            if cord[nearest[i][1]] == \"Q\" or cord[nearest[i][1]] == \"B\":\n                check = True\n        else:\n            if cord[nearest[i][1]] == \"R\" or cord[nearest[i][1]] == \"Q\":\n                check = True\n\nif check:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "def dist(cur, king):\n    distance = abs(cur[0] - king[0]) ** 2 + abs(cur[1] - king[1]) ** 2\n    direction = ''\n    if cur[0] > king[0]:\n        direction += 'l'\n    elif cur[0] < king[0]:\n        direction += 'r'\n\n    if cur[1] > king[1]:\n        direction += 'u'\n    elif cur[1] < king[1]:\n        direction += 'd'\n\n    return distance, direction\n\n\namount = int(input())\n\nking = input().split()\nking = [int(k) for k in king]\n\nall_figurs = {}\nfigurs = {}\nfor i in range(amount):\n    figura = input().split()\n    all_figurs[(int(figura[1]), int(figura[2]))] = figura[0]\n\nfor key in all_figurs.keys():\n    if key[0] == king[0] or key[1] == king[1] or abs(king[0] - key[0]) == abs(king[1] - key[1]):\n        figurs[key] = all_figurs[key]\n\nnearest = {k:(10**100, '?')  for k in ['l', 'lu', 'ld', 'r', 'ru', 'rd', 'u', 'd']}\n\nfor key in figurs.keys():\n    distance, direction = dist(key, king)\n    if nearest[direction][0] > distance:\n        nearest[direction] = (distance, figurs[key])\n\nis_shah = False\n\nfor key in nearest.keys():\n    if nearest[key][1] in ['Q', 'B'] and len(key) == 2:\n        is_shah = True\n        break\n    if nearest[key][1] in ['Q', 'R'] and len(key) == 1:\n        is_shah = True\n        break\n\n\nif is_shah:\n    print('YES')\nelse:\n    print('NO')", "MAX_NUM = 10**9\nn = int(input())\nking_x, king_y = map(int, input().split())\nnomakers = {'Rook': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Bishop': {'left':[], 'right':[], 'up':[], 'down':[]}}\nyes = {'Queen':{'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[],'left':[], 'right':[], 'up':[], 'down':[]},'Bishop': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Rook': {'left':[], 'right':[], 'up':[], 'down':[]}}\nfor i in range(n):\n    figure, figure_x, figure_y = input().split()\n    figure_x, figure_y = int(figure_x), int(figure_y)\n    if figure == 'Q':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Queen'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x < king_x: half = 'left'\n            else: half = 'right'\n            yes['Queen'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Queen'][quarter].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i]<yes['Queen'][quarter][-1]:\n                    del yes['Queen'][quarter][-1]\n                    break\n    elif figure == 'R':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Rook'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x > king_x: half = 'right'\n            else: half = 'left'\n            yes['Rook'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            nomakers['Rook'][quarter].append(abs(figure_x - king_x))\n            i = 0\n            n = len(yes['Queen'][quarter])\n            while i < n:\n                element = yes['Queen'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Queen'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Bishop'][quarter])\n            while i < n:\n                element = yes['Bishop'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Bishop'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n    else:\n        if abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Bishop'][quarter].append(abs(figure_x - king_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i] < yes['Bishop'][quarter][-1]:\n                    del yes['Bishop'][quarter][-1]\n                    break\n        elif figure_x == king_x or figure_y == king_y:\n            if figure_y < king_y:\n                a = figure_y - king_y\n                half = 'down'\n            elif figure_y > king_y:\n                half = 'up'\n                a = figure_y - king_y\n            elif figure_x > king_x:\n                a = figure_x - king_x\n                half = 'right'\n            else:\n                a = figure_x - king_x\n                half = 'left'\n            nomakers['Bishop'][half].append(abs(a))\n            i = 0\n            n = len(yes['Rook'][half])\n            while i < n:\n                element = yes['Rook'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Rook'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Queen'][half])\n            while i < n:\n                element = yes['Queen'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Queen'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\nif len(yes['Queen']['left']) > 0 or len(yes['Queen']['right']) > 0 or len(yes['Queen']['down']) > 0 or len(yes['Queen']['up']) > 0 or len(yes['Queen']['left-up']) > 0 or len(yes['Queen']['left-down']) > 0 or len(yes['Queen']['right-up']) > 0 or len(yes['Queen']['right-down']) > 0 or len(yes['Bishop']['right-down']) > 0 or len(yes['Bishop']['right-up']) > 0 or len(yes['Bishop']['left-up']) > 0 or len(yes['Bishop']['left-down']) > 0 or len(yes['Rook']['left']) > 0 or len(yes['Rook']['right']) > 0 or len(yes['Rook']['up']) > 0 or len(yes['Rook']['down']) > 0:\n    print(\"YES\")\nelse: print(\"NO\")", "MAX_NUM = 10**9\nn = int(input())\nking_x, king_y = [int(x) for x in input().split()]\nnomakers = {'Rook': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Bishop': {'left':[], 'right':[], 'up':[], 'down':[]}}\nyes = {'Queen':{'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[],'left':[], 'right':[], 'up':[], 'down':[]},'Bishop': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Rook': {'left':[], 'right':[], 'up':[], 'down':[]}}\nfor i in range(n):\n    figure, figure_x, figure_y = input().split()\n    figure_x, figure_y = [int(x) for x in [figure_x, figure_y]]\n    if figure == 'Q':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Queen'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x < king_x: half = 'left'\n            else: half = 'right'\n            yes['Queen'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Queen'][quarter].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i]<yes['Queen'][quarter][-1]:\n                    del yes['Queen'][quarter][-1]\n                    break\n    elif figure == 'R':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Rook'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x > king_x: half = 'right'\n            else: half = 'left'\n            yes['Rook'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            nomakers['Rook'][quarter].append(abs(figure_x - king_x))\n            i = 0\n            n = len(yes['Queen'][quarter])\n            while i < n:\n                element = yes['Queen'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Queen'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Bishop'][quarter])\n            while i < n:\n                element = yes['Bishop'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Bishop'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n    else:\n        if abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Bishop'][quarter].append(abs(figure_x - king_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i] < yes['Bishop'][quarter][-1]:\n                    del yes['Bishop'][quarter][-1]\n                    break\n        elif figure_x == king_x or figure_y == king_y:\n            if figure_y < king_y:\n                a = figure_y - king_y\n                half = 'down'\n            elif figure_y > king_y:\n                half = 'up'\n                a = figure_y - king_y\n            elif figure_x > king_x:\n                a = figure_x - king_x\n                half = 'right'\n            else:\n                a = figure_x - king_x\n                half = 'left'\n            nomakers['Bishop'][half].append(abs(a))\n            i = 0\n            n = len(yes['Rook'][half])\n            while i < n:\n                element = yes['Rook'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Rook'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Queen'][half])\n            while i < n:\n                element = yes['Queen'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Queen'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\nif len(yes['Queen']['left']) > 0 or len(yes['Queen']['right']) > 0 or len(yes['Queen']['down']) > 0 or len(yes['Queen']['up']) > 0 or len(yes['Queen']['left-up']) > 0 or len(yes['Queen']['left-down']) > 0 or len(yes['Queen']['right-up']) > 0 or len(yes['Queen']['right-down']) > 0 or len(yes['Bishop']['right-down']) > 0 or len(yes['Bishop']['right-up']) > 0 or len(yes['Bishop']['left-up']) > 0 or len(yes['Bishop']['left-down']) > 0 or len(yes['Rook']['left']) > 0 or len(yes['Rook']['right']) > 0 or len(yes['Rook']['up']) > 0 or len(yes['Rook']['down']) > 0:\n    print(\"YES\")\nelse: print(\"NO\")", "MAX_NUM = 10**9\nn = int(input())\nking_x, king_y = map(int, input().split())\nnomakers = {'Rook': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Bishop': {'left':[], 'right':[], 'up':[], 'down':[]}}\nyes = {'Queen':{'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[],'left':[], 'right':[], 'up':[], 'down':[]},'Bishop': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Rook': {'left':[], 'right':[], 'up':[], 'down':[]}}\nfor i in range(n):\n    figure, figure_x, figure_y = input().split()\n    figure_x, figure_y = map(int, [figure_x,figure_y])\n    if figure == 'Q':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Queen'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x < king_x: half = 'left'\n            else: half = 'right'\n            yes['Queen'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Queen'][quarter].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i]<yes['Queen'][quarter][-1]:\n                    del yes['Queen'][quarter][-1]\n                    break\n    elif figure == 'R':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Rook'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x > king_x: half = 'right'\n            else: half = 'left'\n            yes['Rook'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            nomakers['Rook'][quarter].append(abs(figure_x - king_x))\n            i = 0\n            n = len(yes['Queen'][quarter])\n            while i < n:\n                element = yes['Queen'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Queen'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Bishop'][quarter])\n            while i < n:\n                element = yes['Bishop'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Bishop'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n    else:\n        if abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Bishop'][quarter].append(abs(figure_x - king_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i] < yes['Bishop'][quarter][-1]:\n                    del yes['Bishop'][quarter][-1]\n                    break\n        elif figure_x == king_x or figure_y == king_y:\n            if figure_y < king_y:\n                a = figure_y - king_y\n                half = 'down'\n            elif figure_y > king_y:\n                half = 'up'\n                a = figure_y - king_y\n            elif figure_x > king_x:\n                a = figure_x - king_x\n                half = 'right'\n            else:\n                a = figure_x - king_x\n                half = 'left'\n            nomakers['Bishop'][half].append(abs(a))\n            i = 0\n            n = len(yes['Rook'][half])\n            while i < n:\n                element = yes['Rook'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Rook'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Queen'][half])\n            while i < n:\n                element = yes['Queen'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Queen'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\nif len(yes['Queen']['left']) > 0 or len(yes['Queen']['right']) > 0 or len(yes['Queen']['down']) > 0 or len(yes['Queen']['up']) > 0 or len(yes['Queen']['left-up']) > 0 or len(yes['Queen']['left-down']) > 0 or len(yes['Queen']['right-up']) > 0 or len(yes['Queen']['right-down']) > 0 or len(yes['Bishop']['right-down']) > 0 or len(yes['Bishop']['right-up']) > 0 or len(yes['Bishop']['left-up']) > 0 or len(yes['Bishop']['left-down']) > 0 or len(yes['Rook']['left']) > 0 or len(yes['Rook']['right']) > 0 or len(yes['Rook']['up']) > 0 or len(yes['Rook']['down']) > 0:\n    print(\"YES\")\nelse: print(\"NO\")", "MAX_NUM = 10**9\nMIN_NUM = -10**9\nn = int(input())\nking_x, king_y = map(int, input().split())\nnomakers = {'Rook': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Bishop': {'left':[], 'right':[], 'up':[], 'down':[]}}\nyes = {'Queen':{'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[],'left':[], 'right':[], 'up':[], 'down':[]},'Bishop': {'right-down':[], 'right-up':[], 'left-down':[], 'left-up':[]}, 'Rook': {'left':[], 'right':[], 'up':[], 'down':[]}}\nfor i in range(n):\n    figure, figure_x, figure_y = input().split()\n    figure_x, figure_y = int(figure_x), int(figure_y)\n    if figure == 'Q':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Queen'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x < king_x: half = 'left'\n            else: half = 'right'\n            yes['Queen'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Queen'][half][-1]:\n                    del yes['Queen'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Queen'][quarter].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i]<yes['Queen'][quarter][-1]:\n                    del yes['Queen'][quarter][-1]\n                    break\n    elif figure == 'R':\n        if figure_x == king_x:\n            if figure_y < king_y: half = 'down'\n            else: half = 'up'\n            yes['Rook'][half].append(abs(king_y - figure_y))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif figure_y == king_y:\n            if figure_x > king_x: half = 'right'\n            else: half = 'left'\n            yes['Rook'][half].append(abs(king_x - figure_x))\n            for i in range(len(nomakers['Bishop'][half])):\n                if nomakers['Bishop'][half][i]<yes['Rook'][half][-1]:\n                    del yes['Rook'][half][-1]\n                    break\n        elif abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            nomakers['Rook'][quarter].append(abs(figure_x - king_x))\n            i = 0\n            n = len(yes['Queen'][quarter])\n            while i < n:\n                element = yes['Queen'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Queen'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Bishop'][quarter])\n            while i < n:\n                element = yes['Bishop'][quarter][i]\n                if nomakers['Rook'][quarter][-1] < element:\n                    del yes['Bishop'][quarter][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n    else:\n        if abs(figure_x - king_x) == abs(figure_y - king_y):\n            if figure_x > king_x:\n                if figure_y > king_y: quarter = 'right-up'\n                else: quarter = 'right-down'\n            else:\n                if figure_y > king_y: quarter = 'left-up'\n                else: quarter = 'left-down'\n            yes['Bishop'][quarter].append(abs(figure_x - king_x))\n            for i in range(len(nomakers['Rook'][quarter])):\n                if nomakers['Rook'][quarter][i] < yes['Bishop'][quarter][-1]:\n                    del yes['Bishop'][quarter][-1]\n                    break\n        elif figure_x == king_x or figure_y == king_y:\n            if figure_y < king_y:\n                a = figure_y - king_y\n                half = 'down'\n            elif figure_y > king_y:\n                half = 'up'\n                a = figure_y - king_y\n            elif figure_x > king_x:\n                a = figure_x - king_x\n                half = 'right'\n            else:\n                a = figure_x - king_x\n                half = 'left'\n            nomakers['Bishop'][half].append(abs(a))\n            i = 0\n            n = len(yes['Rook'][half])\n            while i < n:\n                element = yes['Rook'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Rook'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\n            i = 0\n            n = len(yes['Queen'][half])\n            while i < n:\n                element = yes['Queen'][half][i]\n                if nomakers['Bishop'][half][-1] < element:\n                    del yes['Queen'][half][i]\n                    n = n - 1\n                else:\n                    i = i + 1\nif len(yes['Queen']['left']) > 0 or len(yes['Queen']['right']) > 0 or len(yes['Queen']['down']) > 0 or len(yes['Queen']['up']) > 0 or len(yes['Queen']['left-up']) > 0 or len(yes['Queen']['left-down']) > 0 or len(yes['Queen']['right-up']) > 0 or len(yes['Queen']['right-down']) > 0 or len(yes['Bishop']['right-down']) > 0 or len(yes['Bishop']['right-up']) > 0 or len(yes['Bishop']['left-up']) > 0 or len(yes['Bishop']['left-down']) > 0 or len(yes['Rook']['left']) > 0 or len(yes['Rook']['right']) > 0 or len(yes['Rook']['up']) > 0 or len(yes['Rook']['down']) > 0:\n    print(\"YES\")\nelse: print(\"NO\")"]