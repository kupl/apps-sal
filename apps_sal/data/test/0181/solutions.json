["n = (-int(input())) % 360\n\nret, opt = 4, 361\nfor i in range(4):\n    x = (n+90*i)%360\n    x = min(x, 360-x)\n    if (x, i) < (opt, ret):\n        opt, ret = x, i\n\nprint(ret)", "from functools import reduce\nfrom math import factorial\nn = (int(input()) + 45) % 360\nprint(n // 90 - (n > 0 and n%90 == 0))\n\n", "n=int(input())%360\nif n<=45: print(0)\nelif n<=90+45: print(1)\nelif n<=180+45: print(2)\nelif n<270+45: print(3)\nelse: print(0)\n", "def sign(x):\n    return 1 if x > 0 else -1\n\ndef dis(x):\n    if x >= 360:\n        x %= 360\n\n    if x <= -180:\n        return 360 + x\n    elif x <= 0:\n        return abs(x)\n    elif x <= 180:\n        return x\n    else:\n        return 360-x\n\ndef __starting_point():\n\n    x = int(input())\n    x = (-sign(x))*(abs(x)%360)\n    #print(x)\n\n    mindis = dis(x)\n    res = 0\n\n    for i in range(1,4):\n        newdis = dis(x+90*i)\n        if newdis < mindis:\n            mindis = newdis\n            res = i\n\n    print(res)\n\n__starting_point()", "def f(x):\n    assert(0 <= x <= 360)\n    return min(x, 360 - x)\n\ndef main():\n    x = int(input())\n    a, b, c, d = -x, -x+90, -x+180, -x+270\n    a, b, c, d = a%360, b%360, c%360, d%360\n    a, b, c, d = f(a), f(b), f(c), f(d)\n    L = [(a, 0), (b, 1), (c, 2), (d, 3)]\n    L.sort()\n    print(L[0][1])\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nn = int(sys.stdin.readline())\nn %= 360\n\n_0 = min(360 - n, n)\nn = (n - 90) % 360\n_1 = min(360 - n, n)\nn = (n - 90) % 360\n_2 = min(360 - n, n)\nn = (n - 90) % 360\n_3 = min(360 - n, n)\n\nif (_0 <= min(_1, min(_2, _3))):\n    print(0)\n    return\nif (_1 <= min(_0, min(_2, _3))):\n    print(1)\n    return\nif (_2 <= min(_1, min(_0, _3))):\n    print(2)\n    return\nif (_3 <= min(_1, min(_2, _0))):\n    print(3)\n    return", "x = -int(input()) % 360\n\nl = [x, x+90, x+180, x+270]\nl = [min(x%360, (-x)%360) for x in l]\nm = min(l)\n#print(l)\nprint(l.index(m))\n\n", "n = int(input())\nn=(n*-1)%360\n\nminVueltas = -1\nminValor = -1\nfor i in range(4):\n    temp = (n+90*i)%360\n    if temp>180:\n        temp = 360-temp\n    if minValor==-1 or temp<minValor:\n        minVueltas=i\n        minValor=temp\nprint(minVueltas)\n", "n = int(input())\nn += 3600000000000000000\nn %= 360\n\nif n <= 45:\n    print(0)\nelif n <= 135:\n    print(1)\nelif n <= 225:\n    print(2)\nelif n < 315:\n    print(3)\nelse:\n    print(0)", "x = int(input())\nx = x % 360\nif (x <= 45 or x >= 315):\n    print(0)\nelif (x >= 45 and x <= 135):\n    print(1)\nelif (x >= 135 and x <= 225):\n    print(2)\nelse:\n    print(3)\n", "n = (360 + int(input()) % 360) % 360\n\nans = 0\nbres = n\n\nfor i in range(1, 5):\n    d = (360 + (n - i * 90) % 360) % 360\n    if min(d, 360 - d) < min(bres, 360 - bres):\n        bres = d\n        ans = i\n\nprint(ans)", "n = (int(input())+45)%360\nif n%90==0 and n!=0:\n    print(n//90-1)\nelse:\n    print(n//90)\n", "n = int(input()) % 360\nif 45 < n <= 135:\n    print(1)\nelif 135 < n <= 225:\n    print(2)\nelif 225 < n < 315:\n    print(3)\nelse:\n    print(0)\n", "import math, re, sys, string, operator, functools, fractions, collections\nsys.setrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda x=' ': list(map(int,input().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\nmod=int(1e9+7)\neps=1e-6\n#################################################\nx=RI()[0]\nx%=360\nif x>180:\n    x=x-360\nans=0\nval=abs(x)\nfor i in range(1,4):\n    x-=90\n    if x<-180:\n        x=360+x\n    if abs(x)<val:\n        val=abs(x)\n        ans=i\nprint(ans)\n\n\n\n", "n = int(input())\nans = 0\nn %= 360\n\nif n <= 45 or n >= 270:\n    ans = 0\nif n > 45 and n <= 135:\n    ans = 1\nif n > 135 and n <= 225:\n    ans = 2\nif n > 225 and n < 315:\n    ans = 3\nprint(ans)\n", "n=int(input())\nn+=3600000000000000000000\nx=n%360\nif (x<=45):\n\tprint(0)\nelif (x<=135):\n\tprint(1)\nelif (x<=225):\n\tprint(2)\nelif (x<315):\n\tprint(3)\nelif (x>=315):\n\tprint(0)", "import sys\n\n\ndef chet(a, b):\n    ans = (b - a) // 2\n    if b % 2 == 0 or a % 2 == 0:\n        ans += 1\n    return ans\n\n\ndef nechet(a, b):\n    ans = (b - a) // 2\n    if b % 2 == 1 or a % 2 == 1:\n        ans += 1\n    return ans\n\n\ndef ans(a, b, c, d):\n    return chet(a, c) * chet(b, d) + nechet(a, c) * nechet(b, d)\n\n\nn = int(input())\nras = n // 360\nk = n - 360 * ras\nost = (k + 45) % 90\nd = (k + 45) // 90\nans = d if (ost > 0 or d % 4 == 0) else d - 1\nprint(ans % 4)\n\n\n\n\n\n\n", "x = (int(input()) + 360 * 10 ** 18) % 360\n\nif x <= 45 or x >= 315:\n    print(0)\nelif x <= 135:\n    print(1)\nelif x <= 225:\n    print(2)\nelse:\n    print(3)", "import math\n\nx=int(input())\nx %= 360\nx = 360-x\ncurnum=x\nfor i in range(4):\n\tif curnum <= 45:\n\t\tprint(i)\n\t\tquit()\n\tif 360-curnum <= 45:\n\t\tprint(i)\n\t\tquit()\n\tcurnum = (curnum+90) % 360", "angle = int(input())\nangle = (angle % 360 + 360) % 360\nangle = (angle + 44) % 360\nanswer = (angle % 359) // 90\nprint(answer)", "n = int(input())\n\nt = n - (n // 360) * 360\ni = 0\nwhile not (-45 <= t <= 45 or 315 <= t <= 360):\n\ti += 1\n\tt -= 90\nprint(i)\n", "import sys\nimport math\n# sys.stdin = open('input.txt')\n# sys.stdout = open('output.txt', 'w')\n\ndef main():\n    n = int(input())\n    n = -n\n    n %= 360\n    a = n\n    a1 = 360 - a\n    b = (a + 90) % 360    \n    b1 = 360 - b\n    c = (b + 90) % 360\n    c1 = 360 - c\n    d = (c + 90) % 360\n    d1 = 360 - d\n    ans = min([a, a1, b, b1, c, c1, d, d1])\n    if a == ans or a1 == ans:\n        print(0)\n    elif b == ans or b1 == ans:\n        print(1)\n    elif c == ans or c1 == ans:\n        print(2)\n    elif d == ans or d1 == ans:\n        print(3)\n\nmain()"]