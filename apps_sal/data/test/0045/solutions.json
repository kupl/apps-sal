["n, k = map(int, input().split())\ndiv = []\ni = 1\nn1 = n\nwhile i * i <= n:\n    if n % i == 0:\n        div.append(i)\n        div.append(n // i)\n    i += 1\ndiv.sort()\nmx = -1\nfor i in range(len(div)):\n    a = div[i] * k * (k + 1) // 2\n    if a <= n:\n        mx = div[i]\nif mx == -1:\n    print(-1)\nelse:\n    for i in range(k - 1):\n        print(mx * (i + 1), end= \" \")\n    print(n - mx * k * (k - 1) // 2)\n\n    ", "import sys\n\ninf = 1 << 30\n\ndef solve():\n    n, k = map(int, input().split())\n\n    lim = k * (k + 1) // 2\n\n    if n < lim:\n        print(-1)\n        return\n\n    d_max = 1\n\n    for d in range(1, n + 1):\n        if d*d > n:\n            break\n        if n % d != 0:\n            continue\n\n        q = n // d\n\n        if d >= lim:\n            d_max = q\n            break\n        elif q >= lim:\n            d_max = d\n        else:\n            break\n\n    ans = []\n    j = 1\n\n    for i in range(k - 1):\n        ans.append(d_max * j)\n        j += 1\n\n    ans.append(n - sum(ans))\n\n    print(*ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "def factor(n):\n    rtn = []\n    p = 2\n    tmp = n\n    while p * p <= tmp:\n        q = 0\n        while tmp % p == 0:\n            tmp //= p\n            q += 1\n        if 0 < q:\n            rtn.append((p, q))\n        p += 1\n    if 1 < tmp:\n        rtn.append((tmp, 1))\n    return rtn\n\ndef divs(n):\n    rtn = [1]\n    arr = factor(n)\n    for p, q in arr:\n        ds = [p**i for i in range(1, q + 1)]\n        tmp = rtn[:]\n        for d in ds:\n            for t in tmp:\n                rtn.append(d * t)\n    return list(sorted(rtn))\n\nn, k = list(map(int, input().split()))\nds = divs(n)\nl = 0\nr = len(ds) - 1\nwhile l + 1 < r:\n    c = (l + r) // 2\n    if ds[c] * k * (k + 1) // 2 <= n:\n        l = c\n    else:\n        r = c\n\nif l == 0 and n < k * (k + 1) // 2:\n    print(-1)\nelse:\n    d = ds[l]\n    ans = [d * (i + 1) for i in range(k)]\n    ans[-1] += n - sum(ans)\n    print(' '.join(map(str, ans)))\n\n", "import math\nn, k = map(int, input().split())\nif (k*(k+1))/2 > n:\n    print(-1)\n\nelse:\n    c = int( n/ ((k*(k+1))/2))\n    a = []\n    for i in range(1, int( math.sqrt(n) + 1 ) ):\n        if i*i == n:\n            a.append(i)\n        elif n%i == 0:\n            a.append(i)\n            a.append(n//i)\n            \n    a = sorted(a)\n    s = 0\n    for i in range(len(a)):\n        s+=1\n        if a[i] > c:\n           break \n    c = a[ s - 2]\n    for i in range(1, k):\n        print(c*i, end= \" \")\n    print(str( int(n - c*(k*(k-1)/2)  ) ))\n", "import math\nn, k = list(map(int, input().split()))\nif (k*(k+1))/2 > n:\n    print(-1)\n\nelse:\n    c = int( n/ ((k*(k+1))/2))\n    a = []\n    for i in range(1, int( math.sqrt(n) + 1 ) ):\n        if i*i == n:\n            a.append(i)\n        elif n%i == 0:\n            a.append(i)\n            a.append(n//i)\n            \n    a = sorted(a)\n    s = 0\n    for i in range(len(a)):\n        s+=1\n        if a[i] > c:\n           break \n    c = a[ s - 2]\n\n    ans = list(map(str, list(range(c, c*k, c)) ))\n    ans.append( str( int(n - c*(k*(k-1)/2)  ) ))\n    print(\" \".join(ans))\n", "n, k = map(int, input().split())\ndiv = []\ni = 1\nn1 = n\nwhile i * i <= n:\n    if n % i == 0:\n        div.append(i)\n        div.append(n // i)\n    i += 1\ndiv.sort()\nmx = -1\nfor i in range(len(div)):\n    a = div[i] * k * (k + 1) // 2\n    if a <= n:\n        mx = div[i]\nif mx == -1:\n    print(-1)\nelse:\n    for i in range(k - 1):\n        print(mx * (i + 1), end= \" \")\n    print(n - mx * k * (k - 1) // 2)", "def to_str(arr):\n    if arr == -1:\n        return -1\n    for i in range(len(arr)):\n        arr[i] = str(arr[i])\n    return ' '.join(arr)\n\n\ndef get_seq(n, k, mult=1):\n    if n < round(k * (k + 1) / 2):\n        return -1\n    ans = []\n    for i in range(k):\n        ans.append((i + 1) * mult)\n    ans[k - 1] = (n - round(k * (k - 1) / 2)) * mult\n    return ans\n\n\ndef get_seq_new(n, k):\n    if n < round(k * (k + 1) / 2):\n        return -1\n\n    pre_val = []\n\n    for num in range(2, round(n ** 0.5) + 1):\n        if n % num == 0:\n            if num >= round(k * (k + 1) / 2):\n                return get_seq(num, k, round(n / num))\n            if round(n / num) >= round(k * (k + 1) / 2):\n                pre_val = get_seq(round(n / num), k, num)\n    if len(pre_val) > 0:\n        return pre_val\n    return get_seq(n, k)\n\n\ns = input()\nn = int(s.split(' ')[0])\nk = int(s.split(' ')[1])\nprint(to_str(get_seq_new(n, k)))\n", "import sys\n\ninf = 1 << 30\n\ndef solve():\n    n, k = map(int, input().split())\n\n    # list divisors of n\n    a = []\n    b = []\n\n    for d in range(1, n + 1):\n        if d*d > n:\n            break\n        if n % d != 0:\n            continue\n\n        a.append(d)\n        b.append(n // d)\n\n    b.reverse()\n\n    if a[-1] == b[0]:\n        divs = a + b[1:]\n    else:\n        divs = a + b\n\n    # main process\n\n    d_m = -1\n    need = k * (k + 1) // 2\n\n    for d in divs:\n        q = n // d\n\n        if q >= need:\n            d_m = d\n        else:\n            break\n\n    if d_m == -1:\n        print(-1)\n    else:\n        ans = [0]*k\n\n        for i in range(k - 1):\n            ans[i] = (i + 1) * d_m\n\n        ans[-1] = n - d_m * k * (k - 1) // 2\n\n        print(*ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "import math\n\ndef divisorGenerator(n):\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                large_divisors.append(n / i)\n    for divisor in reversed(large_divisors):\n        yield divisor\n\n\n    \n        \ndef result(n,k):\n    Main = []\n    Last = n\n    for i in range(1,n*2):\n        if k==1:\n            break\n        Main.append(i)\n        Last -= i\n        k -= 1\n    Main.append(Last)\n    return Main\n    \nn,k = list(map(int,input().split()))\ndivisors = list(divisorGenerator(n))\nfor i in range(len(divisors)):\n    divisors[i] = int(divisors[i])\n    \nkk = (k**2+k)//2\nif n<kk:\n    print(-1)\nelse:\n    oo = n//(kk)\n    pp = 1\n    for i in divisors:\n        if i <= oo:\n            pp = i\n    oo = pp\n    w = result(n//oo,k)\n    s = \"\"\n    for i in w:\n        s += \" \"+str(i*oo)\n    print(s[1:])\n            \n    \n        \n            \n                \n    \n", "import sys\nimport math\nn, k = map(int, input().split())\nx =(k * (k + 1)) // 2\ncur = 1\ns = math.sqrt(n)\ndiv = 0\nwhile( cur <= s):\n    if( n % cur == 0):\n        if(n // cur >= x):\n            div = max(div, cur)\n        if(cur >= x):\n            div = max(div, n // cur)\n    cur += 1\nif(div == 0):\n    print(-1)\n    return\nrest = n // div\nfor i in range(1,k + 1):\n    if( i == k):\n        print( div * rest, end = ' ')\n    else:\n        print(div * i, end = ' ')\n    rest -= i", "from math import sqrt\n\nn , k = (int(i) for i in input().split())\n\ndef Provera (n, k):\n\tif (k * (k + 1)) // 2 > n:\n\t\treturn True\n\nif (Provera(n,k)):\n\tprint (-1)\n\treturn\n\nfor i in range(2, int(sqrt(n)) + 1):\n\tif (n % i == 0):\n\t\tNZD = n // i\n\t\tif not (Provera (i , k)):\n\t\t\tif (k * (k + 1)) // 2  == i:\n\t\t\t\tfor j in range(1, k + 1):\n\t\t\t\t\tprint (NZD * j,end = ' ')\n\t\t\t\treturn\n\t\t\tif (k * (k + 1)) // 2  < i:\n\t\t\t\tfor j in range(1, k):\n\t\t\t\t\tprint (NZD  * j,end = ' ')\n\t\t\t\tprint (n - NZD * ((k * (k - 1)) // 2))\n\t\t\t\treturn\nfor i in range(int(sqrt(n)) + 1, 0, -1):\n\tif (n % i == 0):\n\t\tif not (Provera (n // i , k)):\n\t\t\tif (k * (k + 1)) // 2  ==  (n // i):\n\t\t\t\tfor j in range(1, k + 1):\n\t\t\t\t\tprint (i * j,end = ' ')\n\t\t\t\treturn\n\t\t\tif (k * (k + 1)) // 2  < (n // i):\n\t\t\t\tfor j in range(1, k):\n\t\t\t\t\tprint (i  * j,end = ' ')\n\t\t\t\tprint (n - i * ((k * (k - 1)) // 2))\n\t\t\t\treturn\nif (k * (k + 1)) // 2 == n:\n\tfor i in range(1, k + 1):\n\t\tprint (i, end = ' ')\nelse:\n\tfor i in range(1, k):\n\t\tprint (i, end = ' ')\n\tprint (n - (k * (k - 1)) // 2)", "n, k = list(map(int, input().split()))\nd = k*(k+1)//2\nif n < d:\n  print(-1)\nelse:\n  u = 1\n  for j in range(1, int(n**0.5)+2):\n    if n % j == 0:\n      jj = n // j \n      if j >= d and jj > u:\n        u = jj\n      elif jj >= d and j > u: \n        u = j\n  res = [u*i for i in range(1, k)]\n  res.append(n - sum(res))\n  print(*res)\n      \n  \n", "N, K = map( int, input().split() )\nif K * ( K + 1 ) // 2 > N:\n  exit( print( -1 ) )\nans = 1\nfor i in range( 1, int( N ** 0.5 ) + 1 ):\n  if N % i: continue\n  if ans < i:\n    if K * ( K + 1 ) // 2 <= N // i:\n      ans = i\n  if ans < N // i:\n    if K * ( K + 1 ) // 2 <= i:\n      ans = N // i\nt = N // ans\nfor i in range( 1, K + 1 ):\n  print( i * ans if i < K else N - ( K - 1 ) * K // 2 * ans, end = \" \\n\"[ i == K ] )\n", "def main():\n    from math import sqrt\n    n, k = list(map(int, input().split()))\n    g, x = n * 2 // ((k + 1) * k), n\n    if not g:\n        print(-1)\n        return\n    divisors = [1]\n    p = q = 1\n    while not x % 2:\n        x //= 2\n        q *= 2\n        divisors.append(q)\n    while True:\n        lim = int(sqrt(x))\n        if p >= lim:\n            break\n        for p in range(p + 2, lim + 2, 2):\n            if not x % p:\n                l, q = [], 1\n                while not x % p:\n                    x //= p\n                    q *= p\n                    l.append(q)\n                divisors += [p * q for p in l for q in divisors]\n                break\n        else:\n            break\n    if x != 1:\n        divisors += [x * q for q in divisors]\n    g = max(p for p in divisors if p <= g)\n    print(' '.join(map(str, list(range(g, g * k, g)))), n - g * (k - 1) * k // 2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\ng = n * 2 // ((k + 1) * k)\nif not g:\n    print(-1)\n    return\nee = [2 ** i for i in range(31) if not n % 2 ** i]\nx = n // ee[-1]\noo = [(o, x // o) for o in range(1, int(x ** .5) + 1, 2) if not x % o]\ng = max(o * e for t in oo for o in t for e in ee if o * e <= g)\nprint(' '.join(map(str, range(g, g * k, g))), n - g * (k - 1) * k // 2)", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\n\ndef main():\n    n, k = map(int, input().split())\n    base = int(k * (k + 1) / 2)\n    if n < base:\n        print('-1')\n        return\n    closest = None\n    for i in range(base, int(math.sqrt(n))):\n        if n % i == 0:\n            closest = i\n            break\n    if closest is None:\n        for i in range(int(math.sqrt(n) + 1), 0, -1):\n            if n % i == 0 and base <= n / i:\n                closest = n / i\n                break\n    multiplier = int(n / closest)\n    for i in range(1, k):\n        print(i * multiplier, end=' ')\n    print(int((k + closest - base) * multiplier))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,k = list(map(int,input().split()))\nif 2*n<k*(k+1):\n\tprint(-1)\n\treturn\nmx = 0\n\ndef ok(d):\n\tsm = k*(k-1)//2\n\tsm *= d\n\tif sm+k>n:\n\t\treturn False\n\tif (n-sm>((k-1)*d)):\n\t\treturn True\n\telse:\n\t\treturn False\n\ni = 1\nwhile i*i<=n:\n\tif n%i==0:\n\t\tif ok(i): mx = max(mx,i)\n\t\tif ok(n//i): mx = max(mx,n//i)\n\ti+= 1\nans = ''\nfor i in range(1,k):\n\tans += str(i*mx)+' '\nans += str(n-((k*(k-1))//2)*mx)\nprint(ans)\n", "def ma():\n    s=input()\n    nums=s.split(' ')\n    n=int(nums[0])\n    k=int(nums[1])\n    base=k*(k+1)//2\n    if n<base:\n        print(-1)\n        return \n    m=n//base\n    if m*m<=n:\n        while n%m!=0:\n            m-=1\n    else:\n        p=(n-1)//m+1\n        while p*p<=n and n%p!=0:\n            p+=1\n        if n%p==0:\n            m=n//p\n        else:\n            q=(n-1)//m\n            while n%q!=0:\n                q-=1\n            m=q\n            \n    for i in range(k-1):\n        print(str((i+1)*m),end='')\n        print(' ',end='')\n    print(n-k*(k-1)//2*m)\nma()", "from math import sqrt\nn, k = list(map(int, input().split()))\ndef f(s):\n    for v in range(1, 1 + int(sqrt(n))):\n        if n % v == 0:\n            yield v\n            yield n // v\ns = k * (k + 1) // 2\nv = set(x for x in f(s) if x <= n // s)\nif v:\n    gcd = max(v)\n    print(*list(range(gcd, gcd * k, gcd)), n - gcd * (k - 1) * k // 2)\nelse:\n    print(-1)\n", "\nimport sys\n\nline = sys.stdin.readline()\nline.strip()\ncomp = line.split(' ')\nn = int(comp[0])\nk = int(comp[1])\n\nif(k*(k+1)//2 > n):\n    print(\"-1\")\n    return\n\ndivs = []\n\nd = 1\nwhile(d*d <= n):\n    if n%d == 0:\n        divs.append(d)\n        divs.append(n//d)\n    d+=1\n\nmaxDiv = 0\n\nfor dv in divs:\n    if (k+1)*k//2 <= dv:\n        maxDiv = max(maxDiv,n//dv)\n    if (k+1)*k//2 <= n//dv:\n        maxDiv = max(maxDiv,dv)\n\n\narr = [maxDiv*x for x in range(1,k)] + [n-k*(k-1)//2*maxDiv]\nprint(\" \".join(map(str,arr)))\n\n\n\n\n\n\n\n", "from math import sqrt\nn, k = list(map(int, input().split()))\nK = (k*(k+1))//2\nif n < K:\n  print(-1)\nelse:\n  N = n//K\n  ret = -1\n  for i in range(1,min(N,int(sqrt(n)))+1):\n    if n%i == 0:\n      if i > ret:\n        ret = i\n      ni = n//i\n      if i < ni and ni <= N:\n        if ni > ret:\n          ret = ni\n          break\n  ans = [ret*i for i in range(1,k)]\n  ans.append(n-sum(ans))\n  print(' '.join(map(str,ans)))\n", "n, k = map(int, input().split())\nans = 0\nfor i in range(1, round(n ** 0.5) + 2):\n  if n % i == 0:\n    if k * (k - 1) // 2 * i < n and n - k * (k - 1) // 2 * i > 0 and n - k * (k - 1) // 2 * i > (k - 1) * i:\n      ans = max(ans, i)\n    i = n // i\n    if k * (k - 1) // 2 * i < n and n - k * (k - 1) // 2 * i > 0 and n - k * (k - 1) // 2 * i > (k - 1) * i:\n      ans = max(ans, i)\n      i = n // i\nif k * (k + 1) // 2 > n:\n  print(-1)\nelse:\n  print(\" \".join([str(ans * i) for i in range(1, k)] + [str(n - k * (k - 1) // 2 * ans)]))", "str_params = input()\n[n, k]= [int(s) for s in str_params.split(' ')]\nparts = (1+k)/2*k\nif parts<=n:\n\tnod = n/parts\n\twhile (nod%1!=0)|(parts%1!=0):\n\t\tif nod<parts:\n\t\t\tif nod%1!=0:\n\t\t\t\tnod = int(nod)\n\t\t\telse:\n\t\t\t\tnod = nod-1\n\t\t\tparts = n/nod\n\t\telse:\n\t\t\tif parts%1!=0:\n\t\t\t\tparts = int(parts)+1\n\t\t\telse:\n\t\t\t\tparts = parts+1\n\t\t\tnod = n/parts\n\tnumbers = [nod*(x+1) for x in range(k)]\n\tnumbers[k-1] = n-(1+k-1)/2*(k-1)*nod\n\t\n\tif numbers[0]==0:\n\t\tprint(-1)\n\telse:\n\t\tprint(' '.join(map(str,list(map(int, numbers)))))\nelse:\n\tprint(-1)\n\t\n\"\"\"while (sum(numbers)<n):\n\t\n\n\t33/5 = 6.6\n\t33/11 = 3\n\t\n\t33/6 = 5.5\n\t\n\t24/10 = 2.4\n\t\n\t\n\t\ni = 1\nwhile (sum(numbers)<n) & (i<k):\n\twhile sum(numbers)<n:\n\t\tnumbers = [numbers[x]*i for x in range(k)]\n\t\tprint (i, numbers)\n\t\ti = i+1\nprint (numbers)\nif sum(numbers)>n:\n\tprint (-1)\nif sum(numbers)==n:\n\tprint (' '.join(map(str,numbers)))\"\"\"\n\t\n", "import math\n\ndef divisorGenerator(n):\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                large_divisors.append(n / i)\n    for divisor in reversed(large_divisors):\n        yield divisor\n\nn,k = list(map(int,input().strip().split(' ')))\nl = list(map(int,divisorGenerator(n)))\nlenght = len(l)-1\nflag = True\nwhile lenght>=0 :\n    p = l[lenght]\n    if p * (int(n / p)) == n and k <= int(n / p) - int((k * (k - 1)) / 2):\n        for i in range(1, k):\n            print(p * i, end=' ')\n        print(p * (int(n / p) - int((k * (k - 1)) / 2)))\n        flag = False\n        break\n    lenght -= 1\nif flag: \n    print(-1)"]