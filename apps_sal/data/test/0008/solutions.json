["cards=list(input().split())\nlm=[0]*9\nlp=[0]*9\nls=[0]*9\nfor item in cards:\n    if item[1]=='m':\n        lm[int(item[0])-1]+=1\n    elif item[1]=='p':\n        lp[int(item[0])-1]+=1\n    else :\n        ls[int(item[0])-1]+=1\nif max(lm)==3 or max(lp)==3 or max(ls)==3:\n    print(0)\nelse :\n    flag=0\n    def seq_checker(li):\n        flag=0\n        for i in range(9):\n            if flag==0:\n                if lm[i]==1:\n                    flag=1\n            else :\n                if lm[i]==1:\n                    flag+=1\n                else :\n                    break\n        return flag\n    if seq_checker(lm)==3 or seq_checker(lp)==3 or seq_checker(ls)==3:\n        print(0)\n    elif max(lm)==2 or max(lp)==2 or max(ls)==2:\n        print(1)\n    else :\n        m=0\n        for i in range(0,7):\n            m=max(sum(lm[i:i+3]),sum(lp[i:i+3]),sum(ls[i:i+3]),m)\n        print(3-m)", "def check(a, b):\n    if a[1] == b[1] and 1 <= abs(int(b[0]) - int(a[0])) <= 2:\n        return True\n\narr = input().split()\nd = {}\nfor i in arr:\n    d[i] = d.get(i, 0) + 1\nmineq = 3 - max(d.values())\narr.sort(key=lambda x: x[0])\narr.sort(key=lambda x: x[1])\nif check(arr[0], arr[1]) or check(arr[1], arr[2]):\n    mineq = min(mineq, 1)\nif arr[0][1] == arr[1][1] == arr[2][1] and int(arr[2][0]) - int(arr[1][0]) == 1 and int(arr[1][0]) - int(arr[0][0]) == 1:\n    mineq = 0\nprint(mineq)", "m={\"s\":[0]*9, \"m\":[0]*9, \"p\":[0]*9}\nfor e in input().split():\n    m[e[1]][int(e[0])-1]+=1\nret=2\nfor t in \"smp\":\n    l=m[t]\n    if max(l)>=2:\n        ret=min(ret, 3-max(l))\n    else:\n        for i in range(7):\n            seq = sum(l[i:i+3])\n            ret = min(ret, 3-seq)\nprint(ret)", "a = input().split()\nst = set([])\ncnt = [[0 for i in range(9)] for i in range(3)]\nfor e in a:\n    cnt['mps'.index(e[1])][int(e[0]) - 1] = 1\n    st.add(e)\nansw = len(st) - 1\nfor i in range(3):\n    for j in range(7):\n        answ = min(answ, 3 - sum(cnt[i][j:j + 3]))\nprint(answ)", "s = [0] * 10\nm = [0] * 10\np = [0] * 10\nD = list(input().split())\nfor i in D:\n    if i[1] == 'p':\n        p[int(i[0])] += 1\n    elif i[1] == 'm':\n        m[int(i[0])] += 1\n    else:\n        s[int(i[0])] += 1\n\nneed = 3\nfor i in range(1, 10):\n    need = min(3 - p[i], need)\n    need = min(3 - s[i], need)\n    need = min(3 - m[i], need)\n    if i <= 7:\n        tmp = 0\n        tmp += min(1, p[i])\n        tmp += min(1, p[i + 1])\n        tmp += min(1, p[i + 2])\n        need = min(3 - tmp, need)\n        tmp = 0\n        tmp += min(1, m[i])\n        tmp += min(1, m[i + 1])\n        tmp += min(1, m[i + 2])\n        need = min(3 - tmp, need)\n        tmp = 0\n        tmp += min(1, s[i])\n        tmp += min(1, s[i + 1])\n        tmp += min(1, s[i + 2])\n        need = min(3 - tmp, need)\n\nprint(need)\n", "s = input().split()\ns.sort()\nif s[0] == s[1] == s[2]:\n\tprint(0)\n\treturn\nif s[0][1] == s[1][1] == s[2][1]:\n\tif ord(s[0][0]) + 1 == ord(s[1][0]) == ord(s[2][0]) - 1:\n\t\tprint(0)\n\t\treturn\nif s[0][1] == s[1][1] and ord(s[0][0]) + 2 >= ord(s[1][0]) or s[1][1] == s[2][1] and ord(s[1][0]) + 2 >= ord(s[2][0]) or s[0][1] == s[2][1] and ord(s[0][0]) + 2 >= ord(s[2][0]):\n\tprint(1)\n\treturn\nif s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n\tprint(1)\n\treturn\nprint(2)\n", "l = input().split()\nif l[0]==l[1] and l[1]==l[2]:\n    print(0)\n    return\ndef shuntsu(li):\n    li.sort()\n    return li[0][1]==li[1][1] and li[1][1]==li[2][1] and int(li[1][0])==int(li[0][0])+1 and int(li[2][0])==int(li[1][0])+1\nif shuntsu(l):\n    print(0)\n    return\nfor k in l:\n    if len([x for x in l if x==k]) > 1:\n        print(1)\n        return\n    if len([x for x in l if x[1]==k[1] and int(x[0]) == int(k[0])+1]) !=0:\n        print(1)\n        return\n    if len([x for x in l if x[1]==k[1] and int(x[0]) == int(k[0])+2]) != 0:\n        print(1)\n        return\nprint(2)\n", "def ism(a, b, c):\n    return a==b and b==c\n\ndef isk(a, b, c):\n    x = [a, b, c]\n    x.sort()\n    if x[0][1] == x[1][1] and x[1][1] == x[2][1]:\n        if int(x[0][0])+1 == int(x[1][0]) and int(x[1][0])+1 == int(x[2][0]):\n            return 1\n    return 0\n\na, b, c = input().split()\nx = [a,b,c]\ntypem = []\ntypes = []\ntypep = []\nm, s, p = 0, 0, 0\n\nfor i in x:\n    if i[1]=='m':\n        m+=1\n        typem.append(i)\n    elif i[1]=='s':\n        s+=1\n        types.append(i)\n    elif i[1]=='p':\n        p+=1\n        typep.append(i)\n\nans = 0\ndone = 0\n\nif isk(a,b,c) or ism(a,b,c):\n    ans = 0\n    done = 1\n\nif done==0 and a==b and b==c:\n    ans = 0\n    done = 1\n\nelif done==0 and a==b:\n    ans = 1\n    done = 1\n\nelif done==0 and b==c:\n    ans = 1\n    done = 1\nelif done==0 and a==c:\n    ans = 1\n    done = 1\n# Shuntsu\nif done==0 and m>=2:\n    typem.sort()\n    for i in range(len(typem)-1):\n        if abs(int(typem[i][0]) - int(typem[i+1][0])) <= 2 and \\\n           abs(int(typem[i][0]) - int(typem[i+1][0])) > 0:\n            ans = 1\n            done = 1\n    \nif done==0 and s>=2:\n    types.sort()\n    for i in range(len(types)-1):\n        if abs(int(types[i][0]) - int(types[i+1][0])) <= 2 and \\\n           abs(int(types[i][0]) - int(types[i+1][0])) > 0:\n            ans = 1\n            done = 1\n\nif done==0 and p>=2:\n    typep.sort()\n    for i in range(len(typep)-1):\n        if abs(int(typep[i][0]) - int(typep[i+1][0])) <= 2 and \\\n           abs(int(typep[i][0]) - int(typep[i+1][0])) > 0:\n            ans = 1\n            done = 1\n\nif done == 0:\n    ans = 2\n    done = 1\n\nprint(ans)\n", "from sys import stdin, stdout, exit\n\nt1, t2, t3 = stdin.readline().split()\n\nif t1 == t2 and t2 == t3:\n    print(0)\n    return\n\nts = [(int(t[0]), t[1]) for t in [t1, t2, t3]]\nts.sort()\nns = [t[0] for t in ts]\nss = [t[1] for t in ts]\n\nif ns[0] + 1== ns[1] and ns[0] + 2 == ns[2] and ss[0] == ss[1] and ss[1] == ss[2]:\n    print(0)\n    return\nif ns[0] + 2 >= ns[1] and ss[1] == ss[0]:\n    print(1)\n    return\nif ns[1] + 2 >= ns[2] and ss[1] == ss[2]:\n    print(1)\n    return\nif ns[0] + 2 >= ns[2] and ss[0] == ss[2]:\n    print(1)\n    return\nif ts[0] == ts[1] or ts[1] == ts[2] or ts[2] == ts[0]:\n    print(1)\n    return\n\nprint(2)\n", "\n\na=[[],[],[]]\n\ns=input().split(\" \")\n\nfor i in range(len(s)):\n\tif(s[i][1]=='m'):\n\t\ta[0].append(int(s[i][0]))\n\telif(s[i][1]=='p'):\n\t\ta[1].append(int(s[i][0]))\n\telse:\n\t\ta[2].append(int(s[i][0]))\n\nko=10\n\nfor i in range(len(a)):\n\ta[i]=sorted(a[i])\n\tc=0\n\n\tfor j in range(1,len(a[i])):\n\t\tif(a[i][j]==a[i][j-1]):\n\t\t\tc+=1\n\tif(c==1):\n\t\tko=min(ko,1)\n\telif(c==2):\n\t\tko=min(ko,0)\n\telse:\n\t\tif(len(a[i])>0):\n\t\t\tko=min(ko,2)\n\nans=ko\nko=10\n\nfor i in range(len(a)):\n\ta[i]=sorted(a[i])\n\tc=0\n\n\tfor j in range(1,len(a[i])):\n\t\tif(a[i][j]==a[i][j-1]+1):\n\t\t\tc+=1\n\tif(c==1):\n\t\tko=min(ko,1)\n\telif(c==2):\n\t\tko=min(ko,0)\n\telif(len(a[i])>1 and (a[i][0]+2==a[i][1])):\n\t\tko=min(ko,1)\n\telif(len(a[i])>2 and (a[i][1]+2==a[i][2])):\n\t\tko=min(ko,1)\n\telse:\n\t\tif(len(a[i])>0):\n\t\t\tko=min(ko,2)\n\n\nprint(min(ans,ko))\n\n\n\n", "t1, t2, t3 = input().split()\nans = 2\nif t1 == t2 or t2 == t3 or t3 == t1:\n    if t1 == t2 == t3:\n        ans = 0\n    else:\n        ans = 1\naaa = []\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            if k - j == j - i == 1:\n                aaa.append({i, j, k})\nif t1[1] == t2[1] == t3[1] and {int(t1[0]), int(t2[0]), int(t3[0])} in aaa:\n    ans = 0\nelif (t1[1] == t2[1] and (abs(int(t1[0]) - int(t2[0])) == 1 or abs(int(t1[0]) - int(t2[0])) == 2)) or (t1[1] == t3[1] and (abs(int(t1[0]) - int(t3[0])) == 1 or abs(int(t1[0]) - int(t3[0])) == 2)) or (t3[1] == t2[1] and (abs(int(t3[0]) - int(t2[0])) == 1 or abs(int(t3[0]) - int(t2[0])) == 2)):\n    ans = min(1, ans)\nprint(ans)", "from sys import stdin, stdout\n\n#N = int(input())\n\n#arr = [int(x) for x in stdin.readline().split()]\n\ns = input()\n\ns = s.split(' ')\n\n#print(s)\n\nM = [0]*9\nP = [0]*9\nS = [0]*9\n\nfor pile in s:\n    pile = list(pile)\n    #print(pile)\n    num = int(pile[0])\n    tile = pile[1]\n    \n    if tile=='s':\n        S[num-1] += 1\n    elif tile=='p':\n        P[num-1] += 1\n    elif tile=='m':\n        M[num-1] += 1\n        \nfor i in range(9):\n    if M[i]==3:\n        print(0)\n        quit()\n    if P[i]==3:\n        print(0)\n        quit()\n    if S[i]==3:\n        print(0)\n        quit()\n        \nfor i in range(7):\n    if M[i]==1 and M[i+1]==1 and M[i+2]==1:\n        print(0)\n        quit()\n    if P[i]==1 and P[i+1]==1 and P[i+2]==1:\n        print(0)\n        quit()\n    if S[i]==1 and S[i+1]==1 and S[i+2]==1:\n        print(0)\n        quit()\n\nfor i in range(9):\n    if M[i]==2:\n        print(1)\n        quit()\n    if P[i]==2:\n        print(1)\n        quit()\n    if S[i]==2:\n        print(1)\n        quit()\n        \nfor i in range(8):\n    if M[i]==1 and M[i+1]==1:\n        print(1)\n        quit()\n    if P[i]==1 and P[i+1]==1:\n        print(1)\n        quit()\n    if S[i]==1 and S[i+1]==1:\n        print(1)\n        quit()\n        \nfor i in range(7):\n    if M[i]==1 and M[i+2]==1:\n        print(1)\n        quit()\n    if P[i]==1 and P[i+2]==1:\n        print(1)\n        quit()\n    if S[i]==1 and S[i+2]==1:\n        print(1)\n        quit()\n        \nprint(2)\n        \n    \n", "f = lambda c: 'mps'.index(c)\nl = [[], [], []]\nfor c in input().split():\n    a, b = c\n    l[f(b)].append(int(a))\nfor i in range(3):\n    l[i].sort()\n\nres = 3\nfor x in l:\n    if len(x) == 0: continue\n    elif len(x) == 1: res = min(res, 2)\n    elif len(x) == 3:\n        if len(set(x)) == 1:\n            res = min(res, 0)\n            break\n        if x[0] == x[1] - 1 and x[1] == x[2] - 1:\n            res = min(res, 0)\n            break\n    res = min(res, 2)\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            if abs(x[i] - x[j]) <= 2:\n                res = min(res, 1)\nprint(res)", "line = input().split()\nline.sort()\na,b,c = line\nif a == b and a == c:\n    print(0)\nelif a == b:\n    print(1)\nelif b == c:\n    print(1)\nelse:\n    if a[1] == b[1] and b[1] == c[1] \\\n        and int(b[0])-int(a[0]) == 1 and int(c[0])-int(b[0]) == 1:\n        print(0)\n    elif a[1] == b[1] and int(b[0])-int(a[0]) in [1,2]:\n        print(1)\n    elif b[1] == c[1] and int(c[0])-int(b[0]) in [1,2]:\n        print(1)\n    elif a[1] == c[1] and int(c[0])-int(a[0]) in [1,2]:\n        print(1)\n    else:\n        print(2)\n\n", "\ndef main():\n    buf = input()\n    buflist = buf.split()\n    hand = buflist;\n    t = []\n    for i in range(3):\n        t.append([])\n        for j in range(9):\n            t[i].append(0)\n    for x in hand:\n        idx = 0\n        if x[1] == 'm':\n            idx = 0\n        elif x[1] == 'p':\n            idx = 1\n        elif x[1] == 's':\n            idx = 2\n        t[idx][int(x[0])-1] += 1\n    max_cons = 0\n    max_mult = 0\n    for i in range(3):\n        cons = [0, 0, 0]\n        for j in range(9):\n            cons[0] = cons[1]\n            cons[1] = cons[2]\n            if t[i][j] > 0:\n                cons[2] = 1\n            else:\n                cons[2] = 0\n            max_cons = max(sum(cons), max_cons)\n            max_mult = max(max_mult, t[i][j])\n    print(3 - max(max_cons, max_mult))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\nans = 2\ns1 = s[0:2]\ns2 = s[3:5]\ns3 = s[6:8]\ndef func(inp):\n    ans = 2\n    num = int(inp[0])\n    c = inp[1]\n    ans = min( ans, 2 - int(s.find(str(num + 1)+c) != -1) - int(s.find(str(num + 2)+c) != -1))\n    ans = min( ans, 2 - int(s.find(str(num + 1)+c) != -1) - int(s.find(str(num - 1)+c) != -1))\n    ans = min( ans, 2 - int(s.find(str(num - 1)+c) != -1) - int(s.find(str(num - 2)+c) != -1))\n    ans = min( ans, 3 - s.count(inp))\n    return ans\nans = min(ans,func(s1))\nans = min(ans,func(s2))\nans = min(ans,func(s3))\nprint(ans)\n", "s = input().split()\nhand = {'m': [], 'p': [], 's':[]}\n\nfor item in s:\n\thand[item[1]].append(int(item[0]))\n\n\nmin_steps_needed = 10\n\nfor symb in ['m', 'p', 's']:\n\thand[symb] = sorted(hand[symb])\n\tfor start in range(1, 10):\n\t\ta_needed = 10\n\t\tb_needed = 10\n\n\t\ta_needed = 3 - hand[symb].count(start)\n\n\t\tb1, b2, b3 = 0, 0, 0\n\t\tif hand[symb].count(start) > 0:\n\t\t\tb1 = 1\n\t\tif hand[symb].count(start+1) > 0:\n\t\t\tb2 = 1\n\t\tif hand[symb].count(start+2) > 0:\n\t\t\tb3 = 1\n\n\t\tb_needed = 3 - b1 - b2 - b3\n\n\t\tif a_needed < min_steps_needed:\n\t\t\tmin_steps_needed = a_needed\n\t\tif b_needed < min_steps_needed:\n\t\t\tmin_steps_needed = b_needed\n\n\n\n# print(s)\n# print(hand)\nprint(min_steps_needed)", "from math import *\nimport sys\ninput = lambda: sys.stdin.readline().strip()\n\nd = {'m': [], 's': [], 'p': []}\n\nls = list(input().split())\nfor i in ls:\n    d[i[1]].append(int(i[0]))\nfor k, v in list(d.items()):\n    v.sort()\n    if len(v)==3 and len(set(v))==1: print((0)); break\n    if len(v)==3 and v[0]+1==v[1] and v[1]+1==v[2]: print((0)); break\nelse:\n    for k, v in list(d.items()):\n        if len(v)==2 and len(set(v))==1: print((1)); break\n        if len(v)==2 and v[1]-v[0]<=2: print((1)); break\n        if len(v)==3 and (v[0]==v[1] or v[1]==v[2]): print((1)); break\n        if len(v)==3 and (v[1]-v[0]<=2 or v[2]-v[1]<=2): print((1)); break\n    else:\n        print(2)\n", "t = input().split()[:3:]\ns = set(t)\nres = 3\nif len(s)==1:\n\tres = min(res,0)\nelif len(s)==2:\n\tres = min(res,1)\nelif len(s)==3:\n\tres = min(res,2)\nif res==0:\n\tprint(res)\n\treturn\nt.sort()\nm = [int(a[0]) for a in t if a[1]=='m']\np = [int(a[0]) for a in t if a[1]=='p']\ns = [int(a[0]) for a in t if a[1]=='s']\ndef f(a):\n\tres = 2\n\tfor i in a:\n\t\tif (i-1 in a and i+1 in a)or(i-2 in a and i-1 in a)or(i+1 in a and i+2 in a):\n\t\t\treturn 0\n\t\telif i-1 in a or i+1 in a or i-2 in a or i+2 in a:\n\t\t\tres = min(res,1)\n\treturn res\nres = min([res,f(m),f(p),f(s)])\nprint(res)", "import sys\na,b,c=sys.stdin.readline().strip().split()\nif a==b and b==c:\n    print(0)\nelif a==b or b==c or a==c:\n    print(1)\nelse:\n    na = int(a[0])\n    nb = int(b[0])\n    nc = int(c[0])\n    if (a[1]==b[1] and a[1]==c[1]):\n        cp=[na,nb,nc]\n        cp.sort()\n        cp[0]+=2\n        cp[1]+=1\n        if (cp[0]==cp[1] and cp[1]==cp[2]):\n            print(\"0\")\n        elif (cp[0]==cp[1] or cp[1]==cp[2] or cp[0]==cp[1] or (cp[0]+1)==cp[1] or (cp[1]+1)==cp[2]):\n            print(\"1\")\n        else:\n            print(\"2\")\n    elif(a[1]==b[1]):\n        mi=min(na,nb)\n        ma=max(na,nb)\n        if (mi==(ma-1) or mi==(ma-2)):\n            print(\"1\")\n        else: print(\"2\")\n    elif(a[1]==c[1]):\n        mi=min(na,nc)\n        ma=max(na,nc)\n        if (mi==(ma-1) or mi==(ma-2)):\n            print(\"1\")\n        else: print(\"2\")\n    elif(b[1]==c[1]):\n        mi = min(nb,nc)\n        ma = max(nb,nc)\n        if (mi==(ma-1) or mi==(ma-2)):\n            print(\"1\")\n        else: print(\"2\")\n    else:\n        print(\"2\")\n", "s = input().split()\nb = []\nb.append((s[0][1], int(s[0][0])))\nb.append((s[1][1], int(s[1][0])))\nb.append((s[2][1], int(s[2][0])))\nb.sort()\nif (b[0][0] == b[1][0] and b[1][0] == b[2][0]):\n    if (b[0] == b[1] and b[1] == b[2]):\n        print(0)\n    elif (b[0][1] + 1 == b[1][1] and b[1][1] + 1 == b[2][1]):\n        print(0)\n    elif (b[0] == b[1]):\n        print(1)\n    elif (b[1] == b[2]):\n        print(1)\n    elif b[0][1] + 1 == b[1][1]:\n        print(1)\n    elif b[0][1] + 2 == b[1][1]:\n        print(1)\n    elif b[1][1] + 1 == b[2][1]:\n        print(1)\n    elif b[1][1] + 2 == b[2][1]:\n        print(1)\n    elif b[0][1] + 1 == b[2][1]:\n        print(1)\n    elif b[0][1] + 2 == b[2][1]:\n        print(1)\n    else:\n        print(2)\nelif (b[0][0] != b[1][0] and b[1][0] != b[2][0] and b[2][0] != b[0][0]):\n    print(2)\nelif b[0][0] == b[1][0]:\n    if b[0] == b[1]:\n        print(1)\n    elif b[0][1] + 1 == b[1][1]:\n        print(1)\n    elif b[0][1] + 2 == b[1][1]:\n        print(1)\n    else:\n        print(2)\nelif b[1][0] == b[2][0]:\n    if (b[1] == b[2]):\n        print(1)\n    elif b[1][1] + 1 == b[2][1]:\n        print(1)\n    elif b[1][1] + 2 == b[2][1]:\n        print(1)\n    else:\n        print(2)\nelse:\n    print(2)\n    \n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jul 12 17:39:54 2019\n\n@author: Hamadeh\n\"\"\"\n\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jul 12 17:33:49 2019\n\n@author: Hamadeh\n\"\"\"\n\nclass cinn:\n    def __init__(self):\n        self.x=[]\n    def cin(self,t=int):\n        if(len(self.x)==0):\n            a=input()\n            self.x=a.split()\n            self.x.reverse()\n        return self.get(t)\n    def get(self,t):\n        return t(self.x.pop())\n    def clist(self,n,t=int): #n is number of inputs, t is type to be casted\n        l=[0]*n\n        for i in range(n):\n            l[i]=self.cin(t)\n        return l\n    def clist2(self,n,t1=int,t2=int,t3=int,tn=2):\n        l=[0]*n\n        for i in range(n):\n            if(tn==2):\n                a1=self.cin(t1)\n                a2=self.cin(t2)\n                l[i]=(a1,a2)\n            elif (tn==3):\n                a1=self.cin(t1)\n                a2=self.cin(t2)\n                a3=self.cin(t3)\n                l[i]=(a1,a2,a3)\n        return l\n    def clist3(self,n,t1=int,t2=int,t3=int):\n        return self.clist2(self,n,t1,t2,t3,3)\n    def cout(self,i,ans=''):   \n        if(ans==''):\n            print(\"Case #\"+str(i+1)+\":\", end=' ')\n        else:\n            print(\"Case #\"+str(i+1)+\":\",ans)\n    def printf(self,thing):\n        print(thing,end='')\n    def countlist(self,l,s=0,e=None):\n        if(e==None):\n            e=len(l)\n        dic={}\n        for el in range(s,e):\n            if l[el] not in dic:\n                dic[l[el]]=1\n            else:\n                dic[l[el]]+=1\n        return dic\n    def talk (self,x):\n        print(x,flush=True)\n    def dp1(self,k):\n        L=[-1]*(k)\n        return L\n    def dp2(self,k,kk):\n        L=[-1]*(k)\n        for i in range(k):\n            L[i]=[-1]*kk\n        return L\n    def isprime(self,n):\n        if(n==1 or n==0):\n            return False\n        for i in range(2,int(n**0.5+1)):\n            if(n%i==0):\n                return False\n        return True\n    def factors(self,n):    \n        from functools import reduce\n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    def nthprime(self,n):\n        #usable up to 10 thousand\n        i=0\n        s=2\n        L=[]\n        while(i<n):\n            while(not self.isprime(s)):\n                s+=1\n            L.append(s)\n            s+=1\n            i+=1\n        return L\n    def matrixin(self,m,n,t=int):\n        L=[]\n        for i in range(m):\n            p=self.clist(n,t)\n            L.append(p)\n        return L\n    def seive(self,k):\n        #1000000 tops\n        n=k+1\n        L=[True]*n\n        L[1]=False\n        L[0]=False\n        for i in range(2,n):\n            if(L[i]==True):\n                for j in range(2*i,n,i):\n                    L[j]=False\n        return L\n    def seiven(self,n,L):\n        i=0\n        for j in range(len(L)):\n            if(L[j]==True):\n                i+=1\n            if(i==n):\n                return j\n    def matrixin2(self,m,t=int):\n        L=[]\n        for i in range(m):\n            iny=self.cin(str)\n            lsmall=[]\n            for el in iny:\n                lsmall.append(t(el))\n            L.append(lsmall)\n        return L\n\nc=cinn()\nca1=c.cin(str)\nca2=c.cin(str)\nca3=c.cin(str)\nL=[ca1,ca2,ca3]\nif(ca1==ca2 and ca2==ca3):\n    print(0)\nelif(ca1==ca2 or ca3==ca2 or ca1==ca3):\n    print(1)\nelse:\n    a1=list(ca1)\n    a2=list(ca2)\n    a3=list(ca3)\n    l=[int(a1[0]),int(a2[0]),int(a3[0])]\n    l.sort()\n    found1=False\n    if(l[0]==l[1]-1 and l[1]==l[2]-1):\n        if(a1[1]==a2[1] and a1[1]==a3[1]):\n            print(0)\n            found1=True\n    if(found1==False):\n        found=False\n        for el in L:\n            upel=str(int(el[0])+1)+el[1]\n            downel=str(int(el[0])-1)+el[1]\n            downel2=str(int(el[0])-2)+el[1]\n            upel2=str(int(el[0])+2)+el[1]\n            if(downel in L or upel in L or upel2 in L or downel2 in L):\n                found=True\n        if(found):\n            print(1)\n        else:\n            print(2)", "t = input().split()\n\nt.sort()\n\nif t.count(t[0]) == 3:\n  print('0')\nelif t.count(t[0]) == 2 or t.count(t[1]) == 2:\n  print('1')\nelse:\n  num = list(map(int, [t[0][0], t[1][0], t[2][0]]))\n  suit = [t[0][1], t[1][1], t[2][1]]\n  if len(set(suit)) == 3:\n    print('2')\n  elif len(set(suit)) == 1:\n    if num[1] == num[0] + 1 or num[2] == num[1] + 1:\n      if num[2] == num[0] + 2:\n        print('0')\n      else:\n        print('1')\n    elif num[1] == num[0] + 2 or num[2] == num[1] + 2:\n        print('1')\n    else:\n      print('2')\n  else:\n    if suit[0] == suit[1]:\n      if num[1] - num[0] in [1, 2]:\n        print('1')\n      else:\n        print('2')\n    elif suit[1] == suit[2]:\n      if num[2] - num[1] in [1, 2]:\n        print('1')\n      else:\n        print('2')\n    else:\n      if num[2] - num[0] in [1, 2]:\n        print('1')\n      else:\n        print('2')", "m=[x for x in input().split()]\ntiles=[[0 for i in range(9)] for j in range(3)]\nfor i in range(len(m)):\n    g=int(m[i][0])-1\n    h=(m[i][1])    \n    if h==\"m\":\n        tiles[0][g]+=1\n    elif h==\"p\":\n        tiles[1][g]+=1\n    else:\n        tiles[2][g]+=1\nif m[0]==m[1] and m[1]==m[2]:\n    print(0)\nelif m[0]==m[1]:\n    print(1)\nelif m[0]==m[2]:\n    print(1)\nelif m[1]==m[2]:\n    print(1)\nelse:\n    n=False\n    for i in range(3):\n        for j in range(9):\n            if tiles[i][j]!=0:\n                if j!=8 and tiles[i][j+1]!=0:\n                    if j!=7 and tiles[i][j+2]!=0:\n                        print(0)\n                        n=True\n                        break\n                    else:\n                        print(1)\n                        n=True\n                        break\n                elif j!=7 and j!=8 and tiles[i][j+2]!=0:\n                    print(1)\n                    n=True\n                    break\n    if n==False:\n        print(2)"]