["from collections import defaultdict\ndef main():\n    n, k = map(int, input().split(\" \"))\n    a = list(map(int, input().split(\" \")))\n    s = []\n    ord = [-1]*(n+1)\n    u = 1\n    while ord[u] == -1:\n        ord[u] = len(s)\n        s.append(u)\n        u = a[u-1]\n    l = len(s) - ord[u]\n    if k < ord[u]:\n        print(s[k])\n    else:\n        print(s[(k-ord[u])%l+ord[u]])\n\n'''\ndef main():\n    n, k = map(int, input().split(\" \"))\n    a = list(map(lambda i: int(i)-1, input().split(\" \")))\n    s = [0]\n    d = defaultdict(lambda:0)\n    x = a[0]\n    for i in range(n):\n        s.append(x)\n        x = a[x]\n\n    bb=None\n    for i in range(n):\n        d[s[i]] += 1\n        if d[s[i]] ==2:\n            bb=s[i]\n            break\n\n    cc = s.index(bb)\n    s[cc]=-1\n    dd = s.index(bb)\n    loop_len = dd-cc\n    s[cc]=s[dd]\n        \n    if bb ==None or k < cc:\n        print(s[k]+1)\n    else:\n        y = (k-cc) % loop_len\n        print(s[y+cc]+1)\n'''\ndef __starting_point():\n    main()\n__starting_point()", "n,k=map(int, input().split())\na=list(map(int, input().split()))\nb=[False]*n\npos=0\nfor i in range(min(n,k)):\n    if b[pos]!=False:\n        loop=i-b[pos]+1\n        break\n    b[pos]=i+1\n    pos=a[pos]-1\n    k-=1\nif k>0:\n    for i in range(k%loop):\n        pos=a[pos]-1\nprint(pos+1)", "#!/usr/bin/env python3\nimport sys\nfrom itertools import chain\n\n\ndef solve(N: int, K: int, A: \"List[int]\"):\n    M = [-1 for _ in range(N)]\n    M[0] = 0\n    current = 1\n    n = 1\n    while n <= K:\n        current = A[current - 1]\n        if M[current - 1] == -1:  # \u4e00\u5ea6\u3082\u901a\u3063\u305f\u3053\u3068\u304c\u306a\u3044\n            M[current - 1] = n  # n \u30b9\u30c6\u30c3\u30d7\u76ee\u306b\u901a\u3063\u305f\u4e8b\u3092\u8a18\u9332\n        else:\n            loop_len = n - M[current - 1]  # \u30eb\u30fc\u30d7\u306e\u9577\u3055\n            rest = K - n  # \u6b8b\u308a\u9577\u3055\n            rest = rest % loop_len  # \u6b8b\u308a\u9577\u3055\u3092\u30eb\u30fc\u30d7\u306e\u4f59\u5270\u306b\u3059\u308b\n            K = n + rest\n        n += 1\n    return current\n\n\ndef main():\n    tokens = chain(*(line.split() for line in sys.stdin))\n    # N, K, A = map(int, line.split())\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    answer = solve(N, K, A)\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = map(int,input().split())\nA = list(map(int,input().split()))\n\ncheck = [0] * (N+1) #\u5bfe\u8c61\u306e\u753a\u3092\u8a2a\u554f\u3059\u308b\u306e\u304c\u521d\u3081\u3066\u304b\nli = [] #\u753a\u306e\u79fb\u52d5\u9806\ni, j = 1, 1 #\u73fe\u5728\u306e\u753a\u306e\u756a\u53f7\u3068\u79fb\u52d5\u56de\u6570\n\nwhile True:\n  k = A[i-1] #\u79fb\u52d5\u5148\u306e\u753a\u306e\u756a\u53f7\n  if check[k] == 1:\n    #\u524d\u306b\u8a2a\u554f\u3057\u305f\u3053\u3068\u304c\u3042\u308b\u5834\u5408\n    n = li.index(k)+1 #\u30eb\u30fc\u30d7\u306b\u5165\u3063\u305f\u6642\u70b9\u3067\u306e\u79fb\u52d5\u56de\u6570\n    break\n  check[k] = 1\n  li.append(k)\n  i = k\n  j += 1\n\nif K < n: print(li[K-1])\nelse: print(li[(K-n) % (j-n) + n - 1])", "#!/usr/bin/env python3\n\nimport numpy as np\n\n\n# def input():\n#     return sys.stdin.readline().rstrip()\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n\n    warps = list(map(int, input().split()))\n    warps = [0] + warps\n    warps = np.array(warps, dtype=int)\n\n    order_num = np.zeros(len(warps) + 1, dtype=int)\n    path_history = []\n\n    node = 1\n    while order_num[node] == 0:\n        path_history.append(node)\n        order_num[node] = len(path_history)\n        node = warps[node]\n\n    # print(order_num)\n    # print(path_history)\n    begin = order_num[node]\n    # print(tail)\n\n    if k <= begin:\n        print((path_history[k]))\n    else:\n        # path_history = path_history[tail:]\n        # print(path_history)\n        leng = len(path_history) - order_num[node] + 1\n        # print(leng)\n        index = (k - (begin - 1)) % leng\n        # print(index)\n        print((path_history[begin - 1 + index]))\n\n\nmain()\n", "N, K = map(int, input().split())\nA = [0]+list(map(int, input().split()))\nB = [-1]*-~N\np = 1\nfor i in range(K):\n    if B[p] >= 0 :break\n    B[p] = i\n    p = A[p]\nelse: print(p); return\nprint(B.index((K-B[p])%(i-B[p])+B[p]))", "N,K=map(int,input().split())\nA = list(map(int,input().split()))\ncount = 0\nnow = 1\ncity = [1]\ncity2 = {1}\nwhile count < K:\n    count +=  1\n    now = A[now-1]\n    if now in city2:\n        break\n    else:\n        city.append(now)\n        city2.add(now)\nif count == K:\n    print(now)\nelse:\n    n = city.index(now)\n    K -= n\n    count -= n\n    K %= count\n    print(city[n+K])", "N,K = map(int,input().split())\nA = list(map(lambda x:int(x)-1,input().split()))\ni = 0\nvisited = set([0])\n\nwhile K > 0:\n    i = A[i]\n    K -= 1\n    if i in visited:\n        break\n    visited.add(i)\nif K == 0:\n    print(i+1)\n    return\nls = [i]\nj = i\nwhile True:\n    j = A[j]\n    if j == i:\n        break\n    ls.append(j)\nprint(ls[K % len(ls)]+1)", "n, k = map(int, input().split())\nA = list(map(lambda x: int(x) - 1, input().split()))\nprev = 0\ncount = 0\nused = {prev: count}\nfor _ in range(min(k, n)):\n  prev = A[prev]\n  count += 1\n  if prev in used:\n    for _ in range((k - used[prev]) % (count - used[prev])):\n      prev = A[prev]\n    break\n  used[prev] = count\nprint(prev + 1)", "f=lambda:map(int,input().split())\nN,K=f()\n*A,=[0]+list(f())\nF=[0]*(2*10**5+1)\n\nG=[1]\nF[1]=1\ni=0\nwhile i<=N:\n n=A[G[-1]]\n if F[n]:break\n F[n]=1\n G.append(n)\n i+=1\nt=G.index(A[G[-1]])\nif (K<t):\n print(G[K])\nelse:\n G=G[t:]\n print(G[(K-t)%len(G)]) ", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nrec = [0]\ni = 0\nflag = [0 for _ in range(n + 1)]\nwhile True:\n    if flag[rec[i]] == 0:\n        flag[rec[i]] = 1\n        rec.append(a[rec[i]] - 1)\n    else:\n        start = rec.index(a[rec[i]] - 1)\n        loop = rec[start:]\n        pre = rec[:start]\n        break\n    i += 1\ncount = (k - len(pre)) % len(loop)\nif k <= len(pre):\n    print((pre[k] + 1))\nelse:\n    print((loop[count] + 1))\n", "#n\u306f\u8857\u306e\u6570\u3000k\u306f\u79fb\u52d5\u306e\u56de\u6570\u3000k\uff0b\uff11\u500b\u306e\u8857\u306b\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u3000\n#\u6700\u9ad8\u3067\u3082n\u56de\u79fb\u52d5\u3059\u308c\u3070\u4e00\u3064\u306f\u4e8c\u56de\u8a2a\u308c\u308b\u8857\u304c\u73fe\u308c\u308b\u3000\u305d\u306e\u3042\u3068\u306f\u30eb\u30fc\u30d7\u3059\u308b\nn,k = list(map(int,input().split()))\na = list(map(int,input().split()))\n\nb = [-1]*(n+1) #\u8857\uff13\u306b5\u56de\u76ee\u306e\u79fb\u52d5\u3067\u3064\u3044\u305f\u5834\u5408\u3001b[3]\u306b\uff15\u304c\u5165\u308b\u3000\ntmp = [] #\u7d4c\u8def\u3092\u8a18\u9332\u3057\u3066\u3044\u304f\nhere = 1\ncount = 0 #\u79fb\u52d5\u56de\u6570\n\nwhile True:\n    if b[here] != -1: #\u4e00\u5ea6\u8a2a\u308c\u305f\u8857\u306b\u518d\u3073\u6765\u305f\n        roop = count - b[here] #\u30eb\u30fc\u30d7\u306e\u9577\u3055\u3000(\u8857a\u306b\u4e8c\u56de\u76ee\u306b\u6765\u305f\u6642\u306e\u79fb\u52d5\u56de\u6570-\u4e00\u56de\u76ee\u306b\u6765\u305f\u6642\u306e\u79fb\u52d5\u56de\u6570)\n        if k < count: #\u30eb\u30fc\u30d7\u306b\u5165\u308b\u524d\u306b\u79fb\u52d5\u304c\u7d42\u308f\u3063\u305f\u6642\n            print((tmp[k]))\n        else:\n            new_tmp = tmp[b[here]:]\n            s = k-b[here]\n            print((new_tmp[s%roop]))\n        break\n    b[here] = count\n    count += 1\n    tmp.append(here)\n    here = a[here-1]\n", "import bisect,collections,copy,itertools,math,string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef main():\n    n,k = LI()\n    a = [None] + LI()\n    explored = {1}\n    lst = [1]\n    lenth = 0\n    start = 0\n    junkan = []\n    now = 1\n    while lenth==0:\n        nxt = a[now]\n        if nxt in explored:\n            index = lst.index(nxt)\n            junkan = [lst[-1]] + lst[index:-1]\n            start = index\n            lenth = len(junkan)\n        else:\n            explored.add(nxt)\n            lst.append(nxt)\n        now = nxt\n    ans = 0\n    if k<start:\n        ans = lst[k]\n    else:\n        r = (k-start+1)%lenth\n        ans = junkan[r]\n\n    print(ans)\n\n\nmain()            \n", "N, K = map(int, input().split())\nA = [0] + list(map(int, input().split()))\n\nnow = 1\npath = [1]\n\nfor i in range(N + 2):\n    now = A[now]\n    path.append(now)\n\nif i >= K:\n    print(path[K])\n    return\n\nnow = path.pop()\nlo_start = i - 1\nwhile path[lo_start] != now:\n    lo_start -= 1\n\nloop = path[lo_start:]\n\nans = loop[(K - path.index(now)) % len(loop)]\n\nprint(ans)", "def __starting_point():\n\n    n,k = list(map(int,input().split()))\n    A = [0]\n    AA= list(map(int,input().split()))\n    A = A + AA\n\n    B = set()\n    cnt = 0\n    ind = 1\n    startind = 0\n    D = []\n    while True:\n        if A[ind] not in B:\n            B.add(ind)\n            D.append(ind)\n            cnt += 1\n            ind = A[ind]\n        else:\n            B.add(ind)\n            D.append(ind)\n            cnt += 1\n            startind = A[ind]\n            break\n\n    C = set()\n    ind = startind\n    ANS = []\n    while True:\n        if A[ind] not in C:\n            C.add(ind)\n            ind = A[ind]\n            ANS.append(ind)\n        else:\n            C.add(ind)\n            ANS.append(A[ind])\n            break\n\n    if k >= cnt:\n        tmp = k - cnt\n        tmp = tmp % (len(C))\n        print((ANS[tmp-1]))\n    else:\n        print((D[k]))\n\n__starting_point()", "n, K = list(map(int, input().split()))\nA = list([int(x) - 1 for x in input().split()])\ndone = [-1 for _ in range(n)]\ntmp = 0\ndone[0] = 0\nfor k in range(1, K + 1):\n    tmp = A[tmp]\n    if done[tmp] >= 0:\n        for i in range((K - done[tmp]) % (k - done[tmp])):\n            tmp = A[tmp]\n        print((tmp + 1))\n        return\n    else:\n        done[tmp] = k\nprint((tmp + 1))\n", "def __starting_point():\n    \"\"\"\n    1 2 3 4 5 6 5\n    2 3 4 2 3 4 2\n    \"\"\"\n    n,k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    start = 1\n\n    loop_start = 0\n    loop_end = 0\n\n    steps = []\n    steps_map = {}\n\n    steps.append(start)\n\n    cur = start\n    for i in range(n):\n        cur = a[cur-1]\n        if cur in steps_map:\n            loop_start = steps_map[cur] # 1\n            loop_end = i+1  # 4\n            break\n        else:\n            steps.append(cur)\n            steps_map[cur] = i+1\n    \n    # print(loop_start, loop_end)\n    # print(steps)\n    if(k <= loop_start):\n        print((steps[k]))\n    else:\n        temp = (k - loop_start) % (loop_end - loop_start)\n        print((steps[temp + loop_start]))\n\n\n\n__starting_point()", "N,K=list(map(int,input().split()))\nA=list(map(int,input().split()))\nB=[0]*(N+1)\nB[0]=1;c=0;d=0\nif B[0] in A:c=B[0]\nfor i in range(1,N+1):\n  B[i]=A[B[i-1]-1]\n\nd=B.index(B[-1])+1\nif K<=N:print((B[K]));return\n#if (K+1-d)%(N+1-d)==0:print(B[-1])\nprint((B[d-1+(K+1-d)%(N+1-d)]))\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\ndic={}\nwk=1\nstart=0\nfor i in range(1,n+1):\n  wk=a[wk-1]\n  if wk in dic:\n    start=dic[wk]\n    break\n  dic[wk]=i\nend=len(dic)\nloopcnt=end-start+1\nkeys=list(dic.keys())\nif k<start:\n  print((keys[k-1]))\nelse:\n  chk=(k-start+1)%loopcnt\n  if chk==0:\n    chk=loopcnt\n  print((keys[(start-1)+chk-1]))\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ndic = {}\nlist_town = []\nset_town = set()\ntown = 1\n\nfor i, v in enumerate(A):\n    dic[i+1] = v\n\nfor _ in range(K):\n    list_town.append(town)\n    set_town.add(town)\n    town = dic[town]\n    if town in set_town:\n        stop_twon = town\n        break\n\nif N <= K:\n    list_first_split = list_town[:list_town.index(stop_twon)]\n    list_second_split = list_town[list_town.index(stop_twon):]\n    print(list_second_split[(K - (len(list_first_split))) % len(list_second_split)])\nelse:\n    print(town)", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na = [i-1 for i in a]\n\nd = [1]*n\np = 0\nb = []\nwhile d[p]:\n    b.append(p)\n    d[p] = 0\n    p = a[p]\navant = b.index(p)\nloop_count = len(b) - avant\nc = b[avant:]\n\nif k <= avant:\n    print((b[k]+1))\nelse:\n    k -= avant\n    k %= loop_count\n    print((c[k]+1))\n", "n,k = map(int,input().split())\na = list(map(int,input().split()))\n\ndist = [0 for i in [0]*(n+1)]\nidx = 1\nd = 1\nwhile not dist[idx] and d<k+1:\n    dist[idx] = d\n    idx = a[idx-1]\n    d += 1\n    #print(dist)\nif d==k+1:\n    print(idx)\nelse:\n    rem = dist[idx] - 1\n    cyc = d - dist[idx]\n    k -= rem\n    k %= cyc\n    for i in range(k):\n        idx = a[idx-1]\n    print(idx)", "n, k = [int(x) for x in input().split()]\na_list = [int(x) - 1 for x in input().split()]\nci = 0\nwhile k:\n    if k & 1:\n        ci = a_list[ci]\n    k >>= 1\n    a_list = [a_list[a_list[i]] for i in range(n)]\nprint(ci + 1)", "N, K = [int(i) for i in input().split()]\nAS = [int(i) for i in input().split()]\n\nvisited = set([1])\ncnt = 0\nt = [1]\np = 1\n\nwhile AS[p-1] not in visited and cnt < K:\n  a = AS[p-1]\n  visited.add(a)\n  t.append(a)\n  p = a\n  cnt += 1\n\nif cnt == K:\n  print((t[-1]))\n  import sys\n  return\n\nf_cnt = t.index(AS[p-1])\nloop_cnt = cnt + 1 - f_cnt\nprint((t[f_cnt+(K-f_cnt)%loop_cnt]))\n", "N,K=map(int,input().split())\nA=list(map(int,input().split()))\nB=[0]*N\nB[0]=1\nif B[0] in A:c=B[0]\nfor i in range(1,N):\n  B[i]=A[B[i-1]-1]\n \nd=B.index(B[-1])+1\nif K<=N:print(B[K]);return\nprint(B[d-1+(K+1-d)%(N-d)])", "import sys\n\n\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(v):\n    path.append(v)\n    visited[v] = 1\n    nv = A[v]\n    if visited[nv] == 1:\n        return nv\n    return dfs(nv)\n\n\nN, K = list(map(int, input().split()))\nA = list([int(x) - 1 for x in input().split()])\nvisited = [0] * N\npath = []\ncycle_start = dfs(0)\ncycle_len = len(path) - path.index(cycle_start)\nhead_len = len(path) - cycle_len\nif K <= head_len:\n    print((path[K] + 1))\nelse:\n    K -= head_len\n    print((path[head_len + K % cycle_len] + 1))\n", "import numpy as np\n\ndef main():\n    N,K = map(int,input().split())\n    A = [0]\n    A += list(map(int,input().split()))\n    A = np.array(A)\n    \n    i = 1\n    pas = np.zeros(N)\n    pas[0] = i\n    k = 1\n    pass_set = set(pas)\n    while k <= K:\n        if A[i] in pass_set:\n            rps = np.where(pas==(A[i]))[0]\n            ans = A[i]\n            break\n        pas[k] = A[i]\n        pass_set.add(A[i])\n        ans = A[i]\n        i = A[i]\n        k += 1\n\n    if k >= K:\n        print(ans)\n    else:\n        rpnum = (K-rps[0])%(k-rps)\n        print(int(pas[rps[0]+rpnum]))\n\nmain()", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nt = 0\ncount = 0\nvisited = [0]*n\nl_count = 0\n\nfor _ in range(k):\n    visited[t] += count\n    count += 1\n    t = a[t]-1\n\n    if visited[t] != 0:\n        break\n\nk = (k-count)%(count-visited[t])\n\nfor _ in range(k):\n    t = a[t] - 1\n\nprint((t+1))\n", "N,K=list(map(int,input().split()))\nA=[int(x) for x in input().split()]\nalready=set()\nalready.add(1)\nplacelist=[1]\nnumofmove=0\nnow=1\nloopstart=0\nloopend=0\nremain=0\nwhile(numofmove<K):\n    now=A[now-1]\n    #print(now)\n    numofmove+=1\n    placelist.append(now)\n    if now in already:\n        loopstart=placelist.index(now)\n        loopend=numofmove\n        #print(remain,numofmove,loopstart,loopend,placelist)\n        remain=(K-numofmove)%(loopend-loopstart)\n        for i in range(remain):\n            now=A[now-1]\n        break \n    else:\n        already.add(now)\nprint(now)\n", "#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\n\n# def input():\n#     return sys.stdin.readline().rstrip()\n\n\ndef main():\n    # n, k = map(int, sys.stdin.buffer.readline().split())\n    n, k = list(map(int, input().split()))\n\n    # warps = list(map(int, sys.stdin.buffer.readline().split()))\n    warps = list(map(int, input().split()))\n    warps = [0] + warps\n    warps = np.array(warps, dtype=int)\n\n    dp = np.zeros((k.bit_length() + 1, n + 1), dtype=int)\n\n    dp[0, :] = warps\n\n    for h in range(1, len(dp)):\n        dp[h] = dp[h - 1][dp[h - 1]]\n\n    node = 1\n    # for i in reversed(range(k.bit_length())):\n    for i in range(k.bit_length(), -1, -1):\n        if k >> i & 1:\n            node = dp[i][node]\n\n    print(node)\n\n\nmain()\n", "n,k = map(int, input().split())\na = list(map(int, input().split()))\n\ntele = [1]\nwent = set(tele)\nnow = 1\ncnt = 0\nflag = True\n\nfor i in range(k):\n  now = a[now-1]\n  if i != k-1 and now in went:\n    tele = tele[tele.index(now):]\n    cnt = i+1\n    flag = False\n    break\n  tele.append(now)\n  went.add(now)\n\nif flag == True:\n  print(tele[-1])\n\nelse:\n  k -= cnt\n  cnt = k % len(tele)\n  print(tele[cnt])", "N,K = map(int,input().split())\nA = [0] + list(map(int,input().split()))\n\nnow = 1\n\nwhile K:\n  if K & 1:\n    now = A[now]\n  A = [A[A[i]] for i in range(len(A))]\n  K >>= 1\n  \nprint(now)", "n, k = [int(x) for x in input().split()]\na_list = [int(x) - 1 for x in input().split()]\n\nci = 0\ntemp_dict = {0: 0}\ntemp_list = [0]\nfor i in range(1, k + 1):\n    temp = a_list[ci]\n    if temp in temp_dict:\n        ci = temp_list[(k - i) % (i - temp_dict[temp]) + temp_dict[temp]]\n        break\n    temp_dict[temp] = i\n    temp_list.append(temp)\n    ci = temp\nprint(ci + 1)", "N,K=map(int,input().split())\nA=list(map(int,input().split()))\nB=[0]*N\npoint=1\nm,l=0,0\nif K>N:\n    for i in range(N):\n        if B[point-1]==0:\n            B[point-1]=i+1\n            point=A[point-1]\n        else:\n            m=i+1-B[point-1]\n            l=B[point-1]\n            break\n    if m!=0:\n        m=(K-l)%m\n    else:\n        m=N\nelse:\n    m=K\nans=1\nfor i in range(l+m):\n    ans=A[ans-1]\n \nprint(ans)", "def main():\n    N,K = map(int,input().split())\n    A = [0] + list(map(int,input().split()))\n    \n    i = 1\n    pas = [i]\n    pas_set = set(pas)\n    k = 1\n    while k <= K:\n        if A[i] in pas_set:\n            rps = pas.index(A[i])\n            ans = A[i]\n            break\n        pas.append(A[i])\n        pas_set.add(A[i])\n        ans = A[i]\n        i = A[i]\n        k += 1\n\n    if k >= K:\n        print(ans)\n    else:\n        rpnum = (K-rps)%(k-rps)\n        print(pas[rps+rpnum])\n\nmain()", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nvisited = [0 for _ in range(N)]\nfirst_visit = [0 for _ in range(N)]\n\nnow = 0\nflag = True\nfor i in range(10 ** 5 * 5):\n    if first_visit[now] == 0:\n        first_visit[now] = i\n\n    visited[A[now] - 1] += 1\n    now = A[now] - 1\n\n    if i == K - 1:\n        print((now + 1))\n        flag = False\n        break\n\nif flag:\n    num = 0\n    for i in range(N):\n        if visited[i] > 2:\n            num += 1\n\n    for i in range(N):\n        if visited[i] >= 2:\n            if K % num == first_visit[i] % num:\n                print((i + 1))\n                break\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nB = [1]\nC = [1] + [0] * (N - 1)\ni = 0\n\nwhile C[A[i] - 1] == 0:\n    B.append(A[i])\n    C[A[i] - 1] = 1\n    i = A[i] - 1\n\nans = 0\nfor j in range(len(B)):\n    if B[j] == A[i]:\n        ans += j\n\nif (len(B) - ans != 0) and (K - ans > 0):\n    ans += (K - ans) % (len(B) - ans)\nelif K - ans <= 0:\n    ans = K\n\n\nprint(B[ans])", "n, k = map(int, input().split())\na = [-1] + list(map(int, input().split()))\n\nvisited = [0] * (1 + n)\ncurr = 1\nwhile k:\n    if visited[curr]:\n        break\n    else:\n        visited[curr] = k\n        curr = a[curr]\n        k -= 1\n        if k == 0:\n            print(curr)\n            return\nrepeat = visited[curr] - k\nk = k % repeat\nwhile k:\n    curr = a[curr]\n    k -= 1\nprint(curr)", "from copy import deepcopy\n\ndef main():\n    n, k = map(int, input().split())\n    a = [int(x)-1 for x in input().split()]\n    visited = set()\n    i = 0\n    cnt = 0\n    # \u9014\u4e2d\u3067\u524d\u306b\u884c\u3063\u305f\u3068\u3053\u308d\u306b\u884c\u3063\u305f\u3089\u7d42\u308f\u308a\n    # k\u304c\u5c0f\u3055\u304f\u3066cnt == k\u306b\u306a\u3063\u3066\u3082\u304a\u308f\u308a\n    while True:\n        if i in visited:\n            break\n        visited.add(i)\n        cnt += 1\n        i = a[i]\n        if cnt == k:\n            print(i+1)\n            return\n    k -= cnt\n    period = list()\n    period.append(i)\n    i = a[i]\n    # \u4f55\u56de\u3067\u540c\u3058\u5834\u6240\u306b\u623b\u308b\u304b\n    while True:\n        if i == period[0]:\n            break\n        period.append(i)\n        i = a[i]\n    # \u4f59\u308a\n    mod = k % len(period)\n    ans = period[mod]\n    print(ans+1)\n\ndef __starting_point():\n    main()\n__starting_point()", "n,k = list(map(int,input().split()))\nbutton = list(map(int,input().split()))\nvisit = [-1]*n\nhisitory = [-1]\npush = 0\nf = 0\n\nfor i in range(k):\n    visit[push] = i+1\n    hisitory.append(push)\n    push = button[push] -1\n    if(visit[push] != -1):  \n        f = 1\n        start = visit[push]\n        last=push\n        end = i+1\n        break\nif(f == 0):\n    print((button[hisitory[-1]]))\nelse:\n    geta = start -1\n    loopk = k - geta\n    loop = end -start + 1\n    modk = loopk%loop\n    if(modk == 0):\n        modk = loop\n    print((button[hisitory[geta + modk]]))\n    # print(hisitory)\n    # print(geta,modk,loop)\n", "N,K=list(map(int,input().split()))\nA=list(map(int,input().split()))\nB=[0]*N\nB[0]=1\nif B[0] in A:c=B[0]\nfor i in range(1,N):\n  B[i]=A[B[i-1]-1]\n\nd=B.index(B[-1])+1\nif K<=N:print((B[K]));return\nprint((B[d-1+(K+1-d)%(N-d)]))\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\npos = 0\nres = [-1] * 3*10**5\nd = 0\nway = []\nl = 0\nc = 0\n\nfor i in range(N) :\n    A[i] -= 1\n    \nfor i in range(K+1):\n    if(res[pos] != -1) :\n        l = d - res[pos]\n        c = d - l\n        res[pos] = d\n        break\n    res[pos] = d\n    way.append(pos)\n    d += 1\n    pos = A[pos]\n\nans = 0\nif(K+1 <= len(way)) :\n    ans = way[K]\nelse :\n    K -= c\n    K = K%l\n    ans = way[K + c]\nprint(ans+1)", "N,K=[int(s) for s in input().split()]\nls=[int(s) for s in input().split()]\ntown=set()\ntown.add(1)\ntown_ls=[1]\nnow=1\nfor i in range(min([K,N])):\n  now=ls[now-1]\n  if now in town:\n    break\n  town.add(now)\n  town_ls.append(now)\n\nif i+1==K:\n  print(now)\nelse:\n  L=i+1\n  S=town_ls.index(now)\n  loop=L-S\n  #print(loop,S)\n  x=(K-S)%loop+S\n  print(town_ls[x])", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nd = {}\nfor i in range(1, n+1):\n    d[i] = 0\nl = [1]\nx = 1\nif n >= k:\n    for i in range(k):\n        x = a[x-1]\n    print(x)\n    return\nfor i in range(n):\n    x = a[x-1]\n    if d[x] == 1:\n        k -= l.index(x)\n        print(l[l.index(x):][k%(l.index(x)-len(l))])\n        return\n    l.append(x)\n    d[x] += 1\nprint(x)", "f=lambda:map(int,input().split())\nN,K=f()\n*A,=list(f())\nF=[-1]*(2*10**5+1)\n\nG=[]\nn=1\nwhile F[n]==-1:\n F[n]=len(G)\n G.append(n)\n n=A[n-1]\nt=len(G)-F[n]\nl=F[n]\nif (l<=K):\n K-=l\n K%=t\n K+=l\nprint(G[K]) ", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nimport numpy as np\ndef main():\n    n, k, *a = map(int, read().split())\n\n    cur = 1\n    path = [0] * (n + 1)\n    while k:\n        if path[cur]:\n            break\n        else:\n            path[cur] = k\n            cur = a[cur - 1]\n            k -= 1\n            if k == 0:\n                print(cur)\n                return\n    cycle = path[cur] - k\n    k = k % cycle\n    while k:\n        cur = a[cur - 1]\n        k -= 1\n    print(cur)\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import deque\n\ndef solve(A, K):\n    a = deque() # \u7e70\u308a\u8fd4\u3057\u90e8\u5206\n    seen = [False for _ in range(len(A))] # \u4e00\u5ea6\u898b\u305f\u304b\u3069\u3046\u304b\n    cur = 0\n    while True:\n        # \u4e00\u5ea6\u901a\u3063\u305f\u9802\u70b9\u3092\u898b\u3064\u3051\u305f\u3068\u304d\u306e\u51e6\u7406\n        if seen[cur]:\n            while a[0] != cur:\n                # \u6700\u521d\u306e\u4f59\u8a08\u306a\u6570\u624b\u5206\u3092\u9664\u53bb\u3059\u308b\n                K -= 1\n                a.popleft()\n\n                # K \u304c\u9650\u754c\u306b\u306a\u3063\u305f\u3089\u30ea\u30bf\u30fc\u30f3\n                if K == 0:\n                    return a[0] + 1\n            break\n\n        # \u6700\u521d\u306f\u611a\u76f4\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u3064\u3064\u3001\u5c65\u6b74\u3092\u30e1\u30e2\u3057\u3066\u3044\u304f\n        a.append(cur)\n        seen[cur] = True\n        cur = A[cur]        \n    return a[K % len(a)] + 1\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nA = [v - 1 for v in A]\nprint(solve(A, K))", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ndic = {}\nlist_town = []\nset_town = set()\ntown = 1\n\nfor i, v in enumerate(A):\n    dic[i+1] = v\n\nfor _ in range(K):\n    list_town.append(town)\n    set_town.add(town)\n    town = dic[town]\n    if town in set_town:\n        stop_town = town\n        break\n\nif N <= K:\n    list_first_split = list_town[:list_town.index(stop_town)]\n    list_second_split = list_town[list_town.index(stop_town):]\n    print(list_second_split[(K - (len(list_first_split))) % len(list_second_split)])\nelse:\n    print(town)", "from collections import defaultdict\n\nN, K = map(int, input().split())\n\nA = list(map(int, input().split()))\n\nvisited = [0] * N\n\ncurrent = 0\ni = 1\nwhile i <= K:\n    current = A[current] - 1\n    if visited[current] == 0:\n        visited[current] = i\n    else:\n        loop = i - visited[current]\n        num_loop = (K - i) // loop\n        i += loop * num_loop\n\n    i += 1\n\nans = current + 1\nprint(ans)", "N, K = map(int, input().split())\nA = list(map(lambda x: int(x) - 1, input().split()))\n\ndone = [-1]*N\ndone[0] = 0\n\ntmp = 0\ndone[0] = 0\nfor k in range(1, K + 1):\n    tmp = A[tmp]\n    if done[tmp] >= 0:\n        for _ in range((K - done[tmp]) % (k - done[tmp])):\n            tmp = A[tmp]\n        print(tmp + 1)\n        return\n    else:\n        done[tmp] = k\nprint(tmp + 1)", "N, K = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\ncheck = [0]*N\nima = 0\n\nfor i in range(K):\n  if check[A[ima]-1] != 0:\n    loopen = ima\n    check[ima] = i+1\n    looplen = check[ima] - check[A[ima]-1] + 1\n    loopend = i\n    break\n  if i == K-1:\n    print((A[ima]))\n    return\n  check[ima] = i+1\n  ima = A[ima]-1\n\noffset = (K-(i-looplen)-1)%looplen\nima = 0\nfor i in range(loopend-looplen+offset+1):\n  ima = A[ima]-1\nprint((ima+1))\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\np = 1\nt = [1]\nu = set()\nu.add(1)\nfor i in range(n):\n  p = a[p - 1]\n  if p not in u:\n    t.append(p)\n    u.add(p)\n  else:\n    break\nc = t.index(p)\nr = len(t) - c\nif k < len(t):\n  ans = t[k]\nelse:\n  if (k - c + 1) % r == 0:\n    ans = t[-1]\n  else:\n    ans = t[(k - c + 1) % r + c - 1]\nprint(ans)", "n,k = map(int,input().split())\nb = [bi-1 for bi in list(map(int,input().split()))]\na = 0\n\nf = [0]*n\nc = 1\nfor i in range(k):\n    if f[a]:\n        k %= c-f[a]\n        for i in range(k):\n            a = b[a]\n        print(a+1)\n        break\n    f[a] = c\n    k -= 1\n    c += 1\n    a = b[a]\nelse:\n    print(a+1)", "\nurl = \"https://atcoder.jp/contests/abc162/tasks/abc162_d\"\nimport itertools\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    route = []\n    istuka = [0] * (n+1)\n    next = 1\n    # \u540c\u3058\u8857\u306b\u8a2a\u308c\u308b\u307e\u3067\u30eb\u30fc\u30d7\n    for _ in range(k):\n        if istuka[next] == 1:\n            break\n        else:\n            istuka[next] = 1\n            route.append(next)\n        next = a[next - 1]\n    if n >= k:\n        print(next)\n        return\n    ans = route[route.index(next):]\n    idx = (k - route.index(next)) % len(ans)\n    print(ans[idx])\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n,k=map(int,input().split())\n    a=[int(i)-1 for i in input().split()]\n    visit=[False]*n\n    visit[0]=True\n    loop, loopstart, loopout, cur=0, -1, False, 0\n    i = 0\n    while i < k:\n        #print(\"{}->{}\".format(cur+1, a[cur]+1))\n        cur=a[cur]\n        if not loopout and visit[cur]:\n            #print(\"OnLoop\", k)\n            if loopstart == cur:\n                k=(k-sum(visit))%loop\n                loopout=True\n                #print(\"OutLoop\", k)\n                i = 0\n                continue\n            elif loopstart == -1:\n                #print(\"loop start with\", cur+1)\n                loopstart = cur\n            loop+=1\n        else:\n            visit[cur]=True\n        i += 1\n    print(cur+1)\n    \ndef __starting_point():\n    main()\n__starting_point()", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nn, k = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\n\ntmp = [0 for i in range(n + 1)]\ncnt = 0\nres = 1\n\nwhile cnt < k:\n    cnt += 1\n    if tmp[res] == 0:\n        tmp[res] = cnt\n    else:\n        cnt += (k - cnt) // (cnt - tmp[res]) * (cnt - tmp[res])\n        tmp[res] = cnt\n    res = A[res - 1]\n\nprint(res)\n", "N,K=map(int,input().split())\nA=list(map(int,input().split()))\n \ncount=[-1]*(N+1) #\u305d\u306e\u70b9\u3078\u6700\u521d\u306b\u5230\u9054\u3057\u305f\u56de\npos=1 #\u73fe\u5728\u5730\nnum=0 #\u8a66\u884c\u56de\u6570\nwhile count[pos]==-1:\n    count[pos]=num\n    pos=A[pos-1]\n    num+=1\n    \nloop=max(count)-count[pos]+1\n \nif num>K:\n        print(count.index(K))\nelif loop==1 and num<=K:\n    print(count.index(max(count)))\nelse:\n    start= num-loop\n    ans=(K-num)%loop\n    print(count.index(start+ans))", "n, k = map(int,input().split())\na = list(map(int,input().split()))\nl = [0]*n\ni=0\ncnt=0\nwhile l[i]==0:\n    l[i] = a[i]\n    i = a[i]-1 \n    cnt += 1\nstart = i+1\ni = 0\npre = 0\nwhile i+1!=start:\n    i = a[i]-1\n    pre += 1\nloop = cnt-pre\nif pre+loop<k:\n    k=(k-pre)%loop+pre\ni = 0\nfor _ in range(k):\n    i = a[i]-1\nprint(i+1)", "N, K = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\nord = [-1 for _ in range(N)]\nord[0] = 0\nv = A[0]-1\nroot = [0]\n\nwhile ord[v] == -1:\n    #ord\u306b\u4f55\u56de\u76ee\u306e\u30ef\u30fc\u30d7\u304b\u304c\u8a18\u9332\u3055\u308c\u308b\n    ord[v] = len(root)\n        #\u30ef\u30fc\u30d7\u306e\u8ecc\u8de1\u3092\u8a18\u9332\n    root.append(v)\n\n    #\u6b21\u306e\u5730\u70b9\u306b\u30ef\u30fc\u30d75\n    v = A[v]-1\n\n# print(ord)\n# print(root)\n\n#ord[v]:\u6700\u7d42\u5730\u70b9\uff08\u30eb\u30fc\u30d7\u8d77\u70b9 or \u30eb\u30fc\u30d7\u524d\u306e\u9053\u306e\u308a\uff09\n# \u30eb\u30fc\u30d7\u8d77\u70b9\u307e\u3067\u306e\u4f59\u5206\u306a\u624b\nl = ord[v]\n#\u30eb\u30fc\u30d7\u8ddd\u96e2\nc = len(root) - l\n\nif K < l:\n    #\u30eb\u30fc\u30d7\u524d\u306b\u30ef\u30fc\u30d7\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u6700\u7d42\u5730\u70b9\u3092\u51fa\u529b\n    ans = root[K]\nelse:\n    #\u30eb\u30fc\u30d7\u3059\u308b\u56de\u6570\u3092\u8a08\u7b97\n    # \u306f\u3058\u3081\u306b\u30eb\u30fc\u30d7\u8d77\u70b9\u307e\u3067\u306e\u4f59\u5206\u624b\u3092K\u304b\u3089\u5f15\u304f\n    K -= l\n    # \u30eb\u30fc\u30d7\u306emod\u3092\u8a08\u7b97\n    K %= c\n    # \u4f59\u5206\u624b\uff0b\u30eb\u30fc\u30d7\u306emod\u306e\u4f4d\u7f6e\u306e\u56fd\u306b\u6b62\u307e\u308b\n    ans = root[l+K]\nprint((ans+1))\n\n", "n,k = list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\n\nnow = 1\ncheck = [-1]*(n+1)\n\nfor i in range(k):\n  if check[now] == -1:\n    check[now] = i\n    now = a[now]\n  else:\n    loop = i - check[now]\n    afterloop = (k-(i-loop))%loop\n    print((check.index((i-loop) + afterloop)))\n    return\nprint(now)\n", "N,K = map(int,input().split())\nA = list(map(int,input().split()))\nG = [1]\n\nfor n in range(N-1):\n  G.append(A[G[n]-1])\n\nif len(G)<K:\n  a = G.index(G[-1])\n  b = len(G)-a-1\n  K = (K-a)%b+a\n\nprint(G[K])", "def main():\n    n, k = map(int, input().split())\n    inlis = list(map(int, input().split()))\n    flag = 0\n    trans = 0\n    now = 1\n    indic = dict()\n    indic[1] = 0\n\n    while flag < 1:\n        if trans < k:\n            trans += 1\n            tsugi = inlis[now-1]\n            now = tsugi\n            if tsugi not in indic:\n                indic[tsugi] = trans\n                #print(tsugi, indic)\n            else:\n                flag = 1\n                loop = trans - indic[tsugi]\n                yokei = indic[tsugi]\n                #print(loop, yokei)\n\n        if trans == k:\n            print(tsugi)\n            return\n    \n    loopamari = (k-yokei) % loop\n\n    for _ in range(loopamari):\n        tsugi = inlis[now-1]\n        now = tsugi\n    \n    print(now)\n    \n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\n\nN,K = map(int, input().split())\nA = [int(i) for i in input().split()]\nused_dict = defaultdict(int)\nused_dict[0] += 1\nnow_town = 0\nflag = False\n\nfor i in range(min(N,K)):\n    now_town = A[now_town]-1\n    if used_dict[now_town]:\n        used_dict[now_town] += 1\n        break\n    used_dict[now_town] += 1\nelse:\n    flag = True\n\nif not flag:\n    now_town2 = 0\n    cnt = 0\n    while 1:\n        if now_town2 == now_town:\n            for _ in range((K-cnt)%(i-cnt+1)):\n                now_town = A[now_town]-1\n            break\n        now_town2 = A[now_town2]-1\n        cnt += 1\nprint(now_town+1)", "N,K=list(map(int,input().split()))\nA=list(map(int,input().split()))\nB=[0]*(N+1)\nB[0]=1\nif B[0] in A:c=B[0]\nfor i in range(1,N+1):\n  B[i]=A[B[i-1]-1]\n\nd=B.index(B[-1])+1\nif K<=N:print((B[K]));return\nprint((B[d-1+(K+1-d)%(N+1-d)]))\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ndic = {}\nfor i, v in enumerate(A):\n    dic[i+1] = v\n\ntown = 1\ns = set()\nl = []\nfor _ in range(K):\n    l.append(town)\n    s.add(town)\n    town = dic[town]\n    if town in s:\n        stop_twon = town\n        break\nif N <= K:\n    list_first_split = l[:l.index(stop_twon)]\n    list_second_split = l[l.index(stop_twon):]\n    print(list_second_split[(K - (len(list_first_split))) % len(list_second_split)])\nelse:\n    print(town)", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nb=[0]*(n+1)\ncount=0\nnow=1\nf=1\nfor _ in range(k):\n    if b[now]:\n        f=0\n        break\n    count+=1\n    b[now]=count\n    now=a[now-1]\nif f:\n    print(now)\n    return\nx=count-b[now]+1\ny=(k-b[now]+1)%x\nfor i in range(y):\n    now=a[now-1]\nprint(now)", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA = [a - 1 for a in A]\n\ntown = [-1] * N\n\nmove = 0\nnow = 0\nwhile move < K:\n    town[now] = move\n    now = A[now]\n    move += 1 \n    if town[now] != -1:\n        break\n\ncnt = (K - move) % (move - town[now])\n\nfor i in range(cnt):\n    now = A[now]\n\nprint((now + 1))\n", "N,K=map(int,input().split())\nAlist=list(map(int,input().split()))\nalready=[1]\nalreadyset={1}\nlast=1\nwhile True:\n    if Alist[last-1] in alreadyset:\n        start=already.index(Alist[last-1])\n        break\n    already.append(Alist[last-1])\n    alreadyset.add(Alist[last-1])\n    last=Alist[last-1]\nroop=len(already)-start\nif K-len(already)<0:\n    print(already[K])\nelse:\n    index=(K-start)%roop+start\n    while not start<=index<len(already):\n        index=index%roop+start\n    print(already[index])", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndef index_multi(l, x):\n    return [i for i, _x in enumerate(l) if _x == x]\n\nt = 0\nlis = [1]\ncount = [0] + [-1] * (n - 1) #\u5230\u9054\u56de\u6570\nfor i in range(2 * (10 ** 5) + 1):\n    lis.append(a[t])\n    t = a[t] - 1\n    count[t] += 1\n#print(lis)\n#print(count)\nl_start_number = 0\nfor i in range(n):\n    if count[i] > 0:\n        l_start_number = i + 1\n        break\n\nl_start = index_multi(lis, l_start_number)[0]\nl_goal = index_multi(lis, l_start_number)[1] - 1\n\nloop_lis = []\nfor i in range(l_start, l_goal + 1):\n    loop_lis.append(lis[i])\n#print(loop_lis)\n\nloop = len(loop_lis)\nif k >= l_start:\n    count = (k - l_start) % loop\n    print((loop_lis[count]))\nelse:\n    print((lis[k]))\n", "from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\n\nn,k=nii()\na=lnii()\n\nx=0\nx_list=[1]\nx_table=[0 for i in range(n+1)]\nx_table[1]=1\n\nfor i in range(k):\n  nx=a[x]\n\n  if x_table[nx]!=0:\n    inx=x_list.index(nx)\n    loop=x_list[inx:]\n    zan=k-i\n\n    q=zan%len(loop)\n\n    nx=loop[q-1]\n    break\n\n  else:\n    x=nx-1\n    x_list.append(nx)\n    x_table[nx]+=1\n\nprint(nx)", "N,K=list(map(int,input().split()))\nA=list(map(int,input().split()))\nB=[0]*(N+1)\nB[0]=1;c=0;d=0\nif B[0] in A:c=B[0]\nfor i in range(1,N+1):\n  B[i]=A[B[i-1]-1]\n#  if c==B[i]:break\n#  if A.count(B[i])>1 and d==0:c=B[i];d+=1\n\nd=B.index(B[-1])+1\n#print(B.index(B[N-1]))\n\n#print(B,d)\n#print(d+1+(K-d-1)%(N-d-1))\n#print(B[K],K,d,(K+1-d),(N+1-d))\nif K<=N:print((B[K]));return\nif (K+1-d)%(N+1-d)==0:print((B[-1]))\nelse:print((B[d-1+(K+1-d)%(N+1-d)]))\n#print(B[d+1+(K-d-1)%(N-d-1)]-1)\n", "from collections import defaultdict\ndef main():\n    n, k = map(int, input().split(\" \"))\n    a = list(map(lambda i: int(i)-1, input().split(\" \")))\n    s = [0]\n    d = defaultdict(lambda:0)\n    x = a[0]\n    for i in range(n):\n        s.append(x)\n        x = a[x]\n\n    bb=None\n    for i in range(n):\n        d[s[i]] += 1\n        if d[s[i]] ==2:\n            bb=s[i]\n            break\n\n    cc = s.index(bb)\n    s[cc]=-1\n    dd = s.index(bb)\n    loop_len = dd-cc\n    s[cc]=s[dd]\n        \n    if bb ==None or k < cc:\n        print(s[k]+1)\n    else:\n        y = (k-cc) % loop_len\n        print(s[y+cc]+1)\n\ndef __starting_point():\n    main()\n__starting_point()", "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nt = 0\ncount = 0\nvisited = [0]*n\nl_count = 0\n\nfor _ in range(k):\n    visited[t] += count\n    count += 1\n    t = a[t]-1\n\n    if visited[t] != 0:\n        break\n\nk = (k-count)%(count-visited[t])\n\nfor _ in range(k):\n    t = a[t] - 1\n\nprint(t+1)", "from collections import deque\nimport sys\nn,k = map(int, input().split())\nA = list(map(int, input().split()))\nA = list(map(lambda x:x-1, A))\nseen = [0]*n\nli = deque()\npos = 0\nwhile True:\n    if seen[pos]:\n        while li[0]!=pos:\n            li.popleft()\n            k-=1\n            if k==0:\n                print(li[0]+1)\n                return\n        break\n    li.append(pos)\n    seen[pos] = 1\n    pos = A[pos]\n\nprint(li[k%len(li)]+1)", "N,K = map(int,input().split())\nA = [0] + list(map(int,input().split()))\n\nnow = 1\nroute = []\ndic = {}\ncnt = 0\nentry = []\nloop = []\n\nwhile True:\n  cnt += 1\n  now = A[now]\n  route.append(now)\n  if now in dic:\n    entry = route[:dic[now]]\n    loop = route[dic[now]:]\n    break\n  dic[now] = cnt\n\nif K <= len(entry):\n  print(entry[K - 1])\nelse:\n  K -= 1\n  K -= len(entry)\n  K %= len(loop)\n  print(loop[K])", "from collections import defaultdict\nN,K = list(map(int,input().split()))\nN_List = list(map(int,input().split()))\n\nN_Dict = defaultdict(int)\nN_Dict[1] = 1\nPos = N_List[0]\nfor i in range(N):\n    N_Dict[Pos] += 1\n    if N_Dict[Pos] == 2:\n        break\n    else:\n        Pos = N_List[Pos - 1]\n\n##\u30eb\u30fc\u30d7\u59cb\u70b9\u304cPos\u306b\u5165\u3063\u3066\u3044\u308b\u72b6\u614b\n##\u30eb\u30fc\u30d7\u304c\u3069\u306e\u304f\u3089\u3044\u306e\u9577\u3055\u304b\u77e5\u308a\u305f\u3044\nCPos = Pos\nflg = 0\nLoop_List = [CPos]\nwhile flg == 0:\n    CPos = N_List[CPos-1]\n    if CPos != Pos:\n        Loop_List.append(CPos)\n    else:\n        flg = 1\n\n##\u30eb\u30fc\u30d7\u306e\u59cb\u70b9\u306b\u81f3\u308b\u307e\u3067\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\nFL = len(N_Dict) - len(Loop_List) \nif FL <= K:\n    ans = Loop_List[(K - FL) % len(Loop_List)]\nelse:\n    ans =list(N_Dict.keys())[K]\nprint(ans)\n", "#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    # n, k = map(int, sys.stdin.buffer.readline().split())\n    n, k = list(map(int, input().split()))\n\n    # warps = list(map(int, sys.stdin.buffer.readline().split()))\n    warps = list(map(int, input().split()))\n    warps = [0] + warps\n    warps = np.array(warps, dtype=int)\n\n    dp = np.zeros((k.bit_length() + 1, n + 1), dtype=int)\n\n    dp[0, :] = warps\n\n    for h in range(1, len(dp)):\n        dp[h] = dp[h - 1][dp[h - 1]]\n\n    node = 1\n    # for i in reversed(range(k.bit_length())):\n    for i in range(k.bit_length(), -1, -1):\n        if k >> i & 1:\n            node = dp[i][node]\n\n    print(node)\n\n\nmain()\n", "N, K = list(map(int, input().split()))\nA = list([int(x)-1 for x in input().split()])\n\ncnts = [None] * N\n\npos = 0\ncnt = 0\n\nwhile cnt < K:\n    if cnts[pos] != None:\n        loop_size = cnt - cnts[pos]\n        cnt += ((K-cnt-1) // loop_size) * loop_size\n        cnts = [None] * N\n    cnts[pos] = cnt\n    pos = A[pos]\n    cnt += 1\n\nprint((pos+1))\n\n", "f=lambda:map(int,input().split())\nN,K=f()\n*A,=list(f())\n \nF=[-1]*(2*10**5+1)\nG=[] \ni=1\nwhile F[i]==-1:\n    F[i]=len(G)\n    G.append(i)\n    i=A[i-1]\nt=F[i]\nif (K<t):\n    print(G[K])\nelse:\n    G=G[t:]\n    print(G[(K-t)%len(G)]) ", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ncount = 0\n\nstack = set()\nvisited = []\nvisited_set = set()\nendf = False\n\ncurrent = 0\nwhile True:\n    i = A[current]-1\n    visited_set.add(current)\n    visited.append(current)\n\n    if not i in visited_set:\n        current = i\n        count += 1\n    else:\n        leng = len(visited_set)\n        roop_len = leng - visited.index(i)\n        header_len = leng - roop_len\n        break\n\n    if count >= K:\n        endf = True\n        print(i+1)\n        break\n\nif not endf:\n    roop_ind = (K - header_len + 1) % roop_len\n    if roop_ind == 0:\n        print(visited[-1]+1)\n    else:\n        print(visited[header_len + roop_ind-1]+1)", "N,K = map(int,input().split())\nlsA = [0]+list(map(int,input().split()))\nls = []\nset1 = set()\na = 1\nfor i in range(N+1):\n    if a in set1:\n        loop = ls[ls.index(a):]\n        lenloop = len(loop)\n        startls = ls[:ls.index(a)]\n        break\n    ls.append(a)\n    set1.add(a)\n    a = lsA[a]\nif K < len(startls):\n    ans = startls[K]\nelse:\n    ans = loop[(K-len(startls))%lenloop]\nprint(ans)", "n, k = map(int, input().split())\na = [-1] + list(map(int, input().split()))\n\nvisited = [0] * (1 + n)\ncurr = 1\nwhile k:\n    if visited[curr]:\n        break\n    else:\n        visited[curr] = k\n        curr = a[curr]\n        k -= 1\n        if k == 0:\n            print(curr)\n            return\nrepeat = visited[curr] - k\nk = k % repeat\nwhile k:\n    curr = a[curr]\n    k -= 1\nprint(curr)", "n, k = map(int, input().split())\nA = list(map(lambda x: int(x) - 1, input().split()))\nprev = 0\ncount = 0\nused = {prev: count}\nfor _ in range(min(k, n)):\n  prev = A[prev]\n  count += 1\n  if prev in used:\n    break\n  used[prev] = count\nif count > used[prev]:\n  for _ in range((k - used[prev]) % (count - used[prev])):\n    prev = A[prev]\nprint(prev + 1)", "N,K = map(int,input().split())\nA = list(map(int,input().split()))\nc = 0\nList = []\ncheck = [-1]*N\ntmp = 1\nfor i in range(min(N+1,K)):\n    tmp2 = A[tmp-1]\n    List.append(tmp2)\n    if(check[tmp2-1] >= 0):\n        tmp3 = check[tmp2-1]\n        del List[-1]\n        break\n    else:\n        check[tmp2-1] = i\n        tmp = tmp2\n        c += 1\nif(c >= K):\n    print(List[K-1])\nelse:\n    List2 = List[tmp3:]\n    if(c == len(List2)):\n        print(List2[(K%len(List2))-1])\n    else:\n        K -= c\n        print(List2[(K%len(List2))-1])", "n,k = map(int,input().split())\na = list(map(int,input().split()))\na = list(map(lambda x: x-1,a))\n    \nvisited = [-1] * n\nnow = 0\n\nfor i in range(k):\n    if visited[now] != -1:#\u8a2a\u308c\u305f\u3053\u3068\u304c\u3042\u308b\u304b\n        loop = i - visited[now]   #\u30eb\u30fc\u30d7\u306e\u5927\u304d\u3055\n        k = (k-(i-loop)) % loop\n        \n        for _ in range(k):\n            now = a[now]\n        \n        break\n        \n    visited[now] = i\n    now = a[now] \n        \nprint(now + 1)", "f=lambda:map(int,input().split())\nN,K=f()\n*A,=list(f())\n \nF=[-1]*(2*10**5+1)\nG=[] \ni=1\nwhile F[i]==-1:\n    F[i]=1\n    G.append(i)\n    i=A[i-1]\nt=G.index(A[G[-1]-1])\nif (K<t):\n    print(G[K])\nelse:\n    G=G[t:]\n    print(G[(K-t)%len(G)]) ", "f=lambda:map(int,input().split())\nN,K=f()\n*A,=[0]+list(f())\nF=[0]*(2*10**5+1)\n\nG=[1]\nF[1]=1\ni=0\nwhile i<=N:\n n=A[G[-1]]\n if F[n]:break\n F[n]=1\n G.append(n)\n i+=1\nt=G.index(A[G[-1]])\nif (t<=K):\n G=G[t:]\n K=(K-t)%len(G)\nprint(G[K]) ", "f=lambda:map(int,input().split())\nN,K=f()\n*A,=list(f())\n \nF=[0]*(2*10**5+1)\n \nG=[1]\nF[1]=1\ni=0\nwhile i<=N:\n    new=A[G[-1]-1]\n    if F[new]==1:break\n    F[new]=1\n    G.append(new)\n    i+=1\nt=G.index(A[G[-1]-1])\nif (K<t):\n    print(G[K])\nelse:\n    G=G[t:]\n    print(G[(K-t)%len(G)]) ", "#!/usr/bin/env python3\n\nimport numpy as np\n\n\n# def input():\n#     return sys.stdin.readline().rstrip()\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n\n    warps = list(map(int, input().split()))\n    warps = [0] + warps\n    warps = np.array(warps, dtype=int)\n\n    dp = np.zeros((k.bit_length() + 1, n + 1), dtype=int)\n\n    dp[0, :] = warps\n\n    for h in range(1, len(dp)):\n        # dp[h] = dp[h - 1][dp[h - 1]]\n        dp[h] = np.take(dp[h - 1], dp[h - 1])\n\n    node = 1\n    # for i in reversed(range(k.bit_length())):\n    for i in range(k.bit_length(), -1, -1):\n        if k >> i & 1:\n            node = dp[i][node]\n\n    print(node)\n\n\nmain()\n", "f=lambda:map(int,input().split())\nN,K=f()\n*A,=[0]+list(f())\n\nF=[0]*(2*10**5+1)\n\nG=[1]\nF[1]=1\ni=0\nwhile i<=N:\n    new=A[G[-1]]\n    if F[new]==1:break\n    F[new]=1\n    G.append(new)\n    i+=1\n#print(G,A[G[-1]],G.index(A[G[-1]]))\nt=G.index(A[G[-1]])\nif (K<t):\n    print(G[K])\nelse:\n    G=G[t:]\n    print(G[(K-t)%len(G)]) ", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\ndic={}\nwk=1\nstart=0\nfor i in range(1,n+1):\n  wk=a[wk-1]\n  if wk in dic:\n    start=dic[wk]\n    break\n  dic[wk]=i\nend=len(dic)\nloopcnt=end-start+1\nkeys=list(dic.keys())\nif k<start:\n  print((keys[k-1]))\nelse:\n  chk=(k-start+1)%loopcnt\n  if chk==0:\n    chk=loopcnt\n  print((keys[(start-1)+chk-1]))\n", "#\u5165\u529b:N,M(int:\u6574\u6570)\ndef input2():\n\treturn map(int,input().split())\n\n#\u5165\u529b:[n1,n2,...nk](int:\u6574\u6570\u914d\u5217)\ndef input_array():\n\treturn list(map(int,input().split()))\n  \nn,k=input2()\nA=input_array()\n\n# \u3042\u308b\u5730\u70b9\u304b\u3089\u5faa\u74b0\u306b\u9665\u308b\njudge=[True]*n\ntmps=[1] #\u5faa\u74b0\u624b\u524d\ncount=0 #\u53c2\u7167\u5730\u70b9\n\nfor i in range(2*(10**5)+1):\n\tif judge[count]==True:\n\t\tjudge[count]=False\n\t\tcount=A[count]-1\n\t\ttmps.append(count+1)\n\telse:\n\t\tbreak\n\nloop_st=tmps.index(tmps[-1])\nloops=tmps[loop_st:-1]\n\n\nif k<loop_st:\n\tprint(tmps[k])\nelse:\n\tk=k-loop_st\n\tk%=len(loops)\n\tprint(loops[k])", "#!/usr/bin/env python3\n\nimport numpy as np\n\n\n# def input():\n#     return sys.stdin.readline().rstrip()\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n\n    warps = list(map(int, input().split()))\n    warps = [0] + warps\n    # warps = np.array(warps, dtype=int)\n\n    # order_num = np.zeros(len(warps) + 1, dtype=int)\n    order_num = [0 for i in range(len(warps))]\n    path_history = []\n\n    node = 1\n    while order_num[node] == 0:\n        path_history.append(node)\n        order_num[node] = len(path_history)\n        node = warps[node]\n\n    # print(order_num)\n    # print(path_history)\n    begin = order_num[node]\n    # print(tail)\n\n    if k <= begin:\n        print((path_history[k]))\n    else:\n        # path_history = path_history[tail:]\n        # print(path_history)\n        leng = len(path_history) - order_num[node] + 1\n        # print(leng)\n        index = (k - (begin - 1)) % leng\n        # print(index)\n        print((path_history[begin - 1 + index]))\n\n\nmain()\n", "def delete_head_zeros(n):\n\tn = str(n)\n\tl = len(n)\n\tif \".\" in n:\n\t\tl = n.find(\".\")\n\thead_zeros = 0\n\tfor i in range(l - 1):\n\t\tif n[i] == \"0\":\n\t\t\thead_zeros += 1\n\t\telse:\n\t\t\tbreak\n\n\treturn n[head_zeros:]\n\n# compare a, b\n# a, b: int or string\ndef bigint_compare(a, b):\n\ta = delete_head_zeros(a)\n\tb = delete_head_zeros(b)\n\tif len(a) > len(b):\n\t\treturn 1\n\telif len(a) < len(b):\n\t\treturn -1\n\telse:\n\t\tif a > b:\n\t\t\treturn 1\n\t\telif a < b:\n\t\t\treturn -1\n\t\telse:\n\t\t\treturn 0\n\n# calculate a + b\n# a, b: int or string\ndef bigint_plus(a, b):\n\ta = str(a)\n\tb = str(b)\n\n\td = max([len(a), len(b)])\n\ta = '0' * (d - len(a)) + a\n\tb = '0' * (d - len(b)) + b\n\n\tans = \"\"\n\tcarry = 0\n\tfor i in range(d):\n\t\ts = int(a[-i-1]) + int(b[-i-1]) + carry\n\t\tcarry = s // 10\n\t\tans = str(s % 10) + ans\n\telse:\n\t\tif carry:\n\t\t\tans = str(carry) + ans\n\n\treturn ans\n\n# calculate a - b\n# a, b: int or string\ndef bigint_minus(a, b): \n\ta = str(a)\n\tb = str(b)\n\tM = []\n\tm = []\n\tsign = \"\"\n\n\tif len(a) > len(b) or (len(a) == len(b) and a >= b):\n\t\t[M, m] = [a, b]\n\telse:\n\t\t[M, m] = [b, a]\n\t\tsign = \"-\"\n\tm = '0' * (len(M) - len(m)) + m\n\n\tans = \"\"\n\tborrow = 0\n\tfor i in range(len(M)):\n\t\ts = int(M[-i-1]) - int(m[-i-1]) - borrow\n\t\tif s < 0:\n\t\t\tborrow = 1\n\t\t\ts += 10\n\t\telse:\n\t\t\tborrow = 0\n\t\tans = str(s) + ans\n\n\treturn sign + delete_head_zeros(ans)\n\n# calculate a * b\n# a, b: int or string\ndef bigint_multiply(a, b):\n\ta = str(a)\n\tb = str(b)\n\n\tmd = []\n\tfor j in range(len(b)):\n\t\tcarry = 0\n\t\tmj = \"\"\n\t\tfor i in range(len(a)):\n\t\t\tm = int(a[-i-1]) * int(b[-j-1]) + carry\n\t\t\tcarry = m // 10\n\t\t\tmj = str(m % 10) + mj\n\t\telse:\n\t\t\tif carry:\n\t\t\t\tmj = str(carry) + mj\n\t\tmd.append(mj)\n\n\tans = 0\n\tfor k in range(len(md)):\n\t\tans = bigint_plus(md[k] + \"0\" * k, ans)\n\n\treturn ans\n\n\n# calculate a / b to d digits after decimal point\n# a, b, d: int or string\ndef bigint_divide(a, b, d = 0):\n\ta = str(a)\n\tb = str(b)\n\td = int(d)\n\tif d < 0:\n\t\td = 0\n\n\tans = \"\"\n\tr = \"\"\n\tfor i in range(len(a) + d):\n\t\tq = 0\n\t\tif i < len(a):\n\t\t\tr += a[i]\n\t\telif i == len(a):\n\t\t\tans += \".\"\n\t\t\tr += \"0\"\n\t\telse:\n\t\t\tr += \"0\"\n\n\t\tif bigint_compare(r, b) == -1:\n\t\t\tans += str(q)\n\t\telse:\n\t\t\twhile bigint_compare(r, b) >= 0:\n\t\t\t\tr = bigint_minus(r, b)\n\t\t\t\tq += 1\n\t\t\tans += str(q)\n\n\treturn delete_head_zeros(ans)\n\ndef main():\n\tN, K = input().split(\" \")\n\tA = [int(a) - 1 for a in input().split(\" \")]\n\tvisited = [0] * int(N)\n\ttowns = []\n\tnow = 0\n\twhile visited[now] == 0:\n\t\ttowns.append(now)\n\t\tvisited[now] = 1\n\t\tnow = A[now]\n\telse:\n\t\tloop_begin_idx = towns.index(now)\n\t\tloop_end_idx = len(towns) - 1\n\t\tloop_n = loop_end_idx - loop_begin_idx + 1\n\tif int(K) < len(towns):\n\t\tprint((towns[int(K)] + 1))\n\t\treturn 0\n\tK_from_loop = bigint_minus(K, loop_begin_idx)\n\tq = bigint_divide(K_from_loop, loop_n)\n\tr = bigint_minus(K_from_loop, bigint_multiply(loop_n, q))\n\tprint((towns[loop_begin_idx + int(r)] + 1))\n\nmain()\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep  7 18:05:47 2020\n\n@author: liang\n\"\"\"\n\nN, K = map(int, input().split())\nA = [int(x) for x in input().split()]\nvisited = [-1]*N\nloop = list()\n\ncur = 1\ncnt = 0\nwhile visited[cur-1] == -1:\n#while True:\n    visited[cur-1] = cnt\n    loop.append(cur)\n    cnt += 1\n    cur = A[cur-1]\n    if cnt == K:\n        print(cur)\n        #print(loop)\n        break\nelse:\n    #print(loop)\n    loop = loop[visited[cur-1]:]\n    T = cnt -visited[cur-1]\n    #print(loop, T)\n    ans = loop[(K - cnt)%T]\n    print(ans)", "n,k = list(map(int,input().split()))\na = [0] + list(map(int,input().split()))\n\njourney = [1]\n\nfor i in range(2*n+1000):\n    nxt = a[journey[-1]]\n    journey.append(nxt)\n\nif k < n+1:\n    print((journey[k]))\n    return\n\nloop_end = n\n\nloop_start = n-1\n\nwhile(journey[loop_start] != journey[loop_end]):\n    loop_start -= 1\n\nperiod = loop_end - loop_start\nk %= period\n\nwhile k < n:\n    k += period\n\nprint((journey[k]))\n"]