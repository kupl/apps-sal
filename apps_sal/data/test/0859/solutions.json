["s=input()\nt=input()\na=0\nb=0\nc=0\nfor i in range(len(s)):\n   if s[i]=='+':a+=1\n   else:a-=1\nfor i in range(len(t)):\n   if t[i]=='+':b+=1\n   elif t[i]=='-':b-=1\n   else:c+=1\nx=a-b\nd=0-c\ny=0-1\nfor i in range(c+1):\n   if d==x:y=i\n   d+=2\n\ndef fact(n):\n   w=1\n   for i in range(n):\n      w*=(i+1)\n   return(w)\n  \ndef parmi(k,n):\n   w=1\n   w*=fact(n)\n   w//=fact(k)\n   w//=fact(n-k)\n   return(w)\n   \ndef puiss(k,n):\n   w=1\n   for i in range(n):\n      w*=k\n   return(w)\n   \nif y==-1:print(0.0)\nelse:print(parmi(y,c)/puiss(2,c))\n", "\n\nimport itertools\na = input()\nb = input()\n\nap = a.count('+')\nam = a.count('-')\nbp = b.count('+')\nbm = b.count('-')\nbq = b.count('?')\n\n\nif bq == 0:\n    if ap == bp:\n        print(1.0)\n    else:\n        print(0.0)\nelse:\n    mas = list(itertools.product('+-', repeat=bq))\n    if ap >= bp and am >= bm:\n        ap -= bp\n        am -= bm\n        count = 0\n        for el in mas:\n            tmp_s = \"\".join(el)\n            if tmp_s.count('+') == ap and tmp_s.count('-') == am:\n                count += 1\n        print(count / len(mas))\n    else:\n        print(0.0)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport itertools\n\n\ns1 = input()\ns2 = input()\n\ns1_p = s1.count('+')\ns1_n = s1.count('-')\n\ns2_p = s2.count('+')\ns2_n = s2.count('-')\ns2_q = s2.count('?')\n\ncorrect_pos = s1_p - s1_n\ndrea_pos = s2_p - s2_n\n\ndiff_pos = correct_pos - drea_pos\n\nif s2_q == 0:\n    if diff_pos == 0:\n        print(1.0)\n    else:\n        print(0.0)\nelse:\n    #print(\"diff_pos = \", diff_pos)\n    num = 0\n    den = 0\n    for c in itertools.product([1, -1], repeat=s2_q):\n        if sum(c) == diff_pos:\n           num += 1 \n        den += 1\n    print(\"{0:.10f}\".format(float(num) / den))\n\n\n\n", "import math\n\n#input\n\ns1=str(input())\ns2=str(input())\n\n\n\n#variables\nsum1=0\nsum2=0\nsteps=0\n\n\ndef prob(x,y):\n\tif x>y:\n\t\treturn 0\n\telif y==0:\n\t\tif x==0:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn 0\n\telse:\n\t\treturn (prob(x-1,y-1)+prob(x+1,y-1))/2\n\n\n#main\nfor i in range(len(s1)):\n\tif s1[i]=='+':\n\t\tsum1+=1\n\tif s1[i]=='-':\n\t\tsum1-=1\n\tif s2[i]=='+':\n\t\tsum2+=1\n\tif s2[i]=='-':\n\t\tsum2-=1\n\tif s2[i]=='?':\n\t\tsteps+=1\n\nend=sum2-sum1\n\nprint(prob(end,steps))", "'''\nCreated on Oct 12, 2014\n\n@author: Ismael\n'''\nfrom collections import Counter\n\nfrom math import factorial,log,sqrt\n\ndef nbCombinations(r, n):\n    return factorial(n) // factorial(r) // factorial(n-r)\n\ns1 = input()\ns2 = input()\ncounterS1 = Counter(s1)\ncounterS2 = Counter(s2)\nif(counterS1 == counterS2):\n    print(\"1.000000000000\")\nelse:\n    if('?' not in counterS2):\n        print(\"0.000000000000\")\n    else:#there is at least one ? in s2\n        nbPlusToMuch = counterS2['+']-counterS1['+']\n        nbMinusToMuch = counterS2['-']-counterS1['-']\n        if(nbPlusToMuch > 0 or nbMinusToMuch > 0):\n            print(\"0.000000000000\")\n        else:\n            if(nbPlusToMuch < 0):\n                k = abs(nbPlusToMuch)\n            else:\n                k = abs(nbMinusToMuch)\n            n = counterS2['?']\n            print(nbCombinations(k, n)*(0.5**n))\n", "# 272 D2 B\n\ndef factorial(n):\n    i = 1\n    for j in range(1,n+1):\n        i *= j\n    return i\n\ndef choose(n,r):\n    return int(factorial(n)/factorial(r)/factorial(n-r))\n\nl = list(input())\nexp = 0\nfor i in range(len(l)):\n    if l[i] == \"+\":\n        exp += 1\n    else:\n        exp -= 1\n\nl1 = list(input())\ndis = 0\nunrec = 0\nfor i in range(len(l1)):\n    if l1[i] == \"+\":\n        dis += 1\n    elif l1[i] == \"-\":\n        dis -= 1\n    else:\n        unrec += 1\n\n\nif abs(exp - dis) > unrec:\n    print(0)\nelif unrec == 0:\n    print(1)\nelse:\n    print(choose(unrec,(abs(exp-dis)+int((unrec-abs(exp-dis))/2)))/2**unrec)\n", "def fac(n):\n    ret = 1\n    for i in range(2, n):\n        ret *= i\n    return ret\n\ndef C(n, k):\n    return fac(n) // fac(k) // fac(n - k)\n\ndef transform(s):\n    res = 0\n    for c in s:\n        if c == '0':\n            res += 1\n        else:\n            res -= 1\n    return res\n\ns1 = input().strip()\ns2 = input().strip()\n\ndx = sum([1 if c == '+' else -1 for c in s1])\n\nu = 0\ndx2 = 0\nfor c in s2:\n    if c == '?':\n        u += 1\n    else:\n        dx2 += 1 if c == '+' else -1\nif u == 0:\n    if dx == dx2:\n        print(1)\n    else:\n        print(0)\nelse:\n    if (abs(dx - dx2) > u):\n        print(0)\n    else:\n        d = abs(dx - dx2)\n        well = 0\n        for i in range(1 << u):\n            if transform(bin(i)[2:].rjust(u, '0')) == d:\n                well += 1\n        print(well / (1 << u))\n", "import math\n\ndef nCr(n,r):\n    f = math.factorial\n    return f(n) / f(r) / f(n-r)\n\nx=input()\nplus = x.count('+')\nminus = x.count('-')\nx=input()\nplus_ = x.count('+')\nminus_ = x.count('-')\nn=x.count('?')\na=plus-plus_\nb=minus-minus_\nif(a<0 or b<0 or a+b!=n):\n    print(0.0)\nelse:\n    print(nCr(n,a)/(1<<n))", "__author__ = 'neki'\n\nimport sys\n\n#sys.stdin = open(\"wifi.in\", \"r\")\n\ndef outcome(command):\n    pos = 0\n    for i in command:\n        if i == \"+\": pos += 1\n        elif i == \"-\": pos -= 1\n        else: print(\"Error\")\n    return pos\n\ndef computeFinishes(k):\n    nonlocal finish, recCommand, xCom, nSol\n\n    if k >= len(xCom): #solution\n        nSol += 1\n        #print(k)\n        solCom = recCommand[:]\n        for i in range(len(xCom)):\n            if xCom[i] == 1:\n                solCom[i] = \"+\"\n            if xCom[i] == 2:\n                solCom[i] = \"-\"\n        #print(xCom)\n        #print(solCom)\n        finish[outcome(solCom)] += 1\n        return\n    if recCommand[k] == \"?\":\n        for j in range(1, 3):\n            xCom[k] = j\n            computeFinishes(k+1)\n    else:\n        computeFinishes(k+1)\n    xCom[k] = 0\n\nsentCommand1 = str(input())\nrecCommand1 = str(input())\n\nsentCommand = [\"A\"] * len(sentCommand1)\nrecCommand = [\"B\"] * len(recCommand1)\n\nfor i in range(len(sentCommand1)):\n    sentCommand[i] = sentCommand1[i]\n    recCommand[i] = recCommand1[i]\n\n#print(sentCommand)\n#print(recCommand)\n\n#print(\"Solutions\")\nsentFinish = outcome(sentCommand)\nfinish = {}\nfor i in range(-10, 11):\n    finish[i] = 0\n\nxCom = [0] * len(recCommand)\n\nnSol = 0\ncomputeFinishes(0)\nresult = finish[sentFinish] / nSol\n\nprint(\"{result:.12f}\".format(result=result))\n", "from itertools import chain\n\nline = input()\np = line.count('+') - line.count('-')\nd = [0]\nfor c in input():\n\tif c == '-':\n\t\td = [x - 1 for x in d]\n\telif c == '+':\n\t\td = [x + 1 for x in d]\n\telse:\n\t\td = list(chain.from_iterable((x + 1, x - 1) for x in d))\nprint(round(d.count(p) / len(d), 9))\n", "import sys\nimport math\nimport os\n\n\ndata1=input()\ndata2=input()\n\na,b=0,0\nc,d=0,0\nvprs=0\n\nfor i in range (len(data1)):\n    if data1[i]=='+':\n        a+=1\n    else:\n        b+=1\n\n\nfor i in range(len(data2)):\n    if data2[i]=='+':\n        c+=1\n    elif data2[i]=='-':\n        d+=1\n    else:\n        vprs+=1\n\nif vprs==0:\n    if a==c and b==d:\n        print(\"%.9f\" % 1)\n        #print(1.000000000)\n    else:\n       # print(0.000000000)\n        print(\"%.9f\" % 0)\nelse:\n    if c>a or d>b:\n        #print(0.000000000)\n         print(\"%.9f\" % 0)\n    else:\n        deltaM=a-c\n        deltaP=b-d\n        total=2**vprs\n        fak1=1\n        fak2=1\n        fak3=1\n      #  print(deltaM,deltaP)\n        for i in range(1,vprs+1):\n            fak1*=i\n        for i in range(1,deltaM+1):\n            fak2*=i\n        for i in range(1,deltaP+1):\n            fak3*=i\n        #print(total)\n        #print((fak1/fak2)/total)\n        ans=(fak1/(fak2*fak3))/total\n       # print(fak1,fak2,fak3)\n        print(\"%.9f\" % ans)", "def main():\n    str1 = input()\n    str2 = input()\n    poz_real = 0\n    for i in range(len(str1)):\n        if str1[i] == '+':\n            poz_real += 1\n        else:\n            poz_real -= 1\n    poz = [0]\n    lent = 1\n    for i in range(len(str2)):\n        if str2[i] == '+':\n            for j in range(len(poz)):\n                poz[j] += 1\n        if str2[i] == '-':\n            for j in range(len(poz)):\n                poz[j] -= 1\n        if str2[i] == '?':\n            for j in range(len(poz) - int(lent), len(poz)):\n                poz.append(poz[j] - 1)\n                poz.append(poz[j] + 1)\n            lent *= 2\n    count_sovp = 0\n    was = []\n    for i in range(len(poz) - int(lent), len(poz)):\n        if poz[i] == poz_real:\n            count_sovp += 1\n    print(float(count_sovp/lent))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "fact = [1.0, 1.0,2.0,6.0, 24.0, 120.0, 720.0, 5040.0, 40320.0, 362880.0, 3628800.0]\ns = input()\ns1 = input()\nk, k1, kv = 0, 0, 0\nfor c in s:\n\tif c == '+':\n\t\tk += 1\n\telse:\n\t\tk -= 1\nfor c in s1:\n\tif c == '+':\n\t\tk1 += 1\n\tif c == '-':\n\t\tk1 -= 1\n\tif c == '?':\n\t\tkv += 1\n\nd = k - k1\nif d < 0:\n\td = -d\nif (d > kv) or ((d % 2) and not(kv % 2)):\n\tprint(0.0)\nelse:\n\tif (d == 0) and (kv == 0):\n\t\tprint(1.0)\n\telse:\n\t\tprint(fact[kv] / fact[int((kv - d) / 2)] / fact[kv - int((kv - d) / 2)] / (2.0**kv))", "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport itertools\n\ndef main():\n    send = input()\n    recv = input()\n\n    pos = 0\n    for c in send:\n        if c == '+':\n            pos += 1\n        else:\n            pos -= 1\n\n    est = 0\n    amb = 0\n    for c in recv:\n        if c == '+':\n            est += 1\n        elif c == '-':\n            est -= 1\n        else:\n            amb += 1\n\n    remain = pos - est\n\n    prob = 0.0\n    if amb == 0:\n        if remain == 0:\n            prob = 1.0\n        else:\n            prob = 0.0\n    else:\n        num = 0\n        den = 0\n        for seq in itertools.product( ( '+', '-' ), repeat = amb ):\n            den += 1\n            val = 0\n            for c in seq:\n                if c == '+':\n                    val += 1\n                else:\n                    val -= 1\n\n            if val == remain:\n                num += 1\n\n        prob = num / den\n\n    print( prob )\n\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def chng(c):\n    return -1 if c == '-' else ( 1 if c == '+' else 0)\n\ndef f(z, d):\n    if z == 0:\n        nonlocal al\n        al += 1\n        if d == 0:\n            nonlocal ne\n            ne += 1\n    else:\n        f(z - 1, d - 1)\n        f(z - 1, d + 1)\nA = input()\nB = input()\nn = len(A)\nx = 0\ny = 0\nz = 0\nfor i in range(n):\n    x += chng(A[i])\n    y += chng(B[i])\n    if B[i] == '?':\n        z += 1\nif z == 0 and x == y:\n    print(1)\nelse:\n    d = abs(x - y)\n    al = 0\n    ne = 0\n    f(z, d)\n    print(ne / al)\n#print(1 / (2 ** (z if z % 2 == 1 else z // 2)))\n", "#fin = open(\"input.txt\")\ns = input()#fin.readline()\nP, M = s.count(\"+\"), s.count(\"-\")\ns = input()#fin.readline()\np, m = s.count(\"+\"), s.count(\"-\")\nif (m > M or p > P):\n\tprint(0)\nelse:\n\tr = P + M - (p + m)\n\tdp = [[0.0] * (r + 1) for i in range(r + 1)]\n\tdp[0][0] = 1\n\tfor i in range(1, r + 1):\n\t\tfor j in range(i + 1):\n\t\t\t#print(i, j)\n\t\t\tif j - 1 >= 0:\n\t\t\t\t#print(dp[i - j][j - 1])\n\t\t\t\tdp[i - j][j] += dp[i - j][j - 1] / 2\n\t\t\tif i - j - 1 >= 0:\n\t\t\t\t#print(dp[i - j - 1][j])\n\t\t\t\tdp[i - j][j] += dp[i - j - 1][j] / 2\n\tprint(dp[P - p][M - m])\n", "def ans(p, k):\n    nonlocal d\n    if k == n:\n        d.append(p)\n        return\n    ans(p+1, k+1)\n    ans(p-1, k+1)\n    return\n\ns1 = input()\ns2 = input()\nb = 0\nk = 0\nd = []\n\nfor i in s1:\n    if i == '+':\n        b+=1\n    else:\n        b-=1\nfor i in s2:\n    if i == '+':\n        b-=1\n    elif i == '-':\n        b+=1\n    else:\n        k+=1\n        \nn = k\nans(0,0)\n#print(d)\ns=0\nfor i in d:\n    if i == b:\n        s+=1\n\n#c = (k-abs(b))/2\n#print(c)\n#g=f[k-1]/f[k-int(c)-1]/2\n#print(g)\nif b > k:\n    print('%.9f' % 0)\nelif b == k:\n    print('%.9f' % (1/(2**(k))))\nelif (k - b) % 2 == 0:\n    print('%.9f' % (s/(2**(k))))\nelse:\n    print('%.9f' % 0)", "s1 = input()\ns2 = input()\nP = s1.count(\"+\") - s1.count(\"-\")\nC = s2.count(\"+\") - s2.count(\"-\")\nGoal = abs(P-C)\nCnt = s2.count(\"?\")\nK = [ [0]*21 for i in range(11)]\nK[0][10] = 1.0\nfor i in range(1, Cnt+1) :\n    for j in range(0, 21, 1) :\n        if j-1 >= 0 :\n            K[i][j] += K[i-1][j-1] * 0.5\n        if j+1 <= 20 :\n            K[i][j] += K[i-1][j+1] * 0.5\nif Goal+10 <= 20 : print(K[Cnt][Goal+10])\nelse : print(0.0)\n", "'''\nCreated on Oct 12, 2014\n\n@author: Ismael\n'''\nfrom collections import Counter\n\nfrom math import factorial\n\ndef nbCombinations(r, n):\n    return factorial(n) // factorial(r) // factorial(n-r)\n\ns1 = input()\ns2 = input()\ncounterS1 = Counter(s1)\ncounterS2 = Counter(s2)\nif(counterS1 == counterS2):\n    print(\"1.000000000000\")\nelse:\n    if('?' not in counterS2):\n        print(\"0.000000000000\")\n    else:#there is at least one ? in s2\n        nbPlusToMuch = counterS2['+']-counterS1['+']\n        nbMinusToMuch = counterS2['-']-counterS1['-']\n        if(nbPlusToMuch > 0 or nbMinusToMuch > 0):\n            print(\"0.000000000000\")\n        else:\n            if(nbPlusToMuch < 0):\n                k = abs(nbPlusToMuch)\n            else:\n                k = abs(nbMinusToMuch)\n            n = counterS2['?']\n            print(nbCombinations(k, n)*(0.5**n))\n", "from math import factorial\n\ns1, s2 = input().strip(), input().strip()\nd, q = abs(s1.count('+') - s1.count('-') - s2.count('+') + s2.count('-')), s2.count('?')\nprint(0 if ((d + q) & 1 or d > q) else factorial(q) / factorial((d + q) >> 1) / factorial((q - d) >> 1) / (1 << q))\n", "a = input()\nb = input()\n\ndef foo(b, i, pos, poss):\n    if i == len(b):\n        poss.append(pos)\n    elif b[i] == '+':\n        foo(b,i+1,pos+1, poss)\n    elif b[i] == '-':\n        foo(b,i+1,pos-1, poss)\n    else:\n        foo(b,i+1,pos+1, poss)\n        foo(b,i+1,pos-1, poss)\n\npos0 = 0\nfor x in a:\n    if x == '+':\n        pos0+=1\n    else:\n        pos0-=1\n\nq = 0\nfor x in b:\n    if x == '?':\n        q+=1\n\nposs = []\nres = 0\nfoo(b, 0, 0, poss)\nfor x in poss:\n    if x == pos0:\n        res+=1\n\nprint (res / 2 ** q)", "from math import factorial\ndef C(n, k):\n    return int(factorial(n)/factorial(k)/factorial(n-k))\n\nstr1 = input()\nstr2 = input()\npos1 = 0\npos2 = 0\nneed = 0\nfor i in str1:\n    if i == '+':\n        pos1 += 1\n    else:\n        pos1 -= 1\n        \nfor i in str2:\n    if i == '+':\n        pos2 += 1\n    elif i == '-':\n        pos2 -= 1\n    else:\n        need += 1\n        \ndiff = abs(pos1 - pos2)\nif diff%2 != need%2:\n    print(0)\nelse:\n    if need == 0:\n        if pos1 == pos2:\n            print(1)\n        else:\n            print(0)\n        \n    elif diff > need:\n        print(0)\n    else:\n        a = (need+diff) // 2\n        print(C(need, a)/(2**need))\n", "__author__ = 'hamed1soleimani'\n\ncorrect = input()\nreceived = input()\n\nfinal = 0\nfor ch in correct:\n    if ch == '+':\n        final += 1\n    else:\n        final -= 1\n\ndirections = [0]\n\nfor ch in received:\n    if ch == '+':\n        for i in range(len(directions)):\n            directions[i] += 1\n    elif ch == '-':\n        for i in range(len(directions)):\n            directions[i] -= 1\n    else:\n        temp = list()\n        for d in directions:\n            temp.append(d + 1)\n            temp.append(d - 1)\n        directions = temp\n\nfinished = 0\nfor d in directions:\n    if d == final:\n        finished += 1\n\nout = str(finished / len(directions))\nout += ('0' * (14 - len(out)))\nprint(out)", "s = input()\nt = input()\na, b, c = 0, 0, 0\nfor item in s:\n\tif item == '+':\n\t\ta += 1\n\telse:\n\t\ta -= 1\nfor item in t:\n\tif item == '+':\n\t\tb += 1\n\telif item == '-':\n\t\tb -= 1\n\telse:\n\t\tc += 1\nif c < abs(a - b) or (c - abs(a - b)) % 2 == 1:\n\tprint(0)\nelse:\n\tx = 0.5 ** c\n\tfor i in range((c - abs(a - b)) // 2):\n\t\tx *= c - i\n\t\tx /= 1 + i\n\tprint(x)", "from math import factorial as f\n\ndef main():\n\ta=input()\n\tb=input()\n\tap=a.count('+')\n\tan=a.count('-')\n\tbp=b.count('+')\n\tbn=b.count('-')\n\ttandatanya=b.count('?')\n\tif tandatanya == 0:\n\t\tif ap-an != bp-bn:\n\t\t\tprint (\"%.9f\" % (0))\n\t\telse:\n\t\t\tprint (\"%.9f\" % (1))\n\t\treturn\n\tprobab=float(1/pow(2,tandatanya))\n\tx=(ap-an-(bp-bn)+tandatanya)//2\n\ty=tandatanya-x\n\tif x < 0 or y < 0:\n\t\tprint (\"%.9f\" % (0))\n\t\treturn\n\tprobab*=f(tandatanya)/(f(x)*f(y))  \n\tprint (\"%.9f\" % (probab))\n\nmain()"]