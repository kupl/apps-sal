["ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\nfrom math import gcd\n\nn, k = mi()\na, b = mi()\ns = n * k\n\nmn, mx = 10 ** 15, -1\n\ndef solve(start):\n    nonlocal mn, mx\n    for i in range(n):\n        bef = k * i - b\n        l = (bef - start) % s\n        turns = s // gcd(s, l)\n        mn = min(mn, turns)\n        mx = max(mx, turns)\n        aft = k * i + b\n        l = (aft - start) % s\n        turns = s // gcd(s, l)\n        mn = min(mn, turns)\n        mx = max(mx, turns)\n\nsolve(a)\nsolve(s - a)\nprint(mn, mx)", "import math\nn, k = list(map(int, input().split()))\na, b = list(map(int, input().split()))\n\nnk = n * k\nmi = 1e12\nma = 0\n\ndef solve(st):\n\tnonlocal mi, ma\n\tfor i in range(n):\n\t\ten = i * k + 1 + b\n\t\tif en < st:\n\t\t\ten += nk\n\t\tres = nk // math.gcd(en - st, nk)\n\t\tmi = min(mi, res)\n\t\tma = max(ma, res)\n\t\t\n\t\ten = (i + 1) * k + 1 - b\n\t\tif en < st:\n\t\t\ten += nk\n\t\tres = nk // math.gcd(en - st, nk)\n\t\tmi = min(mi, res)\n\t\tma = max(ma, res)\n\nsolve(1 + a)\nsolve(k + 1 - a)\n\nprint(mi, ma)\n", "import math\nn,k = list(map(int, input().split()))\na,b = list(map(int, input().split()))\n\nx=n*k\ny=-1\nfor i in range(n):\n    now = i*k+b-a\n    if now<0:\n        now += n*k\n    ans = n*k//math.gcd(n*k,now)\n    x = min(x,ans)\n    y = max(y,ans)\n    \n    now = i*k+(k-b)-a\n    if now<0:\n        now += n*k\n    ans = n*k//math.gcd(n*k,now)\n    x = min(x,ans)\n    y = max(y,ans)\n\nprint(x,y)\n", "import math\nn,k=list(map(int,input().split()))\na,b=list(map(int,input().split()))\nreqmin,reqmax=n*k,0\ndef calc(start):\n    nonlocal reqmin,reqmax\n    for i in range(0,n*k+1,k):\n        for j in range(-1,2,2):\n            if(start<i+j*b):\n                l=i+j*b-start\n                lcm=(l*n*k)/math.gcd(l,n*k)\n                reqmin=min(reqmin,lcm/l)\n                reqmax=max(reqmax,lcm/l)\n                \ncalc(a)\ncalc(k-a)\nprint(round(reqmin),round(reqmax))\n", "import math\nn,k=[int(x) for x in input().split()]\na,b=[int(x) for x in input().split()]\nc=n*k\nr1=(a+b)%c\nr2=(a-b)%c\nr3=(b-a)%c\nr4=(-a-b)%c\nvalid_jump=[]\nfor x in range(0,n):\n    valid_jump.append((x*k+r1)%c)\n    valid_jump.append((x*k+r2)%c)\n    valid_jump.append((x*k+r3)%c)\n    valid_jump.append((x*k+r4)%c)\nfor i in range(0,len(valid_jump)):\n    if(valid_jump[i]==0):\n        valid_jump[i]=1\n    else:\n        valid_jump[i]=int(c/math.gcd(c,valid_jump[i]))\ng=valid_jump[0]\nh=valid_jump[0]\nfor element in valid_jump:\n    if(element>g):\n        g=element\n    if(element<h):\n        h=element\nprint(h,g)\n\n    \n    \n", "from math import gcd\n\n\nn, k = list(map(int, input().split()))\na, b = list(map(int, input().split()))\nt = n * k\nm = [(a + b) % k, (a - b) % k, (-a + b) % k, (-a - b) % k]\nmi = 999999999999999\nma = 0\nfor i in range(n):\n    for c in m:\n        L = i * k + c\n        mi = min(t // gcd(t, L), mi)\n        ma = max(t // gcd(t, L), ma)\nprint(mi, ma)\n", "from math import gcd\n\n\nn, k = list(map(int, input().split()))\na, b = list(map(int, input().split()))\nt = n * k\nm = [(a + b) % k, (a - b) % k, (-a + b) % k, (-a - b) % k]\nmi = 999999999999999\nma = 0\nfor i in range(n):\n    for c in m:\n        L = i * k + c\n        mi = min(t // gcd(t, L), mi)\n        ma = max(t // gcd(t, L), ma)\nprint(mi, ma)\n", "def gcd(a,b):\n    while b!=0:\n        t=int(a)\n        a=int(b)\n        b=t%a\n    return int(a)\nfrom sys import stdin\nn,k=list(map(int,stdin.readline().strip().split()))\na,b=list(map(int,stdin.readline().strip().split()))\nmx=-10**20\nmn=-mx\nfor i in range(n):\n    nk=(k*i)\n\n    l1=(-a)%(n*k)\n    l2=(nk-b)%(n*k)\n    l=0\n    \n    if l2>l1:\n        l=l2-l1\n    elif l2<l1:\n        l=n*k-l1+l2\n    if l==0:\n        l=n*k\n    if True:\n\n        mn=min(mn,n*k/gcd(n*k,l))\n        mx=max(mx,n*k/gcd(n*k,l))\n    l1=(a)%(n*k)\n    l2=(nk+b)%(n*k)\n    l=0\n    if l2>l1:\n        l=l2-l1\n    elif l2<l1:\n        l=n*k-l1+l2\n    if l==0:\n        l=n*k\n    if True:\n\n        mn=min(mn,n*k/gcd(n*k,l))\n        mx=max(mx,n*k/gcd(n*k,l))\n\n    l1=(-a)%(n*k)\n    l2=(nk+b)%(n*k)\n    l=0\n    if l2>l1:\n        l=l2-l1\n    elif l2<l1:\n        l=n*k-l1+l2\n    if l==0:\n        l=n*k\n    if True:\n\n        mn=min(mn,n*k/gcd(n*k,l))\n        mx=max(mx,n*k/gcd(n*k,l))\n\n    l1=(a)%(n*k)\n    l2=(nk-b)%(n*k)\n    l=0\n    if l2>l1:\n        l=l2-l1\n    elif l2<l1:\n        l=n*k-l1+l2\n    if l==0:\n        l=n*k\n    if True:\n\n        mn=min(mn,n*k/gcd(n*k,l))\n        mx=max(mx,n*k/gcd(n*k,l))\n    \nprint(int(mn),int(mx))\n\n\n", "from math import gcd\nn,k=map(int,input().split())\na,b=map(int,input().split())\nt=n*k\nm=[(a+b)%k,(a-b)%k,(b-a)%k,(-a-b)%k]\nmi=999999999999\nma=0\nfor i in range(n):\n    for c in m:\n        l=i*k+c\n        mi=min(t//gcd(t,l),mi)\n        ma=max(t//gcd(t,l),ma)\nprint(mi,ma)", "import sys\ninput = sys.stdin.readline\nn,k = map(int,input().split())\na,b = map(int,input().split())\nkoho = []\nfor i in range(n):\n  koho.append(abs(i*k+1+b-1-a))\n  koho.append(n*k-abs(i*k+1+b-1-a))\nfor i in range(n):\n  koho.append(abs(i*k+1-b-1-a))\n  koho.append(n*k-abs(i*k+1-b-1-a))\nfor i in range(n):\n  koho.append(abs(i*k+1+b-1+a))\n  koho.append(n*k-abs(i*k+1+b-1+a))\nfor i in range(n):\n  koho.append(abs(i*k+1-b-1+a))\n  koho.append(n*k-abs(i*k+1-b-1+a))\nkoho = set(koho)\nkoho = list(koho)\nans = []\ndef gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\nfor i in range(len(koho)):\n  if koho[i] == 0:\n    continue\n  p = gcd(koho[i],n*k)\n  ans.append(n*k//p)\nprint(min(ans),max(ans))", "from math import gcd\n\n\nn, k = list(map(int, input().split()))\na, b = list(map(int, input().split()))\n\nx = n * k\ny = -1\nfor i in range(n):\n\tc = i * k + b - a\n\tif c < 0:\n\t\tc += n * k\n\tans = n * k // gcd(n * k, c)\n\tx = min(x,ans)\n\ty = max(y,ans)\n\t\n\tc = i * k +(k - b) - a\n\tif c < 0:\n\t\tnow += n * k\n\tans = n * k // gcd(n * k, c)\n\tx = min(x, ans)\n\ty = max(y, ans)\n\nprint(x, y)\n", "from math import gcd\nn,k = map(int,input().split())\na,b = map(int,input().split())\nMOD = n*k\n\nx = int(1e15)\ny = -1\nl = [b+a,0-a-b,a-b,b-a]\n\nfor m in range(n):\n    for i in l:\n        z = MOD//(gcd(MOD,(k*m+i)%MOD))\n        x = min(x,z)\n        y = max(y,z)\nprint(x,y)", "import math\n\nn, k = list(map(int, input().split()))\na, b = list(map(int, input().split()))\n\ns = [1 if l == 0 else n * k // math.gcd(n * k, l) for i in range(n) for l in (abs(k * i - b - a), abs(k * i + b - a))]\nprint(min(s), max(s))\n", "import math\n\ndef gcdi(p, q):\n    while q > 0:\n        r = p % q\n        p = q\n        q = r\n    return p\n\ndef gcd(p, q):\n    p = abs(p)\n    q = abs(q)\n    return gcdi(max(p,q), min(p,q))\n\nn, k = map(int, input().strip().split())\na, b = map(int, input().strip().split())\n\ntests = [(a, b), (a, k-b), (k-a, b), (k-a, k-b)]\nansx = math.inf\nansy = -math.inf\nfor (aa, bb) in tests:\n    d = bb-aa\n    for i in range(n):\n        l = i*k+d\n        z = n*k/gcd(n*k,l)\n        ansx = min(ansx, z)\n        ansy = max(ansy, z)\nprint('%d %d' % (ansx, ansy))", "import math\n\nn, k = list(map(int, input().split()))\na, b = list(map(int, input().split()))\n\n\nx = n * k + 1\ny = -1\n\nst = [a, k - a] \n\nfor L in st : \n    for i in range(n) : \n        en = [i * k + b, (i + 1) * k - b]\n        for R in en :\n            dist = R - L\n            if (dist < 0) :\n                dist = dist + n * k\n            com = math.gcd(dist, n * k)\n            cyc = (n * k) // com\n            x = min(x, cyc)\n            y = max(y, cyc)\nprint(x, y)\n", "from math import gcd\n\nn, k = map(int, input().split())\na, b = map(int, input().split())\n\n\ndef stop(x, y):\n    d = (y - x + n * k * 2) % (n * k)\n    g = gcd(n * k, d)\n    return n * k // g\n\nmn, mx = 10**20, 0\ns = [-a, a]\nfor x in s:\n    for i in range(n):\n        f = [i * k - b, i * k + b]\n        for y in f:\n            cur = stop(x, y)\n            mn = min(mn, cur)\n            mx = max(mx, cur)\n\nprint(mn, mx)", "from math import gcd\n\nn, k = map(int, input().split())\na, b = map(int, input().split())\n\n\ndef stop(x, y):\n    d = (y - x + n * k * 2) % (n * k)\n    g = gcd(n * k, d)\n    return n * k // g\n\nmn, mx = 10**20, 0\nfor x in [-a, a]:\n    for i in range(n):\n        for y in [i * k - b, i * k + b]:\n            cur = stop(x, y)\n            mn = min(mn, cur)\n            mx = max(mx, cur)\n\nprint(mn, mx)", "from math import gcd\n\ndef lcm(a,b):\n\treturn a*b//gcd(a,b)\n\ndef mod(a,m):\n\ta%=m\n\tif a<0:\n\t\ta+=m\n\treturn a\n\nn,k=list(map(int, input().split()))\na,b=list(map(int, input().split()))\nst,ed=[],[]\nnk=n*k\n\nfor i in range(0,n):\n\tst.append(mod(i*k-a,nk))\n\tst.append(mod(i*k+a,nk))\n\ted.append(mod(i*k-b,nk))\n\ted.append(mod(i*k+b,nk))\n\nmn=100000000000000000\nmx=-100000000000000000\nsz=len(ed)\n\nfor i in range(0,2):\n\tfor j in range(0,sz):\n\t\tjp=ed[j]-st[i]\n\t\tif ed[j]<st[i]:\n\t\t\tjp+=nk\n\t\tif jp==0:\n\t\t\tjp+=nk\n\t\tlm=lcm(jp,nk)//jp\n\t\tmn=min(mn,lm)\n\t\tmx=max(mx,lm)\n\nprint(mn,mx)\n", "import sys\nimport math\n'''def solve(num,dis,a,b,k):\n    start=a\n    nex=(a+num)%k\n    if nex%k==b:\n        return dis//num\n    if (k-nex%k)==b:\n        return dis//num\n    start=dis-a\n    nex=(start+num)%dis\n    if nex%k==b:\n        return dis//num\n    if (k-nex%k)==b:\n        return dis//num\n    return -1'''\nn,k=list(map(int,sys.stdin.readline().split()))\na,b=list(map(int,sys.stdin.readline().split()))\nfactors=[]\ndis=n*k\n'''for i in range(1,int(math.sqrt(dis))+1):\n    if dis%i==0:\n        factors.append(i)\n        factors.append(dis//i)\n#print(factors,'factors')\nm=len(factors)\nnax,nin=-1,1e12+1\nfor i in range(m):\n    x=solve(factors[i],dis,a,b,k)\n    if x!=-1:\n        nax=max(nax,x)\n        nin=min(nin,x)'''\nstart=a\nnax,nin=-1,1e12+1\nfor i in range(n):\n    b1=k*i+b\n    if b1>a:\n        l=b1-a\n    else:\n        l=dis-(a-b1)\n    if l!=0:\n        lcm=(dis*l)//(math.gcd(dis,l))\n        nax=max(nax,lcm//l)\n        nin=min(nin,lcm//l)\nst=k-a\nfor i in range(n):\n    b1=k*i+b\n    if b1>st:\n        l=b1-st\n    else:\n        l=dis-(st-b1)\n    if l!=0:\n        lcm=(dis*l)//(math.gcd(dis,l))\n        nax=max(nax,lcm//l)\n        nin=min(nin,lcm//l)\nprint(nin,nax)\n", "import sys\nimport math\nn,k=list(map(int,sys.stdin.readline().split()))\na,b=list(map(int,sys.stdin.readline().split()))\nfactors=[]\ndis=n*k\nstart=a\nnax,nin=-1,1e12+1\nfor i in range(n):\n    b1=k*i+b\n    if b1>a:\n        l=b1-a\n    else:\n        l=dis-(a-b1)\n    if l!=0:\n        lcm=(dis*l)//(math.gcd(dis,l))\n        nax=max(nax,lcm//l)\n        nin=min(nin,lcm//l)\nst=k-a\nfor i in range(n):\n    b1=k*i+b\n    if b1>st:\n        l=b1-st\n    else:\n        l=dis-(st-b1)\n    if l!=0:\n        lcm=(dis*l)//(math.gcd(dis,l))\n        nax=max(nax,lcm//l)\n        nin=min(nin,lcm//l)\nprint(nin,nax)\n", "import math \nn,k=map(int,input().split())\na,b=map(int,input().split())\nw=a-b\nw1=a+b\nma=0\nm=99999999999999999\nfor i in range(n):\n    l=i*k+w\n    tot=(n*k)//(math.gcd(n*k,l))\n    ma=max(ma,tot)\n    m=min(m,tot)\n    l=i*k-w\n    tot=(n*k)//(math.gcd(n*k,l))\n    ma=max(ma,tot)\n    m=min(m,tot)\n    l=i*k+w1\n    tot=(n*k)//(math.gcd(n*k,l))\n    ma=max(ma,tot)\n    m=min(m,tot)\n    l=i*k-w1\n    tot=(n*k)//(math.gcd(n*k,l))\n    ma=max(ma,tot)\n    m=min(m,tot)\nprint(m,ma)", "import sys\nimport math\nfrom collections import defaultdict as dd\nmod=1000000007\n\ndef lcm(x,y):\n    return (x*y)//(math.gcd(x,y))\nT=1\n#T=int(sys.stdin.readline())\nfor _ in range(T):\n    n,k=list(map(int,input().split()))\n    a,b=list(map(int,input().split()))\n    p=[]\n    q=n*k\n    \n    x,y=q,0\n    for i in range(0,q,k):\n        s1=(i+b)%q\n        s2=((i-b)%q)\n        jmp=0\n        if s1>=a:\n            jmp=(s1-a)\n        else:\n            jmp=q-a+s1\n        if jmp==0:\n            jmp=q\n        y=max(lcm(q,jmp)//jmp,y)\n        x=min(lcm(q,jmp)//jmp,x)\n        if s2>=a:\n            jmp=(s2-a)\n        else:\n            jmp=q-a+s2\n        if jmp==0:\n            jmp=q\n        y=max(lcm(q,jmp)//jmp,y)\n        x=min(lcm(q,jmp)//jmp,x)\n    print(x,y)\n", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\n\n#sys.setrecursionlimit(100000000)\n\ninp = lambda: int(input())\nstrng = lambda: input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda: list(input().strip())\nmul = lambda: map(int, input().strip().split())\nmulf = lambda: map(float, input().strip().split())\nseq = lambda: list(map(int, input().strip().split()))\n\nceil = lambda x: int(x) if (x == int(x)) else int(x) + 1\nceildiv = lambda x, d: x // d if (x % d == 0) else x // d + 1\n\nflush = lambda: stdout.flush()\nstdstr = lambda: stdin.readline()\nstdint = lambda: int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdarr = lambda: map(int, stdstr().split())\n\nmod = 1000000007\n\n\nn,k = stdarr()\na,b = stdarr()\n\nsecond = 1+a\n\nl = set()\n\nfor i in range(k+1, n*k+1, k):\n    l.add((i-b-second)%(n*k + 1))\n    l.add((i+b-second)%(n*k + 1))\n\nl.add((n*k - b - second + 1))\nl.add((n*k + b - second + 1))\n\nx = float('inf')\ny = -1\n\n\nfor i in l:\n    if(i == 0): continue\n    if((n*k)%i == 0):\n        d = (n*k)//i\n    else:\n        lcm = (i*(n*k))//math.gcd(i, n*k)\n        d = lcm//i\n\n    x = min(d, x)\n    y = max(d, y)\n\nprint(x, y)"]