["n,a= int(input()),list(map(int,input().split()))\nf,m= [0]*(n+1),10**9+7\nfor i in range(n):\n\tif a[i]==i+1:\n\t\tf[i+1]=f[i]+2\n\telse:\n\t\tf[i+1]=(2+f[i]*2-f[a[i]-1])%m\nprint(f[n]%m)\n", "Mod=1000000007\nn=int(input())\np=list( map(int, input().split()) )\ns=[0,2]\nfor i in range(2,n+1):\n    s.append( ( 2*s[i-1]-s[p[i-1]-1] + 2 + Mod ) % Mod )\nprint(s[n])\n", "import sys\nMOD = 10**9+7\nN = int(sys.stdin.readline())\nbs = [int(b)-1 for b in sys.stdin.readline().split()]\nfs = [0]\nfor i in range(1,N+1):\n    f = 2*fs[i-1] + 2 - fs[bs[i-1]]\n    fs.append(f % MOD)\nprint(fs[-1])\n", "n = int(input())\nq, p = 1000000007, [0] + list(map(int, input().split()))\ns, d = 0, [0] * (n + 1)\nfor i in range(1, n + 1):\n    d[i] = (sum(d[p[i]: i]) + 2) % q\n    s += d[i]\nprint(s % q)", "#!/usr/bin/env python3\n\nn = int(input())\njmp = list([x - 1 for x in list(map(int, input().split()))])\n\ncache = { }\n\ndef DP(i,j):\n    if (i,j) not in cache:\n        if i == j:\n            cache[i,j] = 0\n        elif i + 1 == j:\n            cache[i,j] = DP(jmp[i], i) + 2\n        else:\n            cache[i,j] = sum(DP(k, k+1) for k in range(i,j))\n\n    return cache[i,j]\n\nprint(DP(0, n) % (10**9 + 7))\n", "import sys\nMOD = 10 ** 9 + 7\nN = int(input())\nbs = [int(b) - 1 for b in input().split()]\nfs = [0]\nfor i in range(1,N+1):\n    f = 2 * fs[i - 1] + 2 - fs[bs[i - 1]]\n    fs.append(f % MOD)\nprint(fs[-1])", "#! python3\nnumRooms = int(input())\nlinks = [0]+[int(x) for x in input().split()]\nportalPaths = [0]*(numRooms+2)\nfor index in range(1, numRooms + 1):\n\tportalPaths[index + 1] = (2*portalPaths[index] - portalPaths[links[index]] + 2) % 1000000007\nprint(portalPaths[numRooms+1] % 1000000007)\n\n# print(numRooms)\n# print(links)\n\n\n# This implementation is too slow\n# numRooms = int(input())\n# links = [-1]+[int(x) for x in input().split()]\n# crosses = [0]+[0]*(numRooms + 1)\n# current = 1\n# while current <= numRooms:\n# \tif crosses[current] % 2 == 0:\n# \t\tcrosses[current] += 1\n# \t\tprint(current, crosses[current], \"portal\")\n# \t\tcurrent = links[current]\n# \telse:\n# \t\tcrosses[current] += 1\n# \t\tprint(current, crosses[current], \"plus 1\")\n# \t\tcurrent += 1\n\n# print(sum(crosses) % 1000000007)\n", "import sys\n\ndef solve():\n    mod = 1000 * 1000 * 1000 + 7\n    n, = rv()\n    a, = rl(1)\n    mem = [0] * n\n    # mem[0] = 1\n    timesofar = 0\n    for i in range(n):\n        ariveat = a[i] - 1\n        moresum = 0\n        for j in range(ariveat, i):\n            moresum += mem[j]\n        mem[i] = moresum + 1\n        timesofar += moresum + 1\n        timesofar %= mod\n    print((2 * timesofar) % mod)\n\n\ndef rv(): return list(map(int, input().split()))\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n\n\n", "import sys\n\ndef solve():\n    mod = 1000 * 1000 * 1000 + 7\n    n, = rv()\n    a, = rl(1)\n    a.append(0)\n    mem = [0] * (n + 1)\n    timesofar = 0\n    for i in range(n + 1):\n        ariveat = a[i] - 1\n        moresum = 0\n        for j in range(ariveat, i):\n            moresum += mem[j]\n        mem[i] = moresum + 1\n        timesofar += moresum + 1\n        timesofar %= mod\n    print(timesofar - 1)\n\n\ndef rv(): return list(map(int, input().split()))\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n\n\n", "import sys\n\ndef solve():\n    mod = 1000 * 1000 * 1000 + 7\n    n, = rv()\n    a, = rl(1)\n    mem = [0] * n\n    timesofar = 0\n    for i in range(n):\n        ariveat = a[i] - 1\n        moresum = 0\n        for j in range(ariveat, i):\n            moresum += mem[j]\n        mem[i] = moresum + 2\n        timesofar += moresum + 2\n        timesofar %= mod\n    print(timesofar)\n\n\ndef rv(): return list(map(int, input().split()))\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n\n\n", "n = int(input())\npt = [0] + list(map(int, input().split(\" \")))\ndp = [0 for i in range(1005)]\nMOD = int(1e9+7)\nfor i in range(1, n+1):\n    dp[i+1] = (2*dp[i] + 2 - dp[pt[i]])%MOD\nprint(dp[n+1]%MOD)\n", "no_rooms = int(input())\nlinks = [None] + [int(x) for x in input().split()]\npaths = [0] * (no_rooms + 2) # last is total\n\nfor i in range(1, no_rooms + 1):\n\tpaths[i + 1] = (2 * paths[i] - paths[links[i]] + 2) % 1000000007\n\nprint(paths[no_rooms + 1] % 1000000007)", "n = int(input())\np = list(map(int, input().split()))\nm = int(1e9 + 7)\n\ndp = [0] * (n + 1)\ndp[0] = 0\nfor i in range(1, n + 1):\n    dp[i] = (2 * dp[i - 1] - dp[p[i - 1] - 1] + 2) % m\n\nprint(dp[n])\n", "input()\ndp = [0] \n[dp.append((2 * dp[-1] + 2 - dp[u - 1]) % 1000000007) for u in map(int, input().split())]\nprint (dp[-1])", "input()\ndp = [0] \n[dp.append((2 * dp[-1] + 2 - dp[u - 1]) % 1000000007) for u in map(int, input().split())]\nprint (dp[-1])", "z = int(input())\nl = [None] + [int(x) for x in input().split()]\npt = [0] * (z + 2)\n\nfor i in range(1, z + 1):\n\tpt[i + 1] = (2 * pt[i] - pt[l[i]] + 2) % 1000000007\n\nprint(pt[z + 1] % 1000000007) ", "n = int(input())\na = list(map(int, input().split()))\ndp = [0 for i in range(n+1)]\nfor i in range(n+1):\n    if i > 0 : dp[i] = (2*dp[i-1]+2-dp[a[i-1]-1])%1000000007\nprint((dp[n]+1000000007)%1000000007)", "Mod=1000000007\nn=int(input())\np=list( map(int, input().split()) )\ns=[0,2]\nfor i in range(2,n+1):\n    s.append( ( 2*s[i-1]-s[p[i-1]-1] + 2 + Mod ) % Mod )\nprint(s[n])\n\n\n\n\n# Made By Mostafa_Khaled\n", "MOD = 10 ** 9 + 7\n\nn = int(input())\np = [0] + list(map(int, input().split()))\n\nways = [0 for i in range(n + 2)]\n\n\nfor i in range(1, n + 1):\n    ways[i] = 1\n    for j in range(p[i], i):\n        ways[i] += ways[j] + 1\n        ways[i] %= MOD\n\nprint((sum(ways) + n) % MOD)\n", "n = int(input())\nls = list(map(int,input().split()))\nls1 = list([0]*n)\nsum = 2\nls1[0] = 2 \nmod = 1000000007\nfor i in range(1,n):\n    ls1[i] = 2\n    k = ls[i]\n    k -= 1\n    for j in range(k,i):\n        ls1[i] += ls1[j]\n        ls1[i] %= mod\n    sum += ls1[i]\n    sum %= mod\n   # print(ls1[i])\nprint(sum)", "R = lambda: map(int, input().split())\nn = int(input())\nmod = 1000000007\narr = [x - 1 for x in R()]\ndp = [0] * (n + 1)\nsdp = [0] * (n + 1)\ndp[0] = sdp[0] = 2\nfor i in range(1, len(arr)):\n    dp[i] = (2 + sdp[i - 1] - sdp[arr[i] - 1]) % mod\n    sdp[i] = (sdp[i - 1] + dp[i]) % mod\nprint(sdp[n - 1])", "'''input\n4\n1 1 2 3\n'''\nfrom sys import stdin, stdout\nimport sys\n\n\nsys.setrecursionlimit(15000)\n\n\n# main starts\nn = int(stdin.readline().strip())\narr = list(map(int, stdin.readline().split()))\ndp = [-1] * (n + 1)\ndp[1] = 2\nmod = 10 ** 9 + 7\nfor i in range(2, n + 1):\n\tdp[i] = (sum(dp[arr[i - 1] : i]) + 2) % mod\nprint(sum(dp[1:]) % (10 ** 9 + 7))\n", "n=int(input())\nl=list(map(int,input().split()))\nL=[[0,1]]\nfor i in range(1,n) :\n    v=L[i-1][1]+1\n    L.append([v,0])\n    y=L[l[i]-1][0]\n    L[i][1]=v+v-y+1\n    \nprint((L[-1][1]+1)%1000000007)\n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/8/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\ndef solve(N, A):\n    MOD = 10**9 + 7\n    dp = [0 for _ in range(N+1)]\n    for i in range(N):\n        dp[i+1] = 2 * dp[i] + 2 - dp[A[i]]\n        dp[i+1] %= MOD\n    return dp[N]\n    \n\nN = int(input())\nA = [int(x)-1 for x in input().split()]\nprint(solve(N, A))", "n = int(input())\n\nmod = 10**9 + 7\n\na = [int(_) - 1 for _ in input().split()]\nb = [0]\n\nfor i in range(1, n + 1):\n\tv = 2 * b[i - 1] + 2 - b[a[i - 1]]\n\tb.append(v % mod)\nprint(b[-1])\n"]