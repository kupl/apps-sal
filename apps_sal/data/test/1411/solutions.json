["\ndef bins(sortedlist,x):\n    n=len(sortedlist)\n    start = 0\n    end = n - 1\n\n    while(start <= end):\n        mid =int( (start + end)/2)\n        if (x == sortedlist[mid][0]):\n            return mid\n        elif(x < sortedlist[mid][0]):\n            end = mid - 1\n        else:\n            start = mid + 1 \n \n    if(sortedlist[mid][0]<=x):\n        return mid\n    else:\n        return mid-1\n\n\n\n\nn,s=list(map(int,input().split()))\nhap=[]\n\nfor i in range(n):\n    hap.append(list(map(int,input().split())))\na=0\nmax1=0\nb=0\nsla=[]\nslb=[]\nslab=[]\nfor i in range(n):\n    temp=hap[i][0]\n    hap[i][0]=hap[i][1]\n    hap[i][1]=hap[i][2]\n    hap[i][2]=temp\nfor i in range(n):\n\n    slab.append([hap[i][0]-hap[i][1],hap[i][2]])\nhappi=0\nfor i in range(n):\n    if(hap[i][0]>hap[i][1]):\n        a+=hap[i][2]\n        happi+=hap[i][2]*hap[i][0]\n    else:\n        b+=hap[i][2]\n        happi+=hap[i][2]*hap[i][1]\nsla.sort()\nslb.sort()\nslab.sort()\nif((a%s +  b%s)>s):\n    print(happi)\nelse:\n    loc=bins(slab,0)\n    happia=happi\n    count=0\n    #print(a,b)\n    b=b%s\n    a=a%s\n    left=b%s\n    \n    while(left>0):\n        if(slab[loc+count][1]<left):\n            happia+=slab[loc+count][0]*slab[loc+count][1]\n            left-=slab[loc+count][1]\n        else:\n            happia+=slab[loc+count][0]*left\n            break\n        count-=1\n    left=a%s\n    count=0\n    happib=happi\n    \n    while(loc<n and slab[loc][0]<=0):\n        loc+=1\n    #print(slab[loc][0])\n    while(left>0):\n        if(slab[loc+count][1]<left):\n            happib-=slab[loc+count][0]*slab[loc+count][1]\n            left-=slab[loc+count][1]\n        else:\n            happib-=slab[loc+count][0]*left\n            break\n        count+=1\n    #print(happia,happib,happi)\n    print(max(happia,happib))  \n", "from collections import namedtuple\n\n\nMember = namedtuple('Member', ['parts', 'a_happy', 'b_happy'])\n\n\ndef happy_diff(m):\n    return m.a_happy - m.b_happy\n\n\ndef main():\n    input_strings_members, parts = read_input()\n    a_members, b_members, other_members = prepare_members(input_strings_members)\n    print(count_parts(a_members, b_members, other_members, parts))\n\n\ndef read_input():\n    counts_str = input().split()\n    members_count, parts = list(map(int, counts_str))\n    return [input() for _ in range(members_count)], parts\n\n\ndef prepare_members(input_strings_members):\n    a_members = []\n    b_members = []\n    other_members = []\n    for line in input_strings_members:\n        m = Member(*list(map(int, line.split())))\n        if happy_diff(m) > 0:\n            a_members.append(m)\n        elif happy_diff(m) < 0:\n            b_members.append(m)\n        else:\n            other_members.append(m)\n    return a_members, b_members, other_members\n\n\ndef count_parts(a_members, b_members, other_members, parts_in_one):\n    a_members.sort(key=lambda m: happy_diff(m), reverse=False)\n    a_modulo = sum(m.parts for m in a_members) % parts_in_one\n\n    a_modulo_members, a_happy_members = split_members_into_happy_groups(a_members, a_modulo)\n    a_happy = sum(m.a_happy * m.parts for m in a_happy_members)\n\n    b_members.sort(key=lambda m: happy_diff(m), reverse=True)\n    b_modulo = sum(m.parts for m in b_members) % parts_in_one\n\n    b_modulo_members, b_happy_members = split_members_into_happy_groups(b_members, b_modulo)\n    b_happy = sum(m.b_happy * m.parts for m in b_happy_members)\n\n    last_happy = count_last_pizzas_happy(a_modulo_members, b_modulo_members, other_members, parts_in_one)\n\n    return a_happy + b_happy + last_happy\n\n\ndef split_members_into_happy_groups(members, modulo):\n    modulo_members = []\n    happy_members = []\n    current_modulo = 0\n\n    for i in range(len(members)):\n        m = members[i]\n        new_current_modulo = current_modulo + m.parts\n        if new_current_modulo < modulo:\n            modulo_members.append(m)\n            current_modulo = new_current_modulo\n            continue\n\n        modulo_members.append(Member(modulo - current_modulo, m.a_happy, m.b_happy))\n        if new_current_modulo > modulo:\n            happy_members.append(Member(new_current_modulo - modulo, m.a_happy, m.b_happy))\n        if (i + 1) < len(members):\n            happy_members.extend(members[(i + 1):])\n        break\n\n    return modulo_members, happy_members\n\n\ndef count_last_pizzas_happy(a, b, other, parts_in_one):\n    last_sorted_members = a + other + b\n\n    if sum(m.parts for m in last_sorted_members) <= parts_in_one:\n        return max(\n            sum(m.a_happy * m.parts for m in last_sorted_members),\n            sum(m.b_happy * m.parts for m in last_sorted_members)\n        )\n\n    return sum(m.a_happy * m.parts for m in a + other) + sum(m.b_happy * m.parts for m in b)\n\n\ndef test1():\n    a, b, c = prepare_members(['7 4 7', '5 8 8', '12 5 8', '6 11 6', '3 3 7', '5 9 6'])\n    assert count_parts(a, b, c, 10) == 314\n\n\ndef test2():\n    a, b, c = prepare_members(['3 5 7', '4 6 7', '5 9 5'])\n    assert count_parts(a, b, c, 12) == 84\n\n\ndef test3():\n    a, b, c = prepare_members(['2 3 1', '2 2 2', '2 1 3'])\n    assert count_parts(a, b, c, 3) == 16\n\n\ndef test4():\n    a, b, c = prepare_members(\n        [\n            '2 1 4',\n            '2 3 1',\n        ]\n    )\n    assert count_parts(a, b, c, 3) == 14\n\n\ndef test5():\n    a, b, c = prepare_members(\n        [\n            '2 1 2',\n            '2 2 1',\n            '2 1 3',\n            '2 3 1',\n            '2 1 4',\n            '2 4 1',\n        ]\n    )\n    assert count_parts(a, b, c, 3) == (8 + 6 + 4) * 2\n\n\ndef test6():\n    a, b, c = prepare_members(\n        [\n            '2 1 2',\n            '2 2 1',\n            '2 1 3',\n            '2 3 1',\n            '2 1 4',\n            '2 4 1',\n        ]\n    )\n    assert count_parts(a, b, c, 5) == 16 + 16 + 3\n\n\ndef test_without_last_pizzas():\n    a, b, c = prepare_members(\n        [\n            '3 3 1',\n            '3 5 6'\n        ]\n    )\n    assert count_parts(a, b, c, 3) == 27\n\n\ndef test_with_one_last_pizza():\n    a, b, c = prepare_members(\n        [\n            '2 3 1',\n            '1 5 6'\n        ]\n    )\n    assert count_parts(a, b, c, 3) == 11\n\n\ndef test_with_two_last_pizzas():\n    a, b, c = prepare_members(\n        [\n            '2 3 4',\n            '2 3 1',\n            '1 1 1'\n        ]\n    )\n    assert count_parts(a, b, c, 3) == 15\n\n\ndef test_without_different_happies():\n    a, b, c = prepare_members(\n        [\n            '2 2 2',\n            '4 1 1',\n            '5 6 6'\n        ]\n    )\n    assert count_parts(a, b, c, 3) == 38\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def solve(ls):\n\n    ls.sort(key=lambda q: q[1] - q[0])\n\n    m = sum(si for a, b, si in ls)\n\n    k = s * (m // s)\n\n    n = m - k\n\n    x = y = z = 0\n\n    for a, b, si in ls:\n\n        if k >= si:\n\n            k -= si\n\n            z += si * a\n\n        elif k:\n\n            z += k * a\n\n            x = (si - k) * a\n\n            y = (si - k) * b\n\n            k = 0\n\n        else:\n\n            x += si * a\n\n            y += si * b\n\n    return x, y, z, n\n\n\n\nn,s = list(map(int,input().split()))\n\nfirst=[]\n\nsecond=[]\n\nfor i in range(n):\n\n\tsi, ai, bi = list(map(int,input().split()))\n\n\tif ai>bi:\n\n\t\tfirst.append((ai,bi,si))\n\n\telse:\n\n\t\tsecond.append((bi,ai,si))\n\nx1,y1,z1,n1 = solve(first)\n\nx2,y2,z2,n2 = solve(second)\n\nd = x1+x2 if n1+n2>s else max(x1+y2,x2+y1)\n\nprint(z1+z2+d)\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "from sys import stdin\nfrom collections import deque\n\nn,S = [int(x) for x in stdin.readline().split()]\n\nppl = []\n\nbase = 0\n\ntSlices = 0\n\nfor dude in range(n):\n    s,a,b = [int(x) for x in stdin.readline().split()]\n    base += s*a\n    tSlices += s\n    ppl.append([b-a,s])\n#print(base)\n\nif tSlices % S != 0:\n    ppl.append([0, S-(tSlices%S)])\n\nppl.sort(reverse=True)\n\ntotalS = 0\ntotalH = 0\n\nfor h,s in ppl:\n    if totalS + s < S:\n        totalS += s\n        totalH += h*s\n    else:\n        s -= S-totalS\n        totalH += h*(S-totalS)\n        if totalH > 0:\n            base += totalH\n        else:\n            break\n        totalS = 0\n        totalH = 0\n        if h > 0:\n            base += h*((s//S)*S)\n            totalS = s%S\n            totalH = h*(s%S)\n        else:\n            break\n        \n    \nprint(base)\n"]