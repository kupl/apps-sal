["\n\n\n\n\nA,B = list(map(int, input().split()))\n\nS = [[\".\" if h < 50 else \"#\" for _ in range(100) ] for h in range(100)]\n\nend_black = False\nfor i in range(0,50,2):\n    if end_black:\n        break\n    for j in range(100):\n        if B <= 1:\n            end_black = True\n            break\n        \n        if j % 2 == 0:\n            S[i][j] = \"#\"\n            B -= 1\n\n\nend_white = False\nfor i in range(53,100, 2):\n    if end_white:\n        break\n    for j in range(100):\n        if A <= 1:\n            end_white = True\n            break\n        \n        if j % 2 == 0:\n            S[i][j] = \".\"\n            A -= 1\n\nprint((100,100))\nfor i in range(100):\n    print((\"\".join(S[i])))\n\n", "#!/usr/bin python3\n# -*- coding: utf-8 -*-\n\na, b = list(map(int, input().split()))\nretBW = [['#']*100 for i in range(50)]\nretWB = [['.']*100 for i in range(50)]\nfor i in range(0, 50, 2):\n    for j in range(0, 100, 2):\n        if a>1:\n            retBW[i][j]='.'\n            a -= 1\n\nfor i in range(1, 50, 2):\n    for j in range(0, 100, 2):\n        if b>1:\n            retWB[i][j]='#'\n            b -= 1\n\nprint('100 100')\nfor x in retBW:\n    print((''.join(x)))\nfor x in retWB:\n    print((''.join(x)))\n", "A,B = list(map(int,input().split()))\nMAX = 100\nans = []\nfor i in range(MAX): #\u4e0b\u5730\u3068\u3057\u3066\u4e0a\u534a\u5206\u306f\u767d\u3001\u4e0b\u534a\u5206\u306f\u9ed2\u3002\n  if i < MAX//2:\n    temp = [\".\"]*MAX\n  else:\n    temp = [\"#\"]*MAX\n  ans.append(temp)\n#print(ans)\nA-=1;B-=1\nh = 0; w = 0\nfor j in range(B): #\u4e0a\u534a\u5206\u306b\u9ed2\u3092\u7f6e\u304f\u3002\n  ans[h][w] = \"#\"\n  w += 2\n  if w > MAX-1:\n    h += 2\n    w = 0\n\n#print(ans)\nh = MAX//2+1; w = 0\nfor j in range(A):\n  ans[h][w] = \".\"\n  w += 2\n  if w > MAX-1:\n    h += 2\n    w = 0\nL = [MAX,MAX]\nprint((*L))\nfor i in range(MAX):\n  output = \"\".join(ans[i])\n  print(output)\n", "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush,heapify\nimport sys,bisect,math,itertools,fractions\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\na,b = inpl()\nif a == b == 1:\n    print(1,2)\n    print('.#')\n    return\nrev = False\nif a < b:\n    rev = True\n    a,b = b,a\na -= 1\nres = [[None] * 100 for _ in range(100)]\nr = 0\nok = True\nwhile ok:\n    for c in range(100):\n        if r%2:\n            res[r][c] = 0\n        else:\n            if not ok or c%2:\n                res[r][c] = 1\n                b -= 1\n                if b == 0:\n                    ok = False\n            else:\n                res[r][c] = 0\n    r += 1\nfor c in range(100):\n    res[r][c] = 1 if c == 99 else 0\nr += 1\nfor c in range(100):\n    res[r][c] = 1\nr += 1\nok = True\nwhile ok:\n    for c in range(100):\n        if r%2:\n            res[r][c] = 1\n        else:\n            if not ok or c%2:\n                res[r][c] = 0\n                a -= 1\n                if a <= 0:\n                    ok = False\n            else:\n                res[r][c] = 1\n    r += 1\nfor i in range(r,100):\n    for j in range(100):\n        res[i][j] = res[i-1][j]\nprint(100,100)\nfor i in range(100):\n    for j in range(100):\n        if rev:\n            res[i][j] = '.' if res[i][j] else '#'\n        else:\n            res[i][j] = '#' if res[i][j] else '.'\n    print(''.join(res[i]))", "A,B = map(int,input().split())\nT = [[\".\" for _ in range(100)] for _ in range(100)]\nfor i in range(50,100):\n    for j in range(100):\n        T[i][j] = \"#\"\ncnt = 1\nif B>1:\n    flag = 0\n    for i in range(1,49,2):\n        for j in range(1,100,2):\n            T[i][j] = \"#\"\n            cnt += 1\n            if cnt==B:\n                flag = 1\n                break\n        if flag==1:break\ncnt = 1\nif A>1:\n    flag = 0\n    for i in range(51,99,2):\n        for j in range(1,100,2):\n            T[i][j] = \".\"\n            cnt += 1\n            if cnt==A:\n                flag = 1\n                break\n        if flag==1:break\nprint(100,100)\nfor i in range(100):\n    print(\"\".join(T[i]))", "import sys\nimport math\nimport copy\nimport random\nfrom heapq import heappush, heappop, heapify\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\n# sys.setrecursionlimit(1000000)\n\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = float(\"inf\")\nMOD = 10**9 + 7\ndivide = lambda x: pow(x, MOD-2, MOD)\n\ndef nck(n, k, kaijyo):\n    return (npk(n, k, kaijyo) * divide(kaijyo[k])) % MOD\n\ndef npk(n, k, kaijyo):\n    if k == 0 or k == n:\n        return n % MOD\n    return (kaijyo[n] * divide(kaijyo[n-k])) % MOD\n\ndef fact_and_inv(SIZE):\n    inv = [0] * SIZE  # inv[j] = j^{-1} mod MOD\n    fac = [0] * SIZE  # fac[j] = j! mod MOD\n    finv = [0] * SIZE  # finv[j] = (j!)^{-1} mod MOD\n    inv[1] = 1\n    fac[0] = fac[1] = 1\n    finv[0] = finv[1] = 1\n    for i in range(2, SIZE):\n        inv[i] = MOD - (MOD // i) * inv[MOD % i] % MOD\n        fac[i] = fac[i - 1] * i % MOD\n        finv[i] = finv[i - 1] * inv[i] % MOD\n\n    return fac, finv\n\ndef renritsu(A, Y):\n    # example 2x + y = 3, x + 3y = 4\n    # A = [[2,1], [1,3]])\n    # Y = [[3],[4]] \u307e\u305f\u306f [3,4]\n    A = np.matrix(A)\n    Y = np.matrix(Y)\n    Y = np.reshape(Y, (-1, 1))\n    X = np.linalg.solve(A, Y)\n\n    # [1.0, 1.0]\n    return X.flatten().tolist()[0]\n\nclass TwoDimGrid:\n    # 2\u6b21\u5143\u5ea7\u6a19 -> 1\u6b21\u5143\n    def __init__(self, h, w, wall=\"#\"):\n        self.h = h\n        self.w = w\n        self.size = (h+2) * (w+2)\n        self.wall = wall\n        self.get_grid()\n        # self.init_cost()\n\n    def get_grid(self):\n        grid = [self.wall * (self.w + 2)]\n        for i in range(self.h):\n            grid.append(self.wall + getS() + self.wall)\n\n        grid.append(self.wall * (self.w + 2))\n        self.grid = grid\n    def init_cost(self):\n        self.cost = [INF] * self.size\n\n    def pos(self, x, y):\n        # \u58c1\u3082\u542b\u3081\u30660-indexed \u5143\u3005\u306e\u5ea7\u6a19\u3060\u3051\u8003\u3048\u308b\u30681-indexed\n        return y * (self.w + 2) + x\n    def getgrid(self, x, y):\n        return self.grid[y][x]\n    def get(self, x, y):\n        return self.cost[self.pos(x, y)]\n    def set(self, x, y, v):\n        self.cost[self.pos(x, y)] = v\n        return\n    def show(self):\n        for i in range(self.h+2):\n            print(self.cost[(self.w + 2) * i:(self.w + 2) * (i+1)])\n    def showsome(self, tgt):\n        for t in tgt:\n            print(t)\n        return\n    def showsomejoin(self, tgt):\n        for t in tgt:\n            print(\"\".join(t))\n        return\n\n    def search(self):\n        grid = self.grid\n        move = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        move_eight = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n        # for i in range(1, self.h+1):\n        #     for j in range(1, self.w+1):\n        #         cx, cy = j, i\n        #         for dx, dy in move_eight:\n        #             nx, ny = dx + cx, dy + cy\n\ndef solve():\n    a, b = getList()\n    print(100, 100)\n    for i in range(100):\n        tmp = []\n        for j in range(100):\n            if i < 50:\n                if j % 2 == 1 or i % 2 == 1 or  a <= 1:\n                    tmp.append(\"#\")\n                else:\n                    tmp.append(\".\")\n                    a -= 1\n            else:\n                if j % 2 == 1 or i % 2 == 0 or b <= 1:\n                    tmp.append(\".\")\n                else:\n                    tmp.append(\"#\")\n                    b -= 1\n\n        print(\"\".join(tmp))\n\n\n\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        s = \"\".join([random.choice([\"F\", \"T\"]) for i in range(20)])\n        print(s)\n        solve(s, 1, 0)\n\n    return\ndef __starting_point():\n    # main()\n    solve()\n__starting_point()", "def main():\n    A, B = map(int, input().split())\n    board = [[\"#\"]*100 for _ in range(50)] + [[\".\"]*100 for _ in range(50)]\n    \n    wc = 1\n    for i in range(0, 50, 2):\n        for j in range(0, 100, 2):\n            if wc >= A:\n                break\n            board[i][j] = \".\"\n            wc += 1\n        if wc >= A:\n                break\n    \n    bc = 1\n    for i in range(51, 100, 2):\n        for j in range(0, 100, 2):\n            if bc >= B:\n                break\n            board[i][j] = \"#\"\n            bc += 1\n        if bc >= B:\n                break\n\n    print(100, 100)\n    for r in board:\n        print(*r, sep=\"\")\n\nmain()", "field = [['#']*100 for _ in range(50)] + [['.']*100 for _ in range(50)]\n\na, b = list(map(int, input().split()))\na-=1\nb-=1\nx = 0\ny = 0\nfor _ in range(a):\n    field[x][y] = '.'\n    y += 2\n    if y >= 100:\n        y = 0\n        x += 2\n\nx = 99\ny = 0\nfor _ in range(b):\n    field[x][y] = '#'\n    y += 2\n    if y >= 100:\n        y = 0\n        x -= 2\n\nprint((100,100))\n        \nfor row in field:\n    print((\"\".join(row)))\n\n        \n", "A, B = map(int, input().split())\n\ngrid = []\nfor _ in range(50):\n    grid.append([\"#\"] * 100)\nfor _ in range(50):\n    grid.append([\".\"] * 100)\n\n\ndiv, mod = divmod(A - 1, 50)\nfor d in range(div):\n    h = 0 + d * 2\n    for w in range(0, 100, 2):\n        grid[h][w] = \".\"\nif mod:\n    h = 0 + div * 2\n    for w in range(0, mod * 2, 2):\n        grid[h][w] = \".\"\n\ndiv, mod = divmod(B - 1, 50)\nfor d in range(div):\n    h = 51 + d * 2\n    for w in range(0, 100, 2):\n        grid[h][w] = \"#\"\nif mod:\n    h = 51 + div * 2\n    for w in range(0, mod * 2, 2):\n        grid[h][w] = \"#\"\n\nprint(100, 100)\nfor g in grid:\n    print(\"\".join(g))", "a,b=map(int,input().split())\nd=[[\"#\"]*100 for i in range(100)]\na-=1\nb-=1\nfor i in range(50,100):\n    for j in range(100):\n        d[i][j]=\".\"\nfor i in range(0,50,2):\n    for j in range(0,100,2):\n        if a==0:\n            break\n        d[i][j]=\".\"\n        a-=1\n    if a==0:\n        break\nfor i in range(99,49,-2):\n    for j in range(0,100,2):\n        if b==0:\n            break\n        d[i][j]=\"#\"\n        b-=1\nprint(100,100)\nfor i in d:\n    print(*i,sep=\"\")", "a, b = map(int, input().split())\n\nans = [[\"#\" if i < 50 else \".\" for _ in range(100)] for i in range(100)]\n\nfor i in range(a - 1):\n  rows = i // 50\n  clms = (i % 50) * 2 + (rows % 2)\n  ans[rows * 2][clms] = \".\"\n\nfor i in range(b - 1):\n  rows = i // 50\n  clms = (i % 50) * 2 + (rows % 2)\n  ans[99 - rows * 2][clms] = \"#\"\n  \nprint(100, 100)\nfor a in ans:\n  print(\"\".join(a))", "A,B = map(int,input().split())\n\na = 626 - A\nb = 530 - B\n\nH,W = 99,99\nS = [[\".\"]*W for _ in range(H)]\nfor i in range(H):\n    for j in range(W):\n\n        if i == 0 or i == H-1:\n            S[i][j] = \"#\"\n            continue\n        if j == 0 or j == W-1:\n            S[i][j] = \"#\"\n            continue\n\n        if i%4 == 0 or i%4 == 2:\n            if j%4 == 3:\n                S[i][j] = \".\"\n            else:\n                S[i][j] = \"#\"\n        elif i%4 == 1:\n            if j%4 == 0 or j%4 == 2:\n                S[i][j] = \"#\"\n\nh,w = 1,1\nwhile a != 0:\n    S[h][w] = \"#\"\n    a -= 1\n    w += 4\n    if w >= W:\n        w = 1\n        h += 4\n\nh,w = 4,3\nwhile b != 0:\n    S[h][w] = \"#\"\n    b -= 1\n    w += 4\n    if b == 0:\n        break\n    if w >= W-4:\n        h += 3\n        S[h][0] = \"#\"\n        w = 3\n        h += 1\n\nprint(99,99)\nfor i in range(H):\n    output = \"\".join(S[i])\n    print(output)", "def printrow(num, s, t):\n    for i in range(50):\n        for j in range(100):\n            res = ((i + j) % 3 == 0) & ((num - 1) * i > 0)\n            print(s if res else t, end='')\n            num -= res\n        print()\n\na, b = map(int, input().split())\n\nprint(100, 100)\nprintrow(b, '#', '.')\nprintrow(a, '.', '#')\n", "A,B = map(int,input().split())\nGrid = []\nfor i in range(100):\n    Grid += [[0]*100]\nacgrid= []\nfor _ in range(50):\n    acgrid.append(1)\n    acgrid.append(-1)\nwhite = 1\nblack = 1\nif A == 1 and B == 0:\n    Grid = [1,-1]\nelse:\n    i = 0\n    while True:\n        if white + 50 > A:\n            break\n        else:\n            Grid[i] = acgrid\n            Grid[i+1] = [-1]*100\n            i += 2\n            white += 50\n    for j in range(50):\n        if white != A:\n            Grid[i][2*j] = 1\n            Grid[i][2*j+1] = -1\n            white += 1\n        else:\n            Grid[i][2*j] = -1\n            Grid[i][2*j+1] = -1\n    i += 1\n    Grid[i] = [-1]*100\n    i += 1\n    Grid[i] = [1]*100\n    i += 1\n    while True:\n        if black + 50 > B:\n            break\n        else:\n            Grid[i] = acgrid\n            Grid[i+1] = [1]*100\n            i += 2\n            black += 50\n    for j in range(50):\n        if black != B:\n            Grid[i][2*j] = 1\n            Grid[i][2*j+1] = -1\n            black += 1\n        else:\n            Grid[i][2*j] = 1\n            Grid[i][2*j+1] = 1\nnum = []\nans = []\nfor box in Grid:\n    if box[0] == 0:\n        break\n    else:\n        st = ''\n        for s in box:\n            if s == 1:\n                st += '.'\n            elif s == -1:\n                st += '#'\n        ans.append(st)\nnum.append(len(ans))\nnum.append(len(ans[0]))\nprint(num[0],num[1])\nfor st in ans:\n    print(st)", "a,b=list(map(int,input().split()))\ngrid=[[\".\" for i in range(100)] for j in range(50)]+[[\"#\" for i in range(100)] for j in range(50)]\nwhite=0;black=0\nfor i in range(49):\n    if black==b-1:break\n    if i%2==0:continue\n    for j in range(100):\n        if i%2==j%2:\n            grid[i][j]=\"#\"\n            black+=1\n        if black==b-1:break\n    \nfor i in range(50,100):\n    if white==a-1:break\n    if i%2==0:continue\n    for j in range(100):\n        if i%2==j%2:\n            grid[i][j]=\".\"\n            white+=1\n        if white==a-1:break\nprint((100,100))\nfor i in range(100):\n    stri=\"\"\n    for j in grid[i]:\n        stri+=j\n    print(stri)\n", "a,b = list(map(int,input().split()))\nls = [['#']*99 for i in range(49)] + [['.']*99 for i in range(49)]\ni,j = 0,0\nfor c in range(a - 1):\n    ls[i][j] = '.'\n    if j >= 97:\n        j = 0;i += 2\n    else:\n        j += 2\ni,j = 51,0\nfor c in range(b - 1):\n    ls[i][j] = '#'\n    if j >= 97:\n        j = 0;i += 2\n    else:\n        j += 2\nprint(98,99)\nfor j in range(98):\n    print(''.join(ls[j]))", "import sys\nreadline = sys.stdin.readline\n\nA,B = list(map(int,readline().split()))\n\ngrid = []\nfor i in range(50):\n  grid.append([\"#\"] * 100)\n  \nfor i in range(50):\n  grid.append([\".\"] * 100)\n  \n# \u524d\u534a\u306e\u9ed2\u3044\u90e8\u5206\u304b\u3089A-1\u7b87\u6240\u3092\u767d\u304f\u5857\u308b\ncnt = 0\nfor i in range(50):\n  if cnt >= A - 1:\n    break\n  for j in range((i % 2) * 2,len(grid[i]),4):\n    if cnt >= A - 1:\n      break\n    grid[i][j] = \".\"\n    cnt += 1\n      \ncnt = 0\nfor i in range(51,100):\n  if cnt >= B - 1:\n    break\n  for j in range((i % 2) * 2,len(grid[i]),4):\n    if cnt >= B - 1:\n      break\n    grid[i][j] = \"#\"\n    cnt += 1\n\nprint((100,100))\nfor g in grid:\n  print((\"\".join(g)))\n", "# ARC093D\n\na,b = map(int, input().split())\n\nif a<=b:\n    m = \".\"\n    M = \"#\"\n    mc = a\n    Mc = b\nelse:\n    m = \"#\"\n    M = \".\"\n    mc = b\n    Mc = a\n    \ns = [[m]*100 for _ in range(100)]\ntmp = [[M,M,M,m],\n        [M,m,M,m],\n      [M,M,M,m],\n      [m,m,m,m]]\ntmp2 = [[M,m,m,m],\n        [m,m,m,m],\n      [m,m,m,m],\n      [m,m,m,m]]\ni = 0\nfor i in range(mc-1):\n    u,v = (i*4)//100, (i*4)%100\n    u *= 4\n    for x in range(4):\n        for y in range(4):\n            s[u+x][v+y] = tmp[x][y]\n\nfor j in range(i+1, i+1+(Mc-(mc-1))):\n    u,v = (j*4)//100, (j*4)%100\n    u *= 4\n    for x in range(4):\n        for y in range(4):\n            s[u+x][v+y] = tmp2[x][y]\nprint(100,100)\nprint(\"\\n\".join([\"\".join(item) for item in s]))", "w,b = list(map(int,input().split()))\ngrid = []\nfor i in range(50):\n    grid.append([\".\"]*100)\nfor i in range(50):\n    grid.append([\"#\"]*100)\nw -= 1\nb -= 1\ncnt = 0\ni = 0\nj = 0\nwhile cnt < b:\n    grid[i][j] = \"#\"\n    if j == 98:\n        i += 2\n        j = 1\n    elif j == 99:\n        i += 2\n        j = 0\n    else:\n        j += 2\n    cnt += 1\n\ncnt = 0\ni = 51\nj = 0\nwhile cnt < w:\n    grid[i][j] = \".\"\n    if j == 98:\n        i += 2\n        j = 1\n    elif j == 99:\n        i += 2\n        j = 0\n    else:\n        j += 2\n    cnt += 1\nprint((100,100))\nfor i in range(len(grid)):\n    print((\"\".join(grid[i])))\n\n", "A,B=map(int,input().split())\n\nU=[['#' for j in range(100)] for i in range(50)]\nfor w in range(A-1):\n    s=w//50;t=w%50\n    U[s*2][t*2]='.'\n\nD=[['.' for j in range(100)] for i in range(50)]\nfor b in range(B-1):\n    u=b//50;v=b%50\n    D[u*2+1][v*2]='#'\n\nprint(100,100)\nfor Ui in U:\n    print(''.join(Ui))\nfor Di in D:\n    print(''.join(Di))", "def main():\n    A, B = list(map(int, input().split()))\n    # A -> 0, B -> 1\n    N = 100\n    S = [[\"#\"]*N for _ in range(N//2)] + [[\".\"]*N for _ in range(N//2,N)]\n    a = A-1\n    b = B-1\n    for i in range(1,N//2-1,2):\n        for j in range(0,N,2):\n            if a > 0:\n                S[i][j] = \".\"\n                a -= 1\n            else:\n                break\n        if a <= 0:\n            break\n    for i in range(N//2+1,N,2):\n        for j in range(0,N,2):\n            if b > 0:\n                S[i][j] = \"#\"\n                b -= 1\n            else:\n                break\n        if b <= 0:\n            break\n    print((N,N))\n    print((\"\\n\".join([\"\".join(S[i]) for i in range(N)])))\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import gcd\n\nfrom math import factorial as f\n\nfrom math import ceil, floor, sqrt\nimport math\n\nimport bisect\nimport re\nimport heapq\n\nfrom copy import deepcopy\nimport itertools\nfrom itertools import permutations\n\nii = lambda: int(input())\nmi = lambda: list(map(int, input().split()))\nli = lambda: list(map(int, input().split()))\n\nyes = \"Yes\"\nno = \"No\"\n\n\ndef main():\n    a, b = mi()\n    print((100, 100))\n    ans = [[] for i in range(100)]\n    for i in range(50):\n        for j in range(100):\n            ans[i].append('#')\n    for i in range(50, 100):\n        for j in range(100):\n            ans[i].append('.')\n\n    for i in range(a - 1):\n        ans[2 * (i // 50)][2 * (i % 50)] = '.'\n    for i in range(b - 1):\n        ans[99 - 2 * (i // 50)][2 * (i % 50)] = '#'\n\n    for i in range(100):\n        print((''.join(ans[i])))\n\n\nmain()\n", "a,b=map(int,input().split())\nmat=[['.']*50+['#']*50 for _ in range(100)]\nfor i in range(a-1):\n  c=51+2*(i%24)\n  d=1+2*(i//24)\n  mat[d][c]='.'\nfor i in range(b-1):\n  c=1+2*(i%24)\n  d=1+2*(i//24)\n  mat[d][c]='#'\nprint(100,100)\nfor x in mat:print(*x,sep='')", "def fill(X, c, start):\n    for i in range(X):\n        q, r = divmod(i, 49)\n        i = q * 2 + start\n        j = r * 2 + 1 if q % 2 else r * 2 + 2\n        ans[i][j] = c\n\n\nA, B = map(int, input().split())\nH, W = 100, 100\nans = [list(\"#\" * W) if i < W // 2 else list(\".\" * W) for i in range(H)]\nfill(A - 1, \".\", 1)\nfill(B - 1, \"#\", H // 2 + 1)\nprint(H, W)\n[print(\"\".join(row)) for row in ans]\n", "A, B = list(map(int,input().split()))\nH = 100\nW = 20\ndef const(s1, s2, ct):\n  ans = [[s1]*W for _ in range(H)]\n  for i in range(ct):\n    ans[(i//(W//2)) * 2][(i%(W//2)) * 2] = s2\n  return ans\n\nans1 = const(\"#\", \".\", A-1)\nans2 = const(\".\", \"#\", B-1)\n#print(ans1)\n#print(ans2)\nans = []\nfor i in range(H):\n  S1 = ans1[i]\n  S2 = ans2[i][::-1]\n  ans.append(S1+S2)\n#print(\"\".join([\"#\",\".\"])) \n\nprint((H, len(ans[0])))\nfor a in ans:\n  #print(type(a))\n  print((\"\".join(a)))\n", "def main():\n    A, B = (int(i) for i in input().split())\n    grid = [[\"#\" if i < 50 else \".\"]*100 for i in range(100)]\n\n    for h in range(49):\n        if h % 2 == 1:\n            continue\n        for w in range(0, 100, 2):\n            if A > 1:\n                grid[h][w] = \".\"\n                A -= 1\n            else:\n                break\n    for h in range(51, 100):\n        if h % 2 == 0:\n            continue\n        for w in range(0, 100, 2):\n            if B > 1:\n                grid[h][w] = \"#\"\n                B -= 1\n            else:\n                break\n    print((100, 100))\n    for r in grid:\n        print((\"\".join(r)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdout\nprintn = lambda x: stdout.write(str(x))\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      list(map(int, input().split()))\nins = lambda : input().strip()\nDBG = True # and False\nBIG = 999999999\nR = 10**9 + 7\n\ndef ddprint(x):\n  if DBG:\n    print(x)\n\na,b = inm()\nc = [ ['#']*50 for i in range(45) ]\nc.extend([ ['.']*50 for i in range(45) ])\nfor z in range(a-1):\n    c[(z//25)*2][(z%25)*2] = '.'\nfor z in range(b-1):\n    c[(z//25)*2+50][(z%25)*2] = '#'\nprint('90 50')\nfor i in range(90):\n    print((''.join(c[i])))\n", "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    A, B = [int(x) for x in input().split()]\n\n    common = min(A, B)\n\n    ans = [[\"-\"] * 100 for j in range(100)]\n\n    if A == B == 1:\n        print(1, 2)\n        print(\".#\")\n        return\n\n    reverse = False\n    if B == 1:\n        reverse = True\n        A, B = B, A\n\n    A -= 1\n    B -= 1\n    Borg = B\n    Aorg = A\n\n    Arow = -(-A // 50) * 2\n    Brow = -(-B // 50) * 2\n\n    for i in range(Brow):\n        if i % 2 == 0:\n            for j in range(100):\n                if j % 2 == 0:\n                    if Borg <= 0:\n                        ans[i][j] = \".\"\n                    else:\n                        ans[i][j] = \"#\"\n                        Borg -= 1\n                else:\n                    ans[i][j] = \".\"\n        else:\n            for j in range(100):\n                ans[i][j] = \".\"\n\n    for i in range(Brow, Brow + Arow):\n        if (i - Brow) % 2 == 0:\n            for j in range(100):\n                ans[i][j] = \"#\"\n        else:\n            for j in range(100):\n                if j % 2 == 0:\n                    if Aorg <= 0:\n                        ans[i][j] = \"#\"\n                    else:\n                        ans[i][j] = \".\"\n                        Aorg -= 1\n                else:\n                    ans[i][j] = \"#\"\n\n    for i in range(Brow + Arow, 100):\n        for j in range(100):\n            ans[i][j] = \"#\"\n\n    print(100, 100)\n    if reverse:\n        for i in range(100):\n            for j in range(100):\n                if ans[i][j] ==  \"#\":\n                    print(\".\", end=\"\")\n                else:\n                    print(\"#\", end=\"\")\n            print()\n    else:\n        for a in ans:\n            print(\"\".join(a))\n\n\n\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "from math import gcd\n\nfrom math import factorial as f\n\nfrom math import ceil, floor, sqrt\nimport math\n\nimport bisect\nimport re\nimport heapq\n\nfrom copy import deepcopy\nimport itertools\nfrom itertools import permutations\n\n\nii = lambda: int(input())\nmi = lambda: list(map(int, input().split()))\nli = lambda: list(map(int, input().split()))\n\nyes = \"Yes\"\nno = \"No\"\n\n\ndef main():\n    a, b = mi()\n    print((100, 100))\n    ans = [[] for i in range(100)]\n    for i in range(50):\n        for j in range(100):\n            ans[i].append('#')\n    for i in range(50, 100):\n        for j in range(100):\n            ans[i].append('.')\n\n    for i in range(a - 1):\n        ans[2 * (i // 50)][2 * (i % 50)] = '.'\n    for i in range(b - 1):\n        ans[99 - 2 * (i // 50)][2 * (i % 50)] = '#'\n\n    for i in range(100):\n        print((''.join(ans[i])))\n\n\nmain()\n", "a,b=list(map(lambda x:int(x)-1,input().split()))\nm=[[0]*50+[1]*50 for i in range(100)]\nx,y=-2,0\nfor i in range(a):\n  x+=2\n  if x==50:\n    x=0\n    y+=2\n  m[y][x]=1\nx,y=49,0\nfor i in range(b):\n  x+=2\n  if x==101:\n    x=51\n    y+=2\n  m[y][x]=0\n\nprint(100,100)\nfor i in range(100):\n  for j in range(100):\n    print(\".\"*m[i][j]+\"#\"*(1-m[i][j]),end=\"\")\n  print()", "A,B = list(map(int,input().split()))\ngrid = []\nfor i in range(50):\n    grid.append([\".\"]*(100))\nfor i in range(50):\n    grid.append([\"#\"]*(100))\n\nA -= 1\nB -= 1\n\nfor i in range(0,50,2):\n    for j in range(0,100,2):\n        if B == 0:\n            break\n        grid[i][j] = \"#\"\n        B -= 1\n    else:\n        continue\n    break\n\ngrid = grid[::-1]\nfor i in range(0,50,2):\n    for j in range(0,100,2):\n        if A == 0:\n            break\n        grid[i][j] = \".\"\n        A -= 1\n    else:\n        continue\n    break\n\nprint(\"100 100\")\nfor row in grid:\n    print((\"\".join(row)))\n", "a,b= map(int,input().split())\nline=''.join(['.#']*50)\ndot=['.','#']\ncl=[''.join(['.']*100),''.join(['#']*100)]\nba=[b-1,a-1]\nans=[]\ny=ans.append\nfor c in [0,1]:\n    y(cl[c])\n    for i in range(ba[c]//50):\n        y(line)\n        y(cl[c])\n    y(''.join(['.#']*(ba[c]%50))+cl[c][(ba[c]%50)*2:])\n    y(cl[c])\nprint(len(ans),100)\nfor l in ans:print(''.join(l))", "import sys\nimport numpy as np\n\nstdin = sys.stdin\n\nri = lambda: int(rs())\nrl = lambda: list(map(int, stdin.readline().split()))  # applies to only numbers\nrs = lambda: stdin.readline().rstrip()  # ignores trailing space\n\nA, B = rl()\ngrid = [['.'] * 100 for _ in range(50)] + [['#'] * 100 for _ in range(50)]\nfor i in range(B-1):\n    row, column = divmod(i, 50)\n    row *= 2\n    column *= 2\n    grid[row][column] = '#'\n\nfor i in range(A-1):\n    row, column = divmod(i, 50)\n    row *= 2\n    column *= 2\n    grid[99-row][column] = '.'\nprint(100,100)\nfor x in grid:\n    print(*x, sep='')\n#56", "def main():\n    a, b = map(int, input().split())\n    k = 50\n    gw = [['.'] * 2 * k for _ in range(k)]\n    gb = [['#'] * 2 * k for _ in range(k)]\n    for i in range(b - 1):\n        h = (i // k) * 2\n        w = (i % k) * 2\n        gw[h][w] = '#'\n    for i in range(a - 1):\n        h = (i // k) * 2 + 1\n        w = (i % k) * 2 + 1\n        gb[-h][-w] = '.'\n    ans = gw + gb\n    print(2 * k, 2 * k)\n    for l in ans:\n        print(*l, sep='')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "A,B = map(int,input().split())\n\na = 626 - A\nb = 530 - B\n\nH,W = 99,99\nS = [[\".\"]*W for _ in range(H)]\nfor i in range(H):\n    for j in range(W):\n\n        if i == 0 or i == H-1:\n            S[i][j] = \"#\"\n            continue\n        if j == 0 or j == W-1:\n            S[i][j] = \"#\"\n            continue\n\n        if i%4 == 0 or i%4 == 2:\n            if j%4 == 3:\n                S[i][j] = \".\"\n            else:\n                S[i][j] = \"#\"\n        elif i%4 == 1:\n            if j%4 == 0 or j%4 == 2:\n                S[i][j] = \"#\"\n\nh,w = 1,1\nwhile a != 0:\n    S[h][w] = \"#\"\n    a -= 1\n    w += 4\n    if w >= W:\n        w = 1\n        h += 4\n\nh,w = 4,3\nwhile b != 0:\n    S[h][w] = \"#\"\n    b -= 1\n    w += 4\n    if b == 0:\n        break\n    if w >= W-4:\n        h += 3\n        S[h][0] = \"#\"\n        w = 3\n        h += 1\n\nprint(99,99)\nfor i in range(H):\n    output = \"\".join(S[i])\n    print(output)", "import sys\nimport math\nimport collections\nimport bisect\nimport itertools\n\n# import numpy as np\n\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline().rstrip())\nns = lambda: map(int, sys.stdin.readline().rstrip().split())\nna = lambda: list(map(int, sys.stdin.readline().rstrip().split()))\nna1 = lambda: list(map(lambda x: int(x) - 1, sys.stdin.readline().rstrip().split()))\n\n\n# ===CODE===\n\ndef main():\n    w, b = ns()\n    l = 100\n    mat = [[\"#\" for _ in range(l)] for __ in range(l)]\n\n    if w == 1 and b == 1:\n        mat[0][0] = \".\"\n\n    cnt = 0\n    breakflg = False\n    tmp = 1 if b > 1 else 0\n    flg = False\n    for i in range(0, l - 3, 3):\n        for j in range(0, l - 3, 3):\n            if not flg:\n                if cnt < w - tmp:\n                    around = \"#\"\n                    center = \".\"\n                else:\n                    flg = True\n                    break\n\n            if flg:\n                if cnt < w - tmp + b - 1:\n                    around = \".\"\n                    center = \"#\"\n                else:\n                    breakflg = True\n                    break\n\n\n\n\n            for n in range(3):\n                for m in range(3):\n                    mat[i + n][j + m] = center if n == 1 and m == 1 else around\n            cnt += 1\n        if breakflg:\n            break\n\n    print(l, l)\n    for mi in mat:\n        print(*mi, sep=\"\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "b, a = list(map(int, input().split()))\n\nwhite = '.' * 100\nblack = '#' * 100\nwb = '.#' * 50\n\nban = []\n\nnum_b = b - 1\nnum_a = a - 1\n\ngyo_b = num_b // 50\nret_b = num_b % 50\n\ngyo_a = num_a // 50\nret_a = num_a % 50\n\nfor i in range(gyo_a):\n    ban.append(wb)\n    ban.append(white)\n\nban.append(('.#' * ret_a + ('..' * (50 - ret_a))))\nban.append(white)\n\nfor i in range(50 - 2 * (gyo_a + 1)):\n    ban.append(white)\n\nfor i in range(50 - 2 * (gyo_b + 1)):\n    ban.append(black)\n\nfor i in range(gyo_b):\n    ban.append(wb)\n    ban.append(black)\n\nban.append('.#' * ret_b + '##' * (50 - ret_b))\nban.append(black)\n\nprint((100, 100))\n\nfor item in ban:\n    print((''.join(item)))\n", "a, b = list(map(int, input().split()))\na -= 1\nb -= 1\nans = [[\"#\" for _ in range(90)] for _ in range(40)] + [[\".\" for _ in range(90)] for _ in range(40)]\npos = 0\nfor i in range(a):\n    x = pos % 90\n    y = (pos // 90) * 2\n    ans[y][x] = \".\"\n    pos += 2\n\npos = 0\nfor j in range(b):\n    x = pos % 90\n    y = 45 +  (pos // 90) * 2\n    ans[y][x] = \"#\"\n    pos += 2\n    \nprint((80, 90))\nfor row in ans:\n    print((\"\".join(row)))\n", "#!/usr/bin/env python3\nimport sys\n\nsys.setrecursionlimit(10 ** 8)\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nA, B = map(int, readline().split())\n\n\ndef solve():\n    W = 100\n    hw = B // 25 + 2\n    hb = A // 25 + 2\n    H = hw + hb\n    grid = [[i >= hw] * W for i in range(H)]  # true => black\n\n    def paint_black():\n        black = 1\n        for r in range(0, hw - 1, 2):\n            for c in range(0, W, 2):\n                if black == B:\n                    return\n                grid[r][c] = True\n                black += 1\n\n    def paint_white():\n        white = 1\n        for r in range(hw + 1, H, 2):\n            for c in range(0, W, 2):\n                if white == A:\n                    return\n                grid[r][c] = False\n                white += 1\n\n    paint_black()\n    paint_white()\n    return grid\n\n\ndef print_grid(grid):\n    h, w = len(grid), len(grid[0])\n    print(h, w)\n    for r in range(h):\n        for c in range(w):\n            if grid[r][c]:\n                print(\"#\", end=\"\")\n            else:\n                print(\".\", end=\"\")\n        print()\n\n\ndef __starting_point():\n    print_grid(solve())\n\n__starting_point()", "#!/usr/bin/env python3\nimport sys\n\nsys.setrecursionlimit(10 ** 8)\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nA, B = map(int, readline().split())\ncolor_flipped = False\nif A < B:\n    A, B = B, A\n    color_flipped = True\n\n\ndef solve():\n    hb = min(B, 12)\n    h = (hb * 2 + 1) * 3\n    w = 100\n    # If not flipped, False -> White (A), True -> Black (B)\n    grid = [[True] * w for _ in range(h)]\n    black = 1\n    white = 0\n    for i in range(hb):\n        if black == B:\n            break\n        black += 1\n        white += 1\n        for c in range(w):\n            for j in range(3):\n                grid[6 * i + j + 3][c] = False\n\n    def paint_white(i):\n        nonlocal white\n        for c in range(0, w, 2):\n            if white == A:\n                return\n            grid[6 * i + 1][c] = False\n            white += 1\n\n    def paint_black(i):\n        nonlocal black\n        for c in range(0, w, 2):\n            if black == B:\n                return\n            grid[6 * i + 4][c] = True\n            black += 1\n\n    for i in range(hb):\n        paint_white(i)\n        paint_black(i)\n    assert black == B\n    while white < A:\n        grid.append([True] * w)\n        grid.append([True] * w)\n        for c in range(0, w, 2):\n            if white == A:\n                break\n            white += 1\n            grid[-1][c] = False\n\n    return grid\n\n\ndef print_grid(grid):\n    h, w = len(grid), len(grid[0])\n    print(h, w)\n    for r in range(h):\n        for c in range(w):\n            if grid[r][c] ^ color_flipped:\n                print(\"#\", end=\"\")\n            else:\n                print(\".\", end=\"\")\n        print()\n\n\ndef __starting_point():\n    print_grid(solve())\n\n__starting_point()", "a, b = map(int, input().split())\nprint(100, 100)\n\nfor i in range(50):\n    s = []\n    for j in range(100):\n        if (i + j) % 3 == 0 and (b - 1) * i > 0:\n            s.append('#')\n            b -= 1\n        else:\n            s.append('.')\n    print(*s, sep='')\n\nfor i in range(50):\n    s = []\n    for j in range(100):\n        if (i + j) % 3 == 0 and (a - 1) * i > 0:\n            s.append('.')\n            a -= 1\n        else:\n            s.append('#')\n    print(*s, sep='')\n", "import sys\nsys.setrecursionlimit(10 ** 7)\ndef getnum(t=int): return t(sys.stdin.buffer.readline())\ndef numline(t=int): return map(t, sys.stdin.buffer.readline().split())\ndef numread(t=int): return map(t, sys.stdin.buffer.read().split())\ndef getstr(): return sys.stdin.readline().strip()\ndef strline(): return sys.stdin.readline().strip().split()\ndef strread(): return sys.stdin.read().strip().split()\n\n#from numba import njit, b1, i4, i8, f8, jit\n#import numpy as np\n\n\ndef main():\n    A, B = numline()\n    S = [list('.' * 50 + '#' * 50) for _ in range(50)]\n    whites = 1\n    blacks = 1\n    for i in range(1, 49, 2):\n        if blacks == B:break\n        for j in range(1, 49, 2):\n            if blacks == B: break\n            S[i][j] = '#'\n            blacks += 1\n\n    for i in range(1, 49, 2):\n        if whites == A: break\n        for j in range(51, 99, 2):\n            if whites == A: break\n            S[i][j] = '.'\n            whites += 1\n\n    print(50, 100)\n    for s in S:\n        print(''.join(s))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "a, b = map(int, input().split())\nL = [[\"#\"]*100 for _ in range(50)] + [[\".\"]*100 for _ in range(50)]\nqa, ra = divmod(a-1, 50)\nfor i in range(qa):\n  L[i*2] = [\"#\" if j%2 else \".\" for j in range(100)]\nL[qa*2] = [\"#\" if j%2 else \".\" for j in range(ra*2)] + [\"#\"]*(100-ra*2)\nqb, rb = divmod(b-1, 50)\nfor i in range(qb):\n  L[51+i*2] = [\".\" if j%2 else \"#\" for j in range(100)]\nL[51+qb*2] = [\".\" if j%2 else \"#\" for j in range(rb*2)] + [\".\"]*(100-rb*2)\nprint(100, 100)\nfor l in L:\n  print(*l, sep=\"\")", "a,b = map(int,input().split())\ns = [['.']*99 if i<50 else ['#']*99 for i in range(100)]\nprint(100,99)\nfor i in range(b-1):\n    row = ((i*2)//99)*2\n    col = (i*2)%99\n    s[row][col] = '#'\nfor i in range(a-1):\n    row = ((i*2)//99)*2+51\n    col = (i*2)%99\n    s[row][col] = '.'\nfor i in s:\n    for j in i:\n        print(j,end='')\n    print()\n\n", "# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport sys\ninput = sys.stdin.readline\n\nimport math\n#from math import gcd\nimport bisect\nimport heapq\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import Counter\nfrom functools import lru_cache\n\n#############\n# Constants #\n#############\n\nMOD = 10**9+7\nINF = float('inf')\nAZ = \"abcdefghijklmnopqrstuvwxyz\"\n\n#############\n# Functions #\n#############\n\n######INPUT######\ndef I(): return int(input().strip())\ndef S(): return input().strip()\ndef IL(): return list(map(int,input().split()))\ndef SL(): return list(map(str,input().split()))\ndef ILs(n): return list(int(input()) for _ in range(n))\ndef SLs(n): return list(input().strip() for _ in range(n))\ndef ILL(n): return [list(map(int, input().split())) for _ in range(n)]\ndef SLL(n): return [list(map(str, input().split())) for _ in range(n)]\n\n######OUTPUT######\ndef P(arg): print(arg); return\ndef Y(): print(\"Yes\"); return\ndef N(): print(\"No\"); return\ndef E(): return()\ndef PE(arg): print(arg); return()\ndef YE(): print(\"Yes\"); return()\ndef NE(): print(\"No\"); return()\n\n#####Shorten#####\ndef DD(arg): return defaultdict(arg)\n\n#####Inverse#####\ndef inv(n): return pow(n, MOD-2, MOD)\n\n######Combination######\nkaijo_memo = []\ndef kaijo(n):\n  if(len(kaijo_memo) > n): return kaijo_memo[n]\n  if(len(kaijo_memo) == 0): kaijo_memo.append(1)\n  while(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n  return kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n  if(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]\n  if(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)\n  while(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n  return gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n  if n == r: return 1\n  if n < r or r < 0: return 0\n  ret = 1\n  ret = ret * kaijo(n) % MOD\n  ret = ret * gyaku_kaijo(r) % MOD\n  ret = ret * gyaku_kaijo(n-r) % MOD\n  return ret\n\n######Factorization######\ndef factorization(n):\n  arr = []\n  temp = n\n  for i in range(2, int(-(-n**0.5//1))+1):\n    if temp%i==0:\n      cnt=0\n      while temp%i==0: \n        cnt+=1 \n        temp //= i\n      arr.append([i, cnt])\n  if temp!=1: arr.append([temp, 1])\n  if arr==[]: arr.append([n, 1])\n  return arr\n\n#####MakeDivisors######\ndef make_divisors(n):\n  divisors = []\n  for i in range(1, int(n**0.5)+1):\n    if n % i == 0:\n      divisors.append(i)\n      if i != n // i: \n        divisors.append(n//i)\n  return divisors\n\n#####MakePrimes######\ndef make_primes(N):\n  max = int(math.sqrt(N))\n  seachList = [i for i in range(2,N+1)]\n  primeNum = []\n  while seachList[0] <= max:\n    primeNum.append(seachList[0])\n    tmp = seachList[0]\n    seachList = [i for i in seachList if i % tmp != 0]\n  primeNum.extend(seachList)\n  return primeNum\n\n#####GCD#####\ndef gcd(a, b):\n    while b: a, b = b, a % b\n    return a\n\n#####LCM#####\ndef lcm(a, b):\n    return a * b // gcd (a, b)\n\n#####BitCount#####\ndef count_bit(n):\n  count = 0\n  while n:\n    n &= n-1\n    count += 1\n  return count\n\n#####ChangeBase#####\ndef base_10_to_n(X, n):\n  if X//n: return base_10_to_n(X//n, n)+[X%n]\n  return [X%n]\n\ndef base_n_to_10(X, n):\n  return sum(int(str(X)[-i-1])*n**i for i in range(len(str(X))))\n\ndef base_10_to_n_without_0(X, n):\n  X -= 1\n  if X//n: return base_10_to_n_without_0(X//n, n)+[X%n]\n  return [X%n]\n\n#####IntLog#####\ndef int_log(n, a):\n  count = 0\n  while n>=a:\n    n //= a\n    count += 1\n  return count\n\n#############\n# Main Code #\n#############\n\nA,B = IL()\nprint(100,100)\nA =[\"#\"]*(25*50-(A-1))+[\".\"]*(A-1) \nB =[\"#\"]*(B-1)+[\".\"]*(25*50-(B-1))\nfor j in range(25):\n  for i in range(50):\n    print(A.pop(),end=\"\")\n    if i == 49:\n      print(\"#\")\n    else:\n      print(\"#\",end=\"\")\n  print(\"#\"*100)\nfor j in range(25):\n  print(\".\"*100)\n  for i in range(50):\n    print(B.pop(),end=\"\")\n    if i == 49:\n      print(\".\")\n    else:\n      print(\".\",end=\"\")", "a, b = list(map(int, input().split()))\n\nprint('100 100')\n\nflip = a > b\n\nif flip:\n    a, b = b, a\n\nf = [['#' for _ in range(100)] for __ in range(100)]\n\ni, j = (0, 0)\n\nfor _ in range(b-1):\n    f[i][j+1] = '.'\n    f[i+1][j+1] = '.'\n    f[i+1][j] = '.'\n\n    j += 2\n\n    if j > 98:\n        j = 0\n        i += 2\n\ni, j = (99, 0)\n\nif b == 1:\n    a += 1\n\nfor _ in range(a-1):\n    f[i][j] = '.'\n    j += 2\n\n    if j > 98:\n        j = 0\n        i -= 2\n\nif flip:\n    for i in range(100):\n        f[i] = list(['.' if x == '#' else '#' for x in f[i]])\n\nfor row in f:\n    print((''.join(row)))\n", "w,b=map(int, input().split())\nA,B,C,D=['##'],['..'],['#.'],['.#']\nw-=1\nb-=1\nprint(100,50)\nfor i in range(100):\n  if i<50:\n    if i%2==1:\n      print(*A*25,sep='')\n    elif w>=25 and i%2==0:\n      print(*C*25,sep='')\n      w-=25\n    else:\n      E=C*w+A*(25-w)\n      print(*E,sep='')\n      w=0\n  else:\n    if i%2==0:\n      print(*B*25,sep='')\n    elif b>=25 and i%2==1:\n      print(*D*25,sep='')\n      b-=25\n    else:\n      F=D*b+B*(25-b)\n      print(*F,sep='')\n      b=0", "A, B = list(map(int, input().split()))\n\nans = [['#'] * 100 for _ in range(50)] + [['.'] * 100 for _ in range(50)]\nA -= 1\nB -= 1\n\nfor h in range(0, 100, 2):\n    if A == 0:\n        break\n    for w in range(0, 100, 2):\n        ans[h][w] = '.'\n        A -= 1\n        if A == 0:\n            break\n\nfor h in range(0, 100, 2)[::-1]:\n    if B == 0:\n        break\n    for w in range(0, 100, 2):\n        ans[h][w] = '#'\n        B -= 1\n        if B == 0:\n            break\n\nprint((100, 100))\nfor a in ans:\n    print((''.join(a)))\n", "A,B=map(int,input().split())\n\nmat=[]\nfor i in range(100):\n  array=[\".\"]*20+[\"#\"]*20\n  mat.append(array)\n\nfor i in range(B-1):\n  j=2*(i//10)\n  k=2*(i%10)\n  mat[j][k]=\"#\"\nfor i in range(A-1):\n  j=2*(i//10)\n  k=2*(i%10)+21\n  mat[j][k]=\".\"\n  \nprint(100,40)\nfor i in range(100):\n  print(\"\".join(mat[i]))", "A,B=list(map(int, input().split()))\nh=w=100\nans=[['' for _ in range(w)] for __ in range(h)]\nfor i in range(h//2):\n    for j in range(w):\n        if i&1 and j&1 and A-1>0:\n            ans[i][j]='.'\n            A-=1\n        else:\n            ans[i][j]='#'\nfor i in range(h-1,h//2-1,-1):\n    for j in range(w):\n        if i&1 and j&1 and B-1>0:\n            ans[i][j]='#'\n            B-=1\n        else:\n            ans[i][j]='.'\n\nprint((h,w))\nfor r in ans:\n    print((''.join(r)))\n", "A, B = list(map(int, input().split()))\n\nN = 100\n\nA -= 1\nB -= 1\n\nS = []\nfor i in range(N // 2):\n  S.append(list(\".\" * N))\nfor i in range(50):\n  S.append(list(\"#\" * N))\n\nflag = 0\nfor i in range(1, N // 2, 2):\n  for j in range(1, N, 2):\n    if B == 0:\n      flag = 1\n      break\n    else:\n      S[i][j] = \"#\"\n      B -= 1\n  if flag:\n    break\n\nflag = 0\nfor i in range(N // 2 + 1, N, 2):\n  for j in range(1, N, 2):\n    if A == 0:\n      flag = 1\n      break\n    else:\n      S[i][j] = \".\"\n      A -= 1\n  if flag:\n    break\n\nprint((N, N))\nfor i in range(N):\n  print((\"\".join(S[i])))\n", "# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport sys\ninput = sys.stdin.readline\n\nimport math\n#from math import gcd\nimport bisect\nimport heapq\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import Counter\nfrom functools import lru_cache\n\n#############\n# Constants #\n#############\n\nMOD = 10**9+7\nINF = float('inf')\nAZ = \"abcdefghijklmnopqrstuvwxyz\"\n\n#############\n# Functions #\n#############\n\n######INPUT######\ndef I(): return int(input().strip())\ndef S(): return input().strip()\ndef IL(): return list(map(int,input().split()))\ndef SL(): return list(map(str,input().split()))\ndef ILs(n): return list(int(input()) for _ in range(n))\ndef SLs(n): return list(input().strip() for _ in range(n))\ndef ILL(n): return [list(map(int, input().split())) for _ in range(n)]\ndef SLL(n): return [list(map(str, input().split())) for _ in range(n)]\n\n######OUTPUT######\ndef P(arg): print(arg); return\ndef Y(): print(\"Yes\"); return\ndef N(): print(\"No\"); return\ndef E(): return()\ndef PE(arg): print(arg); return()\ndef YE(): print(\"Yes\"); return()\ndef NE(): print(\"No\"); return()\n\n#####Shorten#####\ndef DD(arg): return defaultdict(arg)\n\n#####Inverse#####\ndef inv(n): return pow(n, MOD-2, MOD)\n\n######Combination######\nkaijo_memo = []\ndef kaijo(n):\n  if(len(kaijo_memo) > n): return kaijo_memo[n]\n  if(len(kaijo_memo) == 0): kaijo_memo.append(1)\n  while(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n  return kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n  if(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]\n  if(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)\n  while(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n  return gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n  if n == r: return 1\n  if n < r or r < 0: return 0\n  ret = 1\n  ret = ret * kaijo(n) % MOD\n  ret = ret * gyaku_kaijo(r) % MOD\n  ret = ret * gyaku_kaijo(n-r) % MOD\n  return ret\n\n######Factorization######\ndef factorization(n):\n  arr = []\n  temp = n\n  for i in range(2, int(-(-n**0.5//1))+1):\n    if temp%i==0:\n      cnt=0\n      while temp%i==0: \n        cnt+=1 \n        temp //= i\n      arr.append([i, cnt])\n  if temp!=1: arr.append([temp, 1])\n  if arr==[]: arr.append([n, 1])\n  return arr\n\n#####MakeDivisors######\ndef make_divisors(n):\n  divisors = []\n  for i in range(1, int(n**0.5)+1):\n    if n % i == 0:\n      divisors.append(i)\n      if i != n // i: \n        divisors.append(n//i)\n  return divisors\n\n#####MakePrimes######\ndef make_primes(N):\n  max = int(math.sqrt(N))\n  seachList = [i for i in range(2,N+1)]\n  primeNum = []\n  while seachList[0] <= max:\n    primeNum.append(seachList[0])\n    tmp = seachList[0]\n    seachList = [i for i in seachList if i % tmp != 0]\n  primeNum.extend(seachList)\n  return primeNum\n\n#####GCD#####\ndef gcd(a, b):\n    while b: a, b = b, a % b\n    return a\n\n#####LCM#####\ndef lcm(a, b):\n    return a * b // gcd (a, b)\n\n#####BitCount#####\ndef count_bit(n):\n  count = 0\n  while n:\n    n &= n-1\n    count += 1\n  return count\n\n#####ChangeBase#####\ndef base_10_to_n(X, n):\n  if X//n: return base_10_to_n(X//n, n)+[X%n]\n  return [X%n]\n\ndef base_n_to_10(X, n):\n  return sum(int(str(X)[-i-1])*n**i for i in range(len(str(X))))\n\ndef base_10_to_n_without_0(X, n):\n  X -= 1\n  if X//n: return base_10_to_n_without_0(X//n, n)+[X%n]\n  return [X%n]\n\n#####IntLog#####\ndef int_log(n, a):\n  count = 0\n  while n>=a:\n    n //= a\n    count += 1\n  return count\n\n#############\n# Main Code #\n#############\n\nA,B = IL()\nprint(100,100)\n\nfor i in range(25):\n  P = 50\n  while P:\n    if A>1:\n      if P != 1:\n        print(\".#\",end=\"\")\n        A -= 1\n      else:\n        print(\".#\")\n        A -= 1\n    else:\n      if P != 1:\n        print(\"##\",end=\"\")\n      else:\n        print(\"##\")\n    P -= 1\n  print(\"#\"*100)\n\nfor i in range(25):\n  P = 50\n  print(\".\"*100)\n  while P:\n    if B>1:\n      if P != 1:\n        print(\".#\",end=\"\")\n        B -= 1\n      else:\n        print(\".#\")\n        B -= 1\n    else:\n      if P != 1:\n        print(\"..\",end=\"\")\n      else:\n        print(\"..\")\n    P -= 1\n", "import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nin_n = lambda: int(readline())\nin_nn = lambda: list(map(int, readline().split()))\nin_s = lambda: readline().rstrip().decode('utf-8')\nin_nl = lambda: list(map(int, readline().split()))\nin_nl2 = lambda H: [in_nl() for _ in range(H)]\nin_map = lambda: [s == ord('.') for s in readline() if s != ord('\\n')]\nin_map2 = lambda H: [in_map() for _ in range(H)]\nin_all = lambda: list(map(int, read().split()))\n\n\ndef main():\n\n    A, B = in_nn()\n\n    grid = [[''] * 100 for _ in range(100)]\n    for y in range(100):\n        for x in range(100):\n            if 0 <= y < 50:\n                grid[y][x] = '#'\n            else:\n                grid[y][x] = '.'\n\n    for y in range(49):\n        for x in range(100):\n            if y % 2 == 0 and x % 2 == 0:\n                if A > 1:\n                    grid[y][x] = '.'\n                    A -= 1\n\n    for y in range(51, 100):\n        for x in range(100):\n            if y % 2 == 1 and x % 2 == 0:\n                if B > 1:\n                    grid[y][x] = '#'\n                    B -= 1\n\n    print((100, 100))\n    for y in range(100):\n        print((''.join(grid[y])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a,b = map(int,input().split())\nprint(\"40 100\")\n\nkuro = [[\"#\" for i in range(100)] for j in range(20)]\nsiro = [[\".\" for i in range(100)] for j in range(20)]\n\ncou = 0\nflag = False\nfor i in range(0,20,2):\n    if flag:\n        break\n    for j in range(0,100,2):\n        if cou >= a-1:\n            flag = True\n            break\n        elif cou < a-1:\n            cou += 1\n            kuro[i][j] = \".\"\n\ncou = 0\nflag = False\nfor i in range(1,20,2):\n    if flag:\n        break\n    for j in range(0,100,2):\n        if cou >= b-1:\n            flag = True\n            break\n        elif cou < b-1:\n            cou += 1\n            siro[i][j] = \"#\"\n\nfor i in range(20):\n    for j in range(100):\n        print(kuro[i][j],end=\"\")\n    print()\nfor i in range(20):\n    for j in range(100):\n        print(siro[i][j],end=\"\")\n    print()", "B,A = map(int,input().split())\n\nH = W = 100\nans = [['.#'[i//50]]*W for i in range(H)]\n\nA -= 1\nB -= 1\nfor i in range(10):\n    k = min(A,50)\n    A -= k\n    for j in range(k):\n        ans[i*2][j*2] = '#'\n    if A==0: break\nfor i in range(10):\n    k = min(B,50)\n    B -= k\n    for j in range(k):\n        ans[51+i*2][j*2] = '.'\n    if B==0: break\n\nprint(H,W)\nfor row in ans:\n    print(''.join(row))", "\nG=[[\"#\"]*100 for i in range(100)]\nfor i in range(50,100):\n  for j in range(100):\n    G[i][j]=\".\"\n\nA,B=map(int,input().split())   \nA-=1\nB-=1\n\ni,j=0,0\n\nwhile(A>0):\n  G[i][j]=\".\"\n  A-=1\n  j+=2\n  if j>99:\n    j=0\n    i+=2\ni,j=99,0\nwhile(B>0):\n  G[i][j]=\"#\"\n  B-=1\n  j+=2\n  if j>99:\n    j=0\n    i-=2\n    \n    \nprint(100,100)\nfor i in range(100):\n  print(\"\".join(G[i]))", "import sys\ninput = sys.stdin.buffer.readline\n\n#sys.setrecursionlimit(10**9)\n#from functools import lru_cache\n\ndef RD(): return sys.stdin.read()\ndef II(): return int(input())\ndef MI(): return map(int,input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int,input().split()))\ndef LF(): return list(map(float,input().split()))\ndef TI(): return tuple(map(int,input().split()))\n# rstrip().decode()\n\ndef main():\n\ta,b=MI()\n\n\tG=[]\n\n\tfor _ in range(25):\n\t\tG+=[list(\"...#\")*25,list(\".#.#\")*25,list(\"...#\")*25,list(\"####\")*25]\n\n\t#print(G)\n\n\n\n\tfor i in range(25):\n\t\tfor j in range(24):\n\t\t\tif a<25**2:\n\t\t\t\tG[4*i][4*j+3]=\".\"\n\t\t\t\ta+=1\n\t\t\telse:\n\t\t\t\tbreak\n\n\n\tfor i in range(25):\n\t\tif a<25**2:\n\t\t\tG[4*i+3][0]=\".\"\n\t\t\ta+=1\n\t\telse:\n\t\t\tbreak\n\n\tfor i in range(25):\n\t\tfor j in range(25):\n\t\t\tif b<25**2+1:\n\t\t\t\tG[4*i+1][4*j+1]=\".\"\n\t\t\t\tb+=1\n\n\tprint(100,100)\n\n\n\n\n\n\n\n\tfor i in G:\n\t\tprint(*i,sep=\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "def examA():\n    C = [SI()for _ in range(3)]\n    ans = C[0][0]+C[1][1]+C[2][2]\n    print(ans)\n    return\n\ndef examB():\n    N, M = LI()\n    P = [0]*N\n    S = [LSI()for _ in range(M)]\n    pena = 0\n    ac = set()\n    for p,s in S:\n        p = int(p)-1\n        if s==\"WA\":\n            P[p] += 1\n        else:\n            if p in ac:\n                continue\n            ac.add(p)\n            pena += P[p]\n\n    print(len(ac),pena)\n    return\n\ndef examC():\n    W, H, N = LI()\n    lx, rx, ly, ry = 0, W, 0, H\n    A = [LI()for _ in range(N)]\n    for x,y,a in A:\n        if a==1:\n            lx = max(lx,x)\n        elif a==2:\n            rx = min(rx,x)\n        elif a==3:\n            ly = max(ly,y)\n        elif a==4:\n            ry = min(ry,y)\n    ans = max(0,rx-lx)*max(0,ry-ly)\n    print(ans)\n    return\n\ndef examD():\n    N, H = LI()\n    B = [0]*N\n    maxa = 0\n    ans = 0\n    for i in range(N):\n        a, B[i] = LI()\n        if a>maxa:\n            maxa = a\n    B.sort(reverse=True)\n    for b in B:\n        if b<maxa:\n            break\n        H -= b\n        ans += 1\n        if H<=0:\n            print(ans)\n            return\n    ans += -(-H//maxa)\n    print(ans)\n    return\n\ndef examE():\n    A, B = LI()\n    ans = [[\"#\"]*100 for _ in range(50)] + [[\".\"]*100 for _ in range(50)]\n    i = 0; j = 0\n    for _ in range(A-1):\n        ans[i][j] = \".\"\n        j += 2\n        if j>=100:\n            j = 0; i += 2\n    i = 0; j = 0\n    for _ in range(B-1):\n        ans[99-i][j] = \"#\"\n        j += 2\n        if j>=100:\n            j = 0; i += 2\n    print(100,100)\n    for v in ans:\n        print(\"\".join(map(str,v)))\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(readline())\ndef LI(): return list(map(int,readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nnonlocal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\ndef __starting_point():\n    examE()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"\n__starting_point()", "A,B = list(map(int,input().split()))\nwhite = [['.']*100 for _ in range(50)]\nblack = [['#']*100 for _ in range(50)]\n\nflag = True\nif B != 1:\n    for h in range(0,50,2):\n        if flag:\n            for w in range(0,100,2):\n                white[h][w] = '#'\n                B-=1\n                if B == 1:\n                    flag = False\n                if flag == False:\n                    break\n        if flag == False:\n            break\n\nflag = True\nif A != 1:\n    for h in range(1,50,2):\n        if flag:\n            for w in range(0,100,2):\n                black[h][w] = '.'\n                A-=1\n                if A == 1:\n                    flag = False\n                if flag == False:\n                    break\n        if flag == False:\n            break\nprint((100,100))\nfor w in white:\n    print((\"\".join(w)))\nfor b in black:\n    print((\"\".join(b)))\n", "import sys\n\nA, B = map(int, sys.stdin.readline().split())\n\n\"\"\"\n..........\n..........\n..........\n\u306b\u3001\u9023\u7d50\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u9ed2\u3092\u7f6e\u3044\u3066\u3044\u304f\n\u767d\u306e\u5834\u5408\u3082\u767d\u9ed2\u3092\u9006\u306b\u3057\u3066\u540c\u3058\u3053\u3068\u3092\u3084\u308c\u3070\u826f\u3044\n\"\"\"\nA -= 1\nB -= 1\nprint(100, 100)\nfor i in range(100):\n    for j in range(100):\n        # \u9ed2\u4e00\u9762\u306b\u767d\u3092\u5165\u308c\u3066\u3044\u304f\n        if i < 50:\n            if A > 0 and i % 2 == 0 and j % 2 == 0:\n                print(\".\", end=\"\")\n                A -= 1\n            else:\n                print(\"#\", end=\"\")\n        # \u767d\u4e00\u9762\u306b\u9ed2\u3092\u5165\u308c\u3066\u3044\u304f\n        elif 50 <= i:\n            if B > 0 and i % 2 == 1 and j % 2 == 0:\n                print(\"#\", end=\"\")\n                B -= 1\n            else:\n                print(\".\", end=\"\")\n        if j == 99:\n            print(\"\")", "ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"Yes\") if fl else print(\"No\")\nimport collections\nimport math\nimport itertools\nimport heapq as hq\nceil = math.ceil\na,b = ma()\nwh= \".\"\nbl = \"#\"\nif a>b:\n    a,b = b,a\n    wh,bl=bl,wh\narea = [[wh]*100 for i in range(100)]\ndef cycle(y,x,f=True):\n    for i in range(y,y+3):\n        for j in range(x,x+3):\n            area[i][j]=bl\n    if f:\n        area[y+1][x+1] = wh\ndef solve():\n    cnt=0\n    iy = 0\n    ix = 0\n    while cnt<b:\n        if cnt+1<a:\n            cycle(iy,ix)\n        else:\n            cycle(iy,ix,f=False)\n        ix+=4\n        if ix>=95:\n            ix = 0\n            iy+=4\n        cnt+=1\n\nsolve()\nprint(100,100)\nfor ar in area:\n    print(\"\".join(ar))\n", "# input()\n# int(input())\n# map(int, input().split())\n# list(map(int, input().split()))\n# list(map(int, list(input()))) # \u30b9\u30da\u30fc\u30b9\u304c\u306a\u3044\u6570\u5b57\u30ea\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nimport math\nimport fractions\nimport sys\nimport bisect\nimport heapq  # \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc(\u6700\u5c0f\u5024\u53d6\u308a\u51fa\u3057)\nimport collections\nfrom collections import Counter\nfrom collections import deque\nimport pprint\nimport itertools\nfrom functools import lru_cache\n\nsr = lambda: input()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n\"\"\"n\u3092\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\n\"\"\"2\u4ee5\u4e0a\u306e\u6574\u6570n => [[\u7d20\u56e0\u6570, \u6307\u6570], ...]\u306e2\u6b21\u5143\u30ea\u30b9\u30c8\"\"\"\ndef factorization(n):\n    arr = []\n    temp = n\n    if n == 1:\n        return arr\n\n    for i in range(2, int(-(-n ** 0.5 // 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp != 1:\n        arr.append([temp, 1])\n\n    if arr == []:\n        arr.append([n, 1])\n\n    return arr\n\n\n# a^n\ndef power(a, n, mod):\n    x = 1\n    while n:\n        if n & 1:\n            x *= a % mod\n        n >>= 1\n        a *= a % mod\n    return x % mod\n\n\n# n*(n-1)*...*(l+1)*l\ndef kaijo(n, l, mod):\n    if n == 0:\n        return 1\n    a = n\n    tmp = n - 1\n    while (tmp >= l):\n        a = a * tmp % mod\n        tmp -= 1\n    return a\n\n# Union Find\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# \u7d04\u6570\u751f\u6210\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    divisors.sort()\n    return divisors\n\n# \u533a\u9593\u66f4\u65b0\u306e\u307f\nclass kukankousin:\n    def __init__(self, n):\n        self.n = n\n        self.N0 = 2**(self.n-1).bit_length()\n        self.data = [None]*(2*self.N0)\n        self.INF = (-1, 2**31-1)\n\n    # \u533a\u9593[l, r+1)\u306e\u5024\u3092x\u306b\u66f8\u304d\u63db\u3048\u308b\n    # x\u306f(t, value)\u3068\u3044\u3046\u5024\u306b\u3059\u308b (\u65b0\u3057\u3044\u5024\u307b\u3069t\u306f\u5927\u304d\u304f\u306a\u308b)\n    def update(self, l, r, x):\n        L=l+self.N0;\n        R=r+self.N0\n        while L<R:\n            if R & 1:\n                R-=1\n                self.data[R-1]=x\n\n            if L & 1:\n                self.data[L-1]=x\n                L+=1\n            L>>=1;\n            R>>=1\n\n\n    # a_i\u306e\u73fe\u5728\u306e\u5024\u3092\u53d6\u5f97\n    def _query(self, k):\n        k+=self.N0-1\n        s=self.INF\n        while k>=0:\n            if self.data[k]:\n                s=max(s, self.data[k])\n            k=(k-1)//2\n        return s\n\n\n    # \u3053\u308c\u3092\u547c\u3073\u51fa\u3059\n    def query(self, k):\n        return self._query(k)[1]\n\n\ninf = 10 ** 18\nmod = 10 ** 9 + 7\n# mod = 998244353\n\n# Press the green button in the gutter to run the script.\ndef __starting_point():\n    a,b = lr()\n    h,w = 96,99\n    m = [['#' for j in range(w)] for i in range(h)]\n    for i in range(48,h):\n        for j in range(w):\n            m[i][j] = '.'\n\n    for k in range(a-1):\n        y = k//33\n        x = k%33\n        y = y*3+1\n        x = x*3+1\n        m[y][x] = '.'\n\n    for k in range(b-1):\n        y = 16+k//33\n        x = k%33\n        y = y*3+1\n        x = x*3+1\n        m[y][x] = '#'\n\n    print(h,w)\n    for l in m:\n        print(*l, sep='')\n__starting_point()", "A,B = list(map(int,input().split()))\nh,w = 100,100\n\nGrid = [list('#'*w) for _ in range(50)] + [list('.'*h) for _ in range(50)]\n\nA -= 1\nB -= 1\nfor i in range(0,50,2):\n    for j in range(0,100,2):\n        if A > 0:\n            Grid[i][j] = '.'\n            A -= 1\n        else:\n            break\n    else:\n        continue\n    break\n\nfor i in range(99,50,-2):\n    for j in range(0,100,2):\n        if B > 0:\n            Grid[i][j] = '#'\n            B -= 1\n        else:\n            break\n    else:\n        continue\n    break\n\nprint((100,100))\nfor i in range(100):\n    print((''.join(Grid[i])))\n", "# coding: utf-8\n# Your code here!\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\na,b = list(map(int,readline().split()))\nh = w = 100\nres = [[0]*w for _ in range(50)] + [[1]*w for _ in range(50)]\na -= 1\nb -= 1\n\nq = a//50\nr = a%50\nfor i in range(q):\n    res[2*i][::2] = [1]*50\nres[2*q][:2*r:2] = [1]*r\n\nq = b//50\nr = b%50\nfor i in range(q):\n    res[2*i+51][::2] = [0]*50\nres[2*q+51][:2*r:2] = [0]*r\n\n# 0: \u9ed2: #\nprint((h,w))\nfor ri in res:\n    print((\"\".join(\"#\" if rij==0 else \".\" for rij in ri)))\n\n\n\n", "A, B = list(map(int, input().split()))\nz = ([\"#\"]*100 + [\"\\n\"])*50\n\nfor a in range(A-1):\n    j = a%50\n    z[(j*2)+((a//50)%2)+202*(a//50)] = \".\"\nz2 = ([\".\"]*100 + [\"\\n\"])*50\n\nfor a in range(B-1):\n    j = a%50\n    z2[(j*2)+((a//50)%2)+101+202*(a//50)] = \"#\"\nprint((100, 100))\nprint((\"\".join(z)+\"\".join(z2)))\n", "from pprint import pprint\n\n\ndef create(A,B):\n    is_swapped = False\n    if(A > B): \n        larger = A\n        A = B\n        B = larger\n        is_swapped = True\n    # A is smaller\n    H,W = 99,99\n    dp = [['.' for i in range(W)] for j in range(H)]\n    Ndot = 1; Nsharp = 0\n    for i in range(1,H-1,2):\n        for j in range(1,W-1,2):\n            dp[i][j] = '#'\n            Nsharp += 1  \n    #pprint(dp)\n    #print(Ndot,Nsharp)\n\n    Nfill = 0\n    for i in range(1,H-2,4):\n        for j in range(1,W-2,4):\n            if(Nfill == A):\n                break\n            dp[i+1][j] = '#'\n            dp[i][j+1] = '#'\n            dp[i+2][j+1] = '#'\n            dp[i+1][j+2] = '#'\n            Ndot += 1\n            Nsharp -= 3\n            Nfill += 1\n    #pprint(dp)\n\n    #Delete Isolated #\n    for i in range(H):\n        for j in range(W):\n            if(Nsharp == B):\n                break\n            else:\n                if(i == 0 or i == H-1 or j == 0 or j == W-1):\n                    continue\n                else:\n                    if(dp[i][j] == '#' and dp[i-1][j] == '.' and dp[i+1][j] == '.' and dp[i][j-1] == '.' and dp[i][j+1] == '.'):\n                        dp[i][j] = '.'\n                        Nsharp -= 1\n    #pprint(dp)\n    #print(Ndot,Nsharp)\n\n    if(Ndot > A):\n        dp[2][1] = '.'\n        Ndot -= 1\n\n    #pprint(dp)\n    #print(Ndot,Nsharp)\n\n\n    if(is_swapped):\n        for i in range(H):\n            for j in range(W):\n                if(dp[i][j] == '.'):\n                    dp[i][j] = '#'\n                else:\n                    dp[i][j] = '.'\n\n    Ans = ''\n    for row in dp:\n        tmp = ''.join(row)\n        tmp += '\\n'\n        Ans += tmp\n    print(*[H,W])\n    print(Ans)\n\na,b = map(int,input().split())\ncreate(a,b)", "a, b = map(int, input().split())\nd = [[\"#\" if i < 50 else \".\" for _ in range(100)] for i in range(100)]\nfor i in range(a - 1):\n    d[(i // 50) * 4][(i % 50) * 2] = \".\"\nfor i in range(b - 1):\n    d[99 - (i // 50) * 2][(i % 50) * 2] = \"#\"\nprint(100, 100)\nfor i in range(100):\n    print(*d[i], sep=\"\")", "def printrow(num, s, t):\n    for i in range(50):\n        res = []\n        for j in range(100):\n            if (i + j) % 3 == 0 and (num - 1) * i > 0:\n                res.append(s)\n                num -= 1\n            else:\n                res.append(t)\n        print(*res, sep='')\n\na, b = map(int, input().split())\n\nprint(100, 100)\nprintrow(b, '#', '.')\nprintrow(a, '.', '#')\n", "# input = sys.stdin.readline\nfrom bisect import *\nfrom collections import *\nfrom heapq import *\n# import functools\n# import itertools\n# import math\n\nA,B=list(map(int,input().split()))\nA-=1\nB-=1\nlst=[[\"#\" if m<50 else \".\" for i in range(100)] for m in range(100)]\nfor h in range(0,100,2):\n    for w in range(0,100,2):\n        if A==0:\n            break\n        lst[h][w]=\".\"\n        A-=1\n\n    if A==0:\n        break\nfor h in range(99,-1,-2):\n    for w in range(0,100,2):\n        if B==0:\n            break\n        lst[h][w]=\"#\"\n        B-=1\n\n    if B==0:\n        break\nprint((100,100))\nfor i in range(100):\n    print((\"\".join(lst[i])))\n", "#!python3\n\n# input\nA, B = list(map(int, input().split()))\n\n\ndef paint1(ans):\n    a = 1\n    for i in range(0, 49, 2):\n        for j in range(0, 100, 2):\n            if a == A:\n                return\n            ans[i][j] = \".\"\n            a += 1\n\n\ndef paint2(ans):\n    b = 1\n    for i in range(51, 100, 2):\n        for j in range(0, 100, 2):\n            if b == B:\n                return\n            ans[i][j] = \"#\"\n            b += 1\n\n\ndef main():\n    ans = [[\"#\"] * 100 for _ in range(50)] + [[\".\"] * 100 for _ in range(50)]\n    paint1(ans)\n    paint2(ans)\n\n    print((100, 100))\n    for r in ans:\n        print((\"\".join(r)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a, b = map(int, input().split())\nprint(41, 100)\nfor _ in range(10):\n    for _ in range(50):\n        print('.', end='')\n        if b>1:\n            print('#', end='')\n            b -= 1\n        else:\n            print('.', end='')\n    print()\n    print('.'*100)\nprint('#'*100)\nfor _ in range(10):\n    for _ in range(50):\n        print('#', end='')\n        if a>1:\n            print('.', end='')\n            a -= 1\n        else:\n            print('#', end='')\n    print()\n    print('#'*100)", "A,B = map(int,input().split())\nh = 96\nw = 99\nS = [[\".\" for _ in range(w)] for _ in range(h)]\nfor i in range(48,h):\n    for j in range(w):\n        S[i][j] = \"#\"\ncnt = 0\nwhile cnt<B-1:\n    for i in range(16):\n        for j in range(33):\n            S[3*i+1][3*j+1]=\"#\"\n            cnt += 1\n            if cnt==B-1:break\n        if cnt==B-1:break\n    if cnt==B-1:break\ncnt = 0\nwhile cnt<A-1:\n    for i in range(16):\n        for j in range(33):\n            S[48+3*i+1][3*j+1]=\".\"\n            cnt += 1\n            if cnt==A-1:break\n        if cnt==A-1:break\n    if cnt==A-1:break\nprint(h,w)\nfor i in range(h):\n    print(\"\".join(S[i]))", "A,B = map(int,input().split())\nT = [[\".\" for _ in range(100)] for _ in range(100)]\nfor i in range(50,100):\n    for j in range(100):\n        T[i][j]=\"#\"\ncnt = 1\nfor i in range(1,48,2):\n    for j in range(1,100,2):\n        if cnt<B:\n            T[i][j] = \"#\"\n            cnt += 1\ncnt = 1\nfor i in range(51,100,2):\n    for j in range(1,100,2):\n        if cnt<A:\n            T[i][j] = \".\"\n            cnt += 1\nprint(100,100)\nfor i in range(100):\n    print(\"\".join(T[i]))", "ab = list(map(int, input().split()))\n\ng = [['#']*100 for _ in range(50)] + [['.']*100 for _ in range(50)]\nfor k in range(2):\n    cnt = 0\n    flag = False\n    c = '.' if k == 0 else '#'\n    for i in range(51*k, 50*(k+1), 2):\n        for j in range(0, 100, 2):\n            if cnt == ab[k]-1:\n                flag = True\n                break\n            g[i][j] = c\n            cnt += 1\n        if flag:\n            break\nprint((100, 100))\nfor i in g:\n    print((''.join(i)))\n", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    a, b = list(map(int, input().split()))\n    res = [[\"\"] * 100 for _ in range(100)]\n    for i in range(100):\n        for j in range(100):\n            res[i][j] = \".\" if i < 50 else \"#\"\n\n    b -= 1\n    for i in range(0, 50, 2):\n        for j in range(0, 100, 2):\n            if b == 0:\n                break\n            res[i][j] = \"#\"\n            b -= 1\n        else:\n            continue\n        break\n\n    a -= 1\n    for i in reversed(list(range(50, 100, 2))):\n        for j in range(0, 100, 2):\n            if a == 0:\n                break\n            res[i][j] = \".\"\n            a -= 1\n        else:\n            continue\n        break\n\n    print((100, 100))\n    for i in res:\n        print((\"\".join(i)))\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "ansl1 = list(\"#\" * (100 * 25))\nansl2 = list(\".\" * (100 * 25))\n\na,b = map(int,input().split())\n\nfor i in range(a-1):\n    ansl1[2*i] = \".\"\n\nfor i in range(b-1):\n    ansl2[2*i] = \"#\"\nprint(100, 100)\n\nfor i in range(25):\n    print(\"\".join(ansl1[(i*100):(i*100)+100]))\n    print(\"#\"*100)\n\nfor j in range(24, -1, -1):\n    print(\"\".join(ansl2[(j*100):(j*100)+100]))\n    print(\".\" * 100)", "def main():\n    BK = '#'\n    WH = '.'\n\n    A, B = map(int, input().split())\n\n    g = []\n    for _ in range(50):\n        g.append([BK] * 100)  # 100\u306b\u3057\u5fd8\u308c\u3066\u3044\u305f\n    for _ in range(50):\n        g.append([WH] * 100)\n\n    r, c = 1, 1\n    for _ in range(A - 1):\n        g[r][c] = WH\n        c += 2\n        if c > 99:\n            c = 1\n            r += 2\n\n    r, c = 51, 1\n    for _ in range(B - 1):\n        g[r][c] = BK\n        c += 2\n        if c > 99:\n            c = 1\n            r += 2\n\n    print(100, 100)\n    for row in g:\n        print(*row, sep='')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ndef input(): return sys.stdin.readline().strip()\ndef mapint(): return map(int, input().split())\nsys.setrecursionlimit(10**9)\n\nA, B = mapint()\nprint(100, 100)\n\nwhite_grid = [['.']*100 for _ in range(50)]\nblack_grid = [['#']*100 for _ in range(50)]\n\nw, b = A-1, B-1\nfor i in range(0, 50, 2):\n    for j in range(0, 100, 2):\n        if b:\n            white_grid[i][j] = '#'\n            b -= 1\n        else:\n            break\n    else:\n        continue\n    break\n\nfor i in range(1, 50, 2):\n    for j in range(0, 100, 2):\n        if w:\n            black_grid[i][j] = '.'\n            w -= 1\n        else:\n            break\n    else:\n        continue\n    break\n\nfor w in white_grid:\n    print(''.join(w))\nfor b in black_grid:\n    print(''.join(b))", "# editorial\u53c2\u7167\n# \u683c\u5b50\u307e\u3067\u8a70\u3081\u8fbc\u3082\u3046\u3068\u3057\u305f\u306e\u304c\u56f0\u96e3\n# \u5341\u5206\u5927\u304d\u3044\u9ed2\u767d\u306e\u584a\u4e00\u3064\u306b\u5b64\u7acb\u3057\u305f\u767d\u9ed2\u306e\u70b9\u3092\u53d6\u308b\n\n#\u6700\u521d\u306e\u306b\u51fa\u529bh,w\u8ffd\u52a0\na,b = list(map(int, input().split( )))\nk=50\nW = [[\".\"]*(k*2) for i in range(k)] \nB = [[\"#\"]*(k*2) for i in range(k)]\n\nfor i in range(b-1):\n    w = (i//k)*2\n    h = (i%k)*2\n    W[w][h]=\"#\"\n\n\nfor i in range(a-1):\n    w = (i//k)*2+1\n    h = (i%k)*2+1\n    B[-w][-h]=\".\"\nans = [''.join(W[i]) for i in range(k)]+ [''.join(B[i]) for i in range(k)]\nprint((100,100))\nprint(('\\n'.join(ans)))\n\n\n    \n", "import sys\ninput = sys.stdin.readline\nA, B = map(int, input().split())\na = [[\"#\"] * 100 for _ in range(100)]\nfor i in range(100):\n  a[i][0] = \".\"\nfor i in range(0, 100, 2):\n  for j in range(1, 99):\n    a[i][j] = \".\"\nfor i in range(0, 100, 2):\n  for j in range(1, 99, 2):\n    if A <= 1: break\n    A -= 1\n    a[i][j] = \"#\"\nfor i in range(99, -1, -2):\n  for j in range(98, 0, -2):\n    if B <= 1: break\n    B -= 1\n    a[i][j] = \".\"\nprint(100, 100)\nfor r in a: print(\"\".join(r))", "# editorial\u53c2\u7167\n# \u683c\u5b50\u307e\u3067\u8a70\u3081\u8fbc\u3082\u3046\u3068\u3057\u305f\u306e\u304c\u56f0\u96e3\n# \u5341\u5206\u5927\u304d\u3044\u9ed2\u767d\u306e\u584a\u4e00\u3064\u306b\u5b64\u7acb\u3057\u305f\u767d\u9ed2\u306e\u70b9\u3092\u53d6\u308b\n\n\na,b = list(map(int, input().split( )))\nk=50\nW = [[\".\"]*(k*2) for i in range(k)] \nB = [[\"#\"]*(k*2) for i in range(k)]\nfor i in range(b-1):\n    h = (i//k)*2\n    w = (i%k)*2\n    W[h][w]=\"#\"\n\n\n\nfor i in range(a-1):\n    h = (i//k)*2+1\n    w = (i%k)*2+1\n    B[-h][-w]=\".\"\n    \nans = [''.join(W[i]) for i in range(k)]+ [''.join(B[i]) for i in range(k)]\nprint((100,100))\nprint(('\\n'.join(ans)))\n", "import bisect\nimport functools\nimport heapq\nimport itertools\nimport sys\nimport math\nimport random\nimport time\nfrom collections import Counter, deque, defaultdict\nfrom functools import reduce\nfrom operator import xor, itemgetter\nfrom pprint import pprint\nfrom types import FunctionType\nfrom typing import List, Any\nfrom sys import stdin\n\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 9)\n\ndef inp(): return stdin.readline().rstrip()\ndef lmi(): return list(map(int, stdin.readline().split()))\ndef narray(*shape, init: Any = 0):\n    if shape: return [narray(*shape[1:], init=init) for _ in range(shape[0])]\n    if callable(init): return init()\n    return init\n\n\ndef main():\n    A, B = lmi()\n    H, W = 100, 100\n    grid = narray(H, W)\n    white, black = A, B\n    white -= 1\n    for i in range(0, H, 4):\n        for j in range(0, W, 4):\n            if white == 0 and black == 0:\n                break\n            elif black == 0:\n                if i > 0:\n                    # up\n                    for yd, xd in ((-1, 0), (-1, 1), (-1, 2)):\n                        yy = i + yd\n                        xx = j + xd\n                        grid[yy][xx] = 1\n                elif j > 0:\n                    # left\n                    for yd, xd in ((0, -1), (1, -1), (2, -1)):\n                        yy = i + yd\n                        xx = j + xd\n                        grid[yy][xx] = 1\n            elif white == 0:\n                # center\n                yy = i + 1\n                xx = j + 1\n                grid[yy][xx] = 1\n            for yd, xd in ((0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)):\n                yy = i + yd\n                xx = j + xd\n                grid[yy][xx] = 1\n            white = max(0, white - 1)\n            black = max(0, black - 1)\n\n    print((100, 100))\n    for line in grid:\n        print((''.join('#' if c else '.' for c in line)))\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ndef main():\n    input = sys.stdin.readline\n    A, B = list(map(int, input().split()))\n    h, w = 100, 100\n    G = [[0] * w for _ in range(h)]\n    for i in range(50):\n        for j in range(w):\n            G[i][j] = 1\n    A, B = A - 1, B - 1\n    for i in range(0, 50, 2):\n        if A <= 0: break\n        for j in range(0, 100, 2):\n            if A <= 0: break\n            G[i][j] = 0\n            A -= 1\n    for i in range(99, 50, -2):\n        if B <= 0: break\n        for j in range(0, 100, 2):\n            if B <= 0: break\n            G[i][j] = 1\n            B -= 1\n    print((h, w))\n    for i in range(h):\n        print((''.join(['.' if G[i][j] == 0 else '#' for j in range(w)])))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "A,B = map(int, input().split())\n\nw = '.'\nb = '#'\n\nans = [ [b]* 20 + [w] * 20 for _ in range(100)]\n\nfor i in range(A-1):\n    x = 2 * (i//50)\n    y = (i%50) * 2\n    ans[y][x] = w\n    \nfor i in range(B-1):\n    x = 2 * (i//50) + 21\n    y = (i%50) * 2\n    ans[y][x] = b\n    \nprint('100 40')\nfor i in range(100):\n    print(''.join(ans[i]))", "\"\"\"\n\u611f\u60f3\n\n- \u6700\u5927\u30b1\u30fc\u30b9\u3067\u30d3\u30c3\u30b7\u30ea\u3064\u3081\u3066\u5e02\u677e\u6a21\u69d8\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304b\u3068\u601d\u3063\u305f\n-\n\"\"\"\nA, B = list(map(int, input().split()))\nM = [['.']*100 for _ in range(50)] + [['#']*100 for _ in range(50)]\nA -= 1\nB -= 1\nfor i in range(B):\n    i *= 2\n    M[(i//50)*2][i%50] = '#'\n\nfor i in range(A):\n    i *= 2\n    M[51+(i//50)*2][i%50] = '.'\nprint((100, 100))\nfor m in M:\n    print((''.join(m)))\n", "K = 33\nL = K * 2\ns = [['#' for j in range(L)] for i in range(K)]\nt = [['.' for j in range(L)] for i in range(K)]\n\nA, B = map(int, input().split())\n\ndef color(s, j0, i1, c):\n    j = j0\n    k = j0 * 2\n    for i in range(1, i1):\n        if L <= k:\n            j += 1\n            k = (j & 1) << 1\n        s[j][k] = c\n        k += 4\n\ncolor(s, 0, A, '.')\ncolor(t, 1, B, '#')\n\nprint(L, L)\nf = lambda s : print('\\n'.join((map(lambda s : ''.join(s), s))))\nf(s)\nf(t)\n", "a, b = map(int, input().split())\n\nans = [[\"#\" if i < 50 else \".\" for _ in range(100)] for i in range(100)]\n\nfor i in range(a - 1):\n  rows =  (i // 50) * 2\n  clms = (i % 50) * 2\n  ans[rows * 2][clms] = \".\"\n\nfor i in range(b - 1):\n  rows = (i // 50) * 2\n  clms = (i % 50) * 2\n  ans[99 - rows][clms] = \"#\"\n  \nprint(100, 100)\nfor a in ans:\n  print(\"\".join(a))", "a,b=map(int,input().split())\nm=[[0 for _ in range(100)] for _ in range(100)]\n#paint lower half as 1 \nfor i in range(50,100):\n    for j in range(100):\n        m[i][j]=1\na-=1 #0 means black\nb-=1 #1 means white \n#paint chess board like pattern of b white dots in upper half\nfor i in range(0,48,2):\n    if b==0:\n        break\n    for j in range(0,100,2):\n        m[i][j]=1\n        b-=1\n        if b==0:\n            break\n     \n#now paint a black dots in lower half\nfor i in range(99,50,-2):\n    if a==0:\n        break\n    for j in range(0,100,2):\n        m[i][j]=0\n        a-=1\n        if a==0:\n            break\nprint(100,100)\nfor i in range(100):\n    for j in range(100):\n        if m[i][j]==0:\n            print('.',end='')\n        else:\n            print('#',end='')\n    print()\n\n", "a,b=map(int,input().split())\nn=100\n\ngrid=[[\"#\"]*n for _ in range(n//2)]+[[\".\"]*n for _ in range(n//2)]\n\nk=0\ncnt=0\nfor i in range(a-1):\n    grid[k][2*i-cnt]=\".\"\n    if (2*i)%100==n-2:\n        k+=2\n        cnt+=n\n\nk=n//2+1\ncnt=0\nfor i in range(b-1):\n    grid[k][2*i-cnt]=\"#\"\n    if (2*i)%100==n-2:\n        k+=2\n        cnt+=n\nprint(100,100)\nfor i in grid:\n    print(\"\".join(i))", "\"\"\"\n\nW\u306f100\u3067\u56fa\u5b9a\u3059\u308b\u3002\n1\u884c\u76ee\u3067\u3067\u304d\u308b\u304b\u304e\u308a\u9023\u7d50\u6210\u5206\u306e\u6570\u304c\u591a\u304f\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\nW=100\u3067\u56fa\u5b9a\u3057\u3001\u767d\u9ed2\u683c\u5b50\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u5217\u3092\u7d44\u3080\u3002\n\u767d\u3068\u9ed2\u3069\u3061\u3089\u304b\u304c\u898f\u5b9a\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u3057\u305f\u3089\u6b21\u306e\u884c\u3067\u8abf\u6574\u3092\u5165\u308c\u3066\u6570\u3092\u6e1b\u3089\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u767d\u304c\u898f\u5b9a\u6570\u306b\u9054\u3057\u305f\u3068\u4eee\u5b9a\u3057\u3088\u3046\u3002\n\u767d\u8272\u306e\u6570\u306b\u8abf\u6574\u3092\u5165\u308c\u305f\u3089\u3001\u6b21\u306e\u884c\u3067\u306f\n\"\"\"\nA,B = list(map(int,input().split()))\nN = 100\nn = N//2\ngrid = [[\"#\"]*N for _ in range(N)]\nfor i in range(n,N):\n    for j in range(N):\n        grid[i][j] = \".\"\n\nA -= 1\nB -= 1\n\nfor i in range(0,A//n*2,2):\n    for j in range(0,N,2):\n        grid[i][j] = \".\"\n\nfor j in range(0,A%n*2,2):\n    grid[A//n*2][j] = \".\"\n\ngrid = grid[::-1]\nfor i in range(0,B//n*2,2):\n    for j in range(0,N,2):\n        grid[i][j] = \"#\"\n\nfor j in range(0,B%n*2,2):\n    grid[B//n*2][j] = \"#\"\n\nprint((\" \".join([str(N),str(N)])))\nfor i in range(N):\n    print((\"\".join(grid[i])))\n", "a,b=map(int,input().split())\ncntA,cntB=0,0\nprint(100,100)\nflag=False\nif a>=b:\n  arr=[['#']*100 for i in range(100)]\n  l=[]\n  cntB=1\n  for i in range(2,99,4):\n    if flag:break\n    for j in range(2,99,4):\n      l.append((i,j))\n      for y in range(i-1,i+2):\n        for x in range(j-1,j+2):\n          arr[y][x]='.'\n      cntA+=1\n      if cntA==a:\n        flag=True\n        break\n  while cntB<b:\n    cntB+=1\n    s,t=l.pop()\n    arr[s][t]='#'\n  for i in range(100):\n    print(''.join(arr[i]))\nelse:\n  arr=[['.']*100 for i in range(100)]\n  l=[]\n  cntA=1\n  for i in range(2,99,4):\n    if flag:break\n    for j in range(2,99,4):\n      l.append((i,j))\n      for y in range(i-1,i+2):\n        for x in range(j-1,j+2):\n          arr[y][x]='#'\n      cntB+=1\n      if cntB==b:\n        flag=True\n        break\n  while cntA<a:\n    cntA+=1\n    s,t=l.pop()\n    arr[s][t]='.'\n  for i in range(100):\n    print(''.join(arr[i]))", "A, B = list(map(int, input().split()))\n\nans = [['#'] * 100 for _ in range(50)] + [['.'] * 100 for _ in range(50)]\nA -= 1\nB -= 1\n\nfor h in range(0, 50, 2):\n    for w in range(0, 100, 2):\n        if A == 0:\n            break\n        ans[h][w] = '.'\n        A -= 1\n\nfor h in range(0, 50, 2):\n    for w in range(0, 100, 2):\n        if B == 0:\n            break\n        ans[-(h + 1)][w] = '#'\n        B -= 1\n\nprint((100, 100))\nfor a in ans:\n    print((''.join(a)))\n", "a,b=map(int,input().split())\nprint(100,100)\nans=[list(\"#\"*100)for _ in range(50)]+[list(\".\"*100)for _ in range(50)]\nfor i in range(a-1):\n  h=(i//50)*2\n  w=(i%50)*2\n  ans[h][w]=\".\"\nfor i in range(b-1):\n  h=(i//50)*2+51\n  w=(i%50)*2\n  ans[h][w]=\"#\"\nfor i in ans:print(\"\".join(i))", "A, B = list(map(int, input().split()))\nh, w = 99, 99\n\na = '.'\nb = '#'\n\nif A > B:\n    a, b = b, a\n    B, A = A, B\nA -= 1\nANS = [[b]*w for i in range(h)]\nB -= 1\nidx = 0\n\nfor i in range(w):\n    ANS[0][i] = a\nfor i in range(49):\n    ANS[i][0] = a\n    ANS[i][-1] = a\nwhile(B):\n    idx += 1\n    for i in range(1, w, 2):\n        if B == 0:\n            ANS[idx][i] = a\n            ANS[idx][i+1] = a\n        else:\n            ANS[idx][i] = b\n            ANS[idx][i+1] = a\n            B -= 1\n    idx += 1\n    for i in range(w):\n        ANS[idx][i] = a\nidx += 1\n\n\nfor i in range(idx, 49):\n    for j in range(w):\n        ANS[i][j] = a\n\nfor i in range(w):\n    ANS[49][i] = b\nfor i in range(49, h):\n    ANS[i][0] = b\n    ANS[i][-1] = b\nidx = 49\nwhile(A):\n    idx += 1\n    for i in range(1, w, 2):\n        if A == 0:\n            ANS[idx][i] = b\n            ANS[idx][i+1] = b\n        else:\n            ANS[idx][i] = a\n            ANS[idx][i+1] = b\n            A -= 1\n    idx += 1\n    for i in range(w):\n        ANS[idx][i] = b\n\nfor i in range(idx, h):\n    for j in range(w):\n        ANS[i][j] = b\n\nprint((h, w))\n\nfor i in range(h):\n    print((\"\".join(ANS[i])))\n", "A,B = list(map(int,input().split()))\nif A==1:\n    C = [[\".\" for _ in range(100)] for _ in range(100)]\n    cnt = 0\n    flag=0\n    for i in range(0,100,2):\n        for j in range(0,100,2):\n            C[i][j] = \"#\"\n            cnt += 1\n            if cnt==B:\n                flag = 1\n                break\n        if flag==1:\n            break\nelif B==1:\n    C = [[\"#\" for _ in range(100)] for _ in range(100)]\n    cnt = 0\n    flag = 0\n    for i in range(0,100,2):\n        for j in range(0,100,2):\n            C[i][j] = \".\"\n            cnt += 1\n            if cnt==A:\n                flag = 1\n                break\n        if flag==1:\n            break\nelse:\n    C = [[\".\" for _ in range(100)] for _ in range(100)]\n    for i in range(50,100):\n        for j in range(100):\n            C[i][j] = \"#\"\n    for i in range(1,49):\n        for j in range(1,99):\n            C[i][j] = \"#\"\n    cnt = 0\n    flag = 0\n    for i in range(2,47,2):\n        for j in range(2,97,2):\n            if cnt==A-2:\n                flag = 1\n                break\n            C[i][j] = \".\"\n            cnt += 1\n        if flag==1:break\n    for i in range(51,99):\n        for j in range(1,99):\n            C[i][j] = \".\"\n    cnt = 0\n    flag = 0\n    for i in range(52,97,2):\n        for j in range(2,97,2):\n            if cnt==B-2:\n                flag = 1\n                break\n            C[i][j] = \"#\"\n            cnt += 1\n        if flag==1:break\nprint((100,100))\nfor i in range(100):\n    print((\"\".join(C[i])))\n", "\nimport sys\nsys.setrecursionlimit(1 << 25)\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef read_ints():\n    return list(map(int, read().split()))\n\n\ndef read_a_int():\n    return int(read())\n\n\ndef read_tuple(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(tuple(map(int, read().split())))\n    return ret\n\n\ndef read_col(H):\n    '''\n    H is number of rows\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n    ex1)A,B=read_col(H)    ex2) A,=read_col(H) #\u4e00\u5217\u306e\u5834\u5408\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, read().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_matrix(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, read().split())))\n    return ret\n    # return [list(map(int, read().split())) for _ in range(H)] # \u5185\u5305\u8868\u8a18\u306fpypy\u3067\u306f\u9045\u3044\u305f\u3081\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nfrom operator import itemgetter\nfrom itertools import product, permutations, combinations\nfrom bisect import bisect_left, bisect_right  # , insort_left, insort_right\n# https://atcoder.jp/contests/arc093/tasks/arc093_b\n\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u51fa\u529b\u3057\u308d\n# \u9023\u7d50\u6210\u5206\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\n# 100*100\u306e\u30de\u30b9\u306b\u9650\u5b9a\u3057\u3066\u8003\u3048\u308c\u3070\u7c21\u5358\u3002\n# 50*100\u306e\u30de\u30b9\u306e\u4e2d\u3067499\u500b\u306e\u5cf6\u3092\u4f5c\u308b\u3053\u3068\u306f\u3067\u304d\u308b\u3088\u306d\uff1f(2\u884c\u3042\u305f\u308a25\u500b\u4f5c\u308c\u308b\u306f\u305a, 40\u884c\u3082\u3042\u308c\u3070\u5341\u5206\u4f5c\u308c\u308b)\n\nA, B = read_ints()\nA -= 1\nB -= 1\nprint(100, 100)\n\n# \u9ed2\u306e\u4e2d\u306b\u767d\u306e\u500b\u5cf6\u3092\u4f5c\u308b\nfor _ in range(25):\n    for _ in range(50):\n        if A > 0:\n            print('#.', end='')\n            A -= 1\n        else:\n            print('##', end='')\n    print()\n    print('#' * 100)  # \u9694\u96e2\n\n# \u767d\u306e\u4e2d\u306b\u9ed2\u306e\u500b\u5cf6\u3092\u4f5c\u308b\nfor _ in range(25):\n    print('.' * 100)  # \u9694\u96e2\n    for _ in range(50):\n        if B > 0:\n            print('#.', end='')\n            B -= 1\n        else:\n            print('..', end='')\n    print()\n", "import math\n#import numpy as np\nimport queue\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\n\ndef main():\n    a,b = list(map(int,ipt().split()))\n    if a == 1 and b == 1:\n        print((1,2))\n        print(\".#\")\n        return()\n    print((100,100))\n    a -= 1\n    b -= 1\n    ni = 0\n    while a >= 50:\n        print((\".#\"*50))\n        print((\"#\"*100))\n        ni += 2\n        a -= 50\n    print((\".#\"*a+\"##\"*(50-a)))\n    print((\"#\"*100))\n    ni += 2\n    for i in range(50-ni):\n        print((\"#\"*100))\n    ni = 0\n    while b >= 50:\n        print((\".\"*100))\n        print((\".#\"*50))\n        ni += 2\n        b -= 50\n    print((\".\"*100))\n    print((\".#\"*b+\"..\"*(50-b)))\n    ni += 2\n    for i in range(50-ni):\n        print((\".\"*100))\n\n\n\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\ninf = float('inf')\nmod = 10 ** 9 + 7\n\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(A, B):\n    ans = [['#' for _ in range(101)] for _ in range(101)]\n    B -= 1\n    for i in range(1, 101, 4):\n        for j in range(1, 101, 4):\n            if A + B == 0:\n                break\n            if A > 0 and B > 0:\n                ans[i][j] = '.'\n                ans[i][j + 1] = '.'\n                ans[i][j + 2] = '.'\n                ans[i + 1][j] = '.'\n                ans[i + 1][j + 2] = '.'\n                ans[i + 2][j] = '.'\n                ans[i + 2][j + 1] = '.'\n                ans[i + 2][j + 2] = '.'\n                A -= 1\n                B -= 1\n            elif A > 0:\n                ans[i][j] = '.'\n                A -= 1\n            elif B > 0:\n                if j == 1:\n                    ans[i - 1][j] = '.'\n                    ans[i - 1][j + 1] = '.'\n                    ans[i - 1][j + 2] = '.'\n                ans[i][j - 1] = '.'\n                ans[i + 1][j - 1] = '.'\n                ans[i + 2][j - 1] = '.'\n                ans[i][j] = '.'\n                ans[i][j + 1] = '.'\n                ans[i][j + 2] = '.'\n                ans[i + 1][j] = '.'\n                ans[i + 1][j + 2] = '.'\n                ans[i + 2][j] = '.'\n                ans[i + 2][j + 1] = '.'\n                ans[i + 2][j + 2] = '.'\n                B -= 1\n        if A + B == 0:\n            break\n\n    print((100, 100))\n    for anss in ans[1:]:\n        print((''.join(anss[1:])))\n\n\ndef __starting_point():\n    A, B = list(map(int, input().split()))\n    solve(A, B)\n\n    # # test\n    # from random import randint\n    # import tool.testcase as tt\n    # from tool.testcase import random_str, random_ints\n    # solve()\n\n__starting_point()", "import sys\n# import math\n# import bisect\n# import numpy as np\n# from decimal import Decimal\n# from numba import njit, i8, u1, b1 #JIT compiler\n# from itertools import combinations, product\n# from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_ints2(x):   return map(lambda num: int(num) - x, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef GCD(a: int, b: int) -> int: return b if a%b==0 else GCD(b, a%b)\ndef LCM(a: int, b: int) -> int: return (a * b) // GCD(a, b)\n\ndef Main():\n    a, b = read_ints()\n    print(100, 100)\n    grid = [['#']*100 for _ in range(50)] + [['.']*100 for _ in range(50)]\n    for i in range(~-a):\n        x, y = divmod(i, 49)\n        grid[x * 2 + 1][y * 2 + 1] = '.'\n    for i in range(~-b):\n        x, y = divmod(i, 49)\n        grid[x * 2 + 51][y * 2 + 1] = '#'\n    print(*[''.join(g) for g in grid], sep='\\n')\n\ndef __starting_point():\n    Main()\n__starting_point()", "print('97 97')\nA,B=map(int,input().split())\nif A>B:\n  char=['.','#']\n  M=A\n  m=B\nelse:\n  char=['#','.']\n  M=B\n  m=A\n\nfor i in range(1,98):\n  str=''\n  for j in range(1,98):\n    if i%4==1 or j%4==1:\n      str+=char[1]\n    elif M<((i-1)//4)*24+((j-1)//4)+1:\n      str+=char[1]\n    elif i%4==j%4==3 and m>((i-1)//4)*24+((j-1)//4)+1:\n      str+=char[1]\n    else:\n      str+=char[0]\n  print(str)"]