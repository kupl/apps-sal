["import sys\n\ndef solve():\n    n,k, = rv()\n    a, = rl(1)\n    res = 0\n    count = [0] * 10\n    for i in range(n):\n        if a[i] < 100:\n            count[10 - (a[i] % 10) - 1] += 1\n        res += a[i] // 10\n    for i in range(10):\n        while count[i] > 0 and k >= i + 1:\n            res += 1\n            count[i] -= 1\n            k -= i + 1\n    already = res * 10\n    possible = n * 100\n    diff = possible - already\n    if diff > 0:\n        actual = min(diff, k)\n        res += actual // 10\n    print(res)\n\n\n\n\n\n\ndef prt(l): return print(' '.join(map(str, l)))\ndef rs(): return map(str, input().split())\ndef rv(): return map(int, input().split())\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]  \nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "import sys\n\n\n#sys.stdin = open('input.txt')\n#sys.stdout = open('output.txt', 'w')\n\nn, k = [int(i) for i in input().split()]\nskill = [[int(i) % 10, int(i)] for i in input().split()]\n\nskill.sort(reverse = True)\nans = 0\nfor i in range(n):\n\tans += skill[i][1] // 10\n#print(skill)\n#print(k)\nfor i in range(n):\n\tif skill[i][1] == 100:\n\t\tcontinue\n\ttoup = 10 - skill[i][0]\n\tif k >= toup:\n\t\tk -= toup\n\t\tans += 1\n\t\tskill[i][1] += toup\n\n#print(skill)\t\t\n\nmaxadd = 0\nfor i in range(n):\n\tmaxadd += (100 - skill[i][1]) // 10\n#print(maxadd)\nans += min(k // 10, maxadd)\nprint(ans)\n", "n, k = list(map(int, str.split(input())))\na = sorted(map(int, str.split(input())), key=lambda x: x % 10, reverse=True)\nrating = 0\nfor i in range(n):\n\n    delta = 10 - (a[i] % 10)\n    if k >= delta and a[i] < 100:\n\n        a[i] += delta\n        k -= delta\n\n    rating += a[i] // 10\n\nfor i in range(n):\n\n    if k < 10:\n\n        break\n\n    while a[i] < 100 and k >= 10:\n\n        a[i] += 10\n        k -= 10\n        rating += 1\n\nprint(rating)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nif sum(a) + k >= n * 100:\n    print(n * 10)\n    return\nadds = []\nans = 0\nfor i in range(n):\n    ans += a[i] // 10\n    if a[i] != 100:\n        adds.append(10 - (a[i] % 10))\nadds.sort()\nfor i in range(len(adds)):\n    if k <= 0:\n        break\n    else:\n        k -= adds[i]\n        ans += 1\nans += k // 10\nprint(ans)\n", "n,k=list(map(int,input().split()))\nki=[0]*11\nsu=0\nfor x in input().split():\n    t=int(x)\n    ki[10-t%10]+=1\n    su+=t//10\nfor i in range(1,10):\n    t=min(k//i,ki[i])\n    su+=t\n    k-=t*i\nt=k//10\nsu+=min(t,n*10-su)\nprint(su)\n", "n, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA.sort(reverse=True, key=lambda x: x % 10)\n\nfor i, a in enumerate(A):\n    if k <= 0 or a % 10 == 0:\n        break\n    new = min(k, 10 - a % 10, 100 - a)\n    A[i] += new\n    k -= new\n\nif k:\n    for i, a in enumerate(A):\n        if k <= 0:\n            break\n        new = min(100-a, k)\n        A[i] += new\n        k -= new\n\nans = sum(a//10 for a in A)\nprint(ans)\n", "n, k = [int(i) for i in input().split()]\nskills = [int(i) for i in input().split()]\ndef fornextlvl(x):\n    return 10*(1+((x-1)//10))-x\nleft = sorted([(fornextlvl(skills[i]), i) for i in range(n)])\nleft.reverse()\n\nwhile k > 0 and len(left):\n    w = left.pop()\n    if w[0] > k: break\n    k -= w[0]\n    skills[w[1]] += w[0]\n# Every skill must be a multiple of 10 by now \n\nfor i in range(n):\n    t = min(k, (100-skills[i]))\n    skills[i] += t\n    k -= t\n    if k == 0: break\n\nprint(sum([i//10 for i in skills]))", "n, k = list(map(int, input().split(' ')[:2]))\na = list(map(int, input().split(' ')[:n]))\nb = [0 for i in range(101)]\n\nrating = 0\n\nfor i in a:\n    b[i]+=1\n    rating += i // 10\n\nfor last_dig in range(9, 0, -1):\n    for first_dig in range(10):\n        v = first_dig * 10 + last_dig\n        need_for_one = 10 - last_dig\n        can_use = min(b[v], k // need_for_one)\n        k -= can_use * need_for_one\n        b[v] -= can_use\n        b[(first_dig + 1) * 10] += can_use\n        rating += can_use\n\nz = k // 10\n\nfor first_dig in range(10):\n    v = first_dig * 10\n    can_use = min(z, b[v])\n    b[first_dig * 10] -= can_use\n    b[(first_dig + 1)* 10] += can_use\n    z -= can_use\n    rating += can_use\n\nprint(rating)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\n(n, k) = (int(i) for i in input().split())\nA      = [int(i) for i in input().split()]\n\nstart = time.time()\nA     = sorted(A, key = lambda x: -divmod(x, 10)[1])\nB     = [divmod(i, 10)[1] for i in A]\n\ni = 0\n\nwhile(k > 0 and i < len(A)):\n    if B[i] == 0:\n        break\n\n    if k+B[i]-10 > 0:\n        A[i] += 10 - B[i]\n        k    -= 10 - B[i]\n    else:\n        A[i] += k\n        k = 0\n    i += 1\n\nif k > 0:\n    for i in range(len(A)):\n        if k > 100 - A[i]:\n            k    -= 100 - A[i]\n            A[i]  = 100\n        else:\n            A[i] += k\n            k = 0\n            break\n\nans = sum([divmod(i, 10)[0] for i in A])\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "__author__ = 'User'\nn, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\nmx = [0] * n\nscore = 0\nfor i in range(n):\n    if arr[i] != 100:\n        mx[i] = (10 - arr[i] % 10, i)\n    else:\n        mx[i] = (-1, i)\n    score += arr[i] // 10\nmx.sort()\ni = 0\n#print(mx, k)\n#print(score)\nwhile i < n and k >= mx[i][0]:\n    if mx[i][0] != -1:\n        k -= mx[i][0]\n        arr[mx[i][1]] += mx[i][0]\n        score += 1\n    i += 1\n#print(arr, k)\n#print(score)\nif i == n:\n    i = 0\n    k -= k % 10\n    while k >= 10 and i < n:\n        if arr[i] != 100:\n            d = 100 - arr[i]\n            if k >= d:\n                k -= d\n                #arr[i] += d\n                #print(\"d\", d)\n                score += d // 10\n            else:\n                #arr[i] += k\n                score += k // 10\n                k = 0\n        i += 1\nprint(score)\n#print(arr)\n\n\n\n\n\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\narr = list()\nfor i in range(n):\n    arr.append(((10 - a[i] + (a[i] // 10 * 10)) % 10, a[i]))\narr.sort()\n\nans = 0\nfor i in range(n):\n    if arr[i][1] >= 100 or k - arr[i][0] < 0:\n        ans += arr[i][1] // 10\n        continue\n    k -= arr[i][0]\n    ans += (arr[i][1] + arr[i][0]) // 10\n\nt = 10 * n - ans\nans += min(k // 10, t)\nprint(ans)", "n, k = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nassert len(l) == n\nassert all(0 <= x <= 100 for x in l)\nf = [10-l[i]%10 for i in range(n) if l[i]%10]\nf.sort()\ncur = sum(x // 10 for x in l)\nfor x in f:\n    if k >= x:\n        cur += 1\n        k -= x\nprint(min(cur + k // 10, 10 * n))\n#print(cur + k // 10)\n", "from sys import stdin\ninput = stdin.readline\nn, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\nskills = 0\nremain = 0\nfor i in range(n):\n    skills += l[i] // 10\n    a = round(l[i], -1)\n    if a < l[i]:\n        a += 10\n    if a < 100:\n        remain += (100-a)//10\n    if l[i] >= 100:\n        l[i] = 0\n        continue\n    b = a - l[i]\n    l[i] = b\nspent = 0\nl.sort()\n\nfor i in range(len(l)):\n    if spent + l[i] <= k and l[i] != 0:\n        skills += 1\n        spent += l[i]\n\n\nskills += min(remain, (k - spent) // 10)\nprint(skills)\n", "n, k = list(map(int, input().split()))\nsum = 0\narr = list(map(int, input().split()))\n\nfor i in range (0, n):\n    sum = sum + arr[i] // 10\n    temp = arr[i] // 10\n    arr[i] =  temp * 10 + 10 - arr[i]\n    \narr.sort()\n\nfor i in range (0, n):\n    if k >= arr[i]:\n        k = k - arr[i]\n        sum = sum + 1\n    else:\n        break\n\nsum = sum + k // 10\nif sum > 10*n:\n    sum = 10 *n\nprint(sum)\n            \n", "def main():\n    mode=\"filee\"\n    if mode==\"file\":f=open(\"test.txt\",\"r\")\n    #f.readline()\n    #input()\n    get = lambda :[int(x) for x in (f.readline() if mode==\"file\" else input()).split()]\n    [n,k]=get()\n    a=get()\n    b=[]\n    s=0\n    for i in a:\n        if i==100:\n            s+=10\n            continue\n        b.append([i%10,i])\n    b.sort()\n    b.reverse()\n    if len(b)>0 and k>0:\n        for i in b:\n            if k>=10-i[0]:\n                hold=min(10-i[0],k)\n                k-=hold\n                i[1]+=hold\n                i[0]+=hold\n            else:\n                k=0\n                break\n    if k>0 and len(b)>0:\n        k-=(k%10)\n        for i in b:\n            if i[1]==100:\n                continue\n            if k==0:\n                break\n            hold=min(100-i[1],k)\n            k-=hold\n            i[1]+=hold\n    for i in b:\n        s+=i[1]//10\n    print(s)\n    if mode==\"file\":f.close()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort(key=lambda x: (x % 10), reverse=True)\ni = 0\nwhile (i < n and k > 0 and a[i] % 10 > 0):\n    t = max(0, k - 10 + a[i] % 10)\n    a[i] = a[i] // 10 * 10 + min(10, a[i] % 10 + k)\n    k = t\n    i += 1\ni = 0\nwhile (i < n and k > 0):\n    t = 100 - a[i]\n    a[i] += min(k, t)\n    k = max(0, k - t)\n    i += 1\nans = 0\nfor i in a:\n    ans += i // 10\nprint(ans)", "n, k = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nassert len(l) == n\nassert all(0 <= x <= 100 for x in l)\nf = [10-l[i]%10 for i in range(n) if l[i]%10]\nf.sort()\ncur = sum(x // 10 for x in l)\nfor x in f:\n    if k >= x:\n        cur += 1\n        k -= x\nprint(min(cur + k // 10, 10 * n))\n#print(cur + k // 10)\n", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    ans += a[i] // 10\n    a[i] %= 10\na.sort()\na = a[::-1]\ni = 0\nwhile i != n and a[i] != 0 and m > 0:\n    c = 10 - a[i]\n    if m >= c:\n        m -= c\n        ans += 1\n    else:\n        m = 0\n    i += 1\nans += m // 10\nif ans < 10 * n:\n    print(ans)\nelse:\n    print(10 * n)\n", "from copy import deepcopy\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\nk1 = deepcopy(l)\nans = 0\nv = 0\nl = deepcopy(k1)\nfor i in range(n):\n    l[i] = [l[i], i]\nfor i in range(n):\n    if l[i][0] == 100:\n        l[i][0] = -1\n        k1[i] = -1\n    else:\n        l[i][0] %= 10\ncur = 10**9\nl.sort(reverse = True)\nfor i in range(n):\n    if l[i][0] >= 0:\n        cur = 10 - (l[i][0] % 10)\n        if k < cur:\n            break\n        else:\n            k -= cur\n            k1[l[i][1]] += cur\ng = 0\nfor i in range(n):\n    if k1[i] >= 0:\n        g += 10 - k1[i] // 10\n\nfor i in range(n):\n    if k1[i] >= 0:\n        ans += k1[i] // 10\n    else:\n        ans += 10\n    \nprint(ans + min(g, k // 10))", "n,k = list(map(int,input().split()))\nx = list(map(int,input().split()))\n\ndef f(a):\n\treturn (a/10 + 1 - a/10.0)\n\nx = sorted(x)\nx = sorted(x,key = lambda a: (int(a/10) + 1 - a/10.0))\nimproved,i,flag = 0,0,0\n\nwhile k>0:\n\tif i==n or x[i]==100:\n\t\tbreak\n\tif (int(x[i]/10) + 1 - x[i]/10.0)*10 > k:\n\t\tx[i]+=k\n\t\tk=0\n\t\tbreak\n\tk -= (int(x[i]/10) + 1 - x[i]/10.0)*10\n\tx[i] += (int(x[i]/10) + 1 - x[i]/10.0)*10\n\ti+=1\ni=0\nwhile k>0:\n\tif i==n:\n\t\tbreak\n\tif x[i]+k <= 100:\n\t\tx[i]+=k\n\t\tk=0\n\t\tbreak\n\tk-=100-x[i]\n\tx[i]=100\n\ti+=1\nfor i in range(0,n):\n\timproved+=int(x[i]/10)\nprint(improved)\n", "n,k= map(int,input().split(\" \"))\nmas = list(map(int,input().split(\" \")))\nsubmas= [10-i%10 if i<100 else 11 for i in mas]\nsumm=0\nfor i in mas:\n    summ+=i//10\nsubmas.sort()\n\nfor i in submas:\n    if k>=i and i<=10:\n        k-=i\n        summ+=1\n    else:\n        break\nif k>=10:\n    for i in range(n):\n        if mas[i]<100:\n            mas[i]=mas[i]+10-mas[i]%10\n        if k>=100-mas[i]:\n            summ+=(100-mas[i])//10\n            k-=(100-mas[i])\n        else:\n            summ+=k//10\n            break\nprint(summ)", "num_skills, improvement = list(map(int, input().split()))\nskills = list(map(int, input().split()))\nskills.sort(key = lambda skill: 10 - skill % 10)\n\nfor i, skill in enumerate(skills):\n  if skill == 100:\n    continue\n  delta = min(improvement, 10 - skill % 10)\n  skills[i] += delta\n  improvement -= delta\n  if improvement == 0:\n    break\n\nfor i, skill in enumerate(skills):\n  delta = min(improvement, 100 - skill)\n  skills[i] += delta\n  improvement -= delta\n  if improvement == 0:\n    break\n\nresult = 0\nfor skill in skills:\n  result += skill // 10\nprint(result)\n", "import math as m\n\ndef solve():\n    n, k = (int(i) for i in input().split())\n\n    ai = [int(i) for i in input().split()]\n\n    cnt = 0\n\n    if(k > 100 * len(ai) - sum(ai)):\n        k = 100 * len(ai) - sum(ai)\n\n    for i in range(len(ai)):\n        cnt += m.floor(ai[i] / 10)\n        ai[i] = ai[i] % 10\n\n    ai.sort(reverse=True)\n\n    for i in range(len(ai)):\n        diff = 10- ai[i]\n        if diff <= k:\n            k -= diff\n            cnt += 1\n\n    cnt += m.floor(k / 10)\n\n    return cnt\n\nprint(solve())\n\n", "n, k = (int(x) for x in input().split())\na = [int(x) for x in input().split()]\na.sort(key=lambda x: -(x % 10))\nfor i in range(n):\n\tif a[i] % 10 == 0:\n\t\tbreak\n\tadd = min(k, 10 - a[i] % 10)\n\ta[i] += add\n\tk -= add\nfor i in range(n):\n\tadd = min(k, 100 - a[i])\n\ta[i] += add\n\tk -= add\nprint(sum(x // 10 for x in a))\n", "inp = input().split()\nn = int(inp[0])\nk = int(inp[1])\na = input().split()\nb = []\nx = 0\ntemp = []\n\nfor i in a:\n    temp = []\n    x = int(i)\n    if x == 100:\n        temp.append(0)\n        temp.append(x)\n    else:\n        temp.append(10 - x % 10)\n        temp.append(x)\n    b.append(temp)\n#print(b)\nb.sort()\n#print(b)\nj = 0\nss = 0\nc = []\nfor t in b:\n    if t[0] == 0:\n        pass\n    elif (t[0] <= k) and (k != 0) :\n        k -= t[0]\n        t[1] += t[0]\n        t[0] = 0\n    c.append(t[1] // 10)\nc.sort()\nj = 0\nk = k // 10\n#print(c, k)\nwhile j < n:\n    #print(c[j], k)\n    if ((10 - c[j]) <= k):\n        k -= (10 - c[j])\n        c[j] = 10\n    else:\n        c[j] += k\n        k = 0\n    ss += c[j]\n    j += 1\n#print(c)\nprint(ss)\n\n\n\n\n"]