["n = int(input())\n\nfrom collections import defaultdict\n\nfirst = defaultdict(int)\nsecond = defaultdict(int)\nfor _ in range(n):\n    s = input().strip()\n    count = 0\n    min_count = 0\n    for c in s:\n        if c == '(': count += 1\n        else: count -= 1\n        min_count = min(count, min_count)\n    if min_count >= 0: first[count] += 1\n    if count == min_count: second[count] += 1\n\nres = 0\nfor k, v in list(first.items()):\n    res += v * second[-k]\n\nprint(res)\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    n = I()\n    a = [S() for _ in range(n)]\n    d = collections.defaultdict(int)\n    for c in a:\n        k = 0\n        lk = 0\n        for t in c:\n            if t == ')':\n                k += 1\n                if lk < k:\n                    lk = k\n            else:\n                k -= 1\n        k = 0\n        rk = 0\n        for t in c[::-1]:\n            if t == '(':\n                k += 1\n                if rk < k:\n                    rk = k\n            else:\n                k -= 1\n        if lk > 0 and rk > 0:\n            continue\n        if lk == 0 and rk == 0:\n            d[0] += 1\n        if lk > 0:\n            d[-lk] += 1\n        if rk > 0:\n            d[rk] += 1\n\n    r = d[0] ** 2\n    for k in list(d.keys()):\n        if k <= 0:\n            continue\n        r += d[k] * d[-k]\n\n\n    return r\n\n\nprint(main())\n\n", "from collections import defaultdict\nimport sys\n\nss = []\nfor _ in range(int(sys.stdin.readline())):\n    ss.append(sys.stdin.readline().strip())\nlmap, rmap = defaultdict(int), defaultdict(int)\n\nfor s in ss:\n    stack = []\n    good = True\n    for x in s:\n        if x == '(':\n            stack.append(x)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                good = False\n                break\n    if good:\n        lmap[len(stack)] += 1\n\n    stack = []\n    good = True\n    for x in s[::-1]:\n        if x == ')':\n            stack.append(x)\n        else:\n            if stack and stack[-1] == ')':\n                stack.pop()\n            else:\n                good = False\n                break\n    if good:\n        rmap[len(stack)] += 1\n\n# print(lmap)\n# print(rmap)\n\nres = 0\nfor val, cnt in list(lmap.items()):\n    res += cnt * rmap[val]\n\nprint(res)\n", "#     Educational Codeforces Round 45 (Rated for Div. 2)\nimport collections\nfrom functools import cmp_to_key\n#key=cmp_to_key(lambda x,y: 1 if x not in y else -1 )\n\nimport sys\ndef getIntList():\n    return list(map(int, input().split()))    \n\n \n            \n    \nn = getIntList() [0]\n\nd1 = collections.defaultdict(lambda: 0 )\nd2 = collections.defaultdict(lambda: 0 )\n\nfor i in range(n):\n    s = input()\n    m = len(s)\n    acc1 = 0\n    for j in range(m):\n        if s[j] =='(':\n            acc1+=1\n        else:\n            acc1-=1\n            if acc1<0:break\n    acc2 = 0\n    for j in range(m-1,-1,-1):\n        if s[j] ==')':\n            acc2+=1\n        else:\n            acc2-=1\n            if acc2<0:break\n    if acc2 >=0:\n        d2[acc2] +=1\n    if acc1 >=0:\n        d1[acc1] +=1\n#print(d1)\n#print(d2)\nres = 0\nfor x in d1:\n    if x in d2:\n        res += d1[x] *d2[x]\nprint(res)\n\n\n", "n = int(input())\nleft = {}\nright = {}\nfor i in range(n):\n\tdata = input()\n\twk1 = 0\n\twk2 = 0\n\tfor j in data:\n\t\tif j == \"(\":\n\t\t\twk1 += 1\n\t\telse:\n\t\t\tif wk1 == 0:\n\t\t\t\twk2 += 1\n\t\t\telse:\n\t\t\t\twk1 -= 1\n\n\tif (wk1 == 0):\n\t\tif not wk2 in left:\n\t\t\tleft[wk2] = 0\n\t\tleft[wk2] += 1\n\tif (wk2 == 0):\n\t\tif not wk1 in right:\n\t\t\tright[wk1] = 0\n\t\tright[wk1] += 1\n\t\n#print(left, right)\nans = 0\nfor key in left:\n\tif key in right:\n\t\tans += left[key] * right[key]\n\nprint(ans)\n\n\n", "from collections import Counter\nleft_parts = Counter()\nright_parts = Counter()\nn = int(input())\nfor _ in range(n):\n\tseq = input()\n\tfor res_counter, first_par, s in (left_parts, '(', seq), (right_parts, ')', reversed(seq)):\n\t\tres = 1\n\t\tfor c in s:\n\t\t\tif c == first_par:\n\t\t\t\tres += 1\n\t\t\telif res == 1:\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tres -= 1\n\t\telse:\n\t\t\tres_counter[res] += 1\nres = 0\nfor key in list(left_parts.keys()):\n\tres += left_parts[key]*right_parts[key]\nprint(res)\n", "import math;\ndef getIntList():\n    return list(map(int, input().split()));\ndef getTransIntList(n):\n    first=getIntList();\n    m=len(first);\n    result=[[0]*n for _ in range(m)];\n    for i in range(m):\n        result[i][0]=first[i];\n    for j in range(1, n):\n        curr=getIntList();\n        for i in range(m):\n            result[i][j]=curr[i];\n    return result;\nn = int(input());\ns = ['']*n;\nfor i in range(n):\n    s[i]=input();\nleftTypes=dict();\nrightTypes = dict();\ndef getLeftDepth(s):\n    depth=0;\n    for l in s:\n        if l=='(':\n            depth+=1;\n        else:\n            depth-=1;\n            if depth<0:\n                return -1;\n    return depth;\ndef getRightDepth(s):\n    depth=0;\n    for l in s[::-1]:\n        if l==')':\n            depth+=1;\n        else:\n            depth-=1;\n            if depth<0:\n                return -1;\n    return depth;\nfor currS in s:\n    d=getLeftDepth(currS);\n    if d>=0:\n        leftTypes[d]=leftTypes.get(d, 0)+1;\n    if d<=0:\n        d=getRightDepth(currS);\n        if d>=0:\n            rightTypes[d]=rightTypes.get(d, 0)+1;\nresult=0;\nfor d, l in leftTypes.items():\n    result+=l*rightTypes.get(d, 0);\nprint(result);", "from collections import defaultdict\nfrom sys import stdin\n\nall_in = stdin.read().splitlines()\n\nn = int(all_in[0])\ns = all_in[1:]\n\none = defaultdict(lambda: 0)\ntwo = defaultdict(lambda: 0)\n\nfor el in s:\n    I = 0\n    min_ = 0\n\n    for char in el:\n        I += {'(': 1, ')': -1}[char]\n        min_ = min(min_, I)\n\n    if I >= 0 and min_ == 0:\n        one[I] += 1\n\n    if I <= 0 and min_ == I:\n        two[I] += 1\n\nans = 0\nfor el in list(one.keys()):\n    ans += one[el] * two[-el]\n\nprint(ans)\n", "#!/usr/bin/env python3\n\nfrom collections import defaultdict\n\ndef hd(s):\n\td, h = 0, 0\n\tdmax = 0\n\tfor c in s:\n\t\tif c == '(':\n\t\t\th += 1\n\t\t\td -= 1\n\t\telse:\n\t\t\th -= 1\n\t\t\td += 1\n\t\t\tdmax = max(d, dmax)\n\treturn h, dmax\n\nn = int(input().strip())\nh0 = 0\nhp = defaultdict(int)\nhm = defaultdict(int)\nfor _ in range(n):\n\ts = input().strip()\n\th, d = hd(s)\n\tif h == d == 0:\n\t\th0 += 1\n\telif h > 0 and d == 0:\n\t\thp[h] += 1\n\telif h < 0 and h + d <= 0:\n\t\thm[-h] += 1\n\nres = h0 ** 2\nfor k, v in list(hp.items()):\n\tif k in hm:\n\t\tres += v * hm[k]\t\t\n\n\nprint (res)\n", "from collections import Counter\n\n\ndef read():\n    return int(input())\n\n\ndef readlist():\n    return list(map(int, input().split()))\n\n\ndef readmap():\n    return map(int, input().split())\n\n\nN = read()\nS_list = []\nfor _ in range(N):\n    S_list.append(input())\n\nLEFT = []\nRIGHT = []\nboth = 0\n\nfor i in range(N):\n    S = S_list[i]\n\n    left_usable = True\n    right_usable = True\n\n    left = 0\n    right = 0\n    for s in S:\n        if s == \"(\":\n            left += 1\n        else:\n            right += 1\n            if left < right:\n                left_usable = False\n                break\n    if left_usable:\n        leftnum = left - right\n\n    left = 0\n    right = 0\n    for s in reversed(S):\n        if s == \")\":\n            right += 1\n        else:\n            left += 1\n            if left > right:\n                right_usable = False\n                break\n    if right_usable:\n        rightnum = - left + right\n\n    if left_usable and right_usable:\n        both += 1\n    elif left_usable:\n        LEFT.append(leftnum)\n    elif right_usable:\n        RIGHT.append(rightnum)\n\nans = 0\nLEFT.sort()\nRIGHT.sort()\n\ncounter_left = Counter(LEFT)\ncounter_right = Counter(RIGHT)\n\nans += both ** 2\n\nle = []\nfor k, v in counter_left.items():\n    le.append((k, v))\nri = []\nfor k, v in counter_right.items():\n    ri.append((k, v))\n\ni = 0\nj = 0\nwhile i < len(le) and j < len(ri):\n    if le[i][0] == ri[j][0]:\n        ans += le[i][1] * ri[j][1]\n        i += 1\n        j += 1\n    elif le[i][0] < ri[j][0]:\n        i += 1\n    else:\n        j += 1\n\nprint(ans)", "class Stack:\n\tdef __init__(self):\n\t\tself.items = []\n\n\tdef isEmpty(self):\n\t\treturn self.items == []\n\n\tdef push(self, item):\n\t\tself.items.append(item)\n\n\tdef pop(self):\n\t\treturn self.items.pop()\n\n\tdef peek(self):\n\t\treturn self.items[len(self.items)-1]\n\ndef check(str):\n\tst = Stack()\n\tfor i in str:\n\t\tif i == \"(\":\n\t\t\tst.push(i)\n\t\telse:\n\t\t\tif not st.isEmpty():\n\t\t\t\tif st.peek() == \"(\":\n\t\t\t\t\tst.pop()\n\t\t\t\telse:\n\t\t\t\t\tst.push(i)\n\t\t\telse:\n\t\t\t\tst.push(i)\n\treturn st.items\n\ndef count_it(str):\n\topens = 0\n\tcloses = 0\n\tfor i in str:\n\t\tif i == \"(\":\n\t\t\topens += 1\n\t\telse:\n\t\t\tcloses += 1\n\treturn (opens, closes)\n\n\n\n\nn = int(input())\nstrings = []\nfor i in range(n):\n\tstrings.append(input())\n\nresults = []\n\nfor i in strings:\n\tresults.append(check(i))\n\nmaybe = []\nfor i in results:\n\to, c = count_it(i)\n\tif o == 0 or c == 0:\n\t\tmaybe.append((o, c))\n\nht = {}\nfor i in maybe:\n\tif ht.get(i, None) == None:\n\t\tht[i] = 1\n\telse:\n\t\tht[i] += 1\n\nans = 0\nfor o, c in maybe:\n\tif c == 0 and o != 0:\n\t\tif ht.get((c, o), None) != None:\n\t\t\tans += ht[(c, o)]\n\telif o == 0 and c == 0:\n\t\t\tans += ht[(0, 0)]\n\nprint(ans)\n\n", "n=int(input())\nd=dict()\nfor i in range(n):\n    k=input()\n    right=0\n    left=0\n    for i in k:\n        if i=='(':\n            right+=1\n        else:\n            if right==0:\n                left+=1\n            else:\n                right-=1\n    if left==0 or right==0:\n        c=left-right\n        if c in d:\n            d[c]+=1\n        else:\n            d[c]=1\ns=list(d.keys())\ns.sort()\nk=0\nfor i in s:\n    if i>0:\n        break\n    if -i in d:\n        k+=d[i]*d[-i]\nprint(k)", "n = int(input())\nans = 0\ntemp = 3*10**5\nn2 = temp *2 +1\nar = [0] * n2\nwhile n > 0:\n    si = input()\n    numOp = 0\n    numCl = 0\n    num = 0\n    num2 = 0\n    last = 0\n    for i in si:\n        if i == \"(\":\n            numOp += 1\n        else:\n            numCl += 1\n            if numCl > numOp:\n                num = max(num,numCl-numOp)\n                last = numCl-numOp\n    n-=1\n    if numCl < numOp:\n        num2 = numCl-numOp\n    if num > last or (num > numCl-numOp and num != 0):\n        continue\n    if num2 == 0 and num >= 0:\n        ar[temp+num] += 1\n    else:\n        ar[temp+num2] += 1\nfor i in range(temp+1):\n    ans += ar[i] * ar[n2 - 1 - i]\nprint(ans)\n", "n=int(input().strip())\nc1=0\nf={}\ns={}\nfor i in range(n):\n    c=0\n    minm=1000000\n    st=input().strip()\n    for j in st:\n        if j=='(':\n            c+=1\n        else:\n            c-=1\n        minm=min(minm,c)\n        #maxm=max(maxm,c)\n    if(c==0 and minm>=0):\n        c1+=1\n    elif c<0 and minm==c:\n        if c in s:\n            s[c]+=1\n        else:\n            s[c]=1\n    elif c>0 and minm>=0:\n        if c in f:\n            f[c]+=1\n        else:\n            f[c]=1\nc2=0\nfor i in f.keys():\n    if (-1*i) in s:\n        c2+=f[i]*s[(-1*i)]\nprint((c1*c1) + c2)", "def checkLeft(s):\n\tc1,c2=0,0\n\tf=1\n\tfor i in s:\n\t\tif i=='(':\n\t\t\tc1+=1\n\t\telse:\n\t\t\tc2+=1\n\t\tif c2>c1:\n\t\t\tf=0\n\t\t\tbreak\n\treturn f\ndef checkRight(s):\n\tc1,c2=0,0\n\tf=1\n\tfor i in range(len(s)-1,-1,-1):\n\t\tif s[i]=='(':\n\t\t\tc1+=1\n\t\telse:\n\t\t\tc2+=1\n\t\tif c1>c2:\n\t\t\tf=0\n\t\t\tbreak\n\treturn f\nn=int(input())\nN=6*(10**5)+1\nb=[0]*N\nfor i in range(n):\n\ts=input()\n\tc1,c2=0,0\n\tfor j in s:\n\t\tif j=='(':\n\t\t\tc1+=1\n\t\telse:\n\t\t\tc2+=1\n\tif (c1>c2 and checkLeft(s)) or (c1<c2 and checkRight(s)) or (c1==c2 and checkLeft(s) and checkRight(s)):\n\t\tb[c1-c2+N//2]+=1\n\nans=0\nfor i in range(-N//2,1):\n\tif b[i+N//2]>0 and b[-i+N//2]>0:\n\t\tans+=b[i+N//2]*b[-i+N//2]\nprint(ans)\n#print(N//2)\n\t\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\n\nn = int(input())\n\ns = []\nfor i in range(n):\n    tmp  = input()\n    tmp2 = []\n    for j in range(len(tmp)):\n        if tmp[j] == \"(\":\n            tmp2.append(1)\n        else:\n            tmp2.append(-1)\n    s.append(tmp2)\n\nm =  dict()\nfor i in range(n):\n    # ) : -1, ( : +1\n    #)...( : invalid\n    if s[i][0] == -1 and s[i][-1] == 1 and len(s[i]) > 2:\n        continue\n    #)((((()) : for right\n    if s[i][-1] ==  -1:\n        ss = 0\n        flag = 0\n        for j in range(len(s[i])-1, -1, -1):\n            ss += s[i][j]\n            if ss > 0:\n                flag = 1\n                break\n        if flag == 1:\n            pass\n        else:\n            #add to r list\n            ss = ss*(-1)\n            if not ss in m:\n                m[ss] = (0, 1)\n            else:\n                m[ss] = (m[ss][0], m[ss][1]+1)\n    #(((() : for left\n    if s[i][0] ==  1:\n        ss = 0\n        flag = 0\n        for j in range(len(s[i])):\n            ss += s[i][j]\n            if ss < 0:\n                flag = 1\n                break\n        if flag == 1:\n            pass\n        else:\n            if not ss in m:\n                m[ss] = (1, 0)\n            else:\n                m[ss] = (m[ss][0]+1, m[ss][1])\n            #add to l list\n\n#print(m)\n\nans = 0\nfor mm in m:\n    if mm == 0:\n        k = m[mm][1]\n        ans += k*(k+1) - k\n    else:\n        #print(m[mm][0], m[mm][1])\n        ans +=m[mm][0]*m[mm][1]\n\nprint(ans)\n", "from math import ceil, log\nt = 1\nfor test in range(t):\n\tn = int(input())\n\topenB=[0 for i in range(300001)]\n\tcloseB=[0 for i in range(300001)]\n\tans = 0\n\tzero = 0\n\tfor i in range(n):\n\t\tstring = input()\n\t\tarr = [0]\n\t\tplus = 0\n\t\tminus = 0\n\t\tfor char in string:\n\t\t\tif char == \"(\":\n\t\t\t\tplus+=1\n\t\t\t\tarr.append(1)\n\t\t\telse:\n\t\t\t\tif arr[-1]==1:\n\t\t\t\t\tplus-=1\n\t\t\t\t\tarr.pop()\n\t\t\t\telse:\n\t\t\t\t\tminus +=1\n\t\tif plus and minus:\n\t\t\tcontinue\n\t\telif plus:\n\t\t\topenB[plus]+=1\n\t\telif minus:\n\t\t\tcloseB[minus]+=1\n\t\telse:\n\t\t\tzero += 1\n\tfor i in range(300001):\n\t\tans+=openB[i]*closeB[i]\n\tprint(ans+(zero*zero))\n\n\n\n\n\t\n\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\n\nn = int(input())\n\ns = []\nfor i in range(n):\n    tmp  = input()\n    tmp2 = []\n    for j in range(len(tmp)):\n        if tmp[j] == \"(\":\n            tmp2.append(1)\n        else:\n            tmp2.append(-1)\n    s.append(tmp2)\n\nm =  dict()\nfor i in range(n):\n    # ) : -1, ( : +1\n    #)...( : invalid\n    if s[i][0] == -1 and s[i][-1] == 1 and len(s[i]) > 2:\n        continue\n    #)((((()) : for right\n    if s[i][-1] ==  -1:\n        ss = 0\n        flag = 0\n        for j in range(len(s[i])-1, -1, -1):\n            ss += s[i][j]\n            if ss > 0:\n                flag = 1\n                break\n        if flag == 1:\n            pass\n        else:\n            #add to r list\n            ss = ss*(-1)\n            if not ss in m:\n                m[ss] = (0, 1)\n            else:\n                m[ss] = (m[ss][0], m[ss][1]+1)\n    #(((() : for left\n    if s[i][0] ==  1:\n        ss = 0\n        flag = 0\n        for j in range(len(s[i])):\n            ss += s[i][j]\n            if ss < 0:\n                flag = 1\n                break\n        if flag == 1:\n            pass\n        else:\n            if not ss in m:\n                m[ss] = (1, 0)\n            else:\n                m[ss] = (m[ss][0]+1, m[ss][1])\n            #add to l list\n\n#print(m)\n\nans = 0\nfor mm in m:\n    if mm == 0:\n        k = m[mm][1]\n        ans += k*(k+1) - k\n    else:\n        #print(m[mm][0], m[mm][1])\n        ans +=m[mm][0]*m[mm][1]\n\nprint(ans)\n", "n=int(input())\nopenw=[0 for i in range(300001)]\nclosew=[0 for j in range(300001)]\nreg=0\nfor i in range(n):\n\tr=input()\n\tc=0\n\to=0\n\te=1\n\tfor y in r:\n\t\tif y==\")\":\n\t\t\tc=c+1\n\t\telse:\n\t\t\to=o+1\n\t\tif c>o:\n\t\t\te=2\n\tr1=r[::-1]\n\tc1=0\n\to1=0\n\te1=0\n\tfor u in r1:\n\t\tif u==\")\":\n\t\t\tc1=c1+1\n\t\telse:\n\t\t\to1=o1+1\n\t\tif (o1>c1):\n\t\t\te1=1\n\tif (o==c and e==1):\n\t\treg=reg+1\n\telif (o>c and e==1):\n\t\topenw[o-c]=openw[o-c]+1\n\telif (o<c and e1==0):\n\t\tclosew[c-o]=closew[c-o]+1\n\telse:\n\t\tcontinue\nans=0\nfor j in range(0,300001):\n\tans=ans+closew[j]*openw[j]\nans=ans+reg**2\nprint (ans)\n", "maxn = 4*(10**5)\nn = int(input().strip())\nopeners = [0] * maxn\nclosers = [0] *maxn\n\ndef check_opener(seq):\n    op_br  = 0\n    for c in seq:\n        if c == '(':\n            op_br += 1\n        else:\n            op_br -= 1\n        if op_br <0:\n            return -1\n    return op_br\n\n\ndef check_closer(seq):\n    op_br  = 0\n    for c in seq[::-1]:\n        if c == ')':\n            op_br += 1\n        else:\n            op_br -= 1\n        if op_br <0:\n            return -1\n    return op_br\n\nfor _ in range(n):\n\n    seq = input().strip()\n\n    r = check_opener(seq)\n    if r>=0:\n        openers[r] += 1\n\n    r = check_closer(seq)\n    if r>=0:\n        closers[r] += 1\n\nres = 0\nfor i in range(maxn):\n    res  += openers[i]*closers[i]\n\nprint(res)", "def transform(seq):\n    st = []\n    for i in range(len(seq)):\n        if (len(st) > 0):\n            if (st[-1] == '(' and seq[i] == ')'):\n                st.pop()\n            else:\n                st.append(seq[i])\n        else:\n            st.append(seq[i])\n    return \"\".join(st)\n    \nn = int(input())\n\nbrs = dict()\nfor i in range(n):\n    br = transform(input())    \n    if (br in brs.keys()):\n        brs[br] += 1\n    else: \n        brs[br] = 1\nans = 0  \nfor br_l in brs.keys():\n    for br_r in brs.keys():\n        br = br_l + br_r\n        if (len(br_l) == len(br_r)):\n            if (transform(br) == \"\"):                \n                #brs.pop(br_l)\n                if (br_l == br_r):\n                    ans += (brs[br_l] * (brs[br_l] - 1)  + brs[br_l])\n                else:\n                    ans += brs[br_l] * brs[br_r]    \n                    #brs.pop(br_r)\n                break\nprint(int(ans))", "#This code sucks, you know it and I know it.  \n#Move on and call me an idiot later.\n\ndef check(symbolString):\n    s = []\n    tcnt = 0\n    balanced = True\n    index = 0\n    while index < len(symbolString):\n        symbol = symbolString[index]\n        if symbol == \"(\":\n            s.append(symbol)\n        else:\n            if len(s) == 0:\n                balanced = False\n                tcnt += 1\n            else:\n                s.pop()\n\n        index = index + 1\n\n    if balanced and len(s) == 0:\n        return (\"()\", True)\n    else:\n        if len(s) > 0 and tcnt > 0:\n            return (\")(\", \")(\")\n        else:\n            if len(s) > 0:\n                return ('(', len(s))\n            else:\n                return(')', tcnt)\n\nn = int(input())\n\nop = {}\ncl = {}\nb = 0\nfor i in range(n):\n    a = input()\n    x = check(a)\n    # print(x)\n    if x[0] == \"()\":\n        b += 1\n    elif x[0] == '(':\n        if x[1] in op:\n            op[x[1]] += 1\n        else:\n            op[x[1]] = 0\n            op[x[1]] += 1\n    else:\n        if x[1] in cl:\n            cl[x[1]] += 1\n        else:\n            cl[x[1]] = 0\n            cl[x[1]] += 1\n\nb = b ** 2\n\nfor i in op: \n    if i in cl:\n        b += op[i] * cl[i]\n\nprint(b)", "def string_value(str):\n    ans=0\n    valid = True\n    neg=False\n    after_neg = 0\n    for char in str:\n        if char==\")\":\n            ans-=1\n            if after_neg>0:\n                after_neg-=1\n        else:\n            ans+=1\n            after_neg+=1\n        if ans<0:\n            neg = True\n    if (after_neg>0 and neg):\n        valid=False\n    return valid, ans\n\nnum = int(input())\nvals = []\nfor i in range(num):\n    valid, ans = string_value(input())\n    if valid:\n        vals.append(ans)\n\nans=0\nif len(vals)>0:\n    vals = sorted(vals)\n    prev=vals[0]\n    occured=1\n    occurances = {}\n    keys=[]\n    for i in vals[1:]:\n        if prev!=i:\n            keys.append(prev)\n            occurances[prev] = occured\n            occured = 1\n            prev=i\n        else:\n            occured += 1\n\n    occurances[prev] = occured\n    keys.append(prev)\n    j=0\n    k=len(keys)-1\n\n    while j<=k:\n        if -keys[j]==keys[k]:\n            ans+=occurances[keys[j]]*occurances[keys[k]]\n        if abs(keys[j])>abs(keys[k]):\n            j+=1\n        else:\n            k-=1\nprint(ans)\n", "n = int(input())\nfront = {}\nback = {}\nreg = 0\nfor i in range(n):\n    stk = []\n    s = input()\n    for char in s:\n        if len(stk) == 0:\n            stk.append(char)\n        elif char == \")\" and stk[-1] == \"(\":\n            t = stk.pop()\n        else:\n            stk.append(char)\n    if len(stk) == 0:\n        reg += 1\n    else:\n        if stk == [\")\"] * len(stk):\n            try:\n                front[len(stk)] += 1\n            except:\n                front[len(stk)] = 1\n        elif stk == [\"(\"] * len(stk):\n            try:\n                back[len(stk)] += 1\n            except:\n                back[len(stk)] = 1\nans = reg ** 2\nfor k, v in list(front.items()):\n    try:\n        ans += v * back[k]\n    except:\n        pass\nprint(ans)\n", "from collections import deque\n\n\ndef check(s):\n    q = deque()\n    q.append(s[0])\n    for c in s[1:]:\n        if len(q) != 0:\n            t = q[-1]\n            if t + c == '()':\n                q.pop()\n            else:\n                q.append(c)\n        else:\n            q.append(c)\n\n    s = set(q)\n    if '(' in s and ')' in s:\n        return -1, None\n    elif '(' in s:\n        return len(q), '('\n    elif ')' in s:\n        return len(q), ')'\n    else:\n        return 0, None\n\n\ndef main():\n    n = int(input())\n    left_s = dict()\n    right_s = dict()\n    c_s_cnt = 0  # the number of complete sequences\n    for _ in range(n):\n        s = input()\n        c, mod_s = check(s)\n        if c == 0:\n            c_s_cnt += 1\n        elif c == -1:\n            pass\n        else:\n            if mod_s == '(':\n                if c in left_s:\n                    left_s[c] += 1\n                else:\n                    left_s[c] = 1\n            else:\n                if c in right_s:\n                    right_s[c] += 1\n                else:\n                    right_s[c] = 1\n\n    ans = c_s_cnt * c_s_cnt\n    for k in left_s:\n        if k in right_s:\n            ans += left_s[k] * right_s[k]\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]