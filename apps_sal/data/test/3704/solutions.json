["#!/usr/bin/env python3\n# Copied solution\n\nimport collections\nimport sys\nimport traceback\n\nclass Input(object):\n    def __init__(self):\n        self.fh = sys.stdin\n\n    def next_line(self):\n        while True:\n            line = sys.stdin.readline()\n            if line == '\\n':\n                continue\n            return line\n\n\n    def next_line_ints(self):\n        line = self.next_line()\n        return [int(x) for x in line.split()]\n\n    def next_line_strs(self):\n        line = self.next_line()\n        return line.split()\n\nclass Node(object):\n    def __init__(self, color, subtree_color):\n        self.left = self.right = None\n        self.color = color\n        self.subtree_color = subtree_color\n\ndef list_to_number(list):\n    \"\"\"Return (color, bits, number).\"\"\"\n    color = 1 if list[0] == '-' else 2\n    values = list[1:].split('/')\n    bits = 32\n    if len(values) == 2:\n        bits = int(values[1])\n    nums = values[0].split('.')\n    number = 0\n    for num in nums:\n        number = number * 256 + int(num)\n    return (color, bits, number)\n\ndef add_list_to_tree(tree, list):\n    color, bits, number = list_to_number(list)\n    shift = 31\n    for _ in range(bits):\n        tree.subtree_color |= color\n        value = (number >> shift) & 1\n        if value == 0:\n            if not tree.left:\n                tree.left = Node(0, 0)\n            tree = tree.left\n        else:\n            if not tree.right:\n                tree.right = Node(0, 0)\n            tree = tree.right\n        shift -= 1\n    tree.subtree_color |= color\n    tree.color |= color\n\ndef check_tree(tree):\n    if not tree:\n        return True\n    if tree.color == 3 or (tree.color and (tree.subtree_color & ~tree.color)):\n        return False\n    return check_tree(tree.left) and check_tree(tree.right)\n\ndef number_to_list(number, bits):\n    number <<= (32 - bits)\n    values = []\n    for _ in range(4):\n        #print('number = {}'.format(number))\n        values.append(str(number % 256))\n        number //= 256\n    values = values[::-1]\n    return '.'.join(values) + '/' + str(bits)\n\ndef get_optimized(tree, optimized, number, bits):\n    if not tree or (tree.subtree_color & 1) == 0:\n        return\n    if tree.subtree_color == 1:\n        list = number_to_list(number, bits)\n        #print('number_to_list({}, {}) = {}'.format(number, bits, list))\n        optimized.append(list)\n        return\n    get_optimized(tree.left, optimized, number * 2, bits + 1)\n    get_optimized(tree.right, optimized, number * 2 + 1, bits + 1)\n\n\ndef get_optimized_lists(lists):\n    tree = Node(0, 0)\n    for list in lists:\n        add_list_to_tree(tree, list)\n    if not check_tree(tree):\n        return None\n    optimized = []\n    get_optimized(tree, optimized, 0, 0)\n    return optimized\n\n\ndef main():\n    input = Input()\n    while True:\n        try:\n            nums = input.next_line_ints()\n            if not nums:\n                break\n            n, = nums\n            if n == -1:\n                break\n            lists = []\n            for _ in range(n):\n                lists.append(input.next_line_strs()[0])\n        except:\n            print('read input failed')\n        try:\n            optimized = get_optimized_lists(lists)\n            if optimized is None:\n                print(\"-1\")\n            else:\n                print(\"{}\".format(len(optimized)))\n                for l in optimized:\n                    print(\"{}\".format(l))\n        except:\n            traceback.print_exc(file=sys.stdout)\n            print('get_min_dist failed')\n\nmain()"]