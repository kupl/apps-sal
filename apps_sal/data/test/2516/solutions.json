["def main():\n    import collections\n    N, P = map(int, input().split())\n    S = input()[::-1]\n    ans = 0\n    if P == 2 or P == 5:\n        for i, s in enumerate(S):\n            if int(s) % P == 0:\n                ans += N - i\n    else:\n        mod = [0] * P\n        mod[0] = 1\n        current = 0\n        X = 1\n        for s in S:\n            current = (current + int(s) * X) % P\n            ans += mod[current]\n            mod[current] += 1\n            X = X * 10 % P\n    \n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "n, p = map(int, input().split())\ns = input()\na = []\nc = 0\nif p == 2:\n    b = [0]*n\n    for i in range(n):\n        if int(s[i])%2 == 0:\n            b[i] += 1\n    for i in range(n):\n        if b[i] == 1:\n            c += i+1\nelif p == 5:\n    b = [0]*n\n    for i in range(n):\n        if int(s[i])%5 == 0:\n            b[i] += 1\n    for i in range(n):\n        if b[i] == 1:\n            c += i+1\nelse:\n    b = [0]*p\n    b[0] = 1\n    d = [1]\n    a.append(int(s[-1])%p)\n    for i in range(n-1):\n        d.append(d[-1]*10%p)\n    for i in range(1, n):\n        a.append((int(s[-i-1])*d[i]+a[i-1])%p)\n    for i in range(n):\n        b[a[i]] += 1\n    for i in range(p):\n        c += int(b[i]*(b[i]-1)/2)\nprint(c)", "N, P = map(int, input().split())\nS = input()\n\nmods = [0] * (N+1)\nfor i in range(N-1, -1, -1):\n  mods[i] = (int(S[i])*pow(10, N-i-1, P)+mods[i+1]) % P\nc = dict()\nfor m in mods:\n  c[m] = c.get(m, 0)+1\n\nans = 0\nif P == 2 or P == 5:\n  for i, s in enumerate(S):\n    s = int(s)\n    if s % P == 0:\n      ans += i+1\nelse:\n  for i in range(N):\n    c[mods[i]] -= 1\n    ans += c[mods[i]]\n\nprint(ans)", "N, P = map(int, input().split())\nS = input()\nif 10 % P == 0:\n    ans = 0\n    for r in range(N):\n        if int(S[r]) % P == 0:\n            ans += r + 1\n    print(ans)\n    return\n\nd = [0] * (N + 1)\nten = 1\nfor i in range(N - 1, -1, -1):\n    a = int(S[i]) * ten % P\n    d[i] = (d[i + 1] + a) % P\n    ten *= 10\n    ten %= P\n\ncnt = [0] * P\nans = 0\nfor i in range(N, -1, -1):\n    ans += cnt[d[i]]\n    cnt[d[i]] += 1\nprint(ans)", "n,p=map(int,input().split())\ns=input()\nans=0\nif p==2 or p==5:\n    for i in range(n):\n        if int(s[i])%p==0:\n            ans+=i+1\nelse:\n    M=[0]*p\n    M[0]=1\n    tmp=0\n    for i in range(n):\n        tmp+=(int(s[-i-1])*pow(10,i,p))\n        tmp%=p\n        ans+=M[tmp]\n        M[tmp]+=1\nprint(ans)", "N, P = list(map(int, input().split()))\nS = [int(i) for i in input()]\nfrom collections import Counter\ndef solve(S,N,P):\n    if P==2 or P==5:\n        ans = 0\n        for i in range(N):\n            if S[i]%P==0:\n                ans += i+1\n        return ans\n    cum = [0]*(N+1)\n    mods = [0]*N\n    mods[0] = 1\n    for i in range(1,N):\n        mods[i] = mods[i-1]*10%P\n    for i in range(N):\n        cum[i+1] = (cum[i]+S[N-1-i]*mods[i])%P\n    c = Counter(cum)\n    ans = 0\n    for v in list(c.values()):\n        ans += v*(v-1)//2\n    return ans\nprint((solve(S,N,P)))\n", "n, p = map(int, input().split())\ns = list(input())\nr = [0] * p\nans = 0\nif not (p == 2 or p == 5):\n    x, t = 0, 1\n    for i in range(-1, -(n + 1), -1):\n        x += (int(s[i]) * t)\n        x %= p\n        r[x] += 1\n        t *= 10\n        t %= p\n    for i in r:\n        if i >= 2:\n            ans += (i * (i - 1) // 2)\n    ans += r[0]\nelse:\n    for i in range(n):\n        if int(s[i]) % p == 0:\n            ans += (i + 1)\nprint(ans)", "n, p = map(int, input().split())\ns = input()\nif p==2 or p==5:\n    ans = 0\n    for i in range(n):\n        if int(s[i])%p==0:\n            ans += i+1\n    print(ans)\nelse:\n    di = {0: 1}\n    tmp = 0\n    for i in range(n):\n        tmp += int(s[n-i-1])*pow(10, i, p)\n        tmp %= p\n        if tmp in di:\n            di[tmp] += 1\n        else:\n            di[tmp] = 1\n    ans = 0\n    for i in di.values():\n        ans += i*(i-1)//2\n    print(ans)", "N, P = map(int,input().split())\nS = str(input())\nL = len(S)\nans = 0\ndic = {0:1} #\u4e00\u756a\u53f3\u7aef\u306f0\u306a\u306e\u3067\u3053\u308c\u306f\u5e38\u306b\u5fc5\u8981\nnow = 0\nif P == 2 or P == 5:\n  kotae = 0\n  for i in range(L):\n    if int(S[L-1-i])%P == 0:\n      kotae += L-i\n  print(kotae)\n  return\nelse:\n  for i in range(L):\n    now += int(S[L-1-i])*pow(10,i,P)\n    temp = now%P\n    if temp not in dic:\n      dic[temp] = 1\n    else:\n      dic[temp] += 1\n#print(dic)\nans = 0  \nfor i in dic.values():\n  if i != 1:\n    ans += i*(i-1)//2\nprint(ans)", "n, p = list(map(int, input().split()))\ns = input()\n\nres = 0\nif p == 2 or p == 5:\n    for i in range(n):\n        if int(s[i]) % p == 0:\n            res += i + 1\nelse:\n    s = s[::-1]\n    cnt = {0: 1}\n    now = 0\n    d = 1\n    for i in range(n):\n        now = (now + int(s[i]) * d) % p\n        res += cnt.get(now, 0)\n        d = (d * 10) % p\n        cnt[now] = cnt.get(now, 0) + 1\n\nprint(res)\n", "n, p = [int(i) for i in input().split()]\ns = [int(i) for i in list(input())][::-1]\nsumm  = 0\nans = 0\ncnt = [0]*p # \u3042\u307e\u308a\u306e\u90e8\u5c4b\ncnt[0] = 1\nfor i in range(n):\n    d = s[i]*pow(10, i ,p)\n    summ = (summ + d) %p\n    cnt[summ] +=1\n\nif p in [2,5]: # 10\u306e\u56e0\u6570\u306f\u5225\u51e6\u7406\n    if p == 2:\n        ok_list = [0,2,4,6,8]\n    if p == 5:\n        ok_list = [0,5]\n    for i in range(n):\n        d = s[i]\n        if d in ok_list:\n            ans += n-i\nelse: # \u4ed6\u306e\u306f,\u3042\u307e\u308a\u304c\u540c\u3058\u3082\u306e\u306f\u5dee\u3057\u5f15\u3051\u3070\u3042\u307e\u308a\u304c0\u306b\u306a\u308b\u306e\u3067p\u3067\u5272\u308a\u5207\u308c\u308b\u5224\u5b9a\n    for i in range(p):\n        ans += cnt[i] * (cnt[i]-1)//2 # nC2\u306e\u8a08\u7b97\n\nprint(ans)", "n,p=map(int,input().split())\ns=list(input())\n\nif p==2 or p==5:\n  ans=0\n  for i,ss in enumerate(s):\n    if int(ss)%p==0:\n      ans+=i+1\n  print(ans)\n  return\nfrom collections import Counter\nc=Counter()\nm=0\nc[m]+=1\nd=1\ns=s[::-1]\nfor i in range(n):\n  m+=int(s[i])*d\n  m%=p\n  d*=10\n  d%=p\n  c[m]+=1\nans=0\nfor v in c.values():\n  ans+=v*(v-1)//2\nprint(ans)", "N, P = list(map(int, input().split()))\nS = input()\nnow = 0\nhyou = [0] * P\nhyou[0] = 1\ncnt = 1\nans = 0\n\nif P == 2 or P == 5:\n    for i, t in enumerate(S[::-1]):\n        temp = int(t)\n        if temp % P == 0:\n\n            ans += N - i\n    print(ans)\n    return\n\nfor i, t in enumerate(S[::-1]):\n    now = (now + int(t) * pow(10, i, P)) % P\n    ans += hyou[now]\n    hyou[now] += 1\n\nprint(ans)\n", "n, p = list(map(int, input().split()))\ns = list(map(int, list(input())))[::-1]\n\nsum = 0\ncnt = [0] * p\ncnt[0] = 1\nn = len(s)\nfor i in range(n):\n    d = s[i] * pow(10, i, p)\n    sum = (sum + d) % p\n    cnt[sum] += 1\n\nans = 0\nif p in [2, 5]:\n    if p == 2:\n        ok_list = [0, 2, 4, 6, 8]\n    if p == 5:\n        ok_list = [0, 5]\n\n    for i in range(n):\n        d = s[i]\n        if d in ok_list:\n            ans += n - i\n           \nelse:\n    for i in range(p):\n        ans += cnt[i] * (cnt[i]-1) // 2\n\n\nprint(ans)\n", "from collections import Counter\nn,mod = map(int,input().split())\ns = input()\nif mod == 2:\n    ans = 0\n    for i in range(n-1,-1,-1):\n        if int(s[i]) % 2 == 0:\n            ans += i+1\n    print(ans)\n    return\nelif mod == 5:\n    ans = 0\n    for i in range(n-1,-1,-1):\n        if int(s[i]) % 5 == 0:\n            ans += i+1\n    print(ans)\n    return\n\nl = [0]*(n+1)\nfor i in range(n-1,-1,-1):\n    l[i] = (l[i+1]+int(s[i])*pow(10,n-1-i,mod))%mod\n#print(l)\nc = Counter(l)\n#print(c)\ndef nC2(i):\n    return i*(i-1)//2\nans = c[0]-1+nC2(c[0]-1)\nfor i in range(1,mod):\n    ans += nC2(c[i])\nprint(ans)", "n, p = list(map(int, input().split()))\nS = list(map(int, list(input())))\n\nif p == 2 or p == 5:\n  ans = 0\n  for i, x in enumerate(S[::-1]):\n    if x % p == 0:\n      ans += n - i\nelse:\n  mods = [0 for _ in range(p)]\n  mods[0] = 1\n\n  num = 0\n  digit = 1\n  for s in S[::-1]:\n    num = (s * digit + num) % p\n    mods[num] += 1\n    digit = (digit * 10) % p\n  \n  ans = 0\n  for m in mods:\n    ans += m * (m - 1) // 2\n\nprint(ans)\n", "n, p = map(int, input().split())\ns = list(map(int, list(input())))\n\nans = 0\n\nif p == 2:\n    for i in range(n):\n        if s[i] % 2 == 0:\n            ans += i + 1\n    print(ans)\n    return\n\nif p == 5:\n    for i in range(n):\n        if s[i] == 0 or s[i] == 5:\n            ans += i + 1\n    print(ans)\n    return\n\nnum = 1\nl = [0]\nfor i in range(n-1, -1, -1):\n    l.append((num * s[i] + l[-1]) % p)\n    num *= 10\n    num %= p\n\nfrom collections import Counter\n\ndic = Counter(l)\nfor i in dic.values():\n    ans += i * (i - 1) // 2\n\nprint(ans)", "from collections import defaultdict\nimport sys\ndef input():return sys.stdin.readline().strip()\n\ndef main():\n    N, P = map(int, input().split())\n    S = input()\n\n    ans = 0\n    if P in [2, 5]:\n        for i, c in enumerate(S[::-1]):\n            if int(c) % P == 0:\n                ans += N-i\n    else:\n        d = defaultdict(int)\n        d[0] = 1\n        num = 0\n        ten = 1\n        for c in S[::-1]:\n            num += int(c) * ten\n            num %= P\n            d[num] += 1\n            ten *= 10\n            ten %= P\n\n        ans = sum([d[i]*(d[i]-1)//2 for i in range(P)])\n\n    print(ans)\n\n        \ndef __starting_point():\n    main()\n__starting_point()", "N,P = map(int, input().split())\nS = input()\n\nans = 0\nif P == 2:\n    for i in range(N-1, -1, -1):\n        if int(S[i])%2 == 0:\n            ans += i+1\nelif P == 5:\n    for i in range(N-1, -1, -1):\n        if int(S[i])%5 == 0:\n            ans += i+1\nelse:\n    L = [0]*P\n    num = 0\n    for i in range(N-1, -1, -1):\n        num += int(S[i])*pow(10, N-1-i, P)\n        num %= P\n        L[num] += 1\n\n    ans += L[0]\n    for i in range(P):\n        ans += L[i]*(L[i]-1)//2\n\nprint(ans)", "n, p = map(int, input().split())\ns = input()\nsum_cnt = 0\nif p in {2, 5}:\n    for r in range(n):\n        if int(s[r]) % p == 0:\n            sum_cnt += (r + 1)\nelse:\n    modp_cnt = [0] * p\n    modp_cnt[0] = 1\n    subs_modp, pow = 0, 1\n    for si in s[::-1]:\n        subs_modp += ((int(si)*pow) % p)\n        subs_modp %= p\n        modp_cnt[subs_modp] += 1\n        pow = (pow * 10) % p\n        \n    for cnt in modp_cnt:\n        sum_cnt += cnt * (cnt - 1) // 2\nprint(sum_cnt)", "import collections\nimport sys\nsys.setrecursionlimit(10 ** 8)\n\ndef Z(): return int(input())\ndef ZZ(): return [int(_) for _ in input().split()]\n\ndef main():\n    N, P = ZZ()\n    S = input()\n    output = 0\n\n    if P in {2, 5}:\n        for i in range(N):\n            if int(S[i])%P == 0: output += i+1\n        print(output)\n        return\n\n    dp = [0] * (N+1)\n    ex = 1\n    for i in range(N):\n        dp[i+1] = (int(S[-1-i])*ex + dp[i]) % P\n        ex *= 10\n        ex %= P\n\n    d = collections.defaultdict(int)\n    for i in range(N+1): d[dp[i]] += 1\n\n    for i in list(d.keys()): output += (d[i] * (d[i]-1) // 2)\n    print(output)\n\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,p=list(map(int,input().split()))\nS=input()[::-1]\nans=0\nif p==2:\n    for i,s in enumerate(S):\n        if int(s)%2==0:\n            ans+=(n-i)\n    print(ans)\n    return\n\nif p==5:\n    for i,s in enumerate(S):\n        if int(s)==0 or int(s)==5:\n            ans+=(n-i)\n    print(ans)\n    return\n\n\nsd=0\nd=1\ncount=[0]*(p+1)\ncount[0]+=1\nfor s in S:\n    sd+=int(s)*d\n    d*=10\n    sd%=p\n    d%=p\n    count[sd]+=1\n\nfor cnt in count:\n    ans+=cnt*(cnt-1)//2\n\nprint(ans)\n\n", "#!python3\n\nLI = lambda: list(map(int, input().split()))\n\n# input\nN, P = LI()\nS = input()\n\n\ndef solve2():\n    ans = 0\n    for i in range(N):\n        if int(S[i]) % 2 == 0:\n            ans += i + 1\n    return ans\n\n\ndef solve5():\n    ans = 0\n    for i in range(N):\n        if int(S[i]) % 5 == 0:\n            ans += i + 1\n    return ans\n\n\ndef solve():\n    d = [0] * P\n    d[0] = 1\n    w = 0\n    ans = 0\n    m = 1\n    for s in S[::-1]:\n        x = int(s)\n        v = x * m % P\n        w = (w + v) % P\n        ans += d[w]\n        d[w] += 1\n        m = 10 * m % P\n    return ans\n\n\ndef main():\n    if P == 2:\n        ans = solve2()\n    elif P == 5:\n        ans = solve5()\n    else:\n        ans = solve()\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m=map(int,input().split());s=input();l=[0]*m;a,t,p=0,0,1\nif 10%m:\n  for i in s[::-1]:l[t%m]+=1;t+=int(i)*p;a+=l[t%m];p=p*10%m\nelse:a=sum(i+1 for i in range(n) if int(s[i])%m<1)\nprint(a)", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.readline\n    N, P = map(int, input().split())\n    S = input().strip(\"\\n\")\n    modSum = 0\n    modDict = defaultdict(int)\n    modDict[0] += 1\n    ans = 0\n\n    if P == 2 or P == 5:\n        for i in range(N):\n            if int(S[i]) % P == 0:\n                ans += i + 1\n        \n    else:\n        for i in range(N):\n            modSum += int(S[N-i-1]) * pow(10, i, P)\n            modSum %= P\n            modDict[modSum] += 1\n\n        for key in modDict:\n            v = modDict[key]\n            ans += v * (v - 1) // 2\n    \n    print(ans)\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "N,P = map(int,input().split())\nS= list(map(int, list(input())))[::-1]\ncounter = [0]*P\ncounter[0] = 1\nans = 0\nsum = 0\nd = 0\nr = []\nmod = 0\n\nif P != 2 and P != 5:\n    mod = 1%P\n    for i in range(N):\n        d = S[i]*mod\n        sum = (sum+d)%P\n        mod = (mod*10)%P\n        counter[sum] += 1\n    for k in range(P):\n        ans += (counter[k] * (counter[k]-1)) // 2\n\nif P == 2 or P == 5:\n    if P == 2:\n        r = [0,2,4,6,8]\n    if P == 5:\n        r = [0,5]\n    for j in range(N):\n        if S[j] in r: ans += N - j\n\nprint(ans)", "from collections import defaultdict\n\nN, P = list(map(int, input().split()))\nS = input().strip()[::-1]\n\nif P in [2, 5]:\n    ans = 0\n    for r in range(N):\n        if int(S[r]) % P == 0:\n            ans += N - r\n    print(ans)\n    return\n\ncum = [0] * (N + 1)\nfor i in range(N):\n    now = int(S[i]) * pow(10, i, P)\n    cum[i + 1] = (cum[i] + now) % P\n\ncnt = defaultdict(int)\nfor _cum in cum:\n    cnt[_cum] += 1\n\nans = 0\nfor k, v in list(cnt.items()):\n    ans += v * (v - 1) // 2\n\nprint(ans)\n", "n, p = map(int, input().split())\ns = list(map(int, list(input())))\nif p == 2 or p == 5:\n    ans = 0\n    for i in range(n):\n        if s[i] % p == 0:\n            ans += i + 1\n    print(ans)\nelse:\n    lis = [0] * p\n    cnt = 0\n    kurai = 1\n    for i in s[::-1]:\n        cnt += i * kurai % p\n        cnt %= p\n        lis[cnt] += 1\n        kurai *= 10\n        kurai %= p\n    ans = 0\n    for i in lis:\n        ans += i * (i - 1) // 2\n    ans += lis[0]\n    print(ans)", "from collections import Counter\nN,MOD=map(int,input().split())\nS=input()\nres=0\nif MOD==2 or MOD==5:\n    for i in range(N):\n        if(int(S[N-i-1])%MOD==0):\n            res+=N-i\nelse:\n    Cum=[0]*(N+1)\n    for i in range(N):\n        Cum[i+1]=(Cum[i]+int(S[N-i-1])*pow(10,i,MOD))%MOD\n    c=Counter(Cum).most_common()\n    for a,b in c:\n        res+=b*(b-1)//2\nprint(res)", "import sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\ndef LI2(): return list(map(int,sys.stdin.readline().rstrip()))  #\u7a7a\u767d\u306a\u3057\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())  #\u7a7a\u767d\u3042\u308a\ndef LS2(): return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\n\nN,P = map(int,S().split())\nS = LI2()\n\nif P == 2 or P == 5:  #10\u3068\u7d20\u3067\u306a\u3044\u5834\u5408\u4e00\u756a\u53f3\u306e\u6841\u3067\u6c7a\u307e\u308b\n    ans = 0\n    for i in range(N):\n        if S[i] % P == 0:\n            ans += i+1\n    print(ans)\n    return\n\nA = [0]  #A[i] = \u4e0bi\u6841\u3092P\u3067\u5272\u3063\u305f\u4f59\u308a\nfor i in range(1,N+1):\n    A.append((A[i-1]+pow(10,i,P)*S[N-i]) % P)\n\nfrom collections import Counter\n\nc = Counter(A)\nB = c.values()\n\nans = 0\n\nfor i in B:\n    ans += (i*(i-1)//2)\n\nprint(ans)", "n,m=map(int,input().split())\ns=input()\nl=[0]*m\na,t,p=0,0,1\nif 10%m:\n  for i in s[::-1]: l[t%m]+=1; t+=int(i)*p; a+=l[t%m]; p=p*10%m\nelse:\n  a=sum(i+1 for i in range(n) if int(s[i])%m<1)\nprint(a)", "'''ika tako\u3000\u3000ABC164D\u306e\u985e\u984c\n\u57fa\u672c\u306f\u30011\u6841\u76ee\u30012\u6841\u76ee\u3068\u4e0b\u304b\u308910\u9032\u6570\u306e\u6570\u5b57\u3068\u3057\u3066\u898b\u3066\u3001\n\u7d20\u6570\uff50\u3067\u5272\u3063\u305f\u4f59\u308a\u3092\u8003\u3048\u3001\u4f59\u308a\u304c\u540c\u3058\u3067\u3042\u308b\u6570\u5b57\u306e\u30b9\u30bf\u30fc\u30c8\u3068\u30a8\u30f3\u30c9\u3092\n\u9078\u3076\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u304c\u7b54\u3002\n\u4f46\u3057\u300110\u9032\u6570\u3067\u8003\u3048\u3066\u3044\u308b\u306e\u3067\u3001\uff50\u304c2\u30685\u306e\u30b1\u30fc\u30b9\u306f\u5225\u6271\u3044\u3002\n\u672b\u5c3e\u304c2\u30015\u306e\u500d\u6570\u306a\u30892\u306e\u500d\u6570\u3002\u5148\u982d\u306e\u6570\u5b57\u30920\u756a\u76ee\u3068\u3057\u3066\u3001\ni\u756a\u76ee\u306b2\u30015\u306e\u500d\u6570\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\n\u305d\u3053\u3092\u53f3\u7aef\u3068\u3059\u308b\u90e8\u5206\u6587\u5b57\u5217\u306f i+1  \u500b\u4f5c\u308c\u308b\u3002\n'''\nfrom collections import defaultdict\n\ndef solve2(s):\n    ans = 0\n    for i, c in enumerate(s):\n        if c in '02468':\n            ans += i + 1\n    return ans\n\ndef solve5(s):\n    ans = 0\n    for i, c in enumerate(s):\n        if c in '05':\n            ans += i + 1\n    return ans\n\ndef solve_other(s, p):\n    reminders = defaultdict(lambda: 0)\n    tmp = 0\n    mul = 1\n    for c in s[::-1]:\n        c = int(c)\n        tmp = (tmp + c * mul) % p\n        mul = mul * 10 % p\n        reminders[tmp] += 1\n    reminders[0] += 1\n    ans = 0\n    for r, cnt in reminders.items():\n        ans += cnt * (cnt - 1) // 2\n    return ans\n\nn, p = list(map(int, input().split()))\ns = input()\nif p == 2:\n    print(solve2(s))\nelif p == 5:\n    print(solve5(s))\nelse:\n    print(solve_other(s, p))", "def main():\n    import sys\n    input = sys.stdin.readline\n    from collections import defaultdict\n    N, P = map(int, input().split())\n    S = input().rstrip()\n    if P in (2, 5):\n        ans = 0\n        for i, c in enumerate(S):\n            if int(c) % P == 0:\n                ans += i + 1\n        print(ans)\n        return\n    num = 0\n    d = 1\n    counter = defaultdict(int)\n    counter[0] += 1\n    for c in S[::-1]:\n        num += int(c) * d\n        num %= P\n        counter[num] += 1\n        d *= 10\n        d %= P\n    ans = 0\n    for v in counter.values():\n        ans += (v * (v-1)) // 2\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "n,p=map(int,input().split())\ns=input()\nb=1\nd=0\nl=[0]*p\nl[0]=1\nans=0\nfor i,c in enumerate(s[::-1]):\n  if p==2 or p==5:\n    if int(c)%p==0:\n      ans+=n-i\n  else:\n    d+=int(c)*b\n    d%=p\n    l[d]+=1\n    b*=10\n    b%=p\nif p!=2 and p!=5:\n  for i in l:\n    ans+=i*(i-1)//2\nprint(ans)", "N,P = map(int, input().split())\nS = input()\n\nif P == 2:\n    ans = 0\n    for i in range(N):\n        if int(S[i])%2 == 0:\n            ans += i+1\nelif P == 5:\n    ans = 0\n    for i in range(N):\n        if S[i] == \"0\" or S[i] == \"5\":\n            ans += i+1\nelse:\n    L = [0]*P\n    num = 0\n    for i in range(N):\n        num += int(S[N-i-1])*pow(10, i, P)\n        num %= P\n        L[num] += 1\n    ans = L[0]\n    for i in range(P):\n        ans += L[i]*(L[i]-1)//2\n\nprint(ans)", "n, p = list(map(int, input().split()))\ns = input()\n\nc = [0 for i in range(p)]\nc[0] = 1\nx = 0\nans = 0\nfor i,j in enumerate(s[::-1]):\n  if p == 2 or p == 5:\n    if int(j)%p == 0:\n      ans += n-i\n  x = (x + int(j)*pow(10,i,p))%p\n  c[x] += 1\nif ans:\n  print (ans)\n  return\nfor i in range(p):\n  ans += (c[i]*(c[i]-1))//2\nprint (ans)\n\n", "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush,heapify\nimport sys,bisect,math,itertools,fractions,copy\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nn,p = inpl()\nt = list(input())[::-1]\nres = 0\nif p == 2 or p == 5:\n    t = t[::-1]\n    for i,x in enumerate(t):\n        if int(x) % p == 0:\n            res += i+1\n    print(res)\n    return\nd = defaultdict(int)\nnow = 0\nd[0] += 1\n# print(t)\nfor i,x in enumerate(t):\n    tmp = (pow(10,i,p) * int(x)) % p\n    now += tmp\n    now %= p\n    d[now] += 1\n# print(d)\nfor va in d.values():\n    res += va*(va-1)//2\nprint(res)", "import sys\nfrom collections import Counter\n\ndef ep(*params):\n    print(*params,file=sys.stderr)\n\n(N,P) = list(map(int,input().split()))\nS = input().rstrip()\n\nif 10%P == 0:\n    ans = 0\n    for i in range(N):\n        if int(S[i])%P == 0:\n            ans += i+1\n    print(ans)\n    return\n\nans = 0\nd = [0]*(N+1)\ncnt = [0]*P\nten = 1\n\nfor i in range(N-1,-1,-1):\n    a = int(S[i]) * ten % P\n    d[i] = (d[i+1]+a) % P\n    ten *= 10\n    ten %= P\n\n#ep(d)\n\nfor i in range(N,-1,-1):\n    ans += cnt[d[i]]\n    cnt[d[i]] += 1;\n    #ep(i,ans,cnt)\n#ep(cnt)\nprint(ans)", "from collections import Counter\nN, P = list(map(int, input().split()))\nS = input()\n\nif 10 % P == 0:\n    ans = 0\n    for i, s in enumerate(S, start=1):\n        if int(s) % P != 0:\n            continue\n        ans += i\n    print(ans)\n\nelse:\n    X = [0]\n    for i, s in enumerate(S[::-1]):\n        X.append((X[-1] + pow(10, i, P) * int(s)) % P)\n\n    C = Counter(X)\n    ans = 0\n    for v in list(C.values()):\n        ans += v * (v - 1) // 2\n    print(ans)\n", "from math import gcd\nfrom collections import defaultdict\n\nN, P = map(int, input().split())\nS = list(map(int, input()))\n\nanswer = 0\nif P == 2 or P == 5: # Case when only last digit matters\n    for j in range(N - 1, -1, -1): # Enumerate right endpoint\n        if S[j] % P == 0:\n            answer += j + 1\nelse: \n    # Enuerate left endpoint from right to left\n    # Find number of right endpoints that make the substr % P == 0\n    cnts = defaultdict(int)\n    suffix = 0\n    base = 1\n    for i in range(N - 1, -1, -1):\n        suffix = (suffix + S[i] * base) % P\n        answer += cnts[suffix]  # Substr with length >= 2\n        answer += 1 if suffix == 0 else 0 # Substr with length = 1\n        cnts[suffix] += 1\n        base = base * 10 % P\n\nprint(answer)", "from collections import Counter\n\nN, P = list(map(int, input().split()))\nSs = input()\n\nif P == 2 or P == 5:\n    ans = 0\n    for i, S in enumerate(Ss):\n        if int(S)%P == 0:\n            ans += i+1\nelse:\n    As = [0]\n    A = 0\n    D = 1\n    for S in Ss[::-1]:\n        S = int(S)\n        A = (A + S*D) % P\n        As.append(A)\n        D = D*10 % P\n\n    cnt = Counter()\n    ans = 0\n    for A in As:\n        ans += cnt[A]\n        cnt[A] += 1\n\nprint(ans)\n", "N,P = list(map(int,input().split()))\nlst=[int(d) for d in input()]\nchk=[0]*P\nt=0\nc=1\nif P==2:\n ans=0 \n a=N\n for x in lst[::-1]:\n  if x%2==0:\n   ans+=a\n  a-=1\n print(ans)\nelif P==5:\n ans=0 \n a=N\n for x in lst[::-1]:\n  if x%5==0:\n   ans+=a\n  a-=1  \n print(ans)\nelse:\n for x in lst[::-1]:\n  t+=c*x\n  t%=P\n  chk[t]+=1\n  c*=10\n  c%=P \n md=0\n ans=chk[0]\n d=1\n for i in range(N-1):\n  md=(md+lst[N-1-i]*d)%P\n  if chk[md]>0:\n   chk[md]-=1\n  ans+=chk[md]\n  d*=10\n  d%=P\n print(ans)\n", "N, P = list(map(int, input().split()))\nS = input().strip()[::-1]\n\nif P in [2, 5]:\n    ans = 0\n    for r in range(N):\n        if int(S[r]) % P == 0:\n            ans += N - r\n    print(ans)\n    return\n\nd = [0] * (N + 1)\nten = 1\nfor i in range(N):\n    a = int(S[i]) * ten % P\n    d[i+1] = (d[i] + a) % P\n    ten *= 10\n    ten %= P\n\ncnt = [0] * P\nans = 0\nfor i in range(N + 1):\n    ans += cnt[d[i]]\n    cnt[d[i]] += 1\n\nprint(ans)\n", "# coding: utf-8\nN, P = map(int, input().split())\nS = input()\nans = 0\nif P == 2:\n    for i in range(N):\n        if int(S[i]) % 2 == 0:\n            ans += i+1\nelif P == 5:\n    for i in range(N):\n        if int(S[i]) == 0 or int(S[i]) == 5:\n            ans += i+1\nelse:\n    cnt = [0 for _ in range(P)]\n    cnt[0] = 1\n    bai = 1\n    v = 0\n    for i in range(N)[::-1]:\n        v = (v + int(S[i]) * bai) % P\n        bai *= 10\n        bai %= P\n        cnt[v] += 1\n    for i in range(P):\n        ans += ((cnt[i] - 1 ) * cnt[i]) // 2\nprint(ans)", "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    import math\n\n    #inf = 10**17\n    #mod = 10**9 + 7\n\n    s,p = list(map(int, input().split()))\n    n = input().rstrip()\n    n = n[::-1]\n\n    if p == 2 or p == 5:\n        res = 0\n        for i in range(s):\n            a = int(n[i])\n            if a%p == 0:\n                res += s-i\n        print(res)\n    else:\n        res = [0]*p\n        res[0] += 1\n        b = 1\n        c = 0\n        for i in range(s):\n            a = int(n[i])\n            c += a*b\n            c %= p\n            res[c] += 1\n            b = b*10%p\n        ans = 0\n        for i in res:\n            if i>=2:\n                ans += i*(i-1)//2\n        print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, P = map(int, input().split())\nS = input()\n\nif P == 2 or P == 5:\n    def solve25(N, P, S):\n        c = 0\n        for i in range(N-1, -1, -1):\n            if int(S[i]) % P == 0:\n                # \u4ee5\u964d\u6841\u3092\u5897\u3084\u3057\u3066\u3082OK\n                c += i+1\n        return c\n    print(solve25(N, P, S))\nelse:\n    def solve(N, P, S):\n        rcounts = [0] * P\n        rcounts[0] = 1 # s\u305d\u306e\u3082\u306e\u304c\u5272\u308a\u5207\u308c\u305f\u5834\u5408\u306b\u5f15\u304d\u7b97\u3059\u308b\u76f8\u624b\u304c\u3044\u306a\u3044\u304b\u3089\n        ints = 0\n        for i, s in enumerate(S[::-1]):\n            ints += int(s) * pow(10, i, P)\n            r = ints % P\n            rcounts[r] += 1\n        c = 0\n        for v in rcounts:\n            c += v*(v-1)//2\n        return c\n    print(solve(N, P, S))", "from collections import Counter\n\nn,p = map(int,input().split())\ns = input()\n\nans = 0\nif p == 2 or p == 5:\n  for i in range(n):\n    if int(s[i]) % p == 0:\n      ans += (i+1)\n\nelse:      \n  mods = [0]*p\n  mods[0] = 1\n  m = 0\n  d = 1  \n  for i in range(n):\n    m = (m + int(s[-i-1])*d) % p\n    d = (d * 10) % p    \n    mods[m] += 1\n  \n  for i in range(p):\n    ans += mods[i]*(mods[i]-1)//2\n\nprint(ans)      ", "from collections import *\nn, p = list(map(int, input().split()))\ns = list(map(int, input()))\nif 10%p==0:\n    r = 0\n    for i in range(n):\n        if s[i]%p==0:\n            r += i+1\n    print(r)\n    return\nc = Counter()\nc[0] += 1\nv = r = 0\nk = 1\nfor i in s[::-1]:\n    v += int(i)*k\n    v %= p\n    r += c[v]\n    c[v] += 1\n    k *= 10\n    k %= p\nprint(r)\n", "\ndef m():\n    n,p=list(map(int,input().split()))\n    now=0\n    s=input()\n    if p==2 or p==5:\n        ans=0\n        for i in range(n):\n            if int(s[i])%p:continue\n            ans+=i+1\n    else:\n        table=[0]*p\n        table[0]=1\n        c=1\n        for i in range(n-1,-1,-1):\n            now=(now+c*int(s[i]))%p\n            c=10*c%p\n            table[now]+=1\n        ans=sum(j*(j-1)//2 for j in table)\n\n    print(ans)\ndef __starting_point():\n    m()\n\n__starting_point()", "n,p = map(int,input().split())\ns = input()\nans = 0\nif p == 2 or p == 5:\n    for i,c in enumerate(s,1):\n        if int(c)%p == 0: ans += i\nelse:\n    cnt = [0]*p\n    cnt[0] = 1\n    x = 0\n    d = 1\n    for c in s[::-1]:\n        x += d*int(c)\n        x %= p\n        cnt[x%p] += 1\n        d *= 10\n        d %= p\n    # print(cnt)\n    for v in cnt: ans += v*(v-1)//2\nprint(ans)", "N,P = map(int,input().split())\nS = input()\n\nif P in (2,5):\n    ans = 0\n    for i,c in enumerate(S):\n        if int(c)%P==0:\n            ans += i+1\n    print(ans)\n    return\n\nmem = [0]\nj = 1\nfor c in S[::-1]:\n    mem.append((mem[-1] + int(c)*j) % P)\n    j *= 10\n    j %= P\nfrom collections import Counter\nctr = Counter(mem)\nans = 0\nfor v in ctr.values():\n    ans += v*(v-1)//2\nprint(ans)", "3\nimport sys\nfrom collections import Counter\ninput = lambda: sys.stdin.readline().strip()\nn, p = [int(x) for x in input().split()]\ns = input()\nans = 0\nif p == 2 or p == 5:\n    allowed_digits = '24680' if p == 2 else '50'\n    for i, c in enumerate(s, start=1):\n        if c in allowed_digits:\n            ans += i\nelse:\n    count = Counter({0: 1})\n    x, e = 0, 1\n    for c in reversed(s):\n        x = (x + (ord(c) - ord('0')) * e) % p\n        e = e * 10 % p\n        ans += count[x]\n        count[x] += 1\n\nprint(ans)\n", "from collections import Counter\n\nn, p = list(map(int, input().split()))\n\ns = input()\n\n\na = 0\nt = list(map(int, list(s)))\nt.reverse()\n\n\nif p == 2:\n    for i in range(n):\n        if t[i] % 2 == 0:\n            a += len(t) - i \nelif p == 5:\n    for i in range(n):\n        if t[i] % 5 == 0:\n            a += len(t) - i \n\nelse:\n    u = []\n    k = 1\n    l = 0\n    for i in t:\n        l = (l + i*k) % p\n        u.append(l)\n        k = k * 10 % p\n\n    c = Counter(u)\n    a += c[0]\n    for i in list(c.values()):\n        if i > 1:\n            a += i * (i-1) // 2\n\n\nprint(a)\n\n\n", "n, p = map(int, input().split())\ns = input()\nr = set()\nlast = 0\nd = {0: 0}\ntotal = 0\nrem = 0\nif p == 2:\n    for i in range(0, len(s)):\n        if int(s[i]) % 2 == 0:\n            total += i + 1\n    print(total)\nelif p == 5:\n    for i in range(0, len(s)):\n        if int(s[i]) % 5 == 0:\n            total += i + 1\n    print(total)\n\n\n\nelse:\n    power = 1\n    for i in range(len(s) - 1, -1, -1):  # handling of 0's as n and rem\n        n = int(s[i]) * power + rem\n        power *= 10\n        power = power % p\n        rem = n % p\n        if rem in d.keys():\n            d[rem] += 1\n        else:\n            d[rem] = 1\n        total += d[rem] - 1\n    print(total + d[0])", "from math import factorial\nimport collections\n\ndef permutations_count(n, r):\n    ''' \u9806\u5217 '''\n    return factorial(n) // factorial(n - r)\n\n\ndef combinations_count(n, r):\n    ''' \u7d44\u307f\u5408\u308f\u305b '''\n    return factorial(n) // (factorial(n - r) * factorial(r))\n\n\nn,p = map(int, input().split())\nS = input()\nsu = 0\n\nif p > 6 or p == 3:\n\n    lis = []\n    amari = 1\n    lis.append(int(S[-1]) % p)\n\n    for i in range(2, len(S)+1):\n        amari = (amari * 10) % p\n        lis.append((int(S[-1*i]) * amari + lis[i-2]) % p)\n\n    c = collections.Counter(lis)\n\n    for k in c:\n        if c[k] > 1:\n            su += combinations_count(c[k], 2)\n\n    su += c[0]\n\n    print(su)\n\nelse:\n    S = S[::-1]\n    for i in range(len(S)):\n        if int(S[i]) % p == 0:\n            su += len(S)-i\n    print(su)", "N, P = list(map(int, input().split()))\nS = input()\n\nS = S[::-1]\nresult = 0\nif P == 2 or P == 5:\n    for i in range(N):\n        if int(S[i]) % P == 0:\n            result += N - i\nelse:\n    t = [0] * P\n    m = 1\n    n = 0\n    for i in range(len(S)):\n        t[n] += 1\n        n += int(S[i]) * m\n        n %= P\n        result += t[n]\n        m *= 10\n        m %= P\nprint(result)\n", "#E\nN,P = list(map(int,input().split()))\nS = list(str(input()))\n\nzcount = S.count(\"0\")\n\nU = []\nfor i in range(N):\n    u = int(S[N-i-1])\n    U.append(u)\n    \nnpow = 1\nT = [0]\nnow = 0\nfor i in range(N):\n    now += U[i]*npow\n    now %= P\n    T.append(now)\n    npow*=10\n    npow%=P\n    \npmod = [0]*P\nfor t in T:\n    pmod[t]+=1\n    \nans1 = 0\nfor p in pmod:\n    ans1 += (p*(p-1))//2\n    \nif P != 2 and P != 5:\n    print(ans1)\nelse:\n    ans2 = 0\n    for i in range(N):\n        u = U[i]\n        if u%P == 0:\n            ans2+=N-i\n    print(ans2)\n\n", "# E - Divisible Substring\nN,P = map(int,input().split())\nS = input()\nans = 0\nif P==2 or P==5:\n    for i in range(N):\n        if int(S[i])%P==0:\n            ans += i+1\nelse:\n    l = [1]+[0]*(P-1)\n    tmp = 0\n    r10 = 1\n    for i in range(N-1,-1,-1):\n        tmp = (r10*int(S[i])+tmp)%P\n        l[tmp] += 1\n        r10 = (r10*10)%P\n    for x in l:\n        ans += x*(x-1)//2\nprint(ans)", "#!/usr/bin/env python3\nimport sys\nimport numpy as np\n\ninput = sys.stdin.readline\n\n\ndef ST():\n    return input().rstrip()\n\n\ndef I():\n    return int(input())\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef LI():\n    return list(MI())\n\n\nN, P = MI()\nS = ST()\n\nans = 0\nif P == 2:\n    for i, s in enumerate(S, 1):\n        if int(s) % 2 == 0:\n            ans += i\nelif P == 5:\n    for i, s in enumerate(S, 1):\n        if int(s) % 5 == 0:\n            ans += i\nelse:\n    cnt = np.zeros(P)\n    cnt[0] = 1\n    res = 0\n    tmp = 1\n    for s in S[::-1]:\n        res += int(s) * tmp\n        res %= P\n        cnt[res] += 1\n        tmp *= 10\n        tmp %= P\n\n    for c in cnt[cnt >= 2]:\n        ans += c * (c - 1) // 2\n\nprint((int(ans)))\n", "3\nimport sys\nfrom collections import Counter\ninput = lambda: sys.stdin.readline().strip()\nn, p = [int(x) for x in input().split()]\ns = input()\nans = 0\nif p == 2 or p == 5:\n    allowed_digits = '24680' if p == 2 else '50'\n    for i, c in enumerate(s, start=1):\n        if c in allowed_digits:\n            ans += i\nelse:\n    def minv(x, p):\n        return pow(x, p - 2, p)\n\n    count = Counter({0: 1})\n    x, delta = 0, 1\n    for c in s:\n        x = ((x * 10) + ord(c) - ord('0')) % p\n        y = (x * minv(delta, p)) % p\n        ans += count[y]\n        count[y] += 1\n        delta = (delta * 10) % p\n\nprint(ans)\n", "n,p=map(int,input().split())\ns=[int(j) for j in input()][::-1]\n\nif p==2:\n    ans=0\n    for i,j in enumerate(s):\n        if j%2==0:\n            ans+=(n-i)\n    print(ans)\n    return\nif p==5:\n    ans=0\n    for i,j in enumerate(s):\n        if j%5==0:\n            ans+=(n-i)\n    print(ans)\n    return\n\nc=[0]*p\ntmp=0\nc[0]+=1\nt=1\nimport numpy as np\nfor i in s:\n    tmp+=t*i\n    c[tmp%p]+=1\n    t=(t*10)%p\nc=np.array(c)\nans=c*(c-1)//2\nprint(ans.sum())", "n,p = list(map(int, input().split()))\ns = list(map(int, input().strip()))\n\ncount = 0\n\nif(p == 2 or p == 5): #10\u3068\u4e92\u3044\u306b\u7d20\u3067\u306f\u306a\u3044\u5834\u5408\n    co = 0\n    for i in range(n): #1\u306e\u4f4d\u304b\u3089\u9806\u306b\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\n        ne = int(s[n-i-1]) % p\n        if(ne == 0):\n            co += 1\n        count += co\n    print(count)\nelse:\n    sta = [0]*p\n    sta[0] += 1\n    d = 1\n    co = 0\n    for i in range(n):\n        ne = int(s[n-i-1]) * d % p\n        co += ne\n        co %= p\n        sta[co] += 1\n        d *= 10\n        d %= p\n    for i in range(p):\n        count += sta[i] * (sta[i]-1) // 2\n    print(count)\n\n\n", "n,k=list(map(int,input().split()))\ns=list(map(int,list(input())))\nans=0\nif k==2 or k==5:\n    for i,p in enumerate(s):\n        if p%k==0:\n            ans+=i+1\nelse:\n    inv10=pow(10,k-2,k)\n    inv=10\n    total=0\n    S=[0]*k\n    S[0]=1\n    for i,p in enumerate(s):\n        inv*=inv10\n        inv%=k\n        total+=p*inv\n        total%=k\n        ans+=S[total]\n        S[total]+=1\nprint(ans)\n", "\"\"\"\ns=1817181712114 \u306a\u3089\n4\n10\n100\n2000\n10000\n700000\n1000000\n80000000\n100000000\n7000000000\n10000000000\n800000000000\n1000000000000\n\u306e\u6570\u5217\u3068\u307f\u3066, \u5404\u3005%P\u3092\u53d6\u3063\u3066zero sum range\nP=2,5\u304c\u30b3\u30fc\u30ca\u30fc\n\"\"\"\nfrom collections import Counter\ndef make_modlist(Len,mod):\n    modlist=[0]*Len\n    modlist[0]=1\n    for i in range(1,Len):\n        modlist[i]=10*modlist[i-1]%mod\n    return modlist\nn,p=map(int,input().split())\na=list(map(int,input()))\nans=0\na.reverse()\nif p==2 or p==5:\n    for i in range(n):\n        if a[i]%p==0:\n            ans+=n-i\nelse:\n    d=make_modlist(n,p)\n    b=[0]*(n+1)\n    for i in range(n):\n        b[i+1]=a[i]*d[i]%p\n    for i in range(1,n+1):\n        b[i]+=b[i-1]\n        b[i]%=p\n    for i in Counter(b).values():\n        ans+=i*(i-1)//2\nprint(ans)", "N,P=map(int,input().split())\nS=input()\nlist=[0 for _ in range(P)]\nlist[0]=1\nnow=0\na=0\nif P==2 or P==5:\n  M=len(S)\n  S=reversed(S)\n  l=0\n  for s in S:\n    if int(s)%P==0:\n      a+=M-l\n      l+=1\n    else:\n      l+=1\n  print(a)\n    \n\nelse:\n  b=1\n  h=0\n  for s in reversed(S):\n    h=h+b*int(s)\n    list[h%P]+=1\n    b=b*10%P\n    \n  c=0\n  for i in range(len(list)):\n    c+=list[i]*(list[i]-1)/2\n  print(int(c))", "import sys\n\nN, P = list(map(int, input().split()))\nA = input()\n\nans = 0\n\nif 10 % P == 0:\n    for r in range(len(A)):\n        if int(A[r]) % P == 0:\n            ans += r + 1\n    print(ans)\n    return\n\n\nA = \"0\" + A[::-1]\n\nS = [0] * len(A)\ncnt = [0] * P\ncnt[0] = 1\n\nfor i in range(len(A) - 1):\n    S[i + 1] = (S[i] + int(A[i + 1]) * pow(10, i, P)) % P\n    cnt[S[i + 1] % P] += 1\n# print(S, cnt)\n\n# ans = cnt[0] * (cnt[0] - 1) // 2\nfor c in cnt:\n    ans += c * (c - 1) // 2\nprint(ans)\n", "def main():\n    N, P = list(map(int, input().split()))\n    *s, = list(map(int, input()))\n\n    if P in {2, 5}:\n        ans = 0\n        for i, x in enumerate(reversed(s), start=0):\n            if x % P == 0:\n                ans += N - i\n        print(ans)\n        return\n\n    ans = 0\n    total = 0\n    coef = 1\n    ctr = [0] * P\n    ctr[0] = 1\n    for x in reversed(s):\n        total = (total + x * coef) % P\n        coef = coef * 10 % P\n        ans += ctr[total]\n        ctr[total] += 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\n\n\ndef main():\n    N, P = list(map(int, input().split()))\n    S = input()\n    if P in [2, 5]:\n        ans = 0\n        # P = 2, 5\u306e\u6642\u306f\u4e00\u756a\u4e0b\u306e\u4f4d\u306e\u6570\u3060\u3051\u898b\u308c\u3070\u30ab\u30a6\u30f3\u30c8\u53ef\u80fd\n        for right in range(N - 1, - 1, - 1):\n            if int(S[right]) % P == 0:\n                ans += right + 1\n        print(ans)\n        return\n    # \u4f8b\uff1aS = 3543, P = 3\n    # \u5de6\u304b\u3089n\u756a\u76ee \uff5e 1\u756a\u53f3\u306e\u6570\u306emod P\u306e\u5024\u3092\u8a08\u7b97\n    #     C = [3543, 543, 43, 3] % P = [0, 0, 1, 0]\n    # C[m] == C[n] \u306a\u308b m < n\u306e\u30da\u30a2\u6570 + C[n] == 0\u306a\u308bn\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\n    #     3 + 3 = 6\n    cur_c = 0\n    C = [0] * N\n    pw = 1\n    for n, s in enumerate(S[::-1]):\n        cur_c = (cur_c + pw * int(s)) % P\n        C[N - 1 - n] = cur_c\n        pw = (pw * 10) % P\n    counter = defaultdict(int)\n    for c in C:\n        counter[c] += 1\n    ans = 0\n    for c in C:\n        counter[c] -= 1\n        ans += counter[c]\n    ans += len([c for c in C if c == 0])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n,p = map(int,input().split())\ns = input()\n\nans = 0\nten = 1\nd = 0\n\nif (10%p == 0):\n    for i in range(n):\n        if int(s[i])%p == 0:\n            ans += i+1\n    print(ans)\n\nelse:\n    cntlist = [0]*p\n    cntlist[0] = 1\n    for i in range(n-1,-1,-1):\n        a = int(s[i])*ten%p\n        d = (d + a)%p\n        ten *= 10\n        ten %= p\n        cntlist[d] += 1\n\n    for i in cntlist:\n        ans += i*(i-1)//2\n    print(ans)     ", "import sys\n## io\nIS = lambda: sys.stdin.readline().rstrip()\nII = lambda: int(IS())\nMII = lambda: list(map(int, IS().split()))\nMIIZ = lambda: list(map(lambda x: x-1, MII()))\n## dp\nINIT_VAL = 0\nMD2 = lambda d1,d2: [[INIT_VAL]*d2 for _ in range(d1)]\nMD3 = lambda d1,d2,d3: [MD2(d2,d3) for _ in range(d1)]\n## math\nDIVC = lambda x,y: -(-x//y)\nDIVF = lambda x,y: x//y\n\ndef main():\n    n, p = MII()\n    s = list(map(int, IS()))\n    if 10%p == 0: # p\u304c2\u307e\u305f\u306f5\u306e\u5834\u5408\n        cnt = 0\n        for i, si in enumerate(s):\n            if si%p == 0:\n                cnt += i+1\n        print(cnt)\n        return None\n\n    d = [0]*p\n    d[0] = 1 # 0(mod p)\u306f\u305d\u308c\u5358\u4f53\u3067\u5272\u308a\u5207\u308c\u308b\u305f\u3081+1\u3057\u3066\u304a\u304f\n    ss = 0\n    x = 1\n    for si in s[::-1]:\n        ss += x*si\n        ss %= p\n        d[ss] += 1\n        x = (10*x)%p # %p\u7121\u3057\u3060\u3068TLE\n    cnt = 0\n    for di in d:\n        cnt += di*(di-1)//2 # calc combination(n_C_2)\n    print(cnt)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\n#import numpy as np\nimport queue\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\n\ndef main():\n    n,p = list(map(int,ipt().split()))\n    s = input()\n    ans = 0\n\n    if p == 2:\n        for i in range(n):\n            if int(s[i])%2 == 0:\n                ans += i+1\n        print(ans)\n    elif p == 5:\n        for i in range(n):\n            if int(s[i])%5 == 0:\n                ans += i+1\n        print(ans)\n    else:\n        d = defaultdict(int)\n        pi = 0\n        nk = 10%p\n        for i in s[::-1]:\n            pi = (pi+int(i)*nk)%p\n            d[pi] += 1\n            nk = (nk*10)%p\n        for i in list(d.values()):\n            ans += i*(i-1)//2\n        ans += d[0]\n        print(ans)\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, P = map(int, input().split())\nS = input()\n\nans = 0\nif P == 2 or P == 5:\n  for i, s in enumerate(S):\n    s = int(s)\n    if s % P == 0:\n      ans += i+1\nelse:\n  mods = [0] * (N+1)\n  for i in range(N-1, -1, -1):\n    mods[i] = (int(S[i])*pow(10, N-i-1, P)+mods[i+1]) % P\n  c = dict()\n  for m in mods:\n    c[m] = c.get(m, 0)+1\n  for key in c:\n    ans += c[key]*(c[key]-1)//2\n\nprint(ans)", "N, P = map(int, input().split())\nS = input()\nans = 0\n\nif P == 2 or P == 5:\n  for i, s in enumerate(S):\n    if int(s) % P == 0:\n      ans += i + 1\nelse:\n  l = [0] * P \n  l[0] = 1\n  Sum = 0\n  digits = 1\n  \n  for c in S[::-1]:\n    Sum += int(c) * digits % P\n    Sum %= P\n    l[Sum] += 1\n    digits = digits * 10 % P\n  \n  for i in range(len(l)):\n    ans += l[i] * (l[i] - 1) // 2\n  \nprint(ans)", "def main():\n    N, P = list(map(int, input().split()))\n    A = list(map(int, input()))\n\n    if 10 % P == 0:\n        ret = 0\n        for i, x in enumerate(reversed(tuple(A)), start=0):\n            if x % P == 0:\n                ret += N - i\n        print(ret)\n        return\n\n    ctr = [0] * P\n    ctr[0] = 1\n\n    ret = 0\n    t = 0\n    c = 1\n    for x in reversed(tuple(A)):\n        t = (t + c * x) % P\n        ret += ctr[t]\n        ctr[t] += 1\n        c = c * 10 % P\n\n    print(ret)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import gcd\nfrom collections import defaultdict\n\nN, P = map(int, input().split())\nS = list(map(int, input()))\n\nanswer = 0\nif P == 2 or P == 5:\n    for j in range(N - 1, -1, -1): # enumerate right endpoint\n        if S[j] % P == 0:\n            answer += j + 1\nelse:\n    cnts = defaultdict(int)\n    suffix = 0\n    base = 1\n    for i in range(N - 1, -1, -1):\n        suffix = (suffix + S[i] * base) % P\n        answer += cnts[suffix]  # Substr with length >= 2\n        answer += 1 if suffix == 0 else 0 # Substr with length = 1\n        cnts[suffix] += 1\n        base = base * 10 % P\n\nprint(answer)", "from sys import stdin\nimport sys\nimport math\nfrom functools import reduce\nimport functools\nimport itertools\nfrom collections import deque,Counter\nfrom operator import mul\nimport copy\n# ! /usr/bin/env python\n# -*- coding: utf-8 -*-\nimport heapq\n\nn,p = list(map(int, input().split()))\ns = input()\n\nans = 0\n\nif p == 2 or p == 5:\n    for i in range(n):\n        a = int(s[n-1-i])\n        if a % p == 0: ans += n-i\n\nelse:\n    d = {0: 1}\n    c = 0\n    for i in range(n):\n        c += (pow(10, i, p)*int(s[n-1-i])) % p\n        c %= p\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n\n    for dd in list(d.values()):\n        ans += dd*(dd-1)//2\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n", "from collections import Counter\n\nN, P = list(map(int, input().split()))\nS = input()\n\nif P in (2, 5):\n    ans = sum(i for i, s in enumerate(S, 1) if not int(s) % P)\nelse:\n    Acc = [0] * (N + 1)\n    p10 = 1\n    for i, s in enumerate(reversed(S)):\n        Acc[N - i - 1] = (Acc[N - i] + p10 * int(s)) % P\n        p10 = (p10 * 10) % P\n    ans = sum(v * (v - 1) // 2 for v in list(Counter(Acc).values()))\nprint(ans)\n", "N, P = map(int, input().split())\nS = input()\n\nmods = [0] * (N+1)\nfor i in range(N-1, -1, -1):\n  mods[i] = (int(S[i])*pow(10, N-i-1, P)+mods[i+1]) % P\nc = dict()\nfor m in mods:\n  c[m] = c.get(m, 0)+1\n\nans = 0\nif P == 2 or P == 5:\n  for i, s in enumerate(S):\n    s = int(s)\n    if s % P == 0:\n      ans += i+1\nelse:\n  for key in c:\n    ans += c[key]*(c[key]-1)//2\n\nprint(ans)", "N, P = list(map(int, input().split()))\nS = input()\nfrom collections import Counter\nans = 0\nif P == 2 or P == 5:\n    for i in range(N-1, -1, -1):\n        t = S[i]\n        if not int(t) % P:\n            ans += i + 1\nelse:\n    c = Counter()\n    c[0] += 1\n    p = 1\n    t = int(S[N-1])\n    c[t%P] += 1\n    for i in range(N-2, -1, -1):\n        p *= 10\n        t = int(S[i]) * p + t\n        c[t % P] += 1\n        p %= P\n    for a in list(c.values()):\n        ans += (a * (a-1)) // 2\nprint(ans)\n", "n, mod = map(int, input().split())\nS = input()\n\ntotal = 0\nif mod == 2 or mod == 5:\n\tfor i, q in enumerate(S):\n\t\tif int(q)%mod == 0:\n\t\t\ttotal += i+1\nelse:\n\tcounts = [0]*mod\n\tcounts[0] = 1\n\th = 0\n\t\n\td = 1\n\tfor s in reversed(S):\n\t\tm = int(s)*d%mod\n\t\th = (h+m)%mod\n\t\ttotal += counts[h]\n\t\tcounts[h] += 1\n\t\td = (d*10)%mod\n\nprint(total)", "N, P = map(int, input().split())\nS = input()\n\nif P == 2:\n    ans = 0\n    for i, d in enumerate(map(int, S)):\n        if d % 2 == 0:\n            ans += i+1\n    print(ans)\nelif P == 5:\n    ans = 0\n    for i, d in enumerate(map(int, S)):\n        if d % 5 == 0:\n            ans += i+1\n    print(ans)\nelse:\n    mods = [0] * P\n    mods[0] = 1\n    cur_mod = 0\n    for i, digit in enumerate(map(int, S)):\n        cur_mod += pow(10, N-i-1, P) * digit\n        cur_mod %= P\n        mods[cur_mod] += 1\n\n    ans = 0\n    for count in mods:\n        ans += count * (count - 1) // 2\n\n    print(ans)", "n, p = list(map(int, input().split()))\ns = input()\nr = set()\nlast = 0\nd = {0: 0}\ntotal = 0\nrem = 0\nif p == 2:\n    for i in range(0, len(s)):\n        if int(s[i]) % 2 == 0:\n            total += i + 1\n    print(total)\nelif p == 5:\n    for i in range(0, len(s)):\n        if int(s[i]) % 5 == 0:\n            total += i + 1\n    print(total)\n\n\n\nelse:\n    power = 1\n    for i in range(len(s) - 1, -1, -1):  # handling of 0's as n and rem\n        n = int(s[i]) * power + rem\n        power *= 10\n        power = power % p\n        rem = n % p\n        if rem in list(d.keys()):\n            d[rem] += 1\n        else:\n            d[rem] = 1\n        total += d[rem] - 1\n    print((total + d[0]))\n", "n, p = [int(_) for _ in input().split()]\ns = input()\n\nif p == 2 or p == 5:\n    ans = 0\n    for i in range(n):\n        if int(s[i]) % p == 0:\n            ans += i+1\n    print(ans)\n    return\n\nt = [0 for i in range(n+1)]\nP = [0 for i in range(p)]\nP[0] += 1\nd = 1\nfor i in range(1, n+1):\n    t[i] = (t[i-1]+int(s[n-i])*d) % p\n    P[t[i]] += 1\n    d = d*10 % p\nans = 0\nfor c in P:\n    ans += c*(c-1)//2\n# print(t)\nprint(ans)\n", "n, p = map(int, input().split())\nif p in (2, 5):\n  c = 0\n  for i, x in enumerate(map(int, input()[::-1])):\n    if x % p == 0:\n      c += n-i\n  print(c)\nelse:\n  c = [0] * p\n  y = 0\n  t = 1\n  for x in map(int, input()[::-1]):\n    y = (y + t*x) % p\n    c[y] += 1\n    t = (10 * t) % p\n  print(sum(i * (i-1) // 2 for i in c) + c[0])", "N, P = list(map(int, input().split()))\nS = input()\n\nif P == 2 or P == 5:\n    cnt = 0\n\n    cnt_a = 0\n    for s in S[::-1]:\n        if int(s) % P == 0:\n            cnt_a += 1\n\n        cnt += cnt_a\nelse:\n    r_lst = [0] * P\n    r_lst[0] = 1\n\n    cnt = 0\n    num = 0\n\n    for i, s in enumerate(S[::-1]):\n        num  = (num + int(s) * pow(10, i, P)) % P\n        cnt += r_lst[num]\n\n        r_lst[num] += 1\n\n\nprint(cnt)\n\n", "from collections import Counter\n\nN, P = map(int, input().split())\nS = input()\n\nif P == 2:\n    ret = 0\n    for i in range(N):\n        if int(S[i]) % 2 == 0:\n           ret += i + 1\n    print(ret)\n    return\n\nif P == 5:\n    ret = 0\n    for i in range(N):\n        if int(S[i]) % 5 == 0:\n           ret += i + 1\n    print(ret)\n    return\n\nmods = [0] * (N+1)\n\nfor i in reversed(range(N)):\n    mods[i] = (mods[i+1] + pow(10, N-i-1, P) * int(S[i]))% P\n\ncnt = Counter(mods)\nans = 0\nfor i in cnt:\n    ans += cnt[i] * (cnt[i] - 1) // 2\n\nprint(ans)", "N, P = list(map(int, input().split()))\n\nS = input()\n\nans = 0\nif P == 2 or P == 5:\n    for i, s in enumerate(S):\n        if int(s) % P == 0:\n            ans += i + 1\nelse:\n    counts = [0] * P\n    h = 0\n    d = 1\n    for s in reversed(S):\n        m = int(s) * d % P\n        h = (h + m) % P\n        counts[h] += 1\n        d = (d * 10) % P\n        ans = counts[0]\n    for i in counts:\n        ans += (i*(i-1))//2\n\nprint(ans)\n", "# \u3053\u308c\u307b\u3093\u3068\u7d0d\u5f97\u884c\u304b\u306a\u3044\nN, P = list(map(int, input().split()))\nS = list(map(int, input()))\nif P==2 or P==5:\n    ans = 0\n    for i, c in enumerate(S, 1):\n        if c%P==0:\n            ans += i\n    print(ans)\n    return\nL = [0] * P\ncum = 0\nans = 0\nL[0] += 1\ninv10 = pow(10, P-2, P)\nbase = 1\nfor c in S:\n    cum = (cum + c * base) % P\n    base = base * inv10 % P\n    ans += L[cum]\n    L[cum] += 1\nprint(ans)\n", "\n\n\n\nfrom collections import defaultdict\n\n\nN,P = map(int, input().split())\nS = input()\n\n\"\"\"\nS[l:r]  : (S[l:] - S[r:]) / 10**x\n\nP\u304c2,5\u4ee5\u5916\u3067\u3042\u308c\u3070\u3001S[l:]\u3068S[r:]\u304cP\u3067\u5272\u308a\u5207\u308c\u308c\u3070\u3088\u3044\n2,5\u306f10**x\u3068\u4e92\u3044\u306b\u7d20\u3067\u306f\u306a\u3044\u306e\u3067\u4f8b\u5916\u3002\n\n\u4f8b\uff12\u306e 2020\u306b\u3064\u3044\u3066\u3001\u5de6\u304b\u30894\u3064\u76ee\u306e0\u306b\u7740\u76ee\u3059\u308b\u3068\u3001\n0\n20\n020\n2020\n\u3044\u305a\u308c\u30822\u3067\u5272\u308a\u5207\u308c\u308b\u306e\u3067\u3001\u53f3\u7aef\u306b\u304f\u308b\u3082\u306e\u304c\uff12\u3067\u5272\u308a\u5207\u308c\u308b\u3060\u3051\u3067\u3088\u3044\u3002\n\"\"\"\n\nans = 0\n\nif P in [2,5]:\n    for i in range(N):\n        if int(S[i]) % P == 0:\n            ans += i+1\n\n\nelse:\n    mod_P = defaultdict(int)\n    mod_P[0] += 1 # S[r:]\u304c\u7a7a\u6587\u5b57\u306b\u306a\u308b\u3070\u3042\u3044\u306e\u3084\u3064\n    tmp = 0\n\n    for i in range(N):\n        tmp = int(S[N-1-i]) * pow(10, i, P) + tmp\n        tmp %= P\n        ans += mod_P[tmp]\n        mod_P[tmp] += 1\n\n\nprint(ans)", "def main():\n    N,p = list(map(int, input().split()))\n    S = input()\n    S = S[::-1]\n\n    if p==2 or p==5:\n        ans = 0\n        for i,s in enumerate(S):\n            if int(s)%p==0:\n                ans += N-i\n        print(ans)\n    else:\n        # modp\u3092\u4f5c\u6210\n        modp_counter = [0] * p\n        modp = 0\n        modp_counter[0] = 1 # \u5272\u308a\u5207\u308c\u308b\u3084\u3064\u304c\u5165\u308b\u5834\u6240\u306e\u521d\u671f\u5024\u30921\u306b\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u30011\u3064\u5272\u308a\u5207\u308c\u308b\u3084\u3064\u304c\u304d\u305f\u3068\u304d\u306bpair_count+=0\u3068\u306a\u3063\u3066\u3057\u307e\u3046(pair_count+=1\u306b\u306a\u308b\u3079\u304d\u306a\u306e\u306b)\n        pair_count = 0\n        d = 1\n        for s in S:\n            modp = (int(s)*d%p+modp)%p\n            pair_count += modp_counter[modp]\n            modp_counter[modp] += 1\n            d *= 10\n            d %= p # \u8a08\u7b97\u91cf\u524a\u6e1b\n        print(pair_count)\n\nmain()\n", "def main():\n    n,p = map(int,input().split())\n    s = input()\n    if p == 2:\n        ans = 0\n        for i in range(n):\n            if int(s[i])%2 == 0:\n                ans += i+1\n        print(ans)\n        return\n    if p == 5:\n        ans = 0\n        for i in range(n):\n            if int(s[i])%5 == 0:\n                ans += i+1\n        print(ans)\n        return\n    dp = [0 for _ in range(p)]\n    dp[0] += 1\n    x = 0\n    \n    for i in range(n):\n        x = (x+int(s[n-1-i])*pow(10,i,p))%p\n        dp[x] += 1\n    ans = 0\n    for i in range(p):\n        ans += (dp[i]*(dp[i]-1))//2\n    print(ans)\n \ndef __starting_point():\n    main()\n__starting_point()", "import sys\ndef LI2(): return list(map(int,sys.stdin.readline().rstrip()))  #\u7a7a\u767d\u306a\u3057\ndef S(): return sys.stdin.readline().rstrip()\n\nN,P = map(int,S().split())\nS = LI2()\n\nif P == 2 or P == 5:  #10\u3068\u7d20\u3067\u306a\u3044\u5834\u5408\u4e00\u756a\u53f3\u306e\u6841\u3067\u6c7a\u307e\u308b\n    ans = 0\n    for i in range(N):\n        if S[i] % P == 0:\n            ans += i+1\n    print(ans)\n    return\n\nA = [0]  #A[i] = \u4e0bi\u6841\u3092P\u3067\u5272\u3063\u305f\u4f59\u308a\nfor i in range(1,N+1):\n    A.append((A[i-1]+pow(10,i,P)*S[N-i]) % P)\n\nfrom collections import Counter\n\nc = Counter(A)\nB = c.values()\n\nans = 0\n\nfor i in B:\n    ans += (i*(i-1)//2)\n\nprint(ans)", "n,p = map(int,input().split())\ns = list(map(int, list(input())))\n\ndef solve():\n    total = 0\n\n    if 10%p == 0:\n        for i in range(n):\n            if s[i] % p == 0: total += i + 1\n        return total\n\n    cnt = [0]*p\n    r = 0\n    ten = 1\n    for i in range(n-1, 0-1, -1):\n        cnt[r] += 1\n        r = (r + s[i]*ten) % p\n        total += cnt[r]\n        ten = ten * 10 % p\n    return total\n\nprint(solve())", "\ndef main():\n    N,P = list(map(int,input().split()))\n    s = list(input())[::-1]\n    ary_mod = [0] * P\n    ary_mod[0] = 1\n    now = 0\n    digit = 1\n    ans = 0\n    if P == 2:\n        for i, ss in enumerate(s):\n            if int(ss) % 2 == 0:\n                ans += N-i\n        print(ans)\n        return\n    if P == 5:\n        for i, ss in enumerate(s):\n            if int(ss) % 5 == 0:\n                ans += N-i\n        print(ans)\n        return\n\n    for i, ss in enumerate(s):\n        now += int(ss) * digit % P\n        digit *= 10\n        digit %= P\n        remind = now % P\n        ary_mod[remind] += 1\n    ans = 0\n    for i, n in enumerate(ary_mod):\n        ans += (n*(n-1)) // 2\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\n\nN, P = list(map(int, input().split()))\nS = input()\n\nans = 0\n\nif not 10 % P:\n    for r in range(N):\n        if not int(S[r]) % P:\n            ans += r+1\nelse:\n    S = S[::-1]\n    s = 0\n    d = [0] * (N+1)\n    \n    for i in range(N):\n        s = (s + int(S[i]) * pow(10, i, P)) % P\n        d[i+1] = s\n\n    c = Counter()\n    for i in range(N+1):\n        ans += c[d[i]]\n        c[d[i]] += 1\n              \nprint(ans)"]