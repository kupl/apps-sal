["from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(input())\ndef inpl(): return list(map(int, input().split()))\ndef inpl_str(): return list(input().split())\n\nN = inp()\naa = inpl()\nQ = inp()\n\ntmp = 0\nruiseki = [0]\nfor a in aa:\n    tmp += a\n    ruiseki.append(tmp)\n\nfor q in range(Q):\n    l,r = inpl()\n    print((ruiseki[r]-ruiseki[l-1])//10)\n", "n = int(input())\na = list(map(int, input().split()))\ns = [0]\nfor v in a:\n    s.append(s[-1] + v)\n    \nq = int(input())\nfor _ in range(q):\n    l, r = list(map(int, input().split()))\n    print((s[r]-s[l-1])//10)\n", "n=int(input())\na=[int(x) for x in input().split()]\nb=[0]*(n+1)\ncounter=0\nfor i in range(n):\n    b[i]=counter\n    counter+=a[i]\nb[n]=counter\nq=int(input())\nfor i in range(q):\n    x,y=[int(x) for x in input().split()]\n    z=b[y]-b[x-1]\n    print(z//10)\n", "N = int(input())\n \narr = input()\narr = [int(x) for x in arr.split(' ')]\n\nprefix = [0]*N\n\ns = 0\nfor i in range(N):\n    s += arr[i]\n    prefix[i] = s\n    \n#print(prefix)\n\nQ = int(input())\n\nfor i in range(Q):\n    arr = input()\n    L,R = [int(x) for x in arr.split(' ')]\n    if L==1:\n        range_sum = prefix[R-1]\n    else:\n        range_sum = prefix[R-1] - prefix[L-2]\n        \n    #print(range_sum)\n        \n    print(range_sum//10)", "# @author \n\nimport sys\n\nclass CCandies:\n    def solve(self):\n        n = int(input())\n        s = [int(_) for _ in input().split()]\n        q = int(input())\n        pre = [0] * (n + 1)\n        for i in range(1, n + 1):\n            pre[i] = pre[i - 1] + s[i - 1]\n        for i in range(q):\n            li, ri = [int(_) for _ in input().split()]\n            print((pre[ri] - pre[li - 1]) // 10)\n\nsolver = CCandies()\ninput = sys.stdin.readline\n\nsolver.solve()\n", "n=int(input())\narr=list(map(int,input().split()))\nsumarray=[0]*(n+1)\ntot=0\nfor i in range(n):\n    tot+=arr[i]\n    sumarray[i+1]=tot\n# print(arr)\n# print(sumarray)\nq=int(input())\nfor i in range(q):\n    l,r=list(map(int,input().split()))\n    l-=1\n    temp=sumarray[r]-sumarray[l]\n    print(temp//10)", "# Binary Indexed Tree (Fenwick Tree)\nclass BIT():\n    def __init__(self, n):\n        '''n = \u8981\u7d20\u6570\n        \u8981\u7d20\u306e\u6dfb\u5b57i\u306f 0 <= i < n \u3068\u306a\u308b\n        '''\n        self.n = n\n        self.bit = [0] * (n + 1)\n\n    def add(self, i, val):\n        '''i\u756a\u76ee\u306e\u8981\u7d20\u306bval\u3092\u52a0\u7b97\u3059\u308b O(logN)'''\n        i = i + 1\n        while i <= self.n:\n            self.bit[i] += val\n            i += i & -i\n\n    def _sum(self, i):\n        s = 0\n        while i > 0:\n            s += self.bit[i]\n            i -= i & -i\n        return s\n\n    def sum(self, i, j):\n        '''\u533a\u9593[i, j)\u306e\u548c\u3092\u6c42\u3081\u308b O(logN)'''\n        return self._sum(j) - self._sum(i)\n\n\nimport sys\n\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nq = int(input())\nquery = [list(map(int, input().split())) for i in range(q)]\n\nbit = BIT(n)\nfor i in range(n):\n    bit.add(i, a[i])\nfor i in range(q):\n    l, r = query[i]\n    l -= 1\n    print(bit.sum(l, r) // 10)\n\n", "n = int(input())\nl = list(map(int, input().split()))\npref = [0] * (n + 1)\nfor i in range(1, n + 1):\n    pref[i] = pref[i - 1] + l[i - 1]\n\nq = int(input())\nfor i in range(q):\n    l, r = list(map(int, input().split()))\n    print((pref[r] - pref[l - 1])// 10)", "import sys\n\nn = int(sys.stdin.readline().strip())\ns = list(map(int, sys.stdin.readline().strip().split()))\nq = int(sys.stdin.readline().strip())\nA = [s[:]]\nfor i in range (1, 20):\n    A.append([])\n    for j in range (n // (2 ** i)):\n        A[i].append(A[i-1][2*j] + A[i-1][2*j+1])\n\nfor i in range (0, q):\n    l, r = list(map(int, sys.stdin.readline().strip().split()))\n    l = l - 1\n    r = r - 1\n    x = 0\n    while l != r + 1:\n        l2 = l\n        e = 0\n        while l2 % 2 == 0 and l + 2 ** (e+1) <= r+1:\n            l2 = l2 // 2\n            e = e + 1\n        x = x + A[e][l2]\n        l = l + 2 ** e\n    print(x//10)", "# I <3 tzuyu\nn = int(input())\na = list(map(int, input().split()))\ns = [0 for _ in range(n + 1)]\ns[1] = a[0]\nfor i in range(1, n):\n    s[i + 1] = s[i] + a[i]\nm = int(input())\nfor _ in range(m):\n    x, y = list(map(int, input().split()))\n    z = s[y] - s[x - 1]\n    print(z // 10)\n", "# -*- coding: utf-8 -*-\nimport sys\n# from operator import itemgetter\n# from fractions import gcd\n# from math import ceil, floor\n# from copy import deepcopy\n# from itertools import accumulate\nfrom collections import deque\n# import math\n# from functools import reduce\ninput = sys.stdin.readline\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().rstrip().split()))\ndef lmi(): return list(map(int, input().rstrip().split()))\ndef li(): return list(input().rstrip())\n# template\n\n# BEGIN CUT HERE\n\n\nclass BIT:\n    def __init__(self, x, d=0):\n        if isinstance(x, int):\n            self.size = x\n            self.tree = [d for _ in range(self.size + 1)]\n        elif isinstance(x, list):\n            self.size = len(x)\n            self.tree = [d for _ in range(self.size + 1)]\n            self.build(x)\n        else:\n            raise TypeError\n\n    def build(self, arr):\n        if not isinstance(arr, list):\n            raise TypeError\n        for num, x in enumerate(arr):\n            self.add0(num, x)\n\n    def sum(self, i):\n        s = self.tree[0]\n        while i > 0:\n            s += self.tree[i]\n            i -= (i & -i)\n        return s\n\n    def add(self, i, a):\n        if(i == 0):\n            return\n        while (i <= self.size):\n            self.tree[i] += a\n            i += (i & -i)\n\n    def bisect_left(self, w):\n        if w <= 0:\n            return 0\n        x = 0\n        r = 1\n        while (r < self.size):\n            r <<= 1\n        k = r\n        while (k > 0):\n            if x + k <= self.size and self.tree[x + k] < w:\n                w -= self.tree[x + k]\n                x += k\n            k >>= 1\n        return x + 1\n\n    def query(self, l, r):\n        return self.sum(r - 1) - self.sum(l - 1)\n\n    def sum0(self, i):\n        return self.sum(i + 1)\n\n    def add0(self, i, a):\n        self.add(i + 1, a)\n\n    def query0(self, l, r):\n        return self.sum(r) - self.sum(l)\n\n    def __getitem__(self, item):\n        _tmp = item.indices(self.size + 1)\n        return [self.sum(i) - self.sum(i - 1) for i in range(_tmp[0], _tmp[1], _tmp[2])]\n\n    def __str__(self):\n        return str(self[1:self.size + 1])\n\n# END CUT\n\n\ndef main():\n    n = ii()\n    a = lmi()\n    q = ii()\n    bit = BIT(a)\n    # print(bit)\n    for i in range(q):\n        l, r = mi()\n        a = bit.query(l, r+1)\n        print((a-a % 10)//10)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nsi = list(map(int,input().split()))\nq = int(input())\nsi2 = [0] * (n+1)\nfor i in range(n):\n    si2[i+1] = si2[i] + si[i]\nfor i in range(q):\n    l, r = list(map(int,input().split()))\n    print((si2[r]-si2[l-1])//10)\n", "l = int(input())\nnumerals = list(map(int, input().split()))\nrequests_num = int(input())\nrequests = []\nfor i in range(requests_num):\n    requests.append(list(map(int, input().split())))\nnumerals_combos = []\nfor i in range(l // 100):\n    numerals_combos.append(sum(numerals[i * 100: (i + 1) * 100]))\nfor request in requests:\n    l, r = request[0] - 1, request[1]\n    if r - l >= 200:\n        l_100 = l // 100 + 1\n        r_100 = r // 100\n        print(sum(numerals[l: l_100 * 100]) + sum(numerals_combos[l_100: r_100]) + sum(numerals[r_100 * 100: r]) // 10)\n    else:\n        print(sum(numerals[l: r]) // 10)", "n = int(input())\ns = list(map(int, input().split()))\n\nacc = [0]\ncur = 0\nfor a in s:\n    cur += a\n    acc.append(cur)\n\n\nnq = int(input())\nfor i in range(nq):\n    l, r = list(map(int, input().split()))\n    print((acc[r]-acc[l-1]) // 10)\n", "a=int(input())\nb=list(map(int,input().split()))\nc=[0]\nfor i in b:\n    c.append(i+c[-1])\nfor i in range(int(input())):\n    l,r=map(int,input().split())\n    print((c[r]-c[l-1])//10)", "n=int(input())\nl=list(map(int,input().split()))\npre=[0]\nfor i in l:\n\tpre.append(pre[-1]+i)\nq=int(input())\nfor i in range(q):\n\tl,r=map(int,input().split())\n\tprint((pre[r]-pre[l-1])//10)", "def stp(f):\n    q = 1\n    for i in range (f):\n        q *= 2\n    return q\ndef opr(n):\n    q = 1\n    counter = 0\n    while q != n:\n        q *= 2\n        counter += 1\n    return counter\nn = int(input())\nS = list(map(int, input().split()))\nst = 1\ncounter = 1\nwhile st < n:\n    st *= 2\n    counter += 1\n#print(st, counter)\nif st != n:\n    st // 2\n    counter -= 1\ndp = [[] for i in range (counter)]\n#print(dp)\nfor i in range (n):\n    dp[0].append([0, S[i]])\n#print(dp)\nfor i in range (1, counter):\n    chislo = stp(i)\n    #print(chislo)\n    for l in range (n - chislo + 1):\n        r = l + chislo\n        #print(l, r)\n        dp[i].append([dp[i - 1][l][0] + dp[i - 1][l + chislo // 2][0], (dp[i - 1][l][1] + dp[i - 1][l + chislo // 2][1]) % 10])\n        if dp[i - 1][l][1] + dp[i - 1][l + chislo // 2][1] > 9:\n            dp[i][l][0] += 1\nq = int(input())\n#print(dp)\nfor i in range (q):\n    a, b = map(int, input().split())\n    w = b - a + 1\n    counter = opr(w)\n    print(dp[counter][a - 1][0])", "import math\nn=int(input())\nass=n*2\nv=[int(i) for i in input().split()]\nans=[[0 for i in range(20)] for i in range(n)]\nch=[[0 for i in range(20)] for i in range(n)]\nfor i in range(n):\n    ch[i][0]=v[i]\nkol=1\nj=2\nwhile(kol<20):\n    i=0\n    while(i+j-1+ass<n+ass):\n        shize=i+j-1\n        ch[i][kol]=(ch[i][kol-1]+ch[int((i+shize+1)/2)][kol-1])%10\n        pl = 0\n        if((ch[i][kol-1]+ch[int((i+shize+1)/2)][kol-1])>=10):\n            pl=1\n        ans[i][kol]=ans[i][kol-1]+ans[int((i+shize+1)/2)][kol-1] + pl\n        \n        i+=1\n    \n    j*=2\n    kol+=1\nq=int(input())\nfor i in range(q):\n    a,b=[int(i) for i in input().split()]\n    a-=1+ass-ass\n    b-=1-ass+ass\n    kol=int(math.log2(b-a+1))\n    print(ans[a][kol])\n", "n = int(input())\na = list(map(int, input().split(\" \")))\nq = int(input())\nsuma = [0]\nt = 0\nfor i in range(n):\n    t += a[i]\n    suma.append(t)\nfor i in range(q):\n    l,r = map(int, input().split(\" \"))\n    temp = suma[r]-suma[l-1]\n    print(temp//10)", "n = int(input())\ns = list(map(int, input().split()))\nq = int(input())\nl = []\ncandies = 0\nr = []\n\nfor _ in range(q):\n    lr = input().split()\n    l.append(int(lr[0]))\n    r.append(int(lr[1]))\n\n# for i in range(q):\n#     new_array = s[l[i] - 1:r[i]]\n#     while len(new_array) != 1:\n#         j = 0\n#         new_array1 = []\n#         while j < len(new_array):\n#             if new_array[j] + new_array[j+1] >= 10:\n#                 candies += 1\n#             new_array1.append((new_array[j] + new_array[j+1]) % 10)\n#             j += 2\n#         new_array = new_array1\n#     print(candies)\n#     candies = 0\nsum_array = [0]\nsum_total = 0\n\nfor j in s:\n    sum_total += j\n    sum_array.append(sum_total)\n\nfor i in range(q):\n    total = sum_array[r[i]] - sum_array[l[i] - 1]\n    candies = total // 10\n    print(candies)", "n=int(input())\ns=list(map(int,input().split()))\nsu=0\na=[]\nfor i in range(n):\n    su+=s[i]\n    a.append(su)\nfor q in range(int(input())):\n    l,r=map(int,input().split())\n    if(l==1):\n        print(a[r-1]//10)\n    else:    \n        print((a[r-1]-a[l-2])//10)", "from sys import stdin, stdout\n\ndef rsingle_int():\n    return int(stdin.readline().rstrip())\n\ndef rmult_int():\n    return [ int(x) for x in stdin.readline().rstrip().split() ]\n\ndef r_str():\n    return stdin.readline().rstrip()\n    \ndef rsingle_char():\n    return stdin.read(1)\n\ndata = {}\n\ndef foo(s, s_len, l, r):\n   # print(\"{}:{}\".format(l,r))\n    diff = r - l\n    if diff == 0:\n        return (0, 0)\n    if l not in data:\n        data[l] = {}\n    if r in data[l]:\n        return data[l][r]\n    else:\n        res = None\n        \n        cookies = 0\n        if diff == 1:\n            left = s[l]\n            right = s[r]\n        else:\n            cookies_1, left = foo(s, s_len, l, int(l + (diff / 2)))\n            cookies_2, right = foo(s, s_len, int(l + (diff / 2) + 1), r)\n            cookies += cookies_1 + cookies_2\n        cookies += int((left + right) / 10)\n        rem = int((left + right) % 10)\n        data[l][r] = (cookies, rem)\n        return (cookies, rem)\n            \n\ndef main():\n    s_len = rsingle_int()\n    s = rmult_int()\n    r_len = rsingle_int()\n    for i in range(r_len):\n        l, r = rmult_int()\n        cookies, rem = foo(s, s_len, l - 1, r - 1)\n        print(cookies)\n\n \nmain()", "import sys\nn=int(input())\na=[0] + list(map(int,input().split()))\ndp={}\ndp1={}\nfor i in range(int(input())):\n    l,r=list(map(int,sys.stdin.readline().split()))\n    ans=0\n\n    def check(l,r):\n        nonlocal ans\n        # print(ans)\n        if (l,r) in dp:\n            return dp[(l,r)]\n        else:    \n            if (l==r):\n                dp[(l,r)]=(a[l],0)\n                return dp[(l,r)]\n            else:\n                mid=(l+r)//2\n                p1=check(l,mid)\n                p2=check(mid+1,r)\n                # p=check(l,mid)[0] + check(mid+1,r)[0]\n                if p1[0] + p2[0]>=10:\n                    dp[(l,r)]=((p1[0]+p2[0])%10,p1[1] + p2[1] + 1)\n                else:\n                    dp[(l,r)]=((p1[0] + p2[0])%10,p1[1] + p2[1] )\n                # print(p,ans)    \n                return dp[(l,r)]\n    print(check(l,r)[1])\n    # print()\n"]