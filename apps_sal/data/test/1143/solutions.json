["w, r = open('output.txt', 'w'), open('input.txt', 'r')\ns, y = [0] * 466, [0, 100, 131, 159, 190, 220, 251, 281, 312, 343, 373, 404, 434]\nfor i in range(int(r.readline())):\n    m, d, p, t = map(int, r.readline().split())\n    x = y[m] + d\n    s[x] -= p\n    s[x - t] += p\nfor i in range(465):\n    s[i + 1] += s[i]\nw.write(str(max(s)))", "import sys\nimport datetime\ndef solve():\n    n = int(input())\n    count = [0] * 10000\n    for i in range(n):\n        m, d, p, t = map(int, input().split())\n        end = datetime.date(2013, m, d).toordinal() - 734000\n        for j in range(end - t, end): count[j] += p\n    print(max(count))\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nelse:\n    sys.stdin = open(\"input.txt\")\n    sys.stdout = open(\"output.txt\", 'w')\nsolve()", "fin = open(\"input.txt\", \"r\")\nfout = open(\"output.txt\", \"w\")\nday = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\ntable = []\nfor i in range(int(fin.readline())):\n    table.append([int(i) for i in fin.readline().split()])\n\nans = [0]*500\nfor it in table:\n    days = sum(day[0:it[0]]) + it[1] + 100\n    for i in range(1, it[3]+1):\n        ans[days - i] += it[2]\nprint(max(ans), file=fout)\n\n \t  \t \t     \t \t\t\t   \t \t   \t\t\t \t", "from collections import Counter\ndm = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\ndef dec(d):\n    d[2] -= 1\n    if d[2] == 0:\n        d[1] -= 1\n        if d[1] == 0:\n            d[0] -= 1\n            d[1] = 12\n        d[2] = dm[d[1]]\nf = open('input.txt', 'r')\nc = Counter()\nfor i in range(int(f.readline())):\n    d = [2013] + list(map(int, f.readline().split()))    \n    for j in range(d[4]):\n        dec(d)\n        c[10000 * d[0] + 100 * d[1] + d[2]] += d[3]\nprint(c.most_common()[0][1], file=open('output.txt', 'w'))", "w, r = open('output.txt', 'w'), open('input.txt', 'r')\ns, y = [0] * 466, [0, 100, 131, 159, 190, 220, 251, 281, 312, 343, 373, 404, 434]\nfor i in range(int(r.readline())):\n    m, d, p, t = map(int, r.readline().split())\n    x = y[m] + d\n    s[x] -= p\n    s[x - t] += p\nfor i in range(465):\n    s[i + 1] += s[i]\nw.write(str(max(s)))", "from sys import *\nfrom bisect import *\nfrom collections import *\nfrom itertools import *\nfrom fractions import *\nfrom datetime import *\n\nInput = []\n\nstdin = open('input.txt', 'r')\nstdout = open('output.txt', 'w')\n\n## for i, val in enumerate(array, start_i_value)\n\ndef Out(x):\n    stdout.write(str(x) + '\\n')\n\ndef In():\n    return stdin.readline().strip()\n\ndef inputGrab():\n    for line in stdin:\n        Input.extend(map(str, line.strip().split()))\n'''--------------------------------------------------------------------------------'''\n\ndef main():\n    n = int(In())\n    y = 2013\n    \n    Lst = []\n    Max = -1\n    for _ in range(n):\n        Lst.append(list(map(int, In().split())))\n        Max = max(Max, Lst[_][2])\n    \n    Lst.sort()\n    \n    Ans = Max\n    for i in range(len(Lst)-1):\n        Tmp = Lst[i][2]\n        for j in range(i+1, len(Lst)):\n            x = date(2013, Lst[i][0], Lst[i][1])\n            y = date(2013, Lst[j][0], Lst[j][1])\n            \n            #print(x, y)\n            \n            if(x > (y-timedelta(days = Lst[j][3]))):\n                Tmp += Lst[j][2]\n\n        Ans = max(Ans, Tmp)\n    \n    Out(Ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "w, r = open('output.txt', 'w'), open('input.txt', 'r')\n\ns, y = [0] * 466, [0, 100, 131, 159, 190, 220, 251, 281, 312, 343, 373, 404, 434]\n\nfor i in range(int(r.readline())):\n\n    m, d, p, t = list(map(int, r.readline().split()))\n\n    x = y[m] + d\n\n    s[x] -= p\n\n    s[x - t] += p\n\nfor i in range(465):\n\n    s[i + 1] += s[i]\n\nw.write(str(max(s)))\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\n\n\ndef getMaxJuries(juries, m, d, t, months):\n    year = 1\n    res = 0\n    while (t > 0):\n        if (d < 0):\n            m -= 1\n            if(m < 0):\n                m += 12\n                year = 0\n            d = months[m] - 1\n        res = max(res, juries[year][m][d])\n        d -= 1\n        t -= 1\n\n    return res\n\n\ndef setJury(juries, m, d, t, months, p):\n    year = 1\n    while (t > 0):\n        if (d < 0):\n            m -= 1\n            if(m < 0):\n                m += 12\n                year = 0\n            d = months[m] - 1\n        juries[year][m][d] += p\n        d -= 1\n        t -= 1\n\n\ndef __starting_point():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    n = int(input())\n    juriesNumber = 0\n    juries = [[[0 for i in range(31)] for j in range(12)] for _ in range(2)]\n\n    for i in range(n):\n        m, d, p, t = [int(x) for x in input().split()]\n        m -= 1\n        d -= 2\n        maxJuries = getMaxJuries(juries, m, d, t, months)\n\n        if (maxJuries + p > juriesNumber):\n            juriesNumber += ((maxJuries + p) - juriesNumber)\n\n        setJury(juries, m, d, t, months, p)\n\n    print(juriesNumber)\n__starting_point()", "\nfin = open(\"input.txt\", \"r\")\nfout = open(\"output.txt\", \"w\")\n\nmon = [0,31,28,31,30,31,30,31,31,30,31,30,31]\nans = [0]*500\nba = []\nfor i in range(int(fin.readline())):\n   m,d,p,t = map(int,fin.readline().split())\n   ba.append([m,d,p,t])\n\nfor i in ba:\n    days = sum(mon[:i[0]]) + i[1] + 100\n    for j in range(1,i[3]+1):\n        ans[days - j]+=i[2]\n\nprint(max(ans), file=fout)\n\n\n\n\n", "w = open('output.txt', 'w')\nr = open('input.txt', 'r')\narr = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\ndef get_date(m, d):\n    res = 0\n    for i in range(m-1):\n        res += arr[i]\n    return res + d\n\nn = int(r.readline())\nused = [0] * 366\nfor i in range(n):\n    m, d, p, t = list(map(int, r.readline().split()))\n    date = get_date(m, d)\n    for i in range(max(0, date-t), date):\n        used[i] += p\nw.write(str(max(used)))\n", "w=open('output.txt', 'w')\nr=open('input.txt', 'r')\ns=[0]*466\ny=[0, 100, 131, 159, 190, 220, 251, 281, 312, 343, 373, 404, 434]\nn=int(r.readline())\nfor i in range(n):\n    m, d, p, t = map(int, r.readline().split())\n    x = y[m] + d\n    s[x] -= p\n    s[x - t] += p\nfor i in range(465):\n    s[i + 1] += s[i]\nw.write(str(max(s)))", "'''input\n2\n5 23 1 2\n3 13 2 3\n'''\n\nfrom sys import stdin, stdout\n\n\ndef get_time(m, d, t):\n\t# print(m, d)\n\tmonth = ['dum', 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n\tday = 0\n\tfor i in range(1, m):\n\t\tday += month[i]\n\tday += d\n\tend = day\n\tstart = end - t\n\t# print(start, end)\n\treturn start, end\n\n\n\n# main starts\nstdin = open('input.txt', 'r')\nstdout = open('output.txt', 'w')\nn = int(stdin.readline().strip())\ntime_line = []\nfor _ in range(n):\n\tm, d, p, t = list(map(int, stdin.readline().split()))\n\tstart, end = get_time(m, d, t)\n\ttime_line.append([start, p])\n\ttime_line.append([end, -p])\n\ntime_line = sorted(time_line, key = lambda x: (x[0], x[1]))\n# print(time_line)\nans = 0\ntemp = 0\n\nfor i in range(len(time_line)):\n\ttemp += time_line[i][1]\n\tans = max(ans, temp)\n\nstdout.write(str(ans))\n", "def main():\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    month2day = {}\n    cnt = 0\n    for i in range(9, 12 + 1):\n        for j in range(1, days_in_month[i - 1] + 1):\n            month2day[(i, j, 12)] = cnt\n            cnt += 1\n\n    for i in range(1, 12 + 1):\n        for j in range(1, days_in_month[i - 1] + 1):\n            month2day[(i, j, 13)] = cnt\n            cnt += 1\n\n    with open('input.txt') as f:\n        test = f.readlines()\n\n    n = int(test[0].strip())\n\n    days = [0] * len(month2day)\n    for i in range(1, n+1):\n        m, d, p, t = map(int, test[i].strip().split())\n        R = month2day[(m, d, 13)] - 1\n        L = R - t + 1\n        days[L] += p\n        days[R + 1] -= p\n\n    acc = [days[0]]\n    for i in range(1, len(days)):\n        acc.append(acc[-1] + days[i])\n\n    with open('output.txt', 'w') as f:\n        f.write(str(max(acc)))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nimport datetime\ndef solve():\n    n = int(input())\n    count = [0] * 10000\n    for i in range(n):\n        m, d, p, t = map(int, input().split())\n        end = datetime.date(2013, m, d).toordinal() - 734000\n        for j in range(end - t, end): count[j] += p\n    print(max(count))\n \nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nelse:\n    sys.stdin = open(\"input.txt\")\n    sys.stdout = open(\"output.txt\", 'w')\nsolve()", "from datetime import date, timedelta\nimport math\n\n\nw=open('output.txt', 'w')\nr=open('input.txt', 'r')\noplympiads = []\n\nmin_date = date(2014,1,1)\nmax_date = date(2011,1,1)\n\nn = int(r.readline())\n\nfor _ in range(n):\n    m, d, p, t = map(int, r.readline().split())\n    oplympiads.append((m,d,p,t))\n    if (date(2013, m, d) > max_date):\n        max_date = date(2013, m, d)\n    if (date(2013, m, d) - timedelta(t) < min_date):\n        min_date = date(2013, m, d) - timedelta(t)\n    \ndays_needed = (max_date - min_date).days\nnumber_of_workers_in_day = [0] * days_needed\nfor m,d,p,t in oplympiads:\n    for dte in range(t):\n        number_of_workers_in_day[((date(2013, m, d) - timedelta(t - dte)) - min_date).days] += p\nw.write('{}'.format(max(number_of_workers_in_day)))", "from datetime import date, timedelta\nimport math\n\n\nw=open('output.txt', 'w')\nr=open('input.txt', 'r')\noplympiads = []\n\nmin_date = date(2014,1,1)\nmax_date = date(2011,1,1)\n\nn = int(r.readline())\n\nfor _ in range(n):\n    m, d, p, t = map(int, r.readline().split())\n    oplympiads.append((m,d,p,t))\n    if (date(2013, m, d) > max_date):\n        max_date = date(2013, m, d)\n    if (date(2013, m, d) - timedelta(t) < min_date):\n        min_date = date(2013, m, d) - timedelta(t)\n    \ndays_needed = (max_date - min_date).days\nnumber_of_workers_in_day = [0] * days_needed\nfor m,d,p,t in oplympiads:\n    for dte in range(t):\n        number_of_workers_in_day[((date(2013, m, d) - timedelta(t - dte)) - min_date).days] += p\nw.write('{}'.format(max(number_of_workers_in_day)))", "import sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\nsys.setrecursionlimit(pow(10, 6))\nsys.stdin = open(\"input.txt\", \"r\")\nsys.stdout = open(\"output.txt\", \"w\")\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef data(): return sys.stdin.readline().strip()\ndef out(*var, end=\"\\n\"): sys.stdout.write(' '.join(map(str, var))+end)\ndef l(): return list(sp())\ndef sl(): return list(ssp())\ndef sp(): return list(map(int, data().split()))\ndef ssp(): return list(map(str, data().split()))\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\n\n\ndef jury_size(a):\n    date = start[a]\n    dp[' '.join(map(str, end[a]))] += jury[a]\n    while date != end[a]:\n        dp[' '.join(map(str, date))] += jury[a]\n        if date[0] in tone and date[1] == 31:\n            date[0] += 1\n            date[1] = 1\n        elif date[0] == 2 and date[1] == 28:\n            date[0] += 1\n            date[1] = 1\n        elif date[0] not in tone and date[1] == 30:\n            date[0] += 1\n            date[1] = 1\n        else:\n            date[1] += 1\n\n\nstart, end, jury = [], [], []\ndp = dd(int)\ntone = [1, 3, 5, 7, 8, 10, 12, 0, -2]\nn = int(data())\nfor i in range(n):\n    m, d, p, t = sp()\n    if d > 1:\n        end.append([m, d - 1])\n    else:\n        temp = d\n        if (m - 1) in tone:\n            temp = 31\n        elif m == 3:\n            temp = 28\n        else:\n            temp = 30\n        end.append([m-1, temp])\n    temp = d\n    while t >= temp:\n        m -= 1\n        if m in tone:\n            temp += 31\n        elif m == 2:\n            temp += 28\n        else:\n            temp += 30\n    ed = temp - t\n    start.append([m, ed])\n    jury.append(p)\nfor i in range(n):\n    jury_size(i)\nout(max(dp.values()))\n", "import sys\nsys.stdin = open('input.txt','r')\nsys.stdout = open('output.txt','w')\n\ndi = {}\nk = 1\ndays = [31,28,31,30,31,30,31,31,30,31,30,31]\n\nfor i in range(12):\n\tfor j in range(days[i]):\n\t\tdi[(i+1, j+1)] = k\n\t\tk+=1\n\nn = int(input())\na = [0]*512\nfor _ in range(n):\n\tm, d, p, t = map(int, input().split())\n\ttemp = di[(m,d)]\n\tfor x in range(temp-t, temp):\n  \t\ta[x]+=p\n\nprint(max(a))", "w=open('output.txt', 'w')\nr=open('input.txt', 'r')\ns=[0]*466\ny=[0, 100, 131, 159, 190, 220, 251, 281, 312, 343, 373, 404, 434]\nn=int(r.readline())\nfor i in range(n):\n    m, d, p, t = map(int, r.readline().split())\n    x = y[m] + d\n    s[x] -= p\n    s[x - t] += p\nfor i in range(465):\n    s[i + 1] += s[i]\nw.write(str(max(s)))", "w=open('output.txt', 'w')\nr=open('input.txt', 'r')\ns=[0]*466\ny=[0, 100, 131, 159, 190, 220, 251, 281, 312, 343, 373, 404, 434]\nn=int(r.readline())\nfor i in range(n):\n    m, d, p, t = map(int, r.readline().split())\n    x = y[m] + d\n    s[x] -= p\n    s[x - t] += p\nfor i in range(465):\n    s[i + 1] += s[i]\nw.write(str(max(s)))"]