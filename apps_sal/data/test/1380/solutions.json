["n,k=map(int,input().split())\na=list(map(int,input().split()))\np=1000\nfirst=1\nfor i in range(n):\n    if a[i]>k*i:\n        now=0\n        f=a[i]-k*i\n        for j in range(i):\n            if a[j]!=f+k*j:\n                now+=1\n        for j in range(i+1,n):\n            if a[j]!=f+j*k:\n                now+=1\n        if now<p:\n            p=now\n            first=f\nprint(p)\nfor i in range(n):\n    if a[i]!=first+k*i:\n        print('+' if a[i]<first+k*i else '-',i+1,abs(a[i]-first-k*i))", "n,k = list(map(int,input().split()))\na = [int(x) for x in input().split()]\na2 = [a[i]-k*i for i in range(n)]\n\nbs = set(a2)\nbestKey,maxCount = 1,0\nfor key in bs:\n    if key <= 0: continue\n    count = a2.count(key)\n    if count > maxCount:\n        bestKey = key\n        maxCount = count\nb = bestKey\n\nprint(n-maxCount)\nfor i in range(n):\n    if a[i] > i*k+b:\n        print('-',i+1,a[i]-(i*k+b))\n    elif a[i] < i*k+b:\n        print('+',i+1,i*k+b-a[i])\n\n", "import math\ndef main():\n    n,k = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    l2 = [l[i] - i*k for i in range(len(l))]\n    d = dict()\n    m = 0\n    mn = 0\n    for i in l2:\n        if i > 0:\n            try:\n                d[i] += 1\n            except:\n                d[i] = 1\n            if d[i] > m:\n                m = d[i]\n                mn = i\n    count = 0\n    ans = []\n    for i in range(len(l2)):\n        if l2[i] != mn:\n            ans += [('+' if l2[i] < mn else '-') + ' ' + str(i+1) + ' ' + str(abs(l2[i] - mn))]\n            count += 1\n    print(count)\n    for i in ans:\n        print(i)\n\ndef __starting_point(): main()\n\n__starting_point()", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ntmp = {}\nfor i in range(n):\n    x = a[i] - i * k\n    if x > 0:\n        tmp[x] = tmp.get(x, 0) + 1\nx = max(tmp, key = lambda x: tmp[x])\nprint(n - tmp[x])\nif tmp[x] == n:\n    return\nfor i in range(n):\n    if x + i * k > a[i]:\n        print('+', i + 1, x + i * k - a[i])\n    elif x + i * k < a[i]:\n        print('-', i + 1, a[i] - i * k - x)\n", "n, k = list(map(int,input().split(\" \")))\nts = list(map(int,input().split(\" \")))\n\naps = dict()\nfor i in range(n):\n  f = ts[i] - k*i\n  if f > 0:\n    aps[f] = aps.get(f,0) + 1\n\naf = max([i for i in list(aps.keys())], key=lambda x:aps[x])\n\nprint(len([1 for i in range(n) if ts[i] != af + k*i]))\n\ndef action(af, i, ts, k):\n  if ts[i] > af+k*i:\n    return \"- %i %i\" % (i+1, ts[i] - (af+k*i))\n  elif ts[i] < af+k*i:\n    return \"+ \" + str(i+1) + \" \" + str(af+(k*i) - ts[i])\n  else:\n    return None\n    \nacts = [action(af, i, ts, k) for i in range(n)]\nacts = [act for act in acts if act]\n\nprint(\"\\n\".join(acts))\n", "n, k = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\nupper_bound = 1\nbase_height = 1\nans = None\n\nfor i in range(len(a)):\n    upper_bound = max(upper_bound, a[i] - k * i)\n\nfor i in range(1, upper_bound + 1):\n    ans_candi = sum(1 for j in range(len(a)) if a[j] - i - k * j)\n    if ans == None or ans_candi < ans:\n        ans = ans_candi\n        base_height = i\n\nprint(ans)\nfor i in range(len(a)):\n    diff = a[i] - base_height - i * k\n    if diff:\n        print('{} {} {}'.format('-' if diff > 0 else '+', i + 1, abs(diff)))\n", "n, k = list(map(int, input().split()))\ntrees = list(map(int, input().split()))\ndeltas = [tree - i*k - 1 for i, tree in enumerate(trees)]\nfreqs = [0] * 1000\nfor delta in deltas:\n    if delta >= 0:\n        freqs[delta] += 1\nd = freqs.index(max(freqs))\nprint(sum(((delta != d) for delta in deltas)))\nfor i, delta in enumerate(deltas):\n    if delta > d:\n        print(\"- %d %d\" % (i+1, delta - d))\n    elif delta < d:\n        print(\"+ %d %d\" % (i+1, d - delta))\n\n", "def check_bounds(start):\n    return heights[start]-start*k >= 1\n\nn,k = list(map(int,input().split()))\nheights = list(map(int,input().split()))\nseq_start = -1\nlon_seq = [0]*n\nmax_len = 0\ncur_seq= [0]*n\ncur_len=0\nfor i,a in enumerate(heights):\n    cur_seq=[0]*n\n    cur_len=0\n    if check_bounds(i):\n        for j,b in enumerate(heights):\n            if b == a+(j-i)*k:\n                cur_seq[j]=1\n                cur_len+=1\n        if cur_len>max_len:\n            lon_seq=cur_seq\n            max_len=cur_len\n            seq_start=i\nprint(n-max_len)\nfor i,a in enumerate(heights):\n    if lon_seq[i] != 1:\n       diff=a-(heights[seq_start]+(i-seq_start)*k)\n       if diff>0:\n           print('{0} {1} {2}'.format('-',i+1,abs(diff)))\n       else:\n           print('{0} {1} {2}'.format('+',i+1,abs(diff)))\n\n", "n,k = list(map(int,input().split()))\na = list(map(int,input().split()))\nMAX=1000\ncost=n-1\nstart=a[0]\nfor h in range(1,MAX,1):\n    c=0\n    for i,height in enumerate(a):\n        c += int(h+i*k != height)\n    if c<cost:\n        cost=c\n        start=h\nprint(cost)\nfor i,height in enumerate(a):\n    desired_height = start+i*k\n    if desired_height != height:\n        diff = height - desired_height\n        if diff>0:\n            print('{0} {1} {2}'.format('-',i+1,abs(diff)))\n        else:\n            print('{0} {1} {2}'.format('+',i+1,abs(diff)))\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nn=len(a)\nans=0\ns=0\nfor i in range(1,1001):\n    cc=0\n    for j in range(0,n):\n        cc+=int(a[j]==i+j*k)\n    if cc>ans:\n        ans=cc\n        s=i\nprint(n-ans)\nto=s\nfor j in range(0,n):\n    if a[j]>to:\n        print('-',j+1,a[j]-to)\n    if a[j]<to:\n        print('+',j+1,-a[j]+to)\n    to+=k\n", "string=str(input())\nastring=str(input())+' '\n\nword=''\nalist=[]\nn=int(string[:string.index(' ')])\nk=int(string[string.index(' ')+1:])\n\nfor char in astring:\n    if char!=' ':\n        word+=char\n    else:\n        alist.append(int(word))\n        word=''\n\nminchange=n\nmina=1000\n\nfor a in range(1,1001):\n    blist=[x*k+a for x in range(0,n)]\n    change=0\n\n    for i in range(0,n):\n        if alist[i]!=blist[i]:\n            change+=1\n\n        if change>=minchange:\n            break\n\n    if change<minchange:\n        minchange=change\n        mina=a\n\nblist=[x*k+mina for x in range(0,n)]\nchangelist=[]\n\nfor i in range(0,n):\n        if alist[i]>blist[i]:\n            changelist.append('- '+str(i+1)+' '+str(alist[i]-blist[i]))\n        elif alist[i]<blist[i]:\n            changelist.append('+ '+str(i+1)+' '+str(blist[i]-alist[i]))\n\nprint(minchange)\n\nif minchange>0:\n    for change in changelist:\n        print(change)", "n,k = list(map(int,input().split()))\nalist = [int(x) for x in input().split()]\n\nminchange=n\nmina=1000\n\nfor a in range(1,1001):\n    blist=[x*k+a for x in range(0,n)]\n    change=0\n\n    for i in range(0,n):\n        if alist[i]!=blist[i]:\n            change+=1\n\n        if change>=minchange:\n            break\n\n    if change<minchange:\n        minchange=change\n        mina=a\n\nblist=[x*k+mina for x in range(0,n)]\nchangelist=[]\n\nfor i in range(0,n):\n        if alist[i]>blist[i]:\n            changelist.append('- '+str(i+1)+' '+str(alist[i]-blist[i]))\n        elif alist[i]<blist[i]:\n            changelist.append('+ '+str(i+1)+' '+str(blist[i]-alist[i]))\n\nprint(minchange)\n\nif minchange>0:\n    for change in changelist:\n        print(change)\n", "n, k = list(map(int, input().split()))\ntree = list(map(int, input().split()))\nmin_action = 1010\nfor i in range(1, 1001):\n    count=0\n    for j in range(0, n):\n        if tree[j] != i + j * k:\n            count+=1\n    if min_action > count:\n        min_action = count\n        ans = i\nprint(min_action)\nfor i in range(0, n):\n    if ans + i *k < tree[i]:\n        print('- %s %s' % (i+1, tree[i] - ans - i*k))\n    elif ans + i*k > tree[i]:\n        print('+ %s %s' % (i+1, ans + i*k - tree[i]))\n\n\n\n\n", "a = input()\na = a.split()\na = list(map(int,a))\nn = a[0]\nk = a[1]\nh = input()\nh = h.split()\nh = list(map(int,h))\nc = []\ndef make(h,x):\n    nonlocal k\n    r = list(range(x))\n    r.reverse()\n    counter = 0\n    #print(r)\n    for i in r:\n        if (h[i+1] - h[i] != k):\n            h[i] = h[i+1] - k\n            counter += 1\n    #print(list(range(x+1,n)))\n    for i in range(x+1,n):\n        if (h[i] - h[i-1] != k):\n            h[i] = h[i-1] + k\n            counter += 1\n    if (min(h) <= 0):\n        counter = 1000000\n    return counter\ndef myPrint(h,x):\n    nonlocal k\n    #print(h)\n    r = list(range(x))\n    r.reverse()\n    #print(r)\n    for i in r:\n        if (h[i+1] - h[i] != k):\n            if (h[i] < h[i+1] - k):\n                print('+',i+1,h[i+1] - k - h[i])\n            else:\n                print('-',i+1,-(h[i+1] - k - h[i]))\n            h[i] = h[i+1] - k\n    #print(list(range(x+1,n)))\n    for i in range(x+1,n):\n        if (h[i] - h[i-1] != k):\n            if (h[i] < h[i-1] + k):\n                print('+',i+1,h[i-1] + k - h[i])\n            else:\n                print('-',i+1,-(h[i-1] + k - h[i]))\n            h[i] = h[i-1] + k\n    return\nfor i in range(n):\n    c.append(make(h.copy(),i))\nm = c.index(min(c))\nprint(c[m])\nmyPrint(h,m)\n", "n,k=map(int,input().split())\n\nL=list(map(int,input().split()))\n\na=min(L)\nb=max(L)\nans=10**10\nF=[]\nfor s in range(1,1001):\n    x=0\n    E=[]\n    for i in range(n):\n        if(abs((s+i*k)-L[i])):\n            x+=1\n            E.append(i)\n    if(x<ans):\n        ans=x\n        F=list(E)+[s]\nprint(ans)\ns=F[-1]\n\nfor i in range(ans):\n    if(L[F[i]]<s+F[i]*k):\n        print(\"+\",end=\" \")\n    else:\n        print(\"-\",end=\" \")\n    print(F[i]+1,abs((L[F[i]])-(s+F[i]*k)))\n", "n,k=list(map(int,input().split()))\n\nz=[int(x) for x in input().split()]\nlim=max(z)\nctr=10000000\n\nminz=[]\nminz_num=[]#no. of moves for every element in z\nfor i in range (1,max(z)+1):\n    strt=i\n    moves=0\n    for j in range (0,len(z)):\n        if (z[j]!= strt+j*k):\n            moves+=1\n    minz.append(moves)\n    minz_num.append(strt)\n\n\n\nansf=min(minz)\na=minz_num[minz.index(ansf)]\n\nans=\"\"\nfor i in range (0,len(z)):\n    if (z[i] > a+ i*k):\n        ans+=\"-\"+\" \"+str(i+1)+\" \"+str(abs(z[i]-a-i*k))+\"\\n\"\n    if (z[i] < a+i*k):\n        ans+=\"+\"+\" \"+str(i+1)+\" \"+str(abs(z[i]-a-i*k))+\"\\n\"\n\nprint (ansf)\nprint (ans)\n        \n    \n", "n, k = map(int, input().split())\nt = list(map(int, input().split()))\np = [0] * 1001\nx = y = d = 0\nfor h in t:\n    s = h - d\n    if s > 0:\n        p[s] += 1\n        if p[s] > x: x, y = p[s], s\n    d += k\nd = 0\nfor i, h in enumerate(t):\n    t[i] = y - h + d\n    d += k\nt = ['- ' + str(i) + ' ' + str(-s) if s < 0 else '+ ' + str(i) + ' ' + str(s) for i, s in enumerate(t, 1) if s]\nprint(n - x)\nprint('\\n'.join(t))", "from itertools import groupby\nR = lambda:map(int, input().split())\nn, k = R()\na = list(R())\nb = sorted(a[i] - k * i for i in range(1, n))\nc = [(len(list(g[1])), g[0]) for g in groupby(b) if g[0] > 0]\nif len(c) > 0:\n  m = max(x for x, y in c)\n  c = [x for x in c if x[0] == m]\nelse:\n  c = [(0, a[0])]\nd = 0\nfor i in range(len(c)):\n  if c[i][1] == a[0]:\n    d = i\n    print(n - c[d][0] - 1)\n    break\nelse:\n  print(n - c[d][0])\nfor i in range(n):\n  ai = c[d][1] + k * i\n  if ai > a[i]:\n    print(\"+ {} {}\".format(i + 1, ai - a[i]))\n  elif ai < a[i]:\n    print(\"- {} {}\".format(i + 1, a[i] - ai))", "def main():\n    n, k = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n\n    d = {}\n    best, best_first = 0, -1\n    for i, v in enumerate(a):\n        good_first = v - k * i\n        if good_first >= 1:\n            if good_first not in d:\n                d[good_first] = 0\n            d[good_first] += 1\n            if d[good_first] > best:\n                best = d[good_first]\n                best_first = good_first\n    \n    print(n - best)\n    for i, v in enumerate(a):\n        diff = best_first - (v - k * i)\n        if diff > 0:\n            print('+', i + 1, diff)\n        elif diff < 0:\n            print('-', i + 1, -diff)\n        \nmain()\n", "n, k = list(map(int, input().split()))\ntrees = list(map(int, input().split()))\ndeltas = [tree-i*k-1 for i, tree in enumerate(trees)]\nfreqs = [0]*1000\n\nfor delta in deltas:\n    if delta >= 0:\n        freqs[delta] += 1\n\nd = freqs.index(max(freqs))\n\nprint(sum(((delta != d) for delta in deltas)))\nfor i, delta in enumerate(deltas):\n    if delta > d:\n        print('- %d %d' % (i+1, delta-d))\n    elif delta < d:\n        print('+ %d %d' % (i+1, d-delta))\n", "# 402B\n\nfrom sys import stdin\n\n__author__ = 'artyom'\n\n\ndef read_int_ary():\n  return map(int, stdin.readline().strip().split())\n\n\nn, k = read_int_ary()\na = list(read_int_ary())\nmx = i_mx = 0\nfor i in range(n):\n  if a[i] - k * i <= 0:\n    continue\n  sh = a[i] + k\n  count = 0\n  for j in range(i + 1, n):\n    if a[j] == sh:\n      count += 1\n    sh += k\n  if count > mx:\n    mx = count\n    i_mx = i\n\nprint(n - mx - 1)\nsh = a[i_mx] - k * i_mx\nfor i in range(n):\n  if a[i] < sh:\n    print('+ ' + str(i + 1) + ' ' + str(sh - a[i]))\n  elif a[i] > sh:\n    print('- ' + str(i + 1) + ' ' + str(a[i] - sh))\n  sh += k", "n, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = []\nfor i in range(n):\n    cur = 0\n    for j in range(n):\n        if j > i:\n            if a[j] == a[i] + (j-i) * k:\n                cur += 1\n        elif j < i:\n            if a[j] == a[i] - (i-j) * k:\n                cur += 1\n    b.append(cur)\n\nt, cur = -1, -1\nfor i in range(len(b)):\n    if (b[i] > cur) and (a[i] > k*i):\n        cur = b[i]\n        t = i\n\nres = []\nfor i in range(n):\n    c = - a[i] + ((i-t) * k + a[t])\n    if c != 0:\n        res.append([i + 1, c])\n\nprint(len(res))\nfor i, j in res:\n    if j < 0:\n        print('-', str(i), -j)\n    else:\n        print('+', str(i), j)\n", "def dist(A, B):\n    res = 0\n    for i in range(len(A)):\n        if(A[i] != B[i]):\n            res += 1\n    return res\n\ndef generate_new(number):\n    nonlocal n, k\n    R = [0] * n\n    for i in range(n):\n        R[i] = number \n        number += k\n    return R\n\nn, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\nN = 1009\nres = [0] * n\nres_dist = N\nfor i in range(1, N):\n    B = generate_new(i)\n    cur_dist = dist(A, B)\n    if(cur_dist < res_dist):\n        res = B\n        res_dist = cur_dist\nprint(res_dist)\nfor i in range(len(A)):\n    if(A[i] < res[i]):\n        print('+', i + 1, res[i] - A[i])\n    elif(A[i] > res[i]):\n        print('-', i + 1, A[i] - res[i])", "n, k = map(int, input().split())\nl = [int(x) for x in input().split()]\nl2 = [l[i] - k * i for i in range(n) if l[i] > k * i]\nsl = set(l2)\nbase, a = 1, 0\nfor x in sl:\n    cnt = l2.count(x)\n    if cnt > a:\n        base = x\n        a = cnt\nprint(n - a)\nfor i in range(n):\n    if l[i] < i * k + base:\n        print('+', i + 1, i * k + base - l[i])\n    elif l[i] > i * k + base:\n        print('-', i + 1, l[i] - (i * k + base))", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nn=len(a)\nans=0\ns=0\nfor i in range(1,1001):\n    cc=0\n    for j in range(0,n):\n        cc+=int(a[j]==i+j*k)\n    if cc>ans:\n        ans=cc\n        s=i\nprint(n-ans)\nto=s\nfor j in range(0,n):\n    if a[j]>to:\n        print('-',j+1,a[j]-to)\n    if a[j]<to:\n        print('+',j+1,-a[j]+to)\n    to+=k"]