["def pr( name , lvl , dp , u , tot ): \n    if lvl == 0:\n        print(name + ':' + tot[lvl])\n        return\n\n    pr( u[lvl][name] , lvl - 1 , dp , u , tot )\n    print(name + ':' + tot[lvl])\n\ndef solve(): \n    n = int(input())\n    users = input().split()\n    m = int(input())\n    dp = [] \n    u = []\n    tot = [] \n    for i in range( m ) : \n        dp.append( set() ) \n        u.append( {} ) \n        line = input().split(':')\n        sender = line[0]\n        tot.append( line[1] ) \n        line[1] = line[1].replace( '?' , ' ' )\n        line[1] = line[1].replace( '.' , ' ' )\n        line[1] = line[1].replace( ',' , ' ' )\n        line[1] = line[1].replace( '!' , ' ' )\n        mess = line[1].split()\n\n        if sender == '?' : \n            if i != 0:\n                for name in users:\n                    for x in dp[i-1]: \n                        if x != name and name not in mess:\n                            dp[i].add( name ) \n                            u[i][name] = x\n            else : \n                for name in users: \n                    if name not in mess:\n                        dp[i].add( name ) \n        else: \n            if i != 0: \n                for x in dp[i-1]: \n                    if x != sender: \n                        dp[i].add( sender ) \n                        u[i][sender] = x\n            else: \n                dp[i].add( sender )\n        \n        \n    if dp[m-1]: \n        pr( list(dp[m-1])[0] , m-1 , dp , u , tot )\n    else: \n        print(\"Impossible\")\n\n\nt = int(input())\nfor i in range( t ) : \n    solve()\n", "#!/usr/bin/env python3\n\nimport re\n\ndef cont(line, user):\n\treturn re.search('[^a-zA-Z0-9]' + user + '[^a-zA-Z0-9]', '_' + line + '_')\n\ntests = int(input())\nfor test in range(tests):\n\tinput()\n\tusers = input().rstrip('\\n').split(' ')\n\tlinecnt = int(input())\n\tlines = [input().rstrip('\\n') for _ in range(linecnt)]\n\tlines = [x.split(':', maxsplit=1) for x in lines]\n\tposs = [[]] * linecnt\n\tfor i, (user, line) in enumerate(lines):\n\t\tif user != '?':\n\t\t\tposs[i] = [user]\n\t\telse:\n\t\t\tposs[i] = [u for u in users if not cont(line, u)]\n\n\tel = list(enumerate(lines))\n\trel = list(reversed(el))\n\n\tchanged = False\n\twhile True:\n\t\tfor i, (user, line) in el:\n\t\t\tif i > 0 and len(poss[i-1]) == 1:\n\t\t\t\tif poss[i-1][0] in poss[i]:\n\t\t\t\t\tposs[i].remove(poss[i-1][0])\n\t\t\t\t\tchanged = True\n\t\tfor i, (user, line) in rel:\n\t\t\tif i < linecnt - 1 and len(poss[i+1]) == 1:\n\t\t\t\tif poss[i+1][0] in poss[i]:\n\t\t\t\t\tposs[i].remove(poss[i+1][0])\n\t\t\t\t\tchanged = True\n\t\tif not changed:\n\t\t\tbreak\n\t\tchanged = False\n\n\tif all(len(p) > 0 for p in poss):\n\t\tfor i, p, (user, line) in zip(list(range(linecnt)), poss, lines):\n\t\t\tif i > 0:\n\t\t\t\tif poss[i-1][0] in p:\n\t\t\t\t\tp.remove(poss[i-1][0])\n\t\t\tprint(p[0] + ':' + line)\n\telse:\n\t\tprint('Impossible')\n", "import re\nimport sys\n\n\ndef g(cts, names):\n  la = dict([(p, None) for p in names.difference(cts[0])])\n  if len(la) == 0:\n    return None\n  d = [la]\n  for i in range(1, len(cts)):\n    prev = d[-1]\n    la = dict()\n    for p in names.difference(cts[i]):\n      for n in prev.keys():\n        if n != p:\n          la[p] = n\n          break\n    if len(la) == 0:\n      return None\n    d.append(la)\n  cur = list(d[-1].keys())[0]\n  result = []\n  for i in range(len(cts) - 1, -1, -1):\n    result.append(cur)\n    cur = d[i][cur]\n  result.reverse()\n  return result\n\n\ndef solve():\n  n = int(input())\n  names = input().split()\n  set_names = set(names)\n\n  def get_names(text):\n    result = []\n    for p in re.split(\"\\W+\", text):\n      if p in set_names:\n        result.append(p)\n    return result\n\n  m = int(input())\n  messages = []\n  for i in range(m):\n    s = input()\n    colon = s.find(\":\")\n    name = s[:colon]\n    text = s[colon + 1:]\n    if name == \"?\":\n      name = None\n    messages.append([name, text, get_names(text)])\n\n  for i in range(m):\n    if messages[i][0]:\n      continue\n    j = i\n    cts = []\n    while j < m and not messages[j][0]:\n      cts.append(set(messages[j][2]))\n      j += 1\n    if i > 0:\n      cts[0].add(messages[i - 1][0])\n    if j < m:\n      cts[-1].add(messages[j][0])\n    sb = g(cts, set_names)\n    if not sb:\n      return None\n    for k in range(i, j):\n      messages[k][0] = sb[k - i]\n\n  for p in messages:\n    print(\"%s:%s\" % (p[0], p[1]))\n  return True;\n\n\ndef main():\n  tests = int(input())\n  for i in range(tests):\n    if not solve():\n      print(\"Impossible\")\n  return 0\n\ndef __starting_point():\n  return(main())\n__starting_point()", "def main():\n    n = int(input())\n    names = input().split()\n    m = int(input())\n    msg = [input().split(':') for _ in range(m)]\n    texts = []\n    for i in msg:\n        texts.append(i[1])\n        i[1] = i[1].replace(',', ' ').replace('.', ' ').replace('!', ' ').replace('?', ' ').split()\n        if i[0] == '?':\n            i.append([])\n            for name in names:\n                if name not in i[1]:\n                    i[2].append(name)\n            if len(i[2]) == 0:\n                print('Impossible')\n                return\n    go_on = True\n    while go_on:\n        go_on = False\n        for i in range(len(msg)):\n            if msg[i][0] != '?':\n                continue\n            if i - 1 > -1 and msg[i - 1][0] in msg[i][2]:\n                msg[i][2].remove(msg[i - 1][0])\n                go_on = True\n            if i + 1 < m and msg[i + 1][0] in msg[i][2]:\n                msg[i][2].remove(msg[i + 1][0])\n                go_on = True\n            if len(msg[i][2]) == 0:\n                print('Impossible')\n                return\n            if len(msg[i][2]) == 1:\n                msg[i][0] = msg[i][2][0]\n                del msg[i][2]\n                go_on = True\n    for i in range(len(msg)):\n        if msg[i][0] == '?':\n            msg[i][0] = msg[i][2][0]\n            if i < m - 1 and len(msg[i + 1]) == 3 and msg[i][0] in msg[i + 1][2]:\n                msg[i + 1][2].remove(msg[i][0])\n        print(msg[i][0], ':', texts[i], sep='')\n\nt = int(input())\n\nfor _ in range(t):\n    main()\n", "import sys\nimport re\n\ndef mentioned_usernames(line):\n    return {x for x in re.split(r'[^A-Za-z0-9]+', line)}\n\nt = int(input())\n\nfor ti in range(t):\n    possible_users = []\n    messages = []\n    n = int(input())\n    usernames = set(input().split())\n    # print(\"usernames =\", usernames, file=sys.stderr)\n    m = int(input())\n    for i in range(m):\n        user, text = input().split(':')\n        messages.append(text)\n        if user == '?':\n            mu = mentioned_usernames(text)\n            possible_users.append(usernames - mentioned_usernames(text))\n        else:\n            possible_users.append({user})\n\n    # print(possible_users, file=sys.stderr)\n\n    is_fixed = [False] * m\n    for i in range(m-1):\n        if len(possible_users[i]) == 1:\n            possible_users[i+1].difference_update(possible_users[i])\n            is_fixed = True\n    for i in range(m-1, 0, -1):\n        if len(possible_users[i]) == 1:\n            possible_users[i-1].difference_update(possible_users[i])\n            is_fixed = True\n\n    # print(possible_users, file=sys.stderr)\n\n    res = []\n    is_possible = True\n    prev_user = '$'\n    for i in range(m):\n        if possible_users[i]:\n            pusers = possible_users[i] - {prev_user}\n            resx = next(iter(pusers))\n            res.append(resx)\n            prev_user = resx\n        else:\n            is_possible = False\n            break\n\n    if is_possible:\n        for i in range(m):\n            print('{}:{}'.format(res[i], messages[i]))\n    else:\n        print(\"Impossible\")\n", "def dfs(ind):\n    if ind > 0:\n        if possible[ind][0] in possible[ind - 1]:\n            possible[ind - 1].remove(possible[ind][0])\n            if len(possible[ind - 1]) == 1:\n                dfs(ind - 1)\n    if ind < m - 1:\n        if possible[ind][0] in possible[ind + 1]:\n            possible[ind + 1].remove(possible[ind][0])\n            if len(possible[ind + 1]) == 1:\n                dfs(ind + 1)\ndef Check(st, ms):\n    for i in range(0, len(ms) - len(st) + 1):\n        if st == ms[i:i+len(st)]:\n            t = True\n            if i > 0:\n                if ms[i - 1] == ' ' or ms[i - 1] == '.' or ms[i - 1] == ',' or ms[i - 1] == '?' or ms[i - 1] == '!':\n                    e = 0\n                else:\n                    t = False\n            if i < len(ms) - len(st):\n                if (ms[i + len(st)] == ' ' or ms[i + len(st)] == '.' or ms[i + len(st)] == ',' or ms[i + len(st)] == '?' or ms[i + len(st)] == '!'):\n                    e = 0\n                else:\n                    t = False\n            if t:\n                return True\n    return False\nR = lambda:list(map(int, input().split(' ')))\n#r, w = open(\"input.txt\", \"r\"), open(\"output.txt\", \"w\")\nT = int(input())\nwhile T:\n    n = int(input())\n    users = input().split(' ')\n    m = int(input())\n    possible = [[] for i in range(m)]\n    sender, message = [], []\n    for i in range(m):\n        s = input().split(':')\n        sender.append(s[0])\n        message.append(s[1])\n    for i in range(m):\n        if sender[i] == '?':\n            unallow = \" \"\n            if i > 0 and len(possible[i - 1]) == 1:\n                unallow = possible[i - 1][0]\n            for j in users:\n                if j == unallow:\n                    continue\n                done = Check(j, message[i])\n                if not done:\n                    possible[i].append(j)\n        else:\n            possible[i].append(sender[i])\n    used = [0 for i in range(m)]\n    for i in range(m):\n        if len(possible[i]) == 1 and used[i] == 0:\n            dfs(i)\n    for i in range(m):\n        if len(possible[i]) > 1:\n            possible[i] = [possible[i][0]]\n            dfs(i)\n    done = False\n    for i in possible:\n        if len(i) == 0:\n            print(\"Impossible\")\n            done = True\n            break\n    if not done:\n        for i in range(m):\n            print(possible[i][0]+':'+message[i])\n    T -= 1\n\n\n    \n\n", "# Bartek Kostka\n#  You are not prepared!\n\nimport re\n\n\ndef go(i):\n    nonlocal counter\n    counter += 1\n    if counter > 2000:\n        return False\n    if i == len(E):\n        return True\n    if E[i][0] != \"?\":\n        prop = E[i][0]\n        if i == 0 or W[i-1] != prop:\n            W[i] = prop\n            return go(i+1)\n        else:\n            return False\n    for pos in E[i][1]:\n        if i == 0 or W[i-1] != pos:\n            W[i] = pos\n            if go(i+1):\n                return True\n    return False\n\n\nt = int(input())\nfor ttt in range(t):\n    n = int(input())\n    users = input().split(\" \")\n    users_set = set(users)\n    m = int(input())\n    E = []\n    S = []\n    counter = 0\n    W = [\"\" for x in range(m)]\n    for mmm in range(m):\n        line = input()\n        (user, sentence) = line.split(\":\")\n        S.append((user, sentence))\n        words = [x.strip() for x in re.split('\\W+', sentence)]\n        mentions = list([x for x in words if x in users_set])\n        E.append([user, set(mentions)])\n    for i in range(len(E)-1):\n        if E[i][0] != \"?\":\n            E[i+1][1].add(E[i][0])\n    for i in range(1, len(E)):\n        if E[i][0] != \"?\":\n            E[i-1][1].add(E[i][0])\n    for i in range(len(E)):\n        E[i][1] = E[i][1].symmetric_difference(users_set)\n    if go(0):\n        for i in range(len(E)):\n            print(str(W[i])+\":\"+str(S[i][1]))\n    else:\n        print(\"Impossible\")\n", "import re\nimport copy\n\nt = int(input())\n\nfor i in range(t):\n\tn = int(input())\n\tsenderList = []\n\tfor x in input().split():\n\t\tsenderList.append(x)\n\n\tm = int(input())\n\tmsg = [None] * m\n\tresSenders = [None] * m\n\tpossibleSenders = []\n\tfor i in range(m):\n\t\tpossibleSenders.append(copy.copy(senderList))\n\n\tfor i in range(m):\n\t\tline = input()\n\t\tblocks = re.findall(r\"[\\w]+\", line)\n\n\t\tfor x in blocks:\n\t\t\ttry:\n\t\t\t\tpossibleSenders[i].remove(x)\n\t\t\texcept:\n\t\t\t\tpass\n\n\t\tif line[0] != '?':\n\t\t\tresSenders[i] = blocks[0]\n\t\t\tif i > 0:\n\t\t\t\ttry:\n\t\t\t\t\tpossibleSenders[i-1].remove(resSenders[i])\n\t\t\t\texcept:\n\t\t\t\t\tpass\n\t\t\tif i+1 < m:\n\t\t\t\ttry:\n\t\t\t\t\tpossibleSenders[i+1].remove(resSenders[i])\n\t\t\t\texcept:\n\t\t\t\t\tpass\n\t\tmsg[i] = line[line.find(\":\")+1:]\n\n\tresolved = False\n\twhile True:\n\t\tdone = True\n\t\tjustPick = True\n\t\tfor i in range(m):\n\t\t\tif resSenders[i] != None:\n\t\t\t\tcontinue\n\t\t\tif len(possibleSenders[i]) == 0:\n\t\t\t\tdone = True\n\t\t\t\tresolved = True\n\t\t\t\tprint(\"Impossible\")\n\t\t\t\tbreak\n\t\t\tif len(possibleSenders[i]) == 1:\n\t\t\t\tresSenders[i] = possibleSenders[i][0]\n\t\t\t\tif i > 0:\n\t\t\t\t\ttry:\n\t\t\t\t\t\tpossibleSenders[i-1].remove(resSenders[i])\n\t\t\t\t\texcept:\n\t\t\t\t\t\tpass\n\t\t\t\tif i+1 < m:\n\t\t\t\t\ttry:\n\t\t\t\t\t\tpossibleSenders[i+1].remove(resSenders[i])\n\t\t\t\t\texcept:\n\t\t\t\t\t\tpass\n\t\t\t\tjustPick = False\n\t\t\telse:\n\t\t\t\tdone = False\n\t\tif done:\n\t\t\tbreak\n\t\tif justPick:\n\t\t\tfor i in range(m):\n\t\t\t\tif resSenders[i] == None:\n\t\t\t\t\tresSenders[i] = possibleSenders[i][0]\n\t\t\t\t\tif i+1 < m:\n\t\t\t\t\t\ttry:\n\t\t\t\t\t\t\tpossibleSenders[i+1].remove(resSenders[i])\n\t\t\t\t\t\texcept:\n\t\t\t\t\t\t\tpass\n\t\t\tbreak\n\n\tif not resolved:\n\t\tfor i in range(m):\n\t\t\tprint(resSenders[i] + \":\" + msg[i])", "import re\n\n\ndef foo():\n    n = int(input())\n    who = input().split()\n    m = int(input())\n    msg = []\n\n    l = []\n\n    for num in range(m):\n        a, t = input().split(':')\n        msg.append(t)\n\n        st = set()\n\n        if a != '?':\n            st.add(a)\n        else:\n\n            names = re.split('\\W+', t)\n\n            for w in who:\n                if not w in names:\n                    st.add(w)\n\n        l.append(st)\n\n    d2 = []\n\n    for num in range(1, m):\n        d = {}\n        for w1 in l[num]:\n            for w2 in l[num - 1]:\n                if w1 != w2:\n                    d[w1] = w2\n                    break\n\n        l[num] = [x for x in d]\n\n        d2.append(d)\n\n    curr = None\n\n    for w in l[m - 1]:\n        curr = w\n\n    res = [curr]\n\n    for num in list(reversed(list(range(1, m)))):\n        curr = d2[num - 1].get(curr, None)  # d2[num - 1][curr]\n        res.append(curr)\n\n    res = list(reversed(res))\n\n    if None in res:\n        print(\"Impossible\")\n    else:\n        for num in range(m):\n            print(res[num] + ':' + msg[num])\n\n\nt = int(input())\n\nfor _ in range(t):\n    foo()\n", "def main():\n    n = int(input())\n    names = input().split()\n    m = int(input())\n    msg = [input().split(':') for _ in range(m)]\n    texts = []\n    for i in msg:\n        texts.append(i[1])\n        i[1] = i[1].replace(',', ' ').replace('.', ' ').replace('!', ' ').replace('?', ' ').split()\n        if i[0] == '?':\n            i.append([])\n            for name in names:\n                if name not in i[1]:\n                    i[2].append(name)\n            if len(i[2]) == 0:\n                print('Impossible')\n                return\n    go_on = True\n    while go_on:\n        go_on = False\n        for i in range(len(msg)):\n            if msg[i][0] != '?':\n                continue\n            if i - 1 > -1 and msg[i - 1][0] in msg[i][2]:\n                msg[i][2].remove(msg[i - 1][0])\n                go_on = True\n            if i + 1 < m and msg[i + 1][0] in msg[i][2]:\n                msg[i][2].remove(msg[i + 1][0])\n                go_on = True\n            if len(msg[i][2]) == 0:\n                print('Impossible')\n                return\n            if len(msg[i][2]) == 1:\n                msg[i][0] = msg[i][2][0]\n                del msg[i][2]\n                go_on = True\n    for i in range(len(msg)):\n        if msg[i][0] == '?':\n            msg[i][0] = msg[i][2][0]\n            if i < m - 1 and len(msg[i + 1]) == 3 and msg[i][0] in msg[i + 1][2]:\n                msg[i + 1][2].remove(msg[i][0])\n        print(msg[i][0], ':', texts[i], sep='')\n\nt = int(input())\n\nfor _ in range(t):\n    main()", "import re\n\nt = int(input())\n\ndelimiters = \"?\", \".\", \" \", \",\", \"!\", \":\"\nregexPattern = '|'.join(map(re.escape, delimiters))\n\nfor i in range(t):\n  n = int(input())\n  usernames = {x for x in str.split(input(), ' ')}\n  m = int(input())\n  possibilities = []\n  for j in range(m):\n    possibilities.append({x for x in usernames})\n  messages = []\n  for j in range(m):\n    messages.append(input())\n\n  for j in range(m):\n    if (messages[j][0] != '?'):\n      messageSplit = re.split(':', messages[j])\n      possibilities[j] = {messageSplit[0]}\n    else:\n      messageSplit = re.split(regexPattern, messages[j])\n      for token in messageSplit:\n        if token in usernames:\n          possibilities[j] = possibilities[j] - {token}\n  changed = True\n  while changed:\n    changed = False\n    for j in range(m):\n      if len(possibilities[j]) == 1:\n        (poss,) = possibilities[j]\n        if j < m-1 and poss in possibilities[j+1]:\n          changed = True\n          possibilities[j+1] = possibilities[j+1] - possibilities[j]\n        if j > 0 and poss in possibilities[j-1]:\n          changed = True\n          possibilities[j-1] = possibilities[j-1] - possibilities[j]\n  worked = True\n  for j in range(m):\n    if len(possibilities[j]) == 0:\n      worked = False\n      \n  if not worked:\n    print(\"Impossible\")\n  else :\n    for j in range(m):\n      poss = next(iter(possibilities[j]))\n      if (messages[j][0] == '?'):\n        print(poss + messages[j][1:])\n      else:\n        print(messages[j])\n      if (j < m-1):\n        possibilities[j+1] = possibilities[j+1] - {poss}\n\n", "import re\n\ndef add_used(id, s, used):\n    used[id-1].add(s)\n    used[id].add(s)\n    used[id+1].add(s)\n\ntcase = int(input())\nfor cas in range(tcase):\n    n = int(input())\n    names = input().split()\n    m = int(input())\n    \n    res = True\n    ans = [''] * (m+1)\n    msg = [''] * (m+1)\n    used = [set() for i in range(m+1)]\n    \n    for i in range(m):\n        ans[i], msg[i] = input().split(':')\n        if ans[i] != '?':\n            add_used(i, ans[i], used)\n        \n        mentioned = re.split('\\W+', msg[i])\n        for s in mentioned:\n            if s in names:\n                used[i].add(s)\n    \n    for i in range(m):\n        if ans[i] == '?' and len(used[i]) == n-1:\n            ans[i] = list(set(names) - used[i])[0]\n            add_used(i, ans[i], used)\n    \n    for i in range(m):\n        if ans[i] == '?':\n            if len(used[i]) == n:\n                res = False\n            else:\n                ans[i] = list(set(names) - used[i])[0]\n                add_used(i, ans[i], used)\n    \n    for i in range(m-1):\n        if ans[i] == ans[i+1]:\n            res = False\n    \n    if res:\n        for i in range(m):\n            print(ans[i] + ':' + msg[i])\n    else:\n        print('Impossible')", "from sys import stdin\n\nt = int(stdin.readline())\n\ndef c(l,r,msg):\n    f = True\n    if l > 0 and not msg[l-1].isdigit() and not msg[l-1].isalpha():\n        pass\n    elif l == 0:\n        pass\n    else:\n        f = False\n\n    if r == len(msg) - 1:\n        pass\n    elif not msg[r+1].isdigit() and not msg[r+1].isalpha():\n        pass\n    else:\n        f = False\n\n    return f\n\n\ndef dd(i):\n    if i - 1 in no_author_set:\n        authors[i-1].discard(authors[i])\n        if len(authors[i-1]) == 1:\n            no_author_set.discard(i-1)\n            for d in authors[i-1]:\n                authors[i-1] = d\n                break\n            dd(i-1)\n        if len(authors[i-1]) == 0:\n            return False\n    if i + 1 in no_author_set:\n        authors[i+1].discard(authors[i])\n        if len(authors[i+1]) == 1:\n            no_author_set.discard(i+1)\n            for d in authors[i+1]:\n                authors[i+1] = d\n                break\n            dd(i+1)\n        if len(authors[i-1]) == 0:\n            return False\n    return True\n\ntry:\n    answers = []\n    for i in range(t):\n        ans = True\n        n = int(stdin.readline())\n        names = set(stdin.readline().strip().split())\n        m = int(stdin.readline())\n        authors = list()\n        messages = list()\n        no_author = list()\n        no_author_set = set()\n        for j in range(m):\n            line = stdin.readline().strip()\n            author, msg = line.split(':')\n            messages.append(msg)\n            if author == '?':\n                no_author.append(j)\n                no_author_set.add(j)\n                a_set = set()\n                for name in names:\n                    l = msg.find(name)\n                    while l != -1:\n                        if c(l,l+len(name)-1, msg):\n                            a_set.add(name)\n                        l = msg.find(name,l+len(name))\n                authors.append(names-a_set)\n                if j-1 not in no_author_set:\n                    authors[j].discard(authors[j-1])\n            else:\n                authors.append(author)\n                if j - 1 in no_author_set:\n                    authors[j-1].discard(author)\n\n        for j in no_author:\n            if j in no_author_set:\n                if len(authors[j]) == 1:\n                    no_author_set.discard(j)\n                    for d in authors[j]:\n                        authors[j] = d\n                        break\n                    if not dd(j):\n                        ans = False\n                elif len(authors[j]) == 0:\n                    ans = False\n\n        no_author = list()\n        for j in no_author_set:\n            no_author.append(j)\n        no_author.sort()\n        for i in no_author:\n            for d in authors[i]:\n                authors[i] = d\n                break\n            if i + 1 in no_author_set:\n                authors[i+1].discard(authors[i])\n        if not ans:\n            answers.append('Impossible')\n        else:\n            for j in range(m):\n                answers.append('%s:%s'%(authors[j],messages[j]))\nexcept Exception as e:\n    print(e)\n\nfor m in answers:\n    print(m)", "import re\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    names = set(input().split())\n    m = int(input())\n    dp = []\n    a = []\n    for i in range(m): a.append(input())\n    for i in range(m):\n        sender, msg = a[i].split(':')\n        ls = set([_f for _f in re.split('\\W+',msg) if _f])\n        dp.append((names if sender == '?' else set([sender])) - ls)\n        if i and len(dp[i-1]) == 1: dp[i] -= dp[i-1]\n        # print(dp[i]);\n    if any([len(p) == 0 for p in dp]): print(\"Impossible\")\n    else:\n        res = []\n        for i in reversed(list(range(m))):\n            res.append(dp[i].pop())\n            if i > 0: dp[i-1].discard(res[-1])\n        for i in range(m): \n            sender, msg = a[i].split(':')\n            sender = res[m-i-1]\n            print(sender+':'+msg)\n", "import re\n\nt = int( input() )\nfor z in range(t):\n\tn = int( input() )\n\tusers = input().split();\n\t#print(users)\n\tm = int( input() )\n\tcan = [ [] for i in range(m) ]\n\tok = True\n\tL = []\n\tfor i in range(m):\n\t\tl = input().split(':')\n\t\t#print(l)\n\t\tL += [l]\n\t\tif l[0] != '?':\n\t\t\tcan[i] = [users.index(l[0])]\n\t\telse:\n\t\t\tcan[i] = [x for x in range(n)]\n\t\tll = re.sub(r'[^A-Za-z0-9]', ' ', l[1]).split()\n\t\tfor j in ll:\n\t\t\t#print(j)\n\t\t\tif j in users:\n\t\t\t\ttry:\n\t\t\t\t\tcan[i].remove( users.index(j) )\n\t\t\t\texcept ValueError:\n\t\t\t\t\tpass\n\t\tif len(can[i]) == 0:\n\t\t\tok = False\n\tif ok == False:\n\t\tprint('Impossible')\n\t\tcontinue\n\twhile 1:\n\t\tflag = True\n\t\tfor i in range(m - 1):\n\t\t\tif (len(can[i]) == 0): ok = False\n\t\t\tif (len(can[i]) == 1 and can[i][0] in can[i+1]):\n\t\t\t\tcan[i+1].remove( can[i][0] )\n\t\t\t\tL[i][0] = users[ can[i][0] ]\n\t\t\t\tflag = False\n\t\t\tif (len(can[i + 1]) == 1 and can[i + 1][0] in can[i]):\n\t\t\t\tcan[i].remove( can[i + 1][0] )\n\t\t\t\tL[i + 1][0] = users[ can[i + 1][0] ]\n\t\t\t\tflag = False\n\t\tif len(can[m - 1]) == 0: ok = False\n\t\tif ok == False: break\n\t\tif flag: break\n\tif ok == False:\n\t\tprint('Impossible')\n\t\tcontinue\n\tfor i in range(m):\n\t\tif L[i][0] == '?':\n\t\t\tprint(users[ can[i][0] ], end='')\n\t\t\tif i < m - 1 and can[i][0] in can[i + 1]:\n\t\t\t\tcan[i + 1].remove( can[i][0] )\n\t\telse:\n\t\t\tprint(L[i][0], end='')\n\t\tprint(':', L[i][1], sep = '');\n", "3\n\nimport re\n\nt = int(input())\n\nfor ti in range(t):\n    n = int(input())\n    users = set(input().split(' '))\n\n    m = int(input())\n    messages = []\n\n    guessed = [None for i in range(m)]\n    denied = [set() for i in range(m)]\n\n    for i in range(m):\n        mg = input()\n        if not mg.startswith('?:'):\n            guessed[i] = mg[:mg.find(':')]\n\n        mg = mg[mg.find(':'):]\n        messages.append(mg)\n\n        m2 = mg + ' '\n        for u in users:\n            if re.search('[^a-zA-Z0-9]' + u + '[^a-zA-Z0-9]', m2):\n                denied[i].add(u)\n\n    answer = True\n\n    for i in range(m):\n        if guessed[i]:\n            if i > 0: denied[i-1].add(guessed[i])\n            if i < m-1: denied[i+1].add(guessed[i])\n\n    for i in range(m):\n        if guessed[i] in denied[i]:\n            answer = False\n\n    #print(guessed)\n    #print(denied)\n\n    changed = True\n    while changed and answer:\n        changed = False\n        for i in range(m):\n            if not guessed[i]:\n                if len(users) - len(denied[i]) == 1:\n                    changed = True\n                    guessed[i] = (users - denied[i]).pop()\n                    if i > 0: denied[i-1].add(guessed[i])\n                    if i < m-1: denied[i+1].add(guessed[i])\n                if len(users) == len(denied[i]):\n                    answer = False\n                    break\n\n    for i in range(m):\n        if not guessed[i] and len(users) - len(denied[i]) >= 1:\n            guessed[i] = (users - denied[i]).pop()\n            if i < m-1: denied[i+1].add(guessed[i])\n\n\n    for i in guessed:\n        if not i:\n            answer = False\n\n    if not answer:\n        print(\"Impossible\")\n    else:\n        for i in range(m):\n            print(guessed[i] + messages[i])\n    \n", "import sys\nimport re\n\ndef mentioned_usernames(line):\n    return {x for x in re.split(r'[^A-Za-z0-9]+', line)}\n\nt = int(input())\n\nfor ti in range(t):\n    possible_users = []\n    messages = []\n    n = int(input())\n    usernames = set(input().split())\n    # print(\"usernames =\", usernames, file=sys.stderr)\n    m = int(input())\n    for i in range(m):\n        user, text = input().split(':')\n        messages.append(text)\n        if user == '?':\n            mu = mentioned_usernames(text)\n            possible_users.append(usernames - mentioned_usernames(text))\n        else:\n            possible_users.append({user})\n\n    # print(possible_users, file=sys.stderr)\n\n    is_fixed = [False] * m\n    for i in range(m-1):\n        if len(possible_users[i]) == 1:\n            possible_users[i+1].difference_update(possible_users[i])\n            is_fixed = True\n    for i in range(m-1, 0, -1):\n        if len(possible_users[i]) == 1:\n            possible_users[i-1].difference_update(possible_users[i])\n            is_fixed = True\n\n    # print(possible_users, file=sys.stderr)\n\n    res = []\n    is_possible = True\n    prev_user = '$'\n    for i in range(m):\n        if possible_users[i]:\n            pusers = possible_users[i] - {prev_user}\n            resx = next(iter(pusers))\n            res.append(resx)\n            prev_user = resx\n        else:\n            is_possible = False\n            break\n\n    if is_possible:\n        for i in range(m):\n            print('{}:{}'.format(res[i], messages[i]))\n    else:\n        print(\"Impossible\")\n", "import sys\nimport re\n\ndef mentioned_usernames(line):\n    return {x for x in re.split(r'[^A-Za-z0-9]+', line)}\n\nt = int(input())\n\nfor ti in range(t):\n    possible_users = []\n    messages = []\n    n = int(input())\n    usernames = set(input().split())\n    # print(\"usernames =\", usernames, file=sys.stderr)\n    m = int(input())\n    for i in range(m):\n        user, text = input().split(':')\n        messages.append(text)\n        if user == '?':\n            mu = mentioned_usernames(text)\n            possible_users.append(usernames - mentioned_usernames(text))\n        else:\n            possible_users.append({user})\n\n    # print(possible_users, file=sys.stderr)\n\n    for i in range(m-1):\n        if len(possible_users[i]) == 1:\n            possible_users[i+1].difference_update(possible_users[i])\n    for i in range(m-1, 0, -1):\n        if len(possible_users[i]) == 1:\n            possible_users[i-1].difference_update(possible_users[i])\n\n    # print(possible_users, file=sys.stderr)\n\n    res = []\n    is_possible = True\n    prev_user = '$'\n    for i in range(m):\n        if possible_users[i]:\n            pusers = possible_users[i] - {prev_user}\n            resx = next(iter(pusers))\n            res.append(resx)\n            prev_user = resx\n        else:\n            is_possible = False\n            break\n\n    if is_possible:\n        for i in range(m):\n            print('{}:{}'.format(res[i], messages[i]))\n    else:\n        print(\"Impossible\")\n", "3\n\n# BEGIN template\nimport sys\nimport re\nimport pprint\n\ndef dbg(x,y=''):\n  if len(y) > 0: y += ' = '\n  sys.stderr.write('\\n>>> '+y+pprint.pformat(x)+'\\n')\n\noo = 0x3f3f3f3f3f3f3f3f\n# END template\n\ndef main():\n  t = int(input())\n  for t in range(t):\n    # input\n    n = int(input())\n    users = set(input().split())\n    m = int(input())\n    msg = []\n    for i in range(m):\n      user, text = input().split(':')\n      alts = set()\n      if user != '?':\n        alts.add(user)\n      else:\n        # this shit is pretty fucked up, dude\n        alts = users - {x for x in re.split(r'[^A-Za-z0-9]+',text)}\n      msg.append(dict(user=user, text=text, users=alts))\n    # remove before and after\n    for i in range(m-1):\n      if len(msg[i]['users']) == 1:\n        msg[i+1]['users'].difference_update(msg[i]['users'])\n    for i in range(m-1,0,-1):\n      if len(msg[i]['users']) == 1:\n        msg[i-1]['users'].difference_update(msg[i]['users'])\n    # compute answer\n    last = ''\n    impo = False\n    for i in range(m):\n      msg[i]['users'].discard(last)\n      if len(msg[i]['users']) == 0:\n        impo = True\n        break\n      last = next(iter(msg[i]['users']))\n      msg[i]['user'] = last\n    if impo:\n      print('Impossible')\n      continue\n    for i in range(m):\n      print(msg[i]['user']+':'+msg[i]['text'])\n    '''\n    dp = [[0 for j in range(n+5)] for i in range(m+5)]\n    for i in range(1,n+5):\n      dp[m+1][i] = oo\n    for i in range(m,0,-1):\n      for j in range(n+1):\n        for k in msg[i]['users']:\n          if k != j and dp[i+1][k]:\n            dp[i][j] = k\n            break\n    # output\n    if not dp[1][0]:\n      print('Impossible')\n      continue\n    j = 0\n    for i in range(1,m+1):\n      print(users[dp[i][j]]+':'+msg[i]['text'])\n      j = dp[i][j]'''\n\nmain()\n", "3\n\n# BEGIN template\nimport sys\nimport re\nimport pprint\n\ndef dbg(x,y=''):\n  if len(y) > 0: y += ' = '\n  sys.stderr.write('\\n>>> '+y+pprint.pformat(x)+'\\n')\n\noo = 0x3f3f3f3f3f3f3f3f\n# END template\n\ndef main():\n  for t in range(int(input())):\n    impo = False\n    # input\n    n = int(input())\n    users = input().split()\n    users_set = set(users)\n    users.insert(0,'0')\n    m = int(input())\n    msg = [None]*(m+5)\n    for i in range(1,m+1):\n      user, text = input().split(':')\n      alts = set()\n      if user != '?': user = users.index(user)\n      else:\n        # this shit is pretty fucked up, dude\n        for alt in users_set - {x for x in re.split(r'[^A-Za-z0-9]+',text)}:\n          alts.add(users.index(alt))\n      msg[i] = dict(user=user, text=text, users=alts)\n    # remove before and after\n    for i in range(1,m+1):\n      if 1 <= i-1:  msg[i]['users'].discard(msg[i-1]['user'])\n      if i+1 <= m:  msg[i]['users'].discard(msg[i+1]['user'])\n      if msg[i]['user'] == '?' and len(msg[i]['users']) == 0:\n        impo = True\n        break\n    if impo:\n      print('Impossible')\n      continue\n    # compute answer\n    dp = [[0 for j in range(n+5)] for i in range(m+5)]\n    for i in range(n+5):\n      dp[m+1][i] = oo\n    for i in range(m,0,-1):\n      u = msg[i]['user']\n      for j in range(n+1):\n        if u != '?':\n          if u != j and dp[i+1][u]: dp[i][j] = u\n        else:\n          for alt in msg[i]['users']:\n            if alt != j and dp[i+1][alt]:\n              dp[i][j] = alt\n              break\n    # output\n    if not dp[1][0]:\n      print('Impossible')\n      continue\n    j = 0\n    for i in range(1,m+1):\n      print(users[dp[i][j]]+':'+msg[i]['text'])\n      j = dp[i][j]\n\nmain()\n", "3\n\n# BEGIN template\nimport sys\nimport re\nimport pprint\n\ndef dbg(x,y=''):\n  if len(y) > 0: y += ' = '\n  sys.stderr.write('\\n>>> '+y+pprint.pformat(x)+'\\n')\n\noo = 0x3f3f3f3f3f3f3f3f\n# END template\n\ndef main():\n  for t in range(int(input())):\n    # input\n    n = int(input())\n    users = input().split()\n    users_set = set(users)\n    users.insert(0,'0')\n    m = int(input())\n    msg = [None]*(m+5)\n    for i in range(1,m+1):\n      user, text = input().split(':')\n      alts = set()\n      if user != '?':\n        user = users.index(user)\n        alts.add(user)\n      else:\n        # this shit is pretty fucked up, dude\n        for alt in users_set - {x for x in re.split('[^A-Za-z0-9]+',text)}:\n          alts.add(users.index(alt))\n      msg[i] = dict(user=user, text=text, users=alts)\n    # remove before and after\n    for i in range(1,m+1):\n      if 1 <= i-1:  msg[i]['users'].discard(msg[i-1]['user'])\n      if i+1 <= m:  msg[i]['users'].discard(msg[i+1]['user'])\n    # compute answer\n    dp = [[0 for j in range(n+5)] for i in range(m+5)]\n    for i in range(n+5):\n      dp[m+1][i] = oo\n    for i in range(m,0,-1):\n      for j in range(n+1):\n        for k in msg[i]['users']:\n          if k != j and dp[i+1][k]:\n            dp[i][j] = k\n            break\n    # output\n    if not dp[1][0]:\n      print('Impossible')\n      continue\n    j = 0\n    for i in range(1,m+1):\n      print(users[dp[i][j]]+':'+msg[i]['text'])\n      j = dp[i][j]\n\nmain()\n"]