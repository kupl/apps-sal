["n = int(input())\nans = 0\nans = ans + (n * (n-1) * (n-2) * (n-3) * (n-4)) // (2*3*4*5)\nans = ans + (n * (n-1) * (n-2) * (n-3) * (n-4) * (n-5)) // (2*3*4*5*6)\nans = ans + (n * (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6)) // (2*3*4*5*6*7)\nprint(ans)", "from math import factorial\nn = int(input())\na = n * (n - 1) * (n - 2) * (n - 3) * (n - 4)\nans = a // factorial(5)\na *= (n - 5)\nans += a // factorial(6)\na *= (n - 6)\nans += a // factorial(7)\nprint(ans)\n", "n = int(input())\n\nret = 0\nways = 1\nfor i in range(1, 8):\n    ways = ways * (n - i + 1) // i\n    if i >= 5:\n        ret += ways\n        \nprint(ret)", "import sys\ndef fact(n):\n\tret = 1\n\tfor x in range(1, n + 1):\n\t\tret = ret * x\n\treturn ret\n\ndef C(n, k):\n\treturn fact(n) // (fact(k) * (fact(n - k)))\nn = int(input())\nprint(C(n, 7) + C(n, 6) + C(n, 5))", "from functools import reduce\nfrom math import factorial\nn = int(input())\nC_n_k = lambda n, k: reduce(lambda x, y: x*y, list(range(n, n-k, -1))) // factorial(k)\nprint(C_n_k(n, 7) + C_n_k(n, 6) + C_n_k(n, 5))\n", "n = int(input())\nans1 = n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // 5040;\nans2 = n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) // 720;\nans3 = n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 120;\nprint(ans1 + ans2 + ans3)\n", "from math import factorial as f\nn = int(input())\nres = 0\nfor i in range(5, 8):\n    res += f(n) // (f(n - i) * f(i))\nprint(res)", "import re, sys, string, operator, functools, fractions, collections\nsys.setrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda x=' ': list(map(int,input().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\nmod=int(1e9+7)\neps=1e-6\n#################################################\nn=RI()[0]\nv=n*(n-1)*(n-2)*(n-3)*(n-4)\nv1=v//120\nv2=(v1*(n-5))//6\nv3=(v2*(n-6))//7\nprint(v1+v2+v3)\n\n\n\n\n\n", "def fact(i):\n  ans = 1\n  for j in range(1, i + 1):\n    ans *= j\n  return ans\n\ndef c(i, j):\n  return fact(i) // (fact(j) * fact(i - j))\n\nn = int(input())\nprint(c(n, 5) + c(n, 7) + c(n, 6))", "def cnk(n, k):\n    return f[n] // f[n - k] // f[k]\n\nn = int(input())\n\nf = [0 for i in range(n + 1)]\nf[0] = 1\nfor i in range(1, n + 1):\n    f[i] = f[i - 1] * i\nans = 0\nfor i in range(5, 8):\n    if (i <= n):\n        ans += cnk(n, i)\nprint(ans)", "from math import factorial as f\n\nx = int(input())\n#x, y = map(int, input().split())\n\nprint(f(x)//f(5)//f(x-5) + f(x)//f(6)//f(x-6) + f(x)//f(7)//f(x-7))", "x = int(input())\na = ((1 * x * (x - 1) * (x - 2) * (x - 3) * (x - 4)) *(42 + 7 * (x - 5) + 1 * (x - 5) * (x - 6)) // (7 * 6 * 5 * 4 * 3 * 2))\nprint(a)", "def fact(n):\n    return 1 if n == 0 else (n * fact(n - 1))\n\ndef c(n, k):\n    return fact(n) // (fact(k) * (fact(n - k)))\n\nn = int(input())\n\nprint(c(n, 5) + c(n, 6) + c(n, 7))\n", "def C(n,m):\n    a = 1\n    b = 1\n    for i in range(1,m+1):\n        a *= n+1-i\n        b *= i\n    return a//b\n\ndef __starting_point():\n\n    n = int(input())\n\n    print(C(n,5)+C(n,6)+C(n,7))\n__starting_point()", "from math import factorial\n\ndef C(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nn = int(input())\nprint(C(n, 5) + C(n, 6) + C(n, 7))\n", "n = int(input())\nprint (n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 120 + n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) // 720 + n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // 5040)", "from math import factorial\n\ndef nCr(n,r):\n    f = factorial\n    return f(n) // f(r) // f(n-r)\n\nn = int(input())\nans = nCr(n, 7) + nCr(n, 6) + nCr(n, 5)\nprint(ans)", "import math\nn = int(input())\na = int(math.factorial(n)/(math.factorial(5)*math.factorial(n - 5)))\nb = int(math.factorial(n)/(math.factorial(6)*math.factorial(n - 6)))\nc = int(math.factorial(n)/(math.factorial(7)*math.factorial(n - 7)))\nprint(int(a + b + c))\n", "n = int(input())\nans = n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // (120 * 6 * 7)\nans += n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) // (120 * 6)\nans += n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 120\nprint(ans)", "from math import factorial\n\nn = int(input())\nans = 0\ncur = 1\nfor i in range(7):\n    cur *= n - i\nans += cur // factorial(7)\ncur = 1\nfor i in range(6):\n    cur *= n - i\nans += cur // factorial(6)\ncur = 1\nfor i in range(5):\n    cur *= n - i\nans += cur // factorial(5)\nprint(ans)\n", "import sys\n\ndef c5(n):\n    return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 2 // 3 // 4 // 5\n\ndef c6(n):\n    return c5(n) * (n - 5) // 6\n\ndef c7(n):\n    return c6(n) * (n - 6) // 7\n\nn = int(input())\n\nprint(c5(n) + c6(n) + c7(n))", "def fact(a):\n    ans = 1\n    for i in range(2, a + 1):\n        ans *= i\n    return ans\n\nn = int(input())\nans = 0\nfor i in range(5, 8):\n    ans += fact(n) // fact(i) // fact(n - i)\nprint(ans)", "def main():\n    n = int(input())\n    A = n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // (5*4*3*2*1)\n    B = n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) // (6*5*4*3*2*1)\n    C = n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // (7*6*5*4*3*2*1)\n    print(A + B + C)\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nn = int(input())\ns = 0\nfor i in range(5, 8):\n    s += (math.factorial(n)//(math.factorial(n-i)*math.factorial(i)))\nprint(s)\n", "n = int(input())\nans = 0\nt = 7\nw = n\ntemp = 1\nwhile (t>0):\n\ttemp *= w\n\tw-=1\n\tt-=1\nans = temp//5040\nt = 6\nw = n\ntemp = 1\nwhile (t>0):\n\ttemp *= w\n\tw-=1\n\tt-=1\nans += temp//720\nt = 5\nw = n\ntemp = 1\nwhile (t>0):\n\ttemp *= w\n\tw-=1\n\tt-=1\nans += temp//120\nprint (ans)\n"]