["n, x = list(map(int, input().split()))\nar = list(map(int, input().split()))\n\ncnt = {}\nans = 0\nfor val in ar:\n\tcur = val ^ x\n\t\n\tif cur in cnt:\n\t\tans += cnt[cur]\n\t\n\tif val in cnt:\n\t\tcnt[val] += 1\n\telse:\n\t\tcnt[val] = 1\n\nprint(ans)\n\n", "N = 10 ** 5 + 1\nn, x = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = [0] * N\nfor a in A:\n    B[a] += 1\n\nres = 0\nfor i in range(N):\n    if i^x < N:\n        res += B[i] * B[i^x]\n\nprint((res - n) // 2 if x == 0 else res // 2)\n", "n, x = list(map(int, input().split()))\na = list(map(int, input().split()))\nM = max(a) + 1\ncnt = [0 for _ in range(M)]\nfor num in a:\n    cnt[num] += 1\nres = 0\nfor num in range(1, M):\n    if cnt[num] > 0:\n        s = num^x\n        if M > s >= num:\n            res += cnt[s]*cnt[num] if s != num else (cnt[s] - 1)*cnt[s]//2\nprint(res)\n", "n , x = map(int,input().split())\nA= list(map(int,input().split()))\nd = dict()\nfor j in range(n):\n    if A[j] in d:\n        d[A[j]] += 1\n    else:\n        d[A[j]] = 1\nans = 0\nfor j in range(n):\n    per = x ^ A[j]\n    if A[j] != per:\n        if per in d:\n            ans += d[per]\n    else:\n        if per in d:\n            ans += d[per]-1\nprint(ans//2)", "n, x = list(map(int, input().split()))\narr = list(map(int, input().split()))\ndict = {}\nfor v in arr:\n  if v in dict:\n    dict[v] += 1\n  else:  \n    dict[v] = 1\n\nif x:\n  res = 0\n  for v in list(dict.keys()):\n    if (v ^ x) in dict and (v ^ x) > v: \n      res += dict[v] * dict[v ^ x]\n  print(res)  \nelse:\n  print(sum([x*(x-1)//2 for x in list(dict.values())]))\n", "n, x = map(int, input().split())\ncnt = [0 for i in range(100010)]\narr = list(map(int, input().split()))\nfor num in arr:\n    cnt[num] += 1\nans = 0\nfor num in arr:\n    xor_num = x ^ num\n    if xor_num > 100000:\n        continue\n    cnt[num] -= 1\n    if cnt[xor_num] > 0:\n        ans += cnt[xor_num]\nprint(ans)", "n, x = map(int , input().split())\nd = dict()\na = [int(x) for x in input().split()]\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\nk = 0\nfor i in a:\n    c = d.get(i ^ x,  0)\n    if i == i ^ x:\n        k += (c - 1) / 2\n    else:\n        k += c / 2\nprint(int(k))", "n, x = list(map(int, input().split()))\nA = list(map(int, input().split()))\nd1 = {}\nfor a in A:\n    if a in d1:\n        d1[a] += 1\n    else:\n        d1[a] = 1\n\nkeys = list(d1.keys())\nkeys.sort()\nans = 0\nfor k in keys:\n    b = k ^ x\n    if b > k:\n        if b in d1:\n            ans += d1[b] * d1[k]\n    elif b == k:\n        ans += d1[b] * (d1[b] - 1) // 2\n\nprint(ans)\n", "temp=input().split()\nn=int(temp[0])\nx=int(temp[1])\ntemp=input().split()\na=[int(k) for k in temp]\n\nc=[0 for i in range(10**5+1)]\n\nfor i in range(n):\n\tc[a[i]]+=1\n\nans=0\nfor i in range(n):\n\tif a[i]^x<=10**5:\n\t\tans+=c[a[i]^x]\n\nif x==0:\n\tans-=n\n\nans=int(ans/2)\n\nprint(ans)", "n, x = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nd = dict()\nfor i in range(len(a)):\n    d[a[i]] = d.get(a[i], 0) + 1\nres = 0\n\ndef search(num):\n    l = -1\n    r = len(a) \n    while r - l > 1:\n        m = (l + r) // 2\n        if a[m] > k:\n            r = m\n        else:\n            l = m\n    return l\n\n\nfor i in range(len(a)):\n    k = a[i] ^ x\n    tr = search(k)\n    if tr > -1 and tr < len(a) and a[tr] == k:\n        res += d[a[tr]]\n        if a[i] == k:\n            res-= 1\n    \n   \n        \nprint(res // 2)", "n, x=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\n\nax=[i^x for i in a]\na.sort()\nax.sort()\npos=0\nposx=0\nc=1\ncx=1\ntotal=0\nwhile pos<n and posx<n:\n\tif a[pos]==ax[posx]:\n\t\tif pos<n-1 and a[pos+1]==a[pos]:\n\t\t\tpos+=1\n\t\t\tc+=1\n\t\telif posx<n-1 and ax[posx+1]==ax[posx]:\n\t\t\tposx+=1\n\t\t\tcx+=1\n\t\telse:\n\t\t\t#print(c, cx, pos, posx)\n\t\t\ttotal+=c*cx\n\t\t\tc=1\n\t\t\tcx=1\n\t\t\tpos+=1\n\t\t\tposx+=1\n\telif a[pos]>ax[posx]:\n\t\tposx+=1\n\telse:\n\t\tpos+=1\n#print(total, a, ax)\nif x>0:\n\tprint(total//2)\nelse:\n\tprint((total-n)//2)\n\n\n", "\ndef __starting_point():\n\tn, x = map(int, input().split())\n\ta = list(map(int, input().split()))\n\tfreq = {}\n\tfor v in a:\n\t\tfreq[v] = freq.get(v, 0) + 1\n\tres = 0\n\tcfreq = {}\n\tfor v in a:\n\t\ty = v ^ x\n\t\t#t = freq[v] - cfreq.get(v, 0)\n\t\tcfreq[v] = cfreq.get(v, 0) + 1\n\t\tif y in freq:\n\t\t\tres += freq[y]-cfreq.get(y, 0)\n\tprint(res)\n__starting_point()", "n,x=list(map(int,input().split()))\nip=list(map(int,input().split()))\ncount=0\ncounts=[0 for i in range(100001)]\nfor i in ip:\n    counts[i]+=1\nfor i in range(n):\n    b=x^ip[i]\n    counts[ip[i]]-=1\n    try:\n        count+=counts[b]\n    except:\n        b=1\nprint(count)\n", "#!/usr/bin/env python3\n\ndef main():\n    from collections import Counter\n\n    try:\n        while True:\n            n, trg = list(map(int, input().split()))\n            a = list(map(int, input().split()))\n            c = Counter(a)\n            result = 0\n            for x in a:\n                result += c[trg ^ x]\n            if trg == 0:\n                result -= n\n            print(result >> 1)\n\n    except EOFError:\n        pass\n\nmain()\n", "'''input\n6 1\n5 1 2 3 4 1\n'''\n\ndef rints():\n    return list(map(int, input().split()))\n\ndef ri():\n    return int(input())\n\nMAX_A = 10**5\n\nn, x = rints()\narr = rints()\n\nseen = [0] * (MAX_A + 1)\ncount = 0\n\nfor elem in arr:\n    partner = x ^ elem\n    if partner <= MAX_A:\n        count += seen[partner]\n    seen[elem] += 1\n\nprint(count)\n", "n, x = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = {}\ns = set(a)\nfor i in a:\n    d[i] = 0\nfor i in a:\n    d[i] += 1\nans = 0\nfor i in s:\n    if x == 0:\n        ans += (d[i] * (d[i] - 1) // 2)\n    else:\n        ans += d[i] * d.get(i ^ x, 0)\nif x == 0:\n    print(ans)\nelse:\n    print(ans // 2)\n", "n,x=map(int,input().split())\nar=list(map(int,input().split()))\nst={}\nsoln=0\nfor el in ar:\n\tif (el^x) in st:\n\t\tsoln+=st[el^x]\n\tif(el in st):\n\t\tst[el]+=1\n\telse:\n\t\tst[el]=1\nprint (soln)", "read = lambda: list(map(int, input().split()))\nfrom collections import Counter\nn, x = read()\na = list(read())\nc = Counter()\nfor i in a: c[i] += 1\ncnt = 0\nfor i in a: cnt += c[i ^ x] - (x == 0)\ncnt //= 2\nprint(cnt)\n", "read = lambda: list(map(int, input().split()))\nfrom collections import Counter\nn, x = read()\na = list(read())\nc = Counter()\nfor i in a: c[i] += 1\ncnt = 0\nfor i in a: cnt += c[i ^ x] - (x == 0)\ncnt //= 2\nprint(cnt)\n", "n, x = list(map(int, input().split()))\na = list(map(int, input().split()))\nif (x == 0):\n    ans = 0\n    s = dict()\n    for elem in a:\n        if elem in s:\n            s[elem] += 1\n        else:\n            s[elem] = 1\n    for key in list(s.keys()):\n        ans += s[key] * (s[key] - 1)\nelse:\n    ans = 0\n    s = dict()\n    for elem in a:\n        if elem in s:\n            s[elem] += 1\n        else:\n            s[elem] = 1\n    for key in list(s.keys()):\n        if (key^x) in s:\n            ans += s[key] * s[key^x]\nprint(ans // 2)\n", "_, n=map(int, input().split())\nM={}\nans=0\nfor x in map(int, input().split()):\n    ans+=M.get(x^n, 0)\n    if x not in M:\n        M[x]=1\n    else:\n        M[x]+=1\nprint(ans)", "_, n=map(int, input().split())\nM={}\nans=0\nfor x in map(int, input().split()):\n    ans+=M.get(x^n, 0)\n    M[x]=M.get(x, 0)+1\nprint(ans)", "\"\"\" ATSTNG's ejudge Python3 solution template \"\"\"\nimport sys, queue\n\ntry:\n    import dev_act_ffc429465ab634\n    DEV = True\nexcept:\n    DEV = False\n\ndef log(*s):\n    if DEV: print('L',list(s),sep='')\n\nclass EJudge:\n    def __init__(self, problem=\"default\", reclim=1<<30):\n        self.problem = problem\n        sys.setrecursionlimit(reclim)\n\n    def use_files(self, infile='', outfile=''):\n        if infile!='':\n            self.infile = open(infile)\n            sys.stdin = self.infile\n        if infile!='':\n            self.outfile = open(outfile, 'w')\n            sys.stdout = self.outfile\n\n    def use_bacs_files(self):\n        self.use_files(self.problem+'.in', self.problem+'.out')\n\n    def get_tl(self):\n        while True: pass\n\n    def get_ml(self):\n        tmp = [[[5]*100000 for _ in range(1000)]]\n        while True: tmp.append([[5]*100000 for _ in range(1000)])\n\n    def get_re(self):\n        s = (0,)[8]\n\n    def get_wa(self, wstr='blablalblah'):\n        for _ in range(3): print(wstr)\n        return\n\nclass IntReader:\n    def __init__(self):\n        self.ost = queue.Queue()\n\n    def get(self):\n        return int(self.sget())\n\n    def sget(self):\n        if self.ost.empty():\n            for el in input().split():\n                self.ost.put(el)\n        return self.ost.get()\n\n    def release(self):\n        res = []\n        while not self.ost.empty():\n            res.append(self.ost.get())\n        return res\n\n###############################################################################\nej = EJudge(  )\nint_reader = IntReader()\nfmap = lambda f,l: list(map(f,l))\nparse_int = lambda: fmap(int, input().split())\nsign = lambda x: (x>0)-(x<0)\n\n# input\nn,x = parse_int()\nst = [0]*100500\nxored = [0]*100500\nfor _ in range(n): st[int_reader.get()] += 1\nfor idx in range(100500):\n    pair = idx^x\n    if pair < 100500:\n        xored[pair] = st[idx]\n\nans = 0\nfor idx in range(100500):\n    ans += st[idx]*xored[idx]\n\nif x == 0: ans -= n\n\nprint(ans//2)", "def main():\n    n, x = list(map(int, input().split()))\n    l, res = [0] * 131073, 0\n    for a in map(int, input().split()):\n        res += l[a ^ x]\n        l[a] += 1\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, x = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nad = {}\ncount = 0\nfor i in a:\n    count += ad.get(i^x, 0)\n    ad[i] = ad.get(i, 0) + 1\n#print(ad)\nprint(count)\n"]