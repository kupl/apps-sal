["from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nfor _ in range(val()):\n    n = val()\n    cnt = Counter()\n    for j in range(n):\n        cnt += Counter(st())\n    \n    ans = 1\n    for i in cnt:\n        if cnt[i] % n:\n            ans = 0\n    print('YES' if ans else 'NO')", "alph=__import__('string').ascii_lowercase\nfor _ in range(int(input())):\n    n=int(input())\n    g={i:0for i in alph}\n    for _ in range(n):\n        for i in input():g[i]+=1\n    print('YNEOS'[any(g[i]%n for i in g)::2])", "import math\n\n\ndef main():\n    n = int(input())\n    dct = dict()\n    for i in range(n):\n        s = input()\n        for k in s:\n            if k in dct:\n                dct[k] += 1\n            else:\n                dct[k] = 1\n    for i in dct:\n        if dct[i] % n != 0:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\ndef __starting_point():\n    t = int(input())\n\n    for i in range(t):\n        main()\n\"\"\"\n60, 61\n\"\"\"\n\"\"\"\n\"\"\"\n\n__starting_point()", "import math\nfrom collections import deque\nfrom sys import stdin, stdout\nfrom string import ascii_letters\nletters = ascii_letters\ninput = stdin.readline\n#print = stdout.write\n\nfor _ in range(int(input())):\n    n = int(input())\n    have = dict()\n    can = True\n    for i in range(n):\n        for g in input().strip():\n            if g not in have:\n                have[g] = 0\n            have[g] += 1\n    for i in list(have.items()):\n        if i[1] % n:\n            can = False\n            break\n    print('YES' if can else 'NO')\n", "t=int(input())\nfor you in range(t):\n    n=int(input())\n    freq=[0 for i in range(26)]\n    for i in range(n):\n        s=input()\n        for x in s:\n            freq[ord(x)-97]+=1\n    poss=1\n    for i in freq:\n        if(i%n):\n            poss=0\n            break\n    if(poss):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "for _ in range (int(input())):\n    n=int(input())\n    d=dict()\n    for i in range (n):\n        s=input()\n        for j in s:\n            if j in d:\n                d[j]+=1\n            else:\n                d[j]=1\n    c=1\n    for i in d:\n        if d[i]%n!=0:\n            c=0\n            break\n    if c==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "for _ in range(int(input())):\n    n = int(input())\n    d = dict()\n    for i in range(n):\n        for i in input():\n            d[i] = d.get(i,0)+1\n    s = 0\n    for i,j in list(d.items()):\n        if d[i]%n!=0:\n            s+=1\n            break\n    if s==0:\n        print('YES')\n    else:\n        print('NO')\n", "from math import *\nfrom collections import *\nfrom random import *\nfrom decimal import Decimal\nfrom heapq import *\nfrom bisect import *\nimport sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10**5)\ndef lis():\n    return list(map(int,input().split()))\ndef ma():\n    return list(map(int,input().split()))\ndef inp():\n    return int(input())\ndef st1():\n    return input().rstrip('\\n')\nt=inp()\nwhile(t):\n    t-=1\n    n=inp()\n    co=[0]*26\n    for i in range(n):\n        s=st1()\n        for j in s:\n            co[ord(j)-97]+=1\n    fl=0\n    for i in range(26):\n        if(co[i]%n==0):\n            continue\n        fl=1\n    s='YES'\n    if(fl):\n        s='NO'\n    print(s)\n        \n    \n    \n", "import sys\ninput = lambda :sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    n=int(input())\n    d = [0]*(26)\n    fl=True\n    for _ in range(n):\n        s = input()\n        for i in s:\n            d[ord(i)-ord('a')]+=1\n    for x in d:\n        if x>0 and x%n:\n            fl=False\n            break\n    print(\"YES\" if fl else \"NO\")", "for _ in range (int(input())):\n    n = int(input())\n    count = [0]*26 \n    for i in range (n):\n        s = input()\n        for j in s:\n            count[ord(j)-97]+=1\n    temp = 0\n    for i in count:\n        if i%n!=0:\n            temp = 1\n            break\n    if temp==1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    u = []\n    for i in range(n):\n        u += list(input())\n    abc = [0] * 26\n    for i in range(len(u)):\n        abc[ord(u[i]) - ord('a')] += 1\n    for i in range(26):\n        if abc[i] % n != 0:\n            print('NO')\n            break\n    else:\n        print('YES')\n        \n", "for t in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l += list(input())\n\n    ans = 'YES'\n    for i in l:\n        if l.count(i) % n != 0:\n            ans = 'NO'\n\n    print(ans)\n", "import sys\n# sys.stdin = open('input.txt', 'r') \n# sys.stdout = open('output.txt', 'w')\n \nimport math\nimport collections\nfrom sys import stdin,stdout,setrecursionlimit\nimport bisect as bs\nsetrecursionlimit(2**20)\nM = 10**9+7\n    \nT = int(stdin.readline())\n# T = 1\n\nfor _ in range(T):\n    n = int(stdin.readline())\n    # n,d = list(map(int,stdin.readline().split()))\n    # a = list(map(int,stdin.readline().split()))\n    # q = int(stdin.readline())\n    # a = list(map(int,stdin.readline().split()))\n    # b = list(map(int,stdin.readline().split()))\n    # s = stdin.readline().strip('\\n')\n    d = {}\n    for i in range(n):\n        s = stdin.readline().strip('\\n')\n        for c in s:\n            if(c not in d):\n                d[c] = 0\n            d[c] += 1\n    res = True\n    for c in d:\n        if(d[c]%n != 0):\n            res = False\n            break\n    if(res): print(\"YES\")\n    else: print(\"NO\")", "import math,sys\nfrom sys import stdin,stdout\nfrom collections import Counter, defaultdict, deque\ninput = stdin.readline\nI = lambda:int(input())\nli = lambda:list(map(int,input().split()))\n\ndef solve():\n    n=I()\n    a=[]\n    d=defaultdict(int)\n    for i in range(n):\n        s=input().strip()\n        for j in s:\n            d[j]+=1\n    flag=1\n    for i in d:\n        if(d[i]%n):\n            flag=0\n    if(flag):\n        print(\"YES\")\n    else:\n        print(\"NO\")\nfor _ in range(I()):\n    solve()", "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    d1={}\n    flag=0\n    for i in range(n):\n        s=input()\n        for i in s:\n            if(i not in d1):\n                d1[i]=1\n            else:\n                d1[i]+=1\n    for i in d1:\n        if(d1[i]%n!=0):\n            flag=1\n            break\n    if(flag==1):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"]