["a,b=list(map(int,input().split()))\nc,d=list(map(int,input().split()))\ne=a*b\nf=c*d\nn=0\nwhile e%2==0:e=e//2\nwhile e%3==0:e=e//3\nwhile f%2==0:f=f//2\nwhile f%3==0:f=f//3\nif e!=f:print(\"-1\")\nelse:\n   i=0\n   j=0\n   e=a*b\n   f=c*d\n   while e%3==0:\n      e=e//3\n      i+=1\n   while f%3==0:\n      f=f//3\n      j+=1\n   k=i-j\n   if k>0:\n      for i in range(k):\n         n+=1\n         if a%3==0:a=a*2//3\n         else:b=b*2//3\n   else:\n      for i in range(0-k):\n         n+=1\n         if c%3==0:c=c*2//3\n         else:d=d*2//3\n   e=a*b\n   f=c*d\n   i=0\n   j=0\n   while e%2==0:\n      e=e//2\n      i+=1\n   while f%2==0:\n      f=f//2\n      j+=1\n   k=i-j\n   if k>0:\n      for i in range(k):\n         n+=1\n         if a%2==0:a=a//2\n         else:b=b//2\n   else:\n      for i in range(0-k):\n         n+=1\n         if c%2==0:c=c//2\n         else:d=d//2\n   print(n)\n   print(a,b)\n   print(c,d)\n", "import sys\n\nsize = [0,0,0,0];\nsize[0], size[1] = sys.stdin.readline().strip().split()\nsize[2], size[3] = sys.stdin.readline().strip().split()\nfor i in range(4):\n    size[i] = int(size[i])\n\ntotalsize = [size[0]*size[1], size[2]*size[3]]\nnum = [0, 0, 0, 0, 0, 0, 0, 0] #2s in first dimension of 1, 3s in first...\nbase = [size[0], size[1], size[2], size[3]]\nfor i in range(4):\n    temp = size[i]\n    while (temp%2 == 0):\n        num[i*2] += 1\n        temp /= 2\nfor i in range(4):\n    temp = size[i]\n    while (temp%3 == 0):\n        num[i*2+1] += 1\n        temp /= 3\nfor i in range(4):\n    base[i] /= pow(2, num[2*i])\n    base[i] /= pow(3, num[2*i+1])\n\ntotal = 0\nif float(totalsize[0])/pow(2, num[0]+num[2])/pow(3, num[1]+num[3]) == float(totalsize[1])/pow(2, num[4]+num[6])/pow(3, num[5]+num[7]):\n    wh = 0\n    if num[5]+num[7] > num[1]+num[3]:\n        wh = 1\n    while (num[wh*4+1]+num[wh*4+3] > num[(wh+1)%2*4+1]+num[(wh+1)%2*4+3]):\n        if num[wh*4+1] > 0:\n            num[wh*4+1] -= 1\n            num[wh*4] += 1\n        else:\n            num[wh*4+3] -= 1\n            num[wh*4+2] += 1\n        total += 1\n    wh = 0\n    if num[4]+num[6] > num[0]+num[2]:\n        wh = 1\n    while (num[wh*4]+num[wh*4+2] > num[(wh+1)%2*4]+num[(wh+1)%2*4+2]):\n        if num[wh*4] > 0:\n            num[wh*4] -= 1\n        else:\n            num[wh*4+2] -= 1\n        total += 1\n    print(total)\n    print(int(base[0]*pow(2, num[0])*pow(3, num[1])), int(base[1]*pow(2, num[2])*pow(3, num[3])))\n    print(int(base[2]*pow(2, num[4])*pow(3, num[5])), int(base[3]*pow(2, num[6])*pow(3, num[7])))\nelse:\n    print(-1)\n\n", "a1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\na10 = a1\nb10 = b1\na20 = a2\nb20 = b2\na_divs = list()\nb_divs = list()\n\ndiv = 2\nwhile a1 > 1 and div < a1 ** 0.5 + 1:\n    while a1 % div == 0:\n        a_divs.append(div)\n        a1 //= div\n    div += 1\nif a1 > 1:\n    a_divs.append(a1)\n\ndiv = 2\nwhile b1 > 1 and div < b1 ** 0.5 + 1:\n    while b1 % div == 0:\n        a_divs.append(div)\n        b1 //= div\n    div += 1\nif b1 > 1:\n    a_divs.append(b1)\n    \ndiv = 2\nwhile a2 > 1 and div < a2 ** 0.5 + 1:\n    while a2 % div == 0:\n        b_divs.append(div)\n        a2 //= div\n    div += 1\nif a2 > 1:\n    b_divs.append(a2)\n\ndiv = 2\nwhile b2 > 1 and div < b2 ** 0.5 + 1:\n    while b2 % div == 0:\n        b_divs.append(div)\n        b2 //= div\n    div += 1\nif b2 > 1:\n    b_divs.append(b2)\n\na1 = a10\nb1 = b10\na2 = a20\nb2 = b20\n\na_divs.sort()\nb_divs.sort()\n\nna = len(a_divs)\nnb = len(b_divs)\na = 1\nwhile na > 0 and a_divs[-1] > 3:\n    a *= a_divs[-1]\n    a_divs = a_divs[:-1]\n    na -= 1\n\nb = 1\nwhile nb > 0 and b_divs[-1] > 3:\n    b *= b_divs[-1]\n    b_divs = b_divs[:-1]\n    nb -= 1\n\nif a != b:\n    print(-1)\nelse:\n    ans = 0\n    a_3 = a_divs.count(3)\n    a_2 = a_divs.count(2)\n    b_3 = b_divs.count(3)\n    b_2 = b_divs.count(2)\n    if a_3 > b_3:\n        for i in range(a_3 - b_3):\n            a_divs[a_divs.index(3)] = 2\n            a_3 -= 1\n            a_2 += 1\n            ans += 1\n            if a1 % 3 == 0:\n                a1 //= 3\n                a1 *= 2\n            else:\n                b1 //= 3\n                b1 *= 2\n    else:\n        for i in range(b_3 - a_3):\n            b_divs[b_divs.index(3)] = 2\n            b_3 -= 1\n            b_2 += 1\n            ans += 1\n            if a2 % 3 == 0:\n                a2 //= 3\n                a2 *= 2\n            else:\n                b2 //= 3\n                b2 *= 2\n    if a_2 > b_2:\n        for i in range(a_2 - b_2):\n            a_2 -= 1\n            ans += 1\n            if a1 % 2 == 0:\n                a1 //= 2\n            else:\n                b1 //= 2\n    else:\n        for i in range(b_2 - a_2):\n            b_2 -= 1\n            ans += 1\n            if a2 % 2 == 0:\n                a2 //= 2\n            else:\n                b2 //= 2\n    print(ans)\n    print(a1, b1)\n    print(a2, b2)", "a = [[0] * 2] * 2\ns = [[[0] * 2, [0] * 2], [[0] * 2, [0] * 2]]\nfor i in range(2):\n    a[i] = list(map(int, input().split()))\nfor i in range(2):\n    for prime in range(2, 4):\n        for j in range(2):\n            t = a[i][j]\n            while t % prime == 0:\n                t //= prime\n                s[i][prime - 2][j] += 1\n\nans = 0\n\nfor i in range(2):\n    for prime in range(1, 2):\n        mi = min(s[0][prime][0] + s[0][prime][1], s[1][prime][0] + s[1][prime][1]);\n        j = 0\n        while s[i][prime][0] + s[i][prime][1] > mi :\n            if s[i][prime][j] == 0:\n                j += 1\n            a[i][j] //= prime + 2\n            a[i][j] *= 2\n            s[i][0][j] += 1\n            s[i][prime][j] -= 1\n            ans += 1\n\nfor i in range(2):\n    for prime in range(1):\n        mi = min(s[0][prime][0] + s[0][prime][1], s[1][prime][0] + s[1][prime][1]);\n        j = 0\n        while s[i][prime][0] + s[i][prime][1] > mi :\n            if s[i][prime][j] == 0:\n                j += 1\n            a[i][j] //= prime + 2\n            s[i][prime][j] -= 1\n            ans += 1\n\n\nif a[0][0] * a[0][1] != a[1][0] * a[1][1] :\n    print(-1)\nelse :\n    print(ans)\n    print(a[0][0], a[0][1])\n    print(a[1][0], a[1][1])\n", "def decomp(a):\n    cnt2 = 0\n    while a%2==0:\n        a = a//2\n        cnt2 += 1\n    cnt3 = 0\n    while a%3==0:\n        a = a//3\n        cnt3 += 1\n    return a,cnt2,cnt3\n\ndef cut(a,b,d,p):\n    while d>0:\n        if a%p==0:\n            a = (p-1)*a//p\n            d = d-1\n        elif b%p==0:\n            b = (p-1)*b//p\n            d = d-1\n    return a,b\na1,b1 = [int(s) for s in input().split()]\na2,b2 = [int(s) for s in input().split()]\n\nu1,n2a1,n3a1 = decomp(a1)\nv1,n2b1,n3b1 = decomp(b1)\n\nu2,n2a2,n3a2 = decomp(a2)\nv2,n2b2,n3b2 = decomp(b2)\n\n##print(u1,v1,u1*v1)\n##print(u2,v2,u2*v2)\nif u1*v1!= u2*v2:\n    print(-1)\nelse:\n    n = n2a1+n2b1\n    m = n3a1+n3b1\n    x = n2a2+n2b2\n    y = n3a2+n3b2\n\n##    print(n,m,x,y)\n    d3 = abs(m-y)\n    if m>y:        \n        n += d3        \n        a1,b1 = cut(a1,b1,d3,3)\n##        print(1,a1,b1)\n    else:\n        x += d3\n        a2,b2 = cut(a2,b2,d3,3)\n##        print(2,a2,b2)\n    d2 = abs(n-x)\n    if n>x:\n        a1,b1 = cut(a1,b1,d2,2)\n##        print(1,a1,b1)\n    else:\n        a2,b2 = cut(a2,b2,d2,2)\n##        print(2,a2,b2)\n\n    m = d2+d3\n\n    print(m)\n    print(a1,b1)\n    print(a2,b2)\n\n    \n    \n", "#fin = open(\"input.txt\")\n#a1, b1 = map(int, fin.readline().split())\n#a2, b2 = map(int, fin.readline().split())\na1, b1 = list(map(int, input().split()))\na2, b2 = list(map(int, input().split()))\nF, S = [a1, b1], [a2, b2]\nA = dict()\nB = dict()\nA[2] = A[3] = B[2] = B[3] = 0\ni = 2\nwhile i ** 2 <= a1:\n\tif a1 % i == 0:\n\t\tA[i] = 0\n\t\twhile a1 % i == 0:\n\t\t\tA[i] += 1\n\t\t\ta1 //= i\n\ti += 1\nif a1 > 1:\n\tif not a1 in A:\n\t\tA[a1] = 0\n\tA[a1] += 1\ni = 2\nwhile i ** 2 <= b1:\n\tif b1 % i == 0:\n\t\tif not i in A:\n\t\t\tA[i] = 0\n\t\twhile b1 % i == 0:\n\t\t\tA[i] += 1\n\t\t\tb1 //= i\n\ti += 1\nif b1 > 1:\n\tif not b1 in A:\n\t\tA[b1] = 0\n\tA[b1] += 1\ni = 2\nwhile i ** 2 <= a2:\n\tif a2 % i == 0:\n\t\tB[i] = 0\n\t\twhile a2 % i == 0:\n\t\t\tB[i] += 1\n\t\t\ta2 //= i\n\ti += 1\nif a2 > 1:\n\tif not a2 in B:\n\t\tB[a2] = 0\n\tB[a2] += 1\ni = 2\nwhile i ** 2 <= b2:\n\tif b2 % i == 0:\n\t\tif not i in B:\n\t\t\tB[i] = 0\n\t\twhile b2 % i == 0:\n\t\t\tB[i] += 1\n\t\t\tb2 //= i\n\ti += 1\nif b2 > 1:\n\tif not b2 in B:\n\t\tB[b2] = 0\n\tB[b2] += 1\nC1 = sorted([i for i in list(A.keys()) if not i in {2, 3}])\nC2 = sorted([i for i in list(B.keys()) if not i in {2, 3}])\nif C1 != C2:\n\tprint(-1)\nelse:\n\tflag = True\n\tfor i in C1:\n\t\tif (A[i] != B[i]):\n\t\t\tflag = False\n\tif not flag:\n\t\tprint(-1)\n\telse:\n\t\tMin = 0\n\t\tx = A[3] - B[3]\n\t\tMin += abs(x)\n\t\tif x >= 0:\n\t\t\tA[2] += x\n\t\t\twhile x > 0 and F[0] % 3 == 0:\n\t\t\t\tF[0] //= 3\n\t\t\t\tF[0] *= 2\n\t\t\t\tx -= 1\n\t\t\twhile x > 0 and F[1] % 3 == 0:\n\t\t\t\tF[1] //= 3\n\t\t\t\tF[1] *= 2\n\t\t\t\tx -= 1\n\t\telse:\n\t\t\tB[2] -= x\n\t\t\twhile x < 0 and S[0] % 3 == 0:\n\t\t\t\tS[0] //= 3\n\t\t\t\tS[0] *= 2\n\t\t\t\tx += 1\n\t\t\twhile x < 0 and S[1] % 3 == 0:\n\t\t\t\tS[1] //= 3\n\t\t\t\tS[1] *= 2\n\t\t\t\tx += 1\n\t\tif x != 0:\n\t\t\tflag = False\n\t\tx = A[2] - B[2]\n\t\tMin += abs(x)\n\t\tif x >= 0:\n\t\t\twhile x > 0 and F[0] % 2 == 0:\n\t\t\t\tF[0] //= 2\n\t\t\t\tx -= 1\n\t\t\twhile x > 0 and F[1] % 2 == 0:\n\t\t\t\tF[1] //= 2\n\t\t\t\tx -= 1\n\t\telse:\n\t\t\twhile x < 0 and S[0] % 2 == 0:\n\t\t\t\tS[0] //= 2\n\t\t\t\tx += 1\n\t\t\twhile x < 0 and S[1] % 2 == 0:\n\t\t\t\tS[1] //= 2\n\t\t\t\tx += 1\n\t\tif x != 0:\n\t\t\tflag = False\n\t\tif flag:\n\t\t\tprint(Min)\n\t\t\tprint(*F)\n\t\t\tprint(*S)\n\t\telse:\n\t\t\tprint(-1)\n", "def fact(a, b) :\n    ans = 0\n    while a % b == 0 :\n        ans += 1\n        a //= b\n    return ans\n\ndef fact_remove(a, b) :\n    c = a*b\n    while c % 2 == 0 : c //= 2\n    while c % 3 == 0 : c //= 3\n    return c\n\na1,b1 = list(map(int, input().split(' ')))\na2,b2 = list(map(int, input().split(' ')))\n\nif fact_remove(a1, b1) != fact_remove(a2, b2) :\n    print(-1)\nelse :\n    ans = [0, 0, 0, 0]\n    c1 = a1*b1\n    c2 = a2*b2\n    k1 = fact(c1, 3)\n    k2 = fact(c2, 3)\n    \n    if k1 > k2 :\n        ans[1] = k1 - k2\n        c1 /= 3**ans[1]\n        c1 *= 2**ans[1]\n    elif k1 < k2 :\n        ans[3] = k2 - k1\n        c2 /= 3**ans[3]\n        c2 *= 2**ans[3]\n\n    k1 = fact(c1, 2)\n    k2 = fact(c2, 2)\n    if k1 > k2 :\n        ans[0] = k1 - k2\n        c1 /= 2**ans[0]\n    elif k1 < k2 :\n        ans[2] = k2 - k1\n        c2 /= 2**ans[2]\n    if c1 != c2 :\n        print(-1)\n    else :\n        print(sum(ans))\n        while a1%3 == 0 and ans[1] > 0 :\n            a1 //= 3\n            a1 *= 2\n            ans[1] -= 1\n        while a1%2 == 0 and ans[0] > 0 :\n            a1 //= 2\n            ans[0] -= 1\n        while b1%3 == 0 and ans[1] > 0 :\n            b1 //= 3\n            b1 *= 2\n            ans[1] -= 1\n        while b1%2 == 0 and ans[0] > 0 :\n            b1 //= 2\n            ans[0] -= 1\n        while a2%3 == 0 and ans[3] > 0 :\n            a2 //= 3\n            a2 *= 2\n            ans[3] -= 1\n        while a2%2 == 0 and ans[2] > 0 :\n            a2 //= 2\n            ans[2] -= 1\n        while b2%3 == 0 and ans[3] > 0 :\n            b2 //= 3\n            b2 *= 2\n            ans[3] -= 1\n        while b2%2 == 0 and ans[2] > 0 :\n            b2 //= 2\n            ans[2] -= 1\n        print(a1, b1)\n        print(a2, b2)\n", "__author__ = 'zhan'\n\nimport time\n[a1, b1] = [int(i) for i in input().split()]\n[a2, b2] = [int(i) for i in input().split()]\n\nt0 = time.time()\nq1 = [[a1, b1, 0]]\nq2 = [[a2, b2, 0]]\ntested1 = []\ntested2 = []\ntested_total1 = []\ntested_total2 = []\n\n\ndef equal(t, q):\n    lo = 0\n    hi = len(q)\n    while True:\n        if lo >= hi:\n            return False\n        m = (lo + hi) // 2\n        p = q[m]\n        temp = p[0] * p[1]\n        if t == temp:\n            return [p[0], p[1], p[2]]\n        if t < temp:\n            lo = m + 1\n        elif t > temp:\n            hi = m\n\n\ndef found(key, a):\n    lo = 0\n    hi = len(a)\n    while True:\n        if lo >= hi:\n            return False\n        m = (lo + hi) // 2\n        p = a[m]\n        if key[0] == p[0] and key[1] == p[1]:\n            return True\n        if key[0] < p[0] or key[0] == p[0] and key[1] < p[1]:\n            lo = m + 1\n        if key[0] > p[0] or key[0] == p[0] and key[1] > p[1]:\n            hi = m\n\n\nwhile True:\n    if len(q1) > 0 and len(q2) > 0:\n        total1 = q1[0][0] * q1[0][1]\n        total2 = q2[0][0] * q2[0][1]\n        if total1 > total2:\n            ans = equal(total1, q2)\n            if ans:\n                print(str(ans[2] + q1[0][2]) + \"\\n\" + str(q1[0][0]) + \" \" + str(q1[0][1]) + \"\\n\" + str(ans[0]) + \" \" + str(ans[1]))\n            else:\n                if not(q1[0][0] & 1):\n                    tt = [q1[0][0] // 2, q1[0][1], q1[0][2] + 1]\n                    #if len(tested1) == 0 or (not found([tt[0], tt[1]], tested1)):\n                    if (not [tt[0], tt[1]] in tested1) and (not tt[0]*tt[1] in tested_total1):\n                        tested1.append([tt[0], tt[1]])\n                        q1.append(tt)\n                        tested_total1.append(tt[0]*tt[1])\n                        an = equal(tt[0]*tt[1], q2)\n                        if ans:\n                            print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if q1[0][0] % 3 == 0:\n                    tt = [q1[0][0] // 3 * 2, q1[0][1], q1[0][2] + 1]\n                    #if len(tested1) == 0 or (not found([tt[0], tt[1]], tested1)):\n                    if (not [tt[0], tt[1]] in tested1) and (not tt[0]*tt[1] in tested_total1):\n                        tested1.append([tt[0], tt[1]])\n                        q1.append(tt)\n                        tested_total1.append(tt[0]*tt[1])\n                        an = equal(tt[0]*tt[1], q2)\n                        if ans:\n                            print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if not(q1[0][1] & 1):\n                    tt = [q1[0][0], q1[0][1] // 2, q1[0][2] + 1]\n                    #if len(tested1) == 0 or (not found([tt[0], tt[1]], tested1)):\n                    if (not [tt[0], tt[1]] in tested1) and (not tt[0]*tt[1] in tested_total1):\n                        tested1.append([tt[0], tt[1]])\n                        q1.append(tt)\n                        tested_total1.append(tt[0]*tt[1])\n                        an = equal(tt[0]*tt[1], q2)\n                        if ans:\n                            print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if q1[0][1] % 3 == 0:\n                    tt = [q1[0][0], q1[0][1] // 3 * 2, q1[0][2] + 1]\n                    #if len(tested1) == 0 or (not found([tt[0], tt[1]], tested1)):\n                    if (not [tt[0], tt[1]] in tested1) and (not tt[0]*tt[1] in tested_total1):\n                        tested1.append([tt[0], tt[1]])\n                        q1.append(tt)\n                        tested_total1.append(tt[0]*tt[1])\n                        an = equal(tt[0]*tt[1], q2)\n                        if ans:\n                            print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                q1.pop(0)\n                q1.sort(key=lambda x: x[0]*x[1], reverse=True)\n                #tested1.sort(key=lambda x: (x[0], x[1]), reverse=True)\n\n        elif total1 < total2:\n            ans = equal(total2, q1)\n            if ans:\n                print(str(ans[2] + q2[0][2]) + \"\\n\" + str(ans[0]) + \" \" + str(ans[1]) + \"\\n\" + str(q2[0][0]) + \" \" + str(q2[0][1]))\n                break\n            else:\n                if not(q2[0][0] & 1):\n                    tt = [q2[0][0] // 2, q2[0][1], q2[0][2] + 1]\n                    #if len(tested2) == 0 or (not found([tt[0], tt[1]], tested2)):\n                    if (not [tt[0], tt[1]] in tested2) and (not tt[0]*tt[1] in tested_total2):\n                        tested2.append([tt[0], tt[1]])\n                        q2.append(tt)\n                        tested_total2.append(tt[0]*tt[1])\n                        an = equal(tt[0]*tt[1], q1)\n                        if ans:\n                            print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if q2[0][0] % 3 == 0:\n                    tt = [q2[0][0] // 3 * 2, q2[0][1], q2[0][2] + 1]\n                    #if len(tested2) == 0 or (not found([tt[0], tt[1]], tested2)):\n                    if (not [tt[0], tt[1]] in tested2) and (not tt[0]*tt[1] in tested_total2):\n                        tested2.append([tt[0], tt[1]])\n                        q2.append(tt)\n                        tested_total2.append(tt[0]*tt[1])\n                        an = equal(tt[0]*tt[1], q1)\n                        if ans:\n                            print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if not(q2[0][1] & 1):\n                    tt = [q2[0][0], q2[0][1] // 2, q2[0][2] + 1]\n                    #if len(tested2) == 0 or (not found([tt[0], tt[1]], tested2)):\n                    if (not [tt[0], tt[1]] in tested2) and (not tt[0]*tt[1] in tested_total2):\n                        tested2.append([tt[0], tt[1]])\n                        q2.append(tt)\n                        tested_total2.append(tt[0]*tt[1])\n                        an = equal(tt[0]*tt[1], q1)\n                        if ans:\n                            print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if q2[0][1] % 3 == 0:\n                    tt = [q2[0][0], q2[0][1] // 3 * 2, q2[0][2] + 1]\n                    #if len(tested2) == 0 or (not found([tt[0], tt[1]], tested2)):\n                    if (not [tt[0], tt[1]] in tested2) and (not tt[0]*tt[1] in tested_total2):\n                        tested2.append([tt[0], tt[1]])\n                        q2.append(tt)\n                        tested_total2.append(tt[0]*tt[1])\n                        an = equal(tt[0]*tt[1], q1)\n                        if ans:\n                            print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                q2.pop(0)\n                q2.sort(key=lambda x: x[0]*x[1], reverse=True)\n                #tested2.sort(key=lambda x: (x[0], x[1]), reverse=True)\n\n        else:\n            print(str(q1[0][2] + q2[0][2]) + \"\\n\" + str(q1[0][0]) + \" \" + str(q1[0][1]) + \"\\n\" + str(q2[0][0]) + \" \" + str(q2[0][1]))\n            break\n    else:\n        print(-1)\n        break\n\nt1 = time.time()\n#print(t1-t0)\n", "__author__ = 'zhan'\n\n[a1, b1] = [int(i) for i in input().split()]\n[a2, b2] = [int(i) for i in input().split()]\n\nq1 = [[a1, b1, 0]]\nq2 = [[a2, b2, 0]]\ntested_total1 = []\ntested_total2 = []\n\n\ndef equal(t, q):\n    lo = 0\n    hi = len(q)\n    while True:\n        if lo >= hi:\n            return False\n        m = (lo + hi) // 2\n        p = q[m]\n        temp = p[0] * p[1]\n        if t == temp:\n            return [p[0], p[1], p[2]]\n        if t < temp:\n            lo = m + 1\n        elif t > temp:\n            hi = m\n\n\nwhile True:\n    if len(q1) > 0 and len(q2) > 0:\n        total1 = q1[0][0] * q1[0][1]\n        total2 = q2[0][0] * q2[0][1]\n        if total1 > total2:\n            ans = equal(total1, q2)\n            if ans:\n                print(str(ans[2] + q1[0][2]) + \"\\n\" + str(q1[0][0]) + \" \" + str(q1[0][1]) + \"\\n\" + str(ans[0]) + \" \" + str(ans[1]))\n            else:\n                if not(q1[0][0] & 1):\n                    tt = [q1[0][0] // 2, q1[0][1], q1[0][2] + 1]\n                    if not tt[0]*tt[1] in tested_total1:\n                        q1.append(tt)\n                        tested_total1.append(tt[0]*tt[1])\n                        #an = equal(tt[0]*tt[1], q2)\n                        #if ans:\n                        #    print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if q1[0][0] % 3 == 0:\n                    tt = [q1[0][0] // 3 * 2, q1[0][1], q1[0][2] + 1]\n                    if not tt[0]*tt[1] in tested_total1:\n                        q1.append(tt)\n                        tested_total1.append(tt[0]*tt[1])\n                        #an = equal(tt[0]*tt[1], q2)\n                        #if ans:\n                        #    print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if not(q1[0][1] & 1):\n                    tt = [q1[0][0], q1[0][1] // 2, q1[0][2] + 1]\n                    if not tt[0]*tt[1] in tested_total1:\n                        q1.append(tt)\n                        tested_total1.append(tt[0]*tt[1])\n                        #an = equal(tt[0]*tt[1], q2)\n                        #if ans:\n                        #    print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if q1[0][1] % 3 == 0:\n                    tt = [q1[0][0], q1[0][1] // 3 * 2, q1[0][2] + 1]\n                    if not tt[0]*tt[1] in tested_total1:\n                        q1.append(tt)\n                        tested_total1.append(tt[0]*tt[1])\n                        #an = equal(tt[0]*tt[1], q2)\n                        #if ans:\n                        #    print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                q1.pop(0)\n                q1.sort(key=lambda x: x[0]*x[1], reverse=True)\n\n        elif total1 < total2:\n            ans = equal(total2, q1)\n            if ans:\n                print(str(ans[2] + q2[0][2]) + \"\\n\" + str(ans[0]) + \" \" + str(ans[1]) + \"\\n\" + str(q2[0][0]) + \" \" + str(q2[0][1]))\n                break\n            else:\n                if not(q2[0][0] & 1):\n                    tt = [q2[0][0] // 2, q2[0][1], q2[0][2] + 1]\n                    if not tt[0]*tt[1] in tested_total2:\n                        q2.append(tt)\n                        tested_total2.append(tt[0]*tt[1])\n                        #an = equal(tt[0]*tt[1], q1)\n                        #if ans:\n                        #    print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if q2[0][0] % 3 == 0:\n                    tt = [q2[0][0] // 3 * 2, q2[0][1], q2[0][2] + 1]\n                    if not tt[0]*tt[1] in tested_total2:\n                        q2.append(tt)\n                        tested_total2.append(tt[0]*tt[1])\n                        #an = equal(tt[0]*tt[1], q1)\n                        #if ans:\n                        #    print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if not(q2[0][1] & 1):\n                    tt = [q2[0][0], q2[0][1] // 2, q2[0][2] + 1]\n                    if not tt[0]*tt[1] in tested_total2:\n                        q2.append(tt)\n                        tested_total2.append(tt[0]*tt[1])\n                        #an = equal(tt[0]*tt[1], q1)\n                        #if ans:\n                        #    print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                if q2[0][1] % 3 == 0:\n                    tt = [q2[0][0], q2[0][1] // 3 * 2, q2[0][2] + 1]\n                    if not tt[0]*tt[1] in tested_total2:\n                        q2.append(tt)\n                        tested_total2.append(tt[0]*tt[1])\n                        #an = equal(tt[0]*tt[1], q1)\n                        #if ans:\n                        #    print(str(an[2] + tt[2]) + \"\\n\" + str(tt[0]) + \" \" + str(tt[1]) + \"\\n\" + str(an[0]) + \" \" + str(an[1]))\n                q2.pop(0)\n                q2.sort(key=lambda x: x[0]*x[1], reverse=True)\n\n        else:\n            print(str(q1[0][2] + q2[0][2]) + \"\\n\" + str(q1[0][0]) + \" \" + str(q1[0][1]) + \"\\n\" + str(q2[0][0]) + \" \" + str(q2[0][1]))\n            break\n    else:\n        print(-1)\n        break", "__author__ = 'zhan'\n\n[a1, b1] = [int(i) for i in input().split()]\n[a2, b2] = [int(i) for i in input().split()]\n\nq = [[[a1, b1, 0]], [[a2, b2, 0]]]\ntotal = [0, 0]\ntested = [[], []]\n\n\ndef equal(t, q):\n    lo = 0\n    hi = len(q)\n    while True:\n        if lo >= hi:\n            return False\n        m = (lo + hi) // 2\n        p = q[m]\n        temp = p[0] * p[1]\n        if t == temp:\n            return [p[0], p[1], p[2]]\n        if t < temp:\n            lo = m + 1\n        elif t > temp:\n            hi = m\n\n\ndef expand(i):\n    ans = equal(total[i], q[(i+1)%2])\n    if ans:\n        print(\n            str(ans[2] + q[i][0][2]) + \"\\n\" + str(q[i][0][0]) + \" \" + str(q[i][0][1]) + \"\\n\" + str(ans[0]) + \" \" + str(\n                ans[1]))\n    else:\n        if not (q[i][0][0] & 1):\n            tt = [q[i][0][0] // 2, q[i][0][1], q[i][0][2] + 1]\n            if not tt[0] * tt[1] in tested[i]:\n                q[i].append(tt)\n                tested[i].append(tt[0] * tt[1])\n        if q[i][0][0] % 3 == 0:\n            tt = [q[i][0][0] // 3 * 2, q[i][0][1], q[i][0][2] + 1]\n            if not tt[0] * tt[1] in tested[i]:\n                q[i].append(tt)\n                tested[i].append(tt[0] * tt[1])\n        if not (q[i][0][1] & 1):\n            tt = [q[i][0][0], q[i][0][1] // 2, q[i][0][2] + 1]\n            if not tt[0] * tt[1] in tested[i]:\n                q[i].append(tt)\n                tested[i].append(tt[0] * tt[1])\n        if q[i][0][1] % 3 == 0:\n            tt = [q[i][0][0], q[i][0][1] // 3 * 2, q[i][0][2] + 1]\n            if not tt[0] * tt[1] in tested[i]:\n                q[i].append(tt)\n                tested[i].append(tt[0] * tt[1])\n        q[i].pop(0)\n        q[i].sort(key=lambda x: x[0] * x[1], reverse=True)\n\n\nwhile True:\n    if len(q[0]) > 0 and len(q[1]) > 0:\n        total[0] = q[0][0][0] * q[0][0][1]\n        total[1] = q[1][0][0] * q[1][0][1]\n        if total[0] > total[1]:\n            expand(0)\n        elif total[0] < total[1]:\n            expand(1)\n        else:\n            print(str(q[0][0][2] + q[1][0][2]) + \"\\n\" + str(q[0][0][0]) + \" \" + str(q[0][0][1]) + \"\\n\" + str(\n                q[1][0][0]) + \" \" + str(q[1][0][1]))\n            break\n    else:\n        print(-1)\n        break", "__author__ = 'zhan'\n\n[a1, b1] = [int(i) for i in input().split()]\n[a2, b2] = [int(i) for i in input().split()]\n\nq = [[[a1, b1, 0]], [[a2, b2, 0]]]\ntotal = [0, 0]\ntested = [[], []]\n\n\ndef expand(i):\n    if not (q[i][0][0] & 1):\n        tt = [q[i][0][0] // 2, q[i][0][1], q[i][0][2] + 1]\n        if not tt[0] * tt[1] in tested[i]:\n            q[i].append(tt)\n            tested[i].append(tt[0] * tt[1])\n    if q[i][0][0] % 3 == 0:\n        tt = [q[i][0][0] // 3 * 2, q[i][0][1], q[i][0][2] + 1]\n        if not tt[0] * tt[1] in tested[i]:\n            q[i].append(tt)\n            tested[i].append(tt[0] * tt[1])\n    if not (q[i][0][1] & 1):\n        tt = [q[i][0][0], q[i][0][1] // 2, q[i][0][2] + 1]\n        if not tt[0] * tt[1] in tested[i]:\n            q[i].append(tt)\n            tested[i].append(tt[0] * tt[1])\n    if q[i][0][1] % 3 == 0:\n        tt = [q[i][0][0], q[i][0][1] // 3 * 2, q[i][0][2] + 1]\n        if not tt[0] * tt[1] in tested[i]:\n            q[i].append(tt)\n            tested[i].append(tt[0] * tt[1])\n    q[i].pop(0)\n    q[i].sort(key=lambda x: x[0] * x[1], reverse=True)\n\n\nwhile True:\n    if len(q[0]) > 0 and len(q[1]) > 0:\n        total[0] = q[0][0][0] * q[0][0][1]\n        total[1] = q[1][0][0] * q[1][0][1]\n        if total[0] > total[1]:\n            expand(0)\n        elif total[0] < total[1]:\n            expand(1)\n        else:\n            print(str(q[0][0][2] + q[1][0][2]) + \"\\n\" + str(q[0][0][0]) + \" \" + str(q[0][0][1]) + \"\\n\" + str(\n                q[1][0][0]) + \" \" + str(q[1][0][1]))\n            break\n    else:\n        print(-1)\n        break", "f = lambda: map(int, input().split())\na, b = f()\nc, d = f()\n\n\ndef g(p, k):\n    s = 1\n    while k % p ** s == 0: s += 1\n    return s - 1\n\n\na3, b3, c3, d3 = g(3, a), g(3, b), g(3, c), g(3, d)\na2, b2, c2, d2 = g(2, a), g(2, b), g(2, c), g(2, d)\n\nab3, cd3 = a3 + b3, c3 + d3\nab2, cd2 = a2 + b2, c2 + d2\n\nab = a * b * pow(2, cd2) * pow(3, cd3)\ncd = c * d * pow(2, ab2) * pow(3, ab3)\nif ab != cd:\n    print(-1)\n    return\n\nk, s2, s3 = 1e9, 0, 0\n\nfor t3 in range(min(ab3, cd3) + 1):\n    k3 = ab3 + cd3 - 2 * t3\n    for t2 in range(min(ab2 + ab3, cd2 + cd3) - t3 + 1):\n        k2 = k3 + ab2 + cd2 - 2 * t2\n\n        if k2 + k3 < k:\n            k = k2 + k3\n            s2, s3 = t2, t3\n\nt3 = ab3 - s3\nwhile t3 and a % 3 == 0:\n    a = 2 * a // 3\n    t3 -= 1\nwhile t3 and b % 3 == 0:\n    b = 2 * b // 3\n    t3 -= 1\nt2 = ab3 - s3 + ab2 - s2\nwhile t2 and a % 2 == 0:\n    a = a // 2\n    t2 -= 1\nwhile t2 and b % 2 == 0:\n    b = b // 2\n    t2 -= 1\nt3 = cd3 - s3\nwhile t3 and c % 3 == 0:\n    c = 2 * c // 3\n    t3 -= 1\nwhile t3 and d % 3 == 0:\n    d = 2 * d // 3\n    t3 -= 1\nt2 = cd3 - s3 + cd2 - s2\nwhile t2 and c % 2 == 0:\n    c = c // 2\n    t2 -= 1\nwhile t2 and d % 2 == 0:\n    d = d // 2\n    t2 -= 1\n\nprint(k)\nprint(a, b)\nprint(c, d)", "import sys\n\na1,b1 = map(int, input().split())\na2,b2 = map(int, input().split())\na, b = a1 * b1, a2 * b2\ncnta2, cntb2, cnta3, cntb3 = 0, 0, 0, 0\nans = 0\nwhile a%2==0:\n\ta //= 2\n\tcnta2 += 1\nwhile a%3==0:\n\ta //= 3\n\tcnta3 += 1\n\nwhile b%2==0:\n\tb //= 2\n\tcntb2 += 1\nwhile b%3==0:\n\tb //= 3\n\tcntb3 += 1\n\nif a != b:\n\tprint(-1)\n\treturn\n\ndif = cnta3 - cntb3\nif dif > 0:\n  for i in range(dif):\n     ans += 1\n     if a1 % 3 == 0:\n     \ta1 = a1 * 2 // 3\n     else:\n     \tb1 = b1 * 2 // 3\nelse:\n  for i in range(-dif):\n     ans += 1 \n     if a2 % 3 == 0:\n     \ta2 = a2 * 2 // 3\n     else:\n     \tb2 = b2 * 2 // 3\n\na, b = a1 * b1, a2 * b2\n\ncnta, cntb = 0, 0\n\nwhile a % 2 == 0:\n  a = a // 2\n  cnta += 1\n\nwhile b % 2 == 0:\n  b = b // 2\n  cntb += 1\n\ndif = cnta - cntb\nif dif > 0:\n  for i in range(dif):\n     ans += 1\n     if a1 % 2 == 0:\n     \ta1 = a1 // 2\n     else:\n     \tb1 = b1 // 2\nelse:\n  for i in range(-dif):\n     ans += 1\n     if a2 % 2 == 0:\n     \ta2 = a2 // 2\n     else:\n     \tb2 = b2 // 2\n\nprint(ans)\nprint(str(a1) + ' ' + str(b1))\nprint(str(a2) + ' ' + str(b2))", "def dfs(x, d, g):\n    g[x] = set()\n    d[x] = 1\n    \n    if x % 2 == 0:\n        next_ = x // 2\n        \n        if next_ not in d:\n            g[x].add(next_)\n            dfs(next_,  d, g)\n        elif next_ not in g[x]: \n            g[x].add(next_)\n            \n    if x % 3 == 0:\n        next_ = (x // 3) * 2\n        \n        if next_ not in d:\n            g[x].add(next_)\n            dfs(next_,  d, g)\n        elif next_ not in g[x]: \n            g[x].add(next_)\n            \ndef bfs(x, g):\n    def add_prev(prev, cur_, next_):\n        if next_ * 2 == cur_:\n            prev[next_] = [cur_, 2]\n        else:\n            prev[next_] = [cur_, 3]\n        \n    min_     = {}\n    s        = [x]\n    min_[x]  = 0\n    i= 0\n    \n    # [num, type]\n    prev = {}\n    \n    while i < len(s):\n        cur = s[i]\n        for next_ in g[cur]:\n            if next_ not in min_:\n                min_[next_] = min_[cur] + 1\n                s.append(next_)\n                add_prev(prev, cur, next_)\n                \n            elif min_[cur] + 1 < min_[next_]:\n                min_[next_] = min_[cur] + 1\n                add_prev(prev, cur, next_)\n        i+=1\n    return min_, prev    \n\ndef find(a1, b1, a2, b2, min1, prev1, min2, prev2):\n    def process(a, b, type_):\n        if type_ == 2:\n            if a % 2 == 0:\n                return a // 2, b\n            else:\n                return a, b // 2\n        else:\n            if a % 3 == 0:\n                return (a // 3)*2, b\n            else:\n                return a, (b // 3)*2\n        \n    x1 = a1*b1\n    x2 = a2*b2 \n    min_ = float('inf')\n    num  = None\n    \n    for x in min1:\n        if x in min2:\n            if min_ > min1[x] + min2[x]:\n                min_ = min1[x] + min2[x]\n                num  = x\n    \n    if num == None:\n        return -1, None, None\n    \n    cur1 = num\n    arr1 = []\n    while cur1 != x1:\n        prev_, type_ = prev1[cur1] \n        arr1.append(type_)\n        cur1 = prev_\n        \n    cur2 = num\n    arr2 = []\n    while cur2 != x2:\n        prev_, type_ = prev2[cur2] \n        arr2.append(type_)\n        cur2 = prev_\n        \n    for type_ in arr1[::-1]:\n        a1, b1 = process(a1, b1, type_)\n        \n    for type_ in arr2[::-1]:\n        a2, b2 = process(a2, b2, type_)   \n    \n    return min_, [a1, b1], [a2, b2]    \n\na1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\n\nd1, g1, d2, g2 = {}, {}, {}, {}\n\ndfs(a1*b1, d1, g1)\ndfs(a2*b2, d2, g2)\nmin1, prev1 = bfs(a1*b1, g1)\nmin2, prev2 = bfs(a2*b2, g2)\nans, arr1, arr2 = find(a1, b1, a2, b2, min1, prev1, min2, prev2)\n\nif ans == -1:\n    print(-1)\nelse:\n    print(ans)\n    print(str(arr1[0])+' '+str(arr1[1]))\n    print(str(arr2[0])+' '+str(arr2[1]))"]