["import functools\n\nn = int(input())\n\narr = [input() for i in range(n)]\n\ndef compare(s1, s2):\n    a = s1.count('s')\n    b = s2.count('s')\n\n    if (a*len(s2)) < b*len(s1):\n        return 1\n    return -1\n\narr = sorted(arr, key=functools.cmp_to_key(compare))\n\ns = ''.join(arr)\nc = 0\nt = 0\n\nfor char in s:\n    if char == 's':\n        c += 1\n    elif char == 'h':\n        t += c\nprint(t)\n\n", "import sys\n\n#f = open('input', 'r')\nf = sys.stdin\n\nn = int(f.readline())\ns = [f.readline().strip() for _ in range(n)]\ns = [(x, x.count('s'), x.count('h')) for x in s]\ns = sorted(s, key=lambda x: x[2]/float(x[1]+0.00000001))\ns = ''.join(x[0] for x in s)\n\ncs = 0\nans = 0\nfor x in s:\n  if x == 's':\n    cs += 1\n  else:\n    ans += cs\nprint(ans)\n", "import sys\n\nf  = sys.stdin\n\nans = 0\nod = 0\n\nn = int(f.readline())\ns = [f.readline().strip() for _ in range(n)]\ns = [(x,x.count('s'),x.count('h')) for x in s]\ns = sorted(s,key = lambda x: x[2]/float(x[1] + 0.0000001))\ns = ''.join(x[0] for x in s)\n\nfor x in s:\n  if x == 's': \n    od += 1\n  else: \n    ans += od\nprint(ans)\n\n", "n = int(input())\n\ndef insert(s,t,ret,string,c,scount,tcount):\n  maxval = s*tcount\n  val = maxval\n  maxpos = 0\n  for i in range(len(string)):\n    si, ti, ci = string[i]\n    val = val + si*t*ci - s*ti*ci\n    if maxval < val:\n      maxval = val\n      maxpos = i+1\n  string = string[:maxpos] + [(s,t,c)] + string[maxpos:]\n\n  return ret+maxval*c, string\n\ndef count2(m, memo):\n  if m in memo:\n    return memo[m]\n  s = 0\n  ret = 0\n  for c in m:\n    if c == 's':\n      s += 1\n    else:\n      ret += s\n  memo[m] = (ret,s)\n  return ret, s\n\n\n\nmemo = {}\nret = 0\nd = {}\nfor _ in range(n):\n  m = input()\n  c,s = count2(m, memo)\n  ret += c\n  t = len(m)-s\n  if (s,t) not in d:\n    d[(s,t)] = 0\n  ret += s*t*d[(s,t)]\n  d[(s,t)] += 1\n\nstring = []\nscount = 0\ntcount = 0\nfor s,t in d:\n  c = d[(s,t)]\n  ret, string = insert(s,t,ret,string,c,scount,tcount)\n  scount += s*c\n  tcount += t*c\n\n\nprint(ret)", "n=int(input())\ns=[]\na=[]\nfor i in range(n):\n    s.append(input())\n    p=0\n    q=0\n    for j in s[i]:\n        if(j=='s'):\n            p+=1\n        elif(j=='h'):\n            q+=1\n    val=(q-p)/(q+p)\n    a.append([val,i])\na.sort()\nfin=''\nfor i in range(n):\n    \n    fin+=s[a[i][1]]\n#print(fin)\np=0\nq=0\nins=0\nfor i in fin:\n    if(i=='s'):\n        q+=1\n    elif(i=='h'):\n        p+=1\n        ins+=q\nprint(ins)\n    \n", "import sys\nfrom functools import cmp_to_key\n\ndef val (s):\n    cnt = 0\n    ret = 0\n    for c in s:\n        if c == \"s\":\n            cnt += 1\n        else:\n            ret += cnt\n    return ret\n\ndef cmp (a, b):\n    v1 = val(a + b)\n    v2 = val(b + a)\n    if v1 < v2:\n        return 1\n    elif v1 > v2:\n        return -1\n    return 0\n\nans = \"\"\ns = []\n\nn = int(input())\n\nfor i in range(0, n):\n    t = input()\n    s.append(t);\n\ns = sorted(s, key = cmp_to_key(cmp))\n\nans = \"\".join(s)\n\nprint(val(ans))\n", "# Imports\n\n\n##############################################\n# Input\nn = int(input())\n\nmas = []\nall_h = 0\nfor i in range(n):\n    line = input()\n    s = line.count('s')\n    h = line.count('h')\n    all_h += h\n\n    if h == 0:\n        k = 100000\n    else:\n        k = s/h\n    mas.append((k, line))\n\n\n##############################################\n# Main code\nsor = sorted(mas, key=lambda val:val[0], reverse=True)\nstr = ''\n\nfor item in sor:\n    str += item[1]\n\n#print(str)\n\ncount = 0\ncount_h = all_h\nfor i in range(len(str)):\n    if str[i] == 'h':\n        count_h -= 1\n\n    else:\n        count += count_h\n\n\nprint(count)\n\n\n\n\n", "import functools\ndef cmp(a,b):\n    if (a.count('s')/len(a))<(b.count('s')/len(b)) :\n        return 1\n\n\n\n    else:\n        return -1\n\nn=int(input())\na=[input() for i in range(n)]\n\na=sorted(a,key=functools.cmp_to_key(cmp))\n\n\n\na=''.join(a)\n\nc=0\nt=0\n\nfor i in a:\n    if i=='s':\n        c+=1\n    else:\n        t+=c\n\nprint(t)\n", "n = int(input())\na = []\nfor i in range(n):\n    k = input()\n    s,t = 0,0\n    for j in k:\n        if j == 's':\n            s += 1\n        else:\n            t += 1\n    if t > 0:\n        a.append([k,s/t])\n    else:\n        a.append([k,100000])\na.sort(key = lambda x: x[1])\na = list(reversed(a))\nl = a[0][0][0]\nx = 0\nm =[]\nfor i in a:\n    for j in i[0]:\n        if j != l:\n            m.append(x)\n            x = 1\n            l = j\n        else:\n            x += 1\nm.append(x)\nif a[0][0][0] == 'h':\n    m = m[1:]\np,q = [],[]\ne = 0\nz = len(m)\nfor i in range(z):\n    if i % 2 == 0:\n        p.append(m[i])\nm = list(reversed(m))\nif z % 2 == 1:\n    m = m[1:]\n    z -= 1\nfor i in range(z):\n    if i % 2 == 0:\n        e += m[i]\n        q.append(e)\nq = list(reversed(q))\nans = 0\nfor i in range(z//2):\n    ans += p[i]*q[i]\nprint(ans)", "import functools\n\nn = int(input())\n\nt = [input() for i in range(n)]\n\n\ndef compare(s1, s2):\n    if (s1.count('s') * len(s2)) < (s2.count('s') * len(s1)):\n        return 1\n    else:\n        return -1\n\n\nt = sorted(t, key=functools.cmp_to_key(compare))\ns = ''.join(t)\n\nc = 0\nz = 0\n\nfor char in s:\n    if char == 's':\n        c += 1\n    elif char == 'h':\n        z += c\nprint(z)\n", "import sys\n\nf=sys.stdin\n\nn=int(f.readline())\ns=[f.readline().strip() for i in range(n)]\ns=[(x,x.count('s'),x.count('h')) for x in s]\ns=sorted(s,key=lambda x:-x[1]/(x[2]+0.0001))\ns=''.join(x[0] for x in s)\nans,tmp=0,0\nfor x in s:\n\tif x=='h':\n\t\tans+=tmp\n\telse:\n\t\ttmp+=1\nprint(ans)", "n = int(input())\ns = [input() for i in range(n)]\ns = [(x, x.count(\"s\"), x.count(\"h\")) for x in s]\ns.sort(key = lambda x: x[2] / float(x[1] + 1e-6))\ns = ''.join(x[0] for x in s)\n\npre, ans = 0, 0\nfor x in s:\n    if (x == \"s\"):\n        pre += 1\n    else:\n        ans += pre\nprint(ans)", "n = int(input())\nts = []\nres = 0\nfor _ in range(n):\n    i = input().strip()\n    m_res = 0\n    s_count = 0\n    for c in i:\n        if c == 's':\n            s_count += 1\n        else:\n            m_res += s_count\n    res += m_res\n    ts.append((i.count('s'), i.count('h')))\n\nts = sorted(ts, key=lambda k: float(k[0]) / float(k[1]) if k[1] else float('inf'), reverse=True)\n\nss = [s for s, h in ts]\nhs2 = [h for s, h in ts]\nhs = [0 for _ in ts]\n\nfor i in range(n-2,-1,-1):\n    hs[i] = hs2[i + 1] + hs[i+1]\n#print(ss, hs2, hs)\n\nfor i in range(n):\n    res += ss[i] * hs[i]\nprint(res)\n", "import sys\nimport functools\n\ndef sdiff(a, b):\n    nas, nah, nbs, nbh = 0, 0, 0, 0\n\n    for c in a:\n        if c == 's':\n            nas += 1\n        elif c == 'h':\n            nah += 1\n\n    for c in b:\n        if c == 's':\n            nbs += 1\n        elif c == 'h':\n            nbh += 1\n\n    return nbs * nah - nas * nbh\n\nn = int(sys.stdin.readline().strip())\ns = sorted(sys.stdin.readlines(), key=functools.cmp_to_key(sdiff))\n\nr, rs = 0, 0\n\nfor ss in s:\n    for c in ss:\n        if c == 's':\n            rs += 1\n        elif c == 'h':\n            r += rs\n\nprint(r)\n", "\"\"\"\nSay I have two strings, u and v.\nLet s(x) be the number of 's's in x.\nLet h(x) be the number of 'h's in x.\nLet sh(x) be the number of 'sh' subsequences in x.\nThen\n    sh(uv) = sh(u) + sh(v) + s(u)*h(v)\n    sh(vu) = sh(v) + sh(u) + s(v)*h(u)\nSo we want uv if s(u)*h(v) > s(v)*h(u), else vu.\n\"\"\"\n\n\nfrom functools import cmp_to_key\n\n\nn = int(input())\nstrings = [input() for _ in range(n)]\n\n\nstrings = [(s, s.count(\"s\"), s.count(\"h\")) for s in strings]\n\n\ndef compare(u, v):\n    _, su, hu = u\n    _, sv, hv = v\n    suxhv = su*hv\n    svxhu = sv*hu\n    if suxhv > svxhu:\n        return -1\n    elif svxhu > suxhv:\n        return 1\n    else:\n        return 0\n\n\nstrings.sort(key=cmp_to_key(compare))\n\n\nnoise = 0\nss = 0\nfor string, _, _ in strings:\n    for c in string:\n        if c == \"s\":\n            ss += 1\n        else:\n            noise += ss\n\nprint(noise)\n", "n = int(input())\na = []\nfor i in range(n):\n    s = input()\n    l = 0\n    for c in s:\n        if c==\"s\":\n            l+=1\n    a.append((s, l/len(s)))\na.sort(key=lambda x: x[1], reverse=True)\nns = 0\nans = 0\nfor st, _ in a:\n    for c in st:\n        if c == 's':\n            ns += 1\n        else:\n            ans += ns\nprint(ans)", "def mycmp(a,b):\n\tif (a[0]*b[1]>b[0]*a[1]):\n\t\treturn -1\n\treturn 1\n\nn=int(input())\na=[]\nans=0\nfor i in range(1,n+1):\n\tstr=input()\n\ttotlen=len(str)\n\ts=h=0\n\tfor j in range(0,totlen):\n\t\tif (str[j]=='s'):\n\t\t\ts=s+1\n\t\telse:\n\t\t\th=h+1\n\t\t\tans=ans+s\n\ttmp=0\n\tif (h==0):\n\t\ttmp=1e18\n\telse:\n\t\ttmp=s/h\n\ta.append((int(s),int(h),tmp))\n\t#print(s,h)\na.sort(key=lambda x:x[2],reverse=True)\nsum=0\nfor i in range(0,len(a)):\n\tans=ans+sum*a[i][1]\n\tsum=sum+a[i][0]\nprint(ans)\n", "#input\nn=int(input())\n\na=[]\nfor i in range(0,n):\n    a.append(input())\n\n#calculation\nnoise=0\n\ndef calc_noise(str):\n    result = 0\n    \n    struct =[]  \n    struct.append(0)\n    c = \"s\"\n    j = 0\n    str.lstrip(\"h\")\n    for i in range(0,len(str)):\n        if str[i]==c:\n            struct[j] +=  1\n        else:\n            c = str[i]\n            struct.append(1)\n            j += 1\n    \n    s = 0\n    for i in range(0, len(struct)):\n        if i%2!=0:\n            result += s*struct[i]\n        else:\n            s += struct[i]\n    return result        \n    \n\nv=[]\nfor i in range(0,n):\n    cs=a[i].count(\"s\")\n    ch=len(a[i]) - cs\n    sound = calc_noise(a[i])\n    if cs==0:\n        v.append([i,-100000, 0])\n    else:\n        if ch==0:\n            v.append([i,100000, 0])\n        else:\n            v.append([i,cs/ch, sound])\n            \nv.sort(key=lambda x: x[2], reverse=1)             \nv.sort(key=lambda x: x[1], reverse=1)      \n\nstr = \"\"\nfor i in range(0,n):\n    str += a[v[i][0]] \nnoise = calc_noise(str)\n    \n#output\n\nprint(noise)", "n=int(input())\na=[input().strip() for i in range(n)]\na=[(z,z.count('s'),z.count('h')) for z in a]\na=sorted(a, key=lambda p: - p[1]/(p[2]+0.000001) )\ns=\"\".join( z[0] for z in a )\nans,kols=0,0\nfor c in s:\n    if c=='s':\n        kols+=1\n    else:\n        ans+=kols\nprint(ans)\n", "def key(x):\n    s = x.count('s')\n    return s/len(x)\n\n\ndef sh_produce(x):\n    x = str(x)\n    sh = [0 for j in range(len(x))]\n    if x[-1] == 'h':\n        sh[-1] = 1\n    for i in range(len(x)-2, -1, -1):\n        if x[i] == 'h':\n            sh[i] = sh[i+1] + 1\n        else:\n            sh[i] = sh[i+1]\n    sh_num = 0\n    for i in range(len(x)):\n        if x[i] == 's':\n            sh_num += sh[i]\n    return sh_num\nn = int(input())\ninput_list = []\nfor i in range(n):\n    tmp = input()\n    input_list.append(tmp)\ninput_list = sorted(input_list, key=key, reverse=True)\nres = ''.join(input_list)\n\nprint(sh_produce(res))\n\n", "# n = int(input())\n# occurences = [''] * n\n# t = [0] * n\n\n# for i in range(n):\n#     s = input()\n#     occurences[i] = s\n#     num_s = s.count('s')\n#     num_h = s.count('h')\n#     if num_h>0:\n#         t[i]=num_s/num_h\n#     else:\n#         t[i]=10000000\n\n# order = list(range(n))\n# order.sort(reverse=True,key=lambda i:t[i])\n# dum = ''\n# for i in order:\n#     dum += occurences[i]\n\n# a = 0\n# b = 0\n# for c in dum:\n#     if c=='s':\n#         a+=1\n#     else:\n#         b+=a\n# print(b)\nimport sys\nimport functools\n\ndef sdiff(a, b):\n    nas, nah, nbs, nbh = 0, 0, 0, 0\n\n    for c in a:\n        if c == 's':\n            nas += 1\n        elif c == 'h':\n            nah += 1\n\n    for c in b:\n        if c == 's':\n            nbs += 1\n        elif c == 'h':\n            nbh += 1\n\n    return nbs * nah - nas * nbh\n\nn = int(sys.stdin.readline().strip())\ns = sorted(sys.stdin.readlines(), key=functools.cmp_to_key(sdiff))\n\nr, rs = 0, 0\n\nfor ss in s:\n    for c in ss:\n        if c == 's':\n            rs += 1\n        elif c == 'h':\n            r += rs\n\nprint(r)", "def key(x):\n    try:\n        return x.count('h') / x.count('s')\n    except ZeroDivisionError:\n        return 10**9\n\n\nn = int(input())\nt = ''.join(sorted((input() for _ in range(n)), key=key))\n\nres, cnt = 0, 0\nfor ti in t:\n    if ti == 's':\n        cnt += 1\n    if ti == 'h':\n        res += cnt\nprint(res)\n"]