["########################################################\n################# Template #############################\nimport sys\nimport math\ndef Int(): return int(input())\ndef Str(): return input()\ndef Ints(): return list(map(int,input().split(\" \")))\ndef int_arr(): return list(map(int,input().strip().split(\" \")))\ndef str_arr(): return list(map(str,input().split(\" \")))\ndef vsInput():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n#########################################################\n#vsInput()\ndef strings(s):\n    n=len(s)\n    count=0\n    for i in range(n//2):\n        if s[i]!=s[n-1-i]:\n            count=1\n            break\n    return count==0\n    \nn=int(input())\ns=input()\npalindrome = \"\"\nfor i in range(n-1):\n    for j in range(i+1,n+1):\n        nextstring = s[i:j]\n        if strings(nextstring) and len(nextstring)>len(palindrome):\n            palindrome=nextstring\nprint(len(palindrome))\nprint(palindrome)\n", "import sys\r\nfrom sys import maxsize\r\ndef inputint(): return list(map(int, sys.stdin.readline().strip().split()))\r\ndef inputlist(): return list(map(int, sys.stdin.readline().strip().split()))\r\ndef inputstr(): return list(sys.stdin.readline().strip().split())\r\ndef check(s,i,j):\r\n    while i>=0 and j<len(s):\r\n        if s[i]==s[j]:\r\n            i-=1\r\n            j+=1\r\n        else:\r\n            break\r\n    i+=1\r\n    j-=1\r\n    #print(s[i:j+1])\r\n    return j-i+1\r\ndef solve():\r\n    n=int(sys.stdin.readline())\r\n    s=sys.stdin.readline()\r\n    c=0\r\n    start,end=0,0\r\n    for i in range(0,n):\r\n        t1=check(s,i,i)\r\n        t2=check(s,i,i+1)\r\n        c=max(t1,t2)\r\n        #print(c)\r\n        if c>end-start:\r\n            start=i-((c-1)//2)\r\n            end=i+(c//2)\r\n    print(end-start+1)\r\n    print(s[start:end+1])\r\n    \r\nsolve()\r\n", "def check(s,i,j):\r\n    while i>=0 and j<len(s):\r\n        if s[i]==s[j]:\r\n            i-=1\r\n            j+=1\r\n        else:\r\n            break\r\n    i+=1\r\n    j-=1\r\n    #print(s[i:j+1])\r\n    return j-i+1\r\ndef solve():\r\n    n=int(input())\r\n    s=input()\r\n    c=0\r\n    start,end=0,0\r\n    for i in range(0,n):\r\n        t1=check(s,i,i)\r\n        t2=check(s,i,i+1)\r\n        c=max(t1,t2)\r\n        #print(c)\r\n        if c>end-start:\r\n            start=i-((c-1)//2)\r\n            end=i+(c//2)\r\n    print(end-start+1)\r\n    print(s[start:end+1])\r\n    \r\nsolve()\r\n", "def get_longest_palindromes(strng):\r\n    N = len(strng)\r\n    cache = [[None] * N for _ in range(N)]\r\n\r\n    def is_palindrome(lo, hi):\r\n        if cache[lo][hi] is not None:\r\n            return cache[lo][hi]\r\n\r\n        if lo == hi:\r\n            return True\r\n        elif lo + 1 == hi:\r\n            return strng[lo] == strng[hi]\r\n\r\n        ans = False if strng[lo] != strng[hi] else is_palindrome(lo+1, hi-1)\r\n        cache[lo][hi] = ans\r\n        return ans\r\n\r\n    def generate_palindromes():\r\n        ret = []\r\n        longest = N\r\n        found = False\r\n\r\n        if not strng:\r\n            return ['']\r\n\r\n        for l in range(N, 0, -1):\r\n            found = False\r\n            for s in range(N-l+1):\r\n                if is_palindrome(s, s+l-1):\r\n                    found = True\r\n                    ret.append(strng[s:s+l])\r\n            if found:\r\n                break\r\n        return ret\r\n\r\n    return generate_palindromes()\r\ntry:\r\n    n = int(input())\r\n    string = input()\r\n    print(len(get_longest_palindromes(string)[0]))\r\n    print(get_longest_palindromes(string)[0])\r\nexcept:\r\n    pass", "'''\r\nUsing even odd approach\r\n'''\r\n\r\nlength=int(input())\r\ns=input()\r\n\r\nlow, high, maxlen = 0, 0, 1\r\nfor i in range(1,length):\r\n    #even length substring palindrome check\r\n    low = i - 1\r\n    high = i\r\n    while low>=0 and high<length and s[low] == s[high]:\r\n        #while it does not overflow and palindrome property do:\r\n        if high-low+1>maxlen:\r\n            start, maxlen = low, high - low +1\r\n            #start for marking longest palindromes index\r\n            #updating maxlen as new longest palindromic strings length \r\n        low-=1\r\n        high+=1\r\n        #size increases\r\n\r\n\r\n    #odd length substring palindrome check\r\n    low = i-1\r\n    high = i+1\r\n    while low>=0 and high<length and s[low]==s[high]:\r\n        #while it does not overflow and palindrome property do:\r\n        if high - low +1 > maxlen:\r\n            start, maxlen = low, high - low + 1\r\n            #start for marking longest palindromes index\r\n            #updating maxlen as new longest palindromic strings length\r\n        low-=1\r\n        high+=1\r\nprint(maxlen)\r\nprint(s[start:start+maxlen])\r\n\r\n\r\n", "def pal(string):\r\n    for k in range(len(string) // 2):\r\n        if string[k] != string[len(string) - (k + 1)]: return False\r\n    return True\r\n\r\n\r\nn = int(input())\r\ns = input()\r\n\r\nif s == s[::-1]:\r\n    print(len(s))\r\n    print(s)\r\nelse:\r\n    out = ''\r\n    maxLen = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i +j > n: break\r\n            cur = s[i: i + j]\r\n            if len(cur) > maxLen and pal(cur):\r\n                out = cur\r\n                maxLen = len(cur)\r\n            else: pass\r\n    print(maxLen)\r\n    print(out)", "n = int(input())\r\ns = input()\r\n\r\nif s == s[::-1]:\r\n    print(len(s))\r\n    print(s)\r\nelse:\r\n    out = ''\r\n    maxLen = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if i +j > n: break\r\n            cur = s[i: i + j]\r\n            if len(cur) > maxLen and cur == cur[::-1]:\r\n                out = cur\r\n                maxLen = len(cur)\r\n            else: pass\r\n    print(maxLen)\r\n    print(out)", "n = int(input())\r\ns = input()\r\n\r\nif s == s[::-1]:\r\n    print(len(s))\r\n    print(s)\r\nelse:\r\n    out = ''\r\n    maxLen = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            cur = s[i: n - j]\r\n            if cur != out and len(cur) > maxLen and cur != '' and cur == cur[::-1]:\r\n                out = cur\r\n                maxLen = len(cur)\r\n            else: pass\r\n    print(maxLen)\r\n    print(out)\r\n", "n = int(input())\r\ns = input()\r\n\r\nif s == s[::-1]:\r\n    print(len(s))\r\n    print(s)\r\nelse:\r\n    out = ''\r\n    maxLen = 0\r\n    for i in range(n):\r\n        for j in range(n):\r\n            cur = s[i: i + j]\r\n            if cur != out and len(cur) > maxLen and cur != '' and cur == cur[::-1]:\r\n                out = cur\r\n                maxLen = len(cur)\r\n            else: continue\r\n    print(maxLen)\r\n    print(out)\r\n", "def rev(arr):\r\n    cop = arr.copy()\r\n    cop.reverse()\r\n    return cop\r\ntry:\r\n    n = int(input())\r\n    s=[]\r\n    ans =[]\r\n    data = list(input())\r\n    for i in range(n):\r\n        s.append(data[i])\r\n        for j in range(i+1,n):\r\n            s.append(data[j])\r\n            if(s == rev(s)):\r\n                ans.append(''.join(rev(s)))\r\n        s.clear()\r\n        \r\n    r = max(ans,key=len)\r\n    print(len(r))\r\n    print(r)\r\nexcept:\r\n    pass", "def palin(s):\r\n    if s == s[::-1]:\r\n        return 'YES'\r\n    else:\r\n        return 'NO'\r\ntry:\r\n    N = int(input())\r\n    S = input()\r\n    es = [S[i: j] for i in range(len(S)) for j in range(i + 1, len(S) + 1)]\r\n    length = 1\r\n    b = S[0]\r\n    for i in es:\r\n        a = palin(i)\r\n        if a == 'YES':\r\n            if len(i) > length:\r\n                length = len(i)\r\n                b = i\r\n        else:\r\n            pass\r\n    print(length)\r\n    print(b)\r\nexcept:\r\n    pass\r\n\r\n", "n= int(input())\ns=input()\ns1 = set([s[i: j] for i in range(len(s)) \n          for j in range(i + 1, len(s) + 1)])\n          \nfor val in sorted(s1,key= len ,reverse=True):\n    if(val==val[::-1]):\n        print(len(val))\n        print(val)\n        break", "# cook your dish here\nint(input())\ntest_str = input() \n#Find all unique substrings in a given string\nres = set([test_str[i: j] for i in range(len(test_str)) \n          for j in range(i + 1, len(test_str) + 1)])\n\nfor val in sorted(res,key = len,reverse=True):\n    if val == val [::-1]:\n        print(len(val))\n        print(val)\n        break\n", "from itertools import combinations\nN = int(input())\nst = input()\nmx = \"\"\na = [st[x:y] for x, y in combinations(range(len(st) + 1), r = 2)] \nfor i in a:\n    for j in range(len(i)//2 + 1):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        if len(mx) < len(i):\n            mx = i\nprint(len(mx))\nprint(mx)", "from itertools import combinations\nN = int(input())\nst = input()\nmx = \"\"\nans = False\na = [st[x:y] for x, y in combinations(range(len(st) + 1), r = 2)] \nfor i in a:\n    for j in range(len(i)//2):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        if len(mx) < len(i):\n            mx = i\nprint(len(mx))\nprint(mx)", "from itertools import combinations\n\nN = int(input())\nst = input()\nn = len(st)\nmx = \"\"\nans = False\na = [st[x:y] for x, y in combinations(range(len(st) + 1), r = 2)] \nfor i in a:\n    for j in range(len(i)//2):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        if len(mx) < len(i):\n            mx = i\nprint(len(mx))\nprint(mx)", "from itertools import combinations\n\nN = int(input())\nst = input()\nn = len(st)\nmx = \"\"\nans = False\na = set({st[x:y] for x, y in combinations(range(len(st) + 1), r = 2)})\na = list(a)\nfor i in a:\n    for j in range(len(i)//2):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        if len(mx) < len(i):\n            mx = i\nprint(len(mx))\nprint(mx)", "from itertools import combinations\n\nN = int(input())\nst = input()\nn = len(st)\nmx = []\nans = False\na = set({st[x:y] for x, y in combinations(range(len(st) + 1), r = 2)})\na = list(a)\nfor i in a:\n    for j in range(len(i)//2):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        mx.append(i)\n\nm = max(mx, key=len)\nprint(len(m))\nprint(m)", "from itertools import combinations\n\nN = int(input())\nst = input()\nn = len(st)\nmx = []\nans = False\na = [st[x:y] for x, y in combinations(range(len(st) + 1), r = 2)] \nfor i in a:\n    for j in range(len(i)//2):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        mx.append(i)\n\nm = max(mx, key=len)\nprint(len(m))\nprint(m)", "N = int(input())\nst = input()\nn = len(st)\na = []\nmx = []\nans = False\nfor i in range(n):\n    for j in range(i+1,n+1):\n        if st[i:j] not in a:\n            a.append(st[i:j])\nfor i in a:\n    for j in range(len(i)//2):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        mx.append(i)\nm = max(mx, key=len)\nprint(len(m))\nprint(m)\n            \n", "N = int(input())\nst = input()\nn = len(st)\na = set()\nmx = []\nans = False\nfor i in range(n):\n    for j in range(i+1,n+1):\n        a.add(st[i:j])\na = list(a)\nfor i in a:\n    for j in range(len(i)//2):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        mx.append(i)\nm = max(mx, key=len)\nprint(len(m))\nprint(m)\n            \n", "N = int(input())\nst = input()\nn = len(st)\na = set()\nmx =[]\nans = False\nfor i in range(n):\n    for j in range(i+1,n+1):\n        a.add(st[i:j])\na = list(a)\nfor i in a:\n    for j in range(len(i)//2):\n        if i[j]==i[-1-j]:\n            ans = True\n        else:\n            ans = False\n            break\n    if ans == True:\n        mx.append(i)\n    else:\n        continue\nm = max(mx, key=len)\nprint(len(m))\nprint(m)\n            \n", "n = int(input())\na = input()\nb = a[::-1]\nc = [[0 for k in range(n+1)] for l in range(n+1)]\nm = 0\nindex = -1\n# print(a)\n# print(b)\n# print(c)\nfor i in range(n+1):\n    for j in range(n+1):\n        if(i==0 or j==0):\n            c[i][j] = 0\n        elif(a[i-1] == b[j-1]):\n            c[i][j] = 1+c[i-1][j-1]\n            if(c[i][j]>m):\n                m = c[i][j]\n                index = i\n        else:\n            c[i][j] = 0\n\nprint(m)\nprint(b[n-index:n-index+m])\n# print(c)\n# print(index-1)\n# print(m)\n", "# cook your dish here\ndef pal(str):\n    h=len(str)//2\n    i=0\n    j=len(str)-1\n    for k in range(h):\n        if(str[i]!=str[j]):\n            return False\n        i=i+1\n        j=j-1\n    return True\nn=int(input())\ns=(input())\nmax=0\nfor i in range(1,n+1):\n    for j in range(0,n):\n        if(j+i > n):\n            break;\n        str=s[j:j+i]\n        if(pal(str) and len(str)>max):\n            max=len(str)\n            l=str\nprint(max)\nprint(l)\n            \n    \n", "# cook your dish here\ndef pal(str):\n    h=len(str)//2\n    i=0\n    j=len(str)-1\n    for k in range(h):\n        if(str[i]!=str[j]):\n            return False\n        i=i+1\n        j=j-1\n    return True\nn=int(input())\ns=list(input())\nmax=0\nfor i in range(1,n+1):\n    for j in range(0,n):\n        if(j+i > n):\n            break;\n        str=s[j:j+i]\n        if(pal(str) and len(str)>max):\n            max=len(str)\n            l=str\nprint(max)\nfor i in l:\n    print(i,end='')\nprint('')\n            \n    \n"]