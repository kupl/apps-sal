N = int(input())
K = int(input())

keta = len(str(N))
dp = [[[0] * 2 for _ in range(4)] for _ in range(keta + 1)]

dp[0][0][0] = 1
dp[0][1][0] = 0
dp[0][2][0] = 0
dp[0][3][0] = 0
dp[0][0][1] = 0
dp[0][1][1] = 0
dp[0][2][1] = 0
dp[0][3][1] = 0

for i in range(1, keta + 1):
    n = int(str(N)[i - 1])
    if n == 0:
        # 桁，0でない数字の数，未満フラグ
        dp[i][0][0] = dp[i - 1][0][0]
        dp[i][1][0] = dp[i - 1][1][0]
        dp[i][2][0] = dp[i - 1][2][0]
        dp[i][3][0] = dp[i - 1][3][0]

        dp[i][0][1] = dp[i - 1][0][1]
        dp[i][1][1] = dp[i - 1][1][1] + dp[i - 1][0][1] * 9
        dp[i][2][1] = dp[i - 1][2][1] + dp[i - 1][1][1] * 9
        dp[i][3][1] = dp[i - 1][3][1] + dp[i - 1][2][1] * 9
    elif n != 0:
        dp[i][0][0] = 0
        dp[i][1][0] = dp[i - 1][0][0]
        dp[i][2][0] = dp[i - 1][1][0]
        dp[i][3][0] = dp[i - 1][2][0]

        dp[i][0][1] = dp[i - 1][0][0] + dp[i - 1][0][1]
        dp[i][1][1] = (dp[i - 1][1][0] + dp[i - 1][1][1]) \
            + dp[i - 1][0][0] * (n - 1) + dp[i - 1][0][1] * 9
        dp[i][2][1] = (dp[i - 1][2][0] + dp[i - 1][2][1]) \
            + dp[i - 1][1][0] * (n - 1) + dp[i - 1][1][1] * 9
        dp[i][3][1] = (dp[i - 1][3][0] + dp[i - 1][3][1]) \
            + dp[i - 1][2][0] * (n - 1) + dp[i - 1][2][1] * 9
print(sum(dp[keta][K]))
