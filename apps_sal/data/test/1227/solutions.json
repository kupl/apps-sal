["import sys\nsys.setrecursionlimit(10000)\n\nn = input()\nk = int(input())\nm = {}\n\n\ndef doit(n, k):\n    if len(n) == 0:\n        return k == 0\n    d = int(n[0])\n    if (n, k) not in m:\n        ret = 0\n        for i in range(d + 1):\n            if i == d:\n                ret += doit(n[1:], k - 1 if i > 0 else k)\n            else:\n                ret += doit('9' * (len(n) - 1), k - 1 if i > 0 else k)\n        m[(n, k)] = ret\n    return m[(n, k)]\n\n\nprint((doit(n, k)))\n", "import numpy as np\n\n\ndef solve(S, N, K):\n    dp = np.zeros((N + 1, 2, K + 1), dtype=np.int64)\n    dp[0][0][0] = 1\n    for i in range(N):\n        for is_less in range(2):\n            for k in range(K + 1):\n                for l in range(10 if is_less else S[i] + 1):\n                    k_ = k + (l > 0)\n                    if k_ > K:\n                        continue\n                    is_less_ = is_less or l < S[i]\n                    dp[i + 1][int(is_less_)][k_] += dp[i][is_less][k]\n    return dp[N][0][K] + dp[N][1][K]\n\n\nS = np.array([c for c in input()], dtype=np.int64)\nN = len(S)\nK = int(input())\nprint((solve(S, N, K)))\n", "'''\u6841dp\u306e\u5178\u578b\u554f\u984c\u3000n\u4ee5\u4e0b\u306e\u975e\u8ca0\u6574\u6570\u306b\u3064\u3044\u3066\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\nn\u3088\u308a\u5c0f\u3055\u3044\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u5834\u5408\u5206\u3051\u3092\u3057\u3001\u9077\u79fb\u3092\u66f8\u3044\u3066\u5f0f\u306b\u3059\u308c\u3070\u826f\u3044\u3002'''\nimport sys\n\nstdin = sys.stdin\n\nns = lambda: stdin.readline().rstrip()\nni = lambda: int(stdin.readline().rstrip())\nnm = lambda: map(int, stdin.readline().split())\nnl = lambda: list(map(int, stdin.readline().split()))\n\nn = ns()\nk = ni()\ndp = [[[0]*2 for _ in range(k+1)] for _ in range(len(n)+1)]\ndp[0][0][0] = 1\nfor i in range(len(n)):\n    x = int(n[i])\n    for j in range(k):\n        dp[i+1][j+1][1] += dp[i][j][1]*9\n        dp[i+1][j][1] += dp[i][j][1]\n        if x > 0:\n            dp[i+1][j][1] += dp[i][j][0]\n            dp[i+1][j+1][1] += dp[i][j][0]*(x-1)\n            dp[i+1][j+1][0] += dp[i][j][0]\n        else:\n            dp[i+1][j][0] += dp[i][j][0]\n    dp[i+1][k][1] += dp[i][k][1]\n    dp[i+1][k][x>0] += dp[i][k][0]\n    #\u30a4\u30f3\u30c7\u30c3\u30af\u30b9j\u306e\u3068\u3053\u308d\u304c\u62fe\u3044\u304d\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u62fe\u3046\n    #i\u3068k\u306f\u3076\u3064\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u666e\u901a\u306b\u4e8c\u91cd\u30eb\u30fc\u30d7\u3067\u304b\u3051\u308b\nprint(sum(dp[len(n)][k]))", "# coding: utf-8\n# Your code here!\nn = int(input())\nK = int(input())\n\ndef make_list(n):\n    N = []\n    while(n>0):\n        N.append(n%10)\n        n = n //10\n    N.reverse()\n    return N\n\nN = make_list(n)\nm = len(N)\ndp = [[[ 0 for k in range(K+1)] for j in range(2)] for i in range(m)]  \n#dp[i][j][k]:\u4e0a\u304b\u3089i\u6841\u76ee\u3067\u3001j=0:n\u306ei\u6841\u76ee\u307e\u3067\u3068\u7b49\u3057\u304f\u306a\u3044,j=1:\u7b49\u3057\u3044\u30010\u3067\u306a\u3044\u6570\u5b57\u304ck\u500b\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\ndp[0][0][0] =  1 #x = 0\ndp[0][0][1] = N[0] - 1 #0 < x < N[0]\ndp[0][1][0] = 0\ndp[0][1][1] = 1 #x = N[0]\n\nfor i in range(1,m):\n    dp[i][0][0] = 1 #i\u6841\u76ee\u307e\u3067\u5168\u90e80\n    #dp[i][1][0] = 0:\u6700\u4e0a\u4f4d\u304c0\u306f\u3042\u308a\u3048\u306a\u3044\n    for k in range(1,K+1):\n        if N[i] == 0:\n            dp[i][0][k] = dp[i-1][0][k-1] * 9 + dp[i-1][0][k]\n            dp[i][1][k] = dp[i-1][1][k]\n        else:\n            dp[i][0][k] = dp[i-1][0][k-1] * 9 + dp[i-1][0][k] + dp[i-1][1][k] + dp[i-1][1][k-1] * (N[i] - 1)\n            dp[i][1][k] = dp[i-1][1][k-1]\n#print(dp)\nprint((dp[m-1][1][K] + dp[m-1][0][K]))\n", "n=input()\nk=int(input())\nl=len(n)\ndp=[[[0 for _ in range(2)] for _ in range(5)] for _ in range(l+1)]\ndp[0][1][1]=int(n[0])-1\ndp[0][1][0]=1\nfor i in range(1,l):\n  for j in range(4):\n    b=i-1\n    now=int(n[i])\n    if now==0:\n      dp[i][j][0]+=dp[b][j][0]\n    else:\n      dp[i][j][1]+=dp[b][j][0]\n      dp[i][j+1][1]+=dp[b][j][0]*(now-1)\n      dp[i][j+1][0]+=dp[b][j][0]\n    dp[i][j][1]+=dp[b][j][1]\n    dp[i][j+1][1]+=dp[b][j][1]*9\n  dp[i][1][1]+=9\nprint((dp[l-1][k][0]+dp[l-1][k][1]))\n           \n", "N = int(input())\nK = int(input())\nS = str(N)\nL = len(S)\n# dp0 N\u672a\u6e80\u3067\u3042\u308b\u3053\u3068\u304c\u672a\u78ba\u5b9a\n# dp1 N\u672a\u6e80\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\n# [\u4e0a\u304b\u3089\u4f55\u6841][0\u4ee5\u5916\u3092\u9078\u3093\u3060\u56de\u6570]\ndp0 = [[0 for _ in range(5)] for _ in range(L+1)]\ndp1 = [[0 for _ in range(5)] for _ in range(L+1)]\ndp0[0][0] = 1\ndp0[0][1] = 0\nfor i in range(L):\n    D = int(S[i])\n    for j in range(4):\n        if D > 0:\n            # 0\u3092\u9078\u3076\n            dp1[i+1][j] += dp1[i][j] + dp0[i][j]\n            # 1~9\u3092\u9078\u3076\n            dp0[i+1][j+1] += dp0[i][j]\n            dp1[i+1][j+1] += dp1[i][j]*9 + dp0[i][j]*(D-1)\n        else:\n            # 0\u3092\u9078\u3076\n            dp0[i+1][j] += dp0[i][j]\n            dp1[i+1][j] += dp1[i][j]\n            # 1~9\u3092\u9078\u3076\n            dp1[i+1][j+1] += dp1[i][j]*9\nprint((dp0[L][K]+dp1[L][K]))\n", "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf,comb\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nfrom functools import reduce, lru_cache\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef MAP1()  : return map(lambda x:int(x)-1,input().split())\ndef LIST()  : return list(MAP())\ndef LIST1() : return list(MAP1())\n\nn = INT()\nk = INT()\n\n@lru_cache(None)\ndef F(n, k):\n    # n\u4ee5\u4e0b\u30670\u3067\u306a\u3044\u3082\u306e\u304c\u3061\u3087\u3046\u3069k\u500b\u3042\u308b\u6570\u5b57\u306e\u500b\u6570\n    if n < 10:\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        return 0\n    q, r = divmod(n, 10)\n    ret = 0\n    if k >= 1:\n        ret += F(q, k-1) * r\n        ret += F(q-1, k-1) * (9-r)\n    ret += F(q, k)\n    return ret\n\nprint(F(n, k))", "import math\n\n#-\u6841dp\u306a\u308b\u66f8\u304d\u65b9\u306b\u6311\u6226-#\n#-dp[k][j][i] \u5148\u982d\u304b\u3089i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u305f\u3068\u304d\u306b,\n    #- 0\u3067\u306a\u3044\u8981\u7d20\u3092j\u500b\u4f7f\u3063\u3066\u3044\u3066\u3001k=0 \u5c0f\u3055\u3044\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u306a\u3044 , k=1 \u78ba\u5b9a\n\ndef solve(sN):\n    dp = [[[0]*105 for _ in range(4)] for _ in range(2) ] #\u4f59\u5206\u306b\u53d6\u3063\u3066\u304a\u304f\u3002\u3042\u3068\u3067len(N)\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\n    #\u521d\u671f\u6761\u4ef6\n    dp[0][0][0]=1 #\u306a\u306b\u3082\u6c7a\u3081\u3066\u3044\u306a\u72b6\u614b\u3002\u7a7a\u96c6\u5408\u3002\u4e00\u81f4\n    for i in range(len(sN)):\n        for j in range(4):\n            for k in range(2):\n                nd = int(sN[i])#sN\u306e\u4eca\u306e\u6841\u3092nd\u3002\u3053\u308c\u304b\u3089\u6c7a\u3081\u308b\u6841\u6570\u5b57\u3092d\u3068\u3059\u308b\n                for d in range(10):\n                    ni = i+1;nj=j;nk=k\n                    if d != 0: #d\u304c0\u3067\u306a\u3044\u306a\u3089nj\u3092\uff11\u3064\u8db3\u3059\n                        nj +=1\n                    if nj > K:#\u4f7f\u3048\u308b0\u4ee5\u5916\u306e\u6570\u5b57\u306e\u500b\u6570\u3092\u8d85\u3048\u3066\u3044\u305f\u3089\u3060\u3081\n                        continue\n                    if k ==0:#\u3053\u308c\u307e\u3067\u306e\u6841\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u3002\n                        if d > nd:#\u6570\u5b57\u304c\u8d85\u3048\u308b\u304b\u3089\u3060\u3081\n                            continue\n                        if d < nd:#\u5c0f\u3055\u3044\u306a\u3089\u3001\u4ee5\u964d\u5c0f\u3055\u304f\u306a\u308b\u3053\u3068\u304c\u78ba\u5b9a\n                            nk = 1\n                    dp[nk][nj][ni]+=dp[k][j][i]\n    ans = dp[0][K][len(sN)]+dp[1][K][len(sN)]#\u5c0f\u3055\u3044\u3082\u306e\u304c\u78ba\u5b9a\uff06\u4e00\u81f4\n    return ans\n\nsN = input()\nK = int(input())\nlenN = len(sN)\nans = solve(sN)\nprint(ans)\n", "import sys\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninm = lambda: map(int, sys.stdin.readline().split())\ninl = lambda: list(inm())\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\nN = ins()\nK = ini()\n\n\ndef solve():\n    M = len(N)\n    dp_eq = [[0 for _ in range(K + 1)] for _ in range(M)]\n    dp_less = [[0 for _ in range(K + 1)] for _ in range(M)]\n\n    dp_eq[0][K - 1] = 1\n    dp_less[0][K] = 1\n    dp_less[0][K - 1] = ord(N[0]) - ord(\"0\") - 1\n    for i in range(1, M):\n        is_zero = N[i] == \"0\"\n        for k in range(K + 1):\n            if is_zero:\n                dp_eq[i][k] = dp_eq[i - 1][k]\n            elif k < K:\n                dp_eq[i][k] = dp_eq[i - 1][k + 1]\n\n            dp_less[i][k] = dp_less[i - 1][k]\n            if k < K:\n                dp_less[i][k] += dp_less[i - 1][k + 1] * 9\n            if not is_zero:\n                dp_less[i][k] += dp_eq[i - 1][k]\n                if k < K:\n                    dp_less[i][k] += dp_eq[i - 1][k + 1] * (ord(N[i]) - ord(\"0\") - 1)\n    return dp_eq[M - 1][0] + dp_less[M - 1][0]\n\n\nprint(solve())\n", "N = input()\nK = int(input())\n\nif len(N) < K:\n  print(0)\n  return\n\nans = [1, int(N[-1]), 0, 0];\n\ndef combination(N,K):\n  if N < K:\n    return 0\n  else:\n    p = 1\n    for k in range(K):\n      p *= N\n      N -= 1\n    for k in range(1, K+1):\n      p //= k\n    return p\n\nfor k in range(1, len(N)):\n  if int(N[-k-1]) > 0:\n    a = [1, 0, 0, 0]\n    for j in range(1, K+1):\n      a[j] += (9**(j))*combination(k, j)\n      a[j] += (int(N[-k-1])-1)*combination(k, j-1)*(9**(j-1)) + ans[j-1]\n    ans = a\nprint(ans[K])", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef TUPLE(): return tuple(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7 \n#mod = 998244353\n#from decimal import *\n#import numpy as np\n#decimal.getcontext().prec = 10\n\n\nN = list(map(int, list(input())))\nK = INT()\n\nn = len(N)\n\nif n < K:\n\tprint((0))\n\treturn\n\ndp = [[[0, 0] for _ in range(n+1)] for _ in range(n+1)]\ndp[0][0][0] = 1\n\nfor i in range(n):\n\tfor j in range(n):\n\t\tfor k in range(2):\n\t\t\tfor x in range(10):\n\t\t\t\tni, nj, nk = i+1, j, k\n\t\t\t\tif x != 0:\n\t\t\t\t\tnj += 1\n\t\t\t\tif k == 0:\n\t\t\t\t\tif N[i] < x:\n\t\t\t\t\t\tcontinue\n\t\t\t\t\telif x < N[i]:\n\t\t\t\t\t\tnk = 1\n\t\t\t\tdp[ni][nj][nk] += dp[i][j][k]\n\nans = 0\n\nprint((dp[n][K][0] + dp[n][K][1]))\n", "N = input()\nk = int(input())\n# \u6841\u6570\nlength = len(N)\n# dp[ \u6c7a\u3081\u305f\u6841\u6570 ][ \u672a\u6e80\u30d5\u30e9\u30b0 ][0\u4ee5\u5916\u306e\u500b\u6570] := \u7dcf\u6570\ndp = [[[0 for _ in range(k+1)] for _ in range(2)] for _ in range(length+1)]\ndp[0][0][0] = 1\n\nfor i in range(length):\n    max_digit = int(N[i])\n    \n    for k_num in range(k+1):\n        for flag_less in range(2):\n            range_digit = 9 if flag_less else max_digit\n            for d in range(range_digit+1):\n                flag_less_next = 0\n                if flag_less==1 or d < max_digit:\n                    flag_less_next = 1\n                # 0 \u306e\u6642\u306f0\u4ee5\u5916\u306e\u500b\u6570\u306f\u5897\u3048\u306a\u3044\n                k_num_next = k_num\n                if d != 0:\n                    k_num_next = k_num + 1\n                    if k_num_next > k:\n                        continue\n                dp[i+1][flag_less_next][k_num_next] += dp[i][flag_less][k_num]\nprint((dp[length][0][k]+dp[length][1][k]))\n", "n = input()\nk = int(input())\nl = len(n)\n\ndef k2(l, n):\n    ans = 81 * (l - 1) * (l - 2) // 2\n    ans += (int(n[0]) - 1) * 9 * (l - 1)\n    for i, s in enumerate(n[1:]):\n        if s == \"0\":\n            continue\n        ans += int(s)\n        ans += max((l - i - 2), 0) * 9\n        break\n    return ans\n\nif k == 1:\n    ans = (l - 1) * 9 + int(n[0])\nelif k == 2:\n    if l == 1:\n        print(0)\n        return\n    ans = k2(l, n)\nelse:\n    if l < 3:\n        print(0)\n        return\n    ans = 9 ** 3 * (l - 1) * (l - 2) * (l - 3) // 6\n    ans += (int(n[0]) - 1) * 81 * (l - 1) * (l - 2) // 2\n    n = n[1:]\n    n = str(int(n))\n    ans += k2(len(n), n)\nprint(ans)", "def nCkpow(n,k):\n    if n<k:\n        return 0\n    y=1\n    for i in range(k):\n        y*=n-i\n        y//=i+1\n        y*=9\n    return y\ndef f(s,m,k):\n    #print(m,k)\n    if len(s)-m<k:\n        return 0\n    if  k==0:\n        return 1\n    if s[m]=='0':\n        return f(s,m+1,k)\n    l=len(s)-m\n    y=nCkpow(l-1,k)\n    y+=(int(s[m])-1)*nCkpow(l-1,k-1)\n    return y+f(s,m+1,k-1)\nN=input()\nK=int(input())\nprint(f(N,0,K))", "N = input()\nK = int(input())\nm = len(N)\ndp = [[[0] * (K + 1) for _ in range(2)] for _ in range(m + 1)]\ndp[0][0][0] = 1 #[i][j][k] i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u308b\u3000N\u672a\u6e80\u3067\u78ba\u5b9a\u3067j=1 0\u3067\u306a\u3044\u6570\u304ck\u500b\n\nfor i in range(1, m + 1):\n    l = int(N[i - 1])\n    for k in range(K + 1): # 0\u3067\u306a\u3044\u6570\u306e\u500b\u6570 k \u3092\u5909\u5316\u3055\u305b\u3066\u3044\u304f\n        if k == 0: #\u3059\u3079\u3066\u306e\u6570\u304c0\u3067\u306f\u306a\u3044\u5834\u5408\n            dp[i][0][k] = 0 # i\u6841\u76ee\u3000N\u3068\u4e00\u81f4\u3000\u3059\u3079\u3066\u304c0\u3000\u2192\u3000\u8a72\u5f53\u306a\u3057\u30000\u30b3\n            dp[i][1][k] = 1 # i\u6841\u76ee\u3000N\u672a\u6e80\u3000  \u3059\u3079\u3066\u304c0  \u2192\u30000\u306e\u307f\u3000  1\u30b3\n        else: # k >= 1\n            if l != 0: #i\u6841\u76ee 1\uff5e9\n                dp[i][0][k] = dp[i - 1][0][k-1]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1] + dp[i - 1][0][k] + (l-1)*dp[i - 1][0][k-1]\n            else: #i\u6841\u76ee 0\n                dp[i][0][k] = dp[i - 1][0][k]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1]\n\n#print(dp)\nprint((dp[m][0][K] + dp[m][1][K]))\n", "s=input()\nn=len(s)\n\nK=int(input())\n\ndp=[[[0] * 5 for _ in range(2)] for _ in range(n+1)]\ndp[0][0][0]=1\n\nfor i in range(n):\n    ni= int(s[i])\n\n    for k in range(4):\n            # smaller 1 -> \u5168\u90e8OK\n            dp[i + 1][1][k + 1] += dp[i][1][k] * 9;  \n            dp[i + 1][1][k] += dp[i][1][k];  \n\n            # smaller 0,next smaller 1 -> now\u3088\u308a\u5c0f\u3055\u3044\u306e\u3092\u5168\u90e8\n            # \u6b21\u306e\u6841\u304b\u3089smaller\u3067\u3042\u308b\u305f\u3081\u306b\u306fN\uff1cni \u3067\u3042\u308b\u3053\u3068\u304c\u5fc5\u8981\u3067\n            # N\u306f0\u3088\u308a\u5927\u304d\u3044\u5fc5\u8981\u304c\u3042\u308b\u3002\uff080\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u304c\u306a\u3044\uff1d\u78ba\u5b9a\u3057\u306a\u3044\n            if (ni > 0):\n                dp[i + 1][1][k + 1] += dp[i][0][k] * (ni - 1)\n                dp[i + 1][1][k] += dp[i][0][k]\n                \n            # smaller 0,next smaller 0 -> now\u3060\u3051\n            if (ni > 0) :\n                dp[i + 1][0][k + 1] = dp[i][0][k]\n            else:\n                dp[i + 1][0][k] = dp[i][0][k]\n\nans=dp[n][0][K] + dp[n][1][K]\nprint(ans)", "sN = input()\nK = int(input())\nN = int(sN)\n\n\ndef run():\n    dp = [[[0] * 4 for _ in range(2)] for _ in range(len(sN) + 1)]\n    dp[0][0][0] = 1\n\n    for i in range(len(sN)):\n        for j in range(2):\n            # j=0 : \u73fe\u5728\u306e\u6841\u307e\u3067\u6570\u5b57\u304c\u540c\u3058\n            # j=1 : \u3059\u3067\u306b\u5c0f\u3055\u3044\u6570\u5024\u3068\u308f\u304b\u3063\u3066\u3044\u308b\n\n            # lim\u306b\u306f\u6b21\u306e\u6841\u306e\u6570\u5b57\u306e\u6700\u5927\u5024\u3092\u4ee3\u5165\u3059\u308b\n            lim = 9 if j == 1 else (ord(sN[i]) - ord('0'))\n            for k in range(lim + 1):\n                for l in range(4):\n                    nl = l + int(k > 0)\n                    if nl >= 4: continue\n                    dp[i + 1][k < lim or j == 1][nl] += dp[i][j][l]\n\n        # print(dp)\n\n    print((dp[len(sN)][0][K] + dp[len(sN)][1][K]))\n\n\ndef __starting_point():\n    run()\n\n__starting_point()", "import math\nn = int(input())\nK = int(input())\n\ndef calk1(n):\n    if n == 0: return 0\n    m = int(math.log10(n))\n    num = m * 9\n    num += n//(10**m)\n    return num\n\ndef calk2(n):\n    m = int(math.log10(n))\n    num = m * (m - 1) // 2 * 9**2\n    num += (n//(10**m)-1) * m * 9\n    num += calk1(n - (n//(10**m)*10**m))\n    return num\n\ndef calk3(n):\n    m = int(math.log10(n))\n    num = m * (m - 1) * (m - 2) // 6 * 9**3\n    num += (n//(10**m)-1) * (m * (m - 1) // 2 * 9**2)\n    num += calk2(n - (n//(10**m)*10**m))\n    return num\nif n < 10 ** (K - 1): print((0))\nelse:\n    if K == 1: print((calk1(n)))\n    elif K == 2: print((calk2(n)))\n    else: print((calk3(n)))\n", "S = input()\nL = len(S)\nK = int(input())\n\ndp = [[[0,0] for _ in range(K+1)] for _ in range(L+1)]\ndp[0][0][0] = 1\nfor i,c in enumerate(S):\n    c = int(c)\n    for k in reversed(range(K+1)):\n        for d in range(10):\n            nk = k + (d>0)\n            if nk > K: continue\n            dp[i+1][nk][1] += dp[i][k][1]\n            if d > c: continue\n            less = int(d < c)\n            dp[i+1][nk][less] += dp[i][k][0]\nprint(sum(dp[-1][-1]))", "N = list(map(int, list(input())))\nL = len(N)\nK = int(input())\n\ndp = [[[0] * (K+1) for j in range(2)] for i in range(L+1)]\ndp[0][0][0] = 1\n\nfor i in range(L):\n    ni = N[i]\n    if ni == 0:\n        for j in range(K):\n            dp[i+1][1][j+1] += dp[i][1][j] * 9\n        for j in range(K+1):\n            dp[i+1][0][j] += dp[i][0][j]\n    else:\n        for j in range(K+1):\n            dp[i+1][1][j] += dp[i][0][j]\n        for j in range(K):\n            dp[i+1][1][j+1] += (dp[i][0][j] * (ni-1) + dp[i][1][j] * 9)\n            dp[i+1][0][j+1] += dp[i][0][j]\n\n    for j in range(K+1):\n        dp[i+1][1][j] += dp[i][1][j]\n\nprint((dp[L][0][K]+dp[L][1][K]))\n", "import math\ndef isMore(N,K):#- N\u4ee5\u4e0a\u306e\u6570\u3067\u3001\uff10\u3067\u306a\u3044\u306e\u304c\u4e01\u5ea6K\u500b\n    #-len(N)\u3088\u308a\u3082K\u304c\u304a\u304a\u304d\u304b\u3063\u305f\u30890 \u57cb\u3081\u3089\u308c\u306a\u3044\n    if len(N) < K:\n        return 0\n    #\u6700\u9ad8\u4f4d\u306e\u6570\u5b57\u30921\u3064\u7e70\u308a\u4e0a\u3052\u308c\u3070\u3001\u306a\u3093\u3067\u3082\u5927\u304d\u3044\u3002\u305f\u3060\u3057\u3001K\u306f1\u4ee5\u4e0a\n    if K>=1:\n        tmp = (9-int(N[0]))*fact[len(N)-1]//((fact[len(N)-K])*(fact[K-1]))*(9**(K-1))\n        #\u4e00\u6841\u306a\u3089tmp\u3092\u8fd4\u3059\n        if len(N)==1:\n            return tmp\n        #\uff12\u6841\u4ee5\u4e0a\u3042\u308b\u306a\u3089\uff06\u6700\u9ad8\u4f4d\u304c\uff10\u306a\u3089\u3001\u6700\u9ad8\u6841\u7e70\u308a\u4e0a\u3052\uff0b\u6700\u9ad8\u6841\u540c\u3058\uff0b\uff10\u3067\u306a\u3044\u3082\u306e\u304cK\u500b\n        elif len(N)>1 and N[0]=='0':\n            return tmp + isMore(N[1:],K)\n        #\uff12\u6841\u4ee5\u4e0a\u3042\u308b\u306a\u3089\uff06\u6700\u9ad8\u4f4d\u304c\uff10\u4ee5\u5916\u306a\u3089\u3001\u6700\u9ad8\u6841\u7e70\u308a\u4e0a\u3052\uff0b\u6700\u9ad8\u6841\u540c\u3058\uff0b\uff10\u3067\u306a\u3044\u3082\u306e\u304cK-1\u500b\n        elif len(N)>1 and N[0]!='0':\n            return tmp + isMore(N[1:],K-1)\n    #K\u304c0\u306a\u3089\u3069\u3046\u3084\u3063\u3066\u3082N\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u304c\u4f5c\u308c\u306a\u30440\n    if K == 0:\n        return 0\n\nN = input()\nK = int(input())\nlenN = len(N)\nfact = [1]*101\nfor i in range(1,101):\n    fact[i] = fact[i-1]*i\n\nans = fact[lenN]//((fact[lenN-K])*fact[K])*(9**K)\nans -= isMore(N,K)\nprint(ans)\n", "N = input()\nK = int(input())\nnSize = len(N)\n\ndp = [[[0] * 2 for _ in range(K + 1)] for _ in range(nSize + 1)]\ndp[0][0][0] = 1\n\nfor i in range(nSize):\n    for j in range(K + 1):\n        for k in range(2):\n            for l in range(10):\n                ni = i + 1\n                nj = j\n                nk = k\n                if l != 0: nj += 1\n                if nj > K: continue\n                if k == 0:\n                    if l > int(N[i]): continue\n                    if l < int(N[i]): nk = 1\n                dp[ni][nj][nk] += dp[i][j][k]\n\nprint(dp[nSize][K][0] + dp[nSize][K][1])", "N = input()\nK = int(input())\n\nketa = len(N)\n\ndp = [[[0]*(keta+1) for _ in range(K+1)] for _ in range(2)]\n\nfor i in range(keta-1):\n    dp[0][0][i] = 1\ndp[0][1][0] = int(N[0])-1\ndp[1][1][0] = 1\n\nfor i in range(1, K+1):\n    for j in range(i-1, keta):\n        x = int(N[j])\n        dp[0][i][j] += dp[0][i][j-1] + dp[0][i-1][j-1]*9\n        dp[0][i][j] += dp[1][i][j-1] if N[j]!=\"0\" else 0\n        dp[0][i][j] += dp[1][i-1][j-1] * max(int(N[j])-1, 0)\n\n        dp[1][i][j] += dp[1][i][j-1]*int(N[j]==\"0\")\n        dp[1][i][j] += dp[1][i-1][j-1]*int(N[j]!=\"0\")\n\nprint(dp[0][-1][-2] + dp[1][-1][-2])", "import sys\n\n# import numba as nb\nimport numpy as np\n\ninput = sys.stdin.readline\n\n\n# @nb.njit(\"i8(i8[:],i8,i8)\", cache=True)\ndef solve(N, K, L):\n    dp = np.zeros(shape=(L + 1, 2, K + 1), dtype=np.int64)\n    dp[0][0][0] = 1\n    for i in range(L):\n        D = N[i]\n        for j in range(2):\n            d_max = 9 if j == 1 else D\n            for k in range(K + 1):\n                if k < K:\n                    for d in range(d_max + 1):\n                        dp[i + 1][int(j or (d < D))][k + int(d > 0)] += dp[i][j][k]\n                else:\n                    dp[i + 1][j][k] += dp[i][j][k]\n\n    return dp[L][0][K] + dp[L][1][K]\n\n\ndef main():\n    N = np.array(list(input().rstrip()), dtype=np.int64)\n    K = int(input())\n\n    L = N.shape[0]\n    ans = solve(N, K, L)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = input()\nk = int(input())\n\ndp = [[[0] * (k+1) for _ in range(2)] for _ in range(len(n)+1)]\ndp[0][0][0] = 1\n\nfor i in range(1, len(n) + 1):\n    t = int(n[i-1])\n    for j in range(k+1):\n        if t != 0:\n            if j != 0:\n                dp[i][0][j] += dp[i-1][0][j-1]\n                dp[i][1][j] += dp[i-1][1][j-1] * 9 + dp[i-1][0][j-1] * (t-1)\n            dp[i][1][j] += (dp[i-1][1][j] + dp[i-1][0][j])\n        else:\n            dp[i][0][j] += dp[i-1][0][j]\n            if j != 0:\n                dp[i][1][j] += dp[i-1][1][j-1] * 9\n            dp[i][1][j] += dp[i-1][1][j]\n\nprint(dp[len(n)][0][k] + dp[len(n)][1][k])", "n = input()\nk = int(input())\nl = len(n)\ndp = [[[0] * (k + 1) for j in range(2)] for i in range(l + 1)]\ndp[0][0][0] = 1\nfor i in range(l):\n    for j in range(2):\n        for o in range(k + 1):\n            for m in range(10):\n                if not j and m > int(n[i]):\n                    continue\n                f = j or m < int(n[i])\n                o2 = o + (m != 0)\n                if o2 > k:\n                    continue\n                dp[i + 1][f][o2] += dp[i][j][o]\nprint(dp[-1][0][k] + dp[-1][1][k])", "N = input()\nK = int(input())\nL = len(N)\n\ndp =[[[ 0 for _ in range(2)] for _ in range(5)] for _ in range(len(N)+1)]\n# dp[i][j][flg] i+1\u6841\u76ee\u307e\u3067\u30670\u4ee5\u5916\u306e\u500b\u6570\u304cj\u500b\n# flg = 1 -> N \u4ee5\u4e0b\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\n\ndp[0][1][1] = int(N[0])-1\ndp[0][1][0] = 1\ndp[0][0][1]=1\nfor i in range(1,L):\n  for j in range(4):\n    b = i-1 # hitotumae\n    now = int(N[i])\n    ## N\u4e0a\u9650\u306b\u5f35\u308a\u4ed8\u3044\u3066\u308b\u65b9\n    if now == 0:\n      dp[i][j][0] += dp[b][j][0]\n    else:\n      dp[i][j][1] += dp[b][j][0]\n      dp[i][j+1][1] += dp[b][j][0] * (now-1)\n      dp[i][j+1][0] += dp[b][j][0]\n    ## \u5f35\u308a\u4ed8\u3044\u3066\u306a\u3044\u65b9\n    dp[i][j][1] += dp[b][j][1]\n    dp[i][j+1][1] += dp[b][j][1] * 9\n  \n\nprint((dp[L-1][K][0] + dp[L-1][K][1]))\n", "#!/usr/bin python3\n# -*- coding: utf-8 -*-\n# \u6841DP\n# 1\u4ee5\u4e0an\u4ee5\u4e0b\u306e\u6574\u6570\u3067\u3042\u3063\u3066\u3001 10\u9032\u6cd5\u3067\u8868\u3057\u305f\u3068\u304d\u306b\u30010\u3067\u306a\u3044\u6570\u5b57\u304c\u3061\u3087\u3046\u3069\n# k\u500b\u3042\u308b\u3088\u3046\u306a\u3082\u306e\u306e\u500b\u6570\n\nn = input()\nk = int(input())\nl = len(n)\n#dp[i][j][status]   status=0 \u306f\u5c0f\u3055\u3044\u306e\u304c\u672a\u78ba\u5b9a=i\u6587\u5b57\u307e\u3067\u540c\u3058\n#                   status=1 \u306f\u5c0f\u3055\u3044\u3053\u3068\u304c\u78ba\u5b9a\n# i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u3066\u30010\u3067\u306a\u3044\u6841\u304cj\u500b\n# \u521d\u671f\u5024\u306f1 \u304b\u3089\u30b9\u30bf\u30fc\u30c8 s=0,i=0,j=0\ndp = [[[0]*2 for j in range(k+1)] for i in range(l+1)]\ndp[0][0][0] = 1\nfor i in range(l):\n    ni = int(n[i])\n    for j in range(k+1):\n        for st in range(2):\n            for x in range(10):\n                i_ = i+1\n                j_ = j\n                st_ = st\n                if x != 0:\n                    j_ += 1\n                if j_ > k:\n                    continue\n                if st_ == 0 and x > ni:\n                    continue\n                if st_ == 0 and x < ni:\n                    st_ = 1\n                dp[i_][j_][st_] += dp[i][j][st]\n\nprint((sum(dp[l][k])))\n", "N = input()\nK = int(input())\n\nif len(N) < K:\n  print(0)\n  return\n\nans = [1, int(N[-1]), 0, 0];\nnine = [1, 9, 81, 729]\n\ndef combination(N,K):\n  if N < K:\n    return 0\n  elif K == 0:\n    return 1\n  elif K == 1:\n    return N\n  elif K == 2:\n    return N*(N-1)//2\n  else:\n    return N*(N-1)*(N-2)//6\n\nfor k in range(1, len(N)):\n  if int(N[-k-1]) > 0:\n    a = [1, 0, 0, 0]\n    for j in range(1, K+1):\n      a[j] += nine[j]*combination(k, j)\n      a[j] += (int(N[-k-1])-1)*combination(k, j-1)*nine[j-1] + ans[j-1]\n    ans = a\nprint(ans[K])", "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf,comb\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nfrom functools import reduce, lru_cache\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef MAP1()  : return map(lambda x:int(x)-1,input().split())\ndef LIST()  : return list(MAP())\ndef LIST1() : return list(MAP1())\n\nn = INT()\nk = INT()\n\n@lru_cache(None)\ndef F(n, k):\n    # n\u4ee5\u4e0b\u30670\u3067\u306a\u3044\u3082\u306e\u304c\u3061\u3087\u3046\u3069k\u500b\u3042\u308b\u6570\u5b57\u306e\u500b\u6570\n    if n < 10:\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        return 0\n    q, r = divmod(n, 10)\n    ret = 0\n    if k >= 1:\n        # 1\u306e\u4f4d\u304c0\n        ret += F(q, k-1) * r\n        ret += F(q-1, k-1) * (9-r)\n    ret += F(q, k)\n    return ret\n\nprint(F(n, k))", "import sys\n \nread = sys.stdin.read\n \n \ndef main():\n    N, K = map(int, read().split())\n \n    dp1 = [0] * (K + 1)\n    dp2 = [0] * (K + 1)\n    dp1[0] = 1\n \n    for x in map(int, str(N)):\n        for j in range(K, -1, -1):\n            if j > 0:\n                dp2[j] += dp2[j - 1] * 9\n                if x != 0:\n                    dp2[j] += dp1[j - 1] * (x - 1) + dp1[j]\n                    dp1[j] = dp1[j - 1]\n            else:\n                dp1[j] = 0\n                dp2[j] = 1\n \n    print(dp1[K] + dp2[K])\n    return\n \n \ndef __starting_point():\n    main()\n__starting_point()", "from sys import stdin\nfrom functools import lru_cache\nN = int(stdin.readline().rstrip())\nK = int(stdin.readline().rstrip())\n\n@lru_cache(None)\ndef f(N, K):\n    #\u5927\u304d\u3044\u6841\u304b\u3089\u5c0f\u3055\u3044\u6841\u3078\n    if K < 0:\n        return 0\n    if N < 10:\n        if K == 0:\n            # 0\u306e\u307f\n            return 1\n        elif K == 1:\n            # \u4f8b\u3048\u3070N=4 \u306a\u30890\u3067\u306a\u3044\u3082\u306e\u304c1,2,3,4\u306e\u5408\u8a084\u500b\u5b58\u5728\n            return N\n        else:\n            return 0\n    q, r = divmod(N, 10)\n    ret = 0\n    if K >= 1:\n        # 1\u306e\u4f4d\u304c0\u4ee5\u5916\u306e\u5834\u5408K\u3092\u6d88\u8cbb\u3059\u308b\n        ret += f(q, K-1) * r\n        ret += f(q-1, K-1) * (9-r)\n    # 1\u306e\u4f4d\u304c0\u306e\u5834\u5408\n    ret += f(q, K)\n    return ret\n\nprint(f(N, K))", "import math\nn=int(input())\nk=int(input())\n\ndef comb(n,k):\n    s=1\n    for i in range(k):\n        s*=n-i\n    for i in range(k):\n        s//=i+1\n    return s\n\ndef ans(n,k):\n\n    s=0\n    if int(str(n)[0])==0:\n        return 0\n    if len(str(n))<k:\n        return 0\n    elif len(str(n))==k:\n        s+=(int(str(n)[0])-1) * comb(len(str(n))-1,k-1)*9**(k-1)\n        if k-1==0:\n            s+= 1\n        else:\n            s+= ans(int(str(n)[1:]),k-1)\n        return s\n    else:\n        s += (int(str(n)[0]) - 1) * comb(len(str(n)) - 1, k - 1) * 9 ** (k - 1)\n        if k-1==0:\n            s+= 1\n        else:\n            s+= ans(int(str(n)[1:]),k-1)\n        s+=comb(len(str(n))-1,k)*9**(k)\n        return s\n\nprint(ans(n,k))", "N = list(map(int, list(input())))\nL = len(N)\nK = int(input())\n \ndp = [[[0] * (K+1) for j in range(2)] for i in range(L+1)]\ndp[0][0][0] = 1\n \nfor i in range(L):\n    ni = N[i]\n    if ni == 0:\n        for j in range(K):\n            dp[i+1][1][j+1] += dp[i][1][j] * 9\n        for j in range(K+1):\n            dp[i+1][0][j] += dp[i][0][j]\n    else:\n        for j in range(K+1):\n            dp[i+1][1][j] += dp[i][0][j]\n        for j in range(K):\n            dp[i+1][1][j+1] += (dp[i][0][j] * (ni-1) + dp[i][1][j] * 9)\n            dp[i+1][0][j+1] += dp[i][0][j]\n \n    for j in range(K+1):\n        dp[i+1][1][j] += dp[i][1][j]\n \nprint(dp[L][0][K]+dp[L][1][K])", "import sys\n# import re\nimport math\nimport collections\n# import decimal\nimport bisect\nimport itertools\nimport fractions\n# import functools\nimport copy\n# import heapq\nimport decimal\n# import statistics\nimport queue\n\n# import numpy as np\n\nsys.setrecursionlimit(10000001)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: list(map(int, sys.stdin.readline().split()))\nna = lambda: list(map(int, sys.stdin.readline().split()))\n\n\n# ===CODE===\ndef main():\n    n = input()\n    k = ni()\n\n    l = len(n)\n\n    dp_true = [[0 for _ in range(k + 2)] for i in range(l + 1)]\n    dp_false = [[0 for i in range(k + 2)] for j in range(l + 1)]\n    dp_false[0][0] = 1\n\n    for i in range(l):\n        num = int(n[i])\n\n        for j in range(k + 1):\n            dp_true[i + 1][j] += dp_true[i][j]\n            dp_true[i + 1][j + 1] += dp_true[i][j] * 9\n\n            if num > 0:\n                dp_true[i + 1][j + 1] += dp_false[i][j] * (num - 1)\n                dp_true[i + 1][j] += dp_false[i][j]\n\n            if num > 0:\n                dp_false[i + 1][j + 1] += dp_false[i][j]\n            else:\n                dp_false[i + 1][j] += dp_false[i][j]\n\n    print((dp_true[l][k] + dp_false[l][k]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = input()\nK = int(input())\nlen_n = len(n)\ndp = [[[0]*2 for _ in range(K+2)] for _ in range(len_n+1)]\n\n\ndp[0][0][1] = 1\nfor i in range(1, len_n+1):\n    d = int(n[i-1])\n    for j in range(K+1):\n        dp[i][j][0] += dp[i-1][j][0]\n        dp[i][j+1][0] += dp[i-1][j][0]*9\n        if 0 < d:\n            dp[i][j+1][0] += dp[i-1][j][1]*(d-1)\n            dp[i][j][0] += dp[i-1][j][1]\n            dp[i][j+1][1] += dp[i-1][j][1]\n        else:\n            dp[i][j][1] += dp[i-1][j][1]\n\nans = dp[-1][K][0]+dp[-1][K][1]\nprint(ans)\n", "import sys\nimport numpy as np\ninput = lambda: sys.stdin.readline().rstrip()\n\nN = list(map(int, input()))\nK = int(input())\n\n\ndef solve():\n\n    dp_sm = np.zeros((len(N), K + 1), np.int64)\n    dp_lg = np.zeros((len(N), K + 1), np.int64)\n    dp_sm[0][0] = 1\n    dp_sm[0][1] = N[0] - 1\n    dp_lg[0][0] = 0\n    dp_lg[0][1] = 1\n\n    for i in range(len(N) - 1):\n        for j in range(K + 1):\n\n            dp_sm[i + 1][j] += dp_sm[i][j]\n\n            if N[i + 1] != 0:\n                dp_sm[i + 1][j] += dp_lg[i][j]\n\n            if j < K:\n                dp_sm[i + 1][j + 1] += dp_sm[i][j] * 9\n\n            if j < K and N[i + 1] != 0:\n                dp_sm[i + 1][j + 1] += dp_lg[i][j] * (N[i + 1] - 1)\n                dp_lg[i + 1][j + 1] += dp_lg[i][j]\n\n            if N[i + 1] == 0:\n                dp_lg[i + 1][j] += dp_lg[i][j]\n\n    print((dp_sm[len(N) - 1][K] + dp_lg[len(N) - 1][K]))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "N = int(input())\nK = int(input())\n\ndef pow(a,n):\n    ans = 1\n    while n > 1:\n        if bin(a&1)==bin(1):\n            ans = ans*a\n        a = a*a\n        n = n>>1\n    return ans\n\ndef com(N,k):\n    if k<0 or k>N: return 0\n    if k==1:return N\n    elif k==2: return N*(N-1)//2\n    else: return N*(N-1)*(N-2)//6\n\nS = len(str(N))\nN = str(N)\ndef helper(i,k,smaller):\n    if i==S:\n        if k==0: return 1\n        else: return 0\n    if k ==0: return 1\n    if smaller: return com(S-i,k)*(9**k)\n    else:\n        if N[i]=='0': return helper(i+1,k,False)\n        else:\n            zero = helper(i+1,k,True)\n            a = helper(i+1,k-1,True)*(int(N[i])-1)\n            b = helper(i+1,k-1,False)\n            return zero + a + b\nprint((helper(0,K,False)))\n", "N = int(input())\nK = int(input())\n\nketa = len(str(N))\ndp = [[[0] * 2 for _ in range(4)] for _ in range(keta+1)]\n\ndp[0][0][0] = 1\ndp[0][1][0] = 0\ndp[0][2][0] = 0\ndp[0][3][0] = 0\ndp[0][0][1] = 0\ndp[0][1][1] = 0\ndp[0][2][1] = 0\ndp[0][3][1] = 0\n\nfor i in range(1, keta+1):\n    n = int(str(N)[i-1])\n    if n == 0:\n        # \u6841\uff0c0\u3067\u306a\u3044\u6570\u5b57\u306e\u6570\uff0c\u672a\u6e80\u30d5\u30e9\u30b0\n        dp[i][0][0] = dp[i-1][0][0]\n        dp[i][1][0] = dp[i-1][1][0]\n        dp[i][2][0] = dp[i-1][2][0]\n        dp[i][3][0] = dp[i-1][3][0]\n        \n        dp[i][0][1] = dp[i-1][0][1]\n        dp[i][1][1] = dp[i-1][1][1] + dp[i-1][0][1]*9\n        dp[i][2][1] = dp[i-1][2][1] + dp[i-1][1][1]*9\n        dp[i][3][1] = dp[i-1][3][1] + dp[i-1][2][1]*9\n    elif n != 0:\n        dp[i][0][0] = 0\n        dp[i][1][0] = dp[i-1][0][0]\n        dp[i][2][0] = dp[i-1][1][0]\n        dp[i][3][0] = dp[i-1][2][0]\n        \n        dp[i][0][1] = dp[i-1][0][0] + dp[i-1][0][1]\n        dp[i][1][1] = (dp[i-1][1][0]+dp[i-1][1][1]) \\\n                     + dp[i-1][0][0]*(n-1) + dp[i-1][0][1]*9\n        dp[i][2][1] = (dp[i-1][2][0]+dp[i-1][2][1]) \\\n                     + dp[i-1][1][0]*(n-1) + dp[i-1][1][1]*9\n        dp[i][3][1] = (dp[i-1][3][0]+dp[i-1][3][1]) \\\n                     + dp[i-1][2][0]*(n-1) + dp[i-1][2][1]*9\nprint(sum(dp[keta][K]))", "s = input()\nK = int(input())\nn =len(s)\n\ndp = [[[0] * 2 for _ in range(4)] for _ in range(101)]\n\ndp[0][0][0]=1\nfor i in range(n):\n    for j in range(4):\n        for k in range(2):\n            nd = int(s[i])\n\n            for d in range(10):\n                ni = i+1; nj = j; nk = k\n\n                if d != 0 :nj+=1\n                if nj > K:continue\n                if k==0:\n                    if d > nd:continue\n                    if d < nd:nk =1\n                dp[ni][nj][nk] += dp[i][j][k]\n                # print(d,k)\n                # print(i,j,k,dp[i][j][k])\n                # print(ni,nj,nk,dp[ni][nj][nk])\n                # [print(i) for i in dp]\n\nans=dp[n][K][0] + dp[n][K][1]\nprint(ans)\n# [print(i) for i in dp]\n", "def zeroTrim(s):\n    while s[0] == '0':\n        if len(s) == 1:\n            break\n        s = s[1:]\n    return s\n\nN = input()\nK = int(input())\n\ndef calc(N, K):\n    digit = len(N)\n    res = 0\n\n    if K == 1:\n        if digit > 1:\n            res += (digit - 1) * 9\n        res += int(N[0])\n    elif K == 2:\n        if digit <= 1:\n            return 0\n        if digit > 2:\n            res += 9 * 9 * (digit - 1) * (digit - 2) // 2\n        for i in range(int(N[0])-1):\n            res += calc('9'*(digit-1), 1)\n        res += calc(zeroTrim(N[1:]), 1)\n    else:\n        if digit <= 2:\n            return 0\n        if digit > 3:\n            res += 9 * 9 * 9 * (digit - 1) * (digit - 2) * (digit - 3) // 6\n        \n        for i in range(int(N[0])-1):\n            res += calc('9'*(digit-1), 2)\n        res += calc(zeroTrim(N[1:]), 2)\n    return res\n\nprint(calc(N, K))", "n = input()\nl = len(n)\nk = int(input())\ndp = [[[0]*(k+1) for _ in range(2)] for _ in range(l+1)]\ndp[0][0][0] = 1\nfor i in range(l):\n    nd = int(n[i])\n    if nd == 0:\n        for j in range(k+1):\n            dp[i+1][0][j] += dp[i][0][j]\n    else:\n        for j in range(k+1):\n            dp[i+1][1][j] += dp[i][0][j]\n        for j in range(k):\n            dp[i+1][0][j+1] += dp[i][0][j]\n            dp[i+1][1][j+1] += dp[i][0][j]*(nd-1)\n    for j in range(k):\n        dp[i+1][1][j+1] += dp[i][1][j]*9\n    for j in range(k+1):\n        dp[i+1][1][j] += dp[i][1][j]\n# for i in range(l+1): print(dp[i])\nprint(dp[l][0][k]+dp[l][1][k])", "#!/usr/bin/env python3\nimport sys\n# from scipy.special import comb\nsys.setrecursionlimit(10**4)\nfrom math import factorial\n\ndef comb(n, r):\n    '''\n    >>> comb(2, 1)\n    2\n    >>> comb(3, 2)\n    3\n    '''\n    if r == 0:\n        return 1\n    if n == 0 or r > n:\n        return 0\n    return factorial(n) // factorial(n - r) // factorial(r)\n\ndef f(S, i, k):\n    # \u3053\u3053\u306b\u6765\u308b\u306e\u306f\u7e70\u308a\u4e0b\u304c\u308a\u304c\u767a\u751f\u3057\u3066\u3044\u306a\u3044\u72b6\u614b...\n    if k == 0:\n        # \u4ee5\u964d\u306f0\u3092\u9078\u3073\u7d9a\u3051\u308b\u3057\u304b\u306a\u3044\n        return 1\n    if len(S) <= i:\n        # \u8d70\u7834\u3057\u305f\u306e\u306bK\u500b\u4f7f\u3044\u304d\u308c\u3066\u3044\u306a\u3044\n        return 0\n    n = int(S[i])\n    if n == 0:\n        # \u6ce8\u76ee\u3059\u308b\u6841\u304c0\u306e\u5834\u5408\u30010\u3092\u9078\u3076\u3057\u304b\u306a\u3044\n        return f(S, i+1, k)\n    # \u6ce8\u76ee\u3059\u308b\u6841\u306e\u6570\u5024n\u3088\u308a\u5c0f\u3055\u3044\u5024\u3092\u9078\u3079\u3070\u3001\u4ee5\u964d\u306f\u7e70\u308a\u4e0b\u3052\u3067\u9078\u3073\u653e\u984c\n    ret = (n - 1) * comb(len(S)-i-1, k-1) * pow(9, k-1)\n    ret += comb(len(S)-i-1, k) * pow(9, k)\n    # \u6ce8\u76ee\u3059\u308b\u6841\u306e\u6570\u5024n\u3092\u9078\u3093\u3060\u5834\u5408\u3001\u7e70\u308a\u4e0b\u3052\u304c\u3067\u304d\u306a\u3044\u72b6\u614b\u304c\u7d9a\u884c    \n    ret += f(S, i+1, k-1)\n    return ret\n\ndef solve(S: str, K: int):\n    return f(S, 0, K)\n\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = next(tokens)  # type: str\n    K = int(next(tokens))  # type: int\n    print((solve(N, K)))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\ndef __starting_point():\n    test()\n    main()\n\n__starting_point()", "import sys\n\nfrom functools import lru_cache\n\nN = int(sys.stdin.readline().rstrip())\nK = int(sys.stdin.readline().rstrip())\n\n\n@lru_cache(None)\ndef F(N, K):\n    \"\"\"(0\u4ee5\u4e0a\uff09N\u4ee5\u4e0b\u3067\u30010\u3067\u306a\u3044\u3082\u306e\u304c\u3061\u3087\u3046\u3069K\u500b\"\"\"\n\n    assert N >= 0  # N\u304c\u975e\u8ca0\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\n\n    if N < 10:  # N \u304c\u4e00\u6841\n        if K == 0:  # \u4f7f\u3048\u308b 0 \u4ee5\u5916\u306e\u6570\u304c\u306a\u3044\u5834\u5408\n            return 1  #\n        if K == 1:\n            return N  # 1,2,...,N \u307e\u3067\u306e\u3069\u308c\u304b\n        return 0  # \u305d\u308c\u4ee5\u4e0a K \u304c\u4f59\u3063\u3066\u3044\u305f\u3089\u4f5c\u308c\u306a\u3044\n\n    q, r = divmod(N, 10)  # N = 10*q + r \u3068\u7f6e\u304f\n\n    ret = 0\n    if K >= 1:\n        # 1\u306e\u4f4d(r)\u304c nonzero\n        ret += F(q, K - 1) * r  #\n        ret += F(q - 1, K - 1) * (9 - r)\n\n    # 1\u306e\u4f4d(r)\u304c zero\n    ret += F(q, K)\n    return ret\n\n\nprint((F(N, K)))\n", "def f(N,K):\n    n=len(str(N))\n    if n==1:\n        if K==1:\n            return N\n        else:\n            return 0\n    elif n==2:\n        if K==1:\n            return 9+N//10\n        elif K==2:\n            return N-9-N//10\n        else:\n            return 0\n    elif n==3:\n        if K==1:\n            return 18+N//100\n        elif K==2:\n            return 81+18*((N//100)-1)+f(N%100,1)\n        else:\n            return 81*((N//100)-1)+f(N%100,2)\n    else:\n        if K==1:\n            return 9*(n-1)+N//(10**(n-1))\n        elif K==2:\n            return 81*(n-1)*(n-2)/2+9*(n-1)*((N//((10**(n-1))))-1)+f(N%(10**(n-1)),1)\n        else:\n            return 243*(n**3-6*(n**2)+11*n-6)/2+81*(n-1)*(n-2)*((N//(10**(n-1)))-1)/2+f(N%(10**(n-1)),2)\nN=int(input())\nK=int(input())\nprint(int(f(N,K)))", "N=list(map(int,input()))\nK=int(input())\nL = len(N)\ndp = [[[0]*(L+1) for _ in range(4)] for _ in range(2)]\ndp[0][0][0] = 1\nfor i in range(2):\n    for j in range(4):\n        for k in range(L):\n            for d in range(10 if i else N[k]+1):\n                fl = 1 if i == 1 or d < N[k] else 0\n                cnt = j+1 if d != 0 else j\n                if cnt > K:\n                    continue\n                dp[fl][cnt][k+1] += dp[i][j][k]\nprint(dp[0][K][L]+dp[1][K][L])", "N = input()\nK = int(input())\n\nif len(N) < K:\n  print(0)\n  return\n\nketa = []\nfor k in range(len(N)):\n  keta.append(int(N[-k-1]))\nans = [1, keta[0], 0, 0];\n\ndef combination(N,K):\n  if N < K:\n    return 0\n  else:\n    p = 1\n    for k in range(K):\n      p *= N\n      N -= 1\n    for k in range(1, K+1):\n      p //= k\n    return p\nfor k in range(1, len(N)-1):\n  if keta[k] > 0:\n    a = [1, 0, 0, 0]\n    for j in range(1, 4):\n      a[j] += (9**(j))*combination(k, j)\n      a[j] += (keta[k]-1)*combination(k, j-1)*(9**(j-1)) + ans[j-1]\n    ans = [] + a\nanswer = (9**(K))*combination(len(N)-1, K)\nanswer += (keta[-1]-1)*(9**(K-1))*combination(len(N)-1, K-1)\nanswer += ans[K-1]\nprint(answer)", "strN = input().rstrip()\nK = int(input())\n\nmaxD = len(strN)\n\ndp = [[[0]*(K+1) for j in range(2)] for i in range(maxD+1)]\ndp[0][0][0] = 1\nfor d, Nd in enumerate(strN):\n    Nd = int(Nd)\n    for isLtN in range(2):\n        for numNot0 in range(K+1):\n            for x in range(10):\n                if not isLtN and x > Nd: continue\n                isLtN2 = isLtN or x < Nd\n                numNot02 = numNot0 + (x != 0)\n                if numNot02 > K: continue\n                dp[d+1][isLtN2][numNot02] += dp[d][isLtN][numNot0]\n\nans = dp[-1][0][K] + dp[-1][1][K]\nprint(ans)\n", "import numpy as np\n\nN = input()\nK = int(input())\n\nn = len(N)\ndp0 = np.zeros((n, K+1), np.int64)\ndp1 = np.zeros((n, K+1), np.int64)\n\ndp0[0, 0] = 1\ndp0[0, 1] = int(N[0]) - 1\ndp1[0, 1] = 1\nfor i, d in enumerate(N[1:]):\n    dp0[i+1] += dp0[i]\n    dp0[i+1, 1:] += dp0[i, :-1] * 9\n    if int(d) == 0:\n        dp1[i+1] = dp1[i]\n    elif int(d) == 1:\n        dp0[i+1] += dp1[i]\n        dp1[i+1, 1:] = dp1[i, :-1]\n    elif int(d) >= 2:\n        dp0[i+1] += dp1[i]\n        dp0[i+1, 1:] += dp1[i, :-1] * (int(d) - 1)\n        dp1[i+1, 1:] = dp1[i, :-1]\n\nprint((dp0[-1, K] + dp1[-1, K]))\n", "# \u6841DP\u7df4\u7fd2\n# \u300c0\u4ee5\u5916\u306e\u5024\u3092k\u3088\u308a\u591a\u304f\u4f7f\u3063\u305f\u304b\u300d\u3067\u3068\u304f\u306b\u679d\u5207\u308a\u3057\u3066\u306a\u3044\n# \u30eb\u30fc\u30d7\u3067\u3069\u3046\u3057\u3066\u3082\u304b\u3051\u306a\u3044...\n\nfrom sys import setrecursionlimit\n\nsetrecursionlimit(10**7)\n\nn = input()\nk = int(input())\ndp = {}\n\n\ndef rec(i, smaller, count):\n    if (i, smaller, count) in dp:\n        return dp[(i, smaller, count)]\n    if i == len(n):\n        if count == k:\n            return 1\n        else:\n            return 0\n    limit = 10\n    if not smaller:\n        limit = int(n[i]) + 1\n    ret = 0\n    for j in range(limit):\n        if smaller or j < int(n[i]):\n            if j == 0:\n                ret += rec(i + 1, True, count)\n            else:\n                ret += rec(i + 1, True, count + 1)\n        else:\n            if j == 0:\n                ret += rec(i + 1, False, count)\n            else:\n                ret += rec(i + 1, False, count + 1)\n    dp[(i, smaller, count)] = ret\n    return ret\n\n\nprint((rec(0, False, 0)))\n", "N=int(input())\nK=int(input())\n#for i in range(100):\n # for j in range(100):\n  #  for k in range(100):\n   #   if(i!=j and i!=k and j!=k):\n    #    if(i*(10**))\nans=0\nif(K==3):\n  for a in range(1,10):\n    for b in range(1,10):\n      for c in range(1,10):\n        ap=0\n        bp=0\n        cp=0\n        while(a*(10**ap)<=N):#a\u306b\u3064\u3044\u3066\u307f\u308b\n          ap+=1\n        ap-=1\n        while(a*(10**ap)+b*(10**bp)<=N and bp<ap):#b\u306b\u3064\u3044\u3066\u307f\u308b\n          bp+=1\n        bp-=1\n        while(a*(10**ap)+b*(10**bp)+c*(10**cp)<=N and cp<bp):#c\u306b\u3064\u3044\u3066\u307f\u308b\n          cp+=1\n        cp-=1\n        ans+=1+cp+(bp*(bp-1))//2+(ap*(ap-1)*(ap-2))//6\n  print(ans)\nelif(K==2):\n  ans=0\n  for i in range(100):\n    for j in range(100):\n      if(i>j):\n        for a in range(1,10):\n          for b in range(1,10):\n            if(a*(10**i)+b*(10**j)<=N):\n              ans+=1\n  print(ans)\nelse:\n  ans=0\n  for i in range(100):\n    for a in range(1,10):\n      if(a*(10**i)<=N):\n        ans+=1\n  print(ans)", "import numpy as np\n\nN = list(map(int, input()))\nK = int(input())\nl = len(N)\nif l < K:\n    print((0))\n    return\n\n# dp[d][k] := d \u6841\u76ee\u307e\u3067\u898b\u3066 0 \u3067\u306a\u3044\u6570\u5b57\u304c k \u500b\u3042\u308b\u5834\u5408\u306e\u6570\ndp_small = np.zeros((l+1, K+1), dtype=np.int64)\ndp_large = np.zeros((l+1, K+1), dtype=np.int64)\ndp_large[0, 0] = 1\nfor d, digit in enumerate(N, 1):\n    for k in range(K+1):\n        # 0 \u3092\u914d\u7f6e\u3059\u308b\n        dp_small[d, k] += dp_small[d-1, k]\n        if digit != 0:\n            dp_small[d, k] += dp_large[d-1, k]\n            dp_large[d, k] = 0\n        else:\n            dp_large[d, k] = dp_large[d-1, k]\n        if k!=0:\n            # 0 \u4ee5\u5916\u3092\u914d\u7f6e\u3059\u308b\n            dp_small[d, k] += dp_small[d-1, k-1] * 9\n            if digit >= 1:\n                dp_small[d, k] += dp_large[d-1, k-1] * (digit-1)\n                dp_large[d, k] += dp_large[d-1, k-1]\nprint((dp_small[l, K] + dp_large[l, K]))\n", "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf,comb\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nfrom functools import reduce\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return list(map(int,input().split()))\ndef MAP1()  : return [int(x)-1 for x in input().split()]\ndef LIST()  : return list(MAP())\ndef LIST1() : return list(MAP1())\n\ndef solve(n, k, m):\n    ans = 0\n    for i in range(k, m):\n        # i: \u6841\u6570\n        if k == 1:\n            ans += 9\n        else:\n            ans += pow(9, k)*comb(i-1, k-1)\n    if k == 1:\n        ans += int(n[0])\n    elif k == 2:\n        ans += (int(n[0])-1)*pow(9, k-1)*comb(m-1, k-1)\n        j = 1\n        while j < m and n[j] == '0':\n            j += 1\n        if j < m:\n            ans += int(n[j]) + pow(9, k-1)*comb(m-1-j, k-1)\n    else:\n        while m >= k and n.count('0') > m - k:\n            n = str(int(n)-1)\n\n        if m > len(n):\n            print(ans)\n            return ans\n\n        m = len(n)\n        a = []\n        for i in range(m):\n            if len(a) < 3 and n[i] != '0':\n                a.append(i)\n\n        if len(a) == 3:\n            ans += 1 + int(n[a[2]])-1 + 9*comb(m-1-a[2], 1)\n            ans += (int(n[a[1]])-1)*9*comb(m-1-a[1], 1) + 9*9*comb(m-1-a[1], 2)\n            ans += (int(n[a[0]])-1)*9*9*comb(m-1-a[0], 2)\n    print(ans)\n    return ans\n\ndef solve2(n, k, m):\n    ans = 0\n    for i in range(1, int(n)+1):\n        if len(str(i)) - str(i).count('0') == k:\n            ans += 1\n    print(ans)\n    return ans\n\ndef __starting_point():\n    n = input()\n    k = INT()\n    m = len(n)\n\n    solve(n,k,m)\n    #solve2(n,k,m)\n    #for i in range(10000):\n    #    print(i)\n    #    if solve(str(i), k, len(str(i))) != solve2(str(i), k, len(str(i))):\n    #        break\n\n__starting_point()", "n = list(map(int, list(input())))\nk = int(input())\n\ndp0 = [0]*3\ndp1 = [[0]*3]*len(n)\ndp0[0] = 1\ndp1[0][0] = max(0, n[0]-1)\nfor i in range(1, len(n)):\n    dp1[i] = [\n        dp1[i-1][0]+dp0[0]*(n[i]!=0)+9,\n        dp1[i-1][1]+dp0[1]*(n[i]!=0)+dp0[0]*max(0, n[i]-1)+dp1[i-1][0]*9,\n        dp1[i-1][2]+dp0[2]*(n[i]!=0)+dp0[1]*max(0, n[i]-1)+dp1[i-1][1]*9,\n    ]\n    if n[i] != 0:\n        dp0 = [0]+dp0[:2]\nprint(dp0[k-1]+dp1[-1][k-1])", "import numpy as np\n\ns = input()\nn = int(s)\nk = int(input())\n\nm = len(s)\ndp = np.zeros((m+1, 2, k+2), dtype=np.int64)\ndp[0][1][0] = 1\nfor cs in range(m):\n    cn = int(s[cs])\n    for ck in range(k+2):\n        if ck == k+1:\n            nk = ck\n        else:\n            nk = ck + 1\n        dp[cs+1][0][nk] += 9 * dp[cs][0][ck]\n        dp[cs+1][0][ck] += dp[cs][0][ck]\n\n        if cn == 0:\n            dp[cs+1][1][ck] += dp[cs][1][ck]\n        else:\n            dp[cs+1][1][nk] += dp[cs][1][ck]\n            dp[cs+1][0][nk] += (cn - 1) * dp[cs][1][ck]\n            dp[cs+1][0][ck] += dp[cs][1][ck]\nprint(dp[m][0][k] + dp[m][1][k] )", "import sys\n\ninput = sys.stdin.readline\n\n\ndef solve(N, K, L):\n    dp = [[[0] * (K + 1) for _ in range(2)] for _ in range(L + 1)]\n    dp[0][0][0] = 1\n    for i in range(L):\n        D = N[i]\n        for j in range(2):\n            d_max = 9 if j == 1 else D\n            for k in range(K + 1):\n                if k < K:\n                    for d in range(d_max + 1):\n                        dp[i + 1][int(j or (d < D))][k + int(d > 0)] += dp[i][j][k]\n                else:\n                    dp[i + 1][j][k] += dp[i][j][k]\n\n    return dp[L][0][K] + dp[L][1][K]\n\n\ndef main():\n    N = list(map(int, input().rstrip()))\n    K = int(input())\n\n    L = len(N)\n    ans = solve(N, K, L)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef solve():\n\n    N = list(map(int, input()))\n    K = int(input())\n\n    if K == 1:\n        ans = (len(N) - 1) * 9 + N[0]\n\n    elif K == 2:\n\n        if len(N) < 2:\n            print((0))\n            return\n\n        ans = (9 ** 2) * (len(N) - 1) * (len(N) - 2) // 2\n        ans += (N[0] - 1) * (len(N) - 1) * 9\n\n        for i in range(1, len(N)):\n            if N[i] != 0:\n                ans += N[i] + (len(N) - i - 1) * 9\n                break\n\n    elif K == 3:\n\n        if len(N) < 3:\n            print((0))\n            return\n\n        ans = (9 ** 3) * (len(N) - 1) * (len(N) - 2) * (len(N) - 3) // 6\n        ans += (N[0] - 1) * (9 ** 2) * (len(N) - 1) * (len(N) - 2) // 2\n\n        for i in range(1, len(N) - 1):\n            if N[i] != 0:\n                ans += (9 ** 2) * (len(N) - i - 1) * (len(N) - i - 2) // 2\n                ans += (N[i] - 1) * (len(N) - i - 1) * 9\n                for j in range(i + 1, len(N)):\n                    if N[j] != 0:\n                        ans += N[j] + (len(N) - j - 1) * 9\n                        break\n                break\n\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "# from collections import defaultdict\nimport math\n\ndef comb(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\nN = int(input())\nK = int(input())\nketa = len(str(N))\ndp = [[0]*(keta) for i in range(4)]\nans = 0\n\nfor k in range(1, 4):\n    for i in range(1, keta):\n        if i<k:\n            continue\n        else:\n            dp[k][i] = comb(i-1, i-k)*(9**k)\n#print(dp)\n# dp[k][i]: i\u6841\u3067\u3001k\u500b\u306e0\u3067\u306a\u3044\u6570            \n\nans += sum(dp[K]) # (N \u306e\u6841)-1 \u307e\u3067\u306e\u7d2f\u7a4d\u548c\n\ncount = 0\n\nfor j in range(keta):\n    t = int(str(N)[j])\n    \n\n    if j==0:\n        count+=1\n        ans += sum(dp[K-count])*(t-1)\n        if count == K: # K==1\n            ans+=t\n            break\n        continue\n        \n    elif j==keta-1:\n        if t!=0:\n            count+=1\n        if count==K:\n            ans+=t\n        break\n        \n        \n    if t !=0:\n        count+=1\n        if count==K:\n            ans+=sum(dp[K-count+1][:keta-j]) #0\u306e\u3068\u304d\n            ans+=t\n            break\n        \n        ans += sum(dp[K-count][:keta-j])*(t-1)  #0\u3088\u308a\u5927\u304d\u3044\u3068\u304d\n        ans += sum(dp[K-count+1][:keta-j])   #0\u306e\u3068\u304d\n        \n   \n        \nprint(ans)", "N = input()\nn = len(N)\nk = int(input())\ndp = [[[0]*2 for _ in range(k+1)]for _ in range(n+1)]\ndp[0][0][1] = 1\nfor i in range(1, n+1):\n    d = int(N[i-1])\n    for j in range(k+1):\n        if 0 <= j-1:\n            dp[i][j][0] += dp[i-1][j-1][0]*9\n        dp[i][j][0] += dp[i-1][j][0]\n        if d:\n            if 0 <= j-1:\n                dp[i][j][1] += dp[i-1][j-1][1]\n                dp[i][j][0] += dp[i-1][j-1][1]*(d-1)\n            dp[i][j][0] += dp[i-1][j][1]\n        else:\n            dp[i][j][1] += dp[i-1][j][1]\n\nans = dp[-1][-1][0]+dp[-1][-1][1]\nprint(ans)\n", "\ndef resolve():\n    # \u5341\u9032\u6570\u8868\u8a18\u30671~9\u307e\u3067\u306e\u6570\u5b57\u304cK\u500b\u5165\u308bN\u6841\u306e\u6570\u5b57\u306e\u6570\u3092\u7b54\u3048\u308b\u554f\u984c\n    S = input()\n    K = int(input())\n    n = len(S)\n\n    # dp[i][k][smaller]:\n    # i:\u6841\u6570\n    # K:0\u4ee5\u5916\u306e\u6570\u5b57\u3092\u4f7f\u3063\u305f\u56de\u6570\n    # smaller:i\u307e\u3067\u306e\u6841\u3067\u5024\u4ee5\u4e0a\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u304b\u306e\u30d5\u30e9\u30b0\n\n    dp = [[[0] * 2 for _ in range(4)] for _ in range(105)]\n    dp[0][0][0] = 1\n\n    for i in range(n):\n        for j in range(4):\n            for k in range(2):\n                nd = int(S[i])\n                for d in range(10):\n                    ni = i+1\n                    nj = j\n                    nk = k\n                    if d != 0:\n                        nj += 1\n                    if nj > K:\n                        continue\n                    if k == 0:\n                        if d > nd: # \u5024\u3092\u8d85\u3048\u3066\u3044\u308b\n                            continue\n                        if d < nd:\n                            nk += 1\n                    dp[ni][nj][nk] += dp[i][j][k]\n    ans = dp[n][K][0] + dp[n][K][1]\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n__starting_point()", "S = input()\nN = len(S)\nK = int(input())\n\ndp = [[[0] * 2 for _ in range(4)] for _ in range(N + 10)]\ndp[0][0][0] = 1\n\nfor i, s in enumerate(S):\n    nd = int(s)\n    for j in range(K+1):\n        for k in range(2):\n            for d in range(10):\n                ni = i + 1\n                nj = j\n                nk = k\n                if d != 0:\n                    nj += 1\n                if nj > K:\n                    continue\n                if nk == 0:\n                    if d > nd:\n                        continue\n                    if d < nd:\n                        nk += 1\n                dp[ni][nj][nk] += dp[i][j][k]\n\nprint(dp[N][K][0]+dp[N][K][1])", "n=input()\nk=int(input())\n\nlen_n=len(n)\ndp0=[[0]*(k+1) for _ in range(len_n+1)]\ndp1=[[0]*(k+1) for _ in range(len_n+1)]\ndp0[0][0]=1\n# dp0: N\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u304c\u672a\u78ba\u5b9a\n# dp1: N\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\nfor i, n_i in enumerate(n):\n    for k_i in range(k+1):\n        if n_i=='0':\n            dp0[i+1][k_i]+=dp0[i][k_i]\n            dp1[i+1][k_i]+=dp1[i][k_i]\n            if k_i<k:\n                dp1[i+1][k_i+1]+=9*dp1[i][k_i]\n        else:\n            if k_i<k:\n                dp0[i+1][k_i+1]+=dp0[i][k_i]\n                dp1[i+1][k_i+1]+=(int(n_i)-1)*dp0[i][k_i]\n                dp1[i+1][k_i+1]+=9*dp1[i][k_i]\n            dp1[i+1][k_i]+=dp0[i][k_i]\n            dp1[i+1][k_i]+=dp1[i][k_i]\n\nprint((dp0[-1][k]+dp1[-1][k]))\n", "import numpy as np\n\nN = input()\nK = int(input())\n\ndp = np.zeros((len(N)+1, K+1), np.int64)\ndp[1, 1] = 1\nfor d in range(1, len(N)):\n    dp[d+1] = dp[d]\n    dp[d+1, 1:] += dp[d, :-1]\n\nans = 0\nfor i, c in enumerate(N):\n    n = len(N)-i\n    if c != '0':\n        ans += np.sum(dp[:n, K]) * (9 ** K)\n        ans += dp[n, K] * (int(c) - 1) * (9 ** (K-1))\n        K -= 1\n        if K == 0:\n            ans += 1\n            break\n\nprint(ans)", "import sys\n\ninput = sys.stdin.readline\n\n\ndef solve_K_1(N):\n    S = str(N)\n    d = len(S)\n    return 9 * (d - 1) + int(S[0])\n\n\ndef solve_K_2(N):\n    if N <= 99:\n        return N - solve_K_1(N)\n    S = str(N)\n    d = len(S)\n    res = 0\n    res += 81 * (d - 1) * (d - 2) // 2\n    res += 9 * (d - 1) * (int(S[0]) - 1)\n    x = 0\n    for i in range(1, d):\n        if S[i] != \"0\":\n            x = int(S[i])\n            break\n    i += 1\n    res += x + 9 * (d - i)\n    return res\n\n\ndef solve_K_3(N):\n    if N <= 999:\n        return N - solve_K_1(N) - solve_K_2(N)\n    S = str(N)\n    d = len(S)\n    res = 0\n    for n in range(3, d):\n        res += 729 * (n - 1) * (n - 2) // 2\n    res += 81 * (d - 1) * (d - 2) // 2 * (int(S[0]) - 1)\n    res += solve_K_2(int(S[1:]))\n    return res\n\n\ndef main():\n    N = int(input())\n    K = int(input())\n\n    if K == 1:\n        ans = solve_K_1(N)\n    elif K == 2:\n        ans = solve_K_2(N)\n    elif K == 3:\n        ans = solve_K_3(N)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = input()\nk = int(input())\nln = len(n) + 1\n\ndp=[[[0]* (ln) for _ in range(2)] for i in range(ln)]\ndp[0][0][0] = 1\nfor i in range(len(n)):\n  for smaller in range(2):\n    x = int(n[i])\n    t = 9 if smaller else x\n    for j in range(t+1):\n      for knum in range(ln-1):\n        if j == 0:\n          dp[i+1][int(smaller or j < x)][knum] += dp[i][smaller][knum]\n        else:\n          dp[i+1][int(smaller or j < x)][knum+1] += dp[i][smaller][knum]\ntry:\n  print(dp[-1][0][k] + dp[-1][1][k])\nexcept:\n  print(0)", "#!/usr/bin/env python3\nimport sys\nfrom collections import deque\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef per(n, r, mod=10**9+7):  # \u9806\u5217\u6570\n    per = 1\n    for i in range(r):\n        per = per*(n-i) % mod\n    return per\n\n\ndef com(n, r, mod=10**9+7):  # \u7d44\u307f\u5408\u308f\u305b\u6570\n    bunshi = per(n, r, mod)\n    bunbo = 1\n    for i in range(1, r+1):\n        bunbo = bunbo*i % mod\n    return bunshi*pow(bunbo, -1, mod) % mod\n\n\ndef main():\n    n = list(map(int, list(input())))\n    k = int(input())\n    keta = len(n)\n    count = [n[0]-1+com(keta-1, 1)*9, (n[0]-1)*com(keta-1, 1)*9+com(keta-1, 2)\n             * 9**2, (n[0]-1)*com(keta-1, 2)*9**2+com(keta-1, 3)*9**3]\n    nonzero = 1\n    #print(count)\n    for i in range(1, keta):\n        if n[i] != 0:\n            nonzero+=1\n            if nonzero==2:\n                count[1]+=(n[i]-1)+com(keta-i-1,1)*9\n                count[2]+=(keta-i-1)*(n[i]-1)*9+com(keta-i-1,2)*9**2\n            elif nonzero==3:\n                count[2]+=(n[i]-1)+com(keta-i-1,1)*9\n        #print(count)\n    print((count[k-1]+(nonzero>=k)))\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\ndef resolve():\n    S = input()\n    K = int(input())\n    N = len(S)\n\n    # dp[i][j][smaller]\n    # i\u6841\u76ee\u307e\u3067\u898b\u305f\u3068\u304d\u306b0\u4ee5\u5916\u306e\u6570\u5b57\u3092\uff4a\u500b\u4f7f\u7528\u3057\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u500b\u6570\n    # smaller:\n    # 0:i\u6841\u76ee\u307e\u3067\u898b\u305f\u3068\u304d\u306b\u4e00\u81f4\u3057\u3066\u3044\u308b(\u6b21\u306e\u6841\u306f\u4f59\u88d5\u304c\u7121\u3044)\n    # 1:\u6b21\u306e\u6841\u306f\u4f59\u88d5\u304c\u3042\u308b\n\n    dp = [[[0]*2 for _ in range(4)] for _ in range(N+1)]\n    dp[0][0][0] = 1\n\n    for i in range(N):\n        for j in range(4):\n            for smaller in range(2):\n                now = int(S[i])\n                for d in range(10):\n                    ni = i+1\n                    nj = j\n                    n_smaller = smaller\n                    if d != 0:\n                        nj += 1\n                    if nj > K:\n                        continue\n                    if smaller == 0:\n                        if d > now: # \u5024\u3092\u8d85\u3048\u3066\u3044\u308b\n                            continue\n                        if d < now: # \u6b21\u306e\u6841\u306f\u4f59\u88d5\u304c\u3042\u308b\n                            n_smaller = 1\n                    dp[ni][nj][n_smaller] += dp[i][j][smaller]\n    ans = dp[N][K][0] + dp[N][K][1]\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def calc(a,D,K):\n  if K==1:\n    return a+(D-1)*9\n  elif K==2:\n    return (a-1)*(D-1)*9 + (D-1)*(D-2)/2*81\n  else:\n    return (a-1)*(D-1)*(D-2)/2*81 + (D-1)*(D-2)*(D-3)/6*729\n\nN=str(input())\nK=int(input())\nD = len(N)\nscore=0\nfor i,a in enumerate(N):\t\n  if a!=\"0\":\n    score+=calc(int(a),D-i,K)\n    K-=1\n  if K==0:\n    break\nprint(int(score))", "N = list(map(int, input()))\nK = int(input())\n\n\ndp = [[[0] * 2 for _ in range(K + 1)] for _ in range(len(N) + 1)]\ndp[0][0][0] = 1\nfor i in range(len(N)):\n    for j in range(K + 1):\n        for is_smaller in range(2):\n            for l in range(10):\n                if not is_smaller and l > N[i] or l != 0 and j + 1 > K:\n                    continue\n                i_ = i + 1\n                j_ = j\n                is_smaller_ = is_smaller\n\n                if l != 0:\n                    j_ += 1\n\n                if not is_smaller and l < N[i]:\n                    is_smaller_ = 1\n                dp[i_][j_][is_smaller_] += dp[i][j][is_smaller]\nprint((dp[len(N)][K][0] + dp[len(N)][K][1]))\n", "n = list(map(int, list(input())))\nk = int(input())\n\ndp0 = [[0]*3]*len(n)\ndp1 = [[0]*3]*len(n)\ndp0[0][0] = 1\ndp1[0][0] = max(0, n[0]-1)\nfor i in range(1, len(n)):\n    if n[i]==0:\n        dp0[i] = dp0[i-1]\n    else:\n        dp0[i] = [0]+dp0[i-1][:2]\n\n    dp1[i] = [\n        dp1[i-1][0]+dp0[i-1][0]*(n[i]!=0)+9,\n        dp1[i-1][1]+dp0[i-1][1]*(n[i]!=0)+dp0[i-1][0]*max(0, n[i]-1)+dp1[i-1][0]*9,\n        dp1[i-1][2]+dp0[i-1][2]*(n[i]!=0)+dp0[i-1][1]*max(0, n[i]-1)+dp1[i-1][1]*9,\n    ]\n\nprint(dp0[-1][k-1]+dp1[-1][k-1])", "def main():\n    n = input()\n    non_zero = int(input())\n    length = len(n)\n    dp = [[[0, 0] for _ in range(non_zero + 1)] for _ in range(length + 1)]\n    dp[0][0][0] = 1\n    for i in range(length):\n        for j in range(non_zero + 1):\n            for k in range(2):\n                now_digit = int(n[i])\n                for next_d in range(10):\n                    new_i = i + 1\n                    new_j = j\n                    new_k = k\n                    if next_d > 0:\n                        new_j += 1\n                    if new_j > non_zero:\n                        continue\n                    if k == 0:\n                        if next_d > now_digit:\n                            continue\n                        elif next_d < now_digit:\n                            new_k = 1\n                    dp[new_i][new_j][new_k] += dp[i][j][k]\n    print((sum(dp[length][non_zero])))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "s = input()\nK = int(input())\nn =len(s)\n\ndp = [[[0] * 2 for _ in range(4)] for _ in range(105)]\n\ndp[0][0][0]=1\nfor i in range(n):\n    for j in range(4):\n        for k in range(2):\n            nd = int(s[i])- 0\n\n            for d in range(10):\n                ni = i+1; nj = j; nk = k\n\n                if d != 0 :nj+=1\n                if nj > K:continue\n                if k==0:\n                    if d > nd:continue\n                    if d < nd:nk =1\n\n                dp[ni][nj][nk] += dp[i][j][k]\n\nans=dp[n][K][0] + dp[n][K][1]\nprint(ans)", "n = str(input())\nk = int(input())\nl = len(n)\n\ndef f(dig, under, num):\n  if num > l - dig: return 0\n  if num == 0: return 1\n  if dig == l-1:\n    if under: return int(n[dig])\n    else: return 9\n  if under:\n    if n[dig] == '0':\n      res = f(dig+1, True, num)\n      #print(dig, under, num, res, 'aaa')\n      return res\n    else:\n      res = f(dig+1, False, num)\n      if int(n[dig]) > 1:\n        res += (int(n[dig])-1) * f(dig+1, False, num-1)\n      res += f(dig+1, True, num-1)\n      #print(dig, under, num, res, 'bbb')\n      return res\n  else:\n    res = f(dig+1, False, num)\n    res += 9 * f(dig+1, False, num-1)\n    #print(dig, under, num, res, 'ccc')\n    return res\n\nans = f(0, True, k)\nprint(ans)", "def calc(a,D,K):\n  if K==1:\n    return a+(D-1)*9\n  elif K==2:\n    return (a-1)*(D-1)*9 + (D-1)*(D-2)//2*81\n  else:\n    return (a-1)*(D-1)*(D-2)//2*81 + (D-1)*(D-2)*(D-3)//6*729\n\nN=input()\nK=int(input())\nD = len(N)\nscore=0\nfor i,a in enumerate(N):\n  if a!=\"0\":\n    score+=calc(int(a),D-i,K)\n    K-=1\n  if K==0:\n    break\nprint(score)", "N = input()\nK = int(input())\nm = len(N)\ndp = [[[0] * (K + 1) for _ in range(2)] for _ in range(m + 1)]\ndp[0][0][0] = 1 #[i][j][k] i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u308b\u3000N\u672a\u6e80\u3067\u78ba\u5b9a\u3067j=1 0\u3067\u306a\u3044\u6570\u304ck\u500b\n\nfor i in range(1, m + 1):\n    l = int(N[i - 1])\n    for k in range(K + 1): # 0\u3067\u306a\u3044\u6570\u306e\u500b\u6570 k \u3092\u5909\u5316\u3055\u305b\u3066\u3044\u304f\n        if k -1 >= 0:\n            if l != 0: #i\u6841\u76ee 1\uff5e9\n                dp[i][0][k] = dp[i - 1][0][k-1]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1] + dp[i - 1][0][k] + (l-1)*dp[i - 1][0][k-1]\n            else: #i\u6841\u76ee 0\n                dp[i][0][k] = dp[i - 1][0][k]\n                dp[i][1][k] = dp[i - 1][1][k] + 9*dp[i - 1][1][k-1]\n        else: #\u3059\u3079\u3066\u306e\u6570\u304c0\u3067\u306f\u306a\u3044\u5834\u5408\n            dp[i][0][k] = 0 # i\u6841\u76ee\u3000N\u3068\u4e00\u81f4\u3000\u3059\u3079\u3066\u304c0\u3000\u2192\u3000\u8a72\u5f53\u306a\u3057\u30000\u30b3\n            dp[i][1][k] = 1 # i\u6841\u76ee\u3000N\u672a\u6e80\u3000  \u3059\u3079\u3066\u304c0  \u2192\u30000\u306e\u307f\u3000  1\u30b3\n\n#print(dp)\nprint(dp[m][0][K] + dp[m][1][K])", "import math,itertools,fractions,heapq,collections,bisect,sys,queue,copy\n\nsys.setrecursionlimit(10**7)\ninf=10**20\nmod=10**9+7\ndd=[(-1,0),(0,1),(1,0),(0,-1)]\nddn=[(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n# def LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef LS(): return sys.stdin.readline().split()\ndef S(): return input()\n\ndef main():\n  s=S()\n  n=len(s)\n  K=I()\n\n  dp=[[[0]*2 for _ in range(4)] for __ in range(n+1)]\n  dp[0][0][0]=1\n  for i in range(n):\n    nd=int(s[i])\n    for j in range(4):\n      for k in range(2):\n        for d in range(10):\n          ni=i+1\n          nj=j\n          nk=k\n\n          if d!=0:\n            nj+=1\n\n          if K<nj:\n            continue\n\n          if nk==0:\n            if d<nd:\n              nk=1\n            if nd<d:\n              continue\n          \n          dp[ni][nj][nk]+=dp[i][j][k]\n\n  return dp[n][K][0]+dp[n][K][1]\n\n# main()\nprint((main()))\n", "from functools import lru_cache\n\nN = int(input())\nK = int(input())\n\n@lru_cache(None)\ndef f(n, k):\n  if k < 0:\n    return 0\n  if n < 10:\n    if k == 0:\n      return 1\n    elif k == 1:\n      return n\n    else:\n      return 0\n  a, b = divmod(n, 10)\n  return f(a, k) + f(a, k-1) * b + f(a-1, k-1) * (9-b)\n  \nprint(f(N, K))", "import bisect, collections, copy, functools, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N = I()\n    K = I()\n\n    # [0, N]\u3067\u3001non0\u306e\u6570\u5b57\u304cK\u500b\u3042\u308b\u3082\u306e\u306e\u6570\n    @functools.lru_cache\n    def f(N, K):\n        if N == K == 0:\n            ret = 1\n        elif N > 0 and K >= 0:\n            ret = f(N // 10, K) + N % 10 * f(N // 10, K - 1) + (9 - N % 10) * f(N // 10 - 1, K - 1)\n        else:\n            ret = 0\n        return ret\n    \n    ans = f(N, K)\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def main():\n    n = list(input())\n    k = int(input())\n    N = len(n)\n    for i in range(N):\n        n[i] = int(n[i])\n    dp1 = [[0 for _ in range(k+1)] for _ in range(N+1)]\n    dp2 = [[0 for _ in range(k+1)] for _ in range(N+1)]\n    dp1[0][0] = 1\n    for i in range(N):\n        for j in range(k+1):\n            dp2[i+1][j] += dp2[i][j]\n            if j < k:\n                dp2[i+1][j+1] += dp2[i][j]*9\n            if n[i]:\n                dp2[i+1][j] += dp1[i][j]\n                if j == k:\n                    continue\n                dp1[i+1][j+1] += dp1[i][j]\n                dp2[i+1][j+1] += dp1[i][j] * (n[i]-1)\n            else:\n                dp1[i+1][j] += dp1[i][j]\n    print(dp1[N][k]+dp2[N][k])\n    \ndef __starting_point():\n    main()\n__starting_point()", "n=[int(x) for x in list(input())]\nl=len(n)\nk=int(input())\n\"\"\"\n\u6841DP\n\u6841\u6570,0\u3067\u306a\u3044count,\u30ae\u30ea\u30ae\u30eaflag\u3067dp\n\"\"\"\ndp = [[[0 for _ in range(2)] for _ in range(k+1)] for _ in range(l+1)]\n#n[0]\u306f0\u3067\u306f\u306a\u3044\ndp[1][0][0] = 1\ndp[1][1][0] = n[0] - 1\ndp[1][1][1] = 1\nfor i in range(2,l+1):\n  for j in range(0,min(i,k)+1):\n    if j > 0:\n      dp[i][j][1] += dp[i-1][j-1][1]*(n[i-1]>0)\n      dp[i][j][0] += dp[i-1][j-1][0]*9+dp[i-1][j-1][1]*max(0,n[i-1]-1)\n    dp[i][j][1] += dp[i-1][j][1]*(n[i-1]==0)\n    dp[i][j][0] += dp[i-1][j][0] + dp[i-1][j][1]*(n[i-1]>0)\n    #print(i,j,dp[i][j])\nprint(sum(dp[l][k]))", "def main():\n    N = input()\n    L = len(N)\n    K = int(input())\n    dp = [[0 for _ in range(L + 1)] for _ in range(K + 1)]\n    dpp = [[0 for _ in range(L + 1)] for _ in range(K + 1)]\n    dpp[0][0] = 1\n    for i in range(1, L + 1):\n        n = int(N[i - 1])\n        for k in range(K + 1):\n            # from dpp\n            kk = k + (1 if n > 0 else 0)\n            if kk <= K:\n                dpp[kk][i] = dpp[k][i - 1]\n            if n > 0:\n                dp[k][i] += dpp[k][i - 1]\n                if k + 1 <= K:\n                    dp[k + 1][i] += (n - 1) * dpp[k][i - 1]\n            # from dp\n            dp[k][i] += dp[k][i - 1]\n            if k + 1 <= K:\n                dp[k + 1][i] += 9 * dp[k][i - 1]\n    print(dp[K][L] + dpp[K][L])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nread = sys.stdin.read\n\n\ndef main():\n    N, K = list(map(int, read().split()))\n\n    dp1 = [0] * (K + 1)\n    dp2 = [0] * (K + 1)\n    dp1[0] = 1\n\n    for x in map(int, str(N)):\n        for j in range(K, -1, -1):\n            if j > 0:\n                dp2[j] += dp2[j - 1] * 9\n                if x != 0:\n                    dp2[j] += dp1[j - 1] * (x - 1) + dp1[j]\n                    dp1[j] = dp1[j - 1]\n            else:\n                dp1[j] = 0\n                dp2[j] = 1\n\n    print((dp1[K] + dp2[K]))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import setrecursionlimit\nsetrecursionlimit(10 ** 6)\nMAXN = 100\n\nn = input()\nk = int(input())\n\ndl = [[None] * (MAXN + 1) for _ in range(MAXN + 1)]\nde = [[None] * (MAXN + 1) for _ in range(MAXN + 1)]\n\n\ndef n_num_e(d, i):\n    # d: n of digits\n    # i: n of nonzero digits\n    if d == 0:\n        if i == 0:\n            return 1\n        else:\n            return 0\n    elif de[d][i] is not None:\n        return de[d][i]\n    else:\n        if int(n[d - 1]) == 0:\n            result = n_num_e(d - 1, i)\n        else:\n            result = n_num_e(d - 1, i - 1)\n        de[d][i] = result\n        return result\n\n\ndef n_num_l(d, i):\n    # d: n of digits\n    # i: n of nonzero digits\n    if d == 0:\n        return 0\n    elif dl[d][i] is not None:\n        return dl[d][i]\n    else:\n        if int(n[d - 1]) == 0:\n            ne = 0\n            nl = 9 * n_num_l(d - 1, i - 1) + n_num_l(d - 1, i)\n            result = ne + nl\n        else:\n            ne = (int(n[d - 1]) - 1) * n_num_e(d - 1, i - 1) + n_num_e(d - 1, i)\n            nl = 9 * n_num_l(d - 1, i - 1) + n_num_l(d - 1, i)\n            result = ne + nl\n\n        dl[d][i] = result\n        return result\n\n\nanswer = n_num_e(len(n), k) + n_num_l(len(n), k)\nprint(answer)\n\n", "n=input()\nk=int(input())\nl=len(n)\n\ndp=[[[0 for _ in range(2)] for _ in range(5)] for _ in range(l+1)]\n\ndp[0][1][1]=int(n[0])-1\ndp[0][1][0]=1\ndp[0][0][1]=1\n\nfor i in range(1,l):\n  for j in range(4):\n    b=i-1\n    now=int(n[i])\n    if now==0:\n      dp[i][j][0]+=dp[b][j][0]\n    else:\n      dp[i][j][1]+=dp[b][j][0]\n      dp[i][j+1][1]+=dp[b][j][0]*(now-1)\n      dp[i][j+1][0]+=dp[b][j][0]\n    dp[i][j][1]+=dp[b][j][1]\n    dp[i][j+1][1]+=9*dp[b][j][1]\nprint((dp[l-1][k][0]+dp[l-1][k][1]))\n", "\nN = input()\nK = int(input())\n\n# dp[is\u672a\u6e80][K][\u6841]\ndp = [[[0] * len(N) for _ in range(K+1)] for _ in range(2)]\ndp[0][0][0] = 0\ndp[1][0][0] = 1\ndp[0][1][0] = 1\ndp[1][1][0] = max(0,int(N[0])-1)\n\nman_k = 1\nfor i in range(1, len(N)):\n    n = N[i]\n    is_nonzero = 1 if n != '0' else 0\n    man_k += is_nonzero\n    if man_k <= K:\n        dp[0][man_k][i] = dp[0][man_k-is_nonzero][i-1]\n\n    dp[1][0][i] = dp[1][0][i-1]\n    for k in range(1,K+1):\n        dp[1][k][i] = dp[1][k][i-1] + dp[1][k-1][i-1] * 9 # n==0\u306e\u30d1\u30bf\u30fc\u30f3\u3068n!=0\u306e\u30d1\u30bf\u30fc\u30f3\n        if n != \"0\":\n            dp[1][k][i] += dp[0][k-1][i-1] * (int(n)-1) + dp[0][k][i-1] \n\nprint(dp[0][K][-1] + dp[1][K][-1]) ", "import math\ndef isMore(N,K):#- N\u4ee5\u4e0a\u306e\u6570\u3067\u3001\uff10\u3067\u306a\u3044\u306e\u304c\u4e01\u5ea6K\u500b\n    #-len(N)\u3088\u308a\u3082K\u304c\u304a\u304a\u304d\u304b\u3063\u305f\u30890\n    if len(N) < K:\n        return 0\n    #\u6700\u9ad8\u4f4d\u306e\u6570\u5b57\u30921\u3064\u7e70\u308a\u4e0a\u3052\u308c\u3070\u3001\u306a\u3093\u3067\u3082\u5927\u304d\u3044\u3002\u305f\u3060\u3057\u3001K\u306f1\u4ee5\u4e0a\n    if K>=1:\n        tmp = (9-int(N[0]))*fact[len(N)-1]//((fact[len(N)-K])*(fact[K-1]))*(9**(K-1))\n        if len(N)==1:\n            return tmp\n        elif len(N)>1 and N[0]=='0':\n            return tmp + isMore(N[1:],K)\n        elif len(N)>1 and N[0]!='0':\n            return tmp + isMore(N[1:],K-1)\n    if K == 0:\n        return 0\n\nN = input()\nK = int(input())\nlenN = len(N)\nfact = [1]*101\nfor i in range(1,101):\n    fact[i] = fact[i-1]*i\n\nans = fact[lenN]//((fact[lenN-K])*fact[K])*(9**K)\nans -= isMore(N,K)\nprint(ans)\n", "N = input()\nK = int(input())\nL = len(N)\n\ndp =[[[ 0 for _ in range(2)] for _ in range(5)] for _ in range(len(N)+1)]\n# dp[i][j][flg] i+1\u6841\u76ee\u307e\u3067\u30670\u4ee5\u5916\u306e\u500b\u6570\u304cj\u500b\n# flg = 1 -> N \u4ee5\u4e0b\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\n\ndp[0][1][1] = int(N[0])-1\ndp[0][1][0] = 1\n\nfor i in range(1,L):\n  for j in range(4):\n    b = i-1 # hitotumae\n    now = int(N[i])\n    ## N\u4e0a\u9650\u306b\u5f35\u308a\u4ed8\u3044\u3066\u308b\u65b9\n    if now == 0:\n      dp[i][j][0] += dp[b][j][0]\n    else:\n      dp[i][j][1] += dp[b][j][0]\n      dp[i][j+1][1] += dp[b][j][0] * (now-1)\n      dp[i][j+1][0] += dp[b][j][0]\n    ## \u5f35\u308a\u4ed8\u3044\u3066\u306a\u3044\u65b9\n    dp[i][j][1] += dp[b][j][1]\n    dp[i][j+1][1] += dp[b][j][1] * 9\n  dp[i][1][1] += 9 # i\u6841\u76ee\u304b\u3089\u59cb\u307e\u3063\u305f\u7269\uff08\u305d\u308c\u3088\u308a\u4e0a\u304cZERO\u306e\u3082\u306e\u3002\uff09\n\nprint(dp[L-1][K][0] + dp[L-1][K][1])", "from math import factorial\nfrom itertools import product\n\nS = input()\nN = int(S)\nm = len(S)\nK = int(input())\n\n# 0\u3067\u306a\u3044\u6570\u5b57\u304c\u3061\u3087\u3046\u3069K\u500b\u3067K\u6841\u306e\u3082\u306e\u3092\u6570\u3048\u308b\nproduct_K = product(['1', '2', '3', '4', '5', '6', '7', '8', '9'], repeat=K)\nproduct_K = [int(''.join(x)) for x in product_K]\nans = len([x for x in product_K if x <= N])\n\nif m > K:\n    # K+1\u6841\u304b\u3089len(N)-1\u6841\u307e\u3067\u3092\u6570\u3048\u308b\n    for i in range(1, m-K):\n        ans += 9**K * factorial(i+K-1)//factorial(i)//factorial(K-1)\n    \n    # N\u3068\u540c\u3058\u6841\u6570\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u6570\u3048\u308b\n    zero_n = m-K\n    non_zero_n = K\n    for i in range(m):\n        l = int(S[i])\n        if l == 0:\n            zero_n -= 1\n            continue\n        if i > 0 and zero_n > 0:\n            ans += 9**non_zero_n\\\n                * factorial(zero_n-1 + non_zero_n)\\\n                //factorial(zero_n-1)\\\n                //factorial(non_zero_n)\n        non_zero_n -= 1\n        ans += len([x for x in range(1, l)])\\\n                * 9**non_zero_n\\\n                * factorial(zero_n + non_zero_n)\\\n                //factorial(zero_n)\\\n                //factorial(non_zero_n)\n        \n        if non_zero_n <= 0:\n            ans += 1\n            break\nprint(ans)\n\n", "#  \u611a\u76f4\u306b\u6570\u3048\u4e0a\u3052\u308b\u65b9\u6cd5\n\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef solve():\n\n    N = list(map(int, input()))\n    K = int(input())\n\n    if K == 1:\n        ans = (len(N) - 1) * 9 + N[0]\n\n    elif K == 2:\n\n        if len(N) < 2:\n            print((0))\n            return\n\n        ans = (9 ** 2) * (len(N) - 1) * (len(N) - 2) // 2\n        ans += (N[0] - 1) * (len(N) - 1) * 9\n\n        for i in range(1, len(N)):\n            if N[i] != 0:\n                ans += N[i] + (len(N) - i - 1) * 9\n                break\n\n    elif K == 3:\n\n        if len(N) < 3:\n            print((0))\n            return\n\n        ans = (9 ** 3) * (len(N) - 1) * (len(N) - 2) * (len(N) - 3) // 6\n        ans += (N[0] - 1) * (9 ** 2) * (len(N) - 1) * (len(N) - 2) // 2\n\n        for i in range(1, len(N) - 1):\n            if N[i] != 0:\n                ans += (9 ** 2) * (len(N) - i - 1) * (len(N) - i - 2) // 2\n                ans += (N[i] - 1) * (len(N) - i - 1) * 9\n                for j in range(i + 1, len(N)):\n                    if N[j] != 0:\n                        ans += N[j] + (len(N) - j - 1) * 9\n                        break\n                break\n\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport copy\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\ndef pop_count(x):\n    x = x - ((x >> 1) & 0x5555555555555555)\n    x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    x = x + (x >> 32)\n    return x & 0x0000007f\n\n\ndef solve():\n    S = Scanner.string()\n    N = len(S)\n    K = Scanner.int()\n    dp = [[[0 for _ in range(2)] for _ in range(K + 1)] for _ in range(N + 1)]\n    dp[0][0][0] = 1\n    for i in range(N):\n        for j in range(4):\n            for k in range(2):\n                nd = int(S[i])\n                for d in range(10):\n                    ni, nj, nk = i + 1, j, k\n                    if d != 0:\n                        nj += 1\n                    if nj > K:\n                        continue\n                    if k == 0:\n                        if d > nd:\n                            continue\n                        if d < nd:\n                            nk += 1\n                    dp[ni][nj][nk] += dp[i][j][k]\n    print((dp[N][K][0] + dp[N][K][1]))\n\n\ndef main():\n    # sys.setrecursionlimit(1000000)\n    # sys.stdin = open(\"sample.txt\")\n    # T = Scanner.int()\n    # for _ in range(T):\n    #     solve()\n    # print('YNeos'[not solve()::2])\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]