["import bisect\nN,K=list(map(int,input().split()))\nA=list(map(int,input().split()))\nS=[0 for i in range(N+1)]\nfor i in range(N):\n    S[i+1]=S[i]+A[i]\n    S[i+1]%=K\nX=[(S[i]-i)%K for i in range(N+1)]\nD=dict()\nfor i in range(N+1):\n    if X[i] in D:\n        D[X[i]].append(i)\n    else:\n        D[X[i]]=[i]\nans=0\nfor k in D:\n    for i in D[k]:\n        L=bisect.bisect_left(D[k],i-K+1)\n        R=bisect.bisect_right(D[k],i+K-1)\n        ans+=R-L-1\nprint((ans//2))\n", "from collections import Counter\n\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nS = [0] * (N + 1)\n\nfor i, a in enumerate(A):\n    S[i + 1] = (S[i] + a - 1) % K\n\nC = Counter()\nans = 0\nfor j in range(1, N + 1):\n    C[S[j - 1]] += 1\n    if (j - K) >= 0:\n        C[S[j - K]] -= 1\n\n    ans += C[S[j]]\n\n\nprint(ans)\n", "from itertools import accumulate\nfrom collections import defaultdict\nimport bisect\n\nn,k = list(map(int, input().split()))\na = list(map(int, input().split()))\na = [0] + list(accumulate([(i-1) % k for i in a]))\na = [i % k for i in a]\nans = 0\nmaps = defaultdict(list)\nfor k1,v in enumerate(a):\n  maps[v].append(k1)\nfor i in range(n):\n  v = a[i]\n  ans += bisect.bisect_right(maps[v],i+k-1) - bisect.bisect_right(maps[v],i)\nprint(ans)\n", "from itertools import accumulate\nfrom collections import defaultdict\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nacc = [0] + list(accumulate(a))\nsm = [(e - i) % k for i, e in enumerate(acc)]\n\nd = defaultdict(int)\nans = 0\nfor r in range(1, n + 1):\n    if r - k >= 0:\n        e = sm[r - k]\n        d[e] -= 1\n\n    e = sm[r - 1]\n    d[e] += 1\n\n    e = sm[r]\n    ans += d[e]\n\nprint(ans)\n", "from collections import defaultdict\n\nn, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\naccm = [0] * (n + 1)\nfor i in range(n):\n  accm[i + 1] = accm[i] + A[i]\n  \nli = [(val - itr) % k for itr, val in enumerate(accm)]\n\nans = 0\nbox = defaultdict(int)\n\nfor i in range(n + 1):\n  if i >= k:\n    box[li[i - k]] -= 1\n  ans += box[li[i]]\n  box[li[i]] += 1\n\nprint(ans)\n", "N, K = [int(n) for n in input().split()]\n\nA = [int(n) for n in input().split()]\n\ncount = 0\nfor i in range(1,N+1):\n    A[i-1] = A[i-1]-1\n\ncheck = {0: [0,1,[0]]}\n\ns = 0\nfor i in range(1,N+1):\n    s = (s + A[i-1]) % K\n    if s in check:\n        j = check[s][0]\n        l = check[s][1]\n        while j < l and i - check[s][2][j] >= K:\n            j += 1\n        check[s][0] = j\n        count += l - j\n        check[s][2].append(i)\n        check[s][1] = l + 1\n    else:\n        check[s] = [0,1,[i]]\n\nprint(count)", "from collections import defaultdict\nN, K = list(map(int, input().split()))\nA = [(int(c)%K)-1 for c in input().split()]\nB = [0]\nfor c in A:\n  B += [B[-1]+c]\ndic = defaultdict(int)\nldic = defaultdict(int)\nfor i in range(min(K,N+1)):\n  c = B[i]\n  dic[c%K] += 1\nans = 0\n#print(dic)\nfor i in range(1,N+1):\n  x = B[i-1]\n  ldic[x%K] += 1\n  ans += dic[x%K]-ldic[x%K]\n  if K+i-1<=N:\n    dic[B[K+i-1]%K] += 1\n  \"\"\"\n  print('###############')\n  print(i,x, ans)\n  print(dic)\n  print(ldic)\n  \"\"\"\nprint(ans)\n", "n,k = list(map(int,input().split()))\nl = list(map(int,input().split()))\nmo = [0]\nmod = [0]\nfor i in range(n):\n    a = l[i]%k\n    mo.append((a+mo[-1])%k)\n    mod.append((mo[-1]-(i+1))%k)\ndic = {0:1}\nle = 1\nans = 0\nfor i in range(1,n+1):\n    if le < k:\n        if mod[i] in dic:\n            ans += dic[mod[i]]\n            dic[mod[i]] += 1\n        else:\n            dic[mod[i]] = 1\n        le += 1\n    else:\n        dic[mod[i-k]] -= 1\n        if mod[i] in dic:\n            ans += dic[mod[i]]\n            dic[mod[i]] += 1\n        else:\n            dic[mod[i]] = 1\n    \nprint(ans)\n", "def shaku(K,lists):\n    ans=0\n    SUMS=0\n    index=0\n    for  l  in range(len(lists)):\n        while index < l or index< len(lists) and SUMS +lists[index] < K:\n            SUMS += lists[index]\n            index+= 1\n        ans += index-l\n        SUMS -= lists[l]\n\n    return ans\n\n\nn,k=map(int,input().split())\nlists=list(map(int,input().split()))\n\nuselist=[0 for i in range(n+1)]\nfor i in range(n):\n    uselist[i+1]=(uselist[i]+lists[i])\nanslist=[0 for i in range(n+1)]\nfor j in range(1,n+1):\n    anslist[j]=(uselist[j]-j)%k\ndic={}\nfor i in range(n+1):\n    if anslist[i] in  dic.keys():\n        dic[anslist[i]].append(i+1)\n    else:\n        dic[anslist[i]]=[1+i]\n#answer\u306b\u7b54\u3048\u3092\u683c\u7d0d\u3059\u308b\u3053\u3068\u306b\u3059\u308b\nanswer=0\nfor lis in dic.values(): \n    sublis=[lis[0]]\n    for a in range(1,len(lis)):\n        sublis.append(lis[a]-lis[a-1])\n    P=shaku(k,sublis)\n\n    for some in lis:\n      if some<k:\n        answer-=1\n    answer+=P\nprint(answer)", "n,k=map(int,input().split())\nl=[0]+[i%k-1 for i in list(map(int,input().split()))]\nfrom itertools import accumulate\nl=list(accumulate(l))\nimport collections\nd=collections.defaultdict(int)\nd[0]+=1\nans=0\nfor i in range(1,n+1):\n    if i>=k:\n        d[l[i-k]%k]-=1\n    ans+=d[l[i]%k]\n    d[l[i]%k]+=1\nprint(ans)", "from collections import defaultdict\n\nN,K = map(int,input().split())\nA = list(map(int,input().split()))\n\nS = [0]\nfor i in range(N):\n    S.append((S[-1]+A[i]-1)%K)\n\nD = defaultdict(int)\n\ncount = 0\n\nfor i in range(N+1):\n    count += D[S[i]]\n    D[S[i]] += 1\n    if i-K+1 >= 0:\n        D[S[i-K+1]] -= 1\n\nprint(count)", "from itertools import accumulate\nfrom collections import Counter\nN,K,*A = map(int, open(0).read().split())\nA = [a-1 for a in A]\nB = [0]+[b%K for b in accumulate(A)]\nif K>N:\n  Cnt = Counter(B)\n  ans = sum(v*(v-1)//2 for v in Cnt.values())\nelse:\n  Cnt = Counter(B[:K])\n  ans = sum(v*(v-1)//2 for v in Cnt.values())\n  for i in range(N+1-K):\n    Cnt[B[i]] -= 1\n    ans += Cnt[B[i+K]]\n    Cnt[B[i+K]] += 1\nprint(ans)", "n,k=map(int,input().split())\na=list(map(int,input().split()))\ndp=[0]\nmp={0:1}\nans=0\nfor t in range(n):\n  i=a[t]\n  \n  if t>=k-1:\n    mp[dp[-k]]-=1  \n    \n  num=(dp[-1]+i-1)%k\n  if num in mp.keys():\n    ans += mp[num]\n    mp[num] += 1\n  else:\n    mp[num] = 1\n  dp.append(num)\n\nprint(ans)", "from collections import deque\n\n\nn, k = map(int, input().split())\na = [int(i) - 1 for i in input().split()]\n\ntotal = 0\ns = [0] * (n + 1)\nfor i in range(n):\n    total += a[i]\n    s[i+1] = total % k\n\nqueue = deque()\nmp = {}\n\nans = 0\nfor j in range(n+1):\n    rem = s[j]\n    queue.append(rem)\n    if rem in mp:\n        ans += mp[rem]\n        mp[rem] += 1\n    else:\n        mp[rem] = 1\n    \n    if len(queue) == k:\n        mp[queue.popleft()] -= 1\n\nprint(ans)", "from collections import defaultdict\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\ncum = [0]*(N+1)\nfor i in range(1,N+1):\n    cum[i] = cum[i-1] + A[i-1]\nans = 0\ndic = defaultdict(int)\nv_by_indx = defaultdict(int)\nfor i in range(N+1):\n    if i-K >= 0:\n        dic[v_by_indx[i-K]] -= 1\n    diff = (cum[i]-i)%K\n    ans += dic[diff]\n    dic[diff] += 1\n    v_by_indx[i] = diff\nprint(ans)\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nX = [0 for _ in range(N)]\nD = {0: [-1]}\nE = {0: 1}\nX[0] = (A[0] - 1) % K\nif X[0] in D:\n  D[X[0]].append(0)\n  E[X[0]] += 1\nelse:\n  D[X[0]] = [0]\n  E[X[0]] = 1\nfor i in range(1, N):\n  X[i] = (X[i-1] + A[i] - 1) % K\n  if X[i] in D:\n    D[X[i]].append(i)\n    E[X[i]] += 1\n  else:\n    D[X[i]] = [i]\n    E[X[i]] = 1\nS = 0\nfor i in D:\n  n = E[i]\n  if n > 1:\n    L = D[i][:]\n    m = L[-1]\n    for j in range(n-1):\n      x = L[j]\n      if m - x < K:\n        S += n - 1 - j\n      else:\n        l, r = j, n\n        d = (l + r) // 2\n        tmp = 2 * n\n        while tmp != 0:\n          if L[d] - x <= K - 1:\n            l = d\n            d = (l + r) // 2\n          else:\n            r = d\n            d = (l + r) // 2\n          tmp //= 2\n        S += d - j\nprint(S)", "from collections import defaultdict\nn,k = map(int,input().split())\na = list(map(int,input().split()))\nfor i in range(n):\n    a[i] -= 1\n    a[i] %= k\n\nS = [0]\nfor i in range(n):\n    S.append((S[-1]+a[i])%k)\n\nans = 0\ndic = defaultdict(int)\ndic[0] = 1\nfor i in range(1,n+1):\n    if i >= k:\n        dic[S[i-k]] -= 1\n    ans += max(0,dic[S[i]])\n    dic[(S[i])] += 1\n\nprint(ans)", "from collections import Counter\n\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nS = [0] * (N + 1)\nfor i in range(N):\n    # S[i + 1] = (S[i] + A[i]) % K\n    S[i + 1] = S[i] + A[i]\n\ncnt = 0\nC = Counter()\nfor r in range(N + 1):\n    R = (S[r] - r) % K\n    cnt += C[R]\n    C[R] += 1\n    l = r - (K - 1)\n    if l >= 0:\n        L = (S[l] - l) % K\n        C[L] -= 1\n\nprint(cnt)\n", "from collections import Counter\n\nN, K = list(map(int, input().split()))\n*A, = list(map(int, input().split()))\nMOD = 10**9+7\nS = [0]*(N+1)\nc = Counter()\nc[0] = 1\nans = 0\n\nfor i in range(N):\n    S[i+1] = (S[i]+A[i]-1)%K\n    if i+1-K>=0:\n        c[S[i+1-K]] -= 1\n    ans += c[S[i+1]]\n    c[S[i+1]] += 1\n\nprint(ans)\n", "N,K=map(int,input().split())\nA=list(map(int,input().split()))\nB=[0]*(N+1)\nfor i in range(N):\n    B[i+1]=(B[i]+A[i]-1)%K\nr=0\nfrom collections import defaultdict\nd=defaultdict(int)\nfor i in range(N+1):\n    r+=d[B[i]]\n    d[B[i]]+=1\n    if K-1<=i:\n        d[B[i-K+1]]-=1\nprint(r)", "from collections import defaultdict\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = defaultdict(int)\nsa = [0] * (n + 1)\nd[0] = 1\nif k == 1:\n    print((0))\n    return\nfor i in range(n):\n    sa[i + 1] = sa[i] + a[i]\n    sa[i + 1] %= k\nans = 0\nfor i in range(1, n + 1):\n    v = sa[i] - i\n    v %= k\n    ans += d[v]\n    d[v] += 1\n    if 0 <= i - k + 1:\n        vv = sa[i - k + 1] - (i - k + 1)\n        vv %= k\n        d[vv] -= 1\nprint(ans)\n", "def main():\n    N, K = list(map(int,input().split()))\n    A = list(map(int, input().split()))\n    s = 0\n    d = {}\n    d[0] = {0}\n    r = 0\n    l = [0] * (N + 1)\n    for i, v in enumerate(A, start=1):\n        if i - K >= 0:\n           x = l[i - K]\n           d[x].remove(i-K)\n        s += v % K\n        s %= K\n        t = (s - i) % K\n        l[i] = t\n        if t in d:\n            r += len(d[t])\n            d[t].add(i)\n        else:\n            d[t] = {i}\n    return r\nprint((main()))\n", "#01:15\nn,k = map(int,input().split())\na = list(map(int,input().split()))\nfor i in range(n):\n  a[i] -= 1\n  a[i] %= k\nb = [0]\nfor i in range(n):\n  b.append((b[-1]+a[i]) % k)\nans = 0\nnow = {}\nfor i in range(n+1):\n  tmp = b[i]\n  if tmp in now:\n    ans += now[tmp]\n    now[tmp] += 1\n  else:\n    now[tmp] = 1\n  if i - k + 1 >= 0:\n    now[b[i-k+1]] -= 1\nprint(ans)", "from itertools import *\nfrom collections import defaultdict\ndef ints():\n  return [int(x) for x in input().split()]\ndef readi():\n  return int(input())\n\nN, K = ints()\nA = ints()\nS = [0] + list(accumulate(A))\n\ndef f(i):\n  return (S[i]-i)%K\n\ns = 0\nmemo = defaultdict(int)\nfor j in range(1, N+1):\n  fj = f(j)\n\n  if j-K>=0:\n    memo[f(j-K)] -= 1\n  memo[f(j-1)] += 1\n\n  s += memo[fj]\nprint(s)\n", "N,K=list(map(int,input().split()))\nA=list(map(int,input().split()))\nfor i in range(1,N):\n  A[i]+=A[i-1]\n  #A[i]=(A[i]+A[i-1]-1)%K\n\nfor i in range(N):\n  A[i]-=(i+1)\n  A[i]%=K\nA=[0]+A\nD={}\nans=0\nfor j in range(1,N+1):\n  D[A[j-1]]=D.get(A[j-1],0)+1\n  if j-K>=0:\n    D[A[j-K]]-=1\n  ans+=D.get(A[j],0)\nprint(ans)\n", "import sys\ndef main():\n  input=sys.stdin.readline\n  n,k=map(int,input().split())\n  a=list(map(int,input().split()))\n  accum=[0]*n\n  accum[0]=a[0]\n  d=dict()\n  ans=0\n  for i in range(1,n):\n    accum[i]+=a[i]+accum[i-1]\n  accum=[0]+accum\n  for j in range(n+1):\n    if j-k>=0:\n      d[(accum[j-k]-(j-k))%k]-=1\n    if (accum[j]-j)%k not in d:\n      d[(accum[j]-j)%k]=1\n    else:\n      ans+=d[(accum[j]-j)%k]\n      d[(accum[j]-j)%k]+=1\n    #print(d)\n  return print(ans)\ndef __starting_point():\n  main()\n__starting_point()", "from bisect import *\nn,k = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\ns = 0\nsl = {0:[0]}\nfor i in range(n):\n    s += A[i] - 1\n    s %= k\n    if s not in list(sl.keys()):\n        sl[s] = []\n    sl[s].append(i+1)\nans = 0\nfor ls in list(sl.values()):\n    for i,l in enumerate(ls):\n        x = bisect_right(ls, l + k - 1)\n        ans += x - i - 1\nprint(ans)\n", "from collections import defaultdict\nimport numpy as np\nN, K = list(map(int, input().split()))\nA = [0] + list(map(int, input().split()))\nA = np.array(A)\nA %= K\nA = A.cumsum()\ntmp = np.arange(N + 1)\n\nB = (A - tmp) % K\n\nans = 0\nd = defaultdict(int)\nfor i in range(min(K, N + 1)):\n    x = B[i]\n    ans += d[x]\n    d[x] += 1\n\nif N > K:\n    for i in range(K, N + 1):\n        x = B[i]\n        y = B[i - K]\n        d[y] -= 1\n        ans += d[x]\n        d[x] += 1\n\nprint(ans)\n", "from collections import defaultdict\nn,k=map(int,input().split())\na=list(map(int,input().split()))\na[0]=(a[0]-1)%k\nfor i in range(n-1):a[i+1]=(a[i+1]+a[i]-1)%k\nd=defaultdict(int)\nans=0\nd[0]=1\nfor i in range(n):\n  if i==k-1:d[0]-=1\n  if i>=k:d[a[i-k]]-=1\n  ans+=d[a[i]]\n  d[a[i]]+=1\nprint(ans)", "from collections import Counter\nN,K = map(int, input().split())\nA = list(map(int, input().split()))\nA = list(map(lambda x: x%K, A))\n\n\"\"\"\nj - i < K and\nSj - Si == j - i (mod K)\nSj - j == Si - i (mod K) \u3053\u306e\u5909\u5f62\u304c\u809d\u3060\u2026\n\"\"\"\n\nS = [0 for _ in range(N+1)]\nfor i in range(N):\n  S[i+1] = (S[i] + A[i] - 1) % K\nans = 0\nC = Counter(S[:K])\nfor k,v in C.items():\n  ans += v * (v-1) // 2\n  \nfor i in range(K,N+1):\n  deln = S[i-K]\n  C[deln] -= 1\n  addn = S[i]\n  if addn in C:\n    ans += C[addn]\n    C[addn] += 1\n  else:\n    C[addn] = 1\n    \nprint(ans)", "from collections import defaultdict\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nd = [0]\nfor i in a:\n    a_i = (d[-1] + i) % k\n    d.append(a_i)\n\nans = 0\ncounter = defaultdict(int)\nfor i, s in enumerate(d):\n    ans += counter[(s-i) % k]\n    counter[(s-i) % k] += 1\n    if i - k + 1 >= 0:\n        counter[(d[i - k + 1]-i+k-1) % k] -= 1\n\nprint(ans)\n\n", "#!/usr/bin/env python3\nimport sys\nfrom itertools import accumulate\nfrom collections import Counter\nINF = float(\"inf\")\n\n\ndef solve(N: int, K: int, A: \"List[int]\"):\n\n    ans = 0\n\n    # \u7d2f\u7a4d\u548c\n    acc = [0]+list(accumulate(A))\n\n    cnt = Counter()\n    # \u5404j\u306b\u3064\u3044\u3066\n    for j in range(1, N+1):\n        # \u533a\u9593\u306b\u52a0\u3048\u308b\n        if j-1 >= 0:\n            cnt[(acc[j-1]-(j-1)) % K] += 1\n\n        # \u533a\u9593\u304b\u3089\u9664\u304f\n        if j-K >= 0:\n            cnt[(acc[j-K]-(j-K)) % K] -= 1\n\n        # \u30ab\u30a6\u30f3\u30c8\u3059\u308b\n        ans += cnt[(acc[j]-j) % K]\n    print(ans)\n\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, K, A)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\nfrom collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\n\n\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\n\n\ndef solve():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    if K == 1:\n        print((0))\n        return\n\n    dp = [0]\n    for i in range(N):\n        dp.append(dp[-1] + (A[i] - 1))\n\n    dp = [d % K for d in dp]\n\n    ans = 0\n    d = defaultdict(int)\n    d[0] = 1\n    for i in range(1, N + 1):\n        ans += d[dp[i]]\n        d[dp[i]] += 1\n\n        if i - K + 1 >= 0:\n            d[dp[i - K + 1]] -= 1\n\n    print(ans)\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\nl = list(map(int, input().split()))\n\nl = [c-1 for c in l]\n \nl = [0] + l\nfrom itertools import accumulate\ncum =list(accumulate(l))\ncum = [c%k for c in cum]\n\nfrom collections import deque\nans = 0\nd = {}\nq = deque()\nfor i in range(n+1):\n  if cum[i] not in d:\n    d[cum[i]] = 1\n  else:\n    ans += d[cum[i]]\n    d[cum[i]] += 1\n  q.append(cum[i])\n  if len(q) == k:\n    rem = q.popleft()\n    d[rem] -= 1\nprint(ans)", "from collections import defaultdict\nfrom itertools import accumulate\n\n\ndef solve():\n    N, K, *A = list(map(int, open(0).read().split()))\n    \n    Acumsum = [0] + list(accumulate(A))\n    si = [(Acumsum[i] - i) % K for i in range(N + 1)]\n    counter = defaultdict(int)\n    \n    ans = 0\n    for j in range(N):\n        counter[si[j]] += 1\n        if 0 <= j - K + 1:\n            counter[si[j - K + 1]] -= 1\n        ans += counter[si[j + 1]]\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "import sys\nimport numpy as np\nfrom collections import defaultdict\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, K = lr()\nA = np.array([0] + lr())\nA = (A-1) % K\nAcum = A.cumsum() % K\ncounter = defaultdict(int)\nanswer = 0\nfor i, x in enumerate(Acum):\n    answer += counter[x]\n    counter[x] += 1\n    if i >= K-1:\n        counter[Acum[i-(K-1)]] -= 1\n\nprint(answer)\n", "from collections import Counter\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nans = 0\nc = Counter()\nc[0] = 1\n\nS = [0] * (N+1)\ns = 0\n\nfor idx, a in enumerate(A):\n    idx += 1\n\n    if idx >= K: c[S[idx-K]] -= 1\n        \n    s = (s+a) % K\n    \n    b = (s - idx) % K\n    S[idx] = b    \n    ans += c[b]\n    c[b] += 1\n    \nprint(ans)", "\nfrom itertools import accumulate\nfrom collections import defaultdict, deque\ndef resolve():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    A = accumulate([a % K for a in A])\n    A = [0] + list(A)\n\n    # \u533a\u9593 [i,j] \u306e\u548c(\u7d2f\u7a4d\u548c): dj+1\u2212di\n    # \u533a\u9593 [i,j] \u306e\u8981\u7d20\u306e\u6570(0_ind\u306e\u70ba +1): j\u2212i+1\n    # \u4e0a\u8a18\u3092\u4e00\u822c\u5316:  dr\u2212dl=r\u2212l \u3068\u306a\u308b\u3082\u306e\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\n    # r\u2212l<K  \u306e\u6642\u3001mod K \u306b\u304a\u3044\u3066\u5f0f\u5909\u5f62\u304c\u6210\u308a\u7acb\u3064, dr\u2212r=dl\u2212l\n    # r\u3092\u56fa\u5b9a\u3057\u8f9e\u66f8\u3067\u7ba1\u7406\u3059\u308c\u3070\u3001dl\u2212l\u3068\u540c\u3058\u5024\u306a\u306e\u3067\u500b\u6570\u3092\u6c42\u3081\u3089\u308c\u308b\u3002\n\n    cnt = defaultdict(int)\n    q = deque()\n    ans = 0\n    for r in range(N + 1):\n        t = (A[r] - r) % K\n        ans += cnt[t]\n        cnt[t] += 1\n\n        q.append(t)\n        if len(q) == K:\n            left = q.popleft()\n            cnt[left] -= 1\n\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import numpy as np\nfrom collections import defaultdict\n\nN, K = list(map(int, input().split()))\nAs = np.array([0] + list(map(int, input().split())))\n#Find (i, j) that satisfies \"sum(As[i:j]) % K == j - i\"\n#If 0 < j - i < K then \n#sum(As[i:j]) % K == j - i % K\n#<-> (sum(As[:j]) - j) % K == (sum(As[:i]) - i) % K\n\nmods = As % K\ncsum_mods = np.cumsum(mods)\nmagic_array = (csum_mods - np.arange(0, N+1)) % K\n\nindices = defaultdict(list)\nfor i, m in enumerate(magic_array.tolist()):\n    indices[m].append(i)\n\nans = 0\nfor ls in list(indices.values()):\n    j = 1\n    for i in range(len(ls)):\n        while j < len(ls):\n            if ls[j] - ls[i] < K:\n                j += 1\n            else:\n                break\n        ans += j - i - 1\n        \nprint(ans)\n", "import sys\nimport numpy as np\nfrom collections import defaultdict\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, K = lr()\nA = np.array([1] + lr())\nA = (A-1) % K\nN += 1\nAcum = (A.cumsum() % K).tolist()\nd = defaultdict(int)\nanswer = 0\nfor i, x in enumerate(Acum):\n    answer += d[x]\n    d[x] += 1\n    if i >= K-1:\n        d[Acum[i-(K-1)]] -= 1\n\nprint(answer)\n", "n,k=list(map(int,input().split()))\na=list([(int(x)-1)%k for x in input().split()])\na_=0\ncs_a=[0]\nfor ai in a:\n  a_+=ai\n  a_%=k\n  cs_a.append(a_)\nans=0\nfrom collections import defaultdict\nd=defaultdict(int)\nfor i in range(n+1):\n  ans+=d[cs_a[i]]\n  d[cs_a[i]]+=1\n  if i>=k-1:\n    d[cs_a[i-k+1]]-=1\nprint(ans)\n", "import numpy as np\nfrom collections import defaultdict,deque\nN,K= list(map(int,input().split()))\nA = np.array([1]+list(map(int,input().split())))-1\n\nAcs = np.cumsum(A)\nAcs %= K\n\nans = 0\ncnt = defaultdict(deque)\nfor i,c in enumerate(Acs):\n    cnt[c].append(i)\n    while cnt[c]:\n        if i-cnt[c][0]> K-1:\n            cnt[c].popleft()\n        else:\n            break\n    ans += len(cnt[c]) - 1\nprint(ans)\n\n\n", "def add(x):\n\tif x in dic:\n\t\tdic[x]+=1\n\telse:\n\t\tdic[x]=1\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nb=[0]\nfor i in range(n):\n\tb.append((b[-1]+a[i]-1)%k)\ndic={}\nans=0\nfor i in range(n+1):\n\tadd(b[i])\n\tans+=dic[b[i]]-1\n\tif i-k+1>=0:\n\t\tdic[b[i-k+1]]-=1\nprint(ans)", "import itertools\nfrom collections import defaultdict\n\nn,k = map(int,input().split())\nlis = list(map(int,input().split()))\nlis = [0] + [lis[i]-1 for i in range(n)]\n\nruiseki = list(itertools.accumulate(lis))\n\nruiseki = [x % k for x in ruiseki]\n  # print(ruiseki)\n\ncounter = defaultdict(int)\nans = 0\n\nfor i,x in enumerate(ruiseki):\n    ans += counter[x]\n    counter[x] += 1\n    if i >= k-1:\n        counter[ruiseki[i-k+1]] -= 1\n\nprint(ans)", "import collections\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\ntable = collections.defaultdict(int)\n\nans = 0\ns = [0]*(N+1)\na = set()\nfor i in range(N):\n    s[i+1] = s[i]+A[i]\n\ns = [(s[i]-i) % K for i in range(N+1)]\nfor i in range(N+1):\n    ans += table[s[i]]  # i\u756a\u76ee\u307e\u3067\u53d6\u308b\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\n    table[s[i]] += 1\n    if i >= K-1:\n        # K\u3067\u5272\u3063\u305f\u3042\u307e\u308a\u304cK\u3092\u8d85\u3048\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3001\u671f\u9650\u5207\u308c\u306e\u3082\u306e\u3092\u5f15\u304f\n        table[s[i-K+1]] -= 1\n\nprint(ans)\n", "from collections import defaultdict\nfrom bisect import bisect_right\n\nn, k = list(map(int, input().split()))\nalst = list(map(int, input().split()))\n\ndd = defaultdict(list)\ndd[0].append(0)\ntotal = 0\nfor i, num in enumerate(alst, start = 1):\n    total += num\n    total %= k\n    app = total - i\n    app %= k\n    dd[app].append(i)\nans = 0\nfor _, lst in list(dd.items()):\n    for i, num in enumerate(lst):\n        num2 = num + k - 1\n        pos = bisect_right(lst, num2)\n        ans += pos - i - 1\nprint(ans)\n\n", "from collections import defaultdict as d\nfrom itertools import accumulate as ac\nn,k=map(int,input().split())\na=[0]+list(ac(list(map(int,input().split()))))\nb=d(int)\nc=0\nfor i in range(n+1):\n    p=(a[i]-i)%k\n    c+=b[p]\n    b[p]+=1\n    if i-k+1>=0:\n        b[(a[i-k+1]-i+k-1)%k]-=1\nprint(c)", "from collections import Counter\n\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nS = [0] * (N + 1)\nfor i in range(N):\n    S[i + 1] = (S[i] + A[i]) % K\n    # S[i + 1] = S[i] + A[i]\n\ncnt = 0\nC = Counter()\nfor r in range(N + 1):\n    R = (S[r] - r) % K\n    cnt += C[R]\n    C[R] += 1\n    l = r - (K - 1)\n    if l >= 0:\n        L = (S[l] - l) % K\n        C[L] -= 1\n\nprint(cnt)\n", "# Rem of sum is Num\n# Reviewing problem\n\n\nfrom collections import defaultdict\n\n\ndef cnt_func(X):\n    res = 0\n    right = 0\n    L = len(X)\n    for i in range(L):\n        while right+1 < L and X[right+1] < K+X[i]:\n            right += 1\n        res += right-i\n    return res\n\n\nN, K = map(int, input().split())\n\nA = list(map(int, input().split()))\nA.insert(0, 0)\nfor i in range(1, N+1):\n    A[i] += A[i-1]\nB = [0 for i in range(N+1)]\nfor i in range(N+1):\n    B[i] = (A[i]-i) % K\nans = 0\nMod = defaultdict(list)\nfor i in range(N+1):\n    Mod[B[i]].append(i)\nfor X in Mod.values():\n    ans += cnt_func(X)\nprint(ans)", "M, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nans = 0\naccum = [0]\nd = {0 : 1}\n\nfor i, a in enumerate(A):\n  accum.append((accum[-1] + a - 1)%K)\n  if i >= K - 1:\n    d[accum[i-K+1]] -= 1\n  \n  if accum[-1] in d:\n    ans += d[accum[-1]]\n    d[accum[-1]] += 1\n  \n  else:\n    d[accum[-1]] = 1\n\nprint(ans)", "def main():\n    from collections import defaultdict, deque\n\n    N, K = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    def accumulate(a, mod):\n        s = 0\n        yield s\n        for x in a:\n            s = (s + x - 1) % mod\n            yield s\n\n    *acc, = accumulate(a, mod=K)\n\n    d = defaultdict(int)\n    dq = deque()\n    ans = 0\n    for x in acc:\n        ans += d[x]\n        d[x] += 1\n        dq.append(x)\n        if len(dq) >= K:\n            r = dq.popleft()\n            d[r] -= 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n# import sys\n#\n# sys.setrecursionlimit(10 ** 7)\n#\n# input = sys.stdin.readline\n# rstrip()\n# int(input())\n# map(int, input().split())\n\n__starting_point()", "from collections import defaultdict\nn,k = list(map(int,input().split()))\nl = list(map(int,input().split()))\n\nmod = [0]\nfor i in range(n):\n    a = (l[i]-1)%k\n    mod.append((mod[-1]+a)%k)\ndic = defaultdict(int)\nans = 0\nfor i in range(n+1):\n    if i < k:\n        ans += dic[mod[i]]\n        dic[mod[i]] += 1\n    else:\n        dic[mod[i-k]] -= 1\n        ans += dic[mod[i]]\n        dic[mod[i]] += 1\n    \nprint(ans)\n", "from collections import defaultdict\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    S = [0] * (N + 1)  # \u7d2f\u7a4d\u548c\n    for i in range(1, N + 1):\n        S[i] = S[i - 1] + A[i - 1]\n    T = [(s - i) % K for i, s in enumerate(S)]\n    counter = defaultdict(int)\n    ans = 0\n    for j in range(N + 1):\n        if j >= K:\n            counter[T[j - K]] -= 1\n        ans += counter[T[j]]\n        counter[T[j]] += 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nn, k = map(int, input().split())\na = [int(x) for x in input().split()]\n\nvalues = dict()\nvaluelist = [0]*(n+1)\nvalues[0] = 1\ns = 0\nans = 0\nif k == 1:\n  print(0)\n  return\n\nfor i in range(n):\n  s += a[i]-1\n  s %= k\n  if s in values:\n    ans += values[s]\n    values[s] += 1\n  else:\n    values[s] = 1\n  \n  valuelist[i+1] = s\n  if i >= k-2:\n    values[valuelist[i-k+2]] -= 1\n\nprint(ans)", "from collections import defaultdict\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nAm = [a - 1 for a in A]\nAcc = [0] * (N + 1)\nfor i in range(N):\n    Acc[i + 1] = (Acc[i] + Am[i]) % K\n\nd = defaultdict(int)\nl, r = 0, 0\nans = 0\nwhile r <= N:\n    a = Acc[r]\n    ans += d[a]\n    d[a] += 1\n    r += 1\n    if r - l >= K:\n        d[Acc[l]] -= 1\n        l += 1\nprint(ans)\n", "n,k=map(int,input().split())\narr=list(map(int,input().split()))\narr=[i-1 for i in arr]\nacum=[0]\nfor i in range(n):\n  acum.append(acum[-1]+arr[i])\nacum=[i%k for i in acum]\nans=0\ndic={}\nfor i in range(n+1):\n  if acum[i]%k not in dic:\n    dic[acum[i]]=1\n  else:\n    ans+=dic[acum[i]]\n    dic[acum[i]]+=1\n  if i>=k-1:\n    dic[acum[i-k+1]]-=1\nprint(ans)", "from collections import defaultdict\nn, k = list(map(int, input().split()))\n\na = list([int(x) - 1 for x in input().split()])\ns = [0] * (n + 1)\nfor i in range(n):\n\ts[i + 1] = (s[i] + a[i]) % k\n\nmp = defaultdict(int)\n\nans = 0\nfor i in range(n + 1):\n\tans += mp[s[i]]\n\tmp[s[i]] += 1\n\tif i >= k - 1:\n\t\tmp[s[i - k + 1]] -= 1\nprint(ans)\n", "import math\nimport numpy as np\nimport decimal\nimport collections\nimport itertools\nimport sys\nimport random\n#Union-Find\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.par = [-1 for i in range(self.n)]\n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n    def unite(self, x, y):\n        p = self.find(x)\n        q = self.find(y)\n        if p == q:\n            return None\n        if p > q:\n            p, q = q, p\n        self.par[p] += self.par[q]\n        self.par[q] = p\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n    def size(self, x):\n        return -self.par[self.find(x)]\n\n#\u7d20\u6570\u95a2\u9023\ndef prime_numbers(x):\n    if x < 2:\n        return []\n    prime_numbers = [i for i in range(x)]\n    prime_numbers[1] = 0\n    for prime_number in prime_numbers:\n        if prime_number > math.sqrt(x):\n            break\n        if prime_number == 0:\n            continue\n        for composite_number in range(2 * prime_number, x, prime_number):\n            prime_numbers[composite_number] = 0\n    return [prime_number for prime_number in prime_numbers if prime_number != 0]\ndef is_prime(x):\n    if x < 2:\n        return False\n    if x == 2 or x == 3 or x == 5:\n        return True\n    if x % 2 == 0 or x % 3 == 0 or x % 5 == 0:\n        return False\n    prime_number = 7\n    difference = 4\n    while prime_number <= math.sqrt(x):\n        if x % prime_number == 0:\n            return False\n        prime_number += difference\n        difference = 6 - difference\n    return True\n#Prime-Factorize\ndef prime_factorize(n):\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n //= 2\n    f = 3\n    while f ** 2 <= n:\n        if n % f == 0:\n            res.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        res.append(n)\n    return res\n#nCr\nmod = 10 ** 9 + 7\nclass nCr():\n    def __init__(self, n):\n        self.n = n\n        self.fa = [1] * (self.n + 1)\n        self.fi = [1] * (self.n + 1)\n        for i in range(1, self.n + 1):\n            self.fa[i] = self.fa[i - 1] * i % mod\n            self.fi[i] = pow(self.fa[i], mod - 2, mod)\n    def comb(self, n, r):\n        if n < r:return 0\n        if n < 0 or r < 0:return 0\n        return self.fa[n] * self.fi[r] % mod * self.fi[n - r] % mod\n#\u62e1\u5f35Euclid\u306e\u4e92\u9664\u6cd5\ndef extgcd(a, b, d = 0):\n    g = a\n    if b == 0:\n        x, y = 1, 0\n    else:\n        x, y, g = extgcd(b, a % b)\n        x, y = y, x - a // b * y\n    return x, y, g\n#BIT\nclass BinaryIndexedTree():\n    def __init__(self, n):\n        self.n = n\n        self.BIT = [0] * (self.n + 1)\n    def add(self, i, x):\n        while i <= self.n:\n            self.BIT[i] += x\n            i += i & -i\n    def query(self, i):\n        res = 0\n        while i > 0:\n            res += self.BIT[i]\n            i -= i & -i\n        return res\n#Associative Array\nclass AssociativeArray():\n    def __init__(self, q):\n        self.dic = dict()\n        self.q = q\n    def solve(self):\n        for i in range(self.q):\n            Query = list(map(int, input().split()))\n            if Query[0] == 0:\n                x, y, z = Query\n                self.dic[y] = z\n            else:\n                x, y = Query\n                if y in self.dic:\n                    print(self.dic[y])\n                else:\n                    print(0)\n#Floor Sum\ndef floor_sum(n, m, a, b):\n    res = 0\n    if a >= m:\n        res += (n - 1) * n * (a // m) // 2\n        a %= m\n    if b >= m:\n        res += n * (b // m)\n        b %= m\n    y_max = (a * n + b) // m\n    x_max = y_max * m - b\n    if y_max == 0:\n        return res\n    res += y_max * (n + (-x_max // a))\n    res += floor_sum(y_max, a, m, (a - x_max % a) % a)\n    return res\n#Z-Algorithm\ndef z_algorithm(s):\n    str_len = len(s)\n    res = [0] * str_len\n    res[str_len - 1] = str_len\n    i, j = 1, 0\n    while i < str_len:\n        while i + j < str_len and s[i + j] == s[j]:\n            j += 1\n        res[i] = j\n        if j == 0:\n            i += 1\n            continue\n        k = 1\n        while i + k < str_len and j > res[k] + k:\n            res[i + k] = res[k]\n            k += 1\n        i += k\n        j -= k\n    return res\nclass Manacher():\n    def __init__(self, s):\n        self.s = s\n    def coustruct(self):\n        i, j = 0, 0 \n        s_len = len(self.s)\n        res = [0] * s_len\n        while i < s_len:\n            while i - j >= 0 and i + j < s_len and self.s[i - j] == self.s[i + j]:\n                j += 1\n            res[i] = j\n            k = 1\n            while i - k >= 0 and k + res[i - k] < j:\n                k += 1\n            i += k\n            j -= k\n#mod-sqrt\ndef mod_sqrt(a, p):\n    if a == 0:\n        return 0\n    if p == 2:\n        return 1\n    k = (p - 1) // 2\n    if pow(a, k, p) != 1:\n        return -1\n    while True:\n        n = random.randint(2, p - 1)\n        r = (n ** 2 - a) % p\n        if r == 0:\n            return n\n        if pow(r, k, p) == p - 1:\n            break\n    k += 1\n    w, x, y, z = n, 1, 1, 0\n    while k:\n        if k % 2:\n            y, z = w * y + r * x * z, x * y + w * z\n        w, x = w * w + r * x * x, 2 * w * x\n        w %= p\n        x %= p\n        y %= p\n        z %= p\n        k >>= 1\n    return y\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(1, n):\n    a[i] += a[i - 1]\nfor i in range(n):\n    a[i] -= i + 1\n    a[i] %= k\na = [0] + a\ndic = {}\nans = 0\nfor i in range(n):\n    dic[a[i]] = dic.get(a[i], 0) + 1\n    if i - k + 1 >= 0:\n        dic[a[i - k + 1]] -= 1\n    ans += dic.get(a[i + 1], 0)\nprint(ans)", "from collections import defaultdict\n\nn, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\nans = 0\nshukei = defaultdict(int)\n# Ai\u304b\u3089Aj\u307e\u3067\u306e\u548c\u2192SA[j]-SA[i-1]\n# SA[j]-SA[i-1]=j-(i-1)\n# \u4eca\u56de\u306fk\u3067\u5272\u3063\u305f\u3042\u307e\u308a\u306a\u306e\u3067accumulate\u306f\u4f7f\u308f\u305a\u81ea\u529b\nS = [0] * (n + 1)\nT = [0] * (n + 1)\nfor i in range(1, n + 1):\n    S[i] = S[i - 1] + A[i - 1]\n    S[i] %= k\n    T[i] = S[i] - i\n    T[i] %= k\n# i>=1, i<j\u3067\u540c\u3058\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u7d44\u307f\u5408\u308f\u305b\u3092\u63a2\u305b\u3070\u826f\u3044\u3002\n# k\u3067\u5272\u3063\u305f\u3042\u307e\u308a\u306a\u306e\u3067\u3001\u8981\u7d20\u6570j\u2212(i-1)\u304ck\u3088\u308a\u5c0f\u3055\u304f\u306a\u3044\u3068\u3044\u3051\u306a\u3044\nans = 0\nif k > n + 1:\n    for i in range(n + 1):\n        shukei[T[i]] += 1\n    for key, num in list(shukei.items()):\n        ans += num * (num - 1) // 2\nelse:\n    shukei = defaultdict(int)\n    for i in range(k):\n        shukei[T[i]] += 1\n    for key, num in list(shukei.items()):\n        ans += num * (num - 1) // 2\n    for i in range(k, n + 1):\n        j = i - k\n        shukei[T[j]] -= 1\n        temp = T[i]\n        num = shukei[temp]\n        ans += num\n        shukei[temp] += 1\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nB = [0]\nfor a in A:\n    b = (B[-1] + (a-1)) % K\n    B.append(b)\n\nans = 0\ndic = {}\nfor i, b in enumerate(B):\n    if b in dic:\n        dic[b].append(i)\n    else:\n        dic[b] = deque()\n        dic[b].append(i)\n    \n    while len(dic[b]) > 0 and dic[b][0] <= i - K:\n        dic[b].popleft()\n    ans += len(dic[b])-1\n    \n\nprint(ans)", "n,k = list(map(int,input().split()))\na = [0]+list(map(int,input().split()))\nfor i in range(n):\n    a[i+1] += a[i]\ncnt = {}\nans = 0\nfor i in range(n+1):\n    left = i-k\n    if left >= 0:\n        ldiff = (a[left] - left)%k\n        cnt[ldiff]-=1\n    diff = (a[i]-i)%k\n    if diff not in cnt:cnt[diff] = 0\n    ans += cnt[diff]\n    cnt[diff] +=1\nprint(ans)\n", "from collections import defaultdict\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    acca = [0]\n    for _a in a:\n        acca.append(acca[-1] + _a)\n    \n    ans = 0\n    cnt = defaultdict(lambda : 0)\n    for i, ac in enumerate(acca):\n        ans += cnt[(ac - i) % k]\n        cnt[(ac - i) % k] += 1\n        if i >= k - 1:\n            cnt[(acca[i - k + 1] - (i - k + 1)) % k] -= 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,k = list(map(int,input().split()))\na = [0]+list(map(int,input().split()))\nfor i in range(n):\n    a[i+1] += a[i]\n    a[i+1] %=k\ncnt = {}\nans = 0\nfor i in range(n+1):\n    left = i-k\n    if left >=0:\n        ldiff = (a[left] - left)%k\n        cnt[ldiff] -= 1\n    x = (a[i] - i)%k\n    if x <0:x+=k\n    if x not in cnt:cnt[x] = 0\n    ans+= cnt[x]    \n    cnt[x] +=1\nprint(ans)\n\n", "n,k=map(int,input().split())\na=[0]+list(map(int,input().split()))\nfrom collections import defaultdict\nd=defaultdict(int)\nd[0]=1\nans=0\nfor i in range(1,n+1):\n    a[i]+=a[i-1]-1\n    if i>=k:\n        d[a[i-k]]-=1\n    a[i]%=k\n    d[a[i]]+=1\n    ans+=d[a[i]]-1\nprint(ans)", "def main():\n    from collections import defaultdict, deque\n\n    N, K = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    def accumulate(a, mod):\n        s = 0\n        yield s\n        for x in a:\n            s = (s + x - 1) % mod\n            yield s\n\n    acc = accumulate(a, mod=K)\n\n    d = defaultdict(int)\n    dq = deque()\n    ans = 0\n    for x in acc:\n        ans += d[x]\n        d[x] += 1\n        dq.append(x)\n        if len(dq) >= K:\n            r = dq.popleft()\n            d[r] -= 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n# import sys\n#\n# sys.setrecursionlimit(10 ** 7)\n#\n# input = sys.stdin.readline\n# rstrip()\n# int(input())\n# map(int, input().split())\n\n__starting_point()", "from collections import Counter\ndef solve():\n    ans = 0\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    cum = [0]*(N+1)\n    for i in range(N):\n        cum[i+1] = (cum[i]+A[i])%K\n    for i in range(N):\n        cum[i+1] = (i+1-cum[i+1])%K\n    if N<K:\n        c = Counter(cum)\n        for v in c.values():\n            ans += v*(v-1)//2\n    else:\n        c = Counter(cum[:K-1])\n        for i in range(N):\n            c[cum[i]] -= 1\n            if i+K-1<=N:\n                c[cum[i+K-1]] += 1\n            ans += c[cum[i]]\n    return ans\nprint(solve())", "def main():\n    N, K  = [int(i) for i in input().split()]\n    A  = [int(i) for i in input().split()]\n    v = {0: 1}\n    n = [0]\n    r = 0\n    t = 0\n    for i, a in enumerate(A, 1):\n        if i >= K:\n            v[n[i - K]] -= 1\n        t += a\n        j = (t - i) % K\n        r += v.get(j, 0)\n        v[j] = v.get(j, 0) + 1\n        n.append(j)\n\n    return r\n\n\nprint((main()))\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ns = [0]\nfor i in range(n):\n    s.append((s[-1] + a[i] - 1) % k)\n\n# dic = {remainder:number}\ndic = {0:1}\nans = 0\nif n < k:\n    for i in range(1, n+1):\n        if s[i] in dic:\n            ans += dic[s[i]]\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n\nelse:\n    for i in range(1, k):\n        if s[i] in dic:\n            ans += dic[s[i]]\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n\n    for i in range(k, n+1):\n        dic[s[i-k]] -= 1\n        if s[i] in dic:\n            ans += dic[s[i]]\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n\nprint(ans)", "from itertools import accumulate\nfrom collections import Counter\nN,K,*A = map(int, open(0).read().split())\nA = [a-1 for a in A]\nB = [b%K for b in accumulate(A)]\nif K>N:\n  Cnt = Counter(B)\n  ans = Cnt[0]+sum(v*(v-1)//2 for v in Cnt.values())\nelse:\n  Cnt = Counter(B[:K])\n  ans = Cnt[0]+sum(v*(v-1)//2 for v in Cnt.values())\n  if B[K-1]==0:\n    ans -= 1\n  for i in range(N-K):\n    Cnt[B[i]] -= 1\n    ans += Cnt[B[i+K]]\n    Cnt[B[i+K]] += 1\nprint(ans)", "from collections import Counter\n\nN, K = list(map(int, input().split()))\nAs = list(map(int, input().split()))\n\nSs = [0]\nS = 0\nfor A in As:\n    S += A-1\n    S %= K\n    Ss.append(S)\n\nans = 0\ncnt = Counter()\nfor i in range(N+1):\n    ans += cnt[Ss[i]]\n    cnt[Ss[i]] += 1\n    if i >= K-1:\n        cnt[Ss[i-K+1]] -= 1\n\nprint(ans)\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\nimport time,random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\nmod2 = 998244353\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\ndef JA(a, sep): return sep.join(map(str, a))\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\n\n\ndef main():\n    n,k = LI()\n    aa = LI()\n\n    c = collections.defaultdict(int)\n    c[0] = 1\n    t = [0]\n    r = 0\n    for i in range(n):\n        a = aa[i]\n        tt = (t[-1] + a - 1) % k\n        t.append(tt)\n        if i >= k-1:\n            # print(\"k\", t[i-k+2],i-k+2)\n            c[t[i-k+1]] -= 1\n        r += c[tt]\n        c[tt] += 1\n        # print(\"ar\", a,tt,r,sorted(c.items()), t)\n\n    return r\n\nprint(main())\n\n\n\n", "import sys\nfrom bisect import bisect_left\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK: modK[sum_A[i+1]] = [i + 1]\n        else: modK[sum_A[i+1]].append(i+1)\n    \n    for key in modK: \n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "N,K = map(int,input().split())\nA = [0] + list(map(int,input().split()))\n\n\nfrom bisect import bisect_right as br\ndef main():\n    dic = {}\n    for i in range(1,N + 1):\n        A[ i ] += A[ i - 1 ]\n    for j in range(N + 1):\n        if (A[j] - j)%K in dic:\n            dic[(A[j] - j)%K].append(j)\n        else:\n            dic[(A[j] - j)%K] = [j]\n\n    ans = 0\n    \n    for i in range(1,N + 1):\n        tmp = dic[(A[i] - i)%K]\n        left = br(tmp,i - K)\n        right = br(tmp,i) - 1\n        ans += right - left\n    print(ans)\n    return \n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n, k = map(int, input().split())\n    b = list(map(int, input().split()))\n    a = [0]*(n+1)\n    for i in range(n):\n        a[i+1] = b[i]\n    for i in range(n+1):\n        if 0 < i:\n            a[i] += a[i-1]\n        a[i] %= k\n    for i in range(1, n+1):\n        a[i] = (a[i] - (i%k) + k) % k\n    dic = {}\n    ans = 0\n    l, r = 0, 0\n#    print(a)\n    while r < n+1:\n        x = a[r]\n        if k <= r-l:\n            dic[a[l]] -= 1\n            l += 1\n        if x in dic.keys():\n            ans += dic[x]\n            dic[x] += 1\n        else:\n            dic[x] = 1\n#        print(l, r)\n        r += 1\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nfrom itertools import accumulate\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, k = list(map(int, input().split()))\n    A = list([int(x) - 1 for x in input().split()])\n    S = [0] + list(accumulate(A))\n    S = [s % k for s in S]\n\n    cnt = defaultdict(int)\n    res = 0\n    for i in range(n + 1):\n        if i >= k:\n            cnt[S[i - k]] -= 1\n        res += cnt[S[i]]\n        cnt[S[i]] += 1\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "from collections import defaultdict\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = defaultdict(int)\nsa = [0] * (n + 1)\n# d[0] = 1\n# if k == 1:\n#     print(0)\n#     return\nfor i in range(n):\n    sa[i + 1] = sa[i] + a[i]\n    sa[i + 1] %= k\nans = 0\nfor i in range(n + 1):\n    v = sa[i] - i\n    v %= k\n    ans += d[v]\n    d[v] += 1\n    if 0 <= i - k + 1:\n        vv = sa[i - k + 1] - (i - k + 1)\n        vv %= k\n        d[vv] -= 1\nprint(ans)\n# from collections import defaultdict\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\n# d = defaultdict(int)\n# sa = [0] * (n + 1)\n# d[0] = 1\n# if k == 1:\n#     print(0)\n#     return\n# for i in range(n):\n#     sa[i + 1] = sa[i] + a[i]\n#     sa[i + 1] %= k\n# ans = 0\n# for i in range(1, n + 1):\n#     v = sa[i] - i\n#     v %= k\n#     ans += d[v]\n#     d[v] += 1\n#     if 0 <= i - k + 1:\n#         vv = sa[i - k + 1] - (i - k + 1)\n#         vv %= k\n#         d[vv] -= 1\n# print(ans)\n", "from collections import defaultdict\nn,k = list(map(int,input().split()))\nl = list(map(int,input().split()))\n\nmod = [0]\nfor i in range(n):\n    a = (l[i]-1)%k\n    mod.append((mod[-1]+a)%k)\ndic = {0:1}\nans = 0\nfor i in range(1,n+1):\n    if i < k:\n        if mod[i] in dic:\n            ans += dic[mod[i]]\n            dic[mod[i]] += 1\n        else:\n            dic[mod[i]] = 1\n    else:\n        dic[mod[i-k]] -= 1\n        if mod[i] in dic:\n            ans += dic[mod[i]]\n            dic[mod[i]] += 1\n        else:\n            dic[mod[i]] = 1\n    \nprint(ans)\n", "import sys\nfrom itertools import accumulate\nfrom collections import defaultdict\ninput = sys.stdin.readline\nn,k = map(int,input().split())\na = list(map(int,input().split()))\na = [i-1 for i in a]\nsuma = [0]+list(accumulate(a))\nsuma = [i%k for i in suma]\nrem = defaultdict(int)\nans = 0\nif k > n:\n    for i in range(n+1):\n        x = suma[i]\n        rem[x] += 1\n    for s in rem.values():\n        ans += s*(s-1)//2\n    print(ans)\n    return\nfor i in range(k):\n    x = suma[i]\n    rem[x] += 1\nfor s in rem.values():\n    ans += s*(s-1)//2\nfor i in range(n-k+1):\n    rem[suma[i]%k] -= 1\n    rem[suma[i+k]%k] += 1\n    ans += rem[suma[i+k]] -1\nprint(ans)", "from collections import defaultdict as dd\nN, K = map(int, input().split())\na = list(map(int, input().split()))\nb = [val-1 for val in a]\nc = [0]*(N+1)\nfor i,val in enumerate(a):\n    c[i+1] = (c[i] + val-1)%K\n\ndic = dd(int)\nK2 = min(N,K-1)\nright = K2\nfor k,val in enumerate(c[1:K2+1]):\n    dic[val] += 1\nres = 0\n# \u5de6\u7aef\u3092\u52d5\u304b\u3057\u3066\u3044\u304f\nprev = 0\nfor val in c[1:]:\n    tgt = prev\n    res += dic[tgt]\n    if right!=N:\n        right += 1\n        dic[c[right]] += 1\n    dic[val] = max(0,dic[val]-1)\n    prev = val\nprint(res)", "from collections import defaultdict\nn,k = map(int,input().split())\na = list(map(int,input().split()))\nruisekiwa = [0 for _ in range(n+1)]\nfor i in range(n):\n\truisekiwa[i+1] = (ruisekiwa[i] + a[i] - 1) % k\ndp = defaultdict(lambda: 0)\nans = 0\ntmp = 0\nfor i in range(n+1):\n\ttmp += 1\n\tif tmp > k:\n\t\tdp[ruisekiwa[i-k]] -= 1\n\tans += dp[ruisekiwa[i]]\n\tdp[ruisekiwa[i]] += 1\nprint(ans)", "N,K=map(int,input().split())\nL=list(map(int,input().split()))\nR=list()\nif K>=N:\n  sums=0\n  c=dict()\n  for i in range(N):\n    sums+=L[i]\n    sums%=K\n    a=(sums-i-1)%K\n    if a in c:\n      c[a]+=1\n    else:\n      c[a]=1\n  ans=0\n  for i in c:\n    ans+=(c[i]-1)*c[i]//2\n  if 0 in c:\n    print(ans+c[0])\n  else:\n    print(ans)\nelse:\n  ans=0\n  c=[0]*K\n  sums=0\n  for i in range(N):\n    sums+=L[i]\n    sums%=K\n    a=(sums-i-1)%K\n    R.append(a)\n  for i in range(K-1):\n    c[R[i]]+=1\n  ans+=c[0]\n  c[R[K-1]]+=1\n  for i in range(N):\n    if i<N-K:\n      ans+=c[R[i]]-1\n      c[R[i]]-=1\n      c[R[i+K]]+=1\n    else:\n      ans+=c[R[i]]-1\n      c[R[i]]-=1\n  print(ans)", "MOD = 10 ** 9 + 7\nINF = 10 ** 10\nimport sys\nsys.setrecursionlimit(100000000)\ndy = (-1,0,1,0)\ndx = (0,1,0,-1)\n\ndef main():\n    n,k = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    \n    cum = [0] * (n + 1)\n    dic = {0:1}\n    ans = 0\n    for i in range(min(n,k - 1)):\n        cum[i + 1] = (cum[i] + a[i])%k\n        tmp = (cum[i + 1] - i - 1)%k\n        if tmp in dic:\n            dic[tmp] += 1\n        else:\n            dic[tmp] = 1\n\n    for v in list(dic.values()):\n        ans += v * (v - 1)//2\n\n\n    for i in range(max(n - k + 1,0)):\n        dic[(cum[i] - i)%k] -= 1\n        cum[i + k] = (cum[i + k - 1] + a[i + k - 1])%k\n        tmp = (cum[i + k] - i - k)%k\n        if tmp in dic:\n            ans += dic[tmp]\n            dic[tmp] += 1\n        else:\n            dic[tmp] = 1\n\n    print(ans)\ndef __starting_point():\n    main()   \n\n__starting_point()", "import sys\nimport bisect\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef solve():\n\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    S = [0 for _ in range(N + 1)]\n\n    for i in range(N):\n        S[i + 1] = S[i] + A[i] - 1\n\n    d = dict()\n    for i in range(N + 1):\n        k = S[i] % K\n        if k in d:\n            d[k].append(i)\n        else:\n            d[k] = [i]\n\n    # print(d)\n\n    ans = 0\n    for k, v in list(d.items()):\n        if len(v) <= 1:\n            continue\n        else:\n            for i in range(len(v)):\n                s = v[i] + K - 1\n                si = bisect.bisect_right(v, s)\n                ans += (si - i) - 1\n                # print(i, si)\n\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "from collections import defaultdict\nimport bisect\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ns = 0\nS = [0]\nfor i, a in enumerate(A):\n    s += a\n    S.append(s % K)\n\ncnt = 0\ndic = {}\n\nfor i, s in enumerate(S):\n    x = (s - i) % K\n\n    if x in dic:\n        cnt += dic[x]\n        dic[x] += 1\n    else:\n        dic[x] = 1\n\n    K_prev = i - K + 1\n\n    if K_prev >= 0:\n        y = (S[K_prev] - (K_prev)) % K\n        dic[y] -= 1\n\n\nprint(cnt)", "from collections import defaultdict\nimport numpy as np\nn,k=map(int,input().split())\na=[0]+list(np.cumsum(list(map(int,input().split()))))\n\ndic = defaultdict(int)\nc = 0\nfor i in range(len(a)):\n    p = (a[i] - i) % k\n    c += dic[p]\n    dic[p] += 1\n    if i >= k - 1:\n        dic[(a[i - k + 1] - (i - k + 1)) % k] -= 1\nprint(c)", "from collections import defaultdict\nN,K=map(int,input().split())\nalist=list(map(int,input().split()))\n#print(alist)\n\nslist=[0]\nfor i in range(N):\n  slist.append(slist[-1]+alist[i])\n#print(slist)\n\nsslist=[]\nfor i in range(N+1):\n  sslist.append((slist[i]-i)%K)\n#print(sslist)\n\nanswer=0\nsi_dic=defaultdict(int)\nfor i in range(N+1):\n  if i-K>=0:\n    si_dic[sslist[i-K]]-=1\n    \n  answer+=si_dic[sslist[i]]\n  si_dic[sslist[i]]+=1\n  \nprint(answer)", "N,K = list(map(int,input().split()))\nS = []\nd = {}\nA = list(map(int,input().split()))\nans = 0\nsum =0\nfor i in range(1,N+1):\n    sum += A[i-1] % K\n    s = (sum - i) % K\n    if i > K:\n        x = S.pop(0)\n        d[x] -= 1\n    elif i < K:\n        if s == 0:\n            ans += 1\n    if s not in d:\n        d[s] = 0\n    ans += d[s]\n    d[s] += 1\n    S.append(s)\nprint(ans)\n", "def main():\n    from collections import defaultdict, deque\n\n    N, K = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    def accumulate(a, mod):\n        s = 0\n        yield s\n        for x in a:\n            s = (s + x - 1) % mod\n            yield s\n\n    acc = accumulate(a, mod=K)\n\n    d = defaultdict(int)\n    dq = deque()\n    ans = 0\n    for x in acc:\n        if x in d:  # in\u3067\u5224\u5b9a\u3057\u3066\u307f\u308b\n            ans += d[x]\n        d[x] += 1\n        dq.append(x)\n        if len(dq) >= K:\n            r = dq.popleft()\n            d[r] -= 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport numpy as np\nfrom collections import defaultdict\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, K = lr()\nA = np.array([1] + lr())\nA = (A-1) % K\nN += 1\nAcum = A.cumsum() % K\nd = defaultdict(int)\nanswer = 0\nfor i, x in enumerate(Acum):\n    answer += d[x]\n    d[x] += 1\n    if i >= K-1:\n        d[Acum[i-(K-1)]] -= 1\n\nprint(answer)\n", "import sys\nimport numpy as np\nfrom collections import defaultdict\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, K = lr()\nA = np.array([1] + lr())\nA = (A-1) % K\nAcum = A.cumsum() % K\ncounter = defaultdict(int)\nanswer = 0\nfor i in range(len(Acum)):\n    x = Acum[i]\n    answer += counter[x]\n    counter[x] += 1\n    if i >= K-1:\n        counter[Acum[i-(K-1)]] -= 1\n\nprint(answer)\n# 27\n", "import sys\nfrom collections import defaultdict\nfrom collections import deque\nimport numpy as np\nimport heapq\nfrom heapq import heappush, heappop\nimport itertools\n\n\n# read = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 7)\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nA = [0] + A\nA = list(itertools.accumulate(A))\nA = [x % K for x in A]\n\ncnt = defaultdict(int)\nans = 0\nfor i, a in enumerate(A):\n    x = (a - i) % K\n    #print(\"i\", i, \"a\", a, \"x\", x, \"cnt\", cnt)\n\n    ans += cnt[x]\n    cnt[x] += 1\n\n    if i >= K-1:\n        y = (A[i-K+1] - (i-K+1)) % K\n        cnt[y] -= 1\n\nprint(ans)\n", "from collections import Counter, deque\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nINF = 10**18\n\ncnt = Counter()\ncnt[0] = 1\nque = deque([0])\nsumR = 0\nans = 0\nfor right, a in enumerate(A, start=1):\n    if len(que) >= K:\n        cnt[que.popleft()] -= 1\n    sumR = (a + sumR) % K\n    D = (sumR - right) % K\n    ans += cnt[D]\n    cnt[D] += 1\n    que.append(D)\nprint(ans)\n", "from collections import defaultdict\nimport bisect\nn,k=list(map(int,input().split()))\na=[1]+list(map(int,input().split()))\nd = defaultdict(list)\nfor i in range(n+1):\n  a[i]-=1\nd[a[0]%k].append(0)\nfor i in range(n):\n  a[i + 1] += a[i]\n  d[a[i+1]%k].append(i+1)\nans=0\nfor l in list(d.values()):\n  for i, idx in enumerate(l):\n    ans += bisect.bisect_left(l,idx+k)-i-1\nprint(ans)\n", "import sys\nimport numpy as np\nfrom collections import defaultdict\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, K = lr()\nA = np.array([1] + lr())\nA = (A-1) % K\nN += 1\n# \u7d2f\u7a4d\u548c\u304c\u540c\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u7b87\u6240\u306b\u6ce8\u76ee\u3001\u8981\u7d20\u304cK-1\u96e2\u308c\u3066\u3044\u308b\u7d44\u307f\u5408\u308f\u305b\u306f\u7121\u7406\nAcum = (A.cumsum() % K).tolist()\nanswer = 0\ndic = defaultdict(int)\nfor i, cur in enumerate(Acum): \n    answer += dic[cur]\n    dic[cur] += 1\n    if i >= K-1:\n        vanish = Acum[i-(K-1)]\n        dic[vanish] -= 1\n\nprint(answer)\n# 10\n"]