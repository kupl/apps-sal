["import sys, math\n\n#f = open('input_0', 'r')\nf = sys.stdin\n\nP, Y = list(map(int, f.readline().split()))\n\nis_ok = False\nfor t in range(Y, P, -1):\n  is_ok = True\n  for x in range(2, P+1):\n    if t%x == 0:\n      is_ok = False\n      break\n    if x*x > t:\n      break\n  if is_ok:\n    print(t)\n    break\nif not is_ok:\n  print(-1)\n", "p, y = list(map(int, input().split()))\ndef f(x):\n\ti = 2\n\twhile i <= p and i * i <= y:\n\t\tif x % i == 0:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\nind = False\t\t\nfor i in range(y, p, -1):\n\tif f(i):\n\t\tprint(i)\n\t\tind = True\n\t\tbreak\nif not ind:\n\tprint(-1)\n", "p, y = list(map(int, input().split()))\n\nmx = 33000\n\nv = [False]*mx\nfor x in range(2, mx):\n    if not v[x]:\n        for i in range(x*x, mx, x):\n            v[i] = True\nprimes = [i for i, _ in enumerate(v) if not _ and i>1]\nfail = True\nfor v in range(y, p, -1):\n    fail = False\n    for pr in primes:\n        if pr <= p and v%pr == 0:\n            fail = True\n        elif pr > p: break\n    if not fail:\n        print(v)\n        break\n\nif fail:\n    print(-1)\n\n\n", "import sys\n\ndef unhoppable(p, n):\n    for d in range(2, n+1):\n        if p % d == 0:\n            return False\n        if d*d > p:\n            break\n    return True\n\np, y = list(map(int, input().split()))\nfor b in range(y, p, -1):\n    if unhoppable(b, p):\n        print(b)\n        return\nprint(-1)\n", "p, y = [int(x) for x in input().split()]\nres = -1\nfor i in range(y, p, -1):\n    flag = True\n    for a in range(2, min(p+1, int(i**0.5)+1)):\n        if i % a == 0:\n            flag = False\n            break\n    if flag:\n        res = i\n        break\nprint(res)\n", "p,y = map(int, input().split())\nfrom math import sqrt\nans = y\nwhile ans != 1:\n    find =True\n    if ans <= p:\n        ans = 1\n        continue\n    for i in range(2, min(p+1, int(sqrt(ans))+1)):\n        if ans % i == 0:\n            find = False\n            break\n    if find:\n        break\n    ans -= 1\nif ans == 1:\n    print(-1)\nelse:\n    print(ans)", "import math\n\ndef getPrimes(v):\n\t\td = 2\n\t\tgr = int(math.sqrt(v)) + 1\n\t\tres = []\n\t\twhile d <= gr and v > 1:\n\t\t\tif v % d == 0:\n\t\t\t\tres.append(d)\n\t\t\t\twhile v % d == 0:\n\t\t\t\t\tv //= d\n\t\t\td += 1\n\t\tif v > 1:\n\t\t\tres.append(v)\n\t\treturn res\n\t\t\ndef solve(p, y):\n\tx = y\n\twhile x > p:\n\t\tpr = getPrimes(x)\n\t\tif all(v > p for v in pr):\n\t\t\treturn x\n\t\tx -= 1\n\treturn -1\n\np, y = list(map(int, input().split()))\nprint(solve(p, y))\n", "p,y = list(map(int,input().split()))\nprimes = []\nm = int(min(y**0.5,p))\nfor i in range(2,m+1):\n    pri = True\n    for pp in primes:\n        if i//pp*pp==i: \n            pri = False\n            break\n    if pri: primes.append(i)\n\nsol = False\nfor yy in range(y,p,-1):\n    ok = True\n    for pp in primes:\n        if yy//pp*pp==yy:\n            ok = False\n            break\n    if ok:\n        sol = yy\n        break\n\nif sol:\n    print(sol)\nelse:\n    print(-1)\n", "\np,y= [int(x) for x in input().split()]\nimport math as m\n\nfor i in range(y, p, -1):\n    for d in range(2, min( int(m.sqrt(i))+1, p+1 )):\n        if i % d ==0:\n            break\n    else:\n        print(i)\n        break\nelse:\n    print(-1)\n", "p,y = list(map(int,input().split()))\nimport math\ndef is_prime(n,p):\n    if n % 2 == 0 and n > 2: \n        return False\n    if p == 2: return True\n    for i in range(3, min(p,int(math.sqrt(n)))+1, 2):\n        if n % i == 0:\n            return False\n    return True\nfor x in range(y,p,-1):\n    if is_prime(x,p):\n        print(x)\n        break\nelse:\n    print(-1)\n\n", "from math import sqrt; from itertools import count, islice\n\n# def isPrime(n,p):\n#     for i in range(2,)\n#     return n > 1 and all(n%i for i in islice(count(2), int(sqrt(p))))\n\n\ndef isPrime(n,p) :\n    j=int(sqrt(n))\n    if p*p < n:\n        j=p\n   # Check from 2 to n-1\n    for i in range(2, j+1):\n        if n % i == 0:\n            return False\n    return True\n\n    # # This is checked so that we can skip\n    # # middle five numbers in below loop\n    # if (n % 2 == 0 or n % 3 == 0) :\n    #     return False\n    #\n    # i = 5\n    # while(i * i <= n) :\n    #     if (n % i == 0 or n % (i + 2) == 0) :\n    #         return False\n    #     i = i + 6\n    #\n    # return True\n\np,y=list(map(int,input().split(' ')))\nflag=0\nfor i in range(y,p,-1):\n    if isPrime(i,p):\n        print(i)\n        flag=1\n        break\nif flag==0:\n    print(-1)\n", "from math import trunc\np,y = map(int,input().split())\nif p ** 2 < y:\n    st = p\nelse:\n    st = trunc(y ** 0.5)\nfor i in range(y,p,-1):\n    check = True\n    for j in range(2,st + 1):\n        if i % j == 0:\n            check = False\n            break\n    if check:\n        print(i)\n        return\nprint(-1)", "import math\nimport sys\n\n\ndef is_prime(n, p):\n    if n % 2 == 0 and n > 2:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if i > p: break\n        if n % i == 0:\n            return False\n    return True\n\n\ndef main():\n    p, y = list(map(int, sys.stdin.readline().split()))\n\n    highest = y\n    if y % 2 == 0:\n        highest -= 1\n    while highest > p:\n        if is_prime(highest, p):\n            print(highest)\n            return\n        highest -= 2\n\n    print(-1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# vars: get_hopper, p, q, x, y\ndef get_hopper(x1):\n\tfor hopper in range(2, 1+min(p, int(x1**.5))):\n\t\tif x1 % hopper == 0:\n\t\t\treturn hopper\np, y = list(map(int, input().split()))\nfor x in range(y, p, -1):\n\tif get_hopper(x) is None:\n\t\tprint(x)\n#\n\t\treturn\nprint('-1')\n", "def SieveOfEratosthenes(n):\n    # Create a boolean array \"prime[0..n]\" and initialize\n    #  all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n\n            # Update all multiples of p\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    ls=[]\n    # Print all prime numbers\n    for p in range(2, n):\n        if prime[p]:\n            ls.append(p)\n    return ls\nls=SieveOfEratosthenes(100000)\np,y=[int(i) for i in input().split(\" \")]\nwhile (y!=p):\n    flag=0\n    for i in ls:\n        if i>p:\n            break\n        if not y%i:\n            flag=1\n            break\n    if not flag:\n        print(y)\n        return\n    y-=1\nprint(-1)", "import math\n\ndef check(x):\n\tlimit = math.ceil(math.sqrt(x))\n\t\n\tfor i in range(3, limit+1, 2):\n\t\tif x%i==0:\n\t\t\treturn i\n\treturn x\n\np,y = list(map(int, input().split()))\n\nans = -1\n\nif y%2==0:\n\ty-=1\n\nfor x in range(y, p, -2):\n\tq = check(x)\n\tif q>p:\n\t\tans = x\n\t\tbreak\nprint(ans)\n", "def main():\n    p,y=list(map(int,input().split()))\n    i=0\n    while i<(10**5)*5:\n        if y<=p:\n            break\n        i+=1\n        pr=True\n        for w in range(2,p+1):\n            if w*w>y:\n                break\n            if y%w==0:\n                pr=False\n                break\n        if pr:\n            print(y)\n            return\n        y-=1\n    print('-1')\nmain()\n", "p, y = map(int, input().split())\ndef f(x):\n\ti = 2\n\twhile i <= p and i * i <= y:\n\t\tif x % i == 0:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\nind = False\t\t\nfor i in range(y, p, -1):\n\tif f(i):\n\t\tprint(i)\n\t\tind = True\n\t\tbreak\nif not ind:\n\tprint(-1)", "GI = lambda: int(input()); GIS = lambda: list(map(int, input().split())); LGIS = lambda: list(GIS())\n\nfrom math import sqrt\n\ndef main():\n  p, y = GIS()\n\n  for x in range(y, p, -1):\n    for d in range(2, min(p, int(sqrt(x))) + 1):\n      if not x % d:\n        break\n    else:\n      return x\n\n  return -1\n\nprint(main())\n", "from math import sqrt\n\np, y = list(map(int, input().split()))\n\nyp = int(sqrt(y))\n\nif yp > p:\n    yp = p\n    if yp % 2 == 0: yp -= 1\n\nif p == 2: \n    if y == 2:\n        print(-1)\n        return\n    if y % 2 == 0:\n        print(y-1)\n        return\n    else:\n        print(y)\n        return\n    \n    \nif yp % 2 == 0: yp -= 1\n\nif y % 2 == 0: y -= 1\n\n\nif yp == 1:\n    if y > 2 and y % 2 == 0:\n        print(y-1)\n        return\n    if y > p:\n        print(y)\n        return\n    else:\n        print(-1)\n        return\n\nwhile y > p:\n    yr = yp\n    while yr > 2:\n        if y % yr == 0:\n            yr -= 2\n            break\n\n        elif yr == 3:\n            print(y)\n            return\n\n        elif yr > 3:\n            yr -= 2\n\n\n    y -= 2\n\nprint(\"-1\")", "p,y=map(int,input().split(' '))\nf2=0\nfor i in range(y,max(p,y-301),-1):\n    f=0\n    for j in range(2,min(int(i**0.5)+1,p+1)):\n        if i%j==0:\n            f=1\n            break\n    if f==0:\n        f2=1\n        print(i)\n        break\nif f2==0:\n    print(-1)", "import math\n\ndef check(n, top):\n    for x in range(2, top+1):\n        if n % x == 0:\n            return False\n    return True\n\n\ndef __starting_point():\n    p, y = input().split()\n    p = int(p)\n    y = int(y)\n\n    m = min(math.floor(math.sqrt(y)),p)\n\n    cur = y\n    while cur > p:\n        if check(cur, m):\n            print(cur)\n            return\n        cur -= 1\n\n    print(-1)\n\n__starting_point()", "import math\n\np, y = list(map(int, input().split()))\n\ndef isPrime(p,n):\n    i = 2\n    while i <= math.sqrt(n) and i <= p:\n        if n%i == 0:\n            return False\n        i += 1\n    return True\n    \n\ni = y\nans = -1\nwhile i > p:\n    if isPrime(p,i):\n        ans = i\n        break\n    i -= 1\n\nprint(ans)\n", "def f(n):\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=1\n    return True\np,y=list(map(int,input().split()))\nif p>100000:\n    i=y\n    while not f(i):\n        if i==p:\n            print(-1)\n            return\n        i-=1\n    print(i)\nelse:\n    for i in range(y,p,-1):\n        for j in range(2,p+1):\n            if i%j==0:\n                break\n        else:\n            print(i)\n            break\n    else:\n        print(-1)\n    \n    \n"]