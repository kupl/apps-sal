["k2, k3, k5, k6 = list(map(int, input().split()))\nc = min(k2, k5, k6)\nk2 -= c\nans = 256 * c\nans += 32 * min(k3, k2)\nprint(ans)\n", "k2, k3, k5, k6 = list(map(int, input().split()))\nk256 = min(k2, k5, k6)\nk2 -= k256\nk5 -= k256\nk6 -= k256\nk32 = min(k2, k3)\nprint(k256 * 256 + 32 * k32)\n", "read = lambda: list(map(int, input().split()))\nk2, k3, k5, k6 = read()\ncnt1 = min(k2, k5, k6)\ncnt2 = min(k2 - cnt1, k3)\nans = cnt1 * 256 + cnt2 * 32\nprint(ans)\n", "k2, k3, k5, k6 = map(int, input().split())\nn = min(k2, k5, k6)\nm = min(k2 - n, k3)\nprint(n * 256 + m * 32)", "k2, k3, k5, k6 = list(map(int, input().split()))\n\nmn_56 = min(k5, k6)\nmn_256 = min(mn_56, k2)\n\nrest_k2 = k2 - mn_256\nk32 = min(k3, rest_k2)\n\nprint(mn_256 * 256 + k32 * 32)\n", "a, b, c, d = map(int, input().split())\nx = min(a, c, d)\nans = x * 256\na-=x\nc-=x\nd-=x\nans += min(a, b) * 32\nprint(ans)", "k2, k3, k5, k6 = list(map(int, input().split()))\n\ns = min(k2, k5, k6) * 256\nk2 -= min(k2, k5, k6)\ns += min(k2, k3) * 32\n\nprint(s)\n", "a2,a3,a5,a6 = map(int,input().split())\ns256 = min(a2,a5,a6)\na2 -= s256\na5 -= s256\na6 -= s256\ns32 = min(a2,a3)\nprint(s256*256+s32*32)", "k2, k3, k5, k6 = map(int, input().split(' '))\nnum256 = min(k2, k5, k6)\nans = 256 * num256\nk2 -= num256\nnum32 = min(k2, k3)\nans += 32 * num32\nprint(ans)", "a = list(map(int, input().split()))\nw = min(a[0], a[2], a[3])\nam = 256 * w\nam += 32 * min(a[0] - w, a[1])\nprint(am)", "a, b, c, d = map(int, input().split())\nmini = min(a, c, d)\nans = 0\nans += mini * 256\na -= mini\nc -= mini\nd -= mini\nmini = min(a, b)\nans += mini * 32\nprint(ans)", "k2,k3,k5,k6=map(int,input().split())\ns=min(k2,k5,k6)*256\nk2=k2-min(k2,k5,k6)\nprint(s+min(k2,k3)*32)", "a, b, c, d = map(int, input().split())\nmx = min(a, c, d)\nans = mx * 256 + min(a - mx, b) * 32\nprint(ans)", "a, b, c, d = list(map(int, input().split()))\nm = min(a, c, d)\na -= m\nc -= m\nd -= m\nans = 256 * m\nans += 32 * min(a,b )\nprint(ans)\n", "a, b, c, d = map(int, input().split())\nans = 0\nans += 256 * min(a, min(c, d))\nleft = a - ans // 256\nans += 32 * min(b, left)\nprint(ans)", "from math import *\nfrom sys import *\nfrom queue import *\n\na,b,c,d=(int(z) for z in input().split())\nans=0\nans+=256*min(a,c,d)\na-=min(a,c,d)\nans+=32*min(a,b)\nprint(ans)", "k2, k3, k5, k6 = map(int, input().split())\n\na = min(k2, k5, k6)\nb = min(k3, k2-a)\nprint(256*a+32*b)", "k2, k3, k5, k6 = list(map(int, input().split()))\nk = min(k2, min(k5, k6))\nans = k * 256\nk2 -= k\nans += 32 * min(k2, k3)\nprint(ans)\n", "k2, k3, k5, k6 = map(int, input().split())\ns = 0\ns += 256 * min(k2, k5, k6)\nk2 -= min(k2, k5, k6)\ns += 32 * min(k2, k3)\nprint(s)", "k2, k3, k5, k6 = [int(x) for x in input().split()]\nc1 = min(k2, k5, k6)\nans = c1*256\nk2 -= c1\nif k2 > 0:\n    ans += 32*(min(k2,k3))\nprint(ans)", "__author__ = 'Think'\nk2, k3, k5, k6=[int(i) for i in input().split()]\nr=min(k5, k6)\nif r>k2:\n\tprint(256*k2)\nelse:\n\tprint(256*r+32*min(k3, k2-r))", "#!/usr/bin/env python3\n\n\ndef lmap(f, x):\n    return list(map(f, x))\n\n\ndef read_ints():\n    return lmap(int, input().strip().split())\n\n\ndef main():\n    res = 0\n    a2, a3, a5, a6 = read_ints()\n    n256 = min(a2, a5, a6)\n    res += n256 * 256\n    a2 -= n256\n    a5 -= n256\n    a6 -= n256\n    n32 = min(a3, a2)\n    res += n32 * 32\n    return res\n\n\nprint(main())\n", "l = [int(x) for x in input().split()]\nk = min(l[0],l[2],l[3])\na = l[0] - k\nj = min(a,l[1])\nprint(256*k + 32*j)", "k2, k3, k5, k6 = list(map(int, input().split()))\n\nn = min(k2, k5, k6)\ns = n * 256\nk2 -= n\nif k2 > 0:\n    s += min(k2, k3) * 32\nprint(s)\n"]