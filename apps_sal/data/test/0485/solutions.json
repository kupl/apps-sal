["#!/usr/bin/env python\nimport sys\n\nn = int(input())\nk = (n << 2) + 1\n\nx, y = [], []\nfor i in range(k):\n    xi, yi = list(map(int, input().split()))\n    x.append(xi)\n    y.append(yi)\n\nfor lx in range(0, 50):\n    for ly in range(0, 50):\n        for side_len in range(1, 51):\n            ok, idx = True, -1\n            for i in range(k):\n                if not (((x[i] == lx or x[i] == lx + side_len) and ly <= y[i] <= ly + side_len) or\n                    ((lx <= x[i] <= lx + side_len) and (y[i] == ly or y[i] == ly + side_len))):\n                    if idx != -1:\n                        ok = False\n                    else:\n                        idx = i\n            if ok:\n                print(x[idx], y[idx])\n                return\n", "n = int(input())\nl = [ list(map(int,input().split())) for _ in range(4*n+1) ]\nx, y = list(map(list, list(zip(*l))))\nhx, lx, hy, ly = max(x), min(x), max(y), min(y)\ndef find(w, i):\n    for j in l:\n        if j[ w ] == i:\n            return j\n\nif x.count(hx) == 1:\n    print( *find( 0, hx ) )\nelif x.count(lx) == 1:\n    print( *find( 0, lx ) )\nelif y.count(hy) == 1:\n    print( *find( 1, hy ) )\nelif y.count(ly) == 1:\n    print( *find( 1, ly ) )\nelse:\n    for i in l:\n        if i[ 0 ] not in[ hx, lx ] and i[ 1 ] not in [ hy, ly ]:\n            print( *i )\n            break\n", "\nN = int(input())\n\n#N,B = [int(x) for x in arr.split(' ')]\n\n#arr = input()\n#A = [int(x) for x in arr.split(' ')]\n\nx_freq = {}\ny_freq = {}\n\ndata = []\nfor i in range(4*N+1):\n    arr = input()\n    x,y = [int(x) for x in arr.split(' ')]\n    data.append([x,y])\n    \n    if x not in x_freq:\n        x_freq[x] = 1\n    else:\n        x_freq[x] += 1\n        \n    if y not in y_freq:\n        y_freq[y] = 1\n    else:\n        y_freq[y] += 1\n        \nx_inteval = []\ny_inteval = []\n\nfor num in x_freq:\n    if x_freq[num]>=(N):\n        x_inteval.append(num)\n        \nfor num in y_freq:\n    if y_freq[num]>=(N):\n        y_inteval.append(num)\n        \nx_inteval = [min(x_inteval),max(x_inteval)]\ny_inteval = [min(y_inteval),max(y_inteval)]\n#print(x_inteval,y_inteval)\nfor p in data:\n    if (p[0] not in x_inteval) and (p[1] not in y_inteval):\n        print(p[0],p[1])\n        quit()\n    elif p[0]<x_inteval[0] or p[0]>x_inteval[1]:\n        print(p[0],p[1])\n        quit()\n    elif p[1]<y_inteval[0] or p[1]>y_inteval[1]:\n        print(p[0],p[1])\n        quit()\n", "n = int(input())\n\nl = []\ndx = dict()\ndy = dict()\n\nfor _ in range(4 * n + 1):\n    x, y = list(map(int, input().split(\" \")))\n    l.append((x, y))\n    dx[x] = dx.get(x, 0) + 1\n    dy[y] = dy.get(y, 0) + 1\n\nxmin = min(dx.keys())\nxmax = max(dx.keys())\nymin = min(dy.keys())\nymax = max(dy.keys())\n\ndef find(enu, f):\n    for e in enu:\n        if f(e):\n            return e\n    return None\n\nintruder = None\nif dx[xmin] == 1:\n    intruder = find(l, lambda e: e[0] == xmin)\nelif dx[xmax] == 1:\n    intruder = find(l, lambda e: e[0] == xmax)\nelif dy[ymin] == 1:\n    intruder = find(l, lambda e: e[1] == ymin)\nelif dy[ymax] == 1:\n    intruder = find(l, lambda e: e[1] == ymax)\nelse:\n    intruder = find(l, lambda e: e[0] > xmin and e[0] < xmax and e[1] > ymin and e[1] < ymax)\n\nx, y = intruder\nprint(x, y)\n", "# -*- coding: utf-8 -*-\nimport sys\nfrom operator import itemgetter\nfrom fractions import gcd\nfrom math import ceil, floor\nfrom copy import deepcopy\nfrom itertools import accumulate\nfrom collections import Counter\nimport math\nfrom functools import reduce\nfrom bisect import bisect_right\nsys.setrecursionlimit(200000)\ninput = sys.stdin.readline\ndef ii(): return int(input())\ndef mi(): return map(int, input().rstrip().split())\ndef lmi(): return list(map(int, input().rstrip().split()))\ndef li(): return list(input().rstrip())\ndef debug(x): print(\"debug: \", x, file=sys.stderr)\n# template\n\n\ndef main():\n    n = ii()\n    a = [tuple(mi()) for i in range(4 * n + 1)]\n    # print(a)\n    for x in range(60):\n        for y in range(60):\n            for m in range(60):\n                ans = []\n                for i in range(4 * n + 1):\n                    if ((x == a[i][0] or x + m == a[i][0]) and y <= a[i][1] <= y+m) or ((y == a[i][1] or y + m == a[i][1]) and x <= a[i][0] <= x+m):\n                        continue\n                    else:\n                        ans.append(a[i])\n                if len(ans) == 1:\n                    # print(x, y, m)\n                    print(ans[0][0], ans[0][1])\n                    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\narr = []\nfor i in range(4*n + 1):\n    str_ = input()\n    x, y = str_.split()\n    arr.append((int(x), int(y)))\n\narr.sort()\n\nn1 = 4*n+1\n\ni = 1\nwhile arr[i][0] == arr[i-1][0]:\n    i += 1\n\nif i == 1:\n    print(str(arr[0][0]) + ' ' + str(arr[0][1]))\n    return\nlow_x = arr[0][0]\n\ni = n1-2\nwhile arr[i][0] == arr[i+1][0]:\n    i -= 1\nif i == n1-2:\n    print(str(arr[n1-1][0]) + ' ' + str(arr[n1-1][1]))\n    return\nhigh_x = arr[n1-1][0]\n\n\nfor i in range(n1):\n    arr[i] = (arr[i][1], arr[i][0])\n\narr.sort()\ni = 1\nwhile arr[i][0] == arr[i-1][0]:\n    i += 1\nif i == 1:\n    print(str(arr[0][1]) + ' ' + str(arr[0][0]))\n    return\nlow_y = arr[0][0]\n\ni = n1-2\nwhile arr[i][0] == arr[i+1][0]:\n    i -= 1\nif i == n1-2:\n    print(str(arr[n1-1][1]) + ' ' + str(arr[n1-1][0]))\n    return\nhigh_y = arr[n1-1][0]\n\nfor i in range(n1):\n    arr[i] = (arr[i][1], arr[i][0])\n\nfor i in range(n1):\n    if not (arr[i][0] == low_x or arr[i][0] == high_x or arr[i][1] == low_y or arr[i][1] == high_y):\n        print(str(arr[i][0]) + ' ' + str(arr[i][1]))\n        return\n\n", "import sys\nimport math as m\n\ndef sort(a):\n    mid = m.ceil(len(a)/2)\n    if len(a) == 1:\n        return a\n    else:\n        al = sort(a[:mid])\n        ar = sort(a[mid:])\n        i = 0\n        j = 0\n        sa = []\n        c = []\n        while i < len(al) or j < len(ar):\n            if i == len(al):\n                sa.append(ar[j])\n                j += 1\n            elif j == len(ar):\n                sa.append(al[i])\n                i += 1\n            elif al[i]>ar[j]:\n                sa.append(ar[j])\n                j += 1\n            else:\n                sa.append(al[i])\n                i += 1\n        return sa\n\ndef main():\n    input = sys.stdin.readline()\n    n = int(input)\n    x = []\n    y = []\n    for i in range(4*n+1):\n        input = sys.stdin.readline()\n        X, Y = [int(j) for j in input.split()]\n        x.append(X)\n        y.append(Y)\n    xs = sort(x)\n    ys = sort(y)\n    px = 0\n    py = 0\n    if xs[0] != xs[1]:\n        X = xs[0]\n    elif xs[4*n-1] != xs[4*n]:\n        X = xs[4*n]\n    else:\n        px = 1\n    if ys[0] != ys[1]:\n        Y = ys[0]\n    elif ys[4 * n - 1] != ys[4 * n]:\n        Y = ys[4 * n]\n    else:\n        py = 1\n    if px and not(py):\n        i = 0\n        while i < 4*n+1 and y[i] != Y:\n            i += 1\n        X = x[i]\n    if py and not(px):\n        i = 0\n        while i < 4 * n + 1 and x[i] != X:\n            i += 1\n        Y = y[i]\n    if px and py:\n        i = 0\n        while x[i] == min(x) or x[i] == max(x) or y[i] == min(y) or y[i] == max(y):\n            i += 1\n        X, Y = x[i], y[i]\n    print(X,Y)\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\ndef check(l):\n    a = b = float('inf') # max points\n    c = d = 0 # min points\n    for x, y in l:\n        a = min(a, x)\n        b = min(b, y)\n        c = max(c, x)\n        d = max(d, y)\n    borders = [0] * 4\n    for x, y in l:\n        \n        if x in {a, c}:\n            if y < b or y > d:\n                return False\n            if x == a:\n                borders[0] += 1\n            else:\n                borders[1] += 1\n        if y in {b, d}:\n            if x < a or x > c:\n                return False\n            if y == b:\n                borders[2] += 1\n            else:\n                borders[3] += 1\n        if x not in {a, c} and y not in {b, d}:\n            return False\n    return all(e >= n for e in borders)\n\n\nl = [[*map(int, input().split())] for _ in range(4 * n + 1)]\n\nfor i in range(len(l)):\n    if check(l[:i] + l[i + 1:]):\n        print(*l[i])\n        return", "import math\nimport sys,string,bisect,heapq\ninput=sys.stdin.readline\nfrom collections import deque,defaultdict\nL=lambda : list(map(int,input().split()))\nLs=lambda : list(input().split())\nM=lambda : list(map(int,input().split()))\nI=lambda :int(input())\nn=I()\nl=[]\nx=defaultdict(int)\ny=defaultdict(int)\nfor i in range(4*n+1):\n    a=L()\n    l.append(a)\n    x[a[0]]+=1\n    y[a[1]]+=1\nl.sort()\nleftx=l[0][0]\n\nif(x[l[0][0]]==1 or x[l[0][0]]>n+2):\n    keyx=l[0][0]\n    leftx=l[1][0]\n\nrightx=l[-1][0]\nif(x[l[-1][0]]==1 or x[l[-1][0]]>n+2):\n    keyx=l[-1][0]\n    rightx=l[-2][0]\n\nl.sort(key=lambda x:x[1])\ndowny=l[0][1]\nif(y[l[0][1]]==1 or y[l[0][1]]>n+2):\n    keyy=l[0][1]\n    downy=l[1][1]\n\nupy=l[-1][1]\nif(y[l[-1][1]]==1 or y[l[-1][1]]>n+2):\n    upy=l[-2][1]\n    keyy=l[-1][1]\nc=0\nfor i in l:\n    if(i[0]==leftx):\n        if(i[1]<=upy and i[1]>=downy):\n            c+=1\n        else:\n            print(*i)\n            break\n    elif(i[0]==rightx):\n        if(i[1]<=upy and i[1]>=downy):\n            c+=1\n        else:\n            print(*i)\n            break\n    else:\n        if(i[1]==downy):\n            if(i[0]>=leftx and i[0]<=rightx):\n                c+=1\n            else:\n                print(*i)\n                break\n        elif(i[1]==upy):\n            if(i[0]>=leftx and i[0]<=rightx):\n                c+=1\n            else:\n                print(*i)\n                break\n        else:\n            print(*i)\n            break\n", "n = int(input())\nf = []\nX = []\nY = []\nfor i in range(4 * n + 1):\n    x, y = list(map(int, input().split()))\n    f.append((x, y))\n    X.append(x)\n    Y.append(y)\nl = min(X)\nr = max(X)\nd = min(Y)\nu = max(Y)\nif r - l == u - d:\n    for i in f:\n        if X.count(i[0]) == 1 and Y.count(i[1]) == 1:\n            print(i[0], i[1])\n            return\n    for i in f:\n        if l < i[0] < r and d < i[1] < u:\n            print(i[0], i[1])\n            return\nelse:\n    for i in f:\n        if X.count(i[0]) == 1 and Y.count(i[1]) == 1:\n            print(i[0], i[1])\n            return\n    for i in f:\n        if X.count(i[0]) == 1 and (i[0] == l or i[0] == r):\n            print(i[0], i[1])\n            return\n        elif Y.count(i[1]) == 1 and (i[1] == u or i[1] == d):\n            print(i[0], i[1])\n            return\n", "n = int(input())\nl = []\nfor i in range(4*n+1):\n    a,b = list(map(int, input().split()))\n    l.append([a,b])\nx1 = -1\nx2 = -1\ny1 = -1\ny2 = -1\nh = [0]*51\nfor i in range(4*n+1):\n    h[l[i][0]]+=1\nfor i in range(51):\n    if(h[i]>=n and x1==-1):\n        x1=i\n    if(h[50-i]>=n and x2==-1):\n        x2=50-i\nh = [0]*51\nfor i in range(4*n+1):\n    h[l[i][1]]+=1\nfor i in range(51):\n    if(h[i]>=n and y1==-1):\n        y1=i\n    if(h[50-i]>=n and y2==-1):\n        y2=50-i\n#print(x1,x2,y1,y2)\nfor i in range(4*n+1):\n    if(l[i][0]==x1 or l[i][0]==x2):\n        if(not(l[i][1]>=y1 and l[i][1]<=y2)):\n            print(l[i][0],l[i][1])\n            break\n    else:\n        if(l[i][1]==y1 or l[i][1]==y2):\n            if(not(l[i][0]>=x1 and l[i][0]<=x2)):\n                print(l[i][0],l[i][1])\n                break\n        else:\n            print(l[i][0],l[i][1])\n            break\n        \n    \n", "#!/usr/bin/env python\n\nn = int(input())\n\nseenx = set()\nseeny = set()\nxs = []\nys = []\n\nfor _ in range(4*n + 1):\n    x, y = list(map(int, input().strip().split()))\n    seenx.add(x)\n    seeny.add(y)\n    xs.append(x)\n    ys.append(y)\n\nbadx, bady = -1, -1\n\nminx = min(xs)\nmaxx = max(xs)\nif xs.count(minx) < n:\n    badx = minx\n    bady = ys[xs.index(minx)]\nelif xs.count(maxx) < n:\n    badx = maxx\n    bady = ys[xs.index(maxx)]\nminy = min(ys)\nmaxy = max(ys)\nif bady == -1:\n    if ys.count(miny) < n:\n        bady = miny\n        badx = xs[ys.index(miny)]\n    elif ys.count(maxy) < n:\n        bady = maxy\n        badx = xs[ys.index(maxy)]\n\nif badx == -1: #the point is inside the square\n    for i, x in enumerate(xs):\n        if x not in (minx, maxx) and ys[i] not in (miny, maxy):\n            badx = x\n            bady = ys[i]\n            break\n\nprint(badx, bady)\n", "from collections import Counter\n\nn = int(input())\n\npoints = [[int(i) for i in input().split()] for _ in range(4 * n + 1)]\n\nc_x = Counter(map(lambda a: a[0], points))\nc_y = Counter(map(lambda a: a[1], points))\n\nx = [a for a in  c_x if c_x[a] >= n]\ny = [a for a in  c_y if c_y[a] >= n]\n\ns_x = (min(x), max(x))\ns_y = (min(y), max(y))\n\nfor p in points:\n    if not ((p[0] in s_x and s_y[0] <= p[1] <= s_y[1]) or\\\n            (p[1] in s_y and s_x[0] <= p[0] <= s_x[1])):\n        print(*p)", "MAXV = 53\n\ndef is_on_border(x_min, x_max, y_min, y_max, x, y):\n\tif (x == x_min or x == x_max) and (y_min <= y and y <= y_max):\n\t\treturn True\n\treturn (y == y_min or y == y_max) and (x_min <= x and x <= x_max)\n\ndef unique_non_border(p, x_min, x_max, y_min, y_max):\n\tres = -1\n\tfor i in range(len(p)):\n\t\tif not is_on_border(x_min, x_max, y_min, y_max, p[i][0], p[i][1]):\n\t\t\tif res != -1:\n\t\t\t\treturn -1\n\t\t\tres = i\n\treturn res\n\ndef sol(p):\n\tfor l in range(1, MAXV + 1):\n\t\tfor x in range(0, MAXV - l + 1):\n\t\t\tfor y in range(0, MAXV - l + 1):\n\t\t\t\tres = unique_non_border(p, x, x + l, y, y + l)\n\t\t\t\tif res != -1:\n\t\t\t\t\treturn res\n\tassert(False)\n\treturn -1\n\nn = int(input())\np = []\nfor i in range(4 * n + 1):\n\tx, y = list(map(int, input().split()))\n\tp.append((x, y))\nans = sol(p)\nprint(*p[ans])\n", "from sys import stdin, stdout\ndef rsingle_int():\n    return int(stdin.readline().rstrip())\n \ndef rmult_int():\n    return [ int(x) for x in stdin.readline().rstrip().split() ]\n \ndef r_str():\n    return stdin.readline().rstrip()\n    \ndef rsingle_char():\n    return stdin.read(1)\n \ndef main():\n    n = rsingle_int()\n    num_p = 4 * n + 1\n    points = []\n    for i in range(num_p):\n        points.append(rmult_int())\n    \n    point_x = {}\n    for point in points:\n        if point[0] not in point_x:\n            point_x[point[0]] = 0\n        point_x[point[0]] += 1\n    \n    point_y = {}\n    for point in points:\n        if point[1] not in point_y:\n            point_y[point[1]] = 0\n        point_y[point[1]] += 1\n    \n    x_min = 51\n    x_max = -1\n    for x_key in point_x.keys():\n        if x_key > x_max and point_x[x_key] > 1:\n            x_max = x_key\n        if x_key < x_min and point_x[x_key] > 1:\n            x_min = x_key\n    \n    \n    y_min = 51\n    y_max = -1\n    for y_key in point_y.keys():\n        if y_key > y_max and point_y[y_key] > 1:\n            y_max = y_key\n        if y_key < y_min and point_y[y_key] > 1:\n            y_min = y_key\n    \n    # print(x_max, y_max), (x_min, y_min)\n    found = False\n    for point in points:\n        if point[0] == x_max or point[0] == x_min:\n            if not (point[1] <= y_max and point[1] >= y_min):\n                found = True\n        elif point[1] == y_max or point[1] == y_min:\n            if not (point[0] <= x_max and point[0] >= x_min):\n                found = True\n        else:\n            found = True\n        if found:\n            break\n    if found:\n        print(\"{} {}\".format(point[0], point[1]))\n    else:\n        print(\"Error\")\n \nmain()", "n = int(input())\n\npoints = list(tuple(map(int, input().split())) for i in range(4*n + 1))\nxs = list(sorted(points))\nys = list(sorted(points, key = lambda x: (x[1], x[0])))\n\nxsize = xs[-1][0] - xs[0][0]\nysize = ys[-1][1] - ys[0][1]\n\ndef check(point):\n    p1 = xs[-1][0] if xs[-1] != point else xs[-2][0]\n    p2 = xs[0][0] if xs[0] != point else xs[1][0]\n    p3 = ys[-1][1] if ys[-1] != point else ys[-2][1]\n    p4 = ys[0][1] if ys[0] != point else ys[1][1]\n    return p1 - p2 == p3 - p4\n\nif xsize == ysize:\n    for p in points:\n        if p[0] != xs[0][0] and p[0] != xs[-1][0] and p[1] != ys[-1][1] and p[1] != ys[0][1]:\n            print(p[0], p[1])\nelse:\n    if check(xs[-1]):\n        print(xs[-1][0], xs[-1][1])\n    elif check(xs[0]):\n        print(xs[0][0], xs[0][1])\n    elif check(ys[-1]):\n        print(ys[-1][0], ys[-1][1])\n    elif check(ys[0]):\n        print(ys[0][0], ys[0][1])\n", "from collections import defaultdict\n\nn = int(input())\ndx = defaultdict(int)\ndy = defaultdict(int)\nmx = my = 0\nlx = ly = 100\ns = set()\nfor i in range(4 * n + 1):\n    x, y = list(map(int, input().split()))\n    s.add((x, y))\n    dx[x] += 1\n    dy[y] += 1\n    if dx[x] > 1:\n        if x > mx:\n            mx = x\n        if x < lx:\n            lx = x\n    if dy[y] > 1:\n        if y > my:\n            my = y\n        if y < ly:\n            ly = y\nfor el in s:\n    if ((lx < el[0] < mx) and (ly < el[1] < my)) or el[0] < lx or el[0] > mx or el[1] < ly or el[1] > my:\n        print(*el)\n", "def check(index):\n    point1 = points[index]\n    count = 0\n    for point in points:\n        if point[1] == point1[1]:\n            count += 1\n    if count == 1:\n        return False\n    count = 0\n    for point in points:\n        if point[0] == point1[0]:\n            count += 1\n    if count == 1:\n        return False\n\n\nn = int(input())\npoints = []\nfor i in range(4 * n + 1):\n    x, y = map(int, input().split())\n    points.append((x, y))\nindex = 0\nmax_x = count1 = max_y = count2 = count3 = count4 = 0\nmin_x = min_y = 51\nfor point in points:\n    if point[0] > max_x:\n        max_x = point[0]\n    if point[0] < min_x:\n        min_x = point[0]\n    if point[1] > max_y:\n        max_y = point[1]\n    if point[1] < min_y:\n        min_y = point[1]\nfor point in points:\n    if point[0] == max_x:\n        count1 += 1\n    if point[0] == min_x:\n        count2 += 1\n    if point[1] == max_y:\n        count3 += 1\n    if point[1] == min_y:\n        count4 += 1\nif count1 == 1:\n    for point in points:\n        if point[0] == max_x:\n            print(point[0], point[1])\n            return\nif count2 == 1:\n    for point in points:\n        if point[0] == min_x:\n            print(point[0], point[1])\n            return\nif count3 == 1:\n    for point in points:\n        if point[1] == max_y:\n            print(point[0], point[1])\n            return\nif count4 == 1:\n    for point in points:\n        if point[1] == min_y:\n            print(point[0], point[1])\n            return\nfor point in points:\n    if point[0] != max_x and point[0] != min_x and point[1] != max_y and point[1] != min_y:\n        print(point[0], point[1])\n        return", "n = int(input())\npoints = []\nfor i in range(4 * n + 1):\n    x, y = map(int, input().split())\n    points.append((x, y))\nmax_x = count1 = max_y = count2 = count3 = count4 = 0\nmin_x = min_y = 51\nfor point in points:\n    if point[0] > max_x:\n        max_x = point[0]\n    if point[0] < min_x:\n        min_x = point[0]\n    if point[1] > max_y:\n        max_y = point[1]\n    if point[1] < min_y:\n        min_y = point[1]\nfor point in points:\n    if point[0] == max_x:\n        count1 += 1\n    if point[0] == min_x:\n        count2 += 1\n    if point[1] == max_y:\n        count3 += 1\n    if point[1] == min_y:\n        count4 += 1\nif count1 == 1:\n    for point in points:\n        if point[0] == max_x:\n            print(point[0], point[1])\n            return\nif count2 == 1:\n    for point in points:\n        if point[0] == min_x:\n            print(point[0], point[1])\n            return\nif count3 == 1:\n    for point in points:\n        if point[1] == max_y:\n            print(point[0], point[1])\n            return\nif count4 == 1:\n    for point in points:\n        if point[1] == min_y:\n            print(point[0], point[1])\n            return\nfor point in points:\n    if point[0] != max_x and point[0] != min_x and point[1] != max_y and point[1] != min_y:\n        print(point[0], point[1])\n        return", "# cook your dish here\nn=int(input())\nminx=miny=maxx=maxy=0\nc=[]\ndx={}\ndy={}\nfor i in range(4*n+1):\n    x,y=list(map(int,input().split(' ')))\n    c.append([x,y])\n    if x not in dx:\n        dx[x]=1\n    else:\n        dx[x]+=1\n    if y not in dy:\n        dy[y]=1\n    else:\n        dy[y]+=1\n\nminx=miny=maxx=maxy=0\n\nfor i in sorted(dx.keys()):\n    if dx[i]>=2 and minx==0:\n        minx=i\n        break\n    \nfor i in sorted(dy.keys()):\n    if dy[i]>=2 and miny==0:\n        miny=i\n        break\n\nfor i in list(reversed(sorted(dx.keys()))):\n    if dx[i]>=2 and maxx==0:\n        maxx=i\n        break\n\nfor i in list(reversed(sorted(dy.keys()))):\n    if dy[i]>=2 and maxy==0:\n        maxy=i\n        break\n        \n\n\nfor i in c:\n    if minx<=i[0]<=maxx and miny<=i[1]<=maxy:\n        if (i[0]!=minx and i[0]!=maxx) and (i[1]!=miny and i[1]!=maxy):\n            print(i[0],i[1])\n            break\n    else:\n        print(i[0],i[1])\n        break\n        \n    \n", "# https://codeforces.com/contest/1184/problem/C1\nn = int(input())\np = []\ndx = {}\ndy = {}\nmin_x = None \nmax_x = None\nmin_y = None\nmax_y = None\n\nfor _ in range(4*n+1):\n    x, y = list(map(int, input().split()))\n    p.append([x, y])\n    \n    if x not in dx:\n        dx[x] = 0\n    dx[x] += 1\n        \n    if y not in dy:\n        dy[y] = 0\n    dy[y] += 1\n    \nfor x in sorted(dx.keys()):\n    if dx[x] >= n:\n        min_x = x\n        break\n        \nfor x in sorted(dx.keys())[::-1]:\n    if dx[x] >= n:\n        max_x = x\n        break\n        \nfor y in sorted(dy.keys()):\n    if dy[y] >= n:\n        min_y = y\n        break\n        \nfor y in sorted(dy.keys())[::-1]:\n    if dy[y] >= n:\n        max_y = y\n        break    \n\noutlier = None  \n#print(min_x, max_x), (min_y, max_y)   \n\nfor x, y in p: \n    if (x-min_x)*(x-max_x) <= 0 and (y-min_y)*(y-max_y) <= 0:\n        if (x-min_x)*(x-max_x) < 0 and (y-min_y)*(y-max_y) < 0:\n            outlier = x, y\n            break\n    else:\n        outlier = x, y\n        break\n        \nprint(' '.join([str(x) for x in outlier]))        \n#2\n#0 0\n#0 1\n#0 2\n#1 0\n#1 1\n#1 2\n#2 0\n#2 1\n#2 2\n", "def find_inside_point(points, maxx, minx, maxy, miny):\n    # print('inside point')\n    for x, y in points:\n        if minx < x < maxx and miny < y < maxy:\n            print(x, y)\n            return\n\n\ndef find_outside_point(points, maxx, minx, maxy, miny):\n    # print('outside point')\n    maxx_points = [ (x, y) for x, y in points if x == maxx ]\n    minx_points = [ (x, y) for x, y in points if x == minx ]\n    maxy_points = [ (x, y) for x, y in points if y == maxy ]\n    miny_points = [ (x, y) for x, y in points if y == miny ]\n\n    if len(maxx_points) == 1: print(*maxx_points[0])\n    elif len(minx_points) == 1: print(*minx_points[0])\n    elif len(maxy_points) == 1: print(*maxy_points[0])\n    else: print(*miny_points[0])\n\n\ndef process(n, points):\n    xs, ys = [ x for x, _ in points ], [ y for _, y in points ]\n    maxx, minx = max(xs), min(xs)\n    maxy, miny = max(ys), min(ys)\n\n    # count = sum([ 1 for x, y in points if minx < x < maxx and miny < y < maxy])\n    if maxx - minx == maxy - miny: find_inside_point(points, maxx, minx, maxy, miny)\n    else: find_outside_point(points, maxx, minx, maxy, miny)\n\n\ndef __starting_point():\n    n = int(input())\n    points = []\n\n    for _ in range(4*n+1):\n        x, y = [ int(z) for z in input().split() ]\n        # print(x, y)\n        points.append((x, y))\n\n    process(n, points)\n__starting_point()"]