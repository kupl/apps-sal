["import itertools\nimport math\n\ndef can_measure(a, d):\n\treturn any(i + d in a for i in a)\n\ndef main():\n\tn, l, x, y = list(map(int, input().split()))\n\ta = set(map(int, input().split()))\n\t\n\tcan_x = can_measure(a, x)\n\tcan_y = can_measure(a, y)\n\tif can_x and can_y:\n\t\tprint(0)\n\telif can_x:\n\t\tprint(1)\n\t\tprint(y)\n\telif can_y:\n\t\tprint(1)\n\t\tprint(x)\n\telse:\n\t\tfor i in a:\n\t\t\tif i + x + y in a:\n\t\t\t\tprint(1)\n\t\t\t\tprint(i + x)\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tt = i + x - y in a\n\t\t\t\tif 0 <= i + x <= l and t:\n\t\t\t\t\tprint(1)\n\t\t\t\t\tprint(i + x)\n\t\t\t\t\tbreak;\n\t\t\t\tif 0 <= i - y <= l and t:\n\t\t\t\t\tprint(1)\n\t\t\t\t\tprint(i - y)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\telse:\n\t\t\tprint(2)\n\t\t\tprint(x, y)\n\t\t\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "import sys\n\nfirst = sys.stdin.readline().split(\" \")\nn = int(first[0])\nl = int(first[1])\nx = int(first[2])\ny = int(first[3])\nsecond = sys.stdin.readline().split(\" \")\n\nhave_dict = {}\nneed_dict_x = {}\nneed_dict_y = {}\n\nfor val in second:\n\thave_dict[val] = 1\n\tval = int(val)\n\tneed_dict_x[str(val - x)] = 1\n\tneed_dict_x[str(val+x)] = 1\n\tneed_dict_y[str(val - y)] = 1\n\tneed_dict_y[str(val + y)] = 1\n\n\nneed_x = 1\nneed_y = 1\nsomething = 1\nfor val in have_dict.keys():\n\ttry:\n\t\tneed_dict_x[val]\n\t\tneed_x = 0\n\texcept:\n\t\tsomething += 1\n\ttry: \n\t\tneed_dict_y[val]\n\t\tneed_y = 0\n\texcept:\n\t\tsomething -= 1\nneed_vals = []\nif need_x == 1 and need_y == 1:\n\tto_return = 2\n\treturn_val = str(x) + \" \"+str(y)\n\tfor val in need_dict_x.keys():\n\t\tif int(val) < 0 or int(val) > l: \n\t\t\tcontinue\n\t\telse:\n\t\t\ttry: \n\t\t\t\tneed_dict_y[val]\n\t\t\t\tto_return = 1\n\t\t\t\treturn_val = val\n\t\t\texcept:\n\t\t\t\tcontinue\n\tprint(to_return)\n\tprint(return_val)\nelse:\t\n\tprint(need_x+need_y)\n\tif need_x == 1:\n\t\tprint(x)\n\telif need_y == 1:\n\t\tprint(y)", "n, l, x, y = list(map(int, input().split()))\na = set(map(int, input().split()))\nok1 = ok2 = ok3 = False\nfor c in a:\n    if c + x in a:\n        ok1 = True\n    if c + y in a:\n        ok2 = True\n    if c - x > 0 and c - x + y in a:\n        ok3 = True\n        mark = c - x\n    if c + x < l and c + x - y in a:\n        ok3 = True\n        mark = c + x\n    if c + x + y in a:\n        ok3 = True\n        mark = c + x    \n    if c - x - y in a:\n        ok3 = True\n        mark = c - x\nif ok1 and ok2:\n    print(0)\nelif (not ok1) and (not ok2):    \n    if ok3:\n        print(1)\n        print(mark)\n    else:\n        print(2)\n        print(x, y)\nelse:\n    print(1)\n    print(y if ok1 else x)\n\n\n", "#Adapted from code of hatsuyuki15 in this contest\nn, l, x, y = list(map(int, input().split()))\na = set(map(int, input().split()))\nboy = False\ngirl = False\none = False\nwhere = -1\nfor i in a:\n    if i + x in a:\n        boy = True\n    if i + y in a:\n        girl = True\n    if i - x > 0 and i - x + y in a:\n        one = True\n        where = i - x\n    if i + x < l and i + x - y in a:\n        one = True\n        where = i + x\n    if i + x + y in a:\n        one = True\n        where = i + x\n    if i - x - y in a:\n        one = True\n        where = i - x\n\n\nif boy and girl:\n    print(0)\nif boy and not girl:\n    print(1)\n    print(y)\nif girl and not boy:\n    print(1)\n    print(x)\nif not boy and not girl:\n    if one:\n        print(1)\n        print(where)\n    if not one:\n        print(2)\n        print(x, y)\n", "#Adapted from code of hatsuyuki15 in this contest\nn, l, x, y = map(int, input().split())\na = set(map(int, input().split()))\nboy = False\ngirl = False\none = False\nwhere = -1\nfor i in a:\n    if i + x in a:\n        boy = True\n    if i + y in a:\n        girl = True\n    if i - x > 0 and i - x + y in a:\n        one = True\n        where = i - x\n    if i + x < l and i + x - y in a:\n        one = True\n        where = i + x\n    if i + x + y in a:\n        one = True\n        where = i + x\n\n\nif boy and girl:\n    print(0)\nif boy and not girl:\n    print(1)\n    print(y)\nif girl and not boy:\n    print(1)\n    print(x)\nif not boy and not girl:\n    if one:\n        print(1)\n        print(where)\n    if not one:\n        print(2)\n        print(x, y)", "__author__ = \"zabidon\"\n\nn, l, x, y = map(int, input().split())\ndata = set(map(int, input().split()))\n\nold_x = any(i + x in data for i in data)\nold_y = any(i + y in data for i in data)\n\nif old_x and old_y:\n    #all\n    print(0)\nelif old_x:\n    #one\n    print(1)\n    print(y)\nelif old_y:\n    #one\n    print(1)\n    print(x)\nelse:\n    found = False\n    for i in data:\n        if i + x + y in data:\n            found = True\n            print(1)\n            print(i + x)\n\n        elif i + x - y in data:\n            # because x<y\n            # i + x - y mean exist one mark\n            if 0 <= i + x <= l:\n                found = True\n                print(1)\n                print(i + x)\n\n            if not found and 0 <= i - y <= l:\n                found = True\n                print(1)\n                print(i - y)\n        if found:\n            break\n     \n    if not found:\n        print(2)\n        print(x, y)", "a = input().split(' ')\nb = input().split(' ')\nn=int(a[1])\nx=int(a[2])\ny=int(a[3])\nxcan=False\nycan=False\nxycan=False\nxymoar=False\ncool=0\ncool2=0\ns=set()\nfor element in b:\n    s.add(int(element))\nfor c in s:\n    if c+x in s:\n        xcan=True\n    if c+y in s:\n        ycan=True\n    if c+x+y in s:\n        xycan = True\n        cool=c\n    if c+y-x in s:\n        if c+y>n:\n            if c-x<0:\n                pass\n            else:\n                cool2 = c-x\n                xymoar=True\n        else:\n            xymoar = True\n            cool2 = c+y\n    if xcan:\n        if ycan:\n            break\nif xcan==True:\n    if ycan==True:\n        result=0\n        marks=[]\n    else:\n        result = 1\n        marks=[y]\nelse:\n    if ycan == True:\n        result = 1\n        marks=[x]\n    else:\n        if xycan == True:\n            result=1\n            marks=[cool+x]\n        elif xymoar == True:\n            result=1\n            marks=[cool2]\n        else:\n            result=2\n            marks=[x,y]\nprint(result)\nfor i in range(len(marks)):\n    print(marks[i], end=' ')", "#!/usr/bin/env python3\n\ndef rl(T=str):\n    return list(map(T,input().split()))\n\ndef ok(a,d,x):\n    for v in a:\n        if v+x in d:\n            return True\n    return False\n\n\ndef try_one(a,d,x,y):\n    def can_place(v):\n        #print(v)\n        #print(v+x,v-x,v+y,v-y)\n        if a[0] <= v <= a[-1]:\n            if (v + x in d or v - x in d) and \\\n               (v + y in d or v - y in d):\n               return True\n\n        return False;\n    for v in a:\n        for _ in [-x,+x,-y,+y]:\n            if can_place(v+_):\n                return v+_;\n\n    return None\n\ndef main():\n    n, l, x, y = rl(int)\n    a = rl(int)\n    d = set(a)\n\n    if ok(a,d,x):\n        if ok(a,d,y):\n            print(0)\n        else:\n            print(1)\n            print(y)\n    else:\n        if ok(a,d,y):\n            print(1)\n            print(x)\n        else:\n            p = try_one(a,d,x,y)\n            if p is not None:\n                print(1)\n                print(p)\n            else:\n                print(2)\n                print(x,y)\n\nmain()\n", "n, l, x, y = map(int, input().split())\n\ndef f(t, q):\n    i = j = 0\n    while j < n:\n        d = t[j] - t[i]\n        if d < q: j += 1\n        elif d > q: i += 1\n        else: return 0\n    return q\n\ndef g(t):\n    q = x + y\n    i = j = 0\n    while j < n:\n        d = t[j] - t[i]\n        if d < q: j += 1\n        elif d > q: i += 1\n        else: return t[j]\n    return 0\n\ndef h(t):\n    q = y - x\n    i = j = 0\n    while j < n:\n        d = t[j] - t[i]\n        if d < q: j += 1\n        elif d > q: i += 1\n        else:\n            a, b = t[i] - x, t[j] + x\n            if a >= 0: return [a]\n            if b <= l:return [b]\n            j += 1\n    return [x, y]\n\ndef e(t):\n    print(len(t))\n    print(' '.join(map(str, t)))\n\nt = list(map(int, input().split()))\nt.sort()\nx = f(t, x)\ny = f(t, y)\nif x and y:\n    z = g(t)\n    if z: e([z - y])\n    else: e(h(t))\nelif x: e([x])\nelif y: e([y])\nelse: e([])", "n, l, x, y = map(int, input().split())\ns = set(map(int, input().split()))\n\ndef f(d): return any(i + d in s for i in s)\ndef g():\n    for i in s:\n        if i + x + y in s: return i + x\n    return 0\ndef h():\n    for i in s:\n        if i + y - x in s:\n            if i - x >= 0: return i - x\n            if i + y <= l: return i + y\n    return 0\n\ndef e(d):\n    print(1)\n    print(d)\n\nif f(x):\n    if f(y): print(0)\n    else: e(y)\nelif f(y): e(x)\nelse:\n    z = g()\n    if z: e(z)\n    else:\n        z = h()\n        if z: e(z)\n        else:\n            print(2)\n            print(x, y)", "def main():\n    import sys\n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n, l, x, y = [tokens.pop() for i in range(4)]\n    marks = set(tokens)\n    \n    x_index = y_index = sum_index = sub_index1 = sub_index2 = -1\n    for i in marks:\n        if i + x in marks:\n            x_index = y\n        if i + y in marks:\n            y_index = x\n        if i + x + y in marks:\n            sum_index = i + x\n        if i + y - x in marks and i - x >= 0:\n            sub_index1 = i - x\n        if i + y - x in marks and i + y <= l:\n            sub_index2 = i + y\n    \n    if x_index != -1 and y_index != -1:\n        print(0)\n    else:\n        for i in (x_index, y_index, sum_index, sub_index1, sub_index2):\n            if i != -1:\n                print(1)\n                print(i)\n                break\n        else:\n            print(2)\n            print(x, y)\n    \n    \nmain()\n", "def main():\n    import sys\n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n, l, x, y = [tokens.pop() for i in range(4)]\n    marks = set(tokens)\n    \n    flag_x = flag_y = False\n    index = -1\n    for i in marks:\n        if i + x in marks:\n            flag_x = True\n            index = y\n        if i + y in marks:\n            flag_y = True\n            index = x\n        if i + x + y in marks:\n            index = i + x\n        if i + y - x in marks and i - x >= 0:\n            index = i - x\n        if i + y - x in marks and i + y <= l:\n            index = i + y\n    \n    if flag_x and flag_y:\n        print(0)\n    elif index != -1:\n        print(1)\n        print(index)\n    else:\n        print(2)\n        print(x, y)\n    \n    \nmain()\n", "def main():\n    from bisect import bisect_left\n    n, l, x, y = list(map(int, input().split()))\n    aa, d = list(map(int, input().split())), {}\n    for z in (x, y, y + x):\n        for a in aa:\n            a += z\n            if a > l:\n                break\n            b = aa[bisect_left(aa, a)]\n            if b <= a:\n                if b == a:\n                    d[z] = a\n                break\n        if len(d) == 2:\n            break\n    if d:\n        if x in d and y in d:\n            res = []\n        elif x in d:\n            res = [y]\n        elif y in d:\n            res = [x]\n        elif y + x in d:\n            res = [d[y + x] - y]\n    else:\n        z, tmp = y - x, []\n        for a in aa:\n            a += z\n            if a > l:\n                break\n            b = aa[bisect_left(aa, a)]\n            if b == a:\n                tmp.append(a)\n        for a in tmp:\n            if a > y:\n                res = [a - y]\n                break\n            elif a + x < l:\n                res = [a + x]\n                break\n        else:\n            res = [x, y]\n    print(len(res))\n    if res:\n        print(*res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "R = lambda: map(int, input().split())\nn, l, x, y = R()\narr = set(R())\nx_good, y_good = False, False\nfor m in arr:\n    if m + x in arr or m - x in arr:\n        x_good = True\n        break\nfor m in arr:\n    if m + y in arr or m - y in arr:\n        y_good = True\n        break\nif x_good and y_good:\n    print(0)\n    return\nelif x_good:\n    print(1)\n    print(y)\n    return\nelif y_good:\n    print(1)\n    print(x)\n    return\nelse:\n    for m in arr:\n        if m + x <= l and (m + x + y in arr or m + x - y in arr):\n            print(1)\n            print(m + x)\n            return\n        if m - x >= 0 and (m - x + y in arr or m - x - y in arr):\n            print(1)\n            print(m - x)\n            return\n        if m + y <= l and (m + y + x in arr or m + y - x in arr):\n            print(1)\n            print(m + y)\n            return\n        if m - y >= 0 and (m - y + x in arr or m - y - x in arr):\n            print(1)\n            print(m - y)\n            return\nprint(2)\nprint(x, y)", "from collections import defaultdict as dc\ndef serch(a,b,x,y):\n        for i in range(1,n):\n                if (b[a[i]-x-y]):\n                        return a[i]-y\n                if b[a[i]-(y-x)] and a[i]+x<=l:\n                        return a[i]+x\n                if b[a[i]+(y-x)] and a[i]-x>=0:\n                        return a[i]-x\n        return 0\n                \nn,l,x,y=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\nb=dc(int)\nb=dc(lambda :0,b)\nk1=0\nk2=0\nfor i in range(n):\n        b[a[i]]=1\n        if b[a[i]-x]==1:\n                k1=1\n        if b[a[i]-y]==1:\n                k2=1\nif k1==1 and k2==1:\n        print(0)\nelif k1==0 and k2==0:\n        z=serch(a,b,x,y)\n        if z!=0:\n                print(1)\n                print(z)\n        else:\n                print(2)\n                print(x,y)\nelif k1==0:\n        print(1)\n        print(x)\nelse:\n        print(1)\n        print(y)\n\n\n\n                \n", "\nimport itertools\nimport math\n\ndef can_measure(a, d):\n\treturn any(i + d in a for i in a)\n\ndef main():\n\tn, l, x, y = list(map(int, input().split()))\n\ta = set(map(int, input().split()))\n\t\n\tcan_x = can_measure(a, x)\n\tcan_y = can_measure(a, y)\n\tif can_x and can_y:\n\t\tprint(0)\n\telif can_x:\n\t\tprint(1)\n\t\tprint(y)\n\telif can_y:\n\t\tprint(1)\n\t\tprint(x)\n\telse:\n\t\tfor i in a:\n\t\t\tif i + x + y in a:\n\t\t\t\tprint(1)\n\t\t\t\tprint(i + x)\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tt = i + x - y in a\n\t\t\t\tif 0 <= i + x <= l and t:\n\t\t\t\t\tprint(1)\n\t\t\t\t\tprint(i + x)\n\t\t\t\t\tbreak;\n\t\t\t\tif 0 <= i - y <= l and t:\n\t\t\t\t\tprint(1)\n\t\t\t\t\tprint(i - y)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\telse:\n\t\t\tprint(2)\n\t\t\tprint(x, y)\n\t\t\n\ndef __starting_point():\n\tmain()\n        \n        \n            \n\n\n        \n\n        \n        \n            \n\n\n\n\n__starting_point()", "from collections import defaultdict\n\nclass LongJumps():\n    def __init__(self, n, l, x, y, a):\n        self.n, self.l, self.x, self.y, self.a = n,l,x,y,a\n\n    def get_markers(self):\n        st = defaultdict(set)\n        req_pts = [self.x,self.y]\n        exist_check = defaultdict(bool)\n        value_check = defaultdict(bool)\n        for v in self.a:\n            exist_check[v] = True\n\n        for v in self.a:\n            for i in range(len(req_pts)):\n                if v - req_pts[i] >= 0:\n                    st[v - req_pts[i]].add(i)\n                    if exist_check[v - req_pts[i]]:\n                        value_check[i] = True\n                if v + req_pts[i] <= l:\n                    st[v+req_pts[i]].add(i)\n                    if exist_check[v + req_pts[i]]:\n                        value_check[i] = True\n\n        if value_check[0] and value_check[1]:\n            print(0)\n            return\n\n        sol_status = 2\n        status1_marker = None\n        for v in st:\n            if len(st[v]) == 2:\n                sol_status = 1\n                status1_marker = v\n            elif len(st[v]) == 1:\n                if exist_check[v]:\n                    sol_status = 1\n                    status1_marker = req_pts[1-st[v].pop()]\n        \n        if sol_status == 1:\n            print(1)\n            print(status1_marker)\n            return\n        else:\n            print(2)\n            print(x, y)\n\nn, l, x, y = list(map(int,input().strip(' ').split(' ')))\na = list(map(int,input().strip(' ').split(' ')))\nlj = LongJumps(n,l,x,y,a)\nlj.get_markers()", "def main():\n    n,l,x,y = list(map(int,input().split()))\n    arr = set(map(int,input().split()))\n    first = False\n    second = False\n    for i in arr:\n        if i+x in arr:\n            first = True\n        if i+y in arr:\n            second = True\n\n    if first and not second:\n        print(1)\n        print(y)\n        return\n    if second and not first:\n        print(1)\n        print(x)\n        return\n    if first and second:\n        print(0)\n        return\n\n    found = False\n    for i in arr:\n        if i+x-y in arr and i+x <= l:\n            found = True\n            coord = i+x\n            break\n\n        if i+y-x in arr and i+y <= l:\n            found = True\n            coord = i+y\n            break\n\n        if i+x+y in arr and i+min(x,y) <= l:\n            found = True\n            coord = i+min(x,y)\n\n        if i-x-y in arr and i-max(x,y) >= 0:\n            found = True\n            coord = i-max(x,y)\n\n        if i-x+y in arr and i-x >= 0:\n            found = True\n            coord = i-x\n            break\n\n        if i-y+x in arr and i-y >= 0:\n            found = True\n            coord = i-y\n            break\n\n        if found:\n            break\n\n    if found:\n        print(1)\n        print(coord)\n        return\n\n    print(2)\n    print(x,y)\n\n\nmain()\n", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\nfrom typing import List\n\n\"\"\"\ncreated by shhuan at 2020/1/13 20:48\n\n\"\"\"\n\n\ndef solve(N, L, X, Y, A):\n    vs = set(A)\n    mx = any([a+X in vs for a in A])\n    my = any([a+Y in vs for a in A])\n    if mx and my:\n        print(0)\n    elif mx:\n        print(1)\n        print(Y)\n    elif my:\n        print(1)\n        print(X)\n    else:\n        # try to add 1 mark\n        for a in vs:\n            for b, c in [(a + X, Y), (a + Y, X), (a - X, Y), (a - Y, X)]:\n                if 0 <= b <= L:\n                    if (b + c <= L and b + c in vs) or (b - c >= 0 and b - c in vs):\n                        print(1)\n                        print(b)\n                        return\n\n        # add 2 marks\n        print(2)\n        print('{} {}'.format(X, Y))\n\n\nN, L, X, Y = map(int, input().split())\nA = [int(x) for x in input().split()]\nsolve(N, L, X, Y, A)", "import itertools\nimport math\n \ndef can_measure(a, d):\n\treturn any(i + d in a for i in a)\n \ndef main():\n\tn, l, x, y = map(int, input().split())\n\ta = set(map(int, input().split()))\n\t\n\tcan_x = can_measure(a, x)\n\tcan_y = can_measure(a, y)\n\tif can_x and can_y:\n\t\tprint(0)\n\telif can_x:\n\t\tprint(1)\n\t\tprint(y)\n\telif can_y:\n\t\tprint(1)\n\t\tprint(x)\n\telse:\n\t\tfor i in a:\n\t\t\tif i + x + y in a:\n\t\t\t\tprint(1)\n\t\t\t\tprint(i + x)\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tt = i + x - y in a\n\t\t\t\tif 0 <= i + x <= l and t:\n\t\t\t\t\tprint(1)\n\t\t\t\t\tprint(i + x)\n\t\t\t\t\tbreak;\n\t\t\t\tif 0 <= i - y <= l and t:\n\t\t\t\t\tprint(1)\n\t\t\t\t\tprint(i - y)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\telse:\n\t\t\tprint(2)\n\t\t\tprint(x, y)\n\t\t\n \ndef __starting_point():\n\tmain()\n__starting_point()", "def __starting_point():\t\n\tn, l, x, y = list(map(int, input().split()))\n\tv = list(map(int, input().split()))\n\ts = set(v)\n\n\tcx = 0\n\tfor i in range(n):\n\t\tif v[i]+x in s:\n\t\t\tcx = 1\n\t\t\tbreak\n\t\n\tcy = 0\n\tfor i in range(n):\n\t\tif v[i]+y in s:\n\t\t\tcy = 1\n\t\t\tbreak\n\t\n\tcount = 0\n\tans = []\n\n\tif cx==0:\n\t\tcount += 1\n\t\tans.append(x)\n\tif cy==0:\n\t\tcount += 1\n\t\tans.append(y)\n\n\tif count==2:\n\t\tfor i in range(n):\n\t\t\tif (v[i]+x+y in s):\n\t\t\t\tcount = 1\n\t\t\t\tans = [v[i]+x]\n\t\t\t\tbreak\n\n\tif count==2:\n\t\tfor i in range(n):\n\t\t\tif (v[i]+x-y in s):\n\t\t\t\tif v[i]+x<=l:\n\t\t\t\t\tcount = 1\n\t\t\t\t\tans = [v[i]+x]\n\t\t\t\t\tbreak\n\t\t\t\telif v[i]-y>=0:\n\t\t\t\t\tcount = 1\n\t\t\t\t\tans = [v[i]-y]\n\t\t\t\t\tbreak\n\n\tprint(count)\n\tif count!=0:\n\t\tprint(*ans)\n\n__starting_point()", "n,l,x,y=list(map(int,input().split(\" \")))\nli=list(map(int,input().split(\" \",n)[:n]))\nli.sort()\ndic={}\na1,a2=0,0\nans=2\nx1=x\ny1=y\nxi=-1\nyi=-1\nfor i in li:\n    dic[i]=1\nfor i in range(n):\n    if li[i]-x>=0:\n        if li[i]-x in dic:\n            a1=1\n            xi=i\n    if li[i]+x<=l:\n        if li[i]+x in dic:\n            a1=1\n            xi=i\n    if li[i]-y>=0:\n        if li[i]-y in dic:\n            a2=1\n            yi=i\n    if li[i]+y<=l:\n        if li[i]+y in dic:\n            a2=1\n            yi=i\nif a1==1 and a2==1:\n    print(0)\nelif a1==1:\n    if li[xi]-x>=0:\n        if li[xi]-x in dic:\n            if li[xi]-x+y<=l and li[xi]-x+y in dic:\n                a2=1\n            if li[xi]-x-y>=0 and li[xi]-x-y in dic:\n                a2=1\n    if li[xi]+x<=l:\n        if li[xi]+x in dic:\n            if li[xi]+x+y<=l and li[xi]+x+y in dic:\n                a2=1\n            if li[xi]+x-y>=0 and li[xi]+x-y in dic:\n                a2=1\n    if a2==1:\n        print(0)\n    else:\n        print(1)\n        print(y)\nelif a2==1:\n    if li[yi]-y>=0:\n        if li[yi]-y in dic:\n            if li[yi]-y+x<=l and li[yi]-y+x in dic:\n                a1=1\n            if li[yi]-y-x>=0 and li[yi]-y-x in dic:\n                a1=1\n    if li[yi]+y<=l:\n        if li[yi]+x in dic:\n            if li[yi]+y+x<=l and li[yi]+y+x in dic:\n                a1=1\n            if li[yi]+y-x>=0 and li[yi]+y-x in dic:\n                a1=1\n    if a1==1:\n        print(0)\n    else:\n        print(1)\n        print(x)\nelse:\n    for i in range(n):\n        if li[i]-x>=0:\n            a1=1\n            xi=i\n            if li[xi]-x+y<=l and li[xi]-x+y in dic:\n                a2=1\n            if li[xi]-x-y>=0 and li[xi]-x-y in dic:\n                a2=1\n            if a2==1:\n                print(1)\n                print(li[i]-x)\n                break\n            else:\n                a1=0\n        if li[i]+x<=l:\n            a1=1\n            xi=i\n            if li[xi]+x+y<=l and li[xi]+x+y in dic:\n                a2=1\n            if li[xi]+x-y>=0 and li[xi]+x-y in dic:\n                a2=1\n            if a2==1:\n                print(1)\n                print(li[i]+x)\n                break\n            else:\n                a1=0\n        if li[i]-y>=0:\n            a2=1\n            yi=i\n            if li[yi]-y+x<=l and li[yi]-y+x in dic:\n                a1=1\n            if li[yi]-y-x>=0 and li[yi]-y-x in dic:\n                a1=1\n            if a1==1:\n                print(1)\n                print(li[i]-y)\n                break\n            else:\n                a2=0\n        if li[i]+y<=l:\n            a2=1\n            yi=i\n            if li[yi]+y+x<=l and li[yi]+y+x in dic:\n                a1=1\n            if li[yi]+y-x>=0 and li[yi]+y-x in dic:\n                a1=1\n            if a1==1:\n                print(1)\n                print(li[i]+y)\n                break\n            else:\n                a2=0\nif a1==0 and a2==0:\n    print(2)\n    print(x,y)\n", "n, l, x, y = map(int, input().split())\ns = set(map(int, input().split()))\n\n\ndef f(d): return any(i + d in s for i in s)\n\n\ndef g():\n    for i in s:\n        if i + x + y in s: return i + x\n    return 0\n\n\ndef h():\n    for i in s:\n        if i + y - x in s:\n            if i - x >= 0: return i - x\n            if i + y <= l: return i + y\n    return 0\n\n\ndef e(d):\n    print(1)\n    print(d)\n\n\nif f(x):\n    if f(y):\n        print(0)\n    else:\n        e(y)\nelif f(y):\n    e(x)\nelse:\n    z = g()\n    if z:\n        e(z)\n    else:\n        z = h()\n        if z:\n            e(z)\n        else:\n            print(2)\n            print(x, y)"]