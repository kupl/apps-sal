["n = int(input())\nd = []\nfor i in range(n):\n    d.append(input())\n\nfor i in range(n):\n    if d[i].count('E') == n:\n        break\nelse:\n    for i in range(n):\n        print(i+1, d[i].index('.')+1)\n    return\n\nfor i in range(n):\n    res = 0\n    for j in range(n):\n        if d[j][i] == 'E':\n            res += 1\n    if res == n:\n        break\nelse:\n    for i in range(n):\n        for j in range(n):\n            if d[j][i] == '.':\n                print(j+1, i+1)\n                break\n    return\nprint(-1)", "n = int(input())\n\nvr = [set() for x in range(0, n)]\nvc = [set() for x in range(0, n)]\nr = set(range(0, n))\nc = set(range(0, n))\n\nfor i in range(0, n):\n    s = input()\n    for j in range(0, n):\n        if s[j] == '.':\n            vr[i].add(j)\n            vc[j].add(i)\n            r.discard(i)\n            c.discard(j)\n\nif len(r) == 0:\n    for i in range(0, n):\n        print(i+1, vr[i].pop()+1)\nelif len(c) == 0:\n    for j in range(0, n):\n        print(vc[j].pop()+1, j+1)\nelse:\n    print(-1)\n", "n=int(input())\n\nrows=[]\nevils=0\nfor i in range(n):\n    rows.append(input())\n##    evils+=rows[-1].count('E')\n\ncolumns=[]\nfor i in range(n):\n    L=[]\n    for j in range(n):\n        L.append(rows[j][i])\n    columns.append(L)\ncan=True\nfor i in range(n):\n    if(not can):\n        break\n    for j in range(n):\n        if(rows[i][j]=='.'):\n            continue\n        r='.' not in rows[i]\n        c='.' not in columns[j]\n        if(r and c):\n            can=False\n            break\n\nif(not can):\n    print(-1)\nelse:\n    used='rows'\n    for i in range(n):\n        if(rows[i].count('E')==n):\n            used='columns'\n            break\n        elif(columns[i].count('E')==n):\n            used='rows'\n            break\n    if(used=='rows'):\n        for i in range(n):\n            x=rows[i].index('.')\n            print(i+1,end=\" \"+str(x+1)+'\\n')\n    else:\n        for i in range(n):\n            x=columns[i].index('.')\n            print(x+1,end=\" \"+str(i+1)+'\\n')\n            \n", "a = []\nn = int(input())\nfor i in range(0, n):\n    a.append(input())\n\n\nl = [0 for i in range(0, n)]\nc = [0 for i in range(0, n)]\n    \n\nfor i in range(0, n):\n    for j in range(0, n):\n        if a[i][j] == 'E':\n            l[i] += 1\n            c[j] += 1\n\nif n in l and n in c:\n    print('-1')\n    return\n\nif n in l:              #am o linie plina de E-uri\n    for j in range(0, n):\n        i = 0\n        while a[i][j] != '.': i += 1\n        print(\"%i %i\" % (i+1, j+1))\n\nelse:\n    for i in range(0, n):\n        j = 0\n        while a[i][j] != '.': j += 1\n        print(\"%i %i\" % (i+1, j+1))\n            \n", "n = int(input())\nt = [input() for i in range(n)]\ne = 'E' * n\nif e in t:\n    t = list(''.join(i) for i in zip(*t))\n    if e in t: print('-1')\n    else:\n        p = [str(c.find('.') + 1) + ' ' + str(i) for i, c in enumerate(t, 1)]\n        print('\\n'.join(p))\nelse:\n    p = [str(i) + ' ' + str(c.find('.') + 1) for i, c in enumerate(t, 1)]\n    print('\\n'.join(p))", "from sys import stdin\n\n__author__ = 'artyom'\n\n\ndef solve(x):\n  a = []\n  for s in x:\n    dot_pos = s.find('.')\n    if dot_pos < 0:\n      return None\n    a.append(dot_pos + 1)\n  return a\n\n\ndef rotate(x, n):\n  y = []\n  for i in range(n):\n    y.append([])\n    for j in range(n):\n      y[i].append(x[j][i])\n  return map(lambda b: ''.join(b), y)\n\n\nn = int(stdin.readline().strip())\nx = []\nfor _ in range(n):\n  x.append(stdin.readline().strip())\n\na = solve(x)\nif a:\n  for i in range(n):\n    print(i + 1, a[i])\nelse:\n  a = solve(rotate(x, n))\n  if a:\n    for i in range(n):\n      print(a[i], i + 1)\n  else:\n    print(-1)", "def main():\n    n = int(input())\n    l = [input() for _ in range(n)]\n    res = []\n    for y, s in enumerate(l):\n        for x, c in enumerate(s):\n            if c == '.':\n                res.append((x, y))\n                break\n    if len(res) < n:\n        res = []\n        for x in range(n):\n            for y in range(n):\n                if l[y][x] == '.':\n                    res.append((x, y))\n                    break\n        if len(res) < n:\n            print(-1)\n            return\n    for x, y in res:\n        print(y + 1, x + 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\n\nclass Solver(object):\n    def read_input(self):\n        n = int(input())\n        grid = []\n        for i in range(n):\n            l = list(input())\n            grid.append(l)\n\n        self.n = n\n        self.grid = grid\n\n    def solve_line(self):\n        pos = []\n        for i in range(self.n):\n            res = False\n            for j in range(self.n):\n                if self.grid[i][j]==\".\":\n                    res = True\n                    pos.append((i,j))\n\n                if res==True:\n                    break\n            if res==True:\n                continue\n            else:\n                pos = -1\n                break\n        self.pos = pos\n        return pos\n\n    def solve_column(self):\n        pos = []\n        for j in range(self.n):\n            res = False\n            for i in range(self.n):\n                if self.grid[i][j]==\".\":\n                    res = True\n                    pos.append((i,j))\n\n                if res==True:\n                    break\n            if res==True:\n                continue\n            else:\n                pos = -1\n                break\n        self.pos = pos\n        return pos\n\n    def print_solution(self):\n        for i, j in self.pos:\n            print(i+1, j+1)\n    def solve(self):\n        lines = self.solve_line()\n        if lines != -1:\n            self.print_solution()\n\n        else:\n            cols = self.solve_column()\n            if cols == -1:\n                print(-1)\n            else:\n                self.print_solution()\n\n\nS = Solver()\nS.read_input()\nS.solve()", "\n\nn = int( input() )\n\npl = [0] * 100\np = [ [] for i in range(100) ]\n\ns = [ str() for i in range(100) ]\n\ncp = [0] * 100\nrp = [0] * 100\n\nX = 0\nY = 0\n\nfor i in range(n):\n    s[i] = str( input() )\n    f = 0\n    for j in range(len(s[i])):\n          if s[i][j]=='.':\n            f = 1\n            break\n    if f == 0:\n      X = 1\n\n\nfor i in range(n):\n    f = 0\n    for j in range(n):\n        if s[j][i]=='.':\n            f = 1\n            break\n    if f == 0:\n      Y = 1\n\n#print(X,Y)\n\nif X==1 and Y==1:\n    print(\"-1\")\nelse:\n    if X == 0:\n        for i in range(n):\n            for j in range(n):\n                if s[i][j]=='.':\n                    print(i+1,j+1)\n                    break\n    else:\n        for i in range(n):\n            for j in range(n):\n                if s[j][i]=='.':\n                    print(j+1,i+1)\n                    break\n", "n = int(input())\ng = []\nr = [0]*n\nc = [0]*n\nfor i in range(n):\n    g.append(list(input()))\n    x = [a for a in range(n) if g[i][a] == '.']\n    if len(x) > 0: r[i] = 1\n    for j in x: c[j] = 1\nif sum(r) == n:\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] == '.':\n                print('%i %i' % (i+1,j+1))\n                break\nelif sum(c) == n:\n    for i in range(n):\n        for j in range(n):\n            if g[j][i] == '.':\n                print('%i %i' % (j+1,i+1))\n                break\nelse:\n    print(-1)", "n = int(input())\n\na = []\n\nfor i in range(n):\n\n    a.append(input())\n\nif 'E' * n in a and ('E',) * n in list(zip(*a)):\n\n    print(-1)\n\nelif 'E' * n in a:\n\n    for j, s in enumerate([''.join(x) for x in zip(*a)]):\n\n        for i, c in enumerate(s):\n\n            if c == '.':\n\n                print(i + 1, j + 1)\n\n                break\n\nelse:\n\n    for i, s in enumerate(a):\n\n        for j, c in enumerate(s):\n\n            if c == '.':\n\n                print(i + 1, j + 1)\n\n                break\n\n", "n = int(input())\ns = [''] * n\nfor i in range(n):\n    s[i] = input()\nrow, col = 0, 0\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] == '.':\n            break\n    else:\n        row = 1\n        break\nfor i in range(n):\n    for j in range(n):\n        if s[j][i] == '.':\n            break\n    else:\n        col = 1\n        break\nif row == col == 1:\n    print(-1)\n    return\nif row == 0:\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == '.':\n                print(i+1, j+1)\n                break\nelse:\n    for i in range(n):\n        for j in range(n):\n            if s[j][i] == '.':\n                print(j+1, i+1)\n                break\n", "n=int(input())\nit=[input() for i in range(n)]\nres,k=[],0\nfor i,x in enumerate(it):\n    k=0\n    for j,y in enumerate(x):\n        if y=='.':\n            res.append([i+1,j+1])\n            k=1;break\n    if k==0:break\nif k==1:\n    for i,x in enumerate(res):print(*x)\nelse:\n    res,k=[],0\n    for i,x in enumerate(it):\n        k=0\n        for j,y in enumerate(x):\n            y=it[j][i]\n            if y=='.':\n                res.append([j+1,i+1])\n                k=1;break\n        if k==0:break\n    if k==1:\n        for i,x in enumerate(res):print(*x)\n    else:print(-1)", "n = int(input())\nl = []\nfor _ in range(n):\n    l.append([x for x in input()])\n\nresults = []\nthing = True\nfor i in range(n):\n    hit = False\n    for j in range(n):\n        if l[i][j] != \"E\":\n            results.append(f\"{i + 1} {j + 1}\")\n            hit = True\n            break\n    if not hit:\n        thing = False\n        break\nif not thing:\n    results = []\n    thing = True\n    for j in range(n):\n        hit = False\n        for i in range(n):\n            if l[i][j] != \"E\":\n                results.append(f\"{i + 1} {j + 1}\")\n                hit = True\n                break\n        if not hit:\n            thing = False\n            break\n\nif thing:\n    for r in results:\n        print(r)\nelse:\n    print(-1)\n", "def transpose(x):\n    return [list(row) for row in zip(*x)]\n\ndef canpurify(x):\n    for i in x:\n        founddot = False\n        for j in i:\n            if j == '.':\n                founddot = True\n                break\n        if not founddot:\n            return False\n    return True\n\nfield = []\nn = int(input())\n\ndef purify(x, transposed):\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if x[i][j] == '.':\n                if not transposed:\n                    print(i+1, j+1)\n                else:\n                    print(j+1, i+1)\n                break\n\nfor _ in range(n):\n    field.append(input())\nt = False\nif not canpurify(field):\n    field = transpose(field)\n    t = True\n\nif canpurify(field):\n    purify(field, t)\nelse:\n    print(-1)\n\n", "a = []\nn = int(input())\nfor i in range(0, n):\n    a.append(input())\n\nl = [0 for i in range(0, n)]\nc = [0 for i in range(0, n)]\n\nfor i in range(0, n):\n    for j in range(0, n):\n        if a[i][j] == 'E':\n            l[i] += 1\n            c[j] += 1\n\nif n in l and n in c:\n    print('-1')\n    return\n\nif n in l:  \n    for j in range(0, n):\n        i = 0\n        while a[i][j] != '.': i += 1\n        print(\"%i %i\" % (i + 1, j + 1))\n\nelse:\n    for i in range(0, n):\n        j = 0\n        while a[i][j] != '.': j += 1\n        print(\"%i %i\" % (i + 1, j + 1))\n", "n=int(input())\nit=[input() for i in range(n)]\nres,k=[],0\nfor i,x in enumerate(it):\n    k=0\n    for j,y in enumerate(x):\n        if y=='.':\n            res.append([i+1,j+1])\n            k=1;break\n    if k==0:break\nif k==1:\n    for i,x in enumerate(res):print(*x)\nelse:\n    res,k=[],0\n    for i,x in enumerate(it):\n        k=0\n        for j,y in enumerate(x):\n            y=it[j][i]\n            if y=='.':\n                res.append([j+1,i+1])\n                k=1;break\n        if k==0:break\n    if k==1:\n        for i,x in enumerate(res):print(*x)\n    else:print(-1)", "n = int(input())\n \nvr = [set() for x in range(0, n)]\nvc = [set() for x in range(0, n)]\nr = set(range(0, n))\nc = set(range(0, n))\n \nfor i in range(0, n):\n    s = input()\n    for j in range(0, n):\n        if s[j] == '.':\n            vr[i].add(j)\n            vc[j].add(i)\n            r.discard(i)\n            c.discard(j)\n \nif len(r) == 0:\n    for i in range(0, n):\n        print(i+1, vr[i].pop()+1)\nelif len(c) == 0:\n    for j in range(0, n):\n        print(vc[j].pop()+1, j+1)\nelse:\n    print(-1)", "n = int(input())\n \nvr = [set() for x in range(0, n)]\nvc = [set() for x in range(0, n)]\nr = set(range(0, n))\nc = set(range(0, n))\n \nfor i in range(0, n):\n    s = input()\n    for j in range(0, n):\n        if s[j] == '.':\n            vr[i].add(j)\n            vc[j].add(i)\n            r.discard(i)\n            c.discard(j)\n \nif len(r) == 0:\n    for i in range(0, n):\n        print(i+1, vr[i].pop()+1)\nelif len(c) == 0:\n    for j in range(0, n):\n        print(vc[j].pop()+1, j+1)\nelse:\n    print(-1)\n\n", "n=int(input())\ns=[]\nfor i in range(n):\n    s.append(input())\nr,cl=0,0\nfor i in range(n):\n    c=0\n    for j in range(n):\n        if s[i][j]=='E':\n            c=c+1\n    r=max(r,c)\nfor i in range(n):\n    c=0\n    for j in range(n):\n        if s[j][i]=='E':\n            c=c+1\n    cl=max(cl,c)\nif r==n and cl==n:\n    print(-1)\nelse:\n    ans=[]\n    if r!=n:\n        for i in range(n):\n            for j in range(n):\n                if s[i][j]=='.':\n                    ans.append([i+1,j+1])\n                    break\n    else:\n        for i in range(n):\n            for j in range(n):\n                if s[j][i]=='.':\n                    ans.append([j+1,i+1])\n                    break\n    for i in range(n):\n        print(ans[i][0],ans[i][1])"]