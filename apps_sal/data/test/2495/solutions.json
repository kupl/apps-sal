["N = int(input())\nA = [int(_) for _ in input().split()]\n\ndef calc(A, y):\n    result = abs(A[0] - y)\n    t = y\n    if t == 0:\n        return 10**30\n    for a in A[1:N]:\n        tt = t + a\n        if t * tt >= 0:\n            m =  -t // abs(t)\n            result += abs(m - tt)\n            tt = m\n        t = tt\n    return result\n\nresult = min(calc(A, A[0]), calc(A, -1),  calc(A, +1))\n\nprint(result)\n", "n = int(input())\na = list(map(int, input().split()))\nans1 = 0\ns = 0\nfor i, v in enumerate(a):\n    if i % 2 and s + v >= 0:\n        ans1 += abs(-1 - s - v)\n        s = -1\n    elif i % 2 == 0 and s + v <= 0:\n        ans1 += abs(1 - s - v)\n        s = 1\n    else:\n        s += v\n\ns = 0\nans2 = 0\nfor i, v in enumerate(a):\n    if i % 2 and s + v <= 0:\n        ans2 += abs(1 - s - v)\n        s = 1\n    elif i % 2 == 0 and s + v >= 0:\n        ans2 += abs(-1 - s - v)\n        s = -1\n    else:\n        s += v\n\nprint(min(ans1, ans2))", "n = int(input())\na = list(map(int, input().split()))\n\ndef cost(a, neg=False):\n    sign = -1 if neg else 1\n    if sign * a[0] > 0:\n        ret = 0\n        cum = a[0]\n    else:\n        ret = abs(a[0] - sign)\n        cum = sign\n    for i in range(1, n):\n        sign *= -1\n        cum += a[i]\n        if cum * sign > 0:\n            continue\n        else:\n            ret += abs(cum - sign)\n            cum = sign\n    return ret\n\nprint((min(cost(a, False), cost(a, True))))\n", "# ARC072C - Sequence (ABC059C)\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    lst = tuple(map(int, input().split()))\n    \n    # start with positive number\n    cur, cnt_1 = 0, 0\n    for i, j in enumerate(lst):\n        new = cur + j\n        if i % 2 == 0 and new <= 0:\n            cnt_1 += abs(new) + 1\n            cur = 1\n        elif i % 2 == 1 and new >= 0:\n            cnt_1 += abs(new) + 1\n            cur = -1\n        else:\n            cur += j\n\n    # start with negative number\n    cur, cnt_2 = 0, 0\n    for i, j in enumerate(lst):\n        new = cur + j\n        if i % 2 == 0 and new >= 0:\n            cnt_2 += abs(new) + 1\n            cur = -1\n        elif i % 2 == 1 and new <= 0:\n            cnt_2 += abs(new) + 1\n            cur = 1\n        else:\n            cur += j\n    \n    print(min(cnt_1, cnt_2))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\n\npos = 0\nnow = 0\nfor i, a in enumerate(A):\n    now += a\n    if i % 2 == 0:  # poisive\n        if now <= 0:\n            pos += -now + 1\n            now = 1\n    else:\n        if now >= 0:\n            pos += now + 1\n            now = -1\n\nneg = 0\nnow = 0\nfor i, a in enumerate(A):\n    now += a\n    if i % 2 == 0:\n        if now >= 0:\n            neg += now + 1\n            now = -1\n    else:\n        if now <= 0:\n            neg += -now + 1\n            now = 1\n\nprint(min(pos, neg))", "N = int(input())\nA = list(map(int,input().split()))\n\ndef calc(a, t):\n    ans = 0\n    p_flag = t < 0\n    t += a\n    if p_flag:\n        if t < 0:\n            ans = 1 - t\n            t = 1\n    else:\n        if t >= 0:\n            ans = 1 + t\n            t = -1\n    if t == 0:\n        ans += 1\n        if p_flag:\n            t = 1\n        else:\n            t = -1\n\n    return ans, t\n\nans_p = 0\nt_p = 0\nans_m = 0\nt_m = 0\nif A[0] > 0:\n    ans_p = 0\n    t_p = A[0]\n    ans_m = A[0]+1\n    t_m = -1\nelif A[0] < 0:\n    ans_p = -A[0]+1\n    t_p = 1\n    ans_m = 0\n    t_m = A[0]\nelse:\n    ans_p = 1\n    t_p = 1\n    ans_m = 1\n    t_m = -1\n\nfor i in range(1, N):\n    a, t_p = calc(A[i], t_p)\n    ans_p += a\n    a, t_m = calc(A[i], t_m)\n    ans_m += a\n\nprint((min(ans_p, ans_m)))\n", "from itertools import accumulate\n\nn = int(input())\na = list(map(int,input().split()))\n\na = list(accumulate(a))\n\nans1 = 0\ntmp1 = 0\nfor i in range(n):\n    b = a[i] + tmp1\n    if i % 2 == 0 and b <= 0:\n        tmp1 += 1 - b\n        ans1 += 1 - b\n    elif i % 2 == 1 and b >= 0:\n        tmp1 += -1 - b\n        ans1 += 1 + b\n\nans2 = 0\ntmp2 = 0\nfor i in range(n):\n    b = a[i] + tmp2\n    if i % 2 == 1 and b <= 0:\n        tmp2 += 1 - b\n        ans2 += 1 - b\n    elif i % 2 == 0 and b >= 0:\n        tmp2 += -1 - b\n        ans2 += 1 + b\n\nans = min(ans1,ans2)\nprint(ans)", "import sys\ninput = sys.stdin.readline\ndef main():\n    N = int(input())\n    A = list(map(int,input().split()))\n    tmp_o = [0 for i in range(N+1)]\n    tmp_e = [0 for i in range(N+1)]\n    count_o = 0\n    count_e = 0\n    for i in range(N):\n        tmp_o[i+1] = tmp_o[i]+A[i]\n        if i%2 == 1 and tmp_o[i+1] <= 0:\n            count_o += 1-tmp_o[i+1]\n            tmp_o[i+1] = 1\n        elif i%2 == 0 and tmp_o[i+1] >= 0:\n            count_o += tmp_o[i+1]+1\n            tmp_o[i+1] = -1\n        else:\n            continue\n    for i in range(N):\n        tmp_e[i+1] = tmp_e[i]+A[i]\n        if i%2 == 0 and tmp_e[i+1] <= 0:\n            count_e += 1-tmp_e[i+1]\n            tmp_e[i+1] = 1\n        elif i%2 == 1 and tmp_e[i+1] >= 0:\n            count_e += tmp_e[i+1]+1\n            tmp_e[i+1] = -1\n        else:\n            continue\n\n    print(min(count_o,count_e))\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\npm_sum = 0\npm_count = 0\nmp_sum = 0\nmp_count = 0\nfor i in range(n):\n    pm_sum += a[i]\n    mp_sum += a[i]\n    if i % 2 == 0:\n        pm_d = max(0, 1 - pm_sum)\n        mp_d = max(0, mp_sum - (-1))\n        pm_sum += pm_d\n        mp_sum -= mp_d\n    else:\n        pm_d = max(0, pm_sum - (-1))\n        mp_d = max(0, 1 - mp_sum)\n        pm_sum -= pm_d\n        mp_sum += mp_d\n    pm_count += pm_d\n    mp_count += mp_d\nprint(min(pm_count, mp_count))", "# coding:UTF-8\nimport sys\n\nMOD = 10 ** 9 + 7\nINF = float('inf')\n\nN = int(input())    # \u6570\u5b57\nA = list(map(int, input().split()))     # \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u9023\u7d9a\u6570\u5b57\n\nres1 = 0\nres2 = 0\n\ns = 0\nfor i in range(N):\n    s = s + A[i]\n    if i % 2 == 1 and s <= 0:\n        shift = -s + 1\n        s += shift\n        res1 += shift\n    if i % 2 == 0 and s >= 0:\n        shift = s + 1\n        s -= shift\n        res1 += shift\n\ns = 0\nfor i in range(N):\n    s = s + A[i]\n    if i % 2 == 0 and s <= 0:\n        shift = -s + 1\n        s += shift\n        res2 += shift\n    if i % 2 == 1 and s >= 0:\n        shift = s + 1\n        s -= shift\n        res2 += shift\n\nprint((\"{}\".format(min(res1, res2))))\n", "A=int(input())\nl=list(map(int,input().split()))\nsum_n=0\nans=0\ncaseA=0\nfor i in range(A):\n   sum_n+=l[i]\n   if i%2==0:\n      if 0<sum_n:\n         continue\n      else:\n         ans+=abs(1-sum_n)\n         sum_n=1\n   else:\n      if sum_n < 0:\n         continue\n      else:\n         ans+=abs(-1-sum_n)\n         sum_n=-1\ncaseA=ans\nans=0\nsum_n=0\nfor i in range(A):\n   sum_n+=l[i]\n   if i%2==1:\n      if 0<sum_n:\n         continue\n      else:\n         ans+=abs(1-sum_n)\n         sum_n=1\n   else:\n      if sum_n < 0:\n         continue\n      else:\n         ans+=abs(-1-sum_n)\n         sum_n=-1\nprint(min(ans,caseA))", "N=int(input())\nA=list(map(int,input().split()))\ns=0\nt=0\na=0\nb=0\nfor i in range(N):\n    s+=A[i]\n    if i%2==0:\n        if s>=0:\n            a+=s+1\n            s=-1\n    if i%2!=0:\n        if s<=0:\n            a+=-s+1\n            s=1\nfor j in range(N):\n    t+=A[j]\n    if j%2!=0:\n        if t>=0:\n            b+=t+1\n            t=-1\n    if j%2==0:\n        if t<=0:\n            b+=-t+1\n            t=1\nprint(min(a,b))", "def solve(ini_val):\n    acc, cnt = 0, 0\n    for ai in a:\n        acc += ai\n        if acc * ini_val < 1:\n            cnt += abs(ini_val - acc)\n            acc += ini_val - acc\n        ini_val *= -1\n    return cnt\n\nn = int(input())\na = list(map(int, input().split()))\nprint((min(solve(1), solve(-1))))\n", "n = int(input())\na = list(map(int, input().split()))\n\nflag = 1\ntemp_1 = 0\ntemp = 0\nfor i in range(n):\n    temp += a[i]\n    if flag * temp <= 0:\n        temp_1 += 1 - flag * temp\n        temp = flag\n    flag *= -1\n\nflag = -1\ntemp_2 = 0\ntemp = 0\nfor i in range(n):\n    temp += a[i]\n    if flag * temp <= 0:\n        temp_2 += 1 - flag * temp\n        temp = flag\n    flag *= -1\n\nprint(min(temp_1, temp_2))", "n=int(input())\na=list(map(int,input().split()))\nx,y,z=0,0,0\nfor i in range(n):\n    x+=a[i]\n    if i%2==0:\n        if x>0:pass\n        else:\n            y+=1-x\n            x=1\n    else:\n        if x<0:pass\n        else:\n            y+=x+1\n            x=-1\nx=0\nfor i in range(n):\n    x+=a[i]\n    if i%2==1:\n        if x>0:pass\n        else:\n            z+=1-x\n            x=1\n    else:\n        if x<0:pass\n        else:\n            z+=x+1\n            x=-1\nprint(min(y,z))", "n = int(input())\na = list(map(int,input().split()))\nans = [0,0]\n\ns = max(a[0],1)\nans[0] = abs(s-a[0])\nfor i in range(n-1):\n    if s * (s + a[i+1]) >= 0:\n        if s > 0:\n            ans[0] += s + a[i+1] + 1\n            s = -1\n        else:\n            ans[0] += 1 - (s + a[i+1])\n            s = 1\n    else:\n            s += a[i+1]\ns = min(-1,a[0])\nans[1] = abs(s-a[0])\nfor i in range(n-1):\n    if s * (s + a[i+1]) >= 0:\n        if s > 0:\n            ans[1] += s + a[i+1] + 1\n            s = -1\n        else:\n            ans[1] += 1 - (s + a[i+1])\n            s = 1\n    else:\n            s += a[i+1]\nprint(min(ans))", "n = int(input())\na = list(map(int, input().split()))\nb = a[:]\ncnt1, cnt2 = 0, 0\ns = 0\nfor i in range(n):\n  if (i%2==0 and s+a[i]<=0) or (i%2==1 and s+a[i]>=0) :\n    cnt1 += abs(s+a[i])+1\n    if i%2:\n      s = -1\n    else:\n      s = 1\n  else:\n    s += a[i]\ns = 0\nfor i in range(n):\n  if (i%2==1 and s+a[i]<=0) or (i%2==0 and s+a[i]>=0) :\n    cnt2 += abs(s+a[i])+1\n    if i%2:\n      s = 1\n    else:\n      s = -1\n  else:\n    s += a[i]\nprint(min(cnt1, cnt2))", "n = int(input())\nlst = list(map(int, input().rstrip().split()))\n# start with positive number\ncur, cnt_1 = 0, 0\nfor i, j in enumerate(lst):\n    new = cur + j\n    if i % 2 == 0 and new <= 0:\n        cnt_1 += abs(new) + 1\n        cur = 1\n    elif i % 2 == 1 and new >= 0:\n        cnt_1 += abs(new) + 1\n        cur = -1\n    else:\n        cur = new\n\n# start with negative number\ncur, cnt_2 = 0, 0\nfor i, j in enumerate(lst):\n    new = cur + j\n    if i % 2 == 0 and new >= 0:\n        cnt_2 += abs(new) + 1\n        cur = -1\n    elif i % 2 == 1 and new <= 0:\n        cnt_2 += abs(new) + 1\n        cur = 1\n    else:\n        cur = new\nprint(min(cnt_1, cnt_2))", "N = int(input())\nA = list(map(int, input().split()))\n\ndef sequence(plus_start):\n    cost = 0\n    cum = 0\n\n    for i in range(N):\n        tmp = cum + A[i]\n        target = tmp\n        if plus_start:\n            if i % 2 == 0:\n                if tmp <= 0:\n                    target = 1\n            else:\n                if tmp >= 0:\n                    target = -1\n        else:\n            if i % 2 == 0:\n                if tmp >= 0:\n                    target = -1\n            else:\n                if tmp <= 0:\n                    target = 1\n        diff = target - tmp\n        cum += A[i] + diff\n        cost += abs(diff)\n    return cost\n\nprint((min(sequence(True), sequence(False))))\n\n", "#!/usr/bin/env python3\n\nimport sys, math, copy\n# import fractions, itertools\n# import numpy as np\n# import scipy\n# sys.setrecursionlimit(1000000)\n\nHUGE = 2147483647\nHUGEL = 9223372036854775807\nABC = \"abcdefghijklmnopqrstuvwxyz\"\n\ndef next(su, ai, sign):\n    assert sign in [-1, 1]\n    if (su + ai) * sign > 0:\n        return ai\n    else:\n        nextsu = sign\n        nextai = nextsu - su\n        return nextai\n\ndef main():\n    n = int(input())\n    an = list(map(int, input().split()))\n\n    ress = HUGEL\n    for beg in [-1, 1]:\n        res = 0\n        su = 0\n        sign = beg\n        for i in range(n):\n            ai = next(su, an[i], sign)\n            su = su + ai\n            res += abs(ai - an[i])\n            sign *= (-1)\n        ress = min(ress, res)\n\n    print(ress)\n\nmain()\n", "N = int(input())\nA = list(map(int, input().split()))\n\nif A[0] != 0:\n    A_sum = A[0]\n    ans1 = 0\n    for i in range(1, N):\n        if A_sum < 0:\n            A_sum += A[i]\n            if A_sum <= 0:\n                ans1 += 1 - (A_sum)\n                A_sum = 1\n        elif A_sum > 0:\n            A_sum += A[i]\n            if A_sum >= 0:\n                ans1 += (A_sum) - (-1)\n                A_sum = -1\nelse:\n    ans1 = max(A)*N\n\nans2 = abs(1-A[0])\nA_sum = 1\nfor i in range(1, N):\n    if A_sum < 0:\n        A_sum += A[i]\n        if A_sum <= 0:\n            ans2 += 1 - (A_sum)\n            A_sum = 1\n    elif A_sum > 0:\n        A_sum += A[i]\n        if A_sum >= 0:\n            ans2 += (A_sum) - (-1)\n            A_sum = -1\n\nans3 = abs(A[0]-(-1))\nA_sum = -1\nfor i in range(1, N):\n    if A_sum < 0:\n        A_sum += A[i]\n        if A_sum <= 0:\n            ans3 += 1 - (A_sum)\n            A_sum = 1\n    elif A_sum > 0:\n        A_sum += A[i]\n        if A_sum >= 0:\n            ans3 += (A_sum) - (-1)\n            A_sum = -1\n\n\nprint((min(ans1, ans2, ans3)))\n", "n = int(input())\nA = [int(x) for x in input().split()]\n\n\ndef f(isPlus):\n    sum = 0\n    ret = 0\n    for a in A:\n        sum += a\n        if isPlus:\n            if sum <= 0:\n                ret += abs(sum) + 1\n                sum = 1\n        else:\n            if sum >= 0:\n                ret += abs(sum) + 1\n                sum = -1\n\n        isPlus = not isPlus\n    return ret\n\n\na1 = f(True)\na2 = f(False)\nprint((min(a1, a2)))\n", "import sys\nimport math\nimport itertools\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N = input().rstrip()\n    A = LI()\n    if A[0] > 0:\n        A1 = 0\n        B1 = A[0]\n        \n        A2 = A[0]+1\n        B2 = -1\n    elif A[0] == 0:\n        A1 = 1\n        B1 = 1\n        \n        A2 = 1\n        B2 = -1\n    else:\n        A1 = -A[0]+1\n        B1 = 1\n        \n        A2 = 0\n        B2 = A[0]\n\n    for num in A[1:]:\n        if B1 > 0:\n            B1+=num\n            if B1 > 0:\n                A1 += B1+1\n                B1 = -1\n            elif B1 == 0:\n                A1 += 1\n                B1 = -1\n        else:\n            B1+= num\n            if B1 < 0:\n                A1 += -B1+1\n                B1 = 1\n            elif B1 == 0:\n                B1 = 1\n                A1 += 1\n\n    for num in A[1:]:\n        if B2 > 0:\n            B2+=num\n            if B2 > 0:\n                A2 += B2+1\n                B2 = -1\n            elif B2 == 0:\n                A2 += 1\n                B2 = -1\n        else:\n            B2+= num\n            if B2 < 0:\n                A2 += -B2+1\n                B2 = 1\n            elif B2 == 0:\n                B2 = 1\n                A2 += 1\n\n    print(min(A1, A2))\n\ndef __starting_point():\n    main()\n__starting_point()", "# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [input() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [int(input()) for i in range(n)]\n\n\nclass Math():\n    @staticmethod\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return Math.gcd(b, a % b)\n\n    @staticmethod\n    def lcm(a, b):\n        return (a * b) // Math.gcd(a, b)\n\n    @staticmethod\n    def roundUp(a, b):\n        return -(-a // b)\n\n    @staticmethod\n    def toUpperMultiple(a, x):\n        return Math.roundUp(a, x) * x\n\n    @staticmethod\n    def toLowerMultiple(a, x):\n        return (a // x) * x\n\n    @staticmethod\n    def nearPow2(n):\n        if n <= 0:\n            return 0\n        if n & (n - 1) == 0:\n            return n\n        ret = 1\n        while(n > 0):\n            ret <<= 1\n            n >>= 1\n        return ret\n\n    @staticmethod\n    def sign(n):\n        if n == 0:\n            return 0\n        if n < 0:\n            return -1\n        return 1\n\n    @staticmethod\n    def isPrime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        d = int(n ** 0.5) + 1\n        for i in range(3, d + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n\nclass PriorityQueue:\n    def __init__(self, l=[]):\n        self.__q = l\n        heapq.heapify(self.__q)\n        return\n\n    def push(self, n):\n        heapq.heappush(self.__q, n)\n        return\n\n    def pop(self):\n        return heapq.heappop(self.__q)\n\n\nMOD = int(1e09) + 7\nINF = int(1e15)\n\n\ndef main():\n    # sys.stdin = open(\"sample.txt\")\n    N = Scanner.int()\n    A = Scanner.map_int()\n    s1, s2 = 0, 0\n    c1, c2 = 0, 0\n    for i in range(N):\n        if i % 2 == 0:\n            if s1 + A[i] > 0:\n                s1 += A[i]\n            else:\n                c1 += abs(s1 + A[i]) + 1\n                s1 = 1\n            if s2 + A[i] < 0:\n                s2 += A[i]\n            else:\n                c2 += abs(s2 + A[i])+1\n                s2 = -1\n        else:\n            if s1 + A[i] < 0:\n                s1 += A[i]\n            else:\n                c1 += abs(s1 + A[i]) + 1\n                s1 = -1\n            if s2 + A[i] > 0:\n                s2 += A[i]\n            else:\n                c2 += abs(s2 + A[i]) + 1\n                s2 = 1\n    print((min(c1, c2)))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\n\ncost=0\nsum=0\nfor i in range(n):\n    sum+=a[i]\n    if i%2==0:\n        if sum>=1:\n            pass\n        else:\n            cost+=1-sum\n            sum=1\n    else:\n        if sum<=-1:\n            pass\n        else:\n            cost+=sum+1\n            sum=-1\n\nkost=0\nkom=0\nfor i in range(n):\n    kom+=a[i]\n    if i%2!=0:\n        if kom>=1:\n            pass\n        else:\n            kost+=1-kom\n            kom=1\n    else:\n        if kom<=-1:\n            pass\n        else:\n            kost+=kom+1\n            kom=-1\n\nprint(min(cost,kost))", "N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\n\n\ndef func(A, flag):\n    l = [0]*N\n    ans = 0\n    acc = 0\n    for i in range(N):\n        l[i] = A[i]\n    for i in range(0, N):\n        acc = acc+l[i]\n        if i % 2 == flag:\n            if acc >= 0:\n                l[i] = l[i] - (1 + acc)\n                ans += 1+acc\n                acc = -1\n        else:\n            if acc <= 0:\n                l[i] = l[i]+(1-acc)\n                ans += 1-acc\n                acc = 1\n    return ans\n\n\nprint((min(func(A, 0), func(A, 1))))\n", "n = int(input())\na = list(map(int, input().split()))\nnow = a[0]\nif now == 0:\n  ans = 1\n  now = 1\nelse:\n  ans = 0\nfor i in a[1:]:\n  t = now + i\n  if now * t >= 0:\n    if now >= 0:\n      ans += t + 1\n      now = -1\n    else:\n      ans += 1 - t\n      now = 1\n  else:\n    now = t\n    \nif a[0] >= 0:\n  now = -1\n  ans2 = a[0] - now\nelse:\n  now = 1\n  ans2 = now - a[0]\nfor i in a[1:]:\n  t = now + i\n  if now * t >= 0:\n    if now >= 0:\n      ans2 += t + 1\n      now = -1\n    else:\n      ans2 += 1 - t\n      now = 1\n  else:\n    now = t\nans = min(ans,ans2)\nprint(ans)", "n=int(input())\na=list(map(int,input().split()))\na1=0\nt=0\nfor i in range(n):\n    t+=a[i]\n    if i%2==0:\n        if t<=0:\n            a1+=1-t\n            t=1\n    else:\n        if t>=0:\n            a1+=1+t\n            t=-1\na2=0\nt=0\nfor i in range(n):\n    t+=a[i]\n    if i%2==1:\n        if t<=0:\n            a2+=1-t\n            t=1\n    else:\n        if t>=0:\n            a2+=1+t\n            t=-1\nprint(min(a1,a2))", "n = int(input())\na = list(map(int,input().split()))\nans1 = abs(a[0]-1)\nans2 = abs(a[0]+1)\nans3 = 0\ndef f(x,y):\n  for i in range(1,n):\n    if y > 0:\n      y += a[i]\n      if y < 0:\n        continue\n      else:\n        x += abs(y+1)\n        y = -1\n    else:\n      y += a[i]\n      if y > 0:\n        continue\n      else:\n        x += abs(y-1)\n        y = 1\n  return x\nif a[0] == 0:\n  ans3 = float(\"inf\")\nelse:\n  ans3 = f(ans3,a[0])\nprint(min(ans3,f(ans1,1),f(ans2,-1)))", "n = int(input())\na = list(map(int,input().split()))\n\ncnt = [0,0]\nfor i,x in zip([0,1],[1,-1]):\n    now = 0\n    for aj in a:\n        now += aj\n        if(now == 0):\n            cnt[i] += 1\n            now = x\n        elif( now * x < 0):\n            cnt[i] += abs(now - x)\n            now = x\n        x *= -1\n\nprint(min(cnt))", "N = int(input())\nA = list(map(int,input().split()))\n\ns = ans1 = 0\nfor i,a in enumerate(A):\n    s += a\n    if i%2:\n        if s <= 1:\n            ans1 += 1-s\n            s = 1\n    else:\n        if s >= -1:\n            ans1 += s+1\n            s = -1\n\ns = ans2 = 0\nfor i,a in enumerate(A):\n    s += a\n    if i%2==0:\n        if s <= 1:\n            ans2 += 1-s\n            s = 1\n    else:\n        if s >= -1:\n            ans2 += s+1\n            s = -1\n\nprint(min(ans1,ans2))", "def main():\n    import sys\n    input = sys.stdin.readline\n    N = int(input())\n    A = list(map(int,input().split()))\n    \n    tmp = 0\n    tmpans1 = 0\n    for i in range(N):\n        tmp += A[i]\n        if i%2==0 and tmp<=0:\n            tmpans1 += 1-tmp\n            tmp = 1\n        elif i%2==1 and tmp >= 0:\n            tmpans1 += 1+tmp\n            tmp = -1\n    tmp = 0\n    tmpans2 = 0\n    for i in range(N):\n        tmp += A[i]\n        if i%2==0 and tmp>=0:\n            tmpans2 += 1+tmp\n            tmp = -1\n        elif i%2==1 and tmp <= 0:\n            tmpans2 += 1-tmp\n            tmp = 1\n    #print(tmpans1,tmpans2)\n    print(min(tmpans1,tmpans2))\n    \n    \n    \nmain()", "N = int(input())\nA = list(map(int,input().split()))\n\ncalc1 = 0\ncalc2 = 0\n\nL = A\n\nif L[0] > 0 :\n    su = L[0]\nelse :\n    su = 1\n    calc1 += 1 + abs(L[0])\n\nfor i in range(1,N) :\n    su += L[i]\n    if i % 2 :\n        if su >= 0 :\n            calc1 += 1 + abs(su)\n            su = -1\n    else :\n        if su <= 0 :\n            calc1 += 1 + abs(su)\n            su = 1\n\nL = A\n\nif L[0] < 0 :\n    su = L[0]\nelse :\n    su = -1\n    calc2 += 1 + abs(L[0])\n\nfor i in range(1,N) :\n    su += L[i]\n    if not i % 2 :\n        if su >= 0 :\n            calc2 += 1 + abs(su)\n            su = -1\n    else :\n        if su <= 0 :\n            calc2 += 1 + abs(su)\n            su = 1\nprint((min(calc1,calc2)))\n", "n=int(input())\na=list(map(int,input().split()))\nc1=0\ns=0\nfor i in range(n):\n  s+=a[i]\n  if i%2:\n    if s>=0:\n      c1+=s+1\n      s=-1\n  else:\n    if s<=0:\n      c1+=-s+1\n      s=1\nc2=0\ns=0\nfor i in range(n):\n  s+=a[i]\n  if i%2:\n    if s<=0:\n      c2+=-s+1\n      s=1\n  else:\n    if s>=0:\n      c2+=s+1\n      s=-1\nprint(min(c1,c2))", "# ARC072C - Sequence (ABC059C)\ndef main():\n    n = int(input())\n    lst = list(map(int, input().rstrip().split()))\n    \n    # start with positive number\n    cur, cnt_1 = 0, 0\n    for i, j in enumerate(lst):\n        new = cur + j\n        if i % 2 == 0 and new <= 0:\n            cnt_1 += abs(new) + 1\n            cur = 1\n        elif i % 2 == 1 and new >= 0:\n            cnt_1 += abs(new) + 1\n            cur = -1\n        else:\n            cur += j\n\n    # start with negative number\n    cur, cnt_2 = 0, 0\n    for i, j in enumerate(lst):\n        new = cur + j\n        if i % 2 == 0 and new >= 0:\n            cnt_2 += abs(new) + 1\n            cur = -1\n        elif i % 2 == 1 and new <= 0:\n            cnt_2 += abs(new) + 1\n            cur = 1\n        else:\n            cur += j\n    \n    print(min(cnt_1, cnt_2))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# ARC072C - Sequence (ABC059C)\ndef modify_seq(seq: list, is_positive: bool) -> int:\n    cur, cnt = 0, 0\n    for i in seq:\n        cur += i\n        if is_positive and cur <= 0:\n            cnt += abs(cur) + 1\n            cur = 1\n        elif not is_positive and cur >= 0:\n            cnt += abs(cur) + 1\n            cur = -1\n        is_positive = not is_positive\n    return cnt\n\n\ndef main():\n    _, *A = list(map(int, open(0).read().split()))\n    print((min(modify_seq(A, True), modify_seq(A, False))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n=int(input())\n    a = list(map(int,input().split()))\n    sp=0\n    sm=0\n    cntp=0\n    cntm=0\n    for i in range(n):\n        sp+=a[i]\n        sm+=a[i]\n        if abs(sp)>=1 and sp//(abs(sp))==(-1)**i:\n            sp+=0\n        else:\n            cntp+=abs(sp)+1\n            sp=(-1)**i\n        if abs(sm)>=1 and sm//(abs(sm))==(-1)**(i+1):\n            sm+=0\n        else:\n            cntm+=abs(sm)+1\n            sm=(-1)**(i+1)\n    print((min(cntp,cntm)))\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = list(map(int, input().split(' ')))\nans1 = 0\nans2 = 0\nsum1 = 0\nsum2 = 0\nflag = True\nfor i in range(len(A)):\n    sum1 = sum1 + A[i]\n    sum2 = sum2 + A[i]\n    flag = not(flag)\n    if flag:\n        if sum1 > 0:\n            pass\n        else:\n            ans1 += abs(1-sum1)\n            sum1 = 1\n        if sum2 < 0:\n            pass\n        else:\n            ans2 += abs(-1-sum2)\n            sum2 = -1\n    else:\n        if sum2 > 0:\n            pass\n        else:\n            ans2 += abs(1-sum2)\n            sum2 = 1\n        if sum1 < 0:\n            pass\n        else:\n            ans1 += abs(-1-sum1)\n            sum1 = -1\nprint((min(ans1, ans2)))\n", "import sys\nimport copy\n\nN = int(input())\nA = list(map(int, input().split()))\na = copy.deepcopy(A)\nb = copy.deepcopy(A)\n\ns = 0\ncost_p = 0\ncost_m = 0\n\nfor i in range(N):\n    if i%2 == 0:\n        new = max(abs(s) + 1, a[i])\n        cost_p += new - a[i]\n        a[i] = new\n        s += a[i]\n    else:\n        new = min((-1)*abs(s) - 1, a[i])\n        cost_p += abs(new - a[i])\n        a[i] = new\n        s += a[i]\n\ns = 0\n\nfor i in range(N):\n    if i%2 == 1:\n        new = max(abs(s) + 1, b[i])\n        cost_m += abs(new - b[i])\n        b[i] = new\n        s += b[i]\n    else:\n        new = min((-1)*abs(s) - 1, b[i])\n        cost_m += abs(new - b[i])\n        b[i] = new\n        s += b[i]\n\nprint(min(cost_p, cost_m))", "n=input()\na=[int(j) for j in input().split()]\n\ndef chk(a,t):\n  ans=0\n  x=0\n  for i in a:\n    x+=i\n    if t==True and x<1:\n      ans+=1-x\n      x=1\n    elif t==False and x>-1:\n      ans+=x+1\n      x=-1\n    t = not t\n  return ans\n  \nprint(min(chk(a,True),chk(a,False)))", "n=int(input())\na=list(map(int,input().split()))\np=[1,-1]\nj=[-1,1]\nc=0\nl=0\nd=0\ne=0\nfor i in range(n):\n    s=i%2\n    c+=a[i]\n    l+=a[i]\n    if p[s]*c<=0:\n        d+=abs(c-p[s])\n        c=p[s]\n    if j[s]*l<=0:\n        e+=abs(l-j[s])\n        l=j[s] \nprint(min(e,d))", "n=int(input().strip())\na=list(map(int, input().split()))\nsu=0\nans1=0\nans2=0\nfor i in range(n):\n    if i%2==0:\n        su+=a[i]\n        if su<=0:\n            ans1+=abs(su-1)\n            su=1\n    if i%2==1:\n        su+=a[i]\n        if su>=0:\n            ans1+=abs(su+1)\n            su=-1\nsu=0\nfor i in range(n):\n    if i%2==0:\n        su+=a[i]\n        if su>=0:\n            ans2+=abs(su+1)\n            su=-1\n    if i%2==1:\n        su+=a[i]\n        if su<=0:\n            ans2+=abs(su-1)\n            su=1\n\nprint(min(ans1,ans2))", "N, = list(map(int, input().split()))\nA = list(map(int, input().split()))\ns = 0\nr = 0\nfor i, a in enumerate(A):\n    s += a\n    if i % 2:\n        if s >= 0:\n            r += s+1\n            s = -1\n    else:\n        if s <= 0:\n            r += -s+1\n            s = 1\ns = 0\nr2 = 0\nfor i, a in enumerate(A):\n    s += a\n    if i % 2:\n        if s <= 0:\n            r2 += -s+1\n            s = 1\n    else:\n        if s >= 0:\n            r2 += s+1\n            s = -1\nprint((min(r, r2)))\n", "N=int(input())\n\nL=list(map(int,input().split()))\n\nPnum=0\nPsum=0\nif L[0]>=1:\n    Pnum=L[0]\nelse:\n    Psum=1-L[0]\n    Pnum=1\nfor i in range(1,N):\n    if i%2==1:\n        if Pnum+L[i]<=-1:\n            Pnum=Pnum+L[i]\n        else:\n            Psum+=(Pnum+L[i]+1)\n            Pnum=-1\n    else:\n        if Pnum+L[i]>=1:\n            Pnum=Pnum+L[i]\n        else:\n            Psum+=(1-Pnum-L[i])\n            Pnum=1\n            \nMnum=0\nMsum=0\nif L[0]<=-1:\n    Mnum=L[0]\nelse:\n    Msum=L[0]+1\n    Mnum=-1\nfor i in range(1,N):\n    if i%2==0:\n        if Mnum+L[i]<=-1:\n            Mnum=Mnum+L[i]\n        else:\n            Msum+=(Mnum+L[i]+1)\n            Mnum=-1\n    else:\n        if Mnum+L[i]>=1:\n            Mnum=Mnum+L[i]\n        else:\n            Msum+=(1-Mnum-L[i])\n            Mnum=1\n\nprint((min(Psum,Msum)))\n", "n = int(input())\nlis = list(map(int,input().split()))\ncou = 0\nco = 0\nans1 = 0\nans2 = 0\nfor i in range(n):\n  cou += lis[i]\n  co += lis[i]\n  if cou <= 0 and i % 2 == 0:\n    ans1 += (1 -cou)\n    cou = 1\n  if cou >= 0 and i % 2 == 1:\n    ans1 += (cou +1)\n    cou = -1\n  if co >= 0 and i % 2 == 0:\n    ans2 += (co +1)\n    co = -1\n  if co <= 0 and i % 2 == 1:\n    ans2 += (1 -co)\n    co = 1\nprint(min(ans1,ans2))", "#!/usr/bin/env python\n# coding: utf-8\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(input().split())\n\ndef rli():\n    return list(map(int, input().split()))\n\ndef solve(la):\n    ans = 0\n    s = la[0]\n    for i in range(1, len(la)):\n        a = la[i]\n        ns = s+a\n        # print(i, s, a, ns)\n        if s*ns < 0:\n            s = ns\n            continue\n        ans += abs(ns)+1\n        if ns < 0:\n            ns += abs(ns)+1\n        else:\n            ns -= abs(ns)+1\n        s = ns\n    return ans\n\ndef main():\n    n = ri()\n    la = rli()\n    first = la[0]\n\n    ans1 = 0\n    if first <= 0:\n        ans1 += abs(first)+1\n        la[0] = 1\n    ans1 += solve(la)\n\n    ans2 = 0\n    la[0] = first\n    if first >= 0:\n        ans2 += abs(first)+1\n        la[0] = -1\n    ans2 += solve(la)\n    print((min(ans1, ans2)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = list(map(int,input().split()))\n\ndef calc(tmp, cnt=0):\n    for i in a[1:]:\n        if tmp < 0:\n            tmp = tmp + i\n            if tmp <= 0:\n                cnt += -tmp + 1\n                tmp = 1\n        elif tmp > 0:\n            tmp = tmp + i\n            if tmp >= 0:\n                cnt += tmp + 1\n                tmp = -1\n    return cnt\n\nif a[0]:\n    hugou = 1 if a[0] > 0 else -1\n    print((min(calc(a[0]), calc(-hugou, abs(a[0]) + 1))))\nelse:\n    print((min(calc(1, 1), calc(-1, 1))))\n", "n = int(input())\nl = list(map(int, input().split()))\n \nans = 0\n\ndef func(l, pn):\n  ans = 0\n  sum_ = 0\n  for i in range(n):\n    sum_ += l[i]\n    if sum_ >= 0 and pn[i] < 0:\n      ans += sum_+1\n      sum_ = -1\n    elif sum_ <= 0 and pn[i] > 0:\n      ans += -sum_+1\n      sum_ = 1\n    else:\n      continue\n  return ans\n\npn1 = [1 if i%2 == 0 else -1 for i in range(n)]\npn2 = [-1 if i%2 == 0 else 1 for i in range(n)]\n\nprint(min(func(l, pn1), func(l, pn2)))", "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\nn,*a = map(int,read().split())\n\n\nfor i in range(1,n):\n    a[i] += a[i-1]\n\naa = a[:]\n\nsgn = 1\nr1 = 0\nv = 0\nfor i in range(n):\n    a[i] += v\n    if sgn:\n        if a[i] <= 0:\n            r1 += -a[i]+1\n            v += -a[i]+1\n    else:    \n        if a[i] >= 0:\n            r1 += a[i]+1\n            v -= a[i]+1\n    sgn ^= 1\n    \n\na = aa\nsgn = 0\nr2 = 0\nv = 0\nfor i in range(n):\n    a[i] += v\n    if sgn:\n        if a[i] <= 0:\n            r2 += -a[i]+1\n            v += -a[i]+1\n    else:    \n        if a[i] >= 0:\n            r2 += a[i]+1\n            v -= a[i]+1\n    sgn ^= 1\n\n#print(r1,r2)\nprint(min(r1,r2))", "N = int(input())\nA = list(map(int, input().split()))\n\nif A[0] > 0:\n    A_sum = A[0]\n    ans1 = 0\nelse:\n    A_sum = 1\n    ans1 = 1-A[0]\nfor i in range(1, N):\n    if A_sum < 0:\n        A_sum += A[i]\n        if A_sum <= 0:\n            ans1 += 1 - (A_sum)\n            A_sum = 1\n    elif A_sum > 0:\n        A_sum += A[i]\n        if A_sum >= 0:\n            ans1 += (A_sum) - (-1)\n            A_sum = -1\n\n\nif A[0] < 0:\n    A_sum = A[0]\n    ans2 = 0\nelse:\n    A_sum = -1\n    ans2 = A[0]-(-1)\nfor i in range(1, N):\n    if A_sum < 0:\n        A_sum += A[i]\n        if A_sum <= 0:\n            ans2 += 1 - (A_sum)\n            A_sum = 1\n    elif A_sum > 0:\n        A_sum += A[i]\n        if A_sum >= 0:\n            ans2 += (A_sum) - (-1)\n            A_sum = -1\n\n\n\nprint((min(ans1, ans2)))\n", "def ARC072C():\n    N = int(input())\n    a = list(map(int, input().split()))\n    cnt1 = 0\n    cnt2 = 0\n    sum1 = a[0]\n    sum2 = a[0]\n    if sum1 <= 0:\n        cnt1 = 1 - a[0]\n        sum1 = 1\n    if sum2 >= 0:\n        cnt2 = abs(-1 - a[0])\n        sum2 = -1\n    j = 1\n    #print(sum1, sum2)\n    for i in range(1, N):\n        sum1 += a[i]\n        sum2 += a[i]\n        if j % 2 == 0:\n            if sum1 <= 0:\n                cnt1 += 1 - sum1\n                sum1 = 1\n            if sum2 >= 0:\n                cnt2 += abs(-1 - sum2)\n                sum2 = -1\n        else:\n            if sum1 >= 0:\n                cnt1 += abs(-1 - sum1)\n                sum1 = -1\n            if sum2 <= 0:\n                cnt2 += 1 - sum2\n                sum2 = 1\n        j += 1\n        #print(sum1, sum2)\n    #print(cnt1, cnt2)\n    print((min(cnt1, cnt2)))\nARC072C()\n", "N = int(input())\nA = [int(_) for _ in input().split()]\n\n#positive\npos_count = 0\nsign = 1\ncumsum = 0\nfor a in A:\n    cumsum += a\n    if cumsum * sign <= 0:\n        pos_count += abs(sign - cumsum)\n        cumsum = sign\n    sign *= -1\n\n#negative\nneg_count = 0\nsign = -1\ncumsum = 0\nfor a in A:\n    cumsum += a\n    if cumsum * sign <= 0:\n        neg_count += abs(sign - cumsum)\n        cumsum = sign\n    sign *= -1\n\nprint((min(pos_count, neg_count)))\n", "N = int(input())\nA = list(map(int, input().split()))\nB = A.copy()\nans = [0, 0]\nflag1 = True\nflag2 = False\nfor i in range(0, N):\n    if i != 0:\n        A[i] += A[i-1]\n    if flag1:\n        if A[i] <= 0:\n            ans[0] += (abs(A[i])+1)\n            A[i] = 1\n        flag1 = False\n    else:\n        if A[i] >= 0:\n            ans[0] += (abs(A[i])+1)\n            A[i] = -1\n        flag1 = True\nfor i in range(0, N):\n    if i != 0:\n        B[i] += B[i-1]\n    if flag2:\n        if B[i] <= 0:\n            ans[1] += (abs(B[i])+1)\n            B[i] = 1\n        flag2 = False\n    else:\n        if B[i] >= 0:\n            ans[1] += (abs(B[i])+1)\n            B[i] = -1\n        flag2 = True\nprint((min(ans)))\n", "n = int(input())\n*A, = map(int, input().split())\neven = 0; odd = 0;\nS = 0\nfor i, a in enumerate(A):\n    S += a\n    if i % 2 == 0 and S <= 0:\n        even += -S + 1\n        S = 1\n    elif i % 2 == 1 and S >= 0:\n        even += S + 1\n        S = -1\nS = 0\nfor i, a in enumerate(A):\n    S += a\n    if i % 2 == 0 and S >= 0:\n        odd += S + 1\n        S = -1\n    elif i % 2 == 1 and S <= 0:\n        odd += -S + 1\n        S = 1\nprint(min(even, odd))", "def inpl(): return [int(i) for i in input().split()]\ndef minich(A, plus):\n    ans = 0\n    back = 0\n    for i in A:\n        if plus:\n            if back + i < 0:\n                back = back + i\n            else:\n                ans += back + i + 1\n                back = -1\n        else:\n            if back + i > 0:\n                back = back + i\n            else:\n                ans += 1 - back - i\n                back = 1\n        plus = not plus\n    return ans\nN = int(input())\nA = inpl()\nprint(min(minich(A, True), minich(A, False)))", "n = int(input())\nr = [int(i) for i in input().split()]\nfor i in range(1,n):\n    r[i] += r[i-1]\n\na = r.copy()\nans_a = 0; change_v = 0\nfor i in range(n):\n    a[i] += change_v\n    if i%2 == 1:\n        ans_a += max(0,1-a[i])\n        change_v += max(0,1-a[i])\n    else:\n        ans_a += max(0,a[i]+1)\n        change_v -= max(0,a[i]+1)\n\na = r.copy()\nans_b = 0; change_v = 0\nfor i in range(n):\n    a[i] += change_v\n    if i%2 == 0:\n        ans_b += max(0,1-a[i])\n        change_v += max(0,1-a[i])\n    else:\n        ans_b += max(0,a[i]+1)\n        change_v -= max(0,a[i]+1)\n\nprint((min(ans_a,ans_b)))\n", "# ARC072C - Sequence (ABC059C)\ndef main():\n    n = int(input())\n    lst = list(map(int, input().rstrip().split()))\n    cnt = [0] * 2\n    \n    # start with positive number\n    cur = 0\n    for i, j in enumerate(lst):\n        cur += j\n        if i % 2 == 0 and cur <= 0:\n            cnt[0] += abs(cur) + 1\n            cur = 1\n        elif i % 2 == 1 and cur >= 0:\n            cnt[0] += abs(cur) + 1\n            cur = -1\n\n    # start with negative number\n    cur = 0\n    for i, j in enumerate(lst):\n        cur += j\n        if i % 2 == 0 and cur >= 0:\n            cnt[1] += abs(cur) + 1\n            cur = -1\n        elif i % 2 == 1 and cur <= 0:\n            cnt[1] += abs(cur) + 1\n            cur = 1\n\n    print(min(cnt))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\na = list(map(int,input().split()))\nb = [0,0] \nfor p in range(2):\n  s = 0\n  for i in range(n):\n    t = s+a[i]\n    if (i+p)%2 == 0:\n      if t<=0:\n        b[p] += 1-t\n        s = 1\n      else:\n        s = t\n    else:\n      if t>=0:\n        b[p] += 1+t\n        s = -1\n      else:\n        s = t\nprint(min(b))", "n = int(input())\n\nA = list(map(int, input().split()))\n\n\nN = A[:]\nncount = 0\nif N[0] >= 0:\n    ncount += abs(N[0]) + 1\n    N[0] = -1\nfor i in range(1, n):\n    N[i] +=  N[i-1]\n    if i % 2 == 1:\n        if N[i] <= 0:\n            ncount += abs(N[i]) + 1\n            N[i] = 1\n    else:\n        if N[i] >= 0:\n            ncount += abs(N[i]) + 1\n            N[i] = -1\n\nP = A[:]\npcount = 0\nif P[0] <= 0:\n    pcount += abs(P[0]) + 1\n    P[0] = 1\nfor i in range(1, n):\n    P[i] +=  P[i-1]\n    if i % 2 == 0:\n        if P[i] <= 0:\n            pcount += abs(P[i]) + 1\n            P[i] = 1\n    else:\n        if P[i] >= 0:\n            pcount += abs(P[i]) + 1\n            P[i] = -1\n\n\n\nprint(min(ncount, pcount))", "n = int(input())\na = list(map(int, input().split()))\n\nans1 = 0\nans2 = 0\n\nsum1 = 0\nsum2 = 0\n\nfor i in range(n):\n    sum1 += a[i]\n    sum2 += a[i]\n    if sum1*(-1)**i>=0:\n        ans1 += abs(sum1)+1\n        sum1 = -(-1)**i\n    if sum2*(-1)**i<=0:\n        ans2 += abs(sum2)+1\n        sum2 = (-1)**i\n\nprint((min(ans1,ans2)))\n", "n = int(input())\na = list(map(int,input().split()))\nans = 0\nsum = 0\nfor i in range(n):\n    sum += a[i]\n    if sum*(-1)**i<=0:\n        ans += abs(sum)+1\n        sum = (-1)**i\nans2 = 0\nsum = 0\nfor i in range(n):\n    sum += a[i]\n    if sum*(-1)**i>=0:\n        ans2 += abs(sum)+1\n        sum = -(-1)**i\nprint((min(ans,ans2)))\n", "n = int(input())\na = [int(_) for _ in input().split()]\nans1 = 0\nans2 = 0\ntmp1 = 0\ntmp2 = 0\n\nflag = False\nfor i in a:\n    tmp1 += i\n    if flag and tmp1 <= 0:\n        ans1 += 1-tmp1\n        tmp1 = 1\n    elif not flag and tmp1 >= 0:\n        ans1 += tmp1+1\n        tmp1 = -1\n    \n    if flag:\n        flag = False\n    else:\n        flag = True\n\nflag = True\nfor i in a:\n    tmp2 += i\n    if flag and tmp2 <= 0:\n        ans2 += 1-tmp2\n        tmp2 = 1\n    elif not flag and tmp2 >= 0:\n        ans2 += tmp2+1\n        tmp2 = -1\n    \n    if flag:\n        flag = False\n    else:\n        flag = True\n\nprint(min(ans1, ans2))", "n = int(input())\na = list(map(int, input().split()))\n\n\nans = 0\nansans = 0\nnow = 0\n\nfor i in range(n):\n    now += a[i]\n    if i % 2 == 0:\n        if now < 0:\n            ans += abs(now) + 1\n            now = 1\n        elif now == 0:\n            ans += 1\n            now = 1\n    else:\n        if now >= 0:\n            ans += abs(now) + 1\n            now = -1\n        elif now == 0:\n            ans += 1\n            now = -1\n\nnow = 0\nfor i in range(n):\n    now += a[i]\n    if i % 2 == 0:\n        if now > 0:\n            ansans += abs(now) + 1\n            now = -1\n        elif now == 0:\n            ansans += 1\n            now = -1\n    else:\n        if now < 0:\n            ansans += abs(now) + 1\n            now = 1\n        elif now == 0:\n            ansans += 1\n            now = 1\n\nprint((min(ans, ansans)))\n", "def main():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    ans = 0\n    s = A[0]\n    plus_flag = True\n    if A[0] <= 0:\n        ans += -A[0] + 1\n        s = 1\n    v1 = eval(s, ans, plus_flag, A)\n\n    ans = 0\n    s = A[0]\n    plus_flag = False\n    if A[0] >= 0:\n        ans += A[0] + 1\n        s = -1\n    v2 = eval(s, ans, plus_flag, A)\n\n    print((min(v1, v2)))\n\n\ndef eval(s, ans, plus_flag, A):\n    for a in A[1:]:\n        if plus_flag is True:\n            plus_flag = False\n            if s + a == 0:\n                ans += 1\n                s = -1\n            elif s + a > 0:\n                ans += s + a + 1\n                s = -1\n            else:\n                s = s + a\n        elif plus_flag is False:\n            plus_flag = True\n            if s + a == 0:\n                ans += 1\n                s = 1\n            elif s + a < 0:\n                ans += - (s + a) + 1\n                s = 1\n            else:\n                s = s + a\n    return ans\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\na1=0\nt=0\nfor i in range(n):\n    t+=a[i]\n    if i%2==0:\n        if t<=0:\n            a1+=1-t\n            t=1\n    else:\n        if t>=0:\n            a1+=1+t\n            t=-1\na2=0\nt=0\nfor i in range(n):\n    t+=a[i]\n    if i%2==1:\n        if t<=0:\n            a2+=1-t\n            t=1\n    else:\n        if t>=0:\n            a2+=1+t\n            t=-1\nprint(min(a1,a2))", "n = int(input())\na = list(map(int, input().split()))\n\nans1 = 0\ns1 = 0\nfor i in range(n):\n\ts1 += a[i]\n\tif i % 2 == 0:\n\t\tif s1 <= 0:\n\t\t\tans1 += 1 - s1\n\t\t\ts1 = 1\n\telse:\n\t\tif s1 >= 0:\n\t\t\tans1 += s1 + 1\n\t\t\ts1 = -1\n\nans2 = 0\ns2 = 0\nfor i in range(n):\n\ts2 += a[i]\n\tif i % 2 == 1:\n\t\tif s2 <= 0:\n\t\t\tans2 += 1 - s2\n\t\t\ts2 = 1\n\telse:\n\t\tif s2 >= 0:\n\t\t\tans2 += s2 + 1\n\t\t\ts2 = -1\n\nprint(min(ans1, ans2))", "n=int(input())\na=list(map(int,input().split()))\ncount1=a[0]\ncount2=a[0]\nanswer1=0\nanswer2=0\n\nif a[0]<=0:\n  answer1+=(1-a[0])\n  count1=1\nif a[0]>=0:\n  answer2+=(1+a[0])\n  count2=-1\n    \nfor i in a[1:]:\n  if (count1>0 and count1+i<0) or (count1<0 and count1+i>0):\n    count1+=i\n    continue\n  else:\n    answer1+=abs(count1+i)+1\n    if count1>0:\n      count1=-1\n    else:\n      count1=1\nfor i in a[1:]:\n  if (count2>0 and count2+i<0) or (count2<0 and count2+i>0):\n    count2+=i\n    continue\n  else:\n    answer2+=abs(count2+i)+1\n    if count2>0:\n      count2=-1\n    else:\n      count2=1  \nprint(min(answer1,answer2))", "n = int(input())\n\na = list(map(int,input().split()))\n\nans = 0\nb = 0\nfor i in range(0,n):\n    if i % 2 == 1:\n        if b+a[i] <1:\n            ans += abs(b+a[i])+1\n            b = 1\n        else:\n            b+=a[i]\n    else:\n        if b+a[i] >-1:\n            ans += abs(b+a[i])+1\n            b = -1\n        else:\n            b+=a[i]\nansa= 0\nbb = 0\nfor i in range(n):\n    if i % 2 == 0:\n        if bb+a[i] <1:\n            ansa += abs(bb+a[i])+1\n            bb = 1\n        else:\n            bb+=a[i]\n    else:\n        if bb+a[i] >-1:\n            ansa += abs(bb+a[i])+1\n            bb = -1\n        else:\n            bb+=a[i]\nprint(min(ans,ansa))", "import copy\n\nn = int(input())\na = list(map(int, input().split()))\n# print(a)\n\ndef f(org_a, odd):\n    a = copy.copy(org_a)\n    ans = 0\n    if a[0] == 0:\n        a[0] = 1 if odd else -1\n        ans += 1\n    elif a[0] > 0 and not odd:\n        ans += a[0] + 1\n        a[0] = -1\n    elif a[0] < 0 and odd:\n        ans += -a[0] + 1\n        a[0] = 1\n    current_sum = a[0]\n    for i in range(1, len(a)):\n        move = 0\n        is_positive = current_sum > 0\n        current_sum += a[i]\n        if is_positive and current_sum >= 0:\n            move = -current_sum - 1\n        elif not is_positive and current_sum <= 0:\n            move = -current_sum + 1\n\n        current_sum += move\n        # print(current_sum)\n        a[i] += move\n        ans += abs(move)\n    return ans\n\n# print(a)\nprint((min(f(a, True), f(a, False))))\n", "N = int(input())\nA = list(map(int, input().split()))\n\ntemp = 0\npans = 0\nisp = True\nfor i in range(N):\n    temp += A[i]\n    if isp: \n        if temp <= 0:\n            pans+=-temp+1\n            temp=1\n        elif A[i]==0:\n            pans+=1\n            temp+=1\n    else:\n        if temp>=0:\n            pans+=temp+1\n            temp=-1\n        elif A[i]==0:\n            pans+=1\n            temp-=1\n    isp = not isp\ntemp = 0\nmans = 0\nisp = False\nfor i in range(N):\n    temp += A[i]\n    if isp: \n        if temp <= 0:\n            mans+=-temp+1\n            temp=1\n        elif A[i]==0:\n            mans+=1\n            temp+=1\n    else:\n        if temp>=0:\n            mans+=temp+1\n            temp=-1\n        elif A[i]==0:\n            mans+=1\n            temp-=1\n    isp = not isp\n\nprint(min(pans,mans))", "n = int(input())\nA = [int(i) for i in input().split()]\n\nif A[0]>0:\n    s = A[0]\n    ans1 = 0\nelse:\n    s = 1\n    ans1 = -A[0]+1\n\nfor i in range(1,n):\n    if s*(s+A[i])>=0:\n        ans1 += abs(s+A[i])+1\n        if s>0:     \n            s=-1\n        else:\n            s=1\n    else:   \n        s += A[i]\n                  \nif A[0]<0:        \n    s = A[0]\n    ans2 = 0\nelse:\n    s = -1\n    ans2 = A[0]+1\n                    \nfor i in range(1,n):\n    if s*(s+A[i])>=0:\n        ans2 += abs(s+A[i])+1\n        if s>0:\n            s=-1\n        else:\n            s=1\n    else:   \n        s += A[i]\nprint((min(ans1,ans2)))  \n", "class Bit:\n    def __init__(self, n):\n        \"\"\"\n        :param n: \u6700\u5927\u306e\u8981\u7d20\u6570\n        \"\"\"\n        self.n = n\n        self.tree = [0]*(n+1)\n        self.depth = n.bit_length() - 1\n\n    def sum(self, i):\n        \"\"\" \u533a\u9593[0,i) \u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b \"\"\"\n        s = 0\n        i -= 1\n        while i >= 0:\n            s += self.tree[i]\n            i = (i & (i + 1) )- 1\n        return s\n\n    def built(self, array):\n        \"\"\" array \u3092\u521d\u671f\u5024\u3068\u3059\u308bBIT\u3092\u69cb\u7bc9 \"\"\"\n        for i, a in enumerate(array):\n            self.add(i, a)\n\n    def add(self, i, x):\n        \"\"\" i \u756a\u76ee\u306e\u8981\u7d20\u306b x \u3092\u8db3\u3059 \"\"\"\n        while i < self.n:\n            self.tree[i] += x\n            i |= i + 1\n\n    def get(self, i, j):\n        \"\"\" \u90e8\u5206\u533a\u9593\u548c [i, j) \"\"\"\n        if i == 0:\n            return self.sum(j)\n        return self.sum(j) - self.sum(i)\n\n    def lower_bound(self, x, equal=False):\n        \"\"\"\n        (a0+a1+...+ai < x \u3068\u306a\u308b\u6700\u5927\u306e i (\u5b58\u5728\u3057\u306a\u3044\u6642\u306f -1 ) , \u305d\u306e\u6642\u306e a0+a1+...+ai )\n        a0+a1+...+ai <= x \u3068\u3057\u305f\u3044\u5834\u5408\u306f equal = True\n        \u4e8c\u5206\u63a2\u7d22\u3067\u3042\u308b\u305f\u3081\u3001ai>=0 \u3092\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308b\n        \"\"\"\n        sum_ = 0\n        pos = -1    # 1-indexed \u306e\u6642\u306f pos = 0\n        if not equal:\n            for i in range(self.depth, -1, -1):\n                k = pos + (1 << i)\n                if k < self.n and sum_ + self.tree[k] < x:  # 1-indexed \u306e\u6642\u306f k <= self.n\n                    sum_ += self.tree[k]\n                    pos += 1 << i\n        if equal:\n            for i in range(self.depth, -1, -1):\n                k = pos + (1 << i)\n                if k < self.n and sum_ + self.tree[k] <= x: # 1-indexed \u306e\u6642\u306f k <= self.n\n                    sum_ += self.tree[k]\n                    pos += 1 << i\n        return pos, sum_\n\n    def __getitem__(self, i):\n        \"\"\" [a0, a1, a2, ...] \"\"\"\n        return self.get(i, i+1)\n\n    def __iter__(self):\n        \"\"\" [a0, a1, a2, ...] \"\"\"\n        for i in range(self.n):\n            yield self.get(i, i+1)\n\n    def __str__(self):\n        text1 = \" \".join([\"element:            \"] + list(map(str, self)))\n        text2 = \" \".join([\"cumsum(1-indexed):  \"] + list(str(self.sum(i)) for i in range(1, self.n + 1)))\n        return \"\\n\".join((text1, text2))\n\n###############################################################\ndef solve(sign):\n    B = Bit(N)\n    B.built(A)\n    res = 0\n    for i in range(N):\n        tmp = B.sum(i + 1)\n        if tmp * sign > 0:\n            B.add(i, -1 * sign * (abs(tmp) + 1))\n            res += abs(tmp) + 1\n        elif tmp == 0:\n            B.add(i, -1 * sign)\n            res += 1\n        sign *= -1\n    return res\n\nimport sys\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int, input().split()))\nprint((min(solve(-1), solve(1))))\n", "n=int(input())\na=list(map(int,input().split()))\n\n# s[0]>0\u306e\u3068\u304d\ns=0\nanse=0\nfor i in range(n):\n    s+=a[i]\n    if i%2==0 and s<=0:\n        anse+=1-s\n        s=1\n    elif i%2==1 and s>=0:\n        anse+=s+1\n        s=-1\n\n# s[0]<0\u306e\u3068\u304d\ns=0\nanso=0\nfor i in range(n):\n    s+=a[i]\n    if i%2==0 and s>=0:\n        anso+=s+1\n        s=-1\n    elif i%2==1 and s<=0:\n        anso+=1-s\n        s=1\n\nans=min(anse,anso)\n\nprint(ans)", "n = int(input())\nl = list(map(int, input().split()))\n \nans = 0\n\ndef func(l, pn):\n  ans = 0\n  sum_ = 0\n  for i in range(n):\n    sum_ += l[i]\n    if sum_ >= 0 and pn[i] < 0:\n      ans += sum_+1\n      sum_ = -1\n    elif sum_ <= 0 and pn[i] > 0:\n      ans += -sum_+1\n      sum_ = 1\n    else:\n      continue\n  return ans\n\npn1 = [1 if i%2 == 0 else -1 for i in range(n)]\npn2 = [-1 if i%2 == 0 else 1 for i in range(n)]\n\nprint(min(func(l, pn1), func(l, pn2)))", "n=int(input())\na=list(map(int,input().split()))\ns1=max(1,a[0])\ns2=min(-1,a[0])\nd=[0]*n\np=[0]*n\nd[0]=[0,abs(a[0])+1][a[0]<=0]\np[0]=[0,abs(a[0])+1][a[0]>=0]\nfor i in range(n-1):\n  if s1**2+a[i+1]*s1<0:\n    d[i+1]=d[i]\n    s1+=a[i+1]\n  else:\n    d[i+1]=d[i]+abs(s1+a[i+1])+1\n    s1=[-1,1][s1<0]\n  if s2**2+a[i+1]*s2<0:\n    p[i+1]=p[i]\n    s2+=a[i+1]\n  else:\n    p[i+1]=p[i]+abs(s2+a[i+1])+1\n    s2=[-1,1][s2<0]\nprint(min(d[n-1],p[n-1]))", "N = int(input())\na = list(map(int, input().split()))\nnum = float('inf')\nfor k in [0, 1]:\n    s = 0\n    tmp = 0\n    for i in range(N):\n        s += a[i]\n        if i % 2 == k:\n            if s <= 0:\n                tmp += abs(s) + 1\n                s = 1\n        else:\n            if s >= 0:\n                tmp += abs(s) + 1\n                s = -1\n    num = min(tmp, num)\n\nprint(num)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Feb  9 14:32:30 2019\n\n@author: shinjisu\n\"\"\"\n\n\n# arc 072 c sequence\ndef getInt(): return int(input())\n\n\ndef getIntList(): return [int(x) for x in input().split()]\n\n\ndef db(x):\n    nonlocal debug\n    if debug:\n        print(x)\n\n\ndef count(N, A, initSum):\n    # nonlocal N, A\n    sm = initSum\n    cnt = abs(sm-A[0])\n    db(cnt)\n    for i in range(N-1):\n        nextSum = sm + A[i+1]\n        db((sm, nextSum))\n        if sm > 0 and nextSum >= 0:\n            cnt += abs(nextSum)+1\n            sm = -1\n        elif sm < 0 and nextSum <= 0:\n            cnt += abs(nextSum)+1\n            sm = 1\n        else:\n            sm = nextSum\n        db(cnt)\n    return cnt\n\n\ndef probC():\n    N = getInt()\n    A = getIntList()\n    db((N, A))\n    if A[0] != 0:\n        initSum = A[0]\n    else:\n        initSum = 1\n    cnt1 = count(N, A, initSum)\n    db(('a[0] or +1: ', cnt1))\n    if initSum > 0:\n        cnt2 = count(N, A, -1)\n    else:\n        cnt2 = count(N, A, 1)\n    db(('\u53cd\u5bfe\u7b26\u53f7 or -1: ', cnt2))\n    return min(cnt1, cnt2)\n\n\ndebug = False\nprint((probC()))\n", "N = int(input())\n\nA = list(map(int,input().split()))\n\nif A[0]==0:\n    B = [1,-1]\n    ANS = [1,1]\nelse:\n    B = [A[0],(-1)*(A[0])//abs(A[0])]\n    ANS = [0,abs(A[0])+1]\n\n#print(b)\nfor i in range(len(B)):\n    b = B[i]\n    for a in A[1:]:\n        #print(\"a+b\"+str(a+b))\n        if a+b==0:\n            ANS[i] += 1\n            b = (-1)*(b)//abs(b)\n        elif b*(a+b)<0:\n            b += a\n        else:\n            ANS[i] += abs(a+b)+1\n            #print(\"ans\"+str(ans))\n            b = (-1)*(a+b)//abs(a+b)\n        #print(b)\nprint(min(ANS))", "n=int(input())\nA=list(map(int,input().split()))\n\ns1=0\nnow=0\nfor i in range(n):\n    now+=A[i]\n    if i%2==1 and now<=0:\n        s1+= (1-now)\n        now=1\n    if i%2==0 and now>=0:\n        s1+= now+1\n        now=-1\n\ns2=0\nnow=0\nfor i in range(n):\n    now+=A[i]\n    if i%2==0 and now<=0:\n        s2+= (1-now)\n        now=1\n    if i%2==1 and now>=0:\n        s2+= now+1\n        now=-1\nprint(min(s1,s2))", "N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\n\n\ndef func(A, flag):\n    ans = 0\n    acc = 0\n    for i in range(0, N):\n        acc = acc+A[i]\n        if i % 2 == flag:\n            if acc >= 0:\n                ans += 1+acc\n                acc = -1\n        else:\n            if acc <= 0:\n                ans += 1-acc\n                acc = 1\n    return ans\n\n\nprint((min(func(A, 0), func(A, 1))))\n", "n,*a=map(int,open(0).read().split())\npre1=0\npre2=0\nans1=0\nans2=0\nfor i in range(n):\n    x=(-1)**(i%2)\n    y=-x\n    pre1+=a[i]\n    pre2+=a[i]\n    if x*pre1<=0:\n        ans1+=abs(pre1-x)\n        pre1=x\n    if y*pre2<=0:\n        ans2+=abs(pre2-y)\n        pre2=y\nprint(min(ans1,ans2))", "def main():\n\n    S = list(input())\n    checklist = [0 for i in range(26)]\n    for i in S:\n        checklist[ord(i) - ord(\"a\")] += 1\n    ans = True\n\n    for i in checklist:\n        if i > 1:\n            ans = False\n\n    if not ans:\n        print(-1)\n        return 0\n    else:\n        ans = False\n        for i in range(len(checklist)):\n            if checklist[i] == 0:\n                for i in S:\n                    print(i, end=\"\")\n                print(chr(i + ord(\"a\")), end = \"\")\n                print()\n                ans = True\n                break\n\n        if not ans:\n            new_S = []\n            for i in S:\n                new_S.append(ord(i))\n\n            for i in range(len(new_S) - 1):\n                if new_S[i] > new_S[i + 1]:\n                    for j in range(i - 1):\n                        print(S[j], end = \"\")\n                    print(chr(new_S[i - 1] + 1), end = \"\")\n                    print()\n                    ans = True\n                    break\n\n            if not ans:\n                print(-1)\n#main()\n\ndef ABC069D():\n\n    H, W = map(int, input().split())\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = []\n    for i in range(N):\n        for j in range(a[i]):\n            ans.append(i + 1)\n    printlist = [[0 for i in range(W)] for j in range(H)]\n    k = 0\n    for i in range(H):\n        for j in range(W):\n            printlist[i][j] = ans[k]\n            k += 1\n        if i % 2 != 0:\n            printlist[i] = printlist[i][::-1]\n\n    for i in range(H):\n        for j in range(W):\n            print(printlist[i][j], end = \"\")\n            if j != W:\n                print(\" \", end = \"\")\n        print()\n    print()\n#ABC069D()\n\nimport math\ndef cc(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\ndef ABC057D():\n\n    N, A, B = map(int, input().split())\n    v = list(map(int, input().split()))\n    v = sorted(v)[::-1]\n\n    anslist = []\n    for i in range(A, B + 1):\n\n        anslist.append([sum(v[0:i]) / i, i, v[i - 1]])\n    anslist.sort()\n    anslist = anslist[::-1]\n    ans = anslist[0][0]\n    key = anslist[0][2]\n    long = anslist[0][1]\n    print(ans)\n    for i in range(1, len(anslist)):\n        if anslist[i][0] == anslist[i - 1][0]:\n            ans = anslist[i][0]\n            key = anslist[i][2]\n            long = anslist[i][1]\n        else:\n            break\n    #print(anslist)\n    #print(ans, key, long)\n    cnt = 0\n    for i in v:\n        if i == key:\n            cnt += 1\n\n    c = 0\n    for i in v[:long]:\n        #print(i)\n        if i == key:\n            c += 1\n    #print(c, long)\n    ans = 0\n    if c == long:\n        for i in range(A,  min(B + 1, cnt + 1)):\n            ans += cc(cnt, i)\n    else:\n        ans = cc(cnt, c)\n    #print(anslist)\n    #print(cnt, c, long)\n    print(ans)\n#ABC057D()\n\ndef ABC104D():\n    S = list(input())\n    A_cnt = 0\n    B_cnt = 0\n    C_cnt = 0\n    Q_cnt = 0\n    ans = 0\n    for i in S:\n        if i == \"A\":\n            A_cnt += 1\n        elif i == \"B\":\n            B_cnt += 1\n        elif i == \"C\":\n            C_cnt += 1\n        else:\n            Q_cnt += 1\n    for i in range(Q_cnt + 1):\n        for j in range(Q_cnt - i + 1):\n            k = Q_cnt - i - j\n            if A_cnt + i > 0 and B_cnt + j > 0 and C_cnt + k > 0:\n                f_i = math.factorial(i)\n                f_j = math.factorial(j)\n                f_k = math.factorial(k)\n                if f_i == 0:\n                    f_i = 1\n                if f_j == 0:\n                    f_j = 1\n                if f_k == 0:\n                    f_k = 1\n                ans += (A_cnt + i) * (B_cnt + j) * (C_cnt + k) * math.factorial(Q_cnt) // f_i // f_j // f_k\n                print(ans, i, j, k, A_cnt + i, B_cnt + j, C_cnt + k)\n                print(math.factorial(Q_cnt), f_i, f_j, f_k)\n    print(ans)\n#ABC104D()\n\ndef ARC082D():\n    N = int(input())\n    p = list(map(int, input().split()))\n    cnt = 0\n    if p[N - 1] == N:\n        #print(p[N - 1], N)\n        p[-2], p[-1] = p[-1], p[-2]\n        cnt += 1\n\n    for i in range(N - 1):\n        if p[i] == i + 1:\n            p[i], p[i + 1] = p[i + 1], p[i]\n            cnt += 1\n    print(cnt)\n#ARC082D()\n\nfrom queue import Queue\ndef ABC070D():\n    N = int(input())\n    a, b, c =map(int, input().split())\n    Q, K = map(int, input().split())\n    xy = [list(map(int, input().split())) for i in range(Q)]\n    x = [[] for i in range(N)]\n    for i, j in xy:\n        x[i - 1].append(j - 1)\n        x[j - 1].append(i - 1)\n\n    q = Queue()\n    visited = [0 for i in range(N)]\n\ndef ABC076D():\n    N = int(input())\n    t = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    speed_lim = [0]\n    speed_list = [0 for i in range(sum(t) + 1)]\n    for i in range(N):\n        for j in range(t[i]):\n            speed_lim.append(v[i])\n    print(speed_lim)\n    for i in range(1, sum(t) + 1):\n        speed_list[i] = speed_list[i - 1] + 1\n        if speed_list[i] > speed_lim[i]:\n            speed_list[i] = speed_lim[i]\n    print(speed_list)\n    speed_list[-1] = 0\n    for i in range(sum(t) - 1, -1, -1):\n        speed_list[i] = min(speed_list[i + 1] + 1, speed_list[i])\n        if speed_list[i] > speed_lim[i + 1]:\n            speed_list[i] = speed_lim[i + 1]\n    print(speed_list)\n    ans = 0\n    for i in speed_list:\n        ans += i\n\n    print(ans)\n#ABC076D()\n\ndef ABC085D():\n    N, H = map(int, input().split())\n    ab = [list(map(int, input().split())) for i in range(N)]\n    a = []\n    b = []\n    for i, j in ab:\n        a.append(i)\n        b.append(j)\n    a.sort()\n    b.sort()\n    a = a[::-1]\n    b = b[::-1]\n    damage = 0\n    cnt = 0\n    for i in b:\n        if i < a[0]:\n            break\n        damage += i\n        cnt += 1\n        if damage >= H:\n            break\n    key = 0\n    if damage < H:\n        key = (H - damage) / a[0]\n        if int(key) != key:\n            key += 1\n        key = int(key)\n\n    cnt += key\n\n    print(cnt)\n#ABC085D()\n\ndef ARC068D():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    count_list = []\n    cnt = 1\n    #print(A)\n    for i in range(1, N):\n        if A[i] == A[i - 1]:\n            cnt += 1\n        else:\n            count_list.append(cnt)\n            cnt = 1\n    count_list.append(cnt)\n    ans_cnt = 0\n    #print(count_list)\n    for i in range(len(count_list)):\n        if count_list[i] > 2:\n            ans_cnt += (count_list[i] % 2) - 1\n            count_list[i] %= 2\n            if count_list[i] == 0:\n                count_list[i] = 2\n    #print(ans_cnt)\n    count_list = sorted(count_list)[::-1]\n    for i in range(len(count_list) - 1):\n        if count_list[i] == 2 and count_list[i + 1] == 2:\n            ans_cnt += 1\n            count_list[i] = 1\n            count_list[i + 1] = 1\n    count_list = sorted(count_list)[::-1]\n    if count_list[0] == 2:\n        count_list[0] = 0\n    #print(ans_cnt)\n    #print(count_list)\n    print(sum(count_list))\n#ARC068D()\n\ndef ARC073D():\n    N, W = map(int, input().split())\n    wv = [list(map(int, input().split())) for i in range(N)]\n    wv.sort()\n    count_list = []\n    cnt = 1\n    weight_list = []\n    s = 0\n    g = 0\n    for i in range(N - 1):\n        if wv[i][0] != wv[i + 1][0]:\n            g = i\n            count_list.append(cnt)\n            weight_list.append([wv[i][0], s, g, cnt])\n            s = i + 1\n            g = i + 1\n            cnt = 1\n        else:\n            g = i\n            cnt += 1\n\n    count_list.append(cnt)\n    weight_list.append([wv[-1][0], s, g, cnt])\n    print(weight_list)\n    wl = []\n    for i in weight_list:\n        this_weight = i[0]\n        this_list = []\n        for j in wv[i[1]:i[2] + 1]:\n            this_list.append(j[1])\n        this_list = sorted(this_list)[::-1]\n        print(this_list)\n        wl.append([this_weight, this_list])\n\ndef ARC081D():\n    pattern = []\n    N = int(input())\n    S1 = list(input())\n    S2 = list(input())\n    i = 0\n    while i < N:\n        if S1[i] == S2[i]:\n            pattern.append(\"X\")\n        else:\n            pattern.append(\"Y\")\n            i += 1\n        i += 1\n    ans_list = []\n    for i in range(len(pattern)):\n        if i == 0:\n            if pattern[i] == \"X\":\n                ans_list.append(3)\n            else:\n                ans_list.append(6)\n        else:\n            if pattern[i] == \"X\":\n                if pattern[i - 1] == \"X\":\n                    ans_list.append(2)\n                else:\n                    ans_list.append(1)\n            elif pattern[i] == \"Y\":\n                if pattern[i - 1] == \"X\":\n                    ans_list.append(2)\n                elif pattern[i - 1] == \"Y\":\n                    ans_list.append(3)\n    #print(pattern)\n    #print(ans_list)\n    ans = 1\n    for i in ans_list:\n        ans *= i\n    print(ans % (1000000007))\n#ARC081D()\n\ndef ARC090D():\n    N, M = map(int, input().split())\n    LRD = [list(map(int, input().split())) for i in range(M)]\n    L = []\n    R = []\n    D = []\n    LRD.sort()\n    root = [[] for i in range(N)]\n    for i, j, k in LRD:\n        L.append(i)\n        R.append(j)\n        D.append(k)\n        root[i - 1].append(j - 1)\n    print(root)\n#ARC090D()\n\ndef ABC073D():\n    N, M, R = map(int, input().split())\n    r = list(map(int, input().split()))\n    ABC = [list(map(int, input().split())) for i in range(M)]\n    root = [[1000000000 for i in range(N)] for j in range(N)]\n    for i, j, k in ABC:\n        root[i - 1][j - 1] = k\n        root[j - 1][i - 1] = k\n\n    import itertools\n    def kumiawase(list_name):  # list_name(\u30ea\u30b9\u30c8)\u306e\u3059\u3079\u3066\u306e\u4e26\u3073\u66ff\u3048\n        return itertools.permutations(list_name)\n\n    #for i in range(N):\n     #   for j in range(N):\n      #      for k in range(N):\n       #         if root[i][j] > root[i][k] + root[k][j]:\n        #            root[i][j] = root[i][k] + root[k][j]\n\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if root[N - i - 1][N - j - 1] > root[N - i - 1][N - k - 1] + root[N - k - 1][N - j - 1]:\n                    root[N - i - 1][N - j - 1] = root[N - i - 1][N - k - 1] + root[N - k- 1][N - j - 1]\n\n    a = kumiawase(r)\n    ans = float(\"inf\")\n    for i in a:\n        key = 0\n        for j in range(len(i) - 1):\n            key += root[i[j] - 1][i[j + 1] - 1]\n        if ans > key:\n            ans = int(key)\n    #print(root)\n    print(ans)\n#ABC073D()\n\ndef ARC061D():\n    H, W, N = map(int, input().split())\n    ab = [list(map(int, input().split())) for i in range(N)]\n    ab.sort()\n    tmp_list = []\n    ans_list = [0 for i in range(10)]\n    for x, y, in ab:\n        for i in range(x - 3, x):\n            for j in range(y - 3, y):\n                if 0 <= i < H - 2 and 0 <= j < W - 2:\n                    #print(x, y, i, j)\n                    tmp_list.append([i, j])\n    #print(tmp_list)\n    tmp_list.sort()\n    temp = 1\n    #print(tmp_list)\n    cnt = 0\n    for i in range(1, len(tmp_list) + 1):\n        if i != len(tmp_list):\n            if tmp_list[i] == tmp_list[i - 1]:\n                temp += 1\n            else:\n                ans_list[temp] += 1\n                temp = 1\n                cnt += 1\n        else:\n            ans_list[temp] += 1\n            cnt += 1\n    #print(ans_list)\n\n    key = 0\n    for i in range(len(ans_list)):\n        key += i * ans_list[i]\n    ans_list[0] = (H - 2) * (W - 2) - cnt\n    #print(key)\n    #print((H - 2) * (W - 2) - key)\n\n    for i in range(10):\n        print(ans_list[i])\n#ARC061D()\n\nfrom scipy.sparse import csgraph\n#root = csgraph.floyd_warshall(root)\n\ndef ABC079D():\n    H, W = map(int, input().split())\n    c = [list(map(int, input().split())) for i in range(10)]\n    A = [list(map(int, input().split())) for i in range(H)]\n    #c = csgraph.floyd_warshall(c, False)\n    for k in range(10):\n        for i in range(10):\n            for j in range(10):\n                c[i][j] = min(c[i][j], c[i][k] + c[k][j])\n    #print(c)\n    ans = 0\n    for i in A:\n        for j in i:\n            if j != -1 and j != 1:\n                ans += c[j][1]\n                #print(c[j][1], j)\n    print(int(ans))\n#ABC079D()\n\nimport fractions\ndef lcm(x, y):\n    return (x * y) // fractions.gcd(x, y)\n\ndef AGC028A():\n    N, M = map(int, input().split())\n    S = input()\n    T = input()\n\n    key = lcm(N, M)\n    n = key // N\n    m = key // M\n    n_list = []\n    for i in range(0, key, n):\n        n_list.append(i)\n    m_list = []\n    for j in range(0, key, m):\n        m_list.append(j)\n\n    #print(n_list, m_list)\n    i = 0\n    j = 0\n    while True:\n        if i >= len(n_list) or j >= len(m_list):\n            break\n        if i >= len(S) or j >= len(T):\n            break\n        if n_list[i] == m_list[j]:\n            if S[i] != T[j]:\n                print(-1)\n                return 0\n        if n_list[i] > m_list[j]:\n            j += 1\n        elif n_list[i] < m_list[j]:\n            i += 1\n        else:\n            i += 1\n            j += 1\n    print(key)\n#AGC028A()\n\nimport math\ndef AGC028B():\n    N = int(input())\n\n    A = list(map(int, input().split()))\n    import copy\n    a = copy.deepcopy(A)\n    for i in range(1, N):\n        A[i] += A[i - 1]\n    ans = 0\n    for i in range(1, N):\n        key = A[i] * 2 - A[0] - (A[i] - A[i - 1])\n        ans += math.factorial(N - i) * i * key\n        #print(key)\n    print(ans)\n    A = copy.deepcopy(a[::-1])\n    for i in range(1, N):\n        A[i] += A[i - 1]\n    print(A)\n    for i in range(1, N):\n        key = A[i] * 2 - A[0] - (A[i] - A[i - 1])\n        ans += math.factorial(N - i) * i * key\n        #print(key)\n    ans += A[N - 1] * math.factorial(N - 1)\n\n    print(ans)\n#AGC028B()\n\ndef AGC028B2():\n    N = int(input())\n\n    A = list(map(int, input().split()))\n    import copy\n    a = copy.deepcopy(A)\n    for i in range(1, N):\n        A[i] += A[i - 1]\n    ans = 0\n    for i in range(1, N):\n        A[i] = A[i] * (i + 1) - A[i - 1]\n    for i in range(1, N):\n        ans += math.factorial(N - i) * i * A[i - 1]\n\n    print(ans)\n    ans += A[N - 1] * N\n\n    print(ans)\n#AGC028B2()\n\ndef CF18QBA():\n    N = int(input())\n    print(100 - 100 // N)\n#CF18QBA()\n\ndef CF18QBB():\n    N, X = map(int, input().split())\n    ab = [list(map(int, input().split())) for i in range(N)]\n    key = ab[0][1]\n    ans = 0\n    for i, j in ab:\n        if j > key:\n            key = j\n            key2 = i\n        ans += i * j\n    ans += key * X\n    print(ans)\n#CF18QBB()\n\ndef CF18QBC():\n    N = int(input())\n    ans_list = [[0 for i in range(N)] for j in range(N)]\n    key1 = 1\n    key2 = key1\n    for i in range(N):\n        #print(key2)\n        for j in range(N):\n            if key2 == j:\n                ans_list[i][j] = 1\n                key2 += 5\n        if key1 == 1:\n            key1 = 3\n        elif key1 == 3:\n            key1 = 0\n        elif key1 == 0:\n            key1 = 2\n        elif key1 == 2:\n            key1 = 4\n        elif key1 == 4:\n            key1 = 1\n        key2 = key1\n    cnt = 0\n    for i in range(N):\n        for j in range(N):\n            OK = 0\n            if i > 0:\n                if ans_list[i - 1][j] == 1:\n                    OK = 1\n            if i < N - 1:\n                if ans_list[i + 1][j] == 1:\n                    OK = 1\n            if j > 0:\n                if ans_list[i][j - 1] == 1:\n                    OK = 1\n            if j < N - 1:\n                if ans_list[i][j + 1] == 1:\n                    OK = 1\n            if OK == 0:\n                #cnt += 1\n                ans_list[i][j] = 1\n                1\n\n    for i in ans_list:\n        for j in i:\n            if j == 0:\n                print(\".\", end = \"\")\n            if j == 1:\n                print(\"X\", end = \"\")\n                cnt += 1\n        print()\n#CF18QBC()\n\ndef CF18QBE():\n    N = int(input())\n    ans = 10000\n    tmp_list = []\n    key = 69720375229712477164533808935312303556800\n    for i in range(1, N + 1):\n        tmp_list.append([key // i, i])\n    ans = tmp_list[0][0]\n    cnt = 0\n    ans_list = []\n    ans_list.append([\"+\", 1])\n    key = []\n    while True:\n        if ans < 1 / N:\n            print(1)\n            break\n        if cnt >= 320:\n            print(2)\n            break\n        #print(ans)\n        #print(tmp_list)\n        for i in range(len(tmp_list)):\n            if tmp_list[i][0] < ans:\n                key = tmp_list[i]\n        if key:\n            ans_list.append([\"-\", key[1]])\n        if key:\n            ans -= key[0]\n        #print(ans)\n        key = []\n        cnt += 1\n    #print(ans_list)\n    print(len(ans_list))\n    for i, j in ans_list:\n        print(i, j)\n#CF18QBE()\n\ndef niconicoB():\n    N, C = map(int, input().split())\n    L = [int(input()) for i in range(N)]\n    L.sort()\n    cnt = 0\n    while len(L) > 0:\n        if len(L) == 1:\n            cnt += 1\n            break\n        if L[-1] + L[0] + 1 <= C:\n            cnt += 1\n            del L[0]\n            del L[-1]\n        else:\n            cnt += 1\n            del L[-1]\n    print(cnt)\n#niconicoB()\n\ndef ABC064D():\n    N = int(input())\n    S = list(input())\n    cnt = 0\n    start = 0\n    for i in S:\n        if i == \"(\":\n            cnt += 1\n        elif i == \")\":\n            cnt -= 1\n        if cnt < 0:\n            start += 1\n            cnt += 1\n    tmp = []\n    for i in range(start):\n        tmp.append(\"(\")\n    S = tmp + S\n    cnt_start = 0\n    cnt_end = 0\n    for i in S:\n        if i == \"(\":\n            cnt_start += 1\n        elif i == \")\":\n            cnt_end += 1\n    tmp = []\n    for i in range(cnt_start - cnt_end):\n        tmp.append(\")\")\n    S = S + tmp\n\n    for i in S:\n        print(i, end = \"\")\n    print()\n#ABC064D()\n\nfrom operator import itemgetter\n\ndef ARC072C():\n    N = int(input())\n    a = list(map(int, input().split()))\n    cnt1 = 0\n    cnt2 = 0\n    sum1 = a[0]\n    sum2 = a[0]\n    if sum1 <= 0:\n        cnt1 = 1 - a[0]\n        sum1 = 1\n    if sum2 >= 0:\n        cnt2 = abs(-1 - a[0])\n        sum2 = -1\n    j = 1\n    #print(sum1, sum2)\n    for i in range(1, N):\n        sum1 += a[i]\n        sum2 += a[i]\n        if j % 2 == 0:\n            if sum1 <= 0:\n                cnt1 += 1 - sum1\n                sum1 = 1\n            if sum2 >= 0:\n                cnt2 += abs(-1 - sum2)\n                sum2 = -1\n        else:\n            if sum1 >= 0:\n                cnt1 += abs(-1 - sum1)\n                sum1 = -1\n            if sum2 <= 0:\n                cnt2 += 1 - sum2\n                sum2 = 1\n        j += 1\n        #print(sum1, sum2)\n    #print(cnt1, cnt2)\n    print(min(cnt1, cnt2))\nARC072C()\n\n", "n=int(input())\na=list(map(int,input().split()))\np=[1,-1]\nj=[-1,1]\nc=0\nl=0\nd=0\ne=0\nfor i in range(n):\n    s=i%2\n    c+=a[i]\n    l+=a[i]\n    if p[s]*c<=0:\n        d+=abs(c-p[s])\n        c=p[s]\n    if j[s]*l<=0:\n        e+=abs(l-j[s])\n        l=j[s] \nprint((min(e,d)))\n#####################################################\n", "import sys\n\n\ndef func(alst, sign):\n  cur, res = 0, 0\n  for i in alst:\n    cur += i\n    if sign and cur <= 0:\n      res += abs(cur) + 1\n      cur = 1\n    elif not sign and cur >= 0:\n      res += abs(cur) + 1\n      cur = -1\n    sign = not sign\n  return res\n\n\ndef main():\n  n, *alst = map(int, sys.stdin.read().split())\n  print(min(func(alst, True), func(alst, False)))\n\n\ndef __starting_point():\n  main()\n__starting_point()", "n = int(input())\nA = [int(i) for i in input().split()]\nct_1 = 0\nct_2 = 0\naa = 0\n\nj = 1\nfor i in range(n):\n    if (aa + A[i]) * j <= 0:\n        ct_1 += abs(aa + A[i]) + 1\n        aa = j\n    else:\n        aa += A[i]\n    j *= -1\n\naa = 0\nj = -1\nfor i in range(n):\n    if (aa + A[i]) * j <= 0:\n        ct_2 += abs(aa + A[i]) + 1\n        aa = j\n    else:\n        aa += A[i]\n    j *= -1\n\nprint((min(ct_1, ct_2)))\n", "def solve(ini_val):\n    acc, cnt = 0, 0\n    for ai in a:\n        acc += ai\n        if acc * ini_val < 1:\n            cnt += abs(ini_val - acc)\n            acc += ini_val - acc\n        ini_val *= -1\n    return cnt\n\nn = int(input())\na = list(map(int, input().split()))\nprint((min(solve(1), solve(-1))))\n", "def main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    s = 0\n    c1 = 0\n    for i, a in enumerate(A):\n        s += a\n        if i % 2 == 0:\n            if s == 0:\n                c1 += 1\n            elif s < 0:\n                c1 += 1 - s\n            else:\n                continue\n            s = 1\n        else:\n            if s == 0:\n                c1 += 1\n            elif s > 0:\n                c1 += s + 1\n            else:\n                continue\n            s = -1\n    s = 0\n    c2 = 0\n    for i, a in enumerate(A):\n        s += a\n        if i % 2 != 0:\n            if s == 0:\n                c2 += 1\n            elif s < 0:\n                c2 += 1 - s\n            else:\n                continue\n            s = 1\n        else:\n            if s == 0:\n                c2 += 1\n            elif s > 0:\n                c2 += s + 1\n            else:\n                continue\n            s = -1\n    print((min(c1, c2)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# -*- coding: utf-8 -*-\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nret = [0,0]\nsum = [0,0]\n\nif a[0]==0:\n    sum[0] = 1\n    ret[0] = 1\n    sum[1] = -1\n    ret[1] = 1\nelif a[0]>0:\n    sum[0] = a[0]\n    sum[1] = -1\n    ret[1] = a[0]+1\nelse:\n    sum[0] = 1\n    ret[0] = -1*a[0]+1\n    sum[1] = a[0]\n\nfor i in range(1,n):\n    for j in range(2):\n        if sum[j]*(sum[j]+a[i])<0:\n            sum[j] += a[i]\n        elif sum[j]+a[i]==0:\n            if sum[j]>0:\n                sum[j] = -1\n            else:\n                sum[j] = 1\n            ret[j] += 1\n        elif sum[j]+a[i]>0:\n            ret[j] += sum[j]+a[i]+1\n            sum[j] = -1\n        else:\n            ret[j] += -1*(sum[j]+a[i])+1\n            sum[j] = 1\n\nprint((min(ret[0],ret[1])))\n", "n = int(input())\na = [ int(x) for x in input().split() ]\n\nans1, ans2 = 0, 0\nsum_v = 0\n\n# \u6700\u521d\u304c\u8ca0\u306e\u6642\nfor i in range(len(a)):\n    sum_v += a[i]\n    # sumv := minus\n    if i % 2 == 0:\n        if sum_v >= 0:\n            ans1 += abs(sum_v)+1\n            sum_v = -1\n    # sumv := plus\n    else:\n        if sum_v <= 0:\n            ans1 += abs(sum_v)+1\n            sum_v = 1\n\nsum_v = 0\n\n# \u6700\u521d\u304cplus\nfor i in range(len(a)):\n    sum_v += a[i]\n    # sumv := minus\n    if i % 2 == 0:\n        if sum_v <= 0:\n            ans2 += abs(sum_v)+1\n            sum_v = 1\n    # sumv := plus\n    else:\n        if sum_v >= 0:\n            ans2 += abs(sum_v)+1\n            sum_v = -1\n\nprint((min(ans1, ans2)))\n", "# ARC072C - Sequence (ABC059C)\ndef main():\n    n = int(input())\n    lst = list(map(int, input().rstrip().split()))\n    # start with positive number\n    cur, cnt_1 = 0, 0\n    for i, j in enumerate(lst):\n        new = cur + j\n        if i % 2 == 0 and new <= 0:\n            cnt_1 += abs(new) + 1\n            cur = 1\n        elif i % 2 == 1 and new >= 0:\n            cnt_1 += abs(new) + 1\n            cur = -1\n        else:\n            cur = new\n\n    # start with negative number\n    cur, cnt_2 = 0, 0\n    for i, j in enumerate(lst):\n        new = cur + j\n        if i % 2 == 0 and new >= 0:\n            cnt_2 += abs(new) + 1\n            cur = -1\n        elif i % 2 == 1 and new <= 0:\n            cnt_2 += abs(new) + 1\n            cur = 1\n        else:\n            cur = new\n    print(min(cnt_1, cnt_2))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "_ = int(input())\nA = list(map(int, input().split()))\n\nret = float('inf')\n\nsign = 1\ns = 0\nk = 0\nfor a in A:\n    if sign * (s + a) > 0:\n        s += a\n    else:\n        k += abs(s + a) + 1\n        s = sign\n    sign *= -1\nret = min(ret, k)\n\nsign = -1\ns = 0\nk = 0\nfor a in A:\n    if sign * (s + a) > 0:\n        s += a\n    else:\n        k += abs(s + a) + 1\n        s = sign\n    sign *= -1\n\nret = min(ret, k)\n\n\nprint(ret)\n", "n = int(input())\n\narr = [int(x) for x in input().split(\" \")]\n\nans = 0\n\nsum = 0\n\ncurr = True\n\nfor i in range(len(arr)):\n    if ((sum + arr[i]) == 0 or ((sum + arr[i]) > 0) == curr):\n        if curr:\n            temp = -1 - sum\n        else:\n            temp = 1 - sum\n        ans += abs(temp - arr[i])\n        sum += temp\n    else:\n        sum += arr[i]\n    curr = not curr\n\nans1 = 0\n\ncurr = False\n\nsum = 0\n\nfor i in range(len(arr)):\n    if ((sum + arr[i]) == 0 or ((sum + arr[i]) > 0) == curr):\n        if curr:\n            temp = -1 - sum\n        else:\n            temp = 1 - sum\n        ans1 += abs(temp - arr[i])\n        sum += temp\n    else:\n        sum += arr[i]\n    curr = not curr\n\nprint(min(ans,ans1))", "def osilate(seq):\n    flag = 1\n    acc = 0\n    ans = 0\n    #while loop O(n)\n    for i in range(len(seq)):\n        a = seq[i]\n        acc += a\n        flag = i%2\n\n        if flag == 0:\n            if acc <= 0:\n                ans += 1-acc\n                acc = 1\n        if flag == 1:\n            if acc >= 0:\n                ans += 1+acc\n                acc = -1\n        #print(seq, acc, acc)\n        flag = flag * (-1)\n    return ans\n\nn = int(input()) #(1)\nseq = [int(i) for i in input().split()] #O(N)\n\nseq_rev = [-i for i in seq]  # O(N)\nprint((min(osilate(seq),osilate(seq_rev)))) #O(2N)\n", "N = int(input())\nA = list(map(int, input().split()))\n\n# even is +\nnow = 0\neven_count = 0\nfor i, a in enumerate(A):\n    now += a\n    if i % 2 == 0 and now <= 0:\n        even_count += 1 - now\n        now = 1\n    elif i % 2 == 1 and now >= 0:\n        even_count += abs(-1 - now)\n        now = -1\n\n# odd is +\nnow = 0\nodd_count = 0\nfor i, a in enumerate(A):\n    now += a\n    if i % 2 == 0 and now >= 0:\n        odd_count += abs(-1 - now)\n        now = -1\n    elif i % 2 == 1 and now <= 0:\n        odd_count += 1 - now\n        now = 1\nprint((min(even_count, odd_count)))\n", "\nN = int(input())\na = list(map(int,input().split()))\n# >0\nr = 0\nres = 0\nfor i in range(N):\n    sa = 0\n    r += a[i]\n    if i%2==0:\n        if r <= 0:\n            sa = 1-r\n            r += sa\n    else:\n        if r >= 0:\n            sa = r+1\n            r -= sa\n    res += sa\n\n# <0\nr = 0\nres2 = 0\nfor i in range(N):\n    sa = 0\n    r += a[i]\n    if i%2==1:\n        if r <= 0:\n            sa = 1-r\n            r += sa\n    else:\n        if r >= 0:\n            sa = r+1\n            r -= sa\n    res2 += sa\nprint((min(res,res2)))\n", "n=input()\na=[int(i) for i in input().split()]\ndef chk(a,t):\n    ans=0\n    x=0\n    for i in a:\n        x+=i\n        if t==True and x<1:\n            ans+=1-x\n            x=1\n        elif t==False and x>-1:\n            ans+=x+1\n            x=-1\n        t=not t\n    return ans\nprint(min(chk(a,True),chk(a,False)))", "import sys\n\nsys.setrecursionlimit(10 ** 6)\n_ = int(input())\nA = list(map(int, input().split()))\n\n\ndef solve(i, s, k, sign):\n    if i >= len(A):\n        return k\n\n    if sign * (s + A[i]) > 0:\n        return solve(i + 1, s + A[i], k, sign * -1)\n    else:\n        return solve(i + 1, sign, k + abs(s + A[i]) + 1, sign * -1)\n\n\nprint((min(solve(0, 0, 0, 1), solve(0, 0, 0, -1))))\n", "N=int(input())\nA=[int(i) for i in input().split()]\nans=0\n#i%2\u304c\u6b63\ns=0\nfor i in range(N):\n    s+=A[i]\n    if i%2==0:\n        if s<=0:\n            ans+=1-s\n            s=1\n    else:\n        if s>=0:\n            ans+=s+1\n            s=-1\n    #print(s,ans)\nnums=0\ns=0\nfor i in range(N):\n    s+=A[i]\n    if i%2!=0:\n        if s<=0:\n            nums+=1-s\n            s=1\n    else:\n        if s>=0:\n            nums+=s+1\n            s=-1\n    #print(s,nums)\nprint(min(nums,ans))", "n = int(input())\na = list(map(int, input().split()))\nif a[0] == 0:\n    ans1 = 1\n    tmp = 1\nelse:\n    ans1 = 0\n    tmp = a[0]\nis_plus = tmp > 0\nfor i in range(1, n):\n    tmp += a[i]\n    if is_plus == (tmp > 0):\n        ans1 += abs(tmp) + 1\n        if is_plus:\n            tmp = -1\n        else:\n            tmp = 1\n        is_plus = tmp > 0\n    else:\n        is_plus = tmp > 0\n\nans2 = abs(a[0]) + 1\nif a[0] == 0:\n    ans2 = 1\n    tmp = -1\nelse:\n    ans2 = abs(a[0]) + 1\n    tmp = -a[0] // abs(a[0])\nis_plus = tmp > 0\nfor i in range(1, n):\n    tmp += a[i]\n    if is_plus == (tmp > 0):\n        ans2 += abs(tmp) + 1\n        if is_plus:\n            tmp = -1\n        else:\n            tmp = 1\n        is_plus = tmp > 0\n    else:\n        is_plus = tmp > 0\n\nprint((min(ans1, ans2)))\n"]