["import sys\ninput = sys.stdin.readline\n\nT = int(input())\nfor _ in range(T):\n    h, c, t = list(map(int, input().split()))\n    if h + c >= 2 * t:\n        print(2)\n    else:\n        diff2 = 2*t - (h + c)\n        hDiff2 = 2*h - (h + c)\n\n        kDown = (hDiff2//diff2 - 1)//2\n        kUp = kDown + 1\n        diffDown = abs(diff2 - hDiff2/(2 * kDown + 1))\n        diffUp = abs(diff2 - hDiff2/(2 * kUp + 1))\n        if diffDown <= diffUp:\n            print(2 * kDown + 1)\n        else:\n            print(2 * kDown + 3)\n", "from fractions import Fraction as F\n\ndef solve():\n    h, c, t = map(int, input().split())\n    dt = abs(F(h - t))\n    ans = 1\n    def update(u, v):\n        nonlocal dt, ans\n        if u <= 0 or v < 0:\n            return\n        w = F(u * h + v * c, u + v)\n        if abs(w - t) < dt:\n            dt = abs(w - t)\n            ans = u + v\n    update(1, 1)\n    ax = (h - t) // (2 * t - h - c) if 2 * t - h - c else 0\n    for x in range(ax - 3, ax + 4):\n        update(x + 1, x)\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "from sys import stdin\ninput = stdin.readline\nq = int(input())\nfor _ in range(q):\n\th,c,t = map(int,input().split())\n\tif 2*t <= h+c:\n\t\tprint(2)\n\telse:\n\t\tt*=2\n\t\th*=2\n\t\tc*=2\n\t\tw = h//2-c//2\n\t\tpod = (h+c)//2\n\t\t#w/(2k+1) jak najblizej t-pod\n\t\tgoal = t-pod\n\t\tif goal == 0:\n\t\t\tprint(1)\n\t\telse:\n\t\t\tx = w//goal\n\t\t\twynik = 2\n\t\t\tmini = 23649823847238\n\t\t\tfor szkl in range(x-3,x+4):\n\t\t\t\tif szkl%2 == 1 and szkl >= 1 and abs(goal-w/szkl) < mini:\n\t\t\t\t\tmini = abs(goal-w/szkl)\n\t\t\t\t\twynik = szkl\n\t\t\tprint(wynik)", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\ntt = read_int()\nfor case_num in range(tt):\n    h, c, t = read_ints()\n    if 2 * t <= h + c:\n        print(2)\n        continue\n    l = 1\n    r = int(1e7)\n\n    def calc(x): return x * h + (x - 1) * c\n    while l <= r:\n        mid = (l + r) // 2\n        temp = calc(mid)\n        if temp >= t * (2 * mid - 1):\n            l = mid + 1\n        else:\n            r = mid - 1\n    a = calc(l - 1)\n    b = calc(l)\n    p = 2 * l - 3\n    q = 2 * l - 1\n    if abs(a * q - t * p * q) <= abs(b * p - t * p * q):\n        print(p)\n    else:\n        print(q)\n", "t = int(input())\n\nfor _ in range(t):\n    h, c, g = [int(x) for x in input().split()]\n    av = (h + c)/2\n    if g == h:\n        print(1)\n    elif g <= av + 0.001:\n        print(2)\n    else:\n        # after 2n+1 pours (n = 0, 1, ...) we have a temp of ((n+1)*h + n*c)/(2*n+1) = g,\n        # so we have n*(h+c) + h = g*(2*n+1),\n        # or n*(h+c) + h = g*2*n + g\n        # or n*(h+c-g*2) = g - h\n        # or n ~= (g-h)/(h+c-g*2)\n        n = int((g-h)/(h+c-g*2))\n        best_n = -1\n        for j in range(max(n-3, 0), n+3):\n            if best_n == -1 or \\\n                    abs(((best_n + 1)*h + best_n*c) - (2*best_n+1)*g)*(2*j+1) > \\\n                    abs(((j + 1)*h + j*c) - g*(2*j+1))*(2*best_n+1):\n                best_n = j\n        print(2*best_n+1)\n", "import sys\n\ninput = sys.stdin.readline\nflush = sys.stdout.flush\n\nfor _ in range(int(input())):\n    h, c, t = list(map(int, input().split()))\n    m = h + c >> 1\n    if t <= m:\n        print(2)\n        continue\n    a = (h - t) // (2*t - h - c)\n    b = a + 1\n    print(2*a + 1 if 2*t*(2*a+1)*(2*b+1) >= (2*b+1)*((a+1)*h+a*c)+(2*a+1)*((b+1)*h+b*c) else 2 * b + 1)\n", "T = int(input())\nfor _ in range(T):\n    h, c, t = list(map(int, input().split()))\n    if h + c >= t * 2:\n        print(2)\n    else:\n        l, r = 0, 10 ** 9\n        while r - l > 1:\n            m = (l + r) // 2\n            if h * (m + 1) + c * m >= t * (2 * m + 1):\n                l = m\n            else:\n                r = m\n        if (2 * l + 1) * ((2 * r + 1) * t - (h * (r + 1) + c * r)) >= (2 * r + 1) * (h * (l + 1) + c * l - (2 * l + 1) * t):\n            print(l * 2 + 1)\n        else:\n            print(r * 2 + 1)\n", "from fractions import Fraction\n\nT = int(input())\n\n\ndef TMP(h, c, nbH):\n    return c + Fraction(nbH, 2*nbH-1) * (h-c)\n\n\nfor _ in range(T):\n    h, c, t = [int(_) for _ in input().split()]\n    if t <= (h+c)//2:\n        print(2)\n        continue\n    L, R = 1, 10**9\n    a = 0\n    while L <= R:\n        m = (L+R)//2\n        tmp = TMP(h, c, m)\n        if tmp >= t:\n            L = m+1\n            a = m\n        else:\n            R = m-1\n    b = a+1\n    if abs(TMP(h, c, a) - t) <= abs(TMP(h, c, b) - t):\n        print(a*2-1)\n    else:\n        print(b*2-1)\n", "from fractions import Fraction\nfrom math import ceil, floor\n\nfor _ in range(int(input())):\n    h, c, t = list(map(int, input().split()))\n    if t * 2 <= h + c:\n        print(2)\n    else:\n        # (t - (h + c) / 2) ~~ ((h - c) / 2) / ans\n        c1 = t - Fraction(h + c, 2)\n        c2 = Fraction(h - c, 2)\n        goal = c2 / c1\n        goal1 = (goal + 1) / 2\n        ans1 = floor(goal1) * 2 - 1\n        ans2 = ceil(goal1) * 2 - 1\n        if c2 / ans1 + c2 / ans2 <= c1 * 2:\n            print(ans1)\n        else:\n            print(ans2)\n"]