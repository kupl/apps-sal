["n,m=map(int,input().split())\na=list(map(int,input().split()))\ndp=[0]+[-1]*(9*n)\nl=[0,2,5,5,4,5,6,3,7,6]\nfor i in range(n):\n  for j in a:\n    if dp[i]>=0:\n      dp[i+l[j]]=max(dp[i+l[j]],dp[i]*10+j)\nprint(dp[n])", "def main():\n    N, M = map(int, input().split())\n    A = set(map(int, input().split()))\n\n\n    cost = [-1, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n    B = []\n    for i in range(1, 10):\n        if i in A:\n            B.append((cost[i], i))\n\n    B = B[::-1]\n    dp = [[-1, -1] for i in range(N+1)]\n    dp[0][0] = 0\n    for i in range(1, N+1):\n        for x, y in B:\n            if i >= x and dp[i-x][0] >= 0:\n                if dp[i][0] < dp[i-x][0] + 1:\n                    dp[i][0] = dp[i-x][0] + 1\n                    dp[i][1] = y\n    id = N\n    ans = []\n    # print(dp)\n    while(id > 0):\n        ans.append(dp[id][1])\n        id -= cost[dp[id][1]]\n    ans.sort(reverse=True)\n    print(\"\".join(map(str, ans)))\nmain()", "INF=float('inf')\ncost=[-1,2,5,5,4,5,6,3,7,6]\nN,M=map(int,input().split())\nA=list(map(int,input().split()))\n\ndp=[-INF]*(N+1)\ndp[0]=0\n\nfor i in range(1,N+1):\n    for a in A:\n        if i-cost[a]>=0:\n            dp[i]=max(dp[i],dp[i-cost[a]]*10+a)\nprint(dp[N])", "n, m = map(int, input().split())\nA = list(map(int, input().split()))\n\nli = [2,5,5,4,5,6,3,7,6]\n\ndp = [-1] * (n + 1)\ndp[0] = 0\n\nfor i in range(n):\n  for j in A:\n    if i + li[j - 1] <= n:\n      dp[i + li[j - 1]] = max(dp[i + li[j - 1]], dp[i] * 10 + j)\nprint(dp[-1])", "# dp\u306b\u6700\u5927\u6841\u6570\u3092\u6301\u305f\u305b\u308b\nN,M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA.sort(reverse=True)\nf = [-1, 2,5,5,4,5,6,3,7,6] # 1-indexed\n\n# dp[i]: \u30de\u30c3\u30c1i\u672c\u6570\u3067\u4f5c\u308c\u308b\u6700\u5927\u306e\u6841\u6570(int)\ndp = [-float('inf')]*(N+1)\ndp[0] = 0\nfor i in range(N+1):\n    nxt = dp[i]\n    for aj in A:\n        if i-f[aj]<0: continue\n        nxt = max(nxt, \n                  dp[i-f[aj]] + 1)\n    dp[i] = nxt\n    #print(dp)\n#print(dp[N])\nketa = dp[N]\nans = \"\"\nmatchs = N\n# \u4e0a\u4f4d\u306e\u6841\u304b\u3089\u8caa\u6b32\u306b\nwhile keta>0:\n    for aj in A:\n        if matchs-f[aj] < 0: continue\n        if dp[matchs-f[aj]] == keta-1:\n            ans += str(aj)\n            matchs -= f[aj]\n            keta -= 1\n            break\nprint(ans)\n", "N,M = map(int,input().split())\nA = list(map(int,input().split()))\nweight = [0,2,5,5,4,5,6,3,7,6]\ndp = [-1]*(N+1)\ndp[0]=0\nfor i in range(N+1):\n  for a in A:\n    if i + weight[a]<N+1:\n      dp[i+weight[a]]=max(dp[i+weight[a]],dp[i]*10+a)\nprint(dp[N])", "n,m=map(int,input().split())\nA=reversed(sorted(map(int,input().split())))\nM=[2,5,5,4,5,6,3,7,6]\nD={}\nE={}\nfor a in A:\n    if M[a-1] in D:\n        continue\n    else:\n        D[M[a-1]]=a\n        E[a]=M[a-1]\nS=list(reversed(sorted(E)))\n        \ndp=[0]*(n+2)\nfor i in range(1,n+2):\n    cnt=-1\n    for d in D:\n        if i-d>=0:\n            if dp[i-d]!=-1:\n                cnt=max(dp[i-d]+1,cnt)\n    dp[i]=cnt    \nk=dp[n]\nans=\"\"\n\nwhile k>0:\n    for s in S:\n        x=E[s]\n        if n-x<0:\n            continue\n        if dp[n-x]==k-1:\n            ans+=str(s)\n            k-=1\n            n-=x\n            break\nprint(ans)", "# \u89e3\u8aac\u653e\u9001\u306e\uff11\u3064\u3081\nN,M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nf = [-1, 2,5,5,4,5,6,3,7,6] # 1-indexed\n\n# dp[i]: \u30de\u30c3\u30c1i\u672c\u6570\u3067\u4f5c\u308c\u308b\u6700\u5927\u306e\u6570(str)\ndp = [None]*(N+1)\ndp[0] = \"\"\n\n# str\u306e\u6570\u306e\u5927\u304d\u3044\u307b\u3046\ndef max_str(s1:str, s2:str)->str:\n    \"\"\"return bigger one\"\"\"\n    l1, l2 = len(s1), len(s2)\n    if l1 != l2:\n        return s1 if l1>l2 else s2\n    if l1 == l2: \n        return s1 if s1>s2 else s2\n    \nfor i in range(2, N+1):\n    nxt = \"\"\n    for aj in A:\n        # \u914d\u5217\u5916\u53c2\u7167\u3068\uff0ci\u672c\u3061\u3087\u3046\u3069\u3067\u4f5c\u308c\u306a\u3044\u3082\u306e\u306f\u3060\u3081\n        if i-f[aj]<0 or dp[i-f[aj]]==None: continue\n        nxt = max_str(nxt, \n                      dp[i-f[aj]]+str(aj))\n    if nxt!=\"\":\n        dp[i] = nxt\n    #print(dp)\nprint((dp[N]))\n", "N,_ = map(int, input().split())\nA = [int(i) for i in input().split()]\n\nINF = \"-\"\n\ndef chmax(a:str,b:str):\n    if a == INF: return b\n    elif len(a) < len(b): return b\n    elif len(a) == len(a):\n        if a < b: return b\n    return a\n\n# \u6570\u5b57 : \u5fc5\u8981\u306a\u30de\u30c3\u30c1\u306e\u672c\u6570\ncnt = dict(zip(range(1,10), [2,5,5,4,5,6,3,7,6]))\n\n# dp[i]: \u30de\u30c3\u30c1\u3092i\u672c\u4f7f\u3063\u3066\u4f5c\u308c\u308b\u6570\u5024\u306e\u6700\u5927\u5024\ndp = [INF] * (10 ** 5)\n\n# \u521d\u671f\u6761\u4ef6\ndp[0] = \"\"\n\n# \u914d\u308bDP\nfor i in range(N):\n    if dp[i] == INF: continue\n    for a in A:\n        dp[i + cnt[a]] = chmax(dp[i + cnt[a]], dp[i] + chr(ord(\"0\") + a))\n\nprint(dp[N])", "n,m=map(int,input().split())\na=list(map(int,input().split()))\ntable={\n  1:2,\n  2:5,\n  3:5,\n  4:4,\n  5:5,\n  6:6,\n  7:3,\n  8:7,\n  9:6,\n}\ndp=[-1]*(n+1)\ndp[0]=0\nfor i in range(1,n+1):\n  mx=-1\n  for j in a:\n    if not 0 <= i-table[j] < n+1:\n      continue\n    #print(i,i-table[j],dp[i-table[j]],j)\n    if dp[i-table[j]]<0:\n      continue\n    if mx < dp[i-table[j]]*10+j:\n      mx =dp[i-table[j]]*10+j\n  dp[i]=mx\nprint(dp[n])", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nl = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\ndp = [-1] * (n+1)\ndp[0] =  0\n\nfor i in range(n+1):\n    for j in a:\n        if i + l[j] < n+1:\n            dp[i + l[j]] = max(dp[i + l[j]], dp[i]*10 + j)\nprint(dp[-1])", "n,m=list(map(int,input().split()))\nA=sorted(list(map(int,input().split())),reverse=True)\nL=[0,2,5,5,4,5,6,3,7,6]\n\ninf=float('inf')\n#dp[i]=i\u672c\u3067\u6700\u5927\u4f55\u6841\u4f5c\u308c\u308b\u304b\ndp=[-inf]*(n+1)\ndp[0]=0\nfor i in range(1,n+1):\n    for j in range(m):\n        num=L[A[j]]\n        if i>=num:\n            dp[i]=max(dp[i],dp[i-num]+1)\n\nsort_A=sorted(A,reverse=True)\nans=''\nwhile True:\n    if n==0:\n        break\n    for i in range(m):\n        temp=sort_A[i]\n        num=L[temp]\n        if n>=num and dp[n-num]>=0:\n            if dp[n-num]==dp[n]-1:\n                ans+=str(temp)\n                n-=num\n                break\n    \n\nprint((int(ans)))\n\n\n\n", "def num_to_match(n):\n    if n == 1:\n        return 2\n    elif n == 7:\n        return 3\n    elif n == 4:\n        return 4\n    elif n in [2, 3, 5]:\n        return 5\n    elif n in [6, 9]:\n        return 6\n    else:\n        return 7\n\n\ndef max_length(N, match):\n    match = set(match)\n    INF = 10**15\n    dp = [- INF for _ in range(N + 1)]\n    dp[0] = 0\n    for n in range(1, N + 1):\n        max_l = dp[n]\n        for m in match:\n            if n - m >= 0 and dp[n - m] >= 0:\n                max_l = max([max_l, 1 + dp[n - m]])\n        dp[n] = max_l\n    return dp\n\n\ndef main():\n    N, _ = list(map(int, input().split(' ')))\n    A = list(map(int, input().split(' ')))\n    A.sort(reverse=True)\n    match = list(map(num_to_match, A))\n    max_l = max_length(N, match)\n    digits = [0 for _ in range(max_l[N])]\n    n_match = N\n    for i in range(max_l[N]):\n        for a in A:\n            ma = num_to_match(a)\n            if n_match - ma < 0:\n                continue\n            if max_l[n_match - ma] == max_l[n_match] - 1:\n                digits[i] = a\n                n_match -= ma\n                break\n    print(''.join(map(str, digits)))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nweight = [0,2,5,5,4,5,6,3,7,6]\ndp = [-1] * (N+1)\ndp[0] =  0\n\nfor i in range(N+1):\n    for a in A:\n        if i + weight[a] < N+1:\n            dp[i + weight[a]] = max(dp[i + weight[a]], dp[i]*10 + a)\nprint((dp[-1]))\n", "n,m=map(int,input().split())\na=list(map(int,input().split()))\nb=[0,2,5,5,4,5,6,3,7,6]\nwv=[]\nfor i in a:\n  wv.append((b[i],i))\nwv.sort()\ndp=[-1 for i in range(n+1)]\ndp[0]=0\nfor i in range(1,n+1):\n  for w,v in wv:\n    if i-w<0:\n      continue\n    if dp[i-w]==-1:\n      continue\n    dp[i]=max(dp[i],dp[i-w]*10+v)\nprint(dp[n])", "N,M=map(int,input().split())\nA=list(map(int,input().split()))\n\ndp=[0]*(N+1)\ncost=[0,2,5,5,4,5,6,3,7,6]\nfor i in range(1,N+1):\n    for a in A:\n        if i-cost[a]>=0:\n            if dp[i-cost[a]]==0 and i-cost[a]>0:\n                continue\n            dp[i]=max(dp[i],dp[i-cost[a]]*10+a)\nprint(dp[-1])", "N,M=map(int,input().split())\nnum={1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\nA=list(map(int,input().split()))\nA.sort(reverse = True)\ndp = [0]+[-1]*(N+1)\nfor i in range(N):\n    for j in A:\n        if i+num[j]<=N:\n            dp[i+num[j]] = max(dp[i+num[j]],dp[i]+1)\nans = []\nm=N\nwhile m>0:\n    for i in A:\n        if m-num[i]>=0 and dp[m-num[i]]==dp[m]-1:\n          m-=num[i]\n          ans.append(str(i))\n          break\nprint(\"\".join(ans))", "N,M=map(int,input().split())\nA=list(map(int,input().split()))\nA.sort(reverse=True)\nnumk={1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\ndp=[0]+[-1]*(N+1)\nfor i in range(N):\n    for j in A:\n        if i+numk[j]<=N:\n            dp[i+numk[j]]=max(dp[i+numk[j]],dp[i]+1)\nm=N\nans=[]\nwhile m>0:\n    for i in A:\n        if m-numk[i]>=0 and dp[m-numk[i]]==dp[m]-1:\n          ans.append(str(i))\n          m-=numk[i]\n          break\nprint(''.join(ans))", "N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA.sort(reverse=True)\nINF = float('inf')\ndp = [-INF]*(N + 5)\nneeds = [2, 5, 5, 4, 5, 6, 3, 7, 6]\ncan_use = {k: needs[k-1] for k in A}\ndp[0] = 0\nfor i in range(2, N+1):\n    for v in list(can_use.values()):\n        if i - v < 0:\n            continue\n        dp[i] = max(dp[i], dp[i-v]+1)\nans = ''\ni = N\nwhile i != 0:\n    for k, v in list(can_use.items()):\n        if i - v < 0:\n            continue\n        while dp[i] == dp[i-v] + 1:\n            ans += str(k)\n            i -= v\nprint(ans)\n", "N,M=map(int,input().split())\nA=list(map(int,input().split()))\n\nT=[0,2,5,5,4,5,6,3,7,6]\nB=[]\nfor i in A:\n    B.append(T[i])\nB=sorted(list(set(B)))\ndp=[0 for i in range(N+1)]\nAB=[[i,T[i]] for i in A]\nAB=sorted(AB,reverse=True)\n\nfor i in range(1,N+1):\n    for j in B:\n        if i-j>=0 and dp[i-j]!=-1:\n            dp[i]=max(dp[i],dp[i-j]+1)\n            #print(i,j,dp[i])\n    if dp[i]==0:\n        dp[i]=-1\n#print(dp)\n#print(AB)\n\nc=N\nU=[0 for i in range(8)]\nwhile c>0:\n    for i in range(len(AB)):\n        if c-AB[i][1]>=0 and dp[c]==dp[c-AB[i][1]]+1:\n            U[AB[i][1]]+=1\n            c-=AB[i][1]\n            break\n#print(U)\n\nans=\"\"\nif 9 in A:\n    ans+='9'*U[6]\n    U[6]=0\nif 8 in A:\n    ans+='8'*U[7]\nif 7 in A:\n    ans+='7'*U[3]\nif 6 in A:\n    ans+='6'*U[6]\nif 5 in A:\n    ans+='5'*U[5]\n    U[5]=0\nif 4 in A:\n    ans+='4'*U[4]\nif 3 in A:\n    ans+='3'*U[5]\n    U[5]=0\nif 2 in A:\n    ans+='2'*U[5]\nif 1 in A:\n    ans+='1'*U[2]\n\nprint(ans)", "import sys\nsys.setrecursionlimit(10 ** 4)\nfrom fractions import gcd\n\nnum = [10**9, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [[\"\"]*(n+1) for _ in range(len(a))]\n    dp[0][num[a[0]]] = str(a[0])\n    for i in range(num[a[0]], n+1):\n        if len(dp[0][i-num[a[0]]]) > 0:\n            dp[0][i] = dp[0][i-num[a[0]]] + str(a[0])\n    for i in range(1, len(a)):\n        for j in range(n+1):\n            if j < num[a[i]]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                if j == num[a[i]] or dp[i][j-num[a[i]]] != \"\":\n                    buf = dp[i][j-num[a[i]]] + str(a[i])\n                    if len(buf) < len(dp[i-1][j]):\n                        dp[i][j] = dp[i-1][j]\n                    else:\n                        dp[i][j] = buf\n                else:\n                    dp[i][j] = dp[i-1][j]\n    ans = list(dp[len(a)-1][n])\n    ans.sort(reverse=True)\n    print(\"\".join(ans))\n\ndef __starting_point():\n    main()\n__starting_point()", "n,m=map(int,input().split())\na=list(map(int,input().split()))\ntemp=[0,2,5,5,4,5,6,3,7,6]\ndp=[-1]*(n+1)\ndp[0]=0\nfor i in range(n+1):\n  for j in a:\n    if i+temp[j]<n+1:\n      dp[i+temp[j]]=max(dp[i+temp[j]],dp[i]*10+j)\nprint(dp[n])", "from collections import defaultdict\n\ndef f(a, b):\n    for i in range(9,0,-1):\n        if a[i] == b[i]: continue\n        elif a[i] > b[i]:\n            return True\n        else:\n            return False\n    return False\n\nN, M = map(int, input().split())\nse = set()\nA = list(map(int, input().split()))\ntoNum = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\ndp = [[] for i in range(N+1)]\ndone = [False for i in range(N+10)]\ndone[N] = True\ndics = [defaultdict(int) for i in range(N+1)]\nfor i in range(N-1, -1, -1):\n    for a in A:\n        num = toNum[a]\n        if not done[i+num]: continue\n        l = len(dp[i+num])+1\n        d = dics[i+num].copy()\n        d[a] += 1\n        if l > len(dp[i]) or (l == len(dp[i]) and f(d, dics[i])):\n            dp[i] = dp[i+num] + [a]\n            done[i] = True\n            dics[i] = d\ndp[0].sort(reverse=True)\nprint(*dp[0], sep='')\n", "#!/usr/bin/env python3\nimport sys\ntry:\n    from typing import Dict, List\nexcept ImportError:\n    pass\n\n\ndef solve(N: int, M: int, A: \"List[int]\"):\n    mn = [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n    A.sort(reverse=True)\n    dp = [-1] * (N + 1)\n    dp[0] = 0\n    for i in range(1, N + 1):\n        m = -1\n        for Ai in A:\n            if i - mn[Ai] >= 0 and dp[i - mn[Ai]] >= 0:\n                m = max(m, dp[i - mn[Ai]] + 1)\n        if m >= 0:\n            dp[i] = m\n    assert dp[N] >= 0\n    k = N\n    res = []  # type: List[int]\n    while dp[k]:\n        for Ai in A:\n            if k - mn[Ai] >= 0 and dp[k - mn[Ai]] == dp[k] - 1:\n                res.append(Ai)\n                k -= mn[Ai]\n                break\n\n    print((\"\".join(str(d) for d in res)))\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    M = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(M)]  # type: \"List[int]\"\n    solve(N, M, A)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def resolve():\n    N, M = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    required = [None]+[2,5,5,4,5,6,3,7,6]\n    dp = [0 for _ in range(max(10, N+1))]\n    candidates = {}\n    for a in A:\n        req = required[a]\n        if dp[req] < a:\n            dp[req] = a\n            candidates[req] = a\n    #print(dp)\n    #print(candidates)\n    for i in range(N+1):\n        for n_match, num in candidates.items():\n            if i - n_match >= 0 and dp[i-n_match] != 0:\n                dp[i] = max(dp[i], dp[i-n_match]*10+num)\n    #print(dp)\n    print(dp[N])\n\nif '__main__' == __name__:\n    resolve()", "import sys\ninput = sys.stdin.readline\n\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    \n    key = dict()\n    if 1 in a:\n        key[2] = 1\n    for v in [5, 3, 2]:\n        if v in a:\n            key[5] = v\n            break\n    if 4 in a:\n        key[4] = 4\n    for v in [9, 6]:\n        if v in a:\n            key[6] = v\n            break\n    if 7 in a:\n        key[3] = 7\n    if 8 in a:\n        key[7] = 8\n \n    \n    dp = [0]*(n+1)\n   \n    for i in range(n):\n        if i != 0 and dp[i] == 0:\n            continue\n        for k, v in list(key.items()):\n            if i+k <= n:\n                dp[i+k] = max(dp[i+k], 10*dp[i]+v)\n    print((dp[n]))\n        \n   \n    \ndef __starting_point():\n    main()\n\n__starting_point()", "N,M=map(int,input().split())\nl=list(map(int,input().split()))\nw=[2,5,5,4,5,6,3,7,6]\nl.sort()\ndp=[0]*(max(N+1,8))\nfor j in l:\n   dp[w[j-1]]=j\nfor i in range(N):\n   if dp[i]!=0:\n      for j in l:\n         if w[j-1]+i<=N:\n            dp[i+w[j-1]]=max(dp[i+w[j-1]],dp[i]*10+j)\nprint(dp[N])", "n, m = map(int, input().split())\nD = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\nA = list(map(int, input().split()))\nC = [(a, D[a]) for a in A]\nC.sort(reverse=True)\ndp = [-1]*(n+1)\ndp[0] = 0\nfor i in range(1, n+1):\n  for a, c in C:\n    if i >= c and dp[i-c] >= 0:\n      dp[i] = max(dp[i-c]+1, dp[i])\nnow = n\nans = \"\"\nwhile now:\n  for a, c in C:\n    if now-c >= 0 and dp[now] == dp[now-c]+1:\n      ans += str(a)\n      now -= c\n      break\nprint(ans)", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = [10**5, 2,5,5,4,5,6,3,7,6]\ndp = [(0, 0)] * (n + 1)\nfor i in range(n):\n    if i > 0 and dp[i][0] == 0:\n        continue\n    k, _ = dp[i]\n    for ai in a:\n        if i + d[ai] <= n:\n            dp[i+d[ai]] = max(dp[i+d[ai]], (k+1, ai))\nans = []\ni = n\nfor _ in range(dp[n][0]):\n    ans.append(str(dp[i][1]))\n    i -= d[dp[i][1]]\nprint((''.join(ans)))\n", "n, m = (int(x) for x in input().split())\nA = sorted([int(x) for x in input().split()])[::-1]\ncost = (0, 2, 5, 5, 4, 5, 6, 3, 7, 6)\ndp = [[-1] * (n+1) for _ in range(m+1)]\nfor i in range(m+1):\n  dp[i][0] = 0\nfor i in range(m):\n  for j in range(1, n+1):\n    dp[i+1][j] = max(dp[i+1][j], dp[i][j])\n    if j >= cost[A[i]]:\n      if dp[i+1][j-cost[A[i]]] == -1:\n        dp[i+1][j] = max(dp[i+1][j], dp[i][j])\n      else:\n        dp[i+1][j] = max(dp[i+1][j], 10 * dp[i+1][j-cost[A[i]]] + A[i])\nprint(dp[m][n])", "#!/usr/bin/env python3\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n\nall_weights = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\nweights = [all_weights[i] for i in a]\n\n# print(weights)\n\ndp = [-1 for _ in range(n+1)]\ndp[0] = 0\n\nfor i in range(1, n+1):\n    # print(dp)\n    for j in range(len(weights)):\n        if i-weights[j] >= 0:\n            dp[i] = max(dp[i-weights[j]]*10 + a[j], dp[i])\n\nprint((dp[-1]))\n", "N, M = map(int,input().split())\nA = list(map(int,input().split()))\nA.sort(reverse = True)\nd = [0,2,5,5,4,5,6,3,7,6]\nS = set()\nfor a in A:\n    S.add(d[a])\n\nINF = 10 ** 8\ndp = [-INF for _ in range(N+1)]\ndp[0] = 0\n\nfor i in range(N+1):\n    for s in S:\n        if i - s >= 0:\n            dp[i] = max(dp[i], dp[i-s]+1)\n\nans = 0\ndigit = dp[N]\n\nfor i in range(digit-1, -1, -1):\n    if i != 0:\n        for a in A:\n            if dp[N-d[a]] == i:\n                ans = ans * 10 + a\n                N -= d[a]\n                break\n    else:\n        for a in A:\n            if N == d[a]:\n                ans = ans * 10 + a\n                break\nprint(ans)", "n,m = map(int,input().split())\na = list(map(int,input().split()))\na.sort(reverse = True)\nl = [0,2,5,5,4,5,6,3,7,6]\n\ndp = [-1**10]*(n+1)\ndp[0] = 0\nfor i in range(1,n+1):\n    \n    for j in range(m):\n        if i >= l[a[j]] and dp[i] < dp[i-l[a[j]]]+1:\n            dp[i] = dp[i-l[a[j]]]+1\n            \n\nans = []\nremain = dp[-1]\nnow = n\nfor i in a:\n    x = l[i]\n    while now -x >= 0 and dp[now] == dp[now-x]+1:\n        ans.append(i)\n        now -= x \nprint(*ans,sep=\"\")", "N,M=map(int,input().split())\nA=list(map(int,input().split()))\nA.sort(reverse=True)\nnumk={1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\ndp=[0]+[-1]*(N+1)\nfor i in range(N):\n    for j in A:\n        if i+numk[j]<=N:\n            dp[i+numk[j]]=max(dp[i+numk[j]],dp[i]+1)\nm=N\nans=[]\nwhile m>0:\n    for i in A:\n        if m-numk[i]>=0 and dp[m-numk[i]]==dp[m]-1:\n          m-=numk[i]\n          ans.append(str(i))\n          break\nprint(\"\".join(ans))", "N,M=list(map(int,input().split()))\nA=list(map(int,input().split()))\nA.sort()\n\nif 1 in A:\n    if N%2==0:\n        print((\"1\"*(N//2)))\n    else:\n        if 7 in A:\n            print((\"7\"+\"1\"*(N//2-1)))\n        elif 5 in A:\n            print((\"5\"+\"1\"*(N//2-2)))\n        elif 3 in A:\n            print((\"3\"+\"1\"*(N//2-2)))\n        elif 2 in A:\n            print((\"2\"+\"1\"*(N//2-2)))\n        else:\n            print((\"8\"+\"1\"*(N//2-3)))\nelse:\n    B=[[] for i in range(0,10)]\n    for i in range(0,M):\n        if 2 in A:\n            B[5].append(2)\n        if 3 in A:\n            B[5].append(3)\n        if 4 in A:\n            B[4].append(4)\n        if 5 in A:\n            B[5].append(5)\n        if 6 in A:\n            B[6].append(6)\n        if 7 in A:\n            B[3].append(7)\n        if 8 in A:\n            B[7].append(8)\n        if 9 in A:\n            B[6].append(9)\n\n\n    dp=['n' for i in range(0,max(10,N+1))]\n    for i in range(0,min(N+1,10)):\n        if i==2:\n            if 2 in A:\n                dp[5]='2'\n        if i==3:\n            if 3 in A:\n                dp[5]='3'\n        if i==4:\n            if 4 in A:\n                dp[4]='4'\n        if i==5:\n            if 5 in A:\n                dp[5]='5'\n        if i==6:\n            if 6 in A:\n                dp[6]='6'\n        if i==7:\n            if 7 in A:\n                dp[3]='7'\n        if i==8:\n            if 8 in A:\n                dp[7]='8'\n        if i==9:\n            if 9 in A:\n                dp[6]='9'\n\n    if N>=6:\n        a='0'\n        b='0'\n        c='0'\n        if B[3]!=[]:\n            b='77'\n        if dp[6]=='n':\n            a=int(a)\n            b=int(b)\n            c=int(c)\n            x=max(a,b,c)\n            if x!=0:\n                dp[6]=str(x)\n        else:\n            a=int(a)\n            b=int(b)\n            c=int(c)\n            d=int(dp[6])\n            dp[6]=str(max(a,b,c,d))\n\n    if N>=7:\n        a='0'\n        b='0'\n        c='0'\n        d='0'\n        if B[3]!=[] and dp[4]!='n':\n            b='7'+dp[4]\n        if B[4]!=[] and dp[3]!='n':\n            c='47'\n        if dp[7]=='n':\n            a=int(a)\n            b=int(b)\n            c=int(c)\n            d=int(d)\n            x=max(a,b,c,d)\n            if x!=0:\n                dp[7]=str(x)\n        else:\n            a=int(a)\n            b=int(b)\n            c=int(c)\n            d=int(d)\n            e=int(dp[7])\n            dp[7]=str(max(e,a,b,c,d))\n\n    for i in range(8,N+1):\n        a='0'\n        b='0'\n        c='0'\n        d='0'\n        e='0'\n        f='0'\n        if B[3] and dp[i-3]!='n':\n            b='7'+dp[i-3]\n        if B[4] and dp[i-4]!='n':\n            c='4'+dp[i-4]\n        if B[5] and dp[i-5]!='n':\n            d=str(max(B[5]))+dp[i-5]\n        if B[6] and dp[i-6]!='n':\n            e=str(max(B[6]))+dp[i-6]\n        if B[7] and dp[i-7]!='n':\n            f='8'+dp[i-7]\n        a=int(a)\n        b=int(b)\n        c=int(c)\n        d=int(d)\n        e=int(e)\n        f=int(f)\n        x=max(a,b,c,d,e,f)\n        if x==0:\n            dp[i]='n'\n        else:\n            dp[i]=str(x)\n    print((int(dp[N])))\n", "def main():\n    n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.sort(reverse=True)\n    cost=[0,2,5,5,4,5,6,3,7,6]\n    dp=[-n-n]*(n+1)\n    dp[0]=0\n    ans=[]\n    for i in range(1,n+1):\n        for j in a:\n            if i>=cost[j]:\n                dp[i]=max(dp[i],dp[i-cost[j]]+1)\n    cnt=n\n    while cnt:\n        for j in a:\n            if cnt>=cost[j] and dp[cnt-cost[j]]==dp[cnt]-1:\n                ans.append(j)\n                cnt-=cost[j]\n                break\n    for j in ans:\n        print(j, end=\"\")\n    print(\"\")\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\nN,M,*A = map(int, open(0).read().split())\nls = [0]*10\nls[1] = 2\nls[2] = 5\nls[3] = 5\nls[4] = 4\nls[5] = 5\nls[6] = 6\nls[7] = 3\nls[8] = 7\nls[9] = 6\ndic = defaultdict(int)\nfor a in A:\n  k = ls[a]\n  dic[k] = max(dic[k],a)\ndp = [-1]*(N+1)\nfor k in dic.keys():\n  if k>N:\n    continue\n  dp[k] = dic[k]\nfor i in range(N+1):\n  for k in dic.keys():\n    if i-k>0 and dp[i-k]!=-1:\n      m = dp[i-k]*10+dic[k]\n      dp[i] = max(dp[i], m)\nprint(dp[N])", "def max_for_str(a, b):\n    if len(a) > len(b):\n        return a\n    elif len(a) < len(b):\n        return b\n    else:#This case is unlikely to happen.\n        for c1, c2 in zip(a, b):\n            if c1 > c2:\n                return a\n            elif c1 < c2:\n                return b\n        return a\n            \nmatch = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\nN, M = map(int, input().split())\nAs = list(input().split())\n\ndp = [None] * (N+1)\ndp[0] = \"\"\n\nfor i in range(N+1):\n    for A in As:\n        if i - match[int(A)] >= 0 and not dp[i - match[int(A)]] is None:\n            if dp[i] is None:\n                dp[i] = A + dp[i - match[int(A)]]\n            else:\n                dp[i] = max_for_str(dp[i] , A + dp[i - match[int(A)]])\n\nprint(dp[N])", "N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nweight = [0,2,5,5,4,5,6,3,7,6]\ninf = float('inf')\ndp = [-inf] * (N+1)\ndp[0] = 0\nfor i in range(N+1):\n    for a in A:\n        if i + weight[a] < N+1:\n            dp[i + weight[a]] = max(dp[i + weight[a]], dp[i]*10 + a)\nprint((dp[-1]))\n", "n,m = map(int,input().split())\na = [int(i) for i in input().split()]\nmatch = [0,2,5,5,4,5,6,3,7,6]\ndp = [-1]*(n+1)\ndp[0] = 0\nfor i in range(1,n+1):\n    for j in a:\n        if i - match[j] < 0: continue\n        if dp[i-match[j]] == -1: continue\n        dp[i] = max(dp[i], dp[i-match[j]]*10+j)\n# print(dp)\nprint(dp[n])", "N,M=map(int,input().split())\nA=list(map(int,input().split()))\nA.sort()\n\nif 1 in A:\n    if N%2==0:\n        print(\"1\"*(N//2))\n    else:\n        if 7 in A:\n            print(\"7\"+\"1\"*(N//2-1))\n        elif 5 in A:\n            print(\"5\"+\"1\"*(N//2-2))\n        elif 3 in A:\n            print(\"3\"+\"1\"*(N//2-2))\n        elif 2 in A:\n            print(\"2\"+\"1\"*(N//2-2))\n        else:\n            print(\"8\"+\"1\"*(N//2-3))\nelif 7 in A:\n    if N%3==0:\n        print(\"7\"*(N//3))\n    elif N%3==1:\n        if 4 in A:\n            print(\"7\"*(N//3-1)+\"4\")\n        elif 8 in A:\n            print(\"8\"+\"7\"*(N//3-2))\n        elif 5 in A:\n            print(\"7\"*(N//3-3)+\"55\")\n        elif 3 in A:\n            print(\"7\"*(N//3-3)+\"33\")\n        elif 2 in A:\n            print(\"7\"*(N//3-3)+\"22\")\n    else:\n        if 5 in A:\n            print(\"7\"*(N//3-1)+\"5\")\n        elif 3 in A:\n             print(\"7\"*(N//3-1)+\"3\")\n        elif 2 in A:\n            print(\"7\"*(N//3-1)+\"2\")\n        elif 4 in A:\n            print(\"7\"*(N//3-2)+\"44\")\n        elif 8 in A:\n            print(print(\"7\"*(N//3-4)+\"88\"))\n\nelse:\n    B=[[] for i in range(0,10)]\n    for i in range(0,M):\n        if 2 in A:\n            B[5].append(2)\n        if 3 in A:\n            B[5].append(3)\n        if 4 in A:\n            B[4].append(4)\n        if 5 in A:\n            B[5].append(5)\n        if 6 in A:\n            B[6].append(6)\n        if 8 in A:\n            B[7].append(8)\n        if 9 in A:\n            B[6].append(9)\n\n\n    dp=['n' for i in range(0,max(10,N+1))]\n    for i in range(0,min(N+1,10)):\n        if i==2:\n            if 2 in A:\n                dp[5]='2'\n        if i==3:\n            if 3 in A:\n                dp[5]='3'\n        if i==4:\n            if 4 in A:\n                dp[4]='4'\n        if i==5:\n            if 5 in A:\n                dp[5]='5'\n        if i==6:\n            if 6 in A:\n                dp[6]='6'\n        if i==8:\n            if 8 in A:\n                dp[7]='8'\n        if i==9:\n            if 9 in A:\n                dp[6]='9'\n\n    if N>=6:\n        a='0'\n        b='0'\n        c='0'\n        if dp[6]=='n':\n            a=int(a)\n            b=int(b)\n            c=int(c)\n            x=max(a,b,c)\n            if x!=0:\n                dp[6]=str(x)\n        else:\n            a=int(a)\n            b=int(b)\n            c=int(c)\n            d=int(dp[6])\n            dp[6]=str(max(a,b,c,d))\n\n    if N>=7:\n        a='0'\n        b='0'\n        c='0'\n        d='0'\n        if dp[7]=='n':\n            a=int(a)\n            b=int(b)\n            c=int(c)\n            d=int(d)\n            x=max(a,b,c,d)\n            if x!=0:\n                dp[7]=str(x)\n        else:\n            a=int(a)\n            b=int(b)\n            c=int(c)\n            d=int(d)\n            e=int(dp[7])\n            dp[7]=str(max(e,a,b,c,d))\n\n    for i in range(8,N+1):\n        a='0'\n        b='0'\n        c='0'\n        d='0'\n        e='0'\n        f='0'\n        if B[4] and dp[i-4]!='n':\n            c='4'+dp[i-4]\n        if B[5] and dp[i-5]!='n':\n            d=str(max(B[5]))+dp[i-5]\n        if B[6] and dp[i-6]!='n':\n            e=str(max(B[6]))+dp[i-6]\n        if B[7] and dp[i-7]!='n':\n            f='8'+dp[i-7]\n        a=int(a)\n        b=int(b)\n        c=int(c)\n        d=int(d)\n        e=int(e)\n        f=int(f)\n        x=max(a,b,c,d,e,f)\n        if x==0:\n            dp[i]='n'\n        else:\n            dp[i]=str(x)\n    print(int(dp[N]))\n", "import sys\ninput=sys.stdin.readline\nn,m=list(map(int,input().split()))\na=list(map(int,input().split()))\nd=dict()\nneed=[0,2,5,5,4,5,6,3,7,6]\nfor i in range(m):\n    if need[a[i]] not in d:\n        d[need[a[i]]]=a[i]\n    else:\n        if a[i]>d[need[a[i]]]:\n            d[need[a[i]]]=a[i]\nd=list(d.items())\nd.sort()\nm=len(d)\ndp=[[-1]*10 for _ in range(n+1)]\ndp[0]=[0]*10\nfor i in range(n+1):\n    for j in range(m):\n        if i-d[j][0]>=0 and dp[i-d[j][0]][0]!=-1:\n            if dp[i][0]==dp[i-d[j][0]][0]+1:\n                ok=False\n                for k in reversed(list(range(1,10))):\n                    if k==d[j][1]:\n                        if dp[i][k]<dp[i-d[j][0]][k]+1:\n                            ok=True\n                            break\n                        if dp[i][k]>dp[i-d[j][0]][k]+1:\n                            break\n                    else:\n                        if dp[i][k]<dp[i-d[j][0]][k]:\n                            ok=True\n                            break\n                        if dp[i][k]>dp[i-d[j][0]][k]:\n                            break\n                if ok:\n                    for k in range(10):\n                        dp[i][k]=dp[i-d[j][0]][k]\n                    dp[i][d[j][1]]+=1\n                    dp[i][0]+=1\n            elif dp[i][0]<dp[i-d[j][0]][0]+1:\n                for k in range(10):\n                    dp[i][k]=dp[i-d[j][0]][k]\n                dp[i][d[j][1]]+=1\n                dp[i][0]+=1\nans=str()\nfor i in reversed(list(range(1,10))):\n    ans+=str(i)*dp[-1][i]\nprint(ans)\n#print(d)\n#print(dp[-1])\n", "from collections import defaultdict\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nL = {1: 2, 2: 5, 3: 5, 4: 4, 5: 5, 6: 6, 7: 3, 8: 7, 9: 6}\nD = defaultdict(int)\n\nfor i in A:\n  if D[L[i]] < i:\n    D[L[i]] = i\n\nINF = float(\"inf\")\ndp = [-INF]*(N+1)\ndp[0] = 0\n\nfor i in range(1, N+1):\n  for j in D.keys():\n    if i-j >= 0:\n      dp[i] = max(dp[i], dp[i-j] + 1)\n    else:\n      dp[i] = max(dp[i], -INF)\n\nans = \"\"\ntemp = N\n\n#\u306a\u308b\u3079\u304f\u5927\u304d\u3044\u6570\u5b57\u304b\u3089\u4f7f\u3046\nfor i, x in sorted(D.items(), key=lambda x: x[1], reverse=True):\n  while temp - i >= 0 and dp[temp-i] == dp[temp] - 1:\n    ans += str(x)\n    temp -= i\n\nprint(ans)", "N, M = map(int, input().split())\n\nA = list(map(int, input().split()))\nB = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\nDP = [-1]*(N+1)\nDP[0] = 0 \n\nfor i in range(N):\n    for j in A:\n        if i+B[j] <= N:\n            DP[i+B[j]] = max(DP[i]*10+j, DP[i+B[j]])\n\nprint(DP[N]) ", "import sys\ndef input(): return sys.stdin.readline().strip()\ndef mapint(): return map(int, input().split())\nsys.setrecursionlimit(10**9)\n\nN, M = mapint()\nAs = list(mapint())\nnum_lis = [2, 5, 5, 4, 5, 6, 3, 7, 6]\nneed_m = [num_lis[a-1] for a in As]\ndp = [-1]*(N+1)\ndp[0] = 0\n\nfor i in range(1, N+1):\n    for a, need in zip(As, need_m):\n        if need>i:\n            continue\n        elif dp[i-need]==-1:\n            continue\n        elif dp[i-need]==0:\n            dp[i] = max(dp[i], a)\n        else:\n            dp[i] = max(dp[i], dp[i-need]*10+a)\n\nprint(dp[-1])", "cost=[-1,2,5,5,4,5,6,3,7,6]\nN,M=map(int,input().split())\nA=list(map(int,input().split()))\n\ndp=[None]*(N+1)\ndp[0]=''\n\nfor i in range(1,N+1):\n    for a in A:\n        if i-cost[a]>=0 and dp[i-cost[a]]!=None:\n            s=dp[i-cost[a]]+str(a)\n            if dp[i]==None or len(dp[i])<len(s):\n                dp[i]=s\n            elif len(dp[i])>len(s):\n                continue\n            else:\n                dp[i]=max(dp[i],s)\n            \n            \nprint(dp[N])", "#!/usr/bin/env python3\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n\nall_weights = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\nweights = [all_weights[i] for i in a]\n\n# print(weights)\n\ndp = [-1 for _ in range(n+1)]\ndp[0] = 0\n\nfor i in range(1, n+1):\n    # print(dp)\n    for j in range(len(weights)):\n        if i-weights[j] >= 0:\n            dp[i] = max(dp[i-weights[j]]*10 + a[j], dp[i])\n\nprint((dp[-1]))\n", "N, M = map(int, input().split())\nA = list(map(int, input().split()))\nweight = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\ndp = [-1]*(N+1)\ndp[0] = 0\nfor i in range(N+1):\n    for a in A:\n        if i + weight[a]<=N:\n            dp[i+weight[a]] = max(dp[i+weight[a]],dp[i]*10+a)\nprint(dp[N])", "N,M=map(int,input().split())\nA=list(map(int,input().split()))\nA.sort(reverse=True)\nnumk={1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\ndp=[0]+[-1]*(N+1)\nfor i in range(N):\n    for j in A:\n        if i+numk[j]<=N:\n            dp[i+numk[j]]=max(dp[i+numk[j]],dp[i]+1)\nm=N\nans=[]\nwhile m>0:\n    for i in A:\n        if m-numk[i]>=0 and dp[m-numk[i]]+1==dp[m]:\n            ans.append(str(i))\n            m-=numk[i]\n            break\nprint(''.join(ans))", "import heapq\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = [6,2,5,5,4,5,6,3,7,6] # B[i]\u304ci\u3092\u4f5c\u308b\u306e\u306b\u5fc5\u8981\u306a\u30de\u30c3\u30c1\u68d2\u306e\u6570\n\n# dp[i]: i\u672c\u30de\u30c3\u30c1\u4f7f\u3063\u3066\u4f5c\u308c\u308bMAX\u6841\u6570\u3002\u3002\ndp = [-1 for _ in range(N+10)]\ndp[0] = 0\nA.sort()\nvisited = [False for _ in range(N+10)]\nh = []\nheapq.heappush(h, (0,0))\n\nwhile h:\n  now_n, keta = heapq.heappop(h)\n  if visited[now_n]:\n    continue\n  visited[now_n] = True\n  for a in A:\n    nxt_n = now_n + B[a]\n    if nxt_n >= N + 10:\n      continue\n    dp[nxt_n] = max(dp[nxt_n], dp[now_n] + 1)\n    heapq.heappush(h, (nxt_n, dp[now_n] + 1))\n    \n#print(dp)\n\nA.sort(reverse=True)\n# \u4e0a\u306e\u6841\u304b\u3089\u6c7a\u3081\u3066\u3044\u304f\u3002dp[N]\nANS = []\nzan = N\nfor i in range(dp[N],0,-1):\n  bugf = True\n  # sorted(a) \u5927\u304d\u3044\u65b9\u304b\u3089\u8a66\u3059\n  for a in A:\n    if dp[zan-B[a]] == dp[zan] - 1:\n      ANS.append(str(a))\n      zan = zan - B[a]\n      bugf = False\n      break\n  if bugf:\n    # A\u304c\u69cb\u6210\u3067\u304d\u306a\u3044\u3001\u3068\u8a00\u3046\u3053\u3068\u306a\u306e\u3067\u3053\u3053\u306f\u901a\u3089\u306a\u3044\u306f\u305a\n    print(\"bug...\")\n  \nprint(\"\".join(ANS))", "\"\"\"\n- min\u3067\u306e\u6841\u6570\n- \u305d\u306e\u5f8c\u306e\u4f59\u308a\u3067greedy\n- \n\"\"\"\n\nnum_dic = {1:2, 2:5, 3:5, 4:4, 5:5, 6:6, 7:3, 8:7, 9:6}\n\nN, M = list(map(int, input().split()))\nt_dic = {}\nA = list(map(int, input().split()))\nA = sorted(A)[::-1]\nfor a in A:\n    t_dic[a] = num_dic[a]\nmin_v = min(t_dic.values())\n\ndp = [0] * (N+8)\nfor i in range(N):\n    for a in A:\n        num = t_dic[a]\n        if i !=0 and dp[i] == 0:\n            continue\n        dp[i+num] = max(10 * dp[i]+ a, dp[i+num])\n\nprint(dp[N])", "def main():\n    n, m = map(int, input().split())\n    a = set(map(int, input().split()))\n\n    # type(x) == type(y) == string\n    def bigger(x, y):\n        if len(x) > len(y):\n            return x\n        elif len(x) < len(y):\n            return y\n        elif x < y:\n            return y\n        else:\n            return x\n\n    l = []\n    if 1 in a:\n        l.append((2, '1'))\n\n    if 7 in a:\n        l.append((3, '7'))\n\n    if 4 in a:\n        l.append((4, '4'))\n\n    if 5 in a:\n        l.append((5, '5'))\n    elif 3 in a:\n        l.append((5, '3'))\n    elif 2 in a:\n        l.append((5, '2'))\n\n    if 9 in a:\n        l.append((6, '9'))\n    elif 6 in a:\n        l.append((6, '6'))\n\n    if 8 in a:\n        l.append((7, '8'))\n\n    dp = [None] * (n+1)\n    dp[0] = ''\n    for i in range(1, n+1):\n        for cost, char in l:\n            if i - cost < 0 or dp[i-cost] is None:\n                continue\n            candidate = max(dp[i-cost] + char, char + dp[i-cost])\n            if dp[i] is None:\n                dp[i] = candidate\n            else:\n                dp[i] = bigger(dp[i], candidate)\n\n    print(dp[n])\n\nmain()", "import sys\nreadline = sys.stdin.readline\n\nN,M = map(int,readline().split())\nA = set(list(map(int,readline().split())))\n\ndic = {1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\n\n# \u3042\u308b\u672c\u6570\u3067\u4f5c\u308c\u308b\u6570\ncandi = [[],[],[1],[7],[4],[2,3,5],[6,9],[8]]\n\n# \u305f\u3068\u3048\u30702\u30683\u3092\u4e21\u65b9\u4f5c\u308c\u308b\u3068\u304d\u306b\u30012\u3092\u4f5c\u308b\u30e1\u30ea\u30c3\u30c8\u306f\u306a\u3044\u3002\nif 2 in A and 3 in A:\n  A.remove(2)\nif 2 in A and 5 in A:\n  A.remove(2)\nif 3 in A and 5 in A:\n  A.remove(3)\nif 6 in A and 9 in A:\n  A.remove(6)\n\nfor i in range(len(candi)):\n  for j in range(len(candi[i])-1,-1,-1):\n    if candi[i][j] not in A:\n      del candi[i][j]\n\n# \u30de\u30c3\u30c1\u3092\u3042\u308b\u672c\u6570\u4f7f\u3063\u3066\u4f5c\u308c\u308b\u6841\u6570\u306e\u6700\u5927\u5024\u3092dp\n# \u305d\u306e\u3068\u304d\u306e\u4f7f\u7528\u6587\u5b57\u3082\u8a18\u9332\n# \u6700\u5927\u5024\u304c\u540c\u3058\u3068\u304d\u306f\u3001\u5927\u5c0f\u6bd4\u8f03\ndp = [-1] * (N + 1)\nans = [\"\"] * (N + 1)\ndp[0] = 0\ndef to_num(x):\n  return int(\"\".join(sorted(x, reverse = True)))\nfor i in range(len(candi)):\n  if not candi[i]:\n    continue\n  num = str(candi[i][0]) # i\u6587\u5b57\u4f7f\u3063\u3066\u4f5c\u308b\u6587\u5b57\n  # i\u6587\u5b57\u4f7f\u3063\u3066\u4f5c\u308b\n  for j in range(len(dp)):\n    if dp[j] == -1:\n      continue\n    #print(\"j\",j)\n    if j + i > N:\n      continue\n    if dp[j + i] < dp[j] + 1:\n      dp[j + i] = dp[j] + 1\n      ans[j + i] = ans[j] + num\n    elif dp[j + i] == dp[j] + 1:\n      if to_num(ans[j + i]) < to_num(ans[j] + num):\n        ans[j + i] = ans[j] + num\n    #print(dp)\n    #print(ans)\n\nprint(to_num(ans[N]))", "N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ndp = [0] * (N+1)\n\nt = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\nfor i in range(1, N+1):\n    for a in A:\n        if 0 <= i-t[a]:     \n            if dp[i-t[a]] == 0 and i-t[a] > 0: continue\n            dp[i] = max(dp[i], dp[i-t[a]]*10+a)\nprint(dp[N])", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nnum_of_matches = [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]\ndp = ['x'] * (n+8)\ndp[0] = ''\nfor i in range(n+1):\n    if dp[i] == 'x':\n        continue\n    for aa in a:\n        x = dp[i + num_of_matches[aa]]\n        y = dp[i] + str(aa)\n        if x == 'x':\n            dp[i + num_of_matches[aa]] = y\n        elif len(x) < len(y):\n            dp[i + num_of_matches[aa]] = y\n        elif len(x) == len(y):\n            if x < y:\n                dp[i + num_of_matches[aa]] = y\nprint((dp[n]))\n", "n,m = list(map(int,input().split()))\nA = list(map(int,input().split()))\nL = [2,5,5,4,5,6,3,7,6]\ndp = [-float('inf')]*(n+1)\ndp[0] = 0\nfor i in range(1,n+1):\n    for j in range(m):\n        if i-L[A[j]-1] < 0:\n            None\n        else:\n            dp[i] = max(dp[i-L[A[j]-1]]+1, dp[i])\nA.sort()\nA.reverse()\ncur = n\nans = ''\nwhile cur != 0:\n    for i in range(m):\n        temp = A[i]\n        if cur-L[temp-1] >= 0:\n            if dp[cur-L[temp-1]] == dp[cur]-1:\n                ans = ans+str(temp)\n                cur -= L[temp-1]\n                break\nprint(ans)\n", "N, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nA.sort()\nA.reverse()\n\nmatch = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\ndp = [-N-N] * (N + 1)\ndp[0] = 0\n\nfor i in range(1, N + 1):\n  for j in A:\n    if i >= match[j]:\n      dp[i] = max(dp[i], dp[i - match[j]] + 1)\n\nmax_list = []\nwhile N:\n  for j in A:\n    if N >= match[j] and dp[N] == dp[N - match[j]] + 1:\n      max_list.append(j)\n      N -= match[j]\n      break\n\nfor j in max_list:\n  print(j, end=\"\")\nprint(\"\")\n", "n, m = map(int, input().split()) \na = list(map(int, input().split()))\nb = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\ndp = [-1] * (n + 1)\ndp[n] = 0\n\nfor i in range(n, -1, -1):\n    for j in range(m):\n        x = b[a[j]]\n        if dp[i] != -1 and i - x >= 0:\n            dp[i - x] = max(dp[i - x], 10 * dp[i] + a[j])\n            \nprint(dp[0])", "# Python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN,M = map(int,input().split())\nA = list(map(int,input().split()))\n\n# \u5404\u6570\u5b57\u306b\u5fc5\u8981\u306a\u30de\u30c3\u30c1\u306e\u672c\u6570\nnum = [0,2,5,5,4,5,6,3,7,6]\n\n# dp : i\u672c\u306e\u30de\u30c3\u30c1\u3067\u4f5c\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u6700\u5927\u306e\u6841\u6570\ndp = [-float(\"inf\")]*(N+1)\n# dp\u521d\u671f\u5316 \n#   - 0\u672c -> 0\u6841\n#   - \u5404\u6570\u5b57\u30921\u3064\u4f5c\u308b\u5834\u5408\u306f1\u6841\ndp[0] = 0\nfor a in A:\n    if num[a] <= N:\n        dp[num[a]] = 1\n\n# dp\u66f4\u65b0\nfor i in range(1,N+1):\n    for a in A:\n        if i - num[a] >= 0:\n            dp[i] = max(dp[i], dp[i-num[a]] + 1)\n\n# \u5fa9\u5143\nA.sort(reverse=True)\nans = \"\"\nfor i in range(dp[N]):\n    for a in A:\n        if N-num[a] >= 0 and dp[N-num[a]] == dp[N]-1:\n            ans += str(a)\n            N -= num[a]\n            break\n\nprint(ans)", "n,m=list(map(int,input().split()))\nsz=[0,2,5,5,4,5,6,3,7,6]\nl=[]\ndp=[0]*(n+1)\nl=list(map(int,input().split()))\nl.sort(reverse=True)\ndp[0]=1\nfor i in range(1,n+1):\n    for j in l:\n        if i-sz[j]>=0 and dp[i-sz[j]]>0:\n            dp[i]=max(dp[i],1+dp[i-sz[j]])\n#print(dp)\nans=[]\n#using the dp table construct the number \ncur=n\nwhile cur>0:#cur denotes count of available match sticks\n #   print(cur)\n    for j in l:\n        if cur-sz[j]>=0:\n            if dp[cur]==1+dp[cur-sz[j]] and dp[cur-sz[j]]>0:\n                ans.append(j)\n                cur-=sz[j]\n                break\nans.sort(reverse=True)\nprint((''.join(map(str,ans))))\n\n\n", "def main():\n    C = [2, 5, 5, 4, 5, 6, 3, 7, 6]\n    N, M = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    dp = [0] + [-1] * N\n    K = {a: C[a - 1] for a in A}\n\n    for i in range(min(K.values()), N + 1):\n        try:\n            dp[i] = max(dp[i - v] * 10 + k for k, v in list(K.items()) if i - v >= 0 and dp[i - v] >= 0)\n        except ValueError:\n            dp[i] = -1\n    print((dp[N]))\nmain()\n", "n,m=map(int,input().split())\na=list(map(int,input().split()))\nl=[0,2,5,5,4,5,6,3,7,6]\ndp=[0]+[-1]*(9*n)\nfor i in range(n):\n  for j in a:\n    if dp[i]>=0:\n      dp[i+l[j]]=max(dp[i+l[j]],dp[i]*10+j)\nprint(dp[n])", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na.sort(reverse=True)\nnum_of_matches = [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]\ndp = [-1] * (n+1)\ndp[0] = 0\nfor i in range(1, n+1):\n    val = -1\n    for aa in a:\n        if i - num_of_matches[aa] < 0:\n            continue\n        if i - num_of_matches[aa] == 0:\n            val = 1\n        elif dp[i - num_of_matches[aa]] > 0:\n            val = max(val, dp[i - num_of_matches[aa]] + 1)\n    dp[i] = val\n\nres = ''\nremain = dp[n]\nmatch = n\nwhile match > 0:\n    for i in range(m):\n        if match - num_of_matches[a[i]] >= 0 and remain - 1 == dp[match-num_of_matches[a[i]]]:\n            match -= num_of_matches[a[i]]\n            remain -= 1\n            res += str(a[i])\n            break\nprint(res)\n", "#!/usr/bin/env python3\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    # dig: \u30de\u30c3\u30c1\u672c\u6570 -> \u4f7f\u3048\u308b\u6570\u5b57\n    nm = [999, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n    dig = [None for i in range(8)]\n    for x in sorted(a):\n        dig[nm[x]] = x\n\n    # dp[j]: j\u672c\u306e\u30de\u30c3\u30c1\u3092\u4f7f\u3063\u3066\u4f5c\u308c\u308b\u6700\u5927\u306e\u6570 tuple(\u6841\u6570d, prevj, lastdig)\n    dp = [None for j in range(n + 1)]\n    dp[0] = (0, None, None)\n    for j in range(1, n + 1):  # \u3082\u3089\u3046\n        for use in [2, 3, 4, 5, 6, 7]:\n            jp = j - use\n            if jp < 0:\n                continue\n            if dig[use] is None:\n                continue\n            if dp[jp] is None:\n                continue\n            d = dp[jp][0] + 1\n            tup = (d, jp, dig[use])\n            if (dp[j] is None) or (dp[j][0] < d) or (dp[j][0] == d and dp[j][2] < dig[use]):\n                dp[j] = tup\n\n    res = []\n    j = n\n    while True:\n        d, jp, i = dp[j]\n        if jp is None:\n            break\n        res.append(str(i))\n        j = jp\n    assert len(res) == dp[n][0]\n\n    print((\"\".join(res)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():  \n  N,M=map(int,input().split())\n  A=list(map(int,input().split()))\n  dp=[2,5,5,4,5,6,3,7,6]\n  p=[]\n  q=[]\n  for i in range(M):\n    p.append(dp[A[i]-1])\n    q.append(A[i])\n  bp=[[0,0]for i in range(N+1)]\n  for i in range(N-1):\n    for j in range(len(p)):\n      if i+p[j]>N:\n        continue\n      if bp[i][0]==0:\n          if i!=0:\n              continue\n      bp[i+p[j]][0]=max(bp[i+p[j]][0],bp[i][0]+(10**bp[i][1])*q[j])\n      bp[i+p[j]][1]=bp[i][1]+1\n  print(bp[N][0])\ndef __starting_point():\n  main()\n__starting_point()", "N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nweight = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\ndp = [-1] * (N + 1)\ndp[0] = 0\nfor i in range(N + 1):  # dp\u30670~N\u672c\u306e\u30de\u30c3\u30c1\u3092\u63a2\u7d22\n    for a in A:  # A\u306b\u5165\u3063\u3066\u308b\u3082\u306e\uff08\u4f5c\u308c\u308b\u6570\u5b57\uff09\u3092\u63a2\u7d22\n        if i + weight[a] < N + 1:  # i+(\u4eca\u56de\u4f5c\u308b\u6570\u5b57\u306b\u5fc5\u8981\u306a\u30de\u30c3\u30c1)\u672c\u306e\u30de\u30c3\u30c1\u304cN\u4ee5\u4e0b\u3060\u3063\u305f\u3089Ok\n            dp[i + weight[a]] = max(dp[i + weight[a]], dp[i]\n                                    * 10 + a)\nprint((dp[N]))\n", "N,M=map(int,input().split())\n\nA=list(map(int,input().split()))\nA.sort(reverse=True)\nhonsuu=[0,2,5,5,4,5,6,3,7,6]\n\ndef ketadp(N,M,A):\n  dp=[0]*(N+1)\n  for i in range(N):\n    for j in A:\n      if (i+1-honsuu[j])==0 or (i+1-honsuu[j]>0 and dp[i+1-honsuu[j]]!=0):\n        dp[i+1]=max(dp[i+1],dp[i+1-honsuu[j]]+1)\n  return dp\n  \n\nans=\"\"\nketa=ketadp(N,M,A)\nremain=keta[N]\nmatch=N\n#print(keta)\n\nwhile(match>0):\n  for i in A:\n    #print(i,match,remain,keta[match-honsuu[i]])\n    if match-honsuu[i]<0:\n      continue;\n    if(keta[match-honsuu[i]]==remain-1) and not (match-honsuu[i]!=0 and remain==1):\n      ans+=str(i)\n      remain-=1\n      match-=honsuu[i]\n      break;\nprint(ans)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\ndp = [-1] * (n * 18)\nfor i in range(n * 9):\n    dp[i] = 0\nlis = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\nfor i in range(n):\n    cnt = -float(\"inf\")\n    for j in a:\n        cnt = max(cnt, dp[i + 1 - lis[j]] * 10 + j)\n    dp[i + 1] = cnt\nprint(dp[n])", "n, m = (int(x) for x in input().split())\nA = sorted([int(x) for x in input().split()])[::-1]\ncost = (0, 2, 5, 5, 4, 5, 6, 3, 7, 6)\ndp = [[0] * (n+1) for _ in range(m+1)]\nfor i in range(m):\n  for j in range(1, n+1):\n    dp[i+1][j] = max(dp[i+1][j], dp[i][j])\n    if j >= cost[A[i]]:\n      if dp[i+1][j-cost[A[i]]] == 0:\n        if j == cost[A[i]]:\n          dp[i+1][j] = max(A[i], dp[i][j])\n        else:\n          dp[i+1][j] = max(dp[i+1][j], dp[i][j])\n      else:\n        dp[i+1][j] = max(dp[i+1][j], 10 * dp[i+1][j-cost[A[i]]] + A[i])\nprint(dp[m][n])", "import sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\n\n\ndef main():\n    N, M = NMI()\n    A = NLI()\n\n    match_dict = {i+1: m for i, m in enumerate([2,5,5,4,5,6,3,7,6])}\n    usable_list = [[a, match_dict[a]] for a in A]\n    usable_list.sort(key=lambda x: (x[1], -x[0]))\n\n    # dp[i] \u306fi\u672c\u4f7f\u3063\u305f\u6642\u306e\u6700\u5927\u6570\n    dp = [-1]*(N+10)\n    dp[0] = 0\n\n    for i in range(N+1):\n        for num, m in usable_list:\n            dp[i+m] = max(dp[i+m], dp[i]*10+num)\n    print(dp[N])\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n, m, *a = list(map(int, open(0).read().split()))\n    t = {1: 2, 2: 5, 3: 5, 4: 4, 5: 5, 6: 6, 7: 3, 8: 7, 9: 6}\n    a.sort(reverse=True)\n\n    dp = [-float('Inf')] * (n + 10)\n    dp[0] = 0\n    for i in range(2, n + 1):\n        for j in a:\n            dp[i] = max(dp[i], dp[i - t[j]] + 1)\n\n    nums = []\n    for i in range(dp[n], 0, -1):\n        for x in a:\n            if dp[n - t[x]] == i - 1:\n                nums.append(x)\n                n -= t[x]\n                break\n\n    ans = ''.join(map(str, nums))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, m = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    L = [(1, 2), (2, 5), (3, 5), (4, 4), (5, 5), (6, 6), (7, 3), (8, 7), (9, 6)]\n    B = []\n    for num, cost in L:\n        if num in A:\n            B.append([num, cost])\n    B.sort(key=lambda x: -x[0])\n    dp = [-f_inf] * (n + 1)\n    dp[0] = 0\n    for i in range(n + 1):\n        for _, cost in B:\n            if i - cost == 0:\n                dp[i] = max(dp[i], dp[0] + 1)\n            elif i - cost > 0 and dp[i - cost] != 0:\n                dp[i] = max(dp[i], dp[i - cost] + 1)\n    j = 0\n    k = n\n    res = \"\"\n    while k > 0 and j < m:\n        num, cost = B[j]\n        if k - cost >= 0 and dp[k] - dp[k - cost] == 1:\n            res += str(num)\n            k -= cost\n        else:\n            j += 1\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby\n    #from itertools import product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, ceil\n    #from operator import itemgetter\n\n    #inf = 10**17\n    #mod = 10**9 + 7\n\n    n,m = map(int, input().split())\n    a = list(map(int, input().split()))\n    #\u4f7f\u3046\u672c\u6570\u306e\u7a2e\u985e\n    b = set()\n    matti = [2,5,5,4,5,6,3,7,6]\n    for i in a:\n        b.add(matti[i-1])\n\n    dp = [-1]*(n+1)\n    dp[0] = 0\n    for i in range(n+1):\n        for j in b:\n            if i >= j:\n                dp[i] = max(dp[i-j]+1, dp[i])\n\n    keta = dp[-1]\n    res = []\n    a.sort(reverse=True)\n    cnt = n\n    while cnt>0:\n        for i in a:\n            if cnt >= matti[i-1]:\n                if dp[cnt]-dp[cnt-matti[i-1]]==1:\n                    res.append(str(i))\n                    cnt -= matti[i-1]\n                    break\n    print(''.join(res))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nsys.setrecursionlimit(10000000)\nMOD = 10 ** 9 + 7\nINF = 10 ** 15\n\nfrom copy import deepcopy\ndef compare(A,B):\n    tot_a = sum(A)\n    tot_b = sum(B)\n    if tot_a > tot_b:\n        return A\n    if tot_b > tot_a:\n        return B\n    for i in range(9,0,-1):\n        if A[i] > B[i]:\n            return A\n        elif A[i] < B[i]:\n            return B\n\ndef main():\n    N,M = map(int,input().split())\n    A = list(map(int,input().split()))\n    match = (-1,2,5,5,4,5,6,3,7,6)\n\n    dp = [[0]*10 for _ in range(1 + N)]\n    changed = [0] * (N + 1)\n    changed[0] = 1\n    for i in range(N):\n        for j in A:\n            if i + 1 - match[j] >= 0 and changed[i + 1 - match[j]]:\n                B = deepcopy(dp[i + 1 - match[j]])\n                B[j] += 1\n                if compare(dp[i + 1],B) == B:\n                    dp[i + 1] = B\n                    changed[i + 1] = 1\n    ans = ''\n    for i in range(9,0,-1):\n        ans += str(i) * dp[-1][i] \n    print(ans)    \ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n, m, *a = list(map(int, open(0).read().split()))\n    t = {1: 2, 2: 5, 3: 5, 4: 4, 5: 5, 6: 6, 7: 3, 8: 7, 9: 6}\n    a.sort(reverse=True)\n\n    dp = [-float('Inf')] * (n + 10)\n    dp[0] = 0\n    for i in range(2, n + 1):\n        for j in a:\n            dp[i] = max(dp[i], dp[i - t[j]] + 1)\n\n    nums = []\n    k = dp[n]\n    while n:\n        for x in a:\n            if dp[n - t[x]] == k - 1:\n                nums.append(x)\n                n -= t[x]\n                break\n        k -= 1\n\n    ans = ''.join(map(str, nums))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "nim,mike = map(int,input().split())\narray = list(map(int,input().split()))\n\ndp = [-1 for i in range(nim+10)]\nl = [0,2,5,5,4,5,6,3,7,6]\ndp[0] = 0\nfor i in range(nim-1):\n    for s in array:\n        if dp[i] == -1 and i!=0:\n            continue\n        if dp[i + l[s]] < dp[i]*10+s:\n            dp[i + l[s]] = dp[i]*10+s\nprint(dp[nim])", "def main():\n    n, m, *a = list(map(int, open(0).read().split()))\n    t = {1: 2, 2: 5, 3: 5, 4: 4, 5: 5, 6: 6, 7: 3, 8: 7, 9: 6}\n    a.sort(reverse=True)\n    b = [t[i] for i in a]\n    dp = [-float('Inf')] * (n + 10)\n    dp[0] = 0\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - j] + 1 for j in b)\n\n    nums = []\n    for i in range(dp[n], 0, -1):\n        for x in a:\n            if dp[n - t[x]] == i - 1:\n                nums.append(x)\n                n -= t[x]\n                break\n\n    ans = ''.join(map(str, nums))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\nINF = float(\"inf\")\n# \u89e3\u8aac\u53c2\u7167\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)  # \u4f7f\u7528\u53ef\u80fd\u306f\u6570\u5b57\u306f\u5927\u304d\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u304a\u304f\n    cost = [-1, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n    # dp[i]:= \u30de\u30c3\u30c1i\u672c\u3067\u4f5c\u308c\u308b\u6700\u5927\u6841\u6570\n    dp = [-1] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for aj in a:\n            if i - cost[aj] < 0:\n                continue\n            dp[i] = max(dp[i], dp[i - cost[aj]] + 1)\n    digits = dp[n]\n    ans = \"\"\n    rest = n\n    # \u4e0a\u304b\u3089\u8caa\u6b32\n    while digits:\n        for aj in a:\n            if rest - cost[aj] < 0:\n                continue\n            if dp[rest - cost[aj]] == digits - 1:\n                ans += str(aj)\n                rest -= cost[aj]\n                digits -= 1\n                break\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = map(int, input().split())\na = list(map(int, input().split()))\n\nmatch_num = {1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\n\ndp = [-1] * (n+10)\ndp[0] = 0\n\nfor i in range(n):\n    for j in range(m):\n        nxt = match_num[a[j]]\n        if dp[i]>=0:\n            dp[i+nxt] = max(dp[i+nxt], dp[i]*10 + a[j])\nprint(dp[n])", "ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"Yes\") if fl else print(\"No\")\nimport collections\nimport math\nimport itertools\nimport heapq as hq\ncnt = [-1,2,5,5,4,5,6,3,7,6]\nn,m = ma()\nA = lma()\nuse=[(cnt[a],a) for a in A]\nuse.sort(key=lambda x:x[1],reverse=True)\nINF=10**9\ndp = [0]+[-INF]*(n+10)\nfor i in range(n):\n    if dp[i]==-INF:continue\n    for c,a in use:\n        dp[i+c]=max(dp[i+c],dp[i]+1)\nl = dp[n]\nans = [\"0\"]*l\nnum = n\nfor i in range(l):\n    for c,a in use:\n        if dp[num-c]==dp[num]-1:\n            ans[i]=str(a)\n            num-=c\n            break\nprint(\"\".join(ans))\n", "n,m = map(int,input().split())\nnum = {1:2,2:5,3:5,4:4,5:5,6:6,7:3,8:7,9:6}\na = list(map(int,input().split()))\na.sort(reverse = True)\ndp = [0]+[-1]*(n+1)\nfor i in range(n):\n    for j in a:\n        if i+num[j] <=n:\n            dp[i+num[j]] = max(dp[i+num[j]],dp[i]+1)\nans = []\nmatch = n\nwhile match > 0:\n    for i in a:\n        if match-num[i] >= 0 and dp[match-num[i]] == dp[match]-1:\n            match -= num[i]\n            ans.append(str(i))\n            break\nprint(\"\".join(ans))", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nmatchlist = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\nnumberlist = []\nfor i in range(m):\n    numberlist.append(matchlist[a[i]])\nnumberlist = set(numberlist)\n#dp[i]:i\u672c\u3067\u306emax\u6841\ndp = [-10000000]*(n+1)\ndp[0] = 0\nfor i in range(n):\n    for j in numberlist:\n        if i+j <= n:\n            dp[i+j] = max(dp[i+j], dp[i]+1)\n\n\nans = []\nd = dp[n]\na.sort(reverse = True)\nfor i in range(d):\n    for j in a:\n        if n - matchlist[j] >= 0:\n            if dp[n] == dp[n-matchlist[j]] + 1:\n                n -= matchlist[j]\n                ans.append(j)\n                break\nprint((\"\".join(map(str,ans))))\n", "n,m=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\np=[2,5,5,4,5,6,3,7,6]\nnum=[]\nfor x in a:\n\tnum.append(p[x-1])\ninf=10**8\ndp=[-inf]*(n+1)\ndp[0]=0\nfor i in range(n):\n\tfor j in range(m):\n\t\tif i+num[j]<=n and dp[i]!=-inf:\n\t\t\tdp[i+num[j]]=max(dp[i+num[j]],dp[i]+1)\nans=\"\"\nnow=n\nfor i in range(dp[n]):\n\tfor j in range(m-1,-1,-1):\n\t\tif now-num[j]<0:\n\t\t\tcontinue\n\t\tif dp[now-num[j]]==dp[now]-1:\n\t\t\tnow-=num[j]\n\t\t\tans+=str(a[j])\n\t\t\tbreak\nprint(ans)", "n, m = map(int, input().split())\nA = list(map(int, input().split()))\n\nd = {1:2, 2:5, 3:5, 4:4, 5:5, 6:6, 7:3, 8:7, 9:6}\n\nINF  =10**18\ndp = [-INF]*(n+1)\ndp[n] = 0\nfor i in reversed(range(1, n+1)):\n    for a in A:\n        j = i-d[a]\n        if j >= 0:\n            dp[j] = max(dp[j], dp[i]*10+a)\nprint(dp[0])", "N, M = list(map(int, input().split()))\nA = tuple(map(int, input().split()))\n\nM_lst = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\ndp = [-1] * (N + 10)\ndp[0] = 0\nfor i in range(N + 1):\n    if dp[i] == -1:\n        continue\n    for a in A:\n        dp[i + M_lst[a]] = max(dp[i + M_lst[a]], dp[i] * 10 + a)\nprint((dp[N]))\n", "n,m=map(int,input().split())\nl=list(map(int,input().split()))\nl.sort()\nx=[0,2,5,5,4,5,6,3,7,6]\nd=dict()\nfor j in l:\n    d[x[j]]=j\nINF=float('inf')\ndp=[-INF for i in range(n+1)]\ndp[0]=0\nl=d.keys()\nfor i in range(2,n+1):\n    for j in d.keys():\n        if j<=i:\n            dp[i]=max(dp[i],dp[i-j]*10+d[j])\nprint(dp[n])", "def main():\n    n, m, *a = list(map(int, open(0).read().split()))\n    t = {1: 2, 2: 5, 3: 5, 4: 4, 5: 5, 6: 6, 7: 3, 8: 7, 9: 6}\n    a.sort(reverse=True)\n    b = {}\n    for i in a:\n        x = t[i]\n        if b.get(x) is not None:\n            a.remove(i)\n        else:\n            b[x] = 0\n\n    b = [t[i] for i in a]\n    dp = [-float('Inf')] * (n + 10)\n    dp[0] = 0\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - j] + 1 for j in b)\n\n    nums = []\n    for i in range(dp[n], 0, -1):\n        for x in a:\n            if dp[n - t[x]] == i - 1:\n                nums.append(x)\n                n -= t[x]\n                break\n\n    ans = ''.join(map(str, nums))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N, M = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n\n    match = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\n    dp = [0] * (N + 1)\n\n    for i in range(1, N + 1):\n        for a in A:\n            if match[a] <= i:\n                if match[a] == i or dp[i - match[a]] != 0:\n                    dp[i] = max(dp[i], dp[i - match[a]] * 10 + a)\n\n    print((dp[-1]))\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA.sort(reverse=True)\n\nmatch = [10**18, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\n# \u4f5c\u308c\u308b\u6570\u5b57\u306e\u500b\u6570\ndp = [-10**18] * (N + 1)\ndp[0] = 1\n\nfor i in range(N):\n    for a in A:\n        m = match[a]\n        if i + m <= N and dp[i + m] < dp[i] + 1:\n            dp[i + m] = dp[i] + 1\n\nans = []\nwhile N > 0:\n    for a in A:\n        m = match[a]\n        if N - m >= 0 and dp[N - m] + 1 == dp[N]:\n            ans.append(a)\n            N -= m\n            break\n\nans.sort(reverse=True)\n\nprint((''.join(map(str, ans))))\n", "N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA.sort(reverse=True)\nreq = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\nt = [-1]*(N+1)\nt[0] = 0\nfor a in A:\n    q = req[a]\n    for i in range(q, N+1):\n        t[i] = max(t[i], t[i-q] * 10 + a)\nprint((t[-1]))\n", "# D - Match Matching\n\nN, M = map(int, input().split())\nA = list(int(x) for x in input().split())\nmatch_list = [('0', 6), ('1', 2), ('2', 5), ('3', 5), ('4', 4), ('5', 5), ('6', 6), ('7', 3), ('8', 7), ('9', 6)]\nMA = []\nfor a in A:\n    MA.append(match_list[a])\nMA.sort(key=lambda x: x[0], reverse=True)\n\n# dp[i] := i\u672c\u306e\u30de\u30c3\u30c1\u3092\u4f7f\u3063\u3066\u4f5c\u308c\u308b\u6700\u5927\u6841\u6570\ndp = [-1] * (N+1)\ndp[0] = 0\nfor i in range(N+1):\n    for j in range(M):\n        if i-MA[j][1] >= 0:\n            dp[i] = max(dp[i], dp[i-MA[j][1]] + 1)\n\nremain_keta = dp[N]\nremain_match = N\nans = ''\nfor i in range(dp[N]):\n    for ma in MA:\n        # \u5927\u304d\u3044\u6570\u5b57\u304b\u3089\u4e00\u6841\u4f7f\u3063\u305f\u6642\u306b\u3001\n        # \u6b8b\u308a\u6841\u304c\u3061\u3087\u3046\u3069\u4e00\u6841\u6e1b\u3063\u3066\u3044\u308b\u5834\u5408\n        if remain_match >= ma[1] and dp[remain_match - ma[1]] == remain_keta - 1:\n            ans +=  ma[0]\n            remain_keta -= 1\n            remain_match -= ma[1]\n            break\n\nprint(ans)", "N,M = map(int,input().split())\nA = list(map(int,input().split()))\nC = [0,1,4,4,3,4,5,2,6,5]\ndp = N*[0]+9*[-1]\n\nfor n in range(N):\n  dp[n+1] = max(a+10*dp[n-C[a]] for a in A)\n\nprint(dp[N])", "N, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nA.sort()\nA.reverse()\n\nmatch = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\n\ndp = [-N-N] * (N + 1)\ndp[0] = 0\n\nfor i in range(1, N + 1):\n  for j in A:\n    if i >= match[j]:\n      dp[i] = max(dp[i], dp[i - match[j]] + 1)\n\nmax_list = []\nwhile N:\n  for j in A:\n    if N >= match[j] and dp[N] == dp[N - match[j]] + 1:\n      max_list.append(j)\n      N -= match[j]\n      break\n\nfor j in max_list:\n  print(j, end=\"\")\nprint(\"\")", "n,m=map(int, input().split())\nlst=list(map(int,input().split()))\nweight=[0,2,5,5,4,5,6,3,7,6]\nDP=[-1]*(n+1)\nDP[0]=0\nfor i in range(n+1):\n  for x in lst:\n    if i+weight[x]<n+1:\n      DP[i+weight[x]]=max(DP[i+weight[x]], DP[i]*10+x)\nprint(DP[n])", "from collections import defaultdict\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nL = {1: 2, 2: 5, 3: 5, 4: 4, 5: 5, 6: 6, 7: 3, 8: 7, 9: 6}\nD = defaultdict(int)\n\nfor i in A:\n  if D[L[i]] < i:\n    D[L[i]] = i\n\nINF = float(\"inf\")\ndp = [-INF]*(N+1)\ndp[0] = 0\n\nfor i in range(1, N+1):\n  for j in D.keys():\n    if i-j >= 0:\n      dp[i] = max(dp[i], dp[i-j] + 1)\n    else:\n      dp[i] = max(dp[i], -INF)\n\nans = \"\"\ntemp = N\n\nwhile temp > 0:\n  for i, x in sorted(D.items(), key=lambda x: x[1], reverse=True):\n    if temp - i >= 0 and dp[temp-i] == dp[temp] - 1:\n      ans += str(x)\n      temp -= i\n      break\n\nprint(ans)", "import sys\nN,M = map(int,sys.stdin.readline().rstrip().split())\nA = list(map(int,sys.stdin.readline().rstrip().split()))\n\nfrom collections import defaultdict\n\nd = defaultdict(int)  # d[i] = (A\u306e\u4e2d\u3067i\u672c\u7528\u3044\u3066\u8868\u305b\u308b\u6700\u5927\u306e\u6570)\nfor i in range(M):\n    if A[i] == 1:\n        d[2] = 1\n    elif A[i] == 7:\n        d[3] = 7\n    elif A[i] == 4:\n        d[4] = 4\n    elif A[i] in [2,3,5]:\n        d[5] = max(d[5],A[i])\n    elif A[i] in [6,9]:\n        d[6] = max(d[6],A[i])\n    else:\n        d[7] = 8\n\nB = list(d.keys())\nB.sort()\n\na = B[0]\nB[0] = 0\n\nif N % a == 0:\n    print(''.join([str(d[a])]*(N//a)))\n    return\n\nfrom itertools import combinations_with_replacement\n\nC = []\n\nfor i in range(N//a,max(-1,N//a-7),-1):  # a\u3092i\u56de\u7528\u3044\u308b\n    x = N-a*i\n    for u in list(combinations_with_replacement(B,5)):\n        if sum(u) == x:\n            s = []\n            for j in range(5):\n                if u[j] != 0:\n                    s.append(u[j])\n            C.append((i,s))\n\nD = []\nfor i,j in C:\n    if i + len(j) == C[0][0] + len(C[0][1]):\n        D.append((i,j))\n\nm = min(D[i][0] for i in range(len(D)))\n\nq,r,s = 0,0,0\nfor i,j in D:\n    X = [d[a]]*(i-m) + [d[k] for k in j]\n    X.sort(reverse=True)\n    M = ''\n    for k in X:\n        M += str(k)\n    M = int(M)\n    if q < M:\n        q,r,s = M,i,j\n\nE = [d[a]]*r + [d[i] for i in s]\nE.sort(reverse=True)\n\nans = ''\nfor i in E:\n    ans += str(i)\nprint(ans)"]