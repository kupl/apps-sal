["def main():\n    n = int(input())\n    teams = [input().split() for _ in range(n)]\n    ans = [list((0, 0)) for _ in range(n)]\n    home = dict()\n\n    for i in range(n):\n        home[teams[i][0]] = home.get(teams[i][0], 0) + 1\n\n    for i in range(n):\n        ans[i][0] = n - 1 + home.get(teams[i][1], 0)\n        ans[i][1] = n - 1 - home.get(teams[i][1], 0)\n\n    for i in range(n):\n        ans[i] = '{} {}'.format(ans[i][0], ans[i][1])\n\n    print('\\n'.join(ans))\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nf = sys.stdin\nn = int(f.readline().strip())\n\nA = []\nF = {}\nfor k in range(n):\n    t = list(map(int, f.readline().strip().split()))\n    A.append(t)\n    if t[0] in F:\n        F[t[0]] += 1\n    else :\n        F[t[0]] = 1\n\nres = ''\np = []\nfor u in A:\n\n    if u[1] in F:\n       p.append(str(n-1+F[u[1]])+' '+str(n-1-F[u[1]]))\n    else:\n       p.append(str(n-1)+' '+str(n-1)) \n\nprint('\\n'.join(p))\n", "n = int(input())\na = []\nb = [0] * 100001\nfor i in range(n):\n  x, y = map(int, input().split())\n  a += [y]\n  b[x] += 1\nprint(\"\\n\".join(\"{} {}\".format(n - 1 + b[y], n - 1 - b[y]) for y in a))", "n = int(input())\na = [0] * 10 ** 6\nb = []\nfor i in range(n):\n    q, w = map(int, input().split())\n    a[q] += 1\n    b.append(w)\nfor i in range(n):\n    print(n - 1 + a[b[i]], n - 1 - a[b[i]])", "def main():\n    n = int(input())\n    teams = [input().split() for _ in range(n)]\n    ans = [list((0, 0)) for _ in range(n)]\n    home = dict()\n\n    for i in range(n):\n        home[teams[i][0]] = home.get(teams[i][0], 0) + 1\n\n    for i in range(n):\n        ans[i][0] = n - 1 + home.get(teams[i][1], 0)\n        ans[i][1] = n - 1 - home.get(teams[i][1], 0)\n\n    for i in range(n):\n        ans[i] = '{} {}'.format(ans[i][0], ans[i][1])\n\n    print('\\n'.join(ans))\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    teams = [input().split() for _ in range(n)]\n    ans = [[0, 0] for _ in range(n)]\n    home = dict()\n\n    for i in range(n):\n        home[teams[i][0]] = home.get(teams[i][0], 0) + 1\n\n    for i in range(n):\n        ans[i][0] = n - 1 + home.get(teams[i][1], 0)\n        ans[i][1] = n - 1 - home.get(teams[i][1], 0)\n\n    for i in range(n):\n        ans[i] = '{} {}'.format(ans[i][0], ans[i][1])\n\n    print('\\n'.join(ans))\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    teams = [list(map(int, input().split())) for _ in range(n)]\n    ans = [[n - 1, 0] for _ in range(n)]\n    home = [0] * ((10 ** 5) + 1)\n\n    for i in range(n):\n        home[teams[i][0]] += 1\n\n    for i in range(n):\n        ans[i][0] += home[teams[i][1]]\n        ans[i][1] = n - 1 - home[teams[i][1]]\n\n    for i in range(n):\n        ans[i] = '{} {}'.format(ans[i][0], ans[i][1])\n\n    print('\\n'.join(ans))\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\nteams = [list(map(int, input().split())) for _ in range(n)]\nans = [[n - 1, 0] for _ in range(n)]\nhome = [0] * ((10 ** 5) + 1)\n\nfor i in range(n):\n    home[teams[i][0]] += 1\n\nfor i in range(n):\n    ans[i][0] += home[teams[i][1]]\n    ans[i][1] = n - 1 - home[teams[i][1]]\n\nfor i in range(n):\n    ans[i] = '{} {}'.format(ans[i][0], ans[i][1])\n\nprint('\\n'.join(ans))", "def main():\n    n = int(input())\n    teams = [list(map(int, input().split())) for _ in range(n)]\n    home = [0] * ((10 ** 5) + 1)\n    ans = list()\n\n    for i in range(n):\n        home[teams[i][0]] += 1\n\n    print('\\n'.join('{} {}'.format(n - 1 + home[teams[i][1]], n - 1 - home[teams[i][1]]) for i in range(n)))\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    teams = [input().split() for _ in range(n)]\n    home = dict()\n    ans = list()\n\n    for i in range(n):\n        home[teams[i][0]] = home.get(teams[i][0], 0) + 1\n\n    print('\\n'.join('{} {}'.format(n - 1 + home.get(teams[i][1], 0),\n            n - 1 - home.get(teams[i][1], 0)) for i in range(n)))\n\ndef __starting_point():\n    main()\n__starting_point()", "__author__ = 'Lipen'\n\ndef main():\n\tn = int(input())\n\tX = []\n\tY = []\n\tcolor = [0]*100001\n\n\tfor i in range(n):\n\t\tx,y = map(int, input().split())\n\t\tX.append(x)\n\t\tY.append(y)\n\t\tcolor[x] += 1\n\n\ts = ''\n\tfor i in range(n):\n\t\tz = color[Y[i]]\n\t\ts += '{} {}\\n'.format(n-1+z, n-1-z)\n\tprint(s[:-1])\n\nmain()", "n = int(input())\nc = [0] * 100001\ny = [0] * n\nfor i in range(n):\n    x, y[i] = list(map(int, input().split()))\n    c[x]+=1\n\nfor i in range(n):\n    a = n - 1 + c[y[i]]\n    b = 2 * n - 2 - a\n    print(a, b)\n\n", "n = int(input())\na = [0 for i in range(n)]\nx = [0 for i in range(100001)]\nfor i in range(n):\n    s, a[i] = map(int, input().split())\n    x[s] += 1\nfor i in range(n):\n    print(n - 1 + x[a[i]], n - 1 - x[a[i]])", "def ret(n):\n    if n in col:\n        return(col[n])\n    else:\n        return(0)\nn = int(input())\ncol = {}\nt = []\nfor i in range(n):\n    a = input().split()\n    t.append([n-1,a[1]])\n    if a[0] not in col:\n        col[a[0]] = 1\n    else:\n        col[a[0]] += 1\n\nprint('\\n'.join('%d %d' % (x[0] + ret(x[1]), (n-1) - ret(x[1])) for x in t))\n", "n = int(input())\nu, v = [0] * n, [0] * 100001\nfor i in range(n):\n    x, y = map(int, input().split())\n    u[i] = y\n    v[x] += 1\nfor i in range(n):\n    k = v[u[i]]\n    u[i] = str(n - 1 + k) + ' ' + str(n - 1 - k)\nprint('\\n'.join(u))", "n = int( input() )\nx, y = [0] * n, [0] * n\nfor i in range( n ):\n    x[i], y[i] = map( int, input().split() )\nans = [0] * 100001\nfor elm in x:\n    ans[elm] += 1\nfor elm in y:\n    print( n - 1 + ans[elm], n - 1 - ans[elm] )", "n = int(input())\n\nlocal = [0]*(10**5+1)\n\nkits = []\n\nfor i in range(n):\n    x, y = list(map(int, input().split(\" \")))\n    kits.append((x, y))\n    local[x] += 1\n\nres = [\"%s %s\" % (n-1+local[y], n-1-local[y]) for (x, y) in kits]\n\nprint(\"\\n\".join(res))", "n = int(input())\nhome = {}\nguest = []\n\nfor i in range(n):\n    h, g = [int(c) for c in input().split()]\n    home[h] = 1 if not(h in home) else home[h] + 1\n    guest.append(g)\n\nfor i in range(n):\n    h = (n - 1) + (0 if not(guest[i] in home) else home[guest[i]])\n    print('%s %s' % (h, ((n - 1) * 2) - h))\n", "import sys\n\n\ndef main():\n    line_num = 0\n    teams_num = 0\n    teams_per_color = {}\n    teams = []\n    # read input data\n    for line in sys.stdin:\n        if line_num == 0:\n            teams_num = int(line.strip())\n        elif line_num <= teams_num:\n            res = list([int(x) for x in line.strip().split(' ')])\n            if res[0] not in teams_per_color:\n                teams_per_color[res[0]] = 0\n            teams_per_color[res[0]] = teams_per_color[res[0]] + 1\n            teams.append((res[0], res[1]))\n        line_num += 1\n        if line_num > teams_num:\n            break\n    # - if 1 color belongs to 1 team only -> there will be no problems with this\n    # team and this team will wear this color during all games of one type.\n    # - if all teams that wear this color have one kit_type (all play away\n    # games in this color, for example, then there will be no problems, as\n    # we don't have away-away team problem)\n    # - otherwise have to calculate 'delta': times when need to change AWAY\n    # kit to HOME one\n    for i in range(0, teams_num):\n        # if away color is shared among some home-teams, then have to change\n        away_color = teams[i][1]\n        result = (teams_num - 1 + teams_per_color.get(away_color, 0),\n                  teams_num - 1 - teams_per_color.get(away_color, 0))\n        print(\"{} {}\".format(result[0], result[1]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nnbColors = [0 for i in range(10**5 + 1)]\nteamAway = []\nfor i in range(n):\n\thome, away = map(int, input().split())\n\tnbColors[home] += 1\n\tteamAway.append(away)\n\nfor away in teamAway:\n\tprint(n - 1 + nbColors[away], n - 1 - nbColors[away])", "n = int(input())\ni = 0\nl1 = list()\nl2 = list()\nl3 = [0] + [0] * 10**5\nl4 = [0] + [0] * 10**5\ni = 0\nwhile i < n:\n    x, y = list(map(int,input().split()))\n    l1.append(x)\n    l2.append(y)\n    l3[x] += 1\n    l4[y] += 1\n    i += 1\n\ni = 0\nfor i in range(n):\n    print(n-1 + l3[l2[i]], n-1 - l3[l2[i]])\n    \n", "n = int(input())\na = [0]*n\nx = [0]*100001\n\nfor i in range(n):\n    s, a[i] = list(map(int, input().split()))\n    x[s] += 1\n\nfor i in range(n):\n    print(n-1+x[a[i]], n-1-x[a[i]])\n", "n,i,o = int(input()),[0 for z in range(10**5+1)],[]\nfor k in range(n):\n    inp1,inp2 = list(map(int,input().split()))\n    i[inp1]+=1; o.append(inp2)\nfor k in o: print(n-1+i[k], n-1-i[k])", "import sys\nimport math\n\nn = int(sys.stdin.readline())\n\na = [0] * 100000\nb = [0] * 100000\n\nd = []\nfor i in range(n):\n    h, g = [int(x) for x in (sys.stdin.readline()).split()]\n    d.append((h - 1, g - 1))\n    a[h - 1] += 1\n    b[g - 1] += 1\n   \nfor i in d:\n    print(str((n - 1) + (a[i[1]])) + \" \" + str(n - a[i[1]] - 1))", "import sys\nimport math\n\nn = int(sys.stdin.readline())\n\na = [0] * 100000\n\nd = []\nfor i in range(n):\n    h, g = [int(x) for x in (sys.stdin.readline()).split()]\n    d.append(g - 1)\n    a[h - 1] += 1\n   \nfor i in d:\n    print(str((n - 1) + (a[i])) + \" \" + str(n - a[i] - 1))"]