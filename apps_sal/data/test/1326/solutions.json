["import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n#import numpy as np\ndef main():\n    n = int(input())\n    if n == 1:\n        print((1))\n        return\n    r = 0\n    for i1 in range(1, n + 1):\n        num_of_div = n // i1\n        r += num_of_div * (num_of_div + 1) // 2 * i1\n    print(r)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nN=int(sys.stdin.readline())\nans=sum((N//x)*(N//x+1)*x//2 for x in range(1,N+1))\nprint(ans)\n", "n=int(input())\nans=0\nfor i in range(1,n+1):\n    d=n//i\n    ans+=i*d*(d+1)//2\nprint(ans)", "N = int(input())\nans = 0\nfor i in range(1, N+1):\n    j = N // i\n    ans += i * j * (j+1) // 2\n\nprint(ans)\n", "#!/usr/bin/env python3\n\n#                 N    N'\n#   | 1  2  3  4  5\n# 1 | 1  2  3  4  5 :  N // 1   1 * N' (N'+1) // 2\n# 2 |    2     4    :  N // 2   2 * N' (N'+1) // 2\n# 3 |       3       :  N // 3   3 * N' (N'+1) // 2\n# 4 |          4    :  N // 4   4 * N' (N'+1) // 2\n# 5 |             5 :  N // 5   5 * N' (N'+1) // 2\n\n\ndef solve(N):\n    answer = 0\n    for i in range(1, N + 1):\n        mprime = N // i\n        answer += i * (mprime * (mprime + 1)) // 2\n    return answer\n\n\ndef main():\n    N = int(input())  # type: int\n    answer = solve(N)\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\nans = 0\nfor i in range(1, n+1):\n    k = n // i\n    ans += k*(k+1)*i//2\nprint(ans)", "n = int(input())\nans = 0\nfor i in range(1,n+1):\n  temp = n // i\n  ans += (temp * i * (temp + 1))//2\nprint(ans)", "n = int(input())\nans = 0\nfor i in range(1,n+1):\n    m = n // i\n    ans += m*(m+1)*i//2\nprint(ans)", "N = int(input())\n\nans = 0\nfor i in range(1, N+1):\n    ans += i*(N//i*(N//i+1))//2\nprint(ans)", "def solve(n):\n    su = 0\n    for i in range(1, n+1):\n        m = n//i\n        su += m*(2*i + (m-1)*i)//2\n    return su\n\nn = int(input())\nprint(solve(n))", "# AOT\u30b3\u30f3\u30d1\u30a4\u30eb\u30c6\u30b9\u30c8\nimport sys\n\n\ndef solve(n):\n    su = 0\n    for i in range(1, n+1):\n        m = n//i\n        su += m*(2*i + (m-1)*i)//2\n    return su\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n    from numba.pycc import CC\n\n    cc = CC('my_module')\n    cc.export('solve', '(i8)')(solve)\n    cc.compile()\n    return\n\nn = int(input())\nprint(solve(n))", "def func(n):\n    return n*(n+1)//2\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    N = int(input())\n    ans = 0\n    for i in range(1,N+1):\n        ans += i * func(N//i)\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nans = 0\nfor i in range(1,N+1):\n    k = N // i\n    ans += i * k * (k+1) // 2\nprint(ans)", "n = int(input())\nans = 0\nfor i in range(1,n+1):\n    ans += ((i+i*(n//i))*(n//i))//2\n    #print(ans)\nprint(ans)", "N=int(input());a=0\nfor i in range(1,N + 1):b=N//i;a+=(b*(b+1)*i//2)\nprint(a)\n", "N = int(input())\nans = 0\nfor i in range(1, N + 1):\n    res = N // i\n    ans += res*(res+1)//2*i\nprint(ans)", "n = int(input())\ncnt = 0\nfor i in range(1, n+1):\n  cnt += i * (n // i) * (n // i + 1) // 2\nprint(cnt)", "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nimport numpy as np\ndef main():\n    n = int(input())\n    if n == 1:\n        print((1))\n        return\n    divs = np.arange(1, n + 1)\n    divs2 = n // divs\n    divs3 = divs2 * (divs2 + 1) // 2\n    divs3 = divs3 * divs\n    r = divs3.sum()\n    print(r)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n\n    N = int(input())\n\n    ans = 0\n\n    for i in range(1,N+1):\n        n_max = int(N/i)\n        ans += n_max*(n_max+1)*i\n\n    print((int(ans/2)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input());print(sum((x:=n//i)*(x+1)*i//2 for i in range(1,n+1)))", "#\u89e3\u8aacAC\nN=int(input())\nans=0\nfor i in range(1,N+1):\n    max_i_multi=N//i\n    ans+=(max_i_multi*(max_i_multi+1)*i)//2\nprint(ans)", "import sys\n#import numpy as np\n#from collections import defaultdict\nimport math\n#from collections import deque\n\ninput = sys.stdin.readline\n#import numpy as n\n\n\n\ndef main():\n\n    N = int(input())\n    ans =0\n    for i in range(1,N+1):\n        num =   N//i\n        ans += num*(num+1)//2 *i\n\n    print(ans)\n\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main(N):\n    x = 0\n    for a in range(1, N+1):\n        b=N//a\n        x += a*b*(b+1)//2\n    return x\n \nN = int(input())\nprint(main(N))", "N = int(input())\n\nsum_num = 0\nfor i in range(1, N+1):\n    x = N//i\n    m = (x*(x+1) // 2) * i\n    sum_num += m\n\nprint(sum_num)", "n = int(input())\nans = 0\nfor i in range(1,n+1):\n  temp = n // i\n  ans += (temp * i * (temp + 1))//2\nprint(ans)", "n = int(input())\n\nans = 0\nfor i in range(1,n+1):\n  k = n//i\n  ans += i*(k*(k+1)//2)\nprint(ans)", "n = int(input())\nans = 0\n\nfor i in range(1, n+1):\n    t = n//i\n    ans += t*(t+1)*i//2\nprint(ans)\n    \n", "\nn = int(input())\nans = 0\nx = n // 2\nfor i in range(1, n + 1):\n    m = n // i\n    ans += i * ((m + 1) * m) // 2\nprint(ans)\n", "def solve(string):\n    n = int(string)\n    return str(sum(i * (n // i) * (n // i + 1) // 2 for i in range(1, n + 1)))\n\n\ndef __starting_point():\n    import sys\n    print((solve(sys.stdin.read().strip())))\n\n__starting_point()", "n = int(input())\n\nans = 0\ns = 1\nfor a in range(1, int(n ** .5) + 1):\n    div = n // a\n    ans += ((div + 1) * div // 2 - s) * a * 2 + a * a\n    s += a + 1\n\nprint(ans)\n", "\n\"\"\"\ndef factorization(n):\n    if (n == 1 ):\n        return [1]\n    arr = []\n    temp = n\n\n    \n    for i in range(2, int(-(-n**0.5//1))+1) :\n        if ( temp % i == 0):\n            cnt = 0\n            while (temp % i == 0):\n                cnt +=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n    return [arr[1]+1 for arr in arr ]\n\n#print(factorization(N))\n\nsum_ans = 0\ndef cal(list):\n    ans = 1\n    for i in list:\n        ans *= i\n\n    return ans\n\n\nfor i in range(1,N+1):\n    #print(factorization(i),i)\n    sum_ans += i * cal(factorization(i))\n    #len\u304c\u639b\u3051\u7b97\n\nprint(sum_ans)\n\"\"\"\nn=int(input())\nans=0\nfor i in range(1,n+1):\n    d=n//i\n    ans+=i*d*(d+1)//2\nprint(ans)\n\n", "import sys\ninput = sys.stdin.readline\n\n#n = int(input())\n#l = list(map(int, input().split()))\n\n'''\na=[]\nb=[]\nfor i in range():\n    A, B = map(int, input().split())\n    a.append(A)   \n    b.append(B)'''\n\n\nn=int(input())\nans=0\nfor i in range(1,n+1):\n    ans+=i*(n//i)*(1+n//i)//2\nprint(ans)", "N = int(input())\n\nans = 0\nfor i in range(1, N + 1):\n    x = N // i\n    ans += i * x * (x + 1) // 2\nprint(ans)\n", "from numba import njit, i8\n\n\n@njit(i8(i8))\ndef solve(N):\n    ans = 0\n    for i in range(1, N + 1):\n        j = N // i\n        ans += j * (j + 1) // 2 * i\n    return ans\n\n\nN = int(input())\nprint((solve(N)))\n", "import numpy as np\nfrom numba import njit\n\n@njit\ndef main(N):\n    spf = np.zeros(N+1,np.int32)\n    prime = np.zeros(N+1,np.int32)\n    index = 0\n    for i in range(2,N+1):\n        if not spf[i]:\n            spf[i] = i\n            prime[index] = i\n            index += 1\n        for j in range(index):\n            if prime[j] > i or i*prime[j] > N:\n                break\n            spf[i*prime[j]] = prime[j]\n    ans = 0\n    for k in range(1,N+1):\n        n = k\n        before = spf[n]\n        count = 0\n        fk = 1\n        while n > 1:\n            if spf[n] == before:\n                count += 1\n                n //= spf[n]\n            else:\n                fk *= (count+1)\n                before = spf[n]\n                count = 1\n                n //= spf[n]\n        fk *= (count+1)\n        ans += k*fk\n    print(ans)\n    \nN = int(input())\nmain(N)", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nimport numba\ndef main():\n    @numba.njit\n    def solve(n):\n        r = 0\n        for i1 in range(1, n + 1):\n            y = n // i1\n            r += y * (y + 1) // 2 * i1\n        return r\n    no = int(input())\n    print(solve(no))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nimport sys\nimport os\nfrom operator import mul\nimport numpy as np\n# import sympy\n\nsys.setrecursionlimit(10**7)\n\ndef _S(): return sys.stdin.readline().rstrip()\ndef I(): return int(_S())\ndef LS(): return list(_S().split())\ndef LI(): return list(map(int,LS()))\n\nif os.getenv(\"LOCAL\"):\n    inputFile = basename_without_ext = os.path.splitext(os.path.basename(__file__))[0]+'.txt'\n    sys.stdin = open(inputFile, \"r\")\nINF = float(\"inf\")\n\nN = I()\nans = 0\n\n# \u8db3\u3057\u65b9\u306e\u898b\u65b9\u3092\u5909\u3048\u308b\u3002\u7b49\u5dee\u6570\u5217\u306e\u548c\u3092K\u307e\u3067\u8db3\u3059\n# 1 + 2 + 3 + 4 +...\n#   + 2     + 4 +...\nfor i in range(1,N+1):\n    # N\u3092\u8d85\u3048\u306a\u3044\u6574\u6570\n    y = N//i\n    sum = y*(y+1)*i/2\n    ans += sum\n\nprint(int(ans))\n\n\n\n\n\n# \u7d20\u6570 \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\ndef seachPrimeNum(N):\n   max = int(np.sqrt(N))\n   seachList = [i for i in range(2,N+1)]\n   primeNum = []\n   while seachList[0] <= max:\n       primeNum.append(seachList[0])\n       tmp = seachList[0]\n       seachList = [i for i in seachList if i % tmp != 0]\n   primeNum.extend(seachList)\n   return primeNum\n\n# \u7d04\u6570\ndef divisor_count(n):\n    divisors = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors += 1\n            if i != n // i:\n                divisors += 1\n\n    return divisors", "n=int(input())\n\nans=0\nfor j in range(1,n+1): # \u5272\u308b\u6570\n\ta=j #\u521d\u9805\n\td=n//j #\u9805\u6570\n\ttmp=(a+(a*d))*d//2\n\tans+=tmp\n\t\nprint(ans)", "n = int(input())\ncount = 0\nfor i in range(1,n+1):\n    count += i * (n//i)*((n//i)+1)/2\nprint(int(count))", "n = int(input())\nans = 0\nfor a in range(1, n + 1):\n    num = n // a\n    ans += num * (num + 1) // 2 * a\nprint(ans)", "import numba\n\n@numba.njit\ndef main(N):\n    x = 0\n    for i in range(1,N+1):\n        for j in range(i,N+1,i):\n            x += j\n    return x\nN = int(input())\nprint(main(N))", "N = int(input())\nans = 0\nfor i in range(1, N + 1):\n    M = N // i\n    ans += M * (M + 1) // 2 * i\nprint(ans)\n", "n=int(input())\nans=0\nfor i in range(1,n+1):\n    val=n//i\n    ans+=i*(val)*(val+1)/2\n    # print(ans)\nprint(int(ans))", "n=int(input())\nprint(sum(i*(n//i*(n//i+1))//2 for i in range(1,n+1)))", "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nfrom functools import reduce\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn = INT()\nans = 0\nfor x in range(1, n+1):\n    y = n // x\n    ans += y * (y + 1) * x // 2\nprint(ans) ", "def main():\n    n = int(input())\n    ans = 0\n    for k in range(1,n+1):\n        ans += k * (n//k) * (n//k+1) //2\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N=int(input())\ns=0\nfor i in range(1,N+1):\n  s+=i*(N//i)*(N//i+1)//2\nprint(s)", "n = int(input())\nans= 0\nfor i in range(1,n+1):\n  j = n//i\n  ans += j*(j+1)*i/2\nprint(int(ans))", "def main():\n    n = int(input())\n    ans = 0\n    for i in range(1, n+1):\n        tmp = n//i\n        ans += i*tmp*(tmp+1)//2\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    N = int(input())\n    ans = 0\n    for x in range(1, N + 1):\n        # x(1+2+3+...+e)\n        e = N // x\n        ans += x * e * (1 + e) // 2\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def solve():\n    N = int(input())\n    ans = 0\n    for k in range(1, N+1):\n        x = N // k\n        ans += x * (k + x*k) // 2\n    print(ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "N=int(input())\nans=0\nfor i in range(1,N+1):\n    cnt=N//i\n    ans+=cnt*(cnt+1)//2*i\nprint(ans)\n", "N = int(input())\nans = 0\nfor i in range(1,N+1):\n  tmp = N // i\n  ans += ((tmp*i + i) * tmp)/2\nprint(int(ans))", "N = int(input())\nans = 0\nfor i in range(1,N+1):\n    val = N // i\n    ans += val*(val+1)*i//2\nprint(ans)", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return list(map(int,input().split()))\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nN = k()\ncount = 0\nfor i in range(1,N+1):\n    t = N//i\n    count += i * t*(t+1)/2\nprint((int(count)))\n", "N = int(input())\nans = 0\n\nfor i in range(1, N + 1):\n\n    cnt = N // i\n    ans += (cnt * (cnt + 1) * i // 2) \n\nprint(ans)\n", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\ndef main():\n    n = int(input())\n    if n == 1:\n        print(1)\n        return\n    r = 0\n    for i1 in range(1, n + 1):\n        y = n // i1\n        r += y * (y + 1) // 2 * i1\n    print(r)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\n\nans = 0\n\nfor j in range(1, N+1):\n    n = N // j\n    ans += n * (2*j+(n-1)*j) // 2\n\nprint(ans)\n\n", "N = int(input())\nprint(sum(N//n*(N//n+1)*n//2 for n in range(1,1+N)))", "N=int(input())\nif N==1:\n    print((1))\n    return\ndef divisor(n):\n    m=N//n\n    return n*m*(m+1)//2\nM=N//2\nans=0\nfor i in range(2,M+1):\n    ans+=divisor(i)\nans+=N*(N+1)-M*(M+1)//2\nprint(ans)\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n    \n\n        \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n        \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n\n\n    \n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n", "def main():\n    N = int(input())\n    ans = 0\n    for x in range(1, int(N ** 0.5) + 1):\n        # x(1+2+3+...+e)\n        e = N // x\n        ans += x * (e * e + e - x * x)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\ncount = 0\nfor i in range(1,N+1):\n    M = N//i\n    count += i*(M*(M+1)//2)\nprint(count)", "N = int(input())\nsuma = 0\nfor i in range(1,N+1):\n  a = N // i\n  suma += i * (a*(a+1)) // 2\nprint(suma)", "N= int(input())\nans = 0\nfor j in range(1,N+1):\n  N_j = N//j\n  ans += j*(1+N_j)*N_j//2\nprint(ans)", "import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import gcd\nfrom bisect import bisect, bisect_left, bisect_right\n\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef S_MAP(): return map(str, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef S_LIST(): return list(map(str, input().split()))\n \nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nN = INT()\n\nans = 0\nfor i in range(1, N + 1):\n    n = N // i\n    ans += i * n * (n + 1) // 2\nprint(ans)", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nn = int(input())\n\ntmp = 0\nres = 0\n\nfor i in range(1, n + 1):\n    tmp = n // i\n    res += tmp * (tmp + 1) * i // 2\n\nprint(res)\n", "def main():\n    n = int(input())\n    ans = 0\n    x = n // 2\n    for i in range(1, n + 1):\n        m = n // i\n        ans += i * ((m + 1) * m) // 2\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nprint(sum(N//i * (N//i + 1) * i // 2 for i in range(1, N + 1)))", "N = int(input())\n\nans = 0\nfor i in range(1,N+1):\n    y = N//i\n    val = (y*(y+1))//2\n    ans += val * i\n\nprint(ans)", "N=int(input())\nans = 0\n \nfor i in range(1, N+1):\n    num = N // i\n    if num == 1:\n        ans += i\n    else:\n        ans += num * (i + num * i) / 2\n \nprint(int(ans))", "def main():\n    N=int(input())\n    ans=0\n    for i in range(1,N+1):\n        m=N//i\n        ans+=i*m*(m+1)//2\n        #print(i,N//i,m)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "# import itertools\n# import math\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n# import sympy\n\nN = int(input())\n# S = input()\n# n, *a = map(int, open(0))\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\nans = 0\nfor i in range(1, N + 1):\n    num = N // i\n    ans += i * (num * (num + 1)) // 2\nprint(ans)\n", "n=int(input())\nf=[0]*(n+1)\nans=0\ndic={}\nfor i in range(1,n+1):\n  j=n//i\n  dic[j]=dic.get(j,0)+i\nfor key,value in dic.items():\n  ans+=value*key*(key+1)//2\nprint(ans)", "'''\nCreated on 2020/08/23\n\n@author: harurun\n'''\ndef main():\n  import sys\n  pin=sys.stdin.readline\n  pout=sys.stdout.write\n  perr=sys.stderr.write\n\n  N=int(pin())\n  ans=0\n  for i in range(1,N+1):\n    ans+=((N//i)*(N//i+1)*i)//2\n  print(ans)\n  return\nmain()\n#\u9593\u306b\u5408\u308f\u306a\u305d\u3046\n", "N = int(input())\ncount = 0\nfor i in range(1,N+1):\n    t = N//i\n    count += i * t*(t+1)/2\nprint(int(count))", "import sys\nimport numba\n\n@numba.njit\ndef main(N):\n    x = 0\n    for a in range(1, N+1):\n        b=N//a\n        x += a*b*(b+1)//2\n    return x\n \nN = int(input())\nprint(main(N))", "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef main():\n    n = int(input())\n    ans = 0\n    for i in range(1, n+1):\n        ans += i*(1 + n//i)*(n//i)//2\n    print(ans)\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\n\nans = 0\n\nfor i in range(1, N + 1):\n  ans += i * (1 + N // i) * (N // i) // 2\n  \nprint(ans)", "#\u89e3\u8aac\u3092\u53c2\u8003\u306b\u3057\u305f\nN=int(input())\nans=0 #i=1\nimport math\nfor i in range(1,N+1):\n    max_i_multi=N//i\n    ans+=(max_i_multi*(max_i_multi+1)*i)//2\nprint(ans)        ", "n=int(input())\nans=0\nfor i in range(1,n+1):\n  ans=ans+((n//i)*((n//i)+1)*i)//2\nprint(ans)", "n = int(input())\n\nans = n * (n + 1) - 1\ni = 2\nwhile i * i <= n:\n    m = n // i\n    ans += i * (m * m - i * i + m)\n    i += 1\nprint(ans)\n", "n = int(input())\n\nans = 0\nfor a in range(1, n + 1):\n    num = n // a\n    ans += num * (num + 1) // 2 * a\nprint(ans)", "N=int(input())\n\nans=0\n\nfor num in range(1,N+1):\n    count=N//num\n    \n    ans+=count*(count+1)//2*num\n    \nprint(ans)", "n = int(input())\nans = 0\nfor i in range(1, n + 1):\n    m = n // i\n    ans += i * m * (m + 1) // 2\nprint(ans)\n", "n=int(input())\n\n#L=[n//i*(i+n//i*i)//2 for i in range(1,n+1)]\n#print(sum(L))\nans=0\n#for i in range(1,n+1):\n#    for j in range(1,n+1):\n#        if i%j==0:\n#            ans+=i\n#print(ans)\ng=lambda x:(x*(n//x)*(n//x+1))//2\nprint((sum(g(i) for i in range(1,n+1))))\n", "import numba\n@numba.njit\ndef main(N):\n    x = 0\n    for a in range(1, N+1):\n        b=N//a\n        x += a*b*(b+1)//2\n    return x\nN = int(input())\nprint(main(N))", "import sys\nN=int(sys.stdin.readline())\n# ans=sum((N//x)*(N//x+1)*x//2 for x in range(1,N+1))\nans=0\nfor x in range(1,N+1):\n    y=N//x\n    ans+=y*(y+1)*x//2\nprint(ans)\n", "N=int(input())\nans = 0\nfor i in range(1, N+1):\n    num = N // i\n    ans += num * (i + num * i) // 2\nprint(ans)", "from numba import njit, i8\n\n\n@njit(i8(i8))\ndef solve(N):\n    ans = 0\n    for i in range(1, N + 1):\n        for j in range(i, N + 1, i):\n            ans += j\n    return ans\n\n\nN = int(input())\nprint((solve(N)))\n"]