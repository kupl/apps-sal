["import sys\n\n\ndef normalize(s):\n    s = s.lower()\n    s = s.replace(\"o\", \"0\")\n    s = s.replace(\"l\", \"1\")\n    s = s.replace(\"i\", \"1\")\n    return s\n\n\nquery = normalize(next(sys.stdin).strip())\nn = int(next(sys.stdin).strip())\n\nfor line in sys.stdin:\n    line = normalize(line.strip())\n    if query == line:\n        print(\"No\")\n        return\n\nprint(\"Yes\")\n", "s = input()\n\nn = int(input())\nfor i in range(n):\n    t = input()\n    if len(s) != len(t):\n        continue\n    for j in range(len(t)):\n        if t[j].lower() == s[j].lower():\n            continue\n        if t[j] in '0Oo' and s[j] in '0Oo':\n            continue\n        if s[j] in '1lILi' and t[j] in '1lILi':\n            continue\n        # print(s[j], t[j], s, t, i)\n        break\n    else:\n        print('No')\n        return\nprint('Yes')", "needle = input().strip().lower()\nn = int(input())\ncurrent = []\n\nfor i in range(n):\n\ttemp = input().strip().lower()\n\tcurrent.append(temp)\n\nimport sys\n\ndef similar(s1, s2):\n\tif(len(s1) != len(s2)):return False\n\n\tl = set(['1', 'l', 'L', 'i', 'I'])\n\to = set(['o', 'O', '0'])\n\n\tfor i in range(len(s1)):\n\t\tif(s1[i] == s2[i]):continue\n\t\tif(s1[i] in l and s2[i] in l):continue\n\t\tif(s1[i] in o and s2[i] in o):continue\n\t\treturn False\n\n\treturn True\n\n\nfor item in current:\n\tif(similar(needle, item)):\n\t\tprint(\"No\")\n\t\treturn\n\nprint(\"Yes\")", "def makeUnique(s):\n\treturn s.lower().replace('i', '1').replace('o', '0').replace('l', '1')\n\nlogin = makeUnique(input())\nfor i in range(int(input())):\n\tif makeUnique(input()) == login:\n\t\tprint('No')\n\t\treturn\nprint('Yes')", "s=input()\ndef f(a):\n    a=a.lower()\n    a=a.replace('o','0')\n    a=a.replace('i','1')\n    a=a.replace('l','1')\n    return a\ns=f(s)\nq=int(input())\nb=True\nfor i in range(0,q):\n    d=input()\n    if s==f(d):\n        b=False\nprint('Yes' if b else 'No')", "#!/usr/bin/env python3\n\n\ndef are_same(a, b):\n    a = a.lower()\n    b = b.lower()\n    if a == b:\n        return True\n    if a in {'o', '0'}:\n        return b in {'o', '0'}\n    if a in {'1', 'l', 'i'}:\n        return b in {'1', 'l', 'i'}\n\n\ndef main():\n    s = input()\n    n = int(input())\n    for _ in range(n):\n        s1 = input()\n\n        if len(s1) == len(s) and all(are_same(x1, x2) for x1, x2 in zip(s, s1)):\n            print('No')\n            return\n    print('Yes')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\na = input()\nn = int(input())\ns = ''\nfor i in a:\n    if (i == 'O') or (i == 'o'):\n        s = s + '0'\n    else:\n        if (i == 'l') or (i == 'I') or (i == 'L') or (i == 'i'):\n            s = s + '1'\n        else:\n            s = s + i.lower()\nfor j in range(n):\n    a = input()\n    str = ''\n    for i in a:\n        if (i == 'O') or (i == 'o'):\n            str = str + '0'\n        else:\n            if (i == 'l') or (i == 'I') or (i == 'L') or (i == 'i'):\n                str = str + '1'\n            else:\n                str = str + i.lower()\n    if s == str:\n        print('No')\n        return\nprint('Yes')\n", "def normalize_login(login):\n    return login \\\n        .lower() \\\n        .replace(\"o\", \"0\") \\\n        .replace(\"i\", \"1\") \\\n        .replace(\"l\", \"1\")\n\n\nnew_login = normalize_login(input())\nn = int(input())\nlogins = []\nfor i in range(0, n):\n    login = normalize_login(input())\n    logins.append(login)\n\nprint(\"No\" if new_login in logins else \"Yes\")\n", "def f(s,t):\n    s=s.lower()\n    t=t.lower()\n    if len(s)!=len(t):\n        return True\n    for i in range(len(s)):\n        if s[i]!=t[i]:\n            w=[s[i],t[i]]\n            w.sort()\n            if w!=sorted(['o','0']) and w!=sorted(['i','l']) and w!=sorted(['i','1']) and w!=sorted(['l','1']):\n                return True\n    return False\ns=input()\nn=int(input())\nq=True\nfor i in range(n):\n    t=input()\n    q=q and f(s,t)\nif q:\n    print('Yes')\nelse:\n    print('No')\n", "s = input()\nn = int(input())\nf = True\n\ndef is_sim(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if (s1[i].lower() == s2[i].lower()) or s1[i] + s2[i] in ['O0', '0O', 'o0', '0o'] or (s1[i] in ['1', 'l', 'I', 'i', 'L'] and s2[i] in ['1', 'l', 'I', 'i', 'L']):\n            pass\n        else:\n            return False\n    return True\n            \nfor i in range(n):\n    t = input()\n    if is_sim(s, t):\n        f = False\nprint('Yes' if f else 'No')", "import sys\n\n\nequiv = {\n    'o': 1, 'O': 1, '0': 1,\n    '1': 2, 'l': 2, 'L': 2, 'i': 2, 'I': 2\n}\n\n\ndef compare(c1, c2):\n    if ord(c1) > ord(c2):\n        c1, c2 = c2, c1\n\n    e1, e2 = equiv.get(c1, 0), equiv.get(c2, 0)\n    if e1 and e2 and e1 == e2:\n        return True\n\n    if 'A' <= c1 <= 'Z' and chr(ord(c1) - ord('A') + ord('a')) == c2:\n        return True\n    \n    return c1 == c2\n\n\ndef cmps(s1, s2):\n    if len(s1) != len(s2):\n        return False\n\n    for c1, c2 in zip(s1, s2):\n        if not compare(c1, c2):\n            return False\n\n    return True\n\n\ns = input()\nn = int(input())\n\nfor _ in range(n):\n    s_i = input()\n    if cmps(s_i, s):\n        print(\"No\")\n        return\n\nprint(\"Yes\")\n", "def read():\n    return list(map(int,input().split()))\ns=input()\nfor i in range(len(s)):\n    if s[i]=='0':\n        s=s[:i]+'o'+s[i+1:]\n    elif s[i]=='1' or s[i]=='i' or s[i]=='I':\n        s=s[:i]+'l'+s[i+1:]\na=[]\nn=int(input())\nfor i in range(n):\n    c=input()\n    for i in range(len(c)):\n        if c[i]=='0':\n            c=c[:i]+'o'+c[i+1:]\n        elif c[i]=='1' or c[i]=='i' or c[i]=='I':\n            c=c[:i]+'l'+c[i+1:]\n    if c.capitalize()==s.capitalize():\n        print('No')\n        return\nprint('Yes')\n\n    \n        \n", "log = input()\nlog = log.lower()\nlog = log.replace('0', 'o')\nlog = log.replace('i','1' )\nlog = log.replace('l','1' )\na = int(input())\nlogs = set()\nfor i in range(a):\n    s = input()\n    s = s.lower()\n    s = s.replace('0', 'o')\n    s = s.replace('i','1' )\n    s = s.replace('l','1' )\n    logs.add(s)\nif log in logs: print('No')\nelse: print('Yes')\n", "ss = input()\nst = \"\"\nfor j in range(len(ss)):\n    c = ss[j]\n    if 'A' <= c <= 'Z':\n        c = chr(ord(c) + ord('a') - ord('A'))\n    if c == 'o':\n        c = '0'\n    if c == 'l' or c == 'i':\n        c = '1'\n    st += c\ns = st\nn = int(input())\nfor i in range(n):\n    ss = input()\n    st = \"\"\n    for j in range(len(ss)):\n        c = ss[j]\n        if 'A' <= c <= 'Z':\n            c = chr(ord(c) + ord('a') - ord('A'))\n        if c == 'o':\n            c = '0'\n        if c == 'l' or c == 'i':\n            c = '1'\n        st += c\n    if s == st:\n        print(\"No\")\n        return\nprint(\"Yes\")\n", "def unify_login(login):\n    login = login.lower()\n    login = login.replace('0', 'o')\n    login = login.replace('l', '1')\n    login = login.replace('i', '1')\n    return login\n\n\ns = unify_login(input())\nn = int(input())\n\nlogins = set()\n\nfor i in range(n):\n    logins.add(unify_login(input()))\n\nif s in logins:\n    print('No')\nelse:\n    print('Yes')\n", "s = input()\nu = 0\nfor i in range(int(input())):\n    l = input()\n    u = 0\n    if len(l) == len(s):\n        for j in range(len(l)):\n            if l[j].lower() == s[j].lower() or (l[j] == '0' and s[j].lower() == 'o') or (s[j] == '0' and l[j].lower() == 'o') or (l[j] == '1' and (s[j].lower() == 'l' or s[j].upper() == 'I')) or (l[j].lower() == 'l' and (s[j] == '1' or s[j].upper() == 'I')) or (l[j].upper() == 'I' and (s[j].lower() == 'l' or s[j] == '1')):\n                u += 1\n            else:\n                break\n    if u == len(s):\n        break\nif u == len(s):\n    print('No')\nelse:\n    print('Yes')", "def change(s):\n    res = \"\"\n    for i in range(len(s)):\n        if s[i] == 'O' or s[i] == 'o':\n            res += '0'\n            continue\n        if s[i] == 'l' or s[i] == 'L' or s[i] == 'i' or s[i] == 'I':\n            res += '1'\n            continue\n        if s[i].isalpha() and s[i].isupper():\n            res += s[i].lower()\n            continue\n        res += s[i]\n    return res\n\n\na = change(input())\nn = int(input())\nfor i in range(n):\n    b = change(input())\n    if a == b:\n        print(\"No\")\n        return\nprint(\"Yes\")\n", "s=str(input())\nn=int(input())\nfound = False\nfor i in range(n):\n    a = str(input())\n    if len(a) == len(s):\n        similar = True\n        for j in range(len(a)):\n            ac = a[j].capitalize()\n            sc = s[j].capitalize()\n            if ac != sc:\n                if ac in ('0', 'O') and sc in ('0', 'O') or ac in ('1', 'I', 'L') and sc in ('1', 'I', 'L'):\n                    similar = True\n                else:\n                    similar = False\n                    break\n        if similar:\n            found = True\nif found:\n    print('No')\nelse:\n    print('Yes')\n", "def f(s):\n    ans = ''\n    for i in s:\n        if i == 'l' or i == 'L' or i == 'i' or i == 'I':\n            ans += '1'\n        elif 'a' <= i <= 'z':\n            ans += i.upper()\n        elif i == '0':\n            ans += 'O'\n        else:\n            ans += i\n    return ans\n\n\ns = input()\ns = f(s)\nn = int(input())\na = []\nfor i in range(n):\n    ss = input()\n    a.append(f(ss))\nif s in a:\n    print('No')\nelse:\n    print('Yes')\n#print(a)\n", "def change(s):\n    s = s.lower()\n    s = s.replace('o', '0')\n    s = s.replace('l', '1')\n    s = s.replace('i', '1')\n    return s\n\nlog = change(input())\n\nnum = int(input())\nlogins = []\nfor i in range(0, num):\n    logins.append(change(input()))\n\nif log in logins:\n    print('No')\nelse:\n    print('Yes')\n", "l = input()\nnew_login1 = l.upper().replace('O', '0').replace('l', '1').replace('I', '1')\nnew_login2 = l.replace('O', '0').replace('l', '1').replace('I', '1').lower()\nnew_login3 = l.lower().replace('O', '0').replace('l', '1').replace('I', '1')\nlogins = []\nn = int(input())\nfor i in range(n):\n    last = input()\n    logins.append(last.upper().replace('O', '0').replace('l', '1').replace('I', '1'))\n    logins.append(last.replace('O', '0').replace('l', '1').replace('I', '1').lower())\n    logins.append(last.lower().replace('O', '0').replace('l', '1').replace('I', '1'))\nprint('No' if new_login1 in logins or new_login2 in logins or new_login3 in logins else 'Yes')\n", "def make_hash(string):\n    return string.lower().replace('o', '0').replace('l', '1').replace('i', '1')\n    \ns = make_hash(input())\nn = int(input())\ne = []\ngood = True\nfor _ in range(n):\n    t = input()\n    if make_hash(t) == s:\n        good = False\nprint(\"Yes\" if good else \"No\")\n"]