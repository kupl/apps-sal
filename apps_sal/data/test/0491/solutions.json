["n = int(input())\nif n >= 0:\n    print(n)\nelse:\n    n = str(n)\n    print(max(int(n[:-1]), int(n[:-2] + n[-1])))\n", "n = int(input())\nif n >= 0:\n    print(n)\nelse:\n    n1 = list(str(n))\n    n1.pop(len(n1)-1)\n    n1 = int(''.join(n1))\n    n2 = list(str(n))\n    n2.pop(len(n2)-2);\n    n2 = int(''.join(n2))\n    print(max(n1,n2))", "n = input()\na = int(n)\nb = int(n[: -2] + n[-1])\nc = int(n[: -1])\nprint(max(a, b, c))\n", "from math import *\nn = int(input())\n\nif (n >= 0):\n\tprint(n)\n\treturn\n\nn = -n\n\nS = str(n)\n\nL = []\n\nL.append(n)\n\nif (len(S) >= 2):\n\tS1 = S[:len(S) - 1]\n\tL.append(S1)\n\nif (len(S) >= 2):\n\tS1 = S[:(len(S) - 2)] + S[len(S) - 1]\n\tL.append(S1)\n\nfor i in range(len(L)):\n\tL[i] = int(L[i])\n\nprint (-1 * min(L))", "n = int(input())\nprint(max(n, (n // 100 if n > 0 else -((-n) // 100)) * 10 + (n % 10 if n > 0 else -((-n) % 10)), n // 10 if n > 0 else -((-n) // 10)))", "n=int(input())\ncount1=n;\ncount2=int(float(n)/10);\ncount3=n;\ncount3=str(count3)\ncount4=count3[0:-2]\ncount4+=count3[-1]\ncount4=int(count4)\nprint(max(count4,count1,count2))", "n = int(input())\nif n >= 0:\n    print(n)\nelse:\n    n = - n\n    a = n % 10\n    n //= 10\n    b = n % 10\n    n //= 10\n    n = n * 10 + min(a, b)\n    print(-n)", "s=input()\n\nif(s[0]!='-'):\n    print(s)\n\nelse:\n    y=\"\"\n    n=len(s)\n    for i in range(n):\n        if(i==n-1):\n            continue\n        y+=s[i]\n    z=\"\"\n    for i in range(n):\n        if(i==n-2):\n            continue\n        z+=s[i]\n    z=int(z)\n    y=int(y)\n    if(y>z):\n        print(y)\n    else:\n        print(z)\n        \n", "n = input()\na = n[:-1]\nb = n[:-2] + n[-1]\nprint(max(list(map(int, [a, b, n]))))\n", "k=int(input())\nif(str(k)[0]=='-'):\n    st=\"-0\"+ str(abs(k))\nelse:\n    st=\"0\"+ str(k)\na=int(st[:-1])\nb=int(st[:-2]+str(k)[-1])\nprint(max(a,b,k))\n", "3\n\nn = input().strip()\nprint(max(list(map(int, [n, n[:-1], n[:-2] + n[-1]]))))\n", "s = input()\nans = int(s)\nif s[0] == '-' and len(s) >= 2:\n  if len(s) == 2:\n    ans = 0\n  else:\n    ans = max(int(s[:-1]), int(s[:-2]+s[-1]), ans)\nprint(ans)\n", "import sys\n\ns = sys.stdin.readline().strip()\n\na = int(s[:-1] if len(s) > 1 and s[:-1] != '-' else s)\nb = int(s[:-2]+s[-1] if len(s) > 1 else s)\nc = int(s)\n\nprint(max(a, b, c))\n", "##A\nn0=str(input())\nn1=n0[:-1]\nn2=n0[:-2]+n0[-1:]\nn0=int(n0)\nn1=int(n1)\nn2=int(n2)\nprint(max(n1,n2,n0))", "n = int(input())\nif n < 0:\n  n = -min(-n // 10, -n // 100 * 10 + -n % 10)\nprint(n)", "s = input()\nif s[0] == '-':\n\tif s[-1] >= s[-2]:\n\t\tif s[:-1] != '-0':\n\t\t\tprint(s[:-1])\n\t\telse:\n\t\t\tprint(0)\n\telse:\n\t\tif s[:-2] + s[-1] != '-0':\n\t\t\tprint(s[:-2] + s[-1])\n\t\telse:\n\t\t\tprint(0)\nelse:\n\tprint(s)\n", "import math\nimport re\nfrom fractions import Fraction\nfrom collections import Counter\n\nclass Task:\n    n = 0\n    answer = 0\n    \n    def __init__(self):\n        self.n = input()\n\n    def solve(self):\n        n = self.n\n        self.answer = max(int(n), int(n[:-2] + n[-1]), int(n[:-1]))\n\n    def printAnswer(self):\n        print(self.answer)\n\ntask = Task()\ntask.solve()\ntask.printAnswer()\n", "def main():\n\tstrn = input()\n\tn = int(strn)\n\tif n >= 0:\n\t\tprint(n)\n\telse:\n\t\tdel_last = int(strn[:-1])\n\t\tdel_pult = int(strn[:-2] + strn[-1])\n\t\tprint(max(n, del_pult, del_last))\n\ndef __starting_point():\n\tmain()\n__starting_point()", "state = input(\"\")\nif( int(state) > 0):\n    print(state)\nelif( int(state) >= -10):\n    print(0)\nelse:\n    a = state[:-2]+state[-1]\n    b = state[:-2]+state[-2]\n    if( int(a) > int(b)):\n        if( int(a) == 0):\n            print(0)\n        else:\n            print(a)\n    else:\n        if( int(b) == 0):\n            print(0)\n        else:\n            print(b)\n", "# \u0417\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u043e \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0441\u0447\u0435\u0442. \u043e\u0442 30.05.13\ninner_data = input()\nif int(inner_data) >= 0:\n    print (inner_data)\nelse:\n    inner_data = inner_data[1:]\n    ee = ''\n    if len(inner_data) >= 2:\n        finded = 0\n        for i in inner_data[::-1]:\n            if i == inner_data[-2] and not finded:\n                finded = 1\n                continue\n            ee = ee + i\n    if int(inner_data[-1]) > int(inner_data[-2]):\n        if (int(inner_data[-1]) == 0):\n            if int(inner_data[-2]) != 0:\n                print (0)\n        elif int(inner_data[-1]) != 0:\n            print ('-' + inner_data[0:-1])\n            \n    elif int(inner_data[-1]) < int(inner_data[-2]):\n        if (int(ee[::-1]) == 0):\n            print (0)\n        else:\n            print ('-' + ee[::-1])\n    elif int(inner_data[-1]) == int(inner_data[-2]):\n        print ('-' + ee[::-1])\n    else:\n        print (0)", "a = int(input());\nif a>0:\n    print(a)\nelse:\n    if (int(str(a)[-1]) > int(str(a)[-2])): print (str(a)[:-1])\n    else:\n        if str(a)[:-2] +  str(a)[-1] == \"-0\": print(0)\n        else: print (str(a)[:-2], str(a)[-1],  sep='')", "n = input()\na = int(n)\nb = int(n[: -2] + n[-1])\nc = int(n[: -1])\nprint(max(a, b, c))", "def main():\n    n = int(input())\n  \n    if n >-10:\n        print(n)\n    else:\n        n = str(n*(-1))\n        l = len(n)\n        print(min(int(n[:l-1]),int(n[:l-2]+n[l-1]))*-1)\n        \n    \n    \n    \nmain()", "def __starting_point():\n    data = input()\n    if int(data) >= 0:\n        print(data)\n    elif len(data) == 2:\n        print('0')\n    else:\n        n = data[1:]\n        l1 = n[:len(n)-1]\n        l2 = n[:len(n)-2] + n[len(n)-1:]\n        ans = min(int(l1), int(l2))\n        ans *= -1\n        print(ans)\n\n__starting_point()", "s = input()\nprint((max(list(map(int, [s, s[0:-1], s[0:-2] + s[-1]])))));\n"]