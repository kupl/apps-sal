["n = int(input())\nl = input()\nprint(n+1)\n", "n = int(input())\ns = input()\nprint(n + 1)\n", "n = int(input())\ns = input()\nl = 0\nr = 0\nfor c in s:\n    if c == 'L':\n        l -= 1\n    else:\n        r += 1\nprint(r - l + 1)", "n = int(input())\ns = input()\na = s.count(\"L\")\nb = s.count(\"R\")\nprint(a+b+1)", "n = int(input())\ns = input()\nl = s.count(\"L\")\nr = n-l\nprint(l+r+1)\n", "n = int(input())\na = input()\nprint(n + 1)\n", "print (str(int(input())+1))", "# -*- encoding: utf-8 -*-\nimport sys\nr_input = sys.stdin.readline\n\nn = int(r_input())\ns = r_input().rstrip()\nprint(s.count('L') + s.count('R') + 1)", "print(int(input())+1)\n", "n=int(input())\nprint(n+1)", "n = int(input())\na = input()\nprint(a.count('L') + a.count('R') + 1)\n", "n =  int(input())\nk = input()\nprint(n+1)", "n = int(input())\ns = input()\nprint(s.count('L') + s.count('R') + 1)", "import sys\nimport math\nimport heapq\nimport bisect\nimport re\nfrom collections import deque\nfrom decimal import *\nfrom fractions import gcd\n \nsys.setrecursionlimit(1000000000)\ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n \ndef finput():\n    return float(input())\n \ndef tinput():\n    return input().split()\n \ndef rinput():\n    return map(int, tinput())\n \ndef rlinput():\n    return list(rinput())\n \ndef modst(q, s):\n    res = 1\n    while s:\n        if s % 2:\n            res *= q\n        q *= q\n        s //= 2\n    return res\n\ndef main():\n    # [int(i) for i in sys.stdin.readline().split()]\n    n = int(sys.stdin.readline())\n    e = list(sys.stdin.readline())\n    print(n + 1)\n    \nmain()", "n = int(input())\ns = input()\nprint(s.count('L')+s.count('R')+1)\n", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\n\n\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef wr(arr): return ' '.join(map(str, arr))\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    newnumber = 0\n    while number > 0:\n        newnumber += number % base\n        number //= base\n    return newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nn = ii()\ns = input()\nprint(n+1)", "n = int(input())\nprint(n + 1)\n", "n = int(input())\nstring = str(input())\nprint(n + 1)", "n=int(input())\ns=input()\nx=s.count(\"L\")\nprint(x+n-x+1)\n", "n = int(input())\na = input()\nprint(a.count('L') + a.count('R') + 1)", "from collections import deque\nimport itertools\nimport operator\nimport queue\nimport time\nimport math\nimport sys\nimport os\n\n# map(int, input().split())\n# list(map(int, input().split()))\n# [list(map(int, input().split())) for I in range(n)]\n\n##############################################################\n\n\nn = int(input())\ns = str(input())\n\nprint(len(s) + 1)\n", "def main():\n    n = int(input())\n    s = input()\n    left = 0-s.count('L')\n    right = 0+s.count('R')\n\n    print(right-left+1)\n\nmain()\n"]