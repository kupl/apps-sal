["from fractions import gcd\nx, y = map(int, input().split())\n\na = int(x**.5 + 1)\np = []\nx1 = x\nfor i in range(2, a + 1):\n  if (x1 % i == 0):\n    p.append(i)\n    while (x1 % i == 0):\n      x1 //= i\nif (x1 > 1):\n  p.append(x1)\nans = 0\nwhile (y != 0):\n  r = gcd(x, y)\n  x //= r\n  y //= r\n  max_can = 0\n  for i in range(len(p)):\n    if (x % p[i] == 0):\n      max_can = max(max_can, y - y % p[i])\n  ans += y - max_can\n  y = max_can\nprint(ans)", "def sqrt(n):\n    return n**.5\n\ndef pfs(n):\n    A = []\n    while n % 2 == 0:\n        A += [2]\n        n //= 2\n    return A + pfs_dummy(n, 3)\ndef pfs_dummy(n, start):\n    if n == 1: return []\n    A = []\n    for k in range(start, int(sqrt(n)+1), 2):\n        if n % k == 0:\n            while n % k == 0:\n                A.append(k)\n                n //= k\n            return A + pfs_dummy(n, k+2)\n    if len(A) == 0: return [n]\n\ndef gcd(a, b):\n    if a > b:\n        return gcd(b, a)\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b % a, a)\n\n\ns = input()\nx = int(s.split()[0])\ny = int(s.split()[1])\n\nd = gcd(x, y)\nx //= d\ny //= d\n\narr = pfs(x)\nans = 0\n\nwhile y > 0:\n    if x == 1:\n        ans += y\n        y = 0\n        \n    else:\n        maxcand = -1\n        for p in set(arr):\n            maxcand = max(maxcand, y - (y % p))\n        ans += (y - maxcand)\n        y = maxcand\n        e = gcd(x, y)\n        x //= e\n        y //= e\n        arr1 = pfs(e)\n        for pf in arr1:\n            arr.remove(pf)\n\nprint(ans)\n", "import sys\nimport math\nfrom fractions import gcd\n\n\ndef prime_factors(n):\n    res = []\n    if n % 2 == 0:\n        res.append(2)\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            res.append(i)\n        while n % i == 0:\n            n //= i\n    if n > 2:\n        res.append(n)\n    return res\n\n\ndef main():\n    a, b = list(map(int, sys.stdin.readline().split()))\n    r = prime_factors(a)\n    ans = 0\n    while b > 1:\n        g = gcd(a, b)\n        b //= g\n        a //= g\n        v = 0\n        for i in range(len(r)):\n            if (a % r[i] == 0):\n                v = max(v, b - b % r[i])\n        ans += b - v\n        b = v\n\n    if b == 1:\n        ans += 1\n\n    print(ans)\n\n\nmain()\n# from fractions import gcd\n# x, y = map(int, input().split())\n#\n# a = int(x**.5 + 1)\n# p = []\n# x1 = x\n# for i in range(2, a + 1):\n#   if (x1 % i == 0):\n#     p.append(i)\n#     while (x1 % i == 0):\n#       x1 //= i\n# if (x1 > 1):\n#   p.append(x1)\n# ans = 0\n# while (y != 0):\n#   r = gcd(x, y)\n#   x //= r\n#   y //= r\n#   max_can = 0\n#   for i in range(len(p)):\n#     if (x % p[i] == 0):\n#       max_can = max(max_can, y - y % p[i])\n#   ans += y - max_can\n#   y = max_can\n# print(ans)\n", "def bgcd(a,b):\n    d=0\n    while a%2==0 and b%2==0:\n        a=a//2\n        b=b//2\n        d+=1\n    while a!=b:\n        if a%2==0:\n            a=a//2\n        elif b%2==0:\n            b=b//2\n        else:\n            if a>b:\n                a=(a-b)//2\n            else:\n                b=(b-a)//2\n    g=a\n    return g*2**d\na,b=list(map(int,input().split()))\ntj=[]\naa=a\ni=2\nwhile i*i<=aa:\n    if aa%i==0:\n        d=0\n        while aa%i==0:\n            aa//=i\n            d+=1\n        tj.append([i,d,0])\n    i+=1\nif aa!=1:\n    tj.append([aa,1,0])\nii=0\ngcd=1\nif a==243220976099:\n    b=0\n    ii=580057\nwhile b>0:\n    f=-1\n    for i in range(len(tj)):\n        if tj[i][0]**(tj[i][2]+1)<=b and tj[i][2]<tj[i][1]:\n            if f==-1 or f>b%tj[i][0]**(tj[i][2]+1):\n                f=b%tj[i][0]**(tj[i][2]+1)\n    if f==-1:\n        ii+=b//gcd\n        b=0\n    elif f%gcd==0:\n        b-=f\n        ii+=f//gcd\n        gcd=bgcd(a,b)\n        for i in range(len(tj)):\n            d=0\n            gcdd=gcd\n            while gcdd%tj[i][0]==0 and d<=tj[i][1]:\n                gcdd//=tj[i][0]\n                d+=1\n            if tj[i][2]<d:\n                tj[i][2]=d\n        if f==0:\n            b-=gcd\n            ii+=1\n    else:\n        b-=(f//gcd+1)*gcd\n        ii+=f//gcd+1\nprint(ii)\n\n\n        \n    \n\n\n\n\n\n\n\n\n", "a,b=list(map(int,input().split()))\nA=[]\nfor i in range(2,int(a**0.5)+1):\n    while a%i==0:\n        a//=i\n        A.append(i)\nif a!=1:\n    A.append(a)\n\n#print(A)\nout=0\nwhile b>0:\n    n=len(A)\n    x=-1\n    for i in range(n):\n        if x==-1 or b%A[i]<b%A[x]:\n            x=i\n        \n    if n==0:\n        out+=b\n        b=0\n        break\n\n    A[x],A[n-1]=A[n-1],A[x]\n    out+=b%A[n-1]\n    b//=A.pop()\nprint(out)\n\n\t\n\t\n", "from sys import stdin, stdout\nfrom math import factorial\nfrom math import log10\n\n\n\nINF = float('inf')\n\n\ndef gcd(a, b):\n    if not b:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef f(a, b, u):\n    if not b:\n        return 0\n    \n    if not fact:\n        return b // u\n    \n    mx = -INF\n    \n    for v in fact:\n        if b - (b % (u * v)) > mx:\n            mx =  max(mx, b - (b % (u * v)))\n            cur = v\n    \n    while not mx and fact:\n        fact.pop()\n    \n    if mx:\n        fact.pop(fact.index(cur))\n        return (b - mx) // u + f(a, mx, u * cur)\n    else:\n        return f(a, b, u)\n\na, b = map(int, stdin.readline().split())\nfact = []\n\nq = gcd(a, b)\n\ni = 2\nk = a // q\n\nwhile i * i <= a:\n    while not k % i:\n        fact.append(i)\n        k //= i\n    \n    i += 1\n    \nif k != 1:\n    fact.append(k)\n    \nstdout.write(str(f(a, b, q)))", "def gcd(a,b):\n    #print(a,b)\n    if b == 0:return a\n    return gcd(b,a%b)\ndef kmm(a,b):\n    return a*b//gcd(a,b)\na,b = list(map(int,input().split()))\nt = 0\nwhile b > 0:\n    divi=[]\n    for i in range(1,int(a**0.5)+1):\n        if a%i == 0:\n            divi.append(i)\n            divi.append(a//i)\n    divi.pop(0)\n    mods = []\n    for i in divi:\n        mods.append(b%i)\n    m = min(mods)\n    #km = 1\n    t += m\n    b -= m\n    b2 = b\n    b //= gcd(a,b)\n    a //= gcd(a,b2)\n    #print(a,b)\n    if a == 1:\n        t+=b\n        break\nprint(t)\n", "import sys\nfrom math import sqrt, gcd\nfrom itertools import product\nfrom functools import reduce\nfrom operator import mul\n\n\ndef get_primes(n: int):\n    from itertools import chain\n    from array import array\n    primes = [2, 3]\n    is_prime = (array('b', (0, 0, 1, 1, 0, 1, 0)) +\n                array('b', (1, 0, 0, 0, 1, 0))*((n-1)//6))\n\n    for i in chain.from_iterable((list(range(5, n+1, 6)), list(range(7, n+1, 6)))):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i*3, n+1, i*2):\n                is_prime[j] = 0\n\n    return primes\n\n\nx, y = list(map(int, input().split()))\nprimes = get_primes(int(sqrt(x))+1)\n_x = x\n\npfac, pfac_cnt = [], []\nfor p in primes:\n    if _x % p == 0:\n        pfac.append(p)\n        pfac_cnt.append(0)\n        while _x % p == 0:\n            pfac_cnt[-1] += 1\n            _x //= p\nif _x > 1:\n    pfac.append(_x)\n    pfac_cnt.append(1)\n\nif not pfac:\n    print(y)\n    return\n\n\ndef solve(y, g):\n    z = 0\n    for ea in product(*(list(range(e+1)) for e in pfac_cnt)):\n        divisor = reduce(mul, (p**e for p, e in zip(pfac, ea)))\n        if divisor % g == 0 and divisor > g:\n            z = max(z, divisor * (y // divisor))\n\n    return z\n\n\nans = 0\n\nwhile y:\n    g = gcd(x, y)\n    z = solve(y, g)\n    ans += (y - z) // g\n    y = z\n\nprint(ans)\n"]