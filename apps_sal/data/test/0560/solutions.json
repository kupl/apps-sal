["r, c = list(map(int, input().split()))\ncake = [input().strip() for _ in range(r)]\nans = 0\nfor i in range(r):\n    for j in range(c):\n        if cake[i][j] == '.' and ('S' not in cake[i] or 'S' not in list(zip(*cake))[j]):\n            ans += 1\nprint(ans)\n", "r,c=input().split()\nr=int(r)\nc=int(c)\nrows=[]\nevils=0\nfor i in range(r):\n    rows.append(input())\n    evils+=rows[-1].count('S')\neaten=(r*c)-evils\ncolumns=[]\nfor i in range(c):\n    L=[]\n    for j in range(r):\n        L.append(rows[j][i])\n    columns.append(L)\n\nfor i in range(r):\n    for j in range(c):\n        if(rows[i][j]=='S'):\n            continue\n        elif('S' in rows[i] and 'S' in columns[j]):            \n            eaten-=1\nprint(eaten)\n\n\n", "n,m = map(int,input().split())\ngrid = [input() for line in range(n)]\nrows = len([line for line in grid if line == '.'*m])\ncols = len([True for col in range(m) if len([row[col] for row in grid if row[col] == '.']) == n])\nprint(rows*m+cols*n-rows*cols)", "def eat_cake(cols, rows, string):\n    \"\"\"\n    >>> eat_cake(4, 3, ['S...', '....', '..S.'])\n    8\n    \"\"\"\n    result = 0\n    #each row\n    for i in range(0, rows):\n        if 'S' not in string[i]:\n            result += cols\n            string[i] = string[i].replace('.', 'E')\n\n    #each coloumn\n    for i in range(0, cols):\n        contains = False\n        all_eaten = True\n        already_eaten = 0\n        for j in range(0, rows):\n            if string[j][i] == 'S':\n                contains = True\n            if string[j][i] == '.':\n                all_eaten = False\n            \n            if string[j][i] == 'E':\n                already_eaten += 1\n                \n\n        if (all_eaten == False and contains == False):\n            result += rows - already_eaten\n            for row in range(0, rows):\n                string[row] = string[row][0 : i] + 'E' + string[row][i+1:]\n                \n            \n\n    return result\n    \n        \n\n\ndef main():\n    first_line = input()\n    first_line = first_line.split()\n    \n    rows = int(first_line[0])\n    coloumns = int(first_line[1])\n\n    l = []\n    for i in range(rows):\n        line = input()\n        l.append(line)\n        \n    print(eat_cake(coloumns, rows, l))\n    \n\n#import doctest\n#doctest.testmod()\nmain()   \n", "import sys\nfin = sys.stdin\n\nn, m = map(int, fin.readline().split())\nisRowFree = [True] * n\nisColFree = [True] * m\n\nfor i in range(n):\n    s = fin.readline().strip()\n    for j in range(m):\n        if s[j] == 'S':\n            isRowFree[i] = False\n            isColFree[j] = False\n      \ndef FreeRows():\n    return sum(1 for i in range(n) if isRowFree[i])\ndef FreeColumns():\n    return sum(1 for i in range(m) if isColFree[i])      \n\na = FreeRows()\nb = FreeColumns()      \n      \nprint(a * m + b * (n - a))", "r, c = list(map(int, input().split()))\nstr = []\nfor i in range (0, r):\n    aLine = input()\n    str.append(aLine)\nres = 0\nfor i in range (0, r):\n    k = 1\n    for j in range (0, c):\n        if str[i][j] == 'S':\n            k = 0\n            break\n    if k == 1:\n        res = res + c\n        str[i] = ''\n        for j in range (0, c):\n            str[i] = str[i] + '0'\nfor j in range (0, c):\n    k = 1\n    for i in range (0, r):\n        if str[i][j] == 'S':\n            k = 0\n            break\n    if k == 1:\n        for i in range (0, r):\n            if str[i][j] == '.':\n                res = res + 1\nprint (res)\n\n", "n,m =[int(x) for x in input().split()]\na = []\nans = 0\nfor i in range(n):\n    a.append(list(input()))\nfor i in range(n):\n    flag = 1\n    for j in range(m):\n        if a[i][j] == 'S':\n            flag = 0\n    if flag == 1:\n        for j in range(m):\n            a[i][j] = 'T'\nfor i in range(m):\n    flag = 1\n    for j in range(n):\n        if a[j][i] == 'S':\n            flag = 0\n    if flag == 1:\n        for j in range(n):\n            a[j][i] = 'T'\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 'T':\n            ans +=1 \nprint(ans)", "n,m = list(map(int,input().split()))\ng = [input() for i in range(n)]\nprint(sum([1 for i in range(n) for j in range(m) if g[i][j] == '.' and not (any([g[i][k] == 'S' for k in range(m)]) and any([g[k][j] == 'S' for k in range(n)]))]))\n", "I=input\nn,m = list(map(int,I().split()))\ng = [I() for i in range(n)]\nprint(n*m-len([1 for i in g if i.count('S')])*len([1 for i in zip(*g) if i.count('S')]))\n", "import sys\n\t\ndef main():\n\tcake = []\n\tr, c = list(map(int, sys.stdin.readline().split()))\n\tfor i in range(r):\n\t\tcake.append(sys.stdin.readline().strip())\n\trow_count = 0\n\tfor i in range(r):\n\t\tfound_strawberry = False\n\t\tfor j in range(c):\n\t\t\tif cake[i][j] == 'S':\n\t\t\t\tfound_strawberry = True\n\t\t\t\tbreak\n\t\tif found_strawberry is False:\n\t\t\trow_count += 1\n\tcol_count = 0\n\tfor j in range(c):\n\t\tfound_strawberry = False\n\t\tfor i in range(r):\n\t\t\tif cake[i][j] == 'S':\n\t\t\t\tfound_strawberry = True\n\t\t\t\tbreak\n\t\tif found_strawberry is False:\n\t\t\tcol_count += 1\n\tprint(row_count * c + col_count * r - row_count * col_count)\n\t\ndef __starting_point():\n    return(main())\n\n__starting_point()", "n, m = list(map(int, input().split()))\narr = [input() for _ in range(n)]\nset1 = []\nset2 = []\nfor i in range(n):\n  for j in range(m):\n    if arr[i][j]=='S':\n      set1.append(i)\n      set2.append(j)\nlen1 = int(n - len(set(set1)))\nlen2 = int(m - len(set(set2)))\n\nprint(len1 * m + len2 *n - len2 * len1)\n\n\n", "r,c = list(map (int, input().split()))\n\nhoriz,vert = [], []\n\nfor i in range(r):\n    horiz.append ([])\nfor i in range(c):\n    vert.append ([])\n\nfor i in range (r):\n    s = input()\n    for j in range (c):\n        horiz[i].append (s[j])\n        vert[j].append (s[j])\n\nans = r * c\nfor i in range (r):\n    for j in range (c):\n        if ('S' in horiz[i]) and ('S' in vert[j]):\n            ans -= 1\nprint (ans)\n", "S=input\nn,m=map(int,S().split())\ng=[S() for i in range(n)]\nprint(n*m-len([1 for i in g if i.count('S')])*len([1 for i in zip(*g) if i.count('S')]))", "r, c = map(int, input().split())\na = [input() for i in range(r)]\nt1 = set()\nt2 = set()\nfor i in range(r):\n    for j in range(c):\n        if a[i][j] == 'S':\n            t1.add(i)\n            t2.add(j)\nn = r - len(t1)\nm = c - len(t2)\nprint(n * c + m * r - n * m)", "r, c = map(int, input().split())\na = [input() for i in range(r)]\nn = len([0 for s in a if 'S' not in s])\nm = len([0 for j in range(c) if len([s[j] for s in a if s[j] =='.']) == r])\nprint(n * c + m * r - n * m)", "n, m = list(map(int, input().split()))\narr = [input() for _ in range(n)]\nset1 = []\nset2 = []\nfor i in range(n):\n  for j in range(m):\n    if arr[i][j]=='S':\n      set1.append(i)\n      set2.append(j)\nlen1 = int(n - len(set(set1)))\nlen2 = int(m - len(set(set2)))\n\nprint(len1 * m + len2 *n - len2 * len1)\n", "s = input().split()\nr = int( s[0] )\nc = int( s[1] )\na = []\nfor i in range( r ):\n\ta.append( input() )\nrow = r\ncol = c\nfor s in a:\n\tfor x in s:\n\t\tif x == 'S':\n\t\t\trow -= 1\n\t\t\tbreak\nfor i in range( c ):\n\tfor j in range( r ):\n\t\tif a[j][i] == 'S':\n\t\t\tcol -= 1\n\t\t\tbreak\n\t\t\t\nprint( row*c + col*r - col*row )\n\t\t\n", "\nr,c=list(map(int,input().split()))\n\nl=[0]*c\nh=[0]*r\na=[]\nfor i in range(r):\n    a.append([])\n    ls=list(input())\n    for j in range(c):\n        a[i].append(ls[j])\n       \n        if a[i][j]!='.' :\n            l[j]=1\n            h[i]=1\n        else:\n            a[i][j]=1\n\n            \n\nt=0\nfor i in range(r):\n    if h[i]==0 :\n        for j in range(c):\n            t+=a[i][j]\n            a[i][j]=0\n\nfor i in range(c):\n    if l[i]==0:\n        for j in range(r):\n            t+=a[j][i]\n            a[j][i]=0\n\nprint(t)      \n\n         \n", "import sys\nmy_file = sys.stdin\n#my_file = open(\"input.txt\", \"r\")\nline = [int(i) for i in my_file.readline().strip(\"\\n\").split()]\nr, c = line[0], line[1]\ntable = my_file.read().split()\nnew_table = []\nfor line in table:\n    if \"S\" in line:\n        new_table.append(line)\nres = (len(table) - len(new_table))*c\nr -= len(table) - len(new_table)\nfor col in range(c):\n    for row in range(r):\n        if \"S\" in new_table[row][col]:\n            break\n    else:\n        res += r\nprint(res)", "r, c = list(map(int, input().split()))\n\nrt = [0] * 10\nct = [0] * 10\n\nfor i in range(r):\n    s = str(input())\n    for j in range(len(s)):\n        if s[j] == 'S':\n            rt[i] = 1\n            ct[j] = 1\n\ncnt = 0\nfor i in range(r):\n    for j in range(c):\n        if rt[i] == 0 or ct[j] == 0:\n            cnt += 1\n\nprint(cnt)\n", "a, b = map(int, input().split())\ns, p = 0, [[0] * b for i in range(a)]\nfor i in range(a):\n    t = input()\n    if 'S' in t:\n        for j in range(b):\n            p[i][j] |= 1\n            if t[j] == 'S':\n                for k in range(a):\n                    p[k][j] |= 2\nfor i in range(a):\n    s += p[i].count(3)\nprint(a * b - s)", "def main(r,c,seq):\n\tanswer = 0\n\tfor i in range(r):\n\t\tk = seq[i].count(1)\n\t\tif k==0:\n\t\t\tfor j in range(c):\n\t\t\t\titem = seq[i][j]\n\t\t\t\tif item==0:\n\t\t\t\t\tseq[i][j]=2\n\t\t\t\t\tanswer+=1\n\tfor i in range(c):\n\t\ttemp = 0\n\t\tfor j in range(r):\n\t\t\titem = seq[j][i]\n\t\t\tif item==0:\n\t\t\t\ttemp+=1\n\t\t\telif item==1:\n\t\t\t\ttemp=0\n\t\t\t\tbreak\n\n\t\tanswer+=temp\n\n\n\treturn answer\n\ndef init():\n\tr,c = list(map(int, input().split()))\n\tseq = []\n\tfor i in range(r):\n\t\ttemp = []\n\t\tfor item in input():\n\t\t\tif item=='S':\n\t\t\t\ttemp+=[1]\n\t\t\telse:\n\t\t\t\ttemp+=[0]\n\t\tseq.append(temp)\n\n\tprint(main(r,c,seq))\n\ninit()", "def how_many(rows, cols):\n    n = 0\n\n    # Eat rows\n    for i in range(len(rows)):\n        if 'S' not in rows[i]:\n            for j in range(len(cols)):\n                rows[i][j] = 'E'\n                cols[j][i] = 'E'\n                n += 1\n    # eat coloumns\n    for j in range(len(cols)):\n            if 'S' not in cols[j]:\n                n += cols[j].count('.')\n                \n    return n\n\n            \n\ndef main():\n    first_line = input()\n    first_line = first_line.split()\n    \n    r = int(first_line[0])\n    c = int(first_line[1])\n    \n    rows = []\n\n    for i in range(r):\n        line = input()\n        rows += [list(line)]\n\n    coloumns = [[rows[i][j] for i in range(r)] for j in range(c)]\n\n    print(how_many(rows, coloumns))\n    \n        \n    \n\n\nmain()   \n", "r,c=list(map(int,input().split()))\n\nL=[]\n\nfor i in range(r):\n    s=input()\n    L.append(str(s))\nans=r*c\nfor i in range(r):\n    for j in range(c):\n        if(L[i][j]==\"S\"):\n            ans-=1\n            continue\n        if(\"S\" in L[i]):\n            case=False\n            for z in range(r):\n                if(L[z][j]==\"S\"):\n                    case=True\n                    break\n            if(case):\n                ans-=1\nprint(ans)\n", "r, c = list(map(int, input().split()))\na = []\nfor i in range(r):\n    a.append(input())\n\nx = r\nfor i in range(r):\n    for j in range(c):\n        if a[i][j] == 'S':\n            x -= 1\n            break\n\ny = c\nfor j in range(c):\n    for i in range(r):\n        if a[i][j] == 'S':\n            y -= 1\n            break\n\nprint(x*c+r*y-x*y)\n\n"]