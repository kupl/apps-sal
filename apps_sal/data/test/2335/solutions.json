["n=int(input())\nnfirst,rc,bc,memr,memb,memg,dr,db,s,rl,bl,gl,lg=13*[0]\nfor i in range(n):\n    a=input().split(\" \")\n    if a[1]==\"G\":\n        if memg==0:\n            gl=int(a[0])\n        if nfirst:\n            if memr>0:\n                dr=max(dr,int(a[0])-memr)\n            if memb>0:\n                db=max(db,int(a[0])-memb)\n            s+=min(2*(int(a[0])-memg),3*(int(a[0])-memg)-dr-db)\n        dr,db,rc,bc=4*[0]\n        memr,memb,memg=3*[int(a[0])]\n        nfirst=True\n        lg+=1\n    elif a[1]==\"R\":\n        rc+=1\n        if memr==0:\n            rl=int(a[0])\n        if memr>0 and nfirst:\n            dr=max(dr,int(a[0])-memr)\n        memr=int(a[0])\n    elif a[1]==\"B\":\n        bc+=1\n        if memb==0:\n            bl=int(a[0])\n        if memb>0 and nfirst:\n            db=max(db,int(a[0])-memb)\n        memb=int(a[0])\nif lg>0:\n    if rc>0:\n        s+=memr-memg\n    if bc>0:\n        s+=memb-memg\n    if rl>0:\n        s+=gl-rl\n    if bl>0:\n        s+=gl-bl\nelse:\n    s+=memr-rl+memb-bl\nprint(s)", "n=int(input())\ng=[]\nr=[]\nb=[]\nlr=0\nlb=0\nlg=0\nfor i in range(n):\n    a=input().split(\" \")\n    if a[1]==\"G\":\n        g.append(int(a[0]))\n        lg+=1\n    if a[1]==\"R\":\n        r.append(int(a[0]))\n        lr+=1\n    if a[1]==\"B\":\n        b.append(int(a[0]))\n        lb+=1\ng=g[::-1]\nr=r[::-1]\nb=b[::-1]\ns=0\nif lg>0:\n    for i in range(lg+1):\n        if i==0:\n            ps=0\n            if lr>0:\n                if r[lr-1]<g[lg-1]:\n                    ps+=g[lg-1]-r[lr-1]\n                    while r[lr-1]<g[lg-1]:\n                        lr-=1\n                        if lr==0:\n                            break\n            if lb>0:\n                if b[lb-1]<g[lg-1]:\n                    ps+=g[lg-1]-b[lb-1]\n                    while b[lb-1]<g[lg-1]:\n                        lb-=1\n                        if lb==0:\n                            break\n            s+=ps\n        elif i==lg:\n            ps=0\n            if lr>0:\n                ps+=r[0]-g[0]\n            if lb>0:\n                ps+=b[0]-g[0]\n            s+=ps\n        else:\n            ps=0\n            d=g[lg-i-1]-g[lg-i]\n            rin=False\n            blin=False\n            if lr>0:\n                if r[lr-1]<g[lg-i-1]:\n                    rin=True\n                    mdr=r[lr-1]-g[lg-i]\n                    if lr>1:\n                        while r[lr-2]<g[lg-i-1]:\n                            mdr=max(mdr,r[lr-2]-r[lr-1])\n                            lr-=1\n                            if lr==1:\n                                break\n                    mdr=max(mdr,g[lg-i-1]-r[lr-1])\n                    lr-=1\n            if lb>0:\n                if b[lb-1]<g[lg-i-1]:\n                    blin=True\n                    mdb=b[lb-1]-g[lg-i]\n                    if lb>1:\n                        while b[lb-2]<g[lg-i-1]:\n                            mdb=max(mdb,b[lb-2]-b[lb-1])\n                            lb-=1\n                            if lb==1:\n                                break\n                    mdb=max(mdb,g[lg-i-1]-b[lb-1])\n                    lb-=1\n            if blin and rin:\n                ps+=min(2*d,3*d-mdr-mdb)\n            else:\n                ps+=d\n                if blin:\n                    ps+=d-mdb\n                elif rin:\n                    ps+=d-mdr\n            s+=ps\nelse:\n    if lr>0:\n        s+=r[0]-r[-1]\n    if lb>0:\n        s+=b[0]-b[-1]\nprint(s)", "k=int(input())\nt,a,b,m,n,o,d,e,s,x,y,z,l=13*[0]\nfor i in range(k):\n    c=input().split(\" \")\n    f=int(c[0])\n    if c[1]==\"G\":\n        if o<1:\n            z=f\n        if t:\n            if m>0:\n                d=max(d,f-m)\n            if n>0:\n                e=max(e,f-n)\n            s+=min(2*(f-o),3*(f-o)-d-e)\n        d,e,a,b=4*[0]\n        m,n,o=3*[f]\n        t=True\n        l+=1\n    if c[1]==\"R\":\n        a+=1\n        if m<1:\n            x=f\n        if m>0 and t:\n            d=max(d,f-m)\n        m=f\n    if c[1]==\"B\":\n        b+=1\n        if n<1:\n            y=f\n        if n>0 and t:\n            e=max(e,f-n)\n        n=f\nif l>0:\n    if a>0:\n        s+=m-o\n    if b>0:\n        s+=n-o\n    if x>0:\n        s+=z-x\n    if y>0:\n        s+=z-y\nelse:\n    s+=m-x+n-y\nprint(s)", "k=int(input())\nt,a,b,m,n,o,d,e,s,x,y,z,l=13*[0]\nfor i in range(k):\n    c=input().split(\" \")\n    f=int(c[0])\n    if c[1]==\"G\":\n        if o<1:\n            z=f\n        if t:\n            if m>0:\n                d=max(d,f-m)\n            if n>0:\n                e=max(e,f-n)\n            s+=min(2*(f-o),3*(f-o)-d-e)\n        d,e,a,b=4*[0]\n        m=f\n        n=f\n        o=f\n        t=1\n        l+=1\n    if c[1]==\"R\":\n        a+=1\n        if m<1:\n            x=f\n        if m>0 and t:\n            d=max(d,f-m)\n        m=f\n    if c[1]==\"B\":\n        b+=1\n        if n<1:\n            y=f\n        if n>0 and t:\n            e=max(e,f-n)\n        n=f\nif l>0:\n    if a>0:\n        s+=m-o\n    if b>0:\n        s+=n-o\n    if x>0:\n        s+=z-x\n    if y>0:\n        s+=z-y\nelse:\n    s=m-x+n-y\nprint(s)", "k=int(input())\nt,a,b,m,n,o,d,e,s,x,y,z,l=13*[0]\nfor i in range(k):\n    c=input().split(\" \")\n    f=int(c[0])\n    if c[1]==\"G\":\n        if o<1:\n            z=f\n        if t:\n            if m>0:\n                d=max(d,f-m)\n            if n>0:\n                e=max(e,f-n)\n            s+=min(2*(f-o),3*(f-o)-d-e)\n        d,e,a,b=4*[0]\n        m,n,o=3*[f]\n        t=1\n        l+=1\n    if c[1]==\"R\":\n        a+=1\n        if m<1:\n            x=f\n        if m>0 and t:\n            d=max(d,f-m)\n        m=f\n    if c[1]==\"B\":\n        b+=1\n        if n<1:\n            y=f\n        if n>0 and t:\n            e=max(e,f-n)\n        n=f\nif l>0:\n    if a>0:\n        s+=m-o\n    if b>0:\n        s+=n-o\n    if x>0:\n        s+=z-x\n    if y>0:\n        s+=z-y\nelse:\n    s=m-x+n-y\nprint(s)", "import sys\n\nn = int(input())\npos = []\n\nind = 0\ninp = [s for line in sys.stdin.readlines() for s in line.split()]\n\ncolor = []\ncosts = 0\nreds = []\ngreens = []\nblues = []\nfor i in range(n):\n    a,b = inp[ind],inp[ind+1]\n    ind+=2\n    pos.append(int(a))\n    color.append(b)\n    if b=='R':\n        reds.append(i)\n    elif b=='G':\n        greens.append(i)\n    else:\n        blues.append(i)\n\nif len(greens)==0:\n    if len(reds)>0:\n        a = reds[0]\n        b = reds[-1]\n        costs += pos[b] - pos[a]\n    \n    if len(blues)>0:\n        a = blues[0]\n        b = blues[-1]\n        costs += pos[b] - pos[a]\n    print(costs)\n    return\n\n\n\nfirst_g = greens[0]\nlast_g = greens[-1]\nif len(blues)>0 and blues[0]<=first_g:\n    costs += pos[first_g] - pos[blues[0]]\nif len(reds)>0 and reds[0]<=first_g:\n    costs += pos[first_g] - pos[reds[0]]\n\nif len(blues)>0 and blues[-1]>= last_g:\n    costs += pos[blues[-1]] - pos[last_g]\nif len(reds)>0  and reds[-1] >= last_g:\n    costs += pos[reds[-1]]  - pos[last_g]\n\ni = first_g\nwhile True: \n    j = i+1\n    REDS = [i]\n    BLUES = [i]\n    while j<n and color[j]!='G':\n        if color[j]=='R':\n            REDS.append(j)\n        else:\n            BLUES.append(j)\n        j+=1\n    if j>=n:\n        break\n    REDS.append(j)\n    BLUES.append(j)\n    best_r = 0\n    for ind in range(len(REDS)-1):\n        a = REDS[ind]\n        b = REDS[ind+1]\n        best_r = max(best_r,pos[b]-pos[a])\n    best_b = 0\n    for ind in range(len(BLUES)-1):\n        a = BLUES[ind]\n        b = BLUES[ind+1]\n        best_b = max(best_b,pos[b]-pos[a])\n    costs += min(2*(pos[j]-pos[i]), 3*(pos[j]-pos[i])-best_r-best_b)\n\n\n    i = j\nprint(costs)\n", "#! /usr/bin/env python3\n#------------------------------------------------\n# Author:    krishna\n# Created:   Fri Dec 29 23:04:38 IST 2017\n# File Name: f.py\n# USAGE:\n#       f.py\n# Description:\n# \n#------------------------------------------------\nimport sys\n\n\nn = int(sys.stdin.readline().rstrip())\n\nlocations = {\n    'R' : [],\n    'G' : [],\n    'B' : []\n}\n\nfor i in range(n):\n    (x, c) = sys.stdin.readline().rstrip().split()\n    locations[c].append(int(x))\n\n# for c in locations.keys():\n#     locations[c].sort()\n\ndef solve(locations):\n    count = 0\n    rPtr = 0\n    bPtr = 0\n    gPtr = 0\n\n    if (len(locations['G']) == 0):\n        if (len(locations['R'])):\n            count += locations['R'][-1] - locations['R'][0]\n        if (len(locations['B'])):\n            count += locations['B'][-1] - locations['B'][0]\n\n        return count\n\n    while (len(locations['G']) > gPtr):\n        # Eat predecessors\n        if (\n            (len(locations['R']) > rPtr)\n            and (locations['G'][gPtr] > locations['R'][rPtr])\n        ):\n            count += locations['G'][gPtr] - locations['R'][rPtr]\n            while (\n                (len(locations['R']) > rPtr)\n                and (locations['G'][gPtr] > locations['R'][rPtr])\n            ):\n                rPtr += 1\n\n        # Eat predecessors\n        if (\n            (len(locations['B']) > bPtr)\n            and (locations['G'][gPtr] > locations['B'][bPtr])\n        ):\n            count += locations['G'][gPtr] - locations['B'][bPtr]\n            while (\n                (len(locations['B']) > bPtr)\n                and (locations['G'][gPtr] > locations['B'][bPtr])\n            ):\n                bPtr += 1\n\n        # Eat last successors\n        if (len(locations['G']) == (gPtr + 1)):\n            if (len(locations['R']) > rPtr):\n                count += locations['R'][-1] - locations['G'][gPtr]\n\n            if (len(locations['B']) > bPtr):\n                count += locations['B'][-1] - locations['G'][gPtr]\n\n            return count\n\n        # Calc intervels\n        if (len(locations['G']) > (gPtr + 1)):\n            prevR = locations['G'][gPtr]\n            maxRd = 0\n            while (len(locations['R']) > rPtr):\n                if (locations['R'][rPtr] < locations['G'][gPtr + 1]):\n                    maxRd = max(maxRd, locations['R'][rPtr] - prevR)\n                    prevR = locations['R'][rPtr]\n                    rPtr += 1\n                else:\n                    break\n            maxRd = max(maxRd, locations['G'][gPtr + 1] - prevR)\n\n            prevB = locations['G'][gPtr]\n            maxBd = 0\n            while (len(locations['B']) > bPtr):\n                if (locations['B'][bPtr] < locations['G'][gPtr + 1]):\n                    maxBd = max(maxBd, locations['B'][bPtr] - prevB)\n                    prevB = locations['B'][bPtr]\n                    bPtr += 1\n                else:\n                    break\n            maxBd = max(maxBd, locations['G'][gPtr + 1] - prevB)\n\n            count += min(\n                2 * (locations['G'][gPtr + 1] - locations['G'][gPtr]),\n                (3 * (locations['G'][gPtr + 1] - locations['G'][gPtr])) - maxRd - maxBd\n            )\n\n            gPtr += 1\n\n    return count\n\nprint(solve(locations))\n", "from sys import stdin, stdout\n\n\nn = int(stdin.readline())\nchallengers = []\n\nfor i in range(n):\n    s = stdin.readline().strip().split()\n    challengers.append((int(s[0]), s[1]))\n\nchallengers.sort()\nG = []\nR = []\nB = []\n\nfor i in range(n):\n    v = challengers[i]\n    if v[1] == 'G':\n        G.append(i)\n    elif v[1]  == 'R':\n        R.append(i)\n    else:\n        B.append(i)\n\n\ntest = []\nfor v in challengers:\n    test.append(v[0])\n\nchallengers = test[:]\n\nans = 0\n\nif len(G):\n    indr, indb = 0, 0\n    \n    for i in range(len(G) - 1):\n        while indr < len(R) and R[indr] < G[i]:\n            indr += 1\n        \n        while indb < len(B) and B[indb] < G[i]:\n            indb += 1\n        \n        mxr, mxb = 0, 0        \n        \n        previous = G[i]\n        used1, used2 = 0, 0\n        \n        while indr < len(R) and R[indr] < G[i + 1]:\n            mxr = max(mxr, challengers[R[indr]] - challengers[previous])\n            previous = R[indr]\n            indr += 1\n            used1 = 1\n    \n        mxr = max(mxr, -challengers[previous] + challengers[G[i + 1]])\n        \n        previous = G[i]\n        \n        while indb < len(B) and B[indb] < G[i + 1]:\n            mxb = max(mxb, challengers[B[indb]] - challengers[previous])\n            previous = B[indb]\n            indb += 1\n            used2 = 1\n    \n        mxb = max(mxb, -challengers[previous] + challengers[G[i + 1]])\n\n        \n        d = challengers[G[i + 1]] - challengers[G[i]]\n        ans += min(2 * d, 3 * d - mxb - mxr)\n    \n    \n    if R and R[0] < G[0]:\n        for i in range(1, len(R)):\n            if R[i] > G[0]:\n                ans += challengers[G[0]] - challengers[R[i - 1]]\n                break\n            else:\n                ans += challengers[R[i]] - challengers[R[i - 1]]\n        else:\n            ans += challengers[G[0]] - challengers[R[-1]]\n    \n    if B and B[0] < G[0]:\n        for i in range(1, len(B)):\n            if B[i] > G[0]:\n                ans += challengers[G[0]] - challengers[B[i - 1]]\n                break\n            else:\n                ans += challengers[B[i]] - challengers[B[i - 1]]\n        else:\n            ans += challengers[G[0]] - challengers[B[-1]]\n    \n    \n    label = 0\n    \n    if R and R[-1] > G[-1]:\n        for i in range(len(R)):\n            if not label and R[i] > G[-1]:\n                ans += challengers[R[i]] - challengers[G[-1]]\n                label = 1\n            elif R[i] > G[-1]:\n                ans += challengers[R[i]] - challengers[R[i - 1]]\n            \n            \n    label = 0\n    \n    if B and B[-1] > G[-1]:\n        for i in range(len(B)):\n            if not label and B[i] > G[-1]:\n                ans += challengers[B[i]] - challengers[G[-1]]\n                label = 1\n            elif B[i] > G[-1]:\n                ans += challengers[B[i]] - challengers[B[i - 1]]    \nelse:\n    for i in range(1, len(R)):\n        ans += challengers[R[i]] - challengers[R[i - 1]]\n    \n    for i in range(1, len(B)):\n        ans += challengers[B[i]] - challengers[B[i - 1]]\n\nstdout.write(str(ans))\n\n", "from sys import stdin, stdout\ninput, print = stdin.readline, stdout.write\nn = int(input())\nr, g, b = [], [], []\nans = 0\nfor i in range(n):\n    x, t = [i for i in input().split()]\n    x = int(x)\n    if t == 'G':\n        g.append(x)\n    elif t == 'R':\n        r.append(x)\n    else:\n        b.append(x)\n        \nif len(g) == 0:\n    if len(r):\n        ans += r[-1] - r[0]\n    if len(b):\n        ans += b[-1] - b[0]\n    print(str(ans))\n    return\n    \nif not len(r):\n    r.append(g[0])\nif not len(b):\n    b.append(g[0])\nif r[0] < g[0]:\n    ans += g[0] - r[0]\nif b[0] < g[0]:\n    ans += g[0] - b[0]\nif r[-1] > g[-1]:\n    ans += r[-1] - g[-1]\nif b[-1] > g[-1]:\n    ans += b[-1] - g[-1]\nbi, ri = 0, 0\n\nfor i in range(len(g) - 1):\n    while bi < len(b) - 1 and b[bi] < g[i]:\n        bi += 1\n    while ri < len(r) - 1 and r[ri] < g[i]:\n        ri += 1\n    a1, a2 = (g[i + 1] - g[i]) * 3, (g[i + 1] - g[i]) * 2\n    mr, mb, cbi, cri = r[ri] - g[i], b[bi] - g[i], bi, ri\n\n    while cbi + 1 < len(b) and b[cbi + 1] < g[i + 1]:\n        mb = max(mb, b[cbi + 1] - b[cbi])\n        cbi += 1\n    mb = max(mb, g[i + 1] - b[cbi])\n    while cri + 1 < len(r) and r[cri + 1] < g[i + 1]:\n        mr = max(mr, r[cri + 1] - r[cri])\n        cri += 1\n    mr = max(mr, g[i + 1] - r[cri])\n       \n    if b[bi] < g[i] or b[bi] > g[i + 1]:\n        a2 = 100000000000000\n        a1 -= g[i + 1] - g[i]\n        mb = 0\n    if r[ri] < g[i] or r[ri] > g[i + 1]:\n        a2 = 100000000000000\n        a1 -= g[i + 1] - g[i]\n        mr = 0\n        \n    ans += max(g[i + 1] - g[i], min(a1 - mr - mb, a2))\n    \nprint(str(ans))\n    \n    \n    \n", "from sys import stdin, stdout\ninput, print = stdin.readline, stdout.write\nn = int(input())\nr, g, b = [], [], []\nans = 0\nfor i in range(n):\n    x, t = [i for i in input().split()]\n    x = int(x)\n    if t == 'G':\n        g.append(x)\n    elif t == 'R':\n        r.append(x)\n    else:\n        b.append(x)\n        \nif len(g) == 0:\n    if len(r):\n        ans += r[-1] - r[0]\n    if len(b):\n        ans += b[-1] - b[0]\n    print(str(ans))\n    return\n    \nif not len(r):\n    r.append(g[0])\nif not len(b):\n    b.append(g[0])\nif r[0] < g[0]:\n    ans += g[0] - r[0]\nif b[0] < g[0]:\n    ans += g[0] - b[0]\nif r[-1] > g[-1]:\n    ans += r[-1] - g[-1]\nif b[-1] > g[-1]:\n    ans += b[-1] - g[-1]\nbi, ri = 0, 0\n\nfor i in range(len(g) - 1):\n    while bi < len(b) - 1 and b[bi] < g[i]:\n        bi += 1\n    while ri < len(r) - 1 and r[ri] < g[i]:\n        ri += 1\n    a1, a2 = (g[i + 1] - g[i]) * 3, (g[i + 1] - g[i]) * 2\n    mr, mb, cbi, cri = r[ri] - g[i], b[bi] - g[i], bi, ri\n\n    while cbi + 1 < len(b) and b[cbi + 1] < g[i + 1]:\n        mb = max(mb, b[cbi + 1] - b[cbi])\n        cbi += 1\n    mb = max(mb, g[i + 1] - b[cbi])\n    while cri + 1 < len(r) and r[cri + 1] < g[i + 1]:\n        mr = max(mr, r[cri + 1] - r[cri])\n        cri += 1\n    mr = max(mr, g[i + 1] - r[cri])\n       \n    if b[bi] < g[i] or b[bi] > g[i + 1]:\n        a2 = 100000000000000\n        a1 -= g[i + 1] - g[i]\n        mb = 0\n    if r[ri] < g[i] or r[ri] > g[i + 1]:\n        a2 = 100000000000000\n        a1 -= g[i + 1] - g[i]\n        mr = 0\n        \n    ans += min(a1 - mr - mb, a2)\n    \nprint(str(ans))\n", "n = int( input() )\n\nmin_red, max_red = -1, -1\nmin_blue, max_blue = -1, -1\n\nleft_green, right_green = -1, -1\n\na = []\n\nans = 0\n\nlast_r, last_b, last_g = -1, -1, -1\n\nr_edges = []\nb_edges = []\ng_edges = []\n\nfor i in range( n ):\n\n    p, c = input().split()\n\n    p = int(p)\n\n    if c == 'R' or c == 'G':\n        if last_r != -1:\n            r_edges.append( p - last_r )\n        last_r = p\n\n    if c == 'B' or c == 'G':\n        if last_b != -1:\n            b_edges.append( p - last_b )\n        last_b = p\n\n    if c == 'G':\n\n        ans += sum(r_edges) + sum(b_edges)\n\n        if len(r_edges) > 0:\n            max_red = max(r_edges)\n\n        if len(b_edges) > 0:\n            max_blue = max(b_edges)\n\n        if last_g != -1:\n            if (p-last_g) < (max_red+max_blue):\n                ans += (p-last_g)\n                ans -= (max_red+max_blue)\n\n        r_edges = [ ]\n        b_edges = [ ]\n\n        last_g = p\n\nans += sum(r_edges) + sum(b_edges)\n\nprint( ans )\n", "r = g = b = 0\nR = G = B = 0\ns = u = v = 0\nf = lambda k: k if k else n\nfor i in range(int(input())):\n    q, c = input().split()\n    n = int(q)\n    if c in 'RG': r, R, u = f(r), n, max(u, n - R)\n    if c in 'BG': b, B, v = f(b), n, max(v, n - B)\n    if c == 'G':\n        if g: s -= max(u + v, n - G)\n        g, G, u, v = f(g), n, 0, 0\nprint(s + R - r + G - g + B - b)"]