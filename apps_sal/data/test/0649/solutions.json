["from sys import *\n\nT = int(stdin.readline())\nt = [int(s) for s in stdin.readline().split(' ')]\n\na = []\nfor i in range(T - 1, -1, -1):\n\n    if i % 2 == 0:\n        a += [(e[0], -e[1]) for e in a]\n        a = [(e[0] - t[i], e[1]) for e in a]\n        a += [(- x - 1, 0) for x in range(t[i])]\n        a = list(set(a))\n\n    if i % 2 == 1:\n        a += [(e[1], -e[0]) for e in a]\n        a = [(e[0] - t[i], e[1] + t[i]) for e in a]\n        a += [(- x - 1, x + 1) for x in range(t[i])]\n        a = list(set(a))\n\nprint(len(a))\n", "import time\n\ncoord = set()\nflows = int(input())\nstart = time.time()\nt = list(map(int, input().split()))\ndirections = {0: (0, 1), 1: (1, 1), 2: (1, 0), 3: (1, -1), 4: (0, -1), 5: (-1, -1), 6: (-1, 0), 7: (-1, 1)}\nwas = [[[[0 for j in range(300)] for i in range(300)] for x in range(31)] for y in range(8)]# np.zeros([600,600,31,8])\n\n\ndef flight(n, x=0, y=0, direction=0):\n    if was[direction][n][x][y]:\n        #print(x, y, direction, n, len(was))\n        return\n    was[direction][n][x][y] = 1\n    if n:\n        for _ in range(t[flows - n]):\n            x += directions[direction][0]\n            y += directions[direction][1]\n            coord.add((x, y))\n        flight(n - 1, x, y, (direction + 1) % 8)\n        flight(n - 1, x, y, (direction - 1) % 8)\n\nflight(flows)\n# print(coord)\nprint(len(coord))\n", "dr = [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]]\n\nn = int(input())\nt = [int(i) for i in input().split()]\nvisited = set()\nN = 150*2 + 10\ncovers = [[0]*N for i in range(N)]\n\ndef dfs(d, pos, path):\n    mem = (d, pos, path)\n    if mem in visited:\n        return set()\n    else:\n        visited.add(mem)\n    if d == n+1:\n        return\n    for _ in range(t[d-1]):\n        pos = (pos[0] + dr[path][0], pos[1] + dr[path][1])\n        covers[pos[0]][pos[1]] = 1\n    dfs(d+1, pos, (path+1) % 8)\n    dfs(d+1, pos, (path-1) % 8)\n\ndfs(1, (int(N/2), int(N/2)), 0)\nprint(sum([sum(i) for i in covers]))\n", "from collections import defaultdict\n\ndx = [0,-1,-1,-1, 0, 1, 1,1]\ndy = [1, 1, 0,-1,-1,-1, 0,1]\n\n#visited =[[[[False for _ in range(32)] for _ in range(8)] for _ in range(320)] for _ in range(320)]\nvisited = defaultdict(lambda : False)\n\ngrid = [[False for _ in range(320)] for _ in range(320)]\n\ndef dfs(x,y,d,n,N, inp):\n    if n >= N or visited[(x,y,d,n)]:\n        return\n\n    visited[(x,y,d,n)] = True\n\n    dist = inp[n]\n\n    for i in range(1,dist+1):\n        grid[x+dx[d]*i][y+i*dy[d]] = True\n\n    if (n < N):\n        dfs(x + dx[d]*dist, y+dy[d]*dist, (d+1)%8, n+1,N,inp)\n        dfs(x + dx[d]*dist, y+dy[d]*dist, (d+7)%8, n+1,N,inp)\n\n\ndef __starting_point():\n    N = int(input())\n    inp = list(map(int, input().strip().split()))\n    dfs(160,160,0,0,N,inp)\n    result = sum(map(sum,grid))\n    print(result)\n\n__starting_point()", "#!/usr/bin/env python3\nfrom sys import stdin,stdout\n\n\ndef ri():\n    return list(map(int, input().split()))\n\nw = 15\nadding = [(0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, -1), (1, 0), (1, 1)]\ndef fill(x, y,dir,depth):\n    for i in range(t[depth]):\n        x += adding[dir][0]\n        y += adding[dir][1]\n        v[x][y] = 1\n\n\ndef dfs(x, y, dir, depth):\n    if depth == n:\n        return\n    #print(T, dir, depth)\n    if (dir, depth) in T[x][y]:\n        #print(\"found\")\n        #print(T, dir, depth)\n        return\n    fill(x,y,dir,depth)\n    ndepth = depth+1\n    nx = x + adding[dir][0]*t[depth]\n    ny = y + adding[dir][1]*t[depth]\n    ndir = (dir+1)%8\n    dfs(nx, ny, ndir, ndepth)\n    ndir = (8+dir-1)%8\n    dfs(nx, ny, ndir, ndepth)\n    T[x][y].add(tuple((dir, depth)))\n\n\nn = int(input())\nt = list(ri())\n\nv = [[0 for i in range(n*w)] for j in range(n*w)]\n\nT = [[set() for i in range(n*w)] for j in range(n*w)]\n\n# x, y, dir, depth\ndfs(n*w//2, n*w//2, 0, 0)\n\nans = 0\nfor i in range(n*w):\n    for j in range(n*w):\n        if v[i][j]:\n            ans +=1\n\nprint(ans)\n", "from math import sin\ndef mp():  return list(map(int,input().split()))\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\ndef listring(l): return ' '.join([str(x) for x in l])\ndef ptlist(l): print(' '.join([str(x) for x in l]))\n\nn = it()\nstep = lt()\ndict = {}\ndef explosion(start,s,d):\n    (i,j) = start\n    t = s+1\n    if d == 0:\n        for k in range(j+1,j+t):\n            dict[(i,k)] = True\n        return ((i,j+t-1),(d+7)%8),((i,j+t-1),(d+1)%8)\n    if d == 1:\n        for k in range(1,t):\n            dict[(i+k,j+k)] = True\n        return ((i+t-1,j+t-1),(d+7)%8),((i+t-1,j+t-1),(d+1)%8)\n    if d == 2:\n        for k in range(1,t):\n            dict[(i+k,j)] = True\n        return ((i+t-1,j),(d+7)%8),((i+t-1,j),(d+1)%8)\n    if d == 3:\n        for k in range(1,t):\n            dict[(i+k,j-k)] = True\n        return ((i+t-1,j-t+1),(d+7)%8),((i+t-1,j-t+1),(d+1)%8)\n    if d == 4:\n        for k in range(1,t):\n            dict[(i,j-k)] = True\n        return ((i,j-t+1),(d+7)%8),((i,j-t+1),(d+1)%8)\n    if d == 5:\n        for k in range(1,t):\n            dict[(i-k,j-k)] = True\n        return ((i-t+1,j-t+1),(d+7)%8),((i-t+1,j-t+1),(d+1)%8)\n    if d == 6:\n        for k in range(1,t):\n            dict[(i-k,j)] = True\n        return ((i-t+1,j),(d+7)%8),((i-t+1,j),(d+1)%8)\n    if d == 7:\n        for k in range(1,t):\n            dict[(i-k,j+k)] = True\n        return ((i-t+1,j+t-1),(d+7)%8),((i-t+1,j+t-1),(d+1)%8)\n            \nstart = [((0,0),0)]\nfor i in range(n):\n    l = []\n    for p,q in start:\n        a,b = explosion(p,step[i],q)\n        l.append(a)\n        l.append(b)\n    start = set(l)\npt(len(dict))\n        \n        \n            \n    \n", "k = int(input()) & 1\n\np = []\ns = range(1, 6)\n\nfor q in map(int, input().split()[::-1]):\n\n    if k:\n        p += [(x, -y) for x, y in p]\n        p = [(x - q, y) for x, y in p]\n        p += [(-x, 0) for x in s[:q]]\n    else:\n        p += [(y, -x) for x, y in p]\n        p = [(x - q, y + q) for x, y in p]\n        p += [(-x, x) for x in s[:q]]\n\n    p = list(set(p))\n    k = 1 - k\n\nprint(len(p))"]