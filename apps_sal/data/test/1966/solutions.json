["from itertools import permutations\n\nn = int(input())\n\np1, _, p2, _, p3, _, p4 = [input() for _ in range(n)], input(), [input() for _ in range(n)], input(), [input() for _ in range(n)], input(), [input() for _ in range(n)]\n\ndef count(a,b,c,d):\n    board = [a[i] + b[i] for i in range(n)] + [c[i] + d[i] for i in range(n)]\n\n    res = 0\n    for i in range(2*n):\n        for j in range(2*n):\n            clr = '1' if (i+j)%2 == 0 else '0'\n            res += board[i][j] != clr\n    return res\n\nprint(min(count(*p) for p in permutations([p1, p2, p3, p4])))\n", "n = int(input())\n\nb1 = [[int(x) for x in input()] for _ in range(n)]\ninput()\nb2 = [[int(x) for x in input()] for _ in range(n)]\ninput()\nb3 = [[int(x) for x in input()] for _ in range(n)]\ninput()\nb4 = [[int(x) for x in input()] for _ in range(n)]\n\ndef cost(b):\n    z = o = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+j)%2 == b[i][j]:\n                z += 1\n            if (i+j+1)%2 == b[i][j]:\n                o += 1\n    return z,o\n\n\nz1,o1 = cost(b1)\nz2,o2 = cost(b2)\nz3,o3 = cost(b3)\nz4,o4 = cost(b4)\n\nprint((min(\n    z1+z2+o3+o4,\n    z1+o2+z3+o4,\n    z1+o2+o3+z4,\n    o1+z2+z3+o4,\n    o1+z2+o3+z4,\n    o1+o2+z3+z4,\n        )))\n", "from itertools import permutations\n\ndef solve(TL, TR, BL, BR, s, n):\n\tA = []\n\n\tfor i in range(n):\n\t\tX = TL[i].copy()\n\t\tX.extend(TR[i])\n\t\tA.append(X)\n\n\tfor i in range(n):\n\t\tX = BL[i].copy()\n\t\tX.extend(BR[i])\n\t\tA.append(X)\n\n\tc = 0\n\tans = 0\n\n\tfor i in range(2 * n):\n\t\tif i % 2 == 1:\n\t\t\tc = s ^ 1\n\t\telse:\n\t\t\tc = s\n\n\t\tfor j in range(2 * n):\n\t\t\tif A[i][j] != c:\n\t\t\t\tans += 1\n\t\t\t\tA[i][j] = c\n\n\t\t\tc ^= 1\n\n\treturn ans\n\n\nn = int(input())\n\nP = []\n\nfor _ in range(4):\n\tA = []\n\n\tfor i in range(n):\n\t\tA.append(list(map(int, list(input()))))\n\n\tif _ != 3:\n\t\tinput()\n\n\tP.append(A)\n\nans = (4 * n * n) + 1\n\nfor S in permutations(range(4)):\n\n\tfor s in range(2):\n\n\t\tcur = solve(P[S[0]],P[S[1]],P[S[2]],P[S[3]], s, n)\n\n\t\tans = min(ans, cur)\n\nprint(ans)", "n = int(input())\nboard = [[list(map(int, list(input()))) for i in range(n)]]\n\nfor _ in range(3):\n    input()\n\n    board.append([list(map(int, list(input()))) for i in range(n)])\n\nvar_ = ['1100', '1010', '1001', '0110', '0101', '0011']\n\nans = 4 * n ** 2\nfor pat in var_:\n    now = 0\n\n    for ind, ch in enumerate(list(map(int, list(pat)))):\n        b = board[ind]\n\n        for i in range(n):\n            for j in range(n):\n                if (i + j + ch) % 2 != b[i][j]:\n                    now += 1\n\n    ans = min(ans, now)\n\nprint(ans)\n", "n = int(input())\n\nA = []\nfor _ in range(n):\n    A.append(input())\nblank = input()\n\nB = []\nfor _ in range(n):\n    B.append(input())\nblank = input()\n\nC = []\nfor _ in range(n):\n    C.append(input())\nblank = input()\n\nD = []\nfor _ in range(n):\n    D.append(input())\n\nret = 999999\ncnt = 0\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if A[i][j] == \"0\":\n                cnt += 1\n        else:\n            if A[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if B[i][j] == \"0\":\n                cnt += 1\n        else:\n            if B[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if C[i][j] == \"1\":\n                cnt += 1\n        else:\n            if C[i][j] == \"0\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if D[i][j] == \"1\":\n                cnt += 1\n        else:\n            if D[i][j] == \"0\":\n                cnt += 1\nret = min(ret, cnt)\ncnt = 0\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if A[i][j] == \"0\":\n                cnt += 1\n        else:\n            if A[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if C[i][j] == \"0\":\n                cnt += 1\n        else:\n            if C[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if B[i][j] == \"1\":\n                cnt += 1\n        else:\n            if B[i][j] == \"0\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if D[i][j] == \"1\":\n                cnt += 1\n        else:\n            if D[i][j] == \"0\":\n                cnt += 1\nret = min(ret, cnt)\ncnt = 0\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if A[i][j] == \"0\":\n                cnt += 1\n        else:\n            if A[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if D[i][j] == \"0\":\n                cnt += 1\n        else:\n            if D[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if C[i][j] == \"1\":\n                cnt += 1\n        else:\n            if C[i][j] == \"0\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if B[i][j] == \"1\":\n                cnt += 1\n        else:\n            if B[i][j] == \"0\":\n                cnt += 1\nret = min(ret, cnt)\ncnt = 0\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if B[i][j] == \"0\":\n                cnt += 1\n        else:\n            if B[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if C[i][j] == \"0\":\n                cnt += 1\n        else:\n            if C[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if A[i][j] == \"1\":\n                cnt += 1\n        else:\n            if A[i][j] == \"0\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if D[i][j] == \"1\":\n                cnt += 1\n        else:\n            if D[i][j] == \"0\":\n                cnt += 1\nret = min(ret, cnt)\ncnt = 0\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if D[i][j] == \"0\":\n                cnt += 1\n        else:\n            if D[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if B[i][j] == \"0\":\n                cnt += 1\n        else:\n            if B[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if C[i][j] == \"1\":\n                cnt += 1\n        else:\n            if C[i][j] == \"0\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if A[i][j] == \"1\":\n                cnt += 1\n        else:\n            if A[i][j] == \"0\":\n                cnt += 1\nret = min(ret, cnt)\ncnt = 0\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if C[i][j] == \"0\":\n                cnt += 1\n        else:\n            if C[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if D[i][j] == \"0\":\n                cnt += 1\n        else:\n            if D[i][j] == \"1\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if A[i][j] == \"1\":\n                cnt += 1\n        else:\n            if A[i][j] == \"0\":\n                cnt += 1\nfor i in range(n):\n    for j in range(n):\n        if (i+j) % 2 == 0:\n            if B[i][j] == \"1\":\n                cnt += 1\n        else:\n            if B[i][j] == \"0\":\n                cnt += 1\nret = min(ret, cnt)\ncnt = 0\nprint(ret)", "n = int(input())\np = [[[] for _ in range(n)] for _ in range(4)]\n\nfor i in range(4):\n    for j in range(n):\n        r = list(map(int, list(input())))\n        p[i][j] = r\n    if i < 3: \n        input()\n\ndif = [0] * 4\n\nfor k in range(4):\n    o = 0\n    for i in range(n):\n        for j in range(n):\n            if p[k][i][j] == (n * i + j) % 2: \n                o += 1        \n\n    dif[k] = (o, n*n - o)\n\nres = 10 ** 19\nz = sum(dif[_][1] for _ in range(4))\nfor k1 in range(4):\n    for k2 in range(k1 + 1, 4):\n        res = min(res, dif[k1][0]+dif[k2][0]+z-dif[k1][1]-dif[k2][1])\n\nprint(res)", "n=int(input())\nL=[]\nfor k in range(4):\n    x=0\n    for i in range(n):\n        A=list(map(int,input()))\n        for j in range(n):\n            x+=A[j]^((i-j)%2)\n    L.append([x,n**2-x])\n    if k!=3:\n        input()\n\nout=4*n**2\nfor i in range(4):\n    for j in range(i+1,4):\n        p,q=list({0,1,2,3}-{i,j})\n        out=min(out,L[i][0]+L[j][0]+L[p][1]+L[q][1])\nprint(out)\n", "from itertools import permutations\n\ndef main():\n    n = int(input())\n    cb0 = [list(map(int, input())) for _ in range(n)]\n    _ = input()\n    cb1 = [list(map(int, input())) for _ in range(n)]\n    _ = input()\n    cb2 = [list(map(int, input())) for _ in range(n)]\n    _ = input()\n    cb3 = [list(map(int, input())) for _ in range(n)]\n    print(solve(n, [cb0, cb1, cb2, cb3]))\n\ndef solve(n, cbs):\n    return min(cost(n, p) for p in permutations(cbs))\n\ndef cost(n, p):\n    # print(p)\n    n2 = 2 * n\n    p2 = [p[:2], p[2:]]\n    cost1 = sum(1 for i in range(n2) for j in range(n2) if p2[i//n][j//n][i%n][j%n] == (i+j) % 2)\n    cost2 = sum(1 for i in range(n2) for j in range(n2) if p2[i//n][j//n][i%n][j%n] == (i+j+1) % 2)\n    return min(cost1, cost2)\n\nmain()\n", "n = int(input())\nN = [0, 0, 0, 0]\nfor i in range(4):\n    for j in range(n):\n        t = input()\n        for k in range(n):\n            if int(t[k]) == (j+k)%2:\n                N[i] += 1\n    if i != 3:\n        s = input()\nM = [0, 0, 0, 0]\nfor i in range(4):\n    M[i] = (n * n) - N[i]\nL = [0] * 6\nL[0] = N[0] + N[1] + M[2] + M[3]\nL[1] = N[0] + N[2] + M[1] + M[3]\nL[2] = N[0] + N[3] + M[1] + M[2]\nL[3] = N[1] + N[2] + M[0] + M[3]\nL[4] = N[1] + N[3] + M[0] + M[2]\nL[5] = N[2] + N[3] + M[0] + M[1]\nmn = L[0]\nfor i in range(1, 6):\n    if L[i] < mn:\n        mn = L[i]\nprint(mn)\n", "n = int(input())\ns1 = []\nfor i in range(n):\n    s1.append(list(map(int,input())))\ninput()\ns2 = []\nfor i in range(n):\n    s2.append(list(map(int,input())))\ninput()\ns3 = []\nfor i in range(n):\n    s3.append(list(map(int,input())))\ninput()\ns4 = []\nfor i in range(n):\n    s4.append(list(map(int,input())))\na = [s1,s2,s3,s4]\nb = [0,1,2,3]\nm = float('inf')\nfor i in range(4):\n    b = [0,1,2,3]\n    f = []\n    f.append(b[i])\n    b.pop(i)\n    \n    for j in range(3):\n        d= b[:]\n        f.append(d[j])\n        d.pop(j)\n        for k in range(2):\n            e= d[:]\n            #print(e)\n            f.append(e[k])\n            e.pop(k)\n            f.append(e[0])\n\n\n            se = []\n            for v in f:se.append(a[v])\n            fa = 0\n            if n%2==0:\n                for seg in se:\n                    for ii in range(n):\n                        for jj in range(n):\n                            if (ii+jj)%2 != seg[ii][jj]:\n                                fa += 1\n                m = min(m,fa,4*n*n-fa)\n                #print(fa)\n            else:\n                for seg in se[:2]:\n                    for ii in range(n):\n                        for jj in range(n):\n                            if (ii+jj)%2 != seg[ii][jj]:\n                                fa += 1\n                for seg in se[2:]:\n                    for ii in range(n):\n                        for jj in range(n):\n                            if (ii+jj)%2 == seg[ii][jj]:\n                                fa += 1\n             #   print(fa)\n                m = min(m,fa,4*n*n-fa)\n            #print(m,f)\n            f.pop()\n            f.pop()\n        f.pop()\n    f.pop()\nprint(m)\n", "def read_data():\n    n = int(input().strip())\n    pieces = []\n    for j in range(4):\n        a = []\n        for i in range(n):\n            a.append(input().strip())\n        if j<3:\n            input().strip()\n        pieces.append(a)\n    return n, pieces\n\ndef solve():\n    counts = []\n    for piece in pieces:\n        cur = 0\n        sum = 0\n        for i in range(n):\n            for j in range(n):\n                if ord(piece[i][j])-48 == cur:\n                    sum += 1\n                cur += 1\n                cur %= 2\n        counts.append(sum)\n    max= n*n\n    counts.sort()\n    sum = 0\n    for i in range(4):\n        if i < 2:\n            sum += counts[i]\n        else:\n            sum += max - counts[i]\n    return sum\n\nn, pieces = read_data()\nprint(solve())", "import itertools\nn = int(input())\nt1 = [[] for i in range(n)]\nt2 = [[] for i in range(n)]\nt3 = [[] for i in range(n)]\nt4 = [[] for i in range(n)]\n\nfor i in range(n):\n    a = list(input())\n    t1[i] = a\nw = input()\n\nfor i in range(n):\n    a = list(input())\n    t2[i] = a\nw = input()\n\nfor i in range(n):\n    a = list(input())\n    t3[i] = a\nw = input()\n\nfor i in range(n):\n    a = list(input())\n    t4[i] = a\n\nrec1, rec2 = [0, 0, 0, 0], [0, 0, 0, 0]\nfor i in range(n):\n    if i % 2 == 0:\n        p = 1\n    else:\n        p = 0\n    for j in range(n):\n        if int(t1[i][j]) != p:\n            rec1[0] += 1\n        else:\n            rec2[0] += 1\n        p ^= 1\n\nfor i in range(n):\n    if i % 2 == 0:\n        p = 1\n    else:\n        p = 0\n    for j in range(n):\n        if int(t2[i][j]) != p:\n            rec1[1] += 1\n        else:\n            rec2[1] += 1\n        p ^= 1\n\nfor i in range(n):\n    if i % 2 == 0:\n        p = 1\n    else:\n        p = 0\n    for j in range(n):\n        if int(t3[i][j]) != p:\n            rec1[2] += 1\n        else:\n            rec2[2] += 1\n        p ^= 1\n\nfor i in range(n):\n    if i % 2 == 0:\n        p = 1\n    else:\n        p = 0\n    for j in range(n):\n        if int(t4[i][j]) != p:\n            rec1[3] += 1\n        else:\n            rec2[3] += 1\n        p ^= 1\n\nR = [0, 1, 2, 3]\nnum = float(\"inf\")\nfor a, b, c, d in itertools.permutations(R, 4):\n    num = min(num, rec1[a] + rec1[b] + rec2[c] + rec2[d])\n\nprint(num)", "\n#in in[i][0], cost for if 1st sqaure is balck is stored.\nn=int(input())\na=[[[0 for j in range(n)] for i in range(n)] for k in range(4)]\nin1=[[0,0] for i in range(4)]\n\nfor k in range(4):\n    for i in range(n):\n        s=input()\n        #print('ae')\n        for j in range(n):\n            a[k][i][j]=int(s[j])\n            if(int(s[j])==(i+j)%2):\n                in1[k][1]+=1\n    in1[k][0]=n*n - in1[k][1]\n    #k,in1[k][0])\n    if(k!=3):\n        s=input()\nmin1=10000000000\n\nmin1=min(min1,in1[0][0]+in1[1][0]+ in1[2][1] + in1[3][1])\nmin1=min(min1,in1[0][0]+in1[1][1]+ in1[2][0] + in1[3][1])\nmin1=min(min1,in1[0][0]+in1[1][1]+ in1[2][1] + in1[3][0])\nmin1=min(min1,in1[0][1]+in1[1][1]+ in1[2][0] + in1[3][0])\nmin1=min(min1,in1[0][1]+in1[1][0]+ in1[2][1] + in1[3][0])\nmin1=min(min1,in1[0][1]+in1[1][0]+ in1[2][0] + in1[3][1])\nprint(min1)", "n = int(input())\nbrd = []\nfor i in range(4):\n    brd.append([list(map(int, list(input()))) for _ in range(n)])\n    if i < 3:\n        _ = input()\n\nans = 4 * n**2\nfor i in range(16):\n    if sum([(i >> j) & 1 for j in range(4)]) != 2:\n        continue\n    ans = min(ans, sum([abs((r + c + ((i >> j) & 1)) % 2 - brd[j][r][c]) \\\n                    for j in range(4) for r in range(n) for c in range(n)]))\n\nprint(ans)\n", "n=int(input().split()[0])\n#p=[[[None for i in range(n)]for i in range(n)]for i in range(4)]\n\ndef cnt(p):\n    # print('Hre:')\n    # print(len(p))\n    # print(len(p[0]))\n    # print(p)\n    ans=0\n    for i in range(n):\n        for j in range(n):\n            s=p[i]\n            #print(s[j])\n            if (i+j)%2==int(s[j]):\n                ans+=1\n    return ans\nans=[]\nfor i in range(4):\n    p=[]\n    while len(p)<n:\n        s=input()\n        if len(s)==0:\n            continue\n        p.append(s)\n    ans.append(cnt(p))\n    #s=input()\nans.sort()\nprint(ans[0]+ans[1]+n*n-ans[2]+n*n-ans[3])", "n = int(input())\nblock = []\n\ndef flip(ch):\n\treturn \"1\" if ch == \"0\" else \"0\"\n\nfor i in range(4):\n\tif i:\n\t\tinput()\n\tleft = \"1\"\n\tc0 = c1 = 0\t\n\tfor j in range(n):\n\t\ts = input()\n\t\texpect = left\n\t\tfor c in s:\n\t\t\tif c == expect:\n\t\t\t\tc0 += 1\n\t\t\telse:\n\t\t\t\tc1 += 1\n\t\t\texpect = flip(expect)\n\t\tleft = flip(left)\n\tblock.append( [c0, c1] )\t\t\n\t\nans = 4 * n * n\nimport itertools\nfor a, b, c, d in itertools.permutations(range(4), 4):\n\tv = block[a][0] + block[b][0] + block[c][1] + block[d][1]\n\tans = min(ans, v)\nprint(ans)", "#!/usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nblks = []\nfor i in range(4):\n\tblks.append([])\n\tfor j in range(n):\n\t\tblks[-1].append(sys.stdin.readline().strip())\n\tif i != 3:\n\t\tsys.stdin.readline()\n\n# start from B\ndef to_BW(blk):\n\tn = len(blk)\n\tBW = [0, 0]\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tBW[(i + j + int(blk[i][j])) % 2] += 1\n\treturn BW\n\nBWs = [to_BW(blk) for blk in blks]\n\nres = 4 * n**2\n\nfor i in range(4):\n\tfor j in range(i):\n\t\tkl = list(set(range(4)) - {i, j})\n\t\tres = min(res, BWs[i][0] + BWs[j][0] + BWs[kl[0]][1] + BWs[kl[1]][1])\n\nprint (res)\n", "n=int(input())\n\nl=[]\nfor i in range(4):\n\tl.append(0)\nfor q in range(4):\n\tfor i in range(1,n+1):\n\t\ts=input()\n\t\tfor j in range(1,n+1):\n\t\t\tif i%2==j%2 and s[j-1]=='1':\n\t\t\t\tl[q]+=1\n\t\t\tif i%2!=j%2 and s[j-1]=='0':\n\t\t\t\tl[q]+=1\n\tif q<3:\n\t\tz=input()\n\n#print(l)\n\nl.sort()\nn2=n**2\ncount=0\ncount+=l[0]+l[1]\ncount+=2*n2-l[2]-l[3]\n\nprint(count)\n", "n = int(input())\n\nanswer  = []\n\nfor k in range(4):\n    white_problems = 0\n    black_problems = 0\n    for j in range(n):\n        a = [int(i) for i in list(input())]\n        for x in range(n):\n            if ((a[x] == 1 and x % 2 == 0) or (a[x] == 0 and x % 2 == 1)) and j % 2 == 0:\n                white_problems += 1\n            if ((a[x] == 1 and x % 2 == 1) or (a[x] == 0 and x % 2 == 0)) and j % 2 == 0:\n                black_problems += 1\n            if ((a[x] == 1 and x % 2 == 0) or (a[x] == 0 and x % 2 == 1)) and j % 2 == 1:\n                black_problems += 1\n            if ((a[x] == 1 and x % 2 == 1) or (a[x] == 0 and x % 2 == 0)) and j % 2 == 1:\n                white_problems += 1\n\n    answer.append([white_problems, 0])\n    answer.append([black_problems, 1])\n    if k != 3:\n        trash = input()\n\n\n\nanswer.sort()\nblack = 0\nwhite = 0\nans = 0\nfor i in answer:\n    if black < 2 and i[1] == 1:\n        ans += i[0]\n        black += 1\n        continue\n    if white < 2 and i[1] == 0:\n        white += 1\n        ans += i[0]\n        continue\n    if white == 2 and black == 2:\n        break\nprint(ans)\n", "def generate_board(size, color):\n    board = []\n    for _ in range(size):\n        row = []\n        for _ in range(size):\n            row.append(color)\n            color = 0 if color == 1 else 1\n        board.append(row)\n    return board\n\ndef distance_from(have, need):\n    paint = 0\n    for have_row, need_row in zip(have, need):\n        for h, n in zip(have_row, need_row):\n            if h != n:\n                paint += 1\n    return paint\n\ndef solution(n, pieces):\n    white = generate_board(n, 0)\n    black = generate_board(n, 1)\n    grid = [\n        (distance_from(p, white), distance_from(p, black))\n        for p in pieces\n    ]\n    combinations = [\n        [0,0,1,1],\n        [0,1,0,1],\n        [1,0,0,1],\n        [0,1,1,0],\n        [1,0,1,0],\n        [1,1,0,0]\n    ]\n\n    return min(sum(\n            grid[i][c]\n            for i, c in enumerate(combo)\n        )\n        for combo in combinations\n    )\n\ndef __starting_point():\n    n = int(input())\n    pieces = []\n    for _ in range(4):\n        pieces.append(list(\n            list(map(int, input()))\n            for _ in range(n)\n        ))\n        if _ < 3:\n            input()\n    print(solution(n, pieces))\n\n__starting_point()", "N = int(input())\na = [0,1] * N\na2 = [1,0] * N\npt1 = []\npt2 = []\n\ncnt = 0\nfor j in range(N):\n\tarr = input()\t\n\tfor k in range(N):\n\t\tif j % 2 == 1 and int(arr[k]) == a2[k]:\n\t\t\tcnt += 1\n\n\t\telif j % 2 == 0 and int(arr[k]) == a[k]:\n\t\t\tcnt += 1\n\n\t\npt1.append(cnt)\npt2.append(N*N-cnt)\n\t\n\n\n\ncnt = 0\ns = input()\nfor j in range(N):\n\tarr = input()\n\tfor k in range(N):\n\t\tif j % 2 == 1 and int(arr[k]) == a2[k]:\n\t\t\tcnt += 1\n\t\t\t\n\t\telif j % 2 == 0 and int(arr[k]) == a[k]:\n\t\t\tcnt += 1\n\npt1.append(cnt)\npt2.append(N*N-cnt)\ns = input()\ncnt = 0\nfor j in range(N):\n\tarr = input()\n\tfor k in range(N):\n\t\tif j % 2 == 1 and int(arr[k]) == a2[k]:\n\t\t\tcnt += 1\n\t\t\t\n\t\telif j % 2 == 0 and int(arr[k]) == a[k]:\n\t\t\tcnt += 1\n\npt1.append(cnt)\npt2.append(N*N-cnt)\n\ns = input()\n\ncnt = 0\nfor j in range(N):\n\tarr = input()\n\tfor k in range(N):\n\t\tif j % 2 == 1 and int(arr[k]) == a2[k]:\n\t\t\tcnt += 1\n\t\t\t\n\t\telif j % 2 == 0 and int(arr[k]) == a[k]:\n\t\t\tcnt += 1\n\npt1.append(cnt)\npt2.append(N*N-cnt)\n\npt1.sort()\npt2.sort()\nprint(pt1[0]+pt1[1]+pt2[0]+pt2[1])\n\n", "from itertools import permutations\n\nn = int(input())\n\nboards = []\nfor i in range(4):\n    board = [input() for j in range(n)]\n    boards.append(board)\n    if i != 3:\n        input()\n\nperms = list(permutations(list(range(4))))\n\n\ndef cost(board):\n\n    base1 = [1,0]*(len(board)//2)\n    base2 = [0,1]*(len(board)//2)\n\n    board1 = []\n    board2 = []\n    for i in range(len(board)//2):\n        board1.append(base1)\n        board1.append(base2)\n\n        board2.append(base2)\n        board2.append(base1)\n\n    board = [list(map(int, list(a))) for a in board]\n\n    curr_min_cost1 = 0\n    curr_min_cost2 = 0\n    for i in range(len(board)):\n        for j in range(len(board)):\n            curr_min_cost1 += board[i][j] ^ board1[i][j]\n            curr_min_cost2 += board[i][j] ^ board2[i][j]\n\n    return min(curr_min_cost1, curr_min_cost2)\n\n\nmin_cost = float('inf')\nfor p in perms:\n    b1 = boards[p[0]]+boards[p[1]]\n    b2 = boards[p[2]]+boards[p[3]]\n    b = [a+b for a,b in zip(b1, b2)]\n    min_cost = min(min_cost, cost(b))\n\nprint(min_cost)\n", "n = int(input())\nrow1 = [0, 1] * (n // 2) + [0]\nrow2 = [1, 0] * (n // 2) + [1]\n\nd = []\nfor i in range(4):\n    d.append([0, 0])\n    for j in range(n):\n        row = [int(x) for x in input()]\n        for k in range(n):\n            # print(i, j, k)\n            if j % 2 == 0:\n                d[i][0] += abs(row1[k] - row[k])\n                d[i][1] += abs(row2[k] - row[k])\n            else:\n                d[i][1] += abs(row1[k] - row[k])\n                d[i][0] += abs(row2[k] - row[k])\n    if i < 3:\n        input()\n\n# min_ = min([(d[0][0] + d[1][0] + d[2])])\nm = [0] * 6\nm[0] = d[0][0] + d[1][0] + d[2][1] + d[3][1]\nm[1] = d[0][0] + d[1][1] + d[2][0] + d[3][1]\nm[2] = d[0][0] + d[1][1] + d[2][1] + d[3][0]\nm[3] = d[0][1] + d[1][0] + d[2][0] + d[3][1]\nm[4] = d[0][1] + d[1][0] + d[2][1] + d[3][0]\nm[5] = d[0][1] + d[1][1] + d[2][0] + d[3][0]\n\n\nprint(min(m))\n", "\"\"\"\n1\n0\n\n0\n\n1\n\n0\n\"\"\"\n\nimport sys\n\nn = int(input())\n\n\ndef read_board(n, numb):\n    board = []\n    for i in range(n):\n        line = input()\n        board.append([int(c) for c in line])\n    # board = [[int(c) for c in input().strip()] for i in range(n)]\n    if numb != 3:\n        input()\n    return board\n\nboards = [read_board(n, i) for i in range(4)]\n# a = [[1, 0, 1], [0, 0, 0], [0, 0, 1]]\n# print(boards)\ndef _calc_line(l, start=1):\n    cur = start\n    errors = 0\n    for cell in l:\n        errors += cell != cur\n        cur = not cur\n    return errors\n\ndef _calc_board(b, start=1):\n    errors = 0\n    cur = start\n    for line in b:\n        errors += _calc_line(line, cur)\n        cur = not cur\n    return errors\n\nchecks = [\n    (0, 0, 1, 1),\n    (0, 1, 0, 1),\n    (1, 0, 0, 1),\n    (0, 1, 1, 0),\n    (1, 0, 1, 0),\n    (1, 1, 0, 0)\n]\n\ndef check_all(boards):\n    for check in checks:\n        errs = 0\n        for board, start in zip(boards, check):\n            errs += _calc_board(board, start)\n        yield errs\n\nprint(min(check_all(boards)))\n\n", "\ndef bubble_sort(a_list):\n    changed = True\n    while changed:\n        changed = False\n        for i in range(len(a_list)-1):\n            if a_list[i] > a_list[i+1]:\n                 changed = True\n                 a_list[i],a_list[i+1] = a_list[i+1],a_list[i]\n    return a_list\n\nn = int(input())\n\nstr1 = ''\nfor i in range(n):\n\n\tstr1 = str1+input()\nj = input()\nstr2 = ''\nfor i in range(n):\n\n\tstr2 = str2+input()\nj = input()\nstr3 = ''\nfor i in range(n):\n\n\tstr3 = str3+input()\nstr4 = ''\nj = input()\nfor i in range(n):\n\n\tstr4 = str4+input()\n\nstr1comp = \"01\"*(n**2)\n#print()\n#print(str2)\n#print(str1comp)\n\na = 0\nb = 0\nc = 0\nd = 0\n\n\nfor i in range(n**2):\n\tif str1[i] == str1comp[i]:\n\t\ta +=1\nfor i in range(n**2):\n\tif str2[i] == str1comp[i]:\n\t\tb +=1\nfor i in range(n**2):\n\tif str3[i] == str1comp[i]:\n\t\tc +=1\nfor i in range(n**2):\n\tif str4[i] == str1comp[i]:\n\t\td +=1\n\nlst2 = []\nlst2.append(a)\nlst2.append(b)\nlst2.append(c)\nlst2.append(d)\n\n\n\nbubble_sort(lst2)\n\n#print(lst2)\n\nsum3 = 0\n\nfor i in range(2):\n\tsum3+= lst2[i]\nfor i in range(2,4):\n\tsum3+= (n**2 - lst2[i])\n\nprint(sum3)\n\n\n\n\n\n\n\n\n\n\n\n"]