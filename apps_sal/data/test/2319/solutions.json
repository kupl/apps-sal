["def num(c):\n    return ord(c) - 97\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s1 = input().strip()\n    s2 = input().strip()\n\n    char1 = [0] * 26\n    char2 = [0] * 26\n    for c in s1:\n        char1[num(c)] += 1\n    for c in s2:\n        char2[num(c)] += 1\n    if char1 != char2:\n        print(-1)\n        continue\n\n    dp = [[(False, 0, 0) for j in range(n+1)] for i in range(n + 1)]\n    dp[0][0] = [True, 0,[0]*26]\n\n    def upd(a, b, val, sett):\n        if not dp[a][b][0] or val > dp[a][b][1]:\n            dp[a][b] = (True, val, sett)\n    \n    for i in range(n):\n        for j in range(n):\n            valid, val, tab = dp[i][j]\n            if not valid:\n                continue\n            \n            top = s1[i]\n            bot = s2[j]\n\n            if top == bot:\n                #upd(i+1, j+1, val + 1, tab)\n                if not dp[i + 1][j + 1][0] or val + 1 > dp[i + 1][j + 1][1]:\n                    dp[i + 1][j + 1] = [True, val + 1, tab]\n\n            if tab[num(top)] > 0:\n                sett = tab[:]\n                sett[num(top)] -= 1\n                \n                #upd(i+1, j, val, sett)\n                if not dp[i + 1][j][0] or val > dp[i + 1][j][1]:\n                    dp[i + 1][j] = [True, val, sett]\n\n            sett = tab[:]\n            sett[num(bot)] += 1\n            #upd(i, j + 1, val, sett)\n            if not dp[i][j + 1][0] or val > dp[i][j + 1][1]:\n                dp[i][j + 1] = [True, val, sett]\n\n            del dp[i][j][2]\n\n    poss = [dp[i][n][1] for i in range(n + 1)]\n        \n\n    print(n - max(poss))\n            \n    \n", "def num(c):\n    return ord(c) - 97\n\nimport sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s1 = input().strip()\n    s2 = input().strip()\n\n    char1 = [0] * 26\n    char2 = [0] * 26\n    for c in s1:\n        char1[num(c)] += 1\n    for c in s2:\n        char2[num(c)] += 1\n    if char1 != char2:\n        print(-1)\n        continue\n\n    dp = [[(False, 0, 0) for j in range(n+1)] for i in range(n + 1)]\n    dp[0][0] = [True, 0,[0]*26]\n\n    def upd(a, b, val, sett):\n        if not dp[a][b][0] or val > dp[a][b][1]:\n            dp[a][b] = (True, val, sett)\n    \n    for i in range(n):\n        for j in range(n):\n            valid, val, tab = dp[i][j]\n            if not valid:\n                continue\n            \n            top = s1[i]\n            bot = s2[j]\n\n            if top == bot:\n                #upd(i+1, j+1, val + 1, tab)\n                if not dp[i + 1][j + 1][0] or val + 1 > dp[i + 1][j + 1][1]:\n                    dp[i + 1][j + 1] = [True, val + 1, tab]\n\n            if tab[num(top)] > 0:\n                sett = tab[:]\n                sett[num(top)] -= 1\n                \n                #upd(i+1, j, val, sett)\n                if not dp[i + 1][j][0] or val > dp[i + 1][j][1]:\n                    dp[i + 1][j] = [True, val, sett]\n\n            sett = tab[:]\n            sett[num(bot)] += 1\n            #upd(i, j + 1, val, sett)\n            if not dp[i][j + 1][0] or val > dp[i][j + 1][1]:\n                dp[i][j + 1] = [True, val, sett]\n\n            del dp[i][j][2]\n\n    poss = [dp[i][n][1] for i in range(n + 1)]\n        \n\n    print(n - max(poss))\n            \n", "def num(c):return ord(c) - 97\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input());s1 = input().strip();s2 = input().strip();char1 = [0] * 26;char2 = [0] * 26\n    for c in s1:char1[num(c)] += 1\n    for c in s2:char2[num(c)] += 1\n    if char1 != char2:print(-1);continue\n    dp = [[(False, 0, 0) for j in range(n+1)] for i in range(n + 1)];dp[0][0] = [True, 0,[0]*26]\n    def upd(a, b, val, sett):\n        if not dp[a][b][0] or val > dp[a][b][1]:dp[a][b] = (True, val, sett)    \n    for i in range(n):\n        for j in range(n):\n            valid, val, tab = dp[i][j]\n            if not valid:continue            \n            top = s1[i];bot = s2[j]\n            if top == bot:\n                if not dp[i + 1][j + 1][0] or val + 1 > dp[i + 1][j + 1][1]:dp[i + 1][j + 1] = [True, val + 1, tab]\n            if tab[num(top)] > 0:\n                sett = tab[:];sett[num(top)] -= 1\n                if not dp[i + 1][j][0] or val > dp[i + 1][j][1]:dp[i + 1][j] = [True, val, sett]\n            sett = tab[:];sett[num(bot)] += 1\n            if not dp[i][j + 1][0] or val > dp[i][j + 1][1]:dp[i][j + 1] = [True, val, sett]\n            del dp[i][j][2]\n    poss = [dp[i][n][1] for i in range(n + 1)]        \n    print(n - max(poss))", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    cnt = [0 for i in range(26)]\n    ps = [[0 for j in range(n + 1)] for i in range(26)]\n    pt = [[0 for j in range(n + 1)] for i in range(26)]\n    s = input()\n    t = input()\n    for i in range(n):\n        ch = ord(s[i]) - ord('a')\n        cnt[ch] += 1\n        for j in range(26):\n            ps[j][i + 1] = ps[j][i] + (1 if ch == j else 0)\n    for i in range(n):\n        ch = ord(t[i]) - ord('a')\n        cnt[ch] -= 1\n        for j in range(26):\n            pt[j][i + 1] = pt[j][i] + (1 if ch == j else 0)\n    ok = True\n    for i in cnt:\n        if i != 0:\n            ok = False\n            break\n    if not ok:\n        print(-1)\n    else:\n        r = n\n        while r >= 1 and s[r - 1] == t[r - 1]:\n            r -= 1\n        inf = int(1e8)\n        dp = [[0 if i == 0 else inf for j in range(\n            r + 1)] for i in range(r + 1)]\n        for i in range(1, r + 1):\n            for j in range(i, r + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])\n                ch = ord(t[j - 1]) - ord('a')\n                if ps[ch][r] - ps[ch][i] > pt[ch][r] - pt[ch][j]:\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1])\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n        print(dp[r][r])\n", "import sys\n\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef main():\n    inf=10**9\n    for _ in range(II()):\n        n=II()\n        s = SI()\n        t = SI()\n\n        cnts=[[0]*26 for _ in range(n+1)]\n        cntt=[[0]*26 for _ in range(n+1)]\n        for i in range(n-1,-1,-1):\n            cnts[i][ord(s[i])-97]+=1\n            cntt[i][ord(t[i])-97]+=1\n            for j in range(26):\n                cnts[i][j]+=cnts[i+1][j]\n                cntt[i][j]+=cntt[i+1][j]\n\n        ng=False\n        for j in range(26):\n            if cnts[0][j]!=cntt[0][j]:\n                ng=True\n                break\n        if ng:\n            print(-1)\n            continue\n\n        dp=[[inf]*(n+1) for _ in range(n+1)]\n        for i in range(n+1):dp[i][0]=0\n        for i in range(n+1):\n            for j in range(i,n+1):\n                if i==n and j==n:break\n                pre=dp[i][j]\n                if pre==inf:continue\n                if i<j and i+1<=n:dp[i+1][j]=min(dp[i+1][j],pre+1)\n                if i+1<=n and j+1<=n and s[i]==t[j]:dp[i+1][j+1]=min(dp[i+1][j+1],pre)\n                if j+1<=n and cnts[i+1][ord(t[j])-97]>cntt[j+1][ord(t[j])-97]:\n                    dp[i][j + 1] = min(dp[i][j + 1], pre)\n        #p2D(dp)\n        print(dp[n][n])\n\nmain()\n"]