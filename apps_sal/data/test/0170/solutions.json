["n = int(input())\nk1 = list(map(int, input().split()[1:]))\nk2 = list(map(int, input().split()[1:]))\n\ni = 0\nwhile True:\n    if len(k1) == 0 or len(k2) == 0:\n        break\n    if i > 10000:\n        break\n    if k1[0] > k2[0]:\n        k1 = k1[1:] + k2[0:1] + k1[0:1]\n        k2 = k2[1:]\n    else:\n        k2 = k2[1:] + k1[0:1] + k2[0:1]\n        k1 = k1[1:]\n    i += 1\n\nif i > 10000:\n    print(-1)\nelse:\n    winner = 1\n    if len(k1) == 0:\n        winner = 2\n    print(i, winner)\n", "__author__ = 'Andrey'\nimport collections\nimport time\nstart = time.time()\nn = int(input())\ncards_1 = collections.deque(list(map(int, input().split()))[1:])\ncards_2 = collections.deque(list(map(int, input().split()))[1:])\nc = 0\nbad = False\nwhile cards_1 and cards_2:\n    end = time.time()\n    if end - start > 1.85:\n        bad = True\n        break\n    n_1 = cards_1.popleft()\n    n_2 = cards_2.popleft()\n    c += 1\n    if n_1 > n_2:\n        cards_1.append(n_2)\n        cards_1.append(n_1)\n    else:\n        cards_2.append(n_1)\n        cards_2.append(n_2)\nelse:\n    print(c, 1 if cards_1 else 2)\nif bad:\n    print(-1)\n", "n = int(input())\na = list(map(int, input().split()))[1:]\nb = list(map(int, input().split()))[1:]\n\nused = set()\ncnt = 0\nwhile len(a) != 0 and len(b) != 0:\n    if (tuple(a), tuple(b)) not in used:\n        used.add((tuple(a), tuple(b)))\n    else:\n        print(-1)\n        return\n    x, y = a.pop(0), b.pop(0)\n    if x > y:\n        a.append(y)\n        a.append(x)\n    else:\n        b.append(x)\n        b.append(y)\n    cnt += 1\nprint(cnt, '1' if len(b) == 0 else '2')\n", "N = input()\ns1 = input().split(' ')[1:]\ns2 = input().split(' ')[1:]\n\ns1 = tuple(map(int, s1))\ns2 = tuple(map(int, s2))\n\nalready_seen = set()\nnum_fights = 0\n\nwhile len(s1) > 0 and len(s2) > 0:\n\n    num_fights += 1\n\n    if (s1, s2) in already_seen:\n        break\n    else:\n        already_seen.add((s1, s2))\n\n    if s1[0] < s2[0]:\n        s2 = s2[1:] + (s1[0], s2[0])\n        s1 = s1[1:]\n    else:\n        s1 = s1[1:] + (s2[0], s1[0])\n        s2 = s2[1:]\n\nif len(s1) == 0:\n    print(str(num_fights) + ' 2')\nelif len(s2) == 0:\n    print(str(num_fights) + ' 1')\nelse:\n    print(-1)", "n=int(input())\ns1=list(map(int, input().split()))\ns1.pop(0)\ns2=list(map(int, input().split()))\ns2.pop(0)\n#print(s1, s2, n)\nc=0\nwhile s1 and s2 and c<10**5:\n    if s1[0]>s2[0]:\n        s1.append(s2[0])\n        s1.append(s1[0])\n    else:\n        s2.append(s1[0])\n        s2.append(s2[0])\n    s1.pop(0)\n    s2.pop(0)\n    c+=1\nif not(s1):\n    print(c, 2)\nelif not(s2):\n    print(c, 1)\nelse:\n    print(-1)", "n = int(input())\nsol_1 = list(map(int, input().split()))\nl1 = sol_1[0]\ns1 = l1\nsol_1 = sol_1[1:]\nsol_2 = list(map(int, input().split()))\nl2 = sol_2[0]\ns2 = l2\nsol_2 = sol_2[1:]\ni = 0\nj = 0\nsol_11 = []\nsol_22 = []\np = 10000\nc = 0\nwhile s1 != 0 and s2 != 0 and p > 0:\n    if i == len(sol_1):\n        i = 0\n        sol_1 = sol_11[:]\n        sol_11 = []\n    if j == len(sol_2):\n        j = 0\n        sol_2 = sol_22[:]\n        sol_22 = []    \n    if sol_1[i] > sol_2[j]:\n        sol_11.append(sol_2[j])\n        sol_11.append(sol_1[i])\n        s1 += 1\n        s2 -= 1\n    else:\n        sol_22.append(sol_1[i])\n        sol_22.append(sol_2[j])    \n        s2 += 1\n        s1 -= 1\n    i += 1\n    j += 1\n    c += 1\n    p -= 1\nif p == 0:\n    print(-1)\nelse:\n    if s1 == 0:\n        print(c, '2')\n    else:\n        print(c, '1')", "import sys\nimport collections\n\n\ndef get_code(first_cards, second_cards):\n    c1 = 0\n    for i, card in enumerate(first_cards):\n        c1 += (card - 1) * 10**i\n    c2 = 0\n    for i, card in enumerate(second_cards):\n        c2 += (card - 1) * 10**i\n    return (c1, c2)\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    first_cards = collections.deque(reversed(list(map(int, sys.stdin.readline().split()))[1:]))\n    second_cards = collections.deque(reversed(list(map(int, sys.stdin.readline().split()))[1:]))\n\n\n    existing_states = set()\n    number_of_fights = 0\n\n    while first_cards and second_cards:\n        # code = get_code(first_cards, second_cards)\n        code = (tuple(first_cards), tuple(second_cards))\n        if code in existing_states:\n            print (-1)\n            return\n        existing_states.add(code)\n\n        if first_cards[-1] > second_cards[-1]:\n            first_cards.appendleft(second_cards.pop())\n            first_cards.appendleft(first_cards.pop())\n        else:\n            second_cards.appendleft(first_cards.pop())\n            second_cards.appendleft(second_cards.pop())\n        number_of_fights += 1\n\n    print ('%d %d' % (number_of_fights, 1 if not second_cards else 2))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "\nn = int(input())\nl1 = [int(i) for i in input().split()]\nk1 = l1.pop(0)\n#print (k1, l1)\nl1.reverse()\nl2 = [int(i) for i in input().split()]\nk2 = l2.pop(0)\nl2.reverse()\n#print(k1, k2, l1, l2)\ni = 0\ndup = set()\nwhile len(l1) > 0 and len(l2) > 0:\n    c = tuple(l1 + [0.5] + l2)\n    #print (c)\n    if c in dup:\n        break\n    dup.add(c) \n    a = l1.pop()\n    b = l2.pop()\n    if a>b:\n        l1.insert(0,b)\n        l1.insert(0,a)\n    else:\n        l2.insert(0,a)\n        l2.insert(0,b)\n    #print(l1,l2)\n    i+=1\nif len(l1) == 0:\n    print (i, 2)\nelif len(l2) == 0:\n    print (i,1)\nelse:\n    print(-1)", "import sys\n\nn = int(input())\nd1 = list(map(int, input().split(\" \")))\nd2 = list(map(int, input().split(\" \")))\nk1 = d1[0]\nk2 = d2[0]\nd1.remove(d1[0])\nd2.remove(d2[0])\n\nmoves = 0\n\nwhile True:\n    if moves > 500000:\n        print(-1)\n        return\n    a = d1[0]\n    d1.remove(d1[0])\n    b = d2[0]\n    d2.remove(d2[0])\n    if a > b:\n        moves += 1\n        d1.append(b)\n        d1.append(a)\n        if len(d2) == 0:\n            print(str(moves) + \" 1\")\n            return\n    if b > a:\n        moves +=1\n        d2.append(a)\n        d2.append(b)\n        if len(d1) == 0:\n            print(str(moves) + \" 2\")\n            return", "n = int(input())\ns1 = [int(x) for x in input().split()]\ns1.pop(0)\ns2 = [int(x) for x in input().split()]\ns2.pop(0)\nc = 0\nchk = [[False for x in range(11)] for x in range(11)]\nwhile(True):\n\tif(c > 1000):\n\t\tprint(-1)\n\t\treturn\n\t\n\tif(not s1 or not s2):\n\t\tprint(c,1 if not s2 else 2)\n\t\treturn\n\telse:\n\t\tchk[s1[0]][s2[0]] = True\n\t\tif(s1[0] > s2[0]):\n\t\t\ts1.append(s2[0])\n\t\t\ts1.append(s1[0])\n\t\t\ts1.pop(0)\n\t\t\ts2.pop(0)\n\t\telse:\n\t\t\ts2.append(s1[0])\n\t\t\ts2.append(s2[0])\n\t\t\ts1.pop(0)\n\t\t\ts2.pop(0)\n\t\tc += 1\n", "n = int(input())\ns1 = [int(i) for i in input().split()]\ns1.pop(0)\ns2 = [int(i) for i in input().split()]\ns2.pop(0)\nt = 0\nwhile s1 and s2:\n    t += 1\n    a = s1.pop(0)\n    b = s2.pop(0)\n    if a > b:\n        s1.append(b)\n        s1.append(a)\n    else:\n        s2.append(a)\n        s2.append(b)\n    if t>1000:\n        break\nif t>1000:\n    print(-1)\nelse:\n    if s1:\n        print(t, 1)\n    else:\n        print(t, 2)\n", "def comp(a,b):\n\tif(len(a) != len(b)):\n\t\treturn False\n\tn = len(a)\n\tfor i in range(n):\n\t\tif(a[i] != b[i]):\n\t\t\treturn False\n\treturn True\n\nn = int(input())\n\na = []\nb = []\n\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nk1 = a[0]\nk2 = b[0]\n\ndel a[0]\ndel b[0]\n\np = []\nq = []\n\nfor i in a:\n\tp.append(i)\n\nfor i in b:\n\tq.append(i)\n\n#print(a)\n#print(b)\n\ntotal = 0\nflag = True\n\nwhile(True):\n\tx = a[0]\n\ty = b[0]\n\tif(x > y):\n\t\ta.pop(0)\n\t\tb.pop(0)\n\t\ta.append(y)\n\t\ta.append(x)\n\telse:\n\t\ta.pop(0)\n\t\tb.pop(0)\n\t\tb.append(x)\n\t\tb.append(y)\n\t#print(a,b)\n\ttotal += 1\n\tif((p == a and q == b) or total >= 100000):\n\t\tflag = False\n\t\tbreak\n\tif(len(a) == 0 or len(b) == 0):\n\t\tbreak\n\nif(flag == False):\n\tprint(-1)\nelse:\n\tif(a == []):\n\t\tprint(total,2)\n\telse:\n\t\tprint(total,1)", "# coding:utf-8\n\nn = int(input())\nf_deck = list(map(int, input().split(' ')))[1:]\ns_deck = list(map(int, input().split(' ')))[1:]\n\n# print('- - - - -')\nidx = 0\nrec = []\nwhile 1:\n    # print('-')\n    # print(f_deck)\n    # print(s_deck)\n    rec.append(''.join(list(map(str,f_deck))) +'_'+ ''.join(list(map(str,s_deck))))\n    if f_deck[0] > s_deck[0]:\n        f_deck.append(s_deck.pop(0))\n        f_deck.append(f_deck.pop(0))\n    else:\n        s_deck.append(f_deck.pop(0))\n        s_deck.append(s_deck.pop(0))\n    idx += 1\n    if ''.join(list(map(str,f_deck))) +'_'+ ''.join(list(map(str,s_deck))) in rec:\n        break\n    if len(f_deck) == 0 or len(s_deck) == 0:\n        break\n    # if idx>5000000:\n    #     break\nif len(f_deck) == 0:\n    print(\"{} {}\".format(idx,2))\nelif len(s_deck) == 0:\n    print(\"{} {}\".format(idx,1))\nelse:\n    print(-1)\n\n'''\nInput\n4\n2 1 3\n2 4 2\nOutput\n6 2\n\nInput\n3\n1 2\n2 1 3\nOutput\n-1\n'''", "from collections import deque\nfrom copy import deepcopy\nn = int(input())\nA = deque(list(map(int, input().split()))[1:])\nB = deque(list(map(int, input().split()))[1:])\nstate = []\nstate.append((deepcopy(A), deepcopy(B)))\ncnt = 0\nwhile len(A) > 0 and len(B) > 0:\n    if A[0] > B[0]:\n        A.append(B.popleft())\n        A.append(A.popleft())\n    else:\n        B.append(A.popleft())\n        B.append(B.popleft())\n    if (A, B) in state:\n        print(-1)\n        break\n    state.append((deepcopy(A), deepcopy(B)))\n    cnt += 1\nelse:\n    print(cnt, 1 if len(B) == 0 else 2)\n", "def fight(k1, k2):\n    l = k1.pop(0)\n    r = k2.pop(0)\n    if l < r:\n        k2.extend([l, r])\n    else:\n        k1.extend([r, l])\n\n\nn = int(input())\nk1 = list(map(int, input().split()))\nk1.pop(0)\nk2 = list(map(int, input().split()))\nk2.pop(0)\n\ncombs = set()\nfights = 0\nwhile k1 and k2:\n    topcomb = (''.join(map(str, k1)), ''.join(map(str, k2)))\n    if topcomb in combs:\n#        print(fights)\n        fights = -1\n        break\n    combs.add(topcomb)\n    fight(k1, k2)\n    fights += 1\n\n\nprint(fights, end=' ')\nif fights > -1:\n    print(1 if k1 else 2)", "n=int(input())\na=list(map(int,input().split()))\nk1=a[0]\ns1=a[1:]\na=list(map(int,input().split()))\nk2=a[0]\ns2=a[1:]\nflag=0\nfights=0\ncount=0\nwhile(len(s1)!=0 and len(s2)!=0):\n    count+=1\n    if count>1000000:\n        flag=1\n        break\n    t=s1.pop(0)\n    p=s2.pop(0)\n    if t>p:\n        s1.append(p)\n        s1.append(t)\n    else:\n        s2.append(t)\n        s2.append(p)\n    fights+=1\nif flag==1:\n    print(\"-1\")\nelse:\n    if len(s1)==0:\n        won=\"2\"\n    else :\n        won=\"1\"\n    print(fights,won,sep=\" \")\n\n\n", "a = int(input())\n\nx = list(map(int, input().split(' ')))[1:]\ny = list(map(int, input().split(' ')))[1:]\n\nnum = 0\nstates = []\nwhile len(x)>0 and len(y)>0:\n\ttx = x[0]\n\tty = y[0]\n\tif tx > ty:\n\t\tx = x[1:] + [ty] + [tx]\n\t\ty = y[1:]\n\telse:\n\t\ty = y[1:] + [tx] + [ty]\n\t\tx = x[1:]\n\tnum += 1\n\t\n\tstates.append([x, y])\n\t\n\tif num > 10**5:\n\t\tif [x, y] in states:\n\t\t\tprint(-1)\n\t\t\tquit()\n\t\nif x == []:\n\tprint(num, 2)\nelse:\n\tprint(num, 1)\n", "n = int(input())\na = list((map(int,input().split())))\nb = list((map(int,input().split())))\nk,l = a[0],b[0]\na.pop(0)\nb.pop(0)\ncnt = 0\nwhile len(a)>0 and len(b)>0 and cnt<1000:\n    if a[0]>b[0]:\n        a.append(b[0])\n        a.append(a[0])\n\n    if b[0]>a[0]:\n        b.append(a[0])\n        b.append(b[0])\n\n    cnt+=1\n    a.pop(0)\n    b.pop(0)\nif len(a)==0: #or i==len(b)-1:\n        print(cnt,2)\n        quit()\nif len(b)==0:\n        print(cnt,1)\n        quit()\nif len(a)>0 and len(b)>0:\n    print(-1)\nelse:\n    print(cnt)", "n = int(input())\nlist1 = list(map(int, input().split()))\nlist2 = list(map(int, input().split()))\nk1 = list1[0]\ndel list1[0]\nk2 = list2[0]\ndel list2[0]\ni = 0\ncount = 0\nwhile(len(list1) != 0 and len(list2) != 0):\n    if(list1[i] < list2[i]):\n        list2.append(list1[i])\n        list2.append(list2[i])\n        del list1[i]\n        del list2[i]\n        count += 1\n    elif(list2[i] < list1[i]):\n        list1.append(list2[i])\n        list1.append(list1[i])\n        del list1[i]\n        del list2[i]\n        count += 1\n    else:\n        del list1[i]\n        del list2[i]\n    if count == n**2+10:\n        print(\"-1\")\n        break\nif len(list1) == 0:\n    print(\"{} 2\".format(count))\nif len(list2) == 0:\n    print(\"{} 1\".format(count))", "n = int(input())\n\ns1 = [ int(card) for card in input().split() ]\ns2 = [ int(card) for card in input().split() ]\n\ns1 = s1[1:]\ns2 = s2[1:]\n\nmagic = 1000000\n\nfights = 0\nflag = False\nwhile True:\n\tcard1, card2 = s1.pop(0), s2.pop(0)\n\n\tfights += 1\n\tif fights > magic:\n\t\tflag = True\n\t\tbreak\n\n\tif card1 > card2:\n\t\ts1.append(card2)\n\t\ts1.append(card1)\n\telse:\n\t\ts2.append(card1)\n\t\ts2.append(card2)\n\n\tif s1 == []:\n\t\twinner = 2\n\t\tbreak\n\tif s2 == []:\n\t\twinner = 1\n\t\tbreak\n\nif flag:\n\tprint(-1)\nelse:\n\tprint(fights, winner)", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\nc1 = list(map(int,input().split()))[1:]\nc2 = list(map(int,input().split()))[1:]\n\ndef check(c1,c2):\n    t1,t2 = c1.pop(0),c2.pop(0)\n    if t1 < t2:\n        c2 += [t1,t2]\n    else:\n        c1 += [t2,t1]\n\ncount = 0\nwhile c1 != [] and c2 != []:\n    prev_c1,prev_c2 = c1[:],c2[:]\n    check(c1,c2)\n    if count > 10000:\n        break\n    count += 1\nelse:\n    print(count, 2 if c1 == [] else 1)\n    quit()\nprint(-1)\n", "x=int(input())\nA=list(map(int,input().split()))\nA=A[1:]\n#print(A)\nD=A\n#print(D)\nB=list(map(int,input().split()))\nB=B[1:]\nE=B\nC=[]\n#print(A)\n#print(B)\ncount=0\nnum=1000\nwhile(num>0):\n\tif count==999:\n\t\tstate=10000\n\t\tbreak\n\t#print(D)\n\tstate=-100\n\tif A==C:\n\t\tstate=10\n\t\tbreak\n\tif B==C:\n\t\tstate=100\n\t\tbreak\n\tif A[0]>B[0]:\n\t\tA.append(B[0])\n\t\tA.append(A[0])\n\t\tA=A[1:]\n\t\tB=B[1:]\n\t\tcount=count+1\n\t\t#print(A,B)\n\t\tstate=0\n\t\tnum=num-1\n\tif state!=0:\t\n\t\tif B[0]>A[0]:\n\t\t\tB.append(A[0])\n\t\t\tB.append(B[0])\n\t\t\tB=B[1:]\n\t\t\tA=A[1:]\n\t\t\tcount=count+1\n\t\t\t#print(A,B)\n\t\t\tnum=num-1\n\t#if A==D:\n\t#\tif B==E:\n\t#\t\tstate=1000\n\t#\t\tbreak\n\t#if A==E:\n\t#\tif B==D:\n\t#\t\tstate=1000\n\t#\t\tbreak\nif state==10:\n\tprint(count,2)\nif state==100:\n\tprint(count,1)\nif state==10000:\n\tprint(-1)\n", "x=int(input())\nA=list(map(int,input().split()))\nA=A[1:]\n#print(A)\nD=A\n#print(D)\nB=list(map(int,input().split()))\nB=B[1:]\nE=B\nC=[]\n#print(A)\n#print(B)\ncount=0\nnum=1000\nwhile(num>0):\n\tif count==999:\n\t\tstate=10000\n\t\tbreak\n\t#print(D)\n\tstate=-100\n\tif A==C:\n\t\tstate=10\n\t\tbreak\n\tif B==C:\n\t\tstate=100\n\t\tbreak\n\tif A[0]>B[0]:\n\t\tA.append(B[0])\n\t\tA.append(A[0])\n\t\tA=A[1:]\n\t\tB=B[1:]\n\t\tcount=count+1\n\t\t#print(A,B)\n\t\tstate=0\n\t\tnum=num-1\n\tif state!=0:\t\n\t\tif B[0]>A[0]:\n\t\t\tB.append(A[0])\n\t\t\tB.append(B[0])\n\t\t\tB=B[1:]\n\t\t\tA=A[1:]\n\t\t\tcount=count+1\n\t\t\t#print(A,B)\n\t\t\tnum=num-1\n\t#if A==D:\n\t#\tif B==E:\n\t#\t\tstate=1000\n\t#\t\tbreak\n\t#if A==E:\n\t#\tif B==D:\n\t#\t\tstate=1000\n\t#\t\tbreak\nif state==10:\n\tprint(count,2)\nif state==100:\n\tprint(count,1)\n#CODE BASED ON THE TEST CASES\n#MAHESH JASTI\n#IIIT HYDERABAD\nif state==10000:\n\tprint(-1)\n"]