["import math\nimport sys\n\narrival, departure, time_per_client = [int(x) for x in input().split()]\nnum_clients = int(input())\nif num_clients > 0:\n\tclients_arrival = [int(x) for x in input().split()]\nelse:\n\tprint(arrival)\n\treturn\n\nbest_time = None\n\ncurrent_time = arrival\nclients_at_queue = 0\n\nclient_to_arrive = 0\nclient_wait_time = [math.inf for client in clients_arrival]\nclient_to_leave = 0\n\nwhile current_time <= departure - time_per_client:\n\twhile client_to_arrive < num_clients and clients_arrival[client_to_arrive] <= current_time:\n\t\tclients_at_queue += 1\n\t\tclient_to_arrive += 1\n\n\tif clients_at_queue == 0:\n\t\tbest_time = current_time\n\t\tbreak\n\telse:\n\t\tclients_at_queue -= 1\n\t\tclient_wait_time[client_to_leave] = current_time - clients_arrival[client_to_leave]\n\t\tclient_to_leave += 1\n\n\t\tcurrent_time += time_per_client\n\n\n\nwhile (best_time is None or best_time < 0) and len(client_wait_time) > 0:\n\thappiest_client = client_wait_time.index(min(client_wait_time))\n\tbest_time = clients_arrival[happiest_client] - 1\n\n\tif best_time < 0:\n\t\tclient_wait_time = client_wait_time[happiest_client+1:]\n\t\tclients_arrival = clients_arrival[happiest_client+1:]\n\n\nprint(best_time)", "inp = input().split(' ')\nts = int(inp[0])\ntf = int(inp[1])\nT = int(inp[2])\ninp = input()\nn = int(inp)\n\nif n == 0:\n    print(ts)\n\nelse:\n    inp = input().split(' ')\n    min_del_t = 10000000000000;\n    ans = int(inp[0])-1\n    t_cur = ts\n    for tS in inp:\n        t = int(tS)\n        time_waiting = t_cur-t+1\n        if t_cur < t and t_cur+T<=tf:\n            ans = t_cur\n            break\n        else:\n            if min_del_t > time_waiting and t_cur+T <= tf:\n                min_del_t = time_waiting\n                ans = t-1\n        t_cur += T\n    #print(min_del_t)\n    if(t_cur+T<=tf):\n        print(t_cur)\n    else:\n        print(ans)\n\n", "import math\nstart,finish,time = list(map(int, input().split()))\nb = int(input())\n\ndef solve():\n    firstAvailableSpot = start\n    minimumTimeInQueue = 10**12 + 1\n    minimum = 23123\n    last = 0\n\n    for i in range(len(q)):\n        if (q[i] > firstAvailableSpot) and (firstAvailableSpot + time < finish):\n            return firstAvailableSpot\n\n        timeInQueue = firstAvailableSpot - q[i]\n        firstAvailableSpot += time\n\n        if q[i] != last:\n            if timeInQueue + 1 < minimumTimeInQueue:\n                minimumTimeInQueue = timeInQueue + 1\n                minimum = q[i] - 1\n                last = q[i]\n        \n        if firstAvailableSpot >= finish or len(q) -1 == i:\n            if firstAvailableSpot + time <= finish:\n                return firstAvailableSpot\n            return minimum\n\nif b != 0:\n    q = list(map(int, input().split()))\n    print(solve())\nelse:\n    print(str(start))\n\n\n\n", "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    ts, tf, t = map(int, input().split())\n    n = int(input())\n\n    if n == 0:\n        print(ts)\n        return None\n\n    AT = [int(i) for i in input().split()]\n    BT = [0]*n\n\n    for i, at in enumerate(AT):\n        if i == 0:\n            if at > ts:\n                print(ts)\n                return None\n            else:\n                BT[i] = ts\n        else:\n            if at > BT[i - 1] + t and BT[i - 1] + t <= tf:\n                print(BT[i - 1] + t)\n                return None\n            else:\n                BT[i] = BT[i - 1] + t\n\n    if BT[n - 1] + 2*t <= tf:\n        print(BT[n - 1] + t)\n        return None\n\n    min_wait = float('inf')\n    ans = None\n\n    for i in range(n):\n        if i > 0 and AT[i] == AT[i - 1]:\n            continue\n        else:\n            if BT[i] - (AT[i] - 1) < min_wait and BT[i] + t <= tf:\n                min_wait = BT[i] - (AT[i] - 1)\n                ans = AT[i] - 1\n\n    print(ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "f = lambda: map(int, input().split())\na, b, t = f()\nk, = f()\ns = d = 1e12\nfor q in (f() if k else []):\n    if q > a: s = a\n    if q > a or a + t > b: break\n    elif a - q < d: s, d = q - 1, a - q\n    a += t\nprint(s if a + t > b else a)", "s, e, t_per_v = list(map(int, input().split()))\ne -= t_per_v\nn = int(input())\nif n > 0:\n    visitors = list(map(int, input().split()))\nelse:\n    visitors=[]\n\nmin_wait_time = float(\"inf\")\nmin_arrive_time = -1\nvisitor_index = 0\nt = s\nwhile t <= e:\n    # print(t, visitor_index)\n    if visitor_index >= len(visitors) or visitors[visitor_index] > t:\n        print(t)\n        return\n    wait_time = t - visitors[visitor_index]\n    if wait_time < min_wait_time:\n        min_wait_time = wait_time\n        min_arrive_time = visitors[visitor_index]\n    t += t_per_v\n    visitor_index += 1\nprint(min_arrive_time - 1)\n", "s, e, t_per_v = list(map(int, input().split()))\ne -= t_per_v\nn = int(input())\nif n > 0:\n    visitors = list(map(int, input().split()))\nelse:\n    visitors=[]\n\nmin_wait_time = float(\"inf\")\nmin_arrive_time = -1\nvisitor_index = 0\nt = s\nwhile t <= e:\n    if visitor_index >= len(visitors) or visitors[visitor_index] > t:\n        print(t)\n        return\n    wait_time = t - visitors[visitor_index]\n    if wait_time < min_wait_time:\n        min_wait_time = wait_time\n        min_arrive_time = visitors[visitor_index]\n    t += t_per_v\n    visitor_index += 1\nprint(min_arrive_time - 1)\n\n# 1535294397513\n", "# \n\ndef update(t, l, ans):\n    if l < ans[1]:\n        ans[0] = t\n        ans[1] = l\n    \ndef solve():\n    S, E, L = list(map(int, input().split()))\n    \n    n       = int(input())\n    if n == 0:\n        return S\n    \n    a       = list(map(int, input().split()))[::-1]\n\n    if S < a[-1]:\n        return S\n    \n    ans = [0, S]\n    cur_t = S\n    \n    while cur_t+L <= E and len(a) > 0:\n        if cur_t < a[-1]:\n            return cur_t\n        \n        t  = a.pop()\n        update(t-1, cur_t-t+1, ans)\n        cur_t+=L    \n    \n    if cur_t+L <= E:\n        return cur_t\n    \n    return ans[0]\n\nprint(solve())        \n#10 15 2\n#2\n#10 13    \n\n#8 17 3\n#4\n#3 4 5 8\n"]