["def main():\n\tn, ma, mb, *L = list(map(int, open(0).read().split()))\n\tM = 1 << 30\n\tdp = [[M] * 420 for _ in range(420)]\n\tdp[0][0] = 0\n\tua = ub = 15\n\tfor a, b, c in zip(*[iter(L)] * 3):\n\t\tfor i in range(ua, -1, -1):\n\t\t\tfor j in range(ub, -1, -1):\n\t\t\t\tt = dp[i][j] + c\n\t\t\t\tif dp[i + a][j + b] > t:\n\t\t\t\t\tdp[i + a][j + b] = t\n\t\t\t\t\tif ua < i + a:\n\t\t\t\t\t\tua = i + a\n\t\t\t\t\tif ub < j + b:\n\t\t\t\t\t\tub = j + b\n\tans = M\n\t_ma, _mb = ma, mb\n\twhile _ma < 410 > _mb:\n\t\tans = min(ans, dp[_ma][_mb])\n\t\t_ma += ma\n\t\t_mb += mb\n\tprint((ans if ans < M else -1))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "N, ma, mb = list(map(int, input().split()))\na = [0]*N\nb = [0]*N\nc = [0]*N\nNMAX = 40\nABMAX = 10\nINF = 1000000\nfor i in range(N):\n    a[i], b[i], c[i] = list(map(int, input().split()))\ndp = [[[INF]*(NMAX*ABMAX+1)for _ in range(NMAX*ABMAX+1)]for _ in range(N+1)]\ndp[0][0][0] = 0\nfor i in range(N):\n    for ca in range(NMAX*ABMAX+1):\n        for cb in range(NMAX*ABMAX+1):\n            if dp[i][ca][cb] == INF:\n                continue\n            dp[i+1][ca][cb] = min(dp[i+1][ca][cb], dp[i][ca][cb])\n            dp[i+1][ca+a[i]][cb+b[i]\n                             ] = min(dp[i+1][ca+a[i]][cb+b[i]], dp[i][ca][cb]+c[i])\nans = INF\nfor ca in range(1, NMAX*ABMAX+1):\n    for cb in range(1, NMAX*ABMAX+1):\n        if ca * mb == cb * ma:\n            ans = min(ans, dp[N][ca][cb])\nprint((ans if ans != INF else -1))\n", "#coding: utf-8\nimport math\nimport heapq\nimport bisect\nimport numpy as np\nfrom collections import Counter, deque\nimport itertools\n#from scipy.misc import comb\n\nN,Ma,Mb = map(int, input().split())\n\nDP = [[10**9 for _ in range(401)] for _ in range(401)]\nDP[0][0] = 0\nfor _ in range(N):\n    a,b,c = map(int, input().split())\n    for i in range(401)[::-1]:\n        for j in range(401)[::-1]:\n            if DP[i][j] != 10**9:\n                DP[i+a][j+b] = min(DP[i+a][j+b], DP[i][j]+c)\n\nans = 10**9\nA,B = Ma, Mb\nwhile max(A,B) <= 400:\n    ans = min(ans, DP[A][B])\n    A += Ma\n    B += Mb\n\nif ans == 10**9:\n    print(-1)\nelse:\n    print(ans)", "N,Ma,Mb=map(int,input().split())\nINF=40*100+1\ndp=[[INF for i in range(10*N+1)] for j in range(10*N+1)]\ndp[0][0]=0\nans=INF\nfor p in range(N):\n  a,b,c=map(int,input().split())\n  for i in range(len(dp)-1,-1,-1):\n    for j in range(len(dp[i])-1,-1,-1):\n      if dp[i][j]!=INF:\n        dp[i+a][j+b]=min(dp[i+a][j+b],dp[i][j]+c)\n        if (i+a)/(j+b)==Ma/Mb:\n          ans=min(ans,dp[i+a][j+b])\n          \nif ans==INF:\n  print(-1)\nelse:\n  print(ans)", "\nN, Ma, Mb = list(map(int,input().split()))\nrate = Ma / Mb\na = [0] * N\nb = [0] * N\nc = [0] * N\nMA = 0\nMB = 0\nMC = 0\nfor i in range(N):\n    a[i], b[i], c[i] = list(map(int, input().split()))\n    MA += a[i]\n    MB += b[i]\n    MC += c[i]\n    \ndp = [[[MC for i in range(MB+1)] for j in range(MA+1)] for k in range(N+1)]\ndp[0][0][0] = 0\n\nfor it_N in range(N):\n    for it_MA in range(MA+1):\n        for it_MB in range(MB+1):\n            if it_MA >= a[it_N] and it_MB >= b[it_N]:\n                if dp[it_N][it_MA-a[it_N]][it_MB-b[it_N]] != MC:\n                    dp[it_N+1][it_MA][it_MB] = min(dp[it_N][it_MA-a[it_N]][it_MB-b[it_N]] + c[it_N], dp[it_N][it_MA][it_MB])\n                else:\n                    dp[it_N+1][it_MA][it_MB]=dp[it_N][it_MA][it_MB]\n            else:\n                dp[it_N+1][it_MA][it_MB]=dp[it_N][it_MA][it_MB]\n\nans = -1\nfor a in range(1, MA+1):\n    for b in range(1, MB+1):\n        if a/b == rate and dp[N][a][b] != MC:\n            if ans == -1:\n                ans = dp[N][a][b]\n            else:\n                ans = min(dp[N][a][b], ans)\nprint(ans)\n", "n,MA,MB=map(int,input().split())\nINF=10**10\nA=[]\nB=[]\nC=[]\nfor i in range(n):\n  a,b,c=map(int,input().split())\n  if MA*b-MB*a>0:\n    A.append([MA*b-MB*a,c])\n  elif MA*b-MB*a<0:\n    B.append([MB*a-MA*b,c])\n  else:\n    C.append(c)\ndp1=[[INF]*10010 for i in range(len(A)+1)]\nfor i in range(1,len(A)+1):\n  for j in range(1,10010):\n    if j<A[i-1][0]:\n      dp1[i][j]=dp1[i-1][j]\n    elif j==A[i-1][0]:\n      dp1[i][j]=min(A[i-1][1],dp1[i-1][j])\n    else:\n      dp1[i][j]=min(dp1[i-1][j],dp1[i-1][j-A[i-1][0]]+A[i-1][1])\ndp2=[[INF]*10010 for i in range(len(B)+1)]\nfor i in range(1,len(B)+1):\n  for j in range(1,10010):\n    if j<B[i-1][0]:\n      dp2[i][j]=dp2[i-1][j]\n    elif j==B[i-1][0]:\n      dp2[i][j]=min(B[i-1][1],dp2[i-1][j])\n    else:\n      dp2[i][j]=min(dp2[i-1][j],dp2[i-1][j-B[i-1][0]]+B[i-1][1])\nans=INF\nfor i in range(10010):\n  a=dp1[-1][i]+dp2[-1][i]\n  if a<ans:\n    ans=a\nfor i in range(len(C)):\n  if C[i]<ans:\n    ans=C[i]\nif ans<INF:\n  print(ans)\nelse:\n  print(-1)", "n,ma,mb=list(map(int,input().split()))\nel=[list(map(int,input().split())) for i in range(n)]\nsa=sum(i[0] for i in el)\nsb=sum(i[1] for i in el)\nsa1=sa+1\nsb1=sb+1\n\ninf=1000000\nx=[[inf]*(sb1) for i in range(sa1)]\nx[0][0]=0\nfor i in range(n):\n    now=el[i]\n    x_sub=[[0]*(sb1) for i in range(sa1)]\n    for k in range(sa1):\n        for l in range(sb1):\n            if x[k][l]!=inf:\n                if k+now[0]<sa1:\n                    if l+now[1]<sb1:\n                        x_sub[k+now[0]][l+now[1]]=x[k][l]+now[2]\n    for k in range(sa1):\n        for l in range(sb1):\n                if x_sub[k][l]!=0:\n                    x[k][l]=min(x[k][l],x_sub[k][l])\nmi=min(sa//ma,sb//mb)\nans=inf\nfor i in range(1,mi+1):\n    ans=min(ans,x[ma*i][mb*i])\nif ans==inf:\n    print((-1))\nelse:\n    print(ans)\n", "n,ma,mb=list(map(int,input().split()))\nel=[list(map(int,input().split())) for i in range(n)]\nsa=sum(i[0] for i in el)\nsb=sum(i[1] for i in el)\nsa1=sa+1\nsb1=sb+1\n\ninf=10000000000\nx=[[inf]*(sb1) for i in range(sa1)]\nx[0][0]=0\nfor i in range(n):\n    now=el[i]\n    x_sub=[[0]*(sb1) for i in range(sa1)]\n    for k in range(sa1):\n        for l in range(sb1):\n            if x[k][l]!=inf and k+now[0]<sa1 and l+now[1]<sb1:\n                x_sub[k+now[0]][l+now[1]]=x[k][l]+now[2]\n    for k in range(sa1):\n        for l in range(sb1):\n                if x_sub[k][l]!=0:\n                    x[k][l]=min(x[k][l],x_sub[k][l])\nmi=min(sa//ma,sb//mb)\nans=inf\nfor i in range(1,mi+1):\n    ans=min(ans,x[ma*i][mb*i])\nif ans==inf:\n    print((-1))\nelse:\n    print(ans)\n", "import sys\nfrom itertools import combinations\ninput = sys.stdin.readline\n\ndef main():\n    n, ma, mb = list(map(int, input().split()))\n    dp = [[0]*401 for _ in range(401)]\n    \n    for _ in range(n):\n        a, b, c = list(map(int, input().split()))\n        for i in range(400, -1, -1):\n            for j in range(400, -1, -1):\n                if i == 0 and j == 0:\n                    if dp[a][b]:\n                        dp[a][b] = min(dp[a][b], c)\n                    else:\n                        dp[a][b] = c\n                if dp[i][j] and i+a <= 400 and j+b <= 400:\n                    if dp[i+a][j+b]:\n                        dp[i+a][j+b] = min(dp[i+a][j+b], dp[i][j]+c)\n                    else:\n                        dp[i+a][j+b] = dp[i][j] + c\n    \n    ans = 1000000\n    x, y = ma, mb\n    while x <= 400 and y <= 400:\n        if dp[x][y]:\n            ans = min(dp[x][y], ans)\n        x += ma\n        y += mb\n    if ans == 1000000:\n        print((-1))\n    else:\n        print(ans)\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "N, A, B = map(int, input().split())\nX = [1<<20] * 4040\nfor _ in range(N):\n    a, b, c = map(int, input().split())\n    t = A*b-B*a\n    X = [min(X[i], (0 if (i-t)%4040 == 0 else X[(i-t)%4040]) + c) for i in range(4040)]\nprint(-1 if X[0] > 1<<18 else X[0])", "INF = float('inf')\nn, ma, mb = list(map(int, input().split()))\ncmax = n * 10\nt = [[INF] * (cmax + 1) for _ in range(cmax + 1)]\nfor _ in range(n):\n  a, b, c = list(map(int, input().split()))\n  for aa in range(cmax, 0, -1):\n    for bb in range(cmax, 0, -1):\n      if t[aa][bb] == INF:\n        continue\n      t[aa + a][bb + b] = min(t[aa + a][bb + b], t[aa][bb] + c)\n  t[a][b] = min(t[a][b], c)\nresult = INF\nfor a in range(1, cmax):\n  for b in range(1, cmax):\n    if a * mb == b * ma:\n      result = min(result, t[a][b])\nif result == INF:\n  result = -1\nprint(result)\n", "N, Ma, Mb = list(map(int, input().split()))\nitems = [[int(x) for x in input().split()] for _ in range(N)]\n\nA, B = 0, 0\nfor a, b, _ in items:\n    A += a\n    B += b\n\ndp = [[[float(\"inf\")] * (B + 1) for _ in range(A + 1)] for _ in range(N + 1)]\nfor i in range(N + 1):\n    dp[i][0][0] = 0\n\nfor i in range(N):\n    a, b, c = items[i]\n    for j in range(A + 1):\n        for k in range(B + 1):\n            if j - a >= 0 and k - b >= 0:\n                dp[i + 1][j][k] = min(dp[i][j - a][k - b] + c, dp[i][j][k])\n            else:\n                dp[i + 1][j][k] = dp[i][j][k]\n\n\nans = float(\"inf\")\nfor x in range(1, min(A // Ma, B // Mb) + 1):\n    a = Ma * x\n    b = Mb * x\n    ans = min(dp[N][a][b], ans)\n\nif ans == float(\"inf\"):\n    ans = -1\nprint(ans)\n", "N, A, B = map(int, input().split())\nX = [1<<20] * 8080\nfor _ in range(N):\n    a, b, c = map(int, input().split())\n    t = A*b-B*a\n    X = [min(X[i], (0 if (i-t)%8080 == 0 else X[(i-t)%8080]) + c) for i in range(8080)]\nprint(-1 if X[0] > 1<<18 else X[0])", "N,MA,MB = map(int,input().split())\nABC = [tuple(map(int,input().split())) for i in range(N)]\n\nINF = float('inf')\nfrom collections import defaultdict\ndp = defaultdict(lambda: INF)\ndp[(0,0)] = 0\nfor a,b,c in ABC:\n    dp2 = defaultdict(lambda: INF)\n    for (pa,pb),pc in dp.items():\n        dp2[(pa,pb)] = min(dp2[(pa,pb)], pc)\n        dp2[(pa+a, pb+b)] = min(dp2[(pa+a, pb+b)], pc+c)\n    dp = dp2\n\nans = INF\nfor i in range(1,401):\n    ans = min(ans, dp[(MA*i, MB*i)])\nprint(-1 if ans==INF else ans)", "# DP\nINF = float('inf')\n\nN, Ma, Mb = list(map(int, input().split()))\n\ncmax = N * 10\nt = [[INF] * (cmax + 1) for _ in range(cmax + 1)]\nfor _ in range(N):\n    a, b, c = list(map(int, input().split()))\n    for aa in range(cmax, 0, -1):\n        for bb in range(cmax, 0, -1):\n            if t[aa][bb] == INF:\n                continue\n            t[aa + a][bb + b] = min(t[aa + a][bb + b], t[aa][bb] + c)\n    t[a][b] = min(t[a][b], c)\n\nresult = INF\nfor a in range(1, cmax):\n    for b in range(1, cmax):\n        if a * Mb == b * Ma:\n            result = min(result, t[a][b])\nif result == INF:\n    result = -1\nprint(result)\n", "# coding: utf-8\n# Your code here!\nN,Ma,Mb=list(map(int,input().split()))\n\ndp=[[10**9 for i in range(401)] for j in range(401)]\ndp[0][0]=0\n\nfor _ in range(N):\n    a,b,c=list(map(int,input().split()))\n    for i in range(401)[::-1]:\n        for j in range(401)[::-1]:\n            if dp[i][j]!=10**9:\n                dp[i+a][j+b]=min(dp[i+a][j+b],dp[i][j]+c)\n\nans=10**9\nfor i in range(Ma,401)[::Ma]:\n    j=i//Ma*Mb\n    if j>=401:\n        break\n    ans=min(ans,dp[i][j])\n\nif ans==10**9:\n    print((-1))\nelse:\n    print(ans)\n    \n", "import numpy as np\nN, Ma, Mb = map(int, input().split())\nls = []\ndp = np.full((1001,1001),float('inf'))\ndp[0][0] = 0\nfor i in range(N):\n  a,b,c = map(int, input().split())\n  dp[a:,b:] = np.minimum(dp[:1001-a,:1001-b]+c, dp[a:,b:])\nans = float('inf')\nfor i in range(1,1001):\n  if i*Ma>1000 or i*Mb>1000:\n    break\n  if dp[i*Ma,i*Mb]<ans:\n    ans = dp[i*Ma,i*Mb]\nif ans==float('inf'):\n  ans = -1\nprint(int(ans))", "# \u534a\u5206\u5168\u5217\u6319\u30d0\u30fc\u30b8\u30e7\u30f3\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef allptn(abc,ma,mb):\n    inf=10**9\n    # a,b,c\u306e\u5168\u7d44\u5408\u305b\u3092\u4f5c\u308b\n    allabc=[(0,0,0)]\n    for a,b,c in abc:\n        n=len(allabc)\n        for i in range(n):\n            aa,bb,cc=allabc[i]\n            allabc.append((aa+a,bb+b,cc+c))\n    # \u6307\u6a19\u3068\u30b3\u30b9\u30c8\u306e\u7d44\u5408\u305b\u306b\u3059\u308b\n    # \u6307\u6a19\u304c\u91cd\u8907\u3059\u308b\u3068\u304d\u306f\u30b3\u30b9\u30c8\u304c\u5c0f\u3055\u3044\u307b\u3046\u3060\u3051\u6b8b\u3059\n    # \u6307\u6a19\u304c0\u306e\u3068\u304d\u306f\u524d\u5f8c\u534a\u3067\u7d44\u307f\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u5358\u72ec\u3067\u7b54\u3048\u3092\u51fa\u3057\u3066\u304a\u304f\n    vc={}\n    ans=inf\n    for a,b,c in allabc[1:]:\n        val=a*mb-b*ma\n        if val:\n            pc=vc.setdefault(val,inf)\n            if c<pc:vc[val]=c\n        else:\n            if c<ans:ans=c\n    res=[(val,c) for val,c in sorted(vc.items())]\n    return ans,res\n\ndef main():\n    n,ma,mb=MI()\n    abc=[LI() for _ in range(n)]\n    inf=10**9\n    # \u524d\u534a\u306e\u8981\u7d20\u3092a1,b1\u3001\u5f8c\u534a\u306e\u8981\u7d20\u3092a2,b2\u3068\u3059\u308b\n    # (a1+a2):(b1+b2)=ma:mb\u3068\u306a\u308c\u3070\u3088\u3044\u3002\u5f0f\u5909\u5f62\u3059\u308b\u3068\n    # (mb*a1-ma*b1)+(mb*a2-ma*b2)=0\u3068\u306a\u308b\n    # \u3064\u307e\u308a\u5404\u8981\u7d20\u306b\u3064\u3044\u3066mb*a-ma*b\u3068\u3044\u3046\u6307\u6a19\u3092\u8a08\u7b97\u3057\u3001\u524d\u534a\u3068\u5f8c\u534a\u3067\u548c\u304c0\u306b\u306a\u308b\u7d44\u5408\u305b\u3092\u63a2\u305b\u3070\u3088\u3044\n    # \u524d\u534a\u5168\u5217\u6319\n    ans,pre=allptn(abc[:n//2],ma,mb)\n    # \u5f8c\u534a\u5168\u5217\u6319\n    ret,pos=allptn(abc[n//2:],ma,mb)\n    ans=min(ans,ret)\n    # \u6307\u6a19\u304c\u6607\u9806\u306b\u306a\u308b\u3088\u3046\u4e26\u3073\u66ff\u3048\u3066\u3001\u524d\u534a\u306f\u524d\u304b\u3089\u5f8c\u534a\u306f\u5f8c\u304b\u3089\u3057\u3083\u304f\u3068\u308a\u6cd5\u3067\n    # \u6307\u6a19\u306e\u548c\u304c0\u306b\u306a\u308b\u3068\u3053\u308d\u306e\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u308b\n    j=len(pos)-1\n    for val,c in pre:\n        while val+pos[j][0]>0 and j:j-=1\n        if val+pos[j][0]==0:ans=min(ans,c+pos[j][1])\n    if ans==inf:print(-1)\n    else:print(ans)\n\nmain()", "nmax, abmax, inf = 40, 10, 1000000\n\ndp = [[[inf] * (nmax * abmax + 1) for _ in range(nmax * abmax + 1)] for _ in range(nmax + 1)]\n\nn, ma, mb = list(map(int, input().split()))\n\ndp[0][0][0] = 0\n\nfor i in range(n):\n  a, b, c = list(map(int, input().split()))\n  dpi = dp[i]\n  dpi1 = dp[i + 1]\n  for ca in range(0, 401):\n    for cb in range(0, 401):\n      if dpi[ca][cb] == inf:\n        continue\n      dpi1[ca][cb] = min(dpi1[ca][cb], dpi[ca][cb])\n      dpi1[ca + a][cb + b] = min(dpi1[ca + a][cb + b], dpi[ca][cb] + c)\n\nans = inf\ndpn = dp[n]\nfor ca in range(1, 401):\n  for cb in range(1, 401):\n    if ca * mb == cb * ma:\n      ans = min(ans, dpn[ca][cb])\n\nif ans == inf:\n  ans = -1\n\nprint(ans)\n", "import numpy as np\n\nn, ma, mb = map(int, input().split())\nU = 400\ndp = np.full((U+1, U+1), float(\"inf\"))\ndp[0, 0] = 0\nfor i in range(n):\n  a, b, c = map(int, input().split())\n  np.minimum(dp[a:, b:], dp[:-a, :-b]+c, out=dp[a:, b:])\nans = float(\"inf\")\nfor i in range(1, 1+U//max(ma, mb)):\n  na, nb = i*ma, i*mb\n  ans = min(ans, dp[na, nb])\nif ans == float(\"inf\"):\n  print(-1)\nelse:\n  print(int(ans))", "n,ma,mb= map(int,input().split())\nal=[]\nbl=[]\ncl=[]\nfor _ in range(n):\n    a,b,c= map(int,input().split())\n    al.append(a)\n    bl.append(b)\n    cl.append(c)\nsuma=sum(al)\nMAX=999999999999\ngmincost = [MAX]\ndef dfsMa(id,count,sel):\n    if id==n:return\n    dfsMa(id+1,count,sel)\n    tempsum = al[id]+count\n    bsum=costsum=0\n    for j in sel+[id]:\n        bsum+=bl[j]\n        costsum+=cl[j]\n    if costsum > gmincost[0]:\n        return\n    elif tempsum%ma == 0:\n        k=tempsum//ma\n        if bsum==k*mb:\n            gmincost[0] = min(gmincost[0],costsum)\n            return\n    dfsMa(id+1,count+al[id],sel+[id])\n    return\ndfsMa(0,0,[])\nif gmincost[0]==MAX:print(-1)\nelse:print(gmincost[0])", "n,ma,mb = list(map(int,input().split()))\nl = []\nsum_a = 0\nsum_b = 0\nfor _ in range(n):\n    a,b,c = list(map(int,input().split()))\n    sum_a += a\n    sum_b += b\n    l.append([a,b,c])\n\nINF = 10**10\ndp = list( list([INF for i in range(450)] for i in range(450)) for i in range(45))\ndp[0][0][0] = 0\nfor i in range(n):\n    for s in range(sum_a+1):\n        for k in range(sum_b+1):\n            a,b,c = l[i]\n            dp[i+1][s][k] = min(dp[i][s][k], dp[i+1][s][k],dp[i][s-a][k-b]+c)\n\nans = 10**10\nk = 1\nwhile ma*k < 450 and mb*k < 450 :\n    ans = min(ans, dp[n][ma*k][mb*k])\n    k += 1\nif ans != 10**10:\n  print(ans)\nelse:\n  print((-1))\n", "import copy\n\nN, Ma, Mb = list(map(int, input().split()))\nABC = [tuple(map(int, input().split())) for _ in range(N)]\n\nINF, W = 10 ** 10, 10 * 10 * N\ndp = [[INF] * (2 * W + 1)]\n\nfor a, b, c in ABC:\n    dp.append(copy.deepcopy(dp[-1]))\n    df = a * Mb - b * Ma\n    dp[-1][df] = min(c, dp[-1][df])\n    for d in range(-W, W + 1):\n        dp[-1][df + d] = min(c + dp[-2][d], dp[-1][df + d])\n\nprint((\"-1\" if dp[N][0] == INF else dp[N][0]))\n", "inf = 10 ** 18\n\na = []\nb = []\nc = []\nn, ma, mb = list(map(int, input().split()))\n\nfor _ in range(n):\n    a_, b_, c_ = list(map(int, input().split()))\n    a.append(a_)\n    b.append(b_)\n    c.append(c_)\n\nabmax = 10\np = n * abmax\ndp = [[[inf for _ in range(p + 1)] for _ in range(p + 1)]\n      for _ in range(n + 1)]\ndp[0][0][0] = 0\n\nfor i in range(n):\n    for j in range(p + 1):\n        for k in range(p + 1):\n            if dp[i][j][k] == inf:\n                continue\n            dp[i + 1][j][k] = min(dp[i+1][j][k], dp[i][j][k])\n            dp[i + 1][j + a[i]][k + b[i]\n                                ] = min(dp[i + 1][j + a[i]][k + b[i]], dp[i][j][k] + c[i])\n\nans = inf\nfor j in range(p)[1::]:\n    for k in range(p)[1::]:\n        if j * mb == k * ma:\n            ans = min(ans, dp[n][j][k])\n\nif ans == inf:\n    ans = -1\nprint(ans)\n", "n, ma, mb = map(int, input().split())\nabc = []\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    abc.append((a, b, c))\ndp = {(0, 0): 0}\nfor a, b, c in abc:\n    newdp = dp.copy()\n    for (ka, kb), p in dp.items():\n        k = (a+ka, b+kb)\n        if k in newdp:\n            newdp[k] = min(newdp[k], p+c)\n        else:\n            newdp[k] = p+c\n    dp = newdp\nINF = 10**10\nans = INF\nfor (a, b), c in dp.items():\n    if ma*b!=mb*a or a==b==0:\n        continue\n    ans = min(ans, c)\nif ans==INF:\n    print(-1)\nelse:\n    print(ans)", "NMAX=40\nABMAX=10\nINF=1000000\nN,MA,MB=list(map(int,input().split()))\nA=[0]*NMAX\nB=[0]*NMAX\nC=[0]*NMAX\ndp=[[[INF for _ in range(NMAX*ABMAX+1)] for _ in range(NMAX*ABMAX+1)] for _ in range(NMAX+1)]\nfor i in range(N):\n  A[i],B[i],C[i]=list(map(int,input().split()))\n\ndp[0][0][0]=0\nfor i in range(N):\n  for ca in range(NMAX*ABMAX+1):\n    for cb in range(NMAX*ABMAX+1):\n      if dp[i][ca][cb]==INF: continue\n      dp[i+1][ca][cb]=min(dp[i+1][ca][cb],dp[i][ca][cb])\n      dp[i+1][ca+A[i]][cb+B[i]]=min(dp[i+1][ca+A[i]][cb+B[i]],dp[i][ca][cb]+C[i])\n\nans=INF\nfor ca in range(1,NMAX*ABMAX+1):\n  for cb in range(1,NMAX*ABMAX+1):\n    if ca*MB==cb*MA: ans=min(ans,dp[N][ca][cb])\nif ans==INF: ans=-1\nprint(ans)\n", "N, Ma, Mb = list(map(int, input().split()))\ndp = [{} for i in range(N+1)]\ndp[0][(0, 0)] = 0\nfor i in range(N):\n  a, b, c = list(map(int, input().split()))\n  for p, q in dp[i]:\n    if (p, q) not in dp[i+1]: dp[i+1][(p, q)] = 100000\n    dp[i+1][(p, q)] = min(dp[i+1][(p, q)], dp[i][(p, q)])\n    if (p+a, q+b) not in dp[i+1]: dp[i+1][(p+a, q+b)] = 100000\n    dp[i+1][(p+a, q+b)] = min(dp[i+1][(p+a, q+b)], dp[i][(p, q)]+c)\n#print(dp[N])\nrs = []\nfor k in range(1, 10000):\n  if (k*Ma, k*Mb) in dp[N]:\n    r = dp[N][(k*Ma, k*Mb)]\n    rs.append(r)\nif len(rs) == 0:\n  print((-1))\nelse:\n  r = min(rs)\n  print(r)\n", "def main():\n    N, Ma, Mb = list(map(int, input().split()))\n    A = []\n    B = []\n    C = []\n    for _ in range(N):\n        a, b, c = list(map( int, input().split()))\n        A.append(a)\n        B.append(b)\n        C.append(c)\n    dp = [[10**5]*401 for _ in range(401)]\n    dp[0][0] = 0\n    for t in range(N):\n        a, b, c = A[t], B[t], C[t]\n        for i in range(400,-1,-1):\n            for j in range(400,-1,-1):\n                if i-a >= 0 and j-b >= 0:\n                    if dp[i-a][j-b] + c < dp[i][j]:\n                        dp[i][j] = dp[i-a][j-b] + c\n    ans = 10**5\n    for i in range(1, 401):\n        if i*Ma > 400 or i*Mb > 400:\n            break\n        if dp[i*Ma][i*Mb] < ans:\n            ans = dp[i*Ma][i*Mb]\n    if ans == 10**5:\n        print((-1))\n    else:\n        print(ans)\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "n, ma, mb = [int(i) for i in input().split()]\nlst = [[int(i) for i in input().split()] for _ in range(n)]\nlst.sort(key=lambda x: x[2])\ndic = {}\ndef push(k,v):\n    if k in dic:\n        dic[k] = min(dic[k],v)\n    else:\n        dic[k] = v\n\n\nfor i in lst:\n    k, v = i[0] * mb - i[1] * ma, i[2]\n    l = [[j, dic[j]] for j in dic]\n    for item in l:\n        push(item[0] + k, item[1] + v)\n    push(k, v)\n\nprint(dic[0] if 0 in dic else '-1')", "n, ma, mb = map(int, input().split(\" \"))\ninfo_med = []\nfor _ in range(n):\n  info_med.append(list(map(int, input().split(\" \"))))\ninfo_med.sort(key=lambda x: x[2])\ndp = []\ndp.append([(0, 0, [-1])])\n\nfor min_c in range(1, n * 100 + 1):\n  temp_list = []\n  for i, (a, b, c) in enumerate(info_med):\n    if min_c - c >= 0:\n      for pre_a, pre_b, pre_i in dp[min_c - c]:\n        if pre_i[-1] < i:\n          if (a + pre_a) * mb == (b + pre_b) * ma:\n            print(min_c)\n            return\n          temp_list.append((a + pre_a, b + pre_b, pre_i + [i]))\n  dp.append(temp_list)\nprint(\"-1\")", "n, A, B = map(int, input().split())\nz = [tuple(map(int, input().split())) for _ in range(n)]\n\ninf = 10 ** 18\n\nd = {(0, 0):0}\nfor a, b, cost in z:\n    newd = []\n    for (x, y), c in d.items():\n        new = (a+x, b+y)\n        if new not in d or d[new] > c + cost:\n            newd.append((new, c+cost))\n    for new, newc in newd:\n        d[new] = newc\n\nans = inf\nfor i in range(1, 10 * n):\n    t = (A * i, B * i)\n    if t in d:\n        ans = min(ans, d[t])\nif ans == inf:\n    print(-1)\nelse:\n    print(ans)", "def half_enumeration(a, *, func):\n    \"\"\"\u6b63\u3057\u3044\u82f1\u8a33\u306f\u4e0d\u660e\"\"\"\n    n = len(a)\n    h = n // 2\n\n    def enum(h, *, second_half: bool = False) -> set:\n        p = set()\n        if second_half:\n            b = a[h:]\n        else:\n            b = a[:h]\n\n        for x in b:\n            q = set()\n            for e in p:\n                q.add(func(e, x))\n            p.add(x)\n            p.update(q)\n        return p\n\n    return enum(h), enum(h, second_half=True)\n\n\ndef main():\n    INF = 40 * 100 + 1\n\n    N, Ma, Mb = list(map(int, input().split()))\n\n    def update(e, x):\n        return e[0] + x[0], e[1] + x[1]\n\n    xcs = []\n    for _ in range(N):\n        ai, bi, ci = list(map(int, input().split()))\n        x = Ma * bi - Mb * ai  # \u03a3ai:\u03a3bi=Ma:Mb<->Ma*\u03a3bi-Mb*\u03a3ai=0\n        xcs.append((x, ci))\n\n    p1, p2 = half_enumeration(xcs, func=update)\n\n    t1 = [INF] * (INF * 2 + 1)\n    t2 = [INF] * (INF * 2 + 1)\n    for x, c in p1:\n        t1[x] = min(t1[x], c)\n    for x, c in p2:\n        t2[x] = min(t2[x], c)\n\n    ans = min(t1[0], t2[0])\n    for x in range(-INF, INF + 1):\n        ans = min(ans, t1[x] + t2[-x])\n\n    print((-1 if ans == INF else ans))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "INF = float('inf')\nMAXAB = 10\nn, ma, mb = list(map(int, input().split()))\nt = [[INF] * (n * MAXAB + 1) for _ in range(n * MAXAB + 1)]\nt[0][0] = 0\nfor _ in range(n):\n  a, b, c = list(map(int, input().split()))\n  for aa in range(n * MAXAB, -1, -1):\n    for bb in range(n * MAXAB, -1, -1):\n      if t[aa][bb] == INF:\n        continue\n      if t[a + aa][b + bb] > t[aa][bb] + c:\n        t[a + aa][b + bb] = t[aa][bb] + c\nresult = INF\nfor a in range(1, n * MAXAB + 1):\n  for b in range(1, n * MAXAB + 1):\n    if a * mb == b * ma and result > t[a][b]:\n      result = t[a][b]\nif result == INF:\n  result = -1\nprint(result)\n", "def main():\n    INF = 100 * 40 + 1\n    MX = 4000\n\n    N, Ma, Mb = list(map(int, input().split()))\n\n    dp = [[INF] * (MX * 2 + 1) for _ in range(2)]\n    i, j = 0, 1\n    for _ in range(N):\n        ai, bi, ci = list(map(int, input().split()))\n        x = Ma * bi - Mb * ai  # \u03a3ai:\u03a3bi=Ma:Mb<->Ma*\u03a3bi-Mb*\u03a3ai=0\n\n        for k in range(-MX, MX + 1):\n            dp[j][k] = dp[i][k]\n        dp[j][x] = min(dp[j][x], ci)\n\n        for k in range(-MX + x, MX + 1):\n            dp[j][k] = min(\n                dp[j][k],\n                dp[i][k - x] + ci\n            )\n        i, j = j, i\n\n    res = dp[i][0]\n    print((-1 if res == INF else res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nINF = float('inf')\n\nn, ma, mb = map(int, sys.stdin.readline().split())\na, b, c = [], [], []\nfor _ in range(n):\n    ai, bi, ci = map(int, sys.stdin.readline().split())\n    a.append(ai); b.append(bi); c.append(ci)\n\ndef main():\n    sa = sum(a)\n    sb = sum(b)\n    res = [[[INF] * (sb + 1) for _ in range(sa + 1)] for _ in range(n + 1)]\n    res[0][0][0] = 0\n    for i in range(n):\n        for j in range(sa + 1):\n            for k in range(sb + 1):\n                if j >= a[i] and k >= b[i]:\n                    res[i+1][j][k] = min(res[i][j-a[i]][k-b[i]] + c[i], res[i][j][k])\n                else:\n                    res[i+1][j][k] = res[i][j][k]\n    ans = INF\n    for i in range(1, min(sa//ma, sb//mb)+1):\n        ans = min(ans, res[n][ma * i][mb * i])\n    \n    if ans == INF:\n        return -1\n    else:\n        return ans\n\ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "# A,B\u305d\u308c\u305e\u308c\u306e\u6700\u5927\u5024\u306f40 * 10\u3067\u3042\u308b\n# dp[i][j] = A\u304ci\u30b0\u30e9\u30e0\u3001B\u304cj\u30b0\u30e9\u30e0\u542b\u307e\u308c\u305f\u85ac\u54c1\u306e\u6700\u5c0f\u30b3\u30b9\u30c8\n\nimport sys\nreadline = sys.stdin.readline\n\nN,Ma,Mb = map(int,readline().split())\nINF = 10 ** 10\ndp = [[INF] * (401) for i in range(401)]\ndp[0][0] = 0\n\nfor _ in range(N):\n  a,b,c = map(int,readline().split())\n  for i in range(len(dp) - 1, -1, -1):\n    for j in range(len(dp[i]) - 1, -1, -1):\n      if dp[i][j] == INF:\n        continue\n      if dp[i + a][j + b] > dp[i][j] + c:\n        dp[i + a][j + b] = dp[i][j] + c\n\nans = INF\nimport math\nfor i in range(1, len(dp)):\n  for j in range(1, len(dp)):\n    g = math.gcd(i,j)\n    if i // g == Ma and j // g == Mb:\n      if ans > dp[i][j]:\n        ans = dp[i][j]\n      \nif ans == INF:\n  print(-1)\nelse:\n  print(ans)", "#masoy\u3055\u3093\u306e\u30b3\u30fc\u30c9\n\nimport numpy as np\n\nN, Ma, Mb = list(map(int, input().split()))\nU = N * 10\n\ndp = np.zeros((U + 1, U + 1), dtype = np.int64)\ntemp = np.zeros_like(dp)\n\nINF = 10 ** 18\ndp += INF\ndp[0, 0] = 0\n\nfor _ in range(N):\n    a, b, c = list(map(int, input().split()))\n    temp[:] = dp.copy()\n    temp[a:, b:] = np.minimum(temp[a:, b:], dp[:-a, :-b] + c)\n    dp = temp #\u6bce\u56de\u3001\u4e00\u3064\u524d\u306e\u7d50\u679c\u3092\u6b8b\u3059\n\nanswer = INF\nfor t in range(1, 401):\n    a = Ma * t\n    b = Mb * t\n    if max(a, b) >= U: #\u5230\u9054\u3067\u304d\u306a\u3044\u91cf\u306b\u9054\u3057\u305f\u3089\u7d42\u4e86\n        break\n    answer = min(answer, dp[a, b])\n\nif answer == INF:\n    answer = -1\n\nprint (answer)\n", "N, Ma, Mb = map(int, input().split(' '))\nmed = []\nfor _ in range(N):\n    med.append(tuple(map(int, input().split(' '))))\ninf = 10 ** 9 + 7\n\ndp = [[inf for _ in range(401)] for _ in range(401)]\ndp[0][0] = 0\n\nfor k in range(N):\n    (a, b, c) = med[k]\n    for i in range(400, -1, -1):\n        for j in range(400, -1, -1):\n            if dp[i][j] != inf:\n                dp[i + a][j + b] = min(dp[i + a][j + b], dp[i][j] + c)\n\nans = inf\nfor i in range(401):\n    for j in range(401):\n        if i == 0 or j == 0:\n            continue\n        if i * Mb == j * Ma:\n            ans = min(ans, dp[i][j])\nprint(ans if ans != inf else -1)", "def main():\n\n    N, Ma, Mb = map(int, input().split())\n    drug = []\n    for _ in range(N):\n        a, b, c = map(int, input().split())\n        drug.append([a, b, c])\n\n    cur = dict()\n    cur[(0, 0)] = 0\n    for i in range(N):\n        temp = cur.copy()\n        for p in cur:\n            a, b = p[0]+drug[i][0], p[1]+drug[i][1]\n\n            if (a, b) not in temp:\n                temp[(a, b)] = cur[p] + drug[i][2]\n            else:\n                temp[(a, b)] = min(temp[(a, b)], cur[p]+drug[i][2])\n        cur = temp\n\n    # print(cur)\n    min_c = float('inf')\n    for p in cur:\n        if p != (0, 0) and p[0]*Mb == p[1]*Ma:\n            min_c = min(min_c, cur[p])\n    if min_c == float('inf'):\n        return -1\n    else:\n        return min_c\n\ndef __starting_point():\n    print(main())\n__starting_point()", "import copy\n\nN, Ma, Mb = list(map(int, input().split()))\nABC = [tuple(map(int, input().split())) for _ in range(N)]\n\nINF, W = 10 ** 10, N * 10 * max(Ma, Mb)\ndp = [[INF] * (W * 2 + 1)]\n\nfor a, b, c in ABC:\n    dp.append(copy.deepcopy(dp[-1]))\n    df = a * Mb - b * Ma\n    dp[-1][df + W] = min(dp[-1][df + W], c)\n    for d in range(-W, W + 1):\n        if not dp[-2][d] == INF:\n            dp[-1][df + d] = min(c + dp[-2][d], dp[-2][df + d], dp[-1][df + d])\n\nprint((\"-1\" if dp[N][W] == INF else dp[N][W]))\n", "n,ma,mb=list(map(int,input().split()))\nabc=[list(map(int,input().split())) for _ in range(n)]\nimport numpy as np\ndp=np.full((401,401),4001,int)\ndp[0,0]=0\nfor a,b,c in abc:\n  dp[a:,b:]=np.minimum(dp[a:,b:],dp[:-a,:-b]+c)\nma_,mb_=ma,mb\nans=4001\nwhile max(ma_,mb_)<401:\n  ans=min(ans,dp[ma_,mb_])\n  ma_+=ma\n  mb_+=mb\nprint((ans if ans<4001 else -1))\n", "n,ma,mb=list(map(int,input().split()))\nel=[list(map(int,input().split())) for i in range(n)]\nsa=sum(i[0] for i in el)\nsb=sum(i[1] for i in el)\n#mi=min(sa//ma,sb//mb)\ninf=10000000000\nx=[[inf for j in range(sb+1)] for i in range(sa+1)]\nx[0][0]=0\nfor i in range(n):\n    now=el[i]\n    x_sub=[[0 for j in range(sb+1)] for i in range(sa+1)]\n    for k in range(sa+1):\n        for l in range(sb+1):\n            if x[k][l]!=inf and k+now[0]<sa+1 and l+now[1]<sb+1:\n                x_sub[k+now[0]][l+now[1]]=x[k][l]+now[2]\n    for k in range(sa+1):\n        for l in range(sb+1):\n                if x_sub[k][l]!=0:\n                    x[k][l]=min(x[k][l],x_sub[k][l])\nmi=min(sa//ma,sb//mb)\nans=inf\nfor i in range(1,mi+1):\n    ans=min(ans,x[ma*i][mb*i])\nif ans==inf:\n    print((-1))\nelse:\n    print(ans)\n", "n, ma, mb = [int(i) for i in input().split()]\n\n# a,b,c\u3092\u5165\u529b\nlst = [[int(i) for i in input().split()] for _ in range(n)]\n\n# \u30b3\u30b9\u30c8\u306e\u5c0f\u3055\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\u308b\nlst.sort(key=lambda x: x[2])\n#print(lst)\n\ndic = {}\n#####\n# \u52d5\u7684\u8a08\u753b\u6cd5\n\n# \u5024\u306e\u66f4\u65b0\ndef push(k,v):\n    if k in dic:\n        dic[k] = min(dic[k],v)\n    else:\n        dic[k] = v\n\nfor i in lst:\n    # v = i[2]: \u30b3\u30b9\u30c8\n    k, v = i[0] * mb - i[1] * ma, i[2]\n    l = [[j, dic[j]] for j in dic]\n    #print(l)\n    for item in l:\n        push(item[0] + k, item[1] + v)\n    push(k, v)\n\n#####\nprint((dic[0] if 0 in dic else '-1'))\n", "def main():\n    n, ma, mb = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    dp = [{} for _ in range(n+1)]\n    dp[0][(0, 0)] = 0\n    for i in range(n):\n        for ky in dp[i].keys():\n            if ky in dp[i+1]:\n                if dp[i+1][ky] > dp[i][ky]:\n                    dp[i+1][ky] = dp[i][ky]\n            else:\n                dp[i+1][ky] = dp[i][ky]\n            t = (ky[0]+arr[i][0], ky[1]+arr[i][1])\n            if t in dp[i+1]:\n                if dp[i+1][t] > dp[i][ky]+arr[i][2]:\n                    dp[i+1][t] = dp[i][ky]+arr[i][2]\n            else:\n                dp[i+1][t] = dp[i][ky]+arr[i][2]\n    ans = float(\"inf\")\n    for i in range(1, 41):\n        t = (ma*i, mb*i)\n        if t in dp[n]:\n            if ans > dp[n][t]:\n                ans = dp[n][t]\n    if ans == float(\"inf\"):\n        print(\"-1\")\n    else:\n        print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import copy\nn, ma, mb = map(int, input().split())\na, b, c = [0]*n, [0]*n, [0]*n\nfor i in range(n):\n    a[i], b[i], c[i] = map(int, input().split())\n   \ndp = [[float('inf')] * (sum(b)+1) for _ in range(sum(a)+1)]\ndp[0][0] = 0\nstep = set([(0, 0)])\n\nfor i in range(n):\n    ai, bi = a[i], b[i]\n\n    s = step.copy()\n    tempdp = copy.deepcopy(dp)\n    for si in s: \n        if dp[si[0]+ai][si[1]+bi] > dp[si[0]][si[1]] + c[i]:\n            tempdp[si[0]+ai][si[1]+bi] = dp[si[0]][si[1]] + c[i]\n            step.add((si[0]+ai, si[1]+bi))\n        \n    dp = tempdp[:]\n#28 20\n\nans = float('inf')\nfor i in range(1, min(sum(a)//ma, sum(b)//mb)+1):\n    ans = min(ans, dp[ma*i][mb*i])\n    \nif ans == float('inf'): print(-1)\nelse : print(ans)", "import numpy as np\n\nn,ma,mb=map(int,input().split())\nL=10*n\n\ndp=np.zeros((L+1,L+1),dtype=\"int64\")\ndq=np.zeros((L+1,L+1),dtype=\"int64\")\n\ninf=10**18\ndp+=inf\ndp[0][0]=0\n\nfor i in range(n):\n    a,b,c=map(int,input().split())\n    dq=dp.copy()\n    dq[a:,b:]=np.minimum(dq[a:,b:],dp[:-a,:-b]+c)\n    dp=dq\n    \nans=inf\nfor i in range(1,401):\n    if ma*i > L or mb*i > L:\n        break\n    ans=min(ans,dp[ma*i][mb*i])\nif ans==inf:\n    print(-1)\nelse:\n    print(ans)", "N, Ma, Mb = list(map(int, input().split()))\nD = [tuple(map(int, input().split())) for _ in range(N)]\n\ndef listup(L, D):\n    for a, b, c in D:\n        for (ka, kb), kc in L.copy().items():\n            key = (ka+a, kb+b)\n            L[key] = min(L[key], kc+c) if key in L else kc+c\n        \n\nL1 = {(0,0):0}\nL2 = {(0,0):0}\nlistup(L1, D[:N//2])\nlistup(L2, D[N//2:])\n\nans = 10**9\nfor m in range(1,401):\n    ma = Ma * m\n    mb = Mb * m\n    if ma>400 or mb>400: break\n    for key1 in L1:\n        ta1, tb1 = key1\n        ta2 = ma - ta1\n        tb2 = mb - tb1\n        key2 = (ta2, tb2)\n        if key2 in L2: ans = min(ans, L1[key1]+L2[key2])\n\nprint(ans if ans!=10**9 else -1)", "n,ma,mb=list(map(int,input().split()))\nabc=[]\nfor i in range(n):\n    abc.append([int(j) for j in input().split()])\nfrom operator import itemgetter\nabc.sort(key=itemgetter(2))\n\ndp=[[10**18 for i in range(401)]for j in range(401)]\ndp[0][0]=0\n\np,q=0,0\nfor a,b,c in abc:\n    for j in reversed(list(range(q+1))):\n        for i in range(p+1):\n            if dp[i][j]==10**18:\n                continue\n            else:\n                dp[i+a][j+b]=min(dp[i+a][j+b],dp[i][j]+c)\n    p+=a\n    q+=b\n\nans=1145141919\ni=1\nwhile ma*i<401 and mb*i<401:\n    ans=min(ans,dp[ma*i][mb*i])\n    i+=1\nif ans==1145141919:\n    print((-1))\nelse:\n    print(ans)\n\n\n\n", "N,Ma,Mb=map(int, input().split())\nA = []\nB = []\nC = []\nfor i in range(N):\n  a,b,c=map(int, input().split())\n  A.append(a)\n  B.append(b)\n  C.append(c)\nsa = sum(A)\nsb = sum(B)\n\ndp = [[[10000]*(sb+1) for _ in range(sa+1)] for _ in range(N+1)]\ndp[0][0][0] = 0\n\nta = 0\ntb = 0\nfor i in range(N):\n  a = A[i]\n  b = B[i]\n  for j in range(sa):\n    for k in range(sb):\n      if j - a >= 0 and k - b >= 0:\n        dp[i+1][j][k] = min(dp[i][j-a][k-b]+C[i], dp[i][j][k])\n      else:\n        dp[i+1][j][k] = min(dp[i+1][j][k], dp[i][j][k])\n\nans = 10000\nfor i in range(1, sa+1):\n  for j in range(1, sb+1):\n    if Ma * j == Mb * i:\n      ans = min(ans, dp[N][i][j])\nif ans == 10000:\n  ans = -1\nprint(ans)", "import numpy as np\nN, ma, mb = list(map(int, input().split()))\nabc = tuple(list(map(int, input().split())) for _ in range(N))\n\ninf = 10000\ndp = np.full((401, 401), inf, dtype=int)\ndp[0][0] = 0\n\nfor a, b, c in abc:\n    for i in range(400, a - 1, -1):\n        dp[i][b:] = np.minimum(dp[i][b:], dp[i - a][: - b] + c)\n\nans = inf\nx = 1\n\nwhile True:\n    Ma = x * ma\n    Mb = x * mb\n    if Ma > 400 or Mb > 400:\n        break\n    ans = min(ans, dp[Ma][Mb])\n    x += 1\n\nans = -1 if ans >= inf else ans\nprint(ans)\n", "import sys\n\nread = sys.stdin.readline\nN, Ma, Mb = list(map(int, read().split()))\nabc = [tuple(map(int, read().split())) for _ in range(N)]\nd = [(Mb * a - Ma * b, c) for a, b, c in abc]\ndic = dict()\nfor i, j in d:\n    for key, value in tuple(dic.items()):\n        n = key + i\n        if dic.get(n):\n            dic[n] = min(value + j, dic[n])\n        else:\n            dic[n] = value + j\n    if dic.get(i):\n        dic[i] = min(j, dic[i])\n    else:\n        dic[i] = j\n\nif dic.get(0):\n    print((dic[0]))\nelse:\n    print((-1))\n", "from collections import defaultdict\n\nN, Ma, Mb = list(map(int, input().split()))\nM = [tuple(map(int, input().split())) for _ in range(N)]\n\nd = defaultdict(lambda: float('inf'))\nd[(0, 0)] = 0\nfor a, b, c in M:\n    new_d = d.copy()\n    for key_a, key_b in d:\n        new_d[(a + key_a, b + key_b)] = min(new_d[(a + key_a, b + key_b)],\n                                            d[(key_a, key_b)] + c)\n    d = new_d\n\nans = float('inf')\nfor i in range(1, 401 // max(Ma, Mb)):\n    ans = min(ans, d[(Ma * i, Mb * i)])\nprint((ans if ans != float('inf') else -1))\n", "# A,B\u305d\u308c\u305e\u308c\u306e\u6700\u5927\u5024\u306f40 * 10\u3067\u3042\u308b\n# dp[i][j] = A\u304ci\u30b0\u30e9\u30e0\u3001B\u304cj\u30b0\u30e9\u30e0\u542b\u307e\u308c\u305f\u85ac\u54c1\u306e\u6700\u5c0f\u30b3\u30b9\u30c8\n\nimport sys\nreadline = sys.stdin.readline\n\nN,Ma,Mb = map(int,readline().split())\nINF = 10 ** 10\ndp = [[INF] * (401) for i in range(401)]\ndp[0][0] = 0\n\nfor _ in range(N):\n  a,b,c = map(int,readline().split())\n  for i in range(len(dp) - 1, -1, -1):\n    for j in range(len(dp[i]) - 1, -1, -1):\n      if dp[i][j] == INF:\n        continue\n      dp[i + a][j + b] = min(dp[i + a][j + b], dp[i][j] + c)\n\nans = INF\nimport math\nfor i in range(1, len(dp)):\n  for j in range(1, len(dp)):\n    g = math.gcd(i,j)\n    if i // g == Ma and j // g == Mb:\n      if ans > dp[i][j]:\n        ans = dp[i][j]\n      \nif ans == INF:\n  print(-1)\nelse:\n  print(ans)", "N,A,B = map(int,input().split())\nX = [1<<20]*4040\n\nfor n in range(N):\n  a,b,c = map(int,input().split())\n  t = A*b-B*a\n  X = [min(X[m],(0 if (m-t)%4040==0 else X[(m-t)%4040])+c) for m in range(4040)]\n\nif 1<<18<X[0]:\n  print(-1)\nelse:\n  print(X[0])", "N,Ma,Mb = list(map(int,input().split()))\n\nINF = 10000\n\ndp = [[INF for b in range(401)] for a in range(401)]\n\ndp[0][0] = 0\n\nsum_a = 0\nsum_b = 0\n\nfor i in range(1,N+1):\n    ai,bi,ci = list(map(int,input().split()))\n    sum_a += ai\n    sum_b += bi\n    for a in range(sum_a+1,-1,-1):\n        for b in range(sum_b+1,-1,-1):\n            if a-ai >= 0 and b-bi >= 0:\n                dp[a][b] = min(dp[a][b],dp[a-ai][b-bi]+ci)\n\n\nans = INF\nfor j in range(1,401):\n    if Ma*j > 400 or Mb*j > 400:\n        break\n    ans = min(ans,dp[Ma*j][Mb*j])\nprint((ans if ans != INF else -1))\n", "def main():\n\tn, ma, mb, *L = map(int, open(0).read().split())\n\tM = 1<<30\n\tdp = [[M] * 420 for _ in range(420)]\n\tdp[0][0] = 0\n\tfor a, b, c in zip(*[iter(L)] * 3):\n\t\tfor i in range(400, -1, -1):\n\t\t\tfor j in range(400, -1, -1):\n\t\t\t\tt = dp[i][j] + c\n\t\t\t\tif dp[i + a][j + b] > t:\n\t\t\t\t\tdp[i + a][j + b] = t\n\tans = M\n\t_ma, _mb = ma, mb\n\twhile _ma < 410 > _mb:\n\t\tans = min(ans, dp[_ma][_mb])\n\t\t_ma += ma\n\t\t_mb += mb\n\tprint(ans if ans < M else -1)\n\ndef __starting_point():\n\tmain()\n__starting_point()", "N, Ma, Mb = list(map(int, input().split()))\nABC = [tuple(map(int, input().split())) for _ in range(N)]\nABC.sort(key=lambda x: x[2])\n\ndp = [[(0, 0, [-1])]]\n\nfor p in range(1, N * 100 + 1):\n    tmp = []\n    for i, (a, b, c) in enumerate(ABC):\n        if p - c >= 0:\n            for ta, tb, ti in dp[p - c]:\n                if ti[-1] < i:\n                    if (a + ta) * Mb == (b + tb) * Ma:\n                        print(p)\n                        return\n                    tmp.append((a + ta, b + tb, ti + [i]))\n    dp.append(tmp)\n\nprint(\"-1\")\n", "N, Ma, Mb = list(map(int, input().split()))\nL = []\nsum_a = 0\nsum_b = 0\nfor _ in range(N):\n    a, b, c = list(map(int, input().split()))\n    sum_a += a\n    sum_b += b\n    L.append((a, b, c))\n\ninf = 10 ** 9 + 7\ndp = [[[inf] * (sum_b + 1) for _ in range(sum_a + 1)] for _ in range(N + 1)]\n\ndp[0][0][0] = 0\nfor i in range(N):\n    for a in range(sum_a + 1):\n        for b in range(sum_b + 1):\n            if 0 <= a - L[i][0] and 0 <= b - L[i][1]:\n                # print(a, b, L[i])\n                dp[i + 1][a][b] = min(dp[i][a - L[i][0]]\n                                      [b - L[i][1]] + L[i][2], dp[i][a][b])\n            else:\n                dp[i + 1][a][b] = dp[i][a][b]\n\nmin_cost = inf\nfor a in range(sum_a + 1):\n    for b in range(sum_b + 1):\n        if a * Mb == b * Ma and dp[N][a][b] != 0:\n            # print(a, b, dp[N][a][b])\n            min_cost = min(dp[N][a][b], min_cost)\n\nprint((min_cost if min_cost != inf else -1))\n", "INF = float('inf')\nn, ma, mb = list(map(int, input().split()))\nt = [[INF] * 401 for _ in range(401)]\nt[0][0] = 0\nfor _ in range(n):\n  a, b, c = list(map(int, input().split()))\n  for aa in range(400, -1, -1):\n    for bb in range(400, -1, -1):\n      if t[aa][bb] == INF:\n        continue\n      if t[a + aa][b + bb] > t[aa][bb] + c:\n        t[a + aa][b + bb] = t[aa][bb] + c\nresult = INF\nfor a in range(400, 0, -1):\n  for b in range(400, 0, -1):\n    if a * mb == b * ma and t[a][b] < result:\n      result = t[a][b]\nif result == INF:\n  result = -1\nprint(result)\n", "n,ma,mb = map(int,input().split())\nmed = [tuple(map(int,input().split())) for _ in range(n)]\nmaa = sum(x[0] for x in med)\nmab = sum(x[1] for x in med)\ndp = [[10**6]*(mab+1) for _ in range(maa+1)]\ndp[0][0] = 0\nfor a,b,c in med:\n  for i in range(maa,a-1,-1):\n    for j in range(mab,b-1,-1):\n      if dp[i][j] > dp[i-a][j-b] + c:\n        dp[i][j] = dp[i-a][j-b] + c\nmi = min(dp[ma*i][mb*i] for i in range(1,min(maa//ma,mab//mb)+1))\nif mi > 10**5:\n  mi = -1\nprint(mi)", "N,MA,MB = map(int,input().split())\nABC = [tuple(map(int,input().split())) for i in range(N)]\n\nfrom collections import defaultdict\nfrom copy import copy\nd = defaultdict(lambda: float('inf'))\nd[(0,0)] = 0\nfor a,b,c in ABC:\n    d2 = copy(d)\n    for (pa,pb),pc in d.items():\n        d2[(pa+a, pb+b)] = min(d2[(pa+a, pb+b)], pc+c)\n    d = d2\n\nans = float('inf')\nfor (a,b),c in d.items():\n    if a==b==0: continue\n    if a*MB == b*MA:\n        ans = min(ans, c)\nprint(-1 if ans==float('inf') else ans)", "N, Ma, Mb = list(map(int, input().split()))\nabc = [list(map(int, input().split())) for _ in range(N)]\n\nan = 0\nbn = 0\nfor a, b, c in abc:\n  an += a\n  bn += b\n\nma = max(an, bn) + 1\n\nDP = [[10 ** 10] * ma for _ in range(ma)]\n\nfor i in range(N):\n  a, b, c = abc[i]\n  for j in range(ma - 1, -1, -1):\n    for k in range(ma - 1, -1, -1):\n      if j == 0 and k == 0:\n        DP[a][b] = min(DP[a][b], c)\n        continue\n      if DP[j][k] == 10 ** 10: continue\n      if j + a >= ma or k + b >= ma: continue\n      DP[j + a][k + b] = min(DP[j + a][k + b], DP[j][k] + c)\n\nans = 10 ** 10\na, b = Ma, Mb\nwhile a < ma and b < ma:\n  ans = min(ans, DP[a][b])\n  a += Ma\n  b += Mb\n\nif ans == 10 ** 10:\n  print((-1))\nelse:\n  print(ans)\n", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef main():\n    n,ma,mb=MI()\n    inf=10**9\n    abc=[LI() for _ in range(n)]\n    dp=[[[inf]*(n*10+1) for _ in range(10*n+1)] for _ in range(n+1)]\n    dp[0][0][0]=0\n    for i,(a,b,c) in enumerate(abc):\n        for j in range(n*10+1):\n            for k in range(n*10+1):\n                pre=dp[i][j][k]\n                if pre==inf:continue\n                dp[i+1][j][k]=min(dp[i+1][j][k],pre)\n                dp[i+1][j+a][k+b]=min(dp[i+1][j+a][k+b],pre+c)\n    ans=inf\n    for i in range(1,105):\n        a=i*ma\n        b=i*mb\n        if a>n*10 or b>n*10:break\n        ans=min(ans,dp[n][a][b])\n    if ans==inf:print(-1)\n    else:print(ans)\n\nmain()", "import sys\nimport numpy as np\n\nI = np.array(sys.stdin.read().split(), dtype=np.int64)\nn, ma, mb = I[:3]\nabc = I[3:].reshape(n, 3)\n\ndef main():\n    sa, sb = np.sum(abc, axis=0)[:2]\n    res = np.full((sa+1, sb+1), np.inf)\n    res[0, 0] = 0\n\n    for a, b, c in abc:\n        res[a:, b:] = np.minimum(res[a:, b:], res[:-a, :-b] + c)\n    \n    a = np.arange(ma, sa+1, ma)\n    b = np.arange(mb, sb+1, mb)\n    lim = min(sa//ma, sb//mb)\n    ans = np.amin(res[a[:lim], b[:lim]])\n    \n    if ans == np.inf:\n        return -1\n    return int(ans)\n\ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "n,ma,mb=list(map(int,input().split()))\nel=[list(map(int,input().split())) for i in range(n)]\nsa=sum(i[0] for i in el)\nsb=sum(i[1] for i in el)\nsa1=sa+1\nsb1=sb+1\n\ninf=10000000000\nx=[[inf]*(sb1) for i in range(sa1)]\nx[0][0]=0\nfor i in range(n):\n    now=el[i]\n    x_sub=[[0]*(sb1) for i in range(sa1)]\n    for k in range(sa1):\n        for l in range(sb1):\n            if x[k][l]!=inf:\n                if k+now[0]<sa1:\n                    if l+now[1]<sb1:\n                        x_sub[k+now[0]][l+now[1]]=x[k][l]+now[2]\n    for k in range(sa1):\n        for l in range(sb1):\n                if x_sub[k][l]!=0:\n                    x[k][l]=min(x[k][l],x_sub[k][l])\nmi=min(sa//ma,sb//mb)\nans=inf\nfor i in range(1,mi+1):\n    ans=min(ans,x[ma*i][mb*i])\nif ans==inf:\n    print((-1))\nelse:\n    print(ans)\n", "N, Ma, Mb = map(int, input().split())\nABC = [tuple(map(int, input().split())) for _ in range(N)]\nINF = float(\"inf\")\nDP = [[[INF] * (11*N+1) for _ in range(11*N+1)] for _ in range(N+1)]\nDP[0][0][0] = 0\nfor i, (a, b, c) in enumerate(ABC):\n    for j in range(10*N+1):\n        for k in range(10*N+1):\n            if DP[i][j][k] == INF: continue\n            DP[i+1][j][k] = min(DP[i+1][j][k], DP[i][j][k])\n            DP[i+1][j+a][k+b] = min(DP[i+1][j+a][k+b], DP[i][j][k] + c)\nans = INF\nfor j in range(1,10*N+1):\n    for k in range(1,10*N+1):\n        if Ma * k == Mb * j:\n            ans = min(ans, DP[N][j][k])\nif ans == INF:\n    ans = -1\nprint(ans)", "INF = float(\"inf\")\n\nN, Ma, Mb, *ABC = map(int, open(0).read().split())\n\nM = 160010\n\ndp = [0] + [INF] * M\nfor a, b, c in zip(*[iter(ABC)] * 3):\n    T = dp[:]\n    p = 401 * a + b\n    for i, dpi in enumerate(dp):\n        j = p + i\n        if j > M:\n            break\n        if T[j] > dpi + c:\n            T[j] = dpi + c\n    dp = T\n\nans = INF\nfor i in range(1, M):\n    a, b = divmod(i, 401)\n    if Ma * b == Mb * a and ans > dp[i]:\n        ans = dp[i]\n\nprint(-1 if ans == INF else ans)", "N, Ma, Mb = list(map(int, input().split()))\n\nsum_a = 0\nsum_b = 0\nA = []\nB = []\nC = []\nfor _ in range(N):\n    a, b, c = list(map(int, input().split()))\n    sum_a += a\n    sum_b += b\n    A.append(a)\n    B.append(b)\n    C.append(c)\n\ninf = 10 ** 9 + 7\n# 3\u6b21\u5143dp\u3092\u8003\u3048\u308b\ndp = [[[inf] * (sum_b + 1) for _ in range(sum_a + 1)] for _ in range(N + 1)]\n\ndp[0][0][0] = 0\nfor i in range(N):\n    for sa in range(sum_a):\n        for sb in range(sum_b):\n            if sa - A[i] >= 0 and sb - B[i] >= 0:\n                dp[i + 1][sa][sb] = min(dp[i][sa - A[i]]\n                                        [sb - B[i]] + C[i], dp[i][sa][sb])\n            else:\n                dp[i + 1][sa][sb] = min(dp[i][sa][sb], dp[i + 1][sa][sb])\n\nans = inf\nfor i in range(1, sum_a + 1):\n    for j in range(1, sum_b + 1):\n        if Ma * j == Mb * i:\n            ans = min(ans, dp[N][i][j])\n\nprint((ans if ans != inf else -1))\n", "N,ma,mb=map(int,(input().split()))\na,b,c=[0]*N,[0]*N,[0]*N\nfor i in range(N):\n    a[i],b[i],c[i]=map(int,input().split())\n\nMA=sum(a)\nMB=sum(b)\ndp=[[[float(\"inf\") for i in range(MB+1)] for j in range(MA+1)] for k in range(N+1)]\ndp[0][0][0]=0\nfor i in range(N):\n    for j in range(MA):\n        for k in range(MB):\n            if dp[i][j][k]==float(\"inf\"):\n                continue\n            dp[i+1][j][k]=min(dp[i+1][j][k],dp[i][j][k])\n            dp[i+1][j+a[i]][k+b[i]]=min(dp[i+1][j+a[i]][k+b[i]],dp[i][j][k]+c[i])\n\nans=float(\"inf\")\nfor i in range(1,MA+1):\n    for j in range(1,MB+1):\n        if i*mb==j*ma:\n            ans=min(ans,dp[N][i][j])\n\nif ans==float(\"inf\"):\n    print(-1)\nelse:\n    print(ans)", "n, ma, mb = list(map(int, input().split()))\nr = [0] * n\nc = [0] * n\nfor i in range(n):\n  a, b, c[i] = list(map(int, input().split()))\n  r[i] = a * mb - b * ma\ndp = [[10 ** 9] * 4001 for i in range(n + 1)]\nfor i in range(n):\n  for j in range(4001):\n    dp[i+1][j] = min(dp[i+1][j], dp[i][j])\n    if j == 2000:\n      dp[i+1][j+r[i]] = min(dp[i+1][j+r[i]], c[i])\n    if 0 <= j + r[i] <= 4000:\n      dp[i+1][j+r[i]] = min(dp[i+1][j+r[i]], dp[i][j] + c[i])\nif dp[n][2000] < 10 ** 9:\n  print((dp[n][2000]))\nelse:\n  print((-1))\n", "N,Ma,Mb=map(int,input().split())\na=[0 for k in range(N)]\nb=[0 for k in range(N)]\nc=[0 for k in range(N)]\nimport copy\nfor k in range(N):\n    a[k],b[k],c[k]=map(int,input().split())\nSa=sum(a)\nSb=sum(b)\ndp =[[[5000 for k in range(Sb+1)]for k in range(Sa+1)]for k in range(N+1)]\ndp[0][0][0]=0\nfor k in range(N):\n    listj=[]\n    listl=[]\n    for j in range(Sa-a[k]+1):\n        for l in range(Sb-b[k]+1):\n            if dp[k][j][l]!=5000:\n                listj.append(j)\n                listl.append(l)\n    for m in range(len(listl)):\n        dp[k+1][listj[m]+a[k]][listl[m]+b[k]]=min(dp[k][listj[m]][listl[m]]+c[k], dp[k][listj[m]+a[k]][listl[m]+b[k]])\n        dp[k+1][listj[m]][listl[m]]=min(dp[k][listj[m]][listl[m]], dp[k+1][listj[m]][listl[m]])\nans=[5000]\nfor k in range(1, min(Sa//Ma,Sb//Mb)+1):\n    ans.append(dp[-1][Ma*k][Mb*k])\nif min(ans)==5000:\n    print(-1)\nelse:\n    print(min(ans))", "# import numpy as np\n# import math\n# import copy\n# from collections import deque\nimport sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10000)\n\n\ndef main():\n    N,Ma,Mb = list(map(int,input().split()))\n    abc = [list(map(int,input().split())) for i in range(N)]\n\n    INF = N * 100 + 1\n\n    dp = [[[INF for cb in range(411)] for ca in range(411)] for i in range(N+1)]\n    dp[0][0][0] = 0\n\n    for i in range(N):\n        for ca in range(N*10):\n            for cb in range(N*10):\n                if dp[i][ca][cb] == INF:\n                    continue\n                dp[i+1][ca][cb] = min(dp[i+1][ca][cb],dp[i][ca][cb])\n                d = abc[i]\n                dp[i+1][ca+d[0]][cb+d[1]] = min(dp[i+1][ca+d[0]][cb+d[1]],dp[i][ca][cb]+d[2])\n\n    res = INF\n\n    for ca in range(1,401):\n        for cb in range(1,401):\n            if ca * Mb == cb * Ma:\n                res = min(res,dp[N][ca][cb])\n\n    if res == INF:\n        res = -1\n\n    print(res)\n\n\n\nmain()\n", "def main():\n    N, Ma, Mb = map(int, input().split())\n    yakuhin = []\n    sa = 0\n    sb = 0\n    for i in range(N):\n        yakuhin.append(list(map(int, input().split())))\n        sa += yakuhin[i][0]\n        sb += yakuhin[i][1]\n    \n    INF = 10**15\n    DP = [[[INF for _ in range(sb+1)] for _ in range(sa+1)] for _ in range(N+1)]\n    \n    for i in range(N):\n        DP[i][0][0] = 0\n    \n    for i in range(N):\n        for j in range(sa+1):\n            for k in range(sb+1):\n                if(j >= yakuhin[i][0] and k >= yakuhin[i][1]):\n                    DP[i+1][j][k] = min(DP[i][j][k], DP[i][j-yakuhin[i][0]][k-yakuhin[i][1]]+yakuhin[i][2])\n                else:\n                    DP[i+1][j][k] = min(DP[i+1][j][k], DP[i][j][k])\n        \n    ans = INF\n    for i in range(1, N+1):\n        for j in range(1, sa+1):\n            for k in range(1, sb+1):\n                if(j*Mb == k*Ma):\n                    ans = min(ans, DP[i][j][k])    \n        \n    print(ans if ans != INF else -1)\n    \nmain()", "import sys\nimport numpy as np\nfrom collections import deque,defaultdict\n\ninp=lambda v,w:v[0]*w[0]+v[1]*w[1]\nisprop = lambda a,b: a[0]*b[1]==a[1]*b[0]\ncwsum = lambda l:[sum([x[0] for x in l]), sum([x[1] for x in l])]\nchmin = lambda a,b:(a,b)[b<a]\n# cwsum = lambda l:np.sum(l,axis=0)\n            \ndef main():\n    N,Ma,Mb=list(map(int,input().split()))\n    infty=10**9\n    ch=[list(map(int,input().split())) for _ in range(N)]\n    p=[(-1)*Mb,Ma]\n    # cand=[v[2] for v in ch if inp(p,v[:2])==0]\n    # if cand:\n        # m1=min(cand)\n    # else:\n        # m1=infty\n    # ncand=[v for v in ch if inp(p,v[:2])!=0] #p\u65b9\u5411\u3078\u306e\u5c04\u5f71\n    pch=[[inp(v[:2],p),v[2]] for v in ch]\n    X=N*max([abs(w[0]) for w in pch])\n    dp=[[infty]*(2*X+1) for _ in range(N)]\n    for i in range(N):\n        for j in range(2*X+1):\n            if i==0 and j==X+pch[0][0]:\n                dp[i][j]=pch[0][1]\n            elif i>0 and j==X+pch[i][0]:\n                dp[i][j]=chmin(dp[i-1][j],pch[i][1])\n            elif i>0 and j>=pch[i][0] and j<=2*X+pch[i][0]:\n                dp[i][j]=chmin(dp[i-1][j],dp[i-1][j-pch[i][0]]+pch[i][1])\n            elif i>0:\n                dp[i][j]=dp[i-1][j]\n    #  print(ch)\n    #  print(pch)\n    #  print(dp)\n    if dp[N-1][X]==infty:\n        print((-1))\n    else:\n        print((dp[N-1][X]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "INF = float('inf')\n\nN, Ma, Mb = list(map(int, input().split()))\n\ncmax = N * 10\nt = [[INF] * (cmax + 1) for _ in range(cmax + 1)]\nfor _ in range(N):\n    a, b, c = list(map(int, input().split()))\n    for aa in range(cmax, 0, -1):\n        for bb in range(cmax, 0, -1):\n            if t[aa][bb] == INF:\n                continue\n            t[aa + a][bb + b] = min(t[aa + a][bb + b], t[aa][bb] + c)\n    t[a][b] = min(t[a][b], c)\n\nresult = INF\nfor a in range(1, cmax):\n    for b in range(1, cmax):\n        if a * Mb == b * Ma:\n            result = min(result, t[a][b])\nif result == INF:\n    result = -1\nprint(result)\n", "N,Ma,Mb=list(map(int,input().split()))\nABC=[tuple(map(int,input().split())) for i in range(N)]\ninf=float(\"inf\")\nDP=[[inf]*401 for i in range(401)]\nDP[0][0]=0\nfor a,b,c in ABC:\n   for i in reversed(range(401)):\n      for j in reversed(range(401)):\n         if DP[i][j]!=inf:\n            DP[i+a][j+b]=min(DP[i][j]+c,DP[i+a][j+b])\nans=inf\nfor i in range(1,401):\n   for j in range(1,401):\n      if Ma*j==Mb*i:\n         ans=min(ans,DP[i][j])\nprint(-1 if ans==inf else ans)", "N,Ma,Mb = list(map(int,input().split()))\n\nINF = float('inf')\n\ndp = [[INF for b in range(401)] for a in range(401)]\n\ndp[0][0] = 0\n\nsa = 0\nsb = 0\n\nfor i in range(1,N+1):\n    ai,bi,ci = list(map(int,input().split()))\n    sa += ai\n    sb += bi\n    for a in range(sa+1,-1,-1):\n        for b in range(sb+1,-1,-1):\n            if a-ai >= 0 and b-bi >= 0:\n                dp[a][b] = min(dp[a][b],dp[a-ai][b-bi]+ci)\n\n\nans = INF\nfor j in range(1,401):\n    if Ma*j > 400 or Mb*j > 400:\n        break\n    ans = min(ans,dp[Ma*j][Mb*j])\nprint((ans if ans != INF else -1))\n\n", "n,ma,mb=list(map(int,input().split()))\nitem=[]\nfor i in range(n):\n  item.append(tuple(map(int,input().split())))\n\nd={(0,0):0}\nfor i in range(n):\n  nd={}\n  for j in d:\n    if j in nd:\n      nd[j]=min(nd[j],d[j])\n    else:\n      nd[j]=d[j]\n    s=(j[0]+item[i][0],j[1]+item[i][1])\n    if s in nd:\n      nd[s]=min(nd[s],d[j]+item[i][2])\n    else:\n      nd[s]=d[j]+item[i][2]\n  d=nd\nm=10**9\nfor i in d:\n  if i==(0,0):\n    continue\n  if i[0]*mb==i[1]*ma:\n    m=min(m,d[i])\nif m==10**9:\n  m=-1\n\nprint(m)", "INF = float('inf')\nn, ma, mb = list(map(int, input().split()))\nccmax = n * 10\nt = [[INF] * (ccmax + 1) for _ in range(ccmax + 1)]\nfor _ in range(n):\n  a, b, c = list(map(int, input().split()))\n  for aa in range(ccmax, 0, -1):\n    taa = t[aa]\n    for bb in range(ccmax, 0, -1):\n      if taa[bb] == INF:\n        continue\n      if t[a + aa][b + bb] > c + taa[bb]:\n        t[a + aa][b + bb] = c + taa[bb]\n  if t[a][b] > c:\n    t[a][b] = c\nresult = INF\nfor a in range(1, ccmax):\n  ta = t[a]\n  for b in range(1, ccmax):\n    if a * mb == b * ma and ta[b] < result:\n      result = ta[b]\nif result == INF:\n  result = -1\nprint(result)\n", "N, Ma, Mb = list(map(int, input().split()))\n\nINF = 10 ** 8\n\nlst = [[INF] * 401 for i in range(401)]\nlst[0][0] = 0\n\nfor _ in range(N):\n    a, b, c = list(map(int, input().split()))\n    for i in range(400, a - 1, -1):\n        for j in range(400, b - 1, -1):\n            if lst[i- a][j - b] == INF:\n                pass\n            else:\n                lst[i][j] = min(lst[i][j], lst[i - a][j - b] + c)\n\nans = INF\nn = 400 // max(Ma, Mb)\nfor i in range(1, n + 1):\n    ans = min(ans, lst[Ma * i][Mb * i])\n\nif ans == INF:\n    print((-1))\nelse:\n    print (ans)\n\n# for i in range(7):\n#     print (lst[i][:7])\n", "import sys\nimport numpy as np\n\nI = np.array(sys.stdin.read().split(), dtype=np.int64)\nn, ma, mb = I[:3]\nabc = I[3:].reshape(n, 3)\n\ndef main():\n    sa, sb = np.sum(abc, axis=0)[:2]\n    res = np.full((sa+1, sb+1), np.inf)\n    res[0, 0] = 0\n\n    for a, b, c in abc:\n        res[a:, b:] = np.minimum(res[a:, b:], res[:-a, :-b] + c)\n    \n    ans = np.inf\n    for i in range(1, min(sa//ma, sb//mb) + 1):\n        ans = np.minimum(ans, res[ma * i, mb * i])\n    \n    if ans == np.inf:\n        return -1\n    return int(ans)\n    \ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "import sys\nimport numpy as np\ninput = sys.stdin.readline\n\ndef main():\n    N, Ma, Mb = list(map(int, input().split()))\n\n    INF = int(1e6)\n    MAX = (N+1) * 10 + 1\n    dp = np.full((MAX, MAX), INF, dtype=np.int64)\n    tmp = np.zeros_like(dp)\n\n    dp[0][0] = 0\n    for i in range(N):\n        a, b, c = list(map(int, input().split()))\n        tmp = dp.copy()\n        tmp[a:, b:] = np.minimum(tmp[a:, b:], dp[:-a, :-b] + c)\n        dp = tmp\n    \n    ans = INF\n    a, b = Ma, Mb\n    while a < MAX and b < MAX:\n        ans = min(ans, dp[a][b])\n        a += Ma\n        b += Mb\n    \n    if ans == INF:\n        ans = -1\n    \n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "inf=10**10\nn,ma,mb=map(int,input().split())\nabc=[list(map(int,input().split())) for _ in range(n)]\nmemo=[[inf]*401 for _ in range(401)]\nmemo[0][0]=0\nfor a,b,c in abc:\n  for i in range(400,-1,-1):\n    for j in range(400,-1,-1):\n      if memo[i][j]!= inf :\n        memo[i+a][j+b]= min(memo[i+a][j+b], memo[i][j] + c)\n\n\nans=inf\nfor i in range(1,min(400//ma,400//mb)):\n  ans=min(ans, memo[ma*i][mb*i])\n\nif ans==inf:\n  print(-1)\nelse:\n  print(ans)", "N,Ma,Mb=map(int,(input().split()))\na,b,c=[0]*N,[0]*N,[0]*N\n\nfor i in range(N):\n  a[i],b[i],c[i]=map(int,input().split())\n\nMA=sum(a)\nMB=sum(b)\ndp=[[[float(\"inf\") for i in range(MB+1)] for j in range(MA+1)] for k in range(N+1)]\ndp[0][0][0]=0\nfor i in range(N):\n  for j in range(MA):\n    for k in range(MB):\n      if dp[i][j][k]==float(\"inf\"):\n        continue\n      dp[i+1][j][k]=min(dp[i+1][j][k],dp[i][j][k])\n      dp[i+1][j+a[i]][k+b[i]]=min(dp[i+1][j+a[i]][k+b[i]],dp[i][j][k]+c[i])\n\nans=float(\"inf\")\nfor i in range(1,MA+1):\n  for j in range(1,MB+1):\n    if i*Mb==j*Ma:\n      ans=min(ans,dp[N][i][j])\n\nif ans==float(\"inf\"):\n  print(-1)\nelse:\n  print(ans)", "import copy\n\nN, Ma, Mb = list(map(int, input().split()))\nABC = [tuple(map(int, input().split())) for _ in range(N)]\n\nINF, W = 10000, 10 * max(Ma, Mb) * N\ndp = [[INF] * (2 * W + 1)]\n\nfor a, b, c in ABC:\n    dp.append(copy.deepcopy(dp[-1]))\n    df = a * Mb - b * Ma\n    dp[-1][df] = min(dp[-1][df], c)\n    for d in range(-W, W + 1):\n        dp[-1][df + d] = min(dp[-1][df + d], c + dp[-2][d])\n\nprint((\"-1\" if dp[N][0] == INF else dp[N][0]))\n", "def main():\n    N, Ma, Mb = map(int, input().split())\n    yakuhin = []\n    for i in range(N):\n        yakuhin.append(list(map(int, input().split())))\n    \n    INF = 10**15\n    DP = [[[INF for _ in range(401)] for _ in range(401)] for _ in range(N+1)]\n    DP[0][0][0] = 0\n    \n    for i in range(N):\n        for j in range(401):\n            for k in range(401):\n                if(DP[i][j][k] != INF):\n                    DP[i+1][j][k] = min(DP[i+1][j][k], DP[i][j][k])\n                    DP[i+1][j+yakuhin[i][0]][k+yakuhin[i][1]] = min(DP[i+1][j+yakuhin[i][0]][k+yakuhin[i][1]], DP[i][j][k]+yakuhin[i][2])\n    \n    ans = INF\n    for i in range(1, N+1):\n        for j in range(1, 401):\n            for k in range(1, 401):\n                if(j*Mb == k*Ma):\n                    ans = min(ans, DP[i][j][k])    \n        \n    print(ans if ans != INF else -1)\n    \nmain()", "# Python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN,Ma,Mb = map(int,input().split())\nABC = [tuple(map(int,input().split())) for _ in range(N)]\n\n# dp[a][b] : A\u30bf\u30a4\u30d7\u304c ag, B\u30bf\u30a4\u30d7\u304c bg \u3068\u306a\u308b \u6700\u5c0f\u30b3\u30b9\u30c8\ninf = float(\"inf\")\ndp = [[inf for _ in range(401)] for _ in range(401)]\ndp[0][0] = 0\n\nfor a,b,c in ABC:\n    for i in range(400,-1,-1):\n        for j in range(400,-1,-1):\n            if dp[i][j] != inf:\n                # \u85ac\u54c1\u3092\u4f7f\u3063\u305f\u65b9\u304c\u5b89\u3051\u308c\u3070\u66f4\u65b0\u3059\u308b\n                dp[i+a][j+b] = min(dp[i+a][j+b], dp[i][j] + c)\n\nans = inf\nfor i in range(1,401):\n    for j in range(1,401):\n        # i : j == Ma : Mb \u306a\u3089 \u30b3\u30b9\u30c8\u3092\u66f4\u65b0\n        if i*Mb == j*Ma:\n            ans = min(ans, dp[i][j])\n\nprint(ans if ans != inf else -1)", "N,Ma,Mb = map(int,input().split())\nData = []\nfor _ in range(N):\n    a,b,c = map(int,input().split())\n    Data.append([a,b,c])\n\nDP = []\nfor _ in range(N+1):\n    temp = [[-1]*(N*10+1) for _ in range(N*10+1)]\n    DP.append(temp)\nDP[0][0][0] = 0\n\nfor i in range(1,N+1):\n    A,B,C = Data[i-1]\n    for a in range(0,N*10+1):\n        for b in range(0,N*10+1):\n            if DP[i-1][a][b] != -1:\n                # \u4f7f\u308f\u306a\u3044\n                if DP[i][a][b] == -1:\n                    DP[i][a][b] = DP[i-1][a][b]\n                else:\n                    DP[i][a][b] = min(DP[i][a][b],DP[i-1][a][b])\n\n                #\u4f7f\u3046\n                if DP[i][a+A][b+B] == -1:\n                    DP[i][a+A][b+B] = DP[i-1][a][b]+C\n                else:\n                    DP[i][a+A][b+B] = min(DP[i][a+A][b+B],DP[i-1][a][b]+C)\nans = -1\nfor a in range(1,N*10+1):\n    for b in range(1,N*10+1):\n        if DP[N][a][b] != -1 and a * Mb == b * Ma:\n            if ans == -1:\n                ans = DP[N][a][b]\n            else:\n                ans = min(ans,DP[N][a][b])\nprint(ans)", "import sys\n\n\n\nn, ma, mb = map(int, input().split())\nabc = []\n\nfor _ in range(n):\n    a, b, cost = map(int, input().split())\n    abc.append((a, b, cost))\n\ndef main():\n    sa = 0\n    sb = 0\n    for i in range(n):\n        sa += abc[i][0]\n        sb += abc[i][1]\n\n    res = [[float('infinity')] * (sb + 1) for _ in range(sa + 1)]\n    res[0][0] = 0\n\n    for a, b, c in abc:\n\n        for j in range(sa, -1, -1):\n            for k in range(sb, -1, -1):\n                if j >= a and k >= b:\n                    res[j][k] = min(res[j][k], res[j-a][k-b] + c)\n\n    ans = float('infinity')\n    for i in range(1, min(sa//ma, sb//mb) + 1):\n        ans = min(ans, res[ma*i][mb*i])\n\n    if ans == float('infinity'):\n        return -1\n    else:\n        return ans\n\ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "# https://atcoder.jp/contests/abc054/submissions/4360181\n\ndef main():\n    from collections import defaultdict\n\n    INF = 40 * 100 + 1\n\n    N, Ma, Mb = list(map(int, input().split()))\n\n    memo = defaultdict(lambda: INF)\n\n    for _ in range(N):\n        ai, bi, ci = list(map(int, input().split()))\n        x = Ma * bi - Mb * ai  # \u03a3ai:\u03a3bi=Ma:Mb<->Ma*\u03a3bi-Mb*\u03a3ai=0\n\n        for key, value in tuple(memo.items()):\n            memo[key + x] = min(\n                memo[key + x],\n                value + ci\n            )  # \u65e2\u5b58\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u6df7\u5408\n        memo[x] = min(memo[x], ci)  # \u65b0\u898f\u306e\u307f\n\n    print((memo[0] if 0 in memo else -1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, Ma, Mb = map(int, input().split())\n\nkusuri = []\ncusum = [0]*(N+1)\nfor i in range(N):\n  a, b, c = map(int, input().split())\n  sa = a*Mb - b*Ma\n  kusuri.append((sa, c))\n  cusum[i+1] = cusum[i] + c\n\ncall = cusum[-1]\ndp = [[call+1]*8001 for _ in range(41)]\ndp[0][4000] = 0\n\ncmin = call+1\nfor i, j in enumerate(kusuri):\n  d = j[0]\n  c = j[1]\n  for k in range(4000-100*i, 4000+100*i+1):\n    dp[i+1][k] = min(dp[i+1][k], dp[i][k])\n    if k + d == 4000:\n      cmin = min(cmin, dp[i][k]+c)\n    dp[i+1][k+d] = min(dp[i+1][k+d], dp[i][k]+c)\n    \n\nif cmin == call+1:\n  print(-1)\nelse:\n  print(cmin)", "import sys\n\nINF = float('inf')\n\nn, ma, mb = map(int, sys.stdin.readline().split())\nabc = map(int, sys.stdin.read().split())\nabc = list(zip(*[abc] * 3))\n\ndef main():\n    sa = 0\n    sb = 0\n    for i in range(n):\n        sa += abc[i][0]\n        sb += abc[i][1]\n\n    res = [[INF] * (sb + 1) for _ in range(sa + 1)]\n    res[0][0] = 0\n\n    for a, b, c in abc:\n\n        for j in range(sa, -1, -1):\n            for k in range(sb, -1, -1):\n                if j >= a and k >= b:\n                    res[j][k] = min(res[j][k], res[j-a][k-b] + c)\n\n    ans = INF\n    for i in range(1, min(sa//ma, sb//mb) + 1):\n        ans = min(ans, res[ma*i][mb*i])\n\n    if ans == INF:\n        return -1\n    else:\n        return ans\n\ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "n,ma,mb = map(int,input().split())\n\nINF = 10**4\ndp = [[[INF] * (n*10+1) for _ in range(n*10+1)] for _ in range(n+1)]\ndp[0][0][0] = 0\n\nfor i in range(n):\n    a,b,c = map(int,input().split())\n    for ai in range(i*10+11):\n        for bi in range(i*10+11):\n            if ai>=a and bi>=b:\n                tmp = dp[i][ai-a][bi-b] + c\n            else:\n                tmp = INF\n            dp[i+1][ai][bi] = min(dp[i][ai][bi], tmp)\n\nans = min(dp[n][ma*i][mb*i] for i in range(1,n*10//max(ma,mb)+1) )\nif ans == INF: ans = -1\n    \nprint(ans)", "import collections\nimport copy\nINF = 10000\n\n#\u5165\u529b\nN, Ma, Mb = map(int, input().split())\nmedichine = [tuple(map(int, input().split())) for _ in range(N)]\n\ndp = {}\n#dp\u521d\u671f\u5316\ndp = collections.defaultdict(lambda:INF)\ndp[0,0] = 0\n\nfor a, b, c in medichine:\n    dp_ = copy.copy(dp)\n    for ca,cb in dp.keys():\n        dp_[ca+a, cb+b] = min(dp_[ca+a, cb+b], dp[ca,cb]+c)\n    dp = dp_    \n\nans = INF\nfor ca,cb in dp.keys():\n    if ca == cb == 0: continue\n    if ca*Mb == cb*Ma:\n        ans = min(ans, dp[ca,cb])\n        \nprint(-1 if ans == INF else ans)", "import numpy as np\nn, ma, mb = map(int, input().split())\nr = 10 * n + 6\ninf = 10**5\ndp = np.full((n+1, r, r), inf)\ndp[0][0][0] = 0\nfor i in range(n):\n    a, b, c = map(int, input().split())\n    dp[i+1][a:, b:] = np.minimum(\n        dp[i][:r-a, :r-b] + c, dp[i][a:, b:]\n    )\n    dp[i+1] = np.minimum(dp[i+1], dp[i])\n\nans = inf\nx, y = 0, 0\nwhile True:\n    x += ma\n    y += mb\n    if x < r and y < r:\n        ans = min(ans, dp[n][x][y])\n    else:\n        break\nif ans == inf:\n    print(-1)\nelse:\n    print(int(ans))"]