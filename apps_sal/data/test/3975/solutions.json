["import sys\nn=int(input())\nf={\n 'AND':(lambda a:a[0]&a[1]),\n 'OR':(lambda a:a[0]|a[1]),\n 'XOR':(lambda a:a[0]^a[1]),\n 'NOT':(lambda a:a[0]^1),\n}\ng={'0':(lambda a:0), '1':(lambda a:1)}\nd=[(g[v[0]],[]) if o=='IN' else (f[o],[int(a)-1 for a in v]) for o,*v in map(str.split,sys.stdin.read().strip().split('\\n'))]\nt=[0]\nfor i in t:\n t.extend(d[i][1])\nv=[0 for _ in range(n)]\nfor i in t[::-1]:\n o,a=d[i]\n v[i]=o([v[x] for x in a])\nf=[0 for _ in range(n)]\nf[0]=1\nfor i in t:\n if f[i]<1: continue\n o,a=d[i]\n b=[v[x]for x in a]\n assert o(b)==v[i]\n for j,k in enumerate(a):\n  b[j]^=1\n  f[k]=(o(b)!=v[i])\n  b[j]^=1\nprint(''.join(str(f[i]^v[0]) for i in range(n) if not d[i][1]))", "import sys\nn=int(input())\nf={'AND':(lambda a,b:a&b),'OR':(lambda a,b:a|b),'XOR':(lambda a,b:a^b),'NOT':(lambda a:a^1)}\ng={'0':(lambda:0),'1':(lambda:1)}\nd=[(g[v[0]],[]) if o=='IN' else (f[o],[int(a)-1 for a in v]) for o,*v in map(str.split,sys.stdin.read().strip().split('\\n'))]\nt=[0]\nfor i in t:t.extend(d[i][1])\nv=[0]*n\nfor i in t[::-1]:v[i]=d[i][0](*(v[x] for x in d[i][1]))\nf=[0]*n\nf[0]=1\nfor i in t:\n if f[i]<1: continue\n o,a=d[i]\n b=[v[x]for x in a]\n assert o(*b)==v[i]\n for j,k in enumerate(a):\n  b[j]^=1\n  f[k]=(o(*b)!=v[i])\n  b[j]^=1\nprint(''.join(str(f[i]^v[0]) for i in range(n) if not d[i][1]))", "import sys\nn=int(input())\nf={'AND':(lambda a,b:a&b),'OR':(lambda a,b:a|b),'XOR':(lambda a,b:a^b),'NOT':(lambda a:a^1)}\ng={'0':(lambda:0),'1':(lambda:1)}\nd=[(g[v[0]],[]) if o=='IN' else (f[o],[int(a)-1 for a in v]) for o,*v in map(str.split,sys.stdin.read().strip().split('\\n'))]\nt=[0]\nfor i in t:t.extend(d[i][1])\nv=[0]*n\nfor i in t[::-1]:v[i]=d[i][0](*(v[x] for x in d[i][1]))\nf=[0]*n\nf[0]=1\nfor i in t:\n if f[i]<1: continue\n o,a=d[i]\n for k in a:\n  v[k]^=1\n  f[k]=(o(*(v[x] for x in a))!=v[i])\n  v[k]^=1\nprint(''.join(str(f[i]^v[0]) for i in range(n) if not d[i][1]))", "import sys\nn=int(input())\nf={'AND':(lambda a,b:a&b),'OR':(lambda a,b:a|b),'XOR':(lambda a,b:a^b),'NOT':(lambda a:a^1)}\ng={'0':(lambda:0),'1':(lambda:1)}\nd=[(g[v[0]],[]) if o=='IN' else (f[o],[int(a)-1 for a in v]) for o,*v in map(str.split,sys.stdin.read().strip().split('\\n'))]\nq=lambda i:d[i][0](*(v[x] for x in d[i][1]))\nt=[0]\nfor i in t:t.extend(d[i][1])\nv=[0]*n\nfor i in t[::-1]:v[i]=q(i)\nf=[0]*n\nf[0]=1\nfor i in t:\n if f[i]<1: continue\n for k in d[i][1]:\n  v[k]^=1\n  f[k]=q(i)!=v[i]\n  v[k]^=1\nprint(''.join(str(f[i]^v[0]) for i in range(n) if not d[i][1]))", "import sys\nn=int(input())\nf={'AND':(lambda a,b:a&b),'OR':(lambda a,b:a|b),'XOR':(lambda a,b:a^b),'NOT':(lambda a:a^1)}\ng={'0':(lambda:0),'1':(lambda:1)}\nd=[(g[v[0]],[]) if o=='IN' else (f[o],[int(a)-1 for a in v]) for o,*v in map(str.split,sys.stdin.read().strip().split('\\n'))]\nq=lambda i:d[i][0](*(v[x] for x in d[i][1]))\nt=[0]\nfor i in t:t.extend(d[i][1])\nv=[0]*n\nfor i in t[::-1]:v[i]=q(i)\nf=[0]*n\nf[0]=1\nfor i in t:\n if f[i]:\n  for k in d[i][1]:\n   v[k]^=1\n   f[k]=q(i)!=v[i]\n   v[k]^=1\nprint(''.join(str(f[i]^v[0]) for i in range(n) if not d[i][1]))", "import sys\nn=int(input())\nf={'AND':(lambda a,b:a&b),'OR':(lambda a,b:a|b),'XOR':(lambda a,b:a^b),'NOT':(lambda a:a^1)}\ng={'0':(lambda:0),'1':(lambda:1)}\nd=[(g[v[0]],[]) if o=='IN' else (f[o],[int(a)-1 for a in v]) for o,*v in map(str.split,sys.stdin.read().strip().split('\\n'))]\nq=lambda i:d[i][0](*(v[x] for x in d[i][1]))\nt=[0]\nfor i in t:t.extend(d[i][1])\nv=[0]*n\nfor i in t[::-1]:v[i]=q(i)\nf=[0]*n\nf[0]=1\nfor i in t:\n if f[i]:\n  for k in d[i][1]:\n   v[k]^=1\n   f[k]=q(i)!=v[i]\n   v[k]^=1\nprint(''.join(str(f[i]^v[0]) for i in range(n) if not d[i][1]))", "import sys\nn = int(input())\ng = {\n    'A': lambda a, b: v[a] & v[b],\n    'O': lambda a, b: v[a] | v[b],\n    'X': lambda a, b: v[a] ^ v[b],\n    'N': lambda a: v[a] ^ 1,\n    'I': lambda a: a + 1\n}\ndef f(q):\n    q = q.split()\n    return q.pop(0)[0], [int(t) - 1 for t in q]\nd = [f(q) for q in sys.stdin.readlines()]\nt = [0]\nfor i in t:\n    f, a = d[i]\n    if f != 'I': t.extend(a)\nv = [0] * n\nfor i in t[::-1]:\n    f, a = d[i]\n    v[i] = g[f](*a)\ns = [0] * n\ns[0] = 1\nfor i in t:\n    if not s[i]: continue\n    f, a = d[i]\n    if f == 'I': continue\n    for k in a:\n        v[k] ^= 1\n        s[k] = g[f](*a) != v[i]\n        v[k] ^= 1\nprint(''.join(str(q ^ v[0]) for q, (f, a) in zip(s, d) if f == 'I'))", "# https://codeforces.com/problemset/problem/1010/D\n# TLE\nimport sys\ninput=sys.stdin.readline\n\ndef handle(type_, val_, u, g, S):\n    if type_   == 'NOT':\n        S.append(g[u][0])\n    else:\n        v1, v2     = g[u] \n        val1, val2 = Val[v1], Val[v2] \n        \n        if oper[type_](1-val1, val2) != val_:\n            S.append(v1)\n            \n        if oper[type_](val1, 1-val2) != val_:\n            S.append(v2)       \n \ndef xor_(a, b):\n    return a ^ b\n \ndef or_(a, b):\n    return a | b\n \ndef not_(a):\n    return 1^a\n \ndef and_(a, b):\n    return a&b\n \ng={}\n \n# {key: [type, val]}\n \ndef push(d, u, v):\n    if u not in d:\n        d[u]=[]\n    d[u].append(v)\n \nn = int(input())\nVal  = [None]*n\nType = ['']*n\n \n \nfor i in range(n):\n    arr = input().split()\n    \n    if len(arr)==2:\n        if arr[0]=='IN':\n            Type[i] = 'IN'\n            Val[i]  = int(arr[1])\n        else:\n            Type[i]=arr[0]\n            push(g, i, int(arr[1])-1)\n    else:\n        type_, v1, v2 = arr[0], int(arr[1]), int(arr[2])  \n        Type[i]=type_ \n        push(g, i, v1-1)\n        push(g, i, v2-1)\n        \noper={}\n \noper['XOR']=xor_\noper['OR']=or_\noper['NOT']=not_\noper['AND']=and_    \n \nS=[0]\ni=0\nwhile i<len(S):\n    u=S[i]\n    if u in g:\n        for v in g[u]:\n            S.append(v)\n    i+=1    \n    \nfor u in S[::-1]:\n    if u in g:\n        type_ = Type[u]\n        \n        if len(g[u])==1:\n            val_   = Val[g[u][0]]\n            Val[u] = oper[type_](val_)\n        else:\n            val_1, val_2  = Val[g[u][0]], Val[g[u][1]]\n            Val[u] = oper[type_](val_1, val_2)\n            \nans= [0]*n\nS  = [0]\ni  = 0\n \nwhile i<len(S):\n    u=S[i]\n    \n    if u in g:\n        type_, val_ = Type[u], Val[u]\n        handle(type_, val_, u, g, S)\n        \n    i+=1\n    \nroot_val = Val[0]    \nans      = [root_val]*n\n \nfor x in S:\n    if Type[x]=='IN':\n        ans[x]=1-ans[x]\n        \nprint(''.join([str(ans[x]) for x in range(n) if Type[x]=='IN'] ))  "]