["import numpy as np\nN, C = list(map(int, input().split()))\n\nxv = [(0, 0)]\nfor i in range(N):\n    x, v = list(map(float, input().split()))\n    xv.append((x, v))\n\nsumA = np.zeros(N+2, dtype=float)\nsumB = np.zeros(N+2, dtype=float)\n\nxv.sort(key=lambda tup:tup[0])\nxv.append((C,0))\n\nfor i in range(N+1):\n    sumA[i+1] = sumA[i] + xv[i+1][1]\n    sumB[i+1] = sumB[i] + xv[N-i][1]\n\nmaxA = [0]*(N+1)\nmaxB = [0]*(N+1)\nfor i in range(N):\n    if sumA[i+1] < xv[i+1][0]: sumA[i+1] = 0\n    else: sumA[i+1] -= xv[i+1][0]\n    if sumB[i+1] < C - xv[N-i][0]: sumB[i+1] = 0\n    else: sumB[i+1] -= C - xv[N-i][0]\n\n    maxA[i + 1] = maxA[i]\n    if sumA[i+1] > maxA[i]:\n        maxA[i+1] = sumA[i+1]\n    maxB[i + 1] = maxB[i]\n    if sumB[i+1] > maxB[i]:\n        maxB[i+1] = sumB[i+1]\n\nans = 0\nfor i in range(N):\n    #when to turn back?\n    #valB = -xv[i][0] + max(sumB[:N-i+1])\n    valB = -xv[i][0] + maxB[N - i]\n    if valB < 0:\n        ans = max(ans, sumA[i])\n    else:\n        ans = max(ans, sumA[i] + valB)\n\n    #when to turn back?\n    valA = -C+xv[N-i+1][0] + maxA[N-i]\n    if valA < 0:\n        ans = max(ans, sumB[i])\n    else:\n        ans = max(ans, sumB[i] + valA)\n\nprint((int(ans)))\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef calc_max(A):\n    Amax = [0] * len(A)\n    cal = 0\n    for i, (x, v) in enumerate(A):\n        cal += v\n        if i == 0:\n            Amax[i] = max(cal - x, 0)\n        else:\n            Amax[i] = max(cal - x, Amax[i - 1])\n\n    return Amax\n\n\ndef solve(A, Amax, B, Bmax, ans):\n    N = len(A)\n    for i in range(N - 1):\n        if ans < Amax[i] - A[i][0] + Bmax[N - i - 2]:\n            ans = Amax[i] - A[i][0] + Bmax[N - i - 2]\n\n    return ans\n\n\ndef main():\n    N, C, *XV = list(map(int, read().split()))\n\n    A = [0] * N\n    for i, (x, v) in enumerate(zip(*[iter(XV)] * 2)):\n        A[i] = (x, v)\n    Amax = calc_max(A)\n\n    B = [(C - x, v) for x, v in reversed(A)]\n    Bmax = calc_max(B)\n\n    ans = max(Amax[-1], Bmax[-1])\n    ans = max(ans, solve(A, Amax, B, Bmax, ans))\n    ans = max(ans, solve(B, Bmax, A, Amax, ans))\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# Python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN,C = map(int,input().split())\nXV = [tuple(map(int,input().split())) for _ in range(N)]\n\n# \u9806\u65b9\u5411,\u9006\u65b9\u5411\u306e\u7d2f\u7a4d\u548c\nVF,VB = [0]*(N+1),[0]*(N+1)\nfor i in range(N):\n    VF[i+1] += VF[i]+XV[i][1]\nfor i in range(N):\n    VB[N-i-1] += VB[N-i]+XV[N-1-i][1]\n# \u79fb\u52d5\u8ddd\u96e2\u3092\u6e1b\u7b97\nfor i in range(N):\n    VF[i+1] -= XV[i][0]\nfor i in range(N):\n    VB[N-i-1] -= (C-XV[N-1-i][0])\n# \u98df\u3079\u306b\u884c\u304f\u3068\u640d\u3059\u308b\u5834\u5408\u3092\u9664\u304f\u305f\u3081\u306b\u5358\u8abf\u5897\u52a0\u306b\nfor i in range(N):\n    if VF[i+1] < VF[i]:\n        VF[i+1] = VF[i]\nfor i in range(N):\n    if VB[N-1-i] < VB[N-i]:\n        VB[N-1-i] = VB[N-i]\n \n# \u9806\u65b9\u5411,\u9006\u65b9\u5411\u3067\u5168\u90e8\u98df\u3079\u305f\u5834\u5408\u3067\u521d\u671f\u5316\nans = 0\nans = max(ans, VF[N], VB[0])\n \n# \u53cd\u8ee2 : \u9806\u65b9\u5411\u2192\u9006\u65b9\u5411\nfor i in range(1,N):\n    ans = max(ans, VF[i], VF[i]+VB[i]-XV[i-1][0])\n \n# \u53cd\u8ee2 : \u9006\u65b9\u5411\u2192\u9806\u65b9\u5411\nfor i in range(1,N):\n    ans = max(ans, VB[i], VB[i]+VF[i]-(C-XV[i][0]))\n \nprint(ans)", "N, C = list(map(int, input().split()))\n\nxv = [list(map(int, input().split())) for _ in range(N)]\n\nxinc = [0] * N\nxinc2 = [0] * N\nxdec = [0] * N\nxdec2 = [0] * N\n\nnowx = 0\nnowv = 0\n\nnowxin = C\nnowvin = 0\n\nfor i in range(N):\n  xi, vi = xv[i]\n  nowv = nowv - (xi-nowx) + vi\n  xinc[i] = nowv\n  xinc2[i] = nowv - xi\n  nowx = xi\n  \n  xin, vin = xv[N-1-i]\n  nowvin = nowvin - (nowxin-xin) + vin\n  xdec[i] = nowvin\n  xdec2[i] = nowvin - (C-xin)\n  nowxin = xin\n  \nmxinc2 = [0]*N\nmxdec2 = [0]*N\nfor i in range(1, N):\n  mxinc2[i] = max(mxinc2[i-1], xinc2[i-1])\n  mxdec2[i] = max(mxdec2[i-1], xdec2[i-1])\n  \nans = 0\nfor i in range(N):\n  ans = max(ans, xinc[i], xdec[i])\n  ans = max(ans, mxinc2[i]+xdec[N-1-i])\n  ans = max(ans, mxdec2[i]+xinc[N-1-i])\n\nprint(ans)\n", "from itertools import accumulate\nn,c = map(int,input().split())\nwv = [[0,0]]+[list(map(int,input().split())) for i in range(n)]+[[c,0]]\nn += 2\nansls = []\nls1 = [0]*n\nls2 = [0]*n\nls3 = [0]*n\nls4 = [0]*n\nfor i in range(1,n):\n  w,v = wv[i]\n  w -= wv[i-1][0]\n  ls1[i] = v-w*2\n  ls2[i] = v-w\nfor i in range(n-2,-1,-1):\n  w,v = wv[i]\n  w -= wv[i+1][0]\n  ls3[n-i-1] = v+w*2\n  ls4[n-i-1] = v+w\nals1 = list(accumulate(ls1))\nals2 = list(accumulate(ls2))\nals3 = list(accumulate(ls3))\nals4 = list(accumulate(ls4))\nals1 = list(accumulate(als1,max))\nals2 = list(accumulate(als2,max))\nals3 = list(accumulate(als3,max))\nals4 = list(accumulate(als4,max))\nfor i in range(n-1):\n  ansls.append(als1[i]+als4[n-2-i])\n  ansls.append(als2[i]+als3[n-2-i])\nprint(max(ansls))", "def main():\n    from numpy import zeros\n    from sys import stdin\n    def input():\n        return stdin.readline().strip()\n\n    n, c = list(map(int, input().split()))\n    # v: cumulative sum\n    x, v = zeros(n+2, dtype=int), zeros(n+2, dtype=int)\n    for i in range(n):\n        j, k = list(map(int, input().split()))\n        x[i+1] = j\n        v[i+1] = v[i] + k\n    x[n+1] = c\n    v[n+1] = v[n]\n    \n    max_nut_clockwise = zeros(n+1, dtype=int)\n    for i in range(1, n+1):\n        max_nut_clockwise[i] = max(max_nut_clockwise[i-1], v[i] - x[i])\n    max_nut_counterclockwise = zeros(n+1, dtype=int)\n    for i in range(n-1, -1, -1):\n        max_nut_counterclockwise[i] = max(max_nut_counterclockwise[i+1], v[-1] - v[i] - c + x[i+1])\n\n    ans = 0\n    # rotate clockwise, then rotate counterclockwise\n    for i in range(n):\n        if ans < v[i] - 2*x[i] + max_nut_counterclockwise[i]:\n            ans = v[i] - 2*x[i] + max_nut_counterclockwise[i]\n    # rotate counterclockwise, then rotate clockwise\n    for i in range(2, n+2):\n        if ans < v[-1] - v[i-1] - 2 * (c - x[i]) + max_nut_clockwise[i-1]:\n            ans = v[-1] - v[i-1] - 2 * (c - x[i]) + max_nut_clockwise[i-1]\n    \n    print(ans)\n\nmain()\n", "def main():\n    n, c = map(int, input().split())\n    sushi = [None]*n\n    for i in range(n):\n        sushi[i] = list(map(int, input().split()))\n    cal_r = [None] * n\n    cal_l = [None] * n\n    max_r = [None] * n\n    max_l = [None] * n\n    cal_r[0] = sushi[0][1] - sushi[0][0]\n    max_r[0] = cal_r[0]\n    for i in range(1, n):\n        cal_r[i] = cal_r[i-1] + sushi[i][1] - (sushi[i][0] - sushi[i-1][0])\n        max_r[i] = max(max_r[i-1], cal_r[i])\n    cal_l[n-1] = sushi[n-1][1] - (c - sushi[n-1][0])\n    max_l[n-1] = cal_l[n-1]\n    for i in reversed(range(n-1)):\n        cal_l[i] = cal_l[i+1] + sushi[i][1] - (sushi[i+1][0] - sushi[i][0])\n        max_l[i] = max(max_l[i+1], cal_l[i])\n    max_r_1 = max(max_r)\n    max_l_1 = max(max_l)\n    ans = max(0, max_r_1, max_l_1)\n    cal_r_2 = [None] * n\n    cal_l_2 = [None] * n\n    cal_r_2[n-1] = 0\n    cal_l_2[0] = 0\n    for i in range(n-1):\n        cal_r_2[i] = cal_r[i] - sushi[i][0] + max_l[i+1]\n    for i in reversed(range(1, n)):\n        cal_l_2[i] = cal_l[i] - (c - sushi[i][0]) + max_r[i-1]\n    max_r_2 = max(cal_r_2)\n    max_l_2 = max(cal_l_2)\n    ans = max(ans, max_l_2, max_r_2)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "N, C = list(map(int, input().split()))\nx = [None] * N\nv = [None] * N\nfor i in range(N):\n    x[i], v[i] = list(map(int, input().split()))\n\na0 = [None] * N\na = v[0] - x[0]\na0[0] = max(0, a)\nfor i in range(1, N):\n    a += v[i] - (x[i] - x[i - 1])\n    a0[i] = max(a, a0[i - 1])\n\na1 = [None] * N\na = v[N - 1] - (C - x[N - 1])\na1[0] = max(0, a)\nfor i in range(1, N):\n    a += v[N - 1 - i] - ((C - x[N - 1 - i]) - (C - x[N - 1 - (i - 1)]))\n    a1[i] = max(a, a1[i - 1])\n\n#print(a0)\n#print(a1)\nresult = -1\nif a0[N - 1] > result:\n    #print(\"go a0[N-1]\")\n    result = a0[N - 1]\nif a1[N - 1] > result:\n    #print(\"go a1[N-1]\")\n    result = a1[N - 1]\nfor i in range(N - 1):\n    t = a0[i] - x[i] + a1[N - 1 - (i + 1)]\n    if t > result:\n       #print(\"go a0[%d] and go a1[%d]: %d\" % (i, N - 1 - (i + 1), t))\n       result = t\nfor i in range(N - 1):\n    t = a1[i] - (C - x[N - 1 - i]) + a0[N - 1 - (i + 1)]\n    if t > result:\n       #print(\"go a1[%d] and go a0[%d]: %d\" % (i, N - 1 - (i + 1), t))\n       result = t\nprint(result)\n", "n, c = list(map(int, input().split()))\n\nx_list = []\nv_list = []\none_list = []\nround_list = []\nr_one_list = []\nr_round_list = []\n\ntotal = 0\n\nfor i in range(n):\n    x, v = list(map(int, input().split()))\n    x_list.append(x)\n    v_list.append(v)\n    total = total + v\n    one_list.append(total - x)\n    round_list.append(total - (2 * x))\n\nprev = 0\n\nfor i in range(n):\n    if prev > one_list[i]:\n        one_list[i] = prev\n    else:\n        prev = one_list[i]\n\nprev = 0\n\nfor i in range(n):\n    if prev > round_list[i]:\n        round_list[i] = prev\n    else:\n        prev = round_list[i]\n\n\ntotal = 0\nfor i in range(1, n+1):\n    total = total + v_list[-i]\n    r_one_list.append(total - (c - x_list[-i]))\n    r_round_list.append(total - 2 * (c - x_list[-i]))\n\nprev = 0\nfor i in range(n):\n    if prev > r_one_list[i]:\n        r_one_list[i] = prev\n    else:\n        prev = r_one_list[i]\n\nprev = 0\nfor i in range(n):\n    if prev > r_round_list[i]:\n        r_round_list[i] = prev\n    else:\n        prev = r_round_list[i]\n\nret = 0\n\nfor i in range(n-1):\n    tmp = max(one_list[i] + r_round_list[-i-2],\n              round_list[i] + r_one_list[-i-2])\n    if tmp > ret:\n        ret = tmp\n\nret = max(one_list[-1], r_one_list[-1], ret)\n\nprint(ret)\n", "from itertools import accumulate\n\nn, c = list(map(int, input().split()))\nxs, vs = [], []\nfor _ in range(n):\n    x, v = list(map(int, input().split()))\n    xs.append(x)\n    vs.append(v)\nxs = [0] + xs + [c]\nvs = [0] + vs + [0]\n\n\ndef maxcalrrl(xs=xs, vs=vs):\n    avsr = list(accumulate(reversed(vs)))[::-1]\n\n    calr = [a - 2 * x for x, a in zip(xs, accumulate(vs))]\n    call = [a - (c - x) for x, a in zip(xs, avsr)]\n\n    maxcalr = list(accumulate(calr, max))\n\n    return max([\n        call[i + 1] + maxcalr[i] for i in range(n + 1)\n    ])\n\n\ndef maxcalrll(xs=xs, vs=vs):\n    xsr = [c - x for x in xs][::-1]\n    vsr = vs[::-1]\n    return maxcalrrl(xsr, vsr)\n\n\n# print(maxcalrrl())\nanswer = max([maxcalrrl(), maxcalrll()])\nprint(answer)\n", "n, c = list(map(int, input().split()))\nXV = [tuple(map(int, input().split())) for i in range(n)]\nX = [x for x, v in XV]\nV = [v for x, v in XV]\nS = [0]\nfor i in range(n):\n    S.append(S[-1]+V[i])\n# \u53f3\u56de\u308a\u304b\u3089\u884c\u304f\u5834\u5408\nA = [0]\nfor i in range(1, n+1):\n    A.append(max(A[-1], S[i]-2*X[i-1]))\nB = []\nfor i in range(n):\n    B.append(S[n]-S[i]-(c-X[i]))\nB.append(0)\nans0 = max([A[i]+B[i] for i in range(n+1)])\n# \u5de6\u56de\u308a\u304b\u3089\u884c\u304f\u5834\u5408\nA = [0]\nfor i in range(1, n+1):\n    A.append(max(A[-1], S[i]-X[i-1]))\nB = []\nfor i in range(n):\n    B.append(S[n]-S[i]-2*(c-X[i]))\nB.append(0)\nans1 = max([A[i]+B[i] for i in range(n+1)])\nprint((max(ans0, ans1)))\n", "n, c = list(map(int, input().split()))\nx = []\nv = []\nfor i in range(n):\n  xi, vi = list(map(int, input().split()))\n  x.append(xi)\n  v.append(vi)\nl1 = [0]\nl2 = [0]\nr1 = [0]\nr2 = [0]\nvtotal = 0\nfor i in range(n):\n  vtotal += v[i]\n  l1.append(max(l1[-1], vtotal - x[i]))\n  l2.append(max(l2[-1], vtotal - 2 * x[i]))\nvtotal = 0\nfor i in range(n - 1, -1, -1):\n  vtotal += v[i]\n  r1.append(max(r1[-1], vtotal - (c - x[i])))\n  r2.append(max(r2[-1], vtotal - 2 * (c - x[i])))\nans = 0\nfor i in range(n + 1):\n  ans = max(ans, l1[i] + r2[n - i], l2[i] + r1[n - i])\nprint(ans)\n", "n, c = list(map(int, input().split()))\nxv = [list(map(int, input().split())) for _ in range(n)]\n\ncw = []\ncw2 = [0]\nv_sm = 0\nfor x, v in xv:\n    v_sm += v\n    cw.append(v_sm - x)\n    cw2.append(v_sm - 2 * x)\n\nccw = []\nccw2 = [0]\nv_sm = 0\nfor x, v in xv[::-1]:\n    v_sm += v\n    ccw.append(v_sm - (c - x))\n    ccw2.append(v_sm - 2 * (c - x))\n\ncw_mx = [0]\nccw_mx = [0]\nfor e in cw:\n    cw_mx.append(max(cw_mx[-1], e))\nfor e in ccw:\n    ccw_mx.append(max(ccw_mx[-1], e))\n\nans = 0\nfor i, e in enumerate(cw2):\n    mx = e + ccw_mx[n-i]\n    ans = max(ans, mx)\n\nfor i, e in enumerate(ccw2):\n    mx = e + cw_mx[n-i]\n    ans = max(ans, mx)\n\nprint(ans)\n", "def main():\n    N, C = list(map(int, input().split()))\n    XV = [tuple(map(int, input().split())) for _ in range(N)]\n    return max(solve(N, C, XV), solve(N, C, [(C - x, v) for x, v in reversed(XV)]))\n\ndef solve(N, C, XV):\n    lv = [0] * N\n    rv = [0] * N\n    x0, c, m = 0, 0, 0\n    for i, (x, v) in enumerate(XV):\n        c += v - (x - x0)\n        m = max(m, c)\n        lv[i] = m\n        x0 = x\n    rv = [0] * N\n    x0, c, m = C, 0, 0\n    for i, (x, v) in enumerate(reversed(XV)):\n        c += v - 2 * (x0 - x)\n        m = max(m, c)\n        rv[i] = m\n        x0 = x\n    for i in range(N - 1):\n        lv[i] += rv[N - i - 2]\n    return max(lv)\n\nprint((main()))\n", "n,C=list(map(int,input().split()))\nque=[]\nfor _ in range(n):\n    x,v=list(map(int,input().split()))\n    que.append((x,v))\n\ndpl=[0 for i in range(n+1)] #dpl[i]=\u5de6\u304b\u3089i\u756a\u76ee\u306b\u884c\u304f\u307e\u3067\u306e\u304a\u8179\u306e\u5024\u306e\u30d7\u30e9\u30b9\ndpr=[0 for i in range(n+1)] #dpr[j]\uff1d\u53f3\u304b\u3089j\u756a\u76ee\u306b\u884c\u304f\u307e\u3067\u306e\u304a\u8179\u306e\u5024\u306e\u30d7\u30e9\u30b9\n\nc=0\nfor i in  range(n):\n    c+=que[i][1]\n    dpl[i+1]=c-que[i][0]\n\nd=0\nfor i in range(1,n+1):\n    d+=que[-i][1]\n    dpr[i]=d-(C-que[-i][0])\n\nmax1=max(dpl)\nmax2=max(dpr)\n\ndpb_l=[0 for i in range(n+1)]#dpb_l[i]=\u5de6\u304b\u3089i\u756a\u76ee\u306b\u884c\u3063\u3066\u623b\u308b\u3068\u304d\u306b\u9054\u6210\u3067\u304d\u308b\u304a\u8179\u306e\u5024\u306e\u30d7\u30e9\u30b9\ndpb_r=[0 for i in range(n+1)]#dpb_r[i]=\u53f3\u304b\u3089i\u756a\u76ee\u306b\u884c\u3063\u3066\u623b\u308b\u3068\u304d\u306b\u9054\u6210\u3067\u304d\u308b\u304a\u8179\u306e\u5024\u306e\u30d7\u30e9\u30b9\n\nc=0\n\nfor i in  range(n):\n    c+=que[i][1]\n    dpb_l[i+1]=c-2*que[i][0]\n\nd=0\nfor i in range(1,n+1):\n    d+=que[-i][1]\n\n    dpb_r[i]=d-2*(C-que[-i][0])\n\n#dpl[i]=\u5de6\u304b\u3089i\u756a\u76ee\u306e\u3068\u3053\u308d\u306b\u884c\u304f\u307e\u3067\u306b\u9054\u6210\u3067\u304d\u308b\u304a\u8179\u306e\u5024\u306e\u30d7\u30e9\u30b9\u306e\u6700\u5927\u5024\n#dpr[i]=\u53f3\u304b\u3089i\u756a\u76ee\u306e\u3068\u3053\u308d\u306b\u884c\u304f\u307e\u3067\u306b\u9054\u6210\u3067\u304d\u308b\u304a\u8179\u306e\u3042\u305f\u3044\u306e\u30d7\u30e9\u30b9\u306e\u6700\u5927\u5024\n\nfor i in range(1,n+1):\n    dpl[i]=max(dpl[i-1],dpl[i])\nfor i in range(1,n+1):\n    dpr[i]=max(dpr[i],dpr[i-1])\n\nmax3=0\n\nfor i in range(1,n):\n    max3=max(max3,dpb_l[i]+dpr[n-i],dpb_r[i]+dpl[n-i])\n\nprint((max(max1,max2,max3)))\n\n\n", "def main():\n    from collections import namedtuple\n    import sys\n    input = sys.stdin.readline\n\n    Sushi = namedtuple('Sushi', 'x cal')\n\n    n, c = list(map(int, input().split()))\n\n    a = []\n    for _ in range(n):\n        x, v = list(map(int, input().split()))\n        a.append(Sushi(x=x, cal=v))\n    # x\u6607\u9806\u30bd\u30fc\u30c8\u6e08\n\n    clock = [0] * (n + 1)  # \u6ce8\u76ee\u3059\u308b\u5bff\u53f8\u4ee5\u524d\u3067\u96e2\u8131\u3059\u308b\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    clock_to_0 = [0] * (n + 1)  # \u6642\u8a08\u56de\u308a->\u521d\u671f\u4f4d\u7f6e\u306e\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    ma = 0  # \u6ce8\u76ee\u3059\u308b\u5bff\u53f8\u4ee5\u524d\u3067\u96e2\u8131\u3059\u308b\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    ma0 = 0  # \u6642\u8a08\u56de\u308a->\u521d\u671f\u4f4d\u7f6e\u306e\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    curr = 0  # \u73fe\u5728\u306e\u30ab\u30ed\u30ea\u30fc(\u79fb\u52d5\u306b\u3088\u308b\u30ab\u30ed\u30ea\u30fc\u6d88\u8cbb\u3092\u7121\u8996)\n    for i, s in enumerate(a, start=1):\n        curr += s.cal\n        ma = max(ma, curr - s.x)\n        ma0 = max(ma0, curr - s.x * 2)\n        clock[i] = ma\n        clock_to_0[i] = ma0\n\n    anti = [0] * (n + 1)  # \u6ce8\u76ee\u3059\u308b\u5bff\u53f8\u4ee5\u524d\u3067\u96e2\u8131\u3059\u308b\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    anti_to_0 = [0] * (n + 1)  # \u53cd\u6642\u8a08\u56de\u308a->\u521d\u671f\u4f4d\u7f6e\u306e\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    ma = 0  # \u6ce8\u76ee\u3059\u308b\u5bff\u53f8\u4ee5\u524d\u3067\u96e2\u8131\u3059\u308b\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    ma0 = 0  # \u6642\u8a08\u56de\u308a->\u521d\u671f\u4f4d\u7f6e\u306e\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    curr = 0  # \u73fe\u5728\u306e\u30ab\u30ed\u30ea\u30fc(\u79fb\u52d5\u306b\u3088\u308b\u30ab\u30ed\u30ea\u30fc\u6d88\u8cbb\u3092\u7121\u8996)\n    for i, s in zip(list(range(n, -1, -1)), reversed(a)):\n        curr += s.cal\n        ma = max(ma, curr - (c - s.x))\n        ma0 = max(ma0, curr - (c - s.x) * 2)\n        anti[i] = ma\n        anti_to_0[i] = ma0\n\n    ans = 0\n    for exit_pos in range(1, n + 1):\n        ans = max(\n            ans,\n            clock_to_0[exit_pos - 1] + anti[exit_pos],\n            anti_to_0[(exit_pos + 1) % (n + 1)] + clock[exit_pos]\n        )\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, c = map(int, input().split())\nxv = []\nfor _ in range(n):\n    x, v = map(int, input().split())\n    xv.append((x, v))\nr1 = [0]\nr2 = [0]\npx = 0\nfor x, v in xv:\n    r1.append(r1[-1]+v-(x-px))\n    r2.append(r2[-1]+v-2*(x-px))\n    px = x\nl1 = [0]\nl2 = [0]\npx = 0\nfor x, v in reversed(xv):\n    x = c-x\n    l1.append(l1[-1]+v-(x-px))\n    l2.append(l2[-1]+v-2*(x-px))\n    px = x\ndef accu_max(li):\n    mx = -1\n    for i in range(n+1):\n        if li[i]>mx:\n            mx = li[i]\n        else:\n            li[i] = mx\naccu_max(r1)\naccu_max(r2)\naccu_max(l1)\naccu_max(l2)\nans = 0\nfor i in range(n+1):\n    ans = max(ans, r1[i]+l2[n-i])\n    ans = max(ans, l1[i]+r2[n-i])\nprint(ans)", "from itertools import accumulate\nN, C = map(int, input().split())\nXV = [tuple(map(int, input().split())) for _ in range(N)]\n\n# \u6642\u8a08\u56de\u308a\u306b\u5bff\u53f8\u3092\u98df\u3079\u3066\u3044\u304f\neat = 0\nwalk = 0\nnow = 0\nclockwise = [(0, 0)]\nfor x, v in XV:\n    eat += v\n    walk += x-now\n    clockwise.append((eat, walk))\n    now = x\n\n# \u534a\u6642\u8a08\u5468\u308a\u306b\u98df\u3079\u3066\u3044\u304f\neat = 0\nwalk = 0\nnow = C\ncounter_clockwise = [(0, 0)]\nfor x, v in XV[::-1]:\n    eat += v\n    walk += now - x\n    counter_clockwise.append((eat, walk))\n    now = x\n\n# \u524d\u51e6\u7406\nbest_left_go = [e - w for e, w in counter_clockwise]\nbest_left_go = list(accumulate(best_left_go, func=max))\nbest_left_back = [e - 2 * w for e, w in counter_clockwise]\nbest_left_back = list(accumulate(best_left_back, func=max))\nbest_right_go = [e - w for e, w in clockwise]\nbest_right_go = list(accumulate(best_right_go, func=max))\nbest_right_back = [e - 2 * w for e, w in clockwise]\nbest_right_back = list(accumulate(best_right_back, func=max))\n\n# \u6642\u8a08\u56de\u308a\u3057\u3066\u623b\u3063\u3066\u53cd\u6642\u8a08\u56de\u308a\u306b\u98df\u3079\u308b\nans = 0\nfor i, rb in enumerate(best_right_back):\n    calorie = rb + best_left_go[N - i]\n    ans = max(ans, calorie)\n# \u53cd\u6642\u8a08\u56de\u308a\u3057\u3066\u623b\u3063\u3066\u6642\u8a08\u56de\u308a\u306b\u98df\u3079\u308b\nfor i, lb in enumerate(best_left_back):\n    calorie = lb + best_right_go[N - i]\n    ans = max(ans, calorie)\n\nprint(ans)", "n,c=map(int,input().split())\nx=[0]\nv=[0]\nsu=[0]*(n+1)\nfor i in range(n):\n    xx,vv=map(int,input().split())\n    x.append(xx)\n    v.append(vv)\n    su[i+1]=su[i]+v[i+1]\nlmax=[0]*(n+2)\nrmax=[0]*(n+2)\nfor i in range(n):\n    lmax[i+1]=max(lmax[i],su[i+1]-x[i+1])\n    rmax[n-i]=max(rmax[n-i+1],(su[n]-su[n-i-1])-(c-x[n-i]))\nans=0\nfor i in range(n):\n    ans=max(ans,su[i+1]-2*x[i+1]+rmax[i+2])\n    ans=max(ans,(su[n]-su[n-i-1])-2*(c-x[n-i])+lmax[n-i-1])\nans = max(ans, max(lmax[n],rmax[1]))\nprint(ans)", "N, C = map(int, input().split())\nxv = [list(map(int, input().split())) for i in range(N)]\n\nA1 = [0, 0]\nX1 = [0]\nA2 = [0, 0]\nX2 = [0]\nfor x, v in xv:\n  A1[-1] += v - x\n  A1.append(A1[-1] + x)\n  X1.append(x)\nA1.pop()\n\nxv = xv[::-1]\nfor x, v in xv:\n  A2[-1] += v - (C-x)\n  A2.append(A2[-1] + (C-x))\n  X2.append(C-x)\nA2.pop()\n\nmax_1 = []\nmax_2 = []\nnow = -1\nfor i, a in enumerate(A1):\n  if a > now:\n    max_1.append(i)\n    now = a\n  else:\n    max_1.append(max_1[-1])\n\nnow = -1\nfor i, a in enumerate(A2):\n  if a > now:\n    max_2.append(i)\n    now = a\n  else:\n    max_2.append(max_2[-1])\n\nans = 0\nfor i, a in enumerate(A1):\n  idx = max_2[-i-1]\n  calory = max(a, a + A2[idx] - X1[i])\n  ans = max(ans, calory)\n\nfor i, a in enumerate(A2):\n  idx = max_1[-i-1]\n  calory = max(a, a + A1[idx] - X2[i])\n  ans = max(ans, calory)\n\nprint(ans)", "n, c = map(int, input().split())\nXV = [list(map(int, input().split())) for _ in range(n)]\nX, V = zip(*XV)\ndp_I_r = [0]*n\ndp_U_r = [0]*n\ndp_I_l = [0]*n\ndp_U_l = [0]*n\ndp_I_r[0] = V[0] - X[0]\ndp_U_r[0] = V[0] - 2*X[0]\ndp_I_l[n-1] = V[n-1] - (c - X[n-1])\ndp_U_l[n-1] = V[n-1] - 2*(c - X[n-1])\nfor i in range(n-1):\n  dp_I_r[i+1] = dp_I_r[i] + V[i+1] - (X[i+1] - X[i])\n  dp_U_r[i+1] = dp_U_r[i] + V[i+1] - 2*(X[i+1] - X[i])\n  dp_I_l[n-2-i] = dp_I_l[n-1-i] + V[n-2-i] - (X[n-1-i] - X[n-2-i])\n  dp_U_l[n-2-i] = dp_U_l[n-1-i] + V[n-2-i] - 2*(X[n-1-i] - X[n-2-i])\nfor i in range(n-1):\n  dp_I_r[i+1] = max(dp_I_r[i], dp_I_r[i+1])\n  dp_U_r[i+1] = max(dp_U_r[i], dp_U_r[i+1])\n  dp_I_l[n-2-i] = max(dp_I_l[n-1-i], dp_I_l[n-2-i])\n  dp_U_l[n-2-i] = max(dp_U_l[n-1-i], dp_U_l[n-2-i])\nans = 0\nfor i in range(n):\n  ans = max(ans, dp_I_r[i])\n  ans = max(ans, dp_I_l[i])\n  if i < n-1:\n    ans = max(ans, dp_U_r[i] + dp_I_l[i+1])\n  if i > 0:\n    ans = max(ans, dp_U_l[i] + dp_I_r[i-1])\nprint(ans)", "import itertools\nfrom collections import deque,defaultdict,Counter\nfrom itertools import accumulate\nimport bisect\nfrom heapq import heappop,heappush\nfrom fractions import gcd\nfrom copy import deepcopy\nimport math\nimport queue\n#import numpy as np\n#import sympy as syp(\u7d20\u56e0\u6570\u5206\u89e3\u3068\u304b)\nMod = 1000000007\nimport sys\n\nsys.setrecursionlimit(100000) \n  \ndef sieve_of_eratosthenes(n):\n    if not isinstance(n,int):\n        raise TypeError(\"n is not int\")\n    if n<2:\n        raise ValueError(\"n is not effective\")\n    prime = [1]*(n+1)\n    for i in range(2,int(math.sqrt(n))+1):\n        if prime[i] == 1:\n            for j in range(2*i,n+1):\n                if j%i == 0:\n                    prime[j] = 0\n    res = []\n    for i in range(2,n+1):\n        if prime[i] == 1:\n            res.append(i)\n    return res\n\ndef factorial(i):\n    if i == 1:\n        return 1\n    else:\n        return i*factorial(i-1)\n \nclass UnionFind:\n    def __init__(self,n):\n        self.parent = [i for i in range(n+1)]\n        self.rank = [0 for i in range(n+1)]\n    \n    def findroot(self,x):\n        if x == self.parent[x]:\n            return x\n        else:\n            y = self.parent[x]\n            y = self.findroot(self.parent[x])\n            return y\n    \n    def union(self,x,y):\n        px = self.findroot(x)\n        py = self.findroot(y)\n        if px < py:\n            self.parent[py] = px\n        else:\n            self.parent[px] = py\n \n    def same_group_or_no(self,x,y):\n        return self.findroot(x) == self.findroot(y)\n\n\n\n\ndef main(): #startline--------------------------------------------\n    n,c = list(map(int,input().split()))\n    xv = [list(map(int,input().split())) for i in range(n)]\n    x = [xv[i][0] for i in range(n)]\n    v = [xv[i][1] for i in range(n)]\n    r1,r2,l1,l2 = [0]*(n+1),[0]*(n+1),[0]*(n+1),[0]*(n+1)\n    ans = 0\n    dis = 0\n    for i in range(n):\n        r1[i+1] = r1[i]+v[i]-(x[i]-dis)\n        r2[i+1] = r2[i]+v[i]-2*(x[i]-dis)\n        dis = x[i]\n    dis = c\n    for i in reversed(list(range(n))):\n        l1[n-i] = l1[n-i-1]+v[i]-(dis-x[i])\n        l2[n-i] = l2[n-i-1]+v[i]-2*(dis-x[i])\n        dis = x[i]\n    for i in range(n):\n        l1[i+1] = max(l1[i+1],l1[i])\n        r1[i+1] = max(r1[i+1],r1[i])\n    for i in range(n+1):\n        ans = max(ans,max(r2[i]+l1[n-i],l2[i]+r1[n-i]))\n    print(ans)\n\ndef __starting_point():\n    main() #endline===============================================\n\n__starting_point()", "n,c = map(int,input().split())\nx = [0]*n\nv = [0]*n\nfor i in range(n): x[i],v[i] = map(int,input().split())\nx1 = [0]+x\nv1 = [0]+v\nx2 = [0]+list(map(lambda a:c-a,x[::-1]))\nv2 = [0]+v[::-1]\nlst1 = [0]*(n+1)\nlst2 = [0]*(n+1)\nlst1[0] = lst2[0] = (0,0)\n\ndef f(l,x,v):\n    maxcal = pos = sumcal = 0\n    for i in range(1,n+1):\n        dist = x[i]-x[i-1]\n        sumcal += v[i] - dist\n        if sumcal > maxcal:\n            maxcal = sumcal\n            pos = x[i]\n        l[i] = (maxcal,pos)\n\nf(lst1,x1,v1)\nf(lst2,x2,v2)\n# print(lst1)\n# print(lst2)\n\nans = 0\nfor i in range(n+1):\n    ans = max(ans,lst1[i][0]+lst2[n-i][0]-min(lst1[i][1],lst2[n-i][1]))\nprint(ans)", "import sys\n\nN, C = map(int, sys.stdin.readline().split())\n\nsushi_set = []\nfor i in range(N):\n    x, v = map(int, sys.stdin.readline().split())\n    sushi_set.append((x, v))\nsushi_set.sort()\n\nans = -1\n\n# \u65b9\u5411\u8ee2\u63db\u306f\u4e00\u56de\u307e\u3067\u3067\u3068\u8003\u3048\u3066\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\uff1f\n# right\nright = [0 for _ in range(N)]\nmax_n = -float(\"inf\")\nenergy = 0\nright_back = [0 for _ in range(N)]\nfor i, (x, v) in enumerate(sushi_set):\n    energy += v\n    if energy - x > max_n:\n        max_n = energy - x\n    right[i] = max_n\n    right_back[i] = energy - 2 * x\n\n# left\nleft = [0 for _ in range(N)]\nmax_n = -float(\"inf\")\nenergy = 0\nleft_back = [0 for _ in range(N)]\nfor i, (x, v) in enumerate(sushi_set[::-1]):\n    energy += v\n    if energy - (C - x) > max_n:\n        max_n = energy - (C - x)\n    left[i] = max_n\n    left_back[i] = energy - 2 * (C - x)\n\n# print(\"right\", right)\n# print(\"right_back\", right_back)\n# print(\"left\", left)\n# print(\"left_back\", left_back)\n\nans = max(max(right), max(left))\n# print(ans)\n# right -> left\nfor i in range(N-1):\n    ans = max(ans, right_back[i] + left[N-2-i])\n# left -> right\nfor i in range(N-1):\n    ans = max(ans, left_back[i] + right[N-2-i])\n\nprint(max(ans, 0))", "import sys\nreadline = sys.stdin.readline\n\ndef main():\n    N, C = map(int, readline().rstrip().split())\n    pair = [tuple(map(int, readline().rstrip().split())) for _ in range(N)]\n    x_acc_right = []  # \u6642\u8a08\u56de\u308a\u65b9\u5411\u306bi\u79fb\u52d5\u3057\u305f\u6642\u306e\u6700\u5927\u306e\u5229\u5f97\n    gain, max_gain = 0, 0\n    for xi, vi in pair:\n        gain += vi\n        max_gain = max(max_gain, gain - xi)\n        x_acc_right.append(max_gain)\n        \n    x_acc_left = []  # \u53cd\u6642\u8a08\u56de\u308a\u65b9\u5411\u306bi\u79fb\u52d5\u3057\u305f\u6642\u306e\u6700\u5927\u306e\u5229\u5f97\n    gain, max_gain = 0, 0\n    for xi, vi in pair[::-1]:\n        gain += vi\n        max_gain = max(max_gain, gain - (C - xi))\n        x_acc_left.append(max_gain)\n        \n    res = max(x_acc_right[-1], x_acc_left[-1])\n    # \u6642\u8a08\u56de\u308a\u306b\u9032\u3093\u3060\u5f8c\u3001\u539f\u70b9\u306b\u623b\u3063\u3066\u53cd\u6642\u8a08\u56de\u308a\u306b\u9032\u3080\u30d1\u30bf\u30fc\u30f3\n    gain = 0\n    for i in range(N-1):\n        xi, vi = pair[i]\n        gain += vi\n        res = max(res, gain - 2 * xi + x_acc_left[N-i-2])\n\n    # \u53cd\u6642\u8a08\u56de\u308a\u306b\u9032\u3093\u3060\u5f8c\u3001\u539f\u70b9\u306b\u623b\u3063\u3066\u6642\u8a08\u56de\u308a\u306b\u9032\u3080\u30d1\u30bf\u30fc\u30f3\n    gain = 0\n    for i in range(N-1, 0, -1):\n        xi, vi = pair[i]\n        gain += vi\n        res = max(res, gain - 2 * (C-xi) + x_acc_right[i-1])\n        \n    print(res)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput = sys.stdin.readline\nN,C = map(int,input().split())\nXV = [tuple(map(int,input().split())) for i in range(N)]\n\nrcum1 = [0]\nrcum2 = [0]\nrcummx = [0]\npx = 0\nfor x,v in XV:\n    d = x - px\n    rcum1.append(rcum1[-1] + v - d)\n    rcum2.append(rcum2[-1] + v - 2*d)\n    rcummx.append(max(rcummx[-1], rcum1[-1]))\n    px = x\n\nlcum1 = [0]\nlcum2 = [0]\nlcummx = [0]\npx = C\nfor x,v in reversed(XV):\n    d = px - x\n    lcum1.append(lcum1[-1] + v - d)\n    lcum2.append(lcum2[-1] + v - 2*d)\n    lcummx.append(max(lcummx[-1], lcum1[-1]))\n    px = x\nlcum1.reverse()\nlcum2.reverse()\nlcummx.reverse()\n\nans = max(rcummx[-1], lcummx[0])\nfor i in range(N+1):\n    a = rcum2[i] + lcummx[i]\n    b = lcum2[i] + rcummx[i]\n    ans = max(ans, a, b)\nprint(ans)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\nclass SegTree:\n    \"\"\"\n    init(init_val, ide_ele): \u914d\u5217init_val\u3067\u521d\u671f\u5316 O(N)\n    update(k, x): k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0 O(N)\n    query(l, r): \u533a\u9593[l, r)\u3092segfunc\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059 O(logN)\n    \"\"\"\n    def __init__(self, init_val, segfunc, ide_ele):\n        \"\"\"\n        init_val: \u914d\u5217\u306e\u521d\u671f\u5024\n        segfunc: \u533a\u9593\u306b\u3057\u305f\u3044\u64cd\u4f5c\n        ide_ele: \u5358\u4f4d\u5143\n        n: \u8981\u7d20\u6570\n        num: n\u4ee5\u4e0a\u306e\u6700\u5c0f\u306e2\u306e\u3079\u304d\u4e57\n        tree: \u30bb\u30b0\u30e1\u30f3\u30c8\u6728(1-index)\n        \"\"\"\n        n = len(init_val)\n        self.segfunc = segfunc\n        self.ide_ele = ide_ele\n        self.num = 1 << (n - 1).bit_length()\n        self.tree = [ide_ele] * 2 * self.num\n        # \u914d\u5217\u306e\u5024\u3092\u8449\u306b\u30bb\u30c3\u30c8\n        for i in range(n):\n            self.tree[self.num + i] = init_val[i]\n        # \u69cb\u7bc9\u3057\u3066\u3044\u304f\n        for i in range(self.num - 1, 0, -1):\n            self.tree[i] = self.segfunc(self.tree[2 * i], self.tree[2 * i + 1])\n\n    def update(self, k, x):\n        \"\"\"\n        k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0\n        k: index(0-index)\n        x: update value\n        \"\"\"\n        k += self.num\n        self.tree[k] = x\n        while k > 1:\n            self.tree[k >> 1] = self.segfunc(self.tree[k], self.tree[k ^ 1])\n            k >>= 1\n\n    def query(self, left, right):\n        \"\"\"\n        [left, right)\u306esegfunc\u3057\u305f\u3082\u306e\u3092\u5f97\u308b\n        left: index(0-index)\n        right: index(0-index)\n        \"\"\"\n        res = self.ide_ele\n        left += self.num\n        right += self.num\n        while left < right:\n            if left & 1:\n                res = self.segfunc(res, self.tree[left])\n                left += 1\n            if right & 1:\n                res = self.segfunc(res, self.tree[right - 1])\n            left >>= 1\n            right >>= 1\n        return res\n\n\ndef resolve():\n    n, c = list(map(int, input().split()))\n    XY = [list(map(int, input().split())) for _ in range(n)]\n    R1 = [0]\n    prev = 0\n    for x, y in XY:\n        R1.append(R1[-1] + y - (x - prev))\n        prev = x\n    R2 = [0]\n    prev = 0\n    for x, y in XY[::-1]:\n        R2.append(R2[-1] + y - ((c - x) - prev))\n        prev = (c - x)\n\n    res = max(max(R1), max(R2))\n    seg1 = SegTree(R2, lambda x, y: max(x, y), 0)\n    for i in range(1, n + 1):\n        point1 = R1[i] - XY[i - 1][0]\n        point2 = seg1.query(0, n + 1 - i)\n        res = max(res, point1 + point2)\n\n    seg2 = SegTree(R1, lambda x, y: max(x, y), 0)\n    for i in range(1, n + 1):\n        point1 = R2[i] - (c - XY[-i][0])\n        point2 = seg2.query(0, n + 1 - i)\n        res = max(res, point1 + point2)\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, c = list(map(int, input().split()))\n    XY = [list(map(int, input().split())) for _ in range(n)]\n    R1, R2 = [0], [0]\n    max1, max2 = [0], [0]\n    ma = 0\n    prev = 0\n    for x, y in XY:\n        R1.append(R1[-1] + y - (x - prev))\n        prev = x\n        if ma < R1[-1]:\n            ma = R1[-1]\n        max1.append(ma)\n\n    ma = 0\n    prev = 0\n    for x, y in XY[::-1]:\n        R2.append(R2[-1] + y - ((c - x) - prev))\n        prev = (c - x)\n        if ma < R2[-1]:\n            ma = R2[-1]\n        max2.append(ma)\n\n    res = max(max(R1), max(R2))\n    for i in range(1, n + 1):\n        point1 = R1[i] - XY[i - 1][0] + max2[n - i]\n        point2 = R2[i] - (c - XY[-i][0]) + max1[n - i]\n        res = max(res, point1, point2)\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "n,c= map(int,input().split())\nxlist=[]\nfor i in range(n):\n    x,v= map(int,input().split())\n    xlist.append((x,v))\nfclock=[[0,0] for _ in range(n)]\nftemp,fval=[0]*n,[0]*n\nfor i in range(n):\n    if i==0:\n        fval[0]=xlist[i][1]\n        if fval[i]-xlist[i][0]<0:fclock[i]=[-1,0]\n        else:fclock[i]=[0,fval[0]-xlist[i][0]]\n    else:\n        fval[i]=fval[i-1]+xlist[i][1]\n        if fclock[i-1][1]<fval[i]-xlist[i][0]:\n            fclock[i]=[i,fval[i]-xlist[i][0]]\n        else:fclock[i]=fclock[i-1]\nfret=[xlist[i][0] for i in range(n)]\nrxlist=[]\nfor i in range(n-1,-1,-1):rxlist.append([c-xlist[i][0],xlist[i][1]])\nrclock=[[0,0] for _ in range(n)]\nrtemp,rval=[0]*n,[0]*n\nfor i in range(n):\n    if i==0:\n        rval[0]=rxlist[i][1]\n        if rval[i]-rxlist[i][0]<0:rclock[i]=[-1,0]\n        else:rclock[i]=[0,rval[0]-rxlist[i][0]]\n    else:\n        rval[i]=rval[i-1]+rxlist[i][1]\n        if rclock[i-1][1]<rval[i]-rxlist[i][0]:rclock[i]=[i,rval[i]-rxlist[i][0]]\n        else:rclock[i]=rclock[i-1]\n\nrret=[rxlist[i][0] for i in range(n)]\ngmax=max(rclock[n-1][1],fclock[n-1][1])\nfor i in range(n-1):\n    tempg=fclock[i][1]+rclock[n-2-i][1]\n    if fclock[i][0]<0 or rclock[n-2-i][0]<0:pass\n    else:tempg-=min(fret[fclock[i][0]],rret[rclock[n-2-i][0]])\n    gmax=max(gmax,tempg)\nprint(gmax)", "n, c = list(map(int, input().split()))\nx = [0]*(n+2)\nv = [0]*(n+2)\nfor i in range(1, n+1):\n    x[i], v[i] = list(map(int, input().split()))\nx[n+1] = c\ndp = [[0]*100100 for _ in range(2)]\n\nans = 0\ncal = 0\nfor i in range(1, n+1):\n    cal -= x[i] - x[i-1]\n    cal += v[i]\n    dp[0][i] = max(dp[0][i-1], cal)\n\ncal = 0\nfor i in range(n, 0, -1):\n    cal -= x[i+1] - x[i]\n    cal += v[i]\n    dp[1][i] = max(dp[1][i+1], cal)\n\nans = 0\nfor i in range(n+1):\n    cal = dp[0][i] + dp[1][i+1] - x[i]\n    ans = max(ans, cal)\n\n    cal = dp[0][i] + dp[1][i+1] - c + x[i+1]\n    ans = max(ans, cal)\nprint(ans)\n", "from itertools import *\nn,c,*u=map(int,open(0).read().split());x,a=u[::2]+[c],[0]+list(accumulate(u[1::2]));ans=l=r=0\nfor b in range(n+1):t,d,l,r=a[n]-a[b],c-x[b],max(l,a[b]-x[b-1]),max(r,a[b]-2*x[b-1]);ans=max(ans,l+t-2*d,r+t-d)\nprint(ans)", "from itertools import accumulate\n\n\nN, C, *xv = list(map(int, open(0).read().split()))\nxv = [(x, v) for x, v in zip(*[iter(xv)] * 2)]\n\ncw_acc = [0] * (N + 1)\nccw_acc = [0] * (N + 1)\ncw_prev = 0\nccw_prev = C\nfor i in range(N):\n    k = N - i - 1\n    cw_acc[i + 1] = cw_acc[i] + xv[i][1] - (xv[i][0] - cw_prev)\n    cw_prev = xv[i][0]\n    ccw_acc[i + 1] = ccw_acc[i] + xv[k][1] - (ccw_prev - xv[k][0])\n    ccw_prev = xv[k][0]\n\ncw_acc = list(accumulate(cw_acc, max))\nccw_acc = list(accumulate(ccw_acc, max))\nans = 0\nfor i in range(N):\n    k = N - i - 1\n    ans = max(\n        ans,\n        cw_acc[i + 1],\n        cw_acc[i + 1] - xv[i][0] + ccw_acc[k],\n        ccw_acc[i + 1],\n        ccw_acc[i + 1] - (C - xv[k][0]) + cw_acc[k],\n    )\nprint(ans)\n", "def main():\n\timport sys\n\tinput=sys.stdin.readline\n\tl=[[0,0,0]];r=[[0,0,0]]\n\tn,c=map(int,input().split())\n\tfor i in range(n):\n\t\tx,v=map(int,input().split())\n\t\tr.append([x,v])\n\t\tl.append([c-x,v])\n\tr.sort()\n\tl.sort()\n\tfor x in (l,r):\n\t\tnow=0\n\t\tfor i in range(n):\n\t\t\tnow+=x[i+1][1]\n\t\t\tx[i+1].append(max(now-x[i+1][0],x[i][2]))\n\t\t\tif x[i+1][2]==x[i][2]:\n\t\t\t\tx[i+1][0]=x[i][0]\n\tans=0\n\tfor i in range(n+1):\n\t\ta=l[i][0]\n\t\tb=r[n-i][0]\n\t\tans=max(l[i][2]+r[n-i][2]-min(a,b),ans)\n\tprint(ans)\ndef __starting_point():\n\tmain()\n__starting_point()", "import itertools\nN, C = list(map(int, input().split()))\nX = []\nV = []\nfor n in range(N):\n    x, v = list(map(int,input().split()))\n    X.append(x)\n    V.append(v)\nXr = X[::-1]\nVr = V[::-1]\nXl = [0] + X\nVl = [0] + V\nXr = [0] + [C-x for x in Xr] # \u9006\u306b\u56de\u308b\u306e\u3067C\u304b\u3089\u5f15\u304f\nVr = [0] + Vr\n\nVl = list(itertools.accumulate(Vl)) # x\u306f\u7d2f\u7a4d\u3057\u305f\u5024\u306a\u306e\u3067\u3001v\u3082\u7d2f\u7a4d\u548c\u306b\u7d71\u4e00\nVr = list(itertools.accumulate(Vr))\n\ndef update_mx(ls):\n    mx = 0\n    for i in range(len(ls)):\n        mx = max(mx, ls[i])\n        ls[i] = mx\n    return ls\n\ndef create(V,X,k):\n    ls = []\n    for n in range(N+1):\n        ls.append(V[n]-k*X[n]) # \u5f80\u5fa9\u3059\u308b\u5834\u5408\u306fk=2\n    return update_mx(ls)\n\nL = create(Vl,Xl,1) # \u6700\u826f\u306e\u5024[\u5de6\u7aef\u3068\u3057\u3066\u8a31\u5bb9\u3055\u308c\u308b\u4f4d\u7f6e]\uff08\u7247\u9053\uff09\nLt = create(Vl,Xl,2) # \u6700\u826f\u306e\u5024[\u5de6\u7aef\u3068\u3057\u3066\u8a31\u5bb9\u3055\u308c\u308b\u4f4d\u7f6e]\uff08\u5f80\u5fa9\uff09\nR = create(Vr,Xr,1)\nRt = create(Vr,Xr,2)\n\nans = 0\nfor n in range(N+1):\n    #print (n,N-n)\n    ans = max(ans, Lt[n] + R[N-n])\n    ans = max(ans, Rt[n] + L[N-n])\nprint (ans)\n    \n", "N, C = map(int, input().split())\nXV = []\n\nfor _ in range(N):\n  x, v = map(int, input().split())\n  XV.append((x, v))\n\n#R:\u53f3\u56de\u308a\u3067\u305d\u3053\u307e\u3067\u884c\u304f\u3068\u304d\u306e\u6e80\u8db3\u5ea6\n#Rr:\u53f3\u884c\u3063\u3066\u5f15\u304d\u8fd4\u3059\u6642\u306e\u6700\u5927\u6e80\u8db3\u5ea6\nR = [0]\nRr = [0]\nfor x, v in XV:\n  R.append(R[-1] + v)\n  Rr.append(Rr[-1] + v)\nfor i, (x, v) in enumerate(XV):\n  R[i+1] -= x\n  Rr[i+1] -= 2*x\nfor i in range(N):\n  Rr[i+1] = max(Rr[i+1], Rr[i])\n\n#\u5de6\u30d0\u30fc\u30b8\u30e7\u30f3\nL = [0]\nLr = [0]\nfor x, v in reversed(XV):\n  L.append(L[-1] + v)\n  Lr.append(Lr[-1] + v)\nfor i, (x, v) in enumerate(reversed(XV)):\n  L[i+1] -= (C-x)\n  Lr[i+1] -= 2*(C-x)\nfor i in range(N):\n  Lr[i+1] = max(Lr[i+1], Lr[i])\n\n#print(R, Rr, L, Lr)\nans = 0\n\nfor i in range(1, N+1):\n  temp = max(R[i], R[i] + Lr[N-i], L[N+1-i], L[N+1-i] + Rr[i-1])\n  ans = max(ans, temp)\n\nprint(ans)", "# https://atcoder.jp/contests/abc095/tasks/arc096_b\n# \u5199\u771f\u53c2\u8003\n\n\nimport sys\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef read_ints():\n    return list(map(int, read().split()))\n\n\ndef read_col(H):\n    '''\n    H is number of rows\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n    ex1)A,B=read_col(H)    ex2) A,=read_col(H) #\u4e00\u5217\u306e\u5834\u5408\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, read().split())))\n    return tuple(map(list, list(zip(*ret))))\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nfrom operator import itemgetter\nfrom itertools import product, permutations, combinations, accumulate\nfrom bisect import bisect_left, bisect_right  # , insort_left, insort_right\n\n\nN, C = read_ints()\nX, V = read_col(N)\n\n\ndef solve_max_a_plas_b(A: list, B: list):\n    '''max_{i<j}(a_i + b_j)\u3092O(n)\u3067\u89e3\u304f'''\n    assert len(A) == len(B)\n    A_accum = list(accumulate(A, func=max))\n    B_accum = list(accumulate(reversed(B), func=max))[::-1]\n    ret = 0\n    for i in range(len(A_accum) - 1):\n        ret = max(A_accum[i] + B_accum[i + 1], ret)\n    return ret\n\n\ndef ret_candi(X, V):\n    V_accum = list(accumulate(V))\n    V_accum_r = list(accumulate(reversed(V)))[::-1]\n    A, B = [], []\n    katamiti_max = 0  # \u5fc5\u305a\u6298\u308c\u66f2\u304c\u308b\u3068\u3082\u9650\u3089\u306a\u3044\u306e\u3067\n    for i in range(N):\n        katamiti_max = max(katamiti_max, V_accum[i] - X[i])\n        A.append(V_accum[i] - 2 * X[i])\n        B.append((V_accum_r[i]) - (C - X[i]))\n    # print(A, B)\n    return A, B, katamiti_max\n\n\ndef solve(X, V):\n    A, B, katamiti_max = ret_candi(X, V)\n    return max(solve_max_a_plas_b(A, B), katamiti_max)\n\n\nV_r = V[::-1]\nX_r = []\nfor x in reversed(X):\n    X_r.append(C - x)\nprint((max(solve(X, V), solve(X_r, V_r))))\n", "#095_D\nn, c = map(int, input().split())\nx, v = [0], [0]\nfor _ in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    v.append(b)\nx.append(c)\nv.append(0)\n\nfr1, fr2 = [0 for _ in range(n+1)], [0 for _ in range(n+1)]\nfl1, fl2 = [0 for _ in range(n+2)], [0 for _ in range(n+2)]\n\ntmp1, tmp2 = 0, 0\nfor i in range(0, n):\n    tmp1 += v[i+1] - (x[i+1] - x[i])\n    tmp2 += v[i+1] - 2 * (x[i+1] - x[i])\n    fr1[i+1] = max(tmp1, fr1[i])\n    fr2[i+1] = max(tmp2, fr2[i])\n    \ntmp1, tmp2 = 0, 0\nfor i in range(n, 0, -1):\n    tmp1 += v[i] - abs(x[i+1] - x[i])\n    tmp2 += v[i] - 2 * abs(x[i+1] - x[i])\n    fl1[i] = max(tmp1, fl1[i+1])\n    fl2[i] = max(tmp2, fl2[i+1])\n\nans = 0\nfor i in range(n+1):\n    ans = max(ans, fr1[i] + fl2[i+1], fr2[i] + fl1[i+1])\nprint(ans)", "def main():\n    from sys import stdin\n    def input():\n        return stdin.readline().strip()\n\n    n, c = list(map(int, input().split()))\n    # v: cumulative sum\n    x, v = [0] * (n+2), [0] * (n+2)\n    for i in range(n):\n        j, k = list(map(int, input().split()))\n        x[i+1] = j\n        v[i+1] = v[i] + k\n    x[n+1] = c\n    v[n+1] = v[n]\n    \n    max_nut_clockwise = [0] * (n+1)\n    for i in range(1, n+1):\n        max_nut_clockwise[i] = max(max_nut_clockwise[i-1], v[i] - x[i])\n    max_nut_counterclockwise = [0] * (n+1)\n    for i in range(n-1, -1, -1):\n        max_nut_counterclockwise[i] = max(max_nut_counterclockwise[i+1], v[-1] - v[i] - c + x[i+1])\n\n    ans = 0\n    # rotate clockwise, then rotate counterclockwise\n    for i in range(n):\n        if ans < v[i] - 2*x[i] + max_nut_counterclockwise[i]:\n            ans = v[i] - 2*x[i] + max_nut_counterclockwise[i]\n    # rotate counterclockwise, then rotate clockwise\n    for i in range(2, n+2):\n        if ans < v[-1] - v[i-1] - 2 * (c - x[i]) + max_nut_clockwise[i-1]:\n            ans = v[-1] - v[i-1] - 2 * (c - x[i]) + max_nut_clockwise[i-1]\n    \n    print(ans)\n\nmain()\n", "import sys\nreadline = sys.stdin.readline\n\nN,C = map(int,readline().split())\nsushi = [list(map(int,readline().split())) for i in range(N)]\nimport copy\nrevsushi = copy.deepcopy(sushi)[::-1]\nfor i in range(len(sushi)-1, 0, -1):\n  sushi[i][0] = sushi[i][0] - sushi[i - 1][0]\n\nfor i in range(len(revsushi)):\n  revsushi[i][0] = C - revsushi[i][0]\nfor i in range(len(revsushi)-1, 0, -1):\n  revsushi[i][0] = revsushi[i][0] - revsushi[i - 1][0]\n\n# \u5de6\u56de\u308a/\u53f3\u56de\u308a\u306bi\u500b\u98df\u3079\u305f\u3068\u304d\u306e\u7d50\u679c\n# 0\u500b\u306e\u3068\u304d\u306f0\u3092\u5165\u308c\u3066\u304a\u304f\nleft = [[0] * 2 for i in range(N + 1)]\nright = [[0] * 2 for i in range(N + 1)]\n\nleft[0] = [0,0]\nright[0] = [0,0]\n\n# \u7d2f\u7a4d\u30dd\u30a4\u30f3\u30c8, \u305d\u3053\u307e\u3067\u306e\u30d9\u30b9\u30c8\u30dd\u30a4\u30f3\u30c8\nfor i in range(len(sushi)):\n  x,v = sushi[i]\n  left[i + 1][0] = left[i][0] + v - x # \u6442\u53d6\u30ab\u30ed\u30ea\u30fc - \u6d88\u8cbb\u30ab\u30ed\u30ea\u30fc\n  if left[i + 1][0] > left[i][1]: # \u524d\u56de\u307e\u3067\u306e\u30d9\u30b9\u30c8\u3088\u308a\u512a\u308c\u3066\u3044\u308b\n    left[i + 1][1] = left[i + 1][0]\n  else:\n    left[i + 1][1] = left[i][1]\n    \n# \u3053\u306e\u72b6\u614b\u3067\u53f3\u56de\u308a\u306b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u304f\nbest = left[-1][1] # \u5de6\u56de\u308a\u306b\u3059\u3079\u3066\u53d6\u3063\u305f\u5834\u5408\u3092\u6700\u5927\u5024\u3068\u3057\u3066\u30b9\u30bf\u30fc\u30c8\ncal = 0\nfor i in range(len(revsushi)):\n  count = i + 1 # \u53d6\u308b\u5bff\u53f8\u306e\u6570\n  lp = left[N - count][1]\n  # \u9006\u56de\u308a\u306b\u53d6\u308c\u308b\u5bff\u53f8\u306e\u6700\u5927\u5024\n  x,v = revsushi[i]\n  cal += (v - x * 2)\n  if lp + cal > best:\n    best = lp + cal\n\n# \u53f3\u56de\u308a\u3092\u4f5c\u308b\nfor i in range(len(revsushi)):\n  x,v = revsushi[i]\n  right[i + 1][0] = right[i][0] + v - x\n  if right[i + 1][0] > right[i][1]:\n    right[i + 1][1] = right[i + 1][0]\n  else:\n    right[i + 1][1] = right[i][1]\n\nbest = max(best, right[-1][1])\ncal = 0\nfor i in range(len(sushi)):\n  count = i + 1 # \u53d6\u308b\u5bff\u53f8\u306e\u6570\n  rp = right[N - count][1]\n  # \u9006\u56de\u308a\u306b\u53d6\u308c\u308b\u5bff\u53f8\u306e\u6700\u5927\u5024\n  x,v = sushi[i]\n  cal += (v - x * 2)\n  if rp + cal > best:\n    best = rp + cal\n\nprint(best)", "#!/usr/bin/env python3\n\nn, c = list(map(int, input().split()))\n\nx, v = [], []\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    x.append(a)\n    v.append(b)\n\ncw = [0]*(n+1)\nccw = [0]*(n+1)\nfor i in range(n):\n    cw[i+1] = cw[i]+v[i]\n    ccw[i+1] = ccw[i]+v[-i-1]\n\n\nfor i in range(1, n+1):\n    cw[i] -= x[i-1]\n    ccw[i] -= c-x[-i]\n\n\nmaxcw = [0]*(n+1)\nmaxccw = [0]*(n+1)\nfor i in range(1, n+1):\n    maxcw[i] = max(maxcw[i-1], cw[i])\n    maxccw[i] = max(maxccw[i-1], ccw[i])\n\nans = max(0, maxcw[-1], maxccw[-1])\n\nfor i in range(1, n+1):\n    ans = max(ans, cw[i] + maxccw[-i-1] - x[i-1])\n    ans = max(ans, ccw[i] + maxcw[-i-1]-(c-x[-i]))\n\nprint(ans)\n", "N, C = list(map(int, input().split()))\n\nxv = [tuple(map(int, input().split())) for i in range(N)]\nxv2 = [(C - x, v)for x, v in xv[::-1]]\n\n\nL = [0]*N\nans = 0\nfor i, X in enumerate(xv):\n    x, v = X\n    L[i] = L[i-1] + v\nR = [0]*N\nfor i in range(N):\n    L[i] -= xv[i][0]\nfor i, X in enumerate(xv2):\n    x, v = X\n    R[i] = R[i-1] + v\nfor i in range(N):\n    R[i] -= xv2[i][0]\n\nLL = [0]*(N+1)\nRR = [0]*(N+1)\nfor i in range(N):\n    LL[i+1] = max(LL[i], L[i])\n    RR[i+1] = max(RR[i], R[i])\n\nans = 0\nans = max(ans, LL[-1])\nans = max(ans, RR[-1])\nfor i in range(N):\n    ans = max(ans, LL[N - 1 - i] + R[i] - xv2[i][0])\n    ans = max(ans, RR[N - 1 - i] + L[i] - xv[i][0])\nprint(ans)\n", "\n\n\n\nN,C = list(map(int, input().split()))\n\nxv = [tuple(map(int, input().split())) for _ in range(N)]\n\n\n# \u6642\u8a08\u56de\u308a\u3068\u53cd\u6642\u8a08\u56de\u308a\u3067\u5f97\u3089\u308c\u308b\u30ab\u30ed\u30ea\u30fc\u306e\u7d2f\u7a4d\u548c\u3092\u53d6\u3063\u3066\u304a\u304f\naccum_clockwise = [None] * N\naccum_clockwise[0] = xv[0]\ntmp = xv[0][1]\nfor i in range(1,N):\n    tmp += xv[i][1]\n    accum_clockwise[i] = (xv[i][0], tmp)\n\naccum_anticlockwise = [None] * N\naccum_anticlockwise[0] = (C - xv[-1][0], xv[-1][1])\ntmp = xv[-1][1]\nfor i in range(1, N):\n    tmp += xv[N-1-i][1]\n    accum_anticlockwise[i] = (C - xv[N-1-i][0], tmp)\n\n\n# \u6642\u8a08\u56de\u308a\u3068\u53cd\u6642\u8a08\u56de\u308a\u306b\u3064\u3044\u3066\u3001i\u500b\u76ee\u307e\u3067\u98df\u3079\u306b\u884c\u3063\u3066\u521d\u671f\u5024\u306b\u623b\u3063\u3066\u304f\u308b\u3068\u304d\u306b\u5f97\u3089\u308c\u308b\u3001\u6700\u9ad8\u30ab\u30ed\u30ea\u30fc\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\n# \u53cd\u6642\u8a08\u56de\u308a\u306bx\u500b\u307e\u3067\u98df\u3079\u306b\u884c\u3063\u305f\u3068\u304d\uff08\u5f15\u304d\u8fd4\u3055\u306a\u3044\u65b9\uff09\u3001\u6642\u8a08\u56de\u308a\u306b\u306fN-x\u500b\u307e\u3067\u98df\u3079\u3089\u308c\u308b\u306e\u3067\u3001N-x\u756a\u76ee\u306e\u3044\u305a\u308c\u304b\u307e\u3067\u98df\u3079\u306b\u884c\u3063\u3066\u623b\u3063\u305f\u6642\u306e\u6700\u9ad8\u30ab\u30ed\u30ea\u30fc\u3092\u4e8b\u524d\u306b\u6c42\u3081\u3066\u304a\u3044\u3066\u3001\n# \u53cd\u6642\u8a08\u56de\u308a\u306b\u305d\u308c\u305e\u308c\u306e\u5bff\u53f8\u307e\u3067\u98df\u3079\u306b\u884c\u3063\u305f\u6642\u306e\u70b9\u3068\u5408\u308f\u305b\u308b\uff08O(N^2)\u304b\u3089\u524d\u51e6\u7406\u3067O(N)\u306b\u5206\u89e3\uff09\nmax_clockwise = [0] * (N+1)\nfor i in range(N):\n    max_clockwise[i+1] = max(max_clockwise[i], accum_clockwise[i][1] - accum_clockwise[i][0] * 2)\n\n\nmax_anticlockwise = [0] * (N+1)\nfor i in range(N):\n    max_anticlockwise[i+1] = max(max_anticlockwise[i], accum_anticlockwise[i][1] - accum_anticlockwise[i][0] * 2)\n\n\n\nans_clockwise = 0\nfor i in range(N):\n    ans_clockwise = max(ans_clockwise, accum_clockwise[i][1] - accum_clockwise[i][0] + max_anticlockwise[N-1-i])\n\nans_anticlockwise = 0\nfor i in range(N):\n    ans_anticlockwise = max(ans_anticlockwise, accum_anticlockwise[i][1] - accum_anticlockwise[i][0] + max_clockwise[N-1-i])\n\nprint((max(ans_clockwise, ans_anticlockwise)))\n", "n,c=map(int,input().split())\nxv=[list(map(int,input().split())) for _ in range(n)]\nl,r,lret,rret=[],[],[],[]\nsl,sr=0,0\nfor i in range(n):\n    sl+=xv[i][1]\n    sr+=xv[n-i-1][1]\n    l.append(sl-xv[i][0])\n    lret.append(sl-2*xv[i][0])\n    r.append(sr-(c-xv[n-i-1][0]))\n    rret.append(sr-2*(c-xv[n-i-1][0]))\nfor i in range(1,n):\n    lret[i]=max(lret[i],lret[i-1])\n    rret[i]=max(rret[i],rret[i-1])\nans=max(0,max(l),max(r))\n#print(l)\n#print(r)\n#print(lret)\n#print(rret)\nfor i in range(n-1):\n    ans=max(ans,l[i]+rret[n-i-2],r[i]+lret[n-i-2])\nprint(ans)", "n,c=map(int,input().split())\nl,L,m,M,C,a,x,v=[0],[0],[0],[0],0,0,[],[]\nfor i in range(n):X,V=map(int,input().split());x.append(X);v.append(V)\nfor i in range(n):C+=v[i];l.append(max(l[-1],C-x[i]));L.append(max(L[-1],C-2*x[i]))\nC=0\nfor i in range(n)[::-1]:C+=v[i];m.append(max(m[-1],C-(c-x[i])));M.append(max(M[-1],C-2*(c-x[i])))\nfor i in range(n+1):a=max(a,l[i]+M[n-i],L[i]+m[n-i])\nprint(a)", "n,c = map(int,input().split())\na = [(0,0)]\nfor _ in range(n):\n  x,v = map(int,input().split())\n  a += [(x,v)]\na += [(0,0)]\nmax_r, max_l = [0], [0]\ns = 0\nfor i in range(1, n+1):\n  s += a[i][1]\n  max_r += [max(max_r[i-1], s-a[i][0])]\nmax_r += [0]\ns = 0\nfor i in range(1, n+1):\n  s += a[-i-1][1]\n  max_l += [max(max_l[i-1], s-c+a[-i-1][0])]\nmax_l += [0]\nmax_l.reverse()\nans = 0\nfor i in range(1, n+1):\n  ans = max(ans, max_r[i], max_l[i], max_r[i]+max_l[i+1]-a[i][0], max_r[i-1]+max_l[i]-c+a[i][0])\nprint(ans)", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N, C = [int(x) for x in input().split()]\n    XV = [[int(x) for x in input().split()] for _ in range(N)]\n\n    migi = [0]\n    last = 0\n    for x, v in XV:\n        migi.append(migi[-1] + v - x + last)\n        last = x\n\n    hidari = [0]\n    last = C\n    for x, v in XV[::-1]:\n        hidari.append(hidari[-1] + v - (last - x))\n        last = x\n\n    ans = max(max(migi), max(hidari))\n\n    migimax = []\n    ma = 0\n    for m in migi:\n        ma = max(ma, m)\n        migimax.append(ma)\n\n    hidarimax = []\n    ma = 0\n    for m in hidari:\n        ma = max(ma, m)\n        hidarimax.append(ma)\n\n    for i in range(N):\n        ans = max(ans, migi[i + 1] - XV[i][0] + hidarimax[N - i - 1])\n\n    for i in range(N):\n        ans = max(ans, hidari[i + 1] - (C - XV[-i - 1][0]) + migimax[N - i - 1])\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, C = lr()\nXV = np.array([lr() for _ in range(N)])\nright = XV[:, 1]\nr_pos = XV[:, 0]\nrcum = right.cumsum() - r_pos\nr_max_cum = np.maximum.accumulate(rcum)\nleft = right[::-1]\nl_pos = (C - r_pos)[::-1]\nlcum = left.cumsum() - l_pos\nl_max_cum = np.maximum.accumulate(lcum)\n\nanswer = max(0, r_max_cum[-1], l_max_cum[-1])\n# i\u500b\u76ee\u3067\u6298\u308a\u8fd4\u3059\nfor i in range(N-1):\n    temp = rcum[i] - r_pos[i]  # \u5e30\u308a\u306e\u8ddd\u96e2\u3092\u5f15\u304f\n    temp += l_max_cum[N-2-i]\n    if temp > answer:\n        answer = temp\n\nfor i in range(N-1):\n    temp = lcum[i] - l_pos[i]  # \u5e30\u308a\u306e\u8ddd\u96e2\u3092\u5f15\u304f\n    temp += r_max_cum[N-2-i]\n    if temp > answer:\n        answer = temp\n\nprint(answer)\n", "N, C = map(int, input().split())\n\nsushi = []\nfor i in range(N):\n    x, v = map(int, input().split())\n    sushi.append((x, v))\n\nleft = [0] * N\nleft2 = [0] * N\nright = [0] * N\nright2 = [0] * N\n\nd = 0\nd2 = 0\ncal = 0\nfor i in range(N):\n    x, v = sushi[i]\n    d = x\n    d2 = x * 2\n    cal += v\n    if i == 0:\n        right[i] = max(cal - d, 0)\n        right2[i] = max(cal - d2, 0)\n    else:\n        right[i] = max(cal - d, right[i-1])\n        right2[i] = max(cal - d2, right2[i-1])\n\nd = 0\nd2 = 0\ncal = 0\nfor i in reversed(range(N)):\n    x, v = sushi[i]\n    d = C - x\n    d2 = (C - x) * 2\n    cal += v\n    if i == 0:\n        left[i] = max(cal - d, 0)\n        left2[i] = max(cal - d2, 0)\n    else:\n        left[i] = max(cal - d, left[i-1])\n        left2[i] = max(cal - d2, left[i-1])\n\nans = 0\n# \u5de6\u5074\u3092\u5168\u90e8\u8a66\u3059\nfor i in range(N):\n    if i == 0:\n        ans = max(ans, left[i])\n    else:\n        ans = max(ans, left[i] + right2[i-1])\n# \u53f3\u5074\u3092\u5168\u90e8\u8a66\u3059\nfor i in range(N):\n    if i == N - 1:\n        ans = max(ans, right[i])\n    else:\n        ans = max(ans, right[i] + left2[i+1])\n\nprint(ans)", "n,c = map(int,input().split())\nx = [0]*n\nv = [0]*n\nfor i in range(n): x[i],v[i] = map(int,input().split())\nx1 = [0]+x\nv1 = [0]+v\nx2 = [0]+list(map(lambda a:c-a,x[::-1]))\nv2 = [0]+v[::-1]\nlst1 = [0]*(n+1)\nlst2 = [0]*(n+1)\nlst1[0] = lst2[0] = (0,0)\n\ndef f(l,x,v):\n    maxcal = pos = sumcal = 0\n    for i in range(1,n+1):\n        dist = x[i]-x[i-1]\n        sumcal += v[i] - dist\n        if sumcal > maxcal:\n            maxcal = sumcal\n            pos = x[i]\n        l[i] = (maxcal,pos)\n\nf(lst1,x1,v1)\nf(lst2,x2,v2)\n# print(lst1)\n# print(lst2)\n\nans = 0\nfor i in range(n+1):\n    maxcal1,dist1 = lst1[i]\n    maxcal2,dist2 = lst2[n-i]\n    ans = max(ans,maxcal1+maxcal2-min(dist1,dist2))\nprint(ans)", "import sys\ninput = sys.stdin.readline\nfrom itertools import product\nINF = 10**9\nMOD = 10**9 + 7\n\ndef main():\n    n,c = list(map(int,input().split()))\n    sushi = [list(map(int,input().split())) for _ in range(n)]\n    \n    r = [0] * (n+1)\n    l = [0] * (n+1)\n    r_max = [0] * (n+1)\n    l_max = [0] * (n+1)\n\n    x = 0\n    y = c\n    for i in range(n):\n        r[i+1] = r[i] + sushi[i][1] - sushi[i][0] + x\n        r_max[i+1] = max(r_max[i],r[i+1])\n        x = sushi[i][0]\n\n        l[-i-2] = l[-i-1] + sushi[-i-1][1] - y + sushi[-i-1][0]\n        l_max[-i-2] = max(l_max[-i-1],l[-i-2])\n        y = sushi[-i-1][0]\n    \n    ans = max(r_max[-1], l_max[0])\n    for i in range(n-1):\n        tmp1 = r[i+1] + l_max[i+1] - sushi[i][0]\n        tmp2 = l[i+1] + r_max[i+1] - c + sushi[i+1][0]\n        ans = max (ans ,tmp1 ,tmp2 )\n    \n    print(ans)\n  \ndef __starting_point():\n    main()\n\n\n__starting_point()", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, C = lr()\nXV = np.array([lr() for _ in range(N)])\nSushi = XV[:, 1]\nSushi_rev = Sushi[::-1]\ndis = XV[:, 0]\ndis_rev = C - dis[::-1]\nSushi_cum = Sushi.cumsum()\nSushi_rev_cum = Sushi_rev.cumsum()\nSushi_cum -= dis\nSushi_rev_cum -= dis_rev\nSushi_max = np.maximum.accumulate(Sushi_cum)\nSushi_max_rev = np.maximum.accumulate(Sushi_rev_cum)\nanswer = max(0, Sushi_max[-1], Sushi_max_rev[-1])\n\nfor i in range(N-1):\n    cal = Sushi_cum[i] - dis[i] + Sushi_max_rev[N-2-i]\n    cal2 = Sushi_rev_cum[i] - dis_rev[i] + Sushi_max[N-2-i]\n    cal = max(cal, cal2)\n    if cal > answer:\n        answer = cal\n\nprint(answer)\n", "import sys\ninput = sys.stdin.readline\nN,C = map(int, input().split())\n\nX = []\n\nfor i in range(N):\n  x,c = map(int, input().split())\n  X.append((x,c))\n  \nPS1 = [[0,0,0]]\nPS2 = [[0,0,0]]\nQS1 = [[0,0,0]]\nQS2 = [[0,0,0]]\n\n# PS[i] = c,i,c0\n# PS1:\u53f3\u56de\u308a\u3067\u5f97\u3089\u308c\u308b\u30b3\u30b9\u30c8\uff08\u884c\u304d\u306ex\u306e\u30ed\u30b9\u7d44\u307f\u8fbc\u307f\n# PS2:\u53f3\u56de\u308a\uff0bO\u306b\u5e30\u308b\u307e\u3067\u3067\u5f97\u3089\u308c\u308b\u30b3\u30b9\u30c8\n# i:X\u306eindex\u3002\n\nfor i in range(N):\n  c1, xx, c0 = PS1[i]\n  c2, _,  _  = PS2[i]\n  x,c = X[i]\n  PS1.append([c0+c-x, i+1, c0+c])\n  PS2.append([c0+c-x*2, i+1, c0+c])\n\nfor i in range(N):\n  c1, xx, c0 = QS1[i]\n  c2, _,  _  = QS2[i]\n  x,c = X[N-i-1]\n  x = C-x\n  QS1.append([c0+c-x, i+1, c0+c])\n  QS2.append([c0+c-x*2, i+1, c0+c])\n\nPS1.sort(reverse=True)\nPS2.sort(reverse=True)\n\n\"\"\"\nprint(PS1)\nprint(PS2)\nprint(QS1)\nprint(QS2)\n\"\"\"\n\n# \u5de6\u56de\u308a\u306eINDEX\u3092q\u3068\u3059\u308b\u3002\u305f\u3060\u3057\u539f\u70b9=0\u3068\u3059\u308b\n# \u3059\u308b\u3068QSindex + PSindex <= N \u3067\u3042\u308c\u3070OK\u3067\n# \u304b\u3064PS\u304c\u30bd\u30fc\u30c8\u6e08\u5358\u8abf\u6e1b\u5c11\u306a\u306e\u3067\u3001\u8caa\u6b32\u306b\u53d6\u308c\u308b\u306f\u305a\nans = 0\nps1index, ps2index = 0,0\nfor q in range(N+1):\n  while PS1[ps1index][1] + q > N:\n    ps1index += 1\n  while PS2[ps2index][1] + q > N:\n    ps2index += 1\n  a1 = PS1[ps1index][0] + QS2[q][0]\n  a2 = PS2[ps2index][0] + QS1[q][0]\n  ans = max(ans, a1,a2)\n  \nprint(ans)", "N, C = map(int,input().split())\nX = []\nV = []\nfor _ in range(N):\n    x, v = map(int,input().split())\n    X.append(x)\n    V.append(v)\n\nA = V[:]\nB = V[::-1]\n\nfor i in range(N-1):\n    A[i+1] += A[i]\n    B[i+1] += B[i]\n\nP = [0]\nQ = [0]\n\nfor i in range(N):\n    P.append(max(P[-1], A[i] - X[i] * 2))\n    Q.append(max(Q[-1], B[i] - (C - X[N-i-1]) * 2))\n\nans = 0\n\nfor i in range(N):\n    ans = max(ans, A[i] + Q[N-i-1] - X[i])\n    ans = max(ans, B[i] + P[N-i-1]- (C - X[N-i-1]))\n\nprint(ans)", "n,c=map(int,input().split())\nxv=[list(map(int,input().split()))for _ in range(n)]\nl=[0]\ns=0\nfor x,v in xv:\n\ts+=v\n\tl.append(max(l[-1],s-x))\nr=[0]\ns=0\nfor x,v in xv[::-1]:\n\ts+=v\n\tr.append(max(r[-1],s-(c-x)))\nans=max(l+r)\ns=0\nfor i in range(n):\n\ts+=xv[i][1]\n\tans=max(ans,s-2*xv[i][0]+r[n-i-1])\ns=0\nfor i in range(n-1,-1,-1):\n\ts+=xv[i][1]\n\tans=max(ans,s-2*(c-xv[i][0])+l[i])\nprint(ans)", "import heapq\n\nN, C = map(int,input().split())\n\nsushi = []\nfor i in range(N):\n    cur_sushi = list(map(int,input().split()))\n    sushi.append(cur_sushi)\n\nsum_V, sum_right = [0], [0]\nfor i in range(N):\n    sum_V.append(sum_V[i]+sushi[i][1])\n    sum_right.append(sum_V[i+1] - sushi[i][0])\n\nsum_V, sum_left = [0], [0]\nfor i in range(N):\n    sum_V.append(sum_V[i]+sushi[N-1-i][1])\n    sum_left.append(sum_V[i+1] - (C-sushi[N-1-i][0]))\n\nans = max(max(sum_left), max(sum_right))\n\nleft = [0]\nheapq.heapify(left)\n\nfor l in range(N):\n    now = sum_right[N-l] - sushi[N-1-l][0]\n    heapq.heappush(left, -sum_left[l])\n    now -= left[0]\n    ans = max(ans,now)\n\nright = [0]\nheapq.heapify(right)\n\nfor r in range(N):\n    now = sum_left[N-r] - (C - sushi[r][0])\n    heapq.heappush(right, -sum_right[r])\n    now -= right[0]\n    ans = max(ans,now)\n\nprint(ans)", "n,c=map(int,input().split())\narr=[list(map(int,input().split())) for _ in range(n)]\nacumr=[0,arr[0][1]-arr[0][0]]\nacuml=[0,arr[-1][1]-(c-arr[-1][0])]\nfor i in range(1,n):\n  acumr.append(acumr[-1]+arr[i][1]-(arr[i][0]-arr[i-1][0]))\n  acuml.append(acuml[-1]+arr[-(i+1)][1]-(arr[-i][0]-arr[-(i+1)][0]))\nmaxr=[0]\nmaxl=[0]\nfor i in range(1,n+1):\n  maxr.append(max(maxr[-1],acumr[i]))\n  maxl.append(max(maxl[-1],acuml[i]))\nans=0\nfor i in range(1,n+1):\n  tmp1=acumr[i]\n  tmp2=acuml[i]\n  if arr[i-1][0]<maxl[n-i]:\n    tmp1+=maxl[n-i]-arr[i-1][0]\n  if c-arr[-i][0]<maxr[n-i]:\n    tmp2+=maxr[n-i]-(c-arr[-i][0])\n  ans=max(ans,tmp1)\n  ans=max(ans,tmp2)\nprint(ans)", "N, C = list(map(int, input().split()))\nx = [None] * N\nv = [None] * N\nfor i in range(N):\n    x[i], v[i] = list(map(int, input().split()))\n\na0 = [None] * N\na = v[0] - x[0]\na0[0] = max(0, a)\nfor i in range(1, N):\n    a += v[i] - (x[i] - x[i - 1])\n    a0[i] = max(a, a0[i - 1])\n\na1 = [None] * N\na = v[N - 1] - (C - x[N - 1])\na1[0] = max(0, a)\nfor i in range(1, N):\n    a += v[N - 1 - i] - ((C - x[N - 1 - i]) - (C - x[N - 1 - (i - 1)]))\n    a1[i] = max(a, a1[i - 1])\n\nresult = max(a0[N - 1], a1[N - 1])\nfor i in range(N - 1):\n    result = max(result, a0[i] - x[i] + a1[N - 1 - (i + 1)])\nfor i in range(N - 1):\n    result = max(result, a1[i] - (C - x[N - 1 - i]) + a0[N - 1 - (i + 1)])\nprint(result)\n", "n, c = list(map(int, input().split()))\n\nx = [0] * n\nv = [0] * n\nfor i in range(n):\n    x[i], v[i] = list(map(int, input().split()))\n\nx = [0] + x + [c]\nv = [0] + v + [0]\n\nleft = [0] * (n + 2)\nright = [0] * (n + 2)\n\nfor i in range(n + 1):\n    left[i + 1] = left[i] + v[i + 1] - (x[i + 1] - x[i])\nfor i in range(n + 1, 0, -1):\n    right[i - 1] = right[i] + v[i - 1] - (x[i] - x[i - 1])\n\n\nfor i in range(n + 1):\n    left[i + 1] = max(left[i + 1], left[i])\nfor i in range(n + 1, 0, -1):\n    right[i - 1] = max(right[i - 1], right[i])\n\n# \u5f15\u304d\u8fd4\u3055\u306a\u3044\u6700\u5927\nans = max(left[-1], right[0])\nright = list(reversed(right))\nfor i in range(n):\n    tmp = left[i] - x[i]\n    rem = n - i\n    ans = max(ans, tmp + right[n - i])\n\nfor i in range(n):\n    tmp = right[i] - (c - x[-(i + 1)])\n    rem = n - i\n    ans = max(ans, tmp + left[n - i])\n\nprint(ans)\n", "import sys\nfrom copy import deepcopy as copy\ninput = sys.stdin.readline\n\ndef main():\n  n, c = map(int, input().split())\n  sushi = [[0, 0]]+[[int(x) for x in input().split()] for _ in range(n)]\n\n  order = [0]*(n+1)\n  reverse = [0]*(n+1)\n\n  for i in range(n):\n    order[i+1] = order[i]+sushi[i+1][1]\n    reverse[i+1] = reverse[i]+sushi[n-i][1]\n\n  order_index = [i for i in range(n+1)]\n  reverse_index = [-i for i in range(n+1)]\n  for i in range(n):\n    order[i+1] -= sushi[i+1][0]\n    if order[i+1] <= order[i]:\n      order[i+1] = order[i]\n      order_index[i+1] = order_index[i]\n    reverse[i+1] -= c-sushi[n-i][0]\n    if reverse[i+1] <= reverse[i]:\n      reverse[i+1] = reverse[i]\n      reverse_index[i+1] = reverse_index[i]\n\n  order_back = copy(order)\n  reverse_back = copy(reverse)\n  for i in range(n+1):\n    order_back[i] -= sushi[order_index[i]][0]\n    if i != 0 and order_back[i] < order_back[i-1]:\n      order_back[i] = order_back[i-1]\n    reverse_back[i] -= (c-sushi[reverse_index[i]][0])%c\n    if i != 0 and reverse_back[i] < reverse_back[i-1]:\n      reverse_back[i] < reverse_back[i-1]\n\n  ans = 0\n  for i in range(n+1):\n    sub = max(order[i]+reverse_back[n-i], order_back[i]+reverse[n-i])\n    if ans < sub:\n      ans = sub\n\n  print(ans)\n\ndef __starting_point():\n  main()\n__starting_point()", "import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import gcd\n \ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef S_MAP(): return map(str, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef S_LIST(): return list(map(str, input().split()))\n \nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nN, C = MAP()\nL = [LIST() for i in range(N)]\n# oa, ob\nA = [0] * N\nB = [0] * N\n\nX = []\nV = []\nfor x, v in L:\n    X.append(x)\n    V.append(v)\n\ntmp_v = 0\nfor i in range(N):\n    tmp_v += V[i]\n    A[i] = tmp_v - X[i]\n\ntmp_v = 0\nfor i in range(N-1, -1, -1):\n    tmp_v += V[i]\n    B[i] = tmp_v - (C - X[i])\n\ngA = [0] * N\ngA[0] = A[0]\n\nfor i in range(1, N):\n    gA[i] = max(gA[i-1], A[i])\n\ngB = [0] * N\ngB[N-1] = B[N-1]\n\nfor i in range(N-2, -1, -1):\n    gB[i] = max(gB[i+1], B[i])\n\na = max(A)\nb = max(B)\nc, d = 0, 0\nif N > 1:\n    c = max([A[i] - X[i] + gB[i+1] for i in range(0, N-1)])\n    d = max([B[i] - (C - X[i]) + gA[i-1] for i in range(N-1, 0, -1)])    \nprint(max(a, b, c, d, 0))", "from itertools import accumulate\n\nn,c = list(map(int, input().split()))\nxv = [[0,0]]+[list(map(int, input().split())) for i in range(n)]\nxv_rev = [[0,0]]+[[c-x,v] for x,v in xv][:0:-1]\ncumsum = [i-x for i,(x,v) in zip(list(accumulate([v for x,v in xv])),xv)]\ncumsum_rev = [i-x for i,(x,v) in zip(list(accumulate([v for x,v in xv_rev])),xv_rev)]\nxv_max = [0]\nxv_rev_max = [0]\nnow_v = 0\nfor k,(x,v) in enumerate(xv[:-1],1):\n  xv_max.append(max(xv_max[-1], cumsum[k]))\nfor k,(x,v) in enumerate(xv_rev[:-1],1):\n  xv_rev_max.append(max(xv_rev_max[-1], cumsum_rev[k]))\nans = 0\nfor i,j,(x,v) in zip(xv_max,cumsum_rev[::-1],xv_rev[::-1]):\n  ans = max(ans,i+j-x)\nfor i,j,(x,v) in zip(xv_rev_max,cumsum[::-1],xv[::-1]):\n  ans = max(ans,i+j-x)\nprint(ans)\n", "n,c=map(int,input().split())\nx=[]\nv=[]\nrightvalue=[]\ntemp=0\nfor i in range(n):\n  xi,vi=map(int,input().split())\n  x.append(xi)\n  v.append(vi)\n  temp+=vi\n  rightvalue.append(temp-xi)\nrightmaxdouble=[]\ncurrentmax=0\nfor i in range(n):\n  if currentmax<rightvalue[i]-x[i]:\n    currentmax=rightvalue[i]-x[i]\n  rightmaxdouble.append(currentmax)\nleftvalue=[]\ntemp=0\nfor i in range(n):\n  temp+=v[n-1-i]\n  leftvalue.append(temp-(c-x[n-1-i]))\nleftmaxdouble=[]\ncurrentmax=0\nfor i in range(n):\n  if currentmax<leftvalue[i]-(c-x[n-1-i]):\n    currentmax=leftvalue[i]-(c-x[n-1-i])\n  leftmaxdouble.append(currentmax)\nans=0\nfor i in range(n):\n  if n-i>=2:\n    if rightvalue[i]+leftmaxdouble[n-i-2]>ans:\n      ans=rightvalue[i]+leftmaxdouble[n-i-2]\n  else:\n    if rightvalue[i]>ans:\n      ans=rightvalue[i]\nfor i in range(n):\n  if n-i>=2:\n    if leftvalue[i]+rightmaxdouble[n-i-2]>ans:\n      ans=leftvalue[i]+rightmaxdouble[n-i-2]\n  else:\n    if leftvalue[i]>ans:\n      ans=leftvalue[i]\nprint(ans)", "from copy import deepcopy as copy\n\nn, c = map(int, input().split())\nsushi = [[0, 0]]+[[int(x) for x in input().split()] for _ in range(n)]\n\norder = [0]*(n+1)\nreverse = [0]*(n+1)\n\nfor i in range(n):\n  order[i+1] = order[i]+sushi[i+1][1]\n  reverse[i+1] = reverse[i]+sushi[n-i][1]\n\norder_index = [i for i in range(n+1)]\nreverse_index = [-i for i in range(n+1)]\nfor i in range(n):\n  order[i+1] -= sushi[i+1][0]\n  if order[i+1] <= order[i]:\n    order[i+1] = order[i]\n    order_index[i+1] = order_index[i]\n  reverse[i+1] -= c-sushi[n-i][0]\n  if reverse[i+1] <= reverse[i]:\n    reverse[i+1] = reverse[i]\n    reverse_index[i+1] = reverse_index[i]\n\norder_back = copy(order)\nreverse_back = copy(reverse)\nfor i in range(n+1):\n  order_back[i] -= sushi[order_index[i]][0]\n  if i != 0 and order_back[i] < order_back[i-1]:\n    order_back[i] = order_back[i-1]\n  reverse_back[i] -= (c-sushi[reverse_index[i]][0])%c\n  if i != 0 and reverse_back[i] < reverse_back[i-1]:\n    reverse_back[i] < reverse_back[i-1]\n\nans = 0\nfor i in range(n+1):\n  sub = max(order[i]+reverse_back[n-i], order_back[i]+reverse[n-i])\n  if ans < sub:\n    ans = sub\n\nprint(ans)", "from heapq import heappush, heappop\nN, C, *L = map(int, open(0).read().split())\nhq1 = []\nhq2 = []\nsushi = []\nfor x,y in zip(*[iter(L)]*2):\n  sushi += [(x,y)]\nsushi.sort()\nx = 0\ny = 0\nfor i in range(N-1,-1,-1):\n  p,q = sushi[i]\n  x += q\n  heappush(hq1,(-x+(C-p),i))\n  p,q = sushi[N-1-i]\n  y += q\n  heappush(hq2,(-y+p,N-1-i))\nm = 0\nans1 = 0\nfor i in range(N):\n  x,y = sushi[i]\n  m += y\n  n = m-x\n  while hq1 and hq1[0][1]<=i:\n    heappop(hq1)\n  if hq1 and hq1[0][0]<-x:\n    ans1 = max(ans1, n-hq1[0][0]-x)\n  else:\n    ans1 = max(ans1,n)\n    \n\nm = 0\nans2 = 0\nfor i in range(N-1,-1,-1):\n  x,y = sushi[i]\n  m += y\n  n = m-(C-x)\n  while hq2 and hq2[0][1]>=i:\n    heappop(hq2)\n  if hq2 and hq2[0][0]<-(C-x):\n    ans2 = max(ans2, n-hq2[0][0]-(C-x))\n  else:\n    ans2 = max(ans2, n)\nprint(max(ans1,ans2))", "from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,c=map(int,readline().split())\n    x=[0]*n\n    v=[0]*n\n    for i in range(n):\n        x[i],v[i]=map(int,readline().split())\n\n    x_rev=list(map(lambda x:c-x,reversed(x)))\n    v_rev=list(reversed(v))\n\n    dp=[0]*(n+1)\n    dp_rev=[0]*(n+1)\n    now=0\n    tmp=0\n    for i in range(n):\n        dp[i+1]=max(dp[i],tmp+v[i]-x[i]+now)\n        tmp+=v[i]-x[i]+now\n        now=x[i]\n    now=0\n    tmp=0\n    for i in range(n):\n        dp_rev[i+1]=max(dp_rev[i],tmp+v_rev[i]-x_rev[i]+now)\n        tmp+=v_rev[i]-x_rev[i]+now\n        now=x_rev[i]\n\n    ans=0\n    #\u6642\u8a08\u3001\u53cd\u6642\u8a08\n    for i in range(n):\n        tmp1=dp[i+1]\n        tmp2=dp[i+1]-x[i]+dp_rev[n-i-1]\n        ans=max(ans,tmp1,tmp2)\n\n    #\u53cd\u6642\u8a08\u3001\u6642\u8a08\n    for i in range(n):\n        tmp1=dp_rev[i+1]\n        tmp2=dp_rev[i+1]-x_rev[i]+dp[n-i-1]\n        ans=max(ans,tmp1,tmp2)\n\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput=sys.stdin.readline\nl=[[0,0,0]]\nr=[[0,0,0]]\nn,c=list(map(int,input().split()))\nfor i in range(n):\n\tx,v=list(map(int,input().split()))\n\tr.append([x,v])\n\tl.append([c-x,v])\nr.sort()\nl.sort()\nnow=0\nfor i in range(n):\n\tnow+=r[i+1][1]\n\tr[i+1].append(max(now-r[i+1][0],r[i][2]))\n\tif r[i+1][2]==r[i][2]:\n\t\tr[i+1][0]=r[i][0]\nnow=0\nfor i in range(n):\n\tnow+=l[i+1][1]\n\tl[i+1].append(max(now-l[i+1][0],l[i][2]))\n\tif l[i+1][2]==l[i][2]:\n\t\tl[i+1][0]=l[i][0]\nans=0\nfor i in range(n+1):\n\ta=l[i][0]\n\tb=r[n-i][0]\n\tans=max(l[i][2]+r[n-i][2]-min(a,b),ans)\nprint(ans)\n", "N,C=map(int,input().split())\nxc=[tuple(map(int,input().split())) for i in range(N)]\nxc.sort()\nans=0\np=0\n#\u53f3\u3092\u53d6\u308b\u7bc4\u56f2\u3068\u5de6\u3092\u53d6\u308b\u7bc4\u56f2\u3092\u6c7a\u3081\u308c\u3070\u3044\u3044\ns=[0]*(N+1)#\u6642\u8a08\u56de\u308a\nss=[0]*(N+1)#\u53cd\u6642\u8a08\u56de\u308a\nfor i in range(N):\n  s[i+1]=s[i]+xc[i][1]\n\nfor i in range(N):\n  ss[i+1]=ss[i]+xc[N-1-i][1]\nmaxs=[0]*(N+1)\nmaxss=[0]*(N+1)\nfor i in range(N):\n  s[i+1]=s[i+1]-xc[i][0]\n  ss[i+1]=ss[i+1]-(C-xc[N-1-i][0])\n  maxs[i+1]=max(maxs[i],s[i+1])\n  maxss[i+1]=max(maxss[i],ss[i+1])\nans=max(0,maxs[-1])\nans=max(ans,maxss[-1])\nfor i in range(N):\n  if s[i+1]>xc[i][0]:\n    ans=max(ans,maxss[N-i-1]+(s[i+1]-xc[i][0]))\n  if ss[i+1]>(C-xc[N-1-i][0]):\n    ans=max(ans,maxs[N-i-1]+(ss[i+1]-(C-xc[N-1-i][0])))\nprint(ans)", "\n\n\n\nN,C = list(map(int, input().split()))\n\nxv = [tuple(map(int, input().split())) for _ in range(N)]\n\naccum_clockwise = [None] * N\naccum_clockwise[0] = xv[0]\ntmp = xv[0][1]\nfor i in range(1,N):\n    tmp += xv[i][1]\n    accum_clockwise[i] = (xv[i][0], tmp)\n\n\naccum_anticlockwise = [None] * N\naccum_anticlockwise[0] = (C - xv[-1][0], xv[-1][1])\ntmp = xv[-1][1]\nfor i in range(1, N):\n    tmp += xv[N-1-i][1]\n    accum_anticlockwise[i] = (C - xv[N-1-i][0], tmp)\n\n\nmax_clockwise = [0] * (N+1)\nfor i in range(N):\n    max_clockwise[i+1] = max(max_clockwise[i], accum_clockwise[i][1] - accum_clockwise[i][0] * 2)\n\n\nmax_anticlockwise = [0] * (N+1)\nfor i in range(N):\n    max_anticlockwise[i+1] = max(max_anticlockwise[i], accum_anticlockwise[i][1] - accum_anticlockwise[i][0] * 2)\n\n\nans_clockwise = 0\nfor i in range(N):\n    ans_clockwise = max(ans_clockwise, accum_clockwise[i][1] - accum_clockwise[i][0] + max_anticlockwise[N-1-i])\n\nans_anticlockwise = 0\nfor i in range(N):\n    ans_anticlockwise = max(ans_anticlockwise, accum_anticlockwise[i][1] - accum_anticlockwise[i][0] + max_clockwise[N-1-i])\n\nprint((max(ans_clockwise, ans_anticlockwise)))\n", "n, c = map(int,input().split())\n\nxvl = []\nfor _ in range(n):\n    x,v = map(int,input().split())\n    xvl.append((x,v))\n\nget_l = []\nsum_v = 0\nfor x, v in xvl:\n    sum_v += v\n    get_l.append(sum_v - x)\n\nimport itertools\nget_l_ac = list(itertools.accumulate(get_l, max))\nget_r = []\nsum_v = 0\nfor x, v in xvl[::-1]:\n    sum_v += v\n    get_r.append(sum_v - (c - x))\n\n\nans = 0\nx = 0\nfor i in range(n):\n    tmp = 0\n    if i > 0:\n        x = c - xvl[-i][0]\n        tmp += get_r[i-1]\n    ans = max(tmp, tmp - x + get_l_ac[n - i - 1], ans)\n\nget_r_ac = list(itertools.accumulate(get_r, max))\nx = 0\nfor i in range(n):\n    tmp = 0\n    if i > 0:\n        x = xvl[i-1][0]\n        tmp += get_l[i-1]\n    ans = max(tmp, tmp - x + get_r_ac[n - i - 1], ans)\n\nprint(ans)", "def main():\n    from collections import namedtuple\n    import sys\n    input = sys.stdin.readline\n\n    Sushi = namedtuple('Sushi', 'x cal')\n\n    n, c = list(map(int, input().split()))\n\n    a = []\n    for _ in range(n):\n        x, v = list(map(int, input().split()))\n        a.append(Sushi(x=x, cal=v))\n    # x\u6607\u9806\u30bd\u30fc\u30c8\u6e08\n\n    clock = [0] * (n + 1)  # \u6ce8\u76ee\u3059\u308b\u5bff\u53f8\u4ee5\u524d\u3067\u96e2\u8131\u3059\u308b\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    clock_to_0 = [0] * (n + 1)  # \u6642\u8a08\u56de\u308a->\u521d\u671f\u4f4d\u7f6e\n    ma = 0  # \u6ce8\u76ee\u3059\u308b\u5bff\u53f8\u4ee5\u524d\u3067\u96e2\u8131\u3059\u308b\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    curr = 0  # \u73fe\u5728\u306e\u30ab\u30ed\u30ea\u30fc(\u79fb\u52d5\u306b\u3088\u308b\u30ab\u30ed\u30ea\u30fc\u6d88\u8cbb\u3092\u7121\u8996)\n    for i, s in enumerate(a, start=1):\n        curr += s.cal\n        ma = max(ma, curr - s.x)\n        clock[i] = ma\n        clock_to_0[i] = curr - s.x * 2\n\n    anti = [0] * (n + 1)  # \u6ce8\u76ee\u3059\u308b\u5bff\u53f8\u4ee5\u524d\u3067\u96e2\u8131\u3059\u308b\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    anti_to_0 = [0] * (n + 1)  # \u53cd\u6642\u8a08\u56de\u308a->\u521d\u671f\u4f4d\u7f6e\n    ma = 0  # \u6ce8\u76ee\u3059\u308b\u5bff\u53f8\u4ee5\u524d\u3067\u96e2\u8131\u3059\u308b\u6700\u5927\u6442\u53d6\u30ab\u30ed\u30ea\u30fc\n    curr = 0  # \u73fe\u5728\u306e\u30ab\u30ed\u30ea\u30fc(\u79fb\u52d5\u306b\u3088\u308b\u30ab\u30ed\u30ea\u30fc\u6d88\u8cbb\u3092\u7121\u8996)\n    for i, s in zip(list(range(n, -1, -1)), reversed(a)):\n        curr += s.cal\n        ma = max(ma, curr - (c - s.x))\n        anti[i] = ma\n        anti_to_0[i] = curr - (c - s.x) * 2\n\n    ans = 0\n    for exit_pos in range(1, n + 1):\n        ans = max(\n            ans,\n            clock_to_0[exit_pos - 1] + anti[exit_pos],\n            anti_to_0[(exit_pos + 1) % (n + 1)] + clock[exit_pos]\n        )\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, c = map(int, input().split())\nclock = []\ncounter_clock = []\nfor i in range(n):\n    x, v = map(int, input().split())\n    clock.append([x, v])\n    counter_clock.append([c - x, v])\nclock.sort()\ncounter_clock.sort()\nclock_ac = [0]\ncounter_clock_ac = [0]\nfor i in range(n):\n    v = clock[i][1]\n    clock_ac.append(clock_ac[-1] + v)\n    v2 = counter_clock[i][1]\n    counter_clock_ac.append(counter_clock_ac[-1] + v2)\nfor i in range(n):\n    x = clock[i][0]\n    clock_ac[i + 1] -= x\n    x2 = counter_clock[i][0]\n    counter_clock_ac[i + 1] -= x2\nmax_clock_ac = [0]\nmax_counter_clock_ac = [0]\nfor i in range(n):\n    max_clock_ac.append(max(max_clock_ac[-1], clock_ac[i + 1]))\n    max_counter_clock_ac.append(max(max_counter_clock_ac[-1], counter_clock_ac[i + 1]))\nans = max(max_clock_ac[n], max_counter_clock_ac[n])\nfor i in range(n):\n    ans = max(ans, clock_ac[i + 1] - clock[i][0] + max_counter_clock_ac[n - i - 1])\n    ans = max(ans, counter_clock_ac[i + 1] - counter_clock[i][0] + max_clock_ac[n - i - 1])\nprint(ans)", "n,c=map(int,input().split())\nX=[]\nfor i in range(n):\n  x,y=map(int,input().split())\n  X.append((x,y))\nSR,DR=[0]*(n+1),[0]*(n+1)\ns,d=0,0\ncur=0\nfor i in range(n):\n  x,y=X[i]\n  SR[i+1]=SR[i]+y-(x-cur)\n  DR[i+1]=DR[i]+y-2*(x-cur)\n  cur=x\n\nSL,DL=[0]*(n+1),[0]*(n+1)\ns,d=0,0\ncur=c\nfor i in reversed(range(n)):\n  x,y=X[i]\n  SL[n-i]=SL[n-1-i]+y-(cur-x)\n  DL[n-i]=DL[n-1-i]+y-2*(cur-x)\n  cur=x\n\nfor i in range(n):\n  SL[i+1]=max(SL[i+1],SL[i])\n  SR[i+1]=max(SR[i+1],SR[i])\nans=0\nfor i in range(n+1):\n  a=max(DR[i]+SL[n-i],DL[i]+SR[n-i])\n  ans=max(ans,a)\nprint(ans)", "N,C=list(map(int,input().split()))\nD=[[int(x) for x in input().split()] for _ in range(N)]\n\nX,V,M=[0]*(N+1),[0]*(N+1),[0]*(N+1)\nfor i in range(1,N+1):\n  X[i],V[i]=D[i-1][0],V[i-1]+D[i-1][1]\n  M[i]=M[i-1] if M[i-1]>V[i]-D[i-1][0] else V[i]-D[i-1][0]\n\nm=0\nfor i in range(1,N+1):\n  e=M[i-1]-(C-X[i]) if M[i-1]>C-X[i] else 0\n  e+=V[N]-V[i-1]-(C-X[i])\n  m=m if m>e else e\n\nM=[0]*(N+2)\nfor i in range(N,0,-1):\n  p=V[N]-V[i-1]-(C-X[i])\n  M[i]=M[i+1] if M[i+1]>p else p\n\nfor i in range(1,N+1):\n  e=M[i+1]-X[i] if M[i+1]>X[i] else 0\n  e+=V[i]-X[i]\n  m=m if m>e else e\n\nprint(m)\n", "N, C = list(map(int, input().split()))\nXV = [tuple(map(int, input().split())) for _ in range(N)]\nXV.sort()\n\nL = [0] * (N + 1)\nS = 0\nfor i, (x, v) in enumerate(XV, start=1):\n    S += v\n    L[i] = max(L[i - 1], S - x)\n\nR = [0] * (N + 1)\nS = 0\nfor i, (x, v) in enumerate(XV[::-1], start=1):\n    S += v\n    R[i] = max(R[i - 1], S - (C - x))\n\nans = max(max(L), max(R))\n\nS = 0\nfor i, (x, v) in enumerate(XV, start=1):\n    S += v\n    ans = max(ans, S - 2 * x + R[N - i])\n\nS = 0\nfor i, (x, v) in enumerate(XV[::-1], start=1):\n    S += v\n    ans = max(ans, S - (C - x) * 2 + L[N - i])\n\nprint(ans)\n", "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, ceil\n    #from operator import itemgetter\n\n    #inf = 10**17\n    #mod = 10**9 + 7\n\n    n,C = map(int, input().split())\n    xv = [list(map(int, input().split())) for _ in range(n)]\n    xv.sort()\n    a, b = [], []\n    kcal = 0\n    for x, v in xv:\n        kcal += v\n        a.append(kcal - x)\n        b.append(kcal-2*x)\n    xv.sort(reverse=True)\n    c, d = [], []\n    kcal = 0\n    for x, v in xv:\n        kcal += v\n        x = C - x\n        c.append(kcal - x)\n        d.append(kcal-2*x)\n    \n    for v in [a,b,c,d]:\n        for i in range(1, n):\n            if v[i] < v[i-1]:\n                v[i] = v[i-1]\n    \n    res = 0\n    for i in range(n):\n        res = max(res, a[i], c[i])\n        if i < n-1:\n            res = max(res, b[i]+c[-(i+2)], d[i]+a[-(i+2)])\n    print(res)\n\ndef __starting_point():\n    main()\n__starting_point()", "# coding: utf-8\n# Your code here!\nN,C=map(int,input().split())\n\nsushi=[]\nfor _ in range(N):\n    x,v=map(int,input().split())\n    sushi.append([x,v])\n\nsushi_2=list(map(lambda x:[x[0]+C, x[1]] , sushi))\n\nsushi+=sushi_2\n\ncal=[[0,0] for i in range(2*N)]\n\npre_x=C\nfor i in range(N, 2*N):\n    x, v = sushi[i][0], sushi[i][1]\n    cal[i][0], cal[i][1] = v-(x-pre_x), v-2*(x-pre_x)\n    pre_x=x\n\n\npre_x=C\nfor i in range(N)[::-1]:\n    x, v = sushi[i][0], sushi[i][1]\n    cal[i][0], cal[i][1] = v-(pre_x-x), v-2*(pre_x-x)\n    pre_x=x\n\nleft=[[0,0] for i in range(N)]\nright=[[0,0] for i in range(N)]\n\ntemp_0,temp_1=cal[N][0],cal[N][1]\nright[0][0], right[0][1] = max(0,temp_0), max(0,temp_1)\nfor i in range(N+1,2*N):\n    temp_0+=cal[i][0]\n    temp_1+=cal[i][1]\n    right[i-N][0], right[i-N][1] = max(right[i-N-1][0],temp_0), max(right[i-N-1][1],temp_1)\n\ntemp_0,temp_1=cal[N][0],cal[N][1]\nright[0][0], right[0][1] = max(0,temp_0), max(0,temp_1)\nfor i in range(N+1,2*N):\n    temp_0+=cal[i][0]\n    temp_1+=cal[i][1]\n    right[i-N][0], right[i-N][1] = max(right[i-N-1][0],temp_0), max(right[i-N-1][1],temp_1)\n\ntemp_0, temp_1=cal[N-1][0], cal[N-1][1]\nleft[-1][0], left[-1][1] = max(0,temp_0), max(0,temp_1)\nfor i in range(N-1)[::-1]:\n    temp_0+=cal[i][0]\n    temp_1+=cal[i][1]\n    left[i-N][0], left[i-N][1] = max(left[i-N+1][0],temp_0), max(left[i-N+1][1],temp_1)\n\n\"\"\"\nprint(sushi)\nprint(cal)\nprint(right)\nprint(left)\n\"\"\"\n\nans=max(left[0][0],0)\nfor i in range(1,N):\n    ans=max(ans,left[i][0]+right[i-1][1])\n\nans=max(right[N-1][0],ans)\nfor i in range(N-1)[::-1]:\n    ans=max(ans,right[i][0]+left[i+1][1])\n\n\nprint(ans)", "from itertools import accumulate\nn,c=map(int,input().split())\nsushi=[list(map(int,input().split())) for i in range(n)]\n\nr=[sushi[0][1]-sushi[0][0]]\nfor i in range(1,n):\n    r.append(r[-1]+sushi[i][1]-(sushi[i][0]-sushi[i-1][0]))\nl=[sushi[n-1][1]-(c-sushi[n-1][0])]\nfor i in range(n-2,-1,-1):\n    l.append(l[-1]+sushi[i][1]-((c-sushi[i][0])-(c-sushi[i+1][0])))\nr2=[sushi[0][1]-2*sushi[0][0]]\nfor i in range(1,n):\n    r2.append(r2[-1]+sushi[i][1]-2*(sushi[i][0]-sushi[i-1][0]))\nl2=[sushi[n-1][1]-2*(c-sushi[n-1][0])]\nfor i in range(n-2,-1,-1):\n    l2.append(l2[-1]+sushi[i][1]-2*((c-sushi[i][0])-(c-sushi[i+1][0])))\nr=list(accumulate(r,max))\nl=list(accumulate(l,max))\n\ncand=[l[-1],r[-1]]\nfor i in range(n):\n    if 0<=n-i-2<=n-1:\n        cand.append(l2[i]+r[n-i-2])\n        cand.append(r2[i]+l[n-i-2])\n\nprint(max(max(cand),0))", "import sys\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnn = lambda: list(stdin.readline().split())\nns = lambda: stdin.readline().rstrip()\n\nn,c = na()\nmigi = []\nsushi_m = []\n\nfor i in range(n):\n  x,v = na()\n  migi.append(x)\n  sushi_m.append(v)\n\nsushi_h = list(reversed(sushi_m))\nhidari = [c-i for i in reversed(migi)]\n\nm = 0\nmm = 0\nh = 0\nhh = 0\nmmigi = []\nhhidari = []\n\nfor i in range(n):\n  m += sushi_m[i]\n  h += sushi_h[i]\n  mm = max(mm,m-migi[i])\n  mmigi.append(mm)\n  hh = max(hh,h-hidari[i])\n  hhidari.append(hh)\n\nans = 0\nfor i in range(n):#migi\n  if n-i-2 >= 0 and hhidari[n-i-2]-migi[i] > 0:\n    ans = max(ans, mmigi[i]+hhidari[n-i-2]-migi[i])\n  else:\n    ans = max(ans, mmigi[i])\n    \nfor i in range(n):#hidari\n  if n-i-2 >= 0 and mmigi[n-i-2]-hidari[i] > 0:\n    ans = max(ans, hhidari[i]+mmigi[n-i-2]-hidari[i])\n  else:\n    ans = max(ans, hhidari[i])\n\nprint(ans)\n", "#!/usr/bin/env python3\nimport sys\ntry:\n    from typing import List\nexcept ImportError:\n    pass\n\n\ndef solve(N: int, C: int, x: \"List[int]\", v: \"List[int]\"):\n    mp1 = [0] * (N + 1)\n    mp2 = [0] * (N + 1)\n    cum = 0\n    for i in range(N):\n        cum += v[i]\n        mp1[i + 1] = max(mp1[i], cum - x[i])\n        mp2[i + 1] = max(mp2[i], cum - x[i] * 2)\n    mn1 = [0] * (N + 1)\n    mn2 = [0] * (N + 1)\n    cum = 0\n    for i in reversed(list(range(N))):\n        cum += v[i]\n        mn1[i] = max(mn1[i + 1], cum - (C - x[i]))\n        mn2[i] = max(mn2[i + 1], cum - (C - x[i]) * 2)\n\n    print((max(\n        max(mp1[i] + mn2[i] for i in range(N + 1)),\n        max(mp2[i] + mn1[i] for i in range(N + 1)),\n    )))\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    C = int(next(tokens))  # type: int\n    x = [int()] * (N)  # type: \"List[int]\"\n    v = [int()] * (N)  # type: \"List[int]\"\n    for i in range(N):\n        x[i] = int(next(tokens))\n        v[i] = int(next(tokens))\n    solve(N, C, x, v)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nn, c = list(map(int, input().split()))\nxv = [list(map(int, input().split())) for _ in range(n)]\n\nm1 = []\nv1 = []\nv_cum = 0\ntmp = 0\n\nfor x, v in xv:\n    v_cum += v\n    tmp = max(tmp, v_cum - x)\n    v1.append(v_cum - x)\n    m1.append(tmp)\n\nm2 = []\nv2 = []\nv_cum = 0\ntmp = 0\n\nfor x, v in xv[::-1]:\n    v_cum += v\n    tmp = max(tmp, v_cum + x - c)\n    v2.append(v_cum + x - c)\n    m2.append(tmp)\n\nans = max((0, m1[-1], m2[-1]))\n\nfor i in range(n-1):\n    ans = max((\n        ans,\n        v1[i] + m2[-i-2] - xv[i][0],\n        v2[i] + m1[-i-2] + xv[-i-1][0] - c\n    ))\n\nprint(ans)\n", "# coding: utf-8\n\n# https://atcoder.jp/contests/abc095/tasks/arc096_b\n# 16:55-17:08 chudan\n# 12:45-13:08 done\n\n\ndef main():\n    N, C = list(map(int, input().split()))\n    x = [None] * N\n    v = [None] * N\n    for i in range(N):\n        x[i], v[i] = list(map(int, input().split()))\n\n    cal_clock = [None] * N\n    cal = -x[0] + v[0]\n    cal_clock[0] = cal if cal > 0 else 0\n    for i in range(1, N):\n        cal -= x[i] - x[i-1]\n        cal += v[i]\n        cal_clock[i] = cal if cal > cal_clock[i-1] else cal_clock[i-1]\n\n    cal_anti = [None] * N\n    cal = -(C-x[-1]) + v[-1]\n    cal_anti[0] = cal if cal > 0 else 0\n    for i in range(1, N):\n        cal -= x[N-i] - x[N-1-i]\n        cal += v[N-1-i]\n        cal_anti[i] = cal if cal > cal_anti[i-1] else cal_anti[i-1]\n\n    ans = max(cal_clock[-1], cal_anti[-1])  # \u5f15\u304d\u8fd4\u3055\u306a\u3044\u5834\u5408\n    for k in range(N-1):  # \u9014\u4e2d\u3067\u5f15\u304d\u8fd4\u3059\u5834\u5408\n        cand_1 = cal_clock[k] - x[k] + cal_anti[N-2-k]\n        cand_2 = cal_anti[k] - (C-x[N-1-k]) + cal_clock[N-2-k]\n        ans = max(ans, cand_1, cand_2)\n\n    return ans\n\n\nprint((main()))\n", "def main():\n    n, c = map(int, input().split())\n    xv = [list(map(int, input().split())) for _ in range(n)]\n    v, left_max, right_max = 0, 0, 0\n    gl = [None]*n\n    gr = [None]*n\n    _2oas = [None]*(n+1)\n    _2obs = [None]*(n+1)\n    _2oas[0], _2obs[0] = 0, 0\n    ans = 0\n    for i, (xi, vi) in enumerate(xv, 1):\n        v += vi\n        left = v - xi\n        if left_max < left:\n            left_max = left\n        gl[n-i] = left_max\n        _2oas[i] = v - 2*xi\n    v = 0\n    for i, (xi, vi) in enumerate(xv[::-1], 1):\n        v += vi\n        right = v - c + xi\n        if right_max < right:\n            right_max = right\n        gr[n-i] = right_max\n        _2obs[i] = v - 2*(c - xi)\n    for oa, _2ob, ob, _2oa in zip(gl, _2obs[:n], gr, _2oas[:n]):\n        ans = max(ans, _2oa+ob, _2ob+oa)\n    print(ans)\n        \ndef __starting_point():\n    main()\n__starting_point()", "N,C=map(int, input().split())\nx=[]\nv=[]\n\nfor i in range(N):\n  xi,vi = map(int, input().split())\n  x.append(xi)\n  v.append(vi)\n\nl1 = [0]\nl2 = [0]\nr1 = [0]\nr2 = [0]\n\nvtotal = 0\nfor i in range(N):\n  vtotal += v[i]\n  l1.append(max(l1[-1], vtotal - x[i]))\n  l2.append(max(l2[-1], vtotal - 2 * x[i]))\n\nvtotal = 0\nfor i in range(N-1, -1, -1):\n  vtotal += v[i]\n  r1.append(max(r1[-1], vtotal-(C-x[i])))\n  r2.append(max(r2[-1], vtotal-2*(C-x[i])))\n\nans = 0\nfor i in range(N+1):\n  ans = max(ans, l1[i] + r2[N-i], l2[i] + r1[N-i])\n\nprint(ans)", "import sys\n\nsys.setrecursionlimit(10 ** 9)\ninput = sys.stdin.readline\n\nINF = -(2 ** 31)\n\nN, C = [int(_) for _ in input().split()]\nX = [[int(x) for x in input().split()] for _ in range(N)]\n\n\ndef spam():\n    L = [0] * N\n    pre = 0\n    pre_max = -(2 ** 31)\n    for i in range(N):\n        x, v = X[-i - 1]\n        L[i] = max(pre_max, pre + v - (C - x))\n        pre += v\n        pre_max = L[i]\n\n    ans = max(pre_max, 0)\n    pre = 0\n    for i in range(N):\n        x, v = X[i]\n        tmp = pre + v - x\n\n        if i < N - 1:\n            tmp2 = max(L[N - i - 2] - x, 0)\n        else:\n            tmp2 = 0\n        ans = max(ans, tmp + tmp2)\n        pre += v\n    return ans\n\n\ndef main():\n    nonlocal X\n    ans = spam()\n    X = X[::-1]\n    for i in range(N):\n        X[i][0] = C - X[i][0]\n    ans = max(ans, spam())\n    print(ans)\n\n\nmain()\n", "from itertools import accumulate\nN,C = map(int,input().split())\nxs = []\nvs = []\nfor _ in range(N):\n    x,v = map(int,input().split())\n    xs.append(x)\n    vs.append(v)\nvacc = [0]+list(accumulate(vs, lambda x,y:x+y))\nlacc = [0]+[vacc[i+1]-xs[i] for i in range(N)]\nracc = [vacc[-1]-vacc[i]-C+xs[i] for i in range(N)]+[0]\nfor i in range(1, N):\n    lacc[i] = max(lacc[i], lacc[i-1])\nracc[-1] = (racc[-1], 0)\nfor i in range(N, 0, -1):\n    if racc[i-1] > racc[i][0]:\n        racc[i-1] = (racc[i-1], C-xs[i-1])\n    else:\n        racc[i-1] = racc[i]\nxs = [0]+xs\nans = 0\nfor i in range(N+1):\n    l = lacc[i]\n    r, d = racc[i]\n    ans = max(ans, l+r-xs[i], l+r-d, l, r)\nprint(ans)", "from itertools import *\nN,C,*XV = map(int,open(0).read().split())\nX = XV[::2] + [C]\nA = [0] + list(accumulate(XV[1::2]))\nans = L = R = 0\n\nfor b in range(N + 1):\n    T = A[N] - A[b]\n    d = C - X[b]\n    L = max(L, A[b] - X[b - 1])\n    R = max(R, A[b] - 2 * X[b - 1])\n    ans = max(ans, L + T - 2 * d, R + T - d)\n\nprint(ans)", "def main():\n    N, C = list(map(int, input().split(' ')))\n    sushi = [list(map(int, input().split(' '))) for _ in range(N)]\n    cr = [0 for _ in range(N + 1)]\n    cr_rt = [0 for _ in range(N + 1)]\n    for i in range(N):\n        move = sushi[i][0] if i == 0 else (sushi[i][0] - sushi[i-1][0])\n        cr[i+1] = cr[i] + sushi[i][1] - move\n        cr_rt[i+1] = cr_rt[i] + sushi[i][1] - 2 * move\n    cl = [0 for _ in range(N + 1)]\n    cl_rt = [0 for _ in range(N + 1)]\n    for i in range(N):\n        move = (C - sushi[N-1-i][0]) if i == 0 else (sushi[N-i][0] - sushi[N-1-i][0])\n        cl[i+1] = cl[i] + sushi[N-1-i][1] - move\n        cl_rt[i+1] = cl_rt[i] + sushi[N-1-i][1] - 2 * move\n    cr_rt_max = [0 for _ in range(N + 1)]\n    cl_rt_max = [0 for _ in range(N + 1)]\n    for i in range(N):\n        cr_rt_max[i+1] = max([cr_rt_max[i], cr_rt[i+1]])\n        cl_rt_max[i+1] = max([cl_rt_max[i], cl_rt[i+1]])\n    # explore\n    ans = 0\n    for i in range(N+1):\n        ans = max([ans, cr[i] + cl_rt_max[N-i]])\n        ans = max([ans, cl[i] + cr_rt_max[N-i]])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,c = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\nans = 0\nnow = 0\ns = []\nt = []\nfor i in range(n):\n    now += a[i][1]\n    s.append(now)\n    #if (now-a[i][0] > ans):\n        #ans = now-a[i][0]\n#print(ans)\nnow = 0\nfor i in range(n):\n    now += a[n-1-i][1]\n    t.append(now)\n    #if (now-(c-a[n-1-i][0]) > ans):\n        #ans = now-(c-a[n-1-i][0])\n#print(ans)\nback = 0\nans = max(ans, s[-1]-a[-1][0])\nfor i in range(n-2,-1,-1):            \n    back = max(back, t[n-2-i]-2*(c-a[i+1][0]))\n    ans = max(ans,s[i]-a[i][0]+back)\n    \nback = 0\nans = max(ans, t[-1]-(c-a[0][0]))\nfor i in range(n-2,-1,-1):\n    back = max(back, s[n-2-i]-2*a[n-2-i][0])\n    ans = max(ans, t[i]-(c-a[n-i-1][0])+back)\nprint(ans)", "n,c=map(int,input().split())\nS=[]\nfor i in range(n):\n    x,v=map(int,input().split())\n    S.append([x,v])\n\nF=[0]\nrF=[0]\ns=0\nfor i in range(n):\n    s+=S[i][1]\n    F.append(max(s-S[i][0],F[-1]))\n    rF.append(max(s-2*S[i][0],rF[-1]))\n\nS=list(reversed(S))\nR=[0]\nrR=[0]\ns=0\nfor i in range(n):\n    s+=S[i][1]\n    R.append(max(s+S[i][0]-c,R[-1]))\n    rR.append(max(s+2*(S[i][0]-c),rR[-1]))\n    \nR=list(reversed(R))\nrR=list(reversed(rR))\n\nans=0\nfor i in range(n+1):\n    ans=max(F[i]+rR[i],ans)\n    ans=max(R[i]+rF[i],ans)\n    \nprint(ans)", "import sys\ndef input():\n    return sys.stdin.readline()[:-1]\nimport heapq\nN,C=map(int,input().split())\na=0\nx=[0]*N\nv=[0]*N\nfor i in range(N):\n    x[i],v[i]=map(int,input().split())\nh=[0]\ns=t=sum(v)\nfor i in range(N-1,-1,-1):\n    k=t-x[i]-h[0]\n    if k>a:\n        a=k\n    t-=v[i]\n    heapq.heappush(h,t-s+2*(C-x[i]))\nh=[0]\nt=s\nfor i in range(N):\n    k=t-C+x[i]-h[0]\n    if k>a:\n        a=k\n    t-=v[i]\n    heapq.heappush(h,t-s+2*x[i])\nprint(a)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\nclass SegTree:\n    \"\"\"\n    init(init_val, ide_ele): \u914d\u5217init_val\u3067\u521d\u671f\u5316 O(N)\n    update(k, x): k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0 O(N)\n    query(l, r): \u533a\u9593[l, r)\u3092segfunc\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059 O(logN)\n    \"\"\"\n    def __init__(self, init_val, segfunc, ide_ele):\n        \"\"\"\n        init_val: \u914d\u5217\u306e\u521d\u671f\u5024\n        segfunc: \u533a\u9593\u306b\u3057\u305f\u3044\u64cd\u4f5c\n        ide_ele: \u5358\u4f4d\u5143\n        n: \u8981\u7d20\u6570\n        num: n\u4ee5\u4e0a\u306e\u6700\u5c0f\u306e2\u306e\u3079\u304d\u4e57\n        tree: \u30bb\u30b0\u30e1\u30f3\u30c8\u6728(1-index)\n        \"\"\"\n        n = len(init_val)\n        self.segfunc = segfunc\n        self.ide_ele = ide_ele\n        self.num = 1 << (n - 1).bit_length()\n        self.tree = [ide_ele] * 2 * self.num\n        # \u914d\u5217\u306e\u5024\u3092\u8449\u306b\u30bb\u30c3\u30c8\n        for i in range(n):\n            self.tree[self.num + i] = init_val[i]\n        # \u69cb\u7bc9\u3057\u3066\u3044\u304f\n        for i in range(self.num - 1, 0, -1):\n            self.tree[i] = self.segfunc(self.tree[2 * i], self.tree[2 * i + 1])\n\n    def update(self, k, x):\n        \"\"\"\n        k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0\n        k: index(0-index)\n        x: update value\n        \"\"\"\n        k += self.num\n        self.tree[k] = x\n        while k > 1:\n            self.tree[k >> 1] = self.segfunc(self.tree[k], self.tree[k ^ 1])\n            k >>= 1\n\n    def query(self, left, right):\n        \"\"\"\n        [left, right)\u306esegfunc\u3057\u305f\u3082\u306e\u3092\u5f97\u308b\n        left: index(0-index)\n        right: index(0-index)\n        \"\"\"\n        res = self.ide_ele\n        left += self.num\n        right += self.num\n        while left < right:\n            if left & 1:\n                res = self.segfunc(res, self.tree[left])\n                left += 1\n            if right & 1:\n                res = self.segfunc(res, self.tree[right - 1])\n            left >>= 1\n            right >>= 1\n        return res\n\n\ndef segfunc(x, y):\n    \"\"\"\n    \u533a\u9593(x,y)\u306b\u5bfe\u3057\u3066\u884c\u3044\u305f\u3044\u64cd\u4f5c\u306e\u5165\u529b\n    \u6700\u5c0f\u5024\uff1amin(x,y)\n    \u6700\u5927\u5024\uff1amax(x,y)\n    \u548c\uff1ax + y\n    \u7a4d\uff1ax * y\n    \u6700\u5927\u516c\u7d04\u6570\uff1amath.gcd(x, y)\n    \"\"\"\n    return max(x, y)\n\n\nide_ele = -f_inf\n\n\ndef resolve():\n    n, c = list(map(int, input().split()))\n    XV = [list(map(int, input().split())) for _ in range(n)]\n\n    R = [0]\n    prev = 0\n    for i in range(n):\n        x, v = XV[i]\n        R.append(R[-1] + v - (x - prev))\n        prev = x\n    seg = SegTree(R, segfunc, ide_ele)\n\n    R_r = [0]\n    prev_r = 0\n    for i in reversed(list(range(n))):\n        x_r, v_r = XV[i]\n        x_r = c - x_r\n        R_r.append(R_r[-1] + v_r - (x_r - prev_r))\n        prev_r = x_r\n    seg_r = SegTree(R_r, segfunc, ide_ele)\n\n    res1 = max(R)\n    res2 = max(R_r)\n    res3 = 0\n    for i in range(1, n + 1):\n        right = R[i] - XV[i - 1][0]\n        idx = n + 1 - i\n        left = seg_r.query(0, idx)\n        res3 = max(res3, right + left)\n    res4 = 0\n    for i in range(1, n + 1):\n        left_r = R_r[i] - (c - XV[-i][0])\n        idx_r = n + 1 - i\n        right_r = seg.query(0, idx_r)\n        res4 = max(res4, left_r + right_r)\n    print((max(res1, res2, res3, res4)))\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def main():\n    n, c = map(int, input().split())\n    xv = [list(map(int, input().split())) for _ in range(n)]\n    v, left_max, right_max = 0, 0, 0\n    gl = [None]*n\n    gr = [None]*n\n    _2oas = [None]*(n+1)\n    _2obs = [None]*(n+1)\n    _2oas[0], _2obs[0] = 0, 0\n    ans = 0\n    for i, (xi, vi) in enumerate(xv, 1):\n        v += vi\n        left = v - xi\n        if left_max < left:\n            left_max = left\n        gl[n-i] = left_max\n        _2oas[i] = v - 2*xi\n    v = 0\n    for i, (xi, vi) in enumerate(xv[::-1], 1):\n        v += vi\n        right = v - c + xi\n        if right_max < right:\n            right_max = right\n        gr[n-i] = right_max\n        _2obs[i] = v - 2*(c - xi)\n    for oa, _2ob, ob, _2oa in zip(gl, _2obs[:n], gr, _2oas[:n]):\n        ans = max(ans, _2oa+ob, _2ob+oa)\n    print(ans)\n        \ndef __starting_point():\n    main()\n__starting_point()", "n, c = map(int, input().split())\ns = [list(map(int, input().split())) for _ in range(n)]\na, b = [0] * n, [0] * n\na[0] = s[0][1] - s[0][0]\nb[0] = s[n - 1][1] - (c - s[n - 1][0])\nfor i in range(1, n):\n    a[i] = a[i - 1] + s[i][1] - (s[i][0] - s[i - 1][0])\n    b[i] = b[i - 1] + s[n - 1 - i][1] - (s[n - i][0] - s[n - 1 - i][0])\nmaxa, maxb = [0] * n, [0] * n\nmaxa[0], maxb[0] = a[0], b[0]\nfor i in range(1, n):\n    maxa[i] = max(maxa[i - 1], a[i])\n    maxb[i] = max(maxb[i - 1], b[i])\nans = max(maxa[n - 1], maxb[n - 1], 0)\nfor i in range(n - 1):\n    ans = max(ans, a[i] + maxb[n - 2 - i] - s[i][0])\n    ans = max(ans, b[i] + maxa[n - 2 - i] - (c - s[n - 1 - i][0]))\nprint(ans)", "N,C=list(map(int,input().split()))\n\nL=[]\nfor i in range(N):\n    x,y=list(map(int,input().split()))\n    L.append([x,y])\n    \nl=L[::-1]\nL=[[0,0]]+L\nR=[]\n\nfor i in range(N):\n    R.append([C-l[i][0],l[i][1]])\nR=[[0,0]]+R\n\n\n#print(L)\n#print(R)\nTS=[0]\nTW=[0]\nRS=[0]\nRW=[0]\n\nfor i in range(N):\n    TS.append(TS[i]-L[i+1][0]+L[i][0]+L[i+1][1])\n    TW.append(TW[i]-2*(L[i+1][0]-L[i][0])+L[i+1][1])\n    RS.append(RS[i]-R[i+1][0]+R[i][0]+R[i+1][1])\n    RW.append(RW[i]-2*(R[i+1][0]-R[i][0])+R[i+1][1])\n    \nMTS=[0]\nMRS=[0]\nfor i in range(1,N+1):\n    MTS.append(max(MTS[i-1],TS[i]))\n    MRS.append(max(MRS[i-1],RS[i]))\n\nans=0\nfor i in range(N+1):\n    if i>0 and L[i-1][0]*2>C:\n        break\n    else:\n        if ans<TW[i] + MRS[N-i]:\n            ans=TW[i] + MRS[N-i]\n            \nfor i in range(N+1):\n    if i>0 and R[i-1][0]*2>C:\n        break\n    else:\n        if ans<RW[i]+MTS[N-i]:\n            ans=RW[i]+MTS[N-i]\nprint(ans)\n", "import itertools\nfrom collections import deque,defaultdict,Counter\nfrom itertools import accumulate\nimport bisect\nfrom heapq import heappop,heappush\nfrom fractions import gcd\nfrom copy import deepcopy\nimport math\nimport queue\n#import numpy as np\n#import sympy as syp(\u7d20\u56e0\u6570\u5206\u89e3\u3068\u304b)\nMod = 1000000007\nimport sys\n\nsys.setrecursionlimit(100000) \n  \ndef sieve_of_eratosthenes(n):\n    if not isinstance(n,int):\n        raise TypeError(\"n is not int\")\n    if n<2:\n        raise ValueError(\"n is not effective\")\n    prime = [1]*(n+1)\n    for i in range(2,int(math.sqrt(n))+1):\n        if prime[i] == 1:\n            for j in range(2*i,n+1):\n                if j%i == 0:\n                    prime[j] = 0\n    res = []\n    for i in range(2,n+1):\n        if prime[i] == 1:\n            res.append(i)\n    return res\n\ndef factorial(i):\n    if i == 1:\n        return 1\n    else:\n        return i*factorial(i-1)\n \nclass UnionFind:\n    def __init__(self,n):\n        self.parent = [i for i in range(n+1)]\n        self.rank = [0 for i in range(n+1)]\n    \n    def findroot(self,x):\n        if x == self.parent[x]:\n            return x\n        else:\n            y = self.parent[x]\n            y = self.findroot(self.parent[x])\n            return y\n    \n    def union(self,x,y):\n        px = self.findroot(x)\n        py = self.findroot(y)\n        if px < py:\n            self.parent[py] = px\n        else:\n            self.parent[px] = py\n \n    def same_group_or_no(self,x,y):\n        return self.findroot(x) == self.findroot(y)\n\n\n\n\ndef main(): #startline--------------------------------------------\n    n,c = list(map(int,input().split()))\n    xv = [list(map(int,input().split())) for i in range(n)]\n    x = [xv[i][0] for i in range(n)]\n    v = [xv[i][1] for i in range(n)]\n    r1,r2,l1,l2 = [0]*(n+1),[0]*(n+1),[0]*(n+1),[0]*(n+1)\n    ans = 0\n    dis = 0\n    for i in range(n):\n        r1[i+1] = r1[i]+v[i]-(x[i]-dis)\n        r2[i+1] = r2[i]+v[i]-2*(x[i]-dis)\n        dis = x[i]\n    dis = c\n    for i in reversed(list(range(n))):\n        l1[n-i] = l1[n-i-1]+v[i]-(dis-x[i])\n        l2[n-i] = l2[n-i-1]+v[i]-2*(dis-x[i])\n        dis = x[i]\n    for i in range(n):\n        l1[i+1] = max(l1[i+1],l1[i])\n        r1[i+1] = max(r1[i+1],r1[i])\n    for i in range(n+1):\n        ans = max(ans,max(r2[i]+l1[n-i],l2[i]+r1[n-i]))\n    print(ans)\ndef __starting_point():\n    main() #endline===============================================\n\n__starting_point()", "import numpy as np\nimport itertools\nN, C, *XV = [int(_) for _ in open(0).read().split()]\nXV = [0, 0] + XV\nXV = np.array(XV).reshape((N+1, 2))\nYV = np.zeros((N+1, 2), dtype=np.int64)\nYV[1:] = XV[:0:-1]\nYV[1:, 0] *= -1\nYV[1:, 0] += C\n\ndef calc(XV,YV):\n    cumxvv = np.cumsum(XV[:, 1])\n    cumxvv -= 2 * XV[:, 0]\n    cumyvv = np.cumsum(YV[:, 1])\n    cumyvv -= YV[:, 0]\n    cummaxyvv = list(itertools.accumulate(cumyvv, func=lambda a, b: a if a > b else b))\n    ans=-float('inf')\n    for i in range(N + 1):\n        ans = max(ans, cumxvv[i] + cummaxyvv[N - i])\n    return ans\nprint((max(calc(XV, YV), calc(YV, XV))))\n", "N,C = map(int,input().split())\n\nx = [0]*N\nv = [0]*N\n\nfor i in range(N):\n    x[i],v[i] = map(int,input().split())\n\nlcal = [0] * N\nlmax = [0] * N\nrcal = [0] * N\nrmax = [0] * N\n\nrcal[0] = v[0]-x[0]\nrmax[0] = rcal[0]\nfor i in range(1,N):\n    rcal[i] = rcal[i-1] + v[i] - x[i] + x[i-1]\n    rmax[i] = max(rmax[i-1],rcal[i])\n\nlcal[0] = v[N-1] - (C - x[N-1])\nlmax[0] = lcal[0]\n\nfor i in range(1,N):\n    lcal[i] = lcal[i-1] + v[N-i-1] + x[N-i-1] -x[N-i]\n    lmax[i] = max(lmax[i-1],lcal[i])\n\n#print(rmax)\n#print(lmax)\n\nans = 0\n\nfor i in range(N-1):\n    ans = max(ans,rcal[i],rcal[i]+lmax[N-i-2]-x[i])\n    #print(i,ans)\n\nans = max(ans,rcal[N-1])\n\nfor i in range(N-1):\n    ans = max(ans,lcal[i],lcal[i]+rmax[N-i-2]-(C-x[N-i-1]))\n    #print(i,ans)\n\nans = max(ans,lcal[N-1])\n\n\n\nprint(ans)"]