["n=input()\nrg=[0]*10\nfor i in n: rg[int(i)]+=1\nrl=[]\nff=0\nfor i in range(len(rg)):\n    if rg[i]!=0:\n        rl.append(rg[i])\n        if i==0: ff=1\nfact=[1]\nfc=1\nfor i in range(1,20):\n    fc*=i\n    fact.append(fc)\nrt=[]\nt=0\ndef cfs(d):\n    if d==len(rl):\n        nonlocal t,ff\n        jj=fact[sum(rt)]\n        for i in rt: jj=jj/fact[i]\n        if ff:\n            jjj=fact[sum(rt)-1]\n            jjj=jjj/fact[rt[0]-1]\n            for i in range(1,len(rt)): jjj=jjj/fact[rt[i]]\n            jj-=jjj\n        t+=jj\n        return\n    \n    for i in range(1,rl[d]+1):\n        rt.append(i)\n        cfs(d+1)\n        rt.pop(-1)\n\ncfs(0)\nprint(int(t))\n\n\n        \n            \n    \n\n'''\n////////////////      //////        ///////      //             ///////     //  //   //\n////          //    ///   ///     ///    ///     //            ///  ///     ////     //\n////    ////       ///     ///   ///      ///    //           /////////     ////     ///////\n////     /////    ///       /// ///        ///   //          ///    ///     ////     //   //\n//////////////     ///////////   ///////////     //////     ///     ///     //  //   //   //\n'''\n\n", "N = input()\n\nC = [0]*10\nfor n in N:\n    C[int(n)] += 1\n\nmemo = {}\ndef dfs(i, state):\n    key = tuple(state)\n    if key in memo:\n        return memo[key]\n    r = 0\n    if all(s == 0 or 1 <= t for s, t in zip(C, state)):\n        r += 1\n    for j in range(10):\n        if C[j] - state[j] > 0:\n            state[j] += 1\n            r += dfs(i+1, state)\n            state[j] -= 1\n    memo[key] = r\n    return r\nstate = [0]*10\nans = 0\nfor i in range(1, 10):\n    if C[i] > 0:\n        state[i] += 1\n        ans += dfs(1, state)\n        state[i] -= 1\nprint(ans)", "from collections import Counter\nfrom itertools import product\n\ns = input()\n\nds = Counter(s)\n\n\nfac = [1 for i in range(100)]\nfor i in range(1, 100):\n    fac[i] = fac[i-1] * i\n\nres = 0\nfor possib in product(*[list(zip([k] * n, list(range(1, n+1)))) for k, n in list(ds.items())]):\n    possib = list(possib)\n    non_zero_sum = sum(v for k, v in possib if k != '0')\n    total = sum(v for _, v in possib)\n\n    value = non_zero_sum * fac[total-1]\n    for _, v in possib:\n        value //= fac[v]\n\n    res += value\nprint(res)\n", "import itertools as it\nS=input().strip()\nfreq=[0 for i in range(10)]\nfor i in S:\n    u=ord(i)-ord('0')\n    freq[u]+=1\n\nfac=[1]\nfor i in range(1,20): fac.append(i*fac[-1])\n\n\"\"\"\nM={}\ndef F(cur,used):\n    while cur<10 and freq[cur]==0: cur+=1\n    if cur==10:\n        r=fac[sum(used)]\n        for i in used:\n            r//=fac[i]\n        print(used)\n        return 1\n\n    key=(cur,tuple(used))\n    if key in M: return M[key]\n    \n    r=0\n    for i in range(1,freq[cur]):\n        for j in range(\n    return r\n\ntotal=0\nfor i in range(1,10):\n    if freq[i]==0: continue\n    M={}\n    freq[i]-=1\n    used=[0 for j in range(10)]\n    used[i]=1\n    total+=F(0,used)\n    freq[i]+=1\n\nprint(total)\n\"\"\"\n\ntotal=0\nfor x in it.product(*(list(range(0 if i==0 else 1,i+1)) for i in freq)):\n    Q=\"\".join(str(i)*x[i] for i in range(10))\n    s=sum(x)-1\n    if s<0: continue\n    g=0\n    for d in range(1,10):\n        n=fac[s]\n        y=list(x)\n        y[d]-=1\n        #assert(s==sum(y))\n        for k in range(0,10):\n            n//=fac[y[k]]\n        g+=n\n        #print(x,d,n,g)\n    #print(Q,x,g)\n    total+=g\n\nprint(total)\n\n#208\n#280\n#802\n#820\n#2028, 2082, 2208, 2280, 2802, 2820\n#8022, 8202, 8220\n", "import itertools as it\n\n\ndef factorial(n):\n    i = 1\n    for j in range(1, n + 1):\n        i *= j\n    return i\n\n\ndef C(n, k):\n    k = max([k, n - k])\n    result = 1\n    for i in range(k + 1, n + 1):\n        result *= i\n    result //= factorial(n - k)\n    return result\n\n\n\nn = input()\n\n\ndigits = [0 for _ in range(10)]\n\nfor i in n:\n    digits[int(i)] += 1\n\nresult = 0\n\nfor amounts in it.product(*[[0] if x == 0 else list(range(1, x + 1)) for x in digits]):\n    sum_no_zero = sum(amounts[1:])\n    if sum_no_zero == 0:\n        continue\n    #print(amounts)\n    tmp = factorial(sum_no_zero)\n    for j in amounts[1:]:\n        tmp //= factorial(j)\n    tmp *= C(sum_no_zero + amounts[0] - 1, amounts[0])\n    result += tmp\n\n\nprint(result)\n", "n=int(input())\nt=[]\na=[]\nfor i in range(10):\n    t.append(0)\n    a.append(1)\nwhile n:\n    a[n%10]+=1\n    n//=10\nans=0\nfor i in range(a[0]!=1,a[0]):\n    t[0]=i\n    for i in range(a[1]!=1,a[1]):\n        t[1]=i\n        for i in range(a[2]!=1,a[2]):\n            t[2]=i\n            for i in range(a[3]!=1,a[3]):\n                t[3]=i\n                for i in range(a[4]!=1,a[4]):\n                    t[4]=i\n                    for i in range(a[5]!=1,a[5]):\n                        t[5]=i\n                        for i in range(a[6]!=1,a[6]):\n                            t[6]=i\n                            for i in range(a[7]!=1,a[7]):\n                                t[7]=i\n                                for i in range(a[8]!=1,a[8]):\n                                    t[8]=i\n                                    for i in range(a[9]!=1,a[9]):\n                                        t[9]=i\n                                        s=0\n                                        for i in range(10):\n                                            s+=t[i]\n                                        w=1\n                                        cnt=s\n                                        for i in range(10):\n                                            for j in range(t[i]):\n                                                if i==0:w*=cnt-1\n                                                else:w*=cnt\n                                                cnt-=1\n                                        for i in range(10):\n                                            for j in range(1,t[i]+1):\n                                                w//=j\n                                        #print(w)\n                                        ans+=w\nprint(ans)\n", "n = int(input())\ns = str(n)\n\nans = 0\na = [s.count(str(digit)) for digit in range(10)]\n\nfrom math import factorial\nfrom functools import reduce\nfrom operator import mul\n\ndef get(*args):\n\tres = factorial(sum(args))\n\tfor x in args:\n\t\tres //= factorial(x)\n\treturn res\n\nfor a0 in range(0 if not a[0] else 1, a[0] + 1):\n\tfor a1 in range(0 if not a[1] else 1, a[1] + 1):\n\t\tfor a2 in range(0 if not a[2] else 1, a[2] + 1):\n\t\t\tfor a3 in range(0 if not a[3] else 1, a[3] + 1):\n\t\t\t\tfor a4 in range(0 if not a[4] else 1, a[4] + 1):\n\t\t\t\t\tfor a5 in range(0 if not a[5] else 1, a[5] + 1):\n\t\t\t\t\t\tfor a6 in range(0 if not a[6] else 1, a[6] + 1):\n\t\t\t\t\t\t\tfor a7 in range(0 if not a[7] else 1, a[7] + 1):\n\t\t\t\t\t\t\t\tfor a8 in range(0 if not a[8] else 1, a[8] + 1):\n\t\t\t\t\t\t\t\t\tfor a9 in range(0 if not a[9] else 1, a[9] + 1):\n\t\t\t\t\t\t\t\t\t\tans += get(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)\n\t\t\t\t\t\t\t\t\t\tif a0:\n\t\t\t\t\t\t\t\t\t\t\tans -= get(a0 - 1, a1, a2, a3, a4, a5, a6, a7, a8, a9)\nprint(ans)\n", "3\n\ndef enc(t):\n    v = 0\n    for x in t:\n        v *= 20\n        v += x\n    return v\n\n\ndef dec(v, N):\n    a = []\n    for _ in range(N):\n        a.append(v % 20)\n        v //= 20\n    a.reverse()\n    return a\n\n\ndef cnt(C, ld, ud):\n    N = len(C)\n\n    ans = 0\n\n    dp = {enc([0] * N): 1}\n    for rnd in range(ud):\n        if rnd >= ld:\n            for et in dp:\n                c = dp[et]\n                t = dec(et, N)\n                if ((C[0] == 0 and all([t[i] >= 1 for i in range(1, N)]))\n                    or (C[0] > 0 and all([t[i] >= 1 for i in range(N)]))):\n                    ans += c\n\n        ndp = {}\n\n        for et in dp:\n            t = dec(et, N)\n            c = dp[et]\n\n            for i in range(N):\n                if rnd == 0 and i == 0:\n                    continue\n                if t[i] < C[i]:\n                    l = list(t)\n                    l[i] += 1\n                    nt = enc(l)\n                    if nt not in ndp:\n                        ndp[nt] = 0\n                    ndp[nt] += c\n\n        dp = ndp\n\n    for et in dp:\n        c = dp[et]\n        t = dec(et, N)\n        if ((C[0] == 0 and all([t[i] >= 1 for i in range(1, N)]))\n            or (C[0] > 0 and all([t[i] >= 1 for i in range(N)]))):\n            ans += c\n\n    return ans\n\n\ndef solve(S):\n    N = len(S)\n    C = [0] * 10\n    for c in S:\n        C[ord(c) - ord('0')] += 1\n\n    mindigits = len([c for c in C if c > 0])\n\n    C = [C[0]] + [C[i] for i in range(1, 10) if C[i] > 0]\n\n    return cnt(C, mindigits, N)\n\n\ndef main():\n    S = input()\n    print(solve(S))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = input()\nfacts = {0: 1}\n\ndef fact(a):\n\tnonlocal facts\n\tif a in facts:\n\t\treturn facts[a]\n\tres = 1\n\tfor i in range(1, a+1):\n\t\tres *= i\n\t\tfacts[i] = res\n\treturn facts[a]\n\nocc = [0] * 10\nfor i in range(len(n)):\n\tocc[int(n[i])] += 1\n\nans = 0\n\ndef go_find(hame, start):\n#\tprint(\"Start: \" + str(start))\n#\tprint(hame)\n\tnonlocal ans\n\tif hame[0] == 0:\n\t\tres = fact(sum(hame))\n\t\tfor i in range(10):\n\t\t\tres //= fact(hame[i])\n\telse:\n\t\tres2 = fact(sum(hame)-1)\n\t\tfor i in range(1, 10):\n\t\t\tres2 //= fact(hame[i])\n\t\tres2 //= fact(hame[0]-1)\n\t\t\n\t\tres = fact(sum(hame))\n\t\tfor i in range(10):\n\t\t\tres //= fact(hame[i])\n\n\t\tres -= res2\n\n#\tprint(res)\n#\tprint(\"=============\")\n\tans += res\n\tfor i in range(start, 10):\n\t\tif hame[i] > 1:\n\t\t\thame[i] -= 1\n\t\t\tgo_find(hame, i)\n\t\t\thame[i] += 1\n\ngo_find(occ, 0)\nprint(ans)\n\t\n\n", "s = input()\ncnt = [0 for i in range(10)]\nfor c in s:\n\tcnt[ord(c) - ord('0')] += 1\ndp = [0 for i in range(20)]\t\ndp[0] = 1\ncomb = [[0 for i in range(40)] for j in range(40)]\nfor i in range(40):\n\tfor j in range(i + 1):\n\t\tif i == j or j == 0:\n\t\t\tcomb[i][j] = 1\n\t\telse:\n\t\t\tcomb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1]\n\nfor dig in [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]:\n\tif cnt[dig] == 0:\n\t\tcontinue\n\todp = dp\n\tdp = [0] * 20\n\tfor lsz in range(20):\n\t\tfor pick in range(1, cnt[dig] + 1):\n\t\t\tif (lsz + pick < 20):\n\t\t\t\tm = lsz + (dig != 0) + pick - 1\n\t\t\t\tr = lsz + (dig != 0) - 1\n\t\t\t\tways = 0\n\t\t\t\tif (m == r):\n\t\t\t\t\tways = 1\n\t\t\t\telif (r > m or r < 0 or m < 0):\n\t\t\t\t\tways = 0\n\t\t\t\telse:\n\t\t\t\t\tways = comb[m][r]\n\t\t\t\tdp[lsz + pick] += odp[lsz] * ways\n\nres = 0\nfor i in range(1, 20):\n\tres += dp[i]\nprint(res)\n\n", "from collections import defaultdict as dd\nfrom math import factorial as f\n\ns = input()\n\ncnt = dd(int)\n\nfor i in s:\n    cnt[i] += 1\n\nans = 0\n\ndef calc(cur_chr, dem, do_not_take_sum, total, diff):\n    nonlocal ans\n    nonlocal cnt\n\n    if cur_chr == '9':\n        for do_not_take in range(0, cnt[cur_chr] + 1):\n            if do_not_take > 0 and do_not_take == cnt[cur_chr]:\n                continue\n\n            cur_do_not_take_sum = do_not_take_sum + do_not_take\n            if cur_do_not_take_sum == total:\n                continue\n\n            cur_dem = dem * f(cnt[cur_chr] - do_not_take)\n            num = f(total - cur_do_not_take_sum)\n\n            ans += num // cur_dem * diff\n        return\n\n    for do_not_take in range(0, cnt[cur_chr] + 1):\n        if do_not_take > 0 and do_not_take == cnt[cur_chr]:\n            if not(diff == -1 and cur_chr == '0'):\n                continue\n        calc(chr(ord(cur_chr) + 1), dem * f(cnt[cur_chr] - do_not_take), do_not_take_sum + do_not_take, total, diff)\n\ncalc('0', 1, 0, len(s), 1)\n\nif cnt['0'] != 0:\n    cnt['0'] -= 1\n    calc('0', 1, 0, len(s) - 1, -1)\n\nprint(ans)\n", "def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\n\nfact = [1] * 1000\nfor i in range(2, 1000):\n    fact[i] = fact[i - 1] * i\n\ns = input()\ncnt = {}\nfor d in '0123456789':\n    cnt[int(d)] = s.count(d)\nans = 0\n\ndef getcnt(p):\n    q = [pi for pi in p if pi != 0]\n    num = fact[sum(q)]\n    den = 1\n    for qi in q:\n        den *= fact[qi]\n    gc = num // den\n    if p[0]:\n        q = [pi for pi in p if pi != 0]\n        q[0] -= 1\n        num = fact[sum(q)]\n        den = 1\n        for qi in q:\n            den *= fact[qi]\n        gc -= num // den\n    #print(p, gc)\n    return gc\n\ndef rec(d, p):\n    nonlocal ans\n    if d == 10:\n        ans += getcnt(p)\n        return\n    if cnt[d] == 0:\n        p[d] = 0\n        rec(d + 1, p)\n        return\n    for c in range(1, cnt[d] + 1):\n        p[d] = c\n        rec(d + 1, p)\n\np = [0] * 10\nrec(0, p)\n\nprint(ans)", "n=input()\ns=[0 for i in range(10)]\nfor i in n:\n    s[int(i)]+=1\n\nnol=s[0]\ndel s[0]\n#while 0 in s:\n#    s.remove(0)\ndef C(n,k): # C(10,2)=45\n    def fact(k):\n        s=1\n        for i in range(1,k+1):\n            s*=i\n        return s\n    return fact(n)/(fact(k)*fact(n-k))\ndef var(nol, koeff):\n    def C(n,k): # C(10,2)=45\n        def fact(k):\n            s=1\n            for i in range(1,k+1):\n                s*=i\n            return s\n        return fact(n)/(fact(k)*fact(n-k))\n    n=0\n    if nol!=0:\n        koeff.append(nol)\n    for i in koeff:\n        n+=i\n    s=1\n    for k in koeff:\n        s*=C(n, k)\n        n-=k\n    if nol!=0:\n        koeff.remove(nol)\n        nol-=1\n        koeff.append(nol)\n        s2=1\n        n=0\n        for i in koeff:\n            n+=i\n        for k in koeff:\n            s2*=C(n,k)\n            n-=k\n        s-=s2\n    return s\nc=0\nnado=len(s)-s.count(0)\nif nol!=0:\n    counter=1\nelse:\n    counter=0\nfor nolik in range(nol+1):\n    for c1 in range(s[0]+1):\n        for c2 in range(s[1]+1):\n            for c3 in range(s[2]+1):\n                for c4 in range(s[3]+1):\n                    for c5 in range(s[4]+1):\n                        for c6 in range(s[5]+1):\n                            for c7 in range(s[6]+1):\n                                for c8 in range(s[7]+1):\n                                    for c9 in range(s[8]+1):\n                                        koeff=[c1,c2,c3,c4,c5,c6,c7,c8,c9]\n                                        while 0 in koeff:\n                                            koeff.remove(0)\n                                        if len(koeff)==nado:\n                                            if counter==1 and nolik>=1 or counter==0:\n                                                c+=var(nolik, koeff)\nprint(int(c))", "a = list(map(int,input()));\ncnts = [0]*10;\nfor aa in a:\n    cnts[aa]+=1\n\nmem = {}\n\nmem[(1,0,0,0,0,0,0,0,0,0)] = 0;\n\nfor i in range(1,10):\n   mem[(0,)*(i) + (1,) + (0,)*(10-i-1)] = 1;\n\ndef get(a):\n    if (tuple(a) in mem):\n        return mem[tuple(a)]\n    else:\n        aa = list(a)\n        tot = 0\n        for i in range(0,10):\n            if (a[i] != 0):\n                aa[i] -= 1;\n                tot += get(aa);\n                aa[i] += 1;\n        mem[tuple(a)] = tot\n        return tot\n\nbigTot = 0\n\ndef goThrough(pre, post):\n    nonlocal bigTot\n    if (len(post) == 0) :\n        bigTot += get(pre)\n    elif (post[0] == 0):\n        goThrough(pre + (0,) , post[1:])\n    else:\n        for i in range(1,post[0]+1):\n            goThrough(pre + (i,) , post[1:])\n\n\n\ngoThrough((), cnts)\n\nprint(bigTot)\n\n", "def main():\n    ast = []\n    def fact(x):\n        if x == 0:\n            return 1\n        return x * fact(x - 1)\n    n = input()\n    def helper(dc):\n        a = 0\n        temp = [dc[j] for j in dc if j != '0']\n        s = sum(temp)\n        try:\n            ret = fact(s) * fact(s + dc['0'] - 1) // (fact(s - 1) * fact(dc['0']))\n        except:\n            ret = fact(s)\n        for i in temp:\n            ret = ret // fact(i)\n        for i in dc:\n            if dc[i] != 1:\n                d = {}\n                for j in dc:\n                    d[j] = dc[j]\n                d[i] -= 1\n                if str(d) not in ast:\n                    ast.append(str(d))\n                    a += helper(d)\n        return ret + a\n    dct = {}\n    for i in set(n):\n        dct[i] = n.count(i)\n    print(helper(dct))\n    return 0\nmain()\n", "ct=[0]*10\nfact=[1]*20\nans=0\ndef setAns(lol):\n    nonlocal ans\n    ans=lol\n\ndef calc(k,fr):\n    if(k==10):\n        # print(fr)\n        tot=sum(fr)\n        w0=fact[tot]\n        # print(tot,w0)\n        for i in range(10):\n            w0//=fact[fr[i]]\n        wo0=0\n        if(fr[0]>0):\n            fr[0]-=1\n            wo0=fact[tot-1]\n            for i in range(10):\n                wo0//=fact[fr[i]]\n            fr[0]+=1\n        tp=w0-wo0\n        # print(w0,wo0)\n        setAns(ans+tp)\n        return\n    if(ct[k]==0):\n        calc(k+1,fr)\n        return \n    for i in range(1,ct[k]+1):\n        # print(k,i)\n        fr[k]=i\n        calc(k+1,fr)\n\nfact[0]=1\nfor i in range(1,20):\n    fact[i]=fact[i-1]*i\nn=int(input())\nwhile(n>0):\n    k=n%10\n    n//=10\n    ct[k]+=1\nfreq=[0]*10\ncalc(0,freq)\nprint(ans)", "from collections import defaultdict\nfrom copy import deepcopy\n\na = list(input())\n\nd = defaultdict(int)\nfor x in a:\n    d[int(x)] += 1\n\nfact_mem = {}\n\n\ndef fact(n):\n    if n in fact_mem:\n        return fact_mem[n]\n    ans = 1\n    for i in range(1, n + 1):\n        ans *= i\n    fact_mem[n] = ans\n    return ans\n\n\nmem = {}\n\n\ndef f(d):\n    tmp = frozenset(list(d.items()))\n    if tmp in mem:\n        return 0\n    n = sum(d.values())\n    ans = 0\n    if d[0] > 0:\n        ans += (n - d[0]) * fact(n - 1)\n    else:\n        ans += fact(n)\n    if len(d) == 1 and d[0] > 0:\n        return 0\n    for x in d:\n        ans //= fact(d[x])\n    for k in d:\n        if d[k] > 1:\n            e = deepcopy(d)\n            e[k] -= 1\n            ans += f(e)\n    mem[frozenset(list(d.items()))] = ans\n    return ans\n\n\nans = f(d)\nprint(ans)\n", "a = int(input())\nb = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nwhile a != 0:\n    b[a % 10] += 1\n    a //= 10\n\nans = 0\n\ndef fact(n):\n    f = 1\n    for i in range(1, n + 1):\n        f *= i\n    return f\n\ndef f(n, arr):\n    #print(arr)\n    nonlocal ans\n    if n == 10:\n        sum = 0\n        for i in range(10):\n            sum += arr[i]\n        temp = 1\n        temp *= sum - arr[0]\n        #print(temp)\n        temp *= fact(sum - 1)\n        #print(temp)\n        for i in range(10):\n            if arr[i] > 1:\n                temp //= fact(arr[i])\n        \n        ans += temp\n        #print(ans)\n    else:\n        if b[n] > 0:\n            for i in range(1, b[n] + 1):\n                temp = arr.copy()\n                temp.append(i)\n                f(n + 1, temp)\n        else:\n            arr.append(0)\n            f(n + 1, arr)\n\n\nf(0, [])\nprint(int(ans))", "n = input()\nall = [0] * 10\nfor x in n:\n\tall[int(x)]+=1\n\ndp = [0] * 20\ndp[0] = 1\nfor i in range(1, 10):\n\tcur = [0] * 20\n\tif(all[i] > 0):\n\t\tfor le in range(0, 20):     \n\t\t\tfac = 1\n\t\t\tzn = 1\n\t\t\tfor kol in range(1, all[i] + 1):\n\t\t\t\tif(le + kol < 20):\n\t\t\t\t\tzn *= le + kol\n\t\t\t\t\tfac *= kol\n\t\t\t\t\tcur[le + kol] +=  (zn // fac) * dp[le]\n\t\tdp = cur\n\n\ncur = [0] * 20\nif(all[0] > 0):\n\tfor le in range(1, 20):\n\t\tfac = 1\n\t\tzn = 1\n\t\tfor kol in range(1, all[0] + 1):\n\t\t\tif(le + kol < 20):\n\t\t\t\tzn *= (le + kol-1)\n\t\t\t\tfac *= kol\n\t\t\t\tcur[le + kol] +=  (zn // fac) * dp[le]\n\tdp = cur\n\nprint(sum(dp))\n", "def fact(n):\n    nonlocal fa\n    if fa[n] != -1:\n        return fa[n]\n    else:\n        fa[n] = fact(n - 1) * n\n        return fa[n]\nfa = [-1] * 20\nfa[0] = 1\nfa[1] = 1\nfa[2] = 2\n\nres = 0\n\na = int(input())\nb = str(a)\ns = [0] * 10\nfor i in range(len(b)):\n    s[int(b[i])] += 1\n    \nfor i0 in range(s[0] + 1):\n    if i0 > 0 or s[0] == 0:\n        for i1 in range(s[1] + 1):\n            if i1 > 0 or s[1] == 0:\n                for i2 in range(s[2] + 1):\n                    if i2 > 0 or s[2] == 0:\n                        for i3 in range(s[3] + 1):\n                            if i3 > 0 or s[3] == 0:\n                                for i4 in range(s[4] + 1):\n                                    if i4 > 0 or s[4] == 0:\n                                        for i5 in range(s[5] + 1):\n                                            if i5 > 0 or s[5] == 0:\n                                                for i6 in range(s[6] + 1):\n                                                    if i6 > 0 or s[6] == 0:\n                                                        for i7 in range(s[7] + 1):\n                                                            if i7 > 0 or s[7] == 0:\n                                                                for i8 in range(s[8] + 1):\n                                                                    if i8 > 0 or s[8] == 0:\n                                                                        for i9 in range(s[9] + 1):\n                                                                            if i9 > 0 or s[9] == 0:\n                                                                                w2 = [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9]\n                                                                                su = 0\n                                                                                for i in range(10):\n                                                                                    su += w2[i]\n                                                                                for i in range(1, 10):\n                                                                                    if w2[i] > 0:\n                                                                                        w2[i] -= 1\n                                                                                        su -= 1\n                                                                                        \n                                                                                        res += fact(su)/(fact(w2[0]) * fact(w2[1]) * fact(w2[2]) * fact(w2[3]) * fact(w2[4]) * fact(w2[5]) * fact(w2[6]) * fact(w2[7]) * fact(w2[8]) * fact(w2[9]))\n                                                                                        \n                                                                                        su += 1\n                                                                                        w2[i] += 1\nprint(int(res))    ", "a = int(input())\nb = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nwhile a != 0:\n    b[a % 10] += 1\n    a //= 10\n\nans = 0\n\ndef gao(n):\n    f = 1\n    for i in range(1, n + 1):\n        f *= i\n    return f\n\ndef shit(n, arr):\n    nonlocal ans\n    if n == 10:\n        sum = 0\n        for i in range(10):\n            sum += arr[i]\n        gg = sum - arr[0]\n        gg *= gao(sum - 1)\n        for i in range(10):\n            if arr[i] > 1:\n                gg //= gao(arr[i])\n        ans += gg\n    else:\n        if b[n] > 0:\n            for i in range(1, b[n] + 1):\n                gg = arr.copy()\n                gg.append(i)\n                shit(n + 1, gg)\n        else:\n            arr.append(0)\n            shit(n + 1, arr)\n\n\nshit(0, [])\nprint(int(ans))", "#!/usr/bin/env python3\n\nfrom itertools import product\nfrom operator import mul\nfrom functools import reduce\n\nn = input().strip()\nc0 = n.count('0')\ncc = [n.count(str(i)) for i in range(10)]\ncc = [c for c in cc if c > 0]\n\nfacs = [1]\nfor i in range(1, 20):\n\tfacs.append(facs[-1] * i)\n\ndef prod(p):\n\treturn reduce(mul, p, 1)\n\ndef getC(p):\n\treturn facs[sum(p)] // prod(facs[pp] for pp in p)\n\ndef getcount(ct, a0=False):\n\tits = [list(range(1 - int(a0), ct[0] + 1))] + [list(range(1, cti + 1)) for cti in ct[1:]]\n\treturn sum(getC(p) for p in product(*its))\n\nif c0 == 0:\n\tres = getcount(cc)\nelif c0 == 1:\n\tccr = list(cc)\n\tdel ccr[0]\n\tres = getcount(cc) - getcount(ccr)\nelse:\n\tccr = list(cc)\n\tccr[0] -= 1\n\tres = getcount(cc) - getcount(ccr, True)\n\nprint (res)\n", "from itertools import product\nfrom math import factorial\nfrom operator import mul\nfrom functools import reduce\n\nseen = input()\n\ncounts = [[0] for digit in range(10)]\n\nfor digit in map(int, seen):\n    counts[digit].append(counts[digit][-1] + 1)\n\nfor digit in range(10):\n    if len(counts[digit]) > 1:\n        counts[digit].pop(0)\n\nanswer = 0\n\nfor count in product(*counts):\n    answer += factorial(sum(count)) // reduce(mul, (factorial(count[digit]) for digit in range(10)))\n    \n    if count[0] > 0:\n        count = list(count)\n        count[0] -= 1\n        answer -= factorial(sum(count)) // reduce(mul, (factorial(count[digit]) for digit in range(10)))\n        \nprint(answer)"]