["t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(a+b+c-1)", "for _ in range(int(input())):\n a,b,c=map(int,input().split())\n print(a+b+c-1)", "input=__import__('sys').stdin.readline\nfor _ in range(int(input())):\n\ta,b,c=map(int,input().split())\n\tprint(a+b+c-1)", "# by the authority of GOD     author: manhar singh sachdev #\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\ndef main():\n    for _ in range(int(input())):\n        a,b,c = map(int,input().split())\n        print(max(a,b,c))\n\n#Fast IO Region\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\ndef __starting_point():\n    main()\n__starting_point()", "for __ in range(int(input())):\n    a, b, c = list(map(int, input().split()))\n    print(a + b + c - 1)", "t=int(input())\nfor you in range(t):\n    l=input().split()\n    li=[int(i) for i in l]\n    print(max(li)+1)\n", "import sys\nii = lambda: sys.stdin.readline().strip()\nidata = lambda: [int(x) for x in ii().split()]\n\ndef solve():\n    a, b, c = idata()\n    print(max(a, b, c))\n    return\n\nfor t in range(int(ii())):\n    solve()\n", "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\ndef gift():\n    for _ in range(t):\n        a,b,c = list(map(int,input().split()))\n        yield a+b+c-1\n\ndef __starting_point():\n    t= int(input())\n    ans = gift()\n    print(*ans,sep='\\n')\n            \n\n\n#\"{} {} {}\".format(maxele,minele,minele)\n\n__starting_point()", "t = int(input())\n\nfor _ in range(t):\n    a,b,c = list(map(int,input().split()))\n    print(a+b+c-1)\n", "n=int(input())\nfor i in range(n):\n    d = [int(x) for x in input().split()]\n    print(sum(d)-1)", "for t in range(int(input())):\n    a = list(map(int, input().split()))\n    print(sum(a)-1)\n", "import sys\ninput = sys.stdin.readline\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input().strip()\n\ndef listStr():\n    return list(input().strip())\n\nimport collections as col\nimport math\n\n\"\"\"\n\"\"\"\n\ndef solve():\n    A, B, C = getInts()\n    return A+B+C-1\n\nfor _ in range(getInt()):\n    print(solve())\n", "# map(int, input().split())\nrw = int(input())\nfor wewq in range(rw):\n    a, b, c = list(map(int, input().split()))\n    print(a + b + c - 1)\n\n\n", "import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(a,b,c):  # fix inputs here\n    console(\"----- solving ------\")\n\n    # return a string (i.e. not a list or matrix)\n    return max([a,b,c])\n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n# fast read all\n# sys.stdin.readlines()\n\nfor case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    # k = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    a,b,c = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(map(int,input().split())))\n\n    res = solve(a,b,c)  # please change\n    \n    # Google - case number required\n    # print(\"Case #{}: {}\".format(case_num+1, res))\n\n    # Codeforces - no case number required\n    print(res)\n", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    a,b,c = [int(x) for x in input().split()]\n    print(max(a,b,c)+1)\n", "t = int(input())\n\nfor w in range(t):\n    a, b, c = list(map(int, input().split()))\n\n    print(max(a, b, c))\n", "for _ in range(int(input())):\n    a, b, c = list(map(int, input().split()))\n    print(a+b+c-1)\n", "def solve(a, b, c):\n    return (a + b + c - 1)\n\n\nt = int(input())\nfor i in range(t):\n    a, b, c = list(map(int, input().split()))\n    print(solve(a, b, c))\n", "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    d = a + b + c - 1\n    print(d)", "import sys\ninput = sys.stdin.readline\ndef print(val):\n    sys.stdout.write(str(val) + '\\n')\ndef prog():\n    for _ in range(int(input())):\n        a = list(map(int,input().split()))\n        print(sum(a) - 1)\nprog()\n", "for i in [0]*int(input()):print(sum(map(int,input().split()))-1)", "t=int(input())\nfor _ in range(t):\n    a, b, c=list(map(int, input().split()))\n    d=a+b+c-1\n    print(d)\n", "read = lambda: list(map(int, input().split()))\nt = int(input())\nfor i in range(t):\n\ta, b, c = read()\n\tprint(a + b + c - 1)\n", "t = int(input())\n\nfor case in range(t):\n    a, b, c = list(map(int, input().split()))\n    arr = list(sorted([a, b, c]))\n    minsm = a + b\n    min_len = abs(c - minsm)\n    print(min_len + 1)\n", "t = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    print(max(a,b,c))", "t= int(input())\nfor _ in range(t):\n    a,b,c = list(map(int, input().split()))\n    p = a+b+c\n    print(p-1)\n", "T = int(input())\nfor t in range(T):\n    xs = [int(x) for x in input().split()]\n    g = sum(xs)\n    print(g-1)", "t = int(input())\nfor _ in range(t):\n    l1 = [int(x) for x in input().split()]\n    print(sum(l1)-1)", "t=int(input())\nwhile t:\n    t-=1\n    a,b,c=list(map(int,input().split()))\n    print(max(a+b,b+c,c+a))\n", "z,zz=input,lambda:list(map(int,z().split()))\nzzz=lambda:[int(i) for i in stdin.readline().split()]\nszz,graph,mod,szzz=lambda:sorted(zz()),{},10**9+7,lambda:sorted(zzz())\nfrom string import *\nfrom re import *\nfrom collections import *\nfrom queue import *\nfrom sys import *\nfrom collections import *\nfrom math import *\nfrom heapq import *\nfrom itertools import *\nfrom bisect import *\nfrom collections import Counter as cc\nfrom math import factorial as f\nfrom bisect import bisect as bs\nfrom bisect import bisect_left as bsl\nfrom itertools import accumulate as ac\ndef lcd(xnum1,xnum2):return (xnum1*xnum2//gcd(xnum1,xnum2))\ndef prime(x):\n    p=ceil(x**.5)+1\n    for i in range(2,p):\n        if (x%i==0 and x!=2) or x==0:return 0\n    return 1\ndef dfs(u,visit,graph):\n    visit[u]=True\n    for i in graph[u]:\n        if not visit[i]:\n            dfs(i,visit,graph)\n\n###########################---Test-Case---#################################\n\"\"\"\n\n\n\n\"\"\"\n###########################---START-CODING---##############################\n\n\nnum=1\nnum=int(z())\n\nfor _ in range( num ):\n    a,b,c=szzz()\n    print(c)\n\n\n\n\n\n\n\n\n\n\n    \n    \n    \n        \n        \n            \n        \n        \n        \n    \n    \n        \n    \n        \n    \n    \n    \n        \n        \n    \n    \n        \n        \n        \n        \n        \n        \n        \n\n    \n    \n\n    \n\n    \n        \n        \n        \n    \n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n"]