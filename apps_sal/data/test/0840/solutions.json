["def can_make(a, b, k, n):\n    k2 = k\n    for t, v in zip(a, b):\n        diff = v - t * n\n        if diff < 0:\n            k2 += diff\n\n    return k2 >= 0\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    lo = 0\n    hi = 3 * 10**9\n    while lo + 1 < hi:\n        mid = (lo + hi) // 2\n        if can_make(a, b, k, mid):\n            lo = mid\n        else:\n            hi = mid\n\n    print(lo)\n\nmain()\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nl = 0\nr = int(1e10)\nwhile r - l > 1:\n    mid = (r + l) // 2\n    fail = False\n    kk = k\n    for i in range(n):\n        if b[i] < a[i] * mid:\n            if kk > 0:\n                kk -= a[i] * mid - b[i]\n                if kk < 0:\n                    fail = True\n            else:\n                fail = True\n    if fail:\n        r = mid\n    else:\n        l = mid\nprint(l)", "def check(m):\n    need = 0\n    for ax, bx in zip(a, b):\n        need += max(0, ax * m - bx)\n    return need <= k\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nl = 0\nr = 10 ** 10\nwhile r - l > 1:\n    m = (l + r) // 2\n    if check(m):\n        l = m\n    else:\n        r = m\nprint(l)\n", "from sys import stdin, stdout\nn, k = map(int, stdin.readline().split())\nno = list(map(int, stdin.readline().split()))\nyes = list(map(int, stdin.readline().split()))\nmn = float('inf')\nfor i in range(n):\n    mn = min(mn, yes[i] // no[i])\nl = mn\nr = mn + k + 1\nwhile r > l + 1:\n    m = (l + r) // 2\n    cnt = k\n    for i in range(n):\n        if yes[i] < no[i] * m:\n            cnt -= no[i] * m - yes[i]\n    if cnt >= 0:\n        l = m\n    else:\n        r = m\nstdout.write(str(l))", "n,k = list(map(int, input().split()))\na = (list(map(int, input().split())))\nb = (list(map(int, input().split())))\nc = list(zip(a,b))\nc.sort(key=lambda x:(x[1]//x[0]))\ni = 0\ncount = c[0][1]//c[0][0]\npart = 0\nfull = 0\nwhile k>0 and i<n:\n    if count < c[i][1]//c[i][0]:\n        if k>part:\n            k-=part\n            part = 0\n            count += 1\n            dco = min(c[i][1]//c[i][0]-count, k//full)\n            count += dco\n            k -= dco*full\n            part = full+c[i][0] - c[i][1]%c[i][0]\n            full += c[i][0]\n        else:\n            break\n    else:\n        part += c[i][0] - c[i][1]%c[i][0]\n        full += c[i][0]\n    #~ print(part, full)\n    i+=1\nif k>part:\n    count += 1\n    k-=part\ncount += k//full\nprint(count)\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nlo = 0\nhi = 2*1e9\n\ndef p(cookies):\n\tpowder = k\n\tfor i in range(len(b)):\n\t\thave = b[i]\n\t\tone = a[i]\n\t\tremainder = have - (one * cookies)\n\t\tif remainder < 0:\n\t\t\tpowder += remainder\n\t\t\tif powder < 0:\n\t\t\t\treturn False\n\treturn True\n\t\nwhile lo < hi:\n\tm = (lo + hi) // 2\n\tif p(m):\n\t\tlo = m + 1\n\telse:\n\t\thi = m\nprint(int(lo if p(lo) else lo - 1))", "read = lambda: list(map(int, input().split()))\nn, k = read()\na = list(read())\nb = list(read())\nc = [0] * n\nr = [0] * n\nfor i in range(n):\n    c[i] = b[i] // a[i]\n    r[i] = a[i] - b[i] % a[i]\n\ndef f(x):\n    k1 = k\n    for i in range(n):\n        if c[i] >= x:\n            continue\n        cnt = (x - c[i] - 1) * a[i] + r[i]\n        k1 -= cnt\n        if k1 < 0:\n            return False\n    return True\n    \nL, R = 0, 10 ** 10\nwhile R - L > 1:\n    M = (L + R) // 2\n    if f(M): L = M\n    else: R = M\nans = L\nprint(ans)\n", "n, k = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\ndef Possible(x) :\n    powder = k\n    for i in range(n) :\n        cnt = B[i] // A[i]\n        if cnt < x:\n            powder -= A[i]*x - B[i]\n            if powder < 0 :\n                return False\n    return True\n\nleft = 0\nright = 10**9 + 10**9 + 10\n\nwhile left + 1 < right :\n    mid = (left + right) // 2\n    if Possible(mid) :\n        left = mid\n    else :\n        right = mid\n\nprint(left)\n\n", "n, k = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nx, y = 0, max(B) + k + 1\nz = (x + y)//2\nwhile z != x:\n    credit = 0\n    for i in range(n):\n        credit += max(z*A[i] - B[i], 0)\n    if credit > k:\n        y = z\n    else:\n        x = z\n    z = (x + y)//2\nprint(z)\n", "# from duongtnhat's submission #17754492\n\ndef ok(u, a, b, n, k):\n    for i in range(n):\n        if b[i] >= a[i] * u:\n            continue\n        else:\n            k -= a[i] * u - b[i]\n            if k < 0:\n                return False\n    return k >= 0\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nl, r = 0, 2000000010\nwhile l < r - 1:\n    g = (l + r) // 2\n    if ok(g, a, b, n, k):\n        l = g\n    else:\n        r = g\nprint(l)", "def main():\n    n, k = list(map(int, input().split()))\n    l = sorted(((a, b) for a, b in zip(list(map(int, input().split())), list(map(int, input().split())))),\n               key=lambda e: (e[1] // e[0], e[1] - e[0] % e[1]))\n    lo, hi = l[0][1] // l[0][0], (l[-1][1] + k) // l[-1][0] + 1\n    l.append((0, 1))\n    while lo < hi - 1:\n        mid, x = (lo + hi) // 2, k\n        for a, b in l:\n            a *= mid\n            if a > b:\n                x -= a - b\n                if x < 0:\n                    hi = mid\n                    break\n            else:\n                lo = mid\n                break\n    print(lo)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def ok(x):\n    need = 0\n    for i in range(n):\n        tmp = a[i] * x - b[i]\n        if tmp > 0:\n            need += tmp\n    return need <= k\nn, k = (int(_) for _ in input().split())\na = [int(_) for _ in input().split()]\nb = [int(_) for _ in input().split()]\nlo, hi = 0, 2 * 10 ** 9\nwhile lo <= hi:\n    mid = (lo + hi) >> 1\n    if ok(mid):\n        lo = mid + 1\n    else:\n        hi = mid - 1\nprint(hi)\n", "class Ingred:\n    def __init__(self,i,a,b):\n        self.index=i\n        self.needed=a\n        self.given=b\n        self.possbl=int(b/a)\n    def __repr__(self):\n        return \"[\"+str(self.needed)+\",\"+str(self.given)+\",\"+str(self.possbl)+\"]\"\n\ndef per(obj):\n    return obj.possbl\n\ndef findIndex(x,arr):\n    start=0\n    end=len(arr)-1\n    if arr[0].possbl>=x:\n        return -1\n    if arr[-1].possbl<x:\n        #print(\"LAST HERE FOR \" ,x)\n        return end\n    while True:\n        ind=int((start+end)/2)\n        if arr[ind].possbl<x:\n            start=ind\n            if ind<len(arr)-1 and arr[ind+1].possbl>=x:\n                return ind\n        else:\n            end=ind\n\n        if ind==len(arr)-1:\n            #print(\"LAST HERE FOR \" ,x)\n            return ind\n        \ndef xTimes(x,arr,needed,given,magic):\n    ind=findIndex(x,arr)\n    if ind==-1:\n        return True\n    deficit=needed[ind]*x-given[ind]\n    #if x==178:\n        #print(needed[ind],x,given[ind],deficit)\n    if deficit>magic:\n        return False\n    return True\n        \ninf=list(map(int,input().split()))\nn=inf[0]\nk=inf[1]\ntemp=list(map(int,input().split()))\ntmp=list(map(int,input().split()))\ngiven=[0]*n\nneeded=[0]*n\narray=[None]*n\nfor i in range(n):\n    array[i]=Ingred(i,temp[i],tmp[i])\narray=sorted(array,key=per)\nfor i in range(n):\n    needed[i]=needed[i-1]+array[i].needed\n    given[i]=given[i-1]+array[i].given\n#print(array)\n#print(needed)\n#print(given)\nstart=0\nend=4000000009\nx=start\ndic={}\nwhile True:\n    p=xTimes(x,array,needed,given,k)\n    dic[x]=True\n    if p:\n        start=x\n        #print(\"Possible for \",x,\" times.\")\n    else:\n        end=x\n\n    x=int((start+end)/2)\n    try:\n        dic[x]\n        break\n    except:\n        damn=0\nprint(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]