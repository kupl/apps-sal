["# You lost the game.\nn = int(input())\nA = list(map(int, input().split()))\n\nV = [0 for _ in range(n)]\nG = V[:]\n\ndef visiter(i,d):\n    nonlocal V\n    nonlocal G\n    G[i] = d+1\n    V[i] = d+1\n    c = d+2\n    while 1:\n        if V[A[i]-1] and G[A[i]-1] > d:\n            return 1,c-G[A[i]-1],G[A[i]-1]-1-d,c\n        elif V[A[i]-1]:\n            return 0,0,c-1-d,c\n        else: \n            G[A[i]-1] = c\n            c += 1\n            V[A[i]-1] = 1\n            i = A[i]-1\n\n\n\nT = [1 for _ in range(n+1)]\nfor i in range(1,n+1):\n    T[i] = (T[i-1]*2) % (10**9 + 7)\n\nR = []\nd = 0\ni = 0\nc = 0\nfor i in range(n):\n    if V[i] == 0:\n        v,l,s,c = visiter(i,c)\n        if v:\n            R += [l]\n        d += s\n        \nr = T[d]\nfor x in R:\n    r = (r*(T[x]-2)) % (10**9 + 7)\nprint(r)\n", "class Solution():\n    def __init__(self):\n        self.n = int(input())\n        self.G = [ int(x) for x in input().strip().split(' ') ]\n        self.G.insert(0,0)\n\n        self.used = [0 for i in range(self.n+1)]\n        self.dis  = [0 for i in range(self.n+1)]\n        self.circle = []\n        self.mod = 10**9+7\n\n    def solve(self):\n        cur = 1\n        for x in range(1,self.n+1):\n            if self.used[x]==0:\n                circle = self.dfs(x,0,cur)\n                if circle is not None:\n                    self.circle.append(circle)\n                cur += 1\n\n        self.sum = self.n\n        self.ans = 1\n        mod = self.mod\n        for c in self.circle:\n            self.ans *= (pow(2,c,mod)-2)%self.mod\n            self.sum -= c\n\n        if self.sum == self.n:\n            self.ans = pow(2,self.n,mod) - 2\n        else:\n            self.ans *= pow(2,self.sum,mod)\n        self.ans %= self.mod\n\n        return int(self.ans)\n\n    def dfs(self,x,l,cur):\n        while True:\n            if self.used[x] != 0:\n                if self.used[x] == cur:\n                    return l - self.dis[x]\n                return None\n            else:\n                self.used[x] = cur\n                self.dis[x] = l\n                x = self.G[x]\n                l += 1\n\ns = Solution()\nprint(s.solve())\n", "def main():\n    n, m = int(input()), 1000000007\n    aa, idx = [0, *list(map(int, input().split()))], [0] * (n + 1)\n    res = pos = 1\n    for i in range(1, n + 1):\n        if not idx[i]:\n            j, start = i, pos\n            while not idx[j]:\n                idx[j] = pos\n                pos += 1\n                j = aa[j]\n            if idx[j] >= start:\n                n -= pos - idx[j]\n                res = res * (pow(2, pos - idx[j], m) - 2) % m\n    print(res * pow(2, n, m) % m)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nl =  list(map(int, input().split()))\nl.insert(0,0)\nmark = {}\nloop, pos, res , mod= 0, 1, 1, int(1e9+7)\nfor i in range(1, n+1):\n    if not i in mark:\n        start, j = pos, i\n        while not j in mark:\n            mark[j] = pos\n            pos+= 1\n            j = l[j]\n        if mark[j]>=start:\n            size = pos-mark[j]\n            loop+= size\n            res*= pow(2, size)-2+mod\n            res%= mod\nres = (res *  pow(2, n-loop,mod))%mod\nprint(res)\n", "from sys import stdin\n\nn = int(stdin.readline())\na = [int(x)-1 for x in stdin.readline().split()]\n\nnodes = set([x for x in range(n)])\n\nloops = []\n\nwhile nodes:\n    for x in nodes:\n        nxt = x\n        break\n    visited = set()\n    q = []\n\n    early = False\n    while not nxt in visited:\n        if not nxt in nodes:\n            early = True\n            break\n        q.append(nxt)\n        visited.add(nxt)\n        nodes.remove(nxt)\n        nxt = a[nxt]\n\n    if not early:\n        loops.append(len(q)-q.index(nxt))\n\nbase = pow(2,n-sum(loops),10**9+7)\n\nfor x in loops:\n    base *= pow(2,x,10**9+7)-2\n    base %= 10**9+7\n\nprint(base)\n"]