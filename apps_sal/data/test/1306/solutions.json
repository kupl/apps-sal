["mod = 10**9 + 7\nn, h = map(int, input().split())\na = list(map(int, input().split()))\ndp = [[0 for j in range(h + 1)] for i in range (n + 1)]\ndp[0][0] = 1\nfor i in range(1, n + 1):\n\tneed = h - a[i - 1]\n\tif need < 0:\n\t\tbreak\n\tif need == 0:\n\t\tdp[i][0] = dp[i - 1][0]\n\telse:\n\t\tdp[i][need] = (dp[i - 1][need] + dp[i - 1][need - 1]) % mod\n\t\tdp[i][need - 1] = (dp[i][need] * need) % mod\nprint(dp[n][0])", "mod = 10**9 + 7\nn, h = map(int, input().split())\na = list(map(int, input().split()))\ndp = [[0 for j in range(h + 1)] for i in range (n + 1)]\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    need = h - a[i - 1]\n    if need < 0:\n        break\n    if need == 0:\n        dp[i][0] = dp[i - 1][0]\n    else:\n        dp[i][need] = (dp[i - 1][need] + dp[i - 1][need - 1]) % mod\n        dp[i][need - 1] = (dp[i][need] * need) % mod\nprint(dp[n][0])", "n, h = map(int, input().split())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\ndp = [[0] * 2000  for i in range(n)]\n\ndp[0][0] = 1 if a[0] in (h, h - 1) else 0\ndp[0][1] = 1 if a[0] == h - 1 else 0\n\nfor i in range(1, n):\n    opn = h - a[i]\n    if opn >= 0:\n        dp[i][opn] += dp[i-1][opn]\n        if opn > 0:\n            dp[i][opn] += dp[i-1][opn-1]\n        dp[i][opn] %= mod\n    opn -= 1\n    if opn >= 0:\n        dp[i][opn] += dp[i-1][opn+1] * (opn+1) + dp[i-1][opn] + dp[i-1][opn] * opn\n        dp[i][opn] %= mod\n\nprint(dp[-1][0])", "mod = 10 ** 9 + 7\nn, h = map(int, input().split())\na = list(map(int, input().split()))\ndp = [[0 for j in range(h + 1)] for i in range (n + 1)]\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    need = h - a[i - 1]\n    if need < 0:\n        break\n    if need == 0:\n        dp[i][0] = dp[i - 1][0]\n    else:\n        dp[i][need] = (dp[i - 1][need] + dp[i - 1][need - 1]) % mod\n        dp[i][need - 1] = (dp[i][need] * need) % mod\nprint(dp[n][0])", "mod = 10 ** 9 + 7\nn, h = map(int, input().split())\na = list(map(int, input().split()))\ndp = [[0 for j in range(h + 1)] for i in range (n + 1)]\ndp[0][0] = 1\n\nfor i in range(1, n + 1):\n    need = h - a[i - 1]\n    if need < 0:\n        break\n    if need == 0:\n        dp[i][0] = dp[i - 1][0]\n    else:\n        dp[i][need] = (dp[i - 1][need] + dp[i - 1][need - 1]) % mod\n        dp[i][need - 1] = (dp[i][need] * need) % mod\nprint(dp[n][0])", "n,h=list(map(int,input().split()))\na = list(map(int, input().split()))\nmod=1000000007\nfor i in range(0,n):\n    a[i]=h-a[i]\nans=1\nflag=0\nif(n==1):\n    if((a[0]==0)|(a[0]==1)):\n        print(1)\n    else:\n        print(0)\nelse:\n    if((a[0]==0)|(a[0]==1)):\n        for i in range(1,n):\n            k=a[i]-a[i-1]\n            if((k<-1)|(k>1)):\n                print(0)\n                return\n            elif(k==1):\n                if(a[i]>1):\n                    flag=flag+1\n                continue\n            elif(k==0):\n                ans=(ans*(a[i-1]+1))%mod\n            elif(k==-1):\n                ans=(ans*(a[i-1]))%mod\n                if(a[i]>0):\n                    flag=flag-1\n        if(flag!=0):\n            print(0)\n        else:\n            print(ans)\n    else:\n        print(0)\n", "MOD = int(1e9 + 7)\nn, h = list(map(int, input().split(\" \")))\nval = list(map(int, input().split(\" \"))) + [h]\npre = 1\nans = 1\nfor i in range(1, n+1):\n    if val[i] > h:\n        ans = 0\n        break\n    if val[i-1] - val[i] == 1:\n        ans = pre\n    if val[i-1] - val[i] == -1:\n        ans = pre * (h - val[i-1])\n    if val[i-1] == val[i]:\n        ans = pre + pre * (h - val[i])\n    if abs(val[i] - val[i-1]) > 1:\n        ans = 0\n        break\n    pre = ans\nprint(ans % MOD)\n", "n, h = map(int, input().split())\na = [int(i) for i in input().split()]\ndp = [0]*(n+1)\nif a[0] == h or a[0] + 1 == h:\n\t\tdp[0] = 1\nMOD = 10**9 + 7\nfor i in range(1, n):\n\t\td = h - a[i]\n\t\tif d < 0:\n\t\t\tcontinue\n\t\tif a[i - 1] + d - 1 == h and d > 0:\n\t\t\tdp[i] += dp[i - 1]\n\t\tif a[i - 1] + d + 1 == h:\n\t\t\tdp[i] += dp[i - 1] * (d + 1)\n\t\tif a[i - 1] + d == h:\n\t\t\tdp[i] += dp[i - 1] * (d + 1)\n\t\tdp[i] %= MOD\nif a[n - 1] == h or a[n - 1] + 1 == h:\n  print(dp[n-1])\nelse:\n  print(0)", "x = input().split()\nn = int(x[0])\nh = int(x[1])\nx = input().split()\na = list(int(x[i]) for i in range(len(x)))\na.insert(0, h)\na.append(h)\nsign = 0\nway = 1\ninterval = []\nstart = []\nend = {}\nlimit = 1000000007\nfor i in range(1, len(a)):\n    if (abs(a[i - 1] - a[i]) > 1) or (a[i] > h):\n        sign = 1\n        break\n    elif a[i] - a[i - 1] == -1:\n        start.append(i)\n    elif a[i] - a[i - 1] == 1:\n        combination = len(start) - len(list(end.keys()))\n        end[i - 1] = combination\n    elif (a[i] == a[i - 1]) and (a[i] < h):\n        interval.append(i)\nif sign == 1:\n    print(0)\nelse:\n    for i in range(len(interval)):\n        way *= (h - a[interval[i]] + 1)\n        if way > limit:\n            way = way % limit\n    for i in list(end.keys()):\n        way *= end[i]\n        if way > limit:\n            way = way % limit\n    print(way)\n", "n,h = list(map(int,input().split()))\na = list(map(int,input().split()))\na = [h-i for i in a]\nif min(a) < 0 or a[0] > 1 or a[-1] > 1:\n    print(0)\nelse:\n    t = 1\n    for i in range(1,n):\n        dif = a[i-1]-a[i]\n        if dif >1 or dif <-1:t = 0\n        else:\n            if dif == 0:t*=(a[i-1]+1)\n            elif dif == 1:t*=(a[i-1])\n        #print(t)\n        t%=(1000000000+7)\n    print(t)\n", "f = lambda: map(int, input().split())\nn, h = f()\ns, i = 1, 0\nfor j in f():\n    j = h - j\n    if j < 0 or abs(j - i) > 1: print(0);return\n    if j <= i: s = s * (j + 1) % 1000000007\n    i = j\nprint(0 if i > 1 else s)", "\nfrom collections import defaultdict\n\nimport sys\n\nd = defaultdict(int)\n\n#input = raw_input\n\nN, h = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\n\nB = [0]\nfor a in A:\n    B.append(h-a)\n    if h-a < 0:\n        print(0)\n        return\nB.append(0)\n\nMOD = 10**9+7\n\nd[0, False, False] = 1\n\nfor i in range(1, N+2):\n    for op in [False, True]:\n        for cl in [False, True]:\n            last_close = B[i-1] - B[i] + int(op)\n            #\n            if cl and B[i] == 0: continue # can't close anything\n            if last_close not in [0, 1]: continue # doesn't add up\n            s = d[i-1, False, bool(last_close)] + d[i-1, True, bool(last_close)]\n            if cl: s *= B[i]\n            #if i == 2 and op:\n            #    print(cl, s, last_close,\n            #          d[i-1, False, bool(last_close)] ,\n            #          d[i-1, True, bool(last_close)])\n            d[i, op, cl] = s % MOD\n\n#print(d)\n\n#for i in range(N+2):\n#    print(\"\\n\", i, end=\": \")\n#    for op in [False, True]:\n#        for cl in [False, True]:\n#            print(d[i, op, cl], end=\" \")\n#print()\n\n\n\nprint(d[N+1, False, False])\n", "n,h = list(map(int,input().split()))\na = list(map(int,input().split()))\na = [h-i for i in a]\nif min(a) < 0 or a[0] > 1 or a[-1] > 1:\n    print(0)\nelse:\n    t = 1\n    for i in range(1,n):\n        dif = a[i-1]-a[i]\n        if dif >1 or dif <-1:t = 0\n        else:\n            if dif == 0:t*=(a[i-1]+1)\n            elif dif == 1:t*=(a[i-1])\n        #print(t)\n        t%=(1000000000+7)\n    print(t)\n"]