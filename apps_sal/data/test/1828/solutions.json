["#!/usr/bin/env python3\n\ntry:\n    while True:\n        n = int(input())\n        prev_x, prev_y = list(map(int, input().split()))\n        prev_d = 0\n        result = 0\n        for i in range(n):\n            x, y = list(map(int, input().split()))\n            if y > prev_y:\n                d = 0\n            elif x > prev_x:\n                d = 1\n            elif y < prev_y:\n                d = 2\n            else:\n                d = 3\n            if ((d + 1) & 0x3) == prev_d:\n                result += 1\n            prev_x, prev_y = x, y\n            prev_d = d\n        print(result)\n\nexcept EOFError:\n    pass\n", "def isLeft(x1, y1, x2, y2, x3, y3):\n    return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0\n\n\ndef isMn(s):\n    return not (True in s and False in s)\n\ndef pr():\n    for i in range(1, n - 1):\n        s.append(isLeft(x[i - 1], y[i - 1], x[i], y[i], x[i + 1], y[i + 1]))\n    s.append(isLeft(x[-1], y[-1], x[0], y[0], x[1], y[1]))\n    s.append(isLeft(x[-2], y[-2], x[-1], y[-1], x[0], y[0]))\n\n\nn = int(input())\nx = []\ny = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\ns = []\npr()\nans = 0\nfor i in range(len(s)):\n    if not s[i]:\n        ans += 1\nprint(min(ans, len(s) - ans))", "n=int(input())\na=[]\n\ntr=0\ntl=0\n\nfor i in range(0,n+1):\n    p=input().split()\n    p[0]=int(p[0])\n    p[1]=int(p[1])\n    a.append(p)\na.append(a[0])\n\nfor i in range(0,n):\n    x1=a[i+1][0]-a[i][0]\n    y1=a[i+1][1]-a[i][1]\n    x2=a[i+2][0]-a[i+1][0]\n    y2=a[i+2][1]-a[i+1][1]\n    if x1>0:\n        if y2>0:\n            tl+=1\n        else:\n            tr+=1\n    elif x1<0:\n        if y2<0:\n            tl+=1\n        else:\n            tr+=1\n    elif y1>0:\n        if x2<0:\n            tl+=1\n        else:\n            tr+=1\n    else:\n        if x2>0:\n            tl+=1\n        else:\n            tr+=1\n\nprint(str(min(tl,tr)))\n\n    \n\n", "\nn = int(input())\n\np = []\nfor _ in range(n + 1):\n\tx, y = map(int, input().split())\n\tp.append((x, y))\n\ndef cp(v1, v2):\n\treturn v1[0] * v2[1] - v1[1] * v2[0]\n\nanswer = 0\nfor i in range(n - 1):\n\tv1 = (p[i + 1][0] - p[i][0], p[i + 1][1] - p[i][1])\n\tv2 = (p[i + 2][0] - p[i + 1][0], p[i + 2][1] - p[i + 1][1])\n\tif cp(v1, v2) > 0:\n\t\tanswer += 1\n\nprint(answer)", "n = int(input())\nprint((n - 4) // 2)\n", "n = int(input())\np1 = tuple(map(int, input().split()))\np2 = tuple(map(int, input().split()))\ncount = 0\n\nfor x in range(n - 1):\n    p3 = tuple(map(int, input().split()))\n    x1 = p2[0] - p1[0]\n    y1 = p2[1] - p1[1]\n    x2 = p3[0] - p2[0]\n    y2 = p3[1] - p2[1]\n    if x1 * y2 > x2 * y1:\n        count += 1\n    p1 = p2\n    p2 = p3\n\nprint(count)\n", "n = int(input())\na, b = 0, 0\n\ngi = lambda : list(map(int, input().split(' ')))\nu, v = gi()\nx, y = gi()\nfor _ in range(n - 1):\n    p, q = gi()\n    w = (x - u) * (q - y) - (y - v) * (p - x)\n    if w < 0:\n        a += 1\n    else:\n        b += 1\n    u, v, x, y = x, y, p, q\n\nprint(min(a, b))\n", "n = int(input())\ncount = 0\npoints = [tuple(map(int, input().split())), tuple(map(int, input().split()))]\nfor i in range(2, n + 1):\n    x, y = map(int, input().split())\n    points.append((x, y))\n    if points[i - 1][0] < x:\n        temp = 'east'\n    if points[i - 1][0] > x:\n        temp = 'west'\n    if points[i - 1][1] < y:\n        temp = 'north'\n    if points[i - 1][1] > y:\n        temp = 'south'\n    x = points[i - 1][0]\n    y = points[i - 1][1]\n    if points[i - 2][0] < x:\n        temp1 = 'east'\n    if points[i - 2][0] > x:\n        temp1 = 'west'\n    if points[i - 2][1] < y:\n        temp1 = 'north'\n    if points[i - 2][1] > y:\n        temp1 = 'south'\n    if (temp1, temp) in [('north', 'west'), ('west', 'south'), ('south', 'east'), ('east', 'north')]:\n        count += 1\nprint(count)", "n = int(input())\npoint = [0] * (n + 1)\nfor i in range(n + 1):\n    point[i] = [int(x) for x in input().split()]\nv = [0] * n\nfor i in range(1, n + 1):\n    v[i - 1] = [point[i][0] - point[i - 1][0], point[i][1] - point[i - 1][1]]\nans = 0\nfor i in range(1, n - 1):\n    if v[i - 1][0] * v[i][1] - v[i - 1][1] * v[i][0] > 0:\n        ans += 1\nif v[n - 1][0] * v[0][1] - v[n - 1][1] * v[0][0] > 0:\n    ans += 1\nprint(ans)", "#!/usr/bin/env python3\n\nread_ints = lambda : list(map(int, input().split()))\n\ndef solve(ps):\n    ans = 0\n    for i in range(len(ps)-2):\n        if ccw(ps[i], ps[i+1], ps[i+2]):\n            ans += 1\n    return ans\n\ndef ccw(p1, p2, p3):\n    return (p2[0] - p1[0])*(p3[1] - p1[1]) - (p2[1] - p1[1])*(p3[0] - p1[0]) > 0\n\ndef __starting_point():\n    n = int(input())\n    ps = []\n    for i in range(n+1):\n        ps.append(read_ints())\n    print(solve(ps))\n\n__starting_point()", "n = int(input())\ndata = [list(map(int, input().split())) for i in range(n + 1)]\nans = 0\nfor i in range(n - 3):\n    x0, y0, x1, y1, x2, y2 = data[i][0], data[i][1], data[i + 1][0], data[i + 1][1], data[i + 2][0], data[i + 2][1]\n    if y0 == y1 and x1 == x2:\n        ans += 1\nprint(ans)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\nn   = int(input())\nx   = []\ny   = []\n\n(x0, y0) = (int(i) for i in input().split())\n\nfor i in range(n):\n    (x1, y1) = (int(i) for i in input().split())\n    x.append(x1-x0)\n    y.append(y1-y0)\n    x0 = x1\n    y0 = y1\n\nstart = time.time()\n\nans = 0\nfor i in range(n-1):\n    if x[i]*y[i+1]-x[i+1]*y[i] > 0:\n        ans += 1\n\nif x[n-1]*y[0]-x[0]*y[n-1] > 0:\n    ans += 1\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "3\n\nclass StdIO:\n\tdef read_int(self):\n\t\treturn int(self.read_string())\n\n\tdef read_ints(self, sep=None):\n\t\treturn [int(i) for i in self.read_strings(sep)]\n\n\tdef read_float(self):\n\t\treturn float(self.read_string())\n\n\tdef read_floats(self, sep=None):\n\t\treturn [float(i) for i in self.read_strings(sep)]\n\n\tdef read_string(self):\n\t\treturn input()\n\n\tdef read_strings(self, sep=None):\n\t\treturn self.read_string().split(sep)\n\nio = StdIO()\n\n\ndef left(u, v):\n\tux, uy = u\n\tvx, vy = v\n\t\n\tz = ux*vy - uy*vx\n\n\treturn z > 0\n\n\ndef main():\n\tn = io.read_int()\n\n\tx0, y0 = io.read_ints()\n\tx1, y1 = io.read_ints()\n\n\tpv = (x1 - x0, y1 - y0)\n\tppx, ppy = x1, y1\n\n\tdang = 0\n\tfor i in range(2, n+1):\n\t\tpx, py = io.read_ints()\n\t\tv = (px - ppx, py - ppy)\n\n\t\tif left(pv, v):\n\t\t\tdang += 1\n\n\t\tpv = v\n\t\tppx, ppy = px, py\n\n\tprint(dang)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "n = int(input())\ncounter = 0\ndirection = 0\ninput()\nx_0, y_0 = list(map(int, input().split()))\nfor i in range(n - 1):\n    x_1, y_1 = list(map(int, input().split()))\n    if direction == 0:\n        if x_1 < x_0:\n            counter += 1\n    elif direction == 1:\n        if y_1 > y_0:\n            counter += 1\n    elif direction == 2:\n        if x_0 < x_1:\n            counter += 1\n    elif direction == 3:\n        if y_1 < y_0:\n            counter += 1\n    if direction == 0 or direction == 2:\n        if x_1 < x_0:\n            direction = 3\n        else:\n            direction = 1\n    else:\n        if y_1 > y_0:\n            direction = 0\n        else:\n            direction = 2\n    x_0, y_0 = x_1, y_1\nprint(counter)\n", "num = int(input())\ntrack = []\nfor i in range(num+1):\n    temp = list(map(int,input().split()))\n    track.append(temp)\ndef checkDirection(pointOne, pointTwo):\n    if pointOne[0] < pointTwo[0]:\n        return \"E\"\n    if pointOne[0] > pointTwo[0]:\n        return \"W\"\n    if pointOne[1] < pointTwo[1]:\n        return \"N\"\n    if pointOne[1] > pointTwo[1]:\n        return \"S\"\ndef checkDanger(pointOne, pointTwo, pointThree):\n    first = checkDirection(pointOne, pointTwo)\n    second = checkDirection(pointTwo, pointThree)\n    if (first == \"W\" and second == \"S\") or (first == \"S\" and second == \"E\") or (first == \"N\" and second == \"W\") or (first == \"E\" and second == \"N\"):\n        return True\n    else:\n        return False\nnumDanger = 0\nfor i in range(1,len(track)-1):\n    if checkDanger(track[i-1],track[i],track[i+1]):\n        numDanger += 1\nprint(numDanger)", "def clock(a, b, c):\n    u = b - a\n    v = c - b\n    return u.real * v.imag - u.imag * v.real < 0\n\n\nn = int(input())\np = []\nfor i in range(n + 1):\n    x, y = list(map(int, input().split()))\n    p.append(complex(x, y))\n\ncnt = 0\nfor i in range(1, n):\n    if not clock(p[i - 1], p[i], p[i + 1]):\n        cnt += 1\n\nprint(cnt)\n", "read = lambda: list(map(int, input().split()))   \nvect = lambda a, b: a[0] * b[1] - a[1] * b[0]\nvector = lambda A, B: (B[0] - A[0], B[1] - A[1])\nn = int(input())\np = [tuple(read()) for i in range(n)]\ncnt = 0\nfor i in range(2, n):\n    v1 = vector(p[i], p[i - 1])\n    v2 = vector(p[i - 1], p[i - 2])\n    if vect(v1, v2) < 0:\n        cnt += 1\nprint(cnt)\n", "n = int(input())\nsx, sy = (int(x) for x in input().split())\nax, ay = sx, sy\nbx, by = (int(x) for x in input().split())\ncx, cy = (int(x) for x in input().split())\n\nans = 0\n\nfor i in range(n - 3):\n  fx = bx - ax\n  fy = by - ay\n  lx = cx - bx\n  ly = cy - by\n  if fx != 0: fx = fx/abs(fx)\n  if fy != 0: fy = fy/abs(fy)\n  if lx != 0: lx = lx/abs(lx)\n  if ly != 0: ly = ly/abs(ly)\n  if (fy ==  1 and lx == -1): ans += 1\n  if (fx ==  1 and ly ==  1): ans += 1\n  if (fy == -1 and lx ==  1): ans += 1\n  if (fx == -1 and ly == -1): ans += 1\n\n\n  ax, ay = bx, by\n  bx, by = cx, cy\n  cx, cy = (int(x) for x in input().split())\n\nfx = bx - ax\nfy = by - ay\nlx = cx - bx\nly = cy - by\nif fx != 0: fx = fx/abs(fx)\nif fy != 0: fy = fy/abs(fy)\nif lx != 0: lx = lx/abs(lx)\nif ly != 0: ly = ly/abs(ly)\nif (fy ==  1 and lx == -1): ans += 1\nif (fx ==  1 and ly ==  1): ans += 1\nif (fy == -1 and lx ==  1): ans += 1\nif (fx == -1 and ly == -1): ans += 1\n\n\nax, ay = bx, by\nbx, by = cx, cy\ncx, cy = sx, sy\n\nfx = bx - ax\nfy = by - ay\nlx = cx - bx\nly = cy - by\nif fx != 0: fx = fx/abs(fx)\nif fy != 0: fy = fy/abs(fy)\nif lx != 0: lx = lx/abs(lx)\nif ly != 0: ly = ly/abs(ly)\nif (fy ==  1 and lx == -1): ans += 1\nif (fx ==  1 and ly ==  1): ans += 1\nif (fy == -1 and lx ==  1): ans += 1\nif (fx == -1 and ly == -1): ans += 1\n\n\nprint(ans)", "def direction(a, b):\n    if a[0] == b[0]:\n        if a[1] < b[1]:\n            return \"U\"\n        return \"D\"\n    if a[0] < b[0]:\n        return \"R\"\n    return \"L\"\n\ndef dangerous(a, b):\n    if a==\"R\" and b==\"U\":\n        return True\n    if a==\"U\" and b==\"L\":\n        return True\n    if a==\"L\" and b==\"D\":\n        return True\n    if a==\"D\" and b==\"R\":\n        return True\n    return False\n\nn = int(input())+1\nl = []\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl1 = []\nfor i in range(n-1):\n    l1.append(direction(l[i],l[i+1]))\nans = 0\nfor i in range(n-2):\n    if dangerous(l1[i],l1[i+1]):\n        ans += 1\n\nprint(ans)\n", "n = int(input())\npoints = []\nfor _ in range(n):\n    x, y = map(int, input().split())\n    points.append([x, y])\npoint_count = 0\nfor i in range(len(points) - 1):\n    pre_point = points[i-1]\n    point = points[i]\n    next_point = points[i+1]\n    if pre_point[0] == point[0] and next_point[1] == point[1]:\n        if point[0] > next_point[0] and point[1] > pre_point[1] or point[0] < next_point[0] and point[1] < pre_point[1]:\n            point_count += 1\n            #print(point)\n    elif next_point[0] == point[0] and pre_point[1] == point[1]:\n        if point[0] > pre_point[0] and point[1] < next_point[1] or point[0] < pre_point[0] and point[1] > next_point[1]:\n            point_count += 1\n            #print(point)\nprint(point_count)", "n = int(input())\npoints = []\nans = 0 \nfor i in range(n):\n    x1,y1 = (int(i) for i in input().split())\n    points+=[[x1,y1]]\nfor i in range(n):\n    x1 = points[i][0]\n    y1 = points[i][1]\n    x2 = points[(i+1)%n][0]\n    y2 = points[(i+1)%n][1]    \n    x3 = points[(i+2)%n][0]\n    y3 = points[(i+2)%n][1]   \n    if y1 == y2:\n        if x2 > x1:\n            if y3 > y2 :\n                ans+=1\n                \n        else:\n            if y3 < y2:\n                ans+=1\n    else:\n        if y2 > y1:\n            if x3 < x2:\n                ans+=1\n        else:\n            if x2 < x3:\n                ans+=1\n                \n                \nprint(ans)\n", "n=int(input())\ns=[int(z) for z in input().split()]\nq2=[int(z) for z in input().split()]\nq1=s\nq3=[int(z) for z in input().split()]\nres=0\nwhile q2!=s:\n\tif q2[0]-q1[0]<0 and q3[1]-q2[1]<0:\n\t\tres+=1\n\telif q2[0]-q1[0]>0 and q3[1]-q2[1]>0:\n\t\tres+=1\n\telif q2[1]-q1[1]>0 and q3[0]-q2[0]<0:\n\t\tres+=1\n\telif q2[1]-q1[1]<0 and q3[0]-q2[0]>0:\n\t\tres+=1\n\tif q3!=s:\n\t\tq1,q2,q3=q2,q3,[int(z) for z in input().split()]\n\telse:\n\t\tq2=s\nprint(res)", "def ccw(a, b, c):\n    ab = (b[1]-a[1], b[0]-a[0])\n    ac = (c[1]-a[1], c[0]-a[0])\n    charge = (ab[0]*ac[1] - ab[1]*ac[0])\n    return charge > 0\ndef countccw(points):\n    c = 0\n    for i in range(len(points)-2):\n        if ccw(points[i], points[i+1], points[i+2]): c += 1\n    return c\ndef countcw(points):\n    c = 0\n    for i in range(len(points)-2):\n        if not ccw(points[i], points[i+1], points[i+2]): c += 1\n    return c\ndef __starting_point():\n    n = int(input())\n    points = [ tuple(int(x) for x in input().split()) for i in range(n+1) ]\n    if ccw(points[-3], points[-2], points[-1]):\n        print(countcw(points))\n    else:\n        print(countccw(points))\n\n__starting_point()", "n = int(input())\nx_b, y_b = list(map(int,input().split()))\ndif_b = 0\ncnt = 0\n\nfor i in range(n-1):\n    x, y = list(map(int,input().split()))\n    if x > x_b :\n        dif = 1\n    elif x < x_b :\n        dif = 3\n    elif y > y_b :\n        dif = 0\n    elif y < y_b :\n        dif = 2\n\n    if (dif_b == 1 and dif == 0) or (dif_b == 0 and dif == 3) or (dif_b == 3 and dif == 2) or (dif_b == 2 and dif == 1):\n        cnt += 1\n\n    x_b = x\n    y_b = y\n    dif_b = dif\n\nprint(cnt)\n", "print((int(input())-4)//2)"]