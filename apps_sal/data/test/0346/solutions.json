["n, m =  list(map(int, input().split()))\nprices =  list(map(int, input().split()))\nauci = list(map(int, input().split()))\n\nscores = 0\n\n# m auc\n# n - m default\n\nfor i in range(len(prices)):\n    if (i+1) not in auci:\n        scores += prices[i]\n        prices[i] = 0\n\nra = []\nfor i in prices:\n    if i != 0:\n        ra.append(i)\nra.sort()\nra = ra[::-1]\n\nfor i in ra:\n    if i > scores:\n        scores += i\n    else:\n        scores *= 2\n\nprint(scores)\n#print(ra)\n", "n, m = map(int, input().split())\nprices = list(map(int, input().split()))\nnormal = []\nauct = []\nq = list(map(int, input().split()))\nsum = 0\nfor i in range(n):\n    if i + 1 in q:\n        auct.append(prices[i])\n    else:\n        sum += prices[i]\nauct = sorted(auct, reverse=True)\nfor elem in auct:\n    sum += max(elem, sum)\nprint(sum)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nnums = set(list(map(int, input().split())))\nstan = []\nauct = []\nfor i in range(len(a)):\n    if i + 1 not in nums:\n        stan.append(a[i])\n    else:\n        auct.append(a[i])\nsm = sum(stan)\nauct = list(reversed(sorted(auct)))\nfor i in range(len(auct)):\n    if sm >= auct[i]:\n        if sm > auct[i]:\n            sm *= 2\n        else:\n            sm += auct[i]\n    else:\n        sm += auct[i]\nprint(sm)", "[n, m], q, a = list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split()))\nans = sum(q[x - 1] for x in set(range(1, n + 1)) - set(a))\nfor x in sorted(a, key = lambda x: q[x - 1], reverse = True):\n    if q[x - 1] <= ans:\n        ans <<= 1\n    else:\n        ans += q[x - 1]\nprint(ans)\n", "n, m = list(map(int, input().split()))\nlst = list(map(int, input().split()))\nau = list(map(int, input().split()))\nres = sum(lst)\nls = []\nfor i in range(m): \n    res -= lst[au[i] - 1]\n    ls.append(lst[au[i] - 1])\nls.sort(reverse = True)\nfor i in range(len(ls)):\n    res += max(ls[i], res)\nprint(res)\n", "n, m = tuple(map(int, str.split(input())))\na = tuple(map(int, str.split(input())))\nmi = tuple(map(int, str.split(input())))\nms = sorted([a[i - 1] for i in mi], reverse=True)\n\npoints = 0\nfor i, ai in enumerate(a):\n\n    if i + 1 not in mi:\n\n        points += ai\n\nfor m in ms:\n\n    if m > points:\n\n        points += m\n\n    else:\n\n        points += points\n\nprint(points)\n", "n,m = map(int,input().split())\nmat = list(map(int,input().split()))\nauction = list(map(int,input().split()))\naucpoint = [mat[i-1] for i in auction]\naucpoint.sort(reverse = True)\nfor i in auction:\n    mat[i-1] = 0\ns = sum(mat)\nfor point in aucpoint:\n    if s > point:\n        s *= 2\n    else: s += point\nprint(s)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = [a[i - 1] for i in map(int, input().split())]\nb.sort(reverse = True)\ns = sum(a) - sum(b)\nfor i in b: s += s if i < s else i\nprint(s)", "n, m = map(int, input().split())\nques = list(map(int,input().split()))\nacutions = set(map(int, input().split()))\n\nacu = []\npoints = 0\n\nfor i in range(n):\n\tif i + 1 in acutions:\n\t\tacu.append(ques[i])\n\telse:\n\t\tpoints += ques[i]\n\nacu.sort(reverse= True)\n\nfor a in acu:\n\tif points > a:\n\t\tpoints += points\n\telse:\n\t\tpoints += a\n\nprint(points)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(len(b)):\n    b[i] -= 1\nb = set(b)\nc = []\nd = []\nfor i in range(len(a)):\n    if i in b:\n        c.append(a[i])\n    else:\n        d.append(a[i])\nsum = 0\nfor i in range(len(d)):\n    sum += d[i]\nc = sorted(c)\nif sum < c[-1]:\n    sum += c[-1]\n    sum *= (2**(len(c)-1))\nelse:\n    sum *= (2**len(c))\nprint(sum)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nans = 0\nfor i in range(m):\n    ans -= a[b[i] - 1]\n    c.append(a[b[i] - 1])\nans += sum(a)\nc.sort()\nc = c[::-1]\nmx = ans\nfor i in range(m + 1):\n    x = (sum(c[:i])+ans)*(2**(m-i))\n    if x > mx:\n        mx = x\n\nprint(mx)", "from operator import itemgetter\nR = lambda:map(int, input().split())\nn, m = R()\na = list(R())\nb = [0] * n\nfor i in R():\n  b[i - 1] = 1\na = sorted(enumerate(a), key=itemgetter(1), reverse=True)\ns = sum(x for i, x in a if b[i] != 1)\nfor i, x in a:\n  if b[i] == 1:\n    s += s if s > x else x\nprint(s)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nans = 0\nfor i in range(m):\n    ans -= a[b[i] - 1]\n    c.append(a[b[i] - 1])\nans += sum(a)\nc.sort()\nc = c[::-1]\nmx = ans\nfor i in range(m + 1):\n    x = (sum(c[:i]) + ans) * (2 ** (m - i))\n    if x > mx:\n        mx = x\nprint(mx)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nans = 0\n\nfor i in range(m):\n    ans -= a[b[i] - 1]\n    c.append(a[b[i] - 1])\nans += sum(a)\nc.sort()\nc = c[::-1]\nmx = ans\nfor i in range(m + 1):\n    x = (sum(c[:i]) + ans) * (2 ** (m - i))\n    if x > mx:\n        mx = x\nprint(mx)", "import sys\nfrom itertools import *\nfrom math import *\nMAX = 10000000\ndef solve():\n    n, m = list(map(int, input().split()))\n    quest = list(map(int, input().split()))\n    auctindex = set(map(int, input().split()))\n    aucts = list()\n    firstsum = 0\n    for i, q in enumerate(quest):\n        if (i + 1) not in auctindex:\n            firstsum+= q\n        else:\n            aucts.append(q)\n    aucts.sort(reverse = True)\n    for val in aucts:\n        firstsum += max(firstsum, val)\n    print(firstsum)\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n", "# -*- coding: utf-8 -*-\n\"\"\"\nyl3 jeopardy\n\"\"\"\na=lambda :list(map(int,input().split()))\nn,m=a()\nsa=a()\nsb=a()\nau=[]\n\nfor i in reversed(sorted(sb)):\n    au.append(sa.pop(i-1))\nsu=sum(sa)\nau.sort(reverse=True)\nfor i in range(m):\n    t=au.pop(0)\n    if t>su:\n        su+=t\n    else:su*=2\nprint(su)", "import sys\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    auction_questions = set(map(int, input().split()))\n\n    regular_a = [a[i] for i in range(len(a)) if (i + 1) not in auction_questions]\n    auction_a = [a[i] for i in range(len(a)) if (i + 1) in auction_questions]\n\n    total_points = sum(regular_a)\n    auction_a.sort(reverse=True)\n    for a in auction_a:\n        if a < total_points:\n            total_points += total_points\n        else:\n            total_points += a\n    print(total_points)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from operator import itemgetter\n\nR = lambda:list(map(int, input().split()))\n\nn, m = R()\n\na = list(R())\n\nb = [0] * n\n\nfor i in R():\n\n  b[i - 1] = 1\n\na = sorted(enumerate(a), key=itemgetter(1), reverse=True)\n\ns = sum(x for i, x in a if b[i] != 1)\n\nfor i, x in a:\n\n  if b[i] == 1:\n\n    s += s if s > x else x\n\nprint(s)\n\n\n\n# Made By Mostafa_Khaled\n", "n, m = list(map(int, input().split(' ')))\ntmp = list(map(int, input().split(' ')))\nm_nums = list([int(x)-1 for x in input().split(' ')])\nm_list = [tmp[el] for el in m_nums]\n_sum = sum(tmp)-sum(m_list)\nm_list.sort()\nwhile (m_list) and (m_list[len(m_list)-1] > _sum): _sum += m_list.pop()\nprint(_sum * 2**(len(m_list)))\n", "n , m = map(int,input().split())\nque =list(map(int,input().split())) \nauc = list(map(int,input().split()))\ns = sum(que)\naa=[]\nfor i in auc:\n    s-=que[i-1]\n    aa.append(que[i-1])\naa.sort()\nfor i in aa[::-1]:\n    if i<s:\n        s*=2\n    else:\n        s+=i\nprint(s)", "R = lambda :map(int, input().split())\nn, m = R()\na = list(R())\nb = list(R())\nli = []\ncost = 0\nfor i in range(1, n + 1):\n    if i not in b:\n        cost += a[i - 1]\n    else:\n        li.append(a[i - 1])\nli.sort(reverse=True)\nfor i in range(m):\n    cost += max(cost, li[i])\nprint(cost)"]