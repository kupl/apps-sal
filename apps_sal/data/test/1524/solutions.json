["#! env/bin/local python3\n# -*- coding: utf-8 -*-\n\nsentence: str = input()\nn_sentence = len(sentence)\nsentence += '*'\ncounter = 0\nresults = []\n\nans = {i+1: 0 for i in range(n_sentence)}\n\nfor n in range(n_sentence):\n    counter += 1\n    if sentence[n] != sentence[n+1]:\n        results += [sentence[n], counter]\n        counter = 0\n\nindex = 0\n\nfor n in range(len(results)//2):\n\n    if results[2*n] == 'R':\n        index += int(results[2*n+1])\n        if int(results[2*n+1]) % 2 == 0:\n            evens = int(results[2*n+1]) // 2\n            odds = int(results[2*n+1]) // 2\n            ans[index] += odds\n            ans[index+1] += evens\n        else:\n            evens = (int(results[2*n+1]) - 1) // 2\n            odds = (int(results[2*n+1]) + 1) // 2\n            ans[index] += odds\n            ans[index + 1] += evens\n\n\n    if results[2*n] == 'L':\n        index += 1\n        if int(results[2 * n + 1]) % 2 == 0:\n            evens = int(results[2 * n + 1]) // 2\n            odds = int(results[2 * n + 1]) // 2\n            ans[index] += odds\n            ans[index - 1] += evens\n        else:\n            evens = (int(results[2 * n + 1]) - 1) // 2\n            odds = (int(results[2 * n + 1]) + 1) // 2\n            ans[index] += odds\n            ans[index - 1] += evens\n        index += int(results[2 * n + 1]) - 1\n\nans = ' '.join([str(c) for c in list(ans.values())])\n\nprint(ans)\n", "s = input()\nn = len(s)\nl = []\ni = 0\nwhile i < n:\n    j = 1\n    while i + j < n and s[i] == s[i + j]:\n        j += 1\n    l.append((s[i], j, i))\n    i += j\n\nans = [0] * n\ni = 0\nif l[0][0] == 'L':\n    ans[0] = l[0][1]\n    i += 1\n\nwhile i + 1 < len(l):\n    cr, R, pr = l[i]\n    cl, L, pl = l[i + 1]\n    ans[pl - 1] = (R + 1) // 2 + L // 2\n    ans[pl] = (L + 1) // 2 + R // 2\n    i += 2\n\nif l[-1][0] == 'R':\n    ans[-1] = l[-1][1]\nprint((*ans))\n", "def main():\n    s = input()\n    ans = [0]*len(s)\n    pos = [-1]*len(s)\n    x = None\n    for i in range(len(s)):\n        if s[i] == \"L\":\n            if x is None:\n                x = i\n            pos[i] = x\n        else:\n            x = None\n    x = None\n    for i in reversed(range(len(s))):\n        if s[i] == \"R\":\n            if x is None:\n                x = i\n            pos[i] = x\n        else:\n            x = None\n    for i in range(len(s)):\n        dist = abs(pos[i] - i)\n        if dist % 2 == 0:\n            ans[pos[i]] += 1\n        else:\n            if s[i] == \"L\":\n                ans[pos[i]-1] += 1\n            else:\n                ans[pos[i]+1] += 1\n    for v in ans:\n        print(v, end=\" \")\n\ndef __starting_point():\n    main()\n__starting_point()", "s = input()\nv = [0 for i in range(len(s))]\nr,l = 0,0\nvis = [False for i in range(len(s))]\n\nfor i in range(len(s)):\n  if vis[i]:\n    continue\n  vis[i] = True\n  if s[i] == 'L':\n    x = i-1\n    y = i\n    r,l = 0,0\n    while x >= 0 and s[x] == 'R':\n      r += 1\n      x -= 1\n    while y <= len(s)-1 and s[y] == 'L':\n      vis[y] = True\n      l += 1\n      y += 1\n    v[i-1] = l//2+(r-r//2)\n    v[i] = (l-l//2)+r//2\nprint (*v)", "#import math\n#import itertools\n#import numpy as np\n#from collections import deque\n# sys.setrecursionlimit(10 ** 6)\n#mod = 10 ** 9 + 7\n#INF = 10 ** 9\n#PI = 3.14159265358979323846\n\nINT = lambda: int(input())\nINTM = lambda: map(int,input().split())\nSTRM = lambda: map(str,input().split())\nSTR = lambda: str(input())\nLIST = lambda: list(map(int,input().split()))\nLISTS = lambda: list(map(str,input().split()))\n\ndef do():\n    s=STR()\n    ls=len(s)\n    ans=[0]*ls\n    flg=True\n    ct=0\n    for i in range(ls):\n        if flg:\n            if s[i]=='R':\n                ct+=1\n            else:\n                ans[i]+=ct//2\n                ans[i-1]+=ct//2+ct%2\n                ct=1\n                temp=i\n                flg=False\n        else:\n            if s[i]=='L':\n                ct+=1\n            else:\n                ans[temp]+=ct//2+ct%2\n                ans[temp-1]+=ct//2\n                ct=1\n                flg=True\n    ans[temp]+=ct//2+ct%2\n    ans[temp-1]+=ct//2\n\n    print(*ans)\n\ndef __starting_point():\n    do()\n__starting_point()", "from itertools import groupby\nS = list(input())\nSl = len(S)\nans = [0]*Sl\nRL = 0\ncount = -1\nfor _, v in groupby(S):\n    x = list(v)\n    xl = len(x)\n    if RL == 0:\n        count += xl\n        if xl % 2 == 0:\n            ans[count] += xl//2\n            ans[count+1] += xl//2\n        else:\n            ans[count] += xl//2+1\n            ans[count+1] += xl//2\n        RL = 1\n    else:\n        if xl % 2 == 0:\n            ans[count+1] += xl//2\n            ans[count] += xl//2\n        else:\n            ans[count+1] += xl//2+1\n            ans[count] += xl//2\n        RL = 0\n        count += xl\nfor i in ans:\n    print(i, end=\" \")\n", "s=list(input())\nn=len(s)\nans=[1]*n\nfor i in range(n-1):\n  if s[i]==\"R\" and s[i+1]==\"R\":\n    ans[i+2]+=ans[i]\n    ans[i]=0\nfor i in range(n-1,0,-1):\n  if s[i]==\"L\" and s[i-1]==\"L\":\n    ans[i-2]+=ans[i]\n    ans[i]=0\nprint(\" \".join(map(str,ans)))", "s=input()\nmemo1=[]\nmemo2=[0]\nfor i in range(1,len(s)):\n    if s[i-1]+s[i]=='RL':\n        memo1.append(i)\n    if s[i-1]+s[i]=='LR':\n        memo2.append(i)\nmemo2.append(len(s))\nn=len(memo1)\nans=[0]*len(s)\n\nfor i in range(n):\n    r=memo1[i]-memo2[i]\n    l=memo2[i+1]-memo1[i]\n\n    if (r+l)%2==0:\n        ans[memo1[i]]=(r+l)//2\n        ans[memo1[i]-1]=(r+l)//2\n    else:\n        temp=(r+l)//2\n        if l>r:\n            ans[memo1[i]]=temp+l%2\n            ans[memo1[i]-1]=temp+r%2\n        else:\n            ans[memo1[i]-1]=temp+r%2\n            ans[memo1[i]]=temp+l%2\nfor a in ans:\n    print(a,end=' ')", "S = input()\nN = len(S)\ndivs = [0]\nfor i in range(N - 1):\n    if S[i] == \"L\" and S[i + 1] == \"R\":\n        divs.append(i + 1)\ndivs.append(N)\nans = [0] * N\nfor start, end in zip(divs, divs[1:]):\n    sub = S[start:end]\n    M = end - start\n    for j in range(M - 1):\n        if sub[j] == \"R\" and sub[j + 1] == \"L\":\n            if j % 2:\n                ans[start + j] = M // 2\n            else:\n                ans[start + j] = (M + 1) // 2\n            ans[start + j + 1] = M - ans[start + j]\nprint((\" \".join(map(str, ans))))\n", "from collections import Counter\n\nS = input()\nN = len(S)\ndp = [[0]*N for _ in range(20)]\n\nfor i, s in enumerate(S):\n    dp[0][i] = i-1 if s == 'L' else i+1\n\nfor k in range(19):\n    for i in range(N):\n        dp[k+1][i] = dp[k][dp[k][i]]\n\nC = Counter(dp[-1])\nprint((*[C[i] for i in range(N)]))\n", "string = input()\nr_cnt = 0\nl_cnt = 0\nflg = False\nans = [0 for _ in range(len(string))]\nfor i, s in enumerate(string):\n    if s == \"R\":\n        if flg:\n            ans[pos - 1] += l_cnt // 2\n            ans[pos] += (l_cnt + 1) // 2\n            l_cnt = 0\n            flg = False\n        r_cnt += 1\n    else:\n        if not flg:\n            pos = i\n            ans[i - 1] += (r_cnt + 1) // 2\n            ans[i] += r_cnt // 2\n            r_cnt = 0\n            flg = True\n        l_cnt += 1\nans[pos - 1] += l_cnt // 2\nans[pos] += (l_cnt + 1) // 2\n\nprint(*ans)", "def makes( r,l ):\n    s=\"\"\n    for i in range(r-1):\n        s+=\"0 \"\n    rl=r+l\n    rl2=rl//2\n    if rl%2==0:\n        s+=str(rl2)+\" \"\n        s+=str(rl2)+\" \"\n    else:\n        if r%2==1 :\n            s+=str(rl2+1)+\" \"\n            s+=str(rl2)+\" \"\n        if l%2==1 :\n            s+=str(rl2)+\" \"\n            s+=str(rl2+1)+\" \"\n    for i in range(l-1):\n        s+=\"0 \"\n    return s\n\n\ns = input()\nrc=lc=0\nans=\"\"\nfor i in range(len(s)):\n    if s[i]==\"R\":\n        if rc!=0 and lc!=0 :\n            ans += makes(rc,lc)\n            rc=0\n            lc=0\n        rc+=1\n    else:\n        lc+=1\nif rc!=0 and lc!=0 :\n    ans += makes(rc,lc)\nprint(ans)", "S = input().strip()\nN = len(S)\nA = []\ncur = 0\nfor i in range(1,N):\n    if S[i]==\"R\" and S[i-1]==\"L\":\n        x = S[cur:i]\n        A.append((cur,x))\n        cur = i\nA.append((cur,S[cur:N]))\nB = [0 for _ in range(N)]\nwhile A:\n    cur,x = A.pop()\n    n = len(x)\n    for i in range(1,n):\n        if x[i]==\"L\" and x[i-1]==\"R\":\n            ind = i\n            break\n    if n%2==0:\n        B[cur+ind]=n//2\n        B[cur+ind-1]=n//2\n    else:\n        if ind%2==0:\n            B[cur+ind] = (n+1)//2\n            B[cur+ind-1]=n//2\n        else:\n            B[cur+ind] = n//2\n            B[cur+ind-1]=(n+1)//2\nprint(*B)", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# FileName: \tD\n# CreatedDate:  2020-08-18 14:44:25 +0900\n# LastModified: 2020-09-11 15:35:56 +0900\n#\n\n\nimport os\nimport sys\n\n\ndef pivot_index(change_box, i, which):\n    if which == 0:\n        for cb in change_box:\n            if cb >= i:\n                return cb\n    else:\n        for j in range(len(change_box)-1, -1, -1):\n            if change_box[j] <= i:\n                return change_box[j]\n\n\ndef main():\n    S = input()\n    change_box = []\n    floor_chart = 1\n    i = 0\n    while i < len(S)-1:\n        if S[i] != S[i+1] and floor_chart == 1:\n            floor_chart = 0\n            change_box.append(i)\n        elif S[i] != S[i+1] and floor_chart == 0:\n            floor_chart = 1\n        i += 1\n\n    ans = [0]*len(S)\n    one_cool = 0\n    hash_one = 0\n    for i in range(len(S)):\n        if S[i] == 'R':\n            if hash_one == 1:\n                hash_one = 0\n                one_cool += 1\n            pidx = change_box[one_cool]\n            cool = pidx - i\n            if cool % 2 == 0:\n                ans[pidx] += 1\n            else:\n                ans[pidx+1] += 1\n\n        else:\n            pidx = change_box[one_cool]+1\n            hash_one = 1\n            cool = i - pidx\n            if cool % 2 == 0:\n                ans[pidx] += 1\n            else:\n                ans[pidx-1] += 1\n    print(ans[0], end='')\n    for i in range(1, len(ans)):\n        print(\" {}\".format(ans[i]), end='')\n    print()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S = input()\nans = [0] * len(S)\nlr = \"r\"\nfor i in range(len(S)):\n    if (i == 0 or lr == \"l\") and S[i] == \"R\":\n        c = 0\n        lr =\"r\"\n        while S[i+c] == \"R\":\n            c += 1    \n        ans[i+c] += c//2\n        ans[i+c-1] += (c+1)//2\n    elif lr == \"r\" and S[i] == \"L\":\n        c = 0\n        lr = \"l\"\n        while i+c < len(S) and S[i+c] == \"L\":\n            c += 1\n        ans[i] += (c+1)//2\n        ans[i-1] += c//2\nprint(*ans)", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nS = input()\nls = len(S)\n\nli = [0] * ls\n\nr = 0\nl = 0\n\nfor i in range(ls):\n    if S[i] == \"L\":\n        l += 1\n    else:\n        if l == 0:\n            r += 1\n        else:\n            li[i - l] += r // 2 + (l + 1) // 2\n            li[i - l - 1] += (r + 1) // 2 + l // 2\n\n            r = 1\n            l = 0\n\nli[ls - l] += r // 2 + (l + 1) // 2\nli[ls - l - 1] += (r + 1) // 2 + l // 2\n\nli = [str(li[i]) for i in range(ls)]\n\nprint((\" \".join(li)))\n\n\n", "S=input()+'R'\nL=len(S)\nRL=0\nl,r,f=0,0,0\na=[0]*(L-1)\nfor i in range(1,L):\n    if f:r+=1\n    else:l+=1\n    if S[i-1:i+1]=='LR':\n        a[RL-1]=r//2+(l+1)//2\n        a[RL]=(r+1)//2+l//2  \n        l,r,f=0,0,0\n    if S[i-1:i+1]=='RL':RL,f=i,1\nprint(' '.join(map(str,a)))", "S = input()\nK = 10 ** 100\nRL_counts = []\nptr = []\nans = [0] * len(S)\ncnt = 1\nfor i in range(1, len(S)):\n    if S[i] == S[i-1]:\n        cnt += 1\n    else:\n        RL_counts.append(cnt)\n        if (S[i] == \"L\"):\n            ptr.append(i - 1)\n        cnt = 1\nRL_counts.append(cnt)\n\nfor i in range(0, len(RL_counts), 2):\n    ans[ptr[int(i / 2)]] += int((RL_counts[i] + 1) / 2) + int(RL_counts[i+1] / 2)\n    ans[ptr[int(i / 2)] + 1] += int(RL_counts[i] / 2) + int((RL_counts[i+1] + 1) / 2)\n\nprint((\" \".join(map(str, ans))))\n\n\n", "import math\ns = list(input())\ncount = [0]*len(s)\n\nlc = 0\nrc = 0\nfor i in range(len(s)-1):\n    if s[i] == 'R':\n        rc += 1\n        if s[i+1] == 'L':\n            count[i] += int(math.ceil(rc/2))\n            count[i+1] += int(math.floor(rc/2))\n\n            rc = 0\n\n    elif s[i] == 'L':\n        continue\n\ncount = count[::-1]\ns = s[::-1]\nlc = 0\nrc = 0\nfor i in range(len(s)-1):\n    if s[i] == 'L':\n        lc += 1\n        if s[i+1] == 'R' and rc == 0:\n            count[i] += int(math.ceil(lc/2))\n            count[i+1] += int(math.floor(lc/2))\n\n            lc = 0\n\n    elif s[i] == 'R':\n        continue\n\nprint(' '.join(list(map(str, count[::-1]))))", "S = str(input())\nN = len(S)\n\ncon = []\nborder = []\nfor i in range(N - 1):\n  if S[i] == \"L\" and S[i + 1] == \"R\":\n    border.append(i)\n  elif S[i] == \"R\" and S[i + 1] == \"L\":\n    con.append(i)\n  \nborder.append(N - 1)  \n\n#print(border, con)    \n\nans = [0] * N\nnow = -1\nfor i in range(len(con)):\n  #con[i] \u3068 con[i] + 1 \u306b\n  #now - border[i] \u306e\u6570\u304c\u3042\u3064\u307e\u308b\u3002\n  pp = border[i] - now\n  if pp % 2 == 0:\n    ans[con[i]] += pp / 2\n    ans[con[i] + 1] += pp / 2\n  else:\n    if (con[i] - now) % 2 == 0:\n      ans[con[i]] += (pp - 1) / 2\n      ans[con[i] + 1] += (pp + 1) / 2     \n    else:\n      ans[con[i]] += (pp + 1) / 2\n      ans[con[i] + 1] += (pp - 1) / 2       \n  now = border[i]\n  #print(pp, ans)  \n  \n  \nfor i in range(N):\n  print(int(ans[i]), end = \" \")\n  \n  \n  \n", "s = input()\nans = [0] * len(s)\nx = 0\ny = 'R'\nz = []\nfor i in s:\n    if y == i:\n        x += 1\n    else:\n        z.append([y,x])\n        x = 1\n        y = i\nz.append([y,x])\nans = [0] * len(s)\ni = 0\nj = 0\nwhile i < len(z):\n    x = z[i][1]\n    if z[i][0] == 'R':\n        j += x-1\n        if x % 2 == 0:\n            ans[j] += x // 2\n        else:\n            ans[j] += x // 2 + 1\n        ans[j+1] += x // 2\n        j -= x-1\n        j += x\n    if z[i][0] == 'L':\n        if x % 2 == 0:\n            ans[j] += x // 2\n        else:\n            ans[j] += x // 2 + 1\n        ans[j-1] += x // 2\n        j += x\n    i += 1\nprint(' '.join(map(str,ans)))", "s = input()\nx = 0\ny = 'R'\nrle = []\nfor c in s:\n    if y == c:\n        x += 1\n    else:\n        rle.append(x)\n        x = 1\n        y = c\nrle.append(x)\nans = [0] * len(s)\ni = 0\ny = 'R'\nfor c in rle:\n    if y == 'R':\n        j = i + c - 1\n        if c % 2 == 0:\n            ans[j] += c // 2\n        else:\n            ans[j] += c // 2 + 1\n        ans[j+1] += c // 2\n        i += c\n        y = 'L'\n    else:\n        if c % 2 == 0:\n            ans[i] += c // 2\n        else:\n            ans[i] += c // 2 + 1\n        ans[i-1] += c // 2\n        i += c\n        y = 'R'\nprint(' '.join(map(str,ans)))", "S = input()\nn = len(S)\nans = [0] * n\nlr = \"r\"\nfor i in range(n):\n    if (i == 0 or lr == \"l\") and S[i] == \"R\":\n        c = 0\n        lr =\"r\"\n        while S[i+c] == \"R\":\n            c += 1    \n        ans[i+c] += c//2\n        ans[i+c-1] += (c+1)//2\n    elif lr == \"r\" and S[i] == \"L\":\n        c = 0\n        lr = \"l\"\n        while i+c < n and S[i+c] == \"L\":\n            c += 1\n        ans[i] += (c+1)//2\n        ans[i-1] += c//2\nprint(*ans)", "#\uff11\u3000\u6700\u7d42\u7684\u306b\u306fRL\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306b\u96c6\u307e\u308b\n#2  RRRRRRLLLLLLRRRRLLLRRLLLLL\u307f\u305f\u3044\u306b\u306a\u3063\u3066\u3044\u308b\u6642RRRRRLLLLL\u3067\n#   \u3072\u3068\u307e\u3068\u307e\u308a\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\n#   \u3064\u307e\u308a\u4e92\u3044\u306b\u5e72\u6e09\u3057\u3042\u308f\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308b\n#3  \u5b9f\u9a13\u306b\u3088\u308a\u96a3\u3042\u3046\u5834\u6240\u306b\u3044\u308b\u4eba\u305f\u3061\u306f\u5fc5\u305a\u4ea4\u308f\u308b\u3053\u3068\u306e\u306a\u3044\n#4  \u6700\u7d42\u7684\u306bRRLL\u306eR\u306b\u3044\u308b\u306e\u306fR\u3068\u4e8c\u3064\u98db\u3070\u3057\u3067\u540c\u3058\u306b\u306a\u308b\u4eba\u305f\u3061\u3067\u3042\u308b\n#5  10^100\u56de\u3082\u7e70\u308a\u8fd4\u305b\u3070\u6700\u7d42\u7684\u306a\u72b6\u614b\u306b\u5fc5\u305a\u843d\u3061\u7740\u304f\n#6  \u307e\u3068\u3081\uff1dRRRRLLLL\u306e\u7d44\u307f\u3092\u898b\u3064\u3051\u5358\u72ec\u3067\u8003\u3048RL\u3068\u5076\u5947\u304c\u540c\u3058\u3082\u306e\u306e\u500b\u6570\u3092\u8003\u3048\u308c\u3070\u3044\u3044\n\n#\u5165\u529b\ns=list(input())+[\"R\"]\nn=len(s)\n\n#\u9023\u7d50\u6210\u5206\u3092\u8abf\u3079\u308b\ni=1\nr_start=0\nl_start=0\nl_last=0\nwhile i<n:\n  if s[i-1]==\"R\" and s[i]==\"L\":\n    l_start=i\n    i=i+1\n  elif s[i-1]==\"L\" and s[i]==\"R\":\n    l_last=i-1\n    for j in range(r_start,l_last+1):\n      if j==l_start-1:\n        if (l_last-r_start)%2==1:\n          print((l_last-r_start)//2+1,end=\" \")\n        else:\n          if (l_start-r_start)%2==0:\n            print((l_last-r_start)//2,end=\" \")\n          else:\n            print((l_last-r_start)//2+1,end=\" \")\n      elif j==l_start:\n        if (l_last-r_start)%2==1:\n          print((l_last-r_start)//2+1,end=\" \")\n        else:\n          if (l_start-r_start)%2==0:\n            print((l_last-r_start)//2+1,end=\" \")\n          else:\n            print((l_last-r_start)//2,end=\" \")          \n      else:\n        print(0,end=\" \")\n    r_start=i\n    i=i+1\n  else:\n    i=i+1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "s=input()+\"R\"\n\n\np=[0]*(len(s)-1)\nkey=s[0]\nstrt=0\nfor i in range(len(s)):\n\n    if key!=s[i]:\n        if key==\"R\":\n            p[i]  += (i-strt)//2\n            p[i-1] += (i-strt)//2 + (i-strt)%2\n            key=\"L\"\n        else:\n            p[strt] += (i-strt)//2 + (i-strt)%2\n            p[strt-1] += (i-strt)//2\n            key=\"R\"\n        strt=i\n\nfor i in p:\n    print(i,end=\" \")\n", "a = input()\nb = int(len(a))\nc = []\n\nfor i in range(b):\n    c.append(int(0))\n\nd = str()\n\nif a[b-1] == \"L\":\n    d = \"R\"\nelse:\n    d = \"L\"\n\na = a+d\n\ntemp = int(1)\n\nfor i in range(b):\n    if a[i] == a[i+1]:\n        c[i] += 0\n        temp += 1\n    elif a[i] != a[i+1] and a[i] == \"R\":\n        c[i+1] += temp // 2\n        c[i] += (temp - temp // 2)\n        temp = 1\n    else:\n        c[i-temp] += temp // 2\n        c[i-temp+1] += (temp - temp // 2)\n        temp = 1\nf = [str(s) for s in c]\ne = \" \".join(f)\nprint(e)", "from itertools import groupby\ndef rfe_tuple(S):\n    grouped = groupby(S)\n    res = []\n    for k, v in grouped:\n        res.append((k, str(len(list(v)))))\n    return res\n\ndef resolve():\n    s = input()\n    ls = rfe_tuple(s)\n    ans = [0] * len(s)\n    n = 0\n    for lr,i in ls:\n        i = int(i)\n        if lr=='R':\n            n += i\n            ans[n-1] += i-i//2\n            ans[n] += i//2\n        else:\n            ans[n-1] += i//2\n            ans[n] += i-i//2\n            n += i\n    print(*ans)\nresolve()", "S=str(input())\nl=len(S)\nd=[0]*l\n\nR,L=0,0\nR_flag,L_flag=0,0\nfor i in range(l):\n    if S[i]=='R':\n        R_flag=1\n        R+=1\n        if R==1 and L>0:\n            L-=1\n            p=L//2\n            d[i-L-2]+=L-p#R\n            d[i-L-1]+=p#L\n            L=0\n    else:\n        L_flag=1\n        L+=1\n        if R>0 and L==1:\n            R-=1\n            p=R//2\n            d[i-1]+=p+1#R\n            d[i]+=R-p+1#L\n            R=0\nif L>1 and R_flag==1:\n    L-=1\n    p=L//2\n    d[-L-2]+=L-p\n    d[-L-1]+=p\nprint(*d)", "S = input()\nans = [0 for _ in range(len(S))]\ncnt = 0\nfor i, s in enumerate(S):\n    if s == \"R\":\n        cnt += 1\n    else:\n        x = cnt // 2\n        ans[i] += x\n        ans[i - 1] += x + cnt % 2\n        cnt = 0\ncnt = 0\nfor i, s in enumerate(S[::-1]):\n    if s == \"L\":\n        cnt += 1\n    else:\n        i += 1\n        x = cnt // 2\n        ans[-i] += x\n        ans[-i + 1] += x + cnt % 2\n        cnt = 0\nprint((*ans))\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nans = [0] * 101010\n\nS = ns()\ndp=[[0 for i in range(101010)] for j in range(34)]\n\nN = len(S)\nfor i in range(N):\n    dp[0][i] = (i - 1) if S[i] == 'L' else (i + 1)\n\nfor p in range(33):\n    for i in range(N):\n        dp[p+1][i] = dp[p][dp[p][i]]\n\nfor i in range(N):\n    ans[dp[32][i]] += 1\n\nprint(*ans[:N])", "S = input()\nans = [0]*len(S)\ncount = 0\nfor i in range(len(S)):\n    if S[i] == 'R':\n        count +=1\n    else:\n        if count % 2 == 0:\n            ans[i-1] += count//2\n            ans[i] += count // 2\n        else:\n            ans[i-1] += count//2+1\n            ans[i] += count//2\n        count =0\ncount =0\nfor i in range(len(S)-1,-1,-1):\n    if S[i] == 'L':\n        count +=1\n    else:\n        if count % 2 == 0:\n            ans[i+1] += count//2\n            ans[i] += count // 2\n        else:\n            ans[i+1] += count//2+1\n            ans[i] += count//2\n        count = 0\n\nfor i in range(len(S)):\n    ans[i] = str(ans[i])\nprint(' '.join(ans))", "import sys\nfrom itertools import groupby\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    S = readline().strip()\n\n    idx = 0\n    ans = [0] * len(S)\n    for k, g in groupby(S):\n        L = len(list(g))\n        if k == 'R':\n            for i in range(L):\n                if (L - i) % 2 == 0:\n                    ans[idx + L] += 1\n                else:\n                    ans[idx + L - 1] += 1\n        if k == 'L':\n            for i in range(L):\n                if i % 2 == 0:\n                    ans[idx] += 1\n                else:\n                    ans[idx - 1] += 1\n\n        idx += L\n\n    print((*ans))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S=str(input())\nl=len(S)\nd=[0]*l\n\nR,L=0,0\nfor i in range(l):\n    if S[i]=='R':\n        R+=1\n        if R==1 and L>0:\n            L-=1\n            p=L//2\n            d[i-L-2]+=L-p#R\n            d[i-L-1]+=p#L\n            L=0\n    else:\n        L+=1\n        if R>0 and L==1:\n            R-=1\n            p=R//2\n            d[i-1]+=p+1#R\n            d[i]+=R-p+1#L\n            R=0\nif L>1:\n    L-=1\n    p=L//2\n    d[-L-2]+=L-p\n    d[-L-1]+=p\nprint(*d)", "s = input()\nList = list(s)+['R']\nn=len(List)\nR = 0\nL = 0\nans = [0]*n\nfor i in range(n):\n  if List[i]=='R':\n    R += 1\n    if L > 0:\n      ans[i-L] += (L+1)//2\n      ans[i-L-1] += L//2\n      L = 0\n  else:\n    L += 1\n    if R > 0:\n      ans[i] +=R//2\n      ans[i-1] += (R+1) //2\n      R = 0\nprint(*ans[:-1])", "s = list(input())\nans = [s[0]]\ncnt = 1\nif len(s) == 1:\n    print(s[0],end = \"\")\n    print(1)\nelse:\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            cnt += 1\n        else:\n            ans.append(cnt)\n            ans.append(s[i+1])\n            cnt = 1\n    if s[-1] == s[-2]:\n        ans.append(cnt)\n    else:\n        ans.append(1)\nans2 = [0]*len(s)\nsm = 0\nfor i in range(len(ans)//2):\n    sm += ans[2*i+1]\n    if ans[i*2] == \"L\":\n        if ans[2*i+1]%2 == 1:\n            ans2[sm-ans[i*2+1]] += (ans[2*i+1]+1)//2\n            ans2[sm-ans[i*2+1]-1] += (ans[2*i+1]-1)//2\n        else:\n            ans2[sm-ans[i*2+1]] += (ans[2*i+1])//2\n            ans2[sm-ans[i*2+1]-1] += (ans[2*i+1])//2\n    else:\n        if ans[2*i+1]%2 == 1:\n            ans2[sm-1] += (ans[2*i+1]+1)//2\n            ans2[sm] += (ans[2*i+1]-1)//2\n        else:\n            ans2[sm] += (ans[2*i+1])//2\n            ans2[sm-1] += (ans[2*i+1])//2\nfor i in ans2:\n    print(i,end = \" \")", "s = input()\ncons = 0\nans = [0]*(len(s))\nleft = 0\nright = 0\ncheck1 = True\ncheck2 = False\nfor i in range(len(s)):\n    if check1 == True and s[i] == \"L\":\n        cons = i\n        check1 = False\n        check2 = True\n    if check2 == True and (s[i] == \"R\" or i == len(s)-1):\n        right = i-1\n        if i == len(s)-1:\n            right += 1\n        dum = s[left:right+1]\n        dum_index = dum.index(\"L\")\n        dum_len = len(dum)\n        div,mod = divmod(dum_len,2)\n        if dum_index%2 == 0:\n            ans[cons] = div+mod\n            ans[cons-1] = div\n        else:\n            ans[cons] = div\n            ans[cons-1] = div+mod\n\n        check1 = True\n        check2 = False\n        left = right+1\nprint(\" \".join(map(str,ans)))", "S = input()\nN = len(S)\n\n# 10 ** 100\u306f\u5076\u6570\u3002\n# N - 1\u56de\u79fb\u52d5\u3059\u308c\u3070\u5fc5\u305a\u5b9a\u4f4d\u7f6e\u306b\u306a\u308b\u305f\u3081\u3001\u305d\u306e\u5f8c\u5076\u6570\u56de\u306e\u79fb\u52d5\u306f\u7701\u7565\u53ef\u80fd\u3002\n# \u5f93\u3044\u3001N - 1\u56de or N\u56de\u306e\u79fb\u52d5\u3067\u3001\u5076\u6570\u3067\u3042\u308b\u307b\u3046\u304c\u7b54\u3048\u306e\u79fb\u52d5\u56de\u6570\u3068\u306a\u308b\n\nK = 0\nif (N - 1) % 2 == 0:\n  K = N - 1\nelse:\n  K = N\n  \n# step[i] = \u5404\u30de\u30b9\u304b\u3089\u6b21\u306e\u79fb\u52d5\u5148\u306e\u30de\u30b9\nstep = [0] * N\nfor i in range(N):\n  if S[i] == \"R\":\n    step[i] = i + 1\n  else:\n    step[i] = i - 1\n    \nans = [1] * N\nwhile K:\n  if K & 1:\n    new_ans = [0] * N\n    for i in range(len(step)):\n      new_ans[step[i]] += ans[i]\n    ans = new_ans\n    \n  step = [step[step[i]] for i in range(N)]\n  K >>= 1\n\nprint(*ans)", "s = input()\nn = len(s)\nr = l = 0\npoint = -1\n\nflag = 0\nans = [0] * n\n\n\nfor i in range(n):\n    if (s[i] == 'R' and s[i + 1] == 'L'):\n        r += 1\n        point = i\n        ans[point] += (r+1) // 2\n        ans[point + 1] += (r) // 2\n        r = l = 0\n    elif s[i] == 'L' and (i == n-1 or s[i + 1] == 'R'):\n        l += 1\n        ans[point+1] += (l+1) // 2\n        ans[point] += (l ) // 2\n        l = r = 0\n    elif s[i] == 'R':\n        r += 1\n        l = 0\n    elif s[i] == 'L':\n        l += 1\n        r = 0\n\nprint((' '.join(map(str, ans))))\n", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n  return int(readline())\ns = input()\nl = len(s)\nans = [1] * l\nfor i in range(l):\n    if s[i] == 'R' and s[i+1] == 'R':\n        ans[i+2] += ans[i]\n        ans[i] = 0\nfor i in range(l-1,0,-1):\n    if s[i-1] == 'L' and s[i] == 'L':\n        ans[i-2] += ans[i]\n        ans[i] = 0\nprint((*ans))\n", "import sys\nfrom itertools import groupby\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    S = readline().strip()\n    N = len(S)\n    M = 10 ** 5\n    K = len(bin(M)) - 2\n\n    A = [[0] * N for _ in range(K)]\n    for i, c in enumerate(S):\n        if c == 'R':\n            A[0][i] = i + 1\n        else:\n            A[0][i] = i - 1\n\n    for k in range(K - 1):\n        for i in range(N):\n            A[k + 1][i] = A[k][A[k][i]]\n\n    B = list(range(N))\n    for k in range(K):\n        if M & (1 << k):\n            for i in range(N):\n                B[i] = A[k][B[i]]\n\n    ans = [0] * N\n    for b in B:\n        ans[b] += 1\n\n    print((*ans))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# \u521d\u671f\u4f4d\u7f6e\u304c\u96a3\u540c\u6642\u306e\u5b50\u4f9b\u304c\u540c\u3058\u30de\u30b9\u306b\u6b8b\u308b\u3053\u3068\u306f\u306a\u3044\n# \u53f3\u96a3\u306bR\u304c\u3042\u308bR\u306e\u30b3\u30de\u3001\u5de6\u96a3\u306bL\u304c\u3042\u308bL\u306e\u30b3\u30de\u306f0\u306b\u306a\u308b\u3002\n# \u4e21\u30b5\u30a4\u30c9\u30820\u4eba\n# \u6700\u5f8c\u306fRL\u306e\u9806\u756a\u3067\u9023\u7d9a\u3057\u3066\u308b\u30de\u30b9\u306b\u306e\u307f\u5b50\u4f9b\u304c\u5b58\u5728\u3059\u308b\u72b6\u614b\u306b\u306a\u308b\u3002\nS = input()\n\nans = [1 for _ in range(len(S))]\ncount = 0\nfor i in range(len(S) - 1):\n    if S[i] == 'R' and S[i+1] == 'R':\n        count += 1\n        ans[i] -= 1\n    if S[i] == 'R' and S[i+1] == 'L':\n        ans[i] += count // 2\n        ans[i+1] += count // 2\n        if count % 2 == 1:\n            ans[i+1] += 1\n        count = 0\n\ncount = 0\nfor i in range(len(S) - 1):\n    if S[-i-1] == 'L' and S[-i-2] == 'L':\n        count += 1\n        ans[-i-1] -= 1\n    if S[-i-1] == 'L' and S[-i-2] == 'R':\n        ans[-i-1] += count // 2\n        ans[-i-2] += count // 2\n        if count % 2 == 1:\n            ans[-i-2] += 1\n        count = 0\n\nfor i in range(len(S)):\n    if i != len(S) - 1:\n        print(ans[i], end=\" \")\n    else:\n        print(ans[i])", "s = input()\na = [0]*len(s)\nr, l = 0, 0\n\nfor i in range(len(s)):\n    r += 1\n    if s[i] == 'L':\n        a[i-1] += r//2\n        a[i] += (r+1)//2\n        r = 0\n        \nfor j in range(len(s)-1, -1, -1):\n    l += 1\n    if s[j] == 'R':\n        a[j+1] += l//2\n        a[j] += (l+1)//2\n        l = 0\n    a[j] -= 1\n\nprint((*a))\n\n", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\ns = input()\nl = len(s)\nans = [1] * l\nfor i in range(l):\n    if s[i] == 'R' and s[i+1] == 'R':\n        ans[i+2] += ans[i]\n        ans[i] = 0\nfor i in range(l-1,0,-1):\n    if s[i-1] == 'L' and s[i] == 'L':\n        ans[i-2] += ans[i]\n        ans[i] = 0\nprint((*ans))\n", "def RunLengthEncoding(S):\n    res = []\n    N = len(S)\n    i = 0\n    while i < N:\n        cnt = 1\n        while i < N - 1 and S[i] == S[i + 1]:\n            cnt += 1\n            i += 1\n        res.append((S[i], cnt))\n        i += 1\n    return res\n\n\nS = input()\nN = len(S)\nrle = RunLengthEncoding(S)\n\ngoal = []\nfor i, (l, r) in enumerate(zip(S[:-1], S[1:])):\n    if l == \"R\" and r == \"L\":\n        goal.append(i)\n\nans = [0] * N\n\np = 0\nfor i in range(0, len(rle), 2):\n    _, nl = rle[i]\n    _, nr = rle[i+1]\n    g = goal[i//2]\n    ans[g] += (nl + 1) // 2\n    ans[g+1] += nl // 2\n    ans[g+1] += (nr + 1) // 2\n    ans[g] += nr // 2\n\nprint(*ans)", "s = input()\nn = len(s)\nR = [] # the number of consecutive 'R's on and toward the left\nL = [] # the number of consecutive 'L's on and toward the right\nans = []\n\ncnt = 0\nfor i in range(n):\n    if s[i] == 'R':\n        cnt += 1\n    else:\n        cnt = 0\n    R.append(cnt)\nR.append(0)\n\ns = s[::-1]\ncnt =0\nfor i in range(n):\n    if s[i] == 'L':\n        cnt += 1\n    else:\n        cnt = 0\n    L.append(cnt)\nL.append(0)\n\nr= [0]*n # the number of children coming from 'R' series and stay there\nfor i in range(n):\n    if R[i] != 0 and R[i+1] ==0:\n        if R[i] % 2 == 1:\n            r[i] = (R[i] + 1) // 2\n            r[i+1] = (R[i] - 1) // 2\n        else:\n            r[i] = R[i] // 2\n            r[i+1] = R[i] // 2\n\nl = [0]*n # the number of children coming from 'L' series and stay there\nfor i in range(n):\n    if L[i] != 0 and L[i+1] ==0:\n        if L[i] % 2== 1:\n            l[i] = (L[i] + 1) // 2\n            l[i+1] = (L[i] - 1) // 2\n        else:\n            l[i] = L[i] // 2\n            l[i+1] = L[i] // 2\nl = l[::-1]\n\nfor i in range(n):\n    ans.append(r[i]+l[i])\n\nfor i in range(n-1):\n    print(ans[i], end = ' ')\nprint(ans[n - 1])", "import numpy as np\nS = list(input())\nn = len(S)\nans = [0] * n\nright_flag = False\nfor i, s in enumerate(S):\n  if s == 'R' and right_flag is False:\n    right_index = i\n    right_flag = True\n  elif s == 'L' and right_flag:\n    right_flag = False\n    cnt = i - right_index\n    odd = cnt // 2\n    even = cnt - odd\n    ans[i-1] += even\n    ans[i] += odd\nleft_flag = False\nfor i, s in enumerate(S[::-1], 1):\n  if s == 'L' and left_flag is False:\n    left_index = i\n    left_flag = True\n  elif s == 'R' and left_flag:\n    left_flag = False\n    cnt = i - left_index\n    odd = cnt // 2\n    even = cnt - odd\n    ans[-i+1] += even\n    ans[-i] += odd\nprint(*ans)", "S = input()\nN = len(S)\n\nans = [0] * N\n\ncnt = 0\nfor i, s in enumerate(S):\n    if s == \"R\":\n        cnt += 1\n    else:\n        ans[i] += cnt // 2\n        ans[i - 1] += cnt - cnt // 2\n        cnt = 0\n\nans.reverse()\ncnt = 0\nfor i, s in enumerate(S[::-1]):\n    if s == \"L\":\n        cnt += 1\n    else:\n        ans[i] += cnt // 2\n        ans[i - 1] += cnt - cnt // 2\n        cnt = 0\n\nans.reverse()\nprint((*ans))\n", "S = input()\nlsS = list(S)\nls = []\nii = 0\nmode = 'R'\nfor i in lsS:\n    if i == 'R' and mode == 'R':\n        ii += 1\n    elif i == 'L' and mode == 'R':\n        ls.append(ii)\n        mode = 'L'\n        ii = 1\n    elif i == 'L' and mode == 'L':\n        ii += 1\n    elif i == 'R' and mode == 'L':\n        ls.append(ii)\n        mode = 'R'\n        ii = 1\nls.append(ii)\nlsans = [0]*len(S)\nindex = -1\nfor i in range(len(ls)):\n    if i % 2 == 0:\n        index += ls[i]\n        lsans[index+1] += ls[i] // 2\n        lsans[index] += ls[i]-ls[i] // 2\n    else:\n        lsans[index] += ls[i] // 2\n        lsans[index+1] += ls[i]-ls[i] // 2\n        index += ls[i]\nans = [str(i) for i in lsans]\nprint(' '.join(ans))", "s=input()\nn=len(s)\nx=[0]\ny=[0]\nc=1\nfor i in range(1,n):\n    if s[i-1]==\"R\" and s[i]==\"L\":\n        x.append(i)\n    if s[i-1]==\"L\" and s[i]==\"R\":\n        y.append(i)\ny.append(n)\nz=[0]*n\nfor i in range(1,len(x)):\n    z[x[i]-1]+=(x[i]-y[i-1]+1)//2+(y[i]-x[i])//2\n    z[x[i]]+=(x[i]-y[i-1])//2+(y[i]-x[i]+1)//2\nprint(*z)", "s=list(input())\nn =len(s)\nans=[1]*n\nfor i in range(n-1):\n  if (s[i]==\"R\" and s[i+1] == \"R\"):\n    ans[i+2]+=ans[i]\n    ans[i]=0\nfor i in range(n-1,0,-1):\n  if (s[i]==\"L\" and s[i-1] == \"L\"):\n    ans[i-2]+=ans[i]\n    ans[i]=0\nprint((\" \".join(map(str,ans))))\n", "S = input()+\"R\"\nR = 0\nL = 0\nans = [0]*(len(S)-1)\nfor i in range(len(S)-1):\n    if S[i] == \"R\":\n        if S[i+1] == \"L\":\n            R += 1\n            if R % 2 == 0:\n                ans[i] += R//2\n                ans[i+1] += R//2\n            else:\n                R -= 1\n                ans[i] += R//2+1\n                ans[i+1] += R//2\n            point = i\n        else:\n            R += 1\n    else:\n        if S[i+1] == \"R\":\n            L += 1\n            if L % 2 == 0:\n                ans[point] += L//2\n                ans[point+1] += L//2\n            else:\n                L -= 1\n                ans[point] += L//2\n                ans[point+1] += L//2+1\n            R = 0\n            L = 0\n        else:\n            L += 1\n\nprint((' '.join(map(str, ans))))\n", "a = list(input())\nans = [0] * len(a)\neven_r, odd_r = 0, 0\n# \u6b63\u76f4\u5909\u6570\u30ac\u30c1\u30e3\nfor i in range(len(a)):\n    if a[i] == \"R\":\n        if i % 2 == 0:\n            odd_r += 1\n        else:\n            even_r += 1\n    else:\n        if i % 2 == 0:\n            ans[i - 1] += even_r\n            ans[i] += odd_r\n        else:\n            ans[i - 1] += odd_r\n            ans[i] += even_r\n        odd_r = 0\n        even_r = 0\neven_l, odd_l = 0, 0\nfor i in range(len(a) - 1, -1, -1):\n    if a[i] == \"L\":\n        if i % 2 == 0:\n            odd_l += 1\n        else:\n            even_l += 1\n    else:\n        if i % 2 == 0:\n            ans[i + 1] += even_l\n            ans[i] += odd_l\n        else:\n            ans[i + 1] += odd_l\n            ans[i] += even_l\n        odd_l = 0\n        even_l = 0\nprint(\" \".join(list(map(str, ans))))", "s = input()\n\ndef RLE(s):\n    i, j = 0, 1\n    ret = []\n    while i < len(s):\n        while j < len(s) and s[i] == s[j]:\n            j += 1\n        ret.append((s[i], j - i))\n        i = j\n    return ret\n\nrle = RLE(s)\nans = []\nfor t in range(0, len(rle) - 1, 2):\n    _, r = rle[t]\n    _, l = rle[t + 1]\n    for i in range(r - 1):\n        ans.append(0)\n    ans.append((r + 1)//2 + l//2)\n    ans.append(r//2 + (l + 1)//2)\n    for i in range(l - 1):\n        ans.append(0)\nprint(' '.join(map(str, ans)))", "import math\ns = input()\nn = len(s)\nans = [0 for _ in range(n)]\n\ncount = 0\n\nfor i in range(n):\n    if s[i] == \"R\":\n        count += 1\n    elif s[i] == \"L\" and count != 0:\n        ans[i] += count // 2\n        ans[i-1] += (count + 1) // 2\n        count = 0\n\ncount = 0\nfor i in range(n-1, -1, -1):\n    if s[i] == \"L\":\n        count += 1\n    elif s[i] == \"R\" and count != 0:\n        ans[i+1] += (count + 1) // 2\n        ans[i] += count // 2\n        count = 0\n\nprint((' '.join([str(a) for a in ans])))\n\n", "S = input()\ncheck = []\nflg = 0\nans = []\nfor i in range(len(S)):\n    check.append(S[i])\n    if S[i] == \"L\":\n        flg = 1\n    if S[i] == \"R\" and flg == 1:\n        check.pop()\n        for j in range(len(check)):\n            if check[j] == \"L\":\n                o = j\n                break\n        answer = [0 for p in range(len(check))]\n        if len(check)%2 == 0:\n            answer[o] = int(len(check)/2)\n            answer[o-1] = int(len(check)/2)\n        else:\n            if o%2 == 0:\n                answer[o] = len(check)//2+1\n                answer[o-1] = len(check)//2\n            else:\n                answer[o] = len(check)//2\n                answer[o-1] = len(check)//2 + 1\n        for z in answer:\n            ans.append(z)\n        check = [\"R\"]\n        flg = 0\nfor j in range(len(check)):\n    if check[j] == \"L\":\n        o = j\n        break\nanswer = [0 for p in range(len(check))]\nif len(check)%2 == 0:\n    answer[o] = int(len(check)/2)\n    answer[o-1] = int(len(check)/2)\nelse:\n    if o%2 == 0:\n        answer[o] = len(check)//2+1\n        answer[o-1] = len(check)//2\n    else:\n        answer[o] = len(check)//2\n        answer[o-1] = len(check)//2 + 1\nfor z in answer:\n    ans.append(z)\nfor m in ans:\n    print(m,end=\" \")\nprint()\n", "S = input()\n\narr = []\nseq = 1\nfor i,(a,b) in enumerate(zip(S,S[1:])):\n    if a==b:\n        seq += 1\n    else:\n        arr.append(seq)\n        seq = 1\narr.append(seq)\n\nassert len(arr)%2==0\n\nans = [0]*len(S)\ni = 0\nfor r,l in zip(arr[::2],arr[1::2]):\n    i += r\n    ans[i-1] = ans[i] = (r+l)//2\n    if (r+l)%2:\n        if r<l:\n            if l%2:\n                ans[i] += 1\n            else:\n                ans[i-1] += 1\n        else:\n            if r%2:\n                ans[i-1] += 1\n            else:\n                ans[i] += 1\n    i += l\n\nprint(*ans)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nS = ns()\ntmp = []\nli = 'RL'\npre = 0\nct = 0\nfor now in S:\n    if now == li[pre]:\n        ct += 1\n    else:\n        tmp.append(ct)\n        ct = 1\n        pre = 1-pre\ntmp.append(ct)\nans = []\nfor i in range(len(tmp)//2):\n    l = tmp[2*i]\n    r = tmp[2*i+1]\n    if (l + r) % 2 == 0:\n        m = (l + r) // 2\n        for i in range(l-1):\n            ans.append(0)\n        ans.append(m)\n        ans.append(m)\n        for i in range(r-1):\n            ans.append(0)\n    else:\n        m = (l + r) // 2\n        if l % 2 == 1:\n            for i in range(l-1):\n                ans.append(0)\n            ans.append(m+1)\n            ans.append(m)\n            for i in range(r-1):\n                ans.append(0)\n        else:\n            for i in range(l-1):\n                ans.append(0)\n            ans.append(m)\n            ans.append(m+1)\n            for i in range(r-1):\n                ans.append(0)\nprint(*ans)", "S = input()\nN = len(S)\n\n# 10 ** 100\u306f\u5076\u6570\u3002\n# N - 1\u56de\u79fb\u52d5\u3059\u308c\u3070\u5fc5\u305a\u5b9a\u4f4d\u7f6e\u306b\u306a\u308b\u305f\u3081\u3001\u305d\u306e\u5f8c\u5076\u6570\u56de\u306e\u79fb\u52d5\u306f\u7701\u7565\u53ef\u80fd\u3002\n# \u5f93\u3044\u3001N - 1\u56de or N\u56de\u306e\u79fb\u52d5\u3067\u3001\u5076\u6570\u3067\u3042\u308b\u307b\u3046\u304c\u7b54\u3048\u306e\u79fb\u52d5\u56de\u6570\u3068\u306a\u308b\n\nK = 0\nif (N - 1) % 2 == 0:\n  K = N - 1\nelse:\n  K = N\n  \n# step[i] = \u5404\u30de\u30b9\u304b\u3089\u6b21\u306e\u79fb\u52d5\u5148\u306e\u30de\u30b9\n\nstep = [i + 1 if S[i] == \"R\" else i - 1 for i in range(N)]\n    \nans = [1] * N\nwhile K:\n  if K & 1:\n    new_ans = [0] * N\n    for i in range(len(step)):\n      new_ans[step[i]] += ans[i]\n    ans = new_ans\n    \n  step = [step[step[i]] for i in range(N)]\n  K >>= 1\n\nprint(*ans)", "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ns = input()\nn = len(s)\nres = [0] * n\ncnt = 0\nnow = [0,0]\nfor i in range(n):\n    if s[i] == 'R':\n        now[cnt%2] += 1\n        cnt += 1\n    else:\n        res[i-1] += now[0]\n        res[i] += now[1]\n        now = [0,0]\n        cnt = 0\nfor i in range(n)[::-1]:\n    if s[i] == 'L':\n        now[cnt%2] += 1\n        cnt += 1\n    else:\n        res[i+1] += now[0]\n        res[i] += now[1]\n        now = [0,0]\n        cnt = 0\nprint(*res)", "S = input()\nres = [0] * len(S)\n\nchildlen = 0\nfor i in range(len(S)):\n    if S[i] == \"R\":\n        childlen += 1\n    else:\n        tmp = (childlen + int(childlen % 2 == 1)) // 2\n        res[i - 1] += tmp\n        res[i] += childlen - tmp\n        # print(i, tmp, childlen, res[i - 1], res[i])\n        childlen = 0\n\nfor i in reversed(range(len(S))):\n    if S[i] == \"L\":\n        childlen += 1\n    else:\n        tmp = (childlen + int(childlen % 2 == 1)) // 2\n        res[i + 1] += tmp\n        res[i] += childlen - tmp\n        childlen = 0\n\nprint(*res)", "S = input()\nN = len(S)\nans = [1]*N\n\nfor i in range(N-1):\n  if S[i] == S[i+1] == \"R\":\n    ans[i+2] += ans[i]\n    ans[i] = 0\n    \nfor j in range(N-1,0,-1):\n  if S[j] == S[j-1] == \"L\":\n    ans[j-2] += ans[j]\n    ans[j] = 0\n    \nprint(*ans)", "S = input()\nl = [S[0]]\na = 0\nn = len(S)\nf = S[0]\nfor i in range(1, n):\n    if f != \"L\" or S[i] != \"R\":\n        l[a] += S[i]\n    else:\n        l.append(S[i])\n        a += 1\n    f = S[i]\n\n#print(l)\nfor x in l:\n    r = x.count(\"R\")\n    t = len(x)\n    a, b = divmod(t, 2)\n    for i in range(r - 1):\n        print(\"0\", end=\" \")\n    if r % 2 == 0:\n        print(a, end=\" \")\n        print(a + b, end=\" \")\n    else:\n        print(a + b, end=\" \")\n        print(a, end=\" \")\n    for i in range(t - r - 1):\n        print(\"0\", end=\" \")\n", "S = input()\nN = len(S)\n\ncurr = [\"R\",\"L\"]\nidx = 0\ncnt = 0\nE = []\nfor i, ch in enumerate(S):\n  if ch != curr[idx]:\n    E.append((idx,cnt))\n    cnt = 1\n    idx = 1 - idx\n  else:\n    cnt += 1\n    \nE.append((idx,cnt))\n#print(E)\n\nans = []\nfor i in range(0,len(E),2):\n  Rcnt = E[i][1]\n  Lcnt = E[i+1][1]\n  Rfill = Lfill = (Rcnt + Lcnt)//2\n \n  if (Rcnt + Lcnt) % 2 == 1:\n    if Rcnt % 2 == 1:\n      Rfill += 1\n    else:\n      Lfill += 1\n  \n  for i in range(Rcnt - 1):\n    ans.append(0)\n  \n  ans.append(Rfill)\n  ans.append(Lfill)\n  \n  for i in range(Lcnt - 1):\n    ans.append(0)\n\n  \nprint(*ans,sep=\" \")", "s = input()\nn = len(s)\n\nlis = [0]*n\n\nr = 0\nl = 0\nfor i in range(n):\n    r += 1\n    if s[i] == 'L':\n        lis[i-1] += r//2\n        lis[i] += (r+1)//2\n        r = 0\n\nfor j in range(n-1, -1, -1):\n    l += 1\n    if s[j] == 'R':\n        lis[j+1] += l//2\n        lis[j] += (l+1)//2\n        l = 0\n    lis[j] -= 1\n\nprint(*lis)", "S=input()\nRL=[]\nLR=[]\nN=len(S)\nfor i in range(N-1):\n    if S[i]=='R' and S[i+1]=='L':\n        RL.append(i)\n    elif S[i]=='L' and S[i+1]=='R':\n        LR.append(i)\nLR.append(N)\nj=0\nk=0\ncnt=[0 for i in range(N)]\nfor i in range(N):\n    if i>LR[k]:\n        j+=1\n        k+=1\n    if abs(RL[j]-i)%2==0:\n        cnt[RL[j]]+=1\n    else:\n        cnt[RL[j]+1]+=1\nfor i in range(N):\n    print(cnt[i],end=' ')\nprint()\n", "s=input()\nn=len(s)\n\nc=[0]\ntmp='R'\nidx=0\n# count for r,l\nfor i in s:\n  if tmp==i:\n    c[idx]+=1\n  else:\n    tmp=i\n    idx+=1\n    c.append(1)\n\n    \nfor i in range(0,len(c),2):\n  r,l=c[i],c[i+1]\n  rl=r+l\n  for j in range(r-1):\n    print(0, end=' ')\n  if not rl%2:\n    print(rl//2,rl//2, end=' ')\n  elif not r%2:\n    print(rl//2,rl//2+1, end=' ')\n  else:\n    print(rl//2+1,rl//2, end=' ')\n  for j in range(l-1):\n    print(0, end=' ')  \n", "import math as m\n\nS = list(input())\nturning_point_indexes = [0]\nfor i in range(1, len(S)):\n    if S[i] != S[i-1]:\n        turning_point_indexes.append(i)\nturning_point_indexes.append(len(S))\n\nA = [0]*len(S)\nfor i in range(1, len(turning_point_indexes), 2):\n    turning_point_index = turning_point_indexes[i]\n    left_count = turning_point_indexes[i] - turning_point_indexes[i-1]\n    right_count = turning_point_indexes[i+1] - turning_point_indexes[i]\n    A[turning_point_index-1] = m.ceil(left_count/2) + m.floor(right_count/2)\n    A[turning_point_index] = m.floor(left_count/2) + m.ceil(right_count/2)\n\nprint(*A)", "S = input()\nN = len(S)\ncnt = [0 for i in range(N)]\neven = 1\nodd = 0\nprev = 'R'\nnow = ''\nflag1 = 0\nflag2 = 0\n\nfor i in range(1,N):\n    now = S[i]\n    if prev != now:\n        if prev == 'R':\n            flag1 = i-1\n            flag2 = i\n        else:\n            if flag1 % 2 == 0:\n                cnt[flag1] = even\n                cnt[flag2] = odd\n            else:\n                cnt[flag2] = even\n                cnt[flag1] = odd\n            odd = 0\n            even = 0\n    if i % 2 == 0:\n        even += 1\n    else:\n        odd += 1\n    prev = now\n\nif flag1 % 2 == 0:\n    cnt[flag1] = even\n    cnt[flag2] = odd\nelse:\n    cnt[flag2] = even\n    cnt[flag1] = odd\n\nprint(' '.join([str(a) for a in cnt]))", "import sys\n# import math\n# import bisect\n# import numpy as np\n# from decimal import Decimal\n# from numba import njit, i8, u1, b1 #JIT compiler\n# from itertools import combinations, product\n# from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_ints2(x):   return map(lambda num: int(num) - x, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef GCD(a: int, b: int) -> int: return b if a%b==0 else GCD(b, a%b)\ndef LCM(a: int, b: int) -> int: return (a * b) // GCD(a, b)\n\ndef Main():\n    s = list(read_str())\n    n = len(s)\n    ans = [1] * n\n    for i in range(n-2):\n        if s[i] == 'R' and s[i + 1] == 'R':\n            ans[i + 2] += ans[i]\n            ans[i] = 0\n    for i in range(n - 1, 1, -1):\n        if s[i] == 'L' and s[i - 1] == 'L':\n            ans[i - 2] += ans[i]\n            ans[i] = 0\n    print(*ans)\n\ndef __starting_point():\n    Main()\n__starting_point()", "S = input()\nN = len(S)\nans = N*[1]\n\nfor n in range(N):\n  if S[n]==\"R\" and S[n+1]==\"R\":\n    ans[n+2]+=ans[n]\n    ans[n]=0\n  m = N-n-1\n  if S[m]==\"L\" and S[m-1]==\"L\":\n    ans[m-2]+=ans[m]\n    ans[m]=0\n\nprint(*ans)", "S=input()\nl=len(S)\nA=[0]*l\nc=0\nfor i in range(l-1):\n    if S[i]=='R':\n        c+=1\n    if S[i+1]=='L'or (i==l-1 and S[-1]=='R'):\n        if i==l-1 and S[-1]=='R':\n            c+=1\n        A[i]+=(c+1)//2\n        A[i+1]+=c//2\n        c=0\nc=0\nfor i in range(l-1,0,-1):\n    if S[i]=='L':\n        c+=1\n    if S[i-1]=='R' or (i==0 and S[0]=='L'):\n        if i==0 and S[0]=='L':\n            c+=1\n        A[i]+=(c+1)//2\n        A[i-1]+=c//2\n        c=0\nprint(' '.join(map(str,A)))", "S = list(input())\nN = len(S)\nS.append('R')\nans = [0]*N\n\n#cnt for RL\ncnt = [0,0]\nl = 'R'\nfor i in range(N):\n  if S[i] == l:\n    cnt[0] += 1\n  elif S[i] == S[i+1]:\n    cnt[1] += 1\n  else:\n    cnt[1] += 1\n    r1 = cnt[0]//2\n    r2 = cnt[1]//2\n    ans[i-cnt[1]] = cnt[0] - r1 + r2\n    ans[i-cnt[1]+1] = cnt[1] - r2 + r1\n    cnt=[0,0]\nprint(' '.join(str(n) for n in ans))", "S = input()\nN = len(S)\n\nans = [0]*N\nlr_idx = 0\nfor i in range(N-1):\n    if S[i] == 'R' and S[i+1] == 'L':\n\n        r_odd = 0  # \u5947\u6570\n        r_even = 0  # \u5076\u6570\n        for c, j in enumerate(reversed(list(range(lr_idx, i)))):\n            if S[j] == 'R':\n                if (c+1) % 2 == 0:\n                    r_even += 1\n                else:\n                    r_odd += 1\n\n        l_odd = 0\n        l_even = 0\n        for c, j in enumerate(range(i+2, N)):\n            if S[j] == 'R' and S[j+1] == 'L':\n                break\n\n            if S[j] == 'L':\n                if (c+1) % 2 == 0:\n                    l_even += 1\n                else:\n                    l_odd += 1\n\n        ans[i] = 1+r_even+l_odd\n        ans[i+1] = 1+r_odd+l_even\n\n        lr_idx = i+2\nprint((' '.join(map(str, ans))))\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Sep 10 11:58:51 2020\n\n@author: liang\n\"\"\"\n\nS = input()\n\nr_index = -1\nl_index = -1\nr_count = 0\nl_count = 0\nans = [0]*len(S)\nfor i in range(len(S)):\n    #print(r_index, l_index)\n    if S[i] == 'R':\n        if l_index != -1:\n            #ans\u306e\u51e6\u7406\n            ans[r_index] = (r_count+1)//2 + l_count//2\n            ans[l_index] = (l_count+1)//2 + r_count//2\n            l_index = -1\n            r_count = 0\n            l_count = 0\n        r_index = i\n        r_count += 1\n    else:\n        if l_index == -1:\n            l_index = i\n        l_count += 1\n\n#ans\u306e\u51e6\u7406        \nans[r_index] = (r_count+1)//2 + l_count//2\nans[l_index] = (l_count+1)//2 + r_count//2            \n\nprint(' '.join([str(i) for i in ans]))", "s=input()\ndef rr(a): #\u5727\u7e2e\u3055\u308c\u305f\u8981\u7d20\u3092\u4fdd\u6301\n    ll,l=[],1\n    for i in range(len(a)-1):\n        if a[i]==a[i+1]:\n            l+=1\n        else:\n            ll.append([l,a[i]])\n            l=1\n    ll.append([l,a[-1]])\n    return ll\nss=rr(s)\nans=[0]*len(s)\ncount=0\nfor i in range(0,len(ss),2):\n    r,l=ss[i][0],ss[i+1][0]\n    count+=r\n    ans[count]+=r//2+(l+1)//2\n    ans[count-1]+=(r+1)//2+l//2\n    count+=l\nprint(*ans)", "S = input()\nA = [0]*len(S)\nn = 0\nm = 0\nnum = 0\n\nfor i in range(len(S)):\n    if S[i] == \"R\":\n        if num % 2 == 0:\n            n += 1\n        else:\n            m += 1\n        num += 1\n    else:\n        if num > 0:\n            if num % 2 == 0:\n                A[i] += n\n                A[i - 1] += m\n            else:\n                A[i] += m\n                A[i - 1] += n\n        n = 0\n        m = 0\n        num = 0\n\nsle = S[::-1]\nn = 0\nm = 0\nnum = 0\n\nfor i in range(len(S)):\n    if sle[i] == \"L\":\n        if num % 2 == 0:\n            n += 1\n        else:\n            m += 1\n        num += 1\n    else:\n        if num % 2 == 0:\n            A[-(i+1)] += n\n            A[-i] += m\n        else:\n            A[-(i+1)] += m\n            A[-i] += n\n        n = 0\n        m = 0\n        num = 0\n\nfor i in A:\n    print(i, end=\" \")", "def f(r,l):\n    # 3,2\n    tmp = [0 for i in range(r+l)]\n    if (r+l)%2==0:\n        tmp[r-1]=(r+l)//2\n        tmp[r]=(r+l)//2\n    else:\n        if r%2==0:\n            tmp[r-1]=(r+l)//2\n            tmp[r]=(r+l)//2+1\n        else:\n            tmp[r-1]=(r+l)//2+1\n            tmp[r]=(r+l)//2\n    return tmp\n\ns = str(input())\ncnt_r = 1\ncnt_l = 0\npre = s[0]\nans = []\nfor i in range(1,len(s)):\n    if pre == s[i]:\n        if s[i]=='R':\n            cnt_r += 1\n        else:\n            cnt_l += 1\n    else:\n        if s[i]=='R':\n            ans += f(cnt_r,cnt_l)\n            pre = s[i]\n            cnt_r = 1\n            cnt_l = 0\n        else:\n            pre = s[i]\n            cnt_l += 1\nans += f(cnt_r,cnt_l)\n\ntmp = ''\nfor i in ans:\n    tmp += str(i) + ' '\nprint(tmp[:-1])", "s = list(input())\nn = len(s)\nans = [1]*n\nfor i in range(n-1):\n    if s[i] == s[i+1] == \"R\":\n        ans[i+2] += ans[i]\n        ans[i] = 0\nfor j in range(n-1,0,-1):\n    if s[j] == s[j-1] == \"L\":\n        ans[j-2] += ans[j]\n        ans[j] = 0\nprint((' '.join([str(a) for a in ans])))\n", "s = input()\nr = 0\nl = 0\nls = [0]*len(s)\nfor i in range(len(s)):\n    \n    if s[i] == 'R':\n        if l > 0 :\n            left = (l+1)//2 + r//2\n            right = l//2 + (r+1)//2\n            ls[i-l] = left\n            ls[i-l-1] = right\n            r = 0\n            l = 0\n        r += 1\n    else :\n        l += 1\nleft = (l+1)//2 + r//2\nright = l//2 + (r+1)//2\nls[len(s)-l] = left\nls[len(s)-l-1] = right\nprint((*ls))\n", "#!/usr/bin/env python3\nfrom bisect import bisect\n\ndef solve(s):\n    def processArr(arr):\n        r_count = arr.count(\"R\")\n        r = sum((r_count - i) % 2 for i in range(len(arr)))\n        l = len(arr) - r\n        return [0] * (r_count - 1) + [r] + [l] + [0] * (len(arr) - r_count - 1)\n    ans = []\n    lst = []\n    prev = \"\"\n    n = len(s)\n    for i in range(n):\n        if s[i] == \"R\" and prev == \"L\":\n            ans.extend(processArr(lst))\n            lst.clear()\n        lst.append(s[i])\n        prev = s[i]\n    if lst != []:\n        ans.extend(processArr(lst))\n    return ans\n\ndef main():\n    S = input()\n    print((*solve(S)))\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(S):\n    import math\n    N = len(S)\n    ans = [0] * N\n    L = 0\n    R = 0\n    for i in range(N - 1):\n        if S[i] == 'R':\n            R += 1\n        if S[i + 1] == 'L' and R > 0:\n            ans[i] += math.ceil(R / 2)\n            ans[i + 1] += math.floor(R / 2)\n            R = 0\n        if S[N - (i + 1)] == 'L':\n            L += 1\n        if S[N - (i + 1) - 1] == 'R' and L > 0:\n            ans[N - (i + 1)] += math.ceil(L / 2)\n            ans[N - (i + 1) - 1] += math.floor(L / 2)\n            L = 0\n    print((' '.join([str(i) for i in ans])))\n\n\ndef __starting_point():\n    S = input()\n    solve(S)\n\n__starting_point()", "s = str(input())\nn = len(s)\nRL = [0] * n\nans = [0] * n\nfor i in range(n-1):\n    if s[i] == 'R' and s[i+1] == 'L':\n        RL[i] = 1\n        RL[i+1] = -1\nfor i in range(n):\n    if RL[i] == 1:\n        cnt = 1\n        i_temp = i\n        while i_temp > 0 and s[i_temp-1] == 'R':\n            i_temp -= 1\n            cnt += 1\n        ans[i] += (cnt + 1) // 2\n        ans[i+1] += cnt // 2\n    if RL[i] == -1:\n        cnt = 1\n        i_temp = i\n        while i_temp + 1 < n and s[i_temp+1] == 'L':\n            i_temp += 1\n            cnt += 1\n        ans[i] += (cnt + 1) // 2\n        ans[i-1] += cnt // 2\nfor i in range(n-1):\n    print(ans[i], end=\" \")\nprint(ans[n-1])", "import sys\nsys.setrecursionlimit(100100)\n\n\nS=input()\nN=len(S)\n\ntable=[-1 for i in range(N)]\n\ndef dp(n):\n  if S[n]=='R' and S[n+1]=='L':\n    return n;\n  if S[n]=='L' and S[n-1]=='R':\n    return n;\n  if table[n]>-1:\n    return table[n]\n  \n  if S[n]=='R':\n    if S[dp(n+1)]=='R':\n      table[n]=dp(n+1)+1\n    else:\n      table[n]=dp(n+1)-1\n  else:\n    if S[dp(n-1)]=='R':\n      table[n]=dp(n-1)+1\n    else:\n      table[n]=dp(n-1)-1\n  \n  \n  return table[n]\n\n\n\n\n\nlist=[0 for i in range(N)]\nfor i in range(N):\n  list[dp(i)]+=1\n  \nfor ans in list:\n  print(ans,end=\" \")\nprint()\n  ", "S = input()\n\ncnt = [0, 0]\nc_ind = 0\nl_ind = 0\np = 0\nres = [0]*len(S)\n\nfor i in range(len(S) - 1):\n    cnt[p & 1] += 1\n    if S[i] == 'L' and S[i+1] == 'R':\n        j = (c_ind & 1) ^ (l_ind & 1)\n        res[c_ind] += cnt[j]\n        res[c_ind + 1] += cnt[j ^ 1]\n        p = 0\n        l_ind = i + 1\n        cnt = [0, 0]\n    else:\n        p += 1\n        if S[i] == 'R' and S[i+1] == 'L':\n            c_ind = i\n\nif p > 0:\n    cnt[p & 1] += 1\n    j = (c_ind & 1) ^ (l_ind & 1)\n    res[c_ind] += cnt[j]\n    res[c_ind + 1] += cnt[j ^ 1]\n\nfor i in range(len(S)):\n    print(res[i])", "S = input()\n\nn = len(S)\nans = [0 for _ in range(n)]\n\nS += \"$\"\n\ns = 0\nfor i in range(n):\n    if S[i] != S[i+1]:\n        l = i - s + 1\n        if S[i] == \"R\":\n            ans[i + 1] += l // 2\n            ans[i] += (l + 1) // 2\n        else:\n            ans[s] += (l + 1) // 2\n            ans[s - 1] += l // 2\n        s = i + 1\n\nprint((\" \".join(map(str, ans))))\n", "S = input()\nN = len(S)\nans = [1]*N\n \nfor i in range(N-1):\n  if S[i] == S[i+1] == \"R\":\n    ans[i+2] += ans[i]\n    ans[i] = 0\n    \nfor j in range(N-1,0,-1):\n  if S[j] == S[j-1] == \"L\":\n    ans[j-2] += ans[j]\n    ans[j] = 0\n    \nprint(*ans)", "s = list(input())\nn = len(s)\nans = [1]*n\nfor i in range(n-1):\n    if s[i] == s[i+1] == \"R\":\n        ans[i+2] += ans[i]\n        ans[i] = 0\nfor j in range(n-1,0,-1):\n    if s[j] == s[j-1] == \"L\":\n        ans[j-2] += ans[j]\n        ans[j] = 0\nprint(' '.join([str(a) for a in ans]))", "s = input()\n\nc = []\ncur = s[0]\nstrk = 1\nfor i in range(1, len(s)):\n    if s[i] == cur:\n        strk += 1\n    else:\n        c.append((cur, strk))\n        cur = s[i]\n        strk = 1\nc.append((cur, strk))\n\nans = [0] * len(s)\nindex = 0\nfor i in range(len(c)):\n    even = c[i][1] // 2\n    odd = c[i][1] - even\n\n    if c[i][0] == \"R\":\n        ans[index+c[i][1]-1] += odd\n        ans[index+c[i][1]] += even\n    else:\n        ans[index-1] += even\n        ans[index] += odd\n\n    index += c[i][1]\n\nprint(\" \".join(map(str, ans)))", "import bisect,collections,copy,heapq,itertools,math,string\nfrom collections import defaultdict as D\nfrom functools import reduce\nimport numpy as np\nimport sys\nimport os\nfrom operator import mul\n\nsys.setrecursionlimit(10**7)\n\ndef _S(): return sys.stdin.readline().rstrip()\ndef I(): return int(_S())\ndef LS(): return list(_S().split())\ndef LI(): return list(map(int,LS()))\n\nif os.getenv(\"LOCAL\"):\n    inputFile = basename_without_ext = os.path.splitext(os.path.basename(__file__))[0]+'.txt'\n    sys.stdin = open(inputFile, \"r\")\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353    \n\nS = _S()\nS += 'E'\n# print(S)\n\nans = np.zeros(len(S)+1,dtype='int')\nbc = S[0]\ncount = 1\n\nfor i in range(1,len(S)):\n    cc = S[i]\n    if cc == bc:\n        count += 1\n        continue\n    else:\n        # RRRL\n        if cc == 'L':\n            # \u5207\u308a\u4e0a\u3052\n            ans[i-1] += math.ceil(count/2)\n            # \u5207\u308a\u6368\u3066\n            ans[i] += math.floor(count/2)\n            count = 1\n            bc = 'L'\n        # LLLR\n        else:\n            ans[i-count] += math.ceil(count/2)\n            ans[i-count-1] += math.floor(count/2)\n            count = 1\n            bc = 'R'\n\nprint((*ans[:-2]))\n\n\n", "def rle(s):\n    tmp, count, ans = s[0], 1, []\n    for i in range(1,len(s)):\n        if tmp == s[i]:\n            count += 1\n        else:\n            ans.append((tmp,count))\n            tmp = s[i]\n            count = 1\n    ans.append((tmp,count))\n    return ans\n\nS = input()\nans = [str(0) for _ in range(len(S))]\nSrle = rle(S)\n\nitr = 0\nfor i in range(1,len(Srle),2):\n    itr += Srle[i-1][1]\n    Rtoeven = Srle[i-1][1] // 2\n    Ltoeven = Srle[i][1] // 2 \n    ans[itr-1] = str((Srle[i-1][1] - Rtoeven) + Ltoeven)\n    ans[itr] = str(Rtoeven + (Srle[i][1] - Ltoeven))\n    itr += Srle[i][1]\n\"\"\"\nRtoeven \u306f RL\u306eR\u304b\u3089\u5076\u6570\u96e2\u308c\u3066\u3044\u308b\u500b\u6570\nLtoeven \u306f RL\u306eL\u304b\u3089\u5076\u6570\u96e2\u308c\u3066\u3044\u308b\u500b\u6570\n\"\"\"\nprint(\" \".join(ans))", "s=str(input())\ns=list(s)\nn=len(s)\n\npoint=[0]*n\n\ncnt=1\nfor i in range(n-1):\n  if s[i]==\"R\" and s[i+1]==\"L\":\n    point[i]=cnt\n    cnt=1\n  elif s[i]==\"R\":\n    cnt+=1\n    \nfor i in reversed(range(1,n)):\n  if s[i]==\"L\" and s[i-1]==\"R\":\n    point[i]=cnt\n    cnt=1\n  elif s[i]==\"L\":\n    cnt+=1\n    \nans=[0]*n\nfor i in range(n-1):\n  if point[i]!=0 and point[i+1]!=0:\n    ans[i]+=(point[i]+1)//2+point[i+1]//2\n    ans[i+1]+=(point[i+1]+1)//2+point[i]//2\n    point[i+1]=0\n    \n\nfor i in range(n):\n  print(ans[i],end=\" \")", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return list(map(int,input().split()))\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\ns = v()\na = len(s)\np = [0]*a\ncheck = True\nnow_before = 0\nnow_after = 0\ncnt_x = 1\ncnt_y = 0\n\nfor i in range(1,a):\n    if s[i] == \"L\" and check == True:\n        now_before = i-1\n        now_after = i\n        check = False\n        if i % 2 == 0:\n            p[now_before] += cnt_y\n            p[now_after] += cnt_x+1\n        else:\n            p[now_before] += cnt_x\n            p[now_after] += cnt_y+1\n        cnt_x = 0\n        cnt_y = 0\n    elif s[i] == \"L\" and check == False:\n        if (i - now_after) % 2 == 0:\n            p[now_after] += 1\n        else:\n            p[now_before] += 1   \n    elif s[i] == \"R\" and check == False:\n        check = True\n        if i%2==0:\n            cnt_x += 1\n        else:\n            cnt_y += 1\n    elif s[i] == \"R\" and check == True:\n        if i%2==0:\n            cnt_x += 1\n        else:\n            cnt_y += 1\n\nprint((\" \".join(map(str,p))))\n\n\n", "s = input()\ncnt = [0,0]\nI = \"\"\nans = [0] * len(s)\nfor i in range(len(s)):\n    if s[i] == \"R\": \n        if I == \"\": cnt[0] += 1\n        else:\n            ans[I] = (cnt[0]+1)//2 + cnt[1]//2\n            ans[I+1] = cnt[0]//2 + (cnt[1]+1)//2\n            cnt = [1,0]\n            I = \"\"\n    else:\n        if I == \"\": I = i-1\n        cnt[1] += 1\nans[I] = (cnt[0]+1)//2 + cnt[1]//2\nans[I+1] = cnt[0]//2 + (cnt[1]+1)//2\nprint(\" \".join(map(str, ans)))", "from collections import Counter\n\nS=input()\nn=len(S)\ndp=[[0]*n for _ in range(20)]\n\nfor i,s in enumerate(S):\n    dp[0][i]=i-1 if s =='L' else i+1\n\nfor k in range(19):\n    for i in range(n):\n        dp[k+1][i]=dp[k][dp[k][i]]\n\nC=Counter(dp[-1])\n\nprint(*[C[i] for i in range(n)])", "S=input()\nn=len(S)\ndp=[[0]*n for _ in range(20)]\n\nfor i,s in enumerate(S):\n    dp[0][i]=i-1 if s =='L' else i+1\n\nfor k in range(19):\n    for i in range(n):\n        dp[k+1][i]=dp[k][dp[k][i]]\n\nA=[0 for i in range(n)]\nfor d in dp[-1]:\n    A[d]+=1\nprint((*A))\n", "li = list(input())\n\nn = len(li)\n\nans = [0 for _ in range(n)]\n\nrcnt = 0\nlcnt = 0\nridx = 0\nlidx = 0\n\nfor i in range(1,n):\n    if li[i-1]=='R':\n        rcnt += 1\n        if li[i]=='L':\n            ridx = i-1\n            lidx = i\n            if i==n-1:\n                lcnt += 1\n                ans[ridx] = (rcnt+1)//2 + lcnt//2\n                ans[lidx] = (lcnt+1)//2 + rcnt//2\n                rcnt = 0\n                lcnt = 0\n    if li[i-1]=='L':\n        lcnt += 1\n        if li[i]=='R' or i==n-1:\n            if i==n-1:\n                lcnt += 1\n            ans[ridx] = (rcnt+1)//2 + lcnt//2\n            ans[lidx] = (lcnt+1)//2 + rcnt//2\n            rcnt = 0\n            lcnt = 0\n\nprint(*ans)", "s = input()\nn = len(s)\na = [0] * n\nb = 0\nfor i in range(n):\n    if s[i] == 'R':\n        b += 1\n    elif b:\n        a[i - 1] += 0 - - b // 2\n        a[i] += b // 2\n        b = 0\na[-1] += b\n\nb = 0\nfor i in range(n - 1, -1, -1):\n    if s[i] == 'L':\n        b += 1\n    elif b:\n        a[i] += b // 2\n        a[i + 1] += 0 - - b // 2\n        b = 0\na[0] += b\nprint((*a))\n", "s=list(input())\nlens=len(s)\n#print(s)\n\nlr=[[0]*2 for i in range(lens)]\nlrp=[0]*lens\nicnt=0\nlr[0][0]=1\nfor i in range(1,lens):\n    if s[i]==\"R\":        \n        if s[i-1]==\"R\":\n            lr[icnt][0]+=1\n        elif s[i-1]==\"L\":\n            icnt+=1\n            lr[icnt][0]+=1\n    elif s[i]==\"L\":\n        if s[i-1]==\"L\":\n            lr[icnt][1]+=1\n        elif s[i-1]==\"R\":\n            lr[icnt][1]+=1        \n            lrp[icnt]=i\n\nss=[0]*lens\nfor i in range(icnt+1):\n    r1=lr[i][0]//2\n    r2=lr[i][0]-r1\n    l1=lr[i][1]//2\n    l2=lr[i][1]-l1\n    ss[lrp[i]]=r1+l2\n    ss[lrp[i]-1]=r2+l1\n\n#print(lr[:icnt+1])\ntstr=str(ss[0])\nfor i in range(1,lens):\n    tstr=tstr+\" \"+str(ss[i])\nprint(tstr)", "import math\n\ndef main():\n\tS = list(input())\n\tls = len(S)\n\tRL = []\n\trc = 0\n\tlc = 0\n\tfor i in range(ls):\n\t\tif i != ls - 1:\n\t\t\tif S[i] == \"R\":\n\t\t\t\trc += 1\n\t\t\telif S[i] == \"L\" and S[i + 1] == \"L\":\n\t\t\t\tlc += 1\n\t\t\telif S[i] == \"L\" and S[i + 1] == \"R\":\n\t\t\t\tlc += 1\n\t\t\t\tRL.append({\n\t\t\t\t\t\"right\": rc,\n\t\t\t\t\t\"left\": lc\n\t\t\t\t})\n\t\t\t\trc = 0\n\t\t\t\tlc = 0\n\t\telse:\n\t\t\tlc += 1\n\t\t\tRL.append({\n\t\t\t\t\"right\": rc,\n\t\t\t\t\"left\": lc\n\t\t\t})\n\tcnt = []\n\tfor i in range(len(RL)):\n\t\trl = RL[i]\n\t\trc = rl[\"right\"]\n\t\tlc = rl[\"left\"]\n\t\tcnt += [\"0\"] * (rc - 1)\n\t\tcnt += [str(int(lc / 2) + math.ceil(rc / 2))]\n\t\tcnt += [str(int(rc / 2) + math.ceil(lc / 2))]\n\t\tcnt += [\"0\"] * (lc - 1)\n\n\tprint(\" \".join(cnt))\n\nmain()", "s = input()\n\nans = [0] * len(s)\ns += 'R'\npresent = 'R'\nstart = 0\nfor i in range(len(s)-1):\n  if present == 'R':\n    if s[i+1] == 'R':\n      continue\n    r = i\n    l = i+1\n    present = 'L'\n  else:\n    if s[i+1] == 'L':\n      continue\n    end = i\n    present = 'R'\n    rl = r - start\n    ll = end - l\n    ans[r] = 1 + rl//2 + (-(-ll//2))\n    ans[l] = 1 + (-(-rl//2)) + ll//2\n    start = i+1\nprint(' '.join(map(str, ans)))"]