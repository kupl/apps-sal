["import sys\n\nMOD = 10**9+7\n\n# Polymod\ndef polymod(P,Q):\n    assert(Q[-1]==1)\n    n = len(Q)\n    while len(P)>=n:\n        p = P[-1]\n        for i in range(n):\n            P[-i-1] -= p*Q[-i-1]\n        assert(P[-1]==0)\n        P.pop()\n    return P\n\ndef polyprod(P,Q):\n    n = len(P)\n    m = len(Q)\n    W = [0]*(n+m-1)\n    for i in range(n):\n        for j in range(m):\n            W[i+j]+=P[i]*Q[j]\n    return [w%MOD for w in W]\n\n# Calc A^m * B \ndef power(A,B,m,mult):\n    if m == 0:\n        return B\n    while m>1:\n        if m%2==1:\n            B = mult(A,B)\n        A = mult(A,A)\n        m//=2\n    return mult(A,B)\n    \ndef calc_nth_term(init,linear_coeff,n):\n    def mult(A,B):\n        return polymod(polyprod(A,B),linear_coeff)\n    \n    ans = power([0,1],[1],n,mult)\n    return sum(ans[i]*init[i] for i in range(len(ans)))\n\n\nn,m = [int(x) for x in input().split()]\n\nlinear_rec = [0]*(m+1)\nlinear_rec[0] = -1\nlinear_rec[m-1] = -1\nlinear_rec[m] = 1\n\nprint(calc_nth_term([1]*m,linear_rec,n)%MOD)\n", "import sys\n\nMOD = 10**9+7\n\n# Polymod\ndef polymod(P,Q):\n    assert(Q[-1]==1)\n    n = len(Q)\n    while len(P)>=n:\n        p = P[-1]\n        for i in range(n):\n            P[-i-1] -= p*Q[-i-1]\n        assert(P[-1]==0)\n        P.pop()\n    return P\n\ndef polyprod(P,Q):\n    n = len(P)\n    m = len(Q)\n    W = [0]*(n+m-1)\n    for i in range(n):\n        for j in range(m):\n            W[i+j]+=P[i]*Q[j]\n    return [w%MOD for w in W]\n\n# Calc A^m * B \ndef power(A,B,m,mult):\n    if m == 0:\n        return B\n    while m>1:\n        if m%2==1:\n            B = mult(A,B)\n        A = mult(A,A)\n        m//=2\n    return mult(A,B)\n    \ndef calc_nth_term(init,linear_coeff,n):\n    def mult(A,B):\n        return polymod(polyprod(A,B),linear_coeff)\n    \n    ans = power([0,1],[1],n,mult)\n    return sum(ans[i]*init[i] for i in range(len(ans)))\n\n\nn,m = [int(x) for x in input().split()]\n\nlinear_rec = [0]*(m+1)\nlinear_rec[0] = -1\nlinear_rec[m-1] = -1\nlinear_rec[m] = 1\n\nprint(calc_nth_term([1]*m,linear_rec,n)%MOD)\n"]