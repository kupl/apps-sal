["for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    a,b = 0,0\n    arr.sort()\n    for i in arr:\n        if a==i:\n            a+=1\n        elif b==i:\n            b+=1\n    print(a+b)", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    n = val()\n    l = sorted(li())\n\n    a1 = set()\n    a2 = set()\n    for i in l:\n        if i in a1:\n            a2.add(i)\n        else:a1.add(i)\n    ans = 0\n    for i in range(200):\n        if i not in a1:\n            ans += i\n            break\n    for i in range(200):\n        if i not in a2:\n            ans += i\n            break\n    print(ans)", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    a = list(read_ints())\n    cnt = [0 for _ in range(101)]\n    for i in a:\n        cnt[i] += 1\n    ans = 0\n    status = 2\n    for i in range(101):\n        status = min(status, cnt[i])\n        if status == 0:\n            break\n        ans += status\n    print(ans)\n", "for _ in range(int(input())):\n    n=int(input())\n    mxa=mxb=0\n    for i in sorted(map(int,input().split())):\n        if i==mxa:mxa+=1\n        elif i==mxb:mxb+=1\n    print(mxa+mxb)\n", "import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(lst):  # fix inputs here\n    console(\"----- solving ------\")\n\n    c = Counter(lst)\n\n    cur = 0\n    while True:\n        if c[cur] < 2:\n            a = cur\n            break\n        cur += 1\n\n    while True:\n        if c[cur] < 1:\n            b = cur\n            break\n        cur += 1\n\n    # return a string (i.e. not a list or matrix)\n    return a + b  \n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n# fast read all\n# sys.stdin.readlines()\n\nfor case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    k = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    lst = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(map(int,input().split())))\n\n    res = solve(lst)  # please change\n    \n    # Google - case number required\n    # print(\"Case #{}: {}\".format(case_num+1, res))\n\n    # Codeforces - no case number required\n    print(res)\n", "import sys\nfrom sys import stdout\nimport random\nfrom fractions import Fraction\nfrom math import *\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n\ndef finput():\n    return float(input())\n\ndef tinput():\n    return input().split()\n\ndef linput():\n    return list(input())\n \ndef rinput():\n    return list(map(int, tinput()))\n\ndef fiinput():\n    return list(map(float, tinput()))\n \ndef rlinput():\n    return list(map(int, input().split()))\ndef trinput():\n    return tuple(rinput())\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\ndef NOYES(fl):\n    if fl:\n        print(\"NO\")\n    else:\n        print(\"YES\")\ndef YESNO(fl):\n    if fl:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef main():\n    n = iinput()\n    #k = iinput() \n    #m = iinput() \n    #n = int(sys.stdin.readline().strip()) \n    #n, k = rinput()\n    #n, m = rinput()\n    #m, k = rinput()\n    #n, k, m = rinput()\n    #n, m, k = rinput()\n    #k, n, m = rinput()\n    #k, m, n = rinput() \n    #m, k, n = rinput()\n    #m, n, k = rinput()\n    #q = srlinput()\n    #q = linput()\n    q = srlinput()\n    w = set([i for i in range(105)])\n    res = list(w - set(q))[0]\n    for i in range(res):\n        del q[q.index(i)]\n    print(list(w - set(q))[0] + res)\n    \n        \n    \n    \n        \n    \n\nfor i in range(iinput()):\n    main()\n", "for _ in range(int(input())):\n    n = int(input())\n    freq = [0] * 101\n    for e in map(int, input().split()):\n        freq[e] += 1\n    res = 0\n    one = False\n    for i in range(101):\n        if freq[i] == 0:\n            break\n        if one:\n            res += 1\n        else:\n            if freq[i] > 1:\n                res += 2\n            else:\n                one = True\n                res += 1\n    print(res)\n", "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    u = 0\n    for i in range(n + 1):\n        if a.count(i) < 2:\n            u = i\n            break\n    v = 0\n    for i in range(n + 1):\n        if a.count(i) < 1:\n            v = i\n            break\n    print(u + v)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nimport math\ndef II():\n\treturn int(sys.stdin.readline())\n\ndef LI():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef MI():\n\treturn map(int, sys.stdin.readline().split())\n\ndef SI():\n\treturn sys.stdin.readline().strip()\nt = II()\nfor q in range(t):\n\tn = II()\n\ta = LI()\n\td = [0]*101\n\tfor i in range(n):\n\t\td[a[i]]+=1\n\tans = 0\n\tboo = False\n\tfor i in range(101):\n\t\tif boo == False and d[i]<2:\n\t\t\tans+=i\n\t\t\tboo = True\n\t\tif boo == True and d[i]<1:\n\t\t\tans+=i\n\t\t\tbreak\n\tprint(ans)", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n\n    a1 = 200\n    a2 = 200\n    for i in range(200, -1, -1):\n        if l.count(i) < 2:\n            a2 = i\n        if l.count(i) < 1:\n            a1 = i\n    print(a1+a2)\n", "t = int(input())\n\nfor i in range(t):\n    n = int(input())\n    k = list(map(int, input().split()))\n    m1, m2 = 0, 0\n    for i in range(101):\n        if k.count(i) < 2:\n            m1 = i\n            break\n    for i in range(m1, 101):\n        if k.count(i) < 1:\n            m2 = i\n            break\n    print(m1+m2)\n"]