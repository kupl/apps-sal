["n = int(input())\nfirst = {}\nsecond = set()\ns1 = [0] * n\nans = [0] * n\nfor i in range(n):\n    a, b = input().split()\n    a = a[:3]\n    b = b[0]\n    s1[i] = b\n    if a in first.keys():\n        first[a].append(i)\n    else:\n        first[a] = [i]\n        ans[i] = a\nF = True\nfor name in first.keys():\n    if not F:\n        break\n    if len(first[name]) > 1:\n        for i in first[name]:\n            c = name[:2] + s1[i]\n            if c in second:\n                F = False\n                break\n            else:\n                second.add(c)\n                ans[i] = c\n        first[name] = 0\n\ndef process(name):\n    nonlocal F\n    if F == False:\n        return\n    if first[name] != 0 and name in second:\n        t = first[name][0]\n        c = name[:2] + s1[t]\n        if c in second:\n            F = False\n            return\n        else:\n            second.add(c)\n            ans[t] = c\n            first[name] = 0\n            if c in first.keys() and first[c] != 0:\n                process(c)\n                \n\n\nfor name in first.keys():\n    process(name)\n                \n\nif F:\n    print('YES')\n    for i in range(n):\n        print(ans[i])\nelse:\n    print('NO')", "def sol():\n    n=int(input())\n    club=['']*n\n    city=['']*n\n    mp={}\n    for i in range(n):\n        s=input().split()\n        club[i]=s[0][:3]\n        city[i]=s[1][:1]\n        if club[i] in mp:\n            mp[club[i]].add(i)\n        else:\n            mp[club[i]]=set()\n            mp[club[i]].add(i)\n    \n    def rename(abc ,i):\n        if abc in name:\n            return False\n        name[abc]=i \n        if abc in mp and len(mp[abc])==1:\n            for j in mp[abc] :\n                if club[j][:2]+city[j] in name:\n                    return False\n                \n                mp[abc].clear()\n                #name[club[j][:2]+city[j]]=j \n                return rename(club[j][:2]+city[j],j)\n        return True            \n        \n    for clubname in mp:\n        if len(mp[clubname])>1:\n            for i in mp[clubname]:\n                abc=club[i][:2]+city[i]\n                if abc in name:\n                    return False\n                if not rename(abc,i):\n                    return False\n                        \n    \n                    \n    for clubname in mp:\n        if len(mp[clubname])==1:\n            for i in mp[clubname]:\n                name[clubname]=i \n    return True\nname={}\nif sol() :\n    print('YES')\n    l=['']*len(name)\n    for s in name:\n        l[name[s]]=s \n    for i in range(len(l)):\n        print(l[i])      \nelse:\n    print('NO')\n         \n", "def sol():\n    n=int(input())\n    club=['']*n\n    city=['']*n\n    mp={}\n    for i in range(n):\n        s=input().split()\n        club[i]=s[0][:3]\n        city[i]=s[1][:1]\n        if club[i] in mp:\n            mp[club[i]].add(i)\n        else:\n            mp[club[i]]=set()\n            mp[club[i]].add(i)\n    \n    def rename(abc ,i):\n        if abc in name:\n            return False\n        name[abc]=i \n        if abc in mp and len(mp[abc])==1:\n            for j in mp[abc] :\n                if club[j][:2]+city[j] in name:\n                    return False\n                \n                mp[abc].clear()\n                #name[club[j][:2]+city[j]]=j \n                return rename(club[j][:2]+city[j],j)\n        return True            \n        \n    for clubname in mp:\n        if len(mp[clubname])>1:\n            for i in mp[clubname]:\n                abc=club[i][:2]+city[i]\n                if abc in name:\n                    return False\n                if not rename(abc,i):\n                    return False\n                        \n    \n                    \n    for clubname in mp:\n        if len(mp[clubname])==1:\n            for i in mp[clubname]:\n                name[clubname]=i \n    return True\nname={}\n\nif sol() :\n    print('YES')\n    l=['']*len(name)\n    for s in name:\n        l[name[s]]=s \n    for i in range(len(l)):\n        print(l[i])      \nelse:\n    print('NO')\n         \n", "from collections import defaultdict\nnames = int(input())\ninp = [input().split() for x in range(names)]\nchoice = []\nres = defaultdict(lambda: [])\nfor x, word in enumerate(inp):\n    choice.append(False)\n    res[word[0][:3]].append(x)\n\nwhile True:\n    changes = []\n    for key in list(res.keys()):\n        if len(res[key]) > 1:\n            # All choice = False options must be changed\n            remove = []\n            for i, index in enumerate(res[key]):\n                if choice[index]: continue\n                remove.append(i)\n                choice[index] = True\n                changes.append((inp[index][0][:2] + inp[index][1][0], index))\n            for i in remove[::-1]:\n                del res[key][i]\n    if len(changes) == 0: break\n    for word, i in changes:\n        res[word].append(i)\n\nbad = False\nfor key in list(res.keys()):\n    if len(res[key]) > 1: bad = True\n\nif bad:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(names):\n        if choice[i]:\n            print(inp[i][0][:2] + inp[i][1][0])\n        else:\n            print(inp[i][0][:3])\n", "from sys import stdin\n\nn = int(stdin.readline().strip())\nT,A = [],[]\nN,M = {},{}\nfor _ in range(n):\n    t,h = stdin.readline().split()\n    n1,n2 = t[:3],t[:2]+h[0]\n    N[n1] = N.get(n1,0)+1\n    T.append((n1,n2))\n    A.append(n1)\n\ndef solve():\n    for i in range(n):\n        n1,n2 = T[i]\n        if n1 not in M and N[n1]==1:\n            M[n1] = i\n            continue\n        while n2 in M:\n            j = M[n2]\n            if n2==T[j][1]:\n                return False\n            M[n2],A[i]=i,n2\n            i,n2 = j,T[j][1]\n        else:\n            M[n2],A[i] = i,n2\n    return True\n\nif solve():\n    print(\"YES\")\n    print('\\n'.join(A))\nelse:\n    print(\"NO\")\n"]