["n = int(input())\n\nxs = [int(x) for x in input().split()]\n\npos = {}\nfor i, x in enumerate(xs):\n    while x in pos:\n        del pos[x]\n        x *= 2\n    pos[x] = i\n\nks = sorted(list(pos.keys()), key=lambda k: pos[k])\n\nprint(len(ks))\nprint(\" \".join(map(str, ks)))\n", "import heapq\nn = int(input())\nA = list(map(int, input().split()))\nhq = []\nfor i in range(n):\n  heapq.heappush(hq, (A[i], i))\nwhile len(hq) >= 2:\n  t1 = heapq.heappop(hq)\n  t2 = heapq.heappop(hq)\n  if t1[0] == t2[0]:\n    A[t1[1]] = 0\n    A[t2[1]] = 2 * t1[0]\n    heapq.heappush(hq, (2 * t2[0], t2[1]))\n  else:\n    heapq.heappush(hq, t2)\nprint(len(A) - A.count(0))\nfor a in A:\n  if a != 0:\n    print(a, end=' ')\n", "n=int(input())\ndef insert(x,d,i,s):\n    s.add(x)\n    try:\n        d[x].append(i)\n        if(len(d[x])==2):\n            d[x]=[]\n            s.remove(x)\n            insert(2*x,d,i,s)\n    except:\n        d[x]=[i]\n\n\n\n\na=list(map(int,input().split()))\n\nd=dict()\ns=set()\n\nfor i in range(n):\n    insert(a[i],d,i,s)\nfin=[]\n#print(d)\n#print(s)\nfor i in d.keys():\n    for j in d[i]:\n        fin.append([j,i])\nfin.sort()\n#print(fin)\nprint(len(fin))\nfor i in fin:\n    print(i[1],end=' ')\n    \n\n\n", "n = int(input())\nL = input().split(' ')\nfor i in range(len(L)):\n    L[i] = int(L[i])\ndico = {}\nj = 0\nwhile j < len(L):\n    if L[j] not in dico or dico[L[j]] == -1:\n        dico[L[j]] = j\n        j += 1\n    else:\n        L[dico[L[j]]] = -1\n        dico[L[j]] = -1\n        L[j] = L[j] * 2\nsm = 0\nfor i in range(len(L)):\n    if L[i] != -1:\n        sm += 1\nprint(sm)\nk = 1\nfor i in range(len(L)):\n    if L[i] != -1:\n        if k < sm:\n            print(L[i], end=' ')\n        else:\n            print(L[i])\n        k += 1\n", "from collections import deque\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# index = [-1] * (sum(A)+1)\n#\n# for i in range(N):\n#     while index[A[i]] != -1:\n#         A[index[A[i]]] = -1     # -1 \u306f delete\n#         index[A[i]] = -1        # A[i] \u306f\u306a\u304f\u306a\u3063\u305f\n#         A[i] *= 2\n#     index[A[i]] = i\n\ndic = dict()\n\nfor i in range(N):\n    while A[i] in dic:\n        A[dic[A[i]]] = -1     # -1 \u306f delete\n        del dic[A[i]]        # A[i] \u306f\u306a\u304f\u306a\u3063\u305f\n        A[i] *= 2\n    dic[A[i]] = i\n\nB = []\nfor a in A:\n    if a > 0:\n        B.append(a)\nprint(len(B))\nprint(\" \".join(list(map(str, B))))", "def merge(a,b):\n    la=len(a)\n    lb=len(b)\n    i=0\n    j=0\n    ans=[]\n    while i<la and j<lb:\n        if a[i]<b[j]:\n            ans.append(a[i])\n            i+=1\n        else:\n            ans.append(b[j])\n            j+=1\n    while i<la:\n        ans.append(a[i])\n        i+=1\n    while j<lb:\n        ans.append(b[j])\n        j+=1\n    return ans\nn=int(input())\na=list(map(int,input().strip().split()))\nd={}\nfor i in range(n):\n    if a[i] in d:\n        d[a[i]].append(i)\n    else:\n        d[a[i]]=[i]\nx=[]\ny=[]\nfor i in d:\n    x.append(i)\nx.sort()\nlx=len(x)\nly=0\ni=0\nj=0\nans={}\nwhile i<lx or j<ly:\n    r=0\n    if i>=lx:\n        r=y[j]\n        j+=1\n    elif j>=ly:\n        r=x[i]\n        i+=1\n    else:\n        if x[i]<y[j]:\n            r=x[i]\n            i+=1\n        else:\n            r=y[j]\n            j+=1\n    l=len(d[r])\n    if l%2!=0:\n        ans[d[r][-1]]=r\n    if l==1:\n        continue\n    temp=[]\n    for rj in range(1,l,2):\n        temp.append(d[r][rj])\n    if 2*r in d:\n        d[2*r]=merge(d[2*r],temp)\n    else:\n        d[2*r]=temp\n        y.append(2*r)\n        ly+=1\nx=[]\nfor i in ans:\n    x.append(i)\nx.sort()\nprint(len(x))\nfor i in x:\n    print(ans[i],end=' ')\n    \n        \n        \n\n    \n\n\n\n    \n    \n    ", "n=int(input())\narr=list(map(int,input().strip().split(' ')))\nd={}\ni = 0\nwhile(i<n):\n  try:\n    t = d[arr[i]]\n    arr[t] = -1\n    del d[arr[i]]\n    arr[i] = 2*arr[i]\n  except KeyError:\n    d[arr[i]] = i\n    i+=1\nprint(n-arr.count(-1))\nfor i in range(n):\n  if(arr[i]!=-1):\n    print(arr[i],end=' ')\n\n", "n=int(input())\nout=n\nL=list(map(int,input().split()))\nX=dict()\n\ndef f(x):\n    try:\n        return X[x]\n    except:\n        return -1\n\nfor i in range(n):\n    x=L[i];\n    while (f(x)!=-1):\n        L[X[x]]=-1\n        out-=1\n        X[x]=-1\n        L[i]*=2\n        x=L[i]\n    X[x]=i\nprint(out)\nfor i in range(n):\n    if (L[i]!=-1):\n        print(L[i],end=\" \")\nprint()\n", "n = int(input())\na = list(map(int, input().split()))\n\nc = {}\n\nfor p in range(len(a)):\n    while c.get(a[p], -1) >= 0:\n        a[c[a[p]]] = 0\n        c[a[p]] = -1\n        a[p] *= 2\n\n    c[a[p]] = p\n\nsolution = [str(x) for x in a if x > 0]\nprint(len(solution))\nprint(' '.join(solution))", "n=int(input().split()[0])\nns=[int(x) for x in input().split()[:n]]\nind={}\ni=0\nwhile i<n:\n    ni=ns[i]\n    while ni in ind:\n        ns[ind[ni]]=None\n        ind.pop(ni, None)\n        ni*=2\n    ns[i]=ni\n    ind[ni]=i\n    i+=1\nans=[x for x in ns if x!=None]\nprint(len(ans))\nfor i in ans:\n    print(i,end=' ')\n\n", "import sys\nimport math\nimport itertools\nimport heapq\nimport bisect\n\ndef solution(n,arr):\n\n    count = {}\n    for i,num in enumerate(arr):\n        if num in count:\n            heapq.heappush(count[num], i)\n        else:\n            count[num] = [i]\n\n    pq = []\n    for num,c in count.items():\n        occs = len(c) \n        if occs >= 2:\n            heapq.heappush(pq, num)\n\n    while pq:\n        num = heapq.heappop(pq)\n        if len(count[num]) < 2:\n            continue\n        i = heapq.heappop(count[num])\n        j = heapq.heappop(count[num])\n        arr[i] = None\n        arr[j] = num * 2\n        if num * 2 in count:\n            heapq.heappush(count[num*2], j)\n            if len(count[num*2]) >= 2:\n                heapq.heappush(pq, num*2)\n        else:\n            count[num * 2] = [j]\n        if len(count[num]) >= 2:\n            heapq.heappush(pq, num)\n\n    res = [str(ai) for ai in arr if ai != None]\n    print(len(res))\n    print(' '.join(res))\n\nn = sys.stdin.readline().strip()\narr = list(map(int, sys.stdin.readline().strip().split(' ')))\nsolution(n,arr)", "import sys\nimport math\nimport itertools\nimport heapq\nimport bisect\n\ndef solution(n,arr):\n\n    count = {}\n    for i,num in enumerate(arr):\n        if num in count:\n            heapq.heappush(count[num], i)\n        else:\n            count[num] = [i]\n\n    pq = []\n    for num,c in count.items():\n        occs = len(c) \n        if occs >= 2:\n            heapq.heappush(pq, num)\n\n    while pq:\n        num = heapq.heappop(pq)\n        if len(count[num]) < 2:\n            continue\n        i = heapq.heappop(count[num])\n        j = heapq.heappop(count[num])\n        arr[i] = None\n        arr[j] = num * 2\n        if num * 2 in count:\n            heapq.heappush(count[num*2], j)\n            if len(count[num*2]) >= 2:\n                heapq.heappush(pq, num*2)\n        else:\n            count[num * 2] = [j]\n        if len(count[num]) >= 2:\n            heapq.heappush(pq, num)\n\n    res = [str(ai) for ai in arr if ai != None]\n    print(len(res))\n    print(' '.join(res))\n\nn = sys.stdin.readline().strip()\narr = list(map(int, sys.stdin.readline().strip().split(' ')))\nsolution(n,arr)", "def main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    idx = {}\n    for i in range(len(a)):\n        x = a[i]\n        while x in idx:\n            del idx[x]\n            x *= 2\n        # there is no any pair of equal number in idx\n        # so every time when updating idx, i is the right place to record x\n        idx[x] = i\n\n    ans = list(sorted(idx.keys(), key=lambda x: idx[x]))\n    print(len(ans))\n    print(' '.join([str(x) for x in ans]))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\nnums = list(map(int, input().split()))\n\n# traverse array --- note we only modify right terms\nlastSeen = {}\ni = 0\nwhile i < len(nums):\n    if nums[i] in lastSeen:\n        nums[lastSeen[nums[i]]] = 0  # ignore the num at this index\n        del lastSeen[nums[i]]\n        nums[i] <<= 1\n        i -= 1\n    else:\n        lastSeen[nums[i]] = i\n    i += 1\n\nnewnums = []\nfor n in nums:\n    if n != 0:\n        newnums.append(n)\n\nprint(len(newnums))\nprint(' '.join(map(str, newnums)))\n", "n = int(input())\na = list(map(int, input().split()))\n\nidx = {}\nfor i in range(n):\n    x = a[i]\n    while x in idx:\n        del idx[x]\n        x *= 2\n    idx[x] = i\n\n\nprint(len(idx))\nprint(*list(idx.keys()))\n", "n=int(input())\ndef insert(x,d,i,s):\n    s.add(x)\n    try:\n        d[x].append(i)\n        if(len(d[x])==2):\n            d[x]=[]\n            s.remove(x)\n            insert(2*x,d,i,s)\n    except:\n        d[x]=[i]\n\n\n\n\na=list(map(int,input().split()))\n\nd=dict()\ns=set()\n\nfor i in range(n):\n    insert(a[i],d,i,s)\nfin=[]\n#print(d)\n#print(s)\nfor i in d.keys():\n    for j in d[i]:\n        fin.append([j,i])\nfin.sort()\n#print(fin)\nprint(len(fin))\nfor i in fin:\n    print(i[1],end=' ')\n    \n", "import math\nn=int(input())\narr=list(map(int,input().split()))\ntb={}\n#arr=sorted(arr)\n\nfor i in range(n):\n    #print(i)\n    if arr[i] in tb:\n        x=arr[i]\n        while x in tb:\n            y=tb.pop(x)\n            if 2*x not in tb:\n                tb[2*x]=i\n                break\n            x=2*x\n    else:\n        tb[arr[i]]=i\n    #print(tb)\n\n#print(tb)\ns=''\nprint(len(tb))\nkey=list(tb.keys())\nans=[]\nfor i in key:\n    ans.append([tb[i],i])\n\nans.sort()\n\nfor i in ans:\n    s+=str(i[1])+\" \"\n\n##\n##key=sorted(list(tb.keys()))\n##i=0\n##while j>=0:\n##    for i in range(len(key)):\n##        if key[i]%arr[j]==0:\n##            x=key[i]//arr[j]\n##            val=math.log(x,2)\n##            if int(val)==val:\n##                s=str(key[i])+' '+s\n##                key[i]=-1\n##                print(arr[j],s)\n##                break\n##    j-=1\n##\n\n##while len(tb)>0:\n##    if arr[j] in tb:\n##        s=str(arr[j])+' '+s\n##        g=tb.pop(arr[j])\n##    else:\n##        x=arr[j]\n##        c=0\n##        while (x not in tb and c<100):\n##            #print(tb,x)\n##            x=2*x\n##            c+=1\n##        if c<100:\n##            s=str(x)+' '+s\n##            g=tb.pop(x)\n##    j-=1\n\nprint(s)\n", "def read_data():\n    n = int(input().strip())\n    a = list(map(int, list(input().strip().split())))\n    return n, a\n\ndef solve():\n    s = {}\n    for i in range(len(a)):\n        j = a[i]\n        while j in s:\n            del s[j]\n            j *= 2\n        s[j] = i\n\n    sol = list(sorted(s.keys(), key=lambda j: s[j]))\n    print(len(sol))\n    print(*sol)\n\nn, a = read_data()\nsolve()", "n = int(input())\na = [int(x) for x in input().split()]\n\n\nrepeats = {}\nfor i, v in enumerate(a):\n    x = v\n    while x in repeats:\n        del repeats[x]\n        x *= 2\n    repeats[x] = i\n    \nprint(len(repeats))\nprint(*repeats.keys())", "n = int(input())\na = list(map(int, input().split()))\n\nidx = {}\nfor i in range(n):\n\tx = a[i]\n\twhile x in idx:\n\t\tdel idx[x]\n\t\tx *= 2\n\tidx[x] = i\n\t\nprint(len(idx))\nprint(*list(idx.keys()))", "n=int(input())\nns=[int(x) for x in input().split()]\nind={}\nfor i in range(n):\n    ni=ns[i]\n    while ni in ind:\n        ns[ind[ni]]=None\n        ind.pop(ni, None)\n        ni*=2\n    ns[i]=ni\n    ind[ni]=i\nans=[str(x) for x in ns if x!=None]\nprint(len(ans))\nprint(' '.join(ans))", "def inpmap():\n    return list(map(int, input().split()))\nn = int(input())\narr = list(inpmap())\n\ndc = {}\nfor i in range(n):\n    x = arr[i]\n    while x in dc:\n        del dc[x]\n        x *= 2\n    dc[x] = i\nprint(len(dc))\nprint(*dc)\n", "n = int(input())\na = list(map(int , input().split()))\nidx = {}\nfor i in range(n):\n    x = a[i]\n    while x in idx:\n        del idx[x]\n        x *= 2\n    idx[x] = i\nprint(len(idx))\nprint(*list(idx.keys()))"]