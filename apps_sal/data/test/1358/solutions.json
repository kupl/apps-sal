["import sys\nimport math\n\ndef solve():\n    k, n = list(map(int, input().split()))\n    D = {}\n    for line in sys.stdin:\n        s, a = line.split()\n        if s in D:\n            D[s].append(int(a))\n        else:\n            D[s] = [int(a)]\n\n    res = 0\n    center = 0\n    for s in D:\n        revs = s[::-1]\n        if not revs in D: continue\n        D[revs].sort()\n        D[s].sort()\n\n        if s == revs:\n            while len(D[s]) > 1 and D[s][-2] + D[s][-1] > 0:\n                center = max(center, -D[s][-2])\n                res += D[s].pop()\n                res += D[s].pop()\n\n            if len(D[s]) > 0:\n                center = max(center, D[s][-1])\n        else:\n            while (len(D[s]) > 0 and len(D[revs]) > 0 and\n                   D[s][-1] + D[revs][-1] > 0):\n                res += D[s].pop()\n                res += D[revs].pop()\n\n    return res + center\n\nprint(solve())\n", "n, k = list(map(int, input().split()))\np  = {}\nnp = {}\npair    = []\nused    = {}\nrev_d   = {}\n\ndef push(d, s, v):\n    if s not in d:\n        d[s] = []\n    d[s].append(v)\n\ndef is_pal(s):\n    n = len(s)\n    flg=True\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            flg = False\n            break\n    return flg        \n\ndef rev(s):\n    return s[::-1]\n\nfor _ in range(n):\n    s, val = input().split()\n    val    = int(val)\n    \n    if is_pal(s):\n        push(p, s, val)\n    else:\n        push(np, s, val)\n        \n        if s not in rev_d:\n            rev_d[s] = rev(s)\n\nfor k, v in list(p.items()):\n    p[k] = sorted(v, reverse=True)\n        \nfor k, v in list(np.items()):\n    np[k] = sorted(v, reverse=True)\n    \nfor s in np:\n    if s not in used and rev_d[s] in np:\n        pair.append([s, rev_d[s]])\n        used[s] = True\n        used[rev_d[s]] = True\n        \nmax_remain = 0\nminus = 0\nmax_S = 0\n\nfor v_arr in list(p.values()):\n    n = len(v_arr)\n    for i in range(0, n, 2):\n        if i+1==n:\n            if v_arr[i] > 0:\n                max_remain = max(max_remain, v_arr[i]) \n            \n        else:\n            if v_arr[i] + v_arr[i+1] >= 0:\n                max_S += v_arr[i] + v_arr[i+1]\n                \n                if v_arr[i+1] < 0:\n                    minus = min(minus, v_arr[i+1])\n            else:\n                if v_arr[i] > 0:\n                    max_remain = max(max_remain, v_arr[i]) \n\nfor [u, v] in pair:\n    n = min(len(np[u]), len(np[v]))\n        \n    for x, y in  zip(np[u][:n], np[v][:n]):\n        if x+y > 0:\n            max_S += x+y\n            \nprint(max(max_S+max_remain, max_S-minus))            \n\n#7 3\n#abb 2\n#aaa -3\n#bba -1\n#zyz -4\n#abb 5\n#aaa 7\n#xyx 4\n"]