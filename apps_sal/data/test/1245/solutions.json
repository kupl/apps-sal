["def main():\n    lst = list(tuple(map(int, input().split())) for _ in range(int(input())))\n    res = []\n    try:\n        for a, b in reversed(lst):\n            w, tmp = 1, ['(']\n            while w < a:\n                x = res.pop()\n                w += len(x)\n                tmp.append(x)\n            if w > b:\n                raise IndexError\n            else:\n                tmp.append(')')\n                res.append(''.join(tmp))\n    except IndexError:\n        print('IMPOSSIBLE')\n        return\n    print(''.join(reversed(res)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nx = []\nfor i in range(n):\n    x.append(list(map(int, input().split(' '))))\n\ncurr = -1\nstack= []\nstackelse = []\nok = 0\nseq = ''\npos = 0\nwhile pos < 2*n:\n\n        \n    if stack == []:\n        if ok >= n:\n            print(\"IMPOSSIBLE\")\n            quit()\n        stack.append(pos)\n        stackelse.append(x[ok])\n        ok += 1\n        seq += '('\n##        curr += 1\n            \n    elif stackelse[-1][0] <= pos - stack[-1] <= stackelse[-1][1]:\n        stack.pop()\n##        if curr != 0:\n##            curr -= 1\n        stackelse.pop()\n        seq += ')'\n        \n    else:\n        if ok >= n:\n            print(\"IMPOSSIBLE\")\n            quit()\n        stack.append(pos)\n        stackelse.append(x[ok])\n        seq += '('\n        ok += 1\n##        curr += 1\n        \n    pos += 1\nprint(seq)\n", "n = int(input())\nL = [tuple(map(int, input().split(' '))) for i in range(n)]\nans = []\ntry :\n    for l,r in reversed(L) :\n        d,a=1,\"(\"\n        while d < l :\n            d += len(ans[-1])\n            a += ans.pop()\n        if d > r : raise IndexError\n        a += \")\"\n        ans.append(a)\nexcept IndexError :\n    print(\"IMPOSSIBLE\")\n    return\nprint(\"\".join(reversed(ans)))"]