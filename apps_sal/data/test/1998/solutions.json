["def sum_zeroth(arr):\n    res = 0\n    for elem in arr:\n        res += elem[0]\n    return res\n\nn, a, b, k = list(map(int, input().split()))\ndata = input()\ndist = []\npp = 0\n\nlast = 0\nfor i in range(n):\n    if data[i] == '1':\n        dist.append((last, i))\n        pp += (i - last) // b\n        last = i + 1\n\ndist.append((last, n))\npp += (n - last) // b\npos = []\nminp = pp - a + 1\nfnd = False\n\nfor elem in dist:\n    cur = elem[0] - 1\n    while (cur + b) < elem[1]:\n        cur += b\n        pos.append(cur + 1)\n        if len(pos) == minp:\n            fnd = True\n            break\n    if fnd:\n        break\n\nprint(minp)\nprint(' '.join(map(str, pos)))\n", "n, a, b, k = map(int, input().split())\ns = input()\nind = 0\nans = []\n \nfor i in range(k):\n    l = s[ind:].find(\"1\")\n    if (l ) >= b:\n        ans.append([l , ind, ind + l])\n    ind += l + 1\n \nif (len(s) - ind ) >= b:\n    ans.append([len(s) - ind , ind, len(s)])\n#print(ans)\n \naans = []\ncount = 0\nfor i in range(len(ans)):\n    j = ans[i][1] - 1\n    while j + b < ans[i][2]:\n        j += b\n        aans.append(j + 1)\n       \n#print(*aans)\nl = len(aans) - a + 1\naans =aans[:l]\nprint(len(aans))\nprint(*aans)", "n,a,b,k = map(int,input().split())\nA=['1'] + list(input()) + ['1']\nanswer =[]\nn+= 2\ni = 0\nwhile i <= n-2:\n    per = 0\n    for j in range(i+1, i+b+1):\n        if j > n - 1:\n            break\n        if A[j] == '1':\n            i = j\n            per = 1\n            break\n    if per == 0:\n        i = j\n        answer.append(i)\nlens = len(answer)\nprint(lens - a +1)\nprint(' '.join(map(str, answer[0:lens-a+1])))", "n,a,b,k=[int(i) for i in input().split()]\ns=input()\nl=[]\ni=0\nj=0\nwhile i<len(s):\n\tif s[i]==\"1\":\n\t\tj=0\n\telse :\n\t\tj+=1\n\t\tif(j%b)==0:\n\t\t\tl+=[i+1]\n\t\t\tj=0\n\ti+=1\nl=l[a-1:]\nprint(len(l))\nprint(*l)\n\n\n", "n,a,b,k=list(map(int,input().split()))\nA=input()\nB=A.split('1')\nC=[]\nl=1\n\nfor i in B:\n    if len(i)>=b:\n        for j in range(b-1,len(i),b):\n            C.append(j+l)\n    l+=len(i)+1\nC=C[:len(C)-a+1]\nprint(len(C))\nprint(' '.join(list(map(str,C))))\n\n", "n, s, b, k = map(int, input().split())\na = list('1' + input() + '1')\nans = []\ncnt = 0\nfor i in range(len(a)):\n    if a[i] == '0':\n        cnt += 1\n    else:\n        cnt = 0\n    if cnt == b:\n        if s > 1:\n            s -= 1\n        else:\n            ans.append(i)\n        cnt = 0\nprint(len(ans))\nfor i in range(len(ans)):\n    print(ans[i], end=' ')", "'''input\n5 4 1 0\n00000\n'''\nfrom sys import stdin\nimport collections\nimport math\n\n\ndef get_working(string):\n\taux = []\n\tfirst = None\n\tif string[0] == 1:\n\t\tpass\n\telse:\n\t\tfirst = -1\n\tfor i in range(len(string)):\n\t\tif string[i] == '1':\n\t\t\tif first == None:\n\t\t\t\tfirst = i\n\t\t\telif first != None:\n\t\t\t\taux.append([first, i, (i - first - 1)])\n\t\t\t\tfirst = i\n\tif first != None:\n\t\taux.append([first, len(string), (len(string) - first) - 1])\n\n\treturn aux\n\n\n# main starts\nn, a, b, k = list(map(int, stdin.readline().split()))\nstring = list(stdin.readline().strip())\n\nans  = 0\nworking = get_working(string)\n# print(working)\ncurrent = a\nflag = 0\nfor i in working:\n\tif flag == 1:\n\t\tbreak\n\tstart, end, gap = i\n\t\n\tj = end - 1\n\tif gap//b > 0:\n\t\twhile j > start:\n\t\t\tif current == 0:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\t\t\tif (j - start)// b > 0:\n\t\t\t\tfor k in range(j, j - b, -1):\n\t\t\t\t\tstring[k] = '2'\n\t\t\t\tj -= b\t\n\t\t\t\tcurrent -= 1\n\t\t\telse:\n\t\t\t\tbreak\nans = []\ncount = 0\nfor i in range(len(string)):\n\tif string[i] == '0':\n\t\tif i > 0 and string[i - 1] == '0':\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount = 1\n\n\t\tif count == b:\n\t\t\tstring[i] = 'b'\n\t\t\tans.append(i + 1)\n\t\t\tcount = 0\n\t\t\n\t\t\t\nfor i in range(len(string)):\n\tif string[i] == '2':\n\t\tans.append(i + 1)\n\t\tbreak\n# print(string)\nprint(len(ans))\nprint(*ans)\n# print(ans)\n# for i in range(n):\n# \tif string[i] == 'b':\n# \t\tprint(i + 1, end = ' ')\n", "# Why do we fall ? So we can learn to pick ourselves up.\n\n\nfrom itertools import groupby\nn,a,b,k = map(int,input().split())\ns = input()\nsg = [list(g) for s,g in groupby(s)]\nll = 0\nhits = []\nfor i in range(0,len(sg)):\n    if sg[i][0] == '0' and len(sg[i]) >= b:\n        for hit in range(b-1,len(sg[i]),b):\n            hits.append(hit+ll+1)\n        ll += len(sg[i])\n    else:\n        ll += len(sg[i])\n# print(hits)\nhits = hits[a-1:]\nprint(len(hits))\nprint(*hits)\n\n\n\n\n\n\"\"\"\n\n13 3 2 3\n1000000010001\n\n\n15 3 2 3\n1000000000010001\n\n\"\"\"", "# Why do we fall ? So we can learn to pick ourselves up.\n\n\nfrom itertools import groupby\nn,a,b,k = map(int,input().split())\ns = input()\nsg = [list(g) for s,g in groupby(s)]\nll = 0\nhits = []\nfor i in range(0,len(sg)):\n    if sg[i][0] == '0' and len(sg[i]) >= b:\n        for hit in range(b-1,len(sg[i]),b):\n            hits.append(hit+ll+1)\n        ll += len(sg[i])\n    else:\n        ll += len(sg[i])\n# print(hits)\n# We remove number of (ships-1) from the total number of hits because we are hitting at every possible location where\n# where the ship can be placed and since we want to hit AT LEAST ONE SHIP, removing (ships-1) will still hit at least one ship \nhits = hits[a-1:]\nprint(len(hits))\nprint(*hits)\n\n\n\n\n\n\"\"\"\n\n13 3 2 3\n1000000010001\n\n\n15 3 2 3\n1000000000010001\n\n\"\"\"", "import heapq\nfrom itertools import groupby\n\n\ndef read_int():\n    return int(input().strip())\n\n\ndef read_ints():\n    return list(map(int, input().strip().split(' ')))\n\n\ndef ilen(ll):\n    return sum(1 for _ in ll)\n\ndef solve():\n    \"\"\"\n    13 3 2 3\n    1000000010001\n        3     1\n    000000000\n      a, b\n\n    - how many shots do you need to reduce maximum possible number of ships in a segment?\n    1 1 1 0\n    0\n    \"\"\"\n    n, a, b, k = read_ints()\n    s = input().strip()\n    segments = [] # (length, start)\n    maximum_count = 0\n    for start, vals in groupby(enumerate(s), key=lambda p: p[1]):\n        val = next(vals)\n        if val[1] == '0':\n            segments.append((val[0], 1+ilen(vals)))\n            maximum_count += segments[-1][1]//b\n    shots = []\n    while maximum_count >= a:\n        start, length = segments.pop()\n        if length//b > 0:\n            shots.append(start+b-1)\n            segments.append((start+b, length-b))\n            maximum_count -= 1\n    print(len(shots))\n    print(' '.join([str(shot+1) for shot in shots]))\n\n    \ndef __starting_point():\n    solve()\n\n__starting_point()", "\"Codeforces Round #384 (Div. 2)\"\n\"C. Vladik and fractions\"\n# y=int(input())\n# a=y\n# b=a+1\n# c=y*b\n# if y==1:\n#     print(-1)\n# else:    \n#     print(a,b,c)\n\"Technocup 2017 - Elimination Round 2\"\n\"D. Sea Battle\"\nn,a,b,k=map(int,input().split())\ns=list(input())\nn=len(s)\nlz=[]\nzeros=[]\nindexes=[]\nflage=0\nif s[0]==\"0\":\n    lz.append(0)\n    flage=1  \nfor i in range(1,n):\n    if flage==1 and s[i]==\"1\":\n        zeros.append(i-1-(lz[-1])+1)\n        lz.append(i-1)\n        flage=0\n    elif flage==0 and s[i]==\"0\":\n        lz.append(i)\n        flage=1   \n\nif s[-1]==\"0\":\n    zeros.append(n-1-(lz[-1])+1)\n    lz.append(n-1)\nmin_no_spaces=(a-1)*b\nspaces_left=n-k    \nl=len(lz)    \n# print(lz)\n# print(zeros)  \nshotes=0\nfor i in range(len(zeros)):\n    h=i*2\n    if min_no_spaces!=0:\n        # print(min_no_spaces)\n        if min_no_spaces>=zeros[i]:\n            min_no_spaces-=(int(zeros[i]/b))*b\n        elif min_no_spaces<zeros[i]:\n            shotes+=int((zeros[i]-min_no_spaces)/b)\n            for j in range(int((zeros[i]-min_no_spaces)/b)):\n                indexes.append(lz[h]+((j+1)*b))\n            min_no_spaces=0    \n    elif min_no_spaces==0:\n        # print(min_no_spaces)\n        shotes+=int(zeros[i]/b)\n        for j in range(int(zeros[i]/b)):\n            indexes.append(lz[h]+((j+1)*b))\nprint(shotes)\nfor i in indexes:\n    print(i,\" \",end=\"\",sep=\"\")", "n,a,b,k = list(map(int,input().split()))\n\ns = input()\n\nsm = 0\nnum = 0\nres = []\nfor i in range(n):\n    if s[i] == \"1\":\n        sm = 0\n    if s[i] == \"0\":\n        sm += 1\n        if sm == b:\n            num += 1\n            res.append(i+1)\n            sm = 0\nk = num - a + 1\nprint(k)\nprint(*res[:k])\n"]