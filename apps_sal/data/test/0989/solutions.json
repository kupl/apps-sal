["n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncnt = {}\nfor elem in a:\n    if elem in cnt:\n        cnt[elem] += 1\n    else:\n        cnt[elem] = 1\ncnt = sorted(list(cnt.items()))\nfor i in range(len(cnt)):\n    cnt[i] = list(cnt[i])\nleft = 0\nright = len(cnt) - 1\nwhile k > 0:\n    if k < cnt[left][1] and k < cnt[right][1]:\n        break\n    if left == right:\n        break\n    if cnt[left][1] <= cnt[right][1]:\n        if k >= cnt[left][1] * (cnt[left + 1][0] - cnt[left][0]):\n            k -= cnt[left][1] * (cnt[left + 1][0] - cnt[left][0])\n            cnt[left + 1][1] += cnt[left][1]\n            left += 1\n        else:\n            cnt[left][0] += k // cnt[left][1]\n            k = 0\n    else:\n        if k >= cnt[right][1] * (cnt[right][0] - cnt[right - 1][0]):\n            k -= cnt[right][1] * (cnt[right][0] - cnt[right - 1][0])\n            cnt[right - 1][1] += cnt[right][1]\n            right -= 1\n        else:\n            cnt[right][0] -= k // cnt[right][1]\n            k = 0\nprint(cnt[right][0] - cnt[left][0])", "def solve(k, a):\n    a.sort()\n    ans = a[-1] - a[0]\n    if ans == 0:\n        return 0\n    q1 = []\n    q2 = []\n    for i in range(1, len(a)):\n        if a[i] != a[i-1]:\n            q1.append([i, a[i] - a[i-1]])\n    a = a[::-1]\n    for i in range(1, len(a)):\n        if a[i] != a[i-1]:\n            q2.append([i, a[i-1] - a[i]])\n    i1, i2 = 0, 0\n    while k >= min(q1[i1][0], q2[i2][0]) and ans > 0:\n        if q1[i1][0] <= q2[i2][0]:\n            ansd = min(q1[i1][1], k // q1[i1][0])\n            ans -= ansd\n            k -= ansd * q1[i1][0]\n            i1 += 1\n        else:\n            ansd = min(q2[i2][1], k // q2[i2][0])\n            ans -= ansd\n            k -= ansd * q2[i2][0]\n            i2 += 1\n        if max(i1, i2) >= len(q1):\n            break\n    return max(0, ans)\n\n\ndef main():\n    _, k = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    print(solve(k, a))\n\n\nmain()\n", "n, k = list(map(int, input().split()))\na = sorted(map(int, input().split()))\ni = 1\nwhile True:\n    ans = a[-i] - a[i - 1]\n    if (a[i] - a[i - 1]) * i >= k:\n        ans -= k // i\n        break\n    ans = a[-i] - a[i]\n    k += a[i - 1] * i\n    k -= a[i] * i\n    if (a[-i] - a[-i - 1]) * i >= k:\n        ans -= k // i\n        break\n    k += a[-i - 1] * i\n    k -= a[-i] * i\n    i += 1\n    if not ans:\n        break\nprint(ans)\n", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nS=sorted(set(A))\n\nif len(S)==1:\n    print(0)\n    return\n\nMIN0=0\nMIN1=1\nMAX0=-1\nMAX1=-2\n\nC=Counter(A)\n\nwhile k and S[MIN0]!=S[MAX0]:\n    \n    if C[S[MIN0]]<=C[S[MAX0]] and k>=C[S[MIN0]]:\n        \n        if k>=(S[MIN1]-S[MIN0])*C[S[MIN0]]:\n            \n            k-=(S[MIN1]-S[MIN0])*C[S[MIN0]]\n            C[S[MIN1]]+=C[S[MIN0]]\n            del(C[S[MIN0]])\n            MIN0+=1\n            MIN1+=1\n\n        else:\n            print(S[MAX0]-(S[MIN0]+k//C[S[MIN0]]))\n            return\n\n    elif C[S[MAX0]]<=C[S[MIN0]] and k>=C[S[MAX0]]:\n        \n        if k>=(S[MAX0]-S[MAX1])*C[S[MAX0]]:\n            \n            k-=(S[MAX0]-S[MAX1])*C[S[MAX0]]\n            C[S[MAX1]]+=C[S[MAX0]]\n            del(C[S[MAX0]])\n            MAX0-=1\n            MAX1-=1\n\n        else:\n            print((S[MAX0]-k//C[S[MAX0]])-S[MIN0])\n            return\n\n    else:\n        break\n\nprint(S[MAX0]-S[MIN0])\n\n", "n, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nd = {}\nfor x in a:\n    if x not in d:\n        d[x] = 0\n    d[x] += 1\n\nnums = list(d.keys())\nnums.sort()\n\nl = 0\nr = len(nums)-1\nwhile l < r:\n##    print(l, r, nums, d)\n    if d[nums[l]] < d[nums[r]]:\n        cur = nums[l]\n        nxt = nums[l+1]\n        full_cost = (nxt-cur)*d[cur]\n        if full_cost <= k:\n            d[nxt] += d[cur]\n            k -= full_cost\n            l+=1\n        else:\n            mx = k // d[cur]\n            nums[l] += mx\n            break      \n    else:\n        cur = nums[r]\n        nxt = nums[r-1]\n        full_cost = (cur-nxt)*d[cur]\n        if full_cost <= k:\n            d[nxt] += d[cur]\n            k -= full_cost\n            r-=1\n        else:\n            mx = k // d[cur]\n            nums[r] -= mx\n            break   \n\nprint(nums[r]-nums[l])\n", "n, k = list(map(int,input().split()))\nseq = list(sorted(map(int,input().split())))\n\ni = 0\nj = n-1\nresult = seq[n-1] - seq[0]\n\nwhile result > 0:\n    if i == j-1:\n        used = (seq[i+1]-seq[i])*(i+1)\n    else:\n        used = (seq[i+1] - seq[i] + seq[j] - seq[j-1])*(i+1)\n    if used >= k:\n        result -= k//(i+1)\n        break\n    k -= used\n    if i == j-1:\n        result = 0\n        break\n    result = seq[j-1]-seq[i+1]\n    i += 1\n    j -= 1\n\nprint(result)\n", "n, k = map(int, input().split(' '))\n\narr = list(map(int, input().split(' ')))\n\narr.sort()\n\ndif = [0] * n\n\nfor i in range(n - 1):\n  dif[i] = arr[i + 1] - arr[i]\n\ni = 0\nj = n - 2\nleft = 1\nright = 1\n\nlast = -1\n\nwhile(k > 0 and i <= j):\n  if(dif[i]) == 0:\n    left += 1\n    i += 1\n    continue\n  if(dif[j]) == 0:\n    right += 1\n    j -= 1\n    continue\n\n  if(i == j):\n    last = i\n\n  if(left <= right):\n    difToSubstract = min(dif[i], k // left)\n\n    if(difToSubstract == 0):\n      k = 0\n      break\n\n    k -= left * difToSubstract\n    dif[i] -= difToSubstract\n  else:\n    difToSubstract = min(dif[j], k // right)\n\n    if(difToSubstract == 0):\n      k = 0\n      break\n\n    k -= right * difToSubstract\n    dif[j] -= difToSubstract\n      \nif(i <= j):\n  sol = 0\n\n  for u in range(i, j + 1):\n    sol += dif[u]\n\n  print(sol)\n\nelse:\n  print(dif[last])", "n,k=list(map(int,input().split()))\nli=list(map(int,input().split()))\nd={}\nl=[]\nfor i in li:\n    try:\n        d[i]+=1\n    except KeyError:\n        d[i]=1\n        l.append(i)\nl.sort()\nz=1\na=0\nb=len(l)-1\nwhile k>0:\n    if a==b:\n        z=0\n        break\n    if d[l[a]]>d[l[b]]:\n        s=d[l[b]]*(l[b]-l[b-1])\n        if s<=k:\n            k-=s\n            d[l[b-1]]+=d[l[b]]\n            b-=1\n        else:\n            b1=k//d[l[b]]\n            z=2\n            break\n    else:\n        s=d[l[a]]*(l[a+1]-l[a])\n        if s<=k:\n            k-=s\n            d[l[a+1]]+=d[l[a]]\n            a+=1\n        else:\n            a1=k//d[l[a]]\n            z=3\n            break\n        \nif z==0:\n    print(0)\nelif z==1:\n    print(l[b]-l[a])\nelif z==2:\n    print(l[b]-l[a]-b1)\nelse:\n    print(l[b]-l[a]-a1)\n\n", "n, k = [int(i) for i in input().split(' ')]\na = sorted([int(i) for i in input().split(' ')])\n\nif n == 1:\n    print(0)\n    return\ntot = 0\ni, j = 1, n-2\n\nwhile j - i>=-1:\n    do = i>(n-j-1)\n\n    last = tot\n    tot += i*(a[i]-a[i-1]) if not do else (n - j - 1)*(a[j+1] - a[j])\n\n    if tot >= k:\n\n        if do:\n            a[-1] -= (k - last)//(n-j-1)\n        else:\n            a[0] += (k - last)//i\n        break\n    \n    if do:\n        a[-1] = a[j]\n        j-=1\n    else:\n        a[0] = a[i]\n        i+=1\n\nprint(a[-1] - a[0])", "'''\n    Author : thekushalghosh\n    Team   : CodeDiggers\n'''\nimport sys,math\ninput = sys.stdin.readline\nn,k = map(int,input().split())\na = list(map(int,input().split()))\na.sort()\ni = 1\nwhile i > 0:\n    q = a[-i] - a[i - 1]\n    if (a[i] - a[i - 1]) * i >= k:\n        q = q - (k // i)\n        break\n    k = k + (a[i - 1] * i) - (a[i] * i)\n    q = a[-i] - a[i]\n    if (a[-i] - a[-i - 1]) * i >= k:\n        q = q - (k // i)\n        break\n    k = k + (a[-i - 1] * i) - (a[-i] * i)\n    i = i + 1\n    if not q:\n        break\nprint(q)", "from collections import deque\nn, k = list(map(int, input().split()))\nli = list(map(int, input().split()))\nli.sort()\n# print(li)\ndq = deque()\n\na = li[0]\ncountt = 1\ndistp = -1\nfor i in range(1, len(li)):\n    if li[i] == a:\n        countt += 1\n    else:\n        dq.append([a, countt, distp, li[i]-a])\n        distp = li[i]-a\n        countt = 1\n\n    a = li[i]\n\ndq.append([a, countt, distp, -1])\ndiff = li[-1]-li[0]\n\nwhile k > 0 and diff > 0:\n    if dq[0][1] > dq[-1][1]:  # go from top\n        if k > dq[-1][2] * dq[-1][1]:\n            k -= dq[-1][2] * dq[-1][1]\n            x1 = dq.pop()\n            x2 = dq.pop()\n            dq.append([x2[0], x2[1]+x1[1], x2[2], -1])\n            diff -= x1[0]-x2[0]\n        else:\n            diff -= k // dq[-1][1]\n            k = 0\n    else: # go from bot\n        if k > dq[0][3] * dq[0][1]:\n            k -= dq[0][3] * dq[0][1]\n            x1 = dq.popleft()\n            x2 = dq.popleft()\n            dq.appendleft([x2[0], x2[1]+x1[1], -1, x2[3]])\n            diff -= x2[0]-x1[0]\n        else:\n            diff -= k // dq[0][1]\n            k = 0\n            # print(\"yyyyy\")\n    \n    # print(dq)\n    # print(f\"diff:{diff} k:{k}\")\nprint(diff)\n", "n,k=map(int,input().split())\na=input().split()\nfor i in range(n):\n    a[i]=int(a[i])\na.sort()\nb=[]\ncount=0\nfor i in range(n):\n    if(i==0):\n        count+=1\n        if(i==n-1):\n            b.append([a[i],count])\n    else:\n        if(a[i]==a[i-1]):\n            count+=1\n            if(i==n-1):\n                b.append([a[i],count])\n        else:\n            b.append([a[i-1],count])\n            count=1\n            if(i==n-1):\n                b.append([a[i],count])\nwhile k:\n    if(len(b)==1):break\n    if(b[0][1]<b[len(b)-1][1]):\n        if(k>=(b[1][0]-b[0][0])*b[0][1]):\n            b[1][1]+=b[0][1]\n            k-=(b[1][0]-b[0][0])*b[0][1]\n            b.pop(0)\n        else:\n            b[0][0]+=k//b[0][1]\n            k=0\n    else:\n        if(k>=(b[len(b)-1][0]-b[len(b)-2][0])*b[len(b)-1][1]):\n            b[len(b)-2][1]+=b[len(b)-1][1]\n            k-=(b[len(b)-1][0]-b[len(b)-2][0])*b[len(b)-1][1]\n            b.pop(len(b)-1)\n        else:\n            b[len(b)-1][0]-=k//b[len(b)-1][1]\n            k=0\nprint(b[len(b)-1][0]-b[0][0])            ", "from collections import defaultdict\nfrom itertools import accumulate\nfrom bisect import bisect_left\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = defaultdict(int)\n\nfor u in a:\n\td[u] += 1\n\nc = sorted(d.keys())\n\ncnt = [d[i] for i in c]\nsnt = [i * d[i] for i in c]\n\npc = list(accumulate(cnt))\nsc = list(accumulate(cnt[::-1]))[::-1]\n\nps = list(accumulate(snt))\nss = list(accumulate(snt[::-1]))[::-1]\n\ndef get_high(rest):\n\tl, r = c[0] - 1, c[-1]\n\twhile r - l > 1:\n\t\tmid = (l + r) // 2 + (l + r) % 2\n\t\ti = bisect_left(c, mid)\n\t\tif ss[i] - mid * sc[i] <= rest:\n\t\t\tr = mid\n\t\telse:\n\t\t\tl = mid\n\treturn r\n\ndef calc_ans(low):\n\tif low < c[0]:\n\t\treturn 10 ** 100\n\ti = bisect_left(c, low)\n\tif c[i] != low:\n\t\ti -= 1\n\tif low * pc[i] - ps[i] > k:\n\t\treturn 10 ** 100\n\trest = k - (low * pc[i] - ps[i])\n\thigh = get_high(rest)\n\treturn max(high - low, 0)\n\nl, r = c[0], c[-1]\n\nwhile r - l > 1:\n\tmid = (l + r) // 2\n\tmm = (mid + r) // 2\n\tif calc_ans(mid) <= calc_ans(mm):\n\t\tr = mm\n\telse:\n\t\tl = mid\n\nprint(min(calc_ans(l), calc_ans(r)))\n", "n,k=list(map(int,input().split()))\nl1=list(map(int,input().split()))\nl1.sort()\ni=0\nj=n-1\nleft=1\nright=1\nwhile i<j and k>0:\n    x=l1[i+1]-l1[i]\n    y=l1[j]-l1[j-1]\n    if left==right:\n        if k>=left*x:\n            k-=left*x\n            i+=1\n            left+=1\n        else :\n            l1[i]+=(k)//left\n            break\n    else :\n        if k>=right*y:\n            k-=right*y\n            j-=1\n            right+=1\n        else :\n            l1[j]-=(k)//right\n            break\n\nprint(l1[j]-l1[i])\n", "n, k = list(map(int,input().split()))\nl = list(map(int,input().split()))\nl.sort()\ns = 0\nfor i in range(n):\n\ts += abs(l[i]-l[n//2])\nif s <= k:\n\tprint(0)\nelse:\n\ti = 0\n\twhile True:\n\t\tif i == n - 1:\n\t\t\tbreak\n\t\tif l[i + 1] != l[i]:\n\t\t\tbreak\n\t\ti += 1\n\tp = i\n\tleft = p + 1\n\ti = n - 1\n\t#print(l)################\n\twhile True:\n\t\tif i == 0:\n\t\t\tbreak\n\t\tif l[i - 1] != l[i]:\n\t\t\tbreak\n\t\ti -= 1\n\tkon = i\n\tright = n - kon\n\twhile True:#right <= k or left <= k:\n\t\t#print(p, kon, left, right, k)###############\n\t\tif left <= right:\n\t\t\tif k >= left*(l[p+1]-l[p]):\n\t\t\t\tk -= left*(l[p+1]-l[p])\n\t\t\t\twhile True:\n\t\t\t\t\tp += 1\n\t\t\t\t\tleft += 1\n\t\t\t\t\tif p >= n:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif l[p+1] != l[p]:\n\t\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tprint(l[kon]-l[p]-k//left)\n\t\t\t\tbreak\n\t\telse:\n\t\t\tif k >= right*(l[kon]-l[kon-1]):\n\t\t\t\tk -= right*(l[kon]-l[kon-1])\n\t\t\t\twhile True:\n\t\t\t\t\tkon -= 1\n\t\t\t\t\tright += 1\n\t\t\t\t\tif kon == 0:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif l[kon] != l[kon-1]:\n\t\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tprint(l[kon]-l[p]-k//right)\n\t\t\t\tbreak\t\t\t\n", "# encoding: utf-8\nfrom sys import stdin\n\nn, k = [int(i) for i in stdin.readline().strip().split()]\na = [int(i) for i in stdin.readline().strip().split()]\na.sort()\n\nups = n * [0]\ndowns = n * [0]\n\nfor i in range(0, n - 1):\n    ups[i + 1] = ups[i] + (i + 1) * (a[i + 1] - a[i])\n\nfor i in range(n - 1, 0, -1):\n    downs[i - 1] = downs[i] + (n - i) * (a[i] - a[i - 1])\n\n\ndef find_max(steps):\n    \"\"\"Lowest possible maximum reachable for given number of steps\"\"\"\n    l, r = 0, n - 1\n    x = None\n    while l <= r:\n        m = (l + r) // 2\n        if downs[m] <= steps:\n            x = m\n            # downs[l:m] contains bigger values\n            r = m - 1\n        else:\n            l = m + 1\n\n    value = a[x]\n    if x > 0 and downs[x] < steps:\n        value -= (steps - downs[x]) // (n - x)\n\n    return value\n\n\ndef find_min(steps):\n    l, r = 0, n - 1\n    x = None\n    while l <= r:\n        m = (l + r) // 2\n        if ups[m] <= steps:\n            # ups[m:r] contains bigger values\n            x = m\n            l = m + 1\n        else:\n            r = m - 1\n\n    value = a[x]\n    if x < n:\n        value += (steps - ups[x]) // (x + 1)\n\n    return value\n\n\nbest_diff = a[-1] - a[0]\nfor i in range(n):\n    if ups[i] > k:\n        break\n    min_a = a[i]\n    max_a = find_max(k - ups[i])\n    if max_a <= min_a:\n        best_diff = 0\n        break\n    best_diff = min(best_diff, max_a - min_a)\n\nfor i in range(n - 1, -1, -1):\n    if best_diff == 0:\n        break\n    if downs[i] > k:\n        break\n    max_a = a[i]\n    min_a = find_min(k - downs[i])\n    if min_a >= max_a:\n        best_diff = 0\n        break\n    best_diff = min(best_diff, max_a - min_a)\n\nprint(best_diff)\n", "import sys\nn, k = list(map(int, input().split()))\nnum = [int(x) for x in input().split()]\nnum.sort()\nif (n == 1):\n    print(0)\n    return\npre = 0\npree = num[0]\nlat = n - 1\nlatt = num[n - 1]\npren = 1\nlatn = 1\n\nwhile (k > 0):\n    while (num[pre + 1] == pree and pre + 1 < lat):\n        pre += 1\n        pren += 1\n    while (num[lat - 1] == latt and pre < lat - 1):\n        lat -= 1\n        latn += 1\n    if (pren > k and latn > k): \n        break;\n    if (pree < latt):\n        if (pren < latn):\n            if (pren * (num[pre + 1] - num[pre]) <= k):\n                k -= pren * (num[pre + 1] - num[pre])\n                pre += 1\n                pren += 1\n                pree = num[pre]\n            else: \n                pree += k // pren\n                k %= pren\n        else:\n            if (latn * (num[lat] - num[lat - 1]) <= k):\n                k -= latn * (num[lat] - num[lat - 1])\n                lat -= 1\n                latn += 1\n                latt = num[lat]\n            else:\n                latt -= k // latn\n                k %= latn\n    else:\n        break;\n    \nprint(latt-pree)\n\n", "# encoding: utf-8\nfrom sys import stdin\n\nn, k = [int(i) for i in stdin.readline().strip().split()]\na = [int(i) for i in stdin.readline().strip().split()]\na.sort()\n\ni = 0\nj = n - 1\na_min = a[i]\na_max = a[j]\nwhile i < j:\n    if a[i] == a[i + 1]:\n        i += 1\n        a_min = a[i]\n    elif a[j] == a[j - 1]:\n        j -= 1\n        a_max = a[j]\n    else:\n        if i + 1 <= n - j:\n            required_steps = (a[i + 1] - a[i]) * (i + 1)\n            if required_steps > k:\n                a_min += k // (i + 1)\n                break\n            else:\n                i += 1\n                k -= required_steps\n                a_min = a[i]\n        else:\n            required_steps = (a[j] - a[j - 1]) * (n - j)\n            if required_steps > k:\n                a_max -= k // (n - j)\n                break\n            else:\n                j -= 1\n                k -= required_steps\n                a_max = a[j]\n\nprint(a_max - a_min)\n", "# encoding: utf-8\nfrom sys import stdin\n\nn, k = [int(i) for i in stdin.readline().strip().split()]\na = [int(i) for i in stdin.readline().strip().split()]\na.sort()\n\ni = 0\nj = n - 1\na_min = a[i]\na_max = a[j]\nwhile i < j:\n    if i + 1 <= n - j:\n        required_steps = (a[i + 1] - a[i]) * (i + 1)\n        if required_steps > k:\n            a_min += k // (i + 1)\n            break\n        else:\n            i += 1\n            k -= required_steps\n            a_min = a[i]\n    else:\n        required_steps = (a[j] - a[j - 1]) * (n - j)\n        if required_steps > k:\n            a_max -= k // (n - j)\n            break\n        else:\n            j -= 1\n            k -= required_steps\n            a_max = a[j]\n\nprint(a_max - a_min)\n", "# Never give up. You only get one life and a year. Go for it!\nimport sys\nimport math\n\n\n\n\nn,k=list(map(int,input().split()))\nA=[int(i) for i in input().split()]\n\nA.sort()\n\nl=0\nr=n-1\n\nwhile(l<r and k):\n    temp=((A[l+1]-A[l])*(l+1)+(A[r]-A[r-1])*(n-r))\n    if(k>=temp):\n        k-=temp\n        l+=1\n        r-=1\n\n    else:\n        ans=A[r]-A[l]-(k//(l+1))\n        print(ans)\n        return\n\n\n\n\nprint(0)\n\n", "n,k=map(int,input().strip().split())\na =list(map(int,input().strip().split()))\nfrom collections import deque, Counter\ntemp = Counter(a)\na = deque(sorted(map(lambda x: [x,temp[x]], temp)))\n# print(a)\nwhile( (k>=a[0][1] or k>=a[-1][1] ) and len(a)>1):\n    # forward\n    cf,f,smf = a[0][1], a[0][0], a[1][0]\n    cr,r,smr = a[-1][1], a[-1][0], a[-2][0]\n\n    if(cf < cr):\n        # front should be removed\n        temp = cf*(smf-f)\n        if(temp<=k):\n            k-=temp\n            a.popleft()\n            a[0][1]+=cf\n        else:\n            factor=k//cf\n            temp1 = factor*cf\n            k-=temp1\n            a[0][0]=f+factor\n\n\n\n\n    else:\n        # back should be removed\n        temp = cr*(r-smr)\n        if(temp<=k):\n            k-=temp\n            a.pop()\n            a[-1][1]+=cr\n        else:\n            factor=k//cr\n            temp1 = factor*cr\n            k-=temp1\n            a[-1][0]=r-factor\n\n\nprint(max(a)[0]-min(a)[0])", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\nleft = 1\nright = 1\nwhile 1:\n    if left*(a[left]-a[left-1]) <= k:\n        k -= left*(a[left]-a[left-1])\n        left += 1\n    else:\n        print(a[n-right]-a[left-1]-int(k/left))\n        return\n    if left+right > n:\n        print(0)\n        return\n    if right*(a[n-right]-a[n-1-right]) <= k:\n        k -= right*(a[n-right]-a[n-1-right])\n        right += 1\n    else:\n        print(a[n-right]-a[left-1]-int(k/right))\n        return\n    if left+right > n:\n        print(0)\n        return\n", "import atexit\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\nleft = 1\nright = 1\nwhile 1:\n    if left*(a[left]-a[left-1]) <= k:\n        k -= left*(a[left]-a[left-1])\n        left += 1\n    else:\n        print(a[n-right]-a[left-1]-int(k/left))\n        return\n    if left+right > n:\n        print(0)\n        return\n    if right*(a[n-right]-a[n-1-right]) <= k:\n        k -= right*(a[n-right]-a[n-1-right])\n        right += 1\n    else:\n        print(a[n-right]-a[left-1]-int(k/right))\n        return\n    if left+right > n:\n        print(0)\n        return\n", "'''\nFuad Ashraful Mehmet\nBsc in CSE\nUniversity of Asia Pacific\nDhaka,Bangladesh\n\nproblem:from code forces\n\n\n'''\n# install xampp https://vitux.com/how-to-install-xampp-on-your-ubuntu-18-04-lts-system/\n\n\n\n\nclass Solve():\n    \n    def __init__(self):\n        self.n,self.k=map(int,input().split())\n        self.fuad=list(map(int,input().split()))\n        self.fuad.sort()\n    def FuckCase(self):\n        \n        for i in range(int(self.n/2)):\n            \n            s=(self.fuad[i+1]-self.fuad[i])*(i+1)+(self.fuad[self.n-i-1]-self.fuad[self.n-i-2])*(i+1)\n\n            # print(\"i {} j {} s {} k {}\".format(i,self.n-i-1,s,self.k))\n            if s<=self.k:\n                self.k-=s\n            else:\n                print(self.fuad[self.n-i-1]-self.fuad[i]-int((self.k/(i+1))))\n                return\n\n\n        print(\"0\")\n\n\n\nobj =Solve()\n\nobj.FuckCase()"]