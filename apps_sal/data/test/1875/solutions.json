["# calculate convex of polygon v.\n# v is list of complexes stand for points.\ndef convex(v, eps=1e-8):\n\n    # fetch the seed point\n    v.sort(key=lambda x:(x.real,x.imag))\n    v = v[0:1] + sorted(v[1:], key=lambda x:(x-v[0]).imag/abs(x-v[0]))\n\n    n = 1\n    for i in range(2, len(v)):\n        while n > 1 and ((v[n]-v[n-1])*(v[i]-v[n]).conjugate()).imag>-eps:\n            n -= 1\n        else:\n            n += 1\n            v[n] = v[i]\n\n    v[n+1:] = []\n\n    return v\n\n# calculate the area of a polygon v, anti-clockwise.\n# v is list of complexes stand for points.\ndef area(v):\n    ans = 0\n    for i in range(2, len(v)):\n        ans += ((v[i]-v[i-1])*(v[i-1]-v[0]).conjugate()).imag\n    return ans * 0.5\n\nn = int(input())\nv = [complex(*tuple(map(int, input().split()))) for i in range(0, n)]\n\nw = convex(v)\nn = len(w)\n\nans = 0\n\ndef tri(i, j, k): return abs(((w[i]-w[j])*(w[i]-w[k]).conjugate()).imag) * 0.5\n\nfor i in range(0, n):\n    \n    for j in range(i+2, n):\n\n        if i == 0 and j == n-1: continue\n        \n        l = i + 1\n        r = j\n        while l < r-1:\n            k = l+r>>1\n            if tri(i, j, k) > tri(i, j, k-1):\n                l = k\n            else:\n                r = k\n                \n        s1 = tri(i, j, l)\n\n        l = j - n + 1\n        r = i\n        while l < r-1:\n            k = l+r>>1\n            if tri(i, j, k) > tri(i, j, k-1):\n                l = k\n            else:\n                r = k\n        \n        s2 = tri(i, j, l)\n\n        ans = max(ans, s1 + s2)\n\nif n == 3:\n    for p in v:\n        if not p in w:\n            w.append(p)\n            ans = max(ans, area(w))\n            w.pop()\n        \nprint(ans)\n", "import sys\nc, n = 0, int(input())\nt = list(map(int, sys.stdin.read().split()))\np = [complex(t[i], t[i + 1]) for i in range(0, 2 * n, 2)]\nfor x, i in enumerate(p, 1):\n    for j in p[x:]:\n        a = b = 0\n        for k in p:\n            if k == i or k == j: continue\n            d = (i.real - k.real) * (j.imag - k.imag) - (i.imag - k.imag) * (j.real - k.real)\n            a, b = min(d, a), max(d, b)\n        if a and b: c = max(c, b - a)\nprint(c / 2)", "import sys\ns, n = 0, int(input())\nt = list(map(int, sys.stdin.read().split()))\np = [(t[2 * i], t[2 * i + 1]) for i in range(n)]\nfor x, i in enumerate(p, 1):\n    for j in p[x:]:\n        a = b = 0\n        for k in p:\n            d = (i[0] - k[0]) * (j[1] - k[1]) - (i[1] - k[1]) * (j[0] - k[0])\n            a, b = min(d, a), max(d, b)\n        if a and b: s = max(s, b - a)\nprint(s / 2)", "def cross(x1, y1, x2, y2):\n    return x1 * y2 - x2 * y1\n\ndef gao():\n    n = int(input())\n    x, y = [], []\n    for i in range(n):\n        x1, y1 = input().split(' ')\n        x.append(int(x1))\n        y.append(int(y1))\n\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_left, max_right = 0, 0\n            for k in range(n):\n                if i != k and j != k:\n                    area = cross(x[j] - x[i], y[j] - y[i], x[k] - x[i], y[k] - y[i])\n                    if area > 0:\n                        max_left = max(max_left, area)\n                    elif area < 0:\n                        max_right = max(max_right, -area)\n            if max_left != 0 and max_right != 0:\n                max_area = max(max_area, max_left + max_right)\n\n    print(max_area / 2.)\n\ngao()", "n = int(input())\na = []\narea = 0\nfor i in range(n):\n    a.append([int(i) for i in input().split(' ')])\n\n\ndef get_s(p1, p2, p3):\n    return ((p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])) / 2.0\n\n\nfor i in range(len(a) - 1):\n    for j in range(i + 1, len(a)):\n        positive = 0\n        negative = 0\n        for k in range(len(a)):\n            if k == i or k == j:\n                continue\n            s = get_s(a[i], a[j], a[k])\n            if s > 0:\n                positive = max(positive, s)\n            if s == 0:\n                pass\n            else:\n                negative = min(negative, s)\n        if positive != 0 and negative != 0:\n            area = max(area, positive - negative)\n\nprint(area)\n", "\nn = int(input())\nl = []\n\n\n\n\ndef cross(x1,y1,x2,y2):\n\n    area = x1*y2 - y1*x2\n    return area\n\n\nfor i in range(n):\n    x,y = list(map(int,input().split()))\n    l.append([x,y])\nmax_upper = 0\nmax_lower = 0\nans = 0\nfor i in range(n-1):\n    for j in range(i+1,n):\n        max_upper = 0\n        max_lower = 0\n        for k in range(n):\n          if i!=j and i!=k and j!=k:\n            area = (l[j][0] - l[i][0])*(l[k][1] - l[i][1])-(l[j][1] - l[i][1])*(l[k][0] - l[i][0])\n            # print(area/2)\n            if area>0:\n                if area>max_upper:\n                    max_upper = area\n            else:\n                if -area>max_lower and area!=0:\n                    max_lower = -area\n\n        if max_lower + max_upper > ans and max_lower!=0 and max_upper!=0:\n          ans = max_lower + max_upper\nprint(ans/2)\n\n\n\n", "def convex(p):\n    p.sort(key = lambda x:(x.real, x.imag))\n    p = p[0:1] + sorted(p[1:], key = lambda x:(x-p[0]).imag / abs(x-p[0]))\n    j = 1\n    for i in range(2, len(p)):\n        while j > 1 and ((p[j] - p[j-1]) * (p[i] - p[j]).conjugate()).imag > -(1e-8):\n            j -= 1\n        else:\n            j += 1\n            p[j] = p[i]\n    return p[:j+1]\n\ndef area(p):\n    res = 0\n    for i in range(2, len(p)):\n        res += ((p[i] - p[i-1]) * (p[i-1] - p[0]).conjugate()).imag\n    return res * 0.5\n\ndef tri(i, j, k): \n    return abs(((w[i] - w[j]) * (w[i] - w[k]).conjugate()).imag) * 0.5\n\nn = int(input())\np = [complex(*list(map(int, input().split()))) for i in range(n)]\nw = convex(p)\nn = len(w)\nres = 0\n\nfor i in range(n):    \n    for j in range(i+2, n):\n        if i == 0 and j == n-1: \n            continue\n        l, r = i + 1, j\n        while l < r-1:\n            m = l + r >> 1\n            if tri(i, j, m) > tri(i, j, m-1):\n                l = m\n            else:\n                r = m\n        s1 = tri(i, j, l)\n        l, r = j - n + 1, i\n        while l < r-1:\n            m = l + r >> 1\n            if tri(i, j, m) > tri(i, j, m-1):\n                l = m\n            else:\n                r = m\n        s2 = tri(i, j, l)\n        res = max(res, s1 + s2)\n\nif n == 3:\n    for i in p:\n        if i in w:\n            continue\n        w.append(i)\n        res = max(res, area(w))\n        w.pop()        \n\nprint(res)\n", "import sys\ns, n = 0, int(input())\nt = list(map(int, sys.stdin.read().split()))\np = [(t[2 * i], t[2 * i + 1]) for i in range(n)]\nfor x, i in enumerate(p, 1):\n    for j in p[x:]:\n        a = b = 0\n        for k in p:\n            d = (i[0] - k[0]) * (j[1] - k[1]) - (i[1] - k[1]) * (j[0] - k[0])\n            a, b = min(d, a), max(d, b)\n        if a and b: s = max(s, b - a)\nprint(s / 2)\n"]