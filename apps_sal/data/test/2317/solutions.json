["import sys\nfrom itertools import *\nfrom math import *\ndef solve():\n    n,m,leftbank,rightbank = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    smallx = leftbank\n    leftbest, rightbest, distbest = -100, -100, 100000000\n    for i, bcord, length in zip(count(), b, l):\n        wanty = bcord * smallx / rightbank\n        ll , rr = 0, n - 1\n        while ll < rr:\n            mm = (ll + rr + 1) // 2\n            if a[mm] > wanty: rr = mm - 1\n            else: ll = mm\n        for pos in range(ll - 1, ll + 2):\n            if pos >= 0 and pos < n:\n                first = sqrt(smallx * smallx + a[pos] * a[pos])\n                second = sqrt((rightbank -leftbank)*(rightbank - leftbank) + (bcord - a[pos])*(bcord - a[pos]))\n                totaldist = first + second + length\n                if totaldist < distbest:\n                    distbest = totaldist\n                    leftbest = pos\n                    rightbest = i\n    print(leftbest + 1, rightbest + 1)\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "import sys\nfrom itertools import *\nfrom math import *\ndef solve():\n    n,m,leftbank,rightbank = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    smallx = leftbank\n    leftbest, rightbest, distbest = -100, -100, 100000000\n    for i, bcord, length in zip(count(), b, l):\n        wanty = bcord * smallx / rightbank\n        ll , rr = 0, n - 1\n        while ll < rr:\n            mm = (ll + rr + 1) // 2\n            if a[mm] > wanty: rr = mm - 1\n            else: ll = mm\n        for pos in range(ll - 3, ll + 4):\n            if pos >= 0 and pos < n:\n                first = sqrt(smallx * smallx + a[pos] * a[pos])\n                second = sqrt((rightbank -leftbank)*(rightbank - leftbank) + (bcord - a[pos])*(bcord - a[pos]))\n                totaldist = first + second + length\n                if totaldist < distbest:\n                    distbest = totaldist\n                    leftbest = pos\n                    rightbest = i\n    print(leftbest + 1, rightbest + 1)\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "import sys\nfrom itertools import *\nfrom math import *\ndef solve():\n    n,m,leftbank,rightbank = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    smallx = leftbank\n    leftbest, rightbest, distbest = -1, -1, 100000000\n    for i, bcord, length in zip(count(), b, l):\n        wanty = bcord * smallx / rightbank\n        ll , rr = 0, n - 1\n        while ll < rr:\n            mm = (ll + rr + 1) // 2\n            if a[mm] > wanty: rr = mm - 1\n            else: ll = mm\n        for pos in range(ll, ll + 2):\n            if pos >= 0 and pos < n:\n                first = sqrt(smallx * smallx + a[pos] * a[pos])\n                second = sqrt((rightbank -leftbank)*(rightbank - leftbank) + (bcord - a[pos])*(bcord - a[pos]))\n                totaldist = first + second + length\n                if totaldist < distbest:\n                    distbest = totaldist\n                    leftbest = pos\n                    rightbest = i\n    print(leftbest + 1, rightbest + 1)\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "import sys\nfrom itertools import *\nfrom math import *\ndef solve():\n    n,m,leftbank,rightbank = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    smallx = leftbank\n    smallxsquared = smallx * smallx\n    rightbankminusleftbanksquared = (rightbank -leftbank)*(rightbank - leftbank)\n    leftbest, rightbest, distbest = -1, -1, 100000000\n    for i, bcord, length in zip(count(), b, l):\n        wanty = bcord * smallx / rightbank\n        ll , rr = 0, n - 1\n        while ll < rr:\n            mm = (ll + rr + 1) // 2\n            if a[mm] > wanty: rr = mm - 1\n            else: ll = mm\n        for pos in range(ll, ll + 2):\n            if pos < n:\n                temp = a[pos]\n                first = sqrt(smallxsquared + temp * temp)\n                temp = bcord - a[pos]\n                second = sqrt(rightbankminusleftbanksquared + temp * temp)\n                totaldist = first + second + length\n                if totaldist < distbest:\n                    distbest = totaldist\n                    leftbest = pos\n                    rightbest = i\n    print(leftbest + 1, rightbest + 1)\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "import sys\nfrom itertools import *\nfrom math import *\ndef solve():\n    n,m,leftbank,rightbank = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    smallx = leftbank\n    smallxsquared = smallx * smallx\n    rightbankminusleftbanksquared = (rightbank -leftbank)*(rightbank - leftbank)\n    leftbest, rightbest, distbest = -1, -1, 100000000\n    for i, bcord, length in zip(count(), b, l):\n        wanty = bcord * smallx / rightbank\n        ll , rr = 0, n - 1\n        while ll < rr:\n            mm = (ll + rr + 1) // 2\n            if a[mm] > wanty: rr = mm - 1\n            else: ll = mm\n        for pos in range(ll, ll + 2):\n            if pos < n:\n                first = sqrt(smallxsquared + a[pos] * a[pos])\n                second = sqrt(rightbankminusleftbanksquared + (bcord - a[pos]) * (bcord - a[pos]))\n                totaldist = first + second + length\n                if totaldist < distbest:\n                    distbest = totaldist\n                    leftbest = pos\n                    rightbest = i\n    print(leftbest + 1, rightbest + 1)\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "import sys\nfrom itertools import *\nfrom math import *\ndef solve():\n    n,m,leftbank,rightbank = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    smallx = leftbank\n    smallxsquared = smallx * smallx\n    rightbankminusleftbanksquared = (rightbank -leftbank)*(rightbank - leftbank)\n    leftbest, rightbest, distbest = -1, -1, 100000000\n    ll = 0\n    for i, bcord, length in zip(count(), b, l):\n        wanty = bcord * smallx / rightbank\n        while ll < n and a[ll] <= wanty: ll+=1\n        for pos in range(ll - 1, ll + 1):\n            if pos >= 0 and pos < n:\n                first = sqrt(smallxsquared + a[pos] * a[pos])\n                second = sqrt(rightbankminusleftbanksquared + (bcord - a[pos]) * (bcord - a[pos]))\n                totaldist = first + second + length\n                if totaldist < distbest:\n                    distbest = totaldist\n                    leftbest = pos\n                    rightbest = i\n    print(leftbest + 1, rightbest + 1)\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "import sys\nfrom itertools import *\nfrom math import *\ndef solve():\n    n,m,leftbank,rightbank = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    smallx = leftbank\n    smallxsquared = smallx * smallx\n    rightbankminusleftbanksquared = (rightbank -leftbank)*(rightbank - leftbank)\n    leftbest, rightbest, distbest = -1, -1, 100000000\n    ll = 0\n    for i, bcord, length in zip(count(), b, l):\n        wanty = bcord * smallx / rightbank\n        while ll < n and a[ll] <= wanty: ll+=1\n        for pos in range(ll - 1, ll + 1):\n            if pos >= 0 and pos < n:\n                first = sqrt(smallxsquared + a[pos] * a[pos])\n                second = sqrt(rightbankminusleftbanksquared + (bcord - a[pos]) * (bcord - a[pos]))\n                totaldist = first + second + length\n                if totaldist < distbest:\n                    distbest = totaldist\n                    leftbest = pos\n                    rightbest = i\n    print(leftbest + 1, rightbest + 1)\n\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "__author__ = 'Michael Ilyin'\n\nimport math\n\n# debug = True\ndebug = False\n\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt(math.pow(math.fabs(x1 - x2), 2) + math.pow(math.fabs(y1 - y2), 2))\n\n\ndef get_y(x1, y1, x2, y2, x):\n    return (((x - x1) * (y2 - y1)) / (x2 - x1)) + y1\n\nif debug:\n    with open(\"input.txt\", \"r\") as inp:\n        firstLine = inp.readline()\n        secondLine = inp.readline()\n        thirdLine = inp.readline()\n        fourthLine = inp.readline()\nelse:\n    firstLine = input()\n    secondLine = input()\n    thirdLine = input()\n    fourthLine = input()\n\nfirst = firstLine.split()\nn = float(first[0])\nm = float(first[1])\na = float(first[2])\nb = float(first[3])\n\nA = [float(x) for x in secondLine.split()]\nB = [float(x) for x in thirdLine.split()]\nL = [float(x) for x in fourthLine.split()]\n\nif debug:\n    print(A)\n    print(B)\n    print(L)\n\noptimalLen = float(\"inf\")\noptimalBIdx = -1\nfor i, bi in enumerate(B):\n    d = dist(0, 0, b, bi) + L[i]\n    if d <= optimalLen:\n        optimalLen = d\n        optimalBIdx = i\n\nif debug:\n    print(optimalBIdx + 1, optimalLen)\n\nintersectY = get_y(0, 0, b, B[optimalBIdx], a)\n\nif debug:\n    print(intersectY)\n\npointDist = float(\"inf\")\noptimalAIdx = -1\nfor i, ai in enumerate(A):\n    d = dist(a, ai, a, intersectY)\n    if d < pointDist:\n        pointDist = d\n        optimalAIdx = i\n\nif debug:\n    print(optimalAIdx + 1, pointDist)\n\noptimalLen = float(\"inf\")\noptimalBIdx = -1\nfor i, bi in enumerate(B):\n    d = dist(a, A[optimalAIdx], b, bi) + L[i]\n    if d <= optimalLen:\n        optimalLen = d\n        optimalBIdx = i\n\nprint(optimalAIdx + 1, optimalBIdx + 1)", "from math import sqrt,fabs\n\ndef dist(x1, y1, x2, y2):\n    return sqrt(pow(abs(x1 - x2), 2) + pow(abs(y1 - y2), 2))\n\ndef calcOptimumRightPoint(startX, startY):\n    l = float(\"inf\")\n    idx = -1\n    for i in range(len(B)):\n        d = dist(startX, startY, b, B[i]) + L[i]\n        if d <= l:\n            l = d\n            idx = i\n    return idx\n\nn,m,a,b = [int(x) for x in input().split()]\n\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nL = [int(x) for x in input().split()]\n\noptimumRightPoint = calcOptimumRightPoint(0,0)\n\nintersectLeft = (a * B[optimumRightPoint]) / b\n\nl = float(\"inf\")\noptimumLeftPoint = -1\nfor i in range(len(A)):\n    if fabs(intersectLeft-A[i]) < l:\n        l = fabs(intersectLeft-A[i])\n        optimumLeftPoint = i\n\noptimumRightPoint = calcOptimumRightPoint(a, A[optimumLeftPoint])\n\nprint(optimumLeftPoint + 1, optimumRightPoint + 1)", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\nn, m, a, b = mints()\nA = list(mints())\nB = list(mints())\nl = list(mints())\nj = -1\nr = (1e100,-1,-1)\nfor i in range(m):\n\twhile not((j == -1 or a*B[i]-b*A[j] >= 0) \\\n\t\tand (j+1 == n or a*B[i]-b*A[j+1] < 0)):\n\t\tj += 1\n\t#print(j)#,a*B[i]-b*A[j],a*B[i]-b*A[j+1])\n\tif j != -1:\n\t\tr = min(r,(l[i]+sqrt(a*a+A[j]*A[j])+sqrt((b-a)**2+(B[i]-A[j])**2),j,i))\n\tif j+1 != n:\n\t\tr = min(r,(l[i]+sqrt(a*a+A[j+1]*A[j+1])+sqrt((b-a)**2+(B[i]-A[j+1])**2),j+1,i))\nprint(r[1]+1,r[2]+1)", "import sys\n\ndef pro():\n\treturn sys.stdin.readline().strip()\n\ndef rop():\n\treturn map(int, pro().split())\n\ndef main():\n\ts = list(rop())\n\ta = list(rop())\n\tq = list(rop())\n\to = list(rop())\n\tp = -1\n\tt = (1e100, -1, -1)\n\tfor i in range(s[1]):\n\t\twhile not((p == - 1 or s[2] * q[i] - s[3] * a[p] >= 0)\n\t\t\tand (p + 1 == s[0] or s[2] * q[i] - s[3] * a[p+1] < 0)):\n\t\t\tp += 1\n\t\tif p != -1:\n\t\t\tt = min(t, (o[i] + (s[2] ** 2 + a[p] ** 2) ** 0.5 + ((s[3] - s[2]) ** 2 + (q[i] - a[p]) ** 2) ** 0.5, p, i))\n\t\tif p + 1 != s[0]:\n\t\t\tt = min(t, (o[i] + (s[2] ** 2  + a[p + 1] ** 2) ** 0.5 + ((s[3] - s[2]) ** 2 + (q[i] - a[p + 1]) ** 2) ** 0.5, p + 1, i))\n\tprint(t[1] + 1, t[2] + 1)\n\nmain()"]