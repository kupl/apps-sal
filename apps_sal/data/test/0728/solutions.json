["n=int(input())\na=list(map(int,input().split()))\nb=0\na[1:]=sorted(a[1:])\nwhile a[0]<=a[-1]:\n    a[-1]-=1\n    a[0]+=1\n    b+=1\n    a[1:]=sorted(a[1:])\nprint(b)\n", "#Brute\n\nn = int(input())\na = [int(i) for i in input().split()]\np = a[0]\na = a[1:]\nw = 0\n\nwhile p <= max(a):\n    p += 1\n    q = max(a)\n    a.remove(q)\n    a.append(q-1)\n    w += 1\n\nprint(w)", "n = int(input())\na = list(map(int, input().split()))\nq = a.pop(0)\na.sort()\nsum = 0\nwhile q <= a[-1]:\n    a[-1] -= 1\n    a.sort()\n    q += 1\n    sum += 1\nprint(sum)\n\n\n    \n", "n = int(input())\na = list(map(int, input().split()))\nb = a[1:]\nm = max(b)\nans = 0\nmi = b.index(max(b))\nwhile a[0] <= m:\n    b[mi] -= 1\n    ans += 1\n    a[0] += 1\n    m = max(b)\n    mi = b.index(max(b))\nprint(ans)\n", "#In the name of Allah\n\nfrom sys import stdin, stdout\ninput = stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\nv = a[0]\na = sorted(a[1:], reverse = True)\nans = 0\n\nif len(a) == 1:\n         a += [0]\n\nwhile v <= a[0]:\n         v += 1\n         ans += 1\n         a[0] -= 1\n         if a[0] < a[1]:\n                  a.sort(reverse = True)\n                  \nstdout.write(str(ans))\n", "def check(m, a):\n    for i in range(1, len(a)):\n        if a[i] >= m:\n            return True\n    return False\n\nn = int(input())\na = list(map(int, input().split()))\nms = a[0]\nans = 0\nwhile check(a[0], a):\n    pos = a[1:].index(max(a)) + 1\n    a[pos] -= 1\n    a[0] += 1\n    ans += 1\nprint(ans)\n", "#!/usr/bin/env python\n# 574A_bear.py - Codeforces.com 574A Bear program by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Bear Class\n###############################################################################\n\n\nclass Bear:\n    \"\"\" Bear representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        self.n = int(uinput())\n\n        # Reading a single line of multiple elements\n        self.nums = list(map(int, uinput().split()))\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        lamak = self.nums[0]\n        srt = sorted(self.nums[1:])\n        result = 0\n\n        while lamak <= srt[-1]:\n            srt[-1] -= 1\n            lamak += 1\n            result += 1\n            srt = sorted(srt)\n\n        return str(result)\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Bear class testing \"\"\"\n\n        # Constructor test\n        test = \"5\\n5 1 11 2 8\"\n        d = Bear(test)\n        self.assertEqual(d.n, 5)\n        self.assertEqual(d.nums, [5, 1, 11, 2, 8])\n\n        # Sample test\n        self.assertEqual(Bear(test).calculate(), \"4\")\n\n        # Sample test\n        test = \"4\\n1 8 8 8\"\n        self.assertEqual(Bear(test).calculate(), \"6\")\n\n        # Sample test\n        test = \"2\\n7 6\"\n        self.assertEqual(Bear(test).calculate(), \"0\")\n\n        # My tests\n        test = \"4\\n0 1 1 1\"\n        self.assertEqual(Bear(test).calculate(), \"2\")\n\n        # Time limit test\n        self.time_limit_test(100)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \"\\n\"\n        test += \"0 \"\n        nums = [1000 for i in range(nmax-1)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Bear(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Bear().calculate())\n\n__starting_point()", "import heapq\n\nn = int(input())\nvotes = [-int(e) for e in input().split()]\nlimak = -votes[0]\nvotes = votes[1:]\nheapq.heapify(votes)\nans = 0\n\nwhile limak <= -votes[0]:\n    cur = heapq.heappop(votes)\n    cur += 1\n    limak += 1\n    ans += 1\n    heapq.heappush(votes, cur)\n\nprint(ans)", "from sys import stdin, stdout\ninput = stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\nl = a[0]\nans = 0\nops = a[1:]\nops = sorted(ops, reverse=True)\nmax_op = ops[0]\n\nwhile l <= max_op:\n  for i,el in enumerate(ops):\n      if el == max_op:\n        ops[i] -= 1\n        ans += 1\n        l += 1\n        if l > max_op:\n            break\n  max_op = max(ops)\n\nstdout.write(str(ans))", "n = int(input())\narr = list(map(int, input().split()))\nst = arr[0]\nind = arr.index(max(arr))\nwhile (arr[0] < max(arr[1:])):\n\tarr[ind] -= 1\n\tarr[0] += 1\n\tind = arr.index(max(arr))\nif (arr[0] == max(arr[1:])):\n\tk = (arr[0] + 1)\nelse:\n\tk = (arr[0])\nprint(k - st)", "n = int(input())\nc = list(map(int, input().split()))\ncount = 0\nwhile True:\n    maxx = c[0]\n    point = 0\n    for i in range(len(c)):\n        if c[i] >= maxx:\n            maxx = c[i]\n            point = i\n    if point != 0:\n        c[0] += 1\n        c[point] -= 1\n        count += 1\n    else:\n        break\nprint(count)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\nn   = int(input())\nA   = [int(i) for i in input().split()]\n\nstart = time.time()\n\nl0  = A[0]\nl   = A[0]\nA   = A[1:]\nm   = max(A)\n\nwhile l <= m:\n    l += 1\n    A[A.index(m)] -= 1\n    m = max(A)\n\nprint(l-l0)\nfinish = time.time()\n#print(finish - start)\n", "n = int(input())\narr = list(map(int, input().split()))\nmishka = arr[0]\narr[0] = -1\n\nans = 0\n\nwhile(mishka < max(arr) and mishka != max(arr)):\n    mishka += 1\n    arr[arr.index(max(arr))] = max(arr) - 1\n    ans += 1\n\nif(mishka == max(arr)):\n    ans += 1\n\nprint(ans)", "N = int(input())\nvotes = [int(x) for i, x in enumerate(input().split())]\nmy = votes[0]\nold = my\nvotes = sorted(votes[1:], key=lambda x: -x)\nwhile my <= votes[0]:\n    votes[0] -= 1\n    my += 1\n    i = 0\n    while i + 1 < len(votes) and votes[i] < votes[i + 1]:\n        votes[i], votes[i + 1] = votes[i + 1], votes[i]\n        i += 1\nprint(my - old)\n", "import heapq\nn=int(input())\na=list(map(int,input().split()))\nb=a[0]\na=a[1:]\nfor i in range(n-1):\n    a[i]=-a[i]\nheapq.heapify(a)\nans=0\nwhile(True):\n    cur=heapq.heappop(a)\n    cur=-cur\n    if cur<b:\n        break\n    ans+=1\n    b+=1\n    cur-=1\n    cur=-cur\n    heapq.heappush(a,cur)\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split(\" \")))\nl = a[0]\nc = a[1:]\nresult = 0\nwhile(True):\n    c.sort(reverse=True)\n    if l > c[0]:\n        break\n    else:\n        l += 1\n        c[0] -= 1\n        result+=1\n\nprint(result)\n    \n", "N = int(input())\nx = [int(i) for i in input().split()]\n\nimport operator\niters = 0\n\nwhile True:\n    i, v = max(enumerate(x[1:]), key=operator.itemgetter(1))\n    if x[0] > max(x[1:]):\n        print(iters)\n        break\n    x[i + 1] -= 1\n    x[0] += 1\n    iters += 1\n", "n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nwhile max(a[1:]) >= a[0]:\n    i = 0\n    for j in range(len(a)):\n        if a[j] == max(a):\n            i = j\n    a[i] -= 1\n    a[0] += 1\n    cnt += 1\nprint(cnt)\n", "n = int(input())\ncand = [int(i) for i in input().split()]\nopp = cand[1:]\nopp.sort()\nlemak = cand[0]\nresult = 0\nwhile lemak <= opp[-1]:\n    lemak +=1 \n    opp[-1] -= 1\n    result += 1\n    opp.sort()\nprint(result)", "n = int(input())\na = list(map(int, input().split()))\n\nlimak = a[0]\na = a[1:]\n\nc = [0] * (1001)\nfor votes in a:\n    c[votes] += 1\n\nans = 0\ncur_max = max(a)\nwhile limak <= cur_max:\n    limak += 1\n    ans += 1\n    c[cur_max] -= 1\n    c[cur_max - 1] += 1\n    if c[cur_max] == 0:\n        cur_max -= 1\n    \nprint(ans)", "x = int(input(''))\n\nrida = input('')\n\nrida = rida.split()\nnrs = list(map(int, rida))\n\ncount = nrs.pop(0)\nstartcount = count\n\nwhile count <= max(nrs):\n    ind = nrs.index(max(nrs))\n    nrs[ind] = nrs[ind] - 1\n    count = count + 1\n\n\nprint(str(count - startcount))\n    \n\n\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# AUTHOR: haya14busa\nimport sys\nimport io\n\nfrom collections import Counter\n\ndef solve(n, vs):\n    # vs: votes\n    assert 2 <= n <= 1000\n    # Limak's vote is vs[0]\n    for v in vs:\n        assert 1 <= v <= 1000\n\n    # limak's vote, rest's votes\n    lv, rvs = vs[0], vs[1:]\n    cnt = 0\n\n    votes = Counter(rvs)\n    max_vote = max(rvs)\n\n    while lv <= max_vote:\n        votes[max_vote] -= 1\n        votes[max_vote - 1] += 1\n        if votes[max_vote] == 0:\n            max_vote -= 1\n        lv += 1\n        cnt += 1\n\n    return cnt\n\n\ndef getinput():\n    def getint():\n        return int(input())\n\n    def getints_line():\n        return list(map(int, input().split(' ')))\n\n    def getints(n):\n        return [getint() for _ in range(n)]\n\n    def getints_lines(n):\n        return [getints_line() for _ in range(n)]\n    return [getint(), getints_line()]\n\n\ndef iosolve():\n    return str(solve(*getinput()))\n    # return 'YES' if solve(*getinput()) else 'NO' # for boolean output\n    # return '\\n'.join(map(str, solve(*getinput()))) # for multiple line output\n\n\ndef main():\n    if sys.stdin.isatty():\n        test()\n    stdin_lines = getstdin_lines()\n    sys.stdin = io.StringIO('\\n'.join(stdin_lines))\n    if stdin_lines:\n        print(iosolve())\n    else:\n        test()\n\n\ndef test():\n    IO_TEST_CASES = [\n\n        (\n            # INPUT\n            '''\\\n5\n5 1 11 2 8\n            ''',\n            # EXPECT\n            '''\\\n4\n            '''\n        ),\n\n        (\n            # INPUT\n            '''\\\n4\n1 8 8 8\n            ''',\n            # EXPECT\n            '''\\\n6\n            '''\n        ),\n\n        (\n            # INPUT\n            '''\\\n2\n7 6\n            ''',\n            # EXPECT\n            '''\\\n0\n            '''\n        ),\n\n    ]\n\n    # List[(List[arg for solve()], expect)]\n    TEST_CASES = [\n        # ([], None),\n    ]\n\n    # You do need to see below\n    import unittest  # to save memory, import only if test required\n    import sys\n    import io\n\n    class Assert(unittest.TestCase):\n        def equal(self, a, b):\n            self.assertEqual(a, b)\n\n        def float_equal(self, actual, expect, tolerance):\n            self.assertTrue(expect - tolerance < actual < expect + tolerance)\n\n    art = Assert()\n\n    for inputs, expect in TEST_CASES:\n        art.equal(solve(*inputs), expect)\n\n    for stdin, expect in IO_TEST_CASES:\n        sys.stdin = io.StringIO(stdin.strip())\n        art.equal(iosolve(), expect.strip())\n        # art.float_equal(float(iosolve()), float(expect.strip()), 10 ** -6)\n\n\ndef getstdin_lines():\n    stdin = []\n    while 1:\n        try:\n            stdin.append(input())\n        except EOFError:\n            break\n    return stdin\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def check(n, lst, lk):\n    lst[0] += lk\n    for i in range(1, n):\n        if lst[i] >= lst[0]:\n            lk -= lst[i] - lst[0] + 1\n    if lk >= 0:\n        return True\n    return False\nn = int(input())\nlst = list(map(int, input().split()))\nleft = -1\nright = 100000\nwhile left + 1 < right:\n    middle = (left + right) // 2\n    if check(n, lst.copy(), middle):\n        right = middle\n    else:\n        left = middle\nprint(right)\n            \n", "n = int(input())\na = list(map(int, input().split()))\ni = -1\nk = 0\nlim = a[0]\na[0] = 0\na = sorted(a)\nn -= 1\nwhile lim <= a[-1]:\n    while lim <= a[-1] and a[-1] >= a[-2]:\n        lim += 1\n        a[-1] -= 1\n        k += 1\n    while i > -n and a[i] < a[i - 1]:\n        a[i], a[i - 1], i = a[i - 1], a[i], i - 1\n    i = -1\nprint(k)", "s = input()\nl, *v = (int(x) for x in input().split())\nv.sort(reverse=True)\ncount = 0\nwhile l <= v[0]:\n\tif len(v) == 1 or v[0] > v[1]:\n\t\tcount += 1\n\t\tl += 1\n\t\tv[0] -= 1\n\telse:\n\t\tcount += 1\n\t\tl += 1\n\t\tv[0] -= 1\n\t\tv.sort(reverse=True)\nprint(count)"]