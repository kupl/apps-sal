["s = input()\n\nx = int(s[0] + s[2] + s[4] + s[3] + s[1])\nprint(str(x**5)[-5:])", "import sys\ndef fact(n):\n\tret = 1\n\tfor x in range(1, n + 1):\n\t\tret = ret * x\n\treturn ret\n\ndef C(n, k):\n\treturn fact(n) // (fact(k) * (fact(n - k)))\n\ndef get(n, pos):\n\twhile (pos > 0):\n\t\tn //= 10\n\t\tpos -= 1\n\treturn n % 10\nn = int(input())\nk = get(n, 4)\nk = k * 10 + get(n, 2)\nk = k * 10 + get(n, 0)\nk = k * 10 + get(n, 1)\nk = k * 10 + get(n, 3)\nk = k ** 5\nq = (k % 100000)\na = []\nfor x in range(5):\n\ta.append(q % 10)\n\tq //= 10\nfor x in reversed(a):\n\tprint(x, end=\"\")\n", "n = input()\nn = int(n[0] + n[2] + n[4] + n[3] + n[1])\nprint(str((n ** 5) % 100000).zfill(5))\n", "s = input()\nn = int(s[0] + s[2] + s[4] + s[3] + s[1])\nprint(str(n ** 5)[-5:])", "n = input()\nn = n[0] + n[2] + n[4] + n[3] + n[1]\n\nn = str(int(n) ** 5 % 100000)\nprint ('0' * (5 - len(n)) + n)", "a, b, c, d, e = list(map(int, input()))\nn = a*10000 + c*1000 + e*100 + d*10 + b\nprint(str(n**5)[-5:])\n\n", "s = input()\ns = s[0] + s[2] + s[4] + s[3] + s[1]\nprint(str(pow(int(s), 5, 100000)).rjust(5, '0'))", "import sys\n\n\ndef fact(k):\n    return k ** 2 * (k - 1) ** 2 * (k - 2) ** 2 * (k - 3) ** 2 * (k - 4) ** 2\n\n\ns = input()\n\ns1 = s[0] + s[2] + s[4] + s[3] + s[1]\n\nn = int(s1)\n\nk = n ** 5\n\ns = str(k % 100000)\n\nwhile len(s) < 5:\n    s = '0' + s\n\nprint(s)\n", "from functools import reduce\nfrom math import factorial\nn = input()\nm = int(''.join((n[0], n[2], n[4], n[3], n[1])))\nprint('{:0>5d}'.format((m**5)%100000))\n", "n2 = input()\nn = \"\"\nn += n2[0]\nn += n2[2]\nn += n2[4]\nn += n2[3]\nn += n2[1]\nn = int(n)\nn = str(n**5)\nprint(n[len(n)-5:])\n", "n=input()\n\nn=n[0]+n[2]+n[4]+n[3]+n[1]\n\nx=str(int(n)**5)[-5:]\n\nprint(x)\n", "def __starting_point():\n\n    s = [c for c in input()]\n    ss =s[0]+s[2]+s[4]+s[3]+s[1]\n    num = int(ss)\n\n    print(str(num**5)[-5:])\n__starting_point()", "def main():\n    x1, x2, x3, x4, x5 = input()\n    x1, x2, x3, x4, x5 = int(x1), int(x3), int(x5), int(x4), int(x2)\n    z = x5 + 10 * (x4 + 10 * (x3 + 10 * (x2 + 10 * x1)))\n    print(str(pow(z, 5, 100000)).zfill(5))\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nn = input()\narr = [int(i) for i in n]\nn = int(arr[0])*10000+int(arr[2])*1000+int(arr[4])*100+int(arr[3])*10+int(arr[1])\nn = (n**5) % 100000\nprint('%05d' % n)\n", "st = input().strip()\nst = st[0] + st[2] + st[4] + st[3] + st[1]\nst = int(st)**5\nst %= 100000\nprint(str(st).zfill(5))", "a,b,c,d,e,*x=input()\ns=str(pow(int(a+c+e+d+b),5,100000))\nprint(s.rjust(5,'0'))\n", "n = int(input())\na1 = n // 10 ** 4\na2 = (n // 10 ** 3) % 10\na3 = (n // 10 ** 2) % 10\na4 = (n // 10) % 10\na5 = n % 10\nm = str((a1 * 10**4 + a3 * 10**3 + a5 * 10 ** 2 + a4 * 10 + a2) ** 5 % 100000)\nm = \"0\" * (5 - len(m)) + m\nprint(m)", "s = input()\nt = s[0] + s[2] + s[4] + s[3] + s[1]\nprint(str(int(t)**5)[-5:])\n", "n = input()\n\na = n[0]\nb = n[1]\nc = n[2]\nd = n[3]\ne = n[4]\n\nn = a+c+e+d+b\nn = int(n)\n\nans = (n**5)%100000\n\nif(ans<10): ans = \"0000\" + str(ans)\nelif(ans<100): ans = \"000\" + str(ans)\nelif(ans<1000): ans = \"00\" + str(ans)\nelif(ans<10000): ans = \"0\" + str(ans)\n\nprint(ans)\n", "n = input()\ny = int(n[0] + n[2] + n[4] + n[3] + n[1])\nt =(y ** 5) % 100000\nprint(str(t).zfill(5))", "import re, sys, string, operator, functools, fractions, collections\nsys.setrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda x=' ': list(map(int,input().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\nmod=int(1e9+7)\neps=1e-6\n#################################################\nn=RS()[0]\ns=int(n[0]+n[2]+n[4]+n[3]+n[1])\nprint(\"%05d\"%(pow(s,5,100000)))\n", "n = [letter for letter in input()]\nnew = int(n[0] + n[2] + n[4] + n[3] + n[1]) ** 5 % 100000\nk = len(str(new))\nprint('0' * (5 - k), new, sep = '')\n", "import sys\n\nn = sys.stdin.readline()\nm = n[0] + n[2] + n[4] + n[3] + n[1]\nm = int(m)\nm = m ** 5\nm = str(m % 100000)\n\nwhile len(m) < 5:\n    m = '0' + m\n\nprint(m)", "n = int(input())\nm = (n // 10000) * 10000 + ((n // 100) % 10) * 1000 + (n % 10) * 100 + ((n // 10) % 10) * 10 + ((n // 1000) % 10)\nk = m ** 5\nprint(format((k % 100000), '05d'))", "n = input()\nn = int(n[0] + n[2] + n[4] + n[3] + n[1])\nans = (n ** 5) % (10 ** 5)\nans = (5 - len(str(ans))) * '0' + str(ans)\nprint(ans)\n"]