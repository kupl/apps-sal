["# cook your dish here\nn,p = map(int,input().split())\ns = input()\n\nd=s.count('d')\nu = s.count('u')\n\n# c = 1\n# l = 1\n# for i in range(1,n):\n    \n\nif(d<=p or u<=p):\n    print(n)\nelse:\n    if(d>=u):\n        c = 0\n        l = 0\n        i = 0\n        ii = -1\n        pp = p\n        while(i<n):\n            if(s[i] == 'u' and ii == -1):\n                ii = i\n            if(pp == 0 and s[i] == 'u'):\n                c = max(c,l)\n                i = ii\n                ii = -1\n                l = -1\n                pp = p\n            elif(s[i]=='u'):\n                pp-=1\n            # print(l,i,ii)\n            i += 1\n            l += 1\n        print(max(c,l))\n    else:\n        c = 0\n        l = 0\n        i = 0\n        ii = -1\n        pp = p\n        while(i<n):\n            if(s[i] == 'd' and ii == -1):\n                ii = i\n            if(pp == 0 and s[i] == 'd'):\n                c = max(c,l)\n                i = ii\n                ii = -1\n                l = -1\n                pp = p\n            elif(s[i]=='d'):\n                pp-=1\n            # print(l,i,ii)\n            i += 1\n            l += 1\n        print(max(c,l))", "N, P = map(int, input().split())\nS = [i == 'd' for i in input().strip()]\n\ndef calcMax(ar):\n\tj = c = ans = 0\n\tfor i in range(len(ar)):\n\t\twhile j < len(ar) and c + ar[j] <= P:\n\t\t\tc += ar[j]\n\t\t\tj += 1\n\t\tans = max(ans, j - i)\n\t\tc -= ar[i]\n\treturn ans\n\nprint(max(calcMax(S), calcMax([not _ for _ in S])))", "# cook your dish here\ndef findLen(A, n, k, ch): \n\tmaxlen = 1\n\tcnt = 0\n\tl = 0\n\tr = 0\n\n\t# traverse the whole string \n\twhile r < n: \n\n\t\t# if character is not same as ch \n\t\t# increase count \n\t\tif A[r] != ch: \n\t\t\tcnt += 1\n\n\t\t# While count > k traverse the string \n\t\t# again until count becomes less than k \n\t\t# and decrease the count when characters \n\t\t# are not same \n\t\twhile cnt > k: \n\t\t\tif A[l] != ch: \n\t\t\t\tcnt -= 1\n\t\t\tl += 1\n\n\t\t# length of substring will be rightIndex - \n\t\t# leftIndex + 1. Compare this with the \n\t\t# maximum length and return maximum length \n\t\tmaxlen = max(maxlen, r - l + 1) \n\t\tr += 1\n\n\treturn maxlen \n\n# function which returns \n# maximum length of substring \ndef answer(A, n, k): \n\tmaxlen = 1\n\tfor i in range(26): \n\t\tmaxlen = max(maxlen, findLen(A, n, k, \n\t\t\t\t\t\t\tchr(i + ord('A')))) \n\t\tmaxlen = max(maxlen, findLen(A, n, k, \n\t\t\t\t\t\t\tchr(i + ord('a')))) \n\n\treturn maxlen \n\nn,k=map(int, input().split())\ns=str(input())\nprint(answer(s, n, k))"]