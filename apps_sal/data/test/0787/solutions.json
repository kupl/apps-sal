["import sys\n\n#fin = open(\"input.txt\", 'r')\nfin = sys.stdin\n\nn = int(fin.readline())\ns = fin.readline().strip()\ni = 1\ncur = 0\nused = {c: False for c in \"qwertyuiopasdfghjklzxcvbnm\"}\nstarts = [0]\nused[s[0]] = True\nwhile i < len(s) and cur < n - 1:\n    if not used[s[i]]:\n        used[s[i]] = True\n        starts.append(i)\n        cur += 1\n    i += 1\nif cur < n - 1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    starts.append(len(s))\n    for i in range(len(starts) - 1):\n        print(s[starts[i]:starts[i + 1]])\n", "N = int(input())\nq = input()\nif len(set(q)) >= N:\n    print('YES')\n    chars = list(set(q))\n    start = False\n    for index,c in enumerate(q):\n        if c in chars:\n            if start is not False:\n                print(q[start:index])\n            N -= 1\n            chars.remove(c)\n            if N == 0:\n                chars = []\n            start = index\n    else:\n        print(q[start:])\n    \nelse:\n    print('NO')\n\n", "n = int(input())\nletters = set([])\npos = []\ns = input()\ncounter = 0\nfor c in s:\n    if not c in letters:\n        letters.add(c)\n        pos.append(counter)\n        if len(letters)==n:\n            break\n    counter+=1\nif len(letters) != n:\n    print(\"NO\")\n    return\nelse:\n    print(\"YES\")\n    pos.append(len(s))\n    for i in range(len(pos)-1):\n        print(s[pos[i]:pos[i+1]])", "import time\nimport string\nclass Profiler(object):\n    def __enter__(self):\n        self._startTime = time.time()\n\n    def __exit__(self, type, value, traceback):\n        print(\"Elapsed time: {:.3f} sec\".format(time.time() - self._startTime))\n\n\nk = int(input())\ns = input()\n#b = list(map(int, input().split()))\n\nm = {}\nfor el in string.ascii_lowercase:\n    m[el] = 0\nif len(set(s)) < k:\n    print('NO')\nelse:\n    i = 0\n    t = []\n    while i < len(s):\n        if k == 1:\n            t.append(s[i:])\n            break\n        if m[s[i]] == 0:\n            m[s[i]] = 1\n            tmp = s[i]\n            i += 1\n            while i < len(s) and m[s[i]]:\n                tmp += s[i]\n                i += 1\n            t.append(tmp)\n            k -= 1\n        else:\n            i += 1\n    print('YES')\n    for el in t:\n        print(el)\n\n'''\nfin = open(\"input.txt\")\nfout = open(\"output.txt\", \"w\")\n\nn = int(fin.readline())\ncases = list()\n\nfor i in range(n):\n    fin.readline()\n    cases.append(list(fin.readline().split()))\n\nfor i in range(1, len(cases)+1):\n    cur_min = 1001\n    added_min = 0\n    lst = list(map(int, cases[i-1]))\n    while max(lst) > 1:\n        mmax = max(lst)\n        if cur_min > mmax + added_min:\n            cur_min = mmax + added_min\n        count_max = lst.count(mmax)\n        tmp_lst = list()\n        for sym in lst:\n            if sym is not mmax:\n                tmp_lst.append(sym)\n            else:\n                if sym % 2 is 0:\n                    tmp_lst.append(sym//2)\n                    tmp_lst.append(sym//2)\n                else:\n                    tmp_lst.append(sym//2)\n                    tmp_lst.append(sym//2 + 1)\n        added_min += count_max\n        lst = tmp_lst.copy()\n\n\n\n    fout.write(\"Case #\" + i.__str__() + \": \" + cur_min.__str__() + \"\\n\")\nfin.close()\nfout.close()\n'''", "n = int(input())\ns = input()\nt = []\nk = []\nfor i in range(len(s)):\n    if s[i] not in t:\n        t.append(s[i])\n        k.append(i)\nif len(t)<n:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for u in range(n-1):\n        print(s[k[0]:k[1]])\n        k.pop(0)\n    print(s[k[0]:])\n        \n", "\nk = int(input())\nq = input()\n\ni = 0\nmet = []\nts = []\nwhile i < len(q):\n    if q[i] in met:\n        i += 1\n    else:\n        met.append(q[i])\n        ts.append(i)\nts.append(len(q))\n\nif len(ts) >= k + 1:\n    print('YES')\n    for i in range(len(ts) - 1):\n        a = ts[i]\n        b = ts[i + 1]\n        if i == k - 1:\n            print(q[a:])\n            break\n        print(q[a:b])\nelse:\n    print('NO')\n\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nk = int(input())\nstr = input()\n\ndic = {}\nfor i in str:\n    if i not in dic:\n        dic[i]  = 1\n    else:\n        dic[i] += 1\n\nif ( k > len(dic)):\n    print(\"NO\")\nelse:\n    print(\"YES\", end='')\n    dic2 = []\n    n = 0\n\n    for i in str:\n        if (i not in dic2) and n < k:\n            print()\n            print(i, end='')\n            n += 1\n            dic2.append(i)\n        else:\n            print(i, end='')\n\n    print()\n\n", "r = lambda : list(map(int,input().split()))\n\nimport sys\nn = int(input())\ns = input()\nq = set()\nif n>len(set(s)) :\n    print('NO')\nelse :\n    print('YES')\n    k = 0\n    ans = []\n    for i in range(len(s)) :\n        if k==n : break\n        if s[i] not in q :\n            ans.append(i)\n            q.add(s[i])\n            k+=1\n    ans.append(len(s))\n    for i in range(len(ans)-1) :\n        print(s[ans[i]:ans[i+1]])\n                \n", "n = int(input())\ns = input()\nq = set()\nif n>len(set(s)) :\n    print('NO')\nelse :\n    print('YES')\n    k = 0\n    ans = []\n    for i in range(len(s)) :\n        if k==n : break\n        if s[i] not in q :\n            ans.append(i)\n            q.add(s[i])\n            k+=1\n    ans.append(len(s))\n    for i in range(len(ans)-1) :\n        print(s[ans[i]:ans[i+1]])\n", "\nk = int(input())\nq = input()\n\ndef program(k, q):\n    if k > len(set(q)):\n        print(\"NO\")\n        return\n    used = []\n    ss = []\n    while len(q) > 0:\n        ch = q[0]\n        q = q[1:]\n        if (ch in used) or k - len(ss) == 0:\n            ss[-1] += ch\n        else:\n            ss.append(ch)\n        used.append(ch)\n    print(\"YES\")\n    for s in ss:\n        print(s)\n    \nprogram(k, q)\n    \n", "from collections import Counter\n\n\nnumber_of_words = int(input())\ninput_string = input()\nwords_dict = Counter(input_string)\nif len(words_dict) < number_of_words:\n    print('NO')\nelse:\n    print('YES')\n    if number_of_words == 1:\n        print(input_string)\n    else:\n        using_letters = []\n        for i in range(0, number_of_words - 1):\n            output_string = ''\n            current_letter = input_string[0]\n            using_letters += current_letter\n            while True:\n                if input_string[0] in using_letters:\n                    output_string += input_string[0]\n                    input_string = input_string[1:]\n                else:\n                    break\n            print(output_string)\n        print(input_string)", "import sys\n\n\nn = int(input())\ns = str(input())\nl = []\n\nfor i in s:\n    if not i in l:\n        l.append(i)\n\nvals = []\n\nif len(l) < n:\n    print(\"NO\")\n    return\nelse:\n    print(\"YES\")\n    for i in range(n):\n        vals.append(s.index(l[i]))\n\nfor i in range(n):\n    if i == n-1:\n        print(s[vals[len(vals)-1]:len(s)])\n    else:\n        print(s[vals[i]:vals[i+1]])\n", "def main():\n    n = int(input())\n    s = input()\n    result = []\n    substring = []\n    d = set()\n\n    for i in range(len(s)):\n        if n > 0 and s[i] not in d:\n            if len(substring) > 0 :\n                result.append(''.join(substring))\n                substring = []\n            substring.append((s[i]))\n            d.add(s[i])\n            n -= 1\n        else:\n            substring.append((s[i]))\n\n    if len(substring) > 0 :\n        result.append(''.join(substring))\n    if n > 0:\n        print('NO')\n        return\n    else:\n        print('YES')\n        for s in result:\n            print(s)\n\n\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\na = input()\nd = {}\ncount = 0\nfor i in range(len(a)):\n    if d.get(a[i]) == None:\n        d[a[i]] = 1\n        count += 1\nif count >= n:\n    print('YES')\n    d = {}\n    count = 0\n    i = 0\n    j = 0\n    while count < n - 1:\n        if d.get(a[i]) == None:\n            d[a[i]] = 1\n            if a[j:i] != '':\n                count += 1 \n                print(a[j:i])\n                j = i\n        i += 1\n    print(a[j:])            \nelse:\n    print('NO')", "n = int(input())\ns = input()\ns1 = set()\nar = []\ni = 0\nprs = ''\nj = 0\nwhile len(ar) < n and i < len(s):\n    ar.append(s[i])\n    s1.add(s[i])\n    i += 1\n    while i < len(s) and s[i] in s1:\n        ar[-1] += s[i]\n        i += 1\n    \n    \nif i < len(s):\n    ar[-1] += s[i:]\nif len(ar) < n:\n    print('NO')\nelse:\n    print('YES')\n    for i in ar:\n        print(i)", "n = int(input())\ns = input()\nif n == 1:\n    print(\"YES\")\n    print(s)\n    return\na = []\nb = []\nfor i in range(26):\n    a.append(0)\n    b.append(-1)\nfor i in range(len(s)):\n    a[ord(s[i])-ord('a')] += 1\n    if b[ord(s[i])-ord('a')] == -1:\n        b[ord(s[i])-ord('a')] = i\n    #print(s[i], i)\nnum = 0\nc = []\nfor i in range(26):\n    if a[i] != 0:\n        num += 1\n        c.append(b[i])\n#print(c)\ni = 0\nlastNum = 0\nif num < n:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    minNum = 100000\n    for i in range(len(c)):\n        if minNum > c[i]:\n            minNum = c[i]\n            minNumPos = i\n    if c[minNumPos] != 0:\n        print(s[:c[minNumPos]])\n        lastNum = c[minNumPos]\n        n -= 1\n    c[minNumPos] = 100000\n    while n > 1:\n        minNum = 100000\n        for i in range(len(c)):\n            if minNum > c[i]:\n                minNum = c[i]\n                minNumPos = i\n        print(s[lastNum:c[minNumPos]])\n        lastNum = c[minNumPos]\n        c[minNumPos] = 100000\n        #print(c, lastNum)\n        n -= 1\n    print(s[lastNum:])\n    #print(c, lastNum)\n#if num >= n:\n\n\n#print(a, b)\n", "k = int(input())\nq = input()\nans_strings = []\nstarts = []\nfor i in range(len(q)):\n    if q[i] not in starts:\n        if k > 1:\n            starts.append(q[i])\n            ans_strings.append(q[i])\n            k -= 1\n        elif k == 1:\n            ans_strings.append(q[i::])\n            k -= 1\n            break\n    else:\n        ans_strings[len(ans_strings) - 1] += q[i]\nif k == 0:\n    print(\"YES\")\n    for i in ans_strings:\n        print(i)\nelse:\n    print(\"NO\")", "def output():\n\tprint(\"YES\")\n\t\n\tfor st in ans:\n\t\tprint(st)\n\nk = int(input())\nq = input()\nn = len(q)\n\nans = []\nused = set()\nlim = 1\nlast = -1\nfor i in range(n):\n\tif q[i] not in used:\n\t\tif last != -1:\n\t\t\tlim += 1\n\t\t\tans.append(q[last : i])\n\t\tused.add(q[i])\n\t\tlast = i\n\tif lim == k:\n\t\tans.append(q[i:])\n\t\toutput()\n\t\tbreak\n\t\t\t\nif lim < k:\n\tprint(\"NO\")", "from collections import OrderedDict\ncount = int(input())\nline  = input()\n\nuniq = \"\".join(OrderedDict.fromkeys(line).keys())\n\nif count > len(uniq):\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n\tif count == len(uniq):\n\t\twhile len(line) != 0:\n\t\t\tfirst_uniq = 0\n\t\t\tuniq = uniq[1:]\n\t\t\tif len(uniq) == 0:\n\t\t\t\tprint(line)\n\t\t\t\tbreak\n\t\t\tlast_uniq = line.find(uniq[0])\n\t\t\tprint(line[first_uniq:last_uniq])\n\t\t\tline = line[last_uniq:]\n\telse:\n\t\twhile count != 1:\n\t\t\tfirst_uniq = 0\n\t\t\tuniq = uniq[1:]\n\t\t\tlast_uniq = line.find(uniq[0])\n\t\t\tprint(line[first_uniq:last_uniq])\n\t\t\tline = line[last_uniq:]\n\t\t\tcount -= 1\n\t\tprint(line)", "def TrueCount(a):\n\tc = 0\n\tfor i in a:\n\t\tif(i == True):\n\t\t\tc += 1\n\treturn c\n\ndef uniqueStrings(a,s):\n\tb = []\n\tc = []\n\tx = 0\n\tc.append(s[0])\n\tfor i in range(len(s)):\n\t\tif s[i] not in c:\n\t\t\tb.append(s[x:i])\n\t\t\tc.append(s[i])\n\t\t\tx = i\n\tb.append(s[x:len(s)])\n\treturn b\n\nn = int(input())\ns = input()\n\na = [False]*26\n\nfor i in s:\n\ta[ord(i) - ord('a')] = True\n\nk = TrueCount(a)\n\nif(k < n):\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n\tb = uniqueStrings(a,s)\n\ti = 0\n\twhile(i < n-1):\n\t\tprint(b[i])\n\t\ti += 1\n\tprint(''.join(b[i:len(b)]))", "k, q, v, s = int(input()), input(), 'YES', set()\nfor ch in q:\n    if k == 0 or ch in s:\n        v += ch\n    else:\n        v += '\\n' + ch\n        s.add(ch)\n        k -= 1\nprint('NO' if k else v)", "k = int(input())\nstring = input()\nfirst_char_set = set()\nlength = len(string)\nunique_mnt = 0\nres_ind = []\nif k > length:\n    print(\"NO\")\n    return\nif k == 1:\n    print(\"YES\")\n    print(string)\n    return\nfor i in range(length):\n    c = string[i]\n    if not(c in first_char_set):\n        unique_mnt += 1\n        first_char_set.add(c)\n        res_ind.append(i)\nif k > len(res_ind):\n    print(\"NO\")\n    return\nres = []\nres_len = len(res_ind)\nfor i in range(res_len - 1):\n    cur_ind = res_ind[i]\n    next_ind = res_ind[i+1]\n    if k > 1:\n        res.append(string[cur_ind:next_ind])\n        k -= 1\n    elif k == 1:\n        res.append(string[cur_ind:])\n        k -= 1\n        break\nif k == 1:\n    res.append(string[next_ind:])\nprint(\"YES\")\nfor el in res:\n    print(el)\n", "k = int(input())\nq = input()\ncut = [0]\ntopset = set([q[0]])\nfor i in range(1, len(q)):\n    if len(cut) == k:\n        break\n    if q[i] not in topset:\n        cut.append(i)\n        topset.add(q[i])\n        \nif len(cut) < k:\n    print('NO')\nelse:\n    print('YES')\n    for i in range(k-1):\n        print(q[cut[i]:cut[i+1]])\n    print(q[cut[-1]:])\n", "def solve():\n    n = int(input())\n    s = str(input())\n\n    if n == 1:\n        print(\"YES\")\n        print(s)\n        return\n\n    mp = dict()\n    pos = []\n    for i, letter in enumerate(s):\n        if letter in mp:\n            continue\n        else:\n            mp[letter] = True\n            pos.append(i)\n\n    if len(mp) < n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        start = 0\n        for i in range(n - 1):\n            print(s[start: pos[i + 1]])\n            start = pos[i + 1]\n        print(s[start:])\n\ndef __starting_point():\n    solve()\n\n\n\n\n\n__starting_point()", "n = int(input())\ns = k = input()\nif len(s) < n or len(s) == n and len(set(s)) < n or len(set(s))<n :\n    print('NO')\nelif len(s) == n:\n    print ('YES')\n    for i in range(n):\n        print(s[i])\n        \n        \nelse:\n    print('YES')\n    r = ''\n    for element in s:\n        if element not in r:\n            r+=element\n    \n    j = 0\n    for i in range(n-1):\n        print(s[j:s.find(r[i+1])])\n        j = s.find(r[i+1])        \n        \n        \n    print(s[j:])"]