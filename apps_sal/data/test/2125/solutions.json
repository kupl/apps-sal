["from collections import defaultdict as dd\nimport math\nimport sys\n#input=sys.stdin.readline\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\nn,m=mi()\n\nquilt=[]\nfor i in range(n):\n\tquilt.append(li())\ndef getflags(column):\n\tflags=set()\n\tbreaks=[0]\n\tfor i in range(0,len(column)-1):\n\t\tif not column[i]==column[i+1]:\n\t\t\tbreaks.append(i+1)\n\tbreaks.append(len(column))\t\n\t#print(breaks)\n\tfor j in range(1,len(breaks)-2):\n\t\tmidlength=breaks[j+1]-breaks[j]\n\t\tfirstlength=breaks[j]-breaks[j-1]\n\t\tendlength=breaks[j+2]-breaks[j+1]\n\t\tif midlength<=firstlength and midlength<=endlength:\n\t\t\tflags.add(((breaks[j+1],breaks[j]), (column[breaks[j+1]], column[breaks[j]],column[breaks[j-1]])))\n\treturn flags\n\nflagdicts=[0]*m\n\nfor i in range(m):\n\tcol=[row[i] for row in quilt]\n\tflagdicts[i]=getflags(col)\ntotal=0\n#print(flagdicts)\nfor i in range(m):\n\tfor flag in flagdicts[i]:\n\t\tk=1\n\t\t\n\t\twhile i+k<m and flag in flagdicts[i+k]:\n\t\t\tk+=1\n\t\t\t#print(flagdicts[i+k])\n\t\t\t#flagdicts[i+k].remove(flag)\n\t\tfor j in range(1,k):\n\t\t\tflagdicts[i+j].remove(flag)\n\t\ttotal+=k*(k+1)//2\t\t\nprint(total)\n\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef main():\n    buf = input()\n    buflist = buf.split()\n    n = int(buflist[0])\n    m = int(buflist[1])\n    blanket = []\n    for i in range(n):\n        buf = input()\n        blanket.append(buf)\n    dp = [[]]\n    for j in range(m+1):\n        dp[0].append([0, (0, '0'), (0, '0'), (0, '0'), 0])\n    for i in range(n):\n        dp.append([[0, (0, '0'), (0, '0'), (0, '0'), 0]])\n    #dp = [[[0, (0, None), (0, None), (0, None), 0]] * (m+1)] + [[[0, (0, None), (0, None), (0, None), 0]]] * n\n    #dp = [[[0, [0, None], [0, None], [0, None], 0]] * (m+1)] * (n+1)\n    for i in range(n):\n        for j in range(m):\n            dp[i+1].append([0, (0, None), (0, None), (0, None), 0])\n            dp[i+1][j+1][0] = dp[i+1][j][0] + dp[i][j+1][0] - dp[i][j][0]\n            if blanket[i][j] == dp[i][j+1][1][1]:\n                dp[i+1][j+1][1] = (dp[i][j+1][1][0]+1, dp[i][j+1][1][1])\n                dp[i+1][j+1][2] = dp[i][j+1][2]\n                dp[i+1][j+1][3] = dp[i][j+1][3]\n            else:\n                dp[i+1][j+1][1] = (1, blanket[i][j])\n                dp[i+1][j+1][2] = dp[i][j+1][1]\n                dp[i+1][j+1][3] = dp[i][j+1][2]\n            if dp[i+1][j+1][1][0] == dp[i+1][j+1][2][0] and dp[i+1][j+1][2][0] <= dp[i+1][j+1][3][0]:\n                if dp[i+1][j+1][1] == dp[i+1][j][1] and dp[i+1][j+1][2] == dp[i+1][j][2] and dp[i+1][j+1][3][1] == dp[i+1][j][3][1]:\n                    dp[i+1][j+1][4] = dp[i+1][j][4]\n                dp[i+1][j+1][0] += dp[i+1][j+1][4] + 1\n                dp[i+1][j+1][4] += 1\n    #for i, x in enumerate(dp):\n    #    for j, y in enumerate(x):\n    #        print(i, j, y)\n    print(dp[n][m][0])\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m = list(map(int,input().split()))\nA = [input() for _ in range(n)]\n\nDx = [[0] for _ in range(n)]\nDy = [[0] for _ in range(m)]\n\nfor i in range(n):\n    last = None\n    k = 0\n    for j in range(m):\n        c = A[i][j]\n        if c != last:\n            k = 0\n        k += 1\n        last = c\n        Dx[i].append(k)\n\nfor j in range(m):\n    last = None\n    k = 0\n    for i in range(n):\n        c = A[i][j]\n        if c != last:\n            k = 0\n        k += 1\n        last = c\n        Dy[j].append(k)\n\ncount = 0\nfor j in reversed(list(range(m))):\n    col = Dy[j]\n    i = len(col) - 1\n    strips = []\n    while i != 0:\n        strips.append((col[i],i-col[i]))\n        i -= col[i]\n\n    for k in range(1,len(strips)-1):\n        if strips[k-1][0] >= strips[k][0] <= strips[k+1][0]:\n            l = strips[k][1] - strips[k][0]\n            r = strips[k-1][1] + strips[k][0]\n            #print(strips)\n            #print('interval',l,r)\n            res = min(Dx[i][j+1] for i in range(l,r))\n            #print([Dx[i][j+1] for i in range(l,r)])\n            #print(res)\n            count += res\n    #for \n#print(Dx)\nprint(count)\n", "H, W = map(int, input().split())\nG = [[ord(s)-96 for s in input().strip()] for _ in range(H)]\nG = list(map(list, zip(*G)))\nA = [None]*W\nB = [None]*W\nCol = [None]*W\nDic = [None]*W\nfor j, Gi in enumerate(G):\n    pre = -1\n    D = [None]*H\n    con = 0\n    ctr = 0\n    E = [None]*H\n    F = []\n    for i, g in enumerate(Gi):\n        if pre != g:\n            F.append(con)\n            ctr += 1\n            con = 0  \n        con += 1\n        D[i] = con\n        pre = g\n        E[i] = ctr\n    F.append(con)\n    Col[j] = E[:]\n    Dic[j] = F[:]\n    B[j] = D[:]\n    pm = 0\n    pre = -1\n    for i, (g, d) in enumerate(zip(Gi[::-1], D[::-1])):\n        if pre != g:\n            pm = 0\n        pm = max(pm, d)\n        D[H-1-i] = pm\n        pre = g\n    A[j] = D[:]\nC = [[0]*H for _ in range(W)]\nfor w in range(W):\n    for h in range(H):\n        c = Col[w][h]\n        if c + 2 >= len(Dic[w]):\n            continue\n        leng = A[w][h] + 1 - B[w][h]\n        if Dic[w][c+1] == leng and Dic[w][c+2] >= leng:\n            C[w][h] = leng * 10**6 + 900 * G[w][h] + 30 * G[w][h+leng] + G[w][h+2*leng]\nC = list(map(list, zip(*C)))\nans = 0\nfor Ci in C:\n    ctr = 0\n    pre = -1\n    for c in Ci:\n        if not c:\n            pre = -1\n            continue\n        if c != pre:\n            ans += ctr * (ctr + 1)//2\n            ctr = 1\n        else:\n            ctr += 1\n        pre = c\n    ans += ctr * (ctr + 1)//2\nprint(ans)", "import os\nfrom io import BytesIO, StringIO\n#input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\nDEBUG = True\ndebug_print = print if DEBUG else lambda *x,**y: None\n\ndef input_as_list():\n    return list(map(int, input().split()))\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\ndef main():\n    n, m = input_as_list()\n    g = [input() for _ in range(n)]\n\n    prev_flgs = dict()\n    s = 0\n    for j in range(m):\n        lst = []\n        prev = ''\n        cnt = 0\n        for i in range(n):\n            e = g[i][j]\n            if e == prev:\n                cnt += 1\n            else:\n                if prev: lst.append((prev, cnt))\n                prev = e\n                cnt = 1\n        lst.append((e, cnt))\n\n        flgs = dict()\n        idx = 0\n        for i in range(len(lst) - 2):\n            f1, f2, f3 = lst[i], lst[i+1], lst[i+2]\n            if f1[1] == f2[1] == f3[1]:\n                flgs[idx] = [f1[0]+f2[0]+f3[0], f1[1], 1]\n            elif min(f1[1], f2[1], f3[1]) == f2[1]:\n                flgs[idx+f1[1]-f2[1]] = [f1[0]+f2[0]+f3[0], f2[1], 1]\n            idx += f1[1]\n\n        if prev_flgs:\n            for f in flgs:\n                if f in prev_flgs:\n                    fv = flgs[f]\n                    pfv = prev_flgs[f]\n                    if fv[0] == pfv[0] and fv[1] == pfv[1]:\n                        s += pfv[2] + 1\n                        flgs[f][2] = pfv[2] + 1\n                    else:\n                        s += 1\n                else:\n                    s += 1\n        else:\n            s += len(flgs)\n        prev_flgs = flgs\n\n    print(s)\n\nmain()", "n,m = [int(i) for i in input().split()]\ndata = []\nfor i in range(n):\n    data.append(list(input()))\n#print(data)\nf = []\nfor i in range(m):\n    \n    temp = []\n    prev = 0\n    cnt = 0 #-1?????\n    for j in range(n):\n        ch = ord(data[j][i]) - 95\n        if ch == prev:\n            cnt += 1\n        else:\n            temp.append((prev, cnt, j - cnt))\n            prev = ch\n            cnt = 1\n    temp.append((prev, cnt, n - cnt))\n    for t in range(1, len(temp)-1):\n        td = temp[t-1]\n        tf = temp[t+1]\n        te = temp[t]\n        if te[0] != td[0] and te[0] != tf[0] and td[1] >= te[1] and tf[1] >= te[1]:\n            f.append((te[2],i, te[1], (td[0]<<10) + (te[0]<<5)+tf[0]))\n\ntot = 0\nf.sort()\n#print(f)\n\nle = len(f)\ni = 0\nwhile i < le:\n    d = f[i]\n    cnt = 1\n    #print(d, f[i+1])\n    while i < le -1  and d[1] + cnt == f[i+1][1] and d[0] == f[i+1][0] and  d[2] == f[i+1][2] and d[3] == f[i+1][3]:\n        i+=1\n        cnt+=1\n    #print(cnt)\n    tot += (cnt*(cnt+1))//2\n    i += 1\n\nprint(tot)\n    \n", "#!/usr/bin/env python\nn, m = list(map(int, input().split()))\nboard = [input() for _ in range(n)]\nu = [[1 for _ in range(m)] for _ in range(n)]\nl = [[1 for _ in range(m)] for _ in range(n)]\nfor i in range(1, n):\n    for j in range(m):\n        if board[i][j] == board[i - 1][j]:\n            u[i][j] = u[i - 1][j] + 1\nfor j in range(1, m):\n    for i in range(n):\n        if board[i][j] == board[i][j - 1]:\n            l[i][j] = l[i][j - 1] + 1\nanswer = 0\nfor i1 in range(n):\n    for j in range(m):\n        k = u[i1][j]\n        i2 = i1 - k\n        if i2 >= 0 and u[i2][j] == k:\n            i3 = i2 - k\n            if i3 >= 0 and u[i3][j] >= k:\n                answer += min(l[i][j] for i in range(i3 - k + 1, i1 + 1))\nprint(answer)\n", "import sys \ninput = lambda: sys.stdin.readline().strip()\n\ndef f(A, r, c, l):\n  q, w, e = A[r][c][0], A[r][c-l][0], A[r][c-2*l][0]\n  x, y, z = A[r][c][1], A[r][c-l][1], A[r][c-2*l][1]\n\n  #print(r, c, x,y,z,l, q,w,e)\n  if x != y and y != z and e >= l and  w == q == l:\n    return (l, z, y, x)\n  else:\n    return 0\n  \n  \n\n\n\nr, c = list(map(int, input().split()))\ns = \"\"\nfor i in range(r):\n  s += input()\n\narr = []\nnarr = [[0]*r for i in range(c)]\nfor i in range(c):\n  arr.append(s[i:r*c:c])\n\nr, c = c, r \n\nlength_str = [ [0] * c for i in range(r) ]\nfor i in range(r):\n  for j in range(c):\n    if j == 0:\n      length_str[i][j] = (1, arr[i][j])\n    elif arr[i][j-1] == arr[i][j]:\n      length_str[i][j] = (length_str[i][j-1][0] + 1, arr[i][j])\n    else:\n      length_str[i][j] = (1, arr[i][j])\n\nfor i in range(r):\n  for j in range(c):\n    l, _ = length_str[i][j] \n    if j - l*3 + 1 < 0:\n      continue \n    else:\n      narr[i][j] = f(length_str, i, j, l)\n      \n\n\n\n\n#for i in narr:\n#  print(i)\n\ndp =[ [0] * c for i in range(r) ]\n\n\nfor j in range(c):\n  cnt = 1\n  for i in range(r):\n    if narr[i][j] == 0:\n      cnt = 1\n      continue \n    else:\n      if i == 0:\n        dp[i][j] = 1\n\n      elif narr[i][j] == narr[i-1][j]:\n        cnt += 1\n        dp[i][j] = cnt\n        dp[i-1][j] = 0\n\n      else:\n        cnt = 1\n        dp[i][j] = 1 \n\nans = 0\nfor i in dp:\n  for j in i:\n    ans += ((j)*(j+1))//2\n\nprint(ans)\n", "import sys\n\n\ndef __starting_point():\n    n, m = list(map(int, input().split()))\n    arr = sys.stdin.readlines()\n    f = 0\n    flgs = {}\n    for c in range(m):\n        cnts = [[arr[0][c], 1]]\n        for r in range(1, n):\n            if arr[r][c] == cnts[-1][0]:\n                cnts[-1][1] += 1\n            else:\n                cnts.append([arr[r][c], 1])\n        strt = 0\n        for i in range(len(cnts) - 2):\n            if cnts[i][1] >= cnts[i + 1][1] <= cnts[i + 2][1]:\n                lng = cnts[i + 1][1]\n                beg = strt + cnts[i][1] - cnts[i + 1][1]\n                clr = (cnts[i][0], cnts[i + 1][0], cnts[i + 2][0], lng)\n                k = (clr, beg)\n                if k in flgs and flgs[k][-1][-1] == c - 1:\n                    flgs[k][-1][-1] = c\n                elif k in flgs:\n                    flgs[k].append([c, c])\n                else:\n                    flgs[k] = [[c, c]]\n\n            strt += cnts[i][1]\n\n    for flg in list(flgs.values()):\n        for fl in flg:\n            lng = fl[1] - fl[0] + 1\n            f += (lng * (lng + 1)) // 2\n\n    print(f)\n\n__starting_point()", "a, b = list(map(int,input().split()))\nc = [[0] * (b) for i in range(a)]\nd = [input() for i in range(a)]\nfor j in range (b):\n    n = []\n    pred = d[0][j]\n    cnt = 1\n    for i in range(1, a):\n        if d[i][j] == pred:\n            cnt += 1\n        else:\n            n.append((cnt, pred))\n            cnt = 1\n        pred = d[i][j]\n    n.append((cnt, pred))\n    uk = 0\n    for i in range(2, len(n)):\n        if n[i - 2][0]>= n[i - 1][0] and n[i - 1][0] <= n[i][0]:\n            c[uk + n[i - 2][0] - n[i - 1][0]][j] = [n[i - 2][1], n[i - 1][1], n[i][1], n[i - 1][0]]\n        uk += n[i - 2][0]\nsumm = 0\ncnt = 0\nif b == 1:\n    for i in range(a):\n        for j in range(b):\n            if c[i][j] != 0:\n                summ += 1\n    print(summ)\n    return\nfor i in range(a):\n    cnt = 0\n    f = False\n    for j in range(1, b):\n        if cnt == 0 and c[i][j - 1] != 0:\n            cnt = 1\n        if c[i][j - 1] == c[i][j] and c[i][j] != 0:\n            cnt += 1\n        elif c[i][j] != 0:\n            summ += cnt * (cnt + 1) // 2\n            cnt = 1\n        else:\n            summ += cnt * (cnt + 1) // 2\n            cnt = 0\n    summ += cnt * (cnt + 1) // 2\nprint(summ)\n", "n, m = [int(x) for x in input().split()]\n\na = [[] * (m+1) for i in range(n+1)]\ncols = [[0] * (m+1) for i in range(n+1)]\nrows = [[0] * (m+1) for i in range(n+1)]\n\na[0] = '*' * (m+1)\nfor i in range(1, n+1):\n    a[i] = '*'+input()\n    \nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if a[i][j] == a[i][j-1]: \n            rows[i][j] = rows[i][j-1] + 1\n            \nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if a[i][j] == a[i-1][j]: \n            cols[i][j] = cols[i-1][j] + 1\n            \nans = 0\n           \nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        x = cols[i][j] + 1\n        if i < x*3: \n            continue\n        y = cols[i-x][j] + 1\n        if x != y:\n            continue\n        z = cols[i-x-y][j] + 1\n        if z < y:\n            continue\n        minx = 2 * m\n        for l in range(0, x*3):\n            minx = min(minx, rows[i-l][j])\n        #print(i, j, x, y, minx)\n        ans += (minx+1)\n    \nprint(ans)", "\ndef number_rectangle (h):\n    l = [0 for i in range(len(h))]\n    stack = []\n    dp = [0 for i in range(len(h))]\n    result = 0\n    for i in range(len(h)):\n        while (len(stack) > 0) and (stack[-1] >= h[i]):\n            stack.pop()\n        if (len(stack) == 0):\n            dp[i] = i + 1\n        else:\n            dp[i] = dp[stack[-1]] + (i - stack[-1]) * h[i]\n\n        result += dp[i]\n    #print(h)\n    #print(result)\n    return result\n\ndef main():\n\n    rows, cols = list(map(int, input().split()))\n    rows += 1\n\n\n    a = []\n    a.append('-' * cols)\n    #print(a)\n    for i in range(1, rows):\n        a.append(input())\n    h = [[0 for j in range(cols)] for i in range(rows)]\n    result = 0\n    #print(a)\n    #print(rows, cols)\n    for i in range(1, rows):\n        #print (f'i = {i}')\n        #print(s)\n        #print(a[i])\n        last_state = (0, 0, 0, 0, 0, 0)\n        same_state = 0\n        sub = []\n        for j in range(0, cols):\n            if a[i][j] == a[i - 1][j]:\n                h[i][j] = h[i - 1][j] + 1\n            else:\n                h[i][j] = 1\n            i2 = i - h[i][j]\n            i3 = i2 - h[i2][j]\n            #print (i, i2, i3)\n            curr_state = (h[i][j], h[i2][j], a[i][j], a[i2][j], a[i3][j])\n            if (h[i][j] == h[i2][j]) and (h[i3][j] >= h[i][j]):\n\n                if (curr_state == last_state):\n                    sub.append(h[i3][j] - h[i][j])\n                else:\n                    result += number_rectangle(sub)\n                    sub.clear()\n                    sub.append(h[i3][j] - h[i][j])\n            else:\n                result += number_rectangle(sub)\n                sub.clear()\n            last_state = curr_state\n            #print (f'same_state = {same_state} curr_state = {curr_state[0], curr_state[1], curr_state[2], curr_state[3], curr_state[4]}')\n        result += number_rectangle(sub)\n    result = int(result)\n    #print(h)\n    print(result)\nmain()\n\n\n", "n, m = list(map(int, input().split()))\nup = [[0 for j in range(m)] for i in range(n)]\nldw = [[0 for j in range(m)] for i in range(n)]\nlup = [[0 for j in range(m)] for i in range(n)]\n\nv = []\n\nfor i in range(n):\n    v.append(input())\n\nfor i in range(n):\n    for j in range(m):\n        if not i or v[i][j] != v[i - 1][j]:\n            up[i][j] = 1\n            lup[i][j] = (1 if (not j or v[i][j] != v[i][j - 1]) else lup[i][j - 1] + 1)\n        else:\n            up[i][j] = up[i - 1][j] + 1\n            lup[i][j] = min(lup[i - 1][j], (1 if (not j or v[i][j] != v[i][j - 1]) else lup[i][j - 1] + 1))\n\nfor i in range(n - 1, -1, -1):\n    for j in range(m):\n        if i == n - 1 or v[i][j] != v[i + 1][j]:\n            ldw[i][j] = (1 if (not j or v[i][j] != v[i][j - 1]) else ldw[i][j - 1] + 1)\n        else:\n            ldw[i][j] = min(ldw[i + 1][j], (1 if (not j or v[i][j] != v[i][j - 1]) else ldw[i][j - 1] + 1))\n\nans = 0\n\nfor i in range(1, n - 1):\n    for j in range(m):\n        if v[i][j] == v[i + 1][j]:\n            continue\n        h = up[i][j]\n        up_st = i - h\n        if up_st < 0 or up[up_st][j] < h:\n            continue\n        dw_st = i + h\n        if dw_st >= n or up[dw_st][j] != h:\n            continue\n        w = min(lup[i][j], ldw[up_st - h + 1][j], lup[dw_st][j])\n        ans += w\n\nprint(ans)\n", "n, m = list(map(int, input().split()))\na = []\nflagTable = [[0] * m] * n\ntotalFlagNum = 0\n\ndef countFlagNum(x):\n  y = 0\n  flagNum = 0\n  while y < m:\n    curColor = a[x][y]\n    colorCountByX = 1\n    isItFlag = True\n    while x + colorCountByX < n and a[x + colorCountByX][y] == curColor:\n      colorCountByX += 1\n    if not(x + colorCountByX * 3 > n):\n      color2 = a[x + colorCountByX][y]\n      color3 = a[x + colorCountByX * 2][y]\n      if color3 != color2 and color2 != curColor:\n        offY = 0\n        while y + offY < m and isItFlag:\n          i = 0\n          while i < colorCountByX and isItFlag:\n            if (a[x + i][y + offY] != curColor or a[x + colorCountByX + i][y + offY] != color2 or a[x + colorCountByX * 2 + i][y + offY] != color3):\n              isItFlag = False\n              if offY == 0:\n                offY = 1\n            i += 1\n          if isItFlag:\n            flagNum = flagNum + 1 + offY\n            offY += 1\n        y += offY - 1\n    y += 1\n  return flagNum\n\ndef markFlag():\n  return 0\n\nfor i in range(n):\n  row = input()\n  a.append(row)\n\nfor i in range(n - 2):\n    totalFlagNum += countFlagNum(i)\n\nprint(totalFlagNum)\n", "\ndef countFlagNum(x):\n  y = 0\n  flagNum = 0\n  while y < m:\n    curColor = a[x][y]\n    colorCountByX = 1\n    isItFlag = True\n    while x + colorCountByX < n and a[x + colorCountByX][y] == curColor:\n      colorCountByX += 1\n    if not(x + colorCountByX * 3 > n):\n      color2 = a[x + colorCountByX][y]\n      color3 = a[x + colorCountByX * 2][y]\n      if color3 != color2 and color2 != curColor:\n        offY = 0\n        while y + offY < m and isItFlag:\n          i = 0\n          while i < colorCountByX and isItFlag:\n            if (a[x + i][y + offY] != curColor or a[x + colorCountByX + i][y + offY] != color2 or a[x + colorCountByX * 2 + i][y + offY] != color3):\n              isItFlag = False\n              if offY == 0:\n                offY = 1\n            i += 1\n          if isItFlag:\n            flagNum = flagNum + 1 + offY\n            offY += 1\n        y += offY - 1\n    y += 1\n  return flagNum\n\nn, m = list(map(int, input().split()))\na = []\ntotalFlagNum = 0\n\nfor i in range(n):\n  row = input()\n  a.append(row)\n\nfor i in range(n - 2):\n    totalFlagNum += countFlagNum(i)\n\nprint(totalFlagNum)\n", "n, m = list(map(int, input().split()))\ngrid = []\nd = {}\nflags = 0\nfor i in range(n):\n    grid.append(input())\nfor j in range(m):\n    b = 0\n    while b < n - 1:\n        i = b\n        k = i\n        while k < n and grid[k][j] == grid[i][j]:\n            k += 1\n        c1 = k - i\n        clr1 = grid[k - 1][j]\n        i = k\n        if 2 * c1 <= n - k:\n            while k < n and grid[k][j] == grid[i][j]:\n                k += 1\n            c2 = k - i\n            clr2 = grid[k - 1][j]\n            i = k\n            if c1 == c2 and c2 <= n - k:\n                while k < n and grid[k][j] == grid[i][j]:\n                    k += 1\n                    if k - i == c2:\n                        break\n                c3 = k - i\n                clr3 = grid[k - 1][j]\n                if c3 == c2:\n                    flags += 1\n                    if (c3, clr1, clr2, clr3, k - 2 * c3 - 1, k - 1) in d and \\\n                            d[(c3, clr1, clr2, clr3, k - 2 * c3 - 1, k - 1)][1] == (j - 1):\n                        flags += d[(c3, clr1, clr2, clr3, k - 2 * c3 - 1, k - 1)][0]\n                        d[(c3, clr1, clr2, clr3, k - 2 * c3 - 1, k - 1)][1] = j\n                        d[(c3, clr1, clr2, clr3, k - 2 * c3 - 1, k - 1)][0] += 1\n                    else:\n                        d[(c3, clr1, clr2, clr3, k - 2 * c3 - 1, k - 1)] = [1, j]\n        b += 1\nprint(flags)\n", "\nn, m = list(map(int, input().split()))\nboard = [input() for _ in range(n)]\n\nu = [[1 for _ in range(m)] for _ in range(n)]\nl = [[1 for _ in range(m)] for _ in range(n)]\n\nfor i in range(1, n):\n    for j in range(m):\n        if board[i][j] == board[i - 1][j]:\n            u[i][j] = u[i - 1][j] + 1\n\nfor j in range(1, m):\n    for i in range(n):\n        if board[i][j] == board[i][j - 1]:\n            l[i][j] = l[i][j - 1] + 1\n\noutput = 0\nfor i1 in range(n):\n    for j in range(m):\n        k = u[i1][j]\n        \n        i2 = i1 - k\n        \n        if i2 >= 0 and u[i2][j] == k:\n            i3 = i2 - k\n            if i3 >= 0 and u[i3][j] >= k:\n                output += min(l[i][j] for i in range(i3 - k + 1, i1 + 1))\n                \n                \nprint(output)\n        \n        \n\n\n", "def test_c(n, m, G):\n    #n, m = [int(x) for x in input().split()]\n    #G = []\n    #for i in range(n):\n    #    G.append(list(input()))\n    mid = [[False for i in range(m)] for j in range(n)]\n    vis = [[False for i in range(m)] for j in range(n)]\n    L = [[1 for i in range(m)] for j in range(n)]\n\n    for i in range(1, n):\n        for j in range(m):\n            if G[i][j] != G[i-1][j]:\n                mid[i][j] = True\n\n    for j in range(m):\n        for i in range(n):\n                if i >= 1 and G[i][j] == G[i-1][j]:\n                    L[i][j] = L[i-1][j] - 1\n                    continue\n\n                k = 0\n                while i+k < n and G[i][j] == G[i+k][j]:\n                    k += 1\n                L[i][j] = k\n\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if mid[i][j] == True and vis[i][j] == False:\n                if i - L[i][j] >= 0 and i + L[i][j] < n:\n                    if L[i-L[i][j]][j] == L[i][j] and L[i+L[i][j]][j] >= L[i][j]: #\u5355\u6761L*1\u7684flag\n                        #cnt += 1\n                        k = 1\n                        vis[i][j] = True\n                        while j+k < m and G[i][j] == G[i][j+k] and L[i][j] == L[i][j+k] and mid[i][j+k] == True:\n                            if L[i - L[i][j]][j+k] == L[i][j] and G[i - L[i][j]][j+k] == G[i - L[i][j]][j] and\\\n                               L[i + L[i][j]][j+k] >= L[i][j] and G[i + L[i][j]][j+k] == G[i + L[i][j]][j]:\n                                vis[i][j + k] = True\n                                k += 1\n                                #cnt += 1\n                            else:\n                                break\n                        cnt += int(((k+1)*k) // 2)\n\n    print(cnt)\n\n\ndef __starting_point():\n\n    n, m = [int(x) for x in input().split()]\n    G = []\n    for i in range(n):\n        G.append(list(input()))\n    mid = [[False for i in range(m)] for j in range(n)]\n    vis = [[False for i in range(m)] for j in range(n)]\n    L = [[1 for i in range(m)] for j in range(n)]\n\n    for i in range(1, n):\n        for j in range(m):\n            if G[i][j] != G[i-1][j]:\n                mid[i][j] = True\n\n    for j in range(m):\n        for i in range(n):\n                if i >= 1 and G[i][j] == G[i-1][j]:\n                    L[i][j] = L[i-1][j] - 1\n                    continue\n\n                k = 0\n                while i+k < n and G[i][j] == G[i+k][j]:\n                    k += 1\n                L[i][j] = k\n\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if mid[i][j] == True and vis[i][j] == False:\n                if i - L[i][j] >= 0 and i + L[i][j] < n:\n                    if L[i-L[i][j]][j] == L[i][j] and L[i+L[i][j]][j] >= L[i][j]: #\u5355\u6761L*1\u7684flag\n                        #cnt += 1\n                        k = 1\n                        vis[i][j] = True\n                        while j+k < m and G[i][j] == G[i][j+k] and L[i][j] == L[i][j+k] and mid[i][j+k] == True:\n                            if L[i - L[i][j]][j+k] == L[i][j] and G[i - L[i][j]][j+k] == G[i - L[i][j]][j] and\\\n                               L[i + L[i][j]][j+k] >= L[i][j] and G[i + L[i][j]][j+k] == G[i + L[i][j]][j]:\n                                vis[i][j + k] = True\n                                k += 1\n                                #cnt += 1\n                            else:\n                                break\n                        cnt += int(((k+1)*k) // 2)\n\n    print(cnt)\n__starting_point()", "from sys import stdin, stdout\n\nn,m = list(map(int, stdin.readline().split()))\nt = [[0 for i in range(m)] for j in range(n)]\n\nfor i in range(n):\n    s = stdin.readline().strip()\n    for j,c in enumerate(s):\n        t[i][j] = c\n\nbegins = [[False for i in range(m)] for j in range(n)]\nlens = [[0 for i in range(m)] for j in range(n)]\n\nfor j in range(m):\n    cur_len = 1\n    run_start = 0\n    for i in range(1,n):\n        if t[i-1][j] != t[i][j]:\n            begins[run_start][j] = True\n            for z in range(run_start, i):\n                lens[z][j] = cur_len - (z-run_start)\n            cur_len = 0\n            run_start = i\n        cur_len += 1\n    begins[run_start][j] = True\n    for z in range(run_start, n):\n        lens[z][j] = cur_len - (z-run_start)\n\n#print(begins)\n#print(lens)\ndone = [[False for i in range(m)] for j in range(n)]\nans = 0\nfor j in range(m):\n    for i in range(n):\n        if done[i][j]:\n            continue\n        l = lens[i][j]\n        if i+2*l >= n:\n            continue\n        if not begins[i+l][j] or lens[i+l][j] != l or not begins[i+2*l][j] or lens[i+2*l][j] < l:\n            continue\n        num_cols = 1\n        cur_j = j\n        while cur_j < m and lens[i][cur_j] == l and begins[i+l][cur_j] and lens[i+l][cur_j] == l and begins[i+2*l][cur_j]and lens[i+2*l][cur_j] >= l and t[i][cur_j] == t[i][j] and t[i+l][cur_j] == t[i+l][j] and t[i+2*l][cur_j] == t[i+2*l][j]:\n            done[i][cur_j] = True \n            cur_j += 1\n        num_cols = cur_j - j\n\n        ans += num_cols*(num_cols+1) // 2\n\nprint(ans)        \n\n", "import sys\nimport math\nfrom collections import defaultdict,deque\nimport heapq\nn,m=list(map(int,sys.stdin.readline().split()))\ngrid=[]\nfor i in range(n):\n\ts=sys.stdin.readline()[:-1]\n\tgrid.append(s)\nright=[[0 for _ in range(m)] for x in range(n)]\nfor i in range(n):\n\tl,r,cnt=0,0,0\n\twhile r<m:\n\t\tcnt=0\n\t\twhile r<m and grid[i][l]==grid[i][r]:\n\t\t\tcnt+=1\n\t\t\tr+=1\n\t\twhile l<r:\n\t\t\tright[i][l]=cnt\n\t\t\tcnt-=1\n\t\t\tl+=1\n'''for i in range(n):\n\tprint(right[i])'''\ndown=[[0 for _ in range(m)] for x in range(n)]\nfor i in range(m):\n\tl,r,cnt=0,0,0\n\twhile r<n:\n\t\tcnt=0\n\t\twhile r<n and grid[l][i]==grid[r][i]:\n\t\t\tcnt+=1\n\t\t\tr+=1\n\t\twhile l<r:\n\t\t\tdown[l][i]=cnt\n\t\t\tcnt-=1\n\t\t\tl+=1\n'''for i in range(n):\n\tprint(down[i],'down')'''\nans=0\nfor i in range(n):\n\tfor j in range(m):\n\t\tx=down[i][j]\n\t\ty=0\n\t\tif i+x<n:\n\t\t\ty=down[i+x][j]\n\t\tz=0\n\t\tif i+x+y<n:\n\t\t\tz=down[i+x+y][j]\n\t\tif x==y and z>=y:\n\t\t\t#print(x,'x',y,'y',z,'z',i,'i',j,'j')\n\t\t\tminn=right[i][j]\n\t\t\tfor k in range(i,i+3*x):\n\t\t\t\tminn=min(minn,right[k][j])\n\t\t\t#print(minn,'minn')\n\t\t\t#print(i,'i',j,'j')\n\t\t\tans+=minn\nprint(ans)\n\n"]