["n, k, q = list(map(int, input().split()))\nrecipe_in = []\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    recipe_in.append((l, r))\n\nquery_in = []\nfor i in range(q):\n    l, r = list(map(int, input().split()))\n    query_in.append((l, r))\n\nMAX = 200000 + 10\nrecipes = [0 for i in range(MAX)]\nfor recipe in recipe_in:\n    l, r = recipe\n    recipes[l] += 1\n    recipes[r + 1] -= 1\nfor i in range(1, MAX):\n    recipes[i] += recipes[i - 1]\n\ncnts = [0 for i in range(MAX)]\nfor i in range(MAX):\n    if recipes[i] >= k:\n        cnts[i] += 1\nfor i in range(1, MAX):\n    cnts[i] += cnts[i - 1]\n\nfor query in query_in:\n    l, r = query\n    ans = cnts[r] - cnts[l - 1]\n    print(ans)\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\n\nn, k, q = rint()\nr = [0 for i in range(200001)]\nl = [0 for i in range(200001)]\n\nfor i in range(n):\n    ll, rr = rint()\n    r[rr] += 1\n    l[ll] += 1\n\nf = [0 for i in range(200001)]\nfor i in range(1,200001):\n    f[i] = f[i-1] + l[i] - r[i-1]\n\nss = [0 for i in range(200002)]\nfor i in range(200000, 0, -1):\n    if f[i] >= k:\n        ss[i] = ss[i+1] + 1\n    else:\n        ss[i] = ss[i+1]\n\nfor i in range(q):\n    ll, rr = rint()\n    print( ss[ll] - ss[rr+1])\n\n\n", "n, k, q = list(map(int, input().split()))\n\nMAX_TEMP = 200000 + 10\ntemps = [0 for x in range(MAX_TEMP)]\n\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    temps[l] += 1\n    temps[r + 1] -= 1\n\nsums = [0 for x in range(MAX_TEMP)]\ncount = 0\nfor i in range(1, MAX_TEMP):\n    count += temps[i]\n    if count >= k:\n        sums[i] = 1\n    sums[i] += sums[i - 1]\n\nanswers = []\nfor i in range(q):\n    a, b = list(map(int, input().split()))\n    answers.append(sums[b] - sums[a - 1])\n\nfor ans in answers:\n    print(ans)\n", "from sys import stdin, stdout\n\n\ndef read_ints():\n    return list(map(int, stdin.readline().split()))\n# lines = stdin.readlines()\n\n\nn, k, q = read_ints()\n\nMAX_TEMP = 200000 + 10\ntemps = [0 for x in range(MAX_TEMP)]\n\nfor i in range(n):\n    l, r = read_ints()\n    temps[l] += 1\n    temps[r + 1] -= 1\n\nsums = [0 for x in range(MAX_TEMP)]\ncount = 0\nfor i in range(1, MAX_TEMP):\n    count += temps[i]\n    if count >= k:\n        sums[i] = 1\n    sums[i] += sums[i - 1]\n\nfor i in range(q):\n    a, b = read_ints()\n    print(sums[b] - sums[a - 1])\n", "from sys import stdin, stdout\n\n\ndef read_ints():\n    return list(map(int, stdin.readline().split()))\n# lines = stdin.readlines()\n\n\nn, k, q = read_ints()\n\nMAX_TEMP = 200000 + 2\ntemps = [0] * MAX_TEMP\n\nfor i in range(n):\n    l, r = read_ints()\n    temps[l] += 1\n    temps[r + 1] -= 1\n\nsums = [0] * MAX_TEMP\ncount = 0\nfor i in range(1, MAX_TEMP):\n    count += temps[i]\n    if count >= k:\n        sums[i] = 1\n    sums[i] += sums[i - 1]\n\nfor i in range(q):\n    a, b = read_ints()\n    print(sums[b] - sums[a - 1])\n", "n, k, q = list(map(int, input().split()))\nrecipes = [0] * (200000 + 2)\nres = []\n\nfor _ in range(n):\n    l, r = list(map(int, input().split()))\n    recipes[l] += 1\n    recipes[r+1] -= 1\n\nfor i in range(1, len(recipes)):\n    recipes[i] += recipes[i-1]\n\nfor i in range(1, len(recipes)):\n    recipes[i] = 1 if recipes[i] >= k else 0\n    recipes[i] += recipes[i-1]\n\nfor _ in range(q):\n    a, b = list(map(int, input().split()))\n    res.append((recipes[b] - recipes[a-1]))\n\nprint('\\n'.join(map(str, res)))\n", "from itertools import accumulate\n\nMAX = 200002\n\nn, k, q = list(map(int, input().split()))\n\ninfo = [0] * MAX\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    info[l] += 1\n    info[r + 1] -= 1\n\nacc = 0\nfor ind, diff in enumerate(info):\n    acc += diff\n    if acc >= k:\n        info[ind] = 1\n    else:\n        info[ind] = 0\n\npref = list(accumulate(info))\nans = []\nfor i in range(q):\n    l, r = list(map(int, input().split()))\n    ans.append(str(pref[r] - pref[l - 1]))\n\nprint('\\n'.join(ans))\n", "n,k,q = list(map(int,input().split()))\nfrom itertools import accumulate\ncount = [0 for _ in range(200002)]\n\nfor _ in range(n):\n    l,r = list(map(int,input().split()))\n    count[l] += 1\n    count[r+1] -= 1\n\nok = 0\ncount2 = [0 for _ in range(200002)]\nfor i,v in enumerate(count):\n    ok += v\n    if ok >= k:\n        count2[i] = 1\n    else:\n        count2[i] = 0\nprefixe = list(accumulate(count2))\nres = []\nfor _ in range(q):\n    l,r = list(map(int,input().split()))\n    res.append(str(prefixe[r]-prefixe[l-1]))\nprint('\\n'.join(res))\n        \n    \n", "import sys\nn, k, q = map(int, sys.stdin.readline().split())\ncheck = [0]*200012\nfor i in range(n):\n    l, r = map(int,sys.stdin.readline().split())\n    check[l] += 1\n    check[r+1] -= 1\nfor i in range(200001):\n    check[i+1] += check[i]\n    if check[i] >= k:\n        check[i] = 1\n    else:\n        check[i] = 0\n\nfor i in range(200000):\n    check[i+1] += check[i]\n\n\nfor i in range(q):\n    count = 0\n    a, b = map(int, sys.stdin.readline().split())\n    sys.stdout.write(str(check[b] - check[a-1])+\"\\n\")", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return map(int, stdin.readline().split())\n#lines = stdin.readlines()\n\n\nn, k, q = rint()\nr = [0 for i in range(200001)]\nl = [0 for i in range(200001)]\n\nfor i in range(n):\n    ll, rr = rint()\n    r[rr] += 1\n    l[ll] += 1\n\nf = [0 for i in range(200001)]\nfor i in range(1,200001):\n    f[i] = f[i-1] + l[i] - r[i-1]\n\nss = [0 for i in range(200002)]\nfor i in range(200000, 0, -1):\n    if f[i] >= k:\n        ss[i] = ss[i+1] + 1\n    else:\n        ss[i] = ss[i+1]\n\nfor i in range(q):\n    ll, rr = rint()\n    print( ss[ll] - ss[rr+1])", "#!/usr/bin/env python3\nimport sys\nfrom itertools import accumulate\n\ndef main():\n    n, k, q = list(map(int, sys.stdin.readline().split()))\n    ary = [0] * 2000001\n    num_valid = [0] * 2000001\n    max_temp = -1\n    for __ in range(n):\n        s, t = list(map(int, sys.stdin.readline().split()))\n        ary[s-1] += 1\n        ary[t] -= 1\n\n    tot = 0\n    for indx in range(len(num_valid)-1):\n        tot += ary[indx]\n        num_valid[indx + 1] = num_valid[indx] + (tot >= k)\n\n    for __ in range(q):\n        s, t = list(map(int, sys.stdin.readline().split()))\n        print(num_valid[t]- num_valid[s -1])\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, k, q = list(map(int, input().split()))\n    l, res = [0] * 200002, []\n    for _ in range(n):\n        a, b = list(map(int, input().split()))\n        l[a] += 1\n        l[b + 1] -= 1\n    a = 0\n    for i, b in enumerate(l):\n        a += b\n        l[i] = a >= k\n    a = 0\n    for i, b in enumerate(l):\n        if b:\n            a += 1\n        l[i] = a\n    for _ in range(q):\n        a, b = list(map(int, input().split()))\n        res.append(l[b] - l[a - 1])\n    print('\\n'.join(map(str, res)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# IAWT\nn, k, q = list(map(int, input().split()))\nl = [list(map(int, input().split())) for i in range(n)]\nqs = [list(map(int, input().split())) for i in range(q)]\n\ndef answer(q):\n    a, b = q\n    if a == 1:\n        print(l3[b-1])\n    else:\n        print(l3[b-1]-l3[a-2])\n\nl2 = [0] * 200000\nl3 = [0] * 200000\nadds = [0] * 200000\nmins = [0] * 200000\nfor r in l:\n    adds[r[0]-1] += 1\n    mins[r[1]-1] += 1\nl2[0] = adds[0] - mins[0]\nif adds[0] >= k: l3[0] = 1\nfor i in range(1, 200000):\n    l2[i] = l2[i-1] + adds[i]\n    if l2[i] >= k:\n        l3[i] = 1\n    l2[i] -= mins[i]\n\nfor i in range(1, 200000):\n    l3[i] = l3[i-1] + l3[i]\n\nfor q in qs:\n    answer(q)\n", "import math\nfrom sys import stdin, stdout\ninput = stdin.readline\n\n\nclass N:\n    def __init__(self, il, ir, val, l, r):\n        self.il = il\n        self.ir = ir\n        self.val = val\n        self.l = l\n        self.r = r\n\n    def __str__(self):\n        return ' il = ' + str(self.il) + ' ir = ' + str(self.ir) + ' val = ' + str(self.val)\n\n    def get_amount(self,left,right,func):\n        if self.il==left and self.ir==right:\n            return self.val\n        elif self.l.il<=left and self.l.ir>=right:\n            return self.l.get_amount(left,right,func)\n        elif self.r.il<=left and self.r.ir>=right:\n            return self.r.get_amount(left,right,func)\n        else:\n            return func(self.l.get_amount(left,self.l.ir,func),self.r.get_amount(self.r.il,right,func))\n\n\nclass ST:\n    def __init__(self, arr, threshold):\n        t1 = []\n        t2 = []\n        for i, val in enumerate(arr):\n            t1.append(N(i, i, int(val >= threshold), None, None))\n        while len(t1) + len(t2) > 1:\n            while len(t1) >= 2:\n                a = t1.pop()\n                b = t1.pop()\n                t2.append(self.__get_next(a, b))\n            if len(t1) > 0:\n                t2.append(t1.pop())\n            t1, t2 = t2, t1\n        self.r = t1[0]\n\n    def __get_next(self, a, b):\n        if a.il > b.il:\n            a, b = b, a\n        n = N(a.il, b.ir, self.__func(a.val, b.val), a, b)\n        return n\n\n    def __func(self, a, b):\n        return a + b\n\n    def request(self, l, r):\n        root = self.r\n        answ = 0\n        if l == r:\n            while not (root.il == l and root.ir == r):\n                if l >= root.l.il and r <= root.l.ir:\n                    root = root.l\n                else:\n                    root = root.r\n            answ = self.__func(answ, root.val)\n            return answ\n\n        if root.il == l and root.ir == r:\n            return root.val\n        f = True\n        while f:\n            if root.l.il <= l and root.l.ir >= r:\n                root = root.l\n            elif root.r.il <= l and root.r.ir >= r:\n                root = root.r\n            else:\n                f = False\n        left = root.l\n        right = root.r\n        while not left.il == l:\n            if l < left.r.il:\n                answ = self.__func(answ, left.r.val)\n                left = left.l\n            else:\n                left = left.r\n        answ = self.__func(answ, left.val)\n\n        while not right.ir == r:\n            if r > right.l.ir:\n                answ = self.__func(answ, right.l.val)\n                right = right.r\n            else:\n                right = right.l\n        answ = self.__func(answ, right.val)\n        return answ\n\n    def req(self,l,r):\n        return self.r.get_amount(l,r,self.__func)\n\n\n\n'''\nclass ST:\n\n    def __init__(self, arr, min_r):\n        self.len = (math.ceil(math.log(len(arr), 2))) ** 2\n        self.t = [0] * (4 * len(arr))\n        for i in range(0, len(arr)):\n            self.t[self.len + i] = int(arr[i] >= min_r)\n\n        for i in range(self.len - 1, 0, -1):\n            self.t[i] = self.__func(self.t[i * 2], self.t[i * 2 + 1])\n\n    def __func(self, l, r):\n        return l + r\n\n    def request(self, left, right):\n        l = self.len + left\n        r = self.len + right\n        ans = 0\n        while l <= r:\n            if l % 2 == 1:\n                ans = self.__func(ans, self.t[l])\n            if r % 2 == 0:\n                ans = self.__func(ans, self.t[r])\n            l = int((l + 1) / 2)\n            r = int((r - 1) / 2)\n        return ans'''\n\ngradus = [0 for i in range(200002)]\nrecipes, min_r, questions = list(map(int, input().split()))\nadds = []\n\nfor i in range(recipes):\n    l, r = list(map(int, input().split()))\n    if l == r:\n        adds.append(l)\n    else:\n        gradus[l] -= 1\n        gradus[r+1] += 1\ncounter = 0\n\nfor i in range(0, len(gradus)):\n    if gradus[i] < 0:\n        counter += abs(gradus[i])\n    elif gradus[i] > 0:\n        counter -= gradus[i]\n    gradus[i] = counter\nfor i in adds:\n    gradus[i] += 1\n\ntree = ST(gradus, min_r)\nres = []\n\nfor i in range(questions):\n    l, r = list(map(int, input().split()))\n    res.append(str(tree.request(l, r)))\n\n\nprint('\\n'.join(res))\n", "import sys\n\ndef main():\n    n,k,q=list(map(int,sys.stdin.readline().split()))\n    maxtemp=200001\n    deltatemp_plus=[0]*maxtemp\n    deltatemp_minus=[0]*maxtemp\n    for i in range(n):\n        li,ri=list(map(int,sys.stdin.readline().split()))\n        deltatemp_plus[li]+=1\n        deltatemp_minus[ri]+=1\n    \n    temp=[0]*maxtemp\n    cumsum=0\n    for i in range(maxtemp):\n        cumsum+=deltatemp_plus[i]\n        temp[i]=cumsum\n        cumsum-=deltatemp_minus[i]\n    \n    goodtemp=[0]*maxtemp\n    goodtemp[0]=1 if temp[0]>=k else 0\n    for i in range(1,maxtemp):\n        adder=1 if temp[i]>=k else 0\n        goodtemp[i]=goodtemp[i-1]+adder\n        \n    for iq in range(q):\n        ai,bi=list(map(int,sys.stdin.readline().split()))\n        if ai==0: result=goodtemp[bi]\n        else: result=goodtemp[bi]-goodtemp[ai-1]\n        sys.stdout.write(str(result)+'\\n')\n    \nmain()\n\n", "n, k, q = map(int, input().split())\nc = [0] * 200003\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    c[a] += 1\n    c[b + 1] -= 1\n    \nfor i in range(1, len(c)):\n    c[i] += c[i-1]\n\nc[0] = 1 if c[0] >= k else 0\nfor i in range(1, len(c)):\n    c[i] = 1 if c[i] >= k else 0\n    c[i] += c[i-1]\n\nans = ''\nfor i in range(q):\n    a, b = map(int, input().split())\n    ans += str(c[b]-c[a-1]) + '\\n'\n\nprint(ans, end='')\n", "n, k, q = map(int, input().split())\nc = [0] * 200003\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    c[a] += 1\n    c[b + 1] -= 1\n    \nfor i in range(1, len(c)):\n    c[i] += c[i-1]\n\nc[0] = 1 if c[0] >= k else 0\nfor i in range(1, len(c)):\n    c[i] = 1 if c[i] >= k else 0\n    c[i] += c[i-1]\n\nans = ''\nfor i in range(q):\n    a, b = map(int, input().split())\n    ans += str(c[b]-c[a-1]) + '\\n'\n\nprint(ans, end='')\n", "n,m,k1=map(int,input().split())\nl1=[0]*200003\nfor i in range(n) :\n    a,b=map(int,input().split())\n    l1[a]+=1\n    l1[b+1]-=1\nfor i in range(1,200003) :\n    l1[i]=l1[i-1]+l1[i]\nl1[0]=0\nfor i in range(1,len(l1)) :\n    if l1[i]>=m :\n        l1[i]=l1[i-1]+1\n    else :\n        l1[i]=l1[i-1]\nV=''\nfor i in range(k1) :\n    a,b=map(int,input().split())\n    V+=str(l1[b]-l1[a-1])+'\\n'\nprint(V, end='')\n\n    \n\n", "n, k, q = map(int, input().split())\n\nx = [0] * 200005\n\nfor _ in range(n):\n    l, r = map(int, input().split())\n\n    x[l] += 1\n    x[r+1] -= 1\n\nfor i in range(1,200005):\n    x[i] += x[i-1]\n    x[i-1] = [0,1][x[i-1]>=k]\n\nfor i in range(1,200005):\n    x[i] += x[i-1]\n\nres = ''\n\nfor _ in range(q):\n    l, r = map(int, input().split())\n\n    res += str(x[r]-x[l-1]) + \"\\n\"\n\nprint(res, end='')\n", "import sys\ninput=sys.stdin.readline\nprint=sys.stdout.write\nn,k,q=map(int,input().split())\nar=[0]*(200000+2)\ndef f(l,r):\n    ar[l]+=1\n    ar[r+1]-=1\nfor x in range(n):\n    a,b=map(int,input().split())\n    f(a,b)\nfor x in range(1,200000+1):\n    ar[x]+=ar[x-1]\nfor x in range(1,200000+1):\n    ar[x]=ar[x] >= k\nfor x in range(1,200000+1):\n    ar[x]+=ar[x-1]\nfor el in range(q):\n    a,b=map(int,input().split())\n    print(str((ar[b]-ar[a-1]))+\"\\n\")"]