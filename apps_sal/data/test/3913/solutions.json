["N = int(input())\np = input()\nM = int(input())\nwords = [input() for _ in range(M)]\ncnt = 0\nletters = [set() for _ in range(M)]\nused = set()\nfor c in p:\n    used.add(c)\nfail = [False]*M\n\nfor i, w in enumerate(words):\n    for j, c in enumerate(w):\n        if p[j] == '*':\n            letters[i].add(c)\n            if c in used:\n                fail[i] = True\n        elif p[j] != c:\n            fail[i] = True\n\nfor i in range(26):\n    ch = chr(ord('a') + i)\n    ok = True\n    for i, s in enumerate(letters):\n        ok = ok and (ch in s or fail[i])\n    if ok: cnt += 1\nprint(cnt)\n", "from string import ascii_lowercase as lower\n\nchar = int(input())\n\ns = input()\nnew = [input() for k in range(int(input()))]\n\nused = set()\ncan_be_said = set(lower)\nindices = []\nothers = []\n\nfor index in range(char):\n    if s[index] != '*':\n        used.add(s[index])\n        others.append(index)\n    else:\n        indices.append(index)\n\nfor word in new:\n    now = set()\n    \n    for i in indices:\n        now.add(word[i])\n\n    is_ = True\n    for i in others:\n        if (s[i] != word[i]):\n            is_ = False\n    if not is_:\n        continue\n        \n    if len(now.intersection(used)) == 0:\n        can_be_said = can_be_said.intersection(now)\n\ncan_be_said = can_be_said - used\nprint(len(can_be_said))\n", "import math\nimport re\nimport string\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\ndef ri():\n    return int(input())\n\n\ndef rfa():\n    return [float(i) for i in input().split()]\n\n\neps = 1e-9\n\n\ndef is_equal(a, b):\n    return abs(a - b) <= eps\n\n\ndef distance(p0, p1):\n    return math.sqrt((p0[0] - p1[0]) ** 2 + (p0[1] - p1[1]) ** 2)\n\n\nN = ri()\nhid = input()\nmpk = {}\ntotalKek = 0\nfor n, i in enumerate(string.ascii_lowercase):\n    mpk[i] = 1 << n\n    totalKek |= mpk[i]\n\nM = ri()\nrevealed = 0\nfor i in hid:\n    if i != '*':\n        revealed |= mpk[i]\nisAny = False\n\nfor i in range(M):\n    t = input()\n    isAny=True\n    bad = False\n    hidBit = 0\n\n    for n, j in enumerate(t):\n        if hid[n] != '*':\n            if hid[n] != t[n]:\n                bad = True\n            continue\n\n\n        hidBit |= mpk[j]\n    if hidBit & revealed != 0 or bad:\n        continue\n    totalKek &= hidBit\n\nif isAny:\n    print(str(bin(totalKek)).count('1'))\nelse:\n    exit(-1)", "n = int(input())\ns = input()\n\nlr = []\nr = []\nw = set()\nfor i in range(len(s)):\n\tif s[i] == '*':\n\t\tlr.append(i)\n\telse:\n\t\tr.append(i)\n\t\tw.add(s[i])\nm = int(input())\n\nk = None\nfor i in range(m):\n\te = input()\n\tf = False\n\tfor j in lr:\n\t\tif e[j] in w:\n\t\t\tf = True\n\t\t\tbreak\n\tfor j in r:\n\t\tif e[j] != s[j]:\n\t\t\tf = True\n\t\t\tbreak\n\tif f:\n\t\tcontinue\n\tif k is None:\n\t\tk = set(e[i] for i in lr)\n\telse:\n\t\tu = set(e[i] for i in lr)\n\t\tk = k.intersection(u)\n\nprint(len(k))", "n = int(input())\ns = input()\na = []\nm = int(input())\nfor i in range(m):\n    line = input()\n    st = set()\n    flag = False # \u65e0\u6548\n    for i in range(n):\n        if s[i] == '*':\n            st.add(line[i])\n        elif s[i] != line[i]:\n            flag = True\n    for i in range(n):\n        if s[i] in st:\n            flag = True\n            break\n    if flag:\n        continue\n    if len(st) > 0:\n        a.append(st)\nx = [0 for i in range(30)]\nfor e in a:\n    for t in e:\n        x[ord(t) - ord('a')] += 1\nans = 0\nfor i in range(30):\n    if x[i] == len(a):\n        ans += 1\nprint(ans)\n#print(x)\n#print(a)\n", "n=int(input())\ns=input().strip()\nm=int(input())\nl=[]\nl1=[]\nlmain=[]\nfor i in range(26):\n    l.append(0)\n    lmain.append(0)\nfor i in s:\n    if (i!='*'):\n        lmain[ord(i)-97]=1\nfor i in range(m):\n    s1=input().strip()\n    f=0\n    for j in range(n):\n        if (s[j]=='*' and lmain[ord(s1[j])-97]==1):\n            f=1\n            break\n        elif (s[j]!='*'):\n            if (s1[j]!=s[j]):\n                f=1\n                break\n    if (f==0):\n        l1.append(s1)\nlength=len(l1)\nfor i in range(length):\n    l2=[]\n    s1=l1[i]\n    for j in range(26):\n        l2.append(0)\n    for j in range(n):\n        if (s[j]=='*'):\n            if (l2[ord(s1[j])-97]!=1):\n                l[ord(s1[j])-97]+=1\n                l2[ord(s1[j])-97]=1\nprint(l.count(length))\n", "n = int(input())\ns = input()\n\nmp = dict()\nst = [0]*n\nk = 0\nfor i in s:\n\tif i.isalpha()==True:\n\t\tmp[i] = -1\n\telse:\n\t\tst[k] = 1\n\tk+=1\n\nq = int(input())\ntp = q\nfor i in range(q):\n\ts2 = input()\n\tcns = 0\n\tflag = 1\n\tfor i in range(n):\n\t\tif s[i]!=s2[i] and not st[i]:\n\t\t\ttp-=1\n\t\t\tflag = 0\n\t\t\tbreak\n\t\telif s2[i] in list(mp.keys()) and mp[s2[i]]==-1 and st[i]:\n\t\t\ttp-=1\n\t\t\tflag = 0\n\t\t\tbreak\n\tif flag :\n\t\taz = [0]*26\n\t\tfor i in range(n):\n\t\t\tif s2[i] not in list(mp.keys()):\n\t\t\t\tmp[s2[i]]=1\n\t\t\t\taz[ord(s2[i])-97] = 1\n\t\t\telif mp[s2[i]]!=-1 and not az[ord(s2[i])-97]:\n\t\t\t\tmp[s2[i]]+=1\n\t\t\t\taz[ord(s2[i])-97] = 1\ncns = 0\n\nfor i in list(mp.keys()):\n  if mp[i]==tp:\n    cns+=1\nprint(cns)\n", "n = int(input())\nS = input()\nHaveLetters = set(list(S))\nm = int(input())\nwords = []\nCanLetters = set([chr(i) for i in range(ord(\"a\"), ord(\"z\") + 1)]) - HaveLetters\nfor _ in range(m):\n    Word = input()\n    for i in range(n):\n        if S[i] == \"*\":\n            if Word[i] in HaveLetters:\n                break\n        else:\n            if Word[i] != S[i]:\n                break\n    else:\n        words += [Word]\nans = 0\nfor letter in CanLetters:\n    can = True\n    for Word in words:\n        if letter not in Word:\n            can = False\n            break\n    if can:\n        ans += 1\nprint(ans)\n\n", "import string\ninput() # ignore length of word\nalready_revealed = input()\n\nn = int(input())\n\nindeces = [i for i, x in enumerate(already_revealed) if x == \"*\"]\nrevealed_letters = set(already_revealed)\n\nend_set = set(string.ascii_lowercase + \"%\")\nfor i in range(n):\n  word = input()\n  \n  #check word\n  word_ok = True\n  for i, char in enumerate(word):\n    if i not in indeces:\n      if already_revealed[i] != char:\n        word_ok = False\n        \n  if not word_ok:\n    continue\n  \n  possible_letters = set(word[index] for index in indeces)\n  if len(possible_letters.intersection(revealed_letters)) > 0:\n    continue\n  \n  end_set = possible_letters.intersection(end_set)\n\nif len(end_set) == 27:\n  print(0)\nelse:\n  print(len(end_set))", "n=int(input())\ns=input()\ne=set()\nnbret=0\nfor x in s:\n    if x=='*':\n        nbret+=1\n    else:\n        e.add(x)\nm=int(input())\n\nmini=nbret\nL=[]\nfor i in range(m):\n    e1=set()\n    s1=input()\n    for k,x in enumerate(s1):\n        if s[k]!=\"*\" and x!=s[k]:\n            e1.clear()\n            break\n        if s[k]=='*' and x in e:\n            e1.clear()\n            break\n        if s[k]=='*' and x not in e:\n            e1.add(x)\n    if len(e1)>0:\n        L.append(e1)\ne=L[0]\nmaxi=len(e)\nfor i in range(1,len(L)):\n    if len(L[i])>maxi:\n        maxi=len(L[i])\n    e=e & L[i]\n\nprint(len(e))\n\n#if len(e)==0:\n#    if m==2:\n#        print(maxi)\n#else:\n#    print(len(e))\n        \n#if len(e)>0 and len(e)<=nbret:\n\n#else:\n #   print(0)\n", "#while True:\nn = int(input())\nmark = [0]*26\nnotinclude = [0]*10001\ns = input()\nt = int(input()) \ndata = [ input() for _ in range(t)]\nfor i in s:\n    if i != '*':\n        mark[ord(i)-97]=1\nsets = {}\nfor j in range(t):\n    sets[j]=set()\n    for i in range(n):\n        if s[i]=='*':\n            if mark[ord(data[j][i])-97]==0:\n                sets[j].add(data[j][i])\n            else:\n                notinclude[j]=1\n        elif s[i]!=data[j][i]:\n            notinclude[j]=1\n            \nans=set(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])\ntemp=0\n#print(sets)\nfor i in sets:\n    if len(sets[i]) and notinclude[i]==0:\n        temp=1\n        ans = ans&sets[i]\n#print(ans)\nprint(0 if temp==0 else len(ans))\n\n''' input\n2\n**\n3\nba\nba\nba\n\n'''\n", "n=int(input())\ns=list(input())\ndis=[]\nind=[]\nii=[]\nfor i in range(n):\n    if(s[i]!='*'):\n        dis.append(s[i])\n        ii.append(i)\n    else:\n        ind.append(i)\ndi=set(dis)\nc=[]\nm=int(input())\nfor i in range(m):\n    t=list(input())\n    dp=0\n    for j in ii:\n        if(t[j]!=s[j]):\n            dp=1\n            break\n    if(dp==0):\n        q=[]\n        for j in ind:\n            q.append(t[j])\n        q=set(q)\n        oo=len(q)\n        q=q-di\n        ooo=len(q)\n        if(len(q)!=0 and oo==ooo):\n            c.append(q)\n\nif(len(c)==0):\n    print(0)\nelse:\n    ss=c[0]\n    l=len(c)\n    for i in range(1,l):\n        ss=ss.intersection(c[i])\n    print(len(ss))", "n = int(input())\nword = input()\n\nast = word.count('*')\nmas = [i for i in range(n) if word[i] == '*']\nmas1 = [i for i in range(n) if word[i] != '*']\nst = [word[i] for i in range(n) if word[i] != '*']\n\nm = int(input())\nMas = list()\nfor i in range(m):\n    temp = input()\n    f = True\n    for j in mas1:\n        if temp[j] != word[j]:\n            f = False\n            break\n    if f:\n        t = [temp[k] for k in mas if temp[k] not in st]\n        if len(t) == ast:\n            Mas.append(set(t))\n\nans = set()\nfor el in Mas:\n    ans |= el\n\ncount = 0\nfor i in ans:\n    f = True\n    for j in Mas:\n        if i not in j:\n            f = False\n            break\n    if f:\n        count += 1\n\nprint(count)\n", "n = int(input())\ns = input()\nm = int(input())\nl = []\ncnt_ = []\ncnt = []\nfor i in range(n):\n\tif s[i]=='*':\n\t\tcnt_.append(i)\n\telse: cnt.append(i)\nfor x in range(m):\n\tflag = True\n\tst = input()\n\tfor j in cnt_:\n\t\tif st[j] in s:\n\t\t\tflag = False\n\telse:\n\t\tfor j in cnt:\n\t\t\tif st[j]!=s[j]: flag =False\n\tif flag:\n\t\tl.append(st)\ng = [[] for i in range(len(l))]\nfor i in range(len(l)):\n\tfor j in cnt_:\n\t\tg[i].append(l[i][j])\nfor i in range(len(g)):\n\tg[i] = list(set(g[i]))\nans = 0\nfor ch in g[0]:\n\tfor li in g:\n\t\tif ch not in li: break\n\telse: ans = ans+1\nprint(ans)", "n = int(input())\nword = input()\n\nast = word.count('*')\nmas = [i for i in range(n) if word[i] == '*']\nmas1 = [i for i in range(n) if word[i] != '*']\nst = {word[i] for i in mas1}\n\nm = int(input())\nMas = list()\nfor i in range(m):\n    temp = input()\n    f = True\n    for j in mas1:\n        if temp[j] != word[j]:\n            f = False\n            break\n    if f:\n        t = [temp[k] for k in mas if temp[k] not in st]\n        if len(t) == ast:\n            Mas.append(set(t))\n\nans = set()\nfor el in Mas:\n    ans |= el\n\ncount = 0\nfor i in ans:\n    f = True\n    for j in Mas:\n        if i not in j and len(j) > 0:\n            f = False\n            break\n    if f:\n        count += 1\n\nprint(count)\n", "#python 3.5.2\n\nn = int(input())\nkataawal = input()\n\npos = []\nposmuncul = []\nmuncul = set()\nfor i,x in zip(range(n),kataawal):\n    if (x == '*'):\n        pos.append(i)\n    else:\n        muncul.add(x)\n        posmuncul.append(i)\n\nm = int(input())\nbelum = []\nfor i in range(m):\n    kata = input()\n    yay = set()\n    cancel = False\n    for x in posmuncul:\n        if (kata[x] != kataawal[x]):\n            cancel = True\n            break\n            \n    if (not cancel):\n        for x in pos:\n            if (kata[x] in muncul):\n                cancel = True\n                break\n            else:\n                yay.add(kata[x])\n\n        if (not cancel):\n            belum.append(yay)\n\nif (len(belum) > 1):\n    hoo = belum[0]\n    for sett in belum[1:]:\n        hoo = hoo.intersection(sett)\n    print(len(hoo))\nelif(len(belum) == 0):\n    print(0)\nelse:\n    print(len(belum[0]))", "import string\nm = int(input())\nword = input()\nwords = set()\nstars = set()\nlet = {a for a in string.ascii_lowercase}\nfor i in range(0, len(word)):\n    if word[i] == '*':\n        stars.add(i)\n    else:\n        words.add(word[i])\n\nn = int(input())\ntse = set()\nfor i in range(0, n):\n    st = input()\n    for j in stars:\n        tse.add(st[j])\n    flag = True\n    j = 0\n    while j < m and (st[j] == word[j] or j in stars):\n        j += 1\n\n    if len(tse.intersection(words)) != 0 or j != m:\n        tse.clear()\n        continue\n    let = let.intersection(tse)\n    tse.clear()\n\nif len(stars) == 0:\n    print(0)\nelse:\n    print(len(let))\n", "from collections import defaultdict\n\ndef get_revealed(hid):\n\trevealed = set()\n\tfor ch in hid:\n\t\tif ch!='*':\n\t\t\trevealed.add(ch)\n\treturn revealed\n\ndef test_already_shown(s1,s2):\n\tfor i in range(len(s1)):\n\t\tif s1[i]!='*' and s1[i]!=s2[i]:\n\t\t\treturn False\n\treturn True\n\ndef check_revealed_present(s1,s2,revealed):\n\tfor i in range(len(s1)):\n\t\tif s1[i]=='*':\n\t\t\tif s2[i]  in revealed:\n\t\t\t\treturn False\n\treturn True\n\ndef process(s1,s2,d):\n\ttemp = set()\n\tfor i in range(len(s1)):\n\t\tif s1[i]=='*':\n\t\t\ttemp.add(s2[i])\n\tfor i in temp:\n\t\tif i not in d:\n\t\t\td[i] = 1\n\t\telse:\n\t\t\td[i]+=1\n\treturn d\n\n\nn = int(input())\nhid = input()\nrevealed = get_revealed(hid)\n#print(revealed)\nm = int(input())\nx = 0\nd = {}\nfor i in range(m):\n\ts = input()\n\tif not test_already_shown(hid,s):\n\t\tcontinue\n\tif not check_revealed_present(hid,s,revealed):\n\t\tcontinue\n\td = process(hid,s,d)\n\t#print(\"sad\")\n\tx+=1\nans = 0\n#print(x,revealed,d)\nfor i in d:\n\tif d[i]==x:\n\t\tans+=1\nprint(ans)\n\n\n\n\n\n", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2017/10/22 17:36\n\n\"\"\"\n\nN = int(input())\nW = input()\nM = int(input())\n\nwords = set()\nfor i in range(M):\n    words.add(input())\n\nrevealed = set(W) - {'*'}\nidx = [i for i, w in enumerate(W) if w == '*']\nbadwords = set()\nguesses = set()\n\nfor i in idx:\n    for u in words:\n        if u[i] in revealed:\n            badwords.add(u)\n\nfor i, w in enumerate(W):\n    if w != '*':\n        for u in words:\n            if u[i] != w:\n                badwords.add(u)\n\n\nwords -= badwords\n\nfor i in idx:\n    w = W[i]\n    for u in words:\n        c = u[i]\n        guesses.add(c)\n\nans = 0\nfor g in guesses:\n    left = {v for v in words}\n    for i in idx:\n        for w in {v for v in left}:\n            if w[i] == g:\n                left.remove(w)\n    if not left:\n        ans += 1\n\nprint(ans)", "n=int(input())\ns=input()\nmask=0\nisunknown=[0]*n\nfor i in range(n):\n    if s[i] != '*':\n        mask|=1<<(ord(s[i])-97)\n    else:\n        isunknown[i]=1\nm=int(input())\nans = (1<<26)-1\nfor i in range(m):\n    words=input()\n    umask=0\n    li=[]\n    for j in range(n):\n        if isunknown[j]:\n            umask|=1<<(ord(words[j])-97)\n            li.append('*')\n        else:\n            li.append(words[j])\n    if umask&mask or s!=''.join(li): continue\n    ans&=umask\nrealans=0\nwhile ans:\n    realans+=ans&1\n    ans>>=1\nprint(realans)\n", "c = input()\ns = input()\n\nstar = []\nno_star = []\nfor i in range(len(s)):\n    if s[i] == '*':\n        star.append(i)\n    else:\n        no_star.append(i)\n\nn = int(input())\nd = {}\nskip = 0\nfor i in range(n):\n    s1 = input()\n    ext = 0\n    for i in no_star:\n        if s1[i] not in s:\n            ext = 1\n    for i in star:\n        if s1[i] in s:\n            ext = 1\n            break\n    if ext == 1:\n        skip+=1\n        continue\n    mas = []\n    for i in star:\n        mas.append(s1[i])\n    mas = list(set(mas))\n    for i in mas:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\nans = 0\nfor i in d:\n    if d[i] == n-skip:\n        ans+=1\nprint (ans)\n", "n = int(input())\ns = input()\nalready = set()\nfor i in s:\n    if i != '*':\n        already.add(i)\nans = [chr(ord('a') + i) for i in range(26)]\nans = set(ans)\nfor i in range(int(input())):\n    cur = input()\n    can = True\n    clos = set() #should be closed\n    for j in range(n):\n        if s[j] == '*':\n            clos.add(cur[j])\n        elif s[j] != cur[j]:\n            can = False\n            break\n    if can:\n        if (already & clos) != set():\n            can = False\n    if can:\n        ans = (ans & clos)\nprint(len(ans))\n", "import string\n\nn = int(input())\nw = input()\nlet = set(filter(lambda x: x != '*', w))\nans = None\nfor _ in range(int(input())):\n\tv = input()\n\tcheck = True\n\tfor c in let:\n\t\tcheck &= not [1 for a, b in zip(w, v) if (a == c) ^ (b == c)]\n\tif check:\n\t\tif ans is None:\n\t\t\tans = set(v) - let\n\t\tans &= set(v) - let\nprint(len(ans))", "import string\nn = int(input())\ns = list(str(input()))\nm = int(input())\nl = []\nresult = 0\nfor i in range(m):\n    l.append(list(str(input())))\n#print(l)\nindex = []\nhave = []\nfor i in range(n):\n    if s[i] == '*':\n        index.append(i)\n    else:\n        have.append(s[i])\nhave = set(have)\n#print(index)\n#print(have)\nt = [1 for i in range(m)]\nc = len(index)\nfor i in range(m):\n    for j in index:\n        if (l[i])[j] in have:\n            t[i] = 0\n            break\nfor j in range(m):\n    for i in range(n):\n        if i not in index:\n            if (l[j])[i] != s[i]:\n                t[j] = 0\n                break\n\nnew = []\nfor i in range(m):\n    if t[i] == 1:\n        new.append(l[i])\n#print(new)\n\nalph = list(string.ascii_lowercase)\nfor i in have:\n    alph.remove(i)\nll = len(new)\nfor i in alph:\n    count = 0\n    for j in range(len(new)):\n        for k in index:\n            if (new[j])[k] == i:\n                count += 1\n                break\n    if count == ll:\n        result += 1\nprint(result)", "l = int(input())\nsecret = input()\nindexes = []\nnoLetters = []\nalph = \"\"\n\nfor i in range(len(secret)):\n\tif secret[i] == \"*\":\n\t\tindexes.append(i)\n\telse:\n\t\tnoLetters.append(secret[i])\n\nn = int(input())\ndico = []\nfor _ in range(n):\n\tword = input()\n\ts = \"\"\n\tok = True\n\tfor i in range(len(word)):\n\t\tif i in indexes and word[i] not in noLetters:\n\t\t\ts+=word[i]\n\t\telif word[i] != secret[i]:\n\t\t\tok = False\n\t\t\tbreak\n\tif ok and s != \"\" and s not in dico:\n\t\tdico.append(s)\n\t\tfor c in s:\n\t\t\tif c not in alph:\n\t\t\t\talph+=c\n\ntotal = 0\nfor c in alph:\n\tok = True\n\tfor w in dico:\n\t\tif c not in w:\n\t\t\tok = False\n\t\t\tbreak\n\tif ok:\n\t\ttotal+=1\nprint(total)\n\n\n\n"]