["def solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    x, A = A[0], A[1:]\n    A = [(A[i], i + 2) for i in range(len(A))]\n    A.sort(reverse=True)\n\n    cnt = 1\n    msg = x\n    total = 1\n    for a in A:\n        if not msg:\n            print(-1)\n            return\n        msg += a[0] - 1\n        total += a[0]\n        cnt += 1\n        if total >= n:\n            break\n\n    print(n - 1)\n    total = x\n    for j in range(min(x, len(A))):\n        print(1, A[j][1])\n    if total >= n - 1:\n        return\n    for i in range(len(A)):\n        for j in range(total, min(total + A[i][0], len(A))):\n            print(A[i][1], A[j][1])\n            total += 1\n            if total >= n - 1:\n                return\n\n\nsolve()", "n=int(input())\na=[int(i) for i in input().split()]\nif sum(a)<n-1 or a[0]==0:\n    print(-1)\nelse:\n    a=[(a[i],i+1) for i in range(n)]\n    p=a[0]\n    a.pop(0)\n    a.sort(reverse=True)\n    a.insert(0,p)\n    ans=[]\n    ck=1\n    for i in range(n):\n        for j in range(a[i][0]):\n            if ck>=n:\n                break\n            ans.append((a[i][1],a[ck][1]))\n            ck+=1\n    print(len(ans))\n    for i,j in ans:\n        print(i,j)", "import itertools\n\nn = int(input())\na = list(map(int, input().split()))\na = [(a[0], 1)] + sorted(zip(a[1:], itertools.count(2)), reverse=True)\nw = 1\nans = [ ]\nfor r, cur in enumerate(a):\n    if r == w:\n        print(-1)\n        break\n    while w != n and cur[0] > 0:\n        ans.append(\"%s %s\" % (cur[1], a[w][1]))\n        cur = (cur[0] - 1, cur[1])\n        w += 1\nelse:\n    print(len(ans))\n    print('\\n'.join(ans))\n", "n = int(input())\narr = [[i,int(c)] for i, c in enumerate(input().strip().split(' '))]\np = arr[0]\narr = arr[1:]\narr.sort(key=lambda i: i[1], reverse=True)\ncount = p[1]\ni = 0\ncheck = True\nwhile i < len(arr):\n  if count == 0:\n    print(-1)\n    check = False\n    break\n  count += arr[i][1]\n  count -= 1\n  i += 1\nif check:\n  ar = []\n  count = 0\n  cur = p\n  stock, stock_n = [], 0\n  i = 0\n  while i < len(arr):\n    ar.append([cur[0]+1, arr[i][0]+1])\n    count += 1\n    stock.append(arr[i])\n    cur[1] -= 1\n    if cur[1] == 0:\n      cur = stock[stock_n]\n      stock_n += 1\n    i += 1\n  print(count)\n  for i in ar:\n    print(i[0], i[1])", "input()\npower = list(map(int, input().split()))\nn = len(power)\n\nps = [0] + sorted(range(1, n), key=lambda i: -power[i])\n\nout = []\nbonus = [0] * power[0]\ni = 1\nwhile i < n and bonus:\n    out.append((bonus.pop(), ps[i]))\n    bonus.extend([ps[i]] * max(0, power[ps[i]]))\n    i += 1\n\nif i != n:\n    print(-1)\nelse:\n    print(len(out))\n    print(*[\"%s %s\" % (a + 1, b + 1) for a, b in out], sep=\"\\n\")", "#!/usr/bin/env python3\n\ndef notify(xs, xs_sorted, ind_sorted, n, answer):\n    if not xs_sorted[ind_sorted][1]:\n        return\n\n    ind = xs_sorted[ind_sorted][0]\n\n    i = 0\n    while i < n and xs[ind] > 0:\n        if i == ind_sorted or xs_sorted[i][1]:\n            i += 1\n            continue\n\n        xs_sorted[i][1] = True\n        xs[ind] -= 1\n        answer.append((ind + 1, xs_sorted[i][0] + 1))\n        i += 1\n\n\ndef main():\n    n = int(input())\n    xs = [int(x) for x in input().split()]\n    xs_sorted = sorted(([i, i == 0, x] for (i, x) in enumerate(xs)), key=lambda x: x[2], reverse=True)\n\n    answer = []\n    f = xs_sorted.index([0, True, xs[0]])\n    # print(f)\n    notify(xs, xs_sorted, f, n, answer)\n\n    for i in range(n):\n        if i != f:\n            notify(xs, xs_sorted, i, n, answer)\n\n    # print(xs_sorted)\n    # print(answer)\n\n    if all(x[1] for x in xs_sorted):\n        print(len(answer))\n        for a, b in answer:\n            print(a, b)\n    else:\n        print(-1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def run():\n    input()\n    a = list(enumerate(list(map(int, input().split()))))\n    a = [a[0]] + sorted(a[1:], key=lambda k: k[1], reverse=True)\n    head, tail, ans = 0, 1, []\n    while head < tail < len(a):\n        if a[head][1] > 0:\n            ans.append((a[head][0], a[tail][0]))\n            a[head] = (a[head][0], a[head][1] - 1)\n            tail += 1\n        else:\n            head += 1\n    if tail == len(a):\n        print(len(ans))\n        for x, y in ans:\n            print(x + 1, y + 1)\n    else:\n        print(-1)\n\ndef __starting_point():\n    run()\n\n\n__starting_point()", "n = int(input())\ncounts = list(map(int, input().split()))\nai = [-1] * n\n\nif counts[0] > 0 and sum(counts) >= n - 1:\n    print(n - 1)\n    k = sum(counts) - n + 1\n    ai[0] = counts[0]\n    counts[0] = -1\n    boolean = True\n    while min(ai) == -1:\n        j = 0\n        boolean = False\n        for j in range(n):\n            while ai[j] > 0 and min(ai) == -1:\n                i = counts.index(max(counts))\n                ai[j] -= 1\n                ai[i] = counts[i]\n                counts[i] = -1\n                print(j + 1, i + 1)\n\nelse:\n    print(-1)", "n = int(input())\nL = list(map(int, input().split()))\nif sum(L) < n - 1 or L[0] == 0:\n    print(-1)\nelse:\n    print(n - 1)\n    count = 1\n    M = [True] + [False] * (n - 1)\n    while count < n:\n        a = 0\n        b = 0\n        while L[a] == 0 or M[a] == False:\n            a += 1\n        boltun = -1\n        for i in range(1, n):\n            if L[i] > boltun and M[i] == False:\n                b = i\n                boltun = L[i]\n        print(a + 1, b + 1)\n        L[a] -= 1\n        M[b] = True\n        count += 1\n                \n            \n", "\nn = int(input())\na = list([int(x) for x in input().split(' ')])\n\na[1:] = sorted(enumerate(a[1:]), key=lambda x: x[1], reverse=1)\na[0] = (0, a[0])\nfor i in range(1, len(a)): a[i] = (a[i][0] + 1, a[i][1])\n\n#print(a)\n\nreceived = [0]*n\np = 1\npair = []\n\nfor i in range(n):\n  #print(i >= p)\n  if i >= p or p >= n: break\n  #print('-', a[i][0])\n  for j in range(a[i][1]):\n    #print(p, a[p])\n    pair.append((a[i][0], a[p][0]))\n    p += 1\n    if p == n: break\n\nif p < n: print(-1)\nelse: print(str(len(pair))+ '\\n' + str.join('\\n', ['{} {}'.format(p[0]+1, p[1]+1) for p in pair]))\n\n\n\n'''\n4\n1 2 1 0\n\n6\n2 0 1 3 2 0\n\n6\n2 3 2 0 1 0\n'''\n\n'''\n3\n1 0 0\n'''\n", "n = int(input())\nmes = [[int(m), idx] for idx, m in enumerate(input().split(), 1)]\nif sum(m[0] for m in mes) < n - 1 or not mes[0][0]:\n\tprint(-1)\n\treturn\n\nmes = [mes[0]] + sorted(mes[1:], reverse=True)\n\ncur = 0\nprint(n - 1)\nfor i in range(1, n):\n\twhile not mes[cur][0]:\n\t\tcur += 1\n\tprint(mes[cur][1], mes[i][1])\n\tmes[cur][0] -= 1\n", "n = int(input())\nstudents = list(map(int, input().split(' ')))\nindexes = list(zip(range(n),students))[1:]\nindexes.sort(key = lambda x: x[1], reverse = True)\nindexes = [(0,students[0])]+indexes\n#print(indexes)\nlast_informed_index = 0\nout = []\nlast_used = 0\nwhile last_informed_index<n and last_used!=n:\n\tif last_used<=last_informed_index:\n\t\tfor i in range(last_informed_index+1, min(last_informed_index+indexes[last_used][1]+1, n)):\n\t\t\tout.append(\"%d %d\"%(indexes[last_used][0]+1, indexes[i][0]+1))\n\t\tlast_informed_index=min(last_informed_index+indexes[last_used][1], n-1)\n\t\tlast_used+=1\n\telse:\n\t\tprint(-1)\n\t\treturn\nprint(len(out))\nprint('\\n'.join(out))", "#!/bin/python3\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\nINF = -100\n\n\ndef max_ind(array):\n    return array.index(max(array))\n\n\nanswer_str_arr = []\n\n\ndef dfs(first_index):\n    num_we_can_send = arr[first_index]\n    arr[first_index] = INF\n\n    #     to_send_arr = []\n    for i in range(0, num_we_can_send):\n        curr_max_ind = max_ind(arr)\n\n        if arr[curr_max_ind] == INF:\n            break\n\n        answer_str_arr.append(str(first_index + 1) + ' ' + str(curr_max_ind + 1))\n\n        dfs(curr_max_ind)\n\n\n# for ind in to_send_arr:\n#         bfs(ind)\n\n# arr[0] = INF\ndfs(0)\n\nis_huis = False\nfor el in arr:\n    if el > INF:\n        is_huis = True\n        break\n\nif is_huis:\n    print('-1')\nelse:\n    print(len(answer_str_arr))\n    for answer in answer_str_arr:\n        print(answer)", "from operator import itemgetter\n\nn = input()\nn = int(n)\na = str()\n\na = input()\na = a.split()\na = list(map(int, a))\n\nasum = sum(a)\n\nif a[0] == 0 or asum < n - 1:\n    print(-1)\n    return\n\nb1 = [0, a[:1][0]]\na2 = a[1:]\n\nb2 = list()\nfor i in range(0, n - 1):\n    b2.append([i + 1, a2[i]])\n\nb2 = sorted(b2, key=itemgetter(1), reverse=True)\nb = [b1] + b2\n\nc = 1\nai = 0\nprint(n - 1)\nfor el in b:\n    ai += 1\n    for i in range(0, el[1]):\n        print(el[0] + 1, ' ', b[c][0] + 1)\n        c += 1\n        if c == n:\n            return\n", "'''\ndef send_message(student):\n\tnonlocal data, last_student_that_knows, student_that_sends, number_of_messages, output\n\tfor i in range(data[student]):\n\t\tif last_student_that_knows == amount_of_students - 1:\n\t\t\tbreak\n\t\tlast_student_that_knows += 1\n\t\tnumber_of_messages += 1\n\t\toutput.append(\"{0} {1}\".format(student + 1, last_student_that_knows + 1))\n\t\tsend_message(last_student_that_knows)\n'''\n############################################\namount_of_students = int(input())\ndata = input().split(\" \")\nstudents = []\nfor i in range(len(data)):\n\tdata[i] = int(data[i])\n\tstudents.append(0)\nstudents[0] = 1 #\u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0437\u043d\u0430\u0435\u0442\n############################################\n\ndef max_unaware_student():\n\tnonlocal data, students, number_of_messages, output\n\tmax = -1\n\tstudent = -1\n\tfor i in range(len(data)):\n\t\tif data[i] > max and students[i] == 0: #\u0435\u0441\u043b\u0438 \u044d\u0442\u043e\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438 \u043e\u043d \u0435\u0449\u0451 \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\n\t\t\tmax = data[i]\n\t\t\tstudent = i\n\treturn student\n\ndef send_message(student):\n\tnonlocal data, students, number_of_messages, output\n\tfor i in range(data[student]):\n\t\tif min(students) == 1: #\u0435\u0441\u043b\u0438 \u043d\u0435\u0437\u043d\u0430\u044e\u0449\u0438\u0435 \u043a\u043e\u043d\u0447\u0438\u043b\u0438\u0441\u044c\n\t\t\tbreak\n\t\tnumber_of_messages += 1\n\t\trecipient = max_unaware_student()\n\t\toutput.append(\"{0} {1}\".format(student + 1, recipient + 1))\n\t\tstudents[recipient] = 1\n\t\tsend_message(recipient)\n\noutput = []\nnumber_of_messages = 0\n\nsend_message(0)\n\nif min(students) == 0:\n\tprint(\"-1\")\n\nelse:\n\tprint(number_of_messages)\n\tfor i in output:\n\t\tprint (i)\n\n", "\"\"\" Created by Shahen Kosyan on 3/4/17 \"\"\"\n\ndef __starting_point():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n\n    users = []\n    invited_users = []\n    messages_count = 0\n    output = ''\n    for i in range(len(arr)):\n        users.append([i, arr[i]])\n\n    sender = users[0]\n    users = users[1:]\n    users.sort(key=lambda row: row[1])\n\n    while messages_count != n - 1 and len(users) > 0:\n        invites_count = sender[1]\n        person = sender[0]\n        if invites_count == 0:\n            break\n        while invites_count != 0:\n            invited_user = users[len(users) - 1]\n            invited_users.append(invited_user)\n            users = users[:-1]\n            output += str(person + 1) + ' ' + str(invited_user[0] + 1) + '\\n'\n            invites_count -= 1\n            messages_count += 1\n            if messages_count == n - 1:\n                break\n\n        if len(invited_users) > 0:\n            sender = invited_users[0]\n            invited_users = invited_users[1:]\n\n    if messages_count < n - 1:\n        print(-1)\n    else:\n        print(messages_count)\n        print(output)\n\n__starting_point()", "n = int(input())\n\na = list(map(int, input().split()))\n\np = a[0]\na = [(p, 0)] + sorted([(a[i], i) for i in range(1, n)], reverse=True)\n\nresult = \"\"\n\ngot = {0}\n\nfor i in range(n):\n\ttemp_a = a[i][0]\n\ttemp_i = i + 1\n\n\twhile temp_a > 0 and temp_i < n:\n\t\tif temp_i not in got:\n\t\t\tgot.add(temp_i)\n\t\t\ttemp_a -= 1\n\t\t\tresult += str(a[i][1] + 1) + \" \" + str(a[temp_i][1] + 1) + \"\\n\"\n\n\t\ttemp_i += 1\n\nif len(got) < n:\n\tprint(-1)\nelse:\n\tprint(n - 1)\n\tprint(result)", "n = int(input())\na = list(enumerate(list(map(int, input().split())), start = 1))\na = [a[0]] + sorted(a[1:], key=lambda x: x[1], reverse=True)\n#print(a)\n\nused = [0] * n\nused[0] = 1\nans = [list() for i in range(n)]\ntotal = 0\nfor i in range(n):\n    if not(0 in used):\n        break\n    else:\n        cnt = 0\n        j = i + 1\n        if j != n:\n            while j < n and cnt < a[i][1]:\n                #print(i, j)\n                if not used[j]:\n                    used[j] = 1\n                    total += 1\n                    ans[i].append(a[j])\n                    cnt += 1\n                j += 1\nif 0 in used:\n    print(-1)\nelse:\n    print(total)\n    for i in range(n):\n        for j in range(len(ans[i])):\n            print(a[i][0], ans[i][j][0])", "def dfs(v):\n    was[v] = 1\n    cnt = 0\n    for i in range(v + 1, n):\n        if cnt >= a[v][0]:\n            break\n        if not was[i]:\n            cnt += 1\n            ans.append((a[v][1], a[i][1]))\n            dfs(i)\n\nn = int(input())\na = list(map(int, input().split()))\na = [(a[i], i + 1) for i in range(n)]\na = [a[0]] + sorted(a[1:])[::-1]\nans = []\nwas = [0] * n\ndfs(0)\nif was.count(0):\n    print(-1)\nelse:\n    print(len(ans))\n    [print(*i) for i in ans]", "n = int(input())\n\na = input()\na = list(map(int, a.split(' ')))\nuser_index = []\nrecived = []\nfor i in range(n):\n    user_index.append(i)\n    recived.append(0)\nrecived[0] = 1\ncount = 0\nanswer = ''\n\nk = 1\nwhile k < len(a):\n    for i in range(1, n-k):\n        if a[i] < a[i+1]:\n            a[i],a[i+1] = a[i+1],a[i]\n            user_index[i],user_index[i+1] = user_index[i+1],user_index[i]\n    k += 1\n\nif a[0] != 0:\n    for i in range(n):\n        user = 0\n        while(a[i] > 0 and sum(recived) != n):\n                user+=1\n                if(user < n and recived[user_index[user]] != 1):\n                    recived[user_index[user]] = 1\n                    count +=1\n                    answer += str(user_index[i] +1) + ' ' + str(user_index[user] +1) + '\\n'\n                    a[i] -= 1\n    if sum(recived) == n:\n        print (count)\n        print(answer)\n    else:\n        print(-1)\nelse:\n    print(-1)\n", "n=int(input())\nrdl = list(map(int, input().split()))\nif rdl[0]==0:\n    print(-1)\nelse:\n    summ=0\n    for i in range(len(rdl)):\n        summ=summ+rdl[i]\n    if summ<n-1:\n        print(-1)\n    else:\n        b=[]\n        for i in range(n-1):\n            b.append([0]*2)\n            b[i][0]=rdl[i+1]\n            b[i][1]=i+2\n        b.sort()\n        b.reverse()\n        b.insert(0,[rdl[0],1])\n        k=0\n        j=0\n        print(n-1)\n        l=j+1\n        while k!=n-1:\n            while b[j][0]>0 and k!=n-1:\n                print(b[j][1],b[l][1])\n                b[j][0]-=1\n                l+=1\n                k+=1\n            j+=1\n\n                   \n", "n = int(input())\nk = list(map(int, input().split()))\n\nif (k[0] == 0) or (sum(k) < (n-1)):\n    print(-1)\nelse:\n    print(n-1)\n    l = [i+1 for i in range(n) if k[i] != 0]\n    k1 = [i for i in k if i != 0]\n    ind = [i-1 for i in l]\n    m = [i+1 for i in range(n) if k[i] == 0]\n\n    for j in range(len(l)-1):\n        print(l[j], l[j+1])\n        k1[j]-=1\n        \n    count = 0\n    c = 0\n    q = k1[0]\n        \n    while count < len(m):\n        count+=1\n        if q == 0:\n            while q == 0:\n                c +=1\n                q = k1[c]                \n        print(ind[c]+1, m[count-1])\n        q-=1\n", "def multiple_max(lst, count):\n    result = []\n\n    for k in range(count):\n        max = -1\n        max_i = 0\n        for i in range(len(lst)):\n            if i not in result and not is_notified[i]:\n                if lst[i] > max:\n                    max = lst[i]\n                    max_i = i\n        if max != -1:\n            result.append(max_i)\n\n    return result\n\n\nn = input()\nmessage_counts = [int(x) for x in input().split(\" \")]\nis_notified = [False for x in range(len(message_counts))]\nis_notified[0] = True\nchat = []\n\n\ndef say(idx):\n    indices_to_say = multiple_max(message_counts, message_counts[idx])\n    if len(indices_to_say) is 0:\n        return\n\n    for idx_to_notify in indices_to_say:\n        is_notified[idx_to_notify] = True\n\n    for next_idx in indices_to_say:\n        message_counts[idx] -= 1\n        chat.append(str(idx + 1) + \" \" + str(next_idx + 1))\n        say(next_idx)\n\n\nsay(0)\n\nresult = True\nfor x in is_notified:\n    if not x:\n        result = False\n        break\n\nif result:\n    print(len(chat))\n    for message in chat:\n        print(message)\nelse:\n    print(-1)", "from collections import deque\n\nn, a = int(input()), list(map(int, input().split()))\na_sorted = sorted([a[i], i + 1] for i in range(1, n))\nmessages = []\nqueue = deque([[a[0], 1]])\nwhile a_sorted and queue:\n    cur = queue.popleft()\n    while cur[0] and a_sorted:\n        recipient = a_sorted.pop()\n        messages.append((cur[1], recipient[1]))\n        queue.append(recipient)\n        cur[0] -= 1\nif a_sorted:\n    print(-1)\nelse:\n    print(len(messages))\n    for message in messages:\n        print(*message)\n", "def send(id):\n    while a[id] > 0:\n        if len(g) < n:\n            li = a.copy()\n            li[id] = -1\n            while True:\n                k = li.index(max(li))\n                if k + 1 in g:\n                    li[k] = -1\n                else:\n                    break\n            g.append(k + 1)\n            actions.append('{} {}'.format(id + 1, g[-1]))\n            send(k)\n            a[id] -= 1\n        else:\n            break\n\n\nn = int(input())\na = list(map(int, input().split()))\nactions = []\ng = [1]\nsend(0)\nif len(g) < n:\n    print(-1)\nelse:\n    print(len(actions))\n    for line in actions:\n        print(line)\n"]