"""
def main():
	from sys import stdin,stdout
def __starting_point():
	main()
"""
'\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\tN,I =map(int,stdin.readline().split())\n\tvisited=list(0 for x in range(N))\n\tG=collections.defaultdict(list)\n\tgroups=[0]\n\tfor _ in range(I):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tG[a].append(b)\n\t\tG[b].append(a)\n\tq=collections.deque()\n\tflag=0\n\tfor i in range(N):\n\t\tif not visited[i]:\n\t\t\tq.append(i)\n\t\t\tvisited[i]=flag+1\n\t\t\tgroups[flag]+=1\n\t\t\twhile len(q):\n\t\t\t\ttop=q.popleft()\n\t\t\t\tfor j in G[top]:\n\t\t\t\t\tif visited[j]!=visited[top]:\n\t\t\t\t\t\tvisited[j]=flag+1\n\t\t\t\t\t\tgroups[flag]+=1\n\t\t\t\t\t\tq.append(j)\n\t\t\tflag+=1\n\t\t\tgroups.append(0)\n\tcounter=0\n\tfor i in range(len(groups)-1):\n\t\tfor j in range(i+1,len(groups)):\n\t\t\tcounter+=groups[i]*groups[j]\n\tstdout.write(str(counter))\ndef __starting_point():\n\tmain()\n'
"\nimport collections\nclass Graph:\n\tdef __init__(self):\n\t\tself.nodes=set()\n\t\tself.edges=collections.defaultdict(list)\n\t\tself.distances = {}\n\n\tdef add_node(self, value):\n\t\tself.nodes.add(value)\n\n\tdef add_edge(self, from_node, to_node, distance):\n\t\tself.edges[from_node].append(to_node)\n\t\tself.edges[to_node].append(from_node)\n\t\tself.distances[(from_node, to_node)] = distance\n\t\tself.distances[(to_node, from_node)] = distance\n\n\ndef dijsktra(graph, initial):\n\tvisited = {initial: 0}\n\tpath = {}\n\n\tnodes = set(graph.nodes)\n\n\twhile nodes:\n\t\tmin_node = None\n\t\tfor node in nodes:\n\t\t\tif node in visited:\n\t\t\t\tif min_node is None:\n\t\t\t\t\tmin_node = node\n\t\t\t\telif visited[node] < visited[min_node]:\n\t\t\t\t\tmin_node = node\n\n\t\tif min_node is None:\n\t\t\tbreak\n\n\t\tnodes.remove(min_node)\n\t\tcurrent_weight = visited[min_node]\n\n\t\tfor edge in graph.edges[min_node]:\n\t\t\tweight = current_weight + graph.distances[(min_node, edge)]\n\t\t\tif edge not in visited or weight < visited[edge]:\n\t\t\t\tvisited[edge] = weight\n\t\t\t\tpath[edge] = min_node\n\n\treturn visited, path\n\ndef main():\n\tfrom sys import stdin,stdout\n\tfor _ in range(int(stdin.readline())):\n\t\tn,m=map(int,stdin.readline().split())\n\t\tG=Graph()\n\t\tfor i in range(n):\n\t\t\tG.add_node(i+1)\n\t\tfor i in range(m):\n\t\t\ta,b,c=map(int,stdin.readline().split())\n\t\t\tG.add_edge(a,b,c)\n\t\tinitial=int(stdin.readline())\n\t\tv,p=dijsktra(G, initial)\n\t\t#print(v)\n\t\t#print(p)\n\t\tfor i in range(1,n+1):\n\t\t\tif i!=initial:\n\t\t\t\tk=v.get(i,-1)\n\t\t\t\tstdout.write(str(k)+' ')\n\t\tstdout.write('\n')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\tstring=stdin.readline().strip()\n\tl=len(string)\n\t#Triangle logic\t\n\t\n\tarrlen=(l*(l-1))//2\n\tarr=list(0 for x in range(arrlen))\n\tf=0\n\tc=l-1\n\tfor i in range(l-1):\n\t\tfor j in range(i+1,l):\n\t\t\tif string[i]==string[j]:\n\t\t\t\tarr[f+j-i-1]=1\n\t\tf+=c\n\t\tc-=1\n\t#print(arr)\n\tif any(arr):\n\t\t\n\telse:\n\t\tif l & 1:\n\t\t\tstdout.write('First')\n\t\telse:\n\t\t\tstdout.write('Second')\n\t#2-d Array Logic\n\tarr=list(list(0 for i in range(l)) for j in range(l))\n\tfor i in range(l):\n\t\tfor j in range(l):\n\t\t\tif string[i]==string[j]:\n\t\t\t\tarr[i][j]=1\n\tmaxim=0\n\tfor i in range(0,l*(l-1)-2,l+1):\n\t\ta,b=i+1,i+2\n\t\t#print(a,b)\n\t\tacount=0\n\t\tx=a//5\n\t\ty=a%5\n\t\tacount=arr[x][y]\t\t\n\t\tx-=1\n\t\ty-=1\n\t\twhile x>=0 and y>=0:\n\t\t\tacount+=arr[x][y]\n\t\t\tx-=1\n\t\t\ty-=1\n\t\tx=b//5\n\t\ty=b%5\n\t\tbcount=arr[x][y]\t\t\n\t\tx-=1\n\t\ty-=1\n\t\twhile x>=0 and y>=0:\n\t\t\tbcount+=arr[x][y]\n\t\t\tx-=1\n\t\t\ty-=1\n\t\tmaxim=max((acount,bcount,maxim))\n\tmaxim=max(maxim,arr[l-2][l-1])\n\tmaxim=(maxim<<1)^1\n\tdelta=l-maxim\n\tif delta & 1:\n\t\tstdout.write('Second')\n\telse:\n\t\tstdout.write('First')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\ts=stdin.readline().strip()\n\tcount=collections.Counter(s)\n\tl=list(filter(lambda x: count[x] & 1,list(x for x in count)))\n\tremoved=sum(list(count[x] for x in l))-max(list(count[x] for x in l)+[0])\n\tif removed & 1:\n\t\tstdout.write('Second')\n\telse:\n\t\tstdout.write('First')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tif m:\n\t\tdirty=sorted(map(int,stdin.readline().split()))\n\t\tif dirty[0]==1 or dirty[-1]==n:\n\t\t\tstdout.write('NO')\n\t\telse:\n\t\t\tflag=True\n\t\t\tfor i in range(m-2):\n\t\t\t\tif dirty[i+1]==dirty[i]+1 and dirty[i+2]==dirty[i]+2:\n\t\t\t\t\tflag=False\n\t\t\t\t\tbreak\n\t\t\tif flag:\n\t\t\t\tstdout.write('YES')\n\t\t\telse:\n\t\t\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES')\ndef __starting_point():\n\tmain()\n"
'\ndef main():\n\tfrom sys import stdin,stdout\n\tn,t=map(int,stdin.readline().split())\n\tarr=list(map(int,stdin.readline().split()))\n\tmaxim=0\n\tcurr_sum=arr[0]\n\ti=0\n\tj=1\n\tif curr_sum <=t:\n\t\tcount=1\n\telse:\n\t\tcurr_sum=0\n\t\tcount=0\n\t\ti=1\n\t\tj=2\n\twhile j<n:\n\t\tif curr_sum+arr[j]<=t:\n\t\t\tcount+=1\n\t\t\tcurr_sum+=arr[j]\n\t\t\tj+=1\n\t\telse:\n\t\t\tmaxim=max(count,maxim)\n\t\t\tif curr_sum:\n\t\t\t\tcurr_sum-=arr[i]\n\t\t\t\tcount-=1\n\t\t\telse:\n\t\t\t\tj+=1\n\t\t\ti+=1\n\tmaxim=max(count,maxim)\n\tstdout.write(str(maxim))\ndef __starting_point():\n\tmain()\n'
"\ndef main():\n\tfrom sys import stdin,stdout\n\tp,q,l,r=map(int,stdin.readline().split())\n\ta=[]\n\tb=[]\n\tvisited=list(0 for x in range(r-l+1))\n\t#print(visited)\t\n\tfor i in range(p):\n\t\tx,y=map(int,stdin.readline().split())\n\t\ta.append(x)\n\t\tb.append(y)\n\tfor i in range(q):\n\t\tx,y=map(int,stdin.readline().split())\n\t\tx+=l\n\t\ty+=l\n\t\tfor j in range(p):\n\t\t\t#print('x=',x,'y=',y)\n\t\t\tlower=max(0,a[j]-y)\n\t\t\tupper=min(b[j]-x,r)+1\n\t\t\tif upper > lower:\n\t\t\t\tdelta=upper-lower\n\t\t\t\t#print('upper=',upper,'lower=',lower)\n\t\t\t\tvisited[lower:upper]=list(1 for x in range(delta))\n\t\t\t\t#print('visited:\n',visited)\n\t#\tprint(visited)\n\tstdout.write(str(visited[:r-l+1].count(1)))\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\t#import numpy as np\n\tn,k=map(int,stdin.readline().split())\n\ta=tuple(map(int,stdin.readline().split()))\n\tminim=min(a)\n\tmaxim=max(a)\n\tarr=list(a)\t\n\tfor i in range(n):\n\t\tarr[i]-=minim\n\tif max(arr) > k:\n\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES\n')\n\t\tfor i in a:\n\t\t\tstdout.write('1 '*minim)\n\t\t\tfor j in range(i-minim):\n\t\t\t\tstdout.write(str(j%k+1)+' ')\n\t\t\tstdout.write('\n')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\tn,p=[],[]\n\tfor _ in range(int(stdin.readline())):\n\t\tlast=int(stdin.readline())\n\t\tif last<0:\n\t\t\tn.append(-1*last)\n\t\telse:\n\t\t\tp.append(last)\n\tif sum(p)>sum(n):\n\t\tstdout.write('first')\n\telif sum(n)>sum(p):\n\t\tstdout.write('second')\n\telse:\n\t\tmaxim=max(n,p)\n\t\t#print(maxim)\n\t\tif maxim==p:\n\t\t\tif maxim==n:\n\t\t\t\tif last<0:\n\t\t\t\t\tstdout.write('second')\n\t\t\t\telse:\n\t\t\t\t\tstdout.write('first')\n\t\t\telse:\n\t\t\t\tstdout.write('first')\n\t\telse:\n\t\t\tstdout.write('second')\n\t\t\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\tm,n=map(int,stdin.readline().split())\n\tminim=min(m,n)\n\tstdout.write(str(minim+1)+'\n')\n\tif n==minim:\n\t\tfor i in range(minim+1):\n\t\t\tstdout.write(str(m)+' '+str(i)+'\n')\n\t\t\tm-=1\n\telse:\n\t\tfor i in range(minim+1):\n\t\t\tstdout.write(str(i)+' '+str(n)+'\n')\n\t\t\tn-=1\ndef __starting_point():\n\tmain()\n"
'\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\ta=tuple(map(int,stdin.readline().split()))\n\tb=tuple(map(int,stdin.readline().split()))\n\ti=0\n\tj=0\n\twhile True:\n\t\t#print(i,j)\n\t\tif i>=n or j>=m:\n\t\t\tbreak\n\t\tif b[j]>=a[i]:\n\t\t\ti+=1\n\t\t\tj+=1\n\t\telse:\n\t\t\tj+=1\n\tstdout.write(str(n-i))\ndef __starting_point():\n\tmain()\n'
'\ndef main():\n\tfrom sys import stdin,stdout\n\tn=int(stdin.readline())\n\ta=tuple(map(int,stdin.readline().split()))\n\tmaxim=2\n\tcount=2\n\ti=2\n\twhile True:\n\t\tif i>=n:\n\t\t\tbreak\n\t\tif a[i]==a[i-1]+a[i-2]:\n\t\t\tcount+=1\n\t\t\tmaxim=max(count,maxim)\n\t\telse:\n\t\t\tcount=2\n\t\ti+=1\n\tstdout.write(str(min(maxim,n)))\ndef __starting_point():\n\tmain()\n'
"\ndef main():\n\tfrom sys import stdin,stdout\n\tMOD=int(1e9)+7\n\tT,k=map(int,stdin.readline().split())\n\tfib=[x for x in range(1,k+1)]\n\tfor i in range(k,100001):\n\t\tfib.append((fib[i-1]+fib[i-k]+1)%MOD)\n\tfor _ in range(T):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstdout.write(str((fib[b]-fib[a-1])%MOD)+'\n')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\troad_not=collections.defaultdict(set)\n\tn,m=map(int,stdin.readline().split())\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\troad_not[a].add(b)\n\t\troad_not[b].add(a)\n\tcounter=0\n\troad=collections.defaultdict(set)\n\tvisited=[0 for x in range(n)]\n\tvisited[0]=True\n\tfor index in range(1,n+1):\n\t\tfor i in range(1,n+1):\n\t\t\tif not visited[i-1]:\n\t\t\t\tif i not in road_not[index] and i!=index:\n\t\t\t\t\tcounter+=1\n\t\t\t\t\troad[index].add(i)\n\t\t\t\t\tvisited[i-1]=True\n\tstdout.write(str(counter)+'\n')\n\tfor i in road:\n\t\tfor j in road[i]:\n\t\t\tstdout.write(str(i)+' '+str(j)+'\n')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\timport bisect\n\tn=int(stdin.readline())\n\tp=tuple(map(int,stdin.readline().split()))\n\tP=tuple(map(int,stdin.readline().split()))\n\trecord=[0 for x in range(5)]\n\tpoints=0\n\tfor i in p:\n\t\tpoints+=i\n\t\twhile points>=P[0]:\n\t\t\tindex=bisect.bisect_right(P,points)\n\t\t\tif index:\n\t\t\t\tindex-=1\n\t\t\t\tnumber=points//P[index]\n\t\t\t\trecord[index]+=number\n\t\t\t\tpoints-=P[index]*number\n\tfor i in record:\n\t\tstdout.write(str(i)+' ')\n\tstdout.write('\n'+str(points))\ndef __starting_point():\n\tmain()\n"
"\npowers=1\nt=[0 for x in range(3*int(1e5))]\ndef build(n):\n\tnonlocal t,powers\n\tflag=False\n\tfor i in range(n-1,0,-1):\n\t\tif i==powers-1:\n\t\t\tflag=not flag\n\t\t\tpowers>>=1\n\t\tif flag:\n\t\t\tt[i]=t[i<<1]^t[i<<1|1]\n\t\telse:\n\t\t\tt[i]=t[i<<1]|t[i<<1|1]\n\ndef modify(i,v,n):\n\tnonlocal t\n\tflag=False\n\tif t[i+n-1]==v or v|t[(i+n-1)^1]==t[(i+n-1)>>1]:\n\t\t#print('skipped')\n\t\t#print('t[i+n-1]=',t[i+n-1],'v=',v)\n\t\t#print('v|t[(i+n-1)^1]=',v|t[(i+n-1)^1],'t[(i+n-1)>>1]',t[(i+n-1)>>1])\t\t\n\t\tt[i+n-1]=v\t\t\n\t\treturn\n\tt[i+n-1]=v\n\tp=i+n-1\n\twhile p>1:\n\t\tif flag:\n\t\t\tif t[p>>1]==t[p]^t[p^1]:\n\t\t\t\tbreak\n\t\t\tt[p>>1]=t[p]^t[p^1]\n\t\t\tflag=not flag\n\t\telse:\n\t\t\tif t[p>>1]==t[p]|t[p^1]:\n\t\t\t\tbreak\n\t\t\tt[p>>1]=t[p]|t[p^1]\n\t\t\tflag=not flag\n\t\tp>>=1\n\ndef main():\n\tfrom sys import stdin,stdout\n\tnonlocal t,powers\n\tn,m=map(int,stdin.readline().split())\n\tp=tuple(map(int,stdin.readline().split()))\n\tpowers=1<<(n-1)\t\n\tn=1<<(n)\t\n\tfor i in range(n):\n\t\tt[i+n]=p[i]\n\tbuild(n)\n\t#print(t[:2*n])\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tmodify(a,b,n)\n\t\t#print(t[:2*n])\n\t\tstdout.write(str(t[1])+'\n')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tstart_not=set()\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstart_not.add(a-1)\n\t\tstart_not.add(b-1)\n\tvisited=[False for _ in  range(n)]\n\tfor i in range(n):\n\t\tif i not in start_not:\n\t\t\tcenter=i\n\t\t\tbreak\n\tstdout.write(str(n-1)+'\n')\n\tfor i in range(n):\n\t\tif i != center:\n\t\t\tstdout.write(str(center+1)+' '+str(i+1)+'\n')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tarr=[]\n\tfor _ in range(n):\n\t\tarr.append(stdin.readline().strip())\n\tpigs=set()\n\tcount=0\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif arr[i][j]=='W':\n\t\t\t\tflag=0\n\t\t\t\tif i>0:\n\t\t\t\t\tif arr[i-1][j]=='P':\n\t\t\t\t\t\tpigs.add((i-1,j))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif i<n-1:\n\t\t\t\t\tif arr[i+1][j]=='P':\n\t\t\t\t\t\tpigs.add((i+1,j))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif \tj>0:\n\t\t\t\t\tif arr[i][j-1]=='P':\n\t\t\t\t\t\tpigs.add((i,j-1))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif j<m-1:\n\t\t\t\t\tif arr[i][j+1]=='P':\n\t\t\t\t\t\tpigs.add((i,j+1))\n\t\t\t\t\t\tflag=1\n\t\t\t\tif flag:\n\t\t\t\t\tcount+=1\n\tstdout.write(str(min(len(pigs),count)))\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\tanswers=()\n\tn,m=map(int,stdin.readline().split())\n\tp=tuple(map(int,stdin.readline().split()))\n\tpowers=1<<(n-1)\n\tn=powers<<1\n\tt=[0 for _ in range(n<<1)]\n\tfor i in range(n):\n\t\tt[n+i]=p[i]\n\tflag=False\n\tfor i in range(n-1,0,-1):\n\t\tif i==powers-1:\n\t\t\tflag=not flag\n\t\t\tpowers>>=1\n\t\tif flag:\n\t\t\tt[i]=t[i<<1]^t[i<<1|1]\n\t\telse:\n\t\t\tt[i]=t[i<<1]|t[i<<1|1]\n\tfor _ in range(m):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tflag=False\n\t\tif t[a+n-1]==b or b|t[(a+n-1)^1]==t[(a+n-1)>>1]:\n\t\t\tt[a+n-1]=b\n\t\telse:\n\t\t\tt[a+n-1]=b\n\t\t\tp=a+n-1\n\t\t\twhile p > 1:\n\t\t\t\tif flag:\n\t\t\t\t\tif t[p>>1]==t[p]^t[p^1]:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tt[p>>1]=t[p]^t[p^1]\n\t\t\t\t\tflag=not flag\n\t\t\t\telse:\n\t\t\t\t\tif t[p>>1]==t[p]|t[p^1]:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tt[p>>1]=t[p]|t[p^1]\n\t\t\t\t\tflag= not flag\n\t\t\t\tp>>=1\n\t\tstdout.write(str(t[1])+'\n')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\tnc=[0 for x in range(10)]\n\tn=int(stdin.readline())\n\tnum=stdin.readline().strip()\n\tfor i in num:\n\t\tk=int(i)\n\t\tif k==9:\n\t\t\tnc[7]+=1\n\t\t\tnc[3]+=2\n\t\t\tnc[2]+=1\n\t\telif k==8:\n\t\t\tnc[7]+=1\n\t\t\tnc[2]+=3\n\t\telif k==7:\n\t\t\tnc[7]+=1\n\t\telif k==6:\n\t\t\tnc[5]+=1\n\t\t\tnc[3]+=1\n\t\telif k==5:\n\t\t\tnc[5]+=1\n\t\telif k==4:\n\t\t\tnc[3]+=1\n\t\t\tnc[2]+=2\n\t\telif k==3:\n\t\t\tnc[3]+=1\n\t\telif k==2:\n\t\t\tnc[2]+=1\n\tans=''\n\tfor i in range(10):\n\t\tans+=str(9-i)*nc[9-i]\n\tstdout.write(ans)\t\t\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\ts=stdin.readline().strip()\n\tflag=s[0]\n\tif flag=='.':\n\t\tanti='#'\n\telse:\n\t\tanti='.'\n\tn=len(s)\n\tl=[0 for x in range(n)]\n\tfor i in range(1,n):\n\t\tif s[i]==flag:\n\t\t\tl[i]=l[i-1]+1\n\t\telse:\n\t\t\tflag,anti=anti,flag\n\t\t\tl[i]=l[i-1]\n\t#print(l)\n\tfor _ in range(int(stdin.readline())):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tstdout.write(str(l[b-1]-l[a-1])+'\n')\ndef __starting_point():\n\tmain()\n"
'\ndef main():\n\tfrom sys import stdin,stdout\n\tMOD=int(1e9)+7\n\tn,k,d=map(int,stdin.readline().split())\n\td-=1\n\tklist=[(1<<i)%MOD for i in range(k)]\n\tklist=[1]+klist\n\tfor i in range(k+1,n+1):\n\t\tklist.append((klist[i-1]*2-klist[i-1-k])%MOD)\n\tif d:\t\n\t\tdlist=[(1<<i)%MOD for i in range(d)]\n\t\tdlist=[1]+dlist\n\t\tfor i in range(d+1,n+1):\n\t\t\tdlist.append((dlist[i-1]*2-dlist[i-1-d])%MOD)\n\t#print(klist)\n\t#print(dlist)\n\t\tans=klist[n]-dlist[n]\n\telse:\n\t\tans=klist[n]\n\tstdout.write(str(ans%MOD))\ndef __starting_point():\n\tmain()\n'
"\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m,k=map(int,stdin.readline().split())\n\tif n>=m:\n\t\ti=-1\n\t\tj=-1\n\t\tnum=n*m\n\t\twhile k:\n\t\t\tans=num//k\n\t\t\tstdout.write(str(ans)+' ')\n\t\t\tcounter=0\n\t\t\twhile counter<ans:\n\t\t\t\tif j==-1:\n\t\t\t\t\tflag=True\n\t\t\t\t\ti+=1\n\t\t\t\t\tj+=1\n\t\t\t\tif j==m:\n\t\t\t\t\tflag=False\n\t\t\t\t\ti+=1\n\t\t\t\t\tj-=1\n\t\t\t\tstdout.write(str(i+1)+' '+str(j+1)+' ')\n\t\t\t\tif flag:\n\t\t\t\t\tj+=1\n\t\t\t\telse:\n\t\t\t\t\tj-=1\n\t\t\t\tcounter+=1\n\t\t\tnum-=ans\n\t\t\tk-=1\n\t\t\tstdout.write('\n')\n\telse:\n\t\ti=-1\n\t\tj=-1\n\t\tnum=n*m\n\t\twhile k:\n\t\t\tans=num//k\n\t\t\tstdout.write(str(ans)+' ')\n\t\t\tcounter=0\n\t\t\twhile counter<ans:\n\t\t\t\tif i==-1:\n\t\t\t\t\tflag=True\n\t\t\t\t\tj+=1\n\t\t\t\t\ti+=1\n\t\t\t\tif i==n:\n\t\t\t\t\tflag=False\n\t\t\t\t\tj+=1\n\t\t\t\t\ti-=1\n\t\t\t\tstdout.write(str(i+1)+' '+str(j+1)+' ')\n\t\t\t\tif flag:\n\t\t\t\t\ti+=1\n\t\t\t\telse:\n\t\t\t\t\ti-=1\n\t\t\t\tcounter+=1\n\t\t\tnum-=ans\n\t\t\tk-=1\n\t\t\tstdout.write('\n')\ndef __starting_point():\n\tmain()\n"
"\ndef main():\n\tfrom sys import stdin,stdout\n\tn=int(stdin.readline())\n\tans=[]\n\twhile n:\n\t\tt=''\n\t\tnum=str(n)\n\t\tfor i in num:\n\t\t\tif int(i):\n\t\t\t\tt+='1'\n\t\t\telse:\n\t\t\t\tt+='0'\n\t\tans.append(t)\n\t\tn-=int(t)\n\tstdout.write(str(len(ans))+'\n')\n\tfor i in ans:\n\t\tstdout.write(i+' ')\ndef __starting_point():\n\tmain()\n"
'\ndef main():\n\tfrom sys import stdin,stdout\n\tn,o=map(int,stdin.readline().split())\n\tstring=stdin.readline().strip()\n\tif n & 1:\n\t\ts1=string[:n//2]\n\t\ts2=string[n//2+1:]\n\t\trev=s2[::-1]\n\t\tminim=0\n\t\tindexlist=[]\n\t\tfor i in range(n//2):\n\t\t\tk=ord(s[i])-ord(rev[i])\n\t\t\tminim=min(k,26-k)\n\t\t\tindexlist.append(i)\n\t\tif o>n//2:\n\t\telse:\n\t\t\to-=1\n\t\t\t\t\n\telse:\n\t\ts1=string[:n//2+1]\n\t\ts2=string[n//2+1:]\n\t\trev=s2[::-1]\n\t\tminim=0\n\t\tindexlist=[]\n\t\tfor i in range(n//2):\n\t\t\tk=ord(s[i])-ord(rev[i])\n\t\t\tminim=min(k,26-k)\n\t\t\tindexlist.append(i)\n\t\tif o > n//2:\n\t\t\to=o-n//2-1\n\t\telse:\n\t\t\to-=1\n\t\tif len(indexlist):\n\t\t\tif len(indexlist)>1:\n\t\t\t\tminim+=min(abs(o-indexlist[0]),abs(o-indexlist[-1]))+(indexlist[-1]-indexlist[0])\n\t\t\telse:\n\t\t\t\tminim+=indexlist[0]-o\n\t\tstdout.write(str(minim))\ndef __starting_point():\n\tmain()\n'
"\ndef main():\t\n\tfrom sys import stdin,stdout\n\tn,sumtime=map(int,stdin.readline().split())\n\ta,b=[],[]\n\tfor i in range(n):\n\t\tx,y=map(int,stdin.readline().split())\n\t\ta.append(x)\n\t\tb.append(y)\n\tif sum(b)<sumtime or sum(a)>sumtime:\n\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES\n')\n\t\tdiff=sumtime-sum(a)\n\t\tfor i in range(n):\n\t\t\tif diff:\n\t\t\t\tk=b[i]-a[i]\n\t\t\t\tminim=min(k,diff)\n\t\t\t\ta[i]+=minim\n\t\t\t\tdiff-=minim\n\t\tfor i in a:\n\t\t\tstdout.write(str(i)+' ')\ndef __starting_point():\n\tmain()\n"


def main():
    from sys import stdin, stdout
    n = int(stdin.readline())
    (a, b) = ([], [])
    for i in range(n):
        (x, y) = list(map(int, stdin.readline().split()))
        a.append(x)
        b.append(y)
    if a[0] > b[0]:
        total = -1 * b[0]
        t = 'G'
    else:
        total = a[0]
        t = 'A'
    for i in range(1, n):
        if total + a[i] >= 500:
            total -= b[i]
            t += 'G'
        else:
            total += a[i]
            t += 'A'
    if total < -500 or total > 500:
        stdout.write('-1')
    else:
        stdout.write(t)


def __starting_point():
    main()


__starting_point()
