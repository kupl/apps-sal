["import sys\nfrom collections import Counter\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\n\nn, m, k = list(map(int, input().split()))\npoints = [list(map(int, line.split())) for line in sys.stdin]\npts_sorted_x = sorted(points)\npts_sorted_y = sorted(points, key=itemgetter(1, 0))\ninf = 10**9+1\nOK = (inf, inf)\n\n\ndef solve2(imos, t):\n    acc, cur = 0, 0\n\n    for k in sorted(imos.keys()):\n        if t < k:\n            break\n        if acc <= 0 and cur+1 < k or acc + imos[k] <= 0:\n            acc = 0\n            break\n        acc += imos[k]\n\n    return acc <= 0\n\n\ndef add_imos(imos, x, y):\n    imos[x] += y\n    if imos[x] == 0:\n        del imos[x]\n\n\ndef solve(t, px=-1, py=-1):\n    set_x = {1, n}\n    set_y = {1, m}\n\n    for x, y in points:\n        set_x.update((max(1, x-t), max(1, x-t-1), min(n, x+t), min(n, x+t+1)))\n        set_y.update((max(1, y-t), max(1, y-t-1), min(m, y+t), min(m, y+t+1)))\n\n    ans_x = ans_y = inf\n    pi, imos, hq = 0, Counter(), []\n    if px != -1:\n        imos[py] += 1\n        imos[py+t*2+1] -= 1\n\n    for cx in sorted(set_x):\n        while hq and hq[0][0] < cx:\n            add_imos(imos, hq[0][1], -1)\n            add_imos(imos, hq[0][2], +1)\n            heappop(hq)\n        while pi < k and pts_sorted_x[pi][0]-t <= cx <= pts_sorted_x[pi][0]+t:\n            x, y = pts_sorted_x[pi]\n            add_imos(imos, max(1, y-t), 1)\n            add_imos(imos, y+t+1, -1)\n            heappush(hq, (x+t, max(1, y-t), y+t+1))\n            pi += 1\n\n        if solve2(imos, m):\n            ans_x = cx\n            break\n\n    pi = 0\n    imos.clear()\n    hq.clear()\n    if px != -1:\n        imos[px] += 1\n        imos[px+t*2+1] -= 1\n\n    for cy in sorted(set_y):\n        while hq and hq[0][0] < cy:\n            add_imos(imos, hq[0][1], -1)\n            add_imos(imos, hq[0][2], +1)\n            heappop(hq)\n        while pi < k and pts_sorted_y[pi][1]-t <= cy <= pts_sorted_y[pi][1]+t:\n            x, y = pts_sorted_y[pi]\n            add_imos(imos, max(1, x-t), 1)\n            add_imos(imos, x+t+1, -1)\n            heappush(hq, (y+t, max(1, x-t), x+t+1))\n            pi += 1\n\n        if solve2(imos, n):\n            ans_y = cy\n            break\n\n    return ans_x, ans_y\n\n\nok, ng = 10**9+1, -1\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) >> 1\n    p = solve(mid)\n    if p == OK:\n        ok = mid\n        continue\n\n    if solve(mid, p[0], p[1]) == OK:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"]