["n = int(input())\nans = 0\nfor i in range(1, n - 1):\n    ans += (i + 1) * (i + 2)\nprint(ans)", "ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\n\nn = ii()\nans = 0\nfor i in range(3, n + 1):\n    ans += i * (i - 1)\nprint(ans)", "n = int(input())\nprint(n*(n - 1)*(n + 1)//3 - 2)", "n = int(input())\nt = 0\n\nfor i in range(n-2):\n    t += (i+2)*(i+3)\n\nprint(t)", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\n\n\nn=nn()\n\ntotal=0\n\nfor i in range(n-2):\n\ttotal=total+1*(i+2)*(i+3)\n\nprint(total) \n", "def li ():\n\treturn list (map (int, input ().split ()))\n\n\ndef num ():\n\treturn map (int, input ().split ())\n\n\ndef nu ():\n\treturn int (input ())\n\nmm = 1000000007\n\n\ndef solve ():\n\tt = 1\n\tfor it in range (t):\n\t\tn=nu()\n\t\tcc=0\n\t\tfor i in range(2,n):\n\t\t\tcc+=i*(i+1)\n\t\tprint(cc)\n\n\n\ndef __starting_point():\n\tsolve ()\n__starting_point()", "N = int(input())\nans = 0\nfor i in range(N-2):\n    ans += (i+2)*(i+3)\n\nprint(ans)\n", "# python template for atcoder1\nimport sys\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\nN = int(input())\nans = 0\nfor i, j in zip(list(range(2, N+1)), list(range(3, N+1))):\n    ans += i*j\nprint(ans)\n", "n=int(input())-2\nprint(n*(n*n+6*n+11)//3)", "n=int(input())\nans=0\nfor i in range(2, n):\n    ans+=i*(i+1)\nprint(ans)\n", "# stdin=open('input.txt')\n\n# def input():\n# \treturn stdin.readline()[:-1]\n\n# a, b = map(int, input().split())\n\n# l = list(map(int, input().split()))\n\n\n# CODE BEGINS HERE.................\n\nans = 0\nfor t in range(2, int(input())):\n\tans += t*(t + 1)\n\nprint(ans)\n#CODE ENDS HERE....................\n\n\n\n", "n = int(input())\nn = n - 1\n\nprint(n * (n + 1) * (2 * n + 1) // 6 + n * (n + 1) // 2 - 2)", "n = int(input())\nm = 0\nfor i in range(2, n):\n\tm += i * (i + 1)\nprint(m)", "#JMD\n#Nagendra Jha-4096\n\n \nimport sys\nimport math\n\n#import fractions\n#import numpy\n \n###File Operations###\nfileoperation=0\nif(fileoperation):\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\n\n###Defines...###\nmod=1000000007\n \n###FUF's...###\ndef nospace(l):\n    ans=''.join(str(i) for i in l)\n    return ans\n \n \n \n##### Main ####\nt=1\nfor tt in range(t):\n    n=int(input())\n    ans=0\n    for i in range(2,n):\n        ans+=i*(i+1)\n    print(ans)\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\n    #a=list(map(int,sys.stdin.readline().split(' ')))\n    \n    \n#####File Operations#####\nif(fileoperation):\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "n=int(input())\nans=0\nfor i in range(2,n):\n     ans+=i*(i+1)\nprint(ans)", "n=int(input())\nans=0\nfor i in range(2,n,1):\n\tans+=i*(i+1);\nprint(ans)", "a = int(input())\nans = 0\nfor i in range(a - 2):\n    ans += (i + 2) * (i + 3)\nprint(ans)", "#!/usr/bin/env python3\nimport sys\n\ndef rint():\n    return list(map(int, sys.stdin.readline().split()))\n#lines = stdin.readlines()\n\nn = int(input())\n\nans = 0\nfor i in range(2,n):\n    ans += i*(i+1)\n\nprint(ans)\n", "n = int(input())\nprint(sum(i * (i - 1) for i in range(3, n + 1)))\n", "n = int(input())\nans = 0\nfor i in range(2, n):\n    ans += i * (i + 1)\nprint(ans)\n", "n = int(input())\ncnt = 0\nfor i in range(3, n + 1):\n    cnt += i * (i - 1)\nprint(cnt)", "n=int(input())\nans=0\nfor i in range(2,n):\n    ans+=(i*(i+1))\nprint(ans)", "import re, math, decimal, bisect\ndef read(): return input().strip()\ndef iread(): return int(input().strip())\ndef viread(): return [int(_) for _ in input().strip().split()]\n\n# code goes here\nn = iread()\n_sum = 0\nfor i in range(n - 2):\n    _sum += (i + 2) * (i + 3)\nprint(_sum)"]