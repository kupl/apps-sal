["s=input()\ndp=[[0,0,0] for i in range(len(s))]\nfor i in range(len(s)):\n    if s[i]=='a':\n        dp[i][0]=dp[i-1][0]+1\n        dp[i][1]=dp[i-1][1]\n        dp[i][2]=max(dp[i-1][1]+1,dp[i-1][2]+1)\n    else:\n        dp[i][0]=dp[i-1][0]\n        dp[i][1]=max(dp[i-1][0]+1,dp[i-1][1]+1)\n        dp[i][2]=dp[i-1][2]\ne=len(s)-1\nprint(max(dp[e][0],dp[e][1],dp[e][2]))\n", "s = input()\n\nd = [[0 for i in range(len(s) + 5)] for j in range(3)]\n\nfor i in range(1, len(s) + 1):\n    d[0][i] = d[0][i - 1] + (s[i - 1] == 'b')\n    \n    d[1][i] = d[1][i - 1] + (s[i - 1] == 'a')\n    d[1][i] = min(d[1][i], d[0][i - 1] + (s[i - 1] == 'a'))\n    \n    d[2][i] = d[2][i - 1] + (s[i - 1] == 'b')\n    d[2][i] = min(d[2][i], d[1][i - 1] + (s[i - 1] == 'b'))\nn = len(s)\nprint(len(s) - min(d[0][n], d[1][n], d[2][n]))\n", "from sys import stdin, stdout\n\ns = stdin.readline().rstrip()\nn = len(s)\naCount=0\nbCount=0\naList=[0]\nbList=[0]\nfor i in range(n):\n    if s[i]=='a':\n        aCount+=1\n        aList.append(aCount)\n        bList.append(bCount)\n    else:\n        bCount+=1\n        aList.append(aCount)\n        bList.append(bCount)\n\nbestScore = 0\nfor i in range(n+1):#start\n    for j in range(i,n+1):#end\n        score=0\n        score+=aList[i]\n        score+=bList[j]-bList[i]\n        score+=aCount-aList[j]\n        if score>bestScore:\n            bestScore=score\n\nprint(bestScore)\n", "from collections import defaultdict\nfrom itertools import groupby\n\n\ndef reverse_enumerate(seq):\n    n = len(seq)\n    for i in range(n):\n        yield n - 1 - i, seq[n - 1 - i]\n\n\nclass Symbol(object):\n    def __init__(self, symbol, iter=None):\n        self.symbol = symbol\n        self.size = sum(1 for _ in iter) if iter else 0\n\n    def __hash__(self):\n        return hash(self.symbol)\n\n\ndef solve(inp):\n    symbols = [Symbol(s, i) for s, i in groupby(inp)]\n    longest_end_a = defaultdict(int)\n    longest_start_a = defaultdict(int)\n    longest_end_b = defaultdict(int)\n    n = len(symbols)\n    if n == 1:\n        return len(inp)\n    for idx, symbol in reverse_enumerate(symbols):\n        if symbol.symbol == \"a\":\n            longest_end_a[idx] = longest_end_a[idx + 1] + symbol.size\n            longest_end_b[idx] = longest_end_b[idx + 1]\n        else:\n            longest_end_a[idx] = longest_end_a[idx + 1]\n            longest_end_b[idx] = longest_end_b[idx + 1] + symbol.size\n    for idx, symbol in enumerate(symbols):\n        if symbol.symbol == \"a\":\n            longest_start_a[idx] = longest_start_a[idx - 1] + symbol.size\n        else:\n            longest_start_a[idx] = longest_start_a[idx - 1]\n    return max(\n        longest_start_a[idx] + (longest_end_b[idx] - longest_end_b[second_idx]) + longest_end_a[second_idx]\n        for idx in range(n)\n        for second_idx in range(idx + 1, n + 1)\n    )\n\n\ndef __starting_point():\n    print(solve(input()))\n\n__starting_point()", "from collections import defaultdict\nfrom itertools import groupby\n\n\ndef reverse_enumerate(seq):\n    n = len(seq)\n    for i in range(n):\n        yield n - 1 - i, seq[n - 1 - i]\n\n\nclass Symbol(object):\n    def __init__(self, symbol, iter=None):\n        self.symbol = symbol\n        self.size = sum(1 for _ in iter) if iter else 0\n\n    def __hash__(self):\n        return hash(self.symbol)\n\n\ndef solve(inp):\n    symbols = [Symbol(s, i) for s, i in groupby(inp)]\n    longest_end_a = defaultdict(int)\n    longest_start_a = defaultdict(int)\n    longest_end_b = defaultdict(int)\n    n = len(symbols)\n    if n == 1:\n        return len(inp)\n    for idx, symbol in reverse_enumerate(symbols):\n        if symbol.symbol == \"a\":\n            longest_end_a[idx] = longest_end_a[idx + 1] + symbol.size\n            longest_end_b[idx] = longest_end_b[idx + 1]\n        else:\n            longest_end_a[idx] = longest_end_a[idx + 1]\n            longest_end_b[idx] = longest_end_b[idx + 1] + symbol.size\n    for idx, symbol in enumerate(symbols):\n        if symbol.symbol == \"a\":\n            longest_start_a[idx] = longest_start_a[idx - 1] + symbol.size\n        else:\n            longest_start_a[idx] = longest_start_a[idx - 1]\n    return max(\n        longest_start_a[idx] + (longest_end_b[idx] - longest_end_b[second_idx]) + longest_end_a[second_idx]\n        for idx in range(n)\n        for second_idx in range(idx + 1, n + 1)\n    )\n\n\ndef __starting_point():\n    print(solve(input()))\n__starting_point()", "str = input()\nl = len(str)\nok = 0\ntest1 = 0\ntest2 = 0\nfor i in range(l):\n    if(str[i] == 'a'):\n        ok = ok + 1\n        test2 = max(test1+1,test2+1)\n    else:\n        test1 = max(test1+1,ok+1)\nprint(max(test1,test2))", "s = input()\na, b = [0], [0]\na_count, b_count = 0, 0\nfor x in s:\n    if x == 'a':\n        a_count += 1\n    else:\n        b_count += 1\n    a.append(a_count)\n    b.append(b_count)\nbest = b_count\nfor i in range(len(a)):\n    for j in range(i, len(a)):\n        best = max(best, a[i] + (a_count-a[j]) + (b[j]-b[i]))\nprint(best)\n\n", "str = input()\nl = len(str)\nok = 0\ntest1 = 0\ntest2 = 0\nfor i in range(l):\n    if(str[i] == 'a'):\n        ok = ok + 1\n        test2 = max(test1 + 1, test2 + 1)\n    else:\n        test1 = max(test1 + 1,ok + 1)\nprint(max(test1, test2))\n", "s=input()\n                        #________b..._________\nback=0                  #itung a sampe ktemu b [a....]\nnow=0                   #setelah a../nggak, jumlah b [a...b.. / b...]\nafter_ab=0              #setelah a..b.. [a..b..a]\nfor i in s:\n    if i=='a':\n        back+=1\n        after_ab=max(after_ab,now)+1\n    else:\n        now=max(back,now)+1\nprint(max(back,max(now,after_ab)))\n        \n        \n", "s = input()\nsize = len(s)\na = [0]*(size+1)\nb = [0]*(size+1)\nfor i in range(size):\n    a[i+1] = a[i] + (1 if s[i] == 'a' else 0)\n    b[i+1] = b[i] + (1 if s[i] == 'b' else 0)\nans = 0\nfor i in range(size+1):\n    for j in range(i+1):\n        val = b[i] - b[j] + a[j] + a[size] - a[i]\n        ans = max(val,ans)\nprint(ans)\n", "s = input()\nle = len(s)\nmx = 0\na = s.count('a')\nb = s.count('b')\nmx = max(mx, a)\nmx = max(mx, b)\ncnta = [0]*(le+1)\ncntb = [0]*(le+1)\ncnta[0] = 1 if s[0]=='a' else 0\ncntb[0] = 1-cnta[0]\n\nfor i in range(1,le):\n\tcnta[i] = cnta[i-1]\n\tcntb[i] = cntb[i-1]\n\tif s[i] == 'a':\n\t\tcnta[i] += 1\n\telse:\n\t\tcntb[i] += 1\n\nfor i in range(le):\n\tfor j in range(i+1, le):\n\t\tmx = max(mx, cnta[i]+b-cntb[i])\n\t\tmx = max(mx, cntb[i]+a-cnta[i])\n\t\tmx = max(mx, cnta[i]+cntb[j]-cntb[i]+a-cnta[j])\n\t\t\nprint(mx)\n", "strs=input()\narray=[]\nchar=[]\ncount=1\nchar.append(strs[0])\ni=1\nwhile(i<len(strs)):\n    if(strs[i]==strs[i-1]):\n        count+=1\n    else:\n        array.append(count)\n        char.append(strs[i])\n        count=1\n    i+=1\narray.append(count)\nbback=[]\naback=[]\nbfront=[]\nafront=[]\ni=0\nwhile(i<len(array)):\n    if(i==0):\n        if(char[i]=='b'):\n            aback.append(0)\n            bback.append(array[0])\n        else:\n            bback.append(0)\n            aback.append(array[0])\n    else:\n        if(char[i]=='b'):\n            aback.append(aback[i-1])\n            bback.append(bback[i-1]+array[i])\n        else:\n            aback.append(aback[i-1]+array[i])\n            bback.append(bback[i-1])\n    i+=1\ni=0\nwhile(i<len(array)):\n    afront.append(aback[-1]-aback[i])\n    bfront.append(bback[-1]-bback[i])\n    i+=1\nif(len(array)==1):\n    print(array[0])\nelse:\n    maxm=-1\n    i=0\n    while(i<len(array)):\n        if(char[i]=='b'):\n            j=i\n            while(j<len(array)):\n                if(char[j]=='b'):\n                    if(j==i):\n                        ans=aback[i]+array[i]+afront[i]\n                        if(ans>maxm):\n                            maxm=ans\n                    else:\n                        ans=aback[i]+array[i]+(bback[j]-bback[i])+afront[j]\n                        if(ans>maxm):\n                            maxm=ans\n                j+=1\n        i+=1\n    print(maxm)", "str = input()\nl = len(str)\ncnt = 0\ndp1 = 0\ndp2 = 0\nfor i in range(l):\n    if( str[i] == 'a' ):\n        cnt+=1\n        dp2 = max(dp1 + 1 , dp2 + 1)\n    else:\n        dp1 = max(dp1 + 1 , cnt+1 )\nprint(max(dp1,dp2))", "a = input()\n\ndp1 = 0\ndp2 = 0\ncnt = 0\n\nfor i in range(len(a)):\n\tif a[i] == 'a':\n\t\tcnt += 1\n\t\tdp2 = max(dp1 + 1, dp2 + 1)\n\telse:\n\t\tdp1 = max(dp1 + 1, cnt + 1)\n\nprint(max(dp1,dp2))", "a = input()\n\ndp1 = 0\ndp2 = 0\ncnt = 0\n\nfor i in range(len(a)):\n\tif a[i] == 'a':\n\t\tcnt += 1\n\t\tdp2 = max(dp1 + 1, dp2 + 1)\n\telse:\n\t\tdp1 = max(dp1 + 1, cnt + 1)\n\nprint(max(dp1,dp2))", "#!/usr/bin/env python3\n\nS = input()\nN = len(S)\nT = [[0]*(N+1) for _ in range(3)]\nfor i in range(1,N+1):\n    T[0][i] = T[0][i-1] + int(S[i-1]=='a')\n    T[1][i] = max(T[1][i-1] + int(S[i-1]=='b'), T[0][i])\n    T[2][i] = max(T[2][i-1] + int(S[i-1]=='a'), T[1][i], T[0][i])\nprint(T[2][N])\n", "s = input()\na_count = 0\ndp1 = 0     # last letter is 'b'\ndp2 = 0     # last letter is 'a'\nfor i in range(len(s)):\n    if(s[i]=='a'):\n        a_count += 1\n        dp2 = max(dp1,dp2)+1\n    else:\n        dp1 = max(a_count,dp1)+1\nprint(max(dp1,dp2))", "str = input()\nl = len(str)\nok = 0\ntest1 = 0\ntest2 = 0\nfor i in range(l):\n    if(str[i] == 'a'):\n        ok = ok + 1\n        test2 = max(test1+1,test2+1)\n    else:\n        test1 = max(test1+1,ok+1)\nprint(max(test1,test2))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**15\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = [1 if c=='a' else 0 for c in S()]\n    l = len(s)\n    a = [0] * l\n    b = [0] * l\n    if s[0] == 1:\n        a[0] = 1\n    else:\n        b[0] = 1\n    for i in range(1,l):\n        if s[i] == 1:\n            a[i] = a[i-1] + 1\n            b[i] = b[i-1]\n        else:\n            a[i] = a[i-1]\n            b[i] = b[i-1] + 1\n\n    if b[-1] == 0:\n        return l\n\n    r = 0\n    for i in range(0,l):\n        if s[i] == 1:\n            continue\n        for j in range(i,l):\n            if s[j] == 1:\n                continue\n            tr = a[i] + b[j] - b[i] + 1 + a[-1] - a[j]\n            if r < tr:\n                r = tr\n\n    return r\n\n\nprint(main())\n\n\n", "s=input()\nn=len(s)\nf=[[0 for i in range(0,3)] for j in range(0,n)]\nfor i in range(0,n):\n\tif (i>0):\n\t\tf[i][0]=f[i-1][0]\n\t\tf[i][1]=f[i-1][1]\n\t\tf[i][2]=f[i-1][2]\n\tif (s[i]=='a'):\n\t\tf[i][0]+=1\n\t\tf[i][2]+=1\n\t\tf[i][2]=max(f[i][2],f[i][1]+1)\n\telse:\n\t\tf[i][1]+=1\n\t\tf[i][1]=max(f[i][1],f[i][0]+1)\nprint(max(f[n-1][0],max(f[n-1][1],f[n-1][2])))\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Oct 25 09:07:32 2017\n\n@author: savit\n\"\"\"\n\ns=input()\nstartpos=0\nmax1=0\ntemp=0\nbeststart=[]\nfor i in range(len(s)):\n    if(s[i]=='a'):\n        \n        temp+=1\n        if(temp>max1):\n            max1=temp\n            startpos=i+1\n    else:\n        temp-=1\n    beststart.append((max1,startpos))\n    \nbeststart.append((0,-1))\nmax2=0\ntemp=0\nendpos=len(s)\nfor i in range(len(s)-1,-1,-1):\n    if(s[i]=='a'):\n        temp+=(1 + (beststart[i-1][0]-beststart[i][0]))\n        if(max2<temp):\n            max2=temp\n            endpos=i\n    else:\n        temp-=1\nans=0\nif(endpos!=len(s)):\n    \n    startpos=beststart[endpos][1]\n\nif(startpos==-1):\n    startpos=0\n\n\nfor i in range(startpos):\n    if(s[i]=='b'):\n        ans+=1\nfor i in range(startpos,endpos):\n    if(s[i]=='a'):\n        ans+=1\nfor i in range(endpos,len(s)):\n    if(s[i]=='b'):\n        ans+=1\n#print(startpos,endpos)\nprint(len(s)-ans)\n", "s = input()\nf = [0,0,0]\nfor i in s:\n    if i=='a':\n        f[2] = max(f)+1\n        f[0]+=1\n    else:\n        f[1] = max(f[0],f[1])+1\nprint(max(f))    \n    \n", "line = input()\n\ndp = 3 * [0]\n\nfor c in line:\n    if c == 'a':\n        dp[2] = max(dp) + 1\n        dp[0] += 1\n    elif c == 'b':\n        dp[1] = max(dp[:2]) + 1\n\nprint(max(dp))\n", "s = input()\nar = [0,0,0]\nfor i in s:\n    if i == 'a':\n        ar[2] = max(ar)+1\n        ar[0] += 1\n    else:\n        ar[1] = max(ar[0],ar[1]) + 1\nprint(max(ar))  ", "# python3\n# utf-8\n\nstring = input()\nprefix___a_nr = [0]\nprefix___b_nr = [0]\nfor sym in string:\n    curr_a_nr = prefix___a_nr[-1]\n    curr_b_nr = prefix___b_nr[-1]\n    if sym == 'a':\n        curr_a_nr += 1\n    elif sym == 'b':\n        curr_b_nr += 1\n    prefix___a_nr.append(curr_a_nr)\n    prefix___b_nr.append(curr_b_nr)\n\nans = 5000\nfor sep1 in range(len(string) + 1):\n    for sep2 in range(sep1, len(string) + 1):\n        curr_ans = 0\n        curr_ans += prefix___b_nr[sep1]\n        curr_ans += prefix___a_nr[sep2] - prefix___a_nr[sep1]\n        curr_ans += prefix___b_nr[-1] - prefix___b_nr[sep2]\n        ans = min(ans, curr_ans)\nprint(len(string) - ans)"]