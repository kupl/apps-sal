["import copy\n\nn, k, x = map(int, input().split())\nc = list(map(int, input().split()))\nfor i in range(n):\n    c[i] = (c[i],0)\nans = 0\nfor i in range(n + 1):\n    c2 = copy.deepcopy(c)\n    c2.insert(i, (x,1))\n    while True:\n        dq = False\n        for i in range(len(c2) - 2):\n            if c2[i][0] == c2[i + 1][0] == c2[i + 2][0]:\n                le = i\n                re = i\n                while re < len(c2) and c2[re][0] == c2[le][0]:\n                    re += 1\n                c2 = c2[:le] + c2[re:]\n                dq = True\n                break\n        if not dq:\n            break\n    cntdel = 0\n    for a,b in c2:\n        if b==0:\n            cntdel+=1\n    ans = max(ans, n - cntdel)\nprint(ans)", "(n, k, x) = input().split()\nn, k = int(n), int(k)\nballs = input().split()\nans = 0\n\nfor i in range(n):\n    s = balls.copy()\n    s.insert(i, x)\n    while len(s) > 2:\n        l = len(s)\n        for j in range(2, len(s)):\n            if s[j-2] == s[j-1] == s[j]:\n                p = j + 1\n                while p < len(s):\n                    if s[j] != s[p]:\n                        break\n                    p += 1\n                s = s[:j-2] + s[p:]\n                break\n        if len(s) == l:\n            break\n    ans = max(ans, n - len(s))\n\nprint(ans)\n", "n, k, x = list(map(int, input().split()))\ndef lr_bound(c, i, x):\n    l = i\n    r = i\n\n    while l > 0 and c[l - 1] == x:\n        l -= 1\n    while r < len(c) - 1 and c[r + 1] == x:\n        r += 1\n    return l, r\ndef destroy(c, i, x):\n    c = c[:]\n    c.insert(i, x)\n    \n    dest = 0\n    while len(c) > 2:\n        if i >= len(c):\n            i = len(c) - 1\n        if i < 0:\n             i = 0\n        l, r = lr_bound(c, i, c[i])\n        if r - l >= 2:\n            c[l:r+1] = []\n            dest += (r - l) + 1\n            i = l\n        else:\n            break\n    return dest - 1\n\n\nc = list(map(int, input().split()))\n\nscores = []\nfor i in range(len(c)):\n    scores.append(destroy(c, i, x))\n\nprint(max([0] + scores))\n", "def can_destroy(A):\n    color_now = A[0]\n    num_now = 1\n    for i in range(1, len(A)):\n        if color_now == A[i]:\n            num_now += 1\n            if num_now == 3:\n                return i - 2\n        else:\n            color_now = A[i]\n            num_now = 1\n    return -1\n        \n\ndef destroy(A):\n    while len(A) > 0 and can_destroy(A) != -1:\n        i = can_destroy(A)\n        c = A[i]\n        while i < len(A) and A[i] == c:\n            A.pop(i)\n    return A\n\nn, k, x = map(int, input().split())\nA = list(map(int, input().split()))\nres = 0\nfor i in range(len(A) + 1):\n    B = A[:]\n    B.insert(i, x)\n    B = destroy(B)[:]\n    res = max(res, len(A) - len(B))\nprint(res)", "n, k, x = list(map(int, input().split()))\n\ns = list(map(int, input().split()))\n\ndef fl(x, e, c):\n    s = x[:e]\n    s.append(c)\n    s += x[e:]\n    for j in range(55):\n        for i in range(len(s)-2):\n            if s[i] == s[i+1] == s[i+2]:\n                if i < len(s)-3:\n                    if s[i] == s[i+3]:\n                        del s[i]\n                del s[i]\n                del s[i]\n                del s[i]\n                break\n\n    return len(s)\n\n\nm = 0\n\nfor i in range(n):\n    m = max(m, n - fl(s,i,x))\n\nprint(m)\n", "import sys\nimport math\nimport random\nn, k, x = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\nif n == 1:\n    print(0)\n    return\nfor i in range(0, n - 1):   \n    if a[i] == a[i + 1] == x:\n        l = i    \n        while l >= 0 and a[i] == a[l]:\n            l -= 1\n        r = i + 1\n        while r < n and a[r] == x:\n            r += 1\n        while (1):\n            if l == -1 or r == n:\n                break\n            if a[l] != a[r]:\n                break\n            if l == 0 and r == n - 1:\n                break\n            if l == 0:\n                if a[0] == a[r + 1]:\n                    while r < n and a[r] == a[0]:\n                        r += 1\n                    l -= 1\n                    continue\n                else:\n                    break\n            if r == n - 1:\n                if a[n - 1] == a[l - 1]:\n                    while l >= 0 and a[l] == a[n - 1]:\n                        l -= 1\n                    r += 1\n                    continue\n                else:\n                    break\n            if a[l] == a[r + 1] or a[l - 1] == a[r]:\n                t = a[l]\n                while l >= 0 and a[l] == t:\n                    l -= 1\n                while r < n and a[r] == t:\n                    r += 1\n            else:\n                break\n        ans = max(ans, r - l - 1)     \nprint(ans)", "n,k,x = [int(i) for i in input().split()]\nl = [int(i) for i in input().split()]\n\nm = 0\n\ndef scan(l,m):\n    if len(l) == 0:\n        return l,m\n    mstart = 0\n    mle = 1\n    start = 0\n    col = l[0]\n    le = 1\n    for i in range(1,len(l)):\n        if l[i] == col:\n            le += 1\n        else:\n            if le > mle:\n                mle = le\n                mstart = start\n            col = l[i]\n            start = i\n            le = 1\n    if le > mle:\n        mle = le\n        mstart = start\n    if mle < 3:\n        return l,m\n    #print(mle,mstart,l)\n    m += mle\n    l = l[:mstart] + l[mstart+mle:]\n    #print(l)\n    return l,m\n\nfor i in range(len(l)+1):\n    l2 = l[:]\n    m2 = -1\n    l2 = l2[:i] + [x] + l2[i:]\n    \n    while True:\n        l2, m3 = scan(l2, m2)\n        if m2 == m3:\n            break\n        m2 = m3\n    #print(m2)\n    #print()\n    m = max(m,m2)\nprint(m)\n", "def check(start):\n    nonlocal groups\n    cnt = 2\n    d = 1\n    while d <= min(start, len(groups) - start - 1):\n        if groups[start - d][0] == groups[start + d][0]:\n            if groups[start - d][1] + groups[start + d][1] >= 3:\n                cnt += groups[start - d][1] + groups[start + d][1]\n                d += 1\n                continue\n        return cnt\n    return cnt\n\nn, k, x = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\ngroups = []\ni = 0\nwhile i < n - 1:\n    if c[i] == c[i + 1]:\n        groups.append([c[i], 2])\n        i += 2\n    else:\n        groups.append([c[i], 1])\n        i += 1\nif n == 1 or c[-1] != c[-2]:\n    groups.append([c[-1], 1])\nres = 0\nfor i in range(len(groups)):\n    if groups[i][0] == x and groups[i][1] == 2:\n        res = max(res, check(i))\nprint(res)", "n, k, x = list(map(int,input().split()))\nc0 = list(map(int,input().split()))\nmax = 0\nfor i in range (len(c0)-1):\n    c = c0[:]\n    s = 0\n    if c[i]==c[i+1]==x:\n        del c[i:i+2]\n        s += 2\n        possib = True\n        while possib:\n            if i>0 and i<len(c):\n                if 1<i<len(c)-1 and c[i-2]==c[i-1]==c[i]==c[i+1]:\n                    del c[i-2:i+2]\n                    s += 4\n                    i -= 2\n                elif 1<i and c[i-2]==c[i-1]==c[i]:\n                    del c[i-2:i+1]\n                    s += 3\n                    i -= 2\n                elif i<len(c)-1 and c[i-1]==c[i]==c[i+1]:\n                    del c[i-1:i+2]\n                    s += 3\n                    i -= 1\n                else:\n                    possib = False\n            else:\n                possib = False\n    if s > max:\n        max = s\nprint(max)\n                \n", "def busted_balls(balls,idx):\n    #print(idx)\n    busted=2\n    i=idx-1\n    j=idx+2\n    while(i>=0 and j < len(balls) and balls[i] == balls[j]):\n        while(i-1 >= 0 and balls[i] == balls[i-1]):\n            i-=1\n        while j+1 < len(balls) and balls[j] == balls[j+1]:\n            j+=1\n        #print('i'+str(i))\n        #print('j'+str(j))\n        if j-i+1-busted>=3:\n            busted=(j-i+1)\n        else:\n            break\n        #print(busted)\n        i-=1\n        j+=1\n        #print('i'+str(i))\n        #print('j'+str(j))\n    return busted\n\nn,k,x=list(map(int,input().split()))\nballs=list(map(int,input().split()))\nbest=0\nfor i in range(1,n):\n    if balls[i]==balls[i-1] and balls[i]==x:\n        #copy_balls=balls[:]\n        #copy_balls.insert(i)\n        res = busted_balls(balls,i-1)\n        if(res>best):\n            best=res\nprint(best)\n\n\n", "import sys\n\nf = sys.stdin\n#f = open('H:\\\\Portable Python 3.2.5.1\\\\tests\\\\test_445B1.txt')\nn, k, x, = list(map(int, f.readline().split()))\n\nr = [int(it) for it in  f.readline().split()]\n\n\n#print(n, k, x)\n\n#print(r)\n\n\ndef collaps(r,k):\n    n = len(r)\n    max_collaps = 0\n    if n<k:\n        return 0\n    elif n==1 and k==1:\n        return 1\n    elif n==1 and k>1:\n        return 0\n    else:\n        i = 1\n        g = 1\n        col = r[0]\n        while (i<n):\n            if r[i]==col:\n                g += 1\n            else:\n                if g>=k:\n                    max_collaps += g\n                    col = r[i]\n                    for kk in range(g):\n                        # print(i-1, r)\n                        del r[i-1]\n                        i -= 1\n                    n = len(r)\n                    if n>1:\n                        g = 1\n                        i = 1\n                        col = r[0]\n                        continue\n                    else: break\n                else:\n                    g = 1\n                    col = r[i]\n            #print(i, r, r[i],col, g, max_collaps)        \n            i += 1\n            \n        if g>=k:\n            max_collaps += g\n        #print(6575, i, g, max_collaps)    \n        return max_collaps\n\nr1 = r[:]\n\n\nnn = 0 # \u041d\u043e\u0432\u044b\u0439 \u0440\u044f\u0434\nres = 0\nc1 = 0\nfor m in range(len(r)) :\n    if (nn == 0) and (r[m]==x):\n        r1 = r[:]\n        r1.insert(m,x)\n        c1 = collaps(r1,3)-1\n        #print(m, c1)\n        if  c1>res:     res = c1\n        nn = 1\n    elif (r[m]!=x):\n        nn = 0\n    # print(m, nn, c1, res)        \n    \nprint(res)\n", "n, k, x = map(int,input().split())\na = list(map(int,input().split()))\nans = 0\nfor i in range(n+1):\n    b = a[:i] + [x] + a[i:]+[-1]\n    for j in range(123):\n        #print(b)\n        c = 1\n        for j in range(1, len(b)):\n            #print(j)\n            if b[j] == b[j - 1]:\n                c += 1\n            else:\n                if c >= 3:\n                    b = b[:(j - c)] + b[j:]\n                    break\n                c = 1\n    #print(b)\n    #print()\n    ans = max(len(a) - len(b) + 1, ans)\nprint(ans)", "n,k,x,=list(map(int,input().split()))\n\nL=list(map(int,input().split()))\n\nans=0\nfor i in range(n):\n    X=list(L[0:i])+[x]+list(L[i:])\n    a=0\n    while(1):\n        cont=False\n        cnt=1\n        z=0\n        for i in range(1,len(X)):\n            if(X[i]==X[i-1]):\n                cnt+=1\n            else:\n                if(cnt>=3):\n                    X=list(X[0:z])+list(X[i:])\n                    cont=True\n                    break\n                else:\n                    cnt=1\n                    z=i\n        if(cont):\n            continue\n        if(cnt>=3):\n            X=list(X[:z])\n            continue\n        break\n    ans=max(ans,n-len(X))\nprint(ans)\n", "from itertools import *\nR = lambda: map(int, input().split())\nn, k, x = R()\nc = [(k, len(list(g))) for k, g in groupby(R())]\ncount = 0\nfor i in range(len(c)):\n  if c[i][0] == x and c[i][1] > 1:\n    a = c[i][1]\n    l, r = i - 1, i + 1\n    while l >= 0 and r < len(c) and c[l][0] == c[r][0] and c[l][1] + c[r][1] > 2:\n      a += c[l][1] + c[r][1]\n      l -= 1\n      r += 1\n    count = max(count, a)\nprint(count)", "n, k, x = input().split()\nt = input().split() + ['a', 'b']\nu, q = -2, 1\nfor v in range(int(n) + 1):\n    if x == t[v]:\n        if u == -2: u = v - 1\n    elif u != -2:\n        s, i, j, y = 0, u, v, t[v]\n        while j - i - s > 2:\n            s = j - i\n            while t[i] == y: i -= 1\n            while t[j] == y: j += 1\n            y = t[j]\n        u, q = -2, max(q, s)\nprint(q - 1)", "n, k, x = map(int, input().split())\ncolors = list(map(int, input().split()))\n\ngroups = []\n\ni = 0\nwhile i < n:\n\tc = colors[i]\n\tnbC = 0\n\twhile i < n and colors[i] == c:\n\t\ti += 1\n\t\tnbC += 1\n\tgroups.append((c, nbC))\n\nmaxNbBallsDestroyed = 0\nfor i, group in enumerate(groups):\n\tif group[0] == x and group[1] >= 2:\n\t\tnbBallsDestroyed = group[1]\n\t\tpast = i-1\n\t\tfuture = i+1\n\t\twhile past >= 0 and future < len(groups) and groups[past][0] == groups[future][0] and groups[past][1] + groups[future][1] >= 3:\n\t\t\tnbBallsDestroyed += groups[past][1] + groups[future][1]\n\t\t\tpast -= 1\n\t\t\tfuture += 1\n\t\tmaxNbBallsDestroyed = max(maxNbBallsDestroyed, nbBallsDestroyed)\n\nprint(maxNbBallsDestroyed)", "from itertools import groupby\n\ndef destroy(chain):\n\tremaining = []\n\tfor k, v in groupby(chain):\n\t\tL = list(v)\n\t\tif len(L) < 3:\n\t\t\tremaining.extend(L)\n\tif len(chain) == len(remaining):\n\t\treturn len(remaining)\n\telse:\n\t\treturn destroy(remaining)\n\ndef solve():\n\tn, k, x = list(map(int, input().split()))\n\tballs = list(map(int, input().split()))\n\tres = 0\n\tfor i in range(n):\n\t\ttmp = balls[:]\n\t\ttmp.insert(i, x)\n\t\tres = max(res, n-destroy(tmp))\n\treturn res\n\ndef __starting_point():\n\tprint(solve())\n\n__starting_point()", "R = lambda: list(map(int, input().split()))\n\n\ndef dfs(a):\n    cnt = 0\n    n = len(a)\n    a.append(10000000)\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            cnt = 0\n        else:\n            cnt += 1\n        if cnt >= 2:\n            j = i\n            while a[j] == a[i]:\n                j += 1\n\n            return j - i + 2 + dfs(a[:i - 2] + a[j:n])\n    return 0\n\n\nn, k, x = R()\na = R()\nans=1\nfor i in range(n+1):\n    ans=max(ans, dfs(a[:i]+[x]+a[i:]))\n\nprint(ans-1)", "def do(l,r):\n    li = 0\n    ri = 0\n    nl = len(l)\n    nr = len(r)\n    l.append(-1)\n    r.append(-1)\n    x = 0\n    while l[li] > 0 and r[ri]>0:\n        a = 0\n        c = l[li]\n        while l[li] == c:\n            a += 1\n            li += 1\n        while r[ri] == c:\n            a += 1\n            ri += 1\n        if a < 3:\n            return li+ri-a-x\n        x = 1\n    return li+ri-x\ndef s():\n    [n,k,x] = list(map(int,input().split()))\n    c = list(map(int,input().split()))\n    res = 0\n    for i in range(n):\n        l = [x]\n        l.extend(list(reversed(c[:i])))\n        res = max(do(l,c[i:]),res)\n    print(res)\ns()\n", "(n, k, x) = input().split()\nn, k = int(n), int(k)\nballs = input().split()\nans = 0\n\nfor i in range(n):\n    s = balls.copy()\n    s.insert(i, x)\n    while len(s) > 2:\n        l = len(s)\n        for j in range(2, len(s)):\n            if s[j - 2] == s[j - 1] == s[j]:\n                p = j + 1\n                while p < len(s):\n                    if s[j] != s[p]:\n                        break\n                    p += 1\n                s = s[:j-2] + s[p:]\n                break\n        if len(s) == l:\n            break\n    ans = max(ans, n - len(s))\n\nprint(ans)\n", "(n, k, x) = input().split()\nn, k = int(n), int(k)\nballs = input().split()\nans = 0\n\nfor i in range(n):\n    s = balls.copy()\n    s.insert(i, x)\n    while len(s) > 2:\n        l = len(s)\n        for j in range(2, len(s)):\n            if s[j-2] == s[j-1] == s[j]:\n                p = j + 1\n                while p < len(s):\n                    if s[j] != s[p]:\n                        break\n                    p += 1\n                s = s[:j-2] + s[p:]\n                break\n        if len(s) == l:\n            break\n    ans = max(ans, n - len(s))\n\nprint(ans)", "(n, k, x) = input().split()\nn, k = int(n), int(k)\nballs = input().split()\nans = 0\n\nfor i in range(n):\n    s = balls.copy()\n    s.insert(i, x)\n    while len(s) > 2:\n        l = len(s)\n        for j in range(2, len(s)):\n            if s[j-2] == s[j-1] == s[j]:\n                p = j + 1\n                while p < len(s):\n                    if s[j] != s[p]:\n                        break\n                    p += 1\n                s = s[:j-2] + s[p:]\n                break\n        if len(s) == l:\n            break\n    ans = max(ans, n - len(s))\n\nprint(ans)\n", "\nimport re\nimport inspect\nfrom copy import copy\nfrom sys import argv, exit\n\ndef rstr():\n    return input()\n\ndef rint():\n    return int(input())\n\ndef rints(splitchar=' '):\n    return [int(i) for i in input().split(splitchar)]\n\ndef varnames(obj, namespace=globals()):\n    return [name for name in namespace if namespace[name] is obj]\n\ndef pvar(var, override=False):\n    prnt(varnames(var), var)\n\ndef prnt(*args, override=False):\n    if '-v' in argv or override:\n        print(*args)\n\ndef remove_split(l, i, j):\n    prnt(\"Removed {} thru {}, {}\".format(i, j, l[i:j]))\n    new_l = l[:i] + l[j:]\n    prnt(\"New List: {}\".format(new_l))\n    return new_l\n\ndef degrade(l, initial_size):\n    i=0\n    color = 0\n    removed = False\n    for j,x in enumerate(l):\n        if not color:\n            color = x\n            i = j\n        \n        if color != x:\n            if j-i >= 3:\n                l = remove_split(l, i, j)\n                removed = True\n            color = x\n            i = j\n        if j == len(l)-1 and color == x and j-i >= 2:\n            prnt('removing {} {}'.format(i, j))\n            l = remove_split(l, i, j+1)\n            removed = True\n\n    if removed:\n        prnt(l)\n        return degrade(l, initial_size)\n    else:\n        return initial_size - len(l)\n\n\ndef __starting_point():\n    (num, kolors, xolor) = rints()\n    balls = rints()\n    \n    results = []\n    for i in range(len(balls)):\n        l = copy(balls)\n        l.insert(i, xolor)\n        pvar(l)\n        results.append(degrade(l, len(l)-1))\n    prnt(results)\n    ans = max(results)\n    if ans == -1:\n        ans = 0\n    print(ans)\n\n__starting_point()", "(n, k, x) = map(int, input().split())\n\nballs = list(map(int, input().split()))\n\nc = 0\np = None\npairs = []\nmatches = []\nfor b in range(len(balls)):\n    if(balls[b] is not c):\n        c = balls[b]\n    if(c is p):\n        pairs.append((b - 1, b))\n        if(c is x):\n            matches.append((b-1, b))\n    p = c\n\nmax = 0\n\nfor m in matches:\n    i, j = m\n    removed = 2\n    i -= 1\n    j += 1\n    while(i >= 0 and j < len(balls)):\n        if(balls[i] is balls[j]):\n            toRemove = 0\n            if(j < len(balls)-1 and balls[j+1] is balls[j]):\n                toRemove += 1\n                j+=1\n            if(i >= 1 and balls[i-1] is balls[i]):\n                toRemove += 1\n                i-=1\n            if(toRemove > 0):\n                removed += toRemove + 2\n            else:\n                break\n        else:\n            break\n        i -= 1\n        j += 1\n    if(removed > max):\n        max = removed\n            \n\nprint(max)"]