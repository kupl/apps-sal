["n, m, k = list(map(int, str.split(input())))\nf = tuple([str.strip(input()) for _ in range(n)])\n\nr = []\nfor x in range(m):\n\n    cr = sum([f[y][x] == \"U\" for y in range(0, n, 2)])\n    for cx in range(max(0, x + 1 - n), x):\n\n        cr += f[x - cx][cx] == \"R\"\n\n    for cx in range(x + 1, min(m, n + x)):\n\n        cr += f[cx - x][cx] == \"L\"\n\n    r.append(cr)\n\nprint(str.join(\" \", list(map(str, r))))\n", "def ans():\n    n, m, k = map(int, input().split())\n    a = list([] for i in range(n))\n    s = [0]*m\n    for i in range(n):\n        a[i] = input()\n    for i in range(1,n):\n        for j in range(m):\n            if i < m-j and a[i][j+i] == 'L':\n                s[j]+=1\n            if i <= j and a[i][j-i] == 'R':\n                s[j]+=1\n            if i+i < n and a[i+i][j] == 'U':\n                s[j]+=1\n    print(*s)\nans()", "# -*- coding: utf-8 -*-\nimport sys\nf = sys.stdin\n\nn, m, k = map(int, f.readline().strip().split())\n\ns = f.readline().strip()\nsp = [0]*m\n\nfor i in range(1, n):\n    s = f.readline().strip()\n    for l in range(m):\n        if s[l]=='U':\n            if i % 2 == 0:\n                sp[l] += 1\n        elif s[l]=='R':\n            mi = l+i \n            if mi<m :\n                sp[mi] += 1\n        elif s[l]=='L':\n            mi = l-i \n            if mi>=0 :\n                sp[mi] += 1\n    #print(i, s, sp)\n\nprint(' '.join([str(it) for it in sp]))", "def solve():\n    answer = [0] * m\n    for i in range(1, n):\n        for j in range(m):\n            if j - i >= 0:\n                if park[i][j - i] == 'R':\n                    answer[j] += 1\n            if j + i < m:\n                if park[i][j + i] == 'L':\n                    answer[j] += 1\n            if 2 * i < n:\n                if park[2 * i][j] == 'U':\n                    answer[j] += 1\n    return answer\n\nn, m, k = tuple(map(int, input().split()))\npark = [input() for i in range(n)]\nprint(' '.join(map(str, solve())))\n", "n, m, k = map( int, input().split() )\nans = [0] * m\n\nfor i in range( n ):\n    field = input()\n    for j in range( m ):\n        if ( field[j] == 'U' ) and ( i % 2 == 0 ): ans[j] += 1\n        elif ( field[j] == 'L' ) and ( j >= i ): ans[j - i] += 1\n        elif ( field[j] == 'R' ) and ( j + i < m ): ans[j + i] += 1\n\nprint ( ' '.join( map( str, ans ) ) )", "n, m, k = map(int, input().split())\ninput()\ns = [0] * m\nfor i in range(1, n):\n    for j, x in enumerate(input()):\n        if x == 'L':\n            if j - i >= 0: s[j - i] += 1\n        elif x == 'R':\n            if j + i < m: s[j + i] += 1\n        elif x == 'U' and i & 1 == 0: s[j] += 1\nprint(' '.join(map(str, s)))", "def f():\n    n, m, k = list(map(int, input().split()))\n    s = []\n    a = []\n    for i in range(n):\n        s.append(input())\n    for j in range(m):\n        ans = 0\n        for i in range(n):\n            if i + i < n and s[i + i][j] == 'U':\n                ans += 1\n            if j - i >= 0 and s[i][j - i] == 'R':\n                ans += 1\n            if j + i < m and s[i][j + i] == 'L':\n                ans += 1\n        a.append(ans)        \n    print(' '.join(map(str, a)))\nf()\n        \n", "def f():\n    n, m, k = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(input().strip()))\n    res = [0 for i in range(m)]\n    for j in range(m):\n        for i in range(1, n):\n            if j - i >= 0 and a[i][j - i] == 'R':\n                res[j] += 1\n            if j + i < m and a[i][i + j] == 'L':\n                res[j] += 1\n            if i + i < n and a[i + i][j] == 'U':\n                res[j] += 1\n    print(' '.join(list(map(str, res))))\nf()        \n                \n            \n", "Rows, Columns = 0, 0\nSpiders = []\n\ndef ReadInput():\n    nonlocal Rows, Columns, Spiders\n    Rows, Columns, spiderCount = map(int, input().split())\n    Spiders = [0 for i in range(0, Columns)]\n    for x in range(0, Rows):\n        line = input()\n        for y in range(0, Columns):\n            if line[y] == 'L':\n                if y - x >= 0:\n                    Spiders[y - x] += 1\n            elif line[y] == 'R':\n                if y + x < Columns:\n                    Spiders[y + x] += 1\n            elif line[y] == 'U':\n                if x % 2 == 0:\n                    Spiders[y] += 1\n\ndef PrintOutput():\n    nonlocal Rows, Columns, Spiders\n    for y in range(0, Columns):\n        print(Spiders[y], end = \" \")\n    print(\"\\n\")\n\ndef main():\n    ReadInput()\n    PrintOutput()\n\nmain()", "I = lambda:map(int,input().split())\nn,m,k = I()\nf = [['.' for _ in range(m)] for _ in range(n)]\nfor i in range(n):\n    s = input()\n    for j in range(len(s)):\n        if s[j] != '.':\n            f[i][j] = s[j]\nans = [0] * m\nfor i in range(n):\n    for j in range(m):\n        if j - i >= 0 and f[i][j - i] == 'R':\n            ans[j] += 1\n        if j + i < m and f[i][j + i] == 'L':\n            ans[j] += 1\n        if f[0][j] == 'D':\n            ans[j] += 1\n        if i + i < n and f[i + i][j] == 'U':\n            ans[j] += 1\nprint (*ans)", "n,m,k=[int(x) for x in input().split()]\npark=[input() for i in range(n)]\nanswers=[0]*m\nfor inot in range(n):\n    for j in range(m):\n        if park[inot][j]!='.':\n            i=(j,inot,park[inot][j])\n            if i[2]=='R':\n                if i[0]+i[1]<m:\n                    answers[i[0]+i[1]]+=1\n            elif i[2]=='L':\n                if i[0]-i[1]>=0:\n                    answers[i[0]-i[1]]+=1\n            elif i[2]=='U':\n                if not i[1]&1:\n                    answers[i[0]]+=1\nfor i in answers:\n    print(i,end=' ')", "n, m, k = list(map(int, input().split()))\nfield = []\ncounts = []\nfor j in range(m):\n  counts.append(0)\nfor i in range(n):\n  row = list(input())\n  field.append(row)\n\nfor i in range(n):\n  for j in range(m):\n    if field[i][j] == \"L\":\n      jth = j - i\n      if jth >= 0:\n        counts[jth] += 1\n    elif field[i][j] == \"R\":\n      jth = i + j\n      if jth < m:\n        counts[jth] += 1\n    elif field[i][j] == \"U\":\n      if i % 2 == 0:\n        counts[j] += 1\n\n#counts = []\n#for j in range(m):\n#  count = 0\n#  for i in range(n):\n#    if newfield[i][j] == \"S\":\n#      count += 1\n#  counts.append(str(count))\n\n#print(field)\n#print(newfield)\nprint(\" \".join(list(map(str, counts))))\n", "\nimport re\nimport inspect\nfrom sys import argv, exit\n\ndef rstr():\n    return input()\n\ndef rint():\n    return int(input())\n\ndef rints(splitchar=' '):\n    return [int(i) for i in input().split(splitchar)]\n\ndef varnames(obj, namespace=globals()):\n    return [name for name in namespace if namespace[name] is obj]\n\ndef pvar(var, override=False):\n    prnt(varnames(var), var)\n\ndef prnt(*args, override=False):\n    if '-v' in argv or override:\n        print(*args)\n\nclass Spider():\n    def __init__(self, x, y, d):\n        self.x = x\n        self.y = y\n        self.d = d\n\n    def get_copy(self):\n        return Spider(self.x, self.y, self.d)\n\n    def move(self):\n        if self.d == 'R':\n            self.x += 1\n        elif self.d == 'L':\n            self.x -= 1\n        elif self.d == 'U':\n            self.y -= 1\n        elif self.d == 'D':\n            self.y += 1\n        else:\n            raise Exception('WHAT HAVE YOU DONE', self.d)\n\ndef main(i, n, m, lders, rders, uders):\n    sightings = 0\n    \n    iders = [s for s in uders if s.x == i and s.y % 2 == 0]\n    sightings += len(iders)\n    prnt('id', len(iders))\n   \n    ulders = [s for s in rders if s.y == (i - s.x)]\n    sightings += len(ulders)\n    prnt('uld', len(ulders))\n  \n    urders = [s for s in lders if s.y == (s.x - i)]\n    sightings += len(urders)\n    prnt('urd', len(urders))\n    \n    return str(sightings)\n        \n\ndef __starting_point():\n    (n,m,k) = rints()\n    field = [rstr() for i in range(n)]\n\n    si = [0 for i in range(m)]\n    spiders = []\n    for j,row in enumerate(field):\n        for i,space in enumerate(row):\n            if space == 'R':\n                if i+j < len(si):\n                    si[i+j] += 1\n            if space == 'L':\n                if i-j >= 0:\n                    si[i-j] += 1\n            if space == 'U':\n                if j % 2 == 0:\n                    si[i] += 1\n\n    print(' '.join([str(i) for i in si]))\n\n\n__starting_point()", "n, m, k = list(map( int, input().split() ))\n\nans = [0] * m\n\n\n\nfor i in range( n ):\n\n    field = input()\n\n    for j in range( m ):\n\n        if ( field[j] == 'U' ) and ( i % 2 == 0 ): ans[j] += 1\n\n        elif ( field[j] == 'L' ) and ( j >= i ): ans[j - i] += 1\n\n        elif ( field[j] == 'R' ) and ( j + i < m ): ans[j + i] += 1\n\n\n\nprint( ' '.join( map( str, ans ) ) )\n\n\n\n# Made By Mostafa_Khaled\n", "class CodeforcesTask436BSolution:\n    def __init__(self):\n        self.result = ''\n        self.n_m_k = []\n        self.field = []\n\n    def read_input(self):\n        self.n_m_k = [int(x) for x in input().split(\" \")]\n        for x in range(self.n_m_k[0]):\n            self.field.append(input())\n\n    def process_task(self):\n        result_row = [0 for x in range(self.n_m_k[1])]\n        for x in range(self.n_m_k[0]):\n            for y in range(self.n_m_k[1]):\n                # print(x, y)\n                field = self.field[x][y]\n                if field == \"R\":\n                    pos = y + x\n                    if pos < self.n_m_k[1]:\n                        result_row[pos] += 1\n                elif field == \"L\":\n                    pos = y - x\n                    if pos >= 0:\n                        result_row[pos] += 1\n                elif field == \"U\" and not x % 2:\n                    result_row[y] += 1\n        self.result = \" \".join([str(x) for x in result_row])\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask436BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "n,m,k=map(int,input().split())\nseen = [0 for _ in range(m)]\n\nfor i in range(n):\n  S = list(input())\n  for j in range(m):\n    if S[j] == 'U' and not i&1:\n      seen[j]+=1\n    elif S[j] == 'L' and j-i>=0:\n      seen[j-i]+=1\n    elif S[j] == 'R' and j+i<m:\n      seen[j+i]+=1\n\nprint(*seen, sep=\" \")", "n,m,k=map(int,input().split())\nseen = [0 for _ in range(m)]\n \nfor i in range(n):\n  S = list(input())\n  for j in range(m):\n    if S[j] == 'U' and not i&1:\n      seen[j]+=1\n    elif S[j] == 'L' and j-i>=0:\n      seen[j-i]+=1\n    elif S[j] == 'R' and j+i<m:\n      seen[j+i]+=1\n \nprint(*seen, sep=\" \")\n", "n,m,k=map(int,input().split())\nseen = [0 for _ in range(m)]\n \nfor i in range(n):\n  S = list(input())\n  for j in range(m):\n    if S[j] == 'U' and not i&1:\n      seen[j]+=1\n    elif S[j] == 'L' and j-i>=0:\n      seen[j-i]+=1\n    elif S[j] == 'R' and j+i<m:\n      seen[j+i]+=1\n \nprint(*seen, sep=\" \")\n"]