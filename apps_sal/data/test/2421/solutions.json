["import sys\ninput = sys.stdin.readline\n\ndef main():\n    x, y = list(map(int, input().split()))\n    clst = list(map(int, input().split()))\n    clst[0] = min(clst[0], clst[5] + clst[1])\n    clst[1] = min(clst[1], clst[0] + clst[2])\n    clst[2] = min(clst[2], clst[1] + clst[3])\n    clst[3] = min(clst[3], clst[2] + clst[4])\n    clst[4] = min(clst[4], clst[3] + clst[5])\n    clst[5] = min(clst[5], clst[4] + clst[0])\n    directions = [(1, 1), (0, 1), (-1, 0), (-1, -1), (0, -1), (1, 0)]\n    ans = 10 ** 20\n    for i in range(6):\n        dx1, dy1 = directions[i]\n        dx2, dy2 = directions[(i + 1) % 6]\n        a = (x * dy2 - y * dx2) // (dx1 * dy2 - dy1 * dx2)\n        b = (x * dy1 - y * dx1) // (dx2 * dy1 - dy2 * dx1)\n        if a < 0 or b < 0:\n            continue\n        ans = min(ans, clst[i] * a + clst[(i + 1) % 6] * b)\n    print(ans)\n    \nfor _ in range(int(input())):\n    main()\n", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nd = [(1, 1), (0, 1), (-1, 0), (-1, -1), (0, -1), (1, 0)]\nt = read_int()\nfor case_num in range(t):\n    x, y = read_ints()\n    c = list(read_ints())\n    ans = -1\n    for i in range(6):\n        dx = d[i][0]\n        dy = d[i][1]\n        if dx != 0 and x // dx >= 0:\n            t = x // dx\n            cost = t * c[i]\n            y1 = d[i][1] * t\n            for j in range(6):\n                if j == i or d[j][0] != 0:\n                    continue\n                t1 = (y - y1) // d[j][1]\n                if t1 >= 0:\n                    nc = cost + t1 * c[j]\n                    if ans == -1 or ans > nc:\n                        ans = nc\n\n        if dy != 0 and y // dy >= 0:\n            t = y // dy\n            cost = t * c[i]\n            x1 = d[i][0] * t\n            for j in range(6):\n                if j == i or d[j][1] != 0:\n                    continue\n                t1 = (x - x1) // d[j][0]\n                if t1 >= 0:\n                    nc = cost + t1 * c[j]\n                    if ans == -1 or ans > nc:\n                        ans = nc\n    print(ans)\n", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    x,y=map(int,input().split())\n    c1,c2,c3,c4,c5,c6=map(int,input().split())\n    c2=min(c2,c1+c3)\n    c5=min(c5,c4+c6)\n    c6=min(c6,c1+c5)\n    c3=min(c3,c2+c4)\n    \n    c1=min(c1,c2+c6)\n    c4=min(c4,c3+c5)\n    if x*y>0:\n        if x>0:\n            d=min(x,y)\n            x-=d\n            y-=d\n            print(x*c6+y*c2+d*c1)\n        else:\n            x=-x\n            y=-y\n            d=min(x,y)\n            x-=d\n            y-=d\n            print(x*c3+y*c5+d*c4)\n    else:\n        cost=0\n        if x>0:\n            cost+=x*c6\n        else:\n            cost-=x*c3\n        if y>0:\n            cost+=y*c2\n        else:\n            cost-=y*c5\n        print(cost)", "t = int(input())\n\nfor _ in range(t):\n    x0, y0 = input().split()\n    x0, y0 = int(x0), int(y0)\n\n    c = [0] + list(map(int, input().split())) \n    c[0] = c[-1]\n    c.append(c[1])\n\n    for i in range(1, 7):\n        c[i] = min(c[i], c[i-1] + c[i+1])\n\n    c[7] = c[1]\n    \n    s = (None, [1, 1], [0, 1], [-1, 0], [-1, -1], [0, -1], [1, 0], [1, 1])\n\n    ans = 1e30\n    for i in range(1, 7):\n        x1, y1 = s[i]\n        x2, y2 = s[i+1]\n\n        a = (x0*y2 - y0*x2)//(x1*y2 - y1*x2)\n        b = (x0*y1 - y0*x1)//(x2*y1 - y2*x1)\n        \n        if (a >= 0) and (b >= 0):\n            ans = min(ans, a*c[i] + b*c[i+1])\n\n    print(ans)\n        \n", "import io\nimport os\nimport sys\nimport math\nimport heapq\n\n\ninput = sys.stdin.readline\nmod = 10**9 + 7\n \nt = int(input())\n\n\nfor _ in range(t):\n    x,y = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    arr = arr + arr + arr\n    \n    for z in range(20):\n        for i in range(1,16):\n            arr[i] = min(arr[i], arr[i-1] + arr[i+1])\n            \n    c1,c2,c3,c4,c5,c6 = (arr[6:12])\n    if x>=0 and y>=0:\n        ans = 0\n        mm = min(x,y)\n        x -= mm\n        y -= mm\n        ans += mm * c1\n        ans += y*c2\n        ans += x*c6\n        print(ans)\n    elif x>=0 and y<0:\n        ans = 0\n        ans += abs(y)*c5\n        ans += x*c6\n        print(ans)\n    elif x<0 and y<0:\n        ans = 0\n        x,y = abs(x),abs(y)\n        mm = min(x,y)\n        x -= mm\n        y -= mm\n        ans += mm * c4\n        ans += y*c5\n        ans += x*c3\n        print(ans)\n    else:\n        ans = 0\n        ans += abs(y) * c2\n        ans += abs(x) * c3\n        print(ans)", "gans = []\nfor _ in range(int(input())):\n    y, x = list(map(int, input().split()))\n    c2, c3, c4, c5, c6, c1 = list(map(int, input().split()))\n    for i in range(6):\n        c1 = min(c1, c6 + c2)\n        c2 = min(c2, c1 + c3)\n        c3 = min(c3, c2 + c4)\n        c4 = min(c4, c3 + c5)\n        c5 = min(c5, c4 + c6)\n        c6 = min(c6, c5 + c1)\n    if x == 0 and y == 0:\n        gans.append(0)\n        continue\n    elif x == 0:\n        if y > 0:\n            ans = y * c1\n        else:\n            ans = -y * c4\n        gans.append(ans)\n        continue\n    elif y == 0:\n        if x > 0:\n            ans = x * c3\n        else:\n            ans = -x * c6\n        gans.append(ans)\n        continue\n    if x * y > 0:\n        if x > 0:\n            a, b, c = c1, c2, c3\n        else:\n            a, b, c = c4, c5, c6\n            x = -x\n            y = -y\n        ans = min(x, y) * b\n        if x > y:\n            ans += (x - y) * c\n        else:\n            ans += (y - x) * a\n        gans.append(ans)\n    else:\n        if x < 0:\n            ans = -c6 * x + c1 * y\n        else:\n            ans = -c4 * y + c3 * x\n        gans.append(ans)\nprint('\\n'.join(map(str, gans)))\n        \n        \n        \n", "T = int(input())\n\nfor t in range(T):\n    X, Y = [int(_) for _ in input().split()]\n    C = [int(_) for _ in input().split()]\n\n    for _ in range(10):\n        for i in range(len(C)):\n            prev = i-1\n            if prev < 0:\n                prev += 6\n            nxt = i+1\n            if nxt >= 6:\n                nxt -= 6\n            C[i] = min(C[i], C[prev]+C[nxt])\n        for i in range(len(C)-1, -1, -1):\n            prev = i-1\n            if prev < 0:\n                prev += 6\n            nxt = i+1\n            if nxt >= 6:\n                nxt -= 6\n            C[i] = min(C[i], C[prev]+C[nxt])\n\n    c1, c2, c3, c4, c5, c6 = C[0], C[1], C[2], C[3], C[4], C[5]\n\n    if X == 0:\n        if Y > 0:\n            print(c2 * Y)\n        else:\n            print(c5 * abs(Y))\n    elif X < 0:\n        if Y >= 0:\n            print(c3 * abs(X) + c2 * Y)\n        elif Y <= X:\n            print(c4 * abs(X) + c5 * abs(X-Y))\n        else:\n            print(c3 * abs(X-Y) + c4 * abs(Y))\n    elif X > 0:\n        if Y >= X:\n            print(c1 * X + (Y-X) * c2)\n        elif Y <= 0:\n            print(c6 * X + abs(Y) * c5)\n        else:\n            print(c1 * Y + c6 * (X-Y))\n", "import heapq\n\n\ndef dijkstra(g: list, start, goal=None):\n    num = len(g)          # \u30b0\u30e9\u30d5\u306e\u30ce\u30fc\u30c9\u6570\n    dist = [float('inf') for i in range(num)]\n    dist[start] = 0\n    q = []\n    heapq.heappush(q, (0, start))  # \u59cb\u70b9\u3092push\n    while q:\n        prov_cost, src = heapq.heappop(q)  # pop\n        if dist[src] < prov_cost:\n            continue\n        for node, cost in g[src]:\n            if dist[node] > dist[src] + cost:\n                dist[node] = dist[src] + cost\n                heapq.heappush(q, (dist[node], node))\n    return dist\n\n\ndxdy = ((1, 1), (0, 1), (-1, 0), (-1, -1), (0, -1), (1, 0))\nINF = 3 * 10 ** 18\nt = int(input())\nfor _ in range(t):\n    x, y = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    g = [[] for _ in range(25)]\n    for i in range(5):\n        for j in range(5):\n            for k in range(6):\n                dx, dy = dxdy[k]\n                if 0 <= i + dx < 5 and 0 <= j + dy < 5:\n                    g[i * 5 + j].append(((i + dx) * 5 + j + dy, c[k]))\n    dist = dijkstra(g, 12)\n    for i in range(6):\n        dx, dy = dxdy[i]\n        c[i] = dist[12 + dx * 5 + dy]\n    ans = 0\n    if x > 0 and y > 0:\n        m = min(x, y)\n        ans += m * c[0]\n        x -= m\n        y -= m\n    elif x < 0 and y < 0:\n        m = max(x, y)\n        ans -= m * c[3]\n        x -= m\n        y -= m\n    if x > 0:\n        ans += x * c[5]\n    else:\n        ans -= x * c[2]\n    if y > 0:\n        ans += y * c[1]\n    else:\n        ans -= y * c[4]\n    print(ans)\n", "for nt in range(int(input())):\n\ty,x = list(map(int,input().split()))\n\tc1,c2,c3,c4,c5,c6 = list(map(int,input().split()))\n\tfor i in range(10):\n\t\tc2 = min(c2,c1+c3)\n\t\tc3 = min(c3,c2+c4)\n\t\tc4 = min(c4,c3+c5)\n\t\tc5 = min(c5,c4+c6)\n\t\tc6 = min(c6,c5+c1)\n\t\tc1 = min(c1,c6+c2)\n\t# print (c1,c2,c3,c4,c5,c6)\n\tif x>=0:\n\t\tif y>=0:\n\t\t\tm = min(x,y)\n\t\t\tx -= m\n\t\t\ty -= m\n\t\t\tprint(m*c1+c2*x+c6*y)\n\t\telse:\n\t\t\ty = abs(y)\n\t\t\tprint(x*c2+y*c3)\n\telse:\n\t\tx = abs(x)\n\t\tif y>=0:\n\t\t\tprint(x*c5+y*c6)\n\t\telse:\n\t\t\ty = abs(y)\n\t\t\tm = min(x,y)\n\t\t\tx -= m\n\t\t\ty -= m\n\t\t\tprint(m*c4+x*c5+y*c3)\n", "# import sys; input = sys.stdin.buffer.readline\n# sys.setrecursionlimit(10**7)\nfrom collections import defaultdict\nmod = 10 ** 9 + 7; INF = float(\"inf\")\n\ndef getlist():\n\treturn list(map(int, input().split()))\n\ndef inverse(N, mod):\n\treturn (pow(N, mod - 2, mod))\n\ndef main():\n\tT = int(input())\n\tfor _ in range(T):\n\t\tx, y = getlist()\n\t\tC = getlist()\n\t\tD = [INF] * 8\n\t\tD[0] = min(C[5], C[0] + C[4])\n\t\tD[1] = min(C[0], C[1] + C[5])\n\t\tD[2] = min(C[1], C[0] + C[2])\n\t\tD[3] = min(C[1] + C[2], C[0] + 2 * C[2], C[3] + 2 * C[1])\n\t\tD[4] = min(C[2], C[1] + C[3])\n\t\tD[5] = min(C[3], C[2] + C[4])\n\t\tD[6] = min(C[4], C[3] + C[5])\n\t\tD[7] = min(C[4] + C[5], C[3] + 2 * C[5], C[0] + 2 * C[4])\n\t\tif x >= 0 and y >= 0:\n\t\t\tm = min(x, y)\n\t\t\tans = D[1] * m + D[0] * (x - m) + D[2] * (y - m)\n\t\telif x >= 0 and y < 0:\n\t\t\tm = min(x, -y)\n\t\t\tans = D[7] * m + D[0] * (x - m) + D[6] * (-y - m)\n\t\telif x < 0 and y >= 0:\n\t\t\tm = min(-x, y)\n\t\t\tans = D[3] * m + D[4] * (-x - m) + D[2] * (y - m)\n\t\t # x, y < 0\n\t\telse:\n\t\t\tm = min(-x, -y)\n\t\t\tans = D[5] * m + D[4] * (-x - m) + D[6] * (-y - m)\n\t\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\nfor _ in range(val()):\n    x, y = li()\n    c1, c2, c3, c4, c5, c6 = li()\n\n    for i in range(30):\n        c1 = min(c1, c2 + c6)\n        c6 = min(c6, c1 + c5)\n        c5 = min(c5, c6 + c4)\n        c4 = min(c4, c5 + c3)\n        c2 = min(c2, c1 + c3)\n        c3 = min(c3, c2 + c4)\n\n    temp = min(abs(x), abs(y))\n\n    if x >= 0 and y >= 0:\n        x -= temp\n        y -= temp\n\n        ans = temp * c1 + x * c6 + y * c2\n\n    elif x <= 0 and y >= 0:\n        x = abs(x)\n        ans = x * c3 + y * c2\n\n    elif x >= 0 and y <= 0:\n        y = abs(y)\n\n        ans = x * c6 + y * c5\n\n    else:\n        x += temp\n        y += temp\n        x = abs(x)\n        y = abs(y)\n\n        ans = temp * c4 + x * c3 + y * c5\n\n\n    print(ans)\n", "def xyc(x, y):\n    an1 = 0\n    if x > 0:\n        an1 += cos[5] * x\n    else:\n        an1 += cos[2] * (-x)\n    if y > 0:\n        an1 += cos[1] * y\n    else:\n        an1 += cos[4] * (-y)\n    # print(an1)\n    return an1\n\n\nt = int(input())\nfor _ in range(t):\n    p = list(map(int, input().split()))\n    x, y = p[0], p[1]\n    cos = list(map(int, input().split()))\n    for a in range(len(cos)):\n        if cos[(a + 1) % 6] + cos[(a - 1) % 6] < (cos[a]):\n            cos[a] = cos[(a + 1) % 6] + cos[(a - 1) % 6]\n    # print(cos)\n    an1 = xyc(x, y)\n    an2 = 0\n    if x * y < 0:\n        an2 = an1\n    else:\n        if (x > 0) and (x > y):\n            an2 += cos[0] * (y)\n            an2 += xyc(x - y, 0)\n        elif x > 0:\n            an2 += cos[0] * x\n            an2 += xyc(0, y - x)\n        elif (x < 0) and (x < y):\n            an2 += cos[3] * (-y)\n            an2 += xyc(x - y, 0)\n        else:\n            an2 += cos[3] * (-x)\n            an2 += xyc(0, y - x)\n\n    print(min(an1, an2))\n", "import sys\ninput=sys.stdin.readline\n\nT=int(input())\nfor _ in range(T):\n    n,m=list(map(int,input().split()))\n    c1,c2,c3,c4,c5,c6=list(map(int,input().split()))\n    c1=min(c1,c2+c6)\n    c2=min(c2,c1+c3)\n    c3=min(c3,c2+c4)\n    c4=min(c4,c3+c5)\n    c5=min(c5,c4+c6)\n    c6=min(c6,c5+c1)\n\n\n    ans=0\n    if (m>0):\n        if (n<=0):\n            ans=(c3*(-n))+(c2*m)\n\n        else:\n            if (n<=m):\n                ans=(c1*n)+(c2*(m-n))\n            else:\n                ans=(c1*m)+(c6*(n-m))\n\n    elif(m<0):\n        if (n<=0):\n            if (n<=m):\n                ans=(c4*(-m))+(c3*(-n+m))\n            else:\n                ans=c4*(-n)+c5*(n-m)\n        else:\n            ans=(c6*n)+(c5*(-m))\n    else:\n        if (n<=0):\n            ans=c3*(-n)\n        else:\n            ans=c6*n\n    print(ans)\n", "n = int(input())\nfor _ in range(n):\n    y, x = list(map(int, input().split()))\n    costs = list(map(int, input().split()))\n    for i in range(36):\n        costs[i % 6] = min(costs[i % 6], costs[(i+5) % 6] + costs[(i+1) % 6])\n    ans = 0\n    if x >= 0:\n        if y >= 0:\n            if x >= y:\n                # 1\n                ans = (x-y) * costs[1] + y * costs[0]\n            else:\n                # 2\n                ans = x * costs[0] + (y-x) * costs[5]\n        else:\n            # 6\n            ans = x * costs[1] - y * costs[2]\n    else:\n        if y >= 0:\n            # 3\n            ans = -x * costs[4] + y * costs[5]\n        else:\n            if x <= y:\n                # 4\n                ans = (y-x) * costs[4] - y * costs[3]\n            else:\n                # 5\n                ans = (-x) * costs[3] + (x-y) * costs[2]\n    print(ans)\n", "import sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c for j in range(b)] for i in range(a)]\ndef list3d(a, b, c, d): return [[[d for k in range(c)] for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e for l in range(d)] for k in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10**19\nMOD = 10**9 + 7\nEPS = 10**-10\n\nfor _ in range(INT()):\n    gy, gx = MAP()\n    C = LIST()\n\n    C[5] = min(C[5], C[0]+C[4])\n    C[1] = min(C[1], C[0]+C[2])\n    C[2] = min(C[2], C[3]+C[1])\n    C[4] = min(C[4], C[3]+C[5])\n    C[5] = min(C[5], C[0]+C[4])\n    C[1] = min(C[1], C[0]+C[2])\n    C[2] = min(C[2], C[3]+C[1])\n    C[4] = min(C[4], C[3]+C[5])\n\n    ans = 0\n    if gx > 0 and gy > 0:\n        mn = min(gx, gy)\n        ans += mn * min(C[1]+C[5], C[0])\n        if gx > gy:\n            ans += (gx-mn) * C[1]\n        elif gx < gy:\n            ans += (gy-mn) * C[5]\n    elif gx < 0 and gy < 0:\n        gx, gy = abs(gx), abs(gy)\n        mn = min(gx, gy)\n        ans += mn * min(C[2]+C[4], C[3])\n        if gx > gy:\n            ans += (gx-mn) * C[4]\n        elif gx < gy:\n            ans += (gy-mn) * C[2]\n    else:\n        if gx < 0:\n            ans += abs(gx) * C[4]\n        elif gx > 0:\n            ans += gx * C[1]\n        if gy < 0:\n            ans += abs(gy) * C[2]\n        elif gy > 0:\n            ans += gy * C[5]\n    print(ans)\n", "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor i in range(t):\n    x,y = map(int,input().split())\n    lis = list(map(int,input().split()))\n    costs = [0]*6\n    costs[0] = min(lis[0],lis[1]+lis[5])\n    costs[1] = min(lis[1],lis[0]+lis[2])\n    costs[2] = min(lis[2],lis[1]+lis[3])\n    costs[3] = min(lis[3],lis[2]+lis[4])\n    costs[4] = min(lis[4],lis[3]+lis[5])\n    costs[5] = min(lis[5],lis[4]+lis[0])\n    ans = 0\n    if x >= 0 and y >= 0:\n        ans += min(x,y) * costs[0]\n        if x >= y:\n            ans += (x-y) * costs[5]\n        else:\n            ans += (y-x) * costs[1]\n    elif x <= 0 and y <= 0:\n        ans += min(abs(x),abs(y)) * costs[3]\n        if x <= y:\n            ans += (y-x) * costs[2]\n        else:\n            ans += (x-y) * costs[4]\n    elif x >= 0 and y <= 0:\n        ans += x*costs[5]\n        ans += abs(y)*costs[4]\n    elif x <= 0 and y >= 0:\n        ans += abs(x)*costs[2]\n        ans += abs(y)*costs[1]\n    print(ans)", "import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\n#from decimal import Decimal\n#from fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod=10**9+7\n\n\nfor t in range(int(data())):\n    y,x=mdata()\n    c=mdata()\n    if x>=0 and y>=0:\n        out(min(c[1]*x+c[5]*y,c[0]*min(x,y)+c[1]*(x-min(x,y))+c[5]*(y-min(x,y)),c[0]*max(x,y)+c[4]*(max(x,y)-x)+c[2]*(max(x,y)-y)))\n    elif x>0 and y<0:\n        y=abs(y)\n        out(min(c[1] * x + c[2] * y,c[0]*x+c[2]*(x+y),c[3]*y+c[1]*(x+y)))\n    elif x<0 and y>0:\n        x=abs(x)\n        out(min(c[4] * x + c[5] * y,c[3]*x+c[5]*(x+y),c[0]*y+c[4]*(x+y)))\n    else:\n        x=abs(x)\n        y=abs(y)\n        out(min(c[4] * x + c[2] * y, c[3] * min(x, y) + c[4] * (x - min(x, y)) + c[2] * (y - min(x, y)),\n                c[3] * max(x, y) + c[1] * (max(x, y) - x) + c[5] * (max(x, y) - y)))", "def func(x, c2, c5):\n    if x < 0:\n        return -x * c5\n    else:\n        return x * c2\ndef func_2(x, c4, c1):\n    if x < 0:\n        return -x*c4\n    else:\n        return x*c1\n\ndef func_3(x, c6, c3):\n    if x < 0:\n        return -x*c3\n    else:\n        return x * c6\n\ndef main():\n    y, x = map(int, input().split())\n    c1, c2, c3, c4, c5, c6 = map(int, input().split())\n    lu = (1,0)\n    ru = (1,1)\n    rd = (-1,0)\n    r = (0, 1)\n    l = (1, 0)\n    ld = (-1, -1)\n    a= func_3(y, c6, c3) + func(x, c2, c5)\n    b =func_2(y, c4, c1) + func(x - y, c2, c5)\n    c = func_2(x, c4, c1) + func_3(y - x, c6, c3)\n    print(min(a,b,c))\n\n\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n\"\"\"\n123\n1232\n123232\n23232123232\nd(abc)e\nad(abc)e\nAd(abc)eC\ndabe\nadbeb\nebdadbeb\nbebdadbeb\nacccc\naccccc\ncaccccc\nccccacaccccc\ncccccacaccccc\n\"\"\"\n__starting_point()"]