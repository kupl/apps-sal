["import sys; sys.setrecursionlimit(1000000)\ndef solve():\n    n, m, = rv()\n    s = list(input())\n    res = [0] * m\n    #replace dot:\n    #dot had nothing on left or right: nothing changes\n    #dot had one on left or right: -1\n    #dot had two on left or right: -2\n\n    #replace char:\n    #if had two chars on left and right: 0\n    # if had one char and one dot: +1\n    # if had two dots: +2\n    helper = list()\n    for i in range(n):\n        if s[i] == '.':\n            if i == 0:\n                helper.append(1)\n            else:\n                if s[i-1] == '.':\n                    helper[-1] += 1\n                else:\n                    helper.append(1)\n    initval = 0\n    for val in helper:\n        initval += val - 1\n    for query in range(m):\n        index, replace = input().split()\n        index = int(index) - 1\n        if (s[index] == '.' and replace == '.') or (s[index] != '.' and replace != '.'):\n            res[query] = initval\n        else:\n            sidedots = 0\n            if index > 0:\n                if s[index - 1] == '.': sidedots+=1\n            if index < n - 1:\n                if s[index + 1] == '.': sidedots+=1\n            if s[index] == '.':\n                res[query] = initval - sidedots\n                initval -= sidedots\n            else:\n                res[query] = initval + sidedots\n                initval += sidedots\n        s[index] = replace\n    print('\\n'.join(map(str, res)))\n\n\n\n\ndef rv(): return list(map(int, input().split()))\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n\n\n", "import sys\n\n\nfin = sys.stdin \n#fin = open ('in', 'r')\n\n#fout = open ('out', 'w')\n\n[n, m] = [int(x) for x in fin.readline().split()]\ns = [(x == '.') for x in fin.readline().rstrip()]\n\n\ncount = 0\nfor i in range(1, len(s)):\n\tif s[i] and s[i-1] :\n\t\tcount += 1\n\nfor i in range(m):\n\t[index, char] = fin.readline().split()\n\tindex = int(index) - 1\n\tif s[index] and char != '.':\n\t\tif index > 0 and s[index - 1]:\n\t\t\tcount -= 1\n\t\tif index < n - 1 and s[index + 1]:\n\t\t\tcount -= 1\n\t\ts[index] = False\n\telif (not s[index]) and char == '.':\n\t\tif index > 0 and s[index - 1]:\n\t\t\tcount += 1\n\t\tif index < n - 1 and s[index + 1]:\n\t\t\tcount += 1\n\t\ts[index] = True\n\tprint(count)\n\n", "from sys import stdin\ninput = stdin.readline\n\nn,m = list(map(int,input().split()))\ns = list((0,1)[c == '.'] for c in list(input()))\n\nres = 0\ncnt = 0\nfor k in s:\n\tif k == 1:\n\t\tcnt += 1\n\telse:\n\t\tres += max(cnt-1,0)\n\t\tcnt = 0\nres += max(0,cnt-1)\n\nfor i in range(m):\n    x,c = input().split()\n    x = int(x)\n    nc = (0,1)[c == '.']\n    if s[x-1] != nc:\n        diff = 0\n        if x < n:\n            if s[int(x)] == 1: diff += 1\n        if x > 1:\n            if s[int(x-2)] == 1: diff += 1\n        if nc == 1:\n            res += diff\n        else:\n            res -= diff\n    s[x-1] = nc\n    print(res)\n", "from sys import stdin,stdout\ninput = stdin.readline\n\nn,m = map(int,input().split())\ns = list((0,1)[c == '.'] for c in list(input()))\n\nres = 0\ncnt = 0\nfor k in s:\n\tif k == 1:\n\t\tcnt += 1\n\telse:\n\t\tres += max(cnt-1,0)\n\t\tcnt = 0\nres += max(0,cnt-1)\n\nres_list = list()\nfor i in range(m):\n    x,c = input().split()\n    x = int(x)\n    nc = (0,1)[c == '.']\n    if s[x-1] != nc:\n        diff = 0\n        if x < n:\n            if s[int(x)] == 1: diff += 1\n        if x > 1:\n            if s[int(x-2)] == 1: diff += 1\n        if nc == 1:\n            res += diff\n        else:\n            res -= diff\n    s[x-1] = nc\n    res_list.append(res)\n\nprint(*res_list,sep='\\n')", "from sys import stdin,stdout\ninput = stdin.readline\n\nn,m = map(int,input().split())\ns = list((0,1)[c == '.'] for c in list(input()))\n\nres = 0\ncnt = 0\nfor k in s:\n\tif k == 1:\n\t\tcnt += 1\n\telse:\n\t\tres += max(cnt-1,0)\n\t\tcnt = 0\nres += max(0,cnt-1)\n\nres_list = list()\nfor i in range(m):\n    x,c = input().split()\n    x = int(x)\n    nc = (0,1)[c == '.']\n    if s[x-1] != nc:\n        diff = 0\n        if x < n:\n            if s[int(x)] == 1: diff += 1\n        if x > 1:\n            if s[int(x-2)] == 1: diff += 1\n        if nc == 1:\n            res += diff\n        else:\n            res -= diff\n    s[x-1] = nc\n    res_list.append(res)\n\nprint(*res_list,sep='\\n',flush=True)", "import collections\nimport bisect\ndef f():\n    n,m  = [int(c) for c in input().split()]\n    s = list(input())\n\n    ll = []\n    start = 0\n    length = 0\n    inside = False\n    cc = 0\n    for i in range(len(s)):\n        if s[i] == '.':\n            if not inside:\n                inside = True\n            length += 1\n        else:\n            if inside:\n                cc += length - 1\n                length = 0\n                inside = False\n    if inside:\n        cc += length - 1\n    \n    res = [0]*m\n    for i in range (m):\n        line = input().split()\n        j = int(line[0])-1\n        c = line[1]\n\n        if (c == '.' and s[j] == '.') or ( c != '.' and s[j] != '.'):\n            res[i] = cc\n        else:\n            e1 = False\n            e2 = False\n\n            if (j > 0 and s[j-1] == '.'):\n                e1 = True\n            if (j < n-1 and s[j+1] == '.'):\n                e2 = True\n\n            if e1 and e2:\n                cc += (2 if c == '.' else -2)\n            elif e1 or e2:\n                cc += (1 if c == '.' else -1)\n            s[j] = c\n            res[i] = cc\n    for r in res:\n        print(r)\n\nf()"]