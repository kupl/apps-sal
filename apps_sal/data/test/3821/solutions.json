["n = int(input())\na = list(map(float, input().split()))\na.sort()\ns = a[-1]\np = 1 - a[-1]\nfor i in range(n - 2, -1, -1):\n\tif s < s * (1 - a[i]) + a[i] * p:\n\t\ts = s * (1 - a[i]) + a[i] * p\n\t\tp *= (1 - a[i])\nprint('%.9lf' % s)\n", "\"\"\"\nCodeforces Round 253 Div 1 Problem B\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0:\n        return inputs\n    if mode == 1:\n        return inputs.split()\n    if mode == 2:\n        return [int(x) for x in inputs.split()]\n    if mode == 3:\n        return [float(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n    if isinstance(s, list): s = \" \".join(map(str,s))\n    s = str(s)\n    print(s, end=\"\")\n\n################################################### SOLUTION\nn, = read()\ns = read(3)\ns.sort(reverse=True)\ns = [int(10**6 * i + 0.5) for i in s]\nonewin = s[0]\nalllose = 10**6-s[0]\nct = 1\nwhile alllose > onewin and ct < n:\n    onewin = onewin * (10**6-s[ct]) + alllose * s[ct]\n    alllose *= (10**6-s[ct])\n    ct += 1\nprint(onewin / 10**(6*ct))", "import fractions\nimport operator\nimport functools\n\n\ndef calc(d, nd, n):\n\n    r = 0\n    for i in range(n):\n\n        r += d[i] * functools.reduce(operator.mul, nd[:i] + nd[i + 1:n], 1)\n\n    return r\n\n\nn = int(input())\n# x = tuple(sorted(map(fractions.Fraction, str.split(input())), reverse=True))\nx = tuple(sorted(map(float, str.split(input())), reverse=True))\nnx = tuple([1 - p for p in x])\n\np = 0\nfor i in range(1, n + 1):\n\n    p = max(p, calc(x[:i], nx[:i], i))\n\nprint(float(p))\n", "\nn=int(input())\n\nL=list(map(float,input().split()))\n\nL.sort(reverse=True)\nans1=0.0\nF=[]\nQ=[]\ni=0\nwhile(i<n):\n    ans2=0\n    x=L[i]\n    for j in range(len(F)):\n        ans2+=F[j]*(1-L[i])\n        x*=1-L[Q[j]]\n    ans2+=x\n    if(ans2>ans1):\n        F.append(L[i])\n        Q.append(i)\n        x=1\n        for j in range(len(F)-1):\n            F[j]*=1-L[i]\n            x*=1-L[Q[j]]\n        F[-1]*=x\n    ans1=max(ans2,ans1)\n    i+=1\n\nprint(ans1)\n", "n = int(input())\nl = [float(x) for x in input().split()]\nassert len(l) == n\n\nl.sort()\n\nif l[-1] == 1: print(\"%11.10f\"%1)\nelse:\n    sig = 0\n    prod = 1\n    while sig < 1 and len(l) > 0:\n        x = l.pop()\n        sig += x/(1-x)\n        prod *= (1-x)\n\n    print(\"%11.10f\"%(sig*prod))\n", "k, p = int(input()), list(map(float, input().split()))\np.sort(reverse = True)\nif p[0] == 1: print(1)\nelse:\n    a = 1\n    b = v = 0\n    for i in p:\n        a *= 1 - i\n        b += i / (1 - i)\n        u = a * b\n        if v > u: break\n        v = u\n    print(v)", "import sys\n\ninput()\nps = sorted((float(p) for p in input().split()), reverse=True)\nif 1.0 in ps:\n    print(1)\n    return\na, b = 0, 1\nfor p in ps:\n    c, d = a + p / (1 - p), b * (1 - p)\n    if c * d > a * b:\n        a, b = c, d\n    else:\n        break\nprint('{:.9}'.format(a * b))\n", "#!/usr/bin/env python3\n\n\ndef main():\n    input()\n    ps = list(map(float, input().split()))\n\n    ps = sorted(ps, reverse=True)\n\n    if ps[0] == 1:\n        print(1)\n    else:\n        p = 1 - ps[0]\n        s = ps[0] / (1 - ps[0])\n\n        for x in ps[1:]:\n            if s >= 1:\n                break\n\n            p *= (1 - x)\n            s += x / (1 - x)\n\n        print(p * s)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = sorted(list(map(float, input().split())))\n\ns = a[-1]\np = 1 - a[-1]\nfor i in range(n - 2, -1, -1):\n    if s < s * (1 - a[i]) + a[i] * p:\n        s = s * (1 - a[i]) + a[i] * p\n        p *= (1 - a[i])\nprint(s)", "x = int(input())\ny = list(map(float, input().split(' ')))\ny.sort()\ny.reverse()\nl = [y[0]]\np = y[0]\nprod = 1 - y[0]\n\nfor i in range(1, x):\n    \n    newx = p* (1-y[i]) + prod * y[i]\n    if newx > p:\n        prod *= (1 - y[i])\n        p = newx\n        l.append(y[i])\n    \nprint(p)", "\n\ndef main():\n    count_of_friends = int(input())\n    list_of_friends_chances = [float(i) for i in input().split(' ')]\n    list_of_friends_chances.sort()\n    max_number = max(list_of_friends_chances)\n    list_of_lists = []\n    for t in range(0, count_of_friends):\n        list_last = []\n        for i in range(t, count_of_friends):\n            var_temp = list_of_friends_chances[i]\n            for j in range(t, count_of_friends):\n                if i != j:\n                    var_temp *= 1 - list_of_friends_chances[j]\n            list_last.append(var_temp)\n        list_of_lists.append(sum(list_last))\n    max_sum_of_lists = max(list_of_lists)\n    if max_sum_of_lists > max_number:\n        print(max_sum_of_lists)\n    else:\n        print(max_number)\n\ndef __starting_point():\n    main()\n__starting_point()", "def C():\n    n = int(input())\n    tmp = input()\n    tmp = tmp.split()\n    probability = list(map(float,tmp))\n\n    probability.sort()\n    \n    current = probability[n-1]\n    pre = 1 - probability[n-1]\n\n    for i in range(n-2,-1,-1):\n        tmp = current * (1-probability[i]) + pre * (probability[i])\n        if (tmp > current):\n            current = tmp\n            pre = pre * (1-probability[i])\n\n    print(\"%.12f\" % current)\n\ndef __starting_point():\n    C()\n\n__starting_point()", "input() \np, s, ans = 1.0, 0.0, 0.0\nfor x in sorted(map(float, input().split()), reverse=True): \n\t\tif x == 1:\n\t\t\tans = 1\n\t\t\tbreak\n\t\tp = p * (1 - x)\n\t\ts = s + x / (1 - x)\n\t\tans = max(ans, p * s)\nprint(ans)", "\ndef __starting_point():\n\tN = int(input())\n\tprobs = list(map(float, input().split()))\n\tprobs.sort()\n\tP, S = 1.0, 0.0\n\tsol = 0.0\n\tfor n in reversed(range(N)):\n\t\t# print(probs[n])\n\t\tif probs[n] == 1.0:\n\t\t\tsol = 1.0\n\t\t\tbreak\n\t\tif S > 1:\n\t\t\t# print(S + (probs[n]/(1 - probs[n])))\n\t\t\tbreak\n\t\tP, S = P*(1 - probs[n]), S + probs[n]/(1 - probs[n])\n\t\t# print(P, S, P*S)\n\t\tsol = P*S\n\tprint(sol)\n__starting_point()", "from decimal import *\ngetcontext().prec = 500\nn = int(input())\np = sorted(map(Decimal, input().split()))\ndef ans(p):\n  ans = Decimal(0)\n  for i in range(len(p)):\n    cur = Decimal(1)\n    for j in range(len(p)):\n      if j == i:\n        cur = cur * p[j]\n      else:\n        cur = cur * (Decimal(1) - p[j])\n    ans += cur\n  return ans\nprint('%.100f' % max(ans(p[i:]) for i in range(n)))\n\n", "n = input()\n\nans = tmp = 0.0\n\npd = 1.0\n\nfor i in reversed(sorted(map(float, input().split()))):\n\n    tmp = tmp * (1.0 - i) + pd * i\n\n    pd *= 1.0 - i\n\n    ans = max(ans, tmp)\n\nprint('%0.12f' % ans)\n\n\n\n# Made By Mostafa_Khaled\n", "n = int(input())\np = list(map(float, input().split()))\np.sort()\ndp = [[0.0 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    dp[i][i] = 1.0 - p[i]\n    for j in range(i + 1, n):\n        dp[i][j] = dp[i][j - 1] * (1.0 - p[j])\n\nans = p[-1]\nfor i in range(n):\n    for j in range(i + 1, n):\n        prob = 0\n        for k in range(i, j + 1):\n            if k == i:\n                prob += p[i] * dp[i + 1][j]\n            elif k == j:\n                prob += p[j] * dp[i][j - 1]\n            else:\n                prob += dp[i][k - 1] * p[k] * dp[k + 1][j]\n\n        ans = max(ans, prob)\n\nprint(ans)\n\n", "from decimal import Decimal as fr\n\n\nans = 0\n\nn = int(input())\na = list(map(fr, input().split()))\n\nans = max(a)\n\n\ndef calc(lst):\n    nonlocal ans\n\n    prod = 1\n    for i in range(len(lst)):\n        prod *= 1 - lst[i]\n        cur = 0\n        for j in range(i + 1):\n            cur += lst[j] * prod / (1 - lst[j])\n\n#        print(cur)\n        ans = max(ans, cur)\n\n\nlst = list(sorted([x for x in a if x < 0.5]))\n\ncalc(lst)\ncalc(lst[::-1])\n\n\nprint('{:.15f}'.format(ans))\n", "from sys import stdin,stdout\nfrom collections import defaultdict,Counter\nfrom bisect import bisect,bisect_left\nimport math\nfrom itertools import permutations \n\n#stdin = open('input.txt','r')\nI = stdin.readline\n\n\n\n\n\n\nn = int(I())\narr = [float(x) for x in I().split()]\n\narr.sort(reverse = True)\nma = arr[0]\n#print(ma)\nfor i in range(1,n):\n    now = ma*(1-arr[i])\n    #print(now)\n    sec = 1\n    for j in range(i):\n        sec*=(1-arr[j])\n   # print(sec*arr[i],sec,arr[i])\n    now+=(arr[i]*sec)\n    #print(ma,now)\n    if(now>ma):\n        ma = now\n    else:\n        break\n\nprint(ma)\n\n", "import math\nimport sys\nN = int(input())\nP = list(map(float, input().split()))\n\nP = sorted(P, reverse=True)\nif 1.0 in P:\n  print(1.0)\n  return\ndef solve(P_):\n  log_prod_all = 0\n  for p in P_:\n    log_prod_all += math.log(1-p)\n  return sum([math.exp(math.log(p)-math.log(1-p)+log_prod_all) for p in P_])\nprint(max([solve(P[:i]) for i in range(len(P)+1)]))", "n=int(input())\nl=list(map(float,input().split()))\nl=sorted(l)\nl=l[::-1]\nans=0\nd=1\nvze=0\nfor x in l :\n    vze=vze+x*(d-vze)\n    d*=(1-x)\n    ans=max(ans,vze)\nprint(ans)", "# Contest: 20 - 2100 <= Codeforces Rating <= 2199 (https://a2oj.com/ladder?ID=20)\n# Problem: (16) Andrey and Problem (Difficulty: 4) (http://codeforces.com/problemset/problem/442/B)\n\ndef rint():\n    return int(input())\n\n\ndef rints():\n    return list(map(int, input().split()))\n\n\nn = rint()\np = sorted((float(s) for s in input().split()), reverse=True)\npr = 0\ninv = 1\nfor pi in p:\n    npr = pr * (1 - pi) + inv * pi\n    if npr < pr:\n        break\n    pr = npr\n    inv *= (1 - pi)\nprint(pr)\n", "n = int(input())\nP = list(map(float, input().split()))\nif 1 in P:\n    print(1)\n    return\nQ = []\nfor i in P:\n    Q.append(1 - i)\nQ.sort()\nans = 0\nc1 = 1\nc2 = 0\nfor i in Q:\n    if (c1 * i) * (c2 + 1 / i - 1) > ans:\n         ans = (c1 * i) * (c2 + 1 / i - 1)\n         c1 *= i\n         c2 += (1 / i - 1)\nprint(ans)", "import sys\nn = int(input()) \nindex = [i for i in range(n)]\ntmp = list(map(float, sys.stdin.readline().split()))\nans = []\nmaxP = 0\nwhile len(index):\n    j = 0\n    ma = 0\n    for k in index:\n        if tmp[k] >= ma:\n            ma = tmp[k]\n            j = k\n    index.remove(j)\n    ans.append(tmp[j])\n    tp = 0\n    for i in range(len(ans)):\n        q  = ans[i]\n        for k in range(len(ans)):\n            if i != k:\n                q *= 1 - ans[k]\n        tp += q\n    if tp > maxP:\n        maxP = tp\n    else:\n        ans.remove(tmp[j])\n\nprint(\"{0:.9f}\".format(maxP))\n\n", "#442B\nn = int(input())\np = list(map(float,input().split()))\np.sort(reverse=True)\nprev_prob = 0\ncur_prob = 0\nT = 1\nfor i in range(n):\n    cur_prob = cur_prob*(1-p[i]) + T*p[i]\n    if cur_prob >= prev_prob:\n        prev_prob = cur_prob\n        T *= (1-p[i])\n    else:\n        break\nprint(prev_prob)"]