["n, a, b, c = map(int, input().split())\nres = 10 ** 100\nfor i in range(50):\n    for j in range(50):\n        for k in range(50):\n            if (n + i + 2 * j + 3 * k) % 4 == 0:\n                res = min(res, a * i + b * j + c * k)\nprint(res)", "n, a, b, c = list(map(int, input().split()))\na = [0, a, b, c]\nfor _ in range(100):\n    for i in range(4):\n        for j in range(4):\n            to = (i + j) % 4\n            if a[to] > a[i] + a[j]:\n                a[to] = a[i] + a[j]\n\nprint(a[(4 - n % 4) % 4])\n", "n, a, b, c = list(map(int, input().split()))\nans = int(1e18)\nfor i in range(4):\n    for j in range(2):\n        for k in range(4):\n            if (n + i + 2 * j + 3 * k) % 4 == 0:\n                ans = min(ans, i * a + j * b + k * c)\nprint(ans)\n", "n,a,b,c=[int(i) for i in input().split()]\nans=10**11\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if (n+i+j*2+k*3)%4==0:\n                ans=min(ans,a*i+b*j+c*k)\nprint(ans)\n", "n, a, b, c = list(map(int, input().split()))\nif n % 4 == 0:\n    print(0)\nif n % 4 == 3:\n    print(min(a, 3 * c, b + c))\nif n % 4 == 2:\n    print(min(b, 2 * a, 2 * c))\nif n % 4 == 1:\n    print(min(c, 3 * a, b + a))", "#!/usr/bin/env python3\n\ndef main():\n    try:\n        while True:\n            n, a, b, c = list(map(int, input().split()))\n            result = 1e20\n            for ia in range(4):\n                for ib in range(4):\n                    for ic in range(4):\n                        x = n + ia + (ib << 1) + ic * 3\n                        if x & 0x3 == 0:\n                            result = min(result, ia * a + ib * b + ic * c)\n            print(result)\n\n    except EOFError:\n        pass\n\nmain()\n", "from math import *\nfrom sys import *\nfrom queue import *\nfrom decimal import *\n\nn,a,b,c=(int(z) for z in input().split())\nif(n%4==0):\n  print(0)\nelif(n%4==1):\n  print(min(3*a,a+b,c))\nelif(n%4==2):\n  print(min(2*a,b,2*c))\nelse:\n  print(min(a,3*c,b+c))", "n, a, b, c = map(int,input().split())\nost = (-n) % 4\nif ost == 0:\n    print(0)\nelif ost == 1:\n    print(min(a, 3 * c, b + c))\nelif ost == 2:\n    print(min(2 * a, b, 2 * c))\nelse:\n    print(min(3 * a, c, b + a))", "import math,sys,re,itertools,pprint,collections,copy\nrs,ri,rai,raf=input,lambda:int(input()),lambda:list(map(int, input().split())),lambda:list(map(float, input().split()))\n\nn, a, b, c = rai()\ns = float(\"inf\")\n\nfor ia in range(5):\n    for ib in range(5):\n        for ic in range(5):\n            k = ia + 2*ib + 3*ic\n            if (n + k) % 4 != 0:\n                continue\n            s = min(s, ia * a + ib * b + ic * c)\n\nprint(s)\n\n", "n, a, b, c = [int(x) for x in input().split()]\n\nmin_sum = 10 * (a + b + c)\n\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if (n + 1*i + 2*j + 3*k) % 4 == 0:\n                min_sum = min(min_sum, i*a + j*b + k*c)\n\nprint(min_sum)", "n, a, b, c = list(map(int, input().split()))\nk = 4 - (n % 4)\nif k == 4:\n    print(0)\nelif k == 1:\n    print(min(a, c * 3, b + c))\nelif k == 2:\n    print(min(2 * a, b, 2 * c))\nelif k == 3:\n    print(min(3 * a, c, b + a))\n", "def solve():\n    x=list(map(int,input().split()))\n    remainder=x[0]%4\n    if remainder==0:\n        return 0;\n    elif remainder==2:\n        return min(2*x[1],x[2],2*x[3]);\n    elif remainder==1:\n        return min(3*x[1],x[1]+x[2],x[3]);\n    else:\n        return min(x[1],x[2]+x[3],x[3]*3);\n\n\nprint(solve())\n    \n    \n", "n, a, b, c = list(map(int, input().split()))\n\nsum = -1\n\nfor A in range(4):\n    for B in range(3):\n        for C in range(4):\n            N = n + A + B * 2 + C * 3\n            if N % 4 == 0:\n                if sum == -1 or A * a + B * b + C * c < sum:\n                    sum = A * a + B * b + C * c\n\nprint (sum)\n", "n,a,b,c = (int(i) for i in input().split())\nif n%4 == 0:\n    print(0)\nelse:\n    ans = 10**11\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                if (n+i*1+j*2+k*3)%4 == 0:\n                    ans = min(ans,i*a+b*j+c*k)\n    print(ans)", "n, a, b, c = map(int, input().split())\nif not n % 4:\n    print(0)\nelif n % 4 == 3:\n    print(min(a, c + b, c * 3))\nelif n % 4 == 2:\n    print(min(2 * a, b, 2 * c))\nelif n % 4 == 1:\n    print(min(3 * a, b + a, c))", "n,a,b,c=[int(i) for i in input().split()]\nif n%4==0:\n    print(0)\nif n%4==1:\n    print(min(3*a,a+b,c))\nif n%4==2:\n    print(min(2*a,b,2*c))\nif n%4==3:\n    print(min(a,b+c,3*c))", "n,a,b,c = list(map(int, input().split()))\nl = []\nif (n%4==0):\n    l = [0]\nelif(n%4==1):\n    l = [3*a,a+b,c]\nelif(n%4==2):\n    l = [2*a, b, 2*c]\nelse:\n    l = [a, b+c, 3*c]\n\nmini = min(l)\nprint(mini)\n", "n, a, b, c = map(int, input().split())\nmn = 10 ** 12\narr = [0, a, b, c]\nfor i in range(30):\n    for j in range(30):\n        q = (4 - (n % 4 + i * 3 + j * 2) % 4) % 4\n        mn = min(mn, arr[3] * i + arr[2] * j + arr[1] * q)\nprint(mn)", "n, a, b, c = map(int, input().split())\nif n % 4 == 0:\n    print(0)\nelif n % 4 == 1:\n    print(min(c, a*3, a+b))\nelif n % 4 == 2:\n    print(min(c*2, b, a*2))\nelse:#n % 4 == 3\n    print(min(a, b+c, 3*c))", "n, a, b, c = list(map(int, input().split()))\nres = 10000000000\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            if (n + i + j*2 + k*3)%4 == 0:\n                res = min(res, i*a + j*b + k*c)\n\nprint(res)\n", "n, one,two,three = (int(x) for x in input().split())\n\nn = n%4\nif n == 3:\n    print(min(one,3*three,two + three))\nelif n == 2:\n    print(min(2*one,two,2*three))\nelif n == 1:\n    print(min(3*one,two+one,three))\nelse:\n    print(0)", "n, a, b, c = map(int, input().split())\nm = 10**12\nfor i in range(30):\n    for j in range(30):\n        for k in range(30):\n            if (n+i+2*j+3*k) % 4:\n                continue\n            m = min(m, i*a+j*b+k*c)\nprint(m)", "3\n\nn,a,b,c = [int(x) for x in input().strip().split()]\n\nif n%4 == 0:\n\tprint(0)\nelif n%4 == 1:\n\tprint(min(3*a,a+b,c))\nelif n%4 == 2:\n\tprint(min(2*a,b,2*c))\nelse:\n\tprint(min(a,b+c,3*c))", "n, a, b, c = list(map(int, input().split()))\nif n % 4 == 0:\n    print(0)\nelif n % 4 == 1:\n    print(min(3*a, a + b, c))\nelif n % 4 == 2:\n    print(min(2*a, b, 2 * c))\nelif n % 4 == 3:\n    print(min(a, b + c, 3 * c))\n\n", "\"\"\"\nATSTNG's ejudge Python3 solution template\n(actual solution is below)\n\"\"\"\nimport sys, queue\n\ntry:\n    import dev_act_ffc429465ab634  # empty file in directory\n    DEV = True\nexcept:\n    DEV = False\n\ndef log(*s):\n    if DEV: print('LOG', *s)\n\nclass EJudge:\n    def __init__(self, problem=\"default\", reclim=1<<30):\n        self.problem = problem\n        sys.setrecursionlimit(reclim)\n\n    def use_files(self, infile='', outfile=''):\n        if infile!='':\n            self.infile = open(infile)\n            sys.stdin = self.infile\n        if infile!='':\n            self.outfile = open(outfile, 'w')\n            sys.stdout = self.outfile\n\n    def use_bacs_files(self):\n        self.use_files(self.problem+'.in', self.problem+'.out')\n\n    def get_tl(self):\n        while True: pass\n\n    def get_ml(self):\n        tmp = [[[5]*100000 for _ in range(1000)]]\n        while True: tmp.append([[5]*100000 for _ in range(1000)])\n\n    def get_re(self):\n        s = (0,)[8]\n\n    def get_wa(self, wstr='blablalblah'):\n        for _ in range(3): print(wstr)\n        return\n\nclass IntReader:\n    def __init__(self):\n        self.ost = queue.Queue()\n\n    def get(self):\n        return int(self.sget())\n\n    def sget(self):\n        if self.ost.empty():\n            for el in input().split():\n                self.ost.put(el)\n        return self.ost.get()\n\n    def release(self):\n        res = []\n        while not self.ost.empty():\n            res.append(self.ost.get())\n        return res\n\n###############################################################################\nej = EJudge(  )\nint_reader = IntReader()\nfmap = lambda f,*l: list(map(f,*l))\nparse_int = lambda: fmap(int, input().split())\n\n# input\nn,t1,t2,t3 = parse_int()\nt3 = min(t3, t2+t1, t1*3)\nt2 = min(t2, t1*2, t3*2)\nt1 = min(t1, t3+t2, t3*3)\n\nn = n%4\nif n==0: ans = 0\nif n==1: ans = t3\nif n==2: ans = t2\nif n==3: ans = t1\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]