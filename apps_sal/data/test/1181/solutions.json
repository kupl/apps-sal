["def median(a):\n    if len(a) == 0:\n        return 0\n    if len(a) % 2 == 1:\n        return a[len(a) // 2]\n    else:\n        return (a[len(a) // 2] + a[(len(a) // 2) - 1]) // 2\n\n\ndef profit(a, old_val):\n    a.sort()\n    med = median(a)\n    sum_old = 0\n    sum_new = 0\n    for i in a:\n        sum_old += abs(i - old_val)\n        sum_new += abs(i - med)\n    return sum_old - sum_new\n\nn, m = [int(c) for c in input().split()]\npages = [int(c) for c in input().split()]\n\ncount = {pages[0]: []}\ncurrent_page_switches = 0\n\nfor i in range(1, len(pages)):\n    cur_i = pages[i]\n    prev_i = pages[i - 1]\n    if not(cur_i in count):\n        count[cur_i] = []\n\n    if cur_i != prev_i:\n        count[cur_i].append(prev_i)\n        count[prev_i].append(cur_i)\n        current_page_switches += abs(cur_i - prev_i)\n\nmax_profit = 0\n\nfor i in count:\n    if len(count[i]) > 0:\n        tmp = profit(count[i], i)\n        if tmp > max_profit:\n            max_profit = tmp\n\n\nprint(current_page_switches - max_profit)\n\n", "n, m = map(int, input().split())\ns, p = 0, [[] for i in range(n + 1)]\nt = list(map(int, input().split()))\nfor i in range(m - 1):\n    if t[i] != t[i + 1]:\n        p[t[i + 1]].append(t[i])\n        p[t[i]].append(t[i + 1])\nfor i, q in enumerate(p):\n    if q:\n        q.sort()\n        k = q[len(q) // 2]\n        d = sum(abs(i - j) - abs(k - j) for j in q)\n        if d > s: s = d\nprint(sum(abs(t[i + 1] - t[i]) for i in range(m - 1)) - s)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = {}\nfor ai in a:\n    b[ai] = []\namt = 0\nfor i in range(1, len(a)):\n    amt += abs(a[i]-a[i-1])\n    if a[i]-a[i-1]:\n        b[a[i]] += [a[i-1]]\n        b[a[i-1]] += [a[i]]\ndiff = 0\nfor bi in b:\n    if b[bi]:\n        center = sorted(b[bi])[len(b[bi])//2]\n        sum = 0\n        for page in b[bi]:\n            sum += abs(page-center)-abs(page-bi)\n        diff = min(diff, sum)\nprint(amt+diff)", "n, m = list(map(int, input().split()))\n\ns, p = 0, [[] for i in range(n + 1)]\n\nt = list(map(int, input().split()))\n\nfor i in range(m - 1):\n\n    if t[i] != t[i + 1]:\n\n        p[t[i + 1]].append(t[i])\n\n        p[t[i]].append(t[i + 1])\n\nfor i, q in enumerate(p):\n\n    if q:\n\n        q.sort()\n\n        k = q[len(q) // 2]\n\n        d = sum(abs(i - j) - abs(k - j) for j in q)\n\n        if d > s: s = d\n\nprint(sum(abs(t[i + 1] - t[i]) for i in range(m - 1)) - s)\n\n\n\n# Made By Mostafa_Khaled\n", "from collections import defaultdict\n\nLIM = 10 ** 5 + 123\n\nn, m = list(map(int, input().split()))\nocc = [[] for i in range(LIM)]\nadd = [0 for i in range(LIM)]\n\n\na = list(map(int, input().split()))\n\nbase_ans = 0\nfor i in range(1, m):\n    if a[i] != a[i - 1]:\n        occ[a[i]].append(a[i - 1])\n        occ[a[i - 1]].append(a[i])\n\n    t = abs(a[i] - a[i - 1])\n    base_ans += t\n    add[a[i]] += t\n    add[a[i - 1]] += t\n\nans = base_ans\n\n\nfor i in range(LIM):\n    if len(occ[i]) == 0:\n        continue\n\n    occ[i].sort()\n    k = len(occ[i])\n    sum_before = 0\n    sum_after = sum(occ[i])\n\n    for idx, c in enumerate(occ[i], 1):\n        sum_before += c\n        sum_after -= c\n\n        cur = idx * c - sum_before \n        cur += sum_after - (k - idx) * c\n        ans = min(ans, base_ans - add[i] + cur)\n\n\nprint(ans)\n", "from collections import defaultdict\n\nLIM = 10 ** 5 + 123\n\nn, m = list(map(int, input().split()))\nocc = [[] for i in range(LIM)]\nadd = [0 for i in range(LIM)]\n\n\na = list(map(int, input().split()))\n\nbase_ans = 0\nfor i in range(1, m):\n    if a[i] != a[i - 1]:\n        occ[a[i]].append(a[i - 1])\n        occ[a[i - 1]].append(a[i])\n\n    t = abs(a[i] - a[i - 1])\n    base_ans += t\n    add[a[i]] += t\n    add[a[i - 1]] += t\n\nans = base_ans\n\n\nfor i in range(LIM):\n    if len(occ[i]) == 0:\n        continue\n\n    occ[i].sort()\n    k = len(occ[i])\n    sum_before = 0\n    sum_after = sum(occ[i])\n\n    for idx, c in enumerate(occ[i], 1):\n        sum_before += c\n        sum_after -= c\n\n        cur = idx * c - sum_before \n        cur += sum_after - (k - idx) * c\n        ans = min(ans, base_ans - add[i] + cur)\n\n\nprint(ans)\n"]