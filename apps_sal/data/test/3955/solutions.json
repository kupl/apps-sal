["class Ortree():\n    def __init__(self, n, As):\n        size = 1\n        while n > size:\n            size *= 2\n        self.size = size\n        data = [0] * size + As[:] + [0] * (size - n)\n        for idx in range(self.size - 1, 0, -1):\n            idx2 = idx << 1\n            data[idx] = data[idx2] | data[idx2 + 1]\n        self.data = data\n    \n    def update(self, idx, val):\n        pos = idx + self.size\n        self.data[pos] = val\n        pos >>= 1\n        while pos:\n            pos2 = pos << 1\n            self.data[pos] = self.data[pos2] | self.data[pos2 + 1]\n            pos >>= 1\n        return self.data[1]\n\n\ndef solve(n, k, x, As):\n    As.sort(reverse= True)\n    xk = x**k\n    if n == 1:\n        As[0] *= xk\n        return As[0]\n    if is_simplecase(xk, As):\n        As[0] *= xk\n        return cumor(As)\n    return complexcase(n, xk, As)\n    \n\ndef cumor(As):\n    result = 0\n    for a in As:\n        result |= a\n    return result\n\ndef is_simplecase(xk, As):\n    len0 = len(bin(As[0] * xk))\n    len1 = len(bin(As[1] * xk))\n    return len0 > len1\n\ndef complexcase(n, xk, As):\n    len0 = len(bin(As[0] * xk))\n    for i, a in enumerate(As[1:], 1):\n        if len(bin(a * xk)) < len0:\n            end = i\n            rest = cumor(As[end:])\n            break\n    else:\n        end = n\n        rest = 0\n    ortree = Ortree(end, As[:end])\n    record = rest\n    for i in range(end):\n        score = ortree.update(i, As[i] * xk) | rest\n        if record < score:\n            record = score\n        ortree.update(i, As[i])\n    return record\n\nn, k, x = map(int, input().split())\nAs = list(map(int, input().split()))\nprint(solve(n, k, x, As))", "#!/usr/bin/env python\n# 579D_or.py - Codeforces.com/problemset/problem/579/D by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Or Class (Main Program)\n###############################################################################\n\n\nclass Or:\n    \"\"\" Or representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n, self.k, self.x] = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.nums = list(map(int, uinput().split()))\n\n        self.cnt = [0] * 100\n        for n in self.nums:\n            i = 0\n            while n != 0:\n                if n % 2:\n                    self.cnt[i] += 1\n                n >>= 1\n                i += 1\n\n        self.nmax = 0\n        for n in self.nums:\n            cur_cnt = list(self.cnt)\n            i = 0\n            nn = n\n            while n != 0:\n                if n % 2:\n                    cur_cnt[i] -= 1\n                n >>= 1\n                i += 1\n            n = nn * self.x ** self.k\n            i = 0\n            while n != 0:\n                if n % 2:\n                    cur_cnt[i] += 1\n                n >>= 1\n                i += 1\n\n            k = 0\n            for i in range(len(cur_cnt)):\n                if cur_cnt[i] > 0:\n                    k += 1 << i\n\n            if k > self.nmax:\n                self.nmax = k\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = self.nmax\n\n        return str(result)\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Or class testing \"\"\"\n\n        # Constructor test\n        test = \"3 1 2\\n1 1 1\"\n        d = Or(test)\n        self.assertEqual(d.n, 3)\n        self.assertEqual(d.k, 1)\n        self.assertEqual(d.x, 2)\n        self.assertEqual(d.nums, [1, 1, 1])\n\n        # Sample test\n        self.assertEqual(Or(test).calculate(), \"3\")\n\n        # Sample test\n        test = \"4 2 3\\n1 2 4 8\"\n        self.assertEqual(Or(test).calculate(), \"79\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Or(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Or(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Or(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Or().calculate())\n\n__starting_point()", "n, k, x = list(map(int, input().split()))\na = list(map(int, input().split()))\n\npref = [0 for el in a]\nsuff = [0 for el in a]\n\npref[0] = a[0]\nfor i in range(1, len(a)):\n    pref[i] = pref[i-1] | a[i]\n\nsuff[-1] = a[-1]\nfor i in range(len(a)-2, -1, -1):\n    suff[i] = suff[i+1] | a[i]\n\nif n == 1:\n    print(a[0]*x**k)\n    return\n\nsol = max((a[0]*x**k) | suff[1], pref[-2] | (a[-1]*x**k))\nfor i in range(1, len(a)-1):\n    sol = max(sol, pref[i-1] | (a[i]*x**k) | suff[i+1])\n\nprint(sol)\n", "__author__ = 'kitkat'\nimport sys\n\n#sys.stdin = open(\"in.txt\")\ntry:\n    while True:\n        n, k, x = list(map(int, input().split(\" \")))\n        val = [0] + list(map(int, input().split(\" \")))\n        res = 0\n        L = [0 for i in range(200003)]\n        R = [0 for i in range(200003)]\n        for i in range(1, n+1, 1):\n            L[i] = L[i-1] | val[i]\n            R[n-i+1] = R[n-i+2] | val[n-i+1]\n        for i in range(1, n+1, 1):\n            for j in range(k):\n                val[i] *= x\n        for i in range(1, n+1, 1):\n            res = max(res, L[i-1] | R[i+1] | val[i])\n        print(res)\nexcept EOFError:\n    pass\n", "def pw(a, x, k):\n    if a == 0:\n        return 0;\n    ans = a;\n    while (k > 0):\n        ans *= x;\n        k = k - 1;\n    return ans;\nn, k, x = list(map(int, input().split()));\na = list(map(int, input().split()));\nlft = [];\nlft.append(0);\nfor val in a:\n    lft.append(val);\nlft.append(0);\nrht = [];\nfor val in lft:\n    rht.append(val);\nfor i in range(1, len(lft)):\n    lft[i] = lft[i] | lft[i - 1];\n#print (lft);\nfor i in range(len(rht) - 2, -1, -1):\n    rht[i] = rht[i] | rht[i + 1];\n#print (rht);\nans = 0;\nfor i in range (1, len(lft) - 1):\n    if(ans < (lft[i - 1] | pw(a[i - 1], x, k) | rht[i + 1])):\n        ans = lft[i - 1] | pw(a[i - 1], x, k) | rht[i + 1];\nprint (ans);\n", "#!/usr/bin/env python\n# 579D_or.py - Codeforces.com/problemset/problem/579/D by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Or Class (Main Program)\n###############################################################################\n\n\nclass Or:\n    \"\"\" Or representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else input().rstrip()\n\n        # Reading single elements\n        [self.n, self.k, self.x] = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.nums = list(map(int, uinput().split()))\n\n        self.cnt = [0] * 100\n        for n in self.nums:\n            i = 0\n            while n != 0:\n                if n % 2:\n                    self.cnt[i] += 1\n                n >>= 1\n                i += 1\n\n        self.nmax = 0\n        for n in self.nums:\n            cur_cnt = list(self.cnt)\n            i = 0\n            nn = n\n            while n != 0:\n                if n % 2:\n                    cur_cnt[i] -= 1\n                n >>= 1\n                i += 1\n            n = nn * self.x ** self.k\n            i = 0\n            while n != 0:\n                if n % 2:\n                    cur_cnt[i] += 1\n                n >>= 1\n                i += 1\n\n            k = 0\n            for i in range(len(cur_cnt)):\n                if cur_cnt[i] > 0:\n                    k += 1 << i\n\n            if k > self.nmax:\n                self.nmax = k\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = self.nmax\n\n        return str(result)\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Or class testing \"\"\"\n\n        # Constructor test\n        test = \"3 1 2\\n1 1 1\"\n        d = Or(test)\n        self.assertEqual(d.n, 3)\n        self.assertEqual(d.k, 1)\n        self.assertEqual(d.x, 2)\n        self.assertEqual(d.nums, [1, 1, 1])\n\n        # Sample test\n        self.assertEqual(Or(test).calculate(), \"3\")\n\n        # Sample test\n        test = \"4 2 3\\n1 2 4 8\"\n        self.assertEqual(Or(test).calculate(), \"79\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Or(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Or(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Or(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Or().calculate())\n\n__starting_point()", "import sys\n\nn, k, x = [int(x) for x in sys.stdin.readline().split()]\n\na = [int(x) for x in sys.stdin.readline().split()]\n\ntl = 0\nl = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    tl |= a[i]\n    l[i] = tl\n\nans = 0\ntr = 0\nfor i in range(0, n):\n    ta = tr | a[i] * x ** k | l[i + 1]\n    ans = ans if ans > ta else ta\n    tr |= a[i]\n\nprint(ans)\n", "def solve(n,k,x,a):\n    s = 0\n    prefix = [0] * (n+10)\n    suffix = [0] * (n+10)\n    a.append(0)\n    a.insert(0,0)\n    m = pow(x,k)\n    for i in range(1,n+1):\n        prefix[i] = prefix[i-1] | a[i]\n    for i in range(n, 0, -1):\n        suffix[i] = suffix[i+1] | a[i]\n    for i in range(1,n+1):\n        s = max(s, prefix[i-1] | (a[i]*m) | suffix[i+1])\n    return s\n\ndef main(infile, outfile):\n    n,k,x = list(map(int,infile.readline().split()))\n    a = list(map(int,infile.readline().split()))\n    outfile.write(str(solve(n,k,x,a)) + '\\n')\n\ndef __starting_point():\n    from sys import stdin, stdout\n    main(stdin, stdout)\n\n__starting_point()", "def main():\n    n, k, x = list(map(int, input().split()))\n    aa = list(map(int, input().split()))\n    x, lo, u = x ** k, [0] * n, 0\n    for i, a in enumerate(aa):\n        lo[i] = u\n        u |= a\n    hi, u = [], 0\n    for a in reversed(aa):\n        hi.append(u)\n        u |= a\n    hi.reverse()\n    for i, u, a, v in zip(list(range(n)), lo, aa, hi):\n        aa[i] = a * x | u | v\n    print(max(aa))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "x, n, k = [int(x) for x in input().split()]\nlista = [int(x) for x in input().split()]\nacumuladaL = []\nacumuladaR = []\nmult = k ** n\n\ncont = 0\nfor i in lista:\n    cont |= i\n    acumuladaL.append(cont)\ncont = 0\nfor i in lista[::-1]:\n    cont |= i\n    acumuladaR.append(cont)\nif len(lista) == 1:\n    print(lista[0] * mult)\nelif len(lista) == 2:\n    acumuladaR = acumuladaR[::-1]\n    maximo = max([lista[0] * mult | acumuladaR[1],\n                  lista[-1] * mult | acumuladaL[-2]])\n    print(maximo)\nelse:\n    maximo = max([lista[0] * mult | acumuladaR[1],lista[-1] * mult | acumuladaL[-2]])\n    acumuladaR = acumuladaR[::-1]\n\n    for i in range(1, len(lista) - 1):\n        var = lista[i] * mult | acumuladaR[i + 1] | acumuladaL[i - 1]\n        if maximo < var:\n            maximo = var\n    print(maximo)\n", "x, n, k = [int(x) for x in input().split()]\nlista = [int(x) for x in input().split()]\nacumuladaL = []\nacumuladaR = []\nmult = k ** n\n\ncont = 0\nfor i in lista:\n    cont |= i\n    acumuladaL.append(cont)\ncont = 0\nfor i in lista[::-1]:\n    cont |= i\n    acumuladaR.append(cont)\nif len(lista) == 1:\n    print(lista[0] * mult)\nelif len(lista) == 2:\n    acumuladaR = acumuladaR[::-1]\n    maximo = max([lista[0] * mult | acumuladaR[1],\n                  lista[-1] * mult | acumuladaL[-2]])\n    print(maximo)\nelse:\n    maximo = max([lista[0] * mult | acumuladaR[1],lista[-1] * mult | acumuladaL[-2]])\n    acumuladaR = acumuladaR[::-1]\n\n    for i in range(1, len(lista) - 1):\n        var = lista[i] * mult | acumuladaR[i + 1] | acumuladaL[i - 1]\n        if maximo < var:\n            maximo = var\n    print(maximo)\n\n# 1500336849347\n", "import sys\nimport math\n\n[n,k,x] = [int(i) for i in sys.stdin.readline().rstrip('\\n').split()]\nnums = [int(i) for i in sys.stdin.readline().rstrip('\\n').split()]\n\n\noffset = 1\nfor i in range(k):\n\toffset = offset*x\n\nleftor = [0]\nfor i in nums[:-1]:\n\tleftor.append(leftor[-1] | i)\nrightor = [0]\nfor i in range(len(nums)-1,0,-1):\n\trightor.append(rightor[-1] | nums[i])\nans = []\nfor i in range(len(nums)):\n\tans.append(leftor[i] | ((nums[i]*offset) | rightor[n-i-1]))\n\nsys.stdout.write(str(max(ans))+'\\n')", "\nn,k,x = map( int,input().split() )\n*Arr, = map( int,input().split() )\n\nPrfx = [0]*(n+2)\nSffx = [0]*(n+2)\n\nfor i in range(0,n):\n    Prfx[i+1] = Prfx[i]|Arr[i]\n    Sffx[n-i-1] = Sffx[n-i]|Arr[n-i-1]\nnow = x**k\nRes = 0\nfor i in range(0,n):\n    Res = max( Prfx[i]|(Arr[i]*now)|Sffx[i+1],Res );\nprint(Res)", "n,k,x=list(map(int,input().split()))\n\nl=list(map(int,input().split()))\n\na=[0]*n\n\nb=[0]*n\n\nfor i in range(1,n): a[i]=a[i-1]|l[i-1]\n\nfor i in range(1,n): b[n-i-1]=b[-i]|l[-i]\n\nnom=0\n\nfor i in range(1,n):\n\n    if l[nom]*(x**k)|a[nom]|b[nom]<l[i]*(x**k)|a[i]|b[i]: nom=i\n\nl[nom]*=x**k\n\nprint(l[nom]|a[nom]|b[nom])\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "import math\na=list(map(int,input().split()))\nn=a[0]\nk=a[1]\nx=a[2]\na=list(map(int,input().split()))\nb=[None]*n\nc=[None]*n\nb[0]=a[0]\nmul=1\nc[n-1]=a[n-1]\nfor i in range(k):\n    mul*=x\nif n==1:\n    print(mul*a[0])\nelse:\n    for i in range(1,n):\n        b[i]=b[i-1]|a[i]\n    for i in range(n-2,-1,-1):\n        c[i]=c[i+1]|a[i]\n    ans=max(a[0]*mul|c[1],a[n-1]*mul|b[n-2])\n    for i in range(1,n-1):\n        ans=max(ans,a[i]*mul|b[i-1]|c[i+1])\n    print(ans)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jun 14 21:25:50 2019\n\n@author: pawangoyal\n\"\"\"\ninput_1=input()\ninput_1=input_1.split()\nn = int(input_1[0])\nk = int(input_1[1])\nx = int(input_1[2])\n\na=input()\na=a.split()\na=[int(x) for x in a]\nmaximum=0\nprefix=[]\nsuffix=[]\n\nprefix_or = 0\nsuffix_or = 0\n\nfor i in range(n):\n    prefix_or = prefix_or|a[i]\n    prefix.append(prefix_or)\n\nfor i in range(n-1,-1,-1):\n    suffix_or = suffix_or|a[i]\n    suffix.append(suffix_or)\n \nor_bit=0\n\nif n ==1 :\n    or_bit=a[0]*(x**k)\nelse:\n    for i in range(n):\n        if i == 0:\n            or_bit=max(or_bit,(a[0]*(x**k)|suffix[n-2]))\n        elif i == (n-1):\n            or_bit=max(or_bit,(a[n-1]*(x**k)|prefix[n-2]))\n        else:\n            or_bit=max(or_bit,(a[i]*(x**k)|prefix[i-1]|suffix[n-2-i]))\n   \n    \nprint(or_bit)\n\n", "\ndef __starting_point():\n    n, k, p = map(int, input().split())\n    numbers = list(map(int, input().split()))\n    # initialize vectors x, y with 0 for n + 10 positions\n    x = [0] * (n + 10)\n    y = [0] * (n + 10)\n    # raise to power\n    p = p ** k\n    maxi = 0\n    for i in range(n):\n        x[i + 1] = numbers[i] | x[i]\n    for j in range(n, -1, -1):\n        y[j - 2] = numbers[j - 1] | y[j - 1]\n    for i in range(n):\n        if maxi < x[i] | numbers[i] * p | y[i]:\n            maxi = x[i] | numbers[i] * p | y[i]\n    print(maxi)\n__starting_point()", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/10/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\nimport itertools\n\n\ndef blen(val):\n    s = 0\n    while val > 0:\n        s += 1\n        val >>= 1\n    \n    return s\n\n\ndef solve(N, K, X, A):\n    left = [0 for _ in range(N)]\n    right = [0 for _ in range(N)]\n    \n    for i, v in enumerate(A):\n        left[i] = (left[i-1] if i-1 >= 0 else 0) | v\n    for i in range(N-1, -1, -1):\n        right[i] = (right[i+1] if i+1 < N else 0) | A[i]\n    \n    ans = 0\n    for i, v in enumerate(A):\n        a = left[i-1] if i-1 >= 0 else 0\n        b = right[i+1] if i+1 < N else 0\n        ans = max(ans, a | b | (v * X**K))\n    \n    return ans\n    \n    \n\nN, K, X = map(int, input().split())\nA = [int(x) for x in input().split()]\nprint(solve(N, K, X, A))", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/10/20\n\na simple conclusion is that we should multiple only one v with x K times\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\ndef solve(N, K, X, A):\n    prefix = [0 for _ in range(N)]\n    suffix = [0 for _ in range(N)]\n    \n    for i, v in enumerate(A):\n        prefix[i] = (prefix[i-1] if i-1 >= 0 else 0) | v\n    for i in range(N-1, -1, -1):\n        suffix[i] = (suffix[i+1] if i+1 < N else 0) | A[i]\n    \n    ans = 0\n    for i, v in enumerate(A):\n        a = prefix[i-1] if i-1 >= 0 else 0\n        b = suffix[i+1] if i+1 < N else 0\n        ans = max(ans, a | b | (v * X**K))\n    \n    return ans\n    \n\nN, K, X = map(int, input().split())\nA = [int(x) for x in input().split()]\nprint(solve(N, K, X, A))", "import sys\nclass IoTool:  # a tool for input redirection \n    DEBUG = 0\n    def _reader_dbg():\n        with open('./input.txt', 'r') as f:\n            lines = f.readlines()\n        for l in lines: yield l.strip() \n    def _reader_oj():  \n        return iter(sys.stdin.read().split('\\n'))\n    reader = _reader_dbg() if DEBUG else _reader_oj()\n    def read(): return next(IoTool.reader)\n\ninput = IoTool.read\n\ndef main():\n    n, k, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    mul = 1\n    for i in range(k): mul *= x\n    if n == 1:\n        print(a[0] * mul)\n        return\n    pre, tail = [0] * n, [0] * n\n    pre[0] = a[0]\n    tail[n-1] = a[n-1]\n    \n    for i in range(1, n): pre[i] = pre[i-1] | a[i]\n    for i in range(n-2, -1, -1): tail[i] = tail[i+1] | a[i]\n    answer = max((pre[0]*mul) | tail[1], pre[n-2]|(tail[n-1]*mul))\n    for i in range(1, n-1):\n        answer = max(answer, (a[i] * mul) | pre[i-1] | tail[i+1])\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,k,x = list(map(int,input().split()))\nlis = list(map(int,input().split()))\npre=[0]*(n+2)\npos=[0]*(n+2)\nans=0\nm=x**k\nfor i in range(1,n):\n    pre[i]=pre[i-1]|lis[i-1]\nfor i in range(n,0,-1):\n    pos[i]=pos[i+1]|lis[i-1]\nfor i in range(1,n+1):\n    ans=max(ans,pre[i-1]|lis[i-1]*m|pos[i+1])\nprint(ans)    \n\n\n", "n,k,x=list(map(int,input().split()))\na=list(map(int,input().split()))\nc=x**k\npr=[0]\nsu=[0]\nb=0\nfor i in range(n-1):\n    b=a[i]|b\n    pr.append(b)\nb=0\nfor i in range(n-1,0,-1):\n    b=a[i]|b\n    su.append(b)\nsu=su[::-1]\nd=[]\nfor i in range(n):\n    d.append(pr[i]|a[i]*c|su[i])\nprint(max(d))", "import sys\nimport math\n#from queue import *\n#import random\n#sys.setrecursionlimit(int(1e6))\ninput = sys.stdin.readline\n \n############ ---- USER DEFINED INPUT FUNCTIONS ---- ############\ndef inp():\n    return(int(input()))\ndef inara():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(list(map(int,input().split())))\n################################################################\n############ ---- THE ACTUAL CODE STARTS BELOW ---- ############\n\nn,k,x=invr()\nara=inara()\nara.append(0)\nara.reverse()\nara.append(0)\nara.reverse()\n\nmul=int(math.pow(x,k))\n\npref=[0]*(n+2)\n\nfor i in range(1,n+1):\n\tpref[i]=pref[i-1]|ara[i]\n\nsuff=[0]*(n+2)\n\nfor i in range(n,0,-1):\n\tsuff[i]=suff[i+1]|ara[i]\n\t\nans=0\n\nfor i in range(1,n+1):\n\tans=max(ans,pref[i-1]|ara[i]*mul|suff[i+1])\n\nprint(ans)\n", "import sys\nimport math\n#from queue import *\n#import random\n#sys.setrecursionlimit(int(1e6))\ninput = sys.stdin.readline\n \n############ ---- USER DEFINED INPUT FUNCTIONS ---- ############\ndef inp():\n    return(int(input()))\ndef inara():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(list(map(int,input().split())))\n################################################################\n############ ---- THE ACTUAL CODE STARTS BELOW ---- ############\n\nn,k,x=invr()\nara=inara()\nara.append(0)\nara.reverse()\nara.append(0)\nara.reverse()\n\nmul=int(math.pow(x,k))\n\npref=[0]*(n+2)\n\nfor i in range(1,n+1):\n\tpref[i]=pref[i-1]|ara[i]\n\nsuff=[0]*(n+2)\n\nfor i in range(n,0,-1):\n\tsuff[i]=suff[i+1]|ara[i]\n\t\nans=0\n\nfor i in range(1,n+1):\n\tans=max(ans,pref[i-1]|ara[i]*mul|suff[i+1])\n\nprint(ans)\n"]