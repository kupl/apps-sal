["import numpy as np\nfrom numba import njit\nR,C,K=list(map(int,input().split()))\nvl=np.zeros((R,C), np.int64)\nfor _ in range(K):\n  r,c,v=list(map(int,input().split()))\n  vl[r-1][c-1]=v\n@njit\ndef main():\n  dp=np.zeros((R+1,C+1,4), np.int64)\n  for i in range(1,R+1):\n    for j in range(1,C+1):\n      for k in range(4):\n        dp[i][j][k]=max(dp[i][j-1][k],dp[i-1][j][3])\n      for k in range(3,0,-1):\n        dp[i][j][k]=max(dp[i][j][k],dp[i][j][k-1]+vl[i-1][j-1])\n  return dp[R][C][3]\nprint((main()))\n\n", "import math\nfrom numba import jit\nimport numpy as np\n\n@jit\ndef solve():\n    \n    r,c,k = map(int,input().split())\n\n    value = np.zeros((r,c), dtype=np.int64)\n    for i in range(k):\n        r_t,c_t,v_t = map(int,input().split())\n        value[r_t-1][c_t-1] = v_t\n\n    dp = np.zeros((r,c,4), dtype=np.int64)\n    dp[0][0][0] = 0\n\n    for i in range(r):\n        for j in range(c):\n            for m in range(4):\n                if i + 1 < r:\n                    dp[i+1][j][0] = max(dp[i+1][j][0],dp[i][j][m])\n                if j + 1 < c:\n                    dp[i][j+1][m] = max(dp[i][j+1][m],dp[i][j][m])\n                if value[i][j] != 0 and m < 3:\n                    if i + 1 < r:\n                        dp[i+1][j][0] = max(dp[i+1][j][0],dp[i][j][m]+value[i][j])\n                    if j + 1 < c:\n                        dp[i][j+1][m+1] = max(dp[i][j+1][m+1],dp[i][j][m]+value[i][j])\n\n    for m in range(2,-1,-1):\n        dp[r-1][c-1][m+1] = max(dp[r-1][c-1][m+1],dp[r-1][c-1][m]+value[r-1][c-1])\n    return max(dp[r-1][c-1])\n\nprint(solve())", "import numba\nfrom numba import jit\nimport numpy as np\n \n#(i,j)\u2192(i+1,j)\u306e\u3088\u3046\u306b\u52d5\u304f\u3068\u304d\u306f\u30a2\u30a4\u30c6\u30e0\u3092\u5165\u624b\u3067\u304d\u308b\u56de\u6570\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\n#dp[\u5217][\u4eca\u3001\u4f55\u500b\u30a2\u30a4\u30c6\u30e0\u3092\u53d6\u3063\u305f\u304b]\u3067dp\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\n@jit\ndef main(r, c):\n  dp = np.zeros((c+1, 4), np.int64)\n  for i in range(r):\n    new_dp = np.zeros((c+1, 4), np.int64)\n    for j in range(4):\n      new_dp[:,0] = np.maximum(new_dp[:,0], dp[:,j])\n    dp = new_dp\n    for k in range(c):\n      for l in range(2, -1, -1):\n        dp[k,l+1] = max(dp[k,l+1], dp[k,l]+item_map[i,k])\n      for m in range(1,4):\n        dp[k+1,m] = max(dp[k+1,m], dp[k,m])\n  return max(dp[c-1,:])\n \nR, C, K = map(int, input().split())\nitem_lis = list(list(map(int, input().split())) for i in range(K))\nitem_map = np.zeros((R, C), np.int64)\nfor i,j,k in item_lis:\n  item_map[i-1,j-1] = k\n \nprint(main(R, C))", "import sys\nimport numpy as np\nfrom collections import defaultdict\nfrom numba import njit\ndef input(): return sys.stdin.readline().rstrip()\n\n@njit\ndef koushin(dp,item):\n    dptmp1 = np.copy(dp)\n    dptmp2 = np.copy(dp)\n    dptmp3 = np.copy(dp)\n    for i in range(len(item)):\n        dptmp3[item[i][0]:] = np.fmax(dptmp3[item[i][0]:], dptmp2[item[i][0]]+item[i][1])\n        dptmp2[item[i][0]:] = np.fmax(dptmp2[item[i][0]:], dptmp1[item[i][0]]+item[i][1])\n        dptmp1[item[i][0]:] = np.fmax(dptmp1[item[i][0]:], dp[item[i][0]]+item[i][1])\n    return dptmp3\n\ndef main():\n    R, C, K = map(int, input().split())\n    items = defaultdict(list)\n    for _ in range(K):\n        r, c, v = map(int, input().split())\n        items[r-1].append([c-1, v])\n    dp = np.zeros(C, dtype=int)\n    for RR in range(R):\n        if items[RR]==[]:\n          continue\n        items[RR].sort(key=lambda x: x[0])\n        dp=koushin(dp,np.array(items[RR],dtype=int))\n    print(dp[-1])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\nfrom numba import njit\n\nR, C, K = map(int, input().split())\nitem = np.zeros((R, C), np.int_)\nfor _ in range(K):\n    r, c, v = map(int, input().split())\n    item[r-1,c-1] = v\n\n@njit\ndef solve(R, C, K, item):\n    DP = np.zeros((R, C, 4), np.int_)\n\n    DP[0][0][1] = item[0][0]\n\n    for i in range(R):\n        for j in range(C):\n            for k in range(4):\n                if i > 0:  # \u524d\u306e\u884c\u304b\u3089\n                    DP[i,j,0] = max(DP[i,j,0], max(DP[i-1,j]))  # \u53d6\u3089\u306a\u3044\n                    DP[i,j,1] = max(DP[i,j,1], max(DP[i-1,j])+item[i,j])  # \u53d6\u308b\n\n                if j > 0:  # \u524d\u306e\u5217\u304b\u3089\n                    DP[i,j,k] = max(DP[i,j,k], DP[i,j-1,k])  # \u53d6\u3089\u306a\u3044\n                    if k >= 1:\n                        DP[i,j,k] = max(DP[i,j,k], DP[i,j-1,k-1]+item[i,j])  # \u53d6\u308b\n\n    print(max(DP[R-1,C-1]))\n\nsolve(R, C, K, item)", "import numba\nfrom numba import jit\nimport numpy as np\n  \n@jit\ndef main(r, c):\n  dp = np.zeros((c+1, 4), np.int64)\n  for i in range(r):\n    new_dp = np.zeros((c+1, 4), np.int64)\n    for j in range(4):\n      new_dp[:,0] = np.maximum(new_dp[:,0], dp[:,j])\n    dp = new_dp\n    for k in range(c):\n      for l in range(2, -1, -1):\n        dp[k,l+1] = max(dp[k,l+1], dp[k,l]+item_map[i,k])\n      for m in range(1,4):\n        dp[k+1,m] = max(dp[k+1,m], dp[k,m])\n  return max(dp[c-1,:])\n\n\nR, C, K = map(int, input().split())\nitem_lis = list(list(map(int, input().split())) for i in range(K))\nitem_map = np.zeros((R, C), np.int64)\nfor i,j,k in item_lis:\n  item_map[i-1,j-1] = k\n\nprint(main(R, C))", "import sys\nimport numpy as np\nfrom numba import jit, void, i8\ninput = sys.stdin.readline\n\ndef main():\n    R, C, K = list(map(int, input().split()))\n\n    L_INF = int(1e17)\n    dp = np.full((R+1, C+1, 4), -L_INF, dtype=np.int64)\n    cell = np.full((R+1, C+1), 0, dtype=np.int64)\n\n    for i in range(K):\n        x, y, c = list(map(int, input().split()))\n        cell[x-1][y-1] = c\n\n    f(dp, cell, R, C)\n\n    print((dp[R][C][3]))\n\n@jit(void(i8[:,:,:],i8[:,:],i8,i8))\ndef f(dp, cell, R, C):\n    dp[0][1][0] = dp[1][0][0] = 0\n    for i in range(1, R + 1):\n        for j in range(1, C + 1):\n            for k in range(4):\n                if k > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j][k-1])\n                dp[i][j][k] = max(dp[i][j][k], dp[i][j-1][k])\n                if k > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j-1][k-1] + cell[i-1][j-1])\n                if k == 1:\n                    dp[i][j][k] = max(dp[i][j][1], dp[i-1][j][3] + cell[i-1][j-1])\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from numpy import zeros, int64\nfrom numba import njit\n\nR, C, K, *RCV = map(int64, open(0).read().split())\nV = zeros((R + 1, C + 1), int64)\nfor r, c, v in zip(*[iter(RCV)] * 3):\n    V[r][c] = v\n\n@njit\ndef main():\n    dp = zeros((R + 1, C + 1, 4), int64)\n    for i in range(1, R + 1):\n        for j in range(1, C + 1):\n\n            vij = V[i][j]\n\n            for k in range(4):\n                dp[i][j][k] = max(\n                    dp[i][j - 1][k],\n                    dp[i - 1][j][3]\n                )\n            for k in range(3, 0, -1):\n                dp[i][j][k] = max(\n                    dp[i][j][k],\n                    vij + dp[i][j][k - 1]\n                )\n\n    print(dp[R][C][3])\n\nmain()", "from numba import jit\nimport numpy as np\n\n@jit\ndef main():\n    R, C, K = map(int, input().split())\n    v_list = np.zeros((R+2,C+2), np.int64)\n    for i in range(K):\n        r, c, v = map(int, input().split())\n        v_list[r][c] = v\n    dp = np.zeros((R+2,C+2,4), np.int64)\n\n    for i in range(R+1):\n        for j in range(C+1):\n            for n in range(4):\n                dp[i+1][j][n] = max(dp[i+1][j][n], dp[i][j][n])\n                dp[i][j+1][n] = max(dp[i][j+1][n], dp[i][j][n])\n                if n <= 2:\n                    dp[i+1][j][n+1] = max(dp[i+1][j][3], dp[i][j][3] + v_list[i+1][j])\n                    dp[i][j+1][n+1] = max(dp[i][j+1][n+1], dp[i][j][n] + v_list[i][j+1])\n    return dp[R][C][3]\n\nprint(main())", "import sys\nimport numpy as np\nfrom numba import njit, void, i8\ninput = sys.stdin.readline\n\ndef main():\n    R, C, K = list(map(int, input().split()))\n\n    L_INF = int(1e17)\n    dp = np.full((R+1, C+1, 4), -L_INF, dtype=np.int64)\n    cell = np.full((R+1, C+1), 0, dtype=np.int64)\n\n    for i in range(K):\n        x, y, c = list(map(int, input().split()))\n        cell[x-1][y-1] = c\n\n    f(dp, cell, R, C)\n\n    print((dp[R][C][3]))\n\n@njit(void(i8[:,:,:],i8[:,:],i8,i8))\ndef f(dp, cell, R, C):\n    dp[0][1][0] = dp[1][0][0] = 0\n    for i in range(1, R + 1):\n        for j in range(1, C + 1):\n            for k in range(4):\n                if k > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j][k-1])\n                dp[i][j][k] = max(dp[i][j][k], dp[i][j-1][k])\n                if k > 0:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j-1][k-1] + cell[i-1][j-1])\n                if k == 1:\n                    dp[i][j][k] = max(dp[i][j][1], dp[i-1][j][3] + cell[i-1][j-1])\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# Date [ 2020-08-15 21:54:45 ]\n# Problem [ e.py ]\n# Author Koki_tkg\n\nimport sys;      from decimal import Decimal\nimport math;     from itertools import combinations, product\nimport bisect;   from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 6 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef lcm(a: int, b: int) -> int: return (a * b) // math.gcd(a, b)\n\nfrom numba import njit, i8\nimport numpy as np\n\n@njit(i8(i8, i8, i8[:,:]))\ndef dp(R, C, grid):\n    dp = np.zeros((R+1, C+1, 4), np.int64)\n    for y in range(1, R+1):\n        for x in range(1, C+1):\n            for i in range(4):\n                dp[y][x][i] = max(dp[y][x - 1][i], dp[y - 1][x][3])\n            for i in range(3, 0, -1):\n                dp[y][x][i] = max(dp[y][x][i], dp[y][x][i - 1] + grid[y-1][x-1])\n    return dp[R][C][3]\n\ndef Main():\n    R, C, k = read_ints()\n    item = [read_int_list() for _ in range(k)]\n    grid = np.zeros((R, C), np.int64)\n    for r, c, v in item:\n        grid[r - 1][c - 1] = v\n    print(dp(R, C, grid))\n\nif __name__ ==  '__main__':\n    Main()", "import sys\nimport numpy as np\nfrom collections import defaultdict\nfrom numba import njit\ndef input(): return sys.stdin.readline().rstrip()\n\n@njit('i8[:](i8[:],i8[:,:])')\ndef koushin(dp,item):\n    dptmp1 = np.copy(dp)\n    dptmp2 = np.copy(dp)\n    dptmp3 = np.copy(dp)\n    for i in range(len(item)):\n        dptmp3[item[i][0]:] = np.fmax(dptmp3[item[i][0]:], dptmp2[item[i][0]]+item[i][1])\n        dptmp2[item[i][0]:] = np.fmax(dptmp2[item[i][0]:], dptmp1[item[i][0]]+item[i][1])\n        dptmp1[item[i][0]:] = np.fmax(dptmp1[item[i][0]:], dp[item[i][0]]+item[i][1])\n    return dptmp3\n\ndef main():\n    R, C, K = list(map(int, input().split()))\n    items = defaultdict(list)\n    for _ in range(K):\n        r, c, v = list(map(int, input().split()))\n        items[r-1].append([c-1, v])\n    dp = np.zeros(C, dtype='int64')\n    for RR in range(R):\n        if items[RR]==[]:\n          continue\n        items[RR].sort(key=lambda x: x[0])\n        dp=koushin(dp,np.array(items[RR],dtype='int64'))\n    print((dp[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from numba import jit\nimport numpy as np\n\n@jit\ndef main():\n    R, C, K = map(int, input().split())\n    scores = np.zeros((R,C), np.int64)\n    for _ in range(K):\n        r, c, v = map(int, input().split())\n        scores[r-1][c-1] = v\n    dp=np.zeros((R+1,C+1,4), np.int64)\n\n    for i in range(1, R+1):\n        for j in range(1, C+1):\n            for k in range(4):\n                dp[i][j][k] = max(dp[i][j-1][k],\n                                dp[i-1][j][3])\n            for k in range(3, 0, -1):\n                dp[i][j][k] = max(dp[i][j][k],\n                                  dp[i][j][k-1] + scores[i-1][j-1])\n\n    \n    return dp[R][C][3]\n\nprint(main())", "import numpy as np\nfrom numba import njit\n\nrr,cc,kk=map(int,input().split())\ngoods=np.array([list(map(int,input().split())) for _ in range(kk)])\ngg=np.zeros((rr,cc))\nfor cr,ccc,ck in goods:\n    gg[cr-1][ccc-1]=ck\n\n@njit\ndef calc(r,c,g):\n    dp=-1*np.ones((r+1,c+1,4))\n    maxlst=np.zeros((r+1,c+1))\n\n    dp[:,0,0]=0\n    dp[0,:,0]=0\n    \n    for i in range(r):\n        for j in range(c):\n            tmp=0\n            for k in range(3):\n                if g[i][j]>0 and dp[i+1][j][k]>=0:\n                    dp[i+1][j+1][k+1]=max(dp[i+1][j][k+1],dp[i+1][j][k]+g[i][j])\n                else:\n                    dp[i+1][j+1][k+1]=dp[i+1][j][k+1]\n                tmp=max(tmp,dp[i+1][j+1][k+1])\n            \n            dp[i+1][j+1][0]=max(maxlst[i][j+1],dp[i+1][j][0])\n            tmp=max(tmp,dp[i+1][j+1][0])\n            \n            if g[i][j]>0 and dp[i+1][j+1][0]>=0:\n                dp[i+1][j+1][1]=max(dp[i+1][j+1][1],dp[i+1][j+1][0]+g[i][j])\n                tmp=max(tmp,dp[i+1][j+1][1])\n            \n            maxlst[i+1][j+1]=tmp\n    \n    return maxlst[r][c]\n            \nprint(int(calc(rr,cc,gg)))", "import sys\nimport numpy as np\nimport numba\nfrom numba import njit, b1, i4, i8, f8\nimport sys\n\nR, C, K = map(int, input().split())\nrcvs = [list(map(int, input().split())) for _ in range(K)]\nrcvs = np.array(rcvs, dtype=np.int64)\n#%%\n@njit\ndef main(rcvs):\n    rewards = np.zeros((R, C), dtype=np.int64)\n    \n    for i in range(len(rcvs)):\n        rewards[rcvs[i][0]-1][rcvs[i][1]-1] = rcvs[i][2]\n    \n    dp = np.zeros((R+1, C+1, 4), dtype=np.int64)\n    \n    for i in range(R):\n        for j in range(C):\n            reward = rewards[i][j]\n            dp[i+1][j+1][0] = max(dp[i][j+1])\n            dp[i+1][j+1][1] = dp[i+1][j+1][0] + reward\n            \n            for k in range(4): # move downside without selecting\n                dp[i+1][j+1][k] = max(dp[i+1][j][k], dp[i+1][j+1][k])\n            if reward > 0:\n                for k in range(3):\n                    dp[i+1][j+1][k+1] = max(dp[i+1][j][k]+reward,dp[i+1][j+1][k+1])\n    return max(dp[-1][-1])\n\nprint(main(rcvs))\n\n\"\"\"\n\u30e1\u30e2\nndarray\u306e\u578b\u5ba3\u8a00\u3067type\u6307\u5b9a\u3067\u304d\u306a\u3044\ntype\u30b3\u30de\u30f3\u30c9\u3082\u6a5f\u80fd\u3057\u306a\u3044\niteration\u4f7f\u3048\u306a\u3044\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u4f7f\u3048\u308b\nmain(As)\n\"\"\"", "import numba\nfrom numba import jit\nimport numpy as np\n\n#(i,j)\u2192(i+1,j)\u306e\u3088\u3046\u306b\u52d5\u304f\u3068\u304d\u306f\u30a2\u30a4\u30c6\u30e0\u3092\u5165\u624b\u3067\u304d\u308b\u56de\u6570\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\n#dp[\u5217][\u4eca\u3001\u4f55\u500b\u30a2\u30a4\u30c6\u30e0\u3092\u53d6\u3063\u305f\u304b]\u3067dp\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\n@jit\ndef main(r, c):\n  dp = np.zeros((c+1, 4), np.int64)\n  for i in range(r):\n    new_dp = np.zeros((c+1, 4), np.int64)\n    for j in range(4):\n      new_dp[:,0] = np.maximum(new_dp[:,0], dp[:,j])\n    dp = new_dp\n    for k in range(c):\n      for l in range(2, -1, -1):\n        dp[k,l+1] = max(dp[k,l+1], dp[k,l]+item_map[i,k])\n      for m in range(1,4):\n        dp[k+1,m] = max(dp[k+1,m], dp[k,m])\n  return max(dp[c-1,:])\n\nR, C, K = list(map(int, input().split()))\nitem_lis = list(list(map(int, input().split())) for i in range(K))\nitem_map = np.zeros((R, C), np.int64)\nfor i,j,k in item_lis:\n  item_map[i-1,j-1] = k\n\nprint((main(R, C)))\n", "import numpy as np\nfrom numba import jit\n\nR, C, K = list(map(int, input().split()))\nG = np.zeros((R+1, C+1), np.int64)\nfor i in range(K):\n    [r, c, v] = list(map(int, input().split()))\n    G[r-1][c-1] = v\n\n@jit\ndef main(G, R, C):\n    dp = np.full((R+1, C+1, 4), -1)\n    dp[0][0][0] = 0\n    if G[0][0] != None: dp[0][0][1] = G[0][0]\n    for r in range(R):\n        for c in range(C):\n            for k in range(4):\n                if dp[r][c][k] == -1: continue\n                if k < 3: # can go right and pick up\n                    if dp[r][c+1][k+1] < dp[r][c][k] + G[r][c+1]:\n                        dp[r][c+1][k+1] = dp[r][c][k] + G[r][c+1]\n                if dp[r][c+1][k] < dp[r][c][k]:\n                    dp[r][c+1][k] = dp[r][c][k]\n                if dp[r+1][c][0] < dp[r][c][k]:\n                    dp[r+1][c][0] = dp[r][c][k]\n                if dp[r+1][c][1] < dp[r][c][k] + G[r+1][c]:\n                    dp[r+1][c][1] = dp[r][c][k] + G[r+1][c]\n    return(max(dp[r][c]))\n\nret = main(G, R, C)\nprint(ret)            \n", "from numba import jit\nimport numpy as np\n@jit\ndef main():\n  R,C,K=list(map(int,input().split()))\n  scores=np.zeros((R,C),np.int64)\n  for _ in range(K): #\u5404\u30de\u30b9\u306b\u30a2\u30a4\u30c6\u30e0\u914d\u7f6e\n    r,c,v=list(map(int,input().split()))\n    scores[r-1][c-1]=v\n  dp=np.zeros((R+1,C+1,4),np.int64) #\u5f8c\u306e\u305f\u3081\u306b\u4f59\u5206\u306b\u4f5c\u3063\u3066\u304a\u304f\u3001scores\u306e\u914d\u5217\u306f\u5225\u306a\u306e\u3067index\u306b\u6ce8\u610f\n  for i in range(1,R+1):\n    for j in range(1,C+1):\n      for k in range(4):\n        dp[i][j][k]=max(dp[i][j-1][k],dp[i-1][j][3]) #\u540c\u3058\u884c\u3067\u3059\u3067\u306b3\u3064\u62fe\u3063\u3066\u304b\u3089\u6b21\u306e\u884c\u306b\u304f\u308b\u306e\u304b\u305f\u3060\u96a3\u306e\u30de\u30b9\u306b\u9032\u3080\u304b\n      for k in range(3,0,-1):\n        dp[i][j][k]=max(dp[i][j][k],dp[i][j][k-1]+scores[i-1][j-1]) #\u305d\u306e\u30de\u30b9\u3067\u30a2\u30a4\u30c6\u30e0\u3092\u62fe\u3046\u304b\u3069\u3046\u304b\n  return dp[R][C][3]\nprint((main()))\n", "import numpy as np\nfrom numba import jit\n\n\ndef test():\n    R, C, K = list(map(int, input().split()))\n    rcv = [list(map(int, input().split())) for _ in range(K)]\n\n    items = np.zeros((R+1, C+1), dtype='int64')\n    for item in rcv:\n        items[item[0]][item[1]] = item[2]\n\n    dp = np.zeros((R+1, C+1), dtype='int64')\n\n    # \u307e\u305a\u306f3\u500b\u306e\u5236\u7d04\u304c\u306a\u3044\u5834\u5408\u3067\u306e\u5b9f\u88c5\n    for j in range(1, R+1):\n        for i in range(1, C+1):\n            # \u4e0b\u306b\u884c\u304f\u9077\u79fb\n            dp[j][i] = max(dp[j][i], dp[j-1][i] + items[j][i])\n\n            # \u53f3\u306b\u884c\u304f\u9077\u79fb\n            dp[j][i] = max(dp[j][i], dp[j][i-1] + items[j][i])\n\n    print((dp[R][C]))\n\n\n@jit\ndef main(R, C, items):\n\n    dp = np.zeros((4, R+1, C+1), dtype=np.int64)\n\n    # 3\u500b\u306e\u5236\u7d04\u304c\u3042\u308b\u5834\u5408\u306e\u5b9f\u88c5\n    for i in range(1, R+1):\n        for j in range(1, C+1):\n            for k in range(4):\n                # \u4e0b\u306b\u884c\u304f\u9077\u79fb\n                # \u53d6\u3089\u306a\u3044\u5834\u5408\n                dp[0][i][j] = max(dp[0][i][j], dp[k][i-1][j])\n                # \u53d6\u308b\u5834\u5408\n                dp[1][i][j] = max(dp[1][i][j], dp[k][i-1][j] + items[i][j])\n\n                # \u53f3\u306b\u884c\u304f\u9077\u79fb\n                # \u53d6\u3089\u306a\u3044\u5834\u5408\n                dp[k][i][j] = max(dp[k][i][j], dp[k][i][j-1])\n                # \u53d6\u308b\u5834\u5408\n                if k > 0:\n                    dp[k][i][j] = max(dp[k][i][j], dp[k-1]\n                                      [i][j-1] + items[i][j])\n\n    ans = 0\n    for k in range(4):\n        if ans < dp[k][R][C]:\n            ans = dp[k][R][C]\n\n    print(ans)\n\n\ndef __starting_point():\n    R, C, K = list(map(int, input().split()))\n    rcv = [list(map(int, input().split())) for _ in range(K)]\n    items = np.zeros((R+1, C+1), dtype=np.int64)\n    for item in rcv:\n        items[item[0]][item[1]] = item[2]\n    main(R, C, items)\n\n__starting_point()", "from numba import jit\nimport numpy as np\n\n@jit\ndef main():\n    R, C, K = map(int, input().split())\n    scores = np.zeros((R,C), np.int64)\n    for _ in range(K):\n        r, c, v = map(int, input().split())\n        scores[r-1][c-1] = v\n    dp = np.zeros((R+1,C+1,4), np.int64)\n\n    for i in range(1, R+1):\n        for j in range(1, C+1):\n            for k in range(4):\n                dp[i][j][k] = max(dp[i][j-1][k],\n                                  dp[i-1][j][3])\n            for k in range(3, 0, -1):\n                dp[i][j][k] = max(dp[i][j][k],\n                                  dp[i][j][k-1] + scores[i-1][j-1])\n\n    return dp[R][C][3]\n\nprint(main())", "import numpy as np\nimport sys\ninput = sys.stdin.readline\n\n\ndef main():\n    h, w, k = list(map(int, input().split()))\n    values = np.zeros((h, w), dtype=np.int64)\n    items = np.array([list(map(int, input().split())) for _ in range(k)])\n    ys, xs, vs = items[:, 0] - 1, items[:, 1] - 1, items[:, 2]\n    values[ys, xs] = vs\n\n    DP = np.zeros(w + 1, dtype=np.int64)\n    for line in values:\n        DP[1:] += line\n        DP = np.maximum.accumulate(DP)\n        for _ in range(2):\n            DP[1:] = np.maximum(DP[:-1] + line, DP[1:])\n            DP = np.maximum.accumulate(DP)\n    print((DP[-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from numba import jit\nimport numpy as np\nimport sys\n\ndef input():\n    return sys.stdin.readline()[:-1]\n@jit\ndef main():\n    R, C, K = list(map(int, input().split()))\n    item = np.zeros((R,C), np.int64)\n    for i in range(K):\n        r,c,v = list(map(int,input().split()))\n        item[r-1][c-1] = v\n\n    dp = np.zeros((R+1,C+1,4), np.int64)\n    for i in range(R):\n        for j in range(C):\n            for k in range(2,-1,-1):\n                dp[i][j][k+1] = max(dp[i][j][k+1],dp[i][j][k] + item[i][j])\n            for k in range(4):\n                dp[i+1][j][0] = max(dp[i+1][j][0],dp[i][j][k])\n                dp[i][j+1][k] = max(dp[i][j+1][k],dp[i][j][k])\n    return max(dp[R-1][C-1])\nprint((main()))\n", "import sys\nimport numpy as np\nfrom numba import njit\n\nR, C, K = map(int, input().split())\nitem = np.zeros((R, C), np.int_)\nfor s in sys.stdin.readlines():\n    r, c, v = map(int, s.split())\n    item[r-1,c-1] = v\n\n@njit\ndef solve(R, C, K, item):\n    DP = np.zeros((R, C, 4), np.int_)\n\n    DP[0][0][1] = item[0][0]\n\n    for i in range(R):\n        for j in range(C):\n            for k in range(4):\n                if i > 0:  # \u524d\u306e\u884c\u304b\u3089\n                    DP[i,j,0] = max(DP[i,j,0], max(DP[i-1,j]))  # \u53d6\u3089\u306a\u3044\n                    DP[i,j,1] = max(DP[i,j,1], max(DP[i-1,j])+item[i,j])  # \u53d6\u308b\n\n                if j > 0:  # \u524d\u306e\u5217\u304b\u3089\n                    DP[i,j,k] = max(DP[i,j,k], DP[i,j-1,k])  # \u53d6\u3089\u306a\u3044\n                    if k >= 1:\n                        DP[i,j,k] = max(DP[i,j,k], DP[i,j-1,k-1]+item[i,j])  # \u53d6\u308b\n\n    print(max(DP[R-1,C-1]))\n\nsolve(R, C, K, item)"]