["s, t = input(), input()\nsx, tx = str(sorted(s)), str(sorted(t))\n\ndef subset(s, t):\n    i = 0\n    for c in s:\n        if c == t[i]: i += 1\n        if i == len(t): break\n    return i == len(t)\n\nif sx == tx:\n    print(\"array\")\nelif subset(s, t):\n    print(\"automaton\")\nelif subset(sx, tx):\n    print(\"both\")\nelse:\n    print(\"need tree\")\n", "def main():\n    s = input()\n    t = input()\n    \n    i = 0\n    for j in s:\n        if j == t[i]:\n            i += 1\n            if i == len(t):\n                print(\"automaton\")\n                return\n    \n    for i in range(26):\n        c = chr(ord('a') + i)\n        if s.count(c) < t.count(c):\n            print(\"need tree\")\n            return\n    \n    if len(s) == len(t):\n        print(\"array\")\n    else:\n        print(\"both\")\n\n\nmain()\n", "import sys\na = input()\nb = input()\nj = 0\nfor i in a:\n\tif i == b[j]:\n\t\tj += 1\n\tif j == len(b):\n\t\tbreak\n \nif j == len(b):\n\tprint('automaton')\n\treturn\n \nnum = [0] * 42\nfor i in a:\n\tnum[ord(i)-ord('a')] += 1\nfor i in b:\n\tnum[ord(i)-ord('a')] -= 1\n \nfor i in num:\n\tif i < 0:\n\t\tprint('need tree')\n\t\treturn\nif sum(num) > 0:\n\tprint('both')\nelse:\n\tprint('array')", "s = input()\nt = input()\n\nd = {}\ne = {}\nfor c in t:\n\td[c] = d.get(c, 0) + 1\n\nfor c in s:\n\te[c] = e.get(c, 0) + 1\n\nfor i in d:\n\tif d[i] > e.get(i, 0):\n\t\tprint(\"need tree\")\n\t\treturn\n\nif len(s) == len(t):\n\tprint(\"array\")\n\treturn\n\nj = -1\nfor i in range(len(t)):\n\twhile True:\n\t\tj += 1\n\t\tif j == len(s):\n\t\t\tprint(\"both\")\n\t\t\treturn\n\t\tif s[j] == t[i]:\n\t\t\tbreak\nprint(\"automaton\")\t\t\t\t\n", "def yes(listx, desired):\n    if len(listx)!=len(desired):\n        return False\n    \n    for char in desired:\n        if char in listx:\n            listx.remove(char)\n        else:\n            return False\n    return True\n\ndef inside(listx, listx2):\n    for element in listx2:\n        if element in listx:\n            ind=listx.index(element)\n            listx=listx[ind+1:]\n        else:\n            return False\n    return True\n\nsa=input()\nsa2=input()\narray=0\nauto=0\n\nsaxx=[]\nsaxx2=[]\nfor char in sa:\n    saxx.append(char)\nfor char in sa2:\n    saxx2.append(char)\n\nif sa2 in sa:\n    auto=1\n\nif inside(saxx, saxx2):\n    print(\"automaton\")\nelse:\n    saxx.sort()\n    saxx2.sort()\n    if saxx==saxx2:\n        print('array')\n        \n    elif inside(saxx, saxx2):\n        print('both')\n\n    else:\n        print(\"need tree\")\n", "s = input()\nt = input()\na = list(s)\nb = list(t)\nj = 0\nfor i in range(len(b)) :\n    while j < len(a) and a[j] != b[i] :\n        j += 1\n    if j == len(a) : \n        break\n    j += 1\nelse :\n    print('automaton')\n    return\nnum = [0] * 26\nfor x in a :\n    num[ord(x) - ord('a')] += 1\nfor x in b :\n    num[ord(x) - ord('a')] -= 1\nif num == [0] * 26 :\n    print('array')\n    return\nfor x in num :\n    if x < 0 :\n        print('need tree')\n        break\nelse :\n    print('both')\n", "\"\"\"\nCodeforces Round 256 Div 2 Problem B\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0:\n        return inputs\n    if mode == 1:\n        return inputs.split()\n    if mode == 2:\n        return [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n    if isinstance(s, list): s = \" \".join(map(str,s))\n    s = str(s)\n    print(s, end=\"\")\n\n################################################### SOLUTION\ns = read(0)\nt = read(0)\nresstr = [\"need tree\", \"automaton\", \"array\", \"both\"]\nres = -1\n\nars = [0] * 26\nart = [0] * 26\nfor i in list(s): ars[ord(i) - 97] += 1\nfor i in list(t): art[ord(i) - 97] += 1\nfor i in range(26):\n    if art[i] > ars[i]:\n        res = 0\n        break\nif not (res+1):\n\n    # automaton check\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n    if j == len(t):\n        res = 0\n    else:\n        res = 2\n\n    if ars != art: res += 1\nprint(resstr[res])", "def check(s1, s2):\n    for i in s1 + s2:\n        if s1.count(i) < s2.count(i):\n            return 0\n    return 1\n\ndef aut(s1, s2):\n    a1 = a2 = 0\n    while a2 < len(s2):\n        if a1 == len(s1):\n            return 0\n        while s1[a1] != s2[a2]:\n            a1 += 1\n            if a1 == len(s1):   \n                return 0\n        a2 += 1\n        a1 += 1\n    return 1\n\ns1 = input()\ns2 = input()\nif sorted(s1) == sorted(s2):\n    print('array')\nelif aut(s1, s2):\n    print('automaton')\nelif check(s1, s2):\n    print('both')\nelse:\n    print('need tree')", "s=input().strip()\nt=input().strip()\ni=0\nj=0\nwhile i<len(s) and j<len(t):\n    if t[j]!=s[i]:\n        i+=1\n    else:\n        i+=1\n        j+=1\nif j==len(t):\n    print('automaton')\n    return\nc1=[0]*26\nc2=[0]*26\nfor i in s:\n    c1[ord(i)-ord('a')]+=1\nfor i in t:\n    c2[ord(i)-ord('a')]+=1\nboo=True\nfor i in range(26):\n    if c1[i]>c2[i]:\n        boo=False\n    if c1[i]<c2[i]:\n        print('need tree')\n        return\nif boo:\n    print('array')\nelse:\n    print('both')", "s=input()\nt=input()\narray=automaton=both=1\n\n# array swapaet\nlet = set(s) | set(t)\nif len(s)==len(t):\n    for i in let:\n        if s.count(i) != t.count(i):\n            array=0\nelse:\n    array=0\n\nif array:\n    print('array')\n    return\n\n# automaton dalyaet\nf = s\ni=0\n\nwhile i < min(len(t), len(f)):\n    if f[i] != t[i]:\n        f = f[:i] + f[i+1:]\n    else:\n        i += 1\n\nif f[:len(t)]==t:\n    print('automaton')\n    return\n\n# both\nfor i in let:\n    if s.count(i) < t.count(i):\n        both=0\nif both:\n    print('both')\n    return\n\n# else\nprint('need tree')\n", "s = input().strip()\nr = input().strip()\nsd = dict()\nrd = dict()\nfor k in s:\n    if k in sd:\n        sd[k] += 1\n    else:\n        sd[k] = 1\nfor k in r:\n    if k in rd:\n        rd[k] += 1\n    else:\n        rd[k] = 1\n\ncan = True\nfor k in r:\n    if not (k in sd) or rd[k] > sd[k]:\n        can = False\nif not can:\n    print('need tree')\nelse:\n    can = True\n    for k in s:\n        if not (k in rd) or rd[k] != sd[k]:\n            can = False\n    if can:\n        print('array')\n    else:\n        ind = 0\n        for i in range(len(s)):\n            if s[i] == r[ind] and ind < len(r)-1:\n                ind += 1\n        if ind == len(r)-1:\n            print('automaton')\n        else:\n            print('both')\n", "s=input()\nt=input()\nif len(s)==len(t):\n\tx=list(s)\n\ty=list(t)\n\tx.sort()\n\ty.sort()\n\tn=len(s)\n\tntree=False\n\tfor i in range(n):\n\t\tif x[i]!=y[i]:\n\t\t\tntree=True\n\t\t\tbreak\n\t\t\t\n\tif ntree:\n\t\tprint(\"need tree\")\n\telse:\n\t\tprint(\"array\")\nelse:\n\tx=list(s)\n\ty=list(t)\n\tn=len(x)\n\tm=len(y)\n\tj=0\n\tnboth=False\n\tfor i in range(m):\n\t\twhile j<n:\n\t\t\tif x[j]!=y[i]:\n\t\t\t\tj+=1\n\t\t\telse:\n\t\t\t\tbreak\n\t\tif j==n:\n\t\t\tnboth=True\n\t\t\tbreak\n\t\tj+=1\n\tif not nboth:\n\t\tprint(\"automaton\")\n\telse:\n\t\tx.sort()\n\t\ty.sort()\n\t\tntree=False\n\t\tj=0\n\t\tfor i in range(m):\n\t\t\twhile j<n:\n\t\t\t\tif x[j]!=y[i]:\n\t\t\t\t\tj+=1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tif j==n:\n\t\t\t\tntree=True\n\t\t\t\tbreak\n\t\t\tj+=1\n\t\tif not ntree:\n\t\t\tprint(\"both\")\n\t\telse:\n\t\t\tprint(\"need tree\")\n", "def solve():\n\ta = input()\n\tb = input()\n\tj = 0\n\n\tfor i in a:\n\t\tif i == b[j]:\n\t\t\tj += 1\n\t\tif j == len(b):\n\t\t\tbreak\n\n\tif j == len(b):\n\t\treturn 'automaton'\n\t \n\tnum = [0]*42\n\tfor i in a:\n\t\tnum[ord(i)-ord('a')] += 1\n\tfor i in b:\n\t\tnum[ord(i)-ord('a')] -= 1\n\n\tfor i in num:\n\t\tif i < 0:\n\t\t\treturn 'need tree'\n\tif sum(num) > 0:\n\t\treturn 'both'\n\telse:\n\t\treturn 'array'\n\ndef __starting_point():\n\tprint(solve())\n\n__starting_point()", "s, t = input(), input()\nsx, tx = str(sorted(s)), str(sorted(t))\n\ndef subset(s, t):\n    i = 0\n    for c in s:\n        if c == t[i]: i += 1\n        if i == len(t): break\n    return i == len(t)\n\nif sx == tx:\n    print(\"array\")\nelif subset(s, t):\n    print(\"automaton\")\nelif subset(sx, tx):\n    print(\"both\")\nelse:\n    print(\"need tree\")", "s = input()\nt = input()\nind = 0\nfor x in t:\n    ind = s.find(x, ind) + 1\n    if ind <= 0:\n        break\nif ind > 0 or len(t) == 0:\n    print('automaton')\nelse:\n    ss = list(s)\n    tt = list(t)\n    bb1 = True\n    if len(ss) >= len(tt):\n        for x in tt:\n            bb = False\n            for y in ss:\n                if y == x:\n                    ss.remove(y)\n                    bb = True\n                    break\n            if not bb:                \n                bb1 = False\n                break                \n        if bb1:\n            if len(s) > len(t):\n                print('both')\n            else:\n                print('array')\n        else:\n            print('need tree')\n    else:\n        print('need tree')\n", "def contain(s, t):\n    s = list(s)\n    p = list(s)\n    for i in t:\n        if i in s:\n            s.remove(i)\n        else:\n            return False\n    return True\n\ndef find(s, t):\n    t = list(t)\n    j = 0\n    while j < len(s):\n         if t[0] == s[j]:\n            t.pop(0)\n            if len(t) == 0:\n               return True\n         j += 1       \n    return len(t) == 0\n\ns = input()\nt = input()\n\nif find(s, t):\n    print('automaton')\nelif contain(s,t) and len(s) > len(t):\n    print('both')\nelif contain(s,t) and len(s) == len(t):\n    print('array')\nelse:\n    print('need tree')", "def isAuto(s, t):\n    j = 0\n    for i in range(len(s)):\n        if s[i] == t[j]: j += 1\n        if j == len(t):\n            return True\n    return False\ndef isArray(s, t):\n    sarr = [0] * 256\n    tarr = [0] * 256\n    for i in range(len(s)): sarr[ord(s[i])] += 1\n    for i in range(len(t)): tarr[ord(t[i])] += 1\n    for i in range(256):\n        if sarr[i] != tarr[i]:\n            return False\n    return True\ndef isBoth(s, t):\n    sarr = [0] * 256\n    tarr = [0] * 256\n    for i in range(len(s)): sarr[ord(s[i])] += 1\n    for i in range(len(t)): tarr[ord(t[i])] += 1\n    for i in range(256):\n        if sarr[i] < tarr[i]:\n            return False\n    return True\n\ns = input()\nt = input()\nif isAuto(s, t):\n    print(\"automaton\")\nelif isArray(s, t):\n    print(\"array\")\nelif isBoth(s, t):\n    print(\"both\")\nelse:\n    print(\"need tree\")", "d={chr(ord('a')+i):0 for i in range(26)}\nd2={chr(ord('a')+i):0 for i in range(26)}\ns=input()\nt=input()\nfor ch in s:\n    d[ch]+=1\nfor ch in t:\n    d2[ch]+=1\nfl1=fl2=False\nfor ch in d.keys():\n    if d[ch]>d2[ch]:\n        fl1=True\n    if d[ch]<d2[ch]:\n        fl2=True\nif (not fl1)and(not fl2):\n    print('array')\nelif fl2:\n    print('need tree')\nelse:\n    i1=0\n    i2=0\n    for i1 in range(len(s)):\n        if(i2==len(t)):\n           break\n        if(s[i1]==t[i2]):\n            i2+=1\n    if(i2==len(t)):\n        print('automaton')\n    else:\n        print('both')", "import sys\ntry:\n    f = open(\"input.txt\")\nexcept IOError:\n    f = sys.stdin\ns = f.readline().rstrip()\nt = f.readline().rstrip()\nneedTree = False\n_s = s[:]\nfor c in t:\n    if c in _s:\n        _s = _s[:_s.index(c)] + _s[_s.index(c) + 1:]\n    else:\n        needTree = True \nif needTree:\n    print(\"need tree\")\nelse:\n    if not t in s:\n        if len(s) > len(t):\n            j = 0\n            both = False\n            for i in range(len(t)):\n                while j < len(s) and s[j] != t[i]:\n                    j += 1\n                if j >= len(s):\n                    both = True\n                j+=1\n            if both:\n                print(\"both\")\n            else:\n                print(\"automaton\")\n        else:\n            print(\"array\")\n    else:\n        print(\"automaton\")        ", "s = input()\nt = input()\na = [0] * 26\nfor c in s:\n  a[ord(c) - ord('a')] += 1\nb = [0] * 26\nfor c in t:\n  b[ord(c) - ord('a')] += 1\nif any(a[i] < b[i] for i in range(26)):\n  print(\"need tree\")\nelse:\n  needAutomaton = (len(s) > len(t))\n  needArray = False\n  j = 0\n  for i in range(len(t)):\n    k = s.find(t[i], j)\n    if k < j:\n      needArray = True\n      break\n    j = k + 1\n  if needAutomaton and needArray:\n    print(\"both\")\n  elif needAutomaton:\n    print(\"automaton\")\n  else:\n    print(\"array\")", "import sys\n\n#ist s1 ein substring von s2, d.h. sind alle Buchstaben von s1 in s2 enthalten?\ndef substring(s1,s2):\n  s2copy = list(s2)\n  s1copy = list(s1)\n  for i in s1copy:\n    try:\n      s2copy.remove(i)\n    except:\n      #print(i,s2copy)\n      return False\n  return True \n\n#ist s1 ein sortedsubstring von s2, d.h. kann man durch l\u00f6schen von Buchstaben s1 aus s2 erzeugen?\ndef sortedsubstring(s1,s2):\n  if not substring(s1,s2):\n    return False #nicht mal substring\n  s2copy = s2[:]\n  s1 \n  for i in s1:\n    pos = s2copy.find(i)\n    if pos == -1:\n      return False\n    s2copy = s2copy[(pos+1):]\n  return True\n \nwords = sys.stdin.read().splitlines()\nsorted0 = list(words[0])\nsorted0.sort()\nsorted1 = list(words[1])\nsorted1.sort()\n\nif not substring(words[1],words[0]):\n  print(\"need tree\")\nelif sortedsubstring(words[1],words[0]):\n  print(\"automaton\")\nelif sorted0 == sorted1:\n  print(\"array\")\nelse:\n  print(\"both\")\n\n \n", "def can_with_automaton(src, dst):\n    sr = list(src)\n    ds = list(dst)\n    while ds and sr:\n        if ds[-1] == sr[-1]:\n            ds.pop()\n        sr.pop()\n    return bool(not ds)\n\n\ndef can_with_array(src, dst):\n    return sorted(src) == sorted(dst)\n\n\ndef can_with_both(src, dst):\n    for l in dst:\n        if src.count(l) < dst.count(l):\n            return False\n    return True\n\ns = input()\nt = input()\n\nif can_with_automaton(s, t):\n    print(\"automaton\")\nelif can_with_array(s, t):\n    print(\"array\")\nelif can_with_both(s, t):\n    print(\"both\")\nelse:\n    print(\"need tree\")\n", "s = input()\nt = input()\nnp = 0\nfor c in s:\n    if np < len(t) and c == t[np]:\n        np += 1\nif np == len(t):\n    print('automaton')\nelse:\n    ds = {}\n    dt = {}\n    for c in s:\n        if c not in ds:\n            ds[c] = 0\n        ds[c] += 1\n    for c in t:\n        if c not in dt:\n            dt[c] = 0\n        dt[c] += 1\n    flag = True\n    for c in dt:\n        if c not in ds or dt[c] > ds[c]:\n            flag = False\n    if flag:\n        if len(s) == len(t):\n            print('array')\n        else:\n            print('both')\n    else:\n        print('need tree')\n", "def f(a, b):\n    j, n = 0, len(b)\n    for i in a:\n        if i == b[j]:\n            j += 1\n            if j == n: return True\n    return False\na, b = input(), input()\nt = [0] * 26\nfor i in a: t[ord(i) - 97] += 1\nfor i in b: t[ord(i) - 97] -= 1\nif any(i < 0 for i in t): print('need tree')\nelif len(b) == len(a): print('array')\nelif f(a, b): print('automaton')\nelse: print('both')"]