["import numpy as np\nimport sys\ninput = sys.stdin.readline\n\nH,W = list(map(int,input().split()))\nS=np.array([list(input().rstrip(\"\\n\")) for _ in range(H)]) == '.'\n\nD = np.zeros((H,W),dtype=int)\nU = np.zeros((H,W),dtype=int)\nL = np.zeros((H,W),dtype=int)\nR = np.zeros((H,W),dtype=int)\n\n# \u4e0a\u4e0b\nfor i in range(H):\n  U[i] = (U[i-1] + 1) * S[i]\n  D[-i-1] = (D[-i] + 1) * S[-i-1]\n\n# \u5de6\u53f3\nfor i in range(W):\n  L[:,i] = (L[:,i-1] + 1) * S[:,i]\n  R[:,-i-1] = (R[:,-i] + 1) * S[:,-i-1]\n\nprint((np.max(U+D+L+R)-3))\n", "#numpy\u4f7f\u3044\u3001\u30eb\u30fc\u30d7\u304c2\u2192\uff11\u306b\u3059\u308b\nimport numpy as np\n#\u521d\u671f\u5165\u529b\nH,W = (int(x) for x in input().split())\nmap1 =[ list(input()) for i in range(H)]\nmap_np =(np.array(map1)==\".\")*1\n\nL =np.zeros((H,W),dtype=int)\nR =np.zeros((H,W),dtype=int)\nU =np.zeros((H,W),dtype=int)\nD =np.zeros((H,W),dtype=int)\n\nL[:,0] =map_np[:,0]\nfor i in range(1,W): # if map_np[i,j] ==1: \u21d2 *map_np\u3067\uff11or\uff10\u3092\u304b\u3051\u3066\u308b\u304b\u3089\u4e0d\u8981\n    L[:,i] = (L[:,i-1] +1) *map_np[:,i]\n\nR[:,W-1] =map_np[:,W-1]\nfor i in range(W-1-1,-1,-1):\n    R[:,i] = (R[:,i+1] +1) *map_np[:,i]\n\nU[0,:] =map_np[0,:]\nfor i in range(1,H):\n    U[i,:] = (U[i-1,:] +1) *map_np[i,:]\n\nD[H-1,:] =map_np[H-1,:]\nfor i in range(H-1-1,-1,-1):\n    D[i,:] = (D[i+1,:] +1) *map_np[i,:]\n    \nans =L +R +U +D -3\nprint(np.max(ans))", "import numpy as np\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    H, W = map(int, input().split())\n    A = []\n    for _ in range(H):\n        S = [0 if c == '#' else 1 for c in input().strip()]\n        A.append(S)\n\n    A = np.array(A)\n    top = np.zeros((H+1, W), dtype=np.int)\n    bottom = np.zeros((H+1, W), dtype=np.int)\n    right = np.zeros((H, W+1), dtype=np.int)\n    left = np.zeros((H, W+1), dtype=np.int)\n\n    for i in range(1, H+1):\n        top[i] = (top[i-1] + 1) * A[i-1]\n\n    for i in range(H-1, -1, -1):\n        bottom[i] = (bottom[i+1] + 1) * A[i]\n\n    for i in range(1, W+1):\n        right[:, i] = (right[:, i-1] + 1) * A[:, i-1]\n\n    for i in range(W-1, -1, -1):\n        left[:, i] = (left[:, i+1] + 1) * A[:, i]\n\n    R = (top[1:] + bottom[:H] - 1) * A\n    C = (right[:, 1:] + left[:, :W] - 1) * A\n    RC = (R + C - 1) * A\n    return RC.max()\n\n\ndef __starting_point():\n    print(main())\n__starting_point()", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W = lr()\nS = [list(sr()) for _ in range(H)]\nS = np.array([[1 if x == '.' else 0 for x in row] for row in S])\nup = np.ones((H, W), np.int32)\nup *= S\ndown = np.ones((H, W), np.int32)\ndown *= S\nright = np.ones((H, W), np.int32)\nright *= S\nleft = np.ones((H, W), np.int32)\nleft *= S\nfor i in range(H-1):\n    up[i+1] += up[i]\n    up[i+1] *= S[i+1]\nfor i in range(H-1, 0, -1):\n    down[i-1] += down[i]\n    down[i-1] *= S[i-1]\nfor i in range(W-1):\n    left[:, i+1] += left[:, i]\n    left[:, i+1] *= S[:, i+1]\nfor i in range(W-1, 0, -1):\n    right[:, i-1] += right[:, i]\n    right[:, i-1] *= S[:, i-1]\n\nanswer = (up + down + left + right).max() - 3\nprint(answer)\n", "# # D - Lamp\n\nimport numpy as np\n\nH, W = list(map(int, input().split()))\nM = [list(input()) for _ in range(H)]\nM = (np.array(M) == '.') * 1\n\nL = np.zeros((H, W), dtype=int)\nR = np.zeros((H, W), dtype=int)\nD = np.zeros((H, W), dtype=int)\nU = np.zeros((H, W), dtype=int)\n\nfor i in range(W):\n    if i == 0:\n        L[:, i] = M[:, i]\n        R[:, W - i - 1] = M[:, W - i - 1]\n    else:\n        L[:, i] = (L[:, i - 1] + 1) * M[:, i]\n        R[:, W - i - 1] = (R[:, W - i] + 1) * M[:, W - i - 1]\n\nfor i in range(H):\n    if i == 0:\n        U[i, :] = M[i, :]\n        D[H - i - 1, :] = M[H - i - 1, :]\n    else:\n        U[i, :] = (U[i - 1, :] + 1) * M[i, :]\n        D[H - i - 1, :] = (D[H - i, :] + 1) * M[H - i - 1, :]\n\nprint((max(np.max(L + R + D + U - 3), 0)))\n", "import numpy as np\n\nh, w  = map(int,input().split())\nsn = [[0]*w for i in range(h)]\n \nfor i in range(h):\n    s = input()\n    for j in range(w):\n        if s[j] == '.':\n            sn[i][j] = 1\nsn = np.array(sn)\nscore = np.zeros_like(sn)\ntotal = np.zeros_like(sn)\n\nscore[0] += sn[0]\nfor i in range(1, h):\n    score[i] = (score[i-1] + sn[i]) * sn[i]\ntotal += score\n\nscore[h-1] = sn[h-1]\nfor i in range(h-2, -1, -1):\n    score[i] = (score[i+1] + sn[i]) * sn[i]\ntotal += score\n\nscore[:,0] = sn[:,0]\nfor i in range(1, w):\n    score[:,i] = (score[:,i-1] + sn[:,i]) * sn[:,i]\ntotal += score\n\nscore[:,w-1] = sn[:,w-1]\nfor i in range(w-2, -1, -1):\n    score[:,i] = (score[:,i+1] + sn[:,i]) * sn[:,i]\ntotal += score\n    \nprint(total.max()-3)", "import numpy as np\nH, W = map(int, input().split())\nS = np.zeros((H,W))\nfor i in range(H):\n    Si = np.array([int(s == '.') for s in input()])\n    S[i] = Si\n    \ntop = S.copy()\nbottom = S.copy()\nleft = S.copy()\nright = S.copy()\n\nfor i in range(1, H):\n    top[i] = (top[i-1] + 1) * S[i]\n    bottom[-i-1] = (bottom[-i] + 1) * S[-i-1]\n\nfor j in range(1, W):\n    left[:,j] = (left[:,j-1] + 1) * S[:,j]\n    right[:,-j-1] = (right[:,-j] + 1) * S[:,-j-1]\n\nprint(np.max((top + bottom + left + right - 3).astype(np.int)))", "import numpy as np\nH,W = map(int,input().split())\nL = np.zeros((H,W),int)\nR = np.zeros((H,W),int)\nD = np.zeros((H,W),int)\nU = np.zeros((H,W),int)\nS = np.array([list(input()) for h in range(H)])==\".\"\n \nfor h in range(H):\n  U[h] = S[h]*(U[h-1]+1)\n  D[-h-1] = S[-h-1]*(D[-h]+1)\n \nfor w in range(W):\n  L[:,w] = S[:,w]*(L[:,w-1]+1)\n  R[:,-w-1] = S[:,-w-1]*(R[:,-w]+1)\n \nprint(np.max(U+D+L+R)-3)", "import numpy as np\nH,W=map(int,input().split(' '))\nmaze = [list(input()) for i in range(H)]\nmaze = (np.array(maze) == '.')*1\nL=np.zeros((H,W),dtype=int)\nR=np.zeros((H,W),dtype=int)\nU=np.zeros((H,W),dtype=int)\nD=np.zeros((H,W),dtype=int)\nfor i in range(W):\n    if i==0:\n        L[:,i]=maze[:,i]\n        R[:,W-i-1]=maze[:,W-i-1]\n    else:\n        L[:,i]=(L[:,i-1]+1)*maze[:,i]\n        R[:,W-i-1]=(R[:,W-i]+1)*maze[:,W-i-1]\nfor i in range(H):\n    if i==0:\n        U[i,:]=maze[i,:]\n        D[H-i-1,:]=maze[H-i-1,:]\n    else:\n        U[i,:]=(U[i-1,:]+1)*maze[i,:]\n        D[H-i-1,:]=(D[H-i]+1)*maze[H-i-1,:]\nprint(max(np.max(U+D+L+R-3),0))", "import sys\nimport numpy as np\n\n\ndef read():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    h, w = list(map(int, read().split()))\n    s = np.array([[i == \".\" for i in read()] for _ in range(h)], dtype=int)\n    left = s.copy()\n    right = s.copy()\n    up = s.copy()\n    down = s.copy()\n    for i in range(w - 1):\n        left[:, i + 1] = (left[:, i] + 1) * s[:, i + 1]\n        right[:, -i - 2] = (right[:, -i - 1] + 1) * s[:, -i - 2]\n    for i in range(h - 1):\n        up[i + 1] = (up[i] + 1) * s[i + 1]\n        down[-i - 2] = (down[-i - 1] + 1) * s[-i - 2]\n    print(((left + right + up + down).max() - 3))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n\nH, W = map(int, input().split())\nS_list = [list(input()) for _ in range(H)]\nS_list=(np.array(S_list) ==\".\")*1\n\nL = np.zeros((H, W), int)\nR = np.zeros((H, W), int)\nU = np.zeros((H, W), int)\nD = np.zeros((H, W), int)\n\nfor w in range(W):\n    if w == 0:\n        L[:,w] = S_list[:,w]\n        R[:,W-w-1] = S_list[:,W-w-1]\n    else:\n        L[:,w] = (L[:,w-1]+1) * S_list[:,w]\n        R[:,W-w-1] = (R[:,W-w]+1) * S_list[:,W-w-1]\n\nfor h in range(H):\n    if h == 0:\n        U[h,:] = S_list[h,:]\n        D[H-h-1,:] = S_list[H-h-1,:]\n    else:\n        U[h,:] = (U[h-1,:]+1) * S_list[h,:]\n        D[H-h-1,:] = (D[H-h,:]+1) * S_list[H-h-1,:]\n        \nans = max(np.max(L+R+U+D-3), 0)\n\nprint(ans)", "import numpy as np\n\nH, W = map(int,input().split())\nS = [list(input()) for _ in range(H)]\nS = np.array(S)\nS = (S == '.') * 1\n\nR = np.array([[0 for i in range(W)] for n in range(H)])\nL = np.zeros((H, W), dtype=int)\nU = np.zeros((H, W), dtype=int)\nD = np.zeros((H, W), dtype=int)\n\nfor i in range(W):\n    if i == 0:\n        L[:, 0] = S[:, 0]\n        R[:, W - 1] = S[:, W - 1]\n    else:\n        L[:, i] = L[:, i - 1] * S[:, i] + S[:, i]\n        R[:, W - i - 1] = R[:, W - i] * S[:, W - i - 1] + S[:, W - i - 1]\nfor i in range(H):\n    if i == 0:\n        U[i] = S[i]\n        D[H - 1] = S[H - 1]\n    else:\n        U[i] = U[i - 1] * S[i] + S[i]\n        D[H - i - 1] = D[H - i] * S[H - i - 1] + S[H - i - 1]\n\nprint(np.max(R + L + U + D) - 3)", "import numpy as np\n\nH, W = map(int, input().split())\nS = np.array([list(input()) for _ in range(H)])\nS = np.where(S==\".\", 1, 0)\n\nL = np.zeros((H, W), dtype=int)\nR = np.zeros((H, W), dtype=int)\nD = np.zeros((H, W), dtype=int)\nU = np.zeros((H, W), dtype=int)\n\nfor i in range(H):\n    D[-i-1] = (D[-i]+1)*S[-i-1]\n    U[i] = (U[i-1]+1)*S[i]\n    \nfor i in range(W):\n    L[:, i] = (L[:, i-1]+1)*S[:, i]\n    R[:, -i-1] = (R[:, -i]+1)*S[:, -i-1]\n    \nprint (np.max(L+R+D+U)-3)", "import numpy as np\nH,W = map(int,input().split())\nS=np.array([list(input().rstrip(\"\\n\")) for _ in range(H)]) == '.'\nD = np.zeros((H,W),dtype=int)\nU = np.zeros((H,W),dtype=int)\nL = np.zeros((H,W),dtype=int)\nR = np.zeros((H,W),dtype=int)\nfor i in range(H):# \u4e0a\u4e0b\n  U[i] = (U[i-1] + 1) * S[i]\n  D[-i-1] = (D[-i] + 1) * S[-i-1]\nfor i in range(W):# \u5de6\u53f3\n  L[:,i] = (L[:,i-1] + 1) * S[:,i]\n  R[:,-i-1] = (R[:,-i] + 1) * S[:,-i-1]\nprint(np.max(U+D+L+R)-3)", "\"\"\"\n\u53c2\u8003\nblog\u540d  \u30d9\u30b9\u30d1\u30ea\u30d6    #\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4e3b\u3068\u3057\u305f\u65e5\u8a18\u30fb\u5099\u5fd8\u9332\u3067\u3059\nURL     https://takeg.hatenadiary.jp/entry/2019/09/10/234417\nid:     takeg\n\"\"\"\n# \u521d\u671f\u5165\u529b\nH,W = (int(x) for x in input().split())\nS = [list(input()) for i in range(H)]\nimport numpy as np\nS_np = (np.array(S) ==\".\")*1 #\u6587\u5b57\u3092\u6570\u5b57\u306b\u5909\u63db True\u306e\u6240\u306e\u307f\u6f14\u7b97\u3001False\u306f\uff10\n\n\n#\u7f6e\u3044\u305f\u30de\u30b9(i,j)\u304b\u30894\u65b9\u5411\u63a2\u3059\nL = np.zeros((H,W),dtype=int)\nR = np.zeros((H,W),dtype=int)\nU = np.zeros((H,W),dtype=int)\nD = np.zeros((H,W),dtype=int)\nfor i in range(W):\n    # if S_int[i,j] ==0:\u3053\u308c\u306f\u3044\u3089\u306a\u3044\uff1f\u21d2*S_np\u3067\uff11or\uff10\u3092\u304b\u3051\u3066\u308b\u304b\u3089\u4e0d\u8981\n    if i == 0: \n        L[:,i]      = S_np[:,i]\n        R[:,W-i-1]  = S_np[:,W-i-1]\n    else:\n        L[:,i]      = (L[:,i-1] +1) * S_np[:,i]\n        R[:,W-i-1]  = (R[:,W-i] +1) * S_np[:,W-i-1]\n\nfor i in range(H):\n    if i == 0: \n        D[i,:]      = S_np[i,:]\n        U[H-i-1,:]  = S_np[H-i-1,:]\n    else:\n        D[i,:]      = (D[i-1,:] +1) * S_np[i,:]\n        U[H-i-1,:]  = (U[H-i,:] +1) * S_np[H-i-1,:]\n\n#\u5404\u65b9\u5411\u3092\u4f4d\u7f6e\u3054\u3068\u306b\u8db3\u3059(numpy\u306a\u3089\u8db3\u3059\u3060\u3051\u3067\u884c\u5217\u306e\u548c) \nlight = L + R + D + U -3 #\u57fa\u6e96\u70b9\u30924\u65b9\u5411\uff0b\uff11\u3057\u3066\u308b\u304b\u3089\u30fc\uff13\nlight_max = np.max(light)\nprint(light_max)", "from itertools import product\nimport numpy as np\n\nh, w = list(map(int, input().split()))\nnotwall = []\nfor _ in range(h):\n    s = input()\n    notwall.append([int(c == '.') for c in s])\n\nnotwall = np.array(notwall)\n\n\ndef getll():\n    ls = np.zeros((h, w + 1), dtype=int)\n\n    for i in range(w):\n        ls[:, i + 1] = (ls[:, i] + 1) * notwall[:, i]\n\n    ls = ls[:, 1:]\n    return ls\n\n\ndef getlr():\n    ls = np.zeros((h, w + 1), dtype=int)\n\n    for i in range(w - 1, -1, -1):\n        ls[:, i] = (ls[:, i + 1] + 1) * notwall[:, i]\n\n    ls = ls[:, :-1]\n    return ls\n\n\ndef getlu():\n    ls = np.zeros((h + 1, w), dtype=int)\n\n    for i in range(h):\n        ls[i + 1, :] = (ls[i, :] + 1) * notwall[i, :]\n\n    ls = ls[1:, :]\n    return ls\n\n\ndef getld():\n    ls = np.zeros((h + 1, w), dtype=int)\n\n    for i in range(h - 1, -1, -1):\n        ls[i, :] = (ls[i + 1, :] + 1) * notwall[i, :]\n\n    ls = ls[:-1, :]\n    return ls\n\n\nll = getll()\nlr = getlr()\nlu = getlu()\nld = getld()\n\nm = max([0, np.max(ll + lr + lu + ld) - 3])\n\nprint(m)\n\n", "import numpy as np\n\nh, w = list(map(int, input().split()))\ns = np.empty((h, w), dtype='i8')\nfor i in range(h):\n    s[i] = [i == '.' for i in list(input())]\n\nright = np.copy(s)\nleft = np.copy(s)\nfor i in range(1, w):\n    right[:, -i-1] = (right[:, -i] + 1) * s[:, -i-1]\n    left[:, i] = (left[:, i-1] + 1) * s[:, i]\nup = np.copy(s)\ndown = np.copy(s)\nfor i in range(1, h):\n    up[i] = (up[i-1] + 1) * s[i]\n    down[-i-1] = (down[-i] + 1) * s[-i-1]\n\nprint((np.max(right + left + up + down) - 3))\n", "import sys\nimport numpy as np\nsys.setrecursionlimit(10**9)\nH, W = list(map(int, input().split()))\nS = [list('#' * (W + 2))]\nfor _ in range(H):\n    S.append(list('#' + input() + '#'))\nS.append(list('#' * (W + 2)))\nS = np.array(S)\n# print(S)\n\nnorth = np.zeros_like(S, dtype='int')\nfor w in range(1, W + 1):\n    north[:, w] = north[:, w - 1] + 1\n    north[:, w][S[:, w - 1] == '#'] = 0\n    north[:, w][S[:, w] == '#'] = 0\n\nsouth = np.zeros_like(S, dtype='int')\nfor w in range(W, 0, -1):\n    south[:, w] = south[:, w + 1] + 1\n    south[:, w][S[:, w + 1] == '#'] = 0\n    south[:, w][S[:, w] == '#'] = 0\n\neast = np.zeros_like(S, dtype='int')\nfor h in range(1, H + 1):\n    east[h, :] = east[h - 1, :] + 1\n    east[h, :][S[h - 1] == '#'] = 0\n    east[h, :][S[h, :] == '#'] = 0\n\nwest = np.zeros_like(S, dtype='int')\nfor h in range(H, 0, -1):\n    west[h, :] = west[h + 1, :] + 1\n    west[h, :][S[h + 1] == '#'] = 0\n    west[h, :][S[h, :] == '#'] = 0\n# print(west)\n\nans = north + south + east + west\nprint((ans.max() + 1))\n", "import numpy as np\nH ,W = map(int,input().split())\n\nmaze = [[] for _ in range(H)]\nfor i in range(H):\n    maze[i] = np.array(list(input())) == \".\"\nmaze = np.array(maze)\n\nup = np.zeros((H, W), dtype=int)\ndown = np.zeros((H, W), dtype=int)\nright = np.zeros((H, W), dtype=int)\nleft = np.zeros((H, W), dtype=int)\n\nfor i in range(H):\n    up[i] = (up[i-1] + 1)*maze[i]\n    down[-(i+1)] = (down[-i] + 1)*maze[-(i+1)] \n    \n#print(up)\n#print(down)\n\nfor i in range(W):\n    right[:, i] = (right[:, i-1] + 1)*maze[:, i]\n    left[:, -(i+1)] = (left[:, -i] + 1)*maze[:, -(i+1)]\n\nprint(np.max(up+down+right+left)-3)", "import numpy as np\nh,w=map(int,input().split())\nS=np.array([list(input()) for _ in range(h)])\nS=np.where(S==\".\",1,0)\n\nleft,right,up,down=[np.zeros((h,w)) for _ in range(4)]\nfor i in range(w):\n    left[:,i]=(left[:,i-1]+1)*S[:,i]\n    right[:,-i-1]=(right[:,-i]+1)*S[:,-i-1]\nfor i in range(h):\n    up[i]=(up[i-1]+1)*S[i]\n    down[-i-1]=(down[-i]+1)*S[-i-1]\n\nprint(int(np.max(left+right+up+down)-3))", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W = lr()\n\nS = [list(sr()) for _ in range(H)]\nS = np.array([[1 if x == '.' else 0 for x in row] for row in S])\n\nU = np.zeros((H, W), np.int32)\nD = np.zeros((H, W), np.int32)\nL = np.zeros((H, W), np.int32)\nR = np.zeros((H, W), np.int32)\n\nfor h in range(H-1):\n    U[h+1] = (U[h] + 1) * S[h]\n    D[H-h-2] = (D[H-h-1] + 1) * S[H-h-1]\nfor w in range(W-1):\n    L[:, w+1] = (L[:, w] + 1) * S[:, w]\n    R[:, W-w-2] = (R[:, W-w-1] + 1) * S[:, W-w-1]\n\n\nprint((((U + D + L + R) * S).max() + 1))\n", "import numpy as np\nh, w = map(int, input().split())\ngrid = np.array([list(input()) for _ in range(h)], dtype=\"str\")\n\nhgrid = np.zeros((h, w), dtype=\"int\")\n\nfor hi in range(h):\n    hdot = np.array(grid[hi] == \".\", dtype=\"int\")\n    hgrid[hi] = hgrid[hi-1] * hdot + hdot\n    \nfor hi in range(h-2, -1, -1):\n    hi_1 = np.minimum(hgrid[hi+1], hgrid[hi] * hgrid[hi+1])\n    hgrid[hi] = np.maximum(hgrid[hi], hi_1)\n    \nwgrid = np.zeros((h, w), dtype=\"int\")\n\nfor wi in range(w):\n    wdot = np.array(grid[:, wi] == \".\", dtype=\"int\")\n    wgrid[:, wi] = wgrid[:, wi-1] * wdot + wdot\n    \nfor wi in range(w-2, -1, -1):\n    wi_1 = np.minimum(wgrid[:, wi+1], wgrid[:, wi] * wgrid[:, wi+1])\n    wgrid[:, wi] = np.maximum(wgrid[:, wi], wi_1)\n\nprint(np.max(wgrid + hgrid) - 1)", "import sys\nimport numpy as np \n\nh, w = map(int, sys.stdin.readline().split())\ngrid = np.array([list(sys.stdin.readline().rstrip()) for _ in range(h)], dtype='U')\ngrid = np.pad(grid, 1, mode='constant')\n\ndef main():\n    cnt = np.zeros((h+2, w+2))\n    cnt[grid == '.'] = np.inf\n    \n    l = cnt.copy()\n    r = cnt.copy()\n    u = cnt.copy()\n    d = cnt.copy()\n\n    for i in range(1, w+1):\n        l[1:h+1, i] = np.minimum(l[1:h+1, i], l[1:h+1, i-1]+1)\n        i = w + 1 - i\n        r[1:h+1, i] = np.minimum(r[1:h+1, i], r[1:h+1, i+1]+1)\n    \n    for i in range(1, h+1):\n        u[i, 1:w+1] = np.minimum(u[i, 1:w+1], u[i-1, 1:w+1]+1)\n        i = h + 1 - i\n        d[i, 1:w+1] = np.minimum(d[i, 1:w+1], d[i+1, 1:w+1]+1)\n    \n    res = np.maximum(l + r + u + d - 3, 0).astype(np.int64)\n    return np.amax(res)\n\ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "# \u521d\u671f\u5165\u529b\nH,W = (int(x) for x in input().split())\nS = [list(input()) for i in range(H)]\nimport numpy as np\nS_np = (np.array(S) ==\".\")*1 #\u6587\u5b57\u3092\u6570\u5b57\u306b\u5909\u63db True\u306e\u6240\u306e\u307f\u6f14\u7b97\u3001False\u306f\uff10\n\n\n#\u7f6e\u3044\u305f\u30de\u30b9(i,j)\u304b\u30894\u65b9\u5411\u63a2\u3059\nL = np.zeros((H,W),dtype=int)\nR = np.zeros((H,W),dtype=int)\nU = np.zeros((H,W),dtype=int)\nD = np.zeros((H,W),dtype=int)\nfor i in range(W):\n    # if S_int[i,j] ==0:\u3053\u308c\u306f\u3044\u3089\u306a\u3044\uff1f\u21d2*S_np\u3067\uff11or\uff10\u3092\u304b\u3051\u3066\u308b\u304b\u3089\u4e0d\u8981\n    if i == 0: \n        L[:,i]      = S_np[:,i]\n        R[:,W-i-1]  = S_np[:,W-i-1]\n    else:\n        L[:,i]      = (L[:,i-1] +1) * S_np[:,i]\n        R[:,W-i-1]  = (R[:,W-i] +1) * S_np[:,W-i-1]\n\nfor i in range(H):\n    if i == 0: \n        D[i,:]      = S_np[i,:]\n        U[H-i-1,:]  = S_np[H-i-1,:]\n    else:\n        D[i,:]      = (D[i-1,:] +1) * S_np[i,:]\n        U[H-i-1,:]  = (U[H-i,:] +1) * S_np[H-i-1,:]\n\n#\u5404\u65b9\u5411\u3092\u4f4d\u7f6e\u3054\u3068\u306b\u8db3\u3059(numpy\u306a\u3089\u8db3\u3059\u3060\u3051\u3067\u884c\u5217\u306e\u548c) \nlight = L + R + D + U -3 #\u57fa\u6e96\u70b9\u30924\u65b9\u5411\uff0b\uff11\u3057\u3066\u308b\u304b\u3089\u30fc\uff13\nlight_max = np.max(light)\nprint(light_max)", "#\u5199\u7d4cAC\nimport numpy as np\nH,W = list(map(int,input().split()))\nL = np.zeros((H,W),int)\nR = np.zeros((H,W),int)\nD = np.zeros((H,W),int)\nU = np.zeros((H,W),int)\nS = np.array([list(input()) for h in range(H)])==\".\"\n\nfor h in range(H):\n  U[h] = S[h]*(U[h-1]+1)\n  D[-h-1] = S[-h-1]*(D[-h]+1)\n\nfor w in range(W):\n  L[:,w] = S[:,w]*(L[:,w-1]+1)\n  R[:,-w-1] = S[:,-w-1]*(R[:,-w]+1)\n\nprint((np.max(U+D+L+R)-3))\n", "import numpy as np\nfrom copy import deepcopy\n\n\ndef main():\n    height, width = list(map(int, input().split()))\n    grid = [list(input()) for _ in range(height)]\n    grid = (np.array(grid) == \".\") * 1\n    left = np.zeros((height, width), dtype=int)\n    right = deepcopy(left)\n    upper = deepcopy(left)\n    down = deepcopy(left)\n\n    for i in range(height):\n        if i == 0:\n            upper[i] = grid[i]\n        else:\n            upper[i] = (upper[i - 1] + 1) * grid[i]\n\n    for i in range(width):\n        if i == 0:\n            left[:, i] = grid[:, i]\n        else:\n            left[:, i] = (left[:, i - 1] + 1) * grid[:, i]\n\n    for i in range(width - 1, -1, -1):\n        if i == width - 1:\n            right[:, i] = grid[:, i]\n        else:\n            right[:, i] = (right[:, i + 1] + 1) * grid[:, i]\n\n    for i in range(height - 1, -1, -1):\n        if i == height - 1:\n            down[i] = grid[i]\n        else:\n            down[i] = (down[i + 1] + 1) * grid[i]\n\n    print((np.max(left + right + upper + down - 3)))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import numpy as np\nh,w=map(int,input().split())\nS=np.array([list(input()) for _ in range(h)])\nS=np.where(S==\".\",1,0)\n\nleft,right,up,down=[np.zeros((h,w)) for _ in range(4)]\nfor i in range(w):\n    left[:,i]=(left[:,i-1]+1)*S[:,i]\n    right[:,-i-1]=(right[:,-i]+1)*S[:,-i-1]\nfor i in range(h):\n    up[i]=(up[i-1]+1)*S[i]\n    down[-i-1]=(down[-i]+1)*S[-i-1]\n\nprint(int(np.max(left+right+up+down)-3))", "import numpy as np\nH,W = map(int,input().split())\nHL=list(range(H))\nWL=list(range(W))\nGd = np.array([list(input()) for _ in HL])\nGd = np.where(Gd=='.', 1, 0)\nL=np.zeros((H,W),dtype=np.int64)\nR=np.zeros((H,W),dtype=np.int64)\nU=np.zeros((H,W),dtype=np.int64)\nD=np.zeros((H,W),dtype=np.int64)\n\nfor w in WL:\n  R[:,w]=(R[:,w-1]+1)*Gd[:,w]\n  L[:,-w-1]=(L[:,-w]+1)*Gd[:,-w-1]\nfor h in HL:\n  D[h,:]=(D[h-1,:]+1)*Gd[h,:]\n  U[-h-1,:]=(U[-h,:]+1)*Gd[-h-1,:]\nprint(np.max(D+U+L+R-3))", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W = lr()\nS = [list(sr()) for _ in range(H)]\nup = np.array([[1 if x == '.' else 0 for x in row] for row in S])\ndown = up.copy()\nright = up.copy()\nleft = up.copy()\nS = up.copy()\nfor i in range(H-1):\n    up[i+1] += up[i]\n    up[i+1] *= S[i+1]\nfor i in range(H-1, 0, -1):\n    down[i-1] += down[i]\n    down[i-1] *= S[i-1]\nfor i in range(W-1):\n    left[:, i+1] += left[:, i]\n    left[:, i+1] *= S[:, i+1]\nfor i in range(W-1, 0, -1):\n    right[:, i-1] += right[:, i]\n    right[:, i-1] *= S[:, i-1]\n\nanswer = (up + down + left + right).max() - 3\nprint(answer)\n", "import numpy as np\n\nh,w=map(int,input().split())\ng = np.array([list(input()) for _ in range(h)])\ng = np.where(g=='.',1,0)\n\nl = np.zeros((h,w),dtype=np.int)\nr = np.zeros((h,w),dtype=np.int)\nu = np.zeros((h,w),dtype=np.int)\nd = np.zeros((h,w),dtype=np.int)\n\nfor i in range(w):\n  l[:,i] = (l[:,i-1]+1)*g[:,i]\n  r[:,-i-1] = (r[:,-i]+1)*g[:,-i-1]\n\nfor i in range(h):\n  u[i,:]=(u[i-1,:]+1)*g[i,:]\n  d[-i-1,:]=(d[-i,:]+1)*g[-i-1,:]\n\nprint(np.max(l+r+u+d)-3)", "import numpy as np\n\nh, w = list(map(int, input().split()))\ns = np.array([list(input()) for _ in range(h)]) == '.'\n\nL = np.zeros((h, w), dtype=int)\nR = np.zeros((h, w), dtype=int)\nU = np.zeros((h, w), dtype=int)\nD = np.zeros((h, w), dtype=int)\n\nfor i in range(h):\n    D[i] = (D[i-1]+1) * s[i]\n    U[-i-1] = (U[-i]+1) * s[-i-1]\n\nfor i in range(w):\n    R[:, i] = (R[:, i-1]+1) * s[:, i]\n    L[:, -i-1] = (L[:, -i]+1) * s[:, -i-1]\n\n\nprint((np.max(D+U+R+L)-3))\n", "import numpy as np\n \nH, W = map(int, input().split())\nS_list = [list(input()) for _ in range(H)]\nS_list=(np.array(S_list) ==\".\")*1\n \nL = np.zeros((H, W), int) # i,j\u3088\u308a\u5de6\u306e\u30e9\u30f3\u30d7\u3092\u3066\u3089\u305b\u308b\u6570\nR = np.zeros((H, W), int)\nU = np.zeros((H, W), int)\nD = np.zeros((H, W), int)\n \nfor w in range(W):\n    if w == 0: \n        L[:,w] = S_list[:,w] # \u4e00\u756a\u5de6\u3067\u3042\u308c\u3070\u3001L\u306f1, \u4ed6\u306e\u884c\u3082\u540c\u3058\n        R[:,W-w-1] = S_list[:,W-w-1] # \u4e00\u756a\u53f3\u3067\u3042\u308c\u3070\u3001R\u306f1, \u4ed6\u306e\u884c\u3082\u540c\u3058\n    else:\n        L[:,w] = (L[:,w-1]+1) * S_list[:,w] # L\u306f\u4e00\u3064\u5de6\u306e\u3082\u306e\u306b1\u3092\u52a0\u3048\u305f\u3082\u306e, \u4ed6\u306e\u884c\u3082\u540c\u3058\n        R[:,W-w-1] = (R[:,W-w]+1) * S_list[:,W-w-1] # R\u306f\u4e00\u3064\u53f3\u306e\u3082\u306e\u306b1\u3092\u52a0\u3048\u305f\u3082\u306e, \u4ed6\u306e\u884c\u3082\u540c\u3058\n \nfor h in range(H):\n    if h == 0:\n        U[h,:] = S_list[h,:]\n        D[H-h-1,:] = S_list[H-h-1,:]\n    else:\n        U[h,:] = (U[h-1,:]+1) * S_list[h,:]\n        D[H-h-1,:] = (D[H-h,:]+1) * S_list[H-h-1,:]\n        \nans = max(np.max(L+R+U+D-3), 0) # \u884c\u5217\u306eH,W\u306e\u4e2d\u3067\u6700\u5927\u306e\u3082\u306e\u3092\u3068\u308b\n \nprint(ans)", "#learnt about numpy from this code thank you nohtaray\n#source: https://atcoder.jp/contests/abc129/submissions/5850116\nimport bisect\nimport os\nfrom collections import Counter, deque\nfrom fractions import gcd\nfrom functools import lru_cache\nfrom functools import reduce\nimport functools\nimport heapq\nimport itertools\nimport math\nimport numpy as np\nimport re\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\n\nH, W = list(map(int, sys.stdin.readline().split()))\n\nS = np.array([list(sys.stdin.readline().rstrip()) for _ in range(H)]) == '.'\nups = np.zeros((H, W), dtype=int)\ndowns = np.zeros((H, W), dtype=int)\nrights = np.zeros((H, W), dtype=int)\nlefts = np.zeros((H, W), dtype=int)\n\nfor h in range(1, H):\n    ups[h] = (ups[h - 1] + 1) * S[h - 1]\nfor h in reversed(list(range(H - 1))):\n    downs[h] = (downs[h + 1] + 1) * S[h + 1]\nfor w in range(1, W):\n    lefts[:, w] = (lefts[:, w - 1] + 1) * S[:, w - 1]\nfor w in reversed(list(range(W - 1))):\n    rights[:, w] = (rights[:, w + 1] + 1) * S[:, w + 1]\nprint((((ups + downs + lefts + rights) * S).max() + 1))\n\n", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W = lr()\n\nS = [list(sr()) for _ in range(H)]\nS = np.array([[1 if x == '.' else 0 for x in row] for row in S])\n\nU = np.zeros((H, W), np.int32)\nD = np.zeros((H, W), np.int32)\nL = np.zeros((H, W), np.int32)\nR = np.zeros((H, W), np.int32)\n\nfor h in range(H-1):\n    U[h+1] = (U[h] + 1) * S[h]\n    D[H-h-2] = (D[H-h-1] + 1) * S[H-h-1]\nfor w in range(W-1):\n    L[:, w+1] = (L[:, w] + 1) * S[:, w]\n    R[:, W-w-2] = (R[:, W-w-1] + 1) * S[:, W-w-1]\n\n\nprint((((U + D + L + R) * S).max() + 1))\n", "import numpy as np\n\nH,W=map(int,input().split())\nS=np.array([list(input()) for _ in range(H)]) == \".\"\n\nups=np.zeros((H,W),dtype=int)\ndowns=np.zeros((H,W),dtype=int)\nrights=np.zeros((H,W),dtype=int)\nlefts=np.zeros((H,W),dtype=int)\n\nfor i in range(1,H):\n    ups[i,:]=(ups[i-1,:]+1)*S[i-1,:]\n\nfor i in range(H-2,-1,-1):\n    downs[i,:]=(downs[i+1,:]+1)*S[i+1,:]\n\nfor i in range(1,W):\n    rights[:,i]=(rights[:,i-1]+1)*S[:,i-1]\n\nfor i in range(W-2,-1,-1):\n    lefts[:,i]=(lefts[:,i+1]+1)*S[:,i+1]\n\nans=((ups+downs+lefts+rights)*S).max()+1\nprint(ans)", "import numpy as np\n\n\ndef main():\n    H, W = list(map(int, input().split(' ')))\n    field = np.array([list(input()) for _ in range(H)])\n    field = np.where(field == '#', 0, 1)\n    left, right, up, down = [np.zeros((H, W)) for _ in range(4)]\n    for w in range(W):\n        left[:, w] = (left[:, w-1] + 1) * field[:, w]\n        right[:, -w-1] = (right[:, -w] + 1) * field[:, -w-1]\n    for h in range(H):\n        up[h, :] = (up[h-1, :] + 1) * field[h, :]\n        down[-h-1, :] = (down[-h, :] + 1) * field[-h-1, :]\n    s = left + right + up + down - 3\n    print(int(np.max(s)))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nimport numpy as np\n\nh, w = list(map(int, input().split()))\n\ns = np.array([list(input()) for _ in range(h)]) == \".\"\n\nups = np.zeros((h, w), dtype=int)\ndowns = np.zeros((h, w), dtype=int)\nrights = np.zeros((h, w), dtype=int)\nlefts = np.zeros((h, w), dtype=int)\n\nfor i in range(1, h):\n    ups[i, :] = (ups[i-1]+1)*s[i-1]\n\nfor i in reversed(list(range(h-1))):\n    downs[i, :] = (downs[i+1]+1)*s[i+1]\n\nfor i in range(1, w):\n    rights[:, i] = (rights[:, i-1]+1)*s[:, i-1]\n\nfor i in reversed(list(range(w-1))):\n    lefts[:, i] = (lefts[:, i+1]+1)*s[:, i+1]\n\nans = (((ups+downs+lefts+rights)*s).max()+1)\nprint(ans)\n\n\n# data_w = []\n# data_w_index = []\n# data_h = []\n# data_h_index = []\n\n# for i in range(h):\n#     count = 0\n#     index = 0\n#     data_w_index_tmp = []\n#     data_w_tmp = []\n#     for j in range(len(s[i])):\n#         # print(s[i][j][0])\n#         # print(count)\n#         # print(index)\n#         if s[i][j] == \".\":\n#             count += 1\n#             data_w_index_tmp.append(index)\n#         else:\n#             data_w_tmp.append(count)\n#             data_w_index_tmp.append(-1)\n#             count = 0\n#             index += 1\n#     data_w_tmp.append(count)\n#     # data_w_index_tmp.append(index)\n\n#     data_w_index.append(data_w_index_tmp)\n#     data_w.append(data_w_tmp)\n\n# print(data_w)\n# print(data_w_index)\n\n# for i in range(w):\n#     count = 0\n#     index = 0\n#     data_h_index_tmp = []\n#     data_h_tmp = []\n#     for j in range(len(s)):\n#         # print(s[i][j][0])\n#         # print(count)\n#         # print(index)\n#         if s[j][i] == \".\":\n#             count += 1\n#             data_h_index_tmp.append(index)\n#         else:\n#             data_h_tmp.append(count)\n#             data_h_index_tmp.append(-1)\n#             count = 0\n#             index += 1\n#     data_h_tmp.append(count)\n#     # data_h_index_tmp.append(index)\n\n#     data_h_index.append(data_h_index_tmp)\n#     data_h.append(data_h_tmp)\n\n# # print(data_h)\n# # print(data_h_index)\n\n# ans = 0\n# for i in range(w):\n#     for j in range(h):\n#         index_h = data_h_index[i][j]\n#         index_w = data_w_index[j][i]\n#         if index_h != 1:\n#             ans_tmp = data_h[i][index_h]+data_w[j][index_w]-1\n#             ans = max(ans, ans_tmp)\n# print(ans)\n", "import numpy as np\n\nH, W = list(map(int, input().split()))\nG = []\nfor _ in range(H):\n    G.append([1 if x == '.' else 0 for x in input()])\nG = np.array(G)\n\nNorth = np.cumsum(np.ones_like(G), axis=0)\nNorth *= (1 - G)\nNorth = np.maximum.accumulate(North, axis=0) * G\n\nSouth = np.cumsum(np.ones_like(G), axis=0)\nSouth *= np.flipud(1 - G)\nSouth = np.maximum.accumulate(South, axis=0)\nSouth = (H - np.flipud(South)) * G\n\nWest = np.cumsum(np.ones_like(G), axis=1)\nWest *= (1 - G)\nWest = np.maximum.accumulate(West, axis=1) * G\n\nEast = np.cumsum(np.ones_like(G), axis=1)\nEast *= np.fliplr(1 - G)\nEast = np.maximum.accumulate(East, axis=1)\nEast = (W - np.fliplr(East)) * G\n\nprint((np.amax(South - North + East - West) - 1))\n", "from sys import stdin\nimport numpy as np\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    h,w=map(int,readline().split())\n    grid=[readline().strip() for _ in range(h)]\n    grid2=np.zeros((h,w),dtype=\"int64\")\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j]==\".\":\n                grid2[i][j]=1\n            else:\n                grid2[i][j]=0\n\n    up=np.zeros((h,w),dtype=\"int64\")\n    up[0]=grid2[0]\n    for i in range(1,h):\n        up[i]=(up[i-1]+1)*grid2[i]\n    \n    down=np.zeros((h,w),dtype=\"int64\")\n    down[-1]=grid2[-1]\n    for i in range(h-2,-1,-1):\n        down[i]=(down[i+1]+1)*grid2[i]\n    \n    left=np.zeros((h,w),dtype=\"int64\")\n    left[:,0]=grid2[:,0]\n    for i in range(1,w):\n        left[:,i]=(left[:,i-1]+1)*grid2[:,i]\n    \n    right=np.zeros((h,w),dtype=\"int64\")\n    right[:,-1]=grid2[:,-1]\n    for i in range(w-2,-1,-1):\n        right[:,i]=(right[:,i+1]+1)*grid2[:,i]\n\n    ans=(up+down+left+right-3).max()\n    print(ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\n\nh,w=map(int,input().split())\ns=[list(input()) for i in range(h)]\n\ns=np.array(s)\ns=np.where(s=='.',1,0)\n\nL=np.zeros((h,w),dtype=np.int)\nR=np.zeros((h,w),dtype=np.int)\nU=np.zeros((h,w),dtype=np.int)\nD=np.zeros((h,w),dtype=np.int)\n\nfor i in range(w):\n L[:,i]=(L[:,i-1]+1)*s[:,i]\n R[:,-i-1]=(R[:,-i]+1)*s[:,-i-1]\nfor i in range(h):\n U[i]=(U[i-1]+1)*s[i]\n D[-i-1]=(D[-i]+1)*s[-i-1]\n\nans=np.max(L+R+U+D)-3\nprint(ans)", "import numpy\nH,W = map(int,input().split())\nS = numpy.array([[1 if i == '.' else 0 for i in input().strip()] for _ in range(H)])\nS = numpy.array([S, S])\n\nfor w in range(1, W):\n    S[0, :, w] += S[0, :, w] * S[0, :, w - 1]\nfor w in range(W - 2, -1, -1):\n    S[0, :, w] = (S[0, :, w] != 0) * numpy.maximum(S[0, :, w], S[0, :, w + 1])\nfor h in range(1, H):\n    S[1, h] += S[1, h] * S[1, h - 1]\nfor h in range(H - 2, -1, -1):\n    S[1, h] = (S[1, h] != 0) * numpy.maximum(S[1, h], S[1, h + 1])\n\nS = S[0]+S[1]\nprint(numpy.max(S)-1)", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W = lr()\nS = [list(sr()) for _ in range(H)]\nS = np.array([[1 if x == '.' else 0 for x in row] for row in S], np.bool)\nup = np.zeros((H, W), np.int32)\ndown = np.zeros((H, W), np.int32)\nright = np.zeros((H, W), np.int32)\nleft = np.zeros((H, W), np.int32)\nfor i in range(H-1):\n    up[i+1] = (1+up[i]) * S[i]\nfor i in range(H-1, 0, -1):\n    down[i-1] = (1+down[i]) * S[i]\nfor i in range(W-1):\n    left[:, i+1] = (1+left[:, i]) * S[:, i]\nfor i in range(W-1, 0, -1):\n    right[:, i-1] = (1+right[:, i]) * S[:, i]\n\nanswer = ((up + down + left + right) * S).max() + 1\nprint(answer)\n", "def main(): \n  import numpy as np \n  h,w=map(int,input().split())\n  grid=np.array([list(input()) for i in range(h)])\n  grid=np.where(grid=='.',1,0)\n    \n  left=np.zeros((h,w),dtype=np.int64)\n  right=np.zeros((h,w),dtype=np.int64)\n  up=np.zeros((h,w),dtype=np.int64)\n  down=np.zeros((h,w),dtype=np.int64)\n  \n  for i in range(w):\n    left[:,i]=(left[:,i-1]+1)*grid[:,i]\n    right[:,-i-1]=(right[:,-i]+1)*grid[:,-i-1]\n  for i in range(h):\n    up[i]=(up[i-1]+1)*grid[i]\n    down[-i-1]=(down[-i]+1)*grid[-i-1]\n  \n  print(np.max(left+right+up+down)-3)\n  \ndef __starting_point():\n  main()\n__starting_point()", "import numpy as np\nH,W = map(int,input().split())\nL = np.zeros((H,W),int)\nR = np.zeros((H,W),int)\nD = np.zeros((H,W),int)\nU = np.zeros((H,W),int)\nS = np.array([list(input()) for h in range(H)])==\".\"\n\nfor h in range(H):\n  U[h] = S[h]*(U[h-1]+1)\n  D[-h-1] = S[-h-1]*(D[-h]+1)\n\nfor w in range(W):\n  L[:,w] = S[:,w]*(L[:,w-1]+1)\n  R[:,-w-1] = S[:,-w-1]*(R[:,-w]+1)\n\nprint(np.max(U+D+L+R)-3)", "#\u5199\u7d4c\u306e\u5199\u7d4c\nimport numpy as np\nH,W = list(map(int,input().split()))\nL = np.zeros((H,W),int)\nR = np.zeros((H,W),int)\nD = np.zeros((H,W),int)\nU = np.zeros((H,W),int)\nS = np.array([list(input()) for h in range(H)])==\".\"\n\nfor h in range(H):\n  U[h] = S[h]*(U[h-1]+1)\n  D[-h-1] = S[-h-1]*(D[-h]+1)\n\nfor w in range(W):\n  L[:,w] = S[:,w]*(L[:,w-1]+1)\n  R[:,-w-1] = S[:,-w-1]*(R[:,-w]+1)\n\nprint((np.max(U+D+L+R)-3))\n\n", "import numpy as np\n\n\ndef main():\n    h, w = list(map(int, input().split()))\n    s = np.array([[i == \".\" for i in input()] for _ in range(h)], dtype=int)\n    left = s.copy()\n    right = s.copy()\n    up = s.copy()\n    down = s.copy()\n    for i in range(w - 1):\n        left[:, i + 1] = (left[:, i] + 1) * s[:, i + 1]\n        right[:, -i - 2] = (right[:, -i - 1] + 1) * s[:, -i - 2]\n    for i in range(h - 1):\n        up[i + 1] = (up[i] + 1) * s[i + 1]\n        down[-i - 2] = (down[-i - 1] + 1) * s[-i - 2]\n    print(((left + right + up + down).max() - 3))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W = lr()\nS = [list(sr()) for _ in range(H)]\nS = np.array([[1 if x == '.' else 0 for x in row] for row in S])\nup = np.zeros((H, W), np.int32)\ndown = np.zeros((H, W), np.int32)\nright = np.zeros((H, W), np.int32)\nleft = np.zeros((H, W), np.int32)\nfor i in range(H-1):\n    up[i+1] = (1+up[i]) * S[i]\nfor i in range(H-1, 0, -1):\n    down[i-1] = (1+down[i]) * S[i]\nfor i in range(W-1):\n    left[:, i+1] = (1+left[:, i]) * S[:, i]\nfor i in range(W-1, 0, -1):\n    right[:, i-1] = (1+right[:, i]) * S[:, i]\n\nanswer = ((up + down + left + right) * S).max() + 1\nprint(answer)\n", "import numpy as np\ndef main():\n    h, w = map(int, input().split())\n    s = np.array([list(input()) for _ in range(h)])\n    t = np.zeros((h+2, w+2))\n    t[1:-1, 1:-1][s == \".\"] = 1\n    row = np.zeros((h+2, w+2))\n    col = np.zeros((w+2, h+2))\n    for i in range(1, h+1):\n        idx = np.where(t[i] == 0)[0]\n        dif = np.diff(idx)\n        row[i, idx[:-1]+1] += dif-1\n        row[i, idx[1:]] -= dif-1\n        row[i] = np.cumsum(row[i])\n    t = t.T\n    for i in range(1, w+1):\n        idx = np.where(t[i] == 0)[0]\n        dif = np.diff(idx)\n        col[i, idx[:-1]] += dif-2\n        col[i, idx[1:]] -= dif-2\n        col[i] = np.cumsum(col[i])\n    col = col.T\n    cost = np.add(row, col)\n    print(int(np.max(cost)))\n\ndef __starting_point():\n    main()\n__starting_point()", "#import sys\n#input = sys.stdin.buffer.readline\nimport numpy as np\n\ndef main():\n    H,W = list(map(int,input().split()))\n    S = np.array([list(input()) for _ in range(H)]) == '.' #'.'\u306b\u4e00\u81f4\u3059\u308b\u306a\u3089True\u3057\u306a\u3051\u308c\u3070False\n\n    up = np.zeros((H,W), dtype=int)\n    down = np.zeros((H,W), dtype=int)\n    left = np.zeros((H,W), dtype=int)\n    right = np.zeros((H,W), dtype=int)\n    \n    for i in range(H-1):\n        up[i+1,:] = (up[i,:] + 1) * S[i,:] #np\u306e\u5909\u6570\u540d[k,l]\u3067k\u884cl\u5217\u3092\u53d6\u308a\u51fa\u3059\n    for i in range(H-1):                   #:\u306a\u3089\u5168\u90e8\u3092\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304f\n        down[H - 2 - i,:] = (down[H - 1 - i,:] + 1) * S[H - 1 - i,:]\n    for i in range(W-1):\n        left[:,i+1] = (left[:,i] + 1) * S[:,i]\n    for i in range(W-1):\n        right[:,W - 2 - i] = (right[:,W - 1 - i] + 1) * S[:,W - 1 - i]\n        \n    print((((up+down+left+right)*S).max()+1)) #\u30ab\u30b1\u30b6\u30f3\u30c7\u8981\u7d20\u3054\u3068\u306e\u639b\u3051\u7b97\u53ef\u80fd\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\nh,w = map(int,input().split())\nar = np.array([list(input()) for _ in range(h)]) == '.'\n#print(ar)\nl = np.zeros((h,w),dtype=int)\nr = np.zeros((h,w),dtype=int)\nu = np.zeros((h,w),dtype=int)\nd = np.zeros((h,w),dtype=int)\n\nfor i in range(h):\n  u[i] = (u[i-1]+1)*ar[i]\n  #print(u)\n  d[-i-1] = (d[-i]+1)*ar[-i-1]\n  #print(d)\n  \nfor j in range(w):\n  l[:,j] = (l[:,j-1]+1)*ar[:,j]\n  #print(l)\n  r[:,-j-1] = (r[:,-j]+1)*ar[:,-j-1]\n  #print(r)\nprint(np.max(u+d+l+r)-3)", "import numpy as np\nH,W = list(map(int,input().split()))\nS = np.array([list(input()) for _ in range(H)])\nS = np.where(S=='.',1,0)\n\n\nL = np.zeros((H,W),dtype=np.int)\nR = np.zeros((H,W),dtype=np.int)\nU = np.zeros((H,W),dtype=np.int)\nD = np.zeros((H,W),dtype=np.int)\n\nfor i in range(W):\n    L[:,i] = (L[:,i-1]+1)*S[:,i]\n    R[:,-i-1] = (R[:,-i]+1)*S[:,-i-1]\nfor j in range(H):\n    U[j,:] = (U[j-1,:]+1)*S[j,:]\n    D[-j-1,:] = (D[-j,:]+1)*S[-j-1,:]\n\nprint((np.max(L+R+U+D)-3))\n", "import numpy as np\n\nH, W = list(map(int, input().split()))\nG = []\nfor _ in range(H):\n    G.append([1 if x == '.' else 0 for x in input()])\nG = np.array(G)\nHWOnes = np.ones_like(G)\n\nNorth = np.cumsum(np.ones_like(G), axis=0)\nNorth *= (1 - G)\nNorth = np.maximum.accumulate(North, axis=0) * G\n\nSouth = np.cumsum(np.ones_like(G), axis=0)\nSouth *= np.flipud(1 - G)\nSouth = np.maximum.accumulate(South, axis=0)\nSouth = (H - np.flipud(South)) * G\n\nWest = np.cumsum(np.ones_like(G), axis=1)\nWest *= (1 - G)\nWest = np.maximum.accumulate(West, axis=1) * G\n\nEast = np.cumsum(np.ones_like(G), axis=1)\nEast *= np.fliplr(1 - G)\nEast = np.maximum.accumulate(East, axis=1)\nEast = (W - np.fliplr(East)) * G\n\nprint((np.amax(South - North + East - West - 1)))\n", "import numpy as np\nh, w = map(int, input().split())\ns = [list(input()) for i in range(h)]\nli = [[0 if s[i][j] == \"#\" else 1 for j in range(w)] for i in range(h)]\nl, r, u, d = np.array(li), np.array(li), np.array(li), np.array(li)\nfor i in range(1, h):\n    u[i] *= (u[i - 1] + 1)\n    d[-i - 1] *= (d[-i] + 1)\nfor i in range(1, w):\n    l[:, i] *= (l[:, i - 1] + 1)\n    r[:, -i - 1] *= (r[:, -i] + 1)\nprint((l + r + u + d - 3).max())", "import numpy as np\n\n\nH, W = list(map(int, input().split()))\nfield = [[c == \".\" for c in input()] for _ in range(H)]\nfield = np.array(field, dtype=np.int16)\n\nu = field.copy()\nd = field.copy()\nl = field.copy()\nr = field.copy()\n\nfor i in range(1, H):\n    u[i] = (u[i - 1] + 1) * u[i]\n    d[-i - 1] = (d[-i] + 1) * d[-i - 1]\n\nfor j in range(1, W):\n    l[:, j] = (l[:, j - 1] + 1) * l[:, j]\n    r[:, -j - 1] = (r[:, -j] + 1) * r[:, -j - 1]\n\nprint(((u + d + l + r - 3).max()))\n", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W = lr()\nS = np.array(['#' * (W+2)] + ['#' + sr() + '#' for _ in range(H)] + ['#' * (W+2)])\nS = np.array([[x == '.' for x in row] for row in S])\nS = S.astype(np.int16)\nleft = S.copy(); right = S.copy(); up = S.copy(); down = S.copy()\nfor i in range(1, W+1):\n    left[:, i] += left[:, i-1]\n    left[:, i] *= S[:, i]\nfor i in range(W, 0, -1):\n    right[:, i] += right[:, i+1]\n    right[:, i] *= S[:, i]\nfor i in range(1, H+1):\n    up[i, :] += up[i-1, :]\n    up[i, :] *= S[i, :]\nfor i in range(H, 0, -1):\n    down[i, :] += down[i+1, :]\n    down[i, :] *= S[i, :]\n\nanswer = (left + right + up + down - 3).max()\nprint(answer)\n", "import numpy as np\nH, W=map(int, input().split())\nS=np.array([list(input()) for _ in range(H)])\nS=np.where(S==\".\",1,0 )\n\nleft=np.zeros((H, W))\nright=np.zeros((H, W))\ntop=np.zeros((H, W))\nbottom=np.zeros((H, W))\n\nfor i in range(W):\n  if i==0:\n    left[:,i]=S[:,i]\n    right[:,-i-1]=S[:,-i-1]\n  else:\n    left[:,i]=(left[:,i-1]+1)*S[:,i]\n    right[:,-i-1]=(right[:,-i]+1)*S[:,-i-1]\n    \nfor i in range(H):\n  if i==0:\n    top[i,:]=S[i,:]\n    bottom[-1-i,:]=S[-i-1,:]\n  else:\n    top[i,:]=(top[i-1,:]+1)*S[i,:]\n    bottom[-1-i,:]=(bottom[-i,:]+1)*S[-i-1,:]\n    \nans=left+top+right+bottom-3\n    \n\nprint(int(ans.max()))", "import numpy as np\nH,W = map(int,input().split())\nMap=[list(input()) for h in range(H)]\nMap=[[1 if s=='.' else 0 for s in Map[h]] for h in range(H)]\nMap=np.array(Map,dtype=int)\nL=Map.copy()\nR=Map.copy()\nU=Map.copy()\nD=Map.copy()\nfor w in range(1,W):\n    L[:,w]=(L[:,w-1]+1)*Map[:,w]\n    R[:,-(1+w)]=(R[:,-w]+1)*Map[:,-(1+w)]\nfor h in range(1,H):\n    U[h,:]=(U[h-1,:]+1)*Map[h,:]\n    D[-(1+h),:]=(D[-h,:]+1)*Map[-(1+h),:]\nprint((L+R+U+D).max()-3)", "import sys\nimport numpy as np\n\n\ndef read():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    h, w = list(map(int, read().split()))\n    s = np.array([[i == \".\" for i in read()] for _ in range(h)], dtype=int)\n    left = np.zeros((h, w), dtype=int)\n    right = np.zeros((h, w), dtype=int)\n    up = np.zeros((h, w), dtype=int)\n    down = np.zeros((h, w), dtype=int)\n    left[:, 0] = s[:, 0]\n    right[:, -1] = s[:, -1]\n    for i in range(w - 1):\n        left[:, i + 1] = (left[:, i] + 1) * s[:, i + 1]\n        right[:, -i - 2] = (right[:, -i - 1] + 1) * s[:, -i - 2]\n    up[0] = s[0]\n    down[-1] = s[-1]\n    for i in range(h - 1):\n        up[i + 1] = (up[i] + 1) * s[i + 1]\n        down[-i - 2] = (down[-i - 1] + 1) * s[-i - 2]\n    print(((left + right + up + down).max() - 3))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\nh,w = map(int,input().split())\nar = np.array([list(input()) for _ in range(h)]) == '.'\nl = np.zeros((h,w),dtype=int)\nr = np.zeros((h,w),dtype=int)\nu = np.zeros((h,w),dtype=int)\nd = np.zeros((h,w),dtype=int)\nfor i in range(h):\n  u[i, :] = (u[i-1]+1)*ar[i]\n  d[-i-1, :] = (d[-i]+1)*ar[-i-1]\n\nfor j in range(w):\n  l[:,j] = (l[:,j-1]+1)*ar[:,j]\n  r[:,-j-1] = (r[:,-j]+1)*ar[:,-j-1]\nprint(np.max(u+d+l+r)-3)", "import sys\nimport numpy as np\ninput = sys.stdin.readline\nh,w = map(int,input().split())\ns = (np.array([list(input().strip()) for _ in range(h)])==\".\").astype(np.int)\nl,r,u,d = s.copy(),s.copy(),s.copy(),s.copy()\nfor i in range(1,w):\n  l[:,i] *= l[:,i-1] + 1\n  r[:,w-i-1] *= r[:,w-i] + 1\n\nfor i in range(1,h):\n  u[i] *= u[i-1] + 1\n  d[h-i-1] *= d[h-i] + 1\nprint(max([max(i) for i in l+r+u+d-3]))", "import numpy as np\n\nH, W = map(int,input().split())\nS = [list(str(input())) for _ in range(H)]\nS = np.array(S)\nS = (S == '.') * 1\n\nR = np.zeros((H, W), dtype=int)\nL = np.zeros((H, W), dtype=int)\nU = np.zeros((H, W), dtype=int)\nD = np.zeros((H, W), dtype=int)\n\nfor i in range(W):\n    if i == 0:\n        L[:, 0] = S[:, 0]\n        R[:, W - 1] = S[:, W - 1]\n    else:\n        L[:, i] = L[:, i - 1] * S[:, i] + S[:, i]\n        R[:, W - i - 1] = R[:, W - i] * S[:, W - i - 1] + S[:, W - i - 1]\nfor i in range(H):\n    if i == 0:\n        U[i] = S[i]\n        D[H - 1] = S[H - 1]\n    else:\n        U[i] = U[i - 1] * S[i] + S[i]\n        D[H - i - 1] = D[H - i] * S[H - i - 1] + S[H - i - 1]\n\nprint(np.max(R + L + U + D) - 3)", "import numpy as np\nh, w = map(int, input().split())\narr = np.array([list(input()) for _ in range(h)]) == \".\"\n\nl = np.zeros((h, w), dtype=int)\nr = np.zeros((h, w), dtype=int)\nu = np.zeros((h, w), dtype=int)\nd = np.zeros((h, w), dtype=int)\n\nfor i in range(h):\n    u[i] = (u[i - 1] + 1) * arr[i]\n    d[- i - 1] = (d[- i] + 1) * arr[- i - 1]\n\nfor j in range(w):\n    l[:, j] = (l[:, j-1] + 1) * arr[:, j]\n    r[:, - j - 1] = (r[:, - j] + 1) * arr[:, - j - 1]\n\nprint(np.max(u + d + l + r) - 3)", "# D - Lamp\nimport numpy as np\n\nh, w = map(int, input().split())\n\n# 0: \u969c\u5bb3\u7269\u307e\u305f\u306f\u58c1 1: \u901a\u8def\n# \u4e0a\u4e0b\u5de6\u53f3\u306e\u58c1\u306e\u5206\u3092\u52a0\u5473\u3057\u3066+2\u3057\u305f\u30b0\u30ea\u30c3\u30c9\u3092\u7528\u610f\u3059\u308b\u3002\ng = np.zeros((h+2,w+2),dtype=np.int64)\nfor i in range(h):\n    grid = np.array(list(input()))\n    g[i+1, 1:w+1] = (grid=='.')\n\n# \u6a2a\u306b\u3064\u3044\u3066\u8003\u3048\u308b\ngW = np.copy(g)\ngW = np.ravel(gW)\ntWLeft = np.arange((w+2)*(h+2))\ntWRight = np.copy(tWLeft)\n\ntWLeft[gW==1] = 0\ntWRight[gW[::-1]==1] = 0\n\nnp.maximum.accumulate(tWLeft, out=tWLeft)\nnp.maximum.accumulate(tWRight, out=tWRight)\n\ntWRight = len(tWRight) - 1 - tWRight[::-1]\n\ntW = tWRight-tWLeft-1\ntW[gW==0] = 0\ntW = tW.reshape(h+2, w+2)\n\n# \u7e26\u306b\u3064\u3044\u3066\u8003\u3048\u308b\ngH = np.copy(g.T)\ngH = np.ravel(gH)\ntHLeft = np.arange((w+2)*(h+2))\ntHRight = np.copy(tHLeft)\n\ntHLeft[gH==1] = 0\ntHRight[gH[::-1]==1] = 0\n\nnp.maximum.accumulate(tHLeft, out=tHLeft)\nnp.maximum.accumulate(tHRight, out=tHRight)\n\ntHRight = len(tHRight) - 1 - tHRight[::-1]\n\ntH = tHRight-tHLeft-1\ntH[gH==0] = 0\ntH = tH.reshape(w+2, h+2).T\n\n#print(tW)\n#print(tH)\nprint(np.max(tW+tH-1))\n\n\n'''\n# \u6a2a\u306b\u3064\u3044\u3066\u8003\u3048\u308b\ntblW = np.zeros((h, w),dtype=np.int64)\nfor i in range(h):\n    for j in range(w):\n        if grid[i, j]=='#' or tblW[i, j]>0:\n            continue\n        else:\n            cnt = 1\n            while j+cnt<w and grid[i, j+cnt]!='#':\n                cnt += 1\n            tblW[i, j:j+cnt] = cnt\nprint(tblW)\n    \n# \u7e26\u306b\u3064\u3044\u3066\u8003\u3048\u308b\ntblH = np.zeros((h, w),dtype=np.int64)\nfor j in range(w):\n    for i in range(h):\n        if grid[i, j]=='#' or tblH[i, j]>0:\n            continue\n        else:\n            cnt = 1\n            while i+cnt<h and grid[i+cnt, j]!='#':\n                cnt += 1\n            tblH[i:i+cnt, j] = cnt\nprint(tblH)\n\nans = 0\nfor i in range(h):\n    for j in range(w):\n        ans = max(ans, tblH[i, j]+tblW[i, j]-1)\n\nprint(ans)\n'''", "def main():\n    import sys\n    import numpy as np\n\n    def input(): return sys.stdin.readline().rstrip()\n\n    h, w = map(int, input().split())\n    g = np.zeros((h, w), dtype=int)\n    for i in range(h):\n        g[i] = [int(s == '.') for s in input()]\n    \n    L = g.copy()\n    R = g.copy()\n    U = g.copy()\n    D = g.copy()\n    \n    for i in range(1,h):\n        U[i] = (U[i-1]+1)*g[i]\n        D[~i] = (D[~i+1]+1)*g[~i]\n    for j in range(1, w):\n        L[:, j] = (L[:, j-1]+1)*g[:,j]\n        R[:, ~j] = (R[:, ~j+1]+1)*g[:, ~j]\n     \n    ans = np.max(L+R+U+D-3)\n    print(ans)\n            \n                \ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\n\nH, W = list(map(int, input().split()))\nS = [list(input()) for _ in range(H)]\nS = np.array(S) == \".\"\n\nL = np.zeros((H, W), dtype=int)\nR = np.zeros((H, W), dtype=int)\nU = np.zeros((H, W), dtype=int)\nD = np.zeros((H, W), dtype=int)\n\nfor i in range(H):\n    D[i] = (D[i-1]+1) * S[i]\n    U[-i-1] = (U[-i]+1) * S[-i-1]\n\nfor i in range(W):\n    R[:, i] = (R[:, i-1]+1) * S[:, i]\n    L[:, -i-1] = (L[:, -i]+1) * S[:, -i-1]\n\nprint((np.max(L+R+U+D)-3))\n", "import numpy as np\nh,w=map(int,input().split())\nS=np.array([list(input()) for _ in range(h)])\nS=np.where(S==\".\",1,0)\n\nleft,right,up,down=[np.zeros((h,w),dtype=np.int64) for _ in range(4)]\nfor i in range(w):\n    left[:,i]=(left[:,i-1]+1)*S[:,i]\n    right[:,-i-1]=(right[:,-i]+1)*S[:,-i-1]\nfor i in range(h):\n    up[i]=(up[i-1]+1)*S[i]\n    down[-i-1]=(down[-i]+1)*S[-i-1]\n\nprint(int(np.max(left+right+up+down)-3))", "def main():\n    NEG = -10**6\n    H, W = list(map(int, input().split()))\n    S = [input() for _ in range(H)]\n    T = [[NEG] * W for _ in range(H)]\n    for w in range(W):\n        b = NEG\n        for h in range(H):\n            if S[h][w] == '.':\n                if b == NEG:\n                    b = h\n            else:\n                if b != NEG:\n                    for j in range(b, h):\n                        T[j][w] = h - b\n                    b = NEG\n        if b != NEG:\n            for j in range(b, h + 1):\n                T[j][w] = h + 1 - b\n    m = 0\n    for s, t in zip(S, T):\n        b = NEG\n        for i in range(len(s)):\n            if s[i] == '#':\n                if b != NEG:\n                    m = max(m, i - b - 1 + max(t[b:i]))\n                    b = NEG\n            else:\n                if b == NEG:\n                    b = i\n        if b != NEG:\n            m = max(m, i - b + max(t[b:i + 1]))\n    print(m)\n\nmain()\n", "import numpy as np\n\nh, w = map(int, input().split())\ns = [input() for _ in range(h)]\n\nt = np.zeros((h, w), dtype=np.int32)\nfor i in range(h):\n    for j in range(w):\n        if s[i][j] == '.':\n            t[i][j] = 1\n\nl = np.zeros((h, w), dtype=np.int32)\nr = np.zeros((h, w), dtype=np.int32)\nu = np.zeros((h, w), dtype=np.int32)\nd = np.zeros((h, w), dtype=np.int32)\n\nfor i in range(w):\n    if i == 0:\n        l[:, i] = t[:, i]\n    else:\n        l[:, i] = (l[:, i-1] + 1) * t[:, i]\n\nfor i in range(w-1, -1, -1):\n    if i == w-1:\n        r[:, i] = t[:, i]\n    else:\n        r[:, i] = (r[:, i+1] + 1) * t[:, i]\n\nfor i in range(h):\n    if i == 0:\n        u[i] = t[i]\n    else:\n        u[i] = (u[i-1] + 1) * t[i]\n\nfor i in range(h-1, -1, -1):\n    if i == h-1:\n        d[i] = t[i]\n    else:\n        d[i] = (d[i+1] + 1) * t[i]\n\nlrud = l+r+u+d-3\nprint(np.max(lrud))", "import numpy as np\n\nH, W = list(map(int, input().split(' ')))\n\nS = np.array([[int(c == '.') for c in input()] for _ in range(H)])\n\nup = S.copy()\ndown = S.copy()\nleft = S.copy()\nright = S.copy()\n\nfor i in range(1, H):\n    up[i] = (up[i - 1] + 1) * up[i]\n    down[-i - 1] = (down[-i] + 1) * down[-i - 1]\n\nfor i in range(1, W):\n    left[:, i] = (left[:, i - 1] + 1) * left[:, i]\n    right[:, -i - 1] = (right[:, -i] + 1) * right[:, -i - 1]\n\nprint((np.max(up + down + left + right) - 3))\n", "import numpy as np\n\ndef lamp(s):\n    h = len(s)\n    w = s.size//h\n    A = np.zeros((h,w),np.int64)\n    for i in range(1,w):\n        A[:,i] = np.where(s[:,i-1]==\".\", A[:,i-1] + 1, 0)\n    return A\n\nH,W = map(int,input().split())\nS = np.array([[*input()] for _ in range(H)])\n\nL = lamp(S)\nR = lamp(S[:,::-1])[:,::-1]\nU = lamp(S.T).T\nD = lamp(S.T[:,::-1])[:,::-1].T\n\nLRUD = L+R+U+D\nprint(LRUD[S == \".\"].max().max()+1)", "from sys import stdin\nimport numpy as np\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    h,w=map(int,readline().split())\n    grid=[readline().strip() for _ in range(h)]\n    grid=[[1 if grid[i][j]==\".\" else 0 for j in range(w)] for i in range(h)]\n    grid=np.array(grid,dtype=np.int64)\n\n    up=np.zeros((h,w),dtype=\"int64\")\n    up[0]=grid[0]\n    for i in range(1,h):\n        up[i]=(up[i-1]+1)*grid[i]\n    \n    down=np.zeros((h,w),dtype=\"int64\")\n    down[-1]=grid[-1]\n    for i in range(h-2,-1,-1):\n        down[i]=(down[i+1]+1)*grid[i]\n    \n    left=np.zeros((h,w),dtype=\"int64\")\n    left[:,0]=grid[:,0]\n    for i in range(1,w):\n        left[:,i]=(left[:,i-1]+1)*grid[:,i]\n    \n    right=np.zeros((h,w),dtype=\"int64\")\n    right[:,-1]=grid[:,-1]\n    for i in range(w-2,-1,-1):\n        right[:,i]=(right[:,i+1]+1)*grid[:,i]\n\n    ans=(up+down+left+right-3).max()\n    print(ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\nH ,W = list(map(int,input().split()))\n\nmaze = [[] for _ in range(H)]\nfor i in range(H):\n    maze[i] = np.array(list(input())) == \".\"\nmaze = np.array(maze)\n\nup = np.zeros((H, W), dtype=int)\ndown = np.zeros((H, W), dtype=int)\nright = np.zeros((H, W), dtype=int)\nleft = np.zeros((H, W), dtype=int)\n\nfor i in range(H):\n    up[i] = (up[i-1] + 1)*maze[i]\n    down[-(i+1)] = (down[-i] + 1)*maze[-(i+1)] \n    \n#print(up)\n#print(down)\n\nfor i in range(W):\n    right[:, i] = (right[:, i-1] + 1)*maze[:, i]\n    left[:, -(i+1)] = (left[:, -i] + 1)*maze[:, -(i+1)]\n\nprint((np.max(up+down+right+left)-3))\n", "# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W = lr()\nS = [list(sr()) for _ in range(H)]\nS = np.array([[1 if x == '.' else 0 for x in row] for row in S], np.bool)\nup = np.zeros((H, W), np.int32)\ndown = np.zeros((H, W), np.int32)\nright = np.zeros((H, W), np.int32)\nleft = np.zeros((H, W), np.int32)\nfor i in range(H-1):\n    up[i+1] = (1+up[i]) * S[i]\nfor i in range(H-1, 0, -1):\n    down[i-1] = (1+down[i]) * S[i]\nfor i in range(W-1):\n    left[:, i+1] = (1+left[:, i]) * S[:, i]\n    #\u884c\u5217\u306e\u5217\u3092\u53d6\u308a\u51fa\u3059\u6642\u306e\u8a18\u6cd5\nfor i in range(W-1, 0, -1):\n    right[:, i-1] = (1+right[:, i]) * S[:, i]\n\n\nanswer = ((up + down + left + right) * S).max() + 1\n#\u81ea\u8eab\u3092\u6570\u3048\u306a\u3044\u3053\u3068\u3067\u7279\u6b8a\u306a\u5834\u5408\u3092\u306a\u304f\u3057\u3066\u3044\u308b\nprint(answer)\n", "H,W=list(map(int,input().split()))\nimport numpy as np\nm=np.array([[0 if i==\"#\" else 1 for i in input()] for i in range(H)])\nl,r,u,d=np.zeros((4,H,W))\nfor i in range(H):\n   u[i]=(u[i-1]+1)*m[i]\n   d[-i-1]=(d[-i]+1)*m[-i-1]\nfor i in range(W):\n   r[:,i]=(r[:,i-1]+1)*m[:,i]\n   l[:,-i-1]=(l[:,-i]+1)*m[:,-i-1]\nprint(int(np.max(u+r+l+d))-3)", "import numpy as np\nH, W = map(int,input().split())\nl = np.zeros((H,W), dtype=int)\nr = np.zeros((H,W), dtype=int)\nd = np.zeros((H,W), dtype=int)\nu = np.zeros((H,W), dtype=int)\ns = np.array([list(input()) for _ in range(H)]) == \".\"\nfor i in range(H):\n    u[i] = (u[i-1]+1)*s[i]\n    d[-i-1] = (d[-i]+1)*s[-i-1]\nfor i in range(W):\n    l[:, i] = (l[:, i-1]+1)*s[:, i]\n    r[:, -i-1] = (r[:, -i]+1)*s[:, -i-1]\nprint(np.max(u+d+l+r)-3)", "import sys\nimport numpy as np\ndef main():\n    input = sys.stdin.readline\n    h, w = map(int, input().split())\n    s = np.array([list(input().rstrip()) for _ in range(h)])\n    t = np.zeros((h+2, w+2))\n    t[1:-1, 1:-1][s == \".\"] = 1\n    row = np.zeros((h+2, w+2))\n    col = np.zeros((w+2, h+2))\n    for i in range(1, h+1):\n        idx = np.where(t[i] == 0)[0]\n        dif = np.diff(idx)\n        row[i, idx[:-1]+1] += dif-1\n        row[i, idx[1:]] -= dif-1\n        row[i] = np.cumsum(row[i])\n    t = t.T\n    for i in range(1, w+1):\n        idx = np.where(t[i] == 0)[0]\n        dif = np.diff(idx)\n        col[i, idx[:-1]] += dif-2\n        col[i, idx[1:]] -= dif-2\n        col[i] = np.cumsum(col[i])\n    col = col.T\n    cost = np.add(row, col)\n    print(int(np.max(cost)))\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\n\nh, w = map(int, input().split())\nS = list(list(input()) for _ in range(h))\nS = np.array(S)\nS_int = np.zeros_like(S, dtype=int)\nS_int[S=='.'] = 1\n\ndef getLR(d, width, height):\n  L = np.zeros_like(d)\n  R = L.copy()\n  L[:][0] = 0\n  R[:][-1] = 0\n  for i in range(1, width):\n    ridx = width - 1 - i\n    L[:,i] = d[:,i] * (L[:,i-1] + d[:,i-1])\n    R[:,ridx] = d[:,ridx] * (R[:,ridx+1] + d[:,ridx+1])\n  return L, R\n\nL, R = getLR(S_int, w, h)\nU, D = getLR(S_int.T, h, w)\nprint((L+R+U.T+D.T).max() + 1)", "#import math\n#import itertools\nimport numpy as np\n#from collections import deque\n# sys.setrecursionlimit(10 ** 6)\n#MOD = 10 ** 9 + 7\n#INF = 10 ** 9\n#PI = 3.14159265358979323846\n\nINT = lambda: int(input())\nINTM = lambda: map(int,input().split())\nSTRM = lambda: map(str,input().split())\nSTR = lambda: str(input())\nLIST = lambda: list(map(int,input().split()))\nLISTS = lambda: list(map(str,input().split()))\n\ndef do():\n    h,w=INTM()\n    ban=np.zeros((h,w),dtype=np.int16)\n    for i in range(h):\n        s=STR()\n        for i1 in range(len(s)):\n            if s[i1]==\".\":\n                ban[i][i1]=1\n\n    left =np.zeros((h,w),dtype=np.int16)\n    right=np.zeros((h,w),dtype=np.int16)\n    up   =np.zeros((h,w),dtype=np.int16)\n    down =np.zeros((h,w),dtype=np.int16)\n    #print(up)\n    for i in range(w):\n        i2=w-1-i\n        if i==0:\n            left[:,i]=ban[:,i]\n            right[:,i2]=ban[:,i2]\n        else:\n            left[:,i]=ban[:,i]*(left[:,i-1]+1)\n            right[:,i2]=ban[:,i2]*(right[:,i2+1]+1)\n    \n    for i in range(h):\n        i2=h-1-i\n        if i==0:\n            up[i,:]=ban[i,:]\n            down[i2,:]=ban[i2,:]\n        else:\n            up[i,:]=ban[i,:]*(up[i-1,:]+1)\n            down[i2,:]=ban[i2,:]*(down[i2+1,:]+1)\n    \n\n    anslist=down+up+right+left\n    ans=0\n    for i in anslist:\n        ans=max(ans,max(i))\n    print(ans-3)\n\n\ndef __starting_point():\n    do()\n__starting_point()", "import numpy as np\nH,W=list(map(int, input().split()))\nS=[]\nfor h in range(H):\n    s=list(input())\n    S.append(s)\nS=np.array(S)\nruit=np.zeros((H,W))\nruit[0,:]=np.where(S[0,:]==\".\",1,0)\nruil=np.zeros((H,W))\nruil[:,0]=np.where(S[:,0]==\".\",1,0)\nruir=np.zeros((H,W))\nruir[:,-1]=np.where(S[:,-1]==\".\",1,0)\nruib=np.zeros((H,W))\nruib[-1,:]=np.where(S[-1,:]==\".\",1,0)\n\nfor h in range(1,H):\n    nowt=np.where(S[h,:]==\".\",1,0)\n    ruit[h,:]=(ruit[h-1,:]+nowt)*nowt\n\n    nowb=np.where(S[-(h+1),:]==\".\",1,0)\n    ruib[-(h+1),:]=(ruib[-h,:]+nowb)*nowb\n\nfor w in range(1,W):\n    nowl=np.where(S[:,w]==\".\",1,0)\n    ruil[:,w]=(ruil[:,w-1]+nowl)*nowl\n    nowr=np.where(S[:,-(w+1)]==\".\",1,0)\n    ruir[:,-(w+1)]=(ruir[:,-w]+nowr)*nowr\n#print(ruir)\n#print(ruil)\n#print(ruib)\nprint((int((ruit+ruib+ruil+ruir-3).max())))\n\n\n    \n\n\n\n", "#abc129d\nimport numpy as np\nh,w=list(map(int,input().split()))\ns=np.array([list(input()) for i in range(h)])=='.'\nu=np.zeros((h,w),dtype=int)\nd=np.zeros((h,w),dtype=int)\nl=np.zeros((h,w),dtype=int)\nr=np.zeros((h,w),dtype=int)\nfor i in range(h):\n u[i]=(u[i-1]+1)*s[i]\n d[-i-1]=(d[-i]+1)*s[-i-1]\nfor i in range(w):\n l[:,i]=(l[:,i-1]+1)*s[:,i]\n r[:,-i-1]=(r[:,-i]+1)*s[:,-i-1]\nprint((np.max(u+d+l+r-3)))\n", "import numpy as np\nh,w=list(map(int,input().split()))\ns=[]\nfor _ in range(h):\n    si=input()\n    si=si.replace('.', '1')\n    si=si.replace('#', '0')\n    s.append(list(map(int,si)))\ns=np.array(s)\n\nleft=np.zeros((h,w))\nright=np.zeros((h,w))\nup=np.zeros((h,w))\ndown=np.zeros((h,w))\n\nfor i in range(w):\n    if(i==0):\n        left[:,i]=s[:,i]\n        right[:,w-i-1]=s[:,w-i-1]\n    else:\n        left[:,i]=(left[:,i-1]+1)*s[:,i]\n        right[:,w-i-1]=(right[:,w-i]+1)*s[:,w-i-1]\n\nfor i in range(h):\n    if(i==0):\n        down[i,:]=s[i,:]\n        up[h-i-1,:]=s[h-i-1,:]\n    else:\n        down[i,:]=(down[i-1,:]+1)*s[i,:]\n        up[h-i-1,:]=(up[h-i,:]+1)*s[h-i-1,:]\n\nans=left+right+up+down-3\nprint((int(np.max(ans))))\n", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nimport numpy as np\n\n\n# In[2]:\n\n\nH, W = list(map(int, input().split()))\nS = np.ones((H, W), dtype=np.bool)\nfor i in range(H):\n    S[i] = [s == \".\" for s in input()]\n\n\n# In[3]:\n\n\nup = np.zeros((H, W), dtype=np.int16)\ndown = np.zeros((H, W), dtype=np.int16)\nleft = np.zeros((H, W), dtype=np.int16)\nright = np.zeros((H, W), dtype=np.int16)\n\n# up\nup[0, :] = S[0, :]\nfor h in range(1, H):\n    up[h, :] = up[h - 1, :] + 1\n    up[h, :] *= S[h, :]\n\n# down\ndown[H - 1, :] = S[H - 1, :]\nfor h in reversed(list(range(0, H - 1))):\n    down[h, :] = down[h + 1, :] + 1\n    down[h, :] *= S[h, :]\n\n# left\nleft[:, 0] = S[:, 0]\nfor w in range(1, W):\n    left[:, w] = left[:, w - 1] + 1\n    left[:, w] *= S[:, w]\n\n# right\nright[:, W - 1] = S[:, W - 1]\nfor w in reversed(list(range(0, W - 1))):\n    right[:, w] = right[:, w + 1] + 1\n    right[:, w] *= S[:, w]\n\nans = np.max(up + down + left + right - 3)\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n", "import numpy as np\ndef main():\n    printl = lambda l: [print(x) for x in l]\n    H, W = list(map(int, input().split()))\n    A = np.array([[1 if i == '.' else 0 for i in input()] for _ in range(H)])\n    L = np.zeros((H, W), dtype = np.int)\n    R = np.zeros((H, W), dtype = np.int)\n    U = np.zeros((H, W), dtype = np.int)\n    D = np.zeros((H, W), dtype = np.int)\n    L[:, 0] = A[:, 0]\n    for w in range(1, W):\n        L[:, w] = (L[:, w - 1] + 1) * A[:, w]\n    R[:, W - 1] = A[:, W - 1]\n    for w in range(W - 2, -1, -1):\n        R[:, w] = (R[:, w + 1] + 1) * A[:, w]\n    U[0, :] = A[0, :]\n    for h in range(1, H):\n        U[h, :] = (U[h - 1, :] + 1) * A[h, :]\n    D[H - 1, :] = A[H - 1, :]\n    for h in range(H - 2, -1, -1):\n        D[h, :] = (D[h + 1, :] + 1) * A[h, :]\n    print(np.max(L + R + U + D - 3))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n\nH,W = map(int, input().split())\nS = []\nfor h in range(H):\n  S.append(list(input()))\nG = np.array(S)\nG = np.where(G == \".\", 1, 0)\n\n## \u4e8b\u524d\u8a08\u7b97\n## \u30de\u30b9\u3054\u3068\u306b\u3001\u300c\u305d\u306e\u30de\u30b9\u306b\u30e9\u30a4\u30c8\u3092\u8a2d\u7f6e\u3057\u305f\u5834\u5408\u306b\u7167\u3089\u305b\u308b\u30de\u30b9\u306e\u6570\u300d\u3092\u4e0a\u4e0b\u5de6\u53f3\u306e4\u914d\u5217\u3067\u6c42\u3081\u308b\nL = np.zeros((H,W),dtype=int)\nR = np.zeros((H,W),dtype=int)\nU = np.zeros((H,W),dtype=int)\nD = np.zeros((H,W),dtype=int)\n\nfor w in range(1,W):\n  L[:,w] = (L[:,w-1]+1)*(G[:,w-1])\nfor w in range(W-1,0,-1):\n  R[:,w-1] = (R[:,w]+1)*(G[:,w])\nfor h in range(1,H):\n  U[h] = (U[h-1]+1)*(G[h-1])\nfor h in range(H-1,0,-1):\n  D[h-1] = (D[h]+1)*(G[h])\n\nans = np.max((L+R+U+D)*G)+1\nprint(ans)", "import numpy as np\nh,w = map(int,input().split())\ns = [[] for j in range(h)]\nfor i in range(h):\n    tmp = input()\n    for j in tmp:\n        if j == '.':\n            s[i].append(1)\n        else:\n            s[i].append(0)\n\n\nL = np.zeros((h,w))\nR = np.zeros((h,w))\nU = np.zeros((h,w))\nD = np.zeros((h,w))\ns = np.array(s)\n\nfor i in range(w):\n    L[:,i] = (L[:,i-1]+1)*s[:,i]\n    R[:,-1-i] = (R[:,-i]+1)*s[:,-1-i]\n    \nfor i in range(h):\n    U[i,:] = (U[i-1,:]+1)*s[i,:]\n    D[-1-i,:] = (D[-i,:]+1)*s[-i-1,:]\n    \nprint(int(np.max(L+R+D+U-3)))", "import numpy as np\n\nH, W = map(int,input().split())\nS = [list(input()) for _ in range(H)]\nS = np.array(S)\nS = (S == '.') * 1\n\nR = np.zeros((H, W), dtype=int)\nL = np.zeros((H, W), dtype=int)\nU = np.zeros((H, W), dtype=int)\nD = np.zeros((H, W), dtype=int)\n\nfor i in range(W):\n    if i == 0:\n        L[:, 0] = S[:, 0]\n        R[:, W - 1] = S[:, W - 1]\n    else:\n        L[:, i] = L[:, i - 1] * S[:, i] + S[:, i]\n        R[:, W - i - 1] = R[:, W - i] * S[:, W - i - 1] + S[:, W - i - 1]\nfor i in range(H):\n    if i == 0:\n        U[i] = S[i]\n        D[H - 1] = S[H - 1]\n    else:\n        U[i] = U[i - 1] * S[i] + S[i]\n        D[H - i - 1] = D[H - i] * S[H - i - 1] + S[H - i - 1]\n\nprint(np.max(R + L + U + D) - 3)", "import numpy as np\n\n\nH, W = list(map(int, input().split()))\nS = np.ones((H, W), dtype=np.bool)\nfor i in range(H):\n    S[i] = [s == \".\" for s in input()]\n\nup = np.zeros((H, W), dtype=np.int16)\ndown = np.zeros((H, W), dtype=np.int16)\nleft = np.zeros((H, W), dtype=np.int16)\nright = np.zeros((H, W), dtype=np.int16)\n\n# up\nup[0, :] = S[0, :]\nfor h in range(1, H):\n    up[h, :] = up[h - 1, :] + 1\n    up[h, :] *= S[h, :]\n\n# down\ndown[H - 1, :] = S[H - 1, :]\nfor h in reversed(list(range(0, H - 1))):\n    down[h, :] = down[h + 1, :] + 1\n    down[h, :] *= S[h, :]\n\n# left\nleft[:, 0] = S[:, 0]\nfor w in range(1, W):\n    left[:, w] = left[:, w - 1] + 1\n    left[:, w] *= S[:, w]\n\n# right\nright[:, W - 1] = S[:, W - 1]\nfor w in reversed(list(range(0, W - 1))):\n    right[:, w] = right[:, w + 1] + 1\n    right[:, w] *= S[:, w]\n\nans = np.max(up + down + left + right - 3)\nprint(ans)\n", "import numpy as np\nh, w = list(map(int, input().split()))\narr = np.array([list(input()) for _ in range(h)]) == \".\"\n# print(arr)\nl = np.zeros((h, w), dtype=int)\nr = np.zeros((h, w), dtype=int)\nu = np.zeros((h, w), dtype=int)\nd = np.zeros((h, w), dtype=int)\n\nfor i in range(h):\n    u[i] = (u[i - 1] + 1) * arr[i] #arr\u304cFalse\u3060\u30680\u306b\u306a\u308b\n    d[- i - 1] = (d[- i] + 1) * arr[- i - 1]\n\nfor j in range(w):\n    l[:, j] = (l[:, j-1] + 1) * arr[:, j]\n    r[:, - j - 1] = (r[:, - j] + 1) * arr[:, - j - 1]\n# print(u)\nprint((np.max(u + d + l + r) - 3))\n"]