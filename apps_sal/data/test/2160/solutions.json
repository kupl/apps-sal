["nCells, nQueries = list(map(int, input().split()))\nqueries = list(map(int, input().split()))\nseen = [False] * 100002\nbad = set()\nfor q in queries:\n    if not seen[q]:\n        seen[q] = True\n        bad.add((q, q))\n    if seen[q - 1]:\n        bad.add((q - 1, q))\n    if seen[q + 1]:\n        bad.add((q + 1, q))\nprint((nCells - 1) * 2 + nCells - len(bad))\n", "n , k = list(map(int , input().split()))\nques = []\nlast = [-1]*(n+2)\nlast[0] = 10000000\nlast[n+1] = 10000000\nfrst = [-1]*(n+2)\n#print(frst)\n\nques = input().split()\nfor i in range(len(ques)):\n    ques[i] = int(ques[i])\n#print(type(ques[i]))\n    \nans = n * 3\n\nfor i in range(k):\n    \n    if frst[ques[i]] == -1 :\n            frst[ques[i]] = i    \n    #if last[ques[i]] < i :\n    last[ques[i]] = i    \n\n    '''try:\n        if frst[ques[k]] > k :\n            frst[ques[k]] = k    \n        if last[ques[k]] < k :\n            last[ques[k]] = k    \n    except :\n        print((\"k : {}\".format(k)))'''\n    '''for x in range(1 , n+1) :\n        if last[x] == int(-1) :\n            print(x)\n            frst[x] = -1\n            last[x] = 10000000'''\n#print(frst)\n#print(last)\ncnt = 0\nfor i in range(1 , n+1):\n    if frst[i] != -1 :\n        if frst[i] < last[i-1]:\n            cnt += 1\n        if frst[i] < last[i+1] :\n            cnt += 1\n            #print(\"fst : {} < lst : {}\").format(frst[i] , last[i+1])\n        if frst[i] != -1 :\n            cnt += 1\nif frst[1] == -1 : cnt+= 1\nif frst[n] == -1 : cnt+= 1\n\nans = ans - cnt \nprint(ans)\n", "intin=lambda:list(map(int,input().split()))\nAin=lambda:list(map(int,input().split()))\nmod=1000000007\n\nn,k=intin()\na=Ain()\nm=n+1\n\nf=[-1]*m\nl=[-1]*m\n\nfor i in range(k):\n    x=a[i]\n    if f[x]==-1: f[x]=i\n    l[x]=i\n\nans=0\nfor i in range(1,m):\n    if f[i]==-1:\n        ans+=1\n        if i>1: ans+=1\n        if i<n: ans+=1\n        continue\n    if i<n and f[i]>l[i+1]: ans+=1\n    if i>1 and f[i]>l[i-1]: ans+=1\nprint(ans)\n\n\n\n    \n\n\n\n\n\n\n\n", "n, m = map(int, input().split(' '))\ns = list(map(int, input().split(' ')))\n\nl = {i: m for i in range(n)}\nr = {i: -1 for i in range(n)}\n\nfor i, a in enumerate(s):\n    l[a - 1] = min(i, l[a - 1])\n    r[a - 1] = max(i, r[a - 1])\n    \ncount = 0\nfor i in range(n):\n    for j in range(3):\n        a = i\n        b = i + j - 1\n        if b < 0 or b == n:\n            continue\n        if l[a] > r[b]:\n            count += 1\nprint(count)", "def ck(p,q):\n    return 1 if bpos[p]>fpos[q] else 0\nn,k=map(int,input().split())\nx=list(map(int,input().split()))\nfpos=[-1 for i in range(100001)]\nbpos=[k+5 for i in range(100001)]\nfor i in range(k):\n    fpos[x[i]]=i\n    bpos[x[k-1-i]]=k-1-i\nans=ck(n,n)\nfor i in range(1,n):\n    ans+=ck(i,i)+ck(i,i+1)+ck(i+1,i)\nprint(ans)", "import math\nfrom decimal import Decimal\ndef na():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\treturn n,b\n \n \ndef nab():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\tc = [int(x) for x in input().split()]\n\treturn n,b,c\n \n \ndef dv():\n\tn, m = list(map(int, input().split()))\n\treturn n,m\n \n \ndef dva():\n\tn, m = list(map(int, input().split()))\n\ta = [int(x) for x in input().split()]\n\tb = [int(x) for x in input().split()]\n\treturn n,m,b\n \n \ndef eratosthenes(n): \n\tsieve = list(range(n + 1))\n\tfor i in sieve:\n\t\tif i > 1:\n\t\t\tfor j in range(i + i, len(sieve), i):\n\t\t\t\tsieve[j] = 0\n\treturn sorted(set(sieve))\n \n \n \ndef nm():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\tm = int(input())\n\tc = [int(x) for x in input().split()]\n\treturn n,b,m,c\n \n \ndef dvs():\n\tn = int(input())\n\tm = int(input())\n\treturn n, m\n \n \nn, m = list(map(int, input().split()))\naa = [int(x) for x in input().split()]\nl = {i: m for i in range(n)}\nr = {i: -1 for i in range(n)}\nfor i, a in enumerate(aa):\n\tl[a - 1] = min(i, l[a - 1])\n\tr[a - 1] = max(i, r[a - 1])\nans = 0\nfor i in range(n):\n\tfor j in range(3):\n\t\ta = i\n\t\tb = i + j - 1\n\t\tif b < 0 or b == n:\n\t\t\tcontinue\n\t\tif l[a] > r[b]:\n\t\t\tans += 1\nprint(ans)\n", "n, m = map(int, input().split(' '))\ns = list(map(int, input().split(' ')))\n\nl = {i: m for i in range(n)}\nr = {i: -1 for i in range(n)}\n\nfor i, a in enumerate(s):\n    l[a - 1] = min(i, l[a - 1])\n    r[a - 1] = max(i, r[a - 1])\n    \ncount = 0\nfor i in range(n):\n    for j in range(3):\n        a = i\n        b = i + j - 1\n        if b < 0 or b == n:\n            continue\n        if l[a] > r[b]:\n            count += 1\nprint(count)", "def solve():\n\tn,k = map(int,input().split())\n\tx = list(map(int,input().split()))\n\tfpos = [k for i in range(n+1)]\n\tlpos = [-1 for i in range(n+1)]\n\tfor i in range(1,k+1):\n\t\tlpos[x[i-1]] = i\n\tfor i in range(k,0,-1):\n\t\tfpos[x[i-1]] = i\n\tans = 0\n\tfor i in range(1,n+1):\n\t\tif lpos[i] == -1:\n\t\t\tans+=1\n\t# print(ans)\n\tfor i in range(1,n):\n\t\tif fpos[i] >= lpos[i+1]:\n\t\t\tans += 1\n\t\tif fpos[i+1] >= lpos[i]:\n\t\t\tans += 1\n\n\t\t# print(i,i+1,ans)\n\tprint(ans)\n\ndef __starting_point():\n\tsolve()\n__starting_point()", "N,cnt=[int(1e5+5000),int(0)]\nclass edg:\n\tpnt,nxt=[int(0),int(0)]\nfir=[0]*N\ned=[edg()]\nfor i in range(1,N):\n\ted.append(edg())\ndef link(u,v):\n\tnonlocal cnt\n\tcnt+=1\n\ted[cnt].nxt=fir[u]\n\tfir[u]=cnt\n\ted[cnt].pnt=v\n#\tprint(ed[1].pnt,ed[2].pnt,ed[3].pnt)\n#\tprint(cnt,ed[1].pnt,ed[1].nxt)\n#\tprint(ed[2].pnt)\n#print(ed[0].pnt)\nn,k=list(map(int,input().split(\" \")))\n#print(n,\" \",k)\nq=[0]+list(map(int,input().split(\" \")))\n#print(q[1])\n#link(1,1)\n#'''\nfor i in range(1,k+1):\n#\tu,v=[1,1]\n\tu,v=[q[i],i]\n\tlink(u,v)\n#\tprint(u,v)\n#'''\n#stay\n'''\nprint(q)\nu=5\ne=fir[u]\nprint(ed[2].pnt)\n'''\n'''\nprint(ed[2].pnt,ed[3].pnt)\ned[2].pnt=1\nprint(ed[2].pnt,ed[3].pnt)\n'''\nans=int(0)\nfor i in range(1,n+1):\n\tif(fir[i]==0):\n\t\tans+=1\n#left\nfor i in range(2,n+1):\n\tminx,maxx=[(1<<27),-(1<<27)]\n\tu=i\n\te=fir[u]\n\twhile(e!=0):\n\t\tminx=min(minx,ed[e].pnt)\n\t\te=ed[e].nxt\n\tu=i-1\n\te=fir[u]\n\twhile(e!=0):\n\t\tmaxx=max(maxx,ed[e].pnt)\n\t\te=ed[e].nxt\n\tif(minx>maxx):\n\t\tans+=1\n#\t\tprint(i,i-1)\n#right\nfor i in range(1,n):\n\tminx,maxx=[(1<<27),-(1<<27)]\n\tu=i\n\te=fir[u]\n\twhile(e!=0):\n\t\tminx=min(minx,ed[e].pnt)\n\t\te=ed[e].nxt\n\tu=i+1\n\te=fir[u]\n\twhile(e!=0):\n\t\tmaxx=max(maxx,ed[e].pnt)\n\t\te=ed[e].nxt\n\tif(minx>maxx):\n\t\tans+=1\n#\t\tprint(i,i+1)\n'''\n\tif(i==4):\n#\t\tprint(minx,maxx)\n\t\tu=i+1\n\t\te=fir[u]\n\t\twhile(e!=0):\n\t\t\tprint(ed[e].pnt)\n\t\t\te=ed[e].nxt\n'''\nprint(ans)\n\n", "n, k = map(int, input().split())\nx = [int(i) for i in input().split()]\n\nfirst = [int(k + 1) for _ in range(n + 1)]\nlast = [int(-1) for _ in range(n + 1)]\n\nfor i in range(k):\n    first[x[i]] = min(first[x[i]], i)\n    last[x[i]] = max(last[x[i]], i)\n\ncnt = 0\nfor i in range(1,n+1):\n    if last[i] == -1:\n        cnt += 1\n    if i+1 <= n:\n        if last[i] < first[i+1]:\n            cnt += 1\n        if last[i+1] < first[i]:\n            cnt += 1\n\nprint(cnt)", "n, k = list(map(int, input().split()))\nx = list(map(int, input().split()))\nfpos = [k for i in range(n + 1)]\nlpos = [-1 for i in range(n + 1)]\n\nfor i in range(1, k + 1):\n    lpos[x[i - 1]] = i\nfor i in range(k, 0, -1):\n    fpos[x[i - 1]] = i\n\nans = 0\nfor i in range(1, n + 1):\n    if lpos[i] == -1:\n        ans += 1\n\nfor i in range(1, n):\n    ans += (fpos[i] >= lpos[i + 1])\n    ans += (fpos[i + 1] >= lpos[i])\n\nprint(ans)\n", "n,k=map(int,input().split())\nx=list(map(int,input().split()))\nd={}\nfor i in range(k):\n    d[x[i]]=i\nans=0\nv=[0]*n\nfor i in range(k):\n    if v[x[i]-1]==0:\n        if x[i]!=1:\n            if d.get(x[i]-1)==None or d.get(x[i]-1)<i:\n                ans+=1\n        if x[i]!=n:\n            if d.get(x[i]+1)==None or d.get(x[i]+1)<i:\n                ans+=1\n        v[x[i]-1]=1\nans+=3*(n-len(d))\nif d.get(1)==None:\n    ans-=1\nif d.get(n)==None:\n    ans-=1\nprint(ans)", "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\n\ndef lose(i, j):\n    if i==j:\n        return i in s\n    else:\n        return (i in s) and (j in s) and (first[i]<last[j])\n\nn, k = map(int, input().split())\nx = list(map(int, input().split()))\nx = list(map(lambda x: x-1, x))\ns = set(x)\nfirst = defaultdict(int)\nlast = defaultdict(int)\n\nfor i in range(k):\n    if x[i] not in first:\n        first[x[i]] = i\n    \nfor i in range(k-1, -1, -1):\n    if x[i] not in last:\n        last[x[i]] = i\n\nans = 3*n-2\n\nfor i in range(n):\n    for j in range(max(i-1, 0), min(i+2, n)):\n        if lose(i, j):\n            ans -= 1\n\nprint(ans)", "from collections import defaultdict\nn,k=map(int,input().split())\nlis=list(map(int,input().split()))\nfirst={}\nlast=defaultdict(int)\nlength=len(lis)\nfor i in range(length):\n    if lis[i] not in first:\n        first[lis[i]]=i \n        \n    last[lis[i]]=i \ncount=0 \n\nfor i in range(1,n+1):\n    if i not in first :\n        if i==1 or i==n:\n            count+=2\n        else:\n            \n            count+=3 \n        continue\n        \n    if i-1>0 and first[i] >= last[i-1]:\n        count+=1 \n    if i+1<=n and first[i] >= last[i+1]:\n        count+=1 \nprint(count)", "n,k = map(int,input().split())\na = list(map(int,input().split()))\np = [-1]*(n+1)\ns = [-1]*(n+1)\nfor i in range(k):\n\tif p[a[i]]==-1:\n\t\tp[a[i]] = i\nfor i in range(k-1,-1,-1):\n\tif s[a[i]]==-1:\n\t\ts[a[i]] = i\ncount = 0\nfor i in range(1,n+1):\n\tif p[i]==-1:\n\t\tif i==1 or i==n:\n\t\t\tcount+=2\n\t\t\tcontinue\n\t\tcount += 3\n\telse:\n\t\tif i!=n and (s[i+1]==-1 or s[i+1]<p[i]):\n\t\t\tcount += 1\n\t\tif i!=1 and (s[i-1]==-1 or s[i-1]<p[i]):\n\t\t\tcount += 1\n\t# print (i,count)\nprint (count)", "# from debug import debug\nimport sys\n\n# t = int(input())\n# for _ in range(t):\n# n = inputt(input())\n# s = input()\nn, k = list(map(int, input().split()))\nlis = list(map(int, input().split()))\n\nv = [0]*(n+2)\np = [0]*(n+2)\nc = [0]*n\n# lis.reverse()\nfor i in lis:\n\ti-=1\n\tc[i] = 1\n\tif i+1<n and c[i+1] == 1:\n\t\tv[i+1] = 1\n\tif i-1>=0 and c[i-1] == 1:\n\t\tp[i-1] = 1\n\nx = 0\nfor i in lis:\n\ti-=1\n\tif c[i]:\n\t\tx += c[i]+v[i]+p[i]\n\telse:\n\t\tif i+1<n:\n\t\t\tx+=c[i+1]\n\t\tif i-1>=0:\n\t\t\tx+=c[i-1]\n# debug(v=v, p=p, c=c)\nx = 0\nfor i in range(0, n):\n\tx += c[i]+v[i+1]+p[i-1]\n# print(x)\nprint(3*n-2-x)\n\n\n", "import sys\n\ninput = lambda: sys.stdin.readline().strip(\"\\r\\n\")\n\nn, k = list(map(int, input().split()))\nx = list(map(int, input().split()))\nfirst = [k] * (n+1)\nlast = [-1] * (n+1)\n\nfor i in range(1, k+1):\n    last[x[i-1]] = i\nfor i in range(k, 0, -1):\n    first[x[i-1]] = i\n\nans = 0\n# print(first)\n# print(last)\nfor i in range(1, n+1):\n    if last[i] == -1:\n        ans += 1\n\nfor i in range(1, n):\n    if first[i] >= last[i+1]:\n        ans += 1\n    if first[i+1] >= last[i]:\n        ans += 1\nprint(ans)\n", "n, k = map(int, input().split())\nX = list(map(int, input().split()))\n\nfallen = set()\npairs = set()\n\nfor x in X:\n    if (x-1) in fallen:\n        #pairs.add([x-1, x])\n        pairs.add((x-1)*(n+1)+x)\n    if (x+1) in fallen:\n        #pairs.add([x+1, x])\n        pairs.add((x+1)*(n+1)+x)\n    fallen.add(x)\n\nprint( 2*(n-1)+n - len(pairs)-len(fallen) )", "from collections import defaultdict\nn,k=map(int,input().split())\nar=[int(x) for x in input().split()]\nfirst=[10000000000]*(n+1)\nlast=[-1]*(n+1)\n\nfor i in range(k):\n    first[ar[i]]=min(first[ar[i]],i)\n\nfor i in range(k-1,-1,-1):\n    last[ar[i]]=max(last[ar[i]],i)\n\nans=0\nfor i in range(1,n+1):\n    if(last[i]==-1):\n        ans+=1\n    if(i==n):\n        continue\n    if(last[i]<first[i+1]):\n        ans+=1\n    if(last[i+1]<first[i]):\n        ans+=1\nprint(ans)"]