["from collections import defaultdict\n\ndef main():\n    d = defaultdict(int)\n    d2 = defaultdict(int)\n\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    for i in range(N):\n        d[i + 1 + A[i]] += 1\n        d2[max(0, (i + 1) - A[i])] += 1\n\n    ans = 0\n\n    for k,v in d.items():\n        if k == 0:continue\n        ans += v * d2[k]\n\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    f,s = {},{}\n    for i in range(n):\n        if i+1-a[i] not in list(f.keys()):\n            f[i+1-a[i]] = 1\n        else:\n            f[i+1-a[i]]+=1\n        if i+1+a[i] not in list(s.keys()):\n            s[i+1+a[i]] = 1\n        else:\n            s[i+1+a[i]] += 1\n    ans = 0\n    for k in list(f.keys()):\n        if k in list(s.keys()):\n            ans += f[k] * s[k]\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import collections\nn = int(input())\na = list(map(int,input().split()))\nans = 0\ncnt = collections.defaultdict(int)\nfor i in range(n):\n  ans += cnt[i-a[i]]\n  cnt[i+a[i]]+=1\nprint(ans)", "import itertools\nfrom collections import deque,defaultdict,Counter\nfrom itertools import accumulate\nimport bisect\nfrom heapq import heappop,heappush,heapify\nimport math\nfrom copy import deepcopy\nimport queue\n#import numpy as np\n# sympy as syp(\u7d20\u56e0\u6570\u5206\u89e3\u3068\u304b)\nMod = 1000000007\nfact = [1, 1]\nfactinv = [1, 1]\ninv = [0, 1] \nfor i in range(2, 10**5 + 1):\n    fact.append((fact[-1] * i) % Mod)\n    inv.append((-inv[Mod % i] * (Mod // i)) % Mod)\n    factinv.append((factinv[-1] * inv[-1]) % Mod)\n    \ndef cmb(n, r, p):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n - r] % p\n    \ndef sieve_of_eratosthenes(n):\n    if not isinstance(n,int):\n        raise TypeError(\"n is not int\")\n    if n<2:\n        raise ValueError(\"n is not effective\")\n    prime = [1]*(n+1)\n    for i in range(2,int(math.sqrt(n))+1):\n        if prime[i] == 1:\n            for j in range(2*i,n+1):\n                if j%i == 0:\n                    prime[j] = 0\n    res = []\n    for i in range(2,n+1):\n        if prime[i] == 1:\n            res.append(i)\n    return res\n\n \nclass UnionFind:\n    def __init__(self,n):\n        self.parent = [i for i in range(n+1)]\n        self.rank = [0 for i in range(n+1)]\n    \n    def findroot(self,x):\n        if x == self.parent[x]:\n            return x\n        else:\n            y = self.parent[x]\n            y = self.findroot(self.parent[x])\n            return y\n    \n    def union(self,x,y):\n        px = self.findroot(x)\n        py = self.findroot(y)\n        if px < py:\n            self.parent[y] = px\n        else:\n            self.parent[px] = py\n \n    def same_group_or_no(self,x,y):\n        return self.findroot(x) == self.findroot(y)\ndef pow_k(x, n):\n\n    if n == 0:\n        return 1\n\n    K = 1\n    while n > 1:\n        if n % 2 != 0:\n            K *= x\n        x *= x\n        n //= 2\n\n    return K * x\ndef main():  #startline-------------------------------------------\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    ans = 0\n    for i in range(n):\n        l = i - a[i]\n        ans += d[l]\n        d[a[i] + i] += 1\n        \n    print(ans)\ndef __starting_point():\n    main() #endline===============================================\n__starting_point()", "from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\nAP = [0]*N\nAM = [0]*N\n\nfor i in range(N):\n    AP[i]=i+A[i]\n    AM[i]=i-A[i]\n\ncnt=0\nQC = Counter(AP)\nfor m in AM:\n    cnt += QC[m]\n\nprint(cnt)", "n=int(input())\ny=list(map(int,input().split()))\nfrom collections import Counter\nlhs=Counter([j+y[j] for j in range(n)])\nrhs=Counter([j-y[j] for j in range(n)])\ncount=0\nfor i in lhs:\n   if i in rhs:\n      count+=lhs[i]*rhs[i]\n\nprint(count)\n", "import collections\nn = int(input())\na = [0] + list(map(int,input().split()))\n\na_pos = [a[i]+i for i in range(1,n+1)]\na_neg = [-a[i]+i for i in range(1,n+1)]\n#print(a_pos)\n#print(a_neg)\n\nc_pos = collections.Counter(a_pos)\nc_neg = collections.Counter(a_neg)\n#print(c_pos)\n#print(c_neg)\n\nans = 0\nfor c in c_pos:\n    ans += c_pos[c] * c_neg[c]\n\nprint(ans)", "N = int(input())\nA = [(int(x), i+1) for i, x in enumerate(input().split())]\n\ndef test(N, A):\n    answer = 0\n    for a0, i0 in A:\n        for a1, i1 in A:\n            if a1 + a0 == abs(i1 - i0):\n                answer += 1\n    return answer // 2\n\ndef solve(N, A):\n    memo0 = {}\n    memo1 = {}\n    for a, n in A:\n        k = - (a+n)\n        if k not in memo0:\n            memo0[k] = 0\n        memo0[k]+=1\n        k = n-a\n        if k not in memo1:\n            memo1[k] = 0\n        memo1[k]+=1\n    #print(f\"{memo0=}\")\n    #print(f\"{memo1=}\")\n    answer = 0\n    for a, n in A:\n        k = a - n\n        if k in memo0:\n            answer += memo0[k]\n        k = a + n\n        if k in memo1:\n            answer += memo1[k]\n\n    return answer // 2\n\n#print(test(N, A))\nprint((solve(N, A)))\n\n\n", "n = int(input())\na = list(map(int, input().split()))\n\nb = [0 for i in range(n)]\n\ncnt = 0\nfor i in range(n):\n    if i - a[i] >= 0:\n        cnt += b[i - a[i]]\n    if i + a[i] < n:\n        b[i + a[i]] += 1\nprint(cnt)", "import collections\n_,A=open(0);P,Q=map(collections.Counter,zip(*[[i-a,i+a]for i,a in enumerate(map(int,A.split()))]));print(sum(P[i]*Q[i]for i in range(6**7)))", "from sys import stdin,stdout\n# n,e=list(map(int,stdin.readline().split()))\nn=int(stdin.readline())\na=list(map(int,stdin.readline().split()))\nd={};ans=0\nfor i in range(n):\n    d[a[i]+i]=d.get(a[i]+i,0)+1\nfor i in range(n):\n    ans+=d.get(i-a[i],0)\nprint(ans)", "import collections\nimport bisect\nn = int(input())\ncnt = collections.defaultdict(list)\ndat = list(map(int, input().split()))\nbuf = []\nfor i in range(n):\n    cnt[i - dat[i]].append(i)\n#print(buf)\nres = 0\nfor i in range(n):\n    x = i + dat[i]\n    if x in cnt:\n        res += len(cnt[x]) - bisect.bisect_left(cnt[x], x)\nprint(res)\n\n", "# -*- coding: utf-8 -*-\n\n\ndef main():\n    from collections import defaultdict\n    import sys\n    input = sys.stdin.readline\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    ans = 0\n\n    for i in range(n):\n        diff = i - a[i]\n        ans += d[diff]\n\n        summed = i + a[i]\n        d[summed] += 1\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import collections\nN = int(input())\nA = list(map(int, input().split()))\n\n#i + Ai\nplus = [0] * N\n#i - Ai\nminus = [0] * N\n\nfor i in range(N):\n  plus[i] = i + 1 + A[i]\n  minus[i] = i + 1 - A[i]\n  \n#print(plus, minus)  \nplus = dict(collections.Counter(plus))\nminus = dict(collections.Counter(minus))\n\n#print(plus)\n#print(minus)\n\nans = 0\nfor i in list(plus.keys()):\n  #print(i)\n  if i in minus:\n    #print(i)\n    ans += plus[i] * minus[i]\n    #print(ans)\n\nprint(ans)\n", "N = int(input())\nA = [int(x) for x in input().split()]\n\ncounter = {}\n\nfor i in range(N):\n    counter[i + A[i]] = 0\n\nans = 0\nfor i in range(N):\n    if i - A[i] in counter:\n        ans += counter[i - A[i]]\n    counter[i + A[i]] += 1\n\nprint(ans)", "import collections\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A1 = []; A2 = []\n    for i, a in enumerate(A):\n        A1.append(i+1+a)\n        A2.append(i+1-a)\n    A1count = list(collections.Counter(A1).items())\n    A2count = collections.Counter(A2)\n    ans = 0\n    for a, cnt in A1count:\n        ans += A2count[a]*cnt\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\n\nL = [a+i for a, i in enumerate(A, 1)]\nR = [a-i for a, i in enumerate(A, 1)]\n\nans = 0\nR_c = Counter(R)\nfor l in L:\n    ans += R_c[l]\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\nN = int(input().strip())\nA_list = list(map(int, input().rstrip().split()))\n#-----\n\nplus_h = {}\nminus_h = {}\n\nfor i in range(N):\n    p = (i+1) + A_list[i]\n    m = (i+1) - A_list[i]\n    \n    plus_h.setdefault(p, 0)\n    plus_h[p] += 1\n    \n    minus_h.setdefault(m, 0)\n    minus_h[m] += 1\n\n\ncnt = 0\n\nfor k in plus_h:\n    if k in minus_h:\n        cnt += (plus_h[k] * minus_h[k])\n\n\nprint(cnt)\n", "from collections import defaultdict\nN = int(input())\nA = list(map(int,input().split()))\nL = defaultdict(int)\nans = 0\nfor i in range(N):\n  L[i+1 - A[i]]+=1\nfor i in range(N):\n  ans+=L[i+1+A[i]]\nprint(ans)\n\n", "#!/usr/bin/env python3\nimport collections\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\n# 2\u4eba\u306e\u6301\u3064\u756a\u53f7\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u30012\u4eba\u306e\u8eab\u9577\u306e\u548c\u306b\u7b49\u3057\u3044\u3002\n# j - i = Ai + Aj\n# j - Aj = Ai + i\nl = [j - aj for j, aj in enumerate(a, 1)]\nr = [i + ai for i, ai in enumerate(a, 1)]\ncnt = collections.Counter(r)\nans = 0\nfor i in l:\n    ans += cnt[i]\nprint(ans)\n", "from collections import Counter\n\nn=int(input())\na=list(map(int,input().split()))\n\nl1=[i+a[i] for i in range(n)]\nl2=[i-a[i] for i in range(n)]\n\nc2=Counter(l2)\n\nans=0\nfor i in l1:\n  ans+=c2[i]\n\nprint(ans)", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\nL = [a+i for i, a in enumerate(A)]\nR = [j-a for j, a in enumerate(A)]\n\nL, R = Counter(L), Counter(R)\n\nans = 0\n\nfor k in L.keys():\n    ans += L[k] * R[k]\n\nprint(ans)", "from collections import defaultdict\n\nN = int(input())\n*A,=map(int,input().split())\n\n'''\n\u65b9\u91dd:\n- \u5404A_i,(i<h)\u3054\u3068\u306bf(h,j)=A_h+A_j-|h-j|\u306e\u5024\u304cf(i,j)\u306b\u6bd4\u3079\u3066\u3069\u308c\u3060\u3051\u5909\u5316\u3059\u308b\u304b\u3092\u8a08\u7b97\u3057\u3001\n\u30ea\u30b9\u30c8\u306b\u683c\u7d0d(\u2460)\n- \u5404\u8981\u7d20A_k,(j<k)\u3054\u3068\u306bf(i,k)=A_i+A_k-|i-k|\u306e\u5024\u304cf(i,j)\u306b\u6bd4\u3079\u3066\u3069\u308c\u3060\u3051\u5909\u5316\u3059\u308b\u304b\u3092\n\u8a08\u7b97\u3057\u3001\u30ab\u30a6\u30f3\u30c8\u3092\u3068\u308b(\u2461)\n- \u518d\u5ea6\u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u2460\u3068\u2461\u3092\u7167\u5408\u3057\u3001\u5024\u304c\u4e00\u81f4\u3059\u308b\u7d44\u6570\u3092ans\u306b\u52a0\u7b97\n'''\n\nans=0\ndiff_list=[] #\u2460\u7167\u5408\u7528\u306e\u5dee\u5206\u30ea\u30b9\u30c8\ncount=defaultdict(int) #\u2461\u5404\u8981\u7d20\u304c\u3069\u308c\u3060\u3051\u306f\u307f\u51fa\u3066\u3044\u308b\u304b\u306e\u30ab\u30a6\u30f3\u30c8\n#\u524d\u51e6\u7406\u3068\u3057\u3066\u3001\u6700\u521d\u306e\u30eb\u30fc\u30d7\u3067\u2460\u3068\u2461\u3092\u4f5c\u6210\nfor i in range(1,N):\n  if i == A[0]+A[i]:\n    ans += 1\n  d1 = A[i]-A[0]\n  d2 = i\n  diff_list.append(d1+d2)\n  \n  count[A[0]+A[i]-i] += 1\n\nfor i in range(N-1):\n  count[A[0]+A[i+1]-(i+1)] -= 1 #\u305d\u306e\u8981\u7d20\u81ea\u8eab\u3092\u5fd8\u308c\u305a\u306b\u5f15\u304f\n  d = diff_list[i]\n  ans += count[-d]\n  \nprint(ans)", "from collections import Counter\nn=int(input())\nx=list(map(int,input().split()))\na=[]\nb=[]\nfor i in range(n):\n    a.append(x[i]+i+1)\n    b.append((i+1)-x[i])\na,b=Counter(a),Counter(b)\nans=0\nfor i in range(n):\n    ans+=a[i]*b[i]\nprint(ans)", "import sys\nfrom bisect import bisect_right, bisect_left\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    A_i, A_j = [], []\n    for i in range(n):\n        A_i.append(-A[i] - (i + 1))\n\n    for j in range(n):\n        A_j.append(A[j] - (j + 1))\n\n    A_j.sort()\n\n    res = 0\n    for a in A_i:\n        idx_1 = bisect_left(A_j, a)\n        idx_2 = bisect_right(A_j, a)\n        res += idx_2 - idx_1\n    print(res)\n    \n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "from collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\ndAl = defaultdict(int)\ndAr = defaultdict(int)\nfor i in range(N):\n    L = (i + 1) + A[i]\n    R = (i + 1) - A[i]\n    dAl[L] += 1\n    dAr[R] += 1\n\n# dict\u306e\u4e2d\u3092\u898b\u308b\nans = 0\nfor k, v in dAl.items():\n    ans += v * dAr[k]\nprint(ans)", "def resolve():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    mp = dict()\n    ans = 0\n    for i in range(N):\n        x = i - A[i]\n        ans += mp.get(x, 0)\n        y = A[i] + i\n        mp[y] = mp.get(y, 0) + 1\n    print(ans)\n\ndef __starting_point():\n    resolve()\n__starting_point()", "N = int(input())\nAlist = list(map(int,input().split()))\nAplu = []\nAmin = dict()\nfor i in range(N):\n    A = Alist[i]\n    Aplu.append(A+(i+1))\n    if (i+1)-A not in Amin:\n        Amin[(i+1)-A] = 1\n    else:\n        Amin[(i+1)-A] += 1\nAnswer = 0\nfor k in Aplu:\n    if k in Amin:\n        Answer += Amin[k]\nprint(Answer)", "from collections import defaultdict\nn=int(input())\na=list(map(int,input().split()))\n\nd=defaultdict(int)\nsm=0\nfor i in range(n):\n  d[i+a[i]]+=1\n  sm+=d[i-a[i]]\nprint(sm)\n", "n = int(input())\na = list(map(int, input().split()))\nnum = dict()\nans = 0\n\nfor i in range(n):\n    num[i+a[i]] = 0\n    \nfor i in range(n):\n    num[i+a[i]] += 1\n    \nfor i in range(n):\n    if i-a[i] in num:\n        ans += num[i-a[i]]\n        \nprint(ans)\n    \n", "def getInts():\n    return [ int(x) for x in input().split() ]\n\n[N] = getInts()\nAs = getInts()\nA = {}\nfor i in range(1, N+1):\n    A[i] = As[i-1]\n\nL = {}\nR = {}\nfor i in range(1, N+1):\n    if i - A[i] not in L:\n        L[i-A[i]] = 1\n    else:\n        L[i-A[i]] += 1\n    if i + A[i] not in R:\n        R[i+A[i]] = 1\n    else:\n        R[i+A[i]] += 1\ncount = 0\nfor k in list(R.keys()):\n    if k in L:\n        count += R[k]*L[k]\nprint(count)\n", "from collections import defaultdict\nN = int(input())\nA = list(map(int,input().split()))\nconstS = defaultdict(int)\nconstD = defaultdict(int)\nfor i in range(N):\n    Ss = i + A[i]\n    Dd = i - A[i]\n    constS[Ss] += 1\n    constD[Dd] += 1\nans = 0\nfor key,val in constS.items():\n    ans += val * constD[key]\nprint(ans)", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\np = [i+Ai for i, Ai in zip(range(1, N+1), A)]\nq = [j-Aj for j, Aj in zip(range(1, N+1), A)]\n\npc = Counter(p)\nqc = Counter(q)\n\nr = sum(pc[k]*qc[k] for k in pc.keys() & qc.keys())\n\nprint(r)", "N = int(input())\nA = list(map(int, input().split()))\nA = [0] + A\nSam = []\nDif = []\nD2= [0]*200000\n\nfor i in range(len(A)):\n    Sam.append(i + A[i])\n    if i - A[i] > 0:\n        Dif.append(i - A[i])\n\nfor dif in Dif:\n    D2[dif] += 1\n\ncount = 0\nfor sam in Sam:\n    if sam < len(D2):\n        count += D2[sam]\n\nprint(count)", "from collections import Counter\nn = int(input())\nA = list(map(int, input().split()))\n\nP = [i+a+1 for i,a in enumerate(A)]\nQ = [j-a+1 for j,a in enumerate(A)]\n\ncQ = Counter(Q)\nans = 0\nfor p in P:\n    ans += cQ[p]\nprint(ans)", "from collections import Counter\n\nn=int(input())\na=list(map(int,input().split()))\n\nl1=[i+a[i] for i in range(n)]\nl2=[i-a[i] for i in range(n)]\n\nc1=Counter(l1)\nc2=Counter(l2)\n\nans=0\nfor i in c1:\n  ans+=c1[i]*c2[i]\n\nprint(ans)", "import sys,collections\ninput = sys.stdin.readline\nN=int(input())\nA=list(map(int,input().split()))\nB = []\nC = []\nfor i,a in enumerate(A):\n    B.append(i+a)\n    C.append(i-a)\ncnt = 0\nBc = collections.Counter(B)\nCc = collections.Counter(C)\n\nfor key,val in list(Bc.items()):\n    cnt += val*Cc[key]\nprint(cnt)\n", "from collections import Counter\n\nn = int(input())\nA = list(map(int, input().split()))\n\nA_pos = [A[x]+x for x in range(n)]\nA_neg = [-A[x]+x for x in range(n)]\n\nC_pos = Counter(A_pos)\nC_neg = Counter(A_neg)\n\nans = 0\n\nfor c in C_pos:\n    ans += C_pos[c] * C_neg[c]\nprint(ans)", "from collections import defaultdict\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(lambda: 0)\n    ans = 0\n    for i, ai in enumerate(a, 1):\n        d[str(i+ai)] += 1\n        ans += d[str(i-ai)]\n    print(ans)\n        \n\ndef __starting_point():\n    main()\n__starting_point()", "# import itertools\n# import math\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n\nN = int(input())\n# S = input()\n# n, *a = map(int, open(0))\n# N, M = map(int, input().split())\nA = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\nA.insert(0, 0)\ncnt = [0] * (N + 1)\nans = 0\nfor i in range(1, N + 1):\n    if i - A[i] >= 0:\n        ans += cnt[i - A[i]]\n    if i + A[i] <= N:\n        cnt[i + A[i]] += 1\nprint(ans)", "from collections import defaultdict\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    ans = 0\n    for i, ai in enumerate(a, 1):\n        num = str(ai+i)\n        d[num] += 1\n        ans += d[str(i-ai)]\n    print(ans)\n        \n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import Counter\nN = int(input())\nA = list(map(int,input().split()))\nB = Counter(list(i+1+A[i] for i in range(N)))\n#print(B,B[3])\nC = Counter((i+1-A[i] for i in range(N)))\nans = 0\n#print(C)\nfor j in range(N):\n    ans += B[j]*C[j]\nprint(ans)", "from collections import Counter\ndef main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    L = Counter([i + a for i, a in enumerate(A)])\n    R = Counter([i - a for i, a in enumerate(A)])\n    ans = 0\n    for key in list(R.keys()):\n        ans += L[key] * R[key]\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\n\np = [0] * N\nm = [0] * N\n\nfor i in range(N):\n    p[i] = A[i] + i + 1\n    m[i] = i + 1 - A[i]\n\nfrom collections import Counter\n\ncp = Counter(p)\ncm = Counter(m)\n\nans = 0\n\nfor x, y in cp.items():\n    ans += cm[x] * y\n\nprint(ans)", "N = int(input())\nL = list(map(int, input().split()))\nimport copy\nU = copy.copy(L)\nfor i in range (0, N):\n\tL[i]+=(i+1)\n\tU[i]= -U[i]+(i+1)\n\n\nL = sorted(L)\nU = sorted(U)\n\nimport bisect\n\ncount = 0\nfor i in range (0, N):\n\tcount+= bisect.bisect_right(U, L[i])-bisect.bisect_left(U, L[i])\n    \nprint(count)", "n=int(input())\na=[int(x) for x in input().split()]\n\ndic1={}\ndic2={}\nfor i in range(n):\n  if i+1+a[i] not in dic1:\n    dic1[i+1+a[i]]=1\n  else:\n    dic1[i+1+a[i]]+=1\n\nfor i in range(n):\n  if i+1-a[i] not in dic2:\n    dic2[i+1-a[i]]=1\n  else:\n    dic2[i+1-a[i]]+=1\n\nans=0\n\nfor i in dic1:\n  if i not in dic2:\n    continue\n\n  ans+=dic1[i]*dic2[i]\nprint(ans)", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\nMOD = 10**9 + 7\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nimport bisect\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    N = i_input()\n    A = i_list()\n\n    L = [i+k for i,k in enumerate(A)]\n    R = [i-k for i,k in enumerate(A)]\n\n    countR = Counter(R)\n    ans = 0\n    for l in L:\n        ans += countR[l]\n    print(ans)\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import sys\nfrom collections import Counter\n\nN = int(input())\nA = list(map(int, sys.stdin.readline().rsplit()))\n\nP = [i + a for i, a in enumerate(A, start=1)]\nQ = [j - a for j, a in enumerate(A, start=1)]\n\nres = 0\nC = Counter(Q)\nfor p in P:\n    res += C[p]\n\nprint(res)\n", "from collections import defaultdict\n\nN = int(input())\nA = [int(_) for _ in input().split()]\n\nF = defaultdict(int)\nB = defaultdict(int)\n\nfor i, v in enumerate(A):\n    F[i+v] += 1\n    B[i-v] += 1\n\nans = 0\nfor i in F:\n    ans += F[i] * B[i]\nprint(ans)\n", "from collections import Counter\nn = int(input())\nA = list(map(int, input().split()))\nma = max(A) + n -1 \nP = [i+a+1 for i,a in enumerate(A) if i+a+1 <= ma]\nQ = [j-a+1 for j,a in enumerate(A) if j-a+1 > 0]\n \ncQ = Counter(Q)\ncP = Counter(P)\nans = 0\nfor p in cP.keys():\n    ans += cQ[p]*cP[p]\nprint(ans)", "from sys import stdin\nimport sys\nimport math\nfrom functools import reduce\nimport functools\nimport itertools\nfrom collections import deque,Counter\nfrom operator import mul\nimport copy\n# ! /usr/bin/env python\n# -*- coding: utf-8 -*-\nimport heapq\n\nn = int(input())\na = list(map(int, input().split()))\n\np = [i-a[i] for i in range(n)]\nq = [a[i]+i for i in range(n)]\n\npp = Counter(p)\nqq = Counter(q)\n\nans = 0\nfor d in list(pp.items()):\n    ans += d[1] * qq[d[0]]\n\nprint(ans)\n\n\n\n\n\n\n", "from collections import defaultdict\n\nn = int(input())\nA = list(map(int, input().split()))\ndic = defaultdict(int)\n\nans = 0\n#j-i = Ai+A\u3000\u21c4\u3000j-A[j] = A[i]+i\nfor i in range(n):\n    Sum = A[i] + i\n    dic[Sum] += 1\n    Dif = i - A[i]\n    ans += dic[Dif]\nprint(ans)\n", "from collections import defaultdict\nb = defaultdict(int)\nc = defaultdict(int)\nn = int(input())\na = map(int, input().split())\n\nfor idx,i in enumerate(a, start=1):\n  b[i - idx] += 1\n  c[i + idx] += 1\nans = 0\nfor k,v in b.items():\n  ans += (v * c[-1 * k])\nprint(ans)", "#import numpy as np\n#import math\n#from decimal import *\n#from numba import njit\nfrom collections import Counter\n\n#@njit\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = 0\n    r = []\n    l = []\n    for i in range(N):\n        r += i - A[i],\n        l += i + A[i],\n\n    c = Counter(l)\n    for i in r:\n        count += c[i]\n\n    print(count)\nmain()\n", "n = int(input())\na = list(map(int,input().split()))\nans = 0\nd = {}\nfor i in range(n):\n  if d.get(i+a[i],0)==0:\n    d[i+a[i]] = [0,0]\n  if d.get(i-a[i],0)==0:\n    d[i-a[i]] = [0,0]\n  d[i+a[i]][0] += 1\n  d[i-a[i]][1] += 1\nfor v in d.values():\n  ans += v[0]*v[1]\nprint(ans)", "# -*- coding: utf-8 -*-\n\n\ndef main():\n    from collections import defaultdict\n    import sys\n    input = sys.stdin.readline\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    ans = 0\n\n    # KeyInsight:\n    # j - i = Ai + Aj (j > i)\u3001\u6761\u4ef6\u3064\u304d\u3067\u7d76\u5bfe\u5024\u306e\u8a18\u53f7\u3092\u5916\u3059\n    # \u25b2: \u8a08\u7b97\u91cf\u3092\u843d\u3068\u3059: \u7247\u65b9\u3092\u56fa\u5b9a\u3057\u3066\u3001\u8003\u3048\u3089\u308c\u306a\u3044\u304b?\n    # \u5de6\u8fba\u30fb\u53f3\u8fba\u3092\u72ec\u7acb\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u306a\u3044\u304b?\n    # See:\n    # https://www.youtube.com/watch?v=OCRLlMa7kL0&feature=youtu.be\n    for i in range(n):\n        # j\u307e\u3067\u306bi\u304c\u3069\u308c\u3060\u3051\u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u308b\n        # Ai + i = j - Aj\n        # j\u306e\u8a08\u7b97\u306b\u76f8\u5f53\n        diff = i - a[i]\n        ans += d[diff]\n\n        # i\u306e\u8a08\u7b97\u306b\u76f8\u5f53\n        summed = i + a[i]\n        d[summed] += 1\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\nnum = dict()\nans = 0\n\nfor i in range(n):\n    num[i+a[i]] = 0\n\nfor i in range(n):\n    if i-a[i] in num:\n        ans += num[i-a[i]]\n    num[i+a[i]] += 1\nprint(ans)\n    \n", "import collections\nN=int(input())\nA=list(map(int,input().split()))\n\ns=0\nd=collections.defaultdict(int)\nfor i in range(N):\n  d[i+A[i]]+=1\nfor i in range(N):\n  s+=d[i-A[i]]\nprint(s)", "N = int(input())\nA = list(map(int, input().split()))\nans = 0\nB = []\nC = []\nmaA = max(A) + N -1\nfor k in range(N):\n  if A[k] + k <= maA:\n    B.append(A[k]+k)\n  if -A[k] + k >0:\n    C.append(-A[k]+k)\nB.sort()\nC.sort()\n\nc = 0\nb = 0\nwhile b < len(B) and c < len(C):\n  if B[b] == C[c]:\n    s = 0\n    t = 0\n    j = float('inf')\n    k = float('inf')\n    for j in range(b, len(B)):\n      if B[b] == B[j]:\n        s += 1\n      else:\n        break\n    for k in range(c, len(C)):\n      if C[c] == C[k]:\n        t +=1\n      else:\n        break\n    ans += s*t\n    b = j\n    c = k\n    continue\n  elif B[b] > C[c]:\n    c += 1\n  else:\n    b += 1\n#print(B)\n#print(C)\nprint(ans)", "from collections import Counter\n\ndef main():\n    n=int(input())\n    lst=list(map(int,input().split()))\n    lst1=Counter([i+x for i,x in enumerate(lst)])\n    lst2=Counter([i-x for i,x in enumerate(lst)])\n    sm=0\n    for x in lst1:\n        if x in lst2:\n            sm+=lst1[x]*lst2[x]\n    print(sm)\n\nmain()", "import numpy as np\nfrom collections import Counter\nn = int(input())\na = np.array(list(map(int, input().split())))\nni = np.array([i for i in range(n)])\n\nap = a + ni\nan = (a - ni) * -1\n\ncp = Counter(ap)\ncn = Counter(an)\n\nans = 0\nfor i in cp.keys():\n  ans += cp[i] * cn[i] \n\nprint(ans)", "from collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\nd = defaultdict(int)\nfor i, a in enumerate(A):\n    d[i + a] += 1\nans = 0\nfor j, a in enumerate(A):\n    ans += d[j - a]\nprint(ans)", "from collections import Counter\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nc=[]\nans=0\nfor i,j in enumerate(a):\n    b.append(i+j)\n    c.append(i-j)\nd=Counter(c)\nfor i in b:\n    ans+=d.get(i,0)\n\nprint(ans)", "from collections import defaultdict\nimport numpy as np\nimport collections\n\nN = int(input())\nAs = list(map(int, input().split()))\n\nB = defaultdict(int)\n\nans = 0\n\nfor index, A in enumerate(As):\n    ans += B[index-A]\n    \n    B[index+A] += 1\n#    print(B)\n#    print(list(B[:20]))\n\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split()))\nl = [i+a[i] for i in range(n)]\nr = [i-a[i] for i in range(n)]\nlc = {}\nrc = {}\nfor i in range(n):\n    lc[l[i]] = 0\n    lc[r[i]] = 0\n    rc[r[i]] = 0\n    rc[l[i]] = 0\nfor i in range(n):\n    lc[l[i]] += 1\n    rc[r[i]] += 1\nans = 0\nfor i in set(lc.keys()):\n    ans += rc[i]*lc[i]\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\n\nipa = {}\nima = {}\nfor i in range(n):\n    p = i + a[i]\n    if p in ipa:\n        ipa[p] += 1\n    else:\n        ipa[p] = 1\n    m = i - a[i]\n    if m in ima:\n        ima[m] += 1\n    else:\n        ima[m] = 1\n\nans = 0\nfor k in ipa:\n    if k in ima:\n        ans += ipa[k] * ima[k]\nprint(ans)", "# \u53c2\u8003 : https://atcoder.jp/contests/abc166/submissions/16829140\nn = int(input())\na = list(map(int,input().split()))\n# \u53c2\u52a0\u8005 i,j \u304c\u53d6\u5f15\u3059\u308b\u5834\u5408\u3001 j - i = A_i + A_j \u304c\u6210\u308a\u7acb\u3064\u3002\n# \u5909\u5f62\u3059\u308b\u3068 -i - A_i = -j + A_j, i + A_i = j - A_j \u306b\u306a\u308b\u3002\n# l = i + A_i, r = j - A_j\nl = [i + a[i] for i in range(n)]\nr = [i - a[i] for i in range(n)]\n# \u9023\u60f3\u914d\u5217(\u8f9e\u66f8)\u3092\u4f7f\u3046\u3002\nx = {}\ny = {}\n# \u8f9e\u66f8\u306b\u30ad\u30fc\u3092\u8ffd\u52a0\u3059\u308b\u3002\nfor i in range(n):\n    x[l[i]] = 0\n    y[l[i]] = 0\n    y[r[i]] = 0\n# \u30ad\u30fc\u306e\u5024\u3092\u4eba\u6570\u5206\u5897\u3084\u3059\u3002\nfor i in range(n):\n    x[l[i]] += 1\n    y[r[i]] += 1\nans = 0\n# x \u306e\u30ad\u30fc\u3067\u53d6\u5f15\u3059\u308b\u4eba\u6570\u3092\u8abf\u3079\u308b\u3002\nfor i in set(x.keys()):\n    ans += x[i] * y[i]\nprint(ans)", "from collections import Counter\nn = int(input())\nx = list(map(int, input().split()))\na = []\nb = []\nfor i in range(n):\n    a.append(i+1+x[i])\n    b.append(i+1-x[i])\nans = 0\na, b = Counter(a), Counter(b)\nfor i in range(min(a), max(b)+1):\n    ans += a[i]*b[i]\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\n\ndic = dict()\nfor i, j in enumerate(a, start=1):\n    if dic.get(i-j):\n        dic[i-j] += 1\n    else:\n        dic[i-j] = 1\n\nans = 0\nfor i, j in enumerate(a, start=1):\n    if dic.get(i+j):\n        ans += dic[i+j]\n\nprint(ans)", "import collections\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# ap+aq == p-q (p>q)\n# p-ap = q+aq\n\nmp = {}\nans = 0\nfor p in range(N):\n    if p-A[p]+1 in mp:\n        ans += mp[p-A[p]+1]\n    if p+A[p]+1 in mp:\n        mp[p+A[p]+1] += 1\n    else:\n        mp[p + A[p] + 1] = 1\n\nprint(ans)\n\n\n", "from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\nB = [a+i for i, a in enumerate(A)]\nC = [j-a for j, a in enumerate(A)]\nB, C = Counter(B), Counter(C)\nans = 0\nfor k in B.keys():\n    ans += B[k]*C[k]\nprint(ans)", "from collections import defaultdict\n\nN = int(input())\nA = list(map(int, input().split()))\n\nd = defaultdict(int)\n\nfor i, a in enumerate(A):\n    d[i+a] += 1\n\nans = 0\nfor j, a in enumerate(A):\n    ans += d[j-a]\n\nprint(ans)\n", "n=int(input())\na=list(map(int,input().split()))\nb=[]\nc=0\nfor i in range(n*2):\n    b.append(0)\nfor i in range(n):\n    if(i+a[i]<=n):\n        b[i+a[i]]+=1\n    if(i>=a[i]):\n        c+=b[i-a[i]]\n\nprint(c)", "from collections import defaultdict\n\nn = int(input())\na = list(map(int, input().split()))\ncounter = defaultdict(int)\n\nans = 0\nfor i, v in enumerate(a):\n    ans += counter[i - v]\n    counter[i + v] += 1\n\nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))\n# i<j\u3068\u3057\u3066\u3001\u6761\u4ef6\u306f j-i = A_i + A_j\n# i + A_i = j - A_j\n\ndict1 = {}\nfor i in range(1, N + 1):\n    tmp = i + A[i - 1]\n    if tmp not in dict1:\n        dict1[tmp] = 1\n    else:\n        dict1[tmp] += 1\n\ndict2 = {}\nfor i in range(1, N + 1):\n    tmp = i - A[i - 1]\n    if tmp not in dict2:\n        dict2[tmp] = 1\n    else:\n        dict2[tmp] += 1\n\n# print(dict1, dict2)\nans = 0\nfor k, v in list(dict1.items()):\n    if k in dict2:\n        ans += v * dict2[k]\nprint(ans)\n", "N = int(input())\nL = [0] * (404040)\nA = list(map(int, input().split()))\nans = 0\nfor i, a in enumerate(A):\n    ia = i - a\n    if ia >= 0:\n        ans += L[ia]\n    ai = a + i\n    if ai < 404040:\n        L[ai] += 1\nprint(ans)\n", "N = int(input())\nA = list(map(int, input().split()))\nL = {}\nR = {}\nans = 0\nfor i in range(N):\n  t = i + 1 + A[i]\n  if t in L:\n    L[t] += 1\n  else:\n    L[t] = 1\n  t = i + 1 - A[i]\n  if t > 0:\n    if t in R:\n      R[t] += 1\n    else:\n      R[t] = 1\nfor i in R:\n  if i in L:\n    ans += R[i] * L[i]\nprint(ans)", "n = int(input())\nh_list = list(map(int,input().split()))\n\na_dict = dict()\nb_dict = dict()\n\nfor i in range(n):\n    a = h_list[i]+i\n    b = i-h_list[i]\n    if not a in a_dict:\n        a_dict[a] = 1\n    else:\n        a_dict[a] += 1\n    if not b in b_dict:\n        b_dict[b] = 1\n    else:\n        b_dict[b] += 1\n\ncount = 0\nfor a in a_dict:\n    if a in b_dict:\n        count += a_dict[a]*b_dict[a]\nprint(count)\n", "N=int(input())\nA=list(map(int,input().split()))\n\nd={}\n\nfor i in range(len(A)):\n  d.setdefault(i-A[i],0)\n  d[i-A[i]]+=1\nans=0\nfor i in range(len(A)):\n  if d.get(i+A[i]):\n    ans+=d.get(i+A[i])\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\n\nx = [ aa + i  for i,aa in enumerate(a,start = 1)]\ny = [ i - aa  for i,aa in enumerate(a,start = 1)]\n\nfrom collections import Counter\nc = Counter(y)\nans = 0\nfor xx in x:\n    ans += c[xx]\nprint(ans)\n\n\n\n", "N = int(input())\nA = list(map(int, input().split()))\nstart = [0]*N\nans = 0\nfor i in range(N):\n    if i+A[i]+1 < N:\n        start[i+A[i]+1] += 1\n\nfor i in range(N):\n    if i-A[i]+1 < 0:\n        continue\n    if i-A[i]+1 >= N:\n        continue\n    ans += start[i-A[i]+1]\n\nprint(ans)\n", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nfrom collections import defaultdict\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n    for i, ae in enumerate(a):\n        d1[i + ae +1] += 1\n        d2[i - ae +1] += 1\n    r = 0\n    for d1e in d1.keys():\n        rt = d1[d1e] * d2[d1e]\n        r += rt\n    print(r)\n\ndef __starting_point():\n    main()\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\nnum1=[0]*(2*(10**5)+10)\nnum2=[0]*(2*(10**5)+10)\nfor i in range(n):\n    if a[i]+i+1<2*(10**5)+5:\n        num1[a[i]+i+1]+=1\n    if a[i]+1<i+1:\n        num2[-a[i]+i+1]+=1\nans=0\nfor i in range(len(num1)):\n    ans+=num1[i]*num2[i]\nprint(ans)\n", "n = int(input())\narr = list(map(int,input().split()))\naddarr = [i+1+arr[i] for i in range(n)]\ndiffarr = [i+1-arr[i] for i in range(n)]\n\nfrom collections import Counter\ncnt = Counter([addarr[0]])\nans = 0\n\nfor i in range(1,n):\n    tmp = diffarr[i]\n    ans += cnt[tmp]\n    cnt.update([addarr[i]])\n\nprint(ans)", "from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\n\ns = [i+a for i, a in enumerate(A)]\nt = [j-a for j, a in enumerate(A)]\n\nd = Counter(s)\nans = 0\n\nfor i in t:\n    ans += d[i]\nprint(ans)", "n=int(input())\na=list(map(int,input().split()))\nans=0\n\nl=[]\nr=[]\n\nfor i in range(n):\n  nu=i+1\n  x=a[i]\n  l.append(x+nu)\n  r.append(nu-x)\n  \ndi1={}\ndi2={}\n\nfor i in range(0,n):\n  if i==n-1:\n    continue\n  else:\n    if l[i] not in di1:\n      di1[l[i]]=0\n    di1[l[i]]+=1\n    if r[i+1] not in di2:\n      di2[r[i+1]]=0\n    di2[r[i+1]]+=1\n    if r[i+1] in di1:\n      ans+=di1[r[i+1]]\n      \nprint(ans)", "from collections import Counter as C\nn=int(input())\na=list(map(int,input().split()))\nl=C([i+a[i]for i in range(n)])\nr=C([i-a[i]for i in range(n)])\nb=0\nfor i in l.keys():\n    b+=l[i]*r[i]\nprint(b)", "n = int(input())\na = list(map(int, input().split()))\ncount = {}\nfor i in range(len(a)):#\u756a\u53f7\u3068\u8eab\u9577\u3092\u5f15\u304f\n    minus = (i+1) - a[i]\n    if minus in count:\n        count[minus] += 1\n    else:\n        count[minus] = 1\ntotal = 0\nfor i in range(len(a)):\n    plus = a[i] + (i+1)\n    if plus in count:\n        total += count[plus]\nprint(total)\n", "n=int(input())\na=list(map(int,input().split()))\nb=[]\nc=[]\nans=0\nfor i in range(n):\n  b.append(i+1-a[i])\n  c.append(a[i]+i+1)\nx=max(b)\nif x<=0:\n  print(0)\n  return\nelse:\n  ans=0\n  b_=[0]*(x+1)\n  for i in range(n):\n    if 0<=b[i]<=x:\n      b_[b[i]]+=1\n  for i in range(n):\n    if 0<=c[i]<=x:\n      ans+=b_[c[i]]\n  print(ans)      ", "n = int(input())\na = list(map(int, input().split()))\nb1,b2,dic,ans = [],[],{},0\nfor i, j in enumerate(a):\n    b1.append(j-i)\n    b2.append(-j-i)\nfor i, j in zip(b1, b2):\n    if i in dic:\n        ans += dic[i]\n    if j in dic:\n        dic[j] += 1\n    else:\n        dic[j] = 1\nprint(ans)", "# \u96f0\u56f2\u6c17\u3067\u66f8\u3044\u305f\u3089\u901a\u3063\u3066\u3057\u307e\u3063\u305f\u304c\u306a\u3093\u3067\u901a\u3063\u305f\u304b\u308f\u304b\u3089\u3093\n# i<j\u3068\u3044\u3046\u524d\u63d0\u3092\u7121\u8996\u3057\u3066\u3044\u308b\u306e\u3067\u306f\u3068\u611f\u3058\u308b\n\nN = int(input())\nA = list(map(int, input().split()))\n# i<j\u3068\u3057\u3066\u3001\u6761\u4ef6\u306f j-i = A_i + A_j\n# i + A_i = j - A_j\n\ndict1 = {}\nfor i in range(1, N + 1):\n    tmp = i + A[i - 1]\n    if tmp not in dict1:\n        dict1[tmp] = 1\n    else:\n        dict1[tmp] += 1\n\ndict2 = {}\nfor i in range(1, N + 1):\n    tmp = i - A[i - 1]\n    if tmp not in dict2:\n        dict2[tmp] = 1\n    else:\n        dict2[tmp] += 1\n\n# print(dict1, dict2)\nans = 0\nfor k, v in list(dict1.items()):\n    if k in dict2:\n        ans += v * dict2[k]\nprint(ans)\n", "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nfrom functools import reduce\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\n#i - j == a[i] + a[j]\n#=> i - a[i] == j + a[j]\n#j - i == a[i] + a[j]\n#=> i + a[i] == j - a[j]\nn = INT()\na = LIST()\nc = [0]*(2*n+1)\nfor i in range(n):\n    if i - a[i] >= 0:\n        c[i-a[i]] += 1\nans = 0\nfor i in range(n):\n    if i + a[i] <= 2*n:\n        ans += c[i+a[i]]\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\n\ndic = {}\n\nans = 0\nfor i in range(n):\n    if i+1-a[i] in dic:\n        ans += dic[i+1-a[i]]\n    \n    if a[i]+(i+1) in dic:\n        dic[(i+1)+a[i]] = dic[(i+1)+a[i]] + 1\n    else:\n        dic[(i+1)+a[i]] = 1\n        \nprint(ans)", "import collections\nN = int(input())\nA = [0]\nA += list(map(int, input().split()))\ncnt = 0\nL = [- 10 ** 6]\nR = [- 10 ** 6]\n\nfor i in range(1, N + 1):\n    L.append(i + A[i])\n    R.append(i - A[i])\nc = collections.Counter(L)\n\nfor j in range(1, N + 1):\n    cnt += c.get(R[j], 0)\nprint(cnt)"]