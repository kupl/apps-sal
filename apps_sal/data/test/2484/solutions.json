["def main():\n    ans = 0\n    n = int(input())\n    A = [int(i) for i in input().split()]+[10**9]\n\n    Sum = 0\n    right = 0\n    for left in range(n):\n        while(right<n):\n            if Sum^A[right]  == Sum+A[right]:\n                Sum += A[right]\n                right += 1\n            else:\n                break\n        ans += right-left\n        if left==right:\n            right +=1\n        else:\n            Sum -= A[left]\n    print(ans)\nmain()", "n=int(input())\na=list(map(int,input().split()))\nl=0\nr=1\nt=a[0]\nans=0\n \nwhile l<n:\n  if r==n:\n    ans+=r-l\n    l+=1\n    continue\n  if t+a[r]==t^a[r]:\n    t+=a[r]\n    r+=1\n  else:\n    ans+=r-l\n    t-=a[l]\n    l+=1\nprint(ans)\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    l, r = 1, 0\n    t = A[0]\n    n = 1\n    while l < N:\n        if A[l] & t:\n            t ^= A[r]\n            r += 1\n            continue\n        t |= A[l]\n        l += 1\n        n += l - r\n    return n\n\nprint((main()))\n", "n = int(input())\nal = list(map(int, input().split())) \n\nal.append(0)\n\nres = 0\nr = 0\nx = 0\ny = 0\n\n\nfor l in range(n):\n#    print(\"start\",l,r)\n    while x == y and r<=n:\n        x += al[r]\n        y = y ^ al[r]\n        r += 1\n#        print(x,y)\n    r -= 1\n    x -= al[r]\n    y = y ^ al[r]\n#    print(x,y,l,r)    \n    res +=r-l\n    x -= al[l]\n    y = y^ al[l]\n    if l ==r:\n        r += 1\n\nprint(res)", "N = int(input())\nA = list(map(int, input().split()))\n\nsums = [0] * (N + 1)\nxors = [0] * (N + 1)\nfor i in range(1, N + 1):\n    sums[i] = sums[i - 1] + A[i - 1]\n    xors[i] = xors[i - 1] ^ A[i - 1]\n\nans = 0\nfor i in range(N):\n    l = i\n    r = N\n    while l + 1 < r:\n        m = (l + r) // 2\n        if sums[m + 1] - sums[i] == xors[m + 1] ^ xors[i]:\n            l = m\n        else:\n            r = m\n    ans += l - i + 1\nprint(ans)", "N=int(input())\nA=list(map(int,input().split()))\n\nto = [0]*N\n\nfor i in range(N-1):\n  if i == 0:\n    SUM = A[i]\n  else:\n    SUM -= A[i-1]\n  for j in range(min(to[i-1]+1,N-1),N):\n    if SUM+A[j] != SUM^A[j]:\n      to[i]=j-1\n      break\n    if j == N-1:\n      to[i] = j\n      break\n    SUM += A[j]\n  \nprint(sum([max(0,to[i]-i) for i in range(N)])+N)", "n = int(input())\na = list(map(int, input().split()))\n\ncnt, su, r = 0, 0, 0\nfor l in range(n):\n    while r < n and su + a[r] == su ^ a[r]:\n        su += a[r]\n        r += 1\n    cnt += r - l\n    if l == r:\n        r += 1\n    else:\n        su -= a[l]\nprint(cnt)\n", "n = int(input())\nA = tuple(map(int, input().split()))\nc = 0\ns = 0\nr = 0\nfor l in range(n):\n    while r < n and A[r] ^ s == A[r] + s:\n        s = A[r] + s\n        r += 1\n\n    c += r- l\n    if l == r:\n        r += 1\n    s -= A[l]\n\nprint(c)", "\n\ndef submit():\n    n = int(input())\n    a = [int(e) for e in input().split()]\n\n    l, r = 0, 0\n    ans = 0\n    curr_xor = 0\n    curr_sum = 0\n    while r < n:\n        curr_xor = curr_xor ^ a[r]\n        curr_sum = curr_sum + a[r]\n\n        # \u4eca\u306er\u3067\u5b9f\u73fe\u3059\u308b\u6700\u5de6\u306el\u3092\u6c42\u3081\u308b\n        while curr_xor != curr_sum:\n            curr_xor = curr_xor ^ a[l]\n            curr_sum = curr_sum - a[l]\n            l += 1\n            # \u6700\u60aa\u3067\u3082r == l\u3067\u6b62\u307e\u308b\n        ans += r - l + 1\n        # r\u3092\u52d5\u304b\u3059\n        r += 1\n\n    print(ans)\n\n\nsubmit()\n", "n = int(input())\na = list(map(int, input().split()))\n\ns = [0] * n\nt = [0] * n\n\ns[0] = a[0]\nt[0] = a[0]\n\nfor i in range(1, n):\n    s[i] = s[i-1] + a[i]\n    t[i] = t[i-1] ^ a[i]\n\ns = [0] + s\nt = [0] + t \n\nans = 0\n#print(s, t)\n\nl = 1\nr = l\nwhile l < n+1:\n    #print(l, r)\n    if s[r] - s[l-1] == t[r] ^ t[l-1]:\n        while True:\n            #print(l, r, s[r] - s[l-1], t[r] ^ t[l-1])\n            if s[r] - s[l-1] == t[r] ^ t[l-1]:\n                r += 1\n                if r > n:\n                    ans += r - l\n                    r = n\n                    break\n            else:\n                ans += r - l \n                break\n    else:\n        while True:\n            #print(l, r, s[r] - s[l-1], t[r] ^ t[l-1])\n            if s[r] - s[l-1] == t[r] ^ t[l-1]:\n                ans += r - l + 1\n                break\n            else:\n                r -= 1\n                if r == l:\n                    ans += 1\n                    r = l + 1\n                    break\n\n    l += 1\n\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\n\nright = 0\nsum = 0\nans = 0\n\nfor left in range(n):\n    while right < n and sum^a[right] == sum+a[right]:\n        sum += a[right]\n        right += 1\n    ans += right-left\n    if right == left:\n        right += 1\n    else:\n        sum -= a[left]\n\nprint(ans)\n", "n=int(input())\na=list(map(int,input().split()))\nl=0\nr=1\nt=a[0]\nans=0\n \nwhile l<n:\n  if r==n:\n    ans+=r-l\n    l+=1\n    continue\n  if t+a[r]==t^a[r]:\n    t+=a[r]\n    r+=1\n  else:\n    ans+=r-l\n    t-=a[l]\n    l+=1\nprint(ans)", "n = int(input())\nA = list(map(int,input().split()))\n\nans = 0\nl = 0\nr = 0\nbit = A[0]\ntotal = A[0]\n\nwhile True:  \n  if bit == total:\n    ans += r-l+1\n    r += 1\n    if r == n:\n      break\n    total += A[r]\n    bit ^= A[r]\n  else:\n    total -= A[l]\n    bit ^= A[l]\n    l += 1\n      \nprint(ans)      ", "N = int(input())\nARR = list(map(int,input().split()))\ndef calculate(n,arr):\n    right = 0\n    sum = arr[0]\n    result = 0\n\n    for left in range(0,n):\n        while (right + 1 < n) and ( (sum + arr[right+1]) == (sum ^ arr[right+1]) ):\n            right = right + 1\n            sum = sum + arr[right]\n\n        result = result + right - left + 1\n        sum = sum - arr[left]\n\n    print(result)\n\ncalculate(N,ARR)", "n = int(input())\na = list(map(int,input().split()))\ncount = 0\nr = 1\nl = 0\nnow = a[0]\nwhile l < n:\n\n    while True:\n        if r < n and now + a[r] == now^a[r]:\n            now += a[r]\n            count += r-l\n            r += 1\n        else:\n            break\n    if l == r:\n        now = a[l]\n        r += 1\n    elif l < n:\n        now -= a[l]\n        l += 1\nprint(count+n)", "n = int(input())\na = [int(i) for i in input().split()]\ns = xor = 0\nright = 0\nans = 0\nfor left in range(n):\n    while right < n and s + a[right] == xor ^ a[right]:\n        s += a[right]\n        xor ^= a[right]\n        right += 1\n    ans += right - left\n    if left == right: right += 1\n    else:\n        s -= a[left]\n        xor ^= a[left]\nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))\nres = 0\nans = 0\nright = 0\nfor left in range(N):\n    while right < N and (res ^ A[right]) == res + A[right]:\n        res += A[right]\n        right += 1\n    ans += (right - left)\n    if left == right:\n        right += 1\n    res -= A[left]\nprint(ans)", "nim =int(input())\nmike = list(map(int,input().split()))\n\nS = [0]\nX = [0]\nfor a in mike:\n    S.append(S[-1]+a)\n    X.append(X[-1]^a)\n\nl,r = 1,1\nresult = 0\np = 1\nwhile r <= nim:\n    if S[r]-S[l-1] == X[r]^X[l-1]:\n        if p==0:\n            result -= (r-l)*(r-l+1)//2\n        r += 1\n        p = 1\n    else:\n        if p ==1:\n            result += (r-l)*(r-l+1)//2\n        l += 1\n        p = 0\nresult += (r-l)*(r-l+1)//2\nprint(result)", "n = int(input())\na = list(map(int, input().split()))\nr = 0\nans = 0\ns = 0\nxor = 0\n\nfor i in range(n):\n    while r < n:\n        if xor ^ a[r] == s + a[r]:\n            xor = xor ^ a[r]\n            s += a[r]\n            r += 1\n            ans += (r-i)\n        else:\n            xor = xor ^ a[i]\n            s -= a[i]\n            break\n\nprint(ans)\n", "N = int(input())\nARR = list(map(int,input().split()))\ndef calculate(n, arr):\n    result = 0\n    right = 0\n    sum = arr[0]\n    for left in range(0, n):\n        while right+1 < n:\n            if sum ^ arr[right+1] == (sum + arr[right+1]):\n                right = right + 1\n                sum = sum + arr[right]\n            else:\n                break\n        result = result + right - left + 1\n        sum = sum - arr[left]\n    print(result)\n\ncalculate(N, ARR)\n", "n=int(input())\na=list(map(int,input().split()))\nleft=0\nans=0\nxor_sum=0\nnormal_sum=0\nfor right,b in enumerate(a):\n\txor_sum^=b\n\tnormal_sum+=b\n\twhile xor_sum<normal_sum:\n\t\txor_sum^=a[left]\n\t\tnormal_sum-=a[left]\n\t\tleft+=1\n\tans+=right-left+1\nprint(ans)\n", "from copy import deepcopy\nfrom operator import add, sub\n\nclass TwoPointers:\n    def __init__(self, cond, init=0, right=add, left=sub):\n        self.cond = cond\n        self.init = init\n        self.next_right = right\n        self.next_left = left\n    \n    def __call__(self, A, uniq=True):\n        cond = self.cond\n        next_right, next_left = self.next_right, self.next_left\n        s = deepcopy(self.init)\n        n = len(A)\n        X = {}\n        r = 0\n        for l in range(n):\n            if not uniq:\n                X[l] = r\n            while r < n and cond(s, A[r]):\n                s = next_right(s, A[r])\n                r += 1\n                X[l] = r\n            if l == r:\n                r += 1\n            else:\n                s = next_left(s, A[l]) if l+1 != r else deepcopy(self.init)\n        return list(X.items())\n    \n    def maximum(self, A):\n        X = self.__call__(A)\n        return max(r-l for l, r in X) if X else 0\n    \n    def count(self, A):\n        X = self.__call__(A, False)\n        return sum(r-l for l, r in X)\n\nn, *A = map(int, open(0).read().split())\nprint(TwoPointers(lambda s, n: s + n == s ^ n).count(A))", "N = int(input())\nA = list(map(int,input().split()))\n\nleft = 0\nright = 0\nans = 0\ntmp = 0\n\nfor left in range(N):\n    while right < N and tmp + A[right] == tmp ^ A[right]:\n        tmp += A[right]\n        right += 1\n        \n    ans += right - left\n    \n    if right == left:\n        right += 1\n    else:\n        tmp -= A[left]\n        \nprint(ans)", "N = int(input())\nnumbers = list(map(int, input().split()))\n\nsumm, right, left = 0, 0, 0\nans = 0\n\nfor left in range(N):\n    while (right < N and (summ + numbers[right]) == (summ ^ numbers[right])):\n        summ += numbers[right]\n        right += 1\n    \n    ans += right - left\n    \n    \n    if (right == left):\n        right += 1\n    \n    else:\n        summ -= numbers[left]\n        \n\nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nw_xor,w_sum = A[0],A[0]\nl,r = 0,0\n\nwhile l < N and r < N:\n  #print(l,r,w_xor, w_sum)\n\n  if w_xor == w_sum:\n    if r < N-1:\n    #print(l,r)\n      r += 1\n      w_xor = w_xor ^ A[r]\n      w_sum = w_sum + A[r]\n      continue\n    else:\n      ans += 1+r-l\n  else:\n    # l,r-1\u3001\u307e\u3067\u304c\u30de\u30c3\u30c1\u3057\u3066\u305f\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u30671\u5c0f\u3055\u3044\n    ans += r-l\n  w_xor = w_xor ^ A[l] \n  w_sum = w_sum - A[l]\n  l += 1\n  \nprint(ans)", "#!/usr/bin python3\n# -*- coding: utf-8 -*-\n\n############################################\n# \u3057\u3083\u304f\u3068\u308a\u6cd5\n############################################\n# \u533a\u9593\u306b\u304a\u3044\u3066\u5358\u8abf\u5897\u52a0\u3068\u306a\u308b\u3082\u306e\u306e\u500b\u6570\u3000ABC038_c\n############################################\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n##\n    ret = 0\n    right = 0\n    tot = 0\n    for left in range(0,N):\n        while (right < N and ((tot ^ A[right] == tot + A[right]) or left == right)):   #####\u6761\u4ef6\n            tot += A[right]\n            right += 1\n#        print(ret, left, right)\n        ret += right - left                  #####\u5024\u306e\u66f4\u65b0\n        tot = tot ^ A[left]\n    print(ret)\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\n\nimport sys\n\nDEBUG = False\n\ndef read(t):\n    return t(sys.stdin.readline().rstrip())\n\n\ndef read_list(t, sep = \" \"):\n    return [t(s) for s in sys.stdin.readline().rstrip().split(sep)]\n\n\ndef dprint(*args, **kwargs):\n    if DEBUG:\n        print(*args, **kwargs)\n    return\n\ndef main():\n    n = read(int)\n    a = read_list(int)\n\n    ans = 0\n    l = r = 0\n    cur_sum = 0\n\n    for l in range(0, n):\n        if r < l:\n            r = l\n        while r < n and (cur_sum | a[r]) == cur_sum + a[r]:\n            cur_sum += a[r]\n            r += 1\n        ans += r - l\n        if l < r:\n            cur_sum -= a[l]\n    \n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    s = 0\n    ans = 0\n    right = 0\n    for left in range(N):\n        while right < N and s & A[right] == 0:\n            s ^= A[right]\n            right += 1\n\n        ans += right - left\n\n        if left == right:\n            right += 1\n        else:\n            s ^= A[left]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = list(int(a) for a in input().split())\n\nans = 0\nx_sum = 0\na_sum = 0\nr = 0\nfor l in range(N):\n    while r < N and x_sum^A[r] == a_sum+A[r]:\n        x_sum ^= A[r]\n        a_sum += A[r]\n        r += 1\n    ans += r-l\n    #print(l, r, x_sum, a_sum, ans)\n    x_sum ^= A[l]\n    a_sum -= A[l]\n\nprint(ans)", "# a + b <= a ^ b\n# \u90e8\u5206\u5217\u306e\u548c\u304c\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u3088\u308a\u3082\u5927\u304d\u304f\u306a\u3063\u3066\u3089\u305d\u308c\u4ee5\u964d\u306e\u533a\u9593\u3067\u548c\u306b\u8ffd\u3044\u3064\u3051\u306a\u304f\u306a\u308b\n# \u548c\u3068\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u304c\u7b49\u3057\u3044\u533a\u9593\u3092\u5c3a\u53d6\u308a\u3067\u6c42\u3081\u308b\nn = int(input())\na = list(map(int, input().split()))\n\nl = 0\nSUM,XOR = 0,0\nans= 0\nfor r in range(n):\n    SUM += a[r]\n    XOR ^= a[r]\n    if SUM == XOR:\n        ans += (r-l+1)\n    else:\n        while l <= r and SUM != XOR:\n            SUM -= a[l]\n            XOR ^= a[l]\n            l += 1\n        ans += (r-l+1)\n\nprint(ans)", "from operator import*\nfrom copy import*\nclass TP:\n    def __init__(self, cond, init=0, right=add, left=sub):\n        self.cond = cond\n        self.init = init\n        self.next_right = right\n        self.next_left = left\n    \n    def __call__(self, A, uniq=True):\n        cond = self.cond\n        next_right, next_left = self.next_right, self.next_left\n        s = deepcopy(self.init)\n        n = len(A)\n        X = {}\n        r = 0\n        for l in range(n):\n            if not uniq:\n                X[l] = r\n            while r < n and cond(s, A[r]):\n                s = next_right(s, A[r])\n                r += 1\n                X[l] = r\n            if l == r:\n                r += 1\n            else:\n                s = next_left(s, A[l]) if l+1 != r else deepcopy(self.init)\n        return list(X.items())\n    \n    def maximum(self, A):\n        X = self.__call__(A)\n        return max(r-l for l, r in X) if X else 0\n    \n    def count(self, A):\n        X = self.__call__(A, False)\n        return sum(r-l for l, r in X)\n \nn, *a = map(int, open(0).read().split())\nprint(TP(lambda s, n: s + n == s ^ n).count(a))", "n = int(input())\nA = tuple(map(int, input().split()))\nc = 0\ns = 0\nr = 0\nfor l in range(n):\n    while r < n and A[r] ^ s == A[r] + s:\n        s = A[r] + s\n        r += 1\n\n    c += r- l\n    if l == r:\n        r += 1\n    else:\n        s -= A[l]\n\nprint(c)\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    s = 0\n    xors = 0\n    ans = 0\n    right = 0\n    for left in range(N):\n        while right < N and xors ^ A[right] == s + A[right]:\n            xors ^= A[right]\n            s += A[right]\n            right += 1\n\n        ans += right - left\n\n        if left == right:\n            right += 1\n        else:\n            xors ^= A[left]\n            s -= A[left]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = list(map(int,input().split()))\nt = 0\nl = 0\nr = 0\nans = 0\nwhile r < n:\n    if t^a[r] == t+a[r]:\n        t += a[r]\n        r += 1\n    else:\n        t -= a[l]\n        ans += r-l\n        l += 1\nans += (r-l)*(r-l+1)//2\nprint(ans)", "n=int(input())\na=list(map(int,input().split()))\n\nl=0\nr=1\nt=a[0]\nans=0\n\nwhile l<n:\n  if r==n:\n    ans+=r-l\n    l+=1\n    continue\n  if t+a[r]==t^a[r]:\n    t+=a[r]\n    r+=1\n  else:\n    ans+=r-l\n    t-=a[l]\n    l+=1\nprint(ans)\n", "#!/usr/bin/env python3\nimport sys\ntry:\n    from typing import List\nexcept ImportError:\n    pass\n\n\ndef solve(N: int, A: \"List[int]\"):\n    ans = 0\n    j = 0\n    x = 0\n    for i in range(N):\n        while j < N and (x & A[j]) == 0:\n            x ^= A[j]\n            j += 1\n        ans += j - i\n        x ^= A[i]\n    print(ans)\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\nN=int(input())\nL=list(map(int,input().split()))\nt=0\nans=0\nl=0\nr=0\nwhile r<=N-1:\n if t+L[r]==t^L[r]:\n  t+=L[r]\n  r+=1\n else:\n  ans+=(r-l)\n  t-=L[l]\n  l+=1\nans+=(r-l)*(r-l+1)/2\nprint(int(ans))", "# Python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN = int(input())\nA = list(map(int,input().split()))\n\n# xor \u3068 + \u306e\u7d50\u679c\u304c\u7b49\u3057\u3044\u306e\u306f, 2\u9032\u8868\u8a18\u3067\u5404\u6841\u306ebit\u304c\u7acb\u3063\u3066\u3044\u308b\u6570\u304c1\u3064\u3057\u304b\u306a\u3044\u5834\u5408\n# \u3057\u3083\u304f\u53d6\u308a\u3067\u6c42\u3081\u3089\u308c\u305d\u3046\nans = 0\nxor = 0 # \u3057\u3083\u304f\u3068\u308a \u306e\u672c\u4f53\nl,r = 0,0\n\nwhile r < N:\n    # \u53f3\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3067\u304d\u308b\u306a\u3089\n    if xor ^ A[r] == xor + A[r]:\n        ans += r-l+1\n        xor ^= A[r]\n    # \u53f3\u306e\u8981\u7d20\u304c\u8ffd\u52a0\u3067\u304d\u306a\u3044\u306a\u3089\n    else:\n        # \u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u5de6\u7aef\u3092\u66f4\u65b0\n        while xor ^ A[r] != xor + A[r]:\n            xor ^= A[l]\n            l += 1\n        # \u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u306e\u3067, \u8a08\u7b97\n        xor ^= A[r]\n        ans += r-l+1\n    r += 1\n\nprint(ans)\n", "#!/usr/bin/env python3\nimport sys\nfrom collections import deque, Counter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_right\nfrom itertools import accumulate\n\nsys.setrecursionlimit(10**6)\nINF = 10**12\nm = 10**9 + 7\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    # \u3057\u3083\u304f\u3068\u308a\u6cd5\u306e\u7df4\u7fd2\n    res = 0\n    right = 0\n    sumA = 0# left\u304b\u3089right\u307e\u3067\u306e\u7b97\u8853\u548c\uff08=\u8ad6\u7406\u548c\uff09\n\n    for left in range(N):\n        while right < N and (sumA+A[right]) == sumA^A[right]:\n            sumA += A[right]\n            right += 1\n\n        res += right - left\n        if left == right:\n            right += 1\n        else:\n            sumA -= A[left]\n\n    print(res)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n=int(readline())\n    a=list(map(int,readline().split()))\n\n    l=0\n    r=1\n    ans=0\n    now_xor=a[0]\n    now_sum=a[0]\n    while l<n:\n        if r<n:\n            now_xor^=a[r]\n            now_sum+=a[r]\n            while now_xor!=now_sum:\n                ans+=1\n                ans+=r-l-1\n                now_xor^=a[l]\n                now_sum-=a[l]\n                l+=1\n            r+=1\n        else:\n            l+=1\n            ans+=1\n            ans+=r-l\n\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n    A = [list(map(int, f'{a:0>20b}')) for a in A]\n\n    ans = 0\n    right = 0\n    digits = [0] * 20\n\n    for left in range(N):\n        while right < N and all(d + b <= 1 for d, b in zip(digits, A[right])):\n            for i in range(20):\n                digits[i] += A[right][i]\n            right += 1\n\n        ans += right - left\n\n        if left == right:\n            right += 1\n        else:\n            for i in range(20):\n                digits[i] -= A[left][i]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from operator import add, sub\nfrom operator import mul, floordiv\nclass Two_pointer:\n    def __init__(self, cond, init=0, right=add, left=sub):\n        self.cond = cond\n        self.init = init\n        self.next_right = right\n        self.next_left = left\n        \n    def __call__(self, A):\n        cond = self.cond\n        next_right, next_left = self.next_right, self.next_left\n        s = init = self.init\n        n = len(A)\n        X = {}\n        r = 0\n        for l in range(n):\n            X[l] = r\n            while r < n and cond(s, A[r]):\n                s = next_right(s, A[r])\n                r += 1\n                X[l] = r\n            if l == r:\n                r += 1\n            else:\n                s = next_left(s, A[l]) if l+1 != r else init\n        return list(X.items())\n\nn, *A = map(int, open(0).read().split())\nX = Two_pointer(lambda s, n: s + n == s ^ n)(A)\nprint(sum(r-l for l, r in X))", "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\ntotal = a[0]\nxor = a[0]\nans = 0\nl = 0\nr = 0\n\nwhile 1:\n    if xor == total:\n        ans += r-l+1\n        r += 1\n        if r == n:\n            break\n        total += a[r]\n        xor ^= a[r]\n    else:\n        total -= a[l]\n        xor ^= a[l]\n        l += 1\nprint(ans)\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    l, t, n = 0, 0, 0\n    for r, a in enumerate(A):\n        while a & t:\n            t ^= A[l]\n            l += 1\n        t |= a\n        n += r - l + 1\n    return n\n\nprint((main()))\n", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(1)\n        return\n\n    # Only when there is no bit duplication in a group,\n    # it always meets the condition.\n    # l <= true_l < true_r < r\n    ans = n\n    l = 0\n    now = a[0]\n    for r in range(1, n):\n        if now & a[r] == 0:\n            now = now ^ a[r]\n            continue\n\n        now = now ^ a[r]\n        for new_l in range(r-1, l-1, -1):\n            if a[new_l] & a[r] != 0:\n                break\n        # else:\n            # print('Error')\n            # return\n        new_l += 1\n\n        for i in range(l, new_l):\n            now = now ^ a[i]\n\n        ans += (r-l) * (r-l-1) // 2 - (r-new_l) * (r-new_l-1) // 2\n\n        l = new_l\n\n    r += 1\n    ans += (r-l) * (r-l-1) // 2\n\n    print(ans)\n\nmain()", "n=int(input())\na=tuple(map(int,input().split(' ')))\nr,ans,tsum,txor=0,0,0,0\nfor l in range(n):\n    while r<n and txor^a[r]==tsum+a[r]:\n        txor = txor^a[r]\n        tsum = tsum+a[r]\n        r += 1\n    ans += r-l\n    if l==r:\n        r+=1\n    else:\n        txor = txor^a[l]\n        tsum -= a[l]\nprint(ans)", "N = int(input())\na_l = [int(a) for a in input().split()]\n\nans = 0\nright = 0\n_sum = 0\nfor left in range(N):\n    while right < N and _sum ^ a_l[right] == _sum + a_l[right]:\n        _sum += a_l[right]\n        right += 1\n    ans += right - left\n    if right == left:\n        right += 1\n    else:\n        _sum -= a_l[left]\n\nprint(ans)\n", "#%%\nN = int(input())\nA = list(map(int, input().split()))\n\n#%%\nans = 0\nsum = 0\nright = 0\nfor left in range(N):\n    temp = 0\n    while right < N and sum ^ A[right] == sum + A[right]:\n        sum = sum ^ A[right]\n        right += 1\n    if left == right:\n        right += 1\n    else:\n        sum = sum ^ A[left]\n    ans += right - left\n    \nprint(ans)\n", "n = int(input())\na_ls = list(map(int, input().split()))\nr = 0\nans = 0\nS = a_ls[0]\nfor l in range(n):\n    if l == r and S == 0:\n        S = a_ls[l]\n    while r + 1 < n and S+a_ls[r+1] == S^a_ls[r+1]:\n        S += a_ls[r+1]\n        r += 1\n    ans += r - l + 1\n    if r == l:\n        r += 1\n    S -= a_ls[l]\nprint(ans)\n\n", "N = int(input())\nA = list(map(int,input().split()))\n\nright = 0\nSUM = 0\nans = 0\nfor left in range(N):\n    while right < N and SUM | A[right] == SUM + A[right]:\n        SUM += A[right]\n        right += 1\n    \n    ans += right - left\n    \n    if right == left:\n        right += 1\n    else:\n        SUM -= A[left]\nprint(ans)", "from operator import add, sub\nfrom operator import mul, floordiv\nclass Two_pointer:\n    def __init__(self, cond, init=0, right=add, left=sub):\n        self.cond = cond\n        self.s = init\n        self.next_right = right\n        self.next_left = left\n        \n    def __call__(self, A):\n        s = self.s\n        cond = self.cond\n        next_right, next_left = self.next_right, self.next_left\n        n = len(A)\n        X = []\n        r = 0\n        for l in range(n):\n            while r < n and cond(s, A[r]):\n                s = next_right(s, A[r])\n                X.append((l, r+1))\n                r += 1\n            if l == r:\n                r += 1\n            else:\n                s = next_left(s, A[l])\n        return X\n\nn, *A = map(int, open(0).read().split())\nX = Two_pointer(lambda s, n: s + n == s ^ n)(A)\nprint(sum(r-l for l, r in X))", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    csum = [[0] * 20 for _ in range(N + 1)]\n    for i in range(N):\n        for j in range(20):\n            csum[i + 1][j] = csum[i][j] + (1 if A[i] & (1 << j) else 0)\n\n    def is_ok(l, r):\n        res = True\n        for j in range(20):\n            if csum[r][j] - csum[l][j] > 1:\n                res = False\n                break\n        return res\n\n    ans = 0\n    right = 0\n    for left in range(N):\n        while right < N and is_ok(left, right + 1):\n            right += 1\n\n        ans += right - left\n\n        if left == right:\n            right += 1\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = list(map(int,input().split()))\nA.append(0)\n\nr = 0\nans = 0\nsu = 0\n\nfor l in range(N):\n  while (l == r or su+A[r]==su^A[r]) and r<N:\n    su += A[r]\n    r+=1\n  ans += r - l\n  su -= A[l]\nprint(ans)", "n = int(input())\na_list = [int(x) for x in input().split()]\n\nans = 0\ntemp_xor = a_list[0]\ntemp_sum = a_list[0]\nr = 0\nfor l in range(n):\n    while r < n:\n        if temp_xor != temp_sum:\n            break\n        r += 1\n        if r < n:\n            temp_xor ^= a_list[r]\n            temp_sum += a_list[r]\n    ans += r - l\n    temp_xor ^= a_list[l]\n    temp_sum -= a_list[l]\nprint(ans)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    res = 0\n    left = 0\n    add_total = 0\n    xor_total = 0\n    for right in range(n):\n        add_total += A[right]\n        xor_total ^= A[right]\n        while add_total != xor_total:\n            add_total -= A[left]\n            xor_total ^= A[left]\n            left += 1\n        res += right - left + 1\n\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "n = int(input())\nA = list(map(int, input().split()))\nans = R = X = 0\nfor L in range(n):\n    while R < n and not(X & A[R]):\n        X ^= A[R]\n        R += 1\n    ans += R-L\n    X ^= A[L]\nprint(ans)\n", "N = int(input())\nA = list(map(int,input().split()))\nA.append(0)\n\nright = 0\nans = 0\nsu = 0\n\nfor left in range(N):\n    while (left == right or su + A[right] == su ^ A[right]) and right < N:\n        su += A[right]\n        right += 1\n    ans += right - left\n    su -= A[left]\nprint(ans)", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    ans = 0\n    right = 0\n    s = 0\n\n    for left in range(N):\n        while right < N and s & A[right] == 0:\n            s ^= A[right]\n            right += 1\n\n        ans += right - left\n\n        if left == right:\n            right += 1\n        else:\n            s ^= A[left]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nalst = list(map(int, input().split()))\n\ntotal = alst[0]\nxor = alst[0]\nans = 0\nl = 0\nr = 0\nwhile 1:\n    if xor == total:\n        ans += r - l + 1\n        r += 1\n        if r == n:\n            break\n        total += alst[r]\n        xor ^= alst[r]\n    else:\n        total -= alst[l]\n        xor ^= alst[l]\n        l += 1\nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))+[0]\n\nsu = 0\nans = 0\nright = 0\n\nfor left in range(N):\n    while (left == right or su+A[right] == su^A[right]) and right < N:\n        su += A[right]\n        right += 1\n    ans += right-left\n    su -= A[left]\nprint(ans)", "from heapq import heapify,heappush,heappop\nn = int(input())\na = [int(i) for i in input().split()]\n\np = 0\nans = 0\ncc = 0\ncs = 0\nchk = []\nheapify(chk)\nfor i,ai in enumerate(a):\n  heappush(chk,(i,ai))\n  cc = cc^ai\n  cs += ai\n  ans += 1\n  if cc != cs :\n    p += (ans-1)*(ans)//2\n    while chk:\n      j,aj = heappop(chk)\n      ans -= 1\n      cc = cc^aj\n      cs -= aj\n      if cc == cs:\n        p -= (ans-1)*(ans)//2\n        cnt = 0\n        break\np += ans*(ans+1)//2\nprint(p)", "N = int(input())\nA = list(map(int, input().split()))\n\nxo = A[0]\nl = 0\nr = 1\nans = 0\n\nwhile l < N:\n    if r == N:\n        ans += r - l\n        l += 1\n        continue\n    if xo ^ A[r] == xo + A[r]:\n        xo += A[r]\n        r += 1\n    else:\n        ans += r - l\n        xo ^= A[l]\n        l += 1\nprint(ans)\n", "import numpy as np\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# XOR\u548c\u3068\u52a0\u7b97\u548c\u304c\u7b49\u3057\u304f\u306a\u308b\u306e\u306f\u3001\u4e8c\u9032\u6570\u306b\u3057\u305f\u3068\u304d\u306e\u5404\u30d3\u30c3\u30c8\u306e1\u306e\u6570\u304c\u9ad8\u3005\u3072\u3068\u3064\u306e\u3068\u304d\n# \u2192 \u3042\u308b\u96c6\u5408\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3068\u304d\u3001\u305d\u306e\u90e8\u5206\u96c6\u5408\u3082\u6761\u4ef6\u3092\u6e80\u305f\u3059\n# \u3057\u3083\u304f\u3068\u308a\u6cd5\nr = 0 # \u53f3\u7aef\u306e\u521d\u671f\u5024\ntemp = 0\nans = 0 # \u7b54\u3048\u306e\u521d\u671f\u5024\nfor l in range(N): # \u5de6\u7aef\u3092\u52d5\u304b\u3057\u3066\u3044\u304f\n    while r < N and temp ^ A[r] == temp + A[r]: # \u53f3\u7aef\u3092\u52d5\u304b\u3057\u3066\u3082\u6761\u4ef6\u3092\u6e80\u305f\u3059\u306a\u3089\n        temp += A[r]\n        r += 1\n    # \u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u304f\u306a\u3063\u305f\u3089\n    ans += r - l # \u7b54\u3048\u3092\u66f4\u65b0\n    # \u5de6\u7aef\u3092\u52d5\u304b\u3059\u6e96\u5099\n    if r == l:\n        r += 1 # \u3059\u3067\u306b\u91cd\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u53f3\u7aef\u3082\u52d5\u304b\u3059\n        temp = 0\n    else:\n        temp -= A[l]\nprint(ans)", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int,readline().split()))\n\n# \u540c\u3058\u6841\u306b1\u304c2\u56de\u73fe\u308c\u305f\u3089\u30c0\u30e1\n# \u73fe\u5728\u306e\u30d3\u30c3\u30c8\u5217\u3092\u6301\u3061\u3001\u540c\u3058\u6841\u306b1\u304c2\u56de\u73fe\u308c\u306a\u3044\u9650\u308a\u5ef6\u9577\u3057\u3066\u3044\u304f\u5c3a\u53d6\u308a\u6cd5\n\nright = 0\nxor = 0 # \u73fe\u5728\u306e\u30d3\u30c3\u30c8\u5217\nans = 0\n\ndef isOk(x, v):\n  while x and v:\n    if (x & 1) and (v & 1):\n      return False\n    x >>= 1\n    v >>= 1\n  return True\n\nfor left in range(N):\n  while right < N and isOk(xor,A[right]):\n    # \u540c\u3058\u6841\u306b1\u304c2\u56de\u73fe\u308c\u306a\u3044\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\n    xor ^= A[right]\n    right += 1\n      \n  ans += (right - left)\n  \n  if right == left:\n    right += 1\n  else:\n    xor ^= A[left]\n  \nprint(ans)\n", "n=int(input())\na=list(map(int,input().split()))\n\nll=0\nrr=0\nllrr=0\n\nresult=0\n\nfor ll in range(n):\n\n    while rr<n and a[rr]&llrr==0:\n        llrr+=a[rr]\n        rr+=1\n    result+=rr-ll\n    llrr=llrr^a[ll]\n\nprint(result)\n\n\n\n", "n = int(input())\naas = list(map(int, input().split()))\nacc = 0\nres = 0\nr = 0\nfor i in range(n):\n    ok = True\n    while r < n:\n        s = format(aas[r],'020b')\n        acc_s = format(acc,'020b')\n        for j in range(20):\n            if s[j] == '1':\n                if acc_s[j] == '1':\n                    ok = False\n                    #print(j)\n        if ok:\n            acc += aas[r]\n            r += 1\n        else:\n            break\n    if r < n:\n        res += r - i\n    else:\n        res += r - i\n    acc -= aas[i]\nprint(res)", "def XorSum2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans, tmp0, tmp1 = 0, 0, 0\n    \n    # \u5c3a\u53d6\u6cd5\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n    right = 0\n\n    for left in range(n):\n        while right < n and tmp0^a[right] == tmp1+a[right]:\n            tmp0 ^= a[right]\n            tmp1 += a[right]\n            right += 1\n        ans += right-left\n        if right == left:\n            right += 1\n            tmp0, tmp1 = 0, 0\n        else:\n            tmp0 ^= a[left]\n            tmp1 -= a[left]\n    print(ans)\n\n\ndef __starting_point():\n    XorSum2()\n    \n\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\n\nresult = 0\ni = 0\nx = 0\nfor j in range(n):\n    while x < n and (i & a[x]) == 0:\n        i += a[x]\n        x += 1\n    result += x-j\n    i -= a[j]\nprint(result)", "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    N = int(input())\n    A = [int(x) for x in input().split()]\n\n    r = 0\n    b = A[0]\n    ans = 0\n    for l in range(N):\n        while r + 1 < N and A[r + 1] & b == 0:\n            r += 1\n            b |= A[r]\n        ans += r - l + 1\n        b = b ^ A[l]\n\n    print(ans)\n\n\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "N=int(input())\nA=list(map(int,input().split()))\nxsum,sum=A[0],A[0]\nans,x,y=0,0,0\nflag=True\nwhile flag:\n  if xsum==sum:\n    ans+=(x-y+1)\n    x+=1\n    if x==N:\n      break\n    sum+=A[x]\n    xsum^=A[x]\n  else:\n    sum-=A[y]\n    xsum^=A[y]\n    y+=1\nprint(ans)", "n,a=int(input()),list(map(int,input().split()));r,i,x=0,0,0\nfor j in range(n):\n    while x<n and(i&a[x])==0:i+=a[x];x+=1\n    r+=x-j;i-=a[j]\nprint(r)", "n=int(input())\na=list(map(int,input().split()))\nans=0\nk=0\nXor=0\nAdd=0\nfor i in range(n):\n    while k<n and Xor^a[k]==Add+a[k]:\n        Xor^=a[k]\n        Add+=a[k]\n        k+=1\n    ans+=k-i\n    Xor^=a[i]\n    Add-=a[i]\nprint(ans)", "N = int(input())\nA = list(int(a) for a in input().split())\n\nans = 0\nx_sum = 0\na_sum = 0\nr = -1\nfor l in range(N):\n    while x_sum == a_sum and r < N-1:\n        r += 1\n        x_sum ^= A[r]\n        a_sum += A[r]\n    if x_sum != a_sum:\n        x_sum ^= A[r]\n        a_sum -= A[r]\n        r -= 1\n    ans += r-l+1\n    #print(l, r, x_sum, a_sum, ans)\n    x_sum ^= A[l]\n    a_sum -= A[l]\n\nprint(ans)", "# coding: utf-8\nimport sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n# \u3057\u3083\u304f\u3068\u308a\u6cd5\nN = ir()\nA = lr()\nanswer = 0\nleft = 0\nright = 0\n\ntemp = A[left]\nwhile left < N:\n    while right < N-1:\n        num = A[right+1]\n        if temp ^ num != temp + num:\n            break\n        temp += num\n        right += 1\n    right = max(right, left)\n    answer += right - left + 1\n    temp -= A[left]\n    left += 1\n\nprint(answer)\n", "N = int(input())\nA = [0] + list(map(int, input().split()))\n\nans = 0\nS = 0\nX = 0\nend = 0\n\nfor i in range(1, N+1):\n  S -= A[i-1]\n  X ^= A[i-1]\n  if end == N:\n    ans += end - i + 1\n    continue\n  if end < N:\n    end += 1\n  for j in range(end, N+1):\n    S += A[j]\n    X ^= A[j]\n    if S != X:\n      S -= A[j]\n      X ^= A[j]\n      end = j-1\n      break\n    if j == N:\n      end = j\n  ans += end - i + 1\n\nprint(ans)", "import sys\nimport numpy as np\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    # a ^ b <= a + b \u304c\u6210\u308a\u7acb\u3064\n    ans = 0\n    right = 0\n    xor = 0\n    s = 0\n    for left in range(N):\n        while right < N and s + A[right] == xor ^ A[right]:\n            s += A[right]\n            xor ^= A[right]\n            right += 1\n\n        ans += right - left\n\n        if right == left:\n            right += 1\n        else:\n            s -= A[left]\n            xor ^= A[left]\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\naaa = list(map(int, input().split()))\nright = 0\nsum = 0\ncnt = 0\nfor left in range(n):\n    while right < n and (sum ^ aaa[right]) == (sum + aaa[right]):\n        sum += aaa[right]\n        right += 1\n    cnt += right - left\n    if left == right:\n        right += 1\n    else:\n        sum -= aaa[left]\nprint(cnt)", "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    N = int(input())\n    A = [int(x) for x in input().split()]\n\n    r = 0\n    b = 0\n    ans = 0\n    for l in range(N):\n        while r < N and A[r] & b == 0:\n            b |= A[r]\n            r += 1\n        ans += r - l\n        b = b ^ A[l]\n\n    print(ans)\n\n\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    ans = 0\n    right = 0\n    s = 0\n\n    for left in range(N):\n        while right < N and s & (s ^ A[right]) == s:\n            s ^= A[right]\n            right += 1\n\n        ans += right - left\n\n        if left == right:\n            right += 1\n        else:\n            s ^= A[left]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\nMOD = 10 ** 9 + 7\nsys.setrecursionlimit(20000000)\nINF = float(\"inf\")\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    # \u521d\u671f\u5024\n    right, ans, tmp = 0, 0, 0\n\n    # left\u306f0\u301cN\u307e\u3067\n    for left in range(N):\n        while right < N and tmp ^ A[right] == tmp + A[right]:\n            tmp += A[right]\n            ans += right - left + 1\n            right += 1\n\n        # \u30ea\u30b9\u30c8\u306e\u9577\u3055\u304c0\u306b\u306a\u3063\u305f\u3089\u3001\u3069\u3061\u3089\u3082\u4e00\u3064\u9032\u3081\u308b\n        if left == right:\n            right += 1\n        # \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306fleft\u3092\u4e00\u3064\u9032\u3081\u308b(\u5408\u8a08\u5024\u304b\u3089\u4e00\u756a\u5de6\u306e\u5024\u3092\u5f15\u3044\u3066\u304a\u304f)\n        else:\n            tmp -= A[left]\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\nans = r = x = 0\n\nfor l in range(N):\n  while r < l or r < N and x ^ A[r] == x + A[r]:\n    x^=A[r]\n    r+=1\n  ans+=r-l\n  x^=A[l]\n\nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))\n\nrt = 0\nres = 0\nx = 0\ns = 0\n\nfor lt in range(N):\n    while rt < N and x ^ A[rt] == s + A[rt]:\n        x ^= A[rt]\n        s += A[rt]\n        rt += 1\n    res += rt - lt\n    x ^= A[lt]\n    s -= A[lt]\n\nprint(res)", "#!/usr/bin/env python3\nimport sys\n\ndef solve(N: int, A: \"List[int]\"):\n    ans, t, s = 0, 0, 0\n    for h in range(N):\n        while t < N and s ^ A[t] == s + A[t]:\n            s += A[t]\n            t += 1\n        ans += t - h\n        s -= A[h]\n    return ans\n\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    print((solve(N, A)))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\ndef __starting_point():\n    #test()\n    main()\n\n__starting_point()", "n = int(input())\nA = list(map(int, input().split()))\nxsum = A[0]\nasum = A[0]\nans = 0\nleft, right = 0, 0\n\nwhile True:\n  if xsum == asum:\n    ans += right - left + 1\n    right += 1\n    if right == n:\n      break\n    asum += A[right]\n    xsum ^= A[right]\n  else:\n    asum -= A[left]\n    xsum ^= A[left]\n    left += 1\nprint(ans)\n", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int,readline().split()))\n\ndef isOk(xor, val):\n  while xor and val:\n    if xor & 1 and val & 1:\n      return False\n    xor >>= 1\n    val >>= 1\n  return True\n  \nxor = 0\nright = 0\nans = 0\nfor left in range(N):\n  while right < N and isOk(xor, A[right]):\n    xor ^= A[right]\n    right += 1\n  ans += right - left\n  \n  if left == right:\n    right += 1\n  else:\n    xor ^= A[left]\n    \nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))\n\nr = 0\nxor = 0\ntotal = 0\ncnt = 0\nfor l in range(N):\n    while r < N and total + A[r] == xor ^ A[r]:\n        total += A[r]\n        xor ^= A[r]\n        r += 1\n\n    cnt += r - l\n    \n    total -= A[l]\n    xor ^= A[l]\nprint(cnt)", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    right = 0\n    now_sum = 0\n    now_xor = 0\n    ans = 0\n    for left in range(n):\n        while right < n and a[right] + now_sum == now_xor ^ a[right]:\n            now_sum += a[right]\n            now_xor ^= a[right]\n            right += 1\n        ans += right - left\n        if right == left:\n            right += 1\n        else:\n            now_sum -= a[left]\n            now_xor ^= a[left]\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nnum = list(map(int, input().split()))\n\nans = 0\nr = 0\nsumz = 0\nfor l in range(N):\n    if r < l: r = l\n\n    while (r < N) and (num[r] + sumz) == (sumz ^ num[r]):\n        sumz += num[r]\n        r += 1\n\n    ans += r-l\n    sumz -= num[l]\n\nprint(ans)\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    ng = 0\n    cum_xor = 0\n    # \u3057\u3083\u304f\u3068\u308a\u6cd5\u3067ng\u30b1\u30fc\u30b9\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u3044\u304f\n    right = 0\n    for left in range(N):\n        if left > 0:\n            # 1\u3064\u524d\u7531\u6765\u306e\u7acb\u3063\u3066\u3044\u308bbit\u3092\u6d88\u3059\n            cum_xor ^= A[left - 1]\n        # \u540c\u6642\u306b\u7acb\u3063\u3066\u3044\u308bbit\u304c\u7121\u3044\u9650\u308axor\u3092\u3068\u308a\u7d9a\u3051\u308b\n        while right < N and cum_xor & A[right] == 0:\n            cum_xor ^= A[right]\n            right += 1\n        # \u5de6\u7aef\u304cleft\u3068\u306a\u308bng\u30b1\u30fc\u30b9\u306e\u6570\u3092\u52a0\u7b97\n        ng += N - right\n    print(N * (N + 1) // 2 - ng)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nS = 0\nX = 0\nend = -1\n\nfor i in range(N):\n  while end < N-1:\n    end += 1\n    S += A[end]\n    X ^= A[end]\n    if S != X:\n      S -= A[end]\n      X ^= A[end]\n      end -= 1\n      break\n  ans += end - i + 1\n  S -= A[i]\n  X ^= A[i]\n\nprint(ans)", "# coding: utf-8\n\n# https://atcoder.jp/contests/abc098/tasks/arc098_b\n# give up\n# 15:29-16:15\n\n\ndef bin20(x):\n    bin_x = bin(x)[2:]\n    x_len = len(bin_x)\n\n    return list(map(int, \"0\" * (20-x_len) + bin_x))\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A = [bin20(a) for a in A]\n\n    ans = 0\n    left = 0\n    right = 0\n    sum20 = [0] * 20\n    pre_right = -1\n    while True:\n        if right > pre_right:\n            for k in range(20):\n                sum20[k] += A[right][k]\n\n        pre_right = right\n\n        if 2 in sum20:\n            for k in range(20):\n                sum20[k] -= A[left][k]\n            ans += right - left\n            left += 1\n        else:\n            right += 1\n\n        if right == N:\n            ans += (N-left) * (N-left+1) // 2\n\n            return ans\n\n\nprint((main()))\n", "N = int(input())\nA = [int(i) for i in input().split()]\n\nleft = 0\ntotal = 0\nxor = 0\nans = 0\nfor right in range(N):\n    total += A[right]\n    xor ^= A[right]\n    while total != xor:\n        total -= A[left]\n        xor ^= A[left]\n        left += 1\n    ans += right - left + 1\n    \nprint(ans)", "def ind(S):\n  L4=list()\n  for i in range(len(S)):\n    if S[len(S)-i-1]==\"1\":\n      L4.append(i)\n  return set(L4)\nN=int(input())\nL=list(map(int,input().split()))\nL=[ind(bin(i)[2:]) for i in L]\nans=0\nn=0\ni=0\nT=set()\nwhile True:\n  if i==N and n==N:\n    break\n  elif i==N:\n    ans+=i-n\n    n+=1\n    continue\n  if T&L[i]==set():\n    T=T|L[i]\n    ans+=1\n    i+=1\n  else:\n    T=T-L[n]\n    n+=1\n    ans+=i-n\n  if i==N and n!=N:\n    n+=1\nprint(ans)", "def abc098_d():\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = 0\n    rt = 0\n    total = 0\n    for lf in range(n):\n        while rt < n:\n            if total ^ A[rt] == total + A[rt]:\n                total += A[rt]\n                rt += 1\n            else:\n                break\n        ans += rt - lf\n        if lf == rt: rt += 1\n        else: total -= A[lf]\n    print(ans)\n\ndef __starting_point():\n    abc098_d()\n__starting_point()"]