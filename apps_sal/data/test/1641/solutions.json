["# Question B. Road to Cinema\nimport sys\n\ndef roadToCinema(V, S, T, stations): # O(M)\n    \"\"\"\n    V       : volume of fuel tank\n    S       : total distance\n    T       : time limit\n    stations: fuel stations' locations\n\n    rtype   : boolean, whether this aircraft can travel within the time limit\n    \"\"\"\n    m = len(stations)\n    t = 0\n    stations.append(S) # destination\n    prev = 0\n    for cur in stations:\n        dis = cur - prev\n        # let Sa, Sb as the distance of accelerated mode/ normal mode respectively\n        # then the task is:\n        #  min t = (Sa + 2 * Sb)\n        # s.t. Sa + Sb = dis\n        #      2 * Sa + Sb <= V\n\n        if dis > V:\n            # Sa <= V - dis < 0\n            return False\n        else:\n            # t = Sa + 2Sb = 3(Sa + Sb) - (2Sa + Sb)\n            #   >= 3 * dis - V\n            # on the other hand, Sb is non-negative\n            # Sb = t - dis\n            t += max(dis * 3 - V, dis)\n\n        if t > T:\n            return False\n\n        prev = cur\n\n    return True\n\ndef binSearch(S, T, stations): # O(logS * M)\n    \"\"\"\n    to find the least tank volume to enable the aircraft to complete the journey\n    the fastest way is to complete the whole journey with the speed of 2km/min, at 2L/km\n    V <= 2S \n    \"\"\"\n    l = stations[0]\n    r = S * 2\n\n    for i in range(1, len(stations)):\n        l = max(stations[i] - stations[i - 1], l)\n\n    l = max(l, S - stations[-1])\n    r = 2 * l\n    \n    if T < S:\n        return float(\"inf\")\n\n    while l + 1 < r:\n        m = l + (r - l) // 2\n        if roadToCinema(m, S, T, stations) == True:\n            r = m\n        else:\n            l = m\n    \n    if roadToCinema(l, S, T, stations):\n        return l\n    if roadToCinema(r, S, T, stations):\n        return r\n    return float(\"inf\")\n\ndef __starting_point(): # O(logS * M + N)\n    \n    line = sys.stdin.readline()\n    [N, M, S, T] = list(map(int, line.split(\" \")))\n\n    aircrafts = []\n    for i in range(N):\n        [c, v] = list(map(int, sys.stdin.readline().split(\" \")))\n        aircrafts.append([c, v])\n\n    stations = list(map(int, sys.stdin.readline().split(\" \")))\n    stations.sort()\n\n    minVolume = binSearch(S, T, stations)\n    \n    if minVolume == float(\"inf\"):\n        # no aircraft can complete the journey\n        print(-1)\n    else:\n        res = float(\"inf\")\n        for i in range(N):\n            if aircrafts[i][1] >= minVolume:\n                res = min(res, aircrafts[i][0])\n\n        if res == float('inf'):\n            # no given aircraft can complete the journey\n            print(-1)\n        else:\n            print(res)\n__starting_point()", "# Question B. Road to Cinema\nimport sys\n\ndef roadToCinema(V, S, T, stations): # O(M)\n    \"\"\"\n    V       : volume of fuel tank\n    S       : total distance\n    T       : time limit\n    stations: fuel stations' locations\n\n    rtype   : boolean, whether this aircraft can travel within the time limit\n    \"\"\"\n    m = len(stations)\n    t = 0\n    stations.append(S) # destination\n    prev = 0\n    for cur in stations:\n        dis = cur - prev\n        # let Sa, Sb as the distance of accelerated mode/ normal mode respectively\n        # then the task is:\n        #  min t = (Sa + 2 * Sb)\n        # s.t. Sa + Sb = dis\n        #      2 * Sa + Sb <= V\n\n        if dis > V:\n            # Sa <= V - dis < 0\n            return False\n        else:\n            # t = Sa + 2Sb = 3(Sa + Sb) - (2Sa + Sb)\n            #   >= 3 * dis - V\n            # on the other hand, Sb is non-negative\n            # Sb = t - dis\n            t += max(dis * 3 - V, dis)\n\n        if t > T:\n            return False\n\n        prev = cur\n\n    return True\n\ndef binSearch(S, T, stations): # O(logS * M)\n    \"\"\"\n    to find the least tank volume to enable the aircraft to complete the journey\n    the fastest way is to complete the whole journey with the speed of 2km/min, at 2L/km\n    V <= 2S \n    \"\"\"\n    l = 0\n    r = S * 2\n\n    if T < S:\n        return float(\"inf\")\n\n    while l + 1 < r:\n        m = l + (r - l) // 2\n        if roadToCinema(m, S, T, stations) == True:\n            r = m\n        else:\n            l = m\n    \n    return r\n\ndef __starting_point(): # O(logS * M + N)\n    \n    line = sys.stdin.readline()\n    [N, M, S, T] = list(map(int, line.split(\" \")))\n\n    aircrafts = []\n    for i in range(N):\n        [c, v] = list(map(int, sys.stdin.readline().split(\" \")))\n        aircrafts.append([c, v])\n\n    stations = list(map(int, sys.stdin.readline().split(\" \")))\n    stations.sort()\n\n    minVolume = binSearch(S, T, stations)\n    \n    if minVolume == float(\"inf\"):\n        # no aircraft can complete the journey\n        print(-1)\n    else:\n        res = float(\"inf\")\n        for i in range(N):\n            if aircrafts[i][1] >= minVolume:\n                res = min(res, aircrafts[i][0])\n\n        if res == float('inf'):\n            # no given aircraft can complete the journey\n            print(-1)\n        else:\n            print(res)\n__starting_point()", "# Question B. Road to Cinema\nimport sys\n\ndef roadToCinema(V, S, T, stations): # O(M)\n    \"\"\"\n    V       : volume of fuel tank\n    S       : total distance\n    T       : time limit\n    stations: fuel stations' locations\n\n    rtype   : boolean, whether this aircraft can travel within the time limit\n    \"\"\"\n    m = len(stations)\n    t = 0\n    stations.append(S) # destination\n    prev = 0\n    for cur in stations:\n        dis = cur - prev\n        # let Sa, Sb as the distance of accelerated mode/ normal mode respectively\n        # then the task is:\n        #  min t = (Sa + 2 * Sb)\n        # s.t. Sa + Sb = dis\n        #      2 * Sa + Sb <= V\n\n        if dis > V:\n            # Sa <= V - dis < 0\n            return False\n        else:\n            # t = Sa + 2Sb = 3(Sa + Sb) - (2Sa + Sb)\n            #   >= 3 * dis - V\n            # on the other hand, Sb is non-negative\n            # Sb = t - dis\n            t += max(dis * 3 - V, dis)\n\n        if t > T:\n            return False\n\n        prev = cur\n\n    return True\n\ndef binSearch(S, T, stations): # O(logS * M)\n    \"\"\"\n    to find the least tank volume to enable the aircraft to complete the journey\n    the fastest way is to complete the whole journey with the speed of 2km/min, at 2L/km\n    V <= 2S \n    \"\"\"\n    l = 0\n    r = S * 2\n\n    if T < S:\n        return float(\"inf\")\n\n    while l + 1 < r:\n        m = l + (r - l) // 2\n        if roadToCinema(m, S, T, stations) == True:\n            r = m\n        else:\n            l = m\n    \n    return r\n\ndef __starting_point(): # O(logS * M + N)\n    \n    line = sys.stdin.readline()\n    [N, M, S, T] = list(map(int, line.split(\" \")))\n\n    aircrafts = []\n    for i in range(N):\n        [c, v] = list(map(int, sys.stdin.readline().split(\" \")))\n        aircrafts.append([c, v])\n\n    stations = list(map(int, sys.stdin.readline().split(\" \")))\n    stations.sort()\n\n    minVolume = binSearch(S, T, stations)\n    \n    if minVolume == float(\"inf\"):\n        # no aircraft can complete the journey\n        print(-1)\n    else:\n        res = float(\"inf\")\n        for i in range(N):\n            if aircrafts[i][1] >= minVolume:\n                res = min(res, aircrafts[i][0])\n\n        if res == float('inf'):\n            # no given aircraft can complete the journey\n            print(-1)\n        else:\n            print(res)\n\n__starting_point()"]