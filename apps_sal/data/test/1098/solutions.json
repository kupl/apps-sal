["n = int(input())\na = []\nfor i in range(n):\n\th, m = map(int, input().split(\":\"))\n\ta.append((h + 24) * 60 + m)\n\ta.append(h * 60  + m)\na.sort()\nj = 0\ns = 0\nans = 0\nfor i in range(0, 48 * 60):\n\tif (j < 2 * n and a[j] == i):\n\t\tans = max(ans, s)\n\t\ts = 0\n\t\tj += 1\n\t\tcontinue\n\telse:\n\t\ts += 1\nh = ans // 60\nm = ans % 60\nhans = \"\"\nmans = \"\"\nif h < 10:\n\thans = \"0\" + str(h)\nelse:\n\thans = str(h)\nif m < 10:\n\tmans = \"0\" + str(m)\nelse:\n\tmans = str(m)\nprint(hans + \":\" + mans)", "import datetime\n\n\nn = int(input())\ndts_i = [[int(y) for y in input().split(':')] for x in range(n)]\ndts = []\n\nfor h, m in dts_i:\n    dts.append(datetime.datetime(2017, 1, 1, h, m))\n\nfor h, m in dts_i:\n    dts.append(datetime.datetime(2017, 1, 2, h, m))\n\nfor h, m in dts_i:\n    dts.append(datetime.datetime(2017, 1, 3, h, m))\n\ndts = sorted(dts)\npairs = list(zip(dts, dts[1:]))\nlo, hi = max(pairs, key=lambda xy: xy[1] - xy[0])\ndelta = hi - lo - datetime.timedelta(minutes=1)\n\nhours, remainder = divmod(delta.seconds, 3600)\nminutes, seconds = divmod(remainder, 60)\n\nprint('{0:02d}:{1:02d}'.format(hours, minutes))\n", "import sys\nn=int(input())\nif n==1:\n    print('23:59')\n    return\na=[]\nfor i in range(n):\n    k,b=map(int,input().split(':'))\n    a+=[k*60+b]\n\na=sorted(a)\n\nmn=0\nfor i in range(1,n):\n    mn=max(mn,a[i]-a[i-1])\nmn=max(mn,24*60-a[n-1]+a[0])\nmn-=1\ns=''\nif(mn//60<10): s+='0'\ns+=str(mn//60)\ns+=':'\nif(mn%60<10): s+='0'\ns+=str(mn%60)\nprint(s)", "n = int(input())\nday = 24 * 60\nv = []\nfor i in range(n) :\n    s = input()\n    h = int(s[0]) * 10 + int(s[1])\n    m = int(s[3]) * 10 + int(s[4])\n    tim = h * 60 + m\n    v.append(int(tim))\n    v.append(int(tim + day))\n    v.append(int(tim + day + day))\nv.sort()\nans = 0\nfor i in range (len(v)) :\n    if i > 0:\n        ans = max(ans, v[i] - v[i - 1] - 1)\nm = ans % 60\nh = ans // 60\nprint(str(h // 10) + str(h % 10) + ':' + str(m // 10) +  str(m % 10))", "n = int(input())\na = []\n\nfor i in range(n):\n    str = input()\n    h = int(str[0:2]) * 60\n    m = int(str[3:5])\n    a.append(h + m)\n\na.sort()\n\nmx = 0\n\nfor i in range(n - 1):\n    if mx < ((-a[i] + a[i + 1]) - 1):\n        mx = ((-a[i] + a[i + 1]) - 1)\nif mx < (1440 + a[0] - a[n - 1] - 1):\n    mx = 1440 + a[0] - a[n - 1] - 1\n\nif (mx // 60) < 10:\n    print('0',end='')\n    \nprint(mx // 60,end='')\n\nprint(':',end='')\n\nif (mx % 60) < 10:\n    print('0',end='')\n\nprint(mx % 60)\n", "n=int(input())\nh=[0] * n\nm=[0] * n\nfor i in range(0,n) :\n    h[i],m[i]=map(int,input().split(':'))\nfor i in range(0,n) :\n    for j in range(i,n) :\n        if h[j]<h[i] or (h[j]==h[i] and m[j]<m[i]) :\n            t=h[j]\n            h[j]=h[i]\n            h[i]=t\n            t=m[j]\n            m[j]=m[i]\n            m[i]=t\nmxh=0\nmxm=0\nfor i in range(0,n) :\n    if i==n-1 :\n        nowh=h[0]+24-h[i]\n        nowm=m[0]-m[i]-1\n        if nowm < 0 :\n            nowh=nowh-1\n            nowm=nowm+60\n        if mxh<nowh or (mxh==nowh and mxm<nowm) :\n            mxh=nowh\n            mxm=nowm\n    else :\n        nowh=h[i+1]-h[i]\n        nowm=m[i+1]-m[i]-1\n        if nowm < 0 :\n            nowh=nowh-1\n            nowm=nowm+60\n        if mxh<nowh or (mxh==nowh and mxm<nowm) :\n            mxh=nowh\n            mxm=nowm\nprint('%02d:%02d'%(mxh,mxm))", "n = int(input())\nx = []\nfor i in range (n):\n    a, b = map(int, (input().split(':')))\n    x.append(a*60 + b);\nx = sorted(x)\nx.append(x[0] + 24*60)\nm = 0\nfor i in range(n):\n    m = max(m, x[i+1] - x[i]-1)\nx = str(m // 60)\ny = str(m % 60)\nif len(x) < 2:\n    x = '0' + x\nif len(y) < 2:\n    y = '0' + y\ns = x + ':' + y\nprint(s)", "n = int(input())\ns = ['.'] * n\nmx = 0\nfor i in range(n):\n    s[i] = input()\nif n == 1:\n    print('23:59')\nelse:\n    s = sorted(s)\n    for i in range(n):\n        i1 = i\n        i2 = (i + 1) % n\n        col1 = int(s[i1][0:2]) * 60 + int(s[i1][3:5])\n        col2 = int(s[i2][0:2]) * 60 + int(s[i2][3:5])\n        if col1 > col2:\n            if mx < col2 + 60 * 24 - col1 - 1:\n                mx = col2 + 60 * 24 - col1 - 1\n        else:\n            if mx < col2 - col1 - 1:\n                mx = col2 - col1 - 1\n    print((mx // 60) // 10, (mx // 60) % 10, ':', (mx % 60) // 10, (mx % 60) % 10, sep = '')\n \n", "n=int(input())\na=[0]*1000\nfor i in range(n):\n    s=input()\n    t1=s[0]+s[1]\n    t2=s[3]+s[4]\n    a[i]=60*int(t1)+int(t2)\nfor i in range(n):\n    for j0 in range(i,n-1):\n        j=n+i-2-j0\n        if (a[j]>a[j+1]):\n            q=a[j+1]\n            a[j+1]=a[j]\n            a[j]=q\na[n]=24*60+a[0]\nmx=a[0]\nfor i in range(n):\n    mx=max(mx,a[i+1]-a[i]-1)\nq1=(mx//60)\nq2=(mx%60)\nif q1==0:\n    s1=\"00\"\nelif q1<10:\n    s1=\"0\"+str(q1)\nelse:\n    s1=str(q1)\n\nif q2==0:\n    s2=\"00\"\nelif q2<10:\n    s2=\"0\"+str(q2)\nelse:\n    s2=str(q2)\nprint(s1+\":\"+s2)\n", "n = int(input())\nt = []\nfor i in range(n):\n    t.append(tuple(map(int, input().split(':'))))\n\nans = 0\n\nt.sort()\nt = t + [(v[0]+24, v[1]) for v in t]\n\nfor i in range(len(t)-1):\n    #print(t[i+1][0] - t[i][0])*60+(t[i+1][1] - t[i][1])\n    ans = max(ans, (t[i+1][0] - t[i][0])*60+(t[i+1][1] - t[i][1]) - 1)\n\n\nprint('{}:{}'.format(str(ans//60).rjust(2, '0'), str(ans%60).rjust(2, '0')))", "n = int(input())\np = list()\nfor i in range(0, n):\n    g, o = list(map(int, input().split(':')))\n    p.append(g * 60 + o)\np.sort()\nansw = 1440 - p[n - 1] + p[0]\nfor i in range(1, n):\n    answ = max(answ, p[i] - p[i - 1])\nk = str()\nansw = answ - 1\nif (answ // 60 < 10):\n    k = k + \"0\" + str(answ // 60) + \":\"\nelse:\n    k = k + str(answ // 60) + \":\"\nif (answ % 60 < 10):\n    k = k + \"0\" + str(answ % 60)\nelse:\n    k = k + str(answ % 60)\nprint(k)\n", "n = int(input())\ntime = [None] * n\nfor i in range(n):\n\tt = input()\n\th, m = t.split(':')\n\th, m = int(h), int(m)\n\tnum = h*60 + m\n\ttime[i] = num\ntime.sort()\ntime.append(time[0] + 1440)\nans = (time[1] - time[0] - 1)\nfor i in range(i+1):\n    ans = max(ans, time[i+1] - time[i] - 1)\nprint('{:02d}:{:02d}'.format(*divmod(ans, 60)))\n    \n\n", "n = int(input())\nalarms = []\nfor i in range (n):\n    line = [int(x) for x in input().strip().split(':')]\n    alarms.append(line[0] * 60 + line[1])\nalarms = sorted(alarms)\ntmp = [1440 + x for x in alarms]\nalarms += tmp\nans = 0\nfor i in range(1, len(alarms)):\n    if (i > 0):\n        ans = max(ans, alarms[i] - alarms[i - 1] - 1)\nprint(\"%02d:%02d\" % (ans // 60, ans % 60))", "n = int(input())\ntimes = [0] * 2880\nfor _ in range(n):\n    hh, mm = map(int, input().split(':'))\n    t = hh * 60 + mm\n    times[t] = 1\n    times[t + 1440] = 1\n\ni = 0\nres = -1\nwhile i < 1440:\n    for j in range(i, i + 1440):\n        if times[j] == 1:\n            break\n    res = max(res, j - i)\n    i = j + 1\nhh, mm = divmod(res, 60)\nprint('{:02d}:{:02d}'.format(hh, mm))", "n = int(input())\narr = []\nfor i in range(n):\n    h, m = map(int, input().split(':'));\n    cur = h * 60 + m;\n    arr.append(cur)\narr.sort()\narr.append(24 * 60 + arr[0])\nmaxx = 0\nfor i in range(1, len(arr)):\n    maxx = max(maxx, arr[i] - arr[i - 1] - 1)\nm = maxx % 60\nh = maxx // 60\nif (h < 10):\n    print(0, end ='');\nprint(h, ':', sep = '', end = '')\nif (m < 10):\n    print(0, end = '')\nprint(m)", "our = []\nfor i in range(int(input())):\n    s = input()\n    our.append(int(s[0:2]) * 60 + int(s[3:]))\nour.sort()\nour.append(our[0] + 24 * 60)\n\nres = 0\nfor i in range(len(our) - 1):\n    res = max(res, our[i + 1] - our[i])\n\nres -= 1\nhour = str(res // 60)\nminute = str(res % 60)\nif len(hour) < 2:\n    hour = '0' + hour\nif len(minute) < 2:\n    minute = '0' + minute\nprint(hour + ':' + minute)", "def formatted_number(number):\n\tif (number < 10):\n\t\treturn \"0\" + str(number)\n\n\treturn str(number)\n\n\ndef print_max_duration(time):\n\thh = time // 60\n\tmm = time - hh * 60\n\n\tprint(formatted_number(hh)+\":\"+formatted_number(mm))\n\n\ndef parse_minutes(time):\n\thh = int(time[0:2])\n\tmm = int(time[3:])\n\treturn hh * 60 + mm\n\ndef main():\n\tn = int(input())\n\n\tarr = []\n\n\tfor i in range(n):\n\t\tarr.append(parse_minutes(input()))\n\n\tarr = sorted(arr)\n\n\tmax_duration = 0\n\tfor i in range(n - 1):\n\t\tmax_duration = max(max_duration, arr[i + 1] - arr[i] - 1)\n\n\tmax_duration = max(max_duration, (24 * 60 - arr[n - 1] - 1) + arr[0])\n\tprint_max_duration(max_duration)\n\n\n\ndef __starting_point():\n\tmain()\n__starting_point()", "n = int(input())\na = []\ndef mem(kek):\n    return (int(kek[0])*10 + int(kek[1]))*60 + int(kek[3])*10 + int(kek[4])\ndef lol(kek):\n    h = str(kek//60)\n    m = str(kek%60)\n    ans = \"\"\n    if (len(h)<2): ans+=\"0\"\n    ans+=h\n    ans+=\":\"\n    if (len(m)<2): ans+=\"0\"\n    ans+=m\n    return ans\ndelt = 60*24\nfor i in range(n):\n    st = input()\n    a.append(mem(st))\n    a.append(mem(st)+delt )\n    a.append(mem(st)+2*delt)\n\na = sorted(a)\nans = 0\nfor i in range(1,len(a)):\n    ans = max(ans, a[i] - a[i-1] - 1)\nprint(lol(ans))\n", "n = int(input())\ntimes = []\nfor _ in range(n):\n    time = str(input())\n    times.append((int(time[:2]), int(time[3:])))\n\ntimes.sort()\n\ndef to_minutes(a):\n    return 60*a[0] + a[1]\n\ndef to_hours(a):\n    return (a // 60, a % 60)\n\ndef pad(a):\n    return ('0' if a < 10 else '') + str(a)\n\nlongest = 0\nfor i in range(1, n):\n    longest = max(longest, to_minutes(times[i]) - to_minutes(times[i - 1]))\n\nlongest = max(longest, 60*24 + to_minutes(times[0]) - to_minutes(times[n - 1]))\n\nlongest -= 1\n\nhours, minutes = to_hours(longest)\n\n\nprint(pad(hours), ':', pad(minutes), sep='')", "def f(x):\n\tif x < 10:\n\t\treturn \"0\" + str(x)\n\treturn str(x)\n\nn = int(input())\ntimes = []\nfor i in range(0, n):\n\ts = input()\n\ttimes.append(60 * int(s[0:2]) + int(s[3:5]))\n\ttimes.append(60 * 24 + 60 * int(s[0:2]) + int(s[3:5]))\ntimes.sort()\nans = times[1] - times[0] - 1\nfor i in range(1, len(times)):\n\tans = max(ans , times[i] - times[i - 1] - 1) \nprint(\"{}:{}\".format(f(ans // 60), f(ans % 60)))", "n=int(input())\na=[]\nfor i in range(n):\n    h,m=map(int,input().split(':'))\n    a+=[h*60+m]\na.sort()\na+=[a[0]+24*60]\nans=-1\nfor i in range(n):\n    ans=max(ans,a[i+1]-a[i]-1)\nh,m=ans//60,ans%60\nif h<10:\n    print(0,end='')\nprint(h,end=':')\nif m<10:\n    print(0,end='')\nprint(m,end='')\n", "b = int(input())\ntimes = []\nline = \"\"\na = b\nwhile a > 0:\n    a-=1\n    curr_time = input().split(\":\")\n    times.append(int(curr_time[0])*60+int(curr_time[1]))\ntimes.sort()\ntimes.append(times[0]+24*60)\nmax_delta = 0\nif times[0] > max_delta:\n    max_delta = times[0]\nfor it in range(1,b+1):\n    if times[it] - times[it - 1] > max_delta:\n        max_delta = times[it] - times[it-1] - 1\nif max_delta // 60 < 10:\n    first = \"0\"+str(max_delta // 60)\nelse:\n    first = str(max_delta // 60)\nif max_delta - 60 * (max_delta // 60) < 10:\n    second = \"0\"+str(max_delta - 60 * (max_delta // 60))\nelse:\n    second = str(max_delta - 60 * (max_delta // 60))\nprint(first + \":\" + second)", "def dist(a, b):\n    minsa = int(a.split(':')[0]) * 60 + int(a.split(':')[1])\n    minsb = int(b.split(':')[0]) * 60 + int(b.split(':')[1])\n    return minsb - minsa - 1\n\n\ndef ldist(a, b):\n    minsa = (int(a.split(':')[0]) + 24) * 60 + int(a.split(':')[1])\n    minsb = int(b.split(':')[0]) * 60 + int(b.split(':')[1])\n    return minsa - minsb - 1\n    \n\na = int(input())\nx = []\nfor i in range(a):\n    t = input()\n    x.append(t)\nx = sorted(x)\nans = 0\nfor i in range(0, len(x) - 1):\n    r = dist(x[i], x[i + 1])\n    ans = max(r, ans)\n\nans = max(ans, ldist(x[0], x[len(x) - 1]))\n# print(ldist(x[0], x[len(x) - 1]))\n\nh = ans // 60\nm = ans - (h * 60)\nif (h < 10):\n    if (m < 10):\n        print(\"0\" + str(h) + \":0\" + str(m))\n    else:    \n        print(\"0\" + str(h) + \":\" + str(m))\nelse:\n    if (m < 10):\n        print(str(h) + \":0\" + str(m))\n    else:    \n        print(str(h) + \":\" + str(m))\n", "n = int(input())\nminutes = []\nfor i in range(n):\n    s = input()\n    minutes.append(int(s[:-3]) * 60 + int(s[-2:]))\nminutes.sort()\n\nmax = 0\nfor i in range(0, n - 1):\n    cur = minutes[i + 1] - minutes[i] - 1;\n    \n    if cur > max:\n        max = cur\n\ncur = 24*60 - (minutes[-1] - minutes[0]) - 1\nif cur > max:\n    max = cur\n\nhours = max // 60\nminutes = max - hours * 60\n\nh_str = str(hours)\nif len(h_str) < 2:\n    h_str = \"0\" + h_str\n    \nm_str = str(minutes)\nif len(m_str) < 2:\n    m_str = \"0\" + m_str\n    \nprint(h_str+\":\"+m_str)", "n = int(input())\n\nalarms = []\n\nfor i in range(n):\n    h, m = list(map(int, input().split(':')))\n    t = h * 60 + m\n    alarms.append(t)\n    \nalarms.sort()\n\n# print(alarms)\nalarms.append(alarms[0] + 24 * 60)\nmx = -1\nfor i in range(1, len(alarms)):\n    if (mx < alarms[i] - alarms[i - 1]):\n        mx = alarms[i] - alarms[i - 1]\nmx -= 1\nprint('{:02d}:{:02d}'.format(mx // 60, mx % 60))\n"]