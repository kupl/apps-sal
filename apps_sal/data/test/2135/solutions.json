["h, w = list(map(int, input().split()))\nfield = [[c == \".\" for c in input()] + [False] for i in range(h)]\nfield.append([False] * (w + 1))\n\nsubVerts = [[0] * (w + 1) for i in range(h + 1)]\nsubHoriz = [[0] * (w + 1) for i in range(h + 1)]\n\nfor y in range(h):\n    subVerts[y][0] = 0\n    subHoriz[y][0] = 0\n\nfor x in range(w):\n    subHoriz[0][x] = 0\n    subVerts[0][x] = 0\n\nfor y in range(h):\n    for x in range(w):\n        subVerts[y + 1][x + 1] = subVerts[y + 1][x] + subVerts[y][x + 1] - subVerts[y][x]\n        if field[y][x] and field[y - 1][x]:\n            subVerts[y + 1][x + 1] += 1\n        \n        subHoriz[y + 1][x + 1] = subHoriz[y + 1][x] + subHoriz[y][x + 1] - subHoriz[y][x]\n        if field[y][x] and field[y][x - 1]:\n            subHoriz[y + 1][x + 1] += 1\n\n\n\nq = int(input())\nfor i in range(q):\n    y1, x1, y2, x2 = [int(x) - 1 for x in input().split()]\n    ansHoriz = subHoriz[y2 + 1][x2 + 1] - subHoriz[y1][x2 + 1] - subHoriz[y2 + 1][x1 + 1] + subHoriz[y1][x1 + 1]\n    ansVerts = subVerts[y2 + 1][x2 + 1] - subVerts[y1 + 1][x2 + 1] - subVerts[y2 + 1][x1] + subVerts[y1 + 1][x1]\n    print(ansHoriz + ansVerts)\n", "#!/usr/bin/env python3\n\ndef string2d(arr):\n    return ('\\n'.join(' '.join(map(str, row)) for row in arr))\n\nH, W = list(map(int, input().split()))\ngrid = [[c == '.' for c in input()] for i in range(H)]\n\nblah1 = [[0 for j in range(W)] for i in range(H)]  # horizontal\nblah2 = [[0 for j in range(W)] for i in range(H)]  # vertical\n\nfor i in range(H):\n    for j in range(W):\n        if not grid[i][j]:\n            continue\n        if j+1 < W and grid[i][j+1]:\n            blah1[i][j] = 1\n        if i+1 < H and grid[i+1][j]:\n            blah2[i][j] = 1\n\n# prefix sums\npref1 = [[0 for j in range(W+1)] for i in range(H+1)]\npref2 = [[0 for j in range(W+1)] for i in range(H+1)]\n\nfor i in range(1, H+1):\n    for j in range(1, W+1):\n        pref1[i][j] = pref1[i-1][j] + blah1[i-1][j-1]\n        pref2[i][j] = pref2[i-1][j] + blah2[i-1][j-1]\nfor i in range(1, H+1):\n    for j in range(1, W+1):\n        pref1[i][j] += pref1[i][j-1]\n        pref2[i][j] += pref2[i][j-1]\n\n#print('blah:')\n#print(string2d(blah1), '--', string2d(blah2), sep='\\n')\n#print('pref:')\n#print(string2d(pref1), '--', string2d(pref2), sep='\\n')\n\nQ = int(input())\nfor q in range(Q):\n    r1, c1, r2, c2 = list(map(int, input().split()))\n    one = pref1[r2][c2-1] - pref1[r2][c1-1] - pref1[r1-1][c2-1] + pref1[r1-1][c1-1]\n    two = pref2[r2-1][c2] - pref2[r2-1][c1-1] - pref2[r1-1][c2] + pref2[r1-1][c1-1]\n    #print('one:', pref1[r2][c2-1], '-', pref1[r1-1][c1-1], '(%d %d)' % (r2, c2-1))\n    #print('two:', pref2[r2-1][c2], '-', pref2[r1-1][c1-1], '(%d %d)' % (r2-1, c2))\n    #print('result:', one, '+', two, '=', one+two)\n    print(one + two)\n", "def transpose(grid):\n    return [[grid[y][x] for y in range(len(grid))] for x in range(len(grid[0]))]\n\ndef preprocess(grid):\n    st1 = [[x >= 1 and grid[y][x-1] == grid[y][x] == '.'\n            for x in range(len(grid[0]))]\n           for y in range(len(grid))]\n    st2 = [[0 for x in range(len(st1[0]))] for y in range(len(st1))]\n    for y in range(len(st1)):\n        for x in range(len(st1[0])):\n            st2[y][x] = ((st2[y-1][x] if y >= 1 else 0) +\n                         (st2[y][x-1] if x >= 1 else 0) -\n                         (st2[y-1][x-1] if y >= 1 and x >= 1 else 0) +\n                         int(st1[y][x]))\n    return st2\n\nimport pprint\n\nh, w = [int(x) for x in input().split()]\ngrid = [input() for y in range(h)]\npre, pre2 = preprocess(grid), transpose(preprocess(transpose(grid)))\n#print(len(pre), len(pre[0]), len(pre2), len(pre2[0]))\n#pprint.pprint(pre)\n#pprint.pprint(pre2)\nq = int(input())\nfor qi in range(q):\n    r1, c1, r2, c2 = [int(x) for x in input().split()]\n    r1, c1, r2, c2 = r1-1, c1-1, r2-1, c2-1\n    \"\"\"val = (pre[r2][c2] +\n           (pre[r1-1][c1-1] if r1 >= 1 and c1 >= 1 else 0) -\n           (pre[r2][c1-1] if c1 >= 1 else 0) -\n           (pre[r1-1][c2] if r1 >= 1 else 0) +\n           pre2[r2][c2] +\n           (pre2[r1-1][c1-1] if r1 >= 1 and c1 >= 1 else 0) -\n           (pre2[r2][c1-1] if c1 >= 1 else 0) -\n           (pre2[r1-1][c2] if r1 >= 1 else 0))\n    \"\"\"\n    \"\"\"val = (pre[r2][c2] - pre[r2][c1] - pre[r1][c2] + pre[r1][c1] +\n           pre2[r2][c2] - pre2[r2][c1] - pre2[r1][c2] + pre2[r1][c1])\"\"\"\n    val = (pre[r2][c2] +\n           (pre[r1-1][c1] if r1 >= 1 else 0) -\n           (pre[r2][c1] if c1 >= 0 else 0) -\n           (pre[r1-1][c2] if r1 >= 1 else 0) +\n           pre2[r2][c2] +\n           (pre2[r1][c1-1] if c1 >= 1 else 0) -\n           (pre2[r2][c1-1] if c1 >= 1 else 0) -\n           (pre2[r1][c2] if r1 >= 0 else 0))\n    \"\"\"print(val, pre[r2][c2] +\n           (pre[r1-1][c1] if r1 >= 1 else 0) -\n           (pre[r2][c1] if c1 >= 0 else 0) -\n           (pre[r1-1][c2] if r1 >= 1 else 0),\n          pre2[r2][c2] +\n           (pre2[r1][c1-1] if c1 >= 1 else 0) -\n           (pre2[r2][c1-1] if c1 >= 1 else 0) -\n           (pre2[r1][c2] if r1 >= 0 else 0), r1, c1, r2, c2)\"\"\"\n    print(val)\n", "h, w = map(int, input().split())\nfield = [input() for i in range(h)]\nq = int(input())\n\ninrow = [[0] * (w + 1) for i in range(h + 1)]  # [row][end_col]\nfor i in range(h):\n    sum = 0\n    for j in range(1, w):\n        if field[i][j] == field[i][j - 1] == \".\":\n            sum += 1\n        inrow[i][j] = sum\nincol = [[0] * (h + 1) for i in range(w + 1)]  # [col][start_row]\nfor j in range(w):\n    sum = 0\n    for i in range(1, h):\n        if field[i][j] == field[i - 1][j] == \".\":\n            sum += 1\n        incol[j][i] = sum\nsuminrows = [[0] * (w + 1) for i in range(h + 1)]  # [end_row][end_col]\nfor j in range(w):\n    sum = 0\n    for i in range(h):\n        sum += inrow[i][j]\n        suminrows[i][j] = sum\nsumincols = [[0] * (h + 1) for i in range(w + 1)]  # [end_col][end_row]\nfor i in range(h):\n    sum = 0\n    for j in range(w):\n        sum += incol[j][i]\n        sumincols[j][i] = sum\nfor test in range(q):\n    r1, c1, r2, c2 = map(int, input().split())\n    r1, c1, r2, c2 = r1-1, c1-1, r2-1, c2-1\n    ans = 0\n    ans += (suminrows[r2][c2] - suminrows[r1 - 1][c2]) - (suminrows[r2][c1] - suminrows[r1 - 1][c1])\n    ans += (sumincols[c2][r2] - sumincols[c1 - 1][r2]) - (sumincols[c2][r1] - sumincols[c1 - 1][r1])\n    print(ans)", "__author__ = 'Utena'\nh,w=map(int,input().split())\nq=[[0]*w for i in range(h)]\nfor i1 in range(h):\n    n0=input()\n    for i in range(w):\n        if n0[i]=='#':\n            q[i1][i]=1\na=[[0]*w for i2 in range(h+1)]\nb=[[0]*(w+1) for i3 in range(h)]\nfor i in range(h):\n    for j in range(w-1):\n        if q[i][j]==q[i][j+1]==0:\n            a[i+1][j+1]=a[i+1][j]+1\n        else:\n            a[i+1][j+1]=a[i+1][j]\nfor i in range(1,h+1):\n    for j in range(w):\n        a[i][j]+=a[i-1][j]\nfor i in range(h-1):\n    for j in range(w):\n        if q[i][j]==q[i+1][j]==0:\n            b[i+1][j+1]=b[i][j+1]+1\n        else:\n            b[i+1][j+1]=b[i][j+1]\nfor i in range(h):\n    for j in range(1,w+1):\n        b[i][j]+=b[i][j-1]\nn=int(input())\nfor k in range(n):\n    r1,c1,r2,c2=list(map(int,input().split()))\n    t=a[r2][c2-1]-a[r2][c1-1]-a[r1-1][c2-1]+a[r1-1][c1-1]+b[r2-1][c2]-b[r1-1][c2]-b[r2-1][c1-1]+b[r1-1][c1-1]\n    print(t)", "h, w = list(map(int, input().split()))\nt = []\nfor i in range(h):\n    lis = input()\n    t.append(lis)\na = [[0 for i in range(w)] for j in range(h)]\nfor i in range(h):\n    maxi = 0\n    for j in range(1, w):\n        if t[i][j] == '.' == t[i][j - 1]:\n            a[i][j] = maxi + 1\n            maxi = max(maxi, a[i][j])\n        else:\n            a[i][j] = maxi\nd = [[0 for i in range(w)] for j in range(h)]\nfor i in range(w):\n    d[0][i] = a[0][i]\nfor i in range(1, h):\n    for j in range(w):\n        d[i][j] = d[i - 1][j] + a[i][j]\n\na = [[0 for i in range(w)] for j in range(h)]\nfor j in range(w):\n    maxi = 0\n    for i in range(1, h):\n        if t[i][j] == '.' == t[i - 1][j]:\n            a[i][j] = maxi + 1\n            maxi = max(maxi, a[i][j])\n        else:\n            a[i][j] = maxi\nd1 = [[0 for i in range(w)] for j in range(h)]\nfor i in range(h):\n    d1[i][0] = a[i][0]\nfor j in range(1, w):\n    for i in range(h):\n        d1[i][j] = a[i][j] + d1[i][j - 1]\nq = int(input())\nfor i in range(q):\n    r1, c1, r2, c2 = list(map(int, input().split()))\n    r1 -= 1\n    c1 -= 1\n    r2 -= 1\n    c2 -= 1\n    if r1 == 0 and c1 == 0:\n        print(d[r2][c2] + d1[r2][c2])\n    elif r1 == 0:\n        print(d[r2][c2]+d1[r2][c2]-d[r2][c1]-d1[r2][c1 - 1])\n    elif c1 == 0:\n        print(d[r2][c2] + d1[r2][c2] - d[r1 - 1][c2] - d1[r1][c2])\n    else:\n        print(d[r2][c2] + d1[r2][c2] - d[r1-1][c2] - d1[r1][c2] - d[r2][c1] - d1[r2][c1 - 1] + d[r1-1][c1] + d1[r1][c1-1])\n\n\n", "n , m = list(map(int, input().split()))\ns = ['#' * (m+2)]\nfor i in range(n):\n    s += ['#'+input()+'#']\ns+= ['#' * (m+2)] \nu = [[0 for i in range(m+2)] for j in range(n+2)]\nr = [[0 for i in range(m+2)] for j in range(n+2)]\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if s[i][j] == '.':\n            if s[i+1][j] == '.':\n                u[i][j] = 1\n            if s[i][j+1] == '.':\n                r[i][j] = 1\n        u[i][j]+= u[i-1][j]+u[i][j-1]-u[i-1][j-1]\n        r[i][j]+= r[i-1][j]+r[i][j-1]-r[i-1][j-1]\nq = int(input())\nfor i in range(q):\n    A = 0\n    x, y, a, b = list(map(int, input().split()))\n    if x == a and y == b:\n        A = 0\n    else:\n        A += r[a][b-1]-r[x-1][b-1]-r[a][y-1]+r[x-1][y-1]\n        A += u[a-1][b]-u[x-1][b]-u[a-1][y-1]+u[x-1][y-1]\n    print(A)\n\n", "from itertools import accumulate \nimport math\nimport bisect\n\ndef list_sum(L1, L2):\n    return [L1[i] + L2[i] for i in range(len(L1))]\n\nh, w = [int(x) for x in input().split()]\nM = []\nfor i in range(h):\n    M.append([1 if c == '.' else 0 for c in input().rstrip()])\n\nH = [[0]+list(accumulate(M[i][j] and M[i][j+1] for j in range(w-1))) for i in range(h)]\nV = [[0]+list(accumulate(M[i][j] and M[i+1][j] for i in range(h-1))) for j in range(w)]\n\nHsum = list(accumulate(H, list_sum))\nVsum = list(accumulate(V, list_sum))\n\ndef can(a, b):\n    return Hsum[a][b] + Vsum[b][a]\n\ndef query(a1, b1, a2, b2):\n    return (can(a2, b2) + can(a1, b1) - can(a1, b2) - can(a2, b1) +\n            H[a1][b2] - H[a1][b1] + V[b1][a2] - V[b1][a1])\n\nq = int(input())\nfor i in range(q):\n    a1, b1, a2, b2 = [int(x)-1 for x in input().split()]\n    print(query(a1, b1, a2, b2))\n", "read = lambda: list(map(int, input().split()))\nh, w = read()\na = [input() for i in range(h)]\nN = 501\nvr = [[0] * N for i in range(N)]\nhr = [[0] * N for i in range(N)]\nfor i in range(h):\n    for j in range(w):\n        vr[j + 1][i + 1] = vr[j][i + 1] + vr[j + 1][i] - vr[j][i]\n        hr[j + 1][i + 1] = hr[j][i + 1] + hr[j + 1][i] - hr[j][i]\n        if a[i][j] == '#': continue\n        if i != h - 1 and a[i + 1][j] == '.': vr[j + 1][i + 1] += 1\n        if j != w - 1 and a[i][j + 1] == '.': hr[j + 1][i + 1] += 1\nq = int(input())\nfor i in range(q):\n    r1, c1, r2, c2 = read()\n    p1 = hr[c2 - 1][r2] - hr[c1 - 1][r2] - hr[c2 - 1][r1 - 1] + hr[c1 - 1][r1 - 1]\n    p2 = vr[c2][r2 - 1] - vr[c1 - 1][r2 - 1] - vr[c2][r1 - 1] + vr[c1 - 1][r1 - 1]\n    ans = p1 + p2\n    print(ans)\n", "h, w = list(map(int, input().split()))\nmp = []\nmp.append(list(\"#\" * (w + 2)))\nfor i in range(h):\n    mp.append(list(input()))\n    mp[i + 1].insert(0, \"#\")\n    mp[i + 1].append(\"#\")\nmp.append(list(\"#\" * (w + 2)))\nmpV = []\nmpH = []\nmpV.append([])\nmpH.append([])\nfor i in range(w + 2):\n    mpV[0].append(0)\n    mpH[0].append(0)\n\nfor i in range(1, h + 2):\n    mpV.append([])\n    mpH.append([])\n    mpV[i].append(0)\n    mpH[i].append(0)\n    for j in range(1, w + 2):\n        mpV[i].append(mpV[i][j - 1] + mpV[i - 1][j] - mpV[i - 1][j - 1] + (\n            1 if mp[i][j] == \".\" and mp[i + 1][j] == \".\" else 0))\n        mpH[i].append(mpH[i][j - 1] + mpH[i - 1][j] - mpH[i - 1][j - 1] + (\n            1 if mp[i][j] == \".\" and mp[i][j + 1] == \".\" else 0))\nanc = []\nn = int(input())\nfor k in range(n):\n    y0, x0, y1, x1 = list(map(int, input().split()))\n    A = mpV[y0 - 1][x0 - 1]+mpV[y1-1][x1]-mpV[y1-1][x0-1]-mpV[y0-1][x1]\n    A += mpH[y0 - 1][x0 - 1]+mpH[y1][x1-1]-mpH[y1][x0-1]-mpH[y0-1][x1-1]\n    anc.append(A)\nfor k in range(n):\n    print(anc[k])", "h, w = list(map(int, input().split()))\ngrid = (h + 1) * [ None ]\ngrid[0] = (w + 1) * '#'\nfor r in range(1, h + 1):\n    grid[r] = '#' + input().strip()\n\nrt = [ [ 0 for c in range(w + 1) ] for r in range(h + 1) ]\nfor r in range(1, h + 1):\n    for c in range(1, w + 1):\n        if '.' == grid[r][c] == grid[r][c - 1]:\n            delta = 1\n        else:\n            delta = 0\n        rt[r][c] = rt[r][c - 1] + delta\n    for c in range(1, w + 1):\n        rt[r][c] += rt[r - 1][c]\nct = [ [ 0 for c in range(w + 1) ] for r in range(h + 1) ]\nfor c in range(1, w + 1):\n    for r in range(1, h + 1):\n        if '.' == grid[r][c] == grid[r - 1][c]:\n            delta = 1\n        else:\n            delta = 0\n        ct[r][c] = ct[r - 1][c] + delta\n    for r in range(1, h + 1):\n        ct[r][c] += ct[r][c - 1]\n\ndebug = False\nif debug:\n    print()\n    for r in range(1, h + 1):\n        print(grid[r][1:])\n        print(rt[r][1:])\n    print()\n    for c in range(1, w + 1):\n        print(''.join([ grid[r][c] for r in range(1, h + 1) ]))\n        print([ ct[r][c] for r in range(1, h + 1) ])\n    print()\n\nq = int(input())\nfor i in range(q):\n    r, c, R, C = list(map(int, input().split()))\n    if debug:\n        print((rt[R][C], -rt[R][c], -rt[r - 1][C], rt[r - 1][c], '\\n',\n              ct[R][C], -ct[r][C], -ct[R][c - 1], ct[r][c - 1]))\n    x = rt[R][C] - rt[R][c] - rt[r - 1][C] + rt[r - 1][c] + \\\n        ct[R][C] - ct[r][C] - ct[R][c - 1] + ct[r][c - 1]\n    print(x)\n", "\ndef solve(h, w, board, queries):\n\n    def get_horiz(h, w, board):\n        horiz = [[None] * w for _ in range(h)]\n        for i in range(w):\n            for j in range(h):\n                if i == 0:\n                    horiz[j][i] = 0\n                    continue\n                current = 1 if (board[j][i] == '.' and board[j][i-1] == '.') else 0\n                if j == 0:\n                    horiz[j][i] = horiz[j][i-1] + current\n                else:\n                    current = 1 if (board[j][i] == '.' and board[j][i-1] == '.') else 0\n                    horiz[j][i] = horiz[j][i-1] + horiz[j-1][i] - horiz[j-1][i-1] + current\n        return horiz\n\n    trans = [[None] * h for _ in range(w)]\n    for i in range(w):\n        for j in range(h):\n            trans[i][j] = board[j][i]\n\n    horiz = get_horiz(h, w, board)\n    vert = get_horiz(w, h, trans)\n\n    def query(r1, c1, r2, c2):\n        r1 -= 1\n        c1 -= 1\n        r2 -= 1\n        c2 -= 1\n        acum = 0\n        for rr1, rr2, cc1, cc2, horizvert in [(r1, r2, c1, c2, horiz), (c1, c2, r1, r2, vert)]:\n            base = horizvert[rr2][cc2]\n            if rr1 > 0:\n                base -= horizvert[rr1 - 1][cc2]\n                base += horizvert[rr1 - 1][cc1]\n            base -= horizvert[rr2][cc1]\n            acum += base\n        return acum\n\n    #print(get_horiz(h, w, board))\n    #print(query(1,2,4,5))\n    res = []\n    for q in queries:\n        res.append(query(*q))\n    return res\n\nh, w = tuple(map(int, input().split()))\nboard = []\nfor _ in range(h):\n    board.append(input())\nqnum = int(input())\nqueries = []\nfor _ in range(qnum):\n    queries.append(tuple(map(int, input().split())))\nres = solve(h, w, board, queries)\nfor r in res:\n    print(r)\n", "n, m = list(map(int, input().split()))\na = [' ' + input() for i in range(n)]\na = [' '*(m+1)] + a\nq = int(input())\n\ncol = [[0 for i in range(m+1)] for i in range(n+1)]\nrow = [[0 for i in range(m+1)] for i in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        col[i][j] = col[i-1][j] + col[i][j-1] - col[i-1][j-1] + (a[i][j] == '.' and a[i-1][j] == '.')\n        row[i][j] = row[i-1][j] + row[i][j-1] - row[i-1][j-1] + (a[i][j] == '.' and a[i][j-1] == '.')\n\nfor i in range(q):\n    r1, c1, r2, c2 = list(map(int, input().split()))\n    print((col[r2][c2] - col[r1][c2] - col[r2][c1-1] + col[r1][c1-1] \\\n        + row[r2][c2] - row[r2][c1] - row[r1-1][c2] + row[r1-1][c1]))\n", "H, W = list(map(int, input().split()))\ngrid = [\"|\" * (W+1)] + [\"|\" + input() for _ in range(H)]\nQ = int(input())\n\nhor = [[0 for _ in range(W+1)] for _ in range(H+1)]\nver = [[0 for _ in range(W+1)] for _ in range(H+1)]\n\nfor i in range(1, H+1):\n    for j in range(1, W+1):\n        hor[i][j] = hor[i-1][j] + hor[i][j-1] - hor[i-1][j-1]\n        ver[i][j] = ver[i-1][j] + ver[i][j-1] - ver[i-1][j-1]\n        if grid[i][j-1] == \".\" and grid[i][j] == \".\":\n            hor[i][j] += 1\n        if grid[i-1][j] == \".\" and grid[i][j] == \".\":\n            ver[i][j] += 1\n\nfor _ in range(Q):\n    r1, c1, r2, c2 = list(map(int, input().split()))\n\n    answer = 0\n    answer += ver[r2][c2] - ver[r1][c2] - ver[r2][c1-1] + ver[r1][c1-1]\n    answer += hor[r2][c2] - hor[r2][c1] - hor[r1-1][c2] + hor[r1-1][c1]\n\n    print(answer)\n", "n, m = map(int, input().split())\nli = [' '*(m+1)]+[' '+input() for _ in range(n)]\nr,c = [[0 for i in range(m+1)] for i in range(n+1)],[[0 for i in range(m+1)] for i in range(n+1)]\nq = int(input())\nfor i in range(1,n+1):\n\tfor j in range(1,m+1):\n\t\tr[i][j]=r[i-1][j]+r[i][j-1]-r[i-1][j-1]+(li[i][j]=='.' and li[i][j-1]=='.')\n\t\tc[i][j]=c[i-1][j]+c[i][j-1]-c[i-1][j-1]+(li[i][j]=='.' and li[i-1][j]=='.')\nfor _ in range(q):\n\tr1,c1,r2,c2 = map(int,input().split())\n\tprint (c[r2][c2]-c[r1][c2]-c[r2][c1-1]+c[r1][c1-1]+r[r2][c2]-r[r2][c1]-r[r1-1][c2]+r[r1-1][c1])", "def main():\n    h, w = list(map(int, input().split()))\n    l = [[c == '.' for c in input()] for _ in range(h)]\n    ver = [[0] * (w + 1) for _ in range(h + 1)]\n    for y, aa, bb, l0, l1 in zip(list(range(h - 1)), ver, ver[1:], l, l[1:]):\n        for x in range(w):\n            bb[x + 1] = (l0[x] and l1[x]) + bb[x] + aa[x + 1] - aa[x]\n    hor = [[0] * (w + 1) for _ in range(h + 1)]\n    for y, aa, bb, l0 in zip(list(range(h)), hor, hor[1:], l):\n        for x in range(w - 1):\n            bb[x + 1] = (l0[x] and l0[x + 1]) + bb[x] + aa[x + 1] - aa[x]\n    res = []\n    for _ in range(int(input())):\n        r1, c1, r2, c2 = list(map(int, input().split()))\n        r1 -= 1\n        c1 -= 1\n        res.append(str(ver[r2 - 1][c2] - ver[r1][c2] - ver[r2 - 1][c1] + ver[r1][c1] +\n                       hor[r2][c2 - 1] - hor[r1][c2 - 1] - hor[r2][c1] + hor[r1][c1]))\n    print('\\n'.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2016 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\ndef read_list():\n    return [int(i) for i in input().split()]\ndef new_list(n):\n    return [0 for i in range(n)]\ndef new_matrix(n, m=0):\n    return [[0 for i in range(m)] for i in range(n)]\n\n\nm = 2005\n\nh, w = read_list()\n\nd = []\nfor i in range(h):\n    d.append(input())\n\nver = new_matrix(m, m)\nhor = new_matrix(m, m)\n\nfor j in range(h):\n    for i in range(w):\n        hor[i+1][j+1] = hor[i+1][j] + hor[i][j+1] - hor[i][j]\n        ver[i+1][j+1] = ver[i+1][j] + ver[i][j+1] - ver[i][j]\n\n        if d[j][i] == \".\":\n            if i < w-1 and d[j][i+1] == \".\":\n                hor[i+1][j+1] += 1\n            if j < h-1 and d[j+1][i] == \".\":\n                ver[i+1][j+1] += 1\n\n\nn = int(input())\n\nfor i in range(n):\n    y1, x1, y2, x2 = read_list()\n\n    x1 -= 1\n    y1 -= 1\n\n    answ = 0\n    answ += (hor[x2-1][y2] - hor[x1][y2] - hor[x2-1][y1] + hor[x1][y1])\n    answ += (ver[x2][y2-1] - ver[x1][y2-1] - ver[x2][y1] + ver[x1][y1])\n\n    print(answ)\n", "#!/usr/bin/env python3\nimport itertools, functools, math\n\ndef II(r1, c1, r2, c2, table):\n    if r1 > r2:\n        return 0\n    if c1 > c2:\n        return 0\n    res = table[r2][c2]\n    if r1:\n        res -= table[r1-1][c2]\n    if c1:\n        res -= table[r2][c1-1]\n    if r1 and c1:\n        res += table[r1-1][c1-1]\n    return res\n\n\ndef solve():\n    h, w = list(map(int, input().split()))\n    grid = [input() for _ in range(h)]\n\n    row = [[0]*w for _ in range(h)]\n    col = [[0]*w for _ in range(h)]\n\n    for i in range(h):\n        col_prev = 0\n        row_prev = 0\n        for j in range(w):\n            row[i][j] = row_prev\n            col[i][j] = col_prev\n            if i:\n                row[i][j] += row[i-1][j]\n                col[i][j] += col[i-1][j]\n\n            if grid[i][j] == '#':\n                continue\n\n            if i+1 < h and grid[i+1][j] != '#':\n                row[i][j] += 1\n                row_prev += 1\n            if j+1 < w and grid[i][j+1] != '#':\n                col[i][j] += 1\n                col_prev += 1\n\n    q = int(input())\n    for _ in range(q):\n        r1, c1, r2, c2 = list(map(int, input().split()))\n        r1 -= 1\n        c1 -= 1\n        r2 -= 1\n        c2 -= 1\n        print(II(r1, c1, r2-1, c2, row) + II(r1, c1, r2, c2-1, col))\n\n\ndef __starting_point():\n    solve()\n\n\n__starting_point()", "h,w = [int(i) for i in input().split()]\nmaxx = 2005\nver = [[0]*maxx for j in range(maxx)]\nhor = [[0]*maxx for j in range(maxx)]\ns = []\nfor i in range(h):\n    s.append(input())\n\nfor x in range(h):\n    for y in range(w):\n        hor[x+1][y+1] = hor[x][y+1]+hor[x+1][y]-hor[x][y]\n        ver[x+1][y+1] = ver[x][y+1]+ver[x+1][y]-ver[x][y]\n        if (s[x][y]!='.'):continue\n        if (y!=w-1 and s[x][y+1]=='.'): hor[x+1][y+1]+=1\n        if (x!=h-1 and s[x+1][y]=='.'): ver[x+1][y+1]+=1\n\nq = int(input())\nans = []\n#print(hor[1][1])\nprint()\nfor _ in range(q):\n    x,y,x1,y1 = [int(i) for i in input().split()]\n    a = 0\n    a+=hor[x1][y1-1]-hor[x1][y-1]-hor[x-1][y1-1]+hor[x-1][y-1]\n    a+=ver[x1-1][y1]-ver[x1-1][y-1]-ver[x-1][y1]+ver[x-1][y-1]\n    ans.append(a)\nfor i in ans:\n    print(i)", "h, w = (int(x) for x in input().split())\na = [[x != '.' for x in input()] for _ in range(h)]\n\ndef build(f):\n    d = [[0 for _ in range(w + 1)]]\n    for r in range(h):\n        d.append([0])\n        for c in range(w):\n            d[-1].append(d[-2][c + 1] + d[-1][c] - d[-2][c] + f(r, c))\n    return d\n\nver = build(lambda r, c: not a[r][c] and r < h - 1 and not a[r + 1][c])\nhor = build(lambda r, c: not a[r][c] and c < w - 1 and not a[r][c + 1])\n\nfor _ in range(int(input())):\n    r1, c1, r2, c2 = (int(x) for x in input().split())\n    s = ver[r2 - 1][c2] - ver[r1 - 1][c2] - ver[r2 - 1][c1 - 1] + ver[r1 - 1][c1 - 1]\n    s += hor[r2][c2 - 1] - hor[r1 - 1][c2 - 1] - hor[r2][c1 - 1] + hor[r1 - 1][c1 - 1]\n    print(s)\n", "# Description of the problem can be found at http://codeforces.com/problemset/problem/611/C\n\nread = lambda: map(int, input().split())\nh, w = read()\na = [input() for i in range(h)]\nN = 501\nvr = [[0] * N for i in range(N)]\nhr = [[0] * N for i in range(N)]\nfor i in range(h):\n    for j in range(w):\n        vr[j + 1][i + 1] = vr[j][i + 1] + vr[j + 1][i] - vr[j][i]\n        hr[j + 1][i + 1] = hr[j][i + 1] + hr[j + 1][i] - hr[j][i]\n        if a[i][j] == '#': continue\n        if i != h - 1 and a[i + 1][j] == '.': vr[j + 1][i + 1] += 1\n        if j != w - 1 and a[i][j + 1] == '.': hr[j + 1][i + 1] += 1\nq = int(input())\nfor i in range(q):\n    r1, c1, r2, c2 = read()\n    p1 = hr[c2 - 1][r2] - hr[c1 - 1][r2] - hr[c2 - 1][r1 - 1] + hr[c1 - 1][r1 - 1]\n    p2 = vr[c2][r2 - 1] - vr[c1 - 1][r2 - 1] - vr[c2][r1 - 1] + vr[c1 - 1][r1 - 1]\n    ans = p1 + p2\n    print(ans)", "n, m = map(int, input().split())\nli = [' '*(m+1)]+[' '+input() for _ in range(n)]\nr,c = [[0 for i in range(m+1)] for i in range(n+1)],[[0 for i in range(m+1)] for i in range(n+1)]\nq = int(input())\nfor i in range(1,n+1):\n\tfor j in range(1,m+1):\n\t\tr[i][j]=r[i-1][j]+r[i][j-1]-r[i-1][j-1]+(li[i][j]=='.' and li[i][j-1]=='.')\n\t\tc[i][j]=c[i-1][j]+c[i][j-1]-c[i-1][j-1]+(li[i][j]=='.' and li[i-1][j]=='.')\nfor _ in range(q):\n\tr1,c1,r2,c2 = map(int,input().split())\n\tprint (c[r2][c2]-c[r1][c2]-c[r2][c1-1]+c[r1][c1-1]+r[r2][c2]-r[r2][c1]-r[r1-1][c2]+r[r1-1][c1])", "line = input().split()\nh, w = int(line[0]), int(line[1])\ngrid = []\nfor i in range(0, h):\n\tline = input()\n\tgrid.append(line)\nq = int(input().split()[0])\ndp = [[[0 for z in range(0,2)] for x in range(w)] for y in range(h)]\nfor i in range(0, h):\n\tfor j in range(0, w):\n\t\tdp[i][j][0] += (dp[i-1][j][0] if i > 0 else 0) + (dp[i][j-1][0] if j > 0 else 0) - (dp[i-1][j-1][0] if i > 0 and j > 0 else 0)\n\t\tdp[i][j][1] += (dp[i-1][j][1] if i > 0 else 0) + (dp[i][j-1][1] if j > 0 else 0) - (dp[i-1][j-1][1] if i > 0 and j > 0 else 0)\n\t\tdp[i][j][0] += (1 if i > 0 and grid[i][j] == '.' and grid[i-1][j] == '.' else 0)\n\t\tdp[i][j][1] += (1 if j > 0 and grid[i][j] == '.' and grid[i][j-1] == '.' else 0)\n#print(dp[h-1][w-1])\nwhile(q > 0):\n\tline = input().split()\n\tr1, c1, r2, c2 = int(line[0]), int(line[1]), int(line[2]), int(line[3])\n\tr1 -= 1\n\tc1 -= 1\n\tr2 -= 1\n\tc2 -= 1\n\tans = 0\n\tans += dp[r2][c2][0] + dp[r2][c2][1]\n\tans -= (dp[r1-1][c2][0] + dp[r1-1][c2][1]) if r1 > 0 else 0\n\tans -= (dp[r2][c1-1][0] + dp[r2][c1-1][1]) if c1 > 0 else 0\n\tans += (dp[r1-1][c1-1][0] + dp[r1-1][c1-1][1]) if r1 > 0 and c1 > 0 else 0\n\tans -= dp[r1][c2][0] - (dp[r1-1][c2][0] if r1 > 0 else 0) - (dp[r1][c1-1][0] if c1 > 0 else 0) + (dp[r1-1][c1-1][0] if c1 > 0 and r1 > 0 else 0)\n\tans -= dp[r2][c1][1] - (dp[r2][c1-1][1] if c1 > 0 else 0) - (dp[r1-1][c1][1] if r1 > 0 else 0) + (dp[r1-1][c1-1][1] if c1 > 0 and r1 > 0 else 0)\n\tprint(ans)\n\t#print(dp[r2][c2] - (dp[r1-1][c2] if r1 > 0 else 0) - (dp[r2][c1-1] if c1 > 0 else 0) + (dp[r1-1][c1-1] if r1 > 0 and c1 > 0 else 0))\n\tq -= 1\n"]