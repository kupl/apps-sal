["class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if nums == []:\n             return []\n         \n         dct = {}\n         for el in nums:\n             if el in dct:\n                 dct[el] += 1\n             else:\n                 dct[el] = 1\n             \n         fin = []\n         for key in dct:\n             if dct[key] > (len(nums) // 3):\n                 fin.append(key)\n         \n         return fin\n         \n", "class Solution:\n     def majorityElement(self, nums):\n         d = {}\n         for i in nums:\n             if i in d:\n                 d[i] += 1\n             else:\n                 d[i] = 1\n         \n         l = []\n         for i in list(d.keys()):\n             if d[i] > len(nums) // 3:\n                 l.append(i)\n                 \n         return l\n                 \n         \n         \n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         if not nums:\n             return([])\n         \n         l = len(nums)\n         candidate1 = candidate2 = 0\n         count1 = count2 = 0\n         \n         for i in nums:\n             if candidate1 == i:\n                 count1 += 1\n             elif candidate2 == i:\n                 count2 += 1\n             elif count1 == 0:\n                 candidate1 = i\n                 count1 = 1 \n             elif count2 == 0:\n                 candidate2 = i\n                 count2 = 1\n             else:\n                 count1 -= 1\n                 count2 -= 1\n             \n         c1 = nums.count(candidate1)\n         c2 = nums.count(candidate2)\n     \n         res = []\n         if c1 > l/3:\n             res.append(candidate1)\n         if c2 > l/3 and candidate1 != candidate2:\n             res.append(candidate2)\n         \n         return(res)\n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         if len(nums)<=2:\n             return list(set(nums))\n         can,can2 = 0,0\n         num,num2 = 0,1\n         for i in range(len(nums)):\n             if nums[i]==can:\n                 num+=1\n             elif nums[i] == can2:\n                 num2 +=2\n             elif num ==0:\n                 num=1\n                 can = nums[i]\n             elif num2==0:\n                 num2=1\n                 can2 = nums[i]\n             else:\n                 num,num2=num-1,num2-1\n         res = []\n         if nums.count(can)>int(len(nums)/3):\n             res.append(can)\n         if nums.count(can2)>int(len(nums)/3) and can2!=can:\n             res.append(can2)\n         return res", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         length=len(nums)\n         ans=[]\n         for i in set(nums):\n             if nums.count(i)>length/3:\n                 ans.append(i)\n         return ans", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         n1 = n2 = None\n         c1 = c2 = 0\n         \n         for i in nums:\n             if n1 == i:\n                 c1 += 1\n             elif n2 == i:\n                 c2 += 1\n             elif c1 == 0:\n                 n1, c1 = i, 1\n             elif c2 == 0:\n                 n2, c2 = i, 1\n             else:\n                 c1, c2 = c1 - 1, c2 -1\n         return [n for n in [n1, n2] if n is not None and nums.count(n) > len(nums)//3]\n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         ans = []\n         \n         if not nums:\n             return []\n         \n         a1 = a2 = None\n         c1 = c2 = 0\n         \n         for num in nums:\n             if a1 == num:\n                 c1 += 1\n             elif a2 == num:\n                 c2 += 1\n             elif c1 == 0:\n                 a1, c1 = num, 1\n             elif c2 == 0:\n                 a2, c2 = num, 1\n             else:\n                 c1 -= 1\n                 c2 -= 1\n         \n         c1 = c2 = 0\n         \n         for num in nums:\n             if num == a1:\n                 c1 += 1\n             elif num == a2:\n                 c2 += 1\n         \n         for a, c in ((a1, c1), (a2, c2)):\n             if c > len(nums) // 3:\n                 ans.append(a)\n         \n         return ans", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         dic = {}\n         res = []\n         n = len(nums)\n         for i in range(n):\n             dic[nums[i]] = dic.get(nums[i], 0) + 1\n         print(dic)\n         for num, cnt in dic.items():\n             if cnt > n/3:\n                 res.append(num)\n         return res", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         ret = []\n         least = len(nums) / 3\n         h = {}\n         for n in nums:\n             if n in list(h.keys()):\n                 h[n] += 1\n             else:\n                 h[n] = 1\n                 \n             if h[n] > least and n not in ret:\n                 ret.append(n)\n                 \n         return ret\n             \n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         N = len(nums)\n         N3 = N/3\n         nums.sort()\n         result = []\n         if N < 1:\n             return nums\n         \n         _cnt = 0\n         _num = nums[0]\n         \n         for n in nums:\n             if n != _num:\n                 if _cnt > N3:\n                     result.append(_num)\n                 _cnt = 1\n                 _num = n\n             else:\n                 _cnt += 1\n         else:\n             if _cnt > N3:\n                 result.append(_num)\n         \n         \n         return result", "class Solution:\n     def majorityElement(self, nums):\n         ctr = collections.Counter()\n         for n in nums:\n             ctr[n] += 1\n             if len(ctr) == 3:\n                 ctr -= collections.Counter(set(ctr))\n         return [n for n in ctr if nums.count(n) > len(nums)//3]\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n", "class Solution:\n     def majorityElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         d = dict()\n         results = []\n         for num in nums:\n             d[num] = d.get(num,0) + 1\n             if d[num] > len(nums) // 3:\n                 if num not in results:\n                     results.append(num)\n         return results"]