["n, k = [int(i) for i in input().split()]\n\ndic = dict()\n\ns = list(input())\n\ni = 0\nwhile i<n:\n    j = 1\n    while i+j < n and s[i] == s[i+j]:\n        j+=1\n    if s[i] not in dic:\n        dic[s[i]] = []\n    dic[s[i]].append(j)\n    i += j\nans = 0\n\nfor i in list(dic.keys()):\n    ct = 0\n    for j in dic[i]:\n        ct+=(j//k)\n    ans = max(ans, ct)\n    #if min(dic[i]) >= k:\n        #ans = max(ans, min(dic[i]))\n\nprint(ans)\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    n,k = LI()\n    s = S()\n    t = ''\n    d = collections.defaultdict(int)\n    d[''] = 0\n    b = 0\n    for c in s:\n        if t != c:\n            b = 1\n            t = c\n        else:\n            b += 1\n        if b % k == 0:\n            d[t] += 1\n\n    return max(d.values())\n\n\n\nprint(main())\n\n", "n, k = map(int, input().split())\ns = input()\n\nanslevel = 0\n\nfor c in range(ord('a'), ord('z') + 1):\n    ch = chr(c)\n    nowLen, level = 0, 0\n    for i in s:\n        if i == ch:\n            nowLen += 1\n            if nowLen == k:\n                nowLen = 0\n                level += 1\n        else:\n            nowLen = 0\n    anslevel = max(anslevel, level)\n\nprint(anslevel)", "from collections import Counter\n\nn, k = list(map(int, input().split()))\n\ns = input()\n\nc = Counter()\n\np = \"\"\nr = \"\"\nfor t in s:\n\n    if t == p:\n        r += t\n    else:\n        r = t\n\n    if len(r) == k:\n        c[r] += 1\n        r = \"\"\n\n    p = t\n\nprint(c.most_common(1)[0][1] if len(c) > 0 else 0)\n", "n, k = list(map(int, input().split()))\ns = input()\nc = 'abcdefghijklmnopqrstuvwxyz'\nans = 0\nfor ch in c:\n\tlvl = 0\n\tcount = 0\n\tfor i in s:\n\t\tif i == ch:\n\t\t\tcount += 1\n\t\t\tif count == k:\n\t\t\t\tcount = 0\n\t\t\t\tlvl += 1\n\t\telse:\n\t\t\tcount = 0\n\tif lvl > ans:\n\t\tans = lvl\nprint(ans)\n", "import itertools\n\nn, k = list(map(int, input().split()))\ns = input().strip()\n\nresdict = {}\nfor c, g in itertools.groupby(s):\n    count = len(list(g))\n    if c not in resdict:\n        resdict[c] = 0\n\n    resdict[c] += count // k\n\nprint(max(resdict.values()))\n\n\n", "import copy\nimport itertools\nimport string\n\n###\n\ndef powmod(x, p, m):\n\tif p <= 0:\n\t\treturn 1\n\tif p <= 1:\n\t\treturn x%m\n\treturn powmod(x*x%m, p//2, m) * (x%m)**(p%2) % m\n\n###\n\ndef to_basex(num, x):\n\twhile num > 0:\n\t\tyield num % x\n\t\tnum //= x\n\ndef from_basex(it, x):\n\tret = 0\n\tp = 1\n\tfor d in it:\n\t\tret += d*p\n\t\tp *= x\n\treturn ret\n\n###\n\ndef core():\n\tn,k = (int(x) for x in input().split())\n\t#print(n, k)\n\ts = input()\n\t\n\tansd = {l : 0 for l in string.ascii_lowercase}\n\tfor l in string.ascii_lowercase:\n\t\tcnt = 0\n\t\tfor ch in s:\n\t\t\tif ch == l:\n\t\t\t\tcnt += 1\n\t\t\t\tif cnt >= k:\n\t\t\t\t\tansd[l] += 1\n\t\t\t\t\tcnt = 0\n\t\t\telse:\n\t\t\t\tcnt = 0\n\t\n\t#print(ansd)\n\t\n\tans = max(ansd.values())\n\tprint(ans)\n\n\ncore()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "from collections import defaultdict as dd, deque\n\nD = dd(list)\n\nn,k = list(map(int,input().split()))\ns = input()+'$'\n\nlast = None\nl = 0\nfor c in s:\n    if last != c:\n        if l > 0:\n            D[last].append(l)\n            l = 0\n    last = c\n    l += 1\n\nprint(max(sum(x//k for x in D[d]) for d in D))\n\n", "n, k = list(map(int, input().split()))\ns = input() + '|'\n\nprev = ''\nd = {}\n\nfor c in s:\n    if c == prev:\n        d[c][-1] += 1\n\n    else:\n        d[c] = d.get(c, []) + [1]\n    prev = c\n\nres = 0\ndef f(l):\n    return sum(e//k for e in l)\nfor l in list(d.values()):\n    res = max(res, f(l))\n\nprint(res)\n", "n,k=list(map(int,input().split()))\ns=input()\nd={}\ni,j=0,0\nwhile i<len(s):\n\tj=i\n\twhile j<len(s) and s[j]==s[i]:\n\t\tj+=1\n\tans=(j-i)//k\n\tif s[i] in d:\n\t\td[s[i]]+=ans\n\telse:\n\t\td[s[i]]=ans\n\ti=j\nprint(max(d.values()))\n", "n,k = map(int,input().split())\ns = input()\nchars = {}\nfor c in s:\n    chars[c]=1\ns += '\\0'\nans = 0\nfor c in chars:\n    nowl = 0\n    a = 0\n    for d in s:\n        if d == c:\n            nowl+=1\n        elif nowl>0:\n            a += nowl//k\n            nowl = 0\n    ans = max(ans,a)\nprint(ans)", "import sys\nstdin = sys.stdin\n \nsys.setrecursionlimit(10**5) \n \ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x)-1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nfrom collections import defaultdict\n\nn,k = li()\ns = ns()\n\ndef run_length(s: str):\n    ret = []\n    buf = \"\"\n    cnt = 0\n    for si in s:\n        if si != buf:\n            if cnt > 0:\n                ret.append([buf, cnt])\n                \n            buf = si\n            cnt = 1\n        else:\n            cnt += 1\n            \n    ret.append([buf, cnt])\n            \n    return ret\n\nret = run_length(s)\n        \ndic = defaultdict(int)\nfor char, length in ret:\n    dic[char] += length//k\n    \nans = 0\nfor key, value in dic.items():\n    ans = max(ans, value)\n    \nprint(ans)", "from sys import stdin\ndef kmp(pat, txt):\n    leng = 0;i = 1\n    ans=0\n    M = len(pat) ;N = len(txt) ;lps = [0]*M ;j = 0\n    #Calculo de lps, prefifo propio mas largo que tambien es sufijo de pat[0:i]\n    while i < M:\n        if pat[i]== pat[leng]:\n            leng += 1\n            lps[i] = leng\n            i += 1\n        elif leng != 0:\n            leng = lps[leng-1] \n        else:\n            lps[i] = 0\n            i += 1\n    i = 0 \n    while i < N:\n\n        if pat[j] == txt[i]: \n            i += 1;j += 1  \n        if j == M:\n            ans+=1\n            i=i-j+len(pat)\n            j =0\n        elif i < N and pat[j] != txt[i]: \n            if j != 0: \n                j = lps[j-1] \n            else: \n                i += 1\n    return ans\nfrom sys import stdin\nn,m=list(map(int,stdin.readline().strip().split()))\ns=stdin.readline().strip()\nans=0\nfor i in range(26):\n    ans=max(ans,kmp(chr(97+i)*m,s))\nprint(ans)\n", "#! usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    s = input()\n\n    cnt = [0] * 26\n    idx = 0\n    while idx < n:\n        cur = idx\n        while cur < n - 1 and s[cur+1] == s[idx] and cur - idx + 1 < k:\n            cur += 1\n\n        if cur - idx + 1 == k:\n            cnt[ord(s[idx]) - ord('a')] += 1\n        idx = cur + 1\n\n    print(max(cnt))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "l,k=map(int,input().split())\ns=input()\nc=[None]*26\nfor i in range(26):\n    c[i]=[]\na=1\nfor i in range(1,l):\n    if s[i]!=s[i-1]:\n        c[ord(s[i-1])-ord('a')].append(a)\n        a=1\n    else:\n        a+=1\nc[ord(s[l-1]) - ord('a')].append(a)\nans=0\nfor i in range(26):\n    cumm=0\n    for j in c[i]:\n        cumm+=j//k\n    ans=max(ans,cumm)\nprint(ans)", "from collections import defaultdict\n\nn, k = list(map(int, input().split()))\na = defaultdict(int)\np = '@'\nx = 0\nfor el in input():\n    if el == p:\n        x += 1\n    elif p != '@':\n        a[p] += (x + 1) // k\n        x = 0\n    p = el\nif k != 0:\n    a[p] += (x + 1) // k\nprint(max(a.values()))\n", "n, k = map(int, input().split())\ns = input()+'.'\na = [1 for i in range(n)]\nd = {}\n\nfor i in range(1, n):\n    if s[i] == s[i-1]:\n        a[i] = a[i-1]+1\nfor i in range(n):\n    if s[i] != s[i+1]:\n        if s[i] in d:\n            if a[i] in d[s[i]]:\n                d[s[i]][a[i]] += 1\n            else:\n                d[s[i]][a[i]] = 1\n        else:\n            d[s[i]] = {}\n            d[s[i]][a[i]] = 1\nans = 0\nfor c in d:\n    tmpa = 0\n    for size in d[c]:\n        if size >= k:\n            tmpa += (size//k)*d[c][size]\n    ans = max(ans, tmpa)\nprint(ans)", "n,k = list(map(int,input().split()))\ns = input()\nalph = \"qwertyuiopasdfghjklzxcvbnm\"\nti = [0] * 26\nnum = 1\nfor i in range(1,n):\n    if s[i] == s[i-1]:\n        num += 1\n    else:\n        if num >= k:\n            ti[alph.find(s[i-1])] += num // k\n        num = 1\nif num >= k:\n    ti[alph.find(s[-1])] += num // k\nprint(max(ti))\n", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, K = getIntList()\n#print(N)\nS = input()\n\nnc = ' '\nsss = 'abcdefghijklmnopqrstuvwxyz'\ndr = dict()\nfor c in sss:\n    dr[c] = 0\ntn = 0\nfor x in S:\n    if x!=nc:\n        nc = x\n        tn = 1\n    else:\n        tn+=1\n    if K==tn:\n        dr[x] +=1\n        tn = 0\n\nr = max( dr.values())\nprint(r)\n\n\n\n", "import sys\nimport math\n\ndef read_int():\n\treturn int(input().strip())\n\ndef read_int_list():\n\treturn list(map(int,input().strip().split()))\n\ndef read_string():\n\treturn input().strip()\n\ndef read_string_list(delim=\" \"):\n\treturn input().strip().split(delim)\n\n###### Author : Samir Vyas #######\n###### Write Code Below    #######\n\nn,k = read_int_list()\n\ns = read_string()\n\nseen_distincts = {}\nstart = 0\nwhile start < n-k+1:\n\ttemp_dist = s[start]\n\tbroken = 0\n\tbroken_at = -1\n\n\tfor i in range(1,k):\n\t\tif s[start+i] == temp_dist:\n\t\t\tpass\n\t\telse:\n\t\t\tbroken = 1\n\t\t\tbroken_at = start+i\n\t\t\tbreak\n\n\tif broken:\n\t\tstart = broken_at\n\telse:\n\t\tseen_distincts[temp_dist] = seen_distincts.get(temp_dist,0) + 1\n\t\tstart += k\n\nmaxi = 0\nfor k in seen_distincts:\n\tmaxi = max(maxi,seen_distincts[k])\n\n# print(seen_distincts)\nprint(maxi) \n\n\n\n", "n, k = [ int(a) for a in input().split() ]\ns = input()\n\nfreq = {}\nfor c in 'abcdefghijklmnopqrstuvwxyz':\n    freq[c] = 0\n\nprev = '!'\nrun = 0\nfor x in s:\n    if x == prev:\n        run += 1\n    else:\n        prev = x\n        run = 1\n\n    if run == k:\n        freq[x] += 1\n        run = 0\n\nprint(max(freq.values()))\n\n", "import sys\n\nn, k = map(int, input().split())\n\ns = input().strip()\n\nlast = ''\ncount = 0\nans = {}\n\nfor c in s:\n    if c != last:\n        if last not in ans.keys():\n            ans[last] = 0\n        ans[last] += count//k\n        last = c\n        count = 1\n    else:\n        count += 1\nif last not in ans.keys():\n    ans[last] = 0\nans[last] += count//k\ncount = 1\n\nprint(max(ans.values()))", "n, k = input().split()\nn, k = int(n), int(k)\n\ns = input() + ' '\n\nd = {}\nprev = '!'\ncont = 0\n\nfor char in s:\n    #print(char, cont)\n    if (char != prev) or (cont >= k):\n        if (cont >= k):\n            if (prev in d):\n                d[prev] += 1\n            else:\n                d[prev] = 1\n        \n        prev = char\n        cont = 1\n    else:\n        cont += 1\n\nprint(max(list(d.values()) + [0]))\n    \n", "n, k=(int(i) for i in input().split())\ns=input()\nD={}\nfor i in s:\n    D[i]=[]\na=s[0]\nc=1\nfor i in range(1, len(s)):\n    if s[i]==a:\n        c+=1\n    else:\n        D[a].append(c)\n        a=s[i]\n        c=1\nD[a].append(c)\nm=0\nx=0\nfor i in list(D.keys()):\n    for j in D[i]:\n        x+=j//k\n    if x>m: m=x\n    x=0\nprint(m)\n            \n"]