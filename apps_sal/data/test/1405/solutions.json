["#!/usr/bin/env python3\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nsorted_a = sorted(a)\ndict_a = {}\nfor x in a:\n    if not x in dict_a:\n        dict_a[x] = 1\n    else:\n        dict_a[x] += 1\n\nsorted_uniq_a = sorted(dict_a.keys())\n\nmax_fib_prefix = [a[0], a[1]]\nfor i in range(0, len(sorted_uniq_a)):\n    for j in range(0, len(sorted_uniq_a)):\n        if i != j or dict_a[sorted_uniq_a[i]] > 1:\n            if sorted_uniq_a[i] + sorted_uniq_a[j] > sorted_uniq_a[-1]:\n                break\n\n            fib_prefix = [sorted_uniq_a[i], sorted_uniq_a[j]]\n            dict_a[sorted_uniq_a[i]] -= 1\n            dict_a[sorted_uniq_a[j]] -= 1\n\n            while True:\n                next_fib = fib_prefix[-1] + fib_prefix[-2]\n                if not next_fib in dict_a or dict_a[next_fib] == 0:\n                    break\n                fib_prefix.append(next_fib)\n                dict_a[next_fib] -= 1\n\n            for x in fib_prefix:\n                dict_a[x] += 1\n\n            if len(fib_prefix) > len(max_fib_prefix):\n                max_fib_prefix = fib_prefix\n\nprint(len(max_fib_prefix))\n", "import sys\nsys.setrecursionlimit(10000)\nn = int(input())\na = list(map(int, input().split()))\n\n# sa = dict(zip(a, range(n)))\nsb = {}\nfor num in a:\n    if not num in sb:\n        sb[num]=1\n    else:\n        sb[num]+=1\n\ndef go(a, b):\n    ans = 0\n    ab = a+b\n    if ab in sb and sb[ab]>0:\n        sb[ab]-=1\n        ans = 1 + go(b, ab)\n        sb[ab]+=1\n    return ans\n\nmaxans = 2\nfor a in sb:\n    for b in sb:\n        if a!=b or sb[a]>1:\n            count = 2\n            sb[a] -= 1\n            sb[b] -= 1\n            count += go(a,b)\n            sb[a] += 1\n            sb[b] += 1\n            if count > maxans:\n                maxans = count\nprint(maxans)", "def go(a, b):\n    res, c = 0, a + b\n    if d.get(c) and d[c] > 0:\n        d[c] -= 1\n        res = go(b, c) + 1\n        d[c] += 1\n    return res\n\ninput()\nd = {}\nfor i in map(int, input().split()):\n    if d.get(i): d[i] += 1\n    else: d[i] = 1\nans = 2\nfor a in d:\n    for b in d:\n        if a != b or d[a] > 1:\n            d[a] -= 1; d[b] -= 1\n            cnt = go(a, b) + 2\n            d[a] += 1; d[b] += 1\n            ans = max(cnt, ans)\nprint(ans)\n", "n = int(input())\nl = list(map(int,input().split()))\nd = {}\nfor i in l:\n\tif i not in d: d[i] = 0\n\td[i] += 1\nans = 0\nfor i in range(len(l)):\n\tfor j in range(len(l)):\n\t\tif i==j: continue\t\t\n\t\tn1,n2 = l[i],l[j]\n\t\tif n1==0 and n2==0: continue\n\t\tcurr = 2\n\t\td2 = {n1:1,n2:1}\n\t\twhile True:\n\t\t\tn1,n2 = n2,n1+n2\n\t\t\tans = max(ans, curr)\n\t\t\tif n2 in d and (d2[n2] if n2 in d2 else 0) < d[n2]:\n\t\t\t\tif n2 not in d2: d2[n2] = 0\n\t\t\t\td2[n2] += 1\n\t\t\t\tcurr += 1\n\t\t\telse: break\nprint(max(ans, (d[0] if 0 in d else -1)))\n", "n = int(input())\na = [int(x) for x in input().split()]\nD = {}\nfor x in a:\n    if x in D:\n        D[x] += 1\n    else:\n        D[x] = 1\nmaxans = 0\ndef check(x, y):\n    num = 2\n    D[x] -= 1\n    D[y] -= 1\n    while x+y in D and D[x+y] > 0:\n        D[x+y] -= 1\n        x, y = y, x+y\n        num += 1\n    ans = num\n    while num > 2:\n        D[y] += 1\n        x, y = y-x, x\n        num -= 1\n    D[x] += 1\n    D[y] += 1\n    return ans\n\nfor x in D:\n    for y in D:\n        if x == y and D[x] == 1: continue\n        maxans = max(check(x, y), maxans)\n\nprint(maxans)\n", "\nn = int(input())\na = [int(x) for x in input().split()]\nn0 = len([x for x in a if x == 0])\na = [x for x in a if x != 0]\nif n0 > 0:\n    a.append(0)\nn = len(a)\n#print(\"a: \", a)\n\npos = {}\nfor i in range(n):\n    if a[i] in pos:\n        pos[a[i]] += 1\n    else:\n        pos[a[i]] = 1\n\nres = []\nmax_r = n0\n\nif max_r < 2:\n    max_r = 2\npr = {}\nfor i in range(0, n):\n    for j in range(0, n):\n        if i == j:\n            continue\n        \"\"\" \n        if (a[j], a[i]+a[j]) in pr:\n            res = pr[(a[j], a[i]+a[j])] + 1\n            pr[(a[i], a[j])] = res\n            if res > max_r:\n                max_r = res\n            continue\n        \"\"\"\n        if (a[i], a[j]) in pr:\n            continue\n        if a[i]+a[j] not in pos:\n            continue\n        res = 2\n        a1 = a[i]\n        a2 = a[j]\n        s = a1 + a2\n        m = []\n        pos[a1] -= 1\n        pos[a2] -= 1\n        m.append(a1)\n        m.append(a2)\n        while (s in pos) and (pos[s] > 0):\n            pos[s] -= 1\n            m.append(s)\n            res += 1\n            a1 = a2\n            a2 = s\n            s = a1 + a2\n\n        for k in range(len(m)):\n            pos[m[k]] += 1\n            if k > 0:\n                pr[(m[k-1], m[k])] = res - k + 1\n        if res > max_r:\n            max_r = res\n        pr[(a[i], a[j])] = res\n\nprint(max_r)\n", "def main():\n    from collections import Counter\n    n = int(input())\n    cnt, res = dict(Counter(list(map(int, input().split())))), []\n    if cnt.get(0, 0) * 2 >= n:\n        print(cnt[0])\n        return\n    cget, rpush = cnt.get, res.append\n\n    def deeper(a, b, lvl):\n        if cget(a + b, 0):\n            c = a + b\n            cnt[c] -= 1\n            deeper(b, c, lvl + 1)\n            cnt[c] += 1\n        else:\n            rpush(lvl)\n\n    for x in cnt:\n        cnt[x] -= 1\n        for y in cnt:\n            if cnt[y]:\n                cnt[y] -= 1\n                deeper(x, y, 2)\n                cnt[y] += 1\n        cnt[x] += 1\n    print(max(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from collections import Counter\n    n = int(input())\n    cnt, res = dict(Counter(list(map(int, input().split())))), []\n    x = cnt.get(0, 0)\n    if x * 2 >= n:\n        print(cnt[0])\n        return\n    cget, rpush = cnt.get, res.append\n    if x:\n        rpush(x)\n        cnt[0] = 1\n\n    def deeper(a, b, lvl):\n        if cget(a + b, 0):\n            c = a + b\n            cnt[c] -= 1\n            deeper(b, c, lvl + 1)\n            cnt[c] += 1\n        else:\n            rpush(lvl)\n\n    for x in cnt:\n        cnt[x] -= 1\n        for y in cnt:\n            if cnt[y]:\n                cnt[y] -= 1\n                deeper(x, y, 2)\n                cnt[y] += 1\n        cnt[x] += 1\n    print(max(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def go(a,b):\n    ret,c=0,a+b\n    if d.get(c) and d[c]>0:\n        d[c]-=1\n        ret=go(b,c)+1\n        d[c]+=1\n    return ret\n\ninput()\nd={}\nfor i in map(int,input().split()):\n    if d.get(i):d[i]+=1\n    else: d[i]=1\n\nans=2\nfor a in d:\n    for b in d:\n        if a!=b or d[a]>1:\n            d[a]-=1\n            d[b]-=1\n            temp=go(a,b)+2\n            ans=max(temp,ans)\n            d[a]+=1\n            d[b]+=1\nprint(ans)\n", "from collections import Counter\n\n\ndef go(a, b, counter):\n    res, c = 0, a + b\n    if counter.get(c) and counter[c] > 0:\n        counter[c] -= 1\n        res = max(res, go(b, c, counter) + 1)\n        counter[c] += 1\n    return res\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    counter = Counter(a)\n    res = 2\n    for a in counter:\n        for b in counter:\n            if (a != 0 or b != 0) and (a != b or counter[a] > 1):\n                counter[a] -= 1\n                counter[b] -= 1\n                res = max(res, go(a, b, counter) + 2)\n                counter[a] += 1\n                counter[b] += 1\n    res = max(res, counter[0])\n    print(res)\n\nmain()", "'''\nCreated on Aug 26, 2016\n\n@author: Md. Rezwanul Haque\n'''\n'''\nF = []\na,b = 0,1\n#F.append(a)\nfor _ in range(5):\n    F.append(b)\n    a,b = b,a+b\nprint(F)\n'''\ndef go(a,b):\n    res, c = 0,a+b\n    if d.get(c) and d[c]>0:\n        d[c] -= 1\n        res = go(b,c) + 1\n        d[c] += 1\n        #print(\"Res : \" ,res)\n    return res \ninput()\nd = {}\nfor i in map(int, input().split()):\n    if d.get(i):\n        d[i] += 1\n    else:\n        d[i] = 1\nans = 2\nfor a in d:\n    for b in  d:\n        if a != b or d[a] >1 :\n            d[a] -= 1\n            d[b] -= 1\n            cnt  = go(a,b) + 2\n            d[a] += 1\n            d[b] += 1\n            ans =  max(ans, cnt)\nprint(ans) ", "def rec(a, b):\n    res, c = 0, a + b\n    if d.get(c) and d[c] > 0:\n        d[c] -= 1\n        res = rec(b, c) + 1\n        d[c] += 1\n    return res\n\ninput()\nd = {}\nfor i in map(int, input().split()):\n    if d.get(i):\n        d[i] += 1\n    else:\n        d[i] = 1\nans = 2\nfor a in d:\n    for b in d:\n        if a != b or d[a] > 1:\n            d[a] -= 1\n            d[b] -= 1\n            cnt = rec(a, b) + 2\n            d[a] += 1\n            d[b] += 1\n            ans = max(ans, cnt)\nprint(ans)\n", "n = int(input())\na = [int(i) for i in input().split()]\nans = a.count(0)\nd, s = dict(), set(a)\nfor i in a:\n    if i not in list(d.keys()):\n        d[i] = 0\n    d[i] += 1\nfor i in range(n):\n    for j in range(n):\n        if i == j or a[i] == a[j] == 0: continue\n        a1, a2 = a[i], a[j]\n        ln, dl = 2, [a1, a2]\n        d[a1] -= 1\n        d[a2] -= 1\n        while a1 + a2 in s:\n            a1, a2 = a2, a1 + a2\n            d[a2] -= 1\n            dl.append(a2)\n            if d[a2] < 0:\n                break\n            ln += 1\n        ans = max(ans, ln)\n        for v in dl:\n            d[v] += 1\nprint(ans)\n", "from collections import Counter\ninput()\ns = Counter(map(int, input().split()))\nn = 0\nfor q in s:\n    s[q] -= 1\n    for a in s:\n        if not s[a]: continue\n        t = [a]\n        s[a] -= 1\n        b = q + a\n        while s.get(b, 0):\n            s[b] -= 1\n            t.append(b)\n            a, b = b, a + b\n        n = max(n, len(t))\n        for c in t: s[c] += 1\n    s[q] += 1\nprint(n + 1)", "n = int(input())\na = list(map(int,input().split()))\nans = a.count(0)\nd = {}\nfor i in a:\n\tif i not in d:\n\t\td[i] = 1\n\telse:\n\t\td[i] += 1\n\nans = max(ans, 2)\n\nfor i in range(n):\n\tfor j in range(n):\n\t\t\n\t\tif(i != j and (a[i] != 0 or a[j] != 0)):\n\n\t\t\tfirst = a[i]\n\t\t\tsecond = a[j]\n\t\t\ttemp = [first, second]\n\t\t\tthird = first + second\n\n\t\t\twhile(True):\n\n\t\t\t\tif abs(third) > int(1e9):\n\t\t\t\t\tbreak\n\n\t\t\t\tif third not in d:\n\t\t\t\t\tbreak\n\n\t\t\t\ttemp.append(third)\n\n\t\t\t\tfirst = second\n\t\t\t\tsecond = third\n\t\t\t\tthird = first + second\n\n\t\t\tcount = 0\n\t\t\tf = 1\n\t\t\tfor k in range(len(temp)):\n\t\t\t\tif d[temp[k]] > 0:\n\t\t\t\t\td[temp[k]] -= 1\n\t\t\t\t\tcount += 1\n\t\t\t\telse:\n\t\t\t\t\tf = 0\n\t\t\t\t\tfor j in range(k):\n\t\t\t\t\t\td[temp[j]] += 1\n\t\t\t\t\tbreak\n\t\t\tif f:\n\t\t\t\tfor k in temp:\n\t\t\t\t\td[k] += 1\n\t\t\tans = max(ans, count)\n\n\nprint(ans)\n", "from collections import Counter\n\nn = int(input())\ns = Counter(list(map(int, input().split())))\nn = 0\n\nfor q in s:\n    s[q] -= 1\n\n    for a in s:\n        if s[a]:\n            t = [a]\n            s[a] -= 1\n            b = q + a\n\n            while s.get(b, 0):\n                s[b] -= 1\n                t.append(b)\n                a, b = b, a + b\n\n            n = max(n, len(t))\n\n            for c in t:\n                s[c] += 1\n    s[q] += 1\n\nprint(n + 1)\n", "from collections import Counter\n\nn = int(input())\ns = Counter(list(map(int, input().split())))\nn = 0\n\nfor q in s:\n    s[q] -= 1\n\n    for a in s:\n        if s[a]:\n            t = [a]\n            s[a] -= 1\n            b = q + a\n\n            while s.get(b, 0):\n                s[b] -= 1\n                t.append(b)\n                a, b = b, a + b\n\n            n = max(n, len(t))\n\n            for c in t:\n                s[c] += 1\n    s[q] += 1\n\nprint(n + 1)\n", "import random, math\nfrom copy import deepcopy as dc\nfrom bisect import bisect_left, bisect_right\nfrom collections import Counter\n\n\n# Function to call the actual solution\ndef solution(li):\n\tma = {}\n\tfor i in range(len(li)):\n\t\tma[li[i]] = ma.get(li[i], 0) + 1\n\t# ma1 = dc(ma)\n\tans = 0\n\t# li = list(set(li))\n\tfor i in range(len(li)):\n\t\tfor j in range(len(li)):\n\t\t\tif i != j:\n\t\t\t\tf0 = li[i]\n\t\t\t\tf1 = li[j]\n\t\t\t\tif f0 == 0 and f1 == 0:\n\t\t\t\t\tans = max(ans, ma[0])\n\t\t\t\t\tcontinue\n\n\t\t\t\tma[f0] -= 1\n\t\t\t\tma[f1] -= 1\n\t\t\t\tcur = 2\n\t\t\t\twhile True:\n\t\t\t\t\tnxt = f0 + f1\n\t\t\t\t\tif nxt in ma and ma[nxt] > 0:\n\t\t\t\t\t\tf0 = f1 + 1 - 1\n\t\t\t\t\t\tf1 = nxt + 1 - 1\n\t\t\t\t\t\tma[nxt] -= 1\n\t\t\t\t\t\tcur += 1\n\t\t\t\t\telse:\n\t\t\t\t\t\tbreak\n\t\t\t\tcur1 = 2\n\t\t\t\tma[f0] += 1\n\t\t\t\tma[f1] += 1\n\t\t\t\twhile cur1 < cur:\n\t\t\t\t\tprev = f1 - f0\n\t\t\t\t\tf1 = f0 + 1 - 1\n\t\t\t\t\tf0 = prev + 1 - 1\n\t\t\t\t\tma[prev] += 1\n\t\t\t\t\tcur1 += 1\n\t\t\t\tans = max(ans, cur)\n\treturn ans\n\n\n# Function to take input\ndef input_test():\n\t\tn = int(input())\n\t\tli = list(map(int, input().strip().split(\" \")))\n\t\tout = solution(li)\n\t\tprint(out)\n\n# Function to test my code\ndef test():\n\tpass\n\n\ninput_test()\n# test()\n", "from copy import * \nlength=int(input())\narr=list(map(int,input().split()))\nd=dict()\nfor i in arr:\n    d[i]=d.get(i,0)+1\nans=0\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if i!=j:\n            if arr[i]==0 and arr[j]==0:\n                ans=max(ans,d[arr[i]])\n            else:\n                count=2\n                a=arr[i]\n                b=arr[j]\n                d[a]-=1 \n                d[b]-=1 \n                for k in range(100):\n                    if d.get(a+b):\n                        count+=1 \n                        d[a+b]-=1 \n                        c=a+b\n                        a=b\n                        b=c\n                    else:\n                        d[a]+=1 \n                        d[b]+=1\n                        ans=max(ans,count)\n                        break\n                y=count-2 \n                while y>0:\n                    c=b-a \n                    d[c]=d.get(c,0)+1 \n                    b=a \n                    a=c \n                    y-=1 \nprint(ans)\n", "from copy import * \nlength=int(input())\narr=list(map(int,input().split()))\nd=dict()\nfor i in arr:\n    d[i]=d.get(i,0)+1\nans=0\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if i!=j:\n            if arr[i]==0 and arr[j]==0:\n                ans=max(ans,d[arr[i]])\n            else:\n                count=2\n                a=arr[i]\n                b=arr[j]\n                d[a]-=1 \n                d[b]-=1 \n                for k in range(100):\n                    if d.get(a+b):\n                        count+=1 \n                        d[a+b]-=1 \n                        c=a+b\n                        a=b\n                        b=c\n                    else:\n                        d[a]+=1 \n                        d[b]+=1\n                        ans=max(ans,count)\n                        break\n                y=count-2 \n                while y>0:\n                    c=b-a \n                    d[c]=d.get(c,0)+1 \n                    b=a \n                    a=c \n                    y-=1 \nprint(ans)\n", "from sys import stdin, stdout\n\ndef fin(): return stdin.readline().strip()\ndef fout(x): stdout.write(str(x) + '\\n')\n\ndef m_add(mp, val):\n    mp[val] = mp.get(val, 0) + 1\ndef m_remove(mp, val):\n    if mp[val] == 1:\n        mp.pop(val)\n    else:\n        mp[val] -= 1\n\n\nn, arr, mp, res = int(fin()), list(map(int, fin().split())), {}, 0\nfor i in arr: m_add(mp, i)\n\nfor i in range(n):\n    for j in range(n):\n        if i == j: continue\n        cnt, a, b = 2, arr[i], arr[j]\n\n        if a == 0 and b == 0:\n            res = max(res, mp[0])\n            continue\n\n        m_remove(mp, a)\n        m_remove(mp, b)\n        \n        while a+b in mp:\n            m_remove(mp, a+b)\n            a, b = b, a+b\n            cnt += 1\n        \n        res = max(res, cnt)\n        while a != arr[i] or b != arr[j]:\n            a, b = b - a, a\n            m_add(mp, a+b)\n        \n        m_add(mp, a)\n        m_add(mp, b)\nprint(res)\n"]