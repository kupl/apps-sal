["def main():\n    from sys import stdin, stdout\n\n    def read():\n        return stdin.readline().rstrip('\\n')\n\n    def read_array(sep=None, maxsplit=-1):\n        return read().split(sep, maxsplit)\n\n    def read_int():\n        return int(read())\n\n    def read_int_array(sep=None, maxsplit=-1):\n        return [int(a) for a in read_array(sep, maxsplit)]\n\n    def write(*args, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in args) + end)\n\n    def write_array(array, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in array) + end)\n\n    n, m = read_int_array()\n    minm, maxm = [], []\n    for _ in range(n):\n        minm.append(read_int_array())\n    for _ in range(n):\n        maxm.append(read_int_array())\n\n    for r in range(n):\n        for c in range(m):\n            minx = min(minm[r][c], maxm[r][c])\n            maxx = max(minm[r][c], maxm[r][c])\n            if r:\n                if minx <= minm[r-1][c] or maxx <= maxm[r-1][c]:\n                    write(\"Impossible\")\n                    return\n            if c:\n                if minx <= minm[r][c-1] or maxx <= maxm[r][c-1]:\n                    write(\"Impossible\")\n                    return\n            minm[r][c] = minx\n            maxm[r][c] = maxx\n    write(\"Possible\")\n\nmain()\n", "def getn():\n    return int(input())\ndef getns():\n    return [int(x)for x in input().split()]\n# n=getn()\n# ns=getns()\nn,m=getns()\na=[[0]*m for i in range(n)]\nb=[[0]*m for i in range(n)]\na=[]\nb=[]\nfor i in range(n):\n    a.append(getns())\nfor i in range(n):\n    b.append(getns())\nfor i in range(n):\n    for j in range(m):\n        a[i][j],b[i][j]=min(a[i][j],b[i][j]),max(a[i][j],b[i][j])\n\ndef check(x):\n    for i in range(n):\n        for j in range(m-1):\n            if x[i][j]>=x[i][j+1]:\n                return False\n    for i in range(n-1):\n        for j in range(m):\n            if x[i][j]>=x[i+1][j]:\n                return False\n    return True\nif check(a) and check(b):\n    print('Possible')\nelse:\n    print('Impossible')\nquit()\n\n\nprint(a)\nprint(b)\n", "n, m = map(int, input().split())\nl1 = [list(map(int, input().split())) for i in range(n)]\nl2 = [list(map(int, input().split())) for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        l1[i][j], l2[i][j] = min(l1[i][j], l2[i][j]), max(l1[i][j], l2[i][j])\nans = True\nfor i in range(1, n):\n    for j in range(m):\n        if l1[i][j] <= l1[i - 1][j] or l2[i][j] <= l2[i - 1][j]:\n            ans = False\nfor i in range(n):\n    for j in range(1, m):\n        if l1[i][j] <= l1[i][j - 1] or l2[i][j] <= l2[i][j - 1]:\n            ans = False\nif ans:\n    print('Possible')\nelse:\n    print('Impossible')", "n, m = map(int, input().split())\n\nm1 = [list(map(int, input().split())) for _ in range(n)]\nm2 = [list(map(int, input().split())) for _ in range(n)]\n\nfor i in range(n):\n\tfor j in range(m):\n\t\tm1[i][j], m2[i][j] = max(m1[i][j], m2[i][j]), min(m1[i][j], m2[i][j])\n\ndef check(matrix):\n\treturn all(all(y > x for x, y in zip(row, row[1:])) for row in matrix)\n\nprint(\"Possible\" if check(m1) and check(m2) and check(list(map(list, zip(*m1)))) and check(list(map(list, zip(*m2)))) else \"Impossible\")", "n, m = map(int, input().split())\n\nM1 = []\nM2 = []\n\nfor i in range(n):\n    M1.append(list(map(int, input().split())))\n    \nfor i in range(n):\n    M2.append(list(map(int, input().split())))\n    \nfor i in range(n):\n    for j in range(m):\n        M1[i][j], M2[i][j] = min(M1[i][j], M2[i][j]), max(M1[i][j], M2[i][j])\n\nf = 1        \nfor i in range(n):\n    for j in range(m):\n        if i > 0 and (M1[i][j] <= M1[i-1][j] or M2[i][j] <= M2[i-1][j]):\n            f = 0\n            break\n        if j > 0 and (M1[i][j] <= M1[i][j-1] or M2[i][j] <= M2[i][j-1]):\n            f = 0\n            break\n#print(M1)\n#print(M2)\nif f == 1:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")", "n,m=list(map(int, input().split()))\na=[None]*n\nb=[None]*n\nfor i in range(n):\n    a[i]=[int(x) for x in input().split()]\nfor i in range(n):\n    b[i]=[int(x) for x in input().split()]\nmi=[[None]*m for _ in range(n)]\nma=[[None]*m for _ in range(n)]\nfor i in range(n):\n    for j in range(m):\n        mi[i][j]=min(a[i][j], b[i][j])\n        ma[i][j]=max(a[i][j], b[i][j])\n\nfor i in range(n):\n    for j in range(m):\n        if (i > 0 and mi[i][j] <= mi[i-1][j] or i < n - 1 and mi[i][j] >= mi[i+1][j] or\n            j > 0 and mi[i][j] <= mi[i][j-1] or j < m - 1 and mi[i][j] >= mi[i][j+1]):\n            print('Impossible')\n            raise SystemExit(0)\n        if (i > 0 and ma[i][j] <= ma[i-1][j] or i < n - 1 and ma[i][j] >= ma[i+1][j] or\n            j > 0 and ma[i][j] <= ma[i][j-1] or j < m - 1 and ma[i][j] >= ma[i][j+1]):\n            print('Impossible')\n            raise SystemExit(0)\n\nprint('Possible')\n", "n, m = list(map(int, input().split()))\na1, a2 = [], []\nfor i in range(n):\n    a1.append(list(map(int, input().split())))\nfor i in range(n):\n    a2.append(list(map(int, input().split())))\n\nfor i in range(n):\n    for j in range(m):\n        a1[i][j], a2[i][j] = min(a1[i][j], a2[i][j]), max(a1[i][j], a2[i][j])\n\ndef check(a):\n    for i in range(n):\n        for j in range(1, m):\n            if a[i][j] <= a[i][j-1]: return False\n    for j in range(m):\n        for i in range(1, n):\n            if a[i][j] <= a[i-1][j]: return False\n    return True\n\nans = \"Possible\" if check(a1) and check(a2) else \"Impossible\"\nprint(ans)\n", "def main():\n    n, m = map(int, input().split())\n    fir = [[] for i in range(n)]\n    sec = [[] for i in range(n)]\n    for i in range(n):\n        fir[i] = list(map(int, input().split()))\n    for i in range(n):\n        sec[i] = list(map(int, input().split()))\n    \n    for i in range(n):\n        for j in range(m):\n            fir[i][j], sec[i][j] = min(fir[i][j], sec[i][j]), max(fir[i][j], sec[i][j])\n    \n    for i in range(n):\n        for j in range(m):\n            if i > 0 and fir[i][j] <= fir[i - 1][j]:\n                print(\"Impossible\")\n                return 0\n            if j > 0 and fir[i][j] <= fir[i][j - 1]:\n                print(\"Impossible\")\n                return 0\n            if i > 0 and sec[i][j] <= sec[i - 1][j]:\n                print(\"Impossible\")\n                return 0\n            if j > 0 and sec[i][j] <= sec[i][j - 1]:\n                print(\"Impossible\")\n                return 0\n    print(\"Possible\")\n    return 0\n            \n            \nmain()", "n,m=[int(x) for x in input().split()]\na=[]\nb=[]\nfor i in range(n):\n    c=[int(x) for x in input().split()]\n    a.append(c)\nfor i in range(n):\n    c=[int(x) for x in input().split()]\n    b.append(c)\nfor i in range(n):\n    for j in range(m):\n        x,y=a[i][j],b[i][j]\n        a[i][j]=min(x,y)\n        b[i][j]=max(x,y)\n        if j>0:\n            if a[i][j]<=a[i][j-1] or b[i][j]<=b[i][j-1]:\n                print('Impossible')\n                return\n        if i>0:\n            if a[i][j]<=a[i-1][j] or b[i][j]<=b[i-1][j]:\n                print('Impossible')\n                return\nprint('Possible')\n            \n", "# -*- coding: utf-8 -*-\n# @Time    : 2019/5/5 1:09\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : B. Double Matrix.py\n\n\ndef main():\n    n, m = map(int, input().split())\n    a, b = [], []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n):\n        b.append(list(map(int, input().split())))\n\n    def check(mat, i, j):\n        if i > 0 and mat[i][j] <= mat[i - 1][j]:\n            return False\n        if j > 0 and mat[i][j] <= mat[i][j - 1]:\n            return False\n        return True\n\n    for i in range(n):\n        for j in range(m):\n            a[i][j], b[i][j] = min(a[i][j], b[i][j]), max(a[i][j], b[i][j])\n\n    for i in range(n):\n        for j in range(m):\n            if (not check(a, i, j)) or (not check(b, i, j)):\n                print('Impossible')\n                return\n    print('Possible')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def check(A,H,W):\n    for h in range(H):\n        for w in range(W-1):\n            if A[h][w] >= A[h][w+1]:\n                return False\n    for w in range(W):\n        for h in range(H-1):\n            if A[h][w] >= A[h+1][w]:\n                return False\n    return True\n\ndef solve():\n    H,W = list(map(int,input().split()))\n    A = [list(map(int,input().split())) for i in range(H)]\n    B = [list(map(int,input().split())) for i in range(H)]\n    if check(A,H,W) and check(B,H,W):\n        return 'Possible'\n    for h in range(H):\n        for w in range(W):\n            if A[h][w] > B[h][w]:\n                A[h][w], B[h][w] = B[h][w], A[h][w]\n    if check(A,H,W) and check(B,H,W):\n        return 'Possible'\n    return 'Impossible'\n\nprint(solve())\n", "n , m = list(map(int,input().split()))\nm1 = [list(map(int,input().split())) for i in range(n)]\nm2 = [list(map(int,input().split())) for i in range(n)]\nimport sys\nfor i in range(n - 1):\n\tfor j in range(m - 1):\n\t\ta, b = m1[i][j], m2[i][j]\n\t\tc, d = m1[i+1][j], m2[i+1][j]\n\t\te, f = m1[i][j+1], m2[i][j+1]\n\t\tif a > b:\n\t\t\ta,b=b,a\n\t\tif c>d:\n\t\t\tc,d=d,c\n\t\tif e>f:\n\t\t\te,f=f,e\n\t\tif b>=d:\n\t\t\tprint(\"Impossible\")\n\t\t\treturn\n\t\telse:\n\t\t\tif a >=c:\n\t\t\t\tprint(\"Impossible\")\n\t\t\t\treturn\n\t\tif b>=f:\n\t\t\tprint(\"Impossible\")\n\t\t\treturn\n\t\telse:\n\t\t\tif a >=e:\n\t\t\t\tprint(\"Impossible\")\n\t\t\t\treturn\nfor i in range(n-1):\n\tj = m - 1\n\ta, b = m1[i][j], m2[i][j]\n\tc, d = m1[i+1][j], m2[i+1][j]\n\tif a > b:\n\t\ta,b=b,a\n\tif c>d:\n\t\tc,d=d,c\n\tif b>=d:\n\t\t\tprint(\"Impossible\")\n\t\t\treturn\n\telse:\n\t\tif a >=c:\n\t\t\tprint(\"Impossible\")\n\t\t\treturn\nfor j in range(m-1):\n\ti = n - 1\n\ta, b = m1[i][j], m2[i][j]\n\te, f = m1[i][j+1], m2[i][j+1]\n\tif a > b:\n\t\ta,b=b,a\n\tif e>f:\n\t\te,f=f,e\n\tif b>=f:\n\t\t\tprint(\"Impossible\")\n\t\t\treturn\n\telse:\n\t\tif a >=e:\n\t\t\tprint(\"Impossible\")\n\t\t\treturn\nprint(\"Possible\")", "n, m = (int(i) for i in input().split())\nL1 = [[int(j) for j in input().split()] for i in range(n)]\nL2 = [[int(j) for j in input().split()] for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if L1[i][j] > L2[i][j]:\n            buf = L1[i][j]\n            L1[i][j] = L2[i][j]\n            L2[i][j] = buf\n\nt = 1\nfor i in range(n):\n    for j in range(m):\n        if i > 0:\n            if L1[i][j] <= L1[i - 1][j]:\n                t = 0\n            if L2[i][j] <= L2[i - 1][j]:\n                t = 0\n        if j > 0:\n            if L1[i][j] <= L1[i][j - 1]:\n                t = 0\n            if L2[i][j] <= L2[i][j - 1]:\n                t = 0\nif not t:\n    print('Impossible')\nelse:\n    print('Possible')\n", "n, m = map(int, input().split())\n\na = [[0 for _ in range(m)] for _ in range(n)]\nb = [[0 for _ in range(m)] for _ in range(n)]\n\n\nfor i in range(n):\n\ta[i] = list(map(int, input().split()))\n\n\nfor i in range(n):\n\tb[i] = list(map(int, input().split()))\n\nfor i in range(n):\n\tfor j in range(m):\n\t\ta[i][j], b[i][j] = min(a[i][j], b[i][j]), max(a[i][j], b[i][j])\n\n# print('a:')\n# print(a)\n\n# print('b:')\n# print(b)\n\nworks = True\n\nfor i in range(n):\n\tfor j in range(m-1):\n\t\tif a[i][j+1] <= a[i][j]:\n\t\t\tworks = False\n\n\t\tif b[i][j+1] <= b[i][j]:\n\t\t\tworks = False\n\nfor j in range(m):\n\tfor i in range(n-1):\n\t\tif a[i+1][j] <= a[i][j]:\n\t\t\tworks = False\n\n\t\tif b[i+1][j] <= b[i][j]:\n\t\t\tworks = False\n\nif works:\n\tprint('Possible')\nelse:\n\tprint('Impossible')", "import sys\ninput = sys.stdin.readline\n\nn,m=map(int,input().split())\n\narr1=[]\nfor i in range(n):\n\tarr1.append(list(map(int,input().split())))\n\narr2=[]\nfor i in range(n):\n\tarr2.append(list(map(int,input().split())))\n\t\narr3=[]\narr4=[]\nfor i in range(n):\n\tarr3.append([])\n\tarr4.append([])\n\tfor j in range(m):\n\t\tarr3[i].append(min(arr1[i][j],arr2[i][j]))\n\t\tarr4[i].append(max(arr1[i][j],arr2[i][j]))\n\nflag=False\nfor i in range(n):\n\tfor j in range(m):\n\t\ttry:\n\t\t\tif arr3[i][j]>=arr3[i][j+1] or arr4[i][j]>=arr4[i][j+1]:\n\t\t\t\tprint(\"Impossible\")\n\t\t\t\tflag=True\n\t\t\t\tbreak\n\t\texcept:\n\t\t\tpass\n\n\t\ttry:\n\t\t\tif arr3[i][j]>=arr3[i+1][j] or arr4[i][j]>=arr4[i+1][j]:\n\t\t\t\tprint(\"Impossible\")\n\t\t\t\tflag=True\n\t\t\t\tbreak\n\t\texcept:\n\t\t\tpass\n\n\tif flag:\n\t\tbreak\n\nif not flag:\n\tprint(\"Possible\")", "def isIncreasing(matrix, n, m):\n    for j in range(m-1):\n        if matrix[0][j+1]<=matrix[0][j]: return False\n    for i in range(n-1):\n        if matrix[i+1][0]<=matrix[i][0]: return False\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j]<=matrix[i-1][j] or matrix[i][j]<=matrix[i][j-1]:\n                return False\n    return True\n\nn, m = list(map(int, input().split()))\nA = []\nB = []\nfor i in range(n):\n    A.append(list(map(int, input().split())))\nfor i in range(n):\n    B.append(list(map(int, input().split())))\nfor i in range(n):\n    for j in range(m):\n        A[i][j], B[i][j] = min(A[i][j], B[i][j]), max(A[i][j], B[i][j])\nif isIncreasing(A, n, m) and isIncreasing(B, n, m): print(\"Possible\")\nelse: print(\"Impossible\")\n", "import sys\n\nn, m = list(map(int, input().split()))\n\n\ndef read_matrix():\n    M = []\n    for i in range(n):\n        M.append(list(map(int, input().split())))\n    return M\n\n\nA, B = read_matrix(), read_matrix()\n\n\nfor i in range(n):\n    for j in range(m):\n        A[i][j], B[i][j] = min(A[i][j], B[i][j]), max(A[i][j], B[i][j])\n        if i > 0 and (A[i][j] <= A[i-1][j] or B[i][j] <= B[i-1][j]) or \\\n            j > 0 and (A[i][j] <= A[i][j-1] or B[i][j] <= B[i][j-1]):\n            print('Impossible')\n            return\n\nprint('Possible')\n", "def increasing(m):\n    for i in range(len(m)):\n        prev = m[i][0]\n        for j in range(1, len(m[i])):\n            if m[i][j] <= prev: return False\n            prev = m[i][j]\n    for j in range(len(m[0])):\n        prev = m[0][j]\n        for i in range(1, len(m)):\n            if m[i][j] <= prev: return False\n            prev = m[i][j]\n    return True\n\ndef sol(m1, m2):\n    for i in range(len(m1)):\n        for j in range(len(m1[i])):\n            if m1[i][j] > m2[i][j]:\n                m1[i][j], m2[i][j] = m2[i][j], m1[i][j]\n    if not increasing(m1) or not increasing(m2): return 'Impossible'\n    return 'Possible'\n            \ndef __starting_point():\n    [n,m] = [int(x) for x in input().split()]\n    m1, m2 = [], []\n    for _  in range(n): m1.append([int(x) for x in input().split()])\n    for _  in range(n): m2.append([int(x) for x in input().split()])\n    print(sol(m1,m2))\n\n__starting_point()", "# http://codeforces.com/contest/1162/problem/B\n'''\n    Author - Subhajit Das\n    University of Engineering and Management, Kolkata\n    4/5/2019\n'''\n\n\ndef main():\n    n, m = list(map(int, input().strip().split()))\n    a = [list(map(int, input().strip().split())) for _ in range(n)]\n    b = [list(map(int, input().strip().split())) for _ in range(n)]\n\n    possible = True\n\n    for row in range(n):\n        last_a = a[row][0]\n        last_b = b[row][0]\n        for col in range(1, m):\n            if last_a < a[row][col] and last_b < b[row][col]:\n                last_a = a[row][col]\n                last_b = b[row][col]\n            else:\n                a[row][col], b[row][col] = b[row][col], a[row][col]\n                if last_a < a[row][col] and last_b < b[row][col]:\n                    last_a = a[row][col]\n                    last_b = b[row][col]\n                else:\n                    possible = False\n                    break\n\n    if possible:\n        for col in range(m):\n            last_a = a[0][col]\n            last_b = b[0][col]\n            for row in range(1, n):\n                if last_a < a[row][col] and last_b < b[row][col]:\n                    last_a = a[row][col]\n                    last_b = b[row][col]\n                else:\n                    a[row][col], b[row][col] = b[row][col], a[row][col]\n                    if last_a < a[row][col] and last_b < b[row][col]:\n                        last_a = a[row][col]\n                        last_b = b[row][col]\n                    else:\n                        possible = False\n                        break\n\n    print(\"Possible\" if possible else \"Impossible\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, m = list(map(int, input().split()))\n    m1 = [[] for _ in range(n)]\n    m2 = [[] for _ in range(n)]\n    for i in range(n):\n        m1[i] = list(map(int, input().split()))\n    for i in range(n):\n        m2[i] = list(map(int, input().split()))\n\n    for r in range(n):\n        for c in range(m):\n            m1[r][c], m2[r][c] = min(m1[r][c], m2[r][c]), max(m1[r][c], m2[r][c])\n\n    def checkRow(row):\n        for i in range(m-1):\n            if m1[row][i] >= m1[row][i+1] or m2[row][i] >= m2[row][i+1]:\n                return False\n        return True\n\n    def checkCol(col):\n        for i in range(n-1):\n            if m1[i][col] >= m1[i+1][col] or m2[i][col] >= m2[i+1][col]:\n                return False\n        return True\n\n    ok = True\n    for r in range(n):\n        if not checkRow(r):\n            ok = False\n            break\n\n    if ok:\n        for c in range(m):\n            if not checkCol(c):\n                ok = False\n                break\n\n    print('Possible' if ok else 'Impossible')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nn, m = map(int, input().split())\n\nmat1 = []\nmat2 = []\n\nfor _ in range(n):\n    mat1.append(list(map(int, input().split())))\nfor _ in range(n):\n    mat2.append(list(map(int, input().split())))\n\nfor i in range(n):\n    for j in range(m):\n        if mat2[i][j] < mat1[i][j]:\n            mat1[i][j], mat2[i][j] = mat2[i][j], mat1[i][j]\n\nfor i in range(n):\n    for j in range(1, m):\n        if mat1[i][j] <= mat1[i][j - 1] or mat2[i][j] <= mat2[i][j - 1]:\n            print(\"Impossible\")\n            return\nfor i in range(1, n):\n    for j in range(m):\n        if mat1[i][j] <= mat1[i - 1][j] or mat2[i][j] <= mat2[i - 1][j]:\n            print(\"Impossible\")\n            return\nprint(\"Possible\")"]