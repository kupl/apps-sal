["n = int(input())\ns = list([1 if x == '>' else -1 for x in input().strip()])\nd = list(map(int, input().strip().split()))\nb = [False for _ in range(n)]\n\nc = 0\nwhile True:\n    c += s[c] * d[c]\n    if c >= n or c < 0:\n        print('FINITE')\n        return\n    if b[c]:\n        print('INFINITE')\n        return\n    b[c] = True\n", "\n\nn = int(input())\ns = input()\nl = list(map(int, input().split()))\ncount = 0\nmas = [False for i in range(n)]\npos = 0\nans = 'INFINITE'\nfor i in range(n):\n    if mas[pos]:\n        break\n    else:\n        mas[pos] = True\n    if s[pos] == '<':\n        if pos - l[pos] < 0:\n            ans =  'FINITE'\n        else:\n            pos -= l[pos]\n    else:\n        if pos + l[pos] >= n:\n            ans = 'FINITE'\n        else:\n            pos += l[pos]\nprint(ans)", "n = int(input())\nstr = input()\ninp = list(map(int, input().split()))\n\nfor i in range(len(str)):\n    if str[i] == '<':\n        inp[i] *= -1\n\nvisited = [0 for i in range(n)]\n\ncur = 0\n\nwhile cur >= 0 and cur < n and visited[cur] != 1:\n    visited[cur] = 1\n    cur += inp[cur]\n\nif cur >= 0 and cur < n:\n    print(\"INFINITE\")\nelse:\n    print(\"FINITE\")", "n = int(input())\ns = input()\nnum = list(map(int, input().split()))\npos = 0\nb = [True] * n\nwhile n > pos >= 0 and b[pos]:\n    b[pos] = False\n    if s[pos] == \">\":\n        pos += num[pos]\n    else:\n        pos -= num[pos]\nif n > pos >= 0:\n    print(\"INFINITE\")\nelse:\n    print(\"FINITE\")", "n = int(input())\ninstructions = list(zip(input(), [int(i) for i in input().split()]))\n\nused = set()\npos = 0\nwhile True:\n    if pos < 0 or pos >= n:\n        print('FINITE')\n        break\n    if pos in used:\n        print('INFINITE')\n        break\n    used.add(pos)\n\n    direct, length = instructions[pos]\n    if direct == '>':\n        pos += length\n    else:\n        pos -= length\n", "n = int(input())\ncells = input()\nlengths = list(map(int, input().split()))\nvisited = set()\ni = 0\nwhile (i not in visited) and (i < n) and (i > -1):\n\tvisited.add(i)\n\tif cells[i] == '>':\n\t\ti += lengths[i]\n\telse:\n\t\ti -= lengths[i]\n\t#print('new', i)\n\t\nif (i < n) and (i >= 0):\n\tprint(\"INFINITE\")\nelse:\n\tprint(\"FINITE\")\n\t\n", "class graph():\n    def __init__(self,n,v):\n        self.G=dict()\n        for i in range(1,n+1):\n            self.G.update([(i,set())])\n        self.v=v\n        self.length=n\n    def AppendEdge(self,a):\n        self.G[a[0]].add(a[1])\n        if not self.v:\n            self.G[a[1]].add(a[0])\n    def ShowAdjacent(self,a):\n        return self.G[a]\n    def ShowLength(self):\n        return self.length\n    def Show(self):\n        print(self.G)\n\nn=int(input())\ns=input()\nf=[int(z) for z in input().split()]\n##G=graph(n+2,1)\nVis=[0]*n\nk=1\ni=0\nVis[0]=1\nwhile k!=0:\n\tif s[i]=='>':\n\t\tt=i+f[i]\n\t\tif t>=n:\n\t\t\tprint('FINITE')\n\t\t\tk=0\n\t\telif Vis[t]:\n\t\t\tprint('INFINITE')\n\t\t\tk=0\n\t\telse:\n\t\t\tVis[t]=1\n\t\t\ti=t\n\telse:\n\t\tt=i-f[i]\n\t\tif t<0:\n\t\t\tprint('FINITE')\n\t\t\tk=0\n\t\telif Vis[t]:\n\t\t\tprint('INFINITE')\n\t\t\tk=0\n\t\telse:\n\t\t\tVis[t]=1\n\t\t\ti=t", "import sys\ndef dfs(v):\n    used[v] = True\n    for i in ed[v]:\n        if not used[i]:\n            dfs(i)\n\n\n\nsys.setrecursionlimit(1000000)\nn = int(input())\ndata1 = input()\ndata2 = list(map(int, input().split()))\nused = [False for i in range(n)]\ndata3 = [None for i in range(n)]\nfor i in range(n):\n    if data1[i] == \">\":\n        data3[i] = i + data2[i]\n    else:\n        data3[i] = i - data2[i]\nans = True\nindex = 0\nprev = -1\nfor i in range(2 * n):\n    used[index] = True\n    prev = index\n    if data3[index] >= n or data3[index] < 0:\n        ans = False\n        break\n    else:\n        index = data3[index]\n        if index == prev:\n            break\nif ans:\n    print(\"INFINITE\")\nelse:\n    print(\"FINITE\")", "from sys import stdin as Si\nfrom math import floor as F \nfrom collections import defaultdict as dt\nfrom operator import itemgetter as ig\n\ndef __starting_point():\n\n    n = int(Si.readline())\n    d = Si.readline().strip('\\n')\n    c = tuple(map(int,Si.readline().split()))\n    tub,i,Exit = set([0]),0,False\n    while not Exit:\n        if d[i]=='>':   i=i+c[i]\n        else:   i=i-c[i]\n        if  i<0 or i>=n:   print('FINITE');break\n        elif i in tub:    print('INFINITE');break\n        else: tub.add(i)\n        \n        \n    \n    \n'''\nA. Little Artem and Grasshopper\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\n\nLittle Artem found a grasshopper. He brought it to his house and constructed a jumping area for him.\n\nThe area looks like a strip of cells 1\u2009\u00d7\u2009n. Each cell contains the direction for the next jump and the length of that jump. Grasshopper starts in the first cell and follows the instructions written on the cells. Grasshopper stops immediately if it jumps out of the strip. Now Artem wants to find out if this will ever happen.\nInput\n\nThe first line of the input contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009100\u2009000) \u2014 length of the strip.\n\nNext line contains a string of length n which consists of characters \"<\" and \">\" only, that provide the direction of the jump from the corresponding cell. Next line contains n integers di (1\u2009\u2264\u2009di\u2009\u2264\u2009109) \u2014 the length of the jump from the i-th cell.\nOutput\n\nPrint \"INFINITE\" (without quotes) if grasshopper will continue his jumps forever. Otherwise print \"FINITE\" (without quotes).\nExamples\nInput\n\n2\n><\n1 2\n\nOutput\n\nFINITE\n\nInput\n\n3\n>><\n2 1 1\n\nOutput\n\nINFINITE\n\nNote\n\nIn the first sample grasshopper starts from the first cell and jumps to the right on the next cell. When he is in the second cell he needs to jump two cells left so he will jump out of the strip.\n\nSecond sample grasshopper path is 1 - 3 - 2 - 3 - 2 - 3 and so on. The path is infinite.\n'''\n\n__starting_point()", "line_length = int(input())\ndirections = input()\ndistances = [int(distance) for distance in input().split()]\nvisited_cells = set()\ncurrent_cell = 0\nwhile 0 <= current_cell < line_length:\n    if current_cell in visited_cells:\n        break\n    else:\n        visited_cells.add(current_cell)\n        if directions[current_cell] == '>':\n            current_cell += distances[current_cell]\n        else:\n            current_cell -= distances[current_cell]\nif 0 <= current_cell < line_length:\n    print(\"INFINITE\")\nelse:\n    print(\"FINITE\")\n", "def __starting_point():\n    n = int(input())\n    d = input()\n    w = [int(i) for i in input().split()]\n    visited = set()\n    i = 0\n    while (i not in visited) and (i < n) and (i > -1):\n        visited.add(i)\n        if d[i] == '>':\n            i += w[i]\n        else:\n            i -= w[i]\n    if (i >= 0) and (i < n):\n        print('INFINITE')\n    else:\n        print('FINITE')\n__starting_point()", "n, s = int(input()), input()\na = [int(i) for i in input().split()]\nc = i = 0\nwhile True:\n    if s[i] == '>':\n        i += a[i]\n    else:\n        i -= a[i]\n    if i < 0 or i >= n:\n        print(\"FINITE\")\n        return\n    c += 1\n    if c > n:\n        print(\"INFINITE\")\n        return", "n = int(input())\ns = input()\na = list(map(int, input().split()))\nWAS = False\npos = 1\nfor i in range(0, n) :\n    if s[pos - 1] == '<' : pos -= a[pos - 1]\n    else : pos += a[pos - 1]\n    if pos < 1 or pos > n : WAS = True\n    if WAS : break\nif WAS : print(\"FINITE\")\nelse : print(\"INFINITE\")\n\n", "n = int(input())\ns = input(); a = len(s)\nj = list(map(int, input().split()))\nx = 1\nb = 'INFINITE'\ntmp = 0\nwhile tmp < n:\n\tif s[x-1] == '>':\n\t\tx += j[x-1]\n\t\tif x > n:\n\t\t\tb = 'FINITE'; break\n\telif s[x-1] == '<':\n\t\tx -= j[x-1]\n\t\tif x <= 0:\n\t\t\tb = 'FINITE'; break\n\ttmp += 1\nprint(b)", "def main():\n\tn = int(input())\n\tarrows = input()\n\tcells = [int(x) for x in input().split()]\n\tprint(solver(arrows, cells))\n\ndef solver(arrows, cells):\n\tfor i in range(len(arrows)):\n\t\tif arrows[i] == '<':\n\t\t\tcells[i] = - cells[i]\n\tvisited = [False] * len(cells)\n\tindex = 0\n\twhile True:\n\t\tif index >= len(cells) or index < 0:\n\t\t\treturn \"FINITE\"\n\t\telif visited[index] == True:\n\t\t\treturn \"INFINITE\"\n\t\telse:\n\t\t\tvisited[index] = True\n\t\t\tindex = index + cells[index]\n\n#print(solver(\">><\", [2, 1, 1]))\n#print(solver(\"><\", [1, 2]))\nmain()", "def main():\n    n = int(input())\n    l = [j - i if c == \"<\" else j + i for c, i, j in zip(input(), list(map(int, input().split())), list(range(n)))]\n    v, i = [True] * n, 0\n    while 0 <= i < n:\n        if v[i]:\n            v[i] = False\n        else:\n            print(\"INFINITE\")\n            return\n        i = l[i]\n    print(\"FINITE\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\ns = list(1 if x == '>' else -1 for x in input())\nl = list(map(int, input().split()))\nsumm = 1\ncur = 0\nnext = 0\nfor i in range(n):\n    if cur < 0 or cur > n - 1:\n        print('FINITE')\n        return\n    if l[cur] == 0:\n        print('INFINITE')\n        return\n    next += l[cur] * s[cur]\n    l[cur] = 0\n    cur = next\nprint('INFINITE' if 0 <= cur < n else 'FINITE')", "n=int(input())\nS=input()\nl=list(map(int,input().split()))\ni=0\nc=1\nwhile i>=0 or i>=n-1 :\n    if S[i]=='>' and i+l[i]>n-1 :\n        c=1\n        break\n    if S[i]=='<' and i-l[i]<0 :\n        c=1\n        break\n    if l[i]==0 :\n        c=0\n        break\n    d=l[i]\n    l[i]=0\n    if S[i]=='>' :\n        i=i+d\n    else :\n        i=i-d\nif c==1 :\n    print('FINITE')\nelse :\n    print('INFINITE')\n", "def __starting_point():\n    n = int(input())\n    ins = list(str(input()))\n    abi = list(map(int, input().split()))\n    sta = [False] * n\n    pos = 0\n    while True:\n        sta[pos] = True\n        if ins[pos] == '>':\n            pos += abi[pos]\n        elif ins[pos] == '<':\n            pos -= abi[pos]\n        if pos < 0 or pos > n - 1:\n            print('FINITE')\n            break\n        elif sta[pos]:\n            print('INFINITE')\n            break\n\n__starting_point()", "n = int(input())\ns = input()\nnumbers = list(map(int, input().split()))\na = 0\ncells = []\ncondition = False\nwhile True:\n    if a < 0 or a >= n:\n        print(\"FINITE\")\n        break\n    if s[a] == \">\":\n        a += numbers[a]\n    else:\n        condition = True\n        a -= numbers[a]\n    if condition and a in cells:\n        print(\"INFINITE\")\n        break\n    cells.append(a)", "n=int(input())\n\na=input()  #string input\ncount=0\nflag=0\n\n\n\nb=[int(r) for r in input().split()]\n\n#b=input().split()\n\ni=int()\nfor i in range(0,n,1):\n     if i==0:\n         if a[i]=='>':\n          count=count+b[i]\n         else:\n           count=count-b[i]\n\n     elif a[count]=='>':\n        count+=b[count]\n     else:\n        count-=b[count];\n\n     if count>=n or count<0:\n        flag=1\n        break\n\nif flag==1:\n  print(\"FINITE\")\nelse:\n  print(\"INFINITE\")\n\n", "n,s,i=int(input()),input(),0\nd=list(map(int,input().split()))\nfor _ in range(len(s)+1):\n  if i<0 or i>=len(s):print('FINITE');return\n  i+=[d[i],-d[i]][s[i]=='<']\nprint('INFINITE')\n", "n,s,i=int(input()),input(),0\n\nd=list(map(int,input().split()))\n\nfor _ in range(len(s)+1):\n\n  if i<0 or i>=len(s):print('FINITE');return\n\n  i+=[d[i],-d[i]][s[i]=='<']\n\nprint('INFINITE')\n\n\n\n# Made By Mostafa_Khaled", "def main():\n    n = int(input())\n    d = input()\n    l = [int(c) for c in input().split()]\n    visited = {0}\n    i = 0\n    while 0 <= i < n:\n        di, li = d[i], l[i]\n        i = i + li if di == '>' else i - li\n        if i in visited:\n            print('INFINITE')\n            return\n        visited.add(i)\n\n    print('FINITE')\n        \n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\ns=input()\nl=list(map(int,input().split()))\nL=[0 for i in range(n)]\ni=0\nwhile (True):\n    if L[i]==-1 :\n        print(\"INFINITE\")\n        return\n    L[i]=-1\n    if s[i]==\">\" :\n        i+=l[i]\n    else :\n        i-=l[i]\n    if i<=-1 or i>=n :\n        print(\"FINITE\")\n        return\n    \n    \n    \n"]