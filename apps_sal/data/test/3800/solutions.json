["def f(t, k):\n    i, j = 0, 1\n    s, d = 0, t[0]\n    n = len(t)\n    while j <= n:\n        if d > k:\n            d -= t[i]\n            i += 1\n        elif d == k:\n            if t[i] and (j == n or t[j]): s += 1\n            else:\n                a, b = i - 1, j - 1\n                while j < n and t[j] == 0: j += 1\n                while t[i] == 0: i += 1\n                s += (i - a) * (j - b)\n            if j < n: d += t[j]\n            d -= t[i]\n            i += 1\n            j += 1                \n        else:\n            if j < n: d += t[j]\n            j += 1\n    return s\n\ns, n = 0, int(input())\nt = list(map(int, input()))\nif n:\n    k = sum(t)\n    if k == 0: print(0)\n    else:\n        p = [(i, n // i) for i in range(max(1, n // k), int(n ** 0.5) + 1) if n % i == 0]\n        for a, b in p:\n            if a != b: s += 2 * f(t, a) * f(t, b)\n            else:\n                k = f(t, a)\n                s += k * k\n        print(s)\nelse:\n    n = len(t)\n    m = n * (n + 1)\n    s = j = 0\n    while j < n:\n        if t[j] == 0:\n            i = j\n            j += 1\n            while j < n and t[j] == 0: j += 1\n            k = ((j - i) * (j - i + 1)) // 2\n            s += k\n        j += 1\n    print((m - s) * s)", "def divisors(x):\n    def f(y, q):\n        t = -len(r)\n        while not y % q:\n            y //= q\n            for i in range(t, 0):\n                r.append(r[t] * q)\n        return y\n\n    r, p = [1], 7\n    x = f(f(f(x, 2), 3), 5)\n    while x >= p * p:\n        for s in 4, 2, 4, 2, 4, 6, 2, 6:\n            if not x % p:\n                x = f(x, p)\n            p += s\n    if x > 1:\n        f(x, x)\n    return r\n\n\ndef main():\n    a, s = int(input()), input()\n    if not a:\n        z = sum(x * (x + 1) for x in map(len, s.translate(\n            str.maketrans('123456789', '         ')).split())) // 2\n        x = len(s)\n        print((x * (x + 1) - z) * z)\n        return\n    sums, x, cnt = {}, 0, 1\n    for u in map(int, s):\n        if u:\n            sums[x] = cnt\n            x += u\n            cnt = 1\n        else:\n            cnt += 1\n    if x * x < a:\n        print(0)\n        return\n    sums[x], u = cnt, a // x\n    l = [v for v in divisors(a) if v <= x]\n    z = a // max(l)\n    d = {x: 0 for x in l if z <= x}\n    for x in d:\n        for k, v in list(sums.items()):\n            u = sums.get(k + x, 0)\n            if u:\n                d[x] += v * u\n    print(sum(u * d[a // x] for x, u in list(d.items())))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def divisors(x):\n    def f(y, q):\n        t = -len(r)\n        while not y % q:\n            y //= q\n            for i in range(t, 0):\n                r.append(r[t] * q)\n        return y\n\n    r, p = [1], 7\n    x = f(f(f(x, 2), 3), 5)\n    while x >= p * p:\n        for s in 4, 2, 4, 2, 4, 6, 2, 6:\n            if not x % p:\n                x = f(x, p)\n            p += s\n    if x > 1:\n        f(x, x)\n    return r\n\n\ndef main():\n    a, s = int(input()), input()\n    if not a:\n        z = sum(x * (x + 1) for x in map(len, s.translate(\n            str.maketrans('123456789', '         ')).split())) // 2\n        x = len(s)\n        print((x * (x + 1) - z) * z)\n        return\n    sums, x, cnt = {}, 0, 1\n    for u in map(int, s):\n        if u:\n            sums[x] = cnt\n            x += u\n            cnt = 1\n        else:\n            cnt += 1\n    if x * x < a:\n        print(0)\n        return\n    sums[x], u = cnt, a // x\n    l = [v for v in divisors(a) if v <= x]\n    z = a // max(l)\n    d = {x: 0 for x in l if z <= x}\n    for x in d:\n        for k, v in list(sums.items()):\n            u = sums.get(k + x, 0)\n            if u:\n                d[x] += v * u\n    print(sum(u * d[a // x] for x, u in list(d.items())))\n\n\ndef __starting_point():\n    main()\n\n\n# Made By Mostafa_Khaled\n\n__starting_point()", "import sys\nfrom math import log2,floor,ceil,sqrt\n# import bisect\n# from collections import deque\n\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\nri = lambda : sys.stdin.readline().strip()\n \ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10**9+7\n\na = int(ri())\nst=  ri()\narr = [int(i) for i in st]\ndic = {}\ncnt = 0\nnz = 0\nfor i in range(len(st)):\n    summ = 0\n    for j in range(i,len(st)):\n        summ+=arr[j]\n        if summ != 0:\n            nz+=1\n        if summ in dic:\n            dic[summ]+=1\n        else:\n            dic[summ] = 1\nif a!= 0:\n    for i in dic:\n        if i != 0:\n            val = a/i\n            if val in dic:\n                cnt = cnt + dic[val]*dic[i]\n    print(cnt)\nelse:\n    n = len(st)\n    print(n**2*(n+1)**2//4 - nz*nz)\n\n", "from collections import Counter\na=int(input())\nstring=input()\narr=[0]\ncount1=0\ncount2=0\nfor i in range(len(string)):\n  arr+=[int(string[i])]\nfor i in range(1,len(arr)):\n  arr[i]+=arr[i-1]\n#print(arr)\ntemparr=[]\n#sumset.add(arr[0])\nfor i in range(len(arr)):\n  for j in range(i+1,len(arr)):\n    temparr+=[(arr[j]-arr[i])]\nsumset=Counter(temparr)\n#print(sumset)\npossums=0\nfor i in (sumset):\n  possums+=sumset[i]\nfor i in (sumset):\n  #print(str(i)+\"###\")\n  if i!=0 and a%i==0 and i**2!=a:\n    count1+=sumset[i]*sumset[a//i]\n  elif i==0 and a==0:\n    count1+=sumset[i]*possums\n  elif i!=0 and a%i==0 and i**2==a:\n    #print(str(i)+\"***\")\n    count2+=sumset[i]*sumset[a//i]\n\nprint(count1+count2)", "sm = [0] * 40000\nn = int(input())\ns = input()\nl = len(s)\nfor i in range(l):\n    ss = 0\n    for j in range(i,l):\n        ss += int(s[j])\n        sm[ss] += 1\n\n\nif n == 0:\n    ans = 0\n    for i in range(1,40000):\n        ans += sm[0] * sm[i] * 2\n    ans += sm[0]*sm[0]\n    print(ans)\nelse:\n    ans = 0\n    u = int(n**.5)\n    for i in range(1,u+1):\n        if n % i == 0:\n            if n // i < 40000:\n                ans += sm[i] * sm[n//i]\n    ans *= 2\n    if u ** 2 == n:\n        ans -= sm[u] ** 2\n    print(ans)\n", "import time,math as mt,bisect as bs,sys\nfrom sys import stdin,stdout\nfrom collections import deque\nfrom fractions import Fraction\nfrom collections import Counter\nfrom collections import OrderedDict\npi=3.14159265358979323846264338327950\ndef II(): # to take integer input\n    return int(stdin.readline())\ndef IP(): # to take tuple as input\n    return list(map(int,stdin.readline().split()))\ndef L(): # to take list as input\n    return list(map(int,stdin.readline().split()))\ndef P(x): # to print integer,list,string etc..\n    return stdout.write(str(x)+\"\\n\")\ndef PI(x,y): # to print tuple separatedly\n    return stdout.write(str(x)+\" \"+str(y)+\"\\n\")\ndef lcm(a,b): # to calculate lcm\n    return (a*b)//gcd(a,b)\ndef gcd(a,b): # to calculate gcd\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    if a>b:\n        return gcd(a%b,b)\n    else:\n        return gcd(a,b%a)\ndef bfs(adj,v): # a schema of bfs\n    visited=[False]*(v+1)\n    q=deque()\n    while q:\n        pass\ndef sieve():\n    li=[True]*(2*(10**5)+5)\n    li[0],li[1]=False,False\n    for i in range(2,len(li),1):\n        if li[i]==True:\n            for j in range(i*i,len(li),i):\n                li[j]=False\n    prime=[]\n    for i in range((2*(10**5)+5)):\n        if li[i]==True:\n            prime.append(i)\n    return prime\ndef setBit(n):\n    count=0\n    while n!=0:\n        n=n&(n-1)\n        count+=1\n    return count\nmx=10**7\nspf=[mx]*(mx+1)\ndef SPF():\n    spf[1]=1\n    for i in range(2,mx+1):\n        if spf[i]==mx:\n            spf[i]=i\n            for j in range(i*i,mx+1,i):\n                if i<spf[j]:\n                    spf[j]=i\n    return\ndef readTree(n,e): # to read tree\n    adj=[set() for i in range(n+1)]\n    for i in range(e):\n        u1,u2=IP()\n        adj[u1].add(u2)\n    return adj\n#####################################################################################\nmod=10**9+7\ndef solve():\n    a=II()\n    s=input()\n    li=[int(i) for i in s]\n    n=len(li)\n    pref=[li[0]]+[0]*(n-1)\n    for i in range(1,n):\n        pref[i]=pref[i-1]+li[i]\n    pref.insert(0,0)\n    d={}\n    for i in range(1,n+1):\n        for j in range(i,n+1):\n            val=pref[j]-pref[i-1]\n            d[val]=d.get(val,0)+1\n    ans=0\n    if a!=0:\n        for ele in d:\n            if ele!=0:\n                if a%ele==0 and a//ele in d:\n                    ans+=d[ele]*d[a//ele]\n    else:\n        cnt=d.get(0,0)\n        ans=2*cnt*((n*(n+1))//2)-cnt**2\n    P(ans)\n    return\n\nt=1\nfor i in range(t):\n    solve()\n\n    #######\n   #\n  #\n #######   #     #  # ####   # #     #\n       #  # #   #  # #   #  # # #   #\n      #  ####  #  # ####   ####  # #\n######  #   # #### #    # #   #   #\n\n", "a=int(input())\ns=input()\n\ndi = {}\nfor i in range(len(s)):\n    total=0\n    for j in range(i, len(s)):\n        total += int(s[j])\n        di[total] = 1 if total not in di else di[total]+1\n\nans=0\nif a==0:\n    ans=0\n    if 0 in di:\n        ans +=di[0]*di[0]\n        for each in di:\n            if not each:continue\n            ans += di[each]*di[0]*2\n    print(ans)\n    quit()\nfor p in di:\n    if p and a % p == 0 and (a//p) in di:\n        ans += di[a//p]*di[p]\nprint(ans)", "from collections import Counter\ndef __starting_point():\n\ta = int(input())\n\tseq = list(input())\n\tn = len(seq)\n\tseq = [int(x) for x in seq]\n\n\tcurr_sum = 0\n\tcum_sum = [0]\n\tsum_pairs = list()\n\n\tfor i in seq:\n\t\tcurr_sum += i\n\t\tcum_sum.append(curr_sum)\n\tfor i in range(1, n+1):\n\t\tfor j in range(i, n+1):\n\t\t\tif i <= j:\n\t\t\t\tsum_pairs.append(cum_sum[j]-cum_sum[i-1])\n\n\tfreq = Counter(sum_pairs)\n\n\tunique_sum = list(freq.keys())\n\tunique_sum = set(unique_sum)\n\tans = 0 \n\t# print(fre\u00f7q)\n\n\tfor i in unique_sum:\n\t\tif i!=0 and a%i==0 and a//i in freq:\n\t\t\tif i != a//i:\n\t\t\t\tans += (freq[i]*freq[a//i])\n\t\t\telse:\n\t\t\t\tans += (freq[i]*(freq[i]))\n\t\t\t\tfreq.pop(i)\n\n\tif a == 0:\n\t\tans = (freq[0]*len(sum_pairs))+(freq[0]*(len(sum_pairs) - freq[0]))\n\n\t# print(sum_pairs)\n\tprint(ans)\n\n__starting_point()", "a = int(input())\ns = input()\n\nsm ={}\nfor i in range(len(s)):\n    for j in range(i,len(s)):\n        if j== i:\n            t = int(s[j])\n        else:\n            t += int(s[j])\n        if t in sm:\n            sm[t] += 1\n        else:\n            sm[t] = 1\nif a==0:\n    if 0 in sm:\n        sum_pairs = (len(s)*(len(s)+1))//2\n        print((sm[0]*(sum_pairs))+(sm[0]*((sum_pairs) - sm[0])))\n    else:\n        print(0)\nelse:\n    c = 0\n    for f in sm:\n        if f != 0  and a % f == 0 and (a//f) in sm:\n            c += sm[f] * sm[a//f]\n\n    print(c)\n\n"]