["tmp = list(map(int,input().split()))\nn,k = tmp[0],tmp[1]\na = list(map(int,input().split()))\n\ncur = a[0]\nw = 0\nOK = False\nfor i in range(1,10000):\n    op = a[i]\n    if cur > op:\n        a.append(op)\n        w += 1\n    else:\n        cur = op\n        a.append(cur)\n        w = 1\n    if w >= k:\n        OK = True\n        break\nif OK:\n    print(cur)\nelse:\n    print(max(a))", "n, k = list(map(int, input().split()))\nif k > n:\n    k = n\narr = list(map(int, input().split()))\nc = 0\ncur = -1\nwhile c < k:\n    if arr[0] > arr[1]:\n        if cur == arr[0]:\n            c += 1\n        else:\n            cur = arr[0]\n            c = 1\n        arr = [arr[0]] + arr[2:] + [arr[1]]\n    else:\n        if cur == arr[1]:\n            c += 1\n        else:\n            cur = arr[1]\n            c = 1\n        arr = arr[1:] + [arr[0]]\nprint(cur)\n        \n", "import math\nimport re\nimport os\nimport string\nimport sys\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\ndef ri():\n    return int(input())\n\n\ndef rfa():\n    return [float(i) for i in input().split()]\n\n\neps = 1e-9\n\n\ndef is_equal(a, b):\n    return abs(a - b) <= eps\n\n\ndef distance(p0, p1):\n    return math.sqrt((p0[0] - p1[0]) ** 2 + (p0[1] - p1[1]) ** 2)\n\n\ndef distance_sqr(p0, p1):\n    return (p0[0] - p1[0]) ** 2 + (p0[1] - p1[1]) ** 2\n\n\nn, k = ria()\nar = ria()\nmx = max(ar)\nkeka = 0\ncur = ar[0]\nmp = {}\nfor i in ar:\n    mp[i] = 0\nfor i in ar:\n\n    if cur == mx:\n        print(mx)\n        return\n\n    if i == cur:\n        continue\n    if mp[cur] == k:\n        print(cur)\n        return\n    if i > cur:\n        mp[i] += 1\n        cur = i\n    else:\n        mp[cur] += 1\n\n    if mp[cur] == k:\n        print(cur)\n        return\n    keka += 1\n\nprint(mx)", "from collections import deque\n\nn, k = list(map(int, input().split()))\na = deque(list(map(int, input().split())))\nf = a.popleft()\ns = a.popleft()\ncnt = 0\nwhile cnt < k:\n    if f > s:\n        cnt += 1\n        a.append(s)\n        s = a.popleft()\n    else:\n        cnt = 1\n        a.append(f)\n        f, s = s, a.popleft()\n    if f == n:\n        cnt = k\nprint(f)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ncurr_streak = 0\ncurr_power = a[0]\nfor i in range(1, n):\n    if curr_power > a[i]:\n        curr_streak += 1\n    else:\n        curr_power = a[i]\n        curr_streak = 1\n    if curr_streak >= k:\n        print(curr_power)\n        return\nprint(curr_power)\n\n", "n, k = list(map(int, input().split()))\ndata = list(map(int, input().split()))\nif k > 3 * n:\n    print(max(data))\n    return\nq = data\n\ncnt = 0\nc1, c2 = q[0], q[1]\nq = q[2:]\n\nwhile cnt < k:\n    if c1 > c2:\n        cnt += 1\n    else:\n        c1, c2 = c2, c1\n        cnt = 1\n    q.append(c2)\n    c2 = q[0]\n    q = q[1:]\nprint(c1)\n    \n", "n,k = map(int, input().split())\na = list(map(int, input().split()))\n\nif k > n:\n    print(max(a))\n    return\n\nst = 0\nwhile st < k:\n    if a[0] > a[1]:\n        st+=1\n        a.append(a[1])\n        del a[1]\n    else:\n        st = 1\n        a.append(a[0])\n        del a[0]\n        \nprint(a[0])", "(n, k) = [int(x) for x in input().split(' ')] \na = [ int(x) for x in input().split(' ')]\nif k >= 10 * (n - 1):\n    print(max(a))\nelse:\n    winner = a.pop(0)\n    \n    conseq_win = 0\n    while conseq_win != k:\n        u = winner\n        v = a.pop(0)\n        if u > v:\n            a.append(v)\n            conseq_win = conseq_win + 1\n        else:\n            a.append(u)\n            winner = v\n            conseq_win = 1\n    print(winner)", "def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\n\nn, k = mi()\na = li()\n\nfrom collections import deque\nq = deque(a)\n\nc = q.popleft()\nw = 0\nwhile 1:\n    x = q.popleft()\n    if c > x:\n        w += 1\n        if w >= k or w >= n:\n            ans = c\n            break\n        q.append(x)\n    else:\n        q.append(c)\n        c = x\n        w = 1\nprint(ans)", "n, k = map(int, input().split())\na = [int(x) for x in input().split()]\np = a[0]\nc = 0\nfor i in range(1, n):\n    if p == n:\n        print(p)\n        break\n    if p > a[i]:\n        c += 1\n        if c == k:\n            print(p)\n            break\n    else:\n        p = a[i]\n        c = 1\n        if p == n:\n            print(p)\n            break        ", "\n\n\nn, k = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\n\nA.reverse()\n\ncc = A.pop()\ncr = 0\n\nwhile len(A) > 0 and cc != n and cr < k:\n    nc = A.pop()\n    if nc > cc:\n        cc = nc\n        cr = 1\n    else:\n        cr += 1\n\nprint(cc)\n", "n,k=list(map(int,input().split()))\nar=list(map(int,input().split()))\nmx=max(ar)\nwinns={x:0 for x in ar}\nwhile True:\n    if ar[0] > ar[1]:\n        if(ar[0]==mx or winns[ar[0]] >= k-1):\n            print(ar[0])\n            break\n        ar.append(ar.pop(1))\n        \n    else:\n        ar.append(ar.pop(0))\n    winns[ar[0]]+=1\n    #print(ar)\n", "n, needed = map(int, input().split())\nplayers = list(map(int, input().split()))\n\nwinner = players[0]\nwins = 0\n\nfor i in range(1, n):\n    if players[i] > winner:\n        winner = players[i]\n        wins = 1\n    else:\n        wins += 1\n    if wins >= needed:\n        break\n    \nprint(winner)", "read = lambda: tuple(map(int, input().split()))\n\n\ndef main():\n    n, k = read()\n    l = list(read())\n\n    ps = {}\n    def add(p):\n        if not p in ps:\n            ps[p] = 1\n        else:\n            ps[p] += 1\n        return (ps[p] >= k, p)\n    newl = []\n    while(len(l) > 1):\n        v1, v2 = l[0], l[1]\n        if v1 > v2:\n            l.pop(1)\n            newl += [v2]\n            addk = add(v1)\n        else:\n            l.pop(0)\n            newl += [v1]\n            addk = add(v2)\n        if addk[0]:\n            return addk[1]\n    return l[0]\nprint(main())\n", "def solve():\n    from collections import deque\n    N, K = map(int, input().split())\n    dq = deque((map(int, input().split())))\n    popleft, append = dq.popleft, dq.append\n    win = 0\n    cur = popleft()\n    while dq:\n        vs = popleft()\n        if cur > vs:\n            win += 1\n            append(vs)\n        else:\n            win = 1\n            append(cur)\n            cur = vs\n        if win == K or win > N:\n            print(cur)\n            break\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nmaxa = max(a)\nif len(a) <= k:\n    print(maxa)\nelse:\n    curr = a[0]\n    j = 0\n    for i in range(1, len(a)):\n        if j == k:\n            print(curr)\n            break\n        if a[i] == maxa:\n            print(maxa)\n            break\n        if a[i] > curr:\n            curr = a[i]\n            j = 1\n        else:\n            j += 1\n", "n,k=list(map(int,input().split()))\nl=list(map(int,input().split()))\nmaxi=max(l)\na=max(l[:2])\nb=min(l[:2])\nl=l[2:]\ng=k\nwhile g:\n    if a==maxi:\n        break\n    if a>b:\n        g-=1\n        l.append(b)\n        b=l[0]\n        del l[0]\n    elif b>a:\n        g=k-1\n        l.append(a)\n        a=b\n        b=l[0]\n        del l[0]\nprint(a)", "a=input().split(' ')\nn=int(a[0])\nk=int(a[1])\na=input().split(' ')\na=[int(i) for i in a]\nif k>n-1:\n    print(max(a))\n    return\nwf=0\nc=0\ncw=a[0]\nfor i in range(1,n-1):\n    cw=max(cw,a[i])\n    if a[i]==cw:\n        c=1\n        continue\n    c=c+1\n    if c>=k:\n        wf=cw\n        print(wf)\n        break\nelse:\n    print(max(a))\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\np=max(a)\nt=0\nif k>600:\n    print(p)\nelse:\n    while t!=k:\n        if a[0]>a[1]:\n            if a[0]==p:\n                print(p)\n                return\n            m=a[1]\n            del a[1]\n            a.append(m)\n            t+=1\n        else:\n            m=a[0]\n            del a[0]\n            a.append(m)\n            t=1\n    print(a[0])\n    \n", "# python3\n# utf-8\n\nplayers_nr, max_win_streak = (int(x) for x in input().split())\nplayer_idx___power = [int(x) for x in input().split()]\nif max_win_streak > players_nr:\n    print(max(player_idx___power))\n    quit()\ncurr_win_streak = 0\ncurr_power = player_idx___power[0]\nnext_player_idx = 1\nwhile curr_win_streak < max_win_streak:\n    next_power = player_idx___power[next_player_idx]\n    if curr_power < next_power:\n        curr_power = next_power\n        player_idx___power.append(curr_power)\n        curr_win_streak = 1\n    else:\n        player_idx___power.append(next_power)\n        curr_win_streak += 1\n    next_player_idx += 1\nprint(curr_power)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = max(a)\ntmp = a[0]\ncnt = 0\nfor i in range(1, n):\n    if tmp < a[i]:\n        tmp = a[i]\n        cnt = 1\n    else:\n        cnt += 1\n    if cnt == k:\n        ans = tmp\n        break\nprint(ans)\n", "# your code goes here\nn,k = input().split()\nn=int(n)\nk=int(k)\na = list(map(int,input().split()))\ncount=0\ni=0\nj=1\nwhile True:\n\tif(k>n):\n\t\tprint(max(a))\n\t\tbreak\n\tif(a[i]>a[j]):\n\t\tcount+=1\n\t\tif(count==k):\n\t\t\tprint(a[i])\n\t\t\tbreak\n\t\ta.append(a[j])\n\t\ta.remove(a[j])\n\telse:\n\t\ta.append(a[i])\n\t\ta.remove(a[i])\n\t\tcount=1\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nmax1=max(a)\nb=[]\ndone=False\nfor i in range(n):\n    b.append(0)\nm=a.index(max1)\nif(k>m):\n    print(max1)\nelse:\n    curr=0\n    for i in range(1,m):\n        if(a[curr]>a[i]):\n            #print(b)\n            b[curr]+=1\n        else:\n            curr=i\n            b[curr]+=1\n        if(max(b)>=k):\n            done=True\n            print(a[b.index(max(b))])\n            break\n    if(not done):\n        print(max1)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nmaxa = max(a)\nif len(a) <= k:\n    print(maxa)\nelse:\n    qq = a[0]\n    j = 0\n    for i in range(1, len(a)):\n        if j == k:\n            print(qq)\n            break\n        if a[i] == maxa:\n            print(maxa)\n            break\n        if a[i] > qq:\n            qq = a[i]\n            j = 1\n        else:\n            j += 1\n", "n, k = list(map(int, input().split()))\npowers = list(map(int, input().split()))[:n]\n\nif k >= n - 1:\n\tprint(max(powers))\nelse:\n\twins = 0\n\tindex = 0\n\twhile True:\n\t\tA = index % n\n\t\tB = (index + 1) % n\n\t\twinner_power = -1\n\t\tif powers[A] < powers[B]:\n\t\t\twinner_power = powers[B]\n\t\t\twins = 1\n\t\telse:\n\t\t\twinner_power = powers[A]\n\t\t\tpowers[A], powers[B] = powers[B], powers[A]\n\t\t\twins += 1\n\t\tindex = B\n\n\t\tif wins >= k:\n\t\t\tprint(winner_power)\n\t\t\tbreak\n"]