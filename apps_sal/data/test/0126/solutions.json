["# A\n\ninput()\nl = list(map(int, list(input())))\n\nif (1 in l or 4 in l or 7 in l or 0 in l) and (1 in l or 2 in l or 3 in l) and (3 in l or 6 in l or 9 in l or 0 in l) and (7 in l or 0 in l or 9 in l):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "n = int(input())\nnumb = input()\nnum = [0]*10\nfor i in numb:\n    num[int(i)] = 1\nans = 0\nif num[1] + num[2] + num[3] > 0:\n    ans += 1\nif num[1] + num[4] + num[7] + num[0] > 0:\n    ans += 1\nif num[3] + num[6] + num[9] + num[0] > 0:\n    ans += 1\nif num[7] + num[0] + num[9] > 0:\n    ans += 1\nif ans == 4:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "n = int(input())\nd = list(map(int,input()))\n\nl = all([i not in d for i in [1,4,7,0]])\nr = all([i not in d for i in [3,6,9,0]])\nu = all([i not in d for i in [1,2,3]])\nd = all([i not in d for i in [7,0,9]])\nprint('NO' if l or r or u or d else 'YES')\n", "n = int(input())\n\nl = [41, 10, 11, 12, 20, 21, 22, 30, 31, 32]\ns = list([l[int(x)] for x in input()])\n\ndef exists_up(s):\n    l1 = [x - 10 for x in s]\n    return all(x in l for x in l1)\n\ndef exists_down(s):\n    l1 = [x + 10 for x in s]\n    return all(x in l for x in l1)\n\ndef exists_left(s):\n    l1 = [x - 1 for x in s]\n    return all(x in l for x in l1)\n\ndef exists_right(s):\n    l1 = [x + 1 for x in s]\n    return all(x in l for x in l1)\n\nif exists_up(s) or exists_down(s) or exists_left(s) or exists_right(s):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "def main():\n    input()\n    seq = input()\n\n    LEFT = {\n        '0': False,\n        '1': False,\n        '2': True,\n        '3': True,\n        '4': False,\n        '5': True,\n        '6': True,\n        '7': False,\n        '8': True,\n        '9': True,\n    }\n    RIGHT = {\n        '0': False,\n        '1': True,\n        '2': True,\n        '3': False,\n        '4': True,\n        '5': True,\n        '6': False,\n        '7': True,\n        '8': True,\n        '9': False,\n    }\n    UP = {\n        '0': True,\n        '1': False,\n        '2': False,\n        '3': False,\n        '4': True,\n        '5': True,\n        '6': True,\n        '7': True,\n        '8': True,\n        '9': True,\n    }\n    DOWN = {\n        '0': False,\n        '1': True,\n        '2': True,\n        '3': True,\n        '4': True,\n        '5': True,\n        '6': True,\n        '7': False,\n        '8': True,\n        '9': False,\n    }\n    print('NO' if any(all(can[n] for n in seq) for can in (LEFT, RIGHT, UP, DOWN)) else 'YES')\n\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\ns = input()\na = [0]*10\nfor i in range(n):\n    a[int(s[i])] = 1\n\nif a[1]+a[2]+a[3] == 0 or a[7]+a[9]+a[0] == 0 or a[1]+a[4]+a[7]+a[0] == 0 or a[3] + a[6] + a[9] + a[0] == 0:\n    print('NO')\nelse:\n    print('YES')\n", "n = int(input())\ns = input()\n\nhaszero = 0\nfor x in s:\n    if(x=='0'):\n        haszero = 1\n\nhasup = 0\nhasleft = 0\nhasright = 0\nhasdown = 0\n\nfor x in s:\n    if(x=='1')or(x=='2')or(x=='3'):\n        hasup = 1\n    if(x=='1')or(x=='4')or(x=='7'):\n        hasleft = 1\n    if(x=='3')or(x=='6')or(x=='9'):\n        hasright = 1\n    if(x=='7')or(x=='0')or(x=='9'):\n        hasdown = 1\n\nif hasup and hasleft and hasright and hasdown:\n    print('YES')\nelse:\n    if hasup and haszero:\n        print('YES')\n    else:\n        print('NO')", "def Left(a):\n    if (a != 1 and a != 4 and a != 7 and a != 0):\n        return True\n    return False\n\ndef Right(a):\n    if (a != 3 and a != 6 and a != 9 and a != 0):\n        return True\n    return False\n\ndef Up(a):\n    if (a != 1 and a != 2 and a != 3):\n        return True\n    return False\n\ndef Down(a):\n    if (a != 7 and a != 9 and a != 0):\n        return True\n    return False\n\nn = int(input())\nstr1 = input()\n\nu =0\nd=0\nl=0\nr=0\nfor iss in str1:\n    i = int(iss)\n    if (Up(i)):\n        u+=1\n    if (Down(i)):\n        d += 1\n    if (Left(i)):\n        l += 1\n    if (Right(i)):\n        r += 1\n\nif (u == len(str1)\n    or d == len(str1)\n    or l == len(str1)\n    or r == len(str1)):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n\n", "n = int(input())\ns = input().rstrip()\n\ndef canMove(moves, dx, dy):\n\tfor x, y in moves:\n\t\ttx = x + dx\n\t\tty = y + dy\n\t\tif not (0 <= tx < 3 and 0 <= ty < 3):\n\t\t\tif not (tx == 3 and ty == 1):\n\t\t\t\treturn False\n\treturn True\n\n\nl = [\n[\t3, 1,],\n[\t0, 0,],\n[\t0, 1,],\n[\t0, 2,],\n[\t1, 0,],\n[\t1, 1,],\n[\t1, 2,],\n[\t2, 0],\n[\t2, 1,],\n[\t2, 2,],\n]\n\n\nmove = []\nfor x in s:\n\tmove.append(l[int(x)])\n# print(move)\n\ncnt = 0\nfor i in range(10):\n\tfor j in range(10):\n\t\tdx = i - 5\n\t\tdy = j - 5\n\t\tif canMove(move, dx, dy):\n\t\t\tcnt += 1\nif cnt == 1:\n\tprint('YES')\nelse:\n\tprint('NO')\n\n", "def works(numbers):\n    if (numbers[1] or numbers[2] or numbers[3]):\n        if (numbers[7] or numbers[0] or numbers[9]):\n            if (numbers[1] or numbers[4] or numbers[7] or numbers[0]):\n                if (numbers[3] or numbers[6] or numbers[9] or numbers[0]):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\n\nn=int(input())\nline=input()\nnumbers={}\nfor i in range (10):\n    numbers[i]=False\nfor ch in line:\n    numbers[int(ch)]=True\nif works(numbers):\n    print (\"YES\")\nelse:\n    print(\"NO\")\n", "n = int(input())\nL = [int(x) for x in input()]\n\nC = [None] * 10\np={}\nfor i in range(1,10):\n    C[i] = ((i-1)//3, (i-1)%3)\n    p[C[i]] = True\nC[0] = (3, 1)\np[C[0]] = True\ncnt = 0\npossib = []\nq = [(i, j) for i in range(-6, 7) for j in range(-6, 7)]\nfor base in q:\n    gone = False\n    for num in L:\n        diff = C[num]\n        nn = (diff[0] + base[0], diff[1] + base[1])\n        if nn not in p:\n            gone = True\n            break\n    if not gone:\n        possib.append(base)\n        cnt += 1\nif cnt == 1:\n    print('YES')\nelse:\n    print('NO')\n", "a = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [-1, 0, -1]]\nd = [(3, 1), (0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\nn = int(input())\nb = list(map(int, list(input())))\nc = []\nfor i in range(n - 1):\n    c.append((d[b[i + 1]][0] - d[b[i]][0], d[b[i + 1]][1] - d[b[i]][1]))\nfor i in range(10):\n    x, y = d[i][0], d[i][1]\n    fl = 1\n    for j in c:\n        x1, y1 = x + j[0], y + j[1]\n        if (x1, y1) not in d:\n            fl = 0\n        x, y = x1, y1\n    if fl and i != b[0]:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")\n", "n = int(input())\ns = input()\npr = True\nfor i in range(len(s)):\n    if s[i] in '3690':\n        pr = False\nvn = True\nfor i in range(len(s)):\n    if s[i] in '709':\n        vn = False\nle = True\nfor i in range(len(s)):\n    if s[i] in '1470':\n        le = False\nvv = True\nfor i in range(len(s)):\n    if s[i] in '123':\n        vv = False\nif (pr or  vn or le or vv):\n    print('NO')\nelse:\n    print('YES')\n", "coords = {0: (1, 0), 1: (0, 3), 2: (1, 3), 3: (2, 3), 4: (0, 2), 5: (1, 2), 6: (2, 2), 7: (0, 1), 8: (1, 1), 9: (2, 1)}\nvalid_coords = set()\nfor elem in coords:\n    valid_coords.add(coords[elem])\nn = input()\ns = [int(elem) for elem in input()]\nvectors = []\nfor i in range(len(s) - 1):\n    t = [0, 0]\n    t[0] = coords[s[i + 1]][0] - coords[s[i]][0]\n    t[1] = coords[s[i + 1]][1] - coords[s[i]][1]\n    vectors.append(t)\ncnt = 0\nfor elem in coords:\n    start = coords[elem]\n    faults = 0\n    for v in vectors:\n        new_start = (start[0] + v[0], start[1] + v[1])\n        start = new_start\n        if start not in valid_coords:\n            faults += 1\n    if faults == 0:\n        cnt += 1\nif cnt == 1:\n    print('YES')\nelse:\n    print('NO')", "#! /usr/bin/env python3\n\nimport sys\n\nn = int(input())\ns = list(map(lambda x: int(x) - int('0'), input()))\n\nd = [(1, 3)] + [(i, j) for j in range(3) for i in range(3)]\n\nfor u in range(10):\n    if u == s[0]:\n        continue\n    x, y = d[u]\n    for i in range(1, n):\n        dx, dy = (d[s[i]][0] - d[s[i - 1]][0], d[s[i]][1] - d[s[i - 1]][1])\n        x += dx\n        y += dy\n        if (x, y) not in d:\n            break\n    else:\n        print(u, file=sys.stderr)\n        print('NO')\n        return\n\nprint('YES')\n", "from sys import setrecursionlimit, exit\nfrom math import ceil, floor, acos, pi\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import gcd\nfrom functools import reduce\nsetrecursionlimit(10**8)\nRI=lambda x=' ': list(map(int,input().rstrip().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nmod=int(1e9+7)\neps=1e-6\nMAX=1010\n#################################################\nn=RI()[0]\ns=RS()[0]\npos={}\nacceptable={}\nfor i in range(1,10):\n    pos[i]=((i-1)//3 +1, (i-1)%3 + 1)\npos[0]=(4,2)\nfor v in list(pos.values()):\n    acceptable[v]=1\ns=list(map(int, list(s)))\ncnt=0\nfor st in acceptable:\n    curr=list(st)\n    flag=1\n    for i in range(1, len(s)):\n        curr[0]+=pos[s[i]][0]-pos[s[i-1]][0]\n        curr[1]+=pos[s[i]][1]-pos[s[i-1]][1]\n        if tuple(curr) not in acceptable:\n            flag=0\n    if flag:\n        cnt+=1\nprint(\"YES\" if cnt==1 else \"NO\")\n        \n        \n        \n", "p = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9],\n     [-1, 0, -1]]\n\nn = int(input())\nd = [int(x) for x in input()]\ns = [(i, j) for i in range(4) for j in range(3) if p[i][j] != -1]\nc = [True for _ in s]\nm = {((i+1) % 10): s[i] for i in range(len(s))}\nfor i in range(1, n):\n    for j in range(len(s)):\n        if not c[j]:\n            continue\n        try:\n            sji = s[j][0] + (m[d[i]][0] - m[d[i-1]][0])\n            sjj = s[j][1] + (m[d[i]][1] - m[d[i-1]][1])\n            s[j] = (sji, sjj)\n            if s[j][0] < 0 or s[j][1] < 0 or p[s[j][0]][s[j][1]] == -1:\n                c[j] = False\n        except Exception as e:\n            c[j] = False\nif sum(c) > 1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "\n#   (col, row)\nKEYS = {\n    1: (0, 0),\n    2: (1, 0),\n    3: (2, 0),\n    4: (0, 1),\n    5: (1, 1),\n    6: (2, 1),\n    7: (0, 2),\n    8: (1, 2),\n    9: (2, 2),\n    0: (1, 3)\n}\n\nBOARD = set(KEYS.values())\n\nn = int(input())\nnumber = list(map(int, list(input())))\n\n\ndef add_offset(cell, offset):\n    return (cell[0] + offset[0], cell[1] + offset[1])\n\nuniq = True\n\nfor posible_starts in BOARD:\n    if KEYS[number[0]] != posible_starts:\n        all_fit = True\n        off = (posible_starts[0] - KEYS[number[0]][0],\n               posible_starts[1] - KEYS[number[0]][1])\n        for num_part in number:\n            if add_offset(KEYS[num_part], off) not in BOARD:\n                all_fit = False\n                break\n        if all_fit:\n            uniq = False\n\nif uniq:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "import sys\n\ndef canMoveLeft(digit):\n\tindex = [\n\tFalse,\t#0\n\tFalse,\t#1\n\tTrue,\t#2\n\tTrue,\t#3\n\tFalse,\t#4\n\tTrue,\t#5\n\tTrue,\t#6\n\tFalse,\t#7\n\tTrue,\t#8\n\tTrue,\t#9\n\t]\n\treturn index[digit]\n\ndef canMoveRight(digit):\n\tindex = [\n\tFalse,\t#0\n\tTrue,\t#1\n\tTrue,\t#2\n\tFalse,\t#3\n\tTrue,\t#4\n\tTrue,\t#5\n\tFalse,\t#6\n\tTrue,\t#7\n\tTrue,\t#8\n\tFalse,\t#9\n\t]\n\treturn index[digit]\n\ndef canMoveUp(digit):\n\tindex = [\n\tTrue,\t#0\n\tFalse,\t#1\n\tFalse,\t#2\n\tFalse,\t#3\n\tTrue,\t#4\n\tTrue,\t#5\n\tTrue,\t#6\n\tTrue,\t#7\n\tTrue,\t#8\n\tTrue,\t#9\n\t]\n\treturn index[digit]\n\ndef canMoveDown(digit):\n\tindex = [\n\tFalse,\t#0\n\tTrue,\t#1\n\tTrue,\t#2\n\tTrue,\t#3\n\tTrue,\t#4\n\tTrue,\t#5\n\tTrue,\t#6\n\tFalse,\t#7\n\tTrue,\t#8\n\tFalse,\t#9\n\t]\n\treturn index[digit]\n\nn = int(input())\nnumber = [int(i) for i in input()]\n#print(number)\n\nmovedown = [all([ canMoveDown(i) for i in number ]),\n\t\t\tall([ canMoveUp(i) for i in number ]),\n\t\t\tall([ canMoveLeft(i) for i in number ]),\n\t\t\tall([ canMoveRight(i) for i in number ])]\n\nif any(movedown):\n\tprint('NO')\nelse:\n\tprint('YES')\n\n#print(movedown)\n", "import sys\nsp1 = ['1','4','7']\nsp2 = ['1','2','3']\nsp3 = ['3','6','9']\nsp4 = ['7','0','9']\nn = int(input())\ns = input()\nfor i in sp2:\n    if i in s:\n        if '0' in s:\n            print('YES')\n            return\n        else:    \n            for j in sp1:\n                if j in s:\n                    for k in sp3:\n                        if k in s:\n                            for t in sp4:\n                                if t in s:\n                                    print('YES')\n                                    return\nelse:\n    print('NO')\n", "3\n\nn = int(input())\n\nstr = input()\n\nL = [1, 4, 7]\nR = [3, 6, 9]\nT = [1, 2, 3]\nB = [7, 9]\n\nbl = False\nbr = False\nbt = False\nbb = False\nb0 = False\n\nfor s in str:\n    symb = int(s)\n    bl = bl or (symb in L)\n    br = br or (symb in R)\n    bt = bt or (symb in T)\n    bb = bb or (symb in B)\n    b0 = b0 or (symb == 0)\n\nif (bl and br and bt and bb) or (bt and b0):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "input()\na = list(map(int, str(input())))\n\nd = {\n    1: (0, 0),\n    2: (1, 0),\n    3: (2, 0),\n    4: (0, 1),\n    5: (1, 1),\n    6: (2, 1),\n    7: (0, 2),\n    8: (1, 2),\n    9: (2, 2),\n    0: (1, 3)\n}\n\nr = list(map(lambda x: (d[x][0] + 1, d[x][1]), a))\nl = list(map(lambda x: (d[x][0] - 1, d[x][1]), a))\nt = list(map(lambda x: (d[x][0], d[x][1] + 1), a))\nb = list(map(lambda x: (d[x][0], d[x][1] - 1), a))\nrt = list(map(lambda x: (d[x][0] + 1, d[x][1] + 1), a))\nrb = list(map(lambda x: (d[x][0] + 1, d[x][1] - 1), a))\nlt = list(map(lambda x: (d[x][0] - 1, d[x][1] + 1), a))\nlb = list(map(lambda x: (d[x][0] - 1, d[x][1] - 1), a))\n\nif all([x in d.values() for x in r])\\\n        or all([x in d.values() for x in l])\\\n        or all([x in d.values() for x in t])\\\n        or all([x in d.values() for x in b])\\\n        or all([x in d.values() for x in rt])\\\n        or all([x in d.values() for x in rb]) \\\n        or all([x in d.values() for x in lt])\\\n        or all([x in d.values() for x in lb]):\n    print(\"NO\")\nelse:\n    print(\"YES\")", "n = int(input())\ns = input()\nfill = [[False for i in range(3)] for j in range(4)]\nfor i in s:\n    if i == \"0\":\n        j = 10\n    else:\n        j = ord(i)-ord('1') #0, 1, 2, 3... 8\n    fill[j//3][j%3] = True\n#for i in fill:\n#    print(i)\ntop = fill[0][0] or fill[0][1] or fill[0][2]\nbottom = fill[2][0] or fill[3][1] or fill[2][2]\nleft = fill[0][0] or fill[1][0] or fill[2][0]\nright = fill[0][2] or fill[1][2] or fill[2][2]\n#print(left, right, fill[3][1], (not left or not right)and not fill[3][1])\nif ((not left or not right)and not fill[3][1]) or not top or not bottom:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "n = int(input())\n# a, b = map(int, input().split())\nnumber = input()\n\nnumpad = [['1', '2', '3'],\n          ['4', '5', '6'],\n          ['7', '8', '9'],\n          [None, '0', None]]\n\n\ndef get_coordinates(digit):\n    if digit in ('1', '2', '3'):\n        first_coordinate = 0\n        second_coordinate = int(digit) - 1\n    elif digit in ('4', '5', '6'):\n        first_coordinate = 1\n        second_coordinate = int(digit) - 4\n    elif digit in ('7', '8', '9'):\n        first_coordinate = 2\n        second_coordinate = int(digit) - 7\n    else:\n        first_coordinate = 3\n        second_coordinate = 1\n    return first_coordinate, second_coordinate\n\n\ndef add(v1, v2):\n    return v1[0] + v2[0], v1[1] + v2[1]\n\n\ndef sub(v1, v2):\n    return v1[0] - v2[0], v1[1] - v2[1]\n\n\ndef try_it(start_digit, what_to_do):\n    current_coordinates = get_coordinates(start_digit)\n    for move in what_to_do:\n        current_coordinates = add(current_coordinates, move)\n        if current_coordinates[0] < 0 or current_coordinates[1] < 0:\n            return False\n        try:\n            _ = numpad[current_coordinates[0]][current_coordinates[1]]\n        except IndexError:\n            return False\n        if _ is None:\n            return False\n    return True\n\n\nsequence = []\nfor i in range(n - 1):\n    sequence.append(sub(get_coordinates(number[i + 1]), get_coordinates(number[i])))\n\nfor digit in set('1234567890') - set(number[0]):\n    if try_it(digit, sequence):\n        print('NO')\n        break\nelse:\n    print('YES')\n"]