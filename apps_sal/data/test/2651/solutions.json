["x,y=map(int, input().split())\nA=list(map(int, input().split()))\nB=list(map(int, input().split()))\nA,B=sorted(A)[::-1],sorted(B)[::-1]\nmod=10**9+7\nX,Y=0,0\nfor i in range(x):\n  d=A[i]*(x-i)-A[i]*(i)-A[i]\n  X+=d\n  X%=mod\nfor i in range(y):\n  d=B[i]*(y-i)-B[i]*(i)-B[i]\n  Y+=d\n  Y%=mod\nprint(X*Y%mod)", "n, m = map(int, input().split())\nx = [x for x in map(int, input().split())]\ny = [y for y in map(int, input().split())]\nsum_x = 0\nsum_y = 0\nans = 0\nfor i in range(n):\n    sum_x += (2*i - n + 1) * x[i] \nfor j in range(m):\n    sum_y += (2*j - m + 1) * y[j]\nans = sum_x * sum_y\nprint(ans%1000000007)", "import sys\nsys.setrecursionlimit(10000000)\nMOD = 10 ** 9 + 7\nINF = 10 ** 15\n\ndef main():\n    N,M = map(int,input().split())\n    X = list(map(int,input().split()))\n    Y = list(map(int,input().split()))\n\n    height = sum((Y[i + 1] - Y[i])*(i + 1)*(M - i - 1)%MOD for i in range(M - 1))%MOD\n    ans = sum(height*(X[i + 1] - X[i])*(i + 1)*(N - i - 1)%MOD for i in range(N - 1))%MOD\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "from itertools import product,combinations\nMOD = 10**9+7\n\ndef solve(X,Y):\n    DX = [a-b for a,b in zip(X[1:],X)]\n    DY = [a-b for a,b in zip(Y[1:],Y)]\n    a = sum((i+1)*(len(DX)-i)*dx for i,dx in enumerate(DX))\n    b = sum((i+1)*(len(DY)-i)*dy for i,dy in enumerate(DY))\n    return (a*b)%MOD\n\n\ndef naive(X,Y):\n    a = 0\n    for (x1,x2),(y1,y2) in product(combinations(X,2), combinations(Y,2)):\n        a += (x2-x1)*(y2-y1)\n        a %= MOD\n    return a\n\nfrom random import randrange\nfrom itertools import accumulate\n\ndef test():\n    for _ in range(10000):\n        X = list(accumulate([randrange(1,8) for _ in range(3)]))\n        Y = list(accumulate([randrange(1,8) for _ in range(2)]))\n        a1 = solve(X,Y)\n        a2 = naive(X,Y)\n        if a1 != a2:\n            print((X,Y))\n            print(a1)\n            print(a2)\n            return\n\ndef __starting_point():\n    # test()\n    N,M = list(map(int,input().split()))\n    X = tuple(map(int,input().split()))\n    Y = tuple(map(int,input().split()))\n    print((solve(X,Y)))\n    # print(naive(X,Y))\n\n__starting_point()", "n, m = map(int, input().split())\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\nMOD = 10**9+7\nsx, sy = 0, 0\nfor i in range(n):\n  t = 2*i+1-n\n  t *= X[i]\n  t %= MOD\n  sx += t\n  sx %= MOD\nfor j in range(m):\n  t = 2*j+1-m\n  t *= Y[j]\n  t %= MOD\n  sy += t\n  sy %= MOD\nprint(sx*sy%MOD)", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\narea_x = 0\nfor k in range(n):\n    area_x += k * x[k] - (n - k-1) * x[k]\n\narea_y = 0\nfor l in range(m):\n    area_y += l * y[l] - (m - l-1) * y[l]\n\nprint(((area_x * area_y) % (10**9 + 7)))\n", "# \u89e3\u8aacAC\nN,M = map(int, input().split())\nX = [int(i) for i in input().split()]\nY = [int(i) for i in input().split()]\n\nMOD = 10 ** 9 + 7\n\ndef f(Z):\n    ans = 0\n    for k,z in enumerate(Z):\n        ans = (ans + k * z - (len(Z) - k - 1) * z) % MOD\n    return ans\n\nprint(f(X) * f(Y) % MOD)", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nclass mint:\n    def __init__(self, x):\n        self.__x = x % md\n\n    def __str__(self):\n        return str(self.__x)\n\n    def __add__(self, other):\n        if isinstance(other, mint): other = other.__x\n        return mint(self.__x + other)\n\n    def __sub__(self, other):\n        if isinstance(other, mint): other = other.__x\n        return mint(self.__x - other)\n\n    def __rsub__(self, other):\n        return mint(other - self.__x)\n\n    def __mul__(self, other):\n        if isinstance(other, mint): other = other.__x\n        return mint(self.__x * other)\n\n    __radd__ = __add__\n    __rmul__ = __mul__\n\n    def __truediv__(self, other):\n        if isinstance(other, mint): other = other.__x\n        return mint(self.__x * pow(other, md - 2, md))\n\n    def __pow__(self, power, modulo=None):\n        return mint(pow(self.__x, power, md))\n\nmd=10**9+7\ndef main():\n    n,m=MI()\n    xx=LI()\n    yy=LI()\n    ans=mint(0)\n    byj=mint(0)\n    for j in range(m - 1):\n        byj+=(j+1)*(m-j-1)*(yy[j+1]-yy[j])\n    for i in range(n-1):\n        ans+=(xx[i+1]-xx[i])*(i+1)*(n-i-1)*byj\n\n    print(ans)\n\nmain()", "N, M = list(map(int, input().split()))\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\n\nMOD = 10 ** 9 + 7\n\ncnt = 0\nfor i in range(M - 1):\n    l = Y[i + 1] - Y[i]\n    var = (i + 1) * (M - (i + 1))\n    cnt += l * var\n    cnt %= MOD\n\nans = 0\nfor i in range(N - 1):\n    l = X[i + 1] - X[i]\n    var = (i + 1) * (N - (i + 1))\n    ans += l * var * cnt\n    ans %= MOD\n\nprint(ans)\n", "n,m=map(int,input().split())\nlists=list(map(int,input().split()))\nsub=list(map(int,input().split()))\nmod=10**9+7\ntate=0\nyoko=0\nfor i in range(n):\n    tate+=lists[i]*(2*(i+1)-1-n)\nfor j in range(m):\n    yoko+=sub[j]*(2*(j+1)-1-m)\nprint(((tate%mod)*(yoko%mod))%mod)", "n,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nmod=10**9+7\nx.sort()\ny.sort()\nsx,sy=0,0\nfor k in range(1,n+1):\n  sx+=(2*k-n-1)*x[k-1]\n  sx%=mod\nfor k in range(1,m+1):\n  sy+=(2*k-m-1)*y[k-1]\n  sy%=mod\nprint((sx*sy)%mod)", "import numpy as np\nimport sys\ninput = sys.stdin.readline\n\nMOD = 10 ** 9 + 7\n\nn, m = list(map(int, input().split()))\nxs = list(map(int, input().split()))\nys = list(map(int, input().split()))\n\nweight_n = np.array([(i + 1) * (n - i - 1) % MOD for i in range(n - 1)]).astype(np.int64)\nweight_m = np.array([(i + 1) * (m - i - 1) % MOD for i in range(m - 1)]).astype(np.int64)\n\ndxs = np.array([xs[i+1] - xs[i] for i in range(n-1)]).astype(np.int64)\ndys = np.array([ys[i+1] - ys[i] for i in range(m-1)]).astype(np.int64)\n\nt_x = np.sum(weight_n * dxs % MOD) % MOD\nt_y = np.sum(weight_m * dys % MOD) % MOD\n\nprint((t_x * t_y % MOD))\n", "n, m = map(int, input().split())\nn, m = n-1, m-1\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nmod = 10 ** 9 + 7\nx.sort()\ny.sort()\n\nh, w = 0, 0\nfor i in range(n):\n    h += (i + 1) * (n - i) * (x[i+1] - x[i])\n    h %= mod\n\nfor j in range(m):\n    w += (j + 1) * (m - j) * (y[j+1] - y[j])\n    w %= mod\n\nprint(h * w % mod)", "n,m=map(int,input().split())\nX=list(map(int,input().split()))\nY=list(map(int,input().split()))\nmod=10**9+7\n\nans1=0\nfor k in range(1,n+1):\n    ans1+=(2*k-1-n)*X[k-1]\n    ans1%=mod\nans2=0\nfor k in range(1,m+1):\n    ans2+=(2*k-1-m)*Y[k-1]\n    ans2%=mod\nprint(ans1*ans2%mod)", "MOD = 10**9 + 7\ndef main():\n    n, m = map(int, input().split())\n    n, m = n-1, m-1\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    a, b = 0, 0\n    for i in range(n):\n        tmp = (x[i+1] - x[i])\n        tmp *= (1+i) * (n-i) % MOD\n        a += tmp\n        a %= MOD\n    for i in range(m):\n        tmp = (y[i+1] - y[i])\n        tmp *= (1+i) * (m-i) % MOD\n        b += tmp\n        b %= MOD\n    print(a*b % MOD)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    \n    X = [x[i+1]-x[i] for i in range(n-1)]\n    Y = [y[i+1]-y[i] for i in range(m-1)]\n    \n    mod = pow(10, 9)+7\n    for i in range(n-1):\n        X[i] = X[i]*(n-i-1)*(i+1)%mod\n    \n    sum_x = sum(X)%mod\n    \n    ans = 0\n    for j in range(m-1):\n        ans += sum_x*Y[j]*(m-j-1)*(j+1)%mod\n        ans %= mod\n    \n    print(ans)\n    \n    \n    \ndef __starting_point():\n    main()\n\n__starting_point()", "N, M = map(int, input().split())\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\nX, Y = X[::-1], Y[::-1]\n\nMOD = 10**9 + 7\nx_sum, y_sum = 0, 0\n\nfor i in range(N):\n  x_sum = x_sum + (N-i-1)*X[i]\nX = X[::-1]\nfor i in range(N):\n  x_sum = x_sum - (N-i-1)*X[i]\nx_sum %= MOD\n\nfor i in range(M):\n  y_sum = y_sum + (M-i-1)*Y[i]\nY = Y[::-1]\nfor i in range(M):\n  y_sum = y_sum - (M-i-1)*Y[i]\ny_sum %= MOD\n\nprint((x_sum*y_sum)%MOD)", "# solution\nimport io\n\ndata=lambda:list(map(int,input().split()))\ndata()\nq=lambda x:sum(j*(len(x)-1-2*i)for i,j in enumerate(x))\nprint(q(data())*q(data())%(10**9+7))", "import sys\n\ndef main():\n    p=10**9+7\n    def totsum(l,n):\n        s=0\n        t=0\n        for i in range(n//2):\n            t=t+l[-1-i]-l[i]\n            s=(s+t) % p\n        s=(2*s-(1-n&1)*t) % p\n        return s\n    n,m=list(map(int,input().split()))\n    x=list(map(int,sys.stdin.readline().strip().split()))\n    y=list(map(int,sys.stdin.readline().strip().split()))\n    \n    print(((totsum(x,n)*totsum(y,m))%p))\n    \n    # for j in range(2,m):\n    #     ns=(s*(y[j]-y[j-1])) % p\n    #     tot2=(tot2 + j*ns) % p\n    #     tot1=(tot2+tot1) % p\n    # print(tot1)\n\ndef __starting_point():\n    main()\n    \n\n__starting_point()", "n, m = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nmod = 10**9+7\n\nsidex, sidey = 0,0\n\nfor i in range(1,n):\n  sidex += (x[i]-x[i-1])*i*(n-i)%mod\n\nfor i in range(1,m):\n  sidey += (y[i]-y[i-1])*i*(m-i)%mod\n\nprint (sidex*sidey%mod)", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nmod = 10**9+7\n\ndef count(li):\n    l = 1-len(li)\n    cnt = 0\n    for ind, i in enumerate(li):\n        cnt += i*(l+2*ind)\n    return cnt%mod\n\nprint(((count(x)*count(y))%mod))\n", "def main():\n    MOD = 10**9 + 7\n    N, M = list(map(int, input().split(' ')))\n    X = list(map(int, input().split(' ')))\n    Y = list(map(int, input().split(' ')))\n    X.sort()\n    Y.sort()\n    heights = [Y[i + 1] - Y[i] for i in range(M - 1)]\n    widths = [X[j + 1] - X[j] for j in range(N - 1)]\n    # first row\n    row_areas = [0 for _ in range(M - 1)]\n    first_row_area, norm_first_row_area = 0, 0\n    for j, w in enumerate(widths):\n        first_row_area += (1 + 0) * (M - 0 - 1) * (j + 1) * (N - j - 1) * w * heights[0]\n        first_row_area %= MOD\n        norm_first_row_area += (j + 1) * (N - j - 1) * w\n        norm_first_row_area %= MOD\n    row_areas[0] = first_row_area\n    # rest rows\n    for i in range(1, M - 1):\n        area = (i + 1) * (M - i - 1) * norm_first_row_area * heights[i]\n        area %= MOD\n        row_areas[i] = area\n    # answer\n    ans = 0\n    for a in row_areas:\n        ans += a\n        ans %= MOD\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "MOD=1000000007\nn,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nxs=ys=0\nfor i in range(1,n+1):\n  xs+=((i-1)*x[i-1]-(n-i)*x[i-1])\n  xs%=MOD\nfor i in range(1,m+1):\n  ys+=((i-1)*y[i-1]-(m-i)*y[i-1])\n  ys%=MOD\nans=xs*ys\nprint(ans%MOD)", "mod=10**9+7\nn,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nxx=[x[i+1]-x[i] for i in range(n-1)]\nyy=[y[i+1]-y[i] for i in range(m-1)]\nxsum=sum(xx[i]*(i+1)*(n-1-i) for i in range(n-1))%mod\nysum=sum(yy[i]*(i+1)*(m-1-i) for i in range(m-1))%mod\nprint(xsum*ysum%mod)", "n, m = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nMOD = 10**9+7\n\nxx = [x[i + 1] - x[i] for i in range(n - 1)]\nyy = [y[i + 1] - y[i] for i in range(m - 1)]\n\nprint(sum(xx[i] * (i + 1) * (n - 1 - i) for i in range(n - 1)) *\n      sum(yy[i] * (i + 1) * (m - 1 - i) for i in range(m - 1)) % MOD)", "n,m=list(map(int,input().split()))\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nmod=10**9+7\nvx,vy=0,0\nfor i in range(n-1):\n  vx+=(x[i+1]-x[i])*(i+1)*(n-i-1)\n  vx%=mod\nfor i in range(m-1):\n  vy+=(y[i+1]-y[i])*(i+1)*(m-i-1)\n  vy%=mod\nprint(((vx*vy)%mod))\n", "MOD=10**9+7\nclass Fp(int):\n    def __new__(self,x=0):return super().__new__(self,x%MOD)\n    def inv(self):return self.__class__(super().__pow__(MOD-2,MOD))\n    def __add__(self,value):return self.__class__(super().__add__(value))\n    def __sub__(self,value):return self.__class__(super().__sub__(value))\n    def __mul__(self,value):return self.__class__(super().__mul__(value))\n    def __floordiv__(self,value):return self.__class__(self*self.__class__(value).inv())\n    def __pow__(self,value):return self.__class__(super().__pow__(value%(MOD-1), MOD))\n    __radd__=__add__\n    __rmul__=__mul__\n    def __rsub__(self,value):return self.__class__(-super().__sub__(value))\n    def __rfloordiv__(self,value):return self.__class__(self.inv()*value)\n    def __iadd__(self,value):self=self+value;return self\n    def __isub__(self,value):self=self-value;return self\n    def __imul__(self,value):self=self*value;return self\n    def __ifloordiv__(self,value):self=self//value;return self\n    def __ipow__(self,value):self=self**value;return self\n    def __neg__(self):return self.__class__(super().__neg__())\n\nimport sys\nsys.stdin.readline\n\ndef main():    \n    n, m = map(int, input().split())\n    X = list(map(int, input().split()))\n    Y = list(map(int, input().split()))\n    n = Fp(n)\n    m = Fp(m)\n    print(sum((n - i) * i * (X[i] - X[i-1]) for i in range(1, n)) * sum((m - i) * i * (Y[i] - Y[i-1]) for i in range(1, m)))\n\ndef __starting_point():\n    main()\n__starting_point()", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\n#\u666e\u901a\u306b\u8003\u3048\u308b\u306e\u3067\u3042\u308c\u3070nC2 * mC2\n\n# \u7d2f\u7a4d\u548c\u4f7f\u3048\u3070\u3042\u308bx_i\u3092\u9078\u3093\u3060\u3068\u304d\u306e\u6a2a\u306e\u9577\u3055\u306e\u548c(\u3082\u3046\uff11\u672c\u306ex_i\u3068\u306e\u8ddd\u96e2\u306e\u5408\u8a08)\u306f\u5206\u304b\u308b\nmod = 10**9 + 7\n# H = x[-1] - x[0]\n# W = y[-1] - y[0]\n# S = H*W % mod\n# S *= (n-1)*(m-1)\n# if n >= 4:\n#     h = x[-2] - x[1]\n#     S -= h*W * 2\n# if m >= 4:\n#     w = y[-2] - y[1]\n#     S -= H*w * 2\nH = 0\nW = 0\nfor i in range(n//2):\n    w = x[n-1-i] - x[i]\n    if i == n//2 - 1:\n        if n % 2 == 1:\n            w *= 2\n    else:\n        w *= n-2*i-1\n    W += w\n    W %= mod\nfor j in range(m // 2):\n    h = y[m-1-j] - y[j]\n    if j == m//2 - 1:\n        if m % 2 == 1:\n            h *= 2\n    else:\n        h *= m-1-2*j\n    H += h\n    H %= mod\nS = H*W\n\nprint((S % mod))\n", "MOD = 1000000007\n\nN, M = map(int, input().split())\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\n\ndx = [X[i + 1] - X[i] for i in range(N - 1)]\ndy = [Y[i + 1] - Y[i] for i in range(M - 1)]\n\nsx = 0\nsy = 0\n\nfor i in range(N - 1):\n    sx += dx[i] * (i + 1) * (N - 1 - i)\n    sx %= MOD\n\nfor i in range(M - 1):\n    sy += dy[i] * (i + 1) * (M - 1 - i)\n    sy %= MOD\n\nprint(sx * sy % MOD)", "n,m=map(int,input().split())\nMOD=1000000007\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nsx=0\nsy=0\nfor i in range(1,n):\n  sx += (x[i]-x[i-1]) * i * (n-i)\n  sx %= MOD\nfor i in range(1,m):\n  sy += (y[i]-y[i-1]) * i * (m-i)\n  sy %= MOD\nprint(sx*sy%MOD)", "import sys\ninput = sys.stdin.readline\nn,m = map(int,input().split())\nmod = 10**9+7\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\nans_x = 0\nans_y = 0\nfor i,xi in enumerate(x):\n  ans_x += i*xi-(n-1-i)*xi\n  ans_x %= mod\nfor j,yi in enumerate(y):\n  ans_y += j*yi-(m-1-j)*yi\n  ans_y %= mod\nprint(ans_x*ans_y%mod)", "n, m = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nmod = int(1e9) + 7\nS = 0\nfor i in range(n):\n  S += (2*i+1-n)*x[i]\n  S %= mod\nT = 0\nfor j in range(m):\n  T += (2*j+1-m)*y[j]\n  T %= mod\nprint(S*T%mod)", "n,m=list(map(int,input().split()))\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nmod=10**9+7\nans=0\ndef sum_S(a,z):\n    ans=0\n    for i in range(len(z)):\n        z_i=z[i]*(2*i+1-a)\n        ans+=z_i\n    return ans\nans_x=sum_S(n,x)\nans_y=sum_S(m,y)\nres=(ans_x*ans_y)%mod\nprint(res)\n", "import numpy as np\n\n\ndef main():\n    mod = 10 ** 9 + 7\n    n, m = list(map(int, input().split()))\n    X = np.array(list(map(int, input().split())), dtype=np.int64)\n    Y = np.array(list(map(int, input().split())), dtype=np.int64)\n\n    dxs = X[1:] - X[:-1]\n    left = np.arange(1, n)\n    right = np.arange(n-1, 0, -1)\n    x_pattern = left * right % mod\n    x_sum = (dxs * x_pattern).sum() % mod\n\n    dys = Y[1:] - Y[:-1]\n    up = np.arange(1, m)\n    down = np.arange(m-1, 0, -1)\n    y_pattern = up * down % mod\n    y_sum = (dys * y_pattern).sum() % mod\n\n    print((x_sum * y_sum % mod))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nmod = 10 ** 9 + 7\n\nsx = 0\nfor i in range(n-1):\n    xi = (x[i+1] - x[i]) % mod\n    sx += (i + 1) * (n - i - 1) * xi % mod\n    sx %= mod\n\nsy = 0\n\nfor i in range(m-1):\n    yi = (y[i+1] - y[i]) % mod\n    sy += (i + 1) * (m - i - 1) * yi % mod\n    sy %= mod\n\nprint(((sx*sy)%mod))\n\n", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef TUPLE(): return tuple(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7 \n#mod = 998244353\n#from decimal import *\n#import numpy as np\n#decimal.getcontext().prec = 10\n\nn, m = MAP()\nx = LIST()\ny = LIST()\n\ndef acc(A):\n\tacc = []\n\ttmp = 0\n\tfor a in A:\n\t\ttmp += a\n\t\ttmp %= mod\n\t\tacc.append(tmp)\n\treturn acc\n\ndef sum_combinations(A, k):\n\tA_acc = acc(A)\n\tA_sum = 0\n\n\tfor i in range(k):\n\t\ttmp = (A_acc[-1] - A_acc[i]) %mod\n\t\ttmp = (tmp-A[i] * (k-1-i)%mod) %mod\n\t\tA_sum = (A_sum + tmp) %mod\n\n\treturn A_sum\n\nprint((sum_combinations(x, n) * sum_combinations(y, m) %mod))\n", "import sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\nN, M = map(int, input().split())\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\nMOD = int(1e9) + 7\n\nxs = 0\nfor i in range(N):\n    xs += i * X[i] % MOD - (N - i - 1) * X[i] % MOD + 2 * MOD\n    xs %= MOD\n\nys = 0\nfor i in range(M):\n    ys += i * Y[i] % MOD - (M - i - 1) * Y[i] % MOD + 2 * MOD\n    ys %= MOD\n\nprint(xs * ys % MOD)", "m,n = map(int,input().split())\nX = list(map(int,input().split()))\nY = list(map(int,input().split()))\nMOD = 1000000007\nsum_x = 0\nsum_y = 0\nfor k in range(m):\n  sum_x += (2*k +1 -m)*X[k]\nsum_x %= MOD\nfor l in range(n):\n  sum_y += (2*l + 1 - n)*Y[l]\nsum_y %= MOD\nAnswer = (sum_x*sum_y) % MOD\nprint(Answer)", "n, m = map(int, input().split())\nX = sorted([int(x) for x in input().split()])\nY = sorted([int(x) for x in input().split()])\nmod = 1000000007\n\ndef diffSum(X): #\u03a3(X[j]-X[i]) 1<=i<j<=N\n    l = len(X)\n    Res = [(2*i-l+1)*X[i] for i in range(l)]\n    return sum(Res)%mod\n\nprint(diffSum(X)*diffSum(Y)%mod)", "n,m = list(map(int,input().split()))\nx = list(map(int,input().split()))\ny = list(map(int,input().split()))\nsum_x = 0\nsum_y = 0\nfor i in range(n):\n    sum_x += x[i]*i\n    sum_x -= x[i]*(n-1-i)\nfor i in range(m):\n    sum_y += y[i]*i\n    sum_y -= y[i]*(m-1-i)\nmod = 10**9+7\nprint(((sum_x%mod)*(sum_y%mod)%mod))\n", "n,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nM,a,b=10**9+7,0,0\nfor i in range(n):a+=(2*i-n+1)*x[i];a%=M\nfor i in range(m):b+=(2*i-m+1)*y[i];b%=M\nprint(a*b%M)", "MOD = 10**9+7\n\nn,m = map(int,input().split())\nx = list(map(int,input().split()))\ny = list(map(int,input().split()))\n\nx_dif = [b-a for a,b in zip(x,x[1:])]\ny_dif = [b-a for a,b in zip(y,y[1:])]\n\ndef cumd(dif,line):\n    d_sum = 0\n    for i,d in enumerate(dif,1):\n        d_sum += d * i * (line-i)%MOD\n        d_sum %= MOD\n    return d_sum\n\ndx_sum = cumd(x_dif,n)\ndy_sum = cumd(y_dif,m)\n\n    \nprint(dx_sum * dy_sum % MOD)", "# \u89e3\u8aacAC\nn,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nmod=10**9+7\nans,ans2=0,0 #sum[0<=i<j<n](x[j]-x[i])\u3092\u6c42\u3081\u308b.\nfor i in range(n):\n    ans=(ans+(-n+2*i+1)*x[i])%mod\nfor i in range(m):\n    ans2=(ans2+(-m+2*i+1)*y[i])%mod\nprint(ans*ans2%mod)", "MOD = 10**9+7\nn, m = list(map(int, input().split()))\nX = list(map(int ,input().split()))\nY = list(map(int ,input().split()))\nX.sort()\nY.sort()\nxx, yy = 0, 0\nfor i in range(n):\n    xx += X[i]*i\n    xx -= X[i]*(n-i-1)\nfor i in range(m):\n    yy += Y[i]*i\n    yy -= Y[i]*(m-i-1)\nprint((xx*yy%MOD))\n", "n, m = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nMOD = 10**9+7\n\nxx = [x[i + 1] - x[i] for i in range(n - 1)]\nyy = [y[i + 1] - y[i] for i in range(m - 1)]\n\nprint(sum(xx[i] * (i + 1) * (n - 1 - i) for i in range(n - 1)) *\n      sum(yy[i] * (i + 1) * (m - 1 - i) for i in range(m - 1)) % MOD)", "mod = 10**9+7\n\ndef sum_interval_1d(N,X):\n  # O(N)\n  X_ = [X[i+1]-X[i] for i in range(N-1)]\n  coef = list(range(1,N))[::-1]\n  ret = (X_[0]*coef[0])%mod\n  for i in range(1,N-1):\n    coef[i] = (coef[i]+coef[i-1]-i)%mod\n    ret = (ret + ((X_[i]*coef[i]) % mod)) % mod\n  # print(X_, coef, ret)\n  return ret\n\ndef solve():\n  N,M = map(int, input().split())\n  X = list(map(int, input().split()))\n  Y = list(map(int, input().split()))\n  x_sum = sum_interval_1d(N,X)\n  y_sum = sum_interval_1d(M,Y)\n  # print(x_sum,y_sum)\n  ret = (x_sum*y_sum) % mod\n  print(ret)\n  \nsolve()", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nMOD = 10 ** 9 + 7\nn, m = lr()\nX = np.array(lr())\nY = np.array(lr())\ncoef_x = np.arange(n)*2 - (n-1)\nxsum = (X * coef_x % MOD).sum() % MOD\ncoef_y = np.arange(m)*2 - (m-1)\nysum = (Y * coef_y % MOD).sum() % MOD\nanswer = xsum * ysum % MOD\nprint(answer)\n", "N,M = map(int,input().split())\nX = list(map(int,input().split()))\nY = list(map(int,input().split()))\na = 0\nb = 0\nmod = 10**9+7\n\nfor n in range(N):\n  a+=(2*n-N+1)*X[n]\n  a%=mod\n\nfor m in range(M):\n  b+=(2*m-M+1)*Y[m]\n  b%=mod\n\nprint(a*b%mod)", "n,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\naj=0\nxsum=0\nmod1,mod2=10**9+7,998244353\nmod=mod1\nfor j in range(1,n):\n    aj=(aj+j*(x[j]-x[j-1])%mod)%mod\n    xsum=(xsum+aj)%mod\nbj=0\nysum=0\nfor j in range(1,m):\n    bj=(bj+j*(y[j]-y[j-1])%mod)%mod\n    ysum=(ysum+bj)%mod\n\nprint(xsum*ysum%mod)", "N, M = map(int, input().split())\nMOD = 10**9+7\nx = [int(c) for c in input().split()]\ny = [int(c) for c in input().split()]\nX = 0\nY = 0\nfor i, c in enumerate(x):\n  X += i*c-(N-1-i)*c\n  X %= MOD\nfor i, c in enumerate(y):\n  Y += i*c-(M-1-i)*c\n  Y %= MOD\nprint(X*Y%MOD)", "n,m=map(int,input().split())\nX=list(map(int,input().split()))\nY=list(map(int,input().split()))\nxsum=0;ysum=0;mod=10**9+7\nfor i,x in enumerate(X): xsum+=x*(i-(n-1-i))\nfor i,y in enumerate(Y): ysum+=y*(i-(m-1-i))\nprint(xsum * ysum % mod)", "import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    \n    X = [x[i+1]-x[i] for i in range(n-1)]\n    Y = [y[i+1]-y[i] for i in range(m-1)]\n    \n    mod = pow(10, 9)+7\n    for i in range(n-1):\n        X[i] = X[i]*(n-i-1)*(i+1)%mod\n    \n    sum_x = sum(X)%mod\n    \n    for i in range(m-1):\n        Y[i] = Y[i]*(m-i-1)*(i+1)%mod\n    \n    sum_y = sum(Y)%mod\n    \n    \n    ans = sum_x*sum_y%mod\n    \n    print(ans)\n    \n    \n    \ndef __starting_point():\n    main()\n\n__starting_point()", "n,m = map(int,input().split())\nmod = 10**9+7\n\nx = sorted(list(map(int,input().split())))\ny = sorted(list(map(int,input().split())))\n\nX = 0\nfor i in range(n-1):\n    X += (i+1)*(n-i-1)*(x[i+1]-x[i])%mod\n    X %= mod\n\nY = 0\nfor i in range(m-1):\n    Y += (i+1)*(m-i-1)*(y[i+1]-y[i])%mod\n    Y %= mod\n\nprint(X*Y%mod)", "def main():\n    MOD = 10 ** 9 + 7\n\n    N, M = list(map(int, input().split()))\n    *X, = list(map(int, input().split()))\n    *Y, = list(map(int, input().split()))\n\n    def total(E):\n        L = len(E)\n        ret = 0\n        for i, (frm, to) in enumerate(zip(E, E[1:]), start=1):\n            ret = (ret + i * (L - i) * (to - frm)) % MOD\n        return ret\n\n    ans = total(X) * total(Y) % MOD\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "mod=1000000007\nn,m=list(map(int,input().split()))\nx=[int(i) for i in input().split()]\ny=[int(i) for i in input().split()]\n\nxc=0\nfor i in range(1,n):\n    a=x[i]-x[i-1]\n    l=min(i,n-i)\n    #xc+=a*(l*n-((l*l+l)//2))\n    xc+=a*(l*(n-l))\n    xc%=mod\n\nyc=0\nfor i in range(1,m):\n    a=y[i]-y[i-1]\n    l=min(i,m-i)\n    #yc+=a*(l*m-((l*l+l)//2))\n    yc+=a*(l*(m-l))\n    yc%=mod\nprint(((xc*yc)%mod))\n", "N, M = map(int, input().split())\nMOD = 10**9 + 7\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\ncumsum_x = [0] * N\ncumsum_y = [0] * M\ncumsum_x[0] = x[0]\ncumsum_y[0] = y[0]\nfor i, xi in enumerate(x[1:], 1):\n  cumsum_x[i] = (cumsum_x[i-1] + xi) % MOD\n\nfor i, yi in enumerate(y[1:], 1):\n  cumsum_y[i] = (cumsum_y[i-1] + yi) % MOD\n\nX = Y = 0\nfor i, xi in enumerate(x):\n  X += (cumsum_x[-1] - cumsum_x[i] - (N - i - 1)*xi) % MOD\n  X %= MOD\n\nfor i, yi in enumerate(y):\n  Y += (cumsum_y[-1] - cumsum_y[i] - (M - i - 1)*yi) % MOD\n  Y %= MOD\n\nprint(X*Y % MOD)", "n,m = map(int, input().split())\nxl = list(map(int, input().split())) \nyl = list(map(int, input().split())) \n\nxl = list(map(lambda x: x-xl[0],xl))\nyl = list(map(lambda x: x-yl[0],yl))\n\nxi=0\nyi=0\nmod = 10**9+7\nxsum = sum(xl)\nysum = sum(yl)\nfor i in range(n):\n    xi += (xsum - xl[i]*(n-i)) % mod\n    xsum -= xl[i] \n    \nfor j in range(m):\n    yi += (ysum - yl[j]*(m-j)) % mod\n    ysum -= yl[j]\n\nprint(xi*yi % mod)", "n, m = map(int,input().split())\nX = list(map(int,input().split()))\nY = list(map(int,input().split()))\nDX = [X[i+1] - X[i] for i in range(n-1)]\nDY = [Y[i+1] - Y[i] for i in range(m-1)]\nmod = 10 ** 9 + 7\n\nSUM_X = 0\nSUM_Y = 0\n\nfor i in range(n-1):\n    SUM_X += (i+1) * (n-1-i) * DX[i]\n    SUM_X %= mod\n\nfor i in range(m-1):\n    SUM_Y += (i+1) * (m-1-i) * DY[i]\n    SUM_Y %= mod\n\nans = (SUM_X * SUM_Y) % mod\n\nprint(ans)", "n,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nsx=0\nsy=0\npr=10**9+7\nfor i in range(1,n):\n    sx+=(x[i]-x[i-1])*(i*(n-i))%pr\nfor i in range(1,m):\n    sy+=(y[i]-y[i-1])*(i*(m-i))%pr\nprint(sx*sy%pr)", "num = input().split(\" \")\nzahyou_x = input().split(\" \")\nzahyou_y = input().split(\" \")\nx_num = int(num[0])\ny_num = int(num[1])\nx_sum = 0\ny_sum = 0\n\nfor i in range(x_num):\n    x_sum += int(zahyou_x[i]) * (i*2 - x_num + 1)\n\nfor i in range(y_num):\n    y_sum += int(zahyou_y[i]) * (i*2 - y_num + 1)\nprint(x_sum*y_sum%(10**9+7))", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nMOD = 10 ** 9 + 7\nn, m = lr()\nX = np.array(lr())\nY = np.array(lr())\ncoef_x = np.arange(n)*2 - (n-1)\nX *= coef_x\nxsum = (X%MOD).sum() % MOD\ncoef_y = np.arange(m)*2 - (m-1)\nY *= coef_y\nysum = (Y%MOD).sum() % MOD\nanswer = xsum * ysum % MOD\nprint((answer % MOD))\n", "n, m = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nmod = pow(10, 9) + 7\na, b = [0] * (n - 1), [0] * (m - 1)\nc, s = n - 1, 0\nfor i in range(n - 1):\n    s += c\n    a[i] = s\n    c -= 2\nc, s = m - 1, 0\nfor i in range(m - 1):\n    s += c\n    b[i] = s\n    c -= 2\nsumx, sumy = 0, 0\nfor i in range(n - 1):\n    sumx += (a[i] * (x[i + 1] - x[i]))\n    sumx %= mod\nfor i in range(m - 1):\n    sumy += (b[i] * (y[i + 1] - y[i]))\n    sumy %= mod\nans = sumx * sumy % mod\nprint(ans)", "n, m = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nmod = 10**9+7\nsum_x = 0\nsum_y = 0\nfor i in range(n):\n    sum_x += i*x[i]-(n-i-1)*x[i]\nfor i in range(m):\n    sum_y += i*y[i]-(m-i-1)*y[i]\nprint(sum_x*sum_y%mod)", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nmod = 10**9+7\n\ndef count(li):\n    l = 1-len(li)\n    cnt = 0\n    for ind, i in enumerate(li):\n        cnt += i*(l+2*ind)\n    return cnt%mod\n\nprint(((count(x)*count(y))%mod))\n", "n,m = map(int,input().split())\nx = list(map(int,input().split()))\ny = list(map(int,input().split()))\nwidth,height = 0,0\na = -n-1\nfor k in range(1,n+1):\n  width += x[k-1] * (2*k+a)\na = -m-1\nfor k in range(1,m+1):\n  height += y[k-1] * (2*k+a)\nwidth %= 1000000007\nheight %= 1000000007\nprint(width * height % 1000000007)", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nMOD = 10 ** 9 + 7\n# \u7e26\u8ef8\u306e\u548c\u3001\u6a2a\u8ef8\u306e\u548c\u3092\u6c42\u3081\u3066\u3001\u639b\u3051\u5408\u308f\u305b\u308b\u3002\n\n# list\u304b\u3089\u3001\u548c\u3092\u6c42\u3081\u308b\n\n\ndef calc(lis):\n    num = len(lis)\n    sum = 0\n    for i in range(num):\n        #sum += x[i] * (num - i - 1) - x[i] * (i)\n        sum += lis[i] * i - (lis[i] * (num - i - 1))\n\n    return sum\n    '''\n          lisSum = 0\n          before = 0\n          for i, val in enumerate(lis):\n              lisSum += val\n              if (i != 0):\n                  temp = before + val\n                  lisSum = temp\n              before = val\n\n          return int(lisSum)\n\n      '''\n\n\nxSum = calc(x)\nySum = calc(y)\n\nans = (xSum * ySum) % MOD\nprint(ans)\n\n\n'''\ndef calc(list):\n\nsum = 0\nfor i in range(n):\n  temp = n - i\n  for j in range(i+1, n):\n    sum += list[i] - list[j]\n\n\u4e8c\u91cd\u30eb\u30fc\u30d7\u306b\u305b\u305a\u3068\u3082\u3001\nfor i in range(n):\n  sum += x[i]*(n-i-1) - x[1]*(i)\n\n\u3067OK\n'''\n", "N, M = list(map(int, input().split()))\nX = tuple(map(int, input().split()))\nY = tuple(map(int, input().split()))\nMOD = 10 ** 9 + 7\n\nX_sum = sum((2 * i - N + 1) * x for i, x in enumerate(X)) % MOD\nY_sum = sum((2 * i - M + 1) * y for i, y in enumerate(Y)) % MOD\nprint((X_sum * Y_sum % MOD))\n", "def d_rectangles(MOD=10**9 + 7):\n    N, M = [int(i) for i in input().split()]\n    X = [int(i) for i in input().split()]\n    Y = [int(i) for i in input().split()]\n\n    ans1 = sum([x * (2 * k - N - 1) for k, x in enumerate(X, 1)])\n    ans2 = sum([y * (2 * k - M - 1) for k, y in enumerate(Y, 1)])\n    return (ans1 * ans2) % MOD\n\nprint(d_rectangles())", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nmod = 10**9+7\n\n\"\"\"\n\u5404\u8fba\u3092\u72ec\u7acb\u3057\u3066\u7d44\u307f\u5408\u308f\u305b\u3066\u826f\u3044\u3002\n\u3069\u306ex\u306e\u8fba\u3082\u3059\u3079\u3066\u306ey\u306e\u8fba\u3092\u304b\u3051\u3066\u5408\u8a08\u3059\u308b\u3053\u3068\u304b\u3089\u3001\n\u5206\u914d\u6cd5\u5247\u3092\u9069\u7528\u3057\u3066\nans = (x\u306e\u53d6\u308a\u3046\u308b\u8fba\u306e\u7dcf\u548c)x(y\u306e\u53d6\u308a\u3046\u308b\u8fba\u306e\u7dcf\u548c)\n\u3068\u306a\u308b\n\u3057\u305f\u304c\u3063\u3066\u3001\u5404\u8fba\u306e\u7dcf\u548c\u3092\u52b9\u7387\u7684\u306b\u6c42\u3081\u3089\u308c\u308c\u3070\u826f\u3044\n\u4e00\u65e6x\u306b\u7740\u76ee\u3057\u3001\u5404\u70b9\u306e\u7d44\u5408\u305b\u3067\u3067\u304d\u308b\u8fba\u306e\u7dcf\u548c\u3092\u6c42\u3081\u308b\u3002\n\u3053\u3053\u3067\u3001x_i\u3068x_i+1\u306e\u533a\u9593\u306f\u4ed6\u306e\u8fba\u306e\u90e8\u5206\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u308b\u56de\u6570\u306f\n(i+1)*(n-i-1) 0-indexed\n\u3057\u305f\u304c\u3063\u3066\u3001\u5dee\u6570\u5217\u306b\u56de\u6570\u3092\u7573\u307f\u3053\u3093\u3067\u8fba\u306e\u7dcf\u548c\u304c\u6c42\u307e\u308b\ny\u3082\u540c\u69d8\u306b\u7dcf\u548c\u3092\u6c42\u3081\u3001\u7a4d\u3092\u53d6\u308c\u3070\u826f\u3044\n\"\"\"\n\nx_diff = [x[i]-x[i-1] for i in range(1, n)]\ny_diff = [y[i]-y[i-1] for i in range(1, m)]\n\nx_sum = 0\nfor i, dx in enumerate(x_diff):\n    x_sum = (x_sum + (dx * (i+1) * (n-i-1))%mod)%mod\ny_sum = 0\nfor i, dy in enumerate(y_diff):\n    y_sum = (y_sum + (dy * (i+1) * (m-i-1))%mod)%mod\n\nprint(((x_sum*y_sum)%mod))\n\n\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, M = MAP()\nA = LIST()\nB = LIST()\n\n# \u7e26\u6a2a\u72ec\u7acb\u306b\u3001\u5168\u533a\u9593\u7dcf\u548c\u3092\u53d6\u308b\nlsm = rsm = 0\nfor i in range(N):\n    lsm += A[i] * (N-i-1)\n    rsm += A[i] * i\n    lsm %= MOD\n    rsm %= MOD\nh = rsm - lsm\nlsm = rsm = 0\nfor i in range(M):\n    lsm += B[i] * (M-i-1)\n    rsm += B[i] * i\n    lsm %= MOD\n    rsm %= MOD\nw = rsm - lsm\n\nans = h * w % MOD\nprint(ans)\n", "N,M=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nmod=10**9+7\n\nX=0\nfor i in range(N):\n    X+=((i)*x[i]-(N-i-1)*x[i])\n    X%=mod\nY=0\nfor i in range(M):\n    Y+=((i)*y[i]-(M-i-1)*y[i])\n    Y%=mod\nprint(X*Y%mod)", "import sys\ndef input():\n    return sys.stdin.readline().strip()\n\ndef calc(x,n):\n    ans = 0\n    for i,a in enumerate(x):\n        ans += (2*i-n+1)*a\n    return ans\n\nn,m = list(map(int,input().split()))\nx = tuple(map(int,input().split()))\ny = tuple(map(int,input().split()))\n\nprint((calc(x,n)*calc(y,m)%(int(1e9+7))))\n", "mod = 10 ** 9 + 7\n\ndef solve(N, X):\n    return sum((2 * k - N + 1) * x for k, x in enumerate(X)) % mod\n\n\nN, M, *XY = map(int, open(0).read().split())\nX, Y = XY[:N], XY[N:]\n\nprint(solve(N, X) * solve(M, Y) % mod)", "n, m = list(map(int, input().split()))\n\nx = list(map(int, input().split()))    \ny = list(map(int, input().split()))\n\ntmp_x = 0\ntmp_y = 0\nmod = 10**9+7\nfor i, xi in enumerate(x):\n    tmp_x += (xi+1)*(2*i-(n-1))\n    \ntmp_x = tmp_x % mod\n\nfor i, yi in enumerate(y):\n    tmp_y += (yi+1)*(2*i-(m-1))\n    \ntmp_y = tmp_y % mod\n\nprint(((tmp_x*tmp_y)%mod))\n", "import sys\nreadline = sys.stdin.readline\n\nN,M = map(int,readline().split())\nX = list(map(int,readline().split()))\nY = list(map(int,readline().split()))\nDIV = 10 ** 9 + 7\n\n# \u30ab\u30a6\u30f3\u30c8\u3059\u308b\u56de\u6570\u5206X,Y\u8ef8\u3068\u3082\u306b\u8fba\u306e\u9577\u3055\u3092\u4f38\u3070\u3057\u3066\u3044\u3063\u3066\u5de8\u5927\u306a\u9577\u65b9\u5f62\u3092\u4f5c\u308b\u30a4\u30e1\u30fc\u30b8\n# X\u8ef8\u306e\u3001\u9577\u3055L\u306e\u8fba\u30923\u56de\u6570\u3048\u308b\u5834\u5408\u3001L * 2\u5206X\u8ef8\u306e\u8fba\u306e\u9577\u3055\u3092\u4f38\u3070\u3059\u3002\n# X\u8ef8Y\u8ef8\u3068\u3082\u306b\u5404\u8fba\u3092\u6570\u3048\u308b\u56de\u6570\u304c\u5206\u304b\u308c\u3070\u3001\u5de8\u5927\u306a\u9577\u65b9\u5f62\u306e\u9762\u7a4d\u306f\u305d\u306e\u7a4d\u3067\u6c42\u3081\u3089\u308c\u308b\n# \n# X\u8ef8\u306b\u3064\u3044\u3066\u3001i\u756a\u76ee\u306e\u8fba\u306f\u3001((i - 1) + 1) * (N - i)\u56de\u6570\u3048\u308b\n# \u4f8b\uff1a4\u756a\u76ee\u306e\u8fba\u306e\u5834\u5408\n# ...X.. \n# X\u3088\u308a\u5de6\u304b\u30894\u901a\u308a\uff080\u3082\u542b\u3080\u305f\u3081\uff09 * X\u3088\u308a\u53f3\u304b\u30893\u901a\u308a(0\u3082\u542b\u3080\u305f\u3081)\n# \u3053\u306e\u56de\u6570\u5206\u3001\u8fba\u306e\u9577\u3055\u3092\u639b\u3051\u308b\u3053\u3068\u3092\u5168\u3066\u306e\u8fba\u306b\u5bfe\u3057\u3066\u884c\u3063\u305f\u7dcf\u548c\u304cX\u8ef8\u306e\u8fba\u306e\u7dcf\u91cf\n# Y\u8ef8\u306b\u3064\u3044\u3066\u3082\u540c\u3058\u3082\u306e\u3092\u6c42\u3081\u3066\u3001\u639b\u3051\u5408\u308f\u305b\u305f\u3082\u306e\u304c\u7b54\u3048\n\nxsum = 0\nfor i in range(1, len(X)):\n  # i\u756a\u76ee\u306e\u8fba\u306f\u3001\u9577\u3055X[i] - X[i - 1]\n  edge = X[i] - X[i - 1]\n  # i\u756a\u76ee\u306e\u8fba\u306f((i - 1) + 1) * (N - i)\u56de\u6570\u3048\u308b\n  times = i * (N - i)\n  xsum += ((edge % DIV) * (times % DIV)) % DIV\n  xsum %= DIV\n\nysum = 0\nfor i in range(1, len(Y)):\n  # i\u756a\u76ee\u306e\u8fba\u306f\u3001\u9577\u3055Y[i] - Y[i - 1]\n  edge = Y[i] - Y[i - 1]\n  # i\u756a\u76ee\u306e\u8fba\u306f((i - 1) + 1) * (M - i)\u56de\u6570\u3048\u308b\n  times = i * (M - i)\n  ysum += ((edge % DIV) * (times % DIV)) % DIV\n  ysum %= DIV\n\nprint((xsum * ysum) % DIV)", "import sys\nreadline = sys.stdin.readline\n\nN,M = map(int,readline().split())\nX = list(map(int,readline().split()))\nY = list(map(int,readline().split()))\nDIV = 10 ** 9 + 7\n\ndef f(V):\n  vsum = 0\n  for i in range(1, len(V)):\n    vsum += (((V[i] - V[i - 1]) % DIV) * ((i * (len(V) - i)) % DIV)) % DIV\n    vsum %= DIV\n  return vsum\n  \nprint((f(X) * f(Y)) % DIV)", "n,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\n# \u30d6\u30ed\u30c3\u30af\u306e\u6570\u306f(m-1)*(n-1)\nmod=pow(10,9)+7\nypoint=0\nfor i in range(m-1):\n  ypoint+=(y[i+1]-y[i])*(m-i-1)*(i+1)\n  ypoint%=mod\nans=0\nfor i in range(n-1):\n  ans+=ypoint*(x[i+1]-x[i])*(n-i-1)*(i+1)\n  ans%=mod\nprint(ans)", "import sys\n\ninput = sys.stdin.readline\n\n\ndef read_values():\n    return list(map(int, input().split()))\n\n\ndef read_list():\n    return list(read_values())\n\n\ndef func(N, mod):\n    F = [1]\n    for i in range(1, N + 1):\n        F.append(F[-1] * i % mod)\n    return F\n\n\nINV = {}\n\n\ndef inv(a, mod):\n    if a in INV:\n        return INV[a]\n    r = pow(a, mod - 2, mod)\n    INV[a] = r\n    return r\n\n\ndef C(F, a, b, mod):\n    return F[a] * inv(F[b], mod) * inv(F[a - b], mod) % mod\n\n\ndef main():\n    mod = 10 ** 9 + 7\n    N, M = read_values()\n    X = read_list()\n    Y = read_list()\n\n    res_x = 0\n    for i in range(N - 1):\n        res_x += (i + 1) * (N - i - 1) * (X[i + 1] - X[i]) % mod\n        res_x %= mod\n\n    res_y = 0\n    for i in range(M - 1):\n        res_y += (i + 1) * (M - i - 1) * (Y[i + 1] - Y[i]) % mod\n        res_y %= mod\n    print((res_x * res_y % mod))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "mod=1000000007\nn,m=list(map(int,input().split()))\nx=[int(i) for i in input().split()]\ny=[int(i) for i in input().split()]\n\nxc=0\nfor i in range(1,n):\n    a=x[i]-x[i-1]\n    if i<=((n)//2):\n        l=i\n    else:\n        l=n-i\n    xc+=a*(l*n-(l*l))\n    xc=xc%mod\n\nyc=0\nfor i in range(1,m):\n    a=y[i]-y[i-1]\n    if i<=((m)//2):\n        l=i\n    else:\n        l=m-i\n    yc+=a*(l*m-(l*l))\n    yc=yc%mod\nprint(((xc*yc)%mod))\n", "def calc(x):\n    ans = 0\n    n = len(x)\n    for i,a in enumerate(x):\n        ans += i*a - (n-1-i)*a\n    return ans\n\n\nn,m = map(int,input().split())\nx = tuple(map(int,input().split()))\ny = tuple(map(int,input().split()))\n\nprint(calc(x)*calc(y)%(int(1e9+7)))", "mod=10**9+7\nh=w=0\nn,m=list(map(int,input().split()))\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nfor i in range(n-1):\n\th=(h+(x[i+1]-x[i])*(n-i-1)*(i+1))%mod\nfor i in range(m-1):\n\tw=(w+(y[i+1]-y[i])*(m-i-1)*(i+1))%mod\nprint((h*w%mod))\n", "n,m=map(int,input().split())\nx=list(map(int,input().split()))\ny=list(map(int,input().split()))\nsumx,sumy=0,0\nmod=10**9+7\nfor i in range(n):\n    sumx+=i*x[i]-(n-i-1)*x[i]\nsumx%=mod\nfor i in range(m):\n    sumy+=i*y[i]-(m-i-1)*y[i]\nsumy%=mod\nprint(sumx*sumy%mod)", "mod = 10 ** 9 + 7\n\nn, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nsum_x = 0\nfor i in range(1, n + 1):\n    sum_x += (i - 1) * x[i - 1] - (n - i) * x[i - 1]\n\nsum_y = 0\nfor i in range(1, m + 1):\n    sum_y += (i - 1) * y[i - 1] - (m - i) * y[i - 1]\n\nprint((sum_x * sum_y % mod))\n", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\nxsm = 0\nfor i, ex in enumerate(x, 1):\n    xsm -= ex * (n - i)\n    xsm += ex * (i - 1)\n    xsm %= mod\n\nysm = 0\nfor i, ey in enumerate(y, 1):\n    ysm -= ey * (m - i)\n    ysm += ey * (i - 1)\n    ysm %= mod\n\nans = xsm * ysm % mod\nprint(ans)\n", "MOD=10**9+7\nn,m=map(int,input().split())\nxlist=list(map(int,input().split()))\nylist=list(map(int,input().split()))\n\nx0,y0=xlist[0],ylist[0]\nfor i in range(n):\n  xlist[i]-=x0\nfor i in range(m):\n  ylist[i]-=y0\n#print(xlist)\n#print(ylist)\n\nxsum=0\nfor i in range(1,n):\n  xsum+=xlist[i]*i\n  xsum-=xlist[i]*(n-i-1)\n  xsum%=MOD\n\nysum=0\nfor i in range(1,m):\n  ysum+=ylist[i]*i\n  ysum-=ylist[i]*(m-i-1)\n  ysum%=MOD\n  \nprint((xsum*ysum)%MOD)", "n,m = map(int,input().split())\nx = list(map(int,input().split()))\ny = list(map(int,input().split()))\nMOD = 10**9 + 7\nans = 0\ntemp1 = 0\ntemp2 = 0\nfor i in range(n):\n    temp1 += i*x[i] -(n-(i+1))*x[i]\n    temp1 %= MOD\n\nfor i in range(m):\n    temp2 += i*y[i] -(m-(i+1))*y[i]\n    temp2 %= MOD\n\nans = temp1*temp2\nans %= MOD\nprint(ans)", "#!/usr/bin/env python3\nimport sys\n\nMOD = 1000000007  # type: int\n\n\ndef solve(n: int, m: int, x: \"List[int]\", y: \"List[int]\"):\n    X = 0\n    for k in range(1,n+1):\n        X += (k-1)*x[k-1]-(n-k)*x[k-1]\n        X %= MOD\n    Y = 0\n    for k in range(1,m+1):\n        Y += (k-1)*y[k-1]-(m-k)*y[k-1]\n        Y %= MOD\n    print((X*Y%MOD))\n\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    n = int(next(tokens))  # type: int\n    m = int(next(tokens))  # type: int\n    x = [int(next(tokens)) for _ in range(n)]  # type: \"List[int]\"\n    y = [int(next(tokens)) for _ in range(m)]  # type: \"List[int]\"\n    solve(n, m, x, y)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = map(int, input().split())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nmod = 10 ** 9 + 7\nw = 0\nfor i in range(n-1):\n    w += (x[i+1] - x[i]) * (i+1) * (n-i-1)\n    w %= mod\nh = 0\nfor j in range(m-1):\n    h += (y[j+1] - y[j]) * (j+1) * (m-j-1)\n    h %= mod\nprint(h * w % mod)", "import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\n# INF = float(\"inf\")\n\n\ndef f(l):\n    ret = 0\n    for k in range(len(l)):\n        ret += (2 * (k + 1) - len(l) - 1) * l[k]\n    return ret % MOD\n\n\ndef main():\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    ans = f(x) * f(y) % MOD\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 10**9+7 #\u51fa\u529b\u306e\u5236\u9650\nN = 10**4\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod//i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\nn,m = list(map(int,input().split()))\n\nX = [0] + sorted(list(map(int,input().split())))\nY = [0] + sorted(list(map(int,input().split())))\nsum1 = 0\nsum2 = 0\nMOD = 10 ** 9 + 7\nfor i in range(1, n + 1):\n    sum1 += ((i - 1)*X[i] - (n - i)*X[i]) % MOD\nfor i in range(1, m + 1):\n    sum2 += ((i - 1)*Y[i] - (m - i)*Y[i])%MOD\nprint((sum1 * sum2 % MOD))\n", "def main():\n    MOD = 10 ** 9 + 7\n\n    N, M = list(map(int, input().split()))\n    *x, = list(map(int, input().split()))\n    *y, = list(map(int, input().split()))\n\n    sx = 0\n    for i, x_ in enumerate(x, 1):\n        sx = (sx + x_ * ((i - 1) - (N - i))) % MOD\n\n    sy = 0\n    for i, y_ in enumerate(y, 1):\n        sy = (sy + y_ * ((i - 1) - (M - i))) % MOD\n\n    ans = sx * sy % MOD\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n# \u3042\u308b\u77e9\u5f62\u306e\u9762\u7a4d\u306f\n# (x1-x0)(y1-y0)\n# x,y\u306e\u5404\u8981\u7d20\u306fx1,x0,y1,y0\u3068\u3057\u3066\u4f55\u56de\u51fa\u73fe\u3059\u308b\u304b?\n# 1-indexed\u3067\u3001i\u756a\u76ee\u306e\u8981\u7d20\u304c\n# x1\u3068\u3057\u3066\u6570\u3048\u3089\u308c\u308b\u306e\u306f,\n# \u76f8\u65b9\u306ex0\u306e\u5019\u88dc\u6570 = 1-indexed\u306ex0\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 = i-1\n# x0\u3068\u3057\u3066\u6570\u3048\u3089\u308c\u308b\u306e\u306f\u3001\n# \u76f8\u65b9\u306ex1\u306e\u5019\u88dc\u6570 = 1-indexed\u306eN-x0\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 = N-i\n\n__starting_point()", "N,M = list(map(int, input().split()))\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\n\n## 0,x1,x2,x3\n## S = (x1 + x2 + x3 + (x2-x1) + (x3-x1) + (x3-x2)) * ...\n##.  = (3*x3 + x2 - x1 - 3* 0)\n##.  = ((3-0) + (2-1) + (1-2) + (0-3)\nmod = int(1e9+7)\nX.sort(reverse=True)\nY.sort(reverse=True)\nXP,YP = 0,0\nfor i in range(N):\n  XP += (N-1-i*2) * X[i] \n  XP %= mod\nfor i in range(M):\n  YP += (M-1-i*2) * Y[i] \n  YP %= mod\n  \nprint(((XP * YP)%mod))\n", "n, m = map(int, input().split())\nX = list(map(int, input().split()))\nY = list(map(int, input().split()))\n\nmod = 10**9+7\n\nSX = 0\nfor i in range(n):\n    SX += i*X[i] - (n-1-i)*X[i]\nSX %= mod\n\nSY = 0\nfor i in range(m):\n    SY += i*Y[i] - (m-1-i)*Y[i]\nSY %= mod\n\nans = SX*SY\nprint(ans%mod)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, m = list(map(int, input().split()))\n    X = list(map(int, input().split()))\n    Y = list(map(int, input().split()))\n\n    XL = [X[i] - X[i - 1] for i in range(1, n)]\n    YL = [Y[i] - Y[i - 1] for i in range(1, m)]\n\n    cnt_X = [(i * (n - i)) % mod for i in range(1, n)]\n    cnt_Y = [(i * (m - i)) % mod for i in range(1, m)]\n    total_X = (sum([(XL[i] * cnt_X[i]) % mod for i in range(n - 1)])) % mod\n    total_Y = (sum([(YL[i] * cnt_Y[i]) % mod for i in range(m - 1)])) % mod\n    res = (total_X * total_Y) % mod\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nX = sum([(2*(k+1) - n - 1) * x[k] for k in range(n)])\nY = sum([(2*(k+1) - m - 1) * y[k] for k in range(m)])\n\nprint((X * Y % (10**9+7)))\n", "MOD=10**9+7\nn,m=map(int,input().split())\nxs=list(map(int,input().split()))\nys=list(map(int,input().split()))\nx=0\nfor i in range(n):\n  x+=(2*(i+1)-n-1)*xs[i]\n  x%=MOD\n\ny=0\nfor j in range(m):\n  y+=(2*(j+1)-m-1)*ys[j]\n  y%=MOD\n\nprint(x*y%MOD)", "n, m = list(map(int, input().split()))\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nmod = 10 ** 9 + 7\n\nsx = 0\nsy = 0\nfor i in range(n):\n    sx = (sx + x[i] * i - x[i] * (n - 1 - i)) % mod\nfor i in range(m):\n    sy = (sy + y[i] * i - y[i] * (m - 1 - i)) % mod\nprint((sx * sy % mod))\n"]