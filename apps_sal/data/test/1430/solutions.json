["# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(N, K, S):\n    S = [int(s) for s in S]\n    point_l = 0\n    point_r = 0\n    # decision r\n    num_0 = 0 if S[0] == 1 else 1\n    flg = S[0]\n    for i in range(N):\n        if S[i] != flg:\n            if flg == 1:\n                num_0 += 1\n                if num_0 > K:\n                    point_r = i - 1\n                    break\n            flg = S[i]\n        if i == N - 1:\n            point_r = i\n            break\n    # measuring method\n    ans = point_r - point_l + 1\n    while point_r < N - 1:\n        # move point_l\n        for i in range(0, N):\n            if S[point_l + i] != S[point_l + i + 1]:\n                if S[point_l + i + 1] == 1:\n                    point_l += i + 1\n                    break\n        # move point_r\n        for i in range(1, N):\n            if point_r + i == N - 1:\n                point_r = N - 1\n                break\n            if S[point_r + i] != S[point_r + i + 1]:\n                if S[point_r + i + 1] == 0:\n                    point_r += i\n                    break\n        ans = max(ans, point_r - point_l + 1)\n\n    print(ans)\n\n\ndef __starting_point():\n    N, K = list(map(int, input().split()))\n    S = input()\n    solve(N, K, S)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n\n__starting_point()", "n,k = map(int,input().split())\ns = input()\nI  = [0]\nfor i in range(1,n):\n    if s[i-1] != s[i]:\n        I.append(i)\nI.append(n)\nr = len(I)-1\nX = []\nfor i in range(r):\n    if s[I[i]] == \"0\":\n        X.append(I[min(2*k+i,r)]-I[i])\n    else:\n        X.append(I[min(2*k+1+i,r)]-I[i])\nprint(max(X))", "\"\"\"\nkeyword: \u5c3a\u53d6\u6cd5\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nn, k = map(int, input().split())\ns = input()\n\nnums = []\nnow = 1 # \u4eca\u898b\u3066\u3044\u308b\u6570\ncnt = 0 # now\u304c\u3044\u304f\u3064\u4e26\u3093\u3067\u3044\u308b\u304b\n\nfor i in range(n):\n    if s[i] == str(now):\n        cnt += 1\n    else:\n        nums.append(cnt)\n        now ^= 1 # 0\u30681\u3092\u5207\u308a\u66ff\u3048\u308b\n        cnt = 1 # \u65b0\u3057\u3044\u306e\u3092\u30ab\u30a6\u30f3\u30c8\nif cnt != 0:\n    nums.append(cnt)\n\n# 1-0-1-0-1-0-1\u3063\u3066\u611f\u3058\u306e\u914d\u5217\u304c\u6b32\u3057\u3044\n# 1-0-1-0\u307f\u305f\u3044\u306b0\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u9069\u5f53\u306b1\u3064\u8db3\u3059\n# \u88dc\u8db3\uff1a1-0-1-0-1\u3068\u3044\u3046\u306e\u306f\u30011\u304c0\u500b\u30010\u304c2\u500b\u30011\u304c1\u500b\u3001\u3001\u3001\u306a\u3069\u3068\u4e26\u3093\u3067\u3044\u308b\u3068\u3044\u3046\u610f\u5473\u3002\u3053\u306e\u3068\u304d1\u3064\u76ee\u306e0\u3092\u3072\u3063\u304f\u308a\u8fd4\u3059\u30681-1-1\u3068\u9023\u7d9a\u3059\u308b\u30021-...-1\u3068\u9023\u7d9a\u3057\u3066\u3044\u308b\u6570\u304c\u6c42\u3081\u308b\u5024\u306a\u306e\u3067\u3001\u5de6\u7aef\u3068\u53f3\u7aef\u306f1\u306b\u3057\u305f\u3044\nif len(nums)%2 == 0:\n    nums.append(0)\n    \nadd = 2*k+1\n\nans = 0\nleft = 0\nright = 0\ntmp = 0 # [left, right)\u306esum\n\n# 1-0-1...\u306e\u30011\u304b\u3089\u59cb\u307e\u308a1\u3067\u7d42\u308f\u308b\u7bc4\u56f2\u3092\u898b\u308b\u306e\u3067\u3001\u5076\u6570\u756a\u76ee\u3060\u3051\u898b\u308b\nfor i in range(0, len(nums), 2):\n    \n    nextleft = i\n    nextright = min(i+add, len(nums))\n    \n    # \u5de6\u7aef\u3092\u79fb\u52d5\n    while (nextleft > left):\n        tmp -= nums[left]\n        left += 1\n    # \u53f3\u7aef\u3092\u79fb\u52d5\n    while (nextright > right):\n        tmp += nums[right]\n        right += 1\n        \n    ans = max(tmp, ans)\n    \nprint(ans)", "from collections import *\nn,k=map(int,input().split())\ns=input()\nq=deque()\ntt=0\nf=False\nt=0\nans=0\ntmp=0\nfor i in range(n):\n    if f:\n        if s[i]==\"0\":\n            tmp+=1\n            tt+=1\n            if tmp>ans:\n                ans=tmp\n        else:\n            q.append(tt)\n            f=False\n            tt=1\n            tmp+=1\n            if tmp>ans:\n                ans=tmp\n\n    elif f==False:\n        if s[i]==\"1\":\n            tmp+=1\n            tt+=1\n            if tmp>ans:\n                ans=tmp\n        else:\n            t+=1\n            f=True\n            if t>k:\n                d=q.popleft()\n                tmp-=d\n            tmp+=1\n            tt+=1\nprint(ans)", "#!/usr/bin/env python3\nimport sys\n\ndef f(S):\n    c, n = S[0], 1\n    for cc in S[1:]:\n        if c == cc:\n            n += 1\n        else:\n            yield c, n\n            c, n = cc, 1\n    yield c, n\n\ndef solve(N: int, K: int, S: str):\n    from itertools import zip_longest\n    A = list(f(S))\n    M = len(A)\n    i, j, k, su, ans = 0, 0, 0, 0, 0\n    while i < M:\n        while j < M and (k < K or A[j][0] == \"1\"):\n            su += A[j][1]\n            k += 1 if A[j][0] == \"0\" else 0\n            j += 1\n        ans = max(ans, su)        \n        su -= A[i][1]\n        k -= 1 if A[i][0] == \"0\" else 0\n        i += 1        \n    return ans\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    S = next(tokens)  # type: str\n    print((solve(N, K, S)))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\ndef __starting_point():\n    #test()\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\ns = input()\nls = []\n\nnow = 1\ncnt = 0\nfor ele in s:\n    if int(ele) == now:\n        cnt += 1\n    else:\n        ls.append(cnt)\n        now = 1 - now #1\u30680\u306e\u5207\u66ff\n        cnt = 1\nls.append(cnt)\n\n# 1-0-1-0-1\u304c\u6b32\u3057\u3044\n# 1-0-1-0\u306e\u5834\u5408\u30011\u306e\u5834\u5408\u3092\u8db3\u3059\nif len(ls) % 2 == 0:\n    ls.append(0)\n\nAdd = 2*k+1 #[left, right)\nans = 0\n\nleft = 0\nright = 0\ntmp = 0 # [left, right)\u306esum\n\n# print(ls)\n# 1-0-1-0..\u306e\uff11\u304b\u3089\u59cb\u3081\u308b\nfor i in range(0,len(ls),2):\n    nextLeft = i\n    nextRight = min(i + Add, len(ls))\n    # print(\" value\", tmp)\n    # print(\" p left \", left)\n    # print(\" p right\", right)\n\n    while nextLeft > left:\n        # print(\"left  point, value\", left, tmp)\n        tmp -= ls[left]\n        left += 1\n    while nextRight > right:\n        # print(\"right point, value\", right, tmp)\n        tmp += ls[right]\n        right += 1\n\n    ans = max(tmp, ans)\n    # print(\"ans\",ans)\n    # print(\"\\n\")\n\nprint(ans)", "N,K=map(int,input().split())\nS=input()\nA=[]\nnow=S[0]\nif now=='0':\n    A.append(0)\nC=1\nfor s in S[1:]:\n    if s==now:\n        C+=1\n    else:\n        A.append(C)\n        now=s\n        C=1\nA.append(C)\nif now=='0':\n    A.append(0)\nB=[sum(A[:2*K+1])]\ni=0\nwhile 2*(i+K+1)<len(A):\n    b=B[i]-(A[2*i]+A[2*i+1])+(A[2*(i+K+1)]+A[2*(i+K)+1])\n    B.append(b)\n    i+=1\nprint(max(B))", "N,K=map(int,input().split())\nS=[int(i) for i in input()]\nans,r,l,k=0,0,0,K\nwhile r<N:\n  while k>0:\n    while l<N and S[l]==1:\n      l+=1\n    while l<N and S[l]==0:\n      l+=1\n    k-=1\n  while l<N and S[l]==1:\n    l+=1\n  ans=max(ans,l-r)\n  while r<N and S[r]==1:\n    r+=1\n  while r<N and S[r]==0:\n    r+=1\n  k=1\nprint(ans)", "def main():\n\tN, K = [int(x) for x in input().split(\" \")]\n\tS = list(input())\n\tcnt = [0] # idx = 0, 2, 4 ... -> handstand\n\ta = 0\n\tfor i in range(len(S)):\n\t\tif S[i] == \"0\":\n\t\t\tif a % 2 == 0:\n\t\t\t\ta += 1\n\t\t\t\tcnt.append(1)\n\t\t\telse:\n\t\t\t\tcnt[-1] += 1\n\t\telif S[i] == \"1\":\n\t\t\tif a % 2 == 0:\n\t\t\t\tcnt[-1] += 1\n\t\t\telse:\n\t\t\t\ta += 1\n\t\t\t\tcnt.append(1)\n\tif S[-1] == \"0\":\n\t\tcnt.append(0)\n\n\tif K >= (len(cnt) - 1) / 2:\n\t\tprint(N)\n\t\treturn 0\n\n\tT = [sum(cnt[:(2 * K + 1)])]\n\tfor i in range(0, len(cnt) - 2 * K - 2, 2):\n\t\tT.append(T[-1] - cnt[i] - cnt[i + 1] + cnt[i + 2 * K + 1] + cnt[i + 2 * K + 2])\n\tprint(max(T))\n\nmain()", "from itertools import *\nfrom numpy import *\nn,k = map(int,input().split())\nk = 2*k+1\ns = input()\nx = [0]*(s[0]==\"0\")+[len(list(v))for k,v in groupby(s)]+[0]*(s[-1]==\"0\")\nx1 = array(x[k:])\nx2 = array(x[:-k])\nx3 = sum(x[:k])\ny = [x3]+list(x3+cumsum(x1-x2))\nprint(max(y[::2]))", "N, K = list(map(int, input().split()))\nS = input()\n\n# 1\u306e\u500b\u6570, 0\u306e\u500b\u6570, 1\u306e\u500b\u6570, ..., 1\u306e\u500b\u6570\nlist10 = []\nhead = S[0]\ncnt = 0\n\n# \u5de6\u7aef\u306e1\u306e\u6570\nif S[0] == \"0\":\n    list10.append(0)\n\nfor i in range(N):\n    if S[i] == head:\n        cnt += 1\n    else:\n        list10.append(cnt)\n        cnt = 1\n        head = S[i]\n\n    if i == N - 1:\n        list10.append(cnt)\n\n# \u53f3\u7aef\u306e1\u306e\u6570\nif S[-1] == \"0\":\n    list10.append(0)\n\n# print(list10)\n\nans = 0\n\ncumsum = [0]\nfor li in list10:\n    cumsum.append(cumsum[-1] + li)\n# print(cumsum)\n\nfor j in range(1, len(cumsum), 2):\n    h = j\n    t = min(j + 2 * K, len(cumsum) - 1)\n    ans = max(ans, cumsum[t] - cumsum[max(h - 1, 0)])\nprint(ans)\n", "n,k=list(map(int, input().split()))\ns=input()\n\ndef rle(string):\n    _rle_str = string[0]\n    _rle_cnt = 1\n    _ans_l = []\n    for _i in range(1, len(string)):\n        if _rle_str == string[_i]:\n            _rle_cnt += 1\n        else:\n            _ans_l.append([_rle_str, _rle_cnt])\n            _rle_str = string[_i]\n            _rle_cnt = 1\n    _ans_l.append([_rle_str, _rle_cnt])\n    return _ans_l\n\nrle_s=rle(s)\n\nans=-1\n\nleft=0\nwa=0\n\nif rle_s[0][0]==\"0\":\n    cnt=1\n    wa=rle_s[0][1]\n    right=1\nelse:\n    cnt=0\n    right=0\n\nif len(rle_s)==1 and k>=1:\n    print((rle_s[0][1]))\n    return\n\nwhile right<len(rle_s):\n    # print(right, left, wa, cnt)\n    if cnt==k:\n        if rle_s[right][0]==\"0\":\n            if rle_s[left][0]==\"0\":\n                wa-=rle_s[left][1]\n                cnt-=1\n            else:\n                wa-=rle_s[left][1]\n            left+=1\n\n        else:\n            wa+=rle_s[right][1]\n            right+=1\n            ans=max(ans, wa)\n\n    elif cnt<k:\n        if rle_s[right][0]==\"0\":\n            cnt+=1\n            wa+=rle_s[right][1]\n        else:\n            wa+=rle_s[right][1]\n        right+=1\n        ans=max(ans, wa)\n\n    else:\n        if rle_s[left][0]==\"0\":\n            wa-=rle_s[left][1]\n            cnt-=1\n        else:\n            wa-=rle_s[left][1]\n        left+=1\n\nprint(ans)\n", "#!/usr/bin python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    N, K = map(int, input().split())\n    S = input()\n    A = []\n    if S[0]=='1':\n        nw = 1\n    else:\n        nw = -1\n    for i in range(1,N):\n        if S[i]=='1' and nw<0:\n            A.append(nw)\n            nw = 1\n        elif S[i]=='0' and nw>0:\n            A.append(nw)\n            nw = -1\n        else:\n            nw += 2*(S[i]=='1')-1\n    A.append(nw)\n    if len(A)==1:\n        print(N)\n        return\n    B = [0]*(len(A)+1)\n    for i in range(len(A)):\n        B[i+1] = B[i]+abs(A[i])\n    if A[0]<0:\n        fm = 0\n    else:\n        fm = 1\n    ret = 0\n    for i in range(fm, len(A), 2):\n        ret = max(ret, B[min(i+2*K,len(B)-1)]-B[max(i-1,0)])\n    print(ret)\n\ndef __starting_point():\n    main()\n__starting_point()", "n,k=map(int,input().split())\ns=[int(i) for i in input()]\nl1,l0=[],[]\nb,c=1,0\nfor i in s:\n  if b==i: c+=1\n  else:\n    if b: l1+=[c]\n    else: l0+=[c]\n    c=1\n  b=i\nif b:\n  l1+=[c]\n  l0+=[0]\nelse:\n  l0+=[c]\nS=[0]\nfor i,j in zip(l1,l0):\n  S+=[S[-1]+i+j]\nl1+=[0]\nm=len(S)\nif m<=k:\n  print(n)\n  return\na=0\nfor i in range(k,m):\n  a=max(a,S[i]-S[i-k]+l1[i])\nprint(a)", "n,k=map(int,input().split())\ns=input()\nl=[[\"1\",0]]\nfor i in s:\n    if l[-1][0]==i:\n        l[-1][1]+=1\n    else:\n        l.append([i,1])\nif l[-1][0]==\"0\":\n    l.append([\"1\",0])\ne=[0]\nfor i in range(len(l)):\n    e.append(e[i]+l[i][1])\nans=0 if k<len(l)//2 else e[-1]\nfor i in range(2*k-1,len(l),2):\n    ans=max(ans,e[i+2]-e[i-2*k+1])\nprint(ans)", "N,K=list(map(int,input().split()))\nS=input()\na=[0]\nfor i in range(1,N):\n  if S[i-1]!=S[i]:\n    a.append(i)\na.append(N)\nl=len(a)\nans=[]\nfor i in range(l-1):\n  if S[a[i]]=='0':\n    ans.append(a[min(i+2*K,l-1)]-a[i])\n  else:\n    ans.append(a[min(i+2*K+1,l-1)]-a[i])\nprint((max(ans)))\n", "N,K=map(int,input().split())\nS=input()\n\nif N==1:\n  print(1)\n  return\n\nS2=[]\nsigns=[]\nif S[0]=='1':\n  sign=1\nelse:\n  sign=0\ncount = 1\nfor i in range(1,N):\n  if S[i] != S[i-1]:\n    S2.append(count)\n    signs.append(sign)\n    sign = 1- sign\n    count = 0\n  count += 1\n  \nS2.append(count)\nsigns.append(sign)\n  \ncumS = [0]\nfor i in range(len(S2)):\n  cumS.append(cumS[-1]+S2[i])\n  \nk = K*2+1\nif len(S2)>=k:\n  MAX=0\n  for i in range(len(S2)-k+1):\n    if signs[i] == 1:\n      tmp = cumS[i+k]-cumS[i]\n      if tmp > MAX:\n        MAX = tmp\n  \n  if signs[0]==0:\n    MAX = max(MAX,cumS[k-1]-cumS[0])\n  if signs[-1]==0:\n    MAX = max(MAX,cumS[-1]-cumS[-k])\n    \nelse:\n  MAX=cumS[-1]\n  \nprint(MAX)", "N, K = map(int, input().split())\nS = input()\n\narr = []\n\nif S[0] == '0':\n    arr.append(0)\n\ncnt = 0\nfor i in range(N - 1):\n    if S[i] == S[i + 1]:\n        cnt += 1\n    else:\n        arr.append(cnt + 1)\n        cnt = 0\narr.append(cnt + 1)\n\nif S[-1] == '0':\n    arr.append(0)\n\nres = 0\ns = 0\ni = 0\nwhile i < 2 * K + 1 and i < len(arr):\n    s += arr[i]\n    i += 1\n\nres = s\n\nwhile i < len(arr) - 1:\n    s += arr[i] + arr[i + 1] - arr[i - 2 * K - 1] - arr[i - 2 * K]\n    res = max(s, res)\n\n    i += 2\n\nprint(res)", "N, K = map(int, input().split())\ns = str(input())\n  \nl = []\ntmp, cnt = s[0], 1\nfor i in range(1, N):\n  if s[i] == tmp:\n    cnt += 1\n  else:\n    tmp = s[i]\n    l.append(cnt)\n    cnt = 1\nl.append(cnt)\n\nstart, goal = 0, len(l)\nif s[0] == '0':\n  start += 1\nif s[-1] == '0':\n  goal -= 1\n  \nans = sum(l[start:start+2*K+1])\ntmp = ans\nfor i in range(start, goal-2*K-2, 2):\n  tmp += l[i+2*K+1]+l[i+2*K+2]-l[i]-l[i+1]\n  ans = max(ans, tmp)\nif ans < sum(l[:2*K]):\n  ans = sum(l[:2*K])\nif ans < sum(l[-2*K:]):\n  ans = sum(l[-2*K:])\nprint(ans)", "n, k = map(int, input().split())\nS = list(input())\n\nif \"0\" not in S:\n    print(n)\n    return\n\n# 1\u306e\u500b\u6570\u30010\u306e\u500b\u6570\u30011\u306e\u500b\u6570\u3001\u3001\u3001\ncnt = []\n\n# \u5148\u982d\u304c0\u306a\u30891\u304c0\u500b\u3068\u307f\u306a\u3059\nif S[0] == \"0\":\n    cnt.append(0)\n\n# \u500b\u6570\u52d8\u5b9a\ni = 0\nwhile i < n:\n    j = i\n    while j < n and S[i] == S[j]:\n        j += 1\n    cnt.append(j-i)\n    i = j\n\n# \u6700\u5f8c\u5c3e\u304c0\u306a\u30891\u304c0\u500b\u3068\u307f\u306a\u3059\nif S[-1] == \"0\":\n    cnt.append(0)\n\n# cnt \u306e\u7d2f\u7a4d\u548c\ncumCnt = [0]\nfor c in cnt:\n    cumCnt.append(cumCnt[-1] + c)\n\n# print(cnt)\n# print(cumCnt)\n\nlenCnt = len(cnt)\nlenCumCnt = len(cumCnt)\nans = 0\n\nfor left in range(0, lenCumCnt, 2):\n    right = min(left + 2*k+1, lenCumCnt-1)\n    ans = max(ans, cumCnt[right] - cumCnt[left])\nprint(ans)", "n, k = map(int, input().split())\ns = input()\n\nnums = []\nif s[0] == '0':\n    nums.append(0)\ni = 0\nwhile i < n:\n    j = i\n    while j < n and s[j] == s[i]:\n        j += 1\n    nums.append(j-i)\n    i = j\nif s[-1] == '0':\n    nums.append(0)\n\nsums = [0]\nfor i in range(len(nums)):\n    sums.append(sums[-1]+nums[i])\n\nres = 0\nfor left in range(0, len(sums), 2):\n    right = left + k*2+1\n    if right >= len(sums):\n        right = len(sums) - 1\n    res = max(res, sums[right]-sums[left])\nprint(res)", "N,K = list(map(int,input().split()))\nS = input()\n\nbeforeChar = S[0]\nsectionList = []\ncount = 0\nfor i in range(N):\n    if S[i] == beforeChar:\n        count += 1\n    else:\n        sectionList.append([beforeChar, count])\n        count = 1\n        beforeChar = S[i]\nsectionList.append([beforeChar, count])\n\nsectionNumber = len(sectionList)\nzeroSectionNumber = 0\noneSectionNumber = 0\nif sectionNumber % 2 == 0:\n    zeroSectionNumber = sectionNumber // 2\n    oneSectionNumber = sectionNumber // 2\nelse:\n    if sectionList[0][0] == '0':\n        zeroSectionNumber = sectionNumber // 2 + 1\n        oneSectionNumber = sectionNumber // 2\n    else:\n        zeroSectionNumber = sectionNumber // 2\n        oneSectionNumber = sectionNumber // 2 + 1\n\nif zeroSectionNumber <= K:\n    print(N)\n    return\n\nsumLengthList = []\nsumLength = 0\nfor i in range(sectionNumber):\n    sumLength += sectionList[i][1]\n    sumLengthList.append(sumLength)\n\ndef sumLengthByRange(rangeStartSection, rangeEndSection):\n    if rangeStartSection == 0:\n        return sumLengthList[rangeEndSection]\n    else:\n        return sumLengthList[rangeEndSection] - sumLengthList[rangeStartSection - 1]\n\nstartSection = 0\nendSection = 0\nlengthList = []\nif sectionList[0][0] == '1':\n    endSection = K * 2\nelse:\n    endSection = K * 2 - 1\n    lengthList.append(sumLengthByRange(startSection, endSection))\n    startSection = 1\n    endSection += 2\nwhile endSection < sectionNumber:\n    lengthList.append(sumLengthByRange(startSection, endSection))\n    startSection += 2\n    endSection += 2\nif sectionList[-1][0] == '0':\n    endSection -= 1\n    lengthList.append(sumLengthByRange(startSection, endSection))\n\nprint(max(lengthList))", "import sys\n\nicase=0\nif icase==0:\n    n,k=list(map(int,input().split()))\n    s=input()\n\nif n==1:\n    print((1))\n    return\n\nss=[]\nif s[0]==\"1\" and s[1]==\"1\":\n    zcnt=1\nelif s[0]==\"1\" and s[1]==\"0\":\n#    ss.append(1)\n    zcnt=1\nelif s[0]==\"0\" and s[1]==\"0\":\n    ss.append(0)\n    zcnt=1\nelif s[0]==\"0\" and s[1]==\"1\":\n    ss.append(0)\n#    ss.append(1)\n    zcnt=1\n\nfor i in range(1,n-1):\n    if s[i]==\"0\" and s[i-1]==\"0\":\n        zcnt+=1\n    elif s[i]==\"0\" and s[i-1]==\"1\":\n        ss.append(zcnt)\n        zcnt=1\n    elif s[i]==\"1\" and s[i-1]==\"1\":\n        zcnt+=1\n    elif s[i]==\"1\" and s[i-1]==\"0\":\n        ss.append(zcnt)\n        zcnt=1\n        \nfor i in range(n-1,n):\n    if s[i]==\"0\" and s[i-1]==\"0\":\n        zcnt+=1\n        ss.append(zcnt)\n        ss.append(0)\n    elif s[i]==\"0\" and s[i-1]==\"1\":\n        ss.append(zcnt)\n        ss.append(1)\n        ss.append(0)\n    elif s[i]==\"1\" and s[i-1]==\"1\":\n        zcnt+=1\n        ss.append(zcnt)\n    elif s[i]==\"1\" and s[i-1]==\"0\":\n        ss.append(zcnt)\n        ss.append(1)\n\n#print(ss)\n\nif len(ss)<=2*k+1:\n    print(n)\n    return\n\nsmax=0\nfor i in range(2*k+1):\n    smax+=ss[i]\n#print(smax)    \nssum=smax    \nkk=2*k\nfor i in range(2,len(ss)-kk,2):\n    ssum=ssum-ss[i-2]-ss[i-1]+ss[i+kk-1]+ss[i+kk]\n    smax=max(smax,ssum)\n\nprint(smax)\n", "def rle(string):\n    _rle_str = string[0]\n    _rle_cnt = 1\n    _ans_l = []\n    for _i in range(1, len(string)):\n        if _rle_str == string[_i]:\n            _rle_cnt += 1\n        else:\n            _ans_l.append([_rle_str, _rle_cnt])\n            _rle_str = string[_i]\n            _rle_cnt = 1\n    _ans_l.append([_rle_str, _rle_cnt])\n    return _ans_l\n\nn,k=list(map(int, input().split()))\ns=input()\n\nrs=rle(s)\n\nif rs[0][0]==\"0\":\n    cnt=1\n    wa=rs[0][1]\n    r=1\n    l=0\nelse:\n    cnt=0\n    wa=0\n    r=0\n    l=0\n\nans=-1\n\nif len(rs)==1:\n    print((rs[0][1]))\n    return\n\nwhile r<len(rs):\n    if cnt==k and rs[r][0]==\"0\":\n        if rs[l][0]==\"0\":\n            wa-=rs[l][1]\n            cnt-=1\n        else:\n            wa-=rs[l][1]\n        l+=1\n\n    elif cnt<=k:\n        if rs[r][0]==\"0\":\n            cnt+=1\n            wa+=rs[r][1]\n        else:\n            wa+=rs[r][1]\n        r+=1\n        ans=max(ans, wa)\n\n    else:\n        if rs[l][0]==\"0\":\n            wa-=rs[l][1]\n            cnt-=1\n        else:\n            wa-=rs[l][1]\n        l+=1\n\nprint(ans)\n", "#!/usr/bin/env python3\nfrom collections import deque, Counter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_right\nfrom itertools import accumulate\n\ndef main():\n    N, K = list(map(int, input().split()))\n    S = input()\n    nums = []\n    # 1\u306e\u500b\u6570\u30010\u306e\u500b\u6570\u3092\u4ea4\u4e92\u306b\u8a18\u9332\u3057\u3066\u3044\u304f\n    if S[0] == '0': nums.append(0)\n    i = 0\n    while i < N:\n        j = i\n        while j < N and S[i]==S[j]:\n            j += 1\n        nums.append(j-i)\n        i = j\n    if S[-1] == '0': nums.append(0)\n    # print(nums)\n    nums = [0] + list(accumulate(nums))\n    # print(nums)\n    ans = 0\n    \n    for i in range(0,len(nums),2):\n        # print(i)\n        ans = max(ans,nums[min(i+2*K+1,len(nums)-1)]-nums[i])\n    print(ans)\n        \n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\ns = input()\n\nnum = []\ntemp = 0\ncount = 0\nflag = True\nwhile temp < len(s):\n    if flag == True:\n        if s[temp] == \"1\":\n            count += 1\n            temp += 1\n        else:\n            num.append(count)\n            count = 1\n            temp += 1\n            flag = False\n    else:\n        if s[temp] == \"0\":\n            count += 1\n            temp += 1\n        else:\n            num.append(count)\n            count = 1\n            temp += 1\n            flag = True\nnum.append(count)\nnum2 = [sum(num[:min(2 * k + 1, len(num))])]\ntemp = min(2 * k + 1, len(num))\ntemp2 = 0\nwhile temp < len(num):\n    temp3 = num2[-1] - num[temp2] - num[temp2 + 1] + num[temp]\n    if temp + 1 < len(num):\n        temp3 += num[temp + 1]\n    temp += 2\n    temp2 += 2\n    num2.append(temp3)\nprint(max(num2))", "#create date: 2020-07-03 22:02\n\nimport sys\nstdin = sys.stdin\nfrom itertools import groupby, accumulate\n\ndef ns(): return stdin.readline().rstrip()\ndef ni(): return int(ns())\ndef na(): return list(map(int, stdin.readline().split()))\n\ndef main():\n    n, k = na()\n    s = ns()\n    a = list()\n    if s[0] == \"0\":\n        a.append(0)\n    gr = groupby(s)\n    for key, group in gr:\n        a.append(len(list(group)))\n    if s[-1] == \"0\":\n        a.append(0)\n    acum = list(accumulate(a))\n    m = len(acum)\n    l = 2*k + 1\n    if m == 1:\n        print(acum[0])\n        return\n    if l > m:\n        print(acum[-1])\n        return\n    ans = acum[l-1]\n    for i in range(0, m-l+1, 2):\n        ans = max(ans, acum[i+l-1] - acum[i-1])\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "N,K = map(int,input().split())\ns = input()\nls = []\ni = 0\nc = 0\nwhile i < N and s[i] == \"1\":\n    c += 1\n    i += 1\nif i==N:\n    print(N)\n    return\nwhile i < N:\n    l = c\n    c = 0\n    while i < N and s[i] == \"0\":\n        c += 1\n        i += 1\n    m = c\n    c = 0\n    while i < N and s[i] == \"1\":\n        c += 1\n        i += 1\n    r = c\n    ls.append((l,m,r))\nK = min(K, len(ls))\nfrom itertools import accumulate\nacc = list(accumulate([0]+ls, lambda x,y:x+y[1]+y[2]))\nans = 0\nfor i in range(len(ls)-K+1):\n    ans = max(ans, acc[i+K]-acc[i]+ls[i][0])\nprint(ans)", "N,K=map(int,input().split())\nS=input()\nA=[]\nnow=S[0]\nif now=='0':\n    A.append(0)\nC=1\nfor s in S[1:]:\n    if s==now:\n        C+=1\n    else:\n        A.append(C)\n        now=s\n        C=1\nA.append(C)\nif now=='0':\n    A.append(0)\nB=[sum(A[:2*K+1])]\ni=0\nj=2*(K+1)\nwhile j<len(A):\n    b=B[-1]+sum(A[j-1:j+1])-sum(A[i:i+2])\n    B.append(b)\n    i+=2\n    j+=2\nprint(max(B))", "def main():\n    n,k = list(map(int,input().split()))\n    s = input()\n    L = []\n    if s[0]=='0':\n        z=1\n        l=0\n    else:\n        z=0\n    for i in range(n):\n        if s[i]=='0' and z==0:\n            l = i\n            z = 1\n        elif s[i]=='1' and z==1:\n            L.append([l,i-1])\n            z=0\n    if z==1:\n        L.append([l,n-1])\n    ans=0\n    if len(L)<=k:\n        ans=n\n    else:\n        l=0\n        r=L[k][0]-1\n        if r-l+1>ans:\n            ans=r-l+1\n        for i in range(1,len(L)-k):\n            l=L[i-1][1]+1\n            r=L[i+k][0]-1\n            if r-l+1>ans:\n                ans=r-l+1\n        l=L[-k-1][1]+1\n        r=n-1\n        if r-l+1>ans:\n            ans=r-l+1\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N, K = LI()\n    S = SS()\n\n    # 1\u306e\u584a\u306e\u9577\u3055\u3068\u4f4d\u7f6e\u3092\u8abf\u3079\u308b\n    l = []\n    if S[0] == '1':\n        l.append(0)\n    # \u5148\u7aef0\u306e\u5834\u5408\u3001\u4e00\u756a\u5de6\u306b\u9577\u30550\u306e1\u306e\u584a\u304c\u3042\u308b\u3068\u3059\u308b\n    else:\n        l.append(0)\n        l.append(0)\n    for i in range(N - 1):\n        if S[i] == '0' and S[i+1] == '1':\n            l.append(i + 1)\n        elif S[i] == '1' and S[i+1] == '0':\n            l.append(i + 1)\n    if S[-1] == '1':\n        l.append(N)\n    # \u5f8c\u7aef0\u306e\u5834\u5408\u3001\u4e00\u756a\u53f3\u306b\u9577\u30550\u306e1\u306e\u584a\u304c\u3042\u308b\u3068\u3059\u308b\n    else:\n        l.append(N)\n        l.append(N)\n\n    ans = 0\n    # 0\u306e\u584a\u304cK\u500b\u4ee5\u4e0b\u306e\u5834\u5408\n    if len(l) // 2 - 1 < K:\n        ans = N\n    # 1\u306e\u584a\u3092K+1\u500b\u304f\u3063\u3064\u3051\u305f\u5834\u5408\u306e\u9577\u3055\u3092\u8abf\u3079\u308b\n    else:\n        for i in range(len(l) // 2 - K):\n            ans = max(l[2*i+2*K+1] - l[2*i], ans)\n\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "n,k=list(map(int,input().split()))\ns=input()\nd=[]\n\nif s[0] == \"0\":\n  zero=True\n  iti=False\nelse:\n  iti=True\n  zero=False\n\ncount=0\nfor i in range(0,len(s)):\n  if zero and s[i]==\"0\":\n    count+=1\n  elif zero and s[i]==\"1\":\n    d.append(count)\n    iti=True\n    zero=False\n    count=1\n  elif iti and s[i]==\"0\":\n    d.append(count)\n    zero=True\n    iti=False\n    count=1\n  elif iti and s[i]==\"1\":\n    count+=1\nd.append(count)\nd.append(0)\nimport itertools\nacum = list(itertools.accumulate([0]+d))\n#print(d)\n#print(acum)\nhantei=0\nans=0\nif s[0]==\"0\":\n  ks1=min(k*2,len(d))\n  ks2=min(k*2+1,len(d))\nelse:\n  ks1=min(k*2+1,len(d))\n  ks2=min(k*2,len(d))\n  \nfor i in range(0,len(d)-ks1+1,2):\n  ans=max(acum[i+(ks1)]-acum[i],ans)\nfor i in range(1,len(d)-ks2+1,2):\n  ans=max(acum[i+(ks2)]-acum[i],ans)\nprint(ans)\n", "N,K=map(int,input().split())\nS=input()\na=[0]\nfor i in range(1,N):\n  if S[i-1]!=S[i]:\n    a.append(i)\na.append(N)\nl=len(a)\nans=[]\nfor i in range(l-1):\n  if S[a[i]]=='0':\n    ans.append(a[min(i+2*K,l-1)]-a[i])\n  else:\n    ans.append(a[min(i+2*K+1,l-1)]-a[i])\nprint(max(ans))", "N, K = map(int, input().split())\nS = input()+\"2\"\nL = []\ncnt = 0\ntemp = int(S[0])\n\nfor x in S:\n  if temp == int(x):\n    cnt += 1\n  else:\n    L.append(cnt)\n    cnt = 1\n    temp = int(x)\n\nif S[0] == \"0\":\n  Lcs = [0, 0]\nelse:\n  Lcs = [0]\n\nfor x in L:\n  Lcs.append(Lcs[-1] + x)\n \nans = Lcs[1]\nN = len(Lcs)\ni = 2\n\nif i + 2*(K-1) > N-1:\n  print(Lcs[-1])\nelse:\n  while i + 2*(K-1) <= N-1:\n    if i + 2*(K-1) == N-1:\n      ans = max(ans, Lcs[i + 2*(K-1)]-Lcs[i-2])\n    else:\n      ans = max(ans, Lcs[i + 2*(K-1) +1]-Lcs[i-2])\n    i += 2\n  print(ans)", "\"\"\"\nkeyword: \u7d2f\u7a4d\u548c\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nn, k = map(int, input().split())\ns = input()\n\nnums = []\nnow = 1 # \u4eca\u898b\u3066\u3044\u308b\u6570\ncnt = 0 # now\u304c\u3044\u304f\u3064\u4e26\u3093\u3067\u3044\u308b\u304b\n\nfor i in range(n):\n    if s[i] == str(now):\n        cnt += 1\n    else:\n        nums.append(cnt)\n        now ^= 1 # 0\u30681\u3092\u5207\u308a\u66ff\u3048\u308b\n        cnt = 1 # \u65b0\u3057\u3044\u306e\u3092\u30ab\u30a6\u30f3\u30c8\nif cnt != 0:\n    nums.append(cnt)\n\n# 1-0-1-0-1-0-1\u3063\u3066\u611f\u3058\u306e\u914d\u5217\u304c\u6b32\u3057\u3044\n# 1-0-1-0\u307f\u305f\u3044\u306b0\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u9069\u5f53\u306b1\u3064\u8db3\u3059\n# \u88dc\u8db3\uff1a1-0-1-0-1\u3068\u3044\u3046\u306e\u306f\u30011\u304c0\u500b\u30010\u304c2\u500b\u30011\u304c1\u500b\u3001\u3001\u3001\u306a\u3069\u3068\u4e26\u3093\u3067\u3044\u308b\u3068\u3044\u3046\u610f\u5473\u3002\u3053\u306e\u3068\u304d1\u3064\u76ee\u306e0\u3092\u3072\u3063\u304f\u308a\u8fd4\u3059\u30681-1-1\u3068\u9023\u7d9a\u3059\u308b\u30021-...-1\u3068\u9023\u7d9a\u3057\u3066\u3044\u308b\u6570\u304c\u6c42\u3081\u308b\u5024\u306a\u306e\u3067\u3001\u5de6\u7aef\u3068\u53f3\u7aef\u306f1\u306b\u3057\u305f\u3044\nif len(nums)%2 == 0:\n    nums.append(0)\n    \nadd = 2*k+1\n\n# \u7d2f\u7a4d\u548c\u3092\u4f5c\u308b\ntot = [0]*(len(nums)+1)\nfor i in range(len(nums)):\n    tot[i+1] = tot[i]+nums[i]\n\nans = 0\n\n# 1-0-1...\u306e\u30011\u304b\u3089\u59cb\u307e\u308a1\u3067\u7d42\u308f\u308b\u7bc4\u56f2\u3092\u898b\u308b\u306e\u3067\u3001\u5076\u6570\u756a\u76ee\u3060\u3051\u898b\u308b\nfor i in range(0, len(nums), 2):\n    \n    # \u6b21\u306eleft, right\u3092\u8a08\u7b97\u3059\u308b\n    left = i\n    right = min(i+add, len(nums))\n    tmp = tot[right] - tot[left]\n    \n    ans = max(tmp, ans)\n    \nprint(ans)", "N, K = list(map(int, input().split()))\nS = input()\n\nS = S + 'E'   # \u7d42\u7aef\u51e6\u7406\nans = -1    # \u7b54\u3048\u306e\u521d\u671f\u5024\uff08\u5341\u5206\u306b\u5c0f\u3055\u3044\u5024\uff09\n\n# \u7acb\u3063\u305f\u4eba\u306e\u9023\u7d9a\u306e\u6570\nif (S[0] == '0'):\n    stand = 1\nelse:\n    stand = 0\n\nL = 0\nR = 0\n\n# \u5c3a\u53d6\u308a\u6cd5\nwhile (R < N):\n    # \u53f3\u7aef\u3092\u9032\u3081\u308b\u3053\u3068\u304c\u53ef\u80fd\uff08\u7acb\u3063\u305f\u4eba\u306e\u9023\u7d9a\u306e\u6570\u304cK\u4ee5\u4e0b\uff09\u306a\u3089\u3001\u53f3\u7aef\u3092\u9032\u3081\u308b\n    if (stand <= K):\n        # \u7acb\u3063\u305f\u4eba\u306e\u9023\u7d9a\u306e\u6570\u304c\u5897\u3048\u308b\u306a\u30891\u8db3\u3059\n        if (S[R] == '1' and S[R + 1] == '0'):\n            stand += 1\n        # \u7b54\u3048\u306e\u66f4\u65b0\n        ans = max(ans, R - L + 1)\n        R += 1\n    # \u9032\u3081\u3089\u308c\u306a\u3044\u5834\u5408\u3001\u5de6\u7aef\u3068\u53f3\u7aef\u304c\u540c\u3058\u306a\u3089\u4e21\u8005\u3092\u9032\u3081\u308b\n    # \u5de6\u7aef\u304c\u53f3\u7aef\u3092\u8ffd\u3044\u8d8a\u3055\u306a\u3044\u305f\u3081\u306e\u51e6\u7406\n    elif (L == R):\n        L += 1\n        R += 1\n    # \u305d\u308c\u4ee5\u5916\u306f\u5de6\u7aef\u306e\u307f\u3092\u9032\u3081\u308b\n    else:\n        # \u7acb\u3063\u305f\u4eba\u306e\u9023\u7d9a\u306e\u6570\u304c\u6e1b\u308b\u306a\u30891\u6e1b\u3089\u3059\n        if (S[L] == '0' and S[L + 1] == '1'):\n            stand -= 1\n        L += 1\n        # \u5de6\u7aef\u306e\u307f\u3092\u9032\u3081\u305f\u5834\u5408\u306f\u7b54\u3048\u3092\u66f4\u65b0\u3057\u5f97\u306a\u3044\n\nprint(ans)", "N, K = map(int, input().split())\nS = input()\nNums = []\nnow = 1 # \u4eca\u898b\u3066\u3044\u308b\u6570\ncnt = 0 # now\u304c\u3044\u304f\u3064\u4e26\u3093\u3067\u3044\u308b\u304b\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        Nums.append(cnt)\n        now = 1 - now   # 0\u30681\u3092\u5207\u308a\u66ff\u3048\u308b\u3068\u304d\u306e\u8a08\u7b97 now ^= 1\n        cnt = 1\nif cnt != 0:\n    Nums.append(cnt)\n# 1-0-1-0-1-0-1 \u3063\u3066\u611f\u3058\u306e\u914d\u5217\u304c\u6b32\u3057\u3044\n# 1-0-1-0-1-0 \u307f\u305f\u3044\u306b0\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u9069\u5f53\u306b1\u3064\u8db3\u3059\nif len(Nums) % 2 == 0:\n    Nums.append(0)\n\nAdd = 2 * K + 1\n# \u7d2f\u7a4d\u548c\u3092\u4f5c\u308b\n# 0 1 2 3 4 5 6\n#  0 1 2 3 4 5\nsum = [0] * (len(Nums) + 1)\nfor i in range(len(Nums)):\n    sum[i + 1] = sum[i] + Nums[i]\nans = 0\n# 1-0-1... \u306e1\u304b\u3089\u59cb\u3081\u308b\u306e\u3067\u3001\u5076\u6570\u756a\u76ee\u3060\u3051\u898b\u308b\nfor i in range(0, len(Nums), 2):\n    # \u6b21\u306eleft, right\u3092\u8a08\u7b97\u3059\u308b [left, right)\n    left = i\n    right = min(i + Add, len(Nums))\n    tmp = sum[right] - sum[left]\n    ans = max(tmp, ans)\n\nprint(ans)", "n, k = list(map(int,input().split()))\ns = input()\nsento = 0\nketu = 0\ntmp = '1'\nzeroichi = []\ncnt = 0\n\nfor i in range(n):\n    if tmp == s[i]:\n        cnt += 1\n    else:\n        zeroichi.append(cnt)\n        cnt = 1\n        tmp = s[i]\n\nzeroichi.append(cnt)\n\nif len(zeroichi)%2 == 0:\n    zeroichi.append(0)\n\nif len(zeroichi) == 1:\n    zeroichi.append(0)\n    zeroichi.append(0)\n\ni = 0\nans = 0\nans_list = []\nj = 0\nright = min(1+k*2,len(zeroichi))\nleft = 0\n\nwhile i != right:\n    ans += zeroichi[i]\n    i += 1\n\nans_list.append(ans)\n\nwhile right != len(zeroichi):\n    ans -= zeroichi[left]\n    ans -= zeroichi[left+1]\n    ans += zeroichi[right]\n    ans += zeroichi[right+1]\n    ans_list.append(ans)\n    left += 2\n    right += 2\n\nprint((max(ans_list)))\n", "from itertools import groupby\n\nn,k = list(map(int,input().split()))\ns = input()\n\n\ngrouped = groupby (s)\nres = []\n\nif s[0] == '0':\n\tres.append((1,0))\n\nfor l,v in grouped:\n\tres.append( (l,len(list(v))) )\n\nif s[len(s)-1] == '0':\n\tres.append((1,0))\n\n#for d in res:\n\t#print(d)\n\nif len(res) <= 2*k + 1:\n\tans = 0;\n\tfor d in res:\n\t\tans += d[1];\n\n\tprint(ans)\n\treturn\n\nnow = 0\nans = 0\nfor i in range(2*k+1):\n\tnow += res[i][1]\n\nans = max(ans,now)\n\nfor i in range(2*k+1,len(res),2):\n\tnow -= res[i-2*k-1][1]\n\tnow -= res[i-2*k][1]\n\n\tnow += res[i][1]\n\tnow += res[i+1][1]\n\n\tans = max(ans,now)\n\nprint(ans)\n\n", "N, K=list(map(int,input().split()))\nS = str(input())\n\n# count sequence man and memo the cnt in group\nman_groups = []\nsame_cnt = 0\nlast_man = \"\"\nfor i in range(N):\n    cur_man = S[i]\n    if cur_man != last_man:\n        if same_cnt > 0:\n            if last_man == \"0\":\n                same_cnt *= -1\n            man_groups.append(same_cnt)\n        same_cnt = 1\n    else:\n        same_cnt += 1\n    last_man = cur_man\nif same_cnt > 0:\n    if last_man == \"0\":\n        same_cnt *= -1\n    man_groups.append(same_cnt)\n\n# count max sequence man from evey pos\nsum_list = []\nend_pos = 2 * K if man_groups[0] > 0 else 2 * K - 1\nmax_man_groups_idx = len(man_groups) - 1\nend_pos = min(end_pos, max_man_groups_idx)\nlast_max = sum(map(abs, man_groups[0: end_pos + 1]))\nsum_list.append(last_max)\n\nstart_pos = 2 if man_groups[0] > 0 else 1\nfor i in range(start_pos, len(man_groups), 2):\n    if end_pos >= max_man_groups_idx:\n        break\n    for j in range(2):\n        idx = i - j - 1\n        if idx >= 0:\n            last_max -= abs(man_groups[idx])\n    for j in range(2):\n        end_pos += 1\n        if end_pos <= max_man_groups_idx:\n            last_max += abs(man_groups[end_pos])\n    sum_list.append(last_max)\n\n#print(man_groups)\n#print(sum_list)\nprint((max(sum_list)))\n\n\n\n\n\n", "N, K = map(int, input().split())\nS = input()\n\ns = []\ncnt = 1\nfor i in range(N-1):\n    if S[i] == S[i+1]:\n        cnt += 1\n    else:\n        s.append(cnt)\n        cnt = 1\ns.append(cnt)\n\nans = 0\nif S[0] == '0':\n    s = [0] + s\nif S[-1] == '0':\n    s = s + [0]\n\nif 2*K + 1 > len(s):\n    print(sum(s))\n    return\n\ns_cumsum = [s[0]] * len(s)\nfor i in range(1, len(s)):\n    s_cumsum[i] = s_cumsum[i-1] + s[i]\n    \nfor i in range(0, len(s), 2):\n    if i + 2*K >= len(s):\n        break\n    if i < 1:\n        ans = s_cumsum[i+2*K]\n    ans = max(ans, s_cumsum[i+2*K]-s_cumsum[i-1])\n    #ans = max(ans, sum(s[i:i+2*K+1]))\n\nprint(ans)", "def run_length_compress(S):\n    res = [[S[0], 1]]\n    for c in S[1:]:\n        if c == res[-1][0]:\n            res[-1][1] += 1\n        else:\n            res.append([c, 1])\n    return res\n\n\nN, K = list(map(int, input().split()))\nS = input()\ncs = run_length_compress(S)\nM = len(cs)\n\nans = 0\ntot = 0\nright = 0\nzeros = 0\nfor left in range(M):\n    while right < M and zeros + (cs[right][0] == \"0\") <= K:\n        if cs[right][0] == \"0\":\n            zeros += 1\n        tot += cs[right][1]\n        right += 1\n\n    ans = max(ans, tot)\n\n    if left == right:\n        right += 1\n    else:\n        if cs[left][0] == \"0\":\n            zeros -= 1\n        tot -= cs[left][1]\nprint(ans)\n\n", "N, K=list(map(int,input().split()))\nS = str(input())\n\n# count sequence man and memo the cnt in group\nman_groups = []\nsame_cnt = 0\nlast_man = \"\"\nfor i in range(N):\n    cur_man = S[i]\n    if cur_man != last_man:\n        if same_cnt > 0:\n            if last_man == \"0\":\n                same_cnt *= -1\n            man_groups.append(same_cnt)\n        same_cnt = 1\n    else:\n        same_cnt += 1\n    last_man = cur_man\nif same_cnt > 0:\n    if last_man == \"0\":\n        same_cnt *= -1\n    man_groups.append(same_cnt)\n\n# count max from evey\nsum_list = []\nend_pos = 2 * K if man_groups[0] > 0 else 2 * K - 1\nend_pos = min(end_pos, len(man_groups) - 1)\nlast_max = sum(map(abs, man_groups[0: end_pos + 1]))\nsum_list.append(last_max)\nfor i in range(1, len(man_groups)):\n    if end_pos >= len(man_groups) - 1:\n        break\n    last_max -= abs(man_groups[i - 1])\n    if man_groups[i] > 0:\n        next_end_pos = min(end_pos + 2, len(man_groups) - 1)\n        man_groups_to_add = man_groups[end_pos + 1: next_end_pos + 1]\n        last_max += sum(map(abs, man_groups_to_add))\n        end_pos = next_end_pos\n    sum_list.append(last_max)\n\n#print(sum_list)\n#print(sum_list)\nprint((max(sum_list)))\n\n\n\n\n\n", "#ABC124 D-Handstand\nn,k = map(int,input().split())\ns = []\ncount = 0\nlast = 1\nfor i in input():\n    if i=='1':\n        if last==1:\n            count+=1\n        else:\n            s.append(count)\n            count=1\n        last = 1\n    else:\n        if last==0:\n            count+=1\n        else:\n            s.append(count)\n            count=1\n        last = 0\ns.append(count)\nif last==0:\n    s.append(0)\n\nk = min(k,len(s)//2)\nans = 0\n\nfor j in range(len(s)//2-k+1):\n    if j==0:\n        now = sum(s[:k*2+1])\n        ans = now\n    else:\n        now = now-s[j*2-1]-s[j*2-2]+s[(j+k)*2]+s[(j+k)*2-1]\n        ans = max(ans,now) \nprint(ans)", "#--\u521d\u671f\u306e\u4e26\u3073\u3092\u5727\u7e2e\u8868\u793a,\u9006\u7acb\u3061\u3001\u6b63\u7acb\u3092\u76ee\u5370--#\nimport sys,math,collections,itertools\ninput = sys.stdin.readline\n\nN,K = list(map(int,input().split()))\nS = input().rstrip()\n\nstand = []\ns_or_r = []\n\ns_bf = '.'\ncnt = 0\nfor i in range(N):\n    if s_bf != S[i] and i != 0:\n        stand.append(cnt)\n        s_or_r.append(s_bf)\n        cnt = 1\n        s_bf=S[i]\n    else:\n        cnt += 1\n        s_bf =S[i]\nstand.append(cnt)\ns_or_r.append(s_bf)\n\n\n#--\u6b63\u7acbk\u307e\u3067\u8a31\u5bb9\u3057\u3066\u8db3\u3059\u3002max\u304c\u7b54\u3048\nif s_or_r.count('0')<=K:\n    print((len(S)))\n    return\n#--\u6210\u5f62==#\nif s_or_r[0]=='0':\n    s_or_r=['1']+s_or_r\n    stand = [0]+stand\nif s_or_r[-1]=='0':\n    s_or_r.append('1')\n    stand.append(0)\n#\u521d\u671f\u6761\u4ef6#\ntmp = sum(stand[0:2*K+1])\nans = tmp\nfor i in range(2,len(stand)-2*K,2):\n    tmp += -(stand[i-1]+stand[i-2])+stand[i+2*K-1]+stand[i+2*K]\n    ans = max(ans,tmp)\nprint(ans)\n    \n", "N, K = map(int, input().split())\nS = input()\nL = [0]\nX = ['1']\npos = 0\nfor i in range(N):\n  if S[i] != X[pos]:\n    L.append(1)\n    X.append(S[i])\n    pos += 1\n  else:\n    L[pos] += 1\nwhile pos < 2 * K + 4:\n  L.append(0)\n  X.append('1')\n  pos += 1\nL.append(0)\nX.append('1')\nn = len(L)\nfor i in range(1, n):\n  L[i] += L[i-1]\nM = L[2*K]\nfor i in range(1, n-2*K):\n  if X[i] == '1':\n    M = max(L[2*K+i] - L[i-1], M)\nprint(M)", "n, k = map(int, input().split())\ns = input()\nss = []\nss.append(0)\nfor i in range(n-1):\n  a = s[i]\n  if a == s[i+1]:\n    continue\n  ss.append(i+1)\nss.append(n)\n\nans = 0\nfor i in range(len(ss)):\n  p = ss[i]\n  if p == n:\n    break\n  if s[p] == \"0\":\n    ans = max(ans, ss[min(2 * k + i, len(ss) - 1)] - ss[i])\n  else:\n    ans = max(ans, ss[min(2 * k + 1 + i, len(ss) - 1)] - ss[i])\nprint(ans)", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N, K = LI()\n    S = SS()\n\n    # 1\u306e\u584a\u306e\u9577\u3055\u3068\u4f4d\u7f6e\u3092\u8abf\u3079\u308b\n    l = []\n    if S[0] == '1':\n        l.append(0)\n    else:\n        l.append(0)\n        l.append(0)\n    for i in range(N - 1):\n        if S[i] == '0' and S[i+1] == '1':\n            l.append(i + 1)\n        elif S[i] == '1' and S[i+1] == '0':\n            l.append(i + 1)\n    if S[-1] == '1':\n        l.append(N)\n    else:\n        l.append(N)\n        l.append(N)\n    # print(S)\n    # print(l)\n\n    # 1\u306e\u584a\u3092K+1\u500b\u304f\u3063\u3064\u3051\u305f\u5834\u5408\u306e\u9577\u3055\u3092\u8abf\u3079\u308b\n    ans = 0\n    if len(l) // 2 - 1 < K:\n        ans = N\n    else:\n        for i in range(len(l) // 2 - K):\n            ans = max(l[2*i+2*K+1] - l[2*i], ans)\n\n    # \u7aef\u306e0\u3092\u9006\u7acb\u3061\u3055\u305b\u305f\u5834\u5408\n    # if S[0] == '0':\n    #     ans = max(l[2*K-1], ans)\n    # if S[-1] == '0':\n    #     ans = max(N - l[len(l)-2*K], ans)\n    \n    # \u5168\u90e81\u3060\u3063\u305f\u5834\u5408(\u584a\u306e\u9593\u3082\u7121\u3044\u3057\u7aef\u306e0\u3082\u306a\u3044)\n    # if l == [0, N]:\n    #     ans = N\n\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "from itertools import groupby\nimport sys\n\nN, K = list(map(int, input().split()))\nS = input()\n\nS = [[i, len(list(j))] for i, j in groupby(S)]\n\nif len(S) // 2 <= K:\n    if len(S) % 2 == 1 and S[-1][0] == \"0\":\n        if len(S) == 1:\n            print((sum([j for i, j in S])))\n            return\n            \n    else:\n        print((sum([j for i, j in S])))\n        return\n\nans = 0\ncnt = 0\nlidx = -1\nfor i, j in S:\n    lidx += 1\n    if cnt == K and i == \"0\":\n        break\n    ans += j\n    if i == \"0\":\n        cnt += 1\nsidx = 0\nmans = ans\nfor i in range(lidx,len(S)):\n    ans += S[i][1]\n    if i == len(S)-1 or S[i][0] == \"1\":\n        while True:\n            ans -= S[sidx][1]\n            sidx += 1\n            if S[sidx][0] == \"1\":\n                break\n        mans = max(mans, ans)\n\nprint(mans)\n\n\n        \n", "N,K=map(int,input().split())\nS=input()\nA=[]\nnow=S[0]\nif now=='0':\n    A.append(0)\nC=1\nfor s in S[1:]:\n    if s==now:\n        C+=1\n    else:\n        A.append(C)\n        now=s\n        C=1\nA.append(C)\nif now=='0':\n    A.append(0)\nB=[sum(A[:2*K+1])]\ni=0\nj=2*(K+1)\nwhile j<len(A):\n    b=B[-1]+sum(A[j-1:j+1])-sum(A[i:i+2])\n    B.append(b)\n    i+=2\n    j+=2\nprint(max(B))", "\ndef resolve():\n    N, K = map(int, input().split())\n    S = input()\n\n    # even:1\n    # odd:0\n    # 1-0-1-0-1 \u306e\u914d\u5217\u306b\u3059\u308b. \u4e21\u7aef\u306f1\u306b\u3059\u308b\n    L = []\n    pre = \"1\"\n    cnt = 0\n    for i in range(N):\n        if pre == S[i]:\n            cnt += 1\n        else:\n            L.append(cnt)\n            cnt = 1\n        pre = S[i]\n    L.append(cnt)\n    # \u6700\u5f8c\u304c0\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u4eee\u306e1\u3092\u4ed8\u3051\u8db3\u3059\u3002(\u5024\u304c0\u306a\u306e\u3067\u5f71\u97ff\u306a\u3044)\n    if pre == \"0\":\n        L.append(0)\n\n    # 1-0-1-0-1\u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u3001K\uff1d2\u3060\u3068\u3059\u308b\u3002\n    # 0\u30922\u500b\u542b\u3081\u305f\u500b\u6570\u306f, 1\uff1d3\u30010\uff1d2\u306e\u9577\u3055\u304c\u4f5c\u6210\u3067\u304d\u308b\n    length = 2 * K + 1\n\n    # 0\u3092\u3059\u3079\u3066\u5909\u63db\u3067\u304d\u308b\n    if len(L) <= length:\n        return print(N)\n\n    # 1-0-1-0-1\u306e\u914d\u5217\u306a\u306e\u3067\u9593\u306b0\u3092\u542b\u3093\u3060\u6570\u3048\u4e0a\u3052\n    # \u306a\u306e\u3067\u5076\u6570\u3068\u3073\u306b1\u3092\u8d77\u70b9\u306b\u6570\u3048\u4e0a\u3052\n    left = 0\n    right = 0\n    tmp = 0\n    # \u3057\u3083\u304f\u3068\u308a\n    ans = 0\n    for i in range(0, len(L), 2):\n        nextL = i\n        nextR = min(i + length, len(L))\n\n        while nextL > left:\n            tmp -= L[left]\n            left += 1\n        while nextR > right:\n            tmp += L[right]\n            right += 1\n\n        ans = max(ans, tmp)\n        \n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n__starting_point()", "# \u89e3\u8aacAC\n# https://drken1215.hatenablog.com/entry/2019/04/14/222900\nn, k = map(int, input().split())\nS = list(input())\n\nif \"0\" not in S:\n    print(n)\n    return\n\n# 1\u306e\u500b\u6570\u30010\u306e\u500b\u6570\u30011\u306e\u500b\u6570\u3001\u3001\u3001\ncnt = []\n\n# \u5148\u982d\u304c0\u306a\u30891\u304c0\u500b\u3068\u307f\u306a\u3059\nif S[0] == \"0\":\n    cnt.append(0)\n\n# \u500b\u6570\u52d8\u5b9a\ni = 0\nwhile i < n:\n    j = i\n    while j < n and S[i] == S[j]:\n        j += 1\n    cnt.append(j-i)\n    i = j\n\n# \u6700\u5f8c\u5c3e\u304c0\u306a\u30891\u304c0\u500b\u3068\u307f\u306a\u3059\nif S[-1] == \"0\":\n    cnt.append(0)\n\n# cnt \u306e\u7d2f\u7a4d\u548c\ncumCnt = [0]\nfor c in cnt:\n    cumCnt.append(cumCnt[-1] + c)\n\n# print(cnt)\n# print(cumCnt)\n\nlenCnt = len(cnt)\nlenCumCnt = len(cumCnt)\nans = 0\n\nfor left in range(0, lenCumCnt, 2):\n    right = min(left + 2*k+1, lenCumCnt-1)\n    ans = max(ans, cumCnt[right] - cumCnt[left])\nprint(ans)", "\nfrom itertools import accumulate\n\n\ndef resolve():\n    N, K = map(int, input().split())\n    S = input()\n\n    # even:1\n    # odd:0\n    # 1-0-1-0-1 \u306e\u914d\u5217\u306b\u3059\u308b. \u4e21\u7aef\u306f1\u306b\u3059\u308b\n    L = []\n    pre = \"1\"\n    cnt = 0\n    for i in range(N):\n        if pre == S[i]:\n            cnt += 1\n        else:\n            L.append(cnt)\n            cnt = 1\n        pre = S[i]\n    L.append(cnt)\n    # \u6700\u5f8c\u304c0\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u4eee\u306e1\u3092\u4ed8\u3051\u8db3\u3059\u3002(\u5024\u304c0\u306a\u306e\u3067\u5f71\u97ff\u306a\u3044)\n    if pre == \"0\":\n        L.append(0)\n\n    # 1-0-1-0-1\u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u3001K\uff1d2\u3060\u3068\u3059\u308b\u3002\n    # 0\u30922\u500b\u542b\u3081\u305f\u500b\u6570\u306f, 1\uff1d3\u30010\uff1d2\u306e\u9577\u3055\u304c\u4f5c\u6210\u3067\u304d\u308b\n    length = 2 * K + 1\n\n    # 0\u3092\u3059\u3079\u3066\u5909\u63db\u3067\u304d\u308b\n    if len(L) <= length:\n        return print(N)\n\n    acc = [0] + list(accumulate(L))\n    ans = 0\n    # 1-0-1-0-1\u306e\u914d\u5217\u306a\u306e\u3067\u9593\u306b0\u3092\u542b\u3093\u3060\u6570\u3048\u4e0a\u3052\n    # \u306a\u306e\u3067\u5076\u6570\u3068\u3073\u306b1\u3092\u8d77\u70b9\u306b\u6570\u3048\u4e0a\u3052 \n    for i in range(0, len(L) - length + 1, 2):\n        ans = max(ans, acc[i + length] - acc[i])\n\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "N,K=list(map(int,input().split()))\nS=input()\nflag=False\ncnt=[]\nl=0\nr=0\ncnt.append([0,0])\nfor i in range(N):\n    if flag:\n        if S[i]=='0':\n            r=i\n            cnt.append([l,r])\n            flag=False\n    else:\n        if S[i]=='1':\n            l=i\n            flag=True\nif flag:\n    cnt.append([l,N])\ncnt.append([N,N])\nans=0\nn=len(cnt)\nfor i in range(n):\n    j=min(n-1,i+K)\n    ans=max(cnt[j][1]-cnt[i][0],ans)\nprint(ans)\n", "N,K=map(int,input().split())\nS=input()\ndp=[]\np,q=0,0\nfor i in S:\n  if i=='1':\n    if 0<q:\n      dp.append(q)\n    p+=1\n    q=0\n  else:\n    if 0<p:\n      dp.append(p)\n    p=0\n    q+=1\nif 0<p:\n  dp.append(p)\nelse:\n  dp.append(q)\nif S[0]=='0':\n  if len(dp)<=2*K:\n    print(sum(dp))\n  else:\n    if S[N-1]=='0':\n      dp.append(0)\n    dp.insert(0,0)\n    ans=sum(dp[:2*K+1])\n    bns=ans\n    for i in range(2*K,len(dp),2):\n      if i==2*K:\n        continue\n      bns+=dp[i]+dp[i-1]-dp[i-2*K-1]-dp[i-2*K-2]\n      ans=max(ans,bns)\n    print(ans)\nelse:\n  if len(dp)<=2*K+1:\n    print(sum(dp))\n  else:\n    if S[N-1]=='0':\n      dp.append(0)\n    ans=sum(dp[:2*K+1])\n    bns=ans\n    for i in range(2*K,len(dp),2):\n      if i==2*K:\n        continue\n      bns+=dp[i]+dp[i-1]-dp[i-2*K-1]-dp[i-2*K-2]\n      ans=max(ans,bns)\n    print(ans)", "\nfrom itertools import accumulate\ndef resolve():\n    N, K = map(int, input().split())\n    S = input()\n\n    # even:1\n    # odd:0\n    # 1-0-1-0-1 \u306e\u914d\u5217\u306b\u3059\u308b. \u4e21\u7aef\u306f1\u306b\u3059\u308b\n    L = []\n    pre = \"1\"\n    cnt = 0\n    for i in range(N):\n        if pre == S[i]:\n            cnt += 1\n        else:\n            L.append(cnt)\n            cnt = 1\n        pre = S[i]\n    L.append(cnt)\n    # \u6700\u5f8c\u304c0\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u4eee\u306e1\u3092\u4ed8\u3051\u8db3\u3059\u3002(\u5024\u304c0\u306a\u306e\u3067\u5f71\u97ff\u306a\u3044)\n    if pre == \"0\":\n        L.append(0)\n\n    # 1-0-1-0-1\u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u3001K\uff1d2\u3060\u3068\u3059\u308b\u3002\n    # 0\u30922\u500b\u542b\u3081\u305f\u500b\u6570\u306f, 1\uff1d3\u30010\uff1d2\u306e\u9577\u3055\u304c\u4f5c\u6210\u3067\u304d\u308b\n    length = 2 * K + 1\n\n    # 0\u3092\u3059\u3079\u3066\u5909\u63db\u3067\u304d\u308b\n    if len(L) <= length:\n        return print(N)\n\n    # 1-0-1-0-1\u306e\u914d\u5217\u306a\u306e\u3067\u9593\u306b0\u3092\u542b\u3093\u3060\u6570\u3048\u4e0a\u3052\n    # \u306a\u306e\u3067\u5076\u6570\u3068\u3073\u306b1\u3092\u8d77\u70b9\u306b\u6570\u3048\u4e0a\u3052\n    # \u7d2f\u7a4d\n    acc = [0] + list(accumulate(L))\n    ans = 0\n    for i in range(0, len(L), 2):\n        left = i\n        right = min(i + length, len(L))\n        tmp = acc[right] - acc[left]\n\n        ans = max(ans, tmp)\n\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "N, K = map(int, input().split())\nS = input().rstrip('\\n')\n\nS += '1' if S[N-1] == '0' else '0'\nsumz = [0]*(N+2)\nright = 1\ncnt = 1\nmaxlen = 0\nleft = 0\nif K == 0:\n    for i in range(N):\n        if S[i] == S[i+1] and S[i] == 1:\n            cnt += 1\n        else:\n            if maxlen < cnt:\n                maxlen = cnt\n            cnt = 1\nelse:\n    cnt = 0\n    while True:\n        if left >= N: break\n        if right <= left: right = left+1\n        while (right <N) and ((cnt < K) or ((cnt == K) and ((S[right] == S[right-1]) or S[right] == '1'))):\n            if (S[right] != S[right - 1]) and (S[right-1] == '0'):\n                cnt += 1\n            right += 1\n\n        if not( S[right-1] == '0' and (K == 0)):\n            if maxlen < right - left:\n                maxlen = right - left\n        #next\n        while left < N and S[left] == S[left+1]:\n            left += 1\n        if S[left] == '0':\n            cnt -= 1\n\n        left += 1\n\nprint(maxlen)", "import itertools\ndef s(): return input()\ndef I(): return map(int,input().split())\n\nN,K = I()\nS = list(s())\nnum = 1\ncnt = 0\nL = []\nfor i in range(N-1):\n    if S[i] != S[i+1]:\n        L.append(num)\n        num = 0\n        if S[i] == '0':\n            cnt += 1\n    num += 1\nL.append(num)\nif S[-1] == '0':\n    cnt += 1\nruiseki = [0]+list(itertools.accumulate(L))\nl = len(ruiseki)\nif cnt <= K:\n    print(N)\n    return\nstart = 0\nans = 0\nif S[0] == '0':\n    start = 1\nfor i in range(start,l,2):\n    if i+K*2+1 > l-1:\n        break\n    ans = max(ans,ruiseki[i+K*2+1]-ruiseki[i])\nif S[0] == '0':\n    ans = max(ans,ruiseki[K*2])\nif S[-1] == '0':\n    ans = max(ans,ruiseki[-1]-ruiseki[l-K*2-1])\nprint(ans)", "\nfrom itertools import accumulate\n\n\ndef resolve():\n    N, K = map(int, input().split())\n    S = input()\n\n    # even:1\n    # odd:0\n    # 1-0-1-0-1 \u306e\u914d\u5217\u306b\u3059\u308b. \u4e21\u7aef\u306f1\u306b\u3059\u308b\n    L = []\n    pre = \"1\"\n    cnt = 0\n    for i in range(N):\n        if pre == S[i]:\n            cnt += 1\n        else:\n            L.append(cnt)\n            cnt = 1\n        pre = S[i]\n    L.append(cnt)\n    # \u6700\u5f8c\u304c0\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u4eee\u306e1\u3092\u4ed8\u3051\u8db3\u3059\u3002(\u5024\u304c0\u306a\u306e\u3067\u5f71\u97ff\u306a\u3044)\n    if pre == \"0\":\n        L.append(0)\n\n    # 1-0-1-0-1\u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u3001K\uff1d2\u3060\u3068\u3059\u308b\u3002\n    # 0\u30922\u500b\u542b\u3081\u305f\u500b\u6570\u306f, 1\uff1d3\u30010\uff1d2\u306e\u9577\u3055\u304c\u4f5c\u6210\u3067\u304d\u308b\n    length = 2 * K + 1\n\n    # 0\u3092\u3059\u3079\u3066\u5909\u63db\u3067\u304d\u308b\n    if len(L) <= length:\n        return print(N)\n\n    acc = [0] + list(accumulate(L))\n    ans = 0\n    for i in range(0, len(L) - length + 1, 2):\n        ans = max(ans, acc[i + length] - acc[i])\n\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n__starting_point()", "import numpy as np\nN, K = list(map(int, input().split()))\nS = list(input())\nnums = []\nnow = 1\ncnt = 0\nfor s in S:\n    if s == str(now):\n        cnt += 1\n    else:\n        nums.append(cnt)\n        now = 1 - now\n        cnt = 1\nif cnt != 0:\n    nums.append(cnt)\nif len(nums) % 2 == 0:\n    nums.append(0)\n\nsums = [0] + list(np.cumsum(nums))\nleft = 0\nright = left + K * 2\nmaxi = 0\nif N < 3:\n    maxi = N\nwhile right < len(nums):\n    if sums[right+1] - sums[left] > maxi:\n        maxi = sums[right+1] - sums[left]\n    right += 2\n    left += 2\nif maxi == 0:\n    maxi = sum(nums)\nprint(maxi)\n", "import sys\nfrom itertools import groupby, accumulate\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K = list(map(int, readline().split()))\n    S = readline().strip()\n\n    vec = [len(list(g)) for _, g in groupby(S)]\n    keys = [k for k, _ in groupby(S)]\n    csum = [0]\n    csum.extend(accumulate(vec))\n\n    ans = 0\n    for i in range(len(vec)):\n        if keys[i] == '0':\n            if i == 0:\n                n = 2 * K\n            else:\n                continue\n        else:\n            n = 2 * K + 1\n\n        if ans < csum[min(i + n, len(csum) - 1)] - csum[i]:\n            ans = csum[min(i + n, len(csum) - 1)] - csum[i]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = list(map(int, input().split()))\ns = input()\n\non = []\noff = []\n\nacnt = 0\nbcnt = 0\nfor i in s:\n  if i == '0':\n    if bcnt > 0:\n      off.append(bcnt)\n      bcnt = 0\n    acnt += 1\n  else:\n    if acnt > 0:\n      on.append(acnt)\n      acnt = 0\n    bcnt += 1\nif bcnt > 0:\n  off.append(bcnt)\n  bcnt = 0\nif acnt > 0:\n  on.append(acnt)\n  acnt = 0\nans = 0\nif s[0] == '1':\n  for i in range(len(on)-k+1):\n    s = 0\n    if i == 0:\n      a = sum(on[i:i+k])\n      b = sum(off[i:i+k+1])\n    else:\n      a += on[i+k-1]\n      a -= on[i-1]\n      if i+k <= len(off)-1:\n        b += off[i+k]\n      b -= off[i-1]\n    # print (a,b)\n    s = a+b\n    ans = max(ans,s)\nelse:\n  for i in range(len(on)-k+1):\n    if i == 0:\n      a = sum(on[i:i+k])\n      b = sum(off[i:i+k])\n    elif i == 1:\n      a = sum(on[i:i+k])\n      b = sum(off[i-1:i+k])\n    else:\n      a += on[i+k-1]\n      a -= on[i-1]\n      if i+k-1 <= len(off)-1:\n        b += off[i+k-1]\n      b -= off[i-2]\n    s = a+b\n    # print (a,b)\n    ans = max(ans,s)\nif ans == 0:\n  print (n)\nelse:\n  print (ans)\n", "n,k = map(int,input().split())\ns = input()\n\nL = []\nfrom itertools import groupby\nfor key ,value in groupby(s):\n    L.append((key,len(list(value))))\n#print(L)\nc = []\nfor i in range(len(L)):\n    c.append(L[i][1])\nc = [0] + c\n\nfor i in range(1,len(c)):\n    c[i] +=c[i-1]\n#print(c)\nl = 0 \nr = 2*k\n\nans = 0\nwhile True:\n    if L[l][0] == \"1\":\n        if l + r +1 < len(L):\n            ans = max(ans,c[l+r+1] - c[l])#add 5\n        else:\n            ans = max(ans,c[len(L)] - c[l])\n    elif L[l][0] == \"0\":\n        if l + r < len(L):\n            ans = max(ans,c[l+r] - c[l])#add 4\n        else:\n            ans = max(ans,c[len(L)] - c[l])\n    if l == len(L)-1:\n        break\n    l +=1\nprint(ans)", "n,k = map(int,input().split())\ns = list(map(int,list(input())))\nx = [-1]\nfor i in range(n-1):\n    if s[i] != s[i+1]:\n        x.append(i)\nx.append(n-1)\nt = len(x)\nans = 1\n\nfor i in range(t-1):\n    if i%2 == s[0]:\n        ans = max(ans,x[min(t-1,i+2*k)]-x[i])\n    else:\n        ans = max(ans,x[min(t-1,i+2*k+1)]-x[i])\n\nprint(ans)", "n,k = map(int,input().split())\ns = input()\nms = 0\nps = 0\ntemp = [0]\nif s[0] == \"0\":\n    temp.append(0)\nfor i in s:\n    # print(i,ps,ms)\n    if i == \"0\":\n        ms += 1\n        if ps:\n            temp.append(ps)\n            ps = 0\n    else:\n        ps += 1\n        if ms:\n            temp.append(ms)\n            ms = 0\nif ms:\n    temp.append(ms)\nelse:\n    temp.append(ps)\n# print(temp)\ntemp.append(0)\nfor i in range(len(temp)-1):\n    temp[i+1] += temp[i]\n# print(temp)\nans = 0\nif len(temp)-(2*k+1) <= 0:\n    ans = temp[-1]\nelse:\n    for i in range(0,len(temp)-(2*k+1),2):\n        ans = max(ans,temp[i+2*k+1]-temp[i])\nprint(ans)", "N, K = [int(_) for _ in input().split()]\nS = input()\n\nS = \"0\" + S + \"0\"\n\nX = []\nfor i in range(N+1):\n    if S[i] == \"0\" and S[i+1] == \"1\":\n        st = i+1\n    if S[i] == \"1\" and S[i+1] == \"0\":\n        en = i\n        X.append((st, en))\nM = len(X)\n\nans = 0\nfor i in range(len(X) - K):\n    st = X[i][0]\n    en = X[i+K][1]\n    ans = max(ans, en - st + 1)\n\nif M == 0 or M + 2 < K:\n    ans = N\n\nif K <= M:\n    en = X[K-1][1]\n    ans = max(ans, en - 1 + 1)\n    st = X[-K][0]\n    ans = max(ans, N - st + 1)\n\nprint(ans)\n", "N, K = list(map(int, input().split(' ')))\nS = input()\n\nlengths = []\n\nif S.startswith('0'):\n    lengths.append(0)\n\ncont = 0\nfor s0, s1 in zip(S, S[1:] + 'x'):\n    cont += 1\n    if s0 != s1:\n        lengths.append(cont)\n        cont = 0\n\nif S.endswith('0'):\n    lengths.append(0)\n\nwindow = 2 * K + 1\n\nbuf = sum(lengths[0:window])\nans = buf\nfor i in range(window, len(lengths)):\n    buf += lengths[i]\n    buf -= lengths[i - window]\n    if i % 2 == 0:\n        ans = max(ans, buf)\n\nprint(ans)\n", "N,K=map(int,input().split())\nS=input()\nchange=[0]\nfor i in range(len(S)-1):\n  if S[i]!=S[i+1]:\n    change.append(i+1)\nchange.append(N)\nr=len(change)\nX=[]\nfor i in range(r-1):\n  if S[change[i]]=='0':\n    a=min(i+2*K,r-1)\n    X.append(change[a]-change[i])\n  else:\n    a=min(i+2*K+1,r-1)\n    X.append(change[a]-change[i])\nprint(max(X))", "n,k=map(int,input().split())\ns=input()\n\nnums=[]\n\nif(s[0]=='0'):\n    nums.append(0)\n\nnum=s[0]\nnumi=0\nfor i in range(n):\n    if(s[i]==num):\n        numi+=1\n    else:\n        nums.append(numi)\n        numi=1\n        num=s[i]\nelse:\n    nums.append(numi)\n\nif(s[-1]=='1'):\n    nums.append(0)\n\n#print(nums)\n\nans=0\nzero_num=len(nums)//2\nif(zero_num<=k):\n    print(sum(nums))\nelse:\n    l=2*k\n    sumi=sum(nums[:l+1])\n    ans=sumi\n    i=0\n    while(l+2<len(nums)):\n        sumi+=(nums[l+1]+nums[l+2])\n        l+=2\n        sumi-=(nums[i]+nums[i+1])\n        i+=2\n        ans=max(ans,sumi)\n#    print(nums[-2*k:])\n    ans=max(ans,sum(nums[-2*k:]))\n    print(ans)", "n,k=map(int,input().split())\ns=[int(i) for i in input()]\nl1,l0=[],[]\nb,c=1,0\nfor i in s:\n  if b==i: c+=1\n  else:\n    if b: l1+=[c]\n    else: l0+=[c]\n    c=1\n  b=i\nif b:\n  l1+=[c]\n  l0+=[0]\nelse:\n  l0+=[c]\nS=[0]\nfor i,j in zip(l1,l0):\n  S+=[S[-1]+i+j]\nl1+=[0]\nl0+=[0]\nm=len(S)\nif m<=k: print(n)\nelse:\n  a=0\n  for i in range(k,m):\n    a=max(a,S[i]-S[i-k]+l1[i])\n  print(a)", "n, k = map(int,input().split())\ns = list(input())\n\ncl = 0\ncr = 0\na = []\nans = 0\nif s[0] == '1':\n    ck = 0\n    ans = 1\nelse:\n    ck = 1\n    a.append([0,0])\nwhile True:\n    while ck <= k and cr < n-1:\n        cr += 1\n        if s[cr-1] == '1' and s[cr] == '0':\n            if ck < k:\n                ck += 1\n                a.append([cr, cr])\n            else:\n                break\n        elif s[cr-1] == '0' and s[cr] == '1':\n            a[-1][1] = cr\n        ans = max(ans, cr - cl + 1)\n    if cr < n-1:\n        tl, tr = a.pop(0)\n        cl = tr\n        cr -= 1\n        ck -= 1\n    else:\n        break\nprint(ans)", "import itertools\nN,K = map(int,input().split())\nlsS = list(input())\ngr = itertools.groupby(lsS)\nls = [['0',0]]\nfor key,group in gr:\n    ls.append([key,len(list(group))])\nlengr = len(ls)\nlssum = []\nsum1 = 0\nfor i in range(lengr):\n    sum1 += ls[i][1]\n    lssum.append([ls[i][0],sum1])\nlsans = []\nfor i in range(1,lengr):\n    if ls[i][0] == '0':\n        lsans.append(lssum[min(lengr-1,i+2*K-1)][1]-lssum[i-1][1])\n    elif ls[i][0] == '1':\n        lsans.append(lssum[min(lengr-1,i+2*K)][1]-lssum[i-1][1])\nprint(max(lsans))", "n, k = map(int, input().split())\ns = input()\nl=list()\ns = s.replace(\"10\",\"1,0\")\ns = s.replace(\"01\",\"0,1\")\n\nl = [len(i) for i in s.split(\",\")]\nr = 0\nans = 0\n\nif s[0] == \"1\":\n    r = min(k, len(l) - 1)\nelse:\n    r = min(k-1, len(l) - 1)\n\nt = l[r]\n\nfor j in range(1, k+1):\n    #print(r,j,t,l[r-j],l[r+j])\n    if r-j >= 0:\n        #print(\"r-j >= 0:\")\n        t += l[r-j]\n    if r+j < len(l):\n        #print(\"r+j < len(l):\")\n        t += l[r+j]\nans = t\nfor i in range(r+2, len(l) ,2):\n    for j in range(1, 3):\n        if i-j-k >= 0:\n            #print(\"l[i-j-k]\", i-j-k, l[i-j-k])\n            t -= l[i-j-k]\n        if i+j+k-2 < len(l):\n            #print(\"l[i+k+j]\", i+j+k-2, l[i+j+k-2])\n            t += l[i+j+k-2]\n    ans = max(ans, t)\nprint(ans)", "N, K = map(int, input().split())\n\nx = 1\nc = [0]\nfor s in input():\n    if int(s) == x:\n        c[-1] += 1\n    else:\n        x ^= 1\n        c.append(1)\nif not x:\n    c.append(0)\n\nm = len(c)\nh = min(K*2+1, m)\nr = [c[0]]\nfor i in range(1, m):\n    r.append(r[-1]+c[i])\nr.append(0)\n\nans = 0\n\nfor i in range(0, m-h+1, 2):\n    ans = max(r[i+h-1]-r[i-1], ans)\n\nprint(ans)", "n,p=list(map(int,input().split()))\ns=list(input())\n\nfrom itertools import groupby\n\ngr = groupby(s)\n\ncum=[]\ntmp=0\nfor k,v in gr:\n    if k=='0':\n        cum.append(tmp+len(list(v)))\n        tmp=0\n    elif k=='1':\n        tmp+=len(list(v))\n\n\ncum = list(reversed(cum))\n\nans = 0\ncnt = 0\ntmp=0\ngr = groupby(s)\nfor k,v in gr:\n    if k=='0':\n        cnt+=1\n        if cnt>p:\n            tmp -=cum.pop()\n\n    tmp +=len(list(v))\n    ans = max(ans,tmp)\n\n\nprint(ans)\n\n", "n, k = list(map(int, input().split()))\ns = input()\n\nans = 0\nzeroes = 0\nzeroIndices = []\nind = 0\nlastZero = -1\n\nfor i in range(len(s)):\n    if (s[i] == \"1\" and i>0 and s[i-1] == \"0\") or (i == len(s)-1 and s[i] == \"0\" and len(s)>1):\n        zeroIndices.append(i-1)\n\n        if zeroes == k:\n            lastZero = zeroIndices[ind]\n            ind += 1\n        else:\n            zeroes += 1\n\n    if (i == len(s)-1) or (s[i] == \"1\" and s[i+1] == \"0\"):\n        ans = max(ans, i-lastZero)\n\nprint(ans)", "n, k = list(map(int, input().split()))\ns = input()\n\na = []\n\ni = 0\nwhile i < n:\n    j = 1\n    while i + j < n and s[i] == s[i + j]:\n        j += 1\n    a.append((s[i], j))\n    i += j\nif a[0][0] == '0':\n    a = [('1', 0)] + a\nif a[-1][0] == '1':\n    a.append(('0', 0))\n\nwhile len(a) < k * 2:\n    a.append(('1', 0))\n    a.append(('0', 0))\nm = len(a)\n\n\ns = [0] * (m + k * 5 + 1)\nfor i in range(m + k * 2):\n    if i < m:\n        s[i + 1] = s[i] + a[i][1]\n    else:\n        s[i + 1] = s[i]\nans = 0\nfor i in range(1, m, 2):\n    ans = max(ans, s[i + k * 2] - s[i - 1])\nprint(ans)\n", "n, k = map(int,input().split())\nS = list(map(int, list(input())))\n# \u5c3a\u53d6\u308a\u6cd5.\n## \u53f3\u5074\u306e\u521d\u671f\u5316.//\u3053\u308c\u3092\u4e0d\u898f\u5247\u306b\u52d5\u304b\u3059.\nridx = 1\n## \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5316.//\u3053\u308c\u3067ridx\u3092\u5236\u5fa1\u3059\u308b.\n### \u6700\u521d\u304c0\u3060\u3063\u305f\u5834\u5408\u3001\u6700\u521d\u304b\u3089\u53cd\u8ee2\u304c\u5fc5\u8981.\ncnt = 0 if S[0]==1 else 1\n## \u7b54\u3048\u306e\u521d\u671f\u5316.//\u3053\u306e\u6700\u5927\u3092\u63a2\u3059.\nans = 0\n## \u5de6\u5074\u30920\u304b\u3089n-1\u307e\u3067\u52d5\u304b\u3057\u3066\u3044\u304f.\nfor lidx in range(n):\n    # \u73fe\u5728\u5730\u304c1\u3067\u4e00\u3064\u524d\u304c0\u3060\u3063\u305f\u5834\u5408\u3001\u30ab\u30a6\u30f3\u30c8\u3092\u6e1b\u3089\u3059.\n    if lidx>0 and S[lidx]==1 and S[lidx-1]==0:\n        cnt -= 1\n    # \u53f3\u7aef\u304cn\u672a\u6e80\u306a\u3089\u53f3\u306b\u4e00\u3064\u305a\u3064\u52d5\u304b\u3057\u3066\u3044\u304f.\n    while ridx < n:\n        ## \u3082\u3057\u73fe\u5728\u5730\u304c0\u3067\u3001\u4e00\u3064\u524d\u304c1\u306a\u3089\n        if S[ridx]==0 and S[ridx-1]==1:\n            ### \u30ab\u30a6\u30f3\u30c8\u304ck\u672a\u6e80\u306a\u3089\u30ab\u30a6\u30f3\u30c8\u3092\u5897\u3084\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u306a\u3089\u30eb\u30fc\u30d7\u3092\u8131\u3059\u308b.\n            if cnt < k:\n                cnt += 1\n            else:\n                break\n        ridx += 1\n    ans = max(ans, ridx-lidx)\nprint(ans)", "import sys\n\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\n\nn,k = list(map(int, input().split()))\ns = input()\n\nans = 0\ncnt = 0\nright = 1\nfor left in range(0, n):\n    if left == 0 and s[left] == '0':\n        cnt += 1\n\n    if left > 0 and s[left] == '1' and s[left-1] == '0':\n        cnt -= 1\n\n    while right <= n - 1:\n        if s[right] == '0' and s[right-1] == '1':\n            if cnt < k:\n                cnt += 1\n            else:\n                break\n        right += 1\n\n    ans = max(ans, right - left)\n\nprint(ans)\n", "from itertools import groupby\nfrom math import ceil\n\nn, k = list(map(int, input().split()))\ns = input()\n\nblock = [sum(1 for _ in it) for k, it in groupby(s)]\nif s[0] != '1':\n    block.insert(0, 0)\n\nm = len(block)\nleft, right = 0, 2*k\nres = val = sum(block[left:right-1])\nwhile right <= m:\n    val += block[right-1] if right == m else block[right-1] + block[right]\n    res = max(res, val)\n    val -= block[left] + block[left+1]\n    left += 2\n    right += 2\nprint(res)\n", "N,K = list(map(int,input().split()))\nS = list(input())\n\nS_zero={}\nS_zero_group = 0\ns_befor = ''\nfor s_idx,s in enumerate(S):\n    if s != s_befor:\n        if s == '0':\n            S_zero_group += 1\n            S_zero[S_zero_group] = [s_idx-1]\n        elif s == '1':\n            if S_zero_group in S_zero.keys():\n                S_zero[S_zero_group].append(s_idx)\n            \n    s_befor = s\n    \nif S[-1] == '0':\n    S_zero[S_zero_group].append(N)\n    \nif S_zero_group <= K:\n    ans_ = N\nelse:   \n    ans_=0\n    for g_s in range(1,S_zero_group-K+2):\n        g_e = g_s + K - 1\n#         print('====',g_s,g_e)\n        s = 0\n        e = N-1\n\n        if g_s != 1:\n            s = S_zero[g_s-1][1]\n        if g_e != S_zero_group:\n            e = S_zero[g_e+1][0]\n\n        ans= e-s+1\n        if ans > ans_:\n            ans_=ans\n\nprint(ans_)", "import sys\nimport numpy as np\ndef input(): return sys.stdin.readline().rstrip()\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return list(mi())\n\n\ndef main():\n    n, k = mi()\n    s = input()\n    a = [0]\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            a.append(i)\n    a.append(n)\n    ans = 0\n    i, e = 0, 0\n    m = len(a)\n    for i in range(m):\n        e = i+2*k\n        if s[a[i]] == '1':\n            e += 1\n        e = min(e, m-1)\n        ans = max(ans, a[e]-a[i])\n        if e == m-1:\n            break\n    print(ans)\n    \n\n\n\n    \n        \ndef __starting_point():\n    main()\n__starting_point()", "n, k = list(map(int, input().split()))\ns = list(map(int, input()))\ncnt = 0\nans = 0\nstart = 0\nfor i in range(n):\n    if s[i] == 0 and (i == 0 or s[i - 1] == 1):\n        cnt += 1\n    \n    if cnt == k + 1:\n        while True:\n            start += 1\n            if s[start - 1] == 0 and s[start] == 1:\n                break\n        cnt -= 1\n    ans = max(ans, i - start + 1)\n\nprint(ans)\n", "N,K=list(map(int,input().split()))\nS=input()\nleft=0\nright=0\nnumofturn=0\nif N==1:\n    print((int(S)))\nelse:\n    if S[0]==\"0\":\n        while(right<N):\n            if S[right]==\"0\":\n                right+=1\n            else:\n                break\n    #print(right)\n    right=max(right,1)\n    while(right<N and numofturn<K):\n        if S[right]==\"1\" and S[right-1]==\"0\":\n            numofturn+=1\n        right+=1\n    while(right<N):\n        if S[right]==\"1\":\n            right+=1\n        else:\n            break\n    #print(right)\n    ans=right\n    while(right<N and left<N):\n        if numofturn==K:\n            while(1):\n                left+=1\n                if left<N:\n                    if S[left]!=\"1\" or S[left-1]!=\"0\":\n                        continue\n                numofturn-=1\n                break\n        else:\n            while(1):\n                right+=1\n                if right<N:\n                    if S[right]!=\"0\" or S[right-1]!=\"1\":\n                        continue\n                numofturn+=1\n                if right==N:\n                    ans=max(ans,right-left)\n                else:\n                    ans=max(ans,right-left)\n                #print(ans,left,right)\n                break\n    print(ans)\n    #print(left,right)\n", "n, k = list(map(int, input().split()))\ns = input()\na = [0]\nfor i in range(n):\n    if (s[i] == \"0\") == (len(a) % 2 == 1):\n        a.append(1)\n    else:\n        a[-1] += 1\nt = [0]\nfor i in a:\n    t.append(i + t[-1])\nans = 0\nfor i in range(len(t)):\n    if i % 2 == 0:\n        # print(min(i + 2 * k + 1, len(t) - 1))\n        ans = max(ans, t[min(i + 2 * k + 1, len(t) - 1)] - t[i])\nprint(ans)\n", "\nN, K = list(map(int, input().split()))\nS = input()\n\nl = [0]\ncurr = '1'\nfor c in S:\n    if c != curr:\n        l.append(1)\n        curr = c\n    else:\n        l[-1] += 1\nif curr == '0':\n    l.append(0)\n\nn_group = len(l) // 2\nsum_ = 0\nk = min(K, n_group)\nfor i in range(k):\n    sum_ += l[2*i] + l[2*i+1]\nsum_ += l[2*k]\nmax_ = sum_\nfor i in range(k, n_group):\n    sum_ -= l[2*i-2*K] + l[2*i+1-2*K]\n    sum_ += l[2*i+1] + l[2*i+2]\n    max_ = max(max_, sum_)\nprint(max_)\n", "from itertools import groupby\n\nn,k = list(map(int,input().split()))\ns = input()\n\ngrouped = groupby(s)\n\nres = []\n\nif s[0] == '0':\n\tres.append((1,0))\n\nfor l,v in grouped:\n\tres.append( (l,len(list(v))) )\n\nif s[len(s)-1] == '0':\n\tres.append((1,0))\n\nnow = 0\nans = 0\nfor i in range(min(len(res),2*k+1)):\n\tnow += res[i][1]\n\nans = max(ans,now)\n\nfor i in range(2*k+1,len(res),2):\n\tnow -= res[i-2*k-1][1]\n\tnow -= res[i-2*k][1]\n\n\tnow += res[i][1]\n\tnow += res[i+1][1]\n\n\tans = max(ans,now)\n\nprint(ans)\n\n", "import sys\n \nN, K = map(int, sys.stdin.readline().strip().split())\nS = sys.stdin.readline().strip()\n \nl = x = ans = 0\nfor r in range(N):\n    if S[r] == '0' :\n        if r == 0 or S[r-1] == '1':\n            x += 1\n    if x > K:\n        while S[l] == '1':\n            l += 1\n        while S[l] == '0':\n            l += 1\n        x -= 1\n    ans = max(ans, r-l+1)\nprint(ans)", "import itertools\nn, k = list(map(int, input().split()))\nlist_S = list(input())\n\nlist_N = []\ngr = itertools.groupby(list_S)\ncnt = 0\n\nfor key, group in gr:\n    list_N.append([key, len(list(group))])\n    if key == \"0\":\n        cnt += 1\n\nif cnt <= k:\n    print(n)\nelse:\n    if list_N[0][0] == \"0\":\n        list_N.insert(0, [\"1\", 0])\n    if list_N[-1][0] == \"0\":\n        list_N.append([\"1\", 0])\n\n    s = 0\n    for i in range(2 * k + 1):\n        s += list_N[i][1]\n    ans = s\n\n    for i in range(2 * k + 2, len(list_N), 2):\n        s += list_N[i][1] + list_N[i - 1][1] - list_N[i - 2 * k - 2][1] - list_N[i - 2 * k - 1][1]\n        ans = max(ans, s)\n\n    print(ans)\n", "from itertools import groupby\n\nn,k = list(map(int,input().split()))\ns = input()\n\ngrouped = groupby(s)\n\nres = []\n\nif s[0] == '0':\n\tres.append(0)\n\nfor l,v in grouped:\n\tres.append( (len(list(v))) )\n\nif s[len(s)-1] == '0':\n\tres.append(0)\n\nnow = 0\nans = 0\nfor i in range(min(len(res),2*k+1)):\n\tnow += res[i]\n\nans = max(ans,now)\n\nfor i in range(2*k+1,len(res),2):\n\tnow -= res[i-2*k-1]\n\tnow -= res[i-2*k]\n\n\tnow += res[i]\n\tnow += res[i+1]\n\n\tans = max(ans,now)\n\nprint(ans)\n\n", "N, K = map(int, input().split())\nS = input()\nL = [0]\nX = ['1']\npos = 0\nfor i in range(N):\n  if S[i] != X[pos]:\n    L.append(1)\n    X.append(S[i])\n    pos += 1\n  else:\n    L[pos] += 1\nwhile pos < 2 * K + 4:\n  L.append(0)\n  X.append('1')\n  pos += 1\nL.append(0)\nX.append('1')\nn = len(L)\nfor i in range(1, n):\n  L[i] += L[i-1]\nM = L[2*K]\nfor i in range(1, n-2*K):\n  if X[i] == '1':\n    M = max(L[2*K+i] - L[i-1], M)\nprint(M)", "N, K = map(int, input().split())\nS = input()\nA, B = [], []\ncnt_0, cnt_1 = 0, 0\nfor i in range(N):\n    if S[i] == '0':\n        cnt_0 += 1\n        if cnt_1 > 0: \n            A.append(cnt_1)\n        cnt_1 = 0\n    else:\n        cnt_1 += 1\n        if cnt_0 > 0: \n            A.append(-cnt_0)\n        cnt_0 = 0\n\nif cnt_1 > 0: \n    A.append(cnt_1)\nif cnt_0 > 0: \n    A.append(-cnt_0)\n    \nM = len(A)\nminus_cnt = 0\ns = 0\nright = M\nfor i in range(M):\n    if A[i] < 0 and minus_cnt == K:\n        right = i\n        break\n    if A[i] < 0:\n        minus_cnt += 1\n    s += abs(A[i])\n\nleft = 0\nans = s\nwhile right < M:\n    for i in range(2):\n        if not right < M: break\n        s += abs(A[right])\n        right += 1\n\n    while left < M:\n        if A[left] < 0: \n            s -= abs(A[left])\n            left += 1\n            break\n        s -= abs(A[left])\n        left += 1\n    \n    ans = max(ans, s)\n\nprint(ans)", "N,K=map(int,input().split())\nS='1'+input()+'1'\nA=[]\nnow='1'\nC=0\nfor s in S:\n    if s==now:\n        C+=1\n    else:\n        A.append(C)\n        now=s\n        C=1\nA.append(C)\nA[0]-=1\nA[-1]-=1\nB=[sum(A[:2*K+1])]\ni=0\nj=2*(K+1)\nwhile j<len(A):\n    b=B[-1]+sum(A[j-1:j+1])-sum(A[i:i+2])\n    B.append(b)\n    i+=2\n    j+=2\nprint(max(B))", "n,k = map(int,input().split())\ns = input()\na = []\nb = []\nc = 0\nd = \"1\"\nfor i in s:\n  if d == i:\n    c += 1\n  else:\n    if d == \"1\":\n      b.append(c)\n      d = \"0\"\n      c = 1\n    else:\n      a.append(c)\n      d = \"1\"\n      c = 1\nif d == \"1\":\n  b.append(c)\nelse:\n  a.append(c)\n  b.append(0)\nif k >= len(a):\n  print(n)\nelse:\n  e = sum(a[:k])+sum(b[:k+1])\n  ans = e\n  for i in range(len(a)-k):\n    e = e-a[i]-b[i]+a[i+k]+b[i+k+1]\n    ans = max(ans,e)\n  print(ans)", "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn, k = MAP()\ns = input()\ncount = 0\nflag = 1\nque = deque([0]*(2*k+1))\nans = 0\ntmp = 0\nfor x in s:\n    if x == '0':\n        if flag == 1:\n            que.append(count)\n            tmp += count - que.popleft()\n            ans = max(ans, tmp) \n            count = 0\n        flag = 0\n        count += 1\n    else:\n        if flag == 0:\n            que.append(count)         \n            tmp += count - que.popleft()\n            count = 0\n        flag = 1\n        count += 1\n\nque.append(count)\ntmp += count - que.popleft()\nif s[-1] == '0':\n    tmp -= que.popleft()\nans = max(ans,sum(que))\nprint(ans)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[13]:\n\n\nn, k = list(map(int, input().split()))\ns = list(input())\n\n\n# In[16]:\n\n\ncnt = []\nif s[0] == '0':\n    cnt.append(0)\ni = 0\nwhile i < n:\n    j = i\n    while j < n and s[j] == s[i]:\n        j += 1\n    cnt.append(j- i)\n    i = j\nif s[-1] == '0':\n    cnt.append(0)\nm = len(cnt)\ncs = [0] * (m+1)\nfor i in range(m):\n    cs[i+1] = cs[i] + cnt[i]\nans = 0\nfor l in range(0, m+1, 2):\n    r = l + 2 * k + 1\n    if r > m:\n        r = m\n    ans = max(ans, cs[r] - cs[l])\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n", "N, K = list(map(int, input().split()))\nS = input()\n\nS = S + 'E'   # \u7d42\u7aef\u51e6\u7406\nans = -1    # \u7b54\u3048\u306e\u521d\u671f\u5024\uff08\u5341\u5206\u306b\u5c0f\u3055\u3044\u5024\uff09\n\n# \u7acb\u3063\u305f\u4eba\u306e\u9023\u7d9a\u306e\u6570\nif (S[0] == '0'):\n    stand = 1\nelse:\n    stand = 0\n\nL = 0\nR = 0\n\n# \u5c3a\u53d6\u308a\u6cd5\nwhile (R < N):\n    # \u53f3\u7aef\u3092\u9032\u3081\u308b\u3053\u3068\u304c\u53ef\u80fd\uff08\u7acb\u3063\u305f\u4eba\u306e\u9023\u7d9a\u306e\u6570\u304cK\u4ee5\u4e0b\uff09\u306a\u3089\u3001\u53f3\u7aef\u3092\u9032\u3081\u308b\n    if (stand <= K):\n        # \u7acb\u3063\u305f\u4eba\u306e\u9023\u7d9a\u306e\u6570\u304c\u5897\u3048\u308b\u306a\u30891\u8db3\u3059\n        if (S[R] == '1' and S[R + 1] == '0'):\n            stand += 1\n        # \u7b54\u3048\u306e\u66f4\u65b0\n        ans = max(ans, R - L + 1)\n        R += 1\n    # \u9032\u3081\u3089\u308c\u306a\u3044\u5834\u5408\u3001\u5de6\u7aef\u3068\u53f3\u7aef\u304c\u540c\u3058\u306a\u3089\u4e21\u8005\u3092\u9032\u3081\u308b\n    # \u5de6\u7aef\u304c\u53f3\u7aef\u3092\u8ffd\u3044\u8d8a\u3055\u306a\u3044\u305f\u3081\u306e\u51e6\u7406\n    elif (L == R):\n        L += 1\n        R += 1\n    # \u305d\u308c\u4ee5\u5916\u306f\u5de6\u7aef\u306e\u307f\u3092\u9032\u3081\u308b\n    else:\n        # \u7acb\u3063\u305f\u4eba\u306e\u9023\u7d9a\u306e\u6570\u304c\u6e1b\u308b\u306a\u30891\u6e1b\u3089\u3059\n        if (S[L] == '0' and S[L + 1] == '1'):\n            stand -= 1\n        L += 1\n        # \u5de6\u7aef\u306e\u307f\u3092\u9032\u3081\u305f\u5834\u5408\u306f\u7b54\u3048\u3092\u66f4\u65b0\u3057\u5f97\u306a\u3044\n\nprint(ans)", "n, k = map(int, input().split())\ns = input()\nl = [0]\nfor i in range(n - 1):\n    if s[i] != s[i + 1]:\n        l.append(i + 1)\nl += [n]\nle = len(l)\nans = 0\nfor i in range(le - 1):\n    if s[l[i]] == \"0\":\n        ans = max(ans, l[min(le - 1, k * 2 + i)] - l[i])\n    else:\n        ans = max(ans, l[min(le - 1, k * 2 + i + 1)] - l[i])\nprint(ans)"]