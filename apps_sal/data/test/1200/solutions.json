["def gcd(a, b):\n    if(a==0):\n        return b\n    return gcd(b%a, a)    \n\nn=int(input())\nv=list(map(int,input().split()))\nv.sort()\nans=v[1]-v[0]\nfor i in range(2, n):\n    ans=gcd(ans, v[i]-v[i-1])\nprint((v[len(v)-1]-v[0])//ans+1-n) ", "def gcd(a, b):\n    a = int(a)\n    b = int(b)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nn = int(input())\na = input().split()\nfor i in range(0, n):\n    a[i] = int(a[i])\na = sorted(a)\nd = 0\nfor i in range(1, n):\n    d = gcd(d, a[i] - a[i - 1])\nprint(int((a[n-1] - a[0]) / d - n + 1))", "def lcm(a, b):\n    m = a*b\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a+b\n\n\nn = int(input())\ns = input()\npoints = [int(i) for i in s.split()]\npoints = sorted(points)\n\ndist = []\n\nfor i in range(len(points) - 1):\n    dist.append(points[i + 1] - points[i])\n\n\nc = dist[0]\nfor i in range(1, len(dist)):\n    c = lcm(c, dist[i])\n\nans = 0\nfor i in range(len(dist)):\n    ans += dist[i] // c - 1\n\nprint(int(ans))\n\n\n", "from fractions import gcd\nfrom functools import reduce\n\nn = int(input())\nx = list(map(int, input().split()))\nx.sort()\n\ndifs = []\nfor i in range(len(x)-1):\n  difs.append(x[i+1]-x[i])\n\ndif = reduce(gcd, difs)\n\nmmin = x[0]\nmmax = x[-1]\nx = set(x)\ncnt = (mmax-mmin+dif)//dif-n\nprint(cnt)\n", "def gcd(a,b):\n\tif a==0:\n\t\treturn b\n\twhile b:\n\t\ta%=b\n\t\t[a,b]=[b,a]\n\treturn a\n\nn=int(input())\na=[int(x) for x in input().split()]\na.sort()\ntek=0\nres=0\nfor x in a:\n\tif x!=a[0]:\n\t\tres=gcd(res,x-tek)\n\ttek=x\nprint((tek-a[0])//res-n+1)", "n = int(input())\n\nm = list(map(int, input().split()))\n\nm.sort()\n\nmin_dif = m[1] - m[0] \n\ndef nod(a, b):\n    if b == 0:\n        return a\n    else:\n        return nod(b, a %b)\n\nfor i in range(1, n):\n    min_dif = nod(min_dif, m[i] - m[i-1])\n\nans = 0\n\nfor i in range(1, n):\n    if m[i] - m[i-1] > min_dif:\n        ans += (m[i] - m[i-1]) / min_dif - 1\n\nprint(int(ans))\n", "n = int(input())\na = sorted([int(x) for x in input().split()])\n\n\ndef mcd(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n\nmin_ = mcd(a[1] - a[0], a[2] - a[1])\nfor i in range(3, n):\n    min_ = mcd(min_, a[i] - a[i - 1])\n    if min_ == 1:\n        break\n# if min_ == 1:\n#     print(a[-1] - a[0] - n + 2)\n# else:\ncount = 0\n\nfor i in range(1, n):\n    count += (a[i] - a[i - 1]) // min_ - 1\n\nprint(count)\n\n", "from fractions import gcd\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nfor i in range(1, len(a)):\n    a[i-1] = a[i] - a[i-1]\na.pop()\ng = a[0]\ns = 0\nfor i in range(len(a)):\n    s += a[i]\n    g = gcd(g, a[i])\ns = s // g - len(a)\nprint(s)", "def gcd(a, b):\n\n\twhile a != 0 and b != 0:\n\n\t\tif b > a:\n\t\n\t\t\tb = b % a\n\t\n\t\telse:\n\n\t\t\ta = a % b\n\n\tif a == 0:\n\n\t\treturn b\n\n\telse:\n\t\t\n\t\treturn a\n\n\nn = int(input())\n\na = input()\n\na = a.split()\n\nfor i in range(len(a)):\n\t\n\ta[i] = int(a[i])\n\na = sorted(a)\n\nb = a[1] - a[0]\n\nfor i in range(0, len(a) - 1):\n\t\n\tb = gcd(b, a[i + 1] - a[i])\n\ncnt = (a[len(a) - 1] - a[0]) // b + 1\n\nprint(cnt - n)", "def f(a, b):\n    while a and b:\n        if (a<b):\n            b = b%a\n        else :\n            a = a%b\n    return a+b;\n    \n\n    \nn = int(input())\n\nList = []\nfor i in range(n):\n    List.append(0)\n\ni = 0\nfor s in input().split(' '):\n     List[i] = int(s)\n     i = i+1\n    \nList.sort()\nif not (n-1):\n    print(0)\nelse:\n    kek = List[1]-List[0]\n    for i in range(n-2):\n        kek = f(kek, List[i+2]-List[i+1])\n    ans = ((List[n-1]-List[0])/kek + 1 - n)\n    print(int(ans))\n\n", "def Evkl(a, b):\n    while a!=0 and b!=0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n\nn = int(input())\nstring = input()\nx = []\nlens = []\nfor i in string.split(\" \"):\n    x.append(int(i))\nx.sort()\nfor i in range(0, n - 1):\n    lens.append(abs(x[i] - x[i + 1]))\nlens.sort()\nmin_len = lens[0]\nmax_len = lens[-1]\nfor i in range(1, n - 1):\n    if min_len == 1:\n        break\n    if lens[i] % min_len != 0:\n        min_len = Evkl(lens[i], min_len)\nprint(abs(x[0] - x[-1]) // min_len - n + 1)", "n = int(input())\na = sorted([int(x) for x in input().split()])\n\n\ndef mcd(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n\n\nmin_ = mcd(a[1] - a[0], a[2] - a[1])\nfor i in range(3, n):\n    min_ = mcd(min_, a[i] - a[i - 1])\n    if min_ == 1:\n        break\ncount = 0\n\nfor i in range(1, n):\n    count += (a[i] - a[i - 1]) // min_ - 1\n\nprint(count)\n", "#python 3.5.2\nimport math\nstr=input()\nn = int(str)\n\n\na = list(map(int, input().split()))\na.sort()\n\nj=-1\nfor i in range(0,n-1):\n    a[i]=abs(a[i]-a[i+1])\n    if j==-1:\n        j=a[i]\n    else:\n        j=math.gcd(j,a[i])\n    \n\nsum=0\nfor i in range(0,n-1):\n    sum=sum+(a[i]//j-1)\n\nprint (sum)\n", "def nod(a, b):\n    if (b == 0):\n        return a;\n    else:\n        return nod(b, a%b);\n    \ndef main():\n    n = int(input());\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    no = 0;\n    for i in range(1, n):\n        no = nod(arr[i] - arr[i-1], no)\n    ans = 0;\n    for i in range(1, n):\n        ans += -1 + (arr[i] - arr[i-1]) // no\n    print(ans)\n    \n    \nmain()\n", "def nod(a, b):\n    while a!=0 and b!=0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return (a+b)\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nd = nod(a[1] - a[0], a[2] - a[1])\nfor i in range(2, n - 1):\n    d = nod(a[i + 1] - a[i], d)\ncount = 0\nfor i in range(n - 1):\n    count += ((a[i + 1] - a[i]) // d - 1)\nprint(count)\n    \n", "from fractions import gcd\n\nn = int(input())\nv = [int(x) for x in input().split()]\n\nv.sort()\n\n    \ng = 0\nlast = v[0]\nfor i in v:\n    if i != last:\n        g = gcd(g, i-last)\n        last = i\n\n\nans = (v[n-1] - v[0]) // g - n + 1\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\nfrom functools import reduce\n\nn = input()\n\nints = [int(x) for x in input().split(' ')]\nints = sorted(ints)\ndists = [ints[x]-ints[x-1] for x in range(1, len(ints))]\n\ngcd = reduce(math.gcd, dists)\n\nans = reduce(lambda a,b: a + (b//gcd-1), dists, 0)\n\nprint(ans)\n", "from fractions import gcd\nn=int(input())\na=input().split()\nfor i in range(0, n):\n    a[i]=int(a[i])\n\na.sort()\ndists=[]\nfor i in range(1, n):\n    dists.append(a[i]-a[i-1])\ns=dists[0]\ngdc=dists[0]\nfor i in range(1,len(dists)):\n    gdc=gcd(dists[i],gdc)\n    s+=dists[i]\nprint(s//gdc-n+1)", "def gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\na = input()\na = int(a)\nx = sorted(list(map(int, input().split())))\nmn = 0\ncnt = 0\ni = 0\nfor i in range(a):\n     if cnt > 0:\n          mn = gcd(x[i] - x[i - 1], mn)\n     cnt = cnt + 1\nans = 0\ncnt = 0;\ni = 0\nfor i in range(a):\n     if cnt > 0:\n          ans = ans + ((x[i] - x[i - 1]) // mn - 1)\n     cnt = cnt + 1\nprint(ans)", "from fractions import gcd\nn = int(input())\nnode = sorted(list(map(int, input().split())))\n\n\nl = int(gcd(node[1] - node[0], node[2] - node[1]))\n\ncou = int(0)\nfor i in range(n - 2):\n    l = gcd(l, node[i + 2] - node[i + 1])\n\n\nfor i in range(n - 1):\n    cou = int(cou + (node[i + 1] - node[i]) / l - 1)\nprint (cou)", "import fractions\nn = int(input())\ns = [int(x) for x in input().split()]\ns.sort(reverse=True)\nnod = abs(s[0] - s[1])\nfor i in range(1, n):\n    delta = abs(s[i] - s[i - 1])\n    nod = fractions.gcd(nod, delta)\nmax_i = s[0]\nmin_i = s[-1]\nprint((max_i - min_i) // nod + 1 - n)", "def gcd(a, b):\n    while b != 0:\n        tmp = a\n        a = b\n        b = tmp % a\n    return a\n\ninput()\nx = sorted([int(i) + 1000000001 for i in input().split()])\n\nans = x[1] - x[0]\nfor i in range(1, len(x)):\n    ans = gcd(x[i] - x[i - 1], ans)\n\nres = 0\nfor i in range(1, len(x)):\n    res += (x[i] - x[i - 1]) // ans - 1\n\nprint(res)\n", "from math import gcd\n\nn = int(input())\na = [int(i) for i in input().split()]\na.sort()\ng = 0\nfor i in a:\n\tg = gcd(g, i - a[0])\nprint((a[-1] - a[0]) // g - n + 1)\n", "n = input()\n\nx = list(map(int, input().split()))\n\nx.sort()\n\ndef gcd(a, b):\n    if (b == 0):\n        return a\n    else:\n        return gcd(b, a % b)\n\ng = x[1] - x[0]\n\nfor i in range(2, len(x)):\n    g = gcd(g, x[i] - x[i - 1])\n\nacc = 0;\n\nfor i in range(1, len(x)):\n    acc = acc + (x[i] - x[i - 1]) / g - 1\n\nprint(int(acc))\n"]