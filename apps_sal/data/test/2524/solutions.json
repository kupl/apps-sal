["def main():\n  N=int(input())\n  A=list(map(int,input().split()))\n\n  mod=10**9+7\n  ans=0\n\n  for i in range(60):\n      a=0\n      for x in A:\n          if x>>i&1:\n              a+=1\n      ans+=a*(N-a)*pow(2,i,mod)\n      ans%=mod\n  print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\na=[int(i) for i in input().split()]\n\na_bin=[]\n\nfor i in a:\n    a_bin.append(format(i, '#062b')[2:])\n\n\n\ndef get_keta_num(keta,a_list):\n    zero=0\n    one=0\n    for i in a_list:\n        if i[-keta]==\"0\":\n            zero+=1\n        else:\n            one+=1\n    return zero*one\n\nans=0\nfor i in range(1,61):\n    ans+=(2**(i-1))*get_keta_num(i,a_bin)\n    ans=ans%(10**9+7)\n\nprint(ans)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    res = 0\n    for i in range(60):\n        cnt_one = 0\n        for a in A:\n            if (a >> i) & 1:\n                cnt_one += 1\n        res += (n - cnt_one) * cnt_one * pow(2, i)\n        res %= mod\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def readinput():\n    n=int(input())\n    l=list(map(int,input().split()))\n    return n,l\n\ndef main(n,a):\n    MOD=10**9+7\n    hist=[0]*61\n    bs=[]\n    for i in range(n):\n        # s=list(reversed(bin(a[i])[2:]))\n        # for j in range(len(s)):\n        #     if s[j]=='1':\n        #         hist[j]+=1\n        # bs.append(s)\n\n        s=bin(a[i])[2:]\n        for j in range(len(s)):\n            if s[j]=='1':\n                hist[len(s)-j-1]+=1\n        # j=0\n        # ai=a[i]\n        # while ai>0:\n        #     if ai&1==1:\n        #         hist[j]+=1\n        #     ai = ai >> 1\n        #     j+=1\n\n\n    #print(bs)\n    #print(hist)\n    sum=0\n    # for i in range(n-1):\n    #     s=bs[i]\n    #     b=1\n    #     for j in range(len(s)):\n    #         if s[j]=='0':\n    #             sum=(sum+hist[j]*b)%MOD\n    #         else:\n    #             sum=(sum+( n-i-hist[j] )*b)%MOD\n    #             hist[j]-=1\n    #         b*=2\n    #     for j in range(len(s),61):\n    #         sum=(sum+hist[j]*b)%MOD\n    #         b*=2\n    b=1\n    for j in range(61):\n        sum=(sum+( hist[j]*(n-hist[j])*b )%MOD )%MOD\n        b*=2\n\n    return sum\n\ndef __starting_point():\n    n,l=readinput()\n    ans=main(n,l)\n    print(ans)\n\n__starting_point()", "def main():\n  n=int(input())\n  a=list(map(int,input().split()))\n  div,ans=1,0\n  mod=10**9+7\n  for i in range(60):\n    cnt=0\n    for j in a:\n      cnt+=(j>>i)&1\n    ans+=(cnt*(n-cnt)*div)%mod\n    div=(div*2)%mod\n  print(ans%mod)\n  \ndef __starting_point():\n  main()\n__starting_point()", "import numpy as np\n\ndef main():\n  n=int(input())\n  a=list(map(int,input().split()))\n  a=np.array(a, dtype='int64')\n  mod=10**9+7\n  div,ans=1,0\n  for i in range(60):\n    ca=(a>>i)&1\n    cnt=int(ca.sum())\n    ans+=(cnt*(n-cnt)*div)%mod\n    div=(div*2)%mod\n  print(ans%mod)\n  \ndef __starting_point():\n  main()\n__starting_point()", "def main():\n  n = int(input())\n  a = list(map(int,input().split()))\n  MOD = 10 ** 9 + 7\n  digit = 60\n\n  ans = 0\n  for j in range(digit):\n    o = 0\n    for i in a:\n      if (i >> j) & 1:\n        o += 1\n    ans += o*(n-o)*2**j\n    ans %= MOD\n  print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "# if required XOR, re-solve later.\n# just copy and paste from https://atcoder.jp/contests/abc147/submissions/14707076\nfor i in range(pow(10,6)):\n    pass\n# added due to avoid duplicated search list wtih the same solver.\nn = int(input())\na = list(map(int,input().split()))\nd = 0\nm = 10**9+7\nfor i in range(60):\n    b = 1<<i\n    l = len([1for j in a if j&b])\n    d += l*(n-l)*b%m\n    d %= m\nprint(d)", "def main():\n  N=int(input())\n  A=list(map(int,input().split()))\n  mod=10**9+7\n  ans=0\n  for i in range(60):\n    c=0\n    for j in A:\n      if j>>i&1:\n        c+=1\n    ans+=pow(2,i,mod)*c*(N-c)\n    ans%=mod\n  print(ans)\ndef __starting_point():\n  main()\n__starting_point()", "def readinput():\n    n=int(input())\n    l=list(map(int,input().split()))\n    return n,l\n\ndef main(n,a):\n    MOD=10**9+7\n    hist=[0]*61\n    bs=[]\n    for i in range(n):\n        # s=list(reversed(bin(a[i])[2:]))\n        # for j in range(len(s)):\n        #     if s[j]=='1':\n        #         hist[j]+=1\n        # bs.append(s)\n\n        s=bin(a[i])[2:]\n        for j in range(len(s)):\n            if s[j]=='1':\n                hist[len(s)-j-1]+=1\n        # j=0\n        # ai=a[i]\n        # while ai>0:\n        #     if ai&1==1:\n        #         hist[j]+=1\n        #     ai = ai >> 1\n        #     j+=1\n\n\n    #print(bs)\n    #print(hist)\n    #print(hist)\n    sum=0\n    # for i in range(n-1):\n    #     s=bs[i]\n    #     b=1\n    #     for j in range(len(s)):\n    #         if s[j]=='0':\n    #             sum=(sum+hist[j]*b)%MOD\n    #         else:\n    #             sum=(sum+( n-i-hist[j] )*b)%MOD\n    #             hist[j]-=1\n    #         b*=2\n    #     for j in range(len(s),61):\n    #         sum=(sum+hist[j]*b)%MOD\n    #         b*=2\n    b=1\n    for j in range(61):\n        sum=(sum+( hist[j]*(n-hist[j])*b )%MOD )%MOD\n        b*=2\n\n    return sum\n\ndef __starting_point():\n    n,l=readinput()\n    ans=main(n,l)\n    print(ans)\n\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\n\nm = 1000000007\n\nresult = 0\nfor i in range(60):\n    j = 1 << i\n    c = sum((a & j) >> i for a in A)\n    result += (c * (N - c)) << i\n    result %= m\nprint(result)\n", "import numpy as np\n\n\ndef solve():\n    ans = 0\n    mask = 1\n    for i in range(60):\n        one_cnt = np.sum(A >> i & 1)\n        tmp = one_cnt * (N - one_cnt)\n        tmp %= MOD\n        ans += tmp * mask\n        ans %= MOD\n        mask <<= 1\n        mask %= MOD\n    return ans\n\n\nN, *A = list(map(int, open(0).read().split()))\nA = np.array(A, dtype=np.int64)\nMOD = 1_000_000_007\nprint((solve()))\n", "import numpy as np\n\nN=int(input())\nA=np.array([int(x) for x in input().split()])\n\nans=0\nM=pow(10,9)+7\nfor i in range(100):\n  one=np.sum((A>>i)&1)\n  zero=N-one\n  ans+=(one*zero)%M*pow(2,i,M)%M\n  ans%=M\n  #print(one,zero)\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\n#n = int(input())\n#l = list(map(int, input().split()))\n\n'''\na=[]\nb=[]\nfor i in range():\n    A, B = map(int, input().split())\n    a.append(A)   \n    b.append(B)'''\nimport numpy as np\nn=int(input())\na = np.array([int(i) for i in input().split()])\n\nans=0\nfor i in range(60):\n    cnt=np.count_nonzero(a&1)\n    ans+=(n-cnt)*cnt*(2**i)\n    if ans>=10**9+7:\n        ans%=(10**9+7)\n    a>>=1\nprint(ans)", "import numpy as np\nn = int(input())\na = np.array(list(map(int, input().split())))\n\nbit = [0] * 60\nmod = 10 ** 9 + 7\nans = 0\nfor i in range(60):\n    n1 = np.count_nonzero((a >> i) & 1)\n    n0 = n - n1\n    ans += (2 ** i) * n1 * n0 % mod\nprint(ans % mod)", "import numpy as np\nN, *A = map(int, open(0).read().split())\nA = np.array(A, dtype=np.int64)\nmod = 10**9 + 7\n\nans = 0\nfor i in range(60):\n    mask = 1 << i\n    cnt = np.count_nonzero(A&mask)\n    x = cnt * (N-cnt)\n    x *= mask % mod\n    ans += x\n    ans %= mod\n\nprint(ans)", "import numpy as np\n\nN=int(input())\nA=np.array([int(x) for x in input().split()])\n\nans=0\nM=pow(10,9)+7\nfor i in range(100):\n  one=int(np.sum((A>>i)&1))\n  zero=N-one\n  ans+=(one*zero)*pow(2,i)\n  ans%=M\n  #print(one,zero)\nprint(ans)", "import numpy as np\n\nN = int(input())\nA = np.fromiter(list(map(int, input().split())), np.int64)\n\nm = 1000000007\n\nresult = 0\nfor bit in range(60):\n    c = int((A & 1).sum())\n    A >>= 1\n    result = (result + c * (N - c) * (1 << bit)) % m\nprint(result)\n", "import math\nimport numpy as np\nN = int(input())\nARR = list(map(int,input().split()))\n\ndef calculate(n,arr):\n\n    maxValue = max(arr)\n\n    if maxValue == 0:\n        maxNum = 1\n    else:\n        maxNum = math.ceil(math.log(maxValue,2))\n\n    arr = np.array(arr)\n\n    oneArray =  [0]*(maxNum+1)\n    zeroArray = [0]*(maxNum+1)\n\n    for i in range(maxNum+1):\n        s = (arr >> i) & 1\n\n        a = np.count_nonzero(s)\n\n        oneArray[i] = a\n        zeroArray[i] = n - a\n\n\n    finalResult = 0\n    for  i in range(maxNum + 1):\n        finalResult += 2**i * oneArray[i] * zeroArray[i]\n\n    print(finalResult % (10**9 + 7))\n\n\n\n\n\ncalculate(N, ARR)", "N = int(input())\nA = list(map(int, input().split()))\n\nm = 1000000007\n\nresult = 0\nfor i in range(60):\n    j = 1 << i\n    c = sum(a & j for a in A) >> i\n    result += (c * (N - c)) << i\n    result %= m\nprint(result)\n", "def XorSum4():\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 10**9+7\n    ans = 0\n    \n    for i in range(60):\n        count = 0\n        for j in a:\n            count += (j>>i)&1\n        num = (count*(n-count))%mod\n        ans += num*2**i\n        ans %= mod\n    print(ans)\n    \ndef __starting_point():\n    XorSum4()\n    \n\n__starting_point()", "#!/usr/bin/env python3\nimport numpy as np\n\n\ndef main():\n    MOD = 10 ** 9 + 7\n    limit = 60\n    N = int(input())\n    A = np.array(input().split(), dtype=np.int64)\n\n    ans = 0\n    for n in range(limit):\n        res = A & (1 << n)\n        x = np.count_nonzero(res)\n        y = N - x  # 0\u306e\u6570\n        x *= y\n        for _ in range(n):\n            x *= 2\n            x %= MOD\n        ans += x\n    print((ans % MOD))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n\nn = int(input())\na = np.array([int(x) for x in input().split()])\n\nans = 0\nmod = pow(10, 9)+7\nfor i in range(100):\n  c = np.sum((a>>i)&1)\n  ans += (c*(n-c)%mod)*pow(2, i, mod)%mod\n  ans %= mod\n\nprint(ans)", "import sys\nstdin = sys.stdin\n \nmod = 10**9 + 7\n \ndef ns(): return stdin.readline().rstrip()\ndef ni(): return int(ns())\ndef na(): return list(map(int, stdin.readline().split()))\n \ndef main():\n    n = ni()\n    a = na()\n    ans = 0\n    for i in range(61):\n        cnt = 0\n        for ai in a:\n            if (ai >> i) & 1:\n                cnt += 1\n        ans += ((cnt * (n - cnt)) * 2**i) % mod\n    ans %= mod\n    print(ans)\n \n \ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np #numpy\u306e\u7df4\u7fd2\u304c\u3066\u3089\nn = int(input())\ntmp = list(map(int,input().split()))\n\nmod = 10**9 + 7\na = np.array(tmp,np.int64)\n\nans = 0\nfor i in range(60 + 1):\n    b = (a >> i) & 1 #\u3059\u3079\u3066\u306ea\u306b\u3064\u3044\u30662**n\u4e57\u76ee\u306e\u30d3\u30c3\u30c8\u304c1\u304b\u5426\u304b\n    iti = np.count_nonzero(b) #\u3059\u3079\u3066\u306ea\u306e\u3046\u30612**n\u4e57\u76ee\u304c1\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\n    zero = n - iti #\u540c\u69d8\u306b0\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\n    ans += (iti * zero) * pow(2,i,mod) % mod#\u7247\u65b91\u3067\u7247\u65b90\u306a\u30891\u306a\u306e\u30671\u306e\u500b\u6570\u00d70\u306e\u500b\u6570\nans %= mod\nprint(ans)\n", "import queue\nimport numpy as np\nimport math\n\nn = int(input())\nA = list(map(int, input().split()))\nA = np.array(A,np.int64)\nans = 0\n\nfor i in range(60 + 1):\n    a = (A >> i) & 1\n    count1 = np.count_nonzero(a)\n    count0 = len(A) - count1\n    ans += count1*count0 * pow(2, i)\n    ans%=1000000007\n\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\n\nmod = 10**9+7\n\nans = 0\np = 1\nfor i in range(60):\n    s = sum(1 for b in a if b&p)\n    ans += s*(n-s)*p\n    ans %= mod\n    p <<= 1\nprint(ans)", "def main():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    ans = 0\n    mod = 10 ** 9 + 7\n    for d in range(61):\n        # d\u6841\u76ee\u3054\u3068\u306b\u8003\u3048\u308b\n        x = 0\n        for a in A:\n            if (a >> d) & 1:\n                x += 1\n        ans += x * (n-x) * 2**d\n        ans %= mod\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n \nmod = 10 ** 9 + 7\n \nN = int(input())\nA = np.array(list(map(int, input().split())))\n \n \ntmp = 0\nfor n in range(len(bin(max(A)))-2):   # \u6700\u5927\u6841\u6570\u306f\u3001\u6700\u3082\u5927\u304d\u3044\u6570\u5024\u306e2\u9032\u6570\u306e\u6841\u6570\n    num_1 = np.count_nonzero((A >> n)&1)   # 1\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    num_0 = N - num_1                      # 0\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    mul = num_1 * num_0   # 0 XOR 1\u306e\u56de\u6570\n    tmp += ((2 ** n)*mul) % mod\nans = tmp%mod\nprint(ans)", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\nMOD = 10**9 + 7\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nimport bisect\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    n = i_input()\n    a = i_list()\n    ans = 0\n\n    for i in range(60):\n        cnt = 0\n        bit = 1 << i\n        for j in a:\n            if j &bit:\n                cnt += 1\n        num1 = cnt\n        num0 = n - num1\n        ans += ((num1 * num0) * bit) %MOD\n    print((ans%MOD))\n  \n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "n = int(input())\na = list(map(int,input().split()))\nmod = 10**9+7\nans = 0\nfor i in range(60):\n    x = 1<< i\n    l = len([1 for j in a if j & x])\n    ans += x * l * (n-l) % mod\n    ans %= mod\nprint(ans)", "import numpy as np \n# \u521d\u671f\u5165\u529b\nmod = 10**9 +7\nans =0\nN =int(input())\nA =list(map(int,input().split()))\nA_np =np.array(A,dtype=np.int64)\n\n# xor \u5404\u6841\u306e\uff10\u30681\u306e\u6570\u3092\u6c42\u3081\nfor i in range(60):\n    c =np.count_nonzero(A_np &1)\n    ans +=2**i*c*(N-c)\n    A_np >>=1\nprint(ans %mod)", "n = int(input())\na = list(map(int,input().split()))\nmod = 10**9+7\nans = 0\nfor i in range(60):\n  keta=1<<i\n  cnt=0\n  for j in a:\n    if keta & j:\n      cnt+=1\n  ans+=keta*cnt*(n-cnt)%mod\n\n\nprint((ans%mod))\n", "N = int(input())\nA = list(map(int,input().split()))\nM = 10**9+7\nans = 0\n\nfor n in range(61):\n  ones = sum([1 for a in A if (a>>n)&1])\n  ans+=(1<<n)*ones*(N-ones)\n  ans%=M\n\nprint(ans)", "import numpy as np\n\nN=int(input())\nA=np.array([int(x) for x in input().split()])\n\nans=0\nM=pow(10,9)+7\nfor i in range(100):\n  one=int(np.sum((A>>i)&1))\n  zero=N-one\n  ans+=(one*zero)*pow(2,i,M)\n  ans%=M\n  #print(one,zero)\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\nmod = 10**9 + 7\nans = 0\n\nfor i in range(60):\n    cou  = 0\n    bit = 1 << i\n    for j in a:\n        if j & bit:\n            cou += 1\n    num1 = cou\n    num0 = n - num1\n    ans += ((num1*num0) * bit )%mod\nprint(ans%mod)", "import numpy as np\nn=int(input())\narr = np.array([int(i) for i in input().split()])\nmod = 10**9+7\nsm=0\n\nfor i in range(60):\n    c1 = np.count_nonzero(arr & 1)\n    sm += 2 ** i * c1 * (n-c1)\n    arr >>= 1\n\nprint((sm%mod))\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    ans = 0\n    for i in range(60):\n        one = 0\n        for a in A:\n            if a & (1 << i):\n                one += 1\n        ans = (ans + one * (N - one) * (1 << i)) % MOD\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nimport numpy as np\n \nmod = 10 ** 9 + 7\n \nN = int(input())\nA = np.array(list(map(int, input().split())))\n \n \nans = 0\nfor n in range(len(bin(max(A)))):   # \u6700\u5927\u6841\u6570\u306f\u3001\u6700\u3082\u5927\u304d\u3044\u6570\u5024\u306e2\u9032\u6570\u306e\u6841\u6570\n    num_1 = np.count_nonzero((A >> n)&1)   # 1\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    num_0 = N - num_1                      # 0\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    mul = num_1 * num_0   # 0 XOR 1\u306e\u56de\u6570\n    ans += ((2 ** n)*mul) % mod\nans %= mod\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nans = 0\nmod = 10**9+7\nfor i in range(60):\n  j = 1<<i\n  cnt = sum((k & j) >> i for k in a)\n  ans += (cnt*(n-cnt))<<i\n  ans%= mod\nprint(ans)", "import numpy as np\n\nn = int(input())\na = list(map(int,input().split()))\nmod = 10**9+7\nans = 0\na=np.array(a)\n\nfor i in range(60):\n  keta = a>>i & 1\n  num1 = int(keta.sum())\n  num0 = n - num1\n  ans+= ((2**i)%mod)*(num1*num0)\n  ans%=mod\nprint(ans) ", "import numpy as np\n\nmod = 10**9+7\nn=int(input())\nA=np.array(list(map(int,input().split())))\nans = 0\n\nfor i in range(60):\n  n1 = np.count_nonzero((A>>i)&1)\n  n0 = n-n1\n  ans += (2**i)*n1*n0 % mod\nans %= mod\nprint(ans)", "import numpy as np\nN = int(input())\n\nA = np.array(list(map(int,input().split())))\n\nans=0\nmod = 10**9 +7\nfor i in range(60):\n  cnt = np.count_nonzero(A&1)\n  ans+=(N-cnt)*cnt*(2**i)\n  ans %= mod\n  A>>= 1\nprint(ans)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nN = int(input())\nA = list(map(int, input().split()))\n\n\n# In[18]:\n\n\nmod = 10**9+7\nans = 0\nfor n in range(61):\n    ones = sum([1 for a in A if (a>>n)&1])\n    ans += (1<<n)*ones*(N-ones)\n    ans %= mod\n\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n", "import numpy as np\nn=int(input())\narr = np.array([int(i) for i in input().split()])\nmod = 10**9+7\nsm=0\n\nfor i in range(60):\n    c1 = np.count_nonzero(arr & 1)\n    sm += 2 ** i * c1 * (n-c1)\n    arr >>= 1\n\nprint(sm%mod)", "N=int(input())\nM=10**9+7\nA=[int(x) for x in input().split()]\n\nans=0\nfor i in range(60):\n  one=sum([a>>i&1 for a in A])\n  zero=N-one\n  ans+=(one*zero)*pow(2,i,M)%M\n  ans%=M\n  #print(one,zero)\nprint(ans)", "import math\nimport numpy as np\n\nN = 10\nARR = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]\n\nN = 10\nARR = [3, 14, 159, 2653, 58979, 323846, 2643383, 27950288, 419716939, 9375105820]\n\n\n# N = 3\n# ARR = [1, 2, 3]\n\n# N = 5\n# ARR = [3, 6, 8, 9, 10]\n\nN = int(input())\nARR = list(map(int, input().split()))\n\n\ndef calculate(n, arr):\n    if max(arr) == 0:\n        mathNum = 1\n    else:\n        mathNum = math.ceil(math.log(max(arr), 2))\n\n    oneArray =  [0] * mathNum\n    zeroArray = [0] * mathNum\n\n    result = 0\n    arr = np.array(arr)\n    for i in range(mathNum):\n        s = (arr >> i) & 1\n\n        oneCount = np.count_nonzero(s)\n        zeroCount = n - oneCount\n        oneArray[i] = oneCount\n        zeroArray[i] = zeroCount\n\n    for i in range(mathNum):\n        result += (2 ** i) * (oneArray[i] * zeroArray[i])\n\n    print(result % (10 ** 9 + 7))\n\n\ncalculate(N, ARR)", "import numpy as np\nINT = lambda: int(input())\nINTM = lambda: map(int,input().split())\nSTRM = lambda: map(str,input().split())\nSTR = lambda: str(input())\nLIST = lambda: list(map(int,input().split()))\nLISTS = lambda: list(map(str,input().split()))\n\ndef do():\n    n=INT()\n    a=np.array(LIST())\n    ans=0\n    mod=10**9+7\n    for i in range(70):\n        digit=np.sum((a>>i)&1)\n        ans+=pow(2,i,mod)*(((n-digit)*digit)%mod)%mod\n        ans=ans%mod\n    \n    print(ans)\n\n\n\ndef __starting_point():\n    do()\n__starting_point()", "def main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    mod = 10**9+7\n    div = {}\n    for i in range(61):\n        div[i] = 0\n    for i in range(n):\n        b = bin(a[i])\n        l = len(b)\n        for j in range(l-2):\n            if b[l-1-j]=='1':\n                div[j]+=1\n    ans = 0\n    for k in list(div.keys()):\n        ans += div[k] * (n-div[k]) * 2**k\n        ans = ans % mod\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n\nN = int(input())\nmod = 10**9 + 7\nA = np.array(input().split(), int)\n\nans = 0\nfor i in range(60):\n    b = np.count_nonzero(A >> i & 1)\n    ans += 2**i*(b*(N-b))\n    ans %= mod\n    c = np.count_nonzero(A >> i & 1)\nprint(ans)\n\n", "#create date: 2020-07-05 10:13\n\nimport sys\nstdin = sys.stdin\n\nmod = 10**9 + 7\n\ndef ns(): return stdin.readline().rstrip()\ndef ni(): return int(ns())\ndef na(): return list(map(int, stdin.readline().split()))\n\ndef main():\n    n = ni()\n    a = na()\n    ans = 0\n    for i in range(61):\n        cnt = 0\n        for ai in a:\n            if (ai >> i) & 1:\n                cnt += 1\n        ans += ((cnt * (n - cnt)) * 2**i) % mod\n    ans %= mod\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N, *A = map(int, open(0).read().split())\nmod = 10**9 + 7\n\nbatch = 8\nrg = tuple(range((63//batch)+1))\nmask = (1<<batch) - 1\nB = [[0]*(1<<batch) for _ in rg]\nfor a in A:\n    for i in rg:\n        B[i][a & mask] += 1\n        a >>= batch\n\nxr = [[] for _ in [0]*(1<<batch)]\nfor i in range(1<<batch):\n    for j in range(i+1, 1<<batch):\n        xr[i].append(i^j)\n\nans = 0\nshift = 1\nfor b in B:\n    x = sum(xr[i][j]*bi*bj for i, bi in enumerate(b) for j, bj in enumerate(b[i+1:]))\n    x %= mod\n    x *= shift\n    x %= mod\n    shift <<= batch\n    shift %= mod\n    ans += x\n    ans %= mod\nprint(ans)", "import sys\nimport numpy as np\ndef input(): return sys.stdin.readline().rstrip()\n \ndef main():\n    n=int(input())\n    A=np.array(list(map(int, input().split())),dtype='int64')\n    ans = 0\n    mod = 10**9 + 7\n    for i in range(60):\n        q = int((A >> i & 0b1).sum())\n        ans += q*(n-q)*pow(2, i, mod)\n        ans %= mod\n    print(ans)\n \ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nimport sys\nfrom itertools import chain, count\n\nMOD = 1000000007  # type: int\n\n\ndef solve(N: int, A: \"List[int]\"):\n    a_max = max(A)\n    ans = 0\n    for i in count(0):\n        mask = 2**i\n        if mask > a_max:\n            return ans\n        c0 = 0\n        c1 = 0\n        for a in A:\n            if a & mask:\n                c1 += 1\n            else:\n                c0 += 1\n        mask = mask % MOD\n        ans = (ans + mask*(c0 * c1)) % MOD \n\ndef main():\n    tokens = chain(*(line.split() for line in sys.stdin))\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    answer = solve(N, A)\n    print(answer)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "### ----------------\n### \u3053\u3053\u304b\u3089\n### ----------------\n\nimport sys\nfrom io import StringIO\nimport unittest\n\ndef resolve():\n    readline=sys.stdin.readline\n    mod=10**9+7\n    n=int(readline())\n    arr=list(map(int, readline().rstrip().split()))\n    ans = 0\n    x = 1\n    for i in range(60):\n        c = 0\n        for j in range(n):\n            if arr[j]&x != 0:\n                c += 1\n        ans += (c * (n-c)) * x\n        ans %= mod\n        x = x*2\n    print(ans)\n    return\n\nif 'doTest' not in globals():\n    resolve()\n    return\n\n### ----------------\n### \u3053\u3053\u307e\u3067 \n### ----------------\n", "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    res = 0\n    for mask in range(60):\n        cnt1 = sum([1 if a & (1 << mask) else 0 for a in A])\n        cnt0 = n - cnt1\n        res += (pow(2, mask, mod) * cnt1 * cnt0) % mod\n        res %= mod\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def XorSum4():\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 10**9+7\n    ans = 0\n    \n    for i in range(60):\n        count = 0\n        for j in a:\n            count += (j>>i)&1\n        num = (count*(n-count))%mod\n        ans += num*2**i\n        ans %= mod\n    print(ans)\n    \ndef __starting_point():\n    XorSum4()\n__starting_point()", "n = int(input())\nA = list(map(int,input().split()))\n\nans = 0\nfor bit in range(60):\n    m = 1 << bit\n    c = sum(a & m for a in A) >> bit\n    ans += (c * (n - c)) << bit\n    ans %= (10**9+7)\nprint(ans)", "N,*A=map(int,open(0).read().split())\nprint(sum((b:=1<<i)*(N-(z:=sum(1 for a in A if a&b)))*z%(m:=10**9+7) for i in range(60))%m)", "N = int(input())\na = list(input().split())\nA = [int(a[i])for i in range(N)]\nfrag = [0 for i in range(60)]\nmod = 10 ** 9 + 7\nans = 0\n\nfor i in range(60):\n    j = 1 << i\n    cnt = sum((k & j) >> i for k in A)\n    ans += (cnt * (N - cnt)) << i\n    ans %= mod\n    \nprint(ans)", "N=int(input())\nM=10**9+7\n#A=[int(x) for x in input().split()]\nA=list(map(int,input().split()))\n\nans=0\nfor i in range(60):\n  one=sum([a>>i&1 for a in A])\n  zero=N-one\n  ans+=(one*zero)*2**i\n  ans%=M\n  #print(one,zero)\nprint(ans)", "N=int(input())\nM=10**9+7\nA=[int(x) for x in input().split()]\n\nans=p=0\nfor i in range(60):\n  one=sum([a>>p&1 for a in A])\n  zero=N-one\n  p+=1\n  ans+=(one*zero)*2**i\n  ans%=M\n  #print(one,zero)\nprint(ans)", "# import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n\nN = int(input())\n# S = input()\n# n, *a = map(int, open(0))\n# N, M = map(int, input().split())\nA = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\n#def make_divisors(n):\n#    lower_divisors , upper_divisors = [], []\n#    i = 1\n#    while i*i <= n:\n#        if n % i == 0:\n#            lower_divisors.append(i)\n#            if i != n // i:\n#                upper_divisors.append(n//i)\n#        i += 1\n#    return lower_divisors + upper_divisors[::-1]\n\n# def gcd_list(numbers):\n#     return reduce(math.gcd, numbers)\n\n# if gcd_list(A) > 1:\n#     print(\"not coprime\")\n#     return\n\n# \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\u6e96\u5099\n#MAXN = 10**6+10\n#sieve = [i for i in range(MAXN+1)]\n#p = 2\n#while p*p <= MAXN:\n#    if sieve[p] == p:\n#        for q in range(2*p, MAXN+1, p):\n#            if sieve[q] == q:\n#                sieve[q] = p\n#    p += 1n\n\n#!/usr/bin/env python\n# coding: utf-8\n\n\nmod = 10**9+7\nans = 0\nfor n in range(61):\n    ones = sum([1 for a in A if (a>>n)&1])\n    ans += (1<<n)*ones*(N-ones)\n    ans %= mod\n\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split()))\nmod = 10**9 + 7\nans = 0\n\nfor i in range(60):\n    cnt = 0\n    digit = 1 << i\n    for j in a:\n        if digit & j:\n            cnt += 1\n    ans += digit*cnt*(n - cnt)%mod\n\nprint(ans%mod)", "import sys\nstdin = sys.stdin\ndef main():\n    N = int(stdin.readline().rstrip())\n    A = list(map(int,stdin.readline().split()))\n    mod = 10**9+7\n    ans = 0\n    for i in range(61):\n        bits = 0\n        for x in A:\n            if (x>>i)&1:\n                bits += 1\n        ans += ((bits*(N-bits))* 2**i) %mod\n    ans %= mod\n    print(ans)\nmain()", "import numpy as np\n\nn = int(input())\narr = np.array([int(i) for i in input().split()])\nmod = 10 ** 9 + 7\ns = 0\n\nfor i in range(60):\n    c1 = np.count_nonzero(arr & 1) # \u81ea\u5206\u304cnp.sum\u3092\u5229\u7528\u3057\u305f\u304c\u3069\u3046\u3057\u3066\u3082\u6b63\u89e3\u306b\u306a\u308c\u306a\u304b\u3063\u305f\u3002\u306a\u305c\uff1f\n    s += 2 ** i * c1 * (n - c1)\n    arr >>= 1\n\nprint(s % mod)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    res = 0\n    for i in range(60):\n        cnt = 0\n        for a in A:\n            cnt += (a >> i) & 1\n        res += (cnt * (n - cnt)) % mod * (1 << i) % mod\n        res %= mod\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import numpy as np\n\nn=int(input())\na=np.array(list(map(int,input().split())))\nmod=10**9+7\n\ns=0\nfor i in range(60):\n    bit = np.count_nonzero(a & 1)\n    s += bit*(n-bit)*(2**i)\n    a >>= 1\nprint(s % mod)", "def main():\n    import sys\n    input = sys.stdin.readline\n    \n    n = int(input())\n    A = [int(x) for x in input().split()]\n    ans = 0\n    mod = 10 ** 9 + 7\n    # \u5236\u7d04\u304cai <= 2^60\u306a\u306e\u3067\n    for d in range(61):\n        # d\u6841\u76ee\u3054\u3068\u306b\u8003\u3048\u308b\n        x = 0\n        for a in A:\n            if (a >> d) & 1:\n                x += 1\n        ans += x * (n-x) * 2**d\n        ans %= mod\n    print(ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np \nN=int(input())\na=np.array(list(map(int, input().split())))\nans=0\nmod=10**9+7\nfor i in range(60):\n   s=np.count_nonzero(a>>i&1)\n   ans+=pow(2,i,mod)*s*(N-s)%mod\n   ans%=mod\nprint(ans)", "# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\nclass Math():\n    @staticmethod\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return Math.gcd(b, a % b)\n\n    @staticmethod\n    def lcm(a, b):\n        return (a * b) // Math.gcd(a, b)\n\n    @staticmethod\n    def divisor(n):\n        res = []\n        i = 1\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                res.append(i)\n                if i != n // i:\n                    res.append(n // i)\n        return res\n\n    @staticmethod\n    def round_up(a, b):\n        return -(-a // b)\n\n    @staticmethod\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        d = int(n ** 0.5) + 1\n        for i in range(3, d + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    @staticmethod\n    def fact(N):\n        res = {}\n        tmp = N\n        for i in range(2, int(N ** 0.5 + 1) + 1):\n            cnt = 0\n            while tmp % i == 0:\n                cnt += 1\n                tmp //= i\n            if cnt > 0:\n                res[i] = cnt\n        if tmp != 1:\n            res[tmp] = 1\n        if res == {}:\n            res[N] = 1\n        return res\n\n\ndef pop_count(x):\n    x = x - ((x >> 1) & 0x5555555555555555)\n    x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)\n    x = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    x = x + (x >> 32)\n    return x & 0x0000007f\n\n\nMOD = int(1e09) + 7\nINF = int(1e15)\n\n\ndef solve():\n    N = Scanner.int()\n    A = Scanner.map_int()\n    ans = 0\n    for i in range(61):\n        p = 1\n        for _ in range(i):\n            p *= 2\n            p %= MOD\n        x = 0\n        for a in A:\n            if a >> i & 1:\n                x += 1\n        t = x * (N - x)\n        t %= MOD\n        t *= p\n        t %= MOD\n        ans += t\n        ans %= MOD\n    print(ans)\n\n\ndef main():\n    # sys.stdin = open(\"sample.txt\")\n    # T = Scanner.int()\n    # for _ in range(T):\n    #     solve()\n    # print('YNeos'[not solve()::2])\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n\n \nn = int(input())\na = list(map(int,input().split()))\n\na = np.array(a, dtype='int64')\nMOD = 10**9+7\nans = 0\nfor i in range(60):\n    ca = a >> i & 1\n    c1 = int(ca.sum())\n    c0 = n - c1\n    c0c1 = (c0 * c1) % MOD\n    c0c1pow = (c0c1 * 2**i) % MOD\n    ans = (ans + c0c1pow) % MOD\nprint(ans)  ", "def main():\n    N = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    m = 10**9 + 7\n    \n    for i in range(60):\n        x = 0\n        for j in l:\n            x += 1 & j >> i\n        \n        tmp = x * (N - x) % m\n        tmp *= 2 ** i % m\n        ans += tmp\n        ans %= m\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    ans = 0\n    mod = 10 ** 9 + 7\n    for d in range(60):\n        # d\u6841\u76ee\u3054\u3068\u306b\u8003\u3048\u308b\n        x = 0\n        for a in A:\n            if (a >> d) & 1:\n                x += 1\n        ans += x * (n-x) * 2**d\n        ans %= mod\n    print(ans)\n \ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    ans = 0\n    mod = 10 ** 9 + 7\n    for d in range(61):\n        # d\u6841\u76ee\u3054\u3068\u306b\u8003\u3048\u308b\n        x = 0\n        for a in A:\n            if (a >> d) & 1:\n                x += 1\n        ans += x * (n-x) * 2**d\n        ans %= mod\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys;      from decimal import Decimal\nimport math;     from itertools import combinations, product\nimport bisect;   from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef lcm(a: int, b: int) -> int: return (a * b) // math.gcd(a, b)\n\nimport numpy as np\n\ndef Main():\n    n = read_int()\n    a = np.array(read_int_list(), np.int64)\n    ans = 0\n    for i in range(60):\n        cnt_one = np.count_nonzero(a >> i & 1)\n        cnt_zero = n - cnt_one\n        ans += (cnt_one * cnt_zero * (1 << i)) % MOD\n        ans %= MOD\n    print(ans)\n    \n\nif __name__ ==  '__main__':\n    Main()", "n = int(input())\narr = list(map(int, input().split()))\nMOD = 10**9 + 7\n\nans = 0\nfor i in range(60):\n    mask = 1 << i\n    cnt = sum([1 for x in arr if x & mask == mask])\n    ans += mask * cnt * (n - cnt) % MOD\n\nprint(ans % MOD)", "N,*A=list(map(int,open(0).read().split()))\nprint((sum((b:=1<<i)*(z:=sum(1 for a in A if a&b==0))*(N-z)%(mod:=10**9+7) for i in range(60))%mod))\n", "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# \u63d0\u51fa #14841909 \u3092\u53c2\u8003\u306b\u4f5c\u6210\n\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(N, As):\n    import math\n    x = 1 if max(As) == 0 else math.ceil(math.log2(max(As)))\n    ans = 0\n    mod = 10 ** 9 + 7\n\n    for i in range(x):\n        cnt = sum((A >> i) % 2 for A in As)\n        ans += (cnt * (N - cnt)) * pow(2, i, mod)\n        ans = ans % mod\n    print(ans)\n\n\ndef __starting_point():\n    N = int(input())\n    As = [int(i) for i in input().split()]\n    # N = 3 * 10 ** 5\n    # import random\n    # As = [random.randint(2 ** 59, 2 ** 60) for _ in range(N)]\n    solve(N, As)\n\n__starting_point()", "def main():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    mod = 10**9+7\n    ans = 0\n\n    for k in range(60):\n        x, y = 0, 0\n        for a in A:\n            x += 1 & a>>k\n        tmp = x*(n-x)%mod\n        tmp *= pow(2, k, mod)\n        ans += tmp\n        ans %= mod\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 10 ** 9 + 7\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N = I()\n    A = LI()\n\n    # \u6841\u3054\u3068\u306b1\u306e\u8db3\u3055\u308c\u308b\u6570\u3092\u6570\u3048\u308b\u65b9\u91dd\n\n    # \u4e0b\u6e96\u5099 A\u306e\u4e2d\u3067\u3001d\u6841\u76ee\u304c1\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\n    cnt = [0] * 60\n    for i in A:\n        for j in range(60):\n            if i >> j & 1:\n                cnt[j] += 1\n\n    # \u7e70\u308a\u4e0a\u304c\u308a\u306e\u306a\u30442\u9032\u6570\u219210\u9032\u6570\u306b\u5909\u63db\n    ans = 0\n    for i in range(60):\n        # i\u6841\u76ee\u306b1\u306e\u8db3\u3055\u308c\u308b\u6570\u306b2\u306ei\u4e57\u3092\u304b\u3051\u308c\u3070\u3088\u3044\n        ans += cnt[i] * (N - cnt[i]) * pow(2, i, MOD)\n        ans %= MOD\n\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import numpy as np\nn,*a = map(int,open(0).read().split())\na = np.array(a)\nmod = 10**9+7\nans = 0\nfor i in range(61):\n  b = np.count_nonzero(a>>i&1)\n  ans += b*(n-b)*1<<i\nprint(ans%mod)", "import sys\nstdin = sys.stdin\ndef main():\n    N = int(stdin.readline().rstrip())\n    A = list(map(int,stdin.readline().split()))\n    mod = 10**9+7\n    ans = 0\n    for i in range(61):\n        bits = 0\n        for x in A:\n            if (x>>i)&1:\n                bits += 1\n        ans += ((bits*(N-bits))* 2**i) %mod\n    ans %= mod\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\naaa = list(map(int, input().split()))\nbbb = [format(a, '061b') for a in aaa]\n\nzero = [0] * 61\none = [0] * 61\nfor i in range(61):\n    s = ''.join(list(b[-(i+1)] for b in bbb))\n    zero[i] = s.count('0')\n    one[i] = s.count('1')\nans = 0\nMOD = 1_000_000_007\nfor i, o, l in zip(list(range(61)), zero, one):\n    ans += 2**i * o * l\n    ans %= MOD\nprint(ans)\n", "n=int(input())\na=list(map(int,input().split()))\nd=0\nm=10**9+7\nfor i in range(60):b=1<<i;l=len([1for j in a if j&b]);d+=l*(n-l)*b%m;d%=m\nprint(d)", "def main():\n    N = int(input())\n    A = tuple(map(int, input().split()))\n\n    MOD = 10 ** 9 + 7\n    two_factor = 1\n    ans = 0\n    for i in range(60):\n        bit_count = 0\n        for a in A:\n            if (a>>i) & 1:\n                bit_count += 1\n        ans += bit_count*(N-bit_count)*two_factor\n        ans %= MOD\n        two_factor *= 2\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\nN, *A = map(int, open(0).read().split())\nA = np.array(A, dtype=np.int64)\nmod = 10**9 + 7\n \nans = 0\nfor i in range(60):\n    mask = 1 << i\n    cnt = np.count_nonzero(A&mask)\n    x = cnt * (N-cnt)\n    x *= mask % mod\n    ans += x\n    ans %= mod\n \nprint(ans)", "\ndef resolve():\n    MOD = 10 ** 9 + 7\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    ans = 0\n    for i in range(60):\n        p = 1 << i\n        one = sum([1 for a in A if a & p])\n        zero = N - one\n        ans += p * one * zero\n        ans %= MOD\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def readinput():\n    n=int(input())\n    l=list(map(int,input().split()))\n    return n,l\n\ndef main(n,a):\n    MOD=10**9+7\n    hist=[0]*61\n    bs=[]\n    for i in range(n):\n        # s=list(reversed(bin(a[i])[2:]))\n        # for j in range(len(s)):\n        #     if s[j]=='1':\n        #         hist[j]+=1\n        # bs.append(s)\n        s=bin(a[i])[2:]\n        for j in range(len(s)):\n            if s[j]=='1':\n                hist[len(s)-j-1]+=1\n\n    #print(bs)\n    #print(hist)\n    sum=0\n    # for i in range(n-1):\n    #     s=bs[i]\n    #     b=1\n    #     for j in range(len(s)):\n    #         if s[j]=='0':\n    #             sum=(sum+hist[j]*b)%MOD\n    #         else:\n    #             sum=(sum+( n-i-hist[j] )*b)%MOD\n    #             hist[j]-=1\n    #         b*=2\n    #     for j in range(len(s),61):\n    #         sum=(sum+hist[j]*b)%MOD\n    #         b*=2\n    b=1\n    for j in range(61):\n        sum=(sum+( hist[j]*(n-hist[j])*b )%MOD )%MOD\n        b*=2\n\n    return sum\n\ndef __starting_point():\n    n,l=readinput()\n    ans=main(n,l)\n    print(ans)\n\n__starting_point()", "import numpy as np\n\nN = int(input())\nA = tuple(map(int, input().split(' ')))\nA = np.array(A, dtype=np.int64)\nMOD = 10 ** 9 + 7\n\nans = 0\nmask = 1\n\nfor i in range(60):\n    ones = np.count_nonzero(A & mask)\n    ans += (ones * (N - ones) % MOD) * (mask % MOD)\n    ans %= MOD\n    mask <<= 1\n\nprint(ans)\n", "import numpy as np\n\nn = int(input())\na = np.array(list((map(int, input().split()))))\n\nmod = 10**9 + 7\nans = 0\ntwo = 1\nfor i in range(61):\n    one = np.count_nonzero(a & 1)\n    a = a >> 1\n    ans = (ans + (one*(n-one))*two) % mod\n    two = (two * 2) % mod\nprint(ans)", "MOD = 10**9+7\ndef resolve():\n    N = int(input())\n    A = list(map(lambda x: bin(int(x))[2:].zfill(60), input().split()))\n    ans = 0\n    for i in range(60):\n        one_cnt = 0\n        zero_cnt = 0\n        for a in A:\n            if a[i] == \"1\":\n                one_cnt += 1\n            else:\n                zero_cnt += 1\n        ans += (one_cnt*zero_cnt)*(2**(59-i))\n        ans %= MOD\n    print(ans)\n\n    \n\nif '__main__' == __name__:\n    resolve()", "import numpy as np\nn = int(input())\nmod = 10**9 + 7\na = np.array(list(map(int, input().split())))\nans = 0\nfor i in range(len(bin(max(a)))):\n  num_1 = np.count_nonzero((a>>i)&1)\n  num_0 = n - num_1\n  ans += (2**i)*(num_1*num_0) % mod\nans %= mod\nprint(ans)", "N, *A = map(int, open(0).read().split())\nmod = 10**9 + 7\n\nans = 0\nfor i in range(60):\n    mask = 1 << i\n    cnt = 0\n    for a in A:\n        if a & mask:\n            cnt += 1\n    x = cnt * (N-cnt)\n    x *= mask % mod\n    ans += x\n    ans %= mod\n\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\nmod = 10**9+7\nans = 0\nfor i in range(60):\n  keta=1<<i\n  cnt=0\n  for j in a:\n    if keta & j:\n      cnt+=1\n  ans+=((keta%mod)*cnt*(n-cnt))%mod\n\n\nprint((ans%mod))\n", "import numpy as np\nN = int(input())\nnum_list = np.array(input().split(), dtype=\"int\")\n\nmax_num = max(num_list)\nmax_bit_num = format(max_num, \"b\")\nmax_bit_num_length = len(max_bit_num)\nans = 0\nradix = 1\nfor i in range(max_bit_num_length):\n  new_num_list = (num_list >> i) & 1\n  one_amount = np.count_nonzero(new_num_list == 1)\n  zero_amount = len(num_list) - one_amount\n  ans += (one_amount*zero_amount)*radix\n  radix *= 2\nprint(ans%(10**9+7))"]