["from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nimport heapq\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n \nM = mod = 10**9 + 7\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split(' ')]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n').split(' ')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nfor _ in range(val()):\n    a,b,c = sorted(li())\n    tot = 0\n    if a:\n        tot += 1\n        a -= 1\n    if b:\n        tot += 1\n        b -= 1\n    if c:\n        tot += 1\n        c -= 1\n    if b and c:\n        tot += 1\n        b -= 1\n        c -= 1\n    if a and c:\n        tot += 1\n        a -= 1\n        c -= 1\n    if b and a:\n        b -= 1\n        a -= 1\n        tot += 1\n    if a and b and c:\n        a -= 1\n        b -= 1\n        c -= 1\n        tot += 1\n    print(tot)\n\n", "#list(map(int,input().split()))\nt=int(input())\ndef brute(ind,su=[0,0,0],co=0):\n    nonlocal ma\n    if ind==7:\n        if su[0]<=a and su[1]<=b and su[2]<=c:\n            ma=max(ma,co)\n        return\n    brute(ind+1,[su[i]+aa[ind][i] for i in range(3)],co+1)\n    brute(ind+1,su,co)\nfor i in range(t):\n    a,b,c=list(map(int,input().split()))\n    ma=0\n    aa=[[1,1,1],[1,1,0],[1,0,0],[1,0,1],[0,1,1],[0,1,0],[0,0,1]]\n    brute(0)\n    print(ma)\n", "n=int(input())\nfor _ in range(n):\n\ta=sorted(list(map(int,input().split())))\n\ta,b,c=a[2],a[1],a[0]\n\tans=0\n\tif(a):\n\t\tans+=1\n\t\ta-=1\n\tif(b):\n\t\tans+=1\n\t\tb-=1\n\tif(c):\n\t\tans+=1\n\t\tc-=1\n\tif(a>0 and b>0):\n\t\tans+=1\n\t\ta-=1\n\t\tb-=1\n\tif(b>0 and c>0):\n\t\tans+=1\n\t\tb-=1\n\t\tc-=1\n\tif(a>0 and c>0):\n\t\tans+=1\n\t\ta-=1\n\t\tc-=1\n\tif(a>0 and b>0 and c>0):\n\t\tans+=1\n\tprint(ans)\n", "from itertools import permutations\nfor _ in range(int(input())):\n    ans = 0\n    a, b, c = list(map(int, input().split()))\n    for x, y, z in permutations((a, b, c)):\n        cnt = 0\n        if x:\n            cnt += 1\n            x -= 1\n        if y:\n            cnt += 1\n            y -= 1\n        if z:\n            cnt += 1\n            z -= 1\n        if x and y:\n            x -= 1\n            y -= 1\n            cnt += 1\n        if y and z:\n            y -= 1\n            z -= 1\n            cnt += 1\n        if x and z:\n            x -= 1\n            z -= 1\n            cnt += 1\n        if x and y and z:\n            cnt += 1\n\n        ans = max(ans, cnt)\n\n    print(ans)\n", "t = int(input())\nfor q in range(t):\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(3):\n        if a[i] > 0:\n            ans += 1\n            a[i] -= 1\n    a.sort()\n    a.reverse()\n    if a[0] and a[1]:\n        a[0] -= 1\n        a[1] -= 1\n        ans += 1\n    if a[0] and a[2]:\n        a[0] -= 1\n        a[2] -= 1\n        ans += 1\n    if a[1] and a[2]:\n        a[1] -= 1\n        a[2] -= 1\n        ans += 1\n    if a[0] and a[1] and a[2]:\n        ans += 1\n    print(ans)\n", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = int(1.5e6)\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\nspf[0]=spf[1] = -1\ndef sieve():\n    for i in range(2,MAXN,2):\n        spf[i] = 2\n    for i in range(3,int(MAXN**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXN,i):\n                if spf[j]==j:\n                    spf[j]=i\ndef fib(n,m):\n    if n == 0:\n        return [0, 1]\n    else:\n        a, b = fib(n // 2)\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\n        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n        if n % 2 == 0:\n            return [c, d]\n        else:\n            return [d, c + d]\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MOD\n        den = (den*(i+1))%MOD\n\n    return (num*(pow(den,MOD-2,MOD)))%MOD\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\n    a,b,c = sorted(arrIN(),reverse=True)\n    ans = 0\n    if a>0:\n        ans+=1\n        a-=1\n    if b>0:\n        ans+=1\n        b-=1\n    if c>0:\n        ans+=1\n        c-=1\n    if a>0:\n        if b>0:\n            ans+=1\n            a-=1\n            b-=1\n    if a>0:\n        if c>0:\n            ans+=1\n            a-=1\n            c-=1\n    if b>0:\n        if c>0:\n            ans+=1\n            b-=1\n            c-=1\n    if a>0 and b>0 and c>0:\n        ans+=1\n    print(ans)\n\n", "TC = int(input())\n\nfor _ in range(TC):\n    a, b, c = list(map(int, input().split()))\n\n    nums = sorted((a, b, c))\n\n    cnt = 0\n    for i in range(2, -1, -1):\n        if nums[i] > 0:\n            nums[i] -= 1\n            cnt += 1\n\n    if nums[2] > 0 and nums[1] > 0:\n        cnt += 1\n        nums[2] -= 1\n        nums[1] -= 1\n\n    if nums[2] > 0 and nums[0] > 0:\n        cnt += 1\n        nums[2] -= 1\n        nums[0] -= 1\n\n\n    if nums[1] > 0 and nums[0] > 0:\n        cnt += 1\n        nums[1] -= 1\n        nums[0] -= 1\n\n    if all(nums):\n        cnt += 1\n\n    print(cnt)\n", "import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ngo = lambda : 1/0\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}{}\".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\nYES = \"YES\"\nNO = \"NO\"\n\nfor _ in range(int(input())):\n  try:\n    a, b, c = read()\n\n    ans = 0\n\n    if a >= 1:\n      a -= 1\n      ans += 1\n    \n    if b >= 1:\n      b -= 1\n      ans += 1\n\n    if c >= 1:\n      c -= 1\n      ans += 1\n\n    if a >= 2:\n      if b >= 1:\n        a -= 1\n        b -= 1\n        ans += 1\n      if c >= 1:\n        a -= 1\n        c -= 1\n        ans += 1\n      if b >= 1 and c >= 1:\n        b -= 1\n        c -= 1 \n        ans += 1\n\n    elif b >= 2:\n      if a >= 1:\n        a -= 1\n        b -= 1\n        ans += 1\n      if c >= 1:\n        b -= 1\n        c -= 1\n        ans += 1\n      if a >= 1 and c >= 1:\n        a -= 1\n        c -= 1 \n        ans += 1\n        \n    elif c >= 2:\n      if a >= 1:\n        a -= 1\n        c -= 1\n        ans += 1\n      if b >= 1:\n        b -= 1\n        c -= 1\n        ans += 1\n      if a >= 1 and b >= 1:\n        a -= 1\n        b -= 1 \n        ans += 1\n    else:\n      if a >= 1 and b >= 1:\n        a -= 1\n        b -= 1\n        ans += 1\n      if c >= 1 and b >= 1:\n        c -= 1\n        b -= 1\n        ans += 1\n      if a >= 1 and c >= 1:\n        a -= 1\n        c -= 1\n        ans += 1\n          \n    if a>=1 and b>=1 and c>=1:\n      ans += 1\n    \n    print(ans)\n\n\n      \n      \n\n\n\n  except ZeroDivisionError:\n    continue\n\n  except Exception as e:\n    print(e)\n    continue", "import sys\ninput = sys.stdin.readline\n\nT = int(input())\n\nfor _ in range(T):\n    D = list(map(int, input().split()))\n    ans = 0\n    for i in range(3):\n        if D[i]:\n            D[i] -= 1\n            ans += 1\n\n    D.sort(reverse=True)\n    for i in range(2):\n        for j in range(i+1, 3):\n            if D[i] and D[j]:\n                D[i] -= 1\n                D[j] -= 1\n                ans += 1\n    if D[0] and D[1] and D[2]:\n        ans += 1\n\n    print(ans)\n", "t = int(input())\n\nfor k in range(t):\n    a, b, c = list(map(int, input().split()))\n\n    d = [a, b, c]\n    d.sort()\n    a = 0\n\n    if d[0] > 0:\n        a += 1\n        d[0] -= 1\n\n    if d[1] > 0:\n        a += 1\n        d[1] -= 1\n\n    if d[2] > 0:\n        a += 1\n        d[2] -= 1\n\n    d.sort(reverse=True)\n\n    if d[0] > 0 and d[1] > 0:\n        a += 1\n        d[0] -= 1\n        d[1] -= 1\n\n    if d[0] > 0 and d[2] > 0:\n        a += 1\n        d[0] -= 1\n        d[2] -= 1\n\n    if d[2] > 0 and d[1] > 0:\n        a += 1\n        d[2] -= 1\n        d[1] -= 1\n\n    if d[0] > 0 and d[1] > 0 and d[2] > 0:\n        a += 1\n\n    print(a)\n", "t = int(input())\nwhile t:\n    t -= 1\n    arr = list(map(int, input().split()))\n    a, b, c = sorted(arr, reverse=True)\n    ans = 0\n    if a:\n        ans += 1\n        a -= 1\n    if b:\n        ans += 1\n        b -= 1\n    if c:\n        ans += 1\n        c -= 1\n    if a and b:\n        ans += 1\n        a -= 1\n        b -= 1\n    if a and c:\n        ans += 1\n        a -= 1\n        c -= 1\n    if b and c:\n        ans += 1\n        b -= 1\n        c -= 1\n    if a and b and c:\n        ans += 1\n    print(ans)\n"]