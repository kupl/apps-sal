["n,m=map(int,input().split())\nif m>n:print(-1)\nelse:\n\tq=int((1.+n/m)/2.)\n\tv=(m+n)/(2*q)\n\tprint(v)", "a,b = list(map(int,input().split()))\nif b > a:\n    print(-1)\nelse:\n    try:\n        x= 100000000000\n        k = int((a+b)/2/b)\n        if k != 0:\n            x = (a+b)/2/k\n        k = int((a-b)/2/b)\n        if k != 0:\n            x = min(x,(a-b)/2/k)\n        print(\"%.9f\"%x)\n    except:\n        print(-1)\n", "a, b = list(map(int, input().split()))\n\ndef solve(a, b):\n    if a < b:\n        return -1\n    if b == 0:\n        return -1\n    if a == b:\n        return a\n    k0 = (a - b)//(2 * b)\n    if k0 == 0:\n        x0 = float('inf')\n    else:\n        x0 = (a - b)/(2 * k0)\n    k1 = (a + b)//(2 * b)\n    x1 = (a + b)/(2 * k1)\n    return min(x0, x1)\n\nprint(solve(a, b))\n", "x, y = [int(x) for x in input().split()]\nn1 = x + y\nans1 = -1\nans2 = -1\nif n1 // y  - (n1 // y % 2) != 0:\n    ans1 = n1 / (n1 // y  - (n1 // y % 2))\nn2 = x + y    \nif n2 // y  - (n2 // y % 2) != 0:\n    ans2 = n2 / (n2 // y  - (n2 // y % 2))\nprint(min(ans1, ans2))", "from decimal import *\nimport math\ngetcontext().prec=50\n\n\na,b=list(map(Decimal, input().split()))\nif b>a:\n    print(-1)\nelse:\n    cur=-1\n    if (a+b)%2==0:\n        cur=(a+b)//2\n    else:\n        cur=(a+b)/Decimal(2)\n    print(cur/math.floor(cur/b))\n\n", "from decimal import *\nimport math\ngetcontext().prec=50\na,b=map(Decimal, input().split())\nprint ( -1 if b>a else(Decimal((a+b)/2)/math.floor(Decimal((a+b)/2)/b)))", "import math\na,b=map(float, input().split())\nprint ( -1 if b>a else(((a+b)/2)/math.floor(((a+b)/2)/b)))", "a,b=map(int, input().split())\nprint (-1 if b>a else((a+b)/2)/((a+b)//(2*b)))", "def run1(x, y):\n    if x < y:\n        return -1;\n    cst = (x - y) * 0.5;\n    l = 1; r = 1000000001;\n    ans = - 1.0;\n    while(l <= r):\n        m = (l + r) >> 1;\n        now = cst / m;\n        if now >= y:\n            ans = now;\n            l = m + 1;\n        else:\n            r = m - 1;\n    return ans;\n\ndef run2(x, y):\n    cst = (x + y) * 0.5;\n    l = 1; r = 1000000001;\n    ans = - 1.0;\n    while(l <= r):\n        m = (l + r) >> 1;\n        now = cst / m;\n        if( now >= y ):\n            ans = now;\n            l = m + 1;\n        else:\n             r = m - 1;\n    return ans;\n\nx, y = list(map(int, input().split()));\np = run1(x, y);\nq = run2(x, y);\n\nans = - 1.0;\n\nif(ans < 0 or (p > 0 and p < ans) ):\n    ans = p;\nif(ans < 0 or (q > 0 and q < ans) ):\n    ans = q;\nprint (ans)\n\n\n", "#!/usr/bin/env python\n# 579C_polyline.py - Codeforces.com/problemset/problem/579/C by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Polyline Class (Main Program)\n###############################################################################\n\n\nclass Polyline:\n    \"\"\" Polyline representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.a, self.b] = list(map(int, uinput().split()))\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = float(1)\n\n        if self.a < self.b:\n            return \"-1\"\n\n        if self.a == self.b:\n            return str(\"{0:.12f}\".format(self.b))\n\n        r1 = (self.a + self.b) / (2 * int((self.a + self.b) / (2 * self.b)))\n        d = (2 * int((self.a - self.b) / (2 * self.b)))\n        result = r1 if d == 0 else min(r1, (self.a - self.b) / d)\n        return str(\"{0:.12f}\".format(result))\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Polyline class testing \"\"\"\n\n        # Constructor test\n        test = \"3 1\"\n        d = Polyline(test)\n        self.assertEqual(d.a, 3)\n        self.assertEqual(d.b, 1)\n\n        # Sample test\n        self.assertEqual(Polyline(test).calculate(), \"1.000000000000\")\n\n        # Sample test\n        test = \"1 3\"\n        self.assertEqual(Polyline(test).calculate(), \"-1\")\n\n        # Sample test\n        test = \"4 1\"\n        self.assertEqual(Polyline(test).calculate(), \"1.250000000000\")\n\n        # My tests\n        test = \"103 100\"\n        self.assertEqual(float(Polyline(test).calculate()), 101.5)\n        test = \"299 100\"\n        self.assertEqual(float(Polyline(test).calculate()), 199.5)\n        test = \"310 100\"\n        self.assertEqual(float(Polyline(test).calculate()), 102.5)\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Polyline(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Polyline().calculate())\n\n__starting_point()", "a,b=map(int, input().split())\nprint (-1 if b>a else((a+b)/2)/((a+b)//(2*b)))", "a, b = list(map(int, input().split()))\nprint(-1 if b > a else (a+b)/2/((a+b)//(2*b)))\n", "def main():\n    a, b = list(map(int, input().split()))\n    n = a // b\n    if n:\n        n -= n + 1 & 1\n        print(\"{:.12f}\".format((a + b) / (n + 1)))\n    else:\n        print(\"-1\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom math import sqrt\n\nx, y = [int(x) for x in sys.stdin.readline().split()]\n\nif y > x:\n    print(-1)\nelse:\n    s = (x + y) / 2\n    r = (x - y) / 2\n    ans = min(s / int(s / y), r / int(r / y)) if r >= y else s / int(s / y)\n    print(ans)\n", "a, b = list(map(int, input().split()))\nif a < b:\n    print(-1)\nelif a == b:\n    print(a)\nelse:\n    ku = (a - b) // (2 * b)\n    kd = (a + b) // (2 * b)\n    xd = (a + b) / (2 * kd)\n    if ku == 0:\n        print(xd)\n    else:\n        xu = (a - b) / (2 * ku)\n        print(min(xu, xd))\n", "ent = input().split()\nx = int(ent[0])\ny = int(ent[1])\n\nqn = ((x + y)/(2 * y)).__trunc__()\nif qn == 0:\n    print(-1)\nelse:\n    n = (x + y)/(2 * qn)\n    print(n)\n", "a, b = list(map(int, input().split()))\n\nif b - a == 0:\n    print( '%.12f' % (b))\n\nelif int((a - b)/(2 * b)) == 0 and int((a + b)/(2 * b)) == 0:\n    print(-1)\nelse:\n    if int((a - b)/(2 * b)) != 0 and int((a + b)/(2 * b)) != 0:\n        print( '%.12f' % (min(((a - b) / (2 * int((a - b)/(2 * b)))),((a + b) / (2 * int((a + b)/(2 * b)))))))\n    elif int((a - b)/(2 * b)) == 0 and int((a + b)/(2 * b)) != 0:\n        print( '%.12f' % (((a + b) / (2 * int((a + b)/(2 * b))))))\n\n\n\n\n\n\n", "a, b = list(map(int, input().split()))\nif b > a:\n    print(-1)\nelse:\n    x1 = a + b\n    x = b\n    print(x1 / (2 * (x1 // (2 * x))))\n", "a,b=map(int, input().split())\nprint (-1 if b>a else((a+b)/2)/((a+b)//(2*b)))", "#!/usr/bin/env python3\nimport collections, itertools, fractions, functools, heapq, math, queue\n\ndef solve():\n  a, b = list(map(int, input().split()))\n  if a < b:\n      return -1\n  return (a+b)/(2*((a+b)//(2*b)))\n\ndef __starting_point():\n  print(solve())\n\n\n__starting_point()", "a, b = [int(i) for i in input().split()]\n\nif (a < b):\n    print(-1)\nelse:\n    print((a + b) / (2 * int(((a + b) / (2 * b)))))\n", "from math import floor\n\na, b = [int(i) for i in input().split()]\n\nif (a < b):\n    print(-1)\nelse:\n    print((a + b) / (2 * floor(((a + b) / (2 * b)))))\n"]