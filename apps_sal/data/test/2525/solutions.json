["S = input()\nQ = int(input())\nbs = ''\nfs = ''\nhanten = 0\nfor i in range(Q):\n    query = list(input().split())\n    if query[0] == '1':\n        hanten += 1\n    else:\n        if query[1] == '1':\n            if hanten % 2 == 0:\n                fs += query[2]\n            else:\n                bs += query[2]\n        else:\n            if hanten % 2 == 0:\n                bs += query[2]\n            else:\n                fs += query[2]\nif hanten % 2 == 0:\n    print(fs[::-1]+S+bs)\nelse:\n    print(bs[::-1]+S[::-1]+fs)", "from collections import deque\nS=deque(input())\nQ=int(input())\nrev=0\nfor _ in range(Q):\n    q=input()\n    if q=='1':\n        rev=1-rev\n    else:\n        q1,f,c=q.split()\n        if rev:\n            if f=='1':\n                S.append(c)\n            else:\n                S.appendleft(c)\n        else:\n            if f=='1':\n                S.appendleft(c)\n            else:\n                S.append(c)\nif rev:\n    S.reverse()\nprint(''.join(S))", "from collections import deque\n\ns = deque(input())\nq = int(input())\nflag = True\n\nfor _ in range(q) :\n    tfc = input().split()\n\n    if tfc[0] == '1' :\n        if flag == True :\n            flag = False\n        else :\n            flag = True\n    else :\n        if flag == True :\n            if tfc[1] == '1' :\n                s.appendleft(tfc[2])\n            else :\n                s.append(tfc[2])\n        else :\n            if tfc[1] == '1' :\n                s.append(tfc[2])\n            else :\n                s.appendleft(tfc[2])\n\nif flag == True :\n    print(''.join(s))\nelse :\n    s.reverse()\n    print(''.join(s))", "def main():\n    from collections import deque\n    s = deque(input())\n    q = int(input())\n\n    flag = 0\n    query = []\n\n    for _ in range(q):\n        temp = input().split()\n        if len(temp) == 1:\n            flag += 1\n        else:\n            query.append(temp + [flag%2])\n\n    for q in query:\n        if q[-1] == 0:\n            if q[1] == \"1\":\n                s.appendleft(q[2])\n            else:\n                s.append(q[2])\n        else:\n            if q[1] == \"1\":\n                s.append(q[2])\n            else:\n                s.appendleft(q[2])\n\n    if flag % 2 == 1:\n        print((\"\".join(list(s)[::-1])))\n    else:\n        print((\"\".join(s)))\n\nmain()\n", "from collections import deque\ns = list(input())\nq = int(input())\n\nd = deque()\nfor i in s:\n    d.append(i)\n\nc = 1\nfor _ in range(q):\n    t = list(input().split())\n    if t[0] == '1':\n        c *= -1\n    else:\n        if t[1] == '1':\n            if c == 1:\n                d.appendleft(t[2])\n            else:\n                d.append(t[2])\n        else:\n            if c == 1:\n                d.append(t[2])\n            else:\n                d.appendleft(t[2])\n\nprint((''.join(list(d)[::c])))\n", "from collections import deque\ns = deque(input())\nq = int(input())\nquery = [list(input().split()) for _ in range(q)]\n\nreverse = 0# 3 or 0\n\nfor i in range(q):\n    if int(query[i][0]) == 1:\n        reverse = abs(reverse-3)\n    else:\n        if abs(int(query[i][1])-reverse) == 1:\n            s.appendleft(query[i][2])\n        else:\n            s.append(query[i][2])\n\nif reverse:\n    s = list(s)[::-1]\nelse:\n    s = list(s)\n\nprint((''.join(list(map(str,s)))))\n", "S = input()\ntop = 0\nend = len(S)-1\ntoright = True\nN = int(input())\nQ = [S[i] if i <= end else \"\" for i in range(end+1+N)]\n\nfor i in range(N):\n  q = input().split()\n  if q[0]==\"1\":\n    toright = not toright\n  else:\n    if not(toright ^ (q[1]==\"1\")):\n      Q[top-1]=q[2]\n      top -= 1\n    else:\n      Q[end+1]=q[2]\n      end += 1\nans = \"\"\n#print(Q)\n#print(toright)\nfor i in range(top, end+1):\n  ans += Q[i]\nif not toright:\n  ans = ans[::-1]\nprint(ans)\n", "from collections import deque\nS=deque()\nf=input\nS.extend(list(f()))\nF=1\n \nfor _ in range(int(f())):\n q=input()\n if q[0]=='1':F=1-F\n else:\n   if int(q[2])+F==2:S.appendleft(q[4])\n   else:S.append(q[4])\nprint(''.join(list(S) if F==1 else list(S)[::-1]))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nans = collections.deque(ns())\nq = ni()\nnow = 0\nfor i in range(q):\n    query = ns().split(' ')\n    if query[0] == '1':\n        now = 1 - now\n    else:\n        f, c = query[1], query[2]\n        if f == '1':\n            if now == 1:\n                ans.append(c)\n            else:\n                ans.appendleft(c)\n        else:\n            if now != 1:\n                ans.append(c)\n            else:\n                ans.appendleft(c)\n\nif now == 1:\n    for i in range(len(ans)):\n        print(ans[-(i+1)], end=\"\")\nelse:\n    for i in range(len(ans)):\n        print(ans[i], end=\"\")\nprint()", "from sys import stdin\nfrom collections import deque\n\n\ndef input():\n    return stdin.readline().strip()\n\n\nS = list(input())\nq = deque(S)\nis_flipped = False\nfor _ in range(int(input())):\n    q_t, *q_d = input().split()\n    if q_t == \"1\":\n        is_flipped = not is_flipped\n    else:\n        f, c = q_d\n        if (not is_flipped and f == \"1\") or (is_flipped and f == \"2\"):\n            q.appendleft(c)\n        else:\n            q.append(c)\nans = list(q)\nprint(\"\".join(ans[::-1])) if is_flipped else print(\"\".join(ans))\n", "S = input()\nN = int(input())\nflg = 0\nL = []\nfor i in range(N):\n    e = input().split()\n    if e[0] == '1':\n        flg += 1\n        flg = flg%2\n    else:\n        L.append(((flg+int(e[1]))%2, e[2]))\n\nS = ''.join(list(reversed(S))) if flg else S\ns1, s2 = '', ''\nfor f, v in L:\n    if (flg+f)%2 == 1:\n        s1 += v\n    else:\n        s2 += v\n\nans = ''.join(list(reversed(s1))) + S + s2\nprint(ans)", "from collections import deque\nS=deque()\nf=input\nS.extend(f())\nF=1\n \nfor _ in range(int(f())):\n q=input()\n if q[0]=='1':F=1-F\n else:\n   if int(q[2])+F==2:S.appendleft(q[4])\n   else:S.append(q[4])\nprint(''.join([list(S)[::-1],S][F]))", "# Referred to https://atcoder.jp/contests/abc158/submissions/17106264\nfrom collections import deque \ns,j=deque(input()),False\nfor _ in range(int(input())):\n  t=input().split()\n  if t[0]=='1':\n    j=not j\n    continue\n  if t[1]=='1':\n    if j: s.append(t[2])\n    else: s.appendleft(t[2])\n  else:\n    if j: s.appendleft(t[2])\n    else: s.append(t[2])\nif j: s.reverse()\nprint(*s,sep='')\n", "S = input()\nQ = int(input())\n\nflg = True\nT, U = \"\", \"\"\nfor i in range(Q):\n    q = list(input().split())\n    if len(q) == 1:\n        flg = not flg\n    else:\n        if flg:\n            if q[1] == \"1\":\n                T = q[2] + T\n            else:\n                U = U + q[2]\n        else:\n            if q[1] == \"1\":\n                U = U + q[2]\n            else:\n                T = q[2] + T\n\nS = T + S + U\nif not flg:\n    S = S[::-1]\n\nprint(S)\n", "from queue import deque\nS = input()\nQ = int(input())\nQuery = list(input().split() for _ in range(Q))\n\ncount = 0\nL, R = deque(), deque()\n\nfor i in range(Q):\n  if Query[i][0] == \"1\": count += 1\n  else:\n    if Query[i][1] == \"1\":\n      if count % 2 == 0: L.appendleft(Query[i][2])\n      else: R.append(Query[i][2])\n    else:\n      if count % 2 == 0: R.append(Query[i][2])\n      else: L.appendleft(Query[i][2])\nL, R = \"\".join(L), \"\".join(R)\nif count % 2 == 0: print(L + S + R)\nelse: print(R[::-1] + S[::-1] + L[::-1])", "s = input()\nq = int(input())\n\nhead = ''\ntail = ''\nrev = False\nfor _ in range(q):\n    ql = list(input().split())\n\n    if ql[0] == '1':\n        head, tail = tail, head\n        if rev:\n            rev = False\n        else:\n            rev = True\n    else:\n        if ql[1] == '1':\n            head += ql[2]\n        else:\n            tail += ql[2]\n\nif rev:\n    ans = head[::-1] + s[::-1] + tail\nelse:\n    ans = head[::-1] + s + tail\n\nprint(ans)", "import os, sys, re, math\n\nS = input()\nQ = int(input())\n\ndirection = 1\nprefix = ''\nsuffix = ''\nfor i in range(Q):\n    query = input().split()\n    if int(query[0]) == 1:\n        direction = 2 if direction == 1 else 1\n    else:\n        if int(query[1]) ^ direction == 0:\n            prefix = query[2] + prefix\n        else:\n            suffix = suffix + query[2]\n\nS = prefix + S + suffix\nif direction == 1:\n    print(S)\nelse:\n    print((S[::-1]))\n", "from collections import deque\nS = str(input());s = []\nfor i in range(len(S)):\n  s.append(S[i])\ns = deque(s)\nQ = int(input())\neo = 0\nfor query in range(Q):\n  temp = list(map(str,input().split()))\n  if temp[0] == \"1\":\n    eo += 1 #\u53cd\u8ee2\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\n  else:\n    if temp[1] == \"1\":\n      if eo%2 == 0:\n        s.appendleft(temp[2])\n      else:\n        s.append(temp[2])\n    else:\n      if eo%2 == 0:\n        s.append(temp[2])\n      else:\n        s.appendleft(temp[2])\n#print(s)\ns = list(s)\nif eo%2 == 0:\n  ans = \"\".join(s)\nelse:\n  s = s[::-1]\n  ans = \"\".join(s)\nprint(ans)", "from collections import deque\n\nS = input()\nq = int(input())\nQuery = [list(map(str, input().split())) for _ in range(q)]\n\nflg = True\n\nD = deque(S)\n\nfor query in Query:\n    if query[0] == \"1\":\n        flg = not flg\n    else:\n        F, C = query[1], query[2]\n        if (F == \"1\") and (flg is True):\n            D.appendleft(C)\n        elif (F == \"1\") and (flg is False):\n            D.append(C)\n        elif (F == \"2\") and (flg is True):\n            D.append(C)\n        elif (F == \"2\") and (flg is False):\n            D.appendleft(C)\n\nif flg:\n    print(\"\".join(D))\nelse:\n    print(\"\".join(list(reversed(D))))", "from collections import deque\nS=deque()\nS.extend(list(input()))\nF=True\n\nfor _ in range(int(input())):\n q=input().split()\n if q[0]=='1':F=not(F)\n else:\n   c=q[2]\n   if (q[1]=='1' and F) or (q[1]=='2' and not(F)):S.appendleft(c)\n   else:S.append(c)\nprint(''.join(list(S)) if F else ''.join(list(S)[::-1]))", "def main():\n\tS = list(input())\n\tT = []\n\treverse = False\n\tn_q = int(input())\n\tfor i in range(n_q):\n\t\tq = input().split(\" \")\n\t\tif q[0] == \"1\":\n\t\t\treverse = not reverse\n\t\telif q[0] == \"2\":\n\t\t\tf = q[1]\n\t\t\tc = q[2]\n\t\t\tif (f == \"1\" and not reverse) or (f == \"2\" and reverse):\n\t\t\t\tT.append(c)\n\t\t\telif (f == \"1\" and reverse) or (f == \"2\" and not reverse):\n\t\t\t\tS.append(c)\n\tif reverse:\n\t\tS.reverse()\n\t\tans = S + T\n\telif not reverse:\n\t\tT.reverse()\n\t\tans = T + S\n\tprint(\"\".join(ans))\n\nmain()", "from collections import deque\nS=deque()\nf=input\nS.extend(list(f()))\nF=1\n \nfor _ in range(int(f())):\n q=input()\n if q[0]=='1':F=1-F\n else:\n   if int(q[2])+F==2:S.appendleft(q[4])\n   else:S.append(q[4])\nprint(''.join(S if F==1 else list(S)[::-1]))", "from collections import deque\n\ns = input()\nq = int(input())\na = 1\np = deque([s])\nfor _ in range(q):\n    tfc = list(input().split())\n    if tfc[0] == '1':\n        a *= -1\n    else:\n        c = tfc[2]\n        if tfc[1] == '1':\n            if a == 1:\n                p.appendleft(c)\n            else:\n                p.append(c)\n        else:\n            if a == 1:\n                p.append(c)\n            else:\n                p.appendleft(c)\nprint((''.join(p) if a == 1 else ''.join(p)[::-1]))\n", "def main():\n    s = str(input())\n    q = int(input())\n    lst = [list(map(str, input().split())) for _ in range(q)]\n    switch = 0  # 0\u304c\u901a\u5e38\u30001\u304c\u524d\n\n    str_lst = [s]\n    front_lst = []\n    for i in range(q):\n\n        if lst[i][0] == '1':\n            switch = 1 - switch\n\n        else:\n            f = lst[i][1]\n            c = lst[i][2]\n\n            if f == '1':  # \u5148\u982d\u306b\u8ffd\u52a0\n\n                if switch == 0:\n                    front_lst.append(c)\n\n                else:\n                    str_lst.append(c)\n\n            else:\n\n                if switch == 0:\n                    str_lst.append(c)\n\n                else:\n                    front_lst.append(c)\n\n    front = ''.join(front_lst)\n    front = front[::-1]\n    after = ''.join(str_lst)\n    answer = front + after\n\n    if switch == 1:\n        answer = answer[::-1]\n\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def N():\n    return int(input())\ndef L():\n    return list(map(int,input().split()))\ndef NL(n):\n    return [list(map(int,input().split())) for i in range(n)]\nmod = pow(10,9)+7\n\n#import numpy as np\nimport sys\nimport math\nimport collections\n\ns = input()\nn = N()\nf = False\nh = ''\nt = ''\nfor i in range(n):\n    q = input().split()\n    if (len(q) == 1):\n        f = not(f)\n    else:\n        if (f and q[1]=='1')or(not(f)and q[1]=='2'):\n            t += q[2]\n        else:\n            h += q[2]\nif f:\n    ans = t[::-1] + s[::-1] + h\nelse:\n    ans = h[::-1] + s + t\nprint(ans)\n", "S=input()\ntop=''\nQ=int(input())\nt=0\nfor i in range(Q):\n    strA=input().split()\n    if strA[0]=='1':\n        t=t+1\n    else:\n        if strA[1]=='1':\n            if t%2==0:\n                top=top+strA[2]\n            else:\n                S=S+strA[2]\n        else:\n            if t%2==0:\n                S=S+strA[2]\n            else:\n                top=top+strA[2]\n\nif t%2==0:\n    S=top[::-1]+S\nelse:\n    S=S[::-1]+top\nprint(S)\n", "from collections import deque\nS=deque()\nS.extend(list(input()))\nQ=int(input())\nF=True\n\nfor _ in range(Q):\n q=input().split()\n if q[0]=='1':\n   F=not(F)\n else:\n   c=q[2]\n   if (q[1]=='1' and F) or (q[1]=='2' and not(F)):\n       S.appendleft(c)\n   else:\n       S.append(c)\nprint(''.join(list(S)) if F else ''.join(list(S)[::-1]))", "\nfrom collections import deque\n\n\ndef main():\n    s = deque(input())\n    q = int(input())\n    flg = 0\n\n    for i in range(q):\n        l = list(map(str, input().split()))\n        if len(l) == 1:\n            flg = 1 - flg\n        elif (flg == 0 and l[1] == \"1\") or (flg == 1 and l[1] == \"2\"):\n            s.appendleft(l[2])\n        else:\n            s.append(l[2])\n\n    if flg == 0:\n        print((\"\".join(s)))\n    else:\n        print((\"\".join(reversed(s))))\n\n\nmain()\n", "import sys\ninput = sys.stdin.readline # for speed up\n#sys.setrecursionlimit(10**9)\n\ns=list(input().replace(\"\\n\",\"\"))\n\nfrom collections import deque\ndqn=deque(s)\n\nn=int(input())\ntemp_rev=False\nfor _ in range(n):\n\tqfc=input().split()\n\tq=qfc[0]\n\tif q==\"1\":\n\t\ttemp_rev=not temp_rev\n\telse: # q==\"2\"\n\t    f=qfc[1]\n\t    c=qfc[2]\n\t    if f==\"1\":\n\t        if temp_rev:\n\t            dqn.append(c)\n\t        else: # if not temp_rev:\n\t            dqn.appendleft(c)\n\t    else: # f==\"2\"\n\t        if temp_rev:\n\t            dqn.appendleft(c)\n\t        else: # if not temp_rev:\n\t            dqn.append(c)\n\t#print(temp_rev,dqn)\ndqn=list(dqn)\n#print(dqn)\nif temp_rev:\n\tprint((\"\".join([dqn[len(dqn)-1-ii] for ii in range(len(dqn))])))\nelse:\n\tprint((\"\".join(dqn)))\n", "def resolve():\n    s = input()\n    query = int(input())\n    r = 0\n    left = ''\n    for i in range(query):\n        q = input()\n        if q[0]=='2':\n            _,f,c = q.split()\n            if (int(f)+r)%2 == 0:\n                s += c\n            else:\n                left += c\n        else:\n            r = (r+1)%2\n    print(left[::-1]+s if r==0 else s[::-1]+left)\nresolve()", "from collections import deque\ns = deque(list(input()))\nq = int(input())\ntop = 0\nfor i in range(q):\n    t = input()\n    if t[0] == \"1\":\n        top = 1-top\n        continue\n    t = t.split()\n    if t[1] == \"1\":\n        if top == 0:\n            s.appendleft(t[2])\n        else:\n            s.append(t[2])\n    else:\n        if top == 0:\n            s.append(t[2])\n        else:\n            s.appendleft(t[2])\nif top == 0:\n    for i in range(len(s)):\n        print(s[i],end=\"\")\nelse:\n    for i in range(len(s)-1, -1, -1):\n        print(s[i],end=\"\")", "from collections import deque\n\npoe=deque([])\nS=input()\nfor i in range(len(S)):\n    poe.append(S[i])\nQ=int(input())\nP=[]\ncnt=0\nfor i in range(Q):\n    a=list(input().split())\n    P.append(a)\n\nfor i in range(Q):\n    if len(P[i])==1:\n        cnt+=1\n    else:\n        P[i][1]=int(P[i][1])+cnt\n        if P[i][1]%2==1:\n            poe.appendleft(P[i][2])\n        else:\n            poe.append(P[i][2])\n\npoe=list(poe)\nif cnt%2==1:\n    poe=poe[::-1]\nprint(''.join(poe))", "from collections import deque\nS=deque()\nS.extend(list(input()))\nF=True\n\nfor _ in range(int(input())):\n p,*q=input().split()\n if p=='1':F=not(F)\n else:\n   c=q[1]\n   if (q[0]=='1' and F) or (q[0]=='2' and not(F)):S.appendleft(c)\n   else:S.append(c)\nprint(''.join(list(S) if F else list(S)[::-1]))", "from collections import deque\n\ns = deque(input())\nq = int(input())\n\nflag = True\nfor _ in range(q):\n    temp = input().split()\n    if len(temp) == 1:\n        flag = not flag\n    else:\n        if flag:\n            if temp[1] == \"1\":\n                s.appendleft(temp[2])\n            else:\n                s.append(temp[2])\n        else:\n            if temp[1] == \"1\":\n                s.append(temp[2])\n            else:\n                s.appendleft(temp[2])\n\nif flag:\n    print(\"\".join(s))\nelse:\n    print(\"\".join(list(s)[::-1]))", "def main():\n    S = input()\n    Q = int(input())\n    order = [list(input().split()) for _ in range(Q)]\n    left_flag = 0\n    right_flag = 0\n    cnt = 0\n    for i in range(Q):\n        if order[i][0] == '1':\n            cnt += 1\n        else:\n            if cnt%2 == 0:\n                if order[i][1] == '1':\n                    if left_flag == 1:\n                        left = order[i][2] + left\n                    else:\n                        left = order[i][2]\n                        left_flag = 1\n                else:\n                    if right_flag == 1:\n                        right = right + order[i][2]\n                    else:\n                        right = order[i][2]\n                        right_flag = 1\n            else:\n                if order[i][1] == '2':\n                    if left_flag == 1:\n                        left = order[i][2] + left\n                    else:\n                        left = order[i][2]\n                        left_flag = 1\n                else:\n                    if right_flag == 1:\n                        right = right + order[i][2]\n                    else:\n                        right = order[i][2]\n                        right_flag = 1\n    if left_flag == 1 and right_flag == 1:\n        S = left + S + right\n    elif left_flag == 1 and right_flag == 0:\n        S = left + S\n    elif left_flag == 0 and right_flag == 1:\n        S = S + right\n    else:\n        S = S\n\n    if cnt%2 == 0:\n        return(S)\n    else:\n        S2 = S[-1]\n        for i in range(len(S)-2,-1,-1):\n            S2 = S2 + S[i]\n        return S2\n\nprint((main()))\n", "from collections import deque\n\nS = list(input())\nQ = int(input())\nanswer = deque(S)\nreverse = False\nfor _ in range(Q):\n  query = input()\n  if query == '1':\n    reverse ^= True\n  else:\n    ope, types, alphabet = query.split()\n    if types == '1':\n      if reverse:\n        answer.append(alphabet)\n      else:\n        answer.appendleft(alphabet)\n    else:\n      if reverse:\n        answer.appendleft(alphabet)\n      else:\n        answer.append(alphabet)\nif reverse:\n  result = ''\n  for i in range(len(answer)):\n    result += answer.pop()\n  print(result)\nelse:\n  result = ''\n  for i in range(len(answer)):\n    result += answer.popleft()\n  print(result)\n", "S = input()\nQ = int(input())\nT = 0\ns = \"\"\nfor i in range(Q):\n    q = list(input().split())\n    if q[0] == \"1\":\n        T = (T+1) % 2\n    elif (T == 0 and q[1] == \"1\") or (T == 1 and q[1] == \"2\"):\n        s += q[2]\n    else:\n        S += q[2]\nif T == 0:\n    S = s[::-1] + S\n    print(S)\nelse:\n    S = S[::-1] + s\n    print(S)", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\n\ns = input()\nq = int(input())\n\ninv = False\n\nfro = \"\"\nend = \"\"\n\nfor _ in range(q):\n    query = list(map(str, input().split()))\n\n    if query[0] == \"1\":\n        inv = not inv\n\n    else:\n        t = int(query[1])\n        instr = query[2]\n        if not inv:\n            if t == 1:\n                fro = instr + fro\n            else:\n                end = end + instr\n\n        else:\n            if t == 1:\n                end = end + instr[::-1]\n            else:\n                fro = instr[::-1] + fro\n\nans = fro + s + end\n\nif not inv:\n    print(ans)\n\nelse:\n    print((ans[::-1]))\n", "from collections import deque\ns = input()\nq = int(input())\ninv = False\npr, su = deque(), deque()\nfor _ in range(q):\n    query = input()\n    if query[0] == '1':\n        inv = not inv\n    else:\n        _, f, c = query.split()\n        if inv:\n            if f == '1': su.append(c)\n            else: pr.append(c)\n        else:\n            if f == '1': pr.append(c)\n            else: su.append(c)\nans = ''.join(pr)[::-1] + s + ''.join(su)\nprint(ans[::-1] if inv else ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep  8 14:42:59 2020\n\n@author: liang\n\"\"\"\n\nfrom collections import deque\nS = deque(input())\nQ = int(input())\n\nreverse = False\n\nfor i in range(Q):\n    t = input().split()\n    if int(t[0]) == 1:\n        if reverse == False:\n            reverse = True\n        else:\n            reverse = False\n    else:\n        F = int(t[1])\n        C = t[2]\n        if F == 1:\n            if reverse == False:\n                S.appendleft(C)\n            else:\n                S.append(C)\n        else:\n            if reverse == False:\n                S.append(C)\n            else:\n                S.appendleft(C)\n\n                \nif reverse == False:\n    print((''.join(S)))\nelse:\n    print((''.join(reversed(S))))\n", "import collections\nS = list(input())\ndeq = collections.deque(S)\nQ = int(input())\nmode = 1\nfor i in range(Q):\n    f = input()\n    f1 = f[0]\n    if f1 == '1':\n        mode = mode*(-1)\n    else:\n        f1,F,C = map(str,f.split())\n        if (F == '1' and mode == 1) or (F == '2' and mode == -1):\n            deq.appendleft(C)\n        if (F == '2' and mode == 1) or (F == '1' and mode == -1):\n            deq.append(C)\nif mode == -1:\n    deq.reverse()\nans = ''.join(deq)\nprint(ans)", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\n\ns = input()\nq = int(input())\n\ninv = False\n\nfro = \"\"\nend = \"\"\n\nfor _ in range(q):\n    query = list(map(str, input().split()))\n\n    if query[0] == \"1\":\n        inv = not inv\n\n    else:\n        t = int(query[1])\n        instr = query[2]\n        if not inv:\n            if t == 1:\n                fro = instr + fro\n            else:\n                end = end + instr\n\n        else:\n            if t == 1:\n                end = end + instr[::-1]\n            else:\n                fro = instr[::-1] + fro\n\nans = fro + s + end\n\nif not inv:\n    print(ans)\n\nelse:\n    print(ans[::-1])", "s=list(input())\nfrom _collections import deque\ns=deque(s)\nq=int(input())\nrev=False\nfor i in range(q):\n    query=input()\n    if len(query)==1:\n        rev=not rev\n    else:\n        x,f,c=query.split()\n        if f==\"1\":\n            if rev:\n                s.append(c)\n            else:\n                s.appendleft(c)\n        else:\n            if rev:\n                s.appendleft(c)\n            else:\n                s.append(c)\nn=len(s)\n\nif rev:\n    ans=[s[n-1-i] for i in range(n)]\nelse:\n    ans=[s[i] for i in range(n)]\nprint(\"\".join(ans))", "from collections import deque \ns,j=deque(input()),False\nfor _ in range(int(input())):\n  t=input().split()\n  if t[0]=='1':\n    j=not j\n    continue\n  if t[1]=='1':\n    if j: s.append(t[2])\n    else: s.appendleft(t[2])\n  else:\n    if j: s.appendleft(t[2])\n    else: s.append(t[2])\nif j: s.reverse()\nprint(*s,sep='')", "from collections import deque\ns = deque(input())\nq = int(input())\n\nflag = 0\nfor _ in range(q):\n  query = list(map(str, input().split()))\n  if query[0] == \"1\": flag = 1 - flag\n  else:\n    if query[1] == \"1\":\n      if flag == 0: s.appendleft(query[2])\n      else: s.append(query[2])\n    else:\n      if flag == 0: s.append(query[2])\n      else: s.appendleft(query[2])\n\nif flag == 1: s.reverse()\nprint(*s, sep=\"\")", "from collections import deque\ns=deque(list(input()))\nq=int(input())\ncount=0\nfor i in range(q):\n    query=input()\n    if query==\"1\":\n        count+=1\n    elif query[2]==\"1\":\n        if count%2==0:\n            s.appendleft(query[-1])\n        else:\n            s.append(query[-1])\n    else:\n        if count%2==0:\n            s.append(query[-1])\n        else:\n            s.appendleft(query[-1])\nif count%2==1:\n    s.reverse()\nprint(*s,sep=\"\")", "from collections import deque\nS = deque(list(input()))\nq = int(input())\nflag = False\nfor i in range(q):\n  query = list(map(str,input().split()))\n  if query[0] == \"1\" and flag == False:\n    flag = True\n  elif query[0] == \"1\" and flag == True:\n    flag = False\n  else:\n    if (flag == False and query[1] == \"1\") or (flag == True and query[1] == \"2\"):\n      S.appendleft(query[2])\n    else:\n      S.append(query[2])\nif flag:\n  S = list(S)[::-1]\nelse:\n  S = list(S)\nprint(\"\".join(map(str,list(S))))", "from collections import deque\nS = deque(input())\nn = int(input())\nQ = [list(map(str, input().split())) for _ in range(n)]\n\nflg = True\nfor q in Q:\n    if q[0] == \"1\":\n        flg = not flg\n    else:\n        F = int(q[1])\n        if not flg:\n            F = 3 - F\n        if F == 1:\n            S.appendleft(q[2])\n        if F == 2:\n            S.append(q[2])\n\nif not flg:\n    S.reverse()\nprint(\"\".join(S))", "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\nSs = input().rstrip()\nQ = int(input())\n\nisRev = False\nqueue = deque(Ss)\nfor _ in range(Q):\n    ts = input().rstrip()\n    if ts[0] == '1':\n        isRev = not isRev\n    else:\n        tp, f, c = ts.split()\n        if f == '1':\n            if isRev:\n                queue.append(c)\n            else:\n                queue.appendleft(c)\n        else:\n            if isRev:\n                queue.appendleft(c)\n            else:\n                queue.append(c)\n\nanss = list(queue)\nif isRev:\n    anss.reverse()\n\nprint((''.join(anss)))\n", "from collections import deque\n\nS = deque(list(input()))\nQ = int(input())\nflag = 0\nfor _ in range(Q):\n    q = input()\n    if q[0] == '1':\n        flag = 1 - flag\n    else:\n        _, F, C = q.split()\n        if int(F) - flag == 1:\n            S.appendleft(C)\n        else:\n            S.append(C)\nif flag:\n    S.reverse()\nprint(''.join(S))", "S = input()\nQ = int(input())\nquery = [input().split() for _ in range(Q)]\n\nswitch = 1\ntop = []\nbottom = []\n\nfor i in range(Q):\n  if query[i][0] == \"1\":\n    switch *= -1\n\n  else:\n    f = query[i][1]\n    c = query[i][2]\n    if switch == 1:\n      if f == \"1\":\n        top.append(c)\n      else:\n        bottom.append(c)\n    else:\n      if f == \"1\":\n        bottom.append(c)\n      else:\n        top.append(c)\n\nif switch == 1:\n  ans = top[::-1] + list(S) + bottom\nelse:\n  ans = bottom[::-1] + list(S)[::-1] + top\n  \nprint(\"\".join(ans))", "# D - String Formation\nfrom collections import deque \nS = deque(input())\nQ = int(input())\nQuery = [list(input().split()) for _ in range(Q)]\n\n# \u6587\u5b57\u5217\u306e\u5411\u304d (0: \u6b63, 1: \u9006)\nrev = 0\nfor Q in Query:\n    if Q[0] == '1':\n        if rev == 0:\n            rev = 1\n        else:\n            rev = 0\n        continue\n    if Q[1] == '1':\n        if rev == 0:\n            S.appendleft(Q[2])\n        else:\n            S.append(Q[2])\n    else:\n        if rev == 0:\n            S.append(Q[2])\n        else:\n            S.appendleft(Q[2])\n\nif rev == 1:\n    ans = list(reversed(list(S)))\nelse:\n    ans = list(S)\nprint(''.join(ans))", "from collections import deque\nS = input()\nQ = int(input())\ncnt = 0\nD = deque()\nD.append(S)\nfor _ in range(Q):\n    q = input()\n    if q == \"1\":\n        cnt += 1\n    else:\n        q, f, c = list(map(str, q.split()))\n        f = int(f)\n        if cnt % 2 == 0:\n            if f == 2:\n                D.append(c)\n            else:\n                D.appendleft(c)\n        else:\n            if f == 2:\n                D.appendleft(c)\n            else:\n                D.append(c)\n\nX = \"\".join(D)\n\nprint((X if cnt % 2 == 0 else X[::-1]))\n", "from collections import deque\ns = deque(list(input()))\nn = int(input())\nnormal = 0\nfor i in range(n):\n  li = input().split()\n  if int(li[0]) == 1:\n    normal ^= 1\n  else:\n    k = int(li[1]) - 1\n    k ^= normal\n    if k == 1:\n      s.append(li[2])\n    else:\n      s.appendleft(li[2])\nprint(''.join(s) if normal == 0 else ''.join(list(s)[::-1]))      ", "from collections import deque\n\n\nQ=deque(list(input()))\n\nq=int(input())\n\ncnt=0\n\nfor i in range(q):\n  x=input()\n  if x[0]=='1':\n    cnt+=1\n    cnt%=2\n    \n  elif x[0]=='2':\n    if x[2]=='1':\n        if cnt%2==0:\n            Q.appendleft(x[4])\n        else:\n            Q.append(x[4])\n\n    else:\n        if cnt%2==0:\n            Q.append(x[4])\n        else:\n            Q.appendleft(x[4])\n      \nif cnt%2==1:\n  Q.reverse()\n\n\nprint(''.join(Q))", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return list(map(int,input().split()))\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\ns = deque(X())\nn = k()\nnormal = 0\nfor i in range(n):\n  a = input().split()\n  if int(a[0]) == 1:\n    normal ^= 1\n  else:\n    k = int(a[1]) - 1\n    k ^= normal\n    if k == 1:\n      s.append(a[2])\n    else:\n      s.appendleft(a[2])\nprint((''.join(s) if normal == 0 else ''.join(list(s)[::-1])))      \n", "import sys\npin=sys.stdin.readline\n\nS=pin()[:-1]\nQ=int(pin())\nnow=1\nans1=\"\"\nans2=\"\"\nfor i in range(Q):\n  D=pin().split()\n  T=0\n  F=0\n  C=\"\"\n  if len(D)==1:\n    T=int(D[0])\n  else:\n    T=int(D[0])\n    F=int(D[1])\n    C=D[2]\n  if T==1:\n    now*=-1\n  else:\n    if F==1:\n      if now==1:\n        ans1=C+ans1\n      else:\n        ans2=ans2+C\n    else:\n      if now==1:\n        ans2=ans2+C\n      else:\n        ans1=C+ans1\nif now==1:\n  print((ans1+S+ans2))\nelse:\n  print((ans2[::-1]+S[::-1]+ans1[::-1]))\n\n", "s = input()\nq = int(input())\nrev = False\ntop = ''\nfor i in range(q):\n  query = input().split()\n  \n  if query[0] == '1':\n    rev = not rev\n  else:\n    \n   \n    if query[1] == '1':\n      if rev: \n        s += query[2]\n      else:\n        top += query[2]\n    elif query[1] == '2':\n      if rev:\n        top += query[2]\n      else:\n        s += query[2]\nif rev:\n  s = s[::-1] + top\nelse:\n  s = top[::-1] + s\nprint(s)", "from collections import deque\nd = deque()\nS = input()\nd.append(S)\nQ = int(input())\nquery = [list(input().split()) for _ in range(Q)]\n\nrev = 0\nfor i in range(Q):\n\tif query[i][0] == str(1):\n\t\trev += 1\n\telse:\n\t\tif rev % 2 == 0:\n\t\t\tif query[i][1] == str(1):\n\t\t\t\td.appendleft(query[i][2])\n\t\t\telse:\n\t\t\t\td.append(query[i][2])\n\t\telse:\n\t\t\tif query[i][1] == str(1):\n\t\t\t\td.append(query[i][2])\n\t\t\telse:\n\t\t\t\td.appendleft(query[i][2])\n\nans = ''.join(list(d))\nif rev % 2 != 0:\n\tans = ans[::-1]\n\nprint(ans)\n", "from collections import deque\ns=deque(list(input()))\nn=int(input())\nQ=[]\nfor i in range(n) :\n    Q.append(list(input().split()))\n \ncount=0\nfor q in Q :\n    if q[0]==\"1\" :\n        count+=1\n    elif q[0]==\"2\" and count%2==0 :\n        if q[1]==\"1\" :\n            s.appendleft(q[2])\n        else :\n            s.append(q[2])\n    else :\n        if q[1]==\"1\" :\n            s.append(q[2])\n        else :\n            s.appendleft(q[2])\n \nans=\"\".join(s)\nif count%2==0 :\n    print(ans)\nelse :\n    print(ans[::-1])", "s=input()\nq=int(input())\nque=[list(map(str,input().split())) for i in range(q)]\ncount=0\nfor i in que:\n  if i[0]==\"1\":\n    count+=1\nans=[[],[]]\nak=count\nfor i in que:\n  if i[0]==\"1\":\n    count-=1\n  else:\n    if i[1]==\"1\":\n      ans[count%2].append(i[2])\n    else:\n      ans[(count+1)%2].append(i[2])\nif ak%2==0:\n  print(\"\".join(reversed(ans[0]))+s+\"\".join(ans[1]))\nelse:\n  print(\"\".join(reversed(ans[0]))+\"\".join(reversed(list(s)))+\"\".join(ans[1]))", "from collections import deque\nd = deque(input())\nn = int(input())\np=[]\nflg = 0\nfor i in range(n):\n  p = list(input().split())\n  #print(p)\n  if p[0] == \"1\":\n    flg ^= 1 # flg == 1 \u306e\u5834\u5408\u306f\u5de6\u53f3\u53cd\u8ee2\n    #print(flg)\n  else:    \n    if p[1] == \"1\": # 1\u306e\u5834\u5408\u306f\u5148\u982d\n      if flg == 1: # 1\u306e\u5834\u5408\u306f\u53cd\u8ee2\n        d.append(p[2])\n      else:\n        d.appendleft(p[2]) # \u5de6\u304b\u3089\u5165\u308c\u308b\n    else:\n      if flg == 1:\n        d.appendleft(p[2]) # \u5de6\u304b\u3089\u5165\u308c\u308b\n      else:\n        d.append(p[2])\n  \nif flg == 1:\n  d.reverse()\na =\"\"\nfor i in d:\n  a += i\nprint(a)", "from collections import deque\nS=deque(input())\nQ=int(input())\n \ns=1\nfor i in range(Q):\n  A = list(map(str,input().split()))\n  if A[0]=='1':s*=-1;continue\n  if A[1]=='1' and s==1:S.appendleft(A[2])\n  elif A[1]=='2' and s==-1:S.appendleft(A[2])\n  else:S.append(A[2])\n  \nif s==-1:S.reverse()\nprint(''.join(S))", "s = input()\nn = int(input())\nd = 1\nleft = \"\"\nright = \"\"\n\nfor i in range(n):\n    q = input()\n    \n    if q == \"1\":\n        d *= -1\n        \n    else:\n        _,f,c = q.split()\n        \n        if d == 1:\n            if f == \"1\":\n                left += c\n                \n            else:\n                right += c\n                \n        else:\n            if f == \"2\":\n                left += c\n                \n            else:\n                right += c\n\nans = left[::-1] + s + right\n\nprint(ans[::d])", "from collections import deque\nimport sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\ninput = sys.stdin.readline\nS = list(input().rstrip())\nS = deque(S)\ninput()\nrev = 0\nfor line in readlines():\n    q, *query, = line.split()\n    if q == '1':\n        rev ^= 1\n    else:\n        f, c = query\n        if f == '1':\n            if not rev:\n                S.appendleft(c)\n            else:\n                S.append(c)\n        else:\n            if not rev:\n                S.append(c)\n            else:\n                S.appendleft(c)\n\nprint((''.join(S) if not rev else ''.join(S)[::-1]))\n", "S = input()\nQ = int(input())\npre = ''#\u9006\u9806\nsuf = ''\nrev = 0\nfor i in range(Q):\n    inp = input()\n    if inp == '1':\n        pre, suf = suf, pre\n        rev += 1\n    else:\n        inp_l = inp.split()\n        if inp_l[1] == '1':\n            pre = pre + inp_l[2]\n        else:\n            suf = suf + inp_l[2]\nif rev%2 == 0:\n    print(''.join(list(reversed(pre)))+S+suf)\nelse:\n    print(''.join(list(reversed(pre)))+''.join(list(reversed(S)))+suf)", "s=list(input())\nq=int(input())\nrv=False\nright=[]\nleft=[]\nfor _ in range(q):\n  query=input()\n  if query[0]=='1':\n    rv=not rv\n  else:\n    _,f,c=query.split()\n    if f=='1' and rv==False:\n      left.append(c)\n    elif f=='1' and rv==True:\n      right.append(c)\n    elif f=='2' and rv==False:\n      right.append(c)\n    elif f=='2' and rv==True:\n      left.append(c)\nif not rv:\n  left.reverse()\n  print((''.join(left)+''.join(s)+''.join(right)))\nelse:\n  right.reverse()\n  s.reverse()\n  print((''.join(right)+''.join(s)+''.join(left)))\n", "from collections import deque\nd = deque(input())\nn = int(input())\np=[]\nflg = 0\nfor i in range(n):\n  p = list(input().split())\n  #print(p)\n  if p[0] == \"1\":\n    flg ^= 1 # flg == 1 \u306e\u5834\u5408\u306f\u5de6\u53f3\u53cd\u8ee2\n    #print(flg)\n  else:    \n    if p[1] == \"1\": # 1\u306e\u5834\u5408\u306f\u5148\u982d\n      if flg == 1: # 1\u306e\u5834\u5408\u306f\u53cd\u8ee2\n        d.append(p[2])\n      else:\n        d.appendleft(p[2]) # \u5de6\u304b\u3089\u5165\u308c\u308b\n    else:\n      if flg == 1:\n        d.appendleft(p[2]) # \u5de6\u304b\u3089\u5165\u308c\u308b\n      else:\n        d.append(p[2])\n  \nif flg == 1:\n  d.reverse()\na =\"\"\nfor i in d:\n  a += i\nprint(a)", "from collections import deque\nS=deque(input())\nQ=int(input())\n\ns=1\nfor i in range(Q):\n  A = list(map(str,input().split()))\n  if A[0]=='1':s*=-1;continue\n  if A[1]=='1' and s==1:S.appendleft(A[2])\n  elif A[1]=='2' and s==-1:S.appendleft(A[2])\n  else:S.append(A[2])\n  \nif s==-1:S.reverse()\nprint((''.join(S)))\n", "s = input()\nq = int(input())\nflag = 1\nf = ''\nb = ''\nfor i in range(q):\n  query = list(map(str, input().split()))\n  if query[0] == '1':\n    flag *= -1\n  else:\n    if flag == 1:\n      if query[1] == '1':\n        f += query[2]\n      else:\n        b += query[2]\n    else:\n      if query[1] == '1':\n        b += query[2]\n      else:\n        f += query[2]\nans = f[::-1] + s + b\nif flag == -1:\n  ans = ans[::-1]\nprint(ans)", "S = input()\nQ = int(input())\nreverse = False\nleft = ''\nright = ''\n\nfor _ in range(Q):\n    q = input().split()\n    if q[0] == '1':\n        reverse = not reverse\n    else:\n        F = q[1]\n        C = q[2]\n        if not reverse:\n            if F == '1':\n                left = C + left\n            else:\n                right += C\n        else:\n            if F == '1':\n                right += C\n            else:\n                left = C + left\n\nS = left + S + right\nif not reverse:\n    print(S)\n    return\nelse:\n    print((S[::-1]))\n    return\n", "from collections import deque\n\ndef main():\n\n    s = deque(input())\n    q = int(input())\n\n    flag = 0\n    query = []\n\n    for _ in range(q):\n        temp = input().split()\n        if len(temp) == 1:\n            flag += 1\n        else:\n            query.append(temp + [flag%2])\n\n    for q in query:\n        if q[-1] == 0:\n            if q[1] == \"1\":\n                s.appendleft(q[2])\n            else:\n                s.append(q[2])\n        else:\n            if q[1] == \"1\":\n                s.append(q[2])\n            else:\n                s.appendleft(q[2])\n\n    if flag % 2 == 1:\n        print((\"\".join(list(s)[::-1])))\n    else:\n        print((\"\".join(s)))\n\nmain()\n", "import sys\nS = input()\nQ = int(input())\nkey = 1\n\nfor i in sys.stdin:\n    if i[0] == '0':\n        break\n\n    if i[0] == '1':\n        key = -key\n    \n    elif key == 1:\n        if i[2] == '1':\n            S = i[4] + S\n        else:\n            S = S + i[4]\n\n    else:\n        if i[2] == '2':\n            S = i[4] + S\n        else:\n            S = S + i[4]\n\n\nprint(S[::key])", "from collections import deque\n\nz=list(input())\nQ=deque()\nfor i in z:\n  Q.append(i)\nq=int(input())\n\ncnt=0\n\nfor i in range(q):\n  x=input()\n  if x[0]=='1':\n    cnt+=1\n    cnt%=2\n    \n  elif x[0]=='2':\n    if x[2]=='1':\n        if cnt%2==0:\n            Q.appendleft(x[4])\n        else:\n            Q.append(x[4])\n\n    else:\n        if cnt%2==0:\n            Q.append(x[4])\n        else:\n            Q.appendleft(x[4])\n      \nif cnt%2==1:\n  Q.reverse()\n\n\nprint(''.join(Q))", "s = input()\nq = int(input())\n\nh = 0\nt =''\nb =''\n\nfor i in range(q):\n    x = list(input().split())\n    \n    if len(x) == 1:\n        h += 1\n    \n    elif h % 2 == 0:\n        if x[1] == '1':\n            t = (x[-1]) + t\n        else:\n            b += (x[-1])\n    \n    \n    elif h % 2 == 1:\n        if x[1] == '1':\n            b += (x[-1])\n        else:\n            t = (x[-1]) + t\n    \nif h % 2 == 0:\n    print(t+s+b)\n    \nelse:\n    s=t+s+b\n    s=s[::-1]\n    print(s)", "S = input()\nQ = int(input())\nT = \"\"\n\nfor q in range(Q):\n  que = input().split()\n  if que[0]==\"1\":\n        S,T = T,S\n  else:\n    if que[1]==\"1\":\n      T+=que[2]\n    else:\n      S+=que[2]\n\nprint(T[::-1]+S)", "S = input()\nQ = int(input())\nupside_down = False\nfront = \"\"\n\nfor i in range(Q):\n    l = list(map(str,input().split()))\n    \n    if l[0] == \"1\":\n        if upside_down == False:\n            upside_down = True\n        else:\n            upside_down = False\n    else:\n        F,C = l[1],l[2]\n        \n        if upside_down:\n            if F == \"1\":\n                S = S + C\n            else:\n                front += C\n        else:\n            if F == \"1\":\n                front += C\n            else:\n                S = S + C\n\nfront = front[::-1]\nS = front + S\n\nif upside_down:\n    S = S[::-1]\n\nprint(S)", "import sys\nimport math\nimport itertools\nimport collections\nfrom collections import deque\nfrom collections import defaultdict\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\nMOD2 = 998244353\nINF = float('inf')\ninput = lambda: sys.stdin.readline().strip()\n\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\ndef main():\n    S = SI()\n    Q = NI()\n    \n    que = deque(list(S))\n    \n    reverse = False\n    \n    for q in range(Q):\n        query = input()\n\n        if query == \"1\":\n            if reverse == False:\n                reverse = True\n            else:\n                reverse = False\n        else:\n            x,y,z = map(str,query.split())\n            if reverse == False:\n                if y == \"1\":\n                    que.appendleft(z)\n                else:\n                    que.append(z)\n            else:\n                if y == \"1\":\n                    que.append(z)\n                else:\n                    que.appendleft(z)\n\n    if reverse==True:\n        print(\"\".join(reversed(list(que))))\n    else:\n        print(\"\".join(list(que)))#print(x,y,z)\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nimport collections\nfrom itertools import product\n\nii = lambda : int(input())\nmi = lambda : map(int,input().split())\nli = lambda : list(map(int,input().split()))\n\ns = input()\nq = ii()\nquery = [input().split() for _ in range(q)]\n\nfront = []\nback = []\n\ncnt1 = 0\nfor i in range(q):\n    if query[i][0] == '1':\n        cnt1 += 1\n    else:\n        if cnt1 % 2 == 0:\n            if query[i][1] == '1':\n                front.append(query[i][2])\n            else:\n                back.append(query[i][2])\n        else:\n            if query[i][1] == '1':\n                back.append(query[i][2])\n            else:\n                front.append(query[i][2])\n\nif cnt1 % 2 == 0:\n    print(''.join(front[::-1]) + s + ''.join(back))\nelse:\n    print(''.join(back[::-1]) + s[::-1] + ''.join(front))", "from collections import deque\ns = deque(input())\nq = int(input())\nrev = False\n\nfor i in range(q):\n  query = input().split()\n  \n  if query[0] == '1':\n    rev = not rev\n  else:\n    if query[1] == '1':\n      if rev: \n        s.append(query[2])\n      else:\n        s.appendleft(query[2])\n    elif query[1] == '2':\n      if rev:\n        s.appendleft(query[2])\n      else:\n        s.append(query[2])\ns = list(s)\nif rev:\n  s = s[::-1]\n\nprint(*s, sep='')", "from collections import deque\nS=deque()\nf=input\nS.extend(list(f()))\nF=1\n \nfor _ in range(int(f())):\n q=input()\n if q[0]=='1':F=1-F\n else:\n   if int(q[2])+F==2:S.appendleft(q[4])\n   else:S.append(q[4])\nprint(''.join([list(S)[::-1],S][F]))", "S,Q=input(),int(input())\nl,r='',''\nreverse=0\nfor i in range(Q):\n    T=input().split()\n    if T[0]=='1':reverse=0 if reverse else 1\n    else:\n        if T[1]=='1':\n            if reverse:r=r+T[2]\n            else:l=T[2]+l\n        else:\n            if reverse:l=T[2]+l\n            else:r=r+T[2]\nif reverse:\n    s=list(l+S+r);s.reverse()\n    print(''.join(s))\nelse:\n    print(l+S+r)", "S = input()\nQ = int(input())\n\nreverse = False\nleft = ''\nright = ''\n\nfor _ in range(Q):\n    q = input().split()\n    if q[0] == '1':\n        reverse = not reverse\n    else:\n        F = q[1]\n        C = q[2]\n        if reverse == False:\n            if F =='1':\n                left = C + left\n            else:\n                right += C\n        \n        else:\n            if F == '1':\n                right += C\n            else:\n                left = C + left\n\nS = left + S + right\nif reverse == False:\n    print(S)\n    return\nelse:\n    print((S[::-1]))\n    return\n", "s = input()\nq = int(input())\nhead = ''\ntail = ''\nrev = 0\n\nfor _ in range(q):\n    T = list(input().split())\n    if T[0] == '1':\n        head, tail = tail, head\n        rev += 1\n    else:\n        if T[1] == '1':\n            head += T[2]\n        else:\n            tail += T[2]\n\nif rev%2 == 0:\n    print((head[::-1]+s+tail))\nelse:\n    print((head[::-1]+s[::-1]+tail))\n", "from collections import deque\ns = list(input())\nq = int(input())\n\nd = deque()\nfor i in s:\n    d.append(i)\n\nc = 1\nfor _ in range(q):\n    t = list(input().split())\n    if t[0] == '1':\n        c *= -1\n    else:\n        if t[1] == '1':\n            if c == 1:\n                d.appendleft(t[2])\n            else:\n                d.append(t[2])\n        else:\n            if c == 1:\n                d.append(t[2])\n            else:\n                d.appendleft(t[2])\n\nprint(''.join(list(d)[::c]))", "import sys\nS = input()\nA = ''\ninput()\nkey = 1\n\nfor i in sys.stdin:\n    if i[0] == '0':\n        break\n\n    if i[0] == '1':\n        key = -key\n    \n    elif key == 1:\n        if i[2] == '1':\n            A = A + i[4]\n        else:\n            S = S + i[4]\n\n    else:\n        if i[2] == '2':\n            A = A + i[4]\n        else:\n            S = S + i[4]\n\nans = A[::-1] + S\nprint((ans[::key]))\n", "from collections import deque\nd=deque(input())\nq=int(input())\nans=1\nfor i in range(q):\n    a=input()\n    if int(a[0])==1:\n        ans=ans*(-1)\n    else:\n        if ans==1:\n            if int(a[2])==1:\n                d.appendleft(a[4])\n            else:\n                d.append(a[4])\n        else:\n            if int(a[2])==1:\n                d.append(a[4])\n            else:\n                d.appendleft(a[4])\nif ans==1:\n    for i in range(len(d)):\n        print(d[i],end=\"\")\nelse:\n    d.reverse()\n    for i in range(len(d)):\n        print(d[i],end=\"\")\n        ", "from collections import deque\ns = deque(input())\nrev = 0\nq = int(input())\nfor i in range(q):\n    query = list(map(str, input().split()))\n    if query[0]==\"1\":\n        rev += 1\n        rev %= 2\n    else:\n        f, c = query[1:]\n        if f==\"1\":\n            if rev:\n                s.append(c)\n            else:\n                s.appendleft(c)\n        else:\n            if rev:\n                s.appendleft(c)\n            else:\n                s.append(c)\ns = \"\".join(s)\nif rev:\n    print(s[::-1])\nelse:\n    print(s)", "S = input()\nQ = int(input())\nQuery = list(input().split() for _ in range(Q))\n\ncount = 0\nL, R = \"\", \"\"\n\nfor i in range(Q):\n  if Query[i][0] == \"1\": count += 1\n  else:\n    if Query[i][1] == \"1\":\n      if count % 2 == 0: L = Query[i][2] + L\n      else: R += Query[i][2]\n    else:\n      if count % 2 == 0: R += Query[i][2]\n      else: L = Query[i][2] + L\n\nif count % 2 == 0: print(L + S + R)\nelse: print(R[::-1] + S[::-1] + L[::-1])", "from collections import deque\n\nS = deque(input())\nQ = int(input())\n\nmode = 0\nfor _ in range(Q):\n    T, *FC = input()\n    if T == \"1\":\n        mode ^= 1\n        continue\n    _, F, _, C = FC\n    if int(F)+mode == 2: S.append(C)\n    else: S.appendleft(C)\nprint(\"\".join(reversed(S)if mode else S))", "import sys\n#import time\nfrom collections import deque, Counter, defaultdict\n#from fractions import gcd\nimport bisect\nimport heapq\nimport math\nimport itertools\n#import numpy as np\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\ninf = 10**18\nMOD = 1000000007\nri = lambda : int(input())\nrs = lambda : input().strip()\nrl = lambda : list(map(int, input().split()))\nmod = 998244353\n\ns = rs()\nq = ri()\ncnt=0\nhead, tail = [], []\nfor i in range(q):\n    qry = list(input().split())\n    if len(qry)==3:\n        if int(qry[1])%2 ^ (cnt%2) :\n            head.append(qry[2])\n        else:\n            tail.append(qry[2])\n    else:\n        cnt+=1\nans = \"\".join(head[::-1]) +s+ \"\".join(tail) \nprint((ans if cnt%2 == 0 else ans[::-1]))\n    \n", "from collections import deque\ns=deque(list(input()))\nn=int(input())\ncount=0\n\n\nfor i in range(n) :\n    x=input()\n    if x[0]==\"1\" :\n        count+=1\n        count%=2\n\n    elif x[2]==\"1\" :\n        if count%2==0 :\n            s.appendleft(x[4])\n        else :\n            s.append(x[4])\n    else :\n        if count%2==0 :\n            s.append(x[4])\n        else :\n            s.appendleft(x[4])\n\n\nif count%2==1 :\n    s.reverse()\n\nprint(\"\".join(s))", "S = input()\nQ = int(input())\n\nlS = ''\nfor _ in range(Q):\n    query = input().split()\n    if query[0] == '1':\n        lS, S = S, lS\n    else:\n        if query[1] == '1':\n            lS += query[2]\n        else:\n            S += query[2]\n\nprint(lS[::-1] + S)", "from collections import deque\ns = str(input())\nq = int(input())\nstat = 0\nl = []\na = deque()\nb = deque()\nfor i in range(q):\n    l = list(map(str, input().split()))\n    t = int(l[0])\n    if t == 1:\n        stat += 1\n    else:\n        f = int(l[1])\n        c = l[2]\n        if stat % 2 == 0:\n            if f == 1:\n                a.appendleft(c)\n            else:\n                b.append(c)\n        else:\n            if f == 1:\n                b.append(c)\n            else:\n                a.appendleft(c)\n\n#print(a, b, stat % 2)\nans = ''.join(a)+s+''.join(b)\nif stat % 2 == 1:\n    ans = ans[::-1]\nprint(ans)\n", "# author:  Taichicchi\n# created: 21.09.2020 20:00:43\n\nimport sys\n\nS = input()\n\nQ = int(input())\n\nrev = 0\n\nfront = []\nend = []\n\nfor q in range(Q):\n    query = input().split()\n    if query[0] == \"1\":\n        rev = 1 - rev\n    else:\n        if ((rev == 0) & (query[1] == \"1\")) | ((rev == 1) & (query[1] == \"2\")):\n            front.append(query[2])\n        else:\n            end.append(query[2])\n\nfront = \"\".join(front)\nend = \"\".join(end)\n\n\nif rev:\n    print((end[::-1] + S[::-1] + front))\nelse:\n    print((front[::-1] + S + end))\n", "from collections import deque\ndef main():\n    s = list(input())\n    q = int(input())\n    query = []\n    que = deque(s)\n    f = False\n    for i in range(q):\n        query.append(input().split(\" \"))\n    for i in range(q):\n        if query[i][0] == '1':\n            f = not f\n        else:\n            if f:\n                if query[i][1] == '2':\n                    que.appendleft(query[i][2])\n                else:\n                    que.append(query[i][2])\n            else:\n                if query[i][1] == '1':\n                    que.appendleft(query[i][2])\n                else:\n                    que.append(query[i][2])\n    if f:\n        que.reverse()\n    print(\"\".join(que))\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nfrom collections import deque\n\n\ndef LS():\n    return list(input().split())\n\n\nS = deque(input())\nQ = int(input())\nrev = 0\nfor i in range(Q):\n    A = LS()\n    if A[0] == \"1\":\n        rev += 1\n        rev %= 2\n    else:\n        if A[1] == \"1\":\n            if rev == 0:\n                S.appendleft(A[2])\n            else:\n                S.append(A[2])\n        else:\n            if rev == 0:\n                S.append(A[2])\n            else:\n                S.appendleft(A[2])\nif rev == 0:\n    print((''.join(S)))\nelse:\n    S.reverse()\n    print((''.join(S)))\n", "from collections import deque\n\ns = list(input())\nq = int(input())\nt = [list(map(str,input().split())) for _ in range(q)]\n\nd = deque(s)\n\ncnt = 0\nfor i in range(q):\n  if len(t[i]) == 1:\n    cnt += 1\n  else:\n    if (int(t[i][1])+cnt) % 2 != 0:\n      d.appendleft(t[i][2])\n    else:\n      d.append(t[i][2])\n      \nif cnt%2 != 0:\n  d = list(d)[::-1]\nprint(''.join(d))", "S = input()\nQ = int(input())\nquery = [list(input().split()) for _ in range(Q)]\nforward = 1\nf = ''\nb = ''\nfor i in range(Q):\n    if query[i][0] == '1':\n        forward *= -1\n    else:\n        if query[i][1] == '1':\n            if forward == 1:\n                f += query[i][2]\n            else:\n                b += query[i][2] \n        else:\n            if forward == 1:\n                b += query[i][2] \n            else:\n                f += query[i][2]\nS = ''.join(list(reversed(f))) + S + b\n\nif forward == -1:\n    ans = ''.join(list(reversed(S)))\nelse:\n    ans = S\nprint(ans)\n", "from collections import deque\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\nq = deque(input())\nQ = int(input())\nflipped = False\nfor _ in range(Q):\n    q_t, *q_b = input().split()\n    if q_t == \"1\":\n        flipped = not flipped\n    else:\n        F, C = q_b\n        if (F == \"2\" and not flipped) or (F == \"1\" and flipped):\n            q.append(C)\n        else:\n            q.appendleft(C)\nq = list(q)\nif flipped:\n    print((\"\".join(q[::-1])))\nelse:\n    print((\"\".join(q)))\n\n"]