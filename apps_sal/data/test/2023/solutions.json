["import sys\n'''\nSEGMENT TREE\nAssign\n'''\nclass SegmTree():\n    '''\n    - modify elements on interval\n    - get single element\n    '''\n    def __init__(self, size):\n        N = 1\n        while N < size:\n            N <<= 1\n        self.N = N\n        self.tree = [0] * (2*N)\n\n    def modify_range(self, l, r, value):\n        l += self.N\n        r += self.N\n        while l < r:\n            if l & 1:\n                self.tree[l] = value\n                l += 1\n            if r & 1:\n                r -= 1\n                self.tree[r] = value\n            l >>= 1\n            r >>= 1\n    \n    def query(self, i):\n        i += self.N\n        latest_change = self.tree[i]\n        p = i\n        while p > 1:\n            p >>= 1\n            latest_change = max(latest_change, self.tree[p])\n        return latest_change\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\nreader = (list(map(int, line.split())) for line in sys.stdin)\ninput = reader.__next__\n\nn, m = input()\na = list(input())\nb = list(input())\nst = SegmTree(n)\nrequest = [None] * (m + 1)\nfor i in range(1, m+1):\n    t, *arg = input()\n    if t == 1:\n        x, y, k = request[i] = arg\n        st.modify_range(y-1, y-1+k, i)\n    else:\n        pos = arg[0] - 1\n        req_id = st.query(pos)\n        if req_id > 0:\n            x, y, k = request[req_id]\n            ans = a[x+(pos-y)]\n        else:\n            ans = b[pos]\n        sys.stdout.write(f'{ans}\\n')\n\n# inf.close()\n"]