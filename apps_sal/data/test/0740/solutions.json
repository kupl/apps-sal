["k, na, nb, nc, ta, tb, tc = list(map(int, input().split()))\nfrom collections import deque\n\na = deque()\nb = deque()\nc = deque()\n\nfor i in range(na):\n        a.append(0)\nfor i in range(nb):\n        b.append(0)\nfor i in range(nc):\n        c.append(0)\n\nt = 0\nfor i in range(k):\n        vr = max(a[0], b[0] - ta, c[0] - (ta + tb))\n        a.popleft()\n        a.append(vr + ta)\n        b.popleft()\n        b.append(vr + tb + ta)\n        c.popleft()\n        c.append(vr + ta + tb + tc)\n        t = vr + ta + tb + tc\nprint(t)\n", "k, n1, n2, n3, t1, t2, t3 = map(int, input().split())\nx1 = x2 = x3 = 0\nT1, T2, T3 = [0] * n1, [0] * n2, [0] * n3\nfor i in range(k):\n    T1[x1] += t1\n    T2[x2] = max(T1[x1], T2[x2]) + t2\n    T3[x3] = max(T2[x2], T3[x3]) + t3\n    x1 += 1\n    x2 += 1\n    x3 += 1\n    if x1 == n1: x1 = 0\n    if x2 == n2: x2 = 0\n    if x3 == n3: x3 = 0\nprint(T3[x3 - 1])", "class step(object):\n    timer = []\n    def __init__(self, name, machin_num, step_time):\n        self.machin_num = machin_num\n        self.step_time = step_time\n        self.name = name\n\n    def step_input(self, cloth_num, t):\n        '''\n        if cloth_num + len(self.timer) > self.machin_num:\n            excloth = cloth_num + len(self.timer) - self.machin_num\n            print('%s error excloth is %d' %(self.name , excloth))\n            return 'error'\n        else:\n            for new_cloth in range(cloth_num):\n                self.timer.append(t)\n            #print(self.timer)\n        '''\n        for new_cloth in range(cloth_num):\n                self.timer.append(t)\n\n    def step_run(self, t):\n        tmptimer = [each_timer for each_timer in self.timer if t - each_timer < self.step_time]\n        #next_num = len(self.timer) - len(tmptimer)\n        self.timer = tmptimer\n        #if len(self.timer) == 0:\n            #print('%s in %d is empty' %(self.name, t))\n            #pass\n        #print('%d: %s timer:\\n%s \\n' %(t, self.name, self.timer))\n        #print('%d: %s timer: %d \\n' %(t, self.name, next_num))\n        #return next_num\n            \n    def checkstate(self, pre_t):\n        running_machine = len(self.timer)\n        #output = 0\n        for each_timer in range(running_machine):\n            if pre_t - self.timer[each_timer] >= self.step_time:\n                running_machine -= 1\n                #output += 1\n        return self.machin_num - running_machine\n        \n\ndef main():\n    p, n1, n2, n3, t1, t2, t3 = list(map(int, input().split()))\n    '''\n    p = 8\n    n1 = 4\n    n2 = 3\n    n3 = 2\n    t1 = 10\n    t2 = 5\n    t3 = 2\n    '''\n    step1 = step('step1', n1, t1)\n    step2 = step('step2', n2, t2)\n    step3 = step('step3', n3, t3)\n\n    t = 0\n    #cp = 0\n    while True:\n        pre_num1 = step1.checkstate(t)\n        pre_num2 = step2.checkstate(t + t1)\n        pre_num3 = step3.checkstate(t + t1 + t2)        \n        step1_input = min(pre_num1, pre_num2, pre_num3)\n        p -= step1_input\n        step1.step_run(t)\n        step1.step_input(step1_input, t)\n        step2.step_run(t + t1)\n        step2.step_input(step1_input, t + t1)\n        step3.step_run(t + t1 + t2)\n        step3.step_input(step1_input, t + t1 + t2)\n        if p <= 0:\n            print(t + t1 + t2 + t3)\n            break\n        pre_t = []\n        if len(step1.timer) == step1.machin_num:\n            #print('step1 stun')\n            pre_t.append(t1 - (t - step1.timer[0]))\n        if len(step2.timer) == step2.machin_num:\n            #print('step2 stun')\n            pre_t.append(t2 - (t + t1 - step2.timer[0]))\n        if len(step3.timer) == step3.machin_num:\n            #print('step3 stun')\n            pre_t.append(t3 - (t + t1 + t2 - step3.timer[0]))\n        #print('pre_t: %s' %(pre_t))\n        if len(pre_t) == 0:\n            pre_t = 1\n        else:\n            pre_t = min(pre_t)\n        '''\n        print('%d  minute input: %d' %(t, step1_input))\n        print('step1 timer:\\n%s\\npre_num1: %d'%(step1.timer, pre_num1))\n        print('step2 timer:\\n%s\\npre_num2: %d'%(step2.timer, pre_num2))\n        print('step3 timer:\\n%s\\npre_num3: %d'%(step3.timer, pre_num3))\n        print('pre_t:  %d' %pre_t)\n        \n        input()\n        '''\n        t += pre_t\n\ndef __starting_point():  \n    main()\n\n__starting_point()"]