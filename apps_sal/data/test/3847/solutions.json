["import bisect\nn,m=list(map(int,input().split()))\nL1=list(map(int,input().split()))\nL2=list(map(int,input().split()))\nx=int(input())\nnewL1=[0]\nnewL2=[0]\nfor i in L1:newL1.append(newL1[-1]+i)\nfor i in L2:newL2.append(newL2[-1]+i)\nmin1=[]\nmin2=[]\nmx=9999999999999999999\nfor i in range(1,n+1):\n    m1=mx\n    for j in range(n-i+1):\n        if newL1[j+i]-newL1[j]<m1:m1=newL1[j+i]-newL1[j]\n    min1.append(m1)\nfor i in range(1,m+1):\n    m2=mx\n    for j in range(m-i+1):\n        if newL2[j+i]-newL2[j]<m2:m2=newL2[j+i]-newL2[j]\n    min2.append(m2)\narea=0\nfor i in range(n):\n    k=x//min1[i]\n    for j in range(m):\n        if min2[j]>k:break\n    if min2[-1]<=k:j+=1\n    if area<j*(i+1):area=j*(i+1)\nprint(area)\n", "import sys\n\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nA=list(map(int,input().split()))\nB=list(map(int,input().split()))\nx=int(input())\n\nASUM=[0]\nBSUM=[0]\n\nfor i in range(n):\n    ASUM.append(A[i]+ASUM[-1])\nfor i in range(m):\n    BSUM.append(B[i]+BSUM[-1])\n\n\nALIST = dict()\nBLIST = dict()\n\nfor i in range(n+1):\n    for j in range(i+1,n+1):\n        if ALIST.get(j-i,10**15)>ASUM[j]-ASUM[i]:\n            ALIST[j-i]=ASUM[j]-ASUM[i]\n\nfor i in range(m+1):\n    for j in range(i+1,m+1):\n        if BLIST.get(j-i,10**15)>BSUM[j]-BSUM[i]:\n            BLIST[j-i]=BSUM[j]-BSUM[i]\n\nANS=0\nfor i in ALIST:\n    for j in BLIST:\n        if ALIST[i]*BLIST[j]<=x and i*j>ANS:\n            ANS=i*j\n\nprint(ANS)\n        \n\n\n", "#!/usr/bin/env python3\nimport sys\nfrom math import inf\n\ndef rint():\n    return list(map(int, sys.stdin.readline().split()))\n#lines = stdin.readlines()\n\nn, m = rint()\n\na = list(rint())\nb = list(rint())\nx = int(input())\n\nasum = [0]\nfor i in range(n):\n    asum.append(asum[-1] + a[i])\n\nbsum = [0]\nfor i in range(m):\n    bsum.append(bsum[-1] + b[i])\n\namin = [inf]*(n+1)\nfor i in range(n+1):\n    for j in range(i+1, n+1):\n        partsum = asum[j] - asum[i]\n        if amin[j-i] > partsum:\n            amin[j-i] = partsum\n\nbmin = [inf]*(m+1)\nfor i in range(m+1):\n    for j in range(i+1, m+1):\n        partsum = bsum[j] - bsum[i]\n        if bmin[j-i] > partsum:\n            bmin[j-i] = partsum\n\nmax_area = 0\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if amin[i] * bmin[j] <= x and i * j > max_area:\n            max_area = i * j\n\nprint(max_area)\n", "import bisect\nn,m=list(map(int,input().split()))\nL1=list(map(int,input().split()))\nL2=list(map(int,input().split()))\nx=int(input())\nnewL1=[0]\nnewL2=[0]\nfor i in L1:\n    newL1.append(newL1[-1]+i)\nfor i in L2:\n    newL2.append(newL2[-1]+i)\nmin1=[]\nmin2=[]\nmx=99999999999999\n\nfor i in range(1,n+1):\n    m1=mx\n    for j in range(n-i+1):\n        if newL1[j+i]-newL1[j]<m1:\n            m1=newL1[j+i]-newL1[j]\n    min1.append(m1)\n\nfor i in range(1,m+1):\n    m2=mx\n    for j in range(m-i+1):\n        if newL2[j+i]-newL2[j]<m2:\n            m2=newL2[j+i]-newL2[j]\n    min2.append(m2)\not=0\n\nfor i in range(n):\n    k=x//min1[i]\n    for j in range(m):\n        if min2[j]>k:\n            break\n    if min2[-1]<=k:\n        j+=1\n    if ot<j*(i+1):\n        ot=j*(i+1)\nprint(ot)\n        \n\n", "\n\n\nn,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\nb=list(map(int,input().split()))\nx=int(input())\n\nmina=[]\n\nbase=0\nprev=0\nfor i in range(1,n+1):\n    \n    base=a[i-1]+prev\n    min1=base\n    prev=base\n    #print(base,i)\n    for j in range(i,n):\n        base-=a[j-i]\n        base+=a[j]\n        min1=min(min1,base)\n    mina.append(min1)\n\n\nminb=[]\nbase=0\nprev=0\nfor i in range(1,m+1):\n    base=prev+b[i-1]\n    min1=base\n    prev=base\n    for j in range(i,m):\n        base-=b[j-i]\n        base+=b[j]\n        min1=min(min1,base)\n        \n    minb.append(min1)\n\narea=0\n#print(mina,minb)\nfor i in range(n):\n    for j in range(m):\n        if(mina[i]*minb[j]<=x):\n            area=max(area,(i+1)*(j+1))\nprint(area)\n\n", "def get_input_list():\n\treturn list(map(int, input().split()))\n\nn, m = get_input_list()\na = get_input_list()\nb = get_input_list()\nx = int(input())\nsa = [0]\n\nfor i in range(1,n+1):\n\ts = sum(a[:i])\n\tmi = s\n\tj = i\n\twhile (j<n):\n\t\ts = s - a[j-i] + a[j]\n\t\tif mi>s : mi = s\n\t\tj += 1\n\tsa.append(mi)\n\nsb = [0]\nfor i in range(1,m+1):\n\ts = sum(b[:i])\n\tmi = s\n\tj = i\n\twhile (j<m):\n\t\ts = s - b[j-i] + b[j]\n\t\tif mi>s : mi = s\n\t\tj += 1\n\tsb.append(mi)\n\nr = 0\nfor i in range(n+1):\n\tfor j in range(m+1):\n\t\tif sa[i] * sb[j] <= x:\n\t\t\tif i*j > r:\n\t\t\t\tr = i*j\n\nprint(r)\n\n", "\n# help from rols\n\nn, m = [int(i) for i in input().split(' ')]\n\na = [int(x) for x in input().split(' ')]\nb = [int(x) for x in input().split(' ')]\n\nx = int(input())\n\nmax_a = {}\n\nfor i in range(n):\n\tcur_sum = 0\n\tfor j in range(i, n):\n\t\tcur_sum += a[j]\n\n\t\tif (j - i + 1) not in max_a or cur_sum < max_a[j - i + 1]:\n\t\t\tmax_a[j - i + 1] = cur_sum\n\n\nmax_b = {}\n\nfor i in range(m):\n\tcur_sum = 0\n\tfor j in range(i, m):\n\t\tcur_sum += b[j]\n\n\t\tif (j - i + 1) not in max_b or cur_sum < max_b[j - i + 1]:\n\t\t\tmax_b[j - i + 1] = cur_sum\n\n\n\nbest_area = 0\n\nfor i in max_a:\n\tfor j in max_b:\n\t\t\n\t\tcur_sum = max_a[i] * max_b[j]\n\t\tcur_area = i * j\n\n\t\tif cur_sum <= x:\n\t\t\tbest_area = max(best_area, cur_area)\n\nprint(best_area)\n\n", "from itertools import accumulate\nfrom sys import stdout\n\nR = lambda: map(int, input().split())\nn, m = R()\na, b = list(accumulate(R())), list(R())\nx = int(input())\nres = 0\nfor al in range(1, n + 1):\n    sa = min(ar - al for ar, al in zip(a[al - 1:], [0] + a[:]))\n    l, s = -1, 0\n    for r in range(m):\n        s += b[r] * sa\n        while s > x:\n            l += 1\n            s -= b[l] * sa\n        res = max(res, al * (r - l))\nprint(res)", "from bisect import bisect_left\n\nn, m = list(map(int, input().split()))\n\narr1 = list(map(int, input().split()))\narr2 = list(map(int, input().split()))\n\nthreshold = int(input())\n\narr1map = dict()\narr2map = dict()\n\nfor idx in range(len(arr1)):\n    sm = 0\n    for jdx in range(idx, len(arr1)):\n        sm += arr1[jdx]\n        if sm not in arr1map or arr1map[sm][1] - arr1map[sm][0] < jdx - idx:\n            arr1map[sm] = (idx, jdx)\n\nfor idx in range(len(arr2)):\n    sm = 0\n    for jdx in range(idx, len(arr2)):\n        sm += arr2[jdx]\n        if sm not in arr2map or arr2map[sm][1] - arr2map[sm][0] < jdx - idx:\n            arr2map[sm] = (idx, jdx)\n\narr1keys = list(sorted(arr1map))\narr2keys = list(sorted(arr2map))\n\nans = 0\n\nfor v in arr1keys:\n    lookup = threshold // v\n    idx = bisect_left(arr2keys, lookup)\n    if idx == len(arr2keys):\n        x1 = arr1map[v][1] - arr1map[v][0] + 1\n        x2 = arr2map[arr2keys[idx - 1]][1] - arr2map[arr2keys[idx - 1]][0] + 1\n        ans = max(ans, x1 * x2)\n    elif arr2keys[idx] <= lookup:\n        x1 = arr1map[v][1] - arr1map[v][0] + 1\n        x2 = arr2map[arr2keys[idx]][1] - arr2map[arr2keys[idx]][0] + 1\n        ans = max(ans, x1 * x2)\n    else:\n        idx -= 1\n        if idx >= 0:\n            x1 = arr1map[v][1] - arr1map[v][0] + 1\n            x2 = arr2map[arr2keys[idx]][1] - arr2map[arr2keys[idx]][0] + 1\n            ans = max(ans, x1 * x2)\n\nfor v in arr2keys:\n    lookup = threshold // v\n    idx = bisect_left(arr1keys, lookup)\n    if idx == len(arr1keys):\n        x1 = arr2map[v][1] - arr2map[v][0] + 1\n        x2 = arr1map[arr1keys[idx - 1]][1] - arr1map[arr1keys[idx - 1]][0] + 1\n        ans = max(ans, x1 * x2)\n    elif arr1keys[idx] <= lookup:\n        x1 = arr2map[v][1] - arr2map[v][0] + 1\n        x2 = arr1map[arr1keys[idx]][1] - arr1map[arr1keys[idx]][0] + 1\n        ans = max(ans, x1 * x2)\n    else:\n        idx -= 1\n        if idx >= 0:\n            x1 = arr2map[v][1] - arr2map[v][0] + 1\n            x2 = arr1map[arr1keys[idx]][1] - arr1map[arr1keys[idx]][0] + 1\n            ans = max(ans, x1 * x2)\n\nprint(ans)\n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 11/20/18\n\n\"\"\"\nimport bisect\n\nN, M = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nX = int(input())\n#\n\n# import time\n# t0 = time.time()\n#\n# N, M = 2000, 2000\n# A = [2000 for _ in range(N)]\n# B = [2000 for _ in range(M)]\n# X = 2*10**9\n\nleftA = [0] * (N+1)\nleftB = [0] * (M+1)\n\nfor i in range(1, N+1):\n    leftA[i] = leftA[i-1] + A[i-1]\nfor i in range(1, M+1):\n    leftB[i] = leftB[i-1] + B[i-1]\n\n\navs = [float('inf') for _ in range(N+1)]\nfor al in range(N):\n    for ar in range(al+1, N+1):\n        a = leftA[ar] - leftA[al]\n        if a > X:\n            break\n        l = ar - al\n        avs[l] = min(avs[l], a)\n\nbvs = [float('inf') for _ in range(M+1)]\nfor bl in range(M):\n    for br in range(bl+1, M+1):\n        b = leftB[br] - leftB[bl]\n        if b > X:\n            break\n        l = br-bl\n        bvs[l] = min(bvs[l], b)\n        \nans = 0\n\nbvs[0] = 0\nfor i, a in enumerate(avs):\n    b = X//a\n    j = bisect.bisect_right(bvs, b)\n    if j == 0:\n        break\n    ans = max(ans, i * (j-1))\n\nprint(ans)\n\n\n", "n,m=map(int,input().split())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nx=int(input())\ngooda=[10000000]*n\ngoodb=[10000000]*m\nfor i in range(n):\n    tots=0\n    lent=0\n    for j in range(i,n):\n        tots+=a[j]\n        lent+=1\n        gooda[lent-1]=min(gooda[lent-1],tots)\nfor i in range(m):\n    tots=0\n    lent=0\n    for j in range(i,m):\n        tots+=b[j]\n        lent+=1\n        goodb[lent-1]=min(goodb[lent-1],tots)\nbest=0\naind=0\nbind=m-1\nwhile aind<n and bind>=0:\n    if gooda[aind]*goodb[bind]<=x:\n        best=max(best,(aind+1)*(bind+1))\n        aind+=1\n    else:\n        bind-=1\nprint(best)", "from sys import stdin,stdout\n\nn,m=stdin.readline().strip().split(' ')\nn,m=int(n),int(m)\n\nrow=list(map(int,stdin.readline().strip().split(' ')))\ncol=list(map(int,stdin.readline().strip().split(' ')))\nx=int(stdin.readline().strip())\n\nlowest_row_array=[0]\nfor i in range(1,n+1):\n    s=sum(row[:i])\n    j=i\n    min_till_now=s\n    while j<n:\n        s=s-row[j-i]+row[j]\n        if s<min_till_now:\n            min_till_now=s\n        j+=1\n    lowest_row_array.append(min_till_now)\n\nlowest_col_array=[0]\nfor i in range(1,m+1):\n    s=sum(col[:i]);\n    j=i\n    min_till_now=s\n    while j<m:\n        s=s-col[j-i]+col[j]\n        if s<min_till_now:\n            min_till_now=s\n        j+=1\n    lowest_col_array.append(min_till_now)\nmax_size=0;\nif len(lowest_col_array)==1:\n    lowest_col_array[0]=1\nif len(lowest_row_array)==1:\n    lowest_row_array[0]=1\n\nfor i in range(len(lowest_row_array)):\n    for j in range(len(lowest_col_array)):\n        if lowest_row_array[i]*lowest_col_array[j]<=x:\n            if i*j>max_size:\n                max_size=i*j\n\n# print(lowest_col_array)\n# print(lowest_row_array)\nprint(max_size)\n", "n,m = list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nb = [0] + list(map(int, input().split()))\nA = [0] * (n+1)\nB = [0] * (m+1)\n\nx = int(input())\n\nfor i in range(1, n+1):\n    a[i] = a[i-1] + a[i]\n    A[i] = a[i]\n    for j in range(1, i):\n        A[i-j] = min(A[i-j], a[i]-a[j])\n\nfor i in range(1, m+1):\n    b[i] = b[i - 1] + b[i]\n    B[i] = b[i]\n    for j in range(1, i):\n        B[i-j] = min(B[i-j], b[i]-b[j])\n\nres = 0\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if A[i]*B[j] <= x:\n            res = max(res, i*j)\nprint(res)\n", "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\n \n#N = int(input())\n#s = input()\nN,M = [int(x) for x in stdin.readline().split()]\narrA = [int(x) for x in stdin.readline().split()]\narrB = [int(x) for x in stdin.readline().split()]\nK = int(input()) \n \nA = [0]*N\nB = [0]*M\n\nprefix_A = [0]*N\ns = 0\nfor i in range(N):\n    s += arrA[i]\n    prefix_A[i] = s\n    \nprefix_B = [0]*M\ns = 0\nfor i in range(M):\n    s += arrB[i]\n    prefix_B[i] = s\n    \nA[0] = min(arrA)\nB[0] = min(arrB)\n\nfor i in range(1,N):\n    m = prefix_A[i]\n    for j in range(i+1,N):\n        m = min(m,prefix_A[j]-prefix_A[j-i-1])\n        \n    A[i] = m\n    \nfor i in range(1,M):\n    m = prefix_B[i]\n    for j in range(i+1,M):\n        m = min(m,prefix_B[j]-prefix_B[j-i-1])\n        \n    B[i] = m\n    \nres = 0\nfor i in range(N):\n    for j in range(M):\n        d = A[i]*B[j]\n        if d<=K:\n            res = max(res,(i+1)*(j+1))\n            \nprint(res)\n", "[n, m] = list(map(int, input().split()));\na = [0] + list(map(int, input().split()));\nb = [0] + list(map(int, input().split()));\nx = int(input());\n\nfor i in range(1, n+1):\n    a[i] += a[i-1];\n    \nfor i in range(1, m+1):\n    b[i] += b[i-1];\n    \nINF = 4 * 10**9 + 1;\nA = [INF] * (n+1);\nB = [INF] * (m+1);\n\nfor i in range(1, n+1):\n    for j in range(1, i+1):\n        A[i - j + 1] = min(A[i - j + 1], a[i] - a[j - 1]);\nfor i in range(1, m+1):\n    for j in range(1, i+1):\n        B[i - j + 1] = min(B[i - j + 1], b[i] - b[j - 1]);\n\nansw = 0;\nfor i in range(1, n+1):\n    for j in range(1, m+1):\n        if (A[i] * B[j] <= x):\n            answ = max(answ, i*j);\nprint(answ);\n", "from itertools import accumulate\nn,m=map(int,input().split())\nc=list(map(int,input().split()))\nb=list(map(int,input().split()))\na=list(accumulate(c))\nx=int(input())\nres=0\nfor i in range(1,n+1):\n    sa=min(ar-al for ar,al in zip(a[i-1:],[0]+a[:]))\n    l,s=-1,0\n    for r in range(m):\n        s+=sa*b[r]\n        while s>x:\n            l+=1\n            s-=sa*b[l]\n        res=max(res,i*(r-l))\nprint(res)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nx = int(input())\nb_acc = [0]\n\nfor bi in b:\n    b_acc.append(b_acc[-1]+bi)\n\nmax_length = [0]*(4*10**6+100)\n\nfor i in range(m):\n    for j in range(i, m):\n        B = b_acc[j+1]-b_acc[i]\n        max_length[B] = max(max_length[B], j-i+1)\n    \nfor i in range(1, 4*10**6+100):\n    max_length[i] = max(max_length[i], max_length[i-1])\n\na_acc = [0]\n\nfor ai in a:\n    a_acc.append(a_acc[-1]+ai)\n    \nans = 0\nsb = sum(b)\n\nfor i in range(n):\n    for j in range(i, n):\n        A = a_acc[j+1]-a_acc[i]\n        B = x//A\n        \n        if B>=sb:\n            ans = max(ans, (j-i+1)*m)\n        else:\n            ans = max(ans, (j-i+1)*max_length[B])\n\nprint(ans)", "n,m=map(int,input().split())\na=[0]*(n+1)\nj=1\nb=[0]\nfor i in input().split():\n    a[j]+=int(i)+a[j-1]\n    j+=1\nb.extend(list(map(int,input().split())))\nb.append(0)\n\nx=int(input())\nans=0\n\nfor i in range(1,n+1):\n    k1=10**9\n    for j in range(0,n-i+1):\n        k1=min(k1,a[j+i]-a[j])\n        \n    l=r=1\n    k2=b[1]\n    while r<=m :\n        if k1*k2<=x:\n            ans=max(ans,(i)*(r-l+1))\n            r+=1\n            k2+=b[r]\n            \n            \n        else:\n            k2-=b[l]\n            l+=1\nprint(ans)", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nx = int(input())\n\nrows = [float('inf')] * (n + 1)\ncols = [float('inf')] * (m + 1)\nfor i in range(n):\n    summ = 0\n    for j in range(i, n):\n        summ += a[j]\n        l = j - i  + 1\n        rows[l] = min(rows[l], summ)\n\nfor i in range(m):\n    summ = 0\n    for j in range(i, m):\n        summ += b[j]\n        l = j - i + 1\n        cols[l] = min(cols[l], summ)\n\nans = 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        cur = rows[i] * cols[j]\n        if cur <= x:\n            ans = max(ans, i * j)\nprint(ans)\n", "from itertools import accumulate\n\nn,m=list(map(int,input().split(\" \")))\nc=list(map(int,input().split(\" \")))\nb=list(map(int,input().split(\" \")))\na=list(accumulate(c))\nx=int(input())\nres=0\nfor i in range(1,n+1):\n    sa=min(ar-al for ar,al in zip(a[i-1:],[0]+a[:]))\n    l,s=-1,0\n    for r in range(m):\n        s+=sa*b[r]\n        while s>x:\n            l+=1\n            s-=sa*b[l]\n        res=max(res,i*(r-l))\nprint(res)\n", "n,m=list(map(int,input().split()))\nl=list(map(int,input().split()))\nl1=list(map(int,input().split()))\nx=int(input())\nl=[0]+l\nl1=[0]+l1\nfor i in range(1,n+1):\n    l[i]+=l[i-1]\nfor j in range(1,m+1):\n    l1[j]+=l1[j-1]\n#print(l,l1)\nmaxsum=[999999999999999999]*(n)\nfor i in range(1,n+1):\n    for j in range(i,n+1):\n        sum=l[j]-l[j-i]\n        maxsum[i-1]=min(maxsum[i-1],sum)\nmaxsum1=[999999999999999999]*(m)\nfor i in range(1,m+1):\n    for j in range(i,m+1):\n        sum=l1[j]-l1[j-i]\n        maxsum1[i-1]=min(maxsum1[i-1],sum)\nans=0 \n#print(maxsum,maxsum1)\nfor i in range(n):\n    for j in range(m-1,-1,-1):\n        if maxsum[i]*maxsum1[j]<=x:\n            ans=max(ans,(i+1)*(j+1))\nprint(ans)\n        \n\n", "#yeh dil maange more\nn,m = map(int,input().split())\na = [0]+list(map(int,input().split()))\nb = [0]+list(map(int,input().split()))\nc = [0]*(n+1)\nd = [0]*(m+1)\nx = int(input())\n\nfor i in range(1,n+1):\n\ta[i]=a[i-1]+a[i]\n\tc[i]=a[i]\n\tfor j in range(1,i):\n\t\tc[i-j] = min(c[i-j],a[i]-a[j])\n#print(c)\nfor i in range(1,m+1):\n\tb[i]=b[i-1]+b[i]\n\td[i] = b[i]\n\tfor j in range(1,i):\n\t\td[i-j] = min(d[i-j],b[i]-b[j])\nans = 0\nfor i in range(1,n+1):\n\tfor j in range(1,m+1):\n\t\tif c[i]*d[j] <=x:\n\t\t\tans=max(ans,i*j)\nprint(ans)"]