["k = '''\t\nH\t\nHe\t\nLi\nBe\t\nB\nC\nN\nO\nF\nNe\t\nNa\nMg\t\nAl\nSi\nP\nS\nCl\nAr\t\nK\nCa\t\nSc\nTi\nV\nCr\nMn\nFe\nCo\nNi\nCu\nZn\nGa\nGe\nAs\nSe\nBr\nKr\n5\t\nRb\nSr\t\nY\nZr\nNb\nMo\nTc\nRu\nRh\nPd\nAg\nCd\nIn\nSn\nSb\nTe\nI\nXe\t\nCs\nBa\nLa\nCe\nPr\nNd\nPm\nSm\nEu\nGd\nTb\nDy\nHo\nEr\nTm\nYb\nLu\nHf\nTa\nW\nRe\nOs\nIr\nPt\nAu\nHg\nTl\nPb\nBi\nPo\nAt\nRn\t\nFr\nRa\nAc\nTh\nPa\nU\nNp\nPu\nAm\nCm\nBk\nCf\nEs\nFm\nMd\nNo\nLr\nRf\nDb\nSg\nBh\nHs\nMt\nDs\nRg\nCn\nNh\nFl\nMc\nLv\nTs\nOg\t\nUue\nUbn\nUbu\nUbb\nUbt\nUbq\nUbp\nUbh\nUbs\n'''.upper().split()\n\ns = '0' + input()\ndp = [0] * (len(s))\ndp[0] = 1\nfor i in range(1, len(s)):\n    for j in range(1, 3):\n        if s[i - j + 1: i + 1] in k: dp[i] |= dp[i - j]\nprint(\"YES\" if dp[-1] else \"NO\")", "elements = \"H He Li Be B C N O F Ne Na Mg Al Si P S Cl Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I Xe Cs Ba La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu Hf Ta W Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No Lr Rf Db Sg Bh Hs Mt Ds Rg Cn Nh Fl Mc Lv Ts Og\".split()\n\ndef decompose(word):\n    \"\"\"Express given word as chemical compound. If there are multiple solutions, return one of minimal weight.\"\"\"\n    progress = [False for x in range(len(word)+1)] # solution for word[:i]\n    progress[0] = []\n\n    for i in range(1, len(word)+1):\n        possibles = list()\n        for j in range(max(i-3,0), i):\n            if progress[j] == False:\n                continue\n            alchemical = word[j:i].title()\n            if alchemical in elements:\n                possibles.append(progress[j] + [alchemical])\n\n        if possibles:\n            # choose minimal solution\n            progress[i] = min(possibles, key=len)\n\n    if progress[-1] == False:\n        return False\n    return \"\".join(progress[-1])\n\nprint(\"YES\" if decompose(input()) else \"NO\")\n", "l = \"\"\"H\nHe\nLi\nBe\nB\nC\nN\nO\nF\nNe\nNa\nMg\nAl\nSi\nP\nS\nCl\nAr\nK\nCa\nSc\nTi\nV\nCr\nMn\nFe\nCo\nNi\nCu\nZn\nGa\nGe\nAs\nSe\nBr\nKr\nRb\nSr\nY\nZr\nNb\nMo\nTc\nRu\nRh\nPd\nAg\nCd\nIn\nSn\nSb\nTe\nI\nXe\nCs\nBa\nLa\nCe\nPr\nNd\nPm\nSm\nEu\nGd\nTb\nDy\nHo\nEr\nTm\nYb\nLu\nHf\nTa\nW\nRe\nOs\nIr\nPt\nAu\nHg\nTl\nPb\nBi\nPo\nAt\nRn\nFr\nRa\nAc\nTh\nPa\nU\nNp\nPu\nAm\nCm\nBk\nCf\nEs\nFm\nMd\nNo\nLr\nRf\nDb\nSg\nBh\nHs\nMt\nDs\nRg\nCn\nNh\nFl\nMc\nLv\nTs\nOg\"\"\".split()\nl = list([x.lower() for x in l])\ninp = input().strip().lower()\ndp = [True]\nfor i in range(len(inp)):\n    works = False\n    if dp[-1] and inp[i] in l:\n        works = True\n    if i and dp[-2] and inp[i-1:i+1] in l:\n        works = True\n    dp.append(works)\nif dp[-1]:\n    print('YES')\nelse:\n    print('NO')\n", "table = \"H He Li Be B C N O F Ne Na Mg Al Si P S Cl Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I Xe Cs Ba La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu Hf Ta W Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No Lr Rf Db Sg Bh Hs Mt Ds Rg Cn Nh Fl Mc Lv Ts Og Uue Ubn Ubu Ubb Ubt Ubq Ubp Ubh Ubs\"\nelements = [x.upper() for x in table.split()]\ndef elementary(word):\n    if word == \"\":\n        return True\n    if word[0:1] in elements and elementary(word[1:]):\n        return True\n    if word[0:2] in elements and elementary(word[2:]):\n        return True\n    if word[0:3] in elements and elementary(word[3:]):\n        return True\n    return False\nword = input()\nif elementary(word):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "elements = set(\"H He Li Be B C N O F Ne Na Mg Al Si P S Cl Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I Xe Cs Ba La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu Hf Ta W Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No Lr Rf Db Sg Bh Hs Mt Ds Rg Cn Nh Fl Mc Lv Ts Og\".upper().split())\n\ndef is_elem(s):\n    if not s: return True\n    return (s[:1] in elements and is_elem(s[1:])) or (s[:2] in elements and is_elem(s[2:]))\nprint(\"YNEOS\"[not is_elem(input())::2])\n", "ele = [\"H\",\"HE\",\"LI\",\"BE\",\"B\",\"C\",\"N\",\"O\",\"F\",\"NE\",\"NA\",\"MG\",\"AL\",\"SI\",\"P\",\"S\",\"CL\",\"AR\",\"K\",\"CA\",\"SC\",\"TI\",\"V\",\"CR\",\"MN\",\"FE\",\"CO\",\"NI\",\"CU\",\"ZN\",\"GA\",\"GE\",\"AS\",\"SE\",\"BR\",\"KR\",\"RB\",\"SR\",\"Y\",\"ZR\",\"NB\",\"MO\",\"TC\",\"RU\",\"RH\",\"PD\",\"AG\",\"CD\",\"IN\",\"SN\",\"SB\",\"TE\",\"I\",\"XE\",\"CS\",\"BA\",\"LA\",\"CE\",\"PR\",\"ND\",\"PM\",\"SM\",\"EU\",\"GD\",\"TB\",\"DY\",\"HO\",\"ER\",\"TM\",\"YB\",\"LU\",\"HF\",\"TA\",\"W\",\"RE\",\"OS\",\"IR\",\"PT\",\"AU\",\"HG\",\"TL\",\"PB\",\"BI\",\"PO\",\"AT\",\"RN\",\"FR\",\"RA\",\"AC\",\"TH\",\"PA\",\"U\",\"NP\",\"PU\",\"AM\",\"CM\",\"BK\",\"CF\",\"ES\",\"FM\",\"MD\",\"NO\",\"LR\",\"RF\",\"DB\",\"SG\",\"BH\",\"HS\",\"MT\",\"DS\",\"RG\",\"CN\",\"NH\",\"FL\",\"MC\",\"LV\",\"TS\",\"OG\"]\nele = set(ele)\ns = input()\nn = len(s)\nfor b in range(1<<(n-1)):\n\tes = []\n\ttmp = s[0]\n\tfor i in range(1, n):\n\t\tif (b>>(i-1)) & 1:\n\t\t\ttmp += s[i]\n\t\telse:\n\t\t\tes.append(tmp)\n\t\t\ttmp = s[i]\n\tif tmp != \"\":\n\t\tes.append(tmp)\n\tok = True\n\tfor e in es:\n\t\tif e not in ele:\n\t\t\tok = False\n\tif ok:\n\t\tprint(\"YES\")\n\t\tbreak\nelse:\n\tprint(\"NO\")", "elements = ['AC','AG','AL','AM','AR','AS','AT','AU','B','BA','BE','BH','BI',\n            'BK','BR','C','CA','CD','CE','CF','CL','CM','CN','CO','CR','CS',\n            'CU','DB','DS','DY','ER','ES','EU','F','FE','FL','FM','FR','GA',\n            'GD','GE','H','HE','HF','HG','HO','HS','I','IN','IR','K','KR',\n            'LA','LI','LR','LU','LV','MC','MD','MG','MN','MO','MT','N','NA',\n            'NB','ND','NE','NH','NI','NO','NP','O','OG','OS','P','PA','PB','PD',\n            'PM','PO','PR','PT','PU','RA','RB','RE','RF','RG','RH','RN','RU','S',\n            'SB','SC','SE','SG','SI','SM','SN','SR','TA','TB','TC','TE','TH','TI',\n            'TL','TM','TS','U','V','W','XE','Y','YB','ZN','ZR']\n\ndef check(word):\n    ans = False\n    for element in elements:\n        if word == element:\n            return True\n        l = len(element)\n        if len(word) > l and word[0:l] == element:\n            ans = ans or check(word[l:])\n    return ans\n\nw = input()\nif check(w):\n    print('YES')\nelse:\n    print('NO')", "elements = {\n    'H',\n    'HE',\n    'LI',\n    'BE',\n    'B',\n    'C',\n    'N',\n    'O',\n    'F',\n    'NE',\n    'NA',\n    'MG',\n    'AL',\n    'SI',\n    'P',\n    'S',\n    'CL',\n    'AR',\n    'K',\n    'CA',\n    'SC',\n    'TI',\n    'V',\n    'CR',\n    'MN',\n    'FE',\n    'CO',\n    'NI',\n    'CU',\n    'ZN',\n    'GA',\n    'GE',\n    'AS',\n    'SE',\n    'BR',\n    'KR',\n    'RB',\n    'SR',\n    'Y',\n    'ZR',\n    'NB',\n    'MO',\n    'TC',\n    'RU',\n    'RH',\n    'PD',\n    'AG',\n    'CD',\n    'IN',\n    'SN',\n    'SB',\n    'TE',\n    'I',\n    'XE',\n    'CS',\n    'BA',\n    'LA',\n    'CE',\n    'PR',\n    'ND',\n    'PM',\n    'SM',\n    'EU',\n    'GD',\n    'TB',\n    'DY',\n    'HO',\n    'ER',\n    'TM',\n    'YB',\n    'LU',\n    'HF',\n    'TA',\n    'W',\n    'RE',\n    'OS',\n    'IR',\n    'PT',\n    'AU',\n    'HG',\n    'TL',\n    'PB',\n    'BI',\n    'PO',\n    'AT',\n    'RN',\n    'FR',\n    'RA',\n    'AC',\n    'TH',\n    'PA',\n    'U',\n    'NP',\n    'PU',\n    'AM',\n    'CM',\n    'BK',\n    'CF',\n    'ES',\n    'FM',\n    'MD',\n    'NO',\n    'LR',\n    'RF',\n    'DB',\n    'SG',\n    'BH',\n    'HS',\n    'MT',\n    'DS',\n    'RG',\n    'CN',\n    'NH',\n    'FL',\n    'MC',\n    'LV',\n    'TS',\n    'OG',\n}\n\nres = False\n\ndef test(s):\n    if s == '':\n        nonlocal res\n        res = True\n    if s[:1] in elements:\n        test(s[1:])\n    if s[:2] in elements:\n        test(s[2:])\n\ns = input()\ntest(s)\nprint(['NO', 'YES'][res])\n\n", "#!/bin/python3\n\nimport sys\n\nelements = [\n    \"H\",  \"He\", \"Li\", \"Be\", \"B\",  \"C\",  \"N\",  \"O\",  \"F\",  \"Ne\",\n    \"Na\", \"Mg\", \"Al\", \"Si\", \"P\",  \"S\",  \"Cl\", \"Ar\", \"K\",  \"Ca\",\n    \"Sc\", \"Ti\", \"V\",  \"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Cu\", \"Zn\",\n    \"Ga\", \"Ge\", \"As\", \"Se\", \"Br\", \"Kr\", \"Rb\", \"Sr\", \"Y\",  \"Zr\",\n    \"Nb\", \"Mo\", \"Tc\", \"Ru\", \"Rh\", \"Pd\", \"Ag\", \"Cd\", \"In\", \"Sn\",\n    \"Sb\", \"Te\", \"I\",  \"Xe\", \"Cs\", \"Ba\", \"La\", \"Ce\", \"Pr\", \"Nd\",\n    \"Pm\", \"Sm\", \"Eu\", \"Gd\", \"Tb\", \"Dy\", \"Ho\", \"Er\", \"Tm\", \"Yb\",\n    \"Lu\", \"Hf\", \"Ta\", \"W\",  \"Re\", \"Os\", \"Ir\", \"Pt\", \"Au\", \"Hg\",\n    \"Tl\", \"Pb\", \"Bi\", \"Po\", \"At\", \"Rn\", \"Fr\", \"Ra\", \"Ac\", \"Th\",\n    \"Pa\", \"U\",  \"Np\", \"Pu\", \"Am\", \"Cm\", \"Bk\", \"Cf\", \"Es\", \"Fm\",\n    \"Md\", \"No\", \"Lr\", \"Rf\", \"Db\", \"Sg\", \"Bh\", \"Hs\", \"Mt\", \"Ds\",\n    \"Rg\", \"Cn\", \"Nh\", \"Fl\", \"Mc\", \"Lv\", \"Ts\", \"Og\"]\n\nlower = [x.lower() for x in elements]\n\nword = input().lower()\n\ns = \"\" # current\nt = None # current + 1\nsi = -1\nti = None\n\nif word[0] in lower:\n\tt = elements[lower.index(word[0])] + \" \"\n\tti = 0\n\nwhile True:\n#\tprint(s, si, t, ti)\n\tif si == None and ti == None:\n\t\tprint(\"NO\")\n\t\treturn\n\tif si != None and si == len(word) - 1:\n\t\tprint(\"YES\")\n\t\treturn\n\tif ti != None and ti == len(word) - 1:\n\t\tprint(\"YES\")\n\t\treturn\n\tnewT = None\n\tnewTi = None\n\tnewS = t\n\tnewSi = ti\n\t# get new T\n\tif ti != None:\n\t\t# try advance t by one\n\t\tif word[ti+1] in lower:\n\t\t\tnewTi = ti + 1\n\t\t\tnewT = t + elements[lower.index(word[ti+1])] + \" \"\n\tif newT == None: # still none\n\t\t# try advance s by 2\n\t\tif si != None:\n\t\t\tif word[si+1:si+3] in lower:\n\t\t\t\tnewTi = si + 2\n\t\t\t\tnewT = s + elements[lower.index(word[si+1:si+3])] + \" \"\n\t# get new s\n\tif newS == None and si != None:\n\t\tif word[si+1] in lower:\n\t\t\tnewSi = si + 1\n\t\t\tnewS = s + elements[lower.index(word[si+1])] + \" \"\n\ts = newS\n\tsi = newSi\n\tt = newT\n\tti = newTi\n", "strs = \"\"\"Ac\nAg\nAl\nAm\nAr\nAs\nAt\nAu\nB\nBa\nBe\nBh\nBi\nBk\nBr\nC\nCa\nCd\nCe\nCf\nCl\nCm\nCn\nCo\nCr\nCs\nCu\nDb\nDs\nDy\nEr\nEs\nEu\nF\nFe\nFl\nFm\nFr\nGa\nGd\nGe\nH\nHe\nHf\nHg\nHo\nHs\nI\nIn\nIr\nK\nKr\nLa\nLi\nLr\nLu\nLv\nMc\nMd\nMg\nMn\nMo\nMt\nN\nNa\nNb\nNd\nNe\nNh\nNi\nNo\nNp\nO\nOg\nOs\nP\nPa\nPb\nPd\nPm\nPo\nPr\nPt\nPu\nRa\nRb\nRe\nRf\nRg\nRh\nRn\nRu\nS\nSb\nSc\nSe\nSg\nSi\nSm\nSn\nSr\nTa\nTb\nTc\nTe\nTh\nTi\nTl\nTm\nTs\nU\nUbb\nUbh\nUbn\nUbp\nUbq\nUbt\nUbu\nUue\nV\nW\nXe\nY\nYb\nZn\nZr\"\"\"\nele = strs.upper().split(\"\\n\")\n# print(ele)\ninp = input()\nn = len(inp)\ndp = [False] * (n+1)\ndp[0] = True\nfor i in range(1, n+1):\n  if dp[i-1] == True and inp[i-1:i] in ele:\n    dp[i] = True\n  elif i > 1 and dp[i-2] == True and inp[i-2:i] in ele:\n    dp[i] = True\n  elif i > 2 and dp[i-3] == True and inp[i-3:i] in ele:\n    dp[i] = True\n\nif dp[n]:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "lip = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\nfor i in range(len(lip)):\n    lip[i] = lip[i].upper()\n\ns = input()\ndp = [False]*(len(s))\n\nfor i in range(len(dp)):\n    #print(i)\n    if (s[i] in lip):\n        #print('here1')\n        if (i - 1 >= 0):\n            if (dp[i - 1]):\n                dp[i] = True\n        else:\n            dp[i] = True\n    if i > 0:\n        #print('here2')\n        a = s[i - 1] + s[i]\n        #print(a)\n        if (a in lip):\n            if (i - 2 >= 0):\n                if (dp[i - 2]):\n                    dp[i] = True\n            else:\n                dp[i] = True\n#print(dp)\nif (dp[len(s) - 1]):\n    print('YES')\nelse:\n    print('NO')\n", "elemsn\ns = input()\n\n\ndp = [False for i in range(len(s)+1)]\ndp[0] = True\n\nfor i in range(len(s)):\n    if not dp[i]: continue\n    for el in elems:\n        if s[i:].startswith(el):\n            dp[i+len(el)] = True\n\nprint('YES' if dp[-1] else 'NO')\n", "elems = ['H','HE','LI','BE','B','C','N','O','F','NE','NA','MG','AL','SI','P','S','CL','AR','K','CA','SC','TI','V','CR','MN','FE','CO','NI','CU','ZN','GA','GE','AS','SE','BR','KR','RB','SR','Y','ZR','NB','MO','TC','RU','RH','PD','AG','CD','IN','SN','SB','TE','I','XE','CS','BA','LA','CE','PR','ND','PM','SM','EU','GD','TB','DY','HO','ER','TM','YB','LU','HF','TA','W','RE','OS','IR','PT','AU','HG','TL','PB','BI','PO','AT','RN','FR','RA','AC','TH','PA','U','NP','PU','AM','CM','BK','CF','ES','FM','MD','NO','LR','RF','DB','SG','BH','HS','MT','DS','RG','CN','NH','FL','MC','LV','TS','OG']\n\ns = str(input())\n\ncando = [False] * len(s)\n\ngood = False\nfor elem in elems:\n    if s.startswith(elem):\n        cando[len(elem)-1] = True\n\nfor i in range(1, len(s)):\n    for elem in elems:\n        ln = len(elem)\n        if ln > i + 1:\n            continue\n        \n        substr = s[i+1-ln:i+1]\n        if substr == elem:\n            cando[i] = cando[i] or cando[i-ln]\n    \nif cando[len(s)-1]:\n    print('YES')\nelse:\n    print('NO')\n\n\"\"\"\nwith open('elements.txt', 'r') as e:\n    ele = e.read()\n    \nele = ele.split('\\n')\n\nelements = []\n\nfor elem in ele:\n    if len(elem) > 0:\n        parts = elem.split('-')\n        element = parts[0].strip()\n        elements.append(element)\n        \nres = '['\nfor elem in elements:\n    res = res + \"'\" + elem.upper() + \"',\"\nres = res[:-1]\nres += ']'\n\nprint(res)\n\"\"\"", "elems = setn\ns = input()\nn = len(s)\ndp = [False for _ in range(n + 1)]\ndp[0] = True\nfor i in range(n):\n    if not dp[i]:\n        continue\n    if s[i] in elems:\n        dp[i + 1] = True\n    if i + 2 <= n and s[i:i+2] in elems:\n        dp[i + 2] = True\n\nprint('YES' if dp[n] else 'NO')\n", "elements = [\n'Ac',\n'Ag',\n'Al',\n'Am',\n'Ar',\n'As',\n'At',\n'Au',\n'B',\n'Ba',\n'Be',\n'Bh',\n'Bi',\n'Bk',\n'Br',\n'C',\n'Ca',\n'Cd',\n'Ce',\n'Cf',\n'Cl',\n'Cm',\n'Cn',\n'Co',\n'Cr',\n'Cs',\n'Cu',\n'Db',\n'Ds',\n'Dy',\n'Er',\n'Es',\n'Eu',\n'F',\n'Fe',\n'Fl',\n'Fm',\n'Fr',\n'Ga',\n'Gd',\n'Ge',\n'H',\n'He',\n'Hf',\n'Hg',\n'Ho',\n'Hs',\n'I',\n'In',\n'Ir',\n'K',\n'Kr',\n'La',\n'Li',\n'Lr',\n'Lu',\n'Lv',\n'Mc',\n'Md',\n'Mg',\n'Mn',\n'Mo',\n'Mt',\n'N',\n'Na',\n'Nb',\n'Nd',\n'Ne',\n'Nh',\n'Ni',\n'No',\n'Np',\n'O',\n'Og',\n'Os',\n'P',\n'Pa',\n'Pb',\n'Pd',\n'Pm',\n'Po',\n'Pr',\n'Pt',\n'Pu',\n'Ra',\n'Rb',\n'Re',\n'Rf',\n'Rg',\n'Rh',\n'Rn',\n'Ru',\n'S',\n'Sb',\n'Sc',\n'Se',\n'Sg',\n'Si',\n'Sm',\n'Sn',\n'Sr',\n'Ta',\n'Tb',\n'Tc',\n'Te',\n'Th',\n'Ti',\n'Tl',\n'Tm',\n'Ts',\n'U',\n'V',\n'W',\n'Xe',\n'Y',\n'Yb',\n'Zn',\n'Zr']\n\nelem = list(map(lambda x: x.upper(), elements))\n\ndef find(s):\n\tif s == \"\": \n\t\treturn True\n\n\tif s[0] in elem:\n\t\tif find(s[1:]):\n\t\t\treturn True\n\n\tif s[0:2] in elem:\n\t\tif find(s[2:]):\n\t\t\treturn True\n\treturn False\n\ns = input()\nif find(s):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "prvky=\"\"\"Ac\nAg\nAl\nAm\nAr\nAs\nAt\nAu\nB\nBa\nBe\nBh\nBi\nBk\nBr\nC\nCa\nCd\nCe\nCf\nCl\nCm\nCn\nCo\nCr\nCs\nCu\nDb\nDs\nDy\nEr\nEs\nEu\nF\nFe\nFl\nFm\nFr\nGa\nGd\nGe\nH\nHe\nHf\nHg\nHo\nHs\nI\nIn\nIr\nK\nKr\nLa\nLi\nLr\nLu\nLv\nMd\nMg\nMn\nMo\nMt\nN\nNa\nNb\nNd\nNe\nNi\nNo\nNp\nO\nOs\nP\nPa\nPb\nPd\nPm\nPo\nPr\nPt\nPu\nRa\nRb\nRe\nRf\nRg\nRh\nRn\nRu\nS\nSb\nSc\nSe\nSg\nSi\nSm\nSn\nSr\nTa\nTb\nTc\nTe\nTh\nTi\nTl\nTm\nU\nMc\nLv\nTs\nOg\nV\nW\nXe\nY\nYb\nZn\nZr\"\"\".split(\"\\n\")\nd={i:[] for i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"}\nfor i in prvky:\n    d[i[0]].append(i)\nmem={}\ndef f(string):\n    if string in mem:\n        return mem[string]\n    if not string:return \"\"\n    for i in d[string[0]]:\n        if string.startswith(i.upper()):\n            res=f(string[len(i):])\n            if res!=-1:\n                mem[string]=i+res\n                return i+res\n    return -1\n\ns=input()\nr=f(s)\nif r==-1:\n    print(\"NO\")\nelse:print(\"YES\")", "'''import sys\na = []\nfor i in sys.stdin:\n    if len(i) > 1:\n        a.append(i.split()[0])\nprint(' '.join(a))'''\n\nt = 'Ac Ag Al Am Ar As At Au B Ba Be Bh Bi Bk Br C Ca Cd Ce Cf Cl Cm Cn Co Cr Cs Cu Db Ds Dy Er Es Eu F Fe Fl Fm Fr Ga Gd Ge H He Hf Hg Ho Hs I In Ir K Kr La Li Lr Lu Lv Mc Md Mg Mn Mo Mt N Na Nb Nd Ne Nh Ni No Np O Og Os P Pa Pb Pd Pm Po Pr Pt Pu Ra Rb Re Rf Rg Rh Rn Ru S Sb Sc Se Sg Si Sm Sn Sr Ta Tb Tc Te Th Ti Tl Tm Ts U V W Xe Y Yb Zn Zr'\nr = input()\nm = set([i.upper() for i in t.split()])\nn = len(r)\ndp = [0] * (n + 2)\ndp[0] = 1\nfor i in range(n):\n    if not dp[i]:\n        continue\n    for j in range(1, 3):\n        if r[i:i+j] in m:\n            dp[i+j] = 1\nif dp[n]:\n    print('YES')\nelse:\n    print('NO')\n\n", "elements = ['Ac', 'Ag', 'Al', 'Am', 'Ar', 'As', 'At', 'Au', 'B', 'Ba', 'Be', 'Bh', 'Bi', 'Bk', 'Br', 'C', 'Ca', 'Cd', 'Ce', 'Cf', 'Cl', 'Cm', 'Cn', 'Co', 'Cr', 'Cs', 'Cu', 'Db', 'Ds', 'Dy', 'Er', 'Es', 'Eu', 'F', 'Fe', 'Fl', 'Fm', 'Fr', 'Ga', 'Gd', 'Ge', 'H', 'He', 'Hf', 'Hg', 'Ho', 'Hs', 'I', 'In', 'Ir', 'K', 'Kr', 'La', 'Li', 'Lr', 'Lu', 'Lv', 'Mc', 'Md', 'Mg', 'Mn', 'Mo', 'Mt', 'N', 'Na', 'Nb', 'Nd', 'Ne', 'Nh', 'Ni', 'No', 'Np', 'O', 'Og', 'Os', 'P', 'Pa', 'Pb', 'Pd', 'Pm', 'Po', 'Pr', 'Pt', 'Pu', 'Ra', 'Rb', 'Re', 'Rf', 'Rg', 'Rh', 'Rn', 'Ru', 'S', 'Sb', 'Sc', 'Se', 'Sg', 'Si', 'Sm', 'Sn', 'Sr', 'Ta', 'Tb', 'Tc', 'Te', 'Th', 'Ti', 'Tl', 'Tm', 'Ts', 'U', 'V', 'W', 'Xe', 'Y', 'Yb', 'Zn', 'Zr']\nelements = [*list(map(str.upper, elements))]\ntarget = input()\ndef helper(target):\n    dp = [0]\n    met = set([0])\n    while dp:\n        idx = dp.pop()\n        for e in elements:\n            if target.startswith(e, idx) and len(e) + idx not in met:\n                if len(e) + idx == len(target):\n                    print('YES')\n                    return\n                dp += idx + len(e),\n                met.add(idx + len(e))\n    print('NO')\n\nhelper(target)\n", "s='H,HE,LI,BE,B,C,N,O,F,NE,NA,MG,AL,SI,P,S,CL,AR,K,CA,SC,TI,V,CR,MN,FE,CO,NI,CU,ZN,GA,GE,AS,SE,BR,KR,RB,SR,Y,ZR,NB,MO,TC,RU,RH,PD,AG,CD,IN,SN,SB,TE,I,XE,CS,BA,LA,CE,PR,ND,PM,SM,EU,GD,TB,DY,HO,ER,TM,YB,LU,HF,TA,W,RE,OS,IR,PT,AU,HG,TL,PB,BI,PO,AT,RN,FR,RA,AC,TH,PA,U,NP,PU,AM,CM,BK,CF,ES,FM,MD,NO,LR,RF,DB,SG,BH,HS,MT,DS,RG,CN,NH,FL,MC,LV,TS,OG'.split(',')\nx=input()\na=1;b=0\nfor i in range(len(x)):\n\ta,b=x[i] in s and a or x[i-1:i+1] in s and b,a\nprint(['NO','YES'][a])", "el = ['', 'H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\nel = [x.upper() for x in el]\n\na = input()\ndp = [True] + [False for x in a]\nfor i in range(1,len(a)+1):\n    dp[i] = dp[i-1] and (a[i-1] in el)\n    dp[i] = dp[i] or (i>=2 and dp[i-2] and (a[i-2:i] in el))\n\nif dp[-1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "els = [\"H\",\"HE\",\"LI\",\"BE\",\"B\",\"C\",\"N\",\"O\",\"F\",\"NE\",\"NA\",\"MG\",\"AL\",\"SI\",\"P\",\"S\",\"CL\",\"AR\",\"K\",\"CA\",\"SC\",\"TI\",\"V\",\"CR\",\"MN\",\"FE\",\"CO\",\"NI\",\"CU\",\"ZN\",\"GA\",\"GE\",\"AS\",\"SE\",\"BR\",\"KR\",\"RB\",\"SR\",\"Y\",\"ZR\",\"NB\",\"MO\",\"TC\",\"RU\",\"RH\",\"PD\",\"AG\",\"CD\",\"IN\",\"SN\",\"SB\",\"TE\",\"I\",\"XE\",\"CS\",\"BA\",\"LA\",\"CE\",\"PR\",\"ND\",\"PM\",\"SM\",\"EU\",\"GD\",\"TB\",\"DY\",\"HO\",\"ER\",\"TM\",\"YB\",\"LU\",\"HF\",\"TA\",\"W\",\"RE\",\"OS\",\"IR\",\"PT\",\"AU\",\"HG\",\"TL\",\"PB\",\"BI\",\"PO\",\"AT\",\"RN\",\"FR\",\"RA\",\"AC\",\"TH\",\"PA\",\"U\",\"NP\",\"PU\",\"AM\",\"CM\",\"BK\",\"CF\",\"ES\",\"FM\",\"MD\",\"NO\",\"LR\",\"RF\",\"DB\",\"SG\",\"BH\",\"HS\",\"MT\",\"DS\",\"RG\",\"CN\",\"NH\",\"FL\",\"MC\",\"LV\",\"TS\",\"OG\"]\n\n\ndef possible(s):\n    if s==\"\":\n        return True\n        \n    for el in els:\n        if s.startswith(el) and possible(s[len(el):]):\n            return True\n    \n    return False\n\ns = input()\n\nif possible(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "elems = \"\"\"Ac\nAl\nAm\nSb\nAr\nAs\nAt\nBa\nBk\nBe\nBi\nBh\nB\nBr\nCd\nCa\nCf\nC\nCe\nCs\nCl\nCr\nCo\nCu\nCm\nDs\nDb\nDy\nEs\nEr\nEu\nFm\nF\nFr\nGd\nGa\nGe\nAu\nHf\nHs\nHe\nHo\nH\nIn\nI\nIr\nFe\nKr\nLa\nLr\nPb\nLi\nLu\nMg\nMn\nMt\nMd\nHg\nMo\nNd\nNe\nNp\nNi\nNb\nN\nNo\nUuo\nOs\nO\nPd\nP\nPt\nPu\nPo\nK\nPr\nPm\nPa\nRa\nRn\nRe\nRh\nRg\nRb\nRu\nRf\nSm\nSc\nSg\nSe\nSi\nAg\nNa\nSr\nS\nTa\nTc\nTe\nTb\nTl\nTh\nTm\nSn\nTi\nW\nU\nV\nXe\nYb\nY\nZn\nZr\nCn\nNh\nFl\nMc\nLv\nTs\nOg\"\"\".upper().split(\"\\n\")\n#print(elems)\n\n\n\ndef does_it_work(word):\n    #print(word)\n    if word == '': return True\n    for x in elems:\n        if word.startswith(x) and does_it_work(word[len(x):]):\n            return True\n    return False\n\nprint(\"YES\" if does_it_work(input()) else \"NO\")\n", "s = \"H,He,Li,Be,B,C,N,O,F,Ne,Na,Mg,Al,Si,P,S,Cl,Ar,K,Ca,Sc,Ti,V,Cr,Mn,Fe,Co,Ni,Cu,Zn,Ga,Ge,As,Se,Br,Kr,Rb,Sr,Y,Zr,Nb,Mo,Tc,Ru,Rh,Pd,Ag,Cd,In,Sn,Sb,Te,I,Xe,Cs,Ba,La,Ce,Pr,Nd,Pm,Sm,Eu,Gd,Tb,Dy,Ho,Er,Tm,Yb,Lu,Hf,Ta,W,Re,Os,Ir,Pt,Au,Hg,Tl,Pb,Bi,Po,At,Rn,Fr,Ra,Ac,Th,Pa,U,Np,Pu,Am,Cm,Bk,Cf,Es,Fm,Md,No,Lr,Rf,Db,Sg,Bh,Hs,Mt,Ds,Rg,Cn,Nh,Fl,Mc,Lv,Ts,Og\".upper()\nelements = s.split(\",\")\n\ninp = input()\nn = len(inp)\nf = [True] + [False] * n\n\nfor i in range(n):\n    for element in elements:\n        if i + 1 >= len(element) and inp[i-len(element)+1 : i+1] == element:\n            f[i + 1] |= f[i - len(element) + 1]\n\nprint(\"YES\" if f[-1] else \"NO\")\n", "A = {'H', 'HE', 'LI', 'BE', 'B', 'C', 'N', 'O', 'F', 'NE', 'NA', 'MG', 'AL', 'SI', 'P', 'S', 'CL', 'AR', 'K', 'CA', 'SC', 'TI', 'V', 'CR', 'MN', 'FE', 'CO', 'NI', 'CU', 'ZN', 'GA', 'GE', 'AS', 'SE', 'BR', 'KR', 'RB', 'SR', 'Y', 'ZR', 'NB', 'MO', 'TC', 'RU', 'RH', 'PD', 'AG', 'CD', 'IN', 'SN', 'SB', 'TE', 'I', 'XE', 'CS', 'BA', 'HF', 'TA', 'W', 'RE', 'OS', 'IR', 'PT', 'AU', 'HG', 'TL', 'PB', 'BI', 'PO', 'AT', 'RN', 'FR', 'RA', 'RF', 'DB', 'SG', 'BH', 'HS', 'MT', 'DS', 'RG', 'CN', 'NH', 'FL', 'MC', 'LV', 'TS', 'OG', 'LA', 'CE', 'PR', 'ND', 'PM', 'SM', 'EU', 'GD', 'TB', 'DY', 'HO', 'ER', 'TM', 'YB', 'LU', 'AC', 'TH', 'PA', 'U', 'NP', 'PU', 'AM', 'CM', 'BK', 'CF', 'ES', 'FM', 'MD', 'NO', 'LR'}\n\ns = input()\nL = len(s)\n\nfor i in range(1 << (L-1)):\n\tt = ''\n\tfor j in range(L):\n\t\tt += s[j]\n\t\tif i >> j & 1:\n\t\t\tt += '|'\n\tif all(e in A for e in t.split('|')):\n\t\tprint('YES')\n\t\tbreak\nelse:\n\tprint('NO')\n", "3\n\nl = ['H', 'HE',\n     'LI', 'BE', 'B', 'C', 'N', 'O', 'F', 'NE',\n     'NA', 'MG', 'AL', 'SI', 'P', 'S', 'CL', 'AR',\n     'K', 'CA', 'SC', 'TI', 'V', 'CR', 'MN', 'FE', 'CO', 'NI', 'CU', 'ZN', 'GA', 'GE', 'AS', 'SE', 'BR', 'KR',\n     'RB', 'SR', 'Y', 'ZR', 'NB', 'MO', 'TC', 'RU', 'RH', 'PD', 'AG', 'CD', 'IN', 'SN', 'SB', 'TE', 'I', 'XE',\n     'CS', 'BA', 'LA', 'HF', 'TA', 'W', 'RE', 'OS', 'IR', 'PT', 'AU', 'HG', 'TL', 'PB', 'BI', 'PO', 'AT', 'RN',\n     'FR', 'RA', 'AC', 'RF', 'DB', 'SG', 'BH', 'HS', 'MT', 'DS', 'RG', 'CN', 'NH', 'FL', 'MC', 'LV', 'TS', 'OG',\n     'CE', 'PR', 'ND', 'PM', 'SM', 'EU', 'GD', 'TB', 'DY', 'HO', 'ER', 'TM', 'YB', 'LU',\n     'TH', 'PA', 'U', 'NP', 'PU', 'AM', 'CM', 'BK', 'CF', 'ES', 'FM', 'MD', 'NO', 'LR']\n\n\ndef search(s):\n    if len(s) == 0:\n        return True\n    for x in l:\n        if s.startswith(x):\n            i = len(x)\n            if search(s[i:]):\n                return True\n    return False\n\n\ns = input()\nif search(s):\n    print('YES')\nelse:\n    print('NO')\n", "l=set([\"H\",\"HE\",\"LI\",\"BE\",\"B\",\"C\",\"N\",\"O\",\"F\",\"NE\",\"NA\",\"MG\",\"AL\",\"SI\",\"P\",\"S\",\"CL\",\"AR\",\"K\",\"CA\",\"SC\",\"TI\",\"V\",\"CR\",\"MN\",\"FE\",\"CO\",\"NI\",\"CU\",\"ZN\",\"GA\",\"GE\",\"AS\",\"SE\",\"BR\",\"KR\",\"RB\",\"SR\",\"Y\",\"ZR\",\"NB\",\"MO\",\"TC\",\"RU\",\"RH\",\"PD\",\"AG\",\"CD\",\"IN\",\"SN\",\"SB\",\"TE\",\"I\",\"XE\",\"CS\",\"BA\",\"LA\",\"CE\",\"PR\",\"ND\",\"PM\",\"SM\",\"EU\",\"GD\",\"TB\",\"DY\",\"HO\",\"ER\",\"TM\",\"YB\",\"LU\",\"HF\",\"TA\",\"W\",\"RE\",\"OS\",\"IR\",\"PT\",\"AU\",\"HG\",\"TL\",\"PB\",\"BI\",\"PO\",\"AT\",\"RN\",\"FR\",\"RA\",\"AC\",\"TH\",\"PA\",\"U\",\"NP\",\"PU\",\"AM\",\"CM\",\"BK\",\"CF\",\"ES\",\"FM\",\"MD\",\"NO\",\"LR\",\"RF\",\"DB\",\"SG\",\"BH\",\"HS\",\"MT\",\"DS\",\"RG\",\"CN\",\"NH\",\"FL\",\"MC\",\"LV\",\"TS\",\"OG\"])\ndef dfs(s):\n    res=True\n    if len(s)==0:\n        return True\n    elif len(s)==1:\n        return s[:1] in l\n    else:\n        return (dfs(s[1:]) if s[:1] in l else False) or (dfs(s[2:]) if s[:2] in l else False)\nprint('YES' if dfs(input()) else 'NO')", "periodic_table = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar',\n                  'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', \n                  'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Te', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', \n                  'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', \n                  'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', \n                  'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm','Md', 'No', 'Lr',\n                  'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\n\nperiodic_table = [a.lower() for a in periodic_table]\n\na = input().lower()\n\ndef dfs(index):\n    nonlocal a\n    if index >= len(a):\n        return True\n    if a[index] in periodic_table and dfs(index + 1):\n        return True\n    if index + 1 != len(a) and (a[index] + a[index + 1]) in periodic_table and dfs(index + 2):\n        return True\n    return False\n\nprint(\"YES\" if dfs(0) else \"NO\")\n", "elements = {'h', 'he', 'li', 'be', 'b', 'c', 'n', 'o', 'f', 'ne', 'na', 'mg', 'al', 'si', 'p', 's', 'cl', 'ar', 'k', 'ca', 'sc', 'ti', 'v', 'cr', 'mn', 'fe', 'co', 'ni', 'cu', 'zn', 'ga', 'ge', 'as', 'se', 'br', 'kr', 'rb', 'sr', 'y', 'zr', 'nb', 'mo', 'tc', 'ru', 'rh', 'pd', 'ag', 'cd', 'in', 'sn', 'sb', 'te', 'i', 'xe', 'cs', 'ba', 'la', 'ce', 'pr', 'nd', 'pm', 'sm', 'eu', 'gd', 'tb', 'dy', 'ho', 'er', 'tm', 'yb', 'lu', 'hf', 'ta', 'w', 're', 'os', 'ir', 'pt', 'au', 'hg', 'tl', 'pb', 'bi', 'po', 'at', 'rn', 'fr', 'ra', 'ac', 'th', 'pa', 'u', 'np', 'pu', 'am', 'cm', 'bk', 'cf', 'es', 'fm', 'md', 'no', 'lr', 'rf', 'db', 'sg', 'bh', 'hs', 'mt', 'ds', 'rg', 'cn', 'nh', 'fl', 'mc', 'lv', 'ts', 'og'}\nword = input().lower()\ndef make_word(curr_remaining):\n    if curr_remaining in elements:\n        return True\n    if curr_remaining[0] in elements:\n        if make_word(curr_remaining[1:]):\n            return True\n    if len(curr_remaining) > 1 and curr_remaining[:2] in elements:\n        if make_word(curr_remaining[2:]):\n            return True\n    return False\n\nresults = make_word(word)\nif results:\n    print('YES')\nelse:\n    print('NO')", "a = ['H','HE','LI','BE','B','C','N','O','F','NE','NA','MG','AL','SI','P','S','CL','AR','K','CA','SC','TI','V','CR','MN','FE','CO','NI','CU','ZN','GA','GE','AS','SE','BR','KR','RB','SR','Y','ZR','NB','MO','TC','RU','RH','PD','AG','CD','IN','SN','SB','TE','I','XE','CS','BA','LA','CE','PR','ND','PM','SM','EU','GD','TB','DY','HO','ER','TM','YB','LU','HF','TA','W','RE','OS','IR','PT','AU','HG','TL','PB','BI','PO','AT','RN','FR','RA','AC','TH','PA','U','NP','PU','AM','CM','BK','CF','ES','FM','MD','NO','LR','RF','DB','SG','BH','HS','MT','DS','RG','CN','NH','FL','MC','LV','TS','OG']\n\ndef check(s):\n    if len(s) == 0:\n        return 'YES'\n    elif len(s) == 1:\n        if s in a:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        s1 = ''\n        s2 = ''\n        if s[:1] in a:\n            s1 = check(s[1:])\n        if s[:2] in a:\n            s2 = check(s[2:])\n        if s1 == 'YES' or s2 == 'YES':\n            return 'YES'\n        else:\n            return 'NO'\n\nimport sys\nfor line in sys.stdin:\n    print(check(line[:-1]))", "elements = set([\"H\",\"HE\",\"LI\",\"BE\",\"B\",\"C\",\"N\",\"O\",\"F\",\"NE\",\"NA\",\"MG\",\"AL\",\"SI\",\"P\",\"S\",\"CL\",\"AR\",\"K\",\"CA\",\"SC\",\"TI\",\"V\",\"CR\",\"MN\",\"FE\",\"CO\",\"NI\",\"CU\",\"ZN\",\"GA\",\"GE\",\"AS\",\"SE\",\"BR\",\"KR\",\"RB\",\"SR\",\"Y\",\"ZR\",\"NB\",\"MO\",\"TC\",\"RU\",\"RH\",\"PD\",\"AG\",\"CD\",\"IN\",\"SN\",\"SB\",\"TE\",\"I\",\"XE\",\"CS\",\"BA\",\"LA\",\"CE\",\"PR\",\"ND\",\"PM\",\"SM\",\"EU\",\"GD\",\"TB\",\"DY\",\"HO\",\"ER\",\"TM\",\"YB\",\"LU\",\"HF\",\"TA\",\"W\",\"RE\",\"OS\",\"IR\",\"PT\",\"AU\",\"HG\",\"TL\",\"PB\",\"BI\",\"PO\",\"AT\",\"RN\",\"FR\",\"RA\",\"AC\",\"TH\",\"PA\",\"U\",\"NP\",\"PU\",\"AM\",\"CM\",\"BK\",\"CF\",\"ES\",\"FM\",\"MD\",\"NO\",\"LR\",\"RF\",\"DB\",\"SG\",\"BH\",\"HS\",\"MT\",\"DS\",\"RG\",\"CN\",\"NH\",\"FL\",\"MC\",\"LV\",\"TS\",\"OG\"])\n\ndef go(s, pos):\n    if pos == len(s):\n        return True\n\n    if s[pos] in elements and go(s, pos+1):\n        return True\n    if pos+2 <= len(s) and s[pos:pos+2] in elements and go(s, pos+2):\n        return True\n\n    return False\n\ns = input()\nprint(\"YES\" if go(s, 0) else \"NO\")\n", "els=set(['H','HE','LI','BE','B','C','N','O','F','NE','NA','MG','AL','SI','P','S','CL','AR','K','CA','SC','TI','V','CR','MN','FE','CO','NI','CU','ZN','GA','GE','AS','SE','BR','KR','RB','SR','Y','ZR','NB','MO','TC','RU','RH','PD','AG','CD','IN','SN','SB','TE','I','XE','CS','BA','LA','CE','PR','ND','PM','SM','EU','GD','TB','DY','HO','ER','TM','YB','LU','HF','TA','W','RE','OS','IR','PT','AU','HG','TL','PB','BI','PO','AT','RN','FR','RA','AC','TH','PA','U','NP','PU','AM','CM','BK','CF','ES','FM','MD','NO','LR','RF','DB','SG','BH','HS','MT','DS','RG','CN','NH','FL','MC','LV','TS','OG','UUE','UBN','UBU','UBB','UBT','UBQ','UBP','UBH'])\n\ni=input()\n\n\na=[1]+[0]*len(i)\nfor j in range(len(i)):\n    if i[j] in els:\n        a[j+1]=max(a[j+1],a[j])\n    if j and i[j-1:j+1] in els:\n        a[j+1]=max(a[j+1],a[j-1])\n\nif a[-1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n", "fuck = [\n    'h','he','li','be','b','lv','nh','fl','mc','ts','og',\n    'c','n','o','f','ne',\n    'na','mg','al','si','p',\n    's','cl','ar','k','ca',\n    'sc','ti','v','cr','mn',\n    'fe','co','ni','cu','zn',\n    'ga','ge','as','se','br',\n    'kr','rb','sr','y','zr',\n    'nb','mo','tc','ru','rh',\n    'pd','ag','cd','in','sn',\n    'sb','te','i','xe','cs',\n    'ba','la','ce','pr','nd','pm','sm','eu','gd','tb','dy','ho','er','tm','yb','lu',\n    'hf','ta','w','re','os',\n    'ir','pt','au','hg','tl',\n    'pb','bi','po','at','rn',\n    'fr','ra','ac','rf',\n    'th','pa','u','np','pu','am','cm','bk','cf','es','fm','md','no','lr','db','sg','bh','hs','mt','ds','rg','cn']\n\ndef dfs(pos):\n    nonlocal s,a\n    if pos == len(s):\n        a = 1\n        return\n    for i in fuck:\n        if pos+len(i)<=len(s) and i == s[pos:pos+len(i)]:\n            dfs(pos+len(i))\n    return\n\ns = input().strip().lower()\na = 0\ndfs(0)\nif a == 0:\n    print(\"NO\")\nelse:\n    print(\"YES\")", "xndef do(s):\n\tif len(s) == 0:\n\t\tprint(\"YES\")\n\t\treturn\n\tif len(s)>1:\n\t\ttry:\n\t\t\tx.index(s[:2])\n\t\t\tdo(s[2:])\n\t\texcept ValueError:\n\t\t\tpass\n\ttry: \n\t\tx.index(s[0])\n\t\tdo(s[1:])\n\texcept ValueError:\n\t\tpass\n\n\ns = input()\ndo(s)\nprint(\"NO\")", "elem = [\"H\",\"HE\",\"LI\",\"BE\",\"B\",\"C\",\"N\",\"O\",\"F\",\"NE\",\"NA\",\"MG\",\"AL\",\"SI\",\"P\",\"S\",\"CL\",\"AR\",\"K\",\"CA\",\"SC\",\"TI\",\"V\",\"CR\",\"MN\",\"FE\",\"CO\",\"NI\",\"CU\",\"ZN\",\"GA\",\"GE\",\"AS\",\"SE\",\"BR\",\"KR\",\"RB\",\"SR\",\"Y\",\"ZR\",\"NB\",\"MO\",\"TC\",\"RU\",\"RH\",\"PD\",\"AG\",\"CD\",\"IN\",\"SN\",\"SB\",\"TE\",\"I\",\"XE\",\"CS\",\"BA\",\"LA\",\"CE\",\"PR\",\"ND\",\"PM\",\"SM\",\"EU\",\"GD\",\"TB\",\"DY\",\"HO\",\"ER\",\"TM\",\"YB\",\"LU\",\"HF\",\"TA\",\"W\",\"RE\",\"OS\",\"IR\",\"PT\",\"AU\",\"HG\",\"TL\",\"PB\",\"BI\",\"PO\",\"AT\",\"RN\",\"FR\",\"RA\",\"AC\",\"TH\",\"PA\",\"U\",\"NP\",\"PU\",\"AM\",\"CM\",\"BK\",\"CF\",\"ES\",\"FM\",\"MD\",\"NO\",\"LR\",\"RF\",\"DB\",\"SG\",\"BH\",\"HS\",\"MT\",\"DS\",\"RG\",\"CN\",\"NH\",\"FL\",\"MC\",\"LV\",\"TS\",\"OG\"]\n\ndef fct(t):\n    if len(t) == 0:\n        return True\n    else:\n        for x in elem:\n            if(t[0] == x):\n                if fct(t[1:]):\n                    return True\n            elif len(t) >= 2 and t[:2] == x:\n                if fct(t[2:]):\n                    return True\n        return False\n\ns = input()\nif fct(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\n", "a = [\"H\", \"He\", \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\", \"Ne\", \"Na\", \"Mg\", \"Al\", \"Si\", \"P\", \"S\", \"Cl\", \"Ar\", \"K\", \"Ca\", \"Sc\", \"Ti\", \"V\", \"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Cu\", \"Zn\", \"Ga\", \"Ge\", \"As\", \"Se\", \"Br\", \"Kr\", \"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\", \"Mo\", \"Tc\", \"Ru\", \"Rh\", \"Pd\", \"Ag\", \"Cd\", \"In\", \"Sn\", \"Sb\", \"Te\", \"I\", \"Xe\", \"Cs\", \"Ba\", \"Hf\", \"Ta\", \"W\", \"Re\",\n     \"Os\", \"Ir\", \"Pt\", \"Au\", \"Hg\", \"Tl\", \"Pb\", \"Bi\", \"Po\", \"At\", \"Rn\", \"Fr\", \"Ra\", \"Rf\", \"Db\", \"Sg\", \"Bh\", \"Hs\", \"Mt\", \"Ds\", \"Rg\", \"Cn\", \"Nh\", \"Fl\", \"Mc\", \"Lv\", \"Ts\", \"Og\", \"La\", \"Ce\", \"Pr\", \"Nd\", \"Pm\", \"Sm\", \"Eu\", \"Gd\", \"Tb\", \"Dy\", \"Ho\", \"Er\", \"Tm\", \"Yb\", \"Lu\", \"Ac\", \"Th\", \"Pa\", \"U\", \"Np\", \"Pu\", \"Am\", \"Cm\", \"Bk\", \"Cf\", \"Es\", \"Fm\", \"Md\", \"No\", \"Lr\"]\n\n\ndef f(x):\n    n = len(a)\n    for i in range(n):\n        if (a[i] == x):\n            return 1\n    return 0\n\n\ndef dfs(cur, s, n):\n    if (cur >= n):\n        return 1\n    flg = 0\n    if (cur < n-1):\n        if (f(str()+s[cur]+s[cur+1]) == 1):\n            flg |= dfs(cur+2, s, n)\n    if (f(s[cur]) == 1):\n        flg |= dfs(cur+1, s, n)\n    return flg\n\n\nn = len(a)\nfor i in range(n):\n    a[i] = a[i].upper()\ns = list(input())\nn = len(s)\ni = 0\nflg = dfs(0, s, n)\nif (flg == 0):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "els = {\"Ac\":\"Actinium\",\"Ag\":\"Silver\",\"Al\":\"Aluminum\",\"Am\":\"Americium\",\n\"Ar\":\"Argon\",\"As\":\"Arsenic\",\"At\":\"Astatine\",\"Au\":\"Gold\",\"B\":\"Boron\",\"Ba\":\"Barium\",\n\"Be\":\"Beryllium\",\"Bh\":\"Bohrium\",\"Bi\":\"Bismuth\",\"Bk\":\"Berkelium\",\"Br\":\"Bromine\",\n\"C\":\"Carbon\",\"Ca\":\"Calcium\",\"Cd\":\"Cadmium\",\"Ce\":\"Cerium\",\"Cf\":\"Californium\",\n\"Cl\":\"Chlorine\",\"Cm\":\"Curium\",\"Cn\":\"Copernicium\",\"Co\":\"Cobalt\",\"Cr\":\"Chromium\",\n\"Cs\":\"Cesium\",\"Cu\":\"Copper\",\"Db\":\"Dubnium\",\"Ds\":\"Darmstadtium\",\"Dy\":\"Dysprosium\",\n\"Er\":\"Erbium\",\"Es\":\"Einsteinium\",\"Eu\":\"Europium\",\"F\":\"Fluorine\",\"Fe\":\"Iron\",\n\"Fl\":\"Flerovium\",\"Fm\":\"Fermium\",\"Fr\":\"Francium\",\"Ga\":\"Gallium\",\"Gd\":\"Gadolinium\",\n\"Ge\":\"Germanium\",\"H\":\"Hydrogen\",\"He\":\"Helium\",\"Hf\":\"Hafnium\",\"Hg\":\"Mercury\",\n\"Ho\":\"Holmium\",\"Hs\":\"Hassium\",\"I\":\"Iodine\",\"In\":\"Indium\",\"Ir\":\"Iridium\",\n\"K\":\"Potassium\",\"Kr\":\"Krypton\",\"La\":\"Lanthanum\",\"Li\":\"Lithium\",\"Lr\":\"Lawrencium\",\n\"Lu\":\"Lutetium\",\"Lv\":\"Livermorium\",\"Mc\":\"Moscovium\",\"Md\":\"Mendelevium\",\n\"Mg\":\"Magnesium\",\"Mn\":\"Manganese\",\"Mo\":\"Molybdenum\",\"Mt\":\"Meitnerium\",\n\"N\":\"Nitrogen\",\"Na\":\"Sodium\",\"Nb\":\"Niobium\",\"Nd\":\"Neodymium\",\"Ne\":\"Neon\",\n\"Nh\":\"Nihonium\",\"Ni\":\"Nickel\",\"No\":\"Nobelium\",\"Np\":\"Neptunium\",\"O\":\"Oxygen\",\n\"Og\":\"Oganesson\",\"Os\":\"Osmium\",\"P\":\"Phosphorus\",\"Pa\":\"Protactinium\",\"Pb\":\"Lead\",\n\"Pd\":\"Palladium\",\"Pm\":\"Promethium\",\"Po\":\"Polonium\",\"Pr\":\"Praseodymium\",\n\"Pt\":\"Platinum\",\"Pu\":\"Plutonium\",\"Ra\":\"Radium\",\"Rb\":\"Rubidium\",\"Re\":\"Rhenium\",\n\"Rf\":\"Rutherfordium\",\"Rg\":\"Roentgenium\",\"Rh\":\"Rhodium\",\"Rn\":\"Radon\",\n\"Ru\":\"Ruthenium\",\"S\":\"Sulfur\",\"Sb\":\"Antimony\",\"Sc\":\"Scandium\",\"Se\":\"Selenium\",\n\"Sg\":\"Seaborgium\",\"Si\":\"Silicon\",\"Sm\":\"Samarium\",\"Sn\":\"Tin\",\"Sr\":\"Strontium\",\n\"Ta\":\"Tantalum\",\"Tb\":\"Terbium\",\"Tc\":\"Technetium\",\"Te\":\"Tellurium\",\"Th\":\"Thorium\",\n\"Ti\":\"Titanium\",\"Tl\":\"Thallium\",\"Tm\":\"Thulium\",\"Ts\":\"Tennessine\",\"U\":\"Uranium\",\n\"V\":\"Vanadium\",\"W\":\"Tungsten\",\"Xe\":\"Xenon\",\"Y\":\"Yttrium\",\"Yb\":\"Ytterbium\",\n\"Zn\":\"Zinc\",\"Zr\":\"Zirconium\"}\n\ndef bon(s):\n    if s==\"\":\n        return True\n    if s[0] in els and bon(s[1:]):\n        return True\n    if len(s)>=2 and bon(s[2:]) and (s[0]+s[1].lower()) in els:\n        return True\n    return False\n\ns=input()\nif bon(s):\n    print('YES')\nelse:\n    print('NO')", "e = [\n\"H \",\n\"He\",\n\"Li\",\n\"Be\",\n\"B \",\n\"C \",\n\"N \",\n\"O \",\n\"F \",\n\"Ne\",\n\"Na\",\n\"Mg\",\n\"Al\",\n\"Si\",\n\"P \",\n\"S \",\n\"Cl\",\n\"Ar\",\n\"K \",\n\"Ca\",\n\"Sc\",\n\"Ti\",\n\"V \",\n\"Cr\",\n\"Mn\",\n\"Fe\",\n\"Co\",\n\"Ni\",\n\"Cu\",\n\"Zn\",\n\"Ga\",\n\"Ge\",\n\"As\",\n\"Se\",\n\"Br\",\n\"Kr\",\n\"Rb\",\n\"Sr\",\n\"Y \",\n\"Zr\",\n\"Nb\",\n\"Mo\",\n\"Tc\",\n\"Ru\",\n\"Rh\",\n\"Pd\",\n\"Ag\",\n\"Cd\",\n\"In\",\n\"Sn\",\n\"Sb\",\n\"Te\",\n\"I \",\n\"Xe\",\n\"Cs\",\n\"Ba\",\n\"La\",\n\"Ce\",\n\"Pr\",\n\"Nd\",\n\"Pm\",\n\"Sm\",\n\"Eu\",\n\"Gd\",\n\"Tb\",\n\"Dy\",\n\"Ho\",\n\"Er\",\n\"Tm\",\n\"Yb\",\n\"Lu\",\n\"Hf\",\n\"Ta\",\n\"W \",\n\"Re\",\n\"Os\",\n\"Ir\",\n\"Pt\",\n\"Au\",\n\"Hg\",\n\"Tl\",\n\"Pb\",\n\"Bi\",\n\"Po\",\n\"At\",\n\"Rn\",\n\"Fr\",\n\"Ra\",\n\"Ac\",\n\"Th\",\n\"Pa\",\n\"U \",\n\"Np\",\n\"Pu\",\n\"Am\",\n\"Cm\",\n\"Bk\",\n\"Cf\",\n\"Es\",\n\"Fm\",\n\"Md\",\n\"No\",\n\"Lr\",\n\"Rf\",\n\"Db\",\n\"Sg\",\n\"Bh\",\n\"Hs\",\n\"Mt\",\n\"Ds\",\n\"Rg\",\n\"Cn\",\n\"Nh\",\n\"Fl\",\n\"Mc\",\n\"Lv\",\n\"Ts\",\n\"Og\"]\n\nfor i in range(len(e)):\n    e[i] = e[i].upper().strip()\n\ne = set(e)\n\ns = input()\n\ndef valid(t):\n    if (len(t) == 0): return 1\n    if t[:1] in e and valid(t[1:]):\n        return 1\n    if len(t) > 1 and t[:2] in e and valid(t[2:]):\n        return 1\n\nif valid(s):\n    print(\"YES\\n\")\nelse: print(\"NO\\n\")", "def main():\n    elements = [\"H\", \"He\", \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\", \"Ne\", \"Na\", \"Mg\", \"Al\", \"Si\", \"P\", \"S\", \"Cl\", \"Ar\", \"K\",\n                \"Ca\", \"Sc\", \"Ti\", \"V\", \"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Cu\", \"Zn\", \"Ga\", \"Ge\", \"As\", \"Se\", \"Br\", \"Kr\",\n                \"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\", \"Mo\", \"Tc\", \"Ru\", \"Rh\", \"Pd\", \"Ag\", \"Cd\", \"In\", \"Sn\", \"Sb\", \"Te\", \"I\",\n                \"Xe\", \"Cs\", \"Ba\", \"La\", \"Ce\", \"Pr\", \"Nd\", \"Pm\", \"Sm\", \"Eu\", \"Gd\", \"Tb\", \"Dy\", \"Ho\", \"Er\", \"Tm\", \"Yb\",\n                \"Lu\", \"Hf\", \"Ta\", \"W\", \"Re\", \"Os\", \"Ir\", \"Pt\", \"Au\", \"Hg\", \"Tl\", \"Pb\", \"Bi\", \"Po\", \"At\", \"Rn\", \"Fr\",\n                \"Ra\", \"Ac\", \"Th\", \"Pa\", \"U\", \"Np\", \"Pu\", \"Am\", \"Cm\", \"Bk\", \"Cf\", \"Es\", \"Fm\", \"Md\", \"No\", \"Lr\", \"Rf\",\n                \"Db\", \"Sg\", \"Bh\", \"Hs\", \"Mt\", \"Ds\", \"Rg\", \"Cn\", \"Nh\", \"Fl\", \"Mc\", \"Lv\", \"Ts\", \"Og\"]\n    elements = [s.upper() for s in elements]\n    s = input()\n    f = [True] + [False] * len(s)\n    for i in range(len(s)):\n        if not f[i]:\n            continue\n        for e in elements:\n            if s[i:].startswith(e):\n                f[i + len(e)] = True\n    print(\"YES\" if f[len(s)] else \"NO\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a=['AC','RF','DB','SG','BH','HS','MT','DS','RG','CN','NH','FL','MC','TS','OG','LV', 'AL', 'AM', 'SB', 'AR', 'AS', 'AT', 'BA', 'BK', 'BE', 'BI', 'B', 'BR', 'CD', 'CA', 'CF', 'C', 'CE', 'CS', 'CL', 'CR', 'CO', 'CU', 'CM', 'DY', 'ES', 'ER', 'EU', 'FM', 'F', 'FR', 'GD', 'GA', 'GE', 'AU', 'HF', 'HE', 'HO', 'H', 'IN', 'I', 'IR', 'FE', 'KR', 'LA', 'LR', 'PB', 'LI', 'LU', 'MG', 'MN', 'MD', 'HG', 'MO', 'ND', 'NE', 'NP', 'NI', 'NB', 'N', 'NO', 'OS', 'O', 'PD', 'P', 'PT', 'PU', 'PO', 'K', 'PR', 'PM', 'PA', 'RA', 'RN', 'RE', 'RH', 'RB', 'RU', 'SM', 'SC', 'SE', 'SI', 'AG', 'NA', 'SR', 'S', 'TA', 'TC', 'TE', 'TB', 'TL', 'TH', 'TM', 'SN', 'TI', 'W', 'U', 'V', 'XE', 'YB', 'Y', 'ZN', 'ZR']\na=set(a)\nx=input()\nok=[False]*len(x)\nfor i in range(len(x)):\n    if x[i] in a:\n        ok[i]=True\n\nfor i in range(len(x)-1):\n    if x[i:i+2] in a:\n        ok[i]=True\n        ok[i+1]=True\nprint('YES' if all(ok) else 'NO')", "elements = \"\"\"1\tH\tHydrogen\n2\tHe\tHelium\n3\tLi\tLithium\n4\tBe\tBeryllium\n5\tB\tBoron\n6\tC\tCarbon\n7\tN\tNitrogen\n8\tO\tOxygen\n9\tF\tFluorine\n10\tNe\tNeon\n11\tNa\tSodium\n12\tMg\tMagnesium\n13\tAl\tAluminum\n14\tSi\tSilicon\n15\tP\tPhosphorus\n16\tS\tSulfur\n17\tCl\tChlorine\n18\tAr\tArgon\n19\tK\tPotassium\n20\tCa\tCalcium\n21\tSc\tScandium\n22\tTi\tTitanium\n23\tV\tVanadium\n24\tCr\tChromium\n25\tMn\tManganese\n26\tFe\tIron\n27\tCo\tCobalt\n28\tNi\tNickel\n29\tCu\tCopper\n30\tZn\tZinc\n31\tGa\tGallium\n32\tGe\tGermanium\n33\tAs\tArsenic\n34\tSe\tSelenium\n35\tBr\tBromine\n36\tKr\tKrypton\n37\tRb\tRubidium\n38\tSr\tStrontium\n39\tY\tYttrium\n40\tZr\tZirconium\n41\tNb\tNiobium\n42\tMo\tMolybdenum\n43\tTc\tTechnetium\n44\tRu\tRuthenium\n45\tRh\tRhodium\n46\tPd\tPalladium\n47\tAg\tSilver\n48\tCd\tCadmium\n49\tIn\tIndium\n50\tSn\tTin\n51\tSb\tAntimony\n52\tTe\tTellurium\n53\tI\tIodine\n54\tXe\tXenon\n55\tCs\tCesium\n56\tBa\tBarium\n57\tLa\tLanthanum\n58\tCe\tCerium\n59\tPr\tPraseodymium\n60\tNd\tNeodymium\n61\tPm\tPromethium\n62\tSm\tSamarium\n63\tEu\tEuropium\n64\tGd\tGadolinium\n65\tTb\tTerbium\n66\tDy\tDysprosium\n67\tHo\tHolmium\n68\tEr\tErbium\n69\tTm\tThulium\n70\tYb\tYtterbium\n71\tLu\tLutetium\n72\tHf\tHafnium\n73\tTa\tTantalum\n74\tW\tTungsten\n75\tRe\tRhenium\n76\tOs\tOsmium\n77\tIr\tIridium\n78\tPt\tPlatinum\n79\tAu\tGold\n80\tHg\tMercury\n81\tTl\tThallium\n82\tPb\tLead\n83\tBi\tBismuth\n84\tPo\tPolonium\n85\tAt\tAstatine\n86\tRn\tRadon\n87\tFr\tFrancium\n88\tRa\tRadium\n89\tAc\tActinium\n90\tTh\tThorium\n91\tPa\tProtactinium\n92\tU\tUranium\n93\tNp\tNeptunium\n94\tPu\tPlutonium\n95\tAm\tAmericium\n96\tCm\tCurium\n97\tBk\tBerkelium\n98\tCf\tCalifornium\n99\tEs\tEinsteinium\n100\tFm\tFermium\n101\tMd\tMendelevium\n102\tNo\tNobelium\n103\tLr\tLawrencium\n104\tRf\tRutherfordium\n105\tDb\tDubnium\n106\tSg\tSeaborgium\n107\tBh\tBohrium\n108\tHs\tHassium\n109\tMt\tMeitnerium\n110\tDs\tDarmstadtium\n111\tRg\tRoentgenium\n112\tCn\tCopernicium\n113\tNh\tNihonium\n114\tFl\tFlerovium\n115\tMc\tMoscovium\n116\tLv\tLivermorium\n117\tTs\tTennessine\n118\tOg\tOganesson\n\"\"\".strip().split(\n    \"\\n\"\n)\n\nelements = [line.split()[1].upper() for line in elements]\n\n\ndef isPossible(s):\n    if s in elements:\n        return True\n    for e in elements:\n        if s.startswith(e) and isPossible(s[len(e) :]):\n            return True\n    return False\n\n\nS = input()\nif isPossible(S):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n", "\ne = [\n    {'B', 'C', 'F', 'H', 'I', 'K', 'N', 'O', 'P', 'S', 'U', 'V', 'W', 'Y'},\n    {'AC', 'AG', 'AL', 'AM', 'AR', 'AS', 'AT', 'AU', 'BA', 'BE', 'BH', 'BI', 'BK', 'BR', 'CA', 'CD', 'CE', 'CF', 'CL', 'CM', 'CN', 'CO', 'CR', 'CS', 'CU', 'DB', 'DS', 'DY', 'ER', 'ES', 'EU', 'FE', 'FL', 'FM', 'FR', 'GA', 'GD', 'GE', 'HE', 'HF', 'HG', 'HO', 'HS', 'IN', 'IR', 'KR', 'LA', 'LI', 'LR', 'LU', 'LV', 'MC', 'MD', 'MG', 'MN', 'MO', 'MT', 'NA', 'NB', 'ND', 'NE', 'NH', 'NI', 'NO', 'NP', 'OG', 'OS', 'PA', 'PB', 'PD', 'PM', 'PO', 'PR', 'PT', 'PU', 'RA', 'RB', 'RE', 'RF', 'RG', 'RH', 'RN', 'RU', 'SB', 'SC', 'SE', 'SG', 'SI', 'SM', 'SN', 'SR', 'TA', 'TB', 'TC', 'TE', 'TH', 'TI', 'TL', 'TM', 'TS', 'XE', 'YB', 'ZN', 'ZR'},\n    {},\n]\n\ns = input()\nn = len(s)\nd = [0 for _ in range(n)]\nfor i in range(n):\n    for l in range(0, 3):\n        if i-l >= 0 and s[i-l:i+1] in e[l]:\n            if i-l == 0 or d[i-l-1]:\n                d[i] = 1\n                break\n\nprint('YES' if d[n-1] else 'NO')\n", "a = [\n    \"H\", \"HE\", \"LI\", \"BE\", \"B\", \"C\", \"N\", \"O\", \"F\", \"NE\", \"NA\", \"MG\", \"AL\", \"SI\", \"P\", \"S\", \"CL\", \"AR\", \"K\", \"CA\", \"SC\",\n    \"TI\", \"V\", \"CR\", \"MN\", \"FE\", \"CO\", \"NI\", \"CU\", \"ZN\", \"GA\", \"GE\", \"AS\", \"SE\", \"BR\", \"KR\", \"RB\", \"SR\", \"Y\", \"ZR\",\n    \"NB\", \"MO\", \"TC\", \"RU\", \"RH\", \"PD\", \"AG\", \"CD\", \"IN\", \"SN\", \"SB\", \"TE\", \"I\", \"XE\", \"CS\", \"BA\", \"LA\", \"CE\", \"PR\",\n    \"ND\", \"PM\", \"SM\", \"EU\", \"GD\", \"TB\", \"DY\", \"HO\", \"ER\", \"TM\", \"YB\", \"LU\", \"HF\", \"TA\", \"W\", \"RE\", \"OS\", \"IR\", \"PT\",\n    \"AU\", \"HG\", \"TL\", \"PB\", \"BI\", \"PO\", \"AT\", \"RN\", \"FR\", \"RA\", \"AC\", \"TH\", \"PA\", \"U\", \"NP\", \"PU\", \"AM\", \"CM\", \"BK\",\n    \"CF\", \"ES\", \"FM\", \"MD\", \"NO\", \"LR\", \"RF\", \"DB\", \"SG\", \"BH\", \"HS\", \"MT\", \"DS\", \"RG\", \"CN\", \"NH\", \"FL\", \"MC\", \"LV\",\n    \"TS\", \"OG\",\n]\n\nb = input()\nl = len(b)\nok = False\n\n\ndef dfs(idx):\n    nonlocal b\n    nonlocal ok\n    if idx >= l:\n        ok = True\n        return\n    if idx + 1 < l and str(b[idx]) + str(b[idx + 1]) in a:\n        dfs(idx + 2)\n    if str(b[idx]) in a:\n        dfs(idx + 1)\n\n\ndfs(0)\nif ok:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "a = [\n    \"H\", \"HE\", \"LI\", \"BE\", \"B\", \"C\", \"N\", \"O\", \"F\", \"NE\", \"NA\", \"MG\", \"AL\", \"SI\", \"P\", \"S\", \"CL\", \"AR\", \"K\", \"CA\", \"SC\",\n    \"TI\", \"V\", \"CR\", \"MN\", \"FE\", \"CO\", \"NI\", \"CU\", \"ZN\", \"GA\", \"GE\", \"AS\", \"SE\", \"BR\", \"KR\", \"RB\", \"SR\", \"Y\", \"ZR\",\n    \"NB\", \"MO\", \"TC\", \"RU\", \"RH\", \"PD\", \"AG\", \"CD\", \"IN\", \"SN\", \"SB\", \"TE\", \"I\", \"XE\", \"CS\", \"BA\", \"LA\", \"CE\", \"PR\",\n    \"ND\", \"PM\", \"SM\", \"EU\", \"GD\", \"TB\", \"DY\", \"HO\", \"ER\", \"TM\", \"YB\", \"LU\", \"HF\", \"TA\", \"W\", \"RE\", \"OS\", \"IR\", \"PT\",\n    \"AU\", \"HG\", \"TL\", \"PB\", \"BI\", \"PO\", \"AT\", \"RN\", \"FR\", \"RA\", \"AC\", \"TH\", \"PA\", \"U\", \"NP\", \"PU\", \"AM\", \"CM\", \"BK\",\n    \"CF\", \"ES\", \"FM\", \"MD\", \"NO\", \"LR\", \"RF\", \"DB\", \"SG\", \"BH\", \"HS\", \"MT\", \"DS\", \"RG\", \"CN\", \"NH\", \"FL\", \"MC\", \"LV\",\n    \"TS\", \"OG\",\n]\n\nb = input()\nl = len(b)\nok = False\n\n\ndef dfs(idx):\n    nonlocal ok\n    if idx >= l:\n        ok = True\n        return\n    if idx + 1 < l and str(b[idx]) + str(b[idx + 1]) in a:\n        dfs(idx + 2)\n    if str(b[idx]) in a:\n        dfs(idx + 1)\n\n\ndfs(0)\nif ok:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s = [\"AC\", \"AG\", \"AL\", \"AM\", \"AR\", \"AS\", \"AT\", \"AU\", \"BA\", \"BE\", \"BH\", \"BI\",\n     \"BK\", \"BR\", \"B\", \"CA\", \"CD\", \"CE\", \"CF\", \"CL\", \"CM\", \"CN\", \"CO\", \"CR\",\n\t \"CS\", \"CU\", \"C\", \"DB\", \"DS\", \"DY\", \"ER\", \"ES\", \"EU\", \"FE\", \"FL\", \"FM\",\n\t \"FR\", \"F\",  \"GA\", \"GD\", \"GE\", \"HE\", \"HF\", \"HG\", \"HO\", \"HS\", \"H\", \"IN\",\n\t \"IR\", \"I\",  \"KR\", \"K\",  \"LA\", \"LI\", \"LR\", \"LU\", \"LV\", \"MC\", \"MD\", \"MG\",\n\t \"MN\", \"MO\", \"MT\", \"NA\", \"NB\", \"ND\", \"NE\", \"NH\", \"NI\", \"NO\", \"NP\", \"N\",\n\t \"OG\", \"OS\", \"O\", \"PA\", \"PB\", \"PD\", \"PM\", \"PO\", \"PR\", \"PT\", \"PU\", \"P\",\n\t \"RA\", \"RB\", \"RE\", \"RF\", \"RG\", \"RH\", \"RN\", \"RU\", \"SB\", \"SC\", \"SE\", \"SG\",\n\t \"SI\", \"SM\", \"SN\", \"SR\", \"S\", \"TA\", \"TB\", \"TC\", \"TE\", \"TH\", \"TI\", \"TL\",\n\t \"TM\", \"TS\", \"U\", \"V\",  \"W\", \"XE\", \"YB\", \"Y\",  \"ZN\", \"ZR\"]\ndef DFS(a):\n    if a is \"\":\n        return \"YES\"\n    for j in s:\n        if (len(j)==1 and a[0]==j[0] and DFS(a[1:])==\"YES\") or (len(a)>=2 and len(j)==2 and a[0]==j[0] and a[1]==j[1] and DFS(a[2:])==\"YES\"):\n            return \"YES\"\n    return \"NO\"\n \nss = input()\nprint(DFS(ss))", "def ps(prakhar):\n    if prakhar == \"\": return True\n    if prakhar[0] in l and ps(prakhar[1: ]): return True\n    if prakhar[0: 2] in l and ps(prakhar[2: ]): return True\n    return False\nl = [\"H\",\"He\",\"Li\",\"Be\",\"B\",\"C\",\"N\",\"O\",\"F\",\"Ne\",\"Na\",\"Mg\",\"Al\",\"Si\",\"P\",\"S\",\"Cl\",\"Ar\",\"K\",\"Ca\",\"Sc\",\"Ti\",\"V\",\"Cr\",\"Mn\",\"Fe\",\"Co\",\"Ni\",\"Cu\",\"Zn\",\"Ga\",\"Ge\",\"As\",\"Se\",\"Br\",\"Kr\",\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\",\"Mo\",\"Tc\",\"Ru\",\"Rh\",\"Pd\",\"Ag\",\"Cd\",\"In\",\"Sn\",\"Sb\",\"Te\",\"I\",\"Xe\",\"Cs\",\"Ba\",\"La\",\"Ce\",\"Pr\",\"Nd\",\"Pm\",\"Sm\",\"Eu\",\"Gd\",\"Tb\",\"Dy\",\"Ho\",\"Er\",\"Tm\",\"Yb\",\"Lu\",\"Hf\",\"Ta\",\"W\",\"Re\",\"Os\",\"Ir\",\"Pt\",\"Au\",\"Hg\",\"Tl\",\"Pb\",\"Bi\",\"Po\",\"At\",\"Rn\",\"Fr\",\"Ra\",\"Ac\",\"Th\",\"Pa\",\"U\",\"Np\",\"Pu\",\"Am\",\"Cm\",\"Bk\",\"Cf\",\"Es\",\"Fm\",\"Md\",\"No\",\"Lr\",\"Rf\",\"Db\",\"Sg\",\"Bh\",\"Hs\",\"Mt\",\"Ds\",\"Rg\",\"Cn\",\"Nh\",\"Fl\",\"Mc\",\"Lv\",\"Ts\",\"Og\"]\nfor i in range(118):\n    l[i] = l[i].upper()\ns = input()\nif ps(s): print(\"YES\")\nelse: print(\"NO\")", "GOOD = ['GENIUS', 'IRENE', 'REVOLVER',   'WATSON']\nBAD =  ['HOLMES', 'MARY',  'SMARTPHONE', 'DOCTOR']\n\nsymbols = ['Ac','Ag','Al','Am','Ar','As','At','Au','B','Ba','Be','Bh','Bi','Bk','Br','C','Ca','Cd','Ce','Cf','Cl','Cm','Cn','Co','Cr','Cs','Cu','Db','Ds','Dy','Er','Es','Eu','F','Fe','Fl','Fm','Fr','Ga','Gd','Ge','H','He','Hf','Hg','Ho','Hs','I','In','Ir','K','Kr','La','Li','Lr','Lu','Lv','Mc','Md','Mg','Mn','Mo','Mt','N','Na','Nb','Nd','Ne','Nh','Ni','No','Np','O','Og','Os','P','Pa','Pb','Pd','Pm','Po','Pr','Pt','Pu','Ra','Rb','Re','Rf','Rg','Rh','Rn','Ru','S','Sb','Sc','Se','Sg','Si','Sm','Sn','Sr','Ta','Tb','Tc','Te','Th','Ti','Tl','Tm','Ts','U','V','W','Xe','Y','Yb','Zn','Zr']\nsymbols = [x.upper() for x in symbols]\n\nDP = {}\ndef can(w, i):\n    if (w,i) in DP:\n        return DP[(w,i)]\n    if i == len(w):\n        return True\n    for s in symbols:\n        if w[i:].startswith(s) and can(w, i+len(s)):\n            DP[(w,i)] = True\n            return True\n    DP[(w,i)] = False\n    return False\n\n\n\nnew = input()\nprint('YES' if can(new, 0) else 'NO')\n#if new in GOOD:\n#    print('YES')\n#elif new in BAD:\n#    print('NO')\n#else:\n#    print('YES')\n\ndef score(w):\n    n = [ord(c)-ord('A')+1 for c in w]\n    print(w,n,len([x for x in n if x%2==1]))\n\n#print('== GOOD ==')\n#for w in GOOD:\n#    print(can(w, 0))\n#print('== BAD ==')\n#for w in BAD:\n#    print(can(w, 0))\n", "elements = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\nelements = [t.upper() for t in elements]\n\n\ndef dfs(s):\n    if len(s) == 0:\n        return True\n    if len(s) >= 2 and s[:2] in elements and dfs(s[2:]):\n        return True\n    return s[:1] in elements and dfs(s[1:])\n\n\ns = input()\nprint(\"YES\" if dfs(s) else \"NO\")\n", "elements = set(\"H He Li Be B C N O F Ne Na Mg Al Si P S Cl Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I Xe Cs Ba La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu Hf Ta W Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No Lr Rf Db Sg Bh Hs Mt Ds Rg Cn Nh Fl Mc Lv Ts Og\".upper().split())\n\ndef is_elem(s):\n    if not s: return True\n    return (s[:1] in elements and is_elem(s[1:])) or (s[:2] in elements and is_elem(s[2:]))\nprint(\"YNEOS\"[not is_elem(input())::2])\n", "e = ['AC', 'AG', 'AL', 'AM', 'AR', 'AS', 'AT', 'AU', 'B', 'BA', 'BE', 'BH', 'BI', 'BK', 'BR', 'C', 'CA', 'CD', 'CE', 'CF', 'CL', 'CM', 'CN', 'CO', 'CR', 'CS', 'CU', 'DB', 'DS', 'DY', 'ER', 'ES', 'EU', 'F', 'FE', 'FL', 'FM', 'FR', 'GA', 'GD', 'GE', 'H', 'HE', 'HF', 'HG', 'HO', 'HS', 'I', 'IN', 'IR', 'K', 'KR', 'LA', 'LI', 'LR', 'LU', 'LV', 'MC', 'MD', 'MG', 'MN', 'MO', 'MT', 'N', 'NA', 'NB', 'ND', 'NE', 'NH', 'NI', 'NO', 'NP', 'O', 'OG', 'OS', 'P', 'PA', 'PB', 'PD', 'PM', 'PO', 'PR', 'PT', 'PU', 'RA', 'RB', 'RE', 'RF', 'RG', 'RH', 'RN', 'RU', 'S', 'SB', 'SC', 'SE', 'SG', 'SI', 'SM', 'SN', 'SR', 'TA', 'TB', 'TC', 'TE', 'TH', 'TI', 'TL', 'TM', 'TS', 'U', 'V', 'W', 'XE', 'Y', 'YB', 'ZN', 'ZR']\n\ns = input()\ndp = [0] * (len(s) + 1)\ndp[0] = 1\nfor i in range(1, len(s) + 1):\n    for ei in e:\n        if (len(ei) <= i and \n            ei == s[i - len(ei):i] and \n            dp[i - len(ei)] == 1):\n            dp[i] = 1\n\nprint('YES' if dp[len(s)] else 'NO')", "import re\nif re.match( r'^(H|HE|LI|BE|B|C|N|O|F|NE|NA|MG|AL|SI|P|S|CL|AR|K|CA|SC|TI|V|CR|MN|FE|CO|NI|CU|ZN|GA|GE|AS|SE|BR|KR|RB|SR|Y|ZR|NB|MO|TC|RU|RH|PD|AG|CD|IN|SN|SB|TE|I|XE|CS|BA|LA|CE|PR|ND|PM|SM|EU|GD|TB|DY|HO|ER|TM|YB|LU|HF|TA|W|RE|OS|IR|PT|AU|HG|TL|PB|BI|PO|AT|RN|FR|RA|AC|TH|PA|U|NP|PU|AM|CM|BK|CF|ES|FM|MD|NO|LR|RF|DB|SG|BH|HS|MT|DS|RG|CN|NH|FL|MC|LV|TS|OG)*$', input()):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "\"\"\"\nAuthor: guiferviz\nTime: 2020-04-01 16:35:01\n\"\"\"\n\n\ndef main():\n    # Read input word.\n    s = input()\n\n    # Declare variables.\n    elements = [\"H\",\"He\",\"Li\",\"Be\",\"B\",\"C\",\"N\",\"O\",\"F\",\"Ne\",\"Na\",\"Mg\",\"Al\",\"Si\",\"P\",\"S\",\"Cl\",\"Ar\",\"K\",\"Ca\",\"Sc\",\"Ti\",\"V\",\"Cr\",\"Mn\",\"Fe\",\"Co\",\"Ni\",\"Cu\",\"Zn\",\"Ga\",\"Ge\",\"As\",\"Se\",\"Br\",\"Kr\",\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\",\"Mo\",\"Tc\",\"Ru\",\"Rh\",\"Pd\",\"Ag\",\"Cd\",\"In\",\"Sn\",\"Sb\",\"Te\",\"I\",\"Xe\",\"Cs\",\"Ba\",\"La\",\"Ce\",\"Pr\",\"Nd\",\"Pm\",\"Sm\",\"Eu\",\"Gd\",\"Tb\",\"Dy\",\"Ho\",\"Er\",\"Tm\",\"Yb\",\"Lu\",\"Hf\",\"Ta\",\"W\",\"Re\",\"Os\",\"Ir\",\"Pt\",\"Au\",\"Hg\",\"Tl\",\"Pb\",\"Bi\",\"Po\",\"At\",\"Rn\",\"Fr\",\"Ra\",\"Ac\",\"Th\",\"Pa\",\"U\",\"Np\",\"Pu\",\"Am\",\"Cm\",\"Bk\",\"Cf\",\"Es\",\"Fm\",\"Md\",\"No\",\"Lr\",\"Rf\",\"Db\",\"Sg\",\"Bh\",\"Hs\",\"Mt\",\"Ds\",\"Rg\",\"Cn\",\"Nh\",\"Fl\",\"Mc\",\"Lv\",\"Ts\",\"Og\"]\n    #elements = [\"Bi\", \"O\"]\n    elements = [i.upper() for i in elements]\n    n = len(s)\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    # Run code.\n    for i in range(n):\n        #print(i, dp)\n        if dp[i]:\n            for e in elements:\n                if s[i:].startswith(e):\n                    dp[i + len(e)] = True\n\n    # Print result.\n    print(\"YES\" if dp[-1] else \"NO\")\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "e = ['H','HE','LI','BE','B','C','N','O','F','NE','NA','MG','AL','SI','P','S','CL','AR','K','CA','SC','TI','V','CR','MN','FE','CO','NI','CU','ZN','GA','GE','AS','SE','BR','KR','RB','SR','Y','ZR','NB','MO','TC','RU','RH','PD','AG','CD','IN','SN','SB','TE','I','XE','CS','BA','LA','CE','PR','ND','PM','SM','EU','GD','TB','DY','HO','ER','TM','YB','LU','HF','TA','W','RE','OS','IR','PT','AU','HG','TL','PB','BI','PO','AT','RN','FR','RA','AC','TH','PA','U','NP','PU','AM','CM','BK','CF','ES','FM','MD','NO','LR','RF','DB','SG','BH','HS','MT','DS','RG','CN','NH','FL','MC','LV','TS','OG']\ndef c(s):\n    if s in e:\n        return True\n    return any(s.startswith(x) and c(s[len(x):]) for x in e)\nprint(['NO','YES'][c(input())])", "e = ['H','HE','LI','BE','B','C','N','O','F','NE','NA','MG','AL','SI','P','S','CL','AR','K','CA','SC','TI','V','CR','MN','FE','CO','NI','CU','ZN','GA','GE','AS','SE','BR','KR','RB','SR','Y','ZR','NB','MO','TC','RU','RH','PD','AG','CD','IN','SN','SB','TE','I','XE','CS','BA','LA','CE','PR','ND','PM','SM','EU','GD','TB','DY','HO','ER','TM','YB','LU','HF','TA','W','RE','OS','IR','PT','AU','HG','TL','PB','BI','PO','AT','RN','FR','RA','AC','TH','PA','U','NP','PU','AM','CM','BK','CF','ES','FM','MD','NO','LR','RF','DB','SG','BH','HS','MT','DS','RG','CN','NH','FL','MC','LV','TS','OG']\ndef c(s):\n    if s in e:\n        return True\n    return any(s.startswith(x) and c(s[len(x):]) for x in e)\nprint(['NO','YES'][c(input())])", "strs = \"\"\"Ac\nAg\nAl\nAm\nAr\nAs\nAt\nAu\nB\nBa\nBe\nBh\nBi\nBk\nBr\nC\nCa\nCd\nCe\nCf\nCl\nCm\nCn\nCo\nCr\nCs\nCu\nDb\nDs\nDy\nEr\nEs\nEu\nF\nFe\nFl\nFm\nFr\nGa\nGd\nGe\nH\nHe\nHf\nHg\nHo\nHs\nI\nIn\nIr\nK\nKr\nLa\nLi\nLr\nLu\nLv\nMc\nMd\nMg\nMn\nMo\nMt\nN\nNa\nNb\nNd\nNe\nNh\nNi\nNo\nNp\nO\nOg\nOs\nP\nPa\nPb\nPd\nPm\nPo\nPr\nPt\nPu\nRa\nRb\nRe\nRf\nRg\nRh\nRn\nRu\nS\nSb\nSc\nSe\nSg\nSi\nSm\nSn\nSr\nTa\nTb\nTc\nTe\nTh\nTi\nTl\nTm\nTs\nU\nUbb\nUbh\nUbn\nUbp\nUbq\nUbt\nUbu\nUue\nV\nW\nXe\nY\nYb\nZn\nZr\"\"\"\nele = strs.upper().split(\"\\n\")\n# print(ele)\ninp = input()\nn = len(inp)\ndp = [False] * (n+1)\ndp[0] = True\nfor i in range(1, n+1):\n  if dp[i-1] == True and inp[i-1:i] in ele:\n    dp[i] = True\n  elif i > 1 and dp[i-2] == True and inp[i-2:i] in ele:\n    dp[i] = True\n  elif i > 2 and dp[i-3] == True and inp[i-3:i] in ele:\n    dp[i] = True\n \nif dp[n]:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "w = input()\nelement = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\n\n\nmark = [0 for i in w]\n\nfor i in element:\n    i = i.upper()\n    if i in w:\n        b = w.index(i)\n        for idx,item in enumerate(i):\n            mark[b+idx] = 1\n#print(mark)\n\nif 0 in mark:\n    print('NO')\nelse:\n    print('YES')", "l=[\"H\",\"HE\",\"LI\",\"BE\",\"B\",\"C\",\"N\",\"O\",\"F\",\"NE\",\"NA\",\"MG\",\"AL\",\"SI\",\"P\",\"S\",\"CL\",\"AR\",\"K\",\"CA\",\"SC\",\"TI\",\"V\",\"CR\",\"MN\",\"FE\",\"CO\",\"NI\",\"CU\",\"ZN\",\"GA\",\"GE\",\"AS\",\"SE\",\"BR\",\"KR\",\"RB\",\"SR\",\"Y\",\"ZR\",\"NB\",\"MO\",\"TC\",\"RU\",\"RH\",\"PD\",\"AG\",\"CD\",\"LN\",\"SN\",\"SB\",\"TE\",\"I\",\"XE\",\"CS\",\"BA\",\"LA\",\"CE\",\"PR\",\"ND\",\"PM\",\"SM\",\"EU\",\"GD\",\"TB\",\"DY\",\"HO\",\"ER\",\"TM\",\"YB\",\"LU\",\"HF\",\"TA\",\"W\",\"RE\",\"OS\",\"IR\",\"PT\",\"AU\",\"HG\",\"TL\",\"PB\",\"BI\",\"PO\",\"AT\",\"RN\",\"FR\",\"RA\",\"AC\",\"TH\",\"PA\",\"U\",\"NP\",\"PU\",\"AM\",\"CM\",\"BK\",\"CF\",\"ES\",\"FM\",\"MD\",\"NO\",\"LR\",\"RF\",\"DB\",\"SG\",\"BH\",\"HS\",\"MT\",\"DS\",\"RG\",\"CN\",\"NH\",\"FL\",\"MC\",\"LV\",\"TS\",\"OG\"]\ndef dfs(s):\n    if len(s)==0:\n        return True\n    elif len(s)==1:\n        return (s[:1] in l)\n    else:\n        return (dfs(s[1:]) if s[:1] in l else False) or (dfs(s[2:]) if s[:2] in l else False)\n                                                         \nprint(\"YES\" if dfs(input()) else \"NO\")", "l=[\"H\",\"HE\",\"LI\",\"BE\",\"B\",\"C\",\"N\",\"O\",\"F\",\"NE\",\"NA\",\"MG\",\"AL\",\"SI\",\"P\",\"S\",\"CL\",\"AR\",\"K\",\"CA\",\"SC\",\"TI\",\"V\",\"CR\",\"MN\",\"FE\",\"CO\",\"NI\",\"CU\",\"ZN\",\"GA\",\"GE\",\"AS\",\"SE\",\"BR\",\"KR\",\"RB\",\"SR\",\"Y\",\"ZR\",\"NB\",\"MO\",\"TC\",\"RU\",\"RH\",\"PD\",\"AG\",\"CD\",\"LN\",\"SN\",\"SB\",\"TE\",\"I\",\"XE\",\"CS\",\"BA\",\"LA\",\"CE\",\"PR\",\"ND\",\"PM\",\"SM\",\"EU\",\"GD\",\"TB\",\"DY\",\"HO\",\"ER\",\"TM\",\"YB\",\"LU\",\"HF\",\"TA\",\"W\",\"RE\",\"OS\",\"IR\",\"PT\",\"AU\",\"HG\",\"TL\",\"PB\",\"BI\",\"PO\",\"AT\",\"RN\",\"FR\",\"RA\",\"AC\",\"TH\",\"PA\",\"U\",\"NP\",\"PU\",\"AM\",\"CM\",\"BK\",\"CF\",\"ES\",\"FM\",\"MD\",\"NO\",\"LR\",\"RF\",\"DB\",\"SG\",\"BH\",\"HS\",\"MT\",\"DS\",\"RG\",\"CN\",\"NH\",\"FL\",\"MC\",\"LV\",\"TS\",\"OG\"]\ndef dfs(s):\n    if len(s)==0:\n        return True\n    elif len(s)==1:\n        return (s[:1] in l)\n    else:\n        return (dfs(s[1:]) if s[:1] in l else False) or (dfs(s[2:]) if s[:2] in l else False)\n                                                         \nprint(\"YES\" if dfs(input()) else \"NO\")", "els = \"H,He,Li,Be,B,C,N,O,F,Ne,Na,Mg,Al,Si,P,S,Cl,Ar,K,Ca,Sc,Ti,V,Cr,Mn,Fe,Co,Ni,Cu,Zn,Ga,Ge,As,Se,Br,Kr,Rb,Sr,Y,Zr,Nb,Mo,Tc,Ru,Rh,Pd,Ag,Cd,In,Sn,Sb,Te,I,Xe,Cs,Ba,La,Ce,Pr,Nd,Pm,Sm,Eu,Gd,Tb,Dy,Ho,Er,Tm,Yb,Lu,Hf,Ta,W,Re,Os,Ir,Pt,Au,Hg,Tl,Pb,Bi,Po,At,Rn,Fr,Ra,Ac,Th,Pa,U,Np,Pu,Am,Cm,Bk,Cf,Es,Fm,Md,No,Lr,Rf,Db,Sg,Bh,Hs,Mt,Ds,Rg,Cn,Nh,Fl,Mc,Lv,Ts,Og\"\n\nels = els.upper().split(',')\n\ndef check(s):\n   for el in els:\n      if s == el:\n         return True\n      match = False\n      if len(el) <= len(s):\n         match = True\n         for x in range(len(el)):\n            if s[x] != el[x]:\n               match = False\n               break\n      if match:\n         if check(s[len(el):]):\n            return True\n   return False\n\nprint(\"YES\" if check(input()) else \"NO\")\n\n\n# __template__\n# # input() reads a whole line\n# def getarr():\n#    return(list(map(int, input().split())))\n\n# def solve():\n#    n = input()\n#    s = input()\n#    print(len(s.replace('UR','D').replace('RU','D')))\n   \n# # for tc in range(int(input())): solve()\n\n# solve()\n", "s='H,HE,LI,BE,B,C,N,O,F,NE,NA,MG,AL,SI,P,S,CL,AR,K,CA,SC,TI,V,CR,MN,FE,CO,NI,CU,ZN,GA,GE,AS,SE,BR,KR,RB,SR,Y,ZR,NB,MO,TC,RU,RH,PD,AG,CD,IN,SN,SB,TE,I,XE,CS,BA,LA,CE,PR,ND,PM,SM,EU,GD,TB,DY,HO,ER,TM,YB,LU,HF,TA,W,RE,OS,IR,PT,AU,HG,TL,PB,BI,PO,AT,RN,FR,RA,AC,TH,PA,U,NP,PU,AM,CM,BK,CF,ES,FM,MD,NO,LR,RF,DB,SG,BH,HS,MT,DS,RG,CN,NH,FL,MC,LV,TS,OG'.split(',')\nx= input()\na=1\nb=0\nfor i in range (len(x)):\n    a,b= x[i] in s and a or x[i-1:i+1] in s and b,a\nprint(['NO', 'YES'][a])", "E=[\"H\",\"HE\",\"LI\",\"BE\",\"B\",\"C\",\"N\",\"O\",\"F\",\"NE\",\"NA\",\"MG\",\"AL\",\"SI\",\"P\",\"S\",\"CL\",\"AR\",\"K\",\"CA\",\"SC\",\"TI\",\"V\",\"CR\",\"MN\",\"FE\",\"CO\",\"NI\",\"CU\",\"ZN\",\"GA\",\"GE\",\"AS\",\"SE\",\"BR\",\"KR\",\"RB\",\"SR\",\"Y\",\"ZR\",\"NB\",\"MO\",\"TC\",\"RU\",\"RH\",\"PD\",\"AG\",\"CD\",\"IN\",\"SN\",\"SB\",\"TE\",\"I\",\"XE\",\"CS\",\"BA\",\"LA\",\"CE\",\"PR\",\"ND\",\"PM\",\"SM\",\"EU\",\"GD\",\"TB\",\"DY\",\"HO\",\"ER\",\"TM\",\"YB\",\"LU\",\"HF\",\"TA\",\"W\",\"RE\",\"OS\",\"IR\",\"PT\",\"AU\",\"HG\",\"TL\",\"PB\",\"BI\",\"PO\",\"AT\",\"RN\",\"FR\",\"RA\",\"AC\",\"TH\",\"PA\",\"U\",\"NP\",\"PU\",\"AM\",\"CM\",\"BK\",\"CF\",\"ES\",\"FM\",\"MD\",\"NO\",\"LR\",\"RF\",\"DB\",\"SG\",\"BH\",\"HS\",\"MT\",\"DS\",\"RG\",\"CN\",\"NH\",\"FL\",\"MC\",\"LV\",\"TS\",\"OG\"]\ndef match(s):\n    if s==\"\":\n        return True\n    if s[:1] in E:\n        if match(s[1:]):\n            return True\n    if s[:2] in E:\n        if match(s[2:]):\n            return True\n    return False\ns=input()\nif match(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "elements = [\n\t'AC','AG','AL','AM','AR','AS','AT','AU','B','BA','BE','BH','BI',\n\t'BK','BR','C','CA','CD','CE','CF','CL','CM','CN','CO','CR','CS',\n\t'CU','DB','DS','DY','ER','ES','EU','F','FE','FL','FM','FR','GA',\n\t'GD','GE','H','HE','HF','HG','HO','HS','I','IN','IR','K','KR',\n\t'LA','LI','LR','LU','LV','MC','MD','MG','MN','MO','MT','N','NA',\n\t'NB','ND','NE','NH','NI','NO','NP','O','OG','OS','P','PA','PB','PD',\n\t'PM','PO','PR','PT','PU','RA','RB','RE','RF','RG','RH','RN','RU','S',\n\t'SB','SC','SE','SG','SI','SM','SN','SR','TA','TB','TC','TE','TH','TI',\n\t'TL','TM','TS','U','V','W','XE','Y','YB','ZN','ZR']\n\ndef in_table(word):\n\tresult = False\n\tfor element in elements:\n\t\tif element == word:\n\t\t\treturn True\n\t\telse:\n\t\t\tif len(word) > len(element) and word[:len(element)] == element:\n\t\t\t\tresult = result or in_table(word[len(element):])\n\n\treturn result\n\ndef main():\n\tword = input()\n\tif in_table(word):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "elements = [\n\t'AC','AG','AL','AM','AR','AS','AT','AU','B','BA','BE','BH','BI',\n\t'BK','BR','C','CA','CD','CE','CF','CL','CM','CN','CO','CR','CS',\n\t'CU','DB','DS','DY','ER','ES','EU','F','FE','FL','FM','FR','GA',\n\t'GD','GE','H','HE','HF','HG','HO','HS','I','IN','IR','K','KR',\n\t'LA','LI','LR','LU','LV','MC','MD','MG','MN','MO','MT','N','NA',\n\t'NB','ND','NE','NH','NI','NO','NP','O','OG','OS','P','PA','PB','PD',\n\t'PM','PO','PR','PT','PU','RA','RB','RE','RF','RG','RH','RN','RU','S',\n\t'SB','SC','SE','SG','SI','SM','SN','SR','TA','TB','TC','TE','TH','TI',\n\t'TL','TM','TS','U','V','W','XE','Y','YB','ZN','ZR']\n \ndef in_table(word):\n\tresult = False\n\tfor element in elements:\n\t\tif element == word:\n\t\t\treturn True\n\t\telse:\n\t\t\tif len(word) > len(element) and word[:len(element)] == element:\n\t\t\t\tresult = result or in_table(word[len(element):])\n \n\treturn result\n \ndef main():\n\tword = input()\n\tif in_table(word):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n \ndef __starting_point():\n\tmain()\n\n__starting_point()", "s = 'H,HE,LI,BE,B,C,N,O,F,NE,NA,MG,AL,SI,P,S,CL,AR,K,CA,SC,TI,V,CR,MN,FE,CO,NI,CU,ZN,GA,GE,AS,SE,BR,KR,RB,SR,Y,ZR,NB,MO,TC,RU,RH,PD,AG,CD,IN,SN,SB,TE,I,XE,CS,BA,LA,CE,PR,ND,PM,SM,EU,GD,TB,DY,HO,ER,TM,YB,LU,HF,TA,W,RE,OS,IR,PT,AU,HG,TL,PB,BI,PO,AT,RN,FR,RA,AC,TH,PA,U,NP,PU,AM,CM,BK,CF,ES,FM,MD,NO,LR,RF,DB,SG,BH,HS,MT,DS,RG,CN,NH,FL,MC,LV,TS,OG'.split(',')\nx = input()\na = 1\nb = 0\nfor i in range(len(x)):\n\ta, b = x[i] in s and a or x[i - 1:i + 1] in s and b, a\nprint(['NO', 'YES'][a])", "els = [\"AC\",\"AG\",\"AL\",\"AM\",\"AR\",\"AS\",\"AT\",\"AU\",\"B\",\"BA\",\"BE\",\"BH\",\"BI\",\"BK\",\"BR\",\"C\",\"CA\",\"CD\",\"CE\",\"CF\",\"CL\",\"CM\",\"CN\",\"CO\",\"CR\",\"CS\",\"CU\",\"DB\",\"DS\",\"DY\",\"ER\",\"ES\",\"EU\",\"F\",\"FE\",\"FL\",\"FM\",\"FR\",\"GA\",\"GD\",\"GE\",\"H\",\"HE\",\"HF\",\"HG\",\"HO\",\"HS\",\"I\",\"IN\",\"IR\",\"K\",\"KR\",\"LA\",\"LI\",\"LR\",\"LU\",\"LV\",\"MC\",\"MD\",\"MG\",\"MN\",\"MO\",\"MT\",\"N\",\"NA\",\"NB\",\"ND\",\"NE\",\"NH\",\"NI\",\"NO\",\"NP\",\"O\",\"OG\",\"OS\",\"P\",\"PA\",\"PB\",\"PD\",\"PM\",\"PO\",\"PR\",\"PT\",\"PU\",\"RA\",\"RB\",\"RE\",\"RF\",\"RG\",\"RH\",\"RN\",\"RU\",\"S\",\"SB\",\"SC\",\"SE\",\"SG\",\"SI\",\"SM\",\"SN\",\"SR\",\"TA\",\"TB\",\"TC\",\"TE\",\"TH\",\"TI\",\"TL\",\"TM\",\"TS\",\"U\",\"V\",\"W\",\"XE\",\"Y\",\"YB\",\"ZN\",\"ZR\"]\ns = input()\n \ndef f(t):\n    if t == \"\":\n        return True\n    for p in els:\n        if t.startswith(p) and f(t[len(p):]):\n            return True\n    return False\n    \nif f(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "ele = 'H,HE,LI,BE,B,C,N,O,F,NE,NA,MG,AL,SI,P,S,CL,AR,K,CA,SC,TI,V,CR,MN,FE,CO,NI,CU,ZN,GA,GE,AS,SE,BR,KR,RB,SR,Y,ZR,NB,MO,TC,RU,RH,PD,AG,CD,IN,SN,SB,TE,I,XE,CS,BA,LA,CE,PR,ND,PM,SM,EU,GD,TB,DY,HO,ER,TM,YB,LU,HF,TA,W,RE,OS,IR,PT,AU,HG,TL,PB,BI,PO,AT,RN,FR,RA,AC,TH,PA,U,NP,PU,AM,CM,BK,CF,ES,FM,MD,NO,LR,RF,DB,SG,BH,HS,MT,DS,RG,CN,NH,FL,MC,LV,TS,OG'.split(',')\nhas = [input()]\nans = \"NO\"\nwhile len(has) > 0:\n    x = has.pop()\n    if x == \"\":\n        ans = \"YES\"\n        break\n    if x[0] in ele:\n        has.append(x[1:])\n    if len(x) > 1 and x[:2] in ele:\n        has.append(x[2:])\nprint(ans)", "s = [\"AC\", \"AG\", \"AL\", \"AM\", \"AR\", \"AS\", \"AT\", \"AU\", \"BA\", \"BE\", \"BH\", \"BI\",\n     \"BK\", \"BR\", \"B\", \"CA\", \"CD\", \"CE\", \"CF\", \"CL\", \"CM\", \"CN\", \"CO\", \"CR\",\n\t \"CS\", \"CU\", \"C\", \"DB\", \"DS\", \"DY\", \"ER\", \"ES\", \"EU\", \"FE\", \"FL\", \"FM\",\n\t \"FR\", \"F\",  \"GA\", \"GD\", \"GE\", \"HE\", \"HF\", \"HG\", \"HO\", \"HS\", \"H\", \"IN\",\n\t \"IR\", \"I\",  \"KR\", \"K\",  \"LA\", \"LI\", \"LR\", \"LU\", \"LV\", \"MC\", \"MD\", \"MG\",\n\t \"MN\", \"MO\", \"MT\", \"NA\", \"NB\", \"ND\", \"NE\", \"NH\", \"NI\", \"NO\", \"NP\", \"N\",\n\t \"OG\", \"OS\", \"O\", \"PA\", \"PB\", \"PD\", \"PM\", \"PO\", \"PR\", \"PT\", \"PU\", \"P\",\n\t \"RA\", \"RB\", \"RE\", \"RF\", \"RG\", \"RH\", \"RN\", \"RU\", \"SB\", \"SC\", \"SE\", \"SG\",\n\t \"SI\", \"SM\", \"SN\", \"SR\", \"S\", \"TA\", \"TB\", \"TC\", \"TE\", \"TH\", \"TI\", \"TL\",\n\t \"TM\", \"TS\", \"U\", \"V\",  \"W\", \"XE\", \"YB\", \"Y\",  \"ZN\", \"ZR\"]\ndef DFS(a):\n    if a is \"\":\n        return \"YES\"\n    for j in s:\n        if (len(j)==1 and a[0]==j[0] and DFS(a[1:])==\"YES\") or (len(a)>=2 and len(j)==2 and a[0]==j[0] and a[1]==j[1] and DFS(a[2:])==\"YES\"):\n            return \"YES\"\n    return \"NO\"\n \nss = input()\nprint(DFS(ss))\n", "s = 'H,HE,LI,BE,B,C,N,O,F,NE,NA,MG,AL,SI,P,S,CL,AR,K,CA,SC,TI,V,CR,MN,FE,CO,NI,CU,ZN,GA,GE,AS,SE,BR,KR,RB,SR,Y,ZR,NB,MO,TC,RU,RH,PD,AG,CD,IN,SN,SB,TE,I,XE,CS,BA,LA,CE,PR,ND,PM,SM,EU,GD,TB,DY,HO,ER,TM,YB,LU,HF,TA,W,RE,OS,IR,PT,AU,HG,TL,PB,BI,PO,AT,RN,FR,RA,AC,TH,PA,U,NP,PU,AM,CM,BK,CF,ES,FM,MD,NO,LR,RF,DB,SG,BH,HS,MT,DS,RG,CN,NH,FL,MC,LV,TS,OG'.split(\n    ',')\nx = input()\ncount1, count2 = 1, 0\nfor i in range(len(x)):\n    count1, count2 = x[i] in s and count1 or x[i - 1:i + 1] in s and count2, count1\nprint(['NO', 'YES'][count1])\n", "ele = [\"H\", \"He\", \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\", \"Ne\", \"Na\", \"Mg\", \"Al\", \"Si\", \"P\", \"S\", \"Cl\", \"Ar,A\", \"K\", \"Ca\", \"Sc\", \"Ti\", \"V\", \"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Cu\", \"Zn\", \"Ga\", \"Ge\", \"As\", \"Se\", \"Br\", \"Kr\", \"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\", \"Mo\", \"Tc\", \"Ru\", \"Rh\", \"Pd\", \"Ag\", \"Cd\", \"In\", \"Sn\", \"Sb\", \"Te\", \"I\", \"Xe\", \"Cs\", \"Ba\", \"La\", \"Ce\", \"Pr\", \"Nd\", \"Pm\", \"Sm\", \"Eu\", \"Gd\", \"Tb\", \"Dy\", \"Ho\", \"Er\", \"Tm\", \"Yb\", \"Lu\", \"Hf\", \"Ta\", \"W\", \"Re\", \"Os\", \"Ir\", \"Pt\", \"Au\", \"Hg\", \"Tl\", \"Pb\", \"Bi\", \"Po\", \"At\", \"Rn\", \"Fr\", \"Ra\", \"Ac\", \"Th\", \"Pa\", \"U\", \"Np\", \"Pu\", \"Am\", \"Cm\",\"Bk\",\"Cf\",\"Es\",\"Fm\",\"Md\",\"No\",\"Lr\",\"Rf\",\"Db\",\"Sg\",\"Bh\",\"Hs\",\"Mt\",\"Ds\",\"Rg\",\"Cn\",\"Nh\",\"Fl\",\"Mc\",\"Lv\",\"Ts\",\"Og\"]\nfor i in range(len(ele)):\n    if len(ele[i]) == 2:\n        ele[i] = ele[i][0] + chr(ord(ele[i][1]) - 32)\nele = [\"AC\",\"AG\",\"AL\",\"AM\",\"AR\",\"AS\",\"AT\",\"AU\",\"B\",\"BA\",\"BE\",\"BH\",\"BI\",\"BK\",\"BR\",\"C\",\"CA\",\"CD\",\"CE\",\"CF\",\"CL\",\"CM\",\"CN\",\"CO\",\"CR\",\"CS\",\"CU\",\"DB\",\"DS\",\"DY\",\"ER\",\"ES\",\"EU\",\"F\",\"FE\",\"FL\",\"FM\",\"FR\",\"GA\",\"GD\",\"GE\",\"H\",\"HE\",\"HF\",\"HG\",\"HO\",\"HS\",\"I\",\"IN\",\"IR\",\"K\",\"KR\",\"LA\",\"LI\",\"LR\",\"LU\",\"LV\",\"MC\",\"MD\",\"MG\",\"MN\",\"MO\",\"MT\",\"N\",\"NA\",\"NB\",\"ND\",\"NE\",\"NH\",\"NI\",\"NO\",\"NP\",\"O\",\"OG\",\"OS\",\"P\",\"PA\",\"PB\",\"PD\",\"PM\",\"PO\",\"PR\",\"PT\",\"PU\",\"RA\",\"RB\",\"RE\",\"RF\",\"RG\",\"RH\",\"RN\",\"RU\",\"S\",\"SB\",\"SC\",\"SE\",\"SG\",\"SI\",\"SM\",\"SN\",\"SR\",\"TA\",\"TB\",\"TC\",\"TE\",\"TH\",\"TI\",\"TL\",\"TM\",\"TS\",\"U\",\"V\",\"W\",\"XE\",\"Y\",\"YB\",\"ZN\",\"ZR\"]\n        \n\ns = input().strip()\n\nd = [False] * len(s) * 2\nd[0] = True\n\nfor i in range(len(s)):\n    if d[i]:\n        #print(i)\n        if s[i] > 'Z':\n            while True:\n                s += '1'\n        for e in ele:\n            if s[i] == e:\n                d[i + 1] = True\n            elif s[i:i+2] == e:\n                d[i + 2] = True\nif d[len(s)]:\n    print('YES')\nelse:\n    print('NO')", "e=input()\nd=0\ndef f(e):\n    arr= ['H','HE','LI','BE','B','C','N','O','F','NE','NA','MG','AL','SI','P','S','CL','AR','K','CA','SC','TI','V','CR','MN','FE','CO','NI','CU','ZN','GA','GE','AS','SE','BR','KR','RB','SR','Y','ZR','NB','MO','TC','RU','RH','PD','AG','CD','IN','SN','SB','TE','I','XE','CS','BA','LA','CE','PR','ND','PM','SM','EU','GD','TB','DY','HO','ER','TM','YB','LU','HF','TA','W','RE','OS','IR','PT','AU','HG','TL','PB','BI','PO','AT','RN','FR','RA','AC','TH','PA','U','NP','PU','AM','CM','BK','CF','ES','FM','MD','NO','LR','RF','DB','SG','BH','HS','MT','DS','RG','CN','NH','FL','MC','LV','TS','OG']\n    if(e==''):\n        return True\n    if(e[0] in arr):\n        if(f(e[1:]) is True):\n           return True\n    if(e[0:2] in arr):\n        if(f(e[2:])is True):\n           return True\n    return False\nif(f(e) is True):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s = \"\"\"\n\nHydrogen\tH\tNiobium\tNb\tThallium\tTl\nHelium\tHe\tMolybdenum\tMo\tLead\tPb\nLithium\tLi\tTechnetium\tTc\tBismuth\tBi\nBeryllium\tBe\tRuthenium\tRu\tPolonium\tPo\nBoron\tB\tRhodium\tRh\tAstatine\tAt\nCarbon\tC\tPalladium\tPd\tRadon\tRn\nNitrogen\tN\tSilver\tAg\tFrancium\tFr\nOxygen\tO\tCadmium\tCd\tRadium\tRa\nFluorine\tF\tIndium\tIn\tActinium\tAc\nNeon\tNe\tTin\tSn\tThorium\tTh\nSodium\tNa\tAntimony\tSb\tProtactinium\tPa\nMagnesium\tMg\tTellurium\tTe\tUranium\tU\nAluminum\tAl\tIodine\tI\tNeptunium\tNp\nSilicon\tSi\tXenon\tXe\tPlutonium\tPu\nPhosphorus\tP\tCesium\tCs\tAmericium\tAm\nSulfur\tS\tBarium\tBa\tCurium\tCm\nChlorine\tCl\tLanthanum\tLa\tBerkelium\tBk\nArgon\tAr\tCerium\tCe\tCalifornium\tCf\nPotassium\tK\tPraseodymium\tPr\tEinsteinium\tEs\nCalcium\tCa\tNeodymium\tNd\tFermium\tFm\nScandium\tSc\tPromethium\tPm\tMendelevium\tMd\nTitanium\tTi\tSamarium\tSm\tNobelium\tNo\nVanadium\tV\tEuropium\tEu\tLawrencium\tLr\nChromium\tCr\tGadolinium\tGd\tRutherfordium\tRf\nManganese\tMn\tTerbium\tTb\tDubnium\tDb\nIron\tFe\tDysprosium\tDy\tSeaborgium\tSg\nCobalt\tCo\tHolmium\tHo\tBohrium\tBh\nNickel\tNi\tErbium\tEr\tHassium\tHs\nCopper\tCu\tThulium\tTm\tMeitnerium\tMt\nZinc\tZn\tYtterbium\tYb\tDarmstadtium\tDs\nGallium\tGa\tLutetium\tLu\tRoentgenium\tRg\nGermanium\tGe\tHafnium\tHf\tCopernicium\tCn\nArsenic\tAs\tTantalum\tTa\tNihonium\tNh\nSelenium\tSe\tTungsten\tW\tFlerovium\tFl\nBromine\tBr\tRhenium\tRe\tMoscovium\tMc\nKrypton\tKr\tOsmium\tOs\tLivermorium\tLv\nRubidium\tRb\tIridium\tIr\tTennessine\tTs\nStrontium\tSr\tPlatinum\tPt\tOganesson\tOg\nYttrium\tY\tGold\tAu\nZirconium\tZr\tMercury\tHg\n\"\"\"\nelems = []\nfor idx, token in enumerate(s.split()):\n  if idx % 2 == 1:\n    elems.append(token.upper())\n\n\ndef check(s):\n  if not s:\n    return True\n  for idx in range(len(s)):\n    if s[idx:] in elems and check(s[:idx]):\n      return True\n  return False\n\ns = input()\nif check(s):\n  print(\"YES\")\nelse:\n  print(\"NO\")\n", "s = 'H,HE,LI,BE,B,C,N,O,F,NE,NA,MG,AL,SI,P,S,CL,AR,K,CA,SC,TI,V,CR,MN,FE,CO,NI,CU,ZN,GA,GE,AS,SE,BR,KR,RB,SR,Y,ZR,NB,MO,TC,RU,RH,PD,AG,CD,IN,SN,SB,TE,I,XE,CS,BA,LA,CE,PR,ND,PM,SM,EU,GD,TB,DY,HO,ER,TM,YB,LU,HF,TA,W,RE,OS,IR,PT,AU,HG,TL,PB,BI,PO,AT,RN,FR,RA,AC,TH,PA,U,NP,PU,AM,CM,BK,CF,ES,FM,MD,NO,LR,RF,DB,SG,BH,HS,MT,DS,RG,CN,NH,FL,MC,LV,TS,OG'.split(\n    ',')\nx = input()\ncount1, count2 = 1, 0\nfor i in range(len(x)):\n    count1, count2 = x[i] in s and count1 or x[i - 1:i + 1] in s and count2, count1\nprint(['NO', 'YES'][count1])", "E = setn\nq = input()\nn = len(q)\nok = [0] * (n + 1)\nok[0] = 1\nfor i in range(n):\n    if q[i] in E:\n        ok[i + 1] = ok[i]\n    if i > 0 and q[i - 1:i + 1] in E:\n        ok[i + 1] = max(ok[i + 1], ok[i - 1])\nprint('YES' if ok[n] else 'NO')\n", "import re\nif re.match( r'^(H|HE|LI|BE|B|C|N|O|F|NE|NA|MG|AL|SI|P|S|CL|AR|K|CA|SC|TI|V|CR|MN|FE|CO|NI|CU|ZN|GA|GE|AS|SE|BR|KR|RB|SR|Y|ZR|NB|MO|TC|RU|RH|PD|AG|CD|IN|SN|SB|TE|I|XE|CS|BA|LA|CE|PR|ND|PM|SM|EU|GD|TB|DY|HO|ER|TM|YB|LU|HF|TA|W|RE|OS|IR|PT|AU|HG|TL|PB|BI|PO|AT|RN|FR|RA|AC|TH|PA|U|NP|PU|AM|CM|BK|CF|ES|FM|MD|NO|LR|RF|DB|SG|BH|HS|MT|DS|RG|CN|NH|FL|MC|LV|TS|OG)*$', input()):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "elements = set([\n\t'Ac','Ag','Al','Am','Ar','As','At','Au','B','Ba','Be','Bh','Bi','Bk','Br','C',\n\t'Ca','Cd','Ce','Cf','Cl','Cm','Cn','Co','Cr','Cs','Cu','Db','Ds','Dy','Er',\n\t'Es','Eu','F','Fe','Fl','Fm','Fr','Ga','Gd','Ge','H','He','Hf','Hg','Ho','Hs',\n\t'I','In','Ir','K','Kr','La','Li','Lr','Lu','Lv','Mc','Md','Mg','Mn','Mo','Mt',\n\t'N','Na','Nb','Nd','Ne','Nh','Ni','No','Np','O','Og','Os','P','Pa','Pb','Pd',\n\t'Pm','Po','Pr','Pt','Pu','Ra','Rb','Re','Rf','Rg','Rh','Rn','Ru','S','Sb',\n\t'Sc','Se','Sg','Si','Sm','Sn','Sr','Ta','Tb','Tc','Te','Th','Ti','Tl','Tm',\n\t'Ts','U','V','W','Xe','Y','Yb','Zn','Zr'\n])\n \nelem = list(map(lambda x: x.upper(), elements))\n \ndef find(s):\n\tif s == \"\": \n\t\treturn True\n \n\tif s[0] in elem:\n\t\tif find(s[1:]):\n\t\t\treturn True\n \n\tif s[0:2] in elem:\n\t\tif find(s[2:]):\n\t\t\treturn True\n\treturn False\n\nif find(input()):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "E = setn\nq = input()\nn = len(q)\nok = [0] * (n + 1)\nok[0] = 1\nfor i in range(n):\n    if q[i] in E:\n        ok[i + 1] = ok[i]\n    if i > 0 and q[i - 1:i + 1] in E:\n        ok[i + 1] = max(ok[i + 1], ok[i - 1])\nprint('YES' if ok[n] else 'NO')", "import os\nimport sys\nfrom io import BytesIO, IOBase\nimport heapq as h \nfrom bisect import bisect_left\n\nfrom types import GeneratorType\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        import os\n        self.os = os\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = self.os.read(self._fd, max(self.os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            self.os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \nimport time\nstart_time = time.time()\n\nimport collections as col\nimport math, string\nfrom functools import reduce\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input()\n\ndef listStr():\n    return list(input())\n\nMOD = 10**9+7\n\n\"\"\"\n\n\"\"\"\ndef solve():\n    els = [\"H\",\"He\",\"Li\",\"Be\",\"B\",\"C\",\"N\",\"O\",\"F\",\"Ne\",\"Na\",\"Mg\",\"Al\",\"Si\",\"P\",\"S\",\"Cl\",\"Ar\",\"K\",\"Ca\",\"Sc\",\"Ti\",\"V\",\"Cr\",\"Mn\",\"Fe\",\"Co\",\"Ni\",\"Cu\",\"Zn\",\"Ga\",\"Ge\",\"As\",\"Se\",\"Br\",\"Kr\",\"Rb\",\"Sr\",\"Y\",\"Zr\",\"Nb\",\"Mo\",\"Tc\",\"Ru\",\"Rh\",\"Pd\",\"Ag\",\"Cd\",\"In\",\"Sn\",\"Sb\",\"Te\",\"I\",\"Xe\",\"Cs\",\"Ba\",\"La\",\"Ce\",\"Pr\",\"Nd\",\"Pm\",\"Sm\",\"Eu\",\"Gd\",\"Tb\",\"Dy\",\"Ho\",\"Er\",\"Tm\",\"Yb\",\"Lu\",\"Hf\",\"Ta\",\"W\",\"Re\",\"Os\",\"Ir\",\"Pt\",\"Au\",\"Hg\",\"Tl\",\"Pb\",\"Bi\",\"Po\",\"At\",\"Rn\",\"Fr\",\"Ra\",\"Ac\",\"Th\",\"Pa\",\"U\",\"Np\",\"Pu\",\"Am\",\"Cm\",\"Bk\",\"Cf\",\"Es\",\"Fm\",\"Md\",\"No\",\"Lr\",\"Rf\",\"Db\",\"Sg\",\"Bh\",\"Hs\",\"Mt\",\"Ds\",\"Rg\",\"Cn\",\"Nh\",\"Fl\",\"Mc\",\"Lv\",\"Ts\",\"Og\"]\n    for i, el in enumerate(els):\n        els[i] = el.upper()\n    dp = [True]\n    S = getStr()\n    for i in range(len(S)):\n        if len(dp) == 1:\n            dp.append(dp[-1] and (S[i].upper() in els))\n        else:\n            dp.append((dp[-1] and S[i].upper() in els) or (dp[-2] and S[i-1:i+1].upper() in els))\n    return \"YES\" if dp[len(S)] else \"NO\"\n    \n    \n#for _ in range(getInt()):    \nprint(solve())"]