["import bisect\nimport collections\n\n\ndef solve(inp, *args):\n    n, x = list(map(int, inp.split(\" \", 1)))\n    travels_by_len = collections.defaultdict(list)\n    travels_by_len_processed = {}\n    for travel in args:\n        l, r, cost = list(map(int, travel.split(\" \", 2)))\n        travels_by_len[r - l + 1].append((l, r, cost))\n    for travel_len, travels in list(travels_by_len.items()):\n        travels.sort()\n        travels_processed = [(travels[-1][0], travels[-1][2])]\n        for i in range(len(travels) - 2, -1, -1):\n            prev_travel = travels_processed[-1]\n            l, r, c = travels[i]\n            travels_processed.append((l, min(c, prev_travel[1])))\n        travels_by_len_processed[travel_len] = travels_processed[::-1]\n\n    best_price = float(\"inf\")\n    for first_travel_len, first_travels in list(travels_by_len.items()):\n        second_travel_len = x - first_travel_len\n        second_travels_processed = travels_by_len_processed.get(second_travel_len, [])\n        for first_travel in first_travels:\n            l1, r1, c1 = first_travel\n            # now we look for cheapest travels which have l2 > r1\n            idx = bisect.bisect_right(second_travels_processed, (r1, float(\"inf\")))\n            if 0 <= idx < len(second_travels_processed):\n                best_price = min(best_price, c1 + second_travels_processed[idx][1])\n    return -1 if best_price == float(\"inf\") else best_price\n\n\ndef __starting_point():\n    inp = input()\n    n, x = list(map(int, inp.split(\" \", 1)))\n    print(solve(inp, *(input() for i in range(n))))\n\n__starting_point()", "import sys\n\ndef main():\n    n,x = map(int,sys.stdin.readline().split())\n    al = []\n    starts = []\n    finishes = []\n    y = [-1] * 200002\n    for i in range(n):\n        a,b,c = map(int, sys.stdin.readline().split())\n        al.append((a,b,c))\n        starts.append((a,i))\n        finishes.append((b,i))\n\n    finishes = sorted(finishes, key=lambda x: x[0])\n    starts = sorted(starts, key=lambda x: x[0])\n    j =0\n    \n    res = 3*(10**9)\n    for i in range(n):\n        while j<n and starts[j][0] <= finishes[i][0]:\n            c = starts[j][1]\n            h = al[c][1] -al[c][0]+1\n            cost = al[c][2]\n            if y[x-h]!= -1 and y[x-h] + cost < res:\n                res = y[x-h] + cost\n            j+=1\n        c = finishes[i][1]\n        h = al[c][1] - al[c][0]+1\n        cost = al[c][2]\n        if y[h]== -1 or y[h] > cost:\n            y[h] = cost\n\n    if res == 3*(10**9):\n        print(-1)\n    else:\n        print(res)\n\n\nmain()", "from sys import stdin, stdout\n\nn, x = map(int, stdin.readline().split())\nlength = [[] for i in range(x + 1)]\nmins = [[] for i in range(x + 1)]\nchallengers = []\n\nfor i in range(n):\n    l, r, v = map(int, stdin.readline().split())\n    \n    if (r - l < x):\n        length[r - l + 1].append((l, v))\n\nfor i in range(1, x + 1):\n    if not len(length[i]):\n        continue\n    else:\n        length[i].sort()\n        mn = length[i][-1][-1]\n        mins[i].append(mn)\n        \n        for j in range(len(length[i]) - 2, -1, -1):\n            mn = min(mn, length[i][j][-1])\n            mins[i].append(mn)\n        \n        mins[i] = mins[i][::-1]\n\n\nINF = float('inf')\nans = INF\n\nfor i in range(1, x + 1):\n    if not len(length[i]) or not len(length[x - i]):\n        continue\n    \n    for j in range(len(length[i])):\n        pos, v = length[i][j]\n        \n        l, r = -1, len(length[x - i])\n        while (r - l > 1):\n            m = (r + l) // 2\n            \n            if length[x - i][m][0] > pos + i - 1:\n                r = m\n            else:\n                l = m\n                \n        if r != len(length[x - i]):\n            ans = min(ans, v + mins[x - i][r])\n\n\nif ans == INF:\n    stdout.write('-1')\nelse:\n    stdout.write(str(ans))", "import sys\n\ndef main():\n    n,x = map(int,sys.stdin.readline().split())\n    al = []\n    starts = []\n    finishes = []\n    y = [-1] * 200002\n    for i in range(n):\n        a,b,c = map(int, sys.stdin.readline().split())\n        al.append((a,b,c))\n        starts.append((a,i))\n        finishes.append((b,i))\n\n    finishes = sorted(finishes, key=lambda x: x[0])\n    starts = sorted(starts, key=lambda x: x[0])\n    j =0\n    \n    res = 3*(10**9)\n    for i in range(n):\n        while j<n and starts[j][0] <= finishes[i][0]:\n            c = starts[j][1]\n            h = al[c][1] -al[c][0]+1\n            cost = al[c][2]\n            if y[x-h]!= -1 and y[x-h] + cost < res:\n                res = y[x-h] + cost\n            j+=1\n        c = finishes[i][1]\n        h = al[c][1] - al[c][0]+1\n        cost = al[c][2]\n        if y[h]== -1 or y[h] > cost:\n            y[h] = cost\n\n    if res == 3*(10**9):\n        print(-1)\n    else:\n        print(res)\n\n\nmain()", "import sys\n\n#def main():\nif 1==1:\n    n,x = list(map(int,sys.stdin.readline().split()))\n    al = []\n    starts = []\n    finishes = []\n    y = [-1] * 200002\n    for i in range(n):\n        a,b,c = list(map(int, sys.stdin.readline().split()))\n        al.append((a,b,c))\n        starts.append((a,i))\n        finishes.append((b,i))\n\n    finishes = sorted(finishes, key=lambda x: x[0])\n    starts = sorted(starts, key=lambda x: x[0])\n    j =0\n    \n    res = 3*(10**9)\n    for i in range(n):\n        while j<n and starts[j][0] <= finishes[i][0]:\n            c = starts[j][1]\n            h = al[c][1] -al[c][0]+1\n            cost = al[c][2]\n            if y[x-h]!= -1 and y[x-h] + cost < res:\n                res = y[x-h] + cost\n            j+=1\n        c = finishes[i][1]\n        h = al[c][1] - al[c][0]+1\n        cost = al[c][2]\n        if y[h]== -1 or y[h] > cost:\n            y[h] = cost\n\n    if res == 3*(10**9):\n        print(-1)\n    else:\n        print(res)\n\n\n#main()\n", "import sys\n\ndef main():\n    n,x = map(int,sys.stdin.readline().split())\n    al = []\n    starts = []\n    finishes = []\n    y = [-1 for i in range(200002)]\n    for i in range(n):\n        a,b,c = map(int, sys.stdin.readline().split())\n        al.append((a,b,c))\n        starts.append((a,i))\n        finishes.append((b,i))\n\n    finishes = sorted(finishes, key=lambda x: x[0])\n    starts = sorted(starts, key=lambda x: x[0])\n    j =0\n    \n    res = 3*(10**9)\n    for i in range(n):\n        while j<n and starts[j][0] <= finishes[i][0]:\n            c = starts[j][1]\n            h = al[c][1] -al[c][0]+1\n            cost = al[c][2]\n            if y[x-h]!= -1 and y[x-h] + cost < res:\n                res = y[x-h] + cost\n            j+=1\n        c = finishes[i][1]\n        h = al[c][1] - al[c][0]+1\n        cost = al[c][2]\n        if y[h]== -1 or y[h] > cost:\n            y[h] = cost\n\n    if res == 3*(10**9):\n        print(-1)\n    else:\n        print(res)\n\n\nmain()", "n,x=list(map(int,input().split()))\nV=[]\nfor i in range(x+1):\n    V.append([])\nfor i in range(n):\n    l,r,c=list(map(int,input().split()))\n    if r-l+1>x:\n        continue\n    V[r-l+1].append((l,c))\nfor i in range(x+1):\n    V[i]=sorted(V[i],key=lambda a:a[0])\nans=int(3e9+7)\nfor i in range(x+1):\n    mn=int(3e9+7)\n    k=0\n    for j in range(len(V[i])):\n        while k!=len(V[x-i]) and V[x-i][k][0]+(x-i)-1<V[i][j][0]:\n            mn=min(mn,V[x-i][k][1])\n            k+=1\n        ans=min(ans,mn+V[i][j][1])\nif ans==int(3e9+7):\n    print(-1)\nelse:\n    print(ans)\n", "n,x=list(map(int,input().split()))\nV=[]\nfor i in range(x+1):\n    V.append([])\nfor i in range(n):\n    l,r,c=list(map(int,input().split()))\n    if r-l+1>x:\n        continue\n    V[r-l+1].append((l,c))\nfor i in range(x+1):\n    V[i]=sorted(V[i],key=lambda a:a[0])\nans=int(3e9+7)\nfor i in range(x+1):\n    mn=int(3e9+7)\n    k=0\n    for j in range(len(V[i])):\n        while k!=len(V[x-i]) and V[x-i][k][0]+(x-i)-1<V[i][j][0]:\n            mn=min(mn,V[x-i][k][1])\n            k+=1\n        ans=min(ans,mn+V[i][j][1])\nif ans==int(3e9+7):\n    print(-1)\nelse:\n    print(ans)\n", "n,x=list(map(int,input().split()))\nV=[]\nfor i in range(x+1):\n    V.append([])\nfor i in range(n):\n    l,r,c=list(map(int,input().split()))\n    if r-l+1<=x:\n        V[r-l+1].append([l,r,c])\nfor i in range(x+1):\n    V[i]=sorted(V[i])\nans=int(3e9+7)\nfor i in range(x+1):\n    mn=int(3e9+7)\n    p=0\n    k=0\n    for j in range(len(V[i])):\n        while k!=len(V[x-i]) and V[i][j][0]>V[x-i][k][1] :\n            mn=min(mn,V[x-i][k][2])\n            k=k+1\n        ans=min(ans,mn+V[i][j][2])\nif ans==int(3e9+7):\n    print(-1)\nelse:\n    print(ans)\n", "#created by BinZhaO\nn,x=list(map(int,input().split()))\nV=[]\nfor i in range(x+1):\n    V.append([])\nfor i in range(n):\n    l,r,c=list(map(int,input().split()))\n    if r-l+1<=x:\n        V[r-l+1].append([l,r,c])\nfor i in range(x+1):\n    V[i]=sorted(V[i])\nans=int(3e9+7)\nfor i in range(x+1):\n    mn=int(3e9+7)\n    p=0\n    k=0\n    for j in range(len(V[i])):\n        while k!=len(V[x-i]) and V[i][j][0]>V[x-i][k][1] :\n            mn=min(mn,V[x-i][k][2])\n            k=k+1\n        ans=min(ans,mn+V[i][j][2])\nif ans==int(3e9+7):\n    print(-1)\nelse:\n    print(ans)\n", "def main():\n    n, x = list(map(int, input().split()))\n    vouchers = [False] * x\n    for _ in range(n):\n        lo, hi, cost = list(map(int, input().split()))\n        w = hi - lo\n        if w < x:\n            l = vouchers[w]\n            if l:\n                l.append((lo, cost))\n            else:\n                vouchers[w] = [(lo, cost)]\n    best = inf = 1 << 31\n    x -= 2\n    if not x & 1 and vouchers[x // 2]:\n        lh, h = vouchers[x // 2], None\n        for f in lh.sort, lh.reverse:\n            l = h\n            f()\n            h, b = [], inf\n            for lo, cost in lh:\n                if b > cost:\n                    b = cost\n                    h.append((lo, b))\n        b, v = h.pop()\n        for a, u in l:\n            a += w\n            while a >= b and h:\n                b, v = h.pop()\n            if a < b and best > u + v:\n                best = u + v\n    for w, l, h in zip(list(range(x)), vouchers, vouchers[x:x // 2:-1]):\n        if l and h:\n            m = []\n            for lh in l, h:\n                for f in lh.sort, lh.reverse:\n                    f()\n                    t, b = [], inf\n                    for lo, cost in lh:\n                        if b > cost:\n                            b = cost\n                            t.append((lo, b))\n                    m.append(t)\n            for l, h in (m[0], m[3]), (m[2], m[1]):\n                b, v = h.pop()\n                for a, u in l:\n                    a += w\n                    while a >= b and h:\n                        b, v = h.pop()\n                    if a < b and best > u + v:\n                        best = u + v\n                w = x - w\n    print(best if best < inf else -1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,x=list(map(int,input().split()))\na=[]\nfor i in range(x+1):a.append([])\n#\u0434\u0435\u043b\u0430\u0435\u043c \u0433\u0435\u0440\u043b\u044f\u043d\u0434\u0443 \u0445\u0435\u0448\u0435\u043c \u043f\u043e \u0434\u043b\u0438\u043d\u0430\u043c (\u043d\u0435 \u0431\u0435\u0440\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e\u0435)\nfor i in range(n):\n    L,R,C=list(map(int,input().split()))\n    if R-L+1>x:continue\n    a[R-L+1].append([L,R,C])\n#\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u043b\u0435\u0432\u044b\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\nfor i in range(x+1):a[i]=sorted(a[i])\n\nans=int(3e9+1)\nfor i in range(x+1):\n    m=int(3e9+1)\n    z=0\n    for j in range(len(a[i])):\n        while z!=len(a[x-i]) and a[i][j][0]>a[x-i][z][1]:\n            m=min(m,a[x-i][z][2])\n            z+=1\n        ans=min(ans,m+a[i][j][2])\nif ans==int(3e9+1):\n    print(-1)\nelse:\n    print(ans)\n", "from math import inf\n\nn, x = list(map(int, input().split()))\n\na = []\nbest = [inf for i in range(2 * (10**5) + 1)]\nans = inf\n\nfor i in range(n):\n    l, r, cost = list(map(int, input().split()))\n\n    a.append((l, cost, r-l+1, True))\n    a.append((r, cost, r-l+1, False))\n\na.sort(key=lambda element: 10 * element[0] + 1 - int(element[3]))\n\nfor item in a:\n    if item[3] and x > item[2]:\n        ans = min(ans, item[1] + best[x - item[2]])\n\n    if not item[3]:\n        best[item[2]] = min(best[item[2]], item[1])\n\n\nprint(ans if ans != inf else -1)\n", "n, x = map(int, input().split())\ndata = []\nfor i in range(x + 1):\n    data.append([])\nfor i in range(n):\n    l, r, c = map(int, input().split())\n    if r - l + 1 <= x:\n        data[r - l + 1].append([l, r, c])\nfor i in range(x + 1):\n    data[i].sort()\n\nanswer = int(3e9+7)\nfor i in range(x + 1):\n    k, b = 0, int(3e9+7)\n    for j in range(len(data[i])):\n        while k != len(data[x - i]) and data[i][j][0] > data[x - i][k][1]:\n            b = min(b, data[x - i][k][2])\n            k += 1\n        answer = min(answer, b + data[i][j][2])\n        \n\nif answer == int(3e9+7):\n    print(-1)\nelse:\n    print(answer)", "n, x = map(int, input().split())\ndata = []\nfor i in range(x + 1):\n    data.append([])\nfor i in range(n):\n    l, r, c = map(int, input().split())\n    if r - l + 1 <= x:\n        data[r - l + 1].append([l, r, c])\nfor i in range(x + 1):\n    data[i].sort()\n\nanswer = 9 * 10 ** 12\nfor i in range(x + 1):\n    k, b = 0, int(9 * 10 ** 12)\n    for j in range(len(data[i])):\n        while k != len(data[x - i]) and data[i][j][0] > data[x - i][k][1]:\n            b = min(b, data[x - i][k][2])\n            k += 1\n        answer = min(answer, b + data[i][j][2])\n        \n\nif answer == int(9 * 10 ** 12):\n    print(-1)\nelse:\n    print(answer)", "n,x=map(int,input().split())\nV=[]\nfor i in range(x+1):\n    V.append([])\nfor i in range(n):\n    l,r,c=map(int,input().split())\n    if r-l+1>x:\n        continue\n    V[r-l+1].append((l,c))\nfor i in range(x+1):\n    V[i]=sorted(V[i],key=lambda a:a[0])\nans=int(3e9+7)\nfor i in range(x+1):\n    mn=int(3e9+7)\n    k=0\n    for j in range(len(V[i])):\n        while k!=len(V[x-i]) and V[x-i][k][0]+(x-i)-1<V[i][j][0]:\n            mn=min(mn,V[x-i][k][1])\n            k+=1\n        ans=min(ans,mn+V[i][j][1])\nif ans==int(3e9+7):\n    print(-1)\nelse:\n    print(ans)", "(n, x) = [int(x) for x in input().split()]\n\nl_ind = [[] for i in range(200000)]\nr_ind = [[] for i in range(200000)]\n\nfor i in range(n):\n    (l, r, c) = [int(x) for x in input().split()]\n    if r - l + 1 <= x:\n        l_ind[l - 1].append((l, r, c))\n        r_ind[r - 1].append((l, r, c))\n\n\nans = None\n\nbestCost = [None for i in range(x + 1)]\n\nfor (vl, vr) in zip(l_ind, r_ind):\n    for (l, r, c) in vl:\n        cur_len = r - l + 1\n        if bestCost[x - cur_len]:\n            if ans:\n                ans = min(ans, c + bestCost[x - cur_len])\n            else:\n                ans = c + bestCost[x - cur_len]\n    for (l, r, c) in vr:\n        cur_len = r - l + 1\n        if bestCost[cur_len]:\n            bestCost[cur_len] = min(bestCost[cur_len], c)\n        else:\n            bestCost[cur_len] = c\n\n\nif ans == None:\n    print(-1)\nelse:\n    print(ans)\n", "n, x = map(int, input().split())\ndata = []\nfor i in range(x + 1):\n    data.append([])\nfor i in range(n):\n    l, r, c = map(int, input().split())\n    if r - l + 1 <= x:\n        data[r - l + 1].append([l, r, c])\nfor i in range(x + 1):\n    data[i].sort()\n\n\nanswer = int(20000000000)\nfor i in range(x + 1):\n    k, b = 0, int(20000000000)\n    for j in range(len(data[i])):\n        while k != len(data[x - i]) and( data[i][j][0] > data[x - i][k][1] ):\n            b = min(b, data[x - i][k][2])\n            k += 1\n        answer = min(answer, b + data[i][j][2])\n\nif answer == int(20000000000):\n    print(-1)\nelse:\n    print(answer)", "n,x=map(int,input().split())\nV=[]\nfor i in range(x+1):\n    V.append([])\nfor i in range(n):\n    l,r,c=map(int,input().split())\n    if r-l+1>x:\n        continue\n    V[r-l+1].append((l,c))\nfor i in range(x+1):\n    V[i]=sorted(V[i],key=lambda a:a[0])\nans=int(3e9+7)\nfor i in range(x+1):\n    mn=int(3e9+7)\n    k=0\n    for j in range(len(V[i])):\n        while k!=len(V[x-i]) and V[x-i][k][0]+(x-i)-1<V[i][j][0]:\n            mn=min(mn,V[x-i][k][1])\n            k+=1\n        ans=min(ans,mn+V[i][j][1])\nif ans==int(3e9+7):\n    print(-1)\nelse:\n    print(ans)", "n,x=map(int,input().split())\nV=[]\nfor i in range(x+1):\n    V.append([])\nfor i in range(n):\n    l,r,c=map(int,input().split())\n    if r-l+1<=x:\n        V[r-l+1].append([l,r,c])\nfor i in range(x+1):\n    V[i]=sorted(V[i])\nans=int(3e9+7)\nfor i in range(x+1):\n    mn=int(3e9+7)\n    p=0\n    k=0\n    for j in range(len(V[i])):\n        while k!=len(V[x-i]) and V[i][j][0]>V[x-i][k][1] :\n            mn=min(mn,V[x-i][k][2])\n            k=k+1\n        ans=min(ans,mn+V[i][j][2])\nif ans==int(3e9+7):\n    print(-1)\nelse:\n    print(ans)", "from bisect import bisect_left\nf = lambda: map(int, input().split())\nn, x = f()\ns, t = {}, {}\nfor i in range(n):\n    l, r, c = f()\n    d = r - l\n    if d not in s: s[d] = []\n    s[d].append((l, c))\nfor d, p in s.items():\n    p.sort(key=lambda q: q[0])\n    q = t[d] = [[l, c] for l, c in p]\n    for i in range(1, len(q))[::-1]:\n        q[i - 1][1] = min(q[i - 1][1], q[i][1])\nm = 3e9\nfor d in s:\n    p = t.get(x - 2 - d, [])\n    if p:\n        for l, c in s[d]:\n            i = bisect_left(p, [l + d + 1, 0])\n            if i < len(p): m = min(m, c + p[i][1])\nprint(-1 if m == 3e9 else m)", "f = lambda: map(int, input().split())\nn, x = f()\ns = [[] for i in range(x - 1)]\nfor d in range(n):\n    l, r, c = f()\n    if r - l < x - 1: s[r - l].append((l, c))\nfor t in s: t.sort(key=lambda q: q[0])\nm = 3e9\nfor d, t in enumerate(s):\n    D = x - 2 - d\n    i, T = 0, s[D]\n    M = 3e9\n    for l, c in t:\n        while i < len(T) and l > T[i][0] + D:\n            M = min(M, T[i][1])\n            i += 1\n        m = min(m, c + M)\nprint(-1 if m == 3e9 else m)", "f = lambda: list(map(int, input().split()))\nn, x = f()\ns = [[] for i in range(x - 1)]\nfor d in range(n):\n    l, r, c = f()\n    if r - l < x - 1: s[r - l].append((l, c))\nfor t in s: t.sort(key=lambda q: q[0])\nm = 3e9\nfor d, t in enumerate(s):\n    D = x - 2 - d\n    i, T = 0, s[D]\n    M = 3e9\n    for l, c in t:\n        while i < len(T) and l > T[i][0] + D:\n            M = min(M, T[i][1])\n            i += 1\n        m = min(m, c + M)\nprint(-1 if m == 3e9 else m)\n", "f = lambda: list(map(int, input().split()))\nn, x = f()\ns = [[] for i in range(x - 1)]\nfor d in range(n):\n    l, r, c = f()\n    if r - l < x - 1: s[r - l] += [[l,c]]\nfor t in s: t.sort(key=lambda q: q[0])\nm = 3e9\nfor d, t in enumerate(s):\n    D = x - 2 - d\n    i, T = 0, s[D]\n    M = 3e9\n    for l, c in t:\n        while i < len(T) and l > T[i][0] + D:\n            M = min(M, T[i][1])\n            i += 1\n        m = min(m, c + M)\nprint(-1 if m == 3e9 else m)\n", "f = lambda: list(map(int, input().split()))\nn, x = f()\ns = [[] for i in range(x - 1)]\nfor d in range(n):\n    l, r, c = f()\n    if r - l < x - 1: s[r - l].append((l, c))\nfor t in s: t.sort(key=lambda q: q[0])\nm = 3e9\nfor d, t in enumerate(s):\n    D = x - 2 - d\n    i, T = 0, s[D]\n    M = 3e9\n    for l, c in t:\n        while i < len(T) and l > T[i][0] + D:\n            M = min(M, T[i][1])\n            i += 1\n        m = min(m, c + M)\nprint(-1 if m == 3e9 else m)\n\n\n\n\n# Made By Mostafa_Khaled\n"]