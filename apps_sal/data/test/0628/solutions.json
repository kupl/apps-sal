["#!/usr/bin/env python3\n\n[n, k] = list(map(int, input().strip().split()))\nais = list(map(int, input().strip().split()))\niais = [0 for _ in range(n + 1)]\nfor i in range(n):\n\tiais[i + 1] = iais[i] + ais[i]\n\ndef calc(k, split):\n\tres = 0\n\tfor i in range(k):\n\t\tres &= iais[split[i + 1]] - iais[split[i]]\n\treturn res\n\ndef check_mask(mask):\n\tdp = [[False for j in range(n + 1)] for i in range(k + 1)]\n\n\tfor j in range(1, n - k + 1 + 1):\n\t\tdp[1][j] = (iais[j] & mask == mask)\n\tif not any(dp[1]):\n\t\treturn False\n\n\tfor i in range(2, k + 1):\n\t\tfor j in range(i, n - (k - i) + 1):\n\t\t\tdp[i][j] = any(dp[i - 1][r] and ((iais[j] - iais[r]) & mask == mask) for r in range(i - 1, j - 1 + 1))\n\t\tif not any(dp[i]):\n\t\t\treturn False\n\n\treturn dp[k][n]\n\n\nmask = 0\nfor i in range(55, -1, -1):\n\tif check_mask(mask | (1 << i)):\n\t\tmask |= 1 << i\n\nprint (mask)\n\n", "import time;\ndef getIntList():\n    return list(map(int, input().split()));\n\ndef getTransIntList(n):\n    first = getIntList();\n    m = len(first);\n    result = [[0] * n for _ in range(m)];\n    for i in range(m):\n        result[i][0] = first[i];\n    for j in range(1, n):\n        curr = getIntList();\n        for i in range(m):\n            result[i][j] = curr[i];\n    return result;\nn, k = getIntList();\na = getIntList();\n#sums[i][j] - \u0441\u0443\u043c\u043c\u0430 a \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u043e\u0442 i \u0434\u043e j \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044f j\nsums = [[0]*(n+1) for _ in range(n+1)];\nfor i in range(n):\n    for j in range(i+1, n+1):\n        sums[i][j]=sums[i][j-1]+a[j-1];\nclass SearchProblem:\n    def __init__(self, a, n, k, tiLim):\n        self.a=a;\n        self.n=n;\n        self.k=k;\n        self.maxResult=0;\n        self.tiLim=time.time()+tiLim;\n    def search(self, currResult, currIndex, currLines):\n        #\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u0448\u043b\u043e - \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u043c.\n        if time.time()>self.tiLim:\n            return;\n        if currLines>0 and currResult<=self.maxResult:\n            return;\n        if currLines==self.k-1:\n            lastSum = sums[currIndex][self.n];\n            currResult = currResult & lastSum;\n            if currResult > self.maxResult:\n                self.maxResult = currResult;\n        for nextIndex in range(currIndex+1, self.n+1):\n            currSum=sums[currIndex][nextIndex];\n            if currLines==0:\n                nextResult=currSum\n            else:\n                nextResult=currResult & currSum;\n            self.search(nextResult, nextIndex, currLines+1);\n        flag=True;\n        if time.time() > self.tiLim:\n            flag=False;\n        return self.maxResult, flag;\n#upLim[i][j] - \u043e\u0446\u0435\u043d\u043a\u0430 \u0441\u0432\u0435\u0440\u0445\u0443 \u043d\u0430 \u043a\u0440\u0430\u0441\u043e\u0442\u0443 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u0441 j \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e i \u043f\u043e\u043b\u043a\u0430\u043c\nupLim=[[0]*(n+1) for _ in range(k+1)];\nfor i in range(1, k+1):\n    if i==1:\n        for j in range(0, n):\n            upLim[i][j]=sums[j][n];\n    else:\n        for j in range(n-i, -1, -1):\n            upLim[i][j]=0;\n            for j1 in range(j+1, n):\n                curr=min(sums[j][j1], upLim[i-1][j1]);\n                upLim[i][j]=max(upLim[i][j], curr);\ndef solve():\n    #\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u0449\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 deepfirst\n    problem=SearchProblem(a, n, k, 0.1);\n    if k==1:\n        return sum(a);\n    maxResult, solved = problem.search(0, 0, 0);\n    if solved:\n        #print(\"deep first succeed\")\n        return maxResult;\n    results = [[set() for _ in range(n + 1)] for _ in range(k + 1)];\n    # \u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u0438\u0449\u0435\u043c \u043f\u043e\u043b\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c\n    for i in range(1, n + 1):\n        for firstIndexSum in range(0, i):\n            # print(firstIndexSum, i);\n            currSum = sums[firstIndexSum][i];\n            if firstIndexSum == 0:\n                if currSum>maxResult:\n                    results[1][i].add(currSum);\n                if k == 2:\n                    lastSum = sums[i][n];\n                    currResult = currSum & lastSum;\n                    if currResult > maxResult:\n                        maxResult = currResult;\n                        for lines1 in range(k):\n                            for j in range(n):\n                                results[lines1][j] = {r for r in results[lines1][j] if r >= maxResult}\n            else:\n                for lines in range(k):\n                    for prevSum in results[lines][firstIndexSum]:\n                        # print(prevSum,\"&\",currSum,\"=\",prevSum&currSum)\n                        fullSum = prevSum & currSum;\n                        currLines = lines + 1;\n                        if currLines == k - 1:\n                            lastSum = sums[i][n];\n                            currResult = fullSum & lastSum;\n                            if currResult > maxResult:\n                                maxResult = currResult;\n                                for lines1 in range(k):\n                                    for j in range(n):\n                                        results[lines1][j] = {r for r in results[lines1][j] if r >= maxResult}\n                        if upLim[k-currLines][i]<=maxResult:\n                            continue;\n                        if fullSum>maxResult:\n                            results[currLines][i].add(fullSum);\n                        # print(i, results[i])\n\n    return maxResult;\nprint(solve());", "[n, k] = [int(x) for x in input().split()]\nsum = [int(x) for x in input().split()]\nfor i in range(1, n):\n    sum[i] += sum[i - 1]\n\ndef check(mask, all):\n    dp = [[False for j in range(n)] for i in range(k)]\n    for i in range(n):\n        dp[0][i] = ((sum[i] & all & mask) == mask)\n    for i in range(1, k):\n        for j in range(n):\n            dp[i][j] = any(dp[i - 1][p] and ((sum[j] - sum[p]) & all & mask) == mask for p in range(0, j))\n    return dp[k - 1][n - 1]\n    \n\nans = 0\nfor i in range(60, -1, -1):\n    if(check(ans | (1 << i), ~((1 << i) - 1))):\n       ans |= 1 << i\nprint(ans)\n\n", "3.7\n\nimport sys\n\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ncur = 0\n\ndef is_submask(n, mask):\n    return (n & mask) == mask\n\ndef f(mask):\n    s = [[False for j in range(n)] for i in range(n)]\n    for l in range(n):\n        cur = 0\n        for r in range(l, n):\n            cur += a[r]\n            s[l][r] = is_submask(cur, mask)\n    dp = [[False for j in range(n)] for i in range(k)]\n    dp[0] = s[0][:]\n    for k1 in range(1, k):\n        for r in range(n):\n            for l in range(1, r + 1):\n                    dp[k1][r] |= dp[k1 - 1][l - 1] & s[l][r]\n    return dp[k - 1][n - 1]\n\ncur = 0\nfor i in range(56, -1, -1):\n    if f(cur + 2 ** i):\n        cur += 2 ** i\nprint(cur)"]