["import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n# \u4e8c\u5206\u63a2\u7d22\nN, K = lr()\nA = np.array(lr())\nF = np.array(lr())\nA.sort()\nF = np.sort(F)[::-1]\n\ndef check(x):\n    count = np.maximum(0, (A - (x // F))).sum()\n    return count <= K\n\nleft = 10 ** 12 # \u53ef\u80fd\nright = -1 # \u4e0d\u53ef\u80fd\nwhile left > right + 1:\n    mid = (left+right) // 2\n    if check(mid):\n        left = mid\n    else:\n        right = mid\n\nprint(left)\n# 51\n", "import numpy as np\n\nn,k=map(int,input().split())\na=[int(x) for x in input().split()]\nf=[int(x) for x in input().split()]\n\na.sort()\nf.sort(reverse=True)\n\nA=np.array(a)\nF=np.array(f)\nS=sum(a)\n\nl,u=-1,f[0]*a[-1]\nwhile l+1<u:\n  m=(l+u)//2\n  s=0\n  if S-np.minimum(A,m//F).sum()<=k:\n    u=m\n  else:\n    l=m\n\nprint(u)", "import numpy as np\n\nN,K = list(map(int, input().split(\" \")))\nA = list(map(int, input().split(\" \"))) # consumption coefficient of members\nF = list(map(int, input().split(\" \"))) # difficulty of food\n\n# pair fastest eaters (low consumption coefficient) with most difficult foods\nA.sort()\nF.sort(reverse=True)\nA = np.array(A)\nF = np.array(F)\n\nmaxT = np.max(A*F)\n# use binary search to find lowest possible T\nleft = -1\nright = maxT\nwhile left+1< right:\n    mid = (left+right)//2\n    if np.maximum(0, A - (mid//F)).sum() <= K:\n        right  = mid\n    else:\n        left = mid\nprint(right)\n\n", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n# \u4e8c\u5206\u63a2\u7d22\u3001\u6d6e\u304d\u6c88\u307f\u306e\u6c88\u307f\u306b\u6ce8\u610f\nN, K = lr()\nA = np.array(lr()); A.sort()\nF = np.array(lr()); F.sort(); F = F[::-1]\n\ndef check(x):\n    cost = np.maximum(0, A - (x // F)).sum()\n    return cost <= K\n\nok = 10 ** 15; ng = -1\nwhile abs(ng-ok) > 1:\n    mid = (ok+ng) // 2\n    if check(mid):\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "import numpy as np\n\ndef is_ok(mid, k):\n    s = np.maximum(a - mid // f, 0).sum()\n    if s <= k:\n        return True\n    else:\n        return False\n\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]\nf = [int(i) for i in input().split()]\na.sort()\nf.sort(reverse=True)\na = np.array(a)\nf = np.array(f)\n\nl, r = -1, np.max(a * f) # l:ng, r:ok\nwhile l + 1 < r:\n    mid = (l + r) // 2\n    if is_ok(mid, k):\n        r = mid\n    else:\n        l = mid\nprint(r)", "#!/usr/bin/env python3\nimport numpy as np\n\n\ndef is_ok(mid, K, A, F):\n    return np.maximum(A - mid // F, 0).sum() <= K\n\n\ndef main():\n    N, K = input_line(int, int)\n    A = input_line([int])\n    F = input_line([int])\n    A = np.array(sorted(A))\n    F = np.array(sorted(F, reverse=True))\n\n    ng = -1\n    ok = int(1e12)\n    while ok - ng > 1:\n        mid = (ng + ok) // 2\n        if is_ok(mid, K, A, F):\n            ok = mid\n        else:\n            ng = mid\n    print(ok)\n\n\ndef input_line(*types):\n    if isinstance(types[0], list):\n        return [types[0][0](x) for x in input().split()]\n    elif len(types) == 1:\n        return types[0](input())\n    else:\n        return [t(x) for t, x in zip(types, input().split())]\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#import sys\nimport numpy as np\n#input = sys.stdin.readline\n\ndef main():\n    n, k=map(int, input().split())\n    a=np.array(list(map(int, input().split())), dtype=np.int64)\n    f=np.array(list(map(int, input().split())), dtype=np.int64)\n    a=np.sort(a)\n    f=np.sort(f)[::-1]\n    l,r=0,10**12\n    while l<=r:\n        m=(l+r)//2\n        tr=np.clip(a-m//f,0,None).sum()\n        if tr>k:\n            l=m+1\n        else:\n            r=m-1\n    print(l)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nimport numpy as np\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\n#mod = 998244353\nINF = 10**18\neps = 10**-7\n\nn,k=map(int,input().split())\na=np.array(readline().split(),np.int64)\nf=np.array(readline().split(),np.int64)\na.sort()\nf.sort()\nf=f[::-1]\ndef test(x):\n  return np.maximum(0,a-x//f).sum()<=k\n\nl=-1\nr=INF\nwhile l+1<r:\n  mid=(l+r)//2\n  if test(mid):\n    r=mid\n  else:\n    l=mid\n    \nprint(r)", "n,k = map(int,input().split())\na = list(map(int,input().split()))\nf = list(map(int,input().split()))\na.sort()\nf.sort(reverse=True)\n\nimport numpy as np\na = np.array(a)\nf = np.array(f)\n\nlow = -1\nhi = 10**18\n\nwhile hi-low > 1:\n    ave = (hi+low)//2\n    if np.maximum(0,a-ave//f).sum() <= k:\n        hi = ave\n    else:\n        low = ave\n\nprint(hi)", "import numpy as np\ndef solve(n, k, a, f):\n    a = sorted(a)\n    f = sorted(f)[::-1]\n    a = np.asarray(a, dtype=int)\n    f = np.asarray(f, dtype=int)\n    total = np.sum(a)\n    l = -1\n    r = np.max(a*f)\n    while r - l > 1:\n        th = (l + r) // 2\n        cost = total - np.minimum(a, th // f).sum()\n        if cost <= k:\n            r = th\n        else:\n            l = th\n    return r\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nf = list(map(int, input().split()))\nprint(solve(n, k, a, f))", "import numpy as np\n\n\ndef main():\n    N, K = [int(x) for x in input().split()]\n    A = [float(x) for x in input().split()]\n    F = [float(x) for x in input().split()]\n\n    A = np.array(sorted(A))\n    F = np.array(sorted(F, reverse=True))\n\n    if K >= np.sum(A)*N:\n        print((0))\n        return\n\n    min_time = 0\n    max_time = A[-1] * F[0]\n\n    while max_time != min_time:\n        tgt_time = (min_time + max_time)//2\n        ideal_a = np.floor(tgt_time*np.ones(N)/F)\n        cost = A - ideal_a\n        require_k = np.sum(cost[cost > 0])\n        if require_k <= K:\n            max_time = tgt_time\n        else:\n            min_time = tgt_time+1\n\n    print((int(max_time)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,k = list(map(int, input().split()))\na = list(map(int, input().split()))\nf = list(map(int, input().split()))\na.sort()\nf.sort()\n\nimport numpy as np\n\na = np.array(a)\nf = np.array(f)\nf_ = f[::-1]\n\nleft = -1\nright = np.max(a*f_)\n\nwhile left + 1 < right:\n    mid = (left + right)//2\n    x = np.maximum(0, a - (mid//f_) ).sum() <= k\n    if x:\n        right = mid\n    else:\n        left = mid\n\nprint(right)", "N,K=map(int, input().split())\nA=list(map(int, input().split()))\nF=list(map(int, input().split()))\nA=sorted(A)\nF=sorted(F)[::-1]\nimport numpy as np\na=np.array(A)\nf=np.array(F)\n\nlow=-1\nhigh=10**18\n\nwhile high-low>1:\n  d=(high+low)//2\n  #0\u304ba-d//f\u306e\u5927\u304d\u3044\u5024\u3092\u63a1\u7528\u3059\u308bnp.maximum\u3000\n  if np.maximum(0,a-d//f).sum()<=K:\n    high=d\n  else:\n    low=d\nprint(high)", "import sys\ninput = sys.stdin.readline\n\n#input\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nF = list(map(int, input().split()))\n\n#output\nimport numpy as np\nA = np.array(A)\nF = np.array(F)\n\nA = np.sort(A)[::-1]\nF = np.sort(F)\nB = np.sum(A)\nM = max([a*f for a, f in zip(A, F)])\n\ndef is_possible(x):\n    return B - np.minimum(A, x//F).sum() <= K\n\nleft = -1\nright = M\nwhile left + 1 < right:\n    mid = (left + right)//2\n    if is_possible(mid):\n        right = mid\n    else:\n        left = mid\n\nprint(right)", "def abc144_e():\n    import numpy as np\n\n    N, K = map(int, input().split())\n    A = np.array(input().split(), dtype=np.int64)\n    F = np.array(input().split(), dtype=np.int64)\n    A = np.sort(A)\n    F = np.sort(F)[::-1]\n\n    low = -1\n    up = 10**12\n    while up - low > 1:\n        v = (up + low) // 2\n        x = A - v // F\n        if x[x > 0].sum() > K:\n            low = v\n        else:\n            up = v\n    print(up)\n\ndef __starting_point():\n    abc144_e()\n__starting_point()", "from sys import stdin\nimport numpy as np\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,k=map(int,readline().split())\n    A=np.array(list(map(int,readline().split())),dtype=np.int64)\n    A=np.sort(A)[::-1]\n    F=np.array(list(map(int,readline().split())),dtype=np.int64)\n    F=np.sort(F)\n\n    l=-1\n    r=10**12\n    while l<r-1:\n        x=(l+r)//2\n        A_after=np.minimum(x//F,A)\n        cnt=(A-A_after).sum()\n        if cnt<=k: r=x\n        else: l=x\n\n    print(r)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n# \u4e8c\u5206\u63a2\u7d22\u3001\u6d6e\u304d\u6c88\u307f\u306e\u6c88\u307f\u306b\u6ce8\u610f\nN, K = lr()\nA = np.array(lr()); A.sort()\nF = np.array(lr()); F.sort(); F = F[::-1]\n\ndef check(x):\n    limit = x // F # \u3053\u306e\u30e9\u30a4\u30f3\u307e\u3067\u306bA\u3092\u843d\u3068\u3059\n    Y = A - limit\n    cost = Y[Y>=0].sum()\n    return cost <= K\n\nok = 10 ** 15; ng = -1\nwhile abs(ng-ok) > 1:\n    mid = (ok+ng) // 2\n    if check(mid):\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "import sys\ninput = sys.stdin.readline\ndef main():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    F = list(map(int, input().split()))\n\n    A.sort()\n    F.sort(reverse=True)\n    r = A[-1]*F[0]\n    l = -1\n    while(r-l > 1):\n        tmp = (l+r)//2\n        k = 0\n        for x, y in zip(A, F):\n            if x*y > tmp:\n                k += x - (tmp // y)\n            #k += max(0, x - (tmp // y))\n        if K >= k:\n            r = tmp\n        else:\n            l = tmp\n    print(r)\nmain()\n", "import numpy as np\nfrom numba import njit\n\nn, k = list(map(int, input().split()))\nA = np.array(list(map(int, input().split())))\nF = np.array(list(map(int, input().split())))\n\nA = np.sort(A)\nF = np.sort(F)[::-1]\n\n@njit\ndef is_ok(x):\n    tmp = 0\n    for a, f in zip(A, F):\n        y = a * f\n        if y > x:\n            tmp += a - x // f\n    return tmp <= k\n\nok = 10 ** 16\nng = -1\nwhile ok - ng > 1:\n    mid = (ok + ng) // 2\n    if is_ok(mid):\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\nimport time,random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\nmod2 = 998244353\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\ndef JA(a, sep): return sep.join(map(str, a))\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\n\ndef bs(f, mi, ma):\n    mm = -1\n    while ma > mi:\n        mm = (ma+mi) // 2\n        if f(mm):\n            mi = mm + 1\n        else:\n            ma = mm\n    if f(mm):\n        return mm + 1\n    return mm\n\ndef main():\n    n,k = LI()\n    a = sorted(LI())\n    b = sorted(LI(), reverse=True)\n    if sum(a) <= k:\n        return 0\n\n    def f(i):\n        t = 0\n        for ai,bi in zip(a,b):\n            u = i // bi\n            if ai > u:\n                t += ai - u\n        return t > k\n\n    r = bs(f,0,10**12)\n\n    return r\n\n\nprint(main())\n\n\n\n", "def main():\n    import numpy as np\n    import sys\n    input = sys.stdin.readline\n    N, K = list(map(int,input().split()))\n    A = np.sort(list(map(int,input().split())))\n    F = np.sort(list(map(int,input().split())))[::-1]\n\n    if K >= np.sum(A)*N:\n        print((0))\n        return\n    ma = A[-1]*F[0]\n    mi = 0\n    A = A*F\n    while ma != mi:\n        tgt = (ma + mi)//2\n        tmp = np.ceil((A-tgt)/F)\n        if np.sum(tmp[tmp>0]) <= K:\n            ma = (ma + mi)//2\n        else:\n            mi = (ma + mi)//2+1\n    print(ma)\ndef __starting_point():\n    main()\n\n__starting_point()", "N,K = map(int,input().split())\n\nimport numpy as np\n\nA = np.array(input().split(),np.int64)\nB = np.array(input().split(),np.int64)\n\nA.sort() ; B.sort() \nB=B[::-1]\n\nright = max(A*B)   #\u6642\u9593\u306e\u53ef\u80fd\u96c6\u5408\u306e\u7aef\u70b9\nleft = -1           #\u6642\u9593\u306e\u4e0d\u53ef\u80fd\u96c6\u5408\u306e\u7aef\u70b9\n\ndef test(t):\n    \n    C = A-t//B\n    D= np.where(C<0,0,C)\n    return D.sum()<=K\n\nwhile left+1<right:\n    mid = (left+right)//2\n    if test(mid):\n        right=mid\n    else:\n        left = mid\n\nprint(right)", "import numpy as np\nimport sys\ninput = sys.stdin.readline\nN, K = list(map(int,input().split()))\nA = np.sort(list(map(int,input().split())))\nF = np.sort(list(map(int,input().split())))[::-1]\nmul = A*F\nif K >= np.sum(A)*N:\n    print((0))\n    return\n\nma = A[-1]*F[0]\nmi = 0\nwhile ma != mi:\n    tgt = (ma + mi)//2\n    tmp = np.ceil((mul-tgt)/F)\n    num = np.sum(tmp[tmp>0])\n    if num <= K:\n        ma = (ma + mi)//2\n    else:\n        mi = (ma + mi)//2+1\nprint(ma)\n", "import numpy as np\nN, K = map(int,input().split())\nA = np.array(list(map(int,input().split())))\nF = np.array(list(map(int,input().split())))\nA.sort()\nF.sort()\nA = A[::-1]\nleft = 0\nright = np.max(A * F)\nfor _ in range(50):\n    judge = (left + right) // 2\n    rec = judge // F\n    recK = np.sum(np.maximum(np.zeros(N), A - rec))\n    if recK <= K:\n        right = judge\n    else:\n        left = judge + 1\n    if left == right:\n        print(left)\n        break", "import sys\nreadline = sys.stdin.readline\n\nimport numpy as np\n\nN,K = list(map(int,readline().split()))\nA = np.sort(np.array(readline().split(), dtype = int))\nF = np.sort(np.array(readline().split(), dtype = int))[::-1]\n\n# X\u79d2\u3067\u5b8c\u98df\u3067\u304d\u308b\u304b\u4e8c\u5206\u63a2\u7d22\n\nng = -1\nok = F[0] * A[-1]\n\ndef isOk(x):\n  return A.sum() - np.minimum(A, x // F).sum() <= K\n  \nwhile abs(ok - ng) > 1:\n  mid = abs(ok + ng) // 2\n  if isOk(mid):\n    ok = mid\n  else:\n    ng = mid\n    \nprint(ok)\n\n", "import numpy as np\n\ndef is_ok(mid, k):\n    s = np.maximum(a - mid // f, 0).sum()\n    if s <= k:\n        return True\n    else:\n        return False\n\nn, k = map(int, input().split())\na = np.array(list(map(int, input().split())))\nf = np.array(list(map(int, input().split())))\na = np.sort(a)\nf = np.sort(f)[::-1]\n\nl, r = -1, np.max(a * f) # l:ng, r:ok\nwhile l + 1 < r:\n    mid = (l + r) // 2\n    if is_ok(mid, k):\n        r = mid\n    else:\n        l = mid\nprint(r)", "n,k=list(map(int,input().split()))\na=[int(i) for i in input().split()]\nf=[int(i) for i in input().split()]\n\na.sort()\nf.sort(reverse=True)\n\ndef score(x):\n    syugyo = 0\n    for A,F in zip(a,f):\n        sup = x//F\n        if sup < A:\n            syugyo += A-sup\n    if syugyo <= k:\n        return True\n    return False\n\n\nleft = 0\nright = a[-1]*f[0]+1\nwhile left < right-1:\n    mid = (left+right)//2\n    if score(mid):\n        right = mid\n    else:\n        left = mid\nprint((left+1 if left != 0 else 0))\n", "import numpy as np\n\ndef is_ok(mid, k):\n    s = a - mid // f\n    s = s[s > 0].sum()\n    if s <= k:\n        return True\n    else:\n        return False\n\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]\nf = [int(i) for i in input().split()]\na.sort()\nf.sort(reverse=True)\na = np.array(a)\nf = np.array(f)\n\nl, r = -1, 10**12 # l:ng, r:ok\nwhile l + 1 < r:\n    mid = (l + r) // 2\n    if is_ok(mid, k):\n        r = mid\n    else:\n        l = mid\nprint(r)", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nf=list(map(int,input().split()))\na=sorted(a)\nf=sorted(f,reverse=True)\n\n\ndef is_lessthanK(X):\n  ans=0\n  for A,F in zip(a,f):\n    if A*F>X:\n      ans+=A-X//F\n    if ans > k:\n      return False\n  return True\n\n\nng=-1\nok=a[-1]*f[0]\nwhile ok-ng>1:\n  mid=(ok+ng)//2\n  if is_lessthanK(mid):\n    ok=mid\n  else:\n    ng=mid\nprint(ok)\n\n", "import numpy as np\n\ndef main():\n    N, K = list(map(int, input().split()))\n    A = np.array(list(map(int, input().split())))\n    F = np.array(list(map(int, input().split())))\n\n    A.sort()\n    F = np.sort(F)[::-1]\n\n    time = A*F\n    high = 10**12 + 1\n    low = -1\n\n    while high - low > 1:\n        middle = (high + low) // 2\n\n        temp = np.where(time>middle, time-middle, 0)\n        temp = np.ceil(temp/F).sum()\n\n        if temp <= K:\n            high = middle\n        else:\n            low = middle\n\n    print(high)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# # \u3082\u3057\u4fee\u884c\u306b\u3088\u308a\u6d88\u5316\u30b3\u30b9\u30c8\u304c\u5168\u30660\u306b\u306a\u308b\u5834\u5408\n# if sum(a_list) <= k:\n#     print(0)\n#     return\n\n# # \u66f4\u65b0\u30e1\u30bd\u30c3\u30c9\n# def update_cost(max_idx, result_cost, a_list, f_list):\n\n#     result_cost[max_idx] = a_list[max_idx] * f_list[max_idx]\n\n#     if max_idx == 0:\n#         pass\n#     else:\n#         result_cost[max_idx-1] = a_list[max_idx-1] * f_list[max_idx-1]\n\n#     return result_cost\n\n# # \u30bd\u30fc\u30c8\n# a_list.sort()\n# f_list.sort(reverse=True)\n\n# # \u30b3\u30b9\u30c8\u30ea\u30b9\u30c8init\n# result_cost = [a_list[idx] * f_list[idx] for idx in range(len(a_list))]\n\n\n# # \u4fee\u884c\u3059\u308b\n# while k > 0:\n#     # \u73fe\u72b6\u3067\u6700\u3082\u30b3\u30b9\u30c8\u304c\u5927\u304d\u3044\u3082\u306e\u306b\u3064\u3044\u3066\u8003\u3048\u308b\n#     max_idx = result_cost.index(max(result_cost))\n\n#     # \u4fee\u884c\u5b9f\u884c\n#     a_list[max_idx] -= 1\n#     a_list.sort()\n\n#     # \u30b3\u30b9\u30c8\u30ea\u30b9\u30c8\u66f4\u65b0\n#     result_cost = update_cost(max_idx, result_cost, a_list, f_list)\n\n#     # \u4fee\u884c\u6570\u6e1b\u3089\u3059\n#     k -= 1\n\n# print(max(result_cost))\n\nimport numpy as np\nn, k = list(map(int, input().split()))\n\nA = np.array(input().split(), np.int)\nF = np.array(input().split(), np.int)\n\nA.sort()\nF.sort()\nF = F[::-1]\n\nleft = -1 \nright = (A * F).sum()\n\nwhile (right-left) > 1:\n    # print(left, right)\n    split_line = (left + right) // 2\n    r = np.maximum(0, A-split_line // F).sum() <= k\n    if r:\n        right = split_line\n    else:\n        left = split_line\n\nprint(right)\n\n", "def main():\n    import numpy as np\n    import sys\n    input = sys.stdin.readline\n    N, K = map(int,input().split())\n    A = np.sort(list(map(int,input().split())))\n    F = np.sort(list(map(int,input().split())))[::-1]\n    mul = A*F\n    if K >= np.sum(A)*N:\n        print(0)\n        return\n\n    ma = A[-1]*F[0]\n    mi = 0\n    while ma != mi:\n        tgt = (ma + mi)//2\n        num = np.sum(np.maximum(0,(mul-tgt+F-1)//F))\n        if num <= K:\n            ma = (ma + mi)//2\n        else:\n            mi = (ma + mi)//2+1\n    print(ma)\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nimport numpy as np\n\n\nn, k = map(int,input().split())\n\na = np.array(sorted(list(map(int, input().split()))))\nf = np.array(sorted(list(map(int, input().split())), reverse=True))\n\nasum = a.sum()\n\nl,r = 0, 10**13\nwhile l != r:\n    mid = (l+r)//2\n\n    can = (asum - np.minimum(mid//f, a).sum()) <= k\n\n    if can:\n        r = mid \n    else:\n        l = mid +1\n\nprint(l)", "import numpy as np\n\nn,k=map(int,input().split())\n\na=np.array(input().split(),dtype=np.int64)\nf=np.array(input().split(),dtype=np.int64)\n\na.sort()\nf.sort()\nf=f[::-1]\naf=a*f\n\n# r\u4ee5\u4e0b\u306b\u3059\u308b\u306e\u306b\u5fc5\u8981\u4fee\u884c\u56de\u6570\u304ck\u4ee5\u5185\u304b\u3069\u3046\u304b\ndef safe(r):\n    return (np.maximum(0,(af-r+f-1)//f)).sum()<=k\n    \nm=-1\nM=10**12\n\nwhile m+1<M:\n    pos=(m+M)//2\n    if safe(pos):\n        M=pos\n    else:\n        m=pos\nprint(M)", "import sys\nimport numpy as np\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = 10**20\ndef I(): return int(input())\ndef F(): return float(input())\ndef S(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LS(): return input().split()\n\ndef resolve():\n    N, K = LI()\n    A = np.array(LI())\n    F = np.array(LI())\n\n    A.sort()\n    F.sort()\n    F = F[::-1]\n\n    # \u6642\u9593t\u3067\u611f\u89e6\u3067\u304d\u308b\u304b\n    def can_complete(t):\n        return np.maximum(0, A-t//F).sum() <= K\n\n    # for j in range(20):\n    #     print(can_complete(j))\n\n    ng = -1\n    ok = max(A)*max(F)\n    while abs(ok-ng)>1:\n        m = (ng+ok)//2\n        if can_complete(m):\n            ok = m\n        else:\n            ng = m\n    print(ok)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import numpy as np\nN, K = map(int, input().split())\nA = [int(c) for c in input().split()]\nF = [int(c) for c in input().split()]\nA.sort()\nF.sort(reverse=True)\nA = np.array(A)\nF = np.array(F)\nAsum = A.sum()\nM = np.max(A*F)\n\nl = -1\nr = M+1\nwhile l+1<r:\n  s = (l+r)//2\n  cnt = Asum - np.minimum(A, s//F).sum()\n  if cnt>K:\n    l = s\n  else:\n    r = s\n\nprint(r)", "import numpy as np\n\nn,k=list(map(int,input().split()))\na=np.array(input().split(),dtype=int)\nf=np.array(input().split(),dtype=int)\n\na=np.sort(a)[::-1]\nf=np.sort(f)\n\nok=10**18\nng=-1\n\nimport math\ndef isOK(val,arr,farr,k):\n  return arr.sum()-np.minimum(arr,val//farr).sum()<=k\n  \nwhile abs(ok-ng)>1:\n  mid=abs(ok+ng)//2\n  if isOK(mid,a,f,k):\n    ok=mid\n  else:\n    ng=mid\n    \nprint(ok)\n", "import numpy as np\nimport sys\ninput = sys.stdin.readline\nN, K = map(int,input().split())\nA = np.sort(list(map(int,input().split())))\nF = np.sort(list(map(int,input().split())))[::-1]\nmul = A*F\nif K >= sum(A)*N:\n    print(0)\n    return\n\nma = 2**40\nmi = 0\nwhile ma != mi:\n    tgt = (ma + mi)//2\n    tmp = np.ceil((mul-tgt)/F)\n    num = np.sum(tmp[tmp>0])\n    if num <= K:\n        ma = mi + (ma - mi)//2\n    else:\n        mi = mi + (ma - mi)//2+1\nprint(ma)", "\nimport numpy as np\ndef resolve():\n    # \u9054\u6210\u30b9\u30b3\u30a2\u3092\u6c7a\u3081\u308b\n    # \u4fee\u884c\u56de\u6570\u304cK\u4ee5\u4e0b\u3092\u9054\u6210\u3067\u304d\u308b\u30b9\u30b3\u30a2\u3092\u4e8c\u5206\u63a2\u7d22\n    def check(X):\n        # \u4fee\u884c\u3092\u3057\u3066\u30b9\u30b3\u30a2\u3092\u6700\u5c0f\u5316\u3059\u308b\n        a = X // F\n        diff = np.maximum(A - a, 0)\n        cnt = np.sum(diff)\n        return cnt <= K\n\n    N, K = list(map(int, input().split()))\n    A = np.array(input().split(), np.int64)\n    F = np.array(input().split(), np.int64)\n\n    A.sort()\n    F.sort()\n    F = F[::-1]\n\n    ok = 10 ** 12  # \u6700\u5927\u30b9\u30b3\u30a2 a: 10**6 * x:10**6\n    ng = -1\n    while ok - ng > 1:\n        X = (ok + ng) // 2\n        if check(X):\n            ok = X\n        else:\n            ng = X\n\n    print(ok)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def main():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    F = list(map(int, input().split()))\n\n    A.sort()\n    F.sort(reverse=True)\n    r = A[-1]*F[0]\n    l = -1\n    while(r-l > 1):\n        tmp = (l+r)//2\n        k = 0\n        for x, y in zip(A, F):\n            if x*y > tmp:\n                k += x - (tmp // y)\n            #k += max(0, x - (tmp // y))\n        if K >= k:\n            r = tmp\n        else:\n            l = tmp\n    print(r)\n\n\nmain()\n", "import numpy as np\n\n\ndef solve():\n    N, K = map(int, input().split())\n    a_l = np.array(input().split(), int)\n    b_l = np.array(input().split(), int)\n    a_l.sort()\n    b_l.sort()\n    b_l = b_l[::-1]\n\n    sum_a = a_l.sum()\n    left, right = -1, 10**13\n    while left + 1 < right:\n        mid = (left + right) // 2\n        if sum_a - np.minimum(a_l, mid // b_l).sum() <= K:\n            right = mid\n        else:\n            left = mid\n\n    print(right)\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "def main():\n    import sys\n    input=sys.stdin.readline\n    import numpy as np\n\n    n,k=list(map(int,input().split()))\n    A=np.array(input().split(),dtype=np.int64)\n    F=np.array(input().split(),dtype=np.int64)\n    A.sort()\n    F.sort()\n    F=F[::-1]\n\n    def ok(x): #\u30c1\u30fc\u30e0\u306e\u6210\u7e3e\u3092x\u3068\u3059\u308b\u3088\u3046\u306a\u4fee\u884c\u306e\u4ed5\u65b9\u304c\u5b58\u5728\u3059\u308b\u304b\n        cnt=np.maximum(0,A-x//F).sum()\n        return cnt<=k\n    \n    l=-1\n    r=10**12+1\n    while r-l>1:\n        mid=(r+l)//2\n        if ok(mid):\n            r=mid\n        else:\n            l=mid\n    print(r)   \n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import numpy as np\nN, K = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.int64)\nF = np.array(input().split(), dtype=np.int64)\nA = np.sort(A)\nF = np.sort(F)[::-1]\n\n\ndef C(x):\n    train = np.maximum(0, A - x // F).sum()\n    return train <= K\n\n\nleft = -1\nright = 10 ** 12 + 1\nwhile right > left + 1:\n    mid = (right + left) // 2\n    if C(mid):  # \u98df\u3079\u304d\u308c\u308b\u5834\u5408\n        right = mid\n    else:\n        left = mid\n\nans = right\nprint(ans)\n\n", "import numpy as np\n \na,b=map(int,input().split())\nA=np.array(sorted(list(map(int,input().split()))))\nF=np.array(sorted(list(map(int,input().split())),reverse=True))\n \ns=A.sum()\n \nx=-1\ny=10**12\nwhile x+1<y:\n  mid=(x+y)//2\n  if s-np.minimum(A,mid//F).sum()<=b:\n    y=mid\n  else:\n    x=mid\nprint(y)", "import numpy as np\n\nN, K = list(map(int, input().split()))\nA = sorted(list(map(int, input().split())))\nF = sorted(list(map(int, input().split())), reverse=True)\n\nA = np.array(A, np.int64)\nF = np.array(F, np.int64)\n\nAsum = sum(A)\n\ndef test(X):\n    return (Asum - np.minimum(A, X//F).sum() <= K)\n\nl = -1\nr = 10**12\n\nwhile (l + 1 < r):\n    mid = (l + r) // 2\n    if test(mid):\n        r = mid\n    else:\n        l = mid\n\nans = r\nprint(ans)\n", "import sys\nimport numpy as np\n\n\nn, k = map(int,input().split())\n\na = np.array(sorted(list(map(int, input().split()))))\nf = np.array(sorted(list(map(int, input().split())), reverse=True))\n\nasum = a.sum()\n\nl,r = 0, 10**13\nwhile l != r:\n    mid = (l+r)//2\n\n    can = (asum - np.minimum(mid//f, a).sum()) <= k\n\n    if can:\n        r = mid\n    else:\n        l = mid +1\n\nprint(l)", "import numpy as np\n\n\ndef is_good(mid, key):\n    x = A - mid // F\n    return x[x > 0].sum() <= key\n\n\ndef binary_search(key):\n    bad, good = -1, 10 ** 18\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if is_good(mid, key):\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN, K = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.int64)\nF = np.array(input().split(), dtype=np.int64)\nA.sort()\nF[::-1].sort()\nprint((binary_search(K)))\n", "import sys\nreadline = sys.stdin.readline\n\nimport numpy as np\n\nN,K = map(int,readline().split())\nA = np.array(sorted(list(map(int,readline().split()))))\nF = np.array(sorted(list(map(int,readline().split())),reverse = True))\n\nok = A[-1] * F[0]\nng = -1\n\ndef isOk(x):\n  # \u6642\u9593\u304cx\u306b\u306a\u308b\u305f\u3081\u306b\u306f\u3001A_i\u3092x/F_i\u4ee5\u4e0b\u307e\u3067\u6e1b\u3089\u3059\u5fc5\u8981\u304c\u3042\u308b\n  return A.sum() - np.minimum(A,x // F).sum() <= K\n  \nwhile (ok - ng)>1:\n  mid = (ok + ng) // 2\n  if isOk(mid):\n    ok = mid\n  else:\n    ng = mid\nprint(ok)", "import numpy as np\n\nn,k = map(int,input().split())\na = np.array(list(map(int,input().split())))\nf = np.array(list(map(int,input().split())))\n\na.sort();f.sort();f = f[::-1]\n\ndef test(x):\n    return np.maximum(0,a-x//f).sum() <= k\n\ndef nibutan(low,hi):\n    while True:\n        ave = (low+hi)//2\n        #\u3053\u3053\u306e\u6761\u4ef6\u5f0f\u3092\u554f\u984c\u6587\u306b\u5408\u308f\u305b\u308b\n        if test(ave):\n            hi = ave\n        else:\n            low = ave\n        if hi - low == 1:\n            break\n    li = [low,hi]\n    return li\n\nli = nibutan(-1,10**12)\n\nprint(li[1])", "# coding: utf-8\nimport numpy as np\n\n\ndef solve(*args: str) -> str:\n    n, k = list(map(int, args[0].split()))\n    A = np.array(sorted(list(map(int, args[1].split()))))\n    F = np.array(sorted(list(map(int, args[2].split())), reverse=True))\n\n    right = 1+A[-1]*F[0]\n    left = -1\n\n    total = A.sum()\n    while left+1 < right:\n        mid = (left+right)//2\n        if total - np.minimum(A, mid//F).sum() <= k:\n            right = mid\n        else:\n            left = mid\n\n    return str(right)\n\n\ndef __starting_point():\n    print((solve(*(open(0).read().split('\\n')))))\n\n__starting_point()", "import numpy as np\ndef bin_search(left, right, check):\n    while left + 1 < right:\n        middle = (left + right) >> 1\n        if check(middle):\n            right = middle\n        else:\n            left = middle\n    return right\n\ndef make_check(A, F, Z, K):\n    def check(m):\n        return np.maximum(A - m // F, Z).sum() <= K\n    return check\n\nN, K = map(int, input().split())\nA = np.array(input().split(), dtype=np.int32)\nF = np.array(input().split(), dtype=np.int32)\nZ = np.zeros((N,), dtype=np.int32)\nA.sort()\nF = F[np.argsort(-F)]\ncheck = make_check(A, F, Z, K)\n\nprint(bin_search(-1, 10 ** 12, check))", "import numpy as np\n\n\ndef is_good(mid, key):\n    return A_sum - np.minimum(A, mid // F).sum() <= key\n\n\ndef binary_search(bad, good, key):\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if is_good(mid, key):\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN, K = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.int64)\nF = np.array(input().split(), dtype=np.int64)\nA.sort()\nF[::-1].sort()\nA_sum = A.sum()\nans = binary_search(-1, np.max(A * F), K)\nprint(ans)\n", "import numpy as np\nN, K = map(int, input().split())\nA = np.array(tuple(map(int, input().split())))\nF = np.array(tuple(map(int, input().split())))\n\nif sum(A) <= K:\n    print(0)\nelse:\n    def solve(N, K, A, F):\n        A = np.sort(A)\n        F = np.sort(F)[::-1]\n        l = -1\n        r = 10**12\n        while (r - l) > 1:\n            mid = (r + l) // 2\n            # \u6210\u7e3e\u304cmid\u3060\u3063\u305f\u3068\u3057\u3066\u3001\u4fee\u884c\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u3092\u7b97\u51fa\n            fmid = (np.fmax([0]*N, A - (mid // F))).sum()\n            if fmid <= K:\n                r = mid\n            else:\n                l = mid\n        return(r)\n    print(solve(N, K, A, F))", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n# \u4e8c\u5206\u63a2\u7d22\u3001\u6d6e\u304d\u6c88\u307f\u306e\u6c88\u307f\u306b\u6ce8\u610f\nN, K = lr()\nA = np.array(lr()); A.sort()\nF = np.array(lr()); F.sort()\nF = F[::-1]\n\ndef check(x):\n    limit = x // F # \u3053\u306e\u30e9\u30a4\u30f3\u307e\u3067\u306bA\u3092\u843d\u3068\u3059\n    Y = A - limit\n    if np.any(Y > K):\n        return False\n    cost = Y[Y>=0].sum()\n    if cost <= K:\n        return True\n    else:\n        return False\n\nok = 10 ** 15; ng = -1\nwhile abs(ng-ok) > 1:\n    mid = (ok+ng) // 2\n    if check(mid):\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "import sys\nimport numpy as np\nN,K=map(int,input().split())\nA=np.array([int(i) for i in input().split()])\nF=np.array([int(i) for i in input().split()])\nA=np.sort(A)\nF=np.sort(F)[::-1]\n \nAsum = A.sum()\ndef test(x):\n    return Asum - np.minimum(A,x//F).sum() <= K\n \nl=0\nr=10**18*2+1\nwhile r-l > 1:\n    #print(l,r)\n    m = (l+r)//2\n    if test(m):\n        r=m\n    else:\n        l=m\nif test(l):\n    print(l)\nelse:\n    print(l+1)", "def main():\n    import numpy as np\n    n, k = list(map(int, input().split()))\n    aa = np.array(sorted(list(map(int, input().split()))), dtype=np.int64)\n    f = np.array(sorted(list(map(int, input().split())),\n                        reverse=True), dtype=np.int64)\n\n    a = 0\n    b = 10**12+10\n    while a+1 < b:\n        med = (a+b)//2\n        if np.sum(np.maximum(aa-med//f, np.zeros(n, dtype=np.int64))) > k:\n            a = med+1\n        else:\n            b = med\n    if a == b:\n        print(a)\n    else:\n        if np.sum(np.maximum(aa-a//f, np.zeros(n, dtype=np.int64))) > k:\n            print(b)\n        else:\n            print(a)\n\n\nmain()\n", "import numpy as np\nN, K = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.int64)\nF = np.array(input().split(), dtype=np.int64)\nA = np.sort(A)\nF = np.sort(F)[::-1]\n\n\ndef C(x):\n    train = np.maximum(0, A - x // F).sum()\n    return train <= K\n\n\nleft = -1\nright = 10 ** 12 + 1\nwhile right > left + 1:\n    mid = (right + left) // 2\n    if C(mid):  # \u98df\u3079\u304d\u308c\u308b\u5834\u5408\n        right = mid\n    else:\n        left = mid\n\nans = right\nprint(ans)\n", "import numpy as np\nN, K = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.int64)\nF = np.array(input().split(), dtype=np.int64)\nA = np.sort(A)\nF = np.sort(F)\nF = F[::-1]\n\n\ndef C(m):\n    need = m // F\n    cost = A - need\n    cost[cost < 0] = 0\n    return cost.sum() <= K\n\n\nl, r = -1, 10 ** 18 + 10\nwhile r - l > 1:\n    m = (r + l) // 2\n    if C(m):\n        r = m\n    else:\n        l = m\n\nprint(r)\n", "import numpy as np\n\nn,k=map(int,input().split())\na=[int(x) for x in input().split()]\nf=[int(x) for x in input().split()]\n\na.sort()\nf.sort(reverse=True)\n\na=np.array(a)\nf=np.array(f)\ns=a.sum()\n\nl,u=-1,f[0]*a[-1]\nwhile l+1<u:\n  m=(l+u)//2\n  if s-np.minimum(a,m//f).sum()<=k:\n    u=m\n  else:\n    l=m\n\nprint(u)", "import numpy as np\ndef bin_search(left, right, check):\n    while left + 1 < right:\n        middle = (left + right) >> 1\n        if check(middle):\n            right = middle\n        else:\n            left = middle\n    return right\n\ndef check(m):\n    return np.maximum(A - m // F, Z).sum() <= K\n\nN, K = map(int, input().split())\nA = np.array(input().split(), dtype=np.int32)\nF = np.array(input().split(), dtype=np.int32)\nZ = np.zeros((N,), dtype=np.int32)\nA.sort()\nF = F[np.argsort(-F)]\n\nprint(bin_search(-1, 10 ** 12, check))", "import numpy as np\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\nN, K = list(map(int, input().split()))\nA = np.array(list(map(int, input().split())), dtype = np.int64)\nF = np.array(list(map(int, input().split())), dtype = np.int64)\nA.sort()\nF.sort()\nF = F[::-1]\n\nl = 0\nr = 10**12 + 100\n\ndef solve(num):\n\tB = num // F\n\ttmp = np.sum(np.maximum(0, A - B))\n\tif tmp <= K:\n\t\treturn 1\n\telse:\n\t\treturn 0\n\nwhile r - l > 1:\n\tmid = (l + r) // 2\n\tif solve(mid):\n\t\tr = mid\n\telse:\n\t\tl = mid\n\nif solve(l):\n\tprint(l)\nelse:\n\tprint(r)\n\n", "import numpy as np\nN, K = map(int, input().split())\nAs = np.array(sorted(map(int, input().split())))\nFs = np.array(sorted(map(int, input().split()), reverse = True))\n\ntimes = As * Fs\n\nng = -1\nok = np.amax(times)+1\n\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    k = np.sum(np.maximum(np.ceil((times - mid) / Fs), 0))\n    if k > K:\n        ng = mid\n    else:\n        ok = mid\n\nprint(ok)", "import numpy as np\n\nN, K = map(int, input().split())\nA = np.array(input().split(), np.int64)\nF = np.array(input().split(), np.int64)\nA.sort()\nF.sort()\nF = F[::-1]\ndig = A.sum()\n\n\ndef judge(x):\n    return dig - np.minimum(A, x // F).sum() <= K\n\n\nl = -1\nr = 10 ** 18 + 1\n\nwhile l + 1 < r:\n    test = (l + r) // 2\n    if judge(test):\n        r = test\n    else:\n        l = test\n\nprint(r)", "import numpy as np\n\nn, k = map(int,input().split()) \na = list(map(int, input().split()))\nf = list(map(int, input().split()))\n\nif k > sum(a):\n    print(0)\n    return\n\na.sort(reverse=True)\nf.sort()\n\na = np.array(a)\nf = np.array(f)\n\nlb = -1\nub = a[0]*f[-1]\n\nwhile ub - lb > 1:\n    x = (lb+ub)//2\n    cx = np.full(n, x)\n    ck = a - x//f\n    ck = np.where(ck < 0, 0, ck)\n    ck_sum = ck.sum()\n    if ck_sum > k:\n        lb = x\n    else:\n        ub = x\nprint(ub)", "import sys\ninput = sys.stdin.readline\n\nimport numpy as np\n\ndef main():\n  n, k = list(map(int, input().split()))\n  A = np.array(sorted(list(map(int, input().split()))))\n  F = np.array(sorted(list(map(int, input().split())), reverse=True))\n  def is_time(x):\n    c = np.maximum(A - x//F, 0).sum()\n    if c <= k:\n      return True\n    return False\n  ng = -1\n  ok = max(A*F)\n  while ok - ng > 1:\n    m = (ng + ok)//2\n    if is_time(m):\n      ok = m\n    else:\n      ng = m\n  print(ok)\n  \ndef __starting_point():\n  main()\n\n__starting_point()", "import numpy as np\nn,k = list(map(int,input().split()))\n\nA = np.array(input().split(),np.int)\n\nF = np.array(input().split(),np.int)\n\n\nA.sort()\nF.sort()\n\nF_ = F[::-1]\n\nleft = -1\nright = (A * F_).sum()\n\nwhile (right - left) > 1:\n    s = (left + right) // 2\n    r = np.maximum(0, A - s // F_).sum() <= k\n    if r:\n        right = s \n    else:\n        left = s \n\nprint(right)\n", "import numpy as np\nN, K = map(int, input().split())\nAs = np.sort(list(map(int, input().split())))\nFs = np.sort(list(map(int, input().split())))[::-1]\nl  = As*Fs\nleft = 0\nright = max(l)\nwhile right-left>=1:\n    mid = left + (right - left)/2\n    if np.maximum(As-mid//Fs , 0).sum()<=K:\n        right = mid\n    else:\n        left = mid\nprint(int(right))", "import sys\nimport numpy as np\ninput = sys.stdin.readline\n\ndef main():\n    N, K = map(int, input().split())\n    a = np.array(sorted(list(map(int, input().split()))))\n    f = np.array(sorted(list(map(int, input().split())), reverse=True))\n\n    Asum = a.sum()\n\n    l, r = 0, int(1e13)\n    while l != r:\n        p = (l + r) // 2\n        tmp = Asum - np.minimum(a, p//f).sum() <= K\n        # print(p, tmp)\n        if tmp:\n            r = p\n        else:\n            l = p + 1\n    \n    print(l)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nimport numpy as np\ndef yn(a, f, k, x):\n  k_yt = np.maximum(np.zeros(a.shape),a - np.floor(np.divide(x, f)))\n  k_yt = np.sum(k_yt)\n  if k_yt <= k:\n    return True\n  else:\n    return False\n\nn, k = list(map(int, input().split()))\na = list((list(map(int, input().split()))))\nf = list((list(map(int, input().split()))))\na.sort()\nf.sort(reverse = True)\nxo = max([a[i]*f[i] for i in range(n)])\na = np.array(a)\nf = np.array(f)\n# binary search\nif xo == 0:\n  print((0))\nelse:\n  l = 0\n  r = xo\n  m = xo\n  while l <= r:\n    piv = int((r+l)/2)\n    if yn(a, f, k, piv):\n      r = piv - 1 \n      m = piv\n    else:\n      l = piv +1\n  print(m)\n   \n    \n\n", "import numpy as np\n\ndef solve(n, k, aaa, fff):\n    aaa = np.sort(aaa)\n    fff = np.sort(fff)[::-1]\n\n    l = -1\n    r = 1e12\n    while l+1 < r:\n        c = (l+r)//2\n        s = np.clip(aaa - c//fff, 0, None).sum()\n        if s <= k:\n            r = c\n        else:\n            l = c\n    return int(r)\n\n\nn, k = map(int, input().split())\naaa = np.array(list(map(int, input().split())), dtype=np.int64)\nfff = np.array(list(map(int, input().split())), dtype=np.int64)\n\nprint(solve(n, k, aaa, fff))", "import numpy as np\n\ndef main():\n    N, K = list(map(int, input().split()))\n    A = np.array(list(map(int, input().split())))\n    F = np.array(list(map(int, input().split())))\n\n    A.sort()\n    F = np.sort(F)[::-1]\n\n    time = A*F\n    high = 10**12 + 1\n    low = -1\n\n    while high - low > 1:\n        middle = (high + low) // 2\n\n        temp = np.where(time>middle, time-middle, 0)\n        temp = np.ceil(temp/F).sum()\n\n        if temp <= K:\n            high = middle\n        else:\n            low = middle\n\n    middle = high\n    temp = np.where(time>middle, time-middle, 0)\n    temp = np.ceil(temp/F)\n    time = (time - temp*F).max()\n    print((int(time)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]