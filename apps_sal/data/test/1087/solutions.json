["from collections import defaultdict\n\nN,K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nBMAX = 40\n\"\"\"\n\u30fbK\u4ee5\u4e0b\u306e\u975e\u8ca0\u6574\u6570\u306e\u7bc4\u56f2\u3067\u301c\uff1a\u6841DP\u611f\u3042\u308b\n\u30fbXOR\u3092\u3068\u308b\uff1a\u6841\u3054\u3068\u306b\u78ba\u8a8d\u3067\u304d\u308b\n\u30fbX\u3092\u9078\u3093\u3067\u3001f = X xor A1 + X xor A2 + ... + X xor AN\n\u3000 -> \u305d\u308c\u305e\u308c\u306eA\u3068\u6bce\u56de xor \u53d6\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6841\u3054\u3068\u306b xor \u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3000\u2190\u3000\u8d85\u91cd\u8981\u306e\u306f\u305a\n\u3000 -> A1 ~ AN \u306e\u5404\u6841\uff082\u9032\u6570\u306e\u6642\u306e\uff09\u306b1\u304c\u7acb\u3063\u3066\u3044\u308b\u306e\u304c\u4f55\u500b\u3042\u308b\u304b\u6570\u3048\u3066\u304a\u304f\n\n\n\u9077\u79fb\ndp[i][1] -> dp[i+1][1] : i-1\u6841\u76ee\u307e\u3067\u3067K\u672a\u6e80\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308c\u3070\u3001i\u6841\u76ee\u306b1,0\u3069\u3061\u3089\u3092\u9078\u3093\u3067\u3082K\u672a\u6e80\ndp[i][0] -> dp[i+1][1]  : i-1\u6841\u76ee\u307e\u3067\u3067K\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u3001K\u306ei\u6841\u76ee\u304c1\u306a\u3089\u3001X\u30670\u3092\u9078\u3079\u3070\u9077\u79fb\u3067\u304d\u308b\ndp[i][0] -> dp[i+1][0]  : i\u6841\u76ee\u307e\u3067\u4e00\u81f4\u3055\u305b\u308b\u5834\u5408\n\"\"\"\n\nd = [0] * BMAX\nfor a in A:\n  for i in range(BMAX):\n    if a & (1 << i):\n      d[i] += 1\n\n# dp[i+1][0] : X\u3092i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u305f\u6642\u306b\u3001K\u306ei\u6841\u76ee\u307e\u3067\u3068\u53b3\u5bc6\u306b\u4e00\u81f4\u3059\u308b\u3000\u3068\u304d\u306e\u6700\u5927\u5024\n# dp[i+1][1] : X\u3092i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u305f\u6642\u306b\u3001K\u306ei\u6841\u76ee\u307e\u3067\u3068\u53b3\u5bc6\u306b\u4e00\u81f4\u3057\u306a\u3044\u3068\u304d\u306e\u6700\u5927\u5024\n\ndp = [[-1 for _ in range(2)] for _ in range(BMAX+1)]\n\n\ndp[0][0] = 0\n\nfor i in range(BMAX):\n  now = BMAX-1-i\n  # X\u306e\u5de6\u304b\u3089now\u6841\u76ee\u306b1,0\u3092\u8a2d\u5b9a\u3057\u305f\u6642\u306bf\u304c\u5897\u52a0\u3059\u308b\u91cf\n  p0 = (2**now) * d[now]\n  p1 = (2**now) * (N - d[now])\n  \n  # K\u306e\u5de6\u304b\u3089now\u756a\u76ee\u306b1\u304c\u7acb\u3063\u3066\u308b\u304b\u3069\u3046\u304b\n  if K & (1 << now):\n    is_one = True\n  else:\n    is_one = False\n\n  # dp[i][1] -> dp[i+1][1] \u306fX\u306ei\u6841\u76ee\u306b1,0\u3092\u4f7f\u3048\u308b\u304b\u3089\u3001\u3088\u308a\u591a\u3044\u65b9\u3092\u63a1\u7528\n  if dp[i][1] != -1:\n    dp[i+1][1] = dp[i][1] + max(p1, p0)\n\n  # dp[i][0] -> dp[i+1][1] \u306fK\u306ei\u6841\u76ee\u304c1\u306a\u3089\u53ef\u80fd\n  if dp[i][0] != -1 and is_one:\n    dp[i+1][1] = max(dp[i+1][1], dp[i][0] + p0)\n\n  # dp[i][0] -> dp[i+1][0] \n  if dp[i][0] != -1:\n    dp[i+1][0] = dp[i][0] + (p1 if is_one else p0)    \n\nprint((max(dp[-1])))\n", "n, k = map(int, input().split())\nal = list(map(int, input().split()))\n\ndp = [n]*41\n\nfor i in range(n):\n    i_bit = bin(al[i])[2:]\n    lenb = len(i_bit)\n    for j in range(lenb-1,-1,-1):\n        dp[lenb-1-j] -= int(i_bit[j])\n\ntemp = k\nres = 0\nm = n//2\n\nfor i in range(40,-1,-1):\n    if dp[i] > m and 2**i <= temp:\n        temp -= 2**i\n        res += (2**i)*(dp[i]) \n    else:\n        res += (2**i)*(n-dp[i])\n\nprint(res)", "import sys\nreadline = sys.stdin.readline\nMAX_DIGIT = 40\n\ndef main():\n    N, K = map(int, readline().rstrip().split())\n    K_bin = bin(K)[2:].zfill(MAX_DIGIT)\n    A = list(map(int, readline().rstrip().split()))\n    A = [bin(a)[2:].zfill(MAX_DIGIT) for a in A]\n    dp = [[-1] * 2 for _ in range(MAX_DIGIT+1)]\n    # dp[i][j=0,1] = f, \u4e0a\u304b\u3089i\u6841\u307e\u3067\u6c7a\u3081\u3066\u3001j=0: \u4eca\u306e\u3068\u3053\u308dk\u3068\u4e00\u81f4, j=1: k\u672a\u6e80\u304c\u78ba\u5b9a\n\n    dp[0][0] = 0\n    mul = 2 ** (MAX_DIGIT - 1)\n    for d in range(MAX_DIGIT):\n        cnt = len([1 for a in A if a[d] == '1'])  # A\u3067\u5143\u3005d\u6841\u76ee\u306b\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u500b\u6570\n        gain0 = cnt * mul\n        gain1 = (N - cnt) * mul\n\n        # k\u672a\u6e80\u304c\u78ba\u5b9a -> k\u672a\u6e80\u304c\u78ba\u5b9a\n        if dp[d][1] != -1:\n            # d\u6841\u76ee\u3067k\u672a\u6e80\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001d+1\u6841\u76ee\u3067\u306f0\u3067\u30821\u3067\u3082\u81ea\u7531\u306b\u5927\u304d\u3044\u65b9\u3092\u9078\u3079\u308b\n            dp[d+1][1] = max(dp[d+1][1], dp[d][1] + max(gain0, gain1))\n        \n        # \u4eca\u306e\u3068\u3053\u308dk\u3068\u4e00\u81f4 -> k\u672a\u6e80\u304c\u78ba\u5b9a\n        if dp[d][0] != -1:\n            # K\u306ed\u6841\u76ee\u304c1\u3060\u3063\u305f\u3089\u3001X\u306ed\u6841\u76ee\u306f0\u306b\u3059\u308b\n            if K_bin[d] == '1':\n                dp[d+1][1] = max(dp[d+1][1], dp[d][0] + gain0) \n\n        # \u4eca\u306e\u3068\u3053\u308dk\u3068\u4e00\u81f4 -> \u4eca\u306e\u3068\u3053\u308dk\u3068\u4e00\u81f4\n        if dp[d][0] != -1:\n            # K\u306ed\u6841\u76ee\u3068\u5408\u308f\u305b\u308b\n            if K_bin[d] == '1':\n                dp[d+1][0] = max(dp[d+1][0], dp[d][0] + gain1)\n            else:\n                dp[d+1][0] = max(dp[d+1][0], dp[d][0] + gain0)\n        \n        mul //= 2\n    \n    print(max(dp[MAX_DIGIT]))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N,K = list(map(int,input().split()))\nL = list(map(int,input().split()))\n#dp[i][is_small]  =: i\u6841\u76ee\u307e\u3067\u307f\u305f is_small? \u306e\u4e2d\u3067\u306e\u6700\u5927\n\nd = format(K,'b')\ndp = [[-1 for _ in range(2)] for _ in range(len(d) +1)]\ndp[0][0] = 0\nfor i in range(len(d))[::-1]:\n    if K == 0: break\n    index = len(d) - i - 1\n    cnt = 0\n    for x in L:\n        if x & (1 << i):\n            cnt += 1\n    #\u4e0a\u304b\u3089index\u6841\u76ee\u306b\u7740\u76ee\n    tmp = 2 ** i \n    if dp[index][1] != -1:\n        dp[index+1][1] =max(dp[index+1][1], dp[index][1] + max(cnt,N-cnt) * tmp)\n    #\u78ba\u5b9a\u3057\u3066\u3044\u306a\u3044\n    if d[index] == '1':\n        #\u78ba\u5b9a\n        if dp[index][0] != -1:\n            dp[index+1][1] = max(dp[index+1][1],dp[index][0] + cnt * tmp)\n        #\u78ba\u5b9a\u3055\u305b\u306a\u3044\n        if dp[index][0] != -1:\n            dp[index+1][0] = max(dp[index+1][0],dp[index][0] + (N-cnt)*tmp)\n    else:\n        #\u78ba\u5b9a\u3055\u305b\u306a\u3044(0\u306b\u3059\u308b)\n        if dp[index][0] != -1:\n            dp[index+1][0] = max(dp[index+1][0],dp[index][0] + cnt*tmp)\nans = 0\nfor i in range(len(d),50):\n    tmp = 2 ** i\n    cnt = 0\n    for x in L:\n        if x & (1 << i):\n            cnt += 1\n    ans += cnt * tmp\nprint((ans + max(dp[len(d)][0],dp[len(d)][1],0)))\n", "import numpy as np\n\ndef binstr(n):\n    return np.array(list(map(int,list(bin(n)[2:].rjust(40,'0')))))\n\nN,K = map(int,input().split())\nA = list(map(int,input().split()))\n\nAA = sum([binstr(i) for i in A])\nX = 0\nans = 0\nfor i in range(40):\n    if AA[i] > N-AA[i]:   # 0\u306b\u3057\u305f\u65b9\u304c\u3044\u3044\n        ans += AA[i]*(2**(39-i))\n    else:                 # 1\u306b\u3057\u305f\u65b9\u304c\u3044\u3044\n        if X+2**(39-i) <= K:    # 1\n            ans += (N-AA[i])*(2**(39-i))\n            X += 2**(39-i)\n        else:                  # 0\n            ans += AA[i]*(2**(39-i))\n\nprint(ans)", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nans = 0\nbounded = True\nfor i in range(40, -1, -1):\n    d = 1 << i\n    cnt1 = sum(d & ai > 0 for ai in a)\n    cnt0 = n - cnt1\n    if bounded and k & d == 0 or cnt1 >= cnt0:\n        ans += cnt1 * d\n        if k & d > 0:\n            bounded = False\n    else:\n        ans += cnt0 * d\nprint(ans)\n", "import numpy as np\nN,K = list(map(int,input().split()))\nA = list(map(int,input().split()))\nMAXBITS = 40\nbits = np.ndarray((N, MAXBITS), dtype=int)\nfor i in range(N):\n    a = A[i]\n    bits[i] = np.array([(a >> j) & 1 for j in range(MAXBITS-1, -1, -1)])\nsm = bits[0]\nfor b in bits[1:]:\n    sm += b\nlower = False\nKbits = np.array([(K >> j) & 1 for j in range(MAXBITS-1, -1, -1)])\nans = 0\nfor i in range(MAXBITS):\n    ones = sm[i]\n    zeros = N-sm[i]\n    base = 2**(MAXBITS-i-1)\n    bit = 0\n    if ones >= zeros:\n        bit = 0\n    elif lower or Kbits[i] == 1:\n        bit = 1\n    if Kbits[i] > bit:\n        lower = True\n    ans += ones*base if bit == 0 else zeros*base\nprint(ans)\n", "n,k=map(int,input().split())\nA=list(map(int,input().split()))\nB=[0]*40\nfor i in A:\n  s=format(i,\"40b\")\n  for j in range(40):\n    if s[-1-j]==\"1\":\n      B[j]+=1\nC=[0]*40\nfor i in range(40):\n  if B[-1-i]<n/2:\n    C[i]=1\n  else:\n    C[i]=0\nAA=[]\na=0\nfor i in range(40):\n  if C[i]==1:\n    if a+2**(39-i)>k:\n      continue\n    b=a\n    for j in range(i+1,40):\n      if C[j]==1:\n        b=b+2**(39-j)\n    AA.append(b)\n    a=a+2**(39-i)\nAA.append(a)\nans=0\nfor i in AA:\n  a=0\n  for j in A:\n    a=a+(i^j)\n  if a>ans:\n    ans=a\nprint(ans)", "import sys,math,collections,itertools\ninput = sys.stdin.readline\n\nN,K=list(map(int,input().split()))\nA=list(map(int,input().split()))\nmaxA = max(A)\nbinK = bin(max(maxA,K))[2:]\nnum_one = [0]*len(binK)\nfor k in range(len(binK)):\n    for a in A:\n        num_one[len(binK)-k-1] += a>>k & 1\nans = 0\nflag = False#K\u3088\u308a\u5c0f\u3055\u3044\u3053\u3068\u304c\u78ba\u5b9a\u3057\u305f\u3089True\n\nfor k in range(len(binK)):\n    if flag:#\u5c0f\u3055\u3044\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u305f\u3089\u3001\u3069\u3063\u3061\u304b\u5927\u304d\u3044\u307b\u3046\u3092\u63a1\u7528\u3059\u308b\n        if num_one[k] > N-num_one[k]:#1\u7acb\u3063\u3066\u308b\u6570\u304c\u591a\u304b\u3063\u305f\u3089\u30010\u306b\u3057\u3068\u304f\n            ans += pow(2,len(binK)-k-1)*(num_one[k])\n        else:\n            ans += pow(2,len(binK)-k-1)*(N-num_one[k])\n    else:#\u5c0f\u3055\u3044\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u306a\u3044\u306a\u3089 K>>len(binK)-k-1\u304c0\u306a\u3089 0 \u305d\u3046\u3058\u3083\u306a\u3044\u306a\u3089\u3001\u304a\u5f97\u306a\u65b9\u30670\u306a\u3089True\u306b\u3059\u308b\n        if K>>len(binK)-k-1 &1:\n            if num_one[k] > N-num_one[k]:#1\u7acb\u3063\u3066\u308b\u6570\u304c\u591a\u304b\u3063\u305f\u3089\u30010\u306b\u3057\u3068\u304f\n                flag = True\n                ans += pow(2,len(binK)-k-1)*(num_one[k])\n            else:\n                ans += pow(2,len(binK)-k-1)*(N-num_one[k])#1\u7acb\u3063\u3066\u308b\u6570\u304c\u5c11\u306a\u3044\u306a\u3089\u30011\u7acb\u3066\u3066Flag\u306f\u672a\u5b9a\u72b6\u614b\n        else:\n            ans += pow(2,len(binK)-k-1)*(num_one[k])\n\nprint(ans)\n                \n            \n", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n\nc = [0]*40\nans = 0\nfor aa in a:\n    for k in range(40):\n        if aa & (1<<k):\n            c[k] += 1\nx = 0\nfor k in range(39,-1,-1):\n    if x + (1<<k) > K:continue\n    if c[k] <= N - c[k]:\n        x += (1<<k)\n\nfor aa in a:\n    ans += x^aa\nprint(ans)", "import sys\nfrom itertools import accumulate\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, k = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    ans = list(accumulate(A))[-1]\n\n    B = [0 for _ in range(52)]\n    for i in reversed(list(range(51))):\n        cnt1 = 0\n        for j in range(n):\n            if A[j] & (1 << i):\n                cnt1 += 1\n\n        cnt0 = n - cnt1\n        if cnt0 > cnt1:\n            B[i] = (1 << i) * (cnt0 - cnt1)\n\n    pre = 0\n    maxV = 0\n\n    for i in reversed(list(range(51))):\n        if k & (1 << i):\n            total = 0\n            for j in range(i):\n                total += B[j]\n            total += pre\n            maxV = max(maxV, total)\n            pre += B[i]\n\n    maxV = max(maxV, pre)\n    print((ans + maxV))\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "n, k = map(int, input().split())\nA = list(map(int, input().split()))\nM = 40\nC = [[0]*2 for _ in range(M+1)]\nfor a in A:\n  for i in range(M+1):\n    C[i][a>>i & 1] += 1\ndp = [[0]*2 for _ in range(M+1)]\ndp[M][1] = -float(\"inf\")\nfor i in range(M-1, -1, -1):\n  j = k>>i & 1\n  dp[i][0] = dp[i+1][0]*2 + C[i][j^1]\n  dp[i][1] = dp[i+1][1]*2 + max(C[i])\n  if j:\n    dp[i][1] = max(dp[i][1], dp[i+1][0]*2 + C[i][1])\nans = max(dp[0])\nprint(ans)", "n, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nk_bin = \"{:040b}\".format(k)\nA_bin = list(['{:040b}'.format(x) for x in A])\nX = ''\nfirst = 1\nfor i, col in enumerate(zip(*A_bin)):\n    if k_bin[i] == '0' and first:\n        X += '0'\n        continue\n    if first:\n        zero_cnt = col.count('0')\n        one_cnt = n-zero_cnt\n        if one_cnt < zero_cnt:\n            X += '1'\n        else:\n            first = 0\n            X += '0'\n        continue\n\n    zero_cnt = col.count('0')\n    one_cnt = n-zero_cnt\n    if one_cnt < zero_cnt:\n        X += '1'\n    else:\n        X += '0'\n\nX = int(X, 2)\n\nans = 0\nfor a in A:\n    ans += X ^ a\nprint(ans)\n", "\n\ndef submit():\n    n, k = (int(e) for e in input().split())\n    a = [int(e) for e in input().split()]\n    max_bit = 40\n    bit_cnt = []\n    \n    b = 0\n    bit = 1\n    while b <= max_bit:\n        cnt = sum(e & bit > 0 for e in a)\n        bit_cnt.append(cnt)\n        bit <<= 1\n        b += 1\n\n    isless = False\n    curr_bit = 1 << max_bit\n    ans = 0\n    for i in range(max_bit + 1):\n        # k\u306e\u8a72\u5f53bit\u3092\u307f\u308b\n        k_bit = k & curr_bit > 0\n        if not isless and k_bit == 0:\n            # print(\"isless false and k = 0\")\n            # 0\u3092\u9078\u3076\u3057\u304b\u306a\u3044\n            ans += bit_cnt[max_bit - i] * curr_bit\n        elif not isless and k_bit == 1:\n            # 0\u304b1\u304b\u3089\u9078\u3079\u308b\n            cnt1 = bit_cnt[max_bit - i]\n            cnt0 = n - cnt1\n            if cnt1 > cnt0:\n                # print(\"isless false and k = 1, choice 0\")\n                # 0\u3092\u9078\u3073\u3001\u4ee5\u4e0bgreedy\u306b\u3067\u304d\u308b\n                ans += cnt1 * curr_bit\n                isless = True\n            else:\n                # print(\"isless false and k = 1, choice 1\")\n                ans += cnt0 * curr_bit\n        else:\n            # 0\u304b1\u304b\u3089\u9078\u3079\u308b\n            cnt1 = bit_cnt[max_bit - i]\n            cnt0 = n - cnt1\n            if cnt1 > cnt0:\n                # print(\"isless true, choice 0\")\n                ans += cnt1 * curr_bit\n            else:\n                # print(\"isless true, choice 1\")\n                ans += cnt0 * curr_bit\n        curr_bit >>= 1\n\n    print(ans)\n\n\nsubmit()\n        \n", "N,K = map(int,input().split())\nA = list(map(int,input().split()))\n\nL = 40\nbc = [0] * L\nfor i in range(L):\n    for a in A:\n        if a&(1<<i):\n            bc[i] += 1\n\ndp = [[-1,-1] for _ in range(L+1)]\ndp[L][0] = 0\nfor i in range(L-1,-1,-1):\n    c = (K>>i)&1\n    for l in range(2):\n        if dp[i+1][l] < 0: continue\n        for d in range(2):\n            if l==0 and d > c: continue\n            nl = 0 if l==0 and d==c else 1\n            dp[i][nl] = max(dp[i][nl], dp[i+1][l] + 2**i * (N-bc[i] if d else bc[i]))\n\nprint(max(dp[0]))", "import numpy as np\nn, k = list(map(int,input().split()))\na = np.array(input().split(),dtype=int)\nn1 = [0 for i in range(40)]\ng0 = [0 for i in range(40)]\ng1 = [0 for i in range(40)]\nss = [0 for i in range(40)]\nt2 = [1 for i in range(40)]\n\nfor i in range(40):\n    n1[i] = np.count_nonzero(a&1)\n    a >>= 1\n    if i > 0:\n        t2[i] = t2[i-1]*2\n    g0[i] = n1[i]*t2[i]\n    g1[i] = (n-n1[i])*t2[i]\n    if n1[i] < n-n1[i]:\n        ss[i] = ss[i-1]+g1[i]\n    else:\n        ss[i] = ss[i-1]+g0[i]\n\ndef DFS(ni,ki,sm):\n    if ni == 0:\n        if ki == 0:\n            return sm+g0[0]\n        else:\n            return sm+ss[0]\n    else:\n        if ki//t2[ni] == 0:\n            return DFS(ni-1,ki,sm+g0[ni])\n        elif ki//t2[ni] > 1:\n            return sm+ss[ni]\n        else:\n            return max(sm+g0[ni]+ss[ni-1],DFS(ni-1,ki-t2[ni],sm+g1[ni]))\n\nma = DFS(39,k,0)\nprint(ma)\n", "n,k,*a=map(int,open(0).read().split())\nd=[0]*41\nfor i in range(n):\n  for j in range(41):\n    d[j]+=(a[i]>>j)&1\nf=0\nla=len(bin(max(a)))-2\nlk=len(bin(k))-2\nb=[0]*41\nfor i in range(lk-1,-1,-1):\n  if (k>>i)&1==1:\n    if d[i]<n-d[i]:\n      b[i]=1\n    else:\n      b[i]=0\n      f=1\n  if (k>>i)&1==0:\n    if d[i]<n-d[i] and f==1:\n      b[i]=1\n    else:\n      b[i]=0\nans=0\nfor i in range(max(lk,la)):\n  ans+=(1<<i)*[d[i],n-d[i]][b[i]]\nprint(ans)", "def XXOR():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    num = len(str(bin(10**12)))-2\n    ans = 0\n\n    # \u6700\u4e0a\u4f4d\u306e\u6841\u304b\u3089\u8caa\u6b32\u7684\u306b\u9078\u629e\u3059\u308b\n    for i in range(num, -1, -1):\n        count = 0\n        for j in a:\n            if (j>>i)&1:\n                count += 1\n        c = 2**i\n        if count < n-count and c <= k:\n            ans += (n-count)*c\n            k -= c\n        else:\n            ans += count*c\n    print(ans)\n    \ndef __starting_point():\n    XXOR()\n    \n\n__starting_point()", "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N, K, A):\n    import math\n    max_K = 0\n    for i in reversed(list(range(int(math.log2(K + 1)) + 1))):\n        cnt = 0\n        for a in A:\n            if a >> i & 1:\n                cnt += 1\n        if cnt <= N // 2:\n            if max_K + (1 << i) <= K:\n                max_K += 1 << i\n    ans = 0\n    for a in A:\n        ans += a ^ max_K\n    print(ans)\n\n\n\ndef __starting_point():\n    N, K = list(map(int, input().split()))\n    A = [int(i) for i in input().split()]\n    solve(N, K, A)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n\n__starting_point()", "#float\u578b\u3092\u8a31\u3059\u306a\n#numpy\u306fpython\u3067\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil,pi,factorial\nfrom operator import itemgetter\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ndef SI(): return input().rstrip()\ndef printns(x): print('\\n'.join(x))\ndef printni(x): print('\\n'.join(list(map(str,x))))\ninf = 10**17\nmod = 10**9 + 7\n\nn,k=MI()\nlis=LI()\nu=max(max(lis),k)\nmemo=0\nfor i in range(45):\n    x=(u>>i)%2\n    if x==1:\n        memo=i\nmemo+=1\n#print(memo)\ntable=[0 for i in range(memo)]\nfor i in range(n):\n    for j in range(memo):\n        x=(lis[i]>>j)%2\n        if x==1:\n            table[j]+=1\n#print(table)\ntable2=[[0,0] for i in range(memo)]\nfor i in range(memo):\n    table2[i][0]=abs(n-2*table[i])*2**i\n    table2[i][1]=i+1\n    if n-2*table[i]<0:\n        table2[i][1]*=(-1)\n#print(table2)\ntable2.sort(reverse=True)\n#print(table2)\n#print(sorted(table2,reverse=True))\nmaxx=0\nans_table=[0 for i in range(memo)]\nfor i in range(memo):\n    if table2[i][1]>0:\n        maxx+=2**(table2[i][1]-1)\n        if maxx<=k:\n            ans_table[table2[i][1]-1]=1\n        else:\n            ans_table[table2[i][1]-1]=0\n            maxx-=2**(table2[i][1]-1)\n    else:\n        ans_table[abs(table2[i][1])-1]=0\n#print(ans_table)\nans=0\nfor i in range(memo):\n    if ans_table[i]==1:\n        ans+=(2**i)*(n-table[i])\n    else:\n        ans+=(2**i)*table[i]\nprint(ans)", "def f_max(X, digit):\n    if X == 0:\n        return sum([Ad[i] * (2**i) for i in range(digit)])\n    elif X == 2**digit - 1:\n        return sum([max(Ad[i], N - Ad[i]) * (2**i) for i in range(digit)])\n    elif X >= 2**(digit-1):\n        return max((N - Ad[digit-1]) * (2**(digit-1)) + f_max(X-2**(digit-1), digit-1), Ad[digit-1] * (2**(digit-1)) + f_max(2**(digit-1)-1, digit-1))\n    else:\n        return Ad[digit-1] * (2**(digit-1)) + f_max(X, digit-1)\n\nN, K = map(int, input().split())\nK_max, digits = 2*10**12, 0\nwhile K_max > 0:\n    K_max >>= 1\n    digits += 1\n\nAd = [0]*digits\nfor a in list(map(int, input().split())):\n    for i in range(digits):\n        Ad[i] += a % 2\n        a >>= 1\n\nprint(f_max(K, digits))", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nM = 50\nl = len(str(N))\ndp = [[-1] * 2 for _ in range(M + 1)]\ndp[0][0] = 0\nfor i in range(M):\n    mask = 1 << (M - i - 1)\n    num = 0\n    for j in range(N):\n        if A[j] & mask:\n            num += 1\n    c0 = mask * num\n    c1 = mask * (N - num)\n    if dp[i][1] != -1:\n        dp[i + 1][1] = max(dp[i + 1][1], dp[i][1] + max(c0, c1))\n    if dp[i][0] != -1:\n        if K & mask:\n            dp[i + 1][1] = max(dp[i + 1][1], dp[i][0] + c0)\n            dp[i + 1][0] = max(dp[i + 1][0], dp[i][0] + c1)\n        else:\n            dp[i + 1][0] = max(dp[i + 1][0], dp[i][0] + c0)\nprint((max(dp[M][0], dp[M][1])))\n\n\n", "N,K=map(int,input().split())\nA=list(map(int,input().split()))\ndp=[0]*41\nbp=[0]*41\nfor i in range(N):\n  o=len(bin(A[i]))\n  for j in range(o-2):\n    if (A[i]>>j)&1==1:\n      dp[j]+=1\nans=0\ncount=0\nfor i in range(len(dp)-1,-1,-1):\n  bp[i]=N-dp[i]\n  if dp[i]<bp[i] and count+pow(2,i)<=K:\n    count+=pow(2,i)\nans=0\nfor i in range(N):\n  ans+=(count^A[i])\nprint(ans)", "def main():\n    n, k, *a = list(map(int, open(0).read().split()))\n\n    cnt = [sum((x >> i) & 1 for x in a) for i in range(40)]\n    bits = [0 if i > n - i else 1 for i in cnt]\n\n    base = format(k, 'b')\n    l = len(base)\n    tmp = []\n\n    if sum(2 ** i for i, b in enumerate(bits[:l]) if b == 1) > k:\n        for i in range(l - 1, -1, -1):\n            if int(base[-i - 1]) < bits[i]:\n                bits[i] = 0\n                tmp.append(sum(2 ** j for j, b in enumerate(bits[:l]) if b == 1))\n    else:\n        tmp.append(sum(2 ** j for j, b in enumerate(bits[:l]) if b == 1))\n\n    ans = max(sum(i ^ x for x in a) for i in tmp if i <= k)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def resolve():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    dp = [[-1 for _ in range(2)] for __ in range(45)]\n    dp[0][0] = 0\n\n    for i in range(40):\n        mask = 1<<(40-i-1)\n        one_num = 0\n        for a in A:\n            if a & mask:\n                one_num += 1\n        costdiff0 = mask*one_num\n        costdiff1 = mask*(N-one_num)\n        if dp[i][1] != -1:\n            dp[i+1][1] = max(dp[i+1][1], dp[i][1]+max(costdiff0, costdiff1))\n        if dp[i][0] != -1 and K&mask: \n            dp[i+1][1] = max(dp[i+1][1], dp[i][0]+costdiff0)\n        if dp[i][0] != -1:\n            if K&mask:\n                dp[i+1][0] = max(dp[i+1][0], dp[i][0]+costdiff1)\n            else:\n                dp[i+1][0] = max(dp[i+1][0], dp[i][0]+costdiff0)\n    print(max(dp[40][0], dp[40][1]))\n\n    \n\nif '__main__' == __name__:\n    resolve()", "import sys\nfrom functools import lru_cache\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef score(x, counter, N):\n    ans = 0\n    for i in range(40):\n        if x & (1 << i):\n            ans += (N - counter[i]) * (1 << i)\n        else:\n            ans += counter[i] * (1 << i)\n    return ans\n\n\ndef main():\n    N, K, *A = list(map(int, read().split()))\n\n    counter = [0] * 40\n    for a in A:\n        for i in range(40):\n            if a & (1 << i):\n                counter[i] += 1\n\n    B = [0] * 40\n    for i in range(39):\n        if counter[i] < N - counter[i]:\n            B[i + 1] = B[i] + (1 << i)\n        else:\n            B[i + 1] = B[i]\n\n    C = [0] * 40\n    for i in range(39, 0, -1):\n        if K & (1 << i):\n            C[i - 1] = C[i] + (1 << i)\n        else:\n            C[i - 1] = C[i]\n\n    ans = score(K, counter, N)\n\n    for i in range(40):\n        if K & (1 << i):\n            x = B[i] + C[i]\n            res = score(x, counter, N)\n            if ans < res:\n                ans = res\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,K=list(map(int,input().split()))\na=list(map(int,input().split()))\nc=[0]*40\nans=0\n\nfor aa in a:\n  for k in range(40):\n    if aa&(1<<k):c[k]+=1\nx=0\nfor k in range(39,-1,-1):\n  if x+(1<<k)>K:continue\n  if c[k]<=n-c[k]:x+=(1<<k)\n\nfor aa in a:\n  ans+=x^aa\n\nprint(ans)\n", "import sys\nN, K = map(int, sys.stdin.readline().rstrip().split())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\nbin_k = bin(K)[2:].zfill(50)\ncnt = [0] * 50\n\nfor a in A:\n    bin_a = bin(a)[2:]\n    for i, b in enumerate(bin_a[::-1]):\n        if b == \"1\":\n            cnt[i] += 1\n\ncnt = cnt[::-1]\ndp = [[0] * 2 for _ in range(50 + 1)]\nans = 0\nbase = 2 ** (50 - 1)\nflag = False\n\nfor i, c in enumerate(cnt, 1):\n    if flag:\n        if bin_k[i - 1] == \"1\":\n            dp[i][0] = dp[i - 1][0] + base * (N - c)\n            dp[i][1] = max(dp[i - 1][0] + base * c, dp[i - 1][1] + base * c,\n                        dp[i - 1][1] + base * (N - c))\n        else:\n            dp[i][0] = dp[i - 1][0] + base * c\n            dp[i][1] = max(dp[i - 1][1] + base * c, dp[i - 1][1] + base * (N - c))\n    else:\n        if bin_k[i - 1] == \"1\":\n            dp[i][0] = dp[i - 1][0] + base * (N - c)\n            tmp1 = dp[i - 1][0] + base * c\n            tmp2 =  dp[i - 1][1] + base * c\n            tmp3 = dp[i - 1][1] + base * (N - c)\n            if tmp3 <= tmp1 and tmp3 <= tmp2:\n                dp[i][1] = max(tmp1, tmp2)\n                flag = True\n            elif tmp3 <= tmp1:\n                dp[i][1] = tmp1\n                flag = True\n            else:\n                dp[i][1] = tmp3\n        else:\n            dp[i][0] = dp[i - 1][0] + base * c\n            dp[i][1] = dp[i - 1][1] + base * c\n\n    base //= 2\n\nprint(max(dp[50][0], dp[50][1]))", "n,k = map(int,input().split())\na = list(map(int,input().split()))\nl = max(len(bin(k)[2:]),len(bin(max(a))[2:]))\nc = [0]*l\n\nfor i in a:\n    b_a = bin(i)[2:].zfill(l)\n    for j in range(l):\n        if b_a[j]=='1':\n            c[j] += 1\n\nx = 0\nfor i in range(l):\n    e = l-i-1\n    if n-c[i]>c[i] and x+2**e<=k:\n        x += 2**e\n\nans = 0\nfor i in a:\n    ans += i^x\nprint(ans)", "N,K = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nBit = 0\nwhile(True):\n    if((1<<(Bit+1))>K):  \n        break\n    else:\n        Bit += 1\nX = 0\nfor b in range(Bit,-1,-1):\n    X_ = X+(1<<b)\n    if(X_ > K):\n        continue\n    Sum = sum([X^a for a in A])\n    Sum_ = sum([X_^a for a in A])\n    if(Sum_ > Sum):\n        X = X_\nprint((sum([X^a for a in A])))\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\ncnt = 0\nfor i in range(41)[::-1]:\n    S = sum(map(lambda x: (x >> i) & 1, a))\n    if S > n // 2:\n        m = 0\n    else:\n        m = 1 << i\n    if S > n // 2 or m > k - cnt:\n        ans += S << i\n    else:\n        ans += n - S << i\n        cnt += m\nprint(ans)", "from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,k=map(int,readline().split())\n    a=list(map(int,readline().split()))\n\n    s=bin(max(k,max(a)))[2:]\n    l=len(s)\n    cnt_one=[0]*l\n\n    for i in range(n):\n        b=a[i]\n        for j in range(l):\n            if b&1==1:\n                cnt_one[j]+=1\n            b>>=1\n\n    cnt_one.reverse()\n    k_bin=bin(k)[2:]\n    dp=[[-float(\"inf\"),-float(\"inf\")] for _ in range(l+1)]\n    dp[0][0]=0\n    for i in range(l):\n        j=l-i\n        if len(k_bin)<j:\n            dp[i+1][0]=dp[i][0]+cnt_one[i]*2**(j-1)\n        else:\n            if k_bin[len(k_bin)-j]==\"1\":\n                dp[i+1][0]=dp[i][0]+(n-cnt_one[i])*2**(j-1)\n                if cnt_one[i]>=(n+1)//2:  #1\u306e\u6570\u304c\u534a\u6570\u4ee5\u4e0a\n                    dp[i+1][1]=max(dp[i][0]+cnt_one[i]*2**(j-1),dp[i][1]+cnt_one[i]*2**(j-1))\n                else:  #1\u306e\u6570\u304c\u534a\u6570\u672a\u6e80\n                    dp[i+1][1]=max(dp[i][0]+cnt_one[i]*2**(j-1),dp[i][1]+(n-cnt_one[i])*2**(j-1))\n            else:\n                dp[i+1][0]=dp[i][0]+cnt_one[i]*2**(j-1)\n                if cnt_one[i]>=(n+1)//2:  #1\u306e\u6570\u304c\u534a\u6570\u4ee5\u4e0a\n                    dp[i+1][1]=dp[i][1]+cnt_one[i]*2**(j-1)\n                else:  #1\u306e\u6570\u304c\u534a\u6570\u672a\u6e80\n                    dp[i+1][1]=dp[i][1]+(n-cnt_one[i])*2**(j-1)\n\n    print(max(dp[l][0],dp[l][1]))\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nimport numpy as np\nN, K = map(int, sys.stdin.readline().rstrip().split())\nA = np.array(list(map(int, sys.stdin.readline().rstrip().split())))\ncnt = []\n\nfor i in range(41):\n    cnt.append(np.count_nonzero(A >> i & 1))\n\ncnt = cnt[::-1]\ndp = [[0] * 2 for _ in range(42)]\nans = 0\nbase = 2**(41 - 1)\n\nfor i, c in enumerate(cnt, 1):\n    if K >> (41 - i) & 1 == 1:\n        dp[i][0] = dp[i - 1][0] + base * (N - c)\n        if dp[i - 1][1] > 0:\n            dp[i][1] = max(dp[i - 1][0] + base * c, dp[i - 1][1] + base * c,\n                           dp[i - 1][1] + base * (N - c))\n        else:\n            dp[i][1] = dp[i - 1][0] + base * c\n\n    else:\n        dp[i][0] = dp[i - 1][0] + base * c\n        if dp[i - 1][1] > 0:\n            dp[i][1] = max(dp[i - 1][1] + base * c,\n                           dp[i - 1][1] + base * (N - c))\n\n    base //= 2\n\nprint(max(dp[41][0], dp[41][1]))", "import sys\nimport math\nimport collections\nimport bisect\nimport copy\n\n# import numpy as np\n\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: list(map(int, sys.stdin.readline().split()))\nna = lambda: list(map(int, sys.stdin.readline().split()))\nna1 = lambda: list([int(x) - 1 for x in sys.stdin.readline().split()])\n\n\n# ===CODE===\n\n\ndef main():\n    n, k = ns()\n    a = na()\n\n    max_len = 41\n    popcount = [0] * max_len\n\n    for ai in a:\n        cnt = 0\n        while ai > 0:\n            if ai & 1:\n                popcount[cnt] += 1\n            ai >>= 1\n            cnt += 1\n    popcount.reverse()\n\n    dp1 = [0 for _ in range(max_len + 1)]\n    dp2 = [-1 for _ in range(max_len + 1)]\n\n    for i in range(max_len):\n        tmp = pow(2, max_len - 1 - i)\n        ki = k >> (max_len - 1 - i) & 1\n\n        one = popcount[i]\n        zero = n - popcount[i]\n\n        if ki:\n            dp1[i + 1] = dp1[i] + zero * tmp\n            dp2[i + 1] = dp1[i] + one * tmp\n            if dp2[i] != -1:\n                dp2[i+1] = max(dp2[i+1], dp2[i] + zero * tmp, dp2[i] + one * tmp)\n\n        else:\n            dp1[i + 1] = dp1[i] + one * tmp\n            if dp2[i] != -1:\n                dp2[i + 1] = max(dp2[i] + zero * tmp, dp2[i] + one * tmp)\n\n    print((max(dp1[max_len], dp2[max_len])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nb = 1 << 63\nX = 0\nans = 0\n\nfor i in range(64):\n    cnt = 0\n    for a in A:\n        if a & b:\n            cnt += 1\n    if N >= cnt*2 and (X ^ b) <= K:\n        X ^= b\n        ans += (N - cnt) * b\n    else:\n        ans += cnt * b\n    b >>= 1\nprint(ans)\n\n# zero.reverse()\n# print(zero)\n# print(k)\n\n# k.reverse()\n# zero.reverse()\n\n# ans = 0\n# count = 2**(len(k)-1)\n# for i in range(len(zero)):\n#     ans += count*max(zero[i], n-zero[i])\n#     count //= 2\n# print(ans)\n", "N ,K = map(int,input().split())\n\nA = list(map(int,input().split()))\nMAX = max(max(A),K)\nl = len(str(bin(MAX)))-2\n\nAB = []\nfor i in range(N):\n  s = str(bin(A[i]))\n  temp = s[2:]\n  lendif = l - len(temp)\n  while lendif > 0:\n    temp = \"0\"+temp\n    lendif -= 1\n  AB.append(temp)\n#print(AB,l)\n\nans = 0\nnow = 0 #K\u3092\u8d85\u3048\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u7528\u3002\nfor i in range(l): #\u6841\u6570\u3067\u56de\u3059\u3002l-i\u6841\u304b\u3089\u9806\u306b\u307f\u3066\u3044\u304f\u3002\n  #c\u306f0\u306e\u6570\u3002d\u306f1\u306e\u6570\u3002\n  c = 0; d = 0\n  for j in range(N):\n    if AB[j][i] == \"0\":\n      c += 1\n    else:\n      d += 1\n  if c > d: #0\u306e\u65b9\u304c\u591a\u3044\u306e\u30671\u306b\u3057\u305f\u3044\u3002l-i\u6841\u76ee\u304c1\u306e\u6642\u306fK\u3092\u8d85\u3048\u3066\u306a\u3044\u304b\u78ba\u8a8d\u3002\n    if pow(2,l-1-i)+now > K:\n      m = d\n    else:\n      now += pow(2,l-1-i)\n      m = c\n  else:\n    m = d\n  #print(m, now, pow(2,l-1-i))\n  ans += pow(2,l-1-i)*m\nprint(ans)", "n,k,*a=map(int,open(0).read().split())\nd=[0]*41 #1\u306b\u306a\u3063\u3066\u308b\nfor i in range(n):\n  for j in range(41):\n    d[j]+=(a[i]>>j)&1\nf=0\nla=len(bin(max(a)))-2\nlk=len(bin(k))-2\nb=[0]*41\nfor i in range(lk-1,-1,-1):\n  if (k>>i)&1==1:\n    if d[i]<n-d[i]:\n      b[i]=1\n    else:\n      b[i]=0\n      f=1\n  if (k>>i)&1==0:\n    if d[i]<n-d[i] and f==1:\n      b[i]=1\n    else:\n      b[i]=0\nans=0\nfor i in range(max(lk,la)):\n  ans+=(1<<i)*[d[i],n-d[i]][b[i]]\nprint(ans)", "\n\nN,K = map(int, input().split())\nA = list(map(int, input().split()))\n\ncnts = [0] * 46\n\nfor a in A:\n    for i in range(46):\n        if a & (1 << i):\n            cnts[i] += 1\n\nL = 45\ndp = [[-1 for _ in range(2)] for _ in range(L+1)]\ndp[0][0] = 0\n\nfor i in range(L):\n    \n    p0 = pow(2, L-1 - i) * cnts[L-1-i]\n    p1 = pow(2, L-1 - i) * (N - cnts[L-1-i])\n\n    if K & (1 << (L-1 - i)):\n        is_one = True\n    else:\n        is_one = False\n\n\n    if dp[i][1] != -1:\n        dp[i+1][1] = dp[i][1] + max(p0, p1)\n\n    if dp[i][0] != -1 and is_one:\n        dp[i+1][1] = max(dp[i+1][1], dp[i][0] + p0)\n\n    if dp[i][0] != -1:\n        if is_one:\n            dp[i+1][0] = dp[i][0] + p1\n        else:\n            dp[i+1][0] = dp[i][0] + p0\n\n\n\nprint(max(dp[-1]))", "import numpy as np\n\nn, k = list(map(int, input().split()))\na = np.array(list(map(int, input().split())))\n\nL = len(f'{10**12:b}')\nres = 0\nfor i in range(-1, L):\n    if i != -1 and not (k >> i) & 1:\n        continue\n    val = 0\n    for j in range(L):\n        d = np.count_nonzero((a >> j) & 1)\n        if i < j:\n            if (k >> j) & 1:\n                val += (n-d) * 2**j\n            else:\n                val += d * 2**j\n        elif i == j:\n            val += d * 2**j\n        else:\n            val += max(d, n-d) * 2**j\n    res = max(res, val)\nprint(res)\n", "N,K=map(int,input().split())\nA=list(map(int,input().split()))\n\nmax_digit = K.bit_length()\n\ndef bi(x,max_d=max_digit):\n  b = bin(x)[2:]\n  if len(b) < max_d:\n    return '0'*(max_d-len(b))+b\n  else:\n    return b[-max_digit:]\n  \ndef f(x):\n    return sum(map(lambda a:a^x, A))\n\nB = list(map(bi,A))\n\ncount = [0]*max_digit\nans=0\nfor j in range(max_digit):\n  for i in range(N):\n    if B[i][j]=='1':count[j]+=1\n  if count[j]<N/2:\n    if ans + 2**(max_digit-j-1) <= K:\n      ans += 2**(max_digit-j-1)\n    else:\n      continue\n\nprint(f(ans))", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 9)\nMOD = 10 ** 9 + 7\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nC = [1] * 50\nfor i in range(50 - 1):\n    C[i + 1] = 2 * C[i]\n\ncount = [0] * 50\n\nfor i in range(N):\n    a = A[i]\n    j = 0\n    while a:\n        if a % 2 == 1:\n            count[j] += 1\n        j += 1\n        a //= 2\n\nB = [0] * 60\nk = K\nj = 0\nwhile k:\n    if k % 2 == 1:\n        B[j] = 1\n    j += 1\n    k //= 2\n\nunder = [-1] * (j + 1)\njust = [0] * (j + 1)\n# print (j)\n\ntmp = 0\nfor i in range(49, j - 1, -1):\n    tmp += C[i] * count[i]\n\nfor i in range(j - 1, -1, -1):\n    tmp1 = count[i] #1\u306e\u6570\n    tmp0 = N - tmp1 #0\u306e\u6570\n    if B[i] == 0:\n        just[i] = just[i + 1] + C[i] * tmp1\n        if under[i + 1] >= 0:\n            under[i] = under[i + 1] + C[i] * max(tmp1, tmp0)\n    else: #B[i] == 1\n        just[i] = just[i + 1] + C[i] * tmp0\n        if under[i + 1] == -1:\n            under[i] = just[i + 1] + C[i] * tmp1\n        if under[i + 1] >= 0:\n            under[i] = under[i + 1] + C[i] * max(tmp1, tmp0)\n            under[i] = max(under[i], just[i + 1] + C[i] * tmp1)\n\n\nprint((max(under[0], just[0]) + tmp))\n\n# print ('count', count)\n# print ('B', B)\n# print (under)\n# print (just)\n# print (tmp)\n", "n, k = map(int, input().split())\nA = list(map(int, input().split()))\n\nk_bin = \"{:040b}\".format(k)\nA_bin = list(map(lambda x: '{:040b}'.format(x), A))\ndp = [[0]*2 for _ in range(41)]\nfor i, col in enumerate(zip(*A_bin)):\n    zero_cnt = col.count('0')\n    one_cnt = n-zero_cnt\n\n    p = 40-i-1\n\n    if dp[i][0] != 0:\n        dp[i+1][0] = dp[i][0]+max(zero_cnt, one_cnt)*2**p\n\n    if k_bin[i] == '0':\n        dp[i+1][1] = dp[i][1]+one_cnt*2**p\n    else:\n        dp[i+1][0] = max(dp[i+1][0], dp[i][1]+one_cnt*2**p)\n        dp[i+1][1] = dp[i][1]+zero_cnt*2**p\n\nprint(max(dp[-1]))", "import numpy as np\nn, k = list(map(int,input().split()))\na = np.array(input().split(),dtype=int)\nn1 = [0 for i in range(40)]\ng0 = [0 for i in range(40)]\ng1 = [0 for i in range(40)]\nss = [0 for i in range(40)]\nt2 = [1 for i in range(40)]\n\nfor i in range(40):\n    n1[i] = np.count_nonzero(a&1)\n    a >>= 1\n    if i > 0:\n        t2[i] = t2[i-1]*2\n    g0[i] = n1[i]*t2[i]\n    if n1[i] < n-n1[i]:\n        g1[i] = (n-n1[i])*t2[i]\n        ss[i] = ss[i-1]+g1[i]\n    else:\n        ss[i] = ss[i-1]+g0[i]\n\n\ndef DFS(ni,ki,sm):\n    if ni == 0:\n        if ki == 0:\n            return sm+g0[0]\n        else:\n            return sm+ss[0]\n    else:\n        if g1[ni] == 0 or ki//t2[ni] == 0:\n            return DFS(ni-1,ki,sm+g0[ni])\n        elif ki//t2[ni] > 1:\n            return sm+ss[ni]\n        else:\n            return max(sm+ss[ni-1],DFS(ni-1,ki-t2[ni],sm+g1[ni]))\n\nma = DFS(39,k,0)\nprint(ma)\n", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 9)\nMOD = 10 ** 9 + 7\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ncount = [0] * 50\n\nfor i in range(N):\n    a = A[i]\n    j = 0\n    while a:\n        if a % 2 == 1:\n            count[j] += 1\n        j += 1\n        a //= 2\n\nB = [0] * 60\nk = K\nj = 0\nwhile k:\n    if k % 2 == 1:\n        B[j] = 1\n    j += 1\n    k //= 2\n\nunder = [-1] * (j + 1)\njust = [0] * (j + 1)\n# print (j)\n\ntmp = 0\nfor i in range(49, j - 1, -1):\n    tmp += pow(2, i) * count[i]\n\nfor i in range(j - 1, -1, -1):\n    tmp1 = count[i] #1\u306e\u6570\n    tmp0 = N - tmp1 #0\u306e\u6570\n    if B[i] == 0:\n        just[i] = just[i + 1] + pow(2, i) * tmp1\n        if under[i + 1] >= 0:\n            under[i] = under[i + 1] + pow(2, i) * max(tmp1, tmp0)\n    else: #B[i] == 1\n        just[i] = just[i + 1] + pow(2, i) * tmp0\n        if under[i + 1] == -1:\n            under[i] = just[i + 1] + pow(2, i) * tmp1\n        if under[i + 1] >= 0:\n            under[i] = under[i + 1] + pow(2, i) * max(tmp1, tmp0)\n            under[i] = max(under[i], just[i + 1] + pow(2, i) * tmp1)\n\n\nprint((max(under[0], just[0]) + tmp))\n\n# print ('count', count)\n# print ('B', B)\n# print (under)\n# print (just)\n# print (tmp)\n", "n,k = map(int,input().split())\na = list(map(int,input().split()))\nt,ans =2**40,0\nwhile t:\n    c = sum([(a[i]&t)//t for i in range(n)]) #a[i]\u306e\u3042\u308b\u6841\u306b\u304a\u3051\u308b1\u306e\u6570\n    if c>=n-c or k<t: ans += t*c\n    else: ans += t*(n-c);k-=t\n    t = t>>1\nprint(ans)", "n, k = map(int, input().split())\nA = list(map(int, input().split()))\n\nk_bin = \"{:040b}\".format(k)\nA_bin = list(map(lambda x: '{:040b}'.format(x), A))\n\nX = ''\nlimited = 1\nfor i, col in enumerate(zip(*A_bin)):\n    if k_bin[i] == '0' and limited:\n        X += '0'\n        continue\n\n    zero_cnt = col.count('0')\n    one_cnt = n-zero_cnt\n    if one_cnt < zero_cnt:\n        X += '1'\n    else:\n        X += '0'\n        limited = 0\n\nX = int(X, 2)\nprint(sum(X ^ a for a in A))", "import sys\ninput = sys.stdin.readline\n\n\ndef read():\n    N, K = list(map(int, input().strip().split()))\n    A = list(map(int, input().strip().split()))\n    return N, K, A\n\n\ndef solve(N, K, A):\n    L = max(K, max(A), 1).bit_length()\n    k = [0 for i in range(L)]\n    i = 0\n    while K:\n        k[i] += K & 1\n        i += 1\n        K >>= 1\n    b = [0 for i in range(L)]\n    for a in A:\n        i = 0\n        x = a\n        while x:\n            b[i] += x & 1\n            i += 1\n            x >>= 1\n    k = k[::-1]\n    b = b[::-1]\n    # dp[i][1]: \u4e0a\u4f4di\u30d3\u30c3\u30c8\u304cK\u3068\u7b49\u3057\u3044\u3068\u304d\u306e\u6700\u5927\u5024\n    # dp[i][0]: \u4e0a\u4f4di\u30d3\u30c3\u30c8\u304cK\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d\u306e\u6700\u5927\u5024\n    dp = [[-1, -1] for i in range(L+1)]\n    dp[0][1] = 0\n    for i in range(L):\n        if dp[i][0] >= 0:\n            dp[i+1][0] = (dp[i][0] << 1) + max(b[i], N-b[i])\n        #if dp[i][1] >= 0:\n        if k[i] == 1:\n            dp[i+1][0] = max(dp[i+1][0], (dp[i][1] << 1) + b[i])\n            dp[i+1][1] = (dp[i][1] << 1) + (N-b[i])\n        else:\n            dp[i+1][1] = (dp[i][1] << 1) + (b[i])\n    return max(dp[L][1], dp[L][0])\n\n\ndef __starting_point():\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print((\"%s\" % str(outputs)))\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\n\ndef read():\n    N, K = list(map(int, input().strip().split()))\n    A = list(map(int, input().strip().split()))\n    return N, K, A\n\n\ndef solve(N, K, A):\n    L = max(K, max(A), 1).bit_length()\n    k = [0 for i in range(L)]\n    i = 0\n    while K:\n        k[i] += K & 1\n        i += 1\n        K >>= 1\n    b = [0 for i in range(L)]\n    for a in A:\n        i = 0\n        x = a\n        while x:\n            b[i] += x & 1\n            i += 1\n            x >>= 1\n    k = k[::-1]\n    b = b[::-1]\n    # dp[i][1]: \u4e0a\u4f4di\u30d3\u30c3\u30c8\u304cK\u3068\u7b49\u3057\u3044\u3068\u304d\u306e\u6700\u5927\u5024\n    # dp[i][0]: \u4e0a\u4f4di\u30d3\u30c3\u30c8\u304cK\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d\u306e\u6700\u5927\u5024\n    dp = [[-1, -1] for i in range(L+1)]\n    dp[0][1] = 0\n    for i in range(L):\n        if dp[i][0] >= 0:\n            dp[i+1][0] = (dp[i][0] << 1) + max(b[i], N-b[i])\n        if dp[i][1] >= 0:\n            if k[i] == 1:\n                dp[i+1][0] = max(dp[i+1][0], (dp[i][1] << 1) + b[i])\n                dp[i+1][1] = (dp[i][1] << 1) + (N-b[i])\n            else:\n                dp[i+1][1] = (dp[i][1] << 1) + (b[i])\n    return max(dp[L][1], dp[L][0])\n\n\ndef __starting_point():\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print((\"%s\" % str(outputs)))\n\n__starting_point()", "from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,k=map(int,readline().split())\n    a=list(map(int,readline().split()))\n\n    s=bin(max(k,max(a)))[2:]\n    l=len(s)\n    cnt_one=[0]*l\n\n    for i in range(n):\n        b=a[i]\n        for j in range(l):\n            if b&1==1:\n                cnt_one[j]+=1\n            b>>=1\n\n    cnt_one.reverse()\n    k_bin=bin(k)[2:]\n    dp=[[-float(\"inf\"),-float(\"inf\")] for _ in range(l+1)]\n    dp[0][0]=0\n    for i in range(l):\n        j=l-i\n        score1=cnt_one[i]*2**(j-1)\n        score2=(n-cnt_one[i])*2**(j-1)\n        if len(k_bin)<j:\n            dp[i+1][0]=dp[i][0]+score1\n        else:\n            if k_bin[len(k_bin)-j]==\"1\":\n                dp[i+1][0]=dp[i][0]+score2\n                if cnt_one[i]>=(n+1)//2:  #1\u306e\u6570\u304c\u534a\u6570\u4ee5\u4e0a\n                    dp[i+1][1]=max(dp[i][0]+score1,dp[i][1]+score1)\n                else:  #1\u306e\u6570\u304c\u534a\u6570\u672a\u6e80\n                    dp[i+1][1]=max(dp[i][0]+score1,dp[i][1]+score2)\n            else:\n                dp[i+1][0]=dp[i][0]+score1\n                if cnt_one[i]>=(n+1)//2:  #1\u306e\u6570\u304c\u534a\u6570\u4ee5\u4e0a\n                    dp[i+1][1]=dp[i][1]+score1\n                else:  #1\u306e\u6570\u304c\u534a\u6570\u672a\u6e80\n                    dp[i+1][1]=dp[i][1]+score2\n\n    print(max(dp[l][0],dp[l][1]))\n\ndef __starting_point():\n    main()\n__starting_point()", "from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,k=map(int,readline().split())\n    a=list(map(int,readline().split()))\n\n    s=bin(max(k,max(a)))[2:]\n    l=len(s)\n    cnt_one=[0]*l\n\n    for i in range(n):\n        b=a[i]\n        for j in range(l):\n            if b&1==1:\n                cnt_one[j]+=1\n            b>>=1\n\n    cnt_one.reverse()\n    k_bin=bin(k)[2:]\n    dp=[[-float(\"inf\"),-float(\"inf\")] for _ in range(l+1)]\n    dp[0][0]=0\n    for i in range(l):\n        j=l-i\n        if len(k_bin)<j:\n            dp[i+1][0]=dp[i][0]+cnt_one[i]*2**(j-1)\n        else:\n            if k_bin[len(k_bin)-j]==\"1\":\n                dp[i+1][0]=dp[i][0]+(n-cnt_one[i])*2**(j-1)\n                if cnt_one[i]>=n//2:  #1\u306e\u6570\u304c\u534a\u6570\u4ee5\u4e0a\n                    dp[i+1][1]=max(dp[i][0]+cnt_one[i]*2**(j-1),dp[i][1]+cnt_one[i]*2**(j-1))\n                else:  #1\u306e\u6570\u304c\u534a\u6570\u672a\u6e80\n                    dp[i+1][1]=max(dp[i][0]+cnt_one[i]*2**(j-1),dp[i][1]+(n-cnt_one[i])*2**(j-1))\n            else:\n                dp[i+1][0]=dp[i][0]+cnt_one[i]*2**(j-1)\n                if cnt_one[i]>=(n+1)//2:  #1\u306e\u6570\u304c\u534a\u6570\u4ee5\u4e0a\n                    dp[i+1][1]=dp[i][1]+cnt_one[i]*2**(j-1)\n                else:  #1\u306e\u6570\u304c\u534a\u6570\u672a\u6e80\n                    dp[i+1][1]=dp[i][1]+(n-cnt_one[i])*2**(j-1)\n\n    print(max(dp[l][0],dp[l][1]))\n\ndef __starting_point():\n    main()\n__starting_point()", "N, K = map(int, input().split())\nAs = list(map(int, input().split()))\nbitK = K.bit_length()\nans = [0]*bitK\nfor a in As:\n    for i in range(bitK):\n        if not (a>>i)&1:\n            ans[i] += 1\n\nans = ans[::-1]\nstring = ['0']*bitK\nif bitK==0:\n    print(sum(As))\nelse:\n    for i, a in enumerate(ans):\n        if a>=N/2:\n            string[i] = '1'\n            if int(''.join(string), 2)>K:\n                string[i] = '0'\n    num = int(''.join(string), 2)\n    print(sum([x^num for x in As]))", "import numpy as np\nN,K=list(map(int, input().split()))\nA=list(map(int, input().split()))\n\n#\u6700\u5927\u6841\u6570\u8abf\u3079\u308b\nMAX=max(len(bin(K)[2:]), len(bin(max(A))[2:]))\n\n\nL=[[0]*MAX for _ in range(N)]\nfor i,a in enumerate(A):\n    b=bin(a)[2:]\n    b=b.zfill(MAX)\n    for j,s in enumerate(b):\n        if s==\"1\":\n            L[i][j]+=1\nL=np.array(L)\ncount=0\nones=L.sum(axis=0)\n#print(ones)\nfor i in range(MAX):\n    if ones[i]*2==N:\n        continue\n    elif ones[i]*2<N:\n        add=2**(MAX-1-i)\n        if count+add<=K:\n            count+=add\n    else:\n        continue\n\nans=0\nfor a in A:\n    ans+=(count^a)\nprint(ans)\n", "n, k = list(map(int, input().split()))\nA = sorted(map(int, input().split()), reverse=True)\n\ncnt = [0 for _ in range(100)]\nmax_a = A[0]\nk += 1\nindex_k = 0\nindex_a = 0\n\nfor i in range(100):\n    tmp = 2 ** i\n\n    if tmp > max_a:\n        index_a = i - 1\n        break\n\n    for a in A:\n        if a < tmp:\n            break\n        if (a >> i) & 1:\n            cnt[i] += 1\n\nfor i in range(100):\n    tmp = 2 ** i\n\n    if tmp > k:\n        index_k = i - 1\n        break\n\nbest = [0, ]\n\nfor i, c in enumerate(cnt[: index_k + 1]):\n\n    best.append(best[-1] + max(c, n - c) * 2 ** i)\n\ninitial = 0\n\nif index_a > index_k:\n\n    initial = sum([2 ** x[0] * x[1] for x in enumerate(cnt[index_k + 1 : index_a + 1], index_k + 1)])\n                    \n\nequal = [initial, ]\n\nfor i, c in enumerate(cnt[index_k::-1]):\n\n    if k >> (index_k - i) & 1:\n        equal.append(equal[-1] + (n - c) * 2 ** (index_k - i))\n    else:\n        equal.append(equal[-1] + c * 2 ** (index_k - i))\n\nans = 0\n\nfor i in range(index_k + 1):\n\n    if (k >> i) & 1:\n        ans = max(ans, best[i] + cnt[i] * 2 ** i + equal[-(i + 2)])\n\nprint(ans)\n", "n,k,*a=map(int,open(0).read().split())\nd=[0]*41 #a\u306e\u5404\u6841\u306e1\u306e\u6570\u306e\u548c\nfor i in range(n):\n  for j in range(41):\n    d[j]+=(a[i]>>j)&1\nf=0\nla=len(bin(max(a)))-2 #max(a)\u306e\u6841\u6570\nlk=len(bin(k))-2 #k\u306e\u6841\u6570\nb=[0]*41 #\u6700\u9069\u306aX\n#k\u4ee5\u4e0b\u306e\u6570\u3067\u4e0a\u6841\u304b\u3089\u307f\u308b,k\u304c1\u3067X\u304c0\u3068\u306a\u3063\u305f\u3068\u304dX\u306f\u305d\u308c\u3088\u308a\u4e0b\u6841\u306f\u81ea\u7531\u306b\u3068\u308c\u308b\n#\u5404\u68411\u30680\u3069\u3061\u3089\u304c\u591a\u3044\u304b\u3067X\u306e\u5404\u6841\u3092\u6c7a\u3081\u308b\nfor i in range(lk-1,-1,-1):\n  if (k>>i)&1==1:\n    if d[i]<n-d[i]:\n      b[i]=1\n    else:\n      b[i]=0\n      f=1\n  if (k>>i)&1==0:\n    if d[i]<n-d[i] and f==1:\n      b[i]=1\n    else:\n      b[i]=0\nans=0\n#\u7b54\u3048\u306fX\u306e\u5404\u6841\u306e\u6570,\u3067\u306f\u306a\u3044\u65b9\u306e\u6570\u306e\u500b\u6570\u306e\u548c\nfor i in range(max(lk,la)):\n  ans+=(1<<i)*[d[i],n-d[i]][b[i]]\nprint(ans)", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nb=[]\nL=len(bin(k))-2\nfor x in a:\n\tb.append(bin(x)[2:])\n\tL=max(L,len(bin(x))-2)\nfor i in range(n):\n\tb[i]=\"0\"*(L-len(b[i]))+b[i]\nX=0\nfor i in range(L):\n\tif 2**(L-i-1)<=k:\n\t\tone=0\n\t\tfor j in range(n):\n\t\t\tif b[j][i]==\"1\":\n\t\t\t\tone+=1\n\t\tif one<n-one:\n\t\t\tk-=2**(L-i-1)\n\t\t\tX+=2**(L-i-1)\nans=0\nfor x in a:\n\tans+=X^x\nprint(ans)", "import numpy as np\n\nn, k = list(map(int, input().split()))\na = np.array(list(map(int, input().split())))\n\nL = len(f'{10**12:b}')\ndp = np.full((L+1, 2), -1, dtype=np.int64)\ndp[0, 0] = 0\nfor i in range(L):\n    d = 1 << (L-i-1)\n    cnt = np.count_nonzero(a & d)\n    val0 = d * cnt\n    val1 = d * (n - cnt)\n\n    if dp[i, 1] != -1:\n        dp[i+1, 1] = max(dp[i+1, 1], dp[i, 1] + max(val0, val1))\n    if dp[i, 0] != -1:\n        if k & d:\n            dp[i+1, 1] = max(dp[i+1, 1], dp[i, 0] + val0)\n    if dp[i, 0] != -1:\n        if k & d:\n            dp[i+1, 0] = max(dp[i+1, 0], dp[i, 0] + val1)\n        else:\n            dp[i+1, 0] = max(dp[i+1, 0], dp[i, 0] + val0)\n\nprint((max(dp[L, 0], dp[L, 1])))\n", "n, k = list(map(int, input().split()))\na = list(map(int , input().split()))\n#ba = []\n#for i in range(n):\n#    ba.append('{:0=45b}'.format(a[i]))\n#print(ba)\n#print('{:0=45b}'.format(k))\nx = 0\nfor i in range(k.bit_length()-1, -1, -1):\n    cnt = 0\n    for j in range(n):\n        if a[j] >> i & 1 == 1:\n            cnt += 1\n    if cnt < (n + 1) // 2:\n        t = x + (1 << i)\n        if t <= k:\n            x = t\nans = 0\nfor ai in a:\n    ans += ai ^ x\nprint(ans)\n\n", "import math\n\nN,K = map(int,input().split())\nA = list(map(int,input().split()))\nD = len(bin(max(A))) - 2\nO = max(len(bin(K)) - 2,D)\nM = N / 2\n\nL = [0] * D\nC = [1] * O\n\nfor a in A:\n  s = str(bin(a))[2:]\n  l = list(s.zfill(D))\n  L = [int(i) + j for i,j in zip(l,L)]\n      \nL = (O - D) * [0] + L\n\nx = 0\n\nfor i in range(O):\n  tmp = 0\n  if L[i] < M:\n    tmp = 2 ** abs(O - i - 1)\n    if x + tmp <= K:\n      x += tmp\n\nans = 0\n\nfor a in A:\n  ans += x ^ a\n  \nprint(ans)", "# D - XXOR\n\nimport sys\nreadline = sys.stdin.readline\n\nN, K = map(int, readline().split())\nA = list(int(x) for x in readline().split())\n\nbits = [0] * 50\nfor i in range(N):\n    for j in range(50):\n        if A[i]>>j&1:\n            bits[j] += 1\n\n# tmp_K: K\u306e\u4e0a\u304b\u3089i\u6841\u76ee\u306b\u5fdc\u3058\u3066\u52a0\u7b97\u3059\u308b\n# tmp_greed: K\u306e\u4e0a\u304b\u3089i\u6841\u76ee\u304c1\u3060\u3063\u305f\u3089\u3001\n# i\u6841\u76ee\u30920\u306b\u3057\u3066i+1\u6841\u76ee\u4ee5\u964d\u3092\u8caa\u6b32\u306b\u9078\u3093\u3060\u30b1\u30fc\u30b9\u3092\u8a66\u3059\nans = 0\ntmp_K = 0\ntmp_greed = 0\nfor i in range(50)[::-1]:\n    if K>>i&1:\n        tmp_greed = bits[i] * 1<<i\n        for j in range(i)[::-1]:\n            tmp_greed += max(bits[j], N-bits[j]) * 1<<j\n        ans = max(tmp_greed + tmp_K, ans)\n        tmp_K += (N-bits[i]) * 1<<i\n    else:\n        tmp_K += bits[i] * 1<<i\n\nans = max(ans, tmp_K)\nprint(ans)", "\nN,K = list(map(int, input().split()))\nA_list = list(map(int, input().split()))\n\nmax_a = max(max(A_list), K)\nmax_len = 0\ntmp = max_a\nwhile tmp > 0:\n    max_len += 1\n    tmp//=2\n\nK_bits = [1 if (K >> j &1) else 0 for j in range(max_len)][::-1]\n\nsum_1_bits = [0] * max_len\nfor a in A_list:\n    a_bits = [j for j in range(max_len) if (a >> j &1)]\n    for bit in a_bits:\n        sum_1_bits[bit] += 1\nsum_1_bits = sum_1_bits[::-1]\n\n# dp start\n# dp[is\u672a\u6e80][\u6841]\ndp = [[0] * max_len for i in range(2)]\nborder = N/2\ntwice = 2 ** (max_len-1)\nhighest_digit = 0\ni = 0\n\nif K == 0:\n    res = 0\n    for b in sum_1_bits:\n        res += twice * b\n        twice //= 2\n\n    print(res)\n    return\n    \nwhile True:\n    if K_bits[i] == 1:\n        highest_digit = i\n        break\n    dp[0][i] = dp[0][i-1] + twice * sum_1_bits[i]\n    dp[1][i] = dp[1][i-1] + twice * sum_1_bits[i]\n    twice //= 2\n    i += 1\n\ndp[0][highest_digit] = dp[0][highest_digit-1] + twice * (N-sum_1_bits[highest_digit])\ndp[1][highest_digit] = dp[1][highest_digit-1] + twice * sum_1_bits[highest_digit]\ntwice //= 2\n\nfor i in range(highest_digit+1, max_len):\n\n    ibits = sum_1_bits[i]\n    dp[1][i] = dp[1][i-1] + twice * max(ibits, N-ibits)\n    if K_bits[i] == 1:\n        dp[1][i] = max(dp[1][i], dp[0][i-1] + twice * ibits)\n    k_side = ibits if K_bits[i] == 0 else N-ibits\n    dp[0][i] = dp[0][i-1] + twice * k_side\n    twice //= 2\n\nprint((max(dp[0][-1],dp[1][-1])))\n", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nA_max = max(A)\n\nM = len(bin(A_max)) - 2\nL = len(bin(K)) - 2\nC = [[N, 0] for j in range(max(M, L))]\nfor i in A:\n    for j in range(M):\n        if (i >> j) & 1:\n            C[j][1] += 1\n            C[j][0] -= 1\n\nP = 0\nfor j in range(L-1, -1, -1):\n    if C[j][0] >= C[j][1]:\n        if P + 2 ** j <= K:\n            P += 2 ** j\n\nans = 0\nfor i in A:\n    ans += P ^ i\n\nprint(ans)\n\n", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ni = 1\nwhile i <= K:\n  i *= 2\n\nx = 0\nwhile i != 0:\n  if sum([1 for a in A if a&i==0]) > N/2:\n    if x+i <= K:\n      x += i\n  i //= 2;\n\nprint((sum([a^x for a in A])))\n", "def solve():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    digit = len(str(bin(K)))-2\n    digits1 = [0]*digit\n    ans = 0\n    for a in A:\n        ans += a-a%(1<<digit)\n        for i in range(digit):\n            if a&1<<i:\n                digits1[i] += 1\n    x = 0\n    for i in range(digit-1,-1,-1):\n        if digits1[i]<N/2 and x+(1<<i) <=K:\n            x += 1<<i\n            ans += (1<<i)*(N-digits1[i])\n        else:\n            ans += (1<<i)*digits1[i]\n    return ans\nprint(solve())", "import sys\nfrom functools import lru_cache\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K, *A = list(map(int, read().split()))\n\n    K = list(map(int, f'{K:>040b}'))\n    A2 = [list(map(int, f'{a:>040b}')) for a in A]\n    B = [0] * 40\n    for a in A2:\n        for i, bit in enumerate(a):\n            B[i] += bit\n    for i in range(40):\n        if B[i] == N - B[i]:\n            B[i] = 2\n        elif B[i] < N - B[i]:\n            B[i] = 1\n        else:\n            B[i] = 0\n\n    @lru_cache(maxsize=None)\n    def rec(i, x, smaller):\n        if i == 40:\n            ans = 0\n            for a in A:\n                ans += x ^ a\n            return ans\n        elif smaller:\n            if B[i] == 2:\n                return rec(i + 1, (x << 1), True)\n            else:\n                return rec(i + 1, (x << 1) + B[i], True)\n        else:\n            if B[i] == 2:\n                if K[i] == 0:\n                    return rec(i + 1, (x << 1), False)\n                else:\n                    return rec(i + 1, (x << 1), True)\n            elif K[i] == B[i]:\n                return rec(i + 1, (x << 1) + K[i], False)\n            elif K[i] < B[i]:\n                return rec(i + 1, (x << 1) + K[i], False)\n            else:\n                return rec(i + 1, (x << 1) + B[i], True)\n\n    print((rec(0, 0, False)))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nbit_cnt = [0] * 40\n\nfor a in arr:\n    for i in range(40):\n        if a >> i & 1:\n            bit_cnt[i] += 1\n\nx = 0\nfor i in range(39, -1, -1):\n    if x + (1 << i) <= k and bit_cnt[i] <= n - bit_cnt[i]:\n        x += (1 << i)\n\nprint(sum([x ^ y for y in arr]))", "n, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nB = [[0]*2 for _ in range(42)]\nfor a in A:\n    b = format(a, 'b')\n    b = list(b)\n    b.reverse()\n    for i in range(len(b)):\n        if b[i] == '1':\n            B[i][1] += 1\n\nfor i in range(42):\n    if B[i][1] != 0:\n        B[i][0] = n-B[i][1]\nB.reverse()\n#print(B)\ntemp = 0\nmax_ = 0\nfor i, (b0, b1) in enumerate(B):\n    if b1 == 0:\n        if temp + 2**(41-i) <= k:\n            max_ += n*2**(41-i)\n            temp += 2**(41-i)\n    else:\n        if b0 >= b1:\n            if temp + 2**(41-i) <= k:\n                max_ += b0*2**(41-i)\n                temp += 2**(41-i)\n            else:\n                max_ += b1*2**(41-i)\n                temp += 0\n        else:\n            max_ += b1*2**(41-i)\n            temp += 0\nprint(max_)\n", "\nMAX_DIGIT = 40\nSMALL = 0\nEQUAL = 1\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ndp = [[-1 for _ in range(2)] for _ in range(MAX_DIGIT+1)]\ndp[0][EQUAL] = 0\n\nfor d in range(MAX_DIGIT):\n    shift = MAX_DIGIT - d - 1\n    bit_count = 0\n    for a in A:\n        if a >> shift & 1:\n            bit_count += 1\n\n    cost0 = (1 << shift) * bit_count\n    cost1 = (1 << shift) * (N - bit_count)\n\n    # small -> small\n    if dp[d][SMALL] != -1:\n        dp[d+1][SMALL] = max(dp[d+1][SMALL], dp[d][SMALL] + max(cost0, cost1))\n\n    # equal -> small\n    if dp[d][EQUAL] != -1:\n        if K >> shift & 1:\n            dp[d+1][SMALL] = max(dp[d+1][SMALL], dp[d][EQUAL] + cost0)\n\n    # equal -> equal\n    if dp[d][EQUAL] != -1:\n        if K >> shift & 1:\n            dp[d+1][EQUAL] = max(dp[d+1][EQUAL], dp[d][EQUAL] + cost1)\n        else:\n            dp[d+1][EQUAL] = max(dp[d+1][EQUAL], dp[d][EQUAL] + cost0)\n\nans = max(dp[MAX_DIGIT][EQUAL], dp[MAX_DIGIT][SMALL])\nprint(ans)", "n, k = map(int, input().split())\nA = tuple(map(int, input().split()))\nones = [0] * k.bit_length()\nfor a in A:\n    for i in range(k.bit_length()):\n        ones[i] += (a >> i) & 1\n\nx = 0\nfor idx, one in enumerate(ones[::-1]):\n    if n - one > one:\n        xx = 2**(len(ones)-1-idx)\n        if x + xx > k:\n            continue\n        else:\n            x += xx\nans = 0\nfor a in A:\n    ans += a ^ x\nprint(ans)", "n,k = map(int,input().split())\nA = list(map(int,input().split()))\ncnt = [0]*50\nL = format(k, 'b').zfill(50)\nS = [[0,0] for _ in range(50)]\nfor a in A:\n    a_ = format(a, 'b').zfill(50)\n    for i in range(50):\n        if a_[i]=='1':\n            S[i][0] += 1\n        else:\n            S[i][1] += 1\nfor i in range(len(S)):\n    S[i][0] *= pow(2, 50-i-1)\n    S[i][1] *= pow(2, 50-i-1)\n\ndp = [[-1,-1] for _ in range(55)]\ndp[0][0] = 0\n\nfor i in range(50):\n    \n    if L[i] == '1':\n        if dp[i][1] != -1:\n            dp[i+1][1] = dp[i][1] + max(S[i][0], S[i][1])\n        if dp[i][0] != -1:\n            dp[i+1][1] = max(dp[i+1][1], dp[i][0]+S[i][0])\n            dp[i+1][0] = dp[i][0] + S[i][1]\n        \n            \n    else:\n        if dp[i][1] != -1:\n            dp[i+1][1] = dp[i][1] + max(S[i][1], S[i][0])\n        if dp[i][0] != -1:\n            dp[i+1][0] = dp[i][0] + S[i][0]\n\nprint(max(dp[50]))", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    K_d = [0] * (len(bin(10 ** 12)) - 2)\n    L = len(K_d)\n    for i, k in enumerate(bin(K)[2:][::-1], 1):\n        k = int(k)\n        K_d[L - i] = k\n\n    cnt_d = [[0, 0] for _ in range(L)]\n    for a in A:\n        for i in range(L - 1, -1, -1):\n            cnt_d[i][a & 1] += 1\n            a >>= 1\n\n    ans = 0\n    lower_K = False\n    for i, (d, (n_zero, n_one)) in enumerate(zip(K_d, cnt_d)):\n        if n_zero <= n_one:\n            n = 0\n        else:\n            n = 1\n        \n        if not lower_K:\n            if d == 1 and n == 0:\n                lower_K = True\n            elif d == 0 and n == 1:\n                n = 0\n\n        num = cnt_d[i][n ^ 1]\n        ans += num * 2 ** (L - 1 - i)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ndef f(x, n):\n  i = 0\n  while x != 0:\n    cnt_bit[i] +=  x % abs(n)\n    if n < 0:\n      x = - ( (-x)//n )\n    else:\n      x //= n\n    i += 1\n\ndef base(x, n):\n  ret = []\n  while x != 0:\n    ret.append( x % abs(n))\n    if n < 0:\n      x = - ( (-x)//n )\n    else:\n      x //= n\n  return ret\n\ncnt_bit = [0]*50\nFlag = True\n\nfor a in A:\n  f(a, 2)\n\nB = base(K, 2)\nM = len(B)\n\nfor i in range(M):\n  c1, c0 = cnt_bit[M-1-i], N - cnt_bit[M-1-i]\n  if Flag:\n    if c1 >= c0:\n      if B[M-1-i] == 1:\n        Flag = False\n      B[M-1-i] = 0\n  else:\n    if c1 >= c0:\n      B[M-1-i] = 0\n    else:\n      B[M-1-i] = 1\n\nif K == 0:\n  k = 0\nelse:\n  k = int(\"\".join(map(str, reversed(B))), 2)\n\nans = 0\nfor a in A:\n  ans += a^k\n\nprint(ans)", "n,k = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nb = 1\nc = 0\nwhile b <= k:\n  b *= 2\n  c += 1\n\nB = [0]*(c)\nfor a in A:\n  for i in range(c):\n    if a>>i & 1 :      \n      B[i] += 1\n      \nx = 0\nfor b in range(c,-1,-1):\n  if x + (1<<b) > k:\n    continue\n  if B[b] < (n+1)//2:\n    x += 1<<b\n    \nans = 0\nfor a in A:\n  ans += x^a\nprint(ans)  \n", "n, k = list(map(int, input().split()))\nA = sorted(map(int, input().split()), reverse=True)\ncnt = [0 for _ in range(100)]\nm = A[0]\n\nfor i in range(100):\n    ten = 2 ** i\n    if ten > m:\n        break\n    for a in A:\n        if a < ten:\n            break\n        if (a >> i) & 1:\n            cnt[i] += 1\n\nfor m in range(100):\n    if 2 ** m > k+1:\n        j = m-1\n        break\n\ninitial = 0\nif i > j:\n    for m, c in enumerate(cnt[j + 1: i + 1], j + 1):\n        initial += 2 ** m * c\n\nbest = [0, ]\nfor m, c in enumerate(cnt[: j + 1]):\n    best.append(best[-1] + max(c, n - c) * 2 ** m)\n\nK = list()\nequal = [initial, ]\nfor m, c in enumerate(cnt[j::-1]):\n    y = (k+1 >> (j-m)) & 1\n    K.append(y)\n    if y==1:\n        equal.append(equal[-1] + (n - c) * 2 ** (j-m))\n    else:\n        equal.append(equal[-1] + c * 2 ** (j-m))\n\nans = 0\nK.reverse()\n\nfor i in range(j+1):\n    if K[i]:\n        ans = max(ans, best[i] + 2 ** i * cnt[i] + equal[-(i + 2)])\n\nprint(ans)\n", "def main():\n    N, K = list(map(int, input().split()))\n    *A, = list(map(int, input().split()))\n\n    def bit60(x):\n        *bit, = list(map(int, bin(x)[2:]))\n        zfill = 60 - len(bit)\n        ret = [0] * zfill\n        ret += bit\n        return ret\n\n    # print(*map(bit60, A))\n\n    ctr = [0] * 60\n    for bit in map(bit60, A):\n        for j in range(60):\n            ctr[j] += bit[j]\n\n    ans = 0\n    d = 1 << (60 - 1)\n    x = 0\n    for j in range(60):\n        if (ctr[j] < N - ctr[j]) and (x + d <= K):  # \u30d5\u30e9\u30b0\u3092\u7acb\u3066\u305f\u65b9\u304c\u5f97\u3059\u308b\n            x += d\n            ans += (N - ctr[j]) * d\n        else:\n            ans += ctr[j] * d\n        d >>= 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# D - XXOR\n\nimport sys\nreadline = sys.stdin.readline\n\nN, K = map(int, readline().split())\nA = list(int(x) for x in readline().split())\n\n# bits[i] := i\u6841\u76ee\u306b\u73fe\u308c\u308b\"1\"\u306e\u548c\nbits = [0] * 50\nfor i in range(N):\n    for j in range(50):\n        if A[i]>>j&1:\n            bits[j] += 1\n\n# dp[i][smaller] := \u4e0a\u304b\u3089(49, 48, 47...)i\u6841\u76ee\u307e\u3067\u6c7a\u3081\u305f\u6642\u306b\u3001\n# K\u3068\u540c\u3058\u3088\u3046\u306b\u9078\u3093\u3067\u884c\u3063\u305f\u3068\u304d(smaller = 0)\n# K\u4ee5\u4e0b\u3068\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d(smaller = 1)\n# \u306e\u305d\u308c\u305e\u308c\u306e\u6700\u5927\u5024\u3068\u3059\u308b\ndp = [[0] * 2 for _ in range(50)]\n\nfor i in range(49)[::-1]:\n    # \u4e0a\u304b\u3089\u9806\u306b\u30c1\u30a7\u30c3\u30af\u3059\u308b(49, 48, 47...2, 1, 0)\n    check_bit = 1<<i\n    # K\u306ei\u6841\u76ee\u304c\"1\"\u306e\u3068\u304d\n    if K&check_bit:\n        # X\u3092K\u4ee5\u4e0b\u306b\u3059\u308b\u5834\u5408\u3002\n        # i\u6841\u76ee\u306f\"0\"\u306b\u306a\u308b\u306e\u3067\u3001bits[i](*2^i)\u304c\u5f97\u70b9\u306b\u306a\u308b\u3002\n        dp[i][1] = dp[i+1][0] + (bits[i] * check_bit)\n        # \u4e00\u5ea6smaller=1\u306b\u306a\u3063\u305f\u3089smaller=1\u306b\u3057\u304b\u9077\u79fb\u3057\u306a\u3044\u3002\n        if dp[i+1][1] != 0:\n            dp[i][1] = max(dp[i][1], dp[i+1][1] + (max(N - bits[i], bits[i]) * check_bit))\n        # K\u306ei\u6841\u76ee\"1\"\u306e\u901a\u308a\u306b\u3059\u308b\u306e\u3067\u3001i\u6841\u76ee\u304c\u53cd\u8ee2\u3055\u308c\u308b\u3002\n        # \u3064\u307e\u308a\u3001\u5143\u3005\"0\"\u3060\u3063\u305f\u500b\u6570\u5206\u304c\u5f97\u70b9\u306b\u306a\u308b\u3002\n        dp[i][0] = dp[i+1][0] + ((N - bits[i]) * check_bit)\n    # K\u306ei\u6841\u76ee\u304c\"0\"\u306e\u3068\u304d\n    else:\n        # \u4e00\u5ea6smaller=1\u306b\u306a\u3063\u305f\u3089smaller=1\u306b\u3057\u304b\u9077\u79fb\u3057\u306a\u3044\u3002\n        # 0\u304b1\u304b\u306f\u6700\u5927\u5024\u304c\u5927\u304d\u304f\u306a\u308b\u65b9\u3092\u9078\u3079\u3070\u826f\u3044\u3002\n        if dp[i+1][1] != 0:\n            dp[i][1] = dp[i+1][1] + (max(N - bits[i], bits[i]) * check_bit)\n        # K\u306ei\u6841\u76ee\"0\"\u306e\u901a\u308a\u306b\u3059\u308b\u306e\u3067\u3001bits[i]\u304c\u5f97\u70b9\u306b\u306a\u308b\n        dp[i][0] = dp[i+1][0] + (bits[i] * check_bit)\n\nprint(max(dp[0][0], dp[0][1]))", "import sys\nfrom functools import lru_cache\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K, *A = list(map(int, read().split()))\n\n    counter = [0] * 40\n    for a in A:\n        for i in range(40):\n            if a & (1 << i):\n                counter[i] += 1\n\n    B = [0] * 40\n    for i in range(39):\n        if counter[i] < N - counter[i]:\n            B[i + 1] = B[i] + (1 << i)\n        else:\n            B[i + 1] = B[i]\n\n    C = [0] * 40\n    for i in range(39, 0, -1):\n        if K & (1 << i):\n            C[i - 1] = C[i] + (1 << i)\n        else:\n            C[i - 1] = C[i]\n\n    ans = 0\n    for a in A:\n        ans += K ^ a\n\n    for i in range(40):\n        if K & (1 << i):\n            x = B[i] + C[i]\n            res = 0\n            for a in A:\n                res += x ^ a\n            if ans < res:\n                ans = res\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# Python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN,K = map(int,input().split())\nA = list(map(int,input().split()))\n\n# B[i] : i\u6841\u76ee\u304c 1 \u306b\u306a\u3063\u3066\u3044\u308bA\u306e\u8981\u7d20\u6570\nB = [0] * 40\nfor a in A:\n    for i in range(40):\n        if a&(1<<i):\n            B[i] += 1\n\n# K\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u7121\u8996\u3057\u305f\u5834\u5408\u306e, \u6700\u9069\u306a X\n# \u3053\u308c\u306f\u6841\u3054\u3068\u306b\u6700\u9069\u5024\u3092\u8abf\u3079\u308c\u3070\u826f\u3044\nX = [0]*40\nfor i in range(40):\n    if B[i] <= N/2:\n        X[i] = 1\n\n# K \u3092 X \u306b\u5408\u308f\u305b\u305f\u8868\u73fe\u306b\u3059\u308b\nbitK = list(map(int, list(bin(K)[2:].zfill(40)[::-1])))\n\n# \u521d\u671f\u5024\u306fK\u3068\u4e00\u81f4\u3057\u305f\u5834\u5408\u306b\u3057\u3066\u304a\u304f\nans = 0\nfor i in range(40):\n    if bitK[i]==1:\n        ans += (N-B[i])<<i\n    else:\n        ans += B[i]<<i\n\n# K\u3068\u4e0d\u4e00\u81f4\u306b\u306a\u308b\u6700\u4e0a\u4f4d\u306e\u6841\nfor k in range(40):\n    # 0\u306e\u6841\u3067\u4e0d\u4e00\u81f4\u306b\u306a\u308b\u3053\u3068\u306f\u3042\u308a\u5f97\u306a\u3044\n    if bitK[k]==0:\n        continue\n\n    total = 0\n    leqK = False \n    for i in range(39,-1,-1):\n        # K\u4ee5\u4e0b\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u306a\u3089, \u8caa\u6b32\u306b\u6700\u9069\u5024\u3092\u3068\u308b\n        if leqK:\n            if X[i]==1:\n                total += (N-B[i])<<i\n            else:\n                total += B[i]<<i\n        # \u305d\u3046\u3067\u306a\u3044\u306a\u3089\n        else:\n            # K\u3068\u4e0d\u4e00\u81f4\u306b\u306a\u308b\u6700\u4e0a\u4f4d\u306e\u6841 \u3067\u3042\u308b\u306a\u3089, X \u306e\u8a72\u5f53\u6841\u3092 0 \u3068\u3057\u3066\u4e0d\u4e00\u81f4\u306b\u3059\u308b\n            if i==k:\n                total += B[i]<<i\n                leqK = True\n            # K\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\n            else:\n                if bitK[i]==1:\n                    total += (N-B[i])<<i\n                else:\n                    total += B[i]<<i\n    ans = max(total,ans)\n\nprint(ans)", "import sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    d = defaultdict(int)\n    for a in A:\n        if a == 0:\n            continue\n        digit = int(math.log2(a))\n        for i in range(digit + 1):\n            if 1 << i & a:\n                d[i] += 1\n\n    x = 0\n    if K != 0:\n        digit = int(math.log2(K))\n        for i in range(digit + 1)[::-1]:\n            if N / 2 <= d[i]:\n                continue\n            else:\n                if K < x + 2 ** i:\n                    continue\n                else:\n                    x += 2 ** i\n\n    ans = 0\n    for a in A:\n        ans += x ^ a\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(40, -1, -1):\n    j = 2 ** i\n    count = len([1 for temp in a if temp&j > 0])\n    if count < n - count and j <= k:\n        k -= j\n        count = n - count\n    ans += j * count\nprint(ans)", "def Z(): return int(input())\ndef ZZ(): return [int(_) for _ in input().split()]\n\ndef main():\n    N, K = ZZ()\n    A = ZZ()\n    if K == 0:\n        print((sum(A)))\n        return\n\n    bK = format(K, 'b')\n    msb = len(bK)\n    plus = [0] * msb\n\n    for a in A:\n        for i, b in enumerate(format(a, '0{}b'.format(msb))[::-1][:msb]): plus[i] += int(b)\n    e = 1\n    for i in range(msb):\n        plus[i] = e * (N - 2 * plus[i])\n        e *= 2\n\n    dp = [[0] * 2 for _ in range(msb)]\n    dp[0][0] = plus[i]\n    plus = plus[::-1]\n\n    for i in range(msb-1):\n        dp[i+1][0] = max(dp[i+1][0], dp[i][0] + plus[i+1] * int(bK[i+1]))\n        if int(bK[i+1]) == 1: dp[i+1][1] = max(dp[i+1][1], dp[i][0])\n        dp[i+1][1] = max(dp[i+1][1], dp[i][1], dp[i][1] + plus[i+1])\n    print((max(dp[msb-1]) + sum(A)))\n\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N,K = list(map(int,input().split()))\nA = list(map(int,input().split()))\nUP = max(A)\nUL = UP.bit_length()\nKL = K.bit_length()\nMAX = max(UL,KL)\nINF = float(\"inf\")\n#dp[i][j]: \u4e0a\u304b\u3089i\u6841\u76ee\u307e\u3067\u3092\u6c7a\u3081\u3066\u3001N\u672a\u6e80\u3067\u78ba\u5b9a\u306a\u3089j=1\u3001N\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u306a\u3089\u3070j=0\ndp = [[-INF] * 2 for _ in range(MAX+1)] #-INF\u306b\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u306a\u3044\u30b1\u30fc\u30b9\u304b\u3089\u6765\u3066\u3057\u307e\u3046\u3002\ndp[0][0]=0\nZF = True\nL = [[0]*2 for _ in range(MAX)]\nfor i in range(N):\n  for j in range(MAX):\n    if A[i]>>j&1 == 1:\n      L[MAX-1-j][1] += 1\n    else:\n      L[MAX-1-j][0] += 1\n\n#print(MAX,KL)\n#print(L)\nfor i in range(MAX):\n  fac = pow(2,(MAX-1-i))\n  if K>>(MAX-1-i)&1 == 1:\n    ZF = False\n  if ZF: #\u3053\u3053\u306e\u30d3\u30c3\u30c8\u306f\u5fc5\u305a0\uff0e\u3064\u307e\u308a1\u306e\u500b\u6570\u304c\u304b\u3051\u3089\u308c\u308b\u3002\n    dp[i+1][0] = dp[i][0] + fac*L[i][1]\n    dp[i+1][1] = 0\n  else:\n    if K>>(MAX-1-i)&1 == 1:\n      kbit = 1\n    else:\n      kbit = 0\n    #print(kbit,i)\n    if kbit == 1: #\u3069\u3061\u3089\u3067\u3082\u826f\u3044\n      dp[i+1][1] = max(dp[i][1] + fac*max(L[i]), dp[i][0] + fac*L[i][1]) #\u672a\u6e80\n      dp[i+1][0] = dp[i][0] + fac*L[i][0] #\u4e00\u81f4, kbit\u304c1\u306a\u306e\u30670\u306e\u500b\u6570\n    else: #\u5b8c\u5168\u4e00\u81f4\u306a\u30890\u306e\u307f\u3001\u305d\u308c\u4ee5\u5916\u306a\u3089\u3069\u3061\u3089\u3082\n      dp[i+1][1] = dp[i][1] + fac*max(L[i]) #\u672a\u6e80\n      dp[i+1][0] = dp[i][0] + fac*L[i][1] #\u4e00\u81f4 kbit\u304c0\u306a\u306e\u30671\u306e\u500b\u6570      \n#print(dp)\nans = max(dp[MAX])\nprint(ans)\n  \n", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nless = -float('inf')\neq = 0\n\nfor d in range(60)[::-1]:\n    mask = (1 << d)\n\n    one = len([0 for a in A if (a & mask) != 0])\n    zero = N - one\n\n    l = less + mask * max(one, zero)\n\n    if (K & mask) != 0:\n        l = max(l, eq + mask * one)\n\n    less = l\n    eq += mask * (one if (K & mask == 0) else zero)\n\nprint((max(less, eq)))\n", "import sys\nfrom functools import lru_cache\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K, *A = list(map(int, read().split()))\n\n    counter = [0] * 40\n    for a in A:\n        for i in range(40):\n            if a & (1 << i):\n                counter[i] += 1\n\n    Y = 0\n    for i in range(39, -1, -1):\n        Y <<= 1\n        if counter[i] < N - counter[i]:\n            Y += 1\n\n    ans = 0\n    for a in A:\n        ans += K ^ a\n    for i in range(40):\n        if K & (1 << i):\n            x = ((K >> (i + 1)) << (i + 1)) + Y % (1 << i)\n            res = 0\n            for a in A:\n                res += x ^ a\n            if ans < res:\n                ans = res\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom functools import lru_cache\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K, *A = list(map(int, read().split()))\n\n    K = list(map(int, f'{K:>040b}'))\n    A_bin = [list(map(int, f'{a:>040b}')) for a in A]\n\n    B = [0] * 40\n    for a in A_bin:\n        for i, bit in enumerate(a):\n            B[i] += bit\n\n    B = [1 if b < N - b else 0 for b in B]\n\n    @lru_cache(maxsize=None)\n    def rec(i, x, smaller):\n        if i == 40:\n            ans = 0\n            for a in A:\n                ans += x ^ a\n            return ans\n        elif smaller:\n            return rec(i + 1, (x << 1) + B[i], True)\n        elif K[i] <= B[i]:\n            return rec(i + 1, (x << 1) + K[i], False)\n        else:\n            return rec(i + 1, (x << 1) + B[i], True)\n\n    print((rec(0, 0, False)))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N,K = map(int,input().split())\nA = list(map(int,input().split()))\nt = 2**40\nans = 0\n\nwhile t:\n  c = sum([(A[n]&t)//t for n in range(N)])\n  if K<t or c*2>=N:\n    ans+=t*c\n  else:\n    ans+=t*(N-c)\n    K-=t\n  t//=2\n\nprint(ans)", "import numpy as np\n\ndef binstr(n):\n    return np.array(list(map(int,list(bin(n)[2:].rjust(40,'0')))))\n\nN,K = map(int,input().split())\nA = list(map(int,input().split()))\n\nAA = sum([binstr(i) for i in A])\nX = 0\nans = 0\nfor i in range(40):\n    if AA[i] > N-AA[i]:   # 0\u306b\u3057\u305f\u65b9\u304c\u3044\u3044\n        ans += AA[i]*(2**(39-i))\n    else:                 # 1\u306b\u3057\u305f\u65b9\u304c\u3044\u3044\n        if X+2**(39-i) <= K:    # 1\n            ans += (N-AA[i])*(2**(39-i))\n            X += 2**(39-i)\n        else:                  # 0\n            ans += AA[i]*(2**(39-i))\n\nprint(ans)", "N,K=list(map(int,input().split()))\nA=list(map(int, input().split()))\ndp=[[0,0]for _ in range(42)]\n#2\u306e41\u4e57\u304c10**12\u3068\u3061\u3087\u3063\u3068\n\nfor i in range(1,42):\n  if dp[i-1][1]==1:\n    dp[i][1]=1\n  \n  cnt=0\n  #\u30ea\u30b9\u30c8A\u5185\u306ei\u30b1\u30bf\u76ee\u306e1\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n  for j in range(N):\n    if (A[j]>>(41-i))&1==1:\n      cnt+=1\n      \n  #1\u306e\u65b9\u304c\u591a\u3044\u3068\u304d\u306f\u30010\u3092\u5f53\u3066\u306f\u3081\u308b\n  if cnt>=N-cnt:\n    dp[i][0]=dp[i-1][0]+(2**(41-i))*cnt\n    if (K>>(41-i))&1==1:\n      dp[i][1]=1\n  else:\n    if dp[i][1]==1:\n      dp[i][0]=dp[i-1][0]+(2**(41-i))*(N-cnt)\n    else:\n      if (K>>(41-i))&1==1:\n        #\u305d\u306e\u30b1\u30bf\u304c1\u306a\u3089\u3070\u554f\u984c\u306a\u3057\n        dp[i][0]=dp[i-1][0]+(2**(41-i))*(N-cnt)\n      else:\n        #\u6841\u304c0\u306a\u3089\u30700\u306b\u3059\u308b\u3057\u304b\u306a\u3044\n        dp[i][0]=dp[i-1][0]+(2**(41-i))*cnt\nprint((dp[41][0]))\n", "import sys\ninput = sys.stdin.readline\n\n\ndef read():\n    N, K = list(map(int, input().strip().split()))\n    A = list(map(int, input().strip().split()))\n    return N, K, A\n\n\ndef solve(N, K, A):\n    L = max(K, max(A), 1).bit_length()\n    k = [0 for i in range(L)]\n    i = 0\n    while K:\n        k[i] += K & 1\n        i += 1\n        K >>= 1\n    b = [0 for i in range(L)]\n    for a in A:\n        i = 0\n        x = a\n        while x:\n            b[i] += x & 1\n            i += 1\n            x >>= 1\n    k = k[::-1]\n    b = b[::-1]\n    # dp[i][1]: \u4e0a\u4f4di\u30d3\u30c3\u30c8\u304cK\u3068\u7b49\u3057\u3044\u3068\u304d\u306e\u6700\u5927\u5024\n    # dp[i][0]: \u4e0a\u4f4di\u30d3\u30c3\u30c8\u304cK\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d\u306e\u6700\u5927\u5024\n    dp = [[0, 0] for i in range(L+1)]\n    nonzero = False\n    for i in range(L):\n        if k[i] == 1:\n            dp[i+1][1] = (dp[i][1] << 1) + (N-b[i])\n            if nonzero:\n                dp[i+1][0] = max((dp[i][1] << 1) + b[i], (dp[i][0] << 1) + max(b[i], N-b[i]))\n            else:\n                dp[i+1][0] = (dp[i][1] << 1) + b[i]\n            nonzero = True\n        else:\n            dp[i+1][1] = (dp[i][1] << 1) + b[i]\n            dp[i+1][0] = (dp[i][0] << 1) + max(b[i], N-b[i]) if nonzero else 0\n    return max(dp[L][1], dp[L][0])\n\n\ndef __starting_point():\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print((\"%s\" % str(outputs)))\n\n__starting_point()", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nd={j:0 for j in range(41)}\nfor ai in a:\n  for j in range(41):\n    if (ai>>j) & 1:\n      d[j]+=1\nans=0\nl=len(bin(k))-3\nimport sys\nsys.setrecursionlimit(10**7)\n\ndef dp(m,t): # \u4e00\u756a\u5de6\u306e\u6841\uff08l\u6841\u76ee\uff09\u304b\u3089\u8003\u3048\u308b\u3002\u4e00\u756a\u53f3\u306e\u6841\u306f0\u6841\u76ee\u3002t:k\u3088\u308a\u771f\u306b\u5c0f\u3055\u3044\u304b\u3069\u3046\u304b\n  if m<0:return 0\n  ret=0\n  if t==1: # \u4ee5\u964d\u306f\u597d\u304d\u306b\u9078\u3093\u3067\u3044\u3044\u306e\u3067\u3001\u6700\u9069\u306a\u6570\u5b57\u3092\u9078\u3076\u3002\u4e00\u610f\u3002\n    for i in range(m+1):\n      tmp=max(0,n-2*d[i])\n      ret+=pow(2,i)*tmp\n  else:\n    if (k>>m)&1: #k\u306em\u6841\u76ee\u304c1\u306a\u30891\u304b0\u3092\u9078\u3079\u308b\n      # 1\u306b\u3059\u308b\u3068\u304d\n      tmp1=dp(m-1,0)+(n-2*d[m])*pow(2,m)\n      # 0\u306b\u3059\u308b\u3068\u304d\n      tmp0=dp(m-1,1)                    \n      ret+=max(tmp1,tmp0)\n    else:\n      ret+=dp(m-1,0)\n  return ret\n\nprint(sum(a)+dp(l,0))", "def main():\n    N, K = list(map(int, input().split()))\n    *A, = list(map(int, input().split()))\n\n    ctr = [0] * 60\n\n    for x in A:\n        *bit, = list(map(int, bin(x)[2:]))\n        bit.reverse()\n        for j, b in enumerate(bit):\n            i = (60 - 1) - j\n            ctr[i] += b\n\n    ans = 0\n    d = 1 << (60 - 1)\n    x = 0\n    for j, cnt in enumerate(ctr):\n        if (cnt < N - cnt) and (x + d <= K):  # \u30d5\u30e9\u30b0\u3092\u7acb\u3066\u305f\u65b9\u304c\u5f97\u3059\u308b\n            x += d\n            ans += (N - cnt) * d\n        else:\n            ans += cnt * d\n        d >>= 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n\nst = lambda n: bin(n)[2:]\nN,K = map(int,input().split())\na = np.array([int(i) for i in input().split()])\n\nMAX = 10**12\nmm = MAX.bit_length()\nchk = [((a >> K) & 1).sum() for K in range(mm)]\n\nll = []\nq = 0\nfor num,cc in enumerate(chk):\n  if cc < N/2:\n    q += 2**(num)\n  ll.append((num,2**num*(N-cc),2**num*cc))\n    \nmax_V = 0\nKK = (K+1).bit_length()\nsk = st(K+1).zfill(mm)\nsq = st(q).zfill(mm)\n\nfor i in range(KK):\n  if (K+1)>>i&1 == 1:\n    op = q\n    if q>>i&1 == 1:\n      op -= 2**i\n    I = KK-i\n    for j in range(mm-KK+I):\n      if sq[j] == '1' and sk[j] == '0':\n        op -= 2**(mm-1-j)\n    V = 0\n    for nm,v_1,v_0 in ll:\n      if op>>nm & 1 == 1:     \n        V += v_1\n      else:\n        V += v_0\n    max_V = max(max_V, V)\n    \nprint(max_V)", "import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = K\n    k = 1\n    while K > 1:\n        K //= 2\n        k += 1\n    if K == 0:\n        print((sum(A)))\n        return\n    cnt = [0 for _ in range(k)]\n    for a in A:\n        for i in range(k):\n            if (a >> i) & 1:\n                cnt[i] += 1\n    X = 0\n    if N % 2 == 0:\n        n = N // 2 - 1\n    else:\n        n = N // 2\n    for i in range(k):\n        if cnt[k - i - 1] <= n:\n            if X + (2 ** (k - i - 1)) <= B:\n                X += 2 ** (k - i - 1)\n    answer = 0\n    for a in A:\n        answer += X ^ a\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# bit\u3054\u3068\u306b\u72ec\u7acb\u306b\u8003\u3048\u3066\u3088\u3044\u3002\n# \u3042\u308b\u30d3\u30c3\u30c8\u3092\u53cd\u8ee2\u3059\u308b\u304b\u3069\u3046\u304b? = \u3042\u308b\u4f4d\u306b\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u6570\u304c\u5168\u4f53\u306e\u534a\u6570\u3088\u308a\u591a\u3044\u304b\u5c11\u306a\u3044\u304b?\n# K\u4ee5\u4e0b\u3068\u8a00\u308f\u305a\u5168\u4f53\u306e\u6700\u9069\u306a\u3089\u5404bit\u3054\u3068\u306b\u8003\u3048\u3066\u8db3\u3057\u3066\u304a\u3057\u307e\u3044\u3002\n# \u3057\u304b\u3057K\u4ee5\u4e0b\u306b\u9650\u5b9a\u3055\u308c\u3066\u3044\u308b\u2026\u2026\n\n# 0\u4ee5\u4e0aK\u4ee5\u4e0b\u306e\u6574\u6570X\u30921\u500b\u9078\u3076\n# \u3042\u308b\u4f4di\u306e\u30d3\u30c3\u30c8\u304c0\u306a\u3089\u3070\u3001\u30b9\u30b3\u30a2\u306b\u5909\u5316\u306a\u3057\n# \u3042\u308b\u4f4di\u306e\u30d3\u30c3\u30c8\u304c1\u306a\u3089\u3070\u3001\u30b9\u30b3\u30a2+=S_i \u305f\u3060\u3057S_i\u306f\u8ca0\u306e\u5834\u5408\u3082\u3042\u308b\n# \u3053\u308c\u3092\u7e70\u308a\u8fd4\u3057\u3066X\u306b\u5bfe\u5fdc\u3059\u308b\u30b9\u30b3\u30a2\u3092\u6c7a\u3081\u308b\n# \u30b9\u30b3\u30a2\u306e\u6700\u5927\u5024\u306f?\n# K\u4ee5\u4e0b\u3068\u3044\u3046\u6210\u7d04\u304c\u306a\u3051\u308c\u3070\u3001\u30b9\u30b3\u30a2\u304c\u6b63\u306e\u3082\u306e\u3060\u3051\u9078\u3079\u3070\u7d42\u4e86\u3002\n\n# 0~1023\u306e\u306a\u304b\u306a\u3089862 = '0b1101011110' \u304c\u6700\u9ad8\u30b9\u30b3\u30a2\n# \u3060\u3051\u3069\u4e0a\u9650K\u306f852\u306a\u306e\u3067\u300110\u4ee5\u4e0a\u6e1b\u3089\u3055\u306d\u3070\n# -512, -256, -64, -16, -8-4, -8-2 \u306e\u3046\u3061\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u3082\u306e\u3002\n\n\nn, k = list(map(int, input().split()))\nnums = list(map(int, input().split()))\n\nkp1_2 = format(k+1, 'b')\ndigit_len = len(kp1_2)\nsum_nums = sum(nums)\n\nbit_count_dict = {}\nfor digit in range(digit_len):\n    bit_count = 0\n    for num in nums:\n        if (2 ** digit) & num :\n            bit_count += 1\n    bit_count_dict[digit] = bit_count\n\nans = 0\nfor digit in range(digit_len):\n    temp = kp1_2\n    ans_candi = sum_nums\n    if kp1_2[digit_len-1-digit] == '1':\n        # kp1_2[digit]\u30920\u306b\u3059\u308b\u3001\u305d\u308c\u3088\u308a\u4e0a\u4f4d\u306fk+1\u3068\u540c\u3058\u3001\u4e0b\u4f4d\u306f\u4efb\u610f\u306a\u306e\u3067\u6700\u9069\u306b\u53d6\u308c\u308b\n        for d_upper in range(digit+1, digit_len):\n            if kp1_2[digit_len-1-d_upper] == '1':\n                ans_candi += (n - 2 * bit_count_dict[d_upper]) * 2 ** d_upper\n        for d_lower in range(0, digit):\n            if n - 2 * bit_count_dict[d_lower] > 0:\n                ans_candi += (n - 2 * bit_count_dict[d_lower]) * 2 ** d_lower\n        \n        ans = max(ans, ans_candi)\n\nprint(ans)\n"]