["import sys\n\na, b, c = list(map(int, input().split()))\nif c - b + a < 0 or (c - b + a) % 2 == 1:\n    print(\"Impossible\")\n    return\nf = (c - b + a) // 2\ne = b - a + f\nd = a - f\nif d < 0 or f < 0 or e < 0:\n    print(\"Impossible\")\n    return    \nprint(d, e, f)", "from fractions import *\nimport sys\ndef check(a):\n    if a % 2 != 0:\n        return False\n    if a<0:\n        return False\n    return True\nreadln = lambda:map(int,input().split())\na,b,c = readln()\nif not check(b+c-a) or not check(a+b-c) or not check(a+c-b):\n    print(\"Impossible\")\n    return\ns23 = (b+c-a)//2\ns12 = (a+b-c)//2\ns13 = (a+c-b) //2\nprint(s12,s23,s13)", "3\n\nimport sys\n\ndef solve(a, b, c):\n    ix, iy, iz = 3, 2, 1\n    # sort\n    if b < a:\n        a, b = b, a\n        ix, iy = iy, ix\n    if c < a:\n        a, c = c, a\n        iz, iy = iy, iz\n    if c < b:\n        b, c = c, b\n        iz, ix = ix, iz\n    # solve\n    x2 = a + (c - b)\n    if x2 % 2 != 0:\n        print('Impossible')\n        return\n    x = x2 // 2\n    z = a - x\n    y = c - x\n    s = list(sorted([x, y, z]))\n    if not all([n >= 0 for n in s]):\n        print('Impossible')\n        return\n    if s.count(0) > 1:\n        print('Impossible')\n        return\n    sol = [(ix, x), (iy, y), (iz, z)]\n    sol.sort()\n    print(sol[0][1], sol[1][1], sol[2][1])\n\na, b, c = [int(x) for x in sys.stdin.readline().strip().split()]\nsolve(a, b, c)\n", "#Simple Molecules\n\ndata = input().split(\" \")\na = int(data[0])\nb = int(data[1])\nc = int(data[2])\n\nx = 0\ny = 0\nz = 0\n\nif (a-b+c) %2 != 0:\n\tprint(\"Impossible\")\nelse:\n\tz = int((a-b+c)/2)\n\tx = int(a - z)\n\ty = int(b - x)\n\n\n\tif (x == y == 0) or (x == z == 0) or (z == y == 0):\n\t\tprint(\"Impossible\")\n\telif min(x, y, z) >= 0:\n\t\tprint(\"%s %s %s\" %(x,y,z))\n\telse:\n\t\tprint(\"Impossible\")", "a, b, c = list(map(int, input().split()))\n\nx = (a + b - c) // 2\ny = (b + c - a) // 2\nz = (a + c - b) // 2\n\nif x < 0 or y < 0 or z < 0 or (a + b + c) % 2 != 0:\n\tprint(\"Impossible\")\nelse:\n\tprint(\"{} {} {}\".format(x, y, z))\n", "v = [[0] * 2 for i in range(3)]\nfor i in range(3):\n    v[i][1] = i\nv[0][0], v[1][0], v[2][0] = map(int, input().split())\nways = [[0] * 3 for i in range(3)]\nv.sort(reverse = True)\ncord = [0] * 3\nfor i in range(3):\n    for j in range(3):\n        if v[j][1] == i:\n            cord[j] = i\ncheck = False\nfor i in range(v[1][0], 0, -1):\n    if v[0][0] - i + v[1][0] - i == v[2][0]:\n        ways[cord[0]][cord[1]] = i\n        ways[cord[1]][cord[2]] = v[1][0] - i\n        ways[cord[2]][cord[0]] = v[0][0] - i\n        ways[cord[1]][cord[0]] = i\n        ways[cord[2]][cord[1]] = v[1][0] - i\n        ways[cord[0]][cord[2]] = v[0][0] - i\n        check = True\n        break\nif check:\n    print(ways[0][1], ways[1][2], ways[2][0])\nelse:\n    print('Impossible')", "while(1):\n    try:\n        a=[0,0,0]\n        a[0],a[1],a[2]=list(map(int,input().split()))\n        b=sorted(a)\n        c=sum(b[:2])\n        d=(c-b[2])//2\n        if b[2]>c or (c-b[2])%2!=0:\n            print(\"Impossible\")\n        else:\n            ind=a.index(b[2])+1\n            if ind==1:\n                print(a[1]-d,d,b[2]-(a[1]-d))\n            elif ind==2:\n                print(a[0]-d,b[2]-(a[0]-d),d)\n            else:\n                print(d,a[1]-d,b[2]-(a[1]-d))\n    except EOFError:\n        break\n                \n\n                \n            \n", "a,b,c=list(map(int,input().split()))\n\n\nx=a\ny=0\ndone=False\nwhile(x>=0):\n    if((b-y)==(c-x) and c-x>=0):\n        print(y,b-y,x)\n        done=True\n        break\n    x-=1\n    y+=1\nif(not done):\n    print(\"Impossible\")\n", "def __starting_point():\n    inp = input()\n    arr = inp.split(' ')\n    L = [int(x) for x in arr]\n    ans = [0,0,0]\n    s = 0\n    for l in L:\n        s+=l\n    imp = False\n    for l in L:\n        if l>s/2:\n            imp = True\n    if imp:\n        print('Impossible')\n    else:\n##        m = min(L)//2\n##        for i in (0,1,2):\n##            ans[i]+=m\n##            L[i]-=m*2\n####        print(ans)\n        imp = False\n        if L[0]==min(L):\n            if L[1]>L[2]:\n                bonds = L[1]-L[2]\n                ans[0] += bonds\n                L[0]-= bonds\n                L[1] -=bonds\n            else:\n                bonds = L[2]-L[1]\n                ans[2] += bonds\n                L[0] -= bonds\n                L[2] -= bonds\n            if L[0]%2==1:\n                imp = True\n            else:\n                bonds = L[0]//2\n                ans[0] += bonds\n                ans[2] += bonds\n                ans[1] += (L[1]+L[2])//2 - bonds\n        elif L[1]==min(L):\n            if L[0]>L[2]:\n                bonds = L[0]-L[2]\n                ans[0] += bonds\n                L[1]-= bonds\n                L[0] -= bonds\n            else:\n                bonds = L[2]-L[0]\n                ans[1] += bonds\n                L[1] -= bonds\n                L[2] -= bonds \n            if L[1]%2==1:\n                imp = True\n            else:\n                bonds = L[1]//2\n                ans[0] += bonds\n                ans[1] += bonds\n                ans[2] += (L[0]+L[2])//2 - bonds\n\n        else:\n            if L[0]>L[1]:\n                bonds = L[0]-L[1]\n                ans[2] += bonds\n                L[2]-= bonds\n                L[0]-=bonds\n            else:\n                bonds = L[1]-L[0]\n                ans[1] += bonds\n                L[2] -= bonds\n                L[1] -= bonds\n            if L[2]%2==1:\n                imp = True\n            else:\n                bonds = L[2]//2\n                ans[2] += bonds\n                ans[1] += bonds\n                ans[0] += (L[0]+L[1])//2 - bonds\n            \n        for i in ans:\n            if i<0:\n                imp = True\n        if imp:\n            print('Impossible')\n        else:\n            for i in range(3):\n                print(ans[i],end=' ')\n            print()\n\n__starting_point()", "a,b,c = map(int, input().split())\nx = ((a+b)-c)//2\ny = ((b+c)-a)//2\nz = ((a+c)-b)//2\nif (x + z) == a and (x+y) == b and (y + z) == c and x > -1 and y > -1 and z > -1:\n   print(x,y,z, sep = ' ')\nelse:\n    print(\"Impossible\")\n", "def solve(a,b,c):\n    #min of all 3\n    # find all combinations\n    #check equality\n    for i in range(a+1):\n        if b >= i and (c+i) >= a and (b-i) == (c-a+i):\n            print(i,b-i,a-i)\n            return\n    print('Impossible')\n\na,b,c = list(map(int,input().split(' ')))\nsolve(a,b,c)\n", "a=input().split(' ')\nfirst=int(a[0])\nsecond=int(a[1])\nthird=int(a[2])\nsum=(first+second+third)\nif sum%2==1:\n    print(\"Impossible\")\nelse:\n    x=first\n    y=second\n    z=third\n    if x-int(x)!=0 or y-int(y)!=0 or z-int(z)!=0:\n        print(\"Impossible\")\n\n    else:\n        x=int(sum/2-third)\n        y=int(sum/2-first)\n        z=int(sum/2-second)\n        if x<0 or y<0 or z<0 or x==0 and y==0 and z==0:\n            print(\"Impossible\")\n        else:\n            print(x, y, z)\n    \n", "a,b,c = list(map (int, input().split()))\nl = [(a,0),(b,1),(c,2)]\nl.sort ()\nm = {}\n(a,x),(b,y),(c,z) = l\nif a+b >= c and (a+b-c)%2 == 0:\n  tmp = m[(x,y)] = m[(y,x)] = (a+b-c) // 2\n  m[(x,z)] = m[(z,x)] = a-tmp\n  m[(y,z)] = m[(z,y)] = b-tmp\n  print(m[(0,1)],m[(1,2)],m[(0,2)])\nelse:\n  print ('Impossible')\n", "a,b,c = [int(i) for i in input().split()]\nif  ((b-c+a) >= 0) and ((b-c+a) % 2 == 0): \n    if ((b-c+a)/2 == (b-c+a)//2):\n        y = (b-c+a) // 2\n    x = b - y\n    z = c - x \n    if (x > -1) and (y > -1) and (z > -1):\n        print(y,x,z)\n    else:\n        print(\"Impossible\")\nelse:\n    print(\"Impossible\")", "a, b, c = [int(x) for x in input().split()]\n\ndef solve(a, b, c):\n    for i in range(a+1):\n        l1=i\n        l2=b-i\n        l3 = a-i + l2\n        if l3 == c and l3>=0 and l2>=0 and(l2!=0 or l3!=0):\n            print(l1, end=' ')\n            print(l2, end=' ')\n            print(a-i)\n            return\n    print('Impossible')\n\nsolve(a, b, c)\n\n\n", "a, b, c = map(int, input().split())\nx = a\ny = b\nz = c\ng = 0\nif a > b + c or b > a + c or c > a + b or (a + b + c) % 2 != 0:\n    print('Impossible')\n    return \nif a >= b and a >= c:\n    while x != y + z:\n        g += 1\n        y -= 1\n        z -= 1\n    print(y, g, z)\n    return\nif b >= a and b >= c:\n    while y != x + z:\n        g += 1\n        x -= 1\n        z -= 1\n    print(x, z, g)\n    return\nif c >= a and c >= b:\n    while z != x + y:\n        g += 1\n        x -= 1\n        y -= 1\n    print(g, y, x) ", "(a, b, c) = (int(s) for s in input().split())\nx = (a + b - c) // 2\ny = b - x\nz = c - y\nif 2 * x == a + b - c and x >= 0 and y >= 0 and z >= 0:\n    print(x, y, z)\nelse:\n    print('Impossible')\n", "done=False\n        \na,b,c=list(map(int,input().split()))\nfor i in range(0,a+1):\n    if ((c-i)==(b-a+i))and(c-i>=0):\n        print(a-i,c-i,i)\n        done=True\n        break\n\nif not done: print('Impossible')    \n\n\n", "a, b, c = map(int, input().split())\n\nn = abs(a - b)\nif c < n or a + b < c or (c - n) % 2 != 0:\n  print(\"Impossible\")\nelse:\n  m = (c - n) // 2\n  if a > b:\n    print(b - m, m, c - m)\n  else:\n    print(a - m, c - m, m)", "v = list(map(int, input().split()))\nfound = False\n\n\nfor i in range(v[0] + 1):\n\ta = i\n\tb = v[0] - i\n\n\tif (v[1] - a) < 0 or v[2] - b < 0:\n\t\tcontinue\n\n\tif (v[1] - a) == v[2] - b:\n\t\tprint(a, v[1] - a, b)\n\t\tfound = True\n\t\tbreak\n\nif not found:\n\tprint(\"Impossible\")", "a, b, c = [int(x) for x in input().split()]\nfor x in range(min(a+1, b+1)):\n  if a-x <= c and c-a+x == b-x:\n    print(x, b-x, a-x)\n    return\nprint(\"Impossible\")\n", "a, b, c = map(int, input().split())\nif (a + b + c) < 2 * max(a, b, c) or (a + b + c) % 2: print('Impossible')\nelse: print((a + b - c) // 2, (b + c - a) // 2, (a + c - b) // 2)", "def main(nums):\n\tt = nums[0]\n\tfor i in range(0, t+1): #between 1->2\n\t\tq = nums[1] #must be at 2\n\t\tw = q-i #between 2->3\n\t\te = t-i #between 1->3\n\t\tr = nums[2] #must be at 3\n\t\tf = w+e #for real at 3\n\n\t\tif r!=f or w<0:\n\t\t\tcontinue\n\t\telse:\n\t\t\treturn '{} {} {}'.format(i, w, e)\n\n\treturn 'Impossible'\n\ndef init():\n\tnums = list(map(int, input().split()))\n\n\tprint(main(nums))\n\ninit()", "def isValid(x):\n    if x >= 0 and x.is_integer():\n        return True\n\ndef main():\n    n1, n2, n3 = [int(x) for x in input().split()]\n    a = 0.5 * (n3 - n2 + n1)\n    b = n3 - a\n    c = n1 - a\n    if isValid(a) and isValid(b) and isValid(c):\n        print(' '.join(str(int(x)) for x in [c, b, a]))\n    else:\n        print('Impossible')\n\nmain()"]