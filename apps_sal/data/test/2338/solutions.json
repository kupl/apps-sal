["3\n\ndef readln(): return tuple(map(int, input().split()))\n\nn, = readln()\nans = []\nfor x, y in sorted([readln() for _ in range(n)], key=lambda x: abs(x[0]) + abs(x[1])):\n    if x > 0:\n        ans.append('1 %d R' % x)\n    if x < 0:\n        ans.append('1 %d L' % -x)\n    if y > 0:\n        ans.append('1 %d U' % y)\n    if y < 0:\n        ans.append('1 %d D' % -y)\n    ans.append('2')\n    if x > 0:\n        ans.append('1 %d L' % x)\n    if x < 0:\n        ans.append('1 %d R' % -x)\n    if y > 0:\n        ans.append('1 %d D' % y)\n    if y < 0:\n        ans.append('1 %d U' % -y)\n    ans.append('3')\nprint(len(ans))\nprint('\\n'.join(ans))\n", "def f(i, j):\n    x, y = str(abs(i)), str(abs(j))\n    l, r, u, d = ' L', ' R', ' U', ' D'\n    if i < 0: l, r = r, l\n    if j < 0: u, d = d, u\n    if i:\n        if j: return ['1 ' + x + r, '1 ' + y + u, '2', '1 ' + x + l, '1 ' + y + d, '3']\n        else: return ['1 ' + x + r, '2', '1 ' + x + l, '3']\n    else: return ['1 ' + y + u, '2', '1 ' + y + d, '3']\n\np, n = [], int(input())\nt = [(abs(i) + abs(j), i, j) for i, j in tuple(map(int, input().split()) for i in range(n))]\nt.sort()\nfor r, i, j in t:\n    p += f(i, j)\nprint(len(p))\nprint('\\n'.join(p))", "def f(i, j):\n    x, y = str(abs(i)), str(abs(j))\n    l, r, u, d = ' L', ' R', ' U', ' D'\n    if i < 0: l, r = r, l\n    if j < 0: u, d = d, u\n    if i:\n        if j: return ['1 ' + x + r, '1 ' + y + u, '2', '1 ' + x + l, '1 ' + y + d, '3']\n        else: return ['1 ' + x + r, '2', '1 ' + x + l, '3']\n    else: return ['1 ' + y + u, '2', '1 ' + y + d, '3']\n\np, n = [], int(input())\nt = [(abs(i) + abs(j), i, j) for i, j in tuple(map(int, input().split()) for i in range(n))]\nt.sort()\nfor r, i, j in t:\n    p += f(i, j)\nprint(len(p))\nprint('\\n'.join(p))", "def f(i, j):\n\n    x, y = str(abs(i)), str(abs(j))\n\n    l, r, u, d = ' L', ' R', ' U', ' D'\n\n    if i < 0: l, r = r, l\n\n    if j < 0: u, d = d, u\n\n    if i:\n\n        if j: return ['1 ' + x + r, '1 ' + y + u, '2', '1 ' + x + l, '1 ' + y + d, '3']\n\n        else: return ['1 ' + x + r, '2', '1 ' + x + l, '3']\n\n    else: return ['1 ' + y + u, '2', '1 ' + y + d, '3']\n\n\n\np, n = [], int(input())\n\nt = [(abs(i) + abs(j), i, j) for i, j in tuple(list(map(int, input().split())) for i in range(n))]\n\nt.sort()\n\nfor r, i, j in t:\n\n    p += f(i, j)\n\nprint(len(p))\n\nprint('\\n'.join(p))\n\n\n\n# Made By Mostafa_Khaled\n", "from sys import stdin\ninput = stdin.readline\nn = int(input())\nseg = [list(map(int, input().split())) for _ in range(n)]\nseg = sorted(seg, key=lambda x : abs(x[0]) + abs(x[1]))\nres = []\nfor x, y in seg:\n    if x > 0: res.append('1 %d %c' % (x, 'R'))\n    if x < 0: res.append('1 %d %c' % (-x, 'L'))\n    if y > 0: res.append('1 %d %c' % (y, 'U'))\n    if y < 0: res.append('1 %d %c' % (-y, 'D'))\n    res.append('2')\n    if x > 0: res.append('1 %d %c' % (x, 'L'))\n    if x < 0: res.append('1 %d %c' % (-x, 'R'))\n    if y > 0: res.append('1 %d %c' % (y, 'D'))\n    if y < 0: res.append('1 %d %c' % (-y, 'U'))\n    res.append('3')    \nprint(len(res))\nprint('\\n'.join(res))\n", "import sys\n\ndef dist(p):\n    return abs(p[0]) + abs(p[1])\n\nn = int(input())\n\npts = []\nfor i in range(n):\n    pts.append(tuple(map(int, input().split())))\n\npts.sort(key=dist)\n\nops = []\n\ndef move(s, t, direc):\n    if s == t: return\n    if t > s: ops.append('1 {} {}'.format(t - s, direc[0]))\n    else: ops.append('1 {} {}'.format(s - t, direc[1]))\n\nfor p in pts:\n    move(0, p[0], 'RL')\n    move(0, p[1], 'UD')\n    ops.append('2')\n    move(p[0], 0, 'RL')\n    move(p[1], 0, 'UD')\n    ops.append('3')\n\nsys.stdout.write(str(len(ops))+'\\n')\nsys.stdout.write('\\n'.join(ops))\n    \n\n\n\n", "n = int(input())\narr = [(abs(i) + abs(j), i, j) for i, j in tuple(list(map(int, input().split())) for i in range(n))]\narr.sort()\nans = []\nfor z, x, y in arr:\n    X, Y = str(abs(x)), str(abs(y))\n    l, r, u, d = ' L', ' R', ' U', ' D'\n    if x < 0: l, r = r, l\n    if y < 0: u, d = d, u\n    if x:\n        if y: ans += ['1 ' + X + r, '1 ' + Y + u, '2', '1 ' + X + l, '1 ' + Y + d, '3']\n        else: ans += ['1 ' + X + r, '2', '1 ' + X + l, '3']\n    else: ans += ['1 ' + Y + u, '2', '1 ' + Y + d, '3']\nprint(len(ans))\nprint('\\n'.join(ans))\n", "from bisect import bisect_left as bl, bisect_right as br, insort\nimport sys\nimport heapq\n#from math import *\nfrom collections import defaultdict as dd, deque\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\n#sys.setrecursionlimit(100000)\n\n\nn=int(data())\nA=[]\nans=[]\nd=dd(list)\nfor i in range(n):\n    x,y=mdata()\n    A.append((x,y))\nA.sort(key=lambda x:abs(x[0])+abs(x[1]))\nfor i in A:\n    x,y=i\n    if x > 0:\n        ans.append('1 %d R' % x)\n    elif x < 0:\n        ans.append('1 %d L' % -x)\n    if y > 0:\n        ans.append('1 %d U' % y)\n    elif y < 0:\n        ans.append('1 %d D' % -y)\n    ans.append('2')\n    if x > 0:\n        ans.append('1 %d L' % x)\n    elif x < 0:\n        ans.append('1 %d R' % -x)\n    if y > 0:\n        ans.append('1 %d D' % y)\n    elif y < 0:\n        ans.append('1 %d U' % -y)\n    ans.append('3')\nprint(len(ans))\nprint('\\n'.join(ans))\n\n\n", "from sys import stdin, stdout\n\nn = int(stdin.readline())\npos = []\nfor i in range(n):\n    x, y = list(map( int,stdin.readline().split() ))\n    pos.append([x,y])\npos = sorted( pos,key=lambda pos: abs(pos[0])+abs(pos[1]) )\n# print(pos)\nmoves = []\nfor p in pos:\n    x,y = p\n    xNeg,yNeg=False,False\n    xPos,yPos=False,False\n    if x>0:\n        # print(\"1 R \",x)\n        moves.append( \"1 {} R\".format(x)  )\n        xPos = True\n    elif x<0:\n        # print(\"1 L \",-x)\n        moves.append( \"1 {} L\".format(-x)  )\n        xNeg = True\n    \n    if y>0:\n        # print(\"1 U \",y)\n        moves.append( \"1 {} U\".format(y)  )\n        yPos = True\n    elif y<0:\n        # print(\"1 D \",-y)\n        moves.append( \"1 {} D\".format(-y)  )\n        yNeg = True\n    # print(2)\n    moves.append( \"{}\".format(2)  )\n    if xNeg:\n        # print(\"1 R \",-x)\n        moves.append( \"1 {} R\".format(-x)  )\n    elif xPos:\n        # print(\"1 L \",x)\n        moves.append( \"1 {} L\".format(x)  )\n\n    if yNeg:\n        # print(\"1 U \",-y)\n        moves.append( \"1 {} U\".format(-y)  )\n    elif yPos:\n        # print(\"1 D \",y)\n        moves.append( \"1 {} D\".format(y)  )\n    # print(3)\n    moves.append( \"{}\".format(3)  )\n\nprint(len(moves))\nfor m in moves:\n    stdout.write(m)\n    stdout.write(\"\\n\")\n\n", "import sys\nfrom math import log2,floor,ceil,sqrt,gcd\n# import bisect\n# from collections import deque\n# sys.setrecursionlimit(7*10**4)\n\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\nri = lambda : sys.stdin.readline().strip()\n \ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD =  1000000007\nflag  = False\n\nn = int(ri())\nres=  []\nqq = []\nfor i in range(n):\n    x,y = Ri()\n    qq.append([x,y])\nqq.sort(key = lambda x : abs(x[0])+abs(x[1]))\nfor i in range(len(qq)):\n    x,y = qq[i]\n    if x > 0: res.append('1 %d %c' % (x, 'R'))\n    if x < 0: res.append('1 %d %c' % (-x, 'L'))\n    if y > 0: res.append('1 %d %c' % (y, 'U'))\n    if y < 0: res.append('1 %d %c' % (-y, 'D'))\n    res.append('2')\n    if x > 0: res.append('1 %d %c' % (x, 'L'))\n    if x < 0: res.append('1 %d %c' % (-x, 'R'))\n    if y > 0: res.append('1 %d %c' % (y, 'D'))\n    if y < 0: res.append('1 %d %c' % (-y, 'U'))\n    res.append('3')\nprint(len(res))\nprint(\"\\n\".join(res))\n", "import sys\ninput = lambda: sys.stdin.readline().strip(\"\\r\\n\")\n\n\nn = int(input())\nans = []\nfor x, y in sorted([list(map(int, input().split())) for _ in range(n)], key=lambda x: abs(x[0]) + abs(x[1])):\n    if x > 0:\n        ans.append('1 %d R' % x)\n    if x < 0:\n        ans.append('1 %d L' % -x)\n    if y > 0:\n        ans.append('1 %d U' % y)\n    if y < 0:\n        ans.append('1 %d D' % -y)\n    ans.append('2')\n    if x > 0:\n        ans.append('1 %d L' % x)\n    if x < 0:\n        ans.append('1 %d R' % -x)\n    if y > 0:\n        ans.append('1 %d D' % y)\n    if y < 0:\n        ans.append('1 %d U' % -y)\n    ans.append('3')\nprint(len(ans))\nprint('\\n'.join(ans))\n", "from sys import stdin, stdout\n \nn = int(stdin.readline())\npos = []\nfor i in range(n):\n    x, y = map( int,stdin.readline().split() )\n    pos.append([x,y])\npos = sorted( pos,key=lambda pos: abs(pos[0])+abs(pos[1]) )\n# print(pos)\nmoves = []\nfor p in pos:\n    x,y = p\n    xNeg,yNeg=False,False\n    xPos,yPos=False,False\n    if x>0:\n        # print(\"1 R \",x)\n        moves.append( \"1 {} R\".format(x)  )\n        xPos = True\n    elif x<0:\n        # print(\"1 L \",-x)\n        moves.append( \"1 {} L\".format(-x)  )\n        xNeg = True\n    \n    if y>0:\n        # print(\"1 U \",y)\n        moves.append( \"1 {} U\".format(y)  )\n        yPos = True\n    elif y<0:\n        # print(\"1 D \",-y)\n        moves.append( \"1 {} D\".format(-y)  )\n        yNeg = True\n    # print(2)\n    moves.append( \"{}\".format(2)  )\n    if xNeg:\n        # print(\"1 R \",-x)\n        moves.append( \"1 {} R\".format(-x)  )\n    elif xPos:\n        # print(\"1 L \",x)\n        moves.append( \"1 {} L\".format(x)  )\n \n    if yNeg:\n        # print(\"1 U \",-y)\n        moves.append( \"1 {} U\".format(-y)  )\n    elif yPos:\n        # print(\"1 D \",y)\n        moves.append( \"1 {} D\".format(y)  )\n    # print(3)\n    moves.append( \"{}\".format(3)  )\n \nprint(len(moves))\nfor m in moves:\n    stdout.write(m)\n    stdout.write(\"\\n\")", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int,input().split()))\n\nn,=I()\nseg = [I() for _ in range(n)]\nseg = sorted(seg, key=lambda x : abs(x[0]) + abs(x[1]))\nres = []\nfor x, y in seg:\n    if x > 0: res.append('1 %d %c' % (x, 'R'))\n    if x < 0: res.append('1 %d %c' % (-x, 'L'))\n    if y > 0: res.append('1 %d %c' % (y, 'U'))\n    if y < 0: res.append('1 %d %c' % (-y, 'D'))\n    res.append('2')\n    if x > 0: res.append('1 %d %c' % (x, 'L'))\n    if x < 0: res.append('1 %d %c' % (-x, 'R'))\n    if y > 0: res.append('1 %d %c' % (y, 'D'))\n    if y < 0: res.append('1 %d %c' % (-y, 'U'))\n    res.append('3')    \nprint(len(res))\nprint('\\n'.join(res))\n", "import sys\ninput = sys.stdin.readline\nprint = sys.stdout.write\nI = lambda : list(map(int,input().split()))\n\nn,=I()\nl=[]\nr=[];k=0\nfor i in range(n):\n\tx,y=I()\n\tif x<0:\n\t\tl.append([x,y])\n\telse:\n\t\tr.append([x,y])\n\tk = k+4 if x!=0 and y!=0 else k+2\n\nk+=2*n;an=[]\nl.sort(key=lambda x:abs(x[0])+abs(x[1]));r.sort(key=lambda x:abs(x[0])+abs(x[1]))\nfor i in range(len(r)):\n\tx,y=r[i]\n\tif x!=0:\n\t\tan.append(\"1 %d R\"%x)\n\tif y!=0:\n\t\tan.append(\"1 %d %s\"%(abs(y),(\"U\" if y>0 else \"D\")))\n\tan.append('2')\n\tif x!=0:\n\t\tan.append(\"1 %d L\"%x)\n\tif y!=0:\n\t\tan.append(\"1 %d %c\"%(abs(y),('D' if y>0 else 'U')))\n\tan.append('3')\n\nfor i in range(len(l)):\n\tx,y=l[i]\n\tx=-x\n\tif x!=0:\n\t\tan.append(\"1 %d L\"%x)\n\tif y!=0:\n\t\tan.append(\"1 %d %c\"%(abs(y),('U' if y>0 else 'D')))\n\tan.append('2')\n\tif x!=0:\n\t\tan.append(\"1 %d R\"%x)\n\tif y!=0:\n\t\tan.append(\"1 %d %c\"%(abs(y),('D' if y>0 else 'U')))\n\tan.append('3')\nprint(str(k)+'\\n')\nprint(\"\\n\".join(an))", "n=int(input())\nd=[]\nfor i in range(n):\n    x,y=list(map(int,input().split()))\n    d.append([(x**2+y**2)**(0.5),x,y])\nd.sort()\nans=[]\nfor i in range(n):\n    if d[i][1]<0:\n        ans.append('1 '+str(-d[i][1])+' L')\n    elif d[i][1]>0:\n        ans.append('1 '+str(d[i][1])+' R')\n    if d[i][2]<0:\n        ans.append('1 '+str(-d[i][2])+' D')\n    elif d[i][2]>0:\n        ans.append('1 '+str(d[i][2])+' U')\n    ans.append('2')\n    if d[i][2]<0:\n        ans.append('1 '+str(abs(d[i][2]))+' U')\n    elif d[i][2]>0:\n        ans.append('1 '+str(abs(d[i][2]))+' D')\n    if d[i][1]<0:\n        ans.append('1 '+str(abs(d[i][1]))+' R')\n    elif d[i][1]>0:\n        ans.append('1 '+str(abs(d[i][1]))+' L')\n    ans.append('3')\nprint(len(ans))\nprint('\\n'.join(ans))", "import sys\ninput = sys.stdin.readline\nn=int(input())\nbombs=[]\nfor _ in range(n):\n    x = list(map(int,input().split(' ')))\n    bombs.append(x)\nbombs.sort(key = lambda x: abs(x[0])+abs(x[1]))\nout = []\nfor b in bombs:\n    x = b\n    get = []\n    back = []\n    if x[0] != 0:\n        get.append('1 '+str(abs(x[0])) + ' ' + ('R' if x[0]>0 else 'L'))\n        back.append('1 '+str(abs(x[0])) + ' ' + ('L' if x[0]>0 else 'R'))\n    if x[1] != 0:\n        get.append('1 '+str(abs(x[1])) + ' ' + ('U' if x[1]>0 else 'D'))\n        back.append('1 '+str(abs(x[1])) + ' ' + ('D' if x[1]>0 else 'U'))\n    out += get + ['2'] + back + ['3']\nss = (\"\\n\".join([str(len(out))] + out))\nsys.stdout.write(ss)\n", "import sys\ninput = sys.stdin.readline\nn=int(input())\nbombs=[list(map(int, input().split(' '))) for _ in range(n)]\nbombs.sort(key = lambda x: abs(x[0])+abs(x[1]))\nout = []\nfor b in bombs:\n    x = b\n    get = []\n    back = []\n    if x[0] != 0:\n        get.append('1 '+str(abs(x[0])) + ' ' + ('R' if x[0]>0 else 'L'))\n        back.append('1 '+str(abs(x[0])) + ' ' + ('L' if x[0]>0 else 'R'))\n    if x[1] != 0:\n        get.append('1 '+str(abs(x[1])) + ' ' + ('U' if x[1]>0 else 'D'))\n        back.append('1 '+str(abs(x[1])) + ' ' + ('D' if x[1]>0 else 'U'))\n    out.extend(get + ['2'] + back + ['3'])\nsys.stdout.write(\"\\n\".join([str(len(out))] + out))\n", "import sys\ninput = sys.stdin.readline\nI = lambda : list(map(int,input().split()))\n \nn,=I()\nseg = [I() for _ in range(n)]\nseg = sorted(seg, key=lambda x : abs(x[0]) + abs(x[1]))\nres = []\nfor x, y in seg:\n    if x > 0: res.append('1 %d %c' % (x, 'R'))\n    if x < 0: res.append('1 %d %c' % (-x, 'L'))\n    if y > 0: res.append('1 %d %c' % (y, 'U'))\n    if y < 0: res.append('1 %d %c' % (-y, 'D'))\n    res.append('2')\n    if x > 0: res.append('1 %d %c' % (x, 'L'))\n    if x < 0: res.append('1 %d %c' % (-x, 'R'))\n    if y > 0: res.append('1 %d %c' % (y, 'D'))\n    if y < 0: res.append('1 %d %c' % (-y, 'U'))\n    res.append('3')    \nprint(len(res))\nprint('\\n'.join(res))"]