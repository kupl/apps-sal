#!/usr/bin/env python3
import sys


def solve(N: int, M: int, A: "List[int]"):
    from collections import defaultdict
    acc = [0] * (N + 1)
    for i, a in enumerate(A, 1):
        acc[i] = (acc[i - 1] + a) % M
    dp = defaultdict(int)
    ans = 0
    for a in acc:
        ans += dp[a]
        dp[a] += 1
    return ans

# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)


def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    print((solve(N, M, A)))


def __starting_point():
    main()


__starting_point()
