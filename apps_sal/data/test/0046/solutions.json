["ct=0\na, b = list(map(int, input().split(' ')))\nx=[0]*5\nfor i in range(1, b+1):\n    x[i%5]+=1\nfor i in range(1, a+1):\n    ct+=x[(0-i)%5]\nprint(ct)\n", "#!/usr/bin/env python3\n\ntry:\n    while True:\n        n, m = list(map(int, input().split()))\n        a = [0] * 5\n        b = [0] * 5\n        for i in range(1, n + 1):\n            a[i % 5] += 1\n        for j in range(1, m + 1):\n            b[j % 5] += 1\n\n        print(a[0] * b[0] + a[1] * b[4] + a[2] * b[3] + a[3] * b[2] + a[4] * b[1])\n\nexcept EOFError:\n    pass\n", "n, m = [int(x) for x in input().split()]\nn_rem = [n//5]*5\nm_rem = [m//5]*5\nfor i in range(n%5):\n    n_rem[(i+1)%5] += 1\nfor i in range(m%5):\n    m_rem[(i+1)%5] += 1\nprint((n_rem[0]*m_rem[0] + n_rem[1]*m_rem[4] +\n      n_rem[2]*m_rem[3] + n_rem[3]*m_rem[2] + n_rem[4]*m_rem[1]))\n\n", "n, m = map(int, input().split())\na = [n // 5 + (n % 5 > i) for i in range(5)]\nb = [m // 5 + (m % 5 > i) for i in range(5)]\nans = 0\nfor i in range(4): ans += a[i] * b[3 - i]\nprint(ans + a[4] * b[4])", "\n\nn,m=list(map(int,input().split()))\n\nnMod=[n//5]*5\nmMod=[m//5]*5\n\nfor loop in range(1,n%5+1):\n    nMod[loop]+=1\n\nfor loop in range(1,m%5+1):\n    mMod[loop]+=1\n\nprint(nMod[0]*mMod[0]+nMod[1]*mMod[4]+nMod[4]*mMod[1]+nMod[2]*mMod[3]+nMod[3]*mMod[2])\n", "n,m = list(map(int,input().split()))\nn5 = [0]*5\nfor i in range(1,n+1):\n    n5[i % 5] += 1\nm5 = [0]*5\nfor i in range(1,m+1):\n    m5[i % 5] += 1\nprint(n5[0] * m5[0]+n5[1] * m5[4] + n5[2] * m5[3] + n5[3] * m5[2] + n5[4] * m5[1])\n", "from collections import defaultdict, deque, Counter, OrderedDict\n\ndef main():\n    n,m = map(int, input().split())\n    n1,n2 = divmod(n,5)\n    m1,m2 = divmod(m,5)\n    ans = n1*5*m1 + m2*n1 + m1*n2\n    if n2 + m2 >= 5:\n        ans += n2 + m2 - 4\n    print(ans)\n\n\n\n\ndef __starting_point():\n    \"\"\"sys.setrecursionlimit(400000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\"\"\"\n    main()\n__starting_point()", "n, m = [int(x) for x in input().split()]\nr = 0\nfor i in range(5):\n    r += ((n+(5-i)%5)//5) * ((m+i)//5)\nprint(r)", "n, m = list(map(int, input().split()))\nr = 0\nfor i in range(1, n+1):\n    x = (5 - i) % 5\n    if x == 0:\n        r += (m - x) // 5\n    else:\n        r += (m - x) // 5 + 1\nprint(r)\n", "n,m=map(int,input().split())\nk0=(n//5)*(m//5)\nk1=(n//5+(n%5>0))*(m//5+(m%5>3))\nk2=(n//5+(n%5>1))*(m//5+(m%5>2))\nk3=(n//5+(n%5>2))*(m//5+(m%5>1))\nk4=(n//5+(n%5>3))*(m//5+(m%5>0))\nprint(k0+k1+k2+k3+k4)", "n, m = list(map(int, input().split()))\na = 5 * [n // 5]\nfor i in range(1, n % 5 + 1):\n    a[i] += 1\n\nb = 5 * [m // 5]\nfor i in range(1, m % 5 + 1):\n    b[i] += 1\n\ncnt = a[0] * b[0]\nfor i in range(1, 5):\n    cnt += a[i] * b[5 - i]\n\nprint(cnt)\n", "n, m = list(map(int, input().split()))\nn_rem = [n // 5 for _ in range(5)]\nfor i in range(1, n % 5 + 1):\n    n_rem[i] += 1\nm_rem = [m // 5 for _ in range(5)]\nfor i in range(1, m % 5 + 1):\n    m_rem[i] += 1\nprint(sum([n_rem[i] * m_rem[(5 - i) % 5] for i in range(5)]))\n", "n,m = list(map(int,input().split()))\nleft_first = [n//5]*5\nleft_second = [m//5]*5\nfor i in range(n%5):\n    left_first[i]+=1\n    \nfor j in range(m%5):\n    left_second[j]+=1\n\nans = left_first[-1]*left_second[-1]\nfor i in range(4):\n    ans+=left_first[i]*left_second[3-i]\n    #print(ans)\n#print(left_first,left_second)\nprint(ans)\n", "n, m = map(int, input().split())\nA = [n//5, n//5, n//5, n//5, n//5]\nB = [m//5, m//5, m//5, m//5, m//5]\n\nfor i in range(n%5):\n    A[i]+= 1\nfor i in range(m%5):\n    B[i]+= 1\nprint(A[0]*B[3] + A[3]*B[0] + A[1]*B[2] + A[2]*B[1] + A[4]*B[4])", "x,y = map(int,input().split())\narx = []\nary = []\nxx = x//5\narx = [xx,xx,xx,xx,xx]\nfor i in range(x%5):\n    arx[i] += 1\nyy = y//5\nary = [yy,yy,yy,yy,yy]\nfor i in range(y%5):\n    ary[i] += 1\nsum = 0\nsum += arx[0]*ary[3]\nsum += arx[1]*ary[2]\nsum += arx[2]*ary[1]\nsum += arx[3]*ary[0]\nsum += arx[4]*ary[4]\nprint(sum)", "import math\n\nn,m = list(map(int, input().split()))\n\nndiv = math.floor(n/5)\nnmod = n % 5\n\nmdiv = math.floor(m/5)\nmmod = m % 5\n\nmods = 0\nif nmod + mmod >= 5:\n    mods = nmod + mmod - 4\n\nans = (ndiv * mdiv * 5) + nmod * mdiv + mmod * ndiv + mods\nprint(ans)\n", "n, m = map(int, input().split())\n\nfull_n = n // 5\nfull_m = m // 5\n\nprint(full_n * full_m * 5 + full_n * (m%5) + full_m * (n%5) + sum(1 for x in range(0, n % 5 + 1) for y in range(0, m % 5 + 1) if (x + y) % 5 == 0) - 1)", "n, m = list(map(int, input().split()))\ncap = m // 5\nothers = m % 5\n\nresult = n * cap\n\ncap2 = n // 5\n\nresult += cap2 * others\n\nfor i in range(cap2 * 5 + 1, cap2 * 5 + (n % 5) + 1):\n    for j in range(cap * 5 + 1, cap * 5 + others + 1):\n        if (i + j) % 5 == 0:\n            result += 1\n\nprint(result)\n", "d=lambda a,b: (a//5)*(b//5)\nn,m=map(int,input().split())\nprint(d(n,m)+d(n+4,m+1)+d(n+3,m+2)+d(n+2,m+3)+d(n+1,m+4))", "# coding: utf-8\n\n\n\n\n\nimport math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\n\ndef array2d(d1, d2, init = None):\n    return [[init for _ in range(d1)] for _ in range(d2)]\n\nn, m = list(map(int, input().split(\" \")))\n\ns = 0\nfor i in range(5):\n    t1 = n//5\n    t2 = m//5\n    if i != 0:\n        t1 += 1 if n % 5 >= i else 0\n        t2 += 1 if m % 5 >= (5-i) else 0\n    s += t1 * t2\nprint(s)\n", "n, m = list(map(int, input().split()))\nmod1, mod2, mod3, mod4, mod5 = n//5,n//5,n//5,n//5,n//5\nif n%5 >= 1:\n    mod1 += 1\nif n%5 >= 2:\n    mod2 += 1\nif n%5 >= 3:\n    mod3 += 1\nif n%5 == 4:\n    mod4 += 1\n\nm1, m2, m3, m4, m5 = m//5, m//5, m//5, m//5, m//5\nif m%5 >= 1:\n    m1 += 1\nif m%5 >= 2:\n    m2 += 1\nif m%5 >= 3:\n    m3 += 1\nif m%5 == 4:\n    m4 += 1\n#print(mod1, mod2, mod3, mod4, mod5, m1, m2, m3, m4, m5)\nprint(mod1*m4+mod2*m3+mod3*m2+mod4*m1+mod5*m5)\n", "import sys\n\n\ndef main():\n    x = sys.stdin.readline().split()\n    n, m = int(x[0]), int(x[1])\n    \n    k = int(n/5)\n    rest = n - k*5\n    a = [k]*5\n    for i in range(rest):\n        a[i+1]+=1\n\n    k = int(m/5)\n    rest = m - k*5\n    b = [k]*5\n    for i in range(rest):\n        b[i+1]+=1\n\n    r = a[0]*b[0] + a[1]*b[4] + a[2]*b[3]+ a[3]*b[2] + a[4]*b[1]\n\n    print(r)\n\nmain()\n", "n, m = map(int, input().split())\nn1 = [n // 5, (n - 1) // 5 + 1, (n - 2) // 5 + 1, (n - 3) // 5 + 1, (n - 4) // 5 + 1]\nm1 = [m // 5, (m - 1) // 5 + 1, (m - 2) // 5 + 1, (m - 3) // 5 + 1, (m - 4) // 5 + 1]\n#print(n1, m1)\nprint(n1[0] * m1[0] + n1[1] * m1[4] + n1[2] * m1[3] + n1[3] * m1[2] + n1[4] * m1[1])", "n, m = list(map(int, input().split()))\nnt = n // 5\nmt = m // 5\n\nnf = [nt] * 5\nmf = [mt] * 5\n\nfor x in range((n % 5) + 1):\n    nf[x] += 1\n\nfor x in range((m % 5) + 1):\n    mf[x] += 1\n\nnf[0] -= 1\nmf[0] -= 1\n\nans = 0\nfor x in range(5):\n    y = (5 - x) % 5\n    ans += nf[x] * mf[y]\n\nprint(ans)\n", "n, m = map(int, input().split())\nzer1 = n // 5\nzer2 = m // 5\none1 = (n - 1) // 5 + 1\none2 = (m - 1) // 5 + 1\ntwo1 = (n - 2) // 5 + 1\ntwo2 = (m - 2) // 5 + 1\nthree1 = (n - 3) // 5 + 1\nthree2 = (m - 3) // 5 + 1\nfour1 = (n - 4) // 5 + 1\nfour2 = (m - 4) // 5 + 1\nprint(zer1 * zer2 + one1 * four2 + two1 * three2 + three1 * two2 + four1 * one2)"]