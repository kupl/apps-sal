"""
皿フェーズは普通のNimゲームなので、
皿フェーズ開始時点＝袋フェーズ終了時点でGrundy数=XORの総和が0になるか0以外になるかが重要。
Nが奇数のとき、先手は袋フェーズ終了時点でXORの総和を0にしたい。一方で後手は0以外にしたい。
ここで、後手は必ず0以外にできる。先手が最初にコインを置いたさらに対して、中のコインが多い袋から順に積んでいけば
必ず全体の過半数以上の山を作ることができる。
過半数を超えている山があれば必ずXOR総和は0以外になる。

一方Nが偶数の場合、先手は袋フェーズ終了時点でXORの総和を0以外にしたい。一方で後手は0にしたい。
ここで、先ほどと同様のやりかたで先手は必ず過半数以上の山をつくり、XORを0以外にできる。
ただし、1パターンだけ例外がある。同じ枚数のコインが入った袋がそれぞれ偶数個だけある場合である。
このとき後手は先手の選んだ袋をミラーリングすることでXOR総和を0にできる。
"""
from collections import Counter
T = int(input())
for _ in range(T):
    N = int(input())
    A = list(map(int,input().split()))
    if N&1:
        print("Second")
    else:
        for v in list(Counter(A).values()):
            if v&1:
                print("First")
                break
        else:
            print("Second")

