["a,b = input().split()\nif (a==b):\n    print(a)\nelse:\n    print(1)", "a, b = list(map(int, input().split()))\nif a == b:\n    print(a)\nelse:\n    print(1)\n", "def mp():  return map(int,input().split())\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\ndef listring(l): return ' '.join([str(x) for x in l])\ndef printlist(l): print(' '.join([str(x) for x in l]))\n\na,b = mp()\nif a == b:\n    print(a)\nelse:\n    print(1)", "a,b=map(int, input().split())\nif a != b:\n    print(1)\nelse:\n    print(a)", "a, b = list(map(int, input().split()))\nif a == b:\n    print(a)\nelse:\n    print(1)\n", "a, b = input().split()\nif a == b:\n    print(a)\nelse:\n    print(1)", "a, b = map(int, input().split())\nif (a == b):\n\tprint(a)\nelse:\n\tprint(1)", "n,m = list(map(int, input().split()))\nif (n != m):\n    print(1)\nelse:\n    print(n)\n", "a = input().split()\nif (a[0] == a[1]):\n    print(a[0])\nelse:\n    print('1')\n", "a, b = map(int, input().split())\nif a != b:\n    print(1)\nelse:\n    print(a)", "n,m=list(map(int,input().split()))\nif n!=m:\n    print(1)\nelse:\n    print(n)\n    \n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\n(a, b) = (int(i) for i in input().split())\nstart = time.time()\n\nif (a == b):\n    print(a)\nelse:\n    print(1)\n\nfinish = time.time()\n#print(finish - start)\n", "u, v = input().split()\nif u == v:\n    print(u)\nelse:\n    print(1)\n", "a, b = map(int, input().split())\nif a != b:\n    print(1)\nelse:\n    print(a)", "s = input().split()\na = int(s[0])\nb = int(s[1])\nif a==b:\n\tprint(a)\nelse:\n\tprint(1)", "a,b = list(map(int,input().split()))\nif a == b:\n    print(a) \nelse:\n    print(1)\n\n", "a, b = input().split()\n\nif a == b:\n    print(a)\nelse:\n    print(1)", "a, b = map(int, input().split())\nif (a == b):\n\tprint(a)\n\tpass\nelse:\n\tprint(1)\n\tpass", "a,b = (int(i) for i in input().split())\nif a== b:\n    print(a)\nelse:\n    print(1)", "a,b=map(str,input().split())\nif(a==b):\n    print(a)\nelse:\n    print(\"1\")", "a = input().split()\nif a[0] == a[1]:\n    print(a[0])\nelse:\n    print(1)\n", "num,num2 = list(map(str,input().split()))\nif num == num2:\n    print(num)\nelse:\n    print(1)\n", "n,m=input().split()\nif n==m:\n    print (n)\nelse:\n    print (1)", "#!/usr/bin/env python3\n# 664A_gcd.py - Codeforces.com/problemset/problem/664/A by Sergey 2016\n\nimport unittest\nimport sys\n\n###############################################################################\n# Gcd Class (Main Program)\n###############################################################################\n\n\nclass Gcd:\n    \"\"\" Gcd representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.a, self.b] = list(map(int, uinput().split()))\n\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = 1 if self.a != self.b else self.a\n\n        return str(result)\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Gcd class testing \"\"\"\n\n        # Constructor test\n        test = \"1 2\"\n        d = Gcd(test)\n        self.assertEqual(d.a, 1)\n\n        # Sample test\n        self.assertEqual(Gcd(test).calculate(), \"1\")\n\n        # Sample test\n        test = \"61803398874989484820458683436563811772030917980576 61803398874989484820458683436563811772030917980576\"\n        self.assertEqual(Gcd(test).calculate(), \"61803398874989484820458683436563811772030917980576\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Gcd(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Gcd(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Gcd(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Gcd().calculate())\n\n__starting_point()", "a,b=map(int,input().split())\nprint(1 if (a!=b) else a)"]