["n, k = map(int, input().split())\nm = 2 * (n - 1) - k * (k - 1)\nif m > 0: print(-1)\nelse:\n    x = int((1 + (1 - 4 * m) ** 0.5) / 2)\n    while x * x - x + m > 0: x -= 1\n    print(k - x)", "n, k = map(int, input().split())\nm = 2 * (n - 1) - k * (k - 1)\nif m > 0: print(-1)\nelse:\n    x = int((1 + (1 - 4 * m) ** 0.5) / 2)\n    if x * (x - 1) + m > 0: x -= 1\n    print(k - x)", "n, k = map(int, input().split())\nm = 2 * (n - 1) - k * (k - 1)\nif m > 0: print(-1)\nelse:\n    x = int((1 + (1 - 4 * m) ** 0.5) / 2)\n    if x * (x - 1) + m > 0: x -= 1\n    print(k - x)", "from math import *\n\nn,k = map(int,input().split(\" \"))\n\nif n == 1:\n    print(0)\n    return\nif k+1 == n:\n    print(2)\n    return\n    \nif k >= n:\n    print(1)\n    return\n\nd = (2*k-3) ** 2 + 8*(k-n)\n\n\nif d < 0:\n    print(-1)\n    return\n    \nif d == 0:\n    x1 = (2 * k - 3) / 2\n    if x1 < 0 or ceil(x1) > k-2:\n        print(-1)\n    else:\n        if (x1 == ceil(x1)):\n            print(x1+2)\n        else:\n            print(ceil(x1)+1)\n    return\n\nx1 = ((2 * k - 3) - sqrt(d)) / 2 \nx2 = ((2 * k - 3) + sqrt(d)) / 2\n\nif x1 <= 0:\n    if x2 <= 0 or ceil(x2) > k-2:\n        print(-1)\n    else:\n        if (x1 == ceil(x1)):\n            print(x1+2)\n        else:\n            print(ceil(x1)+1)\nelse:\n    if x1 <= 0 or ceil(x1) > k-2:\n        print(-1)\n    else:\n        print(ceil(x1)+1)", "def sq(x):\n    l = 0\n    r = 10**9+1\n    while l+1<r:\n        m = (l+r)//2\n        if m*(m+1)//2<= x:\n            l = m\n        else:\n            r = m\n    return l\ndef s():\n    [n,k] = list(map(int,input().split()))\n    if k*(k-1)//2+1 < n:\n        print(-1)\n        return\n    l = int(k*(k-1)//2)+1 - n\n    import math\n    a = sq(l)\n    print(k-1-a)\ns()\n", "# 0 1 2  3  4  5\n# 1 2 4  7 11 16\n\ndef f(x):\n    return x * (x + 1) // 2\n\ndef works(n, k, s):\n    rem = k - 1 - s\n    val = f(k - 1) - f(rem) + 1\n\n    return val >= n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        if not works(n, k, k):\n            print(-1)\n        else:\n            lo = 0\n            hi = k\n            while lo + 1 < hi:\n                mid = (lo + hi) // 2\n                if works(n, k, mid):\n                    hi = mid\n                else:\n                    lo = mid\n            print(hi)\nmain()\n", "n, k = map(int, input().split())\n\nl, r = int(-1), k+1\nwhile l+1 < r:\n\tmid = (l+r) // 2\n\tval = (k-mid+1 + k) * mid // 2 - (mid-1)\n\tif val < n:\n\t\tl = mid\n\telse:\n\t\tr = mid\n\nprint(-1 if r == k+1 else r)", "import sys\ndef f(m):\n\tif m - 1 < 0:\n\t\treturn 0\n\treturn (m - 1)* m // 2\n\ndef calc(m, K):\n\trest = K - m\n\treturn K + f(K - 1) - f(rest)\n\ndef __starting_point():\n\tN,K = list(map(int, input().split()))\n\tif N == 1:\n\t\tprint(0)\n\t\treturn\n\tif N <= K:\n\t\tprint(1)\n\t\treturn\n\tleft = 0\n\tright = K + 1\n\tresult = 10 ** 10\n\twhile (right - left > 1):\n\t\tmed = (right + left) // 2\n\t\tres = N - calc(med, K)\n\t\tif res == 0:\n\t\t\tprint (med)\n\t\t\treturn\n\t\tif res > 0:\n\t\t\trest = K - med - 1\n\t\t\tif rest >= res:\n\t\t\t\tresult = min(result, med + 1)\n\t\t\tleft = med\n\t\telse:\n\t\t\tright = med\n\tif result >= 10 ** 10:\n\t\tresult = -1\n\tprint (result)\n\n__starting_point()", "def valid (number_to_check,n,k):\n    sum =1\n    sum=sum +(k)*(k-1) //2 -(k-number_to_check)*(k-number_to_check-1) //2\n    if sum >=n:\n        return True\n    return False\ndef binary_serach (n,k):\n    lo=1\n    hi=k\n    while lo < hi :\n        mid = lo+(hi-lo)//2\n        if valid(mid,n,k):\n            hi=mid\n        else :\n            lo=mid +1\n    if valid(lo,n,k):\n        return lo\n    else :\n        return -1\nn,k=map(int,input().split())\nif  n == 1:\n    print(0)\nelif n <= k:\n    print(1)\nelse :\n    print(binary_serach(int(n),int(k)))", "n, k = list(map(int, input().split()))\n\nl, h = int(-1), k + 1\nwhile l+1 < h:\n    mid = (l + h) // 2\n    val = (k - mid+1 +k) * mid//2 - (mid-1)\n    if val < n:\n        l = mid\n    else:\n        h = mid\n\nprint(-1 if h == k+1 else h)", "def valid(k, mid):\n    return (2*k - mid - 1) * mid // 2 + 1\n    \ndef binary_search(n, k):\n    l, r = 0, k-1\n    while (l <= r):\n        mid = l+r >> 1\n        if (valid(k, mid) < n):\n            l = mid+1\n        else:\n            r = mid-1\n    return r+1\n\ndef main():\n    n, k = list(map(int, input().split()))\n    res = binary_search(n, k)\n    print(-1 if res == k else res)\n\nmain()\n", "def valid(k, mid):\n    return (2*k - mid - 1) * mid // 2 + 1\n    \ndef binary_search(n, k):\n    l, r = 0, k-1\n    while (l <= r):\n        mid = l+r >> 1\n        if (valid(k, mid) < n):\n            l = mid+1\n        else:\n            r = mid-1\n    return l\n\ndef main():\n    n, k = list(map(int, input().split()))\n    res = binary_search(n, k)\n    print(-1 if res == k else res)\n\nmain()\n", "n, k = list(map(int, input().split()))\n\nm = 2 * (n - 1) - k * (k - 1)\n\nif m > 0: print(-1)\n\nelse:\n\n    x = int((1 + (1 - 4 * m) ** 0.5) / 2)\n\n    if x * (x - 1) + m > 0: x -= 1\n\n    print(k - x)\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\n\nn,k = map(int, input().split())\nk -= 1\nlo,hi = 0,int(1e9)\nwhile lo < hi:\n\tm = (lo + hi + 1) // 2\n\tif 1 + k*(k+1)//2 - m*(m+1)//2 >= n:\n\t\tlo = m;\n\telse:\n\t\thi = m - 1\nif 1 + k*(k+1)//2 - lo*(lo+1)//2 >= n:\n\tlo = k - lo\nelse:\n\tlo = -1\nprint(lo)", "R = lambda: map(int, input().split())\nn, k = R()\nif n == 1:\n    print(0)\n    return\nif 1 + k * (k - 1) // 2 < n:\n    print(-1)\n    return\nl, r = 0, k - 1\nwhile l < r:\n    m = (l + r + 1) // 2\n    if 1 + (m + k - 1) * (k - 1 - m + 1) // 2 >= n:\n        l = m\n    else:\n        r = m - 1\nif 1 + (l + k - 1) * ((k - 1) - l + 1) // 2 < n:\n    print(k - 1 - l + 2)\nelse:\n    print(k - 1 - l + 1)", "def sum(n):\n    return (n * (n + 1)) // 2\n\n\ndef range_sum(left, right):\n    return sum(right) - sum(left - 1)\n\n\ndef binary_search(k, n):\n    low, high, mid = 1, k, 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        s = range_sum(mid, k)\n\n        if s == n:\n            return k - mid + 1\n        elif s > n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return k - low + 2\n\n\nn, k = list(map(int, input().split(' ')))\nif n == 1:\n    print(0)\nelif n <= k:\n    print(1)\nelse:\n    n -= 1\n    k -= 1\n\n    if n > sum(k):\n        print(-1)\n    else:\n        print(binary_search(k, n))\n", "def reach_max(n, k):\n    return n * k + 1 - n * (n + 1) // 2\n\n\nn, k = list(map(int, input().split()))\n\nif n == 1:\n    print(0)\n    return\n\nlo, hi = 1, k - 1\n\nif n > reach_max(hi, k):\n    print(-1)\n    return\n\n\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if reach_max(mid, k) < n:\n        lo = mid + 1\n    else:\n        hi = mid\n\nprint(lo)\n", "import math\nfrom decimal import Decimal\n\ndef sum2(s, e):\n    return sum1(e) - sum1(s - Decimal(1)) - (e - s)\n\ndef sum1(i):\n    return i * (i + 1) / 2\n\nline = input()\nn = Decimal(line.split()[0])\nk = Decimal(line.split()[1])\nif(n == 1):\n    print(0)\nelif(k > n):\n    print(1)\nelif(sum2(2,k) < n):\n    print(-1)\nelse:\n    c = 2 * n + k - k * k\n    discriminant = (9 - 4 * c).sqrt()\n    res1 = math.floor((3 + discriminant) / 2)\n    res2 = math.floor((3 - discriminant) / 2)\n    res1 = max(res1, res2)\n    print(int(k - res1 + 1));", "import math\nfrom decimal import Decimal\n\ndef sum2(s, e):\n    return sum1(e) - sum1(s - 1) - (e - s)\n\ndef sum1(i):\n    return i * (i + 1) / 2\n\nline = input().split()\nn = Decimal(line[0])\nk = Decimal(line[1])\nif(n == 1):\n    print(0)\nelif(k > n):\n    print(1)\nelif(sum2(Decimal(2),k) < n):\n    print(-1)\nelse:\n    c = 2 * n + k - k * k\n    discriminant = (9 - 4 * c).sqrt()\n    res1 = math.floor((3 + discriminant) / 2)\n    res2 = math.floor((3 - discriminant) / 2)\n    res1 = max(res1, res2)\n    print(int(k - res1 + 1));", "import math\nfrom decimal import Decimal\n\ndef sum2(s, e):\n    return sum1(e) - sum1(s - 1) - (e - s)\n\ndef sum1(i):\n    return i * (i + 1) / 2\n\nn, k = map(Decimal, input().split())\n\nif(n == 1):\n    print(0)\nelif(k > n):\n    print(1)\nelif(sum2(Decimal(2),k) < n):\n    print(-1)\nelse:\n    c = 2 * n + k - k * k\n    discriminant = (9 - 4 * c).sqrt()\n    res1 = math.floor((3 + discriminant) / 2)\n    res2 = math.floor((3 - discriminant) / 2)\n    res1 = max(res1, res2)\n    print(k - res1 + 1);", "import math\nfrom decimal import Decimal\n\ndef sum2(s, e):\n    return sum1(e) - sum1(s - 1) - (e - s)\n\ndef sum1(i):\n    return i * (i + 1) / 2\n\nline = input().split()\nn = Decimal(line[0])\nk = Decimal(line[1])\nif(n == 1):\n    print(0)\nelif(k > n):\n    print(1)\nelif(sum2(Decimal(2),k) < n):\n    print(-1)\nelse:\n    c = 2 * n + k - k * k\n    discriminant = (9 - 4 * c).sqrt()\n    tmp = discriminant / 2\n    const = Decimal(3/2)\n    res1 = math.floor(const + tmp)\n    res2 = math.floor(const - tmp)\n    res1 = max(res1, res2)\n    print(k - res1 + 1);", "import math\nfrom decimal import Decimal, ROUND_FLOOR\n\ndef sum2(s, e):\n    return sum1(e) - sum1(s - 1) - (e - s)\n\ndef sum1(i):\n    return i * (i + 1) / 2\n\nn, k = map(Decimal, input().split())\n\nif(n == 1):\n    print(0)\nelif(k > n):\n    print(1)\nelif(sum2(Decimal(2),k) < n):\n    print(-1)\nelse:\n    c = 2 * n + k - k * k\n    discriminant = (9 - 4 * c).sqrt()\n    res1 = int(((3 + discriminant) / 2).to_integral_exact(rounding=ROUND_FLOOR))\n    res2 = int(((3 - discriminant) / 2).to_integral_exact(rounding=ROUND_FLOOR))\n    res1 = max(res1, res2)\n    print(k - res1 + 1);", "import math\nfrom decimal import Decimal, ROUND_FLOOR\n\ndef sum2(s, e):\n    return sum1(e) - sum1(s - 1) - (e - s)\n\ndef sum1(i):\n    return i * (i + 1) / 2\n\nn, k = map(Decimal, input().split())\n\nif(n == 1):\n    print(0)\nelif(k > n):\n    print(1)\nelif(sum2(Decimal(2),k) < n):\n    print(-1)\nelse:\n    c = 2 * n + k - k * k\n    discriminant = (9 - 4 * c).sqrt()\n    res1 = int(((3 + discriminant) / 2).to_integral_exact(rounding=ROUND_FLOOR))\n    res2 = int(((3 - discriminant) / 2).to_integral_exact(rounding=ROUND_FLOOR))\n    res1 = max(res1, res2)\n    print(k - res1 + 1);", "n, k = list(map(int, input().split()))\nl, r = -1, k+1\nwhile l+1 < r:\n\tmid = l + r >> 1\n\tval = (k - mid + 1 + k) * mid // 2 - (mid - 1)\n\tif val < n:\n\t\tl = mid\n\telse:\n\t\tr = mid\nprint(-1 if r == k+1 else r)\n", "n,k=list(map(int,input().split()))\nn,k=n-1,k-1\nl=0\nr=k\ng=k*(k+1)//2\nans=-1\nwhile l<=r:\n\tm=(l+r)//2\n\t#print(g,m*(m+1)//2,n,l,r)\n\tif (g-m*(m+1)//2)>=n:\n\t\tans=k-m\n\t\tl=m+1\n\telse:\n\t\tr=m-1\nprint(ans)\n"]