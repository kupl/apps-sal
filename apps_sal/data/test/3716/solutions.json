["def gcd(a, b):\n    c = a % b\n    return gcd(b, c) if c else b\n\ns, a = 0, int(input())\nif a < 3: print(a)\nelse:\n    while a ** 3 > s:\n        b = a - 1\n        while a * b * b > s:\n            if gcd(a, b) == 1:\n                d = a * b\n                c = b - 1\n                while d * c > s:\n                    if gcd(c, d) == 1: s = d * c\n                    c -= 1\n            b -= 1\n        a -= 1\n    print(s)", "n = int(input())\nres = n * (n - 1)\ngcd = lambda a, b: b if a % b == 0 else gcd(b, a % b)\n\nfor i in range(n - 2 if n % 2 != 0 else n - 3, 0, -2):\n    if gcd(n, i) == 1 and gcd(n - 1, i) == 1:\n        res = res * i if n % 2 != 0 else max(res * i, int(res / 2) * (n - 2),\n                (n - 1) * (n - 2) * (n - 3))\n        break\n\nif n < 3:\n    res = n\n\nprint(res)\n", "n = int(input())\ngcd = lambda a, b: b if a % b == 0 else gcd(b, a % b)\n\nif n % 2:\n    res = n * (n - 1) * (n - 2)\nelse:\n    for i in range(n - 3, 0, -2):\n        if gcd(n, i) != 1 or gcd(n - 1, i) != 1:\n            continue\n        res = max(n * (n - 1) * i,\n                int(n * (n - 1) / 2) * (n - 2),\n                (n - 1) * (n - 2) * (n - 3))\n        break\n\nif n < 3:\n    res = n\n\nprint(res)\n", "from fractions import gcd\nn=int(input())\n\nans=0\nfor i in range(n,max(0,n-101),-1):\n    for j in range(i,max(0,n-101),-1):\n        for k in range(j,max(0,n-101),-1):\n            x=(i*j)//gcd(i,j)\n            x=(x*k)//gcd(x,k)\n            ans=max(ans,x)\nprint(ans)\n", "def gcd(a, b):\n\twhile a:\n\t\tb %= a\n\t\ta, b = b, a\n\treturn b\n\ndef lcm(a, b):\n\treturn a // gcd(a, b) * b\n\nn = int(input())\nans = 0\nfor i in range(n, max(0, n - 100), -1):\n\tfor j in range(i, max(0, i - 100), -1):\n\t\tcur = lcm(i, j)\n\t\tfor k in range(j, max(0, j - 100), -1):\n\t\t\tans = max(ans, lcm(cur, k))\nprint(ans)\n", "def gcd(a,b):\n    #print(a,b)\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n\ndef main():\n    mode=\"filee\"\n    if mode==\"file\":f=open(\"test.txt\",\"r\")\n\n    if mode==\"file\":n=int(f.readline())\n    else:n=int(input())\n    if n==1:\n        print(\"1\")\n        return\n    if n==2:\n        print(\"2\")\n        return\n    if n==3:\n        print(\"6\")\n        return\n    if n==4:\n        print(\"12\")\n        return\n    i=n+1\n    [a,b,c]=[1,1,1]\n    stop=20\n    while i>=n//2 and i>n-stop:\n        i-=1\n        j=n\n        while j>=n//2-1 and j>n-stop:\n            j-=1\n            if i==j:continue\n            k=n-1\n            while k>=n//2-2 and k>n-stop:\n                k-=1\n                if k==j:continue\n                if gcd(i,j)==1 and gcd(i,k)==1 and gcd(j,k)==1:\n                    if (i*j*k) > (a*b*c):\n                        [a,b,c]=[i,j,k]\n                        #print(i,j,k)\n\n    print(a*b*c)\n    if mode==\"file\":f.close()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\nif(n<3):\n    print(n)\nelif(n%2==0):\n    if(n%3==0 and (n-3)%3==0):\n        print((n-1)*(n-2)*(n-3))\n    else:\n        print(n*(n-1)*(n-3))\nelse:\n    print(n*(n-1)*(n-2))\n", "n=int(input())\nif(n<3):\n    print(n)\nelif(n%2==0):\n    if(n%3==0 and (n-3)%3==0):\n        print((n-1)*(n-2)*(n-3))\n    else:\n        print(n*(n-1)*(n-3))\nelse:\n    print(n*(n-1)*(n-2))\n", "def gcd(a,b):\n    while b:\n        a,b = b,a%b\n    return a\n\ndef lcm(a,b):\n    return a*b//gcd(a,b)\n\nn = int(input())\nif n==1:\n    print(1)\nelif n==2:\n    print(2)\nelif n%2 == 1:\n    print(lcm(n,lcm(n-2,n-1)))\nelse :\n    ans = 0\n    for i in range(max(n-50,1),n+1) :\n        for j in range(max(n-50,1),n+1) :\n            for k in range(max(n-50,1),n+1) :\n                ans = max(ans,lcm(i,lcm(j,k)))\n    print(ans)", "def main():\n    n = int(input())\n    print(n if n < 3 else ((n - 1) * (n * (n - 2) if n & 1 else (n - 3) * (n if n % 3 else n - 2))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nprint(n if n < 3 else ((n - 1) * (n * (n - 2) if n & 1 else (n - 3) * (n if n % 3 else n - 2))))", "n = int(input())\nif n < 3: \n    print(n)\n    return\nif n % 2 != 0: \n    print(n*(n-1)*(n-2))\n    return\nif n % 3 == 0: \n    print((n - 3)* (n - 1) * (n - 2))\n    return\nprint((n - 1) * (n) * (n - 3))\n", "#!/usr/bin/env python3\nimport collections, itertools, functools, math, fractions\nimport operator\n\ndef lcm(a, b):\n    return (a*b)//fractions.gcd(a, b)\n\ndef solve(n):\n    if n <= 2:\n        return n\n\n    if n%2 == 1:\n        return lcm(n, lcm(n-1, n-2))\n\n    offset = 100\n    if n-offset < 0:\n        offset = n\n    r = 1\n    for i in range(n, n-offset, -1):\n        for j in range(i, n-offset, -1):\n            for k in range(j, n-offset, -1):\n                r = max(r, lcm(i, lcm(j, k)))\n    return r\n\n\ndef __starting_point():\n    print(solve(int(input())))\n\n\n__starting_point()", "from fractions import gcd\ng=lambda a,b:a//gcd(a,b)*b\nn=int(input())+1\nm=max(1,n-50)\nprint(max([g(a,g(b,c))for a in range(m,n)for b in range(m,n) for c in range(m,n)]))", "'''\nCreated on May 4, 2016\n@author: Md. Rezwanul Haque\n'''\nn = int (input())\nif(n<3):print(n)\nelif(n%2==0):\n    if(n%3 == 0 and (n-3)%3 == 0):\n        print((n-1)*(n-2)*(n-3))\n    else:\n        print(n*(n-1)*(n-3))\nelse:\n    print(n*(n-1)*(n-2))\n", "from fractions import gcd\n\nn= int(input())\n\nlim = 50\nr = 0\n\nif n <= 2 :\n    print(n)\nelif n == 3 :\n    print(6)\nelse:\n    i = n\n    while i>0 and i>n-lim:\n        j = i-1\n        while j>0 and j>n-lim:\n            k = j-1\n            while k>0 and k>n-lim:\n                x = (i*j)//gcd(i,j)\n                x = (k*x)//gcd(k,x)\n                r = max(r,x)\n                k -= 1\n            j -= 1\n        i -=1\n    print(r)", "#!/usr/bin/env python3\ndef read_string():\n    return input()\ndef read_strings(return_type = iter, split = None, skip = 0):\n    return return_type(input().split(split)[skip:])\ndef read_lines(height, return_type = iter):\n    return return_type(read_string() for i in range(height))\ndef read_number():\n    return int(input())\ndef read_numbers(return_type = iter, skip = 0):\n    return return_type(int(i) for i in input().split()[skip:])\ndef read_values(*types, array = None):\n    line = input().split()\n    result = []\n    for return_type, i in zip(types, list(range(len(types)))):\n        result.append(return_type(line[i]))\n    if array != None:\n        array_type, array_contained = array\n        result.append(array_type(array_contained(i) for i in line[len(types):]))\n    return result\ndef read_array(item_type = int, return_type = iter, skip = 0):\n    return return_type(item_type(i) for i in input().split()[skip:])\ndef read_martix(height, **args):\n    return_type = args[\"return_type\"] if \"return_type\" in args else iter\n    return_type_inner = args[\"return_type_inner\"] if \"return_type_inner\" in args else return_type\n    return_type_outer = args[\"return_type_outer\"] if \"return_type_outer\" in args else return_type\n    item_type = args[\"item_type\"] if \"item_type\" in args else int\n    return return_type_outer(read_array(item_type = item_type, return_type = return_type_inner) for i in range(height))\ndef read_martix_linear(width, skip = 0, item_type = int, skiped = None):\n    num = read_array(item_type = item_type, skip = skip)\n    height = len(num) / width\n    return [num[i * width: (i + 1) * width] for i in range(height)]\ndef gcd(x, y):\n    while x != 0:\n        y %= x;\n        if y == 0:\n            return x;\n        x %= y;\n    return y;\ndef lcm(x, y):\n    return x * y // gcd(x, y)\ndef main():\n    n = read_number()\n    r = list(range(max(1, n - 20), n+1))\n    print(max([lcm(lcm(x,y),z) for x in r for y in r for z in r]))\ndef __starting_point():\n    main()\n\n__starting_point()", "def gcd(x, y):\n    if x: return gcd(y % x, x)\n    return y\ndef lcm(x, y):\n    return x * y // gcd(x, y)\nn = int(input())\nr = list(range(max(1, n - 20), n+1))\nprint(max([lcm(lcm(x,y),z) for x in r for y in r for z in r]))\n"]