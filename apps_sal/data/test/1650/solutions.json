["MOD = 10**9 + 7\n\ns = str(input())\n\ndp0 = [0] * (len(s)+1)\ndp1 = [0] * (len(s)+1)\ndp0[0] = 1\n\nfor i in range(1,len(s)+1):\n    if s[i-1] == \"0\":\n        dp0[i] = dp0[i-1]\n        dp1[i] = dp1[i-1] * 3\n    else:\n        dp0[i] = dp0[i-1] * 2\n        dp1[i] = dp0[i-1] + dp1[i-1] * 3\n    dp0[i] %= MOD\n    dp1[i] %= MOD\n\nanswer = dp0[-1] + dp1[-1]\nif answer >= MOD:\n    answer -= MOD\nprint(answer)\n", "import sys\n\nimport numba as nb\nimport numpy as np\n\ninput = sys.stdin.readline\nP = 10 ** 9 + 7\n\n\n@nb.njit(\"i8(i8[:],i8)\", cache=True)\ndef solve(L, N):\n    dp = np.zeros(shape=(N + 1, 2), dtype=np.int64)\n    dp[0][0] = 1\n    for i in range(N):\n        n = L[i]\n        for j in range(2):\n            max_d = 1 if j == 1 else n\n            for d in range(max_d + 1):\n                next_j = int(j or d < n)\n                dp[i + 1][next_j] += (d + 1) * dp[i][j]\n\n        dp[i + 1][0] %= P\n        dp[i + 1][1] %= P\n\n    return (dp[N][0] + dp[N][1]) % P\n\n\ndef main():\n    L = np.array(list(map(int, input().rstrip())), dtype=np.int64)\n\n    N = len(L)\n    ans = solve(L, N)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "l=input()\nn=len(l)\nmod=pow(10,9)+7\nimport sys\nsys.setrecursionlimit(10**7)\n#dp1,dp2=[0]*n,[0]*n\ndp1,dp2=0,1\nfor i in range(n):\n  if l[i]=='0':\n    dp1*=3\n  else:\n    dp1*=3\n    dp1+=dp2\n    dp2*=2\n  dp1%=mod\n  dp2%=mod\nprint((dp1+dp2)%mod)", "L = input()\nn = len(L)\nmod = 1000000007\ndp = [[0,0] for _ in range(n+1)]\ndp[0][0] = 1\nfor i in range(n):\n    dp[i+1][1] += 3*dp[i][1]%mod\n    dp[i+1][1] %= mod\n    if L[i] == \"1\":\n        dp[i+1][0] += 2*dp[i][0]\n        dp[i+1][0] %= mod\n        dp[i+1][1] += dp[i][0]\n        dp[i+1][1] %= mod\n    else:\n        dp[i+1][0] += dp[i][0]\n        dp[i+1][0] %= mod\nans = (dp[n][0]+dp[n][1])%mod\n# for i in range(n+1): print(dp[i])\nprint(ans)", "l = list(map(int, input()))\nmod = 10 ** 9 + 7\n\nln = len(l)\ndp = [[0] * 2 for _ in range(2)]\ndp[0][1] = 1\n\nfor e in l:\n    dp_new = [[0] * 2 for _ in range(2)]\n    for now in range(2):\n        for prev in range(2):\n            # same -> same\n            if now == e:\n                dp_new[now][1] += dp[prev][1] * (now + 1)\n\n            # same -> small\n            if now == 0 and e == 1:\n                dp_new[now][0] += dp[prev][1]\n\n            # small -> small\n            dp_new[now][0] += dp[prev][0] * (now + 1)\n\n    dp = dp_new\n    for i in range(2):\n        for j in range(2):\n            dp[i][j] %= mod\n\nans = 0\nfor row in dp:\n    ans += sum(row)\n    ans %= mod\n\nprint(ans)\n", "\"\"\"\n\nAtCoder Beginner Contest 129  E - Sum Equals Xor\n\nXOR\u306f\u6841\u4e0a\u304c\u308a\u304c\u306a\u3044\u306e\u3067\u3001A xor B \u304cA+B\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3053\u3068\u306f\u306a\u3044\uff08\u6700\u5927\u3067\u3082A+B\u307e\u3067\uff09\n\u306a\u306e\u3067\u3001 A xor B = A + B \u304c\u6210\u7acb\u3059\u308b\u306e\u306f\u3001A\u3068B\u3092\u4e8c\u9032\u6570\u3067\u307f\u305f\u3068\u304d\u306b\u3001\u4e21\u65b91\u304c\u7acb\u3063\u3066\u3044\u308bbit\u304c\u306a\u3044\u3053\u3068\u3002\n\n\u6841DP\u306e\u6587\u8108\u3067\u8003\u3048\u308b\u3068\u3001\ndp1,2[i] : A\u3084B\u306e\u5de6\u304b\u3089i\u6587\u5b57\u76ee\u307e\u3067\u3092\u6c7a\u3081\u305f\u3068\u304d\u306b\u3001\n\u30fbdp2 : \u305d\u306e\u6642\u70b9\u3067\u306eA+B\u304cL\u4ee5\u4e0b\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\uff08\u5de6\u304b\u3089i\u756a\u76ee\u307e\u3067\u306b\u3064\u3044\u3066\u3001A+B\u306ep\u6841\u76ee\u306f0\u3060\u304c\u3001L\u306ep\u6841\u76ee\u306f1\u3001\u307f\u305f\u3044\u306a\u306e\u304c\u5b58\u5728\u3059\u308b\uff08\u5148\u982d\uff5ep-1\u307e\u3067\u306f\u4e00\u81f4\uff09\uff09A\u3068B\u306e\u7d44\u306e\u500b\u6570\n\u30fbdp1 : \u305d\u306e\u6642\u70b9\u3067\u306fA+B\u304cL\u4ee5\u4e0b\u306b\u306a\u308b\u304b\u5206\u304b\u3089\u306a\u3044A\u3068B\u306e\u7d44\u306e\u500b\u6570\uff08\u305d\u306e\u6642\u70b9\u307e\u3067\u306fL\u306ei\u6841\u76ee\u307e\u3067\u3068\u4e00\u81f4\u3059\u308b\u7d44\u306e\u6570\uff09\n\n\n\n\u9077\u79fb\u306b\u3064\u3044\u3066\u3001\nL\u306ei\u6841\u76ee\u304c\n\u30fb0\u306e\u5834\u5408\n - dp1 : dp2\u304b\u3089\u9077\u79fb\u3059\u308b\u3068L\u4ee5\u4e0b\u306b\u306a\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3059\u308b\u306e\u3067\u3001dp2\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u3053\u3068\u306f\u306a\u3044\uff06A+B\u306ei\u30d3\u30c3\u30c8\u76ee\u306b1\u304c\u7acb\u3064\u3068L\u3092\u4e0a\u56de\u308b\u306e\u3067\u30010\u306b\u306a\u308b\u3057\u304b\u306a\u304f\u3001i\u6841\u76ee\u306f\u4e21\u65b90\u306e\uff11\u901a\u308a\u3067\u9077\u79fb\n - dp2 : dp1\u304b\u3089\u9077\u79fb\u3057\u3066\u304d\u3066i\u756a\u76ee\u306b0\u3092\u3044\u308c\u3066\u3082\u3001L\u4ee5\u4e0b\u306b\u306a\u308b\u304b\u78ba\u5b9a\u3057\u306a\u3044\u306e\u3067\u3001dp1\u304b\u3089\u306e\u9077\u79fb\u306f\u306a\u3044\u3002\u4e00\u65b9\u3067\u3002dp2\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u5834\u5408\u3001\u65e2\u306bL\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001A,B = 1,1\u4ee5\u5916\u306e\uff13\u30d1\u30bf\u30fc\u30f3\u3092\u3068\u308c\u308b\n\u30fb1\u306e\u5834\u5408\n - dp1 : dp2\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u306e\u3092\u8003\u3048\u308b\u3068\u3001dp2\u306e\u6642\u70b9\u3067\u65e2\u306bL\u4ee5\u4e0b\u306b\u306a\u308b\u306e\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001dp2\u304b\u3089\u306f\u9077\u79fb\u3067\u304d\u306a\u3044\u3002\u4e00\u65b9\u3067\u3001dp1\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u5834\u5408\u3001i\u6841\u76ee\u307e\u3067L\u3068\u540c\u3058\u306b\u306a\u308b\u306e\u3067\u3001A,B\u306e\u4e00\u65b9\u304c1\u3067\u4ed6\u65b9\u304c0\u306e\uff12\u901a\u308a\u3092\u3068\u308c\u308b\n - dp2 : dp1\u304b\u3089\u9077\u79fb\u3057\u3066 A,B=0,0 \u3092\u3068\u308c\u3070L\u4ee5\u4e0b\u304c\u78ba\u5b9a\uff06dp2\u304b\u3089\u9077\u79fb\u3057\u3066 1,1 \u4ee5\u5916\u306e3\u901a\u308a\u306e\u9077\u79fb\n\n\"\"\"\n\n\nL = input()\nN = len(L)\nMOD = 10**9 + 7\n\ndp1 = [0] * (N+1)\ndp2 = [0] * (N+1)\ndp1[0] = 1\n\n\nfor i in range(N):\n    if L[i] == \"0\":\n        dp1[i+1] = dp1[i] # (0,0)\n        dp2[i+1] = dp2[i] * 3 # (1,1)\u4ee5\u5916\u306e3\u3064\n    else:\n        dp1[i+1] = dp1[i] * 2 # (1,0), (0,1)\n        dp2[i+1] = dp2[i] * 3 + dp1[i] # dp2\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u5834\u5408\u306f(1,1)\u4ee5\u5916\u306e3\u3064\u3001dp1\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u5834\u5408\u306f1\u306b\u306a\u3089\u306a\u3044\u3068\u3088\u3044\u306e\u3067(0,0)\n\n    dp1[i+1] %= MOD\n    dp2[i+1] %= MOD\n\nprint((dp1[-1] + dp2[-1]) % MOD)", "S=input()\nc=len(S)\nmod=1000000007\np=1\nans=pow(3,c-1,mod)\nfor i in range(1,c):\n  if S[i]==\"1\":\n    ans+=pow(2,p,mod)*pow(3,c-i-1,mod)\n    p+=1\nprint((ans+pow(2,p,mod))%mod)", "def main():\n  s=input()\n  n=len(s)\n  mod=10**9+7\n  dp=[[0]*2 for i in range(10**5+5)]\n  \n  dp[0][0]=1\n  for i in range(n):\n    # a+b=0\n    if s[i]=='0':\n      dp[i+1][0]=dp[i][0]\n      dp[i+1][1]=dp[i][1]\n    else:\n      dp[i+1][1]=(dp[i][0]+dp[i][1])%mod\n\n    # a+b=1\n    if s[i]=='0':\n      dp[i+1][1]+=dp[i][1]*2; dp[i+1][1]%=mod\n    else:\n      dp[i+1][0]+=dp[i][0]*2; dp[i+1][0]%=mod\n      dp[i+1][1]+=dp[i][1]*2; dp[i+1][1]%=mod\n\n  print((dp[n][0]+dp[n][1])%mod)\n\ndef __starting_point():\n  main()\n__starting_point()", "MOD = 10 ** 9 + 7\nL = input()\nN = len(L)\ntotal = 0\none_count = 0\npow2, pow3 = [1], [1]\np2, p3 = 1, 1\nfor i in range(N):\n    p2 = p2 * 2 % MOD\n    p3 = p3 * 3 % MOD\n    pow2.append(p2)\n    pow3.append(p3)\nfor i in range(N):\n    if L[i] == \"1\":\n        total = (total + pow2[one_count] * pow3[N - i - 1]) % MOD\n        one_count += 1\nprint(((total + pow2[one_count] * pow3[N - i - 1]) % MOD))\n", "MOD = 10 ** 9 + 7\n\nL = list(input())\n\nN = len(L)\n\nOK = [0] * (N + 1)\nJUST = [0] * (N + 1)\nJUST[0] = 1\n\nfor i in range(N):\n    if L[i] == '1':\n        OK[i + 1] = (OK[i] * 3 + JUST[i]) % MOD\n        JUST[i + 1] = (JUST[i] * 2) % MOD\n    else:\n        OK[i + 1] = (OK[i] * 3) % MOD\n        JUST[i + 1] = (JUST[i]) % MOD\n\nprint ((OK[-1] + JUST[-1]) % MOD)", "L=input()\nN=len(L)\ndp=[[0,0]for _ in range(N)]\ndp[0][0]=1 #\u4ee5\u4e0b\u304c\u78ba\u5b9a\uff080\uff09\ndp[0][1]=2 #\u4ee5\u4e0b\u304c\u78ba\u5b9a\u3057\u3066\u306a\u3044\uff081,0\uff09\u3068\u9006\nmod=10**9+7\nfor i in range(1,N):\n  #\u4ee5\u4e0b\u30e2\u30fc\u30c9\u306f3\u500d\u306b\u914d\u7d66\u30d1\u30bf\u30fc\u30f3\u304c\u5897\u3048\u308b\n  dp[i][0]+=3*dp[i-1][0]\n  dp[i][0]%=mod\n  if L[i]=='0':\n    #(0,0)\u3092\u914d\u7d66\u3057\u3001\u305d\u306e\u307e\u307e\n    dp[i][1]+=dp[i-1][1]\n  else:\n    #(0,0)\u3092\u914d\u7d66\u3059\u308c\u3070\u3001\u4ee5\u4e0b\u30e2\u30fc\u30c9\u306b\u79fb\u308b\n    dp[i][0]+=dp[i-1][1]\n    #(1,0)(0,1)\u3092\u914d\u7d66\u3059\u308b\n    dp[i][1]+=dp[i-1][1]*2\n  dp[i][0]%=mod\n  dp[i][1]%=mod\nprint(sum(dp[-1])%mod)", "s=input()\nn=len(s)\nmod=10**9+7\ndp=[[0]*2 for i in range(n+5)]\n# dp[i][j]\n#  : \u53f3\u304b\u3089i\u6841\u76ee\u307e\u3067\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\n#     j=0:L\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\n#     j=1:L\u672a\u6e80\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\n\ndp[0][0]=1\nfor i in range(n):\n  # i\u6841\u76ee\u304ca+b=0\u306e\u30b1\u30fc\u30b9\uff08\u3064\u307e\u308ai\u6841\u76ee\u306fa=b=0\uff09\n  if s[i]=='0':\n    dp[i+1][0]=dp[i][0]\n    dp[i+1][1]=dp[i][1]\n  else:\n    dp[i+1][1]=(dp[i][1]+dp[i][0])%mod\n    \n  # i\u6841\u76ee\u304ca+b=1\u306e\u30b1\u30fc\u30b9\uff08\u3064\u307e\u308ai\u6841\u76ee\u306fa=0,b=1 or a=1,b=0\uff09\n  if s[i]=='0':\n    dp[i+1][1]+=dp[i][1]*2\n    dp[i+1][1]%=mod\n  else:\n    dp[i+1][0]+=dp[i][0]*2\n    dp[i+1][0]%=mod\n    dp[i+1][1]+=dp[i][1]*2\n    dp[i+1][1]%=mod\n  \nprint((dp[n][0]+dp[n][1])%mod)", "import sys\n\ninput = sys.stdin.readline\nP = 10 ** 9 + 7\n\n\ndef solve(L, N):\n    dp = [[0, 0] for _ in range(N + 1)]\n    dp[0][0] = 1\n    for i in range(N):\n        n = L[i]\n        for j in range(2):\n            max_d = 1 if j == 1 else n\n            for d in range(max_d + 1):\n                next_j = int(j or d < n)\n                dp[i + 1][next_j] += (d + 1) * dp[i][j]\n\n        dp[i + 1][0] %= P\n        dp[i + 1][1] %= P\n\n    return (dp[N][0] + dp[N][1]) % P\n\n\ndef main():\n    L = list(map(int, input().rstrip()))\n\n    N = len(L)\n    ans = solve(L, N)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(200000)\n\nMOD = 1000000007  # type: int\n\ndef h(L, i):\n    return pow(3, len(L)-i, MOD)\n\ndef g(L, i):\n    if len(L) == i:\n        return 1\n    if L[i] == '1':\n        return ((2 * g(L, i+1)) % MOD + h(L, i+1)) % MOD\n    return g(L, i+1)\n\ndef solve(L: str):\n    return g(L, 0)\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    L = next(tokens)  # type: str\n    print((solve(L)))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\ndef __starting_point():\n    #test()\n    main()\n\n__starting_point()", "L = input()\n\nN = len(L)\nmod = int(1e9 + 7)\n\n# \u6841DP\n# a+b <= N \u78ba\u5b9a\ndp1 = [0] * N\n# a+b <= N \u672a\u78ba\u5b9a\ndp2 = [0] * N\n\n# L[0] == 1\u306a\u306e\u3067\u3001\u521d\u671f\u5024\u304c\u6c7a\u307e\u308b\uff08\u306f\u305a\uff09\ndp1[0] = 1 # (A0,B0) = (0,0)\ndp2[0] = 2 # (A0,B0) = (0,1), (1,0)\n\nfor i in range(1,N):\n  dp1[i] += dp1[i-1] * 3 # (1,1)\u4ee5\u5916\u306e3\u30d1\u30bf\u30fc\u30f3\n  dp1[i] %= mod\n  if L[i] == '1':\n    dp1[i] += dp2[i-1] # (0,0)\n    dp2[i] += dp2[i-1] * 2 # (1,0),(0,1)\n  else:\n    # L[i] == '0'\n    dp2[i] += dp2[i-1] # (0,0)\n  dp1[i] %= mod\n  dp2[i] %= mod\n  \nprint((dp1[N-1] + dp2[N-1]) % mod)", "l=input()\nn=len(l)\nmod=10**9+7\ndp=[[0,0]for _ in range(n)]\ndp[0]=[2,1]\nfor i in range(1,n):\n  if l[i]==\"1\":\n    dp[i][0]=dp[i-1][0]*2\n    dp[i][1]=dp[i-1][1]*3+dp[i-1][0]\n  else:\n    dp[i][0]=dp[i-1][0]\n    dp[i][1]=dp[i-1][1]*3\n  dp[i][0]%=mod\n  dp[i][1]%=mod\nprint(sum(dp[n-1])%mod)", "L=str(input())\nls=len(L)\ncnt=0\nans=0\nMOD=10**9+7\nfor i in range(ls):\n    if L[i]==\"1\":\n        tmp=pow(3,ls-(i+1),MOD)*pow(2,cnt,MOD)\n        tmp%=MOD\n        ans+=tmp\n        cnt+=1\nans+=pow(2,cnt,MOD)\nprint(ans%MOD)", "s=input()[::-1]\nn=len(s)\nmod=10**9+7\ndp=[[0]*2 for i in range(n+5)]\n# dp[i][j]\n#  : \u5de6\u304b\u3089i\u6841\u76ee\u307e\u3067\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3068\u304d\u306b\n#     j=0:\u3053\u306e\u6841\u307e\u3067\u306fL\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\n#     j=1:\u3053\u306e\u6841\u307e\u3067\u3067\u3059\u3067\u306bL\u672a\u6e80\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\n\ndp[n][0]=1\nfor i in reversed(range(n)):\n  # i\u6841\u76ee\u304ca+b=0\u306e\u30b1\u30fc\u30b9\uff08\u3064\u307e\u308ai\u6841\u76ee\u306fa=b=0\uff09\n  if s[i]=='0':\n    dp[i][0]=dp[i+1][0] # j=0\u306f\u30b3\u30d4\u30fc\uff08\u6e80\u305f\u3059\u7b54\u3048\u306e\u6570\u306fa=b=0\u306e1\u7d44\u3060\u3051\u306a\u306e\u3067\u5897\u3048\u306a\u3044\uff09\n    dp[i][1]=dp[i+1][1] # j=1\u306f\u30b3\u30d4\u30fc\uff08\u6e80\u305f\u3059\u7b54\u3048\u306e\u6570\u306fa=b=0\u306e1\u7d44\u3060\u3051\u306a\u306e\u3067\u5897\u3048\u306a\u3044\uff09\n  else:\n    dp[i][1]=(dp[i+1][1]+dp[i+1][0])%mod # a+b<l\u304c\u78ba\u5b9a\u3059\u308b\n    \n  # i\u6841\u76ee\u304ca+b=1\u306e\u30b1\u30fc\u30b9\uff08\u3064\u307e\u308ai\u6841\u76ee\u306fa=0,b=1 or a=1,b=0\uff09\n  if s[i]=='0':\n    dp[i][1]+=dp[i+1][1]*2 # j=0\u306eCase\u3060\u3068a+b>l\u306b\u306a\u308b\u306e\u3067\u52a0\u7b97\u3057\u306a\u3044\n    dp[i][1]%=mod\n  else:\n    dp[i][0]+=dp[i+1][0]*2 # j=0\u306f2\u500d\u3092\u30b3\u30d4\u30fc\uff08\u6e80\u305f\u3059\u7b54\u3048\u306e\u6570\u306e\u7d44\u5408\u305b\u304c2\u7d44\u306a\u306e\u3067\uff09\n    dp[i][0]%=mod\n    dp[i][1]+=dp[i+1][1]*2\n    dp[i][1]%=mod\n  \nprint((dp[0][0]+dp[0][1])%mod)", "L=input()\nN=len(L)\ndp=[[0,0]for _ in range(N)]\ndp[0][0]=1\ndp[0][1]=2\nmod=10**9+7\nfor i in range(1,N):\n  dp[i][0]+=3*dp[i-1][0]\n  dp[i][0]%=mod\n  if L[i]=='0':\n    dp[i][1]+=dp[i-1][1]\n  else:\n    dp[i][0]+=dp[i-1][1]\n    dp[i][1]+=dp[i-1][1]*2\n  dp[i][0]%=mod\n  dp[i][1]%=mod\nprint(sum(dp[-1])%mod)", "mod=10**9+7\n\ns=input()\nn=len(s)\n\ndp=[[0] * 2 for _ in range(100001)]\n\ndp[0][0] =1\n\nfor i in range(n):\n    if s[i] == '0':\n        dp[i+1][0] = dp[i][0]\n        dp[i+1][1] = dp[i][1]\n    else:\n        dp[i+1][1] = (dp[i][0] + dp[i][1]) % mod\n\n    if s[i] == '0':\n        dp[i+1][1] += dp[i][1]*2 % mod\n    else:\n        dp[i+1][0] += dp[i][0]*2 % mod\n        dp[i+1][1] += dp[i][1]*2 % mod\n\nprint((dp[n][0]+dp[n][1]) % mod)", "L = input()\nl = len(L)\nmod = 10**9 + 7\nans = 1  # (0,0)\n\nd = dict()\n\n\ndef modpow(x, n, mod):\n    if x not in d:\n        d[x] = [1]\n    l = len(d[x])\n    ret = d[x][-1]\n    for i in range(l, n+1):\n        ret *= x\n        ret %= mod\n        d[x].append(ret)\n    return(d[x][n])\n\n\nans = modpow(3, l, mod)\n\nr = 0\ncount = 0\n\nfor i in range(l):\n    if L[i] == '0':\n        r = modpow(3, l-i-1, mod) * modpow(2, count, mod) * 2\n        ans -= r\n        ans %= mod\n    else:\n        count += 1\nprint(ans)\n", "# coding: utf-8\n# Your code here!\nL=input()\n\nN=len(L)\n\ndp=[[0 for i in range(2)] for j in range(N)]\ndp[0][0]=1\ndp[0][1]=2\n#print(dp)\n\nmod=10**9+7\nfor i in range(N-1):\n    dp[i+1][0]=(3*dp[i][0]+(0 if L[i+1]==\"0\" else dp[i][1]))%mod\n    dp[i+1][1]=(dp[i][1] if L[i+1]==\"0\" else 2*dp[i][1])%mod\n\n\n#print(dp)\nprint(((dp[-1][0]+dp[-1][1])%mod))\n\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    L = readline().strip()\n\n    eq, less = 2, 1\n    for d in L[1:]:\n        if d == '1':\n            less = (eq + 3 * less) % MOD\n            eq = 2 * eq % MOD\n        else:\n            less = 3 * less % MOD\n\n    print(((eq + less) % MOD))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "MOD = 10 ** 9 + 7\nL = input()\nN = len(L)\ntotal = 0\none_count = 0\np3 = [1] * N\nfor i in range(1, N):\n    p3[i] = p3[i - 1] * 3 % MOD\np2 = 1\nfor i in range(N):\n    if L[i] == \"1\":\n        total = (total + p2 * p3[N - i - 1]) % MOD\n        p2 = p2 * 2 % MOD\nprint((total + p2 * p3[N - i - 1]) % MOD)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    L = input()\n    n = len(L)\n\n    res = 0\n    cnt = 0\n    for i in range(n):\n        if L[i] == \"1\":\n            rest = n - (i + 1)\n            res += pow(2, cnt, mod) * pow(3, rest, mod) % mod\n            res %= mod\n            cnt += 1\n\n    res += pow(2, cnt, mod)\n    print((res % mod))\n\n\ndef resolve2():\n    \"\"\"\n    \u6841DP\n    \"\"\"\n    L = input().rstrip()\n    n = len(L)\n\n    # dp[i][0]:L\u3092\u4e0a\u304b\u3089i\u6841\u76ee\u307e\u3067\u898b\u305f\u6642\u3001L\u3068\u4e00\u81f4\u3059\u308b\u3088\u3046\u306a\u7d44\u307f\u5408\u308f\u305b\n    # dp[i][1]:L\u3092\u4e0a\u304b\u3089i\u6841\u76ee\u307e\u3067\u898b\u305f\u6642\u3001L\u672a\u6e80\u306b\u306a\u308b\u3088\u3046\u306a\u7d44\u307f\u5408\u308f\u305b\n    dp = [[0] * 2 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        if L[i - 1] == \"0\":\n            # \u4eca\u898b\u3066\u3044\u308b\u6841\u304c0\u3067\u3042\u308a\u305d\u308c\u4ee5\u524d\u306e\u6570\u5024\u304cL\u3068\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u3001i\u6841\u76ee\u307e\u3067\u4e00\u81f4\u3059\u308b\u6761\u4ef6\u306b\u3042\u3066\u306f\u307e\u308b\u7d44\u307f\u5408\u308f\u305b\u306f(0,0)\u306e\u307f\n            dp[i][0] = dp[i - 1][0]\n            # \u4eca\u898b\u3066\u3044\u308b\u6841\u304c0\u3067\u3042\u308a\u305d\u308c\u4ee5\u524d\u306e\u6570\u5024\u304cL\u672a\u6e80\u3067\u3042\u308c\u3070\u3001\u3069\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3082L\u672a\u6e80\u306b\u306a\u308b(0,0)(0,1)(1,0)\n            dp[i][1] = (dp[i - 1][1] * 3) % mod\n        else:\n            # \u4eca\u898b\u3066\u3044\u308b\u6841\u304c1\u3067\u3042\u308a\u305d\u308c\u4ee5\u524d\u306e\u6570\u5024\u304cL\u3068\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u3001i\u6841\u76ee\u307e\u3067\u4e00\u81f4\u3059\u308b\u6761\u4ef6\u306b\u3042\u3066\u306f\u307e\u308b\u7d44\u307f\u5408\u308f\u305b\u306f(0,1),(1,0)\u306e\u307f\n            dp[i][0] = (dp[i - 1][0] * 2) % mod\n            # \u4eca\u898b\u3066\u3044\u308b\u6841\u304c1\u3067\u3042\u308a\u305d\u308c\u4ee5\u524d\u306e\u6570\u5024\u304cL\u672a\u6e80\u3067\u3042\u308c\u3070\u3001\u3069\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3082L\u672a\u6e80\u306b\u306a\u308b(0,0)(0,1)(1,0)\n            # \u4eca\u898b\u3066\u3044\u308b\u6841\u304c1\u3067\u3042\u308a\u305d\u308c\u4ee5\u524d\u306e\u6570\u5024\u304c\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u3001L\u672a\u6e80\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u306f(0,0)\u306e\u307f\n            dp[i][1] = (dp[i - 1][1] * 3 + dp[i - 1][0]) % mod\n\n    print(((dp[n][0] + dp[n][1]) % mod))\n\n\ndef __starting_point():\n    resolve2()\n\n__starting_point()", "L=input()\nMOD=10**9+7\nl=len(L)\ndp1=[0]*(l+1)\ndp2=[0]*(l+1)\ndp2[0]=1\nfor i in range(l):\n    dp1[i]%=MOD\n    dp2[i]%=MOD\n    if int(L[i])==1:\n        dp1[i+1]=3*dp1[i]+dp2[i]\n        dp2[i+1]=dp2[i]*2\n    else:\n        dp1[i+1]=3*dp1[i]\n        dp2[i+1]=dp2[i]\nans=dp1[l]+dp2[l]\nprint(ans%MOD)", "from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    L=readline().strip()\n    n=len(L)\n    mod=10**9+7\n\n    dpF=[0]*(n+1)\n    dpF[0]=1\n    dpT=[0]*(n+1)\n    for i in range(1,n+1):\n        if L[i-1]==\"1\":\n            dpF[i]+=2*dpF[i-1]\n            dpT[i]+=dpF[i-1]\n            dpT[i]+=3*dpT[i-1]\n        else:\n            dpF[i]+=dpF[i-1]\n            dpT[i]+=3*dpT[i-1]\n        dpF[i]%=mod\n        dpT[i]%=mod\n\n    print((dpF[n]+dpT[n])%mod)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nimport itertools\n# import numpy as np\nimport time\nimport math\nfrom heapq import heappop, heappush\nfrom collections import defaultdict\nfrom collections import Counter\nfrom collections import deque\nfrom itertools import permutations\nsys.setrecursionlimit(10 ** 7)\n \nINF = 10 ** 18\nMOD = 10 ** 9 + 7\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n# map(int, input().split())\nL = input()\n\ndp = [[0] * 2 for _ in range(len(L) + 1)]\n\ndp[0][0] = 2\ndp[0][1] = 1\nfor i in range(1, len(L)):\n    if L[i] == '1':\n        dp[i][0] = 2 * dp[i - 1][0] % MOD\n        dp[i][1] = (dp[i - 1][1] * 3 + dp[i - 1][0]) % MOD\n    else:\n        dp[i][0] = dp[i - 1][0]\n        dp[i][1] = (3 * dp[i - 1][1]) % MOD\nprint((sum(dp[len(L) - 1]) % MOD))\n# print(dp)\n\n", "def main():\n  L = str(input())\n  dp = [[0, 0] for _ in range(len(L))]\n  dp[0][0] = 1\n  dp[0][1] = 2\n  MOD = 10**9 + 7\n  for i in range(1, len(L)):\n    if L[i] == '1':\n      dp[i][0] = 3*dp[i-1][0] + dp[i-1][1]\n      dp[i][0] %= MOD\n      dp[i][1] = 2*dp[i-1][1]\n      dp[i][1] %= MOD\n    else:\n      dp[i][0] = 3*dp[i-1][0]\n      dp[i][0] %= MOD\n      dp[i][1] = dp[i-1][1]\n  print((dp[-1][0] + dp[-1][1])%MOD)\n\ndef __starting_point():\n  main()\n__starting_point()", "l = list(input())\nn = len(l)\nmod = pow(10, 9) + 7\nm = pow(10, 5) + 5\np2 = [1] * m\np3 = [1] * m\nfor i in range(1, m):\n    p2[i] = (p2[i - 1] * 2) % mod\n    p3[i] = (p3[i - 1] * 3) % mod\ncnt = 0\nans = 0\nfor i in range(n):\n    if l[i] == \"1\":\n        ans += ((p3[n - i - 1] * p2[cnt]) % mod)\n        ans %= mod\n        cnt += 1\nans += p2[cnt]\nans %= mod\nprint(ans)", "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 7)\n\nl = read().rstrip().decode()\nn = len(l)\nmod = 10 ** 9 + 7\ndp = [[0, 0] for _ in range(n)]\ndp[0] = [1, 2]\nfor i, check in enumerate(l[1:]):\n    i += 1\n    dp[i][0] = dp[i - 1][0] * 3\n    dp[i][1] = dp[i - 1][1]\n    if check == '1':\n        dp[i][0] += dp[i - 1][1]\n        dp[i][1] += dp[i - 1][1]\n    dp[i][0] %= mod\n    dp[i][1] %= mod\nprint((sum(dp[-1]) % mod))\n", "L = input()\nl = len(L)\ndp = [[0]*2 for _ in range(100002)]\n# dp[i][smaller]: i\u6841\u76ee\u307e\u3067\u307f\u308b\u3000\u672a\u6e80\u306a\u30891\n# dp[i][1] : i\u6841\u76ee\u307e\u3067\u307f\u3066\u3001a, b\u3069\u3061\u3089\u3082L\u672a\u6e80\n# dp[i][0] : i\u6841\u76ee\u307e\u3067\u307f\u3066\u3001a+b = L\ndp[0][0] = 1\nmod = 10**9+7\n\nfor i in range(l):\n  n = L[i]\n\n  if n == '1':\n    dp[i+1][0] += dp[i][0]*2 \n    dp[i+1][0] %= mod \n\n    dp[i+1][1] += dp[i][1]*3 + dp[i][0]\n    dp[i+1][1] %= mod \n\n  else:\n    dp[i+1][0] += dp[i][0]\n    dp[i+1][0] %= mod \n\n    dp[i+1][1] += dp[i][1]*3\n    dp[i+1][1] %= mod\n\nprint((dp[l][0]+dp[l][1])%mod)", "l = list(map(int, input()))\nmod = 10 ** 9 + 7\n\nln = len(l)\ndp = [[0] * 2 for _ in range(2)]\ndp[0][1] = 1\n\nfor e in l:\n    dp_new = [[0] * 2 for _ in range(2)]\n    for i in range(2):\n        # same -> same\n        if i == e:\n            dp_new[i][1] += (dp[0][1] + dp[1][1]) * (1 + i)\n\n        # same -> small\n        if i == 0 and e == 1:\n            dp_new[0][0] += dp[0][1] + dp[1][1]\n\n        # small -> small\n        dp_new[i][0] += (dp[0][0] + dp[1][0]) * (1 + i)\n\n    dp = dp_new\n    for i in range(2):\n        for j in range(2):\n            dp[i][j] %= mod\n\nans = 0\nfor row in dp:\n    ans += sum(row)\n    ans %= mod\n\nprint(ans)\n", "L   = list(input())\ndp  = [[0 for _ in range(2)] for _ in range(100005)]\nMOD = 10**9+7\n\ndp[0][0] = 1\n\nfor i,l in enumerate(L,1):\n  if l=='1':\n    dp[i][0] = dp[i-1][0]*2 % MOD\n    dp[i][1] = (dp[i-1][0] + dp[i-1][1]*3) % MOD\n  else:\n    dp[i][0] = dp[i-1][0]\n    dp[i][1] = dp[i-1][1]*3 % MOD\n\nprint((dp[i][0] + dp[i][1]) % MOD)", "import numpy as np\n\nL = input()\nmod = 10**9+7\n\nDP = np.zeros((len(L)+1, 2), int)\nDP[0][0] = 1\n\nfor i in range(len(L)):\n    if L[i] == '1':\n        DP[i+1][0] = DP[i][0] * 2\n        DP[i+1][1] = DP[i][0] + DP[i][1] * 3\n    else:\n        DP[i+1][0] = DP[i][0]\n        DP[i+1][1] = DP[i][1] * 3\n    DP[i+1] %= mod\n\nprint(sum(DP[-1]) % mod)", "import sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef main():\n    L = SI()\n    keta = len(L)\n\n    def rec(n):\n        if n == 1:\n            return 3 if L[keta - n] == \"1\" else 1\n\n        if L[keta - n] == \"1\":\n            return (pow(3, (n-1), MOD) + rec(n-1) * 2) % MOD\n        else:\n            return rec(n-1) % MOD\n\n    print(rec(keta))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "MOD = 10 ** 9 + 7\nL = input()\nN = len(L)\np3 = [1] * N\nfor i in range(1, N):\n    p3[i] = p3[i - 1] * 3 % MOD\np2 = 1\ntotal = 0\nfor i in range(N):\n    if L[i] == \"1\":\n        total = (total + p2 * p3[N - i - 1]) % MOD\n        p2 = p2 * 2 % MOD\nprint((total + p2 * p3[N - i - 1]) % MOD)", "l = str(input())\nll = len(l)\nmod = 10**9+7\n\nans = 0\nt1 = 0\nfor i in range(ll):\n    if l[i] == \"0\":\n        continue\n    ans = (ans+pow(2,t1,mod)*pow(3,ll-i-1,mod)%mod)%mod\n    t1 += 1\n\nans = (ans+pow(2,t1,mod))%mod\n\nprint(ans)\n", "L = input()\nll = len(L)\nMOD = 10**9 + 7\n#[*2 if 1][*1 if 1][*3]\n\ncomb = 1\nans = 0\nfor i, l in enumerate(L):\n  if l == '0':\n    continue\n  ans += comb * pow(3, ll - i - 1, MOD)\n  \n  comb *= 2\n  comb %= MOD\n\nans += comb\nans %= MOD\nprint(ans)\n\n", "import sys \nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nMOD = 10**9+7\nN = readline().decode().rstrip()\nL = len(N)\ndp = [[0]*2 for _ in range(L+1)]\ndp[0][0] = 1\nfor i in range(L):\n    nd = int(N[i])\n    if nd == 0:\n        dp[i+1][0] = dp[i][0]\n        dp[i+1][1] = (3 * dp[i][1]) % MOD\n    else:    \n        dp[i+1][0] = 2 * dp[i][0] % MOD\n        dp[i+1][1] = (3 * dp[i][1] + dp[i][0]) % MOD\nprint((sum(dp[L])%MOD))\n", "def main():\n    l = list(input())\n    n = len(l)\n    dp = [[0,0] for _ in range(n+1)]\n    dp[0][1] = 1\n    for i in range(n):\n        dp[i+1][0] += dp[i][0]*3\n        if l[i] == '1':\n            dp[i+1][1] += dp[i][1]*2\n            dp[i+1][0] += dp[i][1]\n        else:\n            dp[i+1][1] += dp[i][1]\n        dp[i+1][0] %= 10**9+7\n        dp[i+1][1] %= 10**9+7\n    print(sum(dp[n])%(10**9+7))\n\ndef __starting_point():\n    main()\n__starting_point()", "#!python3\n\n# input\nL = input()\n\nMOD = 10 ** 9 + 7\nMAX = 10 ** 5 + 5\np3 = [None] * MAX\n\n\ndef p3_init():\n    p3[0] = 1\n    for i in range(1, MAX):\n        p3[i] = 3 * p3[i - 1] % MOD\n\n\ndef main():\n    p3_init()\n    n = len(L)\n    w = 1\n    ans = 0\n    for i in range(n):\n        if L[i] == \"1\":\n            # \u4e21\u65b90\u306b\u3059\u308b\u5834\u5408\n            ans = (ans + w * p3[n - i - 1]) % MOD\n            # \u7247\u65b91\u306b\u3059\u308b\u5834\u5408\n            w = 2 * w % MOD\n    ans = (ans + w) % MOD\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef modpow(a, n, mod):\n    res = 1\n    while n > 0:\n        if n & 1:\n            res = res * a % mod\n        a = a * a % mod\n        n >>= 1\n    return res\n\n\ndef main():\n    L = input()\n    N = len(L)\n    # a + b \u304c\u5c0f\u3055\u3044\u306e\u304c\u78ba\u5b9a\n    dp_1 = [0] * N\n    # a + b \u304c\u5927\u304d\u3044\u306e\u304b\u5c0f\u3055\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\n    dp_2 = [0] * N\n\n    dp_1[0] = 1\n    dp_2[0] = 2\n\n    for i in range(1, N):\n        if L[i] == \"1\":\n            # (1, 0), (0, 1)\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\uff0ca+b\u306ei\u6841\u76ee\u304c1\n            dp_2[i] = dp_2[i - 1] * 2\n\n            dp_1[i] = dp_2[i - 1] + dp_1[i - 1] * 3\n\n            dp_2[i] %= MOD\n            dp_1[i] %= MOD\n        else:\n            # (1, 0), (0, 1)\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\uff0ca+b\u306ei\u6841\u76ee\u304c1\n            dp_2[i] = dp_2[i - 1]\n\n            dp_1[i] = dp_1[i - 1] * 3\n\n            dp_2[i] %= MOD\n            dp_1[i] %= MOD\n\n    ans = dp_1[-1] + dp_2[-1]\n    ans %= MOD\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "L = list(input())\nN = len(L)\nif '0' not in L:\n    L = ['1'] + ['0']*N\n    N += 1\nelse:\n    for i in range(N):\n        t = L[N-i-1]\n        if t == '0':\n            L[N-i-1] = '1'\n            break\n        else:\n            L[N-i-1] = '0'\nres = 0\nMOD = 10**9+7\nbuff = 1\nfor d, char in enumerate(L):\n    if char == '1':\n        res = (res + buff * pow(3, N-1-d, MOD))%MOD\n        buff = (2 * buff) % MOD\nprint(res)\n\n", "s=input()\nans=1\nans2=1\nfor i in range(len(s)):\n  if s[len(s)-1-i]=='1':\n    ans=(ans*2+ans2)%(10**9+7)\n  ans2=(ans2*3)%(10**9+7)\nprint(ans)", "\"\"\"\n\nAtCoder Beginner Contest 129  E - Sum Equals Xor\n\nXOR\u306f\u6841\u4e0a\u304c\u308a\u304c\u306a\u3044\u306e\u3067\u3001A xor B \u304cA+B\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u3053\u3068\u306f\u306a\u3044\uff08\u6700\u5927\u3067\u3082A+B\u307e\u3067\uff09\n\u306a\u306e\u3067\u3001 A xor B = A + B \u304c\u6210\u7acb\u3059\u308b\u306e\u306f\u3001A\u3068B\u3092\u4e8c\u9032\u6570\u3067\u307f\u305f\u3068\u304d\u306b\u3001\u4e21\u65b91\u304c\u7acb\u3063\u3066\u3044\u308bbit\u304c\u306a\u3044\u3053\u3068\u3002\n\n\u6841DP\u306e\u6587\u8108\u3067\u8003\u3048\u308b\u3068\u3001\ndp1,2[i] : A\u3084B\u306e\u5de6\u304b\u3089i\u6587\u5b57\u76ee\u307e\u3067\u3092\u6c7a\u3081\u305f\u3068\u304d\u306b\u3001\n\u30fbdp2 : \u305d\u306e\u6642\u70b9\u3067\u306eA+B\u304cL\u4ee5\u4e0b\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\uff08\u5de6\u304b\u3089i\u756a\u76ee\u307e\u3067\u306b\u3064\u3044\u3066\u3001A+B\u306ep\u6841\u76ee\u306f0\u3060\u304c\u3001L\u306ep\u6841\u76ee\u306f1\u3001\u307f\u305f\u3044\u306a\u306e\u304c\u5b58\u5728\u3059\u308b\uff08\u5148\u982d\uff5ep-1\u307e\u3067\u306f\u4e00\u81f4\u3057\u3066\u3082\u3057\u306a\u304f\u3066\u3082OK\uff09\uff09A\u3068B\u306e\u7d44\u306e\u500b\u6570\n\u30fbdp1 : \u305d\u306e\u6642\u70b9\u3067\u306fA+B\u304cL\u4ee5\u4e0b\u306b\u306a\u308b\u304b\u5206\u304b\u3089\u306a\u3044A\u3068B\u306e\u7d44\u306e\u500b\u6570\uff08\u305d\u306e\u6642\u70b9\u307e\u3067\u306fL\u306ei\u6841\u76ee\u307e\u3067\u3068\u4e00\u81f4\u3059\u308b\u7d44\u306e\u6570\uff09\n\n\n\n\u9077\u79fb\u306b\u3064\u3044\u3066\u3001\nL\u306ei\u6841\u76ee\u304c\n\u30fb0\u306e\u5834\u5408\n - dp1 : dp2\u304b\u3089\u9077\u79fb\u3059\u308b\u3068L\u4ee5\u4e0b\u306b\u306a\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3059\u308b\u306e\u3067\u3001dp2\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u3053\u3068\u306f\u306a\u3044\uff06A+B\u306ei\u30d3\u30c3\u30c8\u76ee\u306b1\u304c\u7acb\u3064\u3068L\u3092\u4e0a\u56de\u308b\u306e\u3067\u30010\u306b\u306a\u308b\u3057\u304b\u306a\u304f\u3001i\u6841\u76ee\u306f\u4e21\u65b90\u306e\uff11\u901a\u308a\u3067\u9077\u79fb\n - dp2 : dp1\u304b\u3089\u9077\u79fb\u3057\u3066\u304d\u3066i\u756a\u76ee\u306b0\u3092\u3044\u308c\u3066\u3082\u3001L\u4ee5\u4e0b\u306b\u306a\u308b\u304b\u78ba\u5b9a\u3057\u306a\u3044\u306e\u3067\u3001dp1\u304b\u3089\u306e\u9077\u79fb\u306f\u306a\u3044\u3002\u4e00\u65b9\u3067\u3002dp2\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u5834\u5408\u3001\u65e2\u306bL\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001A,B = 1,1\u4ee5\u5916\u306e\uff13\u30d1\u30bf\u30fc\u30f3\u3092\u3068\u308c\u308b\n\u30fb1\u306e\u5834\u5408\n - dp1 : dp2\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u306e\u3092\u8003\u3048\u308b\u3068\u3001dp2\u306e\u6642\u70b9\u3067\u65e2\u306bL\u4ee5\u4e0b\u306b\u306a\u308b\u306e\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001dp2\u304b\u3089\u306f\u9077\u79fb\u3067\u304d\u306a\u3044\u3002\u4e00\u65b9\u3067\u3001dp1\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u5834\u5408\u3001i\u6841\u76ee\u307e\u3067L\u3068\u540c\u3058\u306b\u306a\u308b\u306e\u3067\u3001A,B\u306e\u4e00\u65b9\u304c1\u3067\u4ed6\u65b9\u304c0\u306e\uff12\u901a\u308a\u3092\u3068\u308c\u308b\n - dp2 : dp1\u304b\u3089\u9077\u79fb\u3057\u3066 A,B=0,0 \u3092\u3068\u308c\u3070L\u4ee5\u4e0b\u304c\u78ba\u5b9a\uff06dp2\u304b\u3089\u9077\u79fb\u3057\u3066 1,1 \u4ee5\u5916\u306e3\u901a\u308a\u306e\u9077\u79fb\n\n\"\"\"\n\n\nL = input()\nN = len(L)\nMOD = 10**9 + 7\n\ndp1 = [0] * (N+1)\ndp2 = [0] * (N+1)\ndp1[0] = 1\n\n\nfor i in range(N):\n    if L[i] == \"0\":\n        dp1[i+1] = dp1[i] # (0,0)\n        dp2[i+1] = dp2[i] * 3 # (1,1)\u4ee5\u5916\u306e3\u3064\n    else:\n        dp1[i+1] = dp1[i] * 2 # (1,0), (0,1)\n        dp2[i+1] = dp2[i] * 3 + dp1[i] # dp2\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u5834\u5408\u306f(1,1)\u4ee5\u5916\u306e3\u3064\u3001dp1\u304b\u3089\u9077\u79fb\u3057\u3066\u304f\u308b\u5834\u5408\u306f1\u306b\u306a\u3089\u306a\u3044\u3068\u3088\u3044\u306e\u3067(0,0)\n\n    dp1[i+1] %= MOD\n    dp2[i+1] %= MOD\n\nprint((dp1[-1] + dp2[-1]) % MOD)", "l = input()\ndp = [1, 0]\nmod = 10**9+7\nfor i in l:\n    newdp = dp[:]\n    if i=='0':\n        newdp[0] = dp[0]\n        newdp[1] = dp[1]*3%mod\n    else:\n        newdp[0] = dp[0]*2%mod\n        newdp[1] = (dp[0]+dp[1]*3)%mod\n    dp = newdp\nprint(sum(dp)%mod)", "L = input()\nN = len(L)\nmod = 10**9 + 7\n\ndpT = [0]*N\ndpF = [0]*N\n\ndpT[0] = 1\ndpF[0] = 2\n\nfor i in range(1, N):\n  if L[i] == \"1\":\n    dpT[i] = dpT[i-1] * 3 + dpF[i-1] * 1\n    dpF[i] = dpF[i-1] * 2\n    dpT[i] %= mod\n    dpF[i] %= mod\n  else:\n    dpT[i] = dpT[i-1] * 3\n    dpF[i] = dpF[i-1] * 1\n    dpT[i] %= mod\n    dpF[i] %= mod\n\nprint(((dpT[-1]+dpF[-1])%mod))\n#print(dpT, dpF)\n", "def main():\n    l = input()\n    n = len(l)\n    mod = 10**9+7\n    dp1 = [0 for i in range(n)]\n    dp2 = [0 for i in range(n)]\n    dp1[0] = 1\n    dp2[0] = 2\n    for i in range(1,n):\n        if l[i] == '1':\n            dp2[i] = (2 * dp2[i-1])%mod\n            dp1[i] = (3 * dp1[i-1] + dp2[i-1])%mod\n        else:\n            dp2[i] = dp2[i-1]\n            dp1[i] = (3 * dp1[i-1]) % mod\n    print(((dp1[-1]+dp2[-1])%mod))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "l = list(map(int, input()))\nmod = 10 ** 9 + 7\n\nln = len(l)\ndp = [0] * 2\ndp[1] = 1\n\nfor e in l:\n    dp_new = [0] * 2\n    # exact -> exact\n    dp_new[1] += dp[1] * (e + 1)\n\n    # exact -> small\n    if e == 1:\n        dp_new[0] += dp[1]\n\n    # small -> small\n    dp_new[0] += dp[0] * 3\n\n    dp = dp_new\n    for i in range(2):\n        dp[i] %= mod\n\nans = sum(dp) % mod\n\nprint(ans)\n", "L=input()\nmod=10**9+7\n\n\n\nN=[int(i) for i in L]\nketa=len(N)\ndp=[[0 for i in range(2)] for j in range(keta+1)]\ndp[0][0] = 1\n#dp[0][0][1] =0\n#dp[0][1][0] =0\n#dp[0][1][1] =0\n\nfor i in range(keta):\n    for smaller in [0,1]:\n        if 1:\n            for x in range(2 if smaller else (N[i]+1)):\n                dp[i + 1][smaller | ((x == 0)&(N[i]==1))]+= dp[i][smaller]*(2 if x==1 else 1)\n                dp[i + 1][smaller | ((x == 0)&(N[i]==1))] %=mod\nprint(((dp[keta][0]+ dp[keta][1])%mod))\n", "L = input()\nl = len(L)\ndp = [[0]*2 for _ in range(100005)]\n# dp[i][smaller]: i\u6841\u76ee\u307e\u3067\u307f\u308b\u3000\u672a\u6e80\u306a\u30891\n# dp[i][1] : i\u6841\u76ee\u307e\u3067\u307f\u3066\u3001a, b\u3069\u3061\u3089\u3082L\u672a\u6e80\n# dp[i][0] : i\u6841\u76ee\u307e\u3067\u307f\u3066\u3001a+b = L\ndp[0][0] = 1\nmod = 10**9+7\n\nfor i in range(l):\n  n = L[i]\n  # a + b = 0\n  if n == \"0\":\n    dp[i+1][0] = dp[i][0]\n    dp[i+1][1] = dp[i][1]\n  else: \n    dp[i+1][1] = (dp[i][0] + dp[i][1]) % mod\n\n  # a + b = 1\n  if n == \"0\": \n    dp[i+1][1] += dp[i][1] * 2 % mod\n  else: \n    dp[i+1][0] += dp[i][0] * 2 % mod\n    dp[i+1][1] += dp[i][1] * 2 % mod\n\nprint(((dp[l][0]+dp[l][1])%mod))\n\n\n", "L = str(input())\nls = len(L)\ncnt = 0\nans = 0\nMOD = 10**9+7\nfor i in range(ls):\n    if L[i] == \"1\":\n        tmp = pow(3, ls-(i+1), MOD)*pow(2, cnt, MOD)\n        tmp %= MOD\n        ans += tmp\n        cnt += 1\nans += pow(2, cnt, MOD)\nprint((ans % MOD))\n", "L = input()\nn = len(L)\ncsum_1 = [0] * n\ncsum_0 = [0] * n\nnow1 = 0\nnow0 = 0\nfor i in range(n):\n    if L[i] == '1':\n        now1 += 1\n    else:\n        now0 += 1\n    csum_1[i] = now1\n    csum_0[i] = now0\n\nmod = 10**9+7\nans = 0\n# i\u306f\u3001\u300c\u6700\u521d\u306bL[i]=1\u304b\u3064ai=0\u304b\u3064bi=0\u3068\u306a\u308bindex\u300d\nfor i in range(n):\n    if L[i] == '1':\n        p = 1\n        # \u81ea\u5206\u3088\u308a\u5de6\u5074\u306e0\u306e\u5ea6\u306b2\u30d1\u30bf\u30fc\u30f3\u5897\u52a0\n        if i >= 1:\n            p *= pow(2,csum_1[i-1],mod)\n        #print(p)\n        # \u81ea\u5206\u3088\u308a\u53f3\u5074\u306f\u3069\u306e\u6841\u30823\u30d1\u30bf\u30fc\u30f3\u5897\u52a0\n        p *= pow(3,n-i-1,mod)\n        #print(p)\n        ans += p\n        ans %= mod\n# L=a+b\u306e\u5834\u5408\np = pow(2,csum_1[-1],mod)\n#print(p)\nans = (ans+p)%mod\nprint(ans)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\n\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    L = input()\n    n = len(L)\n\n    res = 0\n    cnt = 0\n    for i in range(n):\n        if L[i] == \"1\":\n            rest = n - (i + 1)\n            res += pow(2, cnt, mod) * pow(3, rest, mod) % mod\n            res %= mod\n            cnt += 1\n\n    res += pow(2, cnt, mod)\n    print((res % mod))\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "MOD = 10 ** 9 + 7\nINF = 10 ** 11\nimport sys\nsys.setrecursionlimit(100000000)\n\ndef main():\n    L = input()\n    dp = [[0]*2 for _ in range(len(L) + 1)]\n    \n    dp[0][0] = 1\n    for i in range(len(L)):\n        if L[i] == '1':\n            dp[i + 1][0] = dp[i][0]*2\n            dp[i + 1][1] = dp[i][0] + dp[i][1]*3\n        else:\n            dp[i + 1][0] = dp[i][0]\n            dp[i + 1][1] = dp[i][1]*3\n        dp[i + 1][0] %= MOD\n        dp[i + 1][1] %= MOD\n    print((sum(dp[-1])%MOD))\ndef __starting_point():\n    main()\n\n__starting_point()", "\nL = input()\nlenl = len(L)\nMOD = 10**9 + 7\n# dp[is\u672a\u6e80][bit]\ndp = [[0] * len(L) for _ in range(2)]\ndp[0][0] = 2\ndp[1][0] = 1\n\nfor i in range(1,len(L)):\n    b = L[i]\n    if b == '1':\n        dp[0][i] = dp[0][i-1]*2\n        dp[1][i] = dp[0][i-1] + dp[1][i-1] * 3\n    else:\n        dp[0][i] = dp[0][i-1]\n        dp[1][i] = dp[1][i-1] * 3\n    dp[0][i] %= MOD\n    dp[1][i] %= MOD\n\nprint(((dp[0][-1] + dp[1][-1])%MOD))\n", "l=input()[::-1]\nans=1\nmod=10**9+7\nfor i in range(len(l)):\n  if l[i]==\"1\":\n    ans=((ans*2)+pow(3,i,mod))%mod\nprint(ans)", "L = input()\nN = len(L)\nMOD = 10**9+7\n\ndp = [[0,0] for i in range(N+1)]\ndp[0][0] = 1\nfor i,a in enumerate(L):\n    a = int(a)\n    for less in range(2):\n        for d in range(2):\n            if less==0 and d > a: continue\n            nl = int(less or d < a)\n            dp[i+1][nl] += dp[i][less] * (d+1)\n    dp[i+1][0] %= MOD\n    dp[i+1][1] %= MOD\n\nprint(sum(dp[-1]) % MOD)", "MOD=10**9+7\nL=input()\nN=len(L)\nans,lbit=0,0\nfor i in range(N):\n    if L[i]=='0':\n        continue\n    ans=(ans+(pow(3,N-i-1,MOD)*pow(2,lbit,MOD)%MOD))%MOD\n    lbit+=1\nprint((ans+pow(2,lbit,MOD))%MOD)", "def pow_mod(x, y, mod=10**9 + 7):\n    if y == 0:\n        return 1\n    res = 1\n    for i in range(y.bit_length()):\n        if y & (1 << i):\n            res *= x\n            res %= mod\n        x *= x\n        x %= mod\n    return res\n\n\ndef calc(r):\n    if r <= 1:\n        return 3\n    return pow_mod(3, r-1) * 2\n\nl = input()\nn = len(l)\nmod = 10**9 + 7\n\ncount = [0] * (n+1)\nfor i in range(1, n+1):\n    count[i] = calc(i) + count[i-1]\n\nans = 0\ncnt = 0\nu = n\nfor i in range(n):\n    u -= 1\n    if i == n-1:\n        if l[i] == \"1\":\n            ans += 3 * pow_mod(2, cnt) % mod\n            ans %= mod\n        else:\n            ans += pow_mod(2, cnt) % mod\n            ans %= mod\n        continue\n    if l[i] == \"1\":\n        # 0\n        ans += count[u] % mod * pow_mod(2, cnt) % mod\n        ans %= mod\n        # 1\n        cnt += 1\n        pass\n    else:\n        pass\n\nprint((ans%mod))\n\n\n\n", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nL = input()\n\ndp = [[0]*2 for _ in range(len(L)+1)]\ndp[0][0] = 1\n\nfor i in range(len(L)):\n\tnd = int(L[i])\n\tni = i+1\n\tfor a in range(2):\n\t\tfor b in range(2):\n\t\t\tif a == b == 1:\n\t\t\t\tcontinue\n\t\t\tfor k in range(2):\n\t\t\t\tnk = k\n\n\t\t\t\tif nk == 0:  # \u672a\u78ba\u5b9a\n\t\t\t\t\tif nd == 1 and a == b == 0:\n\t\t\t\t\t\tnk = 1\n\t\t\t\t\tif nd == 0 and a | b:  # \u8d85\u3048\u308b\n\t\t\t\t\t\tcontinue\n\n\t\t\t\tdp[ni][nk] += dp[i][k]\n\t\t\t\tdp[ni][nk] %= mod\n\nans = dp[-1][0]+dp[-1][1]\nprint((ans%mod))\n", "l = input()\nn = len(l)\nmod = 10 ** 9 + 7\ndp = [[0 for i in range(2)] for j in range(n + 1)]\ndp[0][1] = 1\nfor i in range(n):\n    if l[i] == \"1\":\n        dp[i + 1][0] = dp[i][0] * 3 + dp[i][1]\n        dp[i + 1][0] %= mod\n        dp[i + 1][1] = dp[i][1] * 2\n        dp[i + 1][1] %= mod\n    else:\n        dp[i + 1][0] = dp[i][0] * 3\n        dp[i + 1][0] %= mod\n        dp[i + 1][1] = dp[i][1]\n        dp[i + 1][1] %= mod\nprint((dp[n][0] + dp[n][1]) % mod)", "S = input()\nL = len(S)\nmod = 10**9+7\ndp_c = [0] * L\ndp_u = [0] * L\ndp_c[0] = 1\ndp_u[0] = 2\n\nfor i in range(1,L):\n    if S[i] == \"1\":\n        dp_c[i] = dp_c[i-1] * 3 + dp_u[i-1]\n        dp_u[i] = dp_u[i-1] * 2\n    else:\n        dp_c[i] = dp_c[i-1] * 3\n        dp_u[i] = dp_u[i-1] * 1\n    dp_c[i] %= mod\n    dp_u[i] %= mod\n\nans = (dp_c[-1] + dp_u[-1]) % mod\nprint(ans)\n", "L = str(input())\nmod = 10 ** 9 + 7\n\n#a + b = a xor b \u3092\u6e80\u305f\u3059\u306e\u306f a, b \u306e bit \u304c\u4e00\u3064\u3082\u88ab\u3063\u3066\u3044\u306a\u3044\u3068\u304d\nans = 1\nthree = [1] * (len(L) + 1)\nfor i in range(len(L)):\n  ans *= 3\n  ans %= mod\n  three[i + 1] = ans\n  \n#print(three)\nx = 1\nfor i in range(len(L)):\n  if L[i] == \"0\":\n    y = x * 2\n    #print(three[len(L) - i - 1], y, i)\n    y *= three[len(L) - i - 1]\n    #print(y)\n    #y %= mod\n    ans -= y\n    ans %= mod\n  else:\n    x *= 2\n    x %= mod\n    \nprint(ans)    \n\n\n", "L = input()\nMOD = 10**9 + 7\n\neq = 1\nless = 0\nfor n in L:\n    if n == '1':\n        eq, less = eq * 2, eq + less * 3\n    else:\n        less = less * 3\n    eq %= MOD\n    less %= MOD\n\nprint(((eq + less) % MOD))\n", "# \u5404\u6841\u306b\u3064\u3044\u30663\u901a\u308a\u3042\u308b\n# (0,0) (1,0) (0,1)\n# 3 ** \u6841\u6570\u3059\u308c\u3070\u3088\u3044\u306e\u3060\u304c\u3001\u305f\u3068\u3048\u3070100\u4ee5\u4e0b\u306e\u6570\u3067101\u306f\u9078\u3079\u306a\u3044\u306e\u3067\u3001\n# \u6841DP\u3067\u51e6\u7406\n# \u30fb\u672a\u6e80\u3067\u306a\u3044->\u672a\u6e80\u3067\u306a\u3044 : 1\u306e\u3068\u304d\u306f2\u901a\u308a(1,0) (0,1)\n# \u30fb\u672a\u6e80\u3067\u306a\u3044->\u672a\u6e80\u3067\u306a\u3044 : 0\u306e\u6642\u306f1\u901a\u308a(0,0)\n# \u30fb\u672a\u6e80\u3067\u306a\u3044->\u672a\u6e80\u3067\u3042\u308b : 1\u306e\u6642\u306f1\u901a\u308a(0,0)\n# \u30fb\u672a\u6e80\u3067\u306a\u3044->\u672a\u6e80\u3067\u3042\u308b : 0\u306e\u6642\u306f0\u901a\u308a\uff08\u672a\u6e80\u306b\u3067\u304d\u306a\u3044\uff09\n# \u30fb\u672a\u6e80\u3067\u3042\u308b : 1\u3067\u30820\u3067\u30823\u901a\u308a(1,0)(0,1)(0,0)\n\n# dp[i][smaller] = \u5834\u5408\u306e\u6570\n\nimport sys\nreadline = sys.stdin.readline\n\nL = readline().rstrip()\nketa = len(L)\nDIV = 10 ** 9 + 7\n\ndp = [[0] * 2 for i in range(keta)]\ndp[0][0] = 2 # \u6700\u521d\u306e\u6841\u306f\u5fc5\u305a1\u306a\u306e\u30672\u901a\u308a\ndp[0][1] = 1 # \u672a\u6e80\u306b\u306a\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u9078\u3079\u308b\u306e\u306f1\u901a\u308a\n\nfor i in range(1, keta):\n  x = L[i] # \u305d\u306e\u6841\u306e\u6570\n  if x == \"1\":\n    dp[i][0] += dp[i - 1][0] * 2\n    dp[i][1] += dp[i - 1][0] * 1\n    dp[i][0] %= DIV\n    dp[i][1] %= DIV\n  else:\n    dp[i][0] += dp[i - 1][0] * 1\n    dp[i][0] %= DIV\n  dp[i][1] += dp[i - 1][1] * 3\n  dp[i][1] %= DIV\n\nprint((dp[keta - 1][0] + dp[keta - 1][1] ) % DIV)", "L = str(input())\nls = len(L)\ncnt = 0\nans = 0\nMOD = 10**9+7\ndp = [[0, 0] for i in range(ls+1)]\ndp[0][0] = 1\nfor i in range(ls):\n    dp[i+1][1] += 3*dp[i][1]\n    if L[i] == \"1\":\n        dp[i+1][1] += dp[i][0]\n        dp[i+1][0] += 2*dp[i][0]\n    else:\n        dp[i+1][0] += dp[i][0]\n    dp[i+1][0] %= MOD\n    dp[i+1][1] %= MOD\n\nans = sum(dp[-1]) % MOD\nprint(ans)\n", "def powmod(x, n,mod):\n  if n == 0:\n   return 1\n  K = 1\n  while n > 1:\n   if n % 2 != 0:\n    K = K * x%mod\n    x = x ** 2%mod\n    n = (n - 1) // 2\n   else:\n    x = x ** 2%mod\n    n = n // 2%mod\n\n  return K * x # \u6307\u6570\u3092\u5272\u308a\u7d9a\u3051 n \u304c 1 \u306b\u81f3\u3063\u305f\u3089\u7d42\u4e86\nL=input()\nS=len(L)-1\nif S==0:\n print((3))\nelse:\n ans=1\n ct=0\n for i in range(S+1):\n  if int(L[i])==1:\n   ans+=((powmod(3, S-i,10**9+7)+1)*powmod(2, ct,10**9+7))%(10**9+7)\n   ans%=(10**9+7)\n   ct+=1\n print(ans)\n", "ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"Yes\") if fl else print(\"No\")\nimport collections\nimport math\nimport itertools\nimport heapq as hq\nmod=10**9+7\nL = input()\nn = len(L)\ndp1 = [0]*n#i\u6841\u76ee\u307e\u3067\u304cL\u3088\u308a\u5c0f\u3055\u3044\ndp2=[0]*n#i\u6841\u76ee\u307e\u3067\u304cL\u3068\u4e00\u81f4\ndp1[0]=1 #00\ndp2[0]=2 #01 or 10\nfor i in range(1,n):\n    if L[i]==\"1\":\n        dp1[i] = (2+1)*dp1[i-1]+1*dp2[i-1]\n        dp2[i]= 2*dp2[i-1]\n    elif L[i]==\"0\":\n        dp1[i]=(2+1)*dp1[i-1]\n        dp2[i]=dp2[i-1]\n    dp1[i]%=mod\n    dp2[i]%=mod\nprint((dp1[n-1]+dp2[n-1])%mod)\n", "l = input()\nmod = 10**9+7\n\nn = len(l)\n\ndp = [[0]*2 for i in range(n)]\n\ndp[0][0] = 1\ndp[0][1] = 2\n\nfor i in range(1,n):\n    dp[i][0] = dp[i-1][0]*3\n    if l[i]=='1':\n        dp[i][0] += dp[i-1][1]\n        dp[i][1] = dp[i-1][1]*2\n    else:\n        dp[i][1] = dp[i-1][1]\n\n    dp[i][0] %= mod\n    dp[i][1] %= mod\n\nans = dp[n-1][0]+dp[n-1][1]\nprint((ans%mod))\n", "MOD = 10**9+7\n\nL = input()\n\ndp1 = [0]*(len(L)+1)\ndp0 = [1]*(len(L)+1)\n\nfor i in range(len(L)):\n    dp1[i+1] = dp1[i]*3 + dp0[i] * (L[i]==\"1\")\n    dp0[i+1] = dp0[i] * (2 if L[i]==\"1\" else 1)\n    dp1[i+1] %= MOD\n    dp0[i+1] %= MOD\n\nans = dp1[-1] + dp0[-1]\nprint(ans%MOD)", "import sys\nimport re\nimport math\nimport collections\nimport bisect\nimport itertools\nimport fractions\nimport functools\nimport copy\nimport heapq\nimport decimal\nimport statistics\nimport queue\n\n# import numpy as np\n\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: list(map(int, sys.stdin.readline().split()))\nna = lambda: list(map(int, sys.stdin.readline().split()))\nnb = lambda: list([int(x) - 1 for x in sys.stdin.readline().split()])\n\n\n# ===CODE===\n\n\ndef main():\n    s = list(input())\n    l = len(s)\n    dp1 = [0 for _ in range(l + 1)]\n    dp2 = [0 for _ in range(l + 1)]\n    dp1[0] = 1\n\n    for i in range(l):\n        if s[i] == \"1\":\n            dp1[i + 1] = dp1[i] * 2\n            dp2[i + 1] = dp1[i] + dp2[i] * 3\n        else:\n            dp1[i + 1] = dp1[i]\n            dp2[i + 1] = dp2[i] * 3\n        dp1[i + 1] %= MOD\n        dp2[i + 1] %= MOD\n\n    print(((dp1[l] + dp2[l]) % MOD))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport queue\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\nsys.setrecursionlimit(20000000)\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    L = list(input())\n\n    pow = [0] * (len(L) + 1)\n    pow[0] = 1\n    for i in range(1, len(L) + 1):\n        pow[i] = pow[i - 1] * 3 % MOD\n    N = len(L)\n    if L[-1] == \"0\":\n        answer = 1\n    else:\n        answer = 3\n    for i in range(1, N):\n        if L[N - i - 1] == \"1\":\n            answer = answer * 2 + pow[i]\n            answer %= MOD\n        else:\n            continue\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def mempow(a,b,m):\n    temp = 1\n    yield temp\n    for i in range(b):\n        temp = temp * a % m\n        yield temp\n\nL = input()\nm = 1000000007\nmem2 = []\nmem3 = []\nm2append = mem2.append\nm3append = mem3.append\nfor x in mempow(2,L.count('1'),m):\n    m2append(x)\nfor x in mempow(3,len(L)-1,m):\n    m3append(x)\nans = mem3[len(L)-1]\nappeared = 1\nfor i in range(1,len(L)):\n    if L[i] == '1':\n        ans = (ans+mem2[appeared]*mem3[len(L)-i-1]) % m\n        appeared += 1\nans = (ans+mem2[appeared]) % m\nprint(ans)", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7 \n#mod = 998244353\nfrom decimal import *\n#import numpy as np\n#decimal.getcontext().prec = 10\n\nL = input()\nn = len(L)\n\ncnt_1 = list(accumulate(list(map(int, list(L)))))\n\nans = pow(2, cnt_1[-1], mod)\nfor i in range(n):\n\tif L[i] == \"1\":\n\t\tans += pow(2, cnt_1[i]-1, mod) * pow(3, n-i-1, mod) % mod\n\t\tans %= mod\n\nprint(ans)\n\n", "L = input()\nMOD = 10 ** 9 + 7\n\nans = 1\nfor i, s in enumerate(reversed(L)):\n    if s == '1':\n        ans = (2 * ans + pow(3, i, MOD)) % MOD\nprint(ans)\n", "l = input()\nans = 1\ncnt = 1\nmod = 10 ** 9 + 7\nfor i in l[::-1]:\n    if i == \"1\":\n        ans *= 2\n        ans += cnt\n        ans %= mod\n    cnt *= 3\n    cnt %= mod\nprint(ans)", "# E - Sum Equals Xor\n# https://atcoder.jp/contests/abc129/tasks/abc129_e\n\nMOD = 10 ** 9 + 7\n\nL = input()\nN = len(L)\n\n# dp[i][j]= \u4e0a\u304b\u3089 i \u6841\u76ee\u307e\u3067\u3092\u6c7a\u3081\u3066\u3001\u305d\u306e\u6841\u307e\u3067\u304c (a, b) = [(0,0),(0,1),(1,0)] \u306e3\u901a\u308a\u304b\u3089\u9078\u3070\u308c\u3066\u3044\u3066\u3001\n# a+b \u304c L \u3088\u308a\u5c0f\u3055\u3044\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b(j=1)/\u3057\u3066\u3044\u306a\u3044(j=0)\u3088\u3046\u306a\u9078\u3073\u65b9\u306e\u500b\u6570\ndp = [[0] * 2 for _ in range(N + 1)]\ndp[0][0] = 1\n\nfor i, s in enumerate(L):\n  dp[i + 1][0] = dp[i][0] * 2 if int(s) else dp[i][0] \n  dp[i + 1][1] = dp[i][0] if int(s) else 0\n  dp[i + 1][1] += dp[i][1] * 3\n  dp[i + 1][0] %= MOD\n  dp[i + 1][1] %= MOD\n\nprint(sum(dp[N]) % MOD)", "mod=10**9+7\nl=input()\nbit=[int(i) for i in l]\nm=len(bit)\n#num1=sum(bit)\n#print(bit)\n#print(m)\n#print(num1)\n#ans=0\n#ans+=(pow(3,m-1,mod))\n#\u6700\u4e0a\u4f4dbit\u306e\u6642\n#ans+=(2*pow(2,num1-1,mod))\n#print(ans%mod)\n\n#\u9069\u5f53\u306b\u3084\u308a\u3059\u304e\u305f\u3051\u3069\u3001\u6841DP\u30b8\u30e3\u30f3\n#\u5c0f\u3055\u3044\u65b9\u3068\u540c\u3058\u65b9\ndp=[[0,0] for i in range(m)]\ndp[0]=[1,2]\nfor i in range(m-1):\n    dp[i+1][0]=3*dp[i][0]%mod\n    if bit[i+1]==0:\n        dp[i+1][1]+=dp[i][1]\n        dp[i+1][1]%=mod\n    else:\n        dp[i+1][0]+=dp[i][1]\n        dp[i+1][1]+=(2*dp[i][1])\n        dp[i+1][0]%=mod\n        dp[i+1][1]%=mod\nprint(sum(dp[m-1])%mod)", "from pprint import pprint\n\nMOD = 10 ** 9 + 7\nL = input()\nnl = len(L)\ndp = [[0 for _ in range(2)]\n      for _ in range(nl + 1)]\ndp[0][0] = 1\n\nfor i in range(1, nl + 1):\n    li = i - 1\n\n    # \u5c0f\u3055\u3044\u3053\u3068\u78ba\u5b9a\n    dp[i][1] = dp[i - 1][1] * 3 % MOD\n\n    ############################\n    if L[li] == '1':\n        dp[i][1] += dp[i - 1][0]  # a, b \u4e21\u65b90\n\n    # \u5f53\u8a72\u6841\u307e\u3067 =\n    if L[li] == '1':\n        dp[i][0] = dp[i - 1][0] * 2 % MOD  # a, b \u3044\u305a\u308c\u304b 1\n    else:\n        dp[i][0] = dp[i - 1][0]  # a, b \u4e21\u65b90\n\n    dp[i][0] %= MOD\n    dp[i][1] %= MOD\n\nprint((sum(dp[-1])%MOD))\n", "\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\n# ----------\n\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n\ns = input().strip()\n\ndp = [[0] * 2 for _ in range(100005)]\ndp[0][0] = 1\n\nn = len(s)\nfor i in range(n):\n    if s[i] == \"0\":\n        dp[i + 1][0] = dp[i][0]\n        dp[i + 1][1] = dp[i][1]\n    else:\n        dp[i + 1][1] = (dp[i][0] + dp[i][1]) % MOD\n\n    if s[i] == \"0\":\n        dp[i + 1][1] += dp[i][1] * 2 % MOD\n    else:\n        dp[i + 1][0] += dp[i][0] * 2 % MOD\n        dp[i + 1][1] += dp[i][1] * 2 % MOD\n\nans = (dp[n][0] + dp[n][1]) % MOD\nprint(ans)\n", "L = input()\np = 10**9+7\ndp=[[0]*2 for i in range(len(L)+1)]\ndp[0][0]=1\nfor digit, i in enumerate(L):\n  # a+b = 0\n  if L[digit] == \"0\":\n    dp[digit + 1][0] = dp[digit][0]\n    dp[digit + 1][1] = dp[digit][1]\n  else:\n    dp[digit + 1][1] = (dp[digit][0] + dp[digit][1]) % p\n  # a+b = 1\n  if L[digit] == \"0\":\n    dp[digit + 1][1] += dp[digit][1]*2 % p\n    dp[digit + 1][1] %= p\n  else:\n    dp[digit + 1][0] += dp[digit][0]*2 % p\n    dp[digit + 1][0] %= p\n    dp[digit + 1][1] += dp[digit][1]*2 % p\n    dp[digit + 1][1] %= p\nans = (dp[len(L)][0]+dp[len(L)][1]) % p\nprint(ans)", "L = input()\nl = len(L)\ndp = [[0]*2 for _ in range(100005)]\n# dp[i][smaller]: i\u6841\u76ee\u307e\u3067\u307f\u308b\u3000\u672a\u6e80\u306a\u30891\n# dp[i][1] : i\u6841\u76ee\u307e\u3067\u307f\u3066\u3001a, b\u3069\u3061\u3089\u3082L\u672a\u6e80\n# dp[i][0] : i\u6841\u76ee\u307e\u3067\u307f\u3066\u3001a+b = L\ndp[0][0] = 1\nmod = 10**9+7\n\nfor i in range(l):\n  n = L[i]\n  # a + b = 0\n  if n == \"0\":\n    dp[i+1][0] = dp[i][0]\n    dp[i+1][1] = dp[i][1]\n  else: \n    dp[i+1][1] = (dp[i][0] + dp[i][1]) % mod\n\n  # a + b = 1\n  if n == \"0\": \n    dp[i+1][1] += dp[i][1] * 2 % mod\n  else: \n    dp[i+1][0] += dp[i][0] * 2 % mod\n    dp[i+1][1] += dp[i][1] * 2 % mod\n\nprint((dp[l][0]+dp[l][1])%mod)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\n# ----------\n\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n\ns = input().strip()\n\ndp = [[0] * 2 for _ in range(100005)]\ndp[0][0] = 1\n\nn = len(s)\nfor i in range(n):\n    if s[i] == \"0\":\n        dp[i + 1][0] = dp[i][0]\n        dp[i + 1][1] = dp[i][1]\n    else:\n        dp[i + 1][1] = (dp[i][0] + dp[i][1]) % MOD\n\n    if s[i] == \"0\":\n        dp[i + 1][1] += dp[i][1] * 2 % MOD\n    else:\n        dp[i + 1][0] += dp[i][0] * 2 % MOD\n        dp[i + 1][1] += dp[i][1] * 2 % MOD\n\nans = (dp[n][0] + dp[n][1]) % MOD\nprint(ans)\n", "L = input()\n\nm = 1000000007\n\nresult = 1\nt = 1\nfor c in L[::-1]:\n    if c == '1':\n        result = result * 2 + t\n        result %= m\n    t *= 3\n    t %= m\nprint(result)\n", "def mempow(a,b,m):\n    temp = 1\n    yield temp\n    for i in range(b):\n        temp = temp * a % m\n        yield temp\n\nL = open(0).read().split()[0]\nm = 1000000007\nmem2 = []\nmem3 = []\nm2append = mem2.append\nm3append = mem3.append\nfor x in mempow(2,L.count('1'),m):\n    m2append(x)\nfor x in mempow(3,len(L)-1,m):\n    m3append(x)\nans = mem3[len(L)-1]\nappeared = 1\nfor i in range(1,len(L)):\n    if L[i] == '1':\n        ans = (ans+mem2[appeared]*mem3[len(L)-i-1]) % m\n        appeared += 1\nans = (ans+mem2[appeared]) % m\nprint(ans)", "import sys\n\nL = list(sys.stdin.readline().strip())\nmod = 10**9 + 7\nls = len(L)\n\n# \u5de6\u304b\u3089i\u6841\u76ee\u3067\u3001L\u4ee5\u4e0b\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\uff08True /False\uff09\u306e\u5834\u5408\u306e(a, b)\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u7dcf\u6570\ndp = [[0 for i in (True, False)] for _ in range(ls)]\n# 1\u304b\u3089\u3057\u304b\u59cb\u307e\u3089\u306a\u3044\ndp[0][False] = 2\ndp[0][True] = 1\n \nfor i in range(ls-1):\n    for j in (True, False):\n        if L[i+1] == \"1\":\n            dp[i+1][True] = 3 * dp[i][True] + 1 * dp[i][False]\n            dp[i+1][False] = 2 * dp[i][False]\n        else:\n            dp[i+1][True] = 3 * dp[i][True]\n            # dp[i+1][False] = 1 * dp[i][False]\n            dp[i+1][False] = 1 * dp[i][False]\n        dp[i+1][True] %= mod\n        dp[i+1][False] %= mod\n \nprint(sum(dp[ls-1]) % mod)", "MOD = 10 ** 9 + 7\n\nl = input()\np = len(l)\ndp = [[0, 0] for _ in range(p)]\ndp[0] = [1, 2]\n\nfor i, s in enumerate(l[1:], start = 1):\n    if s == \"1\":\n        dp[i][0] = dp[i - 1][0] * 3 + dp[i - 1][1]\n        dp[i][1] = dp[i - 1][1] * 2\n    else:\n        dp[i][0] = dp[i - 1][0] * 3\n        dp[i][1] = dp[i - 1][1]\n    dp[i][0] %= MOD\n    dp[i][1] %= MOD\nans = sum(dp[-1])\nprint(ans % MOD)", "import sys\nsys.setrecursionlimit(10**9)\nl=list(input())\nn=len(l)\np=10**9+7\nans=0\nd=0\ndef f(n,k,q):\n    if k==0:\n        return 1\n    elif k%2==0:\n        return ((f(n,k//2,q))**2)%q\n    else:\n        return (n*f(n,k-1,q))%q\n\nfor i in range(n):\n    if l[i]==\"1\":\n        x=n-i-1\n        ans+=(f(3,x,p)*f(2,d,p))%p\n        d+=1\n    else:\n        continue\n\nans+=f(2,d,p)\nprint((ans%p))\n", "#!/usr/bin/env python3\nimport sys\ntry:\n    from typing import List\nexcept ImportError:\n    pass\n\nMOD = 1000000007  # type: int\n\n\ndef solve(L: str):\n    a = 1\n    b = 1\n    for Li in L:\n        if Li == \"1\":\n            a *= 3\n            a %= MOD\n            b *= 2\n            b %= MOD\n        else:\n            a += (a - b) * 2\n            a %= MOD\n    print(a)\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    L = next(tokens)  # type: str\n    solve(L)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nsys.setrecursionlimit(10000000)\nimport math\nimport bisect\ndef input():\n    return sys.stdin.readline()[:-1]\n\nl = input()\nmod = 10**9+7\nfrom collections import deque\nl = deque(l)\n\ndef llo(st):\n    if len(st)==1 and st[0]==\"0\":\n        return 1\n    elif len(st)==1 and st[0]==\"1\":\n        return 3\n    tmp = st.popleft()\n    if tmp==\"0\":\n        return llo(st)\n    else:\n        return (pow(3,len(st),mod) + 2*llo(st))%mod\n\n\n\nif \"0\" not in l:\n    print((pow(3,len(l),mod)))\nelse:\n    ans = llo(l)\n    print(ans)\n", "MOD = 10**9 + 7\n\nL = input()\n\ndp1 = [0]*100010 # dp1[k]: \u5148\u982d\u304b\u3089k\u6841\u306b\u3064\u3044\u3066\uff0cA+B < L \u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b (A,B) \u306e\u6570\ndp2 = [0]*100010 # dp2[k]: \u5148\u982d\u304b\u3089k\u6841\u306b\u3064\u3044\u3066\uff0cA+B \u3068 L \u304c\u4e00\u81f4\u3057\u3066\u3044\u308b (A,B) \u306e\u6570\ndp1[1], dp2[1] = 1, 2\n\nfor i in range(1,len(L)):\n    for digit_A, digit_B in [[0,0],[0,1],[1,0]]:\n            dp1[i+1] += dp1[i]\n\n            if digit_A + digit_B == int(L[i]):\n                dp2[i+1] += dp2[i]\n            elif digit_A + digit_B < int(L[i]):\n                dp1[i+1] += dp2[i]\n            \n            dp1[i+1] %= MOD\n            dp2[i+1] %= MOD\n\nans = dp1[len(L)] + dp2[len(L)]\nprint(ans % MOD)", "def main():\n    MOD = 10 ** 9 + 7\n\n    EQ = 0  # \u7b49\u3057\u304f\u306a\u308a\u5f97\u308b\n    SMALL = 1  # \u672a\u6e80\u78ba\u5b9a\n\n    S = list(map(int, input()))\n    dp = [1, 0]\n    for x in S:\n        ndp = [0] * 2\n\n        if x == 0:\n            ndp[EQ] = dp[EQ]  # (0,0)\n            ndp[SMALL] = dp[SMALL] * 3  # (0,0),(0,1),(1,0)\n        elif x == 1:\n            ndp[EQ] = dp[EQ] * 2  # (0,1),(1,0)\n            ndp[SMALL] = dp[EQ] + dp[SMALL] * 3  # EQ->(0,0), SMALL->(0,0),(0,1),(1,0)\n\n        *dp, = [x % MOD for x in ndp]\n\n    ans = sum(dp) % MOD  # \u53d6\u308a\u5fd8\u308c\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "MOD=10**9+7\nL=input()\nK=len(L)\ndp=[[0,0] for i in range(K+1)]\ndp[0][0]=1\nfor i in range(K):\n    if(L[i]=='0'):\n        dp[i+1][0]=dp[i][0]\n        dp[i+1][1]=dp[i][1]*3%MOD\n    elif(L[i]=='1'):\n        dp[i+1][0]=dp[i][0]*2%MOD\n        dp[i+1][1]=(dp[i][1]*3%MOD+dp[i][0])%MOD\nprint(sum(dp[K])%MOD)", "def main():\n    MOD = 10 ** 9 + 7\n    L = input()\n    N = len(L)\n    dp = [0 for _ in range(N + 1)]\n    dpp = [0 for _ in range(N + 1)]\n    dpp[0] = 1\n    for n in range(1, N + 1):\n        dpp_v = dpp[n - 1]\n        d = int(L[n - 1])\n        dpp[n] = ((d + 1) * dpp_v) % MOD\n        dp[n] = (3 * dp[n - 1] + d * dpp_v) % MOD\n    print((dp[N] + dpp[N]) % MOD)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "mod = 10 ** 9 + 7\n\nL = input()\nN = len(L)\n\ndp = [[0] * 2 for _ in range(N + 10)]\ndp[0][0] = 1\n\nfor i in range(N):\n    nd = int(L[i])\n    for a in range(2):\n        for b in range(2):\n            if a == b == 1:  # \u7e70\u308a\u4e0a\u304c\u3063\u3061\u3083\u3046(a+b>L)\n                continue\n            for k in range(2):\n                ni = i + 1\n                nk = k\n                if nk == 0:\n                    if nd == 1 and a == 0 and b == 0:\n                        nk += 1\n                    if nd == 0 and a | b > 0:\n                        continue\n                dp[ni][nk] += dp[i][k]\n                dp[ni][nk] %= mod\n\nans = 0\nfor k in range(2):\n    ans += dp[N][k]\n    ans %= mod\n\nprint(ans)", "import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n \ndef main():\n    s = readline().rstrip().decode()\n    n = len(s)\n    #print(s)\n    P = int(1e9)+7\n    dp = [[0, 0] for _ in range(n)]\n    #dp[i][j]:=L\u306ei\u6841\u76ee\u307e\u3067\u898b\u3066L\u3068\u4e00\u81f4\u3059\u308b/\u672a\u6e80\u3067\u3042\u308b2\u6570\u306e\u7d44\u306e\u6570\n    dp[0][0] = 1 #\u672a\u6e80\u3068\u306a\u308b\u7d44\u306f(0, 0)\u306e1\u901a\u308a\n    dp[0][1] = 2 #\u4e00\u81f4\u3059\u308b\u7d44\u306f(0, 1)\u3068 (1, 0)\u306e2\u901a\u308a\n\n    for i in range(1, n):\n        if s[i] == '1':\n            #dp[i-1][1]\u304b\u3089\u306e\u9077\u79fb\u306f(0, 0)\u306e\u307f\u3002dp[i-1][0]\u304b\u3089\u306e\u9077\u79fb\u306f(0, 0), (0, 1), (1, 0)\n            dp[i][0] += dp[i-1][1] + dp[i-1][0] * 3 \n            #i\u6841\u76ee\u304c1\u3068\u306a\u308b\u7d44\u306f(1, 0)\u3068(0, 1)\u306e2\u901a\u308a\n            dp[i][1] += dp[i-1][1] * 2\n\n            dp[i][0] %= P\n            dp[i][1] %= P\n        else:\n            #(0, 0), (1, 0), (0, 1)\u3092\u9078\u3076\n            dp[i][0] += dp[i-1][0] * 3 \n            #(0, 0)\u3092\u9078\u3076\u3057\u304b\u306a\u3044\n            dp[i][1] += dp[i-1][1]  \n\n            dp[i][0] %= P\n            dp[i][1] %= P\n\n    print(((dp[n-1][0]+dp[n-1][1])%P))\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    L = list(input())\n    n = len(L)\n\n    dp = [[0] * 2 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        if L[i - 1] == \"0\":\n            dp[i][0] = dp[i - 1][0]\n            dp[i][1] = (dp[i - 1][1] * 3) % mod\n        else:\n            dp[i][0] = (dp[i - 1][0] * 2) % mod\n            dp[i][1] = (dp[i - 1][1] * 3 + dp[i - 1][0]) % mod\n\n    print(((dp[-1][0] + dp[-1][1]) % mod))\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "L=list(input())\nL=list(map(int,L))\ndp=[2,1]\nMOD=10**9+7\nfor j in range(1,len(L)):\n    a,b=dp\n    if L[j]==1:\n        dp[0]=(a*2)%MOD\n        dp[1]=(a+b*3)%MOD\n    elif L[j]==0:\n        dp[1]=(b*3)%MOD\nprint(sum(dp)%MOD)"]