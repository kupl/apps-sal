["n = int(input())\na = list(map(int, input().split()))\nfor i in range(n + 1):\n    for j in range(n):\n        if j % 2 == 0:\n            a[j] = (a[j] + 1) % n\n        else:\n            a[j] = (a[j] - 1) % n\n    for j in range(n):\n        if a[j] != j:\n            break\n    else:\n        print(\"Yes\")\n        return\nprint(\"No\")\n", "import sys\n\nn = int(input())\na = list(map(int,input().split()))\nfor i in range(n+1) :\n          for j in range(n) :\n                    if j%2 : a[j]-=1\n                    else : a[j]+=1\n                    a[j]%=n\n          if a==list(range(n)) :\n                    print('Yes')\n                    return\nprint('No')\n", "n = int(input())\na = list(map(int, input().split()))\nif a[0] == 0:\n   r = 0\nelse:\n   r = n - a[0]\nf = True\nfor i in range(n):\n   if i % 2 == 0:\n      a[i] += r\n   else:\n      a[i] -= r\n   a[i] = a[i] % n\n   if i > 0 and  a[i] != a[i - 1] + 1:\n       f = False\n       print('No')\n       break\nif f:\n  print('Yes')\n   \n", "\ndef check(gears):\n    for i in range(0, len(gears)):\n        if gears[i]!=i:\n            return False\n    return True    \n\n#print((0-1)%3)\nn = int(input())\ngears = [int(i) for i in input().split()]\nsaved = set()\nwhile True:\n    current = str(gears)\n    if current in saved:\n        break\n    saved.add(current)\n    for i in range(0, n):\n        if i%2 == 0:\n            gears[i] = (gears[i]+1)%n\n        else:\n            gears[i] = (gears[i]-1)%n\n    if check(gears):\n        break\n    #print(\"HI\")\nif check(gears):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\ndef ELIST(n): return [[] for i in range(n)]\ndef MI(n=None,m=None): # input matrix of integers\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = VI()\n    return arr\ndef MS(n=None,m=None): # input matrix of strings\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = input()\n    return arr\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\n    if n is None: n,m = VI()\n    a = MI(n,m)\n    arr = LIST(m,n)\n    for i,l in enumerate(a):\n        for j,x in enumerate(l):\n            arr[j][i] = x\n    return arr\n\n\ndef run(n,a):\n    for i in range(n+1):\n        if a[0]==0:\n            if sum([i==a[i] for i in range(n)])==n:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n            return\n        for j in range(n):\n            if j%2==0:\n                a[j] = (a[j]+1)%n\n            else:\n                a[j] = (a[j]-1)%n\n\n\ndef main(info=0):\n    n = I()\n    a = VI()\n\n    run(n,a)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nsys.setrecursionlimit(1000000000)\n\nn=int(input())\ns=input().split()\nt=[]\nfor i in range(n):\n\tt+=[int(s[i])]\nx=0\nif t[0]!=0:\n\tx=n-t[0]\nbb=True\nfor i in range(n):\n\tif i%2==0 and (t[i]+x)%n!=i:bb=False\n\tif i%2==1 and (t[i]-x)%n!=i:bb=False\nif bb:print(\"Yes\")\nelse:print(\"No\")\n", "#!/usr/bin/env python3\n\nN = int(input())\nA = list(map(int, input().split(' ')))\n\ndef rotate(A):\n\treturn [(a + (-1)**i) % N for i, a in enumerate(A)]\n\ndef ok(A):\n\twhile True:\n\t\tA = rotate(A)\n\t\tif A[0] == 0:\n\t\t\treturn A == list(range(N))\n\nif ok(A):\n\tprint('Yes')\nelse:\n\tprint('No')", "N = int(input())\nG = [int(x) for x in input().split()]\ntrueG = list(range(N))\nfor i in range(N):\n    for j in range(N):\n        G[j] = (G[j] + (-1 if j % 2 else 1)) % N\n    if G == trueG:\n        print('Yes')\n        break\nelse:\n    print('No')\n        \n        \n", "n = int(input())\narr = [int(x) for x in input().split()]\n\nfor _ in range(n+7):\n\n\tfor i in range(n):\n\t\tif i%2 == 0:\n\t\t\tarr[i] += 1\n\t\t\tarr[i] %= n\n\t\telse:\n\t\t\tarr[i] -= 1\n\t\t\tif arr[i] == -1:\n\t\t\t\tarr[i] = n-1\n\n\t#print(arr)\n\n\tokay = True\n\tfor i in range(n):\n\t\tif i != arr[i]:\n\t\t\tokay = False\n\t\t\tbreak\n\n\tif okay:\n\t\tprint('Yes')\n\t\treturn\n\nprint('No')", "n = int(input())\ngears = list(map(int, input().split()))\nblah = sorted([i for i in range(n)])\ngood = False\nfor push in range(n):\n    for i in range(len(gears)):\n        if i % 2 == 0:\n            gears[i] += 1\n            if gears[i] == n:\n                gears[i] = 0\n        else:\n            gears[i] -= 1\n            if gears[i] == -1:\n                gears[i] = n-1\n    if gears == blah:\n        print(\"Yes\")\n        good = True\n        break\nif not good:\n    print(\"No\")\n", "from itertools import cycle\nn = int(input())\nl = list(map(int, input().split(' ')))\n\ntimes_to_rotate = n - l[0]\n\nfor count, (i, mul) in enumerate(zip(l, cycle([1, -1]))):\n    j = (i + times_to_rotate*mul) % n\n    if j != count:\n        print('No')\n        break\nelse:\n    print('Yes')\n\n", "n = int(input())\na = [int(x) for x in input().split()]\ndiff = (n - a[0]) % n\nfor i in range(1, n):\n    if i % 2 == 0:\n        if (a[i] + diff) % n != i:\n            #print((a[i] - diff) % n, i)\n            print(\"No\")\n            return\n    else:\n        if (a[i] - diff) % n != i:\n            #print((a[i] - diff) % n, i)\n            print(\"No\")\n            return\nprint(\"Yes\")\n", "n = int(input())\n#x, y = map(int, input().split(\" \"))\narr = input().split(\" \")\nfor i in range(n):\n    arr[i] = int(arr[i])\n\nrotate = ( n - arr[0] ) % n\nfor i in range(1, n):\n    if i%2 == 0:\n        if (arr[i]+rotate) % n != i:\n            print(\"No\")\n            quit()\n    else: \n        if (arr[i]-rotate) % n != i:\n            print(\"No\")\n            quit()\n\nprint(\"Yes\")", "def main():\n    n = int(input())\n    a = [int(t) for t in input().split()]\n    shift = n - a[0]\n\n    turn = 1\n    out = 'Yes'\n    for i in range(len(a)):\n        a[i] = (a[i] + turn * shift) % n\n        turn *= -1\n        if a[i] != i:\n            out = 'No'\n            break\n\n    print(out)\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\narr = list(map(int, input().split()))\nr = n - arr[0]\np = 1\nc = -1\nfor i in range(n):\n    if p == 1:\n        t = (arr[i] + r) % n        \n    else:\n        t = (n - (r - arr[i])) % n\n    p = -p\n    if t > c:\n        c = t \n    else:\n        print('No')\n        break\nelse:\n    print('Yes')\n        \n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nN = int(input())\nG = list(map(int,input().split()))\nreal = [i for i in range(N)]\nd = [1,-1]\n\nif G == real:\n    print('Yes')\nelse:\n    for i in range(N):\n        for j in range(N):\n            G[j] = real[(G[j] + d[j%2])%N]\n        if G == real:\n            print('Yes')\n            break\n    else:\n        print('No')\n", "n = input();\nli = input();\nn = int(n)\nli = li.split()\nvalid = \"Yes\"\nfor i in range(0, n - 1):\n    if (int(li[i]) + int(li[i + 1]) - 2 * i - 1) % n:\n        valid = \"No\"\n        break\nprint(valid)\n", "n = int(input())\nl = [int(i) for i in input().split()]\nd = (n - l[0]) % n\nfor i in range(1, n):\n    r = n\n    if i & 1 == 0:\n        if i >= l[i]:\n            r = i - l[i]\n        else:\n            r = i - l[i] + n\n    else:\n        if i <= l[i]:\n            r = l[i] - i\n        else:\n            r = l[i] - i + n\n    if r != d:\n        print(\"No\")\n        d = -1\n        break\nif d >= 0:\n    print(\"Yes\")\n    \n    \n", "n = int(input())\na = list(map(int, input().split()))\nz = [i for i in range(n)]\nt = a[0] - 0\n\nfor i, v in enumerate(a):\n    v += t if i % 2 else -t\n    if v < 0:\n        v += n\n    elif v >= n:\n        v -= n\n    a[i] = v\n\nprint('Yes' if a == z else 'No')\n", "\nn = int(input())\na = list(map(int, input().split()))\n\ngood = True\n\nb = (n - a[0]) % n\n\nfor i in range(n):\n    if i % 2 == 0:\n        if (n + i - a[i]) % n != b:\n            good = False\n    else:\n        if (a[i] - i + n) % n != b:\n            good = False\n\nif good:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n", "def changeGear(x,i,n):\n\tif(i&1 == 0):\n\t\tif(x != n-1):\n\t\t\treturn x + 1\n\t\telse:\n\t\t\treturn 0\n\telse:\n\t\tif(x == 0):\n\t\t\treturn n-1\n\t\telse:\n\t\t\treturn x - 1\n\nn = int(input())\n\na = list(map(int,input().split()))\n\nb = []\nc = []\n\nfor i in range(n):\n\tb.append(i)\n\tc.append(a[i])\n\nif(a == b):\n\tprint('Yes')\n\treturn\nelse:\n\tfor i in range(n):\n\t\ta[i] = changeGear(a[i],i,n)\n#print(a)\n\nwhile(a != b and a != c):\n\tfor i in range(n):\n\t\ta[i] = changeGear(a[i],i,n)\n\t#print(a)\n\nif(a == b):\n\tprint('Yes')\nelse:\n\tprint('No')", "\ndef inp(s):\n    j = 0\n    a = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            a.append(int(s[j:i]))\n            j = i+1\n        if i == len(s)-1:\n            a.append(int(s[j:]))\n    return a\n\ndef chk(a):\n    f = 0\n    for i in range(len(a)):\n        if a[i] != i:\n            f = 1\n            break\n    return f\n\n\nn = int(input())\ns = input()\na = inp(s)\nx = a\nfor i in range(n):\n    f = 0\n    if chk(a) == 0:\n        f = 1\n        break\n    for i in range(len(a)):\n        if i%2 == 0:\n            a[i] = (a[i]-1)%n\n        else:\n            a[i] = (a[i]+1)%n\n\nif f == 1:\n    print (\"Yes\")\nelse:\n    print (\"No\")\n        \n\n\n\n\n\n\n\n\n\n\n\n", "n = int(input())\n\nz = [int(x) for x in input().split()]\nw = []\n\nfor i in range(n):\n    if i % 2 == 0:\n        if z[i] <= i:\n            w.append(i - z[i])\n        else:\n            w.append(n - z[i] + i)\n    else:\n        if i <= z[i]:\n            w.append(z[i] - i)\n        else:\n            w.append(z[i] + n - i)\n\nfor i in range(n - 1):\n    if w[i] != w[i+1]:\n        print('No')\n        return\n\nprint('Yes')\n"]