["n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\npossible = [[] for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        possible[i].append(a[i] & b[j])\n\nimport sys\nfor answer in range(2 ** 9):\n    answer_flag = 1\n    for i in range(n):\n        flag = 0\n        for x in possible[i]:\n            if answer | x == answer:\n                flag = 1\n                break\n        if flag == 0:\n            answer_flag = 0\n            break\n    if answer_flag:\n        print(answer)\n        return\n", "mem = [[-1 for j in range(201)] for i in range(1<<10)]\ndef dp(i,j,n,m,a,b):\n    if(j==n):\n        return 0\n    if(mem[i][j]!=-1):\n        return mem[i][j]\n    ans = 1<<10\n    for k in range(m):\n        ans = min(ans,(i|(a[j]&b[k]))|dp(i|(a[j]&b[k]),j+1,n,m,a,b))\n    mem[i][j] = ans\n    return ans\nn,m = map(int,input().split())\na = [*map(int,input().split())]\nans = 0\nb = [*map(int,input().split())]\nprint(dp(0,0,n,m,a,b))", "import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(arr, brr):  # fix inputs here\n    console(\"----- solving ------\")\n\n    for candidate in range(512):\n        for a in arr:\n            for b in brr:\n                if a&b | candidate == candidate:\n                    break\n            else:\n                break\n        else:\n            return candidate\n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n# fast read all\n# sys.stdin.readlines()\n\n# for case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    # k = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n_ = list(map(int,input().split()))\narr = list(map(int,input().split()))\nbrr = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(map(int,input().split())))\n\nres = solve(arr, brr)  # please change\n    \n    # Google - case number required\n    # print(\"Case #{}: {}\".format(case_num+1, res))\n\n    # Codeforces - no case number required\nprint(res)\n", "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\na = [int(item) for item in input().split()]\nb = [int(item) for item in input().split()]\n\nfor target in range(2**9):\n    mask = ~target\n    all_ok = True\n    for ai in a:\n        ok = False\n        for bi in b:\n            if not (ai & bi) & mask:\n                ok = True\n                break\n        if not ok:\n            all_ok = False\n            break\n    if all_ok:\n        print(target)\n        return", "n, m = list(map(int, input().split()))\nln = list(map(int, input().split()))\nlm = list(map(int, input().split()))\n\nfor ans in range(512):\n    poss = True\n    for i in ln:\n        curr = False\n        for j in lm:\n            if (i & j) | ans == ans:\n                curr = True\n        if curr == False:\n            poss = False\n\n    if poss == True:\n        print(ans)\n        break\n", "c = 0\nn,m = map(int,input().split())\nal = list(map(int,input().split()))\nbl = list(map(int,input().split()))\nal.sort(key = lambda a: min([a&b for b in bl]))\nal.reverse()\nfor a in al:\n    minc = pow(10,12)\n    for b in bl:\n        minc = min(minc, c | (a&b))\n    c = int(minc)\nprint(c)", "n,m = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nM = [[a[i]&b[j] for j in range(m)] for i in range(n)]\nres = 0\nM = sorted(M, key=lambda x: min(x), reverse = True)\nfor x in M:\n\tres = min([e|res for e in x])\nprint(res)", "from collections import defaultdict as dd\nimport math\nimport sys\ninput=sys.stdin.readline\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\nn,m = mi()\n\na_s = lm()\n\nb_s = lm()\n\nelim = []\n\n\n\n\nfor power in reversed(list(range(0,10))):\n\tbad = False\n\tfor a in a_s:\n\t\tfound = False\n\t\tfor b in b_s:\n\t\t\tb_bad = False\n\t\t\tfor pre_pow in elim:\n\t\t\t\tif a & (1<<pre_pow) and b & (1<<pre_pow):\n\t\t\t\t\tb_bad = True\n\t\t\tif a & (1<<power) and b & (1<<power):\n\t\t\t\t#print(a, 1<<power)\n\t\t\t\t#print(b, 1<<power)\n\t\t\t\tb_bad = True\n\t\t\tif b_bad == False:\n\t\t\t\tfound = True\n\t\tif not found:\n\t\t\tbad = True\n\t\t\tbreak\n\t#print(bad)\n\tif not bad:\n\t\telim.append(power)\nans = 0\nfor i in range(0,10):\n\tif i not in elim:\n\t\tans+=2**i\n\n\nprint(ans)\n", "n,m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc=0\nfor i in range(0,513):\n    c=1\n    for j in a:\n        u = 0\n        for k in b:\n            if(i|(j&k)==i):\n                u = 1\n                break\n        if(u==0):\n            c=0\n            break\n    if(c==1):\n        print(i)\n        break", "a,b=map(int,input().split())\nr1=list(map(int,input().split()))\nr2=list(map(int,input().split()))\nfor target in range(2**9):\n\tans=0\n\tg = True\n\tfor i in range(a):\n\t\tf = False\n\t\tfor j in range(b):\n\t\t\tt = r1[i] & r2[j]\n\t\t\tif t & target == t:\n\t\t\t\tf = True\n\t\t\t\tbreak\n\t\tif not f:\n\t\t\tg = False\n\t\t\tbreak\n\tif g:\n\t\tprint(target)\n\t\treturn"]