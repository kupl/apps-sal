["#import sys\n\n#fin = open(\"input.txt\", 'r')\n#fout = open(\"output.txt\", 'w')\n\n#fin = open(\"input.txt\", 'r')\n#fout = open(\"output.txt\", 'w')\n\nn = int(input())\na = list(map(int, input().split()))\n\nif 1 not in a:\n    print(1)\nelse:\n    print(-1)\n", "n = int(input())\nc = list(map(int, input().split()))\nif 1 in c:\n    print(-1)\nelse:\n    print(1)\n", "n = int(input())\ns = [int(i) for i in input().split()]\nif min(s) > 1:\n    print(1)\nelse:\n    print(-1)\n", "input()\nprint(-1 if min(list(map(int, str.split(input())))) == 1 else 1)\n", "N = int(input())\nN = list(map(int, input().split()))\nif 1 in N:\n    print(-1)\nelse:\n    print(1)", "#\u041a\u041e\u0414\u0424\u041e\u0420\u0421\u042b, \u0423\u0420\u0410\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nif (a[0] == 1):\n    a[0] = 0\nelse:\n    a[0] = 2\nprint(a[0] - 1)    ", "n=input().split()\na=[int(x) for x in input().split()]\nans=a.count(1)\nif(ans==0):print(1)\nelse:print(-1)\n", "a = int(input())\nn = set(list(map(int, input().split())))\nif 1 in n:\n    print(-1)\nelse:\n    print(1)\n", "n = int(input())\na = map(int, input().split())\nif 1 in a:\n    print(-1)\nelse:\n    print(1)", "n = int(input())\na = [int(x) for x in input().split()]\nif 1 in a:\n    print(-1)\nelse:\n    print(1)", "n = int(input())\na = [int(x) for x in input().split()]\n\nif 1 not in a:\n\tprint(1)\nelse:\n\tprint(-1)", "__author__ = 'tka4a'\n\nn = int(input())\n\nkupurs = list(map(int, input().split()))\n\nkupurs.sort()\n\nif (kupurs[0] == 1):\n    print(-1)\nelse:\n    print(1)\n\n\n", "import sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nif 1 not in a:\n    print(1)\nelse:\n    print(-1)\n\n\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\nn   = int(input())\nA   = [int(i) for i in input().split()]\n\nstart = time.time()\n\nif 1 in A:\n    ans = -1\nelse:\n    ans = 1\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "def __starting_point():\n    n = int(input())\n    data = list(map(int, input().split()))\n\n    if 1 in data:\n        print('-1')\n    else:\n        print(1)\n__starting_point()", "d = input()\nd = int(d)\nst1 = input()\nnotes = [ int(i) for i in st1.split(\" \") ]\n\n\ndef unfortunate_sum(notes):\n    if 1 in notes:\n        print(-1)\n        return\n    else:\n        print(1)\n        return\n\nunfortunate_sum(notes)\n", "def __starting_point():\n\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n\n    if a[0] == 1:\n        print(-1)\n    else:\n        print(1)\n        \n\n__starting_point()", "r = lambda: input()\nri = lambda: int(r())\nrr = lambda: map(int, r().split())\nrl = lambda: list(rr())\n\nn = ri()\na = rl()\n\nif 1 in a:\n    print(-1)\nelse:\n    print(1)", "n = int(input())\na = input().split()\nfor i in range(n):\n    a[i] = int(a[i])\nif min(a)!=1:\n    print(1)\nelse:\n    print(-1)", "n = int(input())\narr = list(map(int, input().split()))\narr.sort()\nif (arr[0] == 1):\n    print(-1)\nelse:\n    print(1)", "count = input()\nnominals_str = input().strip().split(\" \")\nnominals = [int(i) for i in nominals_str]\n\nminimal = min(nominals)\nif minimal == 1:\n  print(-1)\nelse:\n  print(1)", "N = int(input())\nmoney = [int(i) for i in input().split()]\n\nprint([1, -1][1 in money])\n", "n = int(input())\nif 1 in [int(x) for x in input().split()]:\n\tprint(-1)\nelse:\n\tprint(1)\n", "#!/usr/bin/env python\n# 560A_currency.py - Codeforces.com 560A Currency program\n#\n# Copyright (C) 2015 Sergey\n\n\"\"\"\nInput\n\nThe first line contains number n the number of values of\nthe banknotes that used in Geraldion.\n\nThe second line contains n distinct space-separated numbers\na1,..an  the values of the banknotes.\nOutput\n\nPrint a single line the minimum unfortunate sum. If there\nare no unfortunate sums, print -1.\n\n\"\"\"\n\n# Standard modules\nimport unittest\nimport sys\n\n# Additional modules\n\n\n###############################################################################\n# Currency Class\n###############################################################################\n\n\nclass Currency:\n    \"\"\" Currency representation \"\"\"\n\n    def __init__(self, args):\n        \"\"\" Default constructor \"\"\"\n\n        self.imax, self.nums = args\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = 1\n        for n in self.nums:\n            if n == 1:\n                result = -1\n                break\n\n        return str(result)\n\n\n###############################################################################\n# Helping classes\n###############################################################################\n\n\n###############################################################################\n# Currency Class testing wrapper code\n###############################################################################\n\n\ndef get_inputs(test_inputs=None):\n\n    it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n    def uinput():\n        \"\"\" Unit-testable input function wrapper \"\"\"\n        if it:\n            return next(it)\n        else:\n            return sys.stdin.readline()\n\n    # Getting string inputs. Place all uinput() calls here\n    imax = int(uinput())\n    nums = list(map(int, uinput().split()))\n\n    # Decoding inputs into a list\n    return [imax, nums]\n\n\ndef calculate(test_inputs=None):\n    \"\"\" Base class calculate method wrapper \"\"\"\n    return Currency(get_inputs(test_inputs)).calculate()\n\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_Currency_class__basic_functions(self):\n        \"\"\" Currency class basic functions testing \"\"\"\n\n        # Constructor test\n        d = Currency([5, [1, 2, 3, 4, 5]])\n        self.assertEqual(d.imax, 5)\n\n    def test_sample_tests(self):\n        \"\"\" Quiz sample tests. Add \\n to separate lines \"\"\"\n\n        # Sample test 1\n        test = \"5\\n1 2 3 4 5\"\n        self.assertEqual(calculate(test), \"-1\")\n        self.assertEqual(get_inputs(test)[0], 5)\n        self.assertEqual(list(get_inputs(test)[1]), [1, 2, 3, 4, 5])\n\n        # Sample test 2\n        test = \"3\\n5 6 2\"\n        self.assertEqual(calculate(test), \"1\")\n\n        # Sample test 3\n        test = \"1\\n12\"\n        # self.assertEqual(calculate(test), \"0\")\n\n        # My test 4\n        test = \"1\\n12\"\n        # self.assertEqual(calculate(test), \"0\")\n\n    def test_time_limit_test(self):\n        \"\"\" Quiz time limit test \"\"\"\n\n        import random\n\n        # Time limit test\n        imax = 1000\n        num = str(imax)\n        test = num + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(imax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(imax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        import timeit\n\n        start = timeit.default_timer()\n        args = get_inputs(test)\n\n        init = timeit.default_timer()\n        d = Currency(args)\n\n        calc = timeit.default_timer()\n        d.calculate()\n\n        stop = timeit.default_timer()\n        print((\n            \"\\nTime Test: \" +\n            \"{0:.3f}s (inp {1:.3f}s init {2:.3f}s calc {3:.3f}s)\".\n            format(stop-start, init-start, calc-init, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(calculate())\n\n__starting_point()", "input()\nl = list(map(int, input().split()))\nif 1 in l:\n    print(-1)\nelse:\n    print( 1)\n"]