["import sys\nclass Person:\n    def __init__(self, dollars, index):\n        self.dollars = dollars\n        self.index = index\n\ndef solve():\n    n = int(input())\n    given = list(map(int, input().split()))\n    people = list()\n    for i in range(n):\n        people.append(Person(given[i], i))\n    people.sort(key = lambda p: p.dollars + p.index)\n    res = [0] * n\n    for i in range(n):\n        res[i] = people[i].dollars + people[i].index - i\n    for i in range(n - 1):\n        if res[i] > res[i+1]:\n            return \":(\"\n    return ' '.join(map(str, res))\n\n    \ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    print(solve())\n\nrun()", "import sys\nclass Person:\n    def __init__(self, dollars, index):\n        self.dollars = dollars\n        self.index = index\n\ndef solve():\n    n = int(input())\n    given = list(map(int, input().split()))\n    people = list()\n    for i in range(n):\n        people.append(Person(given[i], i))\n    people.sort(key = lambda p: p.dollars + p.index)\n    res = [0] * n\n    for i in range(n):\n        res[i] = people[i].dollars + people[i].index - i\n    for i in range(n - 1):\n        if res[i] > res[i+1]:\n            return \":(\"\n    return ' '.join(map(str, res))\n\n    \ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    print(solve())\n\nrun()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\ndef VI(): return list(map(int,input().split()))\n\ndef run(n,a):\n    b = copy.copy(a)\n    for i in range(n):\n        b[i] -= (n-i)\n    b.sort()\n    for i in range(n):\n        if i<n-1:\n            if b[i]==b[i+1]:\n                print(\":(\")\n                return\n        b[i] = str(b[i]+(n-i))\n    print(\" \".join(b))\n\n\ndef main(info=0):\n    n = int(input())\n    a = VI()\n    run(n,a)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nnums = list(map(int, input().split()))\n\nfor i in range(len(nums)):\n    nums[i] += i\n\nnums.sort()\nfor i in range(len(nums)):\n    nums[i] -= i\n    if i and nums[i] < nums[i-1]:\n        print(\":(\")\n        return\n\nprint(' '.join(list(map(str, nums))))\n", "def main():\n    n = int(input())\n    a = [int(x) for x in input().split(\" \")]\n    for i in range(len(a)):\n        a[i] += i\n    a.sort()\n    for i in range(1, len(a)):\n        a[i] -= i\n        if a[i] < a[i - 1]:\n            print(\":(\")\n            return\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    print(' '.join(a))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "R = lambda: list(map(int, input().split()))\n\nn = R()[0]\n\na = R()\n\nfor i in range(n):\n    a[i] += i\na = sorted(list(set(a)))\nif len(a) != n:\n    print(':(')\nelse:\n    for i in range(n):\n        print(a[i] - i, end=' ')\n", "def main():\n    n = int(input())\n    a = [int(x) for x in input().split(\" \")]\n    for i in range(len(a)):\n        a[i] += i\n    a.sort()\n    for i in range(1, len(a)):\n        a[i] -= i\n        if a[i] < a[i - 1]:\n            print(\":(\")\n            return\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    print(' '.join(a))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n = int(input())\n    a = [int(x) for x in input().split(\" \")]\n    for i in range(len(a)):\n        a[i] += i\n    a.sort()\n    for i in range(1, len(a)):\n        a[i] -= i\n        if a[i] < a[i-1]:\n            print(\":(\")\n            return\n    for i in range(len(a)):\n        a[i] = str(a[i])\n    print(' '.join(a))\n\ndef __starting_point():\n    main()\n__starting_point()", "input()\nt = sorted(q + i for i, q in enumerate(map(int, input().split())))\np = [q - i for i, q in enumerate(t)]\nprint(':(' if sorted(p) != p else ' '.join(map(str, p)))", "input()\nt = sorted(q + i for i, q in enumerate(map(int, input().split())))\np = [q - i for i, q in enumerate(t)]\nprint(':(' if sorted(p) != p else ' '.join(map(str, p)))\n", "input()\nt = sorted(q + i for i, q in enumerate(map(int, input().split())))\np = [q - i for i, q in enumerate(t)]\nprint(':(' if sorted(p) != p else ' '.join(map(str, p)))\n", "input()\nt = sorted(q + i for i, q in enumerate(map(int, input().split())))\np = [q - i for i, q in enumerate(t)]\nprint(':(' if sorted(p) != p else ' '.join(map(str, p)))\n", "input()\nt = sorted(q + i for i, q in enumerate(map(int, input().split())))\np = [q - i for i, q in enumerate(t)]\nprint(':(' if sorted(p) != p else ' '.join(map(str, p)))\n", "input()\nt = sorted(q + i for i, q in enumerate(map(int, input().split())))\np = [q - i for i, q in enumerate(t)]\nprint(':(' if sorted(p) != p else ' '.join(map(str, p)))\n", "input()\nt = sorted(q + i for i, q in enumerate(map(int, input().split())))\np = [q - i for i, q in enumerate(t)]\nprint(':(' if sorted(p) != p else ' '.join(map(str, p)))\n", "input()\nt = sorted(q + i for i, q in enumerate(map(int, input().split())))\np = [q - i for i, q in enumerate(t)]\nprint(':(' if sorted(p) != p else ' '.join(map(str, p)))\n", "n = int(input())\nline = [int(i) for i in input().split()]\n\nfor i in range(len(line)):\n    line[i]+=i\nline.sort()\nfor i in range(len(line)):\n    line[i]-=i\n\nimpossivel = False\nfor i in range(len(line)-1):\n    if(line[i]>line[i+1]):\n        impossivel = True\n        break\nif(impossivel):\n    print(\":(\")\nelse:\n    print(\" \".join([str(i) for i in line]))\n", "n = int(input())\nline = [int(i) for i in input().split()]\n\nfor i in range(len(line)):\n    line[i]+=i\nline.sort()\nfor i in range(len(line)):\n    line[i]-=i\n\nimpossivel = False\nfor i in range(len(line)-1):\n    if(line[i]>line[i+1]):\n        impossivel = True\n        break\nif(impossivel):\n    print(\":(\")\nelse:\n    print(\" \".join([str(i) for i in line]))\n", "n = int(input())\na = list(map(int,input().split()))\n\nfor i in range(n):\n    a[i] += i\na = sorted(list(set(a)))\nif n > len(a):\n    print(':(')\nelse:\n    for i in range(len(a)):\n        a[i] -= i\n    print (\" \".join(map(str, a)))", "n=int(input().strip())\na=list(map(int,input().strip().split()))\nfor i in range(n):\n    a[i]=a[i]-(n-i)\na.sort()\nfor i in range(n):\n    a[i]=a[i]+(n-i)\nans=True\nfor i in range(n-1):\n    if (a[i]>a[i+1]):\n        ans=False\n        break\nif (ans):\n    for i in range(n):\n        tmp=(' ' if (i!=n-1) else '\\n')\n        print(a[i],end=tmp)\nelse:\n    print(\":(\")", "#E - Happy Line\nimport sys\nnLine = int(input())\nnMoney = list(map(int, input().split()))\ninvariante = []\nfor i in range(len(nMoney)):\n    invariante.append(nMoney[i] + i)\ninvariante.sort()\n\nres = [0] * nLine\nfor i in range(nLine):\n        res[i] = invariante[i] - i\nfor i in range(nLine - 1):\n    if res[i] > res[i+1]:\n        print(':(')\n        return\nprint(*res)", "#E - Happy Line\nimport sys\nnLine = int(input())\nnMoney = list(map(int, input().split()))\ninvariante = []\nfor i in range(len(nMoney)):\n    invariante.append(nMoney[i] + i)\ninvariante.sort()\n\nres = [0] * nLine\nfor i in range(nLine):\n        res[i] = invariante[i] - i\nfor i in range(nLine - 1):\n    if res[i] > res[i+1]:\n        print(':(')\n        return\nprint(*res)\n", "n=int(input())\nfila=list(map(int, input().split()))\nbreak_ = False\n\nfor i in range(n):\n  fila[i] += i \n\nfila = sorted(list(set(fila)))\n\nif len(fila) < n:\n  print(\":(\")\n\nelse:\n  for j in range(n):\n    fila[j] -= j\n\n  print(\" \".join(map(str, fila)))\n\n", "n = int(input())\nline = list(map(int, input().split()))\n\nfor i in range(n):\n    line[i] += i\n\nline.sort()\n\nis_happy = True\nfor i in range(1, n):\n    if line[i] == line[i - 1]:\n        is_happy = False\n        break\n\nif is_happy:\n    print(' '.join([str(line[i] - i) for i in range(n)]))\nelse:\n    print(':(')\n", "import math\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(_) for _ in input().split()]\nfor i in range(n):\n    a[i] += i\na.sort()\nfor i in range(n):\n    a[i] -= i\nfor i in range(n):\n    if a[i] < 0 or (i > 0 and a[i - 1] > a[i]):\n        print(':(')\n        return\nprint(' '.join(map(str, a)))\n"]