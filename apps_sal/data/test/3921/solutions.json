["n = 100001\np = [0] * n\nt = [[] for i in range(n)]\nt[1] = [1]\nfor i in range(2, n):\n    if not t[i]:\n        t[i] = [i]\n        for j in range(2 * i, n, i): t[j].append(i)\ninput()\na = list(map(int, input().split()))\nfor i in a:\n    x = max(p[j] for j in t[i]) + 1\n    for j in t[i]: p[j] = x\nprint(max(p))", "n = 100001\np = [0] * n\nt = [[] for i in range(n)]\nt[1] = [1]\nfor i in range(2, n):\n    if not t[i]:\n        t[i] = [i]\n        for j in range(2 * i, n, i): t[j].append(i)\ninput()\na = list(map(int, input().split()))\nfor i in a:\n    x = max(p[j] for j in t[i]) + 1\n    for j in t[i]: p[j] = x\nprint(max(p))", "ovmaxx = 0\n\nt = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397]\n\nx = int(input())\ny = list(map(int, input().split(' ')))\n\ngood = [False]*(10**5+5)\nfor i in y:\n    good[i] = True\n\n\ndp2 = [0]*(10**5+5)\n\nfor i in range(10**5+5):\n    if not good[i]:\n        continue\n    pdiv = []\n    \n    for a in t:\n        k = 0\n        while i%a == 0:\n            if k == 0:\n                pdiv.append(a)\n            i //= a\n            k = 1\n    maxx = 0\n    if i != 1:\n        pdiv.append(i)\n    for i2 in pdiv:\n        maxx = max(dp2[i2]+1, maxx)\n\n    for i2 in pdiv:\n        dp2[i2] = max(dp2[i2]+1, maxx)\n\n    ovmaxx = max(ovmaxx, maxx)\n    \nprint(max(ovmaxx, 1))\n", "def main():\n    input()\n    d = {}\n    for a in map(int, input().split()):\n        z, l = 0, []\n        for p in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\n                  103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\n                  211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313):\n            if not a % p:\n                l.append(p)\n                x = d.get(p, 0)\n                if z < x:\n                    z = x\n                a //= p\n                while not a % p:\n                    a //= p\n                if a == 1:\n                    break\n        else:\n            l.append(a)\n            x = d.get(a, 0)\n            if z < x:\n                z = x\n        d.update(dict.fromkeys(l, z + 1))\n    print(max(d.values()))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    input()\n    d = {}\n    for a in map(int, input().split()):\n        z, l = 0, []\n        for p in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\n                  103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\n                  211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313):\n            if not a % p:\n                l.append(p)\n                x = d.get(p, 0)\n                if z < x:\n                    z = x\n                a //= p\n                while not a % p:\n                    a //= p\n                if a == 1:\n                    break\n        else:\n            l.append(a)\n            x = d.get(a, 0)\n            if z < x:\n                z = x\n        z += 1\n        for p in l:\n            d[p] = z\n    print(max(d.values()))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    input()\n    zz = [0] * 99992\n    for a in map(int, input().split()):\n        z, l = 0, []\n        for p in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\n                  103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\n                  211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313):\n            if not a % p:\n                l.append(p)\n                if z < zz[p]:\n                    z = zz[p]\n                a //= p\n                while not a % p:\n                    a //= p\n                if a == 1:\n                    break\n        else:\n            l.append(a)\n            if z < zz[a]:\n                z = zz[a]\n        z += 1\n        for p in l:\n            zz[p] = z\n    print(max(zz))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = 100001\np = [0] * n\nt = [[] for i in range(n)]\nt[1] = [1]\nfor i in range(2, n):\n    if not t[i]:\n        t[i] = [i]\n        for j in range(2 * i, n, i): t[j].append(i)\ninput()\na = list(map(int, input().split()))\nfor i in a:\n    x = max(p[j] for j in t[i]) + 1\n    for j in t[i]: p[j] = x\nprint(max(p))", "n = 100001\n\np = [0] * n\n\nt = [[] for i in range(n)]\n\nt[1] = [1]\n\nfor i in range(2, n):\n\n    if not t[i]:\n\n        t[i] = [i]\n\n        for j in range(2 * i, n, i): t[j].append(i)\n\ninput()\n\na = list(map(int, input().split()))\n\nfor i in a:\n\n    x = max(p[j] for j in t[i]) + 1\n\n    for j in t[i]: p[j] = x\n\nprint(max(p))\n\n\n\n# Made By Mostafa_Khaled\n", "R = lambda: map(int, input().split())\nprime, cnt = [1] * 10001, [0] * 10001\npms = []\nfor i in range(2, 10001):\n    if prime[i]:\n        for j in range(i + i, 10001, i):\n            prime[j] = 0\n        pms.append(i)\nn = int(input())\nfor x in R():\n    mx = 0\n    coms = []\n    for p in pms:\n        if x < p:\n            break\n        if x % p == 0:\n            mx = max(mx, cnt[p] + 1)\n            coms.append(p)\n    for x in coms:\n        cnt[x] = mx\nprint(max(cnt + [1]))", "# import math\n# N=10010\n# def solve(ar):\n# \tdp=[0 for i in range(N+20)]\n# \tfor i in ar:\n# \t\tx=math.sqrt(i)\n# \t\tfor j in range(2,x+1):\n# \t\t\tif(i%j==0):\n# \t\t\t\tdp[i]=max(dp[i],max(dp[j]+1,dp[i//j]+1))\n#         for j in range(2,x+1):\n#         \tif(i%j==0):\n#         \t\tdp[j]=dp[i//j]=dp[i]\n#     m=1\n#     for i in range(1,10010):\n#     \tm=max(m,dp[i])\n#     return m\nimport math\nN=100100\ndef solve(ar):\n\tn=len(ar)\n\tdp=[0 for i in range(N+20)]\n\tfor a in ar:\n\t\tx=math.sqrt(a)\n\t\tdp[a]=1\n\t\tfor j in range(2,a):\n\t\t\tif(j*j<=a):\n\t\t\t\tif(a%j == 0):\n\t\t\t\t    dp[a]=max(dp[a],max(dp[a//j]+1,dp[j]+1))\n\t\t\telse:\n\t\t\t\tbreak\n\t\tfor j in range(2,a):\n\t\t\tif(j*j<=a):\n\t\t\t\tif(a%j == 0):\n\t\t\t\t   dp[j]=dp[a//j]=dp[a]\n\t\t\telse:\n\t\t\t\tbreak\n\t\t\t\n\tm=1\n\tfor x in range(1,100100):\n\t\tm=max(m,dp[x])\n\treturn m\n\nn=int(input())\nar=list(map(int,input().split()))\nx=solve(ar)\nprint(x)", "n = 100001\np = [0] * n\nt = [[] for i in range(n)]\nt[1] = [1]\nfor i in range(2, n):\n    if not t[i]:\n        t[i] = [i]\n        for j in range(2 * i, n, i):\n            t[j].append(i)\ninput()\na = list(map(int, input().split()))\nfor i in a:\n    x = max(p[j] for j in t[i]) + 1\n    for j in t[i]:\n        p[j] = x\nprint(max(p))\n", "p=10**5+9 \nt=[[] for i in range(p)]\ndp=[0]*p\nfor i in range(2,p):\n    if not t[i]:\n        t[i].append(i)\n    for j in range(2*i,p,i):\n        t[j].append(i)              #store the divisors \nn=int(input())\nl=[int(i) for i in input().split()]\nif n==1:\n    print(1)\n    return \nfor i in l:\n    #explore divisors what is dp of them \n    maxi=0 \n    for j in t[i]:\n        maxi=max(maxi,dp[j])\n    dp[i]=maxi+1 \n    for j in t[i]:\n        dp[j]=maxi+1 \n#print(dp[0:10])\nprint(max(dp))", "n = 111111\np = [0] * n\nt = {}\nt[1] = [1]\nfor i in range(2, n):\n    if t.get(i,0) == 0:\n        t[i] = [i]\n        for j in range(2 * i, n, i):\n        \tif j not in t:\n        \t\tt[j] = []\n        \tt[j].append(i)\ninput()\na = list(map(int, input().split()))\nfor i in a:\n    x = max(p[j] for j in t[i]) + 1\n    for j in t[i]: \n    \tp[j] = x\nprint(max(p))", "n = 111111\np = [0] * n\nt = {}\nt[1] = [1]\nfor i in range(2, n):\n    if t.get(i,0) == 0:\n        t[i] = [i]\n        for j in range(2 * i, n, i):\n        \tif j not in t:\n        \t\tt[j] = []\n        \tt[j].append(i)\ninput()\na = list(map(int, input().split()))\nfor i in a:\n    x = max(p[j] for j in t[i]) + 1\n    for j in t[i]: \n    \tp[j] = x\nprint(max(p))", "n = 100001\np = [0] * n\nt = [[] for i in range(n)]\nt[1] = [1]\nfor i in range(2, n):\n    if not t[i]:\n        t[i] = [i]\n        for j in range(2 * i, n, i): t[j].append(i)\ninput()\na = list(map(int, input().split()))\nfor i in a:\n    x = max(p[j] for j in t[i]) + 1\n    for j in t[i]: p[j] = x\nprint(max(p))", "\"\"\"\nVamos resolver esse problema com programa\u00e7\u00e3o din\u00e2mica. Seja D(x) o conjunto dos divisores de x e dp(d, i) o tamanho\nda maior subsequ\u00eancia boa considerando apenas os i primeiros n\u00fameros onde o \u00faltimo n\u00famero escolhido tem d como divisor.\nConseguindo calcular essas duas fun\u00e7\u00f5es, nossa solu\u00e7\u00e3o \u00e9 max(dp(d, n) \u2200d).\nD(x) pode ser calculado com um crivo, e toma tempo O(nlogn).\ndp(d, i) pode ser calculada com a seguinte recorr\u00eancia.\ndp(d, i) = dp(d, i \u2212 1) se d n\u00e3o divide v[i]\ndp(d, i) = 1 + max(dp(g, i \u2212 1) \u2200g \u2208 D(v[i])) se d divide v[i]\nCriar esses dois estados usa O(n**2) mem\u00f3ria, que podemos reduzir para O(n) observando que nunca precisamos dos\nresultados do prefixo i \u2212 2 calculando o prefixo i.\nNote que s\u00f3 precisamos calcular os estados dp(d, i) se d divide v[i]. O que nos da uma solu\u00e7\u00e3o O(n\u221an).\n\"\"\"\nfrom math import floor, sqrt\n\n\ndef div(x):\n    # Crivo de Erast\u00f3tenes\n    primos = [1 for i in range(x+1)]\n    p = 2\n    while p < x+1:\n        if primos[p] == 1:\n            for i in range(p*p,x+1,p):\n                if primos[i] == 1:\n                    primos[i] = p\n            primos[p] = p\n        p += 1\n    return primos             \n\ndef fat(mindiv,x):\n    fat = []\n    while x!= 1:\n        fat.append(mindiv[x])\n        x //= mindiv[x]\n    return set(fat)\n\ndef main():\n    n = int(input())\n\n    if n == 1:\n        print(1)\n        return\n\n    arr = input().split()\n    arr = [int(x) for x in arr]\n     \n    mindiv = div(arr[-1])\n    seq = [0 for i in range(arr[-1]+1)]  \n \n    for num in arr:\n        fatores = fat(mindiv,num)\n        tam = 0\n        for f in fatores:\n            tam = max(tam,seq[f])\n        for f in fatores:\n            seq[f] = tam + 1    \n    \n    print(max(seq))\n    return\n\nmain()\n", "import math\n\nprimes = []\n\ndef SieveOfEratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and initialize \n    # all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    # Print all prime numbers \n    for p in range(n + 1): \n        if prime[p]: \n            primes.append(p)\n\nSieveOfEratosthenes(6000)\ndp = [0 for i in range(max(primes)+1)]\n\nn = int(input())\narr = list(map(int, input().strip().split()))\ntry:\n    for i in arr:\n        p = []\n        for j in primes:\n            if j > i:\n                break\n            if i%j == 0:\n                p.append(j)\n        \n        maxi = 0\n        for j in p:\n            maxi = max(dp[j]+1, maxi)\n        for j in p:\n            dp[j] = maxi\n\n    print(max(max(dp), 1))\nexcept Exception as e:\n    print(e)\n\n\n\n", "n = int(input())\na = list(map(int, input().split()))\ndp = [1] * (n + 5)\ntmax = [0 for _ in range(100005)]\np = [[] for _ in range(100005)]\np[1] = [1]\nfor i in range(2, 100001):\n    if (not p[i]):\n        for j in range(i, 100001, i):\n            p[j].append(i)\nfor i in range(len(a)):\n    dp[i] = max(tmax[j] for j in p[a[i]]) + 1\n    for j in p[a[i]]: tmax[j] = max(tmax[j], dp[i])\nprint(max(dp))\n", "n = int(input())\na = list(map(int, input().split()))\ndp = [1] * (n + 5)\ntmax = [0 for _ in range(100005)]\np = [[] for _ in range(100005)]\np[1] = [1]\nfor i in range(2, 100001):\n    if p[i]==[]:\n        for j in range(i, 100001, i):\n            p[j].append(i)\n\nfor i in range(len(a)):\n    dp[i] = max(tmax[j] for j in p[a[i]]) + 1\n    for j in p[a[i]]: tmax[j] = max(tmax[j], dp[i])\nprint(max(dp))", "n = 100001\np, t = [0]*n, [[] for i in range(n)]\nt[1] = [1]\nfor i in range(2, n):\n    t[i].append(i)\n    for j in range(2*i, n, i):\n        t[j].append(i)\n\nn = input()\nfor i in map(int, input().split(\" \")):\n    x = max(p[j] for j in t[i]) + 1\n    for j in t[i]:\n        p[j] = x\nprint(max(p))\n", "n=int(input())\nx=list(map(int,input().split()))\nv=[[] for i in range(100001)]\nmax,ans=[0]*100001,0\nfor i2 in range(1,x[n-1]+1):\n    for i in range(i2,x[n-1]+1,i2):\n        v[i].append(i2)\nfor i in range(n):\n    temp=0\n    for i2 in range(1,len(v[x[i]])):\n        if temp<max[v[x[i]][i2]]:\n            temp=max[v[x[i]][i2]]\n    temp+=1\n    for i2 in range(1,len(v[x[i]])):\n        if temp>max[v[x[i]][i2]]:\n            max[v[x[i]][i2]]=temp\n    if ans<temp:\n        ans=temp\nprint(ans)", "n = int(input())\ninf = 200001\n\np = [0] * inf\na = [[] for _ in range(inf)]\n\na[1] = [1]\n\nfor i in range(2, inf):\n\ta[i].append(i)\n\tfor j in range(i * 2, inf, i):\n\t\ta[j].append(i)\nfor i in map(int, input().split()):\n\tmx = max(p[j] for j in a[i]) + 1\n\tfor j in a[i]:\n\t\tp[j] = mx\nprint(max(p))\n", "n = 100001\nm = int(input())\ndiv = [[] for _ in range(n)]\ndiv[1] = [1]\nfor i in range(2, n):\n    if not div[i]:\n        div[i] = [i]\n        for j in range(2 * i, n, i):\n            div[j].append(i)\na = list(map(int, input().rstrip().split()))\ndp = [0] * (n + 1)\nfor i in a:\n    x = max(dp[j] for j in div[i]) + 1\n    for j in div[i]:\n        dp[j] = x\nprint(max(dp))", "import math\na=int(input())\nz=list(map(int,input().split()))\ndp=[0 for i in range(max(z)+1)]\ndp[0]=1\ndef fact(x):\n    ans=[]\n    for i in range(2,int(math.sqrt(x))+1):\n        if(x%i==0):\n            if(x//i!=i):\n                ans.append(i)\n                ans.append(x//i)\n            else:\n                ans.append(i)\n    ans.append(x)\n    return ans;\nfor i in range(len(z)):\n    t=fact(z[i])\n    maxa=0\n    \n    for i in range(len(t)):\n        maxa=max(maxa,dp[t[i]])\n    for i in range(len(t)):\n        dp[t[i]]=maxa+1\n    \nprint(max(dp))\n        \n    \n", "lis=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973]\n\nn = int(input())\nli = list(map(int,input().split()))\nhas=[0]*(100005)\nfor i in li:\n    mx=0\n    tmp=[]\n    for j in lis:\n        if i<j:\n            break\n        if i%j==0:\n            mx = max(mx,has[j]+1)\n            tmp.append(j)\n    for j in tmp:\n        has[j]=mx        \nprint(max(has+[1]))            \n\n"]