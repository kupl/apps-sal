["n, k = list(map(int, input().split()))\na = input().split()\nnames = [chr(ord(\"A\") + i) for i in range(26)] + [chr(ord(\"A\") + i) + chr(ord('a') + i) for i in range(26)]\nans = [names[i] for i in range(n)]\nfor i in range(k - 1, n):\n\tif a[i - k + 1] == \"NO\":\n\t\tans[i] = ans[i - k + 1]\nprint(*ans)\n", "n, k = map(int, input().split())\nnames = []\nfor i in range(ord('a'), ord('z') + 1):\n    names.append('A' + chr(i))\nfor i in range(ord('a'), ord('z') + 1):\n    names.append('B' + chr(i))\npos = 0\na = input().split()\nans = []\nfor i in range(k - 1):\n    ans.append(names[pos])\n    pos += 1\nfor i in range(n - k + 1):\n    if a[i] == \"YES\":\n        ans.append(names[pos])\n        pos += 1\n    else:\n        ans.append(ans[i])\nprint(' '.join(ans))", "n, k = list(map(int, input().split()))\ns = list(input().split())\n\ndef generate_name(n):\n    s = ''\n    for i in range(10):\n        if (n == 0):\n            break\n        for j in range(26):\n            n -= 1\n            if (n == 0):\n                s += chr(ord('A') + j)\n                return s.title()\n        s += 'Z'\n    return s.title()\n\nnames = []\nt = 1\n\nfor i in range(k - 1):\n    names.append(generate_name(t))\n    t += 1\n\nfor word in s:\n    if word == 'YES':\n        names.append(generate_name(t))\n        t += 1\n    else:\n        names.append(names[-min(k - 1, len(names))])\n\nprint(' '.join(names))\n", "n, k = map(int, input().split())\ns = [i == \"YES\" for i in input().split()]\n\nr = []\n\nname = \"Aa\"\n\ndef nextName():\n\tnonlocal name\n\tif name[-1] == 'z': name = name + 'a'\n\telse: name = name[:-1] + chr(ord(name[-1]) + 1)\n\treturn name\n\nfor i in range(k-1):\n\tr.append(nextName())\n\nfor i in range(n-k+1):\n\tr.append(nextName() if s[i] else r[i])\n\nprint(*r)", "\"\"\"\nATSTNG's ejudge Python3 solution template\n(actual solution is below)\n\"\"\"\nimport sys, queue\n\ntry:\n    import dev_act_ffc429465ab634  # empty file in directory\n    DEV = True\nexcept:\n    DEV = False\n\ndef log(*s):\n    if DEV: print('LOG', *s)\n\nclass EJudge:\n    def __init__(self, problem=\"default\", reclim=1<<30):\n        self.problem = problem\n        sys.setrecursionlimit(reclim)\n\n    def use_files(self, infile='', outfile=''):\n        if infile!='':\n            self.infile = open(infile)\n            sys.stdin = self.infile\n        if infile!='':\n            self.outfile = open(outfile, 'w')\n            sys.stdout = self.outfile\n\n    def use_bacs_files(self):\n        self.use_files(self.problem+'.in', self.problem+'.out')\n\n    def get_tl(self):\n        while True: pass\n\n    def get_ml(self):\n        tmp = [[[5]*100000 for _ in range(1000)]]\n        while True: tmp.append([[5]*100000 for _ in range(1000)])\n\n    def get_re(self):\n        s = (0,)[8]\n\n    def get_wa(self, wstr='blablalblah'):\n        for _ in range(3): print(wstr)\n        return\n\nclass IntReader:\n    def __init__(self):\n        self.ost = queue.Queue()\n\n    def get(self):\n        return int(self.sget())\n\n    def sget(self):\n        if self.ost.empty():\n            for el in input().split():\n                self.ost.put(el)\n        return self.ost.get()\n\n    def release(self):\n        res = []\n        while not self.ost.empty():\n            res.append(self.ost.get())\n        return res\n\ndef tokenized(s):\n    \"\"\" Parses given string into tokens with default rules \"\"\"\n    word = []\n\n    for ch in s.strip():\n        if ch == ' ':\n            if word: yield ''.join(word); word = []\n        elif 'a' <= ch <= 'z' or 'A' <= ch <= 'Z' or '0' <= ch <= '9':\n            word.append(ch)\n        else:\n            if word: yield ''.join(word); word = []\n            yield ch\n\n    if word: yield ''.join(word); word = []\n\n###############################################################################\nej = EJudge(  )\nint_reader = IntReader()\nfmap = lambda f,*l: list(map(f,*l))\nparse_int = lambda: fmap(int, input().split())\n\n# input\nn, k = parse_int()\n\nseq = fmap(lambda x: x == \"YES\", input().split())\n\nnames = [chr(ord('A')+i) for i in range(25)] + ['S'+chr(ord('a')+i) for i in range(25)]\nnames = names[:n]\n\nfor i in range(len(seq)):\n    if not seq[i]:\n        names[i+k-1] = names[i]\n\nprint(' '.join(names))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def name(n):\n\treturn chr(ord('A') + n % 26) + chr(ord('a') + n // 26)\n\ndef main():\n\tn, k = map(int, input().split())\n\tarr = list(map(str, input().split()))\n\tif (arr.count(\"YES\") == 0):\n\t\tfor i in range(n):\n\t\t\tprint(\"Max \", end = \"\")\n\t\treturn\n\tans = [\"\" for i in range(n)]\n\tx = arr.index(\"YES\")\n\tfor i in range(k):\n\t\tans[x + i] = name(i + x)\n\tfor i in range(x + 1, n - k + 1):\n\t\tif (arr[i] == \"YES\"):\n\t\t\tans[i + k - 1] = name(i + k - 1)\n\t\telse:\n\t\t\tans[i + k - 1] = ans[i]\n\n\n\tfor i in range(x - 1, -1, -1):\n\t\tif (arr[i] == \"YES\"):\n\t\t\tans[i] = name(i)\n\t\telse:\n\t\t\tans[i] = ans[i + k - 1]\n\tprint(*ans)\n\n\nmain()", "def get(x):\n    return chr(ord('A') + x // 26) + chr(ord('a') + x % 26)\n\nread = lambda: map(int, input().split())\nn, k = read()\na = input().split()\nans = [0] * n\nnum = 1\nfor i in range(k - 1):\n    ans[i] = num\n    num += 1\nfor i in range(k - 1, n):\n    cur = a[i - k + 1]\n    if cur == 'YES':\n        num += 1\n        ans[i] = num\n    else:\n        ans[i] = ans[i - k + 1]\nres = ' '.join(map(str, [get(i) for i in ans]))\nprint(res)", "def name(n):\n    if n < 26:\n        return chr(n + ord('A'))\n    else:\n        return chr(n - 26 + ord('A')) + 'a'\n\n\nn, k = tuple(map(int, input().split()))\ndata = list([x == 'YES' for x in input().split()])\n\nres = []\nfor i in range(k-1):\n    res.append(name(i))\nfor i in range(k - 1, n):\n    if data[i - k + 1]:\n        res.append(name(i))\n    else:\n        res.append(res[i-k+1])\nprint(' '.join(res))\n", "n, k = list(map(int, input().split()))\npossible_names = [a + b for a in 'QWERTYUIOPLKJHGFDSAZXCVBNM' for b in 'qwertyuioplkjhgfdsazxcvbnm']\nnames = [possible_names.pop() for i in range(k - 1)]\nfor word in input().split():\n    if word == 'YES':\n        names.append(possible_names.pop())\n    else:\n        names.append(names[-k + 1])\nprint(*names)\n", "import math, sys, itertools\ndef main():\n\tn,k = map(int, input().split())\n\tlst = input().split()\n\td = []\n\tit = 0\n\titd = 0\n\tfor i in range(k):\n\t\tif (it>25):\n\t\t\titd+=1\n\t\t\tit = 0\n\t\td.append(chr(65+itd)+chr(97+it))\n\t\tit+=1\n\t\n\tans = []\n\tfor i in range(k-1):\n\t\tans.append(d.pop())\n\tfor i in range(k-1,n):\n\t\tif lst[i-(k-1)]==\"NO\":\n\t\t\tans.append(ans[i-(k-1)])\n\t\telse:\n\t\t\tans.append(d.pop())\n\t\t\td.append(ans[i-(k-1)])\n\tfor i in range(n):\n\t\tprint(ans[i], end=' ')\n\tprint()\n\t\t\t\n\t\n\t\t\ndef __starting_point():\n\tmain()\n\n__starting_point()", "n, k = map(int, input().split())\nl = [True if x == 'YES' else False for x in input().split()]\n \nres = list(range(k - 1))\nfor i in l:\n    if i:\n        for j in range(k):\n            if j not in res[-k+1:]:\n                res.append(j)\n                break\n    else:\n        res.append(res[-k + 1])\n \nnames = [chr(x) + chr(y) for x in range(ord('A'), ord('Z') + 1) for y in range(ord('a'), ord('z') + 1)]\n \nfor i in res:\n    print(names[i], end=' ')\nprint()", "n, k = map(int, input().split())\nnames = []\n\ndef getNext(a):\n    if a[1] == 'z':\n        return chr(ord(a[0]) + 1) + 'a'\n    else:\n        return a[0] + chr(ord(a[1]) + 1)\n\na = list(input().split())\nfor i in range(len(a)):\n    a[i] = 1 if a[i] == 'YES' else 0\n\ntmp = 'Aa'\nnames.append(tmp)\nif a[0]:\n    for i in range(k - 1):\n        tmp = getNext(tmp)\n        names.append(tmp)\nelse:\n    names.append(tmp)\n    for i in range(k - 2):\n        tmp = getNext(tmp)\n        names.append(getNext(tmp))  \n        \nfor i in range(k, n):\n    if a[i - k + 1]:\n        tmp = getNext(tmp)\n        names.append(getNext(tmp))\n    else:\n        names.append(names[i - k + 1])\nprint(*names)", "n, k = list(map(int, input().split()))\na = input().split()\nuq_names = [chr(i) for i in range(ord('A'), ord('Z') + 1)]\nuq_names += [s + 'a' for s in uq_names]\nres = uq_names[:k - 1]\nuni = k - 1\nfor i, b in enumerate(a):\n    if b == \"YES\":\n        res.append(uq_names[uni])\n        uni += 1\n    else:\n        res.append(res[i])\nprint(' '.join(res))\n", "def parent(x):\n    nonlocal color\n    y = x\n    while color[x] != x:\n        x = color[x]\n    while y != x:\n        color[y], y = x, color[y]    \n    return x\n\ndef union(x, y):\n    nonlocal color\n    x = parent(x)\n    y = parent(y)\n    if size[x] < size[y]:\n        x, y = y, x\n    color[y] = x\n    size[x] += size[y]\n\nn, k = map(int, input().split())\na = input().split()\nres = list(range(n))\ncolor = list(range(n))\nsize = [1] * n\nfor i in range(n - k + 1):\n    if a[i] == 'NO':\n        union(i, i + k - 1)\n\nalph = ''.join(chr(i) for i in range(ord('a'), ord('z') + 1))\nnames = [x+y for x in alph.upper() for y in alph] \n\nprint(*[names[x] for x in color])", "def solve(n, k, a):\n    t = 0\n    ans = [\"\" for i in range(n)] \n    \n    i = 0\n    while ((i < len(a)) and (a[i] == 'NO')):\n        ans[i] = names[0]\n        i += 1\n    \n    if (i == len(a)):\n        for j in range(i, i + k - 1):\n            ans[j] = ans[0]\n        return(ans)\n    \n    for j in range(i, i + k):\n        ans[j] = names[t]\n        t += 1\n    \n    while (i < len(a)):\n        if (a[i] == 'NO'):\n            ans[i + k - 1] = ans[i]\n        else:\n            ans[i + k - 1] = names[t]\n            t += 1\n        i += 1\n\n    return ans \n\n\n\n\nnames = []\nfor i in range(ord('A'), ord('Z')+ 1):\n    for j in range(ord('a'), ord('z')+ 1):\n        names.append(chr(i) + chr(j))\n'''\nimport random\nfor i in range(100000):\n    n = random.randint(2, 52)\n    k = random.randint(2, n)\n    a = [random.choice(['YES', 'NO']) for i in range(n - k)]\n    ans = solve(n, k, a)\n    for i in range(0, n - k):\n        s = set(ans[i:i+k])\n        is_diff = len(s) == k\n        if (a[i] == 'YES'):\n            if (len(s) != k):\n                print(n, k)\n                print(a)\n                print(ans)\n                exit\n        if (a[i] == 'NO'):\n            if (len(s) == k):\n                print(n, k)\n                print(a)\n                print(ans)\n                exit\n'''     \nn, k = list(map(int, input().strip().split()))\nis_ok = input().strip().split()\nans = solve(n, k, is_ok)\nprint(*ans)\n\n", "#This code is dedicated to Olya S.\nfrom random import*\n\nn,k=list(map(int,input().split()))\ns=input().split()\n\nsoliders=['' for i in range(n)]\n\ndef newname():\n    name=chr(randint(65,90))\n    for i in range(9):\n        name+=chr(randint(97,122))\n    return name\nif s[0]=='NO':\n        soliders[0]=newname()\n        soliders[1]=soliders[0]\n        for j in range(2,2+k):\n            if j>n-1:\n               break\n            soliders[j]=newname()\nelse:\n    for j in range(0,k):\n        \n        soliders[j]=newname()\n    \nfor i in range(1,n-k+1):\n    if s[i]=='YES':\n        soliders[i+k-1]=newname()\n    else:\n        soliders[i+k-1]=soliders[i]\n    \n            \nprint(*soliders)\n                \n\n\n\n", "n, k = [int(i) for i in input().split()]\n#n, k = 50, 2\ns = [i for i in input().split()]\n#s = [\"YES\"] * 49\nres = []\nc1 = ord(\"A\")\nc2 = ord(\"a\")\nc3 = ord(\"a\")\n\nfor i in range(0, k-1):\n    res1 = \"\"\n    if (c1 == ord(\"Z\") and c2 == ord(\"z\")):\n        res1 = chr(c1) + chr(c2) + chr(c3)\n        c3 += 1\n    elif (c1 == ord(\"Z\")):\n        res1 = chr(c1) + chr(c2)\n        c2 += 1\n    else:\n        res1 = chr(c1)\n        c1 += 1\n    res.append(res1)\n\n\nfor i in range(len(s)):\n    if s[i] == \"NO\":\n        res.append(res[i])\n    else:\n        res1 = \"\"\n        if (c1 == ord(\"Z\") and c2 == ord(\"z\")):\n            res1 = chr(c1) + chr(c2) + chr(c3)\n            c3 += 1\n        elif (c1 == ord(\"Z\")):\n            res1 = chr(c1) + chr(c2)\n            c2 += 1\n        else:\n            res1 = chr(c1)\n            c1 += 1\n        res.append(res1)\n\n    #print(i, s[i], *res[i:])\n\n\nfor i in res:\n    print(i, end = \" \")\n", "import sys\n\n\n\ndef main():\n    names = []\n    for i in range(26):        \n        s = \"A\" + chr(ord('a')+i)\n        s1 = \"X\" + chr(ord('a')+i)\n        names.append(s)\n        names.append(s1)\n    \n    n,k = map(int,sys.stdin.readline().split())\n    r = list(sys.stdin.readline().split())\n    res = [\"Ho\"]*n\n    cur = 0\n\n    firstYes = -1\n    for i in range(n-k+1):\n        if r[i] == \"YES\":\n            firstYes = i\n            break\n\n    if firstYes == -1:\n        print(\" \".join(res))\n        return\n\n    for i in range(firstYes+1, firstYes+k):\n        res[i] = names[cur]\n        cur+=1\n\n    for i in range(firstYes+1, n-k+1):\n        if r[i] == \"YES\":\n            res[i+k-1] = names[cur]\n            cur+=1\n        else:\n            res[i+k-1] = res[i]\n\n    print(\" \".join(res))\n\nmain()", "names = [i for i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'] + [ 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'[i:i+2] for i in range(0, len('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'), 2)]\nn, k = map(int, input().split())\nyes_no = input().split()\nguess = names[:n]\nfor i in range(len(yes_no)):\n    if yes_no[i] == 'NO':\n        guess[i + k - 1] = guess[i]\nprint(' '.join(guess))", "n, k = map(int, input().split())\nwords = []\nfor i in range(ord('A'), ord('Z') + 1):\n    for j in range(ord('a'), ord('z') + 1):\n        words.append(chr(i) + chr(j))\n\nour = input().split()\n \nres = [i for i in range(n)]\nfor j in range(50):\n    for i in range(len(our)):\n        if our[i] == 'NO':\n            res[i] = res[i + k - 1]\n\nfor elem in res:\n    print(words[elem],end=' ')", "names = list(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Ab Bb Cb Db Eb Fb Gb Hb Ib Jb Kb Lb Mb Nb Ob Pb Qb Rb Sb Tb Ub Vb Wb Xb Gh Rg Df\".split())\n\nn, k = map(int, input().split())\nA = list(input().split())\nfind = False\nans = [0] * n\nfor i in range(n - k + 1):\n\ts = A[i]\n\tif find:\n\t\tif s == \"YES\":\n\t\t\tc = 0\n\t\t\twhile (names[c] in ans[i:]):\n\t\t\t\tc += 1\n\t\t\tans[i + k - 1] = names[c]\n\t\telse:\n\t\t\tans[i + k - 1] = ans[i]\n\telse:\n\t\tif s == \"NO\":\n\t\t\tans[i] = names[0]\n\t\telse:\n\t\t\tnow = i\n\t\t\tfor j in range(k):\n\t\t\t\tans[now] = names[j]\n\t\t\t\tnow += 1\n\t\t\tfind = True\nif not find:\n\tfor i in range(n - k + 1, n):\n\t\tans[i] = names[0]\nprint(\" \".join(ans))", "n,k = map(int,input().split())\na = list(input().split())\n\nmem = []\nmem2 = []\nfor i in 'abcdefghijklmnopqrstuvwxyz':\n    mem.append(i)\n    mem.append('a'+i)\n    mem2.append('b'+i)\n    mem2.append('c'+i)\ndp = [-1]*(n)\nc = 0\nc2 = 0\nfor i in range(len(a)):\n    if a[i] == \"NO\":\n        if dp[i] == -1:\n            dp[i] = mem2[c2]\n            dp[i+k-1] = mem2[c2]\n        else:    \n            dp[i+k-1] = dp[i]\n        c2 += 1\n    else:\n        for j in range(i,i+k):\n            if (dp[j] == -1):\n                dp[j] = mem[c]\n                c += 1\n\nfor i in range(n):\n    if dp[i] == -1:\n        dp[i] = 'a'\n            \nfor i in dp:\n    print(i[0].upper()+i[1:],end=' ')\n", "import random\n\ndef random_str(rango, pos):\n    while True:\n        x = random.randint(65,90)\n        string = chr(x)\n        x = random.randint(1,10)\n        for i in range(x - 1):\n            rand = random.randint(97,122)\n            string += chr(rand)\n        if string not in rango:\n            break\n    return string\n\ndef print_array(array):   \n    result = \"\"\n    for string in array:\n        result += string + \" \"\n\n    print(result)\n    \nn, k = map(int, input().strip().split(\" \"))\n\nstrings = input().strip().split(\" \")\nsoldiers = [-1] * n\n\nfor i in range(n):\n    soldiers[i] = random_str(soldiers, i)\n\npos = 0\nfor string in strings:\n    \n    if string == \"NO\":        \n        aux = soldiers[pos]\n        soldiers[pos + k - 1] = aux  \n              \n    pos += 1\n        \nprint_array(soldiers)    ", "# Description of the problem can be found at http://codeforces.com/contest/771/problem/B\n\nn, k = map(int, input().split())\nl_o = input().split()\n\na_n = [\"A\"]\nfor i in range(1, n):\n    diff = i - 25 if i >= 25 else 0 \n    a_n += [chr(ord(\"A\") + i - (26 if diff != 0 else 0)) + (\"\" if diff == 0 else chr(ord(\"a\") + diff))]\n\nfor i in range(n - k + 1):\n    if l_o[i] == \"NO\":\n        a_n[i + k - 1] = a_n[i]\nprint(\" \".join(a_n))", "names = [chr(ord('A') + i) for i in range(26)]\nnames += ['A' + chr(ord('a') + i) for i in range(26)]\n\nn, k = list(map(int, input().split()))\na = input().split()\n\nfor i, a_i in enumerate(a):\n    if a_i == 'NO':\n        names[i+k-1] = names[i]\n\nprint(' '.join(names[:n]))\n\n\n"]