["read = lambda: list(map(int, input().split()))\nn = int(input())\na = [input() for i in range(n)]\nf = lambda x: x * (x - 1) // 2\ncnt = 0\nfor i in range(n):\n    k1 = a[i].count('C')\n    k2 = sum(a[j][i] == 'C' for j in range(n))\n    cnt += f(k1) + f(k2)\nprint(cnt)\n", "n = int(input())\nrows = [0] * n\ncols = [0] * n\nfor r in range(n):\n    s = input()\n    for c in range(n):\n        if s[c] == \"C\":\n            rows[r] += 1\n            cols[c] += 1\nans = 0\nfor i in range(n):\n    ans += rows[i] * (rows[i] - 1) // 2\n    ans += cols[i] * (cols[i] - 1) // 2\nprint(ans)", "n = int(input())\nM = [[c == 'C' for c in input()] for i in range(n)]\nK = [sum(M[i]) for i in range(n)]\nL = [sum(M[i][j] for i in range(n)) for j in range(n)]\nans = sum(k*(k-1)//2 for k in K) + sum(l*(l-1)//2 for l in L)\nprint(ans)\n", "n = int(input())\ng, r, c = [input() for i in range(n)], [0] * n, [0] * n\nfor i in range(n):\n    for j in range(n):\n        if g[i][j] == 'C':\n            r[i] += 1\n            c[j] += 1\nprint(sum(x * (x - 1) // 2 for x in r + c))", "n = int(input())\na = [['.'] * n for i in range(n)]\nfor i in range(n):\n    a[i] = list(input())\nc1 = 0\nfor i in range(n):\n    c = 0\n    for j in range(n):\n        if a[i][j] == 'C':\n            c += 1\n    c1 += (c * (c - 1)) // 2\nfor i in range(n):\n    c = 0\n    for j in range(n):\n        if a[j][i] == 'C':\n            c += 1\n    c1 += (c * (c - 1)) // 2\nprint(c1)", "n = int(input())\npole = []\nans = 0\nfor i in range(n):\n    s = input()\n    h = 0\n    for j in s:\n        if j == 'C':\n            h += 1\n    ans += (h * (h - 1) // 2)\n    pole.append(s)\nfor i in range(n):\n    h = 0\n    for j in range(n):\n        if pole[j][i] == 'C':\n            h += 1\n    ans += (h * (h - 1) // 2)\nprint(ans)", "n =int(input())\nx=[[i for i in input()] for j in range(0,n)]\nsumm =0\nfor i in range(n):\n\tcur = 0\n\tfor j in range(n):\n\t\tif (x[i][j]=='C'):\n\t\t\tcur+=1\n\tsumm+=cur*(cur-1)//2\nfor j in range(n):\n\tcur = 0\n\tfor i in range(n):\n\t\tif (x[i][j]=='C'):\n\t\t\tcur+=1\n\tsumm+=cur*(cur-1)//2\nprint(summ)", "n = int(input())\n\nr = 0\nstlpce = [0 for i in range(n)]\nfor i in range(n):\n    line = input()\n    riadok = 0\n    for j, c in enumerate(line):\n        if c == 'C':\n            riadok += 1\n            stlpce[j] += 1\n    r += riadok * (riadok - 1) // 2\n\nfor stlpec in stlpce:\n    r += stlpec * (stlpec - 1) // 2\n\nprint(r)\n", "#!/usr/bin/env python3\n\nN = int(input())\ngrid = [input() for _ in range(N)]\n\nrows = [0 for _ in range(N)]\ncols = [0 for _ in range(N)]\n\nfor i in range(N):\n    for j in range(N):\n        if grid[i][j] == 'C':\n            rows[i] += 1\n            cols[j] += 1\n#\n\ndef blah(n):\n    return n*(n-1)//2\n\ntotal = sum(map(blah, rows)) + sum(map(blah, cols))\nprint(total)\n", "n = int(input())\ng = [list(input()) for _ in range(n)]\n\nret = 0\n\nfor i in range(n):\n    for j in range(n):\n        if g[i][j] != \"C\":\n            continue\n        for x in range(j+1, n):\n            ret += g[i][x] == \"C\"\n        for y in range(i+1, n):\n            ret += g[y][j] == \"C\"\n\nprint(ret)\n", "n = int(input())\nl = [list(input()) for i in range(n)]\nrows = [0 for i in range(n)]\ncols = [0 for i in range(n)]\nans = 0\nfor i in range(n):\n    for j in range(n):\n        if l[i][j] == 'C':\n            rows[i] += 1\n            cols[j] += 1\n\nfor i in range(n):\n    ans += max(0, (rows[i])*(rows[i]-1)/2)\n    ans += max(0, (cols[i])*(cols[i]-1)/2)\nprint(int(ans))\n", "def f(n):\n    return (n * (n - 1)) // 2\nn = int(input())\nver = [0] * n\ngor = [0] * n\nfor i in range(n):\n    lst = input()\n    for j in range(n):\n        if lst[j] == 'C':\n            gor[i] += 1\n            ver[j] += 1\nans = 0\nfor i in ver:\n    ans += f(i)\nfor i in gor:\n    ans += f(i)\n        \nprint(ans)\n", "n = int(input())\narr = [list(input()) for i in range(n)]\nans = 0\nfor i in arr:\n\ts = 0\n\tfor j in i:\n\t\tif(j == 'C'):\n\t\t\ts+=1\n\tans += (s * (s-1))//2\nfor i in range(n):\n\ts = 0 \n\tfor j in range(n):\n\t\tif(arr[j][i] == 'C'):\n\t\t\ts+=1\n\tans += (s * (s -1 ))//2\nprint(ans)", "def C(k):\n    return (k*(k-1))//2\n\nn=int(input())\nr=[0 for i in range(n)]\nc=[0 for i in range(n)]\nfor i in range(n):\n    s=input()\n    for j in range(n):\n        if s[j]=='C':\n            r[i]+=1\n            c[j]+=1\nans=0\nfor i in range(n):\n    ans+=(C(r[i])+C(c[i]))\nprint(ans)\n", "n = int(input())\na = [0]*n\nfor i in range(n):\n    a[i] = input().strip()\nans = 0\nfor i in range(n):\n    s = 0\n    for j in range(n):\n        if a[i][j]=='C':\n            s+=1\n        # print(a[i][j])\n    ans += s*(s-1)//2\n\nfor i in range(n):\n    s = 0\n    for j in range(n):\n        if a[j][i]=='C':\n            s+=1\n    ans += s*(s-1)//2\nprint(ans)", "n = int(input())\nans = 0\np = []\nfor i in range(n):\n    p.append(list(input()))\n    s = p[i].count('C')\n    ans += s * (s - 1)\nfor i in range(n):\n    col = 0\n    for t in range(n):\n        if p[t][i] == 'C':\n             col += 1\n    ans += col * (col - 1)\nprint(ans // 2)\n\n        \n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\nn   = int(input())\na   = [ 0 for i in range(n) ]\nans = 0\n\nfor i in range(n):\n    str = input()\n    m   = 0\n\n    for j in range(n):\n        if str[j] == 'C':\n            m += 1\n            a[j] += 1\n    ans += m*(m-1)\n\nstart = time.time()\n\nfor i in range(n):\n    ans += a[i]*(a[i]-1)\n\nprint(ans//2)\nfinish = time.time()\n#print(finish - start)\n", "n = int(input())\nm = [input() for i in range(n)]\nrows = [m[i].count('C') for i in range(n)]\ncolumns = [0] * n\nfor j in range(n):\n    for i in range(n):\n        if m[i][j] == 'C':\n            columns[j] += 1\nans = 0\nfor i in range(n):\n    ans += (1 + (rows[i] - 1)) / 2 * (rows[i] - 1)\n    ans += (1 + (columns[i] - 1)) / 2 * (columns[i] - 1)\nprint(int(ans))", "n = int(input())\na = []\nres = 0\nfor i in range(n):\n    a += [input()]\nfor i in range(n):\n    x = 0\n    y = 0\n    for j in range(n):\n        if a[i][j] == 'C':\n            x += 1\n        if a[j][i] == 'C':\n            y += 1\n    res += x * (x-1) // 2 + y * (y-1) // 2\nprint(res)\n            \n", "import collections\nimport math\n\n#n, m = map(int, input().split())\nn = int(input())\nt = [input() for _ in range(n)]\n\nans = 0\nfor i in range(n):\n    x = t[i].count('C')\n    #print(x)\n    if x >= 2:\n        ans += (x - 1) * x // 2\n#print(ans)\nfor i in range(n):\n    temp = 0\n    for j in range(n):\n        if t[j][i] == 'C':\n            temp += 1\n    if temp >= 2:\n        ans += (temp - 1) * temp // 2\nprint(ans)\n", "def C2( x ):\n    if x <= 1:\n        return 0\n    return x*(x-1)//2\n\ndef __starting_point():\n\n    n = int( input() )\n    cake = []\n    for i in range(n):\n        cake.append( [c for c in input()] )\n\n    #for line in cake:\n    #    print(line)\n\n    res = 0\n\n    for i in range(n):\n        num = 0\n        for j in range(n):\n            if cake[i][j] == \"C\":\n                num += 1\n        res += C2(num)\n\n    for j in range(n):\n        num = 0\n        for i in range(n):\n            if cake[i][j] == \"C\":\n                num += 1\n        res += C2(num)\n\n    print(res)\n__starting_point()", "n = int(input())\nmaps = []\nans = 0\nfor i in range(n):\n    maps.append(input())\n    ans += (maps[-1].count('C') - 1) * maps[-1].count('C') // 2\n\nfor i in range(n):\n    cnt = 0\n    for j in range(n):\n        if maps[j][i] == 'C':\n            cnt += 1\n    ans += (cnt - 1) * cnt // 2\n\nprint(ans)", "n = int(input())\nc = [0] * n\na = 0\nfor i in range(n):\n    s = input()\n    r = 0\n    for j in range(n):\n        if s[j] == 'C':\n            r += 1\n            c[j] += 1\n    a += r * (r - 1) >> 1\nfor r in c:\n    a += r * (r - 1) >> 1\nprint(a)\n", "n = int(input())\n\nrows = [0] * n\ncols = [0] * n\n\ndef fact(num):\n    res = 1\n    while num > 1:\n        res *= num\n        num -= 1\n    return res\n\ndef nC2(count):\n    if count < 2:\n        return 0\n    elif count == 2:\n        return 1\n    return fact(count)//(2*fact(count-2))\n\nfor row in range(n):\n    for col, ch in enumerate(input()):\n        if ch == \"C\":\n            rows[row] += 1\n            cols[col] += 1\n\nres = sum((nC2(num) for num in rows)) + sum((nC2(num) for num in cols))\nprint(res)\n", "n = int(input())\ncake = [input() for i in range(n)]\ncake2 = [[0]*n for i in range(n)]\ncakex = [0]*n\ncakey = [0]*n\nfor i in range(n):\n    for j in range(n):\n         if cake[i][j] == \"C\":\n             cake2[i][j] = 1\n             cakex[i] += 1\n             cakey[j] += 1\n\nnum = 0\nfor i in range(n):\n    num += cakex[i]*(cakex[i]-1) // 2\n    num += cakey[i]*(cakey[i]-1) // 2\nprint(num)\n"]