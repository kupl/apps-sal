["n = int(input())\na = sorted([list(map(int, input().split())) for i in range(n)])\n\nimport itertools\nfor x in range(1,10**n):\n  good = False\n  s = str(x)\n  for p in itertools.permutations(a, len(s)):\n    good |= all([int(s[i]) in v for i, v in enumerate(p)])\n  if not good:\n    print(x-1)\n    return\n    \nprint((10**n)-1)", "def gen(cur, used, x):\n    pos.add(cur)\n    if x == n:\n        return\n    for j in range(n):\n        if not used[j]:\n            for i in a[j]:\n                if i != 0 or x != 0:\n                    used[j] = True\n                    gen(cur * 10 + i, used, x + 1)\n                    used[j] = False\n\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\npos = set()\ngen(0, [False] * n, 0)\nx = 1\nwhile x in pos:\n    x += 1\nprint(x - 1)\n", "n = int(input())\ncs = []\nfor i in range(n):\n    cs.append([int(x) for x in input().split()])\n\nans = 0\n\n\ndef can_make(num, cs):\n    if num == 0:\n        return True\n    elif len(cs) == 0:\n        return False\n    cm = False\n    for i in range(len(cs)):\n        if num%10 in cs[i]:\n            if can_make(num//10, cs[0:i]+cs[i+1:]):\n                return True\n    return False\n        \n    \n    \nfor i in range(1,1000):\n    if can_make(i, cs):\n        ans = i\n    else:\n        break\n\nprint(ans)\n", "def f(m):\n    m = list(map(int, list(str(m))))\n    #print(m)\n    for k in range(dd[n]):\n        #print(d[k])\n        cur = 0\n        for j in range(n):\n            kub = d[k][j] - 1\n            if cur == len(m):\n                return True\n            if m[cur] in a[kub]:\n                cur += 1\n        if cur == len(m):\n            return True\n    return False\n                \n\nn = int(input())\na = [[], [], []]\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\nd = [[1, 2, 3], [2, 1, 3], [1, 3, 2], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\ndd = [0, 0, 2, 6]\nif n == 1:\n    for j in range(1, 10):\n        if j not in a[0]:\n            print(j - 1)\n            return\nans = 0\nwhile f(ans + 1):\n    ans += 1\n#print(f(88))\nprint(ans)\n", "\n# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2017/11/4 00:13\n\n\"\"\"\n\nN = int(input())\n\nA = []\nfor i in range(N):\n    A.append([int(x) for x in input().split()])\n\n\ndef dfs(A, index, p):\n    if index >= len(A):\n        v = 0\n        for u in p:\n            v *= 10\n            v += u\n        return {v}\n\n    ans = set()\n    for v in A[index]:\n        ans |= dfs(A, index+1, p+[v])\n    ans |= dfs(A, index+1, p)\n\n    return ans\n\nallNums = set()\nfor a in itertools.permutations(A, len(A)):\n    allNums |= dfs(a, 0, [])\n\nans = 0\nfor i in range(1, max(allNums)+1):\n    if i not in allNums:\n        break\n    ans = i\n\nprint(ans)\n\n\n\n\n\n", "q=int(input())\na=[False for i in range(0,1002)]\ns=[]\nfor i in range(0,q):\n    s.append(list(map(int,input().split())))\nfor i in s:\n    for j in i:\n        a[j]=True\nif q==2:\n    for i in s[0]:\n        for j in s[1]:\n            a[i*10+j],a[j*10+i]=True,True\nif q==3:\n    for i in s[0]:\n        for j in s[1]:\n            a[i*10+j],a[j*10+i]=True,True\n    for i in s[0]:\n        for j in s[2]:\n            a[i*10+j],a[j*10+i]=True,True\n    for i in s[1]:\n        for j in s[2]:\n            a[i*10+j],a[j*10+i]=True,True\n    for i in s[0]:\n        for j in s[1]:\n            for k in s[2]:\n                a[k*100+i*10+j],a[k*100+j*10+i]=True,True\n                a[k*10+i*100+j],a[k+j*10+i*100]=True,True\n                a[k+i*10+j*100],a[k*10+i+j*100]=True,True\nz=0\nwhile (a[z+1]):\n    z+=1\nprint(z)\n", "n = int(input())\ndata = [[0] * 6 for i in range(n)]\nfor i in range(n):\n    data[i] = list(map(int, input().split()))\nmb = set()\nfor i in range(n):\n    for j in range(6):\n        mb.add(data[i][j])\nfor i in range(n):\n    for j in range(n):\n        for k in range(6):\n            for k2 in range(6):\n                if(i != j):\n                    mb.add(data[i][k] * 10 + data[j][k2])\n                    mb.add(data[i][k] + data[j][k2] * 10)\nif (n == 3):\n    for k1 in range(6):\n        for k2 in range(6):\n            for k3 in range(6):\n                mb.add(data[0][k] * 100 + data[1][k2] * 10 + data[2][k3])\n                mb.add(data[0][k] * 100 + data[1][k2] + data[2][k3] * 10)\n                mb.add(data[0][k] * 10 + data[1][k2] * 100 + data[2][k3])\n                mb.add(data[0][k] + data[1][k2] * 100 + data[2][k3] * 10)\n                mb.add(data[0][k] * 10 + data[1][k2] + data[2][k3] * 100)\n                mb.add(data[0][k] + data[1][k2] * 10 + data[2][k3] * 100)\ni = 1\nwhile i in mb:\n    i += 1\nprint(i - 1)", "n = int(input())\na = []\nalll = []\nfor i in range(n):\n    a += [list(map(str, input().split()))]\na += [[]]\na += [[]]\nt = 1\nwhile t != 1000:\n    dt = str(t)\n    if len(dt) == 1 and dt in a[0] + a[1] + a[2]:\n        pass\n    elif len(dt) == 1:\n        break\n    if len(dt) == 2:\n        tt = False\n        for i in range(3):\n            j, k = 0, 0\n            while j == i:\n                j += 1\n            while k == i or k == j:\n                k += 1\n            if dt[0] in a[i] and (dt[1] in a[j] or dt[1] in a[k]):\n                tt = True\n        if not tt:\n            break\n    if len(dt) == 3:\n        tt = False\n        for i in range(3):\n            for j in range(i + 1, 3):\n                k = 0\n                while k == i or k == j:\n                    k += 1\n                if dt[0] in a[i] and dt[1] in a[j] and dt[2] in a[k]:\n                    tt = True\n        if not tt:\n            break\n\n    t += 1\nprint(t - 1)\n", "import itertools\n\nkostki = []\n\nfor i in range(int(input())):\n    kostki.append(input().split())\n\nl = ([ ''.join(i) for i in itertools.product(*kostki) ])\n\ns = [\n    (1,2,3), (1,2),(1,3),(2,3),(1,),(2,),(3,)\n]\ns1 = []\nfor p in s:\n    s1 += itertools.permutations(p)\n\nres = set()\nfor inp in l:\n    for p in s1:\n        num = ''\n        for ind in p:\n            if ind <= len(inp):\n                num += inp[ind-1]\n        if num:\n            res.add(int(num))\n\n#print(res)\nfor i in range(1, 1003):\n    if i not in res:\n        print(i-1)\n        break\n", "import itertools\n\nn=int(input())\ncubes=[]\nfor i in range(n):\n    line=input().split()\n    cubes.append(line)\n\nnums={}\nfor i in range(1,1000):\n    nums[i]=False\n\nif n==3:\n    for a in cubes[0]:\n        for b in cubes[1]:\n            for c in cubes[2]:\n                for i in range(n):\n                    for comb in itertools.permutations([a,b,c],i+1):\n                        pres=0\n                        for num in comb:\n                            pres*=10\n                            pres+=int(num)\n                        nums[pres]=True\n\n\nif n==2:\n    for a in cubes[0]:\n        for b in cubes[1]:\n            for i in range(n):\n                for comb in itertools.permutations([a,b],i+1):\n                    pres=0\n                    for num in comb:\n                        pres*=10\n                        pres+=int(num)\n                    nums[pres]=True\n\nif n==1:\n    for a in cubes[0]:\n        nums[int(a)]=True\n\nx=0\nwhile(nums[x+1]):\n    x+=1\nprint(x)\n", "from itertools import permutations\n\nn = int(input())\n\nl = [[int(x) for x in input().split()] for _ in range(n)]\n\ns = set()\n\ndef add(t, cur, lvl):\n\tfor i in range(6):\n\t\tprint\n\t\tcur2 = cur * 10 + l[t[lvl]][i]\n\t\ts.add(cur2)\n\t\tif lvl < n - 1:\n\t\t\tadd(t, cur2, lvl + 1)\n\nfor t in permutations(tuple(range(n))):\n\tadd(t, 0, 0)\n\na = 1\nwhile True:\n\tif a in s:\n\t\ta += 1\n\telse:\n\t\tprint(a - 1)\n\t\tbreak", "from itertools import permutations as perms\nread = lambda: tuple(map(int, input().split()))\nn = read()[0]\ncbs = []\nfor i in range(n):\n    cbs += [read()]\n    \nfor i in range(1, 10000):\n    ds = str(i)\n    ch = False\n    for p in perms(cbs):\n        ii = []\n        for k in range(len(ds)):\n            for ci in range(n):\n                if int(ds[k]) in p[ci] and not ci in ii:\n                    ii += [ci]\n                    break\n        if len(ii) == len(ds):\n            ch = True\n            break\n    if not ch:\n        print(i - 1)\n        break\n    \n", "from itertools import permutations\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(input().split()))\npa = list(permutations(a))\n\nfor x in range(1, 1000):\n    ds = str(x)\n    for a in pa:\n        for d, c in zip(ds, a):\n            if d not in c:\n                break\n        else:\n            break\n    else:\n        break\n\nprint(x-1)\n", "cubecount = input()\ncubies = []\nfor i in range(int(cubecount)):\n    cubies.append(input().split(\" \"))\n\ncount = 0\nwhile count < 1000:\n    p = False\n    candidate = str(count+1)\n    if count+1 < 10:\n        for cube in cubies:\n            if candidate in cube:\n                p = True\n    elif count+1 < 100:\n        for cube in cubies:\n            if candidate[0] in cube:\n                cubieb = cubies.copy()\n                cubieb.remove(cube)\n                for cubeb in cubieb:\n                    if candidate[1] in cubeb:\n                        p = True\n    else:\n        for cube in cubies:\n            if candidate[0] in cube:\n                cubieb = cubies.copy()\n                cubieb.remove(cube)\n                for cubeb in cubieb:\n                    if candidate[1] in cubeb:\n                        cubiec = cubieb.copy()\n                        cubiec.remove(cubeb)\n                        for cubec in cubiec:\n                            if candidate[2] in cubec:\n                                p = True          \n    if p:\n        count +=1\n    else:\n        break\n\nprint(count)\n", "table=[str(i) for i in range(1, 1000)]\nn=int(input())\nnum=[]\nres=[]\nfor i in range(n):\n\ts=input()\n\ts=s.split()\n\tnum.append(s)\n#print(num)\nfor i in num[0]:\n\tres.append(i)\nif n>1:\n\tfor i in num[0]:\n\t\tfor j in num[1]:\n\t\t\tres.append(str(int(i+j)))\n\t\t\tres.append(str(int(j+i)))\n\tfor i in num[1]:\n\t\tres.append(str(int(i)))\nif n==3:\n\tfor i in num[0]:\n\t\tfor j in num[1]:\n\t\t\tfor k in num[2]:\n\t\t\t\tres.append(str(int(i+j+k)))\n\t\t\t\tres.append(str(int(i+k+j)))\n\t\t\t\tres.append(str(int(j+i+k)))\n\t\t\t\tres.append(str(int(j+k+i)))\n\t\t\t\tres.append(str(int(k+i+j)))\n\t\t\t\tres.append(str(int(k+j+i)))\n\tfor i in num[2]:\n\t\tres.append(str(int(i)))\n\tfor i in num[0]:\n\t\tfor j in num[2]:\n\t\t\tres.append(str(int(i+j)))\n\t\t\tres.append(str(int(j+i)))\n\tfor i in num[1]:\n\t\tfor j in num[2]:\n\t\t\tres.append(str(int(i+j)))\n\t\t\tres.append(str(int(j+i)))\n#print(res)\nfor i in range(1, 1001):\n\tif not (str(i) in res):\n\t\tprint(i-1)\n\t\tbreak\n", "n = int(input().strip())\nsets = [set([i for i in input().strip().split()]) for j in range(n)]\n\ndef get_all_perm(kek):\n    if (len(kek) == 1):\n        return [kek]\n    ans = []\n    for i in range(len(kek)):\n        p = [i for i in kek]\n        p.pop(i)\n        for perm in get_all_perm(p):\n            ans.append([kek[i]] + perm)\n    return ans\n\nanswer = 0\nwhile answer < 10**n:\n    answer += 1\n    g = list(str(answer))\n    for perm in get_all_perm(sets):\n        #print(perm)\n        #print([perm[i] in sets[i] for i in range(len(perm))])\n        if all([g[i] in perm[i] for i in range(len(g))]):\n            break\n    else:\n        break\n\nprint(answer - 1)", "n = int(input())\naij = [list(map(str,input().split())) for i in range(n)]\nnumbers = [0]*1001\nnumbers[0] = 1\nfor i in range(n):\n    for j in range(6):\n        numbers[int(aij[i][j])] = 1\nif n == 2:\n    for i in range(6):\n        for j in range(6):\n            numbers[int(aij[0][i]+aij[1][j])] = 1\n            numbers[int(aij[1][j]+aij[0][i])] = 1\nif n == 3:\n        for i in range(6):\n            for j in range(6):\n                numbers[int(aij[0][i]+aij[1][j])] = 1\n                numbers[int(aij[1][j]+aij[0][i])] = 1\n        for i in range(6):\n            for j in range(6):\n                numbers[int(aij[1][i]+aij[2][j])] = 1\n                numbers[int(aij[2][j]+aij[1][i])] = 1\n        for i in range(6):\n            for j in range(6):\n                numbers[int(aij[0][i]+aij[2][j])] = 1\n                numbers[int(aij[2][j]+aij[0][i])] = 1\n        for i in range(6):\n            for j in range(6):\n                for z in range(6):\n                    numbers[int(aij[0][i]+aij[1][j]+aij[2][z])] = 1\n                    numbers[int(aij[0][i]+aij[2][z]+aij[1][j])] = 1\n                    numbers[int(aij[1][j]+aij[0][i]+aij[2][z])] = 1\n                    numbers[int(aij[1][j]+aij[2][z]+aij[0][i])] = 1\n                    numbers[int(aij[2][z]+aij[1][j]+aij[0][i])] = 1\n                    numbers[int(aij[2][z]+aij[0][i]+aij[1][j])] = 1\nans = -1\nfor i in range(1001):\n    if numbers[i] == 0:\n        break\n    ans += 1\nprint(ans)\n", "n = int(input())\na = []\na += [list(input())]\nif (n > 1):\n    a += [list(input())]\nif (n > 2):\n    a += [list(input())]\ni = 1\nwhile (i < 1000):\n    s = list(str(i))\n    if (n == 1):\n        if (s[0] in a[0]):\n            i += 1\n            continue\n    if (n == 2):\n        if (len(s) == 1 and (s[0] in a[0] or s[0] in a[1])):\n            i += 1\n            continue\n        if (len(s) == 2 and (\n            (s[0] in a[0] and s[1] in a[1]) or\n            (s[0] in a[1] and s[1] in a[0]))):\n            i += 1\n            continue\n    if (n == 3):\n        if (len(s) == 1 and (s[0] in a[0] or s[0] in a[1] or s[0] in a[2])):\n            i += 1\n            continue\n        if (len(s) == 2 and (\n            (s[0] in a[0] and s[1] in a[1]) or\n            (s[0] in a[0] and s[1] in a[2]) or\n            (s[0] in a[1] and s[1] in a[0]) or\n            (s[0] in a[1] and s[1] in a[2]) or\n            (s[0] in a[2] and s[1] in a[0]) or\n            (s[0] in a[2] and s[1] in a[1]))):\n            i += 1\n            continue\n        if (len(s) == 3 and (\n            (s[0] in a[0] and s[1] in a[1] and s[2] in a[2]) or\n            (s[0] in a[0] and s[1] in a[2] and s[2] in a[1]) or\n            (s[0] in a[1] and s[1] in a[0] and s[2] in a[2]) or\n            (s[0] in a[1] and s[1] in a[2] and s[2] in a[0]) or\n            (s[0] in a[2] and s[1] in a[0] and s[2] in a[1]) or\n            (s[0] in a[2] and s[1] in a[1] and s[2] in a[0])\n            )):\n            i += 1\n            continue\n    print(i-1)\n    break\n", "n = int(input())\n\ncubes = []\nfor i in range(n):\n\tcubes.append(list(map(int, input().split())))\n\nnumbers = set()\n\nif n == 3:\n\tfor i in range(6):\n\t\tnumbers.add(cubes[0][i])\n\t\tnumbers.add(cubes[1][i])\n\t\tnumbers.add(cubes[2][i])\n\t\tfor j in range(6):\n\t\t\tnumbers.add(cubes[0][i] * 10 + cubes[1][j])\n\t\t\tnumbers.add(cubes[0][i] * 10 + cubes[2][j])\n\t\t\tnumbers.add(cubes[1][i] * 10 + cubes[0][j])\n\t\t\tnumbers.add(cubes[1][i] * 10 + cubes[2][j])\n\t\t\tnumbers.add(cubes[2][i] * 10 + cubes[0][j])\n\t\t\tnumbers.add(cubes[2][i] * 10 + cubes[1][j])\n\t\t\tfor k in range(6):\n\t\t\t\tnumbers.add(cubes[0][i] * 100 + cubes[1][j] * 10 + cubes[2][k])\n\t\t\t\tnumbers.add(cubes[0][i] * 100 + cubes[2][j] * 10 + cubes[1][k])\n\t\t\t\tnumbers.add(cubes[1][i] * 100 + cubes[0][j] * 10 + cubes[2][k])\n\t\t\t\tnumbers.add(cubes[1][i] * 100 + cubes[2][j] * 10 + cubes[0][k])\n\t\t\t\tnumbers.add(cubes[2][i] * 100 + cubes[0][j] * 10 + cubes[1][k])\n\t\t\t\tnumbers.add(cubes[2][i] * 100 + cubes[1][j] * 10 + cubes[0][k])\nif n == 2:\n\tfor i in range(6):\n\t\tnumbers.add(cubes[0][i])\n\t\tnumbers.add(cubes[1][i])\n\t\tfor j in range(6):\n\t\t\tnumbers.add(cubes[0][i] * 10 + cubes[1][j])\n\t\t\tnumbers.add(cubes[1][i] * 10 + cubes[0][j])\nif n == 1:\n\tfor i in range(6):\n\t\tnumbers.add(cubes[0][i])\n\nans = 0\nfor i in range(1, 999):\n\tif i not in numbers:\n\t\tbreak\n\tans = i\n\nprint(ans)", "n=int(input())\ndef find(x,d=[]):\n    if x==0 and d!=[]:\n        return True\n    l=x%10\n    \n    i=-1\n    a=False\n    for lis in s:\n        i+=1\n        if l in lis and i not in d:\n            a=max(a,find(x//10,d+[i]))\n    return a\ns=[list(map(int,input().split())) for x in range(n)]\ne=1\nwhile find(e):\n    e+=1\nprint(int(e-1  if find(1) else 0))", "import sys\nn = int(input())\nmax = 0\nif n == 1:\n    a = [int(x) for x in input().split()]\n    for i in range(1, 10):\n        if i not in a:\n            print(max)\n            return\n        max += 1\nelif n == 2:\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    for i in range(1, 10):\n        if (i not in a) and (i not in b):\n            print(max)\n            return\n        max += 1\n    for i in range(10, 100):\n        a1 = int(str(i)[0])\n        a2 = int(str(i)[1])\n        if ((a1 in a) and (a2 in b)) or ((a1 in b) and (a2 in a)):\n            max += 1\n        else:\n            print(max)\n            return\nelif n == 3:\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    for i in range(1, 10):\n        if (i not in a) and (i not in b) and (i not in c):\n            print(max)\n            return\n        max += 1\n    for i in range(10, 100):\n        a1 = int(str(i)[0])\n        a2 = int(str(i)[1])\n        if ((a1 in a) and (a2 in b)) or ((a1 in b) and (a2 in a)) or ((a1 in a) and (a2 in c)) or ((a1 in c) and (a2 in a)) or (a1 in b) and (a2 in c) or (a1 in c) and (a2 in b):\n            max += 1\n        else:\n            print(max)\n            return", "c=[0 for i in range(1000)]\nn=int(input())\ncc=[]\nfor i in range(n):\n    a=list(map(int,input().strip().split(' ')))\n    for j in a:\n        c[j]=1\n    cc.append(a)\nif(n==1):\n    for i in range(1,1000):\n        if(c[i]==0):\n            break\n    print(i-1)\nif(n==2):\n    a=cc[0]\n    b=cc[1]\n    for i in a:\n        for j in b:\n            c[i*10+j]=1\n            c[j*10+i]=1\n    for i in range(1,1000):\n        if(c[i]==0):\n            break\n    print(i-1)\nif(n==3):\n    a=cc[0]\n    b=cc[1]\n    d=cc[2]\n    \n    for i in a:\n        for j in b:\n            c[i*10+j]=1\n            c[j*10+i]=1\n    for i in a:\n        for j in d:\n            c[i*10+j]=1\n            c[j*10+i]=1\n    for i in d:\n        for j in b:\n            c[i*10+j]=1\n            c[j*10+i]=1\n    for i in a:\n        for j in b:\n            for k in d:\n                c[i*100+j*10+k]=1\n                c[i*100+k*10+j]=1\n                c[j*100+i*10+k]=1\n                c[j*100+i+k*10]=1\n                c[k*100+i*10+j]=1\n                c[k*100+j*10+i]=1\n    \n    for i in range(1,1000):\n        if(c[i]==0):\n            break\n    print(i-1)\n\n", "def fun(n,l):\n    if len(l)==1:\n        return n in l[0]\n    elif len(l)==2:\n        if n<10:\n            return (n in l[0]) or (n in l[1])\n        elif n<100:\n            u=n%10\n            h=int((str(n))[0])\n            return (u in l[0] and h in l[1]) or(u in l[1] and h in l[0])\n        else:\n            return False\n    else:\n        if n<10:\n            return (n in l[0]) or (n in l[1]) or (n in l[2])\n        elif n<100:\n            u=n%10\n            h=int((str(n))[0])\n            return fun(n,[l[0],l[1]]) or fun(n,[l[0],l[2]]) or fun(n,[l[1],l[2]])\nl=[]\nn=int(input())\nfor i in range(n):\n    l.append([int(j) for j in input().split()])\nfor i in range(1,100):\n    if not(fun(i,l)):\n        break\nprint(i-1)\n            \n            \n        \n", "from itertools import product as comb\nfrom itertools import permutations as perm\nk = int(input())\ncubes = [input().split(\" \") for i in range(k)]\nnums = set()\nfor n in range(1, k + 1):\n    for p in perm(list(range(k)), n):\n#        print(p)\n        # p is (0, 2, 1) order of cubes\n        for c in comb(list(range(6)), repeat=n):\n #           if p == (1, 0):\n#                print(\"--\" + str(c))\n            nn = \"\"\n            for i in range(n):\n  #              if p == (1, 0):\n   #                 print(\"----\" + str(p[i]) + \"-\" + str(c[i]) + \"-\" + cubes[p[i]][c[i]])\n                nn += cubes[p[i]][c[i]]\n            nums.add(int(nn))\n#print(\"fuckwrvbwoe\")\n#print(\"yes\" if 12 in nums else \"no\")\n#print(nums)\nans = 0\nwhile ans + 1 in nums:\n    ans += 1\nprint(ans)\n", "n = int(input())\ncubes = []\nfor i in range(n):\n    cubes.append(list(map(int, input().split())))\n\ntaken = []\nfor i in range(10000):\n    taken.append(0)\n\nres = 0\nfor cube in cubes:\n    for face in cube:\n            taken[face] += 1\n\nfor cube1 in cubes:\n    for cube2 in cubes:\n        if cube1 != cube2:\n            for face1 in cube1:\n                for face2 in cube2:\n                    tmp = str(face1) + str(face2)\n                    taken[int(tmp)] += 1\n\nfor cube1 in cubes:\n    for cube2 in cubes:\n        for cube3 in cubes:\n            if cube1 != cube2 and cube1 != cube3 and cube2 != cube3:\n                for face1 in cube1:\n                    for face2 in cube2:\n                        for face3 in cube3:\n                            tmp = str(face1) + str(face2) + str(face3)\n                            taken[int(tmp)] += 1\n\niterate = 0\nfor i in taken:\n    if i == 0 and iterate > 0:\n        break\n\n    res = iterate\n    iterate += 1\nprint(res)\n"]