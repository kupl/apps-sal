["from bisect import bisect\n\nHISENTINEL = 10**9 + 1\nLOSENTINEL = -HISENTINEL\n\ndef main():\n    length = int(input())\n    a = [int(fld) for fld in input().strip().split()]\n    b = [int(fld) for fld in input().strip().split()]\n    print(countmaxminsubseq(a, b))\n    \ndef countmaxminsubseq(a, b):\n    leq, lgt = getleftbounds(a, b, 0)\n    req, rgt = getleftbounds(reversed(a), reversed(b), 1)\n    req = reverseindex(req)\n    rgt = reverseindex(rgt)\n    count = 0\n    for i, (leq1, lgt1, req1, rgt1) in enumerate(zip(leq, lgt, req, rgt)):\n        count += (leq1 - lgt1)*(rgt1 - i) + (i - leq1)*(rgt1 - req1)\n    return count\n    \ndef getleftbounds(a, b, bias):\n    astack = [(HISENTINEL, -1)]\n    bstack = [(LOSENTINEL, -1)]\n    leqarr, lgtarr = [], []\n    for i, (aelt, belt) in enumerate(zip(a, b)):\n        while astack[-1][0] < aelt + bias:\n            astack.pop()\n        lgt = astack[-1][1]\n        while bstack[-1][0] > belt:\n            bstack.pop()\n        if belt < aelt:\n            leq = lgt = i\n        elif belt == aelt:\n            leq = i\n            istack = bisect(bstack, (aelt, -2)) - 1\n            lgt = max(lgt, bstack[istack][1])\n        else:\n            istack = bisect(bstack, (aelt, i)) - 1\n            val, pos = bstack[istack]\n            if val < aelt:\n                lgt = leq = max(lgt, pos)\n            else:\n                leq = pos\n                istack = bisect(bstack, (aelt, -2)) - 1\n                val, pos = bstack[istack]\n                lgt = max(lgt, pos)\n                leq = max(leq, lgt)\n                \n        leqarr.append(leq)\n        lgtarr.append(lgt)\n        astack.append((aelt, i))\n        bstack.append((belt, i))\n    return leqarr, lgtarr\n    \ndef reverseindex(rind):\n    pivot = len(rind) - 1\n    return [pivot - i for i in reversed(rind)]\n    \n   \nmain()    \n\n"]