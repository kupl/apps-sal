["def main():\n N, K = list(map(int, input().split()))\n \n Apples = [int(x) for x in input().split()]\n \n time = 0 # answer\n # Apples_encountered = [None]  # Binary Search Tree \n \n distinct_apples_condition = None if K & 1 else K >> 1 \n \n already_found = [False] * K \n \n for i in range((N >> 1) + 1):\n  time += 1 \n  for k in (Apples[i], Apples[N - i - 1]):\n   if k < K and k != distinct_apples_condition:\n    if already_found[K - k - 1]:\n     # print(K, k)\n     # print(already_found)\n     return time \n    already_found[k - 1] = True\n  \n \n return -1 \n\n\nprint(main())\n \n \n \n \n \n", "def main():\n N, K = list(map(int, input().split()))\n \n Apples = [int(x) for x in input().split()]\n \n time = 0 # answer\n # Apples_encountered = [None]  # Binary Search Tree \n \n distinct_apples_condition = None if K & 1 else K >> 1 \n \n already_found = [False] * K \n \n for i in range((N >> 1) + 1):\n  time += 1 \n  for k in (Apples[i], Apples[N - i - 1]):\n   if k < K and k != distinct_apples_condition:\n    if already_found[K - k - 1]:\n     # print(K, k)\n     # print(already_found)\n     return time \n    already_found[k - 1] = True\n  \n \n return -1 \n\n\nprint(main())\n \n \n \n \n \n", "\n\nn,k = list(map(int,input().split()))\n\nla = list(map(int,input().split()))\n\n# l = []\n#\n# for i in range(len(la)):\n#        l.append([la[i],i])\n# l.sort()\nmini = 10**18\n# i = 0\n# j = len(l)-1\n# # print(l)\n# while i<j:\n#     if l[i][0]+l[j][0]<k:\n#         i+=1\n#     elif l[i][0]+l[j][0]>k:\n#         j-=1\n#     else:\n#         if l[i][0]+l[j][0]==k:\n#\n#             z1,z2 = max(l[i][1],l[j][1]),min(l[i][1],l[j][1])\n#             ans1 = max(z1,z2)+1\n#             ans2 = max(n-z1,n-z2)\n#             ans3 = max(n-z1,z2+1)\n#             ans4 = max(z1+1,n-z2)\n#             # print(l[i][0],l[j][0])\n#             if l[i][0]!=l[j][0]:\n#              mini = min(mini,ans1,ans2,ans3,ans4)\n#             j-=1\n#             i+=1\n#\n# if mini == 10**18:\n#     print(-1)\n# else:\n#     print(mini)\n\n#\n# from collections import defaultdict\n# INF = float(\"inf\")\n#\n# n,k = map(int,input().split())\n# t = list(map(int,input().split()))\n# d = defaultdict(int)\n# for i in range(n):\n#     x = i+1 if i<n/2 else n-i\n#     if d[t[i]]:\n#         d[t[i]] = min(d[t[i]],x)\n#     else:\n#         d[t[i]] = x\n# ans = INF\n# for i in range(n):\n#     if d[k-t[i]] and t[i] != k-t[i]:\n#         ans = min(ans,max(d[k-t[i]],d[t[i]]))\n# print(-1 if ans == INF else ans)\n#\n#\n#\nfrom collections import defaultdict\n\nhash = defaultdict(int)\n\nfor i in range(len(la)):\n z1 = i+1\n z2 = n-i\n z = min(z1,z2)\n if la[i] in hash:\n  hash[la[i]] = min(z,hash[la[i]])\n else:\n  hash[la[i]] = z\n\nfor i in range(len(la)):\n z = k-la[i]\n if z in hash and z!=la[i]:\n  ans = max(hash[z],hash[la[i]])\n  mini = min(mini,ans)\n\n\n\n\n\nif mini == 10**18:\n print(-1)\nelse:\n print(mini)\n\n\n"]