["n, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\ncumsum = [0]\n\nfor a in A:\n   cumsum.append(cumsum[-1] + a)\n#print(cumsum)\npows = set([k**i for i in range(50)])\ncum = dict({})\ncum[0] = 1\n\nres = 0\n\nfor x in cumsum[1:]:\n    for pow in pows:\n        if (x - pow) in cum:\n            res += cum[x - pow]\n    if x in cum:\n        cum[x] += 1\n    else:\n        cum[x] = 1\n\nprint(res)\n", "from sys import stdin, stdout\n\nn, k = map(int, stdin.readline().split())\nvalues = list(map(int, stdin.readline().split()))\ncnt = [0]\nd = {0:1}\npower = [1]\nans = 0\n\n\nif abs(k) > 1:\n    while abs(power[-1]) < 10 ** 16:\n        power.append(power[-1] * k)\nelif k == -1:\n    power = [1, -1]\nelif not k:\n    power = [0]\n    \n\nfor i in range(n):  \n    cnt.append(cnt[-1] + values[i])\n    \n    if cnt[-1] in d:\n        d[cnt[-1]] += 1\n    else:\n        d[cnt[-1]] = 1\n        \n    for v in power:\n        if cnt[-1] - v in d:\n            ans += d[cnt[-1] - v]\n    \nstdout.write(str(ans))", "n, k = [int(x) for x in input().split()]\nacc = 0\nans = 0\nprefix = {0:1}\nfor a in input().split():\n    acc += int(a)\n    ans += prefix.get(acc-1,0)\n    i = k\n    while i!=1 and i<=10**14 and i >=-(10**14):\n        ans += prefix.get(acc-i,0)\n        i *= k\n    prefix.setdefault(acc,0)\n    prefix[acc]+=1\nprint(ans)\n", "n, k = map(int, input().split())\nA = list(map(int, input().split()))\ncumsum = [0]\n\nfor a in A:\n   cumsum.append(cumsum[-1] + a)\n#print(cumsum)\npows = set([k**i for i in range(50)])\ncum = dict({})\ncum[0] = 1\n\nres = 0\n\nfor x in cumsum[1:]:\n    for pow in pows:\n        if (x - pow) in cum:\n            res += cum[x - pow]\n    if x in cum:\n        cum[x] += 1\n    else:\n        cum[x] = 1\n\nprint(res)", "import math\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nif abs(k) > 1:\n    valid = [k ** i for i in range(0, math.ceil(math.log(n * 1e9) / math.log(abs(k))) + 1)]\nelif k == -1:\n    valid = [1, -1]\nelse:\n    valid = [k]\n# print(math.log(n * 1e9) / math.log(abs(k)))\n# print(valid)\n\ns = 0\nans = 0\ncount = {s : 1}\nfor i in a:\n    s += i\n    for j in valid:\n        if count.get(s - j):\n            ans += count[s - j]\n    if count.get(s):\n        count[s] += 1\n    else:\n        count[s] = 1\nprint(ans)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\npowers = set()\nfor i in range(0, 100):\n    p = k ** i\n    if abs(p) > 10 ** 9 * 10 ** 5:\n        break\n    else:\n        powers.add(p)\n\ns = [0]\nfor e in a:\n    s.append(s[-1] + e)\n\nresult = 0\nfreq = {}\nfor i in range(0, n + 1):\n    for p in powers:\n        # s[i] - s[x] == p\n        sx = s[i] - p\n        if sx in freq:\n            result += freq[sx]\n    freq.setdefault(s[i], 0)\n    freq[s[i]] += 1\n\nprint(result)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ns = [0 for i in range(n + 1)]\nfor i in range(n):\n    s[i] = s[i - 1] + a[i]\nans = 0\nbg = 1\ncan = set()\nprev = dict()\nprev[0] = 1\nfor i in range(50):\n    can.add(bg)\n    bg *= k\nfor i in range(n):\n    for j in can:\n        if s[i] - j in prev:\n            ans += prev[s[i] - j]\n    if s[i] in prev:\n        prev[s[i]] += 1\n    else:\n        prev[s[i]] = 1\nprint(ans)\n", "import sys\nfrom itertools import accumulate\nfrom collections import Counter\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    n, k = map(int, input().split())\n    A = [int(i) for i in input().split()]\n    cs = [0] + list(accumulate(A))\n    S = Counter()\n    ans = 0\n\n    if k == 1:\n        for i in range(n, -1, -1):\n            if i == n:\n                S[cs[i]] += 1\n                continue\n\n            if cs[i] + 1 in S:\n                ans += S[cs[i] + 1]\n\n            S[cs[i]] += 1\n    elif k == -1:\n        for i in range(n, -1, -1):\n            if i == n:\n                S[cs[i]] += 1\n                continue\n\n            if cs[i] + 1 in S:\n                ans += S[cs[i] + 1]\n            if cs[i] - 1 in S:\n                ans += S[cs[i] - 1]\n\n            S[cs[i]] += 1\n    else:\n        for i in range(n, -1, -1):\n            if i == n:\n                S[cs[i]] += 1\n                continue\n\n            w = 1\n            while abs(w) < 10**14 + 1:\n                if cs[i] + w in S:\n                    ans += S[cs[i] + w]\n                w *= k\n\n            S[cs[i]] += 1\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "#!/usr/bin/env python3\n#from collections import defaultdict\n\ndef ri():\n    return map(int, input().split())\n\nn, k = ri()\n\ns = list(ri())\nsd = dict()\nfor i in range(1,n):\n    s[i] = s[i] + s[i-1]\n\ns.append(0)\n\nans = 0\npows = set([k**i for i in range(50)])\nfor i in range(n-1, -1, -1):\n    if not s[i] in sd:\n        sd[s[i]] = 1\n    else:\n        sd[s[i]] += 1\n    for pow in pows:\n        p = pow + s[i-1]\n        if p in sd:\n            ans += sd[p]\nprint(ans)", "#!/usr/bin/env python3\n#from collections import defaultdict\n\ndef ri():\n    return map(int, input().split())\n\nn, k = ri()\n\ns = list(ri())\nsd = dict()\nfor i in range(1,n):\n    s[i] = s[i] + s[i-1]\n\ns.append(0)\n\nans = 0\npows = set([k**i for i in range(50)])\nfor i in range(n-1, -1, -1):\n    if not s[i] in sd:\n        sd[s[i]] = 1\n    else:\n        sd[s[i]] += 1\n    for pow in pows:\n        p = pow + s[i-1]\n        if p in sd:\n            ans += sd[p]\nprint(ans)", "import sys\nfrom itertools import accumulate\n\ndef solve():\n    n, k = map(int, input().split())\n    a = [int(i) for i in input().split()]\n\n    ps = [0] + list(accumulate(a))\n    ap = {ps[n] : 1}\n    ans = 0\n\n    if k == 1:\n        for i in range(n - 1, -1, -1):\n            if ps[i] + 1 in ap:\n                ans += ap[ps[i] + 1]\n\n            if ps[i] in ap:\n                ap[ps[i]] += 1\n            else:\n                ap[ps[i]] = 1\n    elif k == -1:\n        for i in range(n - 1, -1, -1):\n            if ps[i] + 1 in ap:\n                ans += ap[ps[i] + 1]\n            if ps[i] - 1 in ap:\n                ans += ap[ps[i] - 1]\n\n            if ps[i] in ap:\n                ap[ps[i]] += 1\n            else:\n                ap[ps[i]] = 1\n    else:\n        for i in range(n - 1, -1, -1):\n            pk = 1\n\n            while abs(pk) <= 10**14:\n                if ps[i] + pk in ap:\n                    ans += ap[ps[i] + pk]\n\n                pk *= k\n\n            if ps[i] in ap:\n                ap[ps[i]] += 1\n            else:\n                ap[ps[i]] = 1\n\n    print(ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "import sys\nfrom itertools import accumulate\n\ndef solve():\n    n, k = map(int, input().split())\n    a = [int(i) for i in input().split()]\n\n    ps = [0] + list(accumulate(a))\n    ap = {ps[n] : 1}\n    ans = 0\n\n    if k == 1:\n        for i in range(n - 1, -1, -1):\n            if ps[i] + 1 in ap:\n                ans += ap[ps[i] + 1]\n\n            if ps[i] in ap:\n                ap[ps[i]] += 1\n            else:\n                ap[ps[i]] = 1\n    elif k == -1:\n        for i in range(n - 1, -1, -1):\n            if ps[i] + 1 in ap:\n                ans += ap[ps[i] + 1]\n            if ps[i] - 1 in ap:\n                ans += ap[ps[i] - 1]\n\n            if ps[i] in ap:\n                ap[ps[i]] += 1\n            else:\n                ap[ps[i]] = 1\n    else:\n        kp = [k**i for i in range(50)]\n\n        for i in range(n - 1, -1, -1):\n            for kpi in kp:\n                if ps[i] + kpi in ap:\n                    ans += ap[ps[i] + kpi]\n\n            if ps[i] in ap:\n                ap[ps[i]] += 1\n            else:\n                ap[ps[i]] = 1\n\n    print(ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "f = lambda: map(int, input().split())\nn, k = f()\nt = {k ** i for i in range(48) if k ** i <= n * 1e9}\ns = y = 0\nd = {0: 1}\nfor a in f():\n    s += a\n    d[s] = d.get(s, 0) + 1\n    y += sum(d.get(s - x, 0) for x in t)\nprint(y)", "from math import log\nn,k = map(int,input().split())\na = list(map(int,input().split()))\ni,s = 0,{}\nif k == -1:\n    s = {1: 0, -1: 0}\nelif k == 1:\n    s = {1: 0}\nelse:\n    while max(-k**i,k**i) <= 10**9*n:\n        s[k**i] = 0\n        i += 1\nd,p = {0: 1},0\nfor i in a:\n    p += i\n    if p in d:\n        d[p] += 1\n    else:\n        d[p] = 1\n    for j in s:\n        if p-j in d:\n            s[j] += d[p-j]\nr = 0\nfor i in s:\n    r += s[i]\nprint(r)", "n, k = input().split()\nn, k = int(n), int(k)\n\narr = input().split()\narr = [int(a) for a in arr]\n\nsu = {1}\n\nfor i in range(1, 100):\n    if k**i < 10**10*n:\n        su.add(k**i)\n        continue\n    break\n\n#print(su)\nd = {0:1}\nans = 0\ncumulative_sum = 0\nfor x in arr:\n    cumulative_sum += x\n    for s in su:\n        if cumulative_sum - s in d:\n            ans += d[cumulative_sum-s]\n    d[cumulative_sum] = d.get(cumulative_sum, 0) + 1\n\nprint(ans)", "from itertools import accumulate, product\n\nimport math\n\nR = lambda: map(int, input().split())\nn, k = R()\narr, acc = list(accumulate(R())), dict()\nacc[0] = 1\nres = 0\nrk, rks = 1, []\nif abs(k) > 1:\n    while rk < 10 ** 15:\n        rks.append(rk)\n        rk *= k\nelse:\n    rks = [1] if k == 1 else [1, -1]\n\nfor x in arr:\n    for rk in rks:\n        res += acc.get(x - rk, 0)\n    acc[x] = acc.get(x, 0) + 1\nprint(res)", "n, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\ncumsum = [0]\n\nfor a in A:\n   cumsum.append(cumsum[-1] + a)\n#print(cumsum)\npows = set([k**i for i in range(50)])\ncum = dict({})\ncum[0] = 1\n\nres = 0\n\nfor x in cumsum[1:]:\n    for pow in pows:\n        if (x - pow) in cum:\n            res += cum[x - pow]\n    if x in cum:\n        cum[x] += 1\n    else:\n        cum[x] = 1\n\nprint(res)\n\n\n\n\n# Made By Mostafa_Khaled\n", "n,k=map(int,input().split())\na=list(map(int,input().split()))\np=a[:]\nfor i in range(1,n):p[i]+=p[i-1]\nz=1\no=0\nr=50\nif k==-1:\n    r=2\nelif k==1:\n    r=1\nfor i in range(r):\n    d={}\n    for j in range(n):\n        if p[j] not  in d:d[p[j]]=0\n        d[p[j]]+=1\n        if p[j]-z in d:o+=d[p[j]-z]\n        if p[j]-z==0:o+=1\n    z*=k\nprint(o)", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\nn, k = mints()\nx = 1\npows = []\nif k == 1:\n\tpows = [1]\nelif k == -1:\n\tpows = [1, -1]\nelse:\n\tm = 10**(9+5)\n\twhile x <= m:\n\t\tpows.append(x)\n\t\tx *= k\na = list(mints())\ns = 0\nz = dict()\nz[0] = 1\nr = 0\nfor i in range(n):\n\ts += a[i]\n\tz[s] = z.get(s, 0) + 1\n\tfor j in pows:\n\t\tif s-j in z:\n\t\t\tr += z[s-j]\nprint(r)", "n, k = map(int, input().split())\npowk = [k ** i for i in range(1, 60)]\na = list(map(int, input().split()))\ns = 0\nd = {0: 1}\nans = 0\nINF = 10 ** 14\nfor i in range(n):\n    s += a[i]\n    if s - 1 in d:\n        ans += d[s - 1]\n    for j in range(len(powk)):\n        q = powk[j]\n        if q == 1:\n            break\n        if s - q in d:\n            ans += d[s - q]\n        if abs(j) > INF:\n            break\n    if s in d:\n        d[s] += 1\n    else:\n        d[s] = 1\nprint(ans)", "n, k = map(int, input().split())\nans = 0\na=list(map(int, input().split()))\nb = set()\na = [0] + a\nn += 1\nfor i in range(1, n):\n\ta[i] += a[i-1]\n\nt = 1\nfor z in range(100):\n\tif abs(t) <= 10 ** 16:\n\t\tb.add(t)\n\tt *= k\n\nfor x in b:\n\td = dict()\n\tfor i in a:\n\t\tans += d.get(i-x, 0)\n\t\td[i] = d.get(i, 0) + 1\nprint(ans)", "n, k = map(int,input().split())\nqw = [int(i) for i in input().split()]\nq = 1\nc = 0\nfor i in range(50):\n\tsumm = 0\n\ter = {q:1}\n\tfor u in qw:\n\t\tsumm += u\n\t\tif summ in er:\n\t\t\tc += er[summ]\n\t\tif summ + q in er:\n\t\t\ter[summ+q] += 1\n\t\telse:\n\t\t\ter[summ+q] = 1\n\t\t\n\t\t\n\tq *= k\nif k == 1:\n\tprint(c//50)\nelif k == -1:\n\tprint(c//25)\nelse:\n\tprint(c)", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/10/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\n\ndef solve(N, K, A):\n    presum = [0 for _ in range(N+1)]\n    vi = collections.defaultdict(list)\n    for i, v in enumerate(A):\n        presum[i+1] = presum[i] + v\n    for i, v in enumerate(presum):\n        vi[v].append(i)\n        \n    maxval = max(presum)\n    minval = min(presum)\n    ans = 0\n    for i, v in enumerate(presum):\n        us = []\n        if K > 1:\n            c = 0\n            u = v + 1\n            while u <= maxval:\n                us.append(u)\n                c += 1\n                u = v + K ** c\n        elif K < -1:\n            # even\n            c = 0\n            u = v + 1\n            while u <= maxval:\n                us.append(u)\n                c += 2\n                u = v + K ** c\n\n            c = 1\n            u = v + K\n            while u >= minval:\n                us.append(u)\n                c += 2\n                u = v + K ** c\n        elif K == 1:\n            us = [v + 1]\n        elif K == -1:\n            us = [v + 1, v - 1]\n        \n        for u in us:\n            if u in vi:\n                idx = vi[u]\n                ans += len(idx) - bisect.bisect_right(idx, i)\n    \n    return ans\n    \n    \n    \n\n\nN, K = map(int, input().split())\nA = [int(x) for x in input().split()]\nprint(solve(N, K, A))", "n,k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\n\npsum = [0]\nd = {0 : 1}\nfor i in range(n):\n    num = psum[i]+arr[i]\n    d.setdefault(num,0)\n    d[num]+=1\n    psum.append(num)\n\nif abs(k) == 1:\n    e = d.copy()\n    ans = 0\n    for i in psum:\n        e[i]-=1\n        if 1+i in e : ans+=e[1+i]\n\n    if k == -1:\n        e = d.copy()\n        for i in psum:\n            e[i]-=1\n            if i-1 in e: ans+=e[i-1]\n        \n    print(ans)\n    \n\nelse:\n    p = 0\n    w = pow(k,p)\n    ans = 0\n    while w <= pow(10,14):\n        e = d.copy()\n\n        for i in psum:\n            e[i]-=1\n            if w+i in e:ans+=e[w+i]\n\n        p+=1\n        w = pow(k,p)\n\n    print(ans)\n        \n        \n\n\n\n\n\n"]