["n = int(input())\nt = [1] + [0] * n\nb, a = d = [], []\nh, s = [], []\n\nfor i in range(n):\n    f, k = input().split()\n    d[int(k)].append(f)\n\nm = len(a)\nfor i in a:\n    if i.isdigit() and i[0] != '0':\n        j = int(i)\n        if 0 < j <= m:\n            t[j] = 1\n        elif m < j <= n:\n            t[j] = -1\n        else:\n            s.append(i)\n    else:\n        s.append(i)\nfor i in b:\n    if i.isdigit() and i[0] != '0':\n        j = int(i)\n        if m < j <= n:\n            t[j] = 1\n        elif 0 < j <= m:\n            t[j] = -1\n        else:\n            s.append(i)\n    else:\n        s.append(i)\n\nx = [j for j in range(1, m + 1) if t[j] < 0]\ny = [j for j in range(m + 1, n + 1) if t[j] < 0]\n\nu = [j for j in range(1, m + 1) if not t[j]]\nv = [j for j in range(m + 1, n + 1) if not t[j]]\n\nif not s and (x or y):\n    s = ['0']\n    if y:\n        i = y.pop()\n        v.append(i)\n    else:\n        i = x.pop()\n        u.append(i)\n    h.append(str(i) + ' 0')\n    t[i] = 0\n\nwhile x or y:\n    if v and x:\n        i = x.pop()\n        j = v.pop()\n        t[j] = 1\n        h.append(str(i) + ' ' + str(j))\n        u.append(i)\n    else:\n        u, v, x, y = v, u, y, x\n\nk = 1\nfor j in s:\n    while t[k] == 1: k += 1\n    h.append(j + ' ' + str(k))\n    k += 1\n\nd = '\\nmove '\nprint(str(len(h)) + d + d.join(h) if h else 0)", "import random\ndef genTemp():\n    sl = \"\"\n    firstTime = True\n    while firstTime or sl in pre or sl in post:\n        sl = \"\"\n        firstTime = False\n        for i in range(6):\n            sl += chr(random.randint(ord(\"a\"), ord(\"z\")))\n    return sl\n\n\nn = int(input())\ne = 0\npre = set()\npost = set()\n\nfor i in range(n):\n    name, tp = input().split()\n    if tp == \"1\":\n        e += 1\n        pre.add(name)\n    else:\n        post.add(name)\n\ntemp = genTemp()\n\npreAns = {str(x) for x in range(1, e + 1)}\npostAns = {str(x) for x in range(e + 1, n + 1)}\n\npreMissing = preAns - pre\npostMissing = postAns - post\n\npreToChange = pre - preAns\npostToChange = post - postAns\n\npreFree = preMissing - postToChange\npostFree = postMissing - preToChange\n\npreWrong = preToChange & postMissing\npostWrong = postToChange & preMissing\n\nans = []\n\nwhile preToChange or postToChange:\n    if not postFree and not preFree:\n        if preToChange:\n            x = preToChange.pop()\n            preWrong.discard(x)\n            ans.append((\"move\", x, temp))\n            preToChange.add(temp)\n            #postMissing.discard(x)\n            if x in postAns:\n                postFree.add(x)            \n        else:\n            x = postToChange.pop()\n            ans.append((\"move\", x, temp))\n            postWrong.discard(x)\n            postToChange.add(temp)\n            #preMissing.discard(x)   \n            if x in postAns:\n                preFree.add(x)            \n    elif preFree:\n        if preWrong:\n            x = preWrong.pop()\n            preToChange.discard(x)\n        else:\n            x = preToChange.pop()\n        y = preFree.pop()\n        ans.append((\"move\", x, y))\n        preMissing.discard(y)\n        if x in postAns:\n            postFree.add(x)\n    else:\n        if postWrong:\n            x = postWrong.pop()\n            postToChange.discard(x)\n        else:\n            x = postToChange.pop()  \n        y = postFree.pop()\n        ans.append((\"move\", x, y))\n        postMissing.discard(y)\n        if x in preAns:\n            preFree.add(x)\n\nprint(len(ans))\nfor tup in ans:\n    print(*tup)", "def print_all():\n    print(top)\n    print(free_top)\n    print(busy_top)\n    print(bottom)\n    print(free_bottom)\n    print(busy_bottom)\n\nn = int(input())\ntop = set()\nbottom = set()\nfor i in range(n):\n    name, type = input().split()\n    if type == '1':\n        top.add(name)\n    else:\n        bottom.add(name)\n\ntop_order = set(str(i) for i in range(1, len(top) + 1))\nbottom_order = set(str(i) for i in range(len(top) + 1, len(bottom) + len(top) + 1))\nq = top_order & top\ntop_order -= q\ntop -= q\nq = bottom_order & bottom\nbottom_order -= q\nbottom -= q\n\nbusy_top = top_order & bottom\nfree_top = top_order - bottom\nbusy_bottom = bottom_order & top\nfree_bottom = bottom_order - top\n\nif len(top_order) + len(bottom_order) == 0:\n    print(0)\n    return\n\nif len(free_bottom) + len(free_top) == 0:\n    x, y = busy_top.pop(), 'rft330'\n    free_top.add(x)\n    bottom.remove(x)\n    bottom.add(y)\n    print(len(top_order) + len(bottom_order) + 1)\n    print('move', x, y)\nelse:\n    print(len(top_order) + len(bottom_order))\n\ncross_block = min(len(busy_bottom), len(busy_top))\nif len(free_top) > 0 and cross_block > 0:\n    x = free_top.pop()\n    for i in range(cross_block):\n        x, y = busy_bottom.pop(), x\n        top.remove(x)\n        print('move', x, y)\n        x, y = busy_top.pop(), x\n        bottom.remove(x)\n        print('move', x, y)\n    free_top.add(x)\n\ncross_block = min(len(busy_bottom), len(busy_top))\nif len(free_bottom) > 0 and cross_block > 0:\n    x = free_bottom.pop()\n    for i in range(cross_block):\n        x, y = busy_top.pop(), x\n        bottom.remove(x)\n        print('move', x, y)\n        x, y = busy_bottom.pop(), x\n        top.remove(x)\n        print('move', x, y)\n    free_bottom.add(x)\n\nif len(busy_bottom) == 0:\n    for i in range(len(bottom)):\n        print('move', bottom.pop(), free_bottom.pop())\n    free_top |= busy_top\n    busy_top.clear()\n    for i in range(len(top)):\n        print('move', top.pop(), free_top.pop())\nelif len(busy_top) == 0:\n    for i in range(len(top)):\n        print('move', top.pop(), free_top.pop())\n    free_bottom |= busy_bottom\n    busy_bottom.clear()\n    for i in range(len(bottom)):\n        print('move', bottom.pop(), free_bottom.pop())\n"]