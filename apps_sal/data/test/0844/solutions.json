["'''input\n8\n11010111\n'''\nn = int(input())\ns = input()\na = [0]\nd = {0:0}\nfor i in range(n):\n    if s[i] == '1': a.append(a[-1]+1)\n    else: a.append(a[-1]-1)\n    if a[i+1] not in d: d[a[i+1]] = i+1\nans = 0\nfor i in range(1,n+1):\n    ans = max(ans,i-d[a[i]])\nprint(ans)   ", "n = int(input())\ns = input()\n\nmax_subs = 0\nnum0 = 0\nnum1 = 0\ndiffs = {0: 0}\nfor i, x in enumerate(s):\n    if x == '0':\n        num0 += 1\n    else:\n        num1 += 1\n    diff = num0 - num1\n\n    if diff in diffs:\n        subs = i - diffs[diff] + 1\n        if subs > max_subs:\n            max_subs = subs\n    else:\n        diffs[diff] = i + 1\n\nprint(max_subs)\n", "from sys import stdin, stdout\n\nn = int(stdin.readline())\ns = stdin.readline().strip()\ncnt = [[0, 0] for i in range(n)]\n\ncnt[0][1] = int(s[0])\ncnt[0][0] = 1 - int(s[0])\n\nfor i in range(1, n):\n    cnt[i][1] += cnt[i - 1][1] + int(s[i])\n    cnt[i][0] = i + 1 - cnt[i][1]\n\ncnt.append([0, 0])\n\nans = 0\nfor i in range(n):\n    value = int(s[i])\n    current = i + ans\n    \n    while current < n:\n        if max(cnt[current][1] - cnt[i - 1][1], cnt[current][0] - cnt[i - 1][0]) != min(cnt[current][1] - cnt[i - 1][1], cnt[current][0] - cnt[i - 1][0]):\n            current += (max(cnt[current][1] - cnt[i - 1][1], cnt[current][0] - cnt[i - 1][0]) - min(cnt[current][1] - cnt[i - 1][1], cnt[current][0] - cnt[i - 1][0]))\n        else:\n            ans = max(ans, current - i + 1)\n            current += 1\n\nstdout.write(str(ans))", "from itertools import accumulate\n\nn=int(input())\nl=list(accumulate([2*int(c)-1 for c in input()]))\nm=[None]*(2*n + 1)\nm[n]=-1\na=0\nfor i,b in enumerate(l):\n    if m[n+b] is None:\n        m[n+b]=i\n    else:\n        a=max(a,i-m[n+b])\nprint(a)\n", "from itertools import accumulate\n\nn=int(input())\nl=accumulate([2*int(c)-1 for c in input()])\nm=[None]*(2*n+1)\nm[n]=-1\na=0\nfor i,b in enumerate(l):\n    if m[n+b] is None:\n        m[n+b]=i\n    else:\n        a=max(a,i-m[n+b])\nprint(a)\n", "n = int(input())\ns = input()\n\nbal = 0\narr = [0]*(n + 1)\nlastseen = {0: 0}\n\narr[0] = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        bal += 1\n    else:\n        bal -= 1\n\n    lastseen[bal] = i\n    arr[i] = bal\n\nans = 0\nfor i in range(n + 1):\n    if lastseen[arr[i]] != i:\n        ans = max(ans, lastseen[arr[i]] - i)\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\n\n\"\"\"\ncreated by shhuan at 2017/10/12 22:12\n\n\"\"\"\n\nn = int(input())\ns = input()\n# n = 100000\n# s = ''\n# for i in range(n):\n#     x = random.randint(1, 10)\n#     if x >= 5:\n#         s += '1'\n#     else:\n#         s += '0'\n#\n# t0 = time.time()\n\n# n = 8\n# s = '11010111'\n\nones = [0] * (n+1)\nfor i in range(1, n+1):\n    ones[i] = ones[i-1]\n    ones[i] += s[i-1] == '1'\nones = [2*x for x in ones]\nones = [(x-i, i) for i,x in enumerate(ones)]\n\nds = collections.defaultdict(list)\nfor d, i in ones:\n    ds[d].append(i)\n\n# print(ones)\n# print(ds)\nans = 0\nfor k, v in list(ds.items()):\n    ans = max(ans, max(v)-min(v))\n\nprint(ans)\n# print(time.time() - t0)\n\n\n", "from itertools import accumulate\nn=int(input())\nm={0:-1}\na=0\nfor i,b in enumerate(accumulate([2*int(c)-1 for c in input()])):\n    x=m.get(b)\n    if x is None:\n        m[b]=i\n    else:\n        a=max(a,i-x)\nprint(a)\n", "'''input\n8\n00001111\n'''\n\nn = int(input())\ns = input()\n\nbal = n\nfirstseen = [-1]*((n * 2) + 1)\nfirstseen[n] = 0\n\nans = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        bal += 1\n    else:\n        bal -= 1\n\n    if firstseen[bal] != -1:\n        ans = max(ans, i - firstseen[bal])\n    else:\n        firstseen[bal] = i\n\nprint(ans)\n", "from itertools import accumulate\nn=int(input())\nd={0:-1}\na=0\nfor i,b in enumerate(accumulate([2*int(c)-1 for c in input()])):\n    x=d.get(b,i)\n    d[b]=x\n    a=max(a,i-x)\nprint(a)\n", "from itertools import accumulate\nn=int(input())\nd={0:-1}\na=0\nfor i,b in enumerate(accumulate([2*int(c)-1 for c in input()])):\n    d[b]=d.get(b,i)\n    a=max(a,i-d[b])\nprint(a)\n", "from itertools import accumulate\nn=int(input())\nd={0:-1}\na=0\nfor i,b in enumerate(accumulate([2*int(c)-1 for c in input()])):\n    d[b]=x=d.get(b,i)\n    a=max(a,i-x)\nprint(a)\n", "n, s = int(input()), input()\nd, o, z = dict([((0, 0), -1)]), 0, 0\nans = 0\nfor i in range(len(s)):\n    o += int(s[i] == '1')\n    z += int(s[i] == '0')\n    tp = (o - min(o, z), z - min(o, z))\n    if tp in list(d.keys()):\n        ans = max(ans, i - d[tp])\n    else:\n        d[tp] = i\nprint(ans)\n", "n=int(input())\nd={0:-1}\na=b=0\nfor i,c in enumerate(input()):\n    b+=2*int(c)-1\n    d[b]=x=d.get(b,i)\n    a=max(a,i-x)\nprint(a)\n", "input()\nd={0:-1}\na=b=0\nfor i,c in enumerate(input()):\n    b+=2*int(c)-1\n    d[b]=x=d.get(b,i)\n    a=max(a,i-x)\nprint(a)\n", "input()\nd={0:-1}\na=b=0\nfor i,c in enumerate(input()):\n    b+=2*int(c)-1\n    d[b]=x=d.get(b,i)\n    a=max(a,i-x)\nprint(a)", "l=int(input())\nd=input()\nsums=[]\ndp=[-1]*(l+1)\ndp[0]=0\nsums.append(0)\nmlen=0\nfor i in range(1,l+1):\n  sums.append(sums[-1]+2*int(d[i-1])-1)\n  if dp[sums[-1]]==-1:\n     dp[sums[-1]]=i\n  else:\n    mlen=max(mlen,i-dp[sums[-1]])\nprint(mlen)", "from collections import Counter\n\nN=int(input())\nnums=input().strip()\ncurrent_sum=0\ndict={0:0}\nans=0\n\nfor i in range(1,N+1):\n\n    current_sum+=(1 if nums[i-1] =='1' else -1)\n    if current_sum not in dict:\n        dict[current_sum]=i\n    else:\n        l = i - dict[current_sum]\n        ans =max(ans,l)\n    #print(i ,current_sum,dict,ans)\n\nprint(ans)\n", "def f(s):\n\n\n  if (len(s) == 1): \n    return 0\n\n  i = len(s)//2\n\n  n = get_max(s, i)\n\n  return max(n, max(f(s[0:i]), f(s[i:len(s)])))\n\n\n\ndef get_max(s, i):\n\n  j = i-1\n  n0 = 0\n  n1 = 0\n\n  length = 0\n\n  lmap = {}\n\n  while(j >= 0):\n    if s[j] == '0': n0 += 1\n    if s[j] == '1': n1 += 1\n    length += 1\n    lmap[n1-n0] = length\n    j -= 1\n\n  j = i\n  n0 = 0\n  n1 = 0\n \n  length = 0\n\n  m = 0\n\n  while(j < len(s)):\n    if s[j] == '0': n0 += 1\n    if s[j] == '1': n1 += 1\n    length += 1\n    if((n0-n1) in lmap):\n      m = max(m, length+lmap[n0-n1])\n    j += 1\n\n  return m\n\nn = input()\ns = input()\n\nprint(f(s))\n", "\n# coding: utf-8\n\n# In[2]:\n\n\nimport sys\n\n\n# In[3]:\n\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip()\n\n\n# In[53]:\n\n\nbalance_max_pos = {}\n\nbalance = 0\nfor i, c in enumerate(s):\n    if c == '1':\n        balance += 1\n    else:\n        balance -= 1\n    \n    balance_max_pos[balance] = i\n\n\n# In[58]:\n\n\nans = 0\nbalance = 0\nif balance in balance_max_pos:\n    ans = max(balance_max_pos[balance] + 1, ans)\n\nfor i, c in enumerate(s):\n    if c == '1':\n        balance += 1\n    else:\n        balance -= 1\n    \n    if balance in balance_max_pos:\n        ans = max(balance_max_pos[balance] - i, ans)\n\n\n# In[59]:\n\n\nprint(ans)\n\n\n# In[46]:\n\n# In[ ]:\n\n\n\n\n", "_ = input()\nstring = input()\nlasts = {\n0: -1\n}\ncurr_count = 0\nbest_best = 0\nfor idx, x in enumerate(string):\n    if x == '1':\n        curr_count += 1\n    else:\n        curr_count -= 1\n    if curr_count in lasts:\n        curr_best = idx - lasts[curr_count]\n        if curr_best > best_best:\n            best_best = curr_best\n    else:\n        lasts[curr_count] = idx\nprint(best_best)\n\n\"\"\"\nFirst try - Try to use something like binary search to find the length of the substring.\nSadly, this does not work,\n    as knowing that the maximum possible substring length is 8 and having a valid substring of length 4 does not guarantee that we have a substring of length 6\n    e.g 00111100\n\"\"\"\n\"\"\"\n_ = input()\nstring = input()\nstr_len = len(string)\none_count, zero_count = 0, 0\ncounts_by_idx = {}\nfor idx, x in enumerate(string):\n    if x == '1':\n        one_count += 1\n    else:\n        zero_count += 1\n    counts_by_idx[idx] = {'0': zero_count, '1': one_count}\n\nmaximum_substring_length = min(zero_count, one_count) * 2\nprint(maximum_substring_length)\ncurr_best = 0\n\nlower_bound = 0\ncurrent_search = maximum_substring_length // 2\nupper_bound = maximum_substring_length\n\n\ndef srch(lower_bound, current_search, upper_bound):\n    nonlocal curr_best\n    for start_idx in range(str_len-current_search):\n        end_idx = start_idx + current_search\n        zero_count = counts_by_idx[end_idx]['0'] - counts_by_idx[start_idx]['0']\n        one_count = counts_by_idx[end_idx]['1'] - counts_by_idx[start_idx]['1']\n        if one_count == zero_count:\n            # Try to go up\n            curr_best = zero_count * 2\n            new_search = current_search + ((upper_bound - current_search) // 2)\n            return current_search, new_search, upper_bound\n\n    new_search = lower_bound + ((current_search - lower_bound) // 2)\n    return lower_bound, new_search, current_search\n\n\nwhile True:\n    lower_bound, current_search, upper_bound = srch(lower_bound, current_search, upper_bound)\n\"\"\"", "n=int(input())\nstrs=input()\ncounta=[]\ncountb=[]\nno1=0\nno0=0\ni=0\nwhile(i<len(strs)):\n    if(strs[i]=='1'):\n        no1+=1\n    else:\n        no0+=1\n    counta.append(no1)\n    countb.append(no0)\n    i+=1\nhashd=dict()\nhashd[0]=[-1]\ni=0\nmaxm=0\nwhile(i<len(strs)):\n    if((counta[i]-countb[i]) in hashd):\n        hashd[(counta[i]-countb[i])].append(i)\n        if(i-hashd[(counta[i]-countb[i])][0]>maxm):\n            maxm=i-hashd[(counta[i]-countb[i])][0]\n    else:\n        hashd[counta[i]-countb[i]]=[i]\n    i+=1\nprint(maxm)\n", "n = int(input())\nl = [-2] * (n * 2 + 1)\nl[n], r = -1, 0\nfor i, c in enumerate(input()):\n    n += ord(c) * 2 - 97\n    if l[n] == -2:\n        l[n] = i\n    else:\n        i -= l[n]\n        if r < i:\n            r = i\nprint(r)", "n = int(input())\nl = [-2] * (n * 2 + 1)\nl[n], r = -1, 0\nfor i, c in enumerate(input()):\n    n += {'0': -1, '1': 1}[c]\n    if l[n] == -2:\n        l[n] = i\n    else:\n        i -= l[n]\n        if r < i:\n            r = i\nprint(r)", "n = int(input())\nx = input()\ns = ''.join(['0', x, '1'])\ns1 = ''.join(['1', x, '0'])\n# s = input()\n\ndef get_max(s):\n\tnet_count = 0\n\tcurrent_max = 0\n\tmp = {}\n\tfor (i, item) in enumerate(s):\n\t\tif item == '0':\n\t\t\tnet_count -= 1\n\t\telif item == '1':\n\t\t\tnet_count += 1\n\t\tif (mp.get(net_count, None) == None):\n\t\t\tmp[net_count] = i\n\t\telse:\n\t\t\tdist = i - mp[net_count]\n\t\t\tif dist > current_max:\n\t\t\t\tcurrent_max = dist\n\treturn current_max\n\nprint(min(get_max(s), get_max(s1)))"]