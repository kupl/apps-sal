["# coding: utf-8\n# Your code here!\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn, = map(int,input().split())\n*a, = map(int,input().split())\n\nif all(i <= 0 for i in a):\n    m = max(a)\n    idx = a.index(m)\n    print(m)\n    print(n-1)\n    for i in range(idx):\n        print(1)\n    for i in range(n-idx-1):\n        print(n-idx-i)\n    return\n\neven = a[::2]\nodd = a[1::2]\n\nse = sum(i for i in even if i > 0)\nso = sum(i for i in odd  if i > 0)\n\nres = []\nif se < so:\n    res.append(1)\n    a.pop(0)\n    n -= 1\n# 0,2,4,6,....-th \u304b\u3089\nif len(a)%2==0:\n    res.append(n)\n    a.pop()\n    n -= 1\nwhile len(a) > 1:\n    n = len(a)\n    if a[-1] <= 0:\n        res.append(n)\n        a.pop()\n        res.append(n-1)\n        a.pop()\n    else:\n        if a[-3] > 0:\n            res.append(n-1)\n            a[-3] += a[-1]\n            a.pop()\n            a.pop()\n        else:\n            if len(a) == 3:\n                res += [1,1]\n                a.pop(0)\n                a.pop(0)\n            else:\n                res.append(n-2)\n                a.pop(n-3)\n                a.pop(n-3)\n\n\nassert a[0] == max(se,so)\nprint(max(se,so))\nprint(len(res))\nprint(*res,sep=\"\\n\")\n", "import sys\nN = int(input())\na = [(int(v),i) for i, v in enumerate(input().split())]\nao = sum([v for v, i in a if i%2 and v>0])\nae = sum([v for v, i in a if not i%2 and v>0])\nif max(ao, ae)== 0:\n    ai = a.index(max(a))\n    Ans = [1]*(ai)+list(range(N-ai,1,-1))\n    print(max(a)[0])\n    print(len(Ans))\n    for i in Ans:\n        print(i)\n    return\nif ao >= ae:\n    print(ao)\n    yn = [i for v, i in a if i%2 and v>0]\nelse:\n    print(ae)\n    yn = [i for v, i in a if not i%2 and v>0]\nlistyn = [i in yn for i in range(N)]\nAns = []\nwhile not listyn[0]:\n    Ans.append(1)\n    listyn = listyn[1:]\nwhile not listyn[-1]:\n    Ans.append(len(listyn))\n    listyn = listyn[:-1]\nwhile True:\n    if len(listyn) == 1:\n        break\n    if len(listyn) == [2,3]:\n        Ans.append(2)\n        break\n    if listyn[2]:\n        Ans.append(2)\n        listyn = [True] + listyn[3:]\n    else:\n        Ans.append(3)\n        listyn = [True, False] + listyn[4:]\nprint(len(Ans))\nfor i in Ans:\n    print(i)", "N=int(input())\nA=list(map(int,input().split()))\ndata=[[],[]]\nflag=[[],[]]\nfor i in range(N):\n    data[i%2].append(A[i])\n    flag[0].append(i%2)\n    flag[1].append((i+1)%2)\n\nnum0=0\n\nfor i in range(len(data[0])):\n    u=data[0][i]\n    if u>0:\n        num0+=u\n    else:\n        flag[0][2*i]=1\n\nif num0==0:\n    num0=max(data[0])\n    flag[0]=[1 for i in range(N)]\n    for i in range(len(data[0])):\n        u=data[0][i]\n        if u==num0:\n            flag[0][2*i]=0\n            break\n            \nnum1=0\n\nfor i in range(len(data[1])):\n    u=data[1][i]\n    if u>0:\n        num1+=u\n    else:\n        flag[1][2*i+1]=1\n        \nif num1==0:\n    num1=max(data[1])\n    flag[1]=[1 for i in range(N)]\n    for i in range(len(data[1])):\n        u=data[1][i]\n        if u==num1:\n            flag[1][2*i+1]=0\n            break\n\nif num0>num1:\n    print(num0)\n    H=flag[0]\nelse:\n    print(num1)\n    H=flag[1]\nans=[]\nddd=0\nfor i in range(N):\n    if H[i]==1:\n        ans.append(1)\n        ddd+=1\n    else:\n        H=H[i:]\n        break   \nH=[0]+H\nkkk=N-ddd\nwhile True:\n    if H[kkk]==1:\n        ans.append(kkk)\n        kkk-=1\n    else:\n        break\n\nwhile kkk>0:\n    if H[kkk]==0:\n        kkk-=1\n    else:\n        cnt=0\n        while H[kkk]==1:\n            kkk-=1\n            cnt+=1\n        for j in range((cnt+1)//2,0,-1):\n            ans.append(kkk+j)\n\nprint(len(ans))\nfor u in ans:\n    print(u)", "n = int(input())\na = list(map(int, input().split()))\nuse = [False]*n\nmx = max(a)\nif mx < 0:\n    use[a.index(mx)] = True\nelse:\n    evn = sum(max(i, 0) for i in a[::2])\n    odd = sum(max(i, 0) for i in a[1::2])\n    mx = max(evn, odd)\n    for i in range(int(evn<odd), n, 2):\n        if a[i] > 0:\n            use[i] = True\nprint(mx)\nbeg = 0\nwhile not use[beg]:\n    beg += 1\nres = [1]*beg\nend = n-1\nwhile beg < end:\n    if use[end]:\n        if use[end-2]:\n            a[end-2] += a[end]\n            res.append(end-beg)\n            end -= 2\n            use[end] = True\n        else:\n            res.append(end-beg-1)\n            a[end-2] = a[end]\n            end -= 2\n            use[end] = True\n    else:\n        res.append(end-beg+1)\n        end -= 1\nprint(len(res))\nfor i in res:\n    print(i)", "n = int(input())\na = list(map(int, input().split()))\nmx = max(a)\na[a.index(mx)] = abs(mx)\nevn = sum(max(0, i) for i in a[::2])\nodd = sum(max(0, i) for i in a[1::2])\nif mx < 0:\n    print(mx)\nelse:\n    print((max(evn, odd)))\noe = int(evn < odd)\nres = []\nbeg = 0\nwhile beg%2!=oe or a[beg]<0:\n    res.append(1)\n    beg += 1\nend = n-1\nwhile end%2!=oe or a[end]<0:\n    res.append(end-beg+1)\n    end -= 1\nwhile beg < end:\n    if a[end-2] < 0:\n        res.append(end-beg-1)\n    else:\n        res.append(end-beg)\n    end -= 2\nprint((len(res)))\nfor i in res:\n    print(i)\n", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    even = sum([max(A[i], 0) for i in range(0, N, 2)])\n    odd = sum([max(A[i], 0) for i in range(1, N, 2)])\n\n    if even == odd == 0:\n        a = max(A)\n        print(a)\n        print((N-1))\n        flg = 1\n        for i in range(N-1):\n            if A[i] == a:\n                flg = 0\n            if flg:\n                print((1))\n            else:\n                print((N-i))\n        return\n\n    ans = []\n    i = 0\n    if odd > even:\n        if N % 2 == 1:\n            ans.append(N)\n            N -= 1\n        ans.append(1)\n        i = 1\n    else:\n        if N % 2 == 0:\n            ans.append(N)\n            N -= 1\n    flg = 1\n    while True:\n        if flg:\n            if A[i] > 0:\n                flg = 0\n            else:\n                ans.append(1)\n                i += 1\n                if i == N:\n                    break\n                ans.append(1)\n                i += 1\n                if i == N:\n                    break\n        else:\n            if A[i+2] > 0:\n                ans.append(2)\n                i += 2\n            else:\n                ans.append(3)\n                i += 2\n            if i+2 >= N:\n                break\n    if ans[-1] == 3:\n        ans.append(2)\n    print((max(odd, even)))\n    print((len(ans)))\n    for x in ans:\n        print(x)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input()) \nA = list(map(int,input().split()))\n\nDP = [(a, -1) for a in A]\n\nfor i in range(N):\n  for j in range(i+2, N, 2):\n    val_nxt = DP[i][0] + A[j]\n    if DP[j][0] < val_nxt:\n      DP[j] = (val_nxt, i)\n    \ntmp = -10**20\ni_max = -1\nfor j, dp in enumerate(DP):\n  if dp[0] > tmp:\n    tmp = dp[0]\n    i_max = j\nprint(tmp)\n#print(DP)\n#print(i_max)\npath = []\ni = i_max\nwhile i >= 0:\n  path.append(i)\n  _, i = DP[i]\n  \npath.reverse()\n\nsft = 0\nans = []\nfor _ in range(path[0]):\n  ans.append(0)\nsft += path[0]\nfor j in range(1,len(path)):\n  i_prv = path[j-1]\n  d = path[j] - path[j-1]\n  for _ in range((d-1)//2):\n    ans.append(i_prv+2-sft)\n  ans.append(i_prv+1-sft)\n  sft += d\nfor j in range(N-1,path[-1],-1):\n  ans.append(j-sft)\n#print(path)    \n\nans = [a+1 for a in ans]\nprint(len(ans))\nprint(*ans, sep=\"\\n\")\n  \n  ", "import sys\ninput = sys.stdin.readline\nimport numpy as np\n\n# \u5947\u6570\u756a\u76ee\u3001\u307e\u305f\u306f\u5076\u6570\u756a\u76ee\u3001\u306e\u597d\u304d\u306a\u90e8\u5206\u96c6\u5408\u3092\u8db3\u305b\u308b\uff08\u305f\u3060\u30571\u5143\u4ee5\u4e0a\uff09\n# \u4ea4\u4e92\u306b\u5857\u308a\u5206\u3051\u308b\u3068\u4ea4\u4e92\u304c\u7dad\u6301\u3055\u308c\u308b\u3053\u3068\u304b\u3089\u5206\u304b\u308b\n\nN = int(input())\nA = np.array(input().split(), dtype=np.int64)\n\ndef select_operation(select,N):\n    result = []\n    # \u4f59\u5206\u306a\u5de6\u7aef\n    x = select.min()\n    result = [0] * x\n    select -= x\n    N -= x\n    # \u4f59\u5206\u306a\u53f3\u7aef\n    y = select.max()\n    result += list(range(N-1,y,-1))\n    N = y + 1\n    # \u53f3\u304b\u3089\u898b\u3066\u3001\u8981\u3089\u306a\u3044\u5076\u6570\u3092\u9664\u5916\n    result += np.setdiff1d(np.arange(N)[::2], select)[::-1].tolist()\n    # 0,2,4,...\u756a\u76ee\u3092\u96c6\u7d04\n    result += [1] * (len(select) - 1)\n    result = [1+x for x in result]\n    return result\n\nev_sum = np.maximum(0,A[::2]).sum()\nod_sum = np.maximum(0,A[1::2]).sum()\nif ev_sum >= od_sum > 0:\n    select = np.where(A[::2] >= 0)[0] * 2\nelif od_sum > 0:\n    select = np.where(A[1::2] >= 0)[0] * 2 + 1\nelse:\n    n = np.argmax(A)\n    select = np.array([n])\nS = A[select].sum()\n\nope = select_operation(select,N)\n\n# \u7b54\u3048\u306e\u51fa\u529b\nprint(S)\nprint(len(ope))\nprint('\\n'.join(map(str,ope)))\n\nselect", "\ndef main1(n,a):\n  # n\u500b\u306e\u6570\u5b57\u3002\u30d1\u30bf\u30fc\u30f31\u306e\u64cd\u4f5c\u30671\u500b\u6e1b\u308b\u3002\u30d1\u30bf\u30fc\u30f32\u306e\u64cd\u4f5c\u30672\u500b\u6e1b\u308b\n  # n<=2000\n  # \u30d1\u30bf\u30fc\u30f31\u3060\u3051\u3059\u308b\u3068\u304d\u3002max(a)\u304c\u6700\u5927\n  # \u30d1\u30bf\u30fc\u30f32\u30921\u56de\u3059\u308b\u3068\u304d\u3002max(a)\u304bmax(a[i]+a[i+2])\u304c\u6700\u5927\n  # \u30d1\u30bf\u30fc\u30f32\u30922\u56de\u3059\u308b\u3068\u304d\u3002max(a)\u304bmax(a[i]+a[i+2])\u304bmax(a[i]+a[i+4])\u304bmax(a[i]+a[i+2]+a[i+4])\u304c\u6700\u5927\n  # \u30d1\u30bf\u30fc\u30f32\u30923\u56de\u3059\u308b\u3068\u304d\u3002max(a[i]+a[i+6])\u304bmax(a[i]+a[i+4]+a[i+6])max(a[i]+a[i+2]+a[i+6])\u304bmax(a[i]+a[i+2]+a[i+4]+a[i+6])\u304c\u6700\u5927\n  # \u5076\u5947\u304c\u7570\u306a\u308bidx\u306e\u8981\u7d20\u304c\u8db3\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308b\u304b\uff1f\u3000\u306a\u3044\n  # idx\u5947\u6570\u306e\u90e8\u5206\u548c\u3067\u6700\u5927\u3001\u3064\u307e\u308a\u3001\u8ca0\u4ee5\u5916\u3059\u3079\u3066\u8db3\u3059\u3002\u3053\u308c\u3092\u5076\u6570\u3067\u3082\u3059\u308b\n  odary=[]\n  odnum=0\n  evary=[]\n  evnum=0\n  for i,x in enumerate(a):\n    if x<=0:continue\n    if i%2==0:\n      evary.append(i)\n      evnum+=x\n    else:\n      odary.append(i)\n      odnum+=x\n  if odnum==0 and evnum==0:\n    mv,mi=a[0],0\n    for i,x in enumerate(a):\n      if mv<x:\n        mv=x\n        mi=i\n    ret=mv\n    ary=[mi]\n  elif odnum>evnum:\n    ret=odnum\n    ary=odary\n  else:\n    ret=evnum\n    ary=evary \n  retary=[]\n  m=n\n  #print(ary)\n  for i in reversed(range(len(ary)-1)):\n    t=ary[i+1]-ary[i]\n    t//=2\n    for j in range(t):\n      retary.append((ary[i+1]+ary[i])//2-j+1)\n      m-=2\n  for _ in range(ary[0]):\n    retary.append(1)\n    m-=1\n  for _ in range(n-1-ary[-1]):\n    retary.append(m)\n    m-=1\n  return ret,retary\n\ndef __starting_point():\n  n=int(input())\n  a=list(map(int,input().split()))\n  ret1=main1(n,a)\n  print(ret1[0])\n  print(len(ret1[1]))\n  print(*ret1[1],sep='\\n')\n\n__starting_point()", "from collections import deque\nN=int(input())\nAs=[int(i) for i in input().split()]\nneg_odd,neg_even=deque([]),deque([])\nS_odd,S_even=0,0\nfor i,A in enumerate(As):\n  if i%2==0:\n    if A>=0:\n      S_even+=A\n    else:\n      neg_even.append(i)\n  if i%2==1:\n    if A>=0:\n      S_odd+=A\n    else:\n      neg_odd.append(i)\nans=[]\nA_size=N\nif S_odd==S_even==0:\n  a=max(As)\n  print(a)\n  i=0\n  while As[i]!=a:\n    ans.append(1)\n    i+=1\n    A_size-=1\n  while A_size>1:\n    ans.append(A_size)\n    A_size-=1\nelif S_odd<=S_even:\n  print(S_even)\n  if N%2==0:\n    ans.append(N)\n    A_size-=1\n  if neg_even:\n    t=0\n    while A_size-1==neg_even[-1]:\n      neg_even.pop()\n      ans.append(A_size)\n      ans.append(A_size-1)\n      A_size-=2\n      if not neg_even:\n        break\n    if neg_even:\n      while t==neg_even[0]:\n        neg_even.popleft()\n        ans.append(1)\n        ans.append(1)\n        t+=2\n        A_size-=2\n        if not neg_even:\n          break\n    for a in neg_even:\n      ans.append(a+1-t)\n      A_size-=2\n      t+=2\n  while A_size>1:\n    ans.append(2)\n    A_size-=2\nelse:\n  print(S_odd)\n  if N%2==1:\n    ans.append(N)\n    A_size-=1\n  ans.append(1)\n  A_size-=1\n  if neg_odd:\n    t=1\n    while A_size==neg_odd[-1]:\n      neg_odd.pop()\n      ans.append(A_size)\n      ans.append(A_size-1)\n      A_size-=2\n      if not neg_odd:\n        break\n    if neg_odd:\n      while t==neg_odd[0]:\n        neg_odd.popleft()\n        ans.append(1)\n        ans.append(1)\n        t+=2\n        A_size-=2\n        if not neg_odd:\n          break\n    for a in neg_odd:\n      ans.append(a-t+1)\n      A_size-=2\n      t+=2\n  while A_size>1:\n    ans.append(2)\n    A_size-=2\nprint(len(ans))\nfor a in ans:\n  print(a)", "n = int(input())\na = list(map(int, input().split()))\nmx = max(a)\na[a.index(mx)] = abs(mx)\nevn = sum(max(0, i) for i in a[::2])\nodd = sum(max(0, i) for i in a[1::2])\nif mx < 0:\n    print(mx)\nelse:\n    print(max(evn, odd))\noe = int(evn < odd)\nres = []\nbeg = 0\nwhile beg%2!=oe or a[beg]<0:\n    res.append(1)\n    beg += 1\nend = n-1\nwhile end%2!=oe or a[end]<0:\n    res.append(end-beg+1)\n    end -= 1\nwhile beg < end:\n    if a[end-2] < 0:\n        res.append(end-beg-1)\n    else:\n        res.append(end-beg)\n    end -= 2\nprint(len(res))\nfor i in res:\n    print(i)", "def main():\n    from itertools import accumulate\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = (n+1) // 2\n    m1 = sum([max(i, 0) for i in a[::2]])\n    m2 = sum([max(i, 0) for i in a[1::2]])\n    m = max(m1, m2)\n    if max(a) < 0:\n        m = max(a)\n    flag = False\n    ans = []\n    if m == m1 or m == m2:\n        if m2 == m:\n            n -= 1\n            h = (n+1)//2\n            a.pop(0)\n            ans.append(1)\n        for i in range(h):\n            if a[2*i] < 0:\n                if flag == False:\n                    ans.append(1)\n                    ans.append(1)\n                else:\n                    ans.append(3)\n            else:\n                if flag:\n                    ans.append(2)\n                else:\n                    flag = True\n        if ans[-1] == 3 or n%2 == 0:\n            ans.append(2)\n    else:\n        for i in range(n):\n            if a[i] != m:\n                ans.append(1)\n            else:\n                for j in range(n-i, 1, -1):\n                    ans.append(j)\n                break\n    print(m)\n    print((len(ans)))\n    for i in ans:\n        print(i)\n\n    \n\nmain()\n", "\n\"\"\"\nWriter: SPD_9X2\nhttps://atcoder.jp/contests/arc092/tasks/arc092_c\n\n\u5bc4\u4e0e\u3092\u6b8b\u305b\u308b\u8981\u7d20\u3063\u3066\u3069\u3093\u306a\u96c6\u5408\uff1f\n\n\u2192\u5c11\u306a\u304f\u3068\u3082\u9023\u7d9a\u3059\u308b2\u3064\u306f\u7d76\u5bfe\u6b8b\u305b\u306a\u3044\n\u2192\u6b8b\u305b\u308b\u306e\u306f\u3001\u5076\u6570\u756a\u76ee or \u5947\u6570\u756a\u76ee\u3000\u306e\u307f\uff1f\n\n\u2192\u5c11\u306a\u304f\u3068\u3082\u3001\u5076\u5947\u304c\u9055\u3046\u4e8c\u3064\u306e\u8981\u7d20\u3092\u540c\u6642\u306b\u6b8b\u3059\u65b9\u6cd5\u306f\u898b\u5f53\u305f\u3089\u306a\u3044\n\n\u69cb\u7bc9\u2192\u53f3\u7aef\u304b\u3089\u69cb\u7bc9\u3057\u3066\u3044\u304f\u306e\u304c\u697d\uff1f(index\u304c\u5909\u5316\u3057\u306a\u3044\u306e\u3067)\n\u5f8c\u308d\u304b\u3089\u898b\u3066\u3044\u3063\u3066\u3001\u53d6\u3089\u306a\u3044\u3068\u6c7a\u3081\u305find\u3068\u3001\u53d6\u308b\u3068\u6c7a\u3081\u305f\u3084\u3064+1\u3092\u9078\u3093\u3067\u3044\u3051\u3070\u3088\u3044\n\n\u5168\u3066\u8ca0\u306e\u6642\u306f\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\n\"\"\"\n\nimport sys\nN = int(input())\n\na = list(map(int,input().split()))\n\nesum = 0\nosum = 0\n\nif max(a) < 0:\n    #\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\n\n    maxind = 0\n    for i in range(N):\n        if a[maxind] < a[i]:\n            maxind = i\n\n    rem = N\n    print((a[maxind]))\n    print((N-1))\n    for i in range(maxind):\n        print((1))\n        rem -= 1\n    while rem != 1:\n        print (rem)\n        rem -= 1\n    return\n\neve = 0\neflag = [False] * N\nepicks = []\nodd = 0\noflag = [False] * N\nopicks = []\nfor i in range(N):\n\n    if i % 2==0 and a[i] >= 0:\n        eflag[i] = True\n        eve += a[i]\n        epicks.append(i)\n    if i % 2==1 and a[i] >= 0:\n        oflag[i] = True\n        odd += a[i]\n        opicks.append(i)\n\nif eve > odd:\n\n    print (eve)\n    ans = []\n\n    for i in range(N-1,-1,-1):\n\n        if i < epicks[0]:\n            ans.append(1)\n        elif i % 2 == 0 and eflag[i] == False:\n            ans.append(i+1)\n        elif i % 2 == 1 and eflag[i-1] == True:\n            ans.append(i+1)\n\n    print((len(ans)))\n    print((\"\\n\".join(map(str,ans))))\n\nelse:\n\n    print (odd)\n    ans = []\n\n    for i in range(N-1,-1,-1):\n\n        if i < opicks[0]:\n            ans.append(1)\n        elif i % 2 == 1 and oflag[i] == False:\n            ans.append(i+1)\n        elif i % 2 == 0 and oflag[i-1] == True:\n            ans.append(i+1)\n\n    print((len(ans)))\n    print((\"\\n\".join(map(str,ans))))\n    \n"]