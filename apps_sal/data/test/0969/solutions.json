["def solve(s,t):\n    hash_s = [False] * 256\n    hash_t = [False] * 256\n    arr = []\n    n = len(s)\n    for c in s:\n        hash_s[ord(c)] = True\n    for c in t:\n        hash_t[ord(c)] = True\n    for i in range(256):\n        if not hash_s[i] and hash_t[i]:\n            print(-1)\n            return\n    rev = s[::-1]\n    i,j = 0,0\n    while i < len(t):\n        flag = True\n        temp = t[i]\n        j = i + 1\n        while j < len(t):\n            temp += t[j]\n            if temp not in s and temp not in rev:\n                flag = False\n                break\n            j += 1\n        if flag:\n            x = s.find(temp)\n            if x != -1:\n                arr.append((x + 1,x + len(temp)))\n                # print('1',x + 1,x + len(temp))\n            else:\n                y = rev.find(temp)\n                arr.append((n - y,n - y - len(temp) + 1))\n                # print('2',n - y,n - y - len(temp) + 1)\n        else:\n            x = s.find(temp[:-1])\n            if x != -1:\n                arr.append((x + 1,x + len(temp) - 1))\n                # print('3',x + 1,x + len(temp) - 1)\n            else:\n                x = rev.find(temp[:-1])\n                arr.append((n - x,n - x - len(temp) + 2))\n                # print('4',n - x,n - x - len(temp) + 2)\n        i = j\n    print(len(arr))\n    for x,y in arr:\n        print(x,y)\n\ns = input()\nt = input()\n\nsolve(s,t)\n", "import sys\n\ns = input()\ns_reverse = s[::-1]\nt = input()\n\nfirst = []\nsecond = []\n\npos = 0\n\ndef find_str(st, char):\n    index = 0\n    if char in st:\n        # print(\"===\")\n        c = char[0]\n        for ch in st:\n            if ch == c:\n                if st[index:index+len(char)] == char:\n                    return index\n            index += 1\n            # print (index)\n    return -1\n\nwhile pos < len(t):\n\tsubstr = t[pos:pos + 1]\n\tif substr not in s and substr not in s_reverse:\n\t\tprint(\"-1\")\n\t\treturn\n\tstep = 1\n\twhile substr in s or substr in s_reverse:\n\t\tstep += 1\n\t\tsubstr = t[pos:(pos + step)]\n\t\t# print(\"substr %s\" % substr)\n\t\tif pos + step > len(t):\n\t\t\tbreak\n\tstep -= 1\n\tsubstr = t[pos:(pos + step)]\n\tstart = find_str(s, substr)\n\t# print (\"debug %d %d %d\" % (pos, step, start))\n\tif start == -1:\n\t\tstart = find_str(s_reverse, substr)\n\t\t# print (\"newstart: %d\" % start)\n\t\t# print(\"substr %s\" % substr)\t\n\t\tfirst.append(len(s) - start)\n\t\tsecond.append(len(s) - (start + step - 1))\n\telse:\n\t\tfirst.append(start + 1)\n\t\tsecond.append(start + step)\n\tpos = pos + step\n\t# print (\"last %d %d\" %(len(t), pos))\n\nprint(len(first))\nfor a, b in zip(first, second):\n\tprint(\"%d %d\" % (a, b))\n\n# x = input(\"ccc\")\n\n", "import sys\ns = input()\nl = len(s)\ns_r = s[::-1]\nt = input()\nlent = len(t)\nres = 0\ntracks = []\nstep = 0    \nwhile step < lent:\n    if t[step:step+1] not in s:\n        print(-1)\n        return\n        \n    plus = 1\n    while (t[step:step+plus] in s or t[step:step+plus] in s_r) and step + plus < lent+1:\n        plus+=1\n        \n    \n    if t[step:step+plus-1] in s:\n        x = s.find(t[step:step+plus-1])\n        #print(x, t[step:step+plus-1],step)\n        tracks.append((x+1, x + plus-1))\n    else:\n        x = s_r.find(t[step:step+plus-1])\n       # print(x, t[step:step+plus-1])\n        tracks.append((l-x, l-x-plus+2))\n    res+=1\n    step+=plus-1\n    \nprint(res)\nfor a, b in tracks:\n    print(a, b)", "s = input()\nt = input()\nrevS = s[::-1]\nn = len(s)\ncur=1\nstart=-1\nend=-1\nrevFlag=0\nerrFlag=0\ni=0\nres=[]\nwhile i < len(t):\n    if s.find(t[i:i+cur]) != -1 and i+cur <= len(t) and s.find(t[i:i+cur]) + cur <= n:\n        start = s.find(t[i:i+cur]) + 1\n        end = start + cur - 1\n        cur += 1\n    elif revS.find(t[i:i+cur]) != -1 and i+cur <= len(t)  and revS.find(t[i:i+cur]) + cur <= n:\n        start = n - revS.find(t[i:i+cur])\n        end = start - cur + 1\n        cur += 1\n    else:\n        if (start == -1 and end == -1) and (s.find(t[i:i+cur]) == -1 and revS.find(t[i:i+cur]) == -1):\n            errFlag = 1\n            break\n        i += cur - 1\n        cur = 1\n        res.append(str(start) + \" \" + str(end))\n        start = -1\n        end = -1\n\nif errFlag != 1:\n    print(len(res))\n    for p in res:\n        print(p)\nelse:\n    print(-1)", "from bisect import bisect_left\nfrom functools import cmp_to_key\ndef mp():  return list(map(int,input().split()))\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\ndef printlist(l): print(''.join([str(x) for x in l]))\ndef listring(l): return ''.join([str(x) for x in l])\n\ns = input()\nt = input()\ns_rev = s[::-1]\n\ndef check(st,substr):\n    index = 0\n    if substr in st:\n        c = substr[0]\n        while index < len(st) - len(substr) + 1:\n            if st[index] == c:\n                if st[index:index+len(substr)] == substr:\n                    return index\n            index += 1\n    return -1\n\npos = 0\nL = []\nwhile pos < len(t):\n    substr = t[pos:pos+1]\n    if substr not in s and substr not in s_rev:\n        print(-1)\n        return\n    index = 1\n    while t[pos:pos+index] in s or t[pos:pos+index] in s_rev:\n        index += 1\n        if pos + index > len(t):\n            break\n    index -= 1\n    substr = t[pos:pos+index]\n    if check(s,substr) == -1:\n        start = len(s)-1-check(s_rev,substr)\n        end = start - index + 1\n    else:\n        start = check(s,substr)\n        end = start + index - 1\n    L.append((start+1,end+1))\n    pos += index\n\nprint(len(L))\nfor i in L:\n    print(\"%d %d\" % (i[0],i[1]))\n", "def find_max_substr(t, s):\n    l, r = 0, len(t)\n    while l != r:\n        m = (l + r) // 2\n        if t[:m + 1] in s:\n            l = m + 1\n        else:\n            r = m\n    l1 = l\n    rs = s[::-1]\n    l, r = 0, len(t)\n    while l != r:\n        m = (l + r) // 2\n        if t[:m + 1] in rs:\n            l = m + 1\n        else:\n            r = m\n    l2 = l\n    if l1 >= l2:\n        return s.find(t[:l1]) + 1, s.find(t[:l1]) + l1\n    else:\n        return s.find(t[:l2][::-1]) + l2, s.find(t[:l2][::-1]) + 1\n\ns = input()\nt = input()\nif not set(t).issubset(set(s)):\n    print(-1)\n    return\na = []\nwhile t:\n    l, r = find_max_substr(t, s)\n    a.append((l, r))\n    t = t[abs(r - l) + 1:]\nprint(len(a))\nfor l, r in a:\n    print(l, r)\n", "s, t = input(), input()\np, d = [], [[] for i in range(26)]\nfor i, q in enumerate(s): d[ord(q) - 97].append(i)\ni, n = 0, len(t)\ns += '+'\nt += '-'\nwhile i < n:\n    q = t[i]\n    a = b = c = 0\n    for j in d[ord(q) - 97]:\n        k = 1\n        while t[i + k] == s[j + k]: k += 1\n        if k > a: a, b, c = k, j + 1, 1\n        k = 1\n        while t[i + k] == s[j - k]: k += 1\n        if k > a: a, b, c = k, j + 1, -1\n    if not a:\n        print(-1)\n        return\n    i += a\n    p.append((b, b + c * a - c))\nprint(len(p))\nfor i, j in p: print(i, j)", "a, t = input(), input() + ' '\nb = a[::-1]\ns, p = '', []\nfor q in t:\n    d = s\n    s += q\n    if s in a or s in b: continue\n    if d in a:\n        k = a.find(d)\n        p += [(k + 1, k + len(d))]\n    elif d in b:\n        k = b.rfind(d)\n        p += [(len(a) - k, len(a) - k - len(d) + 1)]\n    else:\n        print(-1)\n        return\n    s = q\nprint(len(p))\nfor i, j in p: print(i, j)", "def find_max_substr(t, s):\n\n    l, r = 0, len(t)\n\n    while l != r:\n\n        m = (l + r) // 2\n\n        if t[:m + 1] in s:\n\n            l = m + 1\n\n        else:\n\n            r = m\n\n    l1 = l\n\n    rs = s[::-1]\n\n    l, r = 0, len(t)\n\n    while l != r:\n\n        m = (l + r) // 2\n\n        if t[:m + 1] in rs:\n\n            l = m + 1\n\n        else:\n\n            r = m\n\n    l2 = l\n\n    if l1 >= l2:\n\n        return s.find(t[:l1]) + 1, s.find(t[:l1]) + l1\n\n    else:\n\n        return s.find(t[:l2][::-1]) + l2, s.find(t[:l2][::-1]) + 1\n\n\n\ns = input()\n\nt = input()\n\nif not set(t).issubset(set(s)):\n\n    print(-1)\n\n    return\n\na = []\n\nwhile t:\n\n    l, r = find_max_substr(t, s)\n\n    a.append((l, r))\n\n    t = t[abs(r - l) + 1:]\n\nprint(len(a))\n\nfor l, r in a:\n\n    print(l, r)\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "s1 = input()\ns= input()+'.'\ns2=s1[::-1]\nl=len(s)\nll=len(s1)\na=''\nlis=[]\nfor i in range(l):\n    v=a+s[i]\n    if v in s1 or v in s2:\n         a=a+s[i]\n    else:\n        if a in s1:\n            k=s1.index(a)+1\n            lis.append([k,k+len(a)-1])\n#            print(s1.index(a),a)\n        elif a in s2:\n            k=s2.index(a)\n            lis.append([ll-k,ll-k-(len(a)-1)])\n#            print(k)\n        else:\n            print(-1)\n            return\n        a=s[i]\nprint(len(lis))                    \nfor i in lis:\n    print(*i)\n"]