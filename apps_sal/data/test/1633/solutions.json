["\"\"\"\nCodeforces Contest 288 Div 2 Problem A\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n    n,m,k = read()\n    board = [[0]*m for _ in range(n)]\n    for i in range(k):\n        x,y = read()\n        x -= 1\n        y -= 1\n        board[x][y] = 1\n        if x > 0 and y > 0 and board[x-1][y-1] and board[x-1][y] and board[x][y-1]:\n            return i+1\n        if x > 0 and y < m-1 and board[x-1][y+1] and board[x-1][y] and board[x][y+1]:\n            return i+1\n        if x < n-1 and y > 0 and board[x+1][y-1] and board[x+1][y] and board[x][y-1]:\n            return i+1\n        if x < n-1 and y < m-1 and board[x+1][y+1] and board[x+1][y] and board[x][y+1]:\n            return i+1\n    return 0\n\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "import sys\nimport math\n\nn, m, k = map(int, input().split())\nfield = []\n\nfor i in range(n + 2):\n    field.append([])\n    for j in range(m + 2):\n        field[i].append(False)\n\nfor ind in range(k):\n    i, j = map(int, input().split())\n    field[i][j] = True\n    for ii in (-1, 1):\n        for jj in (-1, 1):\n            if field[i + ii][j] and field[i][j + jj] and field[i + ii][j + jj]:\n                print(ind + 1)\n                return\n                \nprint(0)", "n,m,k = list(map(int,input().split()))\nl = []\nfor i in range(n+2):\n    l.append([0 for i in range(m+2)])\nans = 0\ndone = 'no'\nfor i in range(k):\n    x,y = list(map(int,input().split()))\n    l[x][y] = 1\n    if done == 'no' and ((l[x][y-1] == 1 and l[x-1][y] == 1 and l[x-1][y-1] == 1) or (l[x][y-1] == 1 and l[x+1][y] == 1 and l[x+1][y-1] == 1) or (l[x-1][y] == 1 and l[x][y+1] == 1 and l[x-1][y+1] == 1) or (l[x+1][y+1] == 1 and l[x+1][y] == 1 and l[x][y+1] == 1)):\n        ans = i+1\n        done = 'yes'\nprint(ans)\n", "def has_rect(mat, step):\n    mat[step[0]][step[1]] = True\n\n    steps = ((0, 0), (0, 1), (1, 0), (1, 1))\n    coefs = ((1, 1), (-1, 1), (1, -1), (-1, -1))\n\n    for c in coefs:\n        for s in steps:\n            x = step[0] + c[0] * s[0]\n            y = step[1] + c[1] * s[1]\n\n            if 0 <= x < len(mat) and 0 <= y < len(mat[0]) and mat[x][y]:\n                continue\n            else:\n                break\n        else:\n            return True\n\n    return False\n\n\nn, m, k = map(int, input().split())\nmat = [[0 for x in range(m)] for x in range(n)]\n\nfor i in range(k):\n    step = tuple(map(int, input().split()))\n    step = (step[0] - 1, step[1] - 1)\n\n    if has_rect(mat, step):\n        print(i + 1)\n        break\nelse:\n    print(0)", "n, m, k = map(int, input().split())\nanswer = [[False for i in range(m)] for i in range(n)]\nflag = False\nfor i in range(k):\n    x, y = map(int, input().split())\n    if x <= n - 1 and y <= m - 1:\n        if answer[x][y]:\n            if answer[x - 1][y] and answer[x][y - 1]:\n                print(i + 1)\n                flag = True\n                break\n    if x - 2 >= 0 and y - 2 >= 0:\n        if answer[x - 2][y - 2]:\n            if answer[x - 1][y - 2] and answer[x - 2][y - 1]:\n                print(i + 1)\n                flag = True\n                break\n    if x - 2 >= 0 and y <= m - 1:\n        if answer[x - 2][y]:\n            if answer[x - 1][y] and answer[x - 2][y - 1]:\n                print(i + 1)\n                flag = True\n                break\n    if x <= n - 1 and y >= 2:\n        if answer[x][y - 2]:\n            if answer[x][y - 1] and answer[x - 1][y - 2]:\n                print(i + 1)\n                flag = True\n                break\n    answer[x - 1][y - 1] = True\n\nfor j in range(i + 1, k):\n    x, y = map(int, input().split())\nif flag == False:\n    print(0)", "R,M,K = [int(x) for x in input().split()]\nmatrix = [[False for j in range(M)] for i in range(R)]\nfor i in range(K):\n    r,c = [int(x)-1 for x in input().split()]\n    matrix[r][c] = True\n    flg = False\n    if r>0 and matrix[r-1][c]:\n        if c>0:\n            if matrix[r-1][c-1] and matrix[r][c-1]:\n                flg = True\n        if c<M-1:\n            if matrix[r-1][c+1] and matrix[r][c+1]:\n                flg = True\n    if r<R-1 and matrix[r+1][c]:\n        if c>0:\n            if matrix[r+1][c-1] and matrix[r][c-1]:\n                flg = True\n        if c<M-1:\n            if matrix[r+1][c+1] and matrix[r][c+1]:\n                flg = True\n    if flg:\n        print(i+1)\n        return\nprint(0)", "n,m,k=input().split(' ')\nn=int(n)\nm=int(m)\nk=int(k)\nmoves=[]\ngrid=[]\ncount=0\nind=0\ndead=False\nfor i in range(k):\n    a,b=input().split(' ')\n    moves.append([int(a),int(b)])\nfor i in range(n):\n    grid.append([])\n    for j in range(m):\n        grid[i].append(0)\nwhile not dead:\n    try:\n        move=moves[count]\n    except IndexError:\n        break\n    else:\n        move=moves[count]\n    count+=1\n    dr1=False\n    dr2=False\n    dr3=False\n    dr4=False\n    grid[move[0]-1][move[1]-1]=1\n    if move[0]>=2 and move[1]<=m-1:\n        dr1=True\n    if move[0]>=2 and move[1]>=2:\n        dr2=True\n    if move[0]<=n-1 and move[1]>=2:\n        dr3=True\n    if move[0]<=n-1 and move[1]<=m-1:\n        dr4=True\n    if dr1:\n        if grid[move[0]-2][move[1]] and grid[move[0]-2][move[1]-1] and grid[move[0]-1][move[1]]:\n            dead=True\n    if dr2:\n        if grid[move[0]-2][move[1]-2] and grid[move[0]-2][move[1]-1] and grid[move[0]-1][move[1]-2]:\n            dead=True\n    if dr3:\n        if grid[move[0]][move[1]-2] and grid[move[0]][move[1]-1] and grid[move[0]-1][move[1]-2]:\n            dead=True\n    if dr4:\n        if grid[move[0]][move[1]] and grid[move[0]-1][move[1]] and grid[move[0]][move[1]-1]:\n            dead=True\nif dead:\n    print(count)\nelse:\n    print(0)", "bad=[]\nx = 0\ny = 0\nasdf = [[False]*1005 for _ in range(1005)]\na, b, c = map(int, input().split(' '))\nfor i in range(c):\n    x, y = map(int, input().split(' '))\n    asdf[x][y] = True\n\n    if asdf[x-1][y-1] and asdf[x][y-1] and asdf[x-1][y]:\n        print(i+1)\n        quit()\n    elif asdf[x-1][y] and asdf[x][y+1] and asdf[x-1][y+1]:\n        print(i+1)\n        quit()\n    elif asdf[x][y-1] and asdf[x+1][y-1] and asdf[x+1][y]:\n        print(i+1)\n        quit()\n    elif asdf[x][y+1] and asdf[x+1][y+1] and asdf[x+1][y]:\n        print(i+1)\n        quit()\n        \n        \nprint(0)", "import itertools\n\nn, m, k = list(map(int, input().split()))\nfield = [[False] * m for index in range(n)]\ndeltas = (\n    ((0, -1), (-1, -1), (-1, 0)), # Top left.\n    ((-1, 0), (-1, 1), (0, 1)),   # Top right.\n    ((0, 1), (1, 1), (1, 0)),     # Bottom right.\n    ((1, 0), (1, -1), (0, -1)),   # Bottom left.\n)\nfound = False\nfor index in range(k):\n    i, j = [int(s) - 1 for s in input().split()]\n    if not found:\n        if not field[i][j]:\n            for d in deltas:\n                f = lambda di, dj: 0 <= i + di < n and 0 <= j + dj < m and field[i + di][j + dj]\n                if all(itertools.starmap(f, d)):\n                    print(index + 1)\n                    found = True\n                    break\n        field[i][j] = True\nif not found:\n    print(0)\n", "n, m, k = map(int, input().split())\nA = [[0] * (m + 1) for i in range(n + 1)]\ncounter = 0\nflag = True\nfor i in range(k):\n    counter += 1\n    i, j = map(lambda x: int(x) - 1, input().split())\n    A[i][j] = 1\n    if A[i][j - 1] == 1 and A[i - 1][j - 1] == 1 and A[i - 1][j] == 1:\n        print(counter)\n        flag = False\n        break\n    if A[i - 1][j] == 1 and A[i - 1][j + 1] == 1 and A[i][j + 1] == 1:\n        print(counter)\n        flag = False\n        break        \n    if A[i][j - 1] == 1 and A[i + 1][j - 1] == 1 and A[i + 1][j] == 1:\n        print(counter)\n        flag = False\n        break        \n    if A[i][j + 1] == 1 and A[i + 1][j] == 1 and A[i + 1][j + 1] == 1:\n        print(counter)\n        flag = False\n        break\nif flag == True:\n    print(0)", "def main():\n    n, m, k = map(int, input().split())\n    l = list(tuple(map(int, input().split())) for _ in range(k))\n    m += 1\n    n += 1\n    field = [False] * (m * n)\n    patterns = ((1, m, m + 1),\n                (-m, -m + 1, 1),\n                (-1, -m - 1, -m),\n                (-1, m - 1, m))\n    for i, (y, x) in enumerate(l):\n        yx = y * m + x - m - 1\n        field[yx] = True\n        if any(all(field[yx + _] for _ in pattern) for pattern in patterns):\n            print(i + 1)\n            return\n    print(0)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n,m,k = list(map(int,input().split()))\nf = [[0 for i in range(m)] for j in range(n)]\nmove = [list(map(int,input().split())) for i in range(k)]\nans = 0\nfor i,mv in enumerate(move):\n\tf[mv[0]-1][mv[1]-1] = 1\n\tif mv[0]!= 1 and mv[1] != 1:\n\t\tif f[mv[0]-2][mv[1]-2] + f[mv[0]-2][mv[1]-1] + f[mv[0]-1][mv[1]-2] ==3:\n\t\t\tans = i+1\n\t\t\tbreak\n\tif mv[0]!= n and mv[1] != 1:\n\t\tif f[mv[0]][mv[1]-2] + f[mv[0]-1][mv[1]-2] + f[mv[0]][mv[1]-1] ==3:\n\t\t\tans = i+1\n\t\t\tbreak\n\n\tif mv[0]!= 1 and mv[1] != m:\n\t\tif f[mv[0]-2][mv[1]] + f[mv[0]-2][mv[1]-1] + f[mv[0]-1][mv[1]] ==3:\n\t\t\tans = i+1\n\t\t\tbreak\n\n\tif mv[0]!= n and mv[1] != m:\n\t\tif f[mv[0]][mv[1]] + f[mv[0]][mv[1]-1] + f[mv[0]-1][mv[1]] ==3:\n\t\t\tans = i+1\n\t\t\tbreak\nprint(ans)\n\n", "def checkFail( i , j ):\n    if i - 1 >= 0 and j - 1 >= 0:\n        res = 0\n        for x in range(i-1,i+1):\n            for y in range(j-1,j+1):\n                res += board[x][y]\n        if res == 4:return True\n    if i - 1 >= 0 and j + 1 < m:\n        res = 0\n        for x in range(i-1,i+1):\n            for y in range(j,j+2):\n                res += board[x][y]\n        if res == 4:return True\n    if i + 1 < n and j - 1 >= 0:\n        res = 0\n        for x in range(i,i+2):\n            for y in range(j-1,j+1):\n                res += board[x][y]\n        if res == 4:return True\n    if i + 1 < n and j + 1 < m:\n        res = 0\n        for x in range(i,i+2):\n            for y in range(j,j+2):\n                res += board[x][y]\n        if res == 4:return True\n        \n    return False\n\nn,m,k = [int(x) for x in input().strip().split()]\nboard = [[0] * m for i in range(0,n)]\n\nisFail = False\nres = 0\nfor moveIndex in range(0,k):\n    i,j = [int(x) for x in input().strip().split()]\n    if not isFail:\n        i -= 1\n        j -= 1\n        if board[i][j] == 0:\n            board[i][j] = 1\n            #print( board )\n            if checkFail( i , j ):\n                isFail = True\n                res = moveIndex + 1\n                #print( \"found!!!\" + str(res) )\nprint(res)\n\n    \n", "n, m, k = map(int, input().split())\na = [[0] * (m + 2) for i in range(n + 2)]\nfor c in range(k):\n    i, j = map(int, input().split())\n    i -= 1\n    j -= 1\n    a[i][j] = 1\n    for i1 in range(i - 1, i + 1):\n        for j1 in range(j - 1, j + 1):\n            if a[i1][j1] == a[i1 + 1][j1 + 1] == a[i1 + 1][j1] == a[i1][j1 + 1] == 1:\n                print(c + 1)\n                return\nprint(0)", "__author__ = 'default'\ndef TaskA():\n    #fl = open('TaskA.txt','r')\n    n, m, k = list(map(int,input().split()))\n    pole = [0]*n\n    lose = False\n    cmplt = True\n    for i in range(n):\n        pole[i] = [0]*m\n    for i in range(k):\n        rdl = list(map(int,input().split()))\n        pole[rdl[0]-1][rdl[1]-1] = 1\n        lose = check(pole, rdl[0]-1,rdl[1]-1)\n        if lose and cmplt:\n            cmplt = False\n            print(i+1)\n    #fl.close()\n    if not lose and cmplt:\n        print(0)\ndef check(pole, index1,index):\n    if index1-1 >= 0 and index+1 < len(pole[0]):\n        if pole[index1][index+1] == 1 and pole[index1-1][index] == 1 and pole[index1-1][index+1] == 1:\n            return True\n    if index1+1 < len(pole) and index-1>0  >= 0:\n        if pole[index1][index-1] == 1 and pole[index1+1][index-1] == 1 and pole[index1+1][index] == 1:\n            return True\n    if index1-1 >= 0 and index-1 >= 0:\n        if pole[index1-1][index] == 1 and pole[index1-1][index-1] == 1 and pole[index1][index-1] == 1:\n            return True\n    if index1+1 < len(pole) and index+1 < len(pole[0]):\n        if pole[index1+1][index] == 1 and pole[index1+1][index+1] == 1 and pole[index1][index+1]:\n            return True\n\nTaskA()", "import sys\nnmk=list(map(int,sys.stdin.readline().split()))\nn=nmk[0]\nm=nmk[1]\nk=nmk[2]\na = [ [ 0 for i in range(m+2) ] for j in range(n+2) ]\nrs=0\nfor i in range(k):\n tt=list(map(int,sys.stdin.readline().split()))\n a[tt[0]][tt[1]]=1\n if rs==0:\n  if a[tt[0]][tt[1]+1]==1:\n    if (a[tt[0]-1][tt[1]]==1 and a[tt[0]-1][tt[1]+1]==1) or (a[tt[0]+1][tt[1]]==1 and a[tt[0]+1][tt[1]+1]==1):\n      rs=i+1\n\n  if a[tt[0]][tt[1]-1]==1:\n    if (a[tt[0]-1][tt[1]]==1 and a[tt[0]-1][tt[1]-1]==1) or (a[tt[0]+1][tt[1]]==1 and a[tt[0]+1][tt[1]-1]==1):\n      rs=i+1\nprint (rs)", "n,m,k=input().split(\" \")\nn=int(n)\nm=int(m)\nk=int(k)\nl=[[0 for x in range(m+2)] for x in range(n+2)]\nflag=0\nfor i in range(k):\n a,b=input().split(\" \")\n a=int(a)\n b=int(b)\n l[a][b]=1; \n if l[a][b+1]==1 and l[a-1][b]==1 and l[a-1][b+1]==1: #up right\n  if flag==0:\n   flag=i+1\n elif l[a-1][b]==1 and l[a-1][b-1]==1 and l[a][b-1]:#up left\n  if flag==0:\n   flag=i+1\n elif l[a][b-1]==1 and l[a+1][b-1]==1 and l[a+1][b]:#down left\n  if flag==0:\n   flag=i+1\n elif l[a][b+1]==1 and l[a+1][b] and l[a+1][b+1]:#down right\n  if flag==0:\n   flag=i+1\nprint(flag)\n", "n, m, k = map(int, input().split())\narr = [[0 for _ in range(m)] for _ in range(n)]\n\nfor i in range(1,k+1):\n\ta, b = map(int, input().split())\n\ta = a - 1\n\tb = b - 1\n\tif arr[a][b] == 0: \n\t\tarr[a][b] = i\n\nans = 100000000000\nfor i in range(n-1):\n\tfor j in range(m-1):\n\t\tif arr[i][j] > 0 and arr[i+1][j] > 0 and arr[i][j+1] > 0 and arr[i+1][j+1] > 0:\n\t\t\tmaxval = max(arr[i][j], max(arr[i][j+1], max(arr[i+1][j], arr[i+1][j+1])))\n\t\t\tans = min(ans, maxval)\n\nprint(ans if ans != 100000000000 else 0)", "nmk = input()\nns, ms, ks = nmk.split(' ')\nn = int(ns)\nm = int(ms)\nk = int(ks)\n\ncounter = 1\nfield = [[[0, 0] for i in range(m)] for j in range(n)]\nres = 0\nwhile counter <= k :\n    xy = input()\n    xs, ys = xy.split(' ')\n    x = int(xs) - 1\n    y = int(ys) - 1\n    if field[x][y][0] == 0:\n        field[x][y][1] = counter\n    field[x][y][0] = 1\n    \n    counter += 1\n\nfor i in range(n-1):\n    for j in range(m-1):\n        sum = field[i + 1][j][0] + field[i][j + 1][0] + field[i + 1][j + 1][0] + field[i][j][0]\n        if sum == 4:\n            a = max(field[i + 1][j][1],field[i][j + 1][1],field[i + 1][j + 1][1],field[i][j][1])\n            if res == 0:\n               res = a \n            else:\n                if a < res:\n                    res = a\n            \nprint(res)\n\n", "def Main():\n    string = (input()).split(\" \")\n    n = int(string[0]) \n    m = int(string[1])\n    k = int(string[2])\n    \n    # exit immediately if smth wrong\n    if k ==\"0\" or n == \"0\" or m == \"0\":\n        print (\"0\")\n        return\n    \n    mas = []\n    for i in range(n):\n        mas.append([])\n        for j in range(m):\n            mas[i].append(0)\n    \n    act  = True\n    l = 0\n    while (act and k):\n        string =(input()).split(\" \") \n        i = int(string[0])-1\n        j = int(string[1])-1\n        \n    #   i = i -1\n    #   j = j -1\n        \n        mas[i][j] = 1\n        k = k - 1\n        l = l + 1\n        act = check(i,j,n,m,mas) \n    \n    if act == True:\n        print (\"0\")\n        return\n    if act == False:\n        while(k):\n            string = input()\n            k = k-1\n        print(str(l))\n        return\n\ndef check (i,j,n,m,mas):            \n    if i != 0:\n        if j != 0:\n            if mas[i-1][j-1] == 1:\n                if mas[i-1][j] == 1:\n                    if mas [i][j-1] == 1:\n                        return False \n    if i+1 != n:\n        if j+1 != m:\n            if mas[i+1][j+1] == 1:\n                if mas[i][j+1] == 1:\n                    if mas[i+1][j] == 1:\n                        return False\n    if i != 0:\n        if j+1 != m:\n            if mas[i-1][j+1] == 1:\n                if mas[i-1][j] == 1:\n                    if mas[i][j+1] == 1:\n                        return False\n    if i+1 != n:\n        if j != 0:\n            if mas[i+1][j-1] == 1:\n                if mas[i][j-1] == 1:\n                    if mas[i+1][j] == 1:\n                        return False\n    return True\n\ndef __starting_point():\n    Main()\n\n__starting_point()", "x=input()\n(n,m,k)=x.split(maxsplit=100)\n(n,m,k)=(int(n),int(m),int(k))\nmapp=[[0 for j in range(m)] for i in range(n)]\nmaqq=[[0 for j in range(m-1)] for i in range(n-1)]\nu=[(0,0),(0,-1),(-1,0),(-1,-1)]\nkey=False\nfor i in range(k):\n    x=input()\n    if key:\n        continue\n    (x,y)=x.split(maxsplit=100)\n    (x,y)=(int(x)-1,int(y)-1)\n    if(mapp[x][y]==1):\n        continue\n    else:\n        mapp[x][y]+=1\n        for j in range(4):\n            try:\n                assert(x+u[j][0]>=0 and y+u[j][1]>=0)\n                maqq[x+u[j][0]][y+u[j][1]]+=1\n                if maqq[x+u[j][0]][y+u[j][1]]==4:\n                    print(i+1)\n                    key=1\n                    break           \n            except Exception:\n                pass\nif not key:\n    print(0)\n    \n", "def createl(m):\n    l=[]\n    for i in range(0,m):\n        l.append(0)\n    return l\n           \nline = input()\nx = line.split(' ')\nn=int(x[0])\nm=int(x[1])\nk=int(x[2])\nl = []\nlf=[]\nkk=0\n\nfor j in range (0,n):\n    l.append(createl(m))\nfor i in range(0,k):\n    line= input()\n    x = line.split(' ')\n    a = int(x[0])\n    b = int(x[1])\n    a=a-1\n    b=b-1\n    l[a][b] = 'x'\n    if (a>0) and (b>0):\n        if (l[a-1][b]=='x') and (l[a-1][b-1]=='x') and (l[a][b-1]=='x'):\n            print(i+1)\n            kk+=1\n            break\n    if (a<n-1) and (b>0):\n        if (l[a+1][b]=='x') and (l[a+1][b-1]=='x') and (l[a][b-1]=='x'):\n            print(i+1)\n            kk+=1\n            break\n    if (a<n-1) and (b<m-1):    \n        if (l[a+1][b]=='x') and (l[a+1][b+1]=='x') and (l[a][b+1]=='x'):\n            print(i+1)\n            kk+=1\n            break\n    if (a>0) and (b<m-1):\n        if (l[a-1][b]=='x') and (l[a-1][b+1]=='x') and (l[a][b+1]=='x'):\n            print(i+1)\n            kk+=1\n            break\n     #for i in range(0,n):\n     #   print(l[i])\nif kk==0:\n    print(0)\n\n    \n", "n,m,k=list(map(int,input().split()))\nar=[]\ntr=[[1,1],[-1,1],[-1,-1],[1,-1]]\nfor x in range(n):\n    ar.append([0]*m)\nfor v in range(k):\n    c,d=list(map(int,input().split()))\n    c+=-1\n    d+=-1\n    ar[c][d]=1\n    for x in tr:\n        if c+x[0]<n and c+x[0]>=0 and d+x[1]<m and d+x[1]>=0:\n            if ar[c][d+x[1]]==1 and ar[c+x[0]][d]==1 and ar[c+x[0]][d+x[1]]==1:\n                print(v+1)\n                return\nprint(0)\n", "R=lambda:map(int,input().split())\nn,m,k=R()\nN=1024\ng=[[0]*N for _ in range(N)]\ndef T(r,c):\n  return g[r][c] and g[r+1][c] and g[r][c+1] and g[r+1][c+1]\nfor i in range(k):\n  r,c=R()\n  g[r][c]=1\n  if T(r-1,c-1) or T(r-1,c) or T(r,c-1) or T(r,c):\n    print(i+1)\n    break\nelse:\n  print(0)", "n,m,k = list(map(int,input().split(' ')))\nM = [[0 for j in range(m-1)] for i in range(n-1)]\nC = [[False for j in range(m)] for i in range(n)]\nans = 0\nansCnt = False\nfor w in range(k):\n    x,y = list(map(int,input().split(' ')))\n    x-=1\n    y-=1\n    if  (C[x][y] == False)  &  (ansCnt == False):\n        C[x][y] = True\n        for i in [0,-1]:\n            for j in [0,-1]:\n                if (x + i > -1) & (y + j > -1) & (x + i < n - 1) & (y + j < m - 1):\n                    M [x+i][y+j] += 1\n                    if M [x+i][y+j] == 4:\n                          ans = w+1\n                          ansCnt = True\nprint(ans)\n    \n                            \n                                                \n"]