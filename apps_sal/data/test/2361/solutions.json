["q = int(input())\nfor _ in range(q):\n\tn,m,k = map(int,input().split())\n\tplayer = n//k\n\tjok_pla = min(n//k, m)\n\tjok_re = m-jok_pla\n\tmaksi = (jok_re +k-2)//(k-1)\n\tprint(jok_pla-maksi)", "\nfor _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    # n = int(input())\n    # arr = list(map(int, input().split()))\n    x = min(m, n // k)\n    m -= x\n    y = (m + (k - 1) - 1) // (k - 1)\n    print(x - y)", "def ceil(a, b):\n    return a // b + bool(a % b)\n\n\ndef solve(n, m, k):\n    c = n // k\n    j1 = min(c, m)\n    m -= j1\n    return j1 - ceil(m, k - 1)\n\n\nfor _ in range(int(input())):\n    n, m, k = list(map(int, input().split()))\n    print(solve(n, m, k))\n", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n,m,k=map(int,input().split())\n    c=n//k\n    if m<=c:\n        print(m)\n    else:\n        print(c-(m-c+k-2)//(k-1))", "t = int(input())\n\nfor _ in range(t):\n    n, m, k = [int(x) for x in input().split()]\n    np1 = min(m, n//k)\n    m -= np1\n    # the remainder divided over k - 1 players (rounded up)\n    np2 = (m + k - 2)//(k-1)\n    print(np1 - np2)\n", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n, m, k = read_ints()\n    hi = min(m, n // k)\n    rest = (m - hi - 1) // (k - 1) + 1\n    print(hi - rest)\n", "t=int(input())\n\nfor i in range(t):\n\tn,m,k=map(int,input().split())\n\ta=min(m,n//k)\n\tm-=a\n\tb=(m+k-2)//(k-1)\n\tprint(a-b)", "for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    cards = n // k\n    x = min(m, cards)\n    y = __import__('math').ceil((m - x) / (k-1))\n    print(x - y)", "import sys\n\ninput = sys.stdin.readline\nflush = sys.stdout.flush\n\nfor _ in range(int(input())):\n    n, m, k = list(map(int, input().split()))\n    if m >= n // k:\n        a = n // k\n        m -= a\n        b = m // (k - 1) + 1 - (m % (k - 1) == 0)\n        print(a - b)\n        continue\n    else:\n        print(m)\n", "t = int(input())\nfor _ in range(t):\n\tn, m, k = map(int, input().split())\n\thand_size = n // k\n\tmy_hand = min(hand_size, m)\n\tm -= my_hand\n\n\tif m % (k-1) == 0:\n\t\tnext_hand = m // (k-1)\n\telse:\n\t\tnext_hand = m // (k-1) + 1\n\n\tprint(my_hand - next_hand)", "for gfhua in range(int(input())):\n    n,m,k = list(map(int,input().split()))\n    mk = min(m, n // k)\n    m -= mk\n    if m == 0:\n        print(mk)\n    else:\n        print(mk -(m + k - 2) // (k - 1))\n        \n", "def ceil(a, b):\n    if (a % b == 0):\n        return a // b\n    else:\n        return a // b + 1\n\nt = int(input())\nfor case in range(t):\n    n, m, k = list(map(int, input().split()))\n    taken = min(m, n//k)\n    remaining = m - taken\n    print(taken - ceil(remaining, k-1))\n", "import sys\n\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef solve():\n    n, m, k = nm()\n    if n // k >= m:\n        print(m)\n        return\n    else:\n        m -= n // k\n        print(n // k - (m-1)//(k-1) - 1)\n    return\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n", "for _ in range(int(input())):\n    n, m, k = list(map(int, input().split()))\n    cardsPerPlayer = n // k\n    x = min(cardsPerPlayer, m)\n    m -= x\n    print(x - (m+k-2) // (k-1))\n", "from collections import *\nfrom bisect import *\nfrom math import *\nfrom heapq import *\nimport sys\ninput=sys.stdin.readline\nt=int(input())\nwhile(t):\n    t-=1\n    n,m,k=list(map(int,input().split()))\n    x=n//k\n    if(x>=m):\n        print(m)\n        continue\n    else:\n        s=x\n        re=m-x\n        d=ceil(re/(k-1))\n        print(x-d)\n    \n", "from math import sqrt\n\nt = int(input())\nfor q in range(0, t):\n    n, m, k = list(map(int, input().split()))\n    if m <= n // k:\n        print(m)\n    else:\n        if (m - (n // k)) % (k - 1) == 0:\n            print(n // k - (m - (n // k)) // (k - 1))\n        else:\n            print(n // k - (m - (n // k)) // (k - 1) - 1)\n", "def solve():\n    n, m, k = map(int, input().split())\n    c = n // k\n    if m < c:\n        print(m)\n    else:\n        print(c - (m - c + k - 2) // (k - 1))\n\n\nfor i in range(int(input())):\n    solve()", "from math import ceil\n\nt = int(input())\nfor _ in range(t):\n    n, m, k = map(int, input().split())\n    a = min(n//k, m)\n    \n    print(a - ceil((m-a)/(k-1)))", "import sys, random, math\nfrom bisect import bisect_left, bisect_right\ninput = sys.stdin.readline\n\ndef main():\n    inf = 10 ** 20\n\n    t = int(input())\n#    t, a, b = map(int, input().split())\n#    t = 1\n    \n    for _ in range(1, t+1):\n    #    print(\"Case #{}: \".format(_), end = '')\n        \n        n, m, k = map(int, input().split())\n        each = n // k\n        best = min(each, m)\n        m -= min(each, m)\n        sec = m // (k-1)\n        if(m % (k-1)):\n            sec += 1\n        print(best - sec)\n        \n        \nmain()", "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nQuery = [list(map(int, input().split())) for _ in range(Q)]\n\nfor n, m, k in Query:\n    p = n//k\n    if p >= m:\n        ans = m\n    else:\n        ans = max(p - (m-p+k-2)//(k-1) ,0)\n    print(ans)"]