["from sys import stdin,stdout\n# stdout = open('output.txt', 'w+')\n# stdin = open('input.txt','r+')\n\n\nfrom collections import Counter\ndef prefixsuffixmatch(s):\n\tpi_table=[0 for i in range(len(s))]\n\tfor i in range(1,len(s)):\n\t\ty=pi_table[i-1]\n\t\twhile s[i]!=s[y] and y!=0:\n\t\t\ty=pi_table[y-1]\n\t\tif s[i]==s[y]:\n\t\t\ty+=1\n\t\tpi_table[i]=y\n\treturn pi_table\ndef canprint(a,b):\n\tif a['0']>=b['0'] and a['1']>=b['1']:\n\t\treturn True\n\treturn False\n\ndef flushit(s):\n\tif '0' in s:\n\t\tstdout.write('0'* s['0'])\n\tif '1' in s:\n\t\tstdout.write('1'* s['1'])\ndef fillit(x):\n\tif '0' not in x:\n\t\tx['0']=0\n\tif '1' not in x:\n\t\tx['1']=0\n\treturn x\n\t\ns=stdin.readline().strip();counter_s=fillit(Counter(s))\nt=stdin.readline().strip();counter_t=fillit(Counter(t))\nt_pi_table=prefixsuffixmatch(t)\nlongest_match=t_pi_table[-1]\n\nrepeating_part=t[longest_match:]\n\ncounter_repeating_part=fillit(Counter(repeating_part))\n\n\n\n\nif len(counter_s)==2 and len(counter_t)==2:\n\tif counter_s['0']>=counter_t['0'] and counter_s['1']>=counter_t['1']:\n\t\tstdout.write(t);counter_s['0']-=counter_t['0'];counter_s['1']-=counter_t['1'];\n\n\n\t# while canprint(counter_s,counter_repeating_part)==True:\n\t# \tstdout.write(repeating_part);\n\t# \tcounter_s['0']-=counter_repeating_part['0'];\n\t# \tcounter_s['1']-=counter_repeating_part['1'];\n\n\tif '0' in counter_repeating_part and '1' in counter_repeating_part:\n\t\tif counter_repeating_part['0']>0 and counter_repeating_part['1']>0:\n\t\t\tr=min(counter_s['0']//counter_repeating_part['0'],counter_s['1']//counter_repeating_part['1'])\n\t\t\tstdout.write(repeating_part*r);\n\t\t\tcounter_s['0']-=(r*counter_repeating_part['0']);\n\t\t\tcounter_s['1']-=(r*counter_repeating_part['1']);\n\tflushit(counter_s);\n\n\n", "s = input()\nt = input()\noverlap = t\ntt = ''\nfor i in range(len(t) - 1):\n    tt = tt + t[i]\n    if (t.endswith(tt)):\n        overlap = t[i + 1:]\nzro = s.count('0')\nmek = s.count('1')\nzro_tum = t.count('0')\nmek_tum = t.count('1')\nzro_toxum = overlap.count('0')\nmek_toxum = overlap.count('1')\n\nif (zro >= zro_tum and mek >= mek_tum):\n    print(t, end='')\n    zro -= zro_tum\n    mek -= mek_tum\nif zro_toxum:\n    k = zro//zro_toxum\nelse:\n    k = 10000000000\nif mek_toxum:\n    n = mek//mek_toxum\nelse:\n    n = 10000000000\nans = min(n, k)\nprint(overlap * ans, end='')\nzro -= zro_toxum * ans\nmek -= mek_toxum * ans\nprint('0' * zro + '1' * mek)"]