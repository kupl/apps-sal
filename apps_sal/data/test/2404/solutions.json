["x = int(input())\nfor i in range(2, x):\n   if x % i == 0:\n        print(i, x // i, sep='')\n        break", "a = int(input())\nfor i in range(2, a):\n\tif a%i == 0:\n\t\tprint(str(i) + str(a//i))\n\t\tbreak", "a=int(input())\nfor i in range(2,a):\n    if a%i==0:\n        print(i,a//i,sep=\"\")\n        break", "x = int(input())\nfor y in range(2, x):\n  if x % y == 0:\n    print(str(y) + str(x // y))\n    break\n", "n = int(input())\nfor i in range(2, n):\n\tif n%i==0:\n\t\tprint(i, n//i, sep='')\n\t\tbreak\n\t\n", "import bisect, collections\n \n \n \ndef solution():\n    \n    n = int(input().strip())\n\n    for i in range(2, n):\n        if n % i == 0:\n            print(str(i)+str(n//i))\n            break\n    \n\n\n    \n\ndef main():    \n    # T = int(input().strip())\n    for _ in range(1):\n        solution()\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    def PrimeDecomposition(N):\n        ret = {}\n        n = int(N ** 0.5)\n        for d in range(2, n + 1):\n            while N % d == 0:\n                if d not in ret:\n                    ret[d] = 1\n                else:\n                    ret[d] += 1\n                N //= d\n            if N == 1:\n                break\n        if N != 1:\n            ret[N] = 1\n        return ret\n\n    N = int(input())\n    prime = PrimeDecomposition(N)\n    ans = []\n    for p in prime:\n        for _ in range(prime[p]):\n            ans.append(p)\n    ans.sort()\n    print(''.join(map(str, ans)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nfor d in range(2, n):\n    if n % d == 0:\n        print(min(d, n // d), max(d, n // d), sep=\"\")\n        break", "n=int(input())\nfor i in range(2,n):\n\tif n%i==0:\n\t\tprint(str(i)+str(n//i))\n\t\tquit()", "n = int(input())\nfor i in range(2, n):\n    if n % i == 0:\n        print(str(i) + str(n//i))\n        break\n", "n = int(input())\nfor i in range(2,n):\n    if n%i == 0:\n        print(i,n//i,sep='')\n        break", "import math as mt\n\nMAXN = 100001\nspf = [0 for i in range(MAXN)]\n\n\ndef sieve():\n    spf[1] = 1\n    for i in range(2, MAXN):\n        spf[i] = i\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n\n    for i in range(3, mt.ceil(mt.sqrt(MAXN))):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\n\ndef getFactorization(x):\n    ret = list()\n    while x != 1:\n        ret.append(spf[x])\n        x = x // spf[x]\n\n    return ret\n\n\nsieve()\nx = int(input())\np = getFactorization(x)\nfor i in sorted(p):\n    print(i, end=\"\")\nprint()\n", "def primfacs(n):\n   i = 2\n   primfac = []\n   while i * i <= n:\n       while n % i == 0:\n           primfac.append(i)\n           n = n / i\n       i = i + 1\n   if n > 1:\n       primfac.append(n)\n   return primfac\nnums = list(map(str,primfacs(int(input()))))\nprint(int(float(\"\".join(nums))))\n", "n = int(input())\nfor i in range(2, n + 1):\n\tif n % i == 0:\n\t\tprint(str(i) + str(n // i))\n\t\tbreak", "# Generated by powerful Codeforces Tool\n# Author: 2014CAIS01\n# Time: 2020-04-01 22:35:21\n\ndef main():\n    n = int(input())\n    for i in range(2, n):\n        if n % i == 0:\n            print(str(i) + str(n // i))\n            return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a=int(input())\nfor i in range(2,a):\n    if(a%i==0):\n        print(str(int(i))+str(a//i))\n        break\n", "N = int(input())\nfor i in range(2,N):\n    if N%i == 0:\n        print(str(i)+str(N//i))\n        return\n", "\nn = int(input())\nl = []\n\ni = 2\nwhile n!=1:\n    if n%i==0:\n        while n%i==0:\n            n/=i\n            l.append(str(i))\n    else:\n        i+=1\n\nprint(\"\".join(l))\n", "a = int(input())\n\nfor x in range(2, a + 1):\n    if a % x == 0:\n        print(x, a // x, sep = '')\n        break", "n = int(input())\nk = 0\nfor i in range(2, 1000):\n    if n % i == 0:\n        print(i, end ='')\n        print(n // i)\n        break\n", "def fact(x):\n\tl = []\n\ti = 2\n\twhile i * i <= x:\n\t\twhile x % i == 0:\n\t\t\tx //= i\n\t\t\tl.append(i)\n\t\ti += 1\n\tif x != 1:\n\t\tl.append(x)\n\treturn l\nn = int(input())\nprint(*fact(n), sep='')", "a = int(input())\nfor i in range(2, a):\n    if a % i != 0:\n        continue\n    print(i, a // i, sep='')\n    break\n", "n = int(input())\ni = 2\nans = -1\nwhile i * i <= n:\n    if n % i == 0:\n        ans = i\n        break\n    i += 1\nprint(str(ans) + str(n // ans))", "a=int(input())\n\nfor i in range(2,a):\n    if a%i==0:\n        print(i,end=\"\")\n        print(a//i)\n        break\n", "from math import sqrt\nn=int(input())\nfor i in range(2,int(sqrt(n))+1):\n    if n%i==0:\n        print(i,end=\"\")\n        print(n//i)\n        break", "a = int(input())\n\nfor i in range(2, a + 1):\n    if a % i == 0:\n        print(i, a//i, sep = \"\")\n        break", "def prime_factor(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n != 1:\n        factors.append(n)\n    return factors\n\na = int(input())\nprint(''.join(map(str, prime_factor(a))))", "a=int(input())\n\nfor i in range(2,int(a**0.5)+1):\n\tif a%i==0:\n\t\tprint(i,end=\"\")\n\t\tprint(a//i)\n\t\tbreak", "n = int(input())\n\ndef SieveOfEratosthenes(n): \n      \n    # Create a boolean array \"prime[0..n]\" and initialize \n    # all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    res = []\n    # Print all prime numbers \n    for p in range(n + 1): \n        if prime[p]: \n            res.append(p)\n\n    return res\n\n\nprimes = SieveOfEratosthenes(1000)\npset = set(primes)\n\n\nm1 = None\nm2 = None\nfor p in primes:\n    if n%p==0:\n        e = n//p\n        if e in pset:\n            m1, m2 = p,e\n            break\n\nres = ''\nif m1 is not None and m2 is not None:\n    if m1>m2:\n        m1, m2 = m2,m1\n    \n    res+=str(m1)+str(m2)\n\nprint(res)\n\n\n\n", "a=int(input())\nfor i in range(2,a):\n\tif a%i==0:\n\t\tprint(str(i)+str(a//i))\n\t\tbreak", "a = int(input())\nfor i in range(2, a-1):\n    if a % i == 0:\n        print(str(i) + str(a//i))\n        break\n", "n=int(input())\nx=2\nwhile n%x>0:\n    x+=1\nprint(\"{}{}\".format(x,n//x))", "N = int(input())\nfor i in range(2, N + 1):\n    if N % i == 0:\n        print(str(i)+str(N//i))\n        return\n\n# Hope the best for Ravens member\n", "s = int(input())\n\nfor i in range(2, s + 1):\n    if s % i == 0:\n        print(str(i), str(s // i), sep='')\n        break\n", "x = int(input())\nfor i in range(2, x):\n    if x % i == 0:\n        print(i, x // i, sep = '')\n        break", "n=int(input())\ns=''\nfor i in range(int(n**0.5),0,-1):\n    if n%i==0:\n        s=s+str(i)+str(n//i)\n        break\nprint(s)\n", "a = int(input())\nfor i in range(2, a//2 + 1):\n    b = a / i\n    if b.is_integer():\n        print(str(i) + str(int(b)))\n        break\n", "\np = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n\ns = int(input())\na = 1\nfor i in p:\n    if s%i==0:\n        a = i\n        break\nprint(str(a)+str(s//a))", "x=int(input())\nfor i in range(2,x):\n    if x%i==0:\n        print(str(i)+str(x//i))\n        break\n    else:\n        pass\n", "n = int(input())\nfor i in range(2,999):\n    if n % i == 0:\n        print(i, n//i, sep='')\n        break\n", "a = int(input())\nx = 2\nwhile x**2 <= a:\n\twhile a%x == 0:\n\t\tprint(x, end = \"\")\n\t\ta //= x\n\tx += 1\nif a > 1: print(a, end = \"\")\nprint()\n", "n=int(input())\nc=0\nfor i in range(2,n):\n    if n//i==n/i:\n        c=1\n        print(str(i)+str(n//i))\n        break\nif c==0:\n    print(str(1)+str(n))\n    \n    \n        \n"]