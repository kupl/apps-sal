["import sys\n\ndef main():\n    mx = 1\n    n = int(input())\n    D = {}\n    D[\"polycarp\"] = 1\n    for i in range(n):\n        s, r, t = input().split()\n        s = s.lower()\n        t = t.lower()\n        D[s] = D[t] + 1\n        mx = max(mx, D[s])\n    print(mx)\n\nmain()", "n = int(input())\nm = {'polycarp' : 0}\nfor i in range(n):\n    s, r, t = input().lower().split()\n    m[s] = m[t] + 1\nmx = 0\nfor y in list(m.values()):\n    mx = max(mx, y)\nprint(mx + 1)\n", "#!/usr/bin/env python3.4\n\nn = int(input())\nans = {'polycarp':1}\nfor i in range(n):\n    repost, _, reposted = input().lower().split()\n    ans[repost] = ans[reposted] + 1\nprint(max(ans.values()))\n", "sa = []\na = int(input())\nfor i in range(a):\n    x = list(map(str, input().split(' reposted ')))\n    sa.append([x[0].lower(), x[1].lower()])\n\nl = {\"polycarp\":1}\n\nd = {}\nfor i in sa:\n    d[i[0]] = i[1]\n    \nfor i in sa:\n    if i[0] not in l:\n        l[i[0]] = l[i[1]] + 1\n        \nprint(max([l[t] for t in l]))\n", "n = int(input())\nd = {'polycarp': 1}\nm = 1\nfor i in range(n):\n    s = input().lower().split()\n    d[s[0]] = d[s[2]] + 1\n    if d[s[0]] > m:\n        m = d[s[0]]\nprint(m)", "n, qwe = int(input()), {'polycarp' : 1}\nfor _ in range(n):\n\tt = input().split(' reposted ')\n\tqwe[t[0].lower()] = qwe[t[1].lower()] + 1\nprint(max(qwe.values()))", "m = dict()\nn = int(input().strip())\nm['polycarp'] = 0\nfor i in range(n):\n    n1, n2 = input().rstrip().lower().split(' reposted ', 1)\n    m[n1] = m[n2] + 1\nprint(max(m.values()) + 1)\n\n\n", "def reg(s):\n    s1 = ''\n    for i in s:\n        if ord(i) >= ord('A') and ord(i) <= ord('Z'):\n            s1 += chr(ord(i) - ord('A') + ord('a'))\n        else:\n            s1 += i\n    return s1\n\ns = set()\na = int(input())\nd = dict()\nt = 0\nrepeat = []\nfor i in range(a):\n    x, y, z = map(str, input().split())\n    if reg(x) not in d:\n        d[reg(x)] = t\n        t += 1\n    if reg(z) not in d:\n        d[reg(z)] = t\n        t += 1\n    s.add(reg(x))\n    s.add(reg(z))\n    repeat.append((d[reg(x)], d[reg(z)]))\nl = [[] for i in range(len(s) + 1)]\nfor i in repeat:\n    l[i[0]].append(i[1])\n    l[i[1]].append(i[0])\nn = len(s)\nf = [-1] * (n + 1)\nq = [0] * (n + 1)\nf[d['polycarp']] = 0\nq[0] = d['polycarp']\nh = 0\nt = 1\nwhile h < t:\n    i = q[h]\n    h += 1\n    for j in l[i]:\n        if f[j] == -1:\n            f[j] = f[i] + 1\n            q[t] = j\n            t += 1\nprint(max(f) + 1)", "#!/bin/env python3\n\nfrom sys import stdin\nimport re\n\nguys = { 'polycarp': 1 }\n\nres = 1\nstdin.readline()\nfor line in stdin:\n    try:\n        to, _, fr = [s.strip().lower() for s in line.lstrip().split(' ', 2)]\n    except:\n        continue\n    guys[to] = max(guys[fr] + 1, guys.get(to, 0))\n    res = max(guys[to], res)\n\nprint (res)\n", "count = int(input())\ntree = {'polycarp' : 1}\nmax = 1;\nfor i in range(0, count):\n\ttry:\n\t\trel = input().lower().split(' ')\n\t\tif not rel[1] == 'reposted': \n\t\t\tcontinue\n\t\ttree[rel[0]] = tree[rel[2]] + 1\n\t\tif tree[rel[0]] > max: \n\t\t\tmax = tree[rel[0]]\n\texcept BaseException:\n\t\tcontinue\nprint(max)", "N = input()\nN = int(N)\nres = 0\ngraph = [[\"polycarp\"]]\nfor i in range(N):\n\tdata = input().split(' ')\n\treposter = data[0].lower()\n\treposted = data[2].lower()\n\tlength = len(graph)\n\tfor i in range(length):\n\t\tif reposted in graph[i]:\n\t\t\tif i < length-1:\n\t\t\t\tgraph[i+1].append(reposter)\n\t\t\telse:\n\t\t\t\tgraph.append([reposter])\nprint(len(graph))", "import sys\n\ndef add_user(d, u):\n    if u in d:\n        return d[u]\n    else:\n        d[u] = len(d)\n        return d[u]\n\nn = int(input())\nwho = [[] for i in range(n+1)]\nusers = {}\nanswer_id = -1\nfor i in range(n):\n    str = input()\n    parts = str.split(' ')\n    name_one = parts[0].lower()\n    name_two = parts[2].lower()\n    user_one = add_user(users, name_one)\n    user_two = add_user(users, name_two)\n    who[user_two].append(user_one);\n    if name_two == 'polycarp':\n        answer_id = user_two\n\ndef dfs(u):\n    res = 1\n    for v in who[u]:\n        res = max(res, dfs(v) + 1);\n\n    return res\n\nprint((dfs(answer_id)));\n\n", "result = []\npol = 'polycarp'\nfor i in range(int(input())):\n    point = False\n    new_person, _, was = [x.lower() for x in input().split()]\n    if was == pol: result.append([pol, new_person])\n    elif was in [x[-1] for x in result]:\n        for line in result:\n            if line[-1] == was:\n                line.append(new_person)\n                break\n    else:\n        for line in result:\n            for name in line[1:-1]:\n                if name == was:\n                    i = line.index(name)\n                    new_person_line = line[:i+1]\n                    new_person_line.append(new_person)\n                    result.append(new_person_line)\n                    point = True\n                    break\n            if point: break\n                    \nm = max(len(line) for line in result)\nprint(m)\n", "def lower(a):\n    if 'A' <= a <= \"Z\":\n        return chr(ord(a) + 32)\n    else:\n        return a\n\n\ndef ToLower(a):\n    a = list(a)\n    for i in range(len(a)):\n        a[i] = lower(a[i])\n    return ''.join(a)\n\ndef main():\n    n = int(input())\n    people = ['polycarp']\n    res = [1] * (n + 1)\n    for i in range(1, n + 1):\n        a, b, c = map(ToLower, input().split())\n        res[i] = res[people.index(c)] + 1\n        people.append(a)\n    print(max(res))\nmain()", "n = int(input())\nd = {}\nd[\"polycarp\"] = 1\nans = 1\n\nfor i in range(n):\n    s = input()\n    a = s.split()\n    a[0] = a[0].lower()\n    a[2] = a[2].lower()\n    d[a[0]] = d[a[2]] + 1\n    ans = max(ans, d[a[0]])\n\nprint(ans)\n", "deep = dict()\nn = int(input())\nadj_dict = dict()\nfor i in range(n):\n    line = [s.lower() for s in input().split()]\n    name1 = line[0]\n    name2 = line[2]\n    if name2 not in list(adj_dict.keys()):\n        adj_dict[name2] = list()\n        adj_dict[name2].append(name1)\n    else:\n        adj_dict[name2].append(name1)\n    deep[name1] = 0\n    deep[name2] = 0\nqueue = list()\nqueue.append('polycarp')\nwhile queue:\n    current = queue[0]\n    queue = queue[1:]\n    if current not in adj_dict:\n        continue\n    for nei in adj_dict[current]:\n        deep[nei] = deep[current] + 1\n        queue.append(nei)\n\nprint(max(deep.values()) + 1)\n", "n = int(input())\nc = {}\nc['polycarp'] = []\nfor i in range(n):\n\ts = input().split(' reposted ')\n\ts[0] = s[0].lower()\n\ts[1] = s[1].lower()\n\tif s[0] not in c:\n\t\tc[s[0]] = []\n\tc[s[1]] += [c[s[0]]]\nansw = str(c['polycarp'])\ncount = 0\nm = 0\nfor i in answ:\n\tif i == '[':\n\t\tcount += 1\n\t\tif count > m:\n\t\t\tm = count\n\telif i == ']':\n\t\tcount -= 1\nprint(m)", "def nafig(s):\n    for i in range(len(s)):\n        x = ord(s[i])\n        if (x <= 90) and (x >= 65):\n            x += 32\n            s = s[:i] + chr(x) + s[i + 1:]\n    return s\n\n\nn = int(input())\ndic = dict()\ndic['polycarp'] = 1\nmaxim = 1\nfor i in range(n):\n    st = list(map(str, input().split()))\n    st[0] = nafig(st[0])\n    st[2] = nafig(st[2])\n    dic[st[0]] = dic[st[2]] + 1\n    if dic[st[0]] > maxim:\n        maxim = dic[st[0]]\nprint(maxim)\n\n\n", "def r(d,key):\n    if key in d:\n        s=0\n        for i in d[key]:\n            m=r(d,i)\n            if m>s: s=m\n        return s+1\n    else: return 1\n\ndef size(d):\n    s=0\n    for i in d:\n        m=r(d,i)\n        if m>s: s=m\n    return s\n\nn=int(input())\na=[input().lower().split() for i in range(n)]\nd={}\nfor i in a:\n    d[i[2]]=[]\nfor i in a:\n    d[i[2]].append(i[0])\ns=size(d)\nprint(s)\n\n", "def main():\n\tN = int(input())\n\tusers = {}\n\tusers['polycarp'] = 1\n\n\tfor x in range(N):\n\t\tmsg = input().split()\n\t\tuser1, user2 = msg[0].lower(), msg[2].lower()\n\t\tusers[user1] = users[user2] + 1\n\n\tprint(max(users.values()))\n\nmain()\n", "__author__ = 'ruckus'\n\ndef haveLast(Chains, Name):\n    for i in range(len(Chains)):\n        if Chains[i][len(Chains[i])-1] == Name:\n            return i\n    return -1\n\nRepostNum = int(input())\n\nReposts = []\n\nfor i in range(RepostNum):\n    Reposts.append(input().split())\n    Reposts[i][0] = Reposts[i][0].upper()\n    Reposts[i][2] = Reposts[i][2].upper()\n\nMaxRepostLen = 1\n\nChains = []\n\nfor i in range(RepostNum):\n    if Reposts[i][2] == 'Polycarp'.upper():\n        Chains.append(['Polycarp'.upper(), Reposts[i][0]])\n    else:\n        num = haveLast(Chains, Reposts[i][2])\n        if num >= 0:\n            Chains[num].append(Reposts[i][0])\n        else:\n            for j in range(len(Chains)):\n                if Reposts[i][2] in Chains[j]:\n                    Chains.append(Chains[j][:Chains[j].index(Reposts[i][2])+1])\n                    Chains[len(Chains)-1].append(Reposts[i][0])\n\nfor Chain in Chains:\n    if len(Chain) > MaxRepostLen:\n        MaxRepostLen = len(Chain)\n\nprint(MaxRepostLen)", "n = int(input())\nreposted_list = {\"polycarp\": 1}\n\nfor i in range(n):\n    reposter, r, author = input().split(\" \")\n    reposter, author = reposter.lower(), author.lower()\n    reposted_list[reposter] = reposted_list[author] + 1\n\nprint(reposted_list[max(reposted_list, key=reposted_list.get)])", "def length(arr, nowman):\n    l = 1\n    if nowman != 'polycarp':\n        l += length(arr, arr[nowman])\n    return l\n\nrarr = {}\nfor i in range(int(input())):\n    r = input().lower().split()\n    rarr[r[0]] = r[2]\n\nmaxl = 1\nfor key, value in list(rarr.items()):\n    l = length(rarr, rarr[key])+1\n    if maxl < l:\n        maxl = l\n\nprint(maxl)\n", "import sys\n\n__author__ = 'zumzoom'\n\nn = int(sys.stdin.readline())\nedges = sys.stdin.readlines()\nd = dict()\nd['polycarp'] = 1\nfor edge in edges[:n]:\n    a = edge.lower().split()\n    d[a[0]] = d[a[2]] + 1\n\nprint(max(d.values()))\n\n", "#!/usr/bin/env python3\n# coding: utf-8\n\nn = int(input())\n\nrepost_level = {\"polycarp\": 1}\n\nfor i in range(n):\n    name1, _, name2 = input().split()\n    repost_level[name1.lower()] = repost_level[name2.lower()] + 1\n\n\nprint(max(repost_level.values()))\n"]