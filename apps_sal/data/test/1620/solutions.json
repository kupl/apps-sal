["n = int(input())\ns = \"aabb\" * ((n+4)//4)\ns = s[:n]\nprint(s)", "n = int(input())\nfor i in range(n):\n    if i % 4 < 2:\n        print('a', end='')\n    else:\n        print('b', end='')", "def __starting_point():\n    s = ''\n    n = int(input())\n    while len(s) < n + 10:\n        s += 'aabb'\n    print(s[:n])\n\n__starting_point()", "n = int(input())\nprint(\"aabb\"*(n//4)+\"aabb\"[:n%4])", "n = int(input())\nans = ''\nfor i in range(n // 4):\n    ans += 'aabb'\n\nif n % 4 == 1:\n    ans += 'a'\n\nif n % 4 == 2:\n    ans += 'aa'\n    \nif n % 4 == 3:\n    ans += 'aab'\n    \nprint(ans)", "s = \"aabb\" * 200005\nn = int(input())\nprint(s[:n])\n", "n = int(input())\n\nprint(('aabb' * (n // 4 + 4))[:n])\n", "n = int(input())\ns = 'aabb'\ns = s * (n // 4) + s\nprint(s[0:n])\n", "n=int(input())\nc=n // 4\nif n%4 == 1:\n    print('aabb' * c,'a',sep='')\nif n%4 == 2:\n    print('aabb' * c,'aa',sep='')\nif n%4 == 3:\n    print('aabb' * c,'aab',sep='')\nif n%4 == 0:\n    print('aabb' * c)\n    \n\n", "import math\n\n\ndef main():\n\tn = int(input())\n\tans = \"\"\n\tfor i in range(n):\n\t\tif i%4 == 0 or i % 4 == 1:\n\t\t\tans += \"a\"\n\t\telse :\n\t\t\tans += \"b\"\n\tprint(ans)\nmain()\n", "s = 'aabb' * 10**5\nn = int(input())\nprint(s[:n])\n", "n = int(input())\ns = 'aabb' * (10 ** 5)\nprint(s[:n])", "n = int(input())\n\nans = \"aabb\" * ((n+3)//4)\nprint(ans[:n])", "n = input()\nn = int(n)\nfor i in range(n):\n    if (i//2)%2 == 0:\n        print('a', end=\"\")\n    else:\n        print('b', end=\"\")", "n = int(input())\ns = \"\"\ndef getch(i):\n    if i%4 == 0 or i%4 == 1:\n        return 'a'\n    else:\n        return 'b'\nfor i in range(n):\n    s+=getch(i)\nprint(s)", "n = int(input())\nans = [\"a\",\"a\",\"b\",\"b\"]*n\nprint(\"\".join(ans[:n]))\n", "import math,string,itertools,collections,re,fractions,array,copy\nimport bisect\nimport heapq\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import deque, defaultdict, OrderedDict, namedtuple, Counter, ChainMap\n\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\ndef ELIST(n): return [[] for i in range(n)]\ndef MI(n=None,m=None): # input matrix of integers\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = VI()\n    return arr\ndef MS(n=None,m=None): # input matrix of strings\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = input()\n    return arr\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\n    if n is None: n,m = VI()\n    a = MI(n,m)\n    arr = LIST(m,n)\n    for i,l in enumerate(a):\n        for j,x in enumerate(l):\n            arr[j][i] = x\n    return arr\n\ndef main(info=0):\n    n = I()\n    if n<=2:\n        print(\"aa\"[:n])\n        return\n    s = []\n    for i in range(n):\n        if i%4==0 or i%4==1:\n            s.append(\"a\")\n        else:\n            s.append(\"b\")\n    print(\"\".join(s))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nfin = sys.stdin\nfout = sys.stdout\nn = int(fin.readline())\nm = ['a', 'b']\ns = ''\nfor i in range(n):\n    s += m[(i // 2) % 2]\nfout.write(s)", "n = int(input())\ncurrs = 0\nwhile(n >1):\n    n-=2\n    if(currs == 0):\n        print(\"aa\", end =\"\")\n        currs = 1\n    else:\n        print(\"bb\", end = \"\")\n        currs = 0\nif(n == 1):\n    if(currs == 0):\n        print(\"a\", end =\"\")\n    else:\n        print(\"b\", end =\"\")", "n=int(input())\ns=''\nabc='abc'\nfor i in range(n):\n   if i<2:\n       s+='a'\n   else:\n       for j in abc:\n           if ((s[i-2]+s[i-1]+j)!=(j+s[i-1]+s[i-2])):\n               s+=j\n               break\nprint(s)\n", "n = int(input())\nsomeStr = 'aabb'\nresultStr = someStr*(n//4)+someStr[0:n%4:]\nprint(resultStr)"]