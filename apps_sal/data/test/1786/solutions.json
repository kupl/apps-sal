["def main():\n    w, h, n = list(map(int, input().split()))\n    res, vrt, hor = [], [], []\n    vh = (vrt, hor)\n    for i in range(n):\n        s = input()\n        x = int(s[2:])\n        flag = s[0] == 'V'\n        vh[flag].append(i)\n        res.append([x, flag])\n    dim = []\n    for tmp, m in zip(vh, (h, w)):\n        tmp.sort(key=lambda e: res[e][0])\n        u = [None, [0]]\n        dim.append(u)\n        j = z = 0\n        for i in tmp:\n            x = res[i][0]\n            if z < x - j:\n                z = x - j\n            j = x\n            v = [u, res[i]]\n            u.append(v)\n            u = v\n            res[i].append(u)\n        v = [u, [m], None]\n        u.append(v)\n        dim.append(v)\n        if z < m - j:\n            z = m - j\n        dim.append(z)\n    l, r, wmax, u, d, hmax = dim\n    whmax = [wmax, hmax]\n    for i in range(n - 1, -1, -1):\n        x, flag, link = res[i]\n        u = whmax[flag]\n        res[i] = u * whmax[not flag]\n        link[0][2] = link[2]\n        link[2][0] = link[0]\n        v = link[2][1][0] - link[0][1][0]\n        if u < v:\n            whmax[flag] = v\n    print('\\n'.join(map(str, res)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from sys import stdin\n    w, h, n = list(map(int, stdin.readline().split()))\n    res, vrt, hor = [], [], []\n    vh = (vrt, hor)\n    for i, s in enumerate(stdin.read().splitlines()):\n        x = int(s[2:])\n        flag = s[0] == 'V'\n        vh[flag].append(i)\n        res.append([x, flag])\n    dim = []\n    for tmp, m in zip(vh, (h, w)):\n        tmp.sort(key=lambda e: res[e][0])\n        u = [None, [0]]\n        dim.append(u)\n        j = z = 0\n        for i in tmp:\n            x = res[i][0]\n            if z < x - j:\n                z = x - j\n            j = x\n            v = [u, res[i]]\n            u.append(v)\n            u = v\n            res[i].append(u)\n        v = [u, [m], None]\n        u.append(v)\n        dim.append(v)\n        if z < m - j:\n            z = m - j\n        dim.append(z)\n    l, r, wmax, u, d, hmax = dim\n    whmax = [wmax, hmax]\n    for i in range(n - 1, -1, -1):\n        x, flag, link = res[i]\n        u = whmax[flag]\n        res[i] = u * whmax[not flag]\n        link[0][2] = link[2]\n        link[2][0] = link[0]\n        v = link[2][1][0] - link[0][1][0]\n        if u < v:\n            whmax[flag] = v\n    print('\\n'.join(map(str, res)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from sys import stdin\n    w, h, n = list(map(int, stdin.readline().split()))\n    res, vrt, hor = [], [], []\n    vh = (vrt, hor)\n    for i, s in enumerate(stdin.read().splitlines()):\n        x = int(s[2:])\n        flag = s[0] == 'V'\n        vh[flag].append(i)\n        res.append([x, flag])\n    dim = []\n    for tmp, m in zip(vh, (h, w)):\n        tmp.sort(key=lambda e: res[e][0])\n        u = [None, [0]]\n        dim.append(u)\n        j = z = 0\n        for i in tmp:\n            x = res[i][0]\n            if z < x - j:\n                z = x - j\n            j = x\n            v = [u, res[i]]\n            u.append(v)\n            u = v\n            res[i].append(u)\n        v = [u, [m], None]\n        u.append(v)\n        dim.append(v)\n        if z < m - j:\n            z = m - j\n        dim.append(z)\n    l, r, wmax, u, d, hmax = dim\n    s = str(wmax * hmax)\n    for i in range(n - 1, -1, -1):\n        x, flag, link = res[i]\n        u = hmax if flag else wmax\n        res[i] = s\n        link[0][2] = link[2]\n        link[2][0] = link[0]\n        v = link[2][1][0] - link[0][1][0]\n        if u < v:\n            if flag:\n                hmax = v\n            else:\n                wmax = v\n            s = str(wmax * hmax)\n    print('\\n'.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "w, h, n = map(int, input().split())\n\nx = [0, w]\ny = [0, h]\nrev = []\n\nfor _ in range(n):\n    s, d = input().split()\n    if s == 'H':\n        y.append(int(d))\n    else:\n        x.append(int(d))\n    rev.append((s, int(d)))\n\nx.sort()\ny.sort()\n\n_max = 0\nif len(x) > 1:\n    for idx in range(len(x) - 1):\n        _max = max(_max, x[idx + 1] - x[idx])\nelse:\n    _max = w\nmax_x = _max\n\n_max = 0\nif len(y) > 1:\n    for idx in range(len(y) - 1):\n        _max = max(_max, y[idx + 1] - y[idx])\nelse:\n    _max = w\nmax_y = _max\n\nenum_x = {num : idx for idx, num in enumerate(x)}\nenum_y = {num : idx for idx, num in enumerate(y)}\n\nold_x = x\nold_y = y\n\nx = [[0, 0, 0]] * len(old_x)\ny = [[0, 0, 0]] * len(old_y)\n\nfor idx in range(1, len(x) - 1):\n    x[idx] = [old_x[idx], idx-1, idx+1]\nfor idx in range(1, len(y) - 1):\n    y[idx] = [old_y[idx], idx-1, idx+1]\n\nx[-1] = [w, 0, 0]\ny[-1] = [h, 0, 0]\n\nrev.reverse()\nans = [max_x * max_y]\nfor item in rev:\n    if item[0] == 'H':\n        elem = y[enum_y[item[1]]]\n        max_y = max(max_y, y[elem[2]][0] - y[elem[1]][0])\n        y[elem[1]][2] = elem[2]\n        y[elem[2]][1] = elem[1]\n    else:\n        elem = x[enum_x[item[1]]]\n        max_x = max(max_x, x[elem[2]][0] - x[elem[1]][0])\n        x[elem[1]][2] = elem[2]\n        x[elem[2]][1] = elem[1]\n    ans.append(max_x * max_y)\nans.pop()\nprint('\\n'.join(map(str, reversed(ans))))", "def main():\n    from sys import stdin\n    w, h, n = list(map(int, stdin.readline().split()))\n    res, vrt, hor = [], [], []\n    vh = (vrt, hor)\n    for i, s in enumerate(stdin.read().splitlines()):\n        x = int(s[2:])\n        flag = s[0] == 'V'\n        vh[flag].append(i)\n        res.append([x, flag])\n    dim = []\n    for tmp, m in zip(vh, (h, w)):\n        tmp.sort(key=lambda e: res[e][0])\n        u = [None, [0]]\n        dim.append(u)\n        j = z = 0\n        for i in tmp:\n            x = res[i][0]\n            if z < x - j:\n                z = x - j\n            j = x\n            v = [u, res[i]]\n            u.append(v)\n            u = v\n            res[i].append(u)\n        v = [u, [m], None]\n        u.append(v)\n        dim.append(v)\n        if z < m - j:\n            z = m - j\n        dim.append(z)\n    l, r, wmax, u, d, hmax = dim\n    whmax = [wmax, hmax]\n    for i in range(n - 1, -1, -1):\n        x, flag, link = res[i]\n        u = whmax[flag]\n        res[i] = u * whmax[not flag]\n        link[0][2] = link[2]\n        link[2][0] = link[0]\n        v = link[2][1][0] - link[0][1][0]\n        if u < v:\n            whmax[flag] = v\n    print('\\n'.join(map(str, res)))\n\n\ndef __starting_point():\n    main()\n\n\n\n\n# Made By Mostafa_Khaled\n\n__starting_point()", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/7/20\n\nreverse thinking of merging instead of split\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\nclass Node:\n    val = None\n\n    def __init__(self, val):\n        self.val = val\n        self.left = Node\n        self.right = None\n\n\ndef solve(W, H, N, A):\n    xs = [0] + [v for t, v in A if t == 0] + [W]\n    ys = [0] + [v for t, v in A if t == 1] + [H]\n    xs.sort()\n    ys.sort()\n\n    xlist = Node(0)\n    h = xlist\n    xnodes = {0: h}\n    maxw = max([xs[i+1] - xs[i] for i in range(len(xs)-1)] or [0])\n    maxh = max([ys[i+1] - ys[i] for i in range(len(ys)-1)] or [0])\n    for v in xs[1:]:\n        n = Node(v)\n        xnodes[v] = n\n        h.right = n\n        n.left = h\n        h = n\n        \n    ylist =  Node(0)\n    h = ylist\n    ynodes = {0: h}\n    for v in ys[1:]:\n        n = Node(v)\n        ynodes[v] = n\n        h.right = n\n        n.left = h\n        h = n\n    \n    ans = []\n    maxarea = maxh * maxw\n    for t, v in reversed(A):\n        ans.append(maxarea)\n        if t == 0:\n            node = xnodes[v]\n            w = node.right.val - node.left.val\n            maxw = max(maxw, w)\n        else:\n            node = ynodes[v]\n            h = node.right.val - node.left.val\n            maxh = max(maxh, h)\n        node.left.right = node.right\n        node.right.left = node.left\n        maxarea = maxh * maxw\n    \n    return ans[::-1]\n    \n    \ndef solve2(W, H, N, A):\n    ws = [(-W, 0, W)]\n    hs = [(-H, 0, H)]\n    iw, ih = set(), set()\n    ans = []\n    \n    xs, ys = [0, W], [0, H]\n    for t, v in A:\n        if t == 0:\n            bisect.insort_left(xs, v)\n            i = bisect.bisect_left(xs, v)\n            l, m, r = xs[i-1], xs[i], xs[i+1]\n            iw.add((l-r, l, r))\n            heapq.heappush(ws, (l - m, l, m))\n            heapq.heappush(ws, (m - r, m, r))\n            while ws[0] in iw:\n                heapq.heappop(ws)\n        else:\n            bisect.insort(ys, v)\n            i = bisect.bisect_left(ys, v)\n            l, m, r = ys[i-1], ys[i], ys[i+1]\n            ih.add((l-r, l, r))\n            heapq.heappush(hs, (l - m, l, m))\n            heapq.heappush(hs, (m - r, m, r))\n            while hs[0] in ih:\n                heapq.heappop(hs)\n        w, h = ws[0], hs[0]\n        ans.append(w[0] * h[0])\n        \n    return ans\n\n\nW, H, N = map(int,input().split())\nA = []\nfor i in range(N):\n    a, b = input().split()\n    c = 0 if a == 'V' else 1\n    A.append((c, int(b)))\n\nprint('\\n'.join(map(str, solve(W, H, N, A))))", "w,h,n=map(int,input().split())\nl=[-1]*(w+1)\nr=[-1]*(w+1)\nt=[-1]*(h+1)\nb=[-1]*(h+1)\n\nl[0]=0\nb[0]=0\nt[h]=h\nr[w]=w\n\n\nV=[0]*(n)\nH=[0]*(n)\nfor i in range(n):\n    line,index=input().split()\n    index=int(index)\n    if line==\"V\":\n        r[index]=w\n        V[i]=index\n    else:\n        t[index]=h\n        H[i]=index\n        \nleft=0\nmxw=0\nfor i in range(1,w+1):\n    if r[i]!=-1:\n        l[i]=left\n        r[left]=i\n        mxw=max(mxw,i-left)\n        left=i\n        \nbottom=0\nmxh=0\nfor i in range(1,h+1):\n    if t[i]!=-1:\n        b[i]=bottom\n        t[bottom]=i\n        mxh=max(mxh,i-bottom)\n        bottom=i\n        \nans=[0]*(n)\nans[n-1]=mxh*mxw\n\n\nfor i in range(n-1,0,-1):\n    if V[i]!=0:\n        mxw=max(mxw,r[V[i]]-l[V[i]])\n        r[l[V[i]]]=r[V[i]]\n        l[r[V[i]]]=l[V[i]]\n        \n    else:\n        mxh=max(mxh,t[H[i]]-b[H[i]])\n        b[t[H[i]]]=b[H[i]]\n        t[b[H[i]]]=t[H[i]]\n    \n    ans[i-1]=mxh*mxw\n\nfor i in range(n):\n    print(ans[i]) "]