["# python3\nfrom sys import stdin\nfrom collections import namedtuple\n\n\ndef readline(): return tuple(map(int, input().split()))\n\n\nn, a, b = readline()\nhand = [tuple(map(int, line.split())) for line in stdin.readlines()]\n\nif not b:\n    print(sum(creature[1] for creature in hand))\nelse:\n    hand.sort(key=lambda self: self[0] - self[1])\n\n    best = 0\n    if n > b:\n        l = hand[n - b]\n        lost = max(0, l[0] - l[1])\n        for creature in hand[:n-b]:\n            best = max(best, (creature[0] << a) - creature[1] - lost)\n\n    for creature in hand[max(0,n-b):]:\n        best = max(best, (creature[0] << a) - max(creature))\n\n    print((sum(creature[1] for creature in hand)\n          + sum(max(0, creature[0] - creature[1]) for creature in hand[max(0,n-b):])\n          + best))\n", "# python3\nfrom sys import stdin\n\n\ndef readline(): return tuple(map(int, input().split()))\n\n\ndef bdiff(creature): return max(0, creature[0] - creature[1])\n\n\nn, a, b = readline()\nhand = [tuple(map(int, line.split())) for line in stdin.readlines()]\n\nans = sum(creature[1] for creature in hand)  # default damage\nif b:\n    hand.sort(key=bdiff)\n\n    best = 0\n    if n > b:\n        lost = bdiff(hand[n - b])\n        for creature in hand[:n-b]:\n            best = max(best, (creature[0] << a) - creature[1] - lost)\n\n    for creature in hand[max(0,n-b):]:\n        best = max(best, (creature[0] << a) - max(creature))\n        ans += bdiff(creature)\n    ans += best\n\nprint(ans)\n", "# python3\nfrom sys import stdin\n\ndef main():\n    def parseints(line): return tuple(map(int, line.split()))\n    def bdiff(creature): return max(0, creature[0] - creature[1])\n\n    n, a, b = parseints(input())\n    hand = list(map(parseints, stdin.readlines()))\n\n    ans = sum(creature[1] for creature in hand)  # default damage\n    if b:\n        hand.sort(key=bdiff)\n\n        best = 0\n        if n > b:\n            lost = bdiff(hand[n - b])\n            for creature in hand[:n-b]:\n                best = max(best, (creature[0] << a) - creature[1] - lost)\n\n        for creature in hand[max(0,n-b):]:\n            best = max(best, (creature[0] << a) - max(creature))\n            ans += bdiff(creature)\n        ans += best\n\n    print(ans)\n\n\nmain()\n", "# python3\nfrom sys import stdin\n\ndef main():\n    def parseints(line): return tuple(map(int, line.split()))\n    def bdiff(creature): return max(0, creature[0] - creature[1])\n\n    n, a, b = parseints(input())\n    hand = list(map(parseints, stdin.readlines()))\n\n    ans = sum(creature[1] for creature in hand)  # default damage\n    if b:\n        hand.sort(key=bdiff)\n\n        best = 0\n        if n > b:\n            lost = bdiff(hand[n - b])\n            for creature in hand[:n-b]:\n                best = max(best, (creature[0] << a) - creature[1] - lost)\n\n        for creature in hand[max(0,n-b):]:\n            best = max(best, (creature[0] << a) - max(creature))\n            ans += bdiff(creature)\n        ans += best\n\n    print(ans)\n\n\nmain()", "# coding=utf-8\nfrom sys import stdin\nrd = lambda l: tuple(map(int, l.split()))\nn, a, b = rd(input())\nb = min(n, b)\ns = list(map(rd, stdin.readlines()))\n\nf = lambda x:max(0, x[0]-x[1])\ng = lambda x:(x[0]<<a)-x[1]\nans = sum(x[1] for x in s)\nmid = 0\nif b:\n    s.sort(key=f, reverse=True)\n    t = sum(f(x) for x in s[:b] )\n    for i in range(b):\n        mid = max(mid, t-f(s[i])+g(s[i]))\n    for i in range(b, n):\n        mid = max(mid, t-f(s[b-1])+g(s[i]))\n    ans += mid\nprint(ans)\n", "def main():\n    n, a, b = map(int, input().split())\n    arr = [0 for _ in range(n)]\n    brr = [0 for _ in range(n)]\n    for i in range(n):\n        arr[i], brr[i] = map(int,input().split())\n\n    p = [i for i in range(n)]\n    p.sort(key=lambda x: arr[x]-brr[x], reverse=True)\n    total = 0\n    for i in range(len(arr)):\n        if i < b:\n            total += max(arr[p[i]], brr[p[i]])\n        else:\n            total += brr[p[i]]\n\n    if b == 0:\n        print(total)\n        return\n\n    s = total\n    pp = 1 << a\n    for i in range(n):\n        ctotal = s\n        if i < b:\n            ctotal -= max(arr[p[i]], brr[p[i]])\n            ctotal += arr[p[i]] * pp\n        else:\n            ctotal -= brr[p[i]]\n            ctotal += arr[p[i]] * pp\n            ctotal -= max(arr[p[b-1]], brr[p[b-1]])\n            ctotal += brr[p[b-1]]\n        total = max(total, ctotal)\n\n    print(total)\n\n\nmain()", "def well_played():\n    n,a,b = [int(x) for x in input().split()]\n    p = [(0,0)] * n\n    b= min(b,n)\n\n    for i in range(n):\n        h,d =[int(x) for x in input().split()]\n        p[i] =(h,d)\n    p.sort(key=lambda x:x[0]-x[1],reverse=True)\n    \n    s=0\n    for i in range(b):\n        s+=max(p[i][0],p[i][1])\n    for i in range(b,n):\n        s+= p[i][1]\n    \n    ans = s\n    for i in range(b):\n        ans = max(ans,s - max(p[i][0],p[i][1]) + ((p[i][0]) <<a)  )\n    s=s - max(p[b-1][0],p[b-1][1]) + p[b-1][1]\n    if(b):\n        for i in range(b,n):\n            ans= max(ans,s - p[i][1] + ((p[i][0]) <<a) )\n    print(ans)\nwell_played() "]