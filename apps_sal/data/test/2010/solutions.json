["import sys\nn,m=list(map(int,sys.stdin.readline().split()))\n\nL=list(map(int,sys.stdin.readline().split()))\nc=0\nAns=\"\"\nfor i in range(m):\n    x=list(map(int,sys.stdin.readline().split()))\n    if(x[0]==1):\n        L[x[1]-1]=x[2]-c\n    elif(x[0]==2):\n        c+=x[1]\n    else:\n        Ans+=str(L[x[1]-1]+c)+\"\\n\"\nsys.stdout.write(Ans)\n", "##n, m = [10,11]\n##a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n##s = [[3, 2],\n##[3, 9],\n##[2, 10],\n##[3, 1],\n##[3, 10],\n##[1, 1, 10],\n##[2, 10],\n##[2, 10],\n##[3, 1],\n##[3, 10],\n##[3, 9]]\n\nn,m = [int(x) for x in input().split(' ')]\na = [int(x) for x in input().split(' ')]\n\ns = []\nfor i in range(m):\n    s.append( [int(x) for x in input().split(' ')] )\n\n\nadd = 0\nfor l in s:\n    if l[0] == 1:\n        v,x = int(l[1]), int(l[2])\n        a[v-1] = x-add\n    elif l[0] == 2:\n        y = int(l[1])\n        add += y\n    elif l[0] == 3:\n        print(a[int(l[1])-1]+add)\n", "N,M = tuple(int(i) for i in input().split())\nA = list(int(i) for i in input().split())\nAOE = 0\nout = \"\"\nfor m in range(M):\n\tval = tuple(int(i) for i in input().split())\n\tif(val[0]==1):\n\t\tind = val[1]\n\t\tx = val[2]\n\t\tA[ind-1]=x-AOE\n\telif(val[0]==2):\n\t\tAOE += val[1]\n\telif(val[0]==3):\n\t\tout += str(A[val[1]-1]+AOE) + \"\\n\"\nprint(out,end=\"\")\n", "def main():\n    n, m = list(map(int, input().split()))\n    aa = list(map(int, input().split()))\n    delta, res = 0, []\n    for _ in range(m):\n        l = list(map(int, input().split()))\n        if l[0] == 1:\n            aa[l[1] - 1] = (l[2], delta)\n        elif l[0] == 2:\n            delta += l[1]\n        else:\n            x = aa[l[1] - 1]\n            res.append(str((x[0] - x[1] if type(x) is tuple else x) + delta))\n    print('\\n'.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nres = []\ntotal_sum = 0\n\nfor i in range(m):\n    data = list(map(int, input().split()))\n    if data[0] == 1:\n        a[data[1] - 1] = data[2] - total_sum\n    else:\n        if data[0] == 2:\n            total_sum += data[1]\n        else:\n            res.append(str(a[data[1] - 1] + total_sum))\n\nprint('\\n'.join(res))\n", "def go():\n    n, m = (int(i) for i in input().split(' '))\n    a = [int(i) for i in input().split(' ')]\n    keep = 0\n    o = ''\n    for i in range(m):\n        data = tuple(int(i) for i in input().split(' '))\n        if data[0] == 1:\n            a[data[1] - 1] = data[2] - keep\n        elif data[0] == 2:\n            keep += data[1]\n        elif data[0] == 3:\n            o += '{}\\n'.format(a[data[1] - 1] + keep)\n    return o\n\nprint(go())\n", "n,q=list(map(int,input().split()))\na=list(map(int, input().split()))\nb=0\ns=''\nfor i in range(q):\n    l=list(map(int, input().split()))\n    if l[0]==3:\n        s+=str(a[l[1]-1]+b)+'\\n'\n    elif l[0]==2:\n        b+=l[1]\n    elif l[0]==1:\n        a[l[1]-1]= l[2]-b\nprint(s)\n", "n,m=map(int,input().split())\nl=list(map(int,input().split()))\nl=[0]+l\nl1=[]\nfor i in range(m):\n\tl1+=[list(map(int,input().split()))]\nk=0\nfor i in l1:\n\n\tif i[0]==1:\n\t\tl[i[1]]=i[2]\n\t\t\n\t\tl[i[1]]-=k\n\telif i[0]==2:\n\t\tk+=i[1]\n\n\telse:\n\t\tprint(l[i[1]]+k)", "n, m = list(map(int, input().split()))\narr = [int(i) for i in input().split()]\nres, s = 0, \"\"\nfor i in range(m):\n    b = [int(x) for x in input().split()]\n    if b[0] == 1:\n        arr[b[1] - 1] = b[2] - res\n    elif b[0] == 2:\n        res += b[1]\n    else:\n        s += str(arr[b[1] - 1] + res) + '\\n'\nprint(s)\n", "# coding: utf-8\n\nfrom sys import stdin\n\nN, M = list(map(int, input().split()))\n\nA = [int(a) for a in stdin.readline().split()]\n\nglobalIncreaser = 0\n\nfor i in range(M):\n    op = [int(a) for a in stdin.readline().split()]\n    opcode = op[0]\n\n    if opcode == 1:\n        opcode, v, x = op\n        A[v - 1] = x - globalIncreaser\n\n    elif opcode == 2:\n        opcode, y = op\n        globalIncreaser += y\n\n    elif opcode == 3:\n        opcode, q = op\n        print(A[q - 1] + globalIncreaser)\n", "##   int(input())\nn, m= map(int,input().split())\na = list(map(int,input().split()))\ntot = 0\nrs = []\nfor i in range(m):\n    t = list(map(int,input().split()))\n    if t[0] == 1:\n        v = t[1]\n        x = t[2]\n        a[v - 1] = x - tot\n    if t[0] == 2:\n        y = t[1]\n        tot += y\n    if t[0] == 3:\n        q = t[1]\n        rs.append(str(a[q - 1] + tot))\nprint('\\n'.join(rs))", "import sys\n\nn,m = sys.stdin.readline().split()\nn = int(n)\nm = int(m)\n\nwhile True:\n    num_arr = [int(i) for i in sys.stdin.readline().split(' ')]\n    operation_arr = []\n    last_sum = 0\n    change_map = {}\n    for i in range(0,m):\n        operation = sys.stdin.readline().split(' ')\n        id = int(operation[0])\n        if id == 1:\n            idx, value = int(operation[1]), int(operation[2])\n        else:\n            value = int(operation[1])\n\n        if id == 1:\n            operation_arr.append(last_sum)\n            change_map[idx - 1] = i\n            num_arr[idx - 1] = value\n        elif id == 2:\n            operation_arr.append(value + last_sum)\n            last_sum += value\n        elif id == 3:\n            value -= 1\n            operation_arr.append(last_sum)\n            if value in change_map:\n                print(num_arr[value] + last_sum - operation_arr[change_map[value]])\n            else:\n                print(num_arr[value] + last_sum)\n\n\n    nm = sys.stdin.readline().split()\n    if not nm:\n        break\n    else:\n        n,m = nm\n        n = int(n)\n        m = int(m)\n", "import sys\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\na = [int(x) for x in sys.stdin.readline().split()]\nincrease = 0\n\nfor i in range(m):\n    op = [int(x) for x in sys.stdin.readline().split()]\n    t = op[0] # type of operation\n    if t == 1:\n        v = op[1]\n        x = op[2]\n        a[v-1] = x - increase\n    elif t == 2:\n        y = op[1]\n        increase += y\n    elif t == 3:\n        q = op[1]\n        print(a[q-1] + increase)\n", "x,k = input().split()\nx = int(x)\nk = int(k)\n\na = list(map(int,input().split()))\nb = []\naumento = 0\n\nfor i in range(k):\n    y = list(map(int, input().split()))\n    if(y[0] == 1):\n        a[y[1]-1] = y[2] - aumento\n    elif(y[0] == 2):\n        aumento += y[1]\n    else:\n        b.append(str(a[y[1]-1] + aumento))\nprint('\\n'.join(b))\n", "values = [*list(map(int, input().split()))]\nn, m = values \narray = [*list(map(int, input().split()))]\nad = 0\nresult = []\nfor i in range(m):\n    op = [*list(map(int, input().split()))]\n    if op[0] == 1:\n        index = op[1]-1\n        array[index] = op[2] - ad\n    if op[0] == 2:\n        ad += op[1]\n    if op[0] == 3:\n        index = op[1]-1\n        result.append(str(array[index]+ad))\n \nprint('\\n'.join(result))\n", "values = [*list(map(int, input().split()))]\nn, m = values \narray = [*list(map(int, input().split()))]\nad = 0\nresult = []\nfor i in range(m):\n    op = [*list(map(int, input().split()))]\n    if op[0] == 1:\n        index = op[1]-1\n        array[index] = op[2] - ad\n    if op[0] == 2:\n        ad += op[1]\n    if op[0] == 3:\n        index = op[1]-1\n        result.append(str(array[index]+ad))\n \nprint('\\n'.join(result))\n", "firstLine = list(map(int, input().split()))\narray = list(map(int, input().split()))\n\narraySize = firstLine[0]\nnumOperations = firstLine[1]\ntotalSum = 0\ns = \"\"\n\nfor i in range(numOperations):\n    command = list(map(int, input().split()))\n    op = command[0]\n    param1 = command[1]\n\n    if(op == 1):\n      array[param1 - 1] = command[2] - totalSum\n    elif(op == 2):\n      totalSum += param1\n    else:\n      s += str(array[param1 - 1] + totalSum) + '\\n'\n\nprint(s)\n", "firstLine = list(map(int, input().split()))\narray = list(map(int, input().split()))\n\narraySize = firstLine[0]\nnumOperations = firstLine[1]\ntotalSum = 0\ns = \"\"\n\nfor i in range(numOperations):\n    command = list(map(int, input().split()))\n    op = command[0]\n    param1 = command[1]\n\n    if(op == 1):\n      array[param1 - 1] = command[2] - totalSum\n    elif(op == 2):\n      totalSum += param1\n    else:\n      s += str(array[param1 - 1] + totalSum) + '\\n'\n\nprint(s)\n\n"]