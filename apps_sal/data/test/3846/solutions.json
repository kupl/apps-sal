["#!/Library/Frameworks/Python.framework/Versions/3.6/bin/python3\n'''\nCreated on 13/09/2018\n\n@author: ernesto\n'''\n\nn, m = [int(x) for x in input().strip().split(\" \")]\n\nposibles_jefes = set(range(1, n + 1))\nanteriores = set()\nposteriores = set()\ncontinuos = [True] * (n + 1)\nmencionados = set()\nposibles_jefes_mencionados = set()\nultimo_en_salir = [True] * (n + 1)\nultima_salida_inesperada = None\n\nops = []\n\nif(m > 1):\n    for _ in range(0, m):\n        s, n_s = [x for x in input().strip().split(\" \")]\n        n = int(n_s)\n        ops.append((s, n))\n    for i in range(0, m):\n        op, num = ops[i]\n        cont = False\n        if op == '+':\n            cont = not i or (ops[i - 1][0] == '-' and ops[i - 1][1] == num)\n            posteriores.add(num)\n        if op == '-':\n            cont = i == m - 1 or (ops[i + 1][0] == '+' and ops[i + 1][1] == num)\n            if num not in mencionados:\n                anteriores.add(num)\n                ultima_salida_inesperada = num\n            posteriores.discard(num)\n            ultimo_en_salir[num] &= not posteriores\n        continuos[num] &= cont \n        mencionados.add(num)\n#    print(\"anteriores {} posteriores {} continuos {} ops {}\".format(anteriores, posteriores, continuos, ops))\n    if not anteriores and not posteriores:\n        assert ultima_salida_inesperada is None\n        if ops[0][0] == '+' and ops[-1][0] == '-' and ops[0][1] == ops[-1][1] and continuos[ops[0][1]] and ultimo_en_salir[ops[0][1]]:\n            posibles_jefes_mencionados.add(ops[0][1])\n    else:\n        if not posteriores:\n            assert ultima_salida_inesperada is not None\n            posibles_jefes_filtrados = list([x for x in anteriores if continuos[x] and ultimo_en_salir[x] and ultima_salida_inesperada == x])\n            assert len(posibles_jefes_filtrados) <= 1\n            if(posibles_jefes_filtrados):\n                assert posibles_jefes_filtrados[0] == ops[-1][1]\n                posibles_jefes_mencionados.add(ops[-1][1])\n        else:\n            if not anteriores:\n                assert ultima_salida_inesperada is None\n                posibles_jefes_filtrados = list([x for x in posteriores if continuos[x] and ultimo_en_salir[x]])\n#                print(\"posibles {}\".format(posibles_jefes_filtrados))\n                assert len(posibles_jefes_filtrados) <= 1\n                if(posibles_jefes_filtrados):\n                    assert posibles_jefes_filtrados[0] == ops[0][1]\n                    posibles_jefes_mencionados.add(ops[0][1])\n            else:\n                assert ultima_salida_inesperada is not None\n#                print(\"continuos {}\".format(continuos))\n                posibles_jefes_mencionados = set([x for x in anteriores & posteriores if ultimo_en_salir[x] and continuos[x] and ultima_salida_inesperada == x])\n\n#    print(\"posibles jefes menc {}\".format(posibles_jefes_mencionados))\n    posibles_jefes -= (mencionados - posibles_jefes_mencionados)\n        \nprint(len(posibles_jefes))\nif(len(posibles_jefes)):\n    print(\" \".join(map(str, sorted(posibles_jefes))))\n"]