["def read_ints():\n\treturn [int(i) for i in input().split()]\n\ncoords = read_ints()\na, b, c = [(coords[i], coords[i + 1]) for i in range(0, len(coords), 2)]\ndef length_sqr(a, b):\n\treturn (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n\nif length_sqr(a, b) != length_sqr(b, c):\n\tprint('No')\nelif (c[0] - b[0]) * (b[1] - a[1]) == (c[1] - b[1]) * (b[0] - a[0]):\n\tprint('No')\nelse:\n\tprint('Yes')", "x1, y1, x2, y2, x3, y3 = map(int, input().split())\nab = (x1 - x2) ** 2 + (y1 - y2) ** 2\nbc = (x3 - x2) ** 2 + (y3 - y2) ** 2\nif (x1 - x2) * (y3 - y2) - (x3 - x2) * (y1 - y2) == 0 or ab != bc:\n    print('No')\nelse:\n    print('Yes')", "def dist(x1,x2,y1,y2):\n\treturn (x1-x2)**2 + (y1-y2)**2\n\nax,ay,bx,by,cx,cy = map(int,input().split())\nif ((by-ay)*(cx-bx) == (cy-by)*(bx-ax)):\n\tprint('No')\nelse:\n\tif(dist(ax,bx,ay,by) == dist(bx,cx,by,cy)):\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')", "ax,ay,bx,by,cx,cy = map(int,input().split())\n\ndx1, dy1 = ax-bx, ay-by\ndx2, dy2 = bx-cx, by-cy\n\n# parallel\nif dx1*dy2 == dx2*dy1 or dx1**2+dy1**2 != dx2**2+dy2**2:\n  print('No')\nelse:\n  print('Yes')", "from math import sqrt\n\nax,ay,bx,by,cx,cy = [int(i) for i in input().split()]\nif (ax-bx)**2+(ay-by)**2 != (bx-cx)**2+(by-cy)**2:\n    print(\"No\")\nelif abs((ax-bx)*(bx-cx)+((ay-by)*(by-cy)))**2== ((ax-bx)**2+(ay-by)**2)* ((bx-cx)**2+(by-cy)**2):\n    print(\"No\")\nelse:\n    print(\"Yes\")", "ax, ay, bx, by, cx, cy = map(int, input().split())\nux = cx - bx\nuy = cy - by\nvx = bx - ax\nvy = by - ay\n\nif uy*vx == vy*ux or ux**2 + uy**2 != vx**2 + vy**2:\n\tprint(\"No\") \nelse:\n\tprint(\"Yes\")", "import sys\nax,ay,bx,by,cx,cy=map(int,input().split())\nif (ax-bx)**2+(ay-by)**2==(bx-cx)**2+(by-cy)**2 and (by-ay)*(cx-bx)!=(cy-by)*(bx-ax):\n    print (\"Yes\")\nelse:\n    print (\"No\")", "ax, ay, bx, by, cx, cy = map(int, input().split())\n\nif (ax - bx) * (cy - by) == (ay - by) * (cx - bx):\n\tprint('No')\nelif ((ax - bx) ** 2 + (ay - by) ** 2) == ((bx - cx) ** 2 + (by - cy) ** 2):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")", "ax,ay,bx,by,cx,cy = list(map(int, input().split()))\n\nabx = (ax-bx)\naby = (ay-by)\ncbx = (cx-bx)\ncby = (cy-by)\n\ncross = abx*cby - aby*cbx\n\nif ((ax-bx)**2 + (ay-by)**2) == (bx-cx)**2 + (by-cy)**2 and cross != 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "ax, ay, bx, by, cx, cy = list(map(int, input().split()))\n\ndef r(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef line(x3, y3, x1, y1, x2, y2):\n    if (x3 - x1) * (y2 - y1) == (y3 - y1) * (x2 - x1):\n        return True\n    return False\n\nif r(ax, ay, bx, by) == r(bx, by, cx, cy) and not line(ax, ay, bx, by, cx, cy):\n    print('Yes')\nelse:\n    print('No')\n          \n", "x1, y1, x2, y2, x3, y3 = list(map(int, input().split(' ')))\n\ndef main():\n    b1 = (x2 - x1) ** 2 + (y2 - y1) ** 2 == (x3 - x2) ** 2 + (y3 - y2) ** 2\n    b2 = (y3 - y1) * (x2 - x1) != (y2 - y1) * (x3 - x1)\n\n    return b1 and b2\n\nprint('Yes' if main() else 'No')\n", "a, b, c, d, e, f = map(int, input().split())\nk = (c - e) ** 2 + (d - f) ** 2\n#print(k, (a - e) ** 2 + (b - f) ** 2)\nif (a - c) ** 2 + (b - d) ** 2 == k and (a - e) ** 2 + (b - f) ** 2 != k * 4:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "def get_len_sq(a, b):\n    return (a[0] - b[0])**2 + (a[1] - b[1])**2\n\n\nax, ay, bx, by, cx, cy = list(map(int, input().split()))\na = (ax, ay)\nb = (bx, by)\nc = (cx, cy)\nf = get_len_sq\nif f(a,b) == f(b,c):\n    if a[0]+c[0] == 2*b[0] and a[1]+c[1] == 2*b[1]:\n        print('No')\n    else:\n        print('Yes')\nelse:\n    print('No')\n", "def readln(): return list(map(int, input().rstrip().split()))\n\n\nax, ay, bx, by, cx, cy = readln()\ndab = (bx - ax) ** 2 + (by - ay) ** 2\ndbc = (cx - bx) ** 2 + (cy - by) ** 2\n\nif dab != dbc:\n    print('No')\n    return\n\nif (by - ay) * (cx - bx) == (cy - by) * (bx - ax):\n    print('No')\n    return\n\nprint('Yes')\n", "ax, ay, bx, by, cx, cy = input().split()\nax, ay, bx, by, cx, cy = int(ax), int(ay), int(bx), int(by), int(cx), int(cy)\n\nlAB = (bx - ax)**2 + (by - ay)**2\nlBC = (cx - bx)**2 + (cy - by)**2\n\nif lAB == lBC and (by - ay)*(cx - bx) != (cy - by)*(bx - ax):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "l = list([int(x) for x in input().split()])\nax, ay, bx, by, cx, cy = l\nd1 = (ax - bx) ** 2 + (ay - by) ** 2\nd2 = (cx - bx) ** 2 + (cy - by) ** 2\nsame_line = cx * (by - ay) - cy * (bx - ax) == ax * by - bx * ay\nprint(\"Yes\" if (d1 == d2 and not same_line) else \"No\")\n", "def isTria(a,b,c,d,e,f):\n    if abs(a*d-b*c+c*f-d*e+e*b-a*f) == 0:\n        return 0\n    else:\n        return 1\n\ndef length(a,b,c,d):\n    return (d-b)**2+(c-a)**2\n\nax,ay,bx,by,cx,cy=list(map(int,input().split()))\nif not isTria(ax,ay,bx,by,cx,cy):\n    print('No')\nelse:\n    if length(ax,ay,bx,by) == length(bx,by,cx,cy):\n        print('Yes')\n    else:\n        print('No')\n", "ax,ay,bx,by,cx,cy = map(int,input().split())\nab2 = (ax-bx)**2+(ay-by)**2\nbc2 = (bx-cx)**2+(by-cy)**2\nans = (ab2==bc2) and ((cy-by)*(bx-ax)!=(by-ay)*(cx-bx))\nprint(\"Yes\") if ans else print(\"No\")", "ax, ay, bx, by, cx, cy = map(int, input().split())\nBab = ax - bx\nAab = by - ay\nCab = -1 * Aab * ax - Bab * ay\nif Aab * cx + Bab * cy + Cab == 0:\n    print(\"No\")\nelse:\n    ab = (ax - bx) ** 2 + (ay - by) ** 2\n    ac = (ax - cx) ** 2 + (ay - cy) ** 2\n    bc = (by - cy) ** 2 + (bx - cx) ** 2\n    if ab == bc:\n        print(\"Yes\")\n    else:\n        print(\"No\")", "from math import *\n\nax, ay, bx, by, cx, cy = list(map(int, input().split()))\n\nl1 = (bx - ax)**2 + (by - ay)**2\nl2 = (cx - bx)**2 + (cy - by)**2\ndx = bx - ax\ndy = by - ay\n\nif l1 != l2:\n    print('No')\nelif cx == bx + dx and cy == by + dy:\n    print('No')\nelse:\n    print('Yes')\n", "\n\nfrom math import fabs\n\n\nEPS = 10 ** -6\n\ndef equal(a, b):\n    return fabs(a - b) < EPS\n\n\ndef dist_sq(ax, ay, bx, by):\n    return (ax - bx) * (ax - bx) + (ay - by) * (ay - by)\n\n\ndef triangle_area(ax, ay, bx, by, cx, cy):\n    return ax * (by - cy) + bx * (cy - ay) + cx * (ay - by)\n\n\ndef main():\n    ax, ay, bx, by, cx, cy = (int(x) for x in input().split())\n\n    if (equal(dist_sq(ax, ay, bx, by), dist_sq(bx, by, cx, cy)) and\n        not equal(triangle_area(ax, ay, bx, by, cx, cy), 0.0)):\n            print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]