["# import sys\n# sys.stdin = open('cf591b.in')\n\nn, m = map(int, input().split())\ns = input()\n\nperm = list(range(26))\n\nv = ord('a')\n\nfor _ in range(m):\n\tss = input()\n\ti, j = (ord(ss[0]) - v, ord(ss[2]) - v)\n\tperm[i], perm[j] = perm[j], perm[i]\n\nrev = [perm.index(c) for c in range(26)]\nprint(''.join(chr(rev[ord(c) - v] + v) for c in s))", "A = list(\"abcdefghijklmnopqrstuvwxyz\")\nn, m = map( int, input().split() )\nname = input()\n\nfor i in range( m ) :\n    s = input()\n    x, y = s[0], s[2]\n\n    x_index = A.index( x )\n    y_index = A.index( y )\n\n    A[x_index], A[y_index] = A[y_index], A[x_index]\n\nfor c in name :\n    index = ord( c ) - ord( 'a' )\n    print( A[index], end='')\n", "n, m = list(map(int, input().split(' ')[:2]))\ns = input()[:n]\n\nls = {}\n\nfor c in s:\n    ls[c] = c\n\nfor i in range(m):\n    x, y = input().split(' ')[:2]\n    if x not in ls:\n        ls[x] = x\n    if y not in ls:\n        ls[y] = y\n    ls[x], ls[y] = ls[y], ls[x]\n\nrev = {}\nfor c, v in list(ls.items()):\n    rev[v] = c\n\nprint(''.join([rev[c] for c in s]))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nN,M = list(map(int,input().split()))\nname=input()\n\ntable = [0] * 26\nfor i in range(26):\n    table[i] = i\n\nbuffs = []\nfor _ in range(M):\n    before,after = list(map(ord, input().split()))\n    before -= ord('a')\n    after -= ord('a')\n    buffs.append((before,after))\nbuffs.reverse()\n\nfor pair in buffs:\n    table[pair[0]], table[pair[1]] = table[pair[1]], table[pair[0]]\n\nret = \"\"\nfor ch in name:\n    ret += chr( table[ ord(ch) - ord('a') ] + ord('a') )\n\nprint(ret)    \n\n\n\n    \n    \n", "import sys\n\n\n#sys.stdin = open(\"input.txt\")\n#sys.stdout = open(\"output.txt\", \"w\")\n\nn, m = [int(x) for x in input().split()]\ns = input()\nc1 = ord('a')\nc2 = ord('z')\nma = [i for i in range(c2-c1+1)]\nwhere = [i for i in range(c2-c1+1)]\nfor i in range(m):\n\tcf, cs = [ord(c) for c in input().split()]\n\twcf = where[cf - c1]\n\twcs = where[cs - c1]\n\tma[wcf], ma[wcs] = ma[wcs], ma[wcf]\n\twhere[cf - c1], where[cs - c1] = where[cs - c1], where[cf - c1]\n\nans = []\nfor c in s:\n\tcur = ord(c)\n\tans.append(chr(ma[cur-c1] + c1))\n\nprint(''.join(ans))\n\n", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2015 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\n\nfrom string import ascii_lowercase\nl = ascii_lowercase\n\n[n, m] = list(map(int, input().split()))\ns = input()\n\na = [None] * n\n\nfor i in range(n):\n    a[i] = l.index(s[i])\n\nalpha = [i for i in range(26)]\n\nfor i in range(m):\n    al, bl = input().split()\n\n    ai = l.index(al)\n    bi = l.index(bl)\n\n    ai = alpha.index(ai)\n    bi = alpha.index(bi)\n\n    alpha[ai], alpha[bi] = alpha[bi], alpha[ai]\n\n\nfor i in range(n):\n    print(l[alpha[a[i]]], end=\"\")\nprint()\n", "3\n\nc = 26*[0]\nind = 26*[0]\nfor i in range(26):\n\tc[i] = chr(i+97)\n\tind[i] = i\nn,m = map(int, input().split())\ns = input()\nsize = len(s)\ns1 = size*[0]\nfor _ in range(m):\n\tx,y = input().split()\n\tc[ind[ord(x)-97]] = y\n\tc[ind[ord(y)-97]] = x\n\tind[ord(x)-97],ind[ord(y)-97] = ind[ord(y)-97],ind[ord(x)-97]\nfor i in range(size):\n\ts1[i] = c[ord(s[i])-97]\nprint (('').join(s1))", "import string\nN, M = list(map(int, input().split()))\nS = input()\ndic = string.ascii_lowercase\nfor _ in range(M):\n    x, y = input().split()\n    dic = dic.translate(str.maketrans(x+y, y+x))\nprint(S.translate(str.maketrans(string.ascii_lowercase, dic)))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn, m = list(map(int,input().split()))\nS = input()\nchar = {chr(i) : chr(i) for i in range(ord('a'), ord('z')+1 )}\nkeys = list(char.keys())\n\nfor i in range(m):\n    x, y = input().split()\n    for c in keys:\n        if char[c] == x:\n            char[c] = y\n        elif char[c] == y:\n            char[c] = x\n\nans = []\nfor c in list(S):\n    ans.append(char[c])\nprint(''.join(ans))\n", "import sys\nimport string\nread = lambda: list(map(int, sys.stdin.readline().split()))\n\nn, m = read()\ns = sys.stdin.readline().strip()\ndesign = {c:c for c in string.ascii_lowercase}\nfor i in range(m):\n   a, b = sys.stdin.readline().split()\n   design[a], design[b] = design[b], design[a]\ndesign2 = {b:a for a,b in list(design.items())}\nprint(''.join(design2[c] for c in s))\n\n", "n, m = list(map(int, input().split()))\ns = input()\nk = []\na = ['' for i in range(m)]\nb = ['' for i in range(m)]\nans = [0 for i in range(n)]\nfor i in range(n):\n    k.append(s[i])\nd = {}\nfor i in range(26):\n    d[chr(ord('a') + i)] = 0\nfor i in range(m):\n    a[i], b[i] = list(map(str, input().split()))\n\nfor i in range(26):\n    cur = chr(ord('a') + i)\n    for j in range(m):\n        if a[j] == cur or b[j] == cur:\n            if a[j] == cur:\n                cur = b[j]\n            else:\n                cur = a[j]\n    d[chr(ord('a') + i)] = cur\nused = [True for i in range(n)]\nfor i in range(26):\n    for j in range(n):\n        if s[j] == chr(ord('a') + i) and used[j] == True:\n            ans[j] = d[chr(ord('a') + i)]\n            used[j] = False\nprint(''.join(str(i) for i in ans))\n            \n    \n", "\nn, m = list(map(int, input().split()))\n\nalpha_cnst = list(\"abcdefghijklmnopqrstuvwxyz\")\nalpha = list(\"abcdefghijklmnopqrstuvwxyz\")\n\ns = input()\n\nfor i in range(m) :\n    a, b = input().split()\n    for j in range(len(alpha)) :\n        if alpha[j] == a : alpha[j] = b\n        elif alpha[j] == b : alpha[j] = a\ntotal = ''\nfor char in s :\n    total += alpha[alpha_cnst.index(char)]\nprint(total)\n", "n, m = map(int, input().split())\ns = input()\n\nd = {}\nfor i in \"abcdefghijklmnopqrstuvwxyz\":\n    d[i] = []\n\nfor j, l in enumerate(s):\n    d[l].append(j)\n\nfor i in range(m):\n    xi, yi = input().split()\n    d[xi], d[yi] = d[yi], d[xi]\n\nr = {}\nfor k, v in d.items():\n    for pos in v:\n        r[pos] = k\n\nfor l in sorted(r.items()):\n    print(l[1], end=\"\")\n", "def solve():\n    N, M = list(map(int, input().split()))\n    name = input()\n\n    td = {}\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        td[c] = c\n\n    for i in range(M):\n        p, m = input().split()\n        if p == m:\n            continue\n        pt = td[p]\n        mt = td[m]\n        del td[p]\n        del td[m]\n        td[m] = pt\n        td[p] = mt\n\n    nd = {f: t for t, f in list(td.items())}\n\n    ans = ''.join([nd[c] for c in name])\n\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "n, m = map(int,input().split())\nin_s = input()\nrenames_str = [input() for i in range(m)]\n\nrule = {}\nrule_inv = {}\nfor i in range(26):\n\tc = chr(ord('a') + i)\n\trule[c] = c\n\trule_inv[c] = c\n\nfor x in renames_str:\n\ta, b = x.split()\n\tfor k,v in rule.items():\n\t\tif v == a:\n\t\t\trule[k] = b\n\t\tif v == b:\n\t\t\trule[k] = a\n\nfor c in in_s:\n\tprint(rule[c], end=\"\")\nprint()\n", "#In the name of Allah\n\nfrom sys import stdin, stdout\ninput = stdin.readline\nd = {'x': 'x', 'y': 'y', 'z': 'z', 'p': 'p', 'q': 'q', 'r': 'r', 's': 's', 't': 't', 'u': 'u', 'v': 'v', 'w': 'w', 'h': 'h', 'i': 'i', 'j': 'j', 'k': 'k', 'l': 'l', 'm': 'm', 'n': 'n', 'o': 'o', 'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f', 'g': 'g'}\nn, m = list(map(int, input().split()))\n\ns = input()\n\nxy = [input()for i in range(m)]\n\nfor i in d:\n        t = i\n        for j in xy:\n                if j[0] == t:\n                        t = j[2]\n                elif j[2] == t:\n                        t = j[0]\n        d[i] = t\n                        \n        \nfor i in range(n):\n        stdout.write(d[s[i]])\n\n", "import string\n\nn,m = map(int, input().split())\ns = input()\n\nchars = string.ascii_lowercase\n\nfor _ in range(m):\n    a,b = input().split()\n    chars = chars.replace(a, \"%\").replace(b,a).replace(\"%\",b)\n\nreplacements = {ord(string.ascii_lowercase[i]):chars[i] for i in range(26)}\n\nprint(s.translate(replacements))", "from math import sqrt, pow, log, log2, log10, exp\nfrom copy import deepcopy\nfrom fractions import gcd\n\n\ndef read_ints():\n    return list(map(int, input().split()))\n\n\ndef read_int():\n    return read_ints()[0]\n\n\ndef read_floats():\n    return list(map(float, input().split()))\n\n\ndef read_float():\n    return read_floats()[0]\n\n\ndef format_list(l):\n    return ' '.join(list(map(str, l)))\n\n\ndef one_dim_array(n, value=0):\n    return [deepcopy(value) for x in range(n)]\n\n\ndef two_dim_array(n, m, value=0):\n    return [[deepcopy(value) for x in range(m)] for x in range(n)]\n\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, sqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef max_len_sublist(l, f):\n    start, max_length, length = 0, 0, 0\n    for i in range(1, len(l)):\n        if f(l[i], l[i - 1]):\n            length += 1\n        else:\n            if max_length < length:\n                start = i - length\n                max_length = length\n            length = 0\n    return start, max_length\n\n\ndef tf_to_yn(b):\n    return 'YES' if b else 'NO'\n\n\ndef longest_non_descent_subsequence(s, restore_sequence=False):\n    d = one_dim_array(len(s), 0)\n    for i in range(len(s)):\n        possible = [d[j] + 1 if s[j] <= s[i] else 1 for j in range(i)]\n        d[i] = 1 if len(possible) == 0 else max(possible)\n\n    if not restore_sequence:\n        return d[-1] if len(d) != 0 else 0\n\n\ndef update_ch(ch, f, t):\n    addedf = False\n    addedt = False\n    for key in list(ch.keys()):\n        value = ch[key]\n        if value == f:\n            ch[key] = t\n            addedf = True\n        if value == t:\n            ch[key] = f\n            addedt = True\n    if not addedf:\n        ch[f] = t\n    if not addedt:\n        ch[t] = f\n\n    return ch\n\n\nn, m = read_ints()\ns = list(input())\nch = {}\n\nfor i in range(1, m + 1):\n    f, t = input().split()\n    if f != t:\n        update_ch(ch, f, t)\n\n\ndef map_with_ch(ch, x):\n    if x in ch:\n        return ch[x]\n    else:\n        return x\n\n\nprint(''.join(list([map_with_ch(ch, x) for x in s])))\n", "n,m=list(map(int,input().split()))\ns=input()\np=[chr(i) for i in range(97,97+26)]\nfor i in range(m):\n    a,b=input().split()\n    for i in range(26):\n        if p[i]==a: p[i]=b\n        elif p[i]==b: p[i]=a\nprint(\"\".join([p[ord(x)-97] for x in s]))\n", "inp=input().strip().split()\nn,m=int(inp[0]),int(inp[1])\ns=input().strip()\nd={}\nfor i in range(n):\n    if(s[i] in d):\n        d[s[i]].append(i)\n    else:\n        d[s[i]]=[i]\n\nfor i in range(m):\n    inp=input().strip().split()\n    l0,l1=[],[]\n    b0,b1=False,False\n    if(inp[0] in d):\n        #l0=d[inp[0]]\n        b0=True\n    if(inp[1] in d):\n        #l1=d[inp[1]]\n        b1=True\n    if(b0 and b1):\n        d[inp[0]],d[inp[1]]=d[inp[1]],d[inp[0]]\n    elif(b0 and (not b1)):\n        d[inp[1]]=d[inp[0]]\n        del(d[inp[0]])\n    elif(b1 and (not b0)):\n        d[inp[0]]=d[inp[1]]\n        del(d[inp[1]])\n        \n        \n\nans=[0]*n\nfor key in d.keys():\n    for i in d[key]:\n        ans[i]=key\n\nfor ctmp in ans:\n    print(ctmp,end='')\nprint()\n            \n    \n", "n,m = list(map(int, input().split()))\nch = str(input())\nres = [ch[k] for k in range(n)]\nX = [\"\" for _ in range(m)]\nY = [\"\" for _ in range(m)]\nfor k in range(m):\n    s = str(input()) \n    X[k] = s[0]\n    Y[k] = s[2]\n\nal = \"abcdefghijklmnopqrstuvwxyz\"\nA = [al[k] for k in range(26)]\nB = A[:]\nfor k in range(m):\n    a = A.index(X[k])\n    b = A.index(Y[k])\n    c = A[a]\n    A[a] = A[b]\n    A[b] = c            \nfor j in range(n):\n    a = B.index(res[j])\n    res[j] = A[a]\n    \nch = \"\"\nfor k in range(n):\n    ch  = ch + res[k]\nprint(ch)\n", "import string\nn, m = input().split()\nn, m = [int(n), int(m)]\nname = input()\nname = list(name)\nbuffer = {}\nfor ch in list(string.ascii_lowercase):\n  buffer[ch] = [] \nfor i in range(n):\n  buffer[name[i]].append(i)\nfor j in range(m):\n  xi, yi = input().split()\n  temp = buffer[xi]\n  buffer[xi] = buffer[yi]\n  buffer[yi] = temp\nfor key, value in list(buffer.items()):\n  for i in value:\n    name[i] = key\nname = \"\".join(name)\nprint(name)\n", "n, m = map(int, input().split())\noriginal_name = input()\nchanges = [input().split() for _ in range(m)]\n\noriginal_char_dict_list = sorted(list(set(original_name)))\nmodified_char_dict_list = sorted(list(set(original_name)))\n\nfor pair in changes:\n    for i, c in enumerate(modified_char_dict_list):\n        if c == pair[0]:\n            modified_char_dict_list[i] = pair[1]\n        elif c == pair[1]:\n            modified_char_dict_list[i] = pair[0]\n\ndictionary = {c: modified_char_dict_list[i] for i, c in enumerate(original_char_dict_list)}\nname_list = list(original_name)\n\nfor i, c in enumerate(name_list):\n    name_list[i] = dictionary[c]\n\nprint(''.join(name_list))", "n, m = list(map(int, input().split()))\ns = input()\norig = 'abcdefghijklmnopqrstuvwxyz'\nafter = orig\nfor _ in range(m):\n    xi, yi = input().split()\n    after = after.translate(str.maketrans(xi + yi, yi + xi))\n\nprint(s.translate(str.maketrans(orig, after)))\n", "n, m = map(int, input().split())\ns = input()\nw = list(range(26))\nfor i in range(m):\n    a, b = input().split()\n    c, d = ord(a) - ord('a'), ord(b) - ord('a')\n    w[c], w[d] = w[d], w[c]\nt = { chr(w[c] + ord('a')): chr(c + ord('a')) for c in range(26) }\nfor c in s:\n    print(t[c], end=\"\")\nprint()\n"]