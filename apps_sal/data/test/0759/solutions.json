["from math import ceil\n\nhh, mm = [int(x) for x in input().split()]\n\nh, d, c, n = [int(x) for x in input().split()]\n\ncost = 0.8 * c if hh >= 20 else c\n\nres = int(ceil(h / n)) * cost\n\nif hh < 20:\n    diff = (20 - hh) * 60 - mm\n    diff *= d\n    h += diff\n    res = min(res, int(ceil(h / n)) * 0.8 * c)\n    \nprint(res)\n", "import getpass\nimport sys\nimport math\nfrom decimal import Decimal\nimport decimal\n\nfiles = True\ndebug = False\n\nif getpass.getuser() == 'frohenk' and files:\n    debug = True\n    sys.stdin = open(\"test.in\")\n    # sys.stdout = open('test.out', 'w')\nelif files:\n    # fname = \"gift\"\n    # sys.stdin = open(\"%s.in\" % fname)\n    # sys.stdout = open('%s.out' % fname, 'w')\n    pass\n\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\ndef range_sum(a, b):\n    ass = (((b - a + 1) // 2) * (a + b))\n    if (a - b) % 2 == 0:\n        ass += (b - a + 2) // 2\n    return ass\n\n\ndef comba(n, x):\n    return (math.factorial(n) // math.factorial(n - x)) // math.factorial(x)\n\n\nh, m = ria()\ntime = h * 60 + m\nofferTime = max(20 * 60 - time, 0)\n\nh, d, c, n = ria()\nmini = math.ceil(h / n) * c\n\nh+=offerTime*d\n\nmini = min(math.ceil(h / n) * c*0.8,mini)\nprint(mini)\n", "h,m = map(int, input().split())\nk,d,c,n =map(int, input().split())\nfrom math import ceil\nif h >= 20:\n    print(ceil(k/n)*(c*0.8))\nelse:\n    a1 = ceil(k/n)*c\n    r = 60*(20-h) - m\n    a2 = (ceil((k+r*d)/n))*(c*0.8)\n    print(min(a1,a2))", "hh, mm = [int(v) for v in input().split()]\nH, D, C, N = [int(v) for v in input().split()]\n\ndef dvru(a, b):\n    return (a + b - 1) // b\n\nif hh >= 20:\n    print(dvru(H, N) * (C * 0.8))\nelse:\n    c1 = dvru(H, N) * C\n    t = (20 - hh - 1) * 60 + (60 - mm)\n    c2 = dvru(H + t * D, N) * (C * 0.8)\n    print(min(c1, c2))\n", "from math import ceil\nh, m = list(map(int, input().split()))\nH, d, c, n = list(map(float, input().split()))\nif h >= 20:\n    print(round(ceil(H / n) * c * 0.8, 3))\nelse:\n    print(round(min(ceil(H / n) * c, ceil(((20 * 60 - h * 60 - m) * d + H) / n) * c * 0.8), 3))\n", "from math import ceil\nh,m = list(map(int,input().split()))\nH,D,C,N = list(map(int,input().split()))\n\ndiff = max(0,20*60 - (h*60+m))\n\nans = min( ceil(H/N)*C, ceil((H+diff*D)/N)*0.8*C )\n\nprint(ans)\n", "hh, mm = list(map(int, input().split()))\ncurminutes = hh * 60 + mm\n\nh, d, c, n = list(map(int, input().split()))\n\ncost_now = ((h + n - 1) // n) * c\n\nthenminutes = 20 * 60\nif thenminutes <= curminutes:\n    print(cost_now * 0.8)\nelse:\n    hunger_then = (thenminutes - curminutes) * d + h\n    # print('now', cost_now)\n    print(min(cost_now, (hunger_then + n - 1) // n * c * 0.8))\n", "def f(a,b):\n    if  a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\n\nhh,mm = map(int,input().split())\nh,d,c,n = map(int,input().split())\nt = hh * 60 + mm\nif t >= 20 * 60:\n    print(c * f(h,n) * 0.8)\nelse:\n    print(min(c * f(h,n),c * 0.8 * f((20 * 60 - t) * d + h,n) ))", "import math\nh, m = list(map(int,input().split()))\nH,D,C,N = list(map(int,input().split()))\nmn = (20-h)*60-m\nif mn < 0: mn = 0\na1 = C*math.ceil(H/N)\na2 = C*0.8*math.ceil((H+mn*D)/N)\nprint(min(a1,a2))\n", "def div(a, b):\n    return a // b + int(a % b != 0)\n\nhh, mm = list(map(int, input().split()))\nh, d, c, n = list(map(int, input().split()))\nwait = 0\nif hh < 20:\n    wait = 60 * (20 - hh - 1) + 60 - mm\nprint(0.2 * min(div(h, n) * c * 5, div(wait * d + h, n) * c * 4))\n", "h, m = list(map(int, input().split()))\nH, D, C, N = list(map(int, input().split()))\nafter = C * 0.8\nans = (H + N - 1) // N * C\ntm = h * 60 + m\ntm1 = 20 * 60 + 0\ntm2 = 23 * 60 + 59\nif tm1 <= tm <= tm2:\n    print('{:.16f}'.format((H + N - 1) // N * after))\nelse:\n    tm3 = tm1 - tm\n    print('{:.16f}'.format(min(ans, (H + N - 1 + D * tm3) // N * after)))\n", "hh, mm = list(map(int, input().split()))\n\nh, d, c, n = list(map(int, input().split()))\n\nif hh >= 20:\n\tc *= 0.8\n\tcost1 = cost2 = (h + n - 1) // n * c\nelse:\n\tcost1 = (h + n - 1) // n * c\n\th += (20 * 60 - hh * 60 - mm) * d\n\tc *= 0.8\n\tcost2 = (h + n - 1) // n * c\n\nprint('{:.10f}'.format(min(cost1, cost2)))\n", "import math\narr=list(map(str,input().strip().split(' ')))\nn=int(arr[0])\nt=int(arr[1])\n\nh,d,c,nn= (list(map(int,input().strip().split(' '))))\nif(n>=20):\n  price=.8*c*math.ceil(h*1.0/nn*1.0)\n  print(price)\nelse:\n  hunger = (20*60-n*60-t)*d+h\n  # print(hunger,(20*60-n*60-t)*d,h,n)\n  price=min(.8*c*math.ceil(hunger*1.0/nn*1.0),math.ceil(h*1.0/nn*1.0)*c)\n  print(price)\n", "from math import gcd, floor, ceil\nfrom random import randrange\ndef li():\n    return list(map(int, input().split()))\nh, m = li()\ncur, d, c, n = li()\nif 60 * h + m < 20 * 60:\n    an = ((cur + n - 1) // n) * c\n    cur += (20 * 60 - 60 * h - m) * d\n    c *= 0.8\n    an = min(an, c * ((cur + n - 1) // n))\nelse:\n    c *= 0.8\n    an = c * ((cur + n - 1) // n)\nprint(an)\n", "h, m = map(int, input().split());\ng, u, s, k = map(int, input().split());\nd20 = ((g + k - 1) // k) * s;\nv = (20 - h - 1) * 60 + (60 - m);\nif v < 0:\n    v = 0;\ns2 = s - s / 5;\np20 = ((g + v * u + k - 1) // k) * s2;\nprint(min(d20, p20));", "hh, mm = map(int, input().split())\nh, d, c, n = map(int, input().split())\nx = (h + n - 1) // n * c\ny = (h + d * max(0, 20 * 60 - (hh * 60 + mm)) + n - 1) // n * c * 0.8\nprint(min(x, y))", "h, m = list(map(int, input().split()))\ncur, d, c, n = list(map(int, input().split()))\nans = (cur // n)* c\nif (cur%n!=0):\n    ans+=c\ntime = h * 60 + m\nif (time < 20*60):\n    cur += d*(20*60 - time)\nans1 = (cur//n)*0.8*c\nif (cur%n!=0):\n    ans1+=0.8*c\nans = min(ans, ans1)\nprint(\"%.4f\" % ans)\n", "R = lambda : list(map(int, input().split()))\n\nhh,mm = R()\nh,d,c,n = R()\n\nimport math\ncb = math.ceil((h*1.0)/n)*c\n\nmn = hh*60+mm\ne = 20*60\n\ndp = c*0.8\n\nif (mn<=e):\n    nh = h+d*(e-mn)\n    cb = min(cb,math.ceil((nh*1.0)/n)*dp)\nelse:\n    cb = cb*0.8\n\nprint(cb)\n", "from math import ceil\nh, m = list(map(int, input().split()))\nH, D, C, N = list(map(int, input().split()))\nif h >= 20:\n    print(0.8 * C * ceil(H / N))\nelse:\n    minutes = 20 * 60 - h * 60 - m\n    no_wait = C * ceil(H / N)\n    with_wait = 0.8 * C * ceil((H + D * minutes) / N)\n    print(min(with_wait, no_wait))\n", "import math\n\nto_min = lambda h, m: h * 60 + m\n\nhh, mm = list(map(int, input().split()))\nh, d, c, n = list(map(int, input().split()))\n\nt = to_min(hh, mm)\ndt = to_min(20, 0)\n\nif t < dt:\n    dh = ((dt - t) * d) + h\n    dp = math.ceil(dh/n)\n    p = math.ceil(h/n)\n    print(min(0.8*dp*c, p*c))\nelse:\n    print(0.8*c*math.ceil(h/n))\n", "h,m = list(map(int,input().split()))\nhu,d,c,n = list(map(int,input().split()))\nif h >= 20:\n    if hu % n != 0:\n        hu = hu + n-hu%n\n    print((hu*4*c)/(5*n))\nelse:\n    lhu = hu\n    p = float('inf')\n    if hu % n != 0:\n        hu = hu + n-hu%n\n    p = min(p,hu*c/n)\n    #print(p)\n    hu = lhu+((19-h)*60+(60-m))*d\n    if hu % n != 0:\n        hu = hu + n-hu%n\n    p = min(p,(hu*c*4)/(5*n))\n    print(p)\n", "hour, minut = map(int, input().split())\nh, d, c, n = map(float, input().split())\ntime = hour * 60 + minut\nind = 0\nans = 100000000000000000000000000000000000000000000000000000\nwhile time < 24 * 60:\n    hungr = h + ind * d\n    if time >= 20 * 60:\n        price = c * 0.8\n        if hungr % n == 0:\n            a = (hungr // n) * price\n        else:\n            a = (hungr // n + 1) * price\n    else:\n        price = c * 1\n        if hungr % n == 0:\n            a = (hungr // n) * price\n        else:\n            a = (hungr // n + 1) * price\n    if a < ans:\n        ans = a\n    time += 1\n    ind += 1\nprint(ans)", "from math import ceil\n\nhh, mm = list(map(int, input().split()))\nH, D, C, N = list(map(int, input().split()))\n\ntime_now = 60 * hh + mm\ntime_sale = 60 * 20\n\nd_time = time_sale - time_now\nc = 0.8 * C\n\nif d_time <= 0:\n    print('{:.4f}'.format(ceil(H / N) * c))\n\nelse:\n    print('{:.4f}'.format(min(ceil(H / N) * C, ceil((H + D * d_time) / N) * c)))\n", "import math\nhh,mm = [int(x) for x in input().split()]\nh,d,c,n = [int(x) for x in input().split()]\nif hh>=20:\n    print(0.8*c*math.ceil(h/n))\nelse:\n    print(min(0.8*c*math.ceil(((((20-hh)*60-mm)*d)+h)/n),c*math.ceil(h/n)))"]