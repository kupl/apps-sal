["#!/usr/bin/env python\n\ndef main():\n    s = int(input())\n    mod = 10**9 + 7\n    a_lst = [1, 0, 0]\n    a_sum = 0\n\n    if s >= 3:\n        for i in range(3, s+1):\n            a_sum += a_lst[i-3]\n            a_sum %= mod\n            a_lst.append(a_sum)\n\n    print((a_lst[s]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def cmb(n, r, p):\n    r = min(r, n - r)\n    upper = 1\n    for i in range(n, n - r, -1):\n        upper = (upper * i) % p\n\n    lower = 1\n    for i in range(1, r + 1):\n        lower = (lower * i) % p\n\n    # \u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\u3088\u308ap\u7d20\u6570\u306a\u3089upper**(p-2)\u306f\u9006\u5143\n    return (upper * pow(lower, p - 2, p)) % p\n\nn = int(input())\nmod = pow(10, 9) + 7\nm = n // 3\nans = 0\n\nfor i in range(1, m + 1):\n    x = n - 3 * i\n    ans += cmb(x+i-1, i-1, mod)\n    ans %= mod\n\nprint(ans)", "N = int(input())\ndp = [0] * 200000\ndp[0]=0\ndp[1]=0\ndp[2]=0\ndp[3]=1\nfor i in range(4,N+1):\n    dp[i] = dp[i-1] + dp[i-3]\nprint(dp[N] % (10**9 + 7))", "from scipy.special import comb\nS = int(input())\nans = 0\nmod = 10**9+7\nfor i in range(3, S+1, 3):\n  ans = (ans +comb(S-2*(i//3)-1, i//3-1, exact=True)) % mod \nprint(ans)\n", "s=int(input())\nnum=[1,0,0]\nfor i in range(s-2):\n    num=[num[1],num[2],num[0]+num[2]]\nprint(num[2]%(10**9+7))", "mod = 10**9 + 7\ns = int(input())\n\ndp = [0]*(s+1)\ndp[0] = 1\nfor i in range(1,s+1):\n  for j in range(0,(i-3)+1):\n    dp[i] += dp[j]\n    dp[i] %= mod\n    \nprint(dp[s])", "mod = 10**9 + 7\nfact = [1]\nfor i in range(1, 2001):\n    fact.append(i * fact[-1] % mod)\ninv = [pow(i, mod - 2, mod) for i in fact]\n\ndef ncr(n, r):\n    return fact[n] * inv[r] * inv[n - r] % mod\n\ns = int(input())\nans = 0\nfor i in range(1, s // 3 + 1):\n    ans += ncr(s - 3 * i + i - 1, i - 1)\nprint((ans % mod))\n", "# -*- coding: utf-8 -*-\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    s = int(input())\n    mod = 10 ** 9 + 7\n    dp = [0 for _ in range(s + 1)]\n    dp[0] = 1\n\n    # KeyInsight:\n    # \u6570\u5b57\u3092\u7403\u304c\u9023\u7d9a\u3057\u3066\u4e26\u3093\u3067\u3044\u308b\u72b6\u614b\u306b\u8a00\u3044\u63db\u3048\u308b\n    # dp[i]: \u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\u3002\u4e21\u7aef\u3082\u542b\u3081\u308b\u3002\n    for i in range(1, s + 1):\n        for j in range(i - 3 + 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\n\n    print((dp[s]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def solve():\n    a = 10**9 + 7\n    s = int(input())\n    dp = [0] * (s+1)\n    dp[0] = 1\n    for i in range(3, s+1):\n        dp[i] = (dp[i-1] + dp[i-3]) % a\n    \n    print(dp[s])\n \nsolve()", "s = int(input())\ndp = [0] * (s + 4)\nmod = 1000000007\ndp[0] = 1\ndp[1] = 0\ndp[2] = 0\ndp[3] = 1\nif s < 4:\n    print(dp[s])\nelse:\n    for i in range(4, s + 1):\n        dp[i] = (dp[i - 1] + dp[i - 3]) % mod\n    print(dp[s])", "# -*- coding utf-8 -*-\n\nMOD = 10 ** 9 + 7\n\nS = int(input())\n\nif S < 3:\n    print((0))\n    return\n\ndp = [1] * (S + 1)\ndp[0] = 0\ndp[1] = 0\ndp[2] = 0\n\nfor i in range(3, S - 2):\n    for j in range(i + 3, S + 1):\n        dp[j] += dp[i]\n        dp[j] %= MOD\n\nans = dp[S]\n\nprint(ans)\n", "def __starting_point():\n    S = int(input())\n    MOD = 10**9 + 7\n    if S < 3:\n        print((0))\n        return\n    dp = [0]*(S+1)\n    dp[0] = 1\n    for s in range(3, S+1):\n        for t in range(s-3, -1, -1):\n            dp[s] += dp[t]\n            dp[s] %= MOD\n    print((dp[S]))\n\n__starting_point()", "## D\ns=int(input())\ndp=[0,0,0,1]\nx=10**9+7\nfor i in range(4,s+1):\n    dp.append((dp[i-1]+dp[i-3])%x)\nprint(dp[s])", "s=int(input())\nt=1 if s>=3 else 0\nm=10**9+7\nS=[1]+[0]*2000\n\nfor i in range(1,2000):\n  S[i]=S[i-1]*i\n\nfor i in range(2,s//3+1):\n  t=(t+S[s-2*i-1]//S[i-1]//S[s-3*i])%m\n\nprint(t)\n", "S = int(input())\nmod = 10**9 + 7\ndp = [0] * (S+1)\ndp[0] = 1\nx = 0\nfor i in range(1,S+1,1):\n  if i >= 3:\n    x += dp[i-3]\n    x %= mod\n  dp[i] = x\nans = dp[S]\nprint(ans % mod)", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    S = int(input())\n    mod = 7 + 10 ** 9\n    DP = [0] * (S + 1)\n    DP[0] = 1\n    for i in range(S):\n        if DP[i] == 0: continue\n        for j in range(3, S + 1):\n            if i + j > S: break\n            DP[i + j] += DP[i]\n            DP[i + j] %= mod\n    print(DP[S])\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "s = int(input())\nMOD =10**9 +7\n\ndp = [1]*(s+2)\ndp[1] = 0\ndp[2] = 0\n\nif s < 6:\n    print((dp[s]))\n    return\n\nfor i in range(6,s+1):\n    dp[i] = (dp[i-1] + dp[i-3])%MOD\n\n\nprint((dp[s]))\n", "S = int(input())\nMOD = 10**9+7\nDP = [0]*2001\nDP[0] = 1\nfor i in range(3, S + 1):\n    DP[i] = DP[i - 1] + DP[i - 3]\n    DP[i] %= MOD\nprint(DP[S])", "S = int(input())\na, b, c = 1, 0, 0\nfor n in range(S):\n    a, b, c = b, c, (a+c)%(10**9+7)\nprint(a)", "S=int(input())\nans=[0]*(S+1)\nMOD=10**9+7\n\nif S<=2:\n    print(0)\n    return\nelif S==3:\n    print(1)\n    return   \nans[3]=1\nfor i in range(4,S+1):\n    ans[i]=ans[i-1]+ans[i-3]\n\nprint(ans[i]%MOD)", "base = 10**9 + 7\ndef comb_mod(n, r, MOD=base):\n    if n < 0 or r < 0 or n < r:\n        return 0\n\n    factrial = [1] * (n+1)\n    for k in range(1, n+1):\n        factrial[k] = (factrial[k-1] * k) % MOD\n\n    fact_inv = [1] * (n+1)\n    fact_inv[n] = pow(factrial[n], MOD - 2, MOD)\n    for k in range(n-1, -1, -1):\n        fact_inv[k] = (fact_inv[k+1] * (k+1)) % MOD\n\n    return (factrial[n] * fact_inv[r] * fact_inv[n-r]) % MOD\n\ns = int(input())\nout = 0\nn = s // 3\nfor i in range(1, n + 1):\n  out += comb_mod(s - 3*i + i - 1, i - 1)\nprint(out % base)", "def hoge(n):\n  if n == 1 or n == 2:\n    return 0\n  if n == 3:\n    return 1\n  t = [0,0,1]\n  for i in range(4,n+1):\n    a = t[-1] + t[-3]\n    a = a%(10**9+7)\n    t.append(a)\n  return t[-1]\n\n\nn = int(input())\nprint(hoge(n))", "import math\nmod = 10 ** 9 + 7\n\ndef fact(s, k):\n    f = math.factorial(s - 2 * k - 1) // math.factorial(s - 3 * k)\n    f //= math.factorial(k - 1)\n    return f % mod\n\ns = int(input())\n\nans = 0\nfor i in range(1, s // 3 + 1):\n    ans += fact(s, i)\nans %= mod\n\nprint(ans)", "def calculate(n):\n    arr = [0 for i in range(2000 + 1)]\n    arr[3] = 1\n    arr[4] = 1\n    arr[5] = 1\n\n    for i in range(6, n + 1):\n        arr[i] = (arr[i - 2] + arr[i - 3] + arr[i - 4]) % (1000000000 + 7)\n    print(arr[n])\n\n\ncalculate(int(input()))", "MOD = 10**9 + 7\nS = int(input())\n\ndp = [0] * (S+1)\ndp[0] = 1\n# print(dp)\nfor i in range(1, S+1):\n    for j in range(0, (i-3)+1):\n\n        dp[i] += dp[j]\n        # dp[i] %= MOD\n        # print(i, j, dp[i], dp)\n\nprint((dp[S]%MOD))\n", "import math\n\ns = int(input())\nl = s//3\ncount = 0\n\nfor i in range(1,l+1):\n    count += math.factorial(s-3*i+i-1)//(math.factorial(i-1)*math.factorial(s-3*i))\n    #print(math.factorial(s-3*i+i-1)/(math.factorial(i-1)*math.factorial(s-3*i)))\n\nprint(count%(10**9+7))", "from sys import stdin\n\ndef main():\n    input = stdin.readline\n\n    s = int(input())\n    dp = [0] * (s + 1)\n    dp[0] = 1\n    for i in range(s):\n        if dp[i] == 0:\n            continue\n        for x in range(3, s + 1):\n            if i + x <= s:\n                dp[i + x] += dp[i]\n                dp[i + x] %= 1000000007\n            else:\n                break\n    print(dp[s])\nmain()", "def calculate(n):\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 1\n    MOD = 1000000000 + 7\n    for i in range(1, n+1):\n        x = 0\n        for j in range(i - 3 + 1):\n            x += (dp[j] % MOD)\n        dp[i] = x\n\n    print((dp[n] % MOD))\n\n\ncalculate(int(input()))\n", "s=int(input())\nk=s//3\nans=0\nmod=10**9+7\nmod=10**9+7\ndef comb(x,y):\n    s=1\n    t=1\n    for i in range(1,y+1):\n        s=s*(x-i+1)%mod\n        t=t*i%mod\n    return (s*pow(t,mod-2,mod))%mod\n\nfor i in range(1,k+1):\n  ans+=comb(s-3*i+i-1,i-1)\n  ans%=mod\nprint(ans)", "s = int(input())\n\nmod = 10 ** 9 + 7\n\nmaxV = 2000\ndp = [0]*(maxV + 1)\n\nfor i in range(s+1):\n    if i==0:\n        dp[i] = 1\n    elif 0 < i < 3:\n        dp[i] = 0\n        continue\n    for j in range(i-3 + 1):\n        dp[i] += (dp[j]) % mod\n    # dp[i-1] + dp[i-3]\n\nprint(dp[s] % mod)", "s = int(input())\ndp = [0] * (s + 4)\nmod = 1000000007\ndp[0] = 1\ndp[1] = 0\ndp[2] = 0\ndp[3] = 1\nif s < 4:\n    print(dp[s])\nelse:\n    dp[0] = 1\n    dp[1] = 0\n    dp[2] = 0\n    dp[3] = 1\n    for i in range(4, s + 1):\n        dp[i] = (dp[i - 1] + dp[i - 3]) % mod\n    print(dp[s])", "from scipy.special import comb\nS=int(input());print(sum(comb(S-2*i-3,i,1)for i in range(S//3))%(10**9+7))", "import math\ndef H(n, r):\n    return math.factorial(n+r-1) // (math.factorial(n-1) * math.factorial(r))\nS=int(input())\ns=0\ni=1\nwhile S//i>2:\n  s+=H(i,S-3*i)\n  i+=1\nprint(s%(10**9+7))", "#a,b,c,d = map(int, input().split())\ns = int(input())\nd = [[0]*(s+1) for i in range((s+2)//3+1)]\nd[0][0] = 1\nans = 0\n\nMOD = 1000000007\n\nfor i in range((s+2)//3):\n\tsum = 0\n\tfor js in range(s+1):\n\t\tif 3 <= js:\n\t\t\tsum += d[i][js-3]\n\t\tsum %= MOD\n\t\td[i+1][js] += sum\n\t\td[i+1][js] %= MOD\n\tans += d[i+1][s]\nprint((ans % MOD))\n", "s=int(input())\nL=[1,1,1]\nif s<3:\n  print(0)\nelif s<6:\n  print(1)\nelif 6<=s:\n  for i in range(s-5):\n    L.append((L[-1]+L[-3])%(10**9+7))\n  print(L[-1])", "s = int(input())\n\nans = 0\ndp = [1, 0, 0]\n\nif s ==1 or s == 2:\n    ans = 0\nelse:\n    for i in range(3, s+1):\n        dpi = 0\n        for j in range(i-2):\n            dpi += dp[j]\n            dpi = dpi % ((10**9) + 7)\n        dp.append(dpi)\nprint(dp[s])", "def extgcd(a,b):\n    r = [1,0,a]\n    w = [0,1,b]\n    while w[2] != 1:\n        q = r[2]//w[2]\n        r2 = w\n        w2 = [r[0]-q*w[0],r[1]-q*w[1],r[2]-q*w[2]]\n        r = r2\n        w = w2\n    return [w[0],w[1]]\ndef mod_inv(a,mod):\n    x = extgcd(a,mod)[0]\n    return (mod + x % mod)% mod\ndef comb(n,k,mod):\n    c = 1\n    for i in range(k):\n        c = c*(n-i)%mod\n        c = c*mod_inv(i+1,mod)%mod\n    return c\ns = int(input())\nn = s//3\nmod = 10**9 + 7\nans = 0\nfor i in range(n):\n    m = i+1\n    c = s - m*3\n    now = comb(c+i,i,mod)\n    #print(now)\n    ans += now\n    ans %= mod\nprint(ans)", "s = int(input())\n\nmod = 1000000007\n\nd = [1,0,0]\n\nfor i in range(s-2):\n\td = [d[1], d[2], (d[0]+d[2])%mod]\n\nprint((d[2]))\n", "S = int(input())\nmod = 10 ** 9 + 7\n\ndp = [0] * (S + 1)\ndp[0] = 1\n\nx = 0\nfor i in range(1,S+1):\n    if i-3 >= 0:\n        x += dp[i-3]\n        x %= mod\n    dp[i] = x\n\nprint(dp[S])", "# -*- coding: utf-8 -*-\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    s = int(input())\n    mod = 10 ** 9 + 7\n    dp = [0 for _ in range(s + 1)]\n    dp[0] = 1\n    total = 0\n\n    # KeyInsight:\n    # \u6570\u5b57\u3092\u7403\u304c\u9023\u7d9a\u3057\u3066\u4e26\u3093\u3067\u3044\u308b\u72b6\u614b\u306b\u8a00\u3044\u63db\u3048\u308b\n    # dp[i]: \u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\u3002\u4e21\u7aef\u3082\u542b\u3081\u308b\u3002\n    # \u9ad8\u901f\u5316: \u7d2f\u7a4d\u548c\u3092\u4fdd\u5b58\u3059\u308b\u5909\u6570\u3092\u7528\u610f & \u5dee\u5206\u306e\u307f\u3092\u66f4\u65b0\n\n    # See:\n    # https://www.youtube.com/watch?v=yLkJZXkB6D0&feature=youtu.be\n    for i in range(1, s + 1):\n        if (i - 3) >= 0:\n            total += dp[i - 3]\n\n        dp[i] += total\n        dp[i] %= mod\n\n    print((dp[s]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def __starting_point():\n    S = int(input())\n    MOD = 10**9 + 7\n    if S < 3:\n        print((0))\n        return\n    dp = [0]*(S+1)\n    dp[0] = 1\n    for s in range(3, S+1):\n        dp[s] = (dp[s-3] + dp[s-1]) % MOD\n    print((dp[S]))\n\n__starting_point()", "s = int(input())\nmod = 10 ** 9 + 7\nN = 10 ** 6  # N \u306f\u5fc5\u8981\u5206\u3060\u3051\u7528\u610f\u3059\u308b\nfact = [1, 1]  # fact[n] = (n! mod p)\nfactinv = [1, 1]  # factinv[n] = ((n!)^(-1) mod p)\ninv = [0, 1]  # factinv \u8a08\u7b97\u7528\n \ndef cmb(n, r, mod):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % mod\n    \nfor i in range(2, N + 1):\n    fact.append((fact[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod // i)) % mod)\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n    \nans = 0\nn = 1\nwhile s - 3 * n >= 0:\n    ans += cmb(s - 3 * n + n - 1, n - 1, mod)\n    n += 1\nprint(ans % mod)", "import sys\ninput=sys.stdin.readline\n\ndef main():\n    MOD = 10**9+7\n    S = int(input())\n    dp = [0 for i in range(S+1)]\n    dp[0] = 1\n    \n    for i in range(S+1):\n        for j in range(3, S+1):\n           if i+j > S: break\n           dp[i+j] += dp[i]\n           dp[i+j] %= MOD\n        \n    print(dp[-1])\n    \ndef __starting_point():\n    main()\n__starting_point()", "# -*- coding: utf-8 -*-\n\n# \u5165\u529b\u3092\u6574\u6570\u306b\u5909\u63db\u3057\u3066\u53d7\u3051\u53d6\u308b\ndef input_int():\n    return int(input())\n\n\n# \u30de\u30a4\u30ca\u30b91\u3057\u305f\u5024\u3092\u8fd4\u5374\ndef int1(x):\n    return int(x) - 1\n\n\n# \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u5165\u529b\u3092Int\u306b\u5909\u63db\u3057\u3066Map\u3067\u53d7\u3051\u53d6\u308b\ndef input_to_int_map():\n    return list(map(int, input().split()))\n\n\n# \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u5165\u529b\u3092Int\u306b\u5909\u63db\u3057\u3066\u53d7\u3051\u53d6\u308b\ndef input_to_int_tuple():\n    return tuple(map(int, input().split()))\n\n\n# \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u5165\u529b\u3092Int\u306b\u5909\u63db\u3057\u3066\u30de\u30a4\u30ca\u30b91\u3057\u305f\u5024\u3092\u53d7\u3051\u53d6\u308b\ndef input_to_int_tuple_minus1():\n    return tuple(map(int1, input().split()))\n\n\ndef main():\n    S = input_int()\n    mod = 10 ** 9 + 7\n    ans_list = [0] * 2001\n    ans_list[0] = 0\n    ans_list[1] = 0\n    ans_list[2] = 0\n    ans_list[3] = 1\n\n    for i in range(4, S + 1):\n        ans_list[i] = ans_list[i - 1] + ans_list[i - 3]\n        ans_list[i] %= mod\n    print((ans_list[S]))\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "mod = 10**9 + 7\n\ndef comb(n, r):\n    r = min(r, n - r)\n    a = b = 1\n    for _ in range(r):\n        a *= n; b *= r\n        a %= mod; b %= mod\n        n -= 1; r -= 1\n    return a * pow(b, mod - 2, mod) % mod\n\n\nS = int(input())\n\nans = 0\nn = 1\nwhile 3 * n <= S:\n    r = S - 3 * n\n    ans += comb(n + r - 1, r)\n    ans %= mod\n    n += 1\n\nprint(ans)\n", "s = int(input())\n\nmod = 10 ** 9 + 7\n\ndp = [0] * (s + 1)\ndp[0] = 1\ndp[1] = 0\n\nif s > 1:\n    dp[2] = 0\n\n    for i in range(3, s + 1):\n        dp[i] = sum(dp[:i - 2]) % mod\n\nprint(dp[s])", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nS = int(input())\n\ndef mod(num):\n    return num % (10 ** 9 + 7)\n\ndp = [0] * (S + 10)\n\ndp[0] = 1\n\nif S < 3:\n    print(0)\n    return\n\nfor i in range(3, S + 10):\n    dp[i] = mod(dp[i - 1] + dp[i - 3])\n\nprint(dp[S])", "import math\ndef C(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nn = int(input())\ns = n // 3\na = 0\nif(s >= 1):\n    for i in range(1, s+1):\n        t = n - 3*i\n        a += C(t+i-1, i-1)\n    print((a%1000000007))\nelse:\n    print((0))\n", "s = int(input())\ncnt = 0\nMOD = 10 ** 9 + 7\n\nfact = [0] * 3000\nfact_inv = [0] * 3000\nfact[0] = 1\n\nfor i in range(1,3000):\n    fact[i] = fact[i-1] * i % MOD\nfact_inv[3000 - 1] = pow(fact[3000 - 1], MOD - 2, MOD)\n\nfor i in range(3000 - 1, 0, -1):\n    fact_inv[i-1] = fact_inv[i] * i % MOD\n\ndef nCk(n,k):\n    return fact[n] * fact_inv[k] * fact_inv[n-k] % MOD\n\nfor n in range(1,s):\n    if n * 3 > s:\n        break\n    cnt += nCk(s-3*n+n-1, n-1)\n    cnt %= MOD\n\nprint(cnt)", "MOD = 10**9 + 7\nMAX = 10**5 + 1\n\nfact = [0 for _ in range(MAX)]\nfactinv = [0 for _ in range(MAX)]\n\nfact[0] = 1\nfor k in range(1, MAX):\n    fact[k] = fact[k - 1]*k\n    fact[k] %= MOD\n\nfactinv[MAX - 1] = pow(fact[MAX - 1], MOD - 2, MOD)\nfor k in range(MAX - 1, 0, -1):\n    factinv[k - 1] = factinv[k]*k\n    factinv[k - 1] %= MOD\n\ndef nCk(n, k):\n    return fact[n]*factinv[k]*factinv[n - k] % MOD\n\ndef nPk(n, k):\n    return fact[n]*factinv[n - k] % MOD\n\nS = int(input())\nans = 0\nfor n in range(1, S):\n    if 3*n > S  : break\n    # print(ans)\n    ans += nCk(S - 3*n + n - 1, n - 1)\n    ans %= MOD\n\nprint(ans)", "s = int(input())\ndp = [0] * (max(s+1,6))\ndp[3],dp[4],dp[5] = 1,1,1\nx = 1\nfor i in range(6,s+1):\n    dp[i] = (x+1) % (10**9+7)\n    x += dp[i-2]\nprint(dp[s])", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\ns = int(input())\n\ntmp = 0\nres = 0\n\nA = [0 for i in range(s + 1)]\nfor i in range(s + 1):\n    if i == 0:\n        A[i] = 1\n    elif i == 1 or i == 2:\n        A[i] = 0\n    else:\n        A[i] = sum(A[:i - 2]) % MOD\nres = A[s]\n\nprint(res)\n", "num = (1,0,0)\nfor _ in range(int(input()) - 2):\n    num = (num[1],num[2],num[0]+num[2])\n    \nprint(num[2]%(10**9+7))", "S = int(input())\n\nif S < 3:\n    print((0))\n    return\n\nans = [0 for _ in range(2001)]\n\nans[3] = 1\nans[4] = 1\nans[5] = 1\n\nfor i in range(6, S+1):\n    ans[i] = ans[i-3] + ans[i-1]\n\nprint((ans[S] % 1000000007))\n", "import sys\namount = int(input())\n\nlst1 = [3,4,5]\nif amount in lst1:\n    print((1))\n    return\nelif amount < 6:\n    print((0))\n    return\n\ncoins = [x for x in range(3,amount+1)]\n\nlst = [amount+1 for x in range(amount+1)]\n\nlst[0] = 1\nlst[1] = 0\nlst[2] = 0\nlst[3] = 1\nlst[4] = 1\nlst[5] = 1\n\n\nfor i in range(6,amount+1):\n    counter = 0\n    for coin in coins:\n        change = i - coin\n\n        if change >= 0:\n            counter += lst[change]\n    lst[i] = counter\n\nprint((lst[-1] % (10**9 + 7)))\n\n\n", "#a,b,c,d = list(map(int, input().split()))\ns = int(input())\n\nmod = 1000000007\nd = [0]*(s+1)\nd[0] = 1\n\nsum = 0\nfor i in range(s+1):\n\tif 3 <= i:\n\t\tsum += d[i-3]\n\t\tsum %= mod\n\td[i] += sum\n\nprint((d[s]))\n", "s = int(input())\n\nmod = 10**9 + 7\n\nif s<3:\n    print(0)\n    return\n\ndp=[0]*(s+1)\ndp[0] = 1\n\nfor i in range(3, s+1):\n    dp[i] = (dp[i-3] + dp[i-1]) % mod\n\nprint(dp[s])", "S=int(input())\na = [0]*(S+1)\na[0] = 1\nfor i in range(3,S+1):\n  a[i] = (a[i-1] + a[i-3]) % (10**9+7)\nif S==0:\n  print((0))\nelse:\n  print((a[S]))\n", "MOD = 10**9 + 7\nS = int(input())\n\ndp = [0] * (S+1)\ndp[0] = 1\nfor i in range(1, S+1):\n    for j in range(0, (i-3)+1):\n        dp[i] += dp[j]\n        dp[i] %= MOD\n\nprint(dp[S])", "s = int(input())\nmod = 10**9+7\ndp = [0] * 2001\ndp[0] = 1\n\nfor i in range(3, s+1):\n    dp[i] = dp[i-1] + dp[i-3]\n    dp[i] %= mod\n\nprint(dp[s])", "MOD = 10**9 + 7\n\ndef combi(n, r):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % MOD\n\nN = 2000\nfact = [1, 1]\nfactinv = [1, 1]\ninv = [0, 1]\n \nfor i in range(2, N+1):\n    fact.append((fact[-1] * i) % MOD)\n    inv.append((-inv[MOD % i] * (MOD // i)) % MOD)\n    factinv.append((factinv[-1] * inv[-1]) % MOD)\n\nS = int(input())\n\ncnt = 0\nfor i in range(1, S):\n    if 3*i > S:\n        break\n    x = S - 3*i\n    c = combi(x+i-1, i-1)\n    # print(x, i, c)\n    cnt = (cnt + c) % MOD\n\nprint(cnt)", "S = int(input())\nmod = 10**9 + 7\n\ndp = [0] * (S+1)\ndp[0] = 1\nx = 0\nfor i in range(1,S+1,1):\n  if i >= 3:\n    x += dp[i-3] % mod\n  dp[i] = x % mod\n\nans = dp[S] % mod\nprint(ans)", "B=10**9+7\ns=int(input())\n\nx = [0, 0, 1, 1, 1, 2, 3]\n\nfor i in range(2000):\n    n = (x[-1] + x[-3])%B\n    x.append(n)\n\nprint(x[s-1])", "import math\n\ndef c(n, r):\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\ndef p(n, r):\n    if n < r:\n        return 0\n    return math.factorial(n) // math.factorial(n - r)\n\ndef h(n, r):\n    return c(n + r - 1, r)\n\ns = int(input())\nn = math.floor(s / 3)\nout = 0\nfor i in range(n):\n    out += h(i + 1, s - (i + 1) * 3)\nprint(out % 1000000007)", "import math\ns = int(input())\nmaxn = s//3\nans=0\nfor i in range(1,maxn+1):\n  b = s-3*i\n  ans += math.factorial(b+i-1)//(math.factorial(b)*math.factorial(i-1))\nprint(ans%(10**9+7))", "S = int(input())\nmod= 10**9+7\ndp = [0]* (S+1)\ndp[0] = 1\n\nfor i in range(3,S+1):\n    dp[i] = dp[i-3] + dp[i-1]\n\nprint(dp[S]%mod)", "S=int(input())\n\nl=[0,0,0,1,1,1,2,3,4]\n\nif S<=8:\n    print((l[S]))\n\nelse:\n\n    x=0\n\n    for i in range(9,S+1):\n        x+=l[i-3]\n        l.append(x+4)\n\n    print((l[S]%(10**9+7)))\n\n        \n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n                \n            \n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n    \n\n        \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n        \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n\n\n    \n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n", "s = int(input())\nMOD = 10**9+7\ndp = [0] * (s+1)\ndp[0] = 1\nfor i in range(s+1):\n    for j in range(0, i-3+1):\n        dp[i] += dp[j]\n        dp[i] %= MOD\n\nprint((dp[s]))\n", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\nMOD = 10**9 + 7\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nimport bisect\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    S =i_input()\n\n    ans = 0\n    S -= 3\n    if S >= 0: # 1\u3064\u306e\u30b1\u30fc\u30b9\n        ans += 1\n\n    S -= 3\n    cnt = 1\n    while S>=0:\n        t = math.factorial(S+cnt) // math.factorial(S) // math.factorial(cnt)\n        ans += t\n        ans %= MOD\n        S -= 3\n        cnt += 1\n    print((ans%MOD))\n\n\n \ndef __starting_point():\n    main()\n\n__starting_point()", "# author:  Taichicchi\n# created: 20.09.2020 11:13:28\n\nimport sys\n\nfrom math import factorial\n\nfrom scipy.special import comb\n\nMOD = 10 ** 9 + 7\n\nS = int(input())\n\nm = S // 3\n\ncnt = 0\n\nfor n in range(1, m + 1):\n    cnt += int(comb(S - 3 * n + 1, n - 1, exact=True, repetition=True)) % MOD\n\ncnt %= MOD\n\nprint(cnt)\n", "import sys\n\n# D - Redistribution\nS = int(input())\n\nif S < 3:\n  print(0)\nelif S < 6:\n  print(1)\nelse:\n  dp = [0] * (S + 1)\n\n  dp[3] = 1\n  dp[4] = 1\n  dp[5] = 1\n\n  for i in range(6, S + 1):\n    dp[i] = 1\n\n    for j in range(i - 2):\n      dp[i] += dp[j]\n\n    dp[i] %= 10 ** 9 + 7\n\n  print(dp[S])", "n = int(input())\nmod = 10**9 + 7\n\nif n <= 2:\n    print(0)\n    return\n\ndp = [0 for i in range(n+1)]\ndp[0] = 1\n\nfor i in range(3, n+1):\n    dp[i] = (dp[i-3] + dp[i-1])%mod\n\nprint(dp[n]%mod)", "n=int(input())\nmod=10**9+7\ndp=[0]*2001\ndp[0]=1\nsdp=[0]*2001\nsdp[0]=1\nfor i in range(2000):\n  dp[i+1]=sdp[i-2]\n  sdp[i+1]=dp[i+1]+sdp[i]\nprint(dp[n]%mod)", "s = int(input())\nmod = 10**9+7\nA = [0,0,0,1] + [0]*2000\n\nfor i in range(4,s+1):\n    A[i] = (A[i-1]+A[i-3])%mod\n\nprint(A[s])", "s = int(input())\nmod = 10 ** 9 + 7\nN = 10 ** 6  # N \u306f\u5fc5\u8981\u5206\u3060\u3051\u7528\u610f\u3059\u308b\nfact = [1, 1]  # fact[n] = (n! mod p)\nfactinv = [1, 1]  # factinv[n] = ((n!)^(-1) mod p)\ninv = [0, 1]  # factinv \u8a08\u7b97\u7528\n \ndef cmb(n, r, mod):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % mod\n    \nfor i in range(2, N + 1):\n    fact.append((fact[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod // i)) % mod)\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n    \nn = 1\nans = 0\nwhile s - 3 * n >= 0:\n    ans += cmb(s - 3 * n + (n - 1), n - 1, mod)\n    n += 1\nprint(ans % mod)", "def abc178_d():\n    def combi_mod_prime(n, k, p):\n        ''' nCk % p (p\u306f\u7d20\u6570) '''\n        a = 1\n        b = 1\n        for i in range(k):\n            a = a * (n-i) % p\n            b = b * (i+1) % p\n        return a * pow(b, p-2, p) % p\n\n    s = int(input())\n    mod = 10**9 + 7\n    ans = 0\n    for k in range(1, s//3 + 1):\n        x = s - (3*k)\n        ans += combi_mod_prime(x+k-1, k-1, mod)\n        ans %= mod\n    print(ans)\n\ndef __starting_point():\n    abc178_d()\n__starting_point()", "import numpy as np\n\nmemory = {}\n\ndef recursive(n):\n    if n < 3:\n        return 0\n    if n <= 5:\n        return 1\n    catch = memory.get(n)\n    if catch is not None:\n        return catch\n    peterns = 1\n    for i in range(3, n-3+1):\n        peterns += recursive(n-i)\n    memory[n] = peterns\n    return peterns\n\ndef __starting_point():\n\n    input_str = input()\n    s = int(input_str)\n    ans = recursive(s)\n    print((ans % (10**9 + 7)))\n\n__starting_point()", "S=int(input())\nif S<3:\n  print(0)\nelse:\n  count=[0]*(S+1)\n  count[0]=1\n  for i in range(3, S+1):\n    count[i]=count[i-1]+count[i-3]\n  print((count[S])%(10**9+7))", "# coding: utf-8\n# Your code here!\nS=int(input())\n\ndp=[0 if i<3 else 1 for i in range(S+1)]\n\n\nfor i in range(3,S-1):\n    for j in range(i+3,S+1):\n        dp[j]+=dp[i]\n        dp[j]%=(10**9+7)\n\nprint(dp[-1])", "mod=1000000007\ndp=[1]*2001\nfor i in range(3,2001):\n\tfor j in range(i+3,2001):\n\t\tdp[j]=(dp[j]+dp[i])%mod\nn=int(input())\nif n<3:print(0)\nelse:print(dp[n])", "s = int(input())\nmod = 1000000007\ndp = [0]*(s+1)\ndp[0] = 1\nfor i in range(3,s+1):\n    for j in range(i-2):\n        dp[i] += dp[j]\n        dp[i] %= mod\nprint(dp[s])", "S = int(input())\nmod = 10**9 + 7\ndp = [0] * (S+1)\ndp[0] = 1\nx = 0\nfor i in range(1,S+1,1):\n  if i >= 3:\n    x += dp[i-3]\n    x %= mod\n  dp[i] = x % mod\nans = dp[S] % mod\nprint(ans)", "s = int(input())\n\nMOD = 10**9 + 7\nMAX = 2000 + 5\nfact = [1] * (MAX + 1)  # i!\nfinv = [1] * (MAX + 1)  # (i!)^{-1}\niinv = [1] * (MAX + 1)  # i^{-1}\nfor i in range(2, MAX + 1):\n    fact[i] = fact[i - 1] * i % MOD\n    iinv[i] = MOD - iinv[MOD % i] * (MOD // i) % MOD\n    finv[i] = finv[i - 1] * iinv[i] % MOD\n\n\ndef comb(n: int, k: int) -> int:\n    if n < k or n < 0 or k < 0:\n        return 0\n    return (fact[n] * finv[k] % MOD) * finv[n - k] % MOD\n\n\nans = 0\nfor n in range(1, s + 1):\n    if s - 3 * n < 0:\n        break\n    ans += comb((s - 3 * n) + (n - 1), n - 1)\n    ans %= MOD\n\nprint(ans)\n", "import sys\nsys.setrecursionlimit(10**8)\n\nS = int(input())\nMOD = 10**9+7\n\nfrom functools import lru_cache\n@lru_cache(maxsize=10**8)\ndef rec(n):\n    if n < 3: return 0\n    ret = 1\n    for i in range(3, n-3+1):\n        ret += rec(i)\n    return ret%MOD\n\nprint((rec(S)))\n", "n=int(input())\n\nmod = 10**9 + 7\n\n#  ex. 7\n#  1 1 1 1 1 1 1 \n# ^     ^ ^\n\ndp=[0]*n\ndp[0]=1\n\nfor i in range(n):\n  for j in range(i-2):\n    dp[i]+=dp[j]\n    dp[i]%=mod\ndp[n-1]=0\ndp[n-2]=0\n\nprint((sum(dp)%mod))\n", "##D - Redistribution\n##3\u4ee5\u4e0a\u306e\u6570\u5b57\u306e\u548c\u3067S\u3092\u3064\u304f\u308b\u7d44\u307f\u5408\u308f\u305b\n##3\u4ee5\u4e0a\u3067\u306e\u52d5\u7684\u8a08\u753b\u6cd5\u304b\u306a\uff1f\nS = int(input())\nL = list(range(3,S+1))\ndp = [1]*(S+1)\nif S<3:\n    print((0))\nelse:\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 0\n    for i in range(3,S+1):\n        for j in range(3,S+1-i):\n            dp[i+j] += dp[i]\n\n    print((dp[S]%(10**9+7)))\n\n##print(ans)\n", "s = int(input())\ndp = [0]*(s+1)\nmod = 10**9+7\ndp[0] = 1\nfor i in range(3, s+1):\n    dp[i] += sum(dp[:i-2])%mod\nprint(dp[-1])", "N = int(input())\ndp = [0] * 200000\ndp[0]=1\ndp[1]=0\ndp[2]=0\ndp[3]=1\nfor i in range(4,N+1):\n    for j in range(i-2):\n        dp[i] += dp[j]\nprint(dp[N] % (10**9 + 7))", "n = int(input())\nmod = 10**9 + 7\n\nper = [1] * (n+1)\nfor i in range(1, n+1):\n  per[i] = per[i-1] * i\n  per[i] %= mod\n\ninv = [1] * (n+1)\ninv[-1] = pow(per[-1], mod-2, mod)\nfor j in range(2, n+2):\n  inv[-j] = inv[-j+1] * (n-j+2)\n  inv[-j] %= mod\n\ndef C(n, k):\n  cmb = per[n] * inv[k] * inv[n-k]\n  cmb %= mod\n  return cmb\n\ntotal = 0\nfor k in range(1, n+1):\n  if n < 3*k:\n    break\n  total += C(n-2*k-1, k-1)\n  total %= mod\n\nprint(total)\n", "S=int(input())\na=0\nif S<3:\n    print((0))\nelse:\n    for i in range(S//3):\n        n=S-3*(i+1)+i\n        c=1\n        for k in range(i):\n            c*=(n-k)\n        for k in range(i):\n            c//=(k+1)\n        a+=c\n    print((a%(10**9+7)))\n    \n", "S = int(input())\n\nA = [0,0,0,1,1,1,2,3,4,6] + [0] * S\n\n\nfor i in range(5, len(A)):\n  A[i] = (A[i-1] + A[i-3])%(10**9 + 7)\n\nprint(A[S])", "S = int(input())\nanslist = []\nanslist.extend([1,0,0])\nfor i in range(3,S+1):\n    ansi = anslist[i-3] + anslist[i-1]\n    anslist.append(ansi)\nans = anslist[S] % (10**9 + 7)\nprint(ans)", "from fractions import Fraction\nS = int(input())\n\nl = S//3\n#r = S%3\n\n#print ('l=' + str(l))\nc = 1\ncount = 1\n\nif S < 3:\n    count = 0\n    \nfor i in range(1,l):\n    #c *=  (S-3*i-3)*(S-3*i-4)*(S-3*i-5)/((S-2*i-3)*(S-2*i-4))/(i+1)\n    c =  Fraction(c*(S-3*i)*(S-3*i-1)*(S-3*i-2),((S-2*i-1)*(S-2*i-2))*i)\n\n    #cp =  (S-3*i)*(S-3*i-1)*(S-3*i-2)\n    #ci=(S-2*i-1)*(S-2*i-2)\n    #c = c * cp / ci / i\n    #print('c'+str(i)+'='+str(c))\n\n    count += c\n    #print('count'+str(i)+'='+str(count))\n    #count = int(count)%(10**9+7)\n    \n\n#print('cp='+str(cp))\n#print('ci='+str(ci))\n#print('c='+str(c))\n#print('count='+str(count))\n\n\nanswer = int(count)%(10**9+7)\nprint(answer)", "S=int(input())\nmod=10**9+7\n\ndp=[0]*(S+1)\ndp[0]=1\nfor i in range(3,S+1):\n  for j in range(0,(i-3)+1):\n    dp[i]+=dp[j]\n    dp[i]%=mod\nprint((dp[S]))\n", "def main():\n    S = int(input())\n    a = [1, 0, 0, 1, 1, 1, 2]\n\n    for i in range(7, S + 1):\n        a.append(sum(a[i - 3::-1]))\n\n    print(((a[S]) % (10 ** 9 + 7)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s=int(input())\nt=1 if s>=3 else 0\nM=10**9+7\nS=[1]+[0]*2000\n\ndef cmb(n,r):\n  c,m=1,1\n  for i in range(1,r+1):\n    c=c*(n-i+1)%M\n    m=m*i%M\n  return c*pow(m,M-2,M)%M\n\nfor i in range(2,s//3+1):\n  t=(t+cmb(s-2*i-1,i-1))%M\n\nprint(t)\n", "S=int(input())\nmod=10**9+7\n\ndp=[0]*(S+1)\ndp[0]=1\n\nfor i in range(3,S+1):\n  dp[i]=(dp[i-3]+dp[i-1])%mod\nprint(dp[S])", "s = int(input())\n\nmod = 10 ** 9 + 7\n\nmaxV = 2000\ndp = [0] * (maxV + 1)\n\nfor i in range(s + 1):\n    if i == 0:\n        dp[i] = 1\n        continue\n    elif 0 < i < 3:\n        dp[i] = 0\n        continue\n    # for j in range(i-3 + 1):\n    #     dp[i] += (dp[j]) % mod\n    dp[i] = (dp[i - 1] + dp[i - 3]) % mod\n\nprint((dp[s] % mod))\n", "MOD=10**9+7\nUPPERLIMIT=10**4\nMODMUL=[1, 1]+[0]*(UPPERLIMIT-1)\nfor i in range(2, UPPERLIMIT+1):\n  MODMUL[i]=MODMUL[i-1]*i%MOD\nMODDIV=[1]*UPPERLIMIT+[pow(MODMUL[-1], MOD-2, MOD)]\nfor i in range(UPPERLIMIT, 0, -1):\n  MODDIV[i-1]=MODDIV[i]*i%MOD\ndef MODCOMB(n, r):\n  return (((MODMUL[n]*MODDIV[r])%MOD)*MODDIV[n-r])%MOD\n\nS=int(input())\nif S<3:\n  print(0)\n  return\n  \nans=0\nT=S//3\nfor i in range(1, T+1):\n  x=S-i*3\n  ans=(ans+MODCOMB(x+i-1, x))%MOD\n  \nprint(ans)", "import numpy as np\ns = int(input())\nA = [0]*2010\nA[0] = 1\nA[1] = A[2] = 0\nfor i in range(3, s+1):\n    for j in range(i-2):\n        A[i] += A[j]\n        A[i] %= 7+10**9\nprint(A[s]%(7+10**9))"]