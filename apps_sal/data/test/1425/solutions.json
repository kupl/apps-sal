["n=int(input())\nl1=list(map(int,input().split()))\nl1.sort()\nl1=l1[::-1]\nans=[-1]*n\ni=0\ny=n-1\nfor j in range(n):\n    if j%2==0:\n        ans[i]=l1[j]\n        i+=1\n    else :\n        ans[y]=l1[j]\n        y-=1\nflag=0\nfor i in range(n):\n    if ans[i]>=ans[i-1]+ans[(i+1)%n]:\n        flag=1\n        break\nif flag==0:\n    print(\"YES\")\n    print(' '.join(str(x) for x in ans))\nelse :\n    print(\"NO\")", "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\n\ndef ok(l):\n    for i in range(len(l)):\n        if l[i-1] >= l[i-2] + l[i]:\n            return False\n    return True\n\nif ok(l):\n    print('YES')\n    print(*l)\nelse:\n    l[-3:] = l[-2:] + l[-3:-2]\n    if ok(l):\n        print('YES')\n        print(*l)\n    else:\n        print('NO')\n", "n = int(input())\na = list(map(int,input().split()))\na.sort()\n\nif (a[n-1] < a[n-2] + a[n-3]) :\n    print(\"YES\")\n    a[n-1],a[n-2] = a[n-2],a[n-1]\n    print(\" \".join(map(str,a)))\nelse:\n    print(\"NO\")\n", "n=int(input())\nl=[int(i) for i in input().split()]\nl.sort(reverse=1)\nif l[0]<l[1]+l[2]:\n    print('YES')\n    ans=l[3:]\n    ans=[l[1],l[0],l[2]]+ans\n    print(*ans)\nelse:\n    print('NO')\n    \n", "n=int(input())\narr=list(map(int,input().split()))\narr.sort()\nif(arr[-1]>=arr[-2]+arr[-3]):\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")\n\tansarr=[arr[-3],arr[-1],arr[-2]]\n\tfor i in range(n-4,-1,-1):\n\t\tansarr.append(arr[i])\n\tprint(*ansarr)", "n = int(input())\nx = 0\ny = 0\ns = list(map(int, input().split()))\ns.sort()\nif(s[n-1]<s[n-2]+s[n-3]):\n    print(\"YES\")\n    k = []\n    l = []\n    for i in range(n):\n        if(i%2==0):\n            k.append(s[n-i-1])\n        else:\n            l.append(s[n-i-1])\n    l.reverse()\n    print(\" \".join(map(str, l)), \" \".join(map(str, k)))\nelse:\n    print(\"NO\")\n", "n=int(input())\na=list(map(int,input().split()))\na.sort()\nif a[-3]+a[-2]>a[-1]:\n    print(\"YES\")\n    a[-1],a[-2]=a[-2],a[-1]\n    print(*a)\nelse:\n    print(\"NO\")", "n = int(input())\nA = [int(x) for x in input().split()]\nA.sort()\n\nB = [-1]*n\n\nj = 0\nfor i in range(n):\n    B[j] = A[i]\n    if j <= 0:\n        j = -j + 1\n    else:\n        j *= -1\n\nok = True\nfor i in range(n):\n    if B[i-1] >= B[i-2] + B[i]:\n        ok = False\n\nif ok:\n    print('YES')\n    print(*B)\nelse:\n    print('NO')\n", "n=int(input())\na=sorted(list(map(int,input().split())))[::-1]\nif(a[0]<a[1]+a[2]):\n    print('YES')\n    print(a[0],*a[2:],a[1])\nelse:\n    print('NO')\n", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nif a[n-1] < a[n-2] + a[n-3]:\n    print('YES')\n    print(' '.join(str(a[i]) for i in range(n - 2)) + ' ' + str(a[n-1]) + ' ' + str(a[n-2]))\nelse:\n    print('NO')\n", "n = int(input())\nA = list(map(int, input().split()))\nA = sorted(A)\nif A[n - 1] >= A[n - 2] + A[n - 3]:\n    print(\"NO\")\nelse:\n    used = [0] * n\n    print(\"YES\")\n    for i in range (n):\n        if i %  2 == n % 2:\n            print(A[i], end = ' ')\n            used[i] = 1\n    for i in range (n - 1, -1, -1):\n        if used[i] == 0:\n            print(A[i], end = ' ')\n", "N = int(input())\n \narr = input()\narr = [int(x) for x in arr.split(' ')]\n\narr.sort()\n\nif arr[-1]>=arr[-2]+arr[-3]:\n    print('NO')\nelse:\n    print('YES')\n    tmp = arr[-2]\n    arr[-2] = arr[-1]\n    arr[-1] = tmp\n    for i in range(N):\n        print(arr[i],end=' ')\n \n", "n=int(input())\na=sorted([int(x) for x in input().split()])\nif a[-1]<a[-2]+a[-3]:\n    print('YES')\n    print(*(a[-2:-1]+a[-1:]+a[-3:-2]+a[:-3]))\nelse:\n    print('NO')\n", "import sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\na.sort(reverse = True)\nif a[0] >= a[1] + a[2]:\n    print(\"NO\")\nelse:\n    b = [a[2 * i] for i in range (0, (n+1)//2)]\n    c = [a[2 * i + 1] for i in range (0, n // 2)]\n    c.reverse()\n    print(\"YES\")\n    x = b + c\n    print(\" \".join(list(map(str, x))))", "n=int(input())\nv=[int(i) for i in input().split()]\nv.sort()\nif(v[n-1]>=v[n-2]+v[n-3]):\n    print('NO')\nelse:\n    print('YES')\n    t=v[n-2]\n    v[n-2]=v[n-1]\n    v[n-1]=t\n    for i in v:\n        print(i, end=' ')\n", "'''input\n4\n1 10 100 1000\n'''\nfrom sys import stdin, setrecursionlimit\nimport math\nfrom bisect import bisect_left\nfrom collections import deque\n\n\ndef check(circle):\n\tfor i in range(len(circle)):\n\t\tif i == 0:\n\t\t\tleft = circle[-1]\n\t\telse:\n\t\t\tleft = circle[i - 1]\n\t\tif i == len(circle) - 1:\n\t\t\tright = circle[0]\n\t\telse:\n\t\t\tright = circle[i + 1]\n\t\tif left + right <= circle[i]:\n\t\t\treturn False\n\treturn True\n\n\n# main starts\nn = int(stdin.readline().strip())\narr = list(map(int, stdin.readline().split()))\narr.sort()\ncircle = []\ncircle = deque(circle)\ncircle.append(arr[0])\n\nflag = 0\nfor i in range(1, n):\n\tif flag == 0:\n\t\tcircle.append(arr[i])\n\t\tflag = 1\n\telse:\n\t\tcircle.appendleft(arr[i])\n\t\tflag = 0\n\ncircle = list(circle)\n# print(circle)\nif check(circle):\n\tprint(\"YES\")\n\tprint(*circle)\nelse:\n\tprint(\"NO\")\n", "def arun(arr):\n    return sorted(arr)\nn=int(input())\narr=list(map(int,input().split()))\narr=arun(arr)\narr=arr[:n-2]+[arr[-1]]+arr[n-2:n-1]\n# print(arr)\nans=[\"NO\",\"YES\"]\nind=1\nfor i in range(n):\n    if(arr[i]>=arr[(i-1)]+arr[(i+1)%n]):\n        ind=0\n        print(ans[0])\nif(ind):\n    print(ans[1])\n    for i in range(n):\n        print(arr[i],end=\" \")\n    print()", "n = int(input())\nnums = list(map(int, input().split()))\nnums.sort()\nif nums[-1] >= nums[-2] + nums[-3]:\n    print('NO')\nelse:\n    print('YES')\n    if n % 2 == 0:\n        print(*nums[-1:0:-2], *nums[0:n:2])\n    else:\n        print(*nums[-1:0:-2], nums[0], *nums[1:n:2])        ", "# I <3 tzuyu\nfrom collections import deque\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nd = deque([])\nfor i in range(n-1, -1, -1):\n    if i % 2 == 0:\n        d.append(a[i])\n    else:\n        d.appendleft(a[i])\n\ndef valid(a):\n    for i in range(n):\n        if a[i-1] + a[(i+1) % n] <= a[i]:\n            return False\n    return True\n\nif valid(d):\n    print('YES')\n    print(*d)\nelse:\n    print('NO')\n", "n = input()\nl = [int(i) for i in input().split()]\n\nl.sort()\n\nif l[-1]>=l[-2]+l[-3] :\n\tprint(\"NO\")\nelse :\n\tprint(\"YES\")\n\tprint(l[-1], end=\" \")\n\tprint(l[-3], end=\" \")\n\tfor k in range(len(l)-3) :\n\t\tprint(l[k], end=\" \")\n\tprint(l[-2])\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jul  5 17:58:14 2019\n\n@author: Hamadeh\n\"\"\"\n\nclass cinn:\n    def __init__(self):\n        self.x=[]\n    def cin(self,t=int):\n        if(len(self.x)==0):\n            a=input()\n            self.x=a.split()\n            self.x.reverse()\n        return self.get(t)\n    def get(self,t):\n        return t(self.x.pop())\n    def clist(self,n,t=int): #n is number of inputs, t is type to be casted\n        l=[0]*n\n        for i in range(n):\n            l[i]=self.cin(t)\n        return l\n    def clist2(self,n,t1=int,t2=int,t3=int,tn=2):\n        l=[0]*n\n        for i in range(n):\n            if(tn==2):\n                a1=self.cin(t1)\n                a2=self.cin(t2)\n                l[i]=(a1,a2)\n            elif (tn==3):\n                a1=self.cin(t1)\n                a2=self.cin(t2)\n                a3=self.cin(t3)\n                l[i]=(a1,a2,a3)\n        return l\n    def clist3(self,n,t1=int,t2=int,t3=int):\n        return self.clist2(self,n,t1,t2,t3,3)\n    def cout(self,i,ans=''):   \n        if(ans==''):\n            print(\"Case #\"+str(i+1)+\":\", end=' ')\n        else:\n            print(\"Case #\"+str(i+1)+\":\",ans)\n    def printf(self,thing):\n        print(thing,end='')\n    def countlist(self,l,s=0,e=None):\n        if(e==None):\n            e=len(l)\n        dic={}\n        for el in range(s,e):\n            if l[el] not in dic:\n                dic[l[el]]=1\n            else:\n                dic[l[el]]+=1\n        return dic\n    def talk (self,x):\n        print(x,flush=True)\n    def dp1(self,k):\n        L=[-1]*(k)\n        return L\n    def dp2(self,k,kk):\n        L=[-1]*(k)\n        for i in range(k):\n            L[i]=[-1]*kk\n        return L\n    def isprime(self,n):\n        if(n==1 or n==0):\n            return False\n        for i in range(2,int(n**0.5+1)):\n            if(n%i==0):\n                return False\n        return True\n    def factors(self,n):    \n        from functools import reduce\n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    def nthprime(self,n):\n        #usable up to 10 thousand\n        i=0\n        s=2\n        L=[]\n        while(i<n):\n            while(not self.isprime(s)):\n                s+=1\n            L.append(s)\n            s+=1\n            i+=1\n        return L\n    def matrixin(self,m,n,t=int):\n        L=[]\n        for i in range(m):\n            p=self.clist(n,t)\n            L.append(p)\n        return L\n    def seive(self,k):\n        #1000000 tops\n        n=k+1\n        L=[True]*n\n        L[1]=False\n        L[0]=False\n        for i in range(2,n):\n            if(L[i]==True):\n                for j in range(2*i,n,i):\n                    L[j]=False\n        return L\n    def seiven(self,n,L):\n        i=0\n        for j in range(len(L)):\n            if(L[j]==True):\n                i+=1\n            if(i==n):\n                return j\n    def matrixin2(self,m,t=int):\n        L=[]\n        for i in range(m):\n            iny=self.cin(str)\n            lsmall=[]\n            for el in iny:\n                lsmall.append(t(el))\n            L.append(lsmall)\n        return L\nc=cinn()\nn=c.cin()\nl=c.clist(n)\nl.sort()\nif(l[n-1]>=l[n-2]+l[n-3]):\n    print(\"NO\")\nelse:\n    l.append(l[n-2])\n    l.pop(n-2)\n    print(\"YES\")\n    for el in l:\n        print(el,end=' ')", "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nif a[-2]+a[-3]<=a[-1]:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(\" \".join(map(str, a[:-2]+[a[-1], a[-2]])))\n", "# @author \n\nimport sys\n\nclass BNumberCircle:\n    def solve(self):\n        n = int(input())\n        a = [int(_) for _ in input().split()]\n        a.sort()\n        if a[-1] >= a[-2] + a[-3]:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            ans = [-1] * n\n            cur = 0\n            i = n - 1\n            while i >= 0:\n                ans[cur] = a[i]\n                cur = n - 1 - cur\n                i -= 1\n                if i < 0:\n                    break\n                ans[cur] = a[i]\n                cur = n - 1 - cur + 1\n                i -= 1\n\n            print(*ans)\n\nsolver = BNumberCircle()\ninput = sys.stdin.readline\n\nsolver.solve()\n", "from collections import deque\n\n# from itertools import permutations\n# from random import *\n\nn = int(input())\na = sorted(map(int, input().strip().split()))\n\ndef solve(a):\n    d = deque()\n    test = 0\n    for i in a:\n        if test:\n            d.appendleft(i)\n            test = 0\n        else:\n            d.append(i)\n            test = 1\n\n    d = list(d)\n    # print(d)\n\n    if all(a < b + c for a, b, c in zip(d, d[1:] + [d[0]], [d[-1]] + d)):\n        print(\"YES\")\n        print(*d)\n        # return True\n    else:\n        print(\"NO\")\n        # return False\n\n# def brute(a):\n#     for d in permutations(a):\n#         if all(a < b + c for a, b, c in zip(d, d[1:] + (d[0],), (d[-1],) + d)):\n#             print(d)\n#             return True\n#     return False\n\nsolve(a)\n\n# while True:\n    # a = sorted([randint(2, 10) for _ in range(5)])\n    # if solve(a) != brute(a):\n        # print(a)\n    # else:\n        # print(\"ok\")\n", "from collections import deque\nfrom sys import stdin\nn=int(stdin.readline().strip())\ns=list(map(int,stdin.readline().strip().split()))\ns.sort()\na=deque()\na.append(s[-1])\nflag=True\ns.pop()\nwhile len(s)>0:\n    if flag:\n        a.appendleft(s[-1])\n    else:\n        a.append(s[-1])\n    flag= not flag\n    s.pop()\nflag=True\nfor i in range(n):\n\n    if (a[(i-1)%n]+a[(i+1)%n])<=a[i]:\n        flag=False\n        break\nif flag:\n    print(\"YES\")\n    print(*a)\nelse:\n    print(\"NO\")\n        \n"]