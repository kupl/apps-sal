["from math import sqrt, log2\nfrom sys import stdin\nfrom bisect import bisect\nimport time\n\ndef all_primes(n):\n    res = []\n    for i in range(1, n+1):\n        prime = True\n        for j in range(2, min(int(sqrt(i))+2, i)):\n            if i % j == 0:\n                prime = False\n                break\n        if prime: res.append(i)\n    return res\n\n\ndef count_pow_nums(n, p):  #don't count 1\n    top = int(pow(n, 1.0/p))\n    if pow(top+2, p) <= n:\n        return top+1\n    elif pow(top+1, p) <= n:\n        return top\n    elif pow(top, p) <= n:\n        return top-1\n    else:\n        return top-2\nprimes = all_primes(64)\nnum_set=set()\nmax_n = 1000000000000000000\nfor pi in range(3, len(primes)):\n    p = primes[pi]\n    cnt = count_pow_nums(max_n, p)\n    for n in range(2, cnt+5):\n        sq2 = round(sqrt(n))\n        sq3 = round(pow(n, 1/3))\n        if sq2**2 != n and sq3**3 != n:\n            num = pow(n, p)\n            if num <= max_n:\n                num_set.add(num)\nnums = sorted(num_set)\nt = int(stdin.readline())\nfor i in range(t):\n    n = int(stdin.readline())\n    ans = n-1-count_pow_nums(n, 2)-count_pow_nums(n, 3)+count_pow_nums(n, 6)\n    ans -= bisect(nums, n)\n    print(ans)\n"]