["h1, a1, c1 = list(map(int, input().split()))\nh2, a2 = list(map(int, input().split()))\nd = []\nwhile h2 > 0:\n\tif h2 <= a1:\n\t\th2 -= a1\n\t\td.append('STRIKE')\n\telse:\n\t\tif h1 <= a2:\n\t\t\td.append('HEAL')\n\t\t\th1 += c1\n\t\telse:\n\t\t\td.append('STRIKE')\n\t\t\th2 -= a1\n\th1 -= a2\nprint(len(d))\nfor i in d:\n\tprint(i)\n", "h1, a1, c = list(map(int, input().split()))\nh2, a2 = list(map(int, input().split()))\n\nturn = 0\nl = list()\n\nwhile ((h1 > 0) and (h2 > 0)):\n    if (turn % 2 == 0):\n        if (h1 > a2) or (h2 <= a1):\n            l.append('STRIKE')\n            h2 -= a1\n        else:\n            l.append('HEAL')\n            h1 += c\n    else:\n        h1 -= a2\n\n    turn += 1\n\nprint(len(l))\nprint('\\n'.join(l))\n", "my_health, my_attack, my_potion = [int(x) for x in input().split()]\nboss_health, boss_attack = [int(x) for x in input().split()]\n\nactions = []\n\nwhile boss_health > 0:\n    if my_health <= boss_attack and boss_health > my_attack:\n        actions.append('HEAL')\n        my_health += my_potion\n    else:\n        actions.append('STRIKE')\n        boss_health -= my_attack\n        if boss_health <= 0:\n            break\n    my_health -= boss_attack\n\nprint(len(actions))\nprint('\\n'.join(actions))\n", "h1, a1, c1 = list(map(int, input().split()))\nh2, a2 = list(map(int, input().split()))\nan = []\nwhile h2 > 0:\n    if h2 - a1 <= 0:\n        an.append('STRIKE')\n        break\n    if h1 <= a2:\n        h1 += c1\n        an.append('HEAL')\n    else:\n        h2 -= a1\n        an.append('STRIKE')\n    h1 -= a2\nprint(len(an))\nfor i in an:\n    print(i)\n", "h1, a1, c1 = map(int, input().split())\nh2, a2 = map(int, input().split())\ncoms = []\nwhile h2 > 0:\n    if h2 <= a1:\n        coms.append('STRIKE')\n        h2 -= a1\n    elif h1 <= a2:\n        coms.append('HEAL')\n        h1 += c1\n    else:\n        coms.append('STRIKE')\n        h2 -= a1\n    h1 -= a2\nprint(len(coms))\nprint(*coms, sep='\\n')", "h1, a1, c1 = map(int, input().split())\nh2,a2 = map(int, input().split())\ncache = []\nwhile h2>0:\n  if h2<= a1:\n    h2-=a1\n    cache.append('STRIKE')\n  elif h1<=a2:\n    h1+=c1\n    cache.append('HEAL')\n  else:\n    h2-=a1\n    cache.append('STRIKE')\n  h1-=a2\nprint(len(cache))\nfor i in range(len(cache)):\n  print(cache[i])", "h1, a1, c1 = map(int, input().split())\nh2, a2 = map(int, input().split())\n\na = []\n\nwhile True:\n\tif h2 <= a1 or h1 > a2:\n\t\th2 -= a1 \n\t\ta += [\"STRIKE\"]\n\telse:\n\t\th1 += c1\n\t\ta += [\"HEAL\"]\n\n\tif h2 <= 0:\n\t\tbreak\n\th1 -= a2\nprint(len(a))\nfor x in a:\n\tprint(x)", "h1, a1, c1 = [int(i) for i in input().split()]\nh2, a2 = [int(i) for i in input().split()]\nn = 0\na = []\nwhile h2 > 0:\n    if h2 <= a1:\n        a.append('STRIKE')\n        h2 -= a1\n    else:\n        if h1 > a2:\n            a.append('STRIKE')\n            h2 -= a1\n        else:\n            a.append('HEAL')\n            h1 += c1\n        if h2 > 0:\n            h1 -= a2\n    n += 1\nprint(n)\nfor i in a:\n    print(i)\n", "h1, a1, c1 = list(map(int, input().strip().split()))\nh2, a2 = list(map(int, input().strip().split()))\nanswer = []\ncount = 0\nwhile h2 > 0:\n    if a1 >= h2:\n        answer.append(\"STRIKE\")\n        h2 -= a1\n    elif a2 >= h1:\n        answer.append(\"HEAL\")\n        h1 += c1\n        h1 -= a2\n    else:\n        answer.append(\"STRIKE\")\n        h2 -= a1\n        h1 -= a2\n    count += 1\n\nprint(count)\nfor i in answer:\n    print(i)", "h1,a1,c1=[int(i) for i in input().split(\" \")]\nh2,a2=[int(i) for i in input().split(\" \")]\n\nans=[]\nwhile h2>0:\n    if h2<=a1:\n        ans.append(1)\n        h2-=a1\n        break\n    if h2>0 and h1>a2:\n        ans.append(1)\n        h2-=a1\n        if h2>0:\n            h1-=a2\n        if h2<=0:\n            break\n    elif h2>0 and h1<=a2:\n        ans.append(0)\n        h1+=c1\n        h1-=a2\nprint(len(ans))\nfor i in range(len(ans)):\n    if ans[i]==1:\n        print('STRIKE')\n    else:\n        print('HEAL')\n", "def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\n\nh1, a1, c1 = mi()\nh2, a2 = mi()\nans = []\nwhile h2 > 0:\n    h1 -= a2\n    if h1 > 0 or h2 <= a1:\n        ans += ['STRIKE']\n        h2 -= a1\n    else:\n        ans += ['HEAL']\n        h1 += c1\nprint(len(ans))\nprint(*ans, sep='\\n')", "h1, a1, c1 = list(map(int, input().split()))\nh2, a2 = list(map(int, input().split()))\na = []\nt = 0\nwhile h1 > 0 and h2 > 0:\n    t += 1\n    if h1 > a2 or h2 <= a1:\n        h2 -= a1\n        a.append('STRIKE')\n    else:\n        h1 += c1\n        a.append('HEAL')\n    h1 -= a2\nprint(t)\nfor i in range(len(a)):\n    print(a[i])\n", "h1,a1,c1=map(int,input().split())\nh2,a2=map(int,input().split())\na=list()\nn=0\nwhile h2>0:\n    n+=1\n    if (h1<(a2+1)) and (h2>a1):\n        a.append('HEAL')\n        h1+=c1\n    else:\n        a.append('STRIKE')\n        h2-=a1\n    h1-=a2\nprint(n)\nfor i in a:\n    print(i)", "h1, a1, c1 = list(map(int, input().split()))\nh2, a2 = list(map(int, input().split()))\n\nn = 0\nl = []\nwhile(h2 > 0):\n\tn += 1\n\tif (h2 - a1 <=0):\n\t\tl.append(1)\n\t\tbreak\n\tif h1 - a2 <=0:\n\t\tl.append(0)\n\t\th1 += c1\n\t\th1 -= a2\n\t\tcontinue\n\telse:\n\t\tl.append(1)\n\t\th1 -= a2\n\t\th2 -= a1\n\nprint(n)\nfor i in l:\n\tif i == 0:\n\t\tprint(\"HEAL\")\n\telse:\n\t\tprint(\"STRIKE\")\t\t\t\t\t\n", "h1, a1, c1 = map(int, input().split())\nh2, a2 = map(int, input().split())\nans = 0\nad = []\nwhile 1:\n    #print(h1)\n    ans += 1\n    if h1 <= a2 and h2 > a1:\n        h1 += c1\n        ad.append('HEAL')\n    else:\n        h2 -= a1\n        ad.append('STRIKE')\n    if h2 <= 0:\n        break\n    h1 -= a2\nprint(ans)\nfor d in ad:\n    print(d)", "import sys\nh1, a1, c1 = map(int, input().split())\nh2, a2 = map(int, input().split())\nans = []\nwhile h2 > 0:\n    if h1 - a2 <= 0 and h2 - a1 > 0:\n        ans.append(\"HEAL\")\n        h1 += c1\n    else:\n        ans.append(\"STRIKE\")\n        h2 -= a1\n    h1 -= a2\nprint(len(ans))\nfor i in range(len(ans)):\n    print(ans[i])", "h1, a1, c1 = list(map(int, input().split()))\nh2, a2 = list(map(int, input().split()))\nres = []\n\nwhile h2 > 0:\n    if h1 <= a2 and h2 > a1:\n        h1 += c1\n        res.append('HEAL')\n        h1 -= a2\n    else:\n        h2 -= a1\n        res.append('STRIKE')\n        h1 -= a2\n\nprint(len(res))\nprint('\\n'.join(res))\n", "read=lambda: list(map(int,input().split()))\nh1,a1,c1=read()\nh2,a2=read()\nans=1\na=[]\nap=a.append\nwhile h2>a1:\n    ans+=1\n    if h1>a2:\n        h2-=a1\n        ap('STRIKE')\n    else:\n        h1+=c1\n        ap('HEAL')\n    h1-=a2\nap('STRIKE')\nprint(ans)\nprint('\\n'.join(a))", "h,a,c=list(map(int,input().split()))\nh2,a2=list(map(int,input().split()))\ncount=1\nS=[]\nwhile(h2>a):\n    count+=1\n    if(h>a2):\n        S.append('STRIKE')\n        \n        h2-=a\n    else:\n        S.append('HEAL')\n        h+=c\n    h-=a2\nS.append('STRIKE')\nprint(count)\nfor i in S:\n    print(i)\n", "pht, pa, phl = map(int, input().split())\nbht, ba = map(int, input().split())\n\nst = []\nwhile bht > 0:\n\tif pht <= ba and bht > pa:\n\t\tst += ['HEAL']\n\t\tpht += phl\n\telse:\n\t\tbht -= pa\n\t\tst += ['STRIKE']\n\tpht -= ba\n\nprint(len(st))\nprint('\\n'.join(st))", "h1, a1, c1 = list(map(int, input().split()))\nh2, a2 = list(map(int, input().split()))\n\nans = list()\nwhile True:\n    if h1 <= a2 and h2 > a1:\n        ans.append('HEAL')\n        h1 += c1\n    else:\n        ans.append('STRIKE')\n        h2 -= a1\n        if h2 <= 0:\n            break\n\n    h1 -= a2\n\nprint(len(ans))\nprint('\\n'.join(ans))\n", "h1, a1, c1 = [int(i) for i in input().split()]\nh2, a2 = [int(i) for i in input().split()]\nk = (h2 + a1 - 1) // a1\n#print(k)\ne = []\nwhile k > 0:\n    #print(k, h1, a2)\n    if k == 1:\n        e.append(\"STRIKE\")\n        break\n    if h1 <= a2:\n        e.append(\"HEAL\")\n        h1 += c1\n    else:\n        e.append(\"STRIKE\")\n        k -= 1\n    h1 -= a2\nprint(len(e))\nfor el in e:\n    print(el)\n", "h1,a1,c1=map(int,input().split())\nh2,a2=map(int,input().split())\nk=0\nif h2%a1==0:\n    n=h2//a1-1\nelse:\n    n=h2//a1\nwhile k<=(n*a2-h1)/(c1-a2):\n    k+=1\nprint(k+n+1)\nfor i in range(k):\n    print('HEAL')\nfor i in range(n+1):\n    print('STRIKE')", "h1, a1, c1 = [int(x) for x in input().split()]\nh2, a2 = [int(x) for x in input().split()]\n\nn_rounds = 0\nthings_to_do = []\n\nwhile(h2 > 0):\n\tn_rounds += 1\n\tif h2 <= a1 or h1 > a2:\n\t\tthings_to_do.append('STRIKE')\n\t\th2 -= a1\n\t\th1 -= a2\n\telse:\n\t\tthings_to_do.append('HEAL')\n\t\th1 += c1\n\t\th1 -= a2\n\nprint(n_rounds)\nfor i in things_to_do:\n\tprint(i)\n", "h1,a1,c1 = list(map(int,input().split()))\nh2,a2 = list(map(int,input().split()))\nactions = [0]*10000\nj = 0\n\nwhile h2 >= 0:\n    if h2 <= a1:\n        actions[j] = 1\n        j += 1\n        break\n    if h1 <= a2:\n        actions[j] = 2\n        j += 1\n        h1 += c1 - a2\n        continue\n    actions[j] = 1\n    j += 1\n    h1 -= a2\n    h2 -= a1\n\nprint(j)\nfor i in range(j):\n    if actions[i] == 1:\n        print(\"STRIKE\")\n    elif actions[i] == 2:\n        print(\"HEAL\")\n    \n"]