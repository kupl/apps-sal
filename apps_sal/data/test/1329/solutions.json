["import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.readline\n    N = int(input())\n    primes = defaultdict(int)\n    ans = 0\n    for i in range(1, N + 1):\n        k = i\n        for j in range(2, i+1):\n            if j ** 2 > i: break\n            if k % j == 0:\n                while k % j == 0:\n                    primes[j] += 1\n                    k //= j\n        if k > 1: primes[k] += 1\n    P = []\n    for key in primes: P.append(primes[key])\n    pn = len(P)\n\n    for i in range(pn):\n        if P[i] >= 74: ans += 1\n        if P[i] >= 24:\n            for j in range(pn):\n                if P[j] >= 2 and j != i: ans += 1\n        if P[i] >= 14:\n            for j in range(pn):\n                if P[j] >= 4 and j != i: ans += 1\n        if P[i] >= 4:\n            for j in range(i+1, pn):\n                if P[j] >= 4:\n                    for k in range(pn):\n                        if P[k] >= 2 and k != i and k != j: ans += 1\n    print(ans)\n    #print(primes)\n    #print(P)\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "import numpy as np\nN=int(input())\ndp=[0]*(N+1)\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\nfor i in range(1,N+1):\n  p=factorization(i)\n  for x,y in p:\n    dp[x]+=y\nnplist=np.array(dp)\na=nplist[nplist>=2]\nb=nplist[nplist>=4]\nc=nplist[nplist>=14]\nd=nplist[nplist>=24]\ne=nplist[nplist>=74]\nf=len(e)\ng=len(d)*(len(a)-1)\nh=len(c)*(len(b)-1)\nk=len(b)*(len(b)-1)*(len(a)-2)//2\nprint(f+g+h+k)", "def make_prime_table(n):\n    sieve = list(range(n + 1))\n    sieve[0] = -1\n    sieve[1] = -1\n    for i in range(4, n + 1, 2):\n        sieve[i] = 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if sieve[i] != i:\n            continue\n        for j in range(i * i, n + 1, i * 2):\n            if sieve[j] == j:\n                sieve[j] = i\n    return sieve\n\n\ndef prime_factorize(n):\n    result = []\n    while n != 1:\n        p = prime_table[n]\n        e = 0\n        while n % p == 0:\n            n //= p\n            e += 1\n        result.append((p, e))\n    return result\n\n\nN = int(input())\n\nprime_table = make_prime_table(N)\nd = {}\nfor i in range(2, N + 1):\n    for p, e in prime_factorize(i):\n        d.setdefault(p, 0)\n        d[p] += e\n\n# 75 = 5 * 5 * 3\n#    = 15 * 5\n#    = 25 * 3\n#    = 75\nn74 = 0\nn24 = 0\nn14 = 0\nn4 = 0\nn2 = 0\nfor k in d:\n    if d[k] >= 74:\n        n74 += 1\n    if d[k] >= 24:\n        n24 += 1\n    if d[k] >= 14:\n        n14 += 1\n    if d[k] >= 4:\n        n4 += 1\n    if d[k] >= 2:\n        n2 += 1\n\nresult = 0\n# x ^ 4 * y ^ 4 * z ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n4 * (n4 - 1) // 2 * (n2 - 2)\n# x ^ 14 * y ^ 4 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n14 * (n4 - 1)\n# x ^ 24 * y ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n24 * (n2 - 1)\n# x ^ 74 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n74\nprint(result)\n", "from collections import Counter\ndef prime_factorize(n):\n    i = 2\n    factors = []\n    while i*i <= n:\n        while n%i == 0:\n            n //= i\n            factors.append(i)\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return Counter(factors)\n\nn = int(input())\n\nc = Counter([])\nfor i in range(1, n+1):\n    c += prime_factorize(i)\n\ndef f(x):\n    return len([i for i,cnt in c.items() if cnt >= x-1])\n\nans = 0\nans += f(5) * (f(5) - 1) // 2 * (f(3) - 2)\nans += f(5*5) * (f(3) - 1)\nans += f(3*5) * (f(5) - 1)\nans += f(3*5*5)\n\nprint(ans)", "def prime_factorization(n):\n    for i in range(2, n + 1):\n        num = int(i ** 0.5)\n        for prime in range(2, num + 2):\n            if i % prime == 0:\n                cnt = 0\n                while True:\n                    if i % prime != 0: break\n                    cnt += 1\n                    i = i // prime\n                if rec.get(prime):\n                    rec[prime] += cnt\n                else:\n                    rec[prime] = cnt\n\n        if i != 1:\n            if rec.get(i):\n                rec[i] += 1\n            else:\n                rec[i] = 1\n\nn = int(input())\nrec = dict()\nprime_factorization(n)\ndic = {2:0, 4:0, 14:0, 24:0, 74:0}\ncnt = 0\nfor key, val in rec.items():\n    if val >= 2:dic[2] += 1\n    if val >= 4:dic[4] += 1\n    if val >= 14:dic[14] += 1\n    if val >= 24:dic[24] += 1\n    if val >= 74:dic[74] += 1\n\nfor i in [74, 24, 14, 4]:\n    temp = dic.get(i)\n    if i == 74:cnt += temp\n    elif i == 24:cnt += temp * (dic[2] - 1)\n    elif i == 14:cnt += temp * (dic[4] - 1)\n    else:cnt += (dic[2] - 2) * (temp - 1) * temp // 2\nprint(cnt)", "import sys\nsys.setrecursionlimit(10 ** 8)\n\ndef Z(): return int(input())\ndef ZZ(): return [int(_) for _ in input().split()]\n\ndef main():\n    N = Z()\n\n    def sieve(num):\n        isPrime = [True] * (num+1)\n        isPrime[0] = isPrime[1] = False\n        for i in range(2, num+1):\n            if i * i > num: break\n            if not isPrime[i]: continue\n            for j in range(i, num+1):\n                if i * j > num: break\n                isPrime[i * j] = False\n        return isPrime\n\n    ps = []\n    cs = []\n    s = sieve(N)\n    for i in range(N+1):\n        if s[i]: ps.append(i)\n    for p in ps:\n        cc, q = 0, p\n        while N//q > 0:\n            cc += N//q\n            q *= p\n        cs.append(cc)\n\n    ans = set()\n    for i in range(len(cs)):\n        if cs[i] >= 74: ans.add((pow(ps[i], 74)))\n\n    for i in range(len(cs)):\n        for j in range(len(cs)):\n            if i == j: continue\n            if cs[i] >= 24 and cs[j] >= 2:\n                ans.add(pow(ps[i], 24) * pow(ps[j], 2))\n            if cs[i] >= 14 and cs[j] >= 4:\n                ans.add(pow(ps[i], 14) * pow(ps[j], 4))\n\n    for i in range(len(cs)):\n        for j in range(len(cs)):\n            for k in range(len(cs)):\n                if i == j or j == k or k == i: continue\n                if cs[i] >= 4 and cs[j] >= 4 and cs[k] >= 2:\n                    ans.add(pow(ps[i], 4) * pow(ps[j], 4) * pow(ps[k], 2))\n    print((len(ans)))\n\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"YES\") if fl else print(\"NO\")\nimport collections\nimport math\nimport itertools\nimport heapq as hq\nimport sys\n\nn = ni()\ndef factorize(n):\n    b = 2\n    fct = [(1,1)]\n    while b * b <= n:\n        cnt =0\n        while n % b == 0:\n            n //= b\n            cnt +=1\n        if cnt >=1:\n            fct.append((b,cnt))\n        b = b + 1\n    if n > 1:\n        fct.append((n,1))\n    return fct\n\nco = collections.Counter()\nfor i in range(2,n+1):\n    fct = factorize(i)\n    for num,cnt in fct:\n        if num>1:\n            co[num]+=cnt\nf4 = 0\nf2 = 0\nf14 = 0\nf24=0\nf74=0\nfor cnt in co.values():\n    if cnt>=74:\n        f74+=1\n    if cnt>=24:\n        f24+=1\n    if cnt>=14:\n        f14+=1\n    if cnt>=4:\n        f4+=1\n    if cnt>=2:\n        f2+=1\n\n\n\nans = f74 + f24*(f2-1) +f14*(f4-1)+f4*(f4-1)//2*(f2-2)\n\nprint(ans)\n", "N = int(input())\ne = [0] * (N+1)\nfor i in range(2, N+1):\n  cur = i\n  for j in range(2, i+1):\n    while cur % j == 0:\n      e[j] += 1\n      cur //= j\n\ndef num(m):\n  return len(list(filter(lambda x: x >= m-1, e)))\n\nprint(num(75)+num(25)*(num(3)-1)+num(15)*(num(5)-1)+num(5)*(num(5)-1)*(num(3)-2)//2)", "from collections import defaultdict\nimport math\ndef main():\n    def factorization(num):\n        nonlocal d\n        if num in primes:\n            d[num] += 1\n            return\n        for prime in primes:\n            if num % prime == 0:\n                count = 0\n                while num % prime == 0:\n                    count += 1\n                    num //= prime\n                d[prime] += count\n\n    def generate_primes(num):\n        if num == 1: return []\n        primes = list(range(2, num + 1))\n        i, p = 0, 1\n        while p <= math.sqrt(num):\n            if primes[i] != 0:\n                p = primes[i]\n                primes = [prime if (prime % p != 0 or prime == p) else 0 for prime in primes]\n            i += 1\n        return set(p for p in primes if p != 0)\n\n    n = int(input())\n    d = defaultdict(lambda :1)\n    primes = generate_primes(100)\n    for i in range(1, n + 1):\n        factorization(i)\n    c = [0] * 6\n    for v in list(d.values()):\n        if v >= 3: c[0] += 1\n        if v >= 75: c[5] -= 1\n        elif v >= 25: c[4] -= 1\n        elif v >= 15: c[3] -= 1\n        elif v >= 5: c[2] -= 1\n        elif v >= 3: c[1] -= 1\n    s = 0\n    for i in range(6):\n        s += c[i]\n        c[i] = s\n    print((c[1] * (c[1] - 1) * (c[0] - 2) // 2 + c[3] * (c[0] - 1) + c[2] * (c[1] - 1) + c[4]))\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\n\nn = int(input())\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nli = []\n\nfor i in range(1,n+1):\n    li += prime_factorize(i)\n\nC = Counter(li)\n\na,b,c,d,e = 0,0,0,0,0\n\nfor i in C.values():\n    if i >= 74:\n        e += 1\n    elif i >= 24:\n        d += 1\n    elif i >= 14:\n        c += 1\n    elif i >= 4:\n        b += 1\n    elif i >= 2:\n        a += 1\n\npoint = 0\npoint += e\npoint += (d+e)*(a+b+c) + (d+e)*(d+e-1)\npoint += (c+d+e)*b + (c+d+e)*(c+d+e-1)\npoint += a*((b+c+d+e)*(b+c+d+e-1)//2) + (b+c+d+e)*((b+c+d+e-1)*(b+c+d+e-2)//2)\n\nprint(point)", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n\ndef prime_factorization(x):\n    \"\"\"\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\n    import math\n    re = []\n    i = 2\n    while x != 1:\n        if x % i == 0:\n            re.append(i)\n            x //= i\n        else:\n            i += 1\n            if i > math.sqrt(x):\n                re.append(x)\n                break\n    return re\n\n\ndef cmb(n, r):\n    \"\"\"\u7d44\u307f\u5408\u308f\u305b\"\"\"\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(N):\n    pf = []\n    for i in range(1, N + 1):\n        pf += prime_factorization(i)\n    pf_num = {}\n    for p in pf:\n        pf_num.setdefault(p, 0)\n        pf_num[p] += 1\n    over2 = 0\n    over4 = 0\n    over14 = 0\n    over24 = 0\n    over74 = 0\n    for v in list(pf_num.values()):\n        if 74 <= v:\n            over74 += 1\n        if 24 <= v:\n            over24 += 1\n        if 14 <= v:\n            over14 += 1\n        if 4 <= v:\n            over4 += 1\n        if 2 <= v:\n            over2 += 1\n    ans = 0\n    # 3-5-5\n    ans += (over2 - over4) * cmb(over4, 2)\n    ans += cmb(over4, 3) * 3\n\n    # 5-15\n    ans += (over4 - over14) * over14\n    ans += cmb(over14, 2) * 2\n\n    # 3-25\n    ans += (over2 - over24) * over24\n    ans += cmb(over24, 2) * 2\n\n    # 75\n    ans += over74\n\n    print(ans)\n\n\ndef __starting_point():\n    N = int(input())\n    solve(N)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n\n__starting_point()", "\n# 75 = 5 * 5 * 3\n# 3 * 5 * 5, 3 * 25, 5 * 15, 75\n\n\nn = int(input())\n\ndiv = [0] * (n + 1)\nfor i in range(2, n + 1):\n    j = 2\n    while j * j <= i:\n        while i % j == 0:\n            div[j] += 1\n            i //= j\n        j += 1\n    if i != 1:\n        div[i] += 1\n\ni3 = i5 = i15 = i25 = i75 = 0\nfor _, v in enumerate(div):\n    if v >= 74:\n        i75 += 1\n    if v >= 24:\n        i25 += 1\n    if v >= 14:\n        i15 += 1\n    if v >= 4:\n        i5 += 1\n    if v >= 2:\n        i3 += 1\nans = i75\nans += i25 * (i3 - 1)\nans += i15 * (i5 - 1)\nans += (i5 - 1) * i5 // 2 * (i3 - 2)\nprint(ans)\n", "#!/usr/bin/env python3\nimport collections\n\nn = int(input())\n\n# dp == [[0]*n for _ in range(75]\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\n\ncount = 0\ndiv = {}\nfor i in range(2, n+1):\n    c = collections.Counter(prime_factorize(i))\n    for key, value in list(c.items()):\n        if key in div:\n            div[key] += value\n        else:\n            div[key] = 1\n# print(div)\n\n\ndef num(m):\n    return len(list([x for x in list(div.values()) if x+1 >= m]))\n\n\n# print(num(75))\nprint((num(75) + num(25)*(num(3)-1) + num(15) *\n      (num(5)-1) + num(5)*(num(5)-1)*(num(3)-2)//2))\n", "from collections import defaultdict\n\nn = int(input())\n\nfactor_list = defaultdict(int)\nfor i in range(1, n+1):\n    p = 2\n    t = i\n    while p <= n**0.5+5:\n        if t%p == 0:\n            factor_list[p] += 1\n            t //= p\n        else:\n            p += 1\n    if t > 1:\n        factor_list[t] += 1\n\nnums = [0 for _ in range(1000)]\n\nfor k, v in list(factor_list.items()):\n    nums[v] += 1\n\nfor i in range(998, -1, -1):\n    nums[i] += nums[i+1]\n\nprint((nums[74]+nums[24]*(nums[2]-1)+nums[14]*(nums[4]-1)+ \\\n    nums[4]*(nums[4]-1)*(nums[2]-2)//2))\n", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n\ndef prime_factorization(x):\n    \"\"\"\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\n    import math\n    re = []\n    i = 2\n    while x != 1:\n        if x % i == 0:\n            re.append(i)\n            x //= i\n        else:\n            i += 1\n            if i > math.sqrt(x):\n                re.append(x)\n                break\n    return re\n\n\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N):\n    pf = []\n    for i in range(1, N + 1):\n        pf += prime_factorization(i)\n    pf_nums = [0] * (N + 1)\n    for p in pf:\n        pf_nums[p] += 1\n\n    def num(m):\n        return len([i for i in pf_nums if i >= m - 1])\n\n    ans = num(75) + \\\n          num(25) * (num(3) - 1) + \\\n          num(15) * (num(5) - 1) + \\\n          num(5) * (num(5) - 1) * (num(3) - 2) // 2\n\n    print(ans)\n\n\ndef __starting_point():\n    N = int(input())\n    solve(N)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n\n__starting_point()", "n=int(input())\nprimes=[0]*(n+1)\nfor i in range(2,n+1):\n    cur = i\n    for j in range(2,i+1):\n        while cur%j == 0:\n            primes[j]+=1\n            cur//=j\n\ndef num(m):\n    return len(list([x for x in primes if x>=m-1]))\n\nprint((num(75) + num(25)*(num(3)-1) + num(15)*(num(5)-1) + num(5)*(num(5)-1)*(num(3)-2)//2))\n", "sosuu=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\nN=int(input())\nL=[0 for i in range(25)]\nfor i in range(25):\n  s=N\n  while True:\n    if s!=0:\n      s=s//sosuu[i]\n      L[i]+=s\n    else:\n      break\n#1 75 3 25 5 15 (3 5 5)\na,b,c,d,e=0,0,0,0,0\nfor i in range(25):\n  if L[i]>=74:\n    a+=1\n  if L[i]>=24:\n    b+=1\n  if L[i]>=14:\n    c+=1\n  if L[i]>=4:\n    d+=1\n  if L[i]>=2:\n    e+=1\nprint(a+b*(e-1)+c*(d-1)+d*(d-1)*(e-2)//2)", "import collections\n\ndef fact(N):\n    arr = []\n    i=2\n    while i*i<=N:\n        if N%i==0:\n            while N%i==0:\n                arr.append(i)\n                N//=i\n        i+=1\n    if N>1:\n        arr.append(N)\n    return arr\n\nN=int(input())\narr = []\nfor i in range(1,N+1):\n    arr += fact(i)\n#print(arr)\narc=collections.Counter(arr)\nnum74cnt=0\nnum24cnt=0\nnum14cnt=0\nnum4cnt=0\nnum2cnt=0\nfor val in list(arc.values()):\n    if val >=74:\n        num74cnt+=1\n    if val >=24:\n        num24cnt+=1\n    if val >=14:\n        num14cnt+=1\n    if val >= 4:\n        num4cnt+=1\n    if val >= 2:\n        num2cnt +=1\nans = num74cnt\nans += num24cnt*(num2cnt-1)\nans += num14cnt*(num4cnt-1)\nans += num4cnt*(num4cnt-1)//2*(num2cnt-2)\n\nprint(ans)\n", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\n#import bisect #bisect.bisect_left(B, a)\nfrom collections import defaultdict #d = defaultdict(int) d[key] += value\n#from collections import Counter # a = Counter(A).most_common()\nfrom itertools import accumulate #list(accumulate(A))\n\ndef factorization(n):\n    #arr = []\n    #arr = defaultdict(int)\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            #arr.append([i, cnt])\n            arr[i] += cnt\n\n    if temp!=1:\n        #arr.append([temp, 1])\n        arr[temp] += 1\n\n    if arr==[]:\n        #arr.append([n, 1])\n        arr[n] += 1\n\n    return arr\n\nN =ii()\narr = defaultdict(int)\n\nfor i in range(1, N+1):\n    factorization(i)\n\ncnt = [0]*100\n\nfor key, value in arr.items():\n    cnt[1] += 1\n    cnt[value+1] += -1\n\ncnt = list(accumulate(cnt))\n\nans = 0\n#print(arr)\n#print(cnt)\nif cnt[4] > 1:\n    #ans += cnt[4] * (cnt[2]-1) * (cnt[2]-2) // 2\n    #ans += (cnt[2]-1) * (cnt[2]-2) // 2\n    #ans = cnt[2] * (cnt[2]-1) // 2\n    #ans += (cnt[2]-2)\n    #ans += cnt[4] * (cnt[4]-1) // 2 * (cnt[2]-cnt[4])\n    #ans += cnt[4] * (cnt[4]-1) * (cnt[4]-2) // 6\n    ans += cnt[4] * (cnt[4]-1) // 2 * (cnt[2]-2)\n\nif cnt[24]:\n    #ans += (cnt[2]-1)\n    #ans += cnt[24] * (cnt[24]-1) // 2 + cnt[24] * (cnt[2] - cnt[24])\n    ans += cnt[24] * (cnt[2] - 1)\nif cnt[14]:\n    #ans += (cnt[4]-1)\n    #ans += cnt[14] * (cnt[14]-1) // 2 + cnt[14] * (cnt[4] - cnt[14])\n    ans += cnt[14] * (cnt[4] - 1)\nif cnt[74]:\n    ans += cnt[74]\n\nprint(ans)", "def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nn=int(input())\nalist=[0]*101\nfor i in range(2,n+1):\n  for j in factorization(i):\n    alist[j[0]]+=j[1]\nif n==1:\n  print(0)\nelse:\n  ans=0\n  for i in range(1,100):\n    if alist[i]>=74:\n      ans+=1\n    if alist[i]>=24:\n      for j in range(1,100):\n        if i!=j and alist[j]>=2:\n          ans+=1\n    if alist[i]>=14:\n      for j in range(1,100):\n        if i!=j and alist[j]>=4:\n          ans+=1\n    if alist[i]>=2:\n      for j in range(1,100):\n        for k in range(j+1,100):\n          if i!=j and  k!=i and alist[j]>=4 and alist[k]>=4:\n            ans+=1\n  print(ans)", "from collections import Counter\nfrom copy import deepcopy\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nN = int(input())\nprime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\ndp = [[0] * 26 for _ in range(N)]\nif N == 1:\n    print(0)\nelse:\n    for i in range(1,N):\n        dp[i] = deepcopy(dp[i-1])\n        temp = Counter(prime_factorize(i+1))\n        for x in temp.items():\n            if len(prime_factorize(x[0])) == 1:\n                dp[i][prime.index(x[0])] += x[1]\n        four = 0\n        two = 0\n        fourteen = 0\n        twenty_four = 0\n        seventy_four = 0\n        for j in range(25):\n            if dp[i][j] >= 74:\n                seventy_four += 1\n                twenty_four += 1\n                fourteen += 1\n                four += 1\n                two += 1\n            elif dp[i][j] >= 24:\n                twenty_four += 1\n                fourteen += 1\n                four += 1\n                two += 1\n            elif dp[i][j] >= 14:\n                fourteen += 1\n                four += 1\n                two += 1\n            elif dp[i][j] >= 4:\n                four += 1\n                two += 1\n            elif dp[i][j] >= 2:\n                two += 1\n        dp[i][25] = ((four*(four-1))//2) * (two-2) + twenty_four * (two-1) + fourteen * (four-1) + seventy_four\n    print(dp[N-1][25])", "n = int(input())\nif n==1:\n    print(0)\n    return\na = [0]*(n+1)\ndef pf(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\nfor i in range(2,n+1):\n    x = pf(i)\n    for j in x:\n        a[j] += 1\nb = [0]*5 #3,5,15,25,75\nfor i in a:\n    if (i>=74):\n        b[4]+=1\n    elif (i>=24):\n        b[3]+=1\n    elif (i>=14):\n        b[2]+=1\n    elif (i>=4):\n        b[1]+=1\n    elif (i>=2):\n        b[0]+=1\nfor i in range(4):\n    b[3-i] += b[4-i]\nans = 0\nans += b[1]*(b[1]-1)//2*(b[0]-2)\nans += b[2]*(b[1]-1)\nans += b[3]*(b[0]-1)\nans += b[4]\nprint(ans)", "import sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 7)\nrl = sys.stdin.readline\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n ** 0.5 // 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp //= i\n            arr.append([i, cnt])\n    if temp != 1:\n        arr.append([temp, 1])\n    if not arr:\n        arr.append([n, 1])\n    return arr\n\n\ndef solve():\n    N = int(rl())\n    \n    counter = defaultdict(int)\n    for x in range(1, N + 1):\n        facts = factorization(x)\n        for fact, exp in facts:\n            counter[fact] += exp\n    \n    M = len(list(counter.keys()))\n    nums = tuple(counter.values())\n    div75 = (1, 3, 5, 15, 25, 75)\n    dp = [[0] * 76 for _ in range(M + 1)]\n    dp[0][1] = 1\n    for i in range(M):\n        for div0 in div75:\n            for div1 in div75:\n                if div0 * div1 <= 75 and div1 <= nums[i] + 1:\n                    dp[i + 1][div0 * div1] += dp[i][div0]\n    print((dp[M][75]))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "import sys\nread = sys.stdin.read\ndef main():\n    def factorization(n):\n        arr = []\n        temp = n\n        for i in range(2, int(-(-n ** 0.5 // 1)) + 1):\n            if temp % i == 0:\n                cnt = 0\n                while temp % i == 0:\n                    cnt += 1\n                    temp //= i\n                arr.append([i, cnt])\n        if temp != 1:\n            arr.append([temp, 1])\n        if not arr:\n            arr.append([n, 1])\n        return arr\n\n    n = int(input())\n    if n == 1:\n        print(0)\n        return\n    ps = [1] * 101\n    for i1 in range(2, n + 1):\n        i1fac = factorization(i1)\n        for face in i1fac:\n            ps[face[0]] += face[1]\n    o3 = 0\n    o5 = 0\n    o15 = 0\n    o25 = 0\n    o75 = 0\n    for pse in ps:\n        o3 += pse >= 3\n        o5 += pse >= 5\n        o15 += pse >= 15\n        o25 += pse >= 25\n        o75 += pse >= 75\n    r = o75\n    r += o25 * (o3 - 1)\n    r += o15 * (o5 - 1)\n    if o5 >= 2:\n        r += (o5 * (o5 - 1) // 2) * (o3 - 2)\n    print(r)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nfrom collections import Counter\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef prime_factorize(n):\n    a = Counter()\n    while n % 2 == 0:\n        a[2] += 1\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a[f] += 1\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a[n] += 1\n    return a\n\n\ndef main():\n    N = int(readline())\n\n    prime = Counter()\n    for n in range(1, N + 1):\n        prime.update(prime_factorize(n))\n\n    C = [0] * 101\n    for v in list(prime.values()):\n        C[v] += 1\n\n    for i in range(99, -1, -1):\n        C[i] += C[i + 1]\n\n    ans = 0\n    ans += (C[2] - 2) * (C[4] * (C[4] - 1) // 2)\n    ans += (C[2] - 1) * C[24]\n    ans += (C[4] - 1) * C[14]\n    ans += C[74]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import *\n\ndef factorize(n):\n    fct = []\n    \n    for i in range(2, int(n**0.5)+1):\n        c = 0\n        \n        while n%i==0:\n            n //= i\n            c += 1\n            \n        if c>0:\n            fct.append((i, c))\n    \n    if n>1:\n        fct.append((n, 1))\n    \n    return fct\n    \nN = int(input())\ncnt = defaultdict(int)\n\nfor i in range(1, N+1):\n    fct = factorize(i)\n    \n    for p, c in fct:\n        cnt[p] += c\n\nov74, ov24, ov14, ov4, ov2 = 0, 0, 0, 0, 0\n\nfor v in cnt.values():\n    if v>=74:\n        ov74 += 1\n    \n    if v>=24:\n        ov24 += 1\n        \n    if v>=14:\n        ov14 += 1\n    \n    if v>=4:\n        ov4 += 1\n    \n    if v>=2:\n        ov2 += 1\n\nans = ov74+ov24*(ov2-1)+ov14*(ov4-1)+ov4*(ov4-1)//2*(ov2-2)\nprint(ans)", "N = int(input())\n\nprimes = set(range(2, N+1))\nfor i in range(2, int(N**0.5+1)):\n    primes.difference_update(range(i*2, N+1, i))\nprimes = list(primes)\nprimes.sort()\n\ndiv = [0]*len(primes)\n\nfor i in range(2, N+1):\n    num = i\n    for j, prime in enumerate(primes):\n        cnt = 0\n        if num < prime: break\n        while num%prime == 0:\n            cnt += 1\n            num //= prime\n        div[j] += cnt\n        \nc74, c24, c14, c4, c2 = 0, 0, 0, 0, 0\nfor i in div:\n    if i>= 74: c74 += 1\n    if i >= 24: c24 += 1\n    if i >= 14: c14 += 1\n    if i >= 4: c4 += 1\n    if i >= 2: c2 += 1\nans = 0\nans += c74\nans += (c24) * (c2 - 1)\nans += c14 * (c4 - 1)\nans += (c4) * (c4 - 1) // 2 * (c2 - 2)\nprint(ans)", "N = int(input())\n\nfrom collections import Counter\ndef factorize(n):\n    d = Counter()\n    m = 2\n    while m*m <= n:\n        while n%m == 0:\n            n //= m\n            d[m] += 1\n        m += 1\n    if n > 1:\n        d[n] += 1\n    return d\n\nfac = Counter()\nfor n in range(1,N+1):\n    fac += factorize(n)\n\nans = 0\nv4 = v2 = 0\nfor v in fac.values():\n    if v >= 4:\n        v4 += 1\n    elif v >= 2:\n        v2 += 1\nt = v4 * (v4-1)//2 * (v4-2+v2)\nif t > 0:\n    ans += t\n\nv24 = v2 = 0\nfor v in fac.values():\n    if v >= 24:\n        v24 += 1\n    elif v >= 2:\n        v2 += 1\nt = v24 * (v24-1+v2)\nans += t\n\nv14 = v4 = 0\nfor v in fac.values():\n    if v >= 14:\n        v14 += 1\n    elif v >= 4:\n        v4 += 1\nt = v14 * (v14-1+v4)\nans += t\n\nv74 = 0\nfor v in fac.values():\n    if v >= 74:\n        v74 += 1\nans += v74\n\nprint(ans)", "n=int(input())\n\n\n# \u7d20\u56e0\u6570\u5206\u89e3\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\n#factorization(24) \n## [[2, 3], [3, 1]] \n##  24 = 2^3 * 3^1\nfrom collections import defaultdict\nd=defaultdict(int)\n\nfor i in range(1,n+1):\n  x=factorization(i)\n  for xi in x:\n    d[xi[0]]+=xi[1]\ndi=defaultdict(int)\nfor k in d:\n  if d[k]>=74:\n    di[74]+=1\n    di[24]+=1\n    di[14]+=1\n    di[4]+=1\n    di[2]+=1\n  elif d[k]>=24:\n    di[24]+=1\n    di[14]+=1\n    di[4]+=1\n    di[2]+=1\n  elif d[k]>=14:\n    di[14]+=1\n    di[4]+=1\n    di[2]+=1\n  elif d[k]>=4:\n    di[4]+=1\n    di[2]+=1\n  elif d[k]>=2:\n    di[2]+=1\nans=di[74]\nans+=max(0,di[24]*(di[2]-1))\nans+=max(0,di[14]*(di[4]-1))\nans+=max(0,(di[4]*(di[4]-1))//2*(di[2]-2))\nprint((max(ans,0)))\n", "n = int(input())\n\nprime_1 = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\nprime_2 = [4,9,25,49]\nprime_3 = [8,27]\nprime_4 = [16,81]\n\ndp = [0]*15\n\nfor i in range(15):\n    dp[i] += n // prime_1[i]\n\nfor j in range(4):\n    dp[j] += n // prime_2[j]\n    \nfor k in range(2):\n    dp[k] += n // prime_3[k]\n\nfor l in range(2):\n    dp[l] += n // prime_4[l]\n\ndp[0] += n // 32\ndp[0] += n // 64\n\nn2 = sum(x>1 for x in dp) \nn4 =sum(x>3 for x in dp)\nn14=sum(x>13 for x in dp)\nn24=sum(x>23 for x in dp)\nn74=sum(x>73 for x in dp)\n\np553 = (n2-n4) * (n4*(n4-1) //2 ) + ((n4*(n4-1)*(n4-2))//2)\np144 = (n4-n14) * n14 + (n14*(n14-1))\np242 = (n2-n24) * n24 + (n24*(n24-1))\np750 = n74\n\nprint(p553+p144+p242+p750)", "from collections import Counter\nfrom itertools import permutations\n\nn=int(input())\n\ndef factorization(n):\n    p=2\n    fcr=[]\n    while p*p<=n:\n        while n%p==0:\n            fcr.append(p)\n            n//=p\n        p+=1\n    if n>1:\n        fcr.append(n)\n    return fcr\n\n\nfcr_l=[]\nfor i in range(1,n+1):\n  fcr=factorization(i)\n  fcr_l+=fcr\n\n\nc=Counter(fcr_l)\nfcr_st=set(fcr_l)\n\nans=[]\nfor p,q,r in permutations(fcr_st,3):\n  if c[p]>=74:\n    ans.append(p**74)\n  if c[p]>=24 and c[q]>=2:\n    ans.append((p**24)*(q**2))\n  if c[p]>=14 and c[q]>=4:\n    ans.append((p**14)*(q**4))\n  if c[p]>=4 and c[q]>=4 and c[r]>=2:\n    ans.append((p**4)*(q**4)*(r**2))\n\nprint(len(set(ans)))", "from collections import Counter\nfrom itertools import chain\n\n\ndef prime_set(N):\n    \"\"\"\n    N\u307e\u3067\u306e\u7d20\u6570\u306eset\u3092\u8fd4\u3059\n    \"\"\"\n    if N < 4:\n        return ({}, {}, {2}, {2, 3})[N]\n    Nsq = int(N ** 0.5 + 0.5) + 1\n    primes = {2, 3} | set(chain(range(5, N + 1, 6), range(7, N + 1, 6)))\n    for i in range(5, Nsq, 2):\n        if i in primes:\n            primes -= set(range(i * i, N + 1, i * 2))\n    return primes\n\n\ndef prime_factorization(n):  # \u7d20\u56e0\u6570\u5206\u89e3\n    res = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            cnt = 0\n            while n % i == 0:\n                cnt += 1\n                n //= i\n            res.append((i, cnt))\n    if n > 1:\n        res.append((n, 1))\n    return res\n\n\nN = int(input())\nprimes = {p: 0 for p in prime_set(100)}\nfor i in range(2, N + 1):\n    pf = prime_factorization(i)\n    for p, f in pf:\n        primes[p] += f\n\n\nn2 = n4 = n14 = n24 = n74 = 0\nfor v in primes.values():\n    if v >= 74:\n        n74 += 1\n    if v >= 24:\n        n24 += 1\n    if v >= 14:\n        n14 += 1\n    if v >= 4:\n        n4 += 1\n    if v >= 2:\n        n2 += 1\n\nans = 0\nif n74:\n    ans += n74\nif n24:\n    ans += n24 * (n2 - 1)\nif n14:\n    ans += n14 * (n4 - 1)\nif n4 >= 2 and n2:\n    ans += n4 * (n4 - 1) // 2 * (n2 - 2)\n\nprint(ans)", "from itertools import combinations\nfrom collections import defaultdict\nn = int(input())\n\n\ndef sieve(n):\n    n += 1\n    res = [i for i in range(n)]\n    for p in range(2, int(n**.5)+1):\n        if res[p] < p:\n            continue\n        for q in range(p**2, n, p):\n            if res[q] == q:\n                res[q] = p\n    return res\n\n\nU = 100\nmin_factor = sieve(U)\n\n\ndef prime_factor(n):\n    res = defaultdict(int)\n    while 1 < n:\n        res[min_factor[n]] += 1\n        n //= min_factor[n]\n    return res\n\n\ncnt = defaultdict(int)\nfor i in range(1, n+1):\n    for k, v in list(prime_factor(i).items()):\n        cnt[k] += v\n\nfacts = list(cnt.keys())\nans = 0\n# 3,5,5\nfor subset in combinations(facts, 3):\n    for i in range(3):\n        can_be = 1\n        for j, prim in enumerate(subset):\n            if i == j:\n                if cnt[prim] < 2:\n                    can_be = 0\n                    break\n            else:\n                if cnt[prim] < 4:\n                    can_be = 0\n                    break\n        if can_be:\n            ans += 1\n\n# 15,5 3,25\nfor subset in combinations(facts, 2):\n    for i in range(2):\n        can_be = 1\n        for j, prim in enumerate(subset):\n            if i == j:\n                if cnt[prim] < 4:\n                    can_be = 0\n                    break\n            else:\n                if cnt[prim] < 14:\n                    can_be = 0\n                    break\n        if can_be:\n            ans += 1\n\n        can_be2 = 1\n        for j, prim in enumerate(subset):\n            if i == j:\n                if cnt[prim] < 2:\n                    can_be2 = 0\n                    break\n            else:\n                if cnt[prim] < 24:\n                    can_be2 = 0\n                    break\n        if can_be2:\n            ans += 1\n\n# 74\u500b\u306e\u5834\u5408\nif 74 <= cnt[2]:\n    ans += 1\n\nprint(ans)\n", "#!/usr/bin/env python\n\nn = int(input())\n\n# Eratosthenes' sieve\nis_prime = [True for _ in range(100)]\nis_prime[0] = is_prime[1] = False\nfor i in range(100):\n    if not is_prime[i]:continue \n    for j in range(i*i, 100, i): \n        if not is_prime[j]: \n            is_prime[j] = False\n\nfactor = [0 for _ in range(100)]\nfor i in range(2, n+1):\n    for j in range(2, 100):\n        if is_prime[j]:\n            while i%j == 0:\n                factor[j] += 1\n                i //= j\n\n#print('is_prime =', is_prime)\n#print('factor =', factor)\n\nfs = []\nfor i in range(100):\n    if factor[i] != 0:\n        fs.append(factor[i])\n\n#print('fs =', fs)\n\nm = len(fs)\nans = [0 for _ in range(4)]\nfor i in range(m):\n    for j in range(m):\n        for k in range(m):\n            if i!=j and j!=k and k!=i:\n                if fs[i] >= 4 and fs[j] >= 4 and fs[k] >=2:\n                    ans[0] += 1\n#                    print('fs[{}] = {}, fs[{}] = {}, fs[{}] = {}'.format(i, fs[i], j, fs[j], k, fs[k]))\nfor i in range(m):\n    if fs[i] >= 74: \n        ans[1] += 1\n#        print('fs[{}] = {}'.format(i, fs[i]))\nfor i in range(m):\n    for j in range(m):\n        if i!=j:\n            if fs[i] >= 2 and fs[j] >= 24: \n                ans[2] += 1\n#                print('fs[{}] = {}, fs[{}] = {}'.format(i, fs[i], j, fs[j]))\nfor i in range(m):\n    for j in range(m):\n        if i!=j:\n            if fs[i] >= 4 and fs[j] >= 14: \n                ans[3] += 1\n#                print('fs[{}] = {}, fs[{}] = {}'.format(i, fs[i], j, fs[j]))\n\nAns = ans[0]//2 + ans[1] + ans[2] + ans[3]\nprint(Ans)", "import sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\n\ndef prime_fact(n):\n    root = int(math.sqrt(n))\n    prime_dict = {}\n    for i in range(2, root+1):\n        cnt = 0\n        while n % i == 0:\n            cnt += 1\n            n = n // i\n        if cnt:\n            prime_dict[i] = cnt\n    if n != 1:\n        prime_dict[n] = 1\n    return prime_dict\n\n\ndef main():\n    N = NI()\n    PD = {}\n    for i in range(2, N+1):\n        pd = prime_fact(i)\n        for p, k in pd.items():\n            PD.setdefault(p, 0)\n            PD[p] += k\n    X = {74: 0, 24: 0, 14: 0, 4: 0, 2: 0}\n    for p, k in PD.items():\n        for x in X.keys():\n            if k >= x:\n                X[x] += 1\n    print(X[74] + X[24]*(X[2]-1) + X[14]*(X[4]-1) + X[4]*(X[4]-1)//2 * (X[2]-2))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\ndef make_prime_table(N):\n    sieve = [0] * (N + 1)\n    sieve[0] = -1\n    sieve[1] = -1\n    for i in range(2, N + 1):\n        if sieve[i] != 0:\n            continue\n        sieve[i] = i\n        for j in range(i * i, N + 1, i):\n            if sieve[j] == 0:\n                sieve[j] = i\n    return sieve\n\nN = int(input())\n\nprime_table = make_prime_table(100)\n\nd = {}\nfor i in range(2, N + 1):\n    while i != 1:\n        d.setdefault(prime_table[i], 0)\n        d[prime_table[i]] += 1\n        i //= prime_table[i]\n\n# 75 = 5 * 5 * 3\n#    = 15 * 5\n#    = 25 * 3\n#    = 75\nn74 = 0\nn24 = 0\nn14 = 0\nn4 = 0\nn2 = 0\nfor k in d:\n    if d[k] >= 74:\n        n74 += 1\n    if d[k] >= 24:\n        n24 += 1\n    if d[k] >= 14:\n        n14 += 1\n    if d[k] >= 4:\n        n4 += 1\n    if d[k] >= 2:\n        n2 += 1\n\nresult = 0\n# x ^ 4 * y ^ 4 * z ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n4 * (n4 - 1) // 2 * (n2 - 2)\n# x ^ 14 * y ^ 4 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n14 * (n4 - 1)\n# x ^ 24 * y ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n24 * (n2 - 1)\n# x ^ 74 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n74\nprint(result)\n", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for k in range(2, int(pow(n, 0.5)) + 1):\n        if n % k == 0:\n            return False\n    return True\n\n\ndef resolve():\n    n = int(input())\n    primes = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            primes.append(i)\n\n    fact = []\n    for prime in primes:\n        ex = 0\n        p = prime\n        while n // p:\n            ex += n // p\n            p *= prime\n        fact.append(ex)\n\n    cnt_74 = cnt_24 = cnt_14 = cnt_4 = cnt_2 = 0\n    for i in fact:\n        if i >= 74:\n            cnt_74 += 1\n        if i >= 24:\n            cnt_24 += 1\n        if i >= 14:\n            cnt_14 += 1\n        if i >= 4:\n            cnt_4 += 1\n        if i >= 2:\n            cnt_2 += 1\n\n    res1 = max(0, cnt_24 * (cnt_2 - 1))\n    res2 = (cnt_4 * (cnt_4 - 1)) // 2 * max(0, cnt_2 - 2)\n    res3 = max(0, cnt_14 * (cnt_4 - 1))\n    print((cnt_74 + res1 + res2 + res3))\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import math\nfrom collections import defaultdict\nimport numpy as np\nn = int(input())\ndic = defaultdict(lambda : 0)\nfor i in range(2, n + 1):\n    sqrt = math.floor(i ** 0.5)\n    for j in range(2, sqrt + 1):\n        if not i % j:\n            count = 0\n            while i % j == 0:\n                count += 1\n                i //= j\n            dic[j] += count\n    if i > 1:\n        dic[i] += 1\nvalues = np.array(list(dic.values()))\nv1 = len(values[values >= 2])\nv2 = len(values[values >= 4])\nv = (v2 * (v2 - 1) // 2) * (v1 - 2)\n\nv3 = len(values[values >= 24])\nv += v3 * (v1 - 1)\n\nv4 = len(values[values >= 14])\nv += v4 * (v2 - 1)\n\nv5 = len(values[values >= 74])\nv += v5\nprint(v)", "from collections import Counter\nfrom math import factorial\n\ndef prime_factorize(n):\n    a = []\n    while n%2 == 0:\n        a.append(2)\n        n //=2\n    f = 3\n    while f*f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\ndef prime_factoring(n):\n    from collections import Counter\n    a = prime_factorize(n)\n    return Counter(a)\n\nN = int(input())\nfac =factorial(N)\nList = list(prime_factoring(fac).values())\n# print(List)\n\ndef num(m):\n    return len(list([x for x in List if x >= m-1]))\nprint((num(75)+ num(25)*(num(3)-1) + num(15)*(num(5)-1)+ num(5)*(num(5)-1)*(num(3)- 2)//2))\n", "from itertools import permutations\n# 3*5*5\n# (2, 4, 4) (14, 4) (2, 24) (74)\nn = int(input())\nd = [0] * (n + 1)\nfor i in range(2, n + 1):\n    for p in range(2, n + 1):\n        while i % p == 0:\n            i //= p\n            d[p] += 1\nd = list(filter(int, d))\nans = 0\nfor i, j, k in permutations(d, 3):\n    ans += min(i - 2, j - 4, k - 4) >= 0\nans //= 2\nfor i, j in permutations(d, 2):\n    ans += min(i - 14, j - 4) >= 0\n    ans += min(i - 2, j - 24) >= 0\nfor i in d:\n    ans += i - 74 >= 0\nprint(ans)\n", "#\u7d20\u56e0\u6570\u5206\u89e3\ndef soinsu_bunkai(m):\n    pf={}\n\n    for i in range(2,int(m**0.5)+1):\n        while m%i==0:\n            pf[i]=pf.get(i,0)+1\n            m//=i\n    if m>1:\n        pf[m]=1\n    return pf\n\n\n# \u521d\u671f\u5165\u529b\nfrom collections import Counter\nfrom collections import defaultdict\nfrom itertools import permutations\nimport sys\ninput = sys.stdin.readline  #\u6587\u5b57\u5217\u3067\u306f\u4f7f\u308f\u306a\u3044\nN = int(input())\n\n# N\u306e\u968e\u4e57\u306e\u7d20\u6570\u5217\u6319\nc =defaultdict(int)\nfor i in range(1,N+1):\n    x =soinsu_bunkai(i)\n    for j,v in x.items():\n        c[j] +=v\n\n\nans=set()\nfor p,q,r in permutations(c.keys(),3):\n    if c[p] >=74:\n        ans.add(p**74)\n    if c[p] >=24 and c[q] >=2:\n        ans.add((p**24)*(q**2))\n    if c[p] >=14 and c[q] >=4:\n        ans.add((p**14)*(q**4))\n    if c[p] >=4 and c[q] >=4 and c[r] >=2:\n        ans.add((p**4)*(q**4)*(r**2))\n    \nprint(len(ans))", "import math\nn = int(input())\n\ndiv = [0]*101\n\nfor i in range(2,n+1):\n    j=2\n    t=i\n    while i > 1 and j<=t:\n        if i%j==0:\n            div[j]+=1\n            i//=j\n        if i%j!=0:\n            j+=1\n\nn2=0\nn4=0\nn14=0\nn24=0\nn74=0\n\nfor i in range(n):\n    if div[i]>=2:\n        n2+=1\n    if div[i]>=4:\n        n4+=1\n    if div[i]>=14:\n        n14+=1\n    if div[i]>=24:\n        n24+=1\n    if div[i]>=74:\n        n74+=1\n\nprint((n24*(n2-1)+n14*(n4-1)+n4*(n4-1)//2*(n2-2)+n74))\n", "n = int(input())\nif n==1:\n    print(0)\n    return\nprimes = [True]*(n+1)\nprimes[0] = False\nprimes[1] = False\nfor i in range(2, n+1):\n    if primes[i]:\n        for j in range(i*2, n+1, i):\n            primes[j] = False\nprimes = [i for i, j in enumerate(primes) if j]\nfactors = {2:0, 4:0, 14:0, 24:0, 74:0}\nfor i in primes:\n    tmp = 0\n    j = i\n    while j<=n:\n        tmp += n//j\n        j *= i\n    for k in factors:\n        if tmp>=k:\n            factors[k] += 1\nans = factors[4]*(factors[4]-1)*(factors[2]-2)//2\nans += factors[14]*(factors[4]-1)\nans += factors[24]*(factors[2]-1)\nans += factors[74]\nprint(ans)", "#!/usr/bin/env python3\nimport sys\nfrom collections import deque, Counter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_right\nfrom itertools import accumulate\n\nsys.setrecursionlimit(10**6)\nINF = 10**12\nm = 10**9 + 7\n\ndef cal_divisors(N):\n    divisors = []\n    i = 1\n    while i*i <= N:\n        if N % i == 0:\n            divisors.append(i)\n            if i != N // i:\n                divisors.append(N//i)\n        i += 1\n    divisors.sort()\n    return divisors\n\ndef prime_factorize(N):\n    prime_list = []\n    while N % 2 == 0:\n        prime_list.append(2)\n        N //= 2\n    f = 3\n    while f**2 <= N:\n        if N % f == 0:\n            prime_list.append(f)\n            N //= f\n        else:\n            f += 2\n    if N != 1:\n        prime_list.append(N)\n    return prime_list\n\ndef main():\n    N = int(input())\n    divisors = []\n    for i in range(1,N+1):\n        divisors.extend(prime_factorize(i))\n    l = Counter(divisors)\n    # print(l)\n    # \u7d04\u6570\u309275\u500b\u6301\u3064 X = a^p * b^q \u3068\u3057\u305f\u6642\u3001(p,q) = (0,74), (2,24), (4,14) \u3057\u304b\u306a\u3044\n    ans = 0\n    nums = list(l.values())\n    # 74\u3088\u308a\u5927\u304d\u3044\u7d20\u56e0\u6570\u306e\u6570\u3060\u3051(1)\u306e\u30d1\u30bf\u30fc\u30f3\n    ans += len([*[x for x in nums if x >= 74]])\n\n    # 14,4\u306e\u30d1\u30bf\u30fc\u30f3\n    ans += len([*[x for x in nums if x >= 14]]) * (len([*[x for x in nums if x >= 4]])-1)\n\n    # 24,2\u306e\u30d1\u30bf\u30fc\u30f3\n    ans += len([*[x for x in nums if x >= 24]]) * (len([*[x for x in nums if x >= 2]])-1)\n\n    # 4,4,2\u306e\u30d1\u30bf\u30fc\u30f3\n    ans += len([*[x for x in nums if x >= 4]]) * (len([*[x for x in nums if x >= 4]])-1) * (len([*[x for x in nums if x >= 2]])-2) // 2\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nfor i in range(1, n+1):\n    for x in prime_factorize(i):\n        d[x] += 1\n\n#print(d)\n\n\n\ne = defaultdict(int)\n\nl = [2, 4, 14, 24, 74]\n\n#74\nfor k, v in d.items():\n    for x in l:\n        if v >= x:\n            e[x] += 1\n\n#print(e)\n\nans = 0\n\nans += e[74]\nans += e[24] * (e[2] - 1)\nans += e[14] * (e[4] - 1)\nans += (e[4] * (e[4]-1) // 2) * (e[2] - e[4]) + (e[4] * (e[4]-1) * (e[4]-2) // 2)\n\nprint(ans)", "'''\n\u7814\u7a76\u5ba4PC\u3067\u306e\u89e3\u7b54\n'''\nimport math\n#import numpy as np\nimport queue\nimport bisect\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\nmod = 10**9+7\n\ndef main():\n    n = int(ipt())\n    d = defaultdict(int)\n    #n\u307e\u3067\u306e\u7d20\u6570\u306e\u914d\u5217\u3092\u8fd4\u3059\u95a2\u6570\n    def primes(n):\n        if n == 1:\n            return []\n        else:\n            tbl = [True]*(n+1)\n            pri = [2]\n            for i in range(2,n+1,2):\n                tbl[i] = False\n            k = 3\n            while k <= n:\n                if tbl[k]:\n                    pri.append(k)\n                    for i in range(k,n+1,k):\n                        tbl[i] = False\n                k += 2\n            return pri\n    p = primes(n)\n    for i in range(2,n+1):\n        ii = i\n        for j in p:\n            while True:\n                if ii%j == 0:\n                    d[j] += 1\n                    ii //= j\n                else:\n                    break\n            if ii == 1:\n                break\n    d2 = 0\n    d4 = 0\n    d14 = 0\n    d24 = 0\n    d74 = 0\n    for i in list(d.values()):\n        if i >= 2:\n            d2 += 1\n            if i >= 4:\n                d4 += 1\n                if i >= 14:\n                    d14 += 1\n                    if i >= 24:\n                        d24 += 1\n                        if i >= 74:\n                            d74 += 1\n\n    print((d4*(d4-1)*(d2-2)//2+d14*(d4-1)+d24*(d2-1)+d74))\n\n    return None\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# coding: utf-8\n\n# https://atcoder.jp/contests/abc114\n# 14:44-15:24 done\n\n\ndef soinsubunkai(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\n\ndef main():\n    N = int(input())\n\n    soinsu = {}\n    for i in range(2, N+1):\n        i_soinsu = soinsubunkai(i)\n        for p, idx in i_soinsu:\n            if p not in soinsu:\n                soinsu[p] = idx\n            else:\n                soinsu[p] += idx\n\n    n_75, n_25, n_15, n_5, n_3 = 0, 0, 0, 0, 0\n    for v in list(soinsu.values()):\n        if v >= 74:\n            n_75 += 1\n        if v >= 24:\n            n_25 += 1\n        if v >= 14:\n            n_15 += 1\n        if v >= 4:\n            n_5 += 1\n        if v >= 2:\n            n_3 += 1\n\n    n_3_5_5 = n_5 * (n_5-1) * (n_3-2) // 2\n    n_5_15 = n_15 * (n_5-1)\n    n_3_25 = n_25 * (n_3-1)\n\n    return n_3_5_5 + n_5_15 + n_3_25 + n_75\n\n\nprint((main()))\n", "import sys\nimport math\nimport collections\nimport bisect\nimport copy\n\n# import numpy as np\n\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: list(map(int, sys.stdin.readline().split()))\nna = lambda: list(map(int, sys.stdin.readline().split()))\nna1 = lambda: list([int(x) - 1 for x in sys.stdin.readline().split()])\n\n\n# ===CODE===\n\n\ndef main():\n    def prime_factorize(n):\n        a = []\n        while n % 2 == 0:\n            a.append(2)\n            n //= 2\n        f = 3\n        while f * f <= n:\n            if n % f == 0:\n                a.append(f)\n                n //= f\n            else:\n                f += 2\n        if n != 1:\n            a.append(n)\n        return a\n\n    n = ni()\n    divisor = [0 for _ in range(101)]\n\n    ans = 0\n    for i in range(1, n + 1):\n        a = prime_factorize(i)\n        for ai in a:\n            divisor[ai] += 1\n\n    over75 = 0\n    over25 = 0\n    over15 = 0\n    over5 = 0\n    over3 = 0\n    for di in divisor:\n        tmp = di + 1\n        if tmp >= 75:\n            over75 += 1\n        if tmp >= 25:\n            over25 += 1\n        if tmp >= 15:\n            over15 += 1\n        if tmp >= 5:\n            over5 += 1\n        if tmp >= 3:\n            over3 += 1\n\n    ans = over75 + over25 * (over3 - 1) + over15 * (over5 - 1) + over5 * (over5 - 1) // 2 * (over3 - 2)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef primeFactorization(n):\n    ans = []\n    temp = n\n    while temp%2 == 0:\n        ans.append(2)\n        temp //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while temp%i == 0:\n            ans.append(i)\n            temp //= i\n    if temp > 1:\n        ans.append(temp)\n    return collections.Counter(ans)\n\ndef resolve():\n    N = I()\n\n    # N!\u306e\u7d20\u56e0\u6570\u3092\u6c42\u3081\u308b\n    pf_N_fact = collections.Counter()\n    for i in range(1, N + 1):\n        pf = primeFactorization(i)\n        for k, v in list(pf.items()):\n            pf_N_fact[k] += v\n    l = list(pf_N_fact.values())\n    l.sort()\n    pf_num = len(pf_N_fact)\n\n    # \u7d04\u657075\u500b: \u7d20\u56e0\u6570\u306e\u500b\u6570+1\u306e\u7a4d\u304c75\u306b\u306a\u308b\u3088\u3046\u306b\u7d44\u307f\u5408\u308f\u305b\u308b\n    # \u7d20\u56e0\u6570\u306e\u500b\u6570\u3092\u4ee5\u4e0b\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4f55\u901a\u308a\u53d6\u308c\u308b\u304b\u3092\u8abf\u3079\u308b\n    # (2, 4, 4), (2, 24), (4, 14), (74)\n    ans = 0\n    num_2 = pf_num - bisect.bisect_left(l, 2)\n    num_4 = pf_num - bisect.bisect_left(l, 4)\n    num_14 = pf_num - bisect.bisect_left(l, 14)\n    num_24 = pf_num - bisect.bisect_left(l, 24)\n    num_74 = pf_num - bisect.bisect_left(l, 74)\n    ans += num_4 * (num_4 - 1) // 2 * (num_2 - 2)\n    ans += num_24 * (num_2 - 1)\n    ans += num_14 * (num_4 - 1)\n    ans += num_74\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "from collections import Counter, defaultdict\n\nN = int(input())\n\n# \u7d20\u6570\u306e\u30ea\u30b9\u30c8\ndef createPrimeList(N, isTable=True):\n    isPrime = [True] * (N + 1)\n    isPrime[0] = False\n    isPrime[1] = False\n    for i in range(2, N):\n        if not isPrime[i]:\n            continue\n        for p in range(i * 2, N, i):\n            isPrime[p] = False\n    return isPrime if isTable else [i for i in range(2, N) if isPrime[i]]\n\n# \u7d20\u56e0\u6570\u5206\u89e3(\u8907\u6570\u56de)\nprimeList = createPrimeList(100, False)\ndef primeFactorization(N):\n    primes = Counter()\n    for p in primeList:\n        while N % p == 0:\n            N //= p\n            primes[p] += 1\n    return primes\nprimes = Counter()\nfor i in range(1, N + 1):\n    primes += primeFactorization(i)\n\ncnt = defaultdict(int)\nfor c in list(primes.values()):\n    c += 1\n    for d in (3, 5, 15, 25, 75):\n        if c >= d:\n            cnt[d] += 1\n\nans = 0\nans += cnt[5] * (cnt[5] - 1) * (cnt[3] - 2) // 2\nans += cnt[25] * (cnt[3] - 1)\nans += cnt[15] * (cnt[5] - 1)\nans += cnt[75]\nprint(ans)\n", "import sys\nimport math\nimport itertools\n\n\n# \\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n ** 0.5 // 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp //= i\n                arr.append(i)\n\n    if temp != 1:\n        arr.append(temp)\n\n    if arr == []:\n        arr.append(n)\n    return arr\n\n\ndef main():\n    N = int(input())\n\n    P = [0] * (N + 1)\n\n    for i in range(1, N + 1):\n        arr = factorization(i)\n        for s in arr:\n            P[s] += 1\n\n    ans = 0\n    PN = []\n    for j in P:\n        if j != 0:\n            PN.append(j)\n\n    ans = 0\n    count = 0\n    # 75**\n    for i in PN:\n        if i >= 74:\n            count += 1\n    ans += count\n\n    count = 0\n    # 25*3\n    sub1 = 0\n    sub2 = 0\n    for i in PN:\n\n        if i >= 24:\n            sub1 += 1\n        if i >= 2:\n            sub2 += 1\n    ans += sub1 * (sub2 - 1)\n\n    # 15*5\n    sub1 = 0\n    sub2 = 0\n    for i in PN:\n\n        if i >= 14:\n            sub1 += 1\n        if i >= 4:\n            sub2 += 1\n    ans += sub1 * (sub2 - 1)\n\n    # 5*5*3\n    sub1 = 0\n    sub2 = 0\n    for i in PN:\n\n        if i >= 4:\n            sub1 += 1\n        if i >= 2:\n            sub2 += 1\n    ans += sub1 * (sub1 - 1)*(sub2-2)//2\n\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\nN = int(input())\nprm = defaultdict(int)\nfor n in range(2, N+1):\n    for p in range(2, int(n**0.5)+2):\n        while n % p == 0:\n            prm[p] += 1\n            n //= p\n        if n == 1:\n            break\n    else:\n        prm[n] += 1\nC = [2, 4, 14, 24, 74]\ncnt = [0]*5\nfor p, x in list(prm.items()):\n    for i, c in enumerate(C):\n        if x >= c:\n            cnt[i] += 1\nc2, c4, c14, c24, c74 = cnt\n\nans = c4*(c4-1)//2*(c2-2) if c2 > 2 else 0\nans += max(0, c24*(c2-1))\nans += max(0, c14*(c4-1))\nans += c74\nprint(ans)\n", "from collections import Counter\nN = int(input())\n\nl = []\nfor i in range(1, N+1):\n  while i % 2 == 0:\n    l.append(2)\n    i //= 2\n  f = 3\n  while f * f <= i:\n    if i % f == 0:\n      l.append(f)\n      i //= f\n    else:\n      f += 2\n  if i != 1:\n    l.append(i)\n\nc = Counter(l)\nm = c.most_common()\nc_75, c_25, c_15, c_5, c_3 = 0, 0, 0, 0, 0\nfor a in m:\n  if a[1] >= 74:\n    c_75 += 1\n  if a[1] >= 24:\n    c_25 += 1\n  if a[1] >= 14:\n    c_15 += 1\n  if a[1] >= 4:\n    c_5 += 1\n  if a[1] >= 2:\n    c_3 += 1\n    \nans = c_75\nans += c_25 * (c_3-1)\nans += c_15 * (c_5-1)\nans += (c_5*(c_5-1)//2) * (c_3-2)\nprint(ans)", "# \u7d20\u56e0\u6570\u5206\u89e3\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\n\nn = int(input())\n\nd = {}\nfor i in range(2, n+1):\n    p = prime_factorize(i)\n    for cp in p:\n        if cp in d:\n            d[cp] += 1\n        else:\n            d[cp] = 1\n\ncnt = {75:0, 25:0, 15:0, 5:0, 3:0}\nfor i in d:\n    for j in cnt:\n        if d[i] >= j-1:\n            cnt[j] += 1\nans = cnt[75] + cnt[25]*(cnt[3]-1) + cnt[15]*(cnt[5]-1) + cnt[5]*(cnt[5]-1)//2*(cnt[3]-2)\nprint(ans)", "# \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\ndef make_prime_table(N):\n    sieve = list(range(N + 1))\n    sieve[0] = -1\n    sieve[1] = -1\n    for i in range(2, int(N ** 0.5) + 1):\n        if sieve[i] != i:\n            continue\n        for j in range(i * i, N + 1, i):\n            if sieve[j] == j:\n                sieve[j] = i\n    return sieve\n\n\nN = int(input())\n\nprime_table = make_prime_table(100)\n\nd = {}\nfor i in range(2, N + 1):\n    while i != 1:\n        d.setdefault(prime_table[i], 0)\n        d[prime_table[i]] += 1\n        i //= prime_table[i]\n\n# 75 = 5 * 5 * 3\n#    = 15 * 5\n#    = 25 * 3\n#    = 75\nn74 = 0\nn24 = 0\nn14 = 0\nn4 = 0\nn2 = 0\nfor k in d:\n    if d[k] >= 74:\n        n74 += 1\n    if d[k] >= 24:\n        n24 += 1\n    if d[k] >= 14:\n        n14 += 1\n    if d[k] >= 4:\n        n4 += 1\n    if d[k] >= 2:\n        n2 += 1\n\nresult = 0\n# x ^ 4 * y ^ 4 * z ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n4 * (n4 - 1) // 2 * (n2 - 2)\n# x ^ 14 * y ^ 4 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n14 * (n4 - 1)\n# x ^ 24 * y ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n24 * (n2 - 1)\n# x ^ 74 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n74\nprint(result)\n", "c=[0]*101\nfor i in range(1,int(input())+1):\n    for j in range(2,i+1):\n        while i%j==0:\n            c[j]+=1\n            i//=j\ndef f(n):\n    return sum(i>n-2 for i in c)\nprint(f(75)+f(25)*(f(3)-1)+f(15)*(f(5)-1)+f(5)*(f(5)-1)*(f(3)-2)//2)", "import sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n\n\ndef calc_prime_factors(n, count=False):\n    \"\"\"Trial division\"\"\"\n    factors = []\n    # factor: 2\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # factor: 3, 5, 7, 11, ...\n    f = 3\n    root_n = int(n ** 0.5) + 1\n    while f <= root_n:\n        if n % f == 0:\n            factors.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        factors.append(n)\n    return factors\n\n\ndef main():\n    N = int(input())\n\n    n_factor = defaultdict(int)\n    for n in range(1, N + 1):\n        factors = calc_prime_factors(n)\n        for f in factors:\n            n_factor[f] += 1\n\n    n_factor = list(n_factor.values())\n    n_factor.sort()\n    ans = 0\n\n    # 75 = 3 x 3 x 5 : (2, 4, 4)\n    A, B = 0, 0\n    for n in n_factor:\n        if 2 <= n <= 3:\n            A += 1\n        elif 4 <= n:\n            B += 1\n    ans += A * B * (B - 1) // 2 + B * (B - 1) * (B - 2) // 6 * 3\n\n    # 75 = 3 x 25 : (2, 24)\n    A, B = 0, 0\n    for n in n_factor:\n        if 2 <= n <= 23:\n            A += 1\n        elif 24 <= n:\n            B += 1\n    ans += A * B + B * (B - 1)\n\n    # 75 = 5 x 15 : (4, 14)\n    A, B = 0, 0\n    for n in n_factor:\n        if 4 <= n <= 13:\n            A += 1\n        elif 14 <= n:\n            B += 1\n    ans += A * B + B * (B - 1)\n\n    # 75 = 75 : (74,)\n    A = 0\n    for n in n_factor:\n        if 74 <= n:\n            A += 1\n    ans += A\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = lambda: sys.stdin.readline().rstrip()\n \nn = int(input())\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\nfrom collections import defaultdict\nd = defaultdict(int)\nfor i in range(2, n + 1):\n    a = prime_factorize(i)\n    for j in a:\n        d[j] += 1\ncnt_74 = []\ncnt_2 = []\ncnt_4 = []\ncnt_14 = []\ncnt_24 = []\nfor i in d:\n    if d[i] >= 74:\n        cnt_74.append(i)\n    if d[i] >= 2:\n        cnt_2.append(i)\n    if d[i] >= 4:\n        cnt_4.append(i)\n    if d[i] >= 14:\n        cnt_14.append(i)\n    if d[i] >= 24:\n        cnt_24.append(i)\nans = 0\nans += len(cnt_74)\n\nfor i in cnt_2:\n    for j in cnt_24:\n        if i != j:\n            ans += 1\nfor i in cnt_4:\n    for j in cnt_14:\n        if i != j:\n            ans += 1\nfor i in cnt_2:\n    for j in range(len(cnt_4)):\n        for k in range(j + 1, len(cnt_4)):\n            j_ = cnt_4[j]\n            k_ = cnt_4[k]\n            if i != j_ and j_ != k_ and k_ != i:\n                ans += 1\nprint(ans)\n#print(d)\n", "from collections import defaultdict\nimport math\n\nN = int(input())\nD = defaultdict(int)\n\ndef primes(n):\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if not is_prime[i]:\n            continue\n        for j in range(i*2, n+1, i):\n            is_prime[j] = False\n    return [i for i in range(n+1) if is_prime[i]]\n\ndef prime_cnt(p, n):\n  cnt = 0\n  temp = p\n  while temp <= n:\n    cnt += n//temp\n    temp *= p\n  return cnt\n\ndef conb(n, r):\n  if n <= 0 or n < r:\n    return 0\n  elif r == 1:\n    return n\n  else:  \n    return n * (n-1) // 2\n\nfor p in primes(N):\n  D[p] += prime_cnt(p, N)\n\nC = [0]*5\nL = [3, 5, 15, 25, 75]\n\nfor i in D.values():\n  for j in range(5):\n    if i >= L[j] - 1:\n      C[j] += 1\n\nans = 0\nans += conb(C[4], 1)\nans += conb(C[3], 1) * conb(C[0]-1, 1)\nans += conb(C[2], 1) * conb(C[1]-1, 1)\nans += conb(C[1], 2) * conb(C[0]-2, 1)\n\nprint(ans)", "N = int(input())\ne = [0] * (N+1)\n\n#N\uff01\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u6642\u306e\u6307\u6570\u3092\u5217\u6319\nfor i in range(2, N+1):\n    cur = i\n    for j in range(2, i+1):\n        while cur % j == 0:\n            e[j] += 1\n            cur //= j\n# print(e)\ndef num(m): #e\u306e\u8981\u7d20\u306e\u3046\u3061m-1\u4ee5\u4e0a\u306e\u3082\u306e\u306e\u500b\u6570\n    return len(list(filter(lambda x: x>=m-1, e)))\n\n\nprint(num(75) + num(25) * (num(3) - 1) + num(15) * (num(5) - 1) + num(5) * (num(5) - 1) * (num(3) - 2) // 2)", "n = int(input())\n\nprime_factor = {1: 1} if n == 1 else {}\nfor i in range(2, n+1):\n    while i % 2 == 0:\n        prime_factor[2] = prime_factor.get(2, 0) + 1\n        i //= 2\n    f = 3\n    while f * f <= i:\n        if i % f == 0:\n            prime_factor[f] = prime_factor.get(f, 0) + 1\n            i //= f\n        else:\n            f += 2\n    if i != 1:\n        prime_factor[i] = prime_factor.get(i, 0) + 1\n\nm = len(prime_factor)\nprime = list(prime_factor.keys())\n\ndp = [[0]*76 for _ in range(m+2)]\ndp[0][1] = 1\nfor i in range(m):\n    for j in range(76):\n        for k in range(prime_factor[prime[i]]+1):\n            if (v := j * (k+1)) < 76:\n                dp[i+1][v] += dp[i][j]\n\nprint((dp[m][75]))\n", "def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\n\nN = int(input())\n\nprime = dict()\nfor i in range(2, N+1):\n    prime_i = factorization(i)\n    for p, num in prime_i:\n        if p in prime:\n            prime[p] += num\n        else:\n            prime[p] = num\n\ndivisor_75 = 0\ndivisor_25 = 0\ndivisor_15 = 0\ndivisor_5 = 0\ndivisor_3 = 0\nfor v in prime.values():\n    if v >= 74:\n        divisor_75 += 1\n    if v >= 24:\n        divisor_25 += 1\n    if v >= 14:\n        divisor_15 += 1\n    if v >= 4:\n        divisor_5 += 1\n    if v >= 2:\n        divisor_3 += 1\n\nans = 0\nans += divisor_75\nans = max(ans, ans + divisor_25 * (divisor_3 - 1))\nans = max(ans, ans + divisor_15 * (divisor_5 - 1))\nans = max(ans, ans + ((divisor_5 * (divisor_5 - 1)) // 2) * (divisor_3 - 2))\n\nprint(ans)", "n = int(input())\npf={}\nfor m in range(1,n+1):\n    for i in range(2,int(m**0.5)+1):\n        while m%i==0:\n            pf[i]=pf.get(i,0)+1\n            m//=i\n    if m>1:\n        pf[m]=pf.get(m,0)+1\nans = 0\nfor k , v in pf.items():\n    if v >= 74:\n        ans += 1\n    if v >= 24:\n        for s , t in pf.items():\n            if s != k and t >= 2:\n                ans += 1\n    if v >= 14:\n        for s , t in pf.items():\n            if s != k and t >= 4:\n                ans += 1\n    if v >= 4:\n        for s , t in pf.items():\n            if s > k and t >= 4:\n                for f , g in pf.items():\n                    if f != s and f != k and g >= 2:\n                        ans += 1\nprint(ans)", "def fact(A):\n    c0 = A\n    r = 2\n    lis = []\n    count = 1\n    while A != 1:\n        if A%r == 0:\n            A = A//r\n            lis.append(r)\n            r = 2\n        else:\n            r += 1\n        if r > int(pow(c0,0.5))+1:\n            lis.append(A)\n            break\n    return(lis)\nn = int(input())\nlis = []\nfor i in range(2,n+1):\n    lis.extend(fact(i))\nlis = sorted(lis)\nL = set(lis)\nimport collections\nc = collections.Counter(lis)\nx = [0,0,0,0,0]\nfor R in L:\n    if c[R] >= 2:\n        x[0] += 1\n    if c[R] >= 4:\n        x[1] += 1\n    if c[R] >= 14:\n        x[2] += 1\n    if c[R] >= 24:\n        x[3] += 1\n    if c[R] >= 74:\n        x[4] += 1\nans = max((x[0]-2)*(x[1]-1)*x[1]//2, 0) + max((x[1]-1)*x[2], 0) + max((x[0]-1)*x[3], 0) + x[4]\nprint(ans)", "class Prime:\n    # https://qiita.com/daikw/items/f48d6ac374255763463d\n    seed_primes = [\n        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n        71, 73, 79, 83, 89, 97\n    ]\n\n    def is_prime(self, n):\n        \"\"\"\n        prime test (hybrid)\n\n        see also: https://qiita.com/gushwell/items/ff9ed83ba55350aaa369\n\n        :param n:\n        :return: boolean\n        \"\"\"\n        is_prime_common = self.is_prime_common(n)\n        if is_prime_common is not None:\n            return is_prime_common\n\n        if n < 2000000:\n            return self.is_prime_brute_force(n)\n        else:\n            return self.is_prime_miller_rabin(n)\n\n    def is_prime_common(self, n):\n        if n == 1: return False\n        if n in Prime.seed_primes: return True\n        if any([n % x == 0 for x in self.seed_primes]): return False\n\n    def is_prime_brute_force(self, n):\n        \"\"\"\n        brute force prime test\n        use with is_prime_common if you want to skip seed_primes\n\n        :param n:\n        :return: boolean\n        \"\"\"\n        for k in range(2, int(math.sqrt(n)) + 1):\n            if n % k == 0:\n                return False\n        return True\n\n    def is_prime_miller_rabin(self, n):\n        \"\"\"\n        miller rabin prime test\n        use with is_prime_common if you want to skip seed_primes\n\n        see also\n            algorithm: https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\n            implementation: https://qiita.com/srtk86/items/609737d50c9ef5f5dc59\n            improvement: https://qiita.com/gushwell/items/ff9ed83ba55350aaa369\n\n        :param n:\n        :return: boolean\n        \"\"\"\n\n        d = n - 1\n        while d & 1 == 0:\n            d >>= 1\n\n        # use one of these lines / upper is more efficient.\n        witnesses = self.get_witnesses(n)\n        # witnesses = [random.randint(1, n - 1) for _ in range(100)]\n\n        for w in witnesses:\n            y = pow(w, d, n)\n\n            while d != n - 1 and y != 1 and y != n - 1:\n                y = (y * y) % n\n                d <<= 1\n\n            if y != n - 1 and d & 1 == 0:\n                return False\n\n        return True\n\n    def get_witnesses(self, num):\n        def _get_range(num):\n            if num < 2047:\n                return 1\n            if num < 1373653:\n                return 2\n            if num < 25326001:\n                return 3\n            if num < 3215031751:\n                return 4\n            if num < 2152302898747:\n                return 5\n            if num < 3474749660383:\n                return 6\n            if num < 341550071728321:\n                return 7\n            if num < 3825123056546413051:\n                return 9\n            return 12\n\n        return self.seed_primes[:_get_range(num)]\n\n    def gcd(self, a, b):\n        if a < b:\n            return self.gcd(b, a)\n        if b == 0:\n            return a\n        while b:\n            a, b = b, a % b\n        return a\n\n    @staticmethod\n    def f(x, n, seed):\n        \"\"\"\n        pseudo prime generator\n        :param x:\n        :param n:\n        :param seed:\n        :return: pseudo prime\n        \"\"\"\n        p = Prime.seed_primes[seed % len(Prime.seed_primes)]\n        return (p * x + seed) % n\n\n    def find_factor(self, n, seed=1):\n        \"\"\"\n        find one of factor of n\n        this function is based to Pollard's rho algorithm\n\n        see also\n            algorithm: https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm\n            implementation: https://qiita.com/gushwell/items/561afde2e00bf3380c98\n\n        :param n:\n        :param seed:\n        :return: factor\n        \"\"\"\n        if self.is_prime(n):\n            return n\n\n        x, y, d = 2, 2, 1\n        count = 0\n        while d == 1:\n            count += 1\n            x = self.f(x, n, seed)\n            y = self.f(self.f(y, n, seed), n, seed)\n            d = self.gcd(abs(x - y), n)\n\n        if d == n:\n            return self.find_factor(n, seed + 1)\n        return self.find_factor(d)\n\n    def find_factors(self, n):\n        primes = {}\n        if self.is_prime(n):\n            primes[n] = 1\n            return primes\n\n        while n > 1:\n            factor = self.find_factor(n)\n\n            primes.setdefault(factor, 0)\n            primes[factor] += 1\n\n            n //= factor\n\n        return primes\n\n\nimport collections\nN = int(input())\nc = collections.defaultdict(int)\nfor i in range(1, N + 1):\n    factors = Prime().find_factors(i)\n    for k, v in list(factors.items()):\n        c[k] += v\nd = list(c.values())\n#3*5*5=3*25=5*15=75\n#a^b*c^d\u306e\u7d04\u6570\u306f(b+1)*(d+1)\u500b\nn75 = sum(i >= 74 for i in d)\nn25 = sum(i >= 24 for i in d)\nn15 = sum(i >= 14 for i in d)\nn5 = sum(i >= 4 for i in d)\nn3 = sum(i >= 2 for i in d)\n\nans = n5 * (n5 - 1) * (n3 - 2) // 2\nans += n25 * (n3 - 1)\nans += n15 * (n5 - 1)\nans += n75\nprint(ans)\n", "import sys\nfrom collections import Counter\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef prime_factorize(n):\n    a = Counter()\n    while n % 2 == 0:\n        a[2] += 1\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a[f] += 1\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a[n] += 1\n    return a\n\n\ndef com(n, r):\n    if n < r or n < 0 or r < 0:\n        return 0\n    r = min(r, n - r)\n    numer = denom = 1\n    for i in range(n - r + 1, n + 1):\n        numer = numer * i\n    for i in range(1, r + 1):\n        denom = denom * i\n    return numer // denom\n\n\ndef main():\n    N = int(readline())\n\n    prime = Counter()\n    for n in range(1, N + 1):\n        prime.update(prime_factorize(n))\n\n    C = [0] * 101\n    for v in list(prime.values()):\n        C[v] += 1\n\n    for i in range(99, -1, -1):\n        C[i] += C[i + 1]\n\n    ans = 0\n    ans += (C[2] - 2) * com(C[4], 2)\n    ans += (C[2] - 1) * C[24]\n    ans += (C[4] - 1) * C[14]\n    ans += C[74]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\nimport math\nn = int(input())\ndef is_prime(n):\n  if n == 1:\n    return False\n  \n  for k in range(2, int(math.sqrt(n)) + 1):\n    if n%k == 0:\n      return False\n  return True\n\nd = defaultdict(int)\n\np = []\nfor i in range(2,n+1):\n  if is_prime(i):\n    d[i] = 1\n    p.append(i)\n    continue\n  x = i\n  for j in p:\n    while x%j == 0:\n      x //= j\n      d[j] += 1\n\n#75\nc = 0\nfor i in list(d.values()):\n  if i >= 74:\n    c += 1\nans = c\n\n#25 * 3\nc,e = 0,0\nfor i in list(d.values()):\n  if i >= 24:\n    c += 1\n  if i >= 2:\n    e += 1\nans += c*(e-1)\n\n#15 * 5\nc, e = 0, 0\nfor i in list(d.values()):\n  if i >= 14:\n    c += 1\n  if i >= 4:\n    e += 1\nans += c*(e-1)\n\n#5 * 5 * 3\nc,e = 0,0\nfor i in list(d.values()):\n  if i >= 4:\n    c += 1\n  if i >= 2:\n    e += 1\nans += (c*(c-1)//2)*(e-2)\n\nprint (ans)\n\n", "N=int(input())\ne=[0]*(N+1)\nfor i in range(2,N+1):\n    cur=i\n    for j in range(2,i+1):\n        while cur%j==0:\n            e[j]+=1\n            cur//=j\n\ndef num(m):\n    return len(list(filter(lambda x:x>=m-1,e)))\n\nprint(num(75)+num(25)*(num(3)-1)+num(15)*(num(5)-1)+num(5)*(num(5)-1)*(num(3)-2)//2)", "\"\"\"\n75\u6570\u306e\u6761\u4ef6\n\u7d04\u6570\u306e\u500b\u6570\u306f\u5404\u7d20\u56e0\u6570\u306e\u500b\u6570a1,a2,a3,...\u306b\u3064\u3044\u3066\n(a1+1)(a2+1)...(an+1)\n75=3*5*5\n->\u7d20\u56e0\u6570\u306e\u500b\u6570\u304c2\u500b, 4\u500b, 4\u500b\u306b\u306a\u308b\u3088\u3046\u306a\u7d44\u307f\u5408\u308f\u305b\n(2,4,4)\n(14,4)\n(2,24)\n(74)\n\n\u6c42\u3081\u65b9\n1\u301cN\u306b\u3064\u3044\u3066\u3001\u7d20\u56e0\u6570\u306e\u6570\u3092dict\u306b\u53ce\u3081\u3066\u3044\u304f\n->\u305d\u306e\u3046\u3061\u30014\u500b\u4ee5\u4e0a\u3042\u308b\u3082\u306e\u306e\u7d44\u307f\u5408\u308f\u305b\u30682\u500b\u4ee5\u4e0a\u3042\u308b\u3082\u306e\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n\"\"\"\nimport copy\nN=int(input())\nsosu=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\nsoinsu=dict()\nfor n in range(2,N+1):\n  if n in sosu:\n    soinsu[n]=1\n  else:\n    x = copy.deepcopy(n)\n    i = 0\n    while i<len(sosu):\n      if x % sosu[i]==0:\n        soinsu[sosu[i]]+=1\n        x = x//sosu[i]\n      else:\n        i += 1\n\nans = 0\ncnt=[0,0,0,0,0]\ntit=[2,4,14,24,74]\nfor _,v in soinsu.items():\n  for i in range(5):\n    cnt[i] += 1 if v >= tit[i] else 0\n\n# (2,4,4)\nans+= cnt[1]*(cnt[1]-1)//2*(cnt[0]-2)\n# (14,4)\nans+= cnt[2]*(cnt[1]-1)\n# (2,24)\nans+= cnt[3]*(cnt[0]-1)\n# (74)\nans+= cnt[4]\nprint(ans)", "import collections\n\nn = int(input())\n\ndiv = []\n\nfor i in range(1,n+1):\n    for j in range(2,int(n**0.5)+1):\n        while i % j == 0:\n            div.append(j)\n            i //= j\n    if i > 1:\n        div.append(i)\n\nc = collections.Counter(div)\n    \nn2,n4,n14,n24,n74 = 0,0,0,0,0\n\nfor k,v in list(c.items()):\n    if v >= 2:\n        n2 += 1\n    if v >= 4:\n        n4 += 1\n    if v >= 14:\n        n14 += 1\n    if v >= 24:\n        n24 += 1\n    if v >= 74:\n        n74 += 1\n\nans = n74 + n24*(n2-1) + n14*(n4-1) + n4*(n4-1)*(n2-2)//2\n\nprint(ans)\n\n\n", "from collections import Counter\nn = int(input())\n\ndef factorization(n):\n    c = Counter()\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            c[i]=cnt\n    if temp!=1:\n        c[temp]=1\n    if len(c)==0:\n        c[n]=1\n    c[1] = 0\n    return c\n\ndef isOk(c):\n    ret = 1\n    for _,v in c.items():\n        ret*=(v+1)\n    return ret\n\nc = Counter([])\nfor i in range(1, n+1):\n    c += factorization(i)\n\n# c\u304b\u3089\u9069\u5f53\u306b\u7d04\u6570\u3092\u9078\u3093\u3067\u7d04\u6570\u306e\u500b\u6570\u304c75\u3068\u306a\u308b\u3088\u3046\u306b\u9078\u3076\n# factorization(75): [5,2][3,1]\nlc = [[k, v] for k, v in c.items()]\n\nans=0\n# \u4e00\u3064\u306e\u7d20\u56e0\u6570\u304c75\u500b\nf75 = sum([1 for v in c.values() if v >= 74])\nans+=f75\n# 3, 3, 5\u306e\u30d1\u30bf\u30fc\u30f3\nf3 = sum([1 for v in c.values() if v >= 2])\nf5 = sum([1 for v in c.values() if v >= 4])\nf15 = sum([1 for v in c.values() if v >= 14])\nf25 = sum([1 for v in c.values() if v >= 24])\nans+=f15*(f5-1)\nans+=f25*(f3 - 1)\nif f5 >= 2:\n    ans+=(f5*(f5-1)//2)*(f3-2)\nprint(ans)", "from collections import defaultdict\n\n\ndef main():\n    n = int(input())\n    fact = defaultdict(int)\n    for i in range(2, n + 1):\n        j = i\n        while j % 2 == 0:\n            j //= 2\n            fact[2] += 1\n        k = 3\n        while k * k <= j:\n            if j % k:\n                k += 2\n            else:\n                j //= k\n                fact[k] += 1\n        if j != 1:\n            fact[j] += 1\n    fact = list(fact.items())\n    length = len(fact)\n    ans = 0\n    for i in range(length):\n        if fact[i][1] >= 74:\n            ans += 1\n    product = set()\n    for small_p, large_p in [[2, 24], [4, 14]]:\n        for i in range(length):\n            for j in range(length):\n                if i == j:\n                    continue\n                now = pow(fact[i][0], large_p) * pow(fact[j][0], small_p)\n                if fact[i][1] >= large_p and fact[j][1] >= small_p and now not in product:\n                    ans += 1\n                    product.add(now)\n    for i in range(length):\n        for j in range(length):\n            for k in range(length):\n                if i == j or j == k or i == k:\n                    continue\n                now = pow(fact[i][0], 4) * pow(fact[j][0], 4) * pow(fact[k][0], 2)\n                if fact[i][1] >= 4 and fact[j][1] >= 4 and fact[k][1] >= 2 and now not in product:\n                    ans += 1\n                    product.add(now)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef conb(n,r): \n    if n<r: return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef prime_factorize(n):\n    if n == 1:\n        return [1]\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nn = inp()\nd = defaultdict(int)\nfor i in range(1,n+1):\n    for x in prime_factorize(i):\n        d[x] += 1\n\nvalist = list(d.values())\nc = [2,4,14,24,74]\ncnt = [0] * 5\nfor x in valist:\n    if x >= 74: cnt[4] += 1\n    elif x >= 24: cnt[3] += 1\n    elif x >= 14: cnt[2] += 1\n    elif x >= 4: cnt[1] += 1\n    elif x >= 2: cnt[0] += 1\n# print(cnt)\nres = 0\na = sum(cnt[1:]); b = cnt[0]\nres += conb(a,3)*3 + conb(a,2)*b\na = sum(cnt[2:]); b = cnt[1]\nres += a*(a-1) + a*b\na = sum(cnt[3:]); b = sum(cnt[:3])\nres += a*(a-1) + a*b\nres += cnt[4]\nprint(res)\n", "# \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\ndef make_prime_table(n):\n    sieve = list(range(n + 1))\n    sieve[0] = -1\n    sieve[1] = -1\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i] != i:\n            continue\n        for j in range(i * i, n + 1, i):\n            if sieve[j] == j:\n                sieve[j] = i\n    return sieve\n\n\ndef prime_factorize(n):\n    result = []\n    while n != 1:\n        p = prime_table[n]\n        c = 0\n        while n % p == 0:\n            n //= p\n            c += 1\n        result.append((p, c))\n    return result\n\n\nN = int(input())\n\nprime_table = make_prime_table(N)\nd = {}\nfor i in range(2, N + 1):\n    for p, c in prime_factorize(i):\n        d.setdefault(p, 0)\n        d[p] += c\n\n# 75 = 5 * 5 * 3\n#    = 15 * 5\n#    = 25 * 3\n#    = 75\nn74 = 0\nn24 = 0\nn14 = 0\nn4 = 0\nn2 = 0\nfor k in d:\n    if d[k] >= 74:\n        n74 += 1\n    if d[k] >= 24:\n        n24 += 1\n    if d[k] >= 14:\n        n14 += 1\n    if d[k] >= 4:\n        n4 += 1\n    if d[k] >= 2:\n        n2 += 1\n\nresult = 0\n# x ^ 4 * y ^ 4 * z ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n4 * (n4 - 1) // 2 * (n2 - 2)\n# x ^ 14 * y ^ 4 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n14 * (n4 - 1)\n# x ^ 24 * y ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n24 * (n2 - 1)\n# x ^ 74 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n74\nprint(result)\n", "# \n\ndef factorize(n):\n    '''\n    \u30bf\u30d7\u30eb\u306e\u914d\u5217\u3068\u601d\u3063\u305f\u3051\u3069\u9010\u6b21\u5272\u308a\u7b97\u3059\u308b\u904e\u7a0b\u3067\u6b21\u6570\u3092\u5897\u3084\u305b\u306a\u3044\u3058\u3083\u3093\u3002\n    \u4e8c\u91cd\u914d\u5217?\n    dict\u306b\u3057\u3088\u3046\u3002\n    '''\n    if n == 1:\n        raise('n >= 2')\n    \n    factor = {}\n    div = 2\n    while True:\n        if n % div == 0:\n            n //= div\n            factor[div] = factor.get(div, 0) + 1\n            if n == 1:\n                return factor\n        else:\n            div += 1\n\nn = int(input())\n\nif n <= 9:\n    print(0)\n    return\n\n# \u3081\u3093\u3069\u3044\u304b\u3089\u639b\u3051\u3066\u3057\u307e\u3048\u3002\u9593\u306b\u5408\u3046\u3060\u308d\nimport math\nproduct = math.prod(range(1, n+1))\nd = factorize(product)\nfactor = list(d.items())\n\n# print(factor)\n\nans = 0\nfor i in range(len(factor)):\n    for j in range(i+1, len(factor)):\n        for k in range(len(factor)):\n            if factor[i][1] >= 4 and factor[j][1] >= 4 and factor[k][1] >= 2 and i!=j and j!=k and k!=i:\n                ans += 1\n\nfor i in range(len(factor)):\n    for j in range(len(factor)):\n            if factor[i][1] >= 4 and factor[j][1] >= 14 and i!=j:\n                ans += 1\n\nfor i in range(len(factor)):\n    for j in range(len(factor)):\n            if factor[i][1] >= 2 and factor[j][1] >= 24 and i!=j:\n                ans += 1\n\nfor i in range(len(factor)):\n    if factor[i][1] >= 74:\n                ans += 1\n\nprint(ans)", "from math import sqrt\ndef sieve(n):\n    if n <= 4:\n        return list(range(2, n))\n    def _sieve_of_eratosthenes(n):\n        limit = int(sqrt(n))+1\n        *table, = [1] * n\n        table[0] = table[1] = 0\n        for i in range(2, limit):\n            if table[i]:\n                for j in range(i**2, n, i):\n                    table[j] = 0\n        return [i for i in range(2, n) if table[i]]\n    return _sieve_of_eratosthenes(n)\n\ndef factorint(n):\n    d = {}\n    for i in range(2, int(sqrt(n))+1):\n        c = 0\n        q, r = divmod(n, i)\n        while not r:\n            c += 1\n            n = q\n            q, r = divmod(n, i)\n        if c:\n            d[i] = c\n    if n != 1:\n        d[n] = 1\n    return d\n\nn = int(input())\nP = sieve(n+1)\nd = {p:i for i, p in enumerate(P)}\nX = [1] * len(P)\nfor i in range(2, n+1):\n    for k, v in factorint(i).items():\n        X[d[k]] += v\nnb_3 = len([x for x in X if x >= 3])\nnb_5 = len([x for x in X if x >= 5])\nnb_15 = len([x for x in X if x >= 15])\nnb_25 = len([x for x in X if x >= 25])\nnb_75 = len([x for x in X if x >= 75])\nprint(nb_75 + nb_25*(nb_3-1) + nb_15*(nb_5-1) + nb_5*(nb_5-1)*(nb_3-2)//2)", "def calc(N,p):\n  ans = 0\n  i = p\n  while N>=i:\n    ans += N//i\n    i *= p\n  return ans\n\ndef sieve(n):\n  is_prime = [True for _ in range(n+1)]\n  is_prime[0] = False\n  for i in range(2, n+1):\n    if is_prime[i-1]:\n      j = 2 * i\n      while j <= n:\n        is_prime[j-1] = False\n        j += i\n  table = [i for i in range(1, n+1) if is_prime[i-1]]\n  return table\n  \nfrom itertools import groupby, accumulate, product, permutations, combinations\ndef check(value,lis):\n  ans = 0\n  n = len(lis)\n  for perm in permutations(value,n):\n    for i in range(n):\n      if perm[i]<lis[i]:\n        break\n    else:\n      ans += 1\n  return ans\n\ndef solve():\n  N = int(input())\n  table = sieve(N)\n  v = []\n  for p in table:\n    v.append(calc(N,p))\n  v.sort(reverse=True)\n  ans = 0\n  ans += check(v,[74])\n  ans += check(v,[24,2])\n  ans += check(v,[14,4])\n  ans += check(v,[4,4,2])//2\n  return ans\nprint(solve())", "n = int(input())\nl = [0]*101\ni = 2\nfor i in range(2,n+1):\n    j = 2\n    while i >= 2:\n        while i % j == 0:\n            i = i//j\n            l[j] += 1\n        j += 1\n\nans = sum(x >= 74 for x in l)\n\na = sum(x >= 2 for x in l)\nb = sum(x >= 24 for x in l)\nans += b*(a-1)\n\na = sum(x >= 4 for x in l)\nb = sum(x >= 14 for x in l)\nans += b*(a-1)\n\na = sum(x >= 2 for x in l)\nb = sum(x >= 4 for x in l)\nans += b*(b-1)*(a-2)//2\n\nprint(ans)", "def num_div(n):\n  p=[]\n  for i in range(2,int(n**0.5)+1):\n    while n%i==0:\n      p.append(i)\n      n//=i\n  if n>1:\n    p.append(n)\n  return p\n\nn=int(input())\nx=[0]*(n+1)\nfor i in range(1,n+1):\n  for j in num_div(i):\n    x[j]+=1\nex2=len([i for i in x if i>1])\nex4=len([i for i in x if i>3])\nex14=len([i for i in x if i>13])\nex24=len([i for i in x if i>23])\nex74=len([i for i in x if i>73])\nprint(ex4*(ex4-1)//2*(ex2-2)+ex24*(ex2-1)+ex14*(ex4-1)+ex74)", "from collections import Counter\ndef prime_factorize(n):\n    i = 2\n    factors = []\n    while i*i <= n:\n        while n%i == 0:\n            n //= i\n            factors.append(i)\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return Counter(factors)\n\nn = int(input())\n\nc = Counter([])\nfor i in range(1, n+1):\n    c += prime_factorize(i)\n\n\"\"\"\n75 = 3 * 5 * 5\n75\u6570 = {p,q,r|p,q,r\u306f\u4e92\u3044\u306b\u7d20}\u3068\u3057\u3066\n p^2 * q^4 * r^4\n p^2 * q^24\n p^4 * q^14\n p^74\n\"\"\"\nans = 0\ns = set([i for i,cnt in c.items() if cnt >= 4])\nt = set([i for i,cnt in c.items() if cnt >= 2])\nls = len(s)\nlt = len(t)\nif ls >= 2:\n    ans += ls * (ls - 1) // 2 * (lt - 2)\n\ns = set([i for i,cnt in c.items() if cnt >= 24])\nt = set([i for i,cnt in c.items() if cnt >= 2])\nls = len(s)\nlt = len(t)\nif ls >= 1:\n    ans += ls * (lt - 1)\n\ns = set([i for i,cnt in c.items() if cnt >= 14])\nt = set([i for i,cnt in c.items() if cnt >= 4])\nls = len(s)\nlt = len(t)\nif ls >= 1:\n    ans += ls * (lt - 1)\n\ns = set([i for i,cnt in c.items() if cnt >= 74])\nls = len(s)\nans += ls\n\nprint(ans)", "N = int(input())\nc = (N+1)*[0]\n\nfor i in range(2,N+1):\n  j = 2\n  while j*j<=i:\n    while i%j==0:\n      c[j]+=1\n      i//=j\n    j+=1\n  if 1<i:\n    c[i]+=1\n\nf = lambda x:sum(y+1>=x for y in c)\nprint(f(75)+f(25)*(f(3)-1)+f(15)*(f(5)-1)+f(5)*(f(5)-1)//2*(f(3)-2))", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef primeFactorization(n):\n    ans = []\n    temp = n\n    while temp%2 == 0:\n        ans.append(2)\n        temp //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while temp%i == 0:\n            ans.append(i)\n            temp //= i\n    if temp > 1:\n        ans.append(temp)\n    return collections.Counter(ans)\n\ndef resolve():\n    N = I()\n\n    # N!\u306e\u7d20\u56e0\u6570\u3092\u6c42\u3081\u308b\n    pf_N_fact = collections.Counter()\n    for i in range(1, N + 1):\n        pf = primeFactorization(i)\n        for k, v in list(pf.items()):\n            pf_N_fact[k] += v\n    l = list(pf_N_fact.values())\n    l.sort()\n    pf_num = len(pf_N_fact)\n\n    # \u7d04\u657075\u500b: \u7d20\u56e0\u6570\u306e\u500b\u6570+1\u306e\u7a4d\u304c75\u306b\u306a\u308b\u3088\u3046\u306b\u7d44\u307f\u5408\u308f\u305b\u308b\n    # \u7d20\u56e0\u6570\u306e\u500b\u6570\u3092\u4ee5\u4e0b\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4f55\u901a\u308a\u53d6\u308c\u308b\u304b\u3092\u8abf\u3079\u308b\n    # (2, 4, 4), (2, 24), (4, 14), (74)\n    ans = 0\n    num_2 = pf_num - bisect.bisect_left(l, 2)\n    num_4 = pf_num - bisect.bisect_left(l, 4)\n    num_14 = pf_num - bisect.bisect_left(l, 14)\n    num_24 = pf_num - bisect.bisect_left(l, 24)\n    num_74 = pf_num - bisect.bisect_left(l, 74)\n    ans += num_4 * (num_4 - 1) // 2 * max(num_2 - 2, 0)\n    ans += num_24 * max(num_2 - 1, 0)\n    ans += num_14 * max(num_4 - 1, 0)\n    ans += num_74\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "from collections import Counter, defaultdict\n\nN = int(input())\n\ndef primeFactorization(N):\n    primes = Counter()\n    R = int(N**(0.5)) + 1\n    for num in range(2, R):\n        while N % num == 0:\n            N //= num\n            primes[num] += 1\n    if N > 1 :\n        primes[N] = 1\n    return primes\n\nprimes = Counter()\nfor i in range(1, N + 1):\n    primes += primeFactorization(i)\n\ncnt = defaultdict(int)\nfor c in list(primes.values()):\n    c += 1\n    for d in (3, 5, 15, 25, 75):\n        if c >= d:\n            cnt[d] += 1\n\nans = 0\nans += cnt[5] * (cnt[5] - 1) * (cnt[3] - 2) // 2\nans += cnt[25] * (cnt[3] - 1)\nans += cnt[15] * (cnt[5] - 1)\nans += cnt[75]\nprint(ans)\n", "from collections import defaultdict\nprimes = list(range(2,101))\nfor i in range(len(primes)):\n    if primes[i]:\n        j = i\n        j += primes[i]\n        while j < len(primes):\n            primes[j] = None\n            j += primes[i]\nprimes = [p for p in primes if p]\nN = int(input())\nfact = defaultdict(int)\nfor p in primes:\n    i = p\n    while i <= N:\n        fact[p] += N//i\n        i *= p\nf2 = set()\nf4 = set()\nf14 = set()\nf24 = set()\nf74 = set()\nfor p in fact:\n    if fact[p] >= 2:\n        f2.add(p)\n    if fact[p] >= 4:\n        f4.add(p)\n    if fact[p] >= 14:\n        f14.add(p)\n    if fact[p] >= 24:\n        f24.add(p)\n    if fact[p] >= 74:\n        f74.add(p)\nans = 0\nans += len(f74)\nans += len(f24)*(len(f2)-1)\nans += len(f14)*(len(f4)-1)\nans += (len(f2)-2)*len(f4)*(len(f4)-1)//2\nprint(ans)", "N=int(input())\n\n\n\nfrom operator import mul\nfrom functools import reduce\n\ndef cmb(n,r):\n    r = min(n-r,r)\n    if r == 0: return 1\n    over = reduce(mul, list(range(n, n - r, -1)))\n    under = reduce(mul, list(range(1,r + 1)))\n    return over // under\n\n\nfrom collections import defaultdict\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\ncount=1\nD=defaultdict(int)\nfor i in range(1,N+1):\n    f=factorization(i)\n    for t in f:\n        num,con=t\n        D[num]+=con\nthrees=0\nfives=0\nnum_15=0\nnum_25=0\nnum_75=0\n\nfor v in list(D.values()):\n    if v>=2:\n        threes+=1\n    if v>=4:\n        fives+=1\n    if v>=14:\n        num_15+=1\n    if v>=24:\n        num_25+=1\n    if v>=74:\n        num_75+=1\n#3*5*5\nans=(threes-fives)*fives*(fives-1)//2\nif fives>=3:\n    #ans+=cmb(fives, 3)\n    ans+=fives*(fives-1)*(fives-2)//2\n#75*1\n\nans+=num_75\n#5*15\n\nans+=num_15*(fives-1)\n#3*25\nans+=num_25*(threes-1)\nprint(ans)\n#print(D)\n#print(threes, fives, num_15, num_25, num_75)\n#print(factorization(32400))\n", "N = int(input())\ne = [0]*(N+1)\nfor i in range(2,N+1):\n    cur = i\n    for j in range(2,i+1):\n        while cur%j==0:\n            e[j] += 1\n            cur //=j\ndef num(m):\n    return len(list(filter(lambda x:x>=m-1,e)))\nprint(num(75) + num(25)*(num(3)-1) + num(15)*(num(5)-1) + num(5)*(num(5)-1)*(num(3)-2)//2)", "##\u6628\u65e5\u3084\u3063\u305f...\nimport numpy as np\n\ndef prime_factorize(N): #\u7d20\u56e0\u6570\u5206\u89e3\n    exponent = 0\n    while N%2 == 0:\n        exponent += 1\n        N //= 2\n    if exponent: factorization = [[2,exponent]]\n    else: factorization = []\n    i=1\n    while i*i <=N:\n        i += 2\n        if N%i: continue\n        exponent = 0\n        while N%i == 0:\n            exponent += 1\n            N //= i\n        factorization.append([i,exponent])\n    if N!= 1: factorization.append([N,1])\n    assert N != 0, \"zero\"\n    return factorization\n\nfactors = [0]*100\nN = int(input())\n\nfor i in range(1,N+1):\n    for p,n in prime_factorize(i):\n        factors[p] += n\n\nfactors = np.array(factors)\nov2 = len(factors[factors >= 2])\nov4 = len(factors[factors >= 4])\nov14 = len(factors[factors >= 14])\nov24 = len(factors[factors >= 24])\nov74 = len(factors[factors >= 74])\nans = 0\n## 2*4*4\nans += (ov4-2)*(ov4)*(ov4-1)//2 + (ov2-ov4)*(ov4)*(ov4-1)//2\n\n## 14 * 4\nans += (ov4-ov14)*(ov14) + (ov14)*(ov14-1)\n\n## 24 * 2\nans += (ov2-ov24)*ov24 + (ov24)*(ov24-1)\n\n## 74\nans += ov74\n\nprint(ans)", "import collections\n    \nn = int(input())\n\ndef division(n):\n    if n < 2:\n        return []\n    \n    prime_factors = []\n    \n    for i in range(2,int(n**0.5)+1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    if n > 1:\n        prime_factors.append(n)\n        \n    return prime_factors\n\nnum = []\n\nfor i in range(1,n+1):\n    div = division(i)\n    num.extend(div)\nc = collections.Counter(num)\n\ndiv_num = 1\n\nn2, n4, n14, n24, n74 = 0,0,0,0,0\n\nfor k,v in c.items():\n    if 2<=v:\n        n2 += 1\n    if 4<=v:\n        n4 += 1\n    if 14<=v:\n        n14 += 1\n    if 24<=v:\n        n24 += 1\n    if 74<=v:\n        n74 += 1\n\nans = n74 + n24*(n2-1) + n14*(n4-1) + n4*(n4-1)*(n2-2)//2\n\nprint(ans)", "from collections import Counter\nfrom itertools import combinations, permutations\n\n\ndef factor(n):\n    res = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 1:\n        return res + [n]\n    else:\n        return res\n\n\nN = int(input())\nif N < 10:\n    print((0))\n    return\n\ncnt = Counter()\nfor i in range(2, N + 1):\n    primes = factor(i)\n    cnt += Counter(primes)\n\nans = 0\nfor x, y in combinations(cnt, 2):\n    if cnt[x] < 4 or cnt[y] < 4:\n        continue\n    for z in cnt:\n        if z == x or z == y or cnt[z] < 2:\n            continue\n        ans += 1\n\nfor x, y in permutations(cnt, 2):\n    if cnt[x] >= 14 and cnt[y] >= 4:\n        ans += 1\n\nfor x, y in permutations(cnt, 2):\n    if cnt[x] >= 24 and cnt[y] >= 2:\n        ans += 1\n\nfor x in cnt:\n    if cnt[x] >= 74:\n        ans += 1\n\nprint(ans)\n", "n = int(input())\n\nif n < 10:\n    print((0))\n    return\n\nprime = [2, 3]\nfor i in range(5, n+1, 2):\n    for p in prime:\n        if i % p == 0:\n            break\n    else:\n        prime.append(i)\n\n# factrization\nnum = []\nfor p in prime:\n    cnt = 1\n    now = p\n    while now <= n:\n        cnt += n // now\n        now *= p\n    num.append(cnt)\n\nmore3 = [i for i in num if i >= 3]\nmore5 = [i for i in more3 if i >= 5]\nmore15 = [i for i in more5 if i >= 15]\nmore25 = [i for i in more15 if i >= 25]\nmore75 = [i for i in more25 if i >= 75]\n\nmore3 = len(more3); more5 = len(more5); more15 = len(more15); more25 = len(more25); more75 = len(more75)\n\nprint((more25 * (more3 - 1) + more15 * (more5 - 1) + more5 * (more5 - 1) * (more3 - 2) // 2 + more75))\n", "# \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\ndef make_prime_table(n):\n    sieve = list(range(n + 1))\n    sieve[0] = -1\n    sieve[1] = -1\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i] != i:\n            continue\n        for j in range(i * i, n + 1, i):\n            if sieve[j] == j:\n                sieve[j] = i\n    return sieve\n\n\ndef prime_factorize(n):\n    result = []\n    while n != 1:\n        p = prime_table[n]\n        c = 0\n        while n % p == 0:\n            n //= p\n            c += 1\n        result.append((p, c))\n    return result\n\n\nN = int(input())\n\nprime_table = make_prime_table(100)\n\nd = {}\nfor i in range(2, N + 1):\n    for p, c in prime_factorize(i):\n        d.setdefault(p, 0)\n        d[p] += c\n\n# 75 = 5 * 5 * 3\n#    = 15 * 5\n#    = 25 * 3\n#    = 75\nn74 = 0\nn24 = 0\nn14 = 0\nn4 = 0\nn2 = 0\nfor k in d:\n    if d[k] >= 74:\n        n74 += 1\n    if d[k] >= 24:\n        n24 += 1\n    if d[k] >= 14:\n        n14 += 1\n    if d[k] >= 4:\n        n4 += 1\n    if d[k] >= 2:\n        n2 += 1\n\nresult = 0\n# x ^ 4 * y ^ 4 * z ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n4 * (n4 - 1) // 2 * (n2 - 2)\n# x ^ 14 * y ^ 4 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n14 * (n4 - 1)\n# x ^ 24 * y ^ 2 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n24 * (n2 - 1)\n# x ^ 74 \u306e\u7d04\u6570\u306e\u500b\u6570\u306f75\u500b\nresult += n74\nprint(result)\n", "P = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nS = [0]*25\n\nN = int(input())\nfor i in range(2, N+1):\n    num = i\n    j = 0\n    while num > 1:\n        if num%P[j] == 0:\n            num //= P[j]\n            S[j] += 1\n        else:\n            j += 1\n            if j == 25:\n                break\n\n# 74\n# 2 24\n# 4 14\n# 2 4 4\n\nans = 0\nif S[0] >= 74:\n    ans += 1\nfor i in range(3):\n    if S[i] >= 24:\n        tmp = -1\n        for num in S:\n            if num >= 2:\n                tmp += 1\n        ans += tmp\nfor i in range(4):\n    if S[i] >= 14:\n        tmp = -1\n        for num in S:\n            if num >= 4:\n                tmp += 1\n        ans += tmp\ntmp4 = 0\ntmp2 = 0\nfor num in S:\n    if num >= 4:\n        tmp4 += 1\n    if num >= 2 and num < 4:\n        tmp2 += 1\nans += tmp4*(tmp4-1)*(tmp4+tmp2-2)//2\nprint(ans)", "from collections import Counter\nfrom math import factorial\n\ndef prime_factorize(n):\n    a = []\n    while n%2 == 0:\n        a.append(2)\n        n //=2\n    f = 3\n    while f*f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\ndef prime_factoring(n):\n    from collections import Counter\n    a = prime_factorize(n)\n    return Counter(a)\n\nN = int(input())\nfac =factorial(N)\nList = list(prime_factoring(fac).values())\n# print(List)\n\ndef num(m):\n    return len(list([x for x in List if x >= m-1]))\nprint((num(75)+ num(25)*(num(3)-1) + num(15)*(num(5)-1)+ num(5)*(num(5)-1)*(num(3)- 2)//2))\n"]