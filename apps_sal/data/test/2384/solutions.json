["def main():\n    import sys\n    import numpy as np\n    def input(): return sys.stdin.readline().rstrip()\n    n = int(input())\n    a = list(map(int, input().split()))\n    inf = 1e18\n    k = n%2 + 1\n    dp = np.full((n+1, k+2), -inf, dtype=int)\n    dp[0,0] = 0\n    for i in range(n):\n        for j in range(k+1):\n            dp[i+1, j+1] = max(dp[i+1,j+1],dp[i,j])\n            now = dp[i,j]\n            if (i+j)%2 == 0: now += a[i]\n            dp[i+1,j] = max(dp[i+1,j],now)\n    print(dp[n,k])\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput=lambda: sys.stdin.readline().rstrip()\nn=int(input())\nA=[int(i) for i in input().split()]\ninf=float(\"inf\")\nDP=[[-inf]*4 for _ in range(n+1)]\nDP[0][2]=0\nfor i,a in enumerate(A):\n  if (i+1)%2==0:\n    DP[i+1][0]=DP[i][3]+a\n    if i>=1:\n      DP[i+1][0]=max(DP[i+1][0],DP[i-1][2]+a)\n    DP[i+1][2]=DP[i][0]\n    DP[i+1][3]=max(DP[i][1],DP[i][3])\n    if i>=1:\n      DP[i+1][3]=max(DP[i+1][3],DP[i-1][2])\n  else:\n    DP[i+1][0]=DP[i][2]+a\n    DP[i+1][1]=DP[i][3]+a\n    DP[i+1][3]=max(DP[i][0],DP[i][2])\nif n%2==0:\n  print((max(DP[n][0],DP[n][2])))\nelse:\n  print((max(DP[n][1],DP[n][3])))\n\n", "#!/usr/bin/env python3\n# coding: utf-8\nimport collections\ndef debug(arg):\n    if __debug__:\n        pass\n    else:\n        import sys\n        print(arg, file=sys.stderr)\n\ndef main():\n    pass\n    N, *A = map(int, open(0).read().split())\n    a = dict(enumerate(A, 1))\n    dp = collections.defaultdict(lambda: -float(\"inf\"))\n    dp[0, 0] = 0 \n    dp[1, 0] = 0 \n    dp[1, 1] = a[1]\n    for i in range(2, N + 1):\n        jj = range(max(i // 2 - 1, 1), (i + 1) // 2 + 1)\n        for j in jj:\n            x = dp[i - 2, j - 1] + a[i]\n            y = dp[i - 1, j]\n            dp[i, j] = max(x, y)\n    print(dp[N, N // 2])\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\ninf = 10**18\n\nx = N % 2 + 1\ndp = [[-inf] * 4 for _ in range(N + 10)]\ndp[0][0] = 0\nfor i, a in enumerate(A):\n    for j in range(x + 1):\n        dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j])\n        now = dp[i][j]\n        if (i + j) % 2 == 0:\n            now += a\n        dp[i + 1][j] = max(dp[i + 1][j], now)\n\nprint(dp[N][x])", "n = int(input())\na = list(map(int, input().split()))\n\nret = 0\n\nif n % 2 == 0:\n    dp = [[0] * 2 for _ in range(n)]\n    dp[0][0] = a[0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] if i % 2 == 1 else dp[i-1][0] + a[i]\n        dp[i][1] = dp[i - 1][1] if i % 2 == 0 \\\n            else max(dp[i-2][0], dp[i-2][1]) + a[i]\n    ret = max(dp[-1])\nelse:\n    dp = [[0] * 3 for _ in range(n)]\n    dp[0][0] = a[0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] if i % 2 == 1 else dp[i-1][0] + a[i]\n        dp[i][1] = dp[i - 1][1] if i % 2 == 0 \\\n            else max(dp[i-2][0], dp[i-2][1]) + a[i]\n        dp[i][2] = dp[i - 1][1] if i % 2 == 1 \\\n            else max(dp[i-3][0], dp[i-2][1], dp[i-2][2]) + a[i]\n    ret = max(dp[-1][1], dp[-1][2], dp[-2][0])\n\nprint(ret)\n", "#!/usr/bin/env python3\nimport sys\n\nMOD = 1000000007\n\ndef solve(N: int, A: \"List[int]\"):\n    from collections import defaultdict\n    M = N // 2\n    def get_range(idx):\n        r = (N - idx) // 2 + 1        \n        return list(range(max(0, M-r), idx//2+1+1))\n    \n    dp_a = defaultdict(lambda:-float('inf'))\n    dp_s = defaultdict(lambda:-float('inf'))\n    dp_s[(0, -1)] = 0 \n    for i in range(N):\n        for j in get_range(i):\n            dp_s[(j, i)] = max(dp_s[(j, i)], dp_a[(j, i-1)], dp_s[(j, i-1)])\n            dp_a[(j, i)] = max(dp_a[(j, i)], dp_s[(j, i)], dp_s[(j-1, i-1)]+A[i])\n    print((max(max(v for (j, i), v in list(dp_a.items()) if j == M),\n              max(v for (j, i), v in list(dp_s.items()) if j == M))))\n\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nmod = 10 ** 9 + 7\n\nN = INT()\nA = LIST()\n\ndp = [[0]*3 for _ in range(N+1)]\ndp[0][0] = -INF\ndp[1][0] = -INF\ndp[1][2] = A[0]\nfor i in range(2, N+1):\n\tif i%2 == 1:\n\t\tdp[i][0] = max(dp[i-1][0], dp[i-2][0]+A[i-1])\n\t\tdp[i][1] = max(dp[i-1][1], dp[i-2][1]+A[i-1])\n\t\tdp[i][2] = dp[i-2][2]+A[i-1]\n\telse:\n\t\tdp[i][0] = max(dp[i-1][1], dp[i-2][0]+A[i-1])\n\t\tdp[i][1] = max(dp[i-1][2], dp[i-2][1]+A[i-1])\n\nprint((dp[N][1]))\n", "#!/usr/bin/env python3\n# coding: utf-8\nimport collections\nimport math\ndef debug(arg):\n    if __debug__:\n        pass\n    else:\n        import sys\n        print(arg, file=sys.stderr)\n\ndef main():\n    pass\n    N, *A = map(int, open(0).read().split())\n    a = dict(enumerate(A, 1))\n    dp = collections.defaultdict(lambda: -float(\"inf\"))\n    dp[0, 0] = 0 \n    dp[1, 0] = 0 \n    dp[1, 1] = a[1]\n    for i in range(2, N + 1):\n        jj = range(max(math.floor(i // 2 - 1), 1), math.ceil((i + 1) // 2) + 1)\n        for j in jj:\n            x = dp[i - 2, j - 1] + a[i]\n            y = dp[i - 1, j]\n            dp[i, j] = max(x, y)\n    print(dp[N, N // 2])\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\nA = list(map(int, input().split()))\n\ninf = 10 ** 18\n\ndp = [[-inf] * 3  for _ in range(n + 1)]\nk = 1 + n % 2\ndp[0][0] = 0\nfor i in range(n):\n    for j in range(k + 1):\n        if j < k:\n            dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j])\n        now = dp[i][j]\n        if (i + j) % 2 == 0:\n            now += A[i]\n        dp[i + 1][j] = max(dp[i + 1][j], now)\nprint((dp[n][k]))\n", "N = int(input())\nA = list(map(int,input().split()))\nK = 2 if N%2 else 1\nINF = float('inf')\ndp = [[[-INF]*2 for _ in range(K+1)] for _ in range(N+1)]\ndp[0][K][0] = 0 #dp[i][can_skip][must_skip]\nfor i,a in enumerate(A):\n    for k in range(K,-1,-1):\n        dp[i+1][k][0] = max(dp[i+1][k][0], dp[i][k][1])\n        dp[i+1][k][1] = max(dp[i+1][k][1], dp[i][k][0] + a)\n        if k:\n            dp[i+1][k-1][0] = max(dp[i+1][k-1][0], dp[i][k][0])\nprint(max(max(row) for row in dp[-1][:2]))", "N=int(input())\nA=list(map(int, input().split()))\n\ndp = [[0 for i in range(2)] for j in range(N+1)]\n\nif N in [2, 3]: print(max(A))\nelse:\n  dp[2][0] = A[1]\n  dp[2][1] = A[0]\n  dp[3][0] = A[2]\n  dp[3][1] = max(A[1], A[0])\n  \n  for i in range(4, N+1):\n    if i % 2 == 0:\n      dp[i][0] = max(max(dp[i-2][0], dp[i-2][1])+A[i-1], dp[i-1][1]+A[i-1])\n      dp[i][1] = dp[i-2][1]+A[i-2]\n    else:\n      dp[i][0] = max(dp[i-2][0], dp[i-2][1])+A[i-1]\n      dp[i][1] = max(dp[i-1][0], dp[i-1][1])\n\n  print(max(dp[-1][0], dp[-1][1]))", "n = int(input())\na = list(map(int, input().split()))\nif n % 2 == 0:\n    ans, cnt = 0, 0\n    for i in range(n):\n        if i % 2 == 1:\n            ans += a[i]\n            cnt += a[i]\n    for i in range(n):\n        if i % 2 == 0:\n            cnt += a[i]\n        else:\n            cnt -= a[i]\n            ans = max(cnt, ans)\nelse:\n    a.insert(0, 0)\n    dp = [[0] * (n + 1) for _ in range(3)]\n    for i in range(3):\n        for j in range(1 + i, n + i - 1, 2):\n            if i == 0:\n                if j == 1:\n                    dp[i][j] = a[j]\n                else:\n                    dp[i][j] = dp[i][j - 2] + a[j]\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i][j - 2] + a[j])\n    ans = dp[2][n]\nprint(ans)", "from collections import*\nn,*a=map(int,open(0).read().split())\ndp=[defaultdict(lambda:-10**18)for _ in range(n)]\nfor i in range(n):dp[i][0]=0\nfor i,a in enumerate(a):\n    for j in range(n//2-(n-i)//2,i//2+2):\n        dp[i][j]=max(dp[i-2][j],dp[i-2][j-1]+a,dp[i-1][j])\nprint(dp[-1][n//2])", "n = int(input())\na = list(map(int,input().split()))\n\ndp = [[0]*2 for _ in range(n+1)]\ndp[1] = [0,a[0]]\ndp[2] = [0,max(a[0],a[1])]\nfor i in range(3,n+1):\n    if i%2 == 0:\n        dp[i][0] = max(dp[i-1][0],dp[i-2][0]+a[i-1])\n        dp[i][1] = max(dp[i-1][1],dp[i-2][1]+a[i-1])\n    else:\n        dp[i][0] = max(dp[i-1][1],dp[i-2][0]+a[i-1])\n        dp[i][1] = dp[i-2][1]+a[i-1]\n        \nif n%2 == 0:\n    print(dp[n][1])\nelse:\n    print(dp[n][0])", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\nimport time,random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\nmod2 = 998244353\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\ndef JA(a, sep): return sep.join(map(str, a))\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\n\n\ndef main():\n    n = I()\n    a = LI()\n\n    if n < 4:\n        return max(a)\n\n    dp = [[-inf] * 3 for _ in range(n)]\n    for i in range(3):\n        dp[i][i] = a[i]\n\n    for i in range(n):\n        c = a[i]\n        di = dp[i]\n        if i > 1:\n            d2 = dp[i-2]\n            for j in range(3):\n                if di[j] < d2[j] + c:\n                    di[j] = d2[j] + c\n        if i > 2:\n            d3 = dp[i-3]\n            for j in range(2):\n                if di[j+1] < d3[j] + c:\n                    di[j+1] = d3[j] + c\n        if i > 3:\n            d4 = dp[i-4]\n            for j in range(1):\n                if di[j+2] < d4[j] + c:\n                    di[j+2] = d4[j] + c\n\n    if n % 2 == 0:\n        return max(dp[-1][1], dp[-2][0])\n\n    r = -inf\n    for i in range(3):\n        r = max(r, dp[-1-i][2-i])\n\n    return r\n\nprint(main())\n\n\n\n", "n = int(input())\na = list(map(int, input().split()))\nif n % 2 == 0 and n >= 4:\n  dp = [[0, 0] for i in range(n)]\n  dp[0][0] = a[0]\n  dp[1][1] = a[1]\n  dp[2][0] = a[0] + a[2]\n  for i in range(3, n):\n    dp[i][0] = dp[i - 2][0] + a[i]\n    dp[i][1] = max(dp[i - 3][0], dp[i - 2][1]) + a[i]\n  print(max(dp[n - 2][0], dp[n - 1][1]))\nelif n % 2 != 0 and n >= 5:\n  dp = [[0, 0, 0] for i in range(n)]\n  dp[0][0] = a[0]\n  dp[1][1] = a[1]\n  dp[2][0] = a[0] + a[2]\n  dp[2][2] = a[2]\n  dp[3][1] = a[1] + a[3]\n  dp[3][2] = a[0] + a[3]\n  for i in range(3, n):\n    dp[i][0] = dp[i - 2][0] + a[i]\n    dp[i][1] = max(dp[i - 3][0], dp[i - 2][1]) + a[i]\n    dp[i][2] = max(dp[i - 4][0], dp[i - 3][1], dp[i - 2][2]) + a[i]\n  print(max(dp[n - 3][0], dp[n - 2][1], dp[n - 1][2]))\nelif n == 2:\n  print(max(a[0], a[1]))\nelse:\n  print(max(a[0], a[1], a[2]))", "import sys\nimport numpy as np\ndef input(): return sys.stdin.readline().rstrip()\n\ndef odd(A):\n    oddi=np.array(A[::2],dtype=np.int64)\n    eveni=np.array(A[1::2],dtype=np.int64)\n    left=np.cumsum(oddi[:-1]-eveni)\n    left=np.insert(left,0,0)\n    left=np.append(left,0)\n    right=np.cumsum(oddi[:0:-1]-eveni[::-1])[::-1]\n    right=np.insert(right,0,0)\n    right=np.append(right,0)\n    tmp=np.max(np.maximum.accumulate(left)+right)\n    return tmp+np.sum(eveni)\n\ndef even(A):\n    left=np.array([0]+A[::2],dtype=np.int64)\n    right=np.array(A[1::2]+[0],dtype=np.int64)[::-1]\n    return np.max(left.cumsum()+right.cumsum()[::-1])\n\ndef main():\n    n=int(input())\n    A=list(map(int, input().split()))\n    if n%2==1:\n        print(odd(A))\n    else:\n        print(even(A))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# \u5199\u7d4cAC\nfrom collections import defaultdict\n\nN = int(input())\nA = [int(i) for i in input().split()]\n\n# dp[(i, x, flag)]:= i\u756a\u76ee\u307e\u3067\u3067x\u500b\u9078\u3093\u3067\u3044\u308b\u6642\u306e\u6700\u5927\u5024\n# flag: i\u756a\u76ee\u3092\u3068\u308b\u30d5\u30e9\u30b0\ndp = defaultdict(lambda: -float(\"inf\"))\n\n# \u521d\u671f\u6761\u4ef6\ndp[(0, 0, 0)] = 0\n\n# \u8cb0\u3046DP\nfor i, a in enumerate(A, 1):\n    # i\u756a\u76ee\u307e\u3067\u3067\u9078\u3076\u500b\u6570\n    for x in range((i // 2) - 1, (i + 1) // 2 + 1):\n        dp[(i, x, 0)] = max(dp[(i - 1, x, 0)], dp[(i - 1, x, 1)])\n        dp[(i, x, 1)] = dp[(i - 1, x - 1, 0)] + a\n\nprint(max(dp[(N, N // 2, 0)], dp[(N, N // 2, 1)]))", "from itertools import accumulate\nn = int(input())\nA = list(map(int, input().split()))\nL = [0]\nR = []\nmin_L = float(\"inf\")\nfor i, a in enumerate(A):\n  b = A[-(i+1)]\n  if i%2 == 0:\n    L.append(a)\n  else:\n    R.append(a)\nR.append(0)\nL = list(accumulate(L))\nR = list(accumulate(R[::-1]))[::-1]\nans = -float(\"inf\")\nif n%2:\n  def f(A):\n    temp = 0\n    left = 0\n    right = 0\n    for i in range(2, n, 2):\n      temp += A[i]\n    res = max(ans, temp)\n    for i in range(1, n//2):\n      temp -= A[i*2]\n      left, right = left+A[2*(i-1)], max(left, right)+A[2*(i-1)+1]\n      res = max(res, temp+max(left, right))\n    return res\n  ans = max(f(A), f(A[::-1]))\n  temp = 0\n  for i in range(1, n, 2):\n    temp += A[i]\n  ans = max(ans, temp)\nelse:\n  for l, r in zip(L, R):\n    ans = max(ans, l+r)\nprint(ans)", "INF = 10**18\n\ndef solve(n, a):\n    # \u73fe\u5728\u306e\u4f4d\u7f6e x \u9078\u3093\u3060\u500b\u6570 x \u76f4\u524d\u3092\u9078\u3093\u3060\u304b\u3069\u3046\u304b\n    dp = [{j: [-INF, -INF] for j in range(i//2-1, (i+1)//2 + 1)} for i in range(n+1)]\n    dp[0][0][False] = 0\n    for i in range(n):\n        for j in dp[i].keys():\n            if (j+1) in dp[i+1]:\n                dp[i+1][j+1][True] = max(dp[i+1][j+1][True], dp[i][j][False] + a[i])\n            if j in dp[i+1]:\n                dp[i+1][j][False] = max(dp[i+1][j][False], dp[i][j][False])\n                dp[i+1][j][False] = max(dp[i+1][j][False], dp[i][j][True])\n    return max(dp[n][n//2])\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solve(n, a))", "import numpy as np\nn = int(input())\na = list(map(int,input().split()))\n\ndp = np.zeros((n+1,2), int)\ndp[1],dp[2] = [0,a[0]], [0,max(a[0], a[1])]\nfor i in range(3,n+1):\n  if(i%2 == 0):\n    dp[i][0] = max(dp[i-1][0],dp[i-2][0]+a[i-1],dp[i-2][1])\n    dp[i][1] = max(dp[i-1][1],dp[i-2][1]+a[i-1])\n  else:\n    dp[i][0] = max(dp[i-1][1],dp[i-2][1],dp[i-2][0]+a[i-1])\n    dp[i][1] = dp[i-2][1]+a[i-1]\nprint(dp[n][(n+1)%2])", "N = int(input())\nA = list(map(int, input().split()))\n\nDP_odd = [0, 0, A[0]]\nDP_even = [0, max(A[0], A[1])]\n\nif N >= 3:\n    DP_odd = [DP_even[0], max(DP_odd[1] + A[2], DP_even[1]), DP_odd[2] + A[2]]\n\nfor i in range(3, N):\n    if (i + 1) % 2 == 1:    \n        DP_odd = [max(DP_odd[0] + A[i], DP_even[0]), max(DP_odd[1] + A[i], DP_even[1]), DP_odd[2] + A[i]]\n    else:\n        DP_even = [max(DP_even[0] + A[i], DP_odd[1]), max(DP_even[1] + A[i], DP_odd[2])]\n\nif N % 2 == 1:\n    ans = DP_odd[1]\nelse:\n    ans = DP_even[1]\n\nprint(ans)", "N = int(input())\nA = list(map(int, input().split())) + [0]\n\ndp0, dp1, dp2 = [0] * (N + 1), [0] * (N + 1), [0] * (N + 1)\ndp0[0] = A[0]\ndp1[1] = A[1]\ndp2[2] = A[2]\n\nfor i in range(N - 3):\n    dp0[i + 2] = 0 if i % 2 else dp0[i] + A[i + 2]\n    dp1[i + 3] = max(dp0[i], dp1[i + 1]) + A[i + 3]\n    dp2[i + 4] = max(dp0[i], dp1[i + 1], dp2[i + 2]) + A[i + 4]\n\nif N % 2:\n    print((max(dp0[N - 3], dp1[N - 2], dp2[N - 1])))\nelse:\n    print((max(dp0[N - 2], dp1[N - 1])))\n", "N = int(input())\nA = [int(x) for x in input().split()]\n\nx, y, z = A[0], A[1], 0\nfor i in range(2, N):\n    if i % 2 == 0:\n        z = z + A[i]\n        y = max(y, x)\n        x = x + A[i]\n    else:\n        z = max(y, z)\n        y = y + A[i]\n        x = x\n\nif N % 2 == 0:\n    print((max(x, y)))\nelse:\n    print((max(y, z)))\n", "N=int(input())\nA=list(map(int, input().split()))\nif N==2:\n  print(max(A))\n  return \n  \ndp=[[0,0,0] for i in range(N)]\ndp[0][0]=A[0]\ndp[1][1]=A[1]\ndp[2][2]=A[2]\nfor i in range(N):\n  if i>1:\n    dp[i][0]=dp[i-2][0]+A[i]\n  if i>2:\n    dp[i][1]=max(dp[i-3][0],dp[i-2][1])+A[i]\n  if i>3 :\n    dp[i][2]=max(dp[i-4][0],dp[i-3][1],dp[i-2][2])+A[i]\nif N%2==1:\n  ans=max(dp[-1][2],dp[-2][1],dp[-3][0])\nelse:\n  ans=max(dp[-1][1],dp[-2][0])\nprint(ans)", "N = int(input())\nA = list(map(int, input().split()))\nINF = 10**18\n\ndp0 = 0\ndp1 = -INF\ndp2 = -INF\n\nfor i, a in enumerate(A):\n    if i % 2 == 0:\n        dp1 = max(dp1, dp0)\n        dp0 += a\n        dp2 += a\n    else:\n        dp2 = max(dp2, dp1)\n        dp1 += a\n\nif N % 2 == 1:\n    print((max(dp1, dp2)))\nelse:\n    print((max(dp0, dp1)))\n", "n=int(input())\narr=list(map(int,input().split()))\nacum1=[0]\nacum2=[0]\nfor i in range(n):\n  if i%2==0:\n    acum1.append(acum1[-1]+arr[i])\n    acum2.append(acum2[-1]+0)\n  else:\n    acum1.append(acum1[-1]+0)\n    acum2.append(acum2[-1]+arr[i])\nif n%2==0:\n  ans=max(acum1[n-1]-acum1[0],acum2[n]-acum2[1])\n  for i in range(1,n+1,2):\n    if i+3>n:\n      continue\n    tmp=(acum1[i]-acum1[0])+(acum2[n]-acum2[i+2])\n    ans=max(ans,tmp)\nelse:\n  ans=max(acum1[n-2]-acum1[0],acum2[n-1]-acum2[1],acum1[n]-acum1[2])\n  for i in range(1,n+1,2):\n    if i+3>n-1:\n      continue\n    tmp=(acum1[i]-acum1[0])+(acum2[n-1]-acum2[i+2])\n    ans=max(ans,tmp)\n  for i in range(2,n+1,2):\n    if i+3>n:\n      continue\n    tmp=(acum2[i]-acum2[1])+(acum1[n]-acum1[i+2])\n    ans=max(ans,tmp)\n  for i in range(1,n+1,2):\n    if i+4>n:\n      continue\n    tmp=(acum1[i]-acum1[0])+(acum1[n]-acum1[i+3])\n    ans=max(ans,tmp)\n  acummax=[-10**18]\n  for i in range(1,n+1):\n    if i+2>n:\n      acummax.append(-10**18)\n    else:\n      if i%2==0:\n        acummax.append(acum2[i]+acum1[n]-acum1[i+2])\n      else:\n        acummax.append(-10**18)\n  for i in range(n-1,-1,-1):\n    acummax[i]=max(acummax[i],acummax[i+1])\n  for i in range(1,n+1,2):\n    if i+6>n:\n      continue\n    tmp=(acum1[i]-acum1[0]-acum2[i+2])+acummax[i+3]\n    ans=max(ans,tmp)\nprint(ans)", "import sys\n\nN = int(input()); A = list(map(int,input().split()))\n\nif N == 2:\n    print(max(A))\n    return\n\ndp = [0,max(A[:3]),A[0]+A[2]]\ntmp1 = dp[:]\ntmp2 = [0,max(A[:2]),0]\nflag1 = False\nflag2 = True if A[0] < A[2] and A[1] < A[2] else False\nflag3 = False\n\nfor i in range(3,N):\n    b = A[i]\n    if i%2 == 0:\n        dp[0] = max(tmp2[0],tmp1[0]+b)\n        flag1 = True if tmp2[0] < tmp1[0]+b else False\n        if flag3:\n            dp[1] = max(tmp2[1],tmp1[1]+b)\n            flag2 = True if tmp2[1] < tmp1[1]+b else False \n        else:\n            dp[1] = max(tmp2[1],tmp2[0]+b,tmp1[1]+b)\n            flag2 = True if tmp2[1] < tmp2[0]+b or tmp2[1] < tmp1[1]+b else False \n        dp[2] += A[i]\n        tmp1 = dp[:]\n    else:\n        if flag1:\n            dp[0] = max(tmp1[1],tmp2[0]+b)\n            flag3 = True if tmp1[1] < tmp2[0]+b else False\n        else:\n            dp[0] = max(tmp1[1],tmp1[0]+b,tmp2[0]+b)\n            flag3 = True if tmp1[1] < tmp1[0]+b or tmp1[1] < tmp2[0]+b else False\n        if flag2:\n            dp[1] = max(tmp1[2],tmp2[1]+b)\n        else:\n            dp[1] = max(tmp1[2],tmp1[1]+b,tmp2[1]+b)\n        tmp2 = dp[:]\n        \nprint (dp[1])", "def f_select_half():\n    # \u53c2\u8003: https://at274.hatenablog.com/entry/2020/04/14/002124\n    from collections import defaultdict\n    N = int(input())\n    A = [int(i) for i in input().split()]\n\n    # dp[(i, j, flag)]: A \u306e i \u756a\u76ee\u306e\u8981\u7d20\u307e\u3067\u898b\u305f\u3068\u304d\u3001j \u500b\u306e\u8981\u7d20\u3092\u9078\u3093\u3067\u3044\u308b\u3068\u304d\u306e\u548c\u306e\u6700\u5927\u5024\n    # flag == 1 \u306e\u3068\u304d\u306f\u3001i \u756a\u76ee\u306e\u8981\u7d20\u3092\u63a1\u7528\u3057\u305f\u3082\u306e\u3068\u3059\u308b\n    # \u521d\u3081\u3066\u6307\u3057\u305f\u9077\u79fb\u524d\u304c\u5f71\u97ff\u3057\u3066\u307b\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u5024\u3067\u521d\u671f\u5316\n    dp = defaultdict(lambda: -float('inf'))\n    dp[(0, 0, 0)] = 0\n\n    for k, a in enumerate(A, 1):\n        j = k // 2\n        for x in range(j - 1, j + 2):\n            dp[(k, x, 0)] = max(dp[(k - 1, x, 0)], dp[k - 1, x, 1])\n            # k-1 \u756a\u76ee\u306e\u8981\u7d20\u3092\u9078\u3093\u3067\u3044\u306a\u3044\u3068\u304d\u3060\u3051\u3001k \u756a\u76ee\u306e\u8981\u7d20\u3092\u9078\u3079\u308b\n            dp[(k, x, 1)] = dp[(k - 1, x - 1, 0)] + a\n    return max(dp[(N, N // 2, f)] for f in (0, 1))\n\nprint(f_select_half())", "from collections import defaultdict\nn=int(input())\na=list(map(int,input().split()))\ndp=[defaultdict(lambda:-float('inf'))for _ in range(n)]\nfor i in range(n):dp[i][0]=0\nfor i,a in enumerate(a):\n    for j in range(n//2-(n-i)//2,i//2+2):\n        dp[i][j]=max(dp[i-2][j],dp[i-2][j-1]+a,dp[i-1][j])\nprint((dp[-1][n//2]))\n", "# \u5199\u7d4cAC\nfrom collections import defaultdict\n\nN = int(input())\nA = [int(i) for i in input().split()]\n\n# dp[(i, x, flag)]:= i\u756a\u76ee\u307e\u3067\u3067x\u500b\u9078\u3093\u3067\u3044\u308b\u6642\u306e\u6700\u5927\u5024\n# flag: i\u756a\u76ee\u3092\u3068\u308b\u30d5\u30e9\u30b0\ndp = defaultdict(lambda: -float(\"inf\"))\n\n# \u521d\u671f\u6761\u4ef6\ndp[(0, 0, 0)] = 0\n\nfor i, a in enumerate(A, 1):\n    for x in range((i // 2) - 1, (i + 1) // 2 + 1):\n        dp[(i, x, 0)] = max(dp[(i - 1, x, 0)], dp[(i - 1, x, 1)])\n        dp[(i, x, 1)] = dp[(i - 1, x - 1, 0)] + a\n\nprint(max(dp[(N, N // 2, 0)], dp[(N, N // 2, 1)]))", "import sys\nsys.setrecursionlimit(2000000000)\nN = int(input())\nimport math\nl = [int(x) for x in input().split()]\ntobi = [0]*(math.ceil(N/2))\ntobi[0] = l[0]\nfor i in range(1,math.ceil(N/2)):\n    tobi[i] = tobi[i-1] + l[i*2]\nfrom functools import lru_cache\n@lru_cache(maxsize=1000000000)\ndef motomeru(x,y):\n    if y == 0 or x == 0 or x == 1:\n        return 0\n    elif x % 2 == 0:\n        return max(motomeru(x-2,y-1)+l[x-1],tobi[math.floor((x-1)/2)])\n    else:\n        return max(motomeru(x-2,y-1)+l[x-1],motomeru(x-1,y))\nprint(motomeru(N,N//2))", "n=int(input())\na = list(map(int,input().split()))\n\n# o\u3092\u9078\u629e x\u3092\u975e\u9078\u629e\u3068\u3059\u308b\u3000\u5de6\u304b\u3089\u898b\u3066\n# oxoxoxoxoxo \u306b x \u30921\u3064\u304b2\u3064\u633f\u5165\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\n# \u72b6\u614b\u30924\u3064\u8a2d\u5b9a (\u6700\u5f8c\u304cx\u304bo\u304b)(\u633f\u5165\u305a\u307f\u306ex\u306e\u6570)\u306e\u5f62\u5f0f\u3067\u3084\u308b\n#a=[1,2,3,4,5,6,7]\n#n=len(a)\nx0,x1,x2,o0,o1,o2=a[0],-10**18,0,-10**18,a[1],-10**18\nfor i in a[2:]:\n    x0,x1,x2,o0,o1,o2=o0,max(o1,x0),max(o2,x1),x0+i,x1+i,x2+i\nif n%2==0:\n    print(max(x0,x1,o1))\nelse:\n    print(max(x1,x2,o2))", "\ndef resolve():\n    INF = float(\"-inf\")\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    # \u53d6\u308b \u53d6\u3089\u306a\u3044 \u53d6\u308b \u53d6\u3089\u306a\u3044 ... \u3092\u8caa\u6b32\u306b\u3084\u3063\u3066\u3044\u304f\u3068 1 + n % 2 \u500b\u4f59\u3063\u3066\u3001\n    # 1 + n % 2 \u56de\u98db\u3070\u305b\u308b\u3053\u3068\u304c\u308f\u304b\u308b\n    skip = 1 + N % 2;\n\n    # dp[i][j] := a[0, i) \u3092 j \u8981\u7d20\u7121\u8996\u3057\u30661\u3064\u98db\u3073\u306b\u53d6\u3063\u305f\u3068\u304d\u306e\u6700\u5927\u5024\n    dp = [[INF] * (skip + 1) for _ in range(N + 2)]\n    dp[0][0] = 0\n    for i in range(N + 1):\n        for j in range(skip + 1):\n            if j < skip:\n                dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j])\n            if i < N:\n                dp[i + 2][j] = max(dp[i + 2][j], dp[i][j] + A[i])\n    # 1\u500b\u9078\u3093\u3060\u30891\u500b\u9078\u3070\u306a\u3044\u306e\u3082\u30bb\u30c3\u30c8\n    # \u306a\u306e\u3067 floor(n / 2) * 2 + skip == n + 1 \u306b\u7b54\u3048\u304c\u5165\u308b\n    print((dp[N + 1][skip]))\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "#!/usr/bin/env python3\nimport sys\nfrom itertools import accumulate\nsys.setrecursionlimit(10**8)\nINF = float(\"inf\")\n\nimport math\n\n\ndef array(*args, initial=0):\n    pre = \"[\"*len(args)\n    post = \"\"\n    for a in args[::-1]:\n        post += \" for _ in range(\"+str(a)+\")]\"\n    S = pre + str(initial) + post\n    return eval(S)\n\n\ndef solve(N: int, A: \"List[int]\"):\n\n    if N % 2 == 0:\n        K = 2\n    else:\n        K = 3\n\n    DP = array(N, K, initial=-10**9)\n    DP[0][0] = A[0]\n    DP[1][1] = A[1]\n    if K == 3:\n        DP[2][2] = A[2]\n    for i in range(1, N):\n        for k in range(K):\n            if i == k and i < K:\n                continue\n            DP[i][k] = DP[i-2][k]\n            if k-1 >= 0:\n                DP[i][k] = max(DP[i][k], DP[i-3][k-1])\n            if k-2 >= 0:\n                DP[i][k] = max(DP[i][k], DP[i-4][k-2])\n            DP[i][k] += A[i]\n    if N % 2 == 0:\n        print((max(DP[-1][1], DP[-2][0])))\n    else:\n        print((max(DP[-1][2], DP[-2][1], DP[-3][0])))\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\ndp=[0]#dp[i]=\u5de6\u304b\u3089i\u756a\u76ee\u307e\u3067\u3067(i//2)\u500b\u9078\u3093\u3060\u3068\u304d\u306e\u6700\u5927\u5024\nsum_odd=a[0]\n\ndp.append(0)\nfor i in range(2,n+1):\n  if i%2==1:\n    sum_odd+=a[i-1]\n    dp.append(max(dp[i-1],dp[i-2]+a[i-1]))\n  else:\n    dp.append(max(sum_odd,a[i-1]+dp[i-2]))\nprint((dp[n]))\n", "from collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\n\n# dp[(i, x, flg)] := i\u756a\u76ee\u307e\u3067\u307f\u3066x\u500b\u9078\u3093\u3067\u3044\u308b\u6642\u306e\u6700\u5927\u5024\u3002flg\u306f\u6700\u5f8c\u306e\uff11\u3064\u3092\u3068\u3063\u305f\u304b\u3069\u3046\u304b\u3002\ndp = defaultdict(lambda: -float('inf'))\ndp[(0, 0, 0)] = 0\n\nfor i, a in enumerate(A, start=1):\n    for x in range((i - 1) // 2, (i + 1) // 2 + 1):\n        dp[(i, x, 0)] = max(dp[(i - 1, x, 0)], dp[(i - 1, x, 1)])\n        dp[(i, x, 1)] = dp[(i - 1, x - 1, 0)] + a\n\nprint((max(dp[(N, N // 2, 0)], dp[(N, N // 2, 1)])))\n", "from collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\n\ndp = defaultdict(lambda: -float('inf'))\ndp[(0, 0, 0)] = 0\n\nfor i, a in enumerate(A, start=1):\n    j = i // 2\n    for x in range(j - 1, j + 2):\n        dp[(i, x, 0)] = max(dp[(i - 1, x, 0)], dp[(i - 1, x, 1)])\n        dp[(i, x, 1)] = dp[(i - 1, x - 1, 0)] + a\n\nprint(max(dp[(N, N // 2, 0)], dp[(N, N // 2, 1)]))", "n = int(input())\na = list(map(int,input().split()))\n \ndp = [[0]*2 for _ in range(n+1)]\ndp[1] = [0,a[0]]\ndp[2] = [0,max(a[0],a[1])]\nfor i in range(3,n+1):\n    if i%2 == 0:\n        dp[i][0] = max(dp[i-1][0],dp[i-2][0]+a[i-1])\n        dp[i][1] = max(dp[i-1][1],dp[i-2][1]+a[i-1])\n    else:\n        dp[i][0] = max(dp[i-1][1],dp[i-2][0]+a[i-1])\n        dp[i][1] = dp[i-2][1]+a[i-1]\n        \nif n%2 == 0:\n    print(dp[n][1])\nelse:\n    print(dp[n][0])", "def find_max(a):\n    n = len(a)\n\n    if n <= 3:\n        return max(a)\n\n    dp = [[-(1 << 64)] * (2 + n % 2) for _ in range(n)]\n\n    for i in range(2 + n % 2):\n        dp[i][i] = a[i]\n        dp[i + 1][i] = a[i]\n\n    for i in range(2, n):\n        for j in range(2 + n % 2):\n            for extra_space in range(j + 1):\n                curr_sum = dp[i - (2 + extra_space)][j - extra_space] + a[i]\n                if curr_sum > dp[i][j]:\n                    dp[i][j] = curr_sum\n\n    return dp[-1][1 + n % 2]\n\n\ndef main():\n    _ = int(input())\n    a = list(map(int, input().split()))\n\n    print((find_max(a)))\n\n\nmain()\n", "n=int(input())\nif n%2:\n  a=list(map(int,input().split()))\n  s=[[a[0],0,0],[0,a[1],0],[a[0]+a[2],0,a[2]]]+[[0,0,0]for i in range(3,n)]\n  for i in range(3,n):\n    if i%2:\n      s[i][1]=max(s[i-2][1],s[i-3][0])+a[i]\n    else:\n      s[i][0]=s[i-2][0]+a[i]\n      s[i][2]=max([s[i-2][2],s[i-3][1],s[i-4][0]])+a[i]\n  print(max([s[-1][2],s[-2][1],s[-3][0]]))\nelse:\n  a=list(map(int,input().split()))\n  s=[a[0],a[1]]+[0 for i in range(2,n)]\n  for i in range(2,n):\n    if i%2:\n      s[i]=max([s[i-2],s[i-3]])+a[i]\n    else:\n      s[i]=s[i-2]+a[i]\n  print(max(s[-2:]))", "N_all=int(input())\nA=list(map(int,input().split()))\nf_inf=-float(\"inf\")\nodds_or_even=N_all%2+2\ndp=[[f_inf for x in range(N_all+1)] for x in range(odds_or_even)]\ndp[0][0]=0\n\nfor i in range(N_all):\n  dp[0][i+1]=dp[0][i]+A[i]*((i+1)%2)\nfor j in range(1,odds_or_even):\n  for i in range(N_all):\n    dp[j][i+1]=max(dp[j][i]+A[i]*((i+j+1)%2),dp[j-1][i])\n        \nprint(dp[odds_or_even-1][N_all])", "from collections import defaultdict\n\nINF = float(\"inf\")\n\n\nN, *A = map(int, open(0).read().split())\n\nI = defaultdict(lambda: -INF)\nO = defaultdict(lambda: -INF)\nO[(0, 0)] = 0\n\nfor i, a in enumerate(A, 1):\n    j = (i - 1) // 2\n    for n in [j, j + 1]:\n        I[(i, n)] = a + O[(i - 1, n - 1)]\n        O[(i, n)] = max(O[(i - 1, n)], I[(i - 1, n)])\n\nprint(max(I[(N, N // 2)], O[(N, N // 2)]))", "def main():\n    INF = 10 ** 18\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    K = 1 + N % 2  # \u4f59\u5206\u306a\u00d7\u3092\u5165\u308c\u3089\u308c\u308b\u500b\u6570\n    # dp[i][j]: i\u500b\u76ee\u307e\u3067\u306e\u8981\u7d20\u3067\u4f59\u5206\u306a\u00d7\u3092j\u500b\u4f7f\u3063\u305f\u969b\u306e\u6700\u5927\u5024\n    dp = [[- INF for _ in range(K + 1)] for _ in range(N + 1)]\n    dp[0][0] = 0\n    for i in range(N):\n        for j in range(K + 1):\n            if j < K:\n                # \u4f59\u5206\u306a\u00d7\u3092\u4f7f\u3046\u5834\u5408\n                dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j])\n            # \u4f59\u5206\u306a\u00d7\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\n            now = dp[i][j]\n            if (i + j) % 2 == 0:\n                # \u57fa\u672c\u306fi % 2 == 0\u306e\u6642\u306bA[i]\u3092\u8db3\u3057\u3066\u3044\u304f\n                # \u305f\u3060\u3001\u4f59\u5206\u306a\u00d7\u304cj\u500b\u5165\u3063\u3066\u3044\u308b\u3068\u3001\u305d\u306e\u5206\u305a\u308c\u308b\n                now += A[i]\n            dp[i + 1][j] = max(dp[i + 1][j], now)\n    print((dp[N][K]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = [int(a) for a in input().split()]\nif N % 2 == 0:\n    x, y, px, py = 0, 0, 0, -1<<100\n    for a in A:\n        x, y, px, py = px+a, max(x, py+a), x, y\n    print(max(x, y))\nelse:\n    x, y, z, px, py, pz = 0, 0, 0, 0, -1<<100, -1<<100\n    for a in A:\n        x, y, z, px, py, pz = px+a, max(x, py+a), max(y, pz+a), x, y, z\n    print(max(y, z))", "n = int(input())\na = list(map(int,input().split()))\nm0 = 0\nm1 = 0\nm2 = 0\n\nif n%2 == 0:\n    for i,ai in enumerate(a):\n        if i%2 == 0:\n            m0 += ai\n        else:\n            m1 = max(m0,m1+ai)\n    print((max(m0,m1)))\nelse:\n    for i,ai in enumerate(a):\n        if i%2 == 0:\n            if i > 0:\n                m2 = max(m2+ai,m1,m0)\n            if i < n-1:\n                m0 += ai\n        else:\n            m1 = max(m0,m1+ai)\n    print((max(m0,m1,m2)))\n", "import sys\nimport numpy as np\ndef input(): return sys.stdin.readline().rstrip()\n\ndef odd(A):\n    oddi=np.array(A[::2],dtype=np.int64)\n    eveni=np.array(A[1::2],dtype=np.int64)\n    left=np.cumsum(oddi[:-1]-eveni)\n    left=np.insert(left,0,0)\n    right=np.cumsum(oddi[:0:-1]-eveni[::-1])[::-1]\n    right=np.append(right,0)\n    tmp=np.max(np.maximum.accumulate(left)+right)\n    return tmp+np.sum(eveni)\n\ndef even(A):\n    left=np.array([0]+A[::2],dtype=np.int64)\n    right=np.array(A[1::2]+[0],dtype=np.int64)[::-1]\n    return np.max(left.cumsum()+right.cumsum()[::-1])\n\ndef main():\n    n=int(input())\n    A=list(map(int, input().split()))\n    if n%2==1:\n        print(odd(A))\n    else:\n        print(even(A))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\nN,*A = map(int, open(0).read().split())\ndic1 = defaultdict(lambda :-10**20)\ndic2 = defaultdict(lambda :-10**20)\nfor i in range(-1,N):\n  dic1[(i,0)] = 0\n  dic2[(i,0)] = 0\nfor i in range(N):\n  for j in range(max(1,N//2-(N-i+1)//2), i//2+2):\n    dic1[(i,j)] = max(dic1[(i,j)],dic2[(i-1,j-1)]+A[i])\n  for j in range(N//2-(N-i)//2,(i-1)//2+2):\n    dic2[(i,j)] = max(dic2[(i-1,j)],dic1[(i-1,j)])\nprint(max(dic1[(N-1,N//2)],dic2[(N-1,N//2)]))", "from collections import defaultdict\n\nINF = float(\"inf\")\n\nN, *A = map(int, open(0).read().split())\n\ndp = defaultdict(lambda: -INF)\ndp[(0, 0, False)] = 0\n\nfor i, a in enumerate(A, 1):\n    p = i // 2\n    for j in [p - 1, p, p + 1]:\n        dp[(i, j, True)] = a + dp[(i - 1, j - 1, False)]\n        dp[(i, j, False)] = max(dp[(i - 1, j, False)], dp[(i - 1, j, True)])\n\nprint(max(dp[(N, N // 2, True)], dp[(N, N // 2, False)]))", "#!/usr/bin/env python3\n# coding: utf-8\nimport collections\nimport math\ndef debug(arg):\n    if __debug__:\n        pass\n    else:\n        import sys\n        print(arg, file=sys.stderr)\n\nN, *A = map(int, open(0).read().split())\na = dict(enumerate(A, 1))\n# dp = collections.defaultdict(int)\ndp = collections.defaultdict(lambda: -float(\"inf\"))\ndp[0, 0] = 0 \ndp[1, 0] = 0 \ndp[1, 1] = a[1]\nfor i in range(2, N + 1):\n    jj = range(max(math.floor(i // 2 - 1), 1), math.ceil((i + 1) // 2) + 1)\n    debug(jj)\n    for j in jj:\n        x = dp[i - 2, j - 1] + a[i]\n        y = dp[i - 1, j]\n\n        dp[i, j] = max(x, y)\n        debug([i - 2, j - 1])\n        debug([i - 1, j])\n        debug([i, j])\n        debug(dp[i, j])\nprint(dp[N, N // 2])", "from collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\n\n# dp[(i, x, flg)] := i\u756a\u76ee\u307e\u3067\u307f\u3066x\u500b\u9078\u3093\u3067\u3044\u308b\u6642\u306e\u6700\u5927\u5024\u3002flg\u306f\u6700\u5f8c\u306e\uff11\u3064\u3092\u3068\u3063\u305f\u304b\u3069\u3046\u304b\u3002\ndp = defaultdict(lambda: -float('inf'))\ndp[(0, 0, 0)] = 0\n\nfor i, a in enumerate(A, start=1):\n    j = i // 2\n    for x in range(j - 1, j + 2):\n        dp[(i, x, 0)] = max(dp[(i - 1, x, 0)], dp[(i - 1, x, 1)])\n        dp[(i, x, 1)] = dp[(i - 1, x - 1, 0)] + a\n\nprint((max(dp[(N, N // 2, 0)], dp[(N, N // 2, 1)])))\n", "def solve():\n    INF = float('inf')\n\n    def max2(x, y): return x if x >= y else y\n\n    N = int(input())\n    As = list(map(int, input().split()))\n\n    dp = [[[-INF]*(2) for j in range(3)] for i in range(N+1)]\n    dp[0][2][0] = dp[0][2][1] = 0\n    for i, A in enumerate(As):\n        if i&1:\n            for k in range(2):\n                for j in range(3):\n                    dp[i+1][j][0] = max2(dp[i+1][j][0], dp[i][j][k])\n            for j in range(2):\n                dp[i+1][j+1][1] = max2(dp[i+1][j+1][1], dp[i][j][0] + A)\n        else:\n            for j in range(3):\n                dp[i+1][j][1] = max2(dp[i+1][j][1], dp[i][j][0] + A)\n            for k in range(2):\n                for j in range(1, 3):\n                    dp[i+1][j-1][0] = max2(dp[i+1][j-1][0], dp[i][j][k])\n\n    if N&1:\n        print((max(dp[-1][1])))\n    else:\n        print((max(dp[-1][2])))\n\n\nsolve()\n", "n=int(input())\na = list(map(int,input().split()))\nx0,x1,x2,o0,o1,o2=a[0],-10**18,0,-10**18,a[1],-10**18\nfor i in a[2:]:\n  x0,x1,x2,o0,o1,o2=o0,max(o1,x0),max(o2,x1),x0+i,x1+i,x2+i\nprint(max(x0,x1,o1)if n%2==0 else max(x1,x2,o2))", "from math import inf\n\n\nn = int(input())\nA = list(map(int, input().split()))\n\ndp = [[-inf] * 3  for _ in range(n + 1)]\nk = 1 + n % 2\ndp[0][0] = 0\nfor i in range(n):\n    for j in range(k + 1):\n        if j < k:\n            dp[i + 1][j + 1] = dp[i][j]\n        now = dp[i][j]\n        if (i + j) % 2 == 0:\n            now += A[i]\n        dp[i + 1][j] = max(dp[i + 1][j], now)\nprint((dp[n][k]))\n", "from collections import defaultdict\n\nn = int(input())\nal = list(map(int, input().split()))\n\ndp = defaultdict(lambda: -10**18)\ndp[(0,0,False)] = 0\n\nfor i in range(n):\n    for j in range(i//2-1,i//2+2):\n        dp[(i+1,j,False)] = max(\n            dp[(i,j,False)],\n            dp[(i,j,True)]\n        )\n        dp[(i+1,j,True)] = dp[(i,j-1,False)] + al[i]\n\nprint((max(\n    dp[(n,n//2,False)],\n    dp[(n,n//2,True)]\n)))\n", "n = int(input())\nA = list(map(int,input().split()))\ndp = [[[0,0,0] for i in range(2)] for i in range(n+1)]\nfor i in range(1,n+1):\n    if i%2 == 1:\n        if i > 1:\n            dp[i][0][1] = dp[i-1][1][0]+A[i-1]\n            dp[i][0][2] = dp[i-1][1][1]+A[i-1]\n            dp[i][1][0] = max(dp[i-1][0][0],dp[i-1][1][0])\n            dp[i][1][1] = max(dp[i-1][0][1],dp[i-1][1][1])\n        else:\n            dp[i][0][2] = A[0]\n    else:\n        dp[i][0][0] = dp[i-1][1][0]+A[i-1]\n        dp[i][0][1] = dp[i-1][1][1]+A[i-1]\n        dp[i][1][0] = max(dp[i-1][0][1],dp[i-1][1][1])\n        dp[i][1][1] = dp[i-1][0][2]\nif n%2 == 0:\n    print(max(dp[n][0][1],dp[n][1][1]))\nelse:\n    print(max(dp[n][0][1],dp[n][1][1]))", "n = int(input())\na = list(map(int, input().split()))\na.insert(0, 0)\ndp = [[0] * (n + 1) for _ in range(3)]\nfor i in range(n % 2 + 2):\n    for j in range(1 + i, n + i, 2):\n        if i == 0:\n            if j == 1:\n                dp[i][j] = a[j]\n            else:\n                dp[i][j] = dp[i][j - 2] + a[j]\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1], dp[i][j - 2] + a[j])\nans = dp[n % 2 + 1][n]\nprint(ans)", "import numpy as np\nn = int(input())\na = list(map(int,input().split()))\ndp = np.full((2, n//2 + 1), -10**18, dtype=np.int64)\n\"\"\"\ndp[i][j] := i\u306f\u5076\u5947, j\u306f\u4f55\u500b\u6c7a\u3081\u308b\u304b\n\"\"\"\ndp[0][0] = 0\ndp[1][0] = 0\nfor i in range(n):\n\tk = i % 2\n\tfor j in [2, 1, 0]:\n\t\tif i//2+j <= n//2:\n\t\t\tif i//2-1+j >= 0:\n\t\t\t\tdp[k][i//2+j] = np.maximum(dp[1-k][i//2+j], dp[k][i//2-1+j]+a[i])\n\nprint(max(dp[0][n//2], dp[1][n//2]))", "N, *A = list(map(int, open(0).read().split()))\n\nv1 = 0\nv2 = 0\nv3 = 0\nm = N // 2 *2 \nif N % 2 == 0:\n  for i in range(0, m, 2):\n    v1 += A[i]\n    v2 += A[i+1]\n    v2 = max(v1,v2)\n  print(v2)  \n#\nelse:\n  for i in range(0, m, 2):\n    v1 += A[i]\n    v2 += A[i+1]\n    v3 += A[i+2]\n    v2 = max(v1,v2)\n    v3 = max(v2,v3)\n  print(v3)\n#\n  \n", "N = int(input())\nA = list(map(int, input().split()))\nk = 1+N%2 # \u4f59\u5206\u306ax\u3092\u5165\u308c\u308b\u500b\u6570\nINF = 10**18\n# dp: i\u756a\u76ee\u307e\u3067\u898b\u305f\u3068\u304d\u306b\u3001j\u500b\u306e\u4f59\u5206\u306ax\u3092\u5165\u308c\u305f\u6642\u306e\u3001\u548c\u306e\u6700\u5927\u5024\ndp = [[-INF for _ in range(4)] for _ in range(202020)]\ndp[0][0] = 0\nfor i in range(N):\n    for j in range(k+1):\n        dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j]) # x\u3092\u4e00\u3064\u633f\u5165\u3059\u308b=>\u4eca\u898b\u3066\u308b\u6570\u5b57\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\n        now = dp[i][j]\n        if (i+j)%2==0:\n            now += A[i]\n        dp[i+1][j] = max(dp[i+1][j], now)\nprint(dp[N][k])", "#!/usr/bin/env python3\nimport sys\n\nMOD = 1000000007\n\ndef solve(N: int, A: \"List[int]\"):\n    from collections import defaultdict\n    M = N // 2\n    def get_range(idx):\n        r = (N - idx) // 2 + 1        \n        return list(range(max(0, M-r), idx//2+1+1))\n    \n    dp_a = defaultdict(lambda:-float('inf'))\n    dp_s = defaultdict(lambda:-float('inf'))\n    dp_s[(0, -1)] = 0 \n    for i in range(N):\n        for j in get_range(i):\n            dp_s[(j, i)] = max(dp_s[(j, i)], dp_a[(j, i-1)], dp_s[(j, i-1)])\n            dp_a[(j, i)] = max(dp_a[(j, i)], dp_s[(j, i)], dp_s[(j-1, i-1)]+A[i])\n    print((max(max(v for (j, i), v in list(dp_a.items()) if j == M),\n              max(v for (j, i), v in list(dp_s.items()) if j == M))))\n\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\n\nn=int(input())\na=list(map(int,input().split()))\n#n=2*pow(10,5)\n#a=range(1,pow(10,5)+1)\n# dp[i][j]:i\u756a\u76ee\u306e\u6570\u5b57\u306e\u4e2d\u304b\u3089j\u500b\u6570\u5b57\u3092\u53d6\u3063\u305f\u6642\u306e\u6700\u5927\u3002(i//2)-1<=j<=(i+1)//2\n# \u6c42\u3081\u308b\u306e\u306fdp[n][n//2]\ndp=defaultdict(lambda:-pow(10,18))\ndp[(1,1)]=a[0]\nfor i in range(2,n+1): #i\u756a\u76ee\u306e\u6570\u5b57\u306fa[i-1]\n      for j in range(i//2-1,(i+1)//2+1):\n            if j==1:\n                  dp[(i,j)]=max(dp[(i-1,1)],a[i-1])\n            elif j==0:\n                  dp[(i,j)]=0\n            else:\n                  dp[(i,j)]=max(dp[(i-2,j-1)]+a[i-1],dp[(i-1,j)])\nprint(dp[(n,n//2)])", "N = int(input())\nA = [int(x) for x in input().split()]\n\ndp = [[0]*3]*N\n\ndp[0][0] = 0  # ((i+1)-1)/2\ndp[0][1] = 0 # (i+1)/2\ndp[0][2] = A[0]  # ((i+1)+1)/2\n\nfor i in range(1, N):\n    \n    if i % 2 == 0:\n        dp[i][0] = dp[i-1][0] + A[i]\n        dp[i][1] = max(dp[i-1][1], dp[i-1][2])\n        dp[i][2] = dp[i-1][2] + A[i]\n    else:\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1])\n        dp[i][1] = dp[i-1][1] + A[i]\n        dp[i][2] = dp[i-1][2]\n\nif N % 2 == 0:\n    print(max(dp[N-1][1],dp[N-1][2]))\nelse:\n    print(max(dp[N-1][0],dp[N-1][1]))", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    skip = 1 + N % 2\n    dp = [[-INF] * (skip + 1) for _ in range(N + 2)]\n    dp[0][0] = 0\n\n    for i in range(N + 1):\n        for j in range(skip + 1):\n            if j < skip and dp[i + 1][j + 1] < dp[i][j]:\n                dp[i + 1][j + 1] = dp[i][j]\n            if i < N and dp[i + 2][j] < dp[i][j] + A[i]:\n                dp[i + 2][j] = dp[i][j] + A[i]\n\n    print((dp[N + 1][skip]))\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nnum = list(map(int, input().split()))\ndp_odd = [0, num[0]]\ndp_even = max(num[0], num[1])\nfor i in range(2, N):\n  if (i + 1) % 2 == 1:\n    dp_odd = [max(dp_odd[0] + num[i], dp_even), dp_odd[1] + num[i]]\n  else:\n    dp_even = max(dp_even + num[i], dp_odd[1])\n\nif N % 2 == 0:\n  print(dp_even)\nelse:\n  print(dp_odd[0])", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    dp_used = [[-INF] * 2 for _ in range(N + 1)]\n    dp_unused = [[-INF] * 2 for _ in range(N + 1)]\n\n    dp_used[0][1] = dp_unused[0][1] = 0\n\n    for i in range(N):\n        if i % 2 == 0:\n            dp_unused[i + 1][0] = max(dp_used[i][1], dp_unused[i][1])\n            dp_used[i + 1][0] = dp_unused[i][0] + A[i]\n            dp_used[i + 1][1] = dp_unused[i][1] + A[i]\n        else:\n            dp_unused[i + 1][0] = max(dp_unused[i][0], dp_used[i][0])\n            dp_unused[i + 1][1] = dp_used[i][1]\n            dp_used[i + 1][1] = dp_unused[i][0] + A[i]\n\n    if N % 2 == 0:\n        print((max(dp_unused[N][1], dp_used[N][1])))\n    else:\n        print((max(dp_unused[N][0], dp_used[N][0])))\n\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import collections, sys\nsys.setrecursionlimit(100005)\nN = int(input())\nA = [int(_) for _ in input().split()]\nINF = float('inf')\nmemo = collections.defaultdict(lambda: INF)\n\n\ndef c(start, res):\n    if memo[start, res] != INF:\n        return memo[start, res]\n    elif 2 * res - 1 > N - start:\n        memo[start, res] = -INF\n    elif start >= N:\n        memo[start, res] = -INF\n    elif res > 1:\n        memo[start, res] = max(A[start] + c(start + 2, res - 1),\n                               c(start + 1, res), c(start + 2, res))\n    else:\n        memo[start, res] = max(A[start], c(start + 1, res))\n    return memo[start, res]\n\n\nprint((c(0, N // 2)))\n", "import sys\n#import copy\n#import numpy as np\n#import itertools\n#import collections\n#from collections import deque\n#from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n\nsys.setrecursionlimit(10**6)\nreadline = sys.stdin.readline\n#read = sys.stdin.buffer.read\n\ninf = float('inf')\n#inf = pow(10, 10)\n\ndef main():\n    # input\n    N = int(readline())\n    A = list(map(int, readline().split()))\n\n    K = N//2\n    DP0 = [-inf] * N\n    DP1 = [-inf] * N\n    DP2 = [-inf] * N\n\n    DP2[0] = A[0]\n    DP2[1] = max(A[0], A[1])\n    DP1[:2] = [0] * 2\n    DP0[:4] = [0] * 4\n    for i in range(2, N):\n        if i%2 == 0:\n            DP2[i] = DP2[i-2] + A[i]\n            DP1[i] = max(DP2[i-1], DP1[i-2] + A[i])\n            DP0[i] = max(DP1[i-1], DP0[i-2] + A[i])\n        else:\n            DP2[i] = max(DP2[i-2] + A[i], DP2[i-1])\n            DP1[i] = max(DP1[i-1], DP1[i-2] + A[i])\n            DP0[i] = max(DP0[i-1], DP0[i-2] + A[i])\n\n    if N%2 == 0:\n        ans = DP2[N-1]\n    else:\n        ans = DP1[N-1]\n\n    #print(DP0)\n    #print(DP1)\n    #print(DP2)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\ndef resolve():\n    INF = float(\"-inf\")\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    skip = 1 + N % 2\n    # i\u756a\u76ee\u307e\u3067\u306e\u8981\u7d20\u3092\u898b\u305f\u3068\u304d\u306b\u3001\uff4a\u500b\u9078\u3070\u306a\u3044\u6642\u306e\u6700\u5927\u5024\n    dp = [[INF] * (skip + 2) for _ in range(N + 1)]\n    dp[0][0] = 0\n\n    for i in range(N):\n        for j in range(skip + 1):  # j: \u30b9\u30ad\u30c3\u30d7\u3059\u308b\u500b\u6570\n            # \u4eca\u898b\u3066\u3044\u308b\u8981\u7d20\u3092\u30b9\u30ad\u30c3\u30d7\n            dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j])\n            now = dp[i][j]\n            if (i + j) % 2 == 0:\n                now += A[i]\n            dp[i + 1][j] = max(dp[i + 1][j], now)\n\n    print(dp[N][skip])\n\n\ndef __starting_point():\n    resolve()\n__starting_point()", "n=int(input())\nl=list(map(int,input().split()))\nm=n//2\nt=n%2+2\ndp=[0]*t\nfor i in range(m):\n    for j in range(t):\n        dp[j]+=l[2*i+j]\n    for j in range(1,t):\n        dp[j]=max(dp[j],dp[j-1])\nprint(dp[-1])", "import sys\ninput=lambda :sys.stdin.readline().rstrip()\n\nn = int(input())\nA = list(map(int, input().split()))\n\nk = 1+n%2\nf_inf = float('inf')\n\ndp = [[-f_inf for _ in range(4)] for _ in range(200005)]\ndp[0][0] = 0\nfor i in range(n):\n    for j in range(k+1):\n        dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j])\n        now = dp[i][j]\n        if (i+j)%2 == 0: now += A[i]\n        dp[i+1][j] = max(dp[i+1][j], now)\n\nans = dp[n][k]\nprint(ans)", "# coding: utf-8\n#import numpy as np\ninf = float('inf')\n\ndef main():\n    # input\n    N = int(input())\n    A = [0] + list(map(int, input().split()))\n#    N = 2*10**5-1\n#    A = [0] + np.random.randint(-10**9, 10**9, 2*10**5-1).tolist()\n\n    dp1 = [-inf] * (N+1)\n    dp2 = [-inf] * (N+1)\n    dp1[1] = 0\n    dp2[1] = 0\n    dp1[2] = A[1]\n    dp2[2] = A[2]\n    for i in range(3, N+1):\n        if i%2 == 0:\n            dp1[i] = dp1[i-2] + A[i-1]\n            dp2[i] = max(dp2[i-2] + A[i], dp1[i-2] + A[i])\n        else:\n            dp1[i] = max(dp2[i-1], dp1[i-2]+A[i-1])\n            dp2[i] = max(dp2[i-2] + A[i], dp1[i-2] + A[i])\n\n    if N % 2 == 0:\n        ans = max([dp1[N], dp2[N]])\n    else:\n        ans = max(dp1[-2:] + dp2[-2:])\n\n    # print(DP0)\n    # print(DP1)\n    # print(DP2)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\nimport numpy as np\ndp=np.full((3,n+1),-pow(10,15))\ndp[:,0]=0\ndp[1,1]=a[0]\nfor i in range(2,n+1):\n    #l,r=max(1,n//2-(n-i+1)//2),(i+1)//2+1\n    l,r=max(1,i//2-1),(i+1)//2+1\n    if i%3==2:\n        now,pre,prepre=2,1,0\n    elif i%3==0:\n        now,pre,prepre=0,2,1\n    elif i%3==1:\n        now,pre,prepre=1,0,2\n    dp[now,l:r]=np.maximum(dp[pre,l:r],dp[prepre,l-1:r-1]+a[i-1])\nprint(dp[now,n//2])", "n = int(input())\nA = list(map(int,input().split()))\nif n%2==0:\n    ans1=A[0];ans2=A[1]\n    for i in range((n-2)//2):\n        ans2 = max(ans1,ans2)+A[(i+1)*2+1]\n        ans1 = ans1++A[(i+1)*2]\n    print(max([ans1,ans2]))\n\nelse:\n    ans1,ans2,ans3,=A[0],A[1],A[2]\n    for i in range((n-2)//2):\n        ans3 = max(ans3,ans2) + A[(i+2)*2]\n        ans2 = max(ans1,ans2) + A[(i+2)*2-1]\n        ans1 = ans1 + A[(i+1)*2]\n    print(max([ans1,ans2,ans3]))", "N = int(input())\nA = list(map(int, input().split()))\ndp = [[-10**20 for i in range(3)] for j in range(N+1)]\ndp[0][1] = 0\ndp[1][1] = 0\ndp[1][2] = A[0]\n\nfor i in range(1, N):\n    if i % 2 == 0:\n        dp[i+1][0] = max(dp[i-1][0]+A[i], dp[i][0])\n        dp[i+1][1] = max(dp[i-1][1]+A[i], dp[i][1])\n        dp[i+1][2] = dp[i-1][2]+A[i]\n    else:\n        dp[i+1][0] = max(dp[i-1][0]+A[i], dp[i][1])\n        dp[i+1][1] = max(dp[i-1][1]+A[i], dp[i][2])\n        dp[i+1][2] = dp[i-1][2]+A[i]\nans = dp[N][1]\nprint(ans)", "from collections import defaultdict\n\nN = int(input())\n*A, = list(map(int, input().split()))\nINF = 10**20\ndp = defaultdict(lambda :-INF)\ndp[(0,0,0)] = 0\n\nfor i in range(1, N+1):\n    for j in range(i//2-1, i//2+2):\n        dp[1,i,j] = dp[0,i-1,j-1]+A[i-1]\n        dp[0,i,j] = max(dp[1,i-1,j], dp[0,i-1,j])\n\nans = max(dp[1,N,N//2], dp[0,N,N//2])\nprint(ans)\n", "N = int(input())\nA = list(map(int, input().split()))\n\nDP_odd = [0, A[0]]\nDP_even = [0, max(A[0], A[1])]\n\nfor i in range(2, N):\n    if (i + 1) % 2 == 1:    \n        DP_odd = [max(DP_odd[0] + A[i], DP_even[1]), DP_odd[1] + A[i]]\n    else:\n        DP_even = [max(DP_even[0] + A[i], DP_odd[0]), max(DP_even[1] + A[i], DP_odd[1])]\n\nif N % 2 == 1:\n    ans = DP_odd[0]\nelse:\n    ans = DP_even[1]\n\nprint(ans)", "N = int(input())\nA = list(map(int,input().split()))\nodds_or_even = N%2+2\ninf = -float(\"inf\")\ndp = [[inf for _ in range(N+1)] for _ in range(odds_or_even)]\ndp[0][0] = 0\nfor i in range(N):\n    dp[0][i+1] = dp[0][i]+A[i]*((i+1)%2)\nfor j in range(1,odds_or_even):\n    for i in range(N):\n        dp[j][i+1] = max(dp[j-1][i],dp[j][i]+A[i]*((i+j+1)%2))\n\nprint(dp[odds_or_even-1][N])", "n = int(input())\na = [int(i) for i in input().split()]\nk = 1 + n%2\ndp = [[-float('inf')] * (k + 2) for i in range(n + 1)]\ndp[0][0] = 0\nfor i in range(n):\n    for j in range(k + 1):\n        dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j])\n        now = dp[i][j]\n        if (i + j) % 2 == 0:\n            now += a[i]\n        dp[i + 1][j] = max(dp[i + 1][j], now)\nprint(dp[n][k])", "N = int(input())\nK = N % 2 + 1\nA = tuple(map(int, input().split()))\ntable = [[-float(\"inf\")] * (K + 2) for _ in range(N + 1)]\ntable[0][0] = 0\nfor i in range(N):\n    for j in range(K + 1):\n        table[i + 1][j] = max(table[i][j] + (A[i] if not (i + j) % 2 else 0), table[i + 1][j])\n        table[i + 1][j + 1] = max(table[i][j], table[i + 1][j + 1])\nprint((table[N][K]))\n", "# F - Select Half\nN = int(input())\nA = list(map(int,input().split()))\n\nif N%2==0:\n    rec = [[0]*N for _ in range(2)]\n    rec[0][0] = A[0]\n    rec[1][1] = A[1]\n    for i in range(2,N):\n        rec[0][i] = rec[0][i-2]+A[i]\n        rec[1][i] = max(rec[0][i-3],rec[1][i-2])+A[i]\n    ans = max(rec[0][N-2],rec[1][N-1])\nelse:\n    rec = [[0]*N for _ in range(3)]\n    rec[0][0] = A[0]\n    rec[1][1] = A[1]\n    rec[0][2] = A[0]+A[2]\n    rec[2][2] = A[2]\n    for i in range(3,N):\n        rec[0][i] = rec[0][i-2]+A[i]\n        rec[1][i] = max(rec[0][i-3],rec[1][i-2])+A[i]\n        rec[2][i] = max(rec[0][i-4],rec[1][i-3],rec[2][i-2])+A[i]\n    ans = max(rec[0][N-3],rec[1][N-2],rec[2][N-1])\n    \nprint(ans)", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[[-float(\"inf\")]*2 for j in range(3)] for i in range(n+1)]\n    #dp[index][i//2+j\u500b\u9078\u3093\u3060][\u76f4\u524d\u306e\u5024\u3092\u63a1\u7528\u3057\u305f\u304b\u5426\u304b]\n    dp[0][0][0] = 0\n    for i in range(n):\n        x = a[i]\n        if i%2 == 0:\n            for j in range(-1, 2):\n                dp[i+1][j][0] = max(dp[i][j][0], dp[i][j][1])\n            for j in range(-1, 1):\n                dp[i+1][j+1][1] = dp[i][j][0] + x\n        else:\n            for j in range(-1, 1):\n                dp[i+1][j][0] = max(dp[i][j+1][0], dp[i][j+1][1])\n            for j in range(-1, 2):\n                dp[i+1][j][1] = dp[i][j][0] + x\n    print(max(dp[n][0][0], dp[n][0][1]))\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\n\nINF = float(\"inf\")\n\nN, *A = map(int, open(0).read().split())\n\ndp_in = defaultdict(lambda: -INF)\n\ndp_out = defaultdict(lambda: -INF)\ndp_out[(0, 0)] = 0\n\nfor i, a in enumerate(A, 1):\n    p = i // 2\n    for j in [p - 1, p, p + 1]:\n        dp_in[(i, j)] = a + dp_out[(i - 1, j - 1)]\n        dp_out[(i, j)] = max(dp_in[(i - 1, j)], dp_out[(i - 1, j)])\n\nprint(max(dp_in[(N, N // 2)], dp_out[(N, N // 2)]))", "from collections import defaultdict\nn = int(input())\nA = list(map(int, input().split()))\nm = n//2\nINF = 10**18\ndp = [defaultdict(lambda: -INF) for _ in range(n+1)]\nfor i in range(1, n+1):\n    for j in range(i//2-1, (i+1)//2+1):\n        if j == 1:\n            dp[i][j] = max(dp[i-1][j], A[i-1])\n        elif 0 <= i-2 and 0 <= j <= m:\n            dp[i][j] = max(dp[i-1][j], dp[i-2][j-1]+A[i-1])\nprint(dp[-1][m])", "def main():\n    from functools import lru_cache\n    import sys\n\n    sys.setrecursionlimit(10 ** 7)\n\n    inf = 2 * 10 ** 14 + 1\n\n    N = int(input())\n    *a, = list(map(int, input().split()))\n\n    @lru_cache(maxsize=None)\n    def recursion(cur, need):\n        \"\"\"\n        cur: pickable\u306aindex\n        \"\"\"\n        if cur >= N:\n            if need == 0:\n                return 0\n            else:\n                return -inf\n\n        rest = N - cur\n        if (rest + 1) // 2 < need:\n            return -inf\n\n        return max(\n            a[cur] + recursion(cur + 2, need - 1),\n            recursion(cur + 1, need)\n        )\n\n    ans = recursion(0, N // 2)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\nimport itertools\n\nN = int(input())\nA = list(map(int, input().split()))\n\nif N%2==0:\n    left = np.cumsum([0]+A[::2])\n    right = np.cumsum([0]+A[::-2])[::-1]\n    ans = max(left+right)\nelse:\n    left = np.cumsum([0] + A[:-1:2])\n    mid_left = np.cumsum([0]+A[-2::-2])[::-1]\n    mid_right = np.cumsum([0]+A[1::2])\n    right = np.cumsum([0] + A[:1:-2])[::-1]\n\n    left_sum = left+mid_left\n    left_max = np.zeros(N//2+1, dtype=int)\n    left_max[0] = left_sum[0]\n    for i in range(1, N//2+1):\n        left_max[i] = max(left_max[i-1], left_sum[i])\n    left_max -= mid_left\n\n    right_sum = right + mid_right\n    right_max = np.zeros(N//2 + 1, dtype=int)\n    right_max[-1] = right_sum[-1]\n    for i in range(N//2-1, -1, -1):\n        right_max[i] = max(right_max[i + 1], right_sum[i])\n    right_max -= mid_right\n\n    ans = max(left_max+right_max)\n\n\nprint(ans)\n", "import sys\ninput=sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nm=n//2\nif n%2==0:\n    dp=[[-10**18]*2 for _ in range(m)]\n    dp[0][0]=a[0]\n    dp[0][1]=a[1]\n    for i in range(1,m):\n        for j in range(2*i,2*(i+1)):\n            for k in range(2*(i-1),2*i):\n                if j-k>1:\n                    dp[i][j%2]=max(dp[i][j%2],dp[i-1][k%2]+a[j])\nelse:\n    dp=[[-10**18]*3 for _ in range(m)]\n    dp[0][0]=a[0]\n    dp[0][1]=a[1]\n    dp[0][2]=a[2]\n    for i in range(1,m):\n        for j in range(2*i,2*(i+1)+1):\n            for k in range(2*(i-1),2*i+1):\n                if j-k>1:\n                    dp[i][j-2*i]=max(dp[i][j-2*i],dp[i-1][k-2*(i-1)]+a[j])\nprint(max(dp[-1]))", "def get_next_unchosen(current , chooseNum):\n    if (chooseNum , 0) in current or (chooseNum , 1) in current:\n        if (chooseNum , 0) in current and (chooseNum ,1) in current:\n            return max(current[(chooseNum, 0)] , current[(chooseNum, 1)])\n        if (chooseNum , 0) in current:\n            return current[(chooseNum , 0)]\n        return current[(chooseNum,1)]\n    return None\n\n\ndef calc_next_state(current, must_choose_num, a):\n    next = {}\n    current_unchosen_nums = [choose_num  for (choose_num, prev_chosen) in list(current.keys()) if prev_chosen == 0 and choose_num >= must_choose_num - 1]\n    for chooseNum in current_unchosen_nums:\n        next[(chooseNum + 1, 1)] = current[(chooseNum , 0)] + a\n    for chooseNum in range(must_choose_num, N):\n        n = get_next_unchosen(current, chooseNum)\n        if n is None:\n            break\n        else:\n            next[(chooseNum , 0)] = n\n    return next\n\n\nN = int(input())\nA = [int(x) for x in input().split()]\n\ntotalChooseNum = N // 2\ndp = {(0, 0) : 0}\nfor i in range(0, N):\n    ai = A[i]\n    canChooseNum = (N - i + 1) // 2\n    mustChooseNum = max(totalChooseNum - canChooseNum, 0)\n    dp = calc_next_state(dp, mustChooseNum, ai)\n\nresult = max(dp[(totalChooseNum, 0)] , dp[(totalChooseNum , 1)])\nprint(result)\n", "from collections import defaultdict\n\ndef main():\n    INF = float(\"inf\")\n\n    N, *A = map(int, open(0).read().split())\n\n    dp_in = defaultdict(lambda: -INF)\n\n    dp_out = defaultdict(lambda: -INF)\n    dp_out[(0, 0)] = 0\n\n    for i, a in enumerate(A, 1):\n        p = i // 2\n        for j in [p - 1, p, p + 1]:\n            dp_in[(i, j)] = a + dp_out[(i - 1, j - 1)]\n            dp_out[(i, j)] = max(dp_in[(i - 1, j)], dp_out[(i - 1, j)])\n\n    print(max(dp_in[(N, N // 2)], dp_out[(N, N // 2)]))\n\nmain()", "n = int(input())\na = list(map(int, input().split()))\n\n# dp[i][k] \u5217i\u3092\u9078\u629e\u3057\u3001k\u500b\u6301\u3063\u3066\u3044\u308b\u3068\u304d\u306e\u6700\u5927\u5024\n# k\u306f(i-1)//2 or i//2 or (i+1)//2\n# \u305d\u308c\u305e\u308cki=0,1,2\u3068\u3059\u308b\u3002\n# \u6700\u5927\u3067\u30824\u30de\u30b9\u524d\u307e\u3067(oxxxo)\n# i\u304c\u5947\u6570\n# dp[i+2][0]=Ai + max(dp[i][0], dp[i][1], dp[i-1][1],  dp[i-2][2])\n# dp[i+2][1]=dp[i+2][0]\n# dp[i+2][2]=Ai + max(dp[i][2])\n# i\u304c\u5076\u6570\n# dp[i+2][0]=0\n# dp[i+2][1]=Ai + max(dp[i][1], dp[i][2], dp[i-1][2])\n# dp[i+2][2]=dp[i+2][1]\n\ndp = [[0 for i in range(3)] for j in range(n)]\nans = 0\n\ndp[0][2] = a[0]\nans = dp[0][2]\ndp[1][0] = 0\ndp[1][1] = a[1]\ndp[1][2] = a[1]\nans = max([ans, dp[1][1]])\n\nif n == 2:\n    print(ans)\nelse:\n    for i in range(2, n):\n        if (i + 1) % 2 == 0:\n            dp[i][0] = 0\n            dp[i][1] = a[i] + max(dp[i - 2][1], dp[i - 3][2])\n            dp[i][2] = dp[i][1]\n        else:\n            if i > 2:\n                dp[i][0] = a[i] + max(dp[i - 2][0], dp[i - 3][1], dp[i - 4][2])\n            else:\n                dp[i][0] = a[i] + dp[i - 2][0]\n            dp[i][1] = dp[i][0]\n            dp[i][2] = a[i] + dp[i - 2][2]\n        \n    if n % 2 == 0:\n        print(max(dp[-1][1],dp[-2][2]))\n    else:\n        print(max(dp[-1][0],dp[-2][1],dp[-3][2]))", "from collections import defaultdict\n\nN = int(input())\nA = list(map(int,input().split()))\n\nDP = defaultdict(lambda: -10**18)\n\nDP[(0,0)] = A[0]\n\nfor i in range(1,N):\n    for j in range((i+1)//2-1,(i+2)//2):\n        if j == 0:\n            DP[(i,0)] = max(DP[(i-1,0)],A[i])\n        else:\n            DP[(i,j)] = max(DP[(i-1,j)],DP[(i-2,j-1)]+A[i])\n\nprint((DP[(N-1,N//2-1)]))\n", "from collections import defaultdict\nn=int(input())\na=[int(i) for i in input().split()]\nINF=float('inf')\ndp0=defaultdict(lambda: -INF)\ndp1=defaultdict(lambda: -INF)\ndp0[(0,0)]=0\nfor i in range(1,n+1):\n  for j in range(i//2-1,(i+1)//2+1):\n    dp0[(i,j)]=max(dp0[(i-1,j)],dp1[(i-1,j)])\n    dp1[(i,j)]=dp0[(i-1,j-1)]+a[i-1]\nprint(max(dp0[(n,n//2)],dp1[(n,n//2)]))", "P,M,A,I=input,max,int,-10**9\nn,a=A(P()),list(map(A,P().split()))\nx,y,z=0,I,I\nfor i,L in enumerate(a):\n if i%2:z=M(y,z);y+=L\n else:y=M(x,y);x+=L;z+=L\nprint(M(y,z)if n%2else M(x,y))", "N = int(input())\nA = list(map(int,input().split()))\n\nDP = [0,0,0]\nm = N//2*2\nif N%2 == 0:\n    for i in range(0,m,2):\n        DP[0] += A[i]\n        DP[1] += A[i+1]\n        DP[1] = max(DP[0],DP[1])\n\n    print((DP[1]))\n\nelse:\n    for i in range(0,m,2):\n        DP[0] += A[i]\n        DP[1] += A[i+1]\n        DP[2] += A[i+2]\n\n        DP[1] = max(DP[0],DP[1])\n        DP[2] = max(DP[1],DP[2])\n\n    print((DP[2]))\n"]