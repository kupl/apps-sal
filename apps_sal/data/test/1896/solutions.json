["n = int(input())\nprint(3*n*(n+1)+1)", "n=int(input())\nprint((3*n*n)+3*n+1)\n", "n = int(input())\nprint(1 + 6 * n * (n + 1) // 2)\n", "n = int(input())\nprint(3*n*(n+1) + 1)\n", "n = int(input())\nres = 1\nres += ((12 + 6 * (n - 1)) * n) // 2\nprint(res)", "n = int(input())\nprint(1 + 6 * n * (n + 1) //2)\n", "n = int(input())\nprint(n*(n+1)//2*6+1)", "n = int(input())\nsum = n * (n + 1) // 2\nans = sum * 6 + 1\nprint(ans)", "n = int(input())\nprint(3 * n * (n + 1) + 1)\n", "n = int(input())\nprint(6 * (n * (n + 1) // 2) + 1)\n", "import re, sys, string, operator, functools, fractions, collections\nsys.setrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda x=' ': list(map(int,input().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\nmod=int(1e9+7)\neps=1e-6\n#################################################\nn=RI()[0]\nprint(3*n*(n+1) + 1)\n\n\n\n\n\n", "c = 0\nn = int(input())\nprint(6 * (n * (n + 1) // 2) + 1)\n", "3\n\nn = int(input())\n\nans = 3*n*(n+1)+1\n\nprint(str(ans))\n", "x = int(input())\n#x, y = map(int, input().split())\n\nprint((1+x)*x*3+1)", "n = int(input())\nprint(1 + 3 * n * (n + 1))", "n=int(input())\nprint((n+1)*(n+2)*3-6*(n+1)+1)\n", "n=int(input())\nprint(3*n*(n+1) + 1)\n\n\n\n", "n = int(input())\nprint(3*(n+1)*n+1)\n", "def __starting_point():\n\n    n = int(input())\n\n    if n == 0:\n        print(1)\n    else:\n        print(1+3*n*(n+1))\n__starting_point()", "n = int(input())\nprint(int((6*n+6)*n//2+1))\n", "n = int(input())\nprint(3 * n * (n + 1) + 1)", "def s(n):\n    a1 = 0\n    n += 1\n    d = 6\n    an = a1 + d * (n - 1)\n    return (a1 + an) // 2 * n\n\nprint(s(int(input())) + 1)\n", "n = int(input())\nprint(n * (n + 1) * 3 + 1)", "n=int(input())\ns=6*((n*(n+1))//2)+1\nprint(s)"]