["from fractions import gcd\n\nt,w,b = map(int,input().split())\nper = w*b//gcd(w,b)\ncan = (t//per+1)*min(w,b)-1\nif t%per<min(w,b):\n    can-=min(w,b)\n    can+=t%per+1\ng = gcd(can,t)\ncan//=g\nt//=g\nprint(str(can)+\"/\"+str(t))", "\nfrom fractions import gcd\na, b, c = list(map(int, input().split(' ')))\nl = b * c // gcd(b, c)\nb, c = min(b, c), max(b, c)\n\n## 0...b-1 ##\nmults = a // l\nrem = a - l * mults + 1\n\nnum = mults * (b)\nrem = min(b, rem)\nx = num + rem - 1\n\ng = gcd(x, a)\nprint(str(x//g) + '/' + str(a//g))\n", "def gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b,a%b)\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\nt,w,b = map(int,input().split())\nlc = lcm(w,b)\nmn = 0\nif w > b:\n    mn = b\nelse:\n    mn = w\nans = mn*(t//lc+1)-1\nval = (t//lc)*lc + mn - 1\nif t - val < 0:\n    ans += t-val\ng = gcd(ans,t)\nans //= g\nt //= g\nprint(ans,end=\"\")\nprint(\"/\",end=\"\")\nprint(t)", "from fractions import gcd\n\nt, w, b = map(int, input().split())\nmn = min(w, b)\nnk = w // gcd(w, b) * b\nfirst = (t  + 1) // nk * mn - 1\ne = first + min(mn, (t + 1) % nk)\nnd = gcd(e, t)\nprint(e // nd, \"/\", t // nd, sep = \"\")\n", "from fractions import gcd\n\nt, w, b = map(int, input().split())\nnok = w * b // gcd(w, b)\nans = (t // nok) * min(w, b) + min(w - 1, b - 1, t % nok)\nans, t = ans // gcd(ans, t), t // gcd(ans, t)\nprint (ans, t, sep = \"/\")\n", "def gcd(a, b):\n    while (b > 0):\n        a, b = b, a % b\n    return a\n\ninp = [int(i) for i in input().split(' ')]\nt = inp[0]\nw = inp[1]\nb = inp[2]\nnok = w * b // gcd(w, b)\nans = t // nok * min(w, b) - 1\ntmp = t % nok\nans += min(tmp + 1, min(w, b))\ng = gcd(ans, t)\nprint(ans // g, t // g, sep='/')\n", "import math\nimport sys\n\ndef Cmmdc(a, b):\n\tr = 0\n\twhile b > 0:\n\t\tr = a % b\n\t\ta = b\n\t\tb = r\n\treturn a\n\nlst = list(map(int, input().split()))\n\nt = auxT = lst[0]\nn = lst[1]\nm = lst[2]\n\nif n > m:\n\taux = n\n\tn = m\n\tm = aux\n\ncmmdc = Cmmdc(n, m)\ncmmmc = n * m // cmmdc\n\nfav = (t // cmmmc) * n\nt = t % cmmmc\nfav += min(n - 1, t)\n\nt = auxT\nc = Cmmdc(fav, t)\nfav //= c\nt //= c\n\nprint(str(fav) + \"/\" + str(t) + \"\\n\")\n", "import sys\nfrom math import *\nsys.setrecursionlimit(100000000)\n\ndef pgcd(a,b):\n    while b!=0:\n        a,b=b,a%b\n    return a\n\ndef ppcm(a,b):\n    if (a==0) or (b==0):\n        return 0\n    else:\n        return (a*b)//pgcd(a,b)\n\nt,w,b=map(int,input().split())\na=ppcm(w,b)\nx=min(w,b)\ny=t//a\nv=x*y+min(x,t%a+1)-1\n\nw=pgcd(v,t)\nif v==0:print(\"0/1\")\nelse:\n\tprint(v//w,end=\"\")\n\tprint(\"/\",end=\"\")\n\tprint(t//w)", "t, w, b = list(map(int, input().split()))\n\n\ndef NOK(a, b):\n    m = a*b\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return m // (a+b)\n\ndef NOD(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return (a+b)\n\n\nif w == 1 or b == 1:\n    res = t // max (w, b)\nelse:\n    k = NOK(w, b)\n    ost = max(0, min(w, b) - 1 - t % k)\n    res = (t // k + 1) * min(w,b) - 1 - ost\n\nm = NOD(t, res)\n\nprint(str(res // m) + '/' + str(t // m))\n", "def gcd(a,b):\n    if b == 0: return a\n    return gcd(b, a%b)\n\ndef lcm(a,b):\n    return a//gcd(a,b)*b\n\nt,w,b = map(int,input().split())\np = min(w,b)\nlc = lcm(w,b)\nkol = t//lc\nret = kol*p\nzv = t%lc\nret += min(zv, p-1)\ng = gcd(ret, t)\nret//=g\nt//=g\nprint(ret,'/',t,sep=\"\")\n", "l, n, m = map(int, input().split())\nfrom fractions import gcd\nlcm = lambda x, y: x // gcd(x,y) * y\nu = lcm(n,m)\nv = min(n,m)\na = (l//u) * v + min(v, l%u+1) - 1    \nprint(a//gcd(a,l),'/',l//gcd(a,l),sep='')\n\n", "#!/usr/bin/env python3\nimport math\nt, a, b = list(map(int,input().split()))\nl= a * b // math.gcd(a,b)\np = (t // l) * min(a,b) + min(t % l, min(a,b) - 1)\nq = t\nr = math.gcd(p, q)\nprint('{}/{}'.format(p//r, q//r))\n", "#!/usr/bin/env python3\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef main():\n    L, a, b = list(map(int, input().split()))\n    c = a // gcd(a, b) * b\n    m = min(a, b)\n    if c <= m:\n        print('1/1')\n    else:\n        p = L // c * m\n        p += min(L % c, m - 1)\n        g = gcd(p, L)\n        print('%d/%d' % (p // g, L // g))\n\nmain()", "def gcd (a, b) :\n\twhile (b) :\n\t\ta %= b\n\t\ta, b = b, a\n\treturn a;\n\n\nt, w, b = map(int, input().split())\ng = w * b // gcd(w, b)\nres = 0\nminh = min(w, b)\nres += (t // g + 1) * minh - 1\ncorrect = (t // g) * g + minh - 1\nif (correct > t) :\n\tres -= correct - t\ny = gcd(res, t)\nprint(res // y, \"/\", t // y, sep = \"\")", "from fractions import gcd\n\nt, a, b = map(int, input().split())\n\nif a > b:\n    a, b = b, a\n\nlcm = a * b // gcd(a, b)\ncnt = t // lcm\nlst = lcm * cnt\n\nans = cnt * a + a - 1 \n\nif lst + a > t + 1:\n    ans -= lst + a - t - 1\n\nnum = ans\nden = t\n\ng = gcd(num, den)\nnum //= g\nden //= g\n\nprint(num, den, sep='/')\n\n", "from fractions import gcd\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\n\ndef __starting_point():\n    t, w, b = list(map(int, input().split()))\n\n    l = lcm(w, b)\n    m = min(w, b)\n\n    count = t // l\n    result = count * m\n    result += (m - 1) # 1 to m-1\n\n    diff = max(count*l + m - t - 1, 0)\n    result -= diff\n\n    g = gcd(result, t)\n\n    print('{}/{}'.format(result//g, t//g))\n\n\n\n__starting_point()", "t, w, b = map(int, input().split())\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\nadd = min(w, b) - 1\nl = lcm(w, b)\n\ncnt = t // l\n\nans = add + cnt + cnt * add\nans -= max(0, l * cnt + add - t)\n\ng = gcd(ans, t)\nif g != 0:\n    ans //= g\n    t //= g\n\nprint(ans, end='')\nprint('/', end='')\nprint(t)\n", "3\n\ndef gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\treturn gcd(b, a%b)\n\nx = input()\nx = [int(_) for _ in x.split()]\n# print(x)\n\nt = x[0]\nw = x[1]\nb = x[2]\n\nx = gcd(w, b)\nk = min(w,b)\n\nlcm = (w*b)//x\n\nalpha = t//lcm\n\nans = alpha*(k)\n\nl = alpha*lcm + k- 1\n\nif l <= t :\n\tans += k\nelse:\n\tans += t - (alpha*lcm) + 1\n\nans -= 1\n\ngg = gcd(ans, t)\nans = ans//gg\nt = t//gg\n\nprint(str(ans)+\"/\"+str(t))", "# your code goes here\n\n[t, w, b] = [int(x) for x in input().split()]\n\ndef gcd(a, b):\n    if (b==0):\n        return a\n    else:\n        return gcd(b, a%b)\n\nd = w*b // gcd(w, b)\nm = min(w, b)\n\ndint = t // d\n\ncount = m * dint\n\ncount += m - 1\n    \nd = dint * d + m - 1\n\nif (d > t):\n    count -= (d - t)\n\ngcdtcnt = gcd(t, count)\nt = t // gcdtcnt\ncount = count // gcdtcnt\n\nprint(count, '/', t, sep='')", "#! /usr/bin/python\n\nfrom fractions import gcd\n\nt, w, b = list(map(int, input().split()))\n\nif w == b:\n    print('1/1')\nelse:\n    wb = w * b // gcd(w, b)\n    m = min(w, b)\n    n = t // wb * m - 1 + min(t % wb + 1, m)\n    g = gcd(n, t)\n    print(\"%d/%d\" % (n // g, t // g))\n", "t, a, b = list(map(int, input().split()))\n\ndef gcd(a, b):\n    if (b == 0):\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\nl = lcm(a, b)\nlast = t // l * l\nans = t // l * min(a, b)\nans += min(a, b, t - last + 1)\nans -= 1\ng = gcd(ans, t)\nans //= g\nt //= g\nans = str(ans) + '/' + str(t)\nprint(ans)\n\n", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\n\nt, w, b = [int(i) for i in input().split()]\nmi = min(w, b)\nlcm = w * b // gcd(w, b)\n\np = t // lcm * mi + min(mi - 1, t % lcm)\nq = t\nprint(\"{0}/{1}\".format(p // gcd(p, q), q // gcd(p, q)))", "t, w, b = list(map(int, input().split()))\n\ndef gcd(x, y):\n    while (x != 0 and y != 0):\n        if (x < y):\n            x, y = y, x\n        x %= y\n    return x + y;\n\nans = (t // (w * b // gcd(w, b)) - 1) * min(w, b)\nans += min(t - (t // (w * b // gcd(w, b))) * (w * b // gcd(w, b)) + 1, min(b, w))\nans += min(w, b) - 1;\nprint(ans // gcd(ans, t), end = \"/\")\nprint(t // gcd(ans, t))", "from fractions import gcd\ns = list(map(int, input().split()))\nt = s[0]\na = s[1]\nb = s[2]\nnod = gcd(a, b)\nnok = a * b // nod\nans = t // nok * min(a, b) + min(a, b) - 1\nans -= max(0, ((t // nok) * nok) + min(a, b) - 1 - t)\ngc = gcd(ans, t)\nans //= gc\nt //= gc\nprint(str(int(ans)) + '/' + str(int(t)))", "from fractions import gcd\nt, w, b = list(map(int, input().split()))\nif w > b:\n    w, b = b, w\nl = w * b // gcd(w, b)\nc = t // l\nans = c * w + (min((t + 1) - l * c, w)) - 1\ng = gcd(ans, t)\nprint('{}/{}'.format(ans // g, t // g))\n"]