["t1  = map(int,input().strip())\nt2 = map(int,input().strip())\nar1 = [0] * 10\nar2  = [0]*10\nfor j in t1:\n    ar1[j]+=1\nfor j in t2:\n    ar2[j]+=1\nar1[2]+=ar1[5]\nar1[6]+=ar1[9]\nar1[5]=ar1[9]=0\nar2[2]+=ar2[5]\nar2[6]+=ar2[9]\nar2[5]=ar2[9]=0\nprint(int(min(map(lambda x:ar2[x]/ar1[x] if ar1[x]!=0 else 100500 ,range(10)))))", "t = input().replace('5', '2').replace('9', '6')\ns = input().replace('5', '2').replace('9', '6')\n\nres = 10 ** 100\n\nfor i in t:\n    res = min(res, s.count(i) // t.count(i))\nprint(res)\n", "t=input()\ns=input()\ns=list(s)\n\nn=len(s)\n\ncopies=0\nx=t.count('6')+t.count('9')\ny=s.count('6')+s.count('9')\na=t.count('2')+t.count('5')\nb=s.count('2')+s.count('5')\nif(x==0 and a==0):\n    copies=100\nelif(x==0):\n    copies=b//a\nelif(a==0):\n    copies=y//x\nelse:\n    copies=min(y//x,b//a)\n\nfor j in range(0,10):\n    i=str(j)\n    if(i=='6' or i=='9' or i=='2' or i=='5'):\n        continue\n    x=t.count(i)\n    if(x==0):\n        continue\n    y=s.count(i)\n    copies=min(copies,y//x)\n\nprint(copies)\n", "import sys\n\n\nt = int(sys.stdin.readline().strip())\ncubes = [int(c) for c in list(sys.stdin.readline().strip())]\n\n\ndef flip(d):\n    if d == 6:\n        return 9\n    elif d == 9:\n        return 6\n    elif d == 2:\n        return 5\n    elif d == 5:\n        return 2\n\ndef build(t, cubes):\n    for d in str(t):\n        d = int(d)\n        df = flip(d)\n\n        if d in cubes:\n            cubes.remove(d)\n        elif df in cubes:\n            cubes.remove(df)\n        else:\n            return False, cubes\n\n    return True, cubes\n\n\ni = 0\n\nwhile True:\n    ok, cubes = build(t, cubes)\n\n    if ok:\n        i += 1\n    else:\n        break\n\nprint(i)\n", "favornumb={'0':0, '1':0, '2':0,\n           '3':0, '4':0, '6':0,\n           '7':0, '8':0}\nmass={'0':0, '1':0, '2':0,\n      '3':0, '4':0, '6':0,\n      '7':0, '8':0}\nfor i in input():\n    if i=='2' or i=='5': favornumb['2']+=1\n    elif i=='6' or i=='9': favornumb['6']+=1\n    else: favornumb[i]+=1\nfor i in input():\n    if i=='2' or i=='5': mass['2']+=1\n    elif i=='6' or i=='9': mass['6']+=1\n    else: mass[i]+=1\nans=200\nfor i in ['0', '1', '2', '3', '4', '6', '7', '8']:\n    if favornumb[i]==0: continue\n    else:\n        pretend=int(mass[i]/favornumb[i])\n        if pretend<=ans: ans=pretend\nprint(ans)", "import sys\n\ndef solve():\n    first = list(input())\n    second = list(input())\n    first = map(int, first)\n    second = map(int, second)\n    count = [0] * 10\n    for i in first:\n        count[m(i)]+=1\n    total = [0] * 10\n    for i in second:\n        total[m(i)]+=1\n    res = 0\n    while True:\n        for i in range(10):\n            total[i] -= count[i]\n        for i in range(10):\n            if total[i] < 0:\n                return res\n        res+=1\n    return res\n\ndef m(c):\n    if c == 9: return 6\n    if c == 5: return 2\n    return c\n\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nprint(solve())", "req_arr = [int(x) for x in input().strip()]\narr = [int(x) for x in input().strip()]\nrequired_list = [0]*10\nnum_list = [0]*10\nfor i in req_arr:\n    if i == 5:\n        required_list[2] += 1\n    elif i == 9:\n        required_list[6] += 1\n    else:\n        required_list[i] += 1\n\nfor i in arr:\n    if i == 5:\n        num_list[2] += 1\n    elif i == 9:\n        num_list[6] += 1\n    else:\n        num_list[i] += 1\nans = len(arr)\nfor i, j in enumerate(required_list):\n    if j > 0:\n        ans = min(ans, int(num_list[i]/j))\nprint(ans)\n", "t = input().replace('5', '2').replace('9', '6')\ns = input().replace('5', '2').replace('9', '6')\n\nres = 10 ** 100\n\nfor i in t:\n    res = min(res, s.count(i) // t.count(i))\nprint(res)", "t = input().replace('5', '2').replace('9', '6')\n\ns = input().replace('5', '2').replace('9', '6')\n\n\n\nres = 10 ** 100\n\n\n\nfor i in t:\n\n    res = min(res, s.count(i) // t.count(i))\n\nprint(res)\n\n\n\n# Made By Mostafa_Khaled\n", "t = map(int, input().strip())\ns = map(int, input().strip())\n\ndigits1 = [0] * 10 # makes a list of size 10 filled with zeros.\ndigits2 = [0] * 10\n\nfor i in t:\n    digits1[i] += 1\ndigits1[2] += digits1[5]\ndigits1[6] += digits1[9]\ndigits1[5] = digits1[9] = 0\n\nfor i in s:\n    digits2[i] += 1\ndigits2[2] += digits2[5]\ndigits2[6] += digits2[9]\ndigits2[5] = digits2[9] = 0\n\nprint(min(map(lambda x : digits2[x] // digits1[x] if digits1[x] != 0 else 999999, range(10))))", "# init\nt, a = input(), input()\n\nt, a = t.replace('5','2'), a.replace('5','2')\nt, a = t.replace('9','6'), a.replace('9','6')\n\nac = dict().fromkeys([i for i in a], 0)\nfor i in a: ac[i] += 1\n\nprint(min([ac[i]//t.count(i) for i in t]))\n\n", "num = input()\nstr = input()\nd = dict()\nused = dict()\nnum = num.replace('5', '2')\nstr = str.replace('5', '2')\nnum = num.replace('9', '6')\nstr = str.replace('9', '6')\nres = 10 ** 1000\nfor i in num:\n    res = min(res, str.count(i) // num.count(i))\nprint(res)\n", "s1=input()\ns2=input()\nn=len(s1)\nm=len(s2)\nfrom collections import Counter \nc1=Counter(s1)\nc2=Counter(s2)\nif c1['2'] and c1['5']:\n    tot=c2['2']+c2['5']\n    a=c1['2']\n    b=c1['5']\n    c=a+b\n    have2=a/c*tot \n    have5=b/c*tot \nelif c1['2'] or c1['5']:\n    have2=have5=c2['2']+c2['5']\nif c1['6'] and c1['9']:\n    tot=c2['6']+c2['9']\n    a=c1['6']\n    b=c1['9']\n    c=a+b \n    have6=a/c*tot \n    have9=b/c*tot \nelif c1['6'] or c1['9']:\n    have6=have9=c2['6']+c2['9']\nmini=10**9 \nfor i in c1.keys():\n    if i not in \"2569\" and c1[i]:\n        mini=min(mini,c2[i]//c1[i]) \nif c1['2'] :\n    mini=min(mini,have2//c1['2'])\nif c1['5']:\n    mini=min(mini,have5//c1['5'])\nif c1['6'] :\n    mini=min(mini,have6//c1['6'])\nif c1['9']:\n    mini=min(mini,have9//c1['9'])\nmini=int(mini)\nprint(mini if mini!=10**9 else 0 )", "# import numpy as np\n\ndef solution():\n    number = input()\n    book = {}\n    book_of_repeats = {}\n    for i in number:\n        intermidiate = i\n        if intermidiate == \"5\":\n            intermidiate = \"2\"\n        elif intermidiate == \"9\":\n            intermidiate = \"6\"\n        book_of_repeats[intermidiate] = 0\n        if intermidiate in book:\n            book[intermidiate] += 1\n        else:\n            book[intermidiate] = 1\n    cubs = input()\n    for i in cubs:\n        intermidiate = i\n        if intermidiate == \"5\":\n            intermidiate = \"2\"\n        elif intermidiate == \"9\":\n            intermidiate = \"6\"\n        if intermidiate in book_of_repeats:\n            book_of_repeats[intermidiate] += 1\n    result = len(cubs)//len(number)\n    for i in book:\n        intermidiate = book_of_repeats[i]//book[i]\n        if intermidiate < result:\n            result = intermidiate\n    print(result)\n\n\ndef to_mixed_frac(first, second):\n    while True:\n        for i in range(2, first + 1):\n            if first % i == 0 and second % i == 0:\n                first //= i\n                second //= i\n                break\n        else:\n            break\n    return str(first) + \"/\" + str(second)\n\n\ndef array_to_int(array):\n    for i in range(len(array)):\n        array[i] = int(array[i])\n    return array\n\n\ndef join0(array):\n    result = \"\"\n    for i in array:\n        result += str(i)\n    return result\n\n\nsolution()\n# input-output by console\n", "t=[*map(int,input())]\ns=[*map(int,input())]\nd={0:0,1:0,2:0,3:0,4:0,6:0,7:0,8:0}\ndi={0:0,1:0,2:0,3:0,4:0,6:0,7:0,8:0}\nfor i,x in enumerate(t):\n    if x==6 or x==9:d[6]+=1\n    elif x==2 or x==5:d[2]+=1\n    else:d[x]+=1\nfor i,x in enumerate(s):\n    if x==6 or x==9:di[6]+=1\n    elif x==2 or x==5:di[2]+=1\n    else:di[x]+=1\nres=10000000000000000000000000\nfor i,x in enumerate(d):\n    if d[x]>0:\n        res=min(res,di[x]//d[x])\nprint(res)", "t = int(input())\ns = input()\nq = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '6': 0, '7': 0, '8': 0}\nfor d in s:\n    if d == '5':\n        q['2'] += 1\n    elif d == '9':\n        q['6'] += 1\n    else:\n        q[d] += 1\np = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '6': 0, '7': 0, '8': 0}\nwhile t != 0:\n    d = str(t % 10)\n    if d == '5':\n        p['2'] += 1\n    elif d == '9':\n        p['6'] += 1\n    else:\n        p[d] += 1\n    t //= 10\nc = len(s)\nfor d in list(p.keys()):\n    if p[d] != 0:\n        c = min(c, q[d] // p[d])\nprint(c)\n", "from collections import defaultdict\nimport math\nt=input()\ns=input()\ntomake=defaultdict(lambda:0)\nfor i in t:\n    if(i=='5'):\n        tomake['2']+=1\n    elif(i=='9'):\n        tomake['6']+=1\n    else:\n        tomake[i]+=1\nfro=defaultdict(lambda:0)\nfor i in s:\n    if(i=='5'):\n        fro['2']+=1\n    elif(i=='9'):\n        fro['6']+=1\n    else:\n        fro[i]+=1\nans=math.inf\nfor i in list(tomake.keys()):\n    ans=min(ans,fro[i]//tomake[i])\nprint(ans)\n", "s=input()\nt=input()\na=[0]*10\nb=[0]*10 \nfor i in range(len(s)):\n    if s[i]=='5':\n        a[2]+=1 \n    elif s[i]=='9':\n        a[6]+=1 \n    else:\n        a[int(s[i])]+=1\nfor i in range(len(t)):\n    if t[i]=='5':\n        b[2]+=1 \n    elif t[i]=='9':\n        b[6]+=1 \n    else:\n        b[int(t[i])]+=1\nans=10**9        \nfor i in range(10):\n    if a[i]!=0:\n        ans=min(ans,b[i]//a[i])\nprint(ans)        \n", "from collections import defaultdict\nag=defaultdict(int)\nfor i in input():\n    if i=='9':ag['6']+=1\n    elif i=='5':ag['2']+=1\n    else:ag[i]+=1\ng=defaultdict(int)\nfor i in input():\n    if i=='9':g['6']+=1\n    elif i=='5':g['2']+=1\n    else:g[i]+=1\nans=999999999999999999\nfor i in ag:\n    ans=min(ans,g[i]//ag[i])\nprint(ans)", "a = input()\nb = input()\n\nd = {}\nfor e in b:\n    if e == '9':\n        e = '6'\n    if e == '5':\n        e = '2'\n    if e in d:\n        d[e] = d[e] + 1\n    else:\n        d[e] = 1\n\nn = {}\nfor e in a:\n    if e == '9':\n        e = '6'\n    if e == '5':\n        e = '2'\n    if e in n:\n        n[e] += 1\n    else:\n        n[e] = 1\nresult = 10000000\nfor e in n:\n    if e not in d:\n        result = 0\n        break\n    else:\n        temp_result = int(d[e] / n[e])\n        if temp_result < result:\n            result = temp_result\n            \nprint(result)\n", "def convert_string(string_list,len_string_list):\n    change_dict={}\n    change_dict['9']='6'\n    change_dict['5']='2'\n    for i in range(len_string_list):\n        if string_list[i] in change_dict:\n            string_list[i]=change_dict[string_list[i]]\n    #print(string_list)\ndef form_frequency_dict(given_list):\n    freq_dict={}\n    for i in given_list:\n        if i in freq_dict:\n            freq_dict[i]+=1\n        else:\n            freq_dict[i]=1\n    return freq_dict\ndef find_max_repititions(required_string_freq_dict,given_string_freq_dict):\n    max_repititions=201\n    for key,value in required_string_freq_dict.items():\n        if key in given_string_freq_dict:\n            max_repititions_now_possible=given_string_freq_dict[key]//required_string_freq_dict[key]\n            if(max_repititions_now_possible<max_repititions):\n                max_repititions=max_repititions_now_possible\n    if max_repititions==201:\n        max_repititions=0\n    return max_repititions\nimport sys\ninputlist=sys.stdin.readlines()\nrequired_string=list(inputlist[0].strip())\ngiven_string=list(inputlist[1].strip())\n#print(required_string,given_string)\nlen_required_string=len(required_string)\nlen_given_string=len(given_string)\nconvert_string(required_string,len_required_string)\nconvert_string(given_string,len_given_string)\n#print(required_string,given_string)\nrequired_string_freq_dict=form_frequency_dict(required_string)\ngiven_string_freq_dict=form_frequency_dict(given_string)\nmax_repititions=find_max_repititions(required_string_freq_dict,given_string_freq_dict)\nprint(max_repititions)", "def re(s):\n    t = \"\"\n    for i in s:\n        if(i == \"2\" or i == \"5\"):\n            t += \"a\"\n        elif(i == \"6\" or i == \"9\"):\n            t += \"b\"\n        else:\n            t += i\n    return t\nfrom collections import defaultdict as dd\ndef main():\n    t = re(input())\n    s = re(input())\n    req = dd(int)\n    hv = dd(int)\n    ans = 10**9\n    for i in t:\n        req[i] += 1\n    for j in s:\n        hv[j] += 1\n    for i in t:\n        ans = min(ans, hv[i] // req[i])\n    print(ans)\nmain()"]