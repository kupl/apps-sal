["import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\nclass BIT_RSQ():\n    def __init__(self, n):\n        self.n = n\n        self.data = [0]*(n+2)\n\n    def add(self, i, v):\n        while i <= self.n:\n            self.data[i] += v\n            i += i & -i\n\n    def sum(self, i):\n        ret = 0\n        while(i > 0):\n            ret += self.data[i]\n            i -= i & -i\n        return ret\n\n    def query(self, l, r):\n        return self.sum(r) - self.sum(l-1)\n\n    def lowerBound(self, w):\n        if w <= 0: return 0\n        x, k = 0, 2**self.n.bit_length()\n        while k:\n            if x+k <= self.n and self.data[x+k] < w:\n                w -= self.data[x+k]\n                x += k\n            k >>= 1\n        return x + 1\n\nn = int(input())\nedges = [0]*(2*n)\nc = [0]*(2*n)\nBIT = BIT_RSQ(2*n)\n\nuf = [-1]*n\ndef root(x):\n    if uf[x] < 0:\n        return x\n    uf[x] = root(uf[x])\n    return uf[x]\ndef unite(x,y):\n    rx, ry = root(x), root(y)\n    if rx == ry:\n        return False\n    if uf[rx] > uf[ry]:\n        rx, ry = ry, rx\n    uf[rx] += uf[ry]\n    uf[ry] = rx\n    return True\n\nfor i in range(n):\n    a,b = list(map(int, input().split()))\n    a,b = a-1,b-1\n    c[a] = c[b] = i\n    edges[a] = b\n    edges[b] = b\n\nfor i in reversed(list(range(2*n))):\n    j = edges[i]\n    if j == i:\n        BIT.add(j+1, 1)\n    else:\n        BIT.add(j+1, -1)\n        cnt = BIT.sum(j+1)\n        while cnt:\n            k = BIT.lowerBound(cnt)\n            if not unite(c[j], c[k-1]):\n                print(\"NO\")\n                return\n            cnt -= 1\nif sum(i<0 for i in uf) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n"]