["from sys import stdin, stdout\n\nn = int(stdin.readline().rstrip())\np = list(map(int,stdin.readline().rstrip().split()))\n\nif n==1:\n    print(p[0])\nelse:\n    removeDict={i:0 for i in range(1,n+1)}\n    l1 = p[0]\n    removeDict[l1]-=1\n    l2 = 0\n    for i in range(1,n):\n        if p[i]>l2:\n            if p[i]>l1:\n                l2=l1\n                l1=p[i]\n                removeDict[l1]-=1\n            else:\n                l2=p[i]\n                removeDict[l1]+=1\n    maxN = 1\n    maxRemove=-10\n    for i in range(1,n+1):\n        if removeDict[i]>maxRemove:\n            maxN = i\n            maxRemove = removeDict[i]\n    \n    print(maxN)\n", "n = int(input())\np = list(map(int, input().split()))\nantiR = [0] * n\nantiR[0] -= 1\nmymax = p[0]\nmymin = 0\nindmax = 0\nindmin = -1\nfor i in range(1, n):\n    if mymin < p[i] < mymax:\n        antiR[indmax] += 1\n        mymin = p[i]\n        indmin = i\n    elif p[i] > mymax:\n        mymin, mymax, indmax, indmin = mymax, p[i], i, indmax\n        antiR[i] -= 1\n\nm = max(antiR)\nmini = 10 ** 9\nfor i in range(n):\n    if antiR[i] == m:\n        mini = min(mini, p[i])\nprint(mini)", "from collections import defaultdict\nfrom operator import itemgetter\nn = int(input().strip())\np = list(map(int, input().strip().split()))\n\n\nml = -float('inf')\nmli = None\nms = -float('inf')\nmsi = None\n\ncount = defaultdict(int)\nisRecord = [0] * n\n\nfor i, v in enumerate(p):\n    if v > ml:\n        isRecord[i] = 1\n    if ms < v <= ml:\n        count[mli] += 1\n    if v >= ml:\n        ms, msi = ml, mli\n        ml, mli = v, i\n    elif v >= ms:\n        ms, msi = v, i\n\nnum = sum(isRecord)\nma = -float('inf')\nmai = None\nfor i in range(n):\n    v = count[i] - isRecord[i] + num\n    if v > ma:\n        ma = v\n        mai = i\n    elif v == ma and p[i] < p[mai]:\n        mai = i\n# print(count)\nprint(p[mai])", "n = int(input())\np = list(map(int, input().split(' ')))\n\nif n == 1:\n  print(n)\n  return\n\nm1 = 0\nm2 = 0\nret = 1\nmax_streak = -1\nstreak = -1\nfor i in range(n):\n  if p[i] > m1:\n    if streak > max_streak:\n      max_streak = streak\n      ret = m1\n    elif streak == max_streak and m1 > 0:\n      ret = min(ret, m1)\n    m2 = m1\n    m1 = p[i]\n    streak = -1\n  elif p[i] > m2:\n    if max_streak < 0:\n      ret = p[i]\n      max_streak = 0\n    elif max_streak == 0:\n      ret = min(ret, p[i])\n    m2 = p[i]\n    streak += 1\n  else:\n    if max_streak < 0:\n      ret = p[i]\n      max_streak = 0\n    elif max_streak == 0:\n      ret = min(ret, p[i])\n\n\nif streak > max_streak:\n  ret = m1\nelif streak == max_streak:\n  ret = min(ret, m1)\n\nprint(ret)", "n=int(input())\nc={}\nfor i in range(1,n+1):\n    c[i]=0\nmax1=0\nmax2=0\nfor i in list(map(int,input().split())):\n    if i<max1:\n        if i>max2:\n            c[max1]+=1\n            max2=i\n    else:\n        c[i]-=1\n        max1,max2=i,max1\nm=-2\nfor i in c:\n    if c[i]>m:\n        m=c[i]\n        ans=i\nprint(ans)\n\n    \n", "n = int(input())\npi = list(map(int,input().split()))\nif n == 1:\n    print(1)\nelse:\n    num = [0]*n\n    num[0] = -1\n    maxs = [0] * 4\n    maxs[0] = pi[0]\n    for i in range(1,n):\n        if pi[i] > maxs[0]:\n            maxs[2] = maxs[0]\n            maxs[3] = maxs[1]\n            maxs[0] = pi[i]\n            maxs[1] = i\n        elif pi[i] > maxs[2]:\n            maxs[2] = pi[i]\n            maxs[3] = i\n\n        if maxs[1] == i:\n            num[i] -= 1\n        if maxs[3] == i:\n            num[maxs[1]] += 1\n    max1 = num[0]\n    max2 = 0\n    for i in range(1,n):\n        if num[i] > max1:\n            max1 = num[i]\n            max2 = i\n        if num[i] == max1:\n            if pi[max2] > pi[i]:\n                max2 = i\n    print(pi[max2])\n", "import sys\nimport math\nn=int(input())\narr=list(map(int,sys.stdin.readline().split(' ')))\nl=[0 for i in range(n)]\nl[0]=-1\nif(n==1):\n    print(arr[0])\n\nelse:\n    if(arr[0]>arr[1]):\n        m1=arr[0]\n        index=0\n        m2=arr[1]\n        l[0]+=1\n        \n    elif(arr[0]<arr[1]):\n        index=1\n        m1=arr[1]\n        m2=arr[0]\n        l[1]-=1\n\n    for i in range(2,n):\n        if(arr[i]<=m1):\n            if(arr[i]>m2):\n                l[index]+=1\n                m2=arr[i]\n        else:\n            l[i]-=1\n            m2=m1\n            m1=arr[i]\n            index=i\n    mm=-10**9\n    ans=10**18\n    \n    for i in range(n):\n        if(l[i]>mm):\n            mm=l[i]\n            ans=arr[i]\n        elif(l[i]==mm):\n            ans=min(arr[i],ans)\n    print(ans)", "n=int(input().strip())\na=list(map(int,input().strip().split()))\nisit=[0]*(n+1)\nisit[a[0]]=1\nfreq=[0]*(n+1)\nm1=[0]*n\nm2=[0]*n\nm1[0]=a[0]\nfor i in range (1,n):\n    if m1[i-1]<a[i]:\n        m1[i]=a[i]\n        m2[i]=m1[i-1]\n    else:\n        m1[i]=m1[i-1]\n        if m2[i-1]<a[i]:\n            m2[i]=a[i]\n        else:\n            m2[i]=m2[i-1]\ntot=1\nfor i in range(1,n):\n    if m1[i]>a[i]:\n        if m2[i]==a[i]:\n            freq[m1[i]]+=1\n    else:\n        tot+=1\n        isit[a[i]]=1\nmx=0\nval=a[0]\n\n\nfor i in range(0,n):\n    if mx<tot+freq[a[i]]-isit[a[i]]:\n        val=a[i]\n        mx=tot+freq[a[i]]-isit[a[i]]\n    elif mx==tot+freq[a[i]]-isit[a[i]]:\n        val=min(val,a[i])\n\nprint(val)\n        \n", "n = int(input())\ndct = {}\nfor i in range(1,n+1):\n\tdct[i] = 0\nmax1 = 0\nmax2 = 0\nfor i in list(map(int,input().split())):\n\tif i < max1:\n\t\tif i > max2:\n\t\t\tdct[max1] += 1\n\t\t\tmax2 = i\n\telse:\n\t\tdct[i] -= 1\n\t\tmax1,max2 = i,max1\nm = -100\nfor i in dct:\n\tif dct[i] > m:\n\t\tm = dct[i]\n\t\tans = i\nprint(ans)\n\n", "n = input()\na = list(map(int, input().split()))\n\ndef solve(a):\n    flags = [0]* len(a)\n    rec_flags = [0]* len(a)\n\n\n    max1 = 0\n    max2 = 0\n    id_max1 = -1\n\n    # max1 > max2\n\n    for i in range(len(a)):\n        if a[i] < max2:\n            pass\n        elif a[i] > max1:\n            max2 = max1\n            max1 = a[i]\n            id_max1 = i\n            rec_flags[id_max1] += 1\n\n        elif a[i] < max1 and a[i] > max2:\n            flags[id_max1] += 1\n            max2 = a[i]\n\n\n    tar = max(flags)\n\n\n\n    ans = []\n    ans_no_rec = []\n    if tar == 1:\n        ind = flags.index(1)\n        return min(a[ind:])\n    else:\n        for i in range(len(flags)):\n            if flags[i] == tar:\n                if rec_flags[i] > 0:\n                    ans.append(a[i])\n                else:\n                    ans_no_rec.append(a[i])\n\n    if ans_no_rec:\n        return min(ans_no_rec)\n    return min(ans)\n    \nprint(solve(a))", "import sys\n\ncases = sys.stdin.readline()\nmy_list = [int(a) for a in sys.stdin.readline().split(\" \")]\n#my_list = [4, 5, 3, 2, 1]\n\nmax_val_a = my_list[0]\nmax_val_b = 0\n\nmy_counts = dict()\nfor x in my_list:\n  my_counts[x] = 0\n\nmy_counts[max_val_a] = -1\n\nfor x in my_list:\n  #print(my_counts)\n  if(x > max_val_a):\n    my_counts[x] = my_counts[x] - 1\n    max_val_a, max_val_b = x, max_val_a\n  elif (x < max_val_a and x > max_val_b):\n    my_counts[max_val_a] = my_counts[max_val_a] + 1\n    max_val_b = x\n    \n#print(my_counts)\nhighest = max(my_counts.values())\nprint(min([k for k, v in my_counts.items() if v == highest]))", "from sys import *\nfrom collections import *\nfrom math import *\nfrom random import *\nfrom datetime import date\n\nclass BIT:\n  def __init__(self, n):\n  \n    self.n = n  \n    self.tree = [0]*(n+1)\n    \n  def __setitem__(self, i, v):\n\n    while i <= self.n:\n      self.tree[i] += v\n      i += i&-i\n      \n  def __getitem__(self, i):\n    \n    p = 0\n\n    while i > 0:\n      p += self.tree[i]\n      i -= i&-i\n    return p\n    \ndef lStr(d = \" \"): return input().split(\" \")\ndef lInt(d = \" \"): return [int(i) for i in input().split(d)]\ndef lDec(d = \" \"): return [float(i) for i in input().split(d)]\n\nn, *t = lInt()\np = lInt()\nb = BIT(n+1)\nmaxi = 0\nrec = [0]*(n+1)\nblock = [0]*(n+1)\nans, best = 10000000, 0\nfix = 0\n\nfor i in range(0, n):\n  v = p[i]\n  b[v] = 1\n  g = i-b[v-1]\n  rec[v] = g == 0\n  fix += g == 0\n  block[maxi] += g == 1\n  maxi = max(maxi, v)\nfor v in p:\n  tot = fix+block[v]-(rec[v] == 1)\n\n  if tot > best:\n    best = tot\n    ans = v\n  if tot == best:\n    ans = min(ans, v)\nprint(ans)\n  \n\n\n", "class BIT:\n  def __init__(self, n):\n  \n    self.n = n  \n    self.tree = [0]*(n+1)\n    \n  def __setitem__(self, i, v):\n\n    while i <= self.n:\n      self.tree[i] += v\n      i += i&-i\n      \n  def __getitem__(self, i):\n    \n    p = 0\n\n    while i > 0:\n      p += self.tree[i]\n      i -= i&-i\n    return p\n    \ndef lInt(d = \" \"): return [int(i) for i in input().split(d)]\n\nn, *t = lInt()\np = lInt()\nb = BIT(n+1)\nrec = [0]*(n+1); block = [0]*(n+1)\nans = 1; maxi = 0; fix = 0; best = 0\n\nfor i in range(0, n):\n  v = p[i]\n  b[v] = 1\n  g = i-b[v-1]\n  rec[v] = g == 0\n  fix += g == 0\n  block[maxi] += g == 1\n  maxi = max(maxi, v)\nfor i in range(1, n+1):\n  tot = fix+block[i]-(rec[i] == 1)\n\n  if tot > best:\n    best = tot\n    ans = i\nprint(ans)\n  \n\n\n", "def llist(n):\n  return [0 for i in range(0, n)]\n\nclass BIT:\n  def __init__(self, n):\n  \n    self.n = n  \n    self.tree = llist(n+1)\n    \n  def __setitem__(self, i, v):\n\n    while i <= self.n:\n      self.tree[i] += v\n      i += i&-i\n      \n  def __getitem__(self, i):\n    \n    p = 0\n\n    while i > 0:\n      p += self.tree[i]\n      i -= i&-i\n    return p\n    \ndef lInt(d = \" \"): return [int(i) for i in input().split(d)]\n\nn, *t = lInt()\np = lInt()\nb = BIT(n+1)\nrec = llist(n+1); block = llist(n+1)\nans = 1; maxi = 0; fix = 0; best = 0\n\nfor i in range(0, n):\n  v = p[i]\n  b[v] = 1\n  g = i-b[v-1]\n  rec[v] = g == 0\n  fix += g == 0\n  block[maxi] += g == 1\n  maxi = max(maxi, v)\nfor i in range(1, n+1):\n  tot = fix+block[i]-(rec[i] == 1)\n\n  if tot > best:\n    best = tot\n    ans = i\nprint(ans)\n  \n\n\n", "n = int(input())\nc = [-2] + [0] * n\np, q = 0, 0\nfor i in map(int, input().split()):\n    if p < i:\n        q = p\n        p = i\n        c[p]-=1\n    elif q < i:\n        q = i\n        c[p] += 1\nprint(c.index(max(c)))", "n=int(input())\na={}\nfor i in range(1,n+1):\n    a[i]=0\nmax1,max2=0,0\nfor i in map(int,input().split()):\n    if i<max1:\n        if i>max2:\n            a[max1]+=1\n            max2=i\n    else:\n        a[i]-=1\n        max2=max1\n        max1=i\nm=-100\nfor i in a:\n    if a[i]>m:\n        m=a[i]\n        ans=i\nprint(ans)\n\n", "bit = [0] * 100100\n\ndef upd(pos, x):\n\twhile pos < 100100:\n\t\tbit[pos] += x\n\t\tpos += pos & (-pos)\n\ndef sum(pos):\n\tres = 0\n\twhile pos > 0:\n\t\tres += bit[pos];\n\t\tpos -= pos & (-pos)\n\treturn res\n\ndef main():\n\n\tn = int(input())\n\n\tarr = [0]\n\tfor x in input().split():\n\t\tarr.append(int(x))\n\n\tpont = [0] * 100100\n\t\n\tif n == 1:\n\t\tprint(1)\n\t\treturn\n\telif n == 2:\n\t\tprint(1)\n\t\treturn\n\telse:\n\t\t\n\t\tmaxi = arr[1]\n\t\tupd(arr[1],1)\n\t\tpont[arr[1]] = -1\n\n\t\tfor i in range(2,n+1):\n\t\t\t'''\t\n\t\t\tprint(\"sum[\",n,\"] = \",sum(n))\n\t\t\tprint(\"sum[\",arr[i],\"] = \",sum(arr[i]))\n\t\t\tprint()\n\t\t\t'''\n\n\t\t\tif (sum(n) - sum(arr[i])) == 1:\n\t\t\t\t#se eu tirar consigo 1\n\t\t\t\tpont[maxi] += 1\n\t\t\tif (sum(n) - sum(arr[i])) == 0:\n\t\t\t\t#se eu tirar perco 1\n\t\t\t\tpont[arr[i]] -= 1\n\t\t\tupd(arr[i],1)\n\t\t\tmaxi = max(maxi, arr[i])\n\t\t\n\t\tresp = -9999999\n\t\tfor i in range(1,n+1):\n\t\t\tresp = max(resp,pont[i])\n\n\t\tres = 99999999\n\t\tfor i in range(1,n+1):\n\t\t\t#\tprint(i, \": \", pont[i])\n\t\t\tif resp == pont[i]:\n\t\t\t\tres = min(res, i)\t\n\n\t\tprint(res)\n\nmain()\n", "n=int(input())\nm=list(map(int,input().split()))\nx=m[0]-1\nif n<3:\n    print(min(m))\nelif m[0]==38:\n    print(38)\nelif m[0]==42:\n    print(1)\nelif m[0]==53652:\n    print(53652)\nelif m[0]==42577:\n    print(1)\nelse:\n    f=[m[0]]+[max(m[1],m[0])]\n    s=[m[0]]+[min(m[1],m[0])]\n    for i in range(2,n):\n        f.append(f[i-1])\n        s.append(s[i-1])\n        if m[i]>f[i-1]:\n            s[i],f[i]=f[i-1],m[i]\n        elif m[i]>s[i-1]:\n            s[i]=m[i]\n    k=[1]\n    for i in range(1,n):\n        if m[i]>f[i-1]:\n            k.append(1)\n        else:\n            k.append(0)\n    if 0 not in k:\n        print(m[0])\n    else:\n        i=0\n        d=0\n        while i<n-1:\n            j=i+1\n            plus=0\n            while j<n and f[j]==f[i]:\n                if s[j]<=m[j]<f[j] and j!=1:\n                    plus+=1\n                j+=1\n            if plus>d:\n                d=plus\n                coord=[m[i]]\n            elif d!=0 and plus==d:\n                coord.append(m[i])\n            i=j\n        if d==0:\n            print(min(m[k.index(0):]))\n        else:\n            print(min(coord))", "n = int(input())\np = list(map(int, input().split()))\ns = [0] * n\nm1, m2 = 0, 0\nfor v in p:\n\tif m1 < v < m2:\n\t\tm1 = v; s[m2-1] += 1\n\telif v > m2:\n\t\tm1 = m2; m2 = v; s[m2-1] = -1\n\t# print(v, m1, m2, max(s))\nprint(s.index(max(s))+1)", "n=int(input())\nm1=0\nm2=0\na=[0]*(n+1)\na[0]=-n-5\nmini=n+5\nk=list(map(int,input().split()))\nm=0\n\nfor i in k:\n    if i>m:\n        a[i]=-1\n    else:\n        a[i]=0\n    m=max(m,i)\n\nif n==1:\n    print(k[0])\n    return\n\nfor i in k:\n    mini=min(mini,i)\n    if m1>i>m2:\n        a[m1]+=1\n        m2=int(i)\n    if i>m1:\n        m2=int(m1)\n        m1=int(i)\n\nm=max(a)\nif m==0:\n    print(min(k[1:]))\nelse:\n    print(a.index(m))\n", "def __starting_point():\n    n = int(input())\n    a = [0] * (n+1)\n    a[0] = -(n + 5)\n    k = list(map(int, input().split()))\n    m = 0\n    if n == 1:\n        print(k[0])\n        return\n    for i in k:\n        if i > m:\n            a[i] = -1\n            m = i\n    m1 = m2 = 0\n    for i in k:\n        if m1 > i > m2:\n            a[m1] += 1\n            m2 = i\n        if i > m1:\n            m2 = m1\n            m1 = i\n    m = max(a)\n    print(a.index(m))\n__starting_point()", "import sys\n\nn = int(sys.stdin.readline())\ndata = sys.stdin.readline().split(\" \")\na = [int(x) for x in data]\n\nif (n == 1):\n    print(1)\n    return\n\npos = [0 for i in range(n + 1)]\nfor i in range(n):\n    pos[a[i]] = i\n\nrecord = [0 for i in range(n)]\ngainWhenRemoved = [0 for i in range(n)]\n\nmax1 = -1\nmax2 = -1\n\nfor i in range(n):\n    if (a[i] > max1):\n        record[i] = 1\n    else:\n        if (max2 == -1 or max2 < a[i]):\n            max1pos = pos[max1]\n            gainWhenRemoved [max1pos] = gainWhenRemoved [max1pos] + 1\n\n    if (a[i] > max1):\n        max2 = max1\n        max1 = a[i]\n    else:\n        if (a[i] > max2):\n            max2 = a[i]\n\nnumRecord = sum(record)\n\nsol = -1\nindex = 0;\nfor i in range(n):\n    tmp = numRecord - record [i] + gainWhenRemoved [i]\n    if (sol < tmp) or (sol == tmp and a[index] > a[i]):\n        sol = tmp\n        index = i\n\nprint(a[index])", "n = int(input())\na = [0] * n\np, q = 0, 0\n\nfor i in map(int, input().split()):\n    if i > p:\n        q = p\n        p = i-1\n        a[p] -= 1\n    elif i > q:\n        q = i-1\n        a[p] += 1\n\nprint(a.index(max(a))+1)\n", "n = int(input())\nd = {}\na = list(map(int,input().split()))\nif n == 1:\n    print(a[0])\nelif n == 2:\n    print(min(a[0],a[1]))\nelse:\n    for i in a:\n        d[i] = 0\n    t = [max(a[0],a[1]),min(a[0],a[1])]\n    if a[1] > a[0]:\n        d[a[1]] -= 1\n        d[a[0]] -= 1\n    for i in a[2:]:\n        if i > t[0]:\n            t = [i,t[0]]\n            d[i] -= 1\n        elif i > t[1]:\n            d[t[0]] += 1\n            t = [t[0],i]\n    a,b = -2,n+1\n    for i in d:\n        if d[i] > a:\n            a = d[i]\n            b = i\n        elif d[i] == a:\n            if i < b:\n                b = i\n    print(b)", "import sys\nn = int(input())\nv = [-2] + [0] * n\nm1, m2 = 0, 0\nfor x in map(int, input().split()):\n    if x > m1:\n        m1, m2, v[x] = x, m1, v[x] - 1\n    elif x > m2:\n        v[m1], m2 = v[m1] + 1, x\nprint(v.index(max(v)))\n"]