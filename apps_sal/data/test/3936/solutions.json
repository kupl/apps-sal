["N=int(input())\nl=\"\"\nmod=10**9+7\nSa=list(input())\nSb=list(input())\nfor i in range(N):\n   if Sa[i]==Sb[i]:\n      l+=\"X\"\n   else:\n      l+=\"Y\"\nl=l.replace(\"YY\",\"Y\")\nans=6 if l[0]==\"Y\" else 3\nfor i in range(1,len(l)):\n   if l[i]==\"Y\" and l[i-1]==\"Y\":\n      ans*=3\n   if l[i]==\"X\" and l[i-1]==\"X\":\n      ans*=2\n   if l[i]==\"Y\" and l[i-1]==\"X\":\n      ans*=2\n   ans=ans%mod\nprint(ans)", "n = int(input())\nmod = 10**9+7\ns1 = input()\ns2 = input()\n\nif s1[0] == s2[0]:\n  i = 1\n  ans = 3\n  bef = \"x\"\nelse:\n  i = 2\n  ans = 6\n  bef = \"y\"\nwhile True:\n  if i == n :\n    break\n  if s1[i] == s2[i]:\n    if bef == \"x\":\n      ans *= 2\n    if bef == \"y\":\n      ans *= 1\n    i += 1\n    bef = \"x\"\n  else:\n    if bef == \"x\":\n      ans *= 2\n    if bef == \"y\":\n      ans *= 3\n    i += 2\n    bef = \"y\"\n  ans %= mod\nprint((ans%mod))\n", "N = int(input())\nS1 = list(input())\nS2 = list(input())\np = 10**9+7\nout = 1\n\nif S1[0]==S2[0]:\n    out *= 3\n    s = 1\n    left = \"V\"\nelse:\n    out *= 3*2\n    s = 2\n    left = \"H\"\n\nwhile s<N:\n    if S1[s]==S2[s]:\n        now = \"V\"\n    else:\n        now = \"H\"\n    if left==\"V\" and now==\"V\":\n        out *= 2\n        s+=1\n    elif left==\"V\" and now==\"H\":\n        out *= 2*1\n        s+=2\n    elif left==\"H\" and now==\"V\":\n        out *= 1\n        s+=1\n    elif left==\"H\" and now==\"H\":\n        out *= 3\n        s+=2\n    out = out%p\n    left = now\nprint(out)", "n = int(input())\ns = [input() for _ in range(2)]\nmod = 1000000007\ncnt = [[0,0,0],[0,2,2],[0,1,3]]\nif n==1:\n    print(3)\nelif n==2:\n    print(6)\nelse:\n    c = []\n    i = 0\n    while i<n:\n        if s[0][i]==s[1][i]:\n            c.append(1)\n            i += 1\n        elif i+1<n and s[0][i]==s[0][i+1]:\n            c.append(2)\n            i += 2\n    if c[0]==1:ans = 3\n    elif c[0]==2:ans = 6\n    for i in range(1,len(c)):\n        ans *= cnt[c[i-1]][c[i]]\n        ans %= mod\n\n    print(ans%mod)", "class modint:\n  mod = 0\n  has_been_set = False\n  def __init__(self, v=0, m=None):\n    if m != None: \n      assert m >= 1\n      assert not modint.has_been_set\n      modint.mod = m\n      modint.has_been_set = True\n    assert modint.has_been_set\n    self._v = v if 0 <= v < modint.mod else v % modint.mod\n  def __add__(self, other):\n    if isinstance(other, modint):\n      res = self._v + other._v\n      if res > modint.mod: res -= modint.mod\n    else:\n      res = self._v + other\n    return modint(res)\n  def __sub__(self, other):\n    if isinstance(other, modint):\n      res = self._v - other._v\n      if res < 0: res += modint.mod\n    else:\n      res = self._v - other\n    return modint(res)\n  def __mul__(self, other):\n    if isinstance(other, modint):\n      return modint(self._v * other._v)\n    else:\n      return modint(self._v * other)\n  def __floordiv__(self, other):\n    if isinstance(other, modint): other = other._v\n    inv = pow(other, -1, modint.mod)\n    return modint(self._v * inv)\n  def __pow__(self, other):\n    assert isinstance(other, int) and other >= 0\n    return modint(pow(self._v, other, modint.mod))\n  def __radd__(self, other):\n    return modint(self._v + other)\n  def __rsub__(self, other):\n    return modint(other - self._v)  \n  def __rmul__(self, other):\n    return modint(self._v * other)\n  def __rfloordiv__(self, other):\n    inv = pow(self._v, -1, modint.mod)\n    return modint(other * inv)\n  def __iadd__(self, other):\n    if isinstance(other, modint):\n      self._v += other._v\n      if self._v >= modint.mod: self._v -= modint.mod\n    else:\n      self._v += other\n      if self._v < 0 or self._v >= modint.mod: self._v %= modint.mod\n    return self\n  def __isub__(self, other):\n    if isinstance(other, modint):\n      self._v -= other._v\n      if self._v < 0: self._v += modint.mod\n    else:\n      self._v -= other\n      if self._v < 0 or self._v >= modint.mod: self._v %= modint.mod\n    return self\n  def __imul__(self, other):\n    if isinstance(other, modint):\n      self._v *= other._v\n    else:\n      self._v *= other\n    if self._v < 0 or self._v >= modint.mod: self._v %= modint.mod\n    return self\n  def __ifloordiv__(self, other):\n    if isinstance(other, modint): other = other._v\n    inv = pow(other, -1, modint.mod)\n    self._v *= inv       \n    if self._v > modint.mod: self._v %= modint.mod\n    return self\n  def __ipow__(self, other):\n    assert isinstance(other, int) and other >= 0\n    self._v = pow(self._v, other, modint.mod)\n    return self\n  def __eq__(self, other):\n    if isinstance(other, modint):\n      return self._v == other._v\n    else:\n      if other < 0 or other >= modint.mod:\n        other %= modint.mod\n      return self._v == other\n  def __ne__(self, other):\n    if isinstance(other, modint):\n      return self._v != other._v\n    else:\n      if other < 0 or other >= modint.mod:\n        other %= modint.mod\n      return self._v != other\n  def __str__(self):\n    return str(self._v)\n  def __repr__(self):\n    return str(self._v)\n  def __int__(self):\n    return self._v\n\nn = int(input())\ns = input()\nt = input()\nmod = 10**9+7\nans = modint(0, m=mod)\nif s[0] == t[0]:\n  ans += 3\n  i = 1\nelse:\n  ans += 6\n  i = 2\nwhile i < n:\n  if s[i-1] != t[i-1] and s[i] == t[i]:\n    ans *= 1\n  elif s[i] == t[i]:\n    ans *= 2\n  elif s[i-1] != t[i-1]:\n    ans *= 3\n    i += 1\n  else:\n    ans *= 2\n    i += 1\n  i += 1\nprint(ans)", "n = int(input())\ns1 = input()\ns2 = input()\nans = 1\ni = 1\nmod = 1000000007\nif s1[0] == s2[0]:\n    ans = 3\n    i = 1\nelse:\n    ans = 6\n    i = 2\nwhile i < n:\n    if s1[i - 1] == s2[i - 1]:\n        if s1[i] == s2[i]:\n            ans = (ans * 2) % mod\n            i += 1\n            continue\n        else:\n            ans = (ans * 2) % mod\n            i += 2\n            continue\n    else:\n        if s1[i] == s2[i]:\n            ans = (ans * 1) % mod\n            i += 1\n            continue\n        else:\n            ans = (ans * 3) % mod\n            i += 2\n            continue\nprint(ans)\n", "import sys\nread = sys.stdin.read\nlarge_p = 10**9 + 7\ndef main():\n    n = int(input())\n    s1 = tuple(input())\n    s2 = tuple(input())\n\n    s = []\n    cnt = 0\n    while cnt < n:\n        if s1[cnt] == s2[cnt]:\n            s.append(1)\n        else:\n            s.append(2)\n            cnt += 1\n        cnt += 1\n    if s[0] == 2:\n        ans = 6\n    else:\n        ans = 3\n    for i1 in range(1, len(s)):\n        if s[i1 - 1] == 1:\n            ans *= 2\n        else:\n            if s[i1] == 2:\n                ans *= 3\n        ans = ans % large_p\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nN = int(sys.stdin.readline())\nS = [\"\", \"\"]\nS[0] = sys.stdin.readline().strip()\nS[1] = sys.stdin.readline().strip()\n\nmod = 10**9 + 7\n\npre = [S[0][0], S[1][0]]\nans = 3\nif S[0][0] != S[1][0]:\n    ans *= 2\n# print(0, 1, ans)\n\nfor i in range(1, N):\n    # \u4e00\u3064\u524d\u3068\u540c\u3058\u5834\u5408\n    if pre[0] == S[0][i] and pre[1] == S[1][i]:\n        continue\n\n    if pre[0] == pre[1]:\n        ans *= 2\n        ans %= mod\n        # \u7e26\u8a70\u304c\u9023\u7d9a\n        # if S[0][i] == S[1][i]:\n        #     ans *= 2\n        #     ans %= mod\n        # else:\n        #     ans *= 2\n        #     ans %= mod\n    else:\n        # 1\u30d1\u30bf\u30fc\u30f3\u3057\u304b\u306a\u3044\n        if S[0][i] == S[1][i]:\n            ans *= 1\n        else:\n            ans *= 3\n            ans %= mod\n\n    # print(ans)\n\n    pre[0] = S[0][i]\n    pre[1] = S[1][i]\n\nprint(ans)", "MOD = 10 ** 9 + 7\nN = int(input())\nS1 = input()\nS2 = input()\n\nans = 1\ni = 0\nif S1[i] == S2[i]:\n  ans *= 3\n  prev = True\n  i += 1\nelse:\n  ans *= 6\n  prev = False\n  i += 2\n\nwhile i < N:\n  now = (S1[i] == S2[i])\n  if now:\n    if prev:\n      ans *= 2\n      ans %= MOD\n    else:\n      pass\n    i += 1\n  else:\n    if prev:\n      ans *= 2\n      ans %= MOD\n    else:\n      ans *= 3\n      ans %= MOD\n    i += 2\n  prev = now\nprint(ans)\n", "N = int(input())\nS1 = list(input())\nS2 = list(input())\n\nout=1\ni=0\nwhile i<N:\n    # print(i,S1[i])\n    if i==0:\n        if S1[i]==S2[i]:\n            out*=3\n            flg=0\n        else:\n            out*=6\n            flg=1\n            i+=1\n    else:\n        if flg==0:\n            if S1[i] == S2[i]:\n                out*=2\n                flg=0\n            else:\n                out*=2\n                i+=1\n                flg=1\n        else:\n            if S1[i]==S2[i]:\n                out*=1\n                flg=0\n            else:\n                out*=3\n                flg=1\n                i+=1\n    i+=1\n\nprint((out % 1000000007))\n", "N = int(input())\ns = input()\nt = input()\nmod = 10**9+7\ncur = 0\nans = 1\nfor i,(x, y) in enumerate(zip(s, t)):\n    if cur == 1:\n        cur = 2\n        continue\n    if x == y:\n        if i == 0:\n            ans = 3\n        else:\n            if cur == 0:\n                ans *= 2%mod\n            else:\n                cur = 0\n                continue\n    else:\n        if i == 0:\n            ans *= 6\n            cur = 1\n        else:\n            if cur == 0:\n                ans *= 2\n                ans %= mod\n                cur = 1\n            else:\n                ans *= 3%mod\n                cur = 1\nprint(ans%mod)", "n=int(input())\ns=input()\nt=input()\nmod=10**9+7\nans=1\nif s[0]==t[0]:\n  ans*=3\n  idx=1\n  flag=0\nelse:\n  ans*=6\n  idx=2\n  flag=1\nwhile idx<n:\n  if s[idx]==t[idx]:\n    if flag:\n      idx+=1\n      \n    else:\n      ans=ans*2%mod\n      idx+=1\n    flag=0\n  else:\n    if flag:\n      ans=ans *3%mod\n    else:\n      ans=ans*2%mod\n    idx+=2\n    flag=1\n    \nprint(ans)", "n=int(input())\ns1=input()\ns2=input()\nmod=10**9+7\nif s1[0]==s2[0]:\n  cnt=3\n  flag=0\n  i=1\nelse:\n  cnt=6\n  flag=1\n  i=2\nwhile i<n:\n  if s1[i]==s2[i] and flag==0:\n    i+=1\n    cnt*=2\n  elif s1[i]==s2[i] and flag==1:\n    i+=1\n    flag=0\n  elif s1[i]!=s2[i] and flag==0:\n    i+=2\n    cnt*=2\n    flag=1\n  else:\n    i+=2\n    cnt*=3\n  cnt%=mod\nprint(cnt%mod)", "n=int(input())\ns1=input()\ns2=input()\nmod=10**9+7\n\ndef rle(string):\n    rle_str = string[0]\n    rle_cnt = 1\n    ans_l = []\n    for i in range(1, len(string)):\n        if rle_str == string[i]:\n            rle_cnt += 1\n        else:\n            ans_l.append([rle_str, rle_cnt])\n            rle_str = string[i]\n            rle_cnt = 1\n    ans_l.append([rle_str, rle_cnt])\n    return ans_l\n\nrle_s=rle(s1)\n\nif rle_s[0][1]==1:\n    ans=3\n    left=1\nelif rle_s[0][1]==2:\n    ans=6\n    left=2\n\nfor s, i in rle_s[1:]:\n    if left==1 and i==1:\n        ans*=2\n    elif left==1 and i==2:\n        ans*=2\n    elif left==2 and i==1:\n        ans*=1\n    elif left==2 and i==2:\n        ans*=3\n    left=i\n\nprint((ans%mod))\n", "N = int(input())\nS1 = input()\nS2 = input()\nmod = 10**9+7\n\nans = 1\nif(S1[0] == S2[0]):\n    ans *= 3\n    ans %= mod\n    \n    idx = 1\nelse:\n    ans *= 6\n    ans %= mod\n    idx = 2\n\nwhile(idx <= N-1):\n    if(S1[idx] == S2[idx]):\n        if(S1[idx-1] == S2[idx-1]):\n            ans *= 2\n            ans %= mod\n            idx += 1\n        else:\n            ans *= 1\n            ans %= mod\n            idx += 1\n    else:\n        if(S1[idx-1] == S2[idx-1]):\n            ans *= 2\n            ans %= mod\n            idx += 2\n        else:\n            ans *= 3\n            ans %= mod\n            idx += 2\nprint(ans)", "from collections import Counter\nn = int(input())\nS = input()\nDo = Counter(S)\nAns = 0\ni = 0\nif Do[S[0]] == 1:\n    Ans = 3\n    i += 1\n    sig = 1\nelse:\n    Ans = 6\n    i += 2\n    sig = 2\nwhile not i >= n:\n    if Do[S[i]] == 1:\n        if sig == 1:\n            Ans *= 2\n        else:\n            Ans *= 1\n        sig = 1\n        i +=1\n    else:\n        if sig == 1:\n            Ans *=2\n        else:\n            Ans *=3\n        sig = 2\n        i += 2\n    Ans = Ans%(10**9+7)\nprint(Ans)", "n=int(input())\ns1=input()\ns2=input()\nmod=10**9+7\n\ndef rle(string):\n    rle_str = string[0]\n    rle_cnt = 1\n    ans_l = []\n    for i in range(1, len(string)):\n        if rle_str == string[i]:\n            rle_cnt += 1\n        else:\n            ans_l.append([rle_str, rle_cnt])\n            rle_str = string[i]\n            rle_cnt = 1\n    ans_l.append([rle_str, rle_cnt])\n    return ans_l\n\nrle_s=rle(s1)\n\nans=rle_s[0][1]*3\nleft=rle_s[0][1]\n\nfor s, i in rle_s[1:]:\n    if left==1 and i==1:\n        ans*=2\n    elif left==1 and i==2:\n        ans*=2\n    elif left==2 and i==1:\n        ans*=1\n    elif left==2 and i==2:\n        ans*=3\n    left=i\n\nprint((ans%mod))\n", "n = int(input())\ns1 = input()\ns2 = input()\nif s1[0] == s2[0]:\n    a = 3\n    l = 0\n    v = True\nelse:\n    a = 6\n    l = 1\n    v = False\nmod = 10**9+7\ndef mult_mod(x,y):\n    return (x*y) % mod\nwhile l+1 < n:\n    if v:\n        if s1[l+1] == s2[l+1]:\n            l += 1\n            a = mult_mod(a,2)\n        else:\n            l += 2\n            a = mult_mod(a,2)\n            v = False\n    else:\n        if s1[l+1] == s2[l+1]:\n            l += 1\n            v = True\n        else:\n            l += 2\n            a = mult_mod(a,3)\n\nprint(a%mod)", "mod = 1000000007\nn = int(input())\ns = [ input() for i in range(2)]\nans = 1\ni = 0\nwhile i < n:\n  if s[0][i] == s[1][i]:\n    if i == 0:\n      ans *= 3\n    elif s[0][i-1] == s[1][i-1]:\n      ans *= 2\n    i += 1\n  else:\n    if i == 0:\n      ans *= 6\n    elif s[0][i-1] == s[1][i-1]:\n      ans *= 2\n    else:\n      ans *= 3\n    i+=2\n  ans %= mod\nprint(ans)", "import sys\nfrom collections import deque\nfrom copy import deepcopy\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nfrom heapq import heapify, heappop, heappush\nfrom itertools import product, permutations, combinations, combinations_with_replacement\nfrom functools import reduce\nfrom math import gcd, sin, cos, tan, asin, acos, atan, degrees, radians\n\nsys.setrecursionlimit(10**6)\nINF = 10**20\neps = 1.0e-20\nMOD = 10**9+7\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\ndef lgcd(l):\n    return reduce(gcd,l)\ndef llcm(l):\n    return reduce(lcm,l)\ndef powmod(n,i,mod=MOD):\n    return pow(n,mod-1+i,mod) if i<0 else pow(n,i,mod)\ndef div2(x):\n    return x.bit_length()\ndef div10(x):\n    return len(str(x))-(x==0)\ndef intput():\n    return int(input())\ndef mint():\n    return map(int,input().split())\ndef lint():\n    return list(map(int,input().split()))\ndef ilint():\n    return int(input()), list(map(int,input().split()))\ndef judge(x, l=['Yes', 'No']):\n    print(l[0] if x else l[1])\ndef lprint(l, sep='\\n'):\n    for x in l:\n        print(x, end=sep)\ndef ston(c, c0='a'):\n    return ord(c)-ord(c0)\ndef ntos(x, c0='a'):\n    return chr(x+ord(c0))\nclass counter(dict):\n    def __init__(self, *args):\n        super().__init__(args)\n    def add(self,x,d=1):\n        self.setdefault(x,0)\n        self[x] += d\n    def list(self):\n        l = []\n        for k in self:\n            l.extend([k]*self[k])\n        return l\nclass comb():\n    def __init__(self, n, mod=None):\n        self.l = [1]\n        self.n = n\n        self.mod = mod\n    def get(self,k):\n        l,n,mod = self.l, self.n, self.mod\n        k = n-k if k>n//2 else k\n        while len(l)<=k:\n            i = len(l)\n            l.append(l[i-1]*(n+1-i)//i if mod==None else (l[i-1]*(n+1-i)*powmod(i,-1,mod))%mod)\n        return l[k]\ndef pf(x,mode='counter'):\n    C = counter()\n    p = 2\n    while x>1:\n        k = 0\n        while x%p==0:\n            x //= p\n            k += 1\n        if k>0:\n            C.add(p,k)\n        p = p+2-(p==2) if p*p<x else x\n    if mode=='counter':\n        return C\n    S = set([1])\n    for k in C:\n        T = deepcopy(S)\n        for x in T:\n            for i in range(1,C[k]+1):\n                S.add(x*(k**i))\n    if mode=='set':\n        return S\n    if mode=='list':\n        return sorted(list(S))\n\n######################################################\n\nN=intput()\nS1=input()\nS2=input()\ni=0\nans=1\n# first,tate,yoko\ntmp=0\nsame=[3,2,1]\ndiff=[6,2,3]\nwhile i<N:\n    if S1[i]==S2[i]:\n        ans*=same[tmp]\n        tmp=1\n        i+=1\n    else:\n        ans*=diff[tmp]\n        tmp=2\n        i+=2\n    ans%=MOD\nprint(ans)", "N = int(input())\nS1 = input()\nS2 = input()\nans = 1\nMOD = 10**9+7\ni = 0\nflag = True\n\nwhile i<N:\n    if S1[i]==S2[i]:\n        if i==0:\n            ans *= 3\n        else:\n            if flag:\n                ans *= 2\n        \n        i += 1\n        flag = True\n    else:\n        if i==0:\n            ans *= 6\n        else:\n            if flag:\n                ans *= 2\n            else:\n                ans *= 3\n        \n        i += 2\n        flag = False\n    \n    ans %= MOD\n\nprint(ans)", "n=int(input())\ns1=list(input())\ns2=list(input())\nans=0\nif s1[0]==s2[0]:\n    ans=3\nelse:\n    ans=6\nfor i in range(n-1):\n    if s1[i]==s2[i]:\n        ans*=2\n    else:\n        if s1[i]==s1[i+1]:\n            continue\n        else:\n            if s1[i+1]!=s2[i+1]:\n                ans*=3\n            else:\n                ans*=1\nprint(ans%1000000007)", "# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict, namedtuple\nimport heapq\nfrom math import sqrt, factorial, gcd, ceil, atan, pi\nfrom itertools import permutations\ndef input(): return sys.stdin.readline().strip() \n# def input(): return sys.stdin.buffer.readline()[:-1] # warning bytes\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\n# def input(): return sys.stdin.buffer.readline().decode('utf-8').strip()\nimport string\nimport operator\nimport random\n# string.ascii_lowercase\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nMOD = int(1e9)+7\nINF = float('inf')\n\nsys.setrecursionlimit(int(1e7))\n\ndef solve():\n    n = int(input())\n    # n, m, k = [int(x) for x in input().split()]\n    a = input()\n    b = input()\n\n    ans = 1\n\n    i = 0\n    f = -1\n\n    while i < n:\n        if a[i] != b[i]:\n            if f == -1:\n                ans *= 6\n            elif f == 1:\n                ans *= 3\n            else:\n                ans *= 2\n            i += 2\n            f = 1\n        else:\n            if f == -1:\n                ans *= 3\n            elif f == 0:\n                ans *= 2\n            i += 1\n            f = 0\n\n\n    print((ans % MOD))\n        \n    \n\n\nT = 1\n# T = int(input())\nfor case in range(1,T+1):\n    ans = solve()\n\n\n\"\"\"\n\na b\nb a\n\na b\nb c\n\na c\nb a\n\n\"\"\"\n", "N = int(input())\nS = [list(input()) for _ in range(2)]\nMOD = 1000000007\ni = 0\n\n\ndef define(index):\n    # \u305f\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u3093\n    if S[0][index] == S[1][index]:\n        return 1\n    else:\n        return 0\n\n\nif define(i):\n    ans = 3\n    i += 1\n    f_g = 1\nelse:\n    ans = 6\n    i += 2\n    f_g = 0\n\n\nwhile i < N:\n    t_g = define(i)\n    if f_g == 0 and t_g == 0:\n        ans *= 3\n        ans %= MOD\n    elif not (f_g == 0 and t_g == 1):\n        ans *= 2\n        ans %= MOD\n    if t_g == 1:\n        i += 1\n    else:\n        i += 2\n    f_g = t_g\nprint((ans % MOD))\n", "MOD = pow(10,9)+7\ndef MODINV(n:int, MOD=MOD):\n    return pow(n, MOD-2, MOD)\n\ndef main():\n    N = int(input())\n    S1 = input()\n    S2 = input()\n    ans = 1; i = 0\n    M = (S1[-1] == S2[-1]) * N + (S1[-1] != S2[-1]) * (N-1)\n    for _ in range(N):\n        if i >= M-1:\n            break\n        s1 = S1[i]\n        s2 = S2[i]\n        if s1 == s2:\n            ans *= 2\n            i += 1\n        else:\n            if S1[i+2] != S2[i+2]:\n                ans *= 3\n            i += 2\n        ans %= MOD\n\n    if S1[0] == S2[0]:\n        ans *= 3\n    else:\n        ans *= 6\n    print((ans%MOD))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "mod = 1000000007\nn = int(input())\ns = input()\ns2 = input()\na = [] if n > 1 else [1]\nfor i in range(n-1):\n  if i != 0 and s[i-1] == s[i]:\n    continue\n  if s[i] == s[i+1]:\n    a.append(2)\n    if i == n-3:\n      a.append(1)\n  else:\n    a.append(1)\n    if i == n-2:\n      a.append(1)\nans = 3 if a[0] == 1 else 6\nfor i in range(len(a)-1):\n  b,c = a[i:i+2]\n  if b == 1:\n    ans = (ans * 2) % mod\n  else:\n    if c == 2:\n      ans = (ans * 3) % mod\nprint(ans)", "MOD = 10**9 + 7\nn = int(input())\ns1 = input()\ns2 = input()\nif s1[0] == s2[0]:\n    end = 1\n    count = 1\n    ans = 3\nelse:\n    end = 0\n    count = 2\n    ans = 6\nwhile count < n:\n    if end == 1:\n        if s1[count] == s2[count]:\n            ans *= 2\n            ans %= MOD\n            count += 1\n        else:\n            ans *= 2\n            ans %= MOD\n            count += 2\n            end = 0\n    else:\n        if s1[count] == s2[count]:\n            count += 1\n            end = 1\n        else:\n            ans *= 3\n            ans %= MOD\n            count += 2\nprint(ans)", "n = int(input())\ns1 = input()+' '\ns2 = input()+' '\nmod = 10**9+7\n\ns = []\nfor i in range(n):\n    if s1[i] == s2[i]:\n        s.append(1)\n        continue\n    if s1[i] == s1[i+1]:\n        continue\n    s.append(2)\n\ndp = [0]*len(s)\ndp[0] = 3 if s[0] == 1 else 6\nfor i in range(len(s)-1):\n    if s[i] == 1 and s[i+1] == 1:\n        dp[i+1] = dp[i]*2\n    if s[i] == 1 and s[i+1] == 2:\n        dp[i+1] = dp[i]*2\n    if s[i] == 2 and s[i+1] == 1:\n        dp[i+1] = dp[i]\n    if s[i] == 2 and s[i+1] == 2:\n        dp[i+1] = dp[i]*3\n    dp[i+1] %= mod\nprint((dp[-1]))\n", "MOD = 10**9 + 7\nN = int(input())\nS1 = input().rstrip()\nS2 = input().rstrip()\nL = len(S1)\n\nif L==1:\n    print((3))\n    return\n\nif S1[0] == S1[1]:\n    dp = 6\n    start = 2\n    state = 0\nelse:\n    dp = 3\n    start = 1\n    state = 1\n\ni = start\nwhile i<L-1:\n    if S1[i] == S1[i+1]:\n        if state == 0:\n            dp *= 3\n            dp %= MOD\n        else:\n            dp *= 2\n            dp %= MOD\n        state = 0\n        i += 2\n    else:\n        if state == 1:\n            dp *= 2\n            dp %= MOD\n        state = 1\n        i += 1\nif state == 1:\n    dp *= 2\n    dp %= MOD\nprint(dp)\n", "N=int(input())\ns1=list(input())\ns2=list(input())\ndp=[0]*N\nif s1[0]==s2[0]:\n    dp[0]=3\nelse:\n    dp[0]=6\nfor i in range(1,N):\n    if s1[i]==s2[i]:\n        if s1[i-1]==s2[i-1]:\n            dp[i]=(2*dp[i-1])%(10**9+7)\n        else:\n            dp[i]=dp[i-1]\n    else:\n        if s1[i]==s1[i-1]:\n            dp[i]=dp[i-1]\n        elif s1[i-1]!=s2[i-1]:\n            dp[i]=(3*dp[i-1])%(10**9+7)\n        else:\n            dp[i]=(2*dp[i-1])%(10**9+7)\nprint(dp[N-1])", "import decimal\nimport itertools\nimport math\nimport functools\nimport bisect\nimport heapq\nimport random\nfrom collections import Counter, deque, defaultdict\nimport time\n\n# mod = 10 ** 9 + 7\nmod = 1000000007\n\n\ndef lmi():\n    return list(map(int, input().split()))\n\ndef main():\n    N = int(input())\n    S1 = input()\n    S2 = input()\n\n    prev = 0\n    ans = 1\n    next_skip = False\n    for i in range(N):\n        if next_skip:\n            next_skip = False\n            continue\n\n        if S1[i] == S2[i]:\n            ans *= 3 - prev\n            prev = 1\n        else:\n            if prev == 1:\n                ans *= 2\n            elif prev == 2:\n                ans *= 3\n            else:\n                ans *= 3 * 2\n            prev = 2\n            next_skip = True\n    print((ans % mod))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[ ]:\n\n\nn = int(input())\nmod = 10 ** 9 + 7\ns = [list(input()) for _ in range(2)]\nans = 1\ni = 0\nwhile i < n:\n    if s[1][i] == s[0][i]:\n        if i == 0:\n            ans *= 3\n            i += 1\n        else:\n            if s[0][i - 1] == s[1][i - 1]:\n                ans = (ans * 2) % mod\n            i += 1\n    else:\n        if i == 0:\n            ans *= 6\n        else:\n            if s[0][i - 1] == s[1][i - 1]:\n                ans = (ans * 2) % mod\n            else:\n                ans = (ans * 3) % mod\n        i += 2\n        \n    \nprint(ans)\n\n", "from itertools import groupby\n\nN = int(input())\ns = input()\nS = input()\nmod = 10 ** 9 + 7\n\ns = [len(list(j)) for i, j in groupby(s)]\n\nans = 3 * s[0]\n\nfor i in range(1,len(s)):\n    if s[i-1] == 1:\n        ans *= 2\n    elif s[i] == 2:\n        ans *= 3\n    ans %= mod\n\nprint(ans)", "n = int(input())\nmod = 10 ** 9 + 7\ns = [list(input()) for _ in range(2)]\nans = 1\ni = 0\nwhile i < n:\n    if s[1][i] == s[0][i]:\n        if i == 0:\n            ans *= 3\n            i += 1\n        else:\n            if s[0][i - 1] == s[1][i - 1]:\n                ans = (ans * 2) % mod\n            i += 1\n    else:\n        if i == 0:\n            ans *= 6\n        else:\n            if s[0][i - 1] == s[1][i - 1]:\n                ans = (ans * 2) % mod\n            else:\n                ans = (ans * 3) % mod\n        i += 2\n        \n    \nprint(ans)", "n = int(input())\ns1 = input()\ns2 = input()\n\ndomino = []\ni = 0\nwhile i < n:\n    if s1[i] == s2[i]:\n        domino.append('X')\n        i += 1\n    else:\n        domino.append('Y')\n        i += 2\n\ncnt = 0\nif domino[0] == 'X': cnt += 3\nelse: cnt += 6\n\nif len(domino) == 1:\n    print(cnt%(10**9+7))\nelse:\n    for i in range(1, len(domino)):\n        if domino[i] == 'X':\n            if domino[i-1] == 'X': cnt *= 2\n            else: cnt *= 1\n        else:\n            if domino[i-1] == 'X': cnt *= 2\n            else: cnt *= 3\n    print(cnt%(10**9+7))", "n = int(input())\nS = [list(input()) for _ in range(2)]\nmod = 1000000007\nif S[0][0]==S[1][0]:\n    ans = 3\n    i = 1\n    typ = '2x1'\nelse:\n    ans = 6\n    i = 2\n    typ = '2x2'\nwhile i<n:\n    if S[0][i]==S[1][i]:\n        if typ=='2x1':\n            ans *= 2\n        typ = '2x1'\n        i += 1\n    else:\n        if typ=='2x1':\n            ans *= 2\n        else:\n            ans *= 3\n        typ = '2x2'\n        i += 2\n    ans %= mod\nprint(ans)", "n = int(input())\ns = [input() for _ in range(2)]\n\nmod = 10**9+7\n\nif s[0][0] == s[1][0]:\n    ans = 3\n    i = 1\n    l = 1\nelse:\n    ans = 6\n    i = 2\n    l = 0\n\nwhile i < n:\n    if s[0][i] == s[1][i]:\n        if l == 1:\n            ans *= 2\n        l = 1\n        i += 1\n    else:\n        if l == 1:\n            ans *= 2\n        else:\n            ans *= 3\n        l = 0\n        i += 2\n    ans %= mod\nprint(ans)", "import sys\nfrom heapq import heappush, heappop\ndef input(): return sys.stdin.readline().rstrip()\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return list(mi())\n\nmod = 10 **9 + 7\ndef main():\n    n = ii()\n    s = []\n    s.append(input())\n    s.append(input())\n    if s[0][0] == s[1][0]:\n        ans = 3\n    else:\n        ans = 6\n\n    for i in range(1,n):\n        if s[0][i-1] == s[1][i-1]:\n            ans  *= 2\n            ans %= mod\n        else:\n            if s[0][i] != s[0][i-1] and s[1][i] != s[1][i-1] and s[0][i] != s[1][i]:\n                ans *= 3\n                ans %= mod\n    print(ans)\n            \n\n            \n\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "MOD = 10**9 + 7\n\nN = int(input())\nS1 = input()\nS2 = input()\n\nl = []\nres = 1\nwhile res < N:\n    if S1[res-1] == S1[res]:\n        l.append(2)\n        res += 2\n    else:\n        l.append(1)\n        res += 1\nif res == N:\n    l.append(1)\n\nn = len(l)\nif l[0] == 1:\n    ans = 3\nelse:\n    ans = 6\n\nfor i in range(1, n):\n    if l[i] == 1 and l[i-1] == 1:\n        ans = ans * 2 % MOD\n    elif l[i] == 2 and l[i-1] == 1:\n        ans = ans * 2 % MOD\n    elif l[i] == 2 and l[i-1] == 2:\n        ans = ans * 3 % MOD\n\nprint(ans)", "import sys\nMOD = 1000000007\n\nN = int(input())\nS1 = input()\nS2 = input()\n\npattern = []\npos = 0\n\nif N == 1:\n  print(3)\n  return\n\nwhile True:\n    if S1[pos] != S1[pos + 1]:\n        pattern.append(0)\n        pos += 1\n    else:\n        pattern.append(1)\n        pos += 2\n    if pos == N - 1:\n        pattern.append(0)\n        break\n    elif pos == N:\n        break\n\nif pattern[0] == 0:\n    ans = 3\n    now = 0\nelse:\n    ans = 6\n    now = 1\n\nfor i in range(1, len(pattern)):\n    if pattern[i] == 0:\n        if now == 0:\n            ans *= 2\n            ans = ans%MOD\n        else:\n            ans *= 1\n            ans = ans%MOD\n        now = 0\n    else:\n        if now == 0:\n            ans *= 2\n            ans = ans%MOD\n        else:\n            ans *= 3\n            ans = ans%MOD\n        now = 1\n\nprint(ans)", "#!/usr/bin/env python3\nn = int(input())\ns = [input() for _ in range(2)]\nmod = 10 ** 9 + 7\n\"\"\" \n\u305f\u3066*\u305f\u3066 = *2\n\u305f\u3066*\u3088\u3053 = *2\n\u3088\u3053*\u3088\u3053 = *3 (1,2)=(2,3)(2,1),(3,1)\n\u3088\u3053*\u305f\u3066 = *1\n\"\"\"\ntmp = 1\npos = 0  # \u79fb\u52d5\u3055\u305b\u308b\npre_state = -1  # 0:tate 1:yoko\nwhile pos < n:\n    if s[0][pos] == s[1][pos]:\n        if pos == 0:\n            tmp *= 3\n        else:\n            if pre_state == 0:\n                tmp *= 2\n            else:\n                tmp *= 1\n        pre_state = 0\n        pos += 1\n    else:\n        if pos == 0:\n            tmp *= 6\n        else:\n            if pre_state == 0:\n                tmp *= 2\n            else:\n                tmp *= 3\n        pre_state = 1\n        pos += 2\n    tmp %= mod\nprint(tmp)\n", "from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf,comb\nfrom itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nfrom functools import reduce\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn = INT()\ns1 = input()\ns2 = input()\n\nans = 3\ni = 1\nwhile i < n:\n    if i == 1 or s1[i-1] != s1[i-2]:\n        if i == n-1 or s1[i] != s1[i+1]:\n            ans = ans * 2 % ( 10**9 + 7 )\n            i += 1\n        else:\n            ans = ans * 2 % ( 10**9 + 7 )\n            i += 2\n    else:\n        if i == n-1 or s1[i] != s1[i+1]:\n            ans = ans * 1 % ( 10**9 + 7 )\n            i += 1\n        else:\n            ans = ans * 3 % ( 10**9 + 7 )\n            i += 2\nprint(ans)", "n = int(input())\ns = input() + \"@\"\nt = input() + \"@\"\nmod = 10 ** 9 + 7\n\n# \u60c5\u5831\u30921\u6b21\u5143\u306b\u3057\u3066\u51e6\u7406\u3057\u3084\u3059\u304f\u3059\u308b\u305c\n# \u7e26\u3067\u4e00\u81f4 True \u6a2a\u3067\u4e00\u81f4 False\nb = []\nfor i in range(n):\n    if s[i] == s[i + 1]:\n        continue\n    b.append(s[i] == t[i])\n\n# \u51e6\u7406\u3059\u308b\u305c\nif b[0]:\n    ans = 3\nelse:\n    ans = 6\n\nfor i in range(1, len(b)):\n    if b[i]:\n        if b[i - 1]:\n            ans *= 2\n    else:\n        if b[i - 1]:\n            ans *= 2\n        else:\n            ans *= 3\n\nprint((ans % mod))\n\n", "N = int(input())\nS = [input()+\".\", input()+\",\"]\nmod = 10**9+7\n\nif N == 1:\n    print(3)\n    return\n\nif S[0][0] == S[1][0]:\n    i = 1\n    ans = 3\nelse:\n    i = 2\n    ans = 6\n\nwhile i < N:\n    if S[0][i] == S[1][i]:\n        if S[0][i-1] == S[1][i-1]:\n            ans *= 2\n        else:\n            pass\n        ans %= mod\n        i += 1\n    \n    else:\n        if S[0][i-1] == S[1][i-1]:\n            ans *= 2\n        else:\n            ans *= 3\n        ans %= mod\n        i += 2\n\nprint(ans)", "import sys\n# sys.setrecursionlimit(100000)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef input_int():\n    return int(input())\n\n\ndef input_int_list():\n    return [int(i) for i in input().split()]\n\n\ndef main():\n    n = input_int()\n    L1 = [None] + list(input()) + [None]\n    L2 = [None] + list(input()) + [None]\n    seq = []\n    if L1[1] == L2[1]:  # \u7e26\u30c9\u30df\u30ce\n        L1[1] = L2[1] = \"#\"\n        seq.append(\"X\")\n    elif L1[1] == L1[2]:  # \u6a2a\u30c9\u30df\u30ce\n        L1[1] = L1[2] = L2[1] = L2[2] = \"#\"\n        seq.append(\"Y\")\n\n    for i in range(1, n + 1):\n        if L1[i] == \"#\":\n            continue\n        else:\n            if L1[i] == L2[i]:\n                seq.append(\"X\")\n                L1[i] = \"#\"\n            elif L1[i] == L1[i + 1]:\n                seq.append(\"Y\")\n                L1[i] = L1[i + 1] = \"#\"\n    if seq[0] == \"X\":\n        ans = 3\n    elif seq[0] == \"Y\":\n        ans = 6\n\n    for i in range(1, len(seq)):\n        if seq[i - 1] == \"X\":\n            if seq[i] == \"X\":\n                ans *= 2\n            elif seq[i] == \"Y\":\n                ans *= 2\n        elif seq[i - 1] == \"Y\":\n            if seq[i] == \"X\":\n                ans *= 1\n            elif seq[i] == \"Y\":\n                ans *= 3\n        ans %= 1000000007\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nS1 = list(input())\nS2 = list(input())\nMOD = 10**9 + 7\n\nif S1[0] == S2[0]:\n  ans = 3\n  i = 1\nelse:\n  ans = 6\n  i = 2\n\nwhile i < N:\n  pre_s1, pre_s2 = S1[i-1], S2[i-1]\n  s1, s2 = S1[i], S2[i]\n  if pre_s1 == pre_s2:\n    ans *= 2\n    ans %= MOD\n    if s1 == s2:\n      i += 1\n    else:\n      i += 2\n  else:\n    if s1 == s2:\n      i += 1\n    else:\n      ans *= 3\n      ans %= MOD\n      i += 2\n\nprint(ans)", "N=int(input())\nA=input()\nB=input()\np=1000000007\nC=[1 if a == b else 0 for a,b in zip(A,B)]\nif C[0]==1:\n  score=3\n  i=1\nelse:\n  score=6\n  i=2\nwhile i<N:\n  if C[i]==1:\n    if C[i-1]==1:\n    \tscore*=2\n    i+=1\n  else:\n    if C[i-1]==0:\n      score*=3\n    else:\n      score*=2\n    i+=2\nprint(score%p)", "N = int(input())\nS_1 = input()\nS_2 = input()\nMOD = 10**9 + 7\n\nif N == 1:\n    print(3)\n    return\n\nans = 3 if S_1[0] == S_2[0] else 6\n\nfor i in range(1, N):\n    if S_1[i-1] == S_1[i]:\n        continue\n    if S_1[i-1] == S_2[i-1]:\n        ans = ans * 2 % MOD\n    elif S_1[i] != S_2[i]:\n        ans = ans * 3 % MOD\nprint(ans)", "n = int(input())\ns = input() + \"@\"\nt = input() + \"@\"\nmod = 10 ** 9 + 7\n\n# \u60c5\u5831\u30921\u6b21\u5143\u306b\u3057\u3066\u51e6\u7406\u3057\u3084\u3059\u304f\u3059\u308b\u305c\n# \u7e26\u3067\u4e00\u81f4 True \u6a2a\u3067\u4e00\u81f4 False\nb = []\nfor i in range(n):\n    if s[i] == s[i + 1]:\n        continue\n    b.append(s[i] == t[i])\n\n# \u51e6\u7406\u3059\u308b\u305c\nif b[0]:\n    ans = 3\nelse:\n    ans = 6\n\nfor i in range(1, len(b)):\n    if b[i]:\n        if b[i - 1]:\n            ans *= 2\n    else:\n        if b[i - 1]:\n            ans *= 2\n        else:\n            ans *= 3\n    ans %= mod\n\nprint(ans)\n", "from sys import stdin, setrecursionlimit\nimport bisect, collections, copy, heapq, itertools, math, string\nsetrecursionlimit(10**8)\n\nINF = float(\"inf\")\nMOD = 1000000007\n\n\ndef input():\n    return stdin.readline().strip()\n\n\n\ndef main():\n\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    ans = 1\n\n    arrange = \"\"\n    flag = False\n    for c1, c2 in zip(s1, s2):\n        if c1 == c2:\n            arrange += \"t\"\n        else:\n            if flag:\n                flag = False\n            else:\n                arrange += \"y\"\n                flag = True\n    \n    flag = True\n    before = \"\"\n    for c in arrange:\n        if flag:\n            if c == \"y\":\n                ans *= 6\n            else:\n                ans *= 3\n            flag = False\n        else:\n            md = before+c\n            if md == \"yy\":  ans*=3\n            elif md == \"yt\":ans*=1\n            else:           ans*=2\n        before = c\n        ans %= MOD\n\n    print(ans)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\ns1 = input()\ns2 = input()\n\nans = 1\nmod = 10 ** 9 + 7\n\ntmp = 3\ni = 0\nf = -1\n\nwhile i < n:\n    if s1[i] == s2[i]:\n        if f == 1:\n            tmp = 1\n        elif f == 0:\n            tmp = 2\n        ans *= tmp\n        ans %= mod\n        f = 0\n    else:\n        if f == 1:\n            tmp = 3\n        elif f == 0:\n            tmp = 2\n        else:\n            tmp = 6\n        ans *= tmp\n        ans %= mod\n        i += 1\n        f = 1\n    i += 1\n        \nprint(ans)", "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\nn, = map(int,readline().split())\ns = input()\nt = input()\n\nMOD = 10**9+7\nv = 2 # \u521d\u671f\u72b6\u614b\nans = 1\ni = 0\nwhile i < n:\n    if s[i]==t[i]:\n        i += 1\n        if v==0:\n            ans *= 2\n        if v==2:\n            ans *= 3\n        v = 0\n        ans %= MOD\n    else:\n        i += 2\n        if v==0:\n            ans *= 2\n        if v==1:\n            ans *= 3\n        if v==2:\n            ans *= 6\n        v = 1\n        ans %= MOD\n\nprint(ans%MOD)", "N = int(input())\ngrid = [input(),input()]\nMOD = 10**9 + 7\n\ncnt = 3 if grid[0][0] == grid[1][0] else 6\n\nfor i in range(1,N):\n    a,b = grid[0][i-1],grid[1][i-1]\n    c,d = grid[0][i],grid[1][i]\n\n    if a == b:\n        cnt *= 2\n    elif c != d and a != c:\n        cnt *= 3\n    cnt %= MOD\n\nprint(cnt)", "#template\ndef inputlist(): return [int(j) for j in input().split()]\n#template\n\nmod = 10**9+7\n\nN = int(input())\n\nif N == 1:\n    print((3))\n    return\n\nS1 = list(input())\nS2 = list(input())\n\nblocks = []\ns = S1[0]\nfor i in range(1,N):\n    if S1[i] == S1[i-1]:\n        s += S1[i]\n    else:\n        blocks.append(s)\n        s = S1[i]\n    if i == N-1:\n        blocks.append(s)\n\nn = len(blocks)\n\nlast_blocks = [0]*n\n\nfor i in range(1,n):\n    last_blocks[i] = len(blocks[i-1])\n\nans = 1\nfor i in range(n):\n    tmp = blocks[i]\n    last_block = last_blocks[i]\n    if last_block == 0:\n        if len(tmp) == 1:\n            ans *= 3\n        else:\n            ans*=6\n    if last_block == 1:\n        ans *= 2\n    if last_block == 2:\n        if len(tmp) == 1:\n            ans*=1\n        if len(tmp) == 2:\n            ans*=3\n    ans %= mod\n\nprint((ans%mod))\n", "\n\nn = int(input())\ns=input()\nt=input()\nu=[]\n\nnow=0\nwhile(now<n):\n    if(s[now]==t[now]):\n        u.append(0)\n        now+=1\n    else:\n        u.append(1)\n        now+=2\n\n#print(u)\n\nans=1\n\nif(u[0]==1):\n    ans = 6\nelse:\n    ans = 3\n    \nfor i in range(1,len(u)):\n    if(u[i-1]==1 and u[i]==1):\n        ans*=3\n    elif(u[i-1]==1 and u[i]==0):\n        ans*=1\n    elif(u[i-1]==0 and u[i]==1):\n        ans*=2\n    else:\n        ans*=2\n    ans%=10**9+7\n\nprint(ans)", "n = int(input())\ns1 = input()\ns2 = input()\n\nmod = 10**9+7\nyoko = True\nif s1[0]==s2[0]:\n    ans = 3\n    cur = 1\n    yoko = False\nelse:\n    ans = 6\n    cur = 2\n\nwhile cur<n:\n    if s1[cur]==s2[cur]:\n        ans *= 1 if yoko else 2\n        ans %= mod\n        cur += 1\n        yoko = False\n    else:\n        ans *= 3 if yoko else 2\n        ans %= mod\n        cur += 2\n        yoko = True\n\nprint(ans)", "import math\n\n\ndef read_int():\n    return int(input().strip())\n\n\ndef read_ints():\n    return list(map(int, input().strip().split(' ')))\n\n\ndef solve():\n    N = read_int()\n    s1 = input()\n    s2 = input()\n    P = []\n    modulo = 10**9+7\n    H, V = 0, 1\n    for i in range(N):\n        if i > 0 and s2[i] == s2[i-1]:\n            P[-1] = H\n        else:\n            P.append(V)\n    dp = []\n    if P[0] == H:\n        dp.append(6)\n    else:\n        dp.append(3)\n    \"\"\"\n    A B     |C\n    B A|C    A\n\n    dp[i] = 3*dp[i-1] if P[i]=H&P[i-1]=H\n            2*dp[i-1]    P[i]=H&P[i-1]=V\n            2*dp[i-1]    P[i]=V&P[i-1]=V\n            1*dp[i-1]    P[i]=V&P[i-1]=V\n    \"\"\"\n    for i in range(1, len(P)):\n        if P[i] == H and P[i-1] == H:\n            dp.append(3*dp[i-1])\n        elif P[i] == H and P[i-1] == V:\n            dp.append(2*dp[i-1])\n        elif P[i] == V and P[i-1] == V:\n            dp.append(2*dp[i-1])\n        else:\n            dp.append(dp[i-1])\n        dp[-1] %= modulo\n    return dp[-1]\n\n\ndef __starting_point():\n    print((solve()))\n\n__starting_point()", "N = int(input())\nS = [list(input()) for _ in range(2)]\nprev = S[0][0] == S[1][0]\nif prev:\n    x = 3\n    i = 1\nelse:\n    x = 6\n    i = 2\nwhile i < N:\n    nxt = S[0][i] == S[1][i]\n    i += 1 if nxt else 2\n    if prev and nxt:\n        x *= 2\n    elif prev:\n        x *= 2\n    elif nxt:\n        x = x\n    else:\n        x *= 3\n    prev = nxt\nprint(x % (10**9+7))", "import sys\nsys.setrecursionlimit(10 ** 9)\ninput = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input().strip('\\n')\ndef MS(): return input().split()\ndef LS(): return list(input().strip('\\n'))\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\ndef gen_matrix(h, w, init): return [[init] * w for _ in range(h)]\nINF = float('inf')\n# from bisect import bisect_left, bisect_right\n# from heapq import heapify, heappop, heappush\nfrom math import ceil, floor, log2, log, sqrt, gcd\nfrom itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\nfrom collections import deque, defaultdict\nfrom pprint import pprint\n# import numpy as np    # cumsum\nfrom functools import reduce, lru_cache     # decorator: \u95a2\u6570\u3092\u30e1\u30e2\u5316\u518d\u8d77\u3057\u3066\u304f\u308c\u308b. max_size=128\n\ndef solve():\n    N = II()\n    S = LLS(2)\n    MOD = 1_000_000_007\n\n    i = 0\n    pre = 'N'\n    ans = 1\n    while i < N:\n        s, t = S[0][i], S[1][i]\n        if s == t:\n            if pre == 'N':\n                ans = 3\n            elif pre == 'H':\n                ans = ans * 2 % MOD\n            else:\n                ans = ans\n            i += 1\n            pre = 'H'\n        else:\n            if pre == 'N':\n                ans = 6\n            elif pre == 'H':\n                ans = ans * 2 % MOD\n            else:\n                ans = ans * 3 % MOD\n            i += 2\n            pre = 'V'\n\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n\n__starting_point()", "n=int(input())\na=input()\nb=input()\nif a[0]==b[0]:\n  c=3\n  i=1\n  d=0\nelse:\n  c=6\n  i=2\n  d=1\n\nwhile i<n:\n  if a[i]==b[i]:\n    if d==0:\n      c=(c*2)%(10**9+7)\n    else:\n      d=0\n  else:\n    i+=1\n    if d==0:\n      c=(c*2)%(10**9+7)\n      d=1\n    else:\n      c=(c*3)%(10**9+7)\n  i+=1\nprint(c)\n  \n", "n=int(input())\ns1=input()\na2=input()\n\ns=list(s1)\nt=[]\n\nif len(s)==1:\n    print((3))\n    return\n\nif len(s)==2:\n    print((6))\n    return\n\n\nfor i in range(1,len(s)-1):\n    if s[i]==s[i+1] and s[i]!=s[i-1]:\n        t.append(2)\n    if s[i]!=s[i+1] and s[i]!=s[i-1]:\n        t.append(1)\n\nif s[0]==s[1]:\n    t=[2]+t\nelse:\n    t=[1]+t\n\nif s[len(s)-1]!=s[len(s)-2]:\n    t.append(1)\n\n\nif t[0]==1:\n    ans=3\nelse:\n    ans=6\n\nfor i in range(1,len(t)):\n    if t[i]==1:\n        if t[i-1]==1:\n            ans*=2\n        else:\n            ans*=1\n    if t[i]==2:\n        if t[i-1]==1:\n            ans*=2\n        else:\n            ans*=3\n\nprint((ans%1000000007))\n", "N = int(input())\ndominoes = tuple(tuple(input()) for _ in range(2))\n# print(*dominoes)\nif N == 1:\n    print(3)\n    return\n\nans = 0\nMOD = 10 ** 9 + 7\nbefore_vertical = False\nif dominoes[0][0] == dominoes[1][0]:\n    ans += 3\n    now = 1\n    before_vertical = True\nelse:\n    ans += 6\n    now = 2\n\nwhile now < N:\n    if before_vertical:\n        if dominoes[0][now] == dominoes[1][now]:\n            ans *= 2\n            now += 1\n        else:\n            ans *= 2\n            now += 2\n            before_vertical = False\n    else:\n        if dominoes[0][now] == dominoes[1][now]:\n            ans *= 1\n            now += 1\n            before_vertical = True\n        else:\n            ans *= 3\n            now += 2\n    ans %= MOD\nprint(ans)", "MOD = 10 ** 9 + 7\nN = int(input())\ns1 = input()\ns2 = input()\nindex = 0\nans = 0\ntmp = 0\nif N == 1:\n    print(3)\n    return\n\nif s1[index] == s1[index + 1]:\n    ans = 6\n    tmp = 6\n    index += 2\nelse:\n    ans = 3\n    tmp = 3\n    index += 1\nwhile index < N:\n    if tmp == 3:\n        if s1[index] == s2[index]:\n            index += 1\n            tmp = 3\n            ans *= 2 % MOD\n        else:\n            index += 2\n            ans *= 2 % MOD\n            tmp = 6\n    else:\n        if s1[index] == s2[index]:\n            index += 1\n            tmp = 3\n        else:\n            index += 2\n            tmp = 6\n            ans *= 3 % MOD\n\nprint(ans % MOD)", "# https://atcoder.jp/contests/arc081/tasks/arc081_b\nfrom collections import defaultdict\nn = int(input())\ns1 = input()\ns2 = input()\nans = 0\nmod = 10 ** 9 + 7\n\nif s1[0] == s2[0]:\n    i = 1\n    ans += 3\n    flag = False\nelse:\n    i = 2\n    ans += 6\n    flag = True\nwhile i < n:\n    if flag:\n        if s1[i] == s2[i]:\n            flag = False\n        else:\n            ans *= 3 % mod\n            i += 1\n    else:\n        ans *= 2 % mod\n        if s1[i] != s2[i]:\n            flag = True\n            i += 1\n    i += 1\nprint((ans % mod))\n", "def resolve():\n  mod = 1000000007\n  N = int(input())\n  S = [list(input()) for _ in range(2)]\n\n  # \u30c9\u30df\u30ce\u306e\u6570\u306f\u6700\u5927\u3067 52\u3002\u3053\u308c\u3067\u30b0\u30e9\u30d5\u3092\u4f5c\u3063\u3066\u3042\u308a\u3048\u308b\u8272\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u639b\u3051\u7b97\u3057\u306a\u304c\u3089\u63a2\u7d22\u3057\u3066\u3044\u304f\uff1f\n\n  # \u5e45\u512a\u5148\u63a2\u7d22\n  # 0 \u306f\u672a\u63a2\u7d22\n  # \u5468\u8fba\u306b\u63a2\u7d22\u6e08\u307f\u306e\u30c9\u30df\u30ce\u304c\u3042\u308b\u5834\u5408\u30013-<\u63a2\u7d22\u6e08\u307f\u306e\u30c9\u30df\u30ce\u306e\u500b\u6570> \u3092\u8a08\u7b97\u3057\u3066\u3044\u304f\u3002\n\n  # \u4e0a\u8a18\u306e\u3084\u308a\u65b9\u3060\u3068\u554f\u984c\u304c\u3042\u308b\u3002\n  # \u30c9\u30df\u30ce\u304c\u7e26\u306e\u72b6\u614b\u3092 | \u6a2a\u306e\u72b6\u614b\u3092 - \u3067\u8868\u3059\u3068\u3001|- \u306e\u6642\u3068 -- \u306e\u6642\u3067\u53f3\u4e0b\u306e\u53d6\u308c\u308b\u30d1\u30bf\u30fc\u30f3\u6570\u304c\u5909\u308f\u308b\u3002\n  # |- \u306e\u6642\u3001\u53f3\u4e0b\u306f\u78ba\u5b9f\u306b 1 \u30d1\u30bf\u30fc\u30f3\u3060\u304c\u3001-- \u306e\u6642\u3001\u53f3\u4e0a\u3068\u5de6\u4e0b\u304c\u540c\u3058\u8272\u306e\u6642\u306f\u53f3\u4e0b\u304c\u3068\u308a\u3046\u308b\u8272\u306f 2 \u30d1\u30bf\u30fc\u30f3\u306b\u306a\u308a\u3001\n  # \u53f3\u4e0a\u3068\u5de6\u4e0b\u304c\u9055\u3046\u8272\u306e\u6642\u306f 1 \u30d1\u30bf\u30fc\u30f3 (\u5de6\u4e0a\u3068\u540c\u3058\u8272) \u306b\u3057\u304b\u306a\u3089\u306a\u3044\u3002\n  # \u53f3\u4e0a\u3068\u5de6\u4e0b\u306e\u72b6\u614b\u3067\u53d6\u308c\u308b\u30d1\u30bf\u30fc\u30f3\u304c\u5909\u5316\u3059\u308b\u306e\u3067\u3001\u30ce\u30fc\u30c9\u6bce\u306e\u5358\u7d14\u306a\u639b\u3051\u7b97\u3060\u3068\u96e3\u3057\u3044\u3002\n  # \u306a\u306e\u3067\u3001\u7e26\u65b9\u5411\u3067\u307e\u3068\u3081\u3066\u8003\u3048\u308b\u3002\u69cb\u9020\u4e0a\u3001\u30c9\u30df\u30ce\u304c\u4e92\u3044\u9055\u3044\u306b\u7d44\u307f\u5408\u308f\u3055\u308b\u4e8b\u306f\u306a\u3044\u3002\u6a2a\u9577\u306b\u7f6e\u3044\u305f\u6642\u3001\u305d\u306e\u4e0b\u306e\u30c9\u30df\u30ce\u3082\u5fc5\u305a\u7dda\u5bfe\u8c61\u306b\u306a\u308b\u3002\n  # -- \u306e\u6642\u3001\u5de6\u4e0a\u306f 3 \u30d1\u30bf\u30fc\u30f3\u3001\u5de6\u4e0b\u306f 2 \u30d1\u30bf\u30fc\u30f3\u306e 6 \u30d1\u30bf\u30fc\u30f3\u3002\u53f3\u5074\u306f\u53f3\u4e0a\u304c\u5de6\u4e0b\u3068\u540c\u3058\u5834\u5408\u306f 2 \u30d1\u30bf\u30fc\u30f3\u3067\u3001\u305d\u3046\u3058\u3083\u7121\u3044\u5834\u5408\u306f 1 \u30d1\u30bf\u30fc\u30f3\u306e\u5408\u8a08 3 \u30d1\u30bf\u30fc\u30f3\n\n  # \u4e0a\u3060\u3051\u3092\u898b\u3066\u3044\u3063\u3066\u3001\u5148\u306b\u4e0b\u3092\u898b\u3066\u540c\u3058\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u305f\u3089 | \u3092\u5165\u308c\u308b\u3002\n  # \u6b21\u306b\u53f3\u3092\u898b\u3066\u540c\u3058\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u305f\u3089 - \u3092\u5165\u308c\u308b\u3002\n  # \u4e0a\u8a18\u3092\u7e70\u308a\u8fd4\u3059\u3068 ||--|--| \u307f\u305f\u3044\u306a\u611f\u3058\u306b\u306a\u308b\u3002\n  domino_directions = []\n  for i in range(N):\n    if S[0][i] == S[1][i]:\n      domino_directions.append(\"|\")\n      continue\n    if i+1 < N:\n      if S[0][i] == S[0][i+1]:\n        domino_directions.append(\"-\")\n        i+=1\n  # print(*domino_directions)\n  # \u5de6\u7aef\u306f | \u3060\u3063\u305f\u3089 3 \u30d1\u30bf\u30fc\u30f3 - \u3060\u3063\u305f\u3089 3*2 = 6 \u30d1\u30bf\u30fc\u30f3\n  ans = 3 if domino_directions[0] == \"|\" else 6\n  for i in range(1, N):\n    # \u5de6\u5074\u3068\u53f3\u5074\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u30d1\u30bf\u30fc\u30f3\u3092\u6c7a\u3081\u308b\n    pair = \"\".join(domino_directions[i-1:i+1])\n\n    if pair == \"||\" or pair == \"|-\": ans*=2\n    elif pair == \"--\": ans*=3\n\n    if ans > mod: ans%=mod\n  print(ans)\nresolve()", "MOD = 1_000_000_007\n\n\nN = int(input())\nS1 = input()\nS2 = input()\n\nans = 1\nidx = 0\nif S1[idx] == S2[idx]:\n    ans *= 3\n    idx += 1\nelse:\n    ans *= 6\n    idx += 2\nwhile idx < N:\n    if S1[idx] == S2[idx]:\n        if S1[idx - 1] == S2[idx - 1]:\n            ans *= 2\n        idx += 1\n    else:\n        if S1[idx - 1] == S2[idx - 1]:\n            ans *= 2\n        else:\n            ans *= 3\n        idx += 2\nans %= MOD\nprint(ans)\n", "import sys\n\ninput = sys.stdin.readline\nN = int(input())\nS1 = input().strip()\nS2 = input().strip()\n\nmod = 10**9+7\nans = 1\nprev = \"\"\nfor i in range(N):\n    if i == 0:\n        ans *= 3\n        if S1[i] != S2[i]:\n            ans *= 2\n    else:\n        if S1[i-1] == S1[i]:\n            pass\n        else:\n            if S1[i-1] == S2[i-1]:\n                ans *= 2\n                ans %= mod\n            else:\n                if S1[i] == S2[i]:\n                    pass\n                else:\n                    ans *= 3\n                    ans %= mod\n\nprint(ans)", "\ndef resolve():\n    MOD = 10 ** 9 + 7\n    N = int(input())\n    S = input()\n    T = input()\n\n    i = 0\n    ans = 0\n\n    flag = 1\n    if S[i] == T[i]:  # \u7e26\u306b\u7f6e\u3044\u3066\u3044\u308b\n        # \u8272\u30923\u901a\u308a\u9078\u3079\u308b\n        ans = 3\n        i += 1\n        flag = 1\n    else:\n        # \u8272\u30926\u901a\u308a\u9078\u3079\u308b\n        ans = 6\n        i += 2\n        flag = 2\n\n    while i < N:\n        if S[i] == T[i]:  # \u7e26\u306b\u7f6e\u3044\u3066\u3044\u308b\n            if flag == 1:\n                ans *= 2\n                ans %= MOD\n            i += 1\n            flag = 1\n        else:\n            if flag == 1:\n                ans *= 2\n                ans %= MOD\n            else:\n                ans *= 3\n                ans %= MOD\n            i += 2\n            flag = 2\n\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n__starting_point()", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nS = readline().rstrip()\n\nif N == 1:\n  print(3)\n  return\n\nDIV = 1000000007\n\nind = 0\nans = 1\ntate = False\nif S[ind] == S[ind + 1]:\n  ans *= 6\n  ind += 2\n  tate = False\nelse:\n  ans *= 3\n  ind += 1\n  tate = True\n  \nwhile ind < N:\n  if ind + 1 == N or S[ind] != S[ind + 1]: # \u7e26\n    if tate:\n      ans *= 2\n    else:\n      ans *= 1\n    ans %= DIV\n    tate = True\n    ind += 1\n  else: # \u6a2a\n    if tate:\n      ans *= 2\n    else:\n      ans *= 3\n    ans %= DIV\n    tate = False\n    ind += 2\n      \nprint(ans)", "MOD = 10**9 + 7\nN = int(input())\ns1 = input()\ns2 = input()\n\nresult = 1\n\ns_index = 0\n\n# \u3068\u308a\u3042\u3048\u305a\u4e00\u756a\u5de6\u306e\u30c9\u30df\u30ce\u3092\u898b\u308b\n# \u7e26\u7f6e\u304d\nif s1[s_index] == s2[s_index]:\n    result *= 3\n    s_index += 1\n    prev_verticalp = True\nelse:\n    result *= 6\n    s_index += 2\n    prev_verticalp = False\n\n# \u4e8c\u756a\u76ee\u4ee5\u964d\u306f\u524d\u56de\u7e26\u7f6e\u304d\u304b\u6a2a\u7f6e\u304d\u304b\u3067\u5909\u308f\u308b\nwhile s_index < N:\n    if prev_verticalp:\n        if s1[s_index] == s2[s_index]:\n            result = (result * 2) % MOD\n            s_index += 1\n            prev_verticalp = True\n        else:\n            result = (result * 2) % MOD\n            s_index += 2\n            prev_verticalp = False\n    \n    else:\n        if s1[s_index] == s2[s_index]:\n            s_index += 1\n            prev_verticalp = True\n        else:\n            result = (result * 3) % MOD\n            s_index += 2\n            prev_verticalp = False\n\nprint(result)\n\n", "import sys\nsys.setrecursionlimit(10 ** 9)\ninput = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return input().strip('\\n')\ndef MS(): return input().split()\ndef LS(): return list(input().strip('\\n'))\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\ndef gen_matrix(h, w, init): return [[init] * w for _ in range(h)]\nINF = float('inf')\n# from bisect import bisect_left, bisect_right\n# from heapq import heapify, heappop, heappush\nfrom math import ceil, floor, log2, log, sqrt, gcd\nfrom itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\nfrom collections import deque, defaultdict\nfrom pprint import pprint\n# import numpy as np    # cumsum\nfrom functools import reduce, lru_cache     # decorator: \u95a2\u6570\u3092\u30e1\u30e2\u5316\u518d\u8d77\u3057\u3066\u304f\u308c\u308b. max_size=128\n\ndef solve():\n    N = II()\n    S = LLS(2)\n    MOD = 1_000_000_007\n\n    i = 0\n    pre = 'N'\n    ans = 1\n    while i < N:\n        s, t = S[0][i], S[1][i]\n        if s == t:\n            tp = 'H'\n            i += 1\n        else:\n            tp = 'V'\n            i += 2\n\n        if pre == 'N':\n            if tp == 'H':\n                ans = 3\n            else:\n                ans = 6\n        else:\n            p = [pre, tp]\n            if p == ['H', 'H']:\n                ans = ans * 2 % MOD\n            elif p == ['H', 'V']:\n                ans = ans * 2 % MOD\n            elif p == ['V', 'H']:\n                pass\n            elif p == ['V', 'V']:\n                ans = ans * 3 % MOD\n        pre = tp\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n\n__starting_point()", "N,S,T=open(0)\nans=3\ni=1\nif S[0]!=T[0]:\n    ans*=2\n    i*=2\nwhile i<int(N):\n    if S[i-1]==T[i-1]:\n        ans*=2\n    elif S[i]!=T[i]:\n        ans*=3\n    i+=1+(S[i]!=T[i])\nprint(ans%(10**9+7))", "N = int(input())\nS = [input() for i in range(2)]\nMOD = 1000000007\n\nans = 1\nprev = ''\ni = 0\nwhile i < N:\n    if S[0][i] == S[1][i]:\n        if prev == '|':\n            ans *= 2\n        elif prev == '-':\n            ans *= 1\n        else:\n            ans *= 3\n        prev = '|'\n        i += 1\n    else:\n        if prev == '|':\n            ans *= 2\n        elif prev == '-':\n            ans *= 3\n        else:\n            ans *= 6\n        prev = '-'\n        i += 2\n\n    ans %= MOD\n\nprint(ans)", "def main():\n    N = int(input())\n    S = []\n    S.append(input())\n    S.append(input())\n    MOD = 10**9 + 7\n    ans = 1\n    pre_mino_flag = -1 # vertical:0, horizontal:1\n    pass_flag = False\n    if S[0][0] == S[1][0]:\n        ans *= 3\n        pre_mino_flag = 0\n    else:\n        ans *= 6\n        pre_mino_flag = 1\n        pass_flag = True\n    \n    for i in range(1, N):\n        if pass_flag:\n            pass_flag = False\n            continue\n        \n        if S[0][i] == S[1][i]:\n            if pre_mino_flag == 0:\n                ans *= 2\n                ans %= MOD\n            else:\n                pass\n            pre_mino_flag = 0\n        else:\n            pass_flag = True\n            if pre_mino_flag == 0:\n                ans *= 2\n                ans %= MOD\n            else:\n                ans *= 3\n                ans %= MOD\n            pre_mino_flag = 1\n            \n    print(ans)\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\nMOD = 1000000007\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N = I()\n    S = [SS() for _ in range(2)]\n\n    # \u30c9\u30df\u30ce\u306e\u7e26\u6a2a\u3092\u5224\u5225 0\u884c\u76ee\u3060\u3051\u898b\u308c\u3070\u826f\u3044\n    t = []\n    i = 0\n    if N == 1:\n        t.append('v')\n    else:\n        while i + 1 < N:\n            if S[0][i] == S[0][i+1]:\n                t.append('h')\n                i += 2\n            else:\n                t.append('v')\n                i += 1\n        if S[0][-2] != S[0][-1]:\n            t.append('v')\n    # print(t)\n\n    ans = 1\n    if t[0] == 'h':\n        ans *= 6\n    else:\n        ans *= 3\n    ans %= MOD\n    for i in range(len(t) - 1):\n        if t[i] == 'h':\n            if t[i+1] == 'h':\n                ans *= 3\n            else:\n                ans *= 1\n        else:\n            if t[i+1] == 'h':\n                ans *= 2\n            else:\n                ans *= 2\n        ans %= MOD\n    \n    print(ans)\n                \ndef __starting_point():\n    resolve()\n\n__starting_point()", "N = int(input())\nS = [input() for _ in range(2)]\n\ntypes = []\ni = 0\nwhile i < N:\n  if S[0][i] == S[1][i]:\n    types.append(1)\n    i += 1\n  else:\n    types.append(2)\n    i += 2\nMOD = 10**9 + 7\nif types[0] == 1:\n  ans = 3\nelse:\n  ans = 6\nfor i in range(1,len(types)):\n  if types[i] == 1 and types[i-1] == 1:\n    ans *= 2\n  elif types[i] == 1 and types[i-1] == 2:\n    ans *= 1\n  elif types[i] == 2 and types[i-1] == 1:\n    ans *= 2\n  elif types[i] == 2 and types[i-1] == 2:\n    ans *= 3\n  ans %= MOD\nprint((ans % MOD))\n  \n", "N=int(input())\nS1=input()\nS2=input()\nmod=1000000007\ni=0\narray=[]\nwhile i<N:\n  if S1[i]==S2[i]:\n    array.append(0)\n    i+=1\n  else:\n    array.append(1)\n    i+=2\nfor i in range(len(array)):\n  if i==0:\n    if array[i]==0:\n      ans=3\n    else:\n      ans=6\n  else:\n    if array[i]==0:\n      if array[i-1]==0:\n        ans=ans*2\n    else:\n      if array[i-1]==0:\n        ans=ans*2\n      else:\n        ans=ans*3\n  ans=ans%mod\nprint(ans)", "N = int(input())\ns1 = list(input())\ns2 = list(input())\n\ns = list(zip(s1, s2))\nss = []\n\nskip = 0\nfor i in s:\n    if skip:\n        skip=0\n        continue\n\n    if i[0]!=i[1]:\n        skip = 1\n    ss.append(i)\n# print(ss)\n\n\nmod = 10**9+7\nans = 1\nif ss[0][0]==ss[0][1]:\n    f = 1\n    ans *= 3\nelse:\n    f = 0\n    ans *= 6\n\n#f = 1 : X\nfor i in range(1, len(ss)):\n    if ss[i][0]==ss[i][1]:\n        nf = 1\n    else:\n        nf = 0\n\n    if f:\n        ans *= 2\n    else:\n        if not nf:\n            ans *= 3\n    ans %= mod\n    f = nf\nprint(ans)", "n = int(input())\ns1 = input()\ns2 = input()\n\nMOD = 10**9 + 7\n\nfor i, (a, b) in enumerate(zip(s1, s2)):\n    if i == 0:\n        if a != b:\n            dp = 6\n        else:\n            dp = 3\n        prev = (a, b)\n    elif prev[0] == a and prev[1] == b:\n        continue\n    elif a == b:\n        if prev[0] == prev[1]:\n            dp *= 2\n            dp %= MOD\n            prev = (a, b)\n        else:\n            prev = (a, b)\n    else:\n        if prev[0] == prev[1]:\n            dp *= 2\n            dp %= MOD\n            prev = (a, b)\n        else:\n            dp *= 3\n            dp %= MOD\n            prev = (a, b)\nprint(dp)", "N=int(input())\ns1=input()\ns2=input()\nans=0\nmod=10**9+7\n\nif s1[0]==s2[0]:\n    i=1\n    ans+=3\n    dual=False\nelse:\n    i=2\n    ans+=6\n    dual=True\nwhile i<N:\n    if dual:\n        if s1[i]==s2[i]:\n            dual=False\n        else:\n            ans*=3\n            ans%=mod\n            i+=1\n    else:\n        ans*=2\n        ans%=mod\n        if s1[i]!=s2[i]:\n            dual=True\n            i+=1\n    i+=1\nprint(ans%mod)", "n = int(input())\nx = input()\ny = input()\n\nnow = 1\nflag = 0\n#preflag = 0\n\n\ni = 0\nwhile (i < n):\n    if (i == 0):\n        if (x[i] == y[i]):\n            now *= 3\n            flag = 1\n            i += 1\n        else:\n            now *= 6\n            flag = 0\n            i += 2\n    else:\n        if (x[i] == y[i]):\n            if (flag == 0):\n                flag = 1\n                #preflag = 0\n                i += 1\n            else:\n                now *= 2\n                now = now%1000000007\n                flag = 1\n                #preflag = 1\n                i += 1\n        else:\n            if (flag == 0):\n                now *= 3\n                now = now%1000000007\n                i += 2\n                flag = 0\n            else:\n                now *= 2\n                now = now%1000000007\n                i += 2\n                flag = 0\n\nprint(now)\n", "def solve():\n    def dfs(p, prea, preb):\n        if p == n:\n            return 1\n        if (p, prea, preb) in dp:\n            return dp[(p, prea, preb)]\n        ret = 0\n        if s1[p] == s2[p]:\n            for i in range(3):\n                if i != prea and i != preb:\n                    ret += dfs(p + 1, i, i)  \n        else:\n            for i in range(3):\n                for j in range(3):\n                    if i != j and i != prea and j != preb:\n                        ret += dfs(p + 2, i, j) \n\n        ret %= mod \n        dp[(p, prea, preb)] = ret \n        return ret \n\n    n = int(input()) \n    s1 = input()\n    s2 = input()\n    mod = 10 ** 9 + 7\n    dp = {}\n    print((dfs(0, -1, -1)))\nsolve()\n\n                \n", "n = int(input())\ns1=input()\ns2=input()\nk=1\ni=0\nif s1[0]==s2[0]:\n    i+=1\n    k=3\nelse:\n    i+=2\n    k=6\nmod=1000000007\nwhile i<n:\n    if s1[i]!=s2[i] and s1[i-1]!=s2[i-1]:\n        k*=3\n        i+=2\n    elif s1[i]!=s2[i] and s1[i-1]==s2[i-1]:\n        k*=2\n        i+=2\n    else:\n        if s1[i-1]==s2[i-1]:\n            k*=2\n        i+=1\n    k%=mod\nprint(k)\n        \n", "N = int(input())\nS1 = input()\nS2 = input()\nans = 0\ntate = True\n\nif S1[0] == S2[0]:\n    ans = 3\n    tate = True\n    i = 1\nelse:\n    ans = 6\n    tate = False\n    i = 2\n\nwhile i < N:\n    if S1[i] == S2[i]:\n        if tate:\n            ans *= 2\n        i += 1\n        tate = True\n\n    else:\n        if tate:\n            ans *= 2\n        else:\n            ans *= 3\n        i += 2\n        tate = False\n\n    ans %= 1000000007\n\nprint(ans)", "import sys\nimport os\nfrom copy import copy\nimport operator\nimport time\nimport datetime\nimport math\nfrom math import floor, ceil, sqrt, log\nimport statistics\nfrom statistics import mean, median\nfrom decimal import Decimal as D\nfrom fractions import Fraction as F\nimport functools\nimport random\nfrom random import randint, shuffle\nimport bisect\nimport string\nfrom collections import deque\nimport collections\nimport itertools\nimport heapq\n\nsys.setrecursionlimit(4100000)\nproduct = functools.partial(functools.reduce, operator.mul)\nINF = float(\"inf\")\n\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parents = [-1] * n\n\n    def union(self, x, y):\n        x, y = self.find(x), self.find(y)\n        if x != y:\n            if self.parents[x] > self.parents[y]:\n                x, y = y, x\n            self.parents[x] += self.parents[y]\n            self.parents[y] = x\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        self.parents[x] = self.find(self.parents[x])\n        return self.parents[x]\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return list(filter(lambda x: x < 0, self.parents))\n\n    def group_count(self):\n        return len(self.roots())\n\n    def max_size(self):\n        return -min(self.parents)\n\n    def min_size(self):\n        return -max(self.roots())\n\n    def append(self, n):\n        self.parents += [-1] * n\n\n\nclass Imos:\n    def __init__(self, n):\n        self.val = [0] * n\n\n    def add(self, x, y, n=None):\n        if n is None:\n            n = 1\n        self.val[x] += n\n        if len(self.val) > y + 1:\n            self.val[y + 1] -= n\n\n    def imos(self):\n        for i in range(1, len(self.val)):\n            self.val[i] += self.val[i - 1]\n\n    def max(self):\n        return max(self.val)\n\n    def min(self):\n        return min(self.val)\n\n\nclass CS:\n    def __init__(self, grid):\n        self.cs = grid\n        for i0 in range(len(grid)):\n            for i1 in range(len(grid[0])):\n                if i0 == 0:\n                    if i1 == 0:\n                        continue\n                    self.cs[i0][i1] += self.cs[i0][i1 - 1]\n                else:\n                    if i1 == 0:\n                        self.cs[i0][i1] += self.cs[i0 - 1][i1]\n                    else:\n                        self.cs[i0][i1] += self.cs[i0 - 1][i1] + self.cs[i0][i1 - 1] - \\\n                                           self.cs[i0 - 1][i1 - 1]\n\n    def sum(self, start_0, start_1, end_0, end_1):\n        if start_0 == 0:\n            if start_1 == 0:\n                return self.cs[end_0][end_1]\n            return self.cs[end_0][end_1] - self.cs[end_0][start_1 - 1]\n        if start_1 == 0:\n            return self.cs[end_0][end_1] - self.cs[start_0 - 1][end_1]\n        start_0 -= 1\n        start_1 -= 1\n        return self.cs[end_0][end_1] - self.cs[start_0][end_1] - self.cs[end_0][\n            start_1] + self.cs[start_0][start_1]\n\n\ndef mod(n):\n    return n % (10 ** 9 + 7)\n\n\ndef sinput():\n    return sys.stdin.readline()[:-1]\n\n\ndef input():\n    inputs = list(map(int, sys.stdin.readline().split()))\n    if len(inputs) == 1:\n        return inputs[0]\n    return inputs\n\n\ndef listban(l):\n    return list(map(list, set(map(tuple, l))))\n\n\ndef div(n):\n    lower_divisors, upper_divisors = [], []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n // i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\n\ndef prime(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\n\ndef div_counter(l, n):\n    return prime(l).count(n)\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef C(n, r):\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef P(n, r):\n    if n < r:\n        return 0\n    return math.factorial(n) // math.factorial(n - r)\n\n\ndef H(n, r):\n    return C(n + r - 1, r)\n\n\ndef cos(x, y, a):\n    return (x ** 2 + y ** 2 - 2 * x * y * math.cos(math.radians(a))) ** 0.5\n\n\ndef DFS(g, s, pos=None):\n    if pos is None:\n        pos = set()\n    pos.add(s)\n    for i in g[s]:\n        if not (i in pos):\n            DFS(g, i, pos)\n    return pos\n\n\ndef DFS_one(g, s, pos=None):\n    if pos is None:\n        pos = set()\n    pos = copy(pos)\n    pos.add(s)\n    b = copy(pos)\n    m = copy(pos)\n    for i in g[s]:\n        if not (i in pos):\n            b = DFS(g, i, pos)\n            if len(m) < len(b):\n                m = b\n    return m\n\n\ndef BFS(g, q, pos=None):\n    if pos is None:\n        pos = set()\n    if type(q) == deque:\n        pos.add(q)\n        q = deque([q])\n    pos.add(q[-1])\n    for i in g[q.pop()]:\n        if not i in pos:\n            q.append(i)\n    while q != deque():\n        pos, q = BFS(g, q, pos)\n    return pos, q\n\n\ndef SSP(a, li=None):\n    if li is None:\n        li = []\n    if len(a) == 1:\n        return [a[0]]\n    return list(set(\n        li + SSP(a[1:], li) + list(map(lambda x: x + a[0], SSP(a[1:], li))) + [a[0]]))\n\n\ndef dijkstra(g, s):\n    n = len(g)\n    dist = [10 ** 100] * n\n    hq = [(0, s)]\n    dist[s] = 0\n    seen = [False] * n\n    while hq:\n        v = heapq.heappop(hq)[1]\n        seen[v] = True\n        for to, cost in g[v]:\n            if seen[to] == False and dist[v] + cost < dist[to]:\n                dist[to] = dist[v] + cost\n                heapq.heappush(hq, (dist[to], to))\n    return dist\n\n\ndef LIS(b):\n    l = [b[0]]\n    for i in b:\n        if i > l[-1]:\n            l += [i]\n        else:\n            l[bisect.bisect_left(l, i)] = i\n    return len(l)\n\n\ndef two(n):\n    return len(str(bin(n))) - str(bin(n)).rfind(\"1\") - 1\n\n\ndef yn(b):\n    if b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef op(s):\n    print(s)\n    return\n\n\nn = input()\ns = [sinput()]\ns += [sinput()]\nskip = False\nna = [0] * n\nans = 1\nfor i in range(n):\n    if skip:\n        skip = False\n        continue\n    if s[0][i] == s[1][i]:\n        if na[i-1] == 0:\n            ans *= 3\n            ans %= 1000000007\n        elif na[i-1] == 1:\n            ans *= 2\n            ans %= 1000000007\n        na[i] = 1\n    else:\n        if na[i-1] == 0:\n            ans *= 6\n            ans %= 1000000007\n        elif na[i-1] == 1:\n            ans *= 2\n            ans %= 1000000007\n        elif na[i-1] == 2:\n            ans *= 3\n            ans %= 1000000007\n        na[i] = 2\n        na[i+1] = 2\n        skip = True\nprint(ans)", "n=int(input())\ns1=input()\ns2=input()\ncnt=[]\ncnt2=0\nfor i in range(n):\n    if cnt2>=n:\n        break\n    if s1[cnt2]==s2[cnt2]:\n        cnt2+=1\n        cnt.append(1)\n    else:\n        cnt2+=2\n        cnt.append(2)\nif cnt[0]==1:\n    ans=3\nelse:\n    ans=6\nmod=10**9+7\nfor i in range(1,len(cnt)):\n    if cnt[i-1]==1:\n        ans*=2\n    elif cnt[i-1]==2 and cnt[i]==2:\n        ans*=3\n    ans%=mod\nprint(ans)\n", "N = int(input())\nS1 = input()\nS2 = input()\n\nif S1[0] == S2[0]:\n    ans = 3\n    t = 1\nelse:\n    ans = 6\n    t = 2 \n\nfor i in range(1, N):\n    if S1[i] == S1[i-1]:\n        continue\n    if S1[i] == S2[i]:\n        if t == 1:\n            ans *= 2\n        t = 1\n    else:\n        if t == 1:\n            ans *= 2\n        else:\n            ans *= 3\n        t = 2\n    ans %= 10 ** 9 + 7\n\nprint(ans)\n", "n = int(input())\ns1 = input()\ns2 = input()\n\nif s1[0] == s2[0]:\n    ans = 3\n    i = 1\nelse:\n    ans = 6\n    i = 2\n\nwhile i < n:\n    if s1[i] == s2[i]:\n        if s1[i-1] == s2[i-1]:\n            ans *= 2\n        i += 1\n    else:\n        if s1[i-1] == s2[i-1]:\n            ans *= 2\n        else:\n            ans *= 3\n\n        i += 2\n\n    ans %= 1000000007\n\nprint(ans)", "N = int(input())\nS1 = str(input())\nS2 = str(input())\n\nif S1[0] == S2[0]:\n  ans = 3\n  cnt = 1\n  tmp = 0\nelse:\n  ans = 6\n  cnt = 2\n  tmp = 1\n  \nwhile cnt < N:\n  if tmp == 0:\n    if S1[cnt] == S2[cnt]:\n      ans *= 2\n      cnt += 1\n    else:\n      ans *= 2\n      cnt += 2\n      tmp = 1\n  else:\n    if S1[cnt] == S2[cnt]:\n      cnt += 1\n      tmp = 0\n    else:\n      ans *= 3\n      cnt += 2\nprint(ans%1000000007)", "n = int(input())\ns1 = input()\ns2 = input()\nmod = 10**9+7\nans = 1\ni = 0\nprev = \"None\"\nwhile i<n:\n    if s1[i] == s2[i]:\n        if prev == \"None\":\n            ans = 3\n        elif prev == \"X\":\n            ans = ans*2%mod\n        else:\n            pass\n        i += 1\n        prev = \"X\"\n    else:\n        if prev == \"None\":\n            ans = 6\n        elif prev == \"X\":\n            ans = ans*2%mod\n        else:\n            ans = ans*3%mod\n        i += 2\n        prev = \"Y\"\nprint(ans)\n", "n = int(input())\ns = [input() for _ in range(2)]\nmod = 1000000007\ncnt = [[0,0,0],[0,2,2],[0,1,3]]\nc = []\ni = 0\nwhile i<n:\n    if s[0][i]==s[1][i]:\n        c.append(1)\n        i += 1\n    elif i+1<n and s[0][i]==s[0][i+1]:\n        c.append(2)\n        i += 2\nif c[0]==1:ans = 3\nelif c[0]==2:ans = 6\nfor i in range(1,len(c)):\n    ans *= cnt[c[i-1]][c[i]]\n    ans %= mod\nprint(ans%mod)", "def resolve():\n    N = int(input())\n    S1 = list(input())\n    S2 = list(input())\n    mod = 10**9+7\n    if S1[0] == S2[0]:\n        ans = 3\n        now = 0 #0 ==\u7e26\n        ct = 1\n    else:\n        ans = 6\n        now = 1 #1 \u6a2a\n        ct = 2\n\n    while ct < N:\n        if S1[ct] == S2[ct]:    #\u6b21\u304c\u7e26\n            if now == 0:        #\u524d\u304c\u7e26\n                ans *= 2\n                ans %= mod\n            else:               #\u524d\u304c\u6a2a\n                pass\n            now = 0\n            ct += 1\n        else:                   #\u6b21\u304c\u6a2a\n            if now == 0:        #\u524d\u304c\u7e26\n                ans *= 2\n                ans %= mod\n            else:               #\u524d\u304c\u6a2a\n                ans *= 3\n                ans %= mod\n            now = 1\n            ct += 2\n\n    print(ans)\nresolve()", "n = int(input())\ns = [input() for _ in range(2)]\nmod = 1000000007\ncnt = [[2,2],[1,3]]\nc = []\ni = 0\nwhile i<n:\n    if s[0][i]==s[1][i]:\n        c.append(1)\n        i += 1\n    elif i+1<n and s[0][i]==s[0][i+1]:\n        c.append(2)\n        i += 2\nif c[0]==1:ans = 3\nelse:ans = 6\nfor i in range(1,len(c)):\n    ans *= cnt[c[i-1]-1][c[i]-1]\n    ans %= mod\nprint(ans%mod)", "N=int(input())\n\nMod=10**9+7\nS=input()\nT=input()\n\nif S[0]==T[0]:\n    K,I=3,1\n    Mode=True\nelse:\n    K,I=6,2\n    Mode=False\n\n#Mode:True->\u7e26,False->\u6a2a\n\nwhile I<N:\n    if S[I]==T[I]:\n        if Mode:\n            K*=2\n        else:\n            K*=1\n        Mode=True\n        I+=1\n    else:\n        if Mode:\n            K*=2\n        else:\n            K*=3\n        Mode=False\n        I+=2\n    K%=Mod\nprint(K)", "n = int(input())\nk = [input(),input()]\nrt = 1\ni=0\npre = 0\nmods = 1000000007\nwhile i < n:\n  if i>0:\n    if k[0][i]==k[1][i]:\n      if pre:\n        rt*=2\n      pre = 1\n      i+=1\n    else:\n      if pre:\n        rt*=2\n      else:\n        rt*=3\n      pre = 0\n      i+=2\n  else:\n    if k[0][i]==k[1][i]:\n      rt*=3\n      pre = 1\n      i+=1\n    else:\n      rt*= 6\n      pre = 0\n      i += 2\n  rt%=mods\nprint(rt)", "N = int(input())\nS1=input()\nS2=input()\n\nm1=\"\"\nm=10**9+7\nS1+=\".\"\nfor i in range(len(S1)-1):\n    if S1[i]==S1[i+1]:\n        m1+='y'\n    else:\n        m1+='t'\nm1 = m1.replace('yt','y')\nscore = [1]*len(m1)\nfor i in range(1,len(m1)):\n    if m1[i-1]=='t' and m1[i]=='t':\n        score[i]=2\n    elif m1[i-1]=='y' and m1[i]=='t':\n        score[i]=1\n    elif m1[i-1]=='t' and m1[i]=='y':\n        score[i]=2\n    elif m1[i-1]=='y' and m1[i]=='y':\n        score[i] = 3\nif m1[0]=='y':\n    score[0]=6\nelse:\n    score[0]=3\n\nans = 1\nfor i in range(len(m1)):\n    ans =(ans*score[i])%m\nprint(ans)", "n = int(input())\ns = input()\nt = input()\nprev = -1\ni = 0\nans = 1\nmod = pow(10,9)+7\nwhile i != n:\n    if s[i] == t[i]:\n        if prev == -1:\n            ans *= 3\n        elif prev == 0:\n            ans *= 2\n        prev = 0\n        i += 1\n    else:\n        if prev == -1:\n            ans *= 6\n        elif prev == 0:\n            ans *= 2\n        else:\n            ans *= 3\n        prev = 1\n        i += 2\n    ans %= mod\nprint(ans)"]