["from sys import stdin, stdout\ninput, print = stdin.readline, stdout.write\nn = int(input())\nr, g, b = [], [], []\nans = 0\nfor i in range(n):\n    x, t = [i for i in input().split()]\n    x = int(x)\n    if t == 'P':\n        g.append(x)\n    elif t == 'R':\n        r.append(x)\n    else:\n        b.append(x)\n        \nif len(g) == 0:\n    if len(r):\n        ans += r[-1] - r[0]\n    if len(b):\n        ans += b[-1] - b[0]\n    print(str(ans))\n    return\n    \nif not len(r):\n    r.append(g[0])\nif not len(b):\n    b.append(g[0])\nif r[0] < g[0]:\n    ans += g[0] - r[0]\nif b[0] < g[0]:\n    ans += g[0] - b[0]\nif r[-1] > g[-1]:\n    ans += r[-1] - g[-1]\nif b[-1] > g[-1]:\n    ans += b[-1] - g[-1]\nbi, ri = 0, 0\n\nfor i in range(len(g) - 1):\n    while bi < len(b) - 1 and b[bi] < g[i]:\n        bi += 1\n    while ri < len(r) - 1 and r[ri] < g[i]:\n        ri += 1\n    a1, a2 = (g[i + 1] - g[i]) * 3, (g[i + 1] - g[i]) * 2\n    mr, mb, cbi, cri = r[ri] - g[i], b[bi] - g[i], bi, ri\n\n    while cbi + 1 < len(b) and b[cbi + 1] < g[i + 1]:\n        mb = max(mb, b[cbi + 1] - b[cbi])\n        cbi += 1\n    mb = max(mb, g[i + 1] - b[cbi])\n    while cri + 1 < len(r) and r[cri + 1] < g[i + 1]:\n        mr = max(mr, r[cri + 1] - r[cri])\n        cri += 1\n    mr = max(mr, g[i + 1] - r[cri])\n       \n    if b[bi] < g[i] or b[bi] > g[i + 1]:\n        a2 = 100000000000000\n        a1 -= g[i + 1] - g[i]\n        mb = 0\n    if r[ri] < g[i] or r[ri] > g[i + 1]:\n        a2 = 100000000000000\n        a1 -= g[i + 1] - g[i]\n        mr = 0\n        \n    ans += min(a1 - mr - mb, a2)\n    \nprint(str(ans))\n", "#!/usr/bin/env python3\n\nM = 4 * 10**9 + 1\n\nn = int(input().strip())\nf = lambda t: (int(t[0]), t[1])\n# read and add far P points at both ends\nxcis = [(-M, 'P')] + [f(input().strip().split()) for _ in range(n)] + [(M, 'P')]\n\niPs = [i for i in range(len(xcis)) if (xcis[i][1] == 'P')]\niRs = [i for i in range(len(xcis)) if (xcis[i][1] == 'R')]\niBs = [i for i in range(len(xcis)) if (xcis[i][1] == 'B')]\n\nl = 0\n\nfor iiP in range(1, len(iPs)):\n\tiP0 = iPs[iiP - 1]\n\tiP1 = iPs[iiP]\n\tdRmax = 0\n\tdBmax = 0\n\t(xR, _) = xcis[iP0]\n\t(xB, _) = xcis[iP0]\n\tfor i in range(iP0 + 1, iP1 + 1):\n\t\t(x, c) = xcis[i]\n\t\tif c in 'RP':\n\t\t\tdRmax = max(dRmax, x - xR)\n\t\t\txR = x\n\t\tif c in 'BP':\n\t\t\tdBmax = max(dBmax, x - xB)\n\t\t\txB = x\n\td = xcis[iP1][0] - xcis[iP0][0]\n\tl += d + min(d, 2*d - dBmax - dRmax)\n\tif iiP in [1, len(iPs) - 1]:\n\t\tl -= d  # remove connections to extra P points\n\tiP0 = iP1\n\nif len(iPs) == 2:  # no P in original data\n\tl = (0 if (len(iRs) < 2) else (xcis[iRs[-1]][0] - xcis[iRs[0]][0]))\n\tl += (0 if (len(iBs) < 2) else (xcis[iBs[-1]][0] - xcis[iBs[0]][0]))\n\nprint (l)\n", "n=int(input())\nlast_r=None\nlast_b=None\nlast_p=None\nans=0\nmax_r=0\nmax_b=0\nmax_p=0\nfor _ in range(n):\n    s=input().split()\n    x=int(s[0])\n    c=s[1]\n    if c=='B':\n        if last_b!=None:\n            ans+=x-last_b\n            max_b=max(max_b,x-last_b)\n        last_b=x\n    if c=='R':\n        if last_r!=None:\n            ans+=x-last_r\n            max_r=max(max_r,x-last_r)\n        last_r=x\n    if c=='P':\n        if last_b!=None:\n            ans+=x-last_b\n            max_b=max(max_b,x-last_b)\n        last_b=x\n        if last_r!=None:\n            ans+=x-last_r\n            max_r=max(max_r,x-last_r)\n        last_r=x\n        if last_p!=None:\n            new_ans=(x-last_p)*3\n            new_ans-=max_r\n            new_ans-=max_b\n            if new_ans<(x-last_p)*2:\n                ans-=(x-last_p)*2-new_ans\n        last_p=x\n        max_b=0\n        max_r=0\nprint(ans)\n", "def inpmap():\n    return list(map(int, input().split()))\nn = int(input())\nb, r, p = None, None, None\nres = 0\nmr = -1\nmb = -1\nfor i in range(n):\n    ix, t = input().split()\n    ix = int(ix)\n    if t != 'R':\n        if b is not None:\n            res += ix - b\n            mb = max(mb, ix - b)\n        b = ix\n    if t != 'B':\n        if r is not None:\n            res += ix - r\n            mr = max(mr, ix - r)\n        r = ix\n    if t == 'P':\n        if p is not None:\n            if ix - p < mr + mb:\n                res -= (mr + mb) - (ix - p)\n        p = ix\n        mr = mb = 0\nprint(res)\n", "n=int(input())\nb,r,p=None,None,None\nres=0\nmr=-1\nmb=-1\nfor i in range(n):\n ix,t=input().split()\n ix=int(ix)\n if t!='R':\n  if b is not None:\n   res+=ix-b\n   mb=max(mb,ix-b)\n  b=ix\n if t!='B':\n  if r is not None:\n   res+=ix-r\n   mr=max(mr,ix-r)\n  r=ix\n if t=='P':\n  if p is not None:\n   if ix-p<mr+mb:res-=(mr+mb)-(ix-p)\n  p=ix\n  mr=mb=0\nprint(res)\n", "n = int(input())\nb,r,p = None, None, None\nres = 0\nmr = -1\nmb = -1\nfor i in range(n):\n    ix,t = input().split()\n    ix = int(ix)\n    if t != 'R':\n        if b is not None:\n            res += ix-b\n            mb = max(mb, ix-b)\n        b = ix\n    if t != 'B':\n        if r is not None:\n            res += ix-r\n            mr = max(mr, ix-r)\n        r = ix\n    if t == 'P':\n        if p is not None:\n            if ix - p < mr + mb:\n                res -= (mr+mb) - (ix-p)\n        p = ix\n        mr = mb = 0\nprint(res)\n", "def solve(length, cities):\n  result = 0\n  lastP = None\n  lastB = None\n  lastR = None\n  maxB = 0\n  maxR = 0\n  for idx, city in enumerate(cities):\n    i, code = city\n    if(code == 'B'):\n      if(lastB != None):\n        result += abs(i - lastB)\n        maxB = max(maxB, abs(i - lastB))\n      lastB = i\n    if(code == 'R'):\n      if(lastR != None):\n        result += abs(i - lastR)\n        maxR = max(maxR, abs(i - lastR))\n      lastR = i\n    if(code == 'P'):\n\n      # B case\n      if(lastB != None):\n        result += abs(i - lastB)\n        maxB = max(maxB, abs(i - lastB))\n\n      # R case\n      if(lastR != None):\n        result += abs(i - lastR)\n        maxR = max(maxR, abs(i - lastR))\n\n      if(lastP != None):\n        result += min(0, abs(i - lastP) - maxB - maxR)\n      maxB = 0\n      maxR = 0\n      lastB = i\n      lastR = i\n      lastP = i\n  return result      \n\ndef __starting_point():\n  length = int(input())\n  cities = []\n  for i in range(length):\n    data = input().split(\" \")\n    cities.append((int(data[0]), data[1]))\n  result = solve(length, cities)\n  print(result)\n\n__starting_point()", "rides = int(input())\nfranxx = []\nZero = []\nTwo = []\n\nfor i in range(rides):\n\tdarling = input().split()\n\tif (darling[1] == 'B'):\n\t\tdarling[1] = 1\n\telif (darling[1] == 'R'):\n\t\tdarling[1] = 2\n\telse:\n\t\tdarling[1] = 3\n\tfranxx.append((int(darling[0]), int(darling[1])))\n\nlove = 0\n\nhiro = [\"I love Zero Two\", \"I love Darling\"]\n\nfor zero, two in franxx:\n\tif (two == 3 or two == 1):\n\t\tif (hiro[0] == 'I love Zero Two'):\n\t\t\tZero.append(0)\n\t\t\thiro[0] = zero\n\t\telse:\n\t\t\tZero.append(zero - hiro[0])\n\t\t\tlove += zero - hiro[0]\n\t\t\thiro[0] = zero\n\t\t\t\n\tif (two == 3 or two == 2):\n\t\tif (hiro[1] == 'I love Darling'):\n\t\t\tTwo.append(0)\n\t\t\thiro[1] = zero\n\t\telse:\n\t\t\tTwo.append(zero - hiro[1])\n\t\t\tlove += zero - hiro[1]\n\t\t\thiro[1] = zero\n\t\n\tif (two == 1):\n\t\tTwo.append(0)\n\telif (two == 2):\n\t\tZero.append(0)\n\nhiro = [-1, 0]\nfor ride in range(rides):\n\tif (franxx[ride][1] == 3):\n\t\tif (hiro[0] == -1):\n\t\t\thiro[0] = ride\n\t\t\thiro[1] = 0\n\t\telse:\n\t\t\tstrelizia = [0, 0]\n\t\t\tif ((hiro[1] & 1) == 0):\n\t\t\t\tstrelizia[0] = franxx[ride][0] - franxx[hiro[0]][0]\n\t\t\tif ((hiro[1] & 2) == 0):\n\t\t\t\tstrelizia[1] = franxx[ride][0] - franxx[hiro[0]][0]\n\n\t\t\tfor darling in range(hiro[0], ride):\n\t\t\t\tif (hiro[1] & 1):\n\t\t\t\t\tstrelizia[0] = max(strelizia[0], Zero[darling + 1])\n\t\t\t\tif (hiro[1] & 2):\n\t\t\t\t\tstrelizia[1] = max(strelizia[1], Two[darling + 1])\n\t\t\tif (strelizia[0] + strelizia[1] - franxx[ride][0] + franxx[hiro[0]][0] > 0):\n\t\t\t\tlove -= strelizia[0] + strelizia[1] - franxx[ride][0] + franxx[hiro[0]][0]\n\t\t\thiro[0] = ride\n\t\t\thiro[1] = 0\n\telse:\n\t\thiro[1] |= franxx[ride][1]\n\nprint(love)", "n = int(input())\nb, r, p = None, None, None\nans = 0\nmr = -1\nmb = -1\nfor i in range(n):\n  ix, t = input().split()\n  ix = int(ix)\n  if t != 'R':\n    if b is not None:\n      ans += ix - b\n      mb = max(mb, ix - b)\n    b = ix\n  if t != 'B':\n    if r is not None:\n      ans += ix - r\n      mr = max(mr, ix - r)\n    r = ix\n  if t == 'P':\n    if p is not None:\n      if ix - p < mr + mb:\n        ans -= (mr + mb) - (ix - p)\n    p = ix\n    mr = mb = 0\nprint(ans)"]