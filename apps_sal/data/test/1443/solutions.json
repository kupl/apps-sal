["n=int(input())\nl=list(map(int,input().split()))\ns=input()\nwater=0\ngrass=0\ncgrass=0\ntime=0\nseen=False\nfor i in range(n):\n    if s[i]==\"G\":\n        dist=l[i]\n        if water>=dist:\n            water-=dist\n            time+=2*dist\n            cgrass+=dist\n        else:\n            dist-=water\n            time+=2*water\n            cgrass+=water\n            water=0\n            time+=3*dist\n            grass+=dist\n    elif s[i]==\"W\":\n        water+=l[i]\n        time+=2*l[i]\n        seen=True\n    else:\n        dist=l[i]\n        if water>=dist:\n            water-=dist\n            time+=2*dist\n        else:\n            dist-=water\n            time+=2*water\n            water=0\n            if cgrass>=dist:\n                cgrass-=dist\n                grass+=dist\n                time+=3*dist\n            else:\n                dist-=cgrass\n                grass+=cgrass\n                time+=3*cgrass\n                cgrass=0\n                if grass>=dist:\n                    grass-=dist\n                    time+=3*dist\n                else:\n                    dist-=grass\n                    time+=3*grass\n                    grass=0\n                    if seen:\n                        time+=4*dist\n                    else:\n                        time+=6*dist\nprint(time)", "n=int(input())\nl=list(map(lambda x:int(x)*2,input().split(\" \")))\nt=list(map(lambda x:\"GWL\".index(x),input()))\nmins=[0 for i in range(0,n+1)]\nfor i in range(n-1,-1,-1):\n\tif t[i]!=2:mins[i]=max(mins[i+1]-l[i],0)\n\telse:mins[i]=mins[i+1]+l[i]\ncurs=ans=st=0\nfor i in range(0,n):\n\tif(t[i]==0):\n\t\tcurs+=l[i];ans+=l[i]*5\n\t\tif(curs>mins[i+1]):\n\t\t\tol=(curs-mins[i+1])//2\n\t\t\tol=min(ol,l[i])\n\t\t\tans-=4*ol;curs-=2*ol\n\tif(t[i]==1):\n\t\tst=1;curs+=l[i];ans+=l[i]*3\n\tif(t[i]==2):\n\t\tif(curs<l[i]):\n\t\t\tol=l[i]-curs;curs=l[i]\n\t\t\tans+=ol*(3 if st else 5)\n\t\tcurs-=l[i];ans+=l[i]\nif curs>0:ans-=curs//2*2\nprint(ans//2)", "def read(type = 1):\n    if type:\n        file = open(\"input.dat\", \"r\")\n        n = int(file.readline())\n        a = list(map(int, file.readline().split()))\n        b = file.readline()\n        file.close()\n    else:\n        n = int(input().strip())\n        a = list(map(int, input().strip().split()))\n        b = input().strip()\n    return n, a, b\n\n\ndef solve():\n    sol = 0\n    e = 0\n    big = 0\n    g = 0\n    for i in range(n):\n        if b[i] == \"W\":\n            big = 1\n            sol += 3 * a[i]\n            e += a[i]\n        if b[i] == \"G\":\n            sol += 5 * a[i]\n            e += a[i]\n            g += 2*a[i]\n        if b[i] == \"L\":\n            sol += a[i]\n            e -= a[i]\n            if e < 0:\n                if big:\n                    sol -= 3 * e\n                else:\n                    sol -= 5 * e\n                e = 0\n        g = min(e,g)\n    if e:\n        sol -= 2*g\n        sol -= (e-g)\n    return int(sol)\n\n\nn, a, b = read(0)\nsol = solve()\nprint(sol)", "def read(type = 1):\n    if type:\n        file = open(\"input.dat\", \"r\")\n        n = int(file.readline())\n        a = list(map(int, file.readline().split()))\n        b = file.readline()\n        file.close()\n    else:\n        n = int(input().strip())\n        a = list(map(int, input().strip().split()))\n        b = input().strip()\n    return n, a, b\n\n\ndef solve():\n    sol = 0\n    e = 0\n    big = 0\n    g = 0\n    for i in range(n):\n        if b[i] == \"W\":\n            big = 1\n            sol += 3 * a[i]\n            e += a[i]\n        if b[i] == \"G\":\n            sol += 5 * a[i]\n            e += a[i]\n            g += 2*a[i]\n        if b[i] == \"L\":\n            sol += a[i]\n            e -= a[i]\n            if e < 0:\n                if big:\n                    sol -= 3 * e\n                else:\n                    sol -= 5 * e\n                e = 0\n        g = min(g, e)\n    if e:\n        sol -= 2*g\n        sol -= (e-g)\n    return int(sol)\n\n\nn, a, b = read(0)\nsol = solve()\nprint(sol)", "from heapq import heappush, heappop\nn = int(input())\nL = list(map(int, input().split()))\nT = input()\n\n# fly -> walk, time cost: +4s, stamina: +2\n# walk in place, time cost: +5s, stamina: +1\n\n#fly -> swim, time cost: +2s, stamina: +2\n#swim in place, time cost: +3s, stamina:+1\n\nans = sum(L)\n\nQ = []\n\nfor l, t in zip(L, T):\n    if t == 'G':\n        heappush(Q, (2, 2 * l))\n        heappush(Q, (5, float('inf')))\n    elif t == 'W':\n        heappush(Q, (1, 2 * l))\n        heappush(Q, (3, float('inf')))\n\n    need_stamina = l\n    while need_stamina > 0:\n        cost, quantity = heappop(Q)\n        if need_stamina > quantity:\n            ans += quantity * cost\n            need_stamina -= quantity\n        else:\n            ans += need_stamina * cost\n            heappush(Q, (cost, quantity - need_stamina))\n            need_stamina = 0\n\nprint(ans)\n", "n = int(input())\ndis = list([int(x) << 1 for x in input().split()])\nter = input()\nst, ans = 0, 0\ntime = {'G': 5, 'W': 3, 'L': 1}\ndelta = {'G':1, 'W':1, 'L':-1}\nhasWater = False\nconvert = 0\nfor i in range(n):\n\tst += dis[i] * delta[ter[i]]\n\tans += dis[i] * time[ter[i]]\n\t# print('st = %d, ans = %d' % (st, ans))\n\tif ter[i] == 'W':\n\t\thasWater = True\n\telif ter[i] == 'G':\n\t\tconvert += dis[i]\n\tif st < 0:\n\t\tif hasWater:\n\t\t\tans += (-st) * 3\n\t\telse:\n\t\t\tans += (-st) * 5\n\t\tst = 0\n\tconvert = min(convert, st // 2)\n\t# print('convert = %d' % convert)\n\t# print('ans = %d' % ans)\nans -= 4 * convert\nans -= 2 * (st // 2 - convert)\nprint(ans // 2)\n\n\n"]