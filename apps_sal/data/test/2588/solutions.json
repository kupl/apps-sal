["for _ in range(int(input())):\n    n, a, b = map(int, input().split())\n    s = input().strip()\n    ans = (n + 1) * b + n * a\n    \n    if '1' in s:\n        ans += 2 * a\n        s = s[s.find('1'):s.rfind('1') + 1]\n        t = [0] * (len(s) + 1)\n        for i in range(len(s)):\n            x = int(s[i])\n            t[i] = max(t[i], x)\n            t[i + 1] = max(t[i + 1], x)\n        i = 0\n        while i < len(t):\n            j = i + 1\n            while j < len(t) and t[i] == t[j]:\n                j += 1\n            if t[i]:\n                ans += b * (j - i)\n            else:\n                ans += min(b * (j - i), 2 * a) \n            i = j\n    \n    print(ans)", "from sys import stdin\nt=int(stdin.readline().strip())\nfor Ta in range(t):\n    n,a,b=list(map(int,stdin.readline().strip().split()))\n    s=stdin.readline().strip()\n    dp=[[10**15,10**15] for i in range(n)]\n    dp[0][0]=a+b\n    dp[0][1]=b+2*a\n    for i in range(1,n):\n        if s[i]=='0':\n            dp[i][0]=min(dp[i-1][0]+a+b,dp[i-1][1]+2*a+2*b)\n            dp[i][1]=min(dp[i-1][0]+b+2*a,dp[i-1][1]+2*b+a)\n        else:\n            dp[i][1]=dp[i-1][1]+2*b+a\n    print(dp[-1][0]+b)\n", "def mp():\n    return map(int, input().split())\n\ndef f(i, j):\n    return a[i][j] == a[i + 1][j] == a[i][j + 1] == a[i + 1][j + 1] == 1\n\nq = int(input())\n\nfor qq in range(q):\n    n, a, b = mp()\n    s = input()\n    dp_u = [0] * (n + 1)\n    dp_d = [0] * (n + 1)\n    dp_u[0] = 10 ** 20\n    dp_d[0] = b\n    \n    for i in range(1, n):\n        dp_u[i] = min(dp_u[i - 1] + a, dp_d[i - 1] + 2 * a) + 2 * b\n        if s[i] == '0' and s[i - 1] == '0':\n            dp_d[i] = min(dp_u[i - 1] + 2 * a, dp_d[i - 1] + a) + b\n        else:\n            dp_d[i] = 10 ** 20\n    \n    #print(dp_u)\n    #print(dp_d)\n    print(min(dp_d[n - 1] + a, dp_u[n - 1] + 2 * a) + b)", "q = int(input())\nfor query in range(q):\n    n, a, b = map(int, input().split())\n    s = input()\n    pod = []\n    count = 1\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            pod.append(count)\n            count = 1\n        else:\n            count += 1\n    pod.append(count)\n    wyn = n * a + 2 * n * b + 2 * b\n    for i in range(len(pod)):\n        if i % 2 == 0:\n            if i == 0 or i == len(pod) - 1:\n                wyn -= (b * pod[i]-a)\n            else:\n                wyn -= max(0, b * (pod[i] -1) - 2 * a)\n    if len(pod) == 1:\n        print((n + 1) * b + n * a)\n    else:\n        print(wyn)", "for _ in range(int(input())):\n    n, a, b = list(map(int, input().split()))\n    s = input()+'0'\n    min1, min2 = b, float('inf')\n    for q in range(n):\n        min3 = min(min1+2*a+b*2, min2+a+b*2)\n        if s[q+1] == '0' and s[q] == '0':\n            min1 = min(min1+a+b, min2+2*a+b)\n        else:\n            min1 = float('inf')\n        min2 = min3\n    print(min1)\n", "T = int(input())\nfor i in range(T):\n    n, a, b = list(map(int, input().split()))\n    s = input()\n    dp = [[1000000000000000001 for i in range(2)] for j in range(n+1)]\n    dp[0][0] = a + 2*b\n    dp[0][1] = 2*a + 3*b\n    for i in range(n-1):\n        if s[i] == \"0\":\n            if s[i+1] == \"1\":\n                dp[i+1][1] = dp[i][1] + a + 2*b\n            else:\n                dp[i+1][1] = min(dp[i][1] + a + 2*b, dp[i][0] + 2*a + 2*b)\n                dp[i+1][0] = min(dp[i][1] + 2*a + b, dp[i][0] + a + b)\n        else:\n            if s[i+1] == \"1\":\n                dp[i+1][1] = dp[i][1] + a + 2*b\n            else:\n                dp[i+1][1] = dp[i][1] + a + 2*b\n                dp[i+1][0] = dp[i][1] + 2*a + b\n    print(dp[n-1][0])\n", "import sys\ninput = sys.stdin.readline\n\nT=int(input())\nfor testcases in range(T):\n    n,a,b=list(map(int,input().split()))\n    S=list(map(int,list(input().strip())))\n    S.append(0)\n\n    ANS=(n+1)*b+n*a\n\n    DP=[[1<<50,1<<50] for i in range(n+1)]\n    DP[0][0]=0\n\n    for i in range(1,n+1):\n        if S[i-1]==S[i]==0:\n            DP[i][0]=min(DP[i-1][0],DP[i-1][1]+a)\n            DP[i][1]=min(DP[i-1][0]+a+b,DP[i-1][1]+b)\n\n        else:\n            DP[i][1]=min(DP[i-1][0]+a+b,DP[i-1][1]+b)\n\n    #print(DP)\n\n    print(ANS+DP[-1][0])\n            \n", "T = int(input())\nfor _ in range(T):\n\tn, a, b = map(int, input().split())\n\ts = input()\n\tres = 0\n\ti = 0\n\twhile i < n and s[i] == '0':\n\t\tres += a + b\n\t\ti += 1\n\tif i < n:\n\t\tres += 2*a\n\t\twhile s[n-1] == '0':\n\t\t\tres += a + b\n\t\t\tn -= 1\n\t\tres += (n-i+1)*2*b + (n-i)*a\n\t\tnz = 0\n\t\twhile i < n:\n\t\t\tif s[i] == '1':\n\t\t\t\tif nz > 1 and 2*a-(nz-1)*b < 0:\n\t\t\t\t\tres += 2*a-(nz-1)*b\n\t\t\t\tnz = 0\n\t\t\telse:\n\t\t\t\tnz += 1\n\t\t\ti += 1\n\telse:\n\t\tres += b\n\tprint(res)", "for _ in range(int(input())):\n    n, a, b = map(int, input().split())\n    s = input()\n    if '1' not in s:\n        print((n + 1) * b + a * n)\n    else:\n        cg = 0\n        for i in range(len(s) - 1):\n            if s[i] == '1' and s[i - 1] == '0':\n                cg += 1\n            if s[i] == '1':\n                cg += 1\n        ans = (n + 1) * b + n * a + cg * b\n        c = 0\n        D = []\n        F = 1\n        for i in s:\n            if i == '0':\n                c += 1\n            elif F:\n                ans += max(0, a)\n                c = 0\n                F = 0\n            else:\n                ans += max(0, min(2 * a, (c - 1) * b))\n                c = 0\n        ans += max(0, a)\n        print(ans)", "#E71_C\n\nT = int(input())\n\nfor i in range(0, T):\n    ln = [int(j) for j in input().split(\" \")]\n    n = ln[0]\n    a = ln[1]\n    b = ln[2]\n    st = list(input())\n    ct = 0\n    zct = 0\n    pls = 0\n    pip = 0\n    seg = []\n    ft = False\n    for j in range(0, len(st)):\n        if st[j] == \"1\":\n            ft = False\n            if ct == 0:\n                seg.append(j - 1)\n            ct += 1\n            zct = 0\n        elif zct == 0 and ct:\n            ct += 1\n            ft = True\n            zct += 1\n        else:\n            if ft:\n                ft = False\n                ct -= 1\n            zct += 1\n            if zct == 2 and ct:\n                seg.append(j - 1)\n                pls += ct + 1\n                zct = 0\n                ct = 0\n    if zct == 1 and ct:\n        seg.append(j)\n        if ft:\n            ct -= 1\n        pls += ct + 1\n    cost = pls * (b * 2) + (n + 1 - pls) * (b)\n    cost += (n + len(seg)) * a\n    if len(seg) > 2:\n        for j in range(1, len(seg) - 1,2):\n            plc = (seg[j + 1] - seg[j]) * b\n            pipc = 2 * a\n            if plc < pipc:\n                cost -= (pipc - plc)\n    print(cost)\n", "import sys\ndef input():\n\treturn sys.stdin.readline()[:-1]\n\nt = int(input())\nans = []\nfor _ in range(t):\n\tn, a, b = map(int, input().split())\n\ts = input()\n\tres = [b, 10**30]\n\tfor i in range(n):\n\t\ttmp = []\n\t\tif s[i] == \"0\":\n\t\t\ttmp.append(min(res[0]+a+b, res[1]+2*a+b))\n\t\t\ttmp.append(min(res[1]+a+2*b, res[0]+2*a+2*b))\n\t\telse:\n\t\t\ttmp.append(10**30)\n\t\t\ttmp.append(res[1]+a+2*b)\n\t\tres = tmp\n\tans.append(res[0])\nprint(*ans, sep=\"\\n\")", "def mi():\n        return list(map(int, input().split()))\n'''\n4\n8 2 5\n00110010\n8 1 1\n00110010\n9 100000000 100000000\n010101010\n2 5 1\n00\n'''\nfor _ in range(int(input())):\n    n,a,b = mi()\n    s = list(map(int, input()))\n    ans = (a+b)*n+b\n    if 1 not in s:\n        print (ans)\n        continue\n    i1 = s.index(1)\n    i2 = n-1-s[::-1].index(1)\n    ans+= 2*a + (i2-i1+2)*b\n    i = i1\n    while i<i2:\n        enter = False\n        while i<i2 and s[i]==1:\n            enter = True\n            i+=1\n        start = i\n        while i<i2 and s[i]==0:\n            enter = True\n            i+=1\n        if i<n and s[i]==1 and s[i-1]==0:\n            enter = True\n            if 2*a-b*(i-start-1)<0:\n                ans+=2*a-b*(i-start-1)\n        if not enter:\n            break\n    print (ans)\n", "def main():\n    import sys\n    input = sys.stdin.readline\n    \n    def solve():\n        n, a, b = map(int, input().split())\n        s = input()\n        \n        arr = [0] * (n + 1)\n        for i in range(1, n):\n            if s[i] == '1' or s[i - 1] == '1':\n                arr[i] = 1\n        \n        cnts = []\n        cnt = 1\n        for i in range(1, n + 1):\n            if arr[i] != arr[i - 1]:\n                cnts.append(cnt)\n                cnt = 1\n            else:\n                cnt += 1\n        cnts.append(cnt)\n        \n        l = len(cnts)\n        cost = n * a + (l - 1) * a + (n + 1) * b + sum(cnts[1:l:2]) * b\n        for i in range(2, l - 2, 2):\n            now = 2 * a + cnts[i] * b\n            new = cnts[i] * 2 * b\n            if new < now:\n                cost += new - now\n        \n        print(cost)\n    \n    for _ in range(int(input())):\n        solve()\n    \n    return 0\n\nmain()", "for _ in range(int(input())):\n    n, a, b = list(map(int, input().split()))\n    s = input()\n    if s == \"0\" * n:\n        print(a * n + b * n + b)\n        continue\n    ans = 0\n    ind = 0\n    ind2 = n - 1\n    pref = 0\n    suf = 0\n    while ind2 >= 0 and s[ind2] == \"0\":\n        ind2 -= 1\n        suf += 1\n    while ind < n and s[ind] == \"0\":\n        ind += 1\n        pref += 1\n    while ind <= ind2:\n        if s[ind] == \"0\":\n            size = 0\n            while ind <= ind2 and s[ind] == \"0\":\n                ind+=1\n                size += 1\n            ans += min((size - 1) * b + size * a + 2 * a, size * a + 2 * b * (size - 1))\n        else:\n            size = 0\n            while ind <= ind2 and s[ind] == \"1\":\n                ind+=1\n                size += 1\n            ans += (size + 1) * b * 2 + size * a\n    ans += pref * b + pref * a + a\n    ans += suf * b + suf * a + a\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n, a, b = list(map(int, input().split()))\n    s = input()\n    arr = []\n    c = \"0\"\n    k = 0\n    for i in range(n):\n        if s[i] == c:\n            k += 1\n        else:\n            arr.append(k)\n            k = 1\n            c = s[i]\n    if len(arr) == 0:\n        print(n * a + b * n + b)\n    else:\n        ans = k * (a + b) + (a + b) * arr[0] + a\n        for i in range(1, len(arr)):\n            if i % 2 == 1:\n                ans += (arr[i] + 1) * (2 * b + a)\n            else:\n                ans += min((arr[i] + 1) * a + b * (arr[i] - 1), 2 * b * (arr[i] - 1) + a * (arr[i] - 1))\n        print(ans)\n                    \n", "t = int(input())\nfor _ in range(t):\n    n,pipeCost,pillarCost = map(int,input().split())\n    road = input()\n    cost = 0\n\n    # get consequtive frequence, guranteed to start and end with one\n    freq = []\n    curr = \"0\"\n    currFreq = 0\n    for i in road:\n        if i == curr:\n            currFreq += 1\n        else:\n            freq.append(currFreq)\n            curr = i\n            currFreq = 1\n    freq.append(currFreq)\n\n    # If only a single sequence of 1's\n    if len(freq) == 3:\n        cost += pillarCost*freq[0]\n        cost += pillarCost*2*(freq[1]+1)\n        cost += pillarCost*freq[2]\n        cost += pipeCost*(sum(freq)+2)\n\n    elif len(freq) == 1:\n        cost += pillarCost*(freq[0]+1)\n        cost += pipeCost*(freq[0])\n\n    else:\n        # represents ground level\n        level = True\n        switch = 0\n\n        cost += pipeCost*(sum(freq))\n        for i in range(len(freq)):\n            # zero at 0,2,4...\n            if i%2 == 0:\n                if level:\n                    if i==0 or i==len(freq)-1:\n                        cost += pillarCost*freq[i]\n                    else:\n                        cost += pillarCost*(freq[i]-1)\n                else:\n                    if i == len(freq)-1:\n                        level = True\n                        cost += pillarCost*freq[i]\n                    else:\n                        if (freq[i]-1)*pillarCost > 2*pipeCost:\n                            level = True\n                            cost += pillarCost*(freq[i]-1)\n                        else:\n                            cost += pillarCost*2*(freq[i]-1)\n            else:\n                if level:\n                    level = False\n                    switch += 1\n                    cost += pillarCost*2*(freq[i]+1)\n                else:\n                    cost += pillarCost*2*(freq[i]+1)\n        \n        cost += 2*switch*pipeCost\n    \n    print(cost)", "T = int(input())\nfor _ in range(T):\n    n, a, b = map(int, input().split())\n    s = list(map(int, input()))\n    if 1 not in s:\n        print(a*n + b*(n+1))\n        continue\n    min_lower_length = 2*a/b + 1\n    start = 0\n    while s[start] == 0:\n        start += 1\n    end = n-1\n    while s[end] == 0:\n        end -= 1\n    cost = (n+2)*a + (n+1)*b + (end-start+2)*b\n    c = 0\n    for i in range(start, end+1):\n        if s[i] == 0:\n            c += 1\n        else:\n            if c>=min_lower_length:\n                cost += 2*a - (c-1)*b\n            c = 0\n    print(cost)", "s = lambda: list(map(int, input().split()))\n\nT = int(input())\nfor tc in range(T):\n    n, a, b = s()\n    string = list(map(lambda x: x == '1', input()))\n    cost = a*n + b*(n+1)\n    isBeginning = True\n    # state machine\n    zeros = 0\n    for x in string:\n        if x:\n            if zeros==0:\n                cost+=b\n            else:\n                if not isBeginning and b*(zeros-1) < 2*a:\n                    cost -= 2*a\n                    cost += b*(zeros-1)\n                isBeginning=False\n                zeros=0\n                cost+=a+b\n        else:\n            if zeros==0:\n                cost+=a+b\n            zeros+=1\n    print(cost-a-b) # first number", "import sys\n\nT = int(sys.stdin.readline())\nfor t in range (0, T):\n    n, a, b = list(map(int, sys.stdin.readline().strip().split()))\n    s = sys.stdin.readline().strip()\n    i = 0\n    c = n * a + (n + 1) * b\n    v = 0\n    for j in range (0, n-1):\n        if s[j] == \"1\" or s[j+1] == \"1\":\n            c = c + b\n            v = 1\n    if v == 1:\n        c = c + 2 * a\n        while s[i] == \"0\":\n            i = i + 1\n        j = n - 1\n        while s[j] == \"0\":\n            j = j - 1\n        v = 0\n        while i <= j:\n            if s[i] == \"1\":\n                if v > 0:\n                    c = c + min([(v-1) * b, 2 * a])\n                v = 0\n            if s[i] == \"0\":\n                v = v + 1\n            i = i + 1\n    print(c)\n\n            \n", "import sys\n\ndef solve(A, n, a, b):    \n    cost = n*a + (n+1)*b\n    num_ones = 0\n    groups_ones = 0\n    groups_zeros = [0]\n    on_zeros = True\n    for i in A:\n        if i == 0:\n            if on_zeros:\n                groups_zeros[-1] += 1\n            else:\n                on_zeros = True\n                groups_zeros.append(1)\n        else:\n            if on_zeros:\n                on_zeros = False\n                groups_ones += 1\n            num_ones += 1\n    cost += (groups_ones+num_ones)*b\n    for i in range(1, len(groups_zeros)-1):\n        z = groups_zeros[i]\n        cost += min(2*a, (z-1)*b)\n    if num_ones >0 :\n        cost += 2*a\n    return cost\n           \n           \n\nin_file = sys.stdin#open(\"C.txt\", \"r\") \n\nt = int(in_file.readline().strip())\nfor _ in range(t):\n    n, a, b = map(int, in_file.readline().strip().split())\n    A = list(map(int, in_file.readline().strip()))\n    sys.stdout.write(str(solve(A, n, a, b)) + \"\\n\")\nsys.stdout.flush() ", "test = int(input())\nfor _ in range(test):\n    n,a,b = map(int,input().split())\n    s = input()\n    ans = a*n+b*(n+1)\n    for i in range(n):\n        if s[n-i-1]=='1':\n            s=s[:n-i]\n            break\n    for i in range(len(s)):\n        if s[i]=='1':\n            s=s[i:]\n            break\n    if s.count('1')==0:\n        print(ans)\n        continue\n    dp = []\n    c = 1\n    for i in range(len(s)-1):\n        if s[i+1]==s[i]:\n            c+=1\n        else:\n            dp.append(c)\n            c=1\n    dp.append(c)\n    for i in dp[::2]:\n        ans += (i+1)*b\n    ans+=len(dp[::2])*a*2\n    for i in dp[1::2]:\n        if (i-1)*b<2*a:\n            ans += (i-1)*b\n            ans-=2*a\n    print(ans)", "t=int(input())\nfor i in range(t):\n    n,a,b=[int(x) for x in input().split()]\n    s=[int(x) for x in list(input())]\n    gas=n\n    h=n+1\n    index=-1\n    one=-1\n    for i in range(n):\n        if s[i]==0:\n            if index!=-1:\n                h+=i-index+1\n                gas+=2\n                index=-1\n                one=i-1\n        else:\n            if index==-1:\n                index=i\n                if one!=-1 and 2*a>(i-one-2)*b:\n                    gas-=2\n                    h+=i-one-2\n    print(gas*a+h*b)\n\n                \n    \n        \n", "import sys \nfrom collections import defaultdict\ninput = lambda : sys.stdin.readline().rstrip()\n\nfor t in range(int(input())):\n  n, a, b = list(map(int, input().split()))\n  s = input()\n  arr = [['0', 1]]\n  for i in range(1, n):\n    if s[i] == arr[-1][0]:\n      arr[-1][1] += 1\n    else:\n      arr.append([s[i], 1])\n  \n  if len(arr) == 1:\n    pipe = n\n    pillar = n + 1\n  else:\n    pipe = n + 2\n    pillar = arr[0][1] + arr[-1][1] + 2 * (n + 1 - arr[0][1] - arr[-1][1])\n    for i, j in arr[1:-1]:\n      if i == '0' and j >= 2 and (j-1)*b > 2*a:\n        pipe += 2\n        pillar -= j-1\n        \n  print(pipe*a + pillar*b)\n\n\n\n      \n\n      \n        \n\n", "T = int(input())\nfor _ in range(T):\n    n, a, b = list(map( int, input().split() ))\n    s = input()\n    ans = n * a + ( n + 1 ) * b\n    li = s.find('1')\n    if li >= 0:\n        ri = s.rfind('1')\n        ans += a + a + ( ri - li + 2 ) * b\n        lens = []\n        for i in range( li + 1, ri ):\n            if s[ i ] == '0':\n                if( s[ i - 1 ] == '1' ):\n                    lens.append(0)\n                lens[-1] += 1\n        for l in lens:\n            sm = a + a - ( l - 1 ) * b\n            if l > 1 and sm < 0:\n                ans += sm\n    print( ans )\n\n", "def main():\n    def solve():\n        n,a,b = map(int,input().split())\n        ss = input()\n        cost = 0\n        for i in range(n):\n            if ss[i] == '1':\n                last = i\n                cost += a*(i+1)+b*i\n                break\n        else:\n            print(a*n+b*(n+1))\n            return\n        for i in range(last, n):\n            if ss[i] == '1' or ss[i-1] == '1':\n                high = (i-last) * (a+2*b)\n                low = (i-last) * (a + b) + a*2 + b\n                cost += min(high, low)\n                last = i\n        cost += (n+1-last) * (a+b) +b\n        print(cost)\n\n\n    q = int(input())\n    for _ in range(q):\n        solve()\n\n\ndef __starting_point():\n    main()\n__starting_point()"]