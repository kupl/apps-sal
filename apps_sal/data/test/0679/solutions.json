["def main():\n    s = input()\n    n = len(s)\n    poss = False\n    for i in range(n - 2):\n        t = s[i:i + 3]\n        if 'A' in t and 'B' in t and 'C' in t:\n            poss = True\n            break\n    print('Yes' if poss else 'No')\n\n\nmain()\n", "s = input()\n\nprint('Yes' if 'ABC' in s or 'ACB' in s or 'BAC' in s or 'BCA' in s or 'CAB' in s or 'CBA' in s else 'No')\n", "import sys\ns = input()\nn = len(s)\nfor i in range(1, n - 1):\n    if sorted([s[i - 1], s[i], s[i + 1]]) == ['A', 'B', 'C']:\n        print('Yes')\n        return\nprint('No')\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 998244353\ndd = [(0,-1),(1,0),(0,1),(-1,0)]\nddn = [(0,-1),(1,-1),(1,0),(1,1),(0,1),(-1,-1),(-1,0),(-1,1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    s = S()\n    l = len(s)\n    for i in range(l-2):\n        t = [c for c in s[i:i+3]]\n        t.sort()\n        if t == ['A', 'B', 'C']:\n            return 'Yes'\n\n    return 'No'\n\n\nprint(main())\n\n", "import sys\ns = sys.stdin.readline().strip()\nprint('Yes' if any(x in s for x in ['ABC', 'ACB', 'BCA', 'BAC', 'CAB', 'CBA']) else 'No')\n", "# import collections\n\ns = input()\n\na = ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']\n\nfor i in range(len(a)):\n    if s.find(a[i]) != -1:\n        print('Yes')\n        return\n\nprint('No')", "s = input()\n\nfor i in range(1, len(s) - 1):\n    if set(s[i - 1 : i + 2]) == set('ABC'):\n        print(\"Yes\")\n        return\n\nprint(\"No\")\n", "def go():\n    s = input()\n    x = ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']\n    for i in x:\n        if i in s:\n            return 'Yes'\n    return 'No'\n\nprint(go())\n", "s = input()\nn = len(s)\nans = ['A', 'B', 'C']\nfor i in range(1, n - 1):\n    t = [s[i - 1], s[i], s[i+1]]\n    t.sort()\n    if t == ans:\n        print('Yes')\n        return\nprint(\"No\")", "a = input()\n\ngo = False\nfor i in range(1, len(a) - 1):\n    if len(set(a[i] + a[i - 1] + a[i + 1])) == 3 and '.' not in set(a[i] + a[i - 1] + a[i + 1]):\n        go = True\n        break\nif go:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "s = input()\nfor i in range(len(s) - 2):\n    if sorted(s[i:i + 3]) == ['A', 'B', 'C']:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")", "a=['ABC','ACB','BAC','BCA','CAB','CBA']\ns=input()\nfor i in a:\n    if i in s:\n        print(\"Yes\")\n        return\nprint(\"No\")", "s = input()\nif (s.count(\"BAC\") > 0 or s.count(\"ABC\") > 0 or s.count(\"ACB\") > 0 or s.count(\"BCA\") > 0 or s.count(\"CBA\") > 0 or s.count(\"CAB\") > 0):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "s = input()\nif s.count('ABC') + s.count('ACB') + s.count('BAC') + s.count('BCA') + s.count('CAB') + s.count('CBA') != 0:\n    print('Yes')\nelse:\n    print('No')", "a = input()\nif a.count(\"ABC\") or a.count(\"ACB\") or a.count(\"BAC\") or\\\n    a.count(\"BCA\") or a.count(\"CAB\") or a.count(\"CBA\"):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "s = input().strip()\nf = False\nfor i in range(len(s) - 2):\n    if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2] and s[i] != '.' and s[i + 1] != '.' and s[i + 2] != '.':\n        f = True\nif (f):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "s = input()\nif 'BAC' in s or 'BCA' in s or 'CAB' in s or 'CBA' in s or 'ABC' in s or 'ACB' in s:\n\tprint('Yes')\nelse:\n\tprint('No')", "import re\nimport math\nimport decimal\nimport bisect\n\ndef read():\n\treturn input().strip()\n\ndef iread():\n\treturn int(input().strip())\n\ndef viread():\n\treturn [int(x) for x in input().strip().split()]\n\n# code goes here\nline = read()\ncan = False\nfor i in range(len(line) - 2):\n\tcheck = line[i:i+3]\n\tif 'B' in check and 'A' in check and 'C' in check:\n\t\tcan = True\n\t\tbreak\nprint(\"Yes\" if can else \"No\")\n", "from copy import deepcopy\nimport itertools\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nimport math\n\n\ndef read():\n    return int(input())\n\n\ndef readmap():\n    return map(int, input().split())\n\n\ndef readlist():\n    return list(map(int, input().split()))\n\n\nS = input()\nif len(S) <= 2:\n    print(\"No\")\n    quit()\n\nfor i in range(1, len(S)-1):\n    if S[i-1] != \".\" and S[i] != \".\" and S[i+1] != \".\":\n        if S[i-1] != S[i] and S[i] != S[i+1] and S[i-1] != S[i+1]:\n            print(\"Yes\")\n            quit()\n\nprint(\"No\")", "s = input()\nfor i in range(len(s)-2):\n    if '.' not in s[i:i+3] and len(set(s[i:i+3]))==3:\n        print(\"Yes\")\n        return\nprint(\"No\")", "ch=input()\nif \"ABC\" in ch or \"ACB\" in ch or \"BAC\" in ch or \"BCA\" in ch or \"CAB\" in ch or \"CBA\" in ch:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"]