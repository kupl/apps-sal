["n, k = map(int, input().split())\naa = [int(x) for x in input().split()]\n\nnxt = [(i + 1) % n for i in range(n)]\nprv = [(i - 1 + n) % n for i in range(n)]\n\ncur = 0\nfor z in range(k):\n    a = aa[z]\n    a %= n\n    for i in range(a):\n        cur = nxt[cur]\n    nxt[prv[cur]] = nxt[cur]\n    prv[nxt[cur]] = prv[cur]\n    print(cur + 1, end=' ')\n    cur = nxt[cur]\n    n -= 1\n", "3\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\na = [int(x) for x in sys.stdin.readline().split()]\n\nl = [i for i in range(1, n + 1)]\np = 0\n\nret = []\n\nfor d in a:\n    p += d\n    p %= len(l)\n    ret.append(l[p])\n    del l[p]\n    \nprint(' '.join(str(x) for x in ret))\n", "n, k = map(int, input().split())\ndata = map(int, input().split())\narr = [i+1 for i in range(n)]\nfor v in data:\n  l = len(arr)\n  i = v % l\n  print(arr[i], end = \" \")\n  arr = [arr[(i+k) % l] for k in range(1,l)]\nprint()  ", "n, k = list(map(int, input().split()))\n*a, = list(map(int, input().split()))\nans = []\npeo = list(range(1, n+1))\n\ncur = 0\nfor i in range(k):\n    dind = (cur+a[i])%len(peo)\n    cur = dind\n    ans.append(peo.pop(dind))\n    cur %= len(peo)\n    dind %= len(peo)\nprint(*ans)\n", "n, k = map(int, input().strip().split(\" \"))\narr = list(map(int, input().strip().split()))\nchildren = list([i + 1 for i in range(n)])\nanswer = []\ni = 0\nfor ai in arr:\n    i = (i + ai) % n\n    answer.append(str(children[i]))\n    del children[i]\n    n -= 1\n\nprint(\" \".join(answer))", "n, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nc = list(range(1, n + 1))\nved = 0\nfor i in a:\n    n = i % len(c)\n    ved = ved + n\n    if (ved >= len(c)):\n        ved -= len(c)\n    print(c[ved], end=\" \")\n    c.pop(ved)\n    \n    \n    \n    \n", "n, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nchildren = list(range(1, n + 1))\n\npos = 0\nfor i in range(k):\n\tpos = (pos + a[i]) % len(children)\n\tprint(children[pos], end = ' ')\n\tdel children[pos]\nprint()", "n, k = map(int, input().split())\na = list(map(int, input().split()))\ncur = 0\nx = []\nfor i in range(n):\n    x.append(i + 1)\nfor i in range(k):\n    v = cur\n    f = a[i] % n\n    for j in range(f):\n        v += 1\n        if v >= n:\n            v = v - n\n    \n    print(x[v], end=' ')\n    x.pop(v)\n    n -= 1\n    cur = v % n\n\n    \n    ", "n, _ = [int(i) for i in input().strip().split(' ')]\nak = [int(i) for i in input().strip().split(' ')]\n\n\npeople = list(range(1, n + 1))\ncurrent = 0\n\nleaved = []\n\nfor k in ak:\n    pos = ((current + k) % len(people))\n    leave = people.pop(pos)\n\n    leaved.append(leave)\n\n    if pos >= len(people):\n        current = 0\n    else:\n        current = pos\n\nprint(\" \".join(map(str, leaved)))\n", "n,k=map(int,input().split())\n*a,=map(int,input().split())\ng=list(range(n+1))[1:]\nn-=1\nv=0\nfor i in a:\n    v+=i\n    v%=len(g)\n    print(g.pop(v),end=' ')\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\narray = [0] * n\nfor i in range (n):\n    array[i] = i + 1\nnow = 0\nfor i in range (k):\n    dp = (now + a[i] % len(array)) % len(array)\n    print(array[dp], end = \" \")\n    array.pop(dp)\n    now = dp\n    ", "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndef round(children, a, leader):\n    lead_pos = children.index(leader)\n    a = (lead_pos + a) % len(children)\n    deleted = children[a]\n    del(children[a])\n    return children, a % len(children), deleted\n\nchildren = list(range(1, n+1))\nresult = []\nleader = 1\n\nfor i in range(k):\n    children, leader_pos, deleted = round(children, a[i], leader)\n    leader = children[leader_pos]\n    result.append(deleted)\n\nprint(*result, sep=' ')\n", "from copy import deepcopy as dcopy\ndef main():\n    n, k = list(map(int, input().split()))\n    ks = list(map(int, input().split()))\n\n    children = list(range(n))\n    leader_i = 0\n    res = []\n    for k in ks:\n        elim_i = (leader_i + k) % len(children)\n        elim_num = dcopy(children[elim_i])\n        nextl_i = (leader_i + k + 1) % len(children)\n        nextl_num = dcopy(children[nextl_i])\n        res.append(children.pop(elim_i)+1)\n        leader_i = children.index(nextl_num)\n\n    print(' '.join(map(str,res)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = [int(x) for x in str(input()).split(' ', 1)]\nnext_ = [i+1 for i in range(n+1)]\nnext_[n] = 1\na = [int(x) for x in str(input()).split(' ')]\nremain = n\ncur = 1\nprev = None\neli = []\nfor a0 in a:\n    a0 = a0 % remain\n    for _ in range(a0):\n        prev = cur\n        # print(\"{}->{}\".format(cur, next_[cur]))\n        cur = next_[cur]\n    if prev is None:\n        prev = cur\n        while next_[prev] != cur:\n            prev = next_[prev]\n    # print(\"====\")\n    eli.append(cur)\n    next_[prev] = next_[cur]\n    cur = next_[cur]\n    remain -= 1\nprint(' '.join([str(e) for e in eli]))\n", "from collections import deque\n\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nq = deque(list(range(1, N+1)))\nret = []\n\nfor k in range(K):\n    for a in range(A[k]%len(q)):\n        q.append(q.popleft())\n    ret.append(q.popleft())\n\nprint(' '.join([str(r)for r in ret]))\n    \n    \n\n\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nused = [0] * n\nans = \"\"\ncnt = 1\ntmp = n\nfor i in range(k):\n    cur = a[i] % n\n    while cur > 0:\n        if used[cnt] == 0:\n            cur -= 1\n        cnt += 1\n        cnt = cnt % tmp\n    if cnt != 0:\n        ans += str(cnt) + \" \"\n    else:\n        ans += str(tmp) + \" \"\n    used[cnt - 1] = 1\n    while used[cnt] == 1:\n        cnt += 1\n        cnt %= tmp\n    cnt += 1\n    cnt %= tmp\n    n -= 1\nprint(ans)", "n, k = map(int, input().split())\na = map(int, input().split())\n\ncs = list(range(1, n+1))\nl = 0\nres = \"\"\nlen = n\n\nfor x in a:\n    pos = (l + x) % len\n    #print(cs, pos)\n    res += str(cs[pos]) + \" \"\n    del cs[pos]\n    len -= 1\n    l = pos\n\nprint(res)", "n,k = list(map(int,input().split()))\na = [int(x) for x in input().split()]\nv = [i for i in range(1,n+1)]\nval = 0\nans = \"\"\nfor i in a:\n\ti %= len(v)\n\tval += i\n\tif val>=len(v): val -= len(v)\n\tans += str(v[val]) + ' '\n\tdel v[val]\n\t\nprint(ans)\n", "from collections import deque\nn,k=list(map(int,input().split()))\na=[int(i) for i in input().split()]\nd=deque([i for i in range(1,n+1)])\nres=[]\nfor i in range(k):\n    d.rotate(-(a[i]))\n    x=d.popleft()\n    res.append(x)\nprint(*res)\n", "import sys\n\ndef solve():\n    n, k = map(int, input().split())\n    ch = [i + 1 for i in range(n)]\n    a = [int(i) for i in input().split()]\n\n    live = n\n    leader = 0\n    ans = []\n\n    for v in a:\n        v = v % live\n        j = 0\n        cnt = 0\n\n        while cnt < v:\n            if ch[(leader + j + 1) % n]:\n                cnt += 1\n\n            j += 1\n\n        ans.append((leader + j) % n + 1)\n        ch[(leader + j) % n] = 0\n        live -= 1\n        leader = (leader + j + 1) % n\n\n        while ch[leader] == 0:\n            leader = (leader + 1) % n\n\n        # print(ch)\n        # print(leader + 1)\n\n    print(*ans)\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef __starting_point():\n    solve()\n__starting_point()", "def plus(a):\n    nonlocal n\n    a += 1\n    a = a % n\n    return a\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\np = [1]*n\nqwer = n\nindex = 0\nfor i in range(k):\n    res = 0\n    while res != a[i]%qwer:\n        index = plus(index)\n        res += p[index]\n    p[index] = 0\n    qwer -= 1\n    print(index + 1, end = \" \")\n    while p[index] != 1 :\n        index = plus(index)\n", "n,k=map(int,input().split())\nl=list(map(int,input().split()))\nj=0\nL=list(range(1,n+1))\nfor i in l:\n    k-=1\n    j=(j+i)%n\n    if k!=0:\n        print(L[j],end=' ')\n    else :print (L[j],end='')\n    n-=1\n    \n    L.pop(j)\n"]