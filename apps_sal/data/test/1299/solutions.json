["import sys\nfin = sys.stdin\n\nn, k = map(int, fin.readline().split())\nc = list(map(int, fin.readline().split()))\ns = [0] * (n + 1)\nfor i in range(n):\n  s[i + 1] = s[i] + c[i]\n\nms = [i for i in range(n)]\nfor i in range(n - k - 1, k - 1, -1):\n  s_last = s[ms[i + 1] + k] - s[ms[i + 1]]\n  s_curr = s[i + k] - s[i]\n  if s_curr >= s_last:\n    ms[i] = i\n  else:\n    ms[i] = ms[i + 1]\n\na, b = 0, k\n\nfor i in range(n - 2 * k + 1):\n  j = i + k\n  sa = s[j] - s[i]\n  sb = s[ms[j] + k] - s[ms[j]]\n  if sa + sb > s[a + k] - s[a] + s[b + k] - s[b]:\n    a, b = i, ms[j]\n\nprint(a + 1, b + 1)", "import itertools\nn, k = list(map(int, input().split()))\nx = (0,) + tuple(itertools.accumulate(list(map(int, input().split()))))\nansa = ansb = 0\nfor i in range(2 * k, n + 1):\n    if ansa < x[i - k] - x[i - 2 * k]:\n        anst = i - 2 * k + 1; ansa = x[i - k] - x[i - 2 * k]\n    if ansb < ansa + x[i] - x[i - k]:\n        ans1 = anst; ans2 = i - k + 1; ansb = ansa + x[i] - x[i - k]\nprint(ans1, ans2)\n", "def readInt():\n    return int(input())\n\ndef readIntList():\n    l = input()\n    return list(map(int, l.split(\" \")))\n\ndef build(tree, elem, v, l, r):\n    if(l == r):\n        tree[v] = elem[l]\n    else:\n        m = (l + r) // 2\n        build(tree, elem, v * 2, l, m)\n        build(tree, elem, v * 2 + 1, m + 1, r)\n        tree[v] = max(tree[v * 2], tree[v * 2 + 1])\n\ndef find_max(tree, v, l, r, tl, tr):\n    if(l > r):\n        return (0, 10000)\n    else:\n        if(tl == l and tr == r):\n        #   print(tl, tree[v])\n            return (tree[v], tl)\n        else:\n            tm = (tl + tr) // 2\n            m1 = find_max(tree, v * 2,     l,              min(r, tm), tl,     tm)\n            m2 = find_max(tree, v * 2 + 1, max(l, tm + 1), r,          tm + 1, tr)\n            if(m1[0] == m2[0]):\n                if(m1[1] > m2[1]):\n                    return m2\n                else:\n                    return m1\n            else:\n                if(m1[0] > m2[0]):\n                    return m1\n                else:\n                    return m2\n\n            #return max(m1, m2)\n\n\n(n, k) = readIntList() \nlaws = readIntList()\n\ntree = 4*n*[0]\n\nm = sum( laws [0 : k] )\nn = len(laws)\nmaxs = [m]\nfor i in range(1, n - k + 1) :\n    m -= laws[i - 1];\n    m += laws[i + k - 1];\n    maxs.append(m)\n\nmn = len(maxs) - 1\n\n#print(mn, maxs)\n#build(tree, maxs, 1, 0, len(maxs) - 1)\n#print(tree)\n#print( find_max(tree, 1, 1, len(maxs) - 1, 0, len(maxs) - 1) )\n\n#last_max = ((0, 0), (0, 0))\n#last_max_i = 0\nm1 = 0\nm2 = 0\n\n#for i in range(0, mn - k):\n#   m1 = (maxs[i], i)\n#\n#   if( i + k > last_max[1][1] ):\n#       m2 = find_max(tree, 1, i + k, mn - 1, 0, mn - 1)\n\n#   if( (m1[0] + m2[0]) > last_max[0][0] + last_max[1][0] ):\n#       last_max = (m1, m2)\n\n#print( last_max )\n#print( last_max[0][1] + 1, last_max[1][1] + 1 )\n\n#print( last_max_i + k, mn - 1)\n#for i in range( last_max_i + k, mn):\n\n#   if( maxs[i] + maxs[last_max_i] == last_max ):\n#       last_max_i = (last_max_i, i)\n#       break\n\n#print (last_max_i[0] + 1, last_max_i[1] + 1)\nm1 = maxs[mn - k]\ni1 = 0\nm2 = maxs[mn]\ni2 = 0\n#print ( list(range(mn - k, -1, -1)) )\n\na = (mn + 1) * [0]\n\nfor i in range(mn - k, -1, -1):     \n    if( maxs[i + k] >= m2):\n        m2 = maxs[i + k]\n        i2 = i + k\n    a[i] = (maxs[i] + m2, i2);\n\n\n#   print( i, i + k, i1, i2, maxs[i], maxs[i + k - 1])\n#print(a)\n\nms = 0\n#print(list(range(0, mn - k)))\nfor i in range(0, mn - k + 1):\n    if(a[i][0] > ms):\n        i1 = i\n        i2 = a[i][1]\n        ms = a[i][0]\n\nprint(i1 + 1, i2 + 1)", "n, k = list(map(int, input().split()))\nv = list(map(int, input().split()))\ns, dp = [0 for i in range(0, n)], [0 for i in range(0, n)]\nsol, a, b = 0, 0, 0\n\nfor i in range(n-1, -1, -1):\n    s[i] = v[i]\n    if i+1 < n: s[i] += s[i+1]\n    if i+k < n: s[i] -= v[i+k]\n\n    dp[i] = s[i]\n    if i+1 < n: dp[i] = max(dp[i], dp[i+1])\n\nfor i in range(0, n):\n    if i+k > n-1: break\n    if s[i] + dp[i+k] > sol:\n        sol = s[i] + dp[i+k]\n        a = i\nfor b in range(a+k, n):\n    if b+k > n-1: break\n    if s[a] + s[b] == sol: break\n\n#print(s)\n#print(dp)\nprint(a+1, b+1)\n\n", "n, k = map(int, input().split())\na = [0] + list(map(int, input().split()))\nsums = []\nfor x in a: sums.append(x + sums[-1] if x > 0 else 0)\nS = l = r = ans = pos = 0\nfor i in range(k + 1, n - k + 2):\n    if sums[i - 1] - sums[i - k - 1] > S:\n        S = sums[i - 1] - sums[i - k - 1]\n        pos = i - k\n    if S + sums[i + k - 1] - sums[i - 1] > ans:\n        ans = S + sums[i + k - 1] - sums[i - 1]\n        l = pos\n        r = i\nprint(l, r)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nsums = [0]\nfor x in a: sums.append(x + sums[-1])\nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    if sums[i] - sums[i - k] > S:\n        S = sums[i] - sums[i - k]\n        pos = i - k\n    if S + sums[i + k] - sums[i] > ans:\n        ans = S + sums[i + k] - sums[i]\n        l = pos\n        r = i\nprint(l + 1, r + 1)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nsums = [0]\nfor x in a: sums.append(x + sums[-1])\nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    (prev, cur, nex) = (sums[i - k], sums[i], sums[i + k])\n    if cur - prev > S:\n        S = cur - prev\n        pos = i - k\n    if S + nex - cur > ans:\n        ans = S + nex - cur\n        l = pos\n        r = i\nprint(l + 1, r + 1)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nsums = [0]\nfor x in a: sums.append(x + sums[-1])\nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    (prev, cur, nex) = (sums[i - k], sums[i], sums[i + k])\n    if cur - prev > S:\n        S = cur - prev\n        pos = i - k\n    if S + nex - cur > ans:\n        ans = S + nex - cur\n        l = pos\n        r = i\nprint(l + 1, r + 1) ", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nsums = [0]\nfor x in a: sums.append(x + sums[-1])\nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    (prev, cur, nex) = (sums[i - k], sums[i], sums[i + k])\n    dif = cur - prev\n    if dif > S:\n        S = dif\n        pos = i - k\n    dif = nex - cur\n    if S + dif > ans:\n        ans = S + dif\n        l = pos\n        r = i\nprint(l + 1, r + 1)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nsums = [0]\nfor x in a: sums.append(x + sums[-1])\nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    (prev, cur, nex) = (sums[i - k], sums[i], sums[i + k])\n    dif = cur - prev\n    if dif > S:\n        S = dif\n        pos = i - k\n    dif = nex - cur\n    if S + dif > ans:\n        ans = S + dif\n        l = pos\n        r = i\nprint(l + 1, r + 1) ", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nsums = [0]\nfor x in a: sums.append(x + sums[-1]) \nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    if sums[i] - sums[i - k] > S:\n        S = sums[i] - sums[i - k]\n        pos = i - k\n    if S + sums[i + k] - sums[i] > ans:\n        ans = S + sums[i + k] - sums[i]\n        l = pos\n        r = i\nprint(l + 1, r + 1)", "import itertools\nn, k = map(int, input().split())\nsums = (0,) + tuple(itertools.accumulate(map(int, input().split())))\nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    if sums[i] - sums[i - k] > S:\n        S = sums[i] - sums[i - k]\n        pos = i - k\n    if S + sums[i + k] - sums[i] > ans:\n        ans = S + sums[i + k] - sums[i]\n        l = pos\n        r = i\nprint(l + 1, r + 1)", "import itertools\nn, k = map(int, input().split())\nsums = (0,) + tuple(itertools.accumulate(map(int, input().split())))\nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    if sums[i] - sums[i - k] > S:\n        S = sums[i] - sums[i - k]\n        pos = i - k\n    if S + sums[i + k] - sums[i] > ans:\n        ans = S + sums[i + k] - sums[i] \n        l = pos\n        r = i\nprint(l + 1, r + 1)", "n, k = (int(x) for x in input().split())\nx = [int(x) for x in input().split()]\n\ns = [0]\nfor i in range(n):\n\ts.append(s[i] + x[i])\n\na = n - k - k + 1\nsa = s[n - k] - s[a - 1]\nb = n - k + 1\nsb = s[n] - s[b - 1]\nans = sa + sb\nansa = a\nansb = b\nib = b\n\nwhile a > 1:\n\ta -= 1\n\tsa = s[a + k - 1] - s[a - 1]\n\tb -= 1\n\ttb = s[b + k - 1] - s[b - 1]\n\tif tb >= sb:\n\t\tsb = tb\n\t\tib = b\n\tif sa + sb >= ans:\n\t\tansa = a\n\t\tansb = ib\n\t\tans = sa + sb\n\nprint(ansa, ansb)\n", "lm = [0] * 200000\nli = [0] * 200000\nrm = [0] * 200000\nri = [0] * 200000\n\nn, k = list(map(int, input().split()))\n\nd = list(map(int, input().split()))\n\nsm = 0\nfor i in range(k):\n    sm += d[i]\n\nlm[k - 1] = sm\nli[i - 1] = 0\n\nfor i in range(k, n):\n    sm = sm - d[i - k] + d[i]\n    if sm > lm[i - 1]:\n        lm[i] = sm\n        li[i] = i - k + 1\n    else:\n        lm[i] = lm[i - 1]\n        li[i] = li[i - 1]\n\nsm = 0\nfor i in range(n - 1, n - 1 - k, -1):\n    sm += d[i]\n\nrm[n - k] = sm\nri[n - k] = n - k\n\nfor i in range(n - k - 1, -1, -1):\n    sm = sm - d[i + k] + d[i]\n    if sm >= rm[i + 1]:\n        rm[i] = sm\n        ri[i] = i\n    else:\n        rm[i] = rm[i + 1]\n        ri[i] = ri[i + 1]\n\nmx = -1\nfor i in range(k - 1, n - k):\n    if lm[i] + rm[i + 1] > mx:\n        mx = lm[i] + rm[i + 1]\n        a = li[i]\n        b = ri[i + 1]\n\nprint(a + 1, b + 1)\n", "n, k = map(int, input().split())\ns, t = 0, list(map(int, input().split()))\n\nfor i in range(1, n):\n    t[i] += t[i - 1]\nt = [t[k - 1]] + [t[i + k] - t[i] for i in range(n - k)]\np = [(t[i], i) for i in range(n - k + 1)]\np.reverse()\nfor i in range(1, n - k):\n    if p[i][0] < p[i - 1][0]: p[i] = max(p[i], p[i - 1])\np.reverse()\n\na, b = 0, 0\nfor i in range(n - 2 * k + 1):\n    if p[i + k][0] + t[i] > s:\n        s = p[i + k][0] + t[i]\n        a, b = i, p[i + k][1]\nprint(a + 1, b + 1)", "read_line = lambda: list(map(int, input().split(' ')))\nn, k = read_line()\nx = read_line()\nfor i in range(n - 2, -1, -1):\n    x[i] += x[i+1]\nfor i in range(n - k):\n    x[i] -= x[i+k]\nj = b = n - k\na = b - k\nfor i in range(a - 1, -1, -1):\n    if x[i + k] >= x[j]:\n        j = i + k\n    if x[i] + x[j] >= x[a] + x[b]:\n        a, b = i, j\nprint(a + 1, b + 1)\n", "n, k = tuple(map(int, input().split(' ')))\nar = list(map(int, input().split(' ')))\nt = [0]\nfor i in range(n):\n\tt.append(t[-1]+ar[i])\nd = [0]*n\na = [0]*n\na1 = 0\nb = k\nm = 0\nfor i in range(k, n-k+1):\n\t#print(a,b,d,m)\n\tif t[i]-t[i-k]>d[i-1]:\n\t\td[i] = t[i]-t[i-k]\n\t\ta[i] = i-k\n\telse:\n\t\td[i] = d[i-1]\n\t\ta[i] = a[i-1]\n\tif d[i]+t[i+k]-t[i]>m:\n\t\tm = d[i]+t[i+k]-t[i]\n\t\ta1 = a[i]\n\t\tb = i\n#print(a,b,d,m)\nprint('{0} {1}'.format(a1+1,b+1))\n", "n, k = map(int, input().split())\ns, t = 0, list(map(int, input().split()))\n\nfor i in range(1, n):\n    t[i] += t[i - 1]\nt = [t[k - 1]] + [t[i + k] - t[i] for i in range(n - k)]\np = [(t[i], i) for i in range(n - k + 1)]\np.reverse()\nfor i in range(1, n - k):\n    if p[i][0] < p[i - 1][0]: p[i] = max(p[i], p[i - 1])\np.reverse()\n\na, b = 0, 0\nfor i in range(n - 2 * k + 1):\n    if p[i + k][0] + t[i] > s:\n        s = p[i + k][0] + t[i]\n        a, b = i, p[i + k][1]\nprint(a + 1, b + 1)", "n, k = [int(x) for x in input().split()]\n\nabsurd_scores = [int(x) for x in input().split()]\n\npartial_sums = [0]\n\n\nfor idx in range(len(absurd_scores)):\n    partial_sums.append(partial_sums[-1] + absurd_scores[idx])\n    \n# print(partial_sums)\n\n\na = n - 2 * k\nb = n - k\n\nmax_sum = partial_sums[n] - partial_sums[n - 2 * k]\n\ncur_top_idx = n - k \ncur_top_max = partial_sums[n] - partial_sums[n - k]\n\n# print(max_sum)\n# print(cur_top_max)\n\nfor i in reversed(list(range(n - 2 * k))):\n    \n    new_top_idx = i + k\n    \n#     print(new_top_idx)\n    \n    new_top_sum = partial_sums[new_top_idx + k] - partial_sums[new_top_idx]\n    \n    if new_top_sum >= cur_top_max:\n        cur_top_max = new_top_sum\n        cur_top_idx = new_top_idx\n    \n    new_low_idx = i\n#     print(new_low_idx, new_low_idx + k - 1)\n    \n    new_sum = partial_sums[new_low_idx + k] - partial_sums[new_low_idx] + cur_top_max\n    \n    if new_sum >= max_sum:\n        a = new_low_idx\n        b = cur_top_idx\n        max_sum = new_sum\n        \nprint(a + 1, b + 1)\n    \n    \n  \n#Edge Cases\n\n'''\nMust cover entire range [1 4 5 6] for len 2\nSmallest idx is 2nd largest value\nCan't be greedy taking the max one immediately [2 1 99 100 98] for len 2\n'''\n\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nsums = [0]\nfor x in a: sums.append(x + sums[-1]) \nS = l = r = ans = pos = 0\nfor i in range(k, n - k + 1):\n    if sums[i] - sums[i - k] > S:\n        S = sums[i] - sums[i - k]\n        pos = i - k\n    if S + sums[i + k] - sums[i] > ans:\n        ans = S + sums[i + k] - sums[i]\n        l = pos\n        r = i\nprint(l + 1, r + 1)\n", "def main():\n    from itertools import accumulate\n    n, k = list(map(int, input().split()))\n    l = [0]\n    l.extend(accumulate(list(map(int, input().split()))))\n    ma = mab = 0\n    for i, x, y, z in zip(list(range(1, n)), l, l[k:], l[k * 2:]):\n        if ma < y - x:\n            t, ma = i, y - x\n        if mab < ma + z - y:\n            a, b, mab = t, i, ma + z - y\n    print(a, b + k)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]