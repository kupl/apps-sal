["import sys\nread = lambda: list(map(int, sys.stdin.readline().split()))\nx, y = read()\n\nres = []\nc = 'A'\nwhile x * y > 1:\n   k = min(x // y, x - 1)\n   if k > 0:\n      res.append('{}{}'.format(k, c))\n   x, y = y, x - k*y\n   c = 'A' if c == 'B' else 'B'\n\nif x == 0 or y == 0:\n   print('Impossible')\nelse:\n   print(''.join(res))\n\n", "x, y = map(int,input().split(\" \"))\n\nres = []\nc = 'A'\nwhile x * y > 1:\n   k = min(x // y, x - 1)\n   if k > 0:\n      res.append('{}{}'.format(k, c))\n   x, y = y, x - k*y\n   c = 'A' if c == 'B' else 'B'\n\nif x == 0 or y == 0:\n   print('Impossible')\nelse:\n   print(''.join(res))", "def solve(a, b):\n  r = []\n  while a and b and a+b > 2:\n    q = min((a//b + b//a), max(a, b)-1)\n    r.append(str(q))\n    if a > b:\n      r.append('A')\n      a -= b*q\n    else:\n      r.append('B')\n      b -= a*q\n  if a != 1 or b != 1:\n    return 'Impossible'\n  return ''.join(r)\n\ndef main():\n  a, b = map(int, input().split())\n  print(solve(a, b))\n\nmain()", "def gcd(m, n):\n    if m < n:\n        m, n = n, m\n    r = m % n\n    while r:\n        m, n = n, r\n        r = m % n\n    return n\n\n\ndef search(x, y):\n    while True:\n        if x == 1:\n            ans.extend( [] if y == 1 else (str(y - 1) + 'B') )\n            return\n        if y == 1:\n            ans.extend( [] if x == 1 else (str(x - 1) + 'A') )\n            return\n        if x < y:\n            ans.append(str(y // x) + 'B')\n            x, y = x, y % x\n        else:\n            ans.append(str(x // y) + 'A')\n            x, y = x % y, y\n\na, b = [ int(i) for i in input().split() ]\n\nif gcd(a, b) != 1:\n    print(\"Impossible\")\nelse:\n    ans = []\n    search(a, b)\n    \n    i, length = 0, len(ans)\n    print(''.join(ans))", "def gcd(m, n):\n    if m < n:\n        m, n = n, m\n    r = m % n\n    while r:\n        m, n = n, r\n        r = m % n\n    return n\n\ndef search(x, y):\n    nonlocal ans\n    while True:\n        if x == 1:\n            ans = ans + (\"\" if y == 1 else str(y - 1) + 'B')\n            return\n        if y == 1:\n            ans = ans + (\"\" if x == 1 else str(x - 1) + 'A')\n            return\n        if x < y:\n            ans = ans + str(y // x) + 'B'\n            x, y = x, y % x\n        else:\n            ans = ans + str(x // y) + 'A'\n            x, y = x % y, y\n\na, b = [ int(i) for i in input().split() ]\n\nif gcd(a, b) != 1:\n    print(\"Impossible\")\nelse:\n    ans = \"\"\n    search(a, b)\n    print(ans)", "import fractions\ndef solve(x, y):\n    if fractions.gcd(x, y) > 1: return 'Impossible'\n    turn = x > y\n    if not turn: x, y = y, x\n    ans = []\n    while x != 0 and y != 0:\n        ans.append((x//y, 'A' if turn else 'B'))\n        x, y = y, x%y\n        turn = not turn\n    ans[-1] = (ans[-1][0]-1, ans[-1][1])\n    return ''.join(str(n) + l for n, l in ans)\n\nx, y = [int(x) for x in input().split()]\nprint(solve(x, y))\n", "a = input().split()\ntarget = (int(a[0]), int(a[1]))\nx=(1, 0)\ny=(0, 1)\ntoadd=\"A\"\nans = \"\"\ndef less(a, b):\n  return a[0]*b[1]<b[0]*a[1]\nwhile True:\n    z = (x[0]+y[0], x[1]+y[1])\n    if z[0] > target[0] or z[1] > target[1]:\n        print(\"Impossible\")\n        return\n    if z==target:\n        print(ans)\n        return\n    if less(z, target): # z replaces y\n        low = 1\n        high = int(1e18)\n        while (high > low):\n            guess = (low+high+1)//2\n            if less((x[0]*guess+y[0], x[1]*guess+y[1]), target):\n                low = guess\n            else:\n                high = guess - 1\n        ans += str(low)\n        ans += \"A\"\n        y = (y[0] + low * x[0], y[1] + low * x[1])\n    elif less(target, z):\n        low = 1\n        high = int(1e18)\n        while (high > low):\n            guess = (low+high+1)//2\n            if less(target,(x[0]+guess*y[0], x[1]+guess*y[1])):\n                low = guess\n            else:\n                high = guess - 1\n        ans += str(low)\n        ans += \"B\"\n        x = (x[0] + low * y[0], x[1] + low * y[1])\n    else:\n        print(\"Impossible\")\n        return\n", "def gcd(x , y):\n    if(x > y):x , y = y , x\n    if(x == 0):return y\n    return gcd(y % x , x)\nA , B = map(int , input().split())\ndef solve(X , Y):\n    if(X > Y):\n        if(Y == 1):\n            print(str(X - 1) + \"A\" , end = \"\")\n            return;\n        else:\n            print(str(X // Y) + \"A\" , end = \"\")\n            solve(X % Y , Y)\n    else:\n        if(X == 1):\n            print(str(Y - 1) + \"B\" , end = \"\")\n            return;\n        else:\n            print(str(Y // X) + \"B\" , end = \"\")\n            solve(X ,  Y % X)\nif(gcd(A , B) == 1):\n    solve(A , B)\nelse:\n    print(\"Impossible\")\n", "def gcd(a,b):\n\n    if b==0:\n\n        return a\n\n    else:\n\n        return gcd(b, a%b)\n\n    \n\ndef solve(x, y, a, b):\n\n    ans=\"\"\n\n    while not x==1 or not y==1:\n\n        if x < y:\n\n            x,y,a,b=y,x,b,a\n\n        ans+=str((x-1)//y)+a\n\n        x = x - (x-1)//y * y\n\n    print (ans)\n\n    \n\nx,y=list(map(int, input().split()))\n\nif gcd(x,y)>1:\n\n    print (\"Impossible\")\n\nelse:\n\n    solve(x,y, \"A\", \"B\")\n\n\n\n# Made By Mostafa_Khaled\n", "def gcd(a,b):\n\tif b==0:\n\t\treturn a\n\tif a//b!=0:\n\t\tl.append(a//b)\n\treturn gcd(b,a%b)\n\nl=[]\nt=[\"A\",\"B\"]\nx,y=list(map(int,input().split()))\ng=gcd(x,y)\n\nl[-1]-=1\nif g==1:\n\tif x>y:\n\t\tstart=0\n\telse:\n\t\tstart=1\n\ts=''\n\tfor v in range(len(l)):\n\t\ts+=str(l[v])+t[(start+v)%2]\n\tprint(s)\n\n\nelse:\n\tprint('Impossible')\n", "def gcd(x, y):\n\tif y == 0:\n\t\treturn x\n\treturn gcd(y, x % y)\nx, y = map(int, input().split())\nif gcd(x, y) != 1:\n\tprint('Impossible')\n\treturn\na = []\nwhile y != 1:\n\ta += [x // y]\n\tx %= y\n\tx, y = y, x\na += [x-1]\ns = 'A'\nfor x in a:\n\tif x > 0:\n\t\tprint(x, end=s)\n\ts = 'AB'.replace(s, '') \n", "from math import gcd\ndef help():\n\tans = []\n\ta,b = map(int,input().split(\" \"))\n\tif(gcd(a,b)>1):\n\t\tprint(\"Impossible\")\n\t\treturn\n\twhile a!=1 or b!=1:\n\t\tif(a==1):\n\t\t\tans.append(str(b-1)+\"B\")\n\t\t\tbreak\n\t\telif(b==1):\n\t\t\tans.append(str(a-1)+\"A\")\n\t\t\tbreak\n\t\telif(a>b):\n\t\t\tans.append(str(a//b)+\"A\")\n\t\t\ta = a%b\n\t\telif(b>a):\n\t\t\tans.append(str(b//a)+\"B\")\n\t\t\tb = b%a\n\tprint(*ans[::],sep=\"\")\nhelp()"]