["from collections import Counter\nn = int(input())\na = [int(_) for _ in input().split()]\nf = Counter(a)\nN = 10 ** 5 + 10\np = [0 for i in range(N)]\nans = Counter()\nfor i in range(2, N):\n    if p[i]:\n        continue\n    for j in range(i, N, i):\n        p[j] = 1\n        ans[i] += f[j]\nprint(max(1, ans.most_common(1)[0][1]))\n", "n = int(input().strip())\na = [int(i) for i in input().strip().split()]\nf = [0 for i in range(max(a)+1)]\nl = len(f)\n\nfor i in a:\n  f[i]+=1\n\nif f[1]:\n  f[1]=1\n\nfor i in range(2,l):\n  for j in range(2*i,l,i):\n    f[i]+=f[j]\n\nprint(max(f))\n", "import functools\n\n@functools.lru_cache(maxsize=10000)\ndef factor(n):\n    res = []\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            res.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        res.append(n)\n    return set(res)\n\nnum = int(input())\n\npoks = list(map(int, input().split()))[:num]\n\nc = dict()\nfor p in poks:\n    for d in factor(p):\n        if d in c.keys():\n            c[d] += 1\n        else:\n            c[d] = 1\n            \nif c:\n    print(max(c.values()))\nelse:\n    print(1)", "n = int(input())\ns = list(map(int, input().split()))\n\npf = [[] for _ in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    if len(pf[i]) > 0:\n        continue\n    for j in range(i, 10 ** 5 + 1, i):\n        pf[j].append(i)\n\nf = [0] * (10 ** 5 + 1)\n\nfor x in s:\n    for i in pf[x]:\n        f[i] += 1\n\nprint(max(1, max(f)))\n", "dict = {}\nans = {}\nfor i in range(-1,100110): \n\tdict[i] = []\n\tans[i] = 0\nfor i in range(2,100010): \n\tif dict[i] == []:\n\t\tj = i+i\n\t\twhile j <= 100010:\n\t\t\t#print(dict[j])\n\t\t\ttmp = dict[j]\n\t\t\ttmp += [i]\n\t\t\tdict[j] = tmp\n\t\t\t#print(dict[j])\n\t\t\tj += i\n\t\tdict[i] = [i]\nn = input()\nn = input()\nn = n.split(\" \")\nbanyak = 0\nfor i in n:\n\ttmp = int(i)\n\tfor j in dict[tmp] : \n\t\tans[j] += 1\n\t\tif ans[j] > banyak : banyak = ans[j]\nif (banyak == 0) : banyak = 1\nprint(banyak)", "n=int(input())\nip=list(map(int,input().split()))\nm=max(ip)\narr=[0 for i in range(m+1)]\nfor i in ip:\n    arr[i]+=1\nans=0\nfor i in range(2,m+1):\n    j=i\n    count=0\n    while j<=m:\n        count+=arr[j]\n        j+=i\n    if count>ans:\n        ans=count\nprint(max(ans,1))\n", "def solve(A):\n    N = max(A)\n    primediv = list(range(N+1))\n    for p in range(2, int(N**0.5)+1):\n        if primediv[p] == p:\n            for i in range(2*p, N+1, p):\n                primediv[i] = p\n\n    count = [0] * (N+1)\n    for n in A:\n        while n != 1:\n            p = primediv[n]\n            count[p] += 1\n            while primediv[n] == p:\n                n //= p\n\n    return max(1, max(count))\n    \nn = int(input())\nA = [int(x) for x in input().split()]\nprint(solve(A))\n        \n", "def isPrime(n):\n  for i in range(2, int(n ** 0.5) + 1):\n    if n % i == 0:\n      return False\n  return True\n    \nprimes = set()    \n    \nfor i in range(2, 100000):\n  if isPrime(i):\n    primes.add(i)\n\nc = [1] + [0] * 100000\nn = input()\n\ns = list(map(int, input().split()))\n\nx = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313]\nfor i in s:\n  for p in x:\n    if i in primes:\n      c[i] += 1\n      break\n    if p**2 > i:\n      break\n    if i % p == 0:\n      c[p] += 1\n      while i and i % p == 0:\n        i //= p\n    \n  #if i != 1:\n  #  c[i] +=1\n\nm = max(c)\nprint(m)", "\nM = 10 ** 5\n\nn = int(input())\nss = [int(s) for s in input().split()]\n\nprime_factor = {i: set() for i in range(1, M + 1)}\n\nfor p in range(2, M + 1):\n    if prime_factor[p] != set():\n        continue\n    else:\n        for i in range(p, M + 1, p):\n            prime_factor[i].add(p)\n\ncnt = [0] * (M + 1)\n\nfor s in ss:\n    for p in prime_factor[s]:\n        cnt[p] += 1\n\nprint(max(1, max(cnt)))", "\nM = 10 ** 5\n\nn = int(input())\nss = [int(s) for s in input().split()]\n\nprime_factor = [set() for i in range(M + 1)]\n\nfor p in range(2, M + 1):\n    if prime_factor[p] != set():\n        continue\n    else:\n        for i in range(p, M + 1, p):\n            prime_factor[i].add(p)\n\ncnt = [0] * (M + 1)\n\nfor s in ss:\n    for p in prime_factor[s]:\n        cnt[p] += 1\n\nprint(max(1, max(cnt)))", "n = int(input())\ns = [int(i) for i in input().split()]\n\nans = 1\np = [0] * 100002\n\nfor i in s:\n    p[i] += 1\n\nfor i in range(2, 100002):\n    c = 0\n    for j in range(i, 100002, i):\n        c += p[j]\n    ans = max(ans, c)\nprint(ans)", "input()\ncount = {}\nfor x in map(int, input().split()):\n    d = 2\n    while d * d <= x:\n        if x % d == 0:\n            count[d] = count.get(d, 0) + 1\n            while x % d == 0:\n                x //= d\n        else:\n            d += 1\n    if x > 1:\n        count[x] = count.get(x, 0) + 1\nprint(max([1] + list(count.values())))\n\n", "n=int(input())\na=list(map(int,input().split(\" \")))\nt=max(a)\nk=[0]*(t+2)\nfor el in a:\n    k[el]+=1\nif k[1]:\n    k[1]=1\nfor j in range(2,t+2):\n    for i in range(2*j,t+2,j):\n            k[j]+=k[i]\nprint(max(k))", "n = int(input().strip())\na = [int(i) for i in input().strip().split()]\nf = [0 for i in range(max(a)+1)]\nl = len(f)\n\nfor i in a:\n  f[i]+=1\n\nif f[1]:\n  f[1]=1\n\nfor i in range(2,l):\n  for j in range(2*i,l,i):\n    f[i]+=f[j]\n\nprint(max(f))", "def main():\n\tn = input()\n\tL = [int(x) for x in input().split()]\n\tprint(solver(L))\n\ndef solver(L):\n\tn = max(L)\n\tnums = [0] * (n + 1)\n\tfor x in L:\n\t\tnums[x] += 1\n\thighestCount = 1\n\tfor i in range(2, n + 1):\n\t\tcount = sum(nums[i:n+1:i])\n\t\thighestCount = max(highestCount, count)\n\treturn highestCount\n\t\t#for j in range(i, n + 1, i):\n\t\t#\tcount += \n\n\n\n\t# n = max(L)\n\t# primes = makePrimes(n)\n\t# highestCount = maxCount(L)\n\t# for prime in primes:\n\t# \tif prime > n**0.5:\n\t# \t\tbreak \n\t# \tcount = len([x for x in L if x % prime == 0])\n\t# \tif count > highestCount:\n\t# \t\thighestCount = count\n\t# return highestCount\n\ndef maxCount(L):\n\td = dict()\n\tfor x in L:\n\t\tif x in d:\n\t\t\td[x] += 1\n\t\telse:\n\t\t\td[x] = 1\n\td[1] = 1\n\treturn max([d[x] for x in d])\n\n# print(solver([2, 3, 4]))\n# print(solver([3, 9]))\n# print(solver([2, 3, 4, 6, 7]))\n# print(solver([12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 15, 1, 18, 28, 20, 6, 31, 16, 5, 23, 21, 38, 3, 11, 18, 11, 3, 25, 33]))\n# print(solver([1, 1, 1]))\n# print(solver([1, 3, 6]))\n\nmain()\n", "def main():\n\tn = input()\n\tL = [int(x) for x in input().split()]\n\tprint(solver(L))\n\ndef solver(L):\n\tn = max(L)\n\tnums = [0] * (n + 1)\n\tfor x in L:\n\t\tnums[x] += 1\n\thighestCount = 1\n\tfor i in range(2, n + 1):\n\t\tcount = 0 \n\t\tfor j in range(i, n + 1, i):\n\t\t\tcount += nums[j]\n\t\t#count = sum(nums[i:n+1:i])\n\t\thighestCount = max(highestCount, count)\n\treturn highestCount\n\t\t#for j in range(i, n + 1, i):\n\t\t#\tcount += \n\n\n\n\t# n = max(L)\n\t# primes = makePrimes(n)\n\t# highestCount = maxCount(L)\n\t# for prime in primes:\n\t# \tif prime > n**0.5:\n\t# \t\tbreak \n\t# \tcount = len([x for x in L if x % prime == 0])\n\t# \tif count > highestCount:\n\t# \t\thighestCount = count\n\t# return highestCount\n\ndef maxCount(L):\n\td = dict()\n\tfor x in L:\n\t\tif x in d:\n\t\t\td[x] += 1\n\t\telse:\n\t\t\td[x] = 1\n\td[1] = 1\n\treturn max([d[x] for x in d])\n\n# print(solver([2, 3, 4]))\n# print(solver([3, 9]))\n# print(solver([2, 3, 4, 6, 7]))\n# print(solver([12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 12553, 15, 1, 18, 28, 20, 6, 31, 16, 5, 23, 21, 38, 3, 11, 18, 11, 3, 25, 33]))\n# print(solver([1, 1, 1]))\n# print(solver([1, 3, 6]))\n\nmain()\n", "\n\ndef __starting_point():\n    N = int(input())\n    lst2 = list(map(int, input().split()))\n    M = max(lst2)\n    N=M+100\n\n    lst = [True for _ in range(N)]\n    lst[0] = False\n    lst[1]= False\n\n    i = 2\n    while i < N:\n        if lst[i]:\n            for j in range(2,1+(N-1)//i):\n                lst[i*j]=False\n        i += 1\n\n    primes=[i for i in range(N) if lst[i]]\n    #print(len(re))\n\n\n\n\n\n\n    auxlst = [0]*(M+1)\n    for i in lst2:\n        auxlst[i] += 1\n\n    result = [0]*(M+1)\n\n\n\n\n\n\n\n\n\n    for p in primes:\n        if p > M:\n            break\n        n=p\n        for _ in range(M//p):\n            result[p] += auxlst[n]\n            n += p\n\n    result = max(1,max(result))\n    print(result)\n    # to make changes\n\n__starting_point()", "#!/usr/bin/env pypy3\n# -*- coding: UTF-8 -*-\n\ndef prime_t(t):\n    i=2\n    while i**2<=t:\n        if t%i==0:\n            return 0\n        i+=1\n    return 1\np=[]\n\nfor i in range(2,100001):\n    if prime_t(i):\n        p.append(i)\n\nn=int(input())\nol=[int(i) for i in input().split()]\nl=[i for i in ol if int(i)%2]\nans=max(1,n-len(l))\n\npd={i:0 for i in p}\nfor i in ol:\n    if i in pd:\n        pd[i]+=1\n        ans=max(ans,pd[i])\nl=[i for i in ol if i not in pd]\n\n\nld={}\nfor i in l:\n    if i in ld:\n        ld[i]+=1\n    else:\n        ld[i]=1\nsetl=set(l)\nmol=list(setl)\nmol.sort()\n\nfor i in mol:\n    so=i\n    for j in p:\n        tmp=1\n        if j/2>so:\n            break\n        elif so%j==0:\n            pd[j]+=ld[i]\n            while so%j==0:\n                so//=j\n            ans=max(ans,pd[j],tmp)\nprint(ans)", "import math\n\nN = int(input())\n\nS = [int(s) for s in input().split()]\nmax_s = max(S)\n\nfactors = [set() for i in range(max_s + 1)]\nfact_cnt = [0] * (max_s + 1)\n\nfor p in range(2, max_s + 1):\n    if factors[p] != set():\n        continue\n    else:\n        for i in range(p, max_s + 1, p):\n            factors[i].add(p)\n\n# print(factors)\n\nfor s in S:\n    for p in factors[s]:\n        fact_cnt[p] += 1\n\nans = max(1, max(fact_cnt))\n\nprint(ans)", "import math\n\nN = int(input())\n\nS = [int(s) for s in input().split()]\n\nfactors = {}\n\nfor s in S:\n    root_s = math.sqrt(s)\n\n    for i in range(2, math.ceil(root_s) + 1, 1):\n        if s % i == 0:\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n\n            while s % i == 0:\n                s //= i\n\n    if s > 1 and s in factors:\n        factors[s] += 1\n    elif s > 1 and s not in factors:\n        factors[s] = 1\n\n# print(factors)\n\nif len(factors.values()) == 0:\n    ans = 1\nelse:\n    ans = max(factors.values())\n\nprint(ans)", "import functools\nimport sys\ninput = lambda :sys.stdin.readline()\n@functools.lru_cache(maxsize=10000)\n\ndef factor(n):\n    res = []\n    d = 2\n\n    while d*d <= n:\n        if n % d == 0:\n            res.append(d)\n            n //= d\n        else:\n            d += 1\n\n    if n > 1:\n        res.append(n)\n\n    # print(\"res\" ,res)\n\n    return set(res)\n\ndef Main(n):\n    A = list(map(int, input().split()))[:n]\n    # print(A)\n    dic = dict()\n    # print(factor(1))\n\n    for p in A:\n        # print(factor(p))\n        for d in factor(p):\n            if d in dic.keys():\n                dic[d] += 1\n            else:\n                dic[d] = 1\n\n            # print(dic)\n\n    if dic:\n        print(max(dic.values()))\n    else:\n        print(1)\n\n\n\ndef __starting_point():\n    n = int(input())\n    Main(n)\n__starting_point()", "the_len = int(input())\ns2 = input()\nimport math\nnums = s2.split(' ')\n\ngroups = [0] * 100001\nmax = 1\n\nfor n in nums:\n    groups[int(n)] += 1\n\nfor i in range(2,100001):\n    res = 0\n    for j in range(i,100001,i):\n        res += groups[j]\n    if res > max :\n        max = res\n\nprint (max)", "the_len = int(input())\ns2 = input()\nimport math\nnums = s2.split(' ')\n\ngroups = [0] * 100001\nmax = 1\n\nfor n in nums:\n    groups[int(n)] += 1\n\nfor i in range(2,100001):\n    res = 0\n    for j in range(i,100001,i):\n        res += groups[j]\n    if res > max :\n        max = res\n\nprint (max)", "def function1(n,s):\n    if n==1:\n        return 1\n    pokemonj=0\n    pokecage=[0 for i in range(100001)]\n    for i in range(n):\n        pokecage[s[i]]+=1\n    maxyincage=min(pokecage[1],1)\n    a = [i for i in range(100001)]\n    a[1] = 0\n\n    i = 2\n\n    while i <= 100000:\n        if a[i] != 0:\n\n            pokemonj=0\n            for j in range(i, 100001, i):\n                a[j] = 0\n                pokemonj+=pokecage[j]\n            if pokemonj>maxyincage:\n                maxyincage=pokemonj\n\n        i += 1\n\n    return(maxyincage)\n\n\n\ndef main():\n    n=int(input())\n    s=list(map(int,input().split()))\n    print(function1(n,s))\ndef __starting_point():\n    main()\n\n\n\n__starting_point()", "def function1(n,s):\n    if n==1:\n        return 1\n    sn=max(s)\n    pokemonj=0\n    pokecage=[0 for i in range(sn+1)]\n    for i in range(n):\n        pokecage[s[i]]+=1\n    maxyincage=min(pokecage[1],1)\n    a = [i for i in range(sn+1)]\n    a[1] = 0\n\n    i = 2\n\n    while i <= sn:\n        if a[i] != 0:\n\n            pokemonj=pokecage[i]\n            for j in range(i*2, sn+1, i):\n                a[j] = 0\n                pokemonj+=pokecage[j]\n            if pokemonj>maxyincage:\n                maxyincage=pokemonj\n\n        i += 1\n\n    return(maxyincage)\n\n\n\ndef main():\n    n=int(input())\n    s=list(map(int,input().split()))\n    print(function1(n,s))\ndef __starting_point():\n    main()\n\n\n\n__starting_point()"]