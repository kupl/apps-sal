["import sys\n\nq = int(sys.stdin.readline().strip())\nfor Q in range(0, q):\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    p = sys.stdin.readline().strip()\n    i = 0\n    j = 0\n    alpha = [0] * 26\n    while i != len(s) and j != len(t):\n        if s[i] == t[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            k = ord(t[j]) - ord('a')\n            j = j + 1\n            alpha[k] = alpha[k] + 1\n    if i != len(s):\n        print(\"NO\")\n    else:\n        while j < len(t):\n            k = ord(t[j]) - ord('a')\n            j = j + 1\n            alpha[k] = alpha[k] + 1\n        j = 0\n        while j < len(p):\n            k = ord(p[j]) - ord('a')\n            j = j + 1\n            alpha[k] = alpha[k] - 1\n        if max(alpha) > 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")", "a = int(input())\nfor i in range(a):\n    s = input()\n    t = input()\n    p = input()\n    d = dict()\n    for x in p:\n        d[x] = d.get(x, 0) + 1\n    uk1 = 0\n    uk = 0\n    f = False\n    while uk < len(t):\n        if uk1 == len(s) and d.get(t[uk], 0) <= 0:\n            print('NO')\n            f = True\n            break\n        if uk1 == len(s):\n            d[t[uk]] -= 1\n            uk += 1\n        elif s[uk1] == t[uk]:\n            uk += 1\n            uk1 += 1\n        elif d.get(t[uk], 0) == 0:\n            print('NO')\n            f = True\n            break\n        else:\n            d[t[uk]] -= 1\n            uk += 1\n    if not f and uk1 == len(s):\n        print('YES')\n    elif uk1 != len(s) and not f:\n        print('NO')", "from sys import stdin\nc=int(stdin.readline().strip())\nfor cas in range(c):\n    s=list(stdin.readline().strip())\n    t=list(stdin.readline().strip())\n    p=list(stdin.readline().strip())\n    rem=0\n    flag=False\n    x=s[0]\n    y=0\n    for i in range(len(t)):\n        if x==t[i]:\n            y+=1\n            if y==len(s):\n                flag=True\n                break\n            x=s[y]\n                \n    for i in range(len(s)):\n        if s[i] in t:\n            t.remove(s[i])\n            rem+=1\n    for i in range(len(p)):\n        if p[i] in t:\n            t.remove(p[i])\n\n\n    if len(t)==0 and rem==len(s) and flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n        \n", "import sys\nfrom collections import Counter\nQ = int(input())\ndef check(a, b):\n    a = a[::-1]\n    b = b[::-1]\n    for i in b[::-1]:\n        if a and i == a[-1]:\n            a.pop()\n    if a:\n        return False\n    else:\n        return True\nfor _ in range(Q):\n    s = [ord(s) for s in sys.stdin.readline().strip()]\n    t = [ord(s) for s in sys.stdin.readline().strip()]\n    p = [ord(s) for s in sys.stdin.readline().strip()]\n    if not check(s, t):\n        sys.stdout.write('NO\\n')\n    else:\n        Cs = Counter(s)\n        Ct = Counter(t)\n        Cp = Counter(p)\n        if all(Ct[k] - Cs[k] <= Cp[k] for k in Ct.keys()):\n            sys.stdout.write('YES\\n')\n        else:\n            sys.stdout.write('NO\\n')", "n=int(input())\nfor i in range(n):\n    s=input()\n    t=input()\n    p=input()\n    mas1=[0]*26\n    flag=True\n    for i in range(len(s)):\n        mas1[ord(s[i])-97]+=1\n    mas2=[0]*26\n    x1=0\n    for i in range(len(t)):\n        if x1<len(s) and s[x1]==t[i]:\n            x1+=1\n        mas2[ord(t[i])-97]+=1\n    if x1!=len(s):\n        print(\"NO\")\n    else:\n        mas3=[0]*26\n        for i in range(len(p)):\n             mas3[ord(p[i])-97]+=1\n        for i in range(26):\n            if mas3[i]+mas1[i]<mas2[i]:\n                flag=False\n        if flag==True:\n            print(\"YES\")\n        else:\n            print(\"NO\")", "q = int(input())\nalth = \"qwertyuiopasdfghjklzxcvbnm\"\nfor i in range(q):\n    s = input()\n    t = input()\n    p = input()\n    s1 = [0] * 26\n    p1 = [0] * 26\n    t1 = [0] * 26\n\n    for i in s:\n        s1[alth.find(i)] += 1\n\n    for i in p:\n        p1[alth.find(i)] += 1\n\n    for i in t:\n        t1[alth.find(i)] += 1\n\n    ans = 1\n    for i in range(26):\n        if s1[i] + p1[i] < t1[i]:\n            ans = 0\n            break\n    if ans == 0:\n        print(\"NO\")\n    else:\n        n = len(s)\n        m = len(t)\n        i = 0\n        j = 0\n        while i < n and j < m:\n            if t[j] == s[i]:\n                i += 1\n            j += 1\n        if i != n:\n            ans = 0\n        \n        if ans == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n", "from collections import Counter\n\ndef check(s, t, p):\n    p = Counter(p)\n    idx = 0\n    for ch in t:\n        if idx < len(s) and s[idx] == ch:\n            idx += 1\n        elif ch in p and p[ch] > 0:\n            p[ch] -= 1\n        else:\n            return False\n    return idx == len(s)\n\nq = int(input())\nfor _ in range(q):\n    s = input()\n    t = input()\n    p = input()\n    if check(s, t, p):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport collections\nimport math\n\ndef isSubSequence(str1,str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0    # Index of str1 \n    i = 0    # Index of str2 \n    while j<m and i<n: \n        if str1[j] == str2[i]:     \n            j = j+1    \n        i = i + 1\n    return j==m\n    \n\nT = int(input())\n \n#A,H,Q = [int(x) for x in stdin.readline().split()] \nfor t in range(T):\n    #N,M = [int(x) for x in stdin.readline().split()]\n    s = input()\n    t = input()\n    p = input()\n    \n    freq_s = {}\n    freq_t = {}\n    freq_p = {}\n    for i in range(26):\n        freq_s[chr(97+i)] = 0\n        freq_t[chr(97+i)] = 0\n        freq_p[chr(97+i)] = 0\n        \n    for letter in s:\n        freq_s[letter] += 1\n    for letter in t:\n        freq_t[letter] += 1\n    for letter in p:\n        freq_p[letter] += 1\n    \n    # check s is subsequence of t, if not, print no    \n    sub = isSubSequence(s,t)\n    if sub==0:\n        print('NO')\n    else:\n        flag = 0\n        for i in range(26):\n            d = freq_t[chr(97+i)] - freq_s[chr(97+i)]\n            if d>0:\n                #print(chr(97+i))\n                if freq_p[chr(97+i)]<d and flag==0:\n                    print('NO')\n                    flag = 1\n                    \n        if flag==0:\n            print('YES')\n    \n    \n    \n \n", "from collections import defaultdict as dd, deque\nq = int(input())\n\ndef solve():\n    def f(x):\n        C = dd(int)\n        for a in x:\n            C[a] += 1\n        return C\n    \n    s = input()\n    t = input()\n    p = input()\n\n    cs = f(s)\n    ct = f(t)\n    cp = f(p)\n\n    needed = dd(int)\n    for k in ct:\n        needed[k] += ct[k]\n    for k in cs:\n        needed[k] -= cs[k]\n\n    for k in needed:\n        if needed[k] > cp[k] or needed[k] < 0:\n            return False\n\n    i = 0\n    j = 0\n    while j < len(t):\n        if i < len(s) and s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            if ct[t[j]] > 0:\n                ct[t[j]] -= 1\n            else:\n                return False\n            j += 1\n    return i == len(s) and j == len(t)\n    \n\nfor _ in range(q):\n    if solve():\n        print('YES')\n    else:\n        print('NO')\n", "def subseq(a,b):\n    n=len(a)\n    m=len(b)\n    i=0 \n    j=0 \n    c=0 \n    while i<n and j<m :\n        if a[i]==b[j]:\n            i+=1 \n            j+=1 \n            c+=1 \n        else:\n            j+=1 \n    return c==n \nfor _ in range(int(input())):\n    s=input()\n    t=input() \n    p=input()\n    from collections import Counter \n    c1=Counter(s)\n    c2=Counter(t)\n    c3=Counter(p)\n    f=1 \n    if not subseq(s,t):\n        f=0 \n    l=[chr(i) for i in range(97,123)]\n    for x in l:\n        if c1[x]>c2[x]:\n            f=0 \n            break  \n        req=c2[x]-c1[x]\n        if c3[x]<req:\n            f=0 \n            break \n    print('YES' if f else 'NO')", "import sys\ninput = sys.stdin.readline\nfrom collections import Counter\n\nQ=int(input())\nfor testcases in range(Q):\n    s=input().strip()\n    t=input().strip()\n    p=input().strip()\n\n    L=len(s)\n    ind=0\n\n    for te in t:\n        if te==s[ind]:\n            ind+=1\n        if ind==L:\n            break\n\n    if ind != L:\n        print(\"NO\")\n        continue\n\n    C=Counter(s)+Counter(p)\n    CT=Counter(t)\n\n    #print(s,p,t,C,CT)\n\n    for ct in CT:\n        if CT[ct]>C[ct]:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n\n    \n", "from collections import Counter\nfor _ in range(int(input())):\n    s=input()\n    t=input()\n    p=input()\n    cp=dict(Counter(p))\n    i=0\n    j=0\n    lt=len(t)\n    arr=[0]*lt\n    ls=len(s)\n    while i<ls and j<lt:\n        if s[i]==t[j]:\n            arr[j]=t[j]\n            i+=1\n            j+=1\n        else:\n            j+=1\n    if i!=ls:\n        print(\"NO\")\n    else:\n        flag=0\n        for i in range(lt):\n            if arr[i]==0:\n                try:\n                    cp[t[i]]-=1\n                    if cp[t[i]]<0:\n                        flag=1\n                        break\n                    arr[i]=t[i]\n                except:\n                    flag=1\n                    break\n        #print(arr,flag)\n        print(\"YES\" if flag==0 else \"NO\")\n", "def ain():\n    return list(map( int, input().split() ))\n\n\n\n# for _ in range( int(input()) ):\n# n = int(input())\n# python3 g.py\n\nfor _ in range( int(input()) ):\n    s = input()\n    t = input()\n    p = input()\n    fl = False\n    i = 0\n    for x in s:\n        while i<len(t) and t[i] != x:\n            i+=1\n        if i == len(t):\n            fl = True\n            break\n        i+=1\n    if fl:\n        print('NO')\n    else:\n        for x in t:\n            if s.count(x) + p.count(x) < t.count(x):\n                #print( x , s.count(x), p.count(x) , t.count(x)  )\n                print('NO')\n                fl = True\n                break\n        if not fl:\n            print('YES')\n\n", "def gns():\n    return list(map(int,input().split()))\nt=int(input())\n\n\ndef one():\n    s=input()\n    t=input()\n    p=input()\n    j=0\n    for c in s:\n        while j<len(t) and t[j]!=c:\n            j+=1\n        if j==len(t):\n            print('NO')\n            return\n        j+=1\n    def get_num(x):\n        ans=[0]*26\n        for c in x:\n            c=ord(c)-ord('a')\n            ans[c]+=1\n        return ans\n    ss=get_num(s)\n    tt=get_num(t)\n    pp=get_num(p)\n    for i in range(26):\n        if ss[i]+pp[i]<tt[i]:\n            print('NO')\n            return\n    print('YES')\n\n\nfor i in range(t):\n    one()\n\n\n\n\n", "import math\nfrom collections import deque, defaultdict\nfrom sys import stdin, stdout\n#input = stdin.readline\n# print = stdout.write\nlistin = lambda : list(map(int, input().split()))\nmapin = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    s = input()\n    t = input()\n    p = input()\n    cs = defaultdict(int)\n    ct = defaultdict(int)\n    cp = defaultdict(int)\n    for i in s:\n        cs[i]+=1\n    for i in t:\n        ct[i]+=1\n    for i in p:\n        cp[i]+=1\n    flag = True\n    for i in ct.keys():\n        if ct[i] > cs[i]+cp[i]:\n            flag = False\n    if flag:\n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i+=1\n            j+=1\n        if i == len(s):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "q = int(input())\nfor query in range(q):\n\ts = input()\n\tt = input()\n\tp = input()\n\t#s ma byc rowne t\n\tpointer_s = 0\n\tpointer_t = 0\n\tno = 0\n\tmiejsca = []\n\twhile pointer_s < len(s):\n\t\twhile True:\n\t\t\tif pointer_t >= len(t):\n\t\t\t\tno = 1\n\t\t\t\tbreak\n\t\t\telif t[pointer_t] != s[pointer_s]:\n\t\t\t\tpointer_t += 1\n\t\t\telse:\n\t\t\t\tpointer_s += 1\n\t\t\t\tmiejsca.append(pointer_t)\n\t\t\t\tpointer_t += 1\n\t\t\t\tbreak\n\t\tif no == 1:\n\t\t\tbreak\n\tif no == 0:\n\t\tliterki = [0] * 400\n\t\tfor i in range(len(t)):\n\t\t\tif i not in miejsca:\n\t\t\t\tliterki[ord(t[i])] += 1\n\t\tfor i in range(len(p)):\n\t\t\tliterki[ord(p[i])] -= 1\n\t\tfor i in range(400):\n\t\t\tif literki[i] > 0:\n\t\t\t\tno = 1\n\t\t\t\tbreak\n\tif no == 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\t\n", "import sys\nfrom collections import defaultdict\ninput = lambda: sys.stdin.readline().strip()\nprint = lambda x: sys.stdout.write(f\"{x}\\n\")\n\ndp = 0\n\ndef LCS(str1, str2):\n    XY=0\n    nonlocal dp\n    _max=-1\n    len1,len2=len(str1),len(str2)\n    dp=[[ 0 for x in range(len1+1) ] for x in range(len2+1)]\n    for x in range(1,len2+1):\n        for y in range(1,len1+1):\n            if str2[x-1]==str1[y-1]:\n                dp[x][y]=dp[x-1][y-1]+1\n            else:\n                dp[x][y]=max(dp[x-1][y],dp[x][y-1])\n            if _max<dp[x][y]:\n                _max=dp[x][y]\n                XY=[x,y]\n    return (_max,XY)\n\n \ndef LCSSTRING(str1,str2,XY,answer):\n    nonlocal dp\n    X,Y=XY[0],XY[1]\n    if dp[X][Y]==0:\n        return answer\n    if str2[X-1]==str1[Y-1]:\n        answer=str2[X-1]+answer\n        XY[0]-=1\n        XY[1]-=1\n    else:\n        if dp[X-1][Y]>dp[X][Y-1]:\n            XY[0]-=1\n        else:\n            XY[1]-=1\n    return LCSSTRING(str1,str2,XY,answer)\n\n\nfor t in range(int(input())):\n  s, t, p = input(), input(), input()\n\n  m, xy = LCS(s, t)\n  lcs = LCSSTRING(s, t, xy, \"\")\n\n  if lcs != s:\n    print(\"NO\")\n    continue\n\n  d1 = defaultdict(int)\n  d2 = defaultdict(int)\n  for i in t:\n    d1[i] += 1\n  for i in p:\n    d2[i] += 1\n  for i in lcs:\n    d2[i] += 1 \n\n  flag = True \n  for i in t:\n    if d1[i] > d2[i]:\n      flag = False \n      break \n  \n  if flag:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\n\n\n", "import sys\nfrom collections import defaultdict\ninput = lambda: sys.stdin.readline().strip()\nprint = lambda x: sys.stdout.write(f\"{x}\\n\")\nsys.setrecursionlimit(200000)\n\ndp = 0\n\ndef LCS(str1, str2):\n    XY=0\n    nonlocal dp\n    _max=-1\n    len1,len2=len(str1),len(str2)\n    dp=[[ 0 for x in range(len1+1) ] for x in range(len2+1)]\n    for x in range(1,len2+1):\n        for y in range(1,len1+1):\n            if str2[x-1]==str1[y-1]:\n                dp[x][y]=dp[x-1][y-1]+1\n            else:\n                dp[x][y]=max(dp[x-1][y],dp[x][y-1])\n            if _max<dp[x][y]:\n                _max=dp[x][y]\n                XY=[x,y]\n    return (_max,XY)\n\n \ndef LCSSTRING(str1,str2,XY,answer):\n    nonlocal dp\n    X,Y=XY[0],XY[1]\n    if dp[X][Y]==0:\n        return answer\n    if str2[X-1]==str1[Y-1]:\n        answer=str2[X-1]+answer\n        XY[0]-=1\n        XY[1]-=1\n    else:\n        if dp[X-1][Y]>dp[X][Y-1]:\n            XY[0]-=1\n        else:\n            XY[1]-=1\n    return LCSSTRING(str1,str2,XY,answer)\n\n\nfor t in range(int(input())):\n  s, t, p = input(), input(), input()\n\n  m, xy = LCS(s, t)\n  lcs = LCSSTRING(s, t, xy, \"\")\n\n  if lcs != s:\n    print(\"NO\")\n    continue\n\n  d1 = defaultdict(int)\n  d2 = defaultdict(int)\n  for i in t:\n    d1[i] += 1\n  for i in p:\n    d2[i] += 1\n  for i in lcs:\n    d2[i] += 1 \n\n  flag = True \n  for i in t:\n    if d1[i] > d2[i]:\n      flag = False \n      break \n  \n  if flag:\n    print(\"YES\")\n  else:\n    print(\"NO\")\n\n\n\n", "import sys\nimport math\n#input = sys.stdin.readline\n\nq=int(input())\n\nfor x in range(q):\n\ts=input()\n\tt=input()\n\tp=input()\n\n\ttc=[0]*26\n\tpc=[0]*26\n\t#print(\"yes\")\n\tfor i in range(len(p)):\n\t#\tprint(ord(p[i])-97)\n\t\tpc[ord(p[i])-97]+=1\n\n\ti=0\n\tj=0\n\twhile i<len(s) and j<len(t):\n\t\t if s[i]==t[j]:\n\t\t \ti+=1\n\t\t \tj+=1\n\t\t else:\n\t\t \tj+=1\n\n\tif i==len(s):\n\t\tfor y in range(len(t)):\n\t\t\ttc[ord(t[y])-97]+=1\n\t\tfor y in range(len(s)):\n\t\t\ttc[ord(s[y])-97]-=1\n\n\t\tflag=True\n\t\tfor y in range(26):\n\t\t\tif pc[y]<tc[y]:\n\t\t\t\tflag=False\n\t\t\t\tprint(\"NO\")\n\t\t\t\tbreak\n\t\tif flag:\n\t\t\tprint(\"YES\")\n\n\telse:\n\t\tprint(\"NO\")", "q = int(input())\nfor _ in range(q):\n    s = list(input())\n    t = list(input())\n    p = list(input())\n    i = 0\n    j = 0\n    u = True\n    while i < len(s):\n        while j < len(t):\n            if t[j] == s[i]:\n                t[j] = ''\n                j += 1\n                break\n            j += 1\n        i += 1\n    if t.count('') != len(s):\n        print(\"NO\")\n        continue\n    for i in p:\n        for j in range(len(t)):\n            if t[j] == i:\n                t[j] = ''\n                break\n    t = ''.join(t)\n    if t == '':\n        print('YES')\n    else:\n        print('NO')\n", "from collections import Counter\n\ndef isSubseq(s, x):\n\ti, j = 0, 0\n\twhile True:\n\t\tif j == len(x):\n\t\t\treturn True\n\t\tif i == len(s):\n\t\t\treturn False\n\t\tif s[i] == x[j]:\n\t\t\tj += 1\n\t\ti += 1\n\nfor _ in range(int(input().strip())):\n\ts = input().strip()\n\tt = input().strip()\n\tp = input().strip()\n\tif not isSubseq(t, s):\n\t\tprint('NO')\n\t\tcontinue\n\tcs, ct, cp = Counter(s), Counter(t), Counter(p)\n\tnewc = {}\n\tfor key in cs:\n\t\tnewc[key] = cs[key]\n\tfor key in cp:\n\t\tif key in list(newc.keys()):\n\t\t\tnewc[key] += cp[key]\n\t\telse:\n\t\t\tnewc[key] = cp[key]\n\twrong = False\n\tfor key in ct:\n\t\tif key in list(newc.keys()):\n\t\t\tif newc[key] < ct[key]:\n\t\t\t\twrong = True\n\t\t\t\tbreak\n\t\telse:\n\t\t\twrong = True\n\t\t\tbreak\n\tif wrong:\n\t\tprint('NO')\n\telse:\n\t\tprint('YES')\n\n"]