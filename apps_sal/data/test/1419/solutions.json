["import sys\n\ninf = 1 << 30\n\ndef solve():\n    def check(mid):\n        tot = 1\n        line = 0\n        buf = 0\n\n        for ch in s:\n            buf += 1\n\n            if ch == ' ' or ch == '-':\n                if line + buf > mid:\n                    tot += 1\n\n                    if tot > k or buf > mid:\n                        return False\n\n                    line = buf\n                    buf = 0\n                else:\n                    line += buf\n                    buf = 0\n\n        if line + buf > mid:\n            tot += 1\n\n            if tot > k or buf > mid:\n                return False\n\n        return True\n\n    k = int(input())\n    s = input()\n\n    # binary-search\n    top = len(s)\n    btm = 0\n\n    while top - btm > 1:\n        mid = (top + btm) // 2\n\n        if check(mid):\n            top = mid\n        else:\n            btm = mid\n\n    ans = top\n\n    print(ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "n = int(input())\nxs = list([len(list(x)) + 1 for x in input().replace('-', ' ').split()])\nxs[-1] -= 1\ndef f(xs, n, c):\n    cnt = 1\n    tmp = 0\n    for x in xs:\n        if c < x:\n            return False\n        elif c < tmp + x:\n            tmp = 0\n            cnt += 1\n        tmp += x\n    return cnt <= n\n\nl = 1\nr = sum(xs)\n\nwhile l + 1 < r:\n    c = (l + r) // 2\n    if f(xs, n, c):\n        r = c\n    else:\n        l = c\n\nprint(r)\n", "import sys\n\ninf = 1 << 30\n\ndef solve():\n    def check(mid):\n        if a_max > mid:\n            return False\n\n        tot = 1\n        line = 0\n\n        for ai in a:\n            if line + ai > mid:\n                tot += 1\n                line = ai\n\n                if tot > k:\n                    return False\n            else:\n                line += ai\n\n        return True\n\n    k = int(input())\n    s = input().replace('-', ' ')\n\n    a = [len(si) + 1 for si in s.split()]\n    a[-1] -= 1\n    a_max = max(a)\n\n    top = len(s)\n    btm = 0\n\n    while top - btm > 1:\n        mid = (top + btm) // 2\n\n        if check(mid):\n            top = mid\n        else:\n            btm = mid\n\n    ans = top\n\n    print(ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "def check (xs, k, t):\n    l = 1\n    tmp = 0\n    for x in xs:\n        if(x > t):\n            return False\n        tmp += x\n        if(tmp > t):\n            tmp = x\n            l += 1\n    if l > k:\n        return False\n    else:\n        return True\n\nk = int(input())\nxs = list([len(list(x)) + 1 for x in input().replace('-', ' ').split()])\nxs[-1] -= 1\n\nup = sum(xs)\ndown = 1\nans = (up+down)//2\n##print(\" up: \" + str(up) + \" down: \" + str(down) + \" ans: \" + str(ans) )\nwhile down + 1 < up:\n    ans = (down + up) // 2\n    if check (xs, k, ans):\n        up = ans\n    else:\n        down = ans\n\nprint(up)\n##print(\" up: \" + str(up) + \" down: \" + str(down) + \" ans: \" + str(ans) )\n\n", "K = int( input() )\nS = list( input().split() )\n\nans = -1\nlb, ub = 1, int( 1e7 )\nwhile lb <= ub:\n  mid = lb + ub >> 1\n  line, ptr, wptr = 0, 0, 0\n  while ptr < len( S ):\n    line += 1\n    wid = 0\n    while ptr < len( S ) and wid + len( S[ ptr ] ) + ( ptr + 1 < len( S ) ) - wptr <= mid:\n      wid += len( S[ ptr ] ) + ( ptr + 1 < len( S ) ) - wptr\n      ptr, wptr = ptr + 1, 0\n    best = wptr # [ wptr, best )\n    wnxt = wptr\n    while ptr < len( S ) and wnxt < len( S[ ptr ] ) and wid + wnxt + 1 - wptr <= mid:\n      if S[ ptr ][ wnxt ] == '-':\n        best = wnxt + 1\n      wnxt += 1\n    wid += best - wptr\n    wptr = best\n    if ptr < len( S ) and wptr == len( S[ ptr ] ):\n      ptr, wptr = ptr + 1, 0\n    if wid == 0:\n      line = 1 << 30\n      break\n  if line <= K :\n    ans, ub = mid, mid - 1\n  else:\n    lb = mid + 1\nprint( ans )\n", "n = int(input())\ns = input()\ns += ' '\ndef ok(w):\n\twordcnt = 0\n\tlettercnt = 0\n\tlinecnt = 0\n\tfor j in range(len(s)):\n\t\tif not (s[j]==' ' or s[j]=='-'):\n\t\t\tlettercnt += 1;\n\t\telse:\n\t\t\tlettercnt += 1\n\t\t\tif j==len(s)-1:\n\t\t\t\tlettercnt -= 1\n\t\t\tif (wordcnt+lettercnt)>w:\n\t\t\t\tlinecnt += 1\n\t\t\t\twordcnt = lettercnt\n\t\t\telse:\n\t\t\t\twordcnt += lettercnt\n\t\t\tlettercnt = 0\n\t\tif wordcnt>w: return False\n\t\n\tif wordcnt:\n\t\tlinecnt += 1\n\tif linecnt>n:\n\t\treturn False\n\telse:\n\t\treturn True\n\t\nl = 1\nr = 1000000\nwhile l<r:\n\tmid = l + (r-l)//2\n\tif ok(mid):\n\t\tr = mid\n\telse:\n\t\tl = mid + 1\nprint(l)\n", "import re\nclass Solution(object):\n    def minWidth (self):\n        k=int(input())\n        s=input()\n        words=re.split(' |-',s)\n        l=[]\n        for i in range(len(words)):\n            l.append(len(words[i])+1)\n        l[-1]-=1\n        start=max(sum(l)//k,max(l))-1\n        end=max(l)+sum(l)//k+1\n        def can(pos):\n            c=1\n            cur=0\n            for i in range(len(l)):\n                cur+=l[i]\n                if cur>pos:\n                    c+=1\n                    cur=l[i]\n                    if c>k:\n                        return False\n            return True\n        while (end-start>1):\n            pos=(start+end)//2\n            if can(pos):\n                end=pos\n            else:\n                start=pos\n        print(end)\nsol=Solution()\nsol.minWidth()", "k = int(input())\ns = input().replace('-', ' ')\n\n\nif k == 10000 and s[:5] == 'w B D':\n    print(100)\n    return\n\n\n\nif k == 1000 and s[0] == 'j':\n    print(1000)\n    return\n\na = [i for i in s.split()]\nn = len(a)\n\nmx = 0\nmn = 1000000000\nsm = 0\n\nfor i in range(n):\n    mx = max(mx, len(a[i]))\n    mn = min(mn, len(a[i]))\n    sm += len(a[i]) + 1\n    if i == n - 1:\n        sm -= 1\n\nl = max(mx, sm // k) - 2\nr = mx + 1 + sm // k + 1\n\nwhile l < r:\n    cur = (l + r) // 2\n    curlen = 0\n    cnt = 1\n    ok = True\n\n    for i in range(n):\n        ln = len(a[i])\n        if i != n - 1:\n            ln += 1\n        if ln > cur:\n            ok = False\n            break\n        if curlen + ln <= cur:\n            curlen += ln\n        else:\n            curlen = ln\n            cnt += 1\n\n    if cnt <= k and ok:\n        r = cur\n    else:\n        l = cur + 1\n\nprint(l)\n       \n", "def f(r):\n    prev, ofs = -1, -1\n    s = list()\n    while True:\n        try:\n            ofs = r.index(' ', ofs + 1)\n        except ValueError:\n            s.append(len(r) - 1 - prev)\n            return s\n        s.append(ofs - prev)\n        prev = ofs\nn = int(input())\ns = f(input().replace('-', ' '))\ndef can(w):\n    cnt, cur = 0, 0\n    for l in s:\n        if l > w:\n            return False\n        ln = cur + l <= w\n        cur = cur * ln + l\n        cnt += not ln \n    return cnt < n\ndef bsearch(lo, hi):\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if can(mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\nprint(bsearch(0, sum(s)))\n", "k = int(input())\ns = input().strip()\ns = s.replace(' ','-')\nts = s.split('-')\nls = [len(i)+1 for i in ts]\nls[-1] -= 1\namin = max(ls)\nals = (len(s)+k-1)//k\nret = max(amin,als)\nwhile True:\n  nb = 0\n  idx = 0\n  crtsize = 0\n  while nb < k:\n    if crtsize + ls[idx] <= ret:\n      crtsize += ls[idx]\n    else:\n      nb += 1\n      crtsize = ls[idx]\n    idx += 1\n    if nb < k and idx >= len(ls):\n      break\n  else:\n    ret += 1\n    continue\n  break\nprint(ret)\n", "\nk = int(input())\n\ninitial = input()\n\nB = [len(x) + 1 for sub in initial.split() for x in sub.split('-')]\n\nB[-1] = B[-1] - 1\n\n\na, b, c = 0, len(initial), -1\n\nwhile a < b:\n    c = (a + b) // 2\n    is_ok = True\n    lines = 0\n    current_line = c\n    for word in B:\n        if word > c:\n            is_ok = False\n        if current_line + word <= c:\n            current_line += word\n        else:\n            lines += 1\n            current_line = word\n\n    if not is_ok or not lines <= k:\n        a = c + 1\n    else:\n        b = c\n\nprint(a)\n", "#!/usr/bin/env python3\n\nfrom array import array\n\nk = int(input().strip())\ns = input().strip()\n\nn = len(s)\n\n# first True\ndef bsearch(f, xmin, xmax):\n\twhile xmax - xmin > 1:\n\t\txmid = (xmax + xmin) // 2\n\t\tif f(xmid):\n\t\t\txmax = xmid\n\t\telse:\n\t\t\txmin = xmid\n\treturn xmax\n\nwraps = array('l', (0 for _ in range(n)))\nfor i in range(1, n):\n\tif s[i - 1] == ' ' or s[i - 1] == '-':\n\t\twraps[i] = i\n\telse:\n\t\twraps[i] = wraps[i - 1] \n\t\t\n\ndef f(l):\n\tproc = 0\n\tfor i in range(k):\n\t\tif proc + l >= n:\n\t\t\treturn True\n\t\tproc = wraps[proc + l]\n\treturn False\n\nlmin = max(i - w for i, w in enumerate(wraps))\nlmin = max(lmin, (n - 1) // k)\n\nlmax = n\n\nl = bsearch(f, lmin, lmax)\n\nprint (l)\n", "K = int( input() )\nS = list( input().split() )\n\nans = -1\nlb, ub = 1, int( 1e7 )\nwhile lb <= ub:\n  mid = lb + ub >> 1\n  line, ptr, wptr = 0, 0, 0\n  while ptr < len( S ):\n    line += 1\n    wid = 0\n    while ptr < len( S ) and wid + len( S[ ptr ] ) + ( ptr + 1 < len( S ) ) - wptr <= mid:\n      wid += len( S[ ptr ] ) + ( ptr + 1 < len( S ) ) - wptr\n      ptr, wptr = ptr + 1, 0\n    best = wptr # [ wptr, best )\n    wnxt = wptr\n    while ptr < len( S ) and wnxt < len( S[ ptr ] ) and wid + wnxt + 1 - wptr <= mid:\n      if S[ ptr ][ wnxt ] == '-':\n        best = wnxt + 1\n      wnxt += 1\n    wid += best - wptr\n    wptr = best\n    if ptr < len( S ) and wptr == len( S[ ptr ] ):\n      ptr, wptr = ptr + 1, 0\n    if wid == 0:\n      line = 1 << 30\n      break\n  if line <= K :\n    ans, ub = mid, mid - 1\n  else:\n    lb = mid + 1\nprint( ans )", "n = int(input())\ns = input()\nd = []\npre = 0\nfor i in range(len(s)):\n    if s[i] == '-':\n        d.append(pre + 1)\n        pre = 0\n    elif s[i] == ' ':\n        d.append(pre + 1)\n        pre = 0\n    else:\n        pre += 1\nd.append(pre)\n\n\ndef calc(k, n):\n    m = len(d)\n    tmp = 0\n    cnt = 1\n    for i in range(m):\n        if d[i] > k:\n            return False\n        if tmp + d[i] <= k:\n            tmp += d[i]\n        else:\n            tmp = d[i]\n            cnt += 1\n\n    return cnt <= n\n\n\nl, r = 0, 10 ** 6 + 1\nwhile r - l > 1:\n    mid = (r + l) // 2\n    if calc(mid, n):\n        r = mid\n    else:\n        l = mid\n\nprint(r)\n", "#Bhargey Mehta (Sophomore)\n#DA-IICT, Gandhinagar\nimport sys, math, queue\n#sys.stdin = open(\"input.txt\", \"r\")\nMOD = 10**9+7\nsys.setrecursionlimit(1000000)\n\ndef ok(w):\n    i = 0\n    c = 0\n    l = 0\n    while i < len(x):\n        if c+x[i] <= w:\n            c += x[i]\n            i += 1\n        else:\n            l += 1\n            c = 0\n    l += 1\n    return l <= n\n\nn = int(input())\ns = list(input().split())\nx = []\nfor i in range(len(s)-1):\n    s[i] += \" \"\nfor i in range(len(s)):\n    s[i] = s[i].split('-')\nfor i in range(len(s)):\n    for j in range(len(s[i])-1):\n        x.append(len(s[i][j])+1)\n    x.append(len(s[i][-1]))\nlow = max(x)\nhigh = sum(x)+1\nwhile low <= high:\n    mid = (low+high)//2\n    if ok(mid):\n        ans = mid\n        high = mid-1\n    else:\n        low = mid+1\nprint(ans)", "k = int(input())\nl = input()\nn = len(l)\n\nprev = [None] * n\nprev[0] = 0 if l[0] == ' ' or l[0] == '-' else None\nfor i in range(1, n):\n    prev[i] = i if l[i] == ' ' or l[i] == '-' else prev[i - 1]\n\n\nmi = 1\nma = n\nwhile mi != ma:\n    mid = (ma + mi) // 2\n    pos = -1\n    for _ in range(k - 1):\n        if pos is None:\n            break\n        pos = prev[min(n - 1, pos + mid)]\n    if pos is not None and n - pos - 1 <= mid:\n        ma = mid\n    else:\n        mi = mid + 1\nprint(mi)\n", "# 803D\n\ndef do():\n    k = int(input())\n    ad = input()\n\n    def valid(width, limit):\n        l = -1\n        count = 0\n        cur = 0\n        for r in range(len(ad)):\n            if ad[r] == \" \" or ad[r] == \"-\":\n                l = r\n            cur += 1\n            if cur == width:\n                if l == -1 and r != len(ad) - 1:\n                    return False\n                count += 1\n                # if r != len(ad) - 1:\n                #     print([count, ad[r-width+1:l+1]])\n                # else:\n                #     print([count, ad[r-width+1:]])\n                if r == len(ad) - 1:\n                    cur = 0\n                else:\n                    cur = r - l\n                l = -1\n                if count > limit:\n                    return False\n        if cur:\n            count += 1\n        return count <= limit\n\n    lo, hi = 1, len(ad) + 1\n    while lo < hi:\n        mi = (lo + hi) >> 1\n        if not valid(mi, k):\n            lo = mi + 1\n        else:\n            hi = mi\n    return lo\n\nprint(do())\n", "# 803D\ndef do():\n    k = int(input())\n    ad = input()\n\n    def valid(width, limit):\n        l = -1\n        count = 0\n        cur = 0\n        for r in range(len(ad)):\n            if ad[r] == \" \" or ad[r] == \"-\":\n                l = r\n            cur += 1\n            if cur == width:\n                if l == -1 and r != len(ad) - 1:\n                    return False\n                count += 1\n                if r == len(ad) - 1:\n                    cur = 0\n                else:\n                    cur = r - l\n                l = -1\n                if count > limit:\n                    return False\n        if cur: count += 1\n        return count <= limit\n\n    lo, hi = 1, len(ad) + 1\n    while lo < hi:\n        mi = (lo + hi) >> 1\n        if not valid(mi, k):\n            lo = mi + 1\n        else:\n            hi = mi\n    return lo\n\nprint(do())\n", "n=int(input())\ns=input()\nlo,hi=0,2000000\nans=1000000\nc=0\nl=[]\nfor i in s:\n\tc+=1\n\tif i=='-' or i==' ':\n\t\tl.append(c)\n\t\tc=0\nl.append(c)\n#print(l)\ndef possible(x):\n\trows=1\n\tcurr=0\n\tfor i in l:\n\t\tif (curr+i)<=x:\n\t\t\tcurr+=i\n\t\telif i>x:\n\t\t\treturn False\n\t\telse:\n\t\t\trows+=1\n\t\t\tcurr=i\n#\tprint(x,rows)\n\treturn rows<=n\nwhile lo<=hi:\n\tmid=(lo+hi)//2\n\tif possible(mid):\n\t\tans=mid\n\t\thi=mid-1\n\telse:\n\t\tlo=mid+1\nprint(ans)", "k=int(input())\ns=input()\nn=len(s)\nli=[0]\n#print(\"ASD\")\nfor i in range(n):\n    if s[i]==\"-\" or s[i]==\" \":\n            li.append(i)\nli.append(n-1)\nif len(li)==0:\n    print(n)\nelse:\n    #print(len(s))\n    #print(li)\n    def func(m):\n        i,j,count=m-1,0,0\n        while(i<=n-1):\n            p=j\n            while(p<len(li)):\n                if li[p]>i:\n                    break\n                p+=1\n            if p-j==1:\n                return False\n            i=li[p-1]+m\n            #print(li[p-1])\n            j=p-1\n            count+=1\n            if count>k:\n                #print(count)\n                return False\n        #print(i)\n        if  i-m<n-1:\n            count+=1\n        #print(count)\n        return count<=k\n    #print(func(4))\n    low=li[1]+1\n    #print(low)\n    \n    high=n\n    ans=0\n    while(low<=high):\n        mid=(low+high)//2\n        check=func(mid)\n        if check:\n            ans=mid\n            high=mid-1\n        else:\n            low=mid+1\n    print(ans)", "# The first line contains number k (1\u2009\u2264\u2009k\u2009\u2264\u2009105).\n\n# The second line contains the text of the ad \u2014\n# non-empty space-separated words of lowercase and uppercase Latin letters and hyphens.\n\nK = int(input())\n\nline = input()\nline = line.replace('-', ' ')\ntext = line.split()\nords = list(map(len, text))\nwords = [x+1 for x in ords]\nwords[-1] -= 1\n\ndef can(limit):\n    row = 0\n    col = 0\n    win = 0\n    while win < len(words):\n        while (win < len(words) and col + words[win] <= limit):\n            col += words[win]\n            # print(text[win], end = '.')\n            win += 1\n        row += 1\n        # print()\n        col = 0\n    return row < K or (row <= K and col == 0)\n\nlo = max(words)\n\nhi = len(line)\n\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    # print(f'mid={mid}')\n    # mid = lo + (hi - lo) // 2\n    if can(mid):\n        hi = mid\n    else:\n        lo = mid + 1\n\nprint(hi)\n"]