["import sys\nfrom collections import Counter\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\n\nS = set()\n\nans = True\nAns = [] \ncnt = 0\nfor a in A:\n    cnt += 1\n    if a > 0:\n        S.add(a)\n    else:\n        a = -a\n        if a not in S:\n            ans = False\n            break\n        S.remove(a)\n    if not S:\n        Ans.append(cnt)\n        cnt = 0\n\nif cnt:\n    ans = False\n\nif ans:\n    A.reverse()\n    for c in Ans:\n        CA = Counter()\n        for _ in range(c):\n            CA[abs(A.pop())] += 1\n        if any(v > 2 for v in CA.values()):\n            ans = False\n            break\n\nif ans:\n    print(len(Ans))\n    print(*Ans)\nelse:\n    print(-1)", "n=int(input())\na=list(map(int, input().split()))\n\noffice = set()\nans=[]\ncurc=1\ncurday = []\nfor i in range(n):\n    if a[i] < 0:\n        if -1*a[i] not in office:\n            print(\"-1\")\n            quit()\n        else:\n            office.remove(-1*a[i])\n            if len(office) == 0:\n                ans.append(curc)\n                curc=0\n                curday=[]\n    else:\n        if a[i] in office:\n            print(-1)\n            quit()\n        else:\n            if a[i] in curday:\n                print(-1)\n                quit()\n            office.add(a[i])\n            curday.append(a[i])\n    curc += 1\n\nif len(office) != 0:\n    print(\"-1\")\n    quit()\n\nprint(str(len(ans)))\nprint(\" \".join(str(k) for k in ans))", "n = int(input())\n\nwork = set()\nday = set()\n\nprei = 0\nans = []\n\nfor i, x in enumerate(map(int, input().split())):\n\tif x > 0:\n\t\tif x in work:\n\t\t\tprint(-1)\n\t\t\tbreak\n\n\t\tif x in day:\n\t\t\tprint(-1)\n\t\t\tbreak\n\n\t\tday.add(x)\n\t\twork.add(x)\n\n\tif x < 0:\n\t\tif -x not in work:\n\t\t\tprint(-1)\n\t\t\tbreak\n\n\t\twork.remove(-x)\n\n\t\tif len(work) == 0:\n\t\t\tans.append(i - prei + 1)\n\t\t\tprei = i + 1\n\t\t\tday = set()\n\nelse:\n\tif prei != n:\n\t\tprint(-1)\n\n\telse:\n\n\t\tprint(len(ans))\n\t\tprint(*ans)", "n = int(input())\na = list(map(int, input().split()))\nans, q1, naw, q2 = [], -1, {}, 0\nfor q in range(len(a)):\n    if a[q] < 0 and -a[q] not in naw:\n        print(-1)\n        break\n    elif a[q] < 0:\n        naw[-a[q]] -= 1\n        q2 -= 1\n        if naw[-a[q]] < 0:\n            print(-1)\n            break\n    elif a[q] in naw:\n        print(-1)\n        break\n    else:\n        naw[a[q]] = 1\n        q2 += 1\n    if q2 == 0:\n        naw = {}\n        ans.append(q-q1)\n        q1 = q\nelse:\n    if q2 == 0:\n        print(len(ans))\n        print(*ans)\n    else:\n        print(-1)\n", "from collections import defaultdict\nn = int(input())\nl = [*map(int, input().split())]\n\nvalid = True\nres = []\n\ncnt = defaultdict(int)\ncur = 0\nfor e in l:\n    if e < 0:\n        valid &= cnt[-e] == 1\n        cnt[-e] += 1\n        cur += 1\n    else:\n        valid &= cnt[e] == 0\n        cnt[e] += 1\n    if cur == len(cnt):\n        res.append(2 * cur)\n        cnt.clear()\n        cur = 0\n\n    if not valid: break\nvalid &= cur == 0 and not cnt\nif not valid:\n    print(-1)\nelse:\n    print(len(res))\n    print(*res)", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int,minp().split()))\n\ndef solve():\n\tn = mint()\n\ts = set()\n\tw = set()\n\tk = 0\n\tr = []\n\tfor i in mints():\n\t\tk += 1\n\t\tif i < 0:\n\t\t\tif (-i) not in s:\n\t\t\t\tprint(-1)\n\t\t\t\treturn\n\t\t\ts.remove(-i)\n\t\t\tif len(s) == 0:\n\t\t\t\tr.append(k)\n\t\t\t\tk = 0\n\t\t\t\tw = set()\n\t\telse:\n\t\t\tif i in w:\n\t\t\t\tprint(-1)\n\t\t\t\treturn\n\t\t\ts.add(i)\n\t\t\tw.add(i)\n\tif len(s) != 0:\n\t\tprint(-1)\n\t\treturn\n\tprint(len(r))\n\tprint(' '.join(map(str,r)))\n\nsolve()\n", "n = int(input())\nsoot = set()\nusoot = set()\na = list(map(int,input().split()))\nans = []\nf = True\nc = 0\nfor i in a:\n    c += 1\n    if i < 0:\n        if -i in soot:\n            soot.remove(-i)\n            usoot.add(-i)\n        else:\n            f = False\n            break\n    else:\n        if i in soot or i in usoot:\n            f = False\n            break\n        else:\n            soot.add(i)\n    if len(soot) == 0:\n        usoot = set()\n        ans.append(c)\n        c = 0\nif len(soot) != 0:\n        f = False\nif f:\n    print(len(ans))\n    for i in ans:\n        print(i, end = \" \")\nelse:\n    print(-1)\n        \n", "3\n\nimport os\nimport sys\n\n\ndef main():\n    N = read_int()\n    A = read_ints()\n    ans = solve(N, A)\n    if not ans:\n        print('-1')\n    else:\n        print(len(ans))\n        print(*ans)\n\n\ndef solve(N, A):\n    ans = []\n\n    start = 0\n    present = set()\n    left = set()\n    for i, a in enumerate(A):\n        if a > 0:\n            if a in present or a in left:\n                return None\n            present.add(a)\n        else:\n            a = -a\n            if a not in present:\n                return None\n            present.remove(a)\n            left.add(a)\n\n            if not present:\n                ans.append(i - start + 1)\n                start = i + 1\n                left = set()\n\n    if start != N:\n        return None\n    return ans\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "input()\nans = []\ncur = 0\nstatus = set()\nwere = set()\ntry:\n    for ai in map(int, input().split()):\n        cur += 1\n        if ai < 0:\n            status.remove(abs(ai))\n            if not status:\n                ans.append(cur)\n                cur = 0\n                were = set()\n        else:\n            assert ai not in were\n            status.add(ai)\n            were.add(ai)\n    assert not were\n    print(len(ans))\n    print(*ans)\nexcept (AssertionError, KeyError):\n    print('-1')\n", "n=int(input())\nt=[int(s) for s in input().split()]\nla=set()\npl=set()\nbon=True\nlas=0\nrep=[]\nfor i in range(n):\n    e=abs(t[i])\n    if t[i]>0:\n        if e in la or e in pl:\n            bon=False\n            break\n        else:\n            la.add(e)\n    else:\n        if e in la:\n            la.remove(e)\n            pl.add(e)\n            if len(la)==0:\n                la=set()\n                pl=set()\n                rep.append(i+1-las)\n                las=i+1\n        else:\n            bon=False\n            break\nif len(la)==0 and len(pl)==0 and bon:\n    print(len(rep))\n    for i in rep:\n        print(i)\nelse:\n    print(-1)", "n = int(input())\na = list(map(int, input().split()))\n\ndef work():\n    c, d = set(), set()\n    r = [0]\n    for x in a:\n        r[-1] += 1\n        if x > 0:\n            if x in c:\n                return 0\n            if x in d:\n                return 0\n            c.add(x)\n            d.add(x)\n        if x < 0:\n            if -x not in c:\n                return 0\n            c.remove(-x)\n            if not c:\n                r.append(0)\n                d = set()\n    return 0 if r[-1] else r[:-1]\n\nans = work()\nif ans:\n    print(len(ans))\n    print(*ans)\nelse:\n    print(-1)", "import math\nfrom decimal import Decimal\nimport heapq\nfrom collections import deque\ndef na():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\treturn n,b\n \n \ndef nab():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\tc = [int(x) for x in input().split()]\n\treturn n,b,c\n \n \ndef dv():\n\tn, m = list(map(int, input().split()))\n\treturn n,m\n \n \ndef dva():\n\tn, m = list(map(int, input().split()))\n\ta = [int(x) for x in input().split()]\n\tb = [int(x) for x in input().split()]\n\treturn n,m,b\n \n \ndef eratosthenes(n): \n\tsieve = list(range(n + 1))\n\tfor i in sieve:\n\t\tif i > 1:\n\t\t\tfor j in range(i + i, len(sieve), i):\n\t\t\t\tsieve[j] = 0\n\treturn sorted(set(sieve))\n \n \ndef lol(lst,k):\n\tk=k%len(lst)\n\tret=[0]*len(lst)\n\tfor i in range(len(lst)):\n\t\tif i+k<len(lst) and i+k>=0:\n\t\t\tret[i]=lst[i+k]\n\t\tif i+k>=len(lst):\n\t\t\tret[i]=lst[i+k-len(lst)]\n\t\tif i+k<0:\n\t\t\tret[i]=lst[i+k+len(lst)]\n\treturn(ret)\ndef nm():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\tm = int(input())\n\tc = [int(x) for x in input().split()]\n\treturn n,b,m,c\n \n \ndef dvs():\n\tn = int(input())\n\tm = int(input())\n\treturn n, m \n \ndef fact(a, b):\n\tc = []\n\tans = 0\n\tf = int(math.sqrt(a))\n\tfor i in range(1, f + 1):\n\t\tif a % i == 0:\n\t\t\tc.append(i)\n\tl = len(c)\n\tfor i in range(l):\n\t\tc.append(a // c[i])\n\tfor i in range(len(c)):\n\t\tif c[i] <= b:\n\t\t\tans += 1\n\tif a / f == f and b >= f:\n\t\treturn ans - 1\n\treturn ans\n \n\nn = int(input())\na = list(map(int, input().split()))\nans = []\ns = set([a[0]])\nused = set()\nlst = 0\nfor q in range(1, n):\n\ti = a[q]\n\tif i < 0:\n\t\td = i * (-1)\n\t\tif d not in s:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\telse:\n\t\t\ts -= set([d])\n\t\tif len(s) == 0:\n\t\t\tans.append(q + 1 - lst)\n\t\t\tused = set()\n\t\t\tlst = q + 1\n\telse:\n\t\tif i in s or i in used:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\telse:\n\t\t\tused.add(i)\n\t\t\ts.add(i)\nif len(s) != 0:\n\tprint(-1)\n\treturn\nprint(len(ans))\nprint(*ans)\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\nNOW=set()\nUSED=set()\nANS=[0]\nfor i in range(n):\n    if A[i]>0:\n        if A[i] in NOW or A[i] in USED:\n            print(-1)\n            return\n        else:\n            NOW.add(A[i])\n            USED.add(A[i])\n\n    else:\n        if -A[i] in NOW:\n            NOW.remove(-A[i])\n        else:\n            print(-1)\n            return\n    if NOW==set():\n        ANS.append(i+1)\n        USED=set()\n\nif len(NOW)>0:\n    print(-1)\n    return\n\nprint(len(ANS)-1)\nANS2=[ANS[i]-ANS[i-1] for i in range(1,len(ANS))]\nprint(\" \".join(map(str,ANS2)))\n", "import sys\ninput = sys.stdin.readline\n\n\nn = int(input())\na = list(map(int, input().split()))\nset_ = set([]) \nset_2 = set([])\nans = []\n\n\nfor i in range(n):\n    if a[i] > 0:\n        if a[i] not in set_2:\n            set_.add(a[i])\n        else:\n            print(-1)\n            return\n        set_2.add(a[i])\n    else:\n        if abs(a[i]) in set_:\n            set_.remove(-a[i])\n        else:\n            print(-1)\n            return\n\n    if not set_:\n        set_2 = set([])\n        ans.append(i+1)\n\nif set_:\n    print(-1)\n    return\n    \nres = [0]*len(ans)\nfor i in range(len(ans)):\n    if i == 0:\n        res[i] = ans[i]\n    else:\n        res[i] = ans[i] - ans[i-1]\nprint(len(res))\nprint(*res)", "N = int(input())\nA = list(map(int, input().split()))\nQ = []\nL = [0] * (10**6+1)\nAns = []\ncnt = 0\ncnt_emp = 0\nfor a in A:\n    cnt += 1\n    if a>0:\n        Q.append(a)\n        l = L[a]\n        if l==0:\n            L[a] = 1\n            cnt_emp += 1\n        elif l==1:\n            print(-1)\n            return\n        else:\n            print(-1)\n            return\n    else:\n        a = -a\n        l = L[a]\n        if l==0:\n            print(-1)\n            return\n        elif l==1:\n            L[a] = 2\n            cnt_emp -= 1\n            if cnt_emp==0:\n                Ans.append(cnt)\n                cnt = 0\n                for q in Q:\n                    L[q] = 0\n                Q = []\n        else:\n            print(-1)\n            return\nif cnt_emp!=0:\n    print(-1)\n    return\nprint(len(Ans))\nprint(\" \".join(map(str, Ans)))\n", "#600_B\n\nn = int(input())\n\nln = [int(i) for i in input().split(\" \")]\n\nseen = {}\nsm = 0\n\nf = True\n\ntk = 0\n\npts = []\n\nfor i in range(0, len(ln)):\n    sm += ln[i]\n    if ln[i] < 0 and -ln[i] not in seen:\n        f = False\n    if ln[i] in seen:\n        seen[ln[i]] += 1\n        f = False\n        break\n    else:\n        seen[ln[i]] = 1\n    tk += 1\n    if sm == 0:\n        seen = {}\n        pts.append(tk)\n        tk = 0\nif sm != 0:\n    f = False\n\nif not f:\n    print(-1)\nelse:\n    print(len(pts))\n    print(\" \".join([str(i) for i in pts]))\n", "from sys import stdin\nn=int(stdin.readline().strip())\ns=list(map(int,stdin.readline().strip().split()))\nen=[0 for i in range(10**6+7)]\nvis=[0 for i in range(10**6+7)]\nans=[0]\nflag=True\ncnt=0\nv=[]\nfor i in range(n):\n    ans[-1]+=1\n    vis\n    if s[i]>0:\n        en[s[i]]+=1\n        vis[s[i]]+=1\n        v.append(s[i])\n        cnt+=1\n    else:\n        en[-s[i]]-=1\n        cnt-=1\n    s[i]=abs(s[i])\n    if en[s[i]]<0 or en[s[i]]>1 or vis[s[i]]>1:\n        flag=False\n        break\n    \n    if i>0 and cnt==0:\n        ans.append(0)\n        for j in v:\n            vis[j]=0\n        v=[]\n    \nif flag==False or ans[-1]!=0:\n    print(-1)\nelse:\n    if ans[-1]==0:\n        ans.pop()\n    print(len(ans))\n    print(*ans)\n", "n = int(input())\n\na = list(map(int, input().split()))\n\ndays = [] #when days end\nok = True\n\ntod = set()\nnow = set()\n\n\n\nfor i in range(n):\n    #print(i, tod, now)\n    if (a[i]>0):\n        if (a[i] in tod):\n            ok = False\n            break\n        else:\n            tod.add(a[i])\n            now.add(a[i])\n    else:\n        if not (-a[i] in now):\n            ok = False\n            break\n        else:\n            now.discard(-a[i])\n    if (len(now)==0):\n        days.append(i+1)\n        tod = set()\n        now = set()\n\nif (len(now)!=0):\n    ok = False\n\nif (ok):\n    print(len(days))\n    days = [0]+days\n    for i in range(1, len(days)):\n        print(days[i]-days[i-1], end=' ')\nelse:\n    print(-1)", "n = int(input())\nA = input().split()\nA = [int(k) for k in A]\n\nimposs = False\ndays = []\ncurr_empl = set()\nday_empl = set()\nd_s = 0\nfor i in range(n):\n    #print(curr_empl)\n    #print(day_empl)\n    e = A[i]\n    if e < 0:\n        if -e not in curr_empl:\n            imposs = True\n            break\n        curr_empl.remove(-e)\n    else:\n        if e in day_empl:\n            imposs = True\n            break\n        day_empl.add(e)\n        curr_empl.add(e)\n    if len(curr_empl) == 0:\n        curr_empl = set()\n        day_empl = set()\n        days.append(i - d_s + 1)\n        d_s = i + 1\n\nif imposs or len(curr_empl) > 0:\n    print(-1)\nelse:\n    print(len(days))\n    print(' '.join([str(di) for di in days]))\n\n", "import sys\nimport collections\nfrom collections import Counter\nimport itertools\nimport math\nimport timeit\n\n#input = sys.stdin.readline\n\n#########################\n# imgur.com/Pkt7iIf.png #\n#########################\n\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\n\ndef divs(n, start=1):\n    divisors = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                divisors.append(i)\n            else:\n                divisors.extend([i, n // i])\n    return divisors\n\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\n\ndef flin(d, x, default = -1):\n    left = right = -1\n    for i in range(len(d)):\n        if d[i] == x:\n            if left == -1: left = i\n            right = i\n    if left == -1:\n        return (default, default)\n    else:\n        return (left, right)\n\ndef ceil(n, k): return n // k + (n % k != 0)\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef prr(a, sep=' '): print(sep.join(map(str, a)))\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\n\nn = ii()\nd = li()\n\nsin = set()\nres = []\nprev = -1\nflag = dd()\nfor i in range(n):\n    if d[i] > 0 and d[i] not in sin and flag[d[i]] == 0:\n        sin.add(d[i])\n        flag[d[i]] = 1\n    elif d[i] < 0 and -d[i] in sin:\n        sin.remove(-d[i])\n    else:\n        print(-1);return()\n\n    if len(sin) == 0:\n        res.append(i - prev)\n        prev = i\n        flag = dd()\n\nif len(sin) != 0:\n    print(-1);return()\nprint(len(res))\nprr(res, sep = ' ')\n\n\n\n", "import sys\nn = int(sys.stdin.readline())\nemployees = list(map(int, sys.stdin.readline().split(\" \")))\ndays = []\ncurr = 0\ncount = 0\ninside = set()\nseenToday = set()\nwhile curr < n:\n    count += 1\n    employee = employees[curr]\n    if employee > 0:\n        if employee in seenToday:\n            days = []\n            break\n        inside.add(employee)\n        seenToday.add(employee)\n    else:\n        if abs(employee) not in inside:\n            days = []\n            break\n        inside.remove(abs(employee))\n        if len(inside) == 0:\n            days.append(count)\n            count = 0\n            seenToday = set()\n    curr += 1\n\nif len(days) == 0 or len(inside) > 0:\n    print(-1)\nelse:\n    print(len(days))\n    for n in days:\n        print(n, end = \" \")", "import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : map(int, input().split())\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}{}\".format(i, sep))\nINF = float('inf')\nMOD = int(1e9 + 7)\n\nn = int(input())\narr = list(read())\ndp = [arr[0]]\nflag = True \n\nfor i in range(1, n):\n  dp.append(dp[-1] + arr[i])\n\nif len(list(filter(lambda x : x < 0, dp))) >= 1 or dp[-1] != 0:\n  print(\"-1\")\n  return\n\nprev = -1 \ncan = []\nfor i in range(n):\n  if dp[i] == 0:\n    can.append((prev + 1, i))\n    prev = i \n\nfor l, r in can:\n  d = defaultdict(bool)\n  for i in range(l, r+1):\n    if arr[i] in d:\n      print(\"-1\")\n      return\n    if arr[i] < 0 and not -arr[i] in d:\n      print(\"-1\")\n      return\n    d[arr[i]] = True \n\nprint(len(can))\nfor i, j in can:\n  print(j - i + 1, end = \" \")\n    ", "\nints = lambda: [int(x) for x in input().split()]\n\ndef solve(arr):\n    p, inside, entered = [], set(), set()\n    for x in arr:\n        if (x<0 and -x not in inside) or (x>0 and x in entered):\n            return []\n        elif x<0:\n            inside.remove(-x)\n            if len(inside)==0:\n                p.append(2*len(entered))\n                entered = set()\n        else:\n            inside.add(x)\n            entered.add(x)\n    if inside: return []\n    return p\n\ndef main():\n    while 1:\n        try: n, = ints()\n        except EOFError: break\n        ans = solve(ints())\n        if not ans: print('-1')\n        else: print(len(ans)) ; print(*ans)\n    return\n\nmain()", "\nn=int(input())\na=list(map(int,input().split()))\ns=set()\nd=0\nans=[]\nc=0\no=set()\nfor i in range(n):\n\tx=a[i]\n\tif x>0:\n\t\tif i==0:\n\t\t\tc+=1\n\t\t\ts.add(x)\n\t\t\to.add(x)\n\t\telse:\n\t\t\tif len(s):\n\t\t\t\tif x in s or x in o:\n\t\t\t\t\td=-1\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tc+=1\n\t\t\t\t\ts.add(x)\n\t\t\t\t\to.add(x)\n\t\t\telse:\n\t\t\t\td+=1\n\t\t\t\tans.append(c)\n\t\t\t\ts.add(x)\n\t\t\t\to={x}\n\t\t\t\tc=1\n\telif x<0:\n\t\tif i==0:\n\t\t\td=-1\n\t\t\tbreak\n\t\telse:\n\t\t\tif len(s):\n\t\t\t\tif -1*x in s:\n\t\t\t\t\ts.remove(-1*x)\n\t\t\t\t\tc+=1\n\t\t\t\telse:\n\t\t\t\t\td=-1\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\td=-1\n\t\t\t\tbreak\nif d!=-1:\n\tif len(s):\n\t\tprint(\"-1\")\n\telse:\n\t\td+=1\n\t\tans.append(c)\n\t\tprint(d)\n\t\tprint(*ans)\nelse:\n\tprint(\"-1\")", "n = int(input())\na = list([int(x) for x in input().split()])\nc = []\ns = 0\nenter = [False] * 1000001\nleft = [False] * 1000001\ntoday = []\n\nfor ai in a:\n    if ai > 0 and (enter[ai] or left[ai]):\n        c = []\n        break\n\n    if ai < 0 and (not enter[-ai] or left[-ai]):\n        c = []\n        break\n    \n    s += ai\n    if ai > 0:\n        enter[ai] = True\n        today.append(ai)\n    else:\n        left[-ai] = True\n        enter[-ai] = False\n        if s == 0:\n            c.append((len(today)))\n            for x in today:\n                enter[x] = False\n                left[x] = False\n            today = []\n    \n    # print(s)\n\nif len(c) > 0 and s == 0:\n    print(str(len(c)))\n    print(' '.join(str(x*2) for x in c))\nelse:\n    print(-1)\n\n\n\n"]