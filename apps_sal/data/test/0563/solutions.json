["from sys import stdin\nfrom fractions import gcd\nlines = list([_f for _f in stdin.read().split('\\n') if _f])\n\ndef parseline(line):\n\treturn list(map(int, line.split()))\n\nlines = list(map(parseline, lines))\n\nl, r = lines[0]\n\nfor a in range(l, r+1):\n\tfor b in range(a, r+1):\n\t\tfor c in range(b, r + 1):\n\t\t\tif gcd(a, b) == gcd(b, c) == 1 != gcd(a, c):\n\t\t\t\tprint(a, b, c)\n\t\t\t\treturn\nprint(-1)\n", "def NOD(x, y):\n    while (y != 0):\n        x = x % y\n        x, y = y, x\n    return x\ndef main():\n    l, r = map(int, input().split())\n    for a in range(l, r - 1):\n        for b in range(a, r):\n            for c in range(b, r + 1):\n                if NOD(a, b) == 1 and NOD(b, c) == 1 and NOD(a, c) != 1:\n                    print(a, b, c)\n                    return\n    print(-1)\nmain()", "__author__ = \"zabidon\"\n\nl, r = map(int, input().split())\n\ndef alg_evk(a,b):\n    while(a%b):\n        b, a = a % b, b\n\n    return b\n\nfound = False\nfor a in range(r+1)[l:]:\n    if found:\n        break\n    for b in range(r+1)[l:]:\n        if found:\n            break\n        if alg_evk(a,b) != 1:\n            continue\n        for c in range(r+1)[l:]:\n            if a<b<c:\n                if alg_evk(b,c) == 1 and alg_evk(a,c) != 1:\n                    found = True\n                    result = (a, b, c)\n                    break\n\nif(found):\n    print(\"{} {} {}\".format(result[0], result[1], result[2]))\nelse:\n    print(-1)", "import sys\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\nl, r = list(map(int, input().split()))\nfor a in range(l, r-1):\n    for b in range(a+1, r):\n        for c in range(b+1, r+1):\n            if gcd(a, b) == gcd(b, c) == 1 and gcd(a, c) != 1:\n                print(a, b, c)\n                return\nprint(-1)\n", "def nod(x, y):\n    while min(x, y) > 0 and x != y:\n        if x > y:\n            x = x % y\n        else:\n            y = y % x\n    return max(x, y)\ndef is_me_right(left, right):\n    for a in range(l, r - 1):\n        for b in range(a + 1, r):\n            for c in range(b + 1, r + 1):\n                if (nod(a, b) == 1) and (nod(b, c) == 1) and (nod(a, c) != 1):\n                    return True, a, b, c\n    return False, 1, 1, 1\nl, r = list(map(int, input().split()))\nimr, a, b, c = is_me_right(l, r)\nif imr:\n    print(a, b, c)\nelse:\n    print(-1)", "import math\n\nl, r = [int(x)for x in input().split(' ')]\n\nif r - l < 2:\n    print(-1)\n    quit()\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\nfor a in range(l, r + 1):\n    for b in range(a + 1, r + 1):\n        for c in range(b + 1, r + 1):\n            if gcd(a, c) != 1 and gcd(b, c) == 1:\n                print(a, b, c)\n                quit()\n\nprint(-1)\n", "def gcd(a, b):\n    rem = 0\n    while b != 0:\n        rem = a%b\n        a = b\n        b = rem\n    return a\n\n\na, b = map(int, input().split())\nif b-a == 1:\n    print (-1)\nelse:   \n    found = False\n    for i in range(a, b+1):\n        for j in range(i+1, b+1):\n            for k in range(j+1, b+1):\n                if gcd(i, j) == 1 and gcd(j, k) == 1 and gcd(i, k) != 1:\n                    found = True\n                    print (i, j, k)\n                    break\n            if found:\n                break\n        if found:\n            break\n    if not found:\n        print (-1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\ndef isCoprime(a,b):\n\tif gcd(a,b) == 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\ndef main():\n\t(l,r) = map(int, input().split())\n\tfor a in range(l,r-1):\n\t\tfor b in range(a+1,r):\n\t\t\tif isCoprime(a,b)==True:\n\t\t\t\tfor c in range(b+1,r+1):\n\t\t\t\t\tif isCoprime(b,c)==True:\n\t\t\t\t\t\tif isCoprime(a,c) == False:\n\t\t\t\t\t\t\tprint(a,b,c)\n\t\t\t\t\t\t\treturn\n\tprint(-1)\n\treturn\n\ndef __starting_point():\n\tmain()\n__starting_point()", "def gcd(a, b):\n    if(a == 0 or b == 0): return a + b\n    else: return gcd(b, a % b);\nl, r = list(map(int, input().split()))\n\nr = r + 1\nfor a in range(l, r):\n    for b in range(a + 1, r):\n        for c in range(b + 1, r):\n            if(gcd(a, b) == 1 and gcd(b, c) == 1 and gcd(a, c) != 1):\n                print(str(a) + \" \" + str(b) + \" \" + str(c))\n                return\n\nprint(-1)\n", "from fractions import gcd\ndef checkok(a, b, c):\n    if gcd(a, b) == 1 and gcd(b, c) == 1 and gcd(a, c)!= 1:\n        return True\n    return False\n\nmark = False\nl, r = list(map(int, input().split(' ')))\nfor i in range(l, r+1):\n    for j in range(i+1, r+1):\n        for k in range(j+1, r+1):\n            if checkok(i, j, k) and not mark:\n                print(i, j, k)\n                mark = True\n\nif not mark:\n    print(-1)\n\n"]