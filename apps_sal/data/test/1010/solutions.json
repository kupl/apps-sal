["x = int(input())\ny = list(map(int, input().split(' ')))\nif y == [0] * x:\n    print(0)\n    quit()\nfor i in range(x):\n    if y[i] == 1:\n        y = y[i:]\n        break\n\ny.reverse()\nfor i in range(len(y)):\n    if y[i] == 1:\n        y = y[i:]\n        break\n\ny.reverse()\n\nl = []\nct = 0\nfor i in y:\n    if i == 0:\n        ct+=1\n    if i == 1 and ct != 0:\n        l.append(ct)\n        ct = 0\n\nk = 1\nfor i in l:\n    k *= (i+1)\n\nprint(k)\n", "N = int(input())\nA = ''.join(input().split())\n\nA = A.split('1')\nif len(A) == 1:\n    print(0)\n    return\nA = A[1:-1]\nanswer = 1\nfor x in A:\n    answer *= len(x) + 1\n\nprint(answer)\n", "n = int(input())\nl = list(map(int, input().split()))\nans = 1\ncnt = 1\nstart = False\nfor i in l:\n    if i == 1:\n        start = True\n        ans *= cnt\n        cnt = 1\n    if i == 0 and start:\n        cnt += 1\nif l.count(1) == 0:\n    print(0)\nelse:\n    print(ans)\n", "n = int(input())\na = list(map(int, input().split()))\nans = 1\ni = 0\nwhile i < n and a[i] != 1:\n    i += 1\nif i == n:\n    ans = 0\ncur = 1\nfor j in range(i + 1, n):\n    if a[j] == 1:\n        ans *= cur\n        cur = 1\n    else:\n        cur += 1\nprint(ans)", "N = int(input())\nchoco = [int(x) for x in input().split()]\nif all(c == 0 for c in choco):\n    print(0)\n    return\nans = 1\ni = 0\nwhile choco[i] == 0:\n    i += 1\n\nwhile True:\n    assert(choco[i] == 1)\n    j = i+1\n    while j < N and choco[j] == 0:\n        j += 1\n    if j == N:\n        break\n    else:\n        ans *= j - i\n    i = j\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split()))\nb = []\ncur = -1\nfor i in a:\n    if i == 1:\n        if cur != -1: b.append(cur)\n        cur = 0\n    elif cur != -1:\n        cur += 1\nans = 1\nfor i in b:\n    ans *= (i + 1)\nif cur == -1: ans = 0\nprint(ans)\n", "n = int(input())\nisnut = [(int(x) == 1) for x in input().split()]\nans = 1\nstack = 1\nhasnut = False\nfor nut in isnut:\n    if nut:\n        if hasnut:\n            ans *= stack\n            stack = 1\n        else:\n            hasnut = True\n            stack = 1\n    else:\n        stack += 1\nprint(ans if hasnut else 0)\n", "n = int(input())\na = list(map(int, input().split()))\nl = list([0 for i in range(n)])\nj = 0\nfor i in range(n):\n\tif a[i] == 1:\n\t\tl[j] = i\n\t\tj += 1\nans = 1\nif j == 0:\n\tprint(0)\n\treturn\nfor i in range(j):\n\tif i == 0:    \n\t\tcontinue\n\tans *= l[i] - l[i - 1]\n\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nlast = -1\nans = 1\nfor i in range(n):\n    if a[i] == 1:\n        if last != -1:\n            ans *= i - last\n        last = i\n\nprint(ans if last != -1 else 0)\n", "n = int(input())\nl = list(map(int,input().split()))\nans = 1\np = -1\nfor i in range(len(l)):\n\tif l[i] == 1:\n\t\tif p == -1:\n\t\t\tp = i\n\t\t\tcontinue\n\t\tif i-p:\n\t\t\tans *= i-p\n\t\tp = i\nif p != -1:\n\tprint(ans)\nelse:\n\tprint(0)\n", "n = int(input())\nnuts = list(map(int, input().split()))\nlabel = 0\nif nuts.count(1):\n    ans = 1\nelse:\n    ans = 0\n    \nfor i in nuts:\n    if i == 1:\n        if label:\n            ans *= cnt\n        label = 1\n        cnt = 0\n    if label:\n        cnt += 1\nprint(ans)", "#!/usr/bin/env python3\nfrom itertools import dropwhile\n\ndef main():\n    n = int(input())\n    lst = [bool(int(x)) for x in input().split()]\n    lst = list(dropwhile(lambda x: not x, lst))\n\n    if not lst:\n        print(0)\n        return\n\n    ans = 1\n    cnt = 1\n\n    for x in lst:\n        if x:\n            if cnt > 1:\n                ans *= cnt\n                cnt = 1\n        else:\n            cnt += 1\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\ndata = [int(i) for i in input().split()]\nbox = []\nl = 0\nfor i in range(n):\n    if data[i] == 1:\n        box.append(i)\n        l += 1\nif l:\n    ret = 1\n    for i in range(l - 1, 0, -1):\n        ret *= box[i] - box[i - 1]\n    print(ret)\nelse:\n    print(0)", "n, a, v = int(input()), list(map(int, input().split())), 1\np = [i for i, ai in enumerate(a) if ai]\nfor i in range(1, len(p)):\n    v *= p[i] - p[i - 1]\nprint(v if p else 0)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n#   = input()\nn   = int(input())\na   = [int(i) for i in input().split()]\n\nstart = time.time()\n\ns = sum(a)\nif s == 0:\n    ans = 0\nelif s == 1:\n    ans = 1\nelse:\n    ans = 1\n\n    l = 0\n    while( a[l] != 1):\n        l += 1\n\n    r = l\n\n    while(r < n-1):\n        r += 1\n        if a[r] == 1:\n            ans *= (r-l)\n            l = r\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "#!/usr/bin/env python3\n\ninput()\npieces = list(map(int, input().split()))\nN = len(pieces)\n\noneIndexes = [i for i, e in enumerate(pieces) if e == 1]\n\nif len(oneIndexes) == 0:\n\tprint(0)\nelse:\n\n\tans = 1\n\tfor i in range(len(oneIndexes) - 1):\n\t\tans *= (oneIndexes[i+1] - oneIndexes[i])\n\n\tprint(ans)", "n = int(input())\nm = 0\na = 1\np = 0\nl = list(map(int,input().split()))\nfor i in range(n):\n    if l[i] == 1:\n        m += 1    \n        if m > 0:\n            if m > 1:\n                a *= i - p\n            p = i\nprint(a if m > 0 else 0)\n", "n = int(input())\nl = input().split(\" \")\nfirst = 0\nwhile first <= n-1 and l[first] == \"0\":\n    first += 1\nif first == n:\n    print(0)\nelse:\n    last = n-1\n    while last >= 0 and l[last] == \"0\":\n        last -= 1\n    count = 0\n    divide = []\n    for i in range(first, last+1):\n        if(l[i] == \"0\"):\n            count += 1\n        else:\n            divide.append(count+1)\n            count = 0\n    ans = 1\n    for i in range(len(divide)):\n        ans *= divide[i]\n    print(ans)\n", "n = int(input())\nlst = list(map(int, input().split()))\nans = 1\ncnt = 0\nif 1 in lst:\n    p = lst.index(1)\n    for i in range(p, n):\n        if lst[i] == 1:\n            if cnt != 0:\n                ans *= cnt\n                cnt = 0\n        cnt += 1\n    print(ans)\nelse:\n    print(0)\n", "def solve( n , nuts ):\n\n    try:\n        i = nuts.index(\"1\")\n    except:\n        return 0\n\n    ri = nuts.rindex(\"1\")\n\n    if i == ri:\n        return 1\n\n    res = 1\n    start = i\n    cur = start + 1\n    while cur <= ri:\n        if nuts[cur] == \"1\":\n            res *= (cur-start)\n            start = cur\n            cur = start + 1\n        else:\n            cur += 1\n    return res\n\n\ndef __starting_point():\n\n    n = int(input())\n    nuts = \"\".join(input().split())\n    print( solve( n , nuts ) )\n\n__starting_point()", "3\n\nn = int(input())\na = list(tuple(map(int, input().split())))\n\nwhile len(a) > 0 and a[0] == 0:\n\ta.pop(0)\nwhile len(a) > 0 and a[-1] == 0:\n\ta.pop()\n\nif len(a) == 0:\n\tprint(\"0\")\nelse:\n\tres = 1\n\tnum = 1\n\n\tfor i in a:\n\t\tif i == 0:\n\t\t\tnum += 1\n\t\tif i == 1:\n\t\t\tres *= num\n\t\t\tnum = 1\n\n\tprint(str(res))\n", "#author=\"_rabbit\"\nn=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n    if a[i]==1:\n        b.append(i)\n#print(b)\nif(len(b)==0):\n    print(\"0\")\nelse:\n    ans=int(1)\n    for i in range(len(b)-1):\n        ans=ans*(b[i+1]-b[i])\n    print(ans)\n", "n = int(input())\nnuts = list(map(str, input().split()))\nans = 1\ncur = 1\nisone = False\nfor i in range(n):\n    if nuts[i] == '1':\n        isone = True\n        ans *= cur\n        cur = 1\n    else:\n        if isone:\n            cur += 1\nif isone:\n    print(ans)\nelse:\n    print(0)\n    \n    \n", "n = int(input())\na = [int(s) for s in input().split()]\n\nb = [0]*n\nnb = 0\n\nk = 0\nwhile k < n and a[k] < 1:\n    k += 1\n    \nif k > n - 1:\n    print(0)\nelse:\n    q = 1\n    for i in range (k + 1, n):\n        if a[i] == 1:\n            nb += 1\n            q += 1\n        else:\n            b[nb] += 1\n    sum = 1\n    for i in range (q - 1):\n        sum *= (b[i] +1)\n\n    print(sum)\n", "n = int(input())\na = list(map(int, input().split()))\nif max(a) == 0:\n\tprint(0)\n\treturn\nans = 1\nstarted = False\ncount = 1\nfor i in range(n):\n\tif a[i] == 1 and not started:\n\t\tstarted = True\n\t\tcontinue\n\tif started and a[i] == 0:\n\t\tcount +=1\n\tif started and a[i] == 1:\n\t\tans *= count\n\t\tcount = 1\nprint(ans)\n"]