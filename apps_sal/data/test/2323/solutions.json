["import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return tuple(map(int, sys.stdin.readline().split()))\ndef LLI(): return [tuple(map(int, l.split())) for l in sys.stdin]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\ndef main():\n    n = I()\n    a = sorted(LI())\n    q = I()\n    b = []\n    for _ in range(q):\n        l,r = LI()\n        b.append(r-l+1)\n    c = []\n    for i in range(n-1):\n        c.append(a[i+1]-a[i])\n    c.sort()\n    c.append(inf)\n\n    d = sorted(b)\n    e = {}\n    s = 0\n    t = n\n    ci = 0\n    for k in d:\n        while c[ci] <= k:\n            t -= 1\n            s += c[ci]\n            ci += 1\n        e[k] = s + k * t\n\n    rr = [e[k] for k in b]\n\n    return ' '.join(map(str, rr))\n\nprint(main())\n\n\n", "from bisect import bisect_left as bl\nimport sys\ninput = sys.stdin.readline\nN = int(input())\nA = sorted([int(a) for a in input().split()])\nQ = int(input())\n\nB = sorted([A[i+1] - A[i] for i in range(N-1)])\nC = [0] * N\nfor i in range(1, N):\n    C[i] = C[i-1] + B[i-1]\nANS = []\nfor q in range(Q):\n    l, r = list(map(int, input().split()))\n    k = r - l + 1\n    i = bl(B, k)\n    ANS.append(k * (N - i) + C[i])\n\nprint(*ANS)\n", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\nn=nn()\n\nstrings=lm()\n\nq=nn()\n\n\nstrings.sort()\n\ndiffs=[]\n\nfor i in range(1,n):\n\tdiffs.append(strings[i]-strings[i-1])\n\ndiffs.sort(reverse=True)\n\nif not n==1:\n\n\trunninggaps=[diffs[0]]\n\n\nfor i in range(1,n-1):\n\trunninggaps.append(runninggaps[-1]+diffs[i])\n\n\n\nanswers=[]\n\n\nfor i in range(q):\n\t\n\t\n\n\tl,r=mi()\n\n\tif n==1:\n\t\tanswers.append(r-l+1)\t\t\n\t\tcontinue\n\n\tgap=r-l+1\n\n\tmaxrange=strings[-1]-strings[0]+gap\t\n\tstart=0\n\n\tend=n-2\n\t#print(maxrange,diffs)\n\twhile start<=end:\n\n\t\tmid=(start+end)//2\n\n\t\tif diffs[mid]>gap:\n\t\t\tstart=mid+1\n\n\t\telse:\n\t\t\tend=mid-1\n\n\t#print(end)\n\n\tif end==-1:\n\t\tpass\n\telse:\n\t\tmaxrange+= gap*(end+1)-runninggaps[end]\n\t\n\tanswers.append(maxrange)\n\nprint(*answers)\n\n\n\n\n\n\n\n\n\n", "import sys\nimport bisect\n\nn = int(input())\n\ns = sorted([int(x) for x in input().split(' ')])\ndif = sorted([(s[i + 1] - s[i]) for i in range(0, n - 1)])\nadif = []\nif n > 1:\n    adif.append(dif[0])\n    for i in range(1, len(dif)):\n        adif.append(adif[-1] + dif[i])\n\nq = int(input())\nres = []\nfor i in range(q):\n    line = input().split(' ')\n    l = int(line[0])\n    r = int(line[1])\n    span = r - l + 1\n    idx = bisect.bisect_right(dif, span) - 1\n    if idx >= 0:\n        acc_diff = adif[idx]\n        ans = n * span - ((idx + 1) * span - acc_diff)\n    else:\n        ans = n * span\n\n    res.append(ans)\n\nprint(str(\" \".join(str(x) for x in res)))", "n=int(input())\nanswer=[]\nsumma={}\nsumma[0]=0\ndef bin(p):\n    left=0\n    right=lena\n    while right-left>1:\n        mid=(left+right)//2\n        if res[mid]<=p:\n            left=mid\n        else:\n            right=mid\n    return left+1\nuku=list(set([int(x) for x in input().split()]))\nuku.sort()\nres=[]\nfor i in range(1,len(uku)):\n    res.append(uku[i]-uku[i-1])\nq=int(input())\nres.append(10**100)\nres.sort()\ncounter=0\ni=1\nfor item in res:\n    counter+=item\n    summa[i]=counter\n    i+=1\nlena=len(res)\nfor i in range(q):\n    l,r=[int(x) for x in input().split()]\n    s=r-l+1\n    counter=0\n    if s<res[0]:\n        bina=0\n    else:\n        bina=bin(s)\n    counter=summa[bina]+s*(lena-bina)\n    \n    answer.append(counter)\nprint(*answer)\n", "import sys\n\nn = int(sys.stdin.readline().strip())\nans = []\ns = list(map(int, sys.stdin.readline().strip().split()))\ns.sort()\nt = [0] * n\nc = [0] * (n + 1)\nfor i in range (0, n - 1):\n    t[i] = s[i + 1] - s[i]\nt[n - 1] = 10 ** 18 + 1\nt.sort()\nfor i in range (0, n):\n    c[i + 1] = c[i] + t[i]\nq = int(sys.stdin.readline().strip())\nfor i in range (0, q):\n    line = sys.stdin.readline().strip().split()\n    l = int(line[1]) - int(line[0]) + 1\n    j1 = 0\n    j2 = n\n    j = (j1 + j2) // 2\n    if t[0] > l:\n        j1 = -1\n    else:\n        while j2 - j1 > 1:\n            if t[j] <= l:\n                j1 = j\n            else:\n                j2 = j\n            j = (j1 + j2) // 2\n    ans.append(str((c[j1 + 1] + (n - j1 - 1) * l)))\nprint(\" \".join(ans))", "def main():\n    from bisect import bisect\n    from itertools import accumulate, chain\n    from sys import stdin, stdout\n\n    input = stdin.readline\n    input()\n    s = sorted(set(map(int, input().split())))\n    n = len(s)\n    inp = sorted((a - b for (a, b) in zip(s[1:], s)))\n    acc = tuple(chain(accumulate(inp), (0,)))\n    for _ in range(int(input())):\n        l_, r = list(map(int, input().split()))\n        d = r + 1 - l_\n        i = bisect(inp, d)\n        stdout.write(f'{acc[i - 1] + (n - i) * d} ')\n\n\nmain()\n", "import bisect\nn=int(input())\ns=[*map(int, input().split())]\ns.sort()\nt=[a-b for a,b in zip(s[1:],s)]+[100000000000000000000]\nt.sort()\nS=[0]\nfor i in range(n):S+=[S[-1]+t[i]]\nR=[]\nq=int(input())\nfor i in range(q):\n    l,r=map(int,input().split())\n    L=r-l+1\n    j=bisect.bisect_left(t,L)\n    R+=[S[j]+(n-j)*L]\nprint(' '.join(map(str,R)))", "from bisect import bisect\nfrom collections import Counter\n\nn = int(input())\nns_ = sorted(map(int, input().split()))\ndiffs = [(b - a) for a, b in zip(ns_, ns_[1:])]\nns = set(ns_)\n\ncnt = Counter(diffs)\ncnt.pop(0, None)\nsck = sorted(cnt.keys())\nremain = [len(ns)]\nfor k in sck:\n    remain.append(remain[-1] - cnt[k])\n\nlastat = [0, *sck]\n\nans = [remain[0]]\nfor i in range(len(cnt)):\n    ans.append(ans[-1] + remain[i + 1] + remain[i] * (lastat[i + 1] - lastat[i] - 1))\n\nq = int(input())\nout = []\nfor _ in range(q):\n    ll, r = list(map(int, input().split()))\n    x = r - ll\n    at = bisect(lastat, x) - 1\n    out.append(ans[at] + remain[at] * (x - lastat[at]))\n\nprint(' '.join(map(str, out)))\n", "#!/usr/bin/env python\n\n\nfrom bisect import bisect_left\n\n\ndef main():\n    n = int(input())\n    s = sorted(int(si) for si in input().split())\n\n    ediff = sorted(x - s[i - 1] for i, x in enumerate(s) if i > 0)\n\n    cumsum = [0] * n\n    for i in range(n - 1):\n        cumsum[i + 1] = cumsum[i] + ediff[i]\n\n    q = int(input())\n    for _ in range(q):\n        l, r = list(map(int, input().split()))\n        ind = bisect_left(ediff, r - l + 1)\n        print((r - l + 1) * (n - ind) + cumsum[ind], end=' ')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from bisect import bisect_left\n\nn = int(input())\ns = sorted(int(si) for si in input().split())\nediff = sorted(x - s[i - 1] for i, x in enumerate(s) if i > 0)\n\ncumsum = [0] * n\nfor i in range(n - 1):\n    cumsum[i + 1] = cumsum[i] + ediff[i]\n\nfor _ in range(int(input())):\n    l, r = map(int, input().split())\n    ind = bisect_left(ediff, r - l + 1)\n    print((r - l + 1) * (n - ind) + cumsum[ind], end=' ')\n", "import math\ndef f5(seq, idfun=None):\n   # order preserving\n   if idfun is None:\n       def idfun(x): return x\n   seen = {}\n   result = []\n   for item in seq:\n       marker = idfun(item)\n       if marker in seen: continue\n       seen[marker] = 1\n       result.append(item)\n   return result\n\ndef upper_bound(v, val):\n    l = 0\n    r = len(v)\n    while l+1<r :\n        mid = (l+r)//2\n        if v[mid] <= val:\n            l=mid\n        else:\n            r=mid\n    return r\n\nN = list(map(int,input().split()))\ninp = [*list(map(int, input().split()))]\ninp = sorted(f5(inp))\nN = len(inp)\nmp = {}\nv = []\ni = 0\nwhile i < N-1:\n    gap = inp[i+1]-inp[i]\n    v.append(gap)\n    mp[gap] = 0\n    i = i + 1\nfor gap in v:\n    mp[gap] = mp[gap] + 1\nv.append(0)\nv = sorted(f5(v))\npsum1 = [0] * (len(mp) + 1)\npsum0 = [0] * (len(mp) + 1)\n\ni = 1\nwhile i <= len(mp):\n    cur = v[i]\n    psum1[i] = psum1[i-1] + (psum0[i-1]*(cur-v[i-1])) + mp[cur]\n    psum0[i] = psum0[i-1] + mp[cur]\n    i = i+1\nQ = int(input())\nansstring = ''\nwhile Q>0:\n    l, r = list(map(int,input().split()))\n    siz = r-l\n    idx = upper_bound(v,siz)-1\n    ans = N * (siz + 1)\n    remain = siz-v[idx]\n    ans -= psum1[idx]\n    ans -= psum0[idx] * remain\n    ansstring += str(ans) + ' '\n    Q = Q-1\nprint(ansstring)\n", "import copy\nimport bisect\n\nn = int(input())\ns = list(map(int, input().split()))\nsCopy = copy.deepcopy(s)\n\nAP = []\nmx = -1\nsCopy.sort()\nmiss = []\nfor i in range(n-1):\n    mx = max(mx, sCopy[i+1]-sCopy[i]-1, 0)\n    miss.append(max(sCopy[i+1]-sCopy[i]-1, 0))\n\nmiss.sort()\nif miss!=[]:\n    pSOfMiss = [miss[0]]\n    for i in range(1, len(miss)):\n        pSOfMiss.append(pSOfMiss[-1]+miss[i])\n\nMAX = max(s)\nMIN = min(s)\nC = len(set(s))\nansList = []\n#print(miss, mx)\n#print(pSOfMiss)\nmL = len(miss)\nq = int(input())\nfor _ in range(q):\n    l, r = list(map(int, input().split()))\n    if l==r:\n        ansList.append(C)\n    elif n==1:\n        ans = r-l+1\n        ansList.append(ans)\n    elif r-l>=mx:\n        ans = (MAX+r)-(MIN+l)+1\n        ansList.append(ans)\n    else:\n        idx = bisect.bisect_right(miss, r-l)\n        if idx>0:\n            notThere = pSOfMiss[-1]-pSOfMiss[idx-1]-((r-l)*(mL-idx))\n        else:\n            notThere = pSOfMiss[-1] - ((r-l)*(mL-idx))\n        #print(l, r, notThere, idx)\n        ans = (MAX+r)-(MIN+l)+1-notThere\n        ansList.append(ans)\n\nprint(*ansList)\n", "from bisect import bisect_left as j\nk,w,b=input,int,sorted;f=lambda:map(w,k().split());n=w(k());s=b([*f()]);e,c = b(x-s[i-1]for i,x in enumerate(s)if i>0),[0]*n\nfor i in range(n-1):c[i+1]=c[i]+e[i]\nfor _ in range(w(k())):l,r=f();i=j(e,r-l+1);print((r-l+1)*(n-i)+c[i],end=' ')", "import sys\ninput = sys.stdin.readline\nstdout = sys.stdout\nrr = lambda: input().strip()\nrri = lambda: int(rr())\nrrm = lambda: list(map(int, rr().split()))\n\nfrom bisect import bisect\n\nN = rri()\nA = rrm()\nQ = rri()\nA.sort()\nD = sorted(A[i+1] - A[i] for i in range(N-1))\nP = [0]\nfor x in D:\n    P.append(P[-1] + x)\n\nqueries = []\nfor q in range(Q):\n    L, R = rrm()\n    queries.append((R-L+1, q))\nqueries.sort()\nans = [None] * len(queries)\n\ni = 0\nfor q, ix in queries:\n    bns = q\n    # bns += sum(min(d, w) for d in D)\n    i = bisect(D, q, i)\n    bns += P[i] + q * (len(D) - i)\n    ans[ix] = bns\n\nprint(*ans)\n", "import sys\ninput = sys.stdin.readline\nstdout = sys.stdout\nrr = lambda: input().strip()\nrri = lambda: int(input())\nrrm = lambda: list(map(int, input().strip().split()))\n\nfrom bisect import bisect\n\nN = rri()\nA = rrm()\nQ = rri()\nA.sort()\nD = sorted(A[i+1] - A[i] for i in range(N-1))\nP = [0]\nfor x in D:\n    P.append(P[-1] + x)\n\nqueries = []\nfor q in range(Q):\n    L, R = rrm()\n    queries.append((R-L+1, q))\nqueries.sort()\nans = [None] * len(queries)\n\ni = 0\nfor q, ix in queries:\n    bns = q\n    # bns += sum(min(d, w) for d in D)\n    i = bisect(D, q, i)\n    bns += P[i] + q * (len(D) - i)\n    ans[ix] = bns\n\nprint(*ans)\n"]