["n, k = map(int, input().split())\nl, a = list(map(int, input().split())), list(map(int, input().split()))\nv, t, s = 0, 0, sum(l)\nfor i in range(n):\n    l[i] -= a[i]\nL, A = [l[0]], [a[0]]\nfor i in range(1, n):\n    if a[i] <= A[-1]: L[-1] += l[i]\n    else:\n        A.append(a[i])\n        L.append(l[i])\nfor i in range(len(A)):\n    d = L[i] - v\n    if d > 0:\n        u = (d - 1) // A[i] + 1\n        v += u * A[i]\n        t += u * k\n    v -= L[i]\nprint(t + s)", "m,k=list(map(int,input().split()))\nD=list(map(int,input().split()))\nS=list(map(int,input().split()))\nans=0\nfuel=S[0]\nmaxx=S[0]\nfor i in range(m):\n    if(D[i]>fuel):\n        x=D[i]-fuel\n        y=x//maxx\n        if(x%maxx>0):\n            y+=1\n        ans+=y*k\n        fuel+=maxx*y\n        fuel-=D[i]\n        ans+=D[i]\n        if(i+1==m):\n            break\n        fuel+=S[i+1]\n        maxx=max(S[i+1],maxx)\n    else:\n        fuel-=D[i]\n        ans+=D[i]\n        if(i+1==m):\n            break\n        fuel+=S[i+1]\n        maxx=max(S[i+1],maxx)\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\ndef main():\n    m, k = [int(x) for x in input().split()]\n    d = [int(x) for x in input().split()]\n    s = [int(x) for x in input().split()]\n\n    ans = 0     # total time spent\n    fuel = 0    # amount of fuel in the tank\n    mx = 0      # largest depo seen so far\n    for i in range(m):\n        fuel += s[i]\n        mx = max(mx, s[i])\n\n        if d[i] > fuel:\n            diff = d[i] - fuel\n            refill = diff // mx\n            if refill*mx < diff: refill += 1\n            fuel += (refill * mx)\n            ans += (k * refill)\n\n        fuel -= d[i]\n        ans += d[i]\n        #print(ans)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "m,k=list(map(int,input().split()))\n\nD=list(map(int,input().split()))\n\nS=list(map(int,input().split()))\n\nans=0\n\nfuel=S[0]\n\nmaxx=S[0]\n\nfor i in range(m):\n\n    if(D[i]>fuel):\n\n        x=D[i]-fuel\n\n        y=x//maxx\n\n        if(x%maxx>0):\n\n            y+=1\n\n        ans+=y*k\n\n        fuel+=maxx*y\n\n        fuel-=D[i]\n\n        ans+=D[i]\n\n        if(i+1==m):\n\n            break\n\n        fuel+=S[i+1]\n\n        maxx=max(S[i+1],maxx)\n\n    else:\n\n        fuel-=D[i]\n\n        ans+=D[i]\n\n        if(i+1==m):\n\n            break\n\n        fuel+=S[i+1]\n\n        maxx=max(S[i+1],maxx)\n\nprint(ans)\n\n", "estradas,k = [int(i) for i in input().split()]\nd = [int(i) for i in input().split()]\ns = [int(i) for i in input().split()]\n\n\nfuel = 0\ntime = 0\n\ncurrMax = 0\n\nfor i in range(estradas):\n    fuel+=s[i]\n    currMax = max(currMax,s[i])\n    \n    while(fuel<d[i]):\n        time+=k\n        fuel+=currMax\n                \n        \n    fuel-=d[i]\n    time+=d[i]\nprint(time)\n", "import math\n\n\nclass CodeforcesTask241ASolution:\n    def __init__(self):\n        self.result = ''\n        self.m_k = []\n        self.distances = []\n        self.supplies = []\n\n    def read_input(self):\n        self.m_k = [int(x) for x in input().split(\" \")]\n        self.distances = [int(x) for x in input().split(\" \")]\n        self.supplies = [int(x) for x in input().split(\" \")]\n\n    def process_task(self):\n        travel_time = sum(self.distances)\n        position = 0\n        fuel = self.supplies[0]\n        max_supply = self.supplies[0]\n        while position < self.m_k[0]:\n            if fuel >= self.distances[position]:\n                fuel -= self.distances[position]\n                position += 1\n                if position == self.m_k[0]:\n                    break\n                fuel += self.supplies[position]\n                max_supply = max(max_supply, self.supplies[position])\n            else:\n                tanking = self.distances[position] - fuel\n                tanking_rounds = tanking // max_supply + int(math.ceil(tanking % max_supply / max_supply))\n                fuel += tanking_rounds * max_supply\n                travel_time += tanking_rounds * self.m_k[1]\n        self.result = str(travel_time)\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask241ASolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "import sys \nimport math\n#4\n#1 3 2 0\nm,k = [int(i) for i in sys.stdin.readline().split()]\nd = [int(i) for i in sys.stdin.readline().split()]\ns = [int(i) for i in sys.stdin.readline().split()]\n \n### 0 closed closed 1 gym 2 contest 3 both\n \ntime = 0\noil = 0\nmax_val = 0\nfor i,val in enumerate(d):\n    oil += s[i]\n    if s[i] > max_val:\n        max_val = s[i]\n    if val <=  oil: ## you can move\n        time += val\n        oil -= val\n    else:\n        left = val - oil  ## the required gas\n        ## if the required gas is less than\n        times = math.ceil(left/max_val) ## time \n        oil += times * max_val\n        time += val + times * k\n        oil -= val\nprint(time)", "# CF 241/A 1300\n\n# S = supply in city i\n# D = distance from c[i] to c[i + 1]\n# k = refresh interval\n# min time to arrive at C[n] where n = m + 1\n\ndef f(k, D, S):\n    n = len(D)\n\n    # travel time is at least the sum of all distances\n    time = sum(D)\n\n    fuel = 0\n    best = 0\n\n    for i in range(n):\n        assert fuel >= 0\n        # enter i-th city\n        # fuel is either negative (we need extra) or zero\n        # add S[i] fuel for free\n        # subtract distance to city i+1\n        fuel += (S[i] - D[i])\n        if S[i] > S[best]:\n            best = i\n        if fuel < 0: # best station for i..lastpos\n            need = -fuel\n            count = need // S[best]\n            if need % S[best] != 0:\n                count += 1\n            time += count * k\n            fuel += S[best] * count\n\n    return time\n\nassert f(4, [15, 20, 14, 10, 39, 4, 26, 8, 8, 30, 13, 43, 7, 7, 4, 6, 23, 42, 24, 35, 12, 19, 21, 31, 5, 20, 8, 17, 25, 31, 8, 31, 9, 14, 29, 35, 39, 35, 19, 13, 35, 11, 24, 3, 22, 3, 22, 41, 26, 32, 17, 42, 21, 16, 15, 44, 12, 5, 16, 20, 19, 38, 15, 11, 36, 14, 6, 21, 5, 27, 15, 40, 6, 9, 32, 33, 35, 4, 10, 15, 26], [3, 5, 4, 3, 4, 6, 4, 7, 5, 4, 3, 4, 3, 3, 4, 3, 4, 3, 3, 4, 6, 5, 5, 3, 3, 6, 6, 5, 3, 3, 5, 3, 3, 6, 4, 4, 3, 6, 4, 3, 3, 5, 6, 6, 7, 3, 3, 3, 3, 3, 7, 3, 3, 5, 3, 3, 3, 4, 6, 4, 6, 4, 5, 3, 3, 6, 4, 3, 3, 3, 7, 5, 4, 5, 3, 5, 4, 3, 3, 4, 3]) == 2419\n\nassert f(10, [4, 4, 4], [1, 2, 3]) == 3 * 10 + 1 * 10 + 10 + 12\nassert f(10, [5], [5]) == 5\nassert f(10, [6], [5]) == 16\nassert f(20, [5, 5], [5, 5]) == 10\nassert f(5,  [2, 2, 2], [1, 1, 1]) == 6 + 5 + 5 + 5\nassert f(5,  [1, 1, 1], [3, 0, 0]) == 3\nassert f(10, [4, 4, 4], [6, 5, 3]) == 12\n\nassert f(6, [1, 2, 5, 2], [2, 3, 3, 4]) == 10\nassert f(5, [10, 10, 10], [5, 10, 1]) == 40\nassert f(3, [5, 6], [5, 5]) == 14\nassert f(3, [11, 8, 8, 12, 17, 4, 4, 25, 39, 37, 31, 32, 38, 34, 29, 29, 34, 39, 39, 39, 17, 9, 24, 6], [3, 5, 4, 3, 3, 3, 4, 3, 4, 3, 3, 3, 3, 4, 3, 3, 4, 3, 4, 3, 3, 3, 3, 3]) == 862\n\n\nm, k = list(map(int, input().split()))\nD = list(map(int, input().split()))\nS = list(map(int, input().split()))\nans = f(k, D, S)\nprint(ans)\n", "m,k=list(map(int,input().split()))\nd = list(map(int,input().split()))\ns = list(map(int,input().split()))\ncap=0\ndis=0\nma=0\ntime=0\nfor i in range(m):\n    dis=d[i]\n    cap+=(s[i]-d[i])\n    time+=d[i]\n    ma=max(ma,s[i])\n    if cap<0:\n        while cap<0:\n            cap+=ma\n            time+=k\nprint(time)        \n\n        \n", "from math import ceil\n\nX = list(map(int, input().split()))\nDistance = list(map(int, input().split()))\nFuel = list(map(int, input().split()))\nTank, Time, Max = 0, 0, 0\nfor i in range(X[0]):\n    Tank += Fuel[i]\n    Max = max(Max, Fuel[i])\n    Stay = max(0, ceil((Distance[i] - Tank) / Max))\n    Time += Stay * X[1] + Distance[i]\n    Tank += Stay * Max - Distance[i]\nprint(Time)\n\n# Hope the best for Ravens\n# Never give up\n", "from math import ceil\nn, k = map(int,input().split())\nd = list(map(int,input().split()))\ns = list(map(int,input().split()))\nfuel = 0\nstor = 0\ntime = 0\n\nfor i in range(n):\n\tfuel+= s[i]\n\tstor = max(stor, s[i])\n\tif fuel >= d[i]:\n\t\tfuel-= d[i]\n\t\ttime+= d[i]\n\telse:\n\t\tyy = ceil((d[i] - fuel) / stor)\n\t\ttime+= k * yy\n\t\ttime+= d[i]\n\t\tfuel+= stor * yy\n\t\tfuel-= d[i]\nprint(time)", "def main():\n    import sys\n    input = sys.stdin.readline\n\t\n    m, k = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    \n    t = 0\n    f = 0\n    ma = 0\n    \n    for i in range(m):\n        f += s[i]\n        ma = max(ma, s[i])\n        while f < d[i]:\n            f += ma\n            t += k\n        t += d[i]\n        f -= d[i]\n    \n    print(t)\n    \n    return 0\n\nmain()\n", "a,b=list(map(int,input().split()))\nd=list(map(int,input().split()))\np=list(map(int,input().split()))\nt=0;d1=0;i=0\nwhile i<a:\n    if t+sum(p[i::])-sum(d[i::])<0:\n        j=i;pr=p[i]\n        while j<a and pr>=p[j]:j+=1\n        k=(-t-sum(p[i:j])-1+sum(d[i:j])+pr)//pr\n        d1+=b*k\n        t=(pr*k-(-t-sum(p[i:j])+sum(d[i:j])))%pr\n        i=j\n    else:i+=1\nprint(sum(d)+d1)\n"]