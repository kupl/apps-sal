["n, k = map(int, input().split())\na = list(input()) * 2\n\niter1 = [0] * (2 * n)\niter2 = [0] * (2 * n)\nchanges = 0\nfor i in range(1, 2 * n):\n    if a[i] != a[i - 1]:\n        changes += 1\n    else:\n        changes = 0\n    iter1[i] = changes\nchanges = 0\nfor i in range(2 * n - 2, -1, -1):\n    if a[i] != a[i + 1]:\n        changes += 1\n    else:\n        changes = 0\n    iter2[i] = changes\n\niters = [min(iter1[n + i], iter2[i]) for i in range(n)]\nfor i in range(n):\n    if iters[i] > n // 2:\n        iters[i] = 10 ** 9 + 1\n    it = min(iters[i], k)\n    if it % 2 != 0:\n        if a[i] == \"B\":\n            a[i] = \"W\"\n        else:\n            a[i] = \"B\"\nprint(\"\".join(a[:n]))", "import sys\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\nS=input().strip()\n\nANS=[\"?\"]*n\n\nfor i in range(n-1):\n    if S[i]==\"B\":\n        if S[i-1]==\"B\" or S[i+1]==\"B\":\n            ANS[i]=\"B\"\n\n    else:\n        if S[i-1]==\"W\" or S[i+1]==\"W\":\n            ANS[i]=\"W\"\n\nif S[n-1]==\"B\":\n    if S[n-2]==\"B\" or S[0]==\"B\":\n        ANS[n-1]=\"B\"\n\nelse:\n    if S[n-2]==\"W\" or S[0]==\"W\":\n        ANS[n-1]=\"W\"\n\n\nCOMP=[]\n\ncount=1\nnow=ANS[0]\n\nfor i in range(1,n):\n    if ANS[i]==ANS[i-1]:\n        count+=1\n    else:\n        COMP.append([now,count])\n        count=1\n        now=ANS[i]\n\nCOMP.append([now,count])\nhosei=0\n\nif len(COMP)==1:\n    if COMP[0][0]!=\"?\":\n        print(S)\n    else:\n        if k%2==0:\n            print(S)\n        else:\n            ANS=[]\n            for s in S:\n                if s==\"B\":\n                    ANS.append(\"W\")\n                else:\n                    ANS.append(\"B\")\n            print(\"\".join(ANS))\n    return\n\nif COMP[0][0]==\"?\" and COMP[-1][0]==\"?\":\n    hosei=COMP[-1][1]\n    COMP.pop()\n    COMP[0][1]+=hosei\n\nANS2=[]\n\nLEN=len(COMP)\nif COMP[0][0]!=\"?\":\n    COMP.append(COMP[0])\n\nfor i in range(LEN):\n    if COMP[i][0]!=\"?\":\n        ANS2.append(COMP[i])\n    else:\n        x=COMP[i][1]\n\n        if x<=k*2:\n            if COMP[i-1][0]==COMP[i+1][0]:\n                ANS2.append([COMP[i-1][0],x])\n\n            else:\n                ANS2.append([COMP[i-1][0],x//2])\n                ANS2.append([COMP[i+1][0],x//2])\n\n        else:\n            ANS2.append([COMP[i-1][0],k])\n            ANS2.append([\"?\",x-2*k])\n            ANS2.append([COMP[i+1][0],k])\n\n#print(ANS2)\n            \nGOAL=[]\nfor x,y in ANS2:\n    if x!=\"?\":\n        GOAL+=[x]*y\n    else:\n        if GOAL!=[]:\n            if GOAL[-1]==\"B\":\n                t=0\n            else:\n                t=1\n        else:\n            if ANS2[-1][0]==\"B\":\n                t=0\n            else:\n                t=1\n\n        for j in range(y):\n            if j%2==0:\n                if t==0:\n                    GOAL.append(\"W\")\n                else:\n                    GOAL.append(\"B\")\n            else:\n                if t==0:\n                    GOAL.append(\"B\")\n                else:\n                    GOAL.append(\"W\")\n\nGOAL=GOAL[hosei:]+GOAL[:hosei]\n\nprint(\"\".join(GOAL))\n\n                    \n                \n            \n            \n            \n                \n", "n, m = [int(x) for x in input().split()]\ns = input()\n\ndef lefti(i):\n    return (n+i-1)%n\ndef left(i):\n    return s[lefti(i)]\ndef righti(i):\n    return (i+1)%n\ndef right(i):\n    return s[righti(i)]\ndef inverse(c):\n    return 'B' if c == 'W' else 'W'\n\nres = [' ' for i in range(n)]\nfor i in range(n):\n    cr = s[i]\n    pr = left(i)\n    nx = right(i)\n    if cr == pr or cr == nx:\n        res[i] = cr\n\nall_empty = False\ni = 0\nwhile res[i] == ' ':\n    i += 1\n    if i >= n:\n        all_empty = True\n        break\n\nif all_empty:\n    for k in range(n):\n        res[k] = s[k] if m % 2 == 0 else inverse(s[k])\nelse:\n    krug = i\n    i = righti(i)\n    while i != krug:\n        while res[i] != ' ' and i != krug:\n            i = righti(i)\n        if i == krug:\n            break\n        l = lefti(i)\n        \n        while res[i] == ' ':\n            i = righti(i)\n        r = i\n\n        real_l = l\n##        print(res)\n        for j in range(m):\n            res[righti(l)] = res[l]\n            res[lefti(r)] = res[r]\n##            print(res, l, r, i, m)\n            \n            l = righti(l)\n            r = lefti(r)\n            if righti(l) == r or l == r:\n                break\n        \n    for k in range(n):\n        if res[k] == ' ':\n            res[k] = s[k] if m % 2 == 0 else inverse(s[k])\n\nprint(\"\".join(res))\n\n    \n\n        \n", "rev = {'B': 'W', 'W': 'B'}\n\nn, k = list(map(int, input().split()))\na = list(input())\n\nif all([a[0] == x for x in a]):\n\tprint(''.join(a))\n\treturn\n\nf = [i for i in range(n)]\nc = [1 for i in range(n)]\n\ndef getF(u):\n\tif f[u] == u:\n\t\treturn u\n\tif f[f[u]] == f[u]:\n\t\treturn f[u]\n\tf[u] = getF(f[u])\n\treturn f[u]\n\ndef uniF(u, v):\n\tu, v = list(map(getF, (u, v)))\n\tif u == v:\n\t\treturn\n\tf[u] = v\n\tc[v] += c[u]\n\nfor i in range(n):\n\tif a[i] == a[(i - 1) % n]:\n\t\tuniF(i, (i - 1) % n)\n\tif a[i] == a[(i + 1) % n]:\n\t\tuniF(i, (i + 1) % n)\n\np = []\n\nfor i in range(n):\n\tif getF(i) == i and c[i] > 1:\n\t\tp.append(i)\n\nif len(p) == 0:\n\tif k % 2:\n\t\ta = list(map(rev.__getitem__, a))\n\tprint(''.join(a))\n\treturn\n\nfor i in range(len(p)):\n\tu = p[i]\n\twhile a[(u + 1) % n] == a[p[i]]:\n\t\tu = (u + 1) % n\n\tv = p[(i + 1) % len(p)]\n\twhile a[(v - 1) % n] == a[p[(i + 1) % len(p)]]:\n\t\tv = (v - 1) % n\n\tif v < u:\n\t\tv += n\n\tl = v - u - 1\n\tif 2 * k >= l:\n\t\tfor i in range(u, u + l // 2 + 1):\n\t\t\ta[i % n] = a[u]\n\t\tfor i in range(u + l // 2 + 1, v):\n\t\t\ta[i % n] = a[v % n]\n\telse:\n\t\tfor i in range(u + 1, u + k + 1):\n\t\t\ta[i % n] = a[u]\n\t\tfor i in range(v - k, v):\n\t\t\ta[i % n] = a[v % n]\n\t\tfor i in range(u + k + 1, v - k):\n\t\t\ta[i % n] = rev[a[(i - 1) % n]]\n\nprint(''.join(a))\n", "# \n# from __future__ import division\n\n# input = raw_input\nimport math\n\n\n\n## Make simpler structure:\nclass Same:\n    def __init__(self,col, size, fro, to):\n        self.size = size\n        self.col = col\n        self.fro = fro\n        self.to = to\n\n    def __repr__(self):\n        return \"Same({},{}, [{},{}))\".format(self.col, self.size, self.fro, self.to)\n\nclass Alter:\n    def __init__(self, size, fro, to):\n        self.size = size\n        self.fro = fro\n        self.to = to\n    def __repr__(self):\n        return \"Alter({}, [{},{}))\".format(self.size, self.fro, self.to)\n\ndef simpl(lst):\n    lst = lst[0] + lst + lst[-1]\n    res = []\n    prv = None\n    streak_same = 0\n    same_starts = 0\n    for pos, curr in enumerate(lst):\n        #print(pos, curr, prv, streak_same, same_starts)\n        if curr == prv:\n            if streak_same == 0:\n                same_starts = pos-1\n                streak_same = 2\n            else: streak_same += 1\n        else:\n            if streak_same > 0:\n                res.append(Same(prv, streak_same, same_starts, pos))\n                assert streak_same == pos - same_starts\n                same_starts = None\n                streak_same = 0\n        prv = curr\n    if streak_same > 0:\n        res.append(Same(prv, streak_same, same_starts, len(lst)))\n        assert streak_same == len(lst) - same_starts\n\n    # Insert alternating and strip the ends. First strip the ends (and change the indices):\n    res[0].size -= 1\n    res[-1].size -=1\n    res[0].to -= 1\n    res[-1].to -= 1\n    for x in res[1:]:\n      x.fro -= 1\n      x.to -= 1\n\n    # Append alternating:\n    #print(res)\n    new_res = []\n    # all pairs (A0, A1), (A1, A2), ... (An-2, An-1)\n    for x, y in zip(res, res[1:]):\n      new_res.append(x)\n      if x.to != y.fro:\n        new_res.append(Alter(y.fro-x.to, x.to, y.fro))\n    new_res.append(res[-1])\n    return new_res\n\ndef other_col(x):\n  return 'B' if x == 'W' else 'W'\n\ndef alter_col(start, size):\n  oth = other_col(start)\n  res = []\n  for i in range(size):\n    if i % 2 == 0:\n      res.append(start)\n    else: res.append(oth)\n  return ''.join(res)\n\ndef compute_alter(size, prv_col, nxt_col, k):\n  # Every step, size decreases by 2:\n  size_after_k = max(0, size - 2*k)\n  assert size % 2 == (1 if prv_col == nxt_col else 0)\n  if size_after_k == 0:\n    if prv_col == nxt_col:\n      return prv_col * size\n    # Otherwise it's split evenly in the two colors of prv_col, nxt_col\n    else:\n      return prv_col * (size //2) + nxt_col * (size // 2)\n  else:\n    alter_middle = alter_col(other_col(prv_col), size_after_k)\n    return prv_col * k + alter_middle + nxt_col * k\n\n\ndef simulate(splitted, k):\n  res = [splitted[0].col*splitted[0].size]\n  if len(splitted) == 1: return res\n  for i in range(1, len(splitted)-1):\n    prv, curr, nxt = splitted[i-1], splitted[i], splitted[i+1]\n    if isinstance(curr, Alter):\n      assert isinstance(prv, Same) and isinstance(nxt, Same)\n      alter_after_change = compute_alter(curr.size, prv.col, nxt.col, k)\n      assert len(alter_after_change) == curr.size\n      res.append(alter_after_change)\n    else:\n      res.append(curr.col * curr.size)\n  res.append(splitted[-1].col * splitted[-1].size)\n  return res\n\ndef test(lst, k):\n  n = len(lst)\n  # look for 2 in a row (there are at least 3:)\n  two_in_row = None\n  for i, (cur, prv) in enumerate(zip(lst, lst[1:] + lst[0])):\n      if cur == prv:\n          two_in_row = i\n          break\n  #print(list(enumerate(zip(lst, lst[1:] + lst[0]))))\n  #print(two_in_row)\n\n  if two_in_row is None:\n      if k%2 == 0:\n          return lst\n      else:\n          # flip it:\n          return ''.join('B' if x == 'W' else 'W' for x in lst)\n\n  # re-cut it so that start and end never change:\n  #   i=_\n  # BWBWBBWW\n  #   i-^\n  # print(lst)\n  flip = i\n  lst = lst[flip+1:] + lst[:flip+1]\n  #print(\"Flipped: \", lst)\n  smpl = simpl(lst)\n  #print(\"Parsed: \", smpl)\n  before_flip_res = simulate(smpl, k)\n  #print(\"Simulated: \", before_flip_res)\n  before_flip_res = ''.join(before_flip_res)\n  after_flip = n-(flip+1)\n  #print(\"First part:\", before_flip_res[after_flip:])\n  #print(\"Second part: \", before_flip_res[:after_flip])\n\n  # flip it back:\n  return before_flip_res[after_flip:] + before_flip_res[:after_flip]\n\ndef sim_slow(lst, k):\n  for _ in range(k):\n    nxt_lst = [None for _ in range(len(lst))]\n    for i, curr in enumerate(lst):\n      prv, curr, nxt = lst[i-1], lst[i], lst[(i+1) % len(lst)]\n      nW = [prv, curr, nxt].count('W')\n      nB = [prv, curr, nxt].count('B')\n      if nW >= 2:\n        nxt_lst[i] = 'W'\n      else: nxt_lst[i] = 'B'\n    lst = nxt_lst\n  return ''.join(lst)\n\nif False:\n  import itertools\n  for x in itertools.product(\"BW\", \"BW\", \"BW\", \"BW\", \"BW\", \"BW\", \"BW\", \"BW\", \"BW\", \"BW\", \"BW\", \"BW\"):\n    x = ''.join(x)\n    for k in range(10):\n      if sim_slow(x, k) != test(x, k):\n        print(x, k, sim_slow(x, k), test(x, k))\n        assert False\n\n#t = int(input())\nfor _ in range(1):\n  _, k = [int(x) for x in input().split()]\n  lst = input()\n  res = test(lst, k)\n  # print(\"result: \", res)\n  # print(\"\\n\")\n  print(res)\n\n# print(simpl(lst))\n", "n, k = map(int, input().split())\na = list(input()) * 2\n     \niter1 = [0] * (2 * n)\niter2 = [0] * (2 * n)\nchanges = 0\nfor i in range(1, 2 * n):\n    if a[i] != a[i - 1]:\n        changes += 1\n    else:\n        changes = 0\n    iter1[i] = changes\nchanges = 0\nfor i in range(2 * n - 2, -1, -1):\n    if a[i] != a[i + 1]:\n        changes += 1\n    else:\n        changes = 0\n    iter2[i] = changes\n     \niters = [min(iter1[n + i], iter2[i]) for i in range(n)]\nfor i in range(n):\n    if iters[i] > n // 2:\n        iters[i] = 10 ** 9 + 1\n    it = min(iters[i], k)\n    if it % 2 != 0:\n        if a[i] == \"B\":\n            a[i] = \"W\"\n        else:\n            a[i] = \"B\"\nprint(\"\".join(a[:n]))", "n, k = [int(i) for i in input().split()]\ncol = [0 if d == \"W\" else 1 for d in input()]\n\n\noffs = 0\nif col[0] != col[-1]:\n    offs = -1\n    for i in range(n-1):\n        if col[i] == col[i+1]:\n            offs = i+1\n            break\n    if offs == -1:\n        if k % 2 == 0:\n            print(''.join([[\"W\", \"B\"][col[i]] for i in range(n)]))\n        else:\n            print(''.join([[\"B\", \"W\"][col[i]] for i in range(n)]))\n        return\n    col = col[offs:] + col[:offs] \n\n# print(col)\nisalt = [0]*n\nfor i in range(1, n-1):\n    if col[i-1] != col[i] and col[i] != col[i+1]:\n        isalt[i] = 1\n\n\n\nsides = [[-1,-1] for i in range(n)]\n\nll = 0\nfor i in range(n):\n    if isalt[i]:\n        sides[i][0] = ll\n    else:\n        ll = i + 1\nrr = 0\nfor i in range(n-1, -1, -1):\n    if isalt[i]:\n        sides[i][1] = rr\n    else:\n        rr = i - 1\n\n\neven = k%2 == 0\nans = [0] * n\nfor i in range(n):\n    if isalt[i] == 0:\n        ans[i] = col[i]\n    else:\n        bb = sides[i]\n        if i - bb[0] < bb[1] - i:\n            dist = i - bb[0]\n            nei = col[bb[0] - 1]\n        else:\n            dist = bb[1] - i\n            nei = col[bb[1]+1]\n        if dist + 1 <= k:\n            ans[i] = nei\n        else:\n            if even:\n                ans[i] = col[i]\n            else:\n                ans[i] = 1 - col[i]\n\n\n\n# print(ans)\nif offs != 0:\n    offs = n - offs\n    ans = ans[offs:] + ans[:offs]\n\n# print(offs, ans)\n\nprint(''.join([[\"W\", \"B\"][ans[i]] for i in range(n)]))\n", "n, k = map(int, input().split())\na = list(input()) * 2\n \niter1 = [0] * (2 * n)\niter2 = [0] * (2 * n)\nchanges = 0\nfor i in range(1, 2 * n):\n    if a[i] != a[i - 1]:\n        changes += 1\n    else:\n        changes = 0\n    iter1[i] = changes\nchanges = 0\nfor i in range(2 * n - 2, -1, -1):\n    if a[i] != a[i + 1]:\n        changes += 1\n    else:\n        changes = 0\n    iter2[i] = changes\n \niters = [min(iter1[n + i], iter2[i]) for i in range(n)]\nfor i in range(n):\n    if iters[i] > n // 2:\n        iters[i] = 10 ** 9 + 1\n    it = min(iters[i], k)\n    if it % 2 != 0:\n        if a[i] == \"B\":\n            a[i] = \"W\"\n        else:\n            a[i] = \"B\"\nprint(\"\".join(a[:n]))", "\"\"\"\ndef get(ch):\n    if(ch=='W'):\n        return 'B'\n    return 'W'\n\nn,k=map(int,input().split())\ns=input()\n\npos=[0]*(n)\n\nfor i in range(0,len(s)):\n\n    if(s[i]==s[(i+1)%n]):\n        if(s[i]=='W'):\n            pos[i]=1\n            pos[(i+1)%n]=1\n        else:\n            pos[i]=2\n            pos[(i+1)%n]=2\n\n\ntemp=0\nstr1=0\nitr=[]\n\nfor i in range(0,len(pos)):\n    if(pos[i]>0 and temp==0):\n        temp=1\n        str1=i\n    itr.append([10**9+7,'W'])\n\n  \nif(temp==1):\n    for i in range(str1,str1+n):\n        if(pos[(i%n)]>0):\n            curr=pos[(i%n)]\n            ptr=i\n        else:\n            itr[(i%n)][0]=i-ptr\n            if(curr==1):\n                itr[(i%n)][1]='W'\n            else:\n                itr[(i%n)][1]='B'\n\n\n    for i in range(str1,str1-n,-1):\n        if(pos[(i%n)]>0):\n            curr=pos[(i%n)]\n            ptr=i\n        else:\n            if(ptr-i<itr[(i%n)][0]):\n                itr[(i%n)][0]=ptr-i\n                if(curr==1):\n                    itr[(i%n)][1]='W'\n                else:\n                    itr[(i%n)][1]='B'\n\n\nans=''\nfor i in range(0,len(s)):\n    if(itr[i][0]>=k):\n        ans+=itr[i][1]\n    else:\n        if(k%2==0):\n            ans+=s[i]\n        else:\n            ans+=get(s[i])\n\nprint(ans)\n\n\n\"\"\"\n\n\n\ndef get(ch):\n    if(ch=='W'):\n        return 'B'\n    return 'W'\n\nn,k=list(map(int,input().split()))\ns=input()\n\npos=[0]*(n)\n\nfor i in range(0,len(s)):\n\n    if(s[i]==s[(i+1)%n]):\n        if(s[i]=='W'):\n            pos[i]=1\n            pos[(i+1)%n]=1\n        else:\n            pos[i]=2\n            pos[(i+1)%n]=2\n\n\n#print('pos',pos)\n\ntemp=0\nstr1=0\nitr=[]\n\nfor i in range(0,len(pos)):\n    if(pos[i]>0 and temp==0):\n        temp=1\n        str1=i\n    itr.append([10**9+7,'W'])\n\n#print('itr',itr)\nif(temp==1):\n    for i in range(str1,str1+n):\n        if(pos[(i%n)]>0):\n            curr=pos[(i%n)]\n            ptr=i\n        else:\n            itr[(i%n)][0]=i-ptr\n            if(curr==1):\n                itr[(i%n)][1]='W'\n            else:\n                itr[(i%n)][1]='B'\n\n    #print('inside itr',itr)\n\n\n    for i in range(str1,str1-n,-1):\n        if(pos[(i%n)]>0):\n            curr=pos[(i%n)]\n            ptr=i\n        else:\n            if(ptr-i<itr[(i%n)][0]):\n                itr[(i%n)][0]=ptr-i\n                if(curr==1):\n                    itr[(i%n)][1]='W'\n                else:\n                    itr[(i%n)][1]='B'\n\n    #print('inside itr',itr)\n\n\nans=''\nfor i in range(0,len(s)):\n    if(pos[i]>0):\n        ans+=s[i]\n    else:\n        if(itr[i][0]<=k):\n            ans+=itr[i][1]\n        else:\n            if(k%2==0):\n                ans+=s[i]\n            else:\n                ans+=get(s[i])\n\nprint(ans)\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n", "def get(ch):\n    if(ch=='W'):\n        return 'B'\n    return 'W'\n\nn,k=list(map(int,input().split()))\ns=input()\n\npos=[0]*(n)\n\nfor i in range(0,len(s)):\n\n    if(s[i]==s[(i+1)%n]):\n        if(s[i]=='W'):\n            pos[i]=1\n            pos[(i+1)%n]=1\n        else:\n            pos[i]=2\n            pos[(i+1)%n]=2\n\n\ntemp=0\nstr1=0\nitr=[]\n\nfor i in range(0,len(pos)):\n    if(pos[i]>0 and temp==0):\n        temp=1\n        str1=i\n    itr.append([10**9+7,'W'])\n\nif(temp==1):\n    for i in range(str1,str1+n):\n        if(pos[(i%n)]>0):\n            curr=pos[(i%n)]\n            ptr=i\n        else:\n            itr[(i%n)][0]=i-ptr\n            if(curr==1):\n                itr[(i%n)][1]='W'\n            else:\n                itr[(i%n)][1]='B'\n\n    for i in range(str1,str1-n,-1):\n        if(pos[(i%n)]>0):\n            curr=pos[(i%n)]\n            ptr=i\n        else:\n            if(ptr-i<itr[(i%n)][0]):\n                itr[(i%n)][0]=ptr-i\n                if(curr==1):\n                    itr[(i%n)][1]='W'\n                else:\n                    itr[(i%n)][1]='B'\n\nans=''\nfor i in range(0,len(s)):\n    if(pos[i]>0):\n        ans+=s[i]\n    else:\n        if(itr[i][0]<=k):\n            ans+=itr[i][1]\n        else:\n            if(k%2==0):\n                ans+=s[i]\n            else:\n                ans+=get(s[i])\n\nprint(ans)\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n"]