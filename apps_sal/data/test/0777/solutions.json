["#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2015 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\n\nprint(len(input())*25+26)\n", "s = input()\nn = len(s)\nss = set()\na = 'abcdefghijklmnopqrstuvwxyz'\nfor i in range(n + 1):\n    for j in range(26):\n        ss.add(s[:i] + a[j] + s[i:])\nprint(len(ss))", "from string import ascii_lowercase as letters\n\ns = input()\nbooks = set()\n\nfor i in range(len(s) + 1):\n    for l in letters:\n        books.add(s[:i] + l + s[i:])\n\nprint(len(books))\n", "# I know it's messy\n\nd = {}\ns = input()\nfor i in range(0, len(s)+1):\n    for a in \"abcdefghijklmnopqrstuvwxyz\":\n        d[\"%s%s%s\" % (s[:i], a, s[i:])] = True\n\nprint(len(d))\n", "a = input()\nprint((len(a) + 1) * 25 + 1)\n", "a = input();\nsumm = 26;\nsumm += 25 * (len(a))\nprint(summ)\n", "Q = set()\nT = input()\nfor P in range(len(T)+1):\n    for L in range(26):\n        Q.add(T[:P]+str(chr(L+97))+T[P:])\nprint(len(Q))\n", "s = input()\nprint(26 + 25 * len(s))\n", "n = list(input())\nk = set()\nfor i in range(len(n) + 2):\n\tfor j in range(26):\n\t\tk.add(''.join(str(n[:i] + [chr(j + 97)] + n[i:])))\nprint(len(k))\n", "a = input()\nb = len(a)\nprint(26 + 25 * b)", "import sys\n\n\ndef main():\n    data = sys.stdin.readline().strip()\n    s = set()\n    for i in range(len(data)):\n        for j in range(97,123):\n            s.add(data[:i]+chr(j)+data[i:])\n\n    for j in range(97,123):\n            s.add(data+chr(j))\n\n    print(len(s))\n\nmain()\n", "s = input()\nn = len(s)\nprint(26 + 25 * n)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\ndef ELIST(n): return [[] for i in range(n)]\ndef MI(n=None,m=None): # input matrix of integers\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = VI()\n    return arr\ndef MS(n=None,m=None): # input matrix of strings\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = input()\n    return arr\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\n    if n is None: n,m = VI()\n    a = MI(n,m)\n    arr = LIST(m,n)\n    for i,l in enumerate(a):\n        for j,x in enumerate(l):\n            arr[j][i] = x\n    return arr\n\n\ndef run(n,x,l,r):\n    s = 0\n    curr = 1\n    for i in range(n):\n        skip = (l[i]-curr) // x\n        s += r[i]-curr-skip*x+1\n        curr = r[i]+1\n    print(s)\n\n\ndef main(info=0):\n    s = input()\n\n    st = set()\n    abc = [chr(j) for j in range(97,97+26)]\n    for i in range(len(s)+1):\n        st.update([s[:i] + x + s[i:] for x in abc])\n\n    print(len(st))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "string = len(input())+1\n\nprint(string*26-string+1)", "s = input()\na = []\nfor i in s:\n    if i not in a:\n        a.append(i)\nprint(len(s)*25+26)", "n = len(input())+1\n\nprint(n*26-n+1)", "print(len(input())*25+26)\n    \n  \n    \n", "instr = input()\nlength = len(instr)\nprint((length+1)*26-length)", "\n\ns = list(input())\n\nperms = (26 * (len(s)+1)) - len(s)\n\nprint(perms)\n# 26*3-2\n", "s=input()\nprint(26*(len(s)+1)-(len(s)))\n", "s = input()\n\nprint((len(s) + 1) * 26 - len(s))\n", "s = input()\nprint(len(s) * 25 + 26)", "s = input()\nx = len(s)\n\nprint((26 * (x + 1)) - x)\n\n", "#!/usr/bin/env python\n# 554A_photo.py - Codeforces.com 554A Photo quiz\n#\n# Copyright (C) 2015 Sergey\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\nPlease help Haruhi solve this problem.\n\nInput\n\nThe first line of input will be a single string s (1<=|s|<=20).\nString s consists only of lowercase English letters.\n\nOutput\n\nOutput a single integer equal to the number of distinct photobooks\nKyoya Ootori can make.\n\n\"\"\"\n\n# Standard libraries\nimport unittest\nimport sys\nimport re\n\n# Additional libraries\n\n\n###############################################################################\n# Photo Class\n###############################################################################\n\n\nclass Photo:\n    \"\"\" Photo representation \"\"\"\n\n    def __init__(self, args):\n        \"\"\" Default constructor \"\"\"\n\n        self.args = args\n        self.str = args\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = 0\n        for n in range(len(self.str) + 1):\n            if n == 0:\n                result += 1\n            result += 25\n\n        return result\n\n###############################################################################\n# Executable code\n###############################################################################\n\n\ndef decode_inputs(inputs):\n    \"\"\" Decoding input string list into base class args list \"\"\"\n\n    # Decoding input into a string\n    ilist = inputs[0]\n\n    return ilist\n\n\ndef calculate(inputs):\n    \"\"\" Base class calculate method wrapper \"\"\"\n    return Photo(decode_inputs(inputs)).calculate()\n\n\ndef main():\n    \"\"\" Main function. Not called by unit tests \"\"\"\n\n    # Read test input string list\n    inputs = [input()]\n\n    # Print the result\n    print(calculate(inputs))\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_decode_inputs(self):\n        \"\"\" Input string decoding testing \"\"\"\n        self.assertEqual(decode_inputs([\"a\"]), \"a\")\n\n    def test_Photo_class__basic_functions(self):\n        \"\"\" Photo class basic functions testing \"\"\"\n        d = Photo(\"a\")\n        self.assertEqual(d.str, \"a\")\n\n    def test_calculate(self):\n        \"\"\" Main calculation function \"\"\"\n\n        # Sample tests\n        self.assertEqual(calculate([\"a\"]), 51)\n        self.assertEqual(calculate([\"hi\"]), 76)\n\ndef __starting_point():\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n    main()\n\n__starting_point()"]