["def main():\n\n    a = str(input())\n    b = str(input())\n\n    print(a.count(b))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "s = input()\nk = input()\nprint(s.count(k))", "a = input()\nb = input()\nprint(a.count(b))\n", "a = str(input())\nb = str(input())\nct = 0\nif b in a:\n    ct += a.count(b)\nprint(ct)", "a = input()\nb = input()\nprint(a.count(b))\n", "s = input()\nst = input()\nprint(s.count(st, 0, len(s)))\n", "s=str(input())\nt=str(input())\nans=s.count(t)\nprint(ans)\n", "\n\n\ndef __starting_point():\n    s1 = input()\n    s2 = input()\n    print(s1.count(s2))\n\n__starting_point()", "# import string\n# import sys\n# import json\n# import queue\n# import math\n# import matplotlib.pyplot as plt\n# import matplotlib.patches as patch\n#\n# class Sheree:\n#     def __init__(self,x,y,r):\n#         self.x = x\n#         self.y = y\n#         self.r = r\n#         self.to_right = 200-x+r\n#         self.to_left = x-r\n#\n#     def have_route(self, shere):\n#         return math.sqrt((self.x - shere.x)**2+(self.y-shere.y)**2) <= self.r+shere.r\n#\n#     def __str__(self):\n#         return str(self.x)+'_'+str(self.y)+'_'+str(self.r)\n#\n# def bfs(start):\n#     q = queue.Queue()\n#     q.put(start)\n#     used = {}\n#     p = {}\n#     d = {}\n#     for i in routes:\n#         used[i]=False\n#         p[i]=-1\n#         d[i]=0\n#     p[start]=-1\n#     used[start]=True\n#     while(not q.empty()):\n#         v = q.get()\n#         for to in routes[v]:\n#             if(not used[to]):\n#                 used[to]=True\n#                 q.put(to)\n#                 d[to]=d[v]+1\n#                 p[to]=v\n#     return [used, d, p]\n#\n#\n#\n# n = int(input())\n#\n# sheres = {}\n# routes = {}\n# fig = plt.figure()\n# plt.ylim([-100,400])\n# plt.xlim([-100,400])\n# plt.autoscale(True,False,False)\n# for i in range(n):\n#     a = input().split(' ')\n#     [x,y,r] = [int(x) for x in a]\n#     circle = plt.Circle((x,y),radius=r,fill=False)\n#     plt.text(x,y, i)\n#     fig.gca().add_artist(circle)\n#     shere = Sheree(x,y,r)\n#     sheres[str(shere)]=shere\n# fig.gca().add_patch(patch.Rectangle((0,0),200,300,fill=False))\n# fig.gca().set_aspect(1)\n#\n# print(sheres)\n# ar = []\n# for i in sheres:\n#     ar.append(sheres[i])\n#     for j in sheres:\n#         if(i != j):\n#             if sheres[i].have_route(sheres[j]):\n#                 if i in routes:\n#                     routes[i].add(j)\n#                 else:\n#                     routes[i] = set([j])\n#                 if j in routes:\n#                     routes[j].add(i)\n#                 else:\n#                     routes[j] = set([i])\n#             else:\n#                 if i not in routes:\n#                     routes[i]=set([])\n#\n# ar.sort(key= lambda x: x.x)\n#\n# print(routes)\n# res = bfs(str(ar[0]))\n# print(res[0])\n# print(res[1])\n# print(res[2])\n# fig.savefig('res.png')\n# plt.show()\n#\n\n\nstr = input()\nstr2 = input()\n\nprint(str.count(str2))", "t = input()\np = input()\ns = p + '&' + t \nn = len(s)\nk = len(p)\nz = [0] * n\nl = 0\nr = 0\nfor i in range(1, n):\n    if i <= r:\n        z[i] = min(r - i + 1, z[i - l])\n    while i +z[i] < n and s[z[i]] == s[i + z[i]]:\n        z[i] += 1\n    if i + z[i] - 1 > r:\n        r = i + z[i] - 1\n        l = i\nans = 0\ni = len(p) - 1\nwhile i < n:\n    if z[i] == len(p):\n        ans += 1\n        i += k\n    else:\n        i += 1\n\nprint(ans)\n", "ai = input()\nsiri = input()\nprint(ai.count(siri))", "def main():\n\ts = input()\n\tp = input()\n\tprint(s.count(p))\n\n\t\t\n\n\ndef __starting_point():\n\tmain()\n__starting_point()", "string = input()\nname = input()\nprint(string.count(name))", "g = input()\np = input()\nt = g.count(p)\nprint(t)", "from collections import deque\na = list(input())\nb = list(input())\nd = deque()\nret = 0\nfor i in range(min(len(b)-1, len(a))):\n    d.append(a[i])\nfor i in range(len(b)-1, len(a)):\n    d.append(a[i])\n    if len(d) > len(b):\n        d.popleft()\n    remove = len(d) == len(b)\n    if remove:\n        for j in range(len(d)):\n            if d[j] != b[j]:\n                remove = False\n                break\n    if remove:\n        ret += 1\n        d.clear()\nprint(ret)\n", "A = input()\nB = input()\n\nc = 0\ns = 0\n\ni = 0\ne = len(A) - len(B)\nwhile i <= e:\n    AA = A[i:i+len(B)]\n    if AA == B:\n        c += 1\n        i += len(B) - 1\n    i += 1\n\nprint(c)\n", "a=list(input())\nb=list(input())\nr=0\nfor i in range(len(a)-len(b)+1):\n\tif a[i:i+len(b)] == b:\n\t\tr+=1\n\t\ta[i+len(b)-1] = '#'\nprint(r)", "import sys\nimport re\n\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()\n\nprint(len(re.findall(b, a)))\n", "a = input()\nb = input()\n'''n = len(a)\nm = len(b)\ncnt = 0\nfl = False\nfor i in range(n - m):\n\n'''\nprint(a.count(b))\n", "a = input()\nb = input()\n\nnIndex = 0\nnSum = 0\nwhile True :\n\tnRet = a.find(b, nIndex)\n\tif nRet == -1 :\n\t\tbreak;\n\tnSum += 1\n\tnIndex = nRet + len(b)\nprint(nSum)\n", "main = input()\nsub = input()\n\nans = main.count(sub)\nprint (ans)", "a = input()\nb = input()\nans = 0\npos = a.find(b)\nwhile pos != -1:\n    #tmp = b.replace(b[0], '#', 1)\n    a = a[(pos + len(b)):]\n    ans += 1\n    #print(a)\n    pos = a.find(b)\nprint(ans)", "a = input().rstrip()\nb = input().rstrip()\n\ndef prefix_fn(string, pattern):\n    s = pattern + \"$\" + string\n    p = [0] * len(s)\n    k = 0\n    for i, c in enumerate(s[1:], 1):\n        while s[k] != c and k > 0:\n            k = p[k-1]\n        if s[k] == c:\n            k += 1\n        p[i] = k\n    return p[len(pattern)+1:]\n\nlast_occ = -1\nm = len(b)\ncount = 0\nfor i, c in enumerate(prefix_fn(a, b)):\n    if last_occ != -1:\n        last_occ += 1\n    if c == m and (last_occ >= m or last_occ == -1):\n        count += 1\n        last_occ = 0\n\nprint(count)\n", "n = input()\nm = input()\nprint(n.count(m))", "google = input()\napple = input()\nanswer = 0\nif (apple in google):\n    answer = google.count(apple)\nprint(answer)\n"]