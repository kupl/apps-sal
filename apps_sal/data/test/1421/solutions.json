["import sys\ninput = sys.stdin.readline\n\noo = 10**20\nn = int(input())\na = list(map(int, input().split()))\nadj = [[] for _ in range(n)]\nfor _ in range(n-1):\n    u, v = [int(i) - 1 for i in input().split()]\n    adj[u].append(v)\n    adj[v].append(u)\nsm = [0] * n\nmx = [-oo] * n\nbest = [-oo] * n\n\ndef dfs(start):\n    stack = [(start, -1)]\n    visit = [False] * n\n    while stack:\n        u, p = stack[-1]\n        if not visit[u]:\n            for v in adj[u]:\n                if v != p:\n                    stack.append((v, u))\n            visit[u] = True\n        else:\n            x = [-oo] * 3\n            for v in adj[u]:\n                if v != p:\n                    sm[u] += sm[v]\n                    mx[u] = max(mx[u], mx[v])\n                    best[u] = max(best[u], best[v])\n                    x[0] = mx[v]\n                    x.sort()\n            sm[u] += a[u]\n            mx[u] = max(mx[u], sm[u])\n            if x[1] > -oo and x[2] > -oo:\n                cur = x[1] + x[2]\n                best[u] = max(best[u], cur)\n            stack.pop()\n\ndfs(0)\nans = max(best)\nif ans <= -oo:\n    print('Impossible')\nelse:\n    print(ans)", "import sys\ninput = sys.stdin.readline\n \noo = 10**20\nn = int(input())\na = list(map(int, input().split()))\nadj = [[] for _ in range(n)]\nfor _ in range(n-1):\n    u, v = [int(i) - 1 for i in input().split()]\n    adj[u].append(v)\n    adj[v].append(u)\nsm = [0] * n\nmx = [-oo] * n\nbest = [-oo] * n\n\n \nstack = [(0, -1)]\nvisit = [False] * n\nwhile stack:\n    u, p = stack[-1]\n    if not visit[u]:\n        for v in adj[u]:\n            if v != p:\n                stack.append((v, u))\n        visit[u] = True\n    else:\n        x = [-oo] * 3\n        for v in adj[u]:\n            if v != p:\n                sm[u] += sm[v]\n                mx[u] = max(mx[u], mx[v])\n                best[u] = max(best[u], best[v])\n                x[0] = mx[v]\n                x.sort()\n        sm[u] += a[u]\n        mx[u] = max(mx[u], sm[u])\n        if x[1] > -oo and x[2] > -oo:\n            cur = x[1] + x[2]\n            best[u] = max(best[u], cur)\n        stack.pop()\n\nans = max(best)\nif ans <= -oo:\n    print('Impossible')\nelse:\n    print(ans)"]