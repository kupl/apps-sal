["class Solution:\n     def maximalRectangle(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         if not matrix or not matrix[0]:\n             return 0\n         n = len(matrix[0])\n         height = [0] * (n + 1)\n         ans = 0\n         for row in matrix:\n             for i in range(n):\n                 height[i] = height[i] + 1 if row[i] == '1' else 0\n             stack = [-1]\n             for i in range(n + 1):\n                 while height[i] < height[stack[-1]]:\n                     h = height[stack.pop()]\n                     w = i - 1 - stack[-1]\n                     ans = max(ans, h * w)\n                 stack.append(i)\n         return ans", "class Solution:\n     def maximalRectangle(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n         if not matrix:\n             return 0\n         m = len(matrix)\n         n = len(matrix[0])\n         ans = 0\n         heights = [0]*(n+1)\n \n         for i in range(m):\n             for j in range(n):\n                 heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n             stack = [-1]\n             for i in range(n + 1):\n                 while heights[i] < heights[stack[-1]]:\n                     h = heights[stack.pop()]\n                     w = i - stack[-1] - 1\n                     ans = max(ans, w*h)\n                 stack.append(i)\n         return ans\n                 \n", "class Solution:\n     \n     def __init__(self):\n         self.maxarea = 0\n         \n     def maximalRectangle(self, matrix):\n         \"\"\"\n         :type matrix: List[List[str]]\n         :rtype: int\n         \"\"\"\n          \n         if len(matrix) == 0 or len(matrix[0]) == 0:\n             return 0\n         \n         def maxrect(height):\n             height.append(0)\n             stack = [-1]\n             ans = 0\n             for i in range(len(height)):\n                 while height[i] < height[stack[-1]]:\n                     h = height[stack.pop()]\n                     w = i - stack[-1] - 1\n                     ans = max(ans, h * w)\n                 stack.append(i)\n             height.pop()\n             return ans\n \n \n             \n         \n         abs_max = 0\n         height = [0]*len(matrix[0])\n         for i in range(len(matrix)):\n             for j in range(len(matrix[0])):\n                 if matrix[i][j] == \"0\":\n                     height[j] = 0\n                 else:\n                     height[j] += 1\n             local_max = maxrect(height)\n             if local_max > abs_max:\n                 abs_max = local_max\n         \n         return abs_max\n         \n         \n                 \n         \n         \n"]