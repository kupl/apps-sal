["from collections import defaultdict\n\n\nn, m = list(map(int, input().split()))\n\nns = list(map(int, input().split()))\nms = list(map(int, input().split()))\nsumms = sum(ms)\n\ntarget = {\n    i: m\n    for i, m in enumerate(ms, 1)\n}\nremain = set(i for i, m in list(target.items()) if m != 0)\n\ncount = defaultdict(int)\n\na = 0\nb = 0\n\nwhile remain and b < n:\n    count[ns[b]] += 1\n    if ns[b] in remain and target[ns[b]] <= count[ns[b]]:\n        remain.remove(ns[b])\n    b += 1\n\nif remain:\n    print(-1)\nelse:\n    ans = b - summs\n    while b <= n:\n        if remain:\n            if b >= n:\n                break\n            count[ns[b]] += 1\n            if ns[b] in remain and target[ns[b]] <= count[ns[b]]:\n                remain.remove(ns[b])\n            b += 1\n        else:\n            count[ns[a]] -= 1\n            if target[ns[a]] > count[ns[a]]:\n                remain.add(ns[a])\n            else:\n                ans = min(ans, b - a - 1 - summs)\n            a += 1\n\n    print(ans)\n", "n, m = list(map(int, input().split()))\nc = list(map(int, input().split()))\nk = list(map(int, input().split()))\np = [0] * m\nc = [o - 1 for o in c]\ns = sum(k)\nok = k.count(0)\ni1 = 0\ni2 = 0\nwhile i2 < n and ok < m:\n    p[c[i2]] += 1\n    if p[c[i2]] == k[c[i2]]:\n        ok += 1\n    i2 += 1\nif ok != m:\n    print(-1)\n    return\nans = i2 - i1\nwhile i1 < n:\n    p[c[i1]] -= 1\n    while i2 < n and p[c[i1]] < k[c[i1]]:\n        p[c[i2]] += 1\n        i2 += 1\n    if p[c[i1]] >= k[c[i1]]:\n        ans = min(ans, i2 - i1 - 1)\n    elif i2 == n:\n        break\n    i1 += 1\nprint(ans - s)\n", "n, m = list(map(int, input().split()))\nc = list(map(int, input().split()))\nk = list(map(int, input().split()))\np = [0] * m\nc = [i -1 for i in c]\ns = sum(k)\ncnt = k.count(0)\nl = 0\nr = 0\nwhile r < n and cnt < m:\n    p[c[r]] += 1\n    if p[c[r]] == k[c[r]]:\n        cnt += 1\n    r += 1\nif cnt != m:\n    print(-1)\n    return\nans = r-l\nwhile l < n:\n    p[c[l]] -= 1\n    while r < n and p[c[l]] < k[c[l]]:\n        p[c[r]] += 1\n        r += 1\n    if p[c[l]] >= k[c[l]]:\n        ans = min(ans, r-l-1)\n    elif r == n:\n        break\n    l += 1\nprint(ans-s)\n", "n, m = map(int, input().split())\nc = list(map(int, input().split()))\nk = list(map(int, input().split()))\np = [0] * m\nc = [i -1 for i in c]\ns = sum(k)\ncnt = k.count(0)\nl = 0\nr = 0\nwhile r < n and cnt < m:\n    p[c[r]] += 1\n    if p[c[r]] == k[c[r]]:\n        cnt += 1\n    r += 1\nif cnt != m:\n    print(-1)\n    return\nans = r-l\nwhile l < n:\n    p[c[l]] -= 1\n    while r < n and p[c[l]] < k[c[l]]:\n        p[c[r]] += 1\n        r += 1\n    if p[c[l]] >= k[c[l]]:\n        ans = min(ans, r-l-1)\n    elif r == n:\n        break\n    l += 1\nprint(ans-s)", "import random, math\nfrom copy import deepcopy as dc\nfrom bisect import bisect_left, bisect_right\n\n\n\n# Function to call the actual solution\ndef solution(li, li1):\n\tfreq = {}\n\tfor i in range(len(li1)):\n\t\tif li1[i]:\n\t\t\tfreq[i+1] = li1[i]\n\t\n\tmaxi = len(li)\n\t# Exclusive ranges j - i \n\ti = 0\n\tj = 0\n\treq = dc(freq)\n\tcur_freq = [0]*(len(li1) + 1)\n\tflag = False\n\twhile i < len(li):\n\t\twhile len(req) and j < len(li):\n\t\t\tcur_freq[li[j]] += 1\n\t\t\tif li[j] in req:\n\t\t\t\treq[li[j]] -= 1\n\t\t\t\tif req[li[j]] <= 0:\n\t\t\t\t\tdel req[li[j]]\n\t\t\tj += 1\n\t\tif len(req):\n\t\t\tbreak\n\t\tflag = True\n\t\tmaxi = min(maxi, j - i)\n\t\tcur_freq[li[i]] -= 1\n\t\tif li[i] in freq and cur_freq[li[i]] < freq[li[i]]:\n\t\t\treq[li[i]] = req.get(li[i], 0) + 1\n\t\ti += 1\n\tif not flag:\n\t\treturn -1\n\treturn maxi - sum(li1)\n\n\n\n# Function to take input\ndef input_test():\n\t# for _ in range(int(input())):\n\t\t# n = int(input())\n\t\ta, b = list(map(int, input().strip().split(\" \")))\n\t\t# a, b, c = map(int, input().strip().split(\" \"))\n\t\tli = list(map(int, input().strip().split(\" \")))\n\t\tli1 = list(map(int, input().strip().split(\" \")))\n\t\tout = solution(li, li1)\n\t\tprint(out)\n\n# Function to check test my code\ndef test():\n\tpass\n\n\ninput_test()\n# test()\n", "n,m=list(map(int,input().split()))   \narr=list(map(int,input().split()))   \nmarr=list(map(int,input().split()))  \nf=[0]*(m+1)\ncnt,i=0,0\nvalid=sum(marr)   #m\nwhile(i<n):\n    f[arr[i]]+=1\n    if f[arr[i]]<=marr[arr[i]-1]:\n        cnt+=1\n    if cnt==valid:\n        break\n    i+=1\nif i==n:\n    print(-1)\nelse:\n    ans=(i+1)-valid\n    s,e=0,i\n    while(e<n):\n        while(f[arr[s]]>marr[arr[s]-1]):\n            f[arr[s]]-=1\n            s+=1\n        ans=min((e-s+1)-valid,ans)\n        e+=1\n        if e<n:\n            f[arr[e]]+=1\n    print(ans)"]