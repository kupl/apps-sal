["n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\ntemp = 0\nans = 0\n\nfor x in a:\n    if temp + x < k:\n        temp += x\n        ans += 1\n    else:\n        ans = 0\n\nprint(ans)", "'''\n1\u679a\u629c\u3044\u3066DP\u3092N\u679a\u306b\u3064\u3044\u3066\u3084\u308c\u3070\u826f\u3044, \u304c\u3053\u308c\u3067\u306f\u9593\u306b\u5408\u308f\u306a\u3044\n\u305d\u3053\u3067\u5fc5\u8981\u4e0d\u8981\u306e\u5883\u754c\u3092\u4e8c\u5206\u63a2\u7d22\u3067\u63a2\u3059\n\u3059\u308b\u3068O(N^2K)\u2192O(NKlogN)\u3068\u306a\u3063\u3066\u9593\u306b\u5408\u3046\n\n\u3082\u30461\u3064\u306e\u65b9\u6cd5\u306f\u5206\u304b\u3089\u306a\u3044\n'''\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10000000)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations\n    #from itertools import accumulate, product\n    from bisect import bisect_left,bisect_right\n    from math import floor, ceil\n    #from operator import itemgetter\n\n    #mod = 1000000007\n\n    N,K = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    a = a[:bisect_left(a, K)]\n    n = len(a)\n\n\n    import numpy as np\n    def dp(omit):\n        dp = np.zeros((n+1, K), dtype=np.bool)\n        dp[0,0] = 1\n        for i in range(n):\n            # \u307e\u3068\u3081\u3066\u9077\u79fb\n            dp[i+1] |= dp[i]\n            if i != omit and a[i] < K:\n                dp[i+1,a[i]:] |= dp[i,:K-a[i]]\n        # \u4eca\u56de\u306e\u5024A[omit]\u3092\u8db3\u3057\u3066K\u306b\u5230\u9054\u3067\u304d\u308b\u3088\u3046\u306a\u90e8\u5206\u548c\u304c\u3042\u308c\u3070\u3001\u3053\u308c\u306f\u5fc5\u8981\n        for j in range(max(0, K-a[omit]), K):\n            if dp[n,j]:\n                return True\n        # \u306a\u3051\u308c\u3070\u4e0d\u8981\n        return False\n\n\n    # def dp(num):\n    #     dp = [[0]*(K) for _ in range(n)]\n    #     dp[0][0] = 1\n    #     b = a[:num]+a[num+1:] #N-1\u500b\n    #     for i in range(n-1):\n    #         for j in range(K):\n    #             if b[i]<=j:\n    #                 dp[i+1][j] = dp[i][j-b[i]] or dp[i][j]\n    #             else:\n    #                 dp[i+1][j]=dp[i][j]\n    #     return any(dp[n-1][K-a[num]:])\n\n    left = 0\n    right = n-1\n    while left<=right:\n        mid = (left+right)//2\n        if dp(mid):\n            right = mid-1\n        else:\n            left = mid+1\n    print((right+1))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from itertools import accumulate\nn,k = list(map(int,input().split()))\na = list(map(int,input().split()))\na.sort()\nacc = list(accumulate(a))\n\ndef maxsum(ls,k):\n  l = len(ls)\n  if l==0:\n    return 0\n  dp = [0 for i in range(l+1)]\n  dp[0] = 1\n  for i in range(1,l+1):\n    dp[i] = (dp[i-1]|(dp[i-1]<<ls[i-1]))&((1<<k)-1)\n  for b in range(k-1,-1,-1):\n    if dp[l] & 1<<b:\n      return b\n\nfor i in range(n):\n  if a[i]>=k:\n    a = a[:i]\n    break\nn = len(a)\nif acc[n-1] < k:\n  print(n)\n  return\nsepa=[]\nfor i in range(n-1):\n  if acc[i]<a[i+1]:\n    sepa.append(i)\nm=len(sepa)\nif m==0:\n  print((0))\n  return\nlf = 0\nr = m-1\nwhile lf<r:\n  mid = (lf+r)//2\n  x=sepa[mid]\n  sumx = acc[x]\n  if maxsum(a[x+1:],k)+sumx >= k:\n    r = mid\n  else:\n    lf = mid+1\nif r==0:\n  t=sepa[0]\n  if maxsum(a[t+1:],k)+acc[t]>=k:\n    print((0))\n  else:\n    print((sepa[r]+1))\nelse:\n  print((sepa[r]+1))\n", "import numpy as np\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\ndp1 = np.zeros((N+1, K), dtype=bool)\ndp1[0][0] = 1\nfor i, a in enumerate(A, 1):\n    dp1[i, :] = dp1[i-1, :]\n    dp1[i, a:] += dp1[i-1, :-a]\ndp2 = np.zeros((N+1, K), dtype=bool)\ndp2[N][0] = 1\nfor i, a in zip(list(range(N-1, -1, -1)), A[::-1]):\n    dp2[i, :] = dp2[i+1, :]\n    dp2[i, a:] += dp2[i+1, :-a]\nans = 0\nfor a, d1, d2 in zip(A, dp1[:-1], dp2[1:]):\n    if a >= K:\n        continue\n    d2_ = np.zeros(K+a, dtype=np.int32)\n    d2_[a:] = d2\n    d2_cum = np.cumsum(d2_)\n    d2_diff = d2_cum[a:] - d2_cum[:-a]\n    d = d2_diff[::-1] * d1\n    if (d == 0).all():\n        ans += 1\nprint(ans)\n", "\nN, K = map(int, input().split())\na = list(map(int, input().split()))\n \na = sorted(a)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+a[i] < K :\n        t += a[i]\n    else :\n        ans = min(ans, i)\n \nprint(ans)", "# -*- coding: utf-8 -*-\n\nimport sys\nimport numpy as np\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\ndef bisearch_min(mn, mx, func):\n    \"\"\" \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6700\u5c0f\u5024\u3092\u898b\u3064\u3051\u308b\u4e8c\u5206\u63a2\u7d22 \"\"\"\n\n    ok = mx\n    ng = mn\n    while ng+1 < ok:\n        mid = (ok+ng) // 2\n        if func(mid):\n            # \u4e0b\u3092\u63a2\u3057\u306b\u884c\u304f\n            ok = mid\n        else:\n            # \u4e0a\u3092\u63a2\u3057\u306b\u884c\u304f\n            ng = mid\n    return ok\n\nN, K = MAP()\nA = LIST()\n\ndef check(omit):\n    # \u90e8\u5206\u548cDP\n    dp = np.zeros((N+1, K), dtype=np.bool)\n    dp[0,0] = 1\n    for i in range(N):\n        # \u307e\u3068\u3081\u3066\u9077\u79fb\n        dp[i+1] = np.logical_or(dp[i+1], dp[i])\n        if i != omit and A[i] < K:\n            dp[i+1,A[i]:] = np.logical_or(dp[i+1,A[i]:], dp[i,:K-A[i]])\n    # \u4eca\u56de\u306e\u5024A[omit]\u3092\u8db3\u3057\u3066K\u306b\u5230\u9054\u3067\u304d\u308b\u3088\u3046\u306a\u90e8\u5206\u548c\u304c\u3042\u308c\u3070\u3001\u3053\u308c\u306f\u5fc5\u8981\n    for j in range(max(0, K-A[omit]), K):\n        if dp[N,j]:\n            return True\n    # \u306a\u3051\u308c\u3070\u4e0d\u8981\n    return False\n\nA.sort()\nprint((bisearch_min(-1, N, check)))\n", "N,K=map(int,input().split())\nA=list(map(int,input().split()))\nA.sort(reverse=True)\nS=0\nans=0\nfor a in A:\n    if S+a<K:\n        S+=a\n        ans+=1\n    else:ans=0\nprint(ans)", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na = sorted(a)[::-1]\nans = n\nsm = 0\n\nfor i in range(n):\n    if sm + a[i] < k:\n        sm += a[i]\n    else:\n        ans = min(ans, n - i - 1)\n\nprint(ans)\n", "N, K = list(map(int, input().split(\" \")))\nA = sorted(list(map(int, input().split(\" \"))), reverse=True)\n\nresult = 0\nS = sum(A)\nn = len(A)\ns = 0\nif S<K:\n    result = n\nelif S == K:\n    result = 0\nelse:\n    for i in range(n):\n        if s+A[i] >= K:\n            result = n - i - 1\n        else:\n            s += A[i]\n\nprint(result)\n", "from collections import Counter\nN,K=list(map(int, input().split()))\na=list(map(int, input().split()))\na.sort()\na.reverse()\n\ntmp=[]\ntmp_sum=0\nb=[]\nfor i in a:\n\tif tmp_sum+i>=K:\n\t\tb.append(i)\t\n\telse:\n\t\ttmp.append(i)\n\t\ttmp_sum+=i\n\nif len(b)==0:\n\tprint(N)\nelse:\n\tmin_num=b[-1]\n\tc=Counter(a)\n\tprint(N-(a.index(min_num)+c[min_num]))\n", "def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10000000)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations\n    #from itertools import accumulate, product\n    from bisect import bisect_left,bisect_right\n    from math import floor, ceil\n    #from operator import itemgetter\n    import numpy as np\n    #mod = 1000000007\n\n    N,K = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n\n    def check(num):\n        dp = np.zeros((N+1, K), dtype=np.bool)\n        dp[0,0] = 1\n        for i in range(N):\n            # \u307e\u3068\u3081\u3066\u9077\u79fb\n            dp[i+1] |= dp[i]\n            #i\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u306f\u30b9\u30eb\u30fc\n            if i != num and a[i] < K:\n                dp[i+1,a[i]:] |= dp[i,:K-a[i]]\n        return any(dp[N, -a[num]:])\n\n    left = -1\n    right = N\n    while right - left > 1:\n        mid = (left+right)//2\n        if check(mid):\n            right = mid\n        else:\n            left = mid\n    print(right)\n\n    # \u9593\u306b\u5408\u308f\u306a\u3044\u3088\uff5e><\n    # def dp(num):\n    #     dp = [[0]*(K) for _ in range(n)]\n    #     dp[0][0] = 1\n    #     b = a[:num]+a[num+1:] #N-1\u500b\n    #     for i in range(n-1):\n    #         for j in range(K):\n    #             if b[i]<=j:\n    #                 dp[i+1][j] = dp[i][j-b[i]] or dp[i][j]\n    #             else:\n    #                 dp[i+1][j]=dp[i][j]\n    #     return any(dp[n-1][K-a[num]:])\n\ndef __starting_point():\n    main()\n__starting_point()", "# x < y\u3067y\u304c\u4e0d\u8981\u3068\u3059\u308b\u3002y\u629c\u304d\u3067[K-y,K)\u3092\u4f5c\u308c\u308b\u3002\n# \u3053\u306e\u3068\u304d\u306bx\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u306a\u3089\u3070\u3001x\u3082\u4e0d\u8981\u3002\n# x\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306a\u3089\u3070\u3001xy\u629c\u304d\u3067[K-x-y,K-x)\u3092\u4f5c\u308c\u308b\u3002\n# y\u3092\u52a0\u3048\u3066\u3001x\u629c\u304d\u3067[K-x,K)\u3092\u4f5c\u308c\u308b\u3002\n# \u3088\u3063\u3066y\u4e0d\u8981\u306a\u3089\u3070x\u4e0d\u8981\u3002\nimport numpy as np\nimport itertools\n\nN,K = map(int,input().split())\nA = [int(x) for x in input().split()]\nA.sort()\n\n# \u30ab\u30fc\u30c9\u306f[0,N)-indexed\n\ndef test(i):\n  # i\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u306f\u4e0d\u8981\n  dp = np.zeros(K,dtype=np.bool)\n  dp[0] = True\n  for a in itertools.chain(A[:i],A[i+1:]):\n    dp[a:] = np.logical_or(dp[a:],dp[:-a])\n  return not dp[-A[i]:].any()\n\nleft = -1 # \u4e0d\u8981\u3060\u3068\u5224\u660e\nright = N # \u4e0d\u8981\u3067\u306a\u3044\u3068\u5224\u660e\nwhile right - left > 1:\n  mid = (left+right)//2\n  if test(mid):\n    left = mid\n  else:\n    right = mid\n\n   \nanswer = left+1\nprint(answer)", "n,k=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\nimport numpy as np\ndef bisearch(t):\n  dp=np.full(k,False)\n  dp[0]=True\n  for i in range(n):\n    if i==t:continue\n    dp[a[i]:] = np.logical_or(dp[a[i]:], dp[:-a[i]]) \n  return any(dp[max(0,k-a[t]):])\nl,r=-1,n\nwhile r-l>1:\n  x=(l+r)//2\n  if bisearch(x):\n    r=x\n  else:\n    l=x\nprint(r)", "N, K = list(map( int, input().split()))\nA = list( map( int, input().split()))\nRA = sorted(A)\nRA = RA[::-1]\ns = 0\nans = 0\nfor i in range(N):\n    a = RA[i]\n    if s+a < K:\n        s += a\n        ans += 1\n    else:\n        ans = 0\nprint(ans)\n#\u53cd\u4f8b\n#5 12\n#6 4 3 2 1\n", "N,K = map(int,input().split())\na = sorted(map(int,input().split()))\n\ncount = N\ns = 0\nfor i in range(N-1,-1,-1):\n    if s + a[i] < K:\n        s += a[i]\n    else:\n        count = min(i,count)\nprint(count)", "N,K = map(int,input().split())\nA = sorted(list(map(int,input().split())))[::-1]\nS = 0\nans = 0\n\nfor a in A:\n  if S+a<K:\n    S+=a\n    ans+=1\n  else:\n    ans=0\n\nprint(ans)", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort(reverse = True)\n\nans = 0\ntmp = 0\nfor i in a:\n    if tmp + i < K:\n        ans += 1\n        tmp += i\n    else:\n        ans = 0 #\u30ea\u30bb\u30c3\u30c8\n\nprint (ans)", "def d_NoNeed(N, K, A):\n    a = sorted(A)\n    s = t = 0\n    # a\u306e\u3046\u3061\u8981\u7d20\u304c\u5927\u304d\u3044\u3082\u306e\u304b\u3089\u898b\u3066\u3044\u3063\u305f\u3068\u304d\u3001\n    # \u305d\u306e\u8981\u7d20\u3092\u5165\u308c\u3066\u3082\u7dcf\u548c\u304cK\u672a\u6e80\u306e\u3082\u306e\u3060\u3051\u52a0\u3048\u3066\u3044\u304f\n    # \u6700\u5f8c\u306b\u9023\u7d9a\u3057\u3066\u52a0\u3048\u305f\u8981\u7d20\u306e\u500b\u6570\u304c\u89e3\u3068\u306a\u308b\n    # (\u305d\u308c\u3089\u4ee5\u5916\u306e\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3067K\u4ee5\u4e0a\u306b\u3067\u304d\u3001\u304b\u3064\u3001\n    #  \u305d\u308c\u3089\u306e\u7dcf\u548c\u304cK\u672a\u6e80\u306b\u306a\u308b\u305f\u3081)\n    for i in range(N - 1, -1, -1):\n        if s + a[i] < K:\n            s += a[i]\n            t += 1\n        else:\n            t = 0\n    return t\n\nN,K = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nprint(d_NoNeed(N, K, A))", "N,K=map(int,input().split())\nA=[int(x) for x in input().split()]\nA.sort(reverse=True)\nsu=0\nans=0\nfor a in A:\n  if su+a < K:\n    su+=a\n    ans+=1\n  else:\n    ans=0\nprint(ans)", "N,K=list(map(int,input().split()))\nx=[int(p) for p in input().split()]\nx.sort()\nx = x[::-1]\npp=0\nans=0\nfor a in x:\n  if pp+a < K:\n    pp+=a\n    ans+=1\n  else:\n    ans=0\nprint(ans)\n", "n, k = [int(item) for item in input().split()]\na = sorted([int(item) for item in input().split()], reverse=True)\n\ncount = 0\nasum = 0\nfor item in a:\n    if asum + item < k:\n        asum += item\n        count += 1\n    else:\n        count = 0\n\nprint(count)", "def main():\n    import numpy as np\n    from bisect import bisect_left as bl\n    mod = 10**9+7\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = np.zeros(k, dtype=np.int32)\n    dp[0] = 1\n    m = bl(a, k)\n    for i in range(m):\n        aa = a[i]\n        dp[aa:] = (dp[aa:]+dp[:k-aa]) % mod\n\n    def b_search(ok, ng):\n        while abs(ok-ng) > 1:\n            mid = (ok+ng)//2\n            if value(mid):\n                ok = mid\n            else:\n                ng = mid\n        return ok\n\n    def value(i):\n        if i == -1:\n            return True\n        if i == m:\n            return False\n        aa = a[i]\n        dp2 = np.zeros(k, dtype=np.int32)\n        dp2[:aa] = dp[:aa]\n        for j in range(aa, k):\n            dp2[j] = (dp[j]-dp2[j-aa]) % mod\n        for j in range(k-aa, k):\n            if dp2[j] != 0:\n                return False\n        return True\n    print(b_search(-1, m)+1)\n\n\nmain()", "import random\nN, K = list(map(int, input().split()))\n*V, = list(map(int, input().split()))\nA = [0]*(N+1)\nB = [0]*(N+1)\nMASK = 2**(K+1)-1\nA[0] = 1\nfor i in range(N):\n    if K <= V[i]:\n        A[i+1] = A[i]\n    else:\n        A[i+1] = (A[i] | ((A[i] << V[i]) & MASK))\nB[N] = 1 << K\nfor i in range(N-1, -1, -1):\n    if K <= V[i]:\n        B[i] = B[i+1]\n    else:\n        B[i] = (B[i+1] | (B[i+1] >> V[i]))\n\nans = N\nfor i in range(N):\n    if K <= V[i]:\n        ans -= 1\n        continue\n    a = A[i]; b = B[i+1]\n    VM = 2**(V[i]+1)-2\n    l = 1\n    while a and b and l:\n        if a & 1 and b & VM:\n            ans -= 1\n            break\n        l = max((a & -a).bit_length()-1, (b & -b).bit_length()-V[i]-1)\n        a >>= l; b >>= l\nprint(ans)\n", "import sys\nfrom itertools import chain\n\nn, k, *a = map(int, sys.stdin.read().split())\n*a, = map(lambda x: min(k, x), a)\n# bits\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u306a\u3044\u3088\u3046\u306b\u524d\u51e6\u7406\na.sort()\n\nmask = (1 << k) - 1\ndef is_needed(i):\n    res = 1\n    for j in chain(a[:i], a[i+1:]):\n        res |= res << j\n        res &= mask\n    return res >> (k - a[i]) \n    # k - a[i]\u756a\u76ee\u4ee5\u964d\u306ebit\u304c1\u3064\u3067\u3082\u7acb\u3063\u3066\u3044\u308c\u3070\u3001a[i]\u306fneeded\n\ndef main():\n    lo = 0\n    hi = n - 1\n    while lo <= hi:\n        i = (lo + hi) // 2\n        if is_needed(i):\n            hi = i - 1\n        else:\n            lo = i + 1\n    \n    # hi: needed\u3068\u306a\u308b\u6700\u5c0f\u306eindex\n    return hi + 1\n    \ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "import numpy as np\nimport itertools\n\nN, K = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\n\ndef check(i): #i\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u308f\u306a\u304b\u3063\u305f\u6642\n    dp = np.zeros(K, dtype = np.bool) #\u914d\u5217\u306e\u521d\u671f\u5316 \n    #\u672c\u6765dp[x][y]\u306e\u914d\u5217\u3092\u7528\u610f\u3059\u3079\u304d\u3060\u3051\u3069\u3001\u4e00\u56de\u898b\u305f\u3089\u305d\u308c\u4ee5\u964d\u306f\u898b\u306a\u3044\u304b\u3089\u4e0a\u66f8\u304d\u3057\u3066\u3044\u304f\n    #x\u304c\u4f55\u3067\u3042\u308d\u3046\u304b\u3001\u4f5c\u308c\u308b\u304b\u3069\u3046\u304b\u3060\u3051\u304c\u5927\u5207\n    #dp: k\u304c\u4f5c\u308c\u308b\u304b\u3069\u3046\u304b\u3060\u3051\u3092\u8a18\u9332\u3057\u3066\u3044\u308b\n    dp[0] = True\n    # print (dp)\n    for j in itertools.chain(a[:i], a[i+1:]): #i\u756a\u76ee\u3092\u9664\u3044\u305f\u30ea\u30b9\u30c8\u3092\u8d70\u67fb\n        dp[j:] = np.logical_or(dp[j:], dp[:-j]) #\u3042\u308b\u6570j\u3092\u4f7f\u3046\u3068\u3001j\u4ee5\u964d\u306e\u3082\u306e(N-j)\u500b\u3068\u524d\u304b\u3089(N-j)\u500b\u306e\u3069\u3061\u3089\u304b\u304cTrue\u306e\u3082\u306e\u306f\u4f5c\u308c\u308b\n    return not dp[-a[i]:].any() #dp\u306eK-a[i]\u304b\u3089K\u306e\u7bc4\u56f2\u3069\u308c\u304b\u306bTrue\u304c\u3042\u308b\u3068False\u3092\u8fd4\u3059\n\n#\u8a73\u3057\u304f\u306f\u30ce\u30fc\u30c8\u53c2\u7167\n\n\n# a\u3092\u6607\u9806\u4e26\u3079\u305f\u5f8c\u306e\u8d70\u67fb\u3067\u3001\n# a_i\u304c\u5fc5\u8981\u306a\u6642\u3001a_(i+1)\u3082\u5fc5\u8981\n# -->\u4e8c\u5206\u63a2\u7d22\u306b\u3088\u308alog N\u3067\u63a2\u7d22\n\nla = -1\nua = N\nwhile ua - la > 1:\n    mid = (ua + la)//2\n    if check(mid):\n        la = mid\n    else:\n        ua = mid\n\nprint (ua)\n", "import numpy as np\n\ndef main():\n    def check(m):\n        DP = np.full(k+1, False)\n        DP[0] = True\n        for i in range(n):\n            if i == m:\n                continue\n            DP[a[i]:] = np.logical_or(DP[a[i]:], DP[:k+1-a[i]])\n        return any(DP[i] for i in range(k-a[m], k))\n\n    n,k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a = [i for i in a if i <k]\n    a.sort()\n    n = len(a)\n\n    left = -1\n    right = n\n\n    while right-left > 1:\n        mid = (right+left)//2\n        if check(mid):\n            right = mid\n        else:\n            left = mid\n\n    print(right)\n\nmain()", "N,K = map(int,input().split())\na = list(map(int,input().split()))\n\ndef f(N,K,a):\n    a.sort()\n    if a[0] >= K:\n        print(0)\n        return\n\n    a = [a[i] for i in range(N) if a[i]<K]\n    N = len(a)\n    ans = N\n    dp = [False]*K\n    dp[0] = True\n    Smax = 0\n    for i,a_ in reversed(list(enumerate(a))):\n        if Smax + a_ >= K:\n            ans = i\n        updated = True\n        for j in range(min(Smax,K-a_-1),-1,-1):\n            if dp[j]:\n                dp[j+a_]=True\n                if updated:\n                    Smax = max(Smax,j+a_)\n                    updated = False\n    return ans\n\nprint(f(N,K,a))", "import numpy as np\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) >= k:\n        a.sort()\n        L, R = -1, n-1\n        while L+1 < R:\n            P = (L+R+1)//2\n            if k <= a[P]:\n                R = P\n                continue\n            dp = np.zeros((k+1), dtype=np.bool)\n            dp[0] = True\n            for j in range(n):\n                if k <= a[j] or j == P:\n                    continue\n                dp[a[j]:] |= dp[:-a[j]]\n            f = False\n            for j in range(k-a[P], k):\n                f |= dp[j]\n            if f:\n                R = P\n            else:\n                L = P\n        print(R)\n    else:\n        print(n)\n\ndef __starting_point():\n    main()\n__starting_point()", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n \na = sorted(a)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+a[i] < K :\n        t += a[i]\n    else :\n        ans = min(ans, i)\n \nprint(ans)", "def main():\n\tN, K = map(int,input().split())\n\tA = list(map(int,input().split()))\n\tA.sort(reverse=True)\n\tno_need = 0\n\tsub = 0\n\tfor ai in A:\n\t\tif sub+ai < K:\n\t\t\tsub += ai\n\t\t\tno_need += 1\n\t\telse:\n\t\t\tno_need = 0\n\n\tprint(no_need)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput = sys.stdin.readline\nimport numpy as np\n\nn, k = map(int, input().split())\nA = list(map(int, input().split()))\ndp = np.zeros(k, dtype=np.int64)\ndp[0] = 1\nfor i in range(n):\n  a = A[i]\n  dp[a:] += dp.copy()[:-a]\n\nans = 0\nfor i in range(n):\n  a = A[i]\n  for j in range(max(0, k-a), k):\n    temp = dp[j::-a*2].sum()\n    if j >= a:\n      temp -= dp[j-a::-a*2].sum()\n    if temp:\n      break\n  else:\n    ans += 1\nprint(ans)", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n \na = sorted(a)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+a[i] < K :\n        t += a[i]\n    else :\n        ans = min(ans, i)\n \nprint(ans)", "N, K = map(int, input().split())\na=list(map(int, input().split()))\na.sort()\nans = N\nt = 0\nfor i in range(N-1, -1, -1) :\n  if t+a[i] < K:\n    t += a[i]\n  else:\n    ans = min(ans, i)\nprint(ans)", "N, K, *A = map(int, open(0).read().split())\n\nA.sort(reverse=True)\n\ncur = 0\nans = 0\nfor a in A:\n    if cur + a < K:\n        cur += a\n        ans += 1\n    else:\n        ans = 0\n\nprint(ans)", "#4 9\n#1 3 5 6\n#\u306e\u6642\u306b1\uff08\u6b63\u89e3\u306f0\uff09\u3068\u51fa\u529b\u3055\u308c\u308b\u304cAC\u306b\u306a\u308b\n\nN, K = list(map(int, input().split()))\na=list(map(int, input().split()))\na.sort()\nans = N\nt = 0\nfor i in range(N-1, -1, -1) :\n  if t+a[i] < K:\n    t += a[i]\n  else:\n    ans = min(ans, i)\nprint(ans)\n", "N, K = list(map(int, input().split()))\na = list(map(int, input().split()))\n \na = sorted(a)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+a[i] < K :\n        t += a[i]\n    else :\n        ans = min(ans, i)\n \nprint(ans)\n", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n\na = sorted(a)\nans = N\npsum = 0\nfor i in range(N-1, -1, -1) :\n    if psum+a[i] < K :\n        psum += a[i]\n    else :\n        ans = min(ans, i)\n\nprint(ans)", "N, K = list(map(int, input().split()))\na = list(map(int, input().split()))\n \na = sorted(a)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+a[i] < K :\n        t += a[i]\n    else :\n        ans = min(ans, i)\n \nprint(ans)\n", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef main():\n    def need(m):\n        s=1\n        for i in range(n):\n            if i==m:continue\n            s|=s<<aa[i]\n            s&=mask\n        #print(m,bin(s),bin(s>>k-aa[m]))\n        if s>>k-aa[m]:return True\n        return False\n\n    n,k=MI()\n    mask=(1<<k)-1\n    #print(bin(mask))\n    aa=LI()\n    aa.sort()\n    for i in range(n):\n        if aa[i]>k:\n            aa=aa[:i]\n            break\n    n=len(aa)\n    #print(aa)\n    l=-1\n    r=n\n    while l+1<r:\n        m=(l+r)//2\n        #while aa[m-1]==aa[m]:m-=1\n        #print(m,aa[m],need(m))\n        if need(m):r=m\n        else:l=m\n    print(l+1)\n\nmain()", "n, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse = True)\nans = n\ns, cnt = 0, 0\nfor i in a:\n    cnt += 1\n    if s + i < k:\n        s += i\n    else:\n        ans = n - cnt\nprint(ans)", "def d_no_need(N, K, A):\n    from bisect import bisect_left\n    # \u5024\u304cK\u4ee5\u4e0a\u306e\u8981\u7d20\u306f\u5358\u4f53\u3067\u4e0d\u5fc5\u8981\u3067\u306a\u3044\u8981\u7d20\u306b\u306a\u308c\u308b\n    A.sort()\n    a_sorted = A[:bisect_left(A, K)]\n    ans = len(a_sorted)  # a_sorted\u306e\u8981\u7d20\u306f\u4e0d\u5fc5\u8981\u3068\u306a\u308a\u3046\u308b\n\n    dp = [False] * K  # dp[k]:a_sorted\u306e\u4e00\u90e8\u306e\u548c\u3092\u53d6\u3063\u305f\u5024\u3092K\u306b\u3067\u304d\u308b\u304b\uff1f\n    dp[0] = True\n    current_max = 0\n    for idx, a in reversed(list(enumerate(a_sorted))):\n        if current_max + a >= K:\n            ans = idx\n\n        first_update = True\n        for j in range(min(current_max, K - a - 1), -1, -1):\n            if dp[j]:\n                dp[j + a] = True\n                if first_update:\n                    current_max = max(current_max, j + a)\n                    first_update = False\n    return ans\n\nN, K = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nprint(d_no_need(N, K, A))", "# Python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN,K = map(int,input().split())\nA = list(map(int,input().split()))\n\nA.sort()\n\nans = N\ntotal = 0\n\nfor i in range(N):\n    # \u5f8c\u308d(\u5927\u304d\u3044\u65b9) \u304b\u3089\u307f\u3066\u3044\u304f\n    a = A[N-1-i]\n    # \u5408\u8a08\u306b\u52a0\u3048\u3066\u3082 K \u3092\u8d85\u3048\u306a\u3044\u306a\u3089, \u6700\u5c0f\u306e\u90e8\u5206\u96c6\u5408\u306b\u5fc5\u8981\n    if total + a < K:\n        total += a\n    # \u305d\u3046\u3067\u306a\u3044\u5834\u5408, \u4e0d\u8981\n    else:\n        ans = min(ans, N-1-i)\n\nprint(ans)", "def d_no_need(N, K, A):\n    card = sorted(A, reverse=True)\n    s = 0  # \u30ab\u30fc\u30c9\u306e\u5024\u306e\u7dcf\u548c\n    ans = 0  # \u4e0d\u5fc5\u8981\u306a\u30ab\u30fc\u30c9\u306e\u679a\u6570\n    # A\u306e\u3046\u3061\u8981\u7d20\u304c\u5927\u304d\u3044\u3082\u306e\u304b\u3089\u898b\u3066\u3044\u3063\u305f\u3068\u304d\u3001\n    # \u305d\u306e\u8981\u7d20\u3092\u5165\u308c\u3066\u3082\u7dcf\u548c\u304cK\u672a\u6e80\u306e\u3082\u306e\u3060\u3051\u52a0\u3048\u3066\u3044\u304f\n    # \u6700\u5f8c\u306b\u9023\u7d9a\u3057\u3066\u52a0\u3048\u305f\u8981\u7d20\u306e\u500b\u6570\u304c\u89e3\u3068\u306a\u308b\n    # (\u305d\u308c\u3089\u4ee5\u5916\u306e\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3067K\u4ee5\u4e0a\u306b\u3067\u304d\u3001\u304b\u3064\u3001\n    #  \u305d\u308c\u3089\u306e\u7dcf\u548c\u304cK\u672a\u6e80\u306b\u306a\u308b\u305f\u3081)\n    for a in card:\n        if s + a < K:\n            s += a\n            ans += 1\n        else:\n            ans = 0\n    return ans\n\nN,K = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nprint(d_no_need(N, K, A))", "N, K = list(map(int, input().split()))\na = list(map(int, input().split()))\na = sorted(a)\nans = N\npsum = 0\nfor i in range(N-1, -1, -1) :\n    if psum+a[i] < K :\n        psum += a[i]\n    else :\n        ans = min(ans, i)\nprint(ans)\n\n'''\nnotes:\n1-->we include elems that are less than k  \n2-->if some x is necessary all elems grtr than x are also necessary \nBase for some x to be necessary:: \n     atleast one of the sums in range [sm-x,sm) must be possible \n     excluding x  \nnow at any instance after traversing x elements \nwe make sure that we have max posible sm <k \nnow \nif x+sm <k \n    we cannot include this anyway \notherwise\n    we can make a set with {sm,x} now x is important \nBOOYAH (:\n'''\n", "N, K = map(int, input().split())\nA = [int(x) for x in input().split()]\nA.sort()\ncards = 0\ntail = N\nneeds = N\nwhile tail:\n  for i in range(tail):\n    if A[i] + cards >= K:\n      cards += A[i - 1]\n      tail = i - 1\n      needs = i\n      break\n  else:\n    cards += A[i]\n    tail = i\nprint(needs)", "import numpy as np\n\nN, K = list(map(int, input().split()))\nA = tuple(map(int, input().split()))\n\ndp_left = np.zeros((N + 1, K), dtype=bool)\ndp_right = np.zeros((N + 1, K), dtype=bool)\ndp_left[0, 0] = 1\ndp_right[N, 0] = 1\n\nfor i in range(N):\n    dp_left[i + 1] = dp_left[i]\n    dp_right[N - i - 1] = dp_right[N - i]\n    if (a := A[i]) < K:\n        dp_left[i + 1, a:] |= dp_left[i, :-a]\n    if (a := A[N - i - 1]) < K:\n        dp_right[N - i - 1, a:] |= dp_right[N - i, :-a]\n\nans = 0\nfor i, a in enumerate(A):\n    left_true = np.nonzero(dp_left[i])[0]\n    right_true = np.nonzero(dp_right[i + 1])[0]\n\n    ss = np.searchsorted(right_true, K - left_true) - 1\n    if all(right_true[ss] + left_true + a < K):\n        ans += 1\n\nprint(ans)\n", "# -*- coding: utf-8 -*-\nimport bisect\nimport heapq\nimport math\nimport random\nimport sys\nfrom pprint import pprint\nfrom collections import Counter, defaultdict, deque\nimport queue\nfrom decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal\nfrom functools import lru_cache, reduce\nfrom itertools import combinations, combinations_with_replacement, product, permutations\nfrom operator import add, mul, sub\n\nsys.setrecursionlimit(10000)\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_int_n():\n    return list(map(int, input().split()))\n\n\ndef read_float():\n    return float(input())\n\n\ndef read_float_n():\n    return list(map(float, input().split()))\n\n\ndef read_str():\n    return input().strip()\n\n\ndef read_str_n():\n    return list(map(str, input().split()))\n\n\ndef error_print(*args):\n    print(*args, file=sys.stderr)\n\n\ndef mt(f):\n    import time\n\n    def wrap(*args, **kwargs):\n        s = time.time()\n        ret = f(*args, **kwargs)\n        e = time.time()\n\n        error_print(e - s, 'sec')\n        return ret\n\n    return wrap\n\n\n@mt\ndef slv(N, K, A):\n    A.sort()\n\n    s = 0\n    ans = N\n    for i in range(N-1, -1, -1):\n        if s + A[i] < K:\n            s += A[i]\n        else:\n            ans = min(ans, i)\n    return ans\n\n\ndef main():\n    N, K = read_int_n()\n    A = read_int_n()\n    print(slv(N, K, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import bisect\nimport heapq\nimport itertools\nimport math\nimport os\nimport re\nimport string\nimport sys\nfrom collections import Counter, deque, defaultdict\nfrom decimal import Decimal\nfrom fractions import gcd\nfrom functools import lru_cache, reduce\nfrom operator import itemgetter\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\n\nN, K = list(map(int, sys.stdin.readline().split()))\nA = list(map(int, sys.stdin.readline().split()))\n\n\ndef bisect_left_callable(fn, x, lo, hi):\n    \"\"\"\n    (memo) \u3044\u3063\u3071\u3044\u547c\u3076\u306a\u3089 np.searchsorted \u306e\u307b\u3046\u304c\u30d9\u30af\u30c8\u30eb\u5316\u3055\u308c\u3066\u3066\u306f\u3084\u305d\u3046\n    lo \u304b\u3089 hi-1 \u306e\u3046\u3061\u3001fn \u306e\u7d50\u679c\u304c x \u4ee5\u4e0a\u3068\u306a\u308b\u3001\u6700\u3082\u5de6\u306e\u5024\n    bisect.bisect_left \u3068\u540c\u3058\n    https://docs.python.org/ja/3/library/bisect.html\n    :param callable fn:\n    :param x:\n    :param int lo: \u6700\u5c0f\u5024\n    :param int hi: \u6700\u5927\u5024 + 1\n    :return: lo <= ret <= hi\n    \"\"\"\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if fn(mid) < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n\n\ndef is_necessary(ai):\n    # A[ai] \u304c\u5fc5\u8981\u304b\u3069\u3046\u304b\n    # A[ai] \u3092\u4f7f\u308f\u305a\u306b K-A[ai] \u4ee5\u4e0a K \u672a\u6e80\u3092\u4f5c\u308c\u308b\u304b\n\n    # dp[j]: j \u3092\u4f5c\u308c\u308b\n    dp = np.zeros(K, dtype=bool)\n    dp[0] = 1\n    for i, a in enumerate(A):\n        if i == ai:\n            continue\n        dp[a:] = dp[a:] | dp[:-a]\n    return any(dp[K - A[ai]:])\n\n\nA.sort()\nunnecessary = bisect_left_callable(is_necessary, 1, lo=0, hi=N)\nprint(unnecessary)\n", "\nN, K = map(int, input().split())\na = list(map(int, input().split()))\n \na = sorted(a)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+a[i] < K :\n        t += a[i]\n    else :\n        ans = min(ans, i)\n \nprint(ans)", "N, K = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na = sorted(a)\nans = N\npsum = 0\nfor i in range(N-1, -1, -1) :\n    if psum+a[i] < K :\n        psum += a[i]\n    else :\n        ans = min(ans, i)\n\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort(reverse = True)\n\nsubtotal = 0\nneed = 0\nfor i in range(N):\n    if subtotal + a[i] < K:\n        subtotal += a[i]\n    else:\n        need = i+1\nprint(N - need)", "import sys\n\n# sys.stdin = open('d1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_str():\n    return input()\n\n\ndef solve(n, k, a):\n    [x for x in a if x < k]\n    n = len(a)\n    a.sort()\n    s = 0\n    lowest = None\n    for i in range(n - 1, -1, -1):\n        if k - a[i] <= s:\n            # a[i] is not unnecessary\n            lowest = i\n        else:\n            # maybe a[i] is unnecessary\n            s += a[i]\n    if lowest is None:\n        return n\n    return lowest\n\nn, k = read_int_list()\na = read_int_list()\nres = solve(n, k, a)\nprint(res)\n", "import sys\nfrom itertools import chain\n\nn, k, *a = map(int, sys.stdin.read().split())\n*a, = map(lambda x: min(k, x), a)\n# bits\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u306a\u3044\u3088\u3046\u306b\u524d\u51e6\u7406\na.sort()\n\nmask = (1 << k) - 1\ndef is_needed(i):\n    res = 1\n    for j in chain(a[:i], a[i+1:]):\n        res |= res << j\n        res &= mask\n    return res >> (k - a[i]) \n\ndef main():\n    # needed\u3068\u306a\u308bindex\u306e\u6700\u5c0f\u3092\u6c42\u3081\u308b\n    lo = 0 # \u53ef\u80fd\u6700\u5c0f\n    hi = n # \u53ef\u80fd\u6700\u5927 + 1\n    while lo != hi:\n        i = (lo + hi) // 2\n        if is_needed(i):\n            hi = i\n        else:\n            lo = i + 1\n\n    return hi\n    \ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "n, k = map(int, input().split())\na = sorted(map(int, input().split()), reverse=True)\ns = 0 #sum a which may not be necessary\nneed = 0\nfor i in range(n):\n    if s + a[i] < k:\n        s += a[i]\n    else:\n        need = i+1\nprint(n - need)", "import numpy as np\nimport itertools\n\nN, K = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\n\ndef check(i): #i\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u3092\u4f7f\u308f\u306a\u304b\u3063\u305f\u6642\n    dp = np.zeros(K, dtype = np.bool)\n    #dp[k]\u306fk\u304c\u4f5c\u308c\u308b\u6642True\n    #\u4fdd\u6301\u3059\u308b\u60c5\u5831\u306fTrue/False\u306e\u307f\u3067\u826f\u3044\u306e\u30671\u6b21\u5143DP\u3092\u4e0a\u66f8\u304d\u3057\u3066\u3044\u304f(1\u56de\u3067\u307e\u3068\u3081\u3066)\n    dp[0] = True\n    for j in itertools.chain(a[:i], a[i+1:]): #i\u756a\u76ee\u306e\u7121\u3044\u30ab\u30fc\u30c9\u30bb\u30c3\u30c8\n        dp[j:] = np.logical_or(dp[j:], dp[:-j]) #\u3042\u308b\u6570j\u3092\u4f7f\u3046\u3068\u3001j\u4ee5\u964d\u306e\u3082\u306e(N-j)\u500b\u3068\u524d\u304b\u3089(N-j)\u500b\u306e\u3069\u3061\u3089\u304b\u304cTrue\u306e\u3082\u306e\u306f\u4f5c\u308c\u308b\n    return any(dp[K-a[i]:]) #K-a[i]~K-1\u306e\u3046\u3061\u3069\u308c\u304b\u4f5c\u308c\u308b\u306a\u3089a[i]\u306f\u5fc5\u8981=True\n\nleft = -1\nright = N\nwhile right - left > 1:\n    mid = (right + left)//2\n    if check(mid):\n        right = mid\n    else:\n        left = mid\n\nprint(right)\n", "# -*- coding: utf-8 -*-\n\nimport sys\nimport numpy as np\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\ndef bisearch_min(mn, mx, func):\n    \"\"\" \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6700\u5c0f\u5024\u3092\u898b\u3064\u3051\u308b\u4e8c\u5206\u63a2\u7d22 \"\"\"\n\n    ok = mx\n    ng = mn\n    while ng+1 < ok:\n        mid = (ok+ng) // 2\n        if func(mid):\n            # \u4e0b\u3092\u63a2\u3057\u306b\u884c\u304f\n            ok = mid\n        else:\n            # \u4e0a\u3092\u63a2\u3057\u306b\u884c\u304f\n            ng = mid\n    return ok\n\nN, K = MAP()\nA = LIST()\n\ndef check(omit):\n    # \u90e8\u5206\u548cDP\n    dp = np.zeros(K, dtype=np.bool)\n    prev = np.zeros(K, dtype=np.bool)\n    dp[0] = prev[0] = 1\n    for i in range(N):\n        # \u307e\u3068\u3081\u3066\u9077\u79fb\n        if i != omit and A[i] < K:\n            prev[A[i]:] |= dp[:K-A[i]]\n        dp = prev.copy()\n    # \u4eca\u56de\u306e\u5024A[omit]\u3092\u8db3\u3057\u3066K\u306b\u5230\u9054\u3067\u304d\u308b\u3088\u3046\u306a\u90e8\u5206\u548c\u304c\u3042\u308c\u3070\u3001\u3053\u308c\u306f\u5fc5\u8981\n    for j in range(max(0, K-A[omit]), K):\n        if dp[j]:\n            return True\n    # \u306a\u3051\u308c\u3070\u4e0d\u8981\n    return False\n\nA.sort()\nprint((bisearch_min(-1, N, check)))\n", "n,k = map(int,input().split())\n*l, = list(map(int,input().split()))\nl.sort(reverse=True)\nm = 0\nans = 0\nfor i in l:\n  if m+i < k:\n    m += i\n    ans += 1\n  else:\n    ans = 0\nprint(ans)", "import sys\n\ndef biser(lst,func):\n    n=len(lst)\n    nh=n//2\n    if n==1:\n        if func(lst[0]):\n            return lst[0]\n        else:\n            return -1\n    if func(lst[nh]):\n        return biser(lst[nh:],func)\n    else:\n        return biser(lst[:nh],func)\n\ndef mkns(a,s,m):\n    if a==0:\n        return s\n    else:\n        return (((s+1)<<a)|s) & m\n\ndef main():\n    N,K=list(map(int,sys.stdin.readline().strip().split()))\n    a=list(map(int,sys.stdin.readline().strip().split()))\n    a.sort()\n    ss=[0]*(N+1)\n    pm=(1<<K)-1\n    mask=lambda c:(1<<K)-(1<<c)\n    nn=0\n    def isunnec(i):\n        if a[i]>=K:\n            return False\n        for j in range(i+1,N):\n            if a[j]>=K:\n                break\n            ss[i]=(((ss[i]+1)<<a[j])|ss[i]) & pm\n        if ss[i]&mask(K-a[i])==0:\n            return True\n        return False\n    \n    for i in range(N):\n        if a[i]>=K:\n            break\n        ss[i+1]=(((ss[i]+1)<<a[i])|ss[i]) & pm\n    nn=biser(list(range(N)),isunnec)+1\n    print(nn)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n \na = sorted(a)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+a[i] < K :\n        t += a[i]\n    else :\n        ans = min(ans, i)\n \nprint(ans)", "N, K = map( int, input().split())\nA = list( map( int, input().split()))\nRA = sorted(A)\nRA = RA[::-1]\ns = 0\nans = 0\nfor i in range(N):\n    a = RA[i]\n    if s+a < K:\n        s += a\n        ans += 1\n    else:\n        ans = 0\nprint(ans)", "def d_no_need(N, K, A):\n    card = sorted(A, reverse=True)\n    s = 0\n    ans = 0\n    for a in card:\n        if s + a < K:\n            s += a\n            ans += 1\n        else:\n            ans = 0\n    return ans\n\nN,K = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nprint((d_no_need(N, K, A)))\n", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n \na = sorted(a)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+a[i] < K :\n        t += a[i]\n    else :\n        ans = min(ans, i)\n \nprint(ans)", "import sys\nN,K=map(int, input().split())\na=list(map(int, input().split()))\nsum=0\nfor i in range(0,N):\n  sum+=a[i]\nif sum<K:#\u5168\u90e8\u4e0d\u5fc5\u8981\n  print(N)\n  return\nif sum==K:#\u5168\u90e8\u5fc5\u8981\n  print(0)\n  return\na.sort()\na.reverse()\n \n#K\u672a\u6e80\u306e\u6700\u5927\u306e\u6570\u5b57\u306e\u30e9\u30d9\u30eb\u306f\u3069\u3053\uff1f\nl=N\nfor i in range(N-1,-1,-1):\n  if a[i]<K:\n    l=i\n  else:\n    break\n \nif l==N:\n  print(0)\n  return\n \ncount=N\n#l\u307e\u3067\u306e\u8981\u7d20\u304c\u5fc5\u8981\u304b\u4e0d\u8981\u304b\u30c1\u30a7\u30c3\u30af(\u4f7f\u3044\u307e\u308f\u3057\u53ef\u80fd)\nsum=0\nl_list=[]\nfor j in range(l,N):\n  if sum+a[j]<K:\n    sum+=a[j]\n    l_list.append(a[j])\nfor i in range(0,l):  \n  if sum+a[i]>=K:#\u5fc5\u8981\u3063\u3066\u3053\u3068\u3060\n    count-=1\n#l\u304b\u3089\u306e\u8981\u7d20\u306f\u81ea\u5206\u306e\u3053\u3068\u3092\u629c\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\nfor i in range(l,N):\n  if a[i] in l_list:\n    sum=0\n    b=a[:]\n    C=b.pop(i)\n    for j in range(l-1,N-1):\n      if sum+b[j]<K:\n        sum+=b[j]\n    if sum+C>=K:#\u5fc5\u8981\u3063\u3066\u3053\u3068\u3060\n      count-=1\n  else:\n    count-=1\nprint(count)", "N,K = map(int,input().split())\na = sorted(map(int,input().split()))\n\ncount = N\ns = 0\nfor i in range(N-1,-1,-1):\n    if s + a[i] < K:\n        s += a[i]\n    else:\n        count = i\nprint(count)", "def d_no_need(N, K, A):\n    from bisect import bisect_left\n    # \u5024\u304cK\u4ee5\u4e0a\u306e\u8981\u7d20\u306f\u5358\u4f53\u3067\u4e0d\u5fc5\u8981\u3067\u306a\u3044\u8981\u7d20\u306b\u306a\u308c\u308b\n    A.sort()\n    a_sorted = A[:bisect_left(A, K)]\n    ans = len(a_sorted)  # a_sorted\u306e\u8981\u7d20\u306f\u4e0d\u5fc5\u8981\u3068\u306a\u308a\u3046\u308b\n\n    dp = [False] * K  # dp[k]:a_sorted\u306e\u4e00\u90e8\u306e\u548c\u3092\u53d6\u3063\u305f\u5024\u3092K\u306b\u3067\u304d\u308b\u304b\uff1f\n    dp[0] = True\n    current_max = 0\n    for idx, a in reversed(list(enumerate(a_sorted))):\n        if current_max + a >= K:\n            ans = idx  # \u3053\u308c\u3092\u6e80\u305f\u3055\u306a\u3044a\u306f\u4e0d\u5fc5\u8981\n\n        # current_max\u306f\u30eb\u30fc\u30d7\u306e\u4e2d\u30671\u56de\u3060\u3051\u66f4\u65b0\u3059\u308b\u3002\n        # j\u3092\u5909\u5316\u3055\u305b\u308b\u305f\u3073\u306b\u4ee3\u5165\u3059\u308b\u3068\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\n        updated = True\n        for j in range(min(current_max, K - a - 1), -1, -1):\n            if dp[j]:\n                dp[j + a] = True  # \u548c\u3092j\u306b\u3067\u304d\u3066\u3044\u308b\u306a\u3089\u3001j+a\u306b\u3082\u3067\u304d\u308b\n                if updated:\n                    current_max = max(current_max, j + a)\n                    updated = False\n    return ans\n\nN, K = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nprint((d_no_need(N, K, A)))\n# https://beta.atcoder.jp/contests/arc070/submissions/2980516 \u53c2\u8003\n# https://medaka.5ch.net/test/read.cgi/prog/1534548265/ \u306e>>75\u306b\u3088\u308b\u3068\n# 8 100\n# 1 1 8 8 8 25 26 50\n# \u306b\u5bfe\u3057\u30662\u30845\u3092\u8fd4\u3059submission\u304c\u898b\u3089\u308c\u308b\u3068\u306e\u3053\u3068(\u5b9f\u969b\u306f0)\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\na.sort()\nimport numpy as np\ndef bisearch(t):\n  dp=np.full(k+1,False)\n  dp[0]=True\n  for i in range(n):\n    if i==t:continue\n    dp[a[i]:] = np.logical_or(dp[a[i]:], dp[:-a[i]]) \n  return any(dp[max(0,k-a[t]):k])\nl,r=-1,n\nwhile r-l>1:\n  x=(l+r)//2\n  if bisearch(x):\n    r=x\n  else:\n    l=x\nprint(r)\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\ndef card(N,K,A):\n    card = sorted(A,reverse=True)\n    s=0\n    ans=0\n    for i in card:\n        if s+i<K:\n            s+=i\n            ans+=1\n        else:\n            ans=0\n    return ans\nprint((card(n,k,a)))\n\n\n\n                \n        \n", "# -*- coding: utf-8 -*-\n\nimport sys\nimport numpy as np\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\ndef bisearch_min(mn, mx, func):\n    \"\"\" \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6700\u5c0f\u5024\u3092\u898b\u3064\u3051\u308b\u4e8c\u5206\u63a2\u7d22 \"\"\"\n\n    ok = mx\n    ng = mn\n    while ng+1 < ok:\n        mid = (ok+ng) // 2\n        if func(mid):\n            # \u4e0b\u3092\u63a2\u3057\u306b\u884c\u304f\n            ok = mid\n        else:\n            # \u4e0a\u3092\u63a2\u3057\u306b\u884c\u304f\n            ng = mid\n    return ok\n\nN, K = MAP()\nA = LIST()\n\ndef check(omit):\n    # \u90e8\u5206\u548cDP\n    dp = np.zeros(K, dtype=np.bool)\n    prev = np.zeros(K, dtype=np.bool)\n    dp[0] = prev[0] = 1\n    for i in range(N):\n        # \u307e\u3068\u3081\u3066\u9077\u79fb\n        if i != omit and A[i] < K:\n            prev[A[i]:] |= dp[:K-A[i]]\n        dp = prev.copy()\n    # \u4eca\u56de\u306e\u5024A[omit]\u3092\u8db3\u3057\u3066K\u306b\u5230\u9054\u3067\u304d\u308b\u3088\u3046\u306a\u90e8\u5206\u548c\u304c\u3042\u308c\u3070\u3001\u3053\u308c\u306f\u5fc5\u8981\n    for j in range(max(0, K-A[omit]), K):\n        if dp[j]:\n            return True\n    # \u306a\u3051\u308c\u3070\u4e0d\u8981\n    return False\n\nA.sort()\nprint((bisearch_min(-1, N, check)))\n", "n, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\n# print(l)\na = 0\nmaisu = 0\nend_maisu = 0\nans = 0\nfor i in range(n):\n    maisu += 1\n    a += l[i]\n    if a >= k:\n        a -= l[i]\n        ans += 1\n        end_maisu = maisu\n        maisu -= 1\nend_maisu -= 1\nif end_maisu < 0:\n    end_maisu = 0\n# print(end_maisu - 1)\nprint((n - ans - end_maisu))\n", "import sys\nfrom itertools import chain\n\nn, k, *a = map(int, sys.stdin.read().split())\n*a, = map(lambda x: min(k, x), a)\na.sort()\n\nmask = (1 << k) - 1\ndef is_needed(i):\n    if a[i] == k:\n        return True\n    res = 1\n    for j in chain(a[:i], a[i+1:]):\n        res |= (res << j)\n        res &= mask\n    return res >> (k - a[i]) \n\ndef main():\n    lo = -1\n    hi = n\n    while lo + 1 < hi:\n        i = (lo + hi) // 2\n        if is_needed(i):\n            hi = i\n        else:\n            lo = i\n    \n    return hi\n    \ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "n,k = (int(i) for i in input().split())\na = [int(i) for i in input().split()]\na,num,ans = sorted(a),0,n\nfor i in range(n-1,-1,-1):\n\tif num+a[i]<k: num+=a[i]\n\telse: ans = i\nprint(ans)", "n,k,*a=map(int,open(0).read().split())\ns=r=0\nfor x in sorted(a)[::-1]:\n\tif s+x<k:\n\t\ts+=x\n\t\tr+=1\n\telse:\n\t\tr=0\nprint(r)\n\n\"\"\"\n\u03a3_[i=m,n]>k\u306e\u3068\u304da(m)\u4ee5\u964d\u306f\u51e1\u3066\u5fc5\u8981\n(\u2235 a(i)\u304c\u5fc5\u8981->a(i+1)\u304c\u5fc5\u8981)\nk-=\u03a3_[i=m+1,n]\u3068\u3057\u3066\u64cd\u4f5c\u3092\u7d9a\u3051\u308b\n\u03a3_[i=1,r]<k\u3068\u306a\u3063\u305f\u3068\u304da(r)\u307e\u3067\u304c\u4e0d\u5fc5\u8981\n\"\"\"", "import sys\n\ndef biser(lst,func):\n    n=len(lst)\n    nh=n//2\n    if n==1:\n        if func(lst[0]):\n            return lst[0]\n        else:\n            return -1\n    if func(lst[nh]):\n        return biser(lst[nh:],func)\n    else:\n        return biser(lst[:nh],func)\n\ndef mkns(a,s,m):\n    if a==0:\n        return s\n    else:\n        return (((s+1)<<a)|s) & m\n\ndef main():\n    N,K=list(map(int,sys.stdin.readline().strip().split()))\n    a=list(map(int,sys.stdin.readline().strip().split()))\n    a.sort()\n    ss=[0]*(N+1)\n    pm=(1<<K)-1\n    mask=lambda c:(1<<K)-(1<<c)\n    nn=0\n    def isunnec(i):\n        if a[i]>=K:\n            return False\n        for j in range(i+1,N):\n            if a[j]>=K:\n                break\n            ss[i]=(((ss[i]+1)<<a[j])|ss[i]) & pm\n        # print(bin(ss[i]), bin(mask(K-c)),ss[i]&mask(K-c))\n        if ss[i]&mask(K-a[i])==0:\n            return True\n        return False\n    \n    for i in range(N):\n        if a[i]>=K:\n            break\n        ss[i+1]=(((ss[i]+1)<<a[i])|ss[i]) & pm\n        #if isunnec(i):\n        #     nn+=1\n        #for j in range(i+1,N):\n        #    if a[j]>=K:\n        #        break\n        #    ss[i]=mkns(a[j],ss[i],pm)\n        ##print(bin(ss[i]), bin(mask(K-c)),ss[i]&mask(K-c))\n        #if ss[i]&mask(K-a[i])==0:\n        #    nn+=1\n    #m=len(list(filter(lambda x:x<K, a)))\n    nn=biser(list(range(N)),isunnec)+1\n    #print(list(map(bin,ss)))\n    print(nn)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# -*- coding: utf-8 -*-\n\nimport sys\nimport numpy as np\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\ndef bisearch_min(mn, mx, func):\n    \"\"\" \u6761\u4ef6\u3092\u6e80\u305f\u3059\u6700\u5c0f\u5024\u3092\u898b\u3064\u3051\u308b\u4e8c\u5206\u63a2\u7d22 \"\"\"\n\n    ok = mx\n    ng = mn\n    while ng+1 < ok:\n        mid = (ok+ng) // 2\n        if func(mid):\n            # \u4e0b\u3092\u63a2\u3057\u306b\u884c\u304f\n            ok = mid\n        else:\n            # \u4e0a\u3092\u63a2\u3057\u306b\u884c\u304f\n            ng = mid\n    return ok\n\nN, K = MAP()\nA = LIST()\n\ndef check(omit):\n    # \u90e8\u5206\u548cDP\n    dp = np.zeros((N+1, K), dtype=np.bool)\n    dp[0,0] = 1\n    for i in range(N):\n        # \u307e\u3068\u3081\u3066\u9077\u79fb\n        dp[i+1] |= dp[i]\n        if i != omit and A[i] < K:\n            dp[i+1,A[i]:] |= dp[i,:K-A[i]]\n    # \u4eca\u56de\u306e\u5024A[omit]\u3092\u8db3\u3057\u3066K\u306b\u5230\u9054\u3067\u304d\u308b\u3088\u3046\u306a\u90e8\u5206\u548c\u304c\u3042\u308c\u3070\u3001\u3053\u308c\u306f\u5fc5\u8981\n    for j in range(max(0, K-A[omit]), K):\n        if dp[N,j]:\n            return True\n    # \u306a\u3051\u308c\u3070\u4e0d\u8981\n    return False\n\nA.sort()\nprint((bisearch_min(-1, N, check)))\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na = sorted(a)\nsum_a = 0\nans = 0\nfor i in range(n-1, -1, -1):\n    if sum_a+a[i] < k:\n        sum_a += a[i]\n        ans += 1\n    else:\n        ans = 0\n    # print(ans)\nprint(ans)", "import numpy as np\n\n\ndef check(x):\n    dp = np.zeros(k, np.bool)\n    dp[0] = True\n    for e in a[:x] + a[x+1:]:\n        dp[e:] |= dp[:-e]\n\n    return dp[-a[x]:].any()\n\n\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na.sort()\n\nlb = -1\nub = n\nwhile ub - lb > 1:\n    m = (lb + ub) // 2\n    if check(m):\n        ub = m\n    else:\n        lb = m\n\nprint(ub)\n", "n,k,*a=map(int,open(0).read().split())\ns=r=0\nfor x in sorted(a)[::-1]:\n\tif s+x<k:s+=x;r+=1\n\telse:r=0\nprint(r)", "N, K = map(int, input().split())\nalpha = list(map(int, input().split()))\n\nalpha = sorted(alpha)\nans = N\nt = 0\n\nfor i in range(N-1, -1, -1) :\n    if t+alpha[i] < K :\n        t += alpha[i]\n    else :\n        ans = min(ans, i)\n\nprint(ans)", "import bisect\nfrom collections import deque\nN, K = map(int, input().split())\na = sorted(map(int, input().split()))\n\n# K\u4ee5\u4e0a\u306e\u30ab\u30fc\u30c9\u306f\u5358\u4f53\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\u3089\u8003\u3048\u306a\u3044\na_k = bisect.bisect_left(a, K, lo=0, hi=N)\nA = a[:a_k][::-1]\ntmp = 0\nN = result = N-(N-a_k)\n\nfor n, i in enumerate(A):\n    if tmp+i >= K:\n        result = N-(n+1)\n    else:\n        tmp += i\n\nprint(result)"]