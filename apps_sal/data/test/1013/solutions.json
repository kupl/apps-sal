["n, m = list(map(int, input().split()))\nA = [input().split() for i in range(n)]\nT = False\nfor i in range(n):\n    for j in range(m):\n        if A[i][j] == '1' and (i == 0 or j == 0 or i == n - 1 or j == m - 1):\n            T = True\nif T:\n    print(2)\nelse:\n    print(4)\n", "n, m = list(map(int, input().split()))\nA = [list(map(int, input().split())) for i in range(n)]\ncount = 4\nfor i in range(m):\n    if A[0][i] == 1 or A[-1][i] == 1:\n        count = 2\nfor i in range(n):\n    if A[i][0] == 1 or A[i][-1] == 1:\n        count = 2\nprint(count)\n", "n,m=list(map(int,input().split()))\nL=[]\nC=[]\nfor i in range(n):\n    L.append(list(map(int,input().split())))\ncase=False\nfor i in range(n):\n    if(L[i][0]==1 or L[i][m-1]==1):\n        case=True\nfor i in range(m):\n    if(L[0][i]==1 or L[n-1][i]==1):\n        case=True\nif(case):\n    print(2)\nelse:\n    print(4)\n", "n, m = list(map(int, input().split()))\na = []\ng = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 1:\n            g.append((i, j))\nl = len(g)\ntwo = False\nfor i in range(l):\n    if g[i][0] == 0 or g[i][1] == 0 or g[i][0] == (n - 1) or g[i][1] == (m - 1):\n        two = True\n        break\nif two:\n    print(2)\nelse:\n    print(4)\n", "n, m = list(map(int, input().split()))\n\ntable = []\nfor i in range(n):\n    rows = input().split()\n    rows_num = [int(x) for x in rows]\n    table.append(rows_num)\n\nisVal = False\nfor i in range(m):\n    if table[0][i] == 1 or table[n - 1][i] == 1:\n        isVal = True\n\nfor i in range(n):\n    if table[i][0] == 1 or table[i][m - 1] == 1:\n        isVal = True\n\nif isVal:\n    print(2)\nelse:\n    print(4)\n", "n, m = list(map(int,input().split()))\n\ntable = []\nfor i in range(n):\n    table.append(list(map(int, input().split())))\n\nhaveonvertical = False\nhaveonhorizont = False\n\nfor x in table:\n    if x[0]==1 or x[-1]==1:\n        haveonvertical = True\n\nfor y in table[0]:\n    if y == 1:\n        haveonhorizont = True\n\nfor y in table[-1]:\n    if y == 1:\n        haveonhorizont = True\n\nif haveonhorizont or haveonvertical:\n    print(2)\nelse:\n    print(4)\n", "n,m = map(int, input().split())\nk = 0\nfor i in range(n):\n    a = list(map (int, input().split()))\n    for j in range(m):\n        if a[j] == 1 and (j in [0, m-1] or i in [0, n-1]):\n            k=1\n           \nif k == 1:\n    print(2)\nelse:\n    print(4)", "n, m = [int(i) for i in input().split()]\ntop = [int(i) for i in input().split()]\nmid = [int(j) for i in range(1, n - 1) for j in input().split()]\nbot = [int(i) for i in input().split()]\n\nl = (n - 2) * m\nmid = mid[0 : l : m] + mid[m - 1 : l : m]\n\nprint(2) if 1 in top + mid + bot else print(4)\n", "n, m = list(map(int, input().split()))\nA = []\n\nfor i in range(n):\n    A.append(list(map(int, input().split())))\n\nfor i in range(n):\n    for j in range(m):\n        if A[i][j] == 1 and (i in [0, n - 1] or j in [0, m - 1]):\n            print(2)\n            return\nprint(4)\n", "n, m = [int(x) for x in input().split()]\nl = []\n\nfor i in range(n):\n    row = [int(x) for x in input().split()]\n    l.append( row )\n\nfound = False\nfor i in range(n):\n    for j in range(m):\n        if l[i][j]==1:\n            if i==0 or i==n-1 or j==0 or j==m-1:\n                found = True\n                print(\"2\")\n                break\n    if found:\n        break\n\nif not found:\n    print(\"4\")\n", "tableData = input().split(\" \")\nrows = int(tableData[0])\ncols = int(tableData[1])\ntable = []\nfor r in range(rows):\n\ttable.append(input().split(\" \"))\nfound = False\nfor i in range(rows):\n\tif table[i][0] == \"1\" or table[i][cols-1] == \"1\":\n\t\tfound = True\n\t\tbreak\nif not found:\n\tfor i in range(cols):\n\t\tif table[0][i] == \"1\" or table[rows-1][i] == \"1\":\n\t\t\tfound = True\n\t\t\tbreak\nif found:\n\tprint(\"2\")\nelse:\n\tprint(\"4\")\n", "n, m = map(int, input().split())\narr = []\nfor i in range(n):\n    arr.append(list(map(int, input().split())))\nif arr[0][0] == 1 or arr[0][m-1] == 1 or arr[n-1][0] == 1 or arr[n-1][m-1] == 1:\n    print(1)\nelse:\n    flag = 0\n    for i in range(n):\n        if arr[i][0] == 1:\n            flag = 1\n        if arr[i][m-1] == 1:\n            flag = 1\n    for i in range(m):\n        if arr[0][i] == 1:\n            flag = 1\n        if arr[n-1][i] == 1:\n            flag = 1\n    if flag == 1:\n        print(2)\n    else:\n        print(4)", "n, m = map(int, input().split())\nans = 4\nif '1' in input(): ans = 2\nelse:\n    for i in range(n - 2):\n        t = input()\n        if '1' == t[0] or '1' == t[-1]:\n            ans = 2\n            break\nif '1' in input(): ans = 2\nprint(ans)", "input_str = input()\nn, m = int(input_str.split()[0]), int(input_str.split()[1])\na = []\npoints_wall = []\npoints = 0\ntemp = list(map(int, input().split()))\na.append(temp)\npos = temp.index(1) if temp.count(1) else -1\nif pos!=-1:\n    points_wall.append([pos, 0])\nfor i in range(n-2):\n    temp = list(map(int, input().split()))\n    if temp[0]:\n        points_wall.append([0, i+1])\n    if temp[m-1]:\n        points_wall.append([m-1, i+1])    \n    points += temp[1:m-1].count(1)\n    a.append(temp)\ntemp = list(map(int, input().split()))\na.append(temp)\npos = temp.index(1) if temp.count(1) else -1\nif pos!=-1:\n    points_wall.append([pos, n-1])\n\ndef count(matr, x):\n    c = 0\n    for i in range(len(matr)):\n        c += matr[i].count(x)\n    return c\n    \n    \n# 1\nif len(points_wall):\n    print (2)\nelse:\n    if points:\n        print (4)", "def solve(a):\n\tcheck2 = [x + y for x, y in zip(a[0], a[-1])]\n\tif any(check2):\n\t\treturn 2\n\tcheckn = [sum(l) for l in zip(*a)]\n\tif any(check2) and any(checkn):\n\t\treturn 3\n\treturn 4\n\nn, m = [int(x) for x in input().split()]\na = []\nfor i in range(n):\n\ta.append([int(x) for x in input().split()])\nprint(min(solve(a), solve(list(zip(*a)))))\n", "def main():\n    n, m = map(int, input().split())\n    l = list(tuple(map(int, input().split())) for _ in range(n))\n    lt = list(tuple(zip(*l)))\n    print(4 - 2 * (any(l[0]) or any(l[-1]) or any(lt[0]) or any(lt[-1])))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "'''\nCreated on Jan 28, 2015\n\n@author: mohamed265\n'''\nt = input().split()\nn = int(t[0])\nm = int(t[1])\nslon = 9999\nfor i in range(n):\n    t = input().split()\n    for j in range(m):\n        if t[j] == '1':\n            if i == 0 or i == n - 1 or j == 0 or j == m - 1:\n                slon = 2\n            else:\n                slon = min(4, slon)\nprint(slon)", "\na = input().split()\nn = int(a[0])\nm = int(a[1])\ng = []\nfor i in range(n):\n    g.append(input().split())\n\nmine = 4\nfor i in range(1,n-1):\n    if g[i][0] == '1' or g[i][m-1] == '1':\n        mine = 2\nfor i in range(1,m-1):\n    if g[0][i] == '1' or g[n-1][i] == '1':\n        mine = 2\n\nprint(mine)", "n,m = list(map(int,input().split(\" \")))\ng = []\ngood = []\nfor i in range(n):\n    g.append(input().split(\" \"))\n    for j in range(m):\n        if g[i][j] == \"1\":\n            good.append((i,j))\n\nc = 4\n\nfor i in good:\n    if i[0] == 0 or i[1] == 0 or i[0] == n-1 or i[1] == m-1:\n        c = 2\n        \nprint(c)\n", "data = input().split()\n\nN, M = int(data[0]), int(data[1])\n\ntable = []\nfor i in range(N):\n    table.append(input().split())\n\nanswer = 0\n\n## for first row\nif any(e == '1' for e in table[0]):\n    answer = 2\n##  for last row\nelif any(e == '1' for e in table[-1]):\n    answer = 2\n## for first and  last column\nelse:\n    for i in range(N):\n        if table[i][0] == '1':\n            answer = 2\n        elif table[i][-1] == '1':\n            answer = 2\n\nif answer == 0:\n    print('4')\nelse:\n    print(answer)\n        \n", "n, m = list(map(int, input().split()));\ndata = [[0] * m] * n;\n\nfor i in range(0, n):\n    data[i] = list(map(int, input().split()));\n\nflag = 1;\nfor i in range(0, n):\n    if (data[i][0] == 1 or data[i][m - 1] == 1):\n        flag = 0;\nfor i in range(0, m):\n    if (data[0][i] == 1 or data[n - 1][i] == 1):\n        flag = 0;\n\nprint((2 + flag * 2));\n\n\n\n\n\n", "n, m = map(int, input().split())\nmatrix = [[] for i in range(n)]\nfor i in range(n):\n    matrix[i] = list(map(int, input().split()))\nflag = 0\n\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == 1:\n            if i == 0 or i == n - 1 or j == 0 or j == m - 1:\n                flag = 1\n\nif flag == 0:\n    print(4)\nelse:\n    print(2)", "n, m = [int(x) for x in input().split()]\narr = []\nfor i in range(n):\n    line = [int(x) for x in input().split()]\n    arr.append(line)\nfor i in range(n):\n    if arr[i][0] == 1 or arr[i][m-1] == 1:\n        print('2')\n        quit()\nfor j in range(m):\n    if arr[0][j] == 1 or arr[n-1][j] == 1:\n        print('2')\n        quit()\nprint('4')\n", "n, m = list(map(int, input().split()))\nmat = [list(map(int, input().split())) for _ in range(n)]\nfor i in range(1, m - 1):\n    if mat[0][i] is 1:\n        print(2)\n        return\nfor i in range(1, n - 1):\n    if mat[i][0] is 1:\n        print(2)\n        return\nfor i in range(1, n - 1):\n    if mat[i][m - 1] is 1:\n        print(2)\n        return\nfor i in range(1, m - 1):\n    if mat[n - 1][i] is 1:\n        print(2)\n        return\nprint(4)\n", "from sys import stdin, stdout\nn, m = map(int, stdin.readline().split())\nans = 4\nfor i in range(1, n + 1):\n    ind = 1\n    for v in list(map(int, stdin.readline().split())):\n        if v and (ind == 1 or ind == m or i == 1 or i == n):\n            ans = 2\n        ind += 1\nstdout.write(str(ans))"]