["import math\nx1, y1, x2, y2 = list(map(int, input().split(' ')[:4]))\nu_max, tau = list(map(int, input().split(' ')[:2]))\nvx, vy = list(map(int, input().split(' ')[:2]))\nwx, wy = list(map(int, input().split(' ')[:2]))\n\nA = (x2 - x1, y2 - y1)\nv = (-vx, -vy)\nw = (-wx, -wy)\n\nB = (A[0] + tau * v[0], A[1] + tau * v[1])\n\n\ndef solve_sqr_eq(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        return ((-b + math.sqrt(d)) / (2*a), (-b - math.sqrt(d)) / (2*a))\n    else:\n        return None\n\n\na = v[0]**2 + v[1]**2 - u_max**2\nb = 2 * A[0] * v[0] + 2 * A[1] * v[1]\nc = A[0]**2 + A[1]**2\nr = solve_sqr_eq(a, b, c)\n\nif r is not None:\n    t1, t2 = r\n    t_min = min(t1, t2)\n    t_max = max(t1, t2)\n    if 0 <= t_min <= tau:\n        print(t_min)\n        return\n    if 0 <= t_max <= tau:\n        print(t_max)\n        return\n\n\na = w[0]**2 + w[1]**2 - u_max**2\nb = 2 * B[0] * w[0] + 2 * B[1] * w[1] - u_max**2 * 2 * tau\nc = B[0]**2 + B[1]**2 - u_max**2 * tau**2\nr = solve_sqr_eq(a, b, c)\n\nif r is not None:\n    t1, t2 = r\n    t_min = min(t1, t2)\n    t_max = max(t1, t2)\n    if 0 <= t_min :\n        print(t_min + tau)\n        return\n    if 0 <= t_max:\n        print(t_max + tau)\n        return\n", "import sys\nimport math\nread = lambda: list(map(int, sys.stdin.readline().split()))\n\nx1, y1, x2, y2 = read()\nvmax, t1 = read()\nvx, vy = read()\nwx, wy = read()\n\n# Translate and scale\nx2, y2 = (x2-x1)/vmax, (y2-y1)/vmax\nvx, vy, wx, wy = vx/vmax, vy/vmax, wx/vmax, wy/vmax\n\nlo, up = 0, 10**9\nfor _ in range(100):\n   t = (lo + up)/2\n   x = x2 - min(t,t1)*vx - max(t-t1,0)*wx\n   y = y2 - min(t,t1)*vy - max(t-t1,0)*wy\n   if x**2 + y**2 <= t**2:\n      up = t\n   else: lo = t\n\nprint(up)\n\n", "x, y, a, b = map(int, input().split())\na -= x\nb -= y\nv, t = map(int, input().split())\nvx, vy = map(int, input().split())\nux, uy = map(int, input().split())\n\n\ndef ok(T):\n    U = max(0, T-t)\n    V = min(t, T)\n    X = a - U * ux - V * vx\n    Y = b - U * uy - V * vy\n    return X*X + Y*Y <= ((U+V)*v)**2\n\nl = 0\nr = 1e9\nwhile r-l > 1e-6:\n    m = (l+r)/2\n    if ok(m): r = m\n    else: l = m\nprint(r)", "def f(T):\n    t1 = min(t, T)\n    t2 = max(T - t, 0)\n    u = [v[0] * t1 + w[0] * t2, v[1] * t1 + w[1] * t2]\n    C = [A[0] + u[0], A[1] + u[1]]\n    dist = ((C[0] - B[0]) ** 2 + (C[1] - B[1]) ** 2) ** 0.5\n    dist2 = Vmax * T\n    return dist2 >= dist\n\nread = lambda: list(map(int, input().split()))\nA, B, v, w = [[0, 0] for i in range(4)]\nA[0], A[1], B[0], B[1] = read()\nVmax, t = read()\nv[0], v[1] = read()\nw[0], w[1] = read()\nL, R = 0, 1e12\nfor i in range(100):\n    M = (L + R) / 2\n    if f(M): R = M\n    else: L = M\nans = R\nprint(ans)\n", "scan=lambda:map(int,input().split())\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)", "f = lambda: list(map(int, input().split()))\n\nabs = lambda q: q[0] * q[0] + q[1] * q[1]\ndot = lambda: v[0] * d[0] + v[1] * d[1]\nget = lambda a, b, c: (b - (b * b - a * c) ** 0.5) / a\n\np = f()\nd = [p[k + 2] - p[k] for k in [0, 1]]\nv, t = f()\ns = v * v\n\nv = f()\ni = get(abs(v) - s, dot(), abs(d))\nd = [d[k] - t * v[k] for k in (0, 1)]\n\nv = f()\nj = get(abs(v) - s, dot() + t * s, abs(d) - t * t * s)\n\nprint(i if i < t else t + j)", "f = lambda: map(int, input().split())\na, b, c, d = f()\ns, t = f()\nvx, vy = f()\nux, uy = f()\ndef g(m):\n    vt = min(t, m)\n    ut = max(0, m - t)\n    x = c - a - ut * ux - vt * vx\n    y = d - b - ut * uy - vt * vy\n    return x * x + y * y > (m * s) ** 2\nl, r = 0, 1e9\nwhile r - l > 1e-6:\n    m = (l + r) / 2\n    if g(m): l = m\n    else: r = m\nprint(r)", "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "scan=lambda:list(map(int,input().split()))\nx1,y1,x2,y2=scan()\nvmx,t=scan()\nvx,vy=scan()\nwx,wy=scan()\nlb,ub,EPS=0,1e15,1e-8\nwhile ub-lb>EPS:\n\tmid=(lb+ub)/2\n\txx,yy=(vx*mid,vy*mid) if t-mid>EPS else (vx*t+wx*(mid-t),vy*t+wy*(mid-t))\n\tif vmx*mid-((x2-x1-xx)**2+(y2-y1-yy)**2)**.5>EPS:ub=mid\n\telse:lb=mid\nprint(\"%.8f\"%ub)\n", "f = lambda: list(map(int, input().split()))\n\n\n\nabs = lambda q: q[0] * q[0] + q[1] * q[1]\n\ndot = lambda: v[0] * d[0] + v[1] * d[1]\n\nget = lambda a, b, c: (b - (b * b - a * c) ** 0.5) / a\n\n\n\np = f()\n\nd = [p[k + 2] - p[k] for k in [0, 1]]\n\nv, t = f()\n\ns = v * v\n\n\n\nv = f()\n\ni = get(abs(v) - s, dot(), abs(d))\n\nd = [d[k] - t * v[k] for k in (0, 1)]\n\n\n\nv = f()\n\nj = get(abs(v) - s, dot() + t * s, abs(d) - t * t * s)\n\n\n\nprint(i if i < t else t + j)\n\n\n\n# Made By Mostafa_Khaled\n"]