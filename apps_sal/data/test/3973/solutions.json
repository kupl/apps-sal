["n,m=map(int,input().split())\nA=[int(i)-1 for i in input().split()]\nds=[0]*m\nde=[[] for i in range(m)]\nh,dec=0,0\nfor i in range(n-1):\n  if A[i+1]-A[i]>0:\n    h+=A[i+1]-A[i]\n  else:\n    h+=A[i+1]+1\n    dec+=1\n  de[A[i+1]].append((i,(A[i+1]-A[i])%m))\nfor i in range(m):\n  for a in de[i]:\n    ds[(i-a[1]+1)%m]+=1\nans=float(\"inf\")\nfor i in range(m):\n  for a in de[i]:\n    h+=a[1]-1\n    dec-=1\n  h-=dec\n  ans=min(h,ans)\n  if i<=m-2:\n    dec+=ds[i+1]\n  \nprint(ans)", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\ns = [0] * (2 * m + 1)\ncnt = [0] * (m + 1)\nfor i in range(n - 1):\n    cnt[a[i + 1]] += (a[i + 1] + m - a[i]) % m - 1\nfor i in range(n - 1):\n    s[a[i] + 1] += 1\n    if a[i + 1] < a[i]:\n        s[a[i + 1] + m] -= 1\n    else:\n        s[a[i + 1]] -= 1\n\nfor i in range(2 * m):\n    s[i + 1] += s[i]\nfor i in range(1, m + 1):\n    s[i] = s[i] + s[i + m]\n\ntmp = 0\nfor i in range(n - 1):\n    if a[i + 1] < a[i]:\n        tmp += (a[i + 1] - 1) + 1\n    else:\n        tmp += (a[i + 1] - a[i])\nans = tmp\nfor i in range(2, m + 1):\n    tmp = tmp + cnt[i - 1] - s[i - 1]\n    ans = min(ans, tmp)\nprint(ans)\n", "n,m = map(int,input().split())\n\n\nA = [int(s) for s in input().split()]\n\nA = [(a-A[0])%m for a in A]\n\nend = A[-1]\n\ndist = [0]*m\ncycles = 0\nx = 0\n\nfor a,b in zip(A[:-1],A[1:]):\n  cycles += b < a\n  dist[b] += (b-a)%m\n  x += min((b-a)%m, 1 + b)\n\ndist[0] += 1\n\nres = x\n\nfor k in range(m):\n\n  x += dist[k]\n  x -= cycles + (k <= end)\n\n  res = min(res, x)\n\nprint(res)", "N,M = map(int,input().split())\nsrc = list(map(lambda x:int(x)-1,input().split()))\n\nimos = [0] * (2*M+1)\nends = [0] * (2*M+1)\nmax_press = 0\nfor a,b in zip(src,src[1:]):\n    if a > b:\n        b += M\n    if b-a > 1:\n        imos[a+2] += 1\n        imos[b+1] -= 1\n        ends[b+1] += b-a-1\n    max_press += b-a\n\nfor i in range(2*M):\n    imos[i+1] += imos[i]\n\npress = [max_press] * M\nd = 0\nfor i,(dec,inc) in enumerate(zip(imos, ends)):\n    d += inc - dec\n    press[i%M] += d\nprint(min(press))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef M(n): return ModInt(n)\ndef MI(): return M(I())\n\nclass ModInt():\n    def __init__(self, n):\n        self.n = n\n\n    def __add__(self, x):\n        x = ModInt.xn(x)\n        return ModInt((self.n+x) % mod)\n\n    def __sub__(self, x):\n        x = ModInt.xn(x)\n        return ModInt((self.n-x) % mod)\n\n    def __mul__(self, x):\n        x = ModInt.xn(x)\n        return ModInt((self.n*x) % mod)\n\n    def __truediv__(self, x):\n        x = ModInt.xn(x)\n        return ModInt(self.n * pow(x, mod-2, mod) % mod)\n\n    @classmethod\n    def xn(cls, x):\n        if isinstance(x, ModInt):\n            return x.n\n        return x\n\n    def __str__(self):\n        return str(self.n)\n\ndef main():\n    n,m = LI()\n    a = LI_()\n    b = [0] * (m*2)\n    c = [[] for _ in range(m*2)]\n    r = 0\n    for i in range(1,n):\n        d = a[i-1]\n        e = a[i]\n        if e < d:\n            e += m\n        b[d+2] += 1\n        c[e].append(e-d-1)\n        r += e-d\n\n    f = [0] * (m*2)\n    t = 0\n    tt = 0\n    for i in range(1,m*2):\n        t += b[i]\n        tt += t\n        f[i] += tt\n        for g in c[i]:\n            t -= 1\n            tt -= g\n    for i in range(m):\n        f[i] += f[i+m]\n\n    return r - max(f)\n\nprint((main()))\n\n\n\n", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef main():\n    n, m = MI()\n    # \u660e\u308b\u3055a\u306f0-indexed\u306b\u3059\u308b\n    aa = LI1()\n    # \u9802\u70b9x\u3092\u304a\u6c17\u306b\u5165\u308a\u306b\u3057\u305f\u3068\u304d\u306e\u30b9\u30b3\u30a2\u3092px+q\u3067\u8868\u3059\n    # imos\u6cd5\u3092\u4f7f\u3046\n    pp = [0] * (m + 1)\n    qq = [0] * (m + 1)\n\n    for a0, a1 in zip(aa, aa[1:]):\n        if a0 < a1:\n            pp[a0 + 1] += -1\n            pp[a1 + 1] += 1\n            qq[0] += a1 - a0\n            qq[a0 + 1] += a0 + 1\n            qq[a1 + 1] += -a0 - 1\n        else:\n            pp[0] += -1\n            pp[a1 + 1] += 1\n            pp[a0 + 1] += -1\n            qq[0] += a1 + 1\n            qq[a1 + 1] += m - a0 - 1\n            qq[a0 + 1] += a0 + 1\n    for i in range(1, m):\n        pp[i] += pp[i - 1]\n        qq[i] += qq[i - 1]\n    ans = min(pp[i] * i + qq[i] for i in range(m))\n    print(ans)\n\nmain()\n", "\n\"\"\"\nWriter: SPD_9X2\nhttps://atcoder.jp/contests/arc077/tasks/arc077_c\n\n\u304a\u6c17\u306b\u5165\u308a\u3092\u6c7a\u3081\u3066\u308b\u6642\u3001\u305d\u306e\u6570\u5b57\u3092\u8d85\u3048\u308b\u3088\u3046\u306a\u79fb\u52d5\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3060\u3051\u3001\u30dc\u30bf\u30f32\u304c\u6709\u52b9\u306b\u306a\u308b\u3002\nALL\u30dc\u30bf\u30f3\uff11\u306b\u6bd4\u3079\u3066\u3001\u4f55\u56de\u7bc0\u7d04\u3067\u304d\u308b\u304b\u3092imos\u6cd5\u3067\u8a08\u7b97\u3059\u308b\n\n\"\"\"\n\nn,m = map(int,input().split())\n\nlis = [0] * m\n\nstate = [0] * n\n\na = list(map(int,input().split()))\nfor i in range(n):\n    a[i] -= 1\n\nstart = [ [] for i in range(m) ]\nend = [ [] for i in range(m)]\n\nallsum = 0\nfor i in range(n-1):\n\n    allsum += (a[i+1]-a[i]) % m\n    if a[i+1] == (a[i]+1)%m:\n        continue\n\n    start[(a[i]+1) % m].append(i)\n    end[a[i+1] % m].append(i)\n\n    \n\n\nimosnum = 0\nplus = 0\n\n#print (start,end)\n\nfor i in range(2*m):\n\n    plus += imosnum\n\n    lis[i%m] += plus\n\n    for j in end[i%m]:\n        if state[j] == 1:\n            plus -= ((a[j+1]-(a[j]+1))%m)\n            state[j] = 2\n            imosnum -= 1\n\n    for j in start[i%m]:\n        if state[j] == 0:\n            imosnum += 1\n            state[j] = 1\n\n    #print (i+1,imosnum,plus)\n\nif (allsum - max(lis) < 0):\n    print (asxacscd)\n#print (lis)\nprint (allsum - max(lis))", "n,m,*A=list(map(int,open(0).read().split()))\nD=[0]*(2*m+2)\ncur = 0\nS = 0\nfor a,b in zip(A,A[1:]):\n    S += (b-a)%m\n    b += m*(b<a)\n    k = b-a\n    if k>1:\n        D[a+2] += 1\n        D[b+1] -= k\n        D[b+2] += k-1\nfor i in range(1,2*m+2):\n    D[i]+=D[i-1]\nfor i in range(1,2*m+2):\n    D[i]+=D[i-1]\nprint((S-max(D[a]+D[a+m]for a in A)))\n", "n, m = list(map(int, input().split()))\nAs = list(map(int, input().split()))\n\ndef solve(n, m, As):\n    weighted_sum = [0] * m\n    row_sum = [0] * m\n    col_sum = [0] * m\n    delta_sum = [0] * m\n    delta_sum0 = 0\n    delta_weighted = 0\n    sol = 0\n    As = [a - 1 for a in As]\n    for i in range(n - 1):\n        a = As[i]\n        b = As[i + 1]\n        sol += (b - a) % m\n        if a == b or (a + 1)%m == b: continue\n        row_sum[a] += 1\n        col_sum[b] += 1\n        weighted_sum[b] += (b - a - 1) % m\n        if (a > b and a != m - 1):\n            delta_sum0 += 1\n            delta_weighted += m - a - 1\n    delta_sum[0] = delta_sum0\n    for i in range(1, m):\n        delta_sum0 = delta_sum0 + row_sum[i - 2] - col_sum[i - 1]\n        delta_sum[i] = delta_sum0\n    record = delta_weighted\n    for x in range(1, m):\n        delta_weighted += delta_sum[x] - weighted_sum[x - 1]\n        record = max(record, delta_weighted)\n    return sol - record\n    \nprint((solve(n, m, As)))\n", "\"\"\"\na(x-p) + b (p <= x <= q) \u306e2\u968e\u968e\u5dee\u3092\u3068\u308a\u3001imos\u914d\u5217\u306b\u52a0\u3048\u308b\n\u5fa9\u5143\u306faccumulate\u3067\u3084\u308b\n\"\"\"\ndef kaisa2_of_tousa(a,b,p,q,imos,n):\n    if p > q: return\n    imos[p] += b\n    if p+1 < n: imos[p+1] += a-b\n    y = a*(q-p)+b\n    if q+1 < n: imos[q+1] += -y-a\n    if q+2 < n: imos[q+2] += y\n\n# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\nn,m,*a = list(map(int,read().split()))\n\nimos = [0]*(2*m+1)\nans = 0\nfor p,q in zip(a,a[1:]):\n    if p > q: q += m\n    ans += q-p\n    kaisa2_of_tousa(-1,0,p+1,q,imos,2*m+1)\n\nfrom itertools import accumulate as acc\nres = list(acc(acc(imos)))\n\n\nv = 0\nfor i in range(1,m+1):\n    w = res[i]+res[i+m]\n    v = min(v,w)\n    #print(w)\n\n#print(ans)\nprint((ans+v))    \n\n\n\n\n\n\n\n", "n,m = map(int,input().split())\na = list(map(int,input().split()))\n\nimos = [0] * (2*m+2)\nans = 0\nfor i in range(n-1):\n    a0 = a[i]-1\n    a1 = a[i+1]-1\n    dif = (a1-a0)%m\n    ans += dif\n    if(dif>=2):\n        imos[a0+2] += 1\n        imos[a0+dif+1] -= dif\n        imos[a0+dif+2] += dif-1\n\n# print(imos)\n\nfor i in range(1,2*m+2):\n    imos[i] += imos[i-1]\n# print(imos)\n\nfor i in range(1,2*m+2):\n    imos[i] += imos[i-1]\n# print(imos)\n\nfor i in range(m):\n    imos[i] += imos[i+m]\n\nans -= max(imos[:m])\nprint(ans)", "def main():\n    n, m = map(int, input().split())\n    a = list(map(lambda x: int(x)-1, input().split()))\n    event = [[] for _ in [0]*m]\n    for j, i in enumerate(a):\n        if j < n-1:\n            A = m-a[j+1]\n            if A < m:\n                event[A].append((True, j))\n        B = m-i\n        if B < m:\n            event[B].append((False, j))\n    leader = 1\n    now = a[-1]\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            leader += 1\n            now += a[i]\n    s = a[0]\n    ans = 10**20\n    for i in range(m):\n        for e, j in event[i]:\n            if e:\n                leader += 1\n                now += ((a[j]+i) % m)\n            else:\n                now -= m\n                if j != n-1:\n                    leader -= 1\n        now += leader\n        ans = min(ans, now-1-(s+i) % m)\n    print(ans)\n\n\nmain()", "n,m=map(int,input().split())\narr=list(map(int,input().split()))\nimos1=[0]*(m*2+2)\nimos2=[0]*(m*2+2)\nimos3=[0]*(m*2+2)\nfor i in range(n-1):\n  cost=(m+arr[i+1]-arr[i])%m\n  if arr[i]<arr[i+1]:\n    imos1[arr[i]]+=cost\n    imos1[arr[i]+m]-=cost\n    imos2[arr[i]+2]+=-1\n    imos2[arr[i+1]+1]+=1\n    imos3[arr[i+1]+1]+=cost-1\n  else:\n    imos1[arr[i]]+=cost\n    imos1[arr[i]+m]-=cost\n    imos2[arr[i]+2]+=-1\n    imos2[arr[i+1]+m+1]+=1\n    imos3[arr[i+1]+m+1]+=cost-1\nfor i in range(1,m*2+2):\n  imos2[i]+=imos2[i-1]\nfor i in range(m*2+2):\n  imos1[i]+=imos2[i]\n  imos1[i]+=imos3[i]\nfor i in range(1,m*2+2):\n  imos1[i]+=imos1[i-1]\nxs=[0]*(m+1)\nxs[0]=10**18\nfor i in range(1,m+1):\n  xs[i]=imos1[i]+imos1[m+i]\nprint(min(xs))", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nbitween = [0 for i in range(2 * m + 10)]\nedge = [[] for i in range(m + 1)]\n\nans = 0\nfor i in range(n - 1):\n\tl, r = a[i], a[i + 1]\n\tif l >= r:\n\t\tr += m\n\tbitween[l + 2] += 1\n\tbitween[r + 1] -= 1\n\n\tedge[a[i + 1]].append(i)\n\nfor i in range(2 * m + 1):\n\tbitween[i + 1] += bitween[i]\n\nans = 0\nfor i in range(n - 1): # x = 1\n\tans += min((a[i + 1] - a[i] + m) % m, (a[i + 1] - 1 + m) % m + 1)\nprv = ans\nfor i in range(2, m + 1): # x >= 2\n\tcrt = prv - bitween[i] - bitween[i + m]\n\tfor j in edge[i - 1]:\n\t\tcrt -= min((a[j + 1] - a[j] + m) % m, (a[j + 1] - (i - 1) + m) % m + 1)\n\t\tcrt += min((a[j + 1] - a[j] + m) % m, (a[j + 1] - i + m) % m + 1 )\n\tans = min(ans, crt)\n\tprv = crt\nprint(ans)\n", "# Binary Indexed Tree (Fenwick Tree)\nclass BIT():\n    \"\"\"\u533a\u9593\u52a0\u7b97\u3001\u4e00\u70b9\u53d6\u5f97\u30af\u30a8\u30ea\u3092\u305d\u308c\u305e\u308cO(logN)\u3067\u7b54\u3048\u308b\n    add: \u533a\u9593[l, r)\u306bval\u3092\u52a0\u3048\u308b\n    get_val: i\u756a\u76ee\u306e\u5024\u3092\u6c42\u3081\u308b\n    i, l, r\u306f0-indexed\n    \"\"\"\n    def __init__(self, n):\n        self.n = n\n        self.bit = [0] * (n + 1)\n\n    def _add(self, i, val):\n        while i > 0:\n            self.bit[i] += val\n            i -= i & -i\n\n    def get_val(self, i):\n        \"\"\"i\u756a\u76ee\u306e\u5024\u3092\u6c42\u3081\u308b\"\"\"\n        i = i + 1\n        s = 0\n        while i <= self.n:\n            s += self.bit[i]\n            i += i & -i\n        return s\n\n    def add(self, l, r, val):\n        \"\"\"\u533a\u9593[l, r)\u306bval\u3092\u52a0\u3048\u308b\"\"\"\n        self._add(r, val)\n        self._add(l, -val)\n\n\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nbit = BIT(2 * m + 10)\ncnt = 0\nfor i in range(n - 1):\n    l, r = a[i], a[i + 1]\n    if l > r:\n        r += m\n    cnt += r - l\n    if l == r or l + 1 == r:\n        continue\n    if l < r:\n        l += 2\n        r += 1\n        bit.add(l, r, 1)\n        bit.add(r, r + 1, -(r - l))\n        continue\n\nimos = [0] * (2 * m + 2)\nfor i in range(2 * m + 2):\n    imos[i] += bit.get_val(i)\n    if i - 1 >= 0:\n        imos[i] += imos[i - 1]\n\nans = [0] * (m + 1)\nfor i in range(1, m + 1):\n    ans[i] = imos[i] + imos[i + m]\nprint(cnt - max(ans))", "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N, M = list(map(int, readline().split()))\n    A = list([int(x) - 1 for x in readline().split()])\n\n    b = [0] * M\n\n    for i in range(N - 1):\n        prev = A[i]\n        cur = A[i + 1]\n        if prev < cur:\n            b[prev + 1] += 1\n            b[cur] -= 1\n        else:\n            if (prev+1) % M > 0:\n                b[(prev + 1) % M] += 1\n            b[0] += 1\n            b[cur] -= 1\n\n    acc = [0] * M\n\n    for i in range(M):\n        if i > 0:\n            acc[i] = acc[i - 1] + b[i]\n        else:\n            acc[i] = b[i]\n\n    score = 0\n\n    cnt = [0] * M\n\n    for i in range(N - 1):\n        prev = A[i]\n        cur = A[i + 1]\n        cnt[cur] += (cur + M - prev - 1) % M\n\n    for i in range(N - 1):\n        prev = A[i]\n        cur = A[i + 1]\n        first = (cur + M - prev) % M\n        second = (cur + M) % M + 1\n        score += min(first, second)\n    ans = score\n\n    for i in range(1, M):\n        score += cnt[i - 1]\n        score -= acc[i - 1]\n        ans = min(ans, score)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter, defaultdict\n\nn, m = [int(c) for c in input().split()]\nxs = [int(c) for c in input().split()]\n\n\ndef ring_cost(fr, to):\n    return to - fr if to >= fr else (m - fr) + to\n\nfrom_counter = Counter(xs[:-1])\nto_counter = Counter(xs[1:])\n\nfav = 1\ncost = 0\nuse_fav = 0\nnofav_cost = defaultdict(int)\n\nfor i in range(n - 1):\n    normal_cost = ring_cost(xs[i], xs[i+1])\n    fav_cost = ring_cost(fav, xs[i+1]) + 1\n    cost += min(normal_cost, fav_cost)\n    nofav_cost[xs[i+1]] += normal_cost\n    if fav_cost <= normal_cost:\n        use_fav += 1\n\nans = cost\nfor fav in range(2, m+1):\n    stop_using_fav = to_counter[fav - 1]\n    use_fav -= stop_using_fav\n    cost += nofav_cost[fav - 1] - stop_using_fav\n\n    cost -= use_fav\n\n    use_fav += from_counter[fav - 1]\n    ans = min(ans, cost)\n    # print(fav, cost)\n\nprint(ans)", "n,m=map(int,input().split())\na=list(map(int,input().split()))\nl=[0]*(m+2)\nfor i,j in zip(a,a[1:]):\n    if j>i+1:\n        l[j+1]-=1\n        l[i+2]+=1\n    elif i>j:\n        if i<=m-2:\n            l[i+2]+=1\n            l[m+1]-=1\n            l[1]+=1\n            l[j+1]-=1\n        else:\n            l[i+2-m]+=1\n            l[j+1]-=1\nfrom itertools import accumulate\nl=list(accumulate(l))\nans=0\nl1=0\nfor i,j in zip(a,a[1:]):\n    if j>i:\n        ans+=j-i\n        l[j+1]-=(j-i-1)\n    else:\n        l1+=m-i\n        ans+=m+j-i\n        l[j+1]-=(m+j-i-1)\nl[1]=l1\nl=list(accumulate(l))\nprint(ans-max(l[1:m+1]))", "n, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nD0 = [0]*(2*m+10)\nD1 = [0]*(2*m+10)\nans = 0\n\npa = A[0]-1\nfor a in A[1:]:\n    a -= 1\n    if a<pa:\n        a += m\n    ans += a-pa\n    D1[pa+1] += 1\n    D1[a] -= a-pa\n    D1[a+1] += a-pa-1\n    pa = a%m\n\nfor i, d1 in enumerate(D1):\n    D0[i] = d1 + D0[i-1]\n\nL = [0]*(2*m+10)\n\nfor i, d0 in enumerate(D0):\n    L[i] = d0 + L[i-1]\n\nfor i, l in enumerate(L[m:]):\n    L[i%m] += l\n\nprint((ans-max(L[:m])))\n", "mod = 1000000007\neps = 10**-9\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    N, M = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    A = [a - 1 for a in A]\n    imos = [0] * M\n    imos_2 = [0] * M\n    B = [0] * M\n    base = 0\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            k = A[i] - A[i - 1]\n            base += k\n            if k == 1:\n                continue\n            if A[i] + 1 < M:\n                imos_2[A[i] + 1] += k\n            if A[i] + 2 < M:\n                imos_2[A[i] + 2] += -(k-1)\n            imos_2[A[i - 1] + 2] += -1\n        else:\n            k = A[i] - A[i-1] + M\n            base += k\n            if k == 1:\n                continue\n            if A[i-1] == M-1:\n                imos_2[1] += -1\n                imos_2[A[i] + 1] += k\n                if A[i] + 2 < M:\n                    imos_2[A[i] + 2] += -(k-1)\n            else:\n                imos_2[(A[i] + 2)%M] += -(k-1)\n                imos_2[(A[i] + 1)%M] += k\n                imos_2[(A[i - 1] + 2) % M] += -1\n                if A[i - 1] + 2 < M:\n                    B[0] += -(M - (A[i-1] + 2))\n                    imos_2[0] += -1\n    for i in range(M):\n        if i == 0:\n            imos[i] += imos_2[i]\n        else:\n            imos[i] += imos[i-1] + imos_2[i]\n        if i == 0:\n            B[i] = B[i] + imos[i]\n        else:\n            B[i] = B[i-1] + imos[i]\n    print((min(B) + base))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\nN, M = map(int, input().split())\na = list(map(int, input().split()))\nd = [0] * (N - 1)\nimosa = [0] * (M * 2 + 2)\nimosb = [0] * (M * 2 + 2)\nfor i in range(N - 1):\n  if a[i + 1] >= a[i]:\n    d[i] = a[i + 1] - a[i]\n    imosa[a[i] + 1] += 1\n    imosa[a[i + 1] + 1] -= 1\n    imosb[a[i] + 1] -= a[i] + 1\n    imosb[a[i + 1] + 1] += a[i] + 1\n  else:\n    d[i] = a[i + 1] + M - a[i]\n    imosa[a[i] + 1] += 1\n    imosa[a[i + 1] + M + 1] -= 1\n    imosb[a[i] + 1] -= a[i] + 1\n    imosb[a[i + 1] + M + 1] += a[i] + 1\n  #print(imosb)\n#print(d)\n\nimos = [0] * (M + 2)\nfor i in range(2 * M + 1):\n  imosa[i + 1] += imosa[i]\n  imosb[i + 1] += imosb[i]\n#print(imosa)\n#print(imosb)\nfor i in range(M + 2):\n  imos[i] = imosa[i] * i + imosa[i + M] * (i + M) + imosb[i] + imosb[i + M]\n#print(imos)\nprint(sum(d) - max(imos[1: M + 1]))", "n, m = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nps = [0]*(m+2)  # 0,1,2,...,m,m+1\n\nfor i in range(n-1):\n    if a[i] < a[i+1]:\n        ps[a[i]+1] += 1\n        ps[a[i+1]] -= 1\n    else:\n        ps[0] += 1\n        ps[a[i+1]] -= 1\n        ps[a[i]+1] += 1\n        ps[m+1] -= 1\n\naps = [0]\nfor x in ps[:-1]:\n    aps.append(aps[-1]+x)\naps = aps[2:]\n\n\ndef dist(src, tar):\n    return (m+tar-src) % m\n\n\nfreq = [0]*m\nfor i, x in enumerate(a):\n    if i == 0:\n        continue\n    freq[x-1] += dist(a[i-1], a[i])-1\n\n\nans = [0]*m\nfor i in range(n-1):\n    ans[0] += min(dist(a[i], a[i+1]), 1+dist(1, a[i+1]))\n\nfor i in range(1, m):\n    ans[i] = ans[i-1] + freq[i-1] - aps[i-1]\n\nprint((min(ans)))\n", "#!usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\n\ndef IR(n):\n    return [I() for i in range(n)]\ndef LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\n#A\ndef A():\n    n = I()\n\n    return\n\n#B\ndef B():\n    n = I()\n\n    return\n\n#C\ndef C():\n    n,m = LI()\n    a = LI()\n    for i in range(n):\n        a[i] -= 1\n    b = [0]*(m+10)\n    ans = 0\n    f = [0]*(m+10)\n    for i in range(n-1):\n        r = (a[i+1]-a[i])%m\n        ans += r\n        if r < 2:\n            continue\n        if a[i+1] >= (a[i]+2)%m:\n            f[(a[i]+2)%m] += 1\n            b[(a[i]+2)%m] += 1\n            b[a[i+1]+1] -= 1\n            f[a[i+1]+1] -= r\n        else:\n            b[0] += 1\n            f[0] += (-a[i]-1)%m\n            b[a[i+1]+1] -= 1\n            f[a[i+1]+1] -= r\n            b[a[i]+2] += 1\n            f[a[i]+2] += 1\n            b[m] -= 1\n    for i in range(m-1):\n        b[i+1] += b[i]\n    for i in range(m-1):\n        f[i+1] += f[i]+b[i]\n    print((ans-max(f)))\n    return\n\n#D\ndef D():\n    n = I()\n\n    return\n\n#E\ndef E():\n    n = I()\n\n    return\n\n#F\ndef F():\n    n = I()\n\n    return\n\n#Solve\ndef __starting_point():\n    C()\n\n__starting_point()", "_,m,*A=map(int,open(0).read().split());S=l=3*m;D=[0]*l\nfor a,b in zip(A,A[1:]):b+=m*(b<a);k=b-a;S+=k;D[a+2]+=1;D[b+1]-=k;D[b+2]+=k-1\nfor i in range(l*2):D[i%l]+=D[~-i%l]\nprint(S-l-max(D[a]+D[a+m]for a in A))", "from collections import defaultdict\nfrom itertools import accumulate\n\nn, m = list(map(int, input().split()))\naa = list(map(int, input().split()))\ncounter = defaultdict(list)\n\ncum = [0] * (m + 2)\nans_1 = 0\nfor a, b in zip(aa, aa[1:]):\n    counter[b].append(a)\n    cum[a + 1] += 1\n    cum[b] += -1\n    if a > b:\n        cum[1] += 1\n        ans_1 += b\n    else:\n        ans_1 += b - a\n\ncum = list(accumulate(cum))\n\nans_prev = ans_1\nans_min = ans_1\nfor x in range(2, m + 1):\n    ans_x = ans_prev\n    px = x - 1\n    if px in counter:\n        ans_x += sum((px - a) % m - 1 for a in counter[px])\n    ans_x -= cum[px]\n    ans_min = min(ans_min, ans_x)\n    ans_prev = ans_x\nprint(ans_min)\n", "n, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nS = 0\nfor i in range(n-1):\n    S += (m + A[i+1] - A[i]) % m\n\nT = 2*m\nD = [0]*(T+10)\ndata = [0]*(T+1)\ndef get(i):\n    s = 0\n    while i:\n        s += data[i]\n        i -= i & -i\n    return s\ndef add(i, x):\n    while i <= T:\n        data[i] += x\n        i += i & -i\n\nfor i in range(n-1):\n    x = A[i]; y = A[i+1]\n    if y < x:\n        y += m\n    k = y-x\n    if k > 1:\n        D[x+2] += 1\n        D[y+1] -= k\n        D[y+2] += k-1\nfor i in range(1, 2*m+5):\n    D[i] += D[i-1]\n    add(i, D[i])\nres = min(S - (get(a) + get(a+m)) for a in A)\nprint(res)\n", "import sys\ndef MI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\n\n\nN,M = MI()\na = LI()\n\ncount = 0  # \u9806\u9001\u308a\u30dc\u30bf\u30f3\u3060\u3051\u3092\u7528\u3044\u305f\u3068\u304d\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u56de\u6570\nX = [0]*(2*M+1)\nY = [0]*(2*M+1)\n# (X[0]+\u2026+X[i])*i+(Y[0]+\u2026+Y[i]) = \u304a\u6c17\u306b\u5165\u308a\u30dc\u30bf\u30f3\u3092i\u306b\u8a2d\u5b9a\u3057\u305f\u6642\u306b\u3001\u30dc\u30bf\u30f3\u306e\u62bc\u3059\u56de\u6570\u3092\u4f55\u56de\u7bc0\u7d04\u3067\u304d\u308b\u304b\n\nfor i in range(N-1):\n    a0,a1 = a[i],a[i+1]\n    count += (a1-a0) % M\n    if a0 > a1:\n        a1 += M\n    if a0 == a1:\n        continue\n    X[a0+2] += 1\n    X[a1+1] -= 1\n    Y[a0+2] -= a0+1\n    Y[a1+1] += a0+1\n\nfrom itertools import accumulate\n\nX = list(accumulate(X))\nY = list(accumulate(Y))\n\nA = [0]*(M+1)\nfor i in range(1,M+1):\n    A[i] = (X[i]*i+Y[i]) + (X[i+M]*(i+M)+Y[i+M])\n\nprint((count-max(A)))\n", "import sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\nfrom collections import Counter\n\nn, m = [int(item) for item in input().split()]\na = [int(item) - 1 for item in input().split()]\ncnt_t = [0] * m\n\nans = [0] * m\ncnt_r = [0] * (m + 1)\nfor a1, a2 in zip(a, a[1:]):\n    ans[0] += min((m + a2 - a1) % m, (m + a2 - 0) % m + 1)\n    cnt_t[a2] += (m + a2 - a1) % m - 1\n    if (m + a2 - a1) % m <= 1:\n        continue\n    add = (a1 + 2) % m\n    sub = a2 + 1\n    if add < sub:\n        cnt_r[add] += 1\n        cnt_r[sub] -= 1\n    else:\n        cnt_r[add] += 1\n        cnt_r[sub] -= 1\n        cnt_r[0] += 1\n        cnt_r[m] -=1\nfor i in range(m):\n    cnt_r[i+1] += cnt_r[i]\n\nfor i in range(1, m):\n    ans[i] = ans[i - 1] - cnt_r[i] + cnt_t[i - 1]\nprint(min(ans))", "_,m,*A=map(int,open(0).read().split());S=l=3*m;D=[0]*l\nfor a,b in zip(A,A[1:]):b+=m*(b<a);k=b-a;S+=k;D[a+2]+=1;D[b+1]-=k;D[b+2]+=k-1\nexec(\"for i in range(l):D[i]+=D[i-1]\\n\"*2);print(S-l-max(D[a]+D[a+m]for a in A))", "import sys\ninput = sys.stdin.readline\n\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\nmod=10**9+7\n\n\n\"\"\"\nx\u3092\u6c7a\u3081\u308c\u3070O(N)\u3067\u7b54\u3048\u304c\u6c42\u307e\u308b.\n\u5168\u90e8\u306f\u6c42\u3081\u3089\u308c\u306a\u3044.\nx\u3092\u5909\u66f4\u3057\u305f\u3068\u304d\u306e\u5dee\u5206\u306b\u6ce8\u76ee.\n\n\na\u304b\u3089b\u3078\n\u9806\u9001\u308a\u3060\u3051\u306e\u3068\u304d,(b-a)%M\n\u304a\u6c17\u306b\u5165\u308a\u3092\u4f7f\u3046\u3068\u304d,1 + (b-x)%M\n\n\u76ee\u6a19\u5730\u70b9\u304cx\u3060\u3063\u305f\u5834\u5408\uff0c\u304a\u6c17\u306b\u5165\u308a\u3092+1\u3059\u308b\u3068\u4e00\u6c17\u306b(b-a)%M-1\u56de\u5fc5\u8981\u306b\u306a\u308b\n\u5143\u3005\u304a\u6c17\u306b\u5165\u308a\u3092\u4f7f\u3046\u30b1\u30fc\u30b9(a<x<b\u307f\u305f\u3044\u306a)\u3067\u306f-1\n\u305d\u308c\u4ee5\u5916\u306a\u3089\u5909\u5316\u306a\u3057\n\n\u76ee\u6a19\u5730\u70b9\u306e\u5024\u306f\u666e\u901a\u306b\u6570\u3048\u308b\n\u304a\u6c17\u306b\u5165\u308a\u3092\u4f7f\u3046\u30b1\u30fc\u30b9\u306fimos\u3067.\u533a\u9593(a,b)\u306b+1\u3059\u308b\u611f\u3058.\na>b\u306e\u5834\u5408,(0,b)\u3068(a,N]\u306b+1\u304b\u306a\n\"\"\"\n\nN,M=MI()\nA=LI()\n\nS=[0]*(M+3)\n\nprev=[[]for _ in range(M+1)]\nfor i in range(N-1):\n    # \u76f4\u524d\u306e\u6570\u5b57\n    b=A[i+1]\n    a=A[i]\n    prev[b].append(a)\n    \n    # imos\n    if b>a:\n        S[a+1]+=1\n        S[b]-=1\n    elif a>b:\n        S[1]+=1\n        S[b]-=1\n        S[a+1]+=1\n        S[-1]-=1\n        \nfor i in range(M-1):\n    S[i+1]+=S[i]\n\nans=0\nx=1\nnow=A[0]\nfor i in range(1,N):\n    nxt=A[i]\n    if nxt>now:\n        ans+=nxt-now\n    else:\n        ans+=nxt\n    now=nxt\n\n# print(1,ans)\ntemp=ans\nfor x in range(1,max(A)):\n    for p in prev[x]:\n        temp+=(x-p)%M - 1\n    temp-=S[x]\n    # print(x+1,temp)\n    ans=min(ans,temp)\n    \nprint(ans)\n\n# print(S)\n# print(prev)\n\n\n", "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\na = list([int(x) - 1 for x in input().split()])\n\ncnt0 = [0] * m\ncnt1 = [0] * m\nfor i in range(n-1):\n    cnt0[a[i+1]] += (a[i+1] - a[i]) % m - 1\n    if (a[i] + 1) % m <= a[i+1]:\n        cnt1[(a[i]+1) % m] += 1\n        cnt1[a[i+1]] -= 1\n    else:\n        cnt1[(a[i]+1) % m] += 1\n        cnt1[0] += 1\n        cnt1[a[i+1]] -= 1\ncnt1 = list(accumulate(cnt1))\ndiff = list(accumulate([0] + [cnt0[i] - cnt1[i] for i in range(m-1)]))\nans = min(diff)\nfor i in range(n-1):\n    ans += min((a[i+1] - a[i]) % m, a[i+1] + 1)\nprint(ans)\n\n", "import sys\ninput = sys.stdin.readline\n\nclass BIT:\n    def __init__(self, size):\n        self.bit = [0] * (size + 1)\n        self.size = size\n\n    def sum(self, i):\n        i += 1\n        s = 0\n        while i > 0:\n            s += self.bit[i]\n            i -= i & -i\n        return s\n\n    def add(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.bit[i] += x\n            i += i & -i\n\nn, m = list(map(int, input().split()))\na = list([int(x) - 1 for x in input().split()])\n\nbit0 = BIT(m)\nbit1 = BIT(m)\nfor i in range(n-1):\n    x, y = a[i], a[i+1]\n    bit1.add(0, (y - x) % m)\n    if (y - x) % m < 2:\n        continue\n    x = (x + 2) % m\n    if x <= y:\n        bit0.add(x, -1)\n        bit1.add(x, x - 1)\n        bit0.add(y + 1, 1)\n        bit1.add(y + 1, -(x - 1))\n    else:\n        bit0.add(x, -1)\n        bit1.add(x, x - 1)\n\n        b = (0 - (x - 1)) % m\n        bit0.add(0, -1)\n        bit1.add(0, -b)\n        bit0.add(y + 1, 1)\n        bit1.add(y + 1, b)\n\nans = min(bit0.sum(i) * i + bit1.sum(i) for i in range(m))\nprint(ans)\n", "import sys\nfrom itertools import accumulate\ninput = sys.stdin.readline\nn,m = map(int,input().split())\na = list(map(int,input().split()))\nls_0 = [0 for i in range(m*2+2)]\nans_0 = 0\nfor i in range(1,n):\n  if a[i-1] < a[i]:\n    l = a[i-1]+2\n    r = a[i]+1\n  else:\n    l = a[i-1]+2\n    r = a[i]+m+1\n  ls_0[l] += 1\n  ls_0[r] -= (r-l+1)\n  ls_0[r+1] += r-l\n  ans_0 += r-l+1\n\nls_1 = list(accumulate(ls_0))\nls_2 = list(accumulate(ls_1))\nls_3 = [0]+[ls_2[i]+ls_2[i+m] for i in range(1,m+1)]\nprint(ans_0-max(ls_3))", "from itertools import accumulate\nimport sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\na = list([int(x) - 1 for x in input().split()])\n\ncnt0 = [0] * m\ncnt1 = [0] * m\nfor i in range(n-1):\n    cnt0[a[i+1]] += (a[i+1] - a[i]) % m - 1\n    if (a[i] + 1) % m <= a[i+1]:\n        cnt1[(a[i]+1) % m] += 1\n        cnt1[a[i+1]] -= 1\n    else:\n        cnt1[(a[i]+1) % m] += 1\n        cnt1[0] += 1\n        cnt1[a[i+1]] -= 1\ncnt1 = list(accumulate(cnt1))\nans = float('inf')\ntmp = 0\nfor i in range(n-1):\n    tmp += min((a[i+1] - a[i]) % m, a[i+1] + 1)\nans = tmp\nfor i in range(m-1):\n    tmp += cnt0[i] - cnt1[i]\n    ans = min(ans, tmp)\nprint(ans)\n\n", "import sys\ninput = sys.stdin.readline\nimport itertools\n\n\"\"\"\n(a_i+1,a_{i+1}] \u306b x \u304c\u3042\u308b\u9593\u306f...\u4f7f\u3046\u3002\u50be\u304d-1\na_{i+1} -> a_{i+1} + 1 \u306e\u3068\u3053\u308d\u3067\u304c\u304f\u3063\u3068\u4e0b\u304c\u308b\n\u305d\u3053\u304b\u3089a_i\u307e\u3067\u306f\u50be\u304d0\n\"\"\" \n\nN,M = map(int,input().split())\nA = [int(x) for x in input().split()]\nFROM = A[:-1]\nTO = A[1:]\n\nd_slope = [0] * (M+1) # \u50be\u304d\u306e\u5dee\u5206\n\n\"\"\"\n5,4,3,2,1,5,5,5,5\n0,-1,-1,-1,-1,4,0,0,0\n0,-1,0,0,0,0,5,-4,0,0\n\"\"\"\n\nfor x,y in zip(FROM,TO):\n    if y < x:\n        y += M\n    z = y - x\n    if z == 1:\n        continue\n    d_slope[1+(x+1)%M] += -1\n    d_slope[1+y%M] += z # 1\u56de\u3067\u884c\u3051\u305f\u306e\u304cz\u56de\u304b\u304b\u308b\u3088\u3046\u306b\u306a\u308b\n    d_slope[1+(y+1)%M] += 1-z\n\nslope = list(itertools.accumulate(d_slope))\nS = sum(slope)\nslope = [x - S//M for x in slope]\nslope[0] = 0\n\n# 1\u756a\u3092\u304a\u6c17\u306b\u5165\u308a\u306b\u3057\u305f\u3068\u304d\u306e\u30b9\u30b3\u30a2\u3092\u6c42\u3081\u308b\ncnt = 0\nfor x,y in zip(FROM,TO):\n    if x < y:\n        cnt += (y-x)\n    else:\n        cnt += y\n\nanswer = cnt - slope[1] + min(itertools.accumulate(slope[1:]))\nprint(answer)", "\ndef main(n,m,a):\n    mat=[0]*m\n    dat=[set() for _ in range(m)]\n    ret=[0]*m\n    base=0\n    for i in range(n-1):\n        base+=(a[i+1]-a[i])%m\n        if (a[i+1]-a[i])%m<2:continue\n        mat[a[i+1]-1]+=(a[i+1]-a[i])%m-1\n        dat[a[i+1]-1].add(i+1)\n        dat[(a[i])%m].add(-i-1)\n    now=0\n    nowd=set()\n    for i in range(m-1,-1,-1):\n        now+=mat[i]\n        mat[i]=0\n        ret[i]+=now\n        delid=set()\n        for x in dat[i]:\n            if x>0:\n                nowd.add(x)\n                delid.add(x)\n            elif -x in nowd:\n                nowd.discard(-x)\n                delid.add(x)\n        for x in delid:\n            dat[i].discard(x)\n        now=max(now-len(nowd),0)\n    for i in range(m-1,-1,-1):\n        now+=mat[i]\n        mat[i]=0\n        ret[i]+=now\n        delid=set()\n        for x in dat[i]:\n            if x>0:\n                nowd.add(x)\n                delid.add(x)\n            elif -x in nowd:\n                nowd.discard(-x)\n                delid.add(x)\n        for x in delid:\n            dat[i].discard(x)\n        now=max(now-len(nowd),0)\n    \n    return base-max(ret)\nn,m=list(map(int,input().split()))\na=list(map(int,input().split()))\nprint((main(n,m,a)))\n", "#!/usr/bin/env python3\n\n\ndef solve(n, m, a):\n\n    ans = 0\n    s = [(a[0], 0)]\n    for i in range(1, n):\n        ans += (a[i] - a[i - 1]) % m\n        s.append((a[i], i))\n    s.sort()\n\n\n    r = [0] * (m + 1)\n    c = 0\n    t = 0\n    active = [0] * n\n    j = 0\n    while j < n:\n        aj, _ = s[j]\n        r[aj] += (aj * c - t - c)\n        while j < n:\n            ai, i = s[j]\n            if ai != aj:\n                break\n            if 0 < i:\n                if active[i - 1]:\n                    active[i - 1] = 0\n                    c -= 1\n                    t -= a[i - 1]\n            if i < n - 1:\n                active[i] = 1\n                c += 1\n                t += a[i]\n            j += 1\n\n    if 0 < c:\n        t -= m * c\n        j = 0\n        while j < n:\n            aj, _ = s[j]\n            r[aj] += (aj * c - t - c)\n            while j < n:\n                ai, i = s[j]\n                if ai != aj:\n                    break\n                if 0 < i:\n                    if active[i - 1]:\n                        active[i - 1] = 0\n                        c -= 1\n                        t -= a[i - 1] - m\n                j += 1\n            if c == 0:\n                break\n\n    ans -= max(r)\n\n    return ans\n\n\ndef main():\n    n, m = input().split()\n    n = int(n)\n    m = int(m)\n    a = list(map(int, input().split()))\n\n    print((solve(n, m, a)))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "from collections import defaultdict\nfrom itertools import accumulate\n\nn, m = list(map(int, input().split()))\naa = list(map(int, input().split()))\ncounter = defaultdict(list)\n\ncum = [0] * (m + 2)\nans_1 = 0\nfor a, b in zip(aa, aa[1:]):\n    counter[b].append(a)\n    cum[a + 1] += 1\n    cum[b] += -1\n    if a > b:\n        cum[1] += 1\n        ans_1 += b\n    else:\n        ans_1 += b - a\n\ncum = list(accumulate(cum))\n\nans_prev = ans_1\nans_min = ans_1\nfor x in range(1, m):\n    ans_x = ans_prev\n    if x in counter:\n        ans_x += sum((x - a) % m - 1 for a in counter[x])\n    ans_x -= cum[x]\n    ans_min = min(ans_min, ans_x)\n    ans_prev = ans_x\nprint(ans_min)\n", "n, m = map(int,input().split())\na = list(map(int,input().split()))\n\na0 = a[0]\n\nDDF = [0 for _ in range(m)] #DF[i] = F[i] - F[i-1], DDF[i] = DF[i] - DF[i-1] (DF[0] = DDF[0] = 0\u3068\u304a\u304f)\nA = [m-1]\nfor i in range(1,n):\n  A.append((a[i]-a0-1) % m)\n#print(\"A : \", A)\ntotal_step = 0\nfor i in range(1,n):\n  total_step += (a[i]-a[i-1]) % m\n\nfor i in range(1,n):\n  # if A[i] > A[i-1]: DF[A[i-1]+2 : A[i]+1] += 1\n  # if A[i] < A[i-1]: DF[A[i-1]+2 : m] += 1; DF[1:A[i]+1] += 1; DF[0] += m-A[i-1]-1\n  # DF[A[i]+1] -= (A[i] - A[i-1]) % m - 1\n  if A[i] > A[i-1]:\n    if A[i-1] < m-2: DDF[A[i-1]+2] += 1\n    if A[i] < m-1: \n      DDF[A[i]+1] -= 1 + (A[i] - A[i-1]) % m - 1\n      if A[i] < m-2:\n        DDF[A[i]+2] += (A[i] - A[i-1]) % m - 1\n  elif A[i] < A[i-1]:\n    if A[i-1] < m-2: \n      DDF[A[i-1]+2] += 1\n    DDF[0] += m-A[i-1]-1\n    DDF[1] -= (m-A[i-1]-1) - 1\n    if A[i] < m-1: \n      DDF[A[i]+1] -= 1 + (A[i] - A[i-1]) % m - 1\n      if A[i] < m-2:\n        DDF[A[i]+2] += (A[i] - A[i-1]) % m - 1\n  \"\"\"\n  print(\"DDF @ \", i,\" : \", DDF) \n  DF = [0 for _ in range(m)]\n  DF[0] = DDF[0]\n  for i in range(1,m):  \n    DF[i] = DF[i-1] + DDF[i]\n  print(\"DF : \", DF)  \n  F = [0 for _ in range(m)]\n  F[0] = DF[0]\n  for i in range(1,m):  \n    F[i] = F[i-1] + DF[i]\n  print(\"F : \", F)    \n  \"\"\"\n  \nfor i in range(1,m):  \n  DDF[i] = DDF[i-1] + DDF[i]\n#print(\"DF : \", DDF)    \nfor i in range(1,m):  \n  DDF[i] = DDF[i-1] + DDF[i]\n#print(\"F : \", DDF)    \nprint(total_step - max(DDF))", "n,m,*A=map(int,open(0).read().split());l=3*m;D=[0]*l;S=0\nfor a,b in zip(A,A[1:]):\n b+=m*(b<a);k=b-a;S+=k\n if k>1:D[a+2]+=1;D[b+1]-=k;D[b+2]+=k-1\nexec(\"for i in range(1,l):D[i]+=D[i-1]\\n\"*2);print(S-max(D[a]+D[a+m]for a in A))", "# E\nn, m = map(int, input().split())\na_list = list(map(int, input().split()))\n\n\n# bonus map\nbonus_str_cnt = [0]*(m+1)\nbonus_end_vol = [0]*(m+1)\nbonus_end_cnt = [0]*(m+1)\n\n# 1\none_res = 0\nbonus_cnt = 0\nfor i in range(n-1):\n    difm = (a_list[i+1] - a_list[i]) % m\n    if difm > 1:\n        if a_list[i] + 2 > m:\n            bonus_str_cnt[(a_list[i] + 2) - m] += 1\n        else:\n            bonus_str_cnt[a_list[i] + 2] += 1\n        bonus_end_cnt[a_list[i+1]] += 1\n        bonus_end_vol[a_list[i+1]] += difm - 1\n    if difm <= a_list[i+1]:\n        one_res += difm\n    else:\n        one_res += a_list[i+1]\n        bonus_cnt += 1\n\nres_list = [one_res]\nres = one_res\nfor i in range(2, m+1):\n    res += bonus_end_vol[i-1]\n    bonus_cnt += bonus_str_cnt[i] - bonus_end_cnt[i-1]\n    res -= bonus_cnt\n    res_list.append(res)\n\nprint(min(res_list))", "N, M = list(map(int, input().split()))\nAs = list(map(int, input().split()))\n\nans = 0\nnumSts, numEns, sumEns = [0]*(2*M), [0]*(2*M), [0]*(2*M)\nfor i in range(N-1):\n    A, B = As[i]-1, As[i+1]-1\n    if A > B:\n        B += M\n    ans += B-A\n    if B-A > 1:\n        numSts[A+2] += 1\n        numEns[B+1] += 1\n        sumEns[B+1] += B-A-1\n\nnums = [0]*M\nnum = 0\nk = 0\nfor i in range(2*M):\n    k += numSts[i] - numEns[i]\n    num += k\n    num -= sumEns[i]\n    nums[i%M] += num\n\nprint((ans - max(nums)))\n", "def main():\n    import sys\n    input = sys.stdin.readline\n    N,M = map(int,input().split())\n    A = list(map(int,input().split()))\n    S = [0]*(2*M+3)\n    for i in range(N-1):\n        now = A[i]\n        nex = A[i+1]\n        L = nex-now\n        if L-1>0:\n            S[now+2] += 1\n            S[nex+1] += -L\n            S[nex+2] += L-1\n        elif L<0:\n            L = L%M\n            if L-1>0:\n                S[now+2] += 1\n                S[nex+1+M] += -L\n                S[nex+2+M] += L-1\n        #print(S)\n    #print(S)\n    for i in range(2*M+2):\n        S[i+1] += S[i]\n    #print(S)\n    for i in range(2*M+2):\n        S[i+1] += S[i]\n    #print(S)\n    B = [0]*(M+1)\n    for i in range(1,M+1):\n        B[i] = S[i] + S[i+M]\n    X = 1\n    diff = 0\n    for i in range(1,M+1):\n        if B[i] > diff:\n            diff = B[i]\n            X = i\n    SS = 0\n    for i in range(N-1):\n        SS += (A[i+1]-A[i])%M\n    #print(B)\n    print(SS-diff)        \n            \n    \n    \nmain()", "n, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nS = 0\nfor i in range(n-1):\n    S += (m + A[i+1] - A[i]) % m\n\nT = 2*m\nD = [0]*(T+10)\ndata = [0]*(T+1)\ndef get(i):\n    s = 0\n    while i:\n        s += data[i]\n        i -= i & -i\n    return s\ndef add(i, x):\n    while i <= T:\n        data[i] += x\n        i += i & -i\n\nfor i in range(n-1):\n    x = A[i]; y = A[i+1]\n    if y < x:\n        y += m\n    k = y-x\n    if k > 1:\n        D[x+2] += 1\n        D[y+1] -= k\n        D[y+2] += k-1\nfor i in range(1, 2*m+5):\n    D[i] += D[i-1]\n    add(i, D[i])\nres = min(S - (get(a) + get(a+m)) for a in A)\nprint(res)\n", "from itertools import accumulate\nn,m = map(int,input().split())\na = list(map(int,input().split()))\nls_0 = [0 for i in range(m*2+2)]\nans_0 = 0\nfor i in range(1,n):\n  if a[i-1] < a[i]:\n    l = a[i-1]+2\n    r = a[i]+1\n  else:\n    l = a[i-1]+2\n    r = a[i]+m+1\n  ls_0[l] += 1\n  ls_0[r] -= (r-l+1)\n  ls_0[r+1] += r-l\n  ans_0 += r-l+1\n\nls_1 = list(accumulate(ls_0))\nls_2 = list(accumulate(ls_1))\nls_3 = [0]+[ls_2[i]+ls_2[i+m] for i in range(1,m+1)]\nprint(ans_0-max(ls_3))", "n, m = map(int, input().split())\na = list(map(int, input().split()))\na = [b-1 for b in a]\nimos = [0 for _ in range(m+1)]\nbase = 0\nfor i in range(n-1):\n\tx, y = a[i], a[i+1]\n\tif y-x == 1 or x+1-m == y:\n\t\tcontinue\n\tz, w = (x+2)%m, (y+1)%m\n\tif w == 0:\n\t\tw = m\n\tif z < w:\n\t\timos[z] += 1\n\t\timos[w] -= w-z+1\n\t\tif w < m:\n\t\t\timos[w+1] += w-z\n\telse:\n\t\timos[z] += 1\n\t\timos[m] -= m-z+1\n\t\timos[0] += 1\n\t\tbase += m-z\n\t\timos[w] -= m+w-z+1\n\t\tif w < m:\n\t\t\timos[w+1] += m+w-z\n#print(imos)\n#print(base)\nfor i in range(m):\n\timos[i+1] += imos[i]\nimos[0] += base\nfor i in range(m):\n\timos[i+1] += imos[i]\nres = max(imos[:m])\nans = 0\nfor i in range(n-1):\n\tif a[i+1] > a[i]:\n\t\tans += a[i+1] - a[i]\n\telse:\n\t\tans += a[i+1] + m - a[i]\n#print(ans)\nans -= res\nprint(ans)", "n, m = map(int, input().split())\nA = list(map(lambda x:int(x)-1, input().split()))\nvalue = [0]*(m+1)\nlength = [0]*(m+1)\nans = 0\nfor i in range(1, n):\n    a, b = A[i-1], A[i]\n    if a<b:\n        value[a+1]+=1\n        value[b+1]-=1\n        length[b+1]-=(b-a)\n        ans+=b-a\n    else:\n        value[a+1]+=1\n        value[m]-=1\n        value[0]+=1\n        value[b+1]-=1\n        length[0]+=(m-a-1)\n        length[b+1]-=(m-a)+(b)\n        ans+=m-a+b\nfor i in range(m):\n    value[i+1] = value[i]+value[i+1]\nfor i in range(m+1):\n    length[i] += value[i]\nfor i in range(m):\n    length[i+1] += length[i]\nfor i in range(m):\n    length[i]-=value[i]\nans -= max(length[::-1])\nprint(ans)", "n, m = map(int, input().split())\na = list(map(int, input().split()))\n\nimos = [0] * (2 * m)\ndiff = [0] * (2 * m)\nres = 0\nfor i in range(n - 1):\n    l = a[i] - 1\n    r = a[i + 1] - 1\n    if l > r:\n        r += m\n    imos[l + 2] += 1\n    imos[r + 1] -= 1\n    diff[r + 1] += r - l - 1\n    res += r - l\n\nans = [0] * (2 * m)\ntmp = 0\nfor i in range(2 * m):\n    tmp += imos[i]\n    if i - 1 >= 0:\n        ans[i] += ans[i - 1] + tmp\n    else:\n        ans[i] += tmp\n    ans[i] -= diff[i]\n    \nmax_ = 0\nfor i in range(m):\n    max_ = max(max_, ans[i] + ans[i + m])\nprint(res - max_)", "import sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nstart = [0]*M\nend = [0]*M\nS = [0]*M\na = 0\nscore = 0\ntotal = 0\nfor i in range(N-1):\n    p, q = A[i]-1, A[i+1]-1\n    start[q] += 1\n    end[p] += 1\n    S[q] += (q-p-1+M)%M\n    total += (q-p+M)%M\n    score += max(0, (q-p-1+M)%M - q)\n    if p > q:\n        a += 1\n\nans = total - score\nind = M-1\nfor _ in range(4*M):\n    a -= end[ind]\n    score += S[ind] - a\n    a += start[ind]\n    ind -= 1\n    if ind < -M: ind += M\n    ans = min(ans, total-score)\nprint(ans)", "from collections import defaultdict\n\n\nclass Bit:\n    def __init__(self, n):\n        self.size = n\n        self.tree = [0] * (n + 1)\n\n    def sum(self, i):\n        s = 0\n        while i > 0:\n            s += self.tree[i]\n            i -= i & -i\n        return s\n\n    def add(self, i, x):\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & -i\n\n\nn, m = list(map(int, input().split()))\naa = list(map(int, input().split()))\ncounter = defaultdict(list)\n\nbit = Bit(m + 1)\nans_1 = 0\nfor a, b in zip(aa, aa[1:]):\n    counter[b].append(a)\n    bit.add(a + 1, 1)\n    bit.add(b, -1)\n    if a > b:\n        bit.add(1, 1)\n        ans_1 += b\n    else:\n        ans_1 += b - a\n\nans_prev = ans_1\nans_min = ans_1\nfor x in range(2, m + 1):\n    ans_x = ans_prev\n    px = x - 1\n    if px in counter:\n        ans_x += sum((px - a) % m - 1 for a in counter[px])\n    ans_x -= bit.sum(px)\n    ans_min = min(ans_min, ans_x)\n    ans_prev = ans_x\nprint(ans_min)\n", "from itertools import accumulate\ndef inpl(): return list(map(int, input().split()))\n\nN, M = inpl()\nA = [a-1 for a in inpl()]\nS = [0]*(M+1)\nT = [0]*(M+1)\n\ntmp = 0\nfor i in range(N-1):\n    T[A[i+1]] += (A[i+1] + M - A[i])%M - 1\n    if A[i] < A[i+1]:\n        S[A[i]+1] += 1\n        S[A[i+1]] -= 1\n        tmp += A[i+1] - A[i]\n    else:\n        tmp += A[i+1] + 1\n        S[0] += 1\n        S[A[i+1]] -= 1\n        S[A[i]+1] += 1\n\nS = list(accumulate(S))\nans = tmp*1\nfor i in range(1, M):\n    tmp2 = tmp + T[i-1] - S[i-1]\n    ans = min(ans, tmp2)\n    tmp = tmp2\nprint(ans)", "n,m = map(int,input().split())\na = list(map(int,input().split()))\n\nex = [0] * m\nleft = [0] * (2*m)\nright = [[0,0] for _ in range(2*m)]\n\nans = 0\nfor i in range(n-1):\n    a0 = a[i]-1\n    a1 = a[i+1]-1\n    ans += (a1-a0)%m\n    left[a0+1] += 1\n    right[a1 + (a0>a1)*m][0] += 1\n    right[a1 + (a0>a1)*m][1] += (a1-a0)%m -1\n\nnow = left[0]\ndif = 0\nfor i in range(1,2*m):\n    dif += now\n    ex[i%m] -= dif\n    now += left[i] - right[i][0]\n    dif -= right[i][1]\n\nans += min(ex)\nprint(ans)", "_,m,*A=map(int,open(0).read().split());S=l=3*m;D=[0]*l\nfor a,b in zip(A,A[1:]):\n b+=m*(b<a);k=b-a;S+=k\n if k>1:D[a+2]+=1;D[b+1]-=k;D[b+2]+=k-1\nexec(\"for i in range(l):D[i]+=D[i-1]\\n\"*2);print(S-l-max(D[a]+D[a+m]for a in A))", "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\n\nn, m = map(int, input().split())\nA = list(map(int, input().split()))\nL = [0]*(2*m)\nB = []\ncnt = 0\nfor i in range(n-1):\n  a, b = A[i], A[i+1]\n  a -= 1\n  b -= 1\n  if a < b:\n    cnt += b-a\n    if b-a == 1:\n      continue\n    L[a+2] += 1\n    L[b+1] += -1\n    B.append((b+1, -(b-a-1)))\n  else:\n    b += m\n    cnt += b-a\n    if b-a == 1:\n      continue\n    L[a+2] += 1\n    L[b+1] += -1\n    B.append((b+1, -(b-a-1)))\nL = list(accumulate(L))\nfor i, b in B:\n  L[i] += b\nL = list(accumulate(L))\nc = 0\nfor i in range(m):\n  c = max(c, L[i]+L[m+i])\nans = cnt - c\nprint(ans)", "import sys\ninput = sys.stdin.readline\nn, m = map(int,input().split())\nA = list(map(int,input().split()))\nfor i in range(n):\n    A[i] -= 1\n\nclass Bit:  # Fenwick Tree \u3068\u540c\u3058\n    def __init__(self, n):\n        self.size = n\n        self.tree = [0] * (n + 1)\n  \n    def sum(self, l, r):  # [l,r)\u306e\u548c\u3092\u6c42\u3081\u308b\n        # \u5185\u90e8\u7684\u306b\u306f[l+1,r+1)\u306e\u548c\u3064\u307e\u308a(r\u307e\u3067\u306e\u548c-l\u307e\u3067\u306e\u548c)\n        s = 0\n        while r > 0:\n            s += self.tree[r]\n            r -= r & -r  # 2\u9032\u6570\u306e\u6700\u3082\u4e0b\u4f4d\u306e1\u3092\u53d6\u308a\u9664\u304f\u3068\u3044\u3046\u610f\u5473(\u4f8b:1010\u21921000)\n        while l > 0:\n            s -= self.tree[l]\n            l -= l & -l  # 2\u9032\u6570\u306e\u6700\u3082\u4e0b\u4f4d\u306e1\u3092\u53d6\u308a\u9664\u304f\u3068\u3044\u3046\u610f\u5473(\u4f8b:1010\u21921000)\n        return s\n  \n    def add(self, i, x):  # i\u756a\u76ee\u306bx\u3092\u8db3\u3059\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & -i  # 2\u9032\u6570\u306e\u6700\u3082\u4e0b\u4f4d\u306e1\u3092\u7e70\u308a\u4e0a\u3052\u308b\u3068\u3044\u3046\u610f\u5473(\u4f8b:1010\u21921100)\n\n    def sett(self, i, x):  # i\u756a\u76ee\u3092x\u306b\u3059\u308b\n        self.add(i, x - self.sum(i, i+1))\n\n    def print_bit(self): # \u5185\u90e8\u72b6\u614b\u3092index\u9806\u306b\u51fa\u529b\n        print([self.sum(i, i+1) for i in range(self.size)])\n\n    def print_sum(self): # \u7d2f\u7a4d\u548c\u3092index\u9806\u306b\u51fa\u529b\n        print([self.sum(0, i+1) for i in range(self.size)])\n\n    def lower_bound_left(self, w):  # x\u307e\u3067\u306e\u548c\u304cw\u4ee5\u4e0a\u3068\u306a\u308b\u6700\u5c0f\u306ex\u3001\u7dcf\u548c\u304cw\u672a\u6e80\u306e\u5834\u5408n\u304c\u8fd4\u308b\n        n = self.size\n        r = 1\n        x = 0\n        if self.sum(0, n) < w:\n            return n\n        while r < n:\n            r *= 2\n        le = r\n        while le > 0:\n            if (x + le < n and self.tree[x+le] < w):\n                w -= self.tree[x+le]\n                x += le\n            le //= 2\n        return x\n\n    def upper_bound_left(self, w):  # x\u307e\u3067\u306e\u548c\u304cw\u3088\u308a\u5927\u304d\u304f\u306a\u308b\u6700\u5c0f\u306ex\u3001\u7dcf\u548c\u304cw\u4ee5\u4e0b\u306e\u5834\u5408n\u304c\u8fd4\u308b\n        n = self.size\n        r = 1\n        x = 0\n        if self.sum(0, n) <= w:\n            return n\n        while r < n:\n            r *= 2\n        le = r\n        while le > 0:\n            if (x + le < n and self.tree[x+le] <= w):\n                w -= self.tree[x+le]\n                x += le\n            le //= 2\n        return x\n\n    def lower_bound_right(self, w):  # x\u307e\u3067\u306e\u548c\u304cw\u4ee5\u4e0b\u3068\u306a\u308b\u6700\u5927\u306ex\u30010\u756a\u76ee\u304cw\u3088\u308a\u5927\u304d\u3044\u5834\u5408-1\u304c\u8fd4\u308b\n        return self.upper_bound_left(w) - 1\n\n    def upper_bound_right(self, w):  # x\u307e\u3067\u306e\u548c\u304cw\u672a\u6e80\u3068\u306a\u308b\u6700\u5927\u306ex\u30010\u756a\u76ee\u304cw\u4ee5\u4e0a\u306e\u5834\u5408-1\u304c\u8fd4\u308b\n        return self.lower_bound_left(w) - 1\n\nB = Bit(m*3)\n\nfor i in range(n-1):\n    a = A[i]\n    b = A[i+1]\n    if a == b:\n        continue\n    d = (b-a) % m\n    ra = d - 1\n    l1 = a + 2\n    r1 = l1 + ra\n    B.add(l1, 1)\n    B.add(r1, -1)\n    B.add(r1, -ra)\n    B.add(r1+1, ra)\n    # lm1 = r1\n    # rm1 = min(r1 + ra, a + m + 1)\n    # B.add(lm1, -1)\n    # B.add(rm1, 1)\n    # p = (r1-l1) - (rm1-lm1)\n    # print(\"p\",p)\n    # if p > 0:\n    #     B.add(rm1-1, -p)\n    #     B.add(rm1, p)\n    # B.print_sum()\n\nS = [B.sum(0, i+1) for i in range(3*m)]\nfor i in range(1, 3*m):\n    S[i] += S[i-1]\n\n# print(S)\n\nANS = [0] * m\nfor i in range(3*m):\n    ANS[i%m] += S[i]\n\nnow = 0\nfor i in range(n-1):\n    now += (A[i+1]-A[i]) % m\n\nprint(now - max(ANS))    ", "N, M = list(map(int, input().split()))        # N = \u914d\u5217\u30b5\u30a4\u30ba\nA = list(map(int, input().split()))\nimos = [0]*(2*M+1)\nimos2 = [0]*(2*M+1)\nres = 0\nfor i in range(N-1):\n    a, b =A[i]-1, A[i+1]-1\n    if a>b: b += M\n    res += b-a\n    if a+2>=b+1:\n        continue\n    imos[a+2] += 1\n    imos[b+1] -= 1\n    imos2[b+1] -= (b-a-1)\nP = [0]\nl = 0\nfor k, s in zip(imos, imos2):\n    l += k\n    P.append(P[-1] + l + s)\nQ = P[1:-1]\nR = [x+y for x, y in zip(Q[:M],Q[M:])]\nprint((res - max(R)))\n\n\n", "from itertools import accumulate\ndef acc(X): return list(accumulate(X))\n\nN, M = map(int, input().split())\nA = [int(a)-1 for a in input().split()]\n\nX = [0] * M # 1,1,1,...\nY = [0] * M # 1,2,3,...\n\ndef tri(l, r, a = 1):\n    if l < M:\n        Y[l] += a\n    if r + 1 < M:\n        Y[r+1] -= a\n        X[r+1] -= (r-l+1) * a\n\ndef box(l, r, a = 1):\n    if l < M:\n        X[l] += a\n    if r + 1< M:\n        X[r+1] -= a\n    \ndef calc(a, b):\n    if a <= b - 2:\n        tri(a+2, b)\n    elif a > b and a <= b + M - 2:\n        tri(a+2, M-1)\n        tri(0, b)\n        box(0, b, -a+M-2)\n        \n    # print(a, b, X, Y, rev())\n\ndef rev():\n    ret = acc(Y)\n    ret = [X[i] + ret[i] for i in range(M)]\n    return acc(ret)\n    \nans = 0\nfor i in range(1, N):\n    ans += (A[i] - A[i-1]) % M\n    calc(A[i-1], A[i])\n\nX = rev()\n# print(X)\nans -= max(X)\nprint(ans)", "from collections import defaultdict\n\n\nn, m = map(int, input().split())\nlight_list = list(map(int, input().split()))\nret = 0\n\ndiff_dict = defaultdict(int)\ncnt=0\nfor i in range(n-1):\n    if light_list[i+1] > light_list[i]:\n        diff_dict[light_list[i+1]+1] += light_list[i+1] - light_list[i]\n        ret += light_list[i+1] - light_list[i]\n    else:\n        diff_dict[light_list[i+1]+1] += m - (light_list[i] - light_list[i+1])\n        ret += light_list[i+1]\n        cnt += 1\n\n\nret_min = float('inf')\nfor i in range(1, m+1):\n    if i-1 == light_list[0]:\n        cnt += 1\n    if i-1 == light_list[-1]:\n        cnt -= 1\n    if diff_dict[i]:\n        ret += diff_dict[i]\n    ret -= cnt\n    ret_min = min(ret+cnt, ret_min)\n\n\n\n\nprint(ret_min)", "\nmax2 = lambda x,y: x if x > y else y\nmin2 = lambda x,y: x if x < y else y\n\nN,M = map(int,input().split())\nA = tuple(map(lambda x:int(x)-1,input().split()))\n\nA = [a for a,b in zip(A,A[1:]) if a != b]+[A[-1]]\n\n\ndef it():\n    events = [(a+1,-1) for a in A[:-1]] + [(a,p+1) for p,a in zip(A,A[1:])]\n    events.sort()\n    discount = 0\n    cnt = 0\n    for a,b in zip(A,A[1:]):\n        discount += max2(0, (b-a)%M - 1 - b)\n        cnt += int(b < a)\n    yield discount\n    last = 0\n    for a,p in events:\n        discount += (a-last)*cnt\n        yield discount\n        if p < 0:\n            cnt += 1\n        else:\n            cnt -= 1\n            discount -= (a-p)%M\n        last = a\n\n    yield discount\n\ntotal = sum((b-a)%M for a,b in zip(A,A[1:]))\nprint(total - max(it()))", "import itertools\ndef inpl(): return [int(i) for i in input().split()]\n\nn, m = inpl()\na = [int(i)-1 for i in input().split()]\ntans = [0]*2*m\nMi = []\nSi = 0\nfor a0, a1 in zip(a, a[1:]):\n    if a1 < a0:\n        a1 += m\n    tans[a0+2] += 1\n    tans[a1+1] -= 1\n    Mi.append((a1+1, 1+a0-a1))\n    Si += a1 - a0\ntans = list(itertools.accumulate(tans))\nfor x, v in Mi:\n    tans[x] += v\ntans = list(itertools.accumulate(tans))\nans = [0]*m\nfor i, v in enumerate(tans):\n    ans[i%m] += v\nprint(Si - max(ans))", "import itertools\nn,m=map(int,input().split())\na=list(map(int,input().split()))\ns=[0]*(2*m+2)\ntot=0\nfor l,r in zip(a,a[1:]):\n\ttot+=(r-l)%m\n\tif l>r:\n\t\tr+=m\n\tdif=r-l\n\tif dif>1:\n\t\ts[l+2]+=1\n\t\ts[r+1]-=dif\n\t\ts[r+2]+=dif-1\ns=list(itertools.accumulate(list(itertools.accumulate(s))))\nprint(tot-max(s[i]+s[m+i] for i in a))", "n,m=list(map(int,input().split()))\na=list(map(int,input().split()))\na=[a[i]-1 for i in range(n)]\n\nimos=[0 for i in range(m+1)]\nfor i in range(0,n-1):\n    s,g=a[i],a[i+1]\n    val=(g-s)%m\n    if val>1:\n        s=(s+2)%m\n        if s>g:\n            imos[s]+=-1\n            imos[m]+=1\n            imos[0]+=-1\n            imos[g+1]+=1\n        else:\n            imos[s]+=-1\n            imos[g+1]+=1\n        imos[(g+1)%m]+=val-1\n        imos[(g+1)%m+1]+=-(val-1)\n\nfor i in range(1,m+1):\n    imos[i]+=imos[i-1]\n\nfor i in range(1,m+1):\n    imos[i]+=imos[i-1]\n\nans=-1\nval=0\nfor i in range(m):\n    if val>=imos[i]:\n        ans=i\n        val=imos[i]\n\nval=0\nfor i in range(0,n-1):\n    s,g=a[i],a[i+1]\n    if (g-s)%m>1:\n        if g>=s:\n            if g>=ans>s:\n                val+=1+(g-ans)%m\n            else:\n                val+=(g-s)%m\n        else:\n            if ans>s or g>=ans:\n                val+=1+(g-ans)%m\n            else:\n                val+=(g-s)%m\n    else:\n        val+=(g-s)%m\n\n\nprint(val)\n", "N, M = list(map(int, input().split()))\na = list([int(x) - 1 for x in input().split()])\nP = 300005\nd1 = [0] * P\nd2 = [0] * P\ns = 0\nfor i in range(N - 1):\n    x = a[i]\n    y = a[i + 1]\n    if y < x:\n        y += M\n    s += y - x\n    if x + 1 < y:\n        d1[x + 2] += 1\n        d1[y + 1] -= 1\n        d2[y + 1] += y - x - 1\n        d1[M + x + 2] += 1\n        d1[M + y + 1] -= 1\n        d2[M + y + 1] += y - x - 1\n\nans = float('inf')\nfor i in range(3 * M):\n    if i > 0:\n        d1[i] += d1[i - 1]\n        d2[i] += d2[i - 1]\n    d2[i] -= d1[i]\n    ans = min(ans, s + d2[i])\n\nprint(ans)\n\n", "from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,datetime\nsys.setrecursionlimit(10**8)\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inpl(): return list(map(int, input().split()))\ndef inpl_s(): return list(input().split())\n\nN,M = inpl()\naa = inpl()\nfor i in range(N):\n\taa[i] -= 1\n\nyama_height = [0]*(2*M)\nyama_num = [0]*(2*M)\nSUM = 0\nfor i in range(1,N):\n\tna = aa[i]\n\tba = aa[i-1]\n\tif na < ba:\n\t\tna += M\n\tSUM += (na-ba)\n\tyama_height[na] += na - (ba + 1)\n\tyama_num[na] -= 1\n\tyama_num[ba+1] += 1\n\ntmp = 0\nfor i in range(2*M):\n\ttmp += yama_num[i]\n\tyama_num[i] = tmp\n\nans_list = [0]*(M)\ntmp = 0\nfor i in reversed(list(range(2*M))):\n\ttmp += yama_height[i]\n\ttmp -= yama_num[i]\n\tans_list[i%M] += tmp\n\nprint((SUM-max(ans_list)))\n", "import sys\nstdin = sys.stdin\n \nsys.setrecursionlimit(10**5) \n \ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x)-1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nfrom itertools import accumulate\n\nn,m = li()\na = list(li_())\n\nans = [0]*m\n# 1.\u524d\u51e6\u7406\n# 1-1.a[1:]\u306e\u4e2d\u306e x(0<= x < m)\u306e\u500b\u6570\ncnt_equal = [0]*m\nfor i in range(n-1):\n    cnt_equal[a[i+1]] += (((a[i+1]+m-a[i])%m) - 1)\n\n# 1-2.a[i]\u2192a[i+1]\u306e\u5185\u5074(\u4e21\u7aef\u9664\u304f)\u306b x(0<= x < m)\u304c\u5165\u308b\u56de\u6570\ncnt_inner = [0]*(2*m+1)\nfor i in range(n-1):\n    cnt_inner[a[i] + 1] += 1\n    cnt_inner[a[i] + (a[i+1]+m-a[i])%m] -= 1\n    \ncnt_inner = list(accumulate(cnt_inner))\ncnt_inner = [cnt_inner[i]+cnt_inner[i+m] for i in range(m)]\n\n\n# 2.fav == 1 \u306e\u3068\u304d\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\nfav = 0\nfor i in range(n-1):\n    ans[0] += min((a[i+1]+m-a[i])%m, 1+(a[i+1]+m-fav)%m)\n\n# 3.fav\u304c[2,m]\u306e\u3068\u304d\u3001fav-1\u306e\u60c5\u5831\u3092\u3082\u3068\u306b\u66f4\u65b0\nfor fav in range(1,m):\n    ans[fav] = ans[fav-1] + cnt_equal[fav-1] - cnt_inner[fav-1]\n    \nprint(min(ans))"]