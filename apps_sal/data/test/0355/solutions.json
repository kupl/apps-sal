["grid = [list(input()) for i in range(8)]\nb = 9\nw = 9\ntblock = False\nbblock = False\nfor r in range(8):\n    for c in range(8):\n        for ri in range(r):\n            if grid[ri][c] == 'B':\n                tblock = True\n        for ri in range(r+1, 8):\n            if grid[ri][c] == 'W':\n                bblock = True\n        if grid[r][c] == 'B' and not bblock:\n            b = min([abs(7-r), b])\n        elif grid[r][c] == 'W' and not tblock:\n            w = min([w, r])\n        tblock = False\n        bblock = False\nif b < w:\n    print('B')\nelse:\n    print('A')\n        \n", "z = []\nfor i in range(8):\n    z.append(input())\na,b = 9,9\nfor i in range(8):\n    for j in range(8):\n        if z[i][j] == 'W':\n            sedi = True\n            for r in range(0, i):\n                if z[r][j] == 'B':\n                    sedi = False\n                    break\n            if sedi:\n                a = min(a, i)\n        elif z[i][j] == 'B':\n            sedi = True\n            for r in range(i+1, 8):\n                if z[r][j] == 'W':\n                    sedi = False\n                    break\n            if sedi:\n                b = min(b, 7-i)\nprint('A' if a<=b else 'B')\n", "our = [input() for i in range(8)]\nresA = 100\nresB = 100\nfor i in range(8):\n    for j in range(8):\n        if our[i][j] == 'W':\n            curr = i\n            while curr > 0 and our[curr - 1][j] == '.':\n                curr -= 1\n            if curr == 0:\n                resA= min(resA, i)\n        elif our[i][j] == 'B':\n            curr = i\n            while curr < 7 and our[curr + 1][j] == '.':\n                curr += 1\n            if curr == 7:\n                resB = min(resB, curr - i)\nif resA <= resB:\n    print('A')\nelse:\n    print('B')", "s = [input().strip() for i in range(8)]\n\nd1 = []\nd2 = []\n\ndef check(x, y):\n    if s[x][y] == 'B':\n        for i in range(x + 1, 8):\n            if s[i][y] == 'W':\n                return False\n    elif s[x][y] == 'W':\n        for i in range(x - 1, -1, -1):\n            if s[i][y] == 'B':\n                return False\n    return True\n\nfor i in range(8):\n    for j in range(8):\n        if s[i][j] == 'B' and check(i, j):\n            d1.append(8 - i - 1)\n        elif s[i][j] == 'W' and check(i, j):\n            d2.append(i)\n\n\nif min(d1) < min(d2):\n    print(\"B\")\nelse:\n    print(\"A\")\n", "N = 8\na = [list(input()) for i in range(N)]\namin = N\nbmin = N\nfor c in range(8):\n    r = 0\n    while r < N and a[r][c] == '.':\n        r += 1\n    if r < N and a[r][c] == 'W':\n        amin = min(amin, r)\n    r = N - 1\n    while r >= 0 and a[r][c] == '.':\n        r -= 1\n    if r >= 0 and a[r][c] == 'B':\n        bmin = min(bmin, N - 1 - r)\nif amin <= bmin:\n    print('A')\nelse:\n    print('B')\n", "p = []\nfor i in range(8):\n    p.append(list(input()))\nminb = 999999999\nminch = 999999999\nfor i in range(8):\n    for t in range(8):\n        if p[i][t] == 'W':\n            s = 0\n            for e in range(i - 1, -1, -1):\n                if p[e][t] != '.':\n                    s = 999999\n                else:\n                    s += 1\n            minb = min(minb, s)\n        elif p[i][t] == 'B':\n            s = 0\n            for e in range(i + 1, 8):\n                if p[e][t] != '.':\n                    s = 999999\n                else:\n                    s += 1\n            minch = min(minch, s)\nif minb <= minch:\n    print('A')\nelse:\n    print('B')\n", "field = [list(input()) for i in range(8)]\nfor y in range(8):\n    for x in range(y + 1, 8):\n        field[x][y], field[y][x] = field[y][x], field[x][y]\n\nminW = 1000\nminB = 1000\nfor row in range(8):\n    w = None\n    for col in range(7, -1, -1):\n        if field[row][col] == \"W\":\n            w = col\n    if w != None and (\"B\" not in field[row][:w]):\n        minW = min(minW, w)\n    \n    b = None\n    for col in range(8):\n        if field[row][col] == \"B\":\n            b = col\n    if b != None and (\"W\" not in field[row][b:]):\n        minB = min(minB, 7 - b)\nif minB < minW:\n    print(\"B\")\nelse:\n    print(\"A\")", "import sys\n\n\n#sys.stdin = open(\"input.txt\")\n#sys.stdout = open(\"output.txt\", \"w\")\n\ntbl = []\nfor i in range(8):\n\ttbl.append(input())\n\nbestW = 10\nbestB = 10\n#print(tbl)\n\nfor i in range(8):\n\tfor j in range(8):\n\t\t#print(i, j)\n\t\tif tbl[i][j] == 'W':\n\t\t\tok = True\n\t\t\tfor k in range(i):\n\t\t\t\tif tbl[k][j] != '.':\n\t\t\t\t\tok = False\n\t\t\tif ok:\n\t\t\t\tbestW = min(bestW, i)\n\t\telif tbl[i][j] == 'B':\n\t\t\tok = True\n\t\t\tfor k in range(8-i-1):\n\t\t\t\tif tbl[i + k + 1][j] != '.':\n\t\t\t\t\tok = False\n\t\t\tif ok:\n\t\t\t\tbestB = min(bestB, 8 - i - 1)\n\n#print(bestW, bestB)\nif bestW <= bestB:\n\tprint('A')\nelse:\n\tprint('B')", "#!/usr/bin/env python3\n\nfrom sys import stdin\n\nlinecount = 8\nfield = []\n\n\ndef move_count(row, column, direction):\n    if direction == 1:\n        last = linecount\n    else:\n        last = -1\n\n    count = 0\n\n    for i in range(row + direction, last, direction):\n        if field[i][c] != '.':\n            return linecount\n        else:\n            count += 1\n\n    return count\n\n\n\nfor i in range(0, linecount):\n    field.append(list(stdin.readline().strip()))\n\na_moves = linecount\nb_moves = linecount\n\nfor r in range(0, linecount):\n    for c in range(0, linecount):\n        if field[r][c] == 'W':\n            count = move_count(r, c, -1)\n\n            if count < a_moves:\n                a_moves = count\n        elif field[r][c] == 'B':\n            count = move_count(r, c, 1)\n\n            if count < b_moves:\n                b_moves = count\n\nif a_moves <= b_moves:\n    print('A')\nelse:\n    print('B')\n", "A = [input() for i in range(8)]\nB = 9\nW = 9\nfor i in range(8):\n    for j in range(8):\n        if A[j][i] == \"W\":\n            W = min(W, j)\n            break\n        if A[j][i] == \"B\":\n            break\n    for j in range(7, -1, -1):\n        if A[j][i] == \"B\":\n            B = min(B, 8 - j)\n            break\n        if A[j][i] ==\"W\":\n            break\nif B <= W:\n    print(\"B\")\nelse:\n    print(\"A\")\n", "def checkA(i, j):\n    for k in range(i):\n        if arr[k][j] != '.':\n            return 1000\n    return i\n\ndef checkB(i, j):\n    for k in range(i + 1, 8):\n        if arr[k][j] != '.':\n            return 1000\n    return 7 - i\n\n#fin = open('a.in', 'r')\narr = []\nfor i in range(8):\n    #a = fin.readline().strip()\n    a = input()\n    arr.append(a)\nminA = 1000\nminB = 1000\nfor i in range(8):\n    for j in range(8):\n        if arr[i][j] == 'W':\n            minA = min(minA, checkA(i, j))\n        if arr[i][j] == 'B':\n            minB = min(minB, checkB(i, j))\nif minA <= minB:\n    print('A')\nelse:\n    print('B')\n", "white, black = [set() for _ in range(8)], [set() for _ in range(8)]\nfor row in range(8):\n    for col, c in enumerate(input().strip()):\n        if c == 'W':\n            white[col].add(row)\n        elif c == 'B':\n            black[col].add(row)\n\nmin_w, max_b = 7, 0\nfor col in range(8):\n    for w in white[col]:\n        if all(b > w for b in black[col]) and w < min_w:\n            min_w = w\n    for b in black[col]:\n        if all(b > w for w in white[col]) and b > max_b:\n            max_b = b\n#print(min_w, max_b)\n\nif min_w <= 7 - max_b:\n    print('A')\nelse:\n    print('B')", "import sys\n\n#sys.stdin = open('input.txt')\n\ntop = [-1] * 8\ntop_let = [''] * 8\ndown = [-1] * 8\ndown_let = [''] * 8\n\nfor i in range(8):\n    s = input().strip()\n    j = 0\n    while j < 8:\n        if s[j] == 'W' or s[j] == 'B':\n            if top[j] == -1:\n                top[j] = i\n                top_let[j] = s[j]\n\n            down[j] = i\n            down_let[j] = s[j]\n\n        j += 1\n\nmin_w = 10\nmax_b = -1\nfor i in range(8):\n    if top_let[i] == 'W' and min_w > top[i]:\n        min_w = top[i]\n\n    if down_let[i] == 'B' and max_b < down[i]:\n        max_b = down[i]\n\nif min_w > 8 - max_b - 1:\n    print('B')\nelse:\n    print('A')", "field = [input() for i in range(8)]\nfield = [[field[y][x] for y in range(8)] for x in range(8)]\n\nwa = float('+inf')\nwb = float('+inf')\n\n\nfor row in field:\n    row = ''.join(row)\n    if 'W' in row:\n        if ('B' in row) and row.index('W') > row.index('B'):\n            pass\n        else:\n            nwa = row.index('W')\n            wa = min(wa, nwa)\n    if 'B' in row:\n        if ('W' in row) and row.rindex('W') >  row.rindex('B'):\n            pass\n        else:\n            nwb = 7 - row.rindex('B')\n            wb = min(wb, nwb)\n\n\nif wa <= wb:\n    print('A')\nelse:\n    print('B')\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Oct 31 15:01:05 2015\n\n@author: gmarti\n\"\"\"\n\nimport sys\nfrom sys import stdin, stdout\n\n\nchess = []\nfor i in range(8):\n    chess.append([x for x in stdin.readline().rstrip().split()])\n\n\nwhite_dist = []\nblack_dist = []\n\nfor i in range(8):\n    for j in range(8):\n        if chess[i][0][j] == \"W\":\n            #check if black above\n            is_black_above = False\n            for k in range(0, i):\n                if chess[k][0][j] == \"B\":\n                    is_black_above = True\n            if not is_black_above:\n                white_dist.append(i)\n                \n        if chess[i][0][j] == \"B\":\n            #check if white below\n            is_white_below = False\n            for k in range(i+1,8):\n                if chess[k][0][j] == \"W\":\n                    is_white_below = True\n            if not is_white_below:\n                black_dist.append(7-i)\n                \n            \nif (min(white_dist) <= min(black_dist)):\n    stdout.write(\"A\\n\") \nelse:\n    stdout.write(\"B\\n\")\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n#   = input()\n#   = int(input())\n\n#() = (i for i in input().split())\n#   = [i for i in input().split()]\n\n#() = (int(i) for i in input().split())\na = [[ 0 for j in range(8) ] for i in range(8) ]\n\nfor i in range(8):\n    b   = input()\n    for j in range(8):\n        a[j][i]=b[j]\n\nstart = time.time()\n\nmW = 10\nmB = 10\n\nfor i in range(8):\n    flag = True\n    for j in range(8):\n        if a[i][j] == 'B':\n            flag = False\n            break\n        if a[i][j] == 'W':\n            break\n    if flag == False:\n        continue\n    if mW > j:\n        mW = j\n\nfor i in range(8):\n    flag = True\n    for j in range(8):\n        if a[i][7-j] == 'W':\n            flag = False\n            break\n        if a[i][7-j] == 'B':\n            break\n    if flag == False:\n        continue\n    if mB > j:\n        mB = j\n\n\nif mW <= mB:\n    print('A')\nelse:\n    print('B')\n#print(ans)\nfinish = time.time()\n#print(finish - start)\n", "board = [input(),input(),input(),input(),input(),input(),input(),input()]\nb = -99\nfor i in range(8):\n    for j in range(7,-1,-1):\n        piece = board[j][i]\n        if piece == 'W':\n            break\n        if piece == 'B':\n            b = max(b,j)\n            break\nb = 7-b\nw = 99\nfor i in range(8):\n    for j in range(8):\n        piece = board[j][i]\n        if piece == 'B':\n            break\n        if piece == 'W':\n            w = min(w,j)\nif b < w:\n    print('B')\nelse:\n    print('A')\n", "table = []\nfor _ in range(8):\n  table.append(input())\n\nocrA = []\nocrB = []\nA = 8\nB = 8\n\nimport re\nfor i in range(8):\n  for j in range(8):\n    if table[i][j] == \"W\":\n      ocrA.append(j)\n    elif table[i][j] == \"B\":\n      ocrB.append(j)\n\n  #print(ocrA, ocrB)\n\n  while ocrA != []:\n    asteps = 0\n    for j in range(i-1, -1, -1):\n      if table[j][ocrA[0]] != \".\":\n        asteps = -1\n        break\n      asteps += 1\n    if asteps != -1 and asteps < A:\n      A = asteps\n    ocrA.pop(0)\n  \n  while ocrB != []:\n    bsteps = 0\n    for j in range(i+1, 8):\n      if table[j][ocrB[0]] != \".\":\n        bsteps = -1\n        break\n      bsteps += 1\n    if bsteps != -1 and bsteps < B:\n      B = bsteps\n    ocrB.pop(0)\n\nif A <= B:\n  print(\"A\")\nelse:\n  print(\"B\")", "board = [input() for i in range(8)]\nA = B = 1000\nfor i in range(8):\n    for j in range(8):\n        if board[j][i] == 'B':\n            break\n        if board[j][i] == 'W':\n            A = min(A, j)\n    for j in range(8):\n        if board[7 - j][i] == 'W':\n            break\n        if board[7 - j][i] == 'B':\n            B = min(B, j)\n\nif A <= B:\n    print('A')\nelse:\n    print('B')", "x = []\nfor i in range(8):\n    x.append(input())\n# B\nB_mov = 1000\nfor i in range(8):\n    for j in range(8):\n        if x[i][j] == \"B\":\n            count = 0\n            for k in range(i + 1, 8):\n                if x[k][j] == \".\":\n                    count += 1\n                else:\n                    break\n            else:\n                if count < B_mov:\n                    B_mov = count\n            count = 0\n# W\nA_mov = 1000\nfor i in range(8):\n    for j in range(8):\n        if x[i][j] == \"W\":\n            count = 0\n            for k in range(i - 1, -1, -1):\n                if x[k][j] == \".\":\n                    count += 1\n                else:\n                    break\n            else:\n                if count < A_mov:\n                    A_mov = count\n            count = 0\nif A_mov > B_mov:\n    print(\"B\")\nelse:\n    print(\"A\")\n", "import sys\n\n\ndef main():\n    stdin = sys.stdin.read().split('\\n')\n    \n    A, B = [], []\n    for row in range(8):\n        for col in range(8):\n            if stdin[row][col] == 'W':\n                A.append((row, col))\n            if stdin[row][col] == 'B':\n                B.append((row, col))\n    \n    Acount = []\n    for a in A:\n        if all(stdin[i][a[1]] == '.' for i in range(a[0])):\n            Acount.append(a[0])\n    Bcount = []\n    for b in B:\n        if all(stdin[i][b[1]] == '.' for i in range(b[0]+1, 8)):\n            Bcount.append(7-b[0])\n    \n    if min(Acount) <= min(Bcount):\n        print('A')\n    else:\n        print('B')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "arr=[0]*8\nfor i in range(8):\n    arr[i]=input()\nwr,wc,br,bc=[[],[],[],[]]\nfor i in range(8):\n    for j in range(8):\n        if arr[i][j]=='B':\n            bc.append(j)\n            br.append(i)\n        if arr[i][j]=='W':\n            wc.append(j)\n            wr.append(i)\nbl=len(bc)\nwl=len(wc)\nwf=8\nbf=8\nfor i in range(bl-1,-1,-1):\n    c=bc[i]\n    temp=0\n    for j in range(7,-1,-1):\n        if arr[j][c]=='W':\n            temp=j\n            break\n    if temp>br[i]:\n        continue\n    bf=7-br[i]\n    break\nfor i in range(wl):\n    c=wc[i]\n    temp=8\n    for j in range(8):\n        if arr[j][c]=='B':\n            temp=j\n            break\n    if temp<wr[i]:\n        continue\n    wf=wr[i]\n    break\nif bf<wf:\n    print('B')\nelse:\n    print('A')\n\n\n", "b = [100 for i in range(8)]\nw = [100 for i in range(8)]\nb_temp = 0\nw_temp = 0\nb_min = 0\nw_min = 0\nfield = ['' for i in range (8)]\nfor i in range(8):\n    field[i] = input()\nfor i in range(8):\n    for j in range(8):\n        w_temp +=1\n        if field[j][i] == 'B':\n            w_temp = 100\n        if (field[j][i] == 'W')and(w_temp < 100):\n            w[i] = w_temp\n            w_temp = 100\n    w_temp = 0\nfor i in range(8):\n    for j in range(8):\n        b_temp += 1\n        if field[7-j][i] == 'W':\n            b_temp = 100\n        if (field[7-j][i] == 'B')and(b_temp < 100):\n            b[i] = b_temp\n            b_temp = 100\n    b_temp = 0        \nb_min = min(b)\nw_min = min(w)\nif b_min < w_min:\n    print('B')\nelse:\n    print('A')\n\n\n\n\n            \n", "a = []\nfor i in range(8):\n    a.append(input())\nwmin = 8\nbmin = -1\nfor i in range(8):\n    for j in range(8):\n        if (a[j][i] == 'W'):\n            wmin = min(wmin, j)\n            break\n        elif (a[j][i] == 'B'):\n            break\nfor i in range(8):\n    for j in range(7, 0, -1):\n        if (a[j][i] == 'B'):\n            bmin = max(bmin, j)\n            break\n        elif (a[j][i] == 'W'):\n            break\nif (7 - bmin < wmin):\n    print(\"B\")\nelse:\n    print(\"A\")\n"]