["def isPrime(n):\n\t# a prime(except 2 or 3) is of the form 6k-1 or 6k+1\n\tif n == 2 or n == 3:\n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0:\n\t\treturn False\n\ti = 5\n\tw = 2\n\tsqN = int(pow(n, .5))\n\twhile i <= sqN:\n\t\tif n % i == 0:\n\t\t\treturn False\n\t\ti += w\n\t\tw = 6 - w\n\treturn True\n\nn = int(input().strip())\narr = [0]*(n+1)\nc = 1\nfor i in range(2, n+1):\n\tif isPrime(i):\n\t\tarr[i] = c\n\t\tfor j in range(i+i, n+1, i):\n\t\t\tif not arr[j]:\n\t\t\t   arr[j] = c\n\t\tc += 1\nprint(*arr[2:])", "def SieveOfEratosthenes(n,ans):\n    c=1\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True):\n            ans[p]=c\n            for i in range(p * p, n+1, p): \n                prime[i] = False\n                ans[i]=c\n            c+=1\n        p += 1\n    return c\n\nn=int(input())\n\nans=[0]*(n+1)\nc=SieveOfEratosthenes(n,ans)\nfor i in range(2,n+1):\n    if ans[i]==0:\n        ans[i]=c\n        c+=1\nprint(' '.join(str(x) for x in ans[2:]))", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\n\nANS=[0]*(n+1)\n\nnow=1\n\nfor i in range(2,n+1):\n    if ANS[i]!=0:\n        continue\n    else:\n        for j in range(i,n+1,i):\n            if ANS[j]==0:\n                ANS[j]=now\n\n        now+=1\n\nprint(*ANS[2:])\n", "n=int(input())\nn+=1\np=[True]*n\npr=[1]*n\nm=1\nfor k in range(2,n):\n    if p[k]:\n        for i in range(k,n,k):\n            p[i]=False\n            pr[i]=m\n        m+=1\nprint(' '.join(map(str,pr[2:])))            \n", "#Bhargey Mehta (Sophomore)\n#DA-IICT, Gandhinagar\nimport sys, math, queue, bisect\n#sys.stdin = open(\"input.txt\", \"r\")\nMOD = 10**9+7\nsys.setrecursionlimit(1000000)\n\nn = int(input())\na = [True for i in range(n+1)]\nc = 1\nans = [-1 for i in range(n+1)]\nfor i in range(2, n+1):\n    if a[i]:\n        ans[i] = c\n        for j in range(i+i, n+1, i):\n            a[j] = False\n            ans[j] = c\n        c += 1\nprint(*ans[2:])", "n = int(input().strip())\n\ndp = [0] * (n + 1)\n\ncur_factor = 2\ncolor = 1\nwhile cur_factor <= n:\n    if not dp[cur_factor]:\n        multiple = cur_factor\n        while multiple <= n:\n            if not dp[multiple]:\n                dp[multiple] = color\n            multiple += cur_factor\n        color += 1\n    cur_factor += 1\nprint(' '.join(map(str, dp[2:n + 1])))", "n = int(input())\n\na = [0] * (n+1)\n\nca = 1\nfor i in range(2, n+1):\n    if a[i] != 0:\n        continue\n    m = 1\n    while i * m <= n:\n        a[i*m] = ca\n        m += 1\n    ca += 1\n\nprint(*a[2:n+1])\n", "n = int(input())\n\n\nans = [0]*(n+1)\ncount = 1\nfor i in range(2, n+1):\n    if ans[i] == 0:\n        for j in range(i, n+1, i):\n            ans[j] = count\n        count += 1\n\nprint(\" \".join(map(str, ans[2:])))\n", "import sys\ninput = sys.stdin.readline\n\n\nn = int(input())\nsieve = [0] * (n + 1)\nc = 1\nfor i in range(2, n + 1):\n    if not sieve[i]:\n        for j in range(i, n + 1, i):\n            sieve[j] = c\n        c += 1\nfor i in range(2, n + 1):\n    print(sieve[i], end=' ')\n", "def prost(i):\n    for x in range(2, int(i ** 0.5 + 1)):\n        if i % x == 0:\n            return x\n    return 1\n\nl = 1\nmass = []\nfor i in range(2, int(input()) + 1):\n    if prost(i) == 1:\n        mass.append(l)\n        l += 1\n    else:\n        mass.append(mass[prost(i) - 2])\nprint(*mass)", "import math\n\nprimes = [2]\nn = int(input())\ncurr_num = 1\nres = [1]\nfor i in range(3, n+1):\n  is_prime = True\n  limit = math.ceil(math.sqrt(i))\n  for p in primes: \n    if i % p == 0:\n      res.append(res[p-2]) \n      is_prime = False\n      break\n    if p > limit:\n      break\n  if is_prime:\n    curr_num += 1\n    res.append(curr_num)\n    primes.append(i)\n\nprint(\" \".join(map(str, res)))\n", "n = int(input())\nprime = [0, 0] + [1] * 99999\nans = [0] * 100001\nnewcnt = 1\nfor i in range(2, n + 1):\n\tif prime[i] == 0:\n\t\tcontinue\n\tans[i] = newcnt\n\tt = 2\n\twhile i * t <= n:\n\t\tprime[i * t] = 0\n\t\tans[i * t] = newcnt\n\t\tt += 1\n\tnewcnt += 1\nprint(*(ans[2:n+1]))\n\n\n", "import sys\ninput = sys.stdin.readline\n\n\nclass Problem:\n    def __init__(self):\n        pass\n\n    def solve(self):\n        print(self._solve())\n\n    def _solve(self):\n        n = int(input())\n        done = [0] * (n + 1)\n        v = 1\n        for i in range(2, n + 1):\n            if done[i]:\n                continue\n            k = 1\n            while k * i <= n:\n                done[k * i] = v\n                k += 1\n            v += 1\n\n        return ' '.join(str(x) for x in done[2:])\n\n\ndef main():\n    problem = Problem()\n    problem.solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nl = [0]*(n+1)\n\ngreat = 0\t\nfor i in range(2, n+1):\n\tif l[i] == 0:\n\t\tgreat += 1\n\t\tfor j in range(i, n+1, i):\n\t\t\tl[j] = great\nprint(*l[2:])\n\n\n# import math\n\n# for i in range(2, n+1):\n# \tfor j in range(i, n+1):\n# \t\tif math.gcd(i, j) == 1:\n# \t\t\tprint(i, j)\n# \t\t\tprint(l[i] != l[j])\n", "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\ndef __starting_point():\n    n = int(input())\n    a = [ 0 for i in range(n+1)]\n    i = 2\n    sc = 1\n    while i*i <= n:\n        if a[i] == 0:\n            a[i] = sc\n            j = i*i\n            while j <= n:\n                a[j] = sc\n                j += i\n            sc += 1\n        i += 1\n    for i in range(2,n+1):\n        if a[i] == 0:\n            a[i] = sc\n            sc += 1\n    print(' '.join(map(str , a[2:])))\n\n__starting_point()", "def make_prime_numbers(n):\n    is_prime = [True]*(n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(2 * i, n + 1, i):\n            is_prime[j] = False\n    prime_numbers = [i for i in range(n + 1) if is_prime[i]]\n    return prime_numbers\n  \nn = int(input())\nprime_list = make_prime_numbers(n)\nans = [0]*(n+1)\nfor i, num in enumerate(prime_list):\n    tmp_num = num\n    while tmp_num < n+1:\n        ans[tmp_num] = i + 1\n        tmp_num += num\nprint(\" \".join(map(str, ans[2:])))      \n\n", "n = int(input())\n\nans = [0] * (n + 1)\nai = 1\n\nprime = [True] * (n + 1)\np = 2\nwhile p <= n:\n    if prime[p]:\n        for i in range(p, n + 1, p):\n            prime[i] = False\n            ans[i] = ai\n        ai += 1\n    p += 1\n\nprint(' '.join(map(str, ans[2:])))\n", "def main():\n    n = int(input())\n    nums = [i for i in range(2, n + 1)]\n    a = [0 for i in range(2, n + 1)]\n    cur = 1\n    \n    for i in range(n - 1):\n        if a[i] == 0:\n            a[i] = cur\n            index = i\n            while index < n - 1:\n                a[index] = cur\n                index += nums[i]\n            cur += 1\n                \n    print(' '.join(map(str, a)))\n\nmain()", "def solve(n):\n    array = [0]*(n+1)\n    curr = 1\n    for i in range(2,n+1):\n        if array[i] == 0:\n            j = 1\n            while i*j <= n:\n                array[i*j] = curr\n                j += 1\n            curr += 1\n\n    for i in range(2,n+1):\n        print(array[i],end = ' ')\n\ndef main():\n    n = int(input())\n    solve(n)\n\nmain()\n", "n = int(input())\na = [0 for i in range(n + 1)]\ncnt = 0\nfor i in range(2, n + 1):\n  if not a[i]:\n    cnt += 1\n    for j in range(i, n + 1, i):\n      if not a[j]:\n        a[j] = cnt\nprint(' '.join(str(i) for i in a[2:]))\n", "\ndef main():\n    buf = input()\n    n = int(buf)\n    prime_map = dict()\n    a = []\n    for i in range(2, n+1):\n        first_prime = first_prime_factor(i)\n        if first_prime not in prime_map:\n            prime_map[first_prime] = len(prime_map)+1\n        a.append(prime_map[first_prime])\n    print(' '.join(list(map(str, a))))\n\ndef first_prime_factor(x):\n    n = x\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return x\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\n\ndef __starting_point():\n    n = int(input())\n    arr = [None] * (n + 3)\n    cnt = 1\n    for i in range(2, n + 1):\n        if not arr[i]:\n            for j in range(i, n + 1, i):\n                if not arr[j]:\n                    arr[j] = cnt\n            cnt += 1\n\n    print(\" \".join(map(str, arr[2:n+1])))\n\n__starting_point()", "def __starting_point():\n  n = int(input())\n  a = [0 for i in range(n + 1)]\n  m = 1\n  for i in range(2, len(a)):\n    if a[i] == 0:\n      a[i] = m\n      for j in range(i * i, len(a), i):\n        a[j] = m\n      m += 1\n  print(\" \".join([str(a[x]) for x in range(2, len(a))]))\n__starting_point()", "def main():\n    prime = [2]\n    for i in range(3, 318):\n        check = True\n        for j in prime:\n            check = check and (i % j != 0)\n        if check:\n            prime.append(i)\n    now = 67\n    mas = [-1, -2]\n    n = int(input())\n    for i in range(2, n + 1):\n        for jj in range(66):\n            j = prime[jj]\n            if i % j == 0:\n                print(jj + 1, end=' ')\n                break\n        else:\n            print(now, end=' ')\n            now += 1\nmain()", "n = int(input())\nprime = [True for i in range(n+1)]\nl = [-1 for i in range(n+1)]\np = 2\nc = 0\nwhile(p*p <= n):\n\tif(prime[p]==True):\n\t\tc+=1\n\t\tl[p] = c\n\t\tfor i in range(p*p,n+1,p):\n\t\t\tprime[i] = False\n\t\t\tl[i] = c\n\tp+=1\nfor i in range(2,n+1):\n\tif(l[i] == -1):\n\t\tc+=1\n\t\tprint(c,end=' ')\n\telse:\n\t\tprint(l[i],end=' ')"]