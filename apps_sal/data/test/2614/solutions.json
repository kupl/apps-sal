["import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    patties=[0]*n\n    mx=0\n    for p in a:\n        patties[p-1]+=1\n        mx=max(patties[p-1],mx)\n    mxs=0\n    for p in patties:\n        if p==mx:\n            mxs+=1\n    rest=n-mx\n    rest-=mxs\n    rest+=1\n    spots=mx-1\n    print(rest//spots)\n", "from collections import Counter\nimport math\n\ntestCases = int(input())\n\nfor _ in range(testCases):\n\n    n = int(input())\n    ar = list(map(int, input().split()))\n    cntr = dict(Counter(ar))\n    cntr = Counter(cntr.values())\n\n    mn = float(\"inf\")\n\n    for x in cntr:\n        if x!=1:\n            mn = min(mn, int(math.floor((n-cntr[x])/(x-1)))-1)\n            \n    print(mn)", "T = int(input())\n\nfor case in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    sums = {}\n    for cake in a:\n        if sums.get(cake):\n            sums[cake] += 1\n        else:\n            sums[cake] = 1\n\n    sums = list(sums.values())\n    sums.sort()\n\n    m = sums[-1]\n    nummax = 0\n    for sum in sums:\n        if sum == m:\n            nummax += 1\n\n    ans = (n-nummax)//(m-1) - 1\n    print(ans)\n", "from sys import stdin\nfor testcase in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    cnt = [0] * (n + 10)\n    for i in map(int, stdin.readline().split()):\n        cnt[i] += 1\n        \n    cnt.sort(reverse=True)\n    i = 0\n    while i < n and cnt[i] == cnt[0]:\n        i += 1\n    \n    group = [i - 1] * (cnt[0] - 1)\n    \n    cur = 0\n    for num in cnt[i:]:\n        while num > 0:\n            num -= 1\n            group[cur] += 1\n            cur = (cur + 1) % len(group)\n    print(min(group))\n    \n        \n", "from sys import stdin\nfrom collections import deque\nimport heapq\n\ntt = int(stdin.readline())\n\nfor loop in range(tt):\n\n    n = int(stdin.readline())\n    a = list(map(int,stdin.readline().split()))\n    dic = {}\n    for i in a:\n        if i not in dic:\n            dic[i] = 0\n        dic[i] += 1\n    \n\n    l = 0\n    r = n\n\n    while r-l != 1:\n\n        m = (l+r) // 2\n        \n        q = []\n        wait = deque([])\n        for i in dic:\n            heapq.heappush(q, (-1 * dic[i] , i) )\n\n        flag = True\n        for i in range(n):\n\n            while len(wait) > 0 and wait[0][0] < i-m:\n                last,count,num = wait.popleft()\n                heapq.heappush( q, (count,num))\n            \n            if len(q) == 0:\n                flag = False\n                break\n            \n            count,num = heapq.heappop(q)\n            count += 1\n            if count != 0:\n                wait.append( (i,count,num) )\n\n        if flag:\n            l = m\n        else:\n            r = m\n\n    print (l)\n", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freq = [0] * n\n    for e in arr:\n        freq[e-1] += 1\n    m = max(freq)\n    c = freq.count(m)\n    print((n-(m*c))//(m-1)+c-1)\n", "for i in ' '*int(input()):\n    n=int(input())\n    L=list(map(int,input().split()))\n    L.sort()\n    pt=0\n    M=[]\n    ct=0\n    while pt<n-1:\n        pt+=1\n        ct+=1\n        if L[pt]!=L[pt-1]:\n            M.append(ct)\n            ct=0\n    ct+=1\n    M.append(ct)\n    M.sort()\n    mx=max(M)\n    count=0\n    mxcount=0\n    for i in M:\n        if i==mx:mxcount+=1\n        else:count+=i\n    ans=mxcount+(count//(mx-1))-1\n    print(ans)", "import sys\n\nT = int(sys.stdin.readline().strip())\nfor t in range(T):\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    a.sort()\n    m = -1\n    mc = 0\n    c = 1\n    for i in range (1, n):\n        if a[i] == a[i - 1]:\n            c = c + 1\n        else:\n            if c > m:\n                m = c\n                mc = 1\n            elif c == m:\n                mc = mc + 1\n            c = 1\n    if c > m:\n        m = c\n        mc = 1\n    elif c == m:\n        mc = mc + 1\n    print((n - m * mc) // (m - 1) + mc - 1)\n", "t=1\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    data=[0]*(n+1)\n    for i in range(n):\n        data[a[i]]+=1\n    S=set(a)\n    m=len(S)\n\n    def cond(t):\n        q,r=n//(t+1),n%(t+1)\n        if r>m:\n            return False\n        check=0\n        for i in range(1,n+1):\n            if data[i]>q+1:\n                return False\n            elif data[i]==q+1:\n                check+=1\n        return r>=check\n\n    ok=0\n    ng=n\n    while ng-ok>1:\n        test=(ng+ok)//2\n        if cond(test):\n            ok=test\n        else:\n            ng=test\n\n    print(ok)\n", "from collections import *\nfor _ in range(int(input())):\n    n=int(input())\n    ai=list(map(int,input().split()))\n    count=Counter(ai)\n    mostc=count.most_common()\n    num=mostc[0][0]\n    numcount=mostc[0][1]\n    ans=-1\n\n    for num in count:\n        if count[num]==numcount:\n            count[num]=0\n            ans+=1\n    divisions=numcount-1\n    temp=0\n    for i in list(count.values()):\n        temp+=i\n        if temp>=divisions:\n            temp-=divisions\n            ans+=1\n    print(ans)\n", "from collections import Counter\nimport sys\ninput = sys.stdin.readline\n\nT = int(input())\n\nfor t in range(T):\n    N = int(input())\n    A = [int(_) for _ in input().split()]\n\n    cc = Counter(A)\n\n    mc = cc.most_common()\n    vm = mc[0][1]\n\n    nb = 0\n    for _, c in mc:\n        if c != vm:\n            break\n        nb += 1\n\n    nbc = nb * vm\n    left = N - nbc\n    spaces = vm - 1\n    min_blank = left//spaces\n    print(min_blank + nb -1)\n", "from collections import defaultdict as dd\nimport math\nimport sys\ninput=sys.stdin.readline\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\ndef solve():\n\tn  = nn()\n\tcakes = lm()\n\tcake_count = [0]*(n+10)\n\tfor cake in cakes:\n\t\tcake_count[cake]+=1\n\tmost = max(cake_count)\n\tk = 0\n\tfor num in cake_count:\n\t\tif num==most:\n\t\t\tk+=1\n\tprint(  (n-most*k)//(most-1) +(k-1)    )\n\n\nq = nn()\n\nfor _ in range(q):\n\tsolve()\n", "for _ in range(int(input())):\n    n = int(input())\n    x = [0]*n\n    l = list(map(int,input().split()))\n    for i in l:\n        x[i-1]+=1\n    x.sort()\n    x.reverse()\n    m = x[0]\n    ap = 0\n    for i in x:\n        if i==m: ap+=1\n        else: break\n    print(((n-ap)//(m-1))-1)", "# import sys; input = sys.stdin.buffer.readline\n# sys.setrecursionlimit(10**7)\nfrom collections import defaultdict\ncon = 10 ** 9 + 7; INF = float(\"inf\")\n\ndef getlist():\n\treturn list(map(int, input().split()))\n\n#\u51e6\u7406\u5185\u5bb9\ndef main():\n\tT = int(input())\n\tfor _ in range(T):\n\t\tN = int(input())\n\t\tA = getlist()\n\t\tD = defaultdict(int)\n\t\tfor i in A:\n\t\t\tD[i] += 1\n\n\t\tD2 = defaultdict(int)\n\t\tfor i in D:\n\t\t\tD2[D[i]] += 1\n\n\t\t# print(D2)\n\t\tval = 0\n\t\tnum = 0\n\t\tfor i in D2:\n\t\t\tif i > val:\n\t\t\t\tval = i\n\t\t\t\tnum = D2[i]\n\n\t\t# print(val, num)\n\t\tans = int((N - num) // (val - 1)) - 1\n\t\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()", "#!/usr/bin/env python3\n\nimport collections\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a = collections.Counter(a)\n        a = [a[i] for i in a]\n        a = sorted(a)[::-1]\n        bins = a[0] - 1\n        for i in range(1, len(a)):\n            if a[i] == a[0]:\n                a[i] -= 1\n        rem = sum(a[1:])\n        print(rem // bins)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\n\nT = int(input())\n\nfor i in range(T):\n  n = int(input())\n  #n,p,k = map(int, input().split())\n  a = list(map(int,input().split()))\n  #b = list(map(int,input().split()))\n  #a = input()\n  d = False\n  A = [0]*n\n  \n  for i in range(n):\n    A[a[i]-1]+=1\n\n  #A.sort(reverse=True)\n  ma = max(A)\n  man = A.count(ma)\n\n  #if man == 1:\n  print((n-man)//(ma-1)-1)\n  #print(n,ma,man)\n  \n", "import sys\n\ndef input():\n\treturn sys.stdin.readline().rstrip()\n\ndef input_split():\n\treturn [int(i) for i in input().split()]\n\ntestCases = int(input())\nanswers = []\nfor _ in range(testCases):\n\t#take input\n\tn = int(input())\n\tarr = input_split()\n\n\tcounts = {a:0 for a in arr}\n\tfor a in arr:\n\t\tcounts[a] += 1\n\n\ttemp = list(counts.values())\n\ttemp.sort()\n\ttemp.reverse()\n\n\tk = 0\n\tval = temp[0]\n\tptr = 1\n\twhile(ptr < len(temp)):\n\t\tif temp[ptr] != val:\n\t\t\tbreak\n\t\tptr += 1\n\t\tk += 1\n\n\tn = n - k \n\n\t# if val == 1:\n\t#val cant be 1\n\tans = (n - val)//(val - 1)\n\n\n\n\n\n\tanswers.append(ans)\n\nprint(*answers, sep = '\\n')\n", "mod=998244353\nfor _ in range (int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    d=dict()\n    for i in a:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    l=list()\n    for i in d:\n        l.append((d[i],i))\n    l.sort(reverse=True)\n    c=0\n    lim=l[0][0]\n    #print(lim)\n    extra=0\n    r=0\n    for i in l:\n        if i[0]==lim:\n            r+=1\n        else:\n            extra+=i[0]\n    if lim==1:\n        print(n)\n    else:\n        r+=extra//(lim-1)\n        print(r-1)"]