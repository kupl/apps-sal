["destination, max_gas_tank_volume, gas_prices_number = list(map(int, input().split()))\nstart_point = 0\ngas_prices = {start_point:0}\nfor i in range(gas_prices_number):\n    coordinate, price = list(map(int, input().split()))\n    gas_prices[coordinate] = price\npoints = sorted(list(gas_prices.keys()), reverse = True)\ncurrent_point = start_point\ncount = 0\ngas_tank_volume = max_gas_tank_volume\nreachable_points = []\nwhile current_point != destination:\n    farthest_reachable_point = current_point + max_gas_tank_volume\n    while points and points[-1] <= farthest_reachable_point:\n        reachable_points.append(points.pop())\n    if reachable_points:\n        cheaper_reachable_points = sorted([point for point in reachable_points if gas_prices[point] < gas_prices[current_point]])\n        next_point = cheaper_reachable_points[0] if cheaper_reachable_points else min(reachable_points, key = lambda point: gas_prices[point])\n        if farthest_reachable_point >= destination and (current_point == start_point or gas_prices[next_point] >= gas_prices[current_point]):\n            next_point = destination\n        else:\n            reachable_points = [point for point in reachable_points if point > next_point]\n    else:\n        if farthest_reachable_point >= destination:\n            next_point = destination\n        else:\n            count = -1\n            break\n    distantion = next_point - current_point\n    if next_point != destination and gas_prices[current_point] <= gas_prices[next_point]:\n        required_gas_volume = max_gas_tank_volume\n    else:\n        required_gas_volume = distantion\n    if required_gas_volume > gas_tank_volume:\n        count += (required_gas_volume - gas_tank_volume)*gas_prices[current_point]\n        gas_tank_volume = required_gas_volume\n    current_point = next_point\n    gas_tank_volume -= distantion\nprint(count)\n"]