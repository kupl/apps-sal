["n=int(input())\nS=input()\nx=y=0\nfor i,s in enumerate(S):\n  y=y-1 if s=='(' else y+1\n  x=max(x,y)\nprint('('*x+S+')'*(x-y))", "n = int(input())\ns = input()\nwhile True:\n  c = 0\n  for i in range(len(s)):\n    if s[i] == \"(\":\n      c += 1\n    else:\n      c -= 1\n    if c < 0:\n      s = \"(\" + s\n      break\n  if c > 0:\n    s = s + \")\"\n  if c == 0:\n    print(s)\n    break\n  \n", "def main():\n    N = int(input())\n    S = input()\n\n    count = 0\n    for i in range(N-1, -1, -1):\n        if S[i] == \")\":\n            count +=1\n        else:\n            if count:\n                count -= 1\n            else:\n                S += \")\"\n    S = \"(\"*count + S\n    print(S)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput = sys.stdin.readline\nfrom collections import deque\n\n\ndef read():\n    N = int(input().strip())\n    S = input().strip()\n    return N, S\n\n\ndef solve(N, S):\n    rank = 0\n    q = deque()\n    for s in S:\n        if rank == 0:\n            if s == \")\":\n                q.appendleft(\"(\")\n                q.append(\")\")\n            else:\n                q.append(\"(\")\n                rank += 1\n        else:\n            if s == \")\":\n                q.append(\")\")\n                rank -= 1\n            else:\n                q.append(\"(\")\n                rank += 1\n    while rank > 0:\n        q.append(\")\")\n        rank -= 1\n    return \"\".join(q)\n\n\ndef __starting_point():\n    inputs = read()\n    print((solve(*inputs)))\n\n__starting_point()", "N = int(input())\nS = T = input()\n\nwhile \"()\" in S:\n  S = S.replace(\"()\",\"\")\n\nprint(\"(\"*S.count(\")\")+T+S.count(\"(\")*\")\")", "n = int(input())\ns = input()\n\nl, r = 0, 0\nfor i in range(n):\n  if s[i] == \"(\":\n    r += 1\n  else:\n    if r:\n      r -= 1\n    else:\n      l += 1\n\nans = \"(\"*l + s + \")\"*r\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nS = input().rstrip()\nb = 0\nq = 0\n\nfor s in S:\n    if s == '(':\n        b +=1\n    else:\n        if b>0:\n            b -= 1\n        else:\n            q += 1\nprint(('('*q+S+')'*b))\n", "icase=0\nif icase==0:\n    n=int(input())\n    s=input()\nelif icase==1:\n    n=3\n    s=\"())\"\nelif icase==2:\n    n=6\n    s=\")))())\"\nelif icase==3:\n    n=8\n    s=\"))))((((\"\n\nl=[]\nr=[]\nsim=s[0]\nif sim==\"(\":\n    lidx=0\n    l.append(1)\n    ridx=-1\nelif sim==\")\":\n    lidx=0\n    l.append(0)\n    ridx=0\n    r.append(1)\n\nfor i in range(1,len(s)):\n    if s[i]==\"(\" and s[i-1]==\"(\":\n        l[lidx]+=1\n    elif s[i]==\"(\" and s[i-1]==\")\":\n        lidx+=1\n        l.append(1)\n    elif s[i]==\")\" and s[i-1]==\")\":\n        r[ridx]+=1\n    elif s[i]==\")\" and s[i-1]==\"(\":\n        ridx+=1\n        r.append(1)\n\nll=sum(l)\nrr=sum(r)\nds=ll-rr\n\nif len(l)>len(r):\n    r.append(0)\nxmin=0\nx=0\nfor i in range(len(l)):\n    x=x+l[i]-r[i]\n    xmin=min(x,xmin)\n    \nstrs=\"(\"*(-xmin) + s + \")\"*(ds-xmin)\nprint(strs)\n    \n", "n = int(input())\ns = input()\ncnt, L = 0, 0\nfor i in range(len(s)):\n    if s[i] == '(':\n        cnt += 1\n    else:\n        cnt -= 1\n\n    if cnt < 0:\n        L = min(L, cnt)\n\nans = '('*abs(L) + s\nR = ans.count('(') - ans.count(')')\nans += ')'*R\n\nprint(ans)\n", "n = int(input())\ns = input()\nl, r, c = 0, 0, 0\nfor a in s:\n    if a == '(':\n        c += 1\n    elif c:\n        c -= 1\n    else:\n        l += 1\nr = c\nprint((\"(\"*l + s + \")\"*r))\n", "N = int(input())\nmotoS = input()\nS = list(motoS)\nstart = 0\nend = 0\nfor i in range(N):\n    if S[i] == '(':\n        end += 1\n    else:\n        end -= 1\n    if end < 0:\n        start += 1\n        end = 0\nprint('('*start+motoS+')'*end)", "n=int(input())\ns=input()\n\nlp=0\nrp=0\nfor i in range(n):\n  if s[i]=='(':\n    rp+=1\n  else:\n    rp=rp-min(rp,1)\nfor i in range(n-1,-1,-1):\n  if s[i]==')':\n    lp+=1\n  else:\n    lp=lp-min(lp,1)\n\nprint('('*max(0,lp)+s+max(0,rp)*')')", "def main():\n    import sys\n\n    def input(): return sys.stdin.readline().rstrip()\n\n    n = int(input())\n    s = input()\n    cnt = 0\n    m = 0\n    for i in range(n):\n        if s[i] == '(':\n            cnt += 1\n        else:\n            cnt -= 1\n        m = min(m, cnt)\n    ans = '('*(-m)+s+')'*(cnt-m)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n=int(input())\ns=input()\nl=[]\nfor i in s:\n  if i==')':\n    if len(l)>0:\n      if l[-1]=='(':\n        l.pop()\n      else:\n        l.append(i)\n    else:\n      l.append(i)\n  else:\n    l.append(i)\nprint((l.count(')')*'(' + s +l.count('(')*')'))\n", "def main2():\n    input()\n    s = input()\n    pair = [-1] * 2\n    ans = s\n    idx = 0\n    for idx in range(0, len(s)):\n        for i in range(idx, len(s)):\n            if s[i] == '(':\n                pair[0] = i if pair[0] == -1 else pair[0]\n            elif s[i] == ')':\n                pair[1] = i\n                break\n        if pair[0] != -1 and pair[1] != -1:\n            s = s[:pair[0]] + ' ' + s[pair[0]+1:pair[1]] + ' ' + s[pair[1]+1:]\n        elif pair[0] != -1 and pair[1] == -1:\n            s = s[:pair[0]] + ' ' + s[pair[0]+1:]\n            ans = ans + ')'\n        elif pair[0] == -1 and pair[1] != -1:\n            s = s[:pair[1]] + ' ' + s[pair[1]+1:]\n            ans = '(' + ans\n        pair = [-1] * 2\n    print(ans)\n\n\ndef __starting_point():\n    main2()\n__starting_point()", "n = input()\ns = input()\nss = s\nfor i in range(50):\n  s = s.replace('()','')\nl = s.count(')')\nr = s.count('(')\nprint('('*l+ss+')'*r)", "def main():\n    n = int(input())\n    s = input()\n    l, r, c = 0, 0, 0\n    for a in s:\n        if a == '(':\n            c += 1\n        elif c:\n            c -= 1\n        else:\n            l += 1\n    r = c\n    print((\"(\"*l + s + \")\"*r))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys, math, re\nfrom functools import lru_cache\nfrom collections import defaultdict\nsys.setrecursionlimit(500000)\nMOD = 10**9+7\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef mi():\n    return map(int, input().split())\n\ndef ii():\n    return int(input())\n\ndef i2(n):\n    tmp = [list(mi()) for i in range(n)]\n    return [list(i) for i in zip(*tmp)]\n\ndef main():\n    N = ii()\n    S = input()\n    l = [0]\n    for i in range(N):\n        if S[i] == '(':\n            l.append(l[-1]+1)\n        else:\n            l.append(l[-1]-1)\n\n    m = min(l)\n\n    if m < 0:\n        l = list(map(lambda x: x-m, l))\n\n    print('('*l[0] + S + ')'*l[-1])\n\ndef __starting_point():\n    main()\n__starting_point()", "N=int(input())\nS=input()\ni=0\nhidari=str()\nmigi=str()\na=0\nwhile i<N:\n  if S[i]==\")\":\n    hidari+=\"(\"\n    i+=1\n  else:\n    break\nwhile i<N:\n  if S[i]==\"(\":\n    a+=1\n  else:\n    a-=1\n  i+=1\nif a<0:\n  hidari+=abs(a)*\"(\"\nelif a>0:\n  migi+=a*\")\"\ns=hidari+S+migi\n\n\ni=0\nhidari=str()\nmigi=str()\na=0\nwhile i<N:\n  if S[i]==\")\":\n    hidari+=\"(\"\n    i+=1\n  else:\n    break\nwhile i<N:\n  if S[i]==\"(\":\n    if a<0:\n      a=0\n    a+=1\n    mina=0\n  else:\n    a-=1\n    if a<0:\n      if mina>a:\n        hidari+=\"(\"\n  i+=1\nif a>0:\n  migi+=a*\")\"\nt=hidari+S+migi\nif len(s)==len(t):\n  print(s)\nelif len(s)>len(t):\n  print(s)\nelse:\n  print(t)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nN = int(input())\nS = input()\n\n\n# In[2]:\n\n\nl = 0\nr = 0\nfor s in S:\n    if s == \"(\":\n        r += 1\n    else:\n        if r > 0:\n            r -= 1\n        else:\n            l += 1\nans = \"\".join([\"(\"*l , S, \")\"*r])\nprint(ans)\n\n\n# In[ ]:\n\n\n\n\n", "n = int(input())\ns = input()\ns_ = s\n\nwhile s_.count('()'):\n    s_ = s_.replace('()', '')\n\nl = s_.count(')')\nr = len(s_) - l\n\nans = '(' * l + s + ')' * r\nprint(ans)\n", "n = int(input())\nS = input()\nT = S.replace('()', '')\nfor _ in range(50):\n  T = T.replace('()', '')\nprint('(' * T.count(')') + S + ')' * T.count('('))", "n = int(input())\ns = input()\nleft = 0\nright = 0\nfor i in range(n):\n    if s[i] == '(':\n        right += 1\n    else:\n        if right > 0:\n            right -= 1\n        else:\n            left += 1\nprint((left * '(' + s + right * ')'))\n", "N = int(input())\nS = input()\n\nl = 0\nr = 0\n\nL = ''\nfor i in S:\n    if i == '(':\n        l += 1\n    else:\n        r += 1\n\n    if l < r:\n        L += '('\n        l += 1\nR = ')'*(l-r)\nprint((L+S+R))\n", "def main():\n    n = int(input())\n    s = input()\n    l, r, c = 0, 0, 0\n    for a in s:\n        if a == '(':\n            c += 1\n        else:\n            if c:\n                c -= 1\n            else:\n                l += 1\n    r = c\n    print((\"(\"*l + s + \")\"*r))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    n = i_input()\n    s = input()\n\n    l = 0\n    r = 0\n\n    for i in s:\n        if i == \")\" and r > 0:\n            r -= 1\n        elif i == \")\":\n            l += 1\n        if i == \"(\":\n            r += 1\n    print((\"(\"*l + s + \")\"*r))\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import deque\n\nn=int(input())\ns=deque(input())\n\n\nleft=0\nright=0\nfor i in range(n):\n  if s[i]==\"(\":\n    left+=1\n  else:\n    if left>0:\n      left-=1\n    else:\n      right+=1\n    \n      \n\nfor _ in range(left):\n    s.append(\")\")\n    \n\nfor _ in range(right):\n    s.appendleft(\"(\")\n\nprint((\"\".join(s)))\n", "N = int(input())\nS = input()\n\nstack = []\nfor c in S:\n    if len(stack) > 0:\n        last = stack[-1]\n        if last == '(' and c == ')':\n            stack = stack[:-1]\n            continue\n    stack.append(c)\n\nleft = stack.count(')')\nright = stack.count('(')\n\nprint(left * '(' + S + right * ')')", "import re\n\nN = int(input())\ns = input()[:N]\ns_check = s\ns_check = re.sub('\\(\\)', '', s_check)\n\nwhile len(s_check) > 0:\n    for i in range(len(s_check)):\n        if s_check[i] == ')':\n            s = '(' + s\n            s_check = '(' + s_check\n            break\n        elif s_check[i] == '(':\n            break\n\n    for i in range(len(s_check)):\n        if s_check[-i-1] == '(':\n            s = s + ')'\n            s_check = s_check + ')'\n            break\n        elif s_check[-i-1] == ')':\n            break\n\n    s_check = re.sub('\\(\\)', '', s_check)\n\nprint(s)", "N = int(input())\nS = input()\nleft_cnt = 0\nright_cnt = 0\nfor s in S:\n    if s == '(':\n        left_cnt += 1\n    else:\n        if left_cnt == 0:\n            right_cnt += 1\n        else:\n            left_cnt -= 1\nS = '(' * right_cnt + S + ')' * left_cnt\nprint(S)\n", "N = int(input())\ns = input()\n\nkeep = 0\nans = ''\nfor i in range(N):\n    if s[i] == '(':\n        ans += '('\n        keep += 1\n    else:\n        if keep > 0:\n            ans += ')'\n            keep -= 1\n        else:\n            ans = ('(' + ans + ')')\nprint((ans + ')' * keep))\n", "def main():\n    N = int(input())\n    S = input()\n\n    count = 0\n    for i in range(N-1, -1, -1):\n        if S[i] == \")\":\n            count +=1\n        else:\n            if count:\n                count -= 1\n            else:\n                S += \")\"\n    S = \"(\"*count + S\n    print(S)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nS = input()\nl = r = 0\nL = \"\"\nfor i in S:\n    if i == \"(\":\n        l += 1\n    else:\n        r += 1\n    if l < r:\n        L += \"(\"\n        l += 1\nR = \")\"* (l-r)\nprint(L+S+R)", "_,S,l,r=input(),input(),'(',')'\nt=S\nwhile t.count(l+r):\n t=t.replace(l+r,'')\nprint(l*t.count(r)+S+r*t.count(l))", "N = int(input())\nS = input()\nnow = 0\nright = 0\nleft = 0\nadd_left = 0\nwhile now < N:\n    if S[now] == '(':\n        left += 1\n    else:\n        if left:\n            left -= 1\n        else:\n            add_left += 1\n    now += 1\nfor _ in range(add_left):\n    print('(', end='')\nprint(S, end='')\nfor _ in range(left):\n    print(')', end='')\n\n", "n = int(input())\ns = list(input())\nans = \"\"\n\nl = 0\nfor i in range(n):\n    ans += s[i]\n    if s[i] == \")\":\n        if l == 0:\n            ans = \"(\" + ans\n        else:\n            l -= 1\n    else:\n        l += 1\n\nans += (\")\"*l)\n\nprint(ans)\n", "n=int(input())\ns=input()\nans=[]\nminscore=0\nscore=0\nfor i in range(n):\n  if s[i]=='(':\n    score+=1\n  else:\n    score-=1\n  minscore=min(minscore,score)\nfinalscore=score\nfor i in range(-minscore):\n  ans.append('(')\nfor i in range(n):\n  ans.append(s[i])\nfor i in range(-minscore+finalscore):\n  ans.append(')')\nprint(''.join(ans))", "N=int(input())\nS=input()\nA=0 #(\nB=0 #)\n\nfor s in S:\n    if s=='(':\n        A+=1\n    elif s==')' and A>0:\n        A-=1\n    else:\n        B+=1\n\nprint('('*B+S+')'*A)", "N = input()\nS = input()\ns = S\nfor i in range(50):\n  S = S.replace('()','')\nl = S.count(')')\nr = S.count('(')\nprint('('*l+s+')'*r)", "import copy\nN = int(input())\nS = list(input())\nS_ans = copy.deepcopy(S)\napp = 0\nq = [0]\nsave = 0\nfor i in range(N):\n    if S[i] == '(':\n        q.append(q[-1] + 1)\n        \n    else:\n        q.append(q[-1] - 1)\n        if q[-1] == -1:\n            S_ans.insert(app + save,\"(\")\n            app += 1\n            q[-1] = 0\n\nfor i in range(q[-1]):\n    S_ans.append(\")\")\nprint(\"\".join(S_ans))", "n = int(input())\ns = input()\ncnt_l, cnt_r = 0, 0\n\nfor x in s:\n\tif x == \"(\":\n\t\tcnt_l += 1\n\telif cnt_l > 0:\n\t\tcnt_l -= 1\n\telse:\n\t\tcnt_r += 1\n\nprint((cnt_r * \"(\" + s + cnt_l * \")\"))\n", "# -*- coding: utf-8 -*-\n\"\"\"\n@author: H_Hoshigi\n\"\"\"\ndef main():\n    N = int(input())\n    S = input()\n\n    solo_close_no = 0\n    for i in range(N):\n        if S[-i-1] == \")\":\n            solo_close_no += 1\n        elif solo_close_no >= 1:\n            solo_close_no -= 1\n    \n    solo_open_no = 0\n    for i in range(N):\n        if S[i] == \"(\":\n            solo_open_no += 1\n        elif solo_open_no >= 1:\n            solo_open_no -= 1\n\n    answer = \"(\"*solo_close_no + S + \")\"*solo_open_no\n    print(answer)\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "n = int(input())\ns = input()\n\na = \"\"\n\nstack = []\n\nfor i in range(len(s)):\n    if s[i] == \"(\":\n        stack.append(\"(\")\n        a += \"(\"\n    elif s[i] == \")\" and len(stack) == 0:\n        stack.append(\")\")\n        a += \")\"\n    elif s[i] == \")\" and stack[-1] == \")\":\n        stack.append(\")\")\n        a += \")\"\n    else:  # s[i] == \")\" and stack[-1] == \"(\"\n        stack.pop(-1)\n        a += \")\"\n\nwhile len(stack) > 0:\n    if stack[len(stack) - 1] == \")\":\n        e = len(stack) - 1\n        s = e\n        while s - 1 >= 0 and stack[s - 1] == \")\":\n            s -= 1\n        a = \"(\" * (e - s + 1) + a\n        stack = stack[:s]\n    elif stack[len(stack) - 1] == \"(\":\n        e = len(stack) - 1\n        s = e\n        while s - 1 >= 0 and stack[s - 1] == \"(\":\n            s -= 1\n        a = a + \")\" * (e - s + 1)\n        stack = stack[:s]\n\nprint(a)\n", "N = int(input())\nS = input()\nT = list(1 if c == \"(\" else -1 for c in S)\nl, l_min = 0, 0\nr, r_min = 0, 0\nfor i in range(N):\n    l += T[i]\n    l_min = min(l_min, l)\n    r -= T[N - i - 1]\n    r_min = min(r_min, r)\nprint(\"\".join([\"(\" * -l_min, S, \")\" * -r_min]))", "N = int(input())\nS = str(input())\n\nl, r = 0, 0\np, m = 0, 0\nfor i in range(N):\n  if S[i] == \"(\":\n    l += 1\n  else:\n    r += 1\n  if l < r:\n    p += 1\n    l += 1\n\nm = l - r\n\nfor i in range(p):\n  print(\"(\", end = \"\")\nprint(S, end =\"\")\nfor i in range(m):\n  print(\")\", end = \"\")", "N = int(input())\nS = input()\nT = S\n\nfor n in range(N):\n  T = T.replace(\"()\",\"\")\n\nL = T.count(\"(\")\nR = T.count(\")\")\nS = R*\"(\"+S+L*\")\"\nprint(S)", "n = int(input())\ns = input()\n\nl = 0\nr = 0\np = []\nfor i in range(n):\n  if s[i] == \"(\": p.append(\"(\")\n  else:\n    if p == []: l += 1\n    else: p.pop()\nr = p.count(\"(\")\nprint(\"(\"*l + s + \")\"*r)", "_ = input()\nS = input()\n\nneeds_right = 0\nneeds_left = 0\n\nfor c in S:\n    if c == '(':\n        needs_right += 1\n    else:\n        if needs_right == 0:\n            needs_left += 1\n        else:\n            needs_right -= 1\n\nprint(('(' * needs_left + S + ')' * needs_right))\n\n", "n = int(input())\ns = list(input())\nd = [0]\nx = 0\n\nfor i in range(len(s)):\n    if s[i] == '(':\n        x += 1\n    else:\n        x -= 1\n    d.append(x)\n\nans = []\nx = min(d)\n\nfor i in range(max(0,(-1*x))):\n    ans.append('(')\n\nfor i in s:\n    ans.append(i)\n\nfor i in range(max(d[len(d)-1]-x,0)):\n    ans.append(')')\n\na = ''.join(ans)\n\nprint(a)\n", "with open(0) as f:\n    N, S = f.read().split()\nN = int(N)\nS += '_'\nleft = 0\nright = 0\ncnt = 0\nfor i in range(N):\n    cnt += {'(':1, ')':-1}[S[i]]\n    if S[i] == ')' and S[i+1] != ')':\n        if cnt < 0:\n            left += -cnt\n            cnt = 0\n    if i == N-1 and cnt > 0:\n        right += cnt\nans = '(' * left + S[:N] + ')' * right\nprint(ans)", "N=int(input())\nS=input()\n\ndef add1(S):\n  cum=[0]\n  for i in range(len(S)):\n    if S[i]=='(':cum.append(cum[-1]+1)\n    else:cum.append(cum[-1]-1)\n  if min(cum)>=0:return S\n  out = '('*(-min(cum))\n  out += S\n  return out\n\ndef add2(S):\n  cum=[0]\n  for i in range(len(S)):\n    if S[i]=='(':cum.append(cum[-1]+1)\n    else:cum.append(cum[-1]-1)\n      \n  if cum[-1]==0:return S\n  n = cum[-1]\n  out = S + ')'*n\n  return out\n\nS = add1(S)\nS = add2(S)\nprint(S)", "N = int(input())\nS = input()\n\nans = S\ncount = 0\n\nfor i in range(N):\n    if(S[i] == \"(\"):\n        count += 1\n    else:\n        count -= 1\n    \n    if(count<0):\n        ans = \"(\" + ans\n        count += 1\n\ncount = 0\n\nfor i in range(N-1,-1,-1):\n    if(S[i] == \"(\"):\n        count += 1\n    else:\n        count -= 1\n\n    if(count>0):\n        ans = ans + \")\"\n        count -= 1\n\nprint(ans)\n", "n = int(input())\ns = str(input())\nl = []\nleft, right = 0, 0\nfor c in s:\n    if c == ')':\n        if l == []:\n            left += 1\n        else:\n            l.pop()\n    else:\n        l.append(1)\nright = len(l)\nprint('(' * left + s + ')' * right)", "n = int(input())\ns = list(input())\n\ns=s[::-1]\nbalance = 0\ni = 0\nwhile i < len(s):\n    if s[i] == ')':\n        balance+=1\n    else:\n        balance-=1\n    if balance<0:\n        s.insert(0, ')')\n        balance+=1\n        i+=1\n    i+=1\n\n\nbalance = 0\ni = 0\ns=s[::-1]\nwhile i < len(s):\n    if s[i] == '(':\n        balance+=1\n    else:\n        balance-=1\n    if balance<0:\n        s.insert(0, '(')\n        balance+=1\n        i+=1\n    i+=1\n\nprint((''.join(s)))\n    \n", "def main():\n    #input data\n    import sys\n    input = lambda:sys.stdin.readline().strip()\n    N = int(input())\n    S = input()\n    \n    #solve\n    right=0\n    left=0\n\n    for i in range(N):\n        if S[i]=='(':\n            right+=1\n        else:\n            if right:\n                right-=1\n            else:\n                left+=1\n    print(left*'('+S+right*')')\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nS = input()\nl = 0\nr = 0\nfor i in range(N):\n    if S[i] == \")\":\n        r -= 1\n        if r < 0:\n            l += 1\n            r += 1\n    else:\n        r += 1\nprint(\"(\"*l+S+\")\"*r)", "n = int(input())\ns = list(str(input()))\n\n# (\nx = 0\ny = 0\nfor i in range(n):\n    if s[i] == '(':\n        x += 1\n\n    if s[i] == ')':\n        if x >= 1:\n            x -= 1\n        else:\n            y += 1\n\nfor _ in range(x):\n    s.append(')')\n\nfor _ in range(y):\n    s.insert(0,'(')\nans = ''.join(s)\nprint(ans)\n", "N = int(input())\nS = input()\nnS = S\nfor i in range(50):\n    nS = nS.replace(\"()\", \"\")\nr = nS.count(\")\")\nl = nS.count(\"(\")\nprint(\"(\" * r + S + \")\" * l)", "from math import ceil,floor,comb,factorial,gcd,pow,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf\nfrom itertools import accumulate,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heapify,heappop,heappush\nfrom queue import Queue,LifoQueue,PriorityQueue\nfrom copy import deepcopy\nfrom time import time\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn = INT()\ns = input()\n\ncount = 0\nfor i in range(n):\n    if s[i] == '(':\n        count += 1\n    else:\n        count = max(0, count-1)\n\ns += ')'*count\n        \ncount = 0\nfor i in range(n-1, -1, -1):\n    if s[i] == ')':\n        count += 1\n    else:\n        count = max(0, count-1)\n\ns = '('*count + s\nprint(s)", "n = int(input())\ns = input()\nR, L = 0, 0\nfor i in range(len(s)):\n    if s[i] == '(':\n        R += 1\n    else:\n        if R:\n            R -= 1\n        else:\n            L += 1\n\nprint(('('*L + s + ')'*R))\n", "n = int(input())\nN = input()\nL = 0\nR = 0\nnum = 0\nfor c in N:\n    if c == '(':\n        num += 1\n    else:\n        if num:\n            num -= 1\n        else:\n            L += 1\nR = num\n\nprint(('(' * L + N + ')' * R))\n", "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n = int(input())\n    S = input()\n\n    right = 0\n    left = 0\n    for i in range(n):\n        if S[i] == \"(\":\n            left += 1\n        else:\n            if left:\n                left -= 1\n            else:\n                right += 1\n    res = \"(\" * right + S + \")\" * left\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "n = int(input())\ns = list(input())\n\nc0 = 0\nc1 = 0\nz0 = 0\nz1 = 0\nfor i in range(n):\n    if s[i] == \"(\":\n        c0 += 1\n    else:\n        if c0 > 0:\n            c0 -= 1\n        else:\n            c1 += 1\nans = [\"(\"]*c1 + s + [\")\"]*c0\nprint(\"\".join(ans))", "def main():\n\tN = int(input())\n\tS = input()\n\tbrackets = [0, 0]\n\tfor i in range(len(S)):\n\t\tif S[i] == \")\":\n\t\t\tif brackets[0] > 0:\n\t\t\t\tbrackets[0] -= 1\n\t\t\telse:\n\t\t\t\tbrackets[1] += 1\n\t\telif S[i] == \"(\":\n\t\t\tbrackets[0] += 1\n\tprint(brackets[1] * \"(\" + S + brackets[0] * \")\")\n\nmain()", "n = int(input())\ns = list(input())\n\nc0 = 0\nc1 = 0\nz0 = 0\nz1 = 0\nfor i in range(n):\n    if s[i] == \"(\":\n        c0 += 1\n    else:\n        if c0 > 0:\n            c0 -= 1\n        else:\n            c1 += 1\nz0 = c1\ns = s[::-1]\nc0 = 0\nc1 = 0\nfor i in range(n):\n    if s[i] == \")\":\n        c0 += 1\n    else:\n        if c0 > 0:\n            c0 -= 1\n        else:\n            c1 += 1\nz1 = c1\ns = s[::-1]\nans = [\"(\"]*z0 + s + [\")\"]*z1\nprint(\"\".join(ans))", "\nicase=0\nif icase==0:\n    n=int(input())\n    s=input()\nelif icase==1:\n    n=3\n    s=\"())\"\nelif icase==2:\n    n=6\n    s=\")))())\"\nelif icase==3:\n    n=8\n    s=\"))))((((\"\n\nl=[]\nr=[]\nsim=s[0]\nif sim==\"(\":\n    lidx=0\n    l.append(1)\n    ridx=-1\nelif sim==\")\":\n    lidx=0\n    l.append(0)\n    ridx=0\n    r.append(1)\n\nfor i in range(1,len(s)):\n    if s[i]==\"(\" and s[i-1]==\"(\":\n        l[lidx]+=1\n    elif s[i]==\"(\" and s[i-1]==\")\":\n        lidx+=1\n        l.append(1)\n    elif s[i]==\")\" and s[i-1]==\")\":\n        r[ridx]+=1\n    elif s[i]==\")\" and s[i-1]==\"(\":\n        ridx+=1\n        r.append(1)\n\nll=sum(l)\nrr=sum(r)\nds=ll-rr\n\nif len(l)>len(r):\n    r.append(0)\nelif len(l)<len(r):\n    l.append(0)\nxmin=100\nx=0\nfor i in range(len(l)):\n    x=x+l[i]-r[i]\n    xmin=min(x,xmin)\nif xmin>0:\n    xmin=0\n    \nstrs=\"(\"*(-xmin) + s + \")\"*(ds-xmin)\nprint(strs)\n", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nn = I()\nS = input()\nleft = 0\nright = 0\nfor i in range(n):\n    if S[i] == '(':\n        right += 1\n    elif S[i] == ')':\n        if right >= 1:\n            right -=1\n        else:\n            left += 1\nprint(('('*left + S + ')'*right))\n", "#!/usr/bin/env python3\ninput()\ns = input()\nc = 0\nfor i in s:\n    if i == \"(\":\n        c += 1\n    else:\n        if c > 0:\n            c -= 1\nd = 0\nfor i in s[::-1]:\n    if i ==\")\":\n        d += 1\n    else:\n        if d > 0:\n            d -= 1\nprint((\"(\"*d+s+\")\"*c))\n\n\n", "n = int(input())\ns = input()\nans = s\nwhile s.count(\"()\")>0:\n    s = s.replace(\"()\", \"\")\ncnt_l = s.count(\")\")\ncnt_r = s.count(\"(\")\nprint(cnt_l * \"(\" + ans + cnt_r * \")\")", "N = int(input())\nS = input()\n\noS = S\nS = list(S)\n\ncnt = 0\nwhile True:\n    p_cnt = cnt\n    for i in range(len(S) - 1):\n        if S[i] == \"(\" and S[i + 1] == \")\":\n            S.pop(i + 1)\n            S.pop(i)\n            cnt += 1\n            break\n\n    if cnt == p_cnt:\n        break\n\ncnt_open = 0\ncnt_close = 0\n\nfor s in S:\n    if s == \"(\":\n        cnt_open += 1\n    else:\n        cnt_close += 1\n\nans = (\"(\" * cnt_close) + oS + (\")\" * cnt_open)\nprint(ans)\n", "N = int(input())\nS = input()\nl = r = 0\nL = \"\"\nfor i in S:\n    if i == \"(\":\n        l += 1\n    else:\n        r += 1\n    if l < r:\n        L += \"(\"\n        l += 1\nR = \")\"* (l-r)\nprint(L+S+R)", "n,s = open(0).read().split()\n\nimp_close = 0\nimp_open = 0\n\nfor char in s:\n    if char == '(':\n        imp_open += 1\n    else:\n        if imp_open:\n            imp_open -= 1\n        else:\n            imp_close += 1\n\nprint('('*imp_close + s + ')'*imp_open)", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N = int(input())\n    S = input().rstrip()\n\n    ans = \"\"\n    n_left = 0\n    n_right = 0\n    for s in S:\n        if s == \"(\":\n            n_left += 1\n        else:\n            if n_left > 0:\n                n_left -= 1\n            else:\n                n_right += 1\n\n    ans = \"\".join((\"(\" * n_right, S, \")\" * n_left))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\ns = input()\nss = s\nwhile ss.count('()'):\n    ss = ss.replace('()', '')\nleft, right = ss.count('('), ss.count(')')\nprint('(' * right + s + ')' * left)", "N = int(input())\nS = input()\n\nflg_l = False\ncnt_r = 0\ncnt_l = 0\n\nfor i in range(N):\n    if(S[i] == \"(\"):\n        cnt_r += 1\n        flg_l = True            \n    else:\n        if(flg_l):\n            if(cnt_r > 0):\n                cnt_r -= 1\n            else:\n                cnt_l += 1\n                flg_l = False\n        else:\n            cnt_l += 1\n    \nans = \"\"\n\nans += (\"(\"*cnt_l)+S+(\")\"*cnt_r)\nprint(ans)", "n = int(input())\ns = input()\n\nopens = 0\nl = 0\nfor i in range(n):\n    if s[i] == \"(\":\n        opens += 1\n    else:\n        opens -= 1\n\n        if opens < 0:\n            l += 1\n            opens = 0\n\nprint(\"(\"*l + s + \")\"*opens)", "n = int(input())\ns = input()\ncountr, countl = 0, 0\n\nfor i in range(n-1, -1, -1):\n    if s[i] == ')': countr += 1\n    elif countr > 0: countr -= 1\ns = '('*countr+s\nn = len(s)\n\nfor i in range(n):\n    if s[i] == '(': countl += 1\n    elif countl > 0: countl -= 1\ns += ')'*countl\n\nprint(s)\n", "from collections import deque\n\nN = int(input())\nS = input()\nque = deque(S)\nl = r = 0\n\nfor s in S:\n    if s == '(':\n        l += 1\n    else:\n        r += 1\n    if l < r:\n        que.appendleft('(')\n        l += 1\nelse:\n    ans = \"\".join(que)\n    if r < l:\n        ans = ans + \")\" * (l - r)\nprint(ans)", "# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict, namedtuple\nimport heapq\nfrom math import sqrt, factorial, gcd, ceil, atan, pi\ndef input(): return sys.stdin.readline()[:-1] # warning not \\n\n# def input(): return sys.stdin.buffer.readline()[:-1] # warning bytes\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\n# def input(): return sys.stdin.buffer.readline().decode('utf-8')\nimport string\nimport operator\nimport random\n# string.ascii_lowercase\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nMOD = int(1e9)+7\nINF = float('inf')\n\nsys.setrecursionlimit(int(1e6))\n\ndef solve():\n    n = int(input())\n    s = input()\n\n    stack = [-1]\n    for e in s:\n        if e == '(':\n            stack.append(e)\n        else:\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(e)\n    l = stack.count(')')\n    r = stack.count('(')\n    print(('(' * l + s + ')' * r))\n    \n\nT = 1\n# T = int(input())\nfor case in range(1,T+1):\n    ans = solve()\n\n\n\"\"\"\n\ndp[num_changes][blue_placed]\n\n\nabba\n\n\n\n\"\"\"\n", "n = int(input())\nS = input()\nlc = 0\nrc = 0\nfor s in S:\n    if s=='(':\n        rc += 1\n    else:\n        if rc:\n            rc -= 1\n        else:\n            lc += 1\nprint('('*lc+S+')'*rc)", "import sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef MI1(): return list(map(int1, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef MS(): return input().split()\ndef LS(): return list(input())\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\ndef printlist(lst, k=' '): print((k.join(list(map(str, lst)))))\nINF = float('inf')\n# from math import ceil, floor, log2\nfrom collections import deque\n# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np    # cumsum\n# from bisect import bisect_left, bisect_right\n\ndef solve():\n    N = II()\n    S = LS()\n    q = deque([])\n    # print(S)\n    cnt = 0\n    for s in S:\n        if s == '(':\n            cnt += 1\n            q.append(s)\n        else:   # ')'\n            if cnt >= 1:\n                q.append(s)\n                cnt -= 1\n            else:\n                q.appendleft('(')\n                q.append(s)\n    for _ in range(cnt):\n        q.append(')')\n\n    # print(q)\n    printlist(q, '')\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "n = int(input())\ns = input()\n\ncntr = 0\nfor i in range(n-1, -1, -1):\n    if s[i] == ')':\n        cntr += 1\n    elif cntr > 0:\n        cntr -= 1\ns = '(' * cntr + s\nn = len(s)\n\ncntl = 0\nfor i in range(n):\n    if s[i] == '(':\n        cntl += 1\n    elif cntl > 0:\n        cntl -= 1\ns += ')' * cntl\n\nprint(s)", "import sys\nfrom collections import deque\n\n\ndef IN_I(): return int(sys.stdin.readline().rstrip())\ndef IN_LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef IN_S(): return sys.stdin.readline().rstrip()\ndef IN_LS(): return list(sys.stdin.readline().rstrip().split())\n\n\nN = IN_I()\nS = IN_S()\nd = deque(S)\n\nl = 0\nfor i in range(N):\n    if S[i] == '(':\n        l += 1\n    else:\n        if l == 0:\n            d.appendleft('(')\n        else:\n            l -= 1\n\nr = 0\nfor i in range(N - 1, -1, -1):\n    if S[i] == ')':\n        r += 1\n    else:\n        if r == 0:\n            d.append(')')\n        else:\n            r -= 1\nprint((''.join(d)))\n", "import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N = int(input())\n    S = input().rstrip()\n\n    L = 0\n    R = 0\n    for s in S:\n        if s == \"(\":\n            R += 1\n        else:\n            if R > 0:\n                R -= 1\n            else:\n                L += 1\n\n    ans = \"\".join([\"(\" * L, S, \")\" * R])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nS = input()\nl = 0\nr = 0\nfor s in S:\n  if s == \"(\":\n    r += 1\n  else:\n    if r > 0:\n      r -= 1\n    else:\n      l += 1\nans = \"(\"*l + S + \")\"*r\nprint(ans)\n", "n = input()\ncnt = 0\nS = input()\nm = 0\nfor s in S:\n    if s == \"(\":\n        cnt += 1\n    else:\n        cnt -= 1\n    m = min(m, cnt)\n\nleft = -min(0, m)\nright = abs(cnt - m)\nprint((\"(\" * left + S + \")\" * right))\n", "N=int(input())\nS=input()\nx=0\nm=0\nfor i in range(N):\n    if S[i]=='(':\n        x+=1\n    else:\n        x-=1\n        m=min(x,m)\n\na=-m\nb=x-m\nprint(('('*a+S+')'*b))\n", "from collections import deque\n\nN = int(input())\nS = input()\n\nreserveL = deque()\nout = deque()\nq = deque()\n\nfor s in S:\n    if s == \"(\":\n        reserveL.append(s)\n        out.append(\"(\")\n    else:\n        # print(len(reserveL))\n        if len(reserveL) == 0:\n            out.appendleft(\"(\")\n            out.append(\")\")\n        else:\n            out.append(\")\")\n            reserveL.popleft()\n\n    # print(out)\n\n# print(out)\nwhile reserveL:\n    out.append(\")\")\n    reserveL.popleft()\nans = \"\"\nwhile out:\n    ans += out.popleft()\nprint(ans)\n", "from collections import deque\n\nn=int(input())\ns=deque(input())\n\n\nleft=0\nright=0\nfor i in range(n):\n  if s[i]==\"(\":\n    left+=1\n  else:\n    if left>0:\n      left-=1\n    else:\n      right+=1\n    \n      \n\nfor _ in range(left):\n    s.append(\")\")\n    \n\nfor _ in range(right):\n    s.appendleft(\"(\")\n\nprint(\"\".join(s))", "n = int(input())\ns = input()\ncounter_l = 0\npairs = 0\ndouble_check = set()\n\nfor i in range(n):\n    if s[i] == \"(\":\n        counter_l += 1\n        for j in range(i + 1, n):\n            if s[j] == \")\" and j not in double_check:\n                pairs += 1\n                double_check.add(j)\n                break\ncounter_r = n - counter_l\ns = s + \")\" * (counter_l - pairs)\ns = \"(\" * (counter_r - pairs) + s\n\nprint(s)\n", "n=int(input())\na=input()\ns=list(a)\nfrom copy import copy\nans=copy(s)\nleft=0\nright=0\nfor i in range(n):\n  if s[i]==\"(\":\n    left+=1\n  else:\n    if left==0:\n      right+=1\n    else:\n      left-=1\nprint(\"(\"*right+str(a)+\")\"*left)"]