["import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\nfrom heapq import heappop, heappush, heapify\nfrom collections import deque\nclass SWAG_Stack():\n    def __init__(self, F):\n        self.stack1 = deque()\n        self.stack2 = deque()\n        self.F = F\n        self.len = 0\n\n    def push(self, x):\n        if self.stack2:\n            self.stack2.append((x, self.F(self.stack2[-1][1], x)))\n        else:\n            self.stack2.append((x, x))\n        self.len += 1\n\n    def pop(self):\n        if not self.stack1:\n            while self.stack2:\n                x, _ = self.stack2.pop()\n                if self.stack1:\n                    self.stack1.appendleft((x, self.F(x, self.stack1[0][1])))\n                else:\n                    self.stack1.appendleft((x, x))\n        x, _ = self.stack1.popleft()\n        self.len -= 1\n        return x\n\n    def sum_all(self):\n        if self.stack1 and self.stack2:\n            return self.F(self.stack1[0][1], self.stack2[-1][1])\n        elif self.stack1:\n            return self.stack1[0][1]\n        elif self.stack2:\n            return self.stack2[-1][1]\n        else:\n            return float(\"inf\")\n\nn,p = map(int, input().split())\nt = list((j, i) for i,j in enumerate(map(int, input().split())))\nheapify(t)\n\nstack = SWAG_Stack(min)\n\nheap = []\ncur = 0\nans = [-1]*n\nhoge = 0\n# \u4eca\u8ffd\u52a0\u3067\u304d\u308b\u3084\u3064\u3067\u6700\u3082\u5c0f\u3055\u3044\u3082\u306e\u3092\u8ffd\u52a0\n# \u3053\u3053\u3067\u306a\u306b\u3082\u306a\u304b\u3063\u305f\u3089\uff1f\n#   \u6642\u9593\u3092\u5909\u66f4\u3059\u308b\n# \u6b21\u306e\u6642\u9593\u307e\u3067\u306b\u8ffd\u52a0\u3067\u304d\u308b\u3082\u306e\u3092\u8ffd\u52a0\n# \u6e05\u7b97\nwhile hoge != n:\n    if heap and stack.sum_all() > heap[0]:\n        j = heappop(heap)\n        stack.push(j)\n\n    if stack.len==0 and t:\n        cur = max(cur, t[0][0])\n\n    while t and t[0][0] <= cur+p:\n        ti, i = heappop(t)\n        if ti == cur+p:\n            # \u5f8c\u56de\u3057\n            heappush(heap, i)\n        else:\n            # \u3044\u307e\u8ffd\u52a0\u3067\u304d\u308b\u304b\u78ba\u8a8d\n            if stack.sum_all() > i:\n                stack.push(i)\n            else:\n                # \u5f8c\u56de\u3057\n                heappush(heap, i)\n\n    if stack.len:\n        j = stack.pop()\n        cur += p\n        ans[j] = cur\n        hoge += 1\nprint(*ans)"]