["class Solution:\n     def permute(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         all_permutes = []\n         self.permute_nums(all_permutes, nums, [])\n         return all_permutes\n     \n     def permute_nums(self, all_permutes, nums, cur_permute):\n         if len(nums) == 0:\n             all_permutes.append(cur_permute)\n             return\n \n         for i in range(len(nums)):\n             num = nums[i]\n \n             self.permute_nums(all_permutes, nums[0:i] + nums[i+1:len(nums)], cur_permute + [num])", "class Solution:\n     def permute(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         if not nums:\n             return []\n \n         nums.sort()\n         res = [nums[:]]\n         n = len(nums)\n         i = n-1\n         while i > 0:\n             if nums[i-1] < nums[i]:\n                 j = n-1\n                 while nums[j] < nums[i-1]:\n                     j -= 1\n                 nums[i-1], nums[j] = nums[j], nums[i-1]\n                 nums[i:] = sorted(nums[i:])\n                 res.append(nums[:])\n                 i = n-1\n             else:\n                 i -= 1\n \n         return res\n     \n     \n", "class Solution:\n \n     def permute(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         \n         res = []\n         \n         self.dfs(nums, [], res)\n         \n         return res\n             \n     def dfs(self, nums, path, res):\n         if not nums:\n             res.append(path)\n         \n         for i in range(len(nums)):\n             self.dfs(nums[:i] + nums[i+1:], path+[nums[i]], res)\n", "class Solution:\n     def permute(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         self.res = []\n         if not nums or len(nums) == 0:\n             return self.res\n         self.dfs(0, [], nums)\n         return self.res\n         \n     def dfs(self, i, path, remaining):\n         if len(remaining) == 0:\n             self.res.append(path)\n         for i in range(len(remaining)):\n             self.dfs(i+1, path + [remaining[i]], remaining[0:i]+remaining[i+1:])\n", "class Solution:\n     def permute(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         res = []\n         print(nums)\n         \n         def swap(a, i, j):\n             temp = a[i]\n             a[i] = a[j]\n             a[j] = temp\n         \n         def helper(index, path):\n             if index == len(nums) - 1:\n                 res.append(path.copy())\n             for i in range(index, len(nums)):\n                 swap(path, index, i)\n                 helper(index + 1, path.copy())\n             \n         helper(0, nums)\n         print(nums)\n         return res"]