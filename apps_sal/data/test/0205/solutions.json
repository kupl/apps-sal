["n, k = map(int, input().split())\na = []\ni = 2\nwhile (i * i <= k):\n    if (k % i == 0):\n        a.append([i, 0])\n        while (k % i == 0):\n            a[len(a) - 1][1] += 1\n            k //= i\n    i += 1\nif (k > 1):\n    a.append([k, 1])\nans = 10 ** 20\nfor i in a:\n    cnt = 0\n    x = i[0]\n    while (x <= n):\n        cnt += n // x;\n        x *= i[0]\n    ans = min(ans, cnt // i[1])\nprint(ans)", "b,a=list(map(int,input().split()))\ndelit=[]\nst=[]\ni=2\nuk=-1\nwhile i*i<=a:\n    if a%i==0:\n        delit.append(i)\n        uk+=1\n        st.append(0)\n        while a%i==0:\n            a//=i\n            st[uk]+=1\n    i+=1\nif a>1:\n    delit.append(a)\n    st.append(1)\ncoun=0\ncolvo=[0]*len(st)\ncop=b\nfor i in range(len(delit)):\n    while cop>=delit[i]:\n        colvo[i]+=cop//delit[i]\n        cop//=delit[i]\n    cop=b\ncoun=colvo[i]//st[i]\nfor i in range (len(st)):\n    if colvo[i]//st[i]<coun:\n        coun=colvo[i]//st[i]\nprint(coun)\n", "def factorial_1(n: int):\n    for i in range(2, n+1):\n        if i > n**0.5:\n            return n\n        elif n % i == 0:\n            return i\n\n\ndef factorial_2(n: int):\n    res = dict()\n    while n > 1:\n        f_now = factorial_1(n)\n        n //= f_now\n        res[f_now] = res.get(f_now, 0) + 1\n    return res\n\n\nn, k = map(int, input().split())\nf_k, x = factorial_2(k), float('inf')\nfor key, val in f_k.items():\n    qua_f, pow_ = 0, key\n    while pow_ <= n:\n        qua_f += n//pow_\n        pow_ *= key\n    x = min(x, qua_f//val)\nprint(x)", "from math import sqrt\ndef fact(a):\n    nonlocal g\n    nonlocal h\n    for i in range(2, int(sqrt(a)) + 1):\n        k = 0\n        if a % i == 0:\n            g.append(i)\n        while a % i == 0:\n            a = a // i\n            k += 1\n        if k != 0:\n            h.append(k)\n    if a > 1:\n        g.append(a)\n        h.append(1)\nn, k = list(map(int, input().split()))\ng = []\nh = []\nf = fact(k)\nmini = 100000000000000000000000000000000000000000000000000000000000\nfor i in range(len(g)):\n    k1 = 0\n    v = g[i]\n    while n // g[i] > 0:\n        k1 += n // g[i]\n        g[i] *= v\n    if k1 // h[i] < mini:\n        mini = k1 // h[i]\nprint(mini)\n", "'''input\n5 2\n5 10\n6 9\n38 11\n'''\nn, b = map(int, input().split())\n\npm = 1\nk = 0\ni = 2\nans = float(\"inf\")\n\ndef calc(n, b, k):\n\tres = 0\n\tt = pm\n\twhile t <= n:\n\t\tres += n // t\n\t\tt *= pm\n\treturn res // k\n\nwhile i * i <= b:\n\tif b % i == 0:\n\t\tpm = i\n\t\tk = 0\n\t\twhile b % i == 0:\n\t\t\tb //= i\n\t\t\tk += 1\n\t\tans = min(ans, calc(n, b, k))\n\ti += 1\nif b > 1:\n\tpm = b\n\tk = 1\n\tans = min(ans, calc(n, b, k))\nprint(ans)", "def start(x, cnt):\n    nonlocal ans\n    i = x\n    res = 0\n    while i <= n:\n        res += n // i\n        i *= x\n    ans = min(ans, res // cnt)\n\nn, b = map(int, input().split())\nnb = b\nans = 1e20\ni = 2\nwhile i * i <= b:\n    if nb % i == 0:\n        cnt = 0\n        while nb % i == 0:\n            cnt += 1\n            nb //= i\n        start(i, cnt)\n    i += 1\nif nb > 1:\n    start(nb, 1)\nprint(ans)", "n, b = map(int, input().split())\nans = 0\nd = 2\nbf = b\nfactors = []\nwhile d * d <= b:\n\tif b % d == 0:\n\t\tcnt = 0\n\t\twhile b % d == 0:\n\t\t\tcnt += 1\n\t\t\tb = b // d\n\t\tfactors.append((d, cnt))\n\td += 1\n\nif b > 1:\n\tfactors.append((b, 1))\n\ndef calc(x, y):\n\tyst = y\n\tans = 0\n\twhile yst <= x:\n\t\tans += x // yst\n\t\tyst *= y\n\treturn ans\n\nln = len(factors)\nans = min(calc(n, p[0]) // p[1] for p in factors)\nprint(ans)", "from math import sqrt\nn, b= [int(i) for i in input().split()]\ndef geg(n, k, l):\n    if k<=n:\n        return n//k+geg(n, k*l, l)\n    else:\n        return 0\ndef fact(b, n):\n    D={}\n    for i in range(2, round(sqrt(b))+1):\n        if b%i == 0:\n            s=0\n            while b%i == 0:\n                b=b//i\n                s+=1\n            D[i]=s\n    L=[]\n    for i in list(D.keys()):\n        L.append(geg(n, i, i)//D[i])\n    if b!=1:\n        L.append(geg(n, b, b))\n    m=L[0]\n    for i in L:\n        if m>i: m=i\n    return m\nprint(fact(b, n))\n", "def __starting_point():\n    n, b = (int(x) for x in input().split())\n\n    primes = dict()\n\n    bcopy = b\n    for i in range(2, int(bcopy ** 0.5) + 1):\n        cnt = 0\n        while bcopy % i == 0:\n            bcopy //= i\n            cnt += 1\n        if cnt > 0:\n            primes[i] = cnt\n    if bcopy > 1:\n        primes[bcopy] = 1\n    # print(primes)\n\n    prime___npow = {}\n    count = 0\n    for prime in primes:\n        pw = 1\n        while prime ** pw <= n:\n            count += n // prime ** pw\n            pw += 1\n        prime___npow[prime] = count\n        count = 0\n    # print(prime___npow)\n    MAX = 10 ** 18\n    count = MAX\n\n    for prime in primes:\n        curr = prime___npow[prime] // primes[prime]\n        count = min(count, curr)\n    if count == MAX:\n        count = 0\n    print(count)\n__starting_point()", "n,b = list(map(int,input().split()))\nif n == 1:\n    print(0)\n    return\na = []\nx = b\ni = 2\nwhile i*i <= x:\n    if x%i == 0:\n        cnt = 0\n        while x%i == 0:\n            x //= i\n            cnt += 1\n        a.append([i,cnt])\n    if i == 2:\n        i += 1\n    else:\n        i += 2\nif x > 1:\n    a.append([x,1])\n\nans = 10**20\n\nfor i in a:\n    lol = i[0]\n    cur = i[0]\n    cnt = 0\n    while cur <= n:\n        cnt += n//cur\n        cur = cur*lol\n    cnt //= i[1]\n    ans = min(ans,cnt)\nprint(ans)    \n", "n, b = map(int, input().split())\ncnt = {}\ni = 2\nwhile i * i <= b:\n    while b % i == 0:\n        cnt[i] = cnt.setdefault(i, 0) + 1\n        b //= i\n    i += 1\nif b > 1:\n    cnt[b] = 1\n\ndef get(x):\n    ret = 0\n    d = x\n    while d <= n:\n        ret += n // d\n        d *= x\n    return ret\n\nans = int(1e30)\nfor (a, t) in cnt.items():\n    ans = min(ans, get(a) // t)\nprint(ans)", "def f(p, q, n):\n    w = p\n    r = 0 \n    while w <= n:\n        r += n // w\n        w *= p\n    return r // q\nn,k=list(map(int, input().split()))\ni = 2\ns = -1\nwhile i*i <= k:\n    if k % i == 0:\n        cnt = 0\n        while k % i == 0:\n            k //= i\n            cnt += 1\n        j = f(i, cnt, n)\n        if s < 0 or s > j:\n            s = j\n    i += 1\nif k > 1:\n    j = f(k, 1, n)\n    if s > j or s < 0:\n        s = j\nprint(s)\n", "n,x=list(map(int,input().split()))\n\nimport math \nL=int(math.sqrt(x))\n\nFACT=dict()\n\nfor i in range(2,L+2):\n    while x%i==0:\n        FACT[i]=FACT.get(i,0)+1\n        x=x//i\n\nif x!=1:\n    FACT[x]=FACT.get(x,0)+1\n\n\nANS=float(\"inf\")\nfor f in FACT:\n    ANS_f=0\n    x=f\n\n    while x<=n:\n        ANS_f+=n//x\n        x*=f\n\n    #print(f,ANS_f)\n\n    ANS=min(ANS,ANS_f//FACT[f])\n\nprint(ANS)\n\n    \n    \n", "n, b = [int(x) for x in input().split()]\ni = 2\nans = -1\ndef update(p):\n    cnt = 0\n    tmp = p\n    while tmp<=n:\n        cnt += n//tmp\n        tmp *= p\n    return cnt\nwhile i*i<=b:\n    if b%i==0:\n        q = 0\n        while b%i==0:\n            b //= i\n            q += 1\n        cnt = update(i)\n        if ans==-1:\n            ans = cnt//q\n        else:\n            ans = min(ans,cnt//q)\n    i += 1\nif b>1:\n    cnt = update(b)\n    if ans==-1:\n        ans = cnt\n    else:\n        ans = min(ans,cnt)\nprint(ans)\n", "import time\ndef primeFactor(N):\n    i = 2\n    ret = {}\n    n = N\n    mrFlg = 0\n    if n < 0:\n        ret[-1] = 1\n        n = -n\n    if n == 0:\n        ret[0] = 1\n    while i**2 <= n:\n        k = 0\n        while n % i == 0:\n            n //= i\n            k += 1\n            ret[i] = k\n        if i == 2:\n            i = 3\n        else:\n            i += 2\n        if i == 101 and n >= (2**20):\n            def findFactorRho(N): # Prime\ufffd\u0142\u0202\ufffd\ufffd\ufffd\ufffd\u0182\ufffd\ufffdm\ufffdF\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0302\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0182\ufffd\ufffd\ufffdB\n                def gcd(a, b):\n                    if b == 0:\n                        return a\n                    else:\n                        return gcd(b, a % b)\n                def f(x, c):\n                    return ((x ** 2) + c) % N\n                semi = [N]\n                for c in range(1, 11):\n                    x=2\n                    y=2\n                    d=1\n                    while d == 1:\n                        x = f(x, c)\n                        y = f(f(y, c), c)\n                        d = gcd(abs(x-y), N)\n                    if d != N:\n                        if isPrimeMR(d):\n                            return d\n                        elif isPrimeMR(N//d):\n                            return N//d\n                        else:\n                            semi.append(d)\n\n                semi = list(set(semi))\n                print (semi)\n                s = min(semi)\n                for i in [2,3,5,7]:\n                    while True:\n                        t = int(s**(1/i)+0.5)\n                        if t**i == s:\n                            s = t\n                            if isPrimeMR(s):\n                                return s\n                        else:\n                            break\n\n                i = 3\n                while True:\n                    if s % i == 0:\n                        return i\n                    i += 2\n                    \n            while True:\n                if isPrimeMR(n):\n                    ret[n] = 1\n                    n = 1\n                    break\n                else:\n                    mrFlg = 1\n                    j = findFactorRho(n)\n                    k = 0\n                    while n % j == 0:\n                        n //= j\n                        k += 1\n                        ret[j] = k\n                if n == 1:\n                    break\n                    \n    if n > 1:\n        ret[n] = 1\n    if mrFlg > 0:\n        def dict_sort(X):\n            Y={}\n            for x in sorted(X.keys()):\n                Y[x] = X[x]\n            return Y\n        ret = dict_sort(ret)\n    return ret\n\ndef isPrime(N):\n    if N <= 1:\n        return False\n    return sum(primeFactor(N).values()) == 1\n\ndef isPrimeMR(n):\n    if n == 2: return True\n    if n == 1 or n & 1 == 0: return False\n\n    d = (n - 1) >> 1\n    while d & 1 == 0:\n        d >>= 1\n\n    for a in [2, 3, 5, 7, 11, 13, 17, 19, 23]:\n        t = d\n        y = pow(a, t, n)\n\n        while t != n - 1 and y != 1 and y != n - 1:\n            y = (y * y) % n\n            t <<= 1\n\n        if y != n - 1 and t & 1 == 0:\n            return False\n\n    return True        \n\ndef findPrime(N):\n    if N < 0:\n        return -1\n    i = N\n    while True:\n        if isPrime(i):\n            return i\n        i += 1\n\ndef divisors(N):\n    pf = primeFactor(N)\n    ret = [1]\n    for p in pf:\n        ret_prev = ret\n        ret = []\n        for i in range(pf[p]+1):\n            for r in ret_prev:\n                ret.append(r * (p ** i))\n    return sorted(ret)\n\nn, b = list(map(int, input().split()))\n\n# n = 10**18\n# b = 2\npf = primeFactor(b)\n# print(pf)\n\nma = 0\nX = []\nfor i in pf:\n    ma = max(ma, i ** pf[i])\n    X.append([i, pf[i], 0])\n\nmi = 10**30\nfor i in range(len(X)):\n    j = 1\n    while X[i][0]**j <= n:\n        X[i][2] += n // (X[i][0]**j)\n        j += 1\n        \n    mi = min(mi, X[i][2]//X[i][1])\n    \nprint(mi)\n", "n, b = map(int, input().split())\nfac = []\ni = 2\nwhile i * i <= b:\n    if b % i == 0:\n        fac.append([i, 0])\n        while b % i == 0:\n            fac[-1][1] += 1\n            b //= i\n    i += 1\n\nif b > 1:\n    fac.append([b, 1])\n\nans = int(1e20)\n\nfor i in fac:\n    cnt = 0\n    x = i[0]\n    while x <= n:\n        cnt += n // x\n        x *= i[0]\n\n    ans = min(ans, cnt // i[1])\n\nprint(ans)", "from sys import setrecursionlimit, stderr\nfrom functools import reduce\nfrom itertools import *\nfrom collections import defaultdict, Counter\nfrom bisect import bisect\n\nsetrecursionlimit(10**7)\n\ndef read():\n  return int(input())\n\ndef reads():\n  return [int(x) for x in input().split()]\n\ndef primes(n):\n    sieve = [True] * (n//2)\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i//2]:\n            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)\n    return [2] + [2*i+1 for i in range(1,n//2) if sieve[i]]\n\nPRIMES = primes(10**6 + 10)\n\ndef pfact(x):\n  res = Counter()\n  while x > 1:\n    for p in PRIMES:\n      if p >= x**0.5 + 1:\n        res[x] += 1\n        x = 1\n        break\n      if x % p == 0:\n        res[p] += 1\n        x //= p\n        break\n  return res\n\nn, b = reads()\npb = pfact(b)\n\nans = 1 << 63\nfor p, e in list(pb.items()):\n  k = sum(n // (p ** i) for i in takewhile(lambda i: p ** i <= n, count(1)))\n  ans = min(k // e, ans)\nprint(ans)\n", "n,b=map(int,input().split())\ntemp=b \npf=[]\nfrom math import sqrt as S \nfor i in range(2,int(S(b))+1):\n    if b%i==0:\n        c=0 \n        while b%i==0:\n            c+=1 \n            b=b//i \n        pf.append([c,i])\nif b>1:\n    pf.append([1,b])\nplen=len(pf)\ndef chk(z,p):\n    ct=0 \n    k=p \n    while z//k>0:\n        ct+=(z//k )\n        k=k*p \n    return ct \nmini=10**50\nfor i in range(plen):\n    currp=pf[i][1]\n    cnt=pf[i][0]\n    cur=chk(n,currp)\n    #print(cur)\n    mini=min(mini,cur//cnt)\nprint(mini)", "import math,time\n\nfacts = []\nfcounts = []\n\n\ndef primefactors(n):\n\tc = 0\n\tif n%2 == 0:\n\t\twhile n%2==0:\n\t\t\tc+=1\n\t\t\tn = n//2\n\t\tfacts.append(2)\n\t\tfcounts.append(c)\n\tfor i in range(3, (int(math.sqrt(n)+1)),2):\n\t\tc = 0\n\t\tif n % i == 0:\n\t\t\twhile n % i == 0:\n\t\t\t\tc += 1\n\t\t\t\tn = n // i\n\t\t\tfacts.append(i)\n\t\t\tfcounts.append(c)\n\tif n>2:\n\t\tfacts.append(n)\n\t\tfcounts.append(1)\n\ndef task(x, u):\n\tt = 0\n\tp = u\n\twhile True:\n\t\tif x<p:\n\t\t\treturn t\n\t\telse:\n\t\t\tt+=(x//p)\n\t\tp*=u\n\n\nn, b = list(map(int, input().split()))\nprimefactors(b)\nl = len(facts)\nval = int(1e18)\n#print(facts)\n#print(fcounts)\nfor i in range(l):\n\tx = facts[i]\n\ta = task(n,x)\n\t#print(a, \"for value:\", x)\n\tval = min(val, a//fcounts[i])\nif val is int(1e18):\n\tprint(\"0\")\nelse:\n\tprint(int(val))\n\n\n", "n, b = list(map(int, input().split()))\nnow = 1\np = []\nisp = [1] * 1000001\nfor i in range(2, 10 ** 6 + 1):\n\tif isp[i]:\n\t\tp.append(i)\n\tfor x in p:\n\t\tif x * i > 1000000:\n\t\t\tbreak\n\t\tisp[x * i] = 0\n\t\tif i < x or i % x == 0:\n\t\t\tbreak\n# print(len(p))\nde = []\nfor prime in p:\n\tcount = 0\n\twhile b % prime == 0:\n\t\tb //= prime\n\t\tcount += 1\n\tif count:\n\t\tde.append((prime, count))\n\tif b < prime:\n\t\tbreak\nif b != 1:\n\tde.append((b, 1))\n# print(de)\n\nans = 10 ** 20\nfor pair in de:\n\ttmp = 1\n\thas = 0\n\tnum, count = pair[0], pair[1]\n\twhile tmp <= n:\n\t\ttmp *= num\n\t\thas += n // tmp\n\tans = min(ans, has // count)\nprint(ans)\n", "def factorize(n):\n\tresult = []\n\tN = n\n\ti = 2\n\twhile i * i <= N:\n\t\tif n % i == 0:\n\t\t\tpower = 0\n\t\t\twhile n % i == 0:\n\t\t\t\tn = n // i\n\t\t\t\tpower += 1\n\t\t\tresult.append((i, power))\n\t\ti += 1\n\tif n != 1:\n\t\tresult.append((n, 1))\n\treturn result\nn, b = input().split()\nn = int(n)\nb = int(b)\n#print(n, b)\np = factorize(b)\n\nans = None\nfor (prime, power) in p:\n\tk = prime\n\tpp = 0\n\twhile k <= n:\n\t\tpp += n // k\n\t\tk *= prime\n\tres = pp // power\n#\tprint(prime, power, pp, k, res)\n\tif ans == None or ans > res:\n\t\tans = res\n\nprint(ans)\t\t ", "from decimal import Decimal\n\nlist_int_input = lambda inp: list(map(int, inp.split()))\nint_input = lambda inp: int(inp)\nstring_to_list_input = lambda inp: list(inp)\n\nn,b=list(map(int,input().split()))\nimport math\nfacts=[]\nsqt=int(math.sqrt(b))\nfor i in range(2,sqt+1):\n    j=0\n    while b%i==0:\n        j+=1\n        b=int(Decimal(b)/Decimal(i))\n    if j>0:\n        facts.append((i, j))\n    if b==1:\n        break\nif b!=1:\n    facts.append((b,1))\nsumm=10**18\nfor i in facts:\n    num=i[0]\n    times=i[1]\n    cnt=0\n    while int(n/num)!=0:\n        cnt+=int(Decimal(n)/Decimal(num))\n        num*=i[0]\n    summ=min(summ,int(Decimal(cnt)/Decimal(times)))\nprint(summ)\n\n", "from collections import defaultdict\ndef decompose(n):\n    x = n\n    i = 2\n    fac = defaultdict(lambda: 0)\n    while i*i <= n:\n        while x % i == 0:\n            fac[i] += 1\n            x = x//i\n        if x == 1:\n            break\n        i += 1\n    if x != 1:\n        fac[x] += 1\n    return fac\n\ndef main():\n    n, b = list(map(int, input().split()))\n    # print(n, b)\n    require = decompose(b)\n    ans = 10**18\n    for key, val in list(require.items()):\n        n2 = n\n        acc = 0\n        while n2 > 0:\n            acc += n2 // key\n            n2 //= key\n        ans = min(ans, acc // val)\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()"]