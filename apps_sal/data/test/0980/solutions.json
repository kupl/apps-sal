["read=lambda:list(map(int,input().split()))\nfrom collections import Counter as co\nk,n=read()\ns=input()\nrepeated=(len(s)!=len(set(s)))\netalon=co(s)\na=[]\nkk=[]\nap=a.append\n\nfor i in range(k-1):\n    ap(input())\n    if co(a[-1])!=etalon:\n        print(-1)\n        return\n\nss=False\nfor i in a:\n    if i!=s:\n        ss=i\n        for j in range(len(s)):\n            if s[j]!=ss[j]:\n                kk.append(j)\n        break\n\nif len(kk)>4:\n    print(-1)\n    return\n\nif ss:\n    if repeated:\n        for i in a:\n            k = 0\n            for j in range(len(i)):\n                if s[j] != i[j]: k += 1\n            if k != 0 and k != 2: break\n        else:\n            print(s)\n            return\n\n    if len(kk)!=2:\n        for i in range(len(kk)):\n            for j in range(i):\n                stry=s[:kk[j]]+s[kk[i]]+s[kk[j]+1:kk[i]]+s[kk[j]]+s[kk[i]+1:]\n                #print(stry)\n                for u in a:\n                    k = 0\n                    for j in range(len(u)):\n                        if stry[j] != u[j]: k += 1\n                    #print(stry,i,k)\n                    if not(k==0 and repeated) and k != 2: break\n                else:\n                    print(stry)\n                    return\n\n    if len(kk)==2:\n        for change in kk:\n            for i in range(len(s)):\n                if change==i:\n                    continue\n\n                if i >change:\n                    stry = s[:change] + s[i] + s[change + 1:i] + s[change] + s[i + 1:]\n                else:\n                    stry = s[:i] + s[change] + s[i + 1:change] + s[i] + s[change + 1:]\n\n                for u in a:\n                    k = 0\n                    for j in range(len(u)):\n                        if stry[j] != u[j]: k += 1\n                    #print(stry,i,k)\n                    if not(k==0 and repeated) and k != 2: break\n                else:\n                    print(stry)\n                    return\n    print(-1)\n\nelse:\n    if repeated:\n        print(s)\n        return\n    print(s[1]+s[0]+s[2:])\n", "def solve():\n    read=lambda:list(map(int,input().split()))\n    from collections import Counter as co\n    k,n=read()\n    s=list(input())\n    repeated=(len(s)!=len(set(s)))\n    etalon=co(s)\n    a=[]\n    kk=[]\n    ap=a.append\n    \n    for i in range(k-1):\n        ap(list(input()))\n        if co(a[-1])!=etalon:\n            print(-1)\n            return\n    \n    ss=False\n    for i in a:\n        if i!=s:\n            ss=i\n            for j in range(len(s)):\n                if s[j]!=ss[j]:\n                    kk.append(j)\n            break\n    \n    if len(kk)>4:\n        print(-1)\n        return\n    \n    if ss:\n        if repeated:\n            for i in a:\n                k = 0\n                for j in range(len(i)):\n                    if s[j] != i[j]: k += 1\n                if k != 0 and k != 2: break\n            else:\n                print(''.join(s))\n                return\n    \n        if len(kk)!=2:\n            for i in range(len(kk)):\n                for j in range(i):\n                    stry=s[:kk[j]]+[s[kk[i]]]+s[kk[j]+1:kk[i]]+[s[kk[j]]]+s[kk[i]+1:]\n                    \n                    for u in a:\n                        k = 0\n                        for j in range(len(u)):\n                            if stry[j] != u[j]: k += 1\n                        if not(k==0 and repeated) and k != 2: break\n                    else:\n                        print(''.join(stry))\n                        return\n    \n        if len(kk)==2:\n            for change in kk:\n                for i in range(len(s)):\n                    if change==i:\n                        continue\n    \n                    if i >change:\n                        stry = s[:change] + [s[i]] + s[change + 1:i] + [s[change]] + s[i + 1:]\n                    else:\n                        stry = s[:i] + [s[change]] + s[i + 1:change] + [s[i]] + s[change + 1:]\n    \n                    for u in a:\n                        k = 0\n                        for j in range(len(u)):\n                            if stry[j] != u[j]: k += 1\n                        if not(k==0 and repeated) and k != 2: break\n                    else:\n                        print(''.join(stry))\n                        return\n        print(-1)\n    \n    else:\n        if repeated:\n            print(''.join(s))\n            return\n        print(s[1]+s[0]+''.join(s[2:]))\nsolve()", "#!/usr/bin/env python3\n\nn,k = list(map(int, input().split()))\n\nnn = []\nans = ''\nfor i in range(n):\n    mid = input()\n    if mid in nn:\n        ans = mid\n        continue\n    nn.append(mid)\n    n = len(nn)\nif len(nn) == 1:\n    ans = nn[0]\n    ans = list(ans)\n    ans[0],ans[1] = ans[1],ans[0]\n    print(''.join(ans))\nelse:\n    diff = []\n    check = True\n    cnt = {chr(97+i):0 for i in range(26)}\n    for v in range(k):\n        cnt[nn[0][v]] += 1\n    for i in range(n):\n        cnt2 = {chr(97+i):0 for i in range(26)}\n        for j in range(k):\n            cnt2[nn[i][j]] += 1\n        if cnt != cnt2:\n            print('-1')\n            check = False\n            break\n    if check:\n        check = False\n        for i in range(n):\n            check = False\n            for j in range(i,n):\n                diff = [l for l in range(k) if nn[i][l] != nn[j][l]]\n                if len(diff) > 4:\n                    check = True\n                    print('-1')\n                    break;\n\n            if check:\n                break\n        diff = [l for l in range(k) if nn[0][l] != nn[1][l]]\n        mid = []\n        check2 = False\n        for i in range(k):\n            if nn[0][i] in mid:\n                check2 = True\n                break\n            mid.append(nn[0][i])\n        #print(diff)\n        if not check:\n            res = list(nn[0])\n            check = False\n            for i in range(len(diff)):\n                if check:\n                    break\n                for j in range(k):\n                    if i == j:\n                        continue\n                    res[diff[i]],res[j] = res[j], res[diff[i]]\n                    ans = ''.join(res)\n                    #print(ans)\n                    check = True\n                    for x in range(n):\n                        mid = [ans[y] for y in range(k) if nn[x][y] != ans[y]]\n                        #print(len(diff))\n                        if len(mid) == 2:\n                            continue\n                        elif len(mid) == 0 and check2:\n                            continue\n                        else:\n                            check = False\n                    if check:\n                        print(ans)\n                        check = True\n                        break\n                    res[diff[i]],res[j] = res[j],res[diff[i]]\n            if not check:\n                print('-1')\n\n", "import sys\n\nk, n = list(map(int, input().split()))\ns = [list(word.rstrip()) for word in sys.stdin]\n\ndouble = True if max(s[0].count(chr(i+97)) for i in range(26)) > 1 else False\ndiff = [set() for _ in range(k)]\ndiff_cnt = [0]*k\nfor i in range(1, k):\n    for j in range(n):\n        if s[0][j] != s[i][j]:\n            diff[i].add(j)\n            diff_cnt[i] += 1\n            if diff_cnt[i] > 4:\n                print(-1)\n                return\n\nfor i in range(n):\n    for j in range(i+1, n):\n        s[0][i], s[0][j] = s[0][j], s[0][i]\n        for x in range(1, k):\n            w = [y for y in diff[x] | {i, j} if s[0][y] != s[x][y]]\n            if double and len(w) == 0:\n                continue\n            if len(w) == 2 and s[0][w[0]] == s[x][w[1]] and s[0][w[1]] == s[x][w[0]]:\n                continue\n            break\n        else:\n            print(''.join(s[0]))\n            return\n        s[0][i], s[0][j] = s[0][j], s[0][i]\n\nprint(-1)\n"]