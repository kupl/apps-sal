["n, q = list(map(int, input().split()))\nservers = [0] * n\nfor _ in range(q):\n    t, k, d = list(map(int, input().split()))\n    # free = [i for i, x in enumerate(servers) if x < t]\n    free = []\n    for sn in range(n):\n        if servers[sn] < t:\n            free.append(sn)\n        if len(free) == k:\n            break\n    if len(free) < k:\n        print(-1)\n\n    else:\n\n        for sn in free:\n            servers[sn] = t + d - 1\n\n        print(sum([x + 1 for x in free]))\n", "import math\nimport sys\n\ndef solve(n, q):\n    servers = [0] * n\n    res = [None]*q\n    for j, line in enumerate(sys.stdin):\n        t, k, d = list(map(int, line.split()))\n        S, m = k, k\n        logs = servers[:]\n        for i, s in enumerate(servers):\n            if s <= t:\n                servers[i] = t + d\n                S += i\n                m -= 1\n            if m == 0:\n                res[j] = S\n                break\n        else:\n            res[j] = -1\n            servers = logs[:]\n\n    return res\n            \n            \nn, q = list(map(int, input().split()))\nprint('\\n'.join(map(str, solve(n, q))))\n    \n", "n, q = map(int, input().split())\n\nservers = [0 for i in range(n)]\n\nfor i in range(q):\n    t, k, d = map(int, input().split())\n    \n    cnt = 0\n    for server in servers:\n        if (server <= t): \n            cnt += 1\n            if (cnt == k): break\n        \n    if (cnt >= k):\n        s = 0\n        for i in range(n):\n            if (servers[i] <= t): \n                servers[i] = t + d\n                cnt -= 1\n                s += i+1\n                if (cnt == 0): break\n                \n        print(s)\n    else: print(-1)", "num = [int(n) for n in input().split()]\nserver = [0 for n in range(0,num[0])]\nresult = list()\nnum_task = num[1]\ntemp_ti = 0\nfor i in range(0,num_task):\n    temp_task = [int(n) for n in input().split()]\n    time_passed = temp_task[0]-temp_ti\n    temp_ti = temp_task[0]\n    ###length\n    for n in range(0,num[0]):\n        server[n] -= time_passed\n        server[n] = 0 if(server[n]<0) else server[n]\n    if(server.count(0) < temp_task[1]):\n        result.append(-1)\n    else:\n        accumulate_result = 0\n        for i in range(0,num[0]):\n            if(not bool(server[i])):\n                server[i] += temp_task[2]\n                temp_task[1] -=1\n                accumulate_result +=(i+1)\n            if(temp_task[1] ==0):\n                break\n        result.append(accumulate_result)\nfor i in range(0,num_task):\n    print(result[i])\n", "import sys\n\ninput = sys.stdin.readline\n\nserver, task = list(map(int, input().split()))\nserverstatus = [0]*server\n\nfor i in range(task):\n  moment, serven, time = list(map(int, input().split()))\n  ava = 0\n  total = 0\n  \n  d = serverstatus[:]\n  \n  for i in range(server):\n    if ava < serven and serverstatus[i] <= moment:\n      ava += 1\n      total += i+1\n      \n      d[i] = moment + time\n    elif ava == serven:\n      break\n    \n  if ava < serven:\n    print(-1)\n  else:\n    print(total)\n    \n    serverstatus = d[:]\n", "import sys\n\ninput = sys.stdin.readline\n#\nserver, task = list(map(int, input().split()))\nserverstatus = [0]*server\n\nfor i in range(task):\n  moment, serven, time = list(map(int, input().split()))\n  ava = 0\n  total = 0\n  \n  d = serverstatus[:]\n  \n  for i in range(server):\n    if ava < serven and serverstatus[i] <= moment:\n      ava += 1\n      total += i+1\n      \n      d[i] = moment + time\n    elif ava == serven:\n      break\n    \n  if ava < serven:\n    print(-1)\n  else:\n    print(total)\n    \n    serverstatus = d[:]\n", "import sys\ninput = sys.stdin.readline\n\nn, q = list(map(int, input().split()))\n\nservers = [0 for i in range(n)]\n\nfor i in range(q):\n  time, serv, leng = list(map(int, input().split()))\n  pos = []\n  for j in range(n):\n    if servers[j] <= time:\n      pos.append(j)\n  if len(pos) < serv:\n    print(-1)\n    continue\n  pos = pos[:serv]\n  for j in pos:\n    servers[j] = time + leng\n  print(sum(pos)+len(pos))\n", "import sys\ninput = sys.stdin.readline\nn, q = list(map(int, input().split()))\nservers = [0 for i in range(n)]\nfor i in range(q):\n  time, serv, leng = list(map(int, input().split()))\n  pos = []\n  for j in range(n):\n    if servers[j] <= time:\n      pos.append(j)\n  if len(pos) < serv:\n    print(-1)\n    continue#\n  pos = pos[:serv]\n  for j in pos:\n    servers[j] = time + leng\n  print(sum(pos)+len(pos))\n", "n, q = [int(i) for i in input().split()]\navailable = [1 for i in range(n)]\nfor task in range(q):\n    t, k , d = [int(i) for i in input().split()]    \n    assign = []\n    len_assign = 0\n    for i in range(n):\n        if available[i] <= t:\n            assign.append(i)\n            len_assign += 1\n        if len_assign >= k:\n            break\n    if len_assign >= k:\n        for j in range(k):\n            available[assign[j]] = t+d\n        print(sum(assign)+k)\n    else:\n        print(-1)", "while True:\n    try:\n        caption = input().split()\n        n = int(caption[0])\n        servers = [i for i in range(1, n+1)]\n        answer = []       \n        q = int(caption[1])\n        using = {}\n        for i in range(q):\n            \n            tasks = input().split()\n            time = int(tasks[0])\n            key = int(tasks[0]) + int(tasks[2])\n            for i in list(using.keys()):\n                if time >= i:\n                    servers += using[i]\n                    servers.sort()\n                    del using[i]\n                    \n            need = int(tasks[1])            \n            touse = len(servers)\n            if need > touse:\n                answer.append(-1)\n            else:               \n                amount = servers[:need]\n                servers = servers[need:]\n                sums = sum(amount)\n                if not using.get(key):\n                    using[key] = amount\n                else:\n                    using[key] += amount\n\n                answer.append(sums)\n                \n\n        for i in answer:\n            print(i)\n            \n    except EOFError:\n        break\n\n", "f = lambda: map(int, input().split())\nn, m = f()\ns = [0] * n\nfor i in range(m):\n    t, k, d = f()\n    j, p = 0, []\n    while j < n and len(p) < k:\n        if s[j] <= t: p.append(j)\n        j += 1\n    if len(p) < k: print(-1)\n    else:\n        for j in p: s[j] = t + d\n        print(sum(p) + k)", "n,q=map(int,input().split())\ns=[0]*(n+1)\nans = []\nfor i in range(q):\n    t,k,d=map(int,input().split())\n    sm=[]\n    for j in range(1, n+1):\n        if s[j] < t:\n            sm.append(j)\n            if len(sm)==k:break\n    if len(sm)!=k:ans.append('-1')\n    else:\n        ans.append(str(sum(sm)))\n        for j in sm: s[j]=d+t-1\nprint('\\n'.join(ans))", "n, q = list(map(int, input().split()))\n\nqs = []\nans = [0] * q\nused = [0] * n\n\nfor _ in range(q):\n    t, k, d = list(map(int, input().split()))\n    less = min(sum(used[i] <= t for i in range(n)), k)\n    \n    if less >= k:\n        for i in range(n):\n            if less == 0: break\n            if used[i] <= t:\n                used[i] = t + d\n                ans[_] += i + 1\n                less -= 1\n    else:\n        ans[_] = -1\n\nprint(\"\\n\".join(map(str, ans)))\n\n", "import heapq as pq\n\nfrom sys import stdin, stdout\n\n\n\n#Heap method written by Engineermind.cho\n\n#Testing if heap + fast IO can make python pass this question\n\n\n\nn, q = list(map(int, stdin.readline().split()))\n\nserver = [i for i in range(1, n+1)]\n\nrunning = []\n\nis_chg = False\n\nfor x in stdin.readlines():\n\n    t, k, d = list(map(int, x.split()))\n\n\n\n    while running:\n\n        if t >= running[0][0]:\n\n            server += pq.heappop(running)[1]\n\n            is_chg = True\n\n        else:\n\n            break\n\n\n\n    if is_chg:\n\n        server = sorted(server)\n\n        is_chg = False\n\n\n\n    if len(server) < k:\n\n        stdout.write('-1\\n')\n\n        continue\n\n    else:\n\n        stdout.write(str(sum(server[:k]))+'\\n')\n\n        if d != 1:\n\n            pq.heappush(running, (t+d, server[:k].copy()))\n\n            server = server[k:]\n\n\n\n# Made By Mostafa_Khaled\n", "from collections import defaultdict\nn, q = list(map(int, input().split()))\nS = [0] * (n + 1)\nS[0] = 1\ns = n\nL = defaultdict(list)\npre = -1\nfor i in range(q):\n    t, k, d = list(map(int, input().split()))\n    for j in range(pre, t):\n        for l1 in L[j]:\n            for l2 in l1:\n                S[l2] = 0\n                s += 1\n    if s >= k:\n        tmp = []\n        for j in range(1, n + 1):\n            if S[j] == 0:\n                S[j] = 1\n                tmp.append(j)\n                if len(tmp) == k:\n                    break\n        s -= k\n        L[t + d - 1].append(tmp)\n        print(sum(tmp))\n        pre = t\n    else:\n        print(-1)\n        pre = t\n\n", "n, q = list(map(int, input().split()))\nservers = [i for i in range(1, n+1)]\nres, used = [], {}\nfor i in range(q):\n    t, s, d = list(map(int, input().split())) \n    finish = t + d\n    for i in list(used.keys()):\n        if t >= i:\n            servers += used[i]\n            servers.sort()\n            del used[i]\n    if s > len(servers):\n        res.append(-1)\n        continue\n    if not used.get(finish):\n        used[finish] = servers[:s]\n    else:\n        used[finish] += servers[:s]\n    res.append(sum(servers[:s]))\n    servers = servers[s:]\nfor i in res: \n    print(i)\n", "import sys\ninput = sys.stdin.readline\n\nn, q = map(int, input().split())\nT = [0]*n\n\nfor _ in range(q):\n    t, k, d = map(int, input().split())\n    new_T = T[:]\n    cnt = 0\n    ans = 0\n    \n    for i in range(n):\n        if new_T[i]<t:\n            new_T[i] = t+d-1\n            cnt += 1\n            ans += i+1\n        \n        if cnt==k:\n            break\n    \n    if cnt==k:\n        T = new_T\n        print(ans)\n    else:\n        print(-1)", "n , q = list(map(int,input().split()))\ntasks=[]\nservers = [0]*n\nfor _ in range(q):\n    tasks.append(tuple(map(int,input().split())))\n\nfor t,k,d in tasks:\n    a = []\n    for i in range(n):\n        if t>=servers[i]:\n            a.append(i)\n    if len(a)>=k:\n        total = 0\n        for s in range(k):\n            total+=a[s]+1\n            servers[a[s]]=t+d\n        print(total)\n    else:\n        print(-1)\n", "a,b=map(int,input().split())\nz=[0]*a\nfor _ in \" \"*b:\n    t,k,d=map(int,input().split())\n    gh=[]\n    for i in range(a):\n        if z[i]<t:gh.append(i)\n    if len(gh)<k:print(-1);continue\n    for i in range(k):z[gh[i]]=t+d-1\n    print(sum(gh[:k])+k)", "for t in range(1):\n    n,q=map(int,input().split())\n    time=[0]*n\n    for i in range(q):\n        t,k,d=map(int,input().split())\n        count=0\n        pos=0\n        for j in range(n):\n            if time[j]<=t:\n                pos+=j+1\n                count+=1\n            if count==k:\n                break\n        if count<k:\n            print(-1)\n            continue\n        changed=0\n        for j in range(n):\n            if time[j]<=t:\n                time[j]=t+d\n                changed+=1\n            if changed==count:\n                break\n        print(pos)"]