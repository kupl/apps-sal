["3\n\nimport sys\n\n\ndef solve(s, k):\n    l = len(s)\n    for i in range(l-1, -1, -1):\n        prev = s[max(i-2, 0):i]\n        z = s[i] + 1\n        while z in prev:\n            z += 1\n        if z >= k:\n            continue\n        # Gotcha!\n        ret = s[:i] + [z]\n        while len(ret) < l:\n            prev = ret[max(len(ret)-2, 0):len(ret)]\n            z = 0\n            while z in prev:\n                z += 1\n            ret.append(z)\n        return ret\n    return None\n\n\ndef __starting_point():\n    l, k = list(map(int, sys.stdin.readline().split()))\n    s = [ord(c) - ord('a') for c in sys.stdin.readline().strip()]\n    ans = solve(s, k)\n    if ans is None:\n        print('NO')\n    else:\n        print(''.join(chr(ord('a') + x) for x in ans))\n\n__starting_point()", "import sys\n\nn, p = map(int, input().split())\ns = input()\na = [(ord(s[i]) - ord('a') + 1) for i in range(n)]\ncurr = len(s) - 1\na += [p + 1, p + 1]\nf = 0\n\ndef valid(x):\n    nonlocal f\n    if x == -1:\n        return False\n    if not (a[x] + 1 in (a[x - 1], a[x - 2])) and a[x] + 1 <= p:\n        a[x] += 1\n    elif not (a[x] + 2 in (a[x - 1], a[x - 2])) and a[x] + 2 <= p:\n        a[x] += 2\n    elif not (a[x] + 3 in (a[x - 1], a[x - 2])) and a[x] + 3 <= p:\n        a[x] += 3\n    else:\n        return True\n    print(s[:x], end = '')\n    print(chr(a[x] + ord('a') - 1), end = '')\n    tmp = 1\n    ind = x\n    while tmp in (a[x], a[x - 1]):\n        tmp += 1\n    for i in range(x + 1, len(s)):\n        print(chr(tmp + ord('a') - 1), end = '')\n        a[i] = tmp\n        tmp = 1\n        while tmp in (a[i], a[i - 1]):\n            tmp += 1\n    f = 1\n    return False\n            \nwhile valid(curr):\n    curr -= 1\n\nif f == 1:\n    return\n    \nprint('NO')", "n, p = map(int, input().split())\n\ndef f(t, k):\n    a, b = min(t[k - 1], 2), min(t[k], 2)\n    if a == b: a = 1\n    return [3 - a - b, a, b]\n\ndef g(t, k):\n    j = t[k]\n    for i in range(j + 1, p):\n        if i != t[k - 1] and i != t[k - 2]:\n            t[k] = i\n            return f(t, k)\n    return None\n\ndef h(t):\n    t = [ord(c) - 97 for c in t] + [27, 27]\n    for k in range(n - 1, -1, -1):\n        s = g(t, k)\n        if s:\n            d = n - k - 1\n            t = t[: k + 1] + s * (d // 3) + s[: d % 3]\n            return ''.join(chr(i + 97) for i in t)\n    return 'NO'\n\nt = input()\nq = 'NO'\nif p == 2:\n    if t == 'a': q = 'b'\n    elif t == 'ab': q = 'ba'\nelif p > 2: q = h(t)\nprint(q)", "n, p = map(int, input().split())\nt, q = input(), 'NO'\nif p == 2:\n    if t == 'a': q = 'b'\n    elif t == 'ab': q = 'ba'\nelif p > 2: \n    t = [ord(c) - 97 for c in t] + [27, 27]\n    for k in range(n - 1, -1, -1):\n        for i in range(t[k] + 1, p):\n            if i - t[k - 1] and i - t[k - 2]:\n                t[k] = i\n                a, b = min(t[k - 1], 2), min(t[k], 2)\n                if a == b: a = 1\n                t = t[: k + 1] + [3 - a - b, a, b] * (n // 3 + 1)\n                print(''.join(chr(t[i] + 97) for i in range(n)))\n                return\nprint(q)", "n, p = map(int, input().split())\nt = [ord(c) - 97 for c in input()] + [27, 27]\nfor k in range(n - 1, -1, -1):\n    for i in range(t[k] + 1, p):\n        if i - t[k - 1] and i - t[k - 2]:\n            a, b = min(t[k - 1], 2), min(i, 2)\n            if a == b: a = 1\n            t = t[: k] + [i] + [3 - a - b, a, b] * (n // 3 + 1)\n            print(''.join(chr(i + 97) for i in t)[: n])\n            return\nprint('NO')", "n, p = map(int, input().split())\ns = list(ord(i) - 97 for i in input())\n\nfor i in range(n - 1, -1, -1):\n    for j in range(s[i] + 1, p):\n        if (i < 1 or j != s[i - 1]) and (i < 2 or j != s[i - 2]):\n            s[i] = j\n            for i in range(i + 1, n):\n                for j in range(p):\n                    if (i < 1 or j != s[i - 1]) and (i < 2 or j != s[i - 2]):\n                        s[i] = j\n                        break\n            print(''.join(chr(i + 97) for i in s))\n            return\nprint('NO')", "def main():\n    n, p = list(map(int, input().split()))\n    l = [p, p] + [ord(c) - 97 for c in input()]\n    a = l[-2]\n    for i in range(n + 1, 1, -1):\n        a, b = l[i - 2], a\n        for x in range(l[i] + 1, p):\n            if a != x != b:\n                l[i] = x\n                break\n        else:\n            continue\n        break\n    else:\n        print(\"NO\")\n        return\n    a, b = l[i - 1], x\n    for i in range(i + 1, n + 2):\n        for x in range(p):\n            if a != x != b:\n                l[i] = x\n                a, b = b, x\n                break\n    print(\"\".join(chr(x + 97) for x in l[2:]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, p = map(int, input().split())\nt = [ord(c) - 97 for c in input()] + [27, 27]\nfor k in range(n - 1, -1, -1):\n    for i in range(t[k] + 1, p):\n        if i - t[k - 1] and i - t[k - 2]:\n            a, b = min(t[k - 1], 2), min(i, 2)\n            if a == b: a = 1\n            t = t[: k] + [i] + [3 - a - b, a, b] * (n // 3 + 1)\n            print(''.join(chr(i + 97) for i in t)[: n])\n            return\nprint('NO')", "def trans(c):\n  return chr(ord(c) + 1)\n\nn, p = list(map(int, input().split()))\ns = list(input())\ns[n-1] = trans(s[n-1])\n\ni = n - 1\nwhile i >= 0 and i < n:\n  if ord(s[i]) >= ord('a') + p:\n    s[i] = 'a'\n    i -= 1\n    s[i] = trans(s[i])\n  elif i > 0 and s[i] == s[i-1] or i > 1 and s[i] == s[i-2]:\n    s[i] = trans(s[i])\n  else:\n    i += 1\nelse:\n  print(\"NO\" if i < 0 else \"\".join(s))\n", "def trans(c):\n  return chr(ord(c) + 1)\n\nn, p = list(map(int, input().split()))\ns = list(input())\ns[n-1] = trans(s[n-1])\n\ni = n - 1\nwhile i >= 0 and i < n:\n  if ord(s[i]) >= ord('a') + p:\n    s[i] = 'a'\n    i -= 1\n    s[i] = trans(s[i])\n  elif i > 0 and s[i] == s[i-1] or i > 1 and s[i] == s[i-2]:\n    s[i] = trans(s[i])\n  else:\n    i += 1\nelse:\n  print(\"NO\" if i < 0 else \"\".join(s))", "n, p = map(int, input().split())\nt = [ord(c) - 97 for c in input()] + [27, 27]\nfor k in range(n - 1, -1, -1):\n    for i in range(t[k] + 1, p):\n        if i - t[k - 1] and i - t[k - 2]:\n            a, b = min(t[k - 1], 2), min(i, 2)\n            if a == b: a = 1\n            t = t[: k] + [i] + [3 - a - b, a, b] * (n // 3 + 1)\n            print(''.join(chr(i + 97) for i in t)[: n])\n            return\nprint('NO')", "def trans(c):\n\n  return chr(ord(c) + 1)\n\n\n\nn, p = list(map(int, input().split()))\n\ns = list(input())\n\ns[n-1] = trans(s[n-1])\n\n\n\ni = n - 1\n\nwhile i >= 0 and i < n:\n\n  if ord(s[i]) >= ord('a') + p:\n\n    s[i] = 'a'\n\n    i -= 1\n\n    s[i] = trans(s[i])\n\n  elif i > 0 and s[i] == s[i-1] or i > 1 and s[i] == s[i-2]:\n\n    s[i] = trans(s[i])\n\n  else:\n\n    i += 1\n\nelse:\n\n  print(\"NO\" if i < 0 else \"\".join(s))\n\n\n\n# Made By Mostafa_Khaled\n", "def trans(c):\n  return chr(ord(c) + 1)\n\nn, p = list(map(int, input().split()))\ns = list(input())\ns[n-1] = trans(s[n-1])\n\ni = n - 1\nwhile i >= 0 and i < n:\n  if ord(s[i]) >= ord('a') + p:\n    s[i] = 'a'\n    i -= 1\n    s[i] = trans(s[i])\n  elif i > 0 and s[i] == s[i-1] or i > 1 and s[i] == s[i-2]:\n    s[i] = trans(s[i])\n  else:\n    i += 1\nelse:\n  print(\"NO\" if i < 0 else \"\".join(s))", "'''input\n4 4\nabcd\n'''\n# its just a simulation\nfrom sys import stdin, setrecursionlimit\nimport heapq\n\n\n# main starts\nn, p = list(map(int, stdin.readline().split()))\nstring = list(stdin.readline().strip())\ni = n - 1\n\n\ndef  check_pallindrome(string, index):\n\tif index > 1:\n\t\tif string[index - 1] != string[index] and string[index - 2] != string[index]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\telif index > 0:\n\t\tif string[index - 1] != string[index]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\telse:\n\t\treturn True\n\n\ndef get_next(string, index, p):\n\tif ord(string[index]) - 96  < p:\n\t\tstring[index] = chr(ord(string[i]) + 1)\n\t\tif check_pallindrome(string, index):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn get_next(string, index, p)\n\telse:\n\t\treturn False\n\nwhile True:\n\t# print(string)\n\tif i == n:\n\t\tprint(''.join(string))\n\t\tbreak\n\tif i == -1:\n\t\tprint(\"NO\")\n\t\tbreak\n\t\n\tif get_next(string, i, p):\n\t\ti += 1\n\telse:\n\t\tstring[i] = chr(96) \n\t\ti -= 1", "n, p = list(map(int, input().split()))\ns = input()\nslist = list(s)\nbad = False\nif p == 1:\n    print('NO')\n    bad = True\nif p == 2:\n    if s == 'a': print('b')\n    elif s == 'ab': print('ba')\n    else: print('NO')\n    bad = True\n\ndef is_palindrome(a):\n    if len(a) == 1:\n        return False\n    return a == list(reversed(a))\n\ndef _gen_banned(c, with_c=True):\n    nonlocal slist\n    banned = []\n    if c-2 >= 0: banned.append(ord(slist[c-2]))\n    if c-1 >= 0: banned.append(ord(slist[c-1]))\n    if with_c: banned.append(ord(slist[c]))\n    return banned\nif not bad:\n    for c in range(n-1, -1, -1):\n        banned = _gen_banned(c)\n        if sorted(banned) == [96+p-2, 96+p-1, 96+p]:\n            continue\n        else:\n            #print('huh', c, banned)\n            for i in range(ord(slist[c])+1, 96+p+1):\n                if i not in banned:\n                    slist[c] = chr(i)\n                    break\n            if slist[c] == s[c]:\n                continue\n            j = c+1\n            while j < n:\n                banned = _gen_banned(j, with_c=False)\n                for i in range(97, 96+p+1):\n                    if i not in banned:\n                        slist[j] = chr(i)\n                        break\n                j += 1\n            print(''.join(slist))\n            break\n    if ''.join(slist) == s:\n        print('NO')\n\n", "n, p = map(int, input().split())\np += ord('a') - 1\ns = [*input()]\n\nfrom string import ascii_lowercase\nap = [*ascii_lowercase]\n\ndef check(m):\n\ti = 1\n\tz = len(m)\n\tif z > 1 and m[0] == m[1]:\n\t\treturn False\n\twhile i < z - 1:\n\t\tt1 = m[i] + m[i + 1]\n\t\tt2 = m[i - 1] + m[i] + m[i + 1]\n\t\tif t1 == t1[::-1] or t2 == t2[::-1]:\n\t\t\treturn False\n\t\ti += 1\n\n\treturn True\n\ni = n - 1\nans = 'NO'\nt = s[i]\n\nwhile i >= 0:\n\tif ord(t) == p:\n\t\ti -= 1\n\t\tt = s[i]\n\t\tcontinue\n\n\tt = chr(ord(t) + 1)\n\tm = [j for j in s]\n\tm[i] = t\n\tif check(m[:i + 1]):\n\t\tj = i + 1\n\t\tf = True\n\t\twhile j < n:\n\t\t\tl = 97\n\t\t\twhile l < 123:\n\t\t\t\tif (j >= 2 and ord(m[j - 2]) == l) or ord(m[j - 1]) == l:\n\t\t\t\t\tl += 1\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tif l == 123:\n\t\t\t\tf = False\n\t\t\t\tbreak\n\t\t\tm[j] = chr(l)\n\t\t\tj += 1\n\t\tm[i] = t\n\t\tif f:\n\t\t\tprint(''.join(m))\n\t\t\treturn\n\nprint(ans)", "import sys\n\ninf = float(\"inf\")\n# sys.setrecursionlimit(10000000)\n\n# abc='abcdefghijklmnopqrstuvwxyz'\n# abd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n# mod, MOD = 1000000007, 998244353\n# words = {1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine',10:'ten',11:'eleven',12:'twelve',13:'thirteen',14:'fourteen',15:'quarter',16:'sixteen',17:'seventeen',18:'eighteen',19:'nineteen',20:'twenty',21:'twenty one',22:'twenty two',23:'twenty three',24:'twenty four',25:'twenty five',26:'twenty six',27:'twenty seven',28:'twenty eight',29:'twenty nine',30:'half'}\n# vow=['a','e','i','o','u']\n# dx,dy=[0,1,0,-1],[1,0,-1,0]\n\n# import random\n# from collections import deque, Counter, OrderedDict,defaultdict\n# from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n# from math import ceil,floor,log,sqrt,factorial,pi,gcd\n# from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\ndef check_pallindrome(string,index):\n    if index>1:\n        if string[index]!=string[index-1] and string[index]!=string[index-2]:\n            return True\n        else:\n            return False\n    elif index>0:\n        if string[index]!=string[index-1]:\n            return True\n        else:\n            return False\n    else:\n        return True\n\n\ndef get_next(string,index,p):\n    if ord(string[index])-96<p:\n        string[index] = chr(ord(string[index])+1)\n        if check_pallindrome(string,index):\n            return True\n        else:\n            return get_next(string,index,p)\n    else:\n        return False\n\nn,p = get_ints()\nstring = list(input())\ni = n-1\n\nwhile True:\n    if i==n:\n        print(''.join(string))\n        break\n    elif i==-1:\n        print('NO')\n        break\n    if get_next(string,i,p):\n        i+=1\n    else:\n        string[i] = chr(96)\n        i-=1\n", "def trans(c):\n  return chr(ord(c) + 1)\nn, p = list(map(int, input().split()))\ns = list(input())\ns[n-1] = trans(s[n-1]) #increment the last char \ni = n - 1\nwhile i >= 0 and i < n:\n  if ord(s[i]) >= ord('a') + p:\n    s[i] = 'a'  #overflow make a \n    i -= 1\n    s[i] = trans(s[i])# to make lexo larger ...inc the prev char #eg bc becomes ca for p=3 \n  elif i > 0 and s[i] == s[i-1] or i > 1 and s[i] == s[i-2]:\n    s[i] = trans(s[i]) # a pal substring is present..inc\n  else:\n    i += 1# good good..go on \nelse:\n  print(\"NO\" if i < 0 else \"\".join(s))\n  #if i became n ,,we are done \n  #else wwe have no ans \n", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[11]:\n\n\nn,p=map(int,input().split())\ns=list(map(ord,input()))\n\ni=n-1\ns[i]+=1\n\np+=97\n\nwhile ~i and i<n:\n    \n    if s[i]==p:\n        s[i]=97\n        i-=1\n        s[i]+=1 \n        \n    elif i and s[i]==s[i-1]:\n        s[i]+=1 \n        \n    elif i>1 and s[i]==s[i-2]:\n        s[i]+=1 \n        \n        \n    else:\n        i+=1 \n        \nif i<0:\n    print('NO')\n    \nelse:\n    #print('Yes')\n    for i in s:\n        print(chr(i),end='')\n        \n    \n    \n\n", "def solve(s, n):\n    if len(s) == 1:\n        return chr(ord(s[0]) + 1) if ord(s[0]) + 1 < ord('a') + n else 'NO'\n\n    for i in reversed(range(2, len(s))):\n        c = s[i]\n        for j in range(ord(c)+1, ord('a')+n):\n            next = chr(j)\n            if next != s[i-1] and next!= s[i-2]:\n                new_s = s[0:i] + next\n                new_s = fill(new_s, n, s, i)\n                return new_s\n    for i in range(ord(s[1])+1, ord('a') + n):\n        next = chr(i)\n        if next != s[0]:\n            new_s =  s[0] + next\n            new_s = fill(new_s, n, s, 1)\n            return new_s\n\n    for i in range(ord(s[0]) + 1, ord('a') + n):\n        next = chr(i)\n        new_s = next\n        new_s = fill(new_s, n, s, 0)\n        return new_s\n    return 'NO'\n\ndef fill(new_s, n, s, i):\n    res = ['a', 'b', 'c']\n    for x in range(i+1, len(s)):\n        for y in res:\n            if ord(y) < ord('a') + n and y != new_s[-1] and (len(new_s) < 2 or y != new_s[-2]):\n                new_s += y\n                break\n    return new_s if len(new_s) == len(s) else 'NO'\n\n\nm, n = list(map(int, input().split()))\ns = input()\nprint(solve(s, n))", "import sys\nn, p = list(map(int, sys.stdin.readline().split()))\ns = sys.stdin.readline()\nsl = list(s)\nsl.remove(\"\\n\")\nflag = 0\nfor i in range(n-1, -1, -1):\n    c = ord(s[i]) - 96\n    prev = -1\n    nprev = -1\n    if c < p:\n        if i-1 >= 0:\n            prev = ord(s[i-1]) - 96\n            if i-2 >= 0:\n                nprev = ord(s[i-2]) - 96\n        flag = 0\n        for j in range(c+1, p + 1):\n            if j != prev and j != nprev:\n                sl[i] = chr(j+96)\n                flag = 1\n                break\n        if flag:\n            break\nsn = \"\".join(sl).strip()\nif s.strip() == sn:\n    print(\"NO\")\nelse:\n    sn = sn[:i+1]\n    while i < n-1:\n        for j in range(26):\n            if sn[-1] != chr(j+97):\n                if i > 0 and sn[-2] != chr(j+97):\n                    i += 1\n                    sn += chr(j + 97)\n                    break\n                if i <= 0:\n                    i += 1\n                    sn += chr(j + 97)\n                    break\n    print(sn)\n", "import sys\nn, p = list(map(int, sys.stdin.readline().split()))\ns = sys.stdin.readline()\nsl = list(s)\nsl.remove(\"\\n\")\nflag = 0\nfor i in range(n-1, -1, -1):\n    c = ord(s[i]) - 96\n    prev = -1\n    nprev = -1\n    if c < p:\n        if i-1 >= 0:\n            prev = ord(s[i-1]) - 96\n            if i-2 >= 0:\n                nprev = ord(s[i-2]) - 96\n        flag = 0\n        for j in range(c+1, p + 1):\n            if j != prev and j != nprev:\n                sl[i] = chr(j+96)\n                flag = 1\n                break\n        if flag:\n            break\nsn = \"\".join(sl).strip()\nif s.strip() == sn:\n    print(\"NO\")\nelse:\n    sn = sn[:i+1]\n    while i < n-1:\n        for j in range(26):\n            if sn[-1] != chr(j+97):\n                if i > 0 and sn[-2] != chr(j+97):\n                    i += 1\n                    sn += chr(j + 97)\n                    break\n                if i <= 0:\n                    i += 1\n                    sn += chr(j + 97)\n                    break\n    print(sn)\n", "import sys\nfrom math import log2,floor,ceil,sqrt,gcd\nimport bisect\n# from collections import deque\n# sys.setrecursionlimit(10**5)\n\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\nri = lambda : sys.stdin.readline().strip()\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD =  1000000007\n\nn,k = Ri()\nst = ri()\nst = [i for  i in st]\narr = [chr(ord('a')+i) for i in range(k)]\nflag = -1\nch = -1\nif n == 1:\n    # YES()\n    if st[0] == arr[-1]:\n        NO()\n    else:\n        print(chr(ord(st[0])+1))\nelse:\n    for i in range(n-1,-1,-1):\n        for j in range(ord(st[i])-ord('a')+1, k):\n            tch = arr[j]\n            if i-2 >=0 :\n                if tch == st[i-1] or tch == st[i-2]:\n                    continue\n                else:\n                    flag = i\n                    ch = tch\n                    break\n            elif i-1>= 0:\n                if tch == st[i-1]:\n                    continue\n                else:\n                    flag = i\n                    ch = tch\n                    break\n            else:\n                flag = i\n                ch  = tch\n                break\n        if flag  != -1:\n            break\n    # print(flag)\n    if flag == -1:\n        NO()\n    else:\n        st[flag] = ch\n        # print(st)\n        # print(flag,n)\n        for i in range(flag+1,n):\n            # print(\"fs\")\n            for j in range(0, k):\n                tch = arr[j]\n                if i-2 >=0 :\n                    if tch == st[i-1] or tch == st[i-2]:\n                        continue\n                    else:\n                        flag = i\n                        ch  = tch\n                        st[i] = ch\n                        break\n                elif i-1>= 0:\n                    if tch == st[i-1]:\n                        continue\n                    else:\n                        flag = i\n                        ch  = tch\n                        st[i] = ch\n                        break\n                else:\n                    flag = i\n                    ch  = tch\n                    st[i]    = ch\n                    break\n        # YES()\n        print(\"\".join(st))", "n,p = list(map(int,input().split()))\ns = ['#']+list(input())+['#']\ns1=s[:]\naa='abcdefghijklmnopqrstuvwxyz'\nind=0\nfor i in range(n,0,-1):\n    ind = aa.index(s[i])+1\n    c=0\n    ans=0\n    while ind<p:\n        if aa[ind]!=s[i-1] and aa[ind]!=s[i-2]:\n            c=1\n            ans=ind\n            break\n        ind+=1\n    if c:\n        s[i]=aa[ans]\n        ind=i\n        break\nans=0\np=3\nfor i in range(ind+1,n+1):\n    ans=0\n    while aa[ans%p]==s[i-2] or aa[ans%p]==s[i-1]:\n        ans+=1\n    s[i]=aa[ans%p]    \nif s<=s1:\n    print(\"NO\")\n    return\nprint(''.join(s[1:-1]))       \n\n"]