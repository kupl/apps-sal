["N = int(input())\nA = [int(s) for s in input().split(\" \")]\nABI = sorted(((a, i) for i, a in enumerate(A, 1)), reverse=True)\nprev = [0]\nfor k, (a,i) in enumerate(ABI):\n  curr = [0]*(k+2)\n  for l in range(k+1):\n    curr[l] = max(curr[l], prev[l]+abs(N-i-k+l)*a)\n    curr[l+1] = prev[l]+abs(i-l-1)*a\n    \n  prev = curr\n \nprint(max(prev))", "def solve(N, A):\n    a = [(i, ai) for i, ai in enumerate(A)]\n    a.sort(key=lambda x: x[1], reverse=True)\n\n    # import numpy as np\n    # dp = np.zeros((N+1, N+1), np.int8)\n\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n\n    dp[0][0] = 0\n    for i, ai in enumerate(a):\n        for l in range(i+1):\n            r = i - l\n            dp[i+1][l] = max(dp[i+1][l], dp[i][l] + ai[1] * ((N-1-r) - ai[0]))\n            dp[i+1][l+1] = max(dp[i+1][l+1], dp[i][l] + ai[1] * (ai[0] - l))\n\n    print((max(dp[N])))\n\ndef __starting_point():\n    N = int(input())\n    A = list(map(int, input().split()))\n    solve(N, A)\n\n__starting_point()", "# E - Active Infants\nN = int(input())\nA = list(map(int,input().split()))\ndp = [[] for _ in range(N+1)]\ndp[0].append(0)\nfor i in range(N):\n    A[i] = [A[i],i+1]\nA.sort(reverse=True)\nfor M in range(1,N+1):\n    Ai,i = A[M-1]\n    # x=0\n    dp[M].append(dp[M-1][0]+Ai*(N-(M-1)-i))\n    # 1<=x<=M-1\n    for x in range(1,M):\n        dp[M].append(max(dp[M-1][x-1]+Ai*(i-x),dp[M-1][x]+Ai*(N-(M-x-1)-i)))\n    # x=M\n    dp[M].append(dp[M-1][M-1]+Ai*(i-M))\nprint(max(dp[N]))", "from sys import setrecursionlimit, exit\nsetrecursionlimit(1000000000)\n\ndef main():\n    n = int(input())\n    a = [(int(v), i) for i, v in enumerate(input().split())]\n    a.sort(reverse=True)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = a[0][0] * (n - 1 - a[0][1])\n    dp[0][1] = a[0][0] * a[0][1]\n    for i, v in enumerate(a[1:]):\n        dp[i+1][0] = dp[i][0] + v[0] * abs(n - 1 - (i + 1) - v[1])\n        dp[i+1][i+2] = dp[i][i+1] + v[0] * abs(v[1] - (i + 1))\n        for j in range(1, i + 2):\n            dp[i+1][j] = max(\n                dp[i][j] + v[0] * abs(n - 1 - (i + 1) + j - v[1]),\n                dp[i][j-1] + v[0] * abs(v[1] - (j - 1)))\n    ans = -float('inf')\n    for i in dp[n-1]:\n        ans = max(ans, i)\n    print(ans)\n\n\nmain()", "def main():  \n  import sys\n  input = sys.stdin.readline\n  n = int(input())\n  a = [int(i) for i in input().split()]\n  b = [int(i) for i in range(n)]\n  ab = [(x,y) for x,y in zip(a,b)]\n  from operator import itemgetter\n  ab = sorted(ab,key=itemgetter(0),reverse=True)\n  dp = [[-10**14]*(n+1) for i in range(n+1)]\n  dp[0][0] = 0\n  for i in range(n):\n    for j in range(i+2):\n      if j >= 1:\n        dp[i+1][j] = max(dp[i][j]+ab[i][0]*abs(ab[i][1]-(n-1-(i-j))),dp[i][j-1]+ab[i][0]*abs(ab[i][1]+1-j))\n      if j == 0:\n        dp[i+1][0] = dp[i][0] + ab[i][0]*abs(ab[i][1]-(n-1-i))\n  print(max(dp[n]))\ndef __starting_point():\n    main()\n__starting_point()", "'''\n\u7740\u60f3\uff1a\u5927\u304d\u3044a\u307b\u3069\u5de6\u53f3\u306e\u7aef\u306b\u79fb\u52d5\u3057\u305f\u3044\u3001\u5c0f\u3055\u3044a\u3092\u5148\u306b\u7aef\u306b\u3084\u308b\u3088\u308a\u5fc5\u305a\u5927\u304d\u304f\u306a\u308b\u304b\u3089\n\u554f\u984c\uff1a\u5358\u7d14\u306b\u8caa\u6b32\u306b\u5927\u304d\u3044a\u304b\u3089\u5de6\u7aef(x-1)\u3068\u53f3\u7aef(N-x)\u306e\u5927\u304d\u3044\u65b9\u306b\u79fb\u52d5\u3059\u308b\u3068\u3001\n      \u6b8b\u308a\u306ea\u306e\u7d44\u307f\u5408\u308f\u305b\u7684\u306b\u6700\u9069\u3067\u306a\u3044\u5834\u5408\u304c\u3042\u308b\n      \u30a2\u30a4\u30c6\u30e0\u306e\u5de6\u53f3\u7aef\u306e\u5358\u7d14\u306a\u5272\u308a\u632f\u308a\u306fO(2^N)\n\u89e3\u6c7a\u7b56\u306e\u7740\u60f3\uff1a\u5927\u304d\u3044\u9806\u306ek\u500b\u3092(k=L+R)\u3068\u306a\u308b\n    \u3000\u3000\u5de6L\u500b\u53f3R\u500b\u306b\u3069\u306e\u3088\u3046\u306b\u5272\u308a\u632f\u3063\u3066\u3082(k+1)\u500b\u76ee\u306e\u6700\u9069\u306a\u5272\u308a\u632f\u308a\u65b9\u306f\u5909\u308f\u3089\u306a\u3044\n\u89e3\u6c7a\u7b56\uff1a\u30a2\u30a4\u30c6\u30e0k\u500b\u5de6\u53f3\u306b\u5272\u308a\u632f\u308b\u72b6\u614b\u3092dp[L][R]\u3067\u4fdd\u5b58O(N^2)\n'''\n\ndef solve():\n  N = int(input())\n  A = [[a, i] for a,i in zip(map(int, input().split()), range(N))]\n  A.sort(key=lambda a: a[0], reverse=True)\n\n  dp = [[0]*(N+1) for _ in range(N+1)] # \u5de6\u304b\u3089x\u30de\u30b9\u53f3\u304b\u3089y\u30de\u30b9\u57cb\u3081\u308b\n  for i in range(0,N):\n    a, l = A[i]\n    for x in range(0,i+1):\n      y = i - x # \u5408\u8a08x+y=i\u30de\u30b9\u65e2\u306b\u57cb\u307e\u3063\u3066\u3044\u308b\u3001\u6b21\u306bi+1\u30de\u30b9\u76ee\u3092\u8003\u3048\u308b\n      dp[x+1][y] = max(dp[x+1][y], dp[x][y] + a * abs(l - x))\n      dp[x][y+1] = max(dp[x][y+1], dp[x][y] + a * abs(l - (N-y-1)))\n\n  print(max(dp[N-i][i] for i in range(N+1)))\n  \nsolve()", "def main():\n    n = int(input())\n    tmp = list(map(int, input().split()))\n    a = [[v, i] for i, v in enumerate(tmp)]\n    a.sort(reverse=True)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(n):\n        v, idx = a[i]\n        for j in range(i+1):\n            dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j]+v*abs(idx-j))\n            dp[i+1][j] = max(dp[i+1][j] , dp[i][j]+v*abs(idx - (n-1-i+j)))\n    print(max(dp[n]))\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\n\na = list(enumerate(a))\na.sort(key=lambda x: x[1])\n\n# dp[left + right][left]\ndp = [[] for _ in range(n+1)]\ndp[0].append(0)\n\nfor i in range(1, n+1): # i = left + right\n    ind, act = a.pop(-1)\n\n    # all right\n    dp[i].append(dp[i-1][0] + act * (n - i - ind))\n\n    # middle\n    for j in range(1, i): # j = left\n        ar = dp[i-1][j] + act * (n - i + j - ind) # right\u306b\u8ffd\u52a0\n        al = dp[i-1][j-1] + act * (ind - j + 1) # left\u306b\u8ffd\u52a0\n        dp[i].append(max([ar, al]))\n\n    # all left\n    dp[i].append(dp[i-1][i-1] + act * (ind - i + 1))\n\nprint(max(dp[n]))", "e=enumerate\nn,a=open(0)\nn=int(n)\nd=[0]\nfor j,(a,i)in e(sorted((int(a),i)for i,a in e(a.split()))[::-1]):d=[d[0]+a*(~i-j+n)]+[max(d[k+1]+a*(n+k-i-j),t+a*abs(i-k))for k,t in e(d[:j])]+[d[j]+a*abs(i-j)]\nprint(max(d))", "from operator import itemgetter as get\nN = int(input())\n\nA = list(map(int, input().split()))\nSA = SB = 0\nABI = sorted(((b:=max(N-i, i-1)*a, SA:=SA+a, SB:=SB+b) and (a, b, i) for i, a in enumerate(A, 1)), reverse=True)\n\ndef solve(a, i, prev, th, tha):\n  pl, pr, ps = 0, -1, 0\n  for l, r, s in prev:\n    if s < th-max(l,r)*tha:\n      continue\n    if pr == r-1:\n      yield l, r-1, max(s+abs(r-i)*a, ps+abs(i-pl)*a)\n    else:\n      if pl:\n        yield pl+1, pr, ps+abs(i-pl)*a\n      yield l, r-1, s+abs(r-i)*a\n    pl, pr, ps = l, r, s\n  yield pl+1, pr, ps+abs(i-pl)*a\n\nprev = [(1, N, 0)]\npm = 0\nfor j, (a,b,i) in enumerate(ABI):\n  M = 0\n  prev = [(M:=max(M,s),) and (l, r, s) for l, r, s in solve(a,i, prev, pm-SB, SA)]\n  pm = M\n  SA -= a\n  SB -= b\n\nprint(pm)\n", "N = int(input())\nA = [(a, i) for i, a in enumerate(map(int, input().split()), start=1)]\nA.sort(reverse=True)\n\ndp = [[0] * (N + 1) for _ in range(N + 1)]\n\nfor s, (a, i) in enumerate(A):\n    for l in range(s + 1):\n        r = s - l\n        L = dp[l][r] + a * (i - (l + 1))\n        R = dp[l][r] + a * (N - r - i)\n\n        if dp[l + 1][r] < L:\n            dp[l + 1][r] = L\n        if dp[l][r + 1] < R:\n            dp[l][r + 1] = R\n\nans = 0\nfor i in range(N + 1):\n    ans = max(ans, dp[i][N - i])\nprint(ans)\n", "from collections import *\nfrom itertools import *\n\nN = int(input())\n\nA = list(map(int, input().split()))\nSA = SB = 0\nABI = sorted(((b:=max(N-i, i-1)*a, SA:=SA+a, SB:=SB+b) and (a, b, i) for i, a in enumerate(A, 1)), reverse=True)\n\nprev = {0:0}\nprev_max = 0\nfor k, (a, b, i) in enumerate(ABI):\n  curr = defaultdict(int)\n  curr_max = 0\n  for l, p in list(prev.items()):\n    r = k-l\n    if p + SB - max(l,r)*SA < prev_max:\n      continue\n    curr[l] = max(curr[l], p+abs(N-i-r)*a)\n    curr[l+1] = p+abs(i-l-1)*a\n    curr_max = max(curr_max, curr[l], curr[l+1])\n  SA -= a\n  SB -= b\n  prev = curr\n  prev_max = curr_max\n\nprint(curr_max)\n", "from collections import *\nfrom itertools import *\n\nN = int(input())\n\nA = list(map(int, input().split()))\nSA = SB = 0\nABI = sorted(((b:=max(N-i, i-1)*a, SA:=SA+a, SB:=SB+b) and (a, b, i) for i, a in enumerate(A, 1)), reverse=True)\n\nprev = {0:0}\nprev_max = 0\nfor k, (a, b, i) in enumerate(ABI):\n  curr = defaultdict(int)\n  curr_max = 0\n  for l, p in list(prev.items()):\n    r = k-l\n    if p + SB - min(l,r)*SA < prev_max:\n      continue\n    curr[l] = max(curr[l], p+abs(N-i-r)*a)\n    curr[l+1] = p+abs(i-l-1)*a\n    curr_max = max(curr_max, curr[l], curr[l+1])\n  SA -= a\n  SB -= b\n  prev = curr\n  prev_max = curr_max\n\nprint(curr_max)\n", "N = int(input())\nA = list(map(int, input().split()))\ntable = []\n \nfor i, a in enumerate(A):\n    table.append([a,i])\ntable.sort()\n \n# DP[i][j] \u5de6\u7aef\u306b i \u500b, \u53f3\u7aef\u306b j \u500b\u8caa\u6b32\u306b\u8a70\u3081\u305f\u3068\u304d\u306e\u3046\u308c\u3057\u3055\nDP = [[0 for i in range(N+1)] for j in range(N+1)]\nfor i in range(1,N+1):\n    # i \u4eba\u76ee table[i-1] \u306e\u5e7c\u5150\u3092\u79fb\u52d5\u3055\u305b\u308b\n    baby, pos = table.pop()\n    \n    DP[i][0] = DP[i-1][0] + baby * abs(pos-i+1)\n    DP[0][i] = DP[0][i-1] + baby * abs(pos-(N-i))\n    for x in range(1,i):\n        y = i - x\n \n        #\u5de6\u7aef\u306b\u7f6e\u304f\u5834\u5408\u3068\u53f3\u7aef\u306b\u7f6e\u304f\u5834\u5408\u3067max\n        DP[x][y] = max(DP[x-1][y] + baby * abs(pos-x+1),\\\n                     DP[x][y-1] + baby * abs(pos-(N-y)))\n \nans = 0\nfor i in range(N+1):\n    ans = max(ans, DP[i][N-i])\nprint(ans)", "def i1str():\n    return input()\n\n\ndef istrs(n=None):\n    if n is None:\n        return input().split()\n    a = []\n    for _ in range(n):\n        a.append(istrs())\n    return a\n\n\ndef i1num():\n    return int(input())\n\n\ndef inums(n=None):\n    if n is None:\n        return list(map(int, input().split()))\n    a = []\n    for _ in range(n):\n        a.append(inums())\n    return a\n\n\ndef ostrs(l, sp=\" \"):\n    print((sp.join(l)))\n\n\ndef onums(l, sp=\" \"):\n    print((sp.join(map(str, l))))\n\n\ndef solve(n, aii):\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for x in range(n+1):\n        for y in range(n+1-x):\n            if x == y == 0:\n                continue\n            ai, i = aii[n-x-y]\n            dp[x][y] = max(dp[x-1][y] + ai * (i-x+1) if x > 0 else 0,\n                           dp[x][y-1] + ai * (n-y-i) if y > 0 else 0)\n\n    res = 0\n    for x in range(n+1):\n        if dp[x][n-x] > res:\n            res = dp[x][n-x]\n    return res\n\n\ndef __starting_point():\n    n = i1num()\n    a = inums()\n    aii = sorted((a[i], i)for i in range(n))\n    print((solve(n, aii)))\n\n__starting_point()", "from operator import itemgetter as get\nN = int(input())\n\nA = list(map(int, input().split()))\nSB = 0\nABI = sorted(((b:=max(N-i, i-1)*a, SB:=SB+b) and (a, b, i) for i, a in enumerate(A, 1)), reverse=True)\n\ndef solve(a, i, prev, th):\n  pl, pr, ps = 0, -1, 0\n  for l, r, s in prev:\n    if s < th:\n      continue\n    if pr == r-1:\n      yield l, r-1, max(s+abs(r-i)*a, ps+abs(i-pl)*a)\n    else:\n      if pl:\n        yield pl+1, pr, ps+abs(i-pl)*a\n      yield l, r-1, s+abs(r-i)*a\n    pl, pr, ps = l, r, s\n  yield pl+1, pr, ps+abs(i-pl)*a\n\nprev = [(1, N, 0)]\npm = 0\nfor j, (a,b,i) in enumerate(ABI):\n  M = 0\n  prev = [(M:=max(M,s),) and (l, r, s) for l, r, s in solve(a,i, prev, pm-SB)]\n  pm = M\n  SB -= b\n\nprint(pm)\n", "from heapq import heappush, heappop\nfrom math import inf\n\nimport numpy as np\n\n\nn = int(input())\nA = []\n[heappush(A, (-v, i)) for i, v in enumerate(map(int, input().split()), 1)]\ndp = np.full((n + 1, n + 1), -inf, dtype=int)\ndp[0, 0] = 0\n\nfor i in range(n):\n    v, j = heappop(A)\n    v = -v\n    dp[i + 1, 1:] = dp[i, :-1] + v * np.abs(j - np.arange(1, n + 1))\n    dp[i + 1, :-1] = np.maximum(dp[i, :-1] + v * np.abs(j - np.arange(n - i, n + n - i)), dp[i + 1, :-1])\n\nprint((dp[-1,].max()))\n", "def f(n, a_list):\n    a_list = list(zip(list(range(n)), a_list))\n    a_list.sort(key=lambda x: x[1])\n    # a_list[j][0]: (j + 1)\u756a\u76ee\u306b\u5c0f\u3055\u3044\u6d3b\u767a\u5ea6\u3092\u3082\u3064\u5e7c\u5150\u306e\u5ea7\u6a19\n    # a_list[j][1]: \u2191\u306e\u6d3b\u767a\u5ea6\n    dp = [0]\n    # dp[x]: x \u4eba\u3092\u5de6, (k - x) \u4eba\u3092\u53f3\u306b\u7f6e\u304f\u5834\u5408\n    for k in range(1, n + 1):\n        dp_ = []\n        i, a = a_list.pop()  # i: \u5ea7\u6a19, a: \u6d3b\u767a\u5ea6\n        dp_.append(dp[0] + a * (n - k - i))\n        for x in range(1, k):\n            dp_.append(max(dp[x - 1] + a * (i - x + 1),\n                           dp[x] + a * (n - k + x - i)))\n        dp_.append(dp[k - 1] + a * (i - k + 1))\n        dp = dp_\n    return max(dp)\n\n\ndef __starting_point():\n    n = int(input())\n    a_list = list(map(int, input().split()))\n    print((f(n, a_list)))\n\n__starting_point()", "import pprint\nN = int(input())\nA = list(map(int, input().split()))\n\ndef student_sorting(N, A):\n    student_list = [0] * N\n\n    for initial_pos, activity in enumerate(A):\n        student_list[initial_pos] = (activity, initial_pos)\n\n    return sorted(student_list, reverse = True)\n\ndef DP(N, student_list):\n    DP_map = list(list(0 for row in range(N + 1 - column)) for column in range(N + 1))\n    ans_list = []\n    ans = 0\n\n    for left in range(N): #\u521d\u671f\u5024\u8a2d\u5b9a right = 0\n        activity = student_list[left][0]\n        distance_l = abs(left - student_list[left][1])\n        DP_map[left + 1][0] = DP_map[left][0] + activity * distance_l\n\n    for right in range(N): #\u521d\u671f\u5024\u8a2d\u5b9a left = 0\n        activity = student_list[right][0]\n        distance_r = abs((N - 1 - right) - student_list[right][1])\n        DP_map[0][right + 1] = DP_map[0][right] + activity * distance_r\n\n    for left in range(1, N + 1):\n        for right in range(1, N - left + 1):\n            activity = student_list[left + right - 1][0]\n            distance_l = abs((left - 1) - student_list[left + right - 1][1])\n            distance_r = abs((N - right) - student_list[left + right - 1][1])\n            score_if_appended_to_left = DP_map[left - 1][right] + activity * distance_l\n            score_if_appended_to_right = DP_map[left][right - 1] + activity * distance_r\n            DP_map[left][right] = max(score_if_appended_to_left, score_if_appended_to_right)\n\n    for left in range(N + 1):\n        row = N - left\n        column = left\n        ans_list.append(DP_map[column][row])\n\n    ans = max(ans_list)\n\n    return ans\n\nstudent_list = student_sorting(N, A)\nans = DP(N, student_list)\nprint(ans)\n", "n = int(input())\na = sorted((int(x), k) for k, x in enumerate(input().split()))\nopt = [[0 for j in range(n + 1)] for i in range(n + 1)]\nfor i in reversed(list(range(n))):\n    for j in range(i, n):\n        val, k = a[j - i]\n        opt[i][j] = max(val * abs(k - i) + opt[i + 1][j], val * abs(k - j) + opt[i][j - 1])\nprint((opt[0][n - 1]))\n", "def main():\n  N = int(input())\n  INF = float('inf')\n  A = [(i+1, a) for i, a in enumerate(map(int, input().split()))]\n  A = sorted(A, key=lambda x: x[1], reverse = True)\n \n  dp = [[-INF] * (N+1) for _ in range(N+1)]\n  dp[0][0] = 0\n \n  for s in range(1, N+1):\n    for l in range(s+1):\n      r = s - l\n      dp[l][r] = max(dp[l-1][r] + A[s-1][1] * abs(A[s-1][0]-l), dp[l][r-1] + A[s-1][1] * abs(N-r+1-A[s-1][0]))\n    \n  ans = 0\n  for m in range(N):\n    if(dp[m][N-m] > ans):\n      ans = dp[m][N-m]\n    \n  print(ans)\n \nmain()", "def solve():\n        \n    N = int(input())\n    A = [(a, i+1) for i, a in enumerate(map(int, input().split()))]\n\n    A.sort(reverse=True)\n    INF = float('inf')\n    dp = [[-INF] * (N+1) for _ in range(N+1)]\n    dp[0][0] = 0\n\n    for s in range(1, N+1):\n        for l in range(s+1):\n            r = s - l\n            dp[l][r] = max(dp[l-1][r] + A[s-1][0] * abs(A[s-1][1]-l), dp[l][r-1] + A[s-1][0] * abs(N-r+1-A[s-1][1]))\n\n    ans = 0\n    for m in range(N):\n        if dp[m][N-m] > ans:\n            ans = dp[m][N-m]\n\n    print(ans)\nsolve()", "# -*- coding: utf-8 -*-\n\n\ndef main():\n\n    # \u6574\u6570\u306e\u5165\u529b\n    a = int(input())\n    # # \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\n    nums = list(map(int, input().split()))\n\n    vilist = []\n    for i in range(a):\n        vilist.append((nums[i], i))\n    vilist = sorted(vilist, key=lambda vi: vi[0])\n\n    # dp[x][y]\u3092x\u4eba\u3092\u5de6\u304b\u3089\u6d3b\u6027\u5ea6\u9806\u306b\u4e26\u3079\u3066\u3001y\u4eba\u3092\u53f3\u304b\u3089\u6d3b\u6027\u5ea6\u9806\u306b\u4e26\u3079\u305f\u72b6\u614b\u306e\u30b9\u30b3\u30a2\u6700\u5927\u5024\u3068\u3059\u308b\n    dp = []\n    for i in range(a):\n        dp.append([0]*(a-i))\n\n    # dp = [[0] * a for i in range(a)]\n\n    # cnt = 0\n    # dp[i][j]\u3092\u8003\u3048\u308b\n    for k in range(a-1):\n        vi = vilist.pop()\n        v = vi[0]\n        p = vi[1]\n        vi_z = vilist[0]\n        vz = vi_z[0]\n        pz = vi_z[1]\n\n        for i in range(k + 2):\n            # cnt += 1\n            j = k - i + 1\n            # if i == 0 and j == 0:\n            #     continue\n\n            # \u6700\u5f8c\u306e\u5024\u306f\u5834\u6240\u304c\u7279\u5b9a\u3067\u304d\u308b\u306e\u3067\u305d\u306e\u307e\u307e\u8a08\u7b97\u3055\u305b\u308b\n            if k == a - 2:\n                if j == 0:\n                    dp[i][0] = dp[i-1][0] + v * abs(p - i + 1) + vz * abs(pz - i)\n                elif i == 0:\n                    dp[0][j] = dp[0][j-1] + v * abs(a - j - p) + vz * abs(a - j - 1 - pz)\n                else:\n                    dp[i][j] = max(dp[i-1][j] + v * abs(p - i + 1) + vz * abs(pz - i),\n                                   dp[i][j-1] + v * abs(a - j - p) + vz * abs(pz - i))\n            else:\n                if j == 0:\n                    dp[i][0] = dp[i-1][0] + v * abs(p - i + 1)\n                elif i == 0:\n                    dp[0][j] = dp[0][j-1] + v * abs(a - j - p)\n                else:\n                    dp[i][j] = max(dp[i-1][j] + v * abs(p - i + 1),\n                                   dp[i][j-1] + v * abs(a - j - p))\n\n    # print(cnt)\n    print((max([max(x) for x in dp])))\n\n\nmain()\n", "#!/usr/bin/env python3\n# vim: set fileencoding=utf-8\n\n# pylint: disable=unused-import, invalid-name, missing-docstring, bad-continuation\n\n\n\"\"\"Module docstring\n\"\"\"\n\nimport functools\nimport heapq\nimport itertools\nimport logging\nimport math\nimport random\nimport string\nimport sys\nfrom argparse import ArgumentParser\nfrom collections import defaultdict, deque\nfrom copy import deepcopy\nfrom typing import Dict, List, Optional, Set, Tuple\n\n\ndef solve(values: List[int], nb: int) -> int:\n    s_values = sorted(((v, i) for i, v in enumerate(values)), reverse=True)\n    dp = [[0 for _ in range(nb + 1)] for _ in range(nb + 1)]\n    for i, (v, p) in enumerate(s_values, start=1):\n        for x in range(i + 1):\n            y = i - x\n            if y == 0:\n                dp[x][y] = dp[x - 1][0] + abs(p - x + 1) * v\n                continue\n            if x == 0:\n                dp[x][y] = dp[x][y - 1] + abs(nb - y - p) * v\n                continue\n            dp[x][y] = max(\n                dp[x - 1][y] + abs(p - x + 1) * v, dp[x][y - 1] + abs(nb - y - p) * v\n            )\n    return max(dp[i][nb - i] for i in range(nb + 1))\n\n\ndef do_job():\n    \"Do the work\"\n    LOG.debug(\"Start working\")\n    # first line is number of test cases\n    N = int(input())\n    values = list(map(int, input().split()))\n    # values = []\n    # for _ in range(N):\n    #     values.append(input().split())\n    result = solve(values, N)\n    print(result)\n\n\ndef print_output(testcase: int, result) -> None:\n    \"Formats and print result\"\n    if result is None:\n        result = \"IMPOSSIBLE\"\n    print((\"Case #{}: {}\".format(testcase + 1, result)))\n    # 6 digits float precision {:.6f} (6 is the default value)\n    # print(\"Case #{}: {:f}\".format(testcase + 1, result))\n\n\ndef configure_log(log_file: Optional[str] = None) -> None:\n    \"Configure the log output\"\n    log_formatter = logging.Formatter(\n        \"%(asctime)s - %(filename)s:%(lineno)d - \" \"%(levelname)s - %(message)s\"\n    )\n    if log_file:\n        handler = logging.FileHandler(filename=log_file)\n    else:\n        handler = logging.StreamHandler(sys.stdout)\n    handler.setFormatter(log_formatter)\n    LOG.addHandler(handler)\n\n\nLOG = None\n# for interactive call: do not add multiple times the handler\nif not LOG:\n    LOG = logging.getLogger(\"template\")\n    configure_log()\n\n\ndef main(argv=None):\n    \"Program wrapper.\"\n    if argv is None:\n        argv = sys.argv[1:]\n    parser = ArgumentParser()\n    parser.add_argument(\n        \"-v\",\n        \"--verbose\",\n        dest=\"verbose\",\n        action=\"store_true\",\n        default=False,\n        help=\"run as verbose mode\",\n    )\n    args = parser.parse_args(argv)\n    if args.verbose:\n        LOG.setLevel(logging.DEBUG)\n    do_job()\n    return 0\n\n\ndef __starting_point():\n    import doctest\n\n    doctest.testmod()\n    return(main())\n\n\nclass memoized:\n    \"\"\"Decorator that caches a function's return value each time it is called.\n    If called later with the same arguments, the cached value is returned, and\n    not re-evaluated.\n    \"\"\"\n\n    def __init__(self, func):\n        self.func = func\n        self.cache = {}\n\n    def __call__(self, *args):\n        try:\n            return self.cache[args]\n        except KeyError:\n            value = self.func(*args)\n            self.cache[args] = value\n            return value\n        except TypeError:\n            # uncachable -- for instance, passing a list as an argument.\n            # Better to not cache than to blow up entirely.\n            return self.func(*args)\n\n    def __repr__(self):\n        \"\"\"Return the function's docstring.\"\"\"\n        return self.func.__doc__\n\n    def __get__(self, obj, objtype):\n        \"\"\"Support instance methods.\"\"\"\n        return functools.partial(self.__call__, obj)\n\n__starting_point()", "def main():\n  N = int(input())\n  INF = float('inf')\n  A = [(i+1, a) for i, a in enumerate(map(int, input().split()))]\n  A = sorted(A, key=lambda x: x[1], reverse = True)\n\n  dp = [[-INF] * (N+1) for _ in range(N+1)]\n  dp[0][0] = 0\n\n  for s in range(1, N+1):\n    for l in range(s+1):\n      r = s - l\n      dp[l][r] = max(dp[l-1][r] + A[s-1][1] * abs(A[s-1][0]-l), dp[l][r-1] + A[s-1][1] * abs(N-r+1-A[s-1][0]))\n    \n  ans = 0\n  for m in range(N):\n    if(dp[m][N-m] > ans):\n      ans = dp[m][N-m]\n    \n  print(ans)\n\nmain()\n", "# coding: utf-8\nN = int(input())\n_A = sorted(enumerate(map(int, input().split()), 1), key=lambda x:x[1], reverse=True)\ndp = [[0] * (N+1) for i in range(N+1)]\n\nfor i in range(1,N+1):\n    k, Ak = _A[i-1]\n    if (N-i-k) < 0:break\n    dp[0][i] = dp[0][i-1] + (N-i+1-k) * Ak\n\nfor i in range(1,N+1):\n    k, Ak = _A[i-1]\n    if (k-i) < 0:break\n    dp[i][0] = dp[i-1][0] + (k-i) * Ak\n\nfor x in range(1, N+1):\n    for y in range(1, N-x+1):\n        k, val = _A[x+y-1]\n        dp[x][y]= max(dp[x-1][y] + abs(k-x)*val,\n                      dp[x][y-1] + abs(N-y-k+1) * val)\n\nprint((int(max(dp[i][N-i] for i in range(N+1)))))\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(N: int, A: \"List[int]\"):\n    A = sorted(enumerate(A), reverse=True, key=lambda x: x[1])\n\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    for i in range(N):\n        for j in range(0, N - i):\n            idx, a = A[i + j]\n            #idx = indices[i + j]\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + a * abs(idx - i))\n            dp[i][j + 1] = max(dp[i][j + 1], dp[i][j] + a * abs(N - 1 - j - idx))\n    result = -1\n    for i in range(N):\n        tmp = dp[i][N - i]\n        if tmp > result:\n            result = tmp\n    print(result)\n    return\n\n\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def solve(N, A):\n    a = [(i, ai) for i, ai in enumerate(A)]\n    a.sort(key=lambda x: x[1], reverse=True)\n\n    # import numpy as np\n    # dp = np.zeros((N+1, N+1), np.int8)\n\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n\n    dp[0][0] = 0\n    for i, ai in enumerate(a):\n        for l in range(i+1):\n            r = i - l\n            dp[i+1][l] = max(dp[i+1][l], dp[i][l] + ai[1] * ((N-1-r) - ai[0]))\n            dp[i+1][l+1] = max(dp[i+1][l+1], dp[i][l] + ai[1] * (ai[0] - l))\n\n    print(max(dp[N]))\n\nN = int(input())\nA = list(map(int, input().split()))\nsolve(N,A)", "#!python3\n\niim = lambda: list(map(int, input().rstrip().split()))\n\ndef resolve():\n    N = int(input())\n    A = list(enumerate(iim()))\n\n    A.sort(key=lambda x: (x[1], (2*x[0]-N)**2), reverse=True)\n\n    dp = [0] * (N+1)\n    dp0 = dp[:]\n    for i, (j, ai) in enumerate(A):\n        for k in range(i+1):\n            dp[k] = max(dp[k], dp0[k] + abs(N-i+k-1-j) * ai)\n            dp[k+1] = max(dp[k+1], dp0[k] + abs(k-j) * ai)\n        dp, dp0 = dp0, dp\n\n    print((max(dp0)))\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\n\nA = sorted([(val, pos) for pos, val in enumerate(A)], reverse=True)\n\ndp = [0]\nfor i, (val, pos) in enumerate(A):\n    ldp = [e + val * abs(pos - (i - r)) for r, e in enumerate(dp)]\n    rdp = [e + val * abs(N - 1 - r - pos) for r, e in enumerate(dp)]\n    dp = [max(L, R) for L, R in zip(ldp + [0], [0] + rdp)]\n\nprint((max(dp)))\n", "def main():\n    import sys\n    input = sys.stdin.readline\n\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    B = [(A[i], i) for i in range(N)]\n    B.sort(key = lambda x: x[0], reverse = True)\n\n    DP = [[0] * (N + 1) for _ in range(N + 1)]\n\n    for i, b in enumerate(B):\n        a = b[0]\n        tmp = b[1]\n        for x in range(i + 1):\n            DP[x + 1][i - x] = max(DP[x + 1][i - x], DP[x][i - x] + a * abs(tmp - x))\n            DP[x][i - x + 1] = max(DP[x][i - x + 1], DP[x][i - x] + a * abs((N - tmp - 1) - (i - x)))\n\n    ans = 0\n    for i in range(N + 1):\n        ans = max(ans, DP[i][N - i])\n\n    print (ans)\n\n    # for tmp in DP:\n    #     print (tmp)\n\ndef __starting_point():\n    main()\n__starting_point()", "from heapq import heappush, heappop\nfrom math import inf\n\nimport numpy as np\n\n\nn = int(input())\nA = []\n[heappush(A, (-v, i)) for i, v in enumerate(map(int, input().split()), 1)]\ndp = np.full((n + 1, n + 1), -inf, dtype=int)\ndp[0][0] = 0\n\nfor i in range(n):\n    v, j = heappop(A)\n    v = -v\n    dp[i + 1, 1:] = np.maximum(dp[i, :-1] + v * np.abs(j - np.arange(1, n + 1)), dp[i + 1, 1:])\n    dp[i + 1, :-1] = np.maximum(dp[i, :-1] + v * np.abs(j - np.arange(n - i, n + n - i)), dp[i + 1, :-1])\n\nprint((dp[-1,].max()))\n", "n,*a = map(int,open(0).read().split())\na = sorted([(j,i) for i,j in enumerate(a)],reverse=True)\ndp = [0]\nfor i,(j,k) in enumerate(a):\n  ldp =  [abs(k-i+a)*j+b for a,b in enumerate(dp)]\n  rdp =  [abs(n-1-k-a)*j+b for a,b in enumerate(dp)]\n  dp = [max(a,b) for a,b in zip(ldp+[0],[0]+rdp)]\nprint(max(dp))", "from collections import *\nfrom itertools import *\n\nN = int(input())\n\nA = list(map(int, input().split()))\nSA = SB = 0\nABI = sorted(((b:=max(N-i, i-1)*a, SA:=SA+a, SB:=SB+b) and (a, b, i) for i, a in enumerate(A, 1)), reverse=True)\n\nprev = [0]\nprev_max = 0\nfor k, (a, b, i) in enumerate(ABI):\n  curr = [0]*(k+2)\n  for l in range(k+1):\n    r = k-l\n    if prev[l] + SB - min(l,r)*SA < prev_max:\n      continue\n    curr[l] = max(curr[l], prev[l]+abs(N-i-r)*a)\n    curr[l+1] = prev[l]+abs(i-l-1)*a\n  SA -= a\n  SB -= b\n  prev = curr\n  prev_max = max(prev)\n\nprint(prev_max)\n", "\nN = int(input())\n\nA = list(map(int, input().split()))\nAI = sorted(((a, i) for i, a in enumerate(A, 1)), reverse=True)\n\ndef solve(a, i, prev):\n  pl, pr, ps = i, 0, 0\n  for l, r, s in prev:\n    yield l, r-1, max(s+abs(r-i)*a, ps+abs(i-pl)*a)\n    pl, pr, ps = l, r, s\n  yield pl+1, pr, ps+abs(i-pl)*a\n\nprev = [(1, N, 0)]\nfor a,i in AI:\n  prev = [*solve(a,i, prev)]\n\nprint((max(s for l, r, s in prev)))\n", "N = int(input())\nAs = list(map(int, input().split()))\n\ndp = [[0] * (N-k+1) for k in range(N+1)]\n\ns = 0\nfor i, A in sorted(enumerate(As), key = lambda t:t[1], reverse=True):\n    s += 1\n    for x in range(s+1):\n        y = s - x\n        if x > 0 and y > 0:\n            dp[x][y] = max(dp[x-1][y] + A * (i - x + 1), dp[x][y-1] + A * ((N-y) - i))\n        elif x == 0:\n            dp[x][y] = dp[x][y-1] + A * ((N-y) - i)\n        else:\n            dp[x][y] = dp[x-1][y] + A * (i - x + 1)\nans = max((dp[x][N-x] for x in range(N+1)))\n\nprint(ans)", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    AA = [(v, i) for i, v in enumerate(A)]\n    AA.sort(reverse=True)\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    for i, (a, b) in enumerate(AA, start=1):\n        for x in range(i+1):\n            y = i - x\n            if y == 0:\n                dp[x][y] = dp[x-1][y] + abs(b - x+1) * a\n            elif x == 0:\n                dp[x][y] = dp[x][y-1] + abs(N-y-b) * a\n            else:\n                dp[x][y] = max(dp[x-1][y] + abs(b - x + 1) * a, dp[x][y-1] + abs(N-y-b) * a)\n    r = 0\n    for i in range(N+1):\n        r = max(r, dp[i][N-i])\n    return r\nprint((main()))\n", "n = int(input())\nA_l = [(A,i) for i, A in enumerate(map(int,input().split()))]\nA_l.sort(reverse=True)\n\ndp = []\nfor _ in range(n+1):\n    dp.append([0] * (n+1))\nfor j in range(1,n+1): # all go bigger\n    a, i = A_l[j-1]\n    dp[j][0] = dp[j-1][0] + a*(n-(j-1) - (i+1))\nfor k in range(1,n+1): # all go smaller\n    a, i = A_l[k-1]\n    dp[0][k] = dp[0][k-1] + a*((i+1) - (1+(k-1)))\n\nfor j in range(1,n+1):\n    for k in range(1,n-j+1):\n        a, i = A_l[j+k-1]\n        j_plus = a*(n-(j-1) - (i+1))\n        k_plus = a*((i+1) - (1+(k-1)))\n        dp[j][k] = max(dp[j-1][k]+j_plus, dp[j][k-1]+k_plus)\n\nresult = 0\nfor j in range(0,n+1):\n    k = n-j\n    result = max(result, dp[j][k])\nprint(result)\n#for l in range(n+1):\n#    print(dp[l])\n", "N = int(input())\n\nA = list(map(int, input().split()))\nABI = sorted(((a, max(N-i, i-1)*a, i) for i, a in enumerate(A, 1)), reverse=True)\n\nprev = [0]\nfor k, (a, b, i) in enumerate(ABI):\n  curr = [0]*(k+2)\n  for l in range(k+1):\n    curr[l] = max(curr[l], prev[l]+abs(N-i-k+l)*a)\n    curr[l+1] = prev[l]+abs(i-l-1)*a\n\n  prev = curr\n\nprint((max(prev)))\n", "N = int(input())\nA = list(map(int, input().split()))\n\np = list(range(N))\np.sort(key=lambda i: A[i], reverse=True)\n\ndp = [[0]*(N + 1) for _ in range(N + 1)]\nfor i in range(N):\n    for j in range(i + 1):\n        pi = p[i]\n        dp[i+1][j] = max(dp[i+1][j], dp[i][j] + A[pi]*(N - i + j - 1 - pi))\n        dp[i+1][j+1] = dp[i][j] + A[pi]*(pi - j)\nprint((max(dp[N])))\n", "n = int(input())\na = list(map(int, input().split()))\nassert len(a) == n\n\n# \u6dfb\u5b57\u306e\u30ea\u30b9\u30c8\np = list(range(n))\np.sort(key=lambda i: a[i])\n\n# dp[j] = \u4f4d\u7f6ej\u304b\u3089\u5e45i\u306e\u533a\u9593\u306b\u5c0f\u3055\u3044\u65b9\u304b\u3089i\u500b\u3092\u914d\u7f6e\u3057\u305f\u3068\u304d\u306e\u6700\u5927\u3046\u308c\u3057\u3055\ndp = [0] * (n + 1)\n\nfor i in range(n):\n    for j in range(n - i):\n        dp[j] = max(dp[j]     + a[p[i]] * abs(p[i] - (j + i)),\n                    dp[j + 1] + a[p[i]] * abs(p[i] - j))\n\nprint(dp[0])", "e=enumerate\nn,a=open(0)\nn=int(n)\nd=[0]+[-2**64]*n\nfor j,(a,i)in e(sorted((-int(a),i)for i,a in e(a.split()))):d=[max(t-a*(~i-j+k+n),d[k-1]-a*abs(~i+k))for k,t in e(d)]\nprint(max(d))", "N = int(input())\nA = sorted([(int(x[1]), x[0]) for x in enumerate(input().split())], reverse=True)\n\n\nV = [0]\n\nfor i in range(N-1):\n    a, p = A[i]\n    s = i+1\n    V2 = [None]*(s+1)\n\n    for t in range(s+1):\n        v = 0\n\n        if t > 0:\n            v = V[t-1] + a*abs(p-(t-1))\n\n        if t < s:\n            v = max(V[t] + a*abs(p-(N-s+t)), v)\n\n        V2[t] = v\n\n    V = V2\n\na, p = A[-1]\nfor i in range(N):\n    V[i] += a*abs(p-i)\n\nprint((max(V)))\n\n\n\n\n\n            \n", "from sys import stdin\n\n\ndef main():\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    a2 = [[a[i], i] for i in range(n)]\n    a2.sort(reverse=True)\n\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    ans = 0\n\n    for i in range(n + 1):\n        for j in range(n + 1 - i):\n            s1 = s2 = 0\n            if i > 0:\n                s1 = dp[i - 1][j] + a2[i + j - 1][0] * (a2[i + j - 1][1] - (i - 1))\n            if j > 0:\n                s2 = dp[i][j - 1] + a2[i + j - 1][0] * ((n - j) - a2[i + j - 1][1])\n            dp[i][j] = max(s1, s2)\n        ans = max(ans, dp[i][n - i])\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n    a[i]=(a[i],i)\nb=sorted(a,reverse=True)\ndp=[[-10**14 for i in range(n+1)] for j in range(n+1)]\ndp[0][0]=0\nfor i in range(1,n+1):\n    see=b[i-1][0]\n    prv=b[i-1][1]\n    for j in range(i+1):\n        dp[j][i-j]=max(dp[j-1][i-j]+abs(prv-(j-1))*see,dp[j][i-j-1]+abs(n-i+j-prv)*see)\nans=0\nfor i in range(n+1):\n    ans=max(ans,dp[i][n-i])\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\n\np = list(range(n))\np.sort(key=lambda i: a[i])\n\ndp = [0] * (n + 1)\n\nfor i in range(n):\n    for j in range(n - i):\n        dp[j] = max(dp[j]     + a[p[i]] * abs(p[i] - (j + i)),dp[j + 1] + a[p[i]] * abs(p[i] - j))\n\nprint((dp[0]))\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = sorted([(j, i) for i, j in enumerate(a)])[::-1]\n    dp = [0]\n    for i in range(n):\n        dp2 = [0]*(i+2)\n        A, p = a[i]\n        for j in range(i+1):\n            right = n-i-1+j\n            dp2[j] = max(dp2[j], dp[j]+abs(p-right)*A)\n            dp2[j+1] = max(dp2[j+1], dp[j]+abs(p-j)*A)\n        dp = dp2\n    print((max(dp2)))\n\n\nmain()\n", "n=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i,x in enumerate(a):\n    l.append([x,i])\nl.sort(reverse=True)\ncnt=1\ndp=[[0]*(n+1) for _ in range(n+1)]\nfor i,j in l:\n    for x in range(cnt+1):\n        if x==0:\n            dp[x][cnt-x]=dp[x][cnt-x-1]+i*(n-1-(cnt-x-1)-j)\n        elif x==cnt:\n            dp[x][cnt-x]=dp[x-1][cnt-x]+i*(j-x+1)\n        else:\n            dp[x][cnt-x]=max(dp[x-1][cnt-x]+i*(j-x+1),dp[x][cnt-x-1]+i*(n-1-(cnt-x-1)-j))\n    cnt+=1\nans=0\nfor i in range(n+1):\n    ans=max(ans,dp[i][n-i])\nprint(ans)", "from collections import *\nfrom itertools import *\n\nN = int(input())\n\nA = list(map(int, input().split()))\nSA = SB = 0\nABI = sorted(((b:=max(N-i, i-1)*a, SA:=SA+a, SB:=SB+b) and (a, b, i) for i, a in enumerate(A, 1)), reverse=True)\n\nprev = {0:0}\nprev_max = 0\nfor k, (a, b, i) in enumerate(ABI):\n  curr = defaultdict(int)\n  for l, p in list(prev.items()):\n    r = k-l\n    if p + SB - max(l,r)*SA < prev_max:\n      continue\n    curr[l] = max(curr[l], p+abs(N-i-r)*a)\n    curr[l+1] = p+abs(i-l-1)*a\n  SA -= a\n  SB -= b\n  prev = curr\n  prev_max = max(prev.values())\n\nprint(prev_max)\n", "def i1str():\n    return input()\n\n\ndef istrs(n=None):\n    if n is None:\n        return input().split()\n    a = []\n    for _ in range(n):\n        a.append(istrs())\n    return a\n\n\ndef i1num():\n    return int(input())\n\n\ndef inums(n=None):\n    if n is None:\n        return list(map(int, input().split()))\n    a = []\n    for _ in range(n):\n        a.append(inums())\n    return a\n\n\ndef ostrs(l, sp=\" \"):\n    print((sp.join(l)))\n\n\ndef onums(l, sp=\" \"):\n    print((sp.join(map(str, l))))\n\n\ndef solve(n, aii):\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for x in range(1, n+1):\n        ai, i = aii[x-1]\n        dp[x][0] = dp[x-1][0] + ai * (i-x+1)\n        dp[0][x] = dp[0][x-1] + ai * (n-x-i)\n\n    for s in range(1, n+1):\n        for x in range(1, s):\n            y = s - x\n            ai, i = aii[s-1]\n            dp[x][y] = max(dp[x-1][y] + ai * (i-x+1),\n                           dp[x][y-1] + ai * (n-y-i))\n\n    res = 0\n    for x in range(n+1):\n        if dp[x][n-x] > res:\n            res = dp[x][n-x]\n    return res\n\n\ndef __starting_point():\n    n = i1num()\n    a = inums()\n    aii = sorted([(a[i], i)for i in range(n)], reverse=True)\n    print((solve(n, aii)))\n\n__starting_point()", "def main():\n    import numpy as np\n    n=int(input())\n    a=list(enumerate(map(int,input().split())))\n    a.sort(key=lambda x: -x[1])\n    dp=[np.zeros(i+1,dtype=np.int64) for i in range(n+1)]\n    dp[0]=np.zeros(1,dtype=np.int64)\n    r=np.arange(n+1,dtype=np.int64)\n    for time,ix in enumerate(a):\n        i,x=ix\n        dp[time+1][1:]=dp[time][:time+1]+(i-r[:time+1])*x\n        np.maximum(dp[time+1][:-1],dp[time]+((n-1-(time-r[:time+1]))-i)*x,out=dp[time+1][:-1])\n    print(np.max(dp[n]))\nmain()", "import sys\nimport numpy as np\ndef f(n,a_):\n      a=[]\n      for i,ai in enumerate(a_):\n            a.append([1+i,ai])\n      a.sort(key=lambda x:x[1],reverse=True)\n      dp=np.zeros((n+1,n+1),np.int64) #dp[i,j]:i\u4eba\u76ee\u307e\u3067\u3092\u914d\u7f6e\u3057\u7d42\u3048\u3066\u3044\u3066\u3001\u305d\u306e\u3046\u3061j\u4eba\u3092\u53f3\u306b\u7f6e\u3044\u305f\u6642\u306e\u6700\u5927\u5024\u3002j<=i\n      dp[1,1]=a[0][1]*(n-a[0][0])\n      dp[1,0]=a[0][1]*(a[0][0]-1)\n      for i in range(2,n+1):#i\u4eba\u76ee\u306e\u5e7c\u5150\u3002a[i-1]\n            dp[i,0]=dp[i-1,0]+a[i-1][1]*abs((a[i-1][0]-1-(i-1))) #i\u4eba\u76ee\u3092\u5de6\u306b\u3059\u308b\u3002\u305d\u306e\u6642\u5de6\u306b\u6e9c\u307e\u3063\u3066\u3044\u308b\u306e\u306fi-1\u4eba\n            dp[i,i]=dp[i-1,i-1]+a[i-1][1]*abs((n-a[i-1][0]-(i-1))) #i\u4eba\u76ee\u3092\u53f3\u306b\u3059\u308b\u3002\u305d\u306e\u6642\u53f3\u306b\u6e9c\u307e\u3063\u3066\u3044\u308b\u306e\u306fi-1\u4eba\n            #i\u4eba\u76ee\u3092\u5de6\u306b\n            l=dp[i-1,1:i]+[a[i-1][1]*abs((a[i-1][0]-1-j))for j in range(i-2,-1,-1)] #j:\u5de6\u306b\u6e9c\u307e\u3063\u3066\u3044\u308b\u4eba\u6570\n            #i\u4eba\u76ee\u3092\u53f3\u306b\n            r=dp[i-1,:i-1]+[a[i-1][1]*abs((n-a[i-1][0]-j)) for j in range(i-1)] #j:\u53f3\u306b\u6e9c\u307e\u3063\u3066\u3044\u308b\u4eba\u6570\n            dp[i,1:i]=np.maximum(l,r)\n      return max(dp[n])\n\ndef __starting_point():\n      input = sys.stdin.readline\n      n=int(input())\n      a_=list(map(int,input().split()))\n      print((f(n,a_)))\n\n__starting_point()", "from collections import defaultdict\nn=int(input())\na_=list(map(int,input().split()))\nimport numpy as np\na=[]\nfor i,ai in enumerate(a_):\n      a.append([1+i,ai])\na.sort(key=lambda x:x[1],reverse=True)\ndp=np.zeros((n+1,n+1),np.int64) #dp[i,j]:i\u4eba\u76ee\u307e\u3067\u3092\u914d\u7f6e\u3057\u7d42\u3048\u3066\u3044\u3066\u3001\u305d\u306e\u3046\u3061j\u4eba\u3092\u53f3\u306b\u7f6e\u3044\u305f\u6642\u306e\u6700\u5927\u5024\u3002j<=i\ndp[1,1]=a[0][1]*(n-a[0][0])\ndp[1,0]=a[0][1]*(a[0][0]-1)\nfor i in range(2,n+1):#i\u4eba\u76ee\u306e\u5e7c\u5150\u3002a[i-1]\n      dp[i,0]=dp[i-1,0]+a[i-1][1]*abs((a[i-1][0]-1-(i-1))) #i\u4eba\u76ee\u3092\u5de6\u306b\u3059\u308b\u3002\u305d\u306e\u6642\u5de6\u306b\u6e9c\u307e\u3063\u3066\u3044\u308b\u306e\u306fi-1\u4eba\n      dp[i,i]=dp[i-1,i-1]+a[i-1][1]*abs((n-a[i-1][0]-(i-1))) #i\u4eba\u76ee\u3092\u53f3\u306b\u3059\u308b\u3002\u305d\u306e\u6642\u53f3\u306b\u6e9c\u307e\u3063\u3066\u3044\u308b\u306e\u306fi-1\u4eba\n      #i\u4eba\u76ee\u3092\u5de6\u306b\n      l=dp[i-1,1:i]+[a[i-1][1]*abs((a[i-1][0]-1-j))for j in range(i-2,-1,-1)] #j:\u5de6\u306b\u6e9c\u307e\u3063\u3066\u3044\u308b\u4eba\u6570\n      #i\u4eba\u76ee\u3092\u53f3\u306b\n      r=dp[i-1,:i-1]+[a[i-1][1]*abs((n-a[i-1][0]-j)) for j in range(i-1)] #j:\u53f3\u306b\u6e9c\u307e\u3063\u3066\u3044\u308b\u4eba\u6570\n      dp[i,1:i]=np.maximum(l,r)\nprint((max(dp[n])))\n", "n = int(input())\na = [(_a, i) for i, _a in enumerate(map(int, input().split()))]\na.sort(reverse=True)\n\ndp = [[0]*(n+1) for _ in range(n+1)]\nfor i, (v, p) in enumerate(a):\n    # \u524d\u306bj\u4eba\u3044\u308b\n    dp[i+1][0] = dp[i][0] + v*abs((n-1 - i) - p)\n    for j in range(1, i+1):\n        dp[i+1][j] = max(dp[i][j] + v*abs((n-1 - (i-j)) - p),\n                         dp[i][j-1] + v*abs((j-1) - p))\n    dp[i+1][i+1] = dp[i][i] + v*abs(i - p)\nprint((max(dp[n])))\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    dp = [[0] * (N+1-i) for i in range(N+1)]\n\n    A = list(enumerate(A))\n    A.sort(key=lambda x: x[1])\n    ans = 0\n    for z in range(1, N+1):\n        tmp = A.pop()\n        i = tmp[0]+1\n        a = tmp[1]\n        for x in range(z+1):\n            y = z - x\n            if x == 0:\n                dp[x][y] = max(dp[x][y-1]+a*abs(i-(N-y+1)), dp[x][y])\n            elif y == 0:\n                dp[x][y] = max(dp[x-1][y]+a*abs(i-x), dp[x][y])\n            else:\n                dp[x][y] = max(dp[x][y-1]+a*abs(i-(N-y+1)), dp[x][y], dp[x-1][y]+a*abs(i-x))\n            ans = max(ans, dp[x][y])\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\n\nn = int(input())\nA = list(map(int, input().split()))\n\nbabies = sorted([(activity, index) for index, activity in enumerate(A, 1)], reverse=True)\n\nDP = np.zeros(n+1, dtype=np.int64)\nposition = np.arange(1, n+1, dtype=np.int64)\n\nfor filled, (activity, index) in enumerate(babies, 1):\n    to_left = DP[:filled] + abs((position[:filled]-index)*activity)\n    to_right = DP[:filled] + abs((position[-filled:]-index)*activity)\n    DP[1:filled+1] = np.maximum(DP[1:filled+1], to_left)\n    DP[:filled] = np.maximum(DP[:filled], to_right)\n\nprint((DP.max()))\n", "# import time\n# p0 = time.time()\n\nN = int(input())\nA = list(map(int,input().split()))\n# print(A)\nA = [[A[i],i] for i in range(N)]\nA.sort(reverse=True)\n# print(\"A :\",A)\ndp = [[0]*(N+1) for _ in range(N+1)]\n# print(dp)\n\n#dp[x][y] : x\u4eba\u306f Ai*(i-pi),y\u4eba\u306f Ai*(pi-i)\n#           pi\u306f 0,1,2...   pi\u306fN-1,N-2,N-3,,\n# p1 = time.time()-p0\n\ndp[0][0] = 0\n# y = 0\nfor x in range(1,N+1):\n    dp[x][0] = dp[x-1][0]+A[x-1][0]*(A[x-1][1]-x+1)\n    # print(x,dp)\n# x = 0\nfor y in range(1,N+1):\n    dp[0][y] = dp[0][y-1]+A[y-1][0]*(N-y - A[y-1][1])\n    # print(x,dp)\n\n# p2 = time.time()-p0\nfor x in range(1,N):\n    for y in range(1,N+1-x):\n        A0 = A[x+y-1][0]\n        A1 = A[x+y-1][1]\n        dp[x][y] = max(dp[x-1][y] + A0*(A1+1 - x), dp[x][y-1] + A0*(N-y - A1))\n# print(dp)\n\n# p3 = time.time()-p0\n\nc = 0\nfor i in range(N):\n    if c < dp[i][N-i]:\n        c = dp[i][N-i]\nprint(c)\n\n# print(p1,p2,p3)\n", "def main():\n    N, *A = map(int, open(0).read().split())\n\n    A = sorted(enumerate(A), reverse=True, key=lambda x: x[1])\n\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for l in range(N):\n        for r in range(N - l):\n            p, a = A[l + r]\n\n            dp[l + 1][r] = max(\n                dp[l + 1][r],\n                a * (p - l) + dp[l][r]\n            )\n            dp[l][r + 1] = max(\n                dp[l][r + 1],\n                a * (N - 1 - r - p) + dp[l][r]\n            )\n\n    print(max(dp[l][N - l] for l in range(N)))\n\nmain()", "N = int(input())\nA = list(map(int, input().split()))\ntable = []\n\nfor i, a in enumerate(A):\n    table.append([a,i])\ntable.sort()\n\n# DP[i][j] \u5de6\u7aef\u306b i \u500b, \u53f3\u7aef\u306b j \u500b\u8caa\u6b32\u306b\u8a70\u3081\u305f\u3068\u304d\u306e\u3046\u308c\u3057\u3055\nDP = [[0 for i in range(N+1)] for j in range(N+1)]\nfor i in range(1,N+1):\n    # i \u4eba\u76ee table[i-1] \u306e\u5e7c\u5150\u3092\u79fb\u52d5\u3055\u305b\u308b\n    baby, pos = table.pop()\n    \n    DP[i][0] = DP[i-1][0] + baby * abs(pos-i+1)\n    DP[0][i] = DP[0][i-1] + baby * abs(pos-(N-i))\n    for x in range(1,i):\n        y = i - x\n\n        #\u5de6\u7aef\u306b\u7f6e\u304f\u5834\u5408\u3068\u53f3\u7aef\u306b\u7f6e\u304f\u5834\u5408\u3067max\n        DP[x][y] = max(DP[x-1][y] + baby * abs(pos-x+1),\\\n                     DP[x][y-1] + baby * abs(pos-(N-y)))\n\nans = 0\nfor i in range(N+1):\n    ans = max(ans, DP[i][N-i])\nprint(ans)\n", "\ndef resolve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A = sorted([(a, i) for i, a in enumerate(A)], reverse=True)\n\n    # dp[i][j] := A \u304c\u5927\u304d\u3044\u9806\u306b i + j \u500b\u306b\u3064\u3044\u3066\u3001i \u500b\u3092\u5de6\u8a70\u3081\u3057\u3066\u3001j \u500b\u3092\u53f3\u8a70\u3081\u3057\u305f\u3068\u304d\u306e\u30b9\u30b3\u30a2\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N):\n        j = 0\n        while i+j < N:\n            a, idx = A[i+j]\n            # \u5de6\u306b\u8a70\u3081\u308b\u5834\u5408\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + (idx - i) * a)\n            # \u53f3\u306b\u8a70\u3081\u308b\u5834\u5408\n            dp[i][j+1] = max(dp[i][j+1], dp[i][j] + ((N-1-j) - idx) * a)\n            j += 1\n    ans = 0\n    for i in range(N+1):\n        ans = max(ans, dp[i][N-i])\n    print(ans)\n\n\ndef __starting_point():\n    resolve()\n__starting_point()", "import sys\nsys.setrecursionlimit(2000 * 2)\nn = int(input())\na = list(map(int, input().split()))\na = [(i, v) for i, v in enumerate(a)]\na.sort(key=lambda x: x[1], reverse=True)\n\ndp = [[-1] * (m + 1) for m in range(n + 1)]\n# m: \u4f55\u4eba\u9078\u3093\u3060\u304b, l: \u5de6\u3092\u9078\u3093\u3060\u4eba\u6570\ndef f(m, l):\n    if m == n: return 0\n    if dp[m][l] != -1: return dp[m][l]\n    r = n - m + l - 1\n    i, v = a[m]\n    if i >= l: dp[m + 1][l + 1] = f(m + 1, l + 1)\n    if i <= r: dp[m + 1][l] = f(m + 1, l)\n    return max(dp[m + 1][l + 1] + v * (i - l), dp[m + 1][l] + v * (r - i))\nprint(f(0, 0))", "def main():\n    from random import sample\n    from operator import itemgetter\n    e=enumerate\n    n,a=open(0)\n    n=int(n)\n    d=[0]+[-2**64]*n\n    for j,(a,i)in e(sorted(sample([(a,i)for i,a in e(map(int,a.split()))],n),key=itemgetter(0),reverse=1)):\n        d=[max(t+a*(~i-j+k+n),d[k-1]+a*abs(~i+k))for k,t in e(d)]\n    print(max(d))\nmain()", "n=int(input())\na=list(map(int,input().split()))\na=list(zip(list(range(n)),a))#[index,a]\u306e\u914d\u5217\na.sort(key=lambda x:x[1])#a\u306e\u6607\u9806\u3067\u4e26\u3079\u308b\ndp=[[0 for i in range(n+1)]for j in range(n+1)] #dp[x][y]:=\u5de6\u306bx\u3001\u53f3\u306by\u4eba\u4e26\u3079\u305f\u3068\u304d\u306e\u6700\u5927\u5024\nans=0\nfor k in range(n):# k\u4eba\u76ee\u307e\u3067\u7d42\u4e86\u3001k+1\u4eba\u76ee\u306b\u5bfe\u3057\u3066\n  i,ai=a.pop()#a\u306e\u5927\u304d\u3044\u3082\u306e\u304b\u3089\u53d6\u308a\u51fa\u3059\n  dp[k+1][0]=dp[k][0]+ai*(i-k)\n  dp[0][k+1]=dp[0][k]+ai*(n-k-1-i)\n  for l in range(k):#\u53f3\u306bl+1\u4eba\u4e26\u3079\u305f\u3068\u304d\n    dp[k-l][l+1]=max(dp[k-l-1][l+1]+ai*(i-k+l+1),dp[k-l][l]+ai*(n-l-1-i))\nfor k in range(n+1):\n  ans=max(ans,dp[k][n-k])\n\nprint(ans)\n", "\ndef main():\n\n  n = int(input())\n  arr = list(map(int, input().split()))\n  arr = tuple(sorted(enumerate(arr), key=lambda tpl: -tpl[1]))\n\n  dp = [[0] * (n + 1) for _ in range(n + 1)]\n  for i, (p, a) in enumerate(arr):\n    for l in range(i + 1):\n      dp[i + 1][l] = max(dp[i + 1][l], dp[i][l] + a * abs(p - (n - (i - l) - 1)))\n      dp[i + 1][l + 1] = max(dp[i + 1][l + 1], dp[i][l] + a * abs(p - l))\n\n  print((max(dp[n])))\n\nmain()\n", "# coding: utf-8\n# Your code here!\n#import numpy as np\nN = int(input())\nA = list(map(int,input().split()))\ntable = []\n \nfor i, a in enumerate(A):\n    table.append([a,i])\ntable.sort()\ndp = [[0for i in range(N+1)]for j in range(N+1)]\nfor i in range(1,N+1):\n    baby,pos = table.pop()\n    dp[i][0]=dp[i-1][0]+baby*abs(pos-i+1)\n    dp[0][i] = dp[0][i-1] + baby * abs(pos-(N-i))\n    for x in range(1,i):\n        y = i-x\n        dp[x][y]= max(dp[x-1][y] + baby * abs(pos-x+1),dp[x][y-1] + baby * abs(pos-(N-y)))\nprint(int(max(dp[k][N-k] for k in range(N+1))))", "def main():\n    N, *A = map(int, open(0).read().split())\n\n    A = sorted(enumerate(A), reverse=True, key=lambda x: x[1])\n\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i, (p, a) in enumerate(A):\n        for j in range(i + 1):\n            dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j] + a * (p - j))\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + a * (N - (i - j) - 1 - p))\n\n    print(max(dp[N]))\n\nmain()", "def main():\n    import numpy as np\n    n=int(input())\n    a=list(enumerate(map(int,input().split())))\n    a.sort(key=lambda x: -x[1])\n    dp=[np.zeros(i+1,dtype=np.int64) for i in range(n+1)]\n    dp[0]=np.zeros(1,dtype=np.int64)\n    r=np.arange(n+1,dtype=np.int64)\n    for time,ix in enumerate(a):\n        i,x=ix\n        dp[time+1][1:]=dp[time][:time+1]+(i-r[:time+1])*x\n        dp[time+1][:-1]=np.maximum(dp[time+1][:-1],dp[time]+((n-1-(time-r[:time+1]))-i)*x)\n    print(np.max(dp[n]))\nmain()", "def main():\n    from operator import itemgetter\n    import sys\n    sys.setrecursionlimit(10**9)\n    input = sys.stdin.readline\n\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    AP = []\n    for i in range(N):\n        AP.append((A[i], i))\n    AP.sort(key=itemgetter(0), reverse=True)\n\n    # dp[i][l][r]\n    # \u5927\u304d\u3044\u65b9\u304b\u3089i\u500b\u307e\u3067\u5de6\u53f3\u3092\u6c7a\u3081\u3066\n    # \u5de6\u3092l\u56de\u3001\u53f3\u3092r\u56de\u4f7f\u3063\u305f\u3068\u304d\u306e\u6700\u5927\u5024\n    # r = i - l\n    dp = [[0]*(N+1) for _ in range(N+1)]\n    for i in range(N):\n        ai, pi = AP[i]\n        for l in range(i+1):\n            r = i - l\n            # \u5de6\n            if dp[i+1][l+1] < dp[i][l] + (pi-l)*ai:\n                dp[i+1][l+1] = dp[i][l] + (pi-l)*ai\n            # \u53f3\n            if dp[i+1][l] < dp[i][l] + ((N-r-1)-pi)*ai:\n                dp[i+1][l] = dp[i][l] + ((N-r-1)-pi)*ai\n\n    print(max(dp[N]))\n\nmain()", "#import numpy as np\n#import math\n#from decimal import *\n#from numba import njit\n\n#@njit\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A = sorted(enumerate(A), key = lambda x: x[1])[::-1]\n\n    #dp = np.zeros((N+1,N+1), dtype='int64')\n    dp = [[0]*(N+1-i) for i in range(N+1)]\n\n    m = 0\n    for i in range(1,len(A)+1):\n        index,a = A[i-1]\n        for j in range(i+1):\n            if (i-j,j) == (0,0):\n                dp[i-j][j] = 0\n            elif i-j == 0:\n                dp[i-j][j] = dp[i-j][j-1] + (N-j-index)*a\n            elif j == 0:\n                dp[i-j][j] = dp[i-j-1][j] + (abs(index-(i-j-1)))*a\n            else:\n                dp[i-j][j] = max(dp[i-j][j-1] + (N-j-index)*a, dp[i-j-1][j] + (abs(index-(i-j-1)))*a)\n            if i == len(A):\n                m = max(m, dp[i-j][j])\n\n    #print(dp)\n    #print(np.max(dp))\n    print(m)\n\nmain()\n", "n = int(input())\nxs = list(enumerate(map(int, input().split())))\nxs.sort(key=lambda x: x[1])\nxs.reverse()\n\ndp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    (j, a) = xs[i - 1]\n\n    for x in range(0, i + 1):\n        y = i - x\n        if x == 0:\n            dp[x][y] = dp[x][y - 1] + a * (n - y - j)\n        elif y == 0:\n            dp[x][y] = dp[x - 1][y] + a * (j - x + 1)\n        else:\n            dp[x][y] = max(dp[x][y - 1] + a * (n - y - j),\n                    dp[x - 1][y] + a * (j - x + 1))\n\nprint(max([dp[i][n - i] for i in range(n + 1)]))", "N = int(input())\nA = list(map(int, input().split()))\nA = sorted([(a, i) for i, a in enumerate(A)], reverse=True)\n\ndp = [0] * (N + 1)\nfor i in range(N):\n    dp2 = dp[:]\n    for l in range(i + 1):\n        a, pos = A[i]\n        # add left side\n        dp2[l + 1] = max(dp2[l + 1], dp[l] + (pos - l) * a)\n        # add right side\n        r = i - l + 1\n        dp2[l] = max(dp2[l], dp[l] + (N - r - pos) * a)\n    dp = dp2\nprint(max(dp))", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    # \u5168\u63a2\u7d22\u3059\u308b\u3068N!\u306a\u306e\u3067N=2000\u306e\u3068\u304dO(N^2000)\u3068\u306a\u308b\u306e\u3067\u7121\u7406\n    # DP\u3067\u89e3\u304f\n    # dp[i][l] = \u4fc2\u6570\u304c\u5927\u304d\u3044\u9806\u306bi\u500b\u5de6\u53f3\u306e\u7aef\u3069\u3061\u3089\u306b\u3064\u3081\u308b\u304b\u6c7a\u3081\u3066\u3001\u5de6\u3092l\u56de(\u53f3\u306fn-l\u56de)\u9078\u3093\u3060\u3068\u304d\u306e\u6307\u6a19\u6700\u5927\u5024\n\n    # \u964d\u9806\u306bA\u3092\u30bd\u30fc\u30c8+\u5143\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3082\u4fdd\u5b58\u3057\u3066\u304a\u304f\n    Awithidx = [[a,i] for i,a in enumerate(A)]\n    sortedA = sorted(Awithidx, reverse=True)\n    # DP\n    dp = [[0]*(N+1) for _ in range(N+1)]\n    for i in range(N):\n        a = sortedA[i][0]\n        idx = sortedA[i][1]\n        for l in range(i+1):\n            r = i-l\n            dp[i+1][l] = max(dp[i+1][l], dp[i][l]+a*abs((N-r-1)-idx))\n            dp[i+1][l+1] = max(dp[i+1][l+1], dp[i][l]+a*abs(l-idx))\n    print((max(dp[N])))\n\nmain()\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    AA = [(a, i) for i, a in enumerate(A)]\n    AA.sort(reverse=True)\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N):\n        a, t = AA[i]\n        for x in range(i + 2):\n            y = i + 1 - x\n            dp[x][y] = max((dp[x - 1][y] + abs(t - (x - 1)) * a) if x > 0 else 0,\n                           (dp[x][y - 1] + abs(t - (N - y)) * a) if y > 0 else 0)\n    return max(dp[i][N - i] for i in range(N + 1))\n\nprint((main()))\n", "N = int(input())\n\ndef solve(a, i, prev):\n  r = N - len(prev) - i + 1\n  p = -i*a\n  for j, s in enumerate(prev):\n    yield p+abs(j-i)*a, s+abs(j+r)*a\n    p = s\n  yield s+abs(len(prev)-i)*a,\n\npd = [0]\nA = list(map(int, input().split()))\nfor a,i in sorted(((a, i) for i, a in enumerate(A, 1)), reverse=True):\n  pd = [*list(map(max, solve(a,i, pd)))]\n\nprint((max(pd)))\n", "N = int(input())\n\ndef solve(a, i, prev):\n  r = N - len(prev) - i + 1\n  p = -i*a\n  for j, s in enumerate(prev):\n    yield max(p+abs(j-i)*a, s+abs(j+r)*a)\n    p = s\n  yield s+abs(len(prev)-i)*a\n\npd = [0]\nA = list(map(int, input().split()))\nfor a,i in sorted(((a, i) for i, a in enumerate(A, 1)), reverse=True):\n  pd = [*solve(a,i, pd)]\n\nprint((max(pd)))\n", "N = int(input())\n\ndef left(a, i, prev):\n  yield 0\n  for l, s in enumerate(prev, 1-i):\n    yield s+abs(l)*a\n    \ndef right(a, i, prev):\n  for r, s in enumerate(prev, N - len(prev) - i + 1):\n    yield s+abs(r)*a\n  yield 0\n\npd = [0]\nA = list(map(int, input().split()))\nfor a,i in sorted(((a, i) for i, a in enumerate(A, 1)), reverse=True):\n  pd = [*list(map(max, list(zip(left(a,i, pd), right(a,i, pd)))))]\n\nprint((max(pd)))\n", "import heapq\nimport time\nst = time.time()\nn = int(input())\na = list(map(int,input().split()))\nhq = []\nfor i, ai in enumerate(a):\n    heapq.heappush(hq,(-ai,i))\ndp = [[0 for i in range(j+1)] for j in range(n+1)]\ndp[0][0] = 0\nai,hi = heapq.heappop(hq)\ndp[1][0] = -ai*(n-1-hi)\ndp[1][1] = -ai*hi\nfor i in range(2,n+1):\n    ai,hi = heapq.heappop(hq)\n    dp[i][0] = dp[i-1][0] - ai*abs(n-i-hi)\n    dp[i][i] = dp[i-1][i-1] - ai*abs(hi-i+1)\n    for j in range(1,i):\n        dp[i][j] = max(dp[i-1][j-1]-ai*abs(hi-j+1),dp[i-1][j]-ai*abs(n-i+j-hi))\n\nprint((max(dp[n])))\n", "N = int(input())\nA = list(map(int,input().split()))\nABI = sorted(((a, i) for i, a in enumerate(A, 1)), reverse=True)\nprev = [0]\nfor k, (a, i) in enumerate(ABI):\n    curr = [0]*(k+2)\n    for l in range(k+1):\n        curr[l] = max(curr[l], prev[l] + a*abs(N-i-(k-l)))\n        curr[l+1] = prev[l]+a*abs(i-l-1)\n    prev = curr\nprint (max(prev))", "from operator import itemgetter\n\ndef main():\n    n = int(input())\n    a = sorted(enumerate(map(int, input().split())), key=itemgetter(1), reverse=True)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for x in range(n):\n        for y in range(n - x):\n            i, ai = a[x + y]\n            dp[x + 1][y] = max(ai * (i - x) + dp[x][y], dp[x + 1][y])\n            dp[x][y + 1] = max(ai * (n - 1 - y - i) + dp[x][y], dp[x][y + 1])\n    print(max(dp[i][n - i] for i in range(n)))\n\ndef __starting_point():\n    main()\n__starting_point()", "#!python3\n\n# input\nN = int(input())\nA = list(map(int, input().split()))\n# N = 2000\n# A = [i for i in range(1, N + 1)]\n\n\ndef main():\n    P = [(A[i], i + 1) for i in range(N)]\n    P.sort(reverse=True)\n\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for n, p in zip(list(range(1, N + 1)), P):\n        x, y = p\n        for i in range(n):\n            j = n - 1 - i\n            left = dp[i][j] + x * abs(y - (i + 1))\n            dp[i + 1][j] = max(dp[i + 1][j], left)\n            right = dp[i][j] + x * abs(y - (N - j))\n            dp[i][j + 1] = max(dp[i][j + 1], right)\n\n    ans = max([dp[i][N - i] for i in range(N)])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport socket\n\nhostnames = ['N551J', 'F551C', 'X553M']\ninput_file = 'e1.in'\nif socket.gethostname() in hostnames:\n    sys.stdin = open(input_file)\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_str():\n    return input()\n\ninf = 10 ** 9\ninf = 10 ** 3\n\ndef solve():\n    n = read_int()\n    a = read_int_list()\n    b = [(a[i], i) for i in range(n)]\n    b.sort()\n    best = [[-inf] * (n + 1) for i in range(n + 1)]\n    best[0][0] = 0\n    for s in range(1, n + 1):\n        for x in range(s + 1):\n            y = s - x\n            ai, i = b[-s]\n            if x > 0:\n                c = best[x - 1][y] + (n - x) * ai - i * ai\n                if c > best[x][y]:\n                    best[x][y] = c\n            if y > 0:\n                c = best[x][y - 1] - (y - 1) * ai + i * ai\n                if c > best[x][y]:\n                    best[x][y] = c\n\n    # for i in range(n + 1):\n    #     for j in range(n + 1):\n    #         print(best[i][j], end='\\t')\n    #     print()\n\n    res = - inf\n    for x in range(n):\n        y = n - x\n        if res < best[x][y]:\n            res = best[x][y]\n    return res\n\n\ndef main():\n    res = solve()\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport numpy as np\n\nsys.setrecursionlimit(10 ** 9)\n#def input():\n#    return sys.stdin.readline()[:-1]\n\nN = int(input())\n#X, Y = map(int,input().split())\nA = list(map(int,input().split()))\n\nB = []\nfor i in range(N):\n    B.append([A[i], i])\nB.sort(reverse=True)\n\n#dp = [[0 for _ in range(N+2)] for _ in range(N+2)]\n#for x in range(1,N+2):\n#    for y in range(1,N+2):\n##        print(act,i)\n#        dp[x][y] = max(dp[x-1][y] + B[y][0] * (B[y][1] - 0 - (x-2))\n#                    , dp[x][y-1] + B[y][0] * (N - 1 - B[y][1] - (y-2)))\n        \ndp = np.zeros(1, dtype=int)\nzero = np.zeros(1, dtype=int)\nfor act, i in B:\n    prev = dp.copy()\n    dp = np.append(dp,[0])\n    l = len(prev)\n        \n    right = np.arange((N-1-i)*act,(N-1-i)*act - (act*(l)),-act)\n    left = np.arange(i*act-(act*(l-1)),(i+1)*act,act)\n#    print(left,right,prev,dp)\n    np.maximum(np.concatenate([prev + left, zero]),\n               np.concatenate([zero, prev + right]),\n               out = dp)\n#    print(dp)\n\nprint(np.max(dp))", "n = int(input())\na = list(map(int, input().split()))\n\na = list(enumerate(a))\na.sort(key = lambda x: x[1])\n\nDP = [[0 for i in range(n+1)] for j in range(n+1)]\nDP[0][0] = 0\nfor i in range(1, n+1):\n    pos, val = a.pop()\n    pos = pos + 1\n\n    DP[0][i] = DP[0][i-1] + abs(val * (n - i + 1 - pos))\n    DP[i][0] = DP[i-1][0] + abs(val * (pos - i))\n    for x in range(1, i):\n        y = i - x\n        DP[x][y] = max(DP[x-1][y] + abs(val * (pos - x)),  \\\n            DP[x][y-1] + abs(val * (n - y + 1 - pos)))\n\nans = 0\nfor i in range(n+1):\n    ans = max(ans, DP[i][n-i])\n\nprint(ans) ", "# -*- coding: utf-8 -*-\n\nimport math\n    \ndef abs(num):\n    if num < 0:\n        return -num\n    else:\n        return num\n\ndef abc163e(n, a):\n    hap_dict = dict()\n    hap_list = []\n    for elem in range(n):\n        if a[elem] in hap_dict:\n            hap_dict[a[elem]].append(elem)\n        else:\n            tmp_list = [elem]\n            hap_dict[a[elem]] = tmp_list\n            hap_list.append(a[elem])\n    \n    hap_list.sort(reverse=True)\n\n    left = 0\n    right = n-1\n\n    num = 0\n    dp = [[0 for re in range(n+1)] for le in range(n+1)]\n    for hap in hap_list:\n        pos_list = hap_dict[hap]\n\n        while len(pos_list) != 0:\n            tgt = pos_list.pop()\n\n            num += 1\n\n            for left in range(num+1):\n                right = num-left\n                if left == num: # left end\n                    dp[left][right] = dp[left-1][right] + hap * abs(tgt-left+1)\n                elif left == 0: # right end\n                    dp[left][right] = dp[left][right-1] + hap * abs(n-right-tgt)\n                else:\n                    left_dp = dp[left-1][right] + hap * abs(tgt-left+1)\n                    right_dp = dp[left][right-1] + hap * abs(n-right-tgt)\n                    dp[left][right] = max(left_dp, right_dp)\n                #print(\"[\",str(left),\"][\",str(right),\"]=\",str(dp[left][right]))\n\n    ans_list = []\n    for i in range(num+1):\n        ans_list.append(dp[i][num-i])\n    return max(ans_list)\n\n###\n# main\nif(__name__ == '__main__'):\n    # input\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n\n    ans = abc163e(n, a)\n\n    # output\n    print(ans)\n    \n# else:\n    # do nothing\n", "def main():\n\tn, *a = list(map(int, open(0).read().split()))\n\tdp = [[0] * (n + 1) for _ in range(n + 1)]\n\tfor t, (c, k) in enumerate(sorted((c, k) for k, c in enumerate(a))[::-1]):\n\t\tfor i in range(t + 1):\n\t\t\tj = t - i\n\t\t\tif dp[i + 1][j] <= (s := dp[i][j] + c * abs(i - k)): dp[i + 1][j] = s\n\t\t\tif dp[i][j + 1] <= (s := dp[i][j] + c * abs(n - 1 - k - j)): dp[i][j + 1] = s\n\tprint((max(dp[i][~i] for i in range(n + 1))))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "def main():\n    N=int(input())\n    A=list(map(int,input().split()))\n    AA=[(v,i) for i,v in enumerate(A)]\n    AA.sort(reverse=True)\n    dp=[[0]*(N+1) for _ in range(N+1)]\n    for len in range(1,N+1):\n        val,index=AA[len-1]\n        for x in range(0,len+1):\n            y=len-x\n            if x==0:\n                dp[x][y]=dp[x][y-1]+val*abs(N-y-index)\n            elif y==0:\n                dp[x][y]=dp[x-1][y]+val*abs(index-x+1)\n            else:\n                dp[x][y]=max(dp[x][y-1]+val*abs(N-y-index),dp[x-1][y]+val*abs(index-x+1))\n    maxes=[]\n    for i in dp:\n        maxes.append(max(i))\n    return max(maxes)\nprint(main())", "N = int(input())\nA = [int(s) for s in input().split(\" \")]\nABI = sorted(((a, i) for i, a in enumerate(A, 1)), reverse=True)\nprev = [0]\nfor k, (a,i) in enumerate(ABI):\n  curr = [0]*(k+2)\n  for l in range(k+1):\n    curr[l] = max(curr[l], prev[l]+abs(N-i-k+l)*a)\n    curr[l+1] = prev[l]+abs(i-l-1)*a\n    \n  prev = curr\n\nprint(max(prev))", "\ndef resolve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A = sorted([(a, i) for i, a in enumerate(A)], reverse=True)\n\n    # dp[i][j] := i\u756a\u76ee\u306e\u5e7c\u5150\u307e\u3067\u898b\u3066\u3001\u5de6\u306b\u8a70\u3081\u308b\u9078\u629e\u3092j\u56de\u884c\u3063\u305f\u5834\u5408\u306e\u3046\u308c\u3057\u3055\u306e\u6700\u5927\u5024\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i, (a, p) in enumerate(A):\n        for j in range(i + 1):\n            # \u5de6\u306b\u8a70\u3081\u308b\u5834\u5408\n            dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j] + (p - j) * a)\n            # \u53f3\u306b\u8a70\u3081\u308b\u5834\u5408\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + ((N - (i - j) - 1) - p) * a)\n\n    print(max(dp[-1]))\n\n\ndef __starting_point():\n    resolve()\n__starting_point()"]