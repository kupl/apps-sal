["n, s = map(int, input().split())\nc = []\nfor i in range(n):\n    x, y, z = map(int, input().split())\n    c.append((x, y, z))\nminans = 10**20\nfor i in range(n):\n    nc = 0\n    total = s\n    for j in range(n):\n        if c[j][0] ** 2 + c[j][1] ** 2 <= c[i][0] ** 2 + c[i][1] ** 2:\n            total += c[j][2]\n    if total >= 10**6 and c[i][0] ** 2 + c[i][1] ** 2 < minans:\n        minans = c[i][0] ** 2 + c[i][1] ** 2\nif minans != 10**20:\n    print(minans ** 0.5)\nelse:\n    print(-1)", "import math\n\nn,s = (int(i) for i in input().strip().split())\nl = [None] * n\nfor i in range(n):\n    x,y,p = list(map(int, input().split()))\n    l[i] = (x*x+y*y, p)\nl.sort(key=lambda x:x[0])\nr = 1000000 - s\nfor i in l:\n    r -= i[1]\n    if r <= 0:\n        print(\"%.7f\" % (math.sqrt(i[0])))\n        break\nif r > 0:\n    print(-1)\n", "import math\n\n\nn, s = tuple(map(int, str.split(input())))\ncities = list([tuple(map(int, str.split(input()))) for _ in range(n)])\ncities.sort(key=lambda city: city[0] ** 2 + city[1] ** 2)\ni = 0\nextra = 0\nwhile s + extra < 10 ** 6 and i < n:\n\n    extra, i = extra + cities[i][2], i + 1\n\nif s + extra < 10 ** 6:\n\n    print(-1)\n\nelse:\n\n    x, y, _ = cities[i - 1]\n    print(math.sqrt(x ** 2 + y ** 2))\n\n", "import math \nn,s=list(map(int,input('').split()))\nL=[]\nfor i in range(n):\n    x,y,z=list(map(int,input('').split()))\n    L+=[(math.sqrt(x*x+y*y),z)]\nL.sort()\ncount=s\nif s>=1000000:\n    print('0')\n    return\nfor i in L:\n    count+=i[1]\n    if count>=1000000:\n        print(i[0])\n        return\n    \nprint('-1')\n\n\n\n\n\n            \n            \n        \n        \n    \n\n\n                \n\n", "import sys\n\n\nn, s = list(map(int, input().split()))\nsqr_r = 0\narounds = []\ntotal = s\n\nfor _ in range(n):\n    x, y, k = list(map(int, input().split()))\n    arounds.append([x ** 2 + y ** 2, k])\n    total += k\n\nif total < 10 ** 6:\n    print(-1)\n    return\n\narounds.sort()\n\nfor i in range(n):\n    if s >= 10 ** 6:\n        break\n    s += arounds[i][-1]\n    sqr_r = arounds[i][0]\n\nprint(sqr_r ** 0.5)\n", "from math import*\nn, s = list(map(int, input().split()))\nk = [0] * 1001\nx = [0] * 1001\ny = [0] * 1001\nr0 = 0\nr = 0\ncount = 0\nMinr = 1000000\notv = -1\nfor i in range(n):\n    x[i], y[i], k[i] = list(map(int, input().split()))\nfor i in range(n):\n    count = s\n    r0 = sqrt((x[i]) ** 2 + y[i] ** 2)\n    for j in range(n):\n        r = sqrt((x[j]) ** 2 + y[j] ** 2)\n        if r <= r0:\n            count += k[j]\n        if count >= 1000000 and r0 < Minr:\n            Minr = r0\n            otv = r0\n            break\nprint(otv)\n\n            \n        \n", "__author__ = 'Lipen'\n\ndef main():\n    n, s = map(int, input().split())\n    data = []\n    for _ in range(n):\n        x, y, k = map(int, input().split())\n        r = pow(x, 2) + pow(y, 2)\n        data.append([x, y, k, r])\n\n    rmin = -1\n    for i in range(n):\n        count = 0\n        r = data[i][3]\n\n        for j in range(n):\n            if data[j][3] <= r:\n                count += data[j][2]\n\n        if count + s >= 1000000 and (r<rmin or rmin==-1):\n            rmin = r\n\n    if rmin == -1:\n        print(-1)\n    else:\n        print(pow(rmin, .5))\n\nmain()", "n,s=list(map(int,input().split()))\nL=[]\nfor i in range(n):\n    x,y,k=list(map(int,input().split()))\n    L.append((x**2+y**2,k))\nL.sort()\ninc=0\nind=0\nr=0\nwhile(ind<n and s+inc<1000000):\n    r=L[ind][0]\n    inc+=L[ind][1]\n    ind+=1\n\nif(s+inc>=1000000):\n    print(pow(r,1/2))\nelse:\n    print(-1)\n", "from math import*\nn, s = map(int, input().split())\ndist = []\nfor i in range(n):\n    a, b, c = map(int, input().split())\n    dist.append((a*a + b*b, c))\ndist = sorted(dist)\ni = 0\nwhile s < 1000000 and i < n:\n    s += dist[i][1]\n    i += 1\nif s < 1000000:\n    print(-1)\nelif i == 0:\n    print(0)\nelse:\n    print(sqrt(dist[i - 1][0]))", "n, k = map(int, input().split())\nif k >= 1000000:\n    print('0')\n    return\ndef f():\n    x, y, d = map(int, input().split())\n    return (x * x + y * y, d)\nt = [f() for i in range(n)]\nt.sort()\nfor r, d in t:\n    k += d\n    if k >= 1000000:\n        print(r ** 0.5)\n        break\nelse: print('-1')", "n, s = map(int, input().split())\nvals = [tuple(map(int, input().split())) for i in range(n)]\nvals.sort(key = lambda e: e[0]*e[0] + e[1]*e[1])\nb = True\nfor v in vals:\n    s += v[2]\n    if s >= 1000000:\n        print((v[0]*v[0] + v[1]*v[1])**0.5)\n        b = False\n        break\nif b:\n    print(-1)", "import math\nimport sys\n\nn,p = list(map(int,input().split()))\ncities=[]\nfor i in range(n):\n    x,y,pi = list(map(int,input().split()))\n    cities.append(((x,y),pi))\n \nsorted_cities = sorted(cities,key=lambda data: math.sqrt(data[0][0]**2+data[0][1]**2))\nfor i in range(n):\n    if p < 1000000:\n        p+=sorted_cities[i][1]\n        if p>= 1000000:\n            print(math.sqrt(sorted_cities[i][0][0]**2+sorted_cities[i][0][1]**2))\n            return\nprint(-1)\n\n\n", "from math import sqrt\n\nclass City:\n    def __init__(self, x, y, pop):\n        self.distance = sqrt(x*x + y*y)\n        self.population = pop\n\nn, need = list(map(int, input().split()))\nneed = 1000000 - need\ncities =[]\ntotal = 0\nfor i in range(n):\n    x, y, pop = list(map(int,input().split()))\n    cities.append(City(x,y,pop))\n    total += pop\n\nif total < need:\n    print(-1)\nelse:\n    cities.sort(key=lambda city: city.distance)\n    dis = 0\n    i = 0\n    while need > 0:\n        need -= cities[i].population\n        dis = cities[i].distance\n        i += 1\n\n    print(dis)\n\n\n\n\n", "import math\nn, s = tuple(map(int,input().split()))\nx=[];y=[];k=[];r=[]\nfor i in range(n):\n    a,b,c = tuple(map(int,input().split()))\n    x.append(a)\n    y.append(b)\n    k.append(c)\n    r.append((math.sqrt(x[i]**2+y[i]**2),i))\nr.sort()\nnas = s; i = 0\nwhile i < n and nas < 1000000:\n    nas += k[r[i][1]]\n    i += 1\nif i == n and nas < 1000000: print('-1')\nelse: print(r[i-1][0])", "import math\nR = lambda: list(map(int, input().split()))\nn, sum = R()\nx = []; y = []; z = []; dis = []\nfor i in range(n):\n    a, b, c = R()\n    x.append(a)\n    y.append(b)\n    z.append(c)\n    dis.append((math.sqrt(a**2 + b ** 2), i))\ndis.sort()\ni = 0\nwhile sum < 1000000 and i < n:\n    sum += z[dis[i][1]]\n    i += 1\nif sum < 1000000: print('-1')\nelse: print(dis[i-1][0])\n", "def func(x):\n    nonlocal a\n    y=0\n    for i in range(x):\n        y+=a[i][1]\n    return y\nn,s=map(int,input().split())\na=[]\nfor i in range(n):\n    x,y,k=map(int,input().split())\n    a.append([x*x+y*y,k])\nif func(n)+s<10**6:\n    print(-1)\n    return\na.sort()\nl=-1\nr=n\nwhile l+1<r:\n    m=(l+r)//2\n    if s+func(m+1)>=10**6:\n        r=m\n    else:\n        l=m\nprint(a[r][0]**0.5)", "from math import *\nR = lambda:map(int, input().split())\nn, s = R()\nx = sorted((x * x + y * y, k) for x, y, k in (R() for i in range(n)))\nfor i in range(n):\n  s += x[i][1]\n  if s >= 1000000:\n    print(sqrt(x[i][0]))\n    return\nprint(-1)", "from math import *\nR = lambda:map(int, input().split())\nn, s = R()\nx = sorted((hypot(x, y), k) for x, y, k in (R() for i in range(n)))\nfor t in x:\n  s += t[1]\n  if s >= 1000000:\n    print(t[0])\n    return\nprint(-1)", "import math\nn,m=map(int, input().split())\nL=[]\nfor i in range(n):\n    x,y,z=map(int, input().split())\n    L+=[(math.sqrt(x*x+y*y),z)]\nL.sort()\ncount=m\nif count>=1000000:\n    print('0')\n    return\nfor i in L:\n    count+=i[1]\n    if count>=1000000:\n        print(i[0])\n        return\nprint('-1')", "import math\nn,s=map(int, input().split())\nlocations=[]\nfor i in range(n):\n    x,y,k=map(int, input().split())\n    locations+=[(x*x+y*y, k)]\nlocations.sort()\nif s>=1000000:\n    print('0')\n    return\nfor i in range(n):\n    s+=locations[i][1]\n    if s>=1000000:\n        print(math.sqrt(locations[i][0]))\n        return\nprint('-1')", "import math\nn,s=map(int, input().split())\nlocations=[]\nfor i in range(n):\n    x,y,k=map(int, input().split())\n    locations+=[(x*x+y*y, k)]\nlocations.sort()\nif s>=1000000:\n    print(0)\n    return\nfor i in range(n):\n    s+=locations[i][1]\n    if s>=1000000:\n        print(math.sqrt(locations[i][0]))\n        return\nprint(-1)", "import math\nn,s=map(int, input().split())\nlocations=[]\nfor i in range(n):\n    x,y,k=map(int, input().split())\n    locations+=[(x*x+y*y, k)]\nlocations.sort()\nfor i in range(n):\n    s+=locations[i][1]\n    if s>=1000000:\n        print(math.sqrt(locations[i][0]))\n        return\nprint(-1)", "import math\nn,m=map(int, input().split())\nL=[]\nfor i in range(n):\n     x,y,z=map(int, input().split())\n     L.append( (math.sqrt(x*x+y*y),z) )\nL.sort()\ncount=m\nif count>=1000000:\n     print('0')\n     return\nfor i in L:\n     count+=i[1]\n     if count>=1000000:\n          print(i[0])\n          return\nprint('-1')", "import math\n\nn, s = [int(c) for c in input().split()]\n\nar = []\n\nfor i in range(n):\n    x, y, count = [int(c) for c in input().split()]\n    ar.append([math.sqrt(x**2 + y**2), count])\n\nar.sort(key=lambda _: _[0])\n\ni = 0\n\nwhile i < n and s < 10 ** 6:\n    s += ar[i][1]\n    i += 1\n\nif s < 10 ** 6:\n    print(-1)\nelse:\n    print(round(ar[i - 1][0],7))\n\n"]