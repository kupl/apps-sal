["g = set(input())\ns = input()\nn = int(input())\na = s.find(\"*\")\nfor _ in range(n):\n    temp = input()\n    if a == -1:\n        if len(temp) != len(s):\n            print(\"NO\")\n        else:\n            for i in range(len(s)):\n                if s[i] == '?':\n                    if temp[i] not in g:\n                        print(\"NO\")\n                        break\n                elif s[i] != temp[i]:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n    else:\n        if len(temp) < len(s)-1:\n            print(\"NO\")\n        else:\n            for i in range(a):\n                if s[i] == '?':\n                    if temp[i] not in g:\n                        print(\"NO\")\n                        break\n                elif s[i] != temp[i]:\n                    print(\"NO\")\n                    break\n            else:\n                for i in range(-(len(s) - a-1), 0):\n                    if s[i] == '?':\n                        if temp[i] not in g:\n                            print(\"NO\")\n                            break\n                    elif s[i] != temp[i]:\n                        print(\"NO\")\n                        break\n                else:\n                    for i in range(a, len(temp)-(len(s) - a-1)):\n                        if temp[i] in g:\n                            print(\"NO\")\n                            break\n                    else:\n                        print(\"YES\")", "good = set(input().strip())\npattern = input().strip()\nn = int(input())\n\nminlen = len(pattern)\n\nis_star = '*' in pattern\n\nif is_star:\n    minlen -= 1\n    maxlen = 1000000000\n    leftlen = pattern.find('*')\n    rightlen = len(pattern) - leftlen - 1\nelse:\n    maxlen = minlen\n\ndef check_simple_pattern(task, pattern):\n    #print(task +\" -> \" + pattern)\n    for i in range(len(task)):\n        if pattern[i] != task[i] and not (pattern[i] == '?' and task[i] in good):\n            return False\n    return True\n\ndef check(task):\n    if len(task) < minlen or len(task) > maxlen:\n        return False\n    if is_star:\n        if rightlen == 0:\n            cond = all([i not in good for i in task[leftlen:]])\n        else:\n            cond = all([i not in good for i in task[leftlen:-rightlen]])\n        return check_simple_pattern(task[:leftlen], pattern[:leftlen]) \\\n                and (rightlen == 0 or check_simple_pattern(task[-rightlen:], pattern[-rightlen:])) \\\n                and cond\n    else:\n        return check_simple_pattern(task, pattern)\n\nfor i in range(n):\n    task = input().strip()\n    if check(task):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def m(good, pat, s):\n  if len(pat) != len(s):\n    return False\n  else:\n    for u, v in zip(pat, s):\n      if u == \"?\": \n        if v not in good:\n          return False\n      elif u != v:\n        return False\n    return True      \n    \ndef mm(good, p, l0, l1, s):\n  if l0 + l1 > len(s):\n    return False\n  if l0 and not m(good, p[0], s[:l0]):\n    return False\n  if l1 and not m(good, p[1], s[-l1:]):\n    return False\n  if l1:\n    ss = s[l0:-l1]    \n  else:\n    ss = s[l0:]    \n  return not good.intersection(ss)\n\ngood = set(input().strip())\npat = input().strip()    \np = pat.split(\"*\")\nf = len(p) > 1\nif f:\n  l0 = len(p[0])\n  l1 = len(p[1])    \n\nn = int(input())\nfor _ in range(n):\n  s = input().strip()\n  r = mm(good, p, l0, l1, s) if f else m(good, pat, s)\n  print(\"YES\" if r else \"NO\")\n\n     \n", "def compare(a,b):\n\tnonlocal good,replacements\n\tif(a==b):\n\t\treturn 1\n\telif(b=='?' and (a in good)):\n\t\treturn 1\n\telif(b=='*' and (a not in good)):\n\t\tif(replacements<0):\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn replacements+10\n\telif(b=='*' and (a in good)):\n\t\treturn 2\n\telse:\n\t\treturn 0\n\ng = input()\ngood={}\nfor val in g:\n\tgood[val]=1\npatt = input()\nn=int(input())\nfor i in range(n):\n\tq=input()\n\treplacements = len(q)-len(patt)+1\n\tit=0\n\tc=0\n\twhile(c<len(q) and it<len(patt)):\n\t\tresult=compare(q[c],patt[it])\n\t\tif(result==2):\n\t\t\tit+=1\n\t\telif(result==1):\n\t\t\tit+=1\n\t\t\tc+=1\n\t\telif(result>9):\n\t\t\tif(replacements==0):\n\t\t\t\tit+=1\n\t\t\telse:\n\t\t\t\tc+=1\n\t\t\t\treplacements-=1\n\t\telse:\n\t\t\tbreak\n\tif(it<len(patt)):\n\t\tif(patt[it]=='*'):\n\t\t\tit+=1\n\tif(c==len(q) and it==len(patt)):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n", "# IAWT\ngoods = input()\n\nptrn = input()\nn = int(input())\nqs = [input() for i in range(n)]\n\ndata = [False for i in range(26)]\n\nfor i in range(len(goods)):\n    data[ord(goods[i])-97] = True\n\nstar_in = '*' in ptrn\nif star_in:\n    sind = ptrn.index('*')\n\ntheL = len(ptrn)\n\ndef f(q):\n    if not star_in:\n        if len(q) != theL:\n            return False\n        for i in range(theL):\n            if ptrn[i] != '?': # So should be exactly equal\n                if ptrn[i] != q[i]:\n                    return False\n            elif not data[ord(q[i])-97]:\n                return False\n        return True\n    if len(q) < theL-1:\n        return False\n    for i in range(sind):\n        if ptrn[i] == '?':\n            if(not data[ord(q[i])-97]):\n                return False\n        elif ptrn[i] != q[i]:\n            return False\n    j = len(q) - 1\n    for i in range(theL-1, sind, -1):\n        if ptrn[i] == '?':\n            if (not data[ord(q[j])-97]):\n                return False\n        elif ptrn[i] != q[j]:\n            return False\n        j -= 1\n    for i in range(sind, j+1):\n        if data[ord(q[i])-97]:\n            return False\n    return True\n\nfor i in range(n):\n    if f(qs[i]):\n        print('YES')\n    else:\n        print('NO')\n", "import string\n\ndef single_check(p, a):\n    if not p:\n        return 1\n    if len(a) != len(p):\n        return 0\n    else:\n        for i in range(len(a)):\n            if (p[i] != a[i] and p[i] != '?') or (p[i] == '?' and a[i] not in good):\n                break\n        else:\n            return 1\n        return 0\n\n\ngood = input()\nbad = set(string.ascii_lowercase) - set(good)\npattern = input()\nn = int(input())\npatspl = pattern.split('*')\nfor _ in range(n):\n    a = input()\n    if len(patspl) == 1:\n        print('YES' if single_check(pattern, a) else 'NO')\n    else:\n        if len(a) < len(pattern) - 1:\n            print('NO')\n        else:\n            if single_check(patspl[0], a[:len(patspl[0])]) and single_check(patspl[1], a[-len(patspl[1]):]):\n                for c in a[len(patspl[0]):(-len(patspl[1]) or len(a))]:\n                    if c not in bad:\n                        print('NO')\n                        break\n                else:\n                    print('YES')\n            else:\n                print('NO')\n\n\n", "good = input()\nmask = input()\nflag = 0\nif '*' in mask:\n    flag = 1\n\n\ndef check(a, b):\n    if a == b:\n        return 1;\n    if a == '?':\n        for i in range(len(good)):\n            if good[i] == b:\n                return 1\n    return 0\n\n\nn = int(input())\nfor i in range(n):\n    s = input()\n    accept = 1\n    if not flag:\n        if len(s) != len(mask):\n            print('NO')\n            continue\n        for j in range(len(s)):\n            if not check(mask[j], s[j]):\n                accept = 0\n        if not accept:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if len(mask) - 1 > len(s):\n            print(\"NO\")\n            continue\n        for j in range(len(mask)):\n            if mask[j] != '*':\n                if not check(mask[j], s[j]):\n                    accept = 0\n                    break\n            else:\n                l = j\n                break\n        for j in range(len(s)):\n            ind = len(mask) - 1 - j\n            cur = len(s) - 1 - j\n            if mask[ind] != '*':\n                if not check(mask[ind], s[cur]):\n                    accept = 0\n                    break\n            else:\n                r = cur\n                break\n        if not accept:\n            print('NO')\n            continue\n        if (len(s) + 1 == len(mask)):\n            print('YES')\n            continue\n        for j in range(l, r + 1):\n            for k in range(len(good)):\n                if (good[k] == s[j]):\n                    accept = 0\n        if not accept:\n            print('NO')\n        else:\n            print('YES')", "#!/usr/local/bin/python3\n\nimport sys\n\ngood_letters = set(input())\npattern = input()\n\ninput()\n\nfor line in sys.stdin:\n    query = line.strip()\n\n    diff = len(query) - len(pattern) + 1\n\n    if diff < 0:\n        print(\"NO\")\n        continue\n\n    query_index = 0\n    pattern_index = 0\n    question = None\n\n    result = \"NO\"\n\n    while (pattern_index < len(pattern)) and (query_index < len(query)):\n\n        current_letter = query[query_index]\n        current_pattern = pattern[pattern_index]\n\n        if current_pattern == '*':\n            if diff == 0:\n                pattern_index += 1\n            else:\n                if current_letter in good_letters:\n                    break\n                else:\n                    query_index += 1\n                    diff -= 1\n        elif current_pattern == '?':\n            if current_letter in good_letters:\n                    query_index += 1\n                    pattern_index += 1\n            else:\n                break\n        else:\n            if current_letter != current_pattern:\n                break\n            else:\n                query_index += 1\n                pattern_index += 1\n    \n    if (query_index == len(query)) and (pattern_index == len(pattern) - 1) and (pattern[pattern_index] == '*'):\n        result = \"YES\"\n\n    if (query_index == len(query)) and (pattern_index == len(pattern)):\n        result = \"YES\"\n\n    print(result)\n", "good = input()\npat = input()\nn = int(input())\nfor i in range(n):\n    s = input()\n    q = True\n    sc = 0\n    x = 0\n    while x < len(pat) and sc < len(s):\n        if pat[x] == '*':\n            dif = len(s)-len(pat)+1\n            cont = False\n            sc -= 1\n            for j in range(dif):\n                sc += 1\n                if s[sc] in good:\n                    cont = True\n                    break\n            if cont:\n                q = False\n                print(\"NO\")\n                break\n        elif s[sc] != pat[x]:\n            if pat[x] != '?' or s[sc] not in good:\n                q = False\n                print(\"NO\")\n                break\n        x += 1\n        sc += 1\n    if x < len(pat):\n        if pat[x] == '*':\n            x += 1\n    if q:\n        if x < len(pat) or sc < len(s):\n            q = False\n            print(\"NO\")\n    if q:\n        print(\"YES\")\n", "s = input()\ngood = {}\nfor i in 'abcdefghijklmnopqrstuvwxyz':\n    good[i] = 0\nfor i in s:\n    good[i] = 1\ns = input()\ntmp = s\nn = int(input())\nfor i in range(n):\n    q = input()\n    while (s[0] == q[0] or (s[0] == '?' and good[q[0]] == 1)):\n        s = s[1:]\n        q = q[1:]\n        if (s == '' or q == '') : break\n    if (s != '' and q != '') :\n        while (s[-1] == q[-1] or (s[-1] == '?' and good[q[-1]] == 1)):\n            s = s[:-1]\n            q = q[:-1]\n            if (s == '' or q == '') : break\n    ans = 1\n    if (s == '*'):\n        for j in q:\n            if (good[j] == 1): ans = 0\n    elif (s == q) : ans = 1\n    else : ans = 0\n    if (ans == 1): print(\"YES\")\n    else: print(\"NO\")\n    s = tmp\n", "good = input()\ns = input()\npos = -1\nfor j in range(len(s)):\n\tif s[j] == '*':\n\t\tpos = j\n\t\tbreak\t\nn = int(input())\nhasStar = ('*' in s)\nfor i in range(n):\n\tt = input()\n\tif len(t) < len(s)- 1:\n\t\tprint('NO')\n\t\tcontinue\n\tif hasStar:\n\t\tflag = True\n\t\tif len(t) <= (pos + 1) - 2:\n\t\t\tprint('NO')\n\t\t\tcontinue\n\t\tif len(t) == (pos + 1) - 1:\n\t\t\tif len(s) >= (pos + 1) + 1:\n\t\t\t\tprint('NO')\n\t\t\t\tcontinue\n\t\t\t\n\t\tfor j in range(pos):\n\t\t\tif (t[j] not in good and s[j] == '?') or (s[j] != '?' and s[j] != t[j]):\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif not flag:\n\t\t\tprint('NO')\n\t\t\tcontinue\n\t\tl = pos\n\t\tr0 = len(t) - (len(s) - pos - 1)\n\t\tr = r0\n\t\tfor j in range(pos + 1, len(s)):\n\t\t\tif (t[r] not in good and s[j] == '?') or (s[j] != '?' and s[j] != t[r]):\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\t\tr += 1\n\t\tif not flag:\n\t\t\tprint('NO')\n\t\t\tcontinue\n\t\tfor j in range(l, r0):\n\t\t\tif t[j] in good:\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif not flag:\n\t\t\tprint('NO')\n\t\t\tcontinue\n\t\tprint('YES')\n\telse:\n\t\tif len(s) != len(t):\n\t\t\tprint('NO')\n\t\t\tcontinue\n\t\tflag = True\n\t\tfor j in range(len(t)):\n\t\t\tif (t[j] not in good and s[j] == '?') or (s[j] != '?' and s[j] != t[j]):\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif not flag:\n\t\t\tprint('NO')\n\t\t\tcontinue\n\t\tprint('YES')\n", "l=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\ns1=input().strip()\ns1=list(s1)\ns2=[]\nfor i in l:\n    if i not in s1:\n        s2.append(i)\npattern=input().strip()\npattern=list(pattern)\nif (\"*\" not in pattern):\n    length_main=len(pattern)\n    n=int(input().strip())\n    for i in range(n):\n        f=0\n        string=input().strip()\n        length=len(string)\n        if (length_main==length):\n            for j in range(length_main):\n                if (string[j]!=pattern[j]):\n                    if (pattern[j]!=\"?\"):\n                        print ('NO')\n                        f=1\n                        break\n                    else:\n                        if (string[j] not in s1):\n                            print ('NO')\n                            f=1\n                            break\n            if (f==0):\n                print (\"YES\")\n        else:\n            print ('NO')\nelse:\n    ind=pattern.index(\"*\")\n    length_main=len(pattern)\n    n=int(input().strip())\n    for i in range(n):\n        string=input().strip()\n        length=len(string)\n        if (length<length_main-1):\n            print ('NO')\n        else:\n            f=0\n            for j in range(ind):\n                if (string[j]!=pattern[j]):\n                    if (pattern[j]!=\"?\"):\n                        print ('NO')\n                        f=1\n                        break\n                    else:\n                        if (string[j] not in s1):\n                            print ('NO')\n                            f=1\n                            break\n            if (f!=1):\n                q=length_main-length\n                for j in range(length_main-1,ind,-1):\n                    if (string[j-q]!=pattern[j]):\n                        if (pattern[j]!=\"?\"):\n                            print ('NO')\n                            f=1\n                            break\n                        else:\n                            if (string[j-q] not in s1):\n                                print ('NO')\n                                f=1\n                                break\n                if (f!=1):\n                    save= ind+1-q\n                    string=list(string)\n                    x=string[ind:save]\n                    for j in x:\n                        if (j not in s2):\n                            print ('NO')\n                            f=1\n                            break\n                    if (f==0):\n                        print ('YES')", "s = input()\ngood = {}\nfor i in 'abcdefghijklmnopqrstuvwxyz':\n    good[i] = 0\nfor i in s:\n    good[i] = 1\ns = input()\ntmp = s\nn = int(input())\nfor i in range(n):\n    q = input()\n    while (s[0] == q[0] or (s[0] == '?' and good[q[0]] == 1)):\n        s = s[1:]\n        q = q[1:]\n        if (s == '' or q == '') : break\n    if (s != '' and q != '') :\n        while (s[-1] == q[-1] or (s[-1] == '?' and good[q[-1]] == 1)):\n            s = s[:-1]\n            q = q[:-1]\n            if (s == '' or q == '') : break\n    ans = 1\n    if (s == '*'):\n        for j in q:\n            if (good[j] == 1): ans = 0\n    elif (s == q) : ans = 1\n    else : ans = 0\n    if (ans == 1): print(\"YES\")\n    else: print(\"NO\")\n    s = tmp\n", "l = input()\ns = input()\nn = int(input())\na = []\nfor _ in range(n):\n    c = input()\n    nl = s\n    if '*' in nl:\n        if len(nl) <= len(c):\n            nl = nl.replace('*', '*'*(abs(len(nl)-len(c))+1))\n        elif len(nl)==len(c)+1:\n            nl = nl.replace('*', '')\n    if len(c)!=len(nl):\n        a.append(\"NO\")\n    else:\n        for i in range(len(c)):\n            if nl[i] == '*':\n                if c[i] in l:\n                    a.append(\"NO\")\n                    break\n            elif nl[i] == '?':\n                if c[i] not in l:\n                    a.append(\"NO\")\n                    break\n            else:\n                if nl[i] != c[i]:\n                    a.append(\"NO\")\n                    break\n        else:\n            a.append(\"YES\")\nfor i in a:\n    print(i)\n", "def check(s, start, end, mp):\n    if len(s) < len(start) + len(end):\n        return 0\n    for i in range(len(start)):\n        if start[i] == '?':\n            if mp.get(s[i], 0) != 1:\n                return 0\n        if start[i] != '?' and start[i] != s[i]:\n            return 0\n    for i in range(1, len(end) + 1):\n        if end[-i] == '?':\n            if mp.get(s[-i], 0) != 1:\n                return 0\n        if end[-i] != '?' and end[-i] != s[-i]:\n            return 0\n    for i in range(len(start), len(s) - len(end)):\n        if mp.get(s[i], 0) == 1:\n            return 0\n    return 1\n\n\ngood = input()\ntemplate = input()\nres = template.find('*')\nif res != -1:\n    x = template.split('*')\n    start, end = x[0], x[1]\nelse:\n    start = template\n    end = ''\nn = int(input())\nx = {}\nfor i in good:\n    x[i] = 1\n\nfor i in range(n):\n    s = input()\n    if res == -1 and len(s) > len(start) + len(end):\n        print('NO')\n    elif check(s, start, end, x):\n        print('YES')\n    else:\n        print('NO')\n", "string = input()\ngood = list(string)\ns = input()\na = len(s)\ncondition = \"*\" in s\nn = int(input())\nresults = []\nfor x in range(n):\n    temp = s\n    t = input()\n    b = len(t)\n    condition1 = a == b + 1 and not condition\n    if a > b + 1 or condition1:\n        result = \"NO\"\n    elif b > a and not condition:\n        result = \"NO\"\n    else:\n        result = \"YES\"\n        if condition:\n            p = s.index(\"*\")\n            q = a - p\n            if q == 1:\n                r = t[p:]\n            else:\n                r = t[p:-q + 1]\n            for x in r:\n                if x in good:\n                    result = \"NO\"\n                    break\n            temp = s[:p] + r + s[p + 1:]\n        if result == \"YES\":\n            for x in range(b):\n                if temp[x] == \"?\":\n                    if not t[x] in good:\n                        result = \"NO\"\n                        break\n                elif temp[x] != t[x]:\n                    result = \"NO\"\n                    break\n    results.append(result)\nfor x in results:\n    print(x)", "import sys\n\n\n\ndef main():\n    g = list(sys.stdin.readline().rstrip())\n    s = list(sys.stdin.readline().rstrip())\n    n = int(sys.stdin.readline())\n    star = -1\n    for i in range(len(s)):\n        if s[i]=='*':\n            star = i\n\n\n    for i in range(n):\n        t=sys.stdin.readline().rstrip()\n        ok = True\n        if (star == -1 and len(s) > len(t)) or (star!=-1 and len(s)-1>len(t)):\n            print(\"NO\")\n            continue\n        for j in range(star):\n            if s[j] =='?':\n                if t[j] not in g:\n                    ok = False\n                    break\n            elif t[j]!=s[j]:\n                ok = False\n                break\n        if not ok:\n            print(\"NO\")\n            continue\n        if len(t)< len(s)-star-1:\n            print(\"NO\")\n            continue\n        for j in range(len(s)-star-1):\n            k = len(t)-j-1\n            m = len(s)-j-1\n            if s[m] =='?':\n                if t[k] not in g:\n                    ok = False\n                    break\n            elif t[k]!=s[m]:\n                ok = False\n                break\n        if not ok:\n            print(\"NO\")\n            continue\n        if star == -1 and len(s)==len(t):\n            print(\"YES\")\n            continue\n        if star == -1:\n            print(\"NO\")\n            continue\n        for j in range(star, len(t)-(len(s)-star-1)):\n            if t[j] in g:\n                ok = False\n                break\n        if not ok:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n\n    \n\n    \nmain()\n", "good = set(list(input()))\ns = input()\nst = '*' in list(s)\n\ndef f(x):\n\td = len(x) - len(s) + 1\n\tif d < 0 or (len(x) != len(s) and not st):\n\t\treturn False\n\tind = -1\n\tfor i in range(len(x)):\n\t\tif s[i] == '*':\n\t\t\tind = i\n\t\t\tbreak\n\t\telif s[i] == '?' and x[i] not in good:\n\t\t\treturn False\n\t\telif 'a' <= s[i] <= 'z' and s[i] != x[i]:\n\t\t\treturn False\n\n\tif ind == -1:\n\t\treturn True\n\n\tfor i in range(ind, ind + d):\n\t\tif x[i] in good:\n\t\t\treturn False\n\n\tfor i in range(ind + d, len(x)):\n\t\tif s[i - d + 1] == '?' and x[i] not in good:\n\t\t\treturn False\n\t\telif 'a' <= s[i - d + 1] <= 'z' and s[i - d + 1] != x[i]:\n\t\t\treturn False\n\n\treturn True\n\nn = int(input())\nfor i in range(n):\n\tc = input()\n\tif f(c):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "a=input()\ns=input()\nk=int(input())\n\ndef qw(c):\n\tt=True\n\tw=-1\n\tif len(s)>len(c)+1: t=False\n\ttry:\n\t\tfor j in range(len(s)):\n\t\t\tw+=1\n\t\t\tif s[j]=='?':\n\t\t\t\tif c[w] not in a: t=False\n\t\t\telif s[j]=='*':\n\t\t\t\tb=len(c)-len(s)+1\n\t\t\t\tfor e in c[j:j+b]:\n\t\t\t\t\tif e in a:\n\t\t\t\t\t\tt=False\n\t\t\t\tw+=b-1\n\t\t\telse:\n\t\t\t\tif s[j]!=c[w]: t=False\n\t\t\tif t==False: break\n\texcept IndexError:\n\t\treturn False\n\treturn t if len(c)==w+1 else False\n\nfor i in range(k):\n\tc=input()\n\tprint('YES') if qw(c) else print('NO')", "import re\nabc = set(list('abcdefghijklmnopqrstuvwxyz'))\n\ngood = set(input())\nsp = {'?', '*'}\n\nbad = abc - good\nans = []\n\npat = input()\npl = len(pat)\nfor _ in range(int(input())):\n    hasstar = False\n    answered = False\n    q = input()\n    d = len(q) - pl\n    if d < -1 or (d == -1 and \"*\" not in pat):\n        ans.append(\"NO\")\n        continue\n    else:\n        i = 0\n        j = 0\n        while i < pl:\n            if (pat[i] == '?' and q[j] in bad) or (pat[i] not in sp and q[j] != pat[i]):\n                ans.append(\"NO\")\n                answered = True\n                break\n            elif pat[i] == '*':\n                hasstar = True\n                if any(q[k] in good for k in range(j, j+d+1)):\n                    ans.append(\"NO\")\n                    answered = True\n                    break\n                j += d\n            i += 1\n            j += 1\n        if not answered:\n            if not hasstar:\n                if pl == len(q):\n                    ans.append('YES')\n                    answered = True\n                else:\n                    ans.append('NO')\n                    answered = True\n            else:\n                ans.append(\"YES\")\n                answered = True\nprint('\\n'.join(ans))\n", "alp = set(input())\npt = input()\nlp= pt.split('*')[0]\nrp = ''\nif len(pt.split('*')) > 1:\n    rp = pt.split('*')[1]\nn = int(input())\n\ndef check(p, qp):\n    for i in range(len(p)):\n        if p[i] == qp[i] or (p[i] == '?' and qp[i] in alp):\n            continue\n        else:\n            return False\n    return True\n\ndef checks(qp):\n    for i in range(len(qp)):\n        if qp[i] not in alp:\n            continue\n        else: \n            return False\n    return True\n\nfor i in range(n):\n    q = input()\n    if len(lp) + len(rp) > len(q) or ('*' not in pt and len(lp) < len(q)):\n        print('NO')\n        continue\n    qlp = q[:len(lp)]\n    qrp = q[(len(q) - len(rp)):]\n    star = q[len(lp):(len(q) - len(rp))]\n    if check(lp, qlp) and check(rp, qrp) and checks(star):\n        print('YES')\n    else:\n        print('NO')", "good = list(input())\ns = list(input())\nstin = '*' in s\nif stin:\n    stind = s.index('*')\n    s.pop(stind)\nn = len(s)\nfor p in range(int(input())):\n    a = list(input())\n    ans = True\n    if stin:\n        while stind < len(a) > n and a[stind] not in good:\n            a.pop(stind)\n    if len(a) != n:\n        ans = False\n    else:\n        for i in range(n):\n            if a[i] == s[i] or a[i] in good and s[i] == '?':\n                None\n            else:\n                ans = False\n                break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "def local_right_to_global(test, local_right):\n    return(len(test) + local_right)\n    \ndef local_left_to_global(test, local_left):\n    return(local_left)\n\ndef check_left(test, template, good_symbols):\n    left_idx = -1\n    for symbol in template:\n        left_idx += 1\n        if symbol == '*':\n            return(local_left_to_global(test, left_idx))\n        try:\n            if test[left_idx] != template[left_idx]:\n                if template[left_idx] != '?':\n                    return('NO')\n                elif test[left_idx] not in good_symbols:\n                    return('NO')\n        except:\n            return('NO')\n\ndef check_right(test, template, good_symbols):\n    right_idx = 0\n    for symbol in reversed(template):\n        right_idx -= 1\n        if symbol == '*':\n            return(local_right_to_global(test, right_idx))\n        try:\n            if test[right_idx] != template[right_idx]:\n                if template[right_idx] != '?':\n                    return('NO')\n                elif test[right_idx] not in good_symbols:\n                    return('NO')            \n        except:\n            return('NO')\n    \ngood_symbols = set(list(input()))\ntemplate = input()\ntests_nr = int(input())\ntests = []\nfor _ in range(tests_nr):\n    tests.append(input())\n    \nabaca = '*' not in template\nfor test in tests:\n    if abaca:\n        pos = -1\n        flag = True\n        if len(test) != len(template):\n            print('NO')\n            continue\n        for symbol in template:\n            pos += 1\n            try:\n                if test[pos] != template[pos]:\n                    if template[pos] != '?':\n                        print('NO')\n                        flag = False\n                        break\n                    elif test[pos] not in good_symbols:\n                        print('NO')\n                        flag = False\n                        break\n            except:\n                print('NO')\n                flag = False\n                break\n        if flag:\n            print('YES')\n        continue\n    left_idx = check_left(test, template, good_symbols)\n    right_idx = check_right(test, template, good_symbols)\n    # print(left_idx, right_idx)\n    if left_idx == 'NO':\n        print('NO')\n    elif right_idx == 'NO':\n        print('NO')\n    else:\n        if right_idx < left_idx - 1:\n            print('NO')\n            continue\n        flag = True\n        for pos in range(left_idx, right_idx + 1):\n            if test[pos] in good_symbols:\n                print('NO')\n                flag = False\n                break\n        if flag:\n            print('YES')\n"]