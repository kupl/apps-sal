["from itertools import *\ndef f(x):\n    x -= 1\n    ret = 0\n    if x == 0:\n        ret = 1\n    else:\n        while x != 0:\n            ret += 1\n            x //= 7\n    return ret\n\ndef g(d):\n    ret = 0\n    for v in d:\n        ret = ret * 7 + v\n    return ret\n\n\n\nn, m = list(map(int, input().split()))\na = f(n)\nb = f(m)\nif a + b > 7:\n    print(0)\nelse:\n    ans = 0\n    for p in permutations(list(range(7)), a + b):\n        if g(p[:a]) < n and g(p[a:]) < m:\n            ans += 1\n    print(ans)\n\n\n", "def D(n):\n\tx,r=n-1,1\n\twhile x>=7:\n\t\tx//=7\n\t\tr+=1\n\treturn r\ndef H(n,l):\n\tx,r=n,\"\"\n\tif x==0:r+='0'\n\twhile x:\n\t\tr+=chr(ord('0')+x%7)\n\t\tx//=7\n\tr+='0'*(l-len(r))\n\treturn r\na,b=list(map(int,input().split()))\nla=D(a)\nlb=D(b)\nV=[0]*99\nr=0\ndef F(deep,wa,wb):\n\tnonlocal r\n\tif wa>=a or wb>=b:return\n\tif deep==la+lb:\n\t\tr+=1\n\t\treturn\n\ti=-1\n\twhile i<6:\n\t\ti+=1\n\t\tif V[i]:continue\n\t\tV[i]=1\n\t\tif deep>=la:\n\t\t\tF(deep+1,wa,wb+i*(7**(lb-1-(deep-la))))\n\t\telse:\n\t\t\tF(deep+1,wa+i*(7**(la-1-deep)),wb)\n\t\tV[i]=0\nif la+lb<8:F(0,0,0)\nprint(r)\n", "def sev(n):\n    if n == 0:\n        return 1\n    m = 0\n    while n > 0:\n        n //= 7\n        m += 1\n    return m\n\ndef fil(n, m, l, r):\n    d = []\n    for i in range(r):\n        d += [m % 7]\n        m //= 7\n    for i in range(l):\n        d += [n % 7]\n        n //= 7\n    \n    if len(set(d)) != l + r:\n        return 0\n    return 1\n\nn, m = list(map(int, input().split()))\nl, r = sev(n - 1), sev(m - 1)\n\nif l + r > 7:\n    print(0)\nelse:\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            c += fil(i, j, l, r)\n    print(c)\n", "from itertools import permutations\n\ndef str_base(number,base):\n    if number < 0:\n        return '-' + str_base(-number, base)\n    (d, m) = divmod(number, base)\n    if d > 0:\n        return str_base(d, base) + str(m)\n    return str(m)\n\nn, m = map(int, input().split())\n\nmax_h = str_base(n-1, 7)\nmax_m = str_base(m-1, 7)\nlen_h = len(max_h)\nlen_m = len(max_m)\n\nresult = 0\nfor p in permutations(list(range(7)) , len_h + len_m):\n    if str(''.join(map(str, p[:len_h]))) <= max_h and str(''.join(map(str, p[len_h:]))) <= max_m:\n        result += 1\n        \nprint(result)", "from itertools import permutations\nfrom math import ceil, log\n\nn, m = t = list(map(int, input().split()))\nl, _ = t = [ceil(log(x, 7.)) if x > 1 else 1 for x in t]\nprint(sum(int(s[:l], 7) < n and int(s[l:], 7) < m for s in map(''.join, permutations(\"0123456\", sum(t)))))\n", "BASE = 7\n\ndef itov(x):\n    digits = []\n    if x == 0:\n        digits.append(0)\n    while x > 0:\n        digits.append(x % BASE)\n        x //= BASE\n    digits.reverse()\n    return digits\n\ndef gen(pos = 0, minute = False, smaller = False):\n    max_val = max_minute if minute else max_hour\n    if pos >= len(max_val):\n        if minute:\n            return 1\n        else:\n            return gen(0, True)\n    else:\n        ans = 0\n        for digit in range(BASE):\n            if not used[digit] and (smaller or digit <= max_val[pos]):\n                used[digit] = True\n                ans += gen(pos + 1, minute, smaller or digit < max_val[pos])\n                used[digit] = False\n        return ans\n\nn, m = map(int, input().split())\nn -= 1\nm -= 1\nused = [False] * BASE\nmax_hour = itov(n)\nmax_minute = itov(m)\nprint(gen())", "from itertools import permutations\nfrom math import ceil, log\n\nnn, m = t = list(map(int, input().split()))\nl, _ = t = [ceil(log(x, 7.)) if x > 1 else 1 for x in t]\nprint(sum(int(s[:l], 7) < nn and int(s[l:], 7) < m for s in map(''.join, permutations(\"0123456\", sum(t)))))\n", "from collections import Counter\n\ndef getd(n):\n    v = 1\n    while n > 7 ** v:\n        v += 1\n    return v\n\ndef getb(n, d):\n    v = 0\n    for i in range(d):\n        b = 1 << (n % 7)\n        if v & b:\n            return 0\n        v |= b\n        n //= 7\n    return v\n\ndef getc(n, d):\n    c = Counter()\n    for i in range(n):\n        cb = getb(i, d)\n        if cb:\n            c[cb] += 1\n    return c\n\nx, y = map(int, input().split())\nxd, yd = getd(x), getd(y)\nif xd + yd > 7:\n    print(0)\n    return\nxc, yc, v = getc(x, xd), getc(y, yd), 0\nfor xi in xc:\n    for yi in yc:\n        if xi & yi == 0:\n            v += xc[xi] * yc[yi]\nprint(v)", "BASE = 7\n\ndef itov(x):\n    digits = []\n    if x == 0:\n        digits.append(0)\n    while x > 0:\n        digits.append(x % BASE)\n        x //= BASE\n    digits.reverse()\n    return digits\n\ndef gen(pos = 0, minute = False, smaller = False):\n    max_val = max_minute if minute else max_hour\n    if pos >= len(max_val):\n        if minute:\n            return 1\n        else:\n            return gen(0, True)\n    else:\n        ans = 0\n        for digit in range(BASE):\n            if not used[digit] and (smaller or digit <= max_val[pos]):\n                used[digit] = True\n                ans += gen(pos + 1, minute, smaller or digit < max_val[pos])\n                used[digit] = False\n        return ans\n\nn, m = map(int, input().split())\nn -= 1\nm -= 1\nused = [False] * BASE\nmax_hour = itov(n)\nmax_minute = itov(m)\nprint(gen())", "from itertools import permutations\nn, m = map(int, input().split())\nt1 = 1; t2 = 1;\nwhile 7 ** t1 < n: t1 += 1\nwhile 7 ** t2 < m: t2 += 1\ncount = 0\n\nfor perm in permutations(list('0123456'), t1 + t2):\n        a = int(''.join(perm[:t1]), 7)\n        b = int(''.join(perm[t1:t1 + t2]), 7)\n        if a < n and b < m:\n            count += 1\nprint(count)", "from itertools import permutations\ndef dfs(x):\n    r = x==0\n    while x :\n        r += 1\n        x //= 7\n    return r\nn ,m = list(map(int,input().split()))\nres, ln, lm = 0, dfs(n-1), dfs(m-1)\nfor i in permutations('0123456', ln+lm):\n    i = ''.join(i)\n    res += int(i[:ln], 7) < n and int(i[ln:], 7) < m\nprint(res)\n", "from itertools import permutations\ndef findPow(num):\n    ans = 1\n    num = num // 7\n    while num > 0:\n        num //= 7\n        ans +=1\n    return ans\na, b = [int(x) for x in input().split(' ')]\nx = findPow(a-1)\ny = findPow(b-1)\nans = 0\nif (x + y) > 7:\n    ans = 0\nelse:\n    for i in permutations('0123456', x+y):\n        s = ''.join(list(i))\n        p, q = int(s[:x], 7), int(s[x:], 7)\n        if p <= a-1 and q <= b-1:\n            ans+=1\n\nprint(ans)  \n", "import math\n\ndef digits(x, k):\n    d = [False] * 7\n    for i in range(k):\n        if d[x%7]:\n            return False\n        d[x%7] = True\n        x //= 7\n    return True\n    \ndef solve(n, m):\n    if n*m > 7**7:\n        return 0\n    k1 = math.ceil(math.log(n, 7)) if n > 1 else 1\n    k2 = math.ceil(math.log(m, 7)) if m > 1 else 1\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            s += digits(i * 7 ** k2 + j, k1 + k2)\n    return s\n\n\nn, m = list(map(int, input().split()))\nprint(solve(n, m))\n", "from itertools import *\nfrom math import *\nn, m = map(int, input().split())\nx, y = (max(1, ceil(log(k, 7))) for k in [n, m])\np = [''.join(t) for t in permutations('0123456', x + y)]\nprint(0 if x + y > 7 else sum(int(t[:x], 7) < n and int(t[x:], 7) < m for t in p))", "from itertools import permutations as P\n\nn, m = list(map(int, input().split()))\na = n-1\nb = m-1\nx = 0\ny = 0\nc = 0\nwhile a:\n\tx += 1\n\ta = a//7\nif x == 0:\n\tx = 1\nwhile b:\n\ty += 1\n\tb = b//7\nif y == 0:\n\ty = 1\nif x+y > 7 or x+y == 0:\n \tprint(0)\nelse:\n\tr = x+y\n\tl = list(P('0123456', r))\n\tfor ele in l:\n\t\ta = 0\n\t\tb = 0\n\t\tfor i in range(x):\n\t\t\ta += int(ele[i])*(7**(x-i-1))\n\t\tfor i in range(x, r):\n\t\t\tb += int(ele[i])*(7**(r-i-1))\n\t\tif a < n and b < m:\n\t\t\tc += 1\n\t\t\t#print(a, b, end = ' ')\n\t\t\t#print()\n\tprint(c)\n", "from itertools import permutations\nfrom math import ceil, log\n\nn, m = t = list(map(int, input().split()))\nl, _ = t = [ceil(log(x, 7.)) if x > 1 else 1 for x in t]\nprint(sum(int(s[:l], 7) < n and int(s[l:], 7) < m for s in map(''.join, permutations(\"0123456\", sum(t)))))\n\n\n\n\n# Made By Mostafa_Khaled\n", "import math\nimport sys\nfrom bisect import bisect_right, bisect_left, insort_right\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush\nfrom itertools import accumulate, permutations, combinations\nfrom sys import stdout\n\nR = lambda: map(int, input().split())\nn, m = R()\nnc, mc = n, m\nn -= 1\nm -= 1\na = b = 0\nwhile n:\n    n //= 7\n    a += 1\nwhile m:\n    m //= 7\n    b += 1\na, b = max(1, a), max(1, b)\nif a + b > 7:\n    print(0)\nelse:\n    res = 0\n    bs = [1]\n    whole = [0, 1, 2, 3, 4, 5, 6]\n    for i in range(10):\n        bs.append(bs[-1] * 7)\n    for pa in permutations(whole, a):\n        if sum(x * y for x, y in zip(bs, pa)) < nc:\n            for pb in permutations([x for x in whole if x not in pa], b):\n                if sum(x * y for x, y in zip(bs, pb)) < mc:\n                    res += 1\n    print(res)", "from itertools import permutations as p\ndef f(n, tn):\n    if not n:\n        tn.append(0)\n        return 1\n    cnt = 0\n    while n:\n        tn.append(n % 7)\n        n //= 7\n        cnt += 1\n    return cnt\nans = 0\ntn, tm = [], []\nn, m = map(int, input().split())\nn -= 1\nm -= 1\nx, y = f(n, tn), f(m, tm)\ntn, tm = tuple(tn[::-1]), tuple(tm[::-1])\n\ns = {0, 1, 2, 3, 4, 5, 6}\nif x + y > 7:\n    print(0);return\nfor i in p(s, x):\n    if i <= tn:\n        for j in p(s - set(i), y):\n            if j <= tm:\n                ans += 1\nprint(ans)", "from itertools import permutations as p\n\n\ndef length_base_7(ele, arr):\n    if not ele:\n        arr.append(0)\n        return 1\n    length = 0\n    while ele:\n        arr.append(ele % 7)\n        ele //= 7\n        length += 1\n    return length\n\n\nn, m = list(map(int, input().split()))\nn -= 1\nm -= 1\n\nn_base7, m_base7 = [], []\nn_length, m_length = length_base_7(n, n_base7), length_base_7(m, m_base7)\n\nn_base7, m_base7 = n_base7[::-1], m_base7[::-1]\n\ncombination_number = {0, 1, 2, 3, 4, 5, 6}\nres = 0\nfor i in p(combination_number, n_length):\n    if list(i) <= n_base7:\n        for j in p(combination_number - set(i), m_length):\n            if list(j) <= m_base7:\n                res += 1\n\nprint(res)\n", "import sys\nimport math\nfrom itertools import permutations\ndef convert(n):\n    if n == 0:\n        return []\n    return convert(n//7)+[n % 7]\nn,m = list(map(int,sys.stdin.readline().split()))\nx = convert(n-1)\ny = convert(m-1)\nnn = max(1,len(x))\nmm = max(1,len(y))\nans = 0\nfor i in permutations(\"0123456\",nn+mm):\n    a, b = \"\".join(i[:nn]), \"\".join(i[nn:])\n    ans += (int(a,7)<n and int(b,7)<m)\nsys.stdout.write(str(ans))\n\n\n\n\n", "def digits(n):\n    l=[]\n    if(n==0):\n        l.append(0)\n    else:\n        while(n>0):\n            l.append(n%7)\n            n=n//7\n        l.reverse()\n    return l\nl=input().split()\nn=int(l[0])\nm=int(l[1])\nnumh=len(digits(n-1))\nnumm=len(digits(m-1))\nans=0\nif(numh+numm>7):\n    ans=0\nelse:\n    for i in range(n):\n        for j in range(m):\n            o=i\n            p=j\n            used=[0 for lo in range(7)]\n            k=0\n            while(k<numh):\n                used[o%7]+=1\n                o=o//7\n                k+=1\n            k=0\n            while(k<numm):\n                used[p%7]+=1\n                p=p//7\n                k+=1\n            if(max(used)==1):\n                ans+=1\nprint(ans)", "from itertools import *\nfrom math import *\nn, m = map(int, input().split())\nx = ceil(log(m,7))\ny = ceil(log(n,7))\nms = dict()\nx = max(1,x)\ny = max(1,y)\ndef conv(s):\n\ts = s[::-1]\n\tj = 0\n\tnum = 0\n\tfor i in s:\n\t\tnum += int(i)*7**j\n\t\tj+=1\n\t# print(num)\n\treturn num\nif x+y > 7:\n\tprint(0)\nelse:\n\ts = '0123456'\n\tans = 0\n\tfor i in permutations(s,x+y):\n\t\t# print(i)\n\t\t\n\t\ta = i[:y]\n\t\tb = i[y:x+y]\n\t\t# print(a,b)\n\t\tif len(a) == 0 or len(b) == 0:\n\t\t\tcontinue\n\t\tif conv(a)<n and conv(b)<m:\n\t\t\t# print(conv(a),conv(b),i)\n\t\t\tans +=1\n\tprint(ans)"]