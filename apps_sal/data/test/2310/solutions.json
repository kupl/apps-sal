["t = int(input())\nfor i in range(t):\n    input()\n    m,k = map(int,input().split())\n    ak = list(map(int,input().split()))\n    ak2 = [0]*k\n    tjrj = [list(map(int,input().split())) for j in range(m-1)]\n    num = 0\n    num2 = 0\n    num3 = 100002\n    for j in range(m-1):\n        if num2 == 1 or tjrj[j][1] == 0:\n            if tjrj[j][0] != 0:\n                ak[tjrj[j][0]-1] -= 1\n            else:\n                num += 1\n        else:\n            for z in range(k):\n                    if ak[z] - num < 1:\n                        ak2[z] = 1\n            num2 = 1\n            if tjrj[j][0] != 0:\n                ak[tjrj[j][0]-1] -= 1\n            else:\n                num += 1\n            for f in range(j,m-1):\n                if tjrj[f][0] != 0:\n                    ak2[tjrj[f][0]-1] = 0\n            for f in range(k):\n                if ak2[f] == 1:\n                    if num3 > ak[f]:\n                        num3 = ak[f]\n            num -= num3\n    for z in range(k):\n        if ak[z] - num < 1 or ak2[z] == 1:\n            print(\"Y\",end=\"\")\n        else:\n            print(\"N\",end=\"\")\n    print()\n", "import sys\n\ntest_count = int(sys.stdin.readline())\nfor test in range(test_count):\n    sys.stdin.readline()\n    m, k = list(map(int, sys.stdin.readline().split()))\n    counts = list(map(int, sys.stdin.readline().split()))\n    took = []\n    unhappy = []\n    for i in range(m - 1):\n        t, r = list(map(int, sys.stdin.readline().split()))\n        t -= 1 # -1 means unknown\n        took.append(t)\n        unhappy.append(r)\n\n    took_in_total = [0 for dish_count in counts]\n    for i in range(m - 1):\n        if took[i] != -1:\n            took_in_total[took[i]] += 1\n\n    took_already = [0 for dish_count in counts]\n    left = [dish_count for dish_count in counts]\n    answer = [False for dish_count in counts]\n    unknown = 0\n    all_present = True\n    for i in range(m - 1):\n        if unhappy[i] == 1 and all_present:\n            could_exhaust = []\n            for j in range(k):\n                if took_already[j] < took_in_total[j]:\n                    continue\n                if left[j] > unknown:\n                    continue\n                could_exhaust.append(j)\n\n            if len(could_exhaust) == 0:\n                raise AssertionError\n\n            for j in could_exhaust:\n                answer[j] = True\n\n            unknown -= min([left[j] for j in could_exhaust])\n            all_present = False\n\n        if took[i] != -1:\n            left[took[i]] -= 1\n            took_already[took[i]] += 1\n            if left[took[i]] == 0:\n                all_present = False\n        else:\n            unknown += 1\n\n    for j in range(k):\n        if left[j] <= unknown:\n            answer[j] = True\n\n    sys.stdout.write(\n        ''.join(['Y' if x else 'N' for x in answer]) + '\\n'\n    )\n", "n=int(input())\nfor i in range(n):\n    input().strip()\n    q,w=map(int,input().strip().split())\n    kol=list(map(int,input().strip().split()))\n    r=[]\n    e=[]\n    for ii in range(q-1):\n        a,s=map(int,input().strip().split())\n        a-=1\n        r.append(a)\n        e.append(s)\n    rw=[0 for uu in kol]\n    for ii in range(q-1):\n        if r[ii]!=-1:\n            rw[r[ii]]+=1\n    nd=[0 for uu in kol]\n    l=[uu for uu in kol]\n    rez=[False for uu in kol]\n    qw=0\n    tr=True\n    for ii in range(q-1):\n        if e[ii]==1 and tr:\n            su=[]\n            for iii in range(w):\n                if nd[iii]<rw[iii]:\n                    continue\n                if l[iii]>qw:\n                    continue\n                su.append(iii)\n            if len(su)==0:\n                raise AssertionError\n            for iii in su:\n                rez[iii]=True\n            qw-=min(map(lambda iii:l[iii],su))\n            tr=False\n        if r[ii]!=-1:\n            l[r[ii]]-=1\n            nd[r[ii]]+=1\n            if l[r[ii]]==0:\n                tr=False\n        else:\n            qw+=1\n    for iii in range(w):\n        if l[iii]<=qw:\n            rez[iii]=True\n    print(''.join(map(lambda x:'Y' if x else 'N',rez)))", "import sys\nn=int(input())\nfor i in range(n):\n    sys.stdin.readline()\n    q,w=map(int,sys.stdin.readline().split())\n    kol=list(map(int,sys.stdin.readline().split()))\n    r=[]\n    e=[]\n    for ii in range(q-1):\n        a,s=map(int,sys.stdin.readline().split())\n        a-=1\n        r.append(a)\n        e.append(s)\n    rw=[0 for uu in kol]\n    for ii in range(q-1):\n        if r[ii]!=-1:\n            rw[r[ii]]+=1\n    nd=[0 for uu in kol]\n    l=[uu for uu in kol]\n    rez=[False for uu in kol]\n    qw=0\n    tr=True\n    for ii in range(q-1):\n        if e[ii]==1 and tr:\n            su=[]\n            for iii in range(w):\n                if nd[iii]<rw[iii]:\n                    continue\n                if l[iii]>qw:\n                    continue\n                su.append(iii)\n            if len(su)==0:\n                raise AssertionError\n            for iii in su:\n                rez[iii]=True\n            qw-=min(map(lambda iii:l[iii],su))\n            tr=False\n        if r[ii]!=-1:\n            l[r[ii]]-=1\n            nd[r[ii]]+=1\n            if l[r[ii]]==0:\n                tr=False\n        else:\n            qw+=1\n    for iii in range(w):\n        if l[iii]<=qw:\n            rez[iii]=True\n    sys.stdout.write(''.join(map(lambda x:'Y' if x else 'N',rez))+'\\n')", "t = int(input())\nfor j in range(t):\n    e = input()\n    m, k = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    sum, bfail = [0] * k, [0] * k\n    ffail, undef = -1, 0\n    used = [False] * k\n    ubfail = 0\n    for i in range(m - 1):\n        c, ns = map(int, input().split())\n        if c == 0:\n            undef += 1\n            if ns == 0 and ffail == -1:\n                ubfail += 1\n        else:\n            sum[c - 1] += 1\n            if ns == 0 and ffail == -1:\n                bfail[c - 1] += 1\n        if ns and ffail == -1:\n            ffail = i\n        if ffail != -1 and c > 0:\n            used[c - 1] = True\n    if ffail == -1:\n        for i in range(k):\n            if sum[i] + undef >= arr[i]:\n                print('Y', end = '')\n            else:\n                print('N', end = '')\n        print()\n        continue\n    minu = 10 ** 6\n    for i in range(k):\n        if not used[i] and arr[i] - bfail[i] < minu:\n            minu = arr[i] - bfail[i]\n            best = i\n    for i in range(k):\n        if i == best or undef - minu + sum[i] >= arr[i]:\n            print('Y', end = '')\n        elif bfail[i] + ubfail >= arr[i] and not used[i]:\n            print('Y', end = '')\n        else:\n            print('N', end = '')\n    print()\n", "import sys\n\nt = int(input())\n\nfor i in range(t):\n    remove_from_all = 0\n    input()\n    m, k = (int(x) for x in input().split())\n    dishes = [int(x) for x in input().split()]\n    inputs = []\n    for j in range(m - 1):\n        t, r = (int(x) for x in input().split())\n        inputs.append((t - 1, r))\n    seen_upset = False\n    for i, v in enumerate(inputs):\n        t, r = v\n        if r == 1 and not seen_upset:\n            impossible = set()\n            for j in range(i, len(inputs)):\n                _t, _r = inputs[j]\n                impossible.add(_t)\n            for j in range(len(dishes)):\n                if dishes[j] > remove_from_all:\n                    impossible.add(j)\n            minimal = float(\"inf\")\n            for j in range(len(dishes)):\n                if j not in impossible:\n                    minimal = min(dishes[j], minimal)\n                    dishes[j] = 0\n            remove_from_all -= minimal\n            seen_upset = True\n        if t == -1:\n            remove_from_all += 1\n        else:\n            dishes[t] -= 1\n    for j in dishes:\n        sys.stdout.write(\"Y\" if j - remove_from_all <= 0 else \"N\")\n    print(\"\")\n", "def ris():\n    return map(int, input().split())\n\n\ndef testCase():\n    m, k = ris()\n    q = 0\n    a = list(ris())\n    some_is_out = False\n    tmp = set()\n    for i in range(m - 1):\n        t, r = ris()\n        t -= 1\n        if r == 1 and not some_is_out:\n            some_is_out = True\n            tmp = tmp.union(set(filter(lambda x: a[x] <= q, range(k))))\n        if t == -1:\n            q += 1\n        else:\n            if t in tmp:\n                tmp.remove(t)\n            a[t] -= 1\n            if a[t] < 0:\n                a[t] = 0\n                q += 1\n    if tmp:\n        q -= min(map(lambda x: a[x], tmp))\n    print(\"\".join(list(map(lambda x: 'Y' if a[x] - q <= 0 or x in tmp else 'N', range(len(a))))))\n\n\nfor i in range(int(input())):\n    input()\n    testCase()", "t = int(input())\n\nfor i in range(t):\n    input()\n    m, k = [int(l) for l in input().split()]\n    a = [int(j) for j in input().split()]\n    upset = -1\n    unknown = 0\n    unknownBeforeUpset = 0\n    ti, r = [], []\n    for i1 in range(m-1):\n        n = input().split()\n        ti.append(int(n[0]))\n        r.append(int(n[1]))\n        ti[i1] -= 1\n\n        if r[i1] == 1 and upset == -1:\n            upset = i1\n\n        if ti[i1] != -1:\n            a[ti[i1]] -= 1\n        else:\n            unknown+=1\n            if upset == -1:\n                unknownBeforeUpset+=1\n\n    st = [\"N\" for j in range(k)]\n    if upset == -1:\n        for j in range(k):\n            if a[j] <= unknown:\n                st[j] = \"Y\"\n    else:\n        usedAfter = [False for i in range(k)]\n        for j in range(upset, m-1):\n            if ti[j] != -1:\n                usedAfter[ti[j]] = True\n        minFirstFinished = -1\n        for j in range(k):\n            if not usedAfter[j] and unknownBeforeUpset >= a[j]:\n                st[j] = 'Y'\n                if minFirstFinished == -1 or a[minFirstFinished] > a[j]:\n                    minFirstFinished = j\n        if minFirstFinished != -1:\n            restUnknown = unknown - a[minFirstFinished]\n            for j in range(k):\n                if a[j] <= restUnknown:\n                    st[j] = 'Y'\n\n    print(\"\".join(st))", "def ris():\n    return list(map(int, input().split()))\n\n\ndef testCase():\n    m, k = ris()\n    q = 0\n    a = list(ris())\n    some_is_out = False\n    tmp = set()\n    for i in range(m - 1):\n        t, r = ris()\n        t -= 1\n        if r == 1 and not some_is_out:\n            some_is_out = True\n            tmp = tmp.union(set([x for x in range(k) if a[x] <= q]))\n        if t == -1:\n            q += 1\n        else:\n            if t in tmp:\n                tmp.remove(t)\n            a[t] -= 1\n            if a[t] < 0:\n                a[t] = 0\n                q += 1\n    if tmp:\n        q -= min([a[x] for x in tmp])\n    print(\"\".join(list(['Y' if a[x] - q <= 0 or x in tmp else 'N' for x in range(len(a))])))\n\n\nfor i in range(int(input())):\n    input()\n    testCase()\n", "def ris():\n    return list(map(int, input().split()))\n\n\ndef testCase():\n    m, k = ris()\n    q = 0\n    a = list(ris())\n    some_is_out = False\n    tmp = set()\n    for i in range(m - 1):\n        t, r = ris()\n        t -= 1\n        if r == 1 and not some_is_out:\n            some_is_out = True\n            tmp = tmp.union(set([x for x in range(k) if a[x] <= q]))\n        if t == -1:\n            q += 1\n        else:\n            if t in tmp:\n                tmp.remove(t)\n            a[t] -= 1\n            if a[t] < 0:\n                a[t] = 0\n                q += 1\n    if tmp:\n        q -= min([a[x] for x in tmp])\n    print(\"\".join(list(['Y' if a[x] - q <= 0 or x in tmp else 'N' for x in range(len(a))])))\n\n\nfor i in range(int(input())):\n    input()\n    testCase()\n", "def ris():\n    return list(map(int, input().split()))\n\n\ndef testCase():\n    m, k = ris()\n    q = 0\n    a = list(ris())\n    some_is_out = False\n    tmp = set()\n    for i in range(m - 1):\n        t, r = ris()\n        t -= 1\n        if r == 1 and not some_is_out:\n            some_is_out = True\n            tmp = tmp.union(set([x for x in range(k) if a[x] <= q]))\n        if t == -1:\n            q += 1\n        else:\n            if t in tmp:\n                tmp.remove(t)\n            a[t] -= 1\n            if a[t] < 0:\n                a[t] = 0\n                q += 1\n    if tmp:\n        q -= min([a[x] for x in tmp])\n    print(\"\".join(list(['Y' if a[x] - q <= 0 or x in tmp else 'N' for x in range(len(a))])))\n\n\nfor i in range(int(input())):\n    input()\n    testCase()\n", "def ris():\n    return list(map(int, input().split()))\n\n\ndef testCase():\n    m, k = ris()\n    q = 0\n    a = list(ris())\n    some_is_out = False\n    tmp = set()\n    for i in range(m - 1):\n        t, r = ris()\n        t -= 1\n        if r == 1 and not some_is_out:\n            some_is_out = True\n            tmp = tmp.union(set([x for x in range(k) if a[x] <= q]))\n        if t == -1:\n            q += 1\n        else:\n            if t in tmp:\n                tmp.remove(t)\n            a[t] -= 1\n            if a[t] < 0:\n                a[t] = 0\n                q += 1\n    if tmp:\n        q -= min([a[x] for x in tmp])\n    print(\"\".join(list(['Y' if a[x] - q <= 0 or x in tmp else 'N' for x in range(len(a))])))\n\n\nfor i in range(int(input())):\n    input()\n    testCase()\n", "def ris():\n    return list(map(int, input().split()))\n\n\ndef testCase():\n    m, k = ris()\n    q = 0\n    a = list(ris())\n    some_is_out = False\n    tmp = set()\n    for i in range(m - 1):\n        t, r = ris()\n        t -= 1\n        if r == 1 and not some_is_out:\n            some_is_out = True\n            tmp = tmp.union(set([x for x in range(k) if a[x] <= q]))\n        if t == -1:\n            q += 1\n        else:\n            if t in tmp:\n                tmp.remove(t)\n            a[t] -= 1\n            if a[t] < 0:\n                a[t] = 0\n                q += 1\n    if tmp:\n        q -= min([a[x] for x in tmp])\n    print(\"\".join(list(['Y' if a[x] - q <= 0 or x in tmp else 'N' for x in range(len(a))])))\n\n\nfor i in range(int(input())):\n    input()\n    testCase()\n", "def ris():\n    return list(map(int, input().split()))\n\n\ndef testCase():\n    m, k = ris()\n    q = 0\n    a = list(ris())\n    some_is_out = False\n    tmp = set()\n    for i in range(m - 1):\n        t, r = ris()\n        t -= 1\n        if r == 1 and not some_is_out:\n            some_is_out = True\n            tmp = tmp.union(set([x for x in range(k) if a[x] <= q]))\n        if t == -1:\n            q += 1\n        else:\n            if t in tmp:\n                tmp.remove(t)\n            a[t] -= 1\n            if a[t] < 0:\n                a[t] = 0\n                q += 1\n    if tmp:\n        q -= min([a[x] for x in tmp])\n    print(\"\".join(list(['Y' if a[x] - q <= 0 or x in tmp else 'N' for x in range(len(a))])))\n\n\nfor i in range(int(input())):\n    input()\n    testCase()\n", "def ris():\n    return list(map(int, input().split()))\n\n\ndef testCase():\n    m, k = ris()\n    q = 0\n    a = list(ris())\n    some_is_out = False\n    tmp = set()\n    for i in range(m - 1):\n        t, r = ris()\n        t -= 1\n        if r == 1 and not some_is_out:\n            some_is_out = True\n            tmp = tmp.union(set([x for x in range(k) if a[x] <= q]))\n        if t == -1:\n            q += 1\n        else:\n            if t in tmp:\n                tmp.remove(t)\n            a[t] -= 1\n            if a[t] < 0:\n                a[t] = 0\n                q += 1\n    if tmp:\n        q -= min([a[x] for x in tmp])\n    print(\"\".join(list(['Y' if a[x] - q <= 0 or x in tmp else 'N' for x in range(len(a))])))\n\n\nfor i in range(int(input())):\n    input()\n    testCase()\n", "def ris():\n\n    return list(map(int, input().split()))\n\n\n\n\n\ndef testCase():\n\n    m, k = ris()\n\n    q = 0\n\n    a = list(ris())\n\n    some_is_out = False\n\n    tmp = set()\n\n    for i in range(m - 1):\n\n        t, r = ris()\n\n        t -= 1\n\n        if r == 1 and not some_is_out:\n\n            some_is_out = True\n\n            tmp = tmp.union(set([x for x in range(k) if a[x] <= q]))\n\n        if t == -1:\n\n            q += 1\n\n        else:\n\n            if t in tmp:\n\n                tmp.remove(t)\n\n            a[t] -= 1\n\n            if a[t] < 0:\n\n                a[t] = 0\n\n                q += 1\n\n    if tmp:\n\n        q -= min([a[x] for x in tmp])\n\n    print(\"\".join(list(['Y' if a[x] - q <= 0 or x in tmp else 'N' for x in range(len(a))])))\n\n\n\n\n\nfor i in range(int(input())):\n\n    input()\n\n    testCase()\n\n\n\n\n# Made By Mostafa_Khaled\n"]