["from math import *\nfrom sys import *\nn, k = map(int, stdin.readline().split(\" \"))\na = 1;\nfor c in map(int, stdin.readline().split(\" \")):\n  a = a * (gcd(k, c)//gcd(a, c))\nif a%k == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "import math\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ng = 1\nfor i in a:\n    g = math.gcd(k, i * g//math.gcd(i, g))\nif g == k:\n    print('Yes')\nelse:\n    print('No')\n", "def sieze_prime(n):\n    sieze = [True]*(n+1)\n    sieze[0] = sieze[1] = False\n    i = 2\n    while i * i <= n:\n        if sieze[i]:\n            for j in range(2*i, n+1, i):\n                sieze[j] = False\n            # end for\n        # end if\n        i = i + 1\n    # end while\n    primes = range(0, n+1)\n    primes = filter(lambda x : sieze[x], primes)\n    return primes\n# end def\n\ndef factorize(n):\n    nonlocal primes\n    factors = []\n    i = 0;\n    while primes[i]**2 <= n:\n        p = primes[i]\n        if n % p == 0:\n            factor = [primes[i], 1]\n            n //= p\n            while n % p == 0:\n                n //= p\n                factor[1] += 1\n            # end while\n            factors.append(factor)\n        # end if\n        i += 1\n    # end while\n    if not n==1: factors.append([n, 1])\n    return factors\n# end def\n\nprimes = None\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\n\ndef main():\n    nonlocal primes\n    primes = list(sieze_prime(1000000))\n    n, k = map(lambda x : int(x), input().split())\n    c = set(map(lambda x : int(x), input().split()))\n    factors = factorize(k)\n    success = True\n    for prime, power in factors:\n        factor = prime**power\n        if any(map(lambda x : int(x) % factor==0, c)):\n            continue\n        else:\n            success = False\n            break\n    if success: print(\"Yes\")\n    else: print(\"No\")\n\nmain()", "from math import gcd\n\n\ndef lcm(a, b):\n\treturn (a * b) // gcd(a, b)\n\n\ndef main():\n\tn, k = list(map(int, input().split()))\n\tans = 1\n\ta = list(map(int, input().split()))\n\tfor i in range(n):\n\t\ttc = a[i]\n\t\tgc = gcd(tc, k)\n\t\tans = lcm(ans, gc)\n\tif ans == k:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\nmain()\n", "import math\nn, k = list(map(int, input().split()))\na = 1;\nar = list(map(int, input().split()))\nfor c in ar:\n\ta *=  math.gcd(k,c) //math.gcd(a, c)\nif a % k == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\n", "import sys\ninput=sys.stdin.readline\nimport math\nn, k = list(map(int, input().split()))\na = 1;\nar = list(map(int, input().split()))\nfor c in ar:\n    a *=  math.gcd(k,c)//math.gcd(a,c) \n    #print(a,c)\nif a % k == 0:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "\nimport sys\ninput=sys.stdin.readline\nimport math\nn, k = list(map(int, input().split()))\na = 1;\nar = list(map(int, input().split()))\nfor c in ar:\n    a *=  math.gcd(k,c)//math.gcd(a,c) \n    #print(a,c)\nif a==k:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "import sys\nimport math\nn,k = list(map(int,sys.stdin.readline().split()))\narr = list(map(int,sys.stdin.readline().split()))\nans = 1\nfor i in arr:\n    ans = math.gcd(k,i*ans//math.gcd(i,ans))\nif ans == k:\n    print('Yes')\nelse:\n    print('No')\n\n\n", "# https://codeforces.com/problemset/problem/687/B\nMAX = 1000000\nn,k = map(int,input().split())\nancient = [int(x) for x in input().split()]\n\nisPrime = [0 for x in range(MAX+1)]\ncount = [0 for x in range(MAX+1)]\n\nfor x in range(2,MAX+1):\n    if not isPrime[x]:\n        for y in range(x,MAX+1,x):\n            isPrime[y] = x\n\nfor val in ancient:\n    while val > 1:\n        p = isPrime[val]\n        c = 0\n        while val%p == 0:\n            c+=1\n            val = val//p\n        count[p] = max(count[p],c)\n\nflag = True \nwhile k > 1:\n    flag &= (count[isPrime[k]] > 0)\n    count[isPrime[k]] -= 1\n    k = k//isPrime[k]\nprint(\"Yes\" if flag else \"No\")", "# *********************************************************************\n# *-------------------------------------------------------------------*\n# *                                                                   *\n# *   Life is just a life. Lead it, Feel it & Enjoy It Properly.      *\n# *   Nothing is impossible. Just believe in yourself & Almighty.     *\n# *                                                                   *\n# *-------------------------------------------------------------------*\n# *********************************************************************\nimport math\n\ndef LCM(a,b):\n    return int(a/math.gcd(a,b))*b\n\ndef DenTofieM():\n    n, k = list(map(int,input().split()))\n    ar = list(map(int,input().split()))\n\n    L=1\n    for i in ar:\n        G=math.gcd(i,k)\n        L=LCM(L,G)\n    if L==k: print(\"Yes\")\n    else: print(\"No\")\n\nDenTofieM()\n", "# *********************************************************************\n# *-------------------------------------------------------------------*\n# *                                                                   *\n# *   Life is just a life. Lead it, Feel it & Enjoy It Properly.      *\n# *   Nothing is impossible. Just believe in yourself & Almighty.     *\n# *                                                                   *\n# *-------------------------------------------------------------------*\n# *********************************************************************\nimport math\n\ndef LCM(a,b):\n    return int(a/math.gcd(a,b))*b\n\ndef DenTofieM():\n    n, k = list(map(int,input().split()))\n    ar = list(map(int,input().split()))\n\n    L=1\n    for i in ar:\n        G=math.gcd(i,k)\n        L=LCM(L,G)\n    if L==k: print(\"Yes\")\n    else: print(\"No\")\n\nDenTofieM()\n\n", "import sys\nfrom functools  import reduce\nfrom math import gcd\nI=sys.stdin.readline\n\nans=\"\"\n\nn,k=map(int,I().split())\n\nc=list(map(int,I().split()))\n\n\ni=0\nx=1\nwhile i<n:\n\tg=gcd(c[i],k)\n\tx=(x*g)//gcd(g,x)\n\ti+=1\n\n\n\n\nif x==k:\n\tans+=\"Yes\\n\"\nelse:\n\tans+=\"No\\n\"\n\n\nprint(ans)", "from math import gcd\ndef lcm(x,y):\n\treturn x*y//gcd(x,y)\nn,k=map(int,input().split())\nlst=[]\nkk=k\ni=2\nwhile i<=kk:\n\tc=0\n\twhile kk%i==0:\n\t\tc+=1\n\t\tkk//=i\n\tif c:\n\t\tlst.append([i,c])\n\ti+=1\narr=list(map(int,input().split()))\nflag=True\nfor j in lst:\n\tma=0\n\tfor i in range(n):\n\t\tc=0\n\t\twhile arr[i]%j[0]==0:\n\t\t\tc+=1\n\t\t\tarr[i]//=j[0]\n\t\tma=max(c,ma)\n\tif ma<j[1]:\n\t\tflag=False\n\t\tbreak\nprint(\"Yes\") if flag else print(\"No\")", "# from math import gcd\n# def lcm(x,y):\n# \treturn x*y//gcd(x,y)\n# n,k=map(int,input().split())\n# lst=[]\n# kk=k\n# i=2\n# while i<=kk:\n# \tc=0\n# \twhile kk%i==0:\n# \t\tc+=1\n# \t\tkk//=i\n# \tif c:\n# \t\tlst.append([i,c])\n# \ti+=1\n# arr=list(map(int,input().split()))\n# flag=True\n# for j in lst:\n# \tma=0\n# \tfor i in range(n):\n# \t\tc=0\n# \t\twhile arr[i]%j[0]==0:\n# \t\t\tc+=1\n# \t\t\tarr[i]//=j[0]\n# \t\tma=max(c,ma)\n# \tif ma<j[1]:\n# \t\tflag=False\n# \t\tbreak\n# print(\"Yes\") if flag else print(\"No\")\n\nfrom math import gcd\ndef lcm(x,y):\n\treturn x*y//gcd(x,y)\nn,k=map(int,input().split())\narr=list(map(int,input().split()))\nl=1\nfor x in arr:\n\tl=gcd(k,lcm(l,x))\nprint(\"Yes\") if l==k else print(\"No\")", "import math\ndef gcd(a, b):\n    if b == 0:\n        return a;\n    else:\n        return gcd(b, a % b);\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b);\n\ndef solve(n, k):\n    ans = 1;\n    a = list(map(int, input().split()));\n    #print(a);\n    for i in range(n):\n        ans = math.gcd(k, lcm(ans, a[i]));\n    return ans == k;\n\nwhile True:\n    try:\n        n, k = list(map(int, input().split()));\n        p = solve(n, k);\n        if p:\n            print(\"Yes\");\n        else:\n            print(\"No\");\n    except EOFError:\n        break\n", "from math import gcd\nn, k = list(map(int, input().split()))\nans = 1\nfor e in input().split():\n  e = int(e)\n  ans = ans // gcd(ans, e) * e % k\nprint('No' if ans else 'Yes')\n\n", "def gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n\nn, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\n\nlcm = 1\n\nfor v in l:\n    lcm = lcm * v // gcd(lcm, v)\n    lcm = gcd(lcm, k)\n\nif k == lcm:\n    print('Yes')\nelse:\n    print('No')\n", "import sys\nfrom math import gcd\ninput = sys.stdin.readline\nn, k = map(int, input().split())\nv = list(map(int, input().split()))\nlcm = 1\nfor u in v:\n    lcm = lcm * u // gcd(u, lcm)\n    lcm = gcd(lcm, k)\nprint ([\"No\", \"Yes\"][lcm == k])", "import math\n\ndef main():\n    n,k = list(map(int,input().split()))\n    C = list(map(int,input().split()))\n    l=C[0]\n    for c in C:\n        l = l*c//math.gcd(l,c)%k\n        if(l==0):\n            print(\"Yes\")\n            return\n    print(\"No\")\n\nmain()\n", "import sys, math\ninput = sys.stdin.readline\n\ndef getInts():\n    return [int(s) for s in input().split()]\n\ndef getInt():\n    return int(input())\n\ndef getStrs():\n    return [s for s in input().split()]\n\ndef getStr():\n    return input().strip()\n\ndef listStr():\n    return list(input().strip())\n\nimport collections as col\nimport math\n\ndef solve():\n    #we need to know whether, amongst the C values, there are two or more pairwise coprime values whose product equals K\n    N, K = getInts()\n    C = getInts()\n    lcm = 1\n    for c in C:\n        lcm = lcm*c//math.gcd(lcm,c)\n        lcm = math.gcd(lcm,K)\n    return \"Yes\" if lcm == K else \"No\"\n    \n#for _ in range(getInt()):\nprint(solve())\n    \n\n"]