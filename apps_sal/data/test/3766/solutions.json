["\"\"\"\nCodeforces Round 253 Div 1 Problem A\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0:\n        return inputs\n    if mode == 1:\n        return inputs.split()\n    if mode == 2:\n        return [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n    if isinstance(s, list): s = \" \".join(map(str,s))\n    s = str(s)\n    print(s, end=\"\")\n\n################################################### SOLUTION\nimport itertools\ncovers = itertools.product([0,1], repeat=10)\n\nn, = read()\ns = read(1)\na = [0] * 25\ncolors = \"RGBYW\"\nfor i in s:\n    a[colors.index(i[0]) * 5 + int(i[1])-1] |= 1\n\ndef check(cover):\n    nonlocal a\n    unknowns = [0] * 11\n    for i in range(25):\n        if not a[i]: continue\n        id = -1\n        if not cover[i%5]: id = 5+i//5\n        if not cover[5+i//5]:\n            if id == -1:\n                id = i%5\n            else:\n                id = 10\n        if id > -1:\n            if unknowns[id]: return False\n            unknowns[id] = 1\n    return True\n\nmn = 99\nfor i in covers:\n    if check(i):\n        mn = min(mn, sum(i))\n\nprint(mn)", "input()\ncolour = {'R': 0, 'G': 1, 'B': 2, 'Y': 3, 'W': 4}\ncards = {(colour[c], ord(v) - ord('1')) for c, v in input().split()}\n\ndef ok(cs, vs):\n    return len({\n            (c if (cs >> c) & 1 else -1, v if (vs >> v) & 1 else -1)\n            for c, v in cards\n        }) == len(cards)\n\nprint((min(bin(cs).count('1') + bin(vs).count('1')\n    for cs in range(1<<5) for vs in range(1<<5)\n    if ok(cs, vs)\n)))\n", "import itertools\n\n\ninput()\ncards = tuple(set(str.split(input())))\nn = len(cards)\n\nif n == 1:\n\n    print(0)\n    return\n\nsymbols = \"RGBYW12345\"\nfor l in range(1, 10):\n\n    for comb in itertools.combinations(symbols, l):\n\n        positions = [cards] * n\n        for symbol in comb:\n\n            for i in range(n):\n\n                if symbol in cards[i]:\n\n                    positions[i] = tuple([c for c in positions[i] if symbol in c])\n\n                else:\n\n                    positions[i] = tuple([c for c in positions[i] if symbol not in c])\n\n        if sum(map(len, positions)) == n:\n\n            print(l)\n            return\n", "input()\ncolour = dict(list(zip('RGBYW', list(range(5)))))\ncards = {(colour[c], ord(v) - ord('1')) for c, v in input().split()}\n\nprint((min(bin(cs).count('1') + bin(vs).count('1')\n    for cs in range(1<<5) for vs in range(1<<5)\n    if len({\n        (c if (cs >> c) & 1 else -1, v if (vs >> v) & 1 else -1)\n        for c, v in cards\n    }) == len(cards)\n)))\n", "from itertools import *\npower = lambda i: chain.from_iterable(combinations(i, r) for r in range(len(i) + 1))\ninput()\ncards = set(input().split())\nprint((min(len(s) for s in power(\"RGBYW12345\") if\n    len(set(str(set(s) & set(t)) for t in cards)) == len(cards)\n)))\n", "def check(hint, Card):\n    for i in Card :\n        for j in Card :\n            if i == j : continue\n            elif i[0] == j[0] :\n                if i[1] not in hint and j[1] not in hint :\n                    return False\n            elif i[1] == j[1] :\n                if i[0] not in hint and j[0] not in hint :\n                    return False\n            else :\n                if i[0] not in hint and i[1] not in hint and j[0] not in hint and j[1] not in hint :\n                    return False\n    return True\nHH = \"RGBYW12345\"\nn = int(input())\nCard = list(input().split(' '))\nans = 20\nfor i in range(1024):\n    hint = \"\"\n    cnt = 0\n    for j in range(10) :\n        if (2**j)&i > 0 :\n            hint += HH[j]\n            cnt+=1\n    if check(hint, Card) :\n        ans = min(ans, cnt)\nprint(ans)        ", "n = int(input())\ncolour = dict(zip('RGBYW', range(5, 10)))\ncards = list({2 ** colour[c] + 2 ** (ord(v) - ord('1')) for c, v in input().split()})\nans = 10\nn = len(cards)\nif n > 1:\n    for bit in range(2 ** 10):\n        ok = True\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if cards[i] & cards[j] == 0:\n                    if (cards[i] | cards[j]) & bit == 0:\n                        ok = False\n                        break\n                elif cards[i] != cards[j]:\n                    if (cards[i] ^ cards[j]) & bit == 0:\n                        ok = False\n                        break\n            if not ok:\n                break\n        if ok:\n            ans = min(bin(bit).count('1'), ans)\n    print(ans)\nelse:\n    print(0)", "def Checker(hint,card):\n    for a in card:\n        for b in card:\n            if a == b:\n                continue\n            elif a[0] == b[0]:\n                if a[1] not in hint and b[1] not in hint:\n                    return False\n            elif a[1] == b[1]:\n                if a[0] not in hint and b[0] not in hint:\n                    return False\n            elif a[0] not in hint and a[1] not in hint and b[0] not in hint and b[1] not in hint:\n                return False\n    return True\n\nuser_input=int(input())\nuser_input = input()\nCard=user_input.split(' ')\npossible_chars=\"RGBYW12345\"\n\nfinal_answer=10\n\ncard_set=set(Card)\nif len(card_set)==1:\n    print (\"0\")\n\nelse:\n\n    for i in range(1024):\n        hint=\"\"\n        counter=0\n        for j in range(9,-1,-1):\n            if (i-(2**j))>0:\n                hint+=possible_chars[j]\n                i-=2**j\n                counter+=1\n\n        if Checker(hint,card_set):\n            final_answer=min(final_answer,counter)\n\n    print (final_answer)\n", "from itertools import combinations\nn = int(input())\ncolors = {'R':0,'G':1,'B':2,'Y':3,'W':4}\nletters = {'1':0,'2':1,'3':2,'4':3,'5':4}\nl = list(set(list(input().split())))\ndef checker(hint,cards):\n    for i in cards:\n        for j in cards:\n            if i == j:\n                continue\n            if i[0] == j[0]:\n                if i[1] not in hint and j[1] not in hint:\n                    return False\n            elif i[1] == j[1]:\n                if i[0] not in hint and j[0] not in hint:\n                    return False\n            else:\n                if i[0] not in hint and i[1] not in hint and j[0] not in hint and j[1] not in hint:\n                    return False\n    return True\nresult = []\nfor i in l:\n    if i[0] not in result:\n        result.append(i[0])\n    if i[1] not in result:\n        result.append(i[1])\nall_hints = []\nfor i in range(1,len(result)+1):\n    comb = combinations(result,i)\n    all_hints += comb\nmin_hint = len(result)\nif len(l) == 1:\n    print(0)\nelse:\n    for i in all_hints:\n        if checker(i,l):\n            min_hint = min(len(i),min_hint)\n    print (min_hint)\n\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "input()\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n", "from itertools import chain, combinations\nfrom copy import deepcopy\ndef powerset(iterable):\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\nn = int(input())\nlocations = input().split()\nmatrixG = [[0]*5 for i in range(5)]\nfor i in locations:\n    if i[0] == \"R\":\n        matrixG[0][int(i[1])-1] += 1\n    elif i[0] == \"G\":\n        matrixG[1][int(i[1])-1] += 1\n    elif i[0] == \"B\":\n        matrixG[2][int(i[1])-1] += 1\n    elif i[0] == \"Y\":\n        matrixG[3][int(i[1])-1] += 1\n    elif i[0] == \"W\":\n        matrixG[4][int(i[1])-1] += 1\n\nfor i in list(powerset(list(range(10)))):\n    matrix = deepcopy(matrixG)\n    color = []\n    value = []\n    for j in i:\n        if j <= 4:\n            color.append(j)\n        else:\n            value.append(j)\n    for v in value:\n        for c in color:\n            matrix[c][v-5] = 0\n        ctr = 0\n        for r in range(5):\n            if matrix[r][v-5] == 0:\n                ctr += 1\n        if ctr == 4:\n            for r in range(5):\n                matrix[r][v-5] = 0\n    for c in color:\n        if matrix[c].count(0) == 4:\n            matrix[c] = [0]*5\n    ctr = 0\n    for k in range(5):\n        for j in range(5):\n            if matrix[k][j] == 0:\n                ctr += 1\n    if ctr == 24:\n        print(len(i))\n        break\n", "input()\n\np = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\n\nprint(min(bin(t).count('1') for t in range(1024) if len({t & q for q in p}) == len(p)))\n\n\n\n\n# Made By Mostafa_Khaled\n", "input()\np={ (1<< 'RGBYW'.index(c)) + (1<<int(k)+4) for c, k in input().split()}\nmn=20\nres=90\nfor i in range(1024):\n    if len(p)==len(set(i&j for j in p)):\n        mn=min(mn,bin(i).count('1'))\nprint(mn)"]