["import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nS = list(map(int, readline().split()))\nS = [0 if s == 0 else 1 if s & 1 else -1 for s in S]\n\nodd = -(-N//2)\neven = N//2\nfor s in S:\n    if s:\n        if s == 1:\n            odd -= 1\n        else:\n            even -= 1\n\ninf = 10**9\ndpe = [[inf]*(odd+1) for _ in range(even+1)]\ndpo = [[inf]*(odd+1) for _ in range(even+1)]\ndpe[0][0] = 0\ndpo[0][0] = 0\n\nfor i in range(N):\n    dp2e = [[inf]*(odd+1) for _ in range(even+1)]\n    dp2o = [[inf]*(odd+1) for _ in range(even+1)]\n    s = S[i]\n    for e in range(even+1):\n        for o in range(odd+1):\n            if s == 1:\n                dp2o[e][o] = min(dp2o[e][o], dpo[e][o], 1+dpe[e][o])\n            elif s == -1:\n                dp2e[e][o] = min(dp2e[e][o], dpe[e][o], 1+dpo[e][o])\n            else:\n                if o < odd:\n                    dp2o[e][o+1] = min(dp2o[e][o+1], dpo[e][o], 1+dpe[e][o])\n                if e < even:\n                    dp2e[e+1][o] = min(dp2e[e+1][o], dpe[e][o], 1+dpo[e][o])\n    dpe = [d[:] for d in dp2e]\n    dpo = [d[:] for d in dp2o]\n\nprint(min(dpe[even][odd], dpo[even][odd]))", "n = int(input())\na = list(map(int, input().split()))\nINF = 10**5\n\ndp = [[[INF]*(n+1) for i in range(n+1)] for i in range(2)]\ndp[0][0][0] = 0\ndp[1][0][0] = 0\n\nfor i in range(n):\n    if a[i] != 0:\n        parity = a[i] % 2\n        if parity % 2 == 0:\n            for j in range(n+1):\n                dp[0][i+1][j] = min(dp[0][i][j], dp[0][i+1][j])\n                dp[0][i+1][j] = min(dp[1][i][j] + 1, dp[0][i+1][j])\n        if parity % 2 == 1:\n            for j in range(n):\n                dp[1][i+1][j+1] = min(dp[1][i][j], dp[1][i+1][j+1])\n                dp[1][i+1][j+1] = min(dp[0][i][j] + 1, dp[1][i+1][j+1])\n    else:\n        for j in range(n+1):\n            dp[0][i+1][j] = min(dp[0][i][j], dp[0][i+1][j])\n            dp[0][i+1][j] = min(dp[1][i][j] + 1, dp[0][i+1][j])\n        for j in range(n):\n            dp[1][i+1][j+1] = min(dp[1][i][j], dp[1][i+1][j+1])\n            dp[1][i+1][j+1] = min(dp[0][i][j] + 1, dp[1][i+1][j+1])\n\nodd_cnt = (n+1) // 2\neven_cnt = n // 2\n\nprint(min(dp[1][n][odd_cnt], dp[0][n][odd_cnt]))\n", "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\nn = int(input())\np = list(map(int, input().split()))\nodd = (n+1)//2\neven = n-odd\nfor i in p:\n    if i:\n        if i%2 == 0:\n            even -= 1\n        else:\n            odd -= 1\n\nif even == 0:\n    p = [i if i else 1 for i in p]\nif odd*even == 0:\n    ans = 0\n    prev = p[0]\n    for pi in p:\n        ans += (pi+prev)%2\n        prev = pi\n    print(ans)\n    return\n\nDP = [[float(\"inf\")]*(even+1) for i in range(2)]\nfor i in range(n):\n    nxt = [[float(\"inf\")]*(even+1) for i in range(2)]\n    if i == 0:\n        if p[i]:\n            if p[i]%2 == 0:\n                nxt[0][0] = 0\n            else:\n                nxt[1][0] = 0\n        else:\n            nxt[0][1] = 0\n            nxt[1][0] = 0\n    else:\n        if p[i]:\n            if p[i]%2 == 0:\n                for j in range(even+1):\n                    nxt[0][j] = min(DP[0][j], DP[1][j]+1)\n            else:\n                for j in range(even+1):\n                    nxt[1][j] = min(DP[0][j]+1, DP[1][j])\n        else:\n            for j in range(1, even+1):\n                nxt[0][j] = min(DP[0][j-1], DP[1][j-1]+1)\n            for j in range(even+1):\n                nxt[1][j] = min(DP[0][j]+1, DP[1][j])\n    DP = nxt\nprint(min(DP[0][-1], DP[1][-1]))\n\n", "import sys\n\ninf = 2 ** 30\n\ndef solution(a):\n    n = len(a)\n    m = ((n + 1) >> 1) - sum([v & 1 for v in a])\n    f = [[[inf for k in range(2)] for j in range(m +1)] for i in range(n + 1)]\n    f[0][0][0], f[0][0][1] = 0, 0\n    for i in range(n):\n        for j in range(min(m, i) + 1):\n            for k in range(2):\n                #sys.stderr.write('f[%d][%d][%d] = %d\\n' % (i, j, k, f[i][j][k]));\n                # fixed\n                if a[i] != 0:\n                    t = a[i] & 1 \n                    w = 1 if t != k else 0\n                    f[i + 1][j][t] = min(f[i][j][k] + w, f[i + 1][j][t])\n                    continue\n                # +1\n                if j < m:\n                    w = 1 if k != 1 else 0\n                    f[i + 1][j + 1][1] = min(f[i][j][k] + w, f[i + 1][j + 1][1])\n                # +0\n                w = 1 if k != 0 else 0\n                f[i + 1][j][0] = min(f[i][j][k] + w, f[i + 1][j][0])\n    return min(f[n][m][0], f[n][m][1])\n\ndef main():\n    while True:\n        try:\n            n = int(input().strip())\n            a = [int(i) for i in input().strip().split()]\n            sys.stdout.write('%d\\n' % solution(a))\n        except ValueError:\n            continue\n        except EOFError:\n            break\n\ndef __starting_point():\n    main()\n__starting_point()"]