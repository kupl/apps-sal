["import sys\nimport copy\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\nC=list(input().strip())\n\ndef JUDGE(C):\n    ANS_one=0\n    ANS_zero=0\n\n    for c in C:\n        if c==\"0\":\n            ANS_zero+=1\n        else:\n            break\n\n    for c in C[::-1]:\n        if c==\"0\":\n            ANS_zero+=1\n        else:\n            break\n\n    for c in C:\n        if c==\"1\":\n            ANS_one+=1\n        else:\n            break\n\n    for c in C[::-1]:\n        if c==\"1\":\n            ANS_one+=1\n        else:\n            break\n\n    if ANS_zero>=n-k or ANS_one>=n-k:\n        return 1\n    else:\n        return 0\n\nif JUDGE(C)==1:\n    print(\"tokitsukaze\")\n    return\n\nif k>=n-1:\n    print(\"quailty\")\n    return\nif k<n/2:\n    print(\"once again\")\n    return\n    \n\nCAN1=copy.copy(C)\nCAN2=copy.copy(C)\n\nif C[0]==\"0\":\n    for i in range(1,k+1):\n        CAN1[i]=\"1\"\nelse:\n    for i in range(1,k+1):\n        CAN1[i]=\"0\"\n\nif C[-1]==\"0\":\n    for i in range(n-1,n-k-1,-1):\n        CAN2[i]=\"1\"\nelse:\n    for i in range(n-2,n-k-2,-1):\n        CAN2[i]=\"0\"\n\nif JUDGE(CAN1)==1 and JUDGE(CAN2)==1:\n    print(\"quailty\")\n    return\nelse:\n    print(\"once again\")\n    return\n    \n    \n    \n", "import sys\n\ndef sum_range(l, r):\n    if r < l: return 0\n    if l == 0: return sum[r]\n    return sum[r] - sum[l - 1]\n\nn, k = map(int, input().split())\n\ncards = input()\n\nsum = [0] * n\nsum[0] = 1 if cards[0] == '1' else 0\nfor i in range(1, n):\n    sum[i] += sum[i - 1]\n    if cards[i] == '1':\n        sum[i] += 1\n\nmin0 = min1 = n\nmax0 = max1 = -1\nfor i in range(0, n):\n    if cards[i] == '1':\n        min1 = min(min1, i)\n        max1 = i\n    else:\n        min0 = min(min0, i)\n        max0 = i\n        \ntoki = False\nqual = True\nfor i in range(0, n - k + 1):\n    if sum_range(0, i - 1) + sum_range(i + k, n - 1) + k == n:\n        toki = True\n    if sum_range(0, i - 1) + sum_range(i + k, n - 1) + 0 == 0:\n        toki = True\n        \n    prefix = sum_range(0, i - 1) == 0\n    suffix = sum_range(i + k, n - 1) == 0\n    if i > 0 and i + k < n and (prefix ^ suffix) == 0:\n        qual = False\n    if i - min0 > k or i - min1 > k or max0 - (i + k - 1) > k or max1 - (i + k - 1) > k:\n        qual = False\n\nif toki == True:\n    print('tokitsukaze')\nelif qual == True:\n    print('quailty')\nelse:\n    print('once again')"]