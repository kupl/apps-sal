["a, b = [int(i) for i in input().split()]\nc, d = [int(i) for i in input().split()]\ne, f = [int(i) for i in input().split()]\nif c+e <=a and max(d,f) <=b:\n    print(\"YES\")\nelif c+e <=b and max(d,f) <=a:\n    print(\"YES\")\nelif c+f <=a and max(d,e) <=b:\n    print(\"YES\")\nelif c+f <=b and max(d,e) <=a:\n    print(\"YES\")\nelif d+e <=a and max(c,f) <=b:\n    print(\"YES\")\nelif d+e <=b and max(c,f) <=a:\n    print(\"YES\")\nelif d+f <=a and max(c,e) <=b:\n    print(\"YES\")\nelif d+f <=b and max(c,e) <=a:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "def check(a1, b1, a2, b2, a3, b3):\n    if a2 + a3 <= a1 and b2 <= b1 and b3 <= b1:\n        return True\n\n    if b2 + b3 <= b1 and a2 <= a1 and a3 <= a1:\n        return True\n\n    return False\n\n\ndef __starting_point():\n    a1, b1 = map(int, input().split())\n    a2, b2 = map(int, input().split())\n    a3, b3 = map(int, input().split())\n\n    if check(a1, b1, a2, b2, a3, b3) or check(a1, b1, b2, a2, a3, b3) or check(a1, b1, a2, b2, b3, a3) or check(a1, b1, b2, a2, b3, a3):\n        print('YES')\n    else:\n        print('NO')\n__starting_point()", "a1, b1 = list(map(int, input().split()))\na2, b2 = list(map(int, input().split()))\na3, b3 = list(map(int, input().split()))\n\nif a1 - a2 - a3 >= 0 and b2 <= b1 and b3 <= b1:\n    print(\"YES\")\nelif a1 - a2 - b3 >= 0 and b2 <= b1 and a3 <= b1:\n    print(\"YES\")\nelif a1 - b2 - a3 >= 0 and a2 <= b1 and b3 <= b1:\n    print(\"YES\")\nelif a1 - b2 - b3 >= 0 and a2 <= b1 and a3 <= b1:\n    print(\"YES\")\nelif b1 - a2 - a3 >= 0 and b2 <= a1 and b3 <= a1:\n    print(\"YES\")\nelif b1 - a2 - b3 >= 0 and b2 <= a1 and a3 <= a1:\n    print(\"YES\")\nelif b1 - b2 - a3 >= 0 and a2 <= a1 and b3 <= a1:\n    print(\"YES\")\nelif b1 - b2 - b3 >= 0 and a2 <= a1 and a3 <= a1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "def ok( a , b , A , B ):\n\n    return ( a <= A and b <= B ) or ( a <= B and b <= A )\n\ndef __starting_point():\n    \n    A , B = [int(x) for x in input().split()]\n    a1 , b1 = [int(x) for x in input().split()]\n    a2 , b2 = [int(x) for x in input().split()]\n\n    if ok( a1 + a2 , max(b1,b2) , A , B ):\n        print(\"YES\")\n    elif ok( a1 + b2 , max(b1,a2) , A , B ):\n        print(\"YES\")\n    elif ok( b1 + a2 , max(a1,b2) , A , B ):\n        print(\"YES\")\n    elif ok( b1 + b2 , max(a1,a2) , A , B ):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n__starting_point()", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef test(size_x, size_y, x1, y1, x2, y2):\n    if x1+x2 <= size_x and y1 <= size_y and y2 <= size_y:\n        return 1\n    return 0\n\nimport time\n\n(A, B) = (int(i) for i in input().split())\n(a1, b1) = (int(i) for i in input().split())\n(a2, b2) = (int(i) for i in input().split())\n\nstart = time.time()\nans   = 0\n\nans += test(A, B, a1, b1, a2, b2)\nans += test(A, B, a1, b1, b2, a2)\nans += test(A, B, b1, a1, a2, b2)\nans += test(A, B, b1, a1, b2, a2)\n\nans += test(B, A, a1, b1, a2, b2)\nans += test(B, A, a1, b1, b2, a2)\nans += test(B, A, b1, a1, a2, b2)\nans += test(B, A, b1, a1, b2, a2)\n\nif ans > 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\nfinish = time.time()\n#print(finish - start)\n", "r=lambda: map(int, input().split())\n\na1,b1=r()\na2,b2=r()\na3,b3=r()\n\nans = \"NO\"\nfor (a1,b1) in [(a1,b1), (b1,a1)]:\n    for (a2,b2) in [(a2,b2), (b2,a2)]:\n        for (a3,b3) in [(a3,b3), (b3,a3)]:\n            if a1 >= a2 + a3 and b1 >= max(b2, b3):\n                ans = \"YES\"\n\nprint(ans)", "a = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\na.sort()\nfor i in range(2):\n    for j in range(2):\n        if min(b[i] + c[j], max(b[1 - i], c[1 - j])) <= a[0] and max((b[i] + c[j],  max(b[1 - i], c[1 - j]))) <= a[1]:\n            print(\"YES\")\n            return\n        #print(b[i] + c[j], max(b[1 - i], c[1 - j]))\nprint(\"NO\")\n            \n", "a, b = (int(x) for x in input().split())\na1, b1 = (int(x) for x in input().split())\na2, b2 = (int(x) for x in input().split())\n\nif ((max(a1,a2) <= a and b1+b2 <= b) or (max(a1,a2) <= b and b1+b2 <= a) or \n\t(max(b1,b2) <= a and a1+a2 <= b) or (max(b1,b2) <= b and a1+a2 <= a) or \n\t(max(b1,a2) <= a and b2+a1 <= b) or (max(b1,a2) <= b and b2+a1 <= a) or \n\t(max(b2,a1) <= a and b1+a2 <= b) or (max(b2,a1) <= b and b1+a2 <= a)):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "def Check(a2, b2, a3, b3):\n    if a1 >= a2 + a3 and b1 >= max(b2, b3) or \\\n       a1 >= max(a2, a3) and b1 >= b2 + b3:\n        return True\n    else:\n        return False\n\na1, b1 = list(map(int, input().split()))\na2, b2 = list(map(int, input().split()))\na3, b3 = list(map(int, input().split()))\na1, b1 = min(a1, b1), max(a1, b1)\na2, b2 = min(a2, b2), max(a2, b2)\na3, b3 = min(a3, b3), max(a3, b3)\n\nr = Check(a2, b2, a3, b3) or \\\n    Check(a2, b2, b3, a3) or \\\n    Check(b2, a2, a3, b3) or \\\n    Check(b2, a2, b3, a3)\nif r:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "#\u041a\u041e\u0414\u0424\u041e\u0420\u0421\u042b, \u0423\u0420\u0410\na1, b1 = list(map(int, input().split()))\na2, b2 = list(map(int, input().split()))\na3, b3 = list(map(int, input().split()))\nans = '' \nif (a1 > b1):\n    a1, b1 = b1, a1\nif (a2 > b2):\n    a2, b2 = b2, a2\nif (a3 > b3):\n    a3, b3 = b3, a3\nans = 0\nif (a2 + a3 <= a1) and (max(b2, b3) <= b1):\n    ans += 1\nif (a2 + b3 <= a1) and (max(b2, a3) <= b1):\n    ans += 1\nif (a3 + b2 <= a1) and (max(a2, b3) <= b1):\n    ans += 1\nif (b2 + b3 <= a1) and (max(a2, a3) <= b1):\n    ans += 1\nif (a2 + a3 <= b1) and (max(b2, b3) <= a1):\n    ans += 1\nif (a2 + b3 <= b1) and (max(b2, a3) <= a1):\n    ans += 1\nif (a3 + b2 <= b1) and (max(a2, b3) <= a1):\n    ans += 1\nif (b2 + b3 <= b1) and (max(a2, a3) <= a1):\n    ans += 1    \nif (ans == 0):\n    print('NO')\nelse:\n    print('YES')", "# mukulchandel\na1,b1=list(map(int,input().split()))\na2,b2=list(map(int,input().split()))\na3,b3=list(map(int,input().split()))\nif a1>=(a2+a3) and b1>=max(b2,b3):\n    print(\"YES\")\nelif a1>=(a2+b3) and b1>=max(b2,a3):\n    print(\"YES\")\nelif a1>=(b2+a3) and b1>=max(a2,b3):\n    print(\"YES\")\nelif a1>=(b2+b3) and b1>=max(a2,a3):\n    print(\"YES\")\nelif b1>=(a2+a3) and a1>=max(b2,b3):\n    print(\"YES\")\nelif b1>=(a2+b3) and a1>=max(b2,a3):\n    print(\"YES\")\nelif b1>=(b2+a3) and a1>=max(a2,b3):\n    print(\"YES\")\nelif b1>=(b2+b3) and a1>=max(a2,a3):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "#!/usr/bin/env python\n# 560B_art.py - Codeforces.com 560B Art program\n#\n# Copyright (C) 2015 Sergey\n\n\"\"\"\nGerald asks whether it is possible to place the paintings on the board,\nor is the board he bought not large enough?\nInput\n\nThe first line contains two space-separated numbers a1 and b1 the sides\nof the board. Next two lines contain numbers a2 b2 a3 and b3 the sides\nof the paintings. All numbers ai,?bi in the input are integers and fit into\nthe range from 1 to 1000.\n\nOutput\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes),\nand if they cannot, print \"NO\" (without the quotes).\n\"\"\"\n\n# Standard modules\nimport unittest\nimport sys\n\n# Additional modules\n\n\n###############################################################################\n# Art Class\n###############################################################################\n\n\nclass Art:\n    \"\"\" Art representation \"\"\"\n\n    def __init__(self, args):\n        \"\"\" Default constructor \"\"\"\n\n        self.numa, self.numb = args\n\n        self.r = self.rect(self.numa[0], self.numb[0])\n        self.rmax = self.rect(self.numa[1], self.numb[1])\n        self.rmin = self.rect(self.numa[2], self.numb[2])\n        if self.rmax[0] < self.rmax[1]:\n            self.rmax, self.rmin = self.rmin, self.rmax\n\n        self.remain = []\n        if self.rmax[0] < self.r[0] and self.rmax[1] <= self.r[1]:\n            self.remain.append((self.r[0] - self.rmax[0], self.r[1]))\n        if self.rmax[1] < self.r[1] and self.rmax[0] <= self.r[0]:\n            self.remain.append((self.r[0], self.r[1] - self.rmax[1]))\n\n        if self.rmax[1] < self.r[0] and self.rmax[0] <= self.r[1]:\n            self.remain.append((self.r[0] - self.rmax[1], self.r[1]))\n        if self.rmax[0] < self.r[1] and self.rmax[1] <= self.r[0]:\n            self.remain.append((self.r[0], self.r[1] - self.rmax[0]))\n\n    def rect(self, a, b):\n        if a > b:\n            return (a, b)\n        else:\n            return (b, a)\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        for rec in self.remain:\n            if self.rmin[0] <= rec[0] and self.rmin[1] <= rec[1]:\n                return \"YES\"\n            if self.rmin[1] <= rec[0] and self.rmin[0] <= rec[1]:\n                return \"YES\"\n        return \"NO\"\n\n\n###############################################################################\n# Helping classes\n###############################################################################\n\n\n###############################################################################\n# Art Class testing wrapper code\n###############################################################################\n\n\ndef get_inputs(test_inputs=None):\n\n    it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n    def uinput():\n        \"\"\" Unit-testable input function wrapper \"\"\"\n        if it:\n            return next(it)\n        else:\n            return sys.stdin.readline()\n\n    # Getting string inputs. Place all uinput() calls here\n    imax = 3\n    numnums = list(map(int, \" \".join(uinput() for i in range(imax)).split()))\n\n    # Splitting numnums into n arrays\n    numa = []\n    numb = []\n    for i in range(0, 2*imax, 2):\n        numa.append(numnums[i])\n        numb.append(numnums[i+1])\n\n    # Decoding inputs into a list\n    return [numa, numb]\n\n\ndef calculate(test_inputs=None):\n    \"\"\" Base class calculate method wrapper \"\"\"\n    return Art(get_inputs(test_inputs)).calculate()\n\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_Art_class__basic_functions(self):\n        \"\"\" Art class basic functions testing \"\"\"\n\n        # Constructor test\n        d = Art([[3, 1, 2], [2, 3, 1]])\n        self.assertEqual(d.numa[0], 3)\n\n        self.assertEqual(d.r, (3, 2))\n        self.assertEqual(d.rmax, (3, 1))\n        self.assertEqual(d.rmin, (2, 1))\n\n        self.assertEqual(d.remain, [(3, 1)])\n\n    def test_sample_tests(self):\n        \"\"\" Quiz sample tests. Add \\n to separate lines \"\"\"\n\n        # Sample test 1\n        test = \"3 2\\n1 3\\n2 1\"\n        self.assertEqual(calculate(test), \"YES\")\n        self.assertEqual(list(get_inputs(test)[0]), [3, 1, 2])\n        self.assertEqual(list(get_inputs(test)[1]), [2, 3, 1])\n\n        # Sample test 2\n        test = \"5 5\\n3 3\\n3 3\"\n        self.assertEqual(calculate(test), \"NO\")\n\n        # Sample test 3\n        test = \"4 2\\n2 3\\n1 2\"\n        self.assertEqual(calculate(test), \"YES\")\n\n        # My test 4\n        test = \"5 5\\n1 5\\n1 5\"\n        self.assertEqual(calculate(test), \"YES\")\n\n    def test_time_limit_test(self):\n        \"\"\" Quiz time limit test \"\"\"\n\n        import random\n\n        # Time limit test\n        test = \"1000 1000\"\n        test += \"\\n900 900\"\n        test += \"\\n50 50\"\n\n        import timeit\n\n        start = timeit.default_timer()\n        args = get_inputs(test)\n\n        init = timeit.default_timer()\n        d = Art(args)\n\n        calc = timeit.default_timer()\n        d.calculate()\n\n        stop = timeit.default_timer()\n        print((\n            \"\\nTime Test: \" +\n            \"{0:.3f}s (inp {1:.3f}s init {2:.3f}s calc {3:.3f}s)\".\n            format(stop-start, init-start, calc-init, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(calculate())\n\n__starting_point()", "a1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\na3, b3 = map(int, input().split())\n\nif (max(a2, a3) <= a1 and b2 + b3 <= b1) or \\\n   (max(a2, b3) <= a1 and b2 + a3 <= b1) or \\\n   (max(b2, a3) <= a1 and a2 + b3 <= b1) or \\\n   (max(b2, b3) <= a1 and a2 + a3 <= b1) or \\\n   (a2 + a3 <= a1 and max(b2, b3) <= b1) or \\\n   (a2 + b3 <= a1 and max(b2, a3) <= b1) or \\\n   (b2 + a3 <= a1 and max(a2, b3) <= b1) or \\\n   (b2 + b3 <= a1 and max(a2, a3) <= b1):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "r = lambda: input()\nri = lambda: int(r())\nrr = lambda: map(int, r().split())\nrl = lambda: list(rr())\n\na1, b1 = rr()\na2, b2 = rr()\na3, b3 = rr()\n\ndef f(x, y):\n    fa = x <= a1 and y <= b1\n    fb = x <= b1 and y <= a1\n    return fa or fb\n\nf1 = f(max(b2, b3), a2 + a3)\nf2 = f(max(a2, a3), b2 + b3)\nf3 = f(max(a2, b3), b2 + a3)\nf4 = f(max(b2, a3), a2 + b3)\n\nans = f1 or f2 or f3 or f4\nprint('YES' if ans else 'NO')", "x, y = map(int, input().split(\" \"))\na2, b2 = map(int, input().split(\" \"))\na3, b3 = map(int, input().split(\" \"))\n\nif (x>= a2+a3 and y >= b2 and y>= b3) or (x>= b2+b3 and y>= a2 and y>= a3) or (x >= a2+b3 and y >= a3 and y>= b2) or (x>=a3+b2 and y >= a2 and y >= b3) or (y>= a2+a3 and x >= b2 and x>= b3) or (y>= b2+b3 and x>= a2 and x>= a3) or (y >= a2+b3 and x >= a3 and x>= b2) or (y>=a3+b2 and x>= a2 and x >= b3):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "a1, b1 = list(map(int, input().split()))\na2, b2 = list(map(int, input().split()))\na3, b3 = list(map(int, input().split()))\n\nif a2+b3<=b1:\n    if max(a3,b2)<=a1:\n        print(\"YES\")\n        return\nif a2+b3<=a1:\n    if max(a3,b2)<=b1:\n        print(\"YES\")\n        return\n\nif a2+a3<=b1:\n    if max(b2,b3)<=a1:\n        print(\"YES\")\n        return\nif a2+a3<=a1:\n    if max(b2,b3)<=b1:\n        print(\"YES\")\n        return\nif b2+a3<=a1:\n    if max(a2,b3)<=b1:\n        print(\"YES\")\n        return\nif b2+a3<=b1:\n    if max(a2,b3)<=a1:\n        print(\"YES\")\n        return\nif b2+b3<=a1:\n    if max(a2,a3)<=b1:\n        print(\"YES\")\n        return\nif b2+b3<=b1:\n    if max(a2,a3)<=a1:\n        print(\"YES\")\n        return\nprint(\"NO\")\n", "a, b = map(int, input().split())\na1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\n\nflag = False\n\nx = a1 + a2\nbigger = max([b1, b2])\nif x <= a:\n\tif bigger <= b:\n\t\tflag = True\nif x <= b:\n\tif bigger <= a:\n\t\tflag = True\n\nx = a1 + b2\nbigger = max([b1, a1])\nif x <= a:\n\tif bigger <= b:\n\t\tflag = True\nif x <= b:\n\tif bigger <= a:\n\t\tflag = True\n\nx = b1 + b2\nbigger = max([a1, a2])\nif x <= a:\n\tif bigger <= b:\n\t\tflag = True\nif x <= b:\n\tif bigger <= a:\n\t\tflag = True\n\nx = b1 + a2\nbigger = max([a1, b2])\nif x <= a:\n\tif bigger <= b:\n\t\tflag = True\nif x <= b:\n\tif bigger <= a:\n\t\tflag = True\n\n\nif flag:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "def main():\n\ta, b = list(map(int, input().split()))\n\tobj = [None, None]\n\tobj[0] = list(map(int, input().split()))\n\tobj[1] = list(map(int, input().split()))\n\n\t#portrait\n\tdef vlezet(a, b, i, j, sx, sy):\n\t\treturn (i + sx <= a) and (j + sy <= b)\n\n\n\tif vlezet(a, b, 0, 0, *obj[0]):\n\t\tx = obj[0][0]\n\t\ty = obj[0][1]\n\t\tif vlezet(a, b, x, 0, *obj[1]) or vlezet(a, b, x, 0, obj[1][1], obj[1][0]):\n\t\t\tprint('YES')\n\t\t\treturn 0\n\t\telif vlezet(a, b, 0, y, *obj[1]) or vlezet(a, b, 0, y, obj[1][1], obj[1][0]):\n\t\t\tprint('YES')\n\t\t\treturn 0\n\n\n\tobj[0][1], obj[0][0] = obj[0][0], obj[0][1]\n\tif vlezet(a, b, 0, 0, *obj[0]):\n\t\tx = obj[0][0]\n\t\ty = obj[0][1]\n\t\tif vlezet(a, b, x, 0, *obj[1]) or vlezet(a, b, x, 0, obj[1][1], obj[1][0]):\n\t\t\tprint('YES')\n\t\t\treturn 0\n\t\telif vlezet(a, b, 0, y, *obj[1]) or vlezet(a, b, 0, y, obj[1][1], obj[1][0]):\n\t\t\tprint('YES')\n\t\t\treturn 0\n\tprint('NO')\n\treturn 0\n\nmain()\n\n", "def fitVertical( A , B ):\n\tif( B[ 0 ] <= A[ 0 ] and B[ 1 ] <= A[ 1 ] ):\n\t\treturn [ A[ 0 ] - B[ 0 ] , A[ 1 ] - B[ 1 ] ]\n\treturn [ -1 , -1 ]\n\ndef fitHorizontal( A , B ):\n\tif( B[ 1 ] <= A[ 0 ] and B[ 0 ] <= A[ 1 ] ):\n\t\treturn [ A[ 0 ] - B[ 1 ] , A[ 1 ] - B[ 0 ] ]\n\treturn [ -1 , -1 ]\n\nA = input().split()\nB = input().split()\nC = input().split()\n\nA = [ int(x) for x in A ]\nB = [ int(x) for x in B ]\nC = [ int(x) for x in C ]\n\nD = fitVertical( A , B )\n\nif( D[ 0 ] != -1 ):\n\t\n\tif( fitVertical( [ D[ 0 ] , A[ 1 ] ] , C )[ 0 ] != -1 or fitHorizontal( [ D[ 0 ] , A[ 1 ] ] , C )[ 0 ] != -1 ):\n\t\tprint( \"YES\" )\n\t\treturn\n\n\n\tif( fitVertical( [ D[ 1 ] , A[ 0 ] ] , C )[ 0 ] != -1 or fitHorizontal( [ D[ 1 ] , A[ 0 ] ] , C )[ 0 ] != -1 ):\n\t\tprint( \"YES\" )\n\t\treturn\n\nD = fitHorizontal( A , B )\n\nif( D[ 0 ] != -1 ):\n\n\tif( fitVertical( [ D[ 0 ] , A[ 1 ] ] , C )[ 0 ] != -1 or fitHorizontal( [ D[ 0 ] , A[ 1 ] ] , C )[ 0 ] != -1 ):\n\t\tprint( \"YES\" )\n\t\treturn\n\n\tif( fitVertical( [ D[ 1 ] , A[ 0 ] ] , C )[ 0 ] != -1 or fitHorizontal( [ D[ 1 ] , A[ 0 ] ] , C )[ 0 ] != -1 ):\n\t\tprint( \"YES\" )\n\t\treturn\n\nprint( \"NO\" )\n\n\n\n", "def solve(cnt,f1,f2,f3,nowx,nowy,cur):\n    if nowx<0 or nowy<0 or cur<0:\n        return False\n    if f1==1 and f2==1 and f3==1:\n        return True\n    else:\n        if f1!=1:\n            return solve(cnt+1,1,0,0,a,b,cur)or solve(cnt+1,1,0,0,b,a,cur)\n        if f2!=1:\n            return solve(cnt+1,1,1,0,nowx-a1,nowy,nowy-b1)or solve(cnt+1,1,1,0,nowx-b1,nowy,nowy-a1)\n        if f3!=1:\n            return solve(cnt+1,1,1,1,nowx-a2,nowy,nowy-b2)or solve(cnt+1,1,1,1,nowx-b2,nowy,nowy-a2)\na,b=map(int,input().split())\na1,b1=map(int,input().split())\na2,b2=map(int,input().split())\nif solve(0,0,0,0,0,0,0):\n    print(\"YES\")    \nelse:\n    print(\"NO\")", "# zadacha B\na, b = list(map(int, input().split()))\nk1, k2 = list(map(int, input().split()))\nk3, k4 = list(map(int, input().split()))\n\nif (k1 + k3 <= a and (k2 <= b and k4 <= b)) or (k1 + k3 <= b and (k2 <= a and k4 <= a)) or (\n                    k1 + k4 <= a and (k2 <= b and k4 <= b)) or (k1 + k4 <= b and (k2 <= a and k4 <= a)) or (\n                    k2 + k4 <= a and (k1 <= b and k3 <= b)) or (\n                    k2 + k4 <= b and (k1 <= a and k3 <= a)) or (k1 + k4 <= a and (k2 <= b and k3 <= b)) or (\n            k1 + k4 <= b and (k2 <= a and k3 <= a)) or (k2 + k3 <= a and (k1 <= b and k4 <= b)) or (\n            k2 + k3 <= b and (k1 <= a and k4 <= a)):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "a1,b1=map(int,input().split())\na2,b2=map(int,input().split())\na3,b3=map(int,input().split())\nif a2+a3<=a1 and max(b2,b3)<=b1: print('YES')\nelif b2+b3<=b1 and max(a2,a3)<=a1: print('YES')\nelif a2+a3<=b1 and max(b2,b3)<=a1: print('YES')\nelif b2+b3<=a1 and max(a2,a3)<=b1: print('YES')\nelif a2+b3<=b1 and max(b2,a3)<=a1: print('YES')\nelif a2+b3<=a1 and max(b2,a3)<=b1: print('YES')\nelif b2+a3<=b1 and max(a2,b3)<=a1: print('YES')\nelif b2+a3<=a1 and max(a2,b3)<=b1: print('YES')\nelse: print('NO')", "n, m = [int(x) for x in input().split()]\nn, m = sorted([n, m])\nx1, y1 = [int(x) for x in input().split()]\nx2, y2 = [int(x) for x in input().split()]\nif (y1 + y2 <= m) and (max(x1, x2) <= n):\n    print(\"YES\")\nelif (max(y1, y2) <= m) and (x1 + x2 <= n):\n    print(\"YES\")\nelif (y1 + x2 <= m) and (max(x1, y2) <= n):\n    print(\"YES\")\nelif (max(y1, x2) <= m) and (x1 + y2 <= n):\n    print(\"YES\")\nelif (x1 + y2 <= m) and (max(y1, x2) <= n):\n    print(\"YES\")\nelif (max(x1, y2) <= m) and (y1 + x2 <= n):\n    print(\"YES\")\nelif (y1 + y2 <= n) and (max(x1, x2) <= m):\n    print(\"YES\")\nelif (max(y1, y2) <= n) and (x1 + x2 <= m):\n    print(\"YES\")\nelse:\n    #print(x1+x2, y1+y2)\n    #print(x1+y2, y1+x2)\n    print(\"NO\")", "a1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\na3, b3 = map(int, input().split())\n\nif a1 < b1:\n    a1, b1 = b1, a1\n\nif max([a2, b2, a3, b3]) > a1:\n    print('NO')\nelse:\n    if (a2 + a3 <= a1) and (max(b2, b3) <= b1):\n        print('YES')\n    elif (a2 + b3 <= a1) and (max(b2, a3) <= b1):\n        print('YES')\n    elif (b2 + a3 <= a1) and (max(a2, b3) <= b1):\n        print('YES')\n    elif (b2 + b3 <= a1) and (max(a2, a3) <= b1):\n        print('YES')\n    elif (a2 + a3 <= b1) and (max(b2, b2) <= a1):\n        print('YES')\n    elif (a2 + b3 <= b1) and (max(b2, a3) <= a1):\n        print('YES')\n    elif (b2 + a3 <= b1) and (max(a2, b3) <= a1):\n        print('YES')\n    elif (b2 + b3 <= b1) and (max(a2, a3) <= a1):\n        print('YES')\n    else:\n        print('NO')"]