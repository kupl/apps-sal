["n=int(input())\na=[];b=[];c=[];d=[]\nfor i in range(n):\n    opt,num=[int(x) for x in input().split()]\n    if opt==0:\n        a.append(num)\n    if opt==10:\n        b.append(num)\n    if opt==1:\n        c.append(num)\n    if opt==11:\n        d.append(num)\nans=0\nans+=sum(d)\nb.sort(reverse=True)\nc.sort(reverse=True)\nif len(b)<len(c):\n    ans+=sum(b)+sum(c[0:len(b)])\n    a.extend(c[len(b):])\nelse:\n    ans+=sum(c)+sum(b[0:len(c)])\n    a.extend(b[len(c):])\na.sort(reverse=True)\nans+=sum(a[0:len(d)])\nprint(ans)", "import math as ma\nimport sys\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n\treturn list(map(int , input().split()))\n\ndef num():\n\treturn list(map(int , input().split()))\n\ndef nu():\n\treturn int(input())\n\ndef find_gcd(x , y):\n\twhile (y):\n\t\tx , y = y , x % y\n\treturn x\n\nn=nu()\nal=[]\nbo=[]\nto=[]\nze=[]\nfor i in range(n):\n\tx,y=input().split()\n\tif(x==\"00\"):\n\t\tze.append(int(y))\n\tif(x==\"11\"):\n\t\tto.append(int(y))\n\tif (x == \"10\"):\n\t\tal.append(int(y))\n\tif (x == \"01\"):\n\t\tbo.append(int(y))\nal.sort(reverse=True)\nbo.sort(reverse=True)\nto.sort(reverse=True)\nze.sort(reverse=True)\nzz=0\nif(len(al)<=len(bo)):\n\tzz=sum(al)+sum(bo[0:len(al)])\n\tgh=bo[len(al):]+ze\n\tzz=zz+sum(to)\n\tgh.sort(reverse=True)\n\tcc=0\n\tfor i in range(len(gh)):\n\t\tif(cc==len(to)):\n\t\t\tbreak\n\t\tzz+=gh[i]\n\t\tcc+=1\n\tprint(zz)\nelse:\n\tzz = sum(bo) + sum(al[0:len(bo)])\n\tgh = al[len(bo):] + ze\n\tzz = zz + sum(to)\n\tgh.sort(reverse=True)\n\tcc = 0\n\tfor i in range(len(gh)):\n\t\tif (cc == len(to)):\n\t\t\tbreak\n\t\tzz += gh[i]\n\t\tcc += 1\n\tprint(zz)\n", "def fun(c):\n\treturn c[0];\n\ndef f(a,b,alice,bob,un,n,check):\n\tinf = 0;\n\tif n-a <= a:\n\t\tinf = 0;\n\t\tfor i in range(n):\n\t\t\tinf += int(inp[i][1]);\n\telse:\n\t\t#print(\"alice\")\n\t\t#print(*alice)\n\t\t#print(\"bob\")\n\t\t#print(*bob);\n\t\t#print(\"un\")\n\t\t#print(*un)\n\n\t\t#print(\"H\")\n\t\ttempb = 0;\n\t\tj=0;\n\t\tfor i in range(a):\n\t\t\tinf += alice[i][0];\n\t\t\td[alice[i][1]] = 1;\n\t\t\tif who[alice[i][1]][check]==\"1\":\n\t\t\t\ttempb+=1;\n\t\t\tj+=1;\n\t\ti=0;\n\t\t#print(\"inf\",inf,\"j\",j,\"tempb\",tempb)\n\t\t#print(\"d\",d)\n\t\twhile(i<b and tempb < a):\n\t\t\tif d[bob[i][1]]==0:\n\t\t\t\t#(bob[i])\n\t\t\t\tinf+=bob[i][0];\n\t\t\t\ttempb+=1\n\t\t\t\tj+=1;\n\t\t\ti+=1;\n\t\t#print(inf,j)\n\t\tif j < 2*a:\n\t\t\tk = 0;\n\t\t\tunn = len(un);\n\t\t\t#print(i)\n\t\t\twhile( j < 2*a and i < b and k < unn):\n\t\t\t\tif ( i < b and k <unn):\n\t\t\t\t\tif (d[bob[i][1]]==1):\n\t\t\t\t\t\ti+=1;\n\t\t\t\t\telse:\n\t\t\t\t\t\t#print(bob[i][0],un[k][0])\n\t\t\t\t\t\tif (bob[i][0] > un[k][0]):\n\t\t\t\t\t\t\tinf+=bob[i][0];\n\t\t\t\t\t\t\ti+=1;\n\t\t\t\t\t\t\tj+=1;\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tinf+=un[k][0];\n\t\t\t\t\t\t\tk+=1;\n\t\t\t\t\t\t\tj+=1;\n\t\t\t\n\t\t\twhile(j<2*a and i<b):\n\t\t\t\tif (d[bob[i][1]]==1):\n\t\t\t\t\t\ti+=1;\n\t\t\t\telse:\n\t\t\t\t\tinf+=bob[i][0];\n\t\t\t\t\ti+=1;\n\t\t\t\t\tj+=1;\n\t\t\twhile(j<2*a and k<unn):\n\t\t\t\tinf+=un[k][0];\n\t\t\t\tk+=1;\n\t\t\t\tj+=1;\n\tprint(inf);\n\nn = int(input())\nd= {};\nwho = {};\ninp = [];\na = 0;\nb = 0;\nalice = [];\nbob = [];\nun = [];\nfor i in range(n):\n\tt = input().split();\n\tif t[0][0] ==\"1\":\n\t\ta += 1;\n\t\ttemp = [int(t[1]),i];\n\t\td[i] = 0;\n\t\talice.append(temp)\n\tif t[0][1] ==\"1\":\n\t\tb+=1;\n\t\ttemp = [int(t[1]),i];\n\t\tbob.append(temp)\n\t\td[i]=0;\n\tif t[0][1] == t[0][0] and t[0][0]==\"0\":\n\t\ttemp = [int(t[1]),i];\n\t\tun.append(temp);\n\twho[i] = t[0];\n\tinp.append(t)\n\nalice.sort(key=fun,reverse=True);\nbob.sort(key=fun,reverse=True);\nun.sort(key=fun,reverse=True);\n#print(*alice);\n#print(*bob);\n#print(*un)\ninf = 0;\n\nif a < b:\n\tf(a,b,alice,bob,un,n,1);\nelse:\n\t#print(\"YO\")\n\tf(b,a,bob,alice,un,n,0);\n\n\n\n\n\n\n\n", "n=int(input())\nsu0=[]\nsu1=[]\nsu00=[]\nsu11=[]\nans=0\nfor i in range(n):\n\tsup,val=map(int,input().split())\n\tif(sup==00):\n\t\tsu00.append(val)\n\telif(sup==11):\n\t\tsu11.append(val)\n\telif(sup==1):\n\t\tsu0.append(val)\n\telse:\n\t\tsu1.append(val)\nsu0.sort()\nsu1.sort()\nsu11.sort()\nsu00.sort()\nwhile(len(su1)!=0 and len(su0)!=0):\n\tans+=su1[len(su1)-1]+su0[len(su0)-1]\n\tsu1.pop()\n\tsu0.pop()\nwhile(len(su11)!=0 and len(su00)!=0):\n\tif(len(su1)!=0):\n\t\tk=1\n\telif(len(su0)!=0):\n\t\tk=0\n\telse:\n\t\tk=2\n\tif(k==0):\n\t\tif(su00[len(su00)-1]>su0[len(su0)-1]):\n\t\t\tans+=su11[len(su11)-1]+su00[len(su00)-1]\n\t\t\tsu11.pop()\n\t\t\tsu00.pop()\n\t\telse:\n\t\t\tans+=su11[len(su11)-1]+su0[len(su0)-1]\n\t\t\tsu11.pop()\n\t\t\tsu0.pop()\n\telif(k==1):\n\t\tif(su00[len(su00)-1]>su1[len(su1)-1]):\n\t\t\tans+=su11[len(su11)-1]+su00[len(su00)-1]\n\t\t\tsu11.pop()\n\t\t\tsu00.pop()\n\t\telse:\n\t\t\tans+=su11[len(su11)-1]+su1[len(su1)-1]\n\t\t\tsu11.pop()\n\t\t\tsu1.pop()\n\telse:\n\t\tans+=su11[len(su11)-1]+su00[len(su00)-1]\n\t\tsu11.pop()\n\t\tsu00.pop()\nwhile(len(su11)!=0):\n\tif(len(su1)!=0):\n\t\tk=1\n\telif(len(su0)!=0):\n\t\tk=0\n\telse:\n\t\tk=2\n\tif(k==0):\n\t\tans+=su11[len(su11)-1]+su0[len(su0)-1]\n\t\tsu11.pop()\n\t\tsu0.pop()\n\telif(k==1):\n\t\tans+=su11[len(su11)-1]+su1[len(su1)-1]\n\t\tsu11.pop()\n\t\tsu1.pop()\n\telse:\n\t\tans+=su11[len(su11)-1]\n\t\tsu11.pop()\nprint(ans)", "from math import *\nn=int(input())\narr=[]\ncount1=0\ncount2=0\nans=0\nfor i in range(n):\n    a,b=map(str,input().split())\n    b=int(b)\n    arr.append((b,a))\n    if(arr[i][1]=='10'):\n        count1+=1\n    elif(arr[i][1]=='01'):\n        count2+=1\n    elif(arr[i][1]=='11'):\n        count1+=1\n        count2+=1\n    ans+=arr[i][0]\narr.sort(reverse=True)\ni=n-1\nflag=0\nsize=n\nminval=min(count1,count2)\nwhile(i>=0 and (count1<ceil(size/2) or count2<ceil(size/2))):\n    if(arr[i][1]=='00'):\n        ans-=arr[i][0]\n        size-=1\n    elif(arr[i][1]=='10'):\n        if(count1>minval):\n            ans-=arr[i][0]\n            count1-=1\n            size-=1\n    elif(arr[i][1]=='01'):\n        if(count2>minval):\n            ans-=arr[i][0]\n            count2-=1\n            size-=1\n    #print(size,count1,count2,ans)\n    i-=1\nif(i==0 and (count1<ceil(size/2) or count2<ceil(size/2))):\n    print(0)\nelse:\n    print(ans)", "\nn = int(input())\n#00 = 0, 01 = 1, 10 = 2, 11 = 3\ntonumber = {'00':0, '01':1, '10':2, '11':3}\npeople = [[], [], [], []]\nfor i in range(n):\n    s, a = input().split()\n    s, a = tonumber[s], int(a)\n    people[s].append(a)\npeople[0].sort(reverse = True)\npeople[1].sort(reverse = True)\npeople[2].sort(reverse = True)\n#print(people)\ntotalInfluence = sum(people[3])\ntotalPeople = len(people[3])\nsupport = [len(people[3]), len(people[3])]\nminLen = min(len(people[1]), len(people[2]))\nfor i in range(minLen):\n    totalInfluence += people[1][i] + people[2][i]\n    totalPeople += 2\n    support[0] += 1\n    support[1] += 1\nlonger = 0\nlongerIndex = 2\nif minLen == len(people[1]):\n    longer = 0\n    longerIndex = 2\nelse:\n    longer = 1\n    longerIndex = 1\nindices = [0, minLen]\nallEmpty = [len(people[0]), len(people[longerIndex])]\n#print(longer, longerIndex, minLen, indices, allEmpty)\nwhile indices != allEmpty:\n    top = [-1, -1]\n    if indices[0] != allEmpty[0]:\n       top[0] = people[0][indices[0]]\n    if indices[1] != allEmpty[1]:\n       top[1] = people[longerIndex][indices[1]]\n    if top[0] > top[1]:\n        if support[longer] >= (totalPeople + 1) / 2 and support[not longer] >= (totalPeople + 1) / 2:\n            #print(str(support[longer]) + ' ' +  str((totalPeople + 1) / 2) + ';' + str(support[not longer]) + ' ' +  str((totalPeople + 1) / 2))\n            totalInfluence += top[0]\n            totalPeople += 1\n            indices[0] += 1\n        else:\n            indices[0] += 1\n    else:\n        if support[not longer] >= (totalPeople + 1) / 2:\n            totalInfluence += top[1]\n            totalPeople += 1\n            support[longer] += 1\n            indices[1] += 1\n        else:\n            indices[1] += 1\n    #print(top, support, totalInfluence, totalPeople)\n\nif totalPeople != 0:\n    print(totalInfluence)\nelse:\n    print(0)\n", "from math import ceil\nn, A = int(input()), []\na = b = ab = ab_ = ans = 0\nfor _ in range(n):\n    t, tt = input().split()\n    tt = int(tt)\n    if t != '11':\n        A.append([t, tt])\n        if t == '10':\n            a += 1\n        elif t == '01':\n            b += 1\n        else:\n            ab_ += 1\n    else:\n        ans += tt\n        ab += 1\nA.sort(reverse=True, key=lambda x: x[1])\nx = y = t = ttt = ab\nk, j = a, b\nfor i in A:\n    if i[0] == '10' and (j or ttt):\n        ans += i[1]\n        t += 1\n        x += 1\n        if j == 0 and ttt:\n            ttt -= 1\n            j = 1\n        j -= 1\n    elif i[0] == '01' and (k or ttt):\n        ans += i[1]\n        t += 1\n        y += 1\n        if k == 0 and ttt:\n            ttt -= 1\n            k = 1\n        k -= 1\n    elif i[0] == '00' and ttt:\n        ans += i[1]\n        ttt -= 1\n        t += 1\nprint(ans)\n", "n=int(input())\na=[[] for i in range(4)]\n\nfor i in range(n):\n    s,influence=[i for i in input().split() ]\n    a[int(s,2)].append(int(influence))\n\nfor i in range(4):\n    a[i].sort(reverse=True)\ndef check():\n    x=len(a[1])\n    y=len(a[2])\n    xy=len(a[3])\n    z=len(a[0])\n\n    if(xy+y==0 or xy+x==0 ):\n        print(0)\n        return\n\n    w=min(x,y)\n    sum0=0\n    sum0+=sum(a[1][:w])+sum(a[2][:w])+sum(a[3])\n    choose = 2\n    if x >= y:\n        choose = 1\n    num=0\n    i=w\n    j=0\n    while(i<max(x,y) and j<z and num<xy):\n        if(a[choose][i]>=a[0][j]):\n            sum0+=a[choose][i]\n            i+=1\n        else:\n            sum0 += a[0][j]\n            j += 1\n        num+=1\n\n    while(i<max(x,y) and num<xy):\n        sum0 += a[choose][i]\n        i += 1\n        num+=1\n\n    while (j < z and num < xy):\n        sum0 += a[0][j]\n        j += 1\n        num += 1\n    print(sum0)\n\ncheck()\n\n\n\n\n", "from collections import defaultdict\nc = defaultdict(int)\nm = defaultdict(list)\nn = int(input())\nfor i in range(n):\n    s,a = input().split()\n    m[s].append(int(a))\n    c[s]+=1\nali = c['10']\nbob = c['01']\nco = c['11']\nno = c['00']\n\nif(ali==0 or bob==0) and (co==0):\n    print(0)\nelse:\n    if(ali>bob):\n        ali-=(ali-bob)\n    else:\n        bob-=(bob-ali)\n    x = m['10']\n    y = m['01']\n    x.sort(reverse=True)\n    y.sort(reverse=True)\n    ans = sum(x[:ali])+sum(y[:ali])\n    rem = x[ali:]+y[ali:]+m['00']\n    tot = ali+bob\n    if(co>0):\n        ans+=sum(m['11'])\n        tot+=co\n        ali+=co\n        bob+=co\n    #print(ali,bob,tot)\n    rem.sort(reverse=True)\n    #print(rem)\n    mn = min(ali,bob)\n    re = max(2*mn-tot,0)\n    #print(re)\n    ans+=sum(rem[:re])\n    print(ans)\n    \n", "#!/usr/bin/env python3\n\nimport collections\nimport sys\nimport traceback\n\nclass Input(object):\n    def __init__(self):\n        self.fh = sys.stdin\n\n    def next_line(self):\n        while True:\n            line = sys.stdin.readline()\n            if line == '\\n':\n                continue\n            return line\n\n\n    def next_line_ints(self):\n        line = self.next_line()\n        return [int(x) for x in line.split()]\n\n    def next_line_strs(self):\n        line = self.next_line()\n        return line.split()\n\n\ndef get_max_influence(influence):\n    for i in range(4):\n        influence[i].sort(reverse=True)\n        #print('influence[{}] = {}'.format(i, influence[i]))\n    t = [0] * 4\n    result = 0\n    while t[1] < len(influence[1]) and t[2] < len(influence[2]):\n        result += influence[1][t[1]] + influence[2][t[2]]\n        t[1] += 1\n        t[2] += 1\n    while t[3] < len(influence[3]):\n        best = 0\n        best_id = -1\n        for i in range(3):\n            if t[i] < len(influence[i]) and influence[i][t[i]] > best:\n                best = influence[i][t[i]]\n                best_id = i\n        result += influence[3][t[3]]\n        t[3] += 1\n        if best_id != -1:\n            result += influence[best_id][t[best_id]]\n            t[best_id] += 1\n    return result\n\ndef main():\n    input = Input()\n    while True:\n        try:\n            nums = input.next_line_ints()\n            if not nums:\n                break\n            n, = nums\n            if n == -1:\n                break\n            influence = [[] for _ in range(4)]\n            for _ in range(n):\n                support, value = input.next_line_strs()\n                influence[int(support, 2)].append(int(value))\n                #print('influence = {}'.format(influence))\n        except:\n            print('read input failed')\n        try:\n            #print('influence = {}'.format(influence))\n            max_value = get_max_influence(influence)\n            print(\"{}\".format(max_value))\n        except:\n            traceback.print_exc(file=sys.stdout)\n            print('get_min_dist failed')\n\nmain()", "n = int(input())\na, b, c = [], [], []\nans = 0\nnum11 = 0\nfor i in range(n):\n    t, val = map(int, input().split())\n    if t == 11:\n        ans += val\n        num11 += 1\n        continue\n    if t & 1: a.append(val)\n    if t & 2: b.append(val)\n    if not t: c.append(val)\na.sort(reverse=True)\nb.sort(reverse=True)\n\nmin_num = min(len(a), len(b))\nans += sum(a[:min_num]) + sum(b[:min_num])\nt = a[min_num:] + b[min_num:] + c\nt.sort(reverse=True)\nans += sum(t[:2 * (min(len(a), len(b))+num11) - 2 * min_num - num11])\nprint(ans)", "def __starting_point():\n    n = int(input())\n    supporters = {}\n    supporters[0]=[]\n    supporters[1]=[]\n    supporters[10]=[]\n    supporters[11]=[]\n    for i in range(n):\n        [x,y] = [int(x) for x in input().split()]\n        supporters[x].append(y)\n        #print(x,y)\n\n    for x in supporters:\n        supporters[x].sort(reverse=True)\n        #print(supporters[x])\n\n    t = 0\n    res = 0\n    x = len(supporters[11])\n    y = len(supporters[10])\n    z = len(supporters[1])\n\n    if y>z:\n        t = min(x+y,z)\n    else:\n        t = min(x+z,y)\n    k = 0\n    for val in supporters[11]:\n        res += val \n        k+=1\n\n    for i in range(y):\n        if i>=t:\n            supporters[0].append(supporters[10][i])\n            \n        else:    \n            res += supporters[10][i]\n            k+=1\n    for i in range(z):\n        if i>=t:\n            supporters[0].append(supporters[1][i])\n            \n        else:    \n            res += supporters[1][i]\n            k+=1\n\n    supporters[0].sort(reverse=True)\n    t = min(x+y,x+z)\n    i = 0\n    #print(res)\n    while 2*t > k and i<len(supporters[0]):\n        k+=1\n        #print(supporters[0][i])\n        res += supporters[0][i]\n        i+=1\n\n    print(res)     \n\n__starting_point()", "#!usr/bin/python\n\nn = int(input());\ns = [[], [], [], []];\n\nfor i in range(n):\n\tx = input().strip().split();\n\tif x[0] == \"11\":\n\t\ts[3].append(int(x[1]));\n\telif x[0] == \"10\":\n\t\ts[2].append(int(x[1]));\n\telif x[0] == \"01\":\n\t\ts[1].append(int(x[1]));\n\telse:\n\t\ts[0].append(int(x[1]));\n\nans = 0;\nfor i in range(len(s[3])):\n\tans = ans + s[3][i];\ns[2] = sorted(s[2], reverse = True);\ns[1] = sorted(s[1], reverse = True);\ntlen = min(len(s[1]),len(s[2]));\n\nfor i in range(1, 3):\n\tfor j in range(tlen):\n\t\tans = ans + s[i][j];\n\tfor j in range(tlen,len(s[i])):\n\t\ts[0].append(s[i][j]);\n\ns[0] = sorted(s[0], reverse = True);\ntlen = min(len(s[3]),len(s[0]));\nfor i in range(tlen):\n\tans = ans + s[0][i];\n\nprint(ans);\n\n\n\n\n\n\n\n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 11/3/18\n\n\"\"\"\n\n\n\nN = int(input())\n\nA = [[] for _ in range(4)]\na, b, c, d = A\nfor ni in range(N):\n    v, f = input().split()\n    A[int(v, 2)].append(int(f))\n\n\nfor i in range(len(A)):\n    A[i].sort(reverse= True)\n    \n    \n# all people '11' supports both will be selected\nans = sum(A[3] or [0])\n\n# select equal number of '01' or '10'\n\nsingle = min(len(A[1]), len(A[2]))\n\nans += sum(A[1][:single]or [0])\nans += sum(A[2][:single] or [0])\n\nx = len(A[3]) + single\n# select left '01' '10' or '00' make total people <= 2*x, current have 2*single + len(A[3])\n# so at most select len(A[3]) more people\n\na = A[1][single:] + A[2][single:] + A[0]\na.sort(reverse=True)\nans += sum(a[: len(A[3])] or [0])\n\nprint(ans)\n\n    \n", "def read():\n    return []\n\n\ndef main():\n    n = int(input())\n    d = [[], [], [], []]\n\n    for _ in range(n):\n        key, influence = input().split()\n        key = int(key, 2)\n        d[key].append(int(influence))\n\n    for key in range(4):\n        d[key].sort(reverse=True)\n\n    ans = sum(d[3])\n    additional = len(d[3])\n\n    container = []\n    if len(d[1]) < len(d[2]):\n        container = d[2]\n    elif len(d[1]) > len(d[2]):\n        container = d[1]\n    container_start = min(len(d[1]), len(d[2]))\n    zeros_start = 0\n\n    for a1, a2 in zip(d[1], d[2]):\n        ans += a1 + a2\n\n    while (container_start < len(container) or zeros_start < len(d[0])) and additional:\n        t1, t2 = 0, 0\n        if container_start < len(container):\n            t1 = container[container_start]\n        if zeros_start < len(d[0]):\n            t2 = d[0][zeros_start]\n        if t1 < t2:\n            ans += t2\n            zeros_start += 1\n        elif t1 >= t2 and t1 != 0:\n            ans += t1\n            container_start += 1\n        additional -= 1\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nt_11=[]\nt_10=[]\nt_01=[]\nt_00=[]\nfor x in range(n):\n    tmp=list(input().split())\n    supp = str(tmp[0])\n    m = int(tmp[1])\n    t_tmp = [supp, m]\n    if supp == '11':\n        t_11.append(t_tmp)\n    elif supp == '01':\n        t_01.append(t_tmp)\n    elif supp == '10':\n        t_10.append(t_tmp)\n    else:\n        t_00.append(t_tmp)\nt_00=sorted(t_00, key=lambda x: x[1])\nt_10=sorted(t_10, key=lambda x: x[1])\nt_01=sorted(t_01, key=lambda x: x[1])\nt_11=sorted(t_11, key=lambda x: x[1])\npop_a = 0\npop_b = 0\ntot_inf = 0\npop_tot=0\nl_t_11 = len(t_11)-1\nfor x in range(l_t_11,-1,-1):\n    pop_a+=1\n    pop_b+=1\n    pop_tot+=1\n    tot_inf+=t_11[-1][1]\n    del t_11[-1]\nfor x in range(min(len(t_10),len(t_01))-1,-1,-1):\n    pop_b+=1\n    pop_a+=1\n    pop_tot+=2\n    tot_inf+=t_01[-1][1]+t_10[-1][1]\n    del t_01[-1]\n    del t_10[-1]\ntmp_inf_1 = 0\ntmp_inf_2 = 0\ntmp_inf_3 = 0\ntmp_t1 = []\ntmp_t2 = []\nif len(t_10)!=0:\n    for x in t_10:\n        tmp_t1.append(x)\n    for x in t_00:\n        tmp_t1.append(x)\n    tmp_t1 = sorted(tmp_t1, key=lambda x: x[1])\n    while True:\n        if len(tmp_t1)==0 or pop_a*2==pop_tot or pop_b*2==pop_a or pop_b*2==pop_tot:\n            break\n        tot_inf+=tmp_t1[-1][1]\n        if tmp_t1[-1][0] == '10':\n            pop_a+=1\n            pop_tot+=1\n        else:\n            pop_tot+=1\n        del tmp_t1[-1]\n    print(tot_inf)\nelif len(t_01)!=0:\n    for x in t_01:\n        tmp_t2.append(x)\n    for x in t_00:\n        tmp_t2.append(x)\n    tmp_t2 = sorted(tmp_t2, key=lambda x: x[1])\n    while True:\n        if len(tmp_t2)==0 or pop_b*2==pop_tot or pop_a*2==pop_b or pop_a*2==pop_tot:\n            break\n        tot_inf+=tmp_t2[-1][1]\n        if tmp_t2[-1][0] == '01':\n            pop_b+=1\n            pop_tot+=1\n        else:\n            pop_tot+=1\n        del tmp_t2[-1]\n    print(tot_inf)\nelse:\n    if len(t_00)==0:\n        print(tot_inf)\n        return\n    else:\n        while True:\n            if len(t_00)==0 or pop_a*2==pop_tot or pop_b*2==pop_tot:\n                break\n            tot_inf+=t_00[-1][1]\n            pop_tot+=1\n            del t_00[-1]\n        print(tot_inf)", "n=int(input())\na=[];b=[];c=[];d=[]\nfor i in range(n):\n    opt,num=[int(x) for x in input().split()]\n    if opt==0:\n        a.append(num)\n    if opt==10:\n        b.append(num)\n    if opt==1:\n        c.append(num)\n    if opt==11:\n        d.append(num)\nans=0\nans+=sum(d)\nb.sort(reverse=True)\nc.sort(reverse=True)\nif len(b)<len(c):\n    ans+=sum(b)+sum(c[0:len(b)])\n    a.extend(c[len(b):])\nelse:\n    ans+=sum(c)+sum(b[0:len(c)])\n    a.extend(b[len(c):])\na.sort(reverse=True)\nans+=sum(a[0:len(d)])\nprint(ans)", "import sys\n\na = []\nb = []\nc = []\nd = []\n\ndef main():\n\t#sys.stdin = open('D:\\\\Sublime\\\\in.txt', 'r')\n\t#sys.stdout = open('D:\\\\Sublime\\\\out.txt', 'w')\n\n\tn = int(sys.stdin.readline().strip('\\n'))\n\n\tfor i in range(n):\n\t\topt,num=[int(line) for line in sys.stdin.readline().strip('\\n').split()[:2]]\n\t\tif opt==0:\n\t\t\ta.append(num)\n\t\tif opt==10:\n\t\t\tb.append(num)\n\t\tif opt==1:\n\t\t\tc.append(num)\n\t\tif opt==11:\n\t\t\td.append(num)\n\n\tres = sum(d)\n\n\tb.sort(reverse = True)\n\tc.sort(reverse = True)\n\n\tif len(b) > len(c):\n\t\tres += sum(c) + sum(b[:len(c)])\n\t\ta.extend(b[len(c):])\n\telse:\n\t\tres += sum(b) + sum(c[:len(b)])\n\t\ta.extend(c[len(b):])\n\n\ta.sort(reverse = True)\n\tres += sum(a[:len(d)])\n\tprint(res)\n\ndef __starting_point():\n\tmain()\n__starting_point()", "n=int(input())\na=[];b=[];c=[];d=[]\nfor i in range(n):\n    opt,num=[int(x) for x in input().split()]\n    if opt==0:\n        a.append(num)\n    if opt==10:\n        b.append(num)\n    if opt==1:\n        c.append(num)\n    if opt==11:\n        d.append(num)\nans=sum(d)\nb.sort(reverse=True) # from the largest then choose: greedy\nc.sort(reverse=True) # make sortings is O(nlogn)\nif len(b)<len(c):\n    ans+=sum(b)+sum(c[0:len(b)])\n    a.extend(c[len(b):])\nelse:\n    ans+=sum(c)+sum(b[0:len(c)])\n    a.extend(b[len(c):])\na.sort(reverse=True)\nans+=sum(a[0:len(d)])\nprint(ans)", "n=int(input())\nboth=[]\na=[]\nb=[]\nneither=[]\nfor i in range(n):\n    c,d=map(int,input().split())\n    if c==11:\n        both.append(d)\n    elif c==10:\n        a.append(d)\n    elif c==1:\n        b.append(d)\n    else:\n        neither.append(d)\ninf=sum(both)\nlee=len(both)\na.sort(reverse=True)\nb.sort(reverse=True)\nx=min(len(a),len(b))\ninf+=sum(a[:x])+sum(b[:x])\nneither+=a[x:]+b[x:]\nneither.sort(reverse=True)\nif len(neither)<lee:\n    inf+=sum(neither)\nelse:\n    inf+=sum(neither[:lee])\nprint(inf)", "from collections import defaultdict\nN = int(input())\nnum = 0\ncnt = 0\nrec = defaultdict(list)\ncnt10 = 0\ncnt01 = 0\nfor i in range(N):\n    a, b = input().split()\n    if a == \"11\":\n        num += int(b)\n        cnt += 1\n    elif a == \"01\":\n        cnt01 += 1\n        rec[a].append(int(b))\n    elif a == \"10\":\n        cnt10 += 1\n        rec[a].append(int(b))\n    else:\n        rec[a].append(int(b))\n\nrec[\"10\"] = sorted(rec[\"10\"])\nrec[\"01\"] = sorted(rec[\"01\"])\n\nfor i in range(min(cnt10, cnt01)):\n    num += rec[\"10\"].pop()\n    num += rec[\"01\"].pop()\n\nq = rec[\"10\"] + rec[\"01\"] + rec[\"00\"]\nq = sorted(q, reverse=True)\n\nnum += sum(q[:cnt])\n\nprint(num)", "m=int(input())\ndou=0\nfir=[]\nsec=[]\nnon=[]\nd,f,s,n=0,0,0,0\nfor i in [0]*m:\n    a,b=list(map(int,input().split()))\n    if a==11:\n        dou+=b\n        d+=1\n    elif a==1:\n        sec.append(b)\n        s+=1\n    elif a==10:\n        fir.append(b)\n        f+=1\n    else:\n        non.append(b)\n        n+=1\nfir.sort(reverse=True)\nsec.sort(reverse=True)\nif not (d+f*s):\n    print(0)\n    quit()\nelse:\n    m=min(f,s)\n    ans=dou+sum(fir[:m])+sum(sec[:m])\n    non=non+fir[m:]+sec[m:]\n    non.sort(reverse=True)\n    print(ans+sum(non[:d]))\n\n", "n = int(input())\nlis10=[]\nlis01=[]\nlis00=[]\ninf=c11=c10=c01=c=c00=0\nfor i in range(n):\n    a , b = list(map(str,input().split()))\n    if a=='11':\n        inf+=int(b)\n        c11+=1\n    elif a=='10':\n        c10+=1\n        lis10.append(int(b))\n    elif a=='01':\n        c01+=1\n        lis01.append(int(b))\n    else:\n        c00+=1\n        lis00.append(int(b)) \nlis10.sort(reverse=True)\nlis01.sort(reverse=True)\nc=min(c01,c10)\nfor i in range(c):\n    inf+=(lis10[i]+lis01[i])\nlis00+=lis10[c:c10]+lis01[c:c01]    \nlis00.sort(reverse=True)\n#if len(lis00)<c11:\n#    print(inf)\n#else:    \nfor i in range(min(c11,len(lis00))):\n    inf+=lis00[i]\nprint(inf)    \n", "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nfrom math import sqrt\nimport math\nimport heapq\nfrom itertools import accumulate\n\nN = int(input())\n\nf = {}\nf['00'] = []\nf['10'] = []\nf['01'] = []\nf['11'] = []\n\nfor i in range(N):\n    s = [x for x in stdin.readline().split()]\n    f[s[0]].append(int(s[1]))\n    \nfor key in f:\n    f[key].sort(reverse=True)\n    \n#print(f)\n\ns_X = sum(f['11'])\n# X >= W\nX = len(f['11'])\nY = len(f['10'])\nZ = len(f['01'])\n\nm = min(Y,Z)\n\n# calculate prefix of '10' and '01'\ns_Y = [0]*len(f['10'])\ns = 0\nfor i in range(len(f['10'])):\n    s += f['10'][i]\n    s_Y[i] = s\ns_Z = [0]*len(f['01'])\ns = 0\nfor i in range(len(f['01'])):\n    s += f['01'][i]\n    s_Z[i] = s\n\n# W = 0 to X\nres = 0\ns = 0\nfor W in range(X+1):\n    # abs(Y-Z) <= X-W\n    if W>len(f['00']):\n        break\n    if W>=1:\n        s += f['00'][W-1]\n    \n    bound = X-W\n    if Y>Z:\n        tmp_Y = min(Y,Z+bound)\n        tmp_Z = Z\n    elif Y==Z:\n        tmp_Y = Y\n        tmp_Z = Z\n    elif Y<Z:\n        tmp_Y = Y\n        tmp_Z = min(Z,Y+bound)\n    \n    # X+W+Y+Z\n    calculate = s_X + s\n    if tmp_Y>0:\n        calculate += s_Y[tmp_Y-1]\n    if tmp_Z>0:\n        calculate += s_Z[tmp_Z-1]\n        \n    res = max(res,calculate)\n    #print(X,tmp_Y,tmp_Z,W,calculate)\n    \nprint(res)\n            \n\n\n    \n", "n = int(input())\n\ninfluences = [[],[],[],[]]\n\nfor i in range(0,n):\n    [support, influence] = [x for x in input().split()]\n    support = int(support, 2)\n    influences[support].append(int(influence))\n\nfor i in range(0,4):\n    influences[i] = sorted(influences[i])\n    influences[i].reverse()\n\ntotal_influence = 0\ntotal_influence += sum(influences[3])\n\nmin_size = min(len(influences[2]),len(influences[1]))\n\ntotal_influence += sum(influences[1][:min_size]) + sum(influences[2][:min_size])\n\nsize = len(influences[3])\n\ninfluences[0] += influences[1][min_size:] + influences[2][min_size:]\ninfluences[0] = sorted(influences[0])\ninfluences[0].reverse()\n\ntotal_influence += sum(influences[0][:size])\n\nprint(total_influence)"]