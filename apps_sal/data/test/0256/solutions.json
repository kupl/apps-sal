["a,b=list(map(int,input().split()))\nc,d=list(map(int,input().split()))\n\n\nx,y=list(map(int,input().split()))\nz,w=list(map(int,input().split()))\n\n\nTeam1=False\nTeam2=False\nif(a>w and a>y and d>x and d>z):\n    Team1=True\n\nif(c>w and c>y and b>x and b>z):\n    Team1=True\n\nif(((x>b and w>c) or (z>b and y>c)) and ((x>d and w>a) or (z>d and y>a))):\n    Team2=True\n\n\nif(Team1):\n    print(\"Team 1\")\nelif(Team2):\n    print(\"Team 2\")\nelse:\n    print(\"Draw\")\n", "def check(a1,b1,a2,b2):\n\tif b1 > a2 and a1 > b2:\n\t\treturn True\n\treturn False\ndef solve(x):\n\tif (check(x[0][0],x[1][1],x[2][0],x[3][1]) and check(x[0][0],x[1][1],x[3][0],x[2][1])) or \\\n\t   (check(x[1][0],x[0][1],x[2][0],x[3][1]) and check(x[1][0],x[0][1],x[3][0],x[2][1])):\n\t\treturn 1\n\tif (check(x[3][0],x[2][1],x[0][0],x[1][1]) or check(x[2][0],x[3][1],x[0][0],x[1][1])) and \\\n\t   (check(x[3][0],x[2][1],x[1][0],x[0][1]) or check(x[2][0],x[3][1],x[1][0],x[0][1])):\n\t\treturn 2\n\treturn 0\ndef main():\n\tx = []\n\tfor i in range(4):\n\t\ttmp = list(map(int,input().split()))\n\t\tx.append(tmp)\n\tw = solve(x)\n\tif w == 0:\n\t\tprint('Draw')\n\telse:\n\t\tprint('Team {}'.format(w))\nmain()", "def win(a,b,c,d):\n    if a>d and b>c:  return 1\n    return 0\na={}\nb={}\nfor i in range(2):           \n    a[i*2],b[i*2]=list(map(int,input('').split()))\n    a[1+i*2],b[1+i*2]=list(map(int,input('').split()))\n    h=b[i*2]\n    b[i*2]=b[1+i*2]\n    b[1+i*2]=h\nif (win(a[0],b[0],a[2],b[2])*win(a[0],b[0],a[3],b[3])==1) or (win(a[1],b[1],a[2],b[2])*win(a[1],b[1],a[3],b[3])==1):\n    print ('Team 1')\n    return\nif (win(a[2],b[2],a[0],b[0])*win(a[2],b[2],a[1],b[1])==1) or (win(a[3],b[3],a[0],b[0])*win(a[3],b[3],a[1],b[1])==1) or (win(a[2],b[2],a[0],b[0])*win(a[3],b[3],a[1],b[1])==1) or (win(a[2],b[2],a[1],b[1])*win(a[3],b[3],a[0],b[0])==1):\n    print ('Team 2')\n    return\nprint('Draw')\n\n\n", "def _win(a, b, c, d):\n    if a[0] > c[1] and b[1] > d[0]:\n        return 1\n    elif a[0] < c[1] and b[1] < d[0]:\n        return -1\n    else:\n        return 0\n\n\ndef win(a, b, c, d):\n    nonlocal p\n    return _win(p[a], p[b], p[c], p[d])\n\n\ndef win_comb(a, b, c, d):\n    x, y = win(a, b, c, d), win(a, b, d, c)\n    if x == 1 and y == 1:\n        return 1\n    if x == -1 or y == -1:\n        return -1\n    return 0\n\n\ndef win_team1(a, b, c, d):\n    x, y = win_comb(a, b, c, d), win_comb(b, a, c, d)\n    if x == 1 or y == 1:\n        return 1\n    if x == -1 and y == -1:\n        return -1\n    return 0\n\np = []\nfor i in range(4):\n    p.append(tuple(map(int, input().split())))\nw = win_team1(0, 1, 2, 3)\nif w == 1:\n    print('Team 1')\nelif w == -1:\n    print('Team 2')\nelse:\n    print('Draw')\n", "team1, team2 = (lambda t : [[list(map(int, input().split())) for x in range(2)] for y in range(2)])('input')\nif (lambda t1, t2 : any(all(t1[x][0] > t2[y][1] and t1[1 - x][1] > t2[1 - y][0] for y in range(2)) for x in range(2)))(team1, team2):\n    print('Team 1')\nelif (lambda t1, t2 : all(any(t2[y][0] > t1[x][1] and t2[1 - y][1] > t1[1 - x][0] for y in range(2)) for x in range(2)))(team1, team2):\n    print('Team 2')\nelse:\n    print('Draw')\n", "import sys\nread = lambda: list(map(int, sys.stdin.readline().split()))\na0, d0 = read()\na1, d1 = read()\n\na2, d2 = read()\na3, d3 = read()\n\nw02 = a0 > d3 and d1 > a2\nw03 = a0 > d2 and d1 > a3\nw12 = a1 > d3 and d0 > a2\nw13 = a1 > d2 and d0 > a3\n\nw20 = a2 > d1 and d3 > a0\nw21 = a2 > d0 and d3 > a1\nw30 = a3 > d1 and d2 > a0\nw31 = a3 > d0 and d2 > a1\n\nif w02 and w03 or w12 and w13:\n    print(\"Team 1\")\nelif (w20 or w30) and (w21 or w31):\n    print(\"Team 2\")\nelse:\n    print(\"Draw\")\n", "def main():\n\tM = [0] * 4\n\tfor i in range(4):\n\t\tM[i] = list(map(int, input().split()))\n\n\tW = [[0] * 2 for i in range(2)]\n\tfor i in range(0, 2):\n\t\tfor j in range(2, 4):\n\t\t\tif M[i][0] > M[j][1] and M[i ^ 1][1] > M[j ^ 1][0]:\n\t\t\t\tW[i][j - 2] = 1\n\t\t\telif M[i][0] < M[j][1] and M[i ^ 1][1] < M[j ^ 1][0]:\n\t\t\t\tW[i][j - 2] = -1\n\t\t\telse:\n\t\t\t\tW[i][j - 2] = 0\n\tif max(W[0][0] + W[0][1], W[1][0] + W[1][1]) == 2:\n\t\tprint(\"Team 1\")\n\telif min(W[0][0], W[0][1]) + min(W[1][0], W[1][1]) == -2:\n\t\tprint(\"Team 2\")\n\telse:\n\t\tprint(\"Draw\")\n\nmain()", "mtr=[[1,0],[0,1]]\np1=list(map(int,input().split()))\np2=list(map(int,input().split()))\np3=list(map(int,input().split()))\np4=list(map(int,input().split()))\nw1=w2=0\nfor l1 in mtr:\n    wi1=wi2=0\n    for l2 in mtr:\n        at1=p1[1] if l1[0]==1 else p2[1]\n        z1=p1[0] if l1[0]==0 else p2[0]\n        at2=p3[1] if l2[0]==1 else p4[1]\n        z2=p3[0] if l2[0]==0 else p4[0]\n        if at1>z2 and z1>at2:\n            wi1+=1\n        elif at1<z2 and z1<at2:\n            wi2+=1\n    if wi2>=1:\n        w2+=1\n    elif wi1==2:\n        w1+=1\nif w2==2:\n    print('Team 2')\nelif w1>=1:\n    print('Team 1')\nelse:\n    print('Draw')\n", "def check(a, b, c, d):\n    if a > d and b > c:\n        return 1\n    return 0\na = [0 for i in range(4)]\nb = [0 for i in range(4)]\nfor i in range(4):\n    a[i], b[i] = map(int, input().split())\nif check(a[0], b[1], a[2], b[3]) and check(a[0], b[1], a[3], b[2]):\n    print('Team 1')\nelif check(a[1], b[0], a[2], b[3]) and check(a[1], b[0], a[3], b[2]):\n    print('Team 1')\nelif (check(a[2], b[3], a[0], b[1]) or check(a[3], b[2], a[0], b[1])) and (check(a[3], b[2], a[1], b[0]) or check(a[2], b[3], a[1], b[0])):\n    print('Team 2')\nelse:\n    print('Draw')", "    \ndef play(t1, t2):    \n    r = 0\n    if t1[0] > t2[1] and t1[1] > t2[0]:\n        r = 1\n    elif t1[0] < t2[1] and t1[1] < t2[0]:\n        r = -1\n    else:\n        r = 0\n    #print(\"play:\", t1, t2, r)\n    return r\n\np = []\nm = []\nres = []\n\nfor _ in range(4):\n    a, b = map(int, input().split(\" \"))\n    p.append((a, b))    \n\nm.append((p[0][0], p[1][1]))\nm.append((p[1][0], p[0][1]))\nm.append((p[2][0], p[3][1]))\nm.append((p[3][0], p[2][1]))\n    \nres.append((play(m[0], m[2]), play(m[0], m[3])))\nres.append((play(m[1], m[2]), play(m[1], m[3])))\n\n#print(res)\nmm = max([max(i) for i in res])\nres = [i for i in res if max(i) == mm]\nres = [min(i) for i in res]\n#print(res)\n#rr = min(res) + 1\nif 1 in res:\n    rr = 2\nelse:\n    rr = max(res) + 1\nss = [\"Team 2\", \"Draw\", \"Team 1\"]\nprint(ss[rr])", "def f():\n    a, b = map(int, input().split())\n    A, B = map(int, input().split())\n    return ((a, B), (A, b))\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\nx, y = f(), f()\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\nelse: print('Draw')", "p1 = list(map(int, input().split()))\np2 = list(map(int, input().split()))\np3 = list(map(int, input().split()))\np4 = list(map(int, input().split()))\n\nt1 = [(p1[0],p2[1]), (p2[0],p1[1])]\nscore = [0,0]\nt2 = [(p3[0],p4[1]), (p4[0],p3[1])]\nt11 = t1[0]\nt12 = t1[1]\nt21 = t2[0]\nt22 = t2[1]\n# if any team of t1 wins both game, then t1 wins\n# if any both team loses to any of t2, t2 wins\n\nif t11[0] > t21[1] and t11[0] > t22[1] and t11[1] > t21[0] and t11[1] >t22[0]:\n    print(\"Team 1\")\nelif t12[0] > t21[1] and t12[0] > t22[1] and t12[1] > t21[0] and t12[1] >t22[0]:\n    print(\"Team 1\")\nelif ((t11[0] < t21[1] and t11[1] < t21[0] ) or ( t11[0] < t22[1] and t11[1] < t22[0])) and ((t12[0] < t21[1] and t12[1] < t21[0] ) or ( t12[0] < t22[1] and t12[1] < t22[0])):\n    print(\"Team 2\")\nelse:\n    print(\"Draw\")\n\n\n\n\n\n\n", "def get_tuple():\n\ta, A = list(map(int, input().split()))\n\tb, B = list(map(int, input().split()))\n\treturn (a,B), (b,A)\n\ndef larger(a1, a2):\n\treturn a1[0] > a2[1] and a1[1] > a2[0]\n\ndef smaller(a1, a2):\n\treturn a1[0] < a2[1] and a1[1] < a2[0]\n\nt11, t12 = get_tuple()\nt21, t22 = get_tuple()\n\nif larger(t11,t21) and larger(t11, t22):\n\tprint(\"Team 1\")\nelif larger(t12, t21) and larger(t12, t22):\n\tprint(\"Team 1\")\nelif (smaller(t11,t21) or smaller(t11, t22)) and (smaller(t12, t21) or smaller(t12, t22)):\n\tprint(\"Team 2\")\nelse:\n\tprint(\"Draw\")\n\n\n\n", "p11 = list(map(int, input().split()))\np12 = list(map(int, input().split()))\np21 = list(map(int, input().split()))\np22 = list(map(int, input().split()))\n\ndef f(a, b, c, d):\n    if a[0] > d[1] and b[1] > c[0]:\n        return 1\n    if a[0] < d[1] and b[1] < c[0]:\n        return 2\n    return 0\n\nc1 = f(p11, p12, p21, p22)\nc2 = f(p12, p11, p21, p22)\nc3 = f(p11, p12, p22, p21)\nc4 = f(p12, p11, p22, p21)\n#print(c1, c2, c3, c4)\n#false - win 1 true - win 2\n\nif ((c1 == 2 or c3 == 2) and (c2 == 2 or c4 == 2)):\n    print(\"Team 2\")\nelif ((c1 == 1 and c3 == 1) or (c2 == 1 and c4 == 1)):\n    print(\"Team 1\")\nelse:\n    print(\"Draw\")\n", "team1, team2 = (lambda t : [[list(map(int, input().split())) for x in range(2)] for y in range(2)])('input')\nif (lambda t1, t2 : any(all(t1[x][0] > t2[y][1] and t1[1 - x][1] > t2[1 - y][0] for y in range(2)) for x in range(2)))(team1, team2):\n    print('Team 1')\nelif (lambda t1, t2 : all(any(t2[y][0] > t1[x][1] and t2[1 - y][1] > t1[1 - x][0] for y in range(2)) for x in range(2)))(team1, team2):\n    print('Team 2')\nelse:\n    print('Draw')\n", "def find_winer(defence1, attack1, defence2, attack2):\n    if defence1[0] > attack2[1] and attack1[1] > defence2[0]:\n        return 1\n    elif defence1[0] < attack2[1] and attack1[1] < defence2[0]:\n        return 2\n    else:\n        return 0\n\n\ndef find_results(players):\n    results = []\n    results.append(find_winer(players[0], players[1], players[2], players[3]))\n    results.append(find_winer(players[0], players[1], players[3], players[2]))\n    results.append(find_winer(players[1], players[0], players[2], players[3]))\n    results.append(find_winer(players[1], players[0], players[3], players[2]))\n\n    return results\n\n\ndef solve():\n    players = []\n    for i in range(4):\n        players.append(tuple(map(int, input().split())))\n\n    results = find_results(players)\n    if (results[0] == 1 and results[1] == 1) or (results[2] == 1 and results[3] == 1):\n        print (\"Team 1\")\n    elif (results[0] == 2 or results[1] == 2) and (results[2] == 2 or results[3] == 2):\n        print(\"Team 2\")\n    else:\n        print(\"Draw\")\n\n\nsolve()\n", "x = [tuple(int(i) for i in input().split()) for j in range(4)]\nif x[0][0] + x[1][1] > x[0][1] + x[1][0]:\n    t1atk = x[1][1]\n    t1def = x[0][0]\nelse:\n    t1atk = x[0][1]\n    t1def = x[1][0]\n\ndef f():\n    if  t1atk > t2def and t1def > t2atk:\n        return 0\n    elif t1atk < t2def and t1def < t2atk:\n        return 2\n    else:\n        return 1\n\nt2def = x[2][0]\nt2atk = x[3][1]\na = f()\n\nt2def = x[3][0]\nt2atk = x[2][1]\nb = f()\n\nif a > b:\n    t2def = x[2][0]\n    t2atk = x[3][1]\nelse:\n    t2def = x[3][0]\n    t2atk = x[2][1]\n\nif t1atk > t2def and t1def > t2atk:\n    print(\"Team 1\")\nelif t1atk < t2def and t1def < t2atk:\n    print(\"Team 2\")\nelse:\n    print(\"Draw\")\n\n", "p1 = input().split(\" \")\np2 = input().split(\" \")\np3 = input().split(\" \")\np4 = input().split(\" \")\n\n# type 1, p1, p2\nversion11 = int(p1[0]) > int(p3[1]) and int(p2[1]) > int(p4[0])\nversion12 = int(p1[0]) > int(p4[1]) and int(p2[1]) > int(p3[0])\nversion21 = int(p2[0]) > int(p3[1]) and int(p1[1]) > int(p4[0])\nversion22 = int(p2[0]) > int(p4[1]) and int(p1[1]) > int(p3[0])\n\nversion112 = int(p1[0]) < int(p3[1]) and int(p2[1]) < int(p4[0])\nversion122 = int(p1[0]) < int(p4[1]) and int(p2[1]) < int(p3[0])\nversion212 = int(p2[0]) < int(p3[1]) and int(p1[1]) < int(p4[0])\nversion222 = int(p2[0]) < int(p4[1]) and int(p1[1]) < int(p3[0])\n\nif (version11 and version12) or (version21 and version22):\n\tprint(\"Team 1\")\nelif (version112 or version122) and (version212 or version222):\n\tprint(\"Team 2\")\nelse:\n\tprint(\"Draw\")\n", "a1,d1 = [int(a) for a in input().split()]\na2,d2 = [int(a) for a in input().split()]\na3,d3 = [int(a) for a in input().split()]\na4,d4 = [int(a) for a in input().split()]\n\n# Team 1 wins if E a team 1 st A team 2, team 1 must win\n# Team 2 wins if A team 1 E team 2 st team 2 must win\n\nteam1win = False\nfor (A1,D1) in [(a1,d2),(a2,d1)]:\n    good = True\n    for (A2,D2) in [(a3,d4),(a4,d3)]:\n        if A1 <= D2 or D1 <= A2:\n            good = False\n    if good:\n        team1win = True\nteam2win = True\nfor (A1,D1) in [(a1,d2),(a2,d1)]:\n    good = False\n    for (A2,D2) in [(a3,d4),(a4,d3)]:\n        if D2 > A1 and A2 > D1:\n            good = True\n    if not good:\n        team2win = False\n\nif team1win:\n    print('Team 1')\nelif team2win:\n    print('Team 2')\nelse:\n    print('Draw')\n", "def f():\n    a, b = list(map(int, input().split()))\n    A, B = list(map(int, input().split()))\n    return ((a, B), (A, b))\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\nx, y = f(), f()\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\nelse: print('Draw')\n", "def f():\n    a, b = list(map(int, input().split()))\n    A, B = list(map(int, input().split()))\n    return ((a, B), (A, b))\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\nx, y = f(), f()\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\nelse: print('Draw')\n", "def f():\n    a, b = list(map(int, input().split()))\n    A, B = list(map(int, input().split()))\n    return ((a, B), (A, b))\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\nx, y = f(), f()\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\nelse: print('Draw')\n", "def f():\n    a, b = list(map(int, input().split()))\n    A, B = list(map(int, input().split()))\n    return ((a, B), (A, b))\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\nx, y = f(), f()\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\nelse: print('Draw')\n", "def f():\n    a, b = list(map(int, input().split()))\n    A, B = list(map(int, input().split()))\n    return ((a, B), (A, b))\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\nx, y = f(), f()\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\nelse: print('Draw')\n", "def f():\n    a, b = list(map(int, input().split()))\n    A, B = list(map(int, input().split()))\n    return ((a, B), (A, b))\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\nx, y = f(), f()\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\nelse: print('Draw')\n"]