["S = input()\nS = \"\".join(list(reversed(S)))\nstr_list = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\nrev_str = []\nfor i in str_list:\n    rev_str.append(\"\".join(list(reversed(i))))\nis_OK = True\nwhile len(S) > 0:\n    if S[0:5] in rev_str:\n        S = S[5:]\n    elif S[0:6] in rev_str:\n        S = S[6:]\n    elif S[0:7] in rev_str:\n        S = S[7:]\n    else:\n        is_OK = False\n        break\nif is_OK:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s=input()\ni=0\nn=len(s)\n\nwhile i<n:\n  if s[i:i+10]==\"dreamerase\":\n    i+=5\n  elif s[i:i+7]==\"dreamer\":\n    i+=7\n  elif s[i:i+5]==\"dream\":\n    i+=5\n  elif s[i:i+6]==\"eraser\":\n    i+=6\n  elif s[i:i+5]==\"erase\":\n    i+=5\n  else:\n    break\nprint(\"YES\" if i==n else \"NO\")", "S = input()\nwhile S:\n    if S[-5:] == 'dream' or S[-5:] == 'erase':\n        S = S[:-5]\n    elif S[-6:] == 'eraser':\n        S = S[:-6]\n    elif S[-7:] == 'dreamer':\n        S = S[:-7]\n    else:\n        print('NO')\n        break\nelse:\n    print('YES')", "s=input()\ns=s.replace(\"eraser\",\"\").replace(\"erase\",\"\").replace(\"dreamer\",\"\").replace(\"dream\",\"\")\nif s:\n    print(\"NO\")\nelse:\n    print(\"YES\")", "s = input()\nx = 0\na = s.count(\"dream\")\nb = s.count(\"dreamer\")\nc = s.count(\"erase\")\nd = s.count(\"eraser\")\nreigai1 = s.count(\"dreamerase\")\nreigai2 = s.count(\"dreameraser\")\nreigai1 = reigai1-reigai2\nb = b-reigai1-reigai2\na = a-reigai1-reigai2\nc = c-reigai1-reigai2\nd = d-reigai2\na2 = a-b\nc2 = c-d\n# print(a,b,c,d)\n# print(a2,c2)\n# print(reigai1,reigai2)\n# print(a2*5+b*7+c2*5+d*6+reigai1*10+reigai2*11)\nif a2*5+b*7+c2*5+d*6+reigai1*10+reigai2*11 == len(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "S = input()\nS = S[::-1]\n\nws = ['maerd','remaerd','esare','resare']\ni = 0\nwhile i < len(S):\n    for w in ws:\n        if w == S[i:i+len(w)]:\n            i += len(w)\n            break\n    else:\n        print('NO')\n        return\nprint('YES')", "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\n#n,*a = map(int,readline().split())\n\n\"\"\"\na = \"dream\"[::-1]\nb = \"dreamer\"[::-1]\nc = \"erase\"[::-1]\nd = \"eraser\"[::-1]\n\"\"\"\ns = [*input()]\na = [*\"dream\"]\nb = [*\"dreamer\"]\nc = [*\"erase\"]\nd = [*\"eraser\"]\n\nwhile True:\n    if not s:\n        print(\"YES\")\n        break\n    elif s[-5:] == a:\n        for _ in range(5): s.pop()\n    elif s[-5:] == c:\n        for _ in range(5): s.pop()\n    elif s[-7:] == b:\n        for _ in range(7): s.pop()\n    elif s[-6:] == d:\n        for _ in range(6): s.pop()\n    else:\n        print(\"NO\")\n        break\n\n\n\n\n", "S = input()\nS = S[::-1]\nkey = [\n    \"dream\"[::-1],\n    \"erase\"[::-1],\n    \"dreamer\"[::-1],\n    \"eraser\"[::-1]\n]\nf = False\nwhile(S != \"\"):\n    f = False\n    for i in range(4):\n        tmp = S[0:len(key[i])]\n        if (tmp == key[i]):\n            S = S[len(key[i]):]\n            f = True\n            break\n    if not(f):\n        break\n        \nif (f):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "S=input()\ni=3\nwhile i<=len(S):\n    if i==3:\n        if S[-3:]==\"eam\":\n            i+=2\n            if S[-i:-i+2]==\"dr\":\n                i+=3\n            else:\n                print(\"NO\")\n                break\n        elif S[-3:]==\"mer\":\n            i+=4\n            if S[-i:-i+4]==\"drea\":\n                i+=3\n            else:\n                print(\"NO\")\n                break\n        elif S[-3:]==\"ase\":\n            i+=2\n            if S[-i:-i+2]==\"er\":\n                i+=3\n            else:\n                print(\"NO\")\n                break\n        elif S[-3:]==\"ser\":\n            i+=3\n            if S[-i:-i+3]==\"era\":\n                i+=3\n            else:\n                print(\"NO\")\n                break\n        else:\n            print(\"NO\")\n            break\n    else:\n        if S[-i:-i+3]==\"eam\":\n            i+=2\n            if S[-i:-i+2]==\"dr\":\n                i+=3\n            else:\n                print(\"NO\")\n                break\n        elif S[-i:-i+3]==\"mer\":\n            i+=4\n            if S[-i:-i+4]==\"drea\":\n                i+=3\n            else:\n                print(\"NO\")\n                break\n        elif S[-i:-i+3]==\"ase\":\n            i+=2\n            if S[-i:-i+2]==\"er\":\n                i+=3\n            else:\n                print(\"NO\")\n                break\n        elif S[-i:-i+3]==\"ser\":\n            i+=3\n            if S[-i:-i+3]==\"era\":\n                i+=3\n        \n        else:\n            print(\"NO\")\n            break\nelse:\n    print(\"YES\")", "# author:  Taichicchi\n# created: 03.11.2020 02:00:47\n\nimport sys\n\nLS = [\n    list(\"dream\")[::-1],\n    list(\"dreamer\")[::-1],\n    list(\"erase\")[::-1],\n    list(\"eraser\")[::-1],\n]\n\nS = list(input())[::-1]\n\nwhile S:\n    if S[:7] == LS[1]:\n        # print(f\"{LS[1]}\\t:\\t{S[:7]}\")\n        for l in LS[1]:\n            S.remove(l)\n    elif S[:6] == LS[3]:\n        # print(f\"{LS[3]}\\t:\\t{S[:6]}\")\n        for l in LS[3]:\n            S.remove(l)\n    elif S[:5] == LS[0]:\n        # print(f\"{LS[0]}\\t:\\t{S[:5]}\")\n        for l in LS[0]:\n            S.remove(l)\n    elif S[:5] == LS[2]:\n        # print(f\"{LS[2]}\\t:\\t{S[:5]}\")\n        for l in LS[2]:\n            S.remove(l)\n    else:\n        print(\"NO\")\n        return\nprint(\"YES\")\n", "s=list(input())\nc=0\nwhile len(s)>0:\n    p=\"1\"\n    q=\"1\"\n    r=\"1\"\n    if len(s)<5:\n        break\n    if len(s)<=7:\n        if len(s)==5:\n            if s==list(\"dream\") or s==list(\"erase\"):\n                c=1\n                break\n        elif len(s)==6:\n            if s==list(\"eraser\"):\n                c=1\n                break\n        elif len(s)==7:\n            if s==list(\"dreamer\"):\n                c=1\n                break\n    else:\n        p=s[len(s)-5:len(s)]\n        q=s[len(s)-6:len(s)]\n        r=s[len(s)-7:len(s)]\n        if p==list(\"dream\") or p==list(\"erase\"):\n            del s[len(s)-5:len(s)]\n        elif q==list(\"eraser\"):\n            del s[len(s)-6:len(s)]\n        elif r==list(\"dreamer\"):\n            del s[len(s)-7:len(s)]\n        else:\n            break\nprint(\"YES\" if c==1 else\"NO\")", "l = ['maerd', 'remaerd', 'esare', 'resare']\nflag = False\nS = input()\nS = ''.join(list(reversed(S)))\nj = 0\nfor i in range(len(S)+1):\n    if S[j:i] in l:\n        j=i\n        flag = True\n    else:\n        flag = False\nprint(\"YES\" if flag else \"NO\")", "s = input()\ns = s.replace(\"eraser\",\"\")\ns = s.replace(\"erase\",\"\")\ns = s.replace(\"dreamer\",\"\")\ns = s.replace(\"dream\",\"\")\nif s == \"\":\n  print(\"YES\")\nelse:\n  print(\"NO\")", "S=list(input())\n\nd=list('dream')\ne=list('erase')\ner=list('er')\nr=list('r')\nc=0\n\nwhile c<len(S):\n  if S[c:c+5]==d:\n    c+=5\n    if S[c:c+5]==e:\n      c+=5\n      if S[c:c+1]==r:\n        c+=1\n    elif S[c:c+2]==er:\n      c+=2\n  elif S[c:c+5]==e:\n    c+=5\n    if S[c:c+1]==r:\n      c+=1\n  else:\n    print('NO')\n    return\nprint('YES')", "s=input()\ns=s.replace('eraser','*')\ns=s.replace('erase','*')\ns=s.replace(\"dreamer\",\"*\")\ns=s.replace(\"dream\",\"*\")\nf=1\nfor i in s:\n    if i!='*':\n        f=0\n        break\nif f:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "S = input()\nlst = [\"dreamer\", \"dream\", \"eraser\", \"erase\"]\nlst = [ \"\".join(list(reversed(k))) for k in lst]\nS = \"\".join(list(reversed(S)))\n\ni  = 0\nwhile i < len(S):\n    found = False\n    for k in lst:\n        try:\n            if S[i:].index(k) == 0:\n                found = True\n                i += len(k)\n                break\n        except:\n            continue\n\n    if not found:\n        print(\"NO\")\n        return\nprint(\"YES\")\n", "from collections import deque\n\ndef solve(s):\n    stack = deque()\n    stack.append(s)\n    while len(stack) > 0:\n        top = stack.pop()\n        if top == '':\n            return 'YES'\n\n        if top[:5] == 'dream':\n            if top[5:7] == 'er':\n                stack.append(top[7:])\n            stack.append(top[5:])\n        elif top[:5] == 'erase':\n            if len(top) > 5 and top[5] == 'r':\n                stack.append(top[6:])\n            else:\n                stack.append(top[5:])\n    return 'NO'\n\nprint((solve(input())))\n", "S = input()\n\na = len(S)\n\nwhile a != 0:\n    if a - 5 < 0:\n        print(\"NO\")\n        return\n    elif S[a - 1] == \"m\" and S[a - 5:a] == \"dream\":\n        a -= 5\n    elif S[a - 1] == \"e\" and S[a - 5:a] == \"erase\":\n        a -= 5\n    elif S[a - 3:a] == \"mer\" and a - 7 >= 0 and S[a - 7:a] == \"dreamer\":\n        a -= 7\n    elif S[a - 3:a] == \"ser\" and a - 6 >= 0 and S[a - 6:a] == \"eraser\":\n        a -= 6\n    else:\n        print(\"NO\")\n        return\nprint(\"YES\")\n", "S = input()\nT = \"\"\nSS = S[::-1]\nd = \"maerd\"\ndd = \"remaerd\"\ne = \"esare\"\nee = \"resare\"\n\ncnt1 = 0\ncnt2 = 5\nfor i in range(4, len(S)):\n    if(SS[cnt1:cnt2] == dd):\n        T += dd\n        cnt1 = cnt2\n        cnt2 +=1\n    elif(SS[cnt1:cnt2] == ee):\n        T += ee\n        cnt1 = cnt2\n        cnt2 += 1\n    elif(SS[cnt1:cnt2] == d):\n        T += d\n        cnt1 = cnt2\n        cnt2 += 1\n    elif(SS[cnt1:cnt2] == e):\n        T += e\n        cnt1 = cnt2\n        cnt2 += 1\n    else:\n        cnt2 += 1\n    \nprint(\"YES\" if S == T[::-1] else \"NO\")", "s = str(input())\nisYES = True\nwhile len(s)>0:\n    if s[-5:]=='dream':\n        s = s[:-5]\n    elif s[-7:]=='dreamer':\n        s = s[:-7]\n    elif s[-5:]=='erase':\n        s = s[:-5]\n    elif s[-6:]=='eraser':\n        s = s[:-6]\n    else:\n        isYES = False\n        break\n    #print(s)\nif isYES:\n    print('YES')\nelse:\n    print('NO')", "s=input()\ni=len(s)\n\nwhile True:\n    if i==0:\n        print('YES')\n        break\n    if 6<i and s[i-7:i] == 'dreamer':\n        i-=7\n        continue\n    if 5<i and s[i-6:i] == 'eraser':\n        i-=6\n        continue\n    if 4<i and s[i-5:i] in ['dream','erase']:\n        i-=5\n        continue\n    print('NO')\n    break\n", "ar = list(input())\nl = len(ar)\nif l < 5:\n    print('NO')\nelse:\n    while True:\n        if l == 0:\n            print(\"YES\")\n            return\n        if \"\".join(ar[l-5:l]) == 'dream' or \"\".join(ar[l-5:l]) == 'erase':\n            l -= 5\n        elif \"\".join(ar[l-6:l]) == 'eraser':\n            l -= 6\n        elif \"\".join(ar[l-7:l]) == 'dreamer':\n            l -= 7\n        else:\n            print(\"NO\")\n            return\n", "import sys\nsys.setrecursionlimit(10**6)\nfrom math import floor,ceil,sqrt,factorial,log\nfrom heapq import heappop, heappush, heappushpop\nfrom collections import Counter,defaultdict,deque\nfrom itertools import accumulate,permutations,combinations,product,combinations_with_replacement\nfrom bisect import bisect_left,bisect_right\nfrom copy import deepcopy\nfrom operator import itemgetter\nfrom fractions import gcd\nmod = 10 ** 9 + 7\ninf = float('inf')\nninf = -float('inf')\n \n#\u6574\u6570input\ndef ii(): return int(sys.stdin.readline().rstrip()) #int(input())\ndef mii(): return map(int,sys.stdin.readline().rstrip().split())\ndef limii(): return list(mii()) #list(map(int,input().split()))\ndef lin(n:int): return [ii() for _ in range(n)]\ndef llint(n: int): return [limii() for _ in range(n)]\n#\u6587\u5b57\u5217input\ndef ss(): return sys.stdin.readline().rstrip() #input()\ndef mss(): return sys.stdin.readline().rstrip().split()\ndef limss(): return list(mss()) #list(input().split())\ndef lst(n:int): return [ss() for _ in range(n)]\ndef llstr(n: int): return [limss() for _ in range(n)]\n\n#\u672c\u5f53\u306b\u8caa\u6b32\u6cd5\u304b\uff1f DP\u6cd5\u3067\u306f\uff1f\uff1f\n#\u672c\u5f53\u306b\u8caa\u6b32\u6cd5\u304b\uff1f DP\u6cd5\u3067\u306f\uff1f\uff1f\n#\u672c\u5f53\u306b\u8caa\u6b32\u6cd5\u304b\uff1f DP\u6cd5\u3067\u306f\uff1f\uff1f\n\ns=list(ss())\nlens=len(s)\nflag=True\n\ns.reverse()\n\nword = (\"maerd\",\"remaerd\",\"esare\",\"resare\")\n\ncnt=0\n\nwhile cnt <lens:\n    cnt_chk=cnt\n    if \"\".join(s[cnt:cnt+5])==word[0]:\n        cnt_chk+=5\n    elif \"\".join(s[cnt:cnt+7])==word[1]:\n        cnt_chk+=7\n    elif \"\".join(s[cnt:cnt+5])==word[2]:\n        cnt_chk+=5\n    elif \"\".join(s[cnt:cnt+6])==word[3]:\n        cnt_chk+=6\n    if cnt==cnt_chk:\n        print(\"NO\")\n        return\n    else:\n        cnt=cnt_chk\nprint(\"YES\")", "S = list(input())\n\nA = ['dream', 'dreamer', 'erase', 'eraser']\n\nans = 'YES'\nl = len(S)\nwhile l>=5:\n    if S[l-5:l] == list(A[0]):\n        l -= 5\n    elif S[l-5:l] == list(A[2]):\n        l -= 5\n    elif l == 5:\n        break\n    elif S[l-6:l] == list(A[3]):\n        l -= 6\n    elif l == 6:\n        break\n    elif S[l-7:l] == list(A[1]):\n        l -= 7\n    else:\n        ans = 'NO'\n        break\nif l != 0:\n    ans = 'NO'\nprint(ans)", "S = str(input())\n\nS = S.replace('dream', '#')\nS = S.replace('erase', '.')\nS = S.replace('#er', '')\nS = S.replace('.r', '')\nS = S.replace('#', '')\nS = S.replace('.', '')\n\nif len(S) == 0:\n  print('YES')\nelse:\n  print('NO')\n", "S=input()\ni=len(S)\nans=\"NO\"\nwhile(True):\n    if(i==0):\n        ans=\"YES\"\n        break\n    if(i>=5 and S[i-5:i]==\"dream\"):\n        i-=5\n    elif(i >=5 and S[i-5:i]==\"erase\"):\n        i-=5\n    elif(i>=6 and S[i-6:i]==\"eraser\"):\n        i-=6\n    elif(i>=7 and S[i-7:i]==\"dreamer\"):\n        i-=7\n    else:\n        break\nprint(ans)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Feb  8 05:12:38 2019\n\n@author: shinjisu\n\"\"\"\n\n\ndef db(x):\n    nonlocal debug\n    if debug:\n        print(x)\n\n\n# \u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\ndef gen(tstr):\n    if len(tstr) <= len(S):\n        for w in words:\n            yield tstr + w\n            for w2 in gen(tstr + w):\n                yield w2\n\n\n# RE\ndef solve():\n    ans = False\n    for genstr in gen(''):\n        db(genstr)\n        if genstr == S:\n            ans = True\n            break\n    return ans\n\n\n# TLE\ndef solve2():\n    stack = list(words)\n    while stack != []:\n        str = stack.pop()\n        db(('pop', str))\n        if len(str) < len(S):\n            for w in words:\n                stack.append(str+w)\n        elif len(str) == len(S) and str == S:\n            return True\n    return False\n\n\n# \u9006\u65b9\u5411\u304b\u3089\u63a2\u3059\ndef solve3():\n    string = S + ' '\n    n = len(string)\n    while n > 1:\n        for w in words:\n            db((string.rfind(w, 0, n),len(w),n))\n            if string.rfind(w, 0, n) + len(w) + 1 == n:\n                break\n        else:\n            return False\n        db((n,w))\n        n -= len(w)\n    return True\n\n\ndebug = False\nwords = ('dream', 'dreamer', 'erase', 'eraser')\nS = input()\ndb(S)\nif solve3():\n    print('YES')\nelse:\n    print('NO')\n", "daydream = ['dream', 'dreamer', 'erase', 'eraser']\ns = input()\nimport sys\nwhile s:\n    for i in daydream:\n        if s.endswith(i):\n            s = s[:-len(i)]\n            break\n    else:\n        break\nelse:\n    print('YES')\n    return\nprint('NO')", "S = input()\nlast_ind = len(S)\nyes = True\nfor i in range(len(S) - 1, -1, -1):\n    if S[i:last_ind] == \"dream\" or S[i:last_ind] == \"erase\" or S[i:last_ind] == \"eraser\" or S[i:last_ind] == \"dreamer\":\n        last_ind = i\n        continue\n    if last_ind - i > 7 or i == 0:\n        yes = False\n        break\n        \nif yes:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "S = input()\nS = S[::-1]\n \nS = S.replace('resare', '')\nS = S.replace('esare', '')\nS = S.replace('remaerd', '')\nS = S.replace('maerd', '')\n \nif S:\n    print('NO')\nelse:\n    print('YES')", "S = input()\nS = S.replace(\"eraser\",\"@\").replace(\"erase\",\"@\").replace(\"dreamer\",\"@\").replace(\"dream\",\"@\")\nif set(S) == set(\"@\"):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "s = input()\nn = len(s)\nidx = 0\nwhile idx < n:\n    if idx+5 > n:\n        break\n    if s[idx:idx+5] == 'dream':\n        idx += 5\n        if idx+2 <= n and s[idx:idx+2] == 'er' and (idx+2 == n or s[idx+2:idx+3] != 'a'):\n            idx += 2\n    elif s[idx:idx+5] == 'erase':\n        idx += 5\n        if idx+1 <= n and s[idx:idx+1] == 'r':\n            idx += 1\n    else:\n        break\n\nif idx == n:\n    print('YES')\nelse:\n    print('NO')", "S = input()\nfor i in range(100000):\n  if S[len(S)-5:]==\"dream\" or S[len(S)-5:]==\"erase\":\n    S = S[:len(S)-5]\n  elif S[len(S)-7:]==\"dreamer\":\n    S = S[:len(S)-7]\n  elif S[len(S)-6:]==\"eraser\":\n    S = S[:len(S)-6]\n  elif S == \"\":\n    print(\"YES\")\n    break\n  else:\n    print(\"NO\")\n    break", "S = input()\npnt = len(S)\nwhile pnt:\n  tmp = pnt\n  if pnt >= 7:\n    if S[pnt-7:pnt] == \"dreamer\":\n      pnt -= 7\n  if pnt >= 6:\n    if S[pnt-6:pnt] == \"eraser\":\n      pnt -= 6\n  if pnt >= 5:\n    if S[pnt-5:pnt] == \"dream\" or S[pnt-5:pnt] == \"erase\":\n      pnt -= 5\n  if tmp == pnt:\n    break\nif pnt:\n  print(\"NO\")\nelse:\n  print(\"YES\")", "S = input()\n\nword_lst = ['dream', 'dreamer', 'erase', 'eraser']\nfor i in range(len(word_lst)):\n  word_lst[i] = word_lst[i][::-1]\n  \nS = S[::-1]\nans = ''\nwhile len(ans) < len(S) - 4:\n  if S[len(ans)] == 'm':\n    ans = ans + word_lst[0]\n  elif S[len(ans):len(ans)+3] == 'rem':\n    ans = ans + word_lst[1]\n  elif S[len(ans)] == 'e':\n    ans = ans + word_lst[2]\n  elif S[len(ans):len(ans)+3] == 'res':\n    ans = ans + word_lst[3]\n  else:\n    break\n\nif ans == S:\n  print('YES')\nelse:\n  print('NO')\n  \n\n", "#dream dreamer erase eraser\nimport sys\n\nS = input()\nindex = len(S)\nwhile index > 7:\n    five = S[index-5:index]\n    six = S[index-6:index]\n    seven = S[index-7:index]\n    if five == \"dream\" or five == \"erase\":\n        index -= 5\n    elif six == \"eraser\":\n        index -= 6\n    elif seven == \"dreamer\":\n        index -= 7\n    else:\n        print(\"NO\")\n        return\n\nlast = S[:index]\nif last == \"dream\" or last == \"erase\" or last == \"eraser\" or last == \"dreamer\":\n    print(\"YES\")\nelse:\n    print(\"NO\")", "# -*- coding: utf-8 -*-\n#ARC65C\nimport copy\nimport sys\n#import math\n\nhoge = input()\nn = len(hoge)\n\nwhile(1):\n\tn = len(hoge)\n\tif(n==0):\n\t\tprint(\"YES\")\n\t\treturn\n\tif(n<=4):\n\t\tprint(\"NO\")\n\t\treturn\n\telse:\n\t\tif(hoge[-5:]==\"dream\"):\n\t\t\ttmp=copy.copy(hoge[0:-5])\n\t\t\thoge=tmp\n\t\telif(hoge[-5:]==\"erase\"):\n\t\t\ttmp=copy.copy(hoge[0:-5])\n\t\t\thoge=tmp\n\t\telif(n<=5):\n\t\t\tprint(\"NO\")\n\t\t\treturn\n\t\telse:\n\t\t\tif(hoge[-6:]==\"eraser\"):\n\t\t\t\ttmp=copy.copy(hoge[0:-6])\n\t\t\t\thoge=tmp\n\t\t\telif(n<=6):\n\t\t\t\tprint(\"NO\")\n\t\t\t\treturn\n\t\t\telse:\n\t\t\t\tif(hoge[-7:]==\"dreamer\"):\n\t\t\t\t\ttmp=copy.copy(hoge[0:-7])\n\t\t\t\t\thoge=tmp\n\t\t\t\telse:\n\t\t\t\t\tprint(\"NO\")\n\t\t\t\t\treturn\n\t\n\t\n", "S = input()\nrS = S[::-1]\nkeys = ['dream', 'dreamer', 'erase', 'eraser']\nreversed_keys = [keys[i][::-1] for i in range(len(keys))]\ni = 0\n\nwhile i < len(rS):\n    if rS[i:i+5] in reversed_keys:\n        i += 5\n    elif rS[i:i+6] in reversed_keys:\n        i += 6\n    elif rS[i:i+7] in reversed_keys:\n        i += 7\n    else:\n        break\nif i == len(rS):\n    print('YES')\nelse:\n    print('NO')\n", "s = input()\ns = s.replace(\"eraser\", \"\").replace(\"erase\", \"\").replace(\"dreamer\", \"\").replace(\"dream\", \"\")\nprint((\"YES\" if s == \"\" else \"NO\"))\n", "S = input()\nN = len(S)\ni = 0\nwhile i < N:\n    sig = 0\n    S5 = S[i:i+5]\n    if S5 == 'dream':\n        sig = 1\n        if S[i+5:i+7] == 'er' and S[i+7:i+8] != 'a':\n            i += 2\n        i += 5\n    elif S5 == 'erase':\n        sig = 1\n        if S[i+5:i+6] == 'r':\n            i += 1\n        i += 5\n    if sig == 0:\n        sig = 2\n        Answer = 'NO'\n        break\nif sig != 2:\n    Answer = 'YES'\nprint(Answer)", "import sys\nsys.setrecursionlimit(10**9)\ns1 = \"maerd\"\ns2 = \"remaerd\"\ns3 = \"esare\"\ns4 = \"resare\"\n\ni = input()\ns = ''\nfor c in reversed(i):\n    s += c\n\nl = len(s)\n\ni = 0\n\n\ndef dfs(i):\n    if i == l:\n        print(\"YES\")\n        return\n    if i+5 <= l and s[i:i+5] == s1:\n        dfs(i+5)\n    elif i+7 <= l and s[i:i+7] == s2:\n        dfs(i+7)\n    elif i+5 <= l and s[i:i+5] == s3:\n        dfs(i+5)\n    elif i+6 <= l and s[i:i+6] == s4:\n        dfs(i+6)\n    else:\n        print(\"NO\")\n        return\n\n\ndfs(0)\n", "a = input()\na = a.replace(\"eraser\", \"\").replace(\"erase\", \"\").replace(\"dreamer\", \"\").replace(\"dream\", \"\")\nif len(a) == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "import sys\nsys.setrecursionlimit(4100000)\nimport math\nimport fractions\n\n\n\n'''\n1\u884c\u306eint\nN, K = map(int, input().split())\n\n1\u884c\u306estring\nS, T = input().split()\n\n1\u884c\u306e\u6574\u6570\u914d\u5217\nP = list(map(int,input().split()))\n\n\u8907\u6570\u884c2\u6570\u5024\nx = []\ny = []\nfor i in range(5):\n    x1,y1=[int(i) for i in input().split()]\n    x.append(x1)\n    y.append(y1)\n\n'''\n\n\nS = input()\n\n\ncheck = len(S)-1\n\nwhile(check >= 0):\n\n    if S[check] == \"r\":\n        if S[check-2] == \"m\":\n            remove = S[check-6: check+1]\n            if remove == \"dreamer\":\n                check -= 7\n            else:\n                print(\"NO\")\n                return\n\n\n        elif S[check-2] == \"s\":\n            remove = S[check-5: check+1]\n            \n            if remove == \"eraser\":\n                check -= 6\n            else:\n                print(\"NO\")\n                return\n\n        else:\n            print(\"NO\")\n            return\n\n    elif S[check] == \"e\":\n        remove = S[check-4: check+1]\n            \n        if remove == \"erase\":\n            check -= 5\n        else:\n            print(\"NO\")\n            return\n\n    elif S[check] == \"m\":\n        remove = S[check-4: check+1]\n            \n        if remove == \"dream\":\n            check -= 5\n        else:\n            print(\"NO\")\n            return\n\n    else:\n        print(\"NO\")\n        return\n\n\nprint(\"YES\")", "S = input() \n\nS = S.replace('eraser','') \nS = S.replace('erase','')\nS = S.replace('dreamer','')\nS = S.replace('dream','')\n\nif S == \"\":\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s=input()\ns=s.replace('eraser','')\ns=s.replace('erase','')\ns=s.replace('dreamer','')\ns=s.replace('dream','')\nif s=='':\n    print(\"YES\")\nelse :\n    print(\"NO\")", "def main():\n    S = input()[::-1]\n    d1 = 'dream'[::-1]\n    d2 = 'dreamer'[::-1]\n    e1 = 'erase'[::-1]\n    e2 = 'eraser'[::-1]\n    while len(S) > 0:\n        if S[:5] == d1:\n            S = S[5:]\n        elif S[:7] == d2:\n            S = S[7:]\n        elif S[:5] == e1:\n            S = S[5:]\n        elif S[:6] == e2:\n            S = S[6:]\n        else:\n            print('NO')\n            return\n    print('YES')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s=input()\nprint('YES' if s.replace('eraser','').replace('erase','').replace('dreamer','').replace('dream','')=='' else 'NO')", "def main():\n    import sys\n    input = sys.stdin.readline\n    \n    S = input().rstrip()\n\n    limit = len(S)//5\n\n    while limit>0 and len(S)>0:\n        if S.endswith('dreamer'):\n            S = S[:len(S)-7]\n        elif S.endswith('eraser'):\n            S = S[:len(S)-6]\n        elif S.endswith('dream'):\n            S = S[:len(S)-5]\n        elif S.endswith('erase'):\n            S = S[:len(S)-5]\n        limit-=1\n    \n    print('NO' if S else 'YES')\n\ndef __starting_point():\n    main()\n__starting_point()", "def conform(string, i, Tmember):\n    for t in Tmember:\n        if s[i] != t:\n            print(\"NO\")\n            return\n        else:\n            i += 1\n    return i\n\n\nS = str(input())\nT = [\"maerd\", \"remaerd\", \"esare\", \"resare\"]\ns = \"\"\nfor i in range(1, len(S)+1):\n    s += S[-i]\ncount = 0\nwhile(count < len(s)):\n    flag = 4\n    if s[count] == \"m\":\n        flag = 0\n    elif (s[count] == \"r\")and(s[count+1] == \"e\")and(s[count+2] == \"m\"):\n        flag = 1\n    elif s[count] == \"e\":\n        flag = 2\n    elif (s[count] == \"r\")and(s[count+1] == \"e\")and(s[count+2] == \"s\"):\n        flag = 3\n    else:\n        print(\"NO\")\n        return\n    count = conform(s, count, T[flag])\nprint(\"YES\")\n", "# coding: utf-8\n\ndef YESNO(ans, yes=\"YES\", no=\"NO\"):\n    print(([no, yes][ans]))\n\nII = lambda: int(input())\nMI = lambda: list(map(int, input().split()))\nMIL = lambda: list(MI())\nMIS = lambda: input().split()\n\n\ndef check(s):\n    if s == \"\":\n        return True\n    if s[:5] in [\"dream\", \"erase\"]:\n        return True\n    return False\n\n\ndef main():\n    S = input()\n    i = 0\n    l = len(S)\n    while i < l:\n        if S[i:i + 7] == \"dreamer\" and check(S[i + 7:]):\n            i += 7\n        elif S[i:i + 6] == \"eraser\" and check(S[i + 6:]):\n            i += 6\n        elif check(S[i:]):\n            i += 5\n        else:\n            return False\n    return True\n\ndef __starting_point():\n    YESNO(main())\n\n__starting_point()", "s=input()\nimport sys\nwhile len(s)>0:\n    if s[-5:]=='dream':\n        s=s[:-5]\n    elif s[-7:]=='dreamer':\n        s=s[:-7]\n    elif s[-5:]=='erase':\n        s=s[:-5]\n    elif s[-6:]=='eraser':\n        s=s[:-6]\n    else:\n        print('NO')\n        return\nprint('YES')", "s = input()\nt = s[::-1]\ni = 0\nk = len(s)\nwhile i <= k-5:\n  if k-i >= 7:\n    if t[i] != 'r':\n      if t[i:i+5] == 'maerd':\n        i += 5\n      elif t[i:i+5] == 'esare':\n        i += 5\n      else:\n        i = k+1\n    else:\n      if t[i:i+6] == 'resare':\n        i += 6\n      elif t[i:i+7] == 'remaerd':\n        i += 7\n      else:\n        i = k+1\n  elif k-i == 6:\n    if t[i:i+6] == 'resare':\n      i = k\n    else:\n      i = k+1\n  else:\n    if t[i:i+5] == 'esare':\n      i = k\n    elif t[i:i+5] == 'maerd':\n      i = k\n    else:\n      i = k+1\nif i == k:\n  print('YES')\nelse:\n  print('NO')", "s=(input())[::-1]\nT=[\"dream\", \"dreamer\", \"erase\",\"eraser\"]\nT=[x[::-1] for x in T]\ncur=\"\"\nfor e in s:\n    cur+=e\n    if(cur in T):\n        cur=\"\"\nprint((\"YES\" if cur==\"\" else \"NO\"))\n", "S = input()\n\nC = S[::-1]\nwhile C:\n    if C[:5] == \"maerd\":\n        C = C[5:]\n    elif C[:7] == \"remaerd\":\n        C = C[7:]\n    elif C[:5] == \"esare\":\n        C = C[5:]\n    elif C[:6] == \"resare\":\n        C = C[6:]\n    else:\n        print(\"NO\")\n        return\nprint(\"YES\")", "import re\nprint('YES' if re.compile(r'^(dream|dreamer|erase|eraser)+$').match(input()) else 'NO')", "S = input()\n\nL = [\"eraser\",\"erase\",\"dreamer\",\"dream\"]\n \nwhile len(S) > 0:\n  for i in range(len(L)):\n    if L[i] in S:\n      S = S.replace(L[i],\"\")\n  else:break\n \nif len(S) == 0:\n  print(\"YES\")\nelse:print(\"NO\")", "\nS = input()\nS = S[::-1]\n\nl = ['maerd','remaerd','esare','resare']\ni = 0\nwhile i < len(S):\n    for w in l:\n        if w == S[i:i+len(w)]:\n            i += len(w)\n            break\n    else:\n        print('NO')\n        return\nprint('YES')", "s=input()\n\nwhile len(s)>0:\n    if s[-5:] in [\"dream\",\"erase\"]: s=s[:-5]\n    elif s[-6:]==\"eraser\": s=s[:-6]\n    elif s[-7:]==\"dreamer\": s=s[:-7]\n    else: break\n\n\nprint((\"YES\" if s==\"\" else \"NO\"))\n", "s=list(input())\nn = len(s)\n\nc=0\nk=0\nwhile c==0:\n    if k ==n:\n        c = 1\n    else:\n        \n        if k + 7 <= n-1 and s[k]=='d' and s[k+1] == 'r' and s[k+2] == 'e' and s[k+3] == 'a' and s[k+4] == 'm' and s[k+5] == 'e' and s[k+6] == 'r' and s[k+7] == 'a':\n            k += 5\n        elif k + 6 <= n-1 and s[k]=='d' and s[k+1] == 'r' and s[k+2] == 'e' and s[k+3] == 'a' and s[k+4] == 'm' and s[k+5] == 'e' and s[k+6] == 'r':\n            k += 7\n        elif k + 4 <= n-1 and s[k]=='d' and s[k+1] == 'r' and s[k+2] == 'e' and s[k+3] == 'a' and s[k+4] == 'm':\n            k += 5\n        elif k+6 <= n-1 and s[k] == 'e' and s[k+1] == 'r' and s[k+2] == 'a' and s[k+3] == 's' and s[k+4] == 'e' and  s[k+5] == 'r' and s[k+6] == 'a':\n            k+= 5\n        elif k+5 <= n-1 and s[k] == 'e' and s[k+1] == 'r' and s[k+2] == 'a' and s[k+3] == 's' and s[k+4] == 'e' and  s[k+5] == 'r':\n            k += 6\n        elif k+4 <= n-1 and s[k] == 'e' and s[k+1] == 'r' and s[k+2] == 'a' and s[k+3] == 's' and s[k+4] == 'e':\n            k += 5\n        else:\n            c = 1\n\nif k == n:\n    print('YES')\nelse:\n    print('NO')", "S = input()\n\nS = S.replace(\"eraser\", \"\")\nS = S.replace(\"erase\", \"\")\nS = S.replace(\"dreamer\", \"\")\nS = S.replace(\"dream\", \"\")\n\nif S == \"\":\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "S = input()\nd = ['dream', 'dreamer', 'erase', 'eraser']\nd = [i[::-1] for i in d]\n\nS = S[::-1]\ni = 0\nwhile i < len(S):\n    ok = False\n    for j in d:\n        if S[i:i + len(j)] == j:\n            i += len(j)\n            ok = True\n            break\n    if ok is False:\n        print(\"NO\")\n        import sys\n        return\n\nprint(\"YES\")\n", "s = list(input())\ns.reverse()\ns = ''.join(map(str, s))\ncount = 0\nword = ['maerd', 'remaerd', 'resare', 'esare']\n\nwhile count <= len(s)-8:\n  counttemp = count\n  for i in range(4):\n    w = word[i]\n    if s[count:count+len(w)] == w:\n      count += len(w)\n  if counttemp == count:\n    break\n\nif s[count:] in word or s[count:] =='':\n  print('YES')\nelse:\n  print('NO')", "S=input()\nwhile True:\n  if S=='':\n    print('YES')\n    break\n  else:\n    a = S[-5:] in ('dream', 'erase')\n    b = S[-6:] in ('eraser')\n    c = S[-7:] in ('dreamer')\n    if not (a or b or c):\n      print('NO')\n      break\n    elif a:\n      S = S[:-5]\n    elif b:\n      S = S[:-6]\n    elif c:\n      S = S[:-7]", "import sys\nS = input()\nnum = len(S)\nS = S + \"zzzzzzzzzzzzzzzzzzzzzz\"\ncur = 0\nwhile cur < num:\n    if S[cur] == 'd':\n        if S[cur:cur+11] == 'dreameraser':\n            cur += 11\n        elif S[cur:cur+10] == 'dreamerase':\n            cur += 10\n        elif S[cur:cur+7] == 'dreamer':\n            cur += 7\n        elif S[cur:cur+5] == 'dream':\n            cur += 5\n        else:\n            print('NO')\n            return\n    elif S[cur] == 'e':\n        if S[cur:cur+6] == 'eraser':\n            cur += 6\n        elif S[cur:cur+5] == 'erase':\n            cur += 5\n        else:\n            print('NO')\n            return\n    else:\n        print('NO')\n        return\n    if cur == num:\n        print('YES')\n        return", "S = input()\nN = len(S)\nwords = ['dream', 'dreamer', 'erase', 'eraser']\nstack = [0]\nans = \"NO\"\nwhile stack:\n  ind = stack.pop()\n  if ind == N:\n    ans = 'YES'\n    break\n  for w in words:\n    end = ind+len(w)\n    if S[ind:end] == w:\n      stack.append(end)\nprint(ans)", "s = input()\n\ns = s[::-1]\n\ntop = 0\nwhile top < len(s):\n    if s[top:top+5] == \"maerd\":\n        top += 5    \n    elif s[top:top+7] == \"remaerd\":\n        top += 7\n    elif s[top:top+5] == \"esare\":\n        top += 5\n    elif s[top:top+6] == \"resare\":\n        top += 6\n    else:\n        print(\"NO\")\n        return\n\nprint(\"YES\")", "# coding: utf-8\n# Your code here!\n\nS = input()\ns = S.replace('eraser','').replace('erase','').replace('dreamer','').replace('dream','')\nif s == '':\n    print('YES')\nelse:\n    print('NO')", "from itertools import product, takewhile\n\n\ndef main():\n    words = [\"eraser\", \"erase\",  \"dreamer\", \"dream\"]\n    S = input()[::-1]\n    for word in words:\n        S = S.replace(word[::-1], '')\n    # print(S)\n    if len(S) > 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    s = input().strip()[::-1]\n\n    while True:\n        ok = False\n        if len(s) >= 7:\n            if s[:7] == \"remaerd\":\n                s = s[7:]\n                ok = True\n        if len(s) >= 6:\n            if s[:6] == \"resare\":\n                s = s[6:]\n                ok = True\n        if len(s) >= 5:\n            if s[:5] == \"esare\" or s[:5] == \"maerd\":\n                s = s[5:]\n                ok = True\n        if not ok:\n            break\n    \n    # print(s)\n    if len(s) > 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\ndef __starting_point():\n    main()\n__starting_point()", "S = input().strip()\n\nL = len(S)\nposs = [False for _ in range(L+1)]\nposs[0] = True\n\nwds = ['dream', 'dreamer', 'erase', 'eraser']\n\nfor i in range(L):\n  if not poss[i]:\n    continue\n  \n  for s in wds:\n    if i + len(s) <= L:\n      if S[i:i+len(s)] == s:\n        poss[i+len(s)] = True\n\nif poss[L]:\n  print(\"YES\")\nelse:\n  print(\"NO\")", "S = input()\ngiven = ['dream', 'dreamer', 'erase', 'eraser']\n\n\nwhile True:\n    if len(S) == 0:\n        break\n    judge = [S.endswith(i) for i in given]\n    if True in judge:\n        index = judge.index(True)\n        length = len(given[index])\n        S = S[:-length]\n    else:\n        print('NO')\n        return\n\nprint('YES')\n", "s=input()\ns=s.replace('eraser','#')\ns=s.replace('erase','#')\ns=s.replace('dreamer','#')\ns=s.replace('dream','#')\nf=0\nfor i in s:\n    if(i!='#'):\n        f=1\n        break\nif(f==0):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s = input()\ns = s[::-1]\nhoge = ['maerd', 'remaerd', 'esare', 'resare']\ni = 0\nj = 0\nwhile i < len(s):\n    ans = ''\n    while j < len(s):\n        ans += s[j]\n        if len(ans) > 7:\n            print('NO')\n            return\n        if ans in hoge:\n            break\n        else:\n            j += 1\n    j += 1\n    i = j\nprint('YES')\n", "s=input(str())\nlst=[\"eraser\",\"erase\",\"dreamer\",\"dream\"]\nfor t in lst:\n    s=s.replace(t,\"\")\nif s==\"\":\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s=input()\ns=s[::-1]\ntmp=['dream','dreamer', 'erase', 'eraser']\nfor i in range(4):\n  tmp[i]=tmp[i][::-1]\nwhile 1:\n  if len(s)>=5:\n    if s[:5]==tmp[0]:\n      if len(s)>5:\n        s=s[5:]\n      else:\n        s=[]\n      continue\n    if s[:5]==tmp[2]:\n      if len(s)>5:\n        s=s[5:]\n      else:\n        s=[]\n      continue\n    if len(s)>=6:\n      if s[:6]==tmp[3]:\n        if len(s)>6:\n          s=s[6:]\n        else:\n          s=[]\n        continue\n      if len(s)>=7:\n        if s[:7]==tmp[1]:\n          if len(s)>7:\n            s=s[7:]\n          else:\n            s=[]\n          continue\n  break\n\nif s==[]:\n  print('YES')\nelse:\n  print('NO')\n", "import re\n\nS = input()\nflag = True\nwhile(flag):\n    if(len(S)==0):\n        flag = False\n    if(S[-5:]=='dream' or S[-5:]=='erase'):\n        S=S[:-5]\n    elif(S[-6:]=='eraser'):\n        S=S[:-6]\n    elif(S[-7:]=='dreamer'):\n        S=S[:-7]\n    else:\n        break\nif(flag):\n    print('NO')\nelse:\n    print('YES')\n", "reverse_s = input().strip()[::-1]\n\nwhile True:\n    if len(reverse_s) == 0:\n        print(\"YES\")\n        return\n    if reverse_s.startswith('maerd'):\n        reverse_s = reverse_s[len('maerd'):]\n    elif reverse_s.startswith('remaerd'):\n        reverse_s = reverse_s[len('remaerd'):]\n    elif reverse_s.startswith('esare'):\n        reverse_s = reverse_s[len('esare'):]\n    elif reverse_s.startswith('resare'):\n        reverse_s = reverse_s[len('resare'):]\n    else:\n        print(\"NO\")\n        return\n", "import sys\nimport math\nimport itertools\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    word = [\"dream\", \"dreamer\",\"erase\", \"eraser\"]\n    word = [i[::-1] for i in word]\n    S = input().rstrip()\n    S = S[::-1]\n\n    while True:\n        length = len(S)\n        for w in word:\n            length2 = len(w)\n            if length >= length2 and S[0:length2] == w:\n                S = S[length2:length]\n        if len(S) == length:\n            break\n    if len(S) == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n    \ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nimport sys\nINF = float(\"inf\")\n\nsys.setrecursionlimit(10**5)\n\n\ndef yes():\n    print(\"YES\")  # type: str\n\n\ndef no():\n    print(\"NO\")  # type: str\n\n\ntemplate = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\n\n\ndef dfs(s, i):\n    if i == len(s):\n        return True\n    for t in template:\n        if s[i:].startswith(t):\n            if dfs(s, i+len(t)):\n                return True\n    return False\n\n\ndef solve(S: str):\n    if dfs(S, 0):\n        yes()\n    else:\n        no()\n\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)  # type: str\n    solve(S)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S = input()\nS = S[::-1]\nsnipetts = [s[::-1] for s in ['dream', 'dreamer', 'erase', 'eraser']]\n\nfound = True\nindex = 0\nwhile found:\n    found = False\n    for s in snipetts:\n        if S[index:index+len(s)] == s:\n            index += len(s)\n            found = True\n            break\n\nif index == len(S):\n    print('YES')\nelse:\n    print('NO')", "s = str(input())\nwords = [\"dream\",\"erase\",\"eraser\",\"dreamer\"]\ni = len(s)\nwhile i>0:\n    if s[-5:] in words:\n        s = s[:-5]\n        i -= 5\n    elif s[-6:] in words:\n        s = s[:-6]\n        i -= 6\n    elif s[-7:] in words:\n        s = s[:-7]\n        i -= 7\n    else:\n        break\nif i==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "if not input().replace('eraser', '').replace('erase', '').replace('dreamer', '').replace('dream', ''):\n  print('YES')\nelse:\n  print('NO')", "#!/usr/bin/env python3\n\ndef II(): return int(input())\ndef MII(): return list(map(int, input().split()))\ndef LII(): return list(map(int, input().split()))\n\ndef main():\n    S = input()\n    S = S[::-1]\n    d = ['maerd', 'remaerd', 'esare', 'resare']\n\n    f = False\n    while True:\n        for di in d:\n            if S.startswith(di):\n                f = False\n                S = S.replace(di, '', 1)\n\n        if f:\n            break\n        f = True\n\n\n    if len(S) == 0:\n        print('YES')\n    else:\n        print('NO')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def solve(S):\n    N = len(S)\n    i = 0\n    while i < N:\n        if N - i < 5:\n            return False\n        if S[i: i + 5] == \"dream\":\n            if i + 7 <= N and S[i + 5: i + 7] == \"er\":\n                if i + 7 == N or S[i + 7] != \"a\":\n                    i += 7\n                else:\n                    i += 5\n            else:\n                i += 5\n        elif S[i: i + 5] == \"erase\":\n            if i + 5 < N and S[i + 5] == \"r\":\n                i += 6\n            else:\n                i += 5\n        else:\n            return False\n    return True\n\nS = input()\nprint(\"YES\" if solve(S) else \"NO\")", "# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport _collections\nimport string\nfrom functools import lru_cache\nimport heapq\n\nclass cin():\n    def int():\n        return int(sys.stdin.readline().rstrip())\n    def string():\n        return sys.stdin.readline().rstrip()\n    def mapInt():\n        return [int(x) for x in cin.string().split()]\n    def stringList(n):\n        return [input() for i in range(n)]\n    def intListList(n):\n        return [cin.mapInt() for i in range(n)]\n    def intColsList(n):\n        return [int(input()) for i in range(n)]\n        \nclass Math():\n    def gcd(a,b):\n        if b == 0:\n            return a\n        return Math.gcd(b,a % b)\n    def lcm(a,b):\n        return (a * b) // Math.gcd(a,b)\n    def roundUp(a,b):\n        return -(-a // b)\n    def toUpperMultiple(a,x):\n        return Math.roundUp(a,x) * x\n    def toLowerMultiple(a,x):\n        return (a // x) * x\n    def nearPow2(n):\n        if n <= 0:\n            return 0\n        if n & (n - 1) == 0:\n            return n\n        ret = 1\n        while(n > 0):\n            ret <<= 1\n            n >>= 1\n        return ret\n    def isPrime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        d = int(n ** 0.5) + 1\n        for i in range(3,d + 1,2):\n            if n % i == 0:\n                return False\n        return True\n\n\nMOD = int(1e09) + 7\n\ndef main():\n    S = cin.string()\n    while len(S) != 0:\n        if S[-5:] == \"dream\":\n            S = S[:-5]\n        elif S[-7:] == \"dreamer\":\n            S = S[:-7]\n        elif S[-5:] == \"erase\":\n            S = S[:-5]\n        elif S[-6:] == \"eraser\":\n            S = S[:-6]\n        else:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "S = input()\nS = S[::-1]\n\nwhile True:\n    if S[:5] == \"maerd\":\n        S = S[5:]\n    elif S[:7] == \"remaerd\":\n        S = S[7:]\n    elif S[:5] == \"esare\":\n        S = S[5:]\n    elif S[:6] == \"resare\":\n        S = S[6:]\n    else:\n        break\n\nif len(S) == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n", "import sys\nsys.setrecursionlimit(10**9)\n\ns = input()\nl = len(s)\n\n\ndef dfs(i):\n   #    print(\"->\", s[i:])\n    if i == l:\n        print(\"YES\")\n        return\n    if s[i:i+5] == \"dream\":\n        if i+6 < l and s[i+5:i+7] == \"er\":\n            dfs(i+7)\n        dfs(i+5)\n    elif s[i:i+5] == \"erase\":\n        if i+5 < l and s[i+5] == \"r\":\n            dfs(i+6)\n        dfs(i+5)\n\n\ndfs(0)\nprint(\"NO\")\n", "s = input()\nwhile s:\n    m = [t for t in ['dream', 'dreamer', 'erase', 'eraser'] if s.endswith(t)]\n    if not m:\n        print('NO')\n        return\n    s = s[:-len(m[0])]\nprint('YES')", "S = input()\nt = len(S)\nL = [(\"dream\", 5), (\"dreamer\", 7), (\"erase\", 5), (\"eraser\", 6)]\nwhile t > 0:\n    for w, l in L:\n        if S.rfind(w, 0, t) == t - l:\n            t -= l\n            break\n    else:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")\n", "S = input()\nT = ['dream', 'dreamer', 'erase', 'eraser']\n\nrS = str(S[:: -1])\nrT = [str(t[:: -1]) for t in T]\n\nnow = 0\nwhile now < len(S):\n    for t in rT:\n        if t == rS[now: now + len(t)]:\n            now += len(t)\n            break\n    else:\n        print('NO')\n        return\n\nprint('YES')\n", "ar = list(input())\nwhile True:\n    a = len(ar)\n    if a == 0:\n        print(\"YES\")\n        break\n    if \"\".join(ar[a-5:a]) == \"dream\" or \"\".join(ar[a-5:a]) == \"erase\":\n        del ar[a-5:a]\n    elif \"\".join(ar[a-6:a]) == \"eraser\":\n        del ar[a-6:a]\n    elif \"\".join(ar[a-7:a]) == \"dreamer\":\n        del ar[a-7:a]\n    else:\n        print(\"NO\")\n        break", "S = list(input())\n\ni = len(S)-1\nwhile i >= 4:\n    if S[i-4:i+1] == ['d', 'r', 'e', 'a', 'm'] or S[i-4:i+1] == ['e', 'r', 'a', 's', 'e']:\n        i -= 5\n    elif i-5 >= 0 and S[i-5:i+1] == [\"e\", \"r\", \"a\", \"s\", \"e\", \"r\"]:\n        i -= 6\n    elif i-6 >= 0 and S[i-6:i+1] == [\"d\", \"r\", \"e\", \"a\", \"m\", \"e\", \"r\"]:\n        i -= 7\n    else:\n        break\n        \nif i == -1:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "s = input()\n\nsearch = []\nsearch.append(s)\nfound = False\n\nwhile len(search) > 0:\n    se = search[0]\n    # print(se, search)\n    search = search[1:]\n    if se in (\"dream\", \"dreamer\", \"erase\", \"eraser\"):\n        print(\"YES\")\n        found = True\n        break\n    if len(se) < 5:\n        continue\n    if se[0:5] in (\"dream\", \"erase\"):\n        search.append(se[5:])\n    if se[0:6] in (\"eraser\"):\n        search.append(se[6:])\n    if se[0:7] in (\"dreamer\"):\n        search.append(se[7:])\n\nif not found:\n    print(\"NO\")\n", "s = input()\ns = s[::-1]\nlis = ['remaerd', 'resare', 'esare', 'maerd']\ni = 0\nj = 0\n#s = s[::-1]\nwhile i < len(s):\n    tmp = ''\n    while j < len(s):\n        tmp += s[j]\n        #print(tmp)\n        if len(tmp) == 8:\n            print('NO')\n            return\n        elif tmp in lis:\n            i = j + 1\n            j = i\n            break\n        else:\n            j += 1\nprint('YES')", "S=input()\nT=\"\"\nl=[\"maerd\",\"remaerd\",\"esare\",\"resare\"]\nflag=True\nfor i in range(len(S)):\n    T=T+S[len(S)-1-i]\n    if T in l:\n        T=\"\"\n    if len(T)>7:\n        flag=False\n        break\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "import sys\ninput = sys.stdin.readline\nS = input()[: -1]\ndp = [0] * (len(S) + 1)\ndp[0] = 1\nfor i in range(len(S)):\n  if i + 5 <= len(S):\n    if S[i: i + 5] == \"dream\": dp[i + 5] += dp[i]\n    if S[i: i + 5] == \"erase\": dp[i + 5] += dp[i]\n  if i + 7 <= len(S):\n    if S[i: i + 7] == \"dreamer\": dp[i + 7] += dp[i]\n  if i + 6 <= len(S):\n    if S[i: i + 6] == \"eraser\": dp[i + 6] += dp[i]\nif dp[-1]: print(\"YES\")\nelse: print(\"NO\")", "S=input()\na=[\"dream\",\"dreamer\",\"erase\",\"eraser\",\"dreamerase\",\"dreameraser\"]\n\nnumlist=[0,0,0,0,0,0]\nfor i in range(len(a)):\n    numlist[i]=S.count(a[i])\nnumlist[0]-=numlist[1]\nnumlist[2]-=numlist[3]\nnumlist[4]-=numlist[5]\nnumlist[1]-=(numlist[4]+numlist[5])   #\u8aa4\u3063\u3066dreamer\u3067\u6570\u3048\u305f\u5206\u3092\nnumlist[0]+=(numlist[4]+numlist[5])   #dream\u306b\u8a08\u4e0a\u3057\u306a\u304a\u3059\ntotal=numlist[0]*5+numlist[1]*7+numlist[2]*5+numlist[3]*6\nif total==len(S):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s=input()\na=\"\"\nfor i in s[::-1]:\n    a=i+a\n    if a in [\"dream\",\"dreamer\",\"erase\",\"eraser\"]:\n        a=\"\"\nprint(\"NO\" if len(a) else \"YES\") ", "S = input()[::-1]\nn = len(S)\ncount = 0\nflag = True\n\nwhile count<n:\n    if S[count:count+5] == \"dream\"[::-1]:\n        count += 5\n    elif S[count:count+7] == \"dreamer\"[::-1]:\n        count += 7\n    elif S[count:count+5] == \"erase\"[::-1]:\n        count += 5\n    elif S[count:count+6] == \"eraser\"[::-1]:\n        count += 6\n    else:\n        flag = False\n        break\n\nprint(\"YES\") if flag else print(\"NO\")", "s=input()\ns=s.replace('eraser','#')\ns=s.replace('erase','#')\ns=s.replace('dreamer','#')\ns=s.replace('dream','#')\nf=1\nfor it in s:\n    if it !='#':\n        f=0\n        break\n\nif f==1:\n    print(\"YES\")\nelse :\n    print(\"NO\")"]