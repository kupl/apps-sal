["n,m=list(map(int,input().split()))\nf=[input() for _ in range(n)]\ndef clr(ss):\n    cc = None\n    for s in ss:\n        for c in s:\n            if cc is None:\n                cc = c\n            elif cc != c:\n                return None\n    return cc\nif n%3 == 0:\n    s = set()\n    for i in range(0,n,n//3):\n        ret = clr(f[i:i+n//3])\n        if ret is None:\n            continue\n        s.add(ret)\n    if len(s) == 3:\n        print('YES')\n        return\nif m%3 == 0:\n    s = set()\n    for j in range(0,m,m//3):\n        ff = []\n        for i in f:\n            ff.append(i[j:j+m//3])\n        ret = clr(ff)\n        if ret is None:\n            continue\n        s.add(ret)\n    if len(s) == 3:\n        print('YES')\n        return\nprint('NO')\n", "#! /usr/bin/env python3\n\nn, m = list(map(int, input().split()))\na = [input() for i in range(n)]\nb = [''.join(a[i][j] for i in range(n)) for j in range(m)]\n\n\ndef check(a, n, m):\n    if n % 3 != 0:\n        return False\n    s = a[0 * n // 3], a[1 * n // 3], a[2 * n // 3]\n    if set(s) != set([x * m for x in 'RGB']):\n        return False\n    for i in range(n):\n        if a[i] != s[i * 3 // n]:\n            return False\n    return True\n\n\nif check(a, n, m) or check(b, m, n):\n    print('YES')\nelse:\n    print('NO')\n", "def check_flag(flag, n, m):\n    if n % 3 > 0 and m % 3 > 0:\n        return False\n\n    if n % 3 == 0:\n        nrows = int(n / 3)\n\n        set1 = set(\"\".join(flag[:nrows]))\n        set2 = set(\"\".join(flag[nrows:2*nrows]))\n        set3 = set(\"\".join(flag[2*nrows:]))\n\n        if len(set1) + len(set2) + len(set3) == 3 and len(set1.union(set2.union(set3))) == 3:\n            return True\n\n    if m % 3 == 0:\n        ncols = int(m / 3)\n\n        set1 = set(\"\".join([row[:ncols] for row in flag]))\n        set2 = set(\"\".join([row[ncols:2*ncols] for row in flag]))\n        set3 = set(\"\".join([row[2*ncols:] for row in flag]))\n\n        if len(set1) + len(set2) + len(set3) == 3 and len(set1.union(set2.union(set3))) == 3:\n            return True\n\n    return False\n\n\nn, m = [int(i) for i in input().strip(\" \").split(\" \")]\n\nflag = []\nfor _ in range(n):\n    flag.append(input().strip(\" \"))\n\nif check_flag(flag, n, m):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "import sys\n\n\ndef main():\n    n, m = list(map(int, sys.stdin.readline().split()))\n    if n % 3 != 0 and m % 3 != 0:\n        print(\"NO\")\n        return\n    f = []\n    for i in range(n):\n        f.append(sys.stdin.readline())\n\n    ok = True\n    if f[0][0] == f[n - 1][0]:  # vertical\n        if m % 3 != 0:\n            ok = False\n        else:\n            sz = int(m / 3)\n            if f[0][0] == f[0][sz] or f[0][0] == f[0][2 * sz] or f[0][2 * sz] == f[0][sz]:\n                ok = False\n            else:\n                for k in range(3):\n                    c = f[0][k * sz]\n                    for i in range(n):\n                        for j in range(k * sz, (k + 1) * sz):\n                            if c != f[i][j]:\n                                ok = False\n                                break\n                        if not ok:\n                            break\n                    if not ok:\n                        break\n\n    else:  # horizontal\n        if n % 3 != 0:\n            ok = False\n        else:\n            sz = int(n / 3)\n            if f[0][0] == f[sz][0] or f[0][0] == f[2 * sz][0] or f[2 * sz][0] == f[sz][0]:\n                ok = False\n            else:\n                for k in range(3):\n                    c = f[k * sz][0]\n                    for i in range(k * sz, (k + 1) * sz):\n                        for j in range(m):\n                            if c != f[i][j]:\n                                ok = False\n                                break\n                        if not ok:\n                            break\n                    if not ok:\n                        break\n\n    if ok:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nmain()\n", "n, m = list(map(int, input().split()))\n\nflag = []\n\ndef letterwidth(i):\n    res = flag[i][0]\n    for item in flag[i]:\n        if item != res:\n            return None\n    return res\ndef letterheight(i):\n    res = flag[0][i]\n    for j in range(n):\n        if flag[j][i] != res:\n            return None\n    return res\n\nfor i in range(n):\n    flag.append(input())\n\nresult = False\n\nif(n % 3 == 0 and not result):\n    w = n // 3\n    letters = []\n    for i in range(n):\n        curres = letterwidth(i)\n        letters.append(curres)\n        if curres is None:\n            break\n    if(letters.count(None) == 0):\n        answers = []\n        counter = 0\n        for i in range(3):\n            res = letters[counter]\n            answers.append(res)\n            counter += 1\n            for j in range(w - 1):\n                if(letters[counter] != res):\n                    letters.append(None)\n                    break\n                counter += 1\n            if(letters.count(None) > 0):\n                break\n        if(letters.count(None) == 0):\n            if(len(answers) == len(set(answers))):\n                result = True\nif(m % 3 == 0 and not result):\n    w = m // 3\n    letters = []\n    for i in range(m):\n        curres = letterheight(i)\n        letters.append(curres)\n        if curres is None:\n            break\n    if(letters.count(None) == 0):\n        answers = []\n        counter = 0\n        for i in range(3):\n            res = letters[counter]\n            answers.append(res)\n            counter += 1\n            for j in range(w - 1):\n                if(letters[counter] != res):\n                    letters.append(None)\n                    break\n                counter += 1\n            if(letters.count(None) > 0):\n                break\n        if(letters.count(None) == 0):\n            if(len(answers) == len(set(answers))):\n                result = True\nif(result):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "def matrixTranspose( matrix ):\n    if not matrix: return []\n    return [ [ row[ i ] for row in matrix ] for i in range( len( matrix[ 0 ] ) ) ]\ndef f(x):\n    #print(x)\n    bool=True\n    b,r,g=0,0,0\n    col=['e']\n    for row in x:\n         if all(el=='R' for el in row):\n             r+=1\n             if col[-1] != 'r':\n                 col.append('r')\n         elif all(el=='G' for el in row):\n             g+=1\n             if col[-1] != 'g':\n                 col.append('g')\n         elif all(el=='B' for el in row):\n             b+=1\n             if col[-1] != 'b':\n                 col.append('b')\n         else:\n             bool=False\n             break\n    return (bool and b==g==r and sorted(col)==sorted(list(set(col))))\n    \nn,m=map(int,input().split())\na=[0]*n\nfor i in range(n):\n    a[i]=list(input())\nprint('YES' if f(a) or f(matrixTranspose(a)) else 'NO')", "n, m = map(int, input().split(\" \"))\nflag2 = 0\nflag1 = 0\nif (n % 3 == 0):\n\tflag1 = 1\nif (m % 3 == 0):\n\tflag2 = 1\ns = []\nf = [\"\"] * m\nfor i in range(n):\n\tt = input()\n\ts.append(t)\n\tfor j in range(m):\n\t\tf[j] += t[j]\nH = [0, 0, 0]\np = []\nfor i in s:\n\tif (i == 'R' * m):\n\t\tH[0] += 1\n\t\tp.append(0)\n\tif (i == 'B' * m):\n\t\tH[1] += 1\n\t\tp.append(1)\n\tif (i == 'G' * m):\n\t\tH[2] += 1\n\t\tp.append(2)\ncnt = 0\nfor i in range(1, len(p)):\n\tif (p[i] != p[i-1]):\n\t\tcnt += 1\nif (H[0] == n / 3 and H[1] == n / 3 and H[2] == n / 3 and flag1 and cnt == 2):\n\tprint(\"YES\")\nelse:\n\tH = [0, 0, 0]\n\tp = []\n\tfor i in f:\n\t\tif (i == 'R' * n):\n\t\t\tH[0] += 1\n\t\t\tp.append(0)\n\t\tif (i == 'B' * n):\n\t\t\tH[1] += 1\n\t\t\tp.append(1)\n\t\tif (i == 'G' * n):\n\t\t\tH[2] += 1\n\t\t\tp.append(2)\n\tcnt = 0\n\tfor i in range(1, len(p)):\n\t\tif (p[i] != p[i-1]):\n\t\t\tcnt += 1\n\tif (H[0] == m / 3 and H[1] == m / 3 and H[2] == m / 3 and flag2 and cnt == 2):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "import re, sys\n\nn, m = list(map(int, input().split()))\n\ns = sys.stdin.read()\nd = s.split('\\n')\nd.remove(\"\")\nrgb = \"RGB\"\nf = True\n#print(s)\n#print(d)\nfor c in rgb:\n    t = re.findall(c + \"+\", d[0])\n    if len(t) != 1 or len(t[0]) != m / 3:\n        f = False\n\nif f:\n    for st in d:\n        if st != d[0]:\n            f = False\n\nif f:\n    print(\"YES\")\n    return\n\ns = s.replace('\\n', '')\nf = True\nfor c in rgb:\n    t = re.findall(c + \"+\", s)\n    if len(t) != 1 or len(t[0]) != m * n / 3:\n        f = False\n\nif f:\n    print(\"YES\")\n    return\n\nprint(\"NO\")\n", "a, b = map(int, input().split())\nrows = [list(input()) for x in range(a)]\ncolumns = [[x[y] for x in rows] for y in range(b)]\ndef check(l):\n    line = []\n    for x in l:\n        p = x[0]\n        for y in x:\n            if y != p:\n                break\n        else:\n            line.append(p)\n            continue\n        return [False, line]\n    else:\n        return [True, line]\ndef colors(c, l):\n    p = c[1][0]\n    n = 0\n    colors = []\n    for x in c[1]:\n        if x != p:\n            colors.append([p, n])\n            p = x\n            n = 1\n        else:\n            n += 1\n    colors.append([p, n])\n    if len(colors) == 3 and l % 3 == 0:\n        m = l // 3\n        letters = [\"R\", \"G\", \"B\"]\n        for x in colors:\n            p, q = x[0], x[1]\n            if x[0] in letters and q == m:\n                letters.remove(x[0])\n            else:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\ncondition = False\nif a % 3 == 0 or b % 3 == 0:\n    c, d = check(rows), check(columns)\n    if c[0]:\n        condition = colors(c, a)\n    if not condition and d[0]:\n        condition = colors(d, b)\nif condition:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "n, m = list(map(int, input().split()))\nc = [list(input()) for _ in range(n)]\n\nans = \"NO\"\nif n % 3 == 0:\n    l = []\n    for i in range(3):\n        s = set([])\n        for j in range(i * n // 3, (i + 1) * n // 3):\n            for k in range(m):\n                s.add(c[j][k])\n        if len(s) == 1:\n            l.append(s.pop())\n    if sorted(l) == ['B', 'G', 'R']:\n        ans = \"YES\"\nif m % 3 == 0:\n    l = []\n    for i in range(3):\n        s = set([])\n        for j in range(i * m // 3, (i + 1) * m // 3):\n            for k in range(n):\n                s.add(c[k][j])\n        if len(s) == 1:\n            l.append(s.pop())\n    if sorted(l) == ['B', 'G', 'R']:\n        ans = \"YES\"\n\nprint(ans)\n", "def satisfy_line(line):\n    total = len(line)\n    size = total // 3\n    if total % 3 != 0:\n        return False\n\n    first_part = line[0:size]\n    second_part = line[size:2 * size]\n    third_part = line[2 * size:3 * size]\n\n    first_set = set(first_part)\n    second_set = set(second_part)\n    third_set = set(third_part)\n\n    if len(first_set) == len(second_set) == len(third_set) == 1:\n        all_color = set().union(first_set, second_set, third_set)\n        if all_color == {'R', 'G', 'B'}:\n            return True\n    return False\n\n\ndef satisfy_flag(flag):\n    first_line = flag[0]\n\n    if not satisfy_line(first_line):\n        return False\n\n    for line in flag:\n        if line != first_line:\n            return False\n\n    return True\n\n\ndef rotate(flag, n, m):\n    rotated_flag = []\n\n    for i in range(m):\n        line = []\n        for j in range(n):\n            line.append(flag[j][i])\n        rotated_flag.append(line)\n\n    return rotated_flag\n\n\ndef main():\n    n, m = [int(t) for t in input().split()]\n    flag = [input() for _ in range(n)]\n\n    if satisfy_flag(flag):\n        print('YES')\n    elif satisfy_flag(rotate(flag, n, m)):\n        print('YES')\n    else:\n        print('NO')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from copy import deepcopy\nn, m = map(int, input().split())\n\nl = [0 for i in range(n)]\n\nfor i in range(n):\n  l[i] = input()\n# print(l)\n\nf1 = 0\nf2 = 0\nfor i in range(n):\n  cnt = [0, 0, 0]\n  for j in range(m):\n    if (l[i][j] == 'R'):\n      cnt[0] += 1\n    if (l[i][j] == 'G'):\n      cnt[1] += 1\n    if (l[i][j] == 'B'):\n      cnt[2] += 1\n  if not ((cnt[0] == 0 and cnt[1] == 0) or (cnt[1] == 0 and cnt[2] == 0) or (cnt[2] == 0) and cnt[0] == 0):\n    f1 = 1\n\nfor j in range(m):\n  cnt = [0, 0, 0]\n  for i in range(n):\n    if (l[i][j] == 'R'):\n      cnt[0] += 1\n    if (l[i][j] == 'G'):\n      cnt[1] += 1\n    if (l[i][j] == 'B'):\n      cnt[2] += 1\n  if not ((cnt[0] == 0 and cnt[1] == 0) or (cnt[1] == 0 and cnt[2] == 0) or (cnt[2] == 0) and cnt[0] == 0):\n    f2 = 1\n\nif (f1 == 1 and f2 == 1):\n  print('NO')\n  return\nif (f2 == 0):\n  l1 = [[0 for i in range(n)] for j in range(m)]\n  for i in range(n):\n    for j in range(m):\n      l1[j][i] = l[i][j]\n  n, m = m, n\n  l = deepcopy(l1)\n\nr = []\ng = []\nb = []\nfor i in range(n):\n  if (l[i][0] == 'R'):\n    r.append(i)\n  if (l[i][0] == 'G'):\n    g.append(i)\n  if (l[i][0] == 'B'):\n    b.append(i)\nans = 0\nif (len(r) != len(g) or len(r) != len(b) or len(r) != len(g)):\n  ans = 1\nfor i in range(len(r) - 1):\n  if (r[i+1] - r[i] != 1):\n    ans = 1\nfor i in range(len(g) - 1):\n  if (g[i+1] - g[i] != 1):\n    ans = 1\nfor i in range(len(b) - 1):\n  if (b[i+1] - b[i] != 1):\n    ans = 1\nif (ans == 1):\n  print('NO')\n  return\nprint('YES')", "n, m = map(int, input().split())\n\nf = [0 for _ in range(n)]\n\nfor i in range(n):\n    f[i] = input()\n\n\nhor = True\n\nif n % 3 != 0:\n    hor = False\nelse:\n    c = \"RGB\"\n    used = {\"R\":False, \"G\":False, \"B\":False}\n    used[f[0][0]] = True\n\n    cnt = 0\n    if [f[0][0] * m for i in range(n // 3)] == \\\n       f[:n // 3]:\n        cnt += 1\n\n    if not used[f[n // 3][0]]:\n        used[f[n // 3][0]] = True\n        if [f[n // 3][0] * m for i in range(n // 3)] == \\\n           f[n // 3 : n // 3 * 2]:\n            cnt += 1\n\n    if not used[f[n // 3 * 2][0]]:\n        used[f[n // 3 * 2][0]] = True\n        if [f[n // 3 * 2][0] * m for i in range(n // 3)] == \\\n           f[n // 3 * 2:]:\n            cnt += 1\n\n    if cnt == 3:\n        hor = True\n    else:\n        hor = False\n\nver = True\n\nif m % 3 != 0:\n    ver = False\nelse:\n    new_f = [\"\" for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            new_f[i] += f[j][i]\n\n    c = \"RGB\"\n    used = {\"R\":False, \"G\":False, \"B\":False}\n    used[new_f[0][0]] = True\n\n    cnt = 0\n    if [new_f[0][0] * n for i in range(m // 3)] == \\\n       new_f[:m // 3]:\n        cnt += 1\n\n    if not used[new_f[m // 3][0]]:\n        used[new_f[m // 3][0]] = True\n        if [new_f[m // 3][0] * n for i in range(m // 3)] == \\\n           new_f[m // 3 : m // 3 * 2]:\n            cnt += 1\n\n    if not used[new_f[m // 3 * 2][0]]:\n        used[new_f[m // 3 * 2][0]] = True\n        if [new_f[m // 3 * 2][0] * n for i in range(m // 3)] == \\\n           new_f[m // 3 * 2:]:\n            cnt += 1\n\n    if cnt == 3:\n        ver = True\n    else:\n        ver = False\n\nif hor or ver:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "def re(a):\n    if a=='R':\n        return 0\n    elif a=='B':\n        return 1\n    else:\n        return 2\n\ndef llk(a):\n    dd=''.join(a)\n    i=0\n    n=len(dd)\n    su=0\n    while(i<n-1):\n        if dd[i]!=dd[i+1]:\n            su+=1\n        i+=1\n    if su==2:\n        return 1\n    else:\n        return 0\n            \n\n\na=[int(i) for i in input().split()]\nk=[]\nlk=[]\nfor i in range(a[0]):\n    aa=input()\n    k.append(aa)\n    lk.append(set(aa))\n\n\nml=0\nch=[0,0,0]\nfor i in k:\n    if len(set(i))==1:\n        ch[re(i[0])]+=1\n    else:\n        ml=1\n        break\nmll=0\ngk=['']*(a[1])\nfor i in range(a[0]):\n    dk=k[i]\n    for j in range(a[1]):\n        gk[j]+=(dk[j])\nch1=[0,0,0]\nfor i in gk:\n    if len(set(i))==1:\n        ch1[re(i[0])]+=1\n    else:\n        mll=1\n        break      \n\n\nif (len(set(ch))==1 and ml==0 and llk(k)):\n    print(\"YES\")\nelif (len(set(ch1))==1 and mll==0 and llk(gk)):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n            \n            \n", "def check(n, m, fl, count):\n  nonlocal flag, tr_flag\n  if count == 3:\n    return 'NO'\n  num = n // 3\n  is_ok = set()\n  for k in range(0, n, num):\n    new_check = set()\n    for i in range(k, k + num):\n      new_check = new_check | set(fl[i])\n    if len(new_check) != 1:\n      flag, tr_flag = tr_flag, flag\n      if m % 3 == 0:\n        return check(m, n, flag, count + 1)\n      else:\n        return 'NO'\n    now = list(new_check)[0]\n    if now in is_ok:\n      flag, tr_flag = tr_flag, flag\n      if m % 3 == 0:\n        return check(m, n, flag, count + 1)\n      else:\n        return 'NO'\n    is_ok.add(now)\n  return 'YES'\n\ndef main():\n  nonlocal n, m, flag, tr_flag\n  if n % 3 != 0 and m % 3 != 0:\n    return 'NO'\n  \n  if n % 3 == 0:\n    return check(n, m, flag, 0)\n  else:\n    return check(m, n, tr_flag, 0)\n    \n\nn, m = map(int, input().split())\nflag = []\nfor i in range(n):\n  string = list(input())\n  flag.append(string)\ntr_flag = list(map(list, zip(*flag)))\nanswer = main()\nprint(answer)", "n,m = map(int,input().split())\na = []\ns = ''\nfor i in range(n):\n    a.append(input())\n    s += a[i]\n    \ns1 = ''\nfor i in range(m):\n    for j in range(n):\n        s1 += a[j][i]\nf,f1 = True,True\nv = []\nv1 = []\n\nif s[0:n*m//3] == s[0]*(n*m//3):\n    v.append(s[0])\nelse:\n    f = False\nif s1[0:n*m//3] == s1[0]*(n*m//3):\n    v1.append(s1[0])\nelse:\n    f1 = False    \n    \n    \nif s[n*m//3:n*m//3*2] == s[n*m//3]*(n*m//3):\n    v.append(s[n*m//3])\nelse:\n    f = False\n    \nif s1[n*m//3:n*m//3*2] == s1[n*m//3]*(n*m//3):\n    v1.append(s1[n*m//3])\nelse:\n    f1 = False\n \n    \n    \nif s[n*m//3*2:n*m] == s[n*m//3*2]*(n*m//3):\n    v.append(s[n*m//3*2])\nelse:\n    f = False\nif s1[n*m//3*2:n*m] == s1[n*m//3*2]*(n*m//3):\n    v1.append(s1[n*m//3*2])\nelse:\n    f1 = False  \n    \nv.sort()\nv1.sort()\n#print(v,v1)\nif f and v == ['B','G','R']:\n    print('YES')\nelif f1 and v1 == ['B','G','R']:\n    print('YES')\nelse:\n    print('NO')", "n, m = list(map(int, input().split(' ')))\nls, col = [], []\nfor x in range(n):\n    ls.append(input())\nfor i in range(m):\n    elem = ''\n    for x in ls:\n        elem = ''.join([elem,x[i]])\n    col.append(elem)\n\ndef ans():\n    if n % 3 != 0 and m % 3 != 0:\n        return 'NO'\n    for x in ls:\n        if any(y not in ['R', 'G', 'B'] for y in x):\n            return 'NO'\n\n    if n%3 == 0 and all(x == ls[0] for x in ls[0:n//3]) and all(x == ls[n//3] for x in ls[n//3:2*n//3]) and all(x == ls[2*n//3] for x in ls[2*n//3:n]):\n        if ls[0] != ls[n//3] and ls[n//3] != ls[2*n//3]:\n            for z in ['R', 'G', 'B']:\n                tmp = [bool(z in ls[0]), bool(z in ls[n//3]), bool(z in ls[2*n//3])]\n                if tmp.count(True) > 1:\n                    return 'NO'\n            return 'YES'\n    if m%3 == 0 and all(x == col[0] for x in col[0:m//3]) and all(x == col[m//3] for x in col[m//3:2*m//3]) and all(x == col[2*m//3] for x in col[2*m//3:m]):\n        if col[0] != col[m//3] and col[m//3] != col[2*m//3]:\n            for z in ['R', 'G', 'B']:\n                tmp = [bool(z in col[0]), bool(z in col[m//3]), bool(z in col[2*m//3])]\n                if tmp.count(True) > 1:\n                    return 'NO'\n            return 'YES'\n    return 'NO'\nprint(ans())\n\n", "n, m = [int(el) for el in input().split()]\nfl =  [input().split()  for i in range(n)]\nfl1 = [['R'* m] for i in range  (n //3) ] + [['G' * m ]for i in range  (n //3) ] +  [['B'* m] for i in range  (n //3)]\nfl2 = [['R'* m] for i in range  (n //3) ] + [['B'* m] for i in range  (n //3) ] +  [['G'* m] for i in range  (n //3)]\nfl3 = [['B'* m] for i in range  (n //3) ] + [['G' * m] for i in range  (n //3) ] +  [['R' * m ]for i in range  (n //3)]\nfl4 = [['B' * m] for i in range  (n //3) ] + [['R'* m ]for i in range  (n //3) ] +  [['G'* m] for i in range  (n //3)]\nfl5 = [['G'* m] for i in range  (n //3) ] + [['R' * m ]for i in range  (n //3) ] +  [['B'* m] for i in range  (n //3)]\nfl6 = [['G'* m] for i in range  (n //3) ] + [['B' * m ]for i in range  (n //3) ] +  [['R'* m ]for i in range  (n //3)]\n\nfl7 =[['R' * ( m// 3) + 'G' * ( m// 3) + 'B' * ( m// 3)]  for i in range(n)]\nfl8 =[['R' * ( m// 3) + 'B' * ( m// 3) + 'G' * ( m// 3) ] for i in range(n)]\nfl9 =[['G' * ( m// 3) + 'B' * ( m// 3) + 'R' * ( m// 3) ] for i in range(n)]\nfl10 =[['G' * ( m// 3) + 'R' * ( m// 3) + 'B' * ( m// 3)]  for i in range(n)]\nfl11 =[['B' * ( m// 3) + 'G' * ( m// 3) + 'R' * ( m// 3) ] for i in range(n)]\nfl12 =[['B' * ( m// 3) + 'R' * ( m// 3) + 'G' * ( m// 3) ] for i in range(n)]\n\nif fl == fl1 or fl == fl2 or fl == fl3 or fl == fl4  or fl == fl5  or fl == fl6  or fl == fl7 or fl == fl8  or fl == fl9  or fl == fl10 or fl == fl11  or fl == fl12:\n    print('YES')\nelse:\n    print('NO')\n", "import sys, math\n\nn, m = list(map(int, input().split()))\n\na = [\"\" for i in range(n)]\nfor i in range(n):\n    a[i] = input()\n\nif (a[0][0] == a[0][m-1]) and (n % 3 == 0):\n    for i in range(n // 3):\n        for j in range(m):\n            if (not a[i][j] == a[0][0]):\n                print(\"NO\")\n                return\n    for i in range(n // 3, 2 * n // 3):\n        for j in range(m):\n            if (not a[i][j] == a[n // 3][0]):\n                print(\"NO\")\n                return\n    for i in range(2 * n // 3, n):\n        for j in range(m):\n            if (not a[i][j] == a[2 * n // 3][0]):\n                print(\"NO\")\n                return\n    if (a[0][0] == a[n // 3][0]) or (a[0][0] == a[2 * n // 3][0]) or (a[2 * n // 3][0] == a[n // 3][0]):\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\n        return\nelif (a[0][0] == a[n - 1][0]) and (m % 3 == 0):\n    for i in range(n):\n        for j in range(m // 3):\n            if not ((a[i][j] == a[0][0]) and (a[i][j + m // 3] == a[0][m // 3]) and (\n                a[i][j + 2 * m // 3] == a[0][2 * m // 3])):\n                print(\"NO\")\n                return\n    if (a[0][0] == a[0][m // 3]) or (a[0][0] == a[0][2 * m // 3]) or (a[0][2 * m // 3] == a[0][m // 3]):\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\nelse:\n    print(\"NO\")\n", "n,m = (int(i) for i in input().split())\nflag = []\nfor i in range(n):\n    flag += [input()]\n\n\ncount = {\"R\":0,\"G\":0,\"B\":0}\n\nfor line in flag:\n    for let in line:\n        count[let] += 1\ncheck1 = True\nchange1 = 0\nfor i in range(n):\n    if i < n-1 and flag[i][0] != flag[i+1][0]:\n        change1+=1\n    for j in range(m):\n        if j < m-1 and flag[i][j] != flag[i][j+1]:\n            check1 = False\nif change1 != 2 or len({count[\"R\"],count[\"G\"],count[\"B\"]}) > 1:\n    check1 = False\n\n\ncheck2 = True\nchange2 = 0\nfor j in range(m):\n    if j < m-1 and flag[0][j] != flag[0][j+1]:\n        change2+=1\n    for i in range(n):\n        if i < n-1 and flag[i][j] != flag[i+1][j]:\n            check2 = False\nif change2 != 2 or len({count[\"R\"],count[\"G\"],count[\"B\"]}) > 1:\n    check2 = False\n\nif check2 or check1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "n, m = list(map(int, input().split()))\nfl = [input() for i in range(n)]\nc1 = fl[0][0]\nBOOL = False\nfor i in range(n):\n    if fl[i][0] != c1:\n        BOOL = True\n        break\nif BOOL:\n    BOOL = False \n    if n % 3 == 0:\n        for i in range(n // 3)[:n//3]:\n            for j in range(m):\n                if fl[i][j] != c1:\n                    BOOL = True\n        c2 = fl[n//3][0]\n        if not BOOL:\n            for i in range(n)[n//3:-(n//3)]:\n                for j in range(m):\n                    if fl[i][j] != c2:\n                        BOOL = True\n        c3 = fl[-(n//3)][0]\n        if not BOOL:\n            for i in range(n)[-(n//3):]:\n                for j in range(m):\n                    if fl[i][j] != c3:\n                        BOOL = True\n        if c1 == c2 or c2 == c3 or c1 == c3:\n            print('NO')\n        else:\n            if  BOOL:\n                print('NO')\n            else:\n                print('YES')\n    else:\n        print('NO')\nelse:\n    if m % 3 == 0:\n        for i in range(m)[:m//3]:\n            for j in range(n):\n                if fl[j][i] != c1:\n                    BOOL = True\n        c2 = fl[0][m//3]\n        if not BOOL:\n            for i in range(m)[m//3:-(m//3)]:\n                for j in range(n):\n                    if fl[j][i] != c2:\n                        BOOL = True\n        c3 = fl[0][-(m//3)]\n        if not BOOL:\n            for i in range(m)[-(m//3):]:\n                for j in range(n):\n                    if fl[j][i] != c3:\n                        BOOL = True\n        if c1 == c2 or c2 == c3 or c1 == c3:\n            print('NO')\n        else:\n            if  BOOL:\n                print('NO')\n            else:\n                print('YES')\n    else:\n        print('NO')\n", "n, m = list(map(int, input().split()))\nfield = [input() for i in range(n)]\n\nif n % 3 == 0:\n    size = n // 3\n    flag = True\n    block = set()\n    stripes = set()\n    for i in range(n):\n        if i % size == 0:\n            block = set()\n        for j in range(m):\n            block.add(field[i][j])\n        if (i + 1) % size == 0:\n            if len(block) > 1:\n                flag = False\n            else:\n                stripes.add(list(block)[0])\n    if len(stripes) != 3:\n        flag = False\n    if flag:\n        print('YES')\n        return\n\nif m % 3 == 0:\n    size = m // 3\n    flag = True\n    block = set()\n    stripes = set()\n    for j in range(m):\n        if j % size == 0:\n            block = set()\n        for i in range(n):\n            block.add(field[i][j])\n        if (j + 1) % size == 0:\n            if len(block) > 1:\n                flag = False\n            else:\n                stripes.add(list(block)[0])\n    if len(stripes) != 3:\n        flag = False\n    if flag:\n        print('YES')\n        return\n\nprint('NO')\n", "n, m = map(int, input().split())\nA = [0 for i in range(n)]\nfor i in range(n):\n    A[i] = input()\n\nf1, f2 = True, True\n\ncolors = [\"R\", \"G\", \"B\"]\nif n % 3 != 0:\n    f1 = False\nelse:\n    for i in range(3):\n        if A[n//3 * i][0] in colors:\n            qq = A[n//3 * i][0]\n            colors.remove(A[n//3 * i][0])\n        else:\n            f1 = False\n        for j in range(n//3 * i, n//3 *(i + 1) ):\n            if A[j][0] != qq:\n                f1 = False\n                break\n            for k in A[j]:\n                if k != A[j][0]:\n                    f1 = False\n                    break\ncolors = [\"R\", \"G\", \"B\"]\nif m % 3 != 0:\n    f2 = False\nelse:\n    for i in range(3):\n        if A[0][m // 3 * i] in colors:\n            qq = A[0][m // 3 * i]\n            colors.remove(A[0][m // 3 * i])\n        else:\n            f2 = False\n        \n        for j in range(m//3 * i, m//3 *(i + 1) ):\n            if A[0][j] != qq:\n                f2 = False\n                break\n            for k in range(n):\n                if A[k][j] != A[0][j]:\n                    f2 = False\n                    break\n\n\n\nif f1 or f2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"]