["import sys\ninput = sys.stdin.readline\n \nN=int(input())\nA=list(map(int,input().split()))\n \nXOR=0\nfor a in A:\n    XOR^=a\n \nfor i in range(N):\n    A[i] &=~XOR\n    \nUSED=[0]*N\n \nfor bi in range(60,-1,-1):\n    for i in range(N):\n        if USED[i]==0 and A[i] & (1<<bi)!=0:\n            USED[i]=1\n            useind=i\n            break\n    else:\n        continue\n \n    for i in range(N):\n        if i==useind:\n            continue\n        if A[i] & (1<<bi)!=0:\n            A[i]^=A[useind]\n            \nANS=0\nfor a in A:\n    ANS^=a\n \nprint(2*ANS+XOR)", "N = int(input())\nA = list(map(int, input().split()))\nx = 0\n# for a in A:\n#     print(bin(a))\n# print()\nfor a in A:\n    x ^= a\nidx = 0\nfor i in range(59, -1, -1):\n    if x>>i & 1 == 0:\n        for j, a in enumerate(A[idx:], idx):\n            if a>>i & 1:\n                break\n        else:\n            continue\n        A[idx], A[j] = A[j], A[idx]\n        for j in range(N):\n            if j != idx and A[j] >> i & 1:\n                A[j] ^= a\n        idx += 1\ns = 0\n#for a in A:\n#    print(bin(a))\nfor a in A:\n    s ^= a\n#print(f\"s={bin(s)}\")\nfor i in range(60):\n    if x>>i & 1 == 1 and s>>i & 1:\n        s ^= 1<<i\n#print(x, s)\nprint((x + (s<<1)))\n", "import numpy as np\n\nn = int(input())\naaa = np.fromiter(list(map(int, input().split())), np.int64)\n\nall_x = np.bitwise_xor.reduce(aaa)\nmask = ~all_x\nbbb = aaa & mask\n\nans = 0\nwhile True:\n    a = bbb.max()\n    if a == 0:\n        break\n    b = 1 << (int(a).bit_length() - 1)\n    bbb[bbb & b > 0] ^= a\n    if ans & b == 0:\n        ans ^= a\n\nprint((2 * ans + all_x))\n", "def get_basis(a):\n    basis=[]\n    for e in a:\n        for b in basis:\n            e = min(e, e^b)\n        if e:\n            basis.append(e)\n    return basis\ndef solve():\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=0\n    for i in a:\n        ans^=i\n    k=~ans\n    for i in range(n):\n        a[i]&=k\n    basis=get_basis(a)\n    res=0\n    for i in basis:\n        res=max(res,res^i)\n    print(ans+2*res)\nsolve()", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\nimport numpy as np\n\nN = int(input())\nA = np.array([int(x) for x in input().split()],dtype=np.int64)\n\n\"\"\"\nF_2 \u4e0a\u306e\u7dda\u5f62\u4ee3\u6570\u3002\u57fa\u672c\u5909\u5f62\u3067\u7c21\u5358\u306a\u57fa\u5e95\u3092\u5f97\u308b\u3002\n\"\"\"\n\nxor = np.bitwise_xor.reduce(A)\n\nA = np.concatenate([np.array([1<<i for i in range(60) if xor&(1<<i)],np.int64),A])\n\nfor k in range(60,-1,-1):\n    bit = 1<<k\n    one = (A&bit != 0)\n    i = np.where(one & (A < (1<<(k+1))))[0]\n    if len(i) == 0:\n        continue\n    i = i[0]\n    x = A[i]\n    A[one] ^= x\n    A[i] = x\n\nA = A[A != 0]\nA.sort()\nA = A[::-1]\n\nif len(A) > 0:\n\tred = np.bitwise_xor.reduce(A)\nelse:\n    red = 0\nblue = red^xor\nanswer = red + blue\nprint(answer)\n", "from functools import reduce\nfrom operator import xor\nimport numpy as np\n\ndef main():\n    N = int(input())\n    A = np.array(input().split(), np.int64)\n    # \u3068\u308a\u3042\u3048\u305a\u5168\u90e8XOR\u3059\u308b\n    A_xor_all = np.bitwise_xor.reduce(A)\n\n    # \u53c2\u8003\n    # https://betrue12.hateblo.jp/entry/2019/11/22/012255\n\n    # * \u5168\u90e8XOR\u3057\u30661\u306b\u306a\u308b\u30d3\u30c3\u30c8\u306f\u3001\u3069\u3046\u5857\u308a\u5206\u3051\u3066\u3082\u7247\u65b9\u306f0, \u3082\u3046\u7247\u65b9\u304c1\u306b\u306a\u308b\n    #   \u3064\u307e\u308a\u3001\u3053\u306e\u30d3\u30c3\u30c8\u306f\u3069\u3046\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3066\u3082\u548c\u306f1\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u30d3\u30c3\u30c8\u306f\u8003\u5bdf\u5bfe\u8c61\u304b\u3089\u5916\u3059\n    # * \u5168\u90e8XOR\u3057\u30660\u306b\u306a\u308b\u30d3\u30c3\u30c8\u306f\u3001\u3053\u306e\u30d3\u30c3\u30c8\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u8981\u7d20\u306e\u500b\u6570\u3092\u8d64\u3068\u9752\u305d\u308c\u305e\u308c\u3067\u5947\u6570\u500b\u306b\u3057\u3066\u3042\u3052\u308c\u3070\u3001\n    #   XOR(\u8d64\u30b0\u30eb\u30fc\u30d7) + XOR(\u9752\u30b0\u30eb\u30fc\u30d7)\u3092\u6700\u5927\u5316\u3067\u304d\u308b\u3002\n\n    # \u305d\u3053\u3067\u3001A\u306e\u5404\u8981\u7d20\u3092\u3001\u5168\u90e8XOR\u3057\u30661\u306b\u306a\u308b\u30d3\u30c3\u30c8\u3092\u7121\u8996\u3057\u305f(0\u306b\u3057\u305f)\u6570\u5024\u306b\u5909\u63db\u3057\u305f\u3082\u306e\uff08A'\uff09\u3092\u4f5c\u308b\n    # A'\u306e\u8981\u7d20\u30922\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u3051\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u306eXOR\u306e\u548c\u304c\u6700\u5927\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n    # \u305f\u3060\u3057\u3001\u5404\u30d3\u30c3\u30c8\u306b\u304a\u3044\u3066\u3001\u30d3\u30c3\u30c8\u304c1\u306b\u306a\u3063\u3066\u3044\u308bA'\u8981\u7d20\u306e\u500b\u6570\u306f\u5fc5\u305a\u5076\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\n    # \u3069\u3046\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u5fc5\u305a\u300cXOR(A'\u306e\u8d64\u30b0\u30eb\u30fc\u30d7) = XOR(A'\u306e\u9752\u30b0\u30eb\u30fc\u30d7)\u300d\u3068\u306a\u308b\u3002\n    # XOR\u3092\u6700\u5927\u5316\u3059\u308b\u3088\u3046\u306b\u8981\u7d20\u3092\u9078\u629e\u3057\u305f\u3068\u304d\u306e\u30b0\u30eb\u30fc\u30d7\u3092X'\u3068\u3059\u308b\u3068\u3001\u7b54\u3048\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u306a\u308b\n    # [A\u5168\u90e8\u306eXOR\u7d50\u679c] + 2 * [X'\u306eXOR\u7d50\u679c]\n\n    # A'\u3092\u4f5c\u6210\n    # 1\u306b\u306a\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u3092\u7121\u8996\u3057\u305f\u3044\u306e\u3067\u3001A\u5168\u4f53\u306eXOR\u7d50\u679c\u3092\u53cd\u8ee2\u3057\u3066AND\u3092\u3068\u308b\n    mask = ~A_xor_all\n    A_dash = A & mask\n\n    # X'\u3092\u6c42\u3081\u308b\u65b9\u6cd5\n    #   A'\u306e\u8981\u7d20\u306e\u4f4d\u7f6e\u3092\u5165\u308c\u66ff\u3048\u305f\u308a\u3001\n    #   \u3042\u308b\u8981\u7d20\u3092\u3001\u305d\u306e\u8981\u7d20\u3068\u5225\u306e\u8981\u7d20\u3068\u306eXOR\u7d50\u679c\u306b\u7f6e\u304d\u63db\u3048\u305f\u308a\u3059\u308b\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3057\u3001\n    #   A'\u306e\u884c\u6a19\u6e96\u5f62R\u3092\u6c42\u3081\u308b\u3068\u3001\n    #   R\u306e\u5168\u8981\u7d20\u306eXOR\u7d50\u679c\u304c\u3001X'\u3068\u306a\u308b\n\n    # \u884c\u6a19\u6e96\u5f62: \u884c\u5217\u306e\u5de6\u4e0b\u306e\u65b9\u304c0\u306b\u306a\u308b\u3088\u3046\u306a\u5f62\uff08\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u304f\u3068\u304d\u306b\u4f5c\u308b\u3088\u3046\u306a\u3084\u3064\uff09\n    #          \u307e\u305f\u3001i\u884c\u76ee\u306b\u304a\u3044\u3066\u3001\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304cn\u5217\u76ee\u3060\u3068\u3059\u308b\u3068\u3001n\u5217\u76ee\u5168\u4f53\u306b\u304a\u3044\u3066\u3001i\u884c\u76ee\u4ee5\u5916\u3067\u306f\u5168\u30660\u306b\u306a\u3063\u3066\u3044\u308b\n    # \u4f8b\n    #   1 0 ? 0 ? ? ?\n    #   0 1 ? 0 ? ? ?\n    #   0 0 0 1 ? ? ?\n    #   0 0 0 0 0 0 0\n    \n    # \u884c\u6a19\u6e96\u5f62\u306e\u4f5c\u308a\u65b9\n    #  1. \u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b (=a1\u3068\u3059\u308b)\n    #  2. a1\u306b\u304a\u3044\u3066\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304cn1\u5217\u76ee\u3060\u3068\u3059\u308b\u3068\u3001\u4ed6\u306e\u884c\u3067n1\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u305f\u3089\u3001a1\u3068XOR\u3059\u308b\n    #  3. a1\u4ee5\u5916\u306e\u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b (=a2\u3068\u3059\u308b)\n    #  4. a2\u306b\u304a\u3044\u3066\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304cn2\u5217\u76ee\u3060\u3068\u3059\u308b\u3068\u3001\u4ed6\u306e\u884c\u3067n2\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u305f\u3089\u3001a2\u3068XOR\u3059\u308b\n    #     (a1\u3082\u3001n2\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306fa2\u3068XOR\u3059\u308b)\n    #  5. a1, a2\u4ee5\u5916\u306e\u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b (=a3\u3068\u3059\u308b)\n    #  6. a3\u306b\u304a\u3044\u3066\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304cn3\u5217\u76ee\u3060\u3068\u3059\u308b\u3068\u3001\u4ed6\u306e\u884c\u3067n3\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u305f\u3089\u3001a3\u3068XOR\u3059\u308b\n    #     (a1, a2\u3082\u3001n3\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306fa3\u3068XOR\u3059\u308b)\n    #  ....\n\n\n    # \u4f8b: A = [12, 9, 7, 2] = [1100, 1001, 0111, 0010] \u306e\u5834\u5408\n    # XOR(A) = 0000, A' = A = [12, 9, 7, 2] = \n    # [1100\n    #  1001\n    #  0111\n    #  0010]\n\n    # 2\u884c\u76ee ^= 1\u884c\u76ee\n    # [1100\n    #  0101\n    #  0111\n    #  0010]\n\n    # 2\u884c\u76ee\u30683\u884c\u76ee\u3092\u4ea4\u63db\n    # [1100\n    #  0111\n    #  0101\n    #  0010]\n\n    # 3\u884c\u76ee ^= 2\u884c\u76ee, 1\u884c\u76ee^=2\u884c\u76ee\n    # [1011\n    #  0111\n    #  0010\n    #  0010]\n\n    # 4\u884c\u76ee ^= 3\u884c\u76ee, 2\u884c\u76ee ^= 3\u884c\u76ee, 1\u884c\u76ee ^= 3\u884c\u76ee\n    # [1001\n    #  0101\n    #  0010\n    #  0000] = R\n\n    # R\u306eXOR\u7d50\u679c\u304cX'\u306eXOR\u7d50\u679c\u3068\u4e00\u81f4\u3059\u308b\u7406\u7531\n    #   1. A'\u306e\u8981\u7d20\u306e\u4f4d\u7f6e\u3092\u5165\u308c\u66ff\u3048\u3066\u3082\u3001XOR\u306e\u6700\u5927\u5316\u306b\u306f\u5f71\u97ff\u3057\u306a\u3044\u3002\n    #   2. A'\u306e\u3042\u308b\u8981\u7d20\u3092\u3001\u305d\u306e\u8981\u7d20\u3068\u5225\u306e\u8981\u7d20\u3068\u306eXOR\u7d50\u679c\u306b\u7f6e\u304d\u63db\u3048\u305f\u3068\u304d\u306eXOR\u306e\u6700\u5927\u5024\u304c\n    #      \u5143\u306eA'\u306eXOR\u306e\u6700\u5927\u5024\u3068\u540c\u3058\u3067\u3042\u308b (=XOR\u306e\u6700\u5927\u5316\u306b\u306f\u5f71\u97ff\u3057\u306a\u3044)\n    #   3. R\u304b\u3089XOR\u3092\u6700\u5927\u5316\u3059\u308b\u3088\u3046\u306b\u8981\u7d20\u3092\u9078\u629e\u3057\u3088\u3046\u3068\u3059\u308b\u306a\u3089\u3001\n    #      R\u306e\u8981\u7d20\u3092\u5168\u9078\u629e\u3059\u308c\u3070\u3088\u3044\n\n    # \u7406\u75312\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u66f8\u304f\u3002\n\n    # \u4f8b\u3048\u3070\u3001\u8981\u7d20\u6570\u304c3\u306e\u96c6\u5408A\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u3079\u304d\u96c6\u5408S(A)\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u306a\u308b\u3002\n    # A = {a1, a2, a3}\n    # S(A) = {0, a1, a2, a3, a1^a2, a2^a3, a3^a1, a1^a2^a3}\n\n    # a1 ^= a2 \u3068\u3057\u3001\u3053\u308c\u3092b1\u3068\u304a\u304f\u3002\u307e\u305f\u3001\u3053\u306e\u96c6\u5408\u3092B\u3068\u3059\u308b\u3068\u3001\n    # B = {a1^a2, a2, a3} = {b1, a2, a3}\n    # B\u306e\u3079\u304d\u96c6\u5408S(B)\u306f\u3001\n    # S(B) = {0, b1, a2, a3, b1^a2, a2^a3, a3^b1, b1^a2^a3}\n    #      = {0, (a1^a2), a2, a3, (a1^a2)^a2, a2^a3, a3^(a1^a2), (a1^a2)^a2^a3}\n    #      = {0, a1^a2, a2, a3, a1, a2^a3, a3^a1^a2, a1^a3}\n    #      = S(A)\n    # \u3068\u306a\u308a\u3001A\u306e\u3079\u304d\u96c6\u5408\u3068\u4e00\u81f4\u3059\u308b\u3002\n    # A'\u306e\u3079\u304d\u96c6\u5408\u306e\u4e2d\u306b\u3001XOR\u3092\u6700\u5927\u5316\u3059\u308b\u96c6\u5408\u304c\u3042\u308b\u306f\u305a\u306a\u306e\u3067\u3001\n    # R\u304b\u3089XOR\u3092\u6700\u5927\u5316\u3059\u308b\u96c6\u5408\u3092\u898b\u3064\u3051\u308c\u3070\u3088\u3044\u3002\n    # \u307e\u305f\u3001R\u306b\u3064\u3044\u3066\u306f\u3001\u4e0a\u4f4d\u306e\u30d3\u30c3\u30c8\u304b\u3089\u9806\u306b\u3001\u305d\u306e\u30d3\u30c3\u30c8\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u6570\u304c1\u500b\u3057\u304b\u306a\u3044\u3088\u3046\u306b\n    # \u8981\u7d20\u3092\u5909\u63db\u3057\u3066\u3044\u3063\u3066\u3044\u308b\u305f\u3081\u3001R\u306e\u3079\u304d\u96c6\u5408\u304b\u3089XOR\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u9078\u3073\u305f\u3044\u5834\u5408\u3001\n    # \u5168\u90e8\u9078\u629e\u3059\u308c\u3070\u3001XOR\u3057\u3066\u3082\u4e0a\u4f4d\u306e\u30d3\u30c3\u30c8\u306f\u5168\u90e81\u306b\u306a\u308b\u306e\u3067\u3001XOR\u304c\u6700\u5927\u5316\u3055\u308c\u308b\u3002\n\n    # \u6226\u7565\u901a\u308a\u3001\u307e\u305aR\u3092\u4f5c\u3063\u3066\u6700\u5f8c\u306b\u5168\u90e8XOR\u3059\u308b\u3067\u3082\u826f\u3044\u304c\u3001\n    # \u4eca\u307e\u3067\u306e\u6700\u5927\u5024\u306e\u5834\u6240\u3092\u899a\u3048\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306a\u3069\u3001\u9762\u5012\u306a\u90e8\u5206\u304c\u3042\u308b\u305f\u3081\u3001\n    # A'\u306eXOR\u306e\u6700\u5927\u5024\u306e\u6c42\u3081\u65b9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u5f62\u3059\u308b\u3002\n\n    #  0. ans = 0\u3068\u3059\u308b\n\n    #  1. \u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b (=a1\u3068\u3059\u308b)\n    #  2. a1\u306b\u304a\u3044\u3066\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304cn1\u5217\u76ee\u3060\u3068\u3059\u308b\u3068\u3001n1\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5168\u3066\u306e\u884c\u306b\u3064\u3044\u3066\uff08a1\u306e\u884c\u3082\u542b\u3080\uff09\u3001\n    #     a1\u3068XOR\u3059\u308b**   -> a1\u306e\u884c\u306f\u81ea\u8eab\u3068XOR\u3092\u3068\u308b\u306e\u30670\u306b\u306a\u308b\n    #  3. ans ^= a1\u3068\u3059\u308b\n\n    #  4. \u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b (=a2\u3068\u3059\u308b)   <- \u5148\u307b\u3069\u3001a1\u30920\u306b\u3057\u305f\u306e\u3067\u3001a1\u4ee5\u5916\u306e\u6700\u5927\u5024\u304c\u898b\u3064\u304b\u308b\n    #  5. a2\u306b\u304a\u3044\u3066\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304cn2\u5217\u76ee\u3060\u3068\u3059\u308b\u3068\u3001n2\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5168\u3066\u306e\u884c\u306b\u3064\u3044\u3066\uff08a2\u306e\u884c\u3082\u542b\u3080\uff09\n    #     a2\u3068XOR\u3059\u308b**   -> a2\u306e\u884c\u306f\u81ea\u8eab\u3068XOR\u3092\u3068\u308b\u306e\u30670\u306b\u306a\u308b\n    #  6. ans (= a1) \u306en2\u5217\u76ee\u304c1\u3067\u306a\u3044\u5834\u5408\u306f\u3001ans ^= a2\u3068\u3059\u308b\n    #     -> \u5143\u306e\u624b\u9806\u3067\u306f\u3001a1\u306en2\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306fa2\u3068XOR\u3092\u3068\u3063\u3066\u3044\u305f\u3002\n    #        \u3057\u304b\u3057\u3001\u6700\u7d42\u7684\u306b\u7b54\u3048\u3092\u6c42\u3081\u308b\u3068\u304d\u3001\u5168\u8981\u7d20\u3092XOR\u3059\u308b\u306e\u3067\u3001\n    #        \u7b54\u3048 = (a1^a2) ^ a2 ^ ... = a1 ^ ...\n    #        \u3068\u306a\u308a\u3001\u7b54\u3048\u304b\u3089a2\u304c\u6d88\u3048\u308b\u3002\n\n    #  7. \u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b (=a3\u3068\u3059\u308b)   <- \u5148\u307b\u3069\u3001a2\u30920\u306b\u3057\u305f\u306e\u3067\u3001a1, a2\u4ee5\u5916\u306e\u6700\u5927\u5024\u304c\u898b\u3064\u304b\u308b\n    #  8. a3\u306b\u304a\u3044\u3066\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304cn2\u5217\u76ee\u3060\u3068\u3059\u308b\u3068\u3001n3\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5168\u3066\u306e\u884c\u306b\u3064\u3044\u3066\uff08a3\u306e\u884c\u3082\u542b\u3080\uff09\n    #     a3\u3068XOR\u3059\u308b**   -> a3\u306e\u884c\u306f\u81ea\u8eab\u3068XOR\u3092\u3068\u308b\u306e\u30670\u306b\u306a\u308b\n    #  9. ans \u306en3\u5217\u76ee\u304c1\u3067\u306a\u3044\u5834\u5408\u306f\u3001ans ^= a3\u3068\u3059\u308b\n    #     -> \u5143\u306e\u624b\u9806\u3067\u306f\u3001a1, a2\u306en3\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306fa3\u3068XOR\u3092\u3068\u3063\u3066\u3044\u305f\u3002\n    #        \u3057\u304b\u3057\u3001\u6700\u7d42\u7684\u306b\u7b54\u3048\u3092\u6c42\u3081\u308b\u3068\u304d\u3001\u5168\u8981\u7d20\u3092XOR\u3059\u308b\u306e\u3067\u3001\n\n    #        * a2\u3092XOR\u3057\u305f\u5834\u5408: ans = a1^a2 \u3068\u306a\u3063\u3066\u3044\u308b\u306f\u305a\n    #          -> a1^a2\u306en3\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u3069\u3061\u3089\u304b\u3092a3\u3068XOR\u3092\u3068\u3063\u3066\u3044\u308b\u306e\u3067\u3001\n    #             \u7b54\u3048 = ((a1^a2) ^ a3)^a3 ^ ... = (a1^a2) ^ ...\n    #             \u3068\u306a\u308a\u3001ans\u306ba3\u3092XOR\u3057\u306a\u304f\u3066\u826f\u3044\n    #          -> a1^a2\u306en3\u5217\u76ee\u304c0\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u3001a1,a2\u306e\u4e21\u65b9\u306ba3\u3092XOR\u3057\u305f\u304b\u3001\u3069\u3061\u3089\u306b\u3082XOR\u3057\u306a\u304b\u3063\u305f\u304b\u3001\n    #             \u7b54\u3048 = ((a1^a3) ^ (a2^a3))^a3 ^ ... \u3082\u3057\u304f\u306f  (a1^a2)^a3^ ...\n    #             \u3068\u306a\u308a\u3001a3\u304c1\u500b\u6b8b\u308b\u306e\u3067\u3001ans \u306ba3\u3092XOR\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n    #        * a2\u3092XOR\u3057\u305f\u5834\u5408: ans = a1 \u3068\u306a\u3063\u3066\u3044\u308b\u306f\u305a\n    #          \u624b\u98066\u3068\u540c\u3058\u72b6\u6cc1\u306b\u306a\u308b\u306e\u3067\u3001\u624b\u98066\u3068\u540c\u69d8\u306e\u7406\u7531\u3067\u3001ans\u306en3\u5217\u76ee\u304c1\u3067\u306a\u3051\u308c\u3070a3\u3092XOR\u3059\u308b\n\n    #  ...\n\n\n    # \u3053\u308c\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3068\u306a\u308b\n    ans = 0\n    while True:\n        _max = A_dash.max()                 # \u6700\u5927\u5024\u3092\u898b\u3064\u3051\u308b\n        # print(\"max={}\".format(_max))\n        # \u6700\u5927\u5024\u304c0\u306a\u3089\u3001\u5168\u90e8\u8abf\u3079\u3064\u304f\u3057\u305f\u304b\u3001XOR\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5168\u90e80\u306b\u306a\u3063\u305f\u304b\u306e\u3069\u3063\u3061\u304b\n        # \u3069\u3061\u3089\u306b\u3057\u308d\u3053\u308c\u4ee5\u4e0a\u64cd\u4f5c\u306f\u4e0d\u8981\u306a\u306e\u3067\u7d42\u4e86\n        if _max == 0:\n            break\n        # \u6700\u5927\u5024\u306b\u304a\u3044\u3066\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304c\u4f55\u5217\u76ee\u306b\u3042\u308b\u304b\u8abf\u3079\u308b\n        # (\u6570\u5024\u3068\u3057\u3066\u306f\u3001\u4e00\u756a\u5de6\u306b\u3042\u308b1\u304c\u53f3\u304b\u3089\u4f55\u5217\u76ee\u306b\u3042\u308b\u304b\u3092\u8868\u3057\u3066\u3044\u308b)\n        most_left = int(_max).bit_length()\n        # \u305d\u306e\u5217\u3060\u30511\u306b\u3057\u305f\u6570\u5b57\u3092\u4f5c\u308b\n        b = 1 << (most_left - 1)\n        # most_left\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u5168\u3066\u306e\u884c\u306b\u3064\u3044\u3066\u3001\u6700\u5927\u5024\u3068XOR\u3059\u308b\n        # most_left\u5217\u76ee\u304c1\u306b\u306a\u3063\u3066\u3044\u308b\u304b -> \u305d\u306e\u5217\u3060\u30511\u306b\u3057\u305f\u6570\u5b57\u3068and\u3092\u3068\u3063\u3066\u975e\u30bc\u30ed\u304b\u3069\u3046\u304b\n        A_dash[A_dash & b > 0] ^= _max\n        # print(A_dash, b)\n        # ans \u306emost_left\u5217\u76ee\u304c1\u3067\u306a\u3044\u5834\u5408\u306f\u3001ans ^= \u6700\u5927\u5024\u3068\u3059\u308b\n        if ans & b == 0:\n            ans ^= _max\n    \n    print(2 * ans + A_xor_all)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "'''\nCreated on 2019/09/23\n\n@author: oiwaiman\n'''\n\n\nimport numpy as np\n\nn = int(input())\naaa = np.fromiter(list(map(int, input().split())), np.int64)\n\nall_x = np.bitwise_xor.reduce(aaa)\n\nmask = ~all_x\nbbb = aaa & mask\n\nans = 0\nwhile True:\n    a = bbb.max()\n    if a == 0:\n        break\n    b = 1<<(int(a).bit_length() -1)\n    bbb[bbb & b > 0] ^= a\n    if ans & b == 0:\n        ans ^= a\n\n\nprint (ans*2 + all_x)", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nA = list(map(int, input().split()))\nx = 0\nfor a in A:\n  x ^= a\nnow = 0\nfor i in range(59, -1, -1):\n  if x>>i & 1:\n    continue\n  for j in range(now, n):\n    if A[j]>>i & 1:\n      A[now], A[j] = A[j], A[now]\n      for k in range(n):\n        if k != now and A[k]>>i & 1:\n          A[k] ^= A[now]\n      now += 1\n      break\nb = 0\nfor a in A:\n  b ^= a\nans = b + (x^b)\nprint(ans)", "n=int(input())\nA=[int(i) for i in input().split()]\n\nsuma=0\nfor i in range(n):\n    suma^=A[i]\n\nB=[~suma&me for me in A]\nB.sort(reverse=True)\n\ncnt=0\nfor i in range(59,-1,-1):\n    B.sort(reverse=True)\n    if B[cnt]&(1<<i)>0:\n        #print(i,\"!\")\n        for q in range(cnt):\n            if B[q]&(1<<i)>0:\n                B[q]^=B[cnt]\n        for q in range(cnt+1,n):\n            if B[q]&(1<<i)>0:\n                B[q]^=B[cnt]\n            else:\n                break          \n        cnt+=1\n\nans=0\nB.sort(reverse=True)\nfor i in range(n):\n    ans^=B[i]\n\nprint(ans*2+suma)", "n = int(input())\nas_list = input().split(\" \")\na_list = [ int(astr) for astr in as_list ]\n\nx = 0\n\nfor a in a_list:\n    x ^= a\nfor i in range(n):\n    a_list[i] &= ~x\npos = 0\n\nfor b in range(59,-1,-1):\n\n    for i in range(pos,n):\n        a = a_list[i]\n        if a & (1 << b):\n            if i > pos:\n                \n                # i\u756a\u76ee\u3068pos\u756a\u76ee\u3092\u5165\u308c\u66ff\u3048\u308b\n                a_list[i] = a_list[pos]\n                a_list[pos] = a\n\n            for j in range(n):\n                if j == pos:\n                    continue\n                if a_list[j] & (1 << b):\n                    a_list[j] ^= a\n            pos += 1\n            break\n    \ny = 0\n\nfor a in a_list:\n    y ^= a\n\nprint((x + 2 * y))\n", "import sys\ninput = sys.stdin.readline\n\nN=int(input())\nA=list(map(int,input().split()))\n\nXOR=0\nfor a in A:\n    XOR^=a\n\nfor i in range(N):\n    A[i] &=~XOR\n    \nUSED=[0]*N\n\nfor bi in range(60,-1,-1):\n    for i in range(N):\n        if USED[i]==0 and A[i] & (1<<bi)!=0:\n            USED[i]=1\n            useind=i\n            break\n    else:\n        continue\n\n    for i in range(N):\n        if i==useind:\n            continue\n        if A[i] & (1<<bi)!=0:\n            A[i]^=A[useind]\n            \nANS=0\nfor a in A:\n    ANS^=a\n\nprint((2*ANS+XOR))\n", "import numpy as np\n\nN = int(input())\nA = np.array(input().split(),dtype=np.int64)\n\nxor = np.bitwise_xor.reduce(A)\nA = np.concatenate([np.array([1<<i for i in range(60) if xor&(1<<i)],np.int64),A])\n\nfor k in range(60,-1,-1):\n    bit = 1<<k\n    one = (A&bit != 0)\n    i = np.where(one & (A < (1<<(k+1))))[0]\n    if len(i) == 0:\n        continue\n    i = i[0]\n    x = A[i]\n    A[one] ^= x\n    A[i] = x\n\nred = np.bitwise_xor.reduce(A)\nblue = red^xor\nanswer = red + blue\nprint(answer)\n", "n = int(input())\na = list(map(int, input().split()))\na.sort(reverse=True)\n\ns = 0\nfor a_i in a:\n    s ^= a_i\n# print(s)\n\nc = [(~s) & a_i for a_i in a]\nbase = []\nfor c_i in c:\n    for base_j in base:\n        c_i = min(c_i, c_i ^ base_j)\n    if c_i != 0:\n        for j in range(len(base)):\n            base[j] = min(base[j], base[j] ^ c_i)\n        base.append(c_i)\n        base.sort(reverse=True)\n\n# print(base)\nt = 0\nfor base_j in base:\n    t ^= base_j\n# print(t)\nans = s + t * 2\nprint(ans)\n", "from numpy import *\nN = int(input())\nA = fromiter(map(int, input().split()), int64)\nx = bitwise_xor.reduce(A)\nA &= ~x\nr = 0\nwhile any(A):\n    a = A.max()\n    m = 1 << int(a).bit_length() - 1\n    A[A&m>0] ^= a\n    r ^= a * (not r & m)\nprint(x+r+r)", "from numpy import *\nf=bitwise_xor.reduce\nN=int(input())\nA=array(input().split(),int64)\nX=f(A)\nA=hstack((A,array([1<<i for i in range(60)if X&(1<<i)],int64)))\nfor k in range(60)[::-1]:\n  b=1<<k\n  j=A&b!=0\n  i=where(j&(A<2*b))[0]\n  if len(i):i=i[0];x=A[i];A[j]^=x;A[i]=x\nr=f(A)\nprint(r+(r^X))", "import numpy as np\n\nn = int(input())\naaa = np.fromiter(list(map(int, input().split())), np.int64)\n\nall_x = np.bitwise_xor.reduce(aaa)\nmask = ~all_x\nbbb = aaa & mask\n\nans = 0\nwhile any(bbb):\n    a = bbb.max()\n    b = 1 << (int(a).bit_length() - 1)\n    bbb[bbb & b > 0] ^= a\n    if ans & b == 0:\n        ans ^= a\n\nprint((2 * ans + all_x))\n", "n = int(input())\nA = list(map(int, input().split()))\n\nnot_important = 0\nfor a in A:\n    not_important ^= a\n\nfor i in range(n):\n    A[i] &= ~not_important\n\nA.sort(reverse=True)\nrank = 0\nfor digit in range(60, -1, -1):\n    check_bit = 1 << digit\n\n    for i in range(rank, n):\n        if A[i] & check_bit:\n            A[rank], A[i] = A[i], A[rank]\n            break\n    else:\n        continue\n\n    for i in range(n):\n        if i == rank: continue\n        if A[i] & check_bit:\n            A[i] ^= A[rank]\n\n    rank += 1\n\nans = 0\nfor i in range(rank):\n    ans ^= A[i]\n\nprint((ans*2 + not_important))\n", "import numpy as np\nN = int(input())\nA = np.array(list(map(int, input().split())), dtype = np.int64)\na = np.bitwise_xor.reduce(A)\nfor i in range(60):\n    bit = 1<<i\n    if bit & a:\n        A^=(A&bit)\nfor k in range(60, -1, -1):\n    bit = 1<<k\n    one = (A&bit != 0)\n    i = np.where(one & (A < (1<<(k+1))))[0]\n    if len(i) == 0:\n        continue\n    i = i[0]\n    x = A[i]\n    A[one]^=x\n    A[i] = x\nb = np.bitwise_xor.reduce(A)\na^=b\nprint(a+b)", "def maxSubarrayXOR(lis, n, INT_BITS = 60):\n    idx = 0\n    for i in range(INT_BITS-1,-1,-1):\n        Midx = -1\n        bit_i = 1 << i\n        for j in range(idx, n):\n            if lis[j] & bit_i:\n                Midx = j\n                break\n        else: continue\n        lis[Midx], lis[idx] = lis[idx], lis[Midx]\n        for j in range(n):\n            if j != idx and lis[j] & bit_i:\n                lis[j] ^= lis[idx]\n        idx += 1\n    res = 0\n    for x in lis: res ^= x\n    return res\n\nn = int(input())\na = list(map(int, input().split()))\nt = 0\nfor x in a: t ^= x\nb = [x^(x&t) for x in a]\nprint((t + maxSubarrayXOR(b, n)*2))\n", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\nimport numpy as np\n\nN = int(input())\nA = np.array([int(x) for x in input().split()],dtype=np.int64)\n\n\"\"\"\nF_2 \u4e0a\u306e\u7dda\u5f62\u4ee3\u6570\u3002\u57fa\u672c\u5909\u5f62\u3067\u7c21\u5358\u306a\u57fa\u5e95\u3092\u5f97\u308b\u3002\n\"\"\"\n\nxor = np.bitwise_xor.reduce(A)\n\nA = np.concatenate([np.array([1<<i for i in range(60) if xor&(1<<i)],np.int64),A])\n\nfor k in range(60,-1,-1):\n    bit = 1<<k\n    one = (A&bit != 0)\n    i = np.where(one & (A < (1<<(k+1))))[0]\n    if len(i) == 0:\n        continue\n    i = i[0]\n    x = A[i]\n    A[one] ^= x\n    A[i] = x\n\nA = A[A != 0]\nA.sort()\nA = A[::-1]\n\nif len(A) > 0:\n\tred = np.bitwise_xor.reduce(A)\nelse:\n    red = 0\nblue = red^xor\nanswer = red + blue\nprint(answer)", "def get_basis(a):\n    basis=[]\n    for e in a:\n        for b in basis:\n            e = min(e, e^b)\n        if e:\n            basis.append(e)\n    return basis\nn=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in a:\n    ans^=i\nk=~ans\nfor i in range(n):\n    a[i]&=k\nrank=0\nbasis=get_basis(a)\nres=0\nfor i in basis:\n    res=max(res,res^i)\nprint(ans+2*res)", "def __starting_point():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    x = 0\n    for a in A:\n        x ^= a\n\n    idx = 0\n    for i in range(59, -1, -1):\n        if x >> i & 1 == 0:\n            for j, a in enumerate(A[idx:], idx):\n                if a >> i & 1:\n                    break\n            else:\n                continue\n            A[idx], A[j] = A[j], A[idx]\n            for j in range(N):\n                if j != idx and A[j] >> i & 1:\n                    A[j] ^= a\n            idx += 1\n\n    # for a in A:\n    #    print(bin(a))\n\n    s = 0\n    for a in A:\n        s ^= a\n    # print(f\"s={bin(s)}\")\n\n    for i in range(60):\n        if x >> i & 1 == 1 and s >> i & 1:\n            s ^= 1 << i\n\n    # print(x, s)\n    print((x + (s << 1)))\n\n\n__starting_point()", "# coding: utf-8\nimport numpy as np\n\n\ndef solve(*args: str) -> str:\n    n = int(args[0])\n    A = np.array(args[1].split(), dtype=np.int64)\n\n    n_bit = len(np.binary_repr(max(A)))\n\n    xor = np.bitwise_xor.reduce(A)\n    A &= ~xor\n\n    for b in reversed(list(range(n_bit))):\n        b_set = A & 1 << b != 0\n        msb_args = np.where(b_set & (A < 1 << b+1))[0]\n        if len(msb_args):\n            b_set[msb_args[0]] = False\n            A[b_set] ^= A[msb_args[0]]\n\n    ret = 2*np.bitwise_xor.reduce(A) + xor\n\n    return str(ret)\n\n\ndef __starting_point():\n    print((solve(*(open(0).read().splitlines()))))\n\n__starting_point()", "from numpy import int64, bitwise_xor\n\nN, *A = map(int, open(0).read().split())\nA = int64(A)\n\nx = bitwise_xor.reduce(A)\nA &= ~x\n\nres = 0\nwhile A.any():\n    ma = A.max()\n    msb = 1 << (int(ma).bit_length() - 1)\n\n    A[(A & msb) > 0] ^= ma\n\n    res ^= ma * (not res & msb)\n\nprint(x + 2 * res)", "import sys\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    aa = list(map(int, input().split()))\n    s = 0\n    # s=\u7dcfxor\u3092\u6c42\u3081\u308b\n    for a in aa:\n        s ^= a\n    # print(format(s, \"b\"))\n\n    # s\u30671\u304c\u305f\u3063\u3066\u3044\u308b\u6841\u306fa\u306e\u9078\u3073\u65b9\u3067\u5f71\u97ff\u3092\u53d7\u3051\u306a\u3044\u306e\u3067\u3001a\u306e\u305d\u306e\u6841\u30920\u306b\u3059\u308b\n    for i in range(n):\n        # print(format(aa[i], \"b\"), end=\" \")\n        aa[i] &= ~s\n        # print(format(aa[i], \"b\"))\n\n    # \u6383\u304d\u51fa\u3057\u6cd5\n    rnk = 0  # \u30e9\u30f3\u30af\n    for k in range(60, -1, -1):\n        # k\u6841\u76ee\u306b1\u304c\u305f\u3063\u3066\u3044\u308ba\u3092\u63a2\u3059(k\u306f0-indexed)\n        mask = 1 << k\n        for i in range(rnk, n):\n            if mask & aa[i]:\n                aa[i], aa[rnk] = aa[rnk], aa[i]\n                break\n        else:\n            continue\n        # \u898b\u3064\u304b\u3063\u305fa\u4ee5\u5916\u306ek\u6841\u76ee\u3092\u3059\u3079\u30660\u306b\u3059\u308b\u305f\u3081\u3001k\u6841\u76ee\u304c1\u306ea\u306b\u3001\u898b\u3064\u304b\u3063\u305fa\u3092xor\u3059\u308b\n        for i in range(n):\n            if i == rnk: continue\n            if aa[i] & mask:\n                aa[i] ^= aa[rnk]\n        rnk += 1\n\n    # \u3067\u304d\u308b\u3060\u3051\u4e0a\u4f4d\u306b1\u304c\u6765\u308b\u3088\u3046\u3001a\u3092\u9078\u3093\u3067\u3044\u304f\n    red = 0\n    for i in range(rnk):\n        red ^= aa[i]\n    blue = s ^ red\n    # red+blue=(red xor blue)+2*(red & blue)\n    print((s + 2 * (red & blue)))\n\nmain()\n", "N = int(input())\nA = list(map(int, input().split()))\nres = 0\nfor x in A:\n    res ^= x\n\nfor i in range(60):\n    if (res >> i) & 1:\n        for j in range(N):\n            if A[j] >> i & 1:\n                A[j] ^= 1 << i\nstart_point = 0\nfor i in range(60, -1, -1):\n    X = 1 << i\n    for j in range(start_point, N):\n        if A[j] >> i & 1:\n            A[start_point], A[j] = A[j], A[start_point]\n            for k in range(N):\n                if A[k] >> i & 1 and k!=start_point:\n                    A[k] ^= A[start_point]\n            start_point += 1\n            break\nplus=0\nfor x in A:\n    plus ^=x\nprint(res+plus*2)", "def maxSubarrayXOR(lis, n, INT_BITS = 60):\n    idx = 0\n    for i in range(INT_BITS-1,-1,-1):\n        Mele = -1\n        bit_i = 1 << i\n        for j in range(idx, n):\n            if lis[j] & bit_i and lis[j] > Mele:\n                Midx, Mele = j, lis[j]\n        if Mele < 0: continue\n        lis[Midx], lis[idx] = lis[idx], lis[Midx]\n        for j in range(n):\n            if j != idx and lis[j] & bit_i:\n                lis[j] ^= lis[idx]\n        idx += 1\n    res = 0\n    for x in lis: res ^= x\n    return res\n\nn = int(input())\na = list(map(int, input().split()))\nt = 0\nfor x in a: t ^= x\nb = [x^(x&t) for x in a]\nprint(t + maxSubarrayXOR(b, n)*2)", "n=int(input())\nl=list(map(int,input().split()))\ne=[]\nsx=0\nfor i in l:\n    sx^=i\nfor i in l:\n    i&=(~sx)\n    for j in e:\n        i=min(i,i^j)\n    if i:\n        e.append(i)\nt=0\nfor i in e:\n    t=max(t,t^i)\nprint((t^sx)+t)", "import numpy as np\nN = int(input())\nA = np.array(list(map(int, input().split())), dtype = np.int64)\n\nxor = np.bitwise_xor.reduce(A)\n\n# 1\u306e\u500b\u6570\u304c\u5947\u6570\u500b\u306e\u6841\u306f\u5b9a\u6570\nodd_digit = [1<<i for i in range(60) if xor&(1<<i)]\n\n# 1\u306e\u500b\u6570\u304c\u5947\u6570\u500b\u306e\u6841\u306f\u7121\u8996\u3059\u308b\nfor i in odd_digit:\n    A = A & (~i)\n\nfor i in range(60, - 1 , - 1):\n    one_digit = (A & (1<<i) != 0)\n    pivot_flag = np.where(one_digit &  (A < (1<<(i + 1))))[0]\n    if len(pivot_flag) == 0:\n        continue\n    p = pivot_flag[0]\n    pivot = A[p]\n    A[one_digit] ^= pivot\n    A[p] = pivot\n    \nres = sum(odd_digit) + 2*(np.bitwise_xor.reduce(A))\nprint(res)", "import sys\ninput = sys.stdin.readline\nimport numpy as np\ndef print_ans(N, input_line):\n    \"\"\"Test Case\n    >>> print_ans(3, \"3 6 5\")\n    12\n    >>> print_ans(4, \"23 36 66 65\")\n    188\n    >>> print_ans(20, \"1008288677408720767 539403903321871999 1044301017184589821 215886900497862655 504277496111605629 972104334925272829 792625803473366909 972333547668684797 467386965442856573 755861732751878143 1151846447448561405 467257771752201853 683930041385277311 432010719984459389 319104378117934975 611451291444233983 647509226592964607 251832107792119421 827811265410084479 864032478037725181\")\n    2012721721873704572\n    \"\"\"\n    ar = np.array(input_line.split(), 'int64')\n    X = np.bitwise_xor.reduce(ar)\n    ar = np.hstack((ar, np.array([ 1 << i for i in range(60) if X&(1 << i)],'int64')))\n    for k in range(60)[::-1]:\n        b = 1 << k\n        j = ar&b != 0\n        i = np.where(j&(ar<2 * b))[0]\n        if len(i):\n            i = i[0]\n            x = ar[i]\n            ar[j] ^=x\n            ar[i] = x\n    r = np.bitwise_xor.reduce(ar)\n    print((r+(r^X)))\n\ndef __starting_point():\n    N = int(input().rstrip())\n    input_line = input().rstrip()\n    print_ans(N, input_line)\n\n__starting_point()", "N = int(input())\nA = list(map(int,input().split()))\n\nans = 0\nfor a in A:\n    ans ^= a\nfor i in range(N):\n    A[i] &= ~ans\n\ndef gauss_jordan(bs):\n    rank = 0\n    pivot_cols = []\n    for col in reversed(range(61)):\n        pivot = -1\n        for i,row in enumerate(bs[rank:]):\n            if row&(1<<col):\n                pivot = rank+i\n                break\n        if pivot < 0: continue\n        pivot_cols.append(col)\n        bs[pivot],bs[rank] = bs[rank],bs[pivot]\n        for i,row in enumerate(bs):\n            if i != rank and row&(1<<col):\n                bs[i] ^= bs[rank]\n        rank += 1\n    return (pivot_cols,bs)\n\npivot_cols,bs = gauss_jordan(A)\nx = 0\nfor j in reversed(range(61)):\n    nx = x|(1<<j)\n    b = nx\n    for i,c in enumerate(pivot_cols):\n        if b&(1<<c):\n            b ^= bs[i]\n    if (b&nx) == 0:\n        x = nx\nans += x*2\nprint(ans)", "n = int(input())\nA = list(map(int, input().split()))\n\nnot_important = 0\nfor a in A:\n    not_important ^= a\n\nfor i in range(n):\n    A[i] &= ~not_important\n\nA.sort()\nrank = 0\nfor digit in range(60, -1, -1):\n    check_bit = 1 << digit\n\n    for i in range(rank, n):\n        if A[i] & check_bit:\n            A[rank], A[i] = A[i], A[rank]\n            break\n    else:\n        continue\n\n    for i in range(n):\n        if i == rank: continue\n        if A[i] & check_bit:\n            A[i] ^= A[rank]\n\n    rank += 1\n\nans = 0\nfor i in range(rank):\n    ans ^= A[i]\n\nprint(ans*2 + not_important)", "import os\nimport os\nimport sys\nfrom functools import reduce\nfrom operator import xor\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\nA = np.array(A, dtype=np.int64)\n\n\ndef dump(arr):\n    for a in arr:\n        print((np.binary_repr(a, 60)))\n    print()\n\n\n# \u89e3\u8aacAC\n# \u7acb\u3063\u3066\u308b\u30d3\u30c3\u30c8\u304c\u5947\u6570\u306a\u3089\u3069\u3046\u5206\u3051\u3066\u3082\u7d50\u679c\u306f\u540c\u3058\nodds = reduce(xor, A)\nans = odds\n\n# \u5947\u6570\u306e\u3084\u3064\u306f\u7121\u8996\nA &= ~odds\n\n# \u884c\u6a19\u6e96\u5f62\u306b\u3059\u308b\n# https://qiita.com/vain0x/items/015ff6d49853e5d9d403#f---xor-sum-3\nrank = 0\nfor d in reversed(list(range(60))):\n    # \u4e0b\u304b\u3089d\u6841\u76ee\u304c\u7acb\u3063\u3066\u308b\u6700\u521d\u306eindex\n    bits1 = (A >> d & 1).astype(bool)\n    pos = bits1[rank:].argmax() + rank\n    if not bits1[pos]:\n        continue  # \u5168\u90e8\u30bc\u30ed\n    if pos < rank:\n        continue  # rank \u3088\u308a\u4e0b\u306b 1 \u304c\u306a\u3044\u3002\u3069\u3046\u9811\u5f35\u3063\u3066\u3082\u5909\u3048\u3089\u308c\u306a\u3044\u3002(?)\n\n    # \u57fa\u6e96\u306b\u3059\u308b\u884c\n    pivot_row = A[pos]\n    # \u57fa\u6e96\u4ee5\u5916\u3092\u5168\u90e8\u30bc\u30ed\u306b\u3059\u308b\n    A[bits1] ^= pivot_row\n    A[pos] = pivot_row\n    # \u57fa\u6e96\u884c\u3092\u4e00\u756a\u4e0a\u306b\u6301\u3063\u3066\u304f\u308b\n    A[pos], A[rank] = A[rank], A[pos]\n    rank += 1\n\nans += reduce(xor, A) * 2\nprint(ans)\n", "from numpy import *\nf=bitwise_xor.reduce\nN=int(input())\nA=array(input().split(),int64)\nX=f(A)\nA=hstack((A,array([1<<i for i in range(60)if X&(1<<i)],int64)))\nfor k in range(60)[::-1]:\n  b=1<<k\n  j=A&b!=0\n  i=where(j&(A<2*b))[0]\n  if len(i):i=i[0];x=A[i];A[j]^=x;A[i]=x\nr=f(A)\nprint(r+(r^X))", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n \nimport numpy as np\n \nN = int(input())\nA = np.array([int(x) for x in input().split()],dtype=np.int64)\n \n\"\"\"\nF_2 \u4e0a\u306e\u7dda\u5f62\u4ee3\u6570\u3002\u57fa\u672c\u5909\u5f62\u3067\u7c21\u5358\u306a\u57fa\u5e95\u3092\u5f97\u308b\u3002\n\"\"\"\n \nxor = np.bitwise_xor.reduce(A)\n \nA = np.concatenate([np.array([1<<i for i in range(60) if xor&(1<<i)],np.int64),A])\n \nfor k in range(60,-1,-1):\n    bit = 1<<k\n    one = (A&bit != 0)\n    i = np.where(one & (A < (1<<(k+1))))[0]\n    if len(i) == 0:\n        continue\n    i = i[0]\n    x = A[i]\n    A[one] ^= x\n    A[i] = x\n \nA = A[A != 0]\nA.sort()\nA = A[::-1]\n \nif len(A) > 0:\n\tred = np.bitwise_xor.reduce(A)\nelse:\n    red = 0\nblue = red^xor\nanswer = red + blue\nprint(answer)", "from numpy import int64, bitwise_xor\n\nN, *A = map(int, open(0).read().split())\nA = int64(A)\n\nx = bitwise_xor.reduce(A)\nA &= ~x\n\nres = 0\nwhile any(A):\n    ma = A.max()\n    msb = 1 << (int(ma).bit_length() - 1)\n\n    A[(A & msb) > 0] ^= ma\n\n    res ^= ma * (not res & msb)\n\nprint(x + 2 * res)", "3.6\nn = int(input())\na = [int(item) for item in input().split()]\naor = 0\naxor = 0\nfor item in a:\n    aor |= item\n    axor ^= item\n\nrank = 0\nans = 0\nfor bit in range(61):\n    if axor & 1 << (60 - bit):\n        ans += 1 << (60 - bit)\n        continue\n    found_in_bit = False\n    for i in range(rank, n):\n        if a[i] & 1 << (60 - bit):\n            if not found_in_bit:\n                a[rank], a[i] = a[i], a[rank]\n                # delete bit in upper\n                for j in range(rank):\n                    if a[j] & 1 << (60 - bit):\n                        a[j] ^= a[rank]\n                found_in_bit = True\n                rank += 1\n            else:\n                a[i] ^= a[rank-1]\n        else:\n            continue\n\nret = 0\nfor item in a:\n    ret ^= item & ~axor\nans += ret * 2\nprint(ans)"]