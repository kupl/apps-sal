["n=int(input())\nla=[]\nle=[]\nli=[]\nlo=[]\nlu=[]\nans=[]\nd1={}\nfor i in range(n):\n    s=input()\n    x=s.count('a')+s.count('e')+s.count('i')+s.count('o')+s.count('u')\n    if x>0:\n        \n        for c in s[::-1]:\n            if c=='a' or c=='e' or c=='i' or c=='o' or c=='u':\n                break\n        if (x,c) in d1:\n            d1[(x,c)].append(s)\n        else :\n            d1[(x,c)]=[s]\nd2={}\npairs1=[]\npairs2=[]\nfor k in d1:\n    if len(d1[k])%2==1:\n        if k[0] in d2:\n            d2[k[0]].append(d1[k][0])\n        else :\n            d2[k[0]]=[d1[k][0]]\n        for i in range(1,len(d1[k]),2):\n            pairs1.append((d1[k][i],d1[k][i+1]))\n    else :\n        for i in range(0,len(d1[k]),2):\n            pairs1.append((d1[k][i],d1[k][i+1]))\nfor k in d2:\n    if len(d2[k])>1:\n        if len(d2[k])%2==1:\n            d2[k].pop()\n        for i in range(0,len(d2[k]),2):\n            pairs2.append((d2[k][i],d2[k][i+1]))\nif len(pairs1)<len(pairs2):\n    print(len(pairs1))\n    for i in range(len(pairs1)):\n        print(pairs2[i][0],pairs1[i][0])\n        print(pairs2[i][1],pairs1[i][1])\nelse :\n    print(len(pairs2)+(len(pairs1)-len(pairs2))//2)\n    for i in range(len(pairs2)):\n        print(pairs2[i][0],pairs1[i][0])\n        print(pairs2[i][1],pairs1[i][1])\n    for j in range(len(pairs2),len(pairs1),2):\n        if j==len(pairs1)-1:\n            break\n        else :\n            print(pairs1[j][0],pairs1[j+1][0])\n            print(pairs1[j][1],pairs1[j+1][1])\n    \n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nW=[input().strip() for i in range(n)]\nV={\"a\",\"i\",\"u\",\"e\",\"o\"}\n\nK=[]\n\nfor i,w in enumerate(W):\n    count=0\n    VKEY=\"\"\n\n    for word in w:\n        if word in V:\n            count+=1\n            VKEY=word\n\n    K.append([count,VKEY,i])\n\nK.sort()\n\nfrom collections import deque\nK2=deque(K)\n\n\nQ=deque()\nQ2=deque()\n\n#print(K2)\n\nwhile K2:\n    if len(K2)>=2 and K2[0][0]==K2[1][0] and K2[0][1]==K2[1][1]:\n        x=K2.popleft()\n        y=K2.popleft()\n        Q2.append(x)\n        Q2.append(y)\n\n    else:\n        x=K2.popleft()\n        Q.append(x)\n\nQ1=deque()\nwhile Q:\n    if len(Q)>=2 and Q[0][0]==Q[1][0]:\n        x=Q.popleft()\n        y=Q.popleft()\n        Q1.append(x)\n        Q1.append(y)\n\n    else:\n        x=Q.popleft()\n\nANS=[]\n\n#print(Q1)\n#print(Q2)\n\nwhile Q1 and Q2:\n    x=Q1.popleft()\n    y=Q2.popleft()\n    z=Q1.popleft()\n    w=Q2.popleft()\n    ANS.append([x[2],y[2],z[2],w[2]])\n\nwhile len(Q2)>=4:\n    x=Q2.popleft()\n    y=Q2.popleft()\n    z=Q2.popleft()\n    w=Q2.popleft()\n    ANS.append([x[2],z[2],y[2],w[2]])\n\nprint(len(ANS))\nfor x,y,z,w in ANS:\n    print(W[x],W[y])\n    print(W[z],W[w])\n    \n\n    \n", "from collections import defaultdict\nimport sys\ninput = lambda: sys.stdin.readline().strip()\n\ndef f(x):\n  cnt = 0\n  for i in x:\n    if i in \"aeiou\":\n      cnt += 1\n  return cnt \n\ndef last_vowel(s):\n  for i in s[::-1]:\n    if i in \"aeiou\":\n      return i \n\nn = int(input())\nsarr = [input() for i in range(n)]\n\nd = defaultdict(list)\n\n\nfor s in sarr:\n  d[(f(s), last_vowel(s))].append(s)\n\nsame_same = []\nsame_different = defaultdict(list)\nfor i, j in list(d.items()):\n  if len(j) >= 2:\n    if len(j) % 2 == 1:\n      same_different[i[0]].append(j[-1])\n      j.pop()\n    for i in range(0, len(j), 2):\n      same_same.append((j[i], j[i+1]))\n  else:\n    same_different[i[0]].append(j[0])\n\n#print(same_same)\n\nsame_different_list = []\nfor i, j in list(same_different.items()):\n  if len(j) >= 2:\n    if len(j) % 2 == 1:\n      j.pop()\n    \n    for i in range(0, len(j), 2):\n      same_different_list.append((j[i], j[i+1]))\n\n#print(same_different_list)\n\n\nans = []\n\nwhile same_same and same_different_list:\n  ans.append((same_same[-1], same_different_list[-1]))\n  same_same.pop()\n  same_different_list.pop()\n\nwhile len(same_same) >= 2:\n  ans.append((same_same[-1], same_same[-2]))\n  same_same.pop()\n  same_same.pop()\n\nprint(len(ans))\n\nfor (b1, b2), (a1, a2) in ans:\n  sys.stdout.write(a1 + \" \" + b1 + \"\\n\")\n  sys.stdout.write(a2 + \" \" + b2 + \"\\n\")\n\n", "import sys\nfrom collections import defaultdict\nvowel = set([ord(x) for x in ('a', 'e', 'i', 'o', 'u')])\nD = {v: i for i, v in enumerate([ord(x) for x in ('a', 'e', 'i', 'o', 'u')])}\nN = int(input())\nA = defaultdict(list)\nB = defaultdict(list)\ngeta = 10\nI = [sys.stdin.readline().strip() for _ in range(N)]\nfor i, S in enumerate(I):\n    S = [ord(x) for x in S]\n    p = None\n    c = 0\n    for s in S[::-1]:\n        if s in vowel:\n            if p is None:\n                p = D[s]\n            c += 1\n    A[c*geta + p].append(i)\n    B[c].append(i)\n\nSA = sum(len(v)//2 for v in A.values())\nSB = sum(len(v)//2 for v in B.values())\nCA = []\nCB = []\nused = set()\nfor v in A.values():\n    for i in range(0, len(v)-1, 2):\n        CA.append((v[i], v[i+1]))\n        used.add(v[i])\n        used.add(v[i+1])\nfor v in B.values():\n    fill = True\n    T = None\n    for i in v:\n        if i not in used:\n            fill = not fill\n            if fill:\n                CB.append((T, i))\n            else:\n                T = i\n\nans = min(SA, SB//2)\nprint(ans)\nf = min(len(CA), len(CB))\nfor i in range(f):\n    a, b = CA.pop()\n    c, d = CB.pop()\n    print(I[c], I[a])\n    print(I[d], I[b])\nfor _ in range(ans - f):\n    a, b = CA.pop()\n    c, d = CA.pop()\n    print(I[c], I[a])\n    print(I[d], I[b])", "voy=['a','e','i','o','u']\ndef de(a):\n    for i in a[::-1]:\n        if i in voy:\n            return i\ndi={}\nta=set()\nfor k in range(int(input())):\n    a=input()\n    nb=sum((i in voy) for i in a)\n    if not(nb in ta):\n        for v in voy:\n            di[(nb,v)]=[]\n        ta.add(nb)\n    d=de(a)\n    cl=(nb,d)\n    di[cl].append(a)\nco1=sum(len(di[k])//2 for k in di)\nco2=sum(sum(len(di[k,v]) for v in voy)//2 for k in ta)//2\nwo=[]\nco=min(co1,co2)\nnb=0\nfor k in di:\n    nbl=0\n    for i,j in zip(di[k][::2],di[k][1::2]):\n        if nb!=co:\n            wo.append([i,j])\n            nb+=1\n            nbl+=1\n    di[k]=di[k][2*nbl:]\ndi2=[di[k,'a']+di[k,'e']+di[k,'i']+di[k,'o']+di[k,'u'] for k in ta]\np=0\nfor k in di2:\n    for i,j in zip(k[::2],k[1::2]):\n        if p!=len(wo):\n            wo[p].append(i)\n            wo[p].append(j)\n            p+=1\nprint(co)\nfor k in wo:\n    print(k[2],k[0])\n    print(k[3],k[1])\n", "n = int(input())\nword = []\nendwith = [{} for i in range(5)]\n\nsecond = []\nfirst = {}\n\nfor i in range(n):\n\tw = input()\n\tword.append(w)\n\tc = 0\n\tlastkind = 0\n\tfor ch in w:\n\t\tif ch == 'a':\n\t\t\tlastkind = 0\n\t\t\tc += 1\n\t\telif ch == 'e':\n\t\t\tlastkind = 1\n\t\t\tc += 1\n\t\telif ch == 'i':\n\t\t\tlastkind = 2\n\t\t\tc += 1\n\t\telif ch == 'o':\n\t\t\tlastkind = 3\n\t\t\tc += 1\n\t\telif ch == 'u':\n\t\t\tlastkind = 4\n\t\t\tc += 1\n\tif c not in endwith[lastkind]:\n\t\tendwith[lastkind][c] = [i]\n\telse:\n\t\tendwith[lastkind][c].append(i)\n# print(endwith)\nfor i in range(5):\n\tfor key, value in list(endwith[i].items()):\n\t\twhile len(value) >= 2:\n\t\t\tsecond.append(value.pop())\n\t\t\tsecond.append(value.pop())\n\t\tif len(value) == 1:\n\t\t\tif key in first:\n\t\t\t\tfirst[key].append(value[0])\n\t\t\telse:\n\t\t\t\tfirst[key] = [value[0]]\nans = []\nm = 0\nfor key, value in list(first.items()):\n\twhile len(value) >= 2 and len(second) >= 2:\n\t\tans.append((value.pop(), value.pop(), second.pop(), second.pop()))\n\t\tm += 1\nwhile len(second) >= 4:\n\tans.append((second.pop(), second.pop(), second.pop(), second.pop()))\n\tm += 1\nprint(m)\nfor tup in ans:\n\tprint(word[tup[0]], word[tup[2]])\n\tprint(word[tup[1]], word[tup[3]])\n\n\n\n\n\n\t\n\n\n", "from collections import Counter\nimport sys\n\n\ndef count(word):\n    lst = ''\n    k = 0\n    for el in word:\n        if el in gl:\n            k += 1\n            lst = el\n    return k, lst\n\n\nn = int(input())\ngl = set('aeoui')\nd = dict()\nb = dict()\nfor i in range(n):\n    t = input()\n    s = count(t)\n    if s[0] in b:\n        b[s[0]][t] += 1\n    else:\n        b[s[0]] = Counter()\n        b[s[0]][t] += 1\n    if s in d:\n        d[s].append(t)\n    else:\n        d[s] = [t]\nleftpair = []\nrightpair = []\nfor el in d:\n    for i in range(0, len(d[el]) - 1, 2):\n        rightpair.append((d[el][i], d[el][i + 1]))\n        b[el[0]][d[el][i]] -= 1\n        b[el[0]][d[el][i + 1]] -= 1\n# print(b)\nfor el in b:\n    last1len = -1\n    for ell in b[el]:\n        if b[el][ell] % 2 == 1:\n            if last1len != -1:\n                leftpair[last1len].append(ell)\n                last1len = -1\n            else:\n                leftpair.append([ell])\n                last1len = len(leftpair) - 1\n        for k in range(b[el][ell] // 2):\n            leftpair.append((ell, ell))\n    if last1len != -1:\n        leftpair.pop(last1len)\nif len(rightpair) > len(leftpair):\n    t = (len(rightpair) + len(leftpair)) // 2\n    leftpair.extend(rightpair[t:])\n    rightpair = rightpair[:t]\nprint(min(len(leftpair), len(rightpair)))\n# print(leftpair)\n# print(rightpair)\nfor i in range(min(len(leftpair), len(rightpair))):\n    sys.stdout.write(leftpair[i][0] + ' ' + rightpair[i][0] + '\\n' + leftpair[i][1] + ' ' + rightpair[i][1] + '\\n')\n", "N = int(input())\n\nwords = [input() for _ in range(N)]\nused = [0 for _ in range(N)]\n\ndef last_vowel(s):\n\tfor i in range(len(s) - 1, -1, -1):\n\t\tif s[i] in \"aeiou\":\n\t\t\treturn s[i]\n\traise RuntimeException(\"CF BAD\")\n\ndef count_vowels(s):\n\tcount = 0\n\tfor c in s:\n\t\tif c in \"aeiou\":\n\t\t\tcount += 1\n\treturn count\n\ndef key(s):\n\tcount = 0\n\tlast = \"\"\n\tfor c in s:\n\t\tif c in \"aeiou\":\n\t\t\tcount += 1\n\t\t\tlast = c\n\treturn (count, last)\n\nbuckets = {}\nfinalbuckets = {}\n\nfor index, word in enumerate(words):\n\tk = key(word)\n\tif k not in buckets: buckets[k] = []\n\tif k[0] not in finalbuckets: finalbuckets[k[0]] = []\n\tbuckets[k].append(index)\n\tfinalbuckets[k[0]].append(index)\n\nfp = []\nsp = []\n\nfor b in buckets:\n\tif len(buckets[b]) < 2: continue\n\tfor i in range(0, len(buckets[b]) - 1, 2):\n\t\tsp.append((buckets[b][i], buckets[b][i + 1]))\n\t\tused[buckets[b][i]] = 1\n\t\tused[buckets[b][i + 1]] = 1\n\nfor b in finalbuckets:\n\tpair = None\n\tfor word in finalbuckets[b]:\n\t\tif used[word]: continue\n\t\tif pair is None:\n\t\t\tpair = word\n\t\telse:\n\t\t\tfp.append((pair, word))\n\t\t\tpair = None\n\nmove = max(0, (len(sp) - len(fp)) // 2)\n\nz = list(zip(fp + sp[:move], sp[move:]))\n\nprint(len(z))\n\nfor (f0, f1), (s0, s1) in z:\n\tprint(words[f0], words[s0])\n\tprint(words[f1], words[s1])\n", "# python template for atcoder1\nimport sys\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\nN = int(input())\nwords = [input()[:-1] for _ in range(N)]\nvowels = (\"a\", \"i\", \"u\", \"e\", \"o\")\n\ncounted_word = []\nfor word in words:\n    last_vowel = \"\"\n    num_vowel = 0\n    for c in word:\n        if c in vowels:\n            num_vowel += 1\n            last_vowel = c\n    counted_word.append([word, num_vowel, last_vowel])\n\ncounted_word = sorted(counted_word, key=lambda x: (x[1], x[2]))\n\ncand_second = []\nunused = []\nused = [False]*N\n\nfor i, w1, w2 in zip(list(range(N)), counted_word, counted_word[1:]):\n    if used[i]:\n        continue\n    if w1[1] == w2[1] and w1[2] == w2[2]:\n        cand_second.append([w1, w2])\n        used[i] = True\n        used[i+1] = True\n    else:\n        unused.append(w1)\nif not used[-1]:\n    unused.append(counted_word[-1])\n\ncand_first = []\nused = [0]*len(unused)\nfor i, w1, w2 in zip(list(range(len(unused))), unused, unused[1:]):\n    if used[i]:\n        continue\n    if w1[1] == w2[1]:\n        cand_first.append([w1, w2])\n        used[i] = True\n        used[i+1] = True\n\nlen_first = len(cand_first)\nlen_second = len(cand_second)\n\ndiff = len_second-len_first\nif diff > 1:\n    for i in range(diff//2):\n        cand_first.append(cand_second[-i-1])\nans = min(len_second, len(cand_first))\n\nprint(ans)\nfor first, second in zip(cand_first, cand_second):\n    print(first[0][0], second[0][0])\n    print(first[1][0], second[1][0])\n", "n = int( input() )\nwords = [ input() for i in range( n ) ]\n\nd = {}\nfor w in words:\n    vs = \"\".join( [ c if c in 'aeiou' else '' for c in w ])\n    v = len(vs)\n    last = vs[ -1 ]\n    if not v in d:\n        d[ v ] = {}\n    dd = d[ v ]\n    if not last in dd:\n        dd[ last ] = []\n    dd[ last ].append( w )\n\npairs = []\ne = {}\nfor v, dd in list(d.items()):\n    for c, l in list(dd.items()):\n        while len(l) > 1:\n            p = l.pop(), l.pop()\n            pairs.append( p )\n        if len( l ) > 0:\n            if v in e:\n                e[ v ] += l\n            else:\n                e[ v ] = l\n\nans = []\nfor c, l in list(e.items()):\n    while len( l ) > 1 and len( pairs ) > 0:\n        a = l.pop(), l.pop()\n        for i, j in zip(a,pairs.pop()):\n            ans.append( (i,j))\n\nwhile len( pairs ) > 1:\n    for i, j in zip( pairs.pop(), pairs.pop() ):\n        ans.append( (i,j) )\n\nprint( len( ans ) // 2 )\nfor i, j in ans:\n    print( i, j )\n", "GL = set(list(\"aeiou\"))\n\nn = int(input())\ndi = dict()\ntails = dict()\nends = 0\nends_words = []\nstarts = 0\nstarts_words = []\n\nfor i in range(n):\n    word = input()\n    counter = 0\n    for w in word:\n        if w in GL:\n            last = w\n            counter += 1\n    if (last, counter) not in di:\n        di[(last, counter)] = [word]\n    else:\n        di[(last, counter)].append(word)\n\nfor i in list(di.keys()):\n    ends += len(di[i]) // 2 * 2\n    while len(di[i]) > 1:\n        fir = di[i].pop()\n        sec = di[i].pop()\n        ends_words.append([fir, sec])\n\n\nfor i in list(di.keys()):\n    if di[i] == []:\n        continue\n    if i[1] in tails:\n        starts += 2\n        starts_words.append([di[i][0], tails[i[1]]])\n        del tails[i[1]]\n    else:\n        tails[i[1]] = di[i][0]\n\nwhile len(ends_words) > len(starts_words):\n    starts_words.append(ends_words.pop())\n\nprint(len(ends_words))\nfor i in range(len(ends_words)):\n    end = ends_words.pop()\n    st = starts_words.pop()\n    print(st[0], end[0])\n    print(st[1], end[1])\n\n\n    \n", "from collections import deque\n\nif True:\n    N = int(input())\n    # X = [[[] for _ in range(5)] for i in range(500001)]\n    X = {}\n    def calc(t):\n        c = 0\n        v = 0\n        for u in reversed(t):\n            if u == \"a\" or u == \"i\" or u == \"u\" or u == \"e\" or u == \"o\":\n                if c == 0:\n                    if u == \"a\": v = 0\n                    if u == \"i\": v = 1\n                    if u == \"u\": v = 2\n                    if u == \"e\": v = 3\n                    if u == \"o\": v = 4\n                c += 1\n        if c not in X:\n            X[c] = [[] for _ in range(5)]\n        \n        X[c][v].append(t)\n\n    for _ in range(N):\n        calc(input())\nelse:\n    N = 14\n    X = [[[], [], [], [], []], [['am', 'that'], ['this', 'is', 'first', 'mcdics', 'i'], [], ['the'], ['wow']], [[], [], ['round', 'proud'], [], []], [['hooray'], [], ['about'], [], []], [[], [], [], ['codeforces'], []]]\n# print(\"X =\", X)\nA = 0\nB = 0\nQ = deque([])\nfor i in X:\n    # print(\"X[i] =\", X[i])\n    # print([len(x)//2 for x in X[i]])\n    a = sum([len(x)//2 for x in X[i]]) * 2\n    b = sum([len(x) for x in X[i]])//2*2 - a\n    A += a\n    B += b\n    # print(\"a, b, A, B =\", a, b, A, B)\n    for j in range(5):\n        while len(X[i][j]) >= 2:\n            deque.appendleft(Q, X[i][j].pop())\n            deque.appendleft(Q, X[i][j].pop())\n    \n    for j in range(5):\n        while len(X[i][j]) >= 1 and b > 0:\n            deque.append(Q, X[i][j].pop())\n            b -= 1\n    # print(\"Q =\", Q)\n\nans = min(A//2, (A+B)//4)\nprint(ans)\nfor _ in range(ans):\n    print(Q.pop(), Q.popleft())\n    print(Q.pop(), Q.popleft())\n\n", "\nVOWELS = ('a', 'e', 'i', 'o', 'u')\n\ndef main():\n    buf = input()\n    n = int(buf)\n    s = []\n    for i in range(n):\n        buf = input()\n        s.append(buf)\n    word_info = []\n    for i, x in enumerate(s):\n        vowel_count = 0\n        last_vowel = None\n        for c in x:\n            if c in VOWELS:\n                vowel_count += 1\n                last_vowel = c\n        word_info.append((i, vowel_count, last_vowel))\n    word_info.sort(key=lambda x: (x[1], x[2]))\n    word_pair = []\n    word_pair_first_only = []\n    last_vowel_count = 0\n    last_last_vowel = None\n    last_word = None\n    last_word_leftover = None\n    for i, x in enumerate(word_info):\n        if x[1] > last_vowel_count:\n            if last_word and last_word_leftover:\n                word_pair_first_only.append((last_word, last_word_leftover))\n            last_word_leftover = None\n            last_word = None\n            last_vowel_count = x[1]\n            last_last_vowel = x[2]\n        if x[2] != last_last_vowel:\n            if last_word:\n                if last_word_leftover:\n                    word_pair_first_only.append((last_word, last_word_leftover))\n                    last_word_leftover = None\n                else:\n                    last_word_leftover = last_word\n                last_word = None\n            last_last_vowel = x[2]\n        if last_word:\n            word_pair.append((last_word, x))\n            last_word = None\n        else:\n            last_word = x\n    if last_word and last_word_leftover:\n        word_pair_first_only.append((last_word, last_word_leftover))\n    lyrics = []\n    first_only_pointer = 0\n    last_word_pair = None\n    for i, x in enumerate(word_pair):\n        if first_only_pointer < len(word_pair_first_only):\n            last_word_pair = word_pair_first_only[first_only_pointer]\n            first_only_pointer += 1\n        if last_word_pair:\n            lyrics.append((last_word_pair, x))\n            last_word_pair = None\n        else:\n            last_word_pair = x\n    print(len(lyrics))\n    for x in lyrics:\n        print(s[x[0][0][0]], s[x[1][0][0]])\n        print(s[x[0][1][0]], s[x[1][1][0]])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "vowelList=['a','e','i','o','u']\n\nr=int(input())\nstringArr=[]\nfor i in range(r):\n    string=input()\n    properties=[]\n    properties.append(string)\n    backStr=string[::-1]\n    numVowel=0\n    for j in range(len(string)):\n        if backStr[j] in vowelList:\n            if numVowel==0:\n                properties.append(backStr[j])\n            numVowel+=1\n    properties.append(numVowel)\n    stringArr.append(properties)\nstringArr.sort(key=lambda arr: arr[2])\nn=1\nleft=0\nequalNumVowels=[]\ncorrespondingSecondPairs=[]\ncorrespondingFirstPairs=[]\ncurrentArr=[]\nfor i in range(r):\n    if stringArr[i][2]>n:\n        equalNumVowels.append(currentArr)\n        n=stringArr[i][2]\n        currentArr=[]\n    currentArr.append(stringArr[i])\n    \nequalNumVowels.append(currentArr)\n\n\nfor ar in equalNumVowels:\n    aArr=[]\n    eArr=[]\n    iArr=[]\n    oArr=[]\n    uArr=[]\n    for item in ar:\n        if item[1]==\"a\":\n            aArr.append(item)\n        elif item[1]==\"e\":\n            eArr.append(item)\n        elif item[1]==\"i\":\n            iArr.append(item)\n        elif item[1]==\"o\":\n            oArr.append(item)\n        else:\n            uArr.append(item)\n    while len(aArr)>1:\n        m=aArr.pop()\n        n=aArr.pop()\n        correspondingSecondPairs.append([m,n])\n    while len(eArr)>1:\n        m=eArr.pop()\n        n=eArr.pop()\n        correspondingSecondPairs.append([m,n])\n    while len(iArr)>1:\n        m=iArr.pop()\n        n=iArr.pop()\n        correspondingSecondPairs.append([m,n])\n    while len(oArr)>1:\n        m=oArr.pop()\n        n=oArr.pop()\n        correspondingSecondPairs.append([m,n])\n    while len(uArr)>1:\n        m=uArr.pop()\n        n=uArr.pop()\n        correspondingSecondPairs.append([m,n])\n    leftOver=[]\n    if len(aArr)==1:\n        leftOver.append(aArr[0])\n    if len(eArr)==1:\n        leftOver.append(eArr[0])\n    if len(iArr)==1:\n        leftOver.append(iArr[0])\n    if len(oArr)==1:\n        leftOver.append(oArr[0])\n    if len(uArr)==1:\n        leftOver.append(uArr[0])\n    while len(leftOver)>1:\n        m=leftOver.pop()\n        n=leftOver.pop()\n        correspondingFirstPairs.append([m,n])\n    \nprint(min(len(correspondingSecondPairs),len(correspondingFirstPairs)+(len(correspondingSecondPairs)-len(correspondingFirstPairs))//2))\nwhile len(correspondingFirstPairs)>=1 and len(correspondingSecondPairs)>=1:\n    a=correspondingFirstPairs.pop()\n    b=correspondingSecondPairs.pop()\n    print(str(a[0][0]) + \" \" + str(b[0][0]) + \"\\n\" + str(a[1][0]) + \" \" + str(b[1][0]))\n\nwhile len(correspondingSecondPairs)>=2:\n    a=correspondingSecondPairs.pop()\n    b=correspondingSecondPairs.pop()\n    print(str(a[0][0]) + \" \" + str(b[0][0]) + \"\\n\" + str(a[1][0]) + \" \" + str(b[1][0]))", "n = int(input())\nd = {}\nish = {'a', 'e', 'o', 'i', 'u'}\n\n\ndef last_g(x):\n    for el in x[::-1]:\n        if el in ish:\n            return el\n\n\nfor i in range(n):\n    s = input()\n    count = s.count('a') + s.count('e') + s.count('o') + s.count('i') + s.count('u')\n    if count in d:\n        d[count].append(s)\n    else:\n        d[count] = [s]\nfirsts = []\nseconds = []\nfor e in d:\n    gd = {'a': [], 'e': [], 'o': [], 'i': [], 'u': []}\n    pairs = []\n    for s in d[e]:\n        gd[last_g(s)].append(s)\n    for b in gd:\n        for i in range(0, len(gd[b])-1, 2):\n            seconds.append((gd[b][i], gd[b][i+1]))\n        if len(gd[b])%2 == 1:\n            pairs.append(gd[b][-1])\n    for i in range(0, len(pairs)-1, 2):\n        firsts.append((pairs[i], pairs[i+1]))\nq = len(seconds)\nm = len(firsts)\nif m >= q:\n    print(q)\n    for i in range(q):\n        print(firsts[i][0] + ' ' + seconds[i][0])\n        print(firsts[i][1] + ' ' + seconds[i][1])\nelse:\n    print(m + (q - m)//2)\n    for i in range(m):\n        print(firsts[i][0] + ' ' + seconds[i][0])\n        print(firsts[i][1] + ' ' + seconds[i][1])\n    for i in range(m, q-1, 2):\n        print(seconds[i][0] + ' ' + seconds[i+1][0])\n        print(seconds[i][1] + ' ' + seconds[i+1][1])", "import os\nfrom io import BytesIO, StringIO\n#input = BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\nDEBUG = False\ndebug_print = print if DEBUG else lambda *x,**y: None\n\ndef input_as_list():\n    return list(map(int, input().split()))\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\ndef main():\n    from collections import defaultdict\n\n    n = int(input())\n    vowels = 'aeiou'\n\n    def parse(s):\n        count = 0\n        last_vowel = ''\n\n        for c in s:\n            if c in vowels:\n                count += 1\n                last_vowel = c\n\n        return count, last_vowel\n\n\n    alls = []\n    pool = defaultdict(dict)\n    poolA = []\n    poolB = []\n\n    for _ in range(n):\n        alls.append(input())\n\n    for s in alls:\n        c, lv = parse(s)\n\n        if lv in pool[c]:\n            s2 = pool[c].pop(lv)\n            poolB.append((s, s2))\n        else:\n            pool[c][lv] = s\n\n    for d in pool.values():\n        d = [s for s in d.values()]\n        while len(d) >= 2:\n            poolA.append((d.pop(), d.pop()))\n\n    debug_print(poolA, poolB, n)\n\n    out = []\n    while poolB:\n        s2, s4 = poolB.pop()\n        if poolA:\n            s1, s3 = poolA.pop()\n        else:\n            if poolB:\n                s1, s3 = poolB.pop()\n            else:\n                break\n        out.append(s1 + ' ' + s2 + '\\n' + s3 + ' ' + s4)\n\n    print(len(out))\n    print('\\n'.join(out))\n\nmain()", "def fun(string):\n    last = ''\n    amount = 0\n    saw = False\n    r = len(string)\n    for i in range(r - 1, -1, -1):\n        if string[i] in gay:\n            amount += 1\n            if not saw:\n                saw = True\n                last = string[i]\n    return amount, last\n\n\ndef main():\n    n = int(input())\n    # to hack this solution write any test with n == 2e5, TLE\n    words = {}\n    sizesandlasts = {}\n    sizes = set()\n    for i in range(n):\n        s = input()\n        pair = size, last = fun(s)\n        sizes.add(size)\n        words[s] = pair\n        if pair not in sizesandlasts:\n            sizesandlasts[pair] = []\n        sizesandlasts[pair].append(s)\n\n    second = []\n    first = {}\n    for length in sizes:\n        for ch in gay:\n            text = sizesandlasts.get((length, ch), [])\n            for val in range(len(text) // 2):\n                second.append([text.pop(), text.pop()])\n            if len(text) > 0:\n                size = words[text[0]][0]\n                if size not in first:\n                    first[size] = []\n                first[size].append(text.pop())\n\n    ans = []\n    for size in first:\n        if len(second) == 0:\n            break\n        else:\n            while len(first[size]) > 1 and len(second) > 0:\n                ans.append([[first[size].pop(), first[size].pop()], second.pop()])\n    while len(second) > 1:\n        ans.append([second.pop(), second.pop()])\n    print(len(ans))\n    for i in range(len(ans)):\n        print(\"{} {}\".format(ans[i][0][0], ans[i][1][0]))\n        print(\"{} {}\".format(ans[i][0][1], ans[i][1][1]))\n\n\ngay = set()\nfor char in ['a', 'e', 'o', 'i', 'u']:\n    gay.add(char)\nmain()\n", "n = int(input())\n\nvowels = {'a', 'e', 'o', 'i', 'u'}\n\nwords = []\nfor i in range(n):\n\twords.append(input())\n\n\nall_pairs = {}\nsec_pairs = {}\n\nfor item in words:\n\tcnt, last = 0, -1\n\tfor i in item:\n\t\tif i in vowels:\n\t\t\tcnt += 1\n\t\t\tlast = i\n\n\t# all_pairs\n\tif cnt not in all_pairs:\n\t\tall_pairs[cnt] = {item : 1}\n\telse:\n\t\tif item in all_pairs[cnt]:\n\t\t\tall_pairs[cnt][item] += 1\n\t\telse:\n\t\t\tall_pairs[cnt][item] = 1\n\n\t# sec_pairs\n\tif cnt not in sec_pairs:\n\t\tsec_pairs[cnt] = {last: {item: 1} }\n\telse:\n\t\tif last not in sec_pairs[cnt]:\n\t\t\tsec_pairs[cnt][last] = {item : 1}\n\t\telse:\n\t\t\tif item not in sec_pairs[cnt][last]:\n\t\t\t\tsec_pairs[cnt][last][item] = 1\n\t\t\telse:\n\t\t\t\tsec_pairs[cnt][last][item] += 1\n\ns_p = 0\ns_list = []\nfor cnt in list(sec_pairs.keys()):\n\tfor last in list(sec_pairs[cnt].keys()):\n\t\ts = 0\n\t\tcnt_l_list = []\n\t\tfor word in list(sec_pairs[cnt][last].keys()):\n\t\t\ts += sec_pairs[cnt][last][word]\n\t\t\tcnt_l_list += sec_pairs[cnt][last][word] * [word]\n\t\ts_p += s // 2\n\t\ts_list.extend(cnt_l_list[:2 * (s // 2)])\n\n\nall_p = 0\nfor cnt in list(all_pairs.keys()):\n\ts = 0\n\tfor word in list(all_pairs[cnt].keys()):\n\t\ts += all_pairs[cnt][word]\n\tall_p += s // 2\n\nans = min(s_p, all_p // 2)\ns_list = s_list[:2*ans]\n\n# undate all_p\nfor item in s_list:\n\tcnt = 0\n\tfor i in item:\n\t\tif i in vowels:\n\t\t\tcnt += 1\n\tall_pairs[cnt][item] -= 1\n\nf_list = []\nfor cnt in list(all_pairs.keys()):\n\tcnt_l = []\n\ts = 0\n\tfor word in list(all_pairs[cnt].keys()):\n\t\tcnt_l += all_pairs[cnt][word] * [word]\n\t\ts += all_pairs[cnt][word]\n\tf_list.extend(cnt_l[:2*(s//2)])\nf_list = f_list[:2*ans]\n# print(f_list)\nprint(ans)\n# print(s_list)\n\nfor i in range(ans):\n\tprint(f_list[2*i], s_list[2*i])\n\tprint(f_list[2*i+1], s_list[2*i+1])\n\t\n\n", "\nimport math\nimport sys\n\n#imgur.com/Pkt7iIf.png\n\n#n, m = map(int, input().split())\n#n = int(input())\n#d = list(map(int, input().split()))\n\nn = int(input())\ndicn = [{} for i in range(10**6)]\nmaxv = set()\n\nv = {'a', 'e', 'i', 'o', 'u'}\nfor i in range(n):\n    t = input()\n    c = 0\n    lv = ''\n    for l in t:\n        if l in v: \n            c += 1\n            lv = l\n\n    if lv in dicn[c-1]:\n        dicn[c-1][lv].append(t)\n    else: dicn[c-1][lv] = [t]\n    maxv.add(c)\n\nmaxv = sorted(list(maxv))\n\nfirst = [[] for i in range(maxv[-1])]\nsecond = []\n\nfor i in maxv:\n    for j in dicn[i-1]:\n        if len(dicn[i-1][j])%2 == 1:\n            #t = dicn[i-1][j].pop()\n            first[i-1].append(dicn[i-1][j].pop())\n        if len(dicn[i-1][j]) > 0: second += dicn[i-1][j]\n\nt = []\nc = 0\n\n#print(first)\n#print(second)\n\nfor f in first:\n    while len(f) >= 2 and len(second) >= 2:\n        c += 1\n        t.append(' '.join([f.pop(), second.pop()]))\n        t.append(' '.join([f.pop(), second.pop()]))\n       \nwhile len(second) >= 4:\n    c += 1\n    q = []\n    w = [] \n    q.append(second.pop())\n    w.append(second.pop())\n    q.append(second.pop())\n    w.append(second.pop())\n    t.append(' '.join(q))\n    t.append(' '.join(w))\n\nprint(len(t)//2)\nfor i in t:\n    print(i)\n\n\n\n\n\n", "import sys,heapq\nfrom collections import deque,defaultdict\nprintn = lambda x: sys.stdout.write(x)\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      list(map(int, input().split()))\nDBG = True # and False\ndef ddprint(x):\n  if DBG:\n    print(x)\n\nn = inn()\nvowels = ['a', 'e', 'i', 'o', 'u']\nh = {}\nfor v in vowels:\n    h[v] = {}\ncounts = defaultdict(int)\nfor i in range(n):\n    s = input()\n    cnt = 0\n    lastvow = '.'\n    for j in range(len(s)):\n        if s[j] in vowels:\n            cnt += 1\n            lastvow = s[j]\n    #ddprint(\"s {} cnt {} lastvow {}\".format(s,cnt,lastvow))\n    if cnt not in h[lastvow]:\n        h[lastvow][cnt] = []\n    h[lastvow][cnt].append(s)\n    counts[cnt] += 1\n\nnpairs = 0\nfor cnt in counts:\n    npairs += counts[cnt]//2\n\nnvpairs = 0\nfor v in vowels:\n    for cnt in h[v]:\n        nvpairs += len(h[v][cnt])//2\n\nnlyrics = min(npairs//2, nvpairs)\nif nlyrics == 0:\n    print(0)\n    return\n\nlyrics = [0] * nlyrics\nlcnt = 0\nfor v in vowels:\n        for cnt in h[v]:\n            while len(h[v][cnt]) >= 2:\n                w21 = h[v][cnt].pop()\n                w22 = h[v][cnt].pop()\n                lyrics[lcnt] = [w21,w22]\n                lcnt += 1\n                if lcnt == nlyrics:\n                    break\n            if lcnt == nlyrics:\n                break\n        if lcnt == nlyrics:\n            break\n\n#ddprint(lyrics)\n\nwords = {}\nfor v in vowels:\n    for cnt in h[v]:\n        if cnt not in words:\n            words[cnt] = []\n        words[cnt].extend(h[v][cnt])\n\nlcnt = 0\nfor cnt in words:\n    while len(words[cnt]) >= 2:\n        w11 = words[cnt].pop()\n        w12 = words[cnt].pop()\n        lyrics[lcnt].extend([w11,w12])\n        lcnt += 1\n        if lcnt == nlyrics:\n            break\n    if lcnt == nlyrics:\n        break\n\nprint(nlyrics)\nfor z in lyrics:\n    print(\"{} {}\".format(z[2], z[0]))\n    print(\"{} {}\".format(z[3], z[1]))\n", "n = int(input())\n\n\nd = []\nfor _ in range(n):\n    s1 = input()\n    s2 = \"\"\n    for c in s1:\n        if c in ('a', 'e', 'o', 'i',  'u'):\n            s2 += c\n\n    d.append((len(s2), s2[-1], s1))\n\n\nd.sort(key=lambda x: (x[0], x[1]))\n\nr = []\n\nost = []\np_a, p_b, p_c = 0, '', ''\nfor a, b, c in d:\n    if a == p_a and b == p_b:\n        r.append([p_c, c])\n        p_a, p_b, p_c = 0, '', ''\n        continue\n    if p_a != 0:\n        ost.append((p_a, p_b, p_c))\n    p_a, p_b, p_c = a, b, c\n\nif p_a != 0:\n    ost.append((p_a, p_b, p_c))\n\n\n#print(r)\n#print(ost)\n\ni = 0\np_a, p_c = 0, ''\nfor a, b, c in ost:\n    if a == p_a and i < len(r):\n        r[i].append(p_c)\n        r[i].append(c)\n        p_a = 0\n        i+=1\n        continue\n    p_a, p_b, p_c = a, b, c\n\n#print(r)\nr_final = r[:i]\n\nfor j in range(i, len(r), 2):\n\n    if j < len(r)-1:\n        r[j].extend(r[j + 1])\n        r_final.append(r[j])\n\nprint(len(r_final))\nfor g in r_final:\n    print(\" \".join([g[2], g[0]]))\n    print(\" \".join([g[3], g[1]]))\n\n\n", "first_pairs = []\nsecond_pairs = []\n\nlines = int(input())\nwords = {}\nfor i in range(lines):\n    w = input()\n    vow_cnt = 0\n    vow_last = ''\n    for c in w:\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            vow_cnt += 1\n            vow_last = c\n    if vow_cnt not in words:\n        words[vow_cnt] = {}\n    if vow_last not in words[vow_cnt]:\n        words[vow_cnt][vow_last] = w\n    else:\n        second_pairs.append((words[vow_cnt][vow_last], w))\n        del words[vow_cnt][vow_last]\n\nfor l in words:\n    first = None\n    second = None\n    for k in list(words[l].keys()):\n        if first is None:\n            first = k\n            continue\n        second = k\n        first_pairs.append((words[l][first], words[l][second]))\n        first = None\n\nwhile len(first_pairs) < len(second_pairs):\n    first_pairs.append(second_pairs.pop())\n\nprint(len(second_pairs))\n\nfor f, s in zip(first_pairs, second_pairs):\n    print(\"{} {}\".format(f[0], s[0]))\n    print(\"{} {}\".format(f[1], s[1]))\n", "from collections import defaultdict\n\nvow = \"aeoiu\"\n\n\ndef vowels(word):\n    c = 0\n    for i in word:\n        if i in vow:\n            c += 1\n    return c\n\n\ndef last_vov(word):\n    for i in reversed(word):\n        if i in vow:\n            return i\n\n\nmp = defaultdict(lambda: defaultdict(list))\n\nfor _ in range(int(input())):\n    w = input()\n    mp[vowels(w)][last_vov(w)].append(w)\n\nsecond_w = []\nfirst_w = []\n\nfor last_v_dict in mp.values():\n    first_w_t = []\n    for words in last_v_dict.values():\n        if len(words) % 2 == 1:\n            if len(words) > 2:\n                second_w += words[:-1]\n            first_w_t.append(words[-1])\n        else:\n            second_w += words\n    if len(first_w_t) >= 2:\n        if len(first_w_t) % 2 == 1:\n            first_w += first_w_t[:-1]\n        else:\n            first_w += first_w_t\n\nwhile len(second_w) > len(first_w):\n    first_w.append(second_w.pop())\n    first_w.append(second_w.pop())\n\nprint(len(second_w) // 2)\nfor i, word in enumerate(second_w):\n    print(first_w[i], word)"]