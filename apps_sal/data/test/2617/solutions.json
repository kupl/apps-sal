["T = int(input())\n\nfor t in range(T):\n  n = int(input())\n  s = 1\n  nxt = 2\n  x = [1]\n  while n > s:\n    diff = n-s\n    if diff <= nxt:\n      x.append(diff)\n      break\n    x.append(nxt)\n    s += nxt\n    nxt *= 2\n  x.sort()\n  ans = ''\n  for i in range(len(x)-1):\n    v = x[i+1]-x[i]\n    ans += str(v)+' '\n  print(len(x)-1)\n  print(ans[:-1])\n", "import sys\n\nstdin = sys.stdin\n\nns = lambda: stdin.readline().rstrip()\nni = lambda: int(stdin.readline().rstrip())\nnm = lambda: list(map(int, stdin.readline().split()))\nnl = lambda: list(map(int, stdin.readline().split()))\n\ndef solve():\n    n = ni()\n    da = n.bit_length() - 1\n    print(da)\n    n -= da + 1\n    f = [0]*da\n    mx = 1\n    for i in range(da):\n        gr = min(mx, n//(da-i))\n        f[i] = gr\n        mx += gr\n        n -= (da-i)*gr\n    print(*f)\n\n\nt = ni()\nfor _ in range(t):\n    solve()\n", "import sys\nfrom collections import defaultdict\nfrom copy import copy\n\nR = lambda t = int: t(input())\nRL = lambda t = int: [t(x) for x in input().split()]\nRLL = lambda n, t = int: [RL(t) for _ in range(n)]\n\ndef solve():\n  n = R()\n  b = 1\n  m = 1\n  d = 0\n  S = []\n  while b < n:\n    if b + 2 * m >= n:\n      S += [n - b - m]\n      m += n - b - m\n      b += m\n    else:\n      if b + 4 * m > n:\n        x = (n-b)//2 - m\n        S += [x]\n        m += x\n      else:\n        S += [m]\n        m *= 2\n      b += m\n    d += 1\n#  print(S,b)\n  print(d)\n  for c in S:\n    print(c, end = \" \")\n  print()\n  \nT = R()\nfor _ in range(T):\n  solve()\n", "t = int(input())\n\nfor _ in range(t):\n    w = int(input())\n    res = []\n    for i in range(300):\n        if 2 ** (i + 1) - 1 > w:\n            break\n        res.append((2 ** i, 2 ** (i + 1) - 1))\n\n    last_n, last_w = res[-1]\n    if last_w != w:\n        if last_w + last_n <= w:\n            res.append((w - last_w, w))\n        else:\n            res = res[:-1]\n            last_n, last_w = res[-1]\n\n            necc = w - last_w - 2 * last_n\n            ok = False\n            n = last_n\n            for x in range(min(necc // 2 + 1, n // 3 + 5), -1, -1):\n                y = necc - 2 * x\n                if 0 <= x and x <= n and 0 <= y and y <= n + x:\n                    ok = True\n                    res.append((last_n + x, last_w + last_n + x))\n                    res.append((last_n + x + y, last_w + 2 * last_n + 2 * x + y))\n                    break\n\n            if not ok:\n                exit(228)\n\n    print(len(res) - 1)\n    for i in range(len(res) - 1):\n        print(res[i + 1][0] - res[i][0], end=' ')\n    print()", "n = int(input())\nfor i in range(int(n)):\n    a = int(input())\n    \n    for j in range(35):\n        if a <= 2**j - 1:\n            print(j-1)\n            break\n    l = [2**x for x in range(j)]\n    #print(l)\n    \n    total = sum(l)\n    c = 1\n    while total != a:\n        try:\n            l[-c] -= min(l[-c-1], total - a)\n            total = sum(l)\n            c += 1\n            #print(c)\n        except:\n            pass\n    ans = []\n    for j in range(len(l) - 1):\n        ans.append(l[j+1] - l[j])\n    ans = [str(x) for x in ans]\n    print(' '.join(ans))", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    bacteria = 1\n    tw = 1\n    res = []\n    while tw < n:\n        rem = n - tw\n        if bacteria > rem:\n            print(1/0)\n            break\n        if rem - bacteria <= bacteria:\n            new = rem - bacteria\n        else:\n            new = max(0, min(bacteria, rem - 3*bacteria))\n        res.append(new)\n        bacteria += new\n        tw += bacteria\n    print(len(res))\n    print(*res)\n", "import sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\n\nPLUS=[1<<i for i in range(1,31)]\nSUM=list(accumulate(PLUS))\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())-1\n    \n    for i in range(30):\n        if SUM[i]>=n:\n            ANS=i+1\n            break\n    print(ANS)\n    ALIST=[0]*ANS\n    NOW=1\n    n-=ANS\n    \n    for i in range(ANS):\n        ALIST[i]=min(n//(ANS-i),NOW)\n        n-=ALIST[i]*(ANS-i)\n        NOW+=ALIST[i]\n        #print(n,ALIST,NOW)\n    print(*ALIST)\n\n", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 8:\n        print(3)\n        print(1, 0, 1)\n    elif n == 4:\n        print(2)\n        print(0, 1)\n    else:\n        b = n.bit_length()\n        ans = [1 << i for i in range(b)]\n        t = 0\n        c = 0\n        n = 2 ** b - 1 - n\n        for i in range(1, b):\n            if (n >> (b - i)) & 1:\n                t += 1\n                c += 1\n            ans[i] -= t\n            t *= 2\n        ans[-1] -= (c + (n & 1))\n        res = [0] * (b - 1)\n        for i in range(b - 1):\n            res[i] = ans[i + 1] - ans[i]\n        print(b - 1)\n        print(' '.join(map(str, res)))\n", "t = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\tb, m = 1, 1\n\tres = []\n\twhile True:\n\t\tif 2*b+m >= n:\n\t\t\tres.append(n - (m+b))\n\t\t\tbreak\n\t\tadd = min(b, (n - (2*b+m)) // 2)\n\t\tres.append(add)\n\t\tb += add\n\t\tm += b\n\td = len(res)\n\tprint(d)\n\tprint(\" \".join(str(a) for a in res))", "from collections import deque\n\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return map(int, input().split(' '))\n\n\nt = read_int()\nfor case_num in range(t):\n    n = read_int()\n    day = 0\n    num = 1\n    weight = 1\n    history = []\n    while weight < n:\n        day += 1\n        delta = n - weight\n        if num <= delta <= 2 * num:\n            history.append(delta - num)\n            weight = n\n        elif delta > 2 * num:\n            history.append(num)\n            num *= 2\n            weight += num\n        else:\n            history.pop()\n            k = min(delta // 2, num // 2)\n            p = delta - 2 * k\n            history.append(k)\n            history.append(p)\n            weight = n  \n        if weight == n:\n            break\n    print(day)\n    print(' '.join(map(str, history)))", "import sys, random\nfrom bisect import bisect_left, bisect_right\ninput = sys.stdin.readline\n\ndef main():\n    inf = 10 ** 20\n\n    t = int(input())\n#    t, a, b = map(int, input().split())\n#    t = 1\n    \n    for _ in range(1, t+1):\n    #    print(\"Case #{}: \".format(_), end = '')\n        n = int(input())\n        \n        total = 1\n        plus = 1\n        ans = []\n        while(total != n):\n            if(total + plus * 2 >= n):\n                ans.append(n - total - plus)\n                break\n            else:\n                next, l, r = -1, plus, plus << 1\n                while(l <= r):\n                    mid = (l + r) >> 1\n                    if(total + mid * 2 > n):\n                        r = mid - 1\n                    else:\n                        next = max(next, mid)\n                        l = mid + 1\n                ans.append(next - plus)\n                plus = next\n                total += plus\n        print(len(ans))\n        print(' '.join(map(str, ans)))\n        \nmain()", "T = int(input())\nfor case in range(T):\n\tn = int(input())\n\t#print(\"target\",n)\n\to = 0\n\tarr =  []\n\twhile 2 ** o - 1 < n:\n\t\tarr.append(2 ** o)\n\t\to += 1\n\tdiff = 2 ** o -1 - n\n\t#print(arr)\n\t#print(\"min\",o,\"diff\",diff)\n\tb = str(bin(diff))[2:][::-1]\n\t#print(b)\n\to2 = 0\n\tarr2 =  []\n\twhile o2 < len(b):\n\t\tif b[o2] == \"0\":\n\t\t\tpass\n\t\t\t#arr2.append(0) \n\t\telse:\n\t\t\tarr2.append(2 ** o2)\n\t\to2 += 1\n\t#print(arr,arr2)\n\tdelta = len(arr) - len(arr2)\n\tfor i in range(delta,len(arr2)+delta):\n\t\tarr[i] -= arr2[i-delta]\n\t#print(arr)\n\tret = []\n\tfor i in range(len(arr)-1):\n\t\tret.append(str(arr[i+1]-arr[i]))\n\tdays = len(ret)\n\tret = \" \".join(ret)\n\tprint(days)\n\tprint(ret)\n\n\t\t\n\t\n\n\n\n\t\t\n\n", "import math\n\ndef __starting_point():\n    t = int(input())\n    for numtests in range(t):\n        n = int(input())\n        d = math.floor(math.log(n, 2))\n        if n == 2:\n            print(\"1\")\n            print(\"0\")\n        elif n == 3:\n            print(\"1\")\n            print(\"1\")\n        else:\n            print(str(d))\n            for i in range(d-2):\n                print(str(int(2**(i))), end = \" \")\n            if n < int(3*(2**(d-1))):\n                print(str(math.floor((n+1-2**d)/2)), end = \" \")\n                print(str((n+1)%2))\n            else:\n                print(str(int(2**(d-2))), end = \" \")\n                print(str(int(n+1-3*(2**(d-1)))))\n__starting_point()", "import math\n\ndef process_test_case(i_test):\n    n = int(input())\n    n_days = math.floor(math.log2(n))\n\n    out_list = []\n    n_threshold = int(pow(2, n_days) + pow(2, n_days - 1) - 1)\n    if n >= n_threshold:\n        for i in range(n_days - 1):\n            out_list.append(str(int(pow(2, i))))\n        out_list.append(str(int(n - n_threshold)))\n    else:\n        for i in range(n_days - 2):\n            out_list.append(str(int(pow(2, i))))\n        n_reminder = n - pow(2, n_days) + 1\n        a = n_reminder // 2\n        b = n_reminder - 2 * a\n        out_list.append(str(a))\n        out_list.append(str(b))\n\n    print(int(n_days))\n    print(' '.join(out_list))\n\n\nn_tests = int(input())\nfor i_test in range(1, n_tests + 1):\n    process_test_case(i_test)\n", "t=int(input())\nfor i in range(t):\n    n=int(input())\n    dig=0\n    while 2**dig-1<n:\n        dig+=1\n    print(dig-1)\n    D=dig-1\n    num=1\n    n-=1\n    n-=D\n    l=[0]*D\n    for j in range(D):\n        l[j]=min(num,n//(D-j))\n        num+=l[j]\n        n-=l[j]*(D-j)\n    print(*l)"]