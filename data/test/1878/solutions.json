["n = int(input())\nr = 0\nfor i in range(n):\n    a = list(map(int, input().split(' ')))\n    r += (a[2] - a[0] + 1) * (a[3] - a[1] + 1)\nprint(r)", "n = int(input())\ns = 0\nfor i in range(n):\n    a, b, c, d = list(map(int, input().split()))\n    s += (c - a + 1) * (d - b + 1)\nprint(s)\n", "x = []\ntt = int(input())\nfor i in range(tt):\n    a, b, c, d = list(map(int, input().split(' ')))\n    x.append([a,b,c,d])\n\nct = 0\nfor a in range(1, 101):\n    for b in range(1, 101):\n        for i in x:\n            a1, a2, a3, a4 = i[0], i[1], i[2], i[3]\n            if a1 <= a <= a3 and a2 <= b <= a4:\n                ct+=1\nprint(ct)\n", "n = int(input())\n\nsum = 0\nfor i in range(n):\n    x1, y1, x2, y2  = [int(c) for c in input().split()]\n    sum += (x2 - x1 + 1)*(y2-y1 + 1)\nprint(sum)\n\n\n", "def __starting_point():\n    n = int(input())\n    total = 0\n    for i in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        w = abs(x1 - x2) + 1\n        h = abs(y1 - y2) + 1\n        total += w * h\n\n    print(total)\n__starting_point()", "n=int(input())\nv=0\nfor i in range(n):\n\ta,b,x,y=map(int,input().split())\n\tv+=(x-a+1)*(y-b+1)\nprint(v)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\ndef ELIST(n): return [[] for i in range(n)]\ndef MI(n=None,m=None): # input matrix of integers\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = VI()\n    return arr\ndef MS(n=None,m=None): # input matrix of strings\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = input()\n    return arr\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\n    if n is None: n,m = VI()\n    a = MI(n,m)\n    arr = LIST(m,n)\n    for i,l in enumerate(a):\n        for j,x in enumerate(l):\n            arr[j][i] = x\n    return arr\n\n\ndef run(n,x,l,r):\n    s = 0\n    curr = 1\n    for i in range(n):\n        skip = (l[i]-curr) // x\n        s += r[i]-curr-skip*x+1\n        curr = r[i]+1\n    print(s)\n\n\ndef main(info=0):\n    n = I()\n    ans = 0\n    for i in range(n):\n        x = VI()\n        ans += (x[2]-x[0]+1) * (x[3]-x[1]+1)\n\n    print(ans)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nans = 0\nfor i in range(n):\n\tx1, y1, x2, y2 = map(int, input().split())\n\tans += (abs(x2 - x1) + 1) * (abs(y2 - y1) + 1)\nprint(ans)", "n=int(input())\ns=0\nfor _ in range(n):\n    a,b,c,d=list(map(int,input().split()))\n    s += (c-a+1)*(d-b+1)\nprint(s)\n", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2015 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\ns = 0\nfor i in range(int(input())):\n    l = list(map(int, input().split()))\n    sq = (l[2]-l[0]+1)*(l[3]-l[1]+1)\n    s += sq\nprint(s)\n", "s = 0\nfor i in range(int(input())):\n    x1, y1, x2, y2= list(map(int, input().split()))\n    s += (x2 - x1 + 1) * (y2 - y1 + 1)\nprint(s)\n", "n=int(input())\n\nm=0\n\nfor i in range(n):\n\n\ta,b,c,d=map(int,input().split())\n\tm+=(c-a+1)*(d-b+1)\nprint(m)", "n = int(input())\nans = 0\nfor i in range(n):\n    a, b, c, d = map(int, input().split())\n    ans += (abs(c - a) + 1)  * (abs(d - b) + 1)\nprint(ans)", "from heapq import heapify, heappush, heappop\nfrom collections import Counter, defaultdict, deque, OrderedDict\nfrom sys import setrecursionlimit, maxsize\nfrom bisect import bisect_left, bisect, insort_left, insort\nfrom math import ceil, log, factorial, hypot, pi\nfrom fractions import gcd\nfrom copy import deepcopy\nfrom functools import reduce\nfrom operator import mul\nfrom itertools import product, permutations, combinations, accumulate, cycle\nfrom string import ascii_uppercase, ascii_lowercase, ascii_letters, digits, hexdigits, octdigits\n\nprod = lambda l: reduce(mul, l)\nprodmod = lambda l, mod: reduce(lambda x, y: mul(x,y)%mod, l)\n\ndef read_list(t): return [t(x) for x in input().split()]\ndef read_line(t): return t(input())\ndef read_lines(t, N): return [t(input()) for _ in range(N)]\n\nN = read_line(int)\nans = 0\nfor i in range(N):\n    x1, y1, x2, y2 = read_list(int)\n    ans += (x2-x1+1) * (y2-y1+1)\nprint(ans)\n", "n = int(input())\ntotal = 0\nfor i in range(n):\n    x1, y1, x2, y2 = map(int, input().split())\n    total += (x2 - x1 + 1) * (y2 - y1 + 1)\nprint(total)", "n = int(input())\nans = 0\nfor i in range(n):\n    a, b, c, d = map(int, input().split())\n    ans += (c - a + 1) * (d - b + 1)\nprint(ans)", "n = int(input())\na = []\nfor i in range(100):\n    a.append([])\n    for j in range(100):\n        a[i].append(0)\nfor i in range(n):\n    x1, y1, x2, y2 = [int(x) for x in input().split()]\n    for t in range(x1-1, x2):\n        for k in range(y1-1, y2):\n            a[t][k] += 1\nnum = 0\nfor i in range(100):\n    num += sum(a[i])\nprint(num)", "a = int(input())\nsumm = 0\nfor i in range(a):\n    p = [int(x) for x in input().split()]\n    summ += (p[2] - p[0] + 1) * (p[3] - p[1] + 1)\nprint(summ)", "s = [[0] * 100 for k in range(100)]\nk = 0\nn = int(input())\ns1 = [list(map(int, input().split())) for j in range(n)]\nfor i in range(len(s1)):\n    for i1 in range(s1[i][0], s1[i][2] + 1):\n        for i2 in range(s1[i][1], s1[i][3] + 1):\n            k += 1\nprint(k)", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\ncount = 0\nfor i in range(n):\n    x1,y1,x2,y2 = list(map(int,input().split()))\n    count += (x2 - x1 + 1) * (y2 - y1 + 1)\nprint(count)\n", "n = int(input())\nSum = 0\nfor i in range(n):\n\tx1, y1, x2, y2 = map(int, input().split())\n\tS = (x2 - x1 + 1) * (y2 - y1 + 1)\n\tSum += S\nprint(Sum)", "n = int(input())\na = []\nfor i in range(100):\n    a.append([0 for j in range(100)])\nfor ii in range(n):\n    y1, x1, y2, x2 = list(map(int,input().split()))\n    for i in range(y1-1,y2):\n        for j in range(x1-1,x2): a[i][j] += 1\nans = 0\nfor ii in a: ans += sum(ii)\nprint(ans)\n", "n = int(input())\ncol = 0\nfor i in range(n):\n    x1, y1, x2, y2 = list(map(int, input().split()))\n    col += (x2 - x1 + 1) * (y2 - y1 + 1)\nprint(col)\n", "n = int(input())\nans = 0\nfor i in range(n):\n    (x1, y1, x2, y2) = list(map(int, input().split()))\n    ans += (x2 - x1 + 1) * (y2 - y1 + 1)\nprint(ans)\n", "def __starting_point():\n    rects = int(input())\n    s = 0\n    for _ in range(rects):\n        x1, y1, x2, y2 = list(map(int, input().split()))\n        s += (x2-x1+1) * (y2-y1+1)\n    print(s)\n\n__starting_point()"]