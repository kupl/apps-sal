["def solve():\n    n = int(input())\n    if n % 3 == 0:\n        print(n//3,0,0)\n        return 0\n    if n % 3 == 1:\n        if n < 7:\n            print(-1)\n        else:\n            print((n-7)//3, 0, 1)\n        return 0\n    if n < 5:\n        print(-1)\n        return 0\n    print((n-5)//3, 1, 0)\nfor i in range(int(input())):\n    solve()", "# map(int, input().split())\nrw = int(input())\nfor wewq in range(rw):\n    n = int(input())\n    a = 0\n    b = 0\n    c = 0\n    if n % 3 == 0:\n        print(n // 3, 0, 0)\n    elif n % 3 == 1:\n        if n // 3 - 2 < 0:\n            print(-1)\n            continue\n        print(n // 3 - 2, 0, 1)\n    elif n % 3 == 2:\n        if n // 3 - 1 < 0:\n            print(-1)\n            continue\n        print(n // 3 - 1, 1, 0)\n\n", "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1 or n == 2 or n == 4:\n        print(-1)\n    else:\n        if n% 3 == 2:\n            print(n//3-1,1,0)\n        elif n % 3==1:\n            print(n//3-2,0,1)\n        else:\n            print(n//3,0,0)     ", "t=int(input())\nfor you in range(t):\n    n=int(input())\n    if(n==1 or n==2 or n==4):\n        print(-1)\n        continue\n    if(n==3):\n        print(1,0,0)\n        continue\n    z=n%3\n    if(z==0):\n        print(n//3,0,0)\n    if(z==1):\n        print((n-7)//3,0,1)\n    if(z==2):\n        print((n-5)//3,1,0)\n", "for _ in range (int(input())):\n    n=int(input())\n    three=n//3\n    five=0\n    seven=0\n    excess=n%3\n    if excess==2:\n        three-=1\n        five=1\n    elif excess==1:\n        three-=2\n        seven+=1\n    if three<0:\n        print(-1)\n    else:\n        print(three,five,seven)", "import sys, math\nimport io, os\n#data = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\nfrom bisect import bisect_left as bl, bisect_right as br, insort\nfrom heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write('\\n'.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\n#from decimal import Decimal\n#from fractions import Fraction\n#sys.setrecursionlimit(100000)\nINF = float('inf')\nmod=10**9+7\n\n\nfor t in range(int(data())):\n    n=int(data())\n    k=n//3\n    if n%3==2:\n        if k<1:\n            print(-1)\n            continue\n        print(k-1,1,0)\n    elif n%3==1:\n        if k<2:\n            print(-1)\n            continue\n        print(k-2,0,1)\n    else:\n        print(k,0,0)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    #a = list(map(int, input().split()))\n    if 1<=n<=2 or n==4:\n        print(-1)\n    elif n%3==0:\n        print(n//3, 0, 0)\n    elif n%3==1:\n        print((n-7)//3, 0, 1)\n    else:\n        print((n-5)//3, 1, 0)", "import math\n\n\nt = int(input())\n\nfor q in range(t):\n    n = int(input())\n    if n % 3 == 0:\n        print(n // 3, 0, 0)\n    elif n % 3 == 1 and n > 4:\n        print((n - 7) // 3, 0, 1)\n    elif n % 3 == 2 and n > 2:\n        print((n - 5) // 3, 1, 0)\n    else:\n        print(-1)\n    \n    \n        \n        \n", "import sys\nimport math\nfrom collections import defaultdict,deque\n\ninput = sys.stdin.readline\ndef inar():\n    return [int(el) for el in input().split()]\ndef main():\n    t=int(input())\n    for _ in range(t):\n        n=int(input())\n        take=n//3\n        if n%3==0:\n            print(n//3,0,0)\n        elif n%3==1:\n            if (take-2)>=0:\n                print(take-2,0,1)\n            else:\n                print(-1)\n        else:\n            if (take-1)>=0:\n                print(take-1,1,0)\n            else:\n                print(-1)\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()"]