["n, m = list(map(int, input().split()))\n\nfield = []\nfor i in range(n):\n    field.append(input())\n\nans = 0\nfor i in range(n - 1):\n    for j in range(m - 1):\n        t = set()\n        t.add(field[i][j])\n        t.add(field[i + 1][j + 1])\n        t.add(field[i + 1][j])\n        t.add(field[i][j + 1])\n\n        if t == set('face'):\n            ans += 1\nprint(ans)\n", "\"\"\"\nCodeforces Looksery Cup 2015 Problem A\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n    n,m = read()\n    s = []\n    for i in range(n): s.append(read(0))\n\n    ans = 0\n    for i in range(n-1):\n        for j in range(m-1):\n            if {s[i][j], s[i][j+1], s[i+1][j], s[i+1][j+1]} == set(\"face\"):\n                ans += 1\n    return ans\n\n\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "n, m = list(map(int, input().split()))\nans = 0\nA = [input() for i in range(n)]\nfor i in range(n - 1):\n    for j in range(m - 1):\n        if sorted(A[i][j] + A[i][j + 1] + A[i + 1][j] + A[i + 1][j + 1]) == sorted(\"face\"):\n            ans += 1\nprint(ans)\n\n", "n, m = (int(x) for x in input().split())\na = []\nfor i in range(n):\n\ta.append(input())\nok = set('face')\nans = 0\nfor i in range(n - 1):\n\tfor j in range(m - 1):\n\t\ttest = set([a[i][j], a[i + 1][j], a[i][j + 1], a[i + 1][j + 1]])\n\t\tif test == ok:\n\t\t\tans += 1\nprint(ans)\n", "n, m = map(int, input().split())\na = [input().replace('', ' ').split() for i in range(n)]\nres = 0\nfor i in range(n - 1):\n    for j in range(m - 1):\n        s = a[i][j] + a[i][j + 1] + a[i + 1][j] + a[i + 1][j + 1]\n        if sorted(s) ==  ['a', 'c', 'e', 'f']: res += 1\nprint(res)", "n, m = list(map(int, input().split()))\na = [input().strip() for x in range(n)]\nprint(sum(set([a[i][j], a[i + 1][j], a[i][j + 1], a[i + 1][j + 1]]) == set('face') for i in range(n - 1) for j in range(m - 1)))\n", "import sys\n\ndef main():\n    # fin = open(\"input.txt\", \"r\")\n    fin = sys.stdin\n    \n    n, m = map(int, fin.readline().split())\n    A = []\n    for i in range(n):\n        A.append(fin.readline().rstrip())\n\n    cnt = 0\n    for i in range(n - 1):\n        for j in range(m - 1):\n            S = {A[i][j], A[i][j + 1], A[i + 1][j], A[i + 1][j + 1]}\n            if (\"f\" in S) and (\"a\" in S) and (\"c\" in S) and (\"e\" in S):\n                cnt += 1\n\n    print(cnt)\n\n    fin.close()\n\nmain()", "n, m = [int(i) for i in input().split()]\nd = [input() for i in range(n)]\n\nresult = 0\nfor i in range(n - 1):\n    for j in range(m - 1):\n        if sorted(d[i][j] + d[i + 1][j] + d[i][j + 1] + d[i + 1][j + 1]) == sorted(list(\"face\")):\n            result += 1\n\nprint(result)\n", "#!/usr/bin/env python3.4\n\nn, m = list(map(int, input().split()))\nboard = []\nfor i in range(n):\n    board.append(input())\nok_set = set(['f', 'a', 'c', 'e'])\nans = 0\nfor i in range(n - 1):\n    for j in range(m - 1):\n        cur_set = set([board[i][j], board[i][j + 1], board[i + 1][j], board[i + 1][j + 1]])\n        if cur_set == ok_set:\n            ans += 1\nprint(ans)\n", "import sys\n\n\n\ninput       = []\ninput_index = 0\n\ndef next(type, number = None):\n\tdef next():\n\t\tnonlocal input, input_index\n\t\t\n\t\t\n\t\twhile input_index == len(input):\n\t\t\tif sys.stdin:\n\t\t\t\tinput       = sys.stdin.readline().split()\n\t\t\t\tinput_index = 0\n\t\t\telse:\n\t\t\t\traise Exception()\n\t\t\t\t\n\t\t\t\t\n\t\tinput_index += 1\n\t\t\n\t\treturn input[input_index - 1]\n\t\t\n\t\t\n\tif number is None:\n\t\tresult = type(next())\n\telse:\n\t\tresult = [type(next()) for _ in range(number)]\n\t\t\n\treturn result\n\t\n\t\n\t\nn, m = next(int, 2)\niis = [next(str) for _ in range(n)]\n\n\ncount = 0\n\nfor i in range(n - 1):\n\tfor j in range(m - 1):\n\t\ts = {iis[i][j], iis[i+1][j], iis[i][j+1], iis[i+1][j+1]}\n\t\t\n\t\tif \"f\" in s and \"a\" in s and \"c\" in s and \"e\" in s:\n\t\t\tcount += 1\n\t\t\t\n\t\t\t\nprint(count)\n", "n, m = [int(i) for i in input().split()]\ns = []\no = 0\nfor t in range(n):\n    s.append(input())\nfor i in range(n-1):\n    for j in range(m-1):\n        a = s[i][j]+s[i][j+1]+s[i+1][j]+s[i+1][j+1]\n        if \"f\" in a and \"c\" in a and \"e\" in a and \"a\" in a:\n            o+=1\nprint(o)\n", "n,m = [int(c) for c in input().split()]\n\nlines = []\nfor i in range(n):\n    lines.append(input())\n\nf = 0\nfor i in range(n-1):\n    for j in range(m-1):\n        s = set()\n        s.add(lines[i][j])\n        s.add(lines[i+1][j])\n        s.add(lines[i][j+1])\n        s.add(lines[i+1][j+1])\n        if 'f' in s and 'a' in s and 'c' in s and 'e' in s:\n            f +=1\n\nprint(f)\n", "n, m = list(map(int, input().split()))\nboard = [input() for i in range(n)]\nans = 0\nfor i in range(n-1):\n    for j in range(m-1):\n        s = [board[i][j], board[i+1][j], board[i][j+1], board[i+1][j+1]]\n        if 'f' in s and 'a' in s and 'c' in s and 'e' in s:\n            ans += 1\nprint(ans)\n", "n, m = map(int, input().split())\nt = []\ncnt = 0\nfor i in range(n):\n    t.append(input())\nfor i in range(n - 1):\n    for j in range(m - 1):\n        s = ''\n        s += t[i][j]\n        s += t[i + 1][j]\n        s += t[i][j + 1]\n        s += t[i + 1][j + 1]\n        s = ''.join(sorted(list(s)))\n        if s == 'acef':\n            cnt += 1\nprint(cnt)", "n, m = [int(x) for x in input().split()]\na = []\nfor i in range(n):\n    a.append(input())\n#print(a)\nres = 0\nz = [\"face\", \"faec\", \"feac\", \"feca\", \"fcae\", \"fcea\", \"eafc\", \"eacf\", \"ecaf\", \"ecfa\", \"efac\", \"efca\", \"acfe\", \"acef\", \"aecf\", \"aefc\", \"afce\", \"afec\", \"cafe\", \"caef\", \"ceaf\", \"cefa\", \"cfea\", \"cfae\"]\nfor i in range(1, n):\n    for j in range(1, m):\n        if a[i][j]+a[i][j-1]+a[i-1][j]+a[i-1][j-1] in z:\n            res += 1\nprint(res)", "data = []\nface = set({'f', 'a', 'c', 'e'})\n\n\ndef check(data, i, j):\n    s = set()\n    s.add(data[i][j])\n    s.add(data[i + 1][j])\n    s.add(data[i + 1][j + 1])\n    s.add(data[i][j + 1])\n\n    if len(s & face) == 4:\n        return True\n\n    return False\n\n\ndef __starting_point():\n    n, m = map(int, input().split())\n\n    for i in range(n):\n        data.append(input())\n\n    total = 0\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if check(data, i, j):\n                total += 1\n\n    print(total)\n__starting_point()", "__author__ = '\u0414\u0430\u043d\u0438\u043b\u0430'\nn, m  = map(int, input().split())\nmat = [['' for i in range(m)] for j in range(n)]\n\nfor i in range(n):\n    s = input().rstrip()\n    for j in range(len(s)):\n        mat[i][j] = s[j]\ncnt = 0\nfor i in range(n - 1):\n    for j in range(m - 1):\n        mn = set()\n        mn.add(mat[i][j])\n        mn.add(mat[i + 1][j])\n        mn.add(mat[i][j + 1])\n        mn.add(mat[i + 1][j + 1])\n        if 'f' in mn and 'a' in mn and 'c' in mn and 'e' in mn:\n            cnt += 1\n\nprint(cnt)", "a,b=input().split()\nn=int(a)\nm=int(b)\nt=[\"\" for j in range(n)]\nfor i in range(n):\n\tt[i]=input()\nv=0\n\ndef test(a,b,c,d):\n\tg=[0 for i in range(200)]\n\tg[ord(a)]+=1\n\tg[ord(b)]+=1\n\tg[ord(c)]+=1\n\tg[ord(d)]+=1\n\treturn (g[ord('f')]*g[ord('a')]*g[ord('c')]*g[ord('e')]==1)\n\nfor i in range(n-1):\n\tfor j in range(m-1):\n\t\tif test(t[i][j],t[i+1][j],t[i][j+1],t[i+1][j+1]):v+=1\nprint(v)", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nface = set('face')\nn,m = list(map(int,input().split()))\nfaces = []\nfor i in range(n):\n    faces.append(list(input()))\n\ncount = 0\nfor i in range(n):\n    for j in range(m):\n        dxdy = [(0,0),(0,1),(1,1),(1,0)]\n        f = []\n        for dx,dy in dxdy:\n            if 0 <= dy + i < n and 0 <= dx + j < m:\n                f.append(faces[i + dy][j + dx])\n        if face == set(f):\n            count += 1\nprint(count)\n", "R = lambda:list(map(int,input().split()))\nn,m = R()\nrs = 0\na = []\nfor i in range(n):\n    a.append(input())\n    \nfor i in range(n-1):\n    for j in range(m-1):\n        c = []\n        c.append(a[i][j])\n        c.append(a[i+1][j])\n        c.append(a[i][j+1])\n        c.append(a[i+1][j+1])\n        u = set(c)\n        if len(u) == 4:\n            if 'f' in u:\n                if 'a' in u:\n                    if 'c' in u:\n                        if 'e' in u:\n                            rs += 1     \nprint(rs)", "N,M=list(map(int,input().split()))\nSeq=[list(input())for I in range(N)]\nAns=0\nfor I in range(N-1):\n    for J in range(M-1):\n        Det=['f','a','c','e']\n        Used=[]\n        if Seq[I][J]in Det:\n            Used.append(Seq[I][J])\n            if Seq[I+1][J]in Det and not Seq[I+1][J]in Used:\n                Used.append(Seq[I+1][J])\n                if Seq[I][J+1]in Det and not Seq[I][J+1]in Used:\n                    Used.append(Seq[I][J+1])\n                    if Seq[I+1][J+1]in Det and not Seq[I+1][J+1]in Used:\n                        '''\n                        Seq[I][J]='#'\n                        Seq[I+1][J]='#'\n                        Seq[I+1][J+1]='#'\n                        Seq[I][J+1]='#'\n                        '''\n                        Ans+=1\nprint(Ans)\n", "n, m = list(map(int, input().split()))\ngrid = [list(input()) for i in range(n)]\ncnt = 0\nfor r in range(n-1):\n    for c in range(m-1):\n        face = ['f', 'a', 'c', 'e']\n        if grid[r][c] in face:\n            face.remove(grid[r][c])\n            if grid[r+1][c] in face:\n                face.remove(grid[r+1][c])\n                if grid[r][c+1] in face:\n                    face.remove(grid[r][c+1])\n                    if grid[r+1][c+1] in face:\n                        face.remove(grid[r+1][c+1])\n                        cnt += 1\nprint(cnt)\n", "n,m = map(int,input().split())\nlines = [input() for i in range(n)]\nans = 0\nfor i in range(n-1):\n    for j in range(m-1):\n        a = lines[i][j]+lines[i+1][j]+lines[i][j+1]+lines[i+1][j+1]\n        if 'f' in a and 'a' in a and 'c' in a and 'e' in a:\n            ans+=1\nprint(ans)", "n, m = list(map(int,input().split()))\nicon = [input() for i in range(n)]\nfaces = 0\nfor i in range(n-1):\n    for j in range(m-1):\n        temp = 0\n        temp2 = 0\n        temp3 = 0\n        temp4 = 0\n        if icon[i][j] == \"f\":\n            temp += 1\n        elif icon[i][j] == \"a\":\n            temp2 += 1\n        elif icon[i][j] == \"c\":\n            temp3 += 1\n        elif icon[i][j] == \"e\":\n            temp4 += 1\n        if icon[i+1][j] == \"f\":\n            temp += 1\n        elif icon[i+1][j] == \"a\":\n            temp2 += 1\n        elif icon[i+1][j] == \"c\":\n            temp3 += 1\n        elif icon[i+1][j] == \"e\":\n            temp4 += 1\n        if icon[i][j+1] == \"f\":\n            temp += 1\n        elif icon[i][j+1] == \"a\":\n            temp2 += 1\n        elif icon[i][j+1] == \"c\":\n            temp3 += 1\n        elif icon[i][j+1] == \"e\":\n            temp4 += 1\n        if icon[i+1][j+1] == \"f\":\n            temp += 1\n        elif icon[i+1][j+1] == \"a\":\n            temp2 += 1\n        elif icon[i+1][j+1] == \"c\":\n            temp3 += 1\n        elif icon[i+1][j+1] == \"e\":\n            temp4 += 1\n        if temp == 1 and temp2 == 1 and temp3 == 1 and temp4 == 1:\n            faces += 1\nprint(faces)\n", "def calc(img):\n    nr = len(img)\n    nc = len(img[0])\n    ret = 0\n    for i in range(nr-1):\n        for j in range(nc-1):\n            tset = set()\n            tset.add(img[i][j])\n            tset.add(img[i][j+1])\n            tset.add(img[i+1][j])\n            tset.add(img[i+1][j+1])\n            if 'f' in tset and 'a' in tset and 'c' in tset and 'e' in tset:\n                ret += 1\n    return ret  \n\ndef main():\n    items = input().split()\n    nr = int(items[0])\n    nc = int(items[1])\n    img = []\n    for _ in range(nr):\n        img.append(input())\n    print(calc(img))\n\n    \ndef __starting_point():\n    main()\n\n__starting_point()"]