["def check(x, s):\n    k = 0\n    for i in str(x):\n        k += int(i)\n    return x - k >= s\n\n\nn, s = map(int, input().split())\nl = 0\nr = n\nwhile r - l > 1:\n    m = (l + r) // 2\n    if check(m, s):\n        r = m\n    else:\n        l = m\nif check(r, s):\n    print(n - r + 1)\nelse:\n    print(0)", "inp=input().split()\nn=int(inp[0])\ns=int(inp[1])\nstart=s+1\nthresh=s+500\nans=0\nif(n>thresh):\n\tans+=n-thresh\nelse:\n\tthresh=n\nval=0\nfor i in range(start,thresh+1):\n\tval=i\n\twhile(i>0):\n\t\tval-=i%10\n\t\ti=i//10\n\tif(val>=s):\n\t\tans+=1\nprint(ans)", "def sum_dig(num):\n        num = str(num)\n        ans = 0\n        for i in range(len(num)):\n               ans += int(num[i])\n        return ans\n\nn,s = list(map(int,input().split()))\nans = 0\nfor i in range(s,n+1):\n        if i - sum_dig(i) >= s:\n                ans = n - i + 1\n                break\nprint(ans)\n", "from sys import stdin, stdout\n\nn, s = map(int, stdin.readline().split())\n\nl = 0\nr = n + 1\nwhile r - l > 1:\n    f = lambda x: sum(map(int, list(str(x))))\n    m = (r + l) // 2\n    \n    if m - f(m) >= s:\n        r = m\n    else:\n        l = m\n\nwhile r == f(r):\n    r += 1\n\n\nstdout.write(str(max(0, n - r + 1)))", "def f(n):\n    rtn = n\n    while 0 < n:\n        rtn -= n % 10\n        n //= 10\n    return rtn\n\nn, s = list(map(int, input().split()))\nl = 0\nr = 10**18 + 1\ncnt = 0\nwhile 1 < r - l:\n    m = (l + r) // 2\n    if s <= f(m):\n        r = m\n    else:\n        l = m\n\nprint(max(n - r + 1, 0))\n", "def f(x):\n\tans = x\n\twhile x > 0:\n\t\tans -= x % 10\n\t\tx //= 10\n\treturn ans\nn, s = list(map(int, input().split()))\nif f(n) < s:\n\tprint(0)\n\treturn\nl, r = 1, n\nwhile l < r:\n\tm = (l + r) // 2\n\tif f(m) >= s:\n\t\tr = (m // 10) * 10\n\telse:\n\t\tl = m + 1\nprint(n - l + 1)\n", "n, s = map(int, input().split())\n\nans = 0\np = s\nfor i in range(163):\n\tp = s + i\n\tif p > n:\n\t\tbreak\n\tif p >= s + sum(map(int, str(p))):\n\t\tans += 1\n\nif p <= n:\n\tans += n - p\n\nprint(ans)", "def f(x):\n\tans = x\n\twhile x > 0:\n\t\tans -= x % 10\n\t\tx //= 10\n\treturn ans\nn, s = list(map(int, input().split()))\nif f(n) < s:\n\tprint(0)\n\treturn\nl, r = 1, n\nwhile l < r:\n\tm = (l + r) // 2\n\tif f(m) >= s:\n\t\tr = (m // 10) * 10\n\telse:\n\t\tl = m + 1\nprint(n - l + 1) \n", "from math import ceil\nn, s = [int(i) for i in input().split()]\n\nl = 0\nr = 10000000000000000000\n\nwhile l < r:\n    cur = (l + r) // 2\n    sm = sum([int(i) for i in str(cur)])\n    if cur - sm >= s:\n        r = cur\n    else:\n        l = cur + 1\n\nprint(max(0, n - l + 1))\n", "n,s = map(int, input().split())\nmdist = 10**5\nc = s \nans = 0 \ndef mySum(c):\n  s = str(c)\n  ret = 0 \n  for x in s:\n    ret += ord(x) - ord('0')\n  return ret \nwhile mdist and c <= n:\n  if c - mySum(c) >= s:\n    ans += 1 \n    \n  mdist -= 1 \n  c += 1 \nc = min(c, n + 1)\nprint(ans + n - c + 1)", "n, s = map(int, input().split())\nl = 1\nr = n + 1\nwhile r > l + 1:\n    m = (l + r) // 2\n    #print(m)\n    line = str(m)\n    if m - sum(int(k) for k in line) >= s:\n        r = m\n    else:\n        l = m\nline = str(l)\nif l - sum(int(k) for k in line) >= s:\n    r = l\nprint(max(n - r + 1, 0))", "I = lambda : list(map(int, input().split()))\nn, s = I()\ncnt = n-min(200+s, n+1)+1\nfor i in range(s, min(200 + s, n+1)):\n    if i - sum(map(int, str(i))) >= s:\n        cnt += 1\nprint(cnt)\n", "class ReallyBigNumbers:\n\n\tdef __init__(self, n, s):\n\t\tself.n = n\n\t\tself.s = s\n\t\tself.binarySearch()\n\n\tdef binarySearch(self):\n\t\tl = self.s\n\t\th = 10000000000000000000\n\t\twhile(l < h):\n\t\t\tmid = (h + l) // 2\n\t\t\t#print(mid, self.isReallyBig(mid))\n\t\t\tif self.isReallyBig(mid):\n\t\t\t\th = mid\n\t\t\telse:\n\t\t\t\tl = mid + 1\n\t\tself.x = int(l)\n\n\tdef isReallyBig(self, v):\n\t\tcp = v\n\t\tadd = 0\n\t\twhile v > 0:\n\t\t\tadd += v % 10\n\t\t\tv //= 10\n\t\t#print('resta', cp-add, cp, add)\n\t\treturn (cp - add) >= self.s\n\n\tdef show(self):\n\t\tif self.x <= self.n:\n\t\t\tprint(str(self.n - self.x + 1))\n\t\telse:\n\t\t\tprint(0)\n\n\nn, s = list(map(int, input().split()))\nrbg = ReallyBigNumbers(n, s)\n#print(rbg.x)\nrbg.show()\n\n", "# -*- coding: utf-8 -*-\nn, s = list(map(int, input().split(' ')))\ndef sumd(d):\n    sd = 0\n    while d!=0:\n        sd += d%10\n        d//=10\n    return sd\nst, ed = 1, n\nr = 0\nwhile True:\n    if st==ed:\n        r = st\n        break\n    x = (st+ed)//2\n    if x-sumd(x)<s:\n        st = x+1\n    else:\n        ed = x\nif r-sumd(r)>=s:\n    print(n-r+1)\nelse:\n    print(0)\n", "def f(x):\n  return (x if x < 10 else f(x // 10) + x % 10)\nn, s = map(int, input().split())\nx = s\nwhile x - f(x) < s:\n  x += 1\nprint(max(0, n - x + 1))", "n, s  = [int(i) for i in input().split()]\nprint(max(n - ([i for i in range(s, s + 9 * 18 + 1) if i - sum([int(j) for j in str(i)]) >= s] + [int('1' *  18)])[0] + 1, 0))\n", "n, s  = [int(i) for i in input().split()]\nprint(max(n - [i for i in range(s, s + 180) if i - sum([int(j) for j in str(i)]) >= s][0] + 1, 0))\n", "n,s = map(int,input().split())\n\ndef diff(m):\n    return m - sum([int(k) for k in list(str(m))])\n    \ndef digit_safe(k):\n    r = len(list(str(k)))\n    return toint([\"1\"]+[\"0\"]*(r-1))\na = list(str(n))\nb = list(str(s))\nd = int(a[0])\n\ndef toint(l):\n    return int(\"\".join(l))\nres = 0\nfor i in range(d):\n    z = toint([str(i)] + [\"0\" for _ in range(len(a)-1)])\n    z1 = toint([str(i+1)] + [\"0\" for _ in range(len(a)-1)])\n    count = diff(z)\n    while z < z1 and count < s:\n        z += digit_safe(s-count)\n        count = diff(z)\n    if z <= z1:\n        res += (z1-z)\nz = toint([str(d)] + [\"0\" for _ in range(len(a)-1)])\nz1 = n+1\ncount = diff(z)\nwhile z < z1 and count < s:\n    z += digit_safe(s-count)\n    count = diff(z)\nif z <= z1:\n    res += (z1-z)\nprint(res)", "def calc(n):\n\tval = n\n\tcnt = 0\n\twhile(val):\n\t\tcnt += val%10\n\t\tval//=10\n\treturn n-cnt\n\t\t\nn,s = list(map(int,input().split()))\nif n<=s:\n\tprint(0)\n\treturn\nval = s\nval //= 10\nif val==0:\n\tprint(n-9 if n>=9 else 0)\n\treturn\nval *= 10\nwhile calc(val)<s:\n\tval += 10\n\tif val>n:\n\t\tprint(0)\n\t\tbreak\nelse:\n\tprint(n-val+1)\n", "# def sum_digits(n):\n#     s = 0\n#     while n:\n#         s += n % 10\n#         n //= 10\n#     return s\n\n\n# n, s = map(int, input().split())\n\n# count = 0\n# summ = sum_digits(n)\n# # k = sum_digits(n - n%10 - 1)\n# # print(k)\n# for num in range(n, 9, -1):\n# \tif num % 10 == 9:\n# \t\tsumm = sum_digits(num)\n# \t# print(num, summ)\n# \tif num - summ  >= s:\n# \t\tcount += 1\n# \tsumm -= 1\n\t\n\n\n# print(count)\n\n\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n\ndef binsearch(l, r, elem):\n\tn = r\n\tmedium = (l + r ) // 2\n\ts = medium - sum_digits(medium)\n\ts1 = medium-1- sum_digits(medium-1)\n\ts2 = medium+1 - sum_digits(medium+1)\n\t# print(s,s2)\n\twhile not(s2 >= elem and s < elem): #s >= elem and s1 < elem or \n\t\t# print(l,medium,r)\n\t\tif s < elem:\n\t\t\tl = medium\n\t\telif s >= elem:\n\t\t\tr = medium\n\t\tk = medium\n\t\tmedium = (l + r ) // 2\n\t\tif k == medium:\n\t\t\tbreak\n\t\t# print(l,medium,r)\n\t\ts = medium - sum_digits(medium)\n\t\ts2 = medium+1 - sum_digits(medium+1)\n\t\t# print(s,s2)\n\n\ts1 = medium-1 - sum_digits(medium-1)\n\tif s >= elem and s1 < elem:\n\t\treturn medium\n\telif s2 >= elem and s < elem:\n\t\treturn medium + 1\n\telse:\n\t\treturn \tn+1\n\nn, s = list(map(int, input().split()))\n# a = [i for i in range(n+1)]\nif n == s:\n\tprint(0)\nelse:\n\n\ty = binsearch( 0, n, s)\n# print(y)\n\tprint(n - y + 1)\n\n\n\n\n", "# def sum_digits(n):\n#     s = 0\n#     while n:\n#         s += n % 10\n#         n //= 10\n#     return s\n\n\n# n, s = map(int, input().split())\n\n# count = 0\n# summ = sum_digits(n)\n# # k = sum_digits(n - n%10 - 1)\n# # print(k)\n# for num in range(n, 9, -1):\n# \tif num % 10 == 9:\n# \t\tsumm = sum_digits(num)\n# \t# print(num, summ)\n# \tif num - summ  >= s:\n# \t\tcount += 1\n# \tsumm -= 1\n\t\n\n\n# print(count)\n\n\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n\ndef binsearch(l, r, elem):\n\tn = r\n\tmedium = (l + r ) // 2\n\ts = medium - sum_digits(medium)\n\ts1 = medium-1- sum_digits(medium-1)\n\ts2 = medium+1 - sum_digits(medium+1)\n\t# print(s,s2)\n\twhile not(s2 >= elem and s < elem): #s >= elem and s1 < elem or \n\t\t# print(l,medium,r)\n\t\tif s < elem:\n\t\t\tl = medium\n\t\telif s >= elem:\n\t\t\tr = medium\n\t\tk = medium\n\t\tmedium = (l + r ) // 2\n\t\tif k == medium:\n\t\t\tbreak\n\t\t# print(l,medium,r)\n\t\ts = medium - sum_digits(medium)\n\t\ts2 = medium+1 - sum_digits(medium+1)\n\t\t# print(s,s2) \n\n\ts1 = medium-1 - sum_digits(medium-1)\n\tif s >= elem and s1 < elem:\n\t\treturn medium\n\telif s2 >= elem and s < elem:\n\t\treturn medium + 1\n\telse:\n\t\treturn \tn+1\n\nn, s = list(map(int, input().split()))\n# a = [i for i in range(n+1)]\nif n == s:\n\tprint(0)\nelse:\n\n\ty = binsearch( 0, n, s)\n# print(y)\n\tprint(n - y + 1)\n\n\n\n\n", "def read_ints():\n    return list(map(int, input().split()))\n\n\nn, s = read_ints()\n\n\ndef judge(x):\n    return x - sum(map(int, str(x))) >= s\n\n\nresult = len([x for x in range(s, min(n, s + 180) + 1) if judge(x)]) + max(0, n - s - 180)\n\nprint(result)\n", "raw=input().split()\nn=int(raw[0])\ns=int(raw[1])\n\ndef sum_digits(x):\n    z=0\n    while x:\n        z+=x%10\n        x//=10\n    return z\n\ni=s\ncount=0\nwhile i<=n:\n    q=i-sum_digits(i)\n    if q>=s:\n        count=n-i+1\n        break\n    else:\n        i+=1\nprint(count)\n\n#print(sum_digits(1))\n    \n    \n", "a = input()\na = a.split(' ')\na = list(map(int,a))\ndef really_big(n,s):\n    if s >= n:\n        return 0\n    i = s + 1\n    while i <= n:\n        t,b = i,0\n        while t > 0:\n            b = b + (t % 10)\n            t = t // 10\n        if i - b >= s:\n            return n - i + 1\n            break\n        else:\n            i += 1\n    return 0\nprint(really_big(a[0],a[1]))", "def cmp(x1 = [],x2 = []):\n    len1 = len(x1)\n    len2 = len(x2)\n    if len1 == len2:\n        for i in range(len1):\n            n1 = x1[len1 - 1 - i]\n            n2 = x2[len1 - 1 - i]\n            if n1 != n2:\n                return n1 > n2\n    else:\n        return len1 > len2\n    return True\n\ndef add(x1 = [],x2 = []):\n    if not cmp(x1,x2):\n        x1,x2 = x2,x1\n    len1 = len(x1)\n    len2 = len(x2)\n    for i in range(len1 - len2):\n        x2.append(0)\n    res = []\n    flag = 0\n    for n1,n2 in zip(x1,x2):\n        m = n1 + n2 + flag\n        flag = m // 10\n        res.append(m % 10)\n    if flag:\n        res.append(flag)\n    return res\n    \ndef minus(x1 = [],x2 = []):\n    if not cmp(x1,x2):\n        x1,x2 = x2,x1\n    len1 = len(x1)\n    len2 = len(x2)\n    for i in range(len1 - len2):\n        x2.append(0)\n    res = []\n    flag = 0\n    for n1,n2 in zip(x1,x2):\n        m = n1 - n2 + flag\n        flag = 0 if m >= 0 else -1\n        res.append((m + 10) % 10)\n    \n    while res and not res[-1]:\n        res.pop()\n    return res\n    \ndef div(x1 = [], x2 = 9):\n    if x2 == 10:\n        return x1[1:]\n    else:\n        x1.reverse()\n        res = []\n        mod = 0\n        for n in x1:\n            res.append((n + mod * 10)// 9)\n            mod = (n + mod * 10) % 9\n    res.reverse()\n    while res and not res[-1]:\n        res.pop()\n    return res   \n\ndef multi(x1 = [],x2 = 9):\n    x1_copy = x1.copy()\n    x1.insert(0,0)\n    if x2 == 10:\n        return x1\n    else:\n        return minus(x1,x1_copy)\n\ndef __starting_point():\n    input_str = input()\n    n,s = [a for a in input_str.split()]\n    nl = list([int(a) for a in list(n)])\n    sl = list([int(a) for a in list(s)])\n    nl.reverse()\n    sl.reverse()\n    \n    x = multi(div(add(sl.copy(),[8]),9),9)\n    y = multi(div(add(x.copy(),[9]),10),10)\n    sumy = list([int(a) for a in list(str(sum(y)))])\n    sumy.reverse()\n    while not cmp(minus(y,sumy),sl):\n        y = add(y,[0,1])\n        sumy = list([int(a) for a in list(str(sum(y)))])\n        sumy.reverse()\n\n    if cmp(nl,y):\n        ans = add(minus(nl,y),[1])\n    else:\n        ans = [0]\n    ans.reverse()\n    ansstr = [str(a) for a in ans]\n    print(\"\".join(ansstr))\n\n\n\n__starting_point()"]