["n, c = list(map(int, input().split()))\nres1 = [0] * 500001\nres = 0\nfor ai in map(int, input().split()):\n\tres1[ai] = max(res1[ai], res1[c])\n\tres1[ai] += 1\n\tres = max(res, res1[ai] - res1[c])\nprint(res + res1[c])\n", "from collections import defaultdict\n\ndef solve():\n    N, C = map(int, input().split())\n    \n    arr = [int(k) for k in input().split()]\n    \n    cnt = 0\n    best = 0\n    freq = defaultdict(int)\n    \n    for i in range(N):\n        freq[arr[i]] = max(freq[arr[i]], freq[C])\n        '''\n        if arr[i] == C:\n            cnt += 1\n            if freq:\n                cur = max(freq.values())\n                if cur > best:\n                    best = cur\n                \n                freq = defaultdict(int)\n            continue\n        '''\n        freq[arr[i]] += 1\n        cur = freq[arr[i]] - freq[C]\n        if cur > best:\n            best = cur\n                    \n    print (best + freq[C])\n\n    \nsolve()", "n, c = list(map(int, input().split()))\ncnt = [0] * 500005\nans = 0\nfor v in map(int, input().split()):\n    if v == c:\n        cnt[c] = cnt[c] + 1\n    else:\n        if cnt[v] < cnt[c]:\n            cnt[v] = cnt[c]\n        cnt[v] += 1\n    ans = max(ans, cnt[v] - cnt[c])\nprint(ans + cnt[c])\n", "n,c=list(map(int,input().split()))\na=list(map(int,input().split()))\n\n\n# \u00e7a ne co\u00fbte pas trop cher de transformer le probl\u00e8me.\n\nnc = 0\nlast = {}\npreconfs = []\npreconfc = []\nfor i in range(n) :\n\tif a[i] == c :\n\t\tnc += 1\n\t\tlast[c] = i\n\t\tpreconfs.append ( i )\n\telse :\n\t\tif not (a[i] in last) :\n\t\t\tpreconfs.append ( 1 )\n\t\telse :\n\t\t\tpreconfs.append ( preconfs[last[a[i]]] + 1 )\n\t\tlast[a[i]] = i\n\tpreconfc.append ( nc )\n\n# deuxi\u00e8me transfo\n\ncontent = {}\nfor i in range(n) :\n\tif a[i] in content :\n\t\tcontent[a[i]][0] += 1\n\t\tcontent[a[i]].append ( i )\n\telse :\n\t\tcontent[a[i]] = [1, i]\n\ndef val ( i, j ) :\n\tif a[i] == a[j] :\n\t\treturn nc + (preconfs[j]-preconfs[i]+1) - (preconfc[j]-preconfc[i]) + (a[i]==c and -1 or 0)\n\tprint( \"erreur\" )\n\ndef rec_sol ( i, j, tab ) :\n\tif (i==j) :\n\t\treturn (i,i,j,j)\n\n\tk = (i+j)//2\n\tr1 = rec_sol ( i, k, tab )\n\tr2 = rec_sol ( k+1, j, tab )\n\n\ti1 = max ( [r1[0], r2[0]], key = lambda x:val(tab[x], tab[j]) )\n\ti2, i3 = max ( [(r1[0],r2[3]), (r1[1],r1[2]), (r2[1],r2[2]), (r1[0],j)], key = lambda x : val(tab[x[0]],tab[x[1]]) )\n\ti4 = max ( [r1[3], r2[3]], key = lambda x:val(tab[i],tab[x]) )\n\treturn (i1,i2,i3,i4)\n\n\ndef get_sol ( k ) :\n\ts = rec_sol ( 1, content[k][0], content[k] )\n\treturn val ( content[k][s[1]], content[k][s[2]] )\n\nres = []\nfor i in content :\n\tif ( i != c ) :\n\t\tres.append ( get_sol ( i  ) )\nif res :\n\tprint ( max ( res ) )\nelse :\n\tprint ( n )", "n,tar=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\n\nfrom collections import defaultdict\nd=defaultdict(lambda:[])\ncount=0\nfor i in range(n):\n    d[a[i]].append(i)\n    if a[i]==tar:\n        count+=1\n\npresum=[1 if a[0]==tar else 0]\nfor e in a[1:]:\n    if e==tar:\n        presum.append(presum[-1]+1)\n    else:\n        presum.append(presum[-1])\n\nfinal = 0\nfor k,v in d.items():\n    if k==tar:\n        continue\n\n    t=1\n    tt=1\n    for i in range(1,len(v)):\n        ind=v[i]\n        preind=v[i-1]\n\n        t -= presum[ind] - presum[preind]\n        t=max(t,0)\n        t+=1\n        tt=max(tt,t)\n\n    final=max(final,tt)\n\nprint(final + count)", "t=list(map(int,input().split()))\nn=t[0]\nc=t[1]\na=list(map(int,input().split()))\nf=[]\nfor i in range(0,500001):\n\tf.append(0)\nl=[]\nfor i in range(0,500001):\n\tl.append([0])\nm=0\nfor i in range(n):\n\tl[a[i]].append(f[a[i]]-m)\n\tif a[i]==c:\n\t\tm+=1\n\tf[a[i]]+=1\n\tl[a[i]].append(f[a[i]]-m)\nma=0\nfor i in l:\n\tmi=0\n\tfor j in i:\n\t\tif(j<mi):\n\t\t\tmi=j\n\t\tif(ma<j-mi):\n\t\t\tma=j-mi\nprint(m+ma)", "n,val=map(int,input().split());\na=[0]+list(map(int,input().split()));\nsuma=[0 for i in range(n+1)];\nmx=0;\ntarget=0;\nfor i in range(1,n+1):\n\tsuma[i]=suma[i-1];\n\tmx=max(mx,a[i]);\n\tif (a[i]==val):\n\t\ttarget+=1;\n\t\tsuma[i]+=1;\n\nans=0;\npre=[0 for i in range(mx+1)];\ndp=[0];\nfor i in range(1,n+1):\n\tdp.append(max(1,1+dp[pre[a[i]]]-suma[i]+suma[pre[a[i]]]));\n\tif (a[i]!=val):\n\t\tans=max(ans,dp[i]);\n\tpre[a[i]]=i;\nprint(ans+target);", "n,c = list(map(int,input().split(\" \")))\nnums = list(map(int,input().split(\" \")))\n# c is the target number\n# number of c values seen\ncPast = 0\ncountC = 0\n\nfor value in nums:\n\tif value == c:\n\t\tcountC += 1\n\ndef sawC(groupsList):\n\tfor key,groups in list(groupsList.items()):\n\t\tif groups[-1] < 0:\n\t\t\tgroups[-1] -= 1\n\t\telse:\n\t\t\tgroups += [-1]\n\treturn groupsList\n\nsolution = countC\n#other numbers, highest count stored in hash table\ngroupsList = {}\nfor num in nums:\n\tif num == c:\n\t\tgroupsList = sawC(groupsList)\n\telif num in list(groupsList.keys()):\n\t\tif groupsList[num][-1] > 0:\n\t\t\tgroupsList[num][-1] += 1\n\t\telse:\n\t\t\tgroupsList[num] += [1]\n\telse:\n\t\tgroupsList[num] = [1]\n\nfor key,groups in list(groupsList.items()):\n\t# actually counting if good\n\t#print(\"groups: \",groups)\n\tmaxDiff = 1\n\tcurrDiff = 0\n\tnewDiff = 0\n\tfor group in groups:\n\t\tcurrDiff += group\n\t\tif group > currDiff:\n\t\t\tcurrDiff = group\n\t\tif currDiff > maxDiff:\n\t\t\tmaxDiff = currDiff\n\tif maxDiff + countC > solution:\n\t\tsolution = countC + maxDiff\nprint(solution)\n\t\n\t\t\t\t\t\t\n\t\t\t\n\n\n\n\n\n\n\n", "# coding=utf-8\n\nn, c = map(int, input().split())\n\nans = [0] * 500001\nres = 0\n\nfor i in map(int, input().split()):\n    ans[i] = max(ans[i], ans[c])\n    ans[i] += 1\n    res = max(res, ans[i] - ans[c])\n\nprint(res + ans[c])", "n,c=map(int,input().split())\na=list(map(int,input().split()))\ncs=0\nx=a.count(c)\nbest=[x]*5000001\ncurr=[x]*5000001\nrec=[0]*5000001\nfor i in range(n):\n    if a[i]==c:\n        cs+=1\n    else:\n        curr[a[i]]=max(x,curr[a[i]]+rec[a[i]]-cs)+1\n        best[a[i]]=max(best[a[i]],curr[a[i]])\n        rec[a[i]]=cs\nprint(max(best))", "n, c = list(map(int, input().split()))\na = [0]\na.extend([int(i) for i in input().split()])\ncntc = [0]\nseg = {}\nlast = {}\nfor i in range(1, n + 1):\n\tcntc.append(cntc[i - 1] + (1 if a[i] == c else 0))\ndef getcntc(left, right):\n\t# [left, right]\n\treturn cntc[right] - cntc[left - 1]\nfor i in range(1, n + 1):\n\t# print(-getcntc(last.setdefault(a[i], 0) + 1, i - 1))\n\tseg.setdefault(a[i], []).append(-getcntc(last.setdefault(a[i], 0) + 1, i - 1))\n\tlast[a[i]] = i\n\tseg[a[i]].append(1)\nfor key in seg:\n\t# print(key, last[key])\n\tseg[key].append(-getcntc(last[key] + 1, n))\ntotal = 0\nm = max(a)\nfor d in range(1, m + 1):\n\tpeak = 0\n\tans = 0\n\tif d in seg and d != c:\n\t\t# print(seg[d])\n\t\tfor s in seg[d]:\n\t\t\tans = max(0, ans + s)\n\t\t\tpeak = max(ans, peak)\n\t\tpeak += getcntc(1, n)\n\ttotal = max(total, peak)\ntotal = max(total, getcntc(1, n))\nprint(total)\n\n\n", "import sys\n\nline = sys.stdin.readline().strip().split()\nn = int(line[0])\nc = int(line[1])\na = list(map(int, sys.stdin.readline().strip().split()))\ncright = [0] * (n + 1) \nmaxfreq = [0] * (5 * 10 ** 5 + 1)\n\nfor i in range (0, n):\n    if a[n - 1 - i] == c:\n        cright[n - 1 - i] = cright[n - i] + 1\n    else:\n        cright[n - 1 - i] = cright[n - i]\n\nresult = cright[0]\ncleft = 0\n\nfor i in range (0, n):\n    if a[i] != c:\n        maxfreq[a[i]] = max([maxfreq[a[i]], cleft]) + 1\n    else:\n        cleft = cleft + 1\n    if maxfreq[a[i]] + cright[i + 1] > result:\n        result = maxfreq[a[i]] + cright[i + 1]\n\nprint(result)", "\n\ndef __starting_point():\n    length,target = [int(i) for i in input().strip().split()]\n    \n    array = [1000000000000]+[int(i) for i in input().strip().split()]\n    num_dict = dict()\n    up,down,pre,dp = [],[],dict(),[0 for i in range(length+1)]\n    index = 0\n    ans = 0\n    for i in range(length+1):\n        if array[i] == target:\n            index += 1\n            up.append(index)\n        else:\n            up.append(index)\n    index = 0\n    for i in range(length,-1,-1):\n        if array[i] == target:\n            index += 1\n            down.append(index)\n        else:\n            down.append(index)\n    down.reverse()\n    down.append(0)\n\n    for i in range(1,length+1):\n        if array[i] not in pre:\n            pre[array[i]] = 0\n        dp[i]=max(up[i-1]+1,dp[pre[array[i]]]+1)\n        pre[array[i]]=i\n        #print(i)\n        ans=max(ans,dp[i]+down[i+1])\n    print(ans)\n\n__starting_point()", "k=[*map(int,input().split())]\nlist1=[*map(int,input().split())]\nz= [0]*500001\no=0\n\nfor i in list1:\n    z[i]=max(z[i],z[k[1]])\n    z[i]+=1\n    o=max(o,z[i]-z[k[1]])\nprint(o+z[k[1]])", "k=[*map(int,input().split())]\nlist1=[*map(int,input().split())]\nz= [0]*500001\no=0\n\nfor i in list1:\n    z[i]=max(z[i],z[k[1]])\n    z[i]+=1\n    o=max(o,z[i]-z[k[1]])\nprint(o+z[k[1]])", "n, c = list(map(int, input().split()))\ncnt = [0] * 500005\nans = 0\nfor v in map(int, input().split()):\n    if v == c:\n        cnt[c] = cnt[c] + 1\n    else:\n        if cnt[v] < cnt[c]:\n            cnt[v] = cnt[c]\n        cnt[v] += 1\n    ans = max(ans, cnt[v] - cnt[c])\nprint(ans + cnt[c])\n", "def maxseg(a):\n    cur_max=0\n    global_max=0 \n    pre_=0\n    \n    for i, x in enumerate(a):\n        if x>0:\n            cur_max=max(x, cur_max+pre_+x)\n            global_max=max(global_max, cur_max)\n        else:\n            pre_=x  \n            \n    return global_max        \n\ndef push(d, u, i):\n    if u not in d:\n        d[u]=[]\n    d[u].append(i)\n    \ndef get_sum(a, l, r):    \n    if l==0:\n        return a[r]\n    return a[r]-a[l-1]\n\ndef get_array(a, pre_sum):\n    cur=0\n    arr=[]\n    \n    for i, x in enumerate(a):\n        s=0\n        if i>0:\n            s+=get_sum(pre_sum, a[i-1], a[i])\n            \n        if i==0 or s==0:\n            cur+=1\n        else:\n            arr.append(cur)\n            arr.append(-s)\n            cur=1\n    \n    arr.append(cur)\n    return arr        \n\nn, c = map(int, input().split()) \na    = list(map(int, input().split()))\n\nd={}\npre_sum=[0]*len(a)\npre=0\n\nfor i, x in enumerate(a):\n    if x==c:\n        pre+=1\n    else:    \n        push(d, x, i)\n    pre_sum[i]=pre\n        \nmax_=0        \nfor pos_arr in d.values():\n    arr=get_array(pos_arr, pre_sum)\n    max_=max(max_, maxseg(arr))\n    \nprint(max_+pre_sum[-1])    ", "line = input().split()\nn = int(line[0])\nc = int(line[1])\nline = [int(x) for x in input().split()]\n\nbase_ans = 0\nfor num in line:\n    if num == c:\n        base_ans += 1\n\nlut = {}\nbest_delta = 0\nfor num in line:\n    if num == c:\n        to_delete = []\n        for key in lut:\n            lut[key] -= 1\n            if lut[key] <= 0:\n                to_delete.append(key)\n        for key in to_delete:\n            del lut[key]\n    else:\n        if num in lut:\n            lut[num] += 1\n        else:\n            lut[num] = 1\n        \n        if lut[num] >= best_delta:\n            best_delta = lut[num]\n\nprint(base_ans + best_delta)\n"]