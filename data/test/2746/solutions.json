["class Solution:\n     def compareVersion(self, version1, version2):\n         \"\"\"\n         :type version1: str\n         :type version2: str\n         :rtype: int\n         \"\"\"\n         while version1 and version2:\n             result1 = version1.split('.', 1)\n             if len(result1) == 2:\n                 digit1, version1 = result1[0], result1[1]\n             else:\n                 digit1 = result1[0]\n                 version1 = \"\"\n             result2 = version2.split('.', 1)\n             if len(result2) == 2:\n                 digit2, version2 = result2[0], result2[1]\n             else:\n                 digit2 = result2[0]\n                 version2 = \"\"\n             if int(digit1) > int(digit2):\n                 return 1\n             elif int(digit1) < int(digit2):\n                 return -1\n \n         if version1 and sum(map(lambda x: int(x), version1.split('.'))) != 0:\n             return 1\n         if version2 and sum(map(lambda x: int(x), version2.split('.'))) != 0:\n             return -1\n         return 0", "class Solution:\n     def compareVersion(self, version1, version2):\n         v1, v2 = [int(i) for i in version1.split('.')], [int(i) for i in version2.split('.')]\n         if len(v1) > len(v2): v2 += [0] * (len(v1) - len(v2))\n         if len(v1) < len(v2): v1 += [0] * (len(v2) - len(v1))   \n         for i in range(len(v1)):\n             if v1[i] > v2[i]: return 1\n             if v1[i] < v2[i]: return -1\n         return 0\n", "class Solution:\n     def compareVersion(self, version1, version2):\n         \"\"\"\n         :type version1: str\n         :type version2: str\n         :rtype: int\n         \"\"\"\n         l1 = [int(x) for x in version1.split('.')]\n         l2 = [int(x) for x in version2.split('.')]\n         \n         max_len = max(len(l1), len(l2))\n         l1 += [0] * (max_len - len(l1))\n         l2 += [0] * (max_len - len(l2))\n         \n         for i in range(0, max_len):\n             if l1[i] > l2[i]:\n                 return 1\n             elif l1[i] < l2[i]:\n                 return -1\n         \n         return 0\n", "class Solution:\n     def compareVersion(self, version1, version2):\n         \"\"\"\n         :type version1: str\n         :type version2: str\n         :rtype: int\n         \"\"\"\n         v1 = version1.split(\".\")\n         v2 = version2.split(\".\")\n         for i in range(max(len(v1), len(v2))):\n             a = int(v1[i]) if len(v1) > i else 0\n             b = int(v2[i]) if len(v2) > i else 0\n             if a > b:\n                 return 1\n             elif a < b:\n                 return -1\n         return 0", "class Solution:\n     def compareVersion(self, version1, version2):\n         \"\"\"\n         :type version1: str\n         :type version2: str\n         :rtype: int\n         \"\"\"\n         \n         \n         if version1 == version2:\n             return 0\n         else:\n             version1_nums = version1.split('.')\n             version2_nums = version2.split('.')\n             len1, len2 = len(version1_nums), len(version2_nums)\n             end = max(len1, len2 )\n             version1_nums.extend([0]*(end - len1))\n             version2_nums.extend([0]*(end - len2))\n             for i in range(end):\n                 if int(version1_nums[i]) < int(version2_nums[i]):\n                     return -1\n                 elif int(version1_nums[i]) > int(version2_nums[i]):\n                     return 1\n             return 0\n", "class Solution:\n     def compareVersion(self, version1, version2):\n         \"\"\"\n         :type version1: str\n         :type version2: str\n         :rtype: int\n         \"\"\"\n         a,b=[int(i) for i in version1.split('.')],[int(i) for i in version2.split('.')]\n         for i in range(max(len(a),len(b))):\n             if i==len(a):a.append(0)\n             if i==len(b):b.append(0)\n             if a[i]>b[i]:\n                 return 1\n             elif a[i]<b[i]:\n                 return -1\n         return 0\n", "class Solution:\n     def compareVersion(self, version1, version2):\n         \"\"\"\n         :type version1: str\n         :type version2: str\n         :rtype: int\n         \"\"\"\n         \n         v1 = version1.split('.')\n         v2 = version2.split('.')\n         \n         len1 = len(v1)\n         len2 = len(v2)\n         \n         for i in range(min(len1, len2)):\n             if int(v1[i]) != int(v2[i]):\n                 return 1 if int(v1[i]) > int(v2[i]) else -1\n             \n         (v,t) = (v1,1) if len1 > len2 else (v2,-1)\n         for j in v[min(len1,len2):]:\n             if int(j) > 0:\n                 return t\n             \n         return 0\n         \n", "class Solution:\n     def compareVersion(self, version1, version2):\n         \"\"\"\n         :type version1: str\n         :type version2: str\n         :rtype: int\n         \"\"\"\n         v1 = [int(n) for n in version1.split('.')]\n         v2 = [int(n) for n in version2.split('.')]\n         for i in range(max(len(v1), len(v2))):\n             x1 = v1[i] if i < len(v1) else 0\n             x2 = v2[i] if i < len(v2) else 0\n             if x1 > x2:\n                 return 1\n             if x1 < x2:\n                 return -1\n             \n         return 0", "from itertools import zip_longest\n class Solution:\n     def compareVersion(self, version1, version2):\n         \"\"\"\n         :type version1: str\n         :type version2: str\n         :rtype: int\n         \"\"\"\n         rs = None\n         for x in zip_longest(\n                 (int(x) for x in version1.split('.')),\n                 (int(x) for x in version2.split('.')),\n                 fillvalue=0):\n             if x[0] == x[1]:\n                 pass\n             else:\n                 rs = x[0] > x[1]\n                 break\n \n         return {None: 0, True: 1, False: -1}[rs]"]