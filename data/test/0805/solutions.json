["N = int(input())\nsush = [0] * 101\nfor i in range(1, N + 1) :\n    l, r = [int(s) for s in input().split()]\n    for j in range(l, r) :\n        sush[j] = (1 if i == 1 else 0)\nprint(str(sum(sush)))", "n=int( input() )\nl=[]\nr=[]\n\nfor i in range( 0, n ):\n    a=list(map(int,input().split()))\n    l.append(a[0])\n    r.append(a[1])\n\nans=0\nfor j in range( l[0], r[0] ):\n    for k in range(1, n):\n        if j<r[k] and j>=l[k]:\n            break\n    else:\n        ans+=1\n\nprint(str(ans))\n", "n, t = int(input()) - 1, [0] * 101\na, b = map(int, input().split())\nfor i in range(n) :\n    l, r = map(int, input().split())\n    t[l] += 1\n    t[r] -= 1\nfor i in range(b - 1): t[i + 1] += t[i]\nprint(t[a: b].count(0))", "n = int(input())\nw = [False for i in range(101)]\na, b = map(int, input().split())\ns = -1\ne = -1\ncnt = 0\n\nfor i in range(n - 1):\n\tc, d = map(int, input().split())\n\tfor j in range(c, d):\n\t\tw[j] = True\n\nfor i in range(a, b):\n\tif not w[i]:\n\t\tcnt += 1\n\nprint(cnt)", "n = int(input())\na1 = list()\nfor i in range(0,101):\n\ta1.insert(i,0)\n#\tprint(a1[i])\nfor i in range(0,n):\n\ta,b = list(map(int,input().split()))\n\t#print(i)\n\tif i!=0:\n\t\tfor j in range(a, b):\n\t\t\t#print(j)\n\t\t\ta1[j] = 1\n\t\t\t#print(a1[j])\n\telse:\n\t\tl = a\n\t\tr = b\nans = 0\nfor i in range(l, r):\n\t#print(i)\n\tif a1[i]==0:\n\t\tans = ans+1\nprint(ans)\n\t\n", "n = int(input())\nd = [1] * 100\na, b = map(int, input().split())\nfor _ in range(n - 1):\n  l, r = map(int, input().split())\n  for i in range(l, r):\n    d[i] = 0\nprint(sum(d[a:b]))", "import time\nimport io\nimport math\nimport random\n\ndef timer(f):\n    def tmp(*args, **kwargs):\n        t = time.time()\n        res = f(*args, **kwargs)\n        print(\"Time : %f\" % (time.time()-t))\n        return res\n\n    return tmp\n\n\n\nn = int(input());\narray = []\nfor i in range(n):\n    str = input().split(' ')\n    array.append([int(str[0]), int(str[1])])\n\nsumm = 0\nx = array[0][0]\ny = array[0][1]\nfor i in range(x*100, y*100):\n    coord = i/100\n    f = True\n    for j in range(1, len(array)):\n        if array[j][0] <= coord <= array[j][1]:\n            f = False\n    if f:\n        #print(coord)\n        summ = summ+1\n\nprint(int(round(summ/100)))\n\n", "import sys; sys.setrecursionlimit(1000000)\n\ndef solve():\n    n, = rv()\n    count = [0] * 100\n    leftmost, rightmost, = rv()\n    for seg in range(n - 1):\n        left, right, = rv()\n        for val in range(left, right):\n            count[val]+=1\n    res = 0\n    for val in range(leftmost, rightmost):\n        if count[val] == 0: res+=1\n    print(res)\n\ndef rv(): return list(map(int, input().split()))\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()\n\n\n", "from sys import setrecursionlimit, exit, stdin\nfrom math import ceil, floor, acos, pi\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import gcd\nfrom functools import reduce\nimport itertools\nsetrecursionlimit(10**7)\nRI=lambda x=' ': list(map(int,input().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nmod=int(1e9+7)\neps=1e-6\nMAX=1000\n#################################################\ntaken=[0]*100\nn=RI()[0]\nl1, r1 = RI()\nfor i in range(1, n):\n    l, r = RI()\n    for j in range(l, r):\n        taken[j]=1\nans=0\nfor i in range(l1, r1):\n    if not taken[i]:\n        ans+=1\nprint(ans)\n\n\n    \n", "n = int(input())\ndryer = [0]*101\n\nal,ar = map(int,input().split())\n\nfor i in range(1,n):\n    l,r = map(int,input().split())\n\n    for j in range(l,r):\n        dryer[j] = 1\n\nx = 0\nfor i in range(al,ar):\n    if dryer[i] == 0 :\n        x += 1\n\nprint(x)", "n = int(input())\nm, M = list(map(int, input().split()))\nx = set((i, i + 1) for i in range(m, M))\nfor _ in range(n - 1):\n    a, b = list(map(int, input().split()))\n    for i in range(a, b):\n        if (i, i + 1) in x:\n            x.remove((i, i + 1))\nprint(len(x))\n", "n = int(input())\nd = [1] * 100\na, b = map(int, input().split())\nfor _ in range(n - 1):\n  l, r = map(int, input().split())\n  for i in range(l, r):\n    d[i] = 0\nprint(sum(d[a:b]))", "n = int(input())\na,b  = list(map(int,input().split()))\nli=[]\nfor i in range(n-1):\n  x,y  = list(map(int,input().split()))\n  li.append([x,y])\narr = [0]*(100+1)\nfor i in range(n-1):\n  arr[li[i][0]] +=1 \n  arr[li[i][1]] -=1\ns,ans= 0,0\nfor i in range(b+1):\n  if i >a and s==0:\n    ans+=1\n  s+=arr[i]\nprint(ans)    \n    \n", "def main():\n    from collections import defaultdict\n    n = int(input())\n    s = defaultdict(int)\n    (aa, ab) = list(map(int, input().split(' ')))\n    l = []\n    for i in range(n - 1):\n        (a, b) = list(map(int, input().split(' ')))\n        l.append((a, b))\n        while a < b:\n            s[a] += 1\n            a += 1\n    r = 0\n    while aa < ab:\n        if s[aa] == 0:\n            r += 1\n        aa += 1\n    return r\nprint(main())\n", "# python 3\n\"\"\"\n\"\"\"\nfrom operator import itemgetter\n\n\ndef on_segments_own_points(segment_list) -> int:\n    alexey_l, alexey_r = segment_list[0]\n    if len(segment_list) == 1:\n        return alexey_r - alexey_l\n\n    segment_list.sort(key=itemgetter(0))\n    # print(segment_list)\n    l_curr, r_curr = segment_list[0]  # current l, r\n    i = 0\n    # find the Alexey segment\n    while not (l_curr == alexey_l and r_curr == alexey_r):\n        i += 1\n        l_curr, r_curr = segment_list[i]\n    # now l_curr, r_curr hold the l and r for Alexey\n    if i > 0:\n        l_curr, r_curr = max(segment_list[:i], key=itemgetter(1))\n        if r_curr >= alexey_r:\n            return 0\n        elif alexey_l <= r_curr < alexey_r:\n            start = r_curr\n        else:\n            start = alexey_l\n    else:\n        start = alexey_l\n    non_overlapped = 0\n    # print(start, segment_list[i], segment_list[i+1])\n    for j in range(i+1, len(segment_list)):\n        l_curr, r_curr = segment_list[j]\n        # print(start, l_curr, r_curr, alexey_r)\n        if start < l_curr:\n            if l_curr < alexey_r:\n                non_overlapped += l_curr - start\n                if r_curr > alexey_r:\n                    return non_overlapped\n                else:\n                    start = r_curr\n                # print(\"go:\", start, non_overlapped)\n            else:\n                return alexey_r - start\n        elif start > r_curr:\n            continue\n        else:\n            if r_curr < alexey_r:\n                start = r_curr\n            else:\n                return non_overlapped\n    if start < alexey_r:\n        return non_overlapped + alexey_r - start\n    return non_overlapped\n\n\ndef __starting_point():\n    \"\"\"\n    Inside of this is the test. \n    Outside is the API\n    \"\"\"\n    n = int(input())\n    segments = [tuple(map(int, input().split())) for i in range(n)]\n\n    print(on_segments_own_points(segments))\n\n__starting_point()", "from sys import stdin, stdout\n\nn = int(stdin.readline().strip())\nalex = list(map(int, stdin.readline().strip().split()))\nalex_lst = list(range(alex[0] + 1, alex[1] + 1))\nfor i in range(1, n):\n    lst = list(map(int, stdin.readline().strip().split()))\n    for j in range(lst[0] + 1, lst[1] + 1):\n        if j in alex_lst:\n            alex_lst.remove(j)\nstdout.write(str((len(alex_lst))))", "# Made By Mostafa_Khaled \nbot = True \nn = int(input())\n\nd = [1] * 100\n\na, b = list(map(int, input().split()))\n\nfor _ in range(n - 1):\n\n  l, r = list(map(int, input().split()))\n\n  for i in range(l, r):\n\n    d[i] = 0\n\nprint(sum(d[a:b]))\n\n# Made By Mostafa_Khaled\n", "n = int(input())\na = [0] * 100\nla, ra = map(int, input().split())\nfor i in range(1, n):\n    l, r = map(int, input().split())\n    a[l] += 1\n    if r < 100:\n        a[r] -= 1\nfor i in range(1, 100):\n    a[i] += a[i - 1]\nans = 0\nfor i in range(la, ra):\n    if a[i] == 0:\n        ans += 1\nprint(ans)", "n = int(input())\nlrs = []\n\nalr = input().split()\nal = int(alr[0])\nar = int(alr[1])\nat = ar - al\n\nfor i in range(n-1):\n    lr = input().split()\n    l = (int(lr[0]), 'l')\n    r = (int(lr[1]), 'r')\n    lrs.append(l)\n    lrs.append(r)\n\nslrs = sorted(lrs, key = lambda x: x[0])\n\nc = 0\nlt = 101\n\nfor i in range(2 * (n - 1)):\n    cur = slrs[i]\n    if cur[1] == 'l':\n        c += 1\n        if c == 1:\n            lt = cur[0]\n    else:\n        c -= 1\n        if c == 0:\n            if al <= cur[0] and cur[0] <= ar:\n                if lt >= al:\n                    at -= (cur[0] - lt)\n                elif lt < al:\n                    at -= (cur[0] - al)\n            elif ar < cur[0]:\n                if lt <= al:\n                    at = 0\n                elif al < lt and lt < ar:\n                    at -= (ar - lt)\n            if at <= 0:\n                break\n            lt = 101\n\nprint(at)\n", "from itertools import accumulate\n\nn = int(input())\n\nmas = list([0 for x in range(101)])\n\nx0, y0 = list(map(int, input().split()))\n\nfor i in range(n - 1):\n    x, y = list(map(int, input().split()))\n    \n    mas[x] += 1\n    mas[y] -= 1\n\nans = list(accumulate(mas))[x0:y0].count(0)\n\nprint(ans)\n", "a=list()\nn=int(input())\nc=[1]*100\nl,r=map(int,input().split())\nfor i in range(n-1):\n    b=list(map(int,input().split()))\n    for j in range(b[0],b[1]):\n        c[j]=0\nprint(sum(c[l:r]))", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\nn = mint()\na = []\nfor i in range(n):\n\ta.append(tuple(mints()))\nr = 0\nfor i in range(*a[0]):\n\tr += 1\n\tfor j in range(1,len(a)):\n\t\tz = a[j]\n\t\tif z[0]<=i and z[1]>i:\n\t\t\tr -= 1\n\t\t\tbreak\nprint(r)", "n = int(input())\n\nal, ar = [int(x) for x in input().split()]\n\nalexSpace = {x: True for x in range(al, ar)}\n\nfor i in range(1, n):\n    l, r = [int(x) for x in input().split()]\n    for i1 in range(l, r):\n    \tif i1 in alexSpace.keys():\n        \talexSpace[i1] = False\n\nprint(len({x: isFree for x, isFree in alexSpace.items() if isFree}))", "n=int(input())\na=[1]*100\nx,y=map(int,input().split())\nfor i in range(n-1):\n\tl,r=map(int,input().split())\n\tfor j in range(l,r):\n\t\ta[j]=0;\nprint(sum(a[x:y]))", "n = int(input())\nAl_r = input()\nAl = int(Al_r.split(' ')[0])\nAr = int(Al_r.split(' ')[1])\nAl_rList = list(range(Al,Ar))\nfor i in range(n-1):\n    l_r = input()\n    l = int(l_r.split(' ')[0])\n    r = int(l_r.split(' ')[1])\n    l_rList = list(range(l, r))\n    for i in l_rList:\n        if i in Al_rList:\n            Al_rList.remove(i)\nprint(len(Al_rList))"]