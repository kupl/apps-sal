["n = int(input())\na = list(map(int, input().split()))\ns = set()\nj = 0\ni = n\nwhile i != 0:\n\tif a[j] == i:\n\t\tprint(i)\n\t\tj += 1\n\t\ti -= 1\n\telse:\n\t\twhile j < n and a[j] != i:\n\t\t\ts.add(a[j])\n\t\t\tj += 1\n\t\t\tprint()\n\t\ts.add(i)\n\t\twhile i > 0 and i in s:\n\t\t\tprint(i, end = ' ')\n\t\t\ti -= 1\n\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\nA = list(map(int, input().split()))\nV = [False] * (n + 1)\np = n\nfor i in range(n):\n  V[A[i]] = True\n  p0 = p\n  while V[p]:\n    print(p, end=' ')\n    p -= 1\n  print()\n\n", "n = int(input())\nused = [False] * (n + 1)\nnum = list(map(int, input().split()))\ncur = n\nfor i in range(0, n):\n    x = num[i]\n    used[x] = True\n    while(used[cur]):\n        print(cur, end = ' ')\n        cur -= 1\n    print('')\n    ", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nn = int(input())\nsnacks = list(map(int, input().split()))\nstatus = [False] * (n + 1)\n\nbiggest = n\nfor day, snack in enumerate(snacks):\n    status[snack] = True\n    ret = ''\n    if biggest == snack:\n        biggest -= 1\n        while status[biggest] and biggest >= 1:\n            biggest -= 1\n        ret_list = list(range(biggest + 1, snack + 1))\n        ret = ' '.join(map(str, reversed(ret_list)))\n    print(ret)\n            \n            \n\n    \n", "n = int(input())\nsnacks = list(map(int, input().split()))\npresent = [0] * (n + 1)\nexp = n\ni = 0\nfor i in range(n):\n    s = snacks[i]\n    present[s] = 1\n    curans = ''\n    if s == exp:\n        curans = str(exp) + ' '\n        while exp - 1 > 0 and present[exp - 1]:\n            curans += str(exp - 1) + ' '\n            exp -= 1\n        exp -= 1\n    if curans:\n        print(curans[:-1])\n    else:\n        print('')", "# coding: utf-8\n\nn = int(input())\na_s = map(int, input().split())\n\nad = {a:i for i, a in enumerate(a_s)}\ncd = 0\nst = []\nfor i in range(n, 0, -1):\n    if ad[i] > cd:\n        print(\" \".join(st), end=\"\")\n        st = []\n        print(\"\\n\" * (ad[i] - cd), end=\"\")\n        cd = ad[i]\n    st.append(str(i))\n\nprint(\" \".join(st))\n", "from heapq import *\n\nN = int(input().strip())\nsnacks = [int(x) for x in input().strip().split(' ')]\n\nsnacks_sorted = sorted(snacks)\n\nbuffer = []\n\nfor i in range(N):\n    heappush(buffer, -snacks[i])\n    while len(buffer) > 0 and -buffer[0] == snacks_sorted[-1]:\n        snacks_sorted.pop()\n        x = heappop(buffer)\n        print(-x,\"\",end=\"\")\n    print()\n\n", "#!/usr/bin/env python3\ndef ri():\n    return map(int, input().split())\n\nn = int(input())\na = ri()\n\nb = set()\n\ns = n\n\nfor aa in a:\n    b.add(aa)\n    if aa == s:\n        print(s, end=\"\")\n        for ss in range(s-1, 0, -1):\n            if ss == 0:\n                print()\n                return\n            if ss in b:\n                print(\" \", end=\"\")\n                print(ss, end=\"\")\n            else:\n                s = ss\n                print()\n                break\n    else:\n        print()\n\nprint()\n", "import heapq\n\nN = int(input())\nns = [int(x) for x in input().strip().split(' ')]\n\nlargest = N\nstorage = []\n\nfor n in ns:\n    if n != largest:\n        heapq.heappush(storage, -n)\n        print()\n    else:\n        print(n, end=' ')\n        largest -= 1\n        while len(storage) > 0 and storage[0] == -largest:\n            print(-heapq.heappop(storage), end=' ')\n            largest -= 1\n\n        print()\n", "def solve(snecks):\n\tcounted_snecks = []\n\tfor i in range(len(snecks)):\n\t\tcounted_snecks.append([snecks[i], i])\n\tcounted_snecks = sorted(counted_snecks, key=lambda x: x[0], reverse=True)\n\t\n\tfor i in range(1, len(counted_snecks)):\n\t\tif counted_snecks[i][1] < counted_snecks[i - 1][1]:\n\t\t\tcounted_snecks[i][1] = counted_snecks[i - 1][1]\n\treturn counted_snecks\n\n\n\n\ndef __starting_point():\n\tn = int(input())\n\tsnecks = list(map(int, input().split()))\n\t\n\tcounted_snecks = solve(snecks)\n\n\tprinting_array = [[] for _ in range(len(counted_snecks))]\n\n\tfor cs in counted_snecks:\n\t\tprinting_array[cs[1]].append(cs[0])\n\t\n\tfor el in printing_array:\n\t\tprint(\" \".join(list(map(str, el))))\n\t\t\n\n__starting_point()", "from sys import stdin as fin\n# fin = open(\"cfr398a.in\", \"r\")\n\nn = int(fin.readline())\narr = list(map(int, fin.readline().split()))\n\npre = [False] * (n + 1)\n\nmaxab, l, r = n, 0, 0\n\nfor i in range(1, n + 1):\n    pre[arr[i - 1]] = True\n    if arr[i - 1] == maxab:\n        while pre[maxab]:\n            print(maxab, end=' ')\n            pre[maxab] = False\n            maxab -= 1\n        print()\n    else:\n        print()", "n=int(input())\ns=set()\nl=n\na=map(int,input().split())\nfor i in a:\n    s.add(i)\n    while l in s:\n        print(l,end=' ')\n        l-=1\n    print()\n", "__author__ = \"Ryabchun Vladimir\"\n\n\nclass Stack:\n    \"\"\"\n    This is a stack class. There is 5 Procedures we can do with stack:\n    1. Push - we add one element at the end of the stack\n    2. Pop - we remove last element from the stack and return it\n    3. Last - We return last element but don't remove it\n    4. len() - returns the length of stack(we don't use len() because it's too\n    slow).\n    5. Clear - remove all elements from stack\n    \"\"\"\n    def __init__(self, element=None):\n        \"\"\"\n        self.length - length of the stack. When we append an element we increase it(length) by 1\n        __stack - this is our stack. Because we can't get any elements from the stack except the last one\n        we have to keep our stack as a private variable(we can receive any element - foo = Stack(); foo.stack[0] = 0,\n        but we mustn't do it).\n        :param element: Can be any type\n        \"\"\"\n        self.length = 0\n        if element is None:\n            self.__stack = []\n        else:\n            self.__stack = []\n            for el in element:\n                self.__stack.append(el)\n                self.length += 1\n\n    def push(self, element):\n        \"\"\"\n        This function adds an element at the end of the stack.\n        When we append an element we increase self.length by 1.\n        :param element: Can be any type\n        :return: NoneType\n        \"\"\"\n        self.__stack.append(element)\n        self.length += 1\n\n    def pop(self):\n        \"\"\"\n        This function removes an element from the end of the stack and\n        returns it's value.\n        When we append an element we decrease self.length by 1.\n        :return: Last element from the stack\n        \"\"\"\n        if self.length == 0:\n            raise IndexError(\"Stack is empty\")\n        else:\n            self.length -= 1\n            return self.__stack.pop()\n\n    def last(self):\n        \"\"\"\n        This function just returns an element from the end of the stack\n        but it doesn't remove it.\n        :return: Last element from the stack\n        \"\"\"\n        if self.length == 0:\n            raise IndexError(\"Stack is empty\")\n        else:\n            return self.__stack[-1]\n\n    def __len__(self):\n        \"\"\"\n        This function returns the length of the stack.\n        :return: self.length(int)\n        \"\"\"\n        return self.length\n\n    def clear(self):\n        \"\"\"\n        Clears the stack.\n        :return: NoneType\n        \"\"\"\n        self.__stack = []\n\nn = int(input())\nsnekovik = Stack()\nwrong_snaks = set()\nthe_biggest_snek = n\nsneks = list(map(int, input().split()))\nfor i in sneks:\n    printing = []\n    if i == the_biggest_snek:\n        snekovik.push(i)\n        printing.append(i)\n        the_biggest_snek -= 1\n        while the_biggest_snek in wrong_snaks:\n            snekovik.push(the_biggest_snek)\n            wrong_snaks.remove(the_biggest_snek)\n            printing.append(the_biggest_snek)\n            the_biggest_snek -= 1\n    else:\n        wrong_snaks.add(i)\n    print(*printing)\n", "n = int(input())\ndays = list(map(int,input().split()))\nseen = set()\nm = n\nres = []\nfor k in range(n):\n    res.append([])\nfor k in range(n):\n    if days[k] == m:\n        res[k].append(str(m))\n        i = 1\n        last = m\n        while m-i in seen:\n            res[k].append(str(m-i))\n            last = last-1\n            i += 1\n        m = last-1\n    else:\n        seen.add(days[k])\nfor day in res:\n    print(\" \".join(day))\n", "n = int(input())\nsnacks = map(int, input().split())\nfall = [0] * (n + 1)\nfor snack in snacks:\n    fall[snack] = 1\n    output = []\n    while fall[n] == 1:\n        output.append(n)\n        n -= 1\n    print(' '.join(map(str, output)))", "n = int(input());\na = list(map(int, input().split(' ')))\ncurr = n\ns = set()\nfor x in a:\n    s.add(x)\n\n    l = []\n    while n in s:\n        l.append(n)\n        s.remove(n)\n        n -= 1\n\n    print(' '.join(list(map(str, l))))\n", "n = int(input())\narr = [0]+list(map(int, input().split()))\ncame = [False]*(n+2)\nput = [False]*(n+2)\nput[n+1], came[n+1] = True, True\nfor i in range(1,n+1):\n\tif put[arr[i]+1] == True:\n\t\tput[arr[i]] = True\n\t\tprint(arr[i],end = ' ')\n\t\tk = arr[i]-1\n\t\twhile came[k]:\n\t\t\tput[k] = True\n\t\t\tprint(k,end = ' ')\n\t\t\tk -= 1\n\t\tprint()\n\telse:\n\t\tcame[arr[i]] = True\n\t\tprint()\n", "import sys\nimport heapq\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    heap = []\n    nxt = n\n\n    for i in range(n):\n        tmp = []\n        heapq.heappush(heap, -A[i])\n        while heap and -heap[0] == nxt:\n            tmp.append(-heapq.heappop(heap))\n            nxt -= 1\n        print(*tmp)\n\ndef __starting_point():\n    solve()\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\nk = []\nfor i in range(len(a)):\n    k.append((a[i], i + 1))\nk.sort()\nk=k[::-1]\ncurdate = 0\ncurpos = 0\nwhile curpos < len(k):\n    res = []\n    res.append(k[curpos][0])\n    for j in range(k[curpos][1] - curdate - 1):\n        print()\n    curdate = k[curpos][1]\n    while curpos + 1 < len(k) and k[curpos + 1][1] <= curdate:\n        curpos += 1\n        res.append(k[curpos][0])\n    curpos += 1\n    print(*res)\n        \n", "import sys\nn = int(input())\na = list(map(int, input().split()))\nb = list(reversed(sorted(a)))\nhas = set()\nl = 0\nfor i in range(n):\n    if a[i] == b[l]:\n        has.add(a[i])\n        while l < n and b[l] in has :\n            print(b[l], end = ' ')\n            l += 1\n        print()\n    else:\n        has.add(a[i])\n        print()", "n = int( input() )\nL =  list( map(int,input().split())  )\n\nexp = n ; \nT = [-1]*(n + 1)  ;\n\nmiss = 0\nfor i in range( len(L) ):\n    T[ L[i] ] = i ;\n    \not = []    \nfor i in range(len(L)):\n    if(L[i] == exp ):\n       ot.append(exp)\n       exp -= 1 \n       while exp > 0 and T[exp] < i and T[exp] > -1 :\n           ot.append(exp)\n           exp -= 1\n       print(*ot)\n       ot = []\n    else:\n        print()\n", "n = int(input())\nx = list(map(int,input().split()))\ne = n\nmy = set()\nfor i in range(0,n):\n    my.add(x[i])\n    if x[i] == e:\n        while e in my:\n            print(e,end=' ')\n            my.remove(e)\n            e = e - 1  \n        print()\n    else:\n        print()\n        \n        \n    ", "n = int(input())\na = list(map(int, input().split()))\ndone = set()\nj = n\nfor i in range(n):\n    done.add(a[i])\n    while j in done:\n        print(j, end=' ')\n        j -= 1\n    print()\n", "n = int(input())\nmaxsn = n-1\na = list(map(int, input().split()))\nsnacks = [0] * 100001\nfor i in range(n):\n    snacks[a[i]-1] = 1\n    while snacks[maxsn] == 1:\n        snacks[maxsn] = 0\n        print(maxsn + 1, end=' ')\n        maxsn -= 1\n    print()\n", "n = int(input())\nlst = list(map(int,input().split()))\n# lst = [int(i) for i in list(input()) if i!=' ']\n# print(lst)\nst = set()\nidx = n\nfor i in range(len(lst)):\n    x = lst[i]\n    if x == idx:\n        pt = [x]\n        # print(pt)\n        idx-=1\n        while idx in st:\n            pt.append(idx)\n            idx-=1\n        print(' '.join([str(i) for i in pt]))\n    else:\n        print()\n        st.add(x)\n"]