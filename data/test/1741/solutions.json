["import sys\ninput = sys.stdin.readline\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef get(x0, a, n):\n    r = 0\n    for i in range(n):\n        p = (x0 - a[i].x)*(x0 - a[i].x) + 1.0*a[i].y*a[i].y\n        p = p/2.0/a[i].y\n        if p < 0:\n            p = -p\n        r = max(r, p)\n    return r\n\ndef main():\n    n = int(input())\n    pos, neg = False, False\n    a = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        t = Point(x, y)\n        if t.y > 0:\n            pos = True\n        else:\n            neg = True\n        a.append(t)\n    if pos and neg:\n        return -1\n    if neg:\n        for i in range(n):\n            a[i].y = -a[i].y\n    L, R = -1e8, 1e8\n    for i in range(120):\n        x1 = L + (R-L)/3\n        x2 = R - (R-L)/3\n        if get(x1, a, n) < get(x2, a, n):\n            R = x2\n        else:\n            L = x1\n    return get(L, a, n)\n\ndef __starting_point():\n    print(main())\n__starting_point()", "from math import sqrt\n\neps = 1e-9\n\ndef mysqrt(x):\n    if x <= 0:\n        return 0\n    return sqrt(x)\n\ndef good(R):\n    nonlocal xs\n    nonlocal ys\n    nonlocal n\n    \n    left = -10**20\n    right = 10**20\n    \n    for i in range(n):\n        # (x - xi)**2 + (y - yi)**2 = R**2\n        # y = R\n        xi = xs[i]\n        yi = abs(ys[i])\n        \n        D = 2 * R * yi - yi**2\n        \n        if D + eps < 0:\n            return False\n        \n        sD = mysqrt(D)\n        \n        new_left = xi - sD\n        new_right = xi + sD\n        \n        left = max(left, new_left)\n        right = min(right, new_right)\n        \n        if left + eps > right:\n            return False\n    \n    return True\n        \n\ndef solve(lower, high, md):\n    R = 0\n    for _ in range(150):\n        R = md(lower, high)\n        \n        if good(R):\n            high = R\n        else:\n            lower = R\n        \n    return R\n\nn = int(input())\n\nxs = [0.0 for _ in range(n)]\nys = [0.0 for _ in range(n)]\n\nfor i in range(n):\n    xs[i], ys[i] = list(map(float, input().split()))\n    if i > 0:\n        if ys[i] * ys[0] < 0:\n            print(-1)\n            return\n\nR = None\nif good(1):\n    R = solve(0, 1, lambda x, y: (x + y) / 2)\nelse:\n    R = solve(1, 1e16, lambda x, y: sqrt(x * y))\n\nprint('{:.16}'.format(R))\n", "def bs(x,y,n,p):\n        r=0\n        for i in range(n):\n                 #z= (0.5*((x[i]-p)**2 +(y[i])**2))/y[i]\n                  z=(p-x[i])*(p-x[i]) + 1.0*y[i]*y[i]\n                  z=z/2.0\n                  z=z/y[i]\n                  z=abs(z)\n                  r=max(z,r)\n        return r\n        \n\nn=int(input())\ny=[]\nx=[]\nk=z=0\nfor i in range(n):\n        a,b=[int(i) for i in input().split()]\n        if b>0:\n                k=1\n        if b<0:\n                z=1\n        x.append(a)\n        y.append(b)\nif k==1 and z==1:\n        print(-1)\nelse:\n        z=120\n        l=min(x)\n        rt=max(x)\n        while(z):\n                #p1=(rt+2*l)/3\n                #p2=(l+2*rt)/3\n                p1=(2*l+rt)/3\n                p2=(2*rt+l)/3\n                if bs(x,y,n,p1)<bs(x,y,n,p2):\n                        #rt=p2\n                        rt=p2\n                else:\n                        l=p1\n                z=z-1\n        print(bs(x,y,n,l))\n                        \n", "n , l , r = 0 , -100000000, 1000000000\nx , y = [] , []\ndef cal(mid):\n    mx = 0\n    for i in range(n):\n        mx = max (mx ,(x[i] - mid) ** 2 / (2 * y[i]) + (y[i] / 2))\n    return mx;\nn = int(input())\nfor i in range(n):\n    a , b = list(map(int , input().split()))\n    x.append(a) , y.append(b)\nfor i in range(1 , n):\n    if(y[i] * y[0] < 0):\n        print(-1)\n        return\n    if(y[i] < 0):\n        y[i] *= -1\nif(y[0] < 0):\n    y[0] *= -1\nfor it in range(100):\n    m1 , m2 = l + (r - l) / 3 , r - (r - l) / 3\n    v1 , v2 = cal(m1) , cal(m2)\n    if(v1 > v2):\n        l = m1\n    else:\n        r = m2\nprint(cal(m1))\n    \n", "\nl , r =-100000000, 1000000000\ndef check(mid):\n    mx = 0\n    for i in range(n):\n\n        x,y = x1[i],y1[i]\n        mx = max (mx ,(x1[i] - mid) ** 2 / (2 * y1[i]) + (y1[i] / 2))\n\n    return mx\n\n\n\nn = int(input())\ncount1 = 0\ncount2 = 0\nx1 = []\ny1 = []\nfor i in range(n):\n    a,b = list(map(int,input().split()))\n    if b>=0:\n        count1+=1\n    else:\n        count2+=1\n\n    x1.append(a)\n    y1.append(abs(b))\n\nif count1 and count2:\n\n    print(-1)\n    return\n\n\nfor i in range(100):\n    mid1 = l+(r-l)/3\n    mid2 = r-(r-l)/3\n    if check(mid1)>check(mid2):\n        l = mid1\n    else:\n        r = mid2\n    # print(l,r)\nprint(check(l))\n", "def check(mid):\n    mx=0\n    for i in range(n):\n        mx=max(mx,(x[i]-mid)**2/(2*y[i])+(y[i]/2))\n    return mx\n\nn=int(input())\nl=-100000000\nr= 100000000\nx=[]\ny=[]\nc1,c2=0,0\nfor i in range(n):\n    a,b=map(int,input().split())\n    if b>=0:\n        c1+=1\n    else:\n        c2+=1\n        \n    \n    x.append(a)\n    y.append(abs(b))\nif c1 and c2:\n    print(-1)\n    return\nfor i in range(100):\n    m1=l+(r-l)/3\n    m2=r-(r-l)/3\n    if check(m1)>check(m2):\n        l=m1\n    else:\n        r=m2\nprint(check(l))", "import math\n\nn = int(input())\npoints = []\nnpt = 0\nfor i in range(n):\n    point = list(map(int, input().split()))\n    if point[1] < 0:\n        npt += 1\n        point[1] = -point[1]\n    points.append(point)\nif npt < n and npt > 0:\n    print(-1)\nelse:\n    l, r = 0, 1e20\n    count = 200\n    while abs(r - l) > 1e-6 and count > 0:\n        count -= 1\n        ok = True\n        mid = (l + r) / 2\n        a, b = -float('inf'), float('inf')\n        for i in range(n):\n            x, y = points[i]\n            if y > 2 * mid:\n                l = mid\n                ok = False\n                break\n            delta = math.sqrt(y * (2*mid - y))\n            a, b = max(a, x - delta), min(b, x + delta)\n            #print(\"x: {}, y: {}, a: {}, b: {}, delta: {}\".format(x, y, a, b, delta))\n        if not ok:\n            continue\n        #print(a, b, l, r, mid)\n        if a > b:\n            l = mid\n        else:\n            r = mid\n    print((l + r) / 2)\n\n", "import math\n\nn = int(input())\npoints = []\nnpt = 0\nfor i in range(n):\n    point = list(map(int, input().split()))\n    if point[1] < 0:\n        npt += 1\n        point[1] = -point[1]\n    points.append(point)\nif npt < n and npt > 0:\n    print(-1)\nelse:\n    l, r = 0, 1e16\n    count = 200\n    while abs(r - l) > 1e-6 and count > 0:\n        count -= 1\n        ok = True\n        mid = (l + r) / 2\n        a, b = -float('inf'), float('inf')\n        for i in range(n):\n            x, y = points[i]\n            if y > 2 * mid:\n                l = mid\n                ok = False\n                break\n            delta = math.sqrt(y * (2*mid - y))\n            # delta = math.sqrt(math.pow(mid, 2) - math.pow(mid-y, 2)) # \u6570\u636e\u7cbe\u5ea6\u4e22\u5931\n            a, b = max(a, x - delta), min(b, x + delta)\n            #print(\"x: {}, y: {}, a: {}, b: {}, delta: {}\".format(x, y, a, b, delta))\n        if not ok:\n            continue\n        #print(a, b, l, r, mid)\n        if a > b:\n            l = mid\n        else:\n            r = mid\n    print((l + r) / 2)\n\n", "import math\n\nn = int(input())\npoints = []\nnpt = 0\nfor i in range(n):\n    point = list(map(int, input().split()))\n    if point[1] < 0:\n        npt += 1\n        point[1] = -point[1]\n    points.append(point)\nif npt < n and npt > 0:\n    print(-1)\nelse:\n    l, r = 0, 1e16\n    count = 100\n    while abs(r - l) > 1e-6 and count > 0:\n        count -= 1\n        ok = True\n        mid = (l + r) / 2\n        a, b = -float('inf'), float('inf')\n        for i in range(n):\n            x, y = points[i]\n            if y > 2 * mid:\n                l = mid\n                ok = False\n                break\n            delta = math.sqrt(y * (2*mid - y))\n            # delta = math.sqrt(math.pow(mid, 2) - math.pow(mid-y, 2)) # \u6570\u636e\u7cbe\u5ea6\u4e22\u5931\n            a, b = max(a, x - delta), min(b, x + delta)\n            #print(\"x: {}, y: {}, a: {}, b: {}, delta: {}\".format(x, y, a, b, delta))\n        if not ok:\n            continue\n        #print(a, b, l, r, mid)\n        if a > b:\n            l = mid\n        else:\n            r = mid\n    print((l + r) / 2)\n\n"]