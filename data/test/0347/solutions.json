["m = list(map(int, input().split()))\nw = list(map(int, input().split()))\na = [500, 1000, 1500, 2000, 2500]\nv = list(map(int, input().split()))\nans = 0\nfor i in range(len(m)):\n    ans += max(0.3 * a[i], (1 - m[i] / 250) * a[i] - 50 * w[i])\nans += v[0] * 100\nans -= v[1] * 50\nprint(int(ans))\n", "a = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\nans = c[0] * 100 - c[1] * 50\nfor i in range(5):\n    ans += max(0.3 * (i + 1) * 500, (1 - a[i] / 250) * (i + 1) * 500 - 50 * b[i])\nprint(round(ans))", "M = list(map(int,input().split()))\nW = list(map(int,input().split()))\ns,e = list(map(int, input().split()))\nP = [500,1000,1500,2000,2500]\nr = 0\nfor k in range(5):\n    r += max([0.3*P[k],(1-(M[k]/250))*P[k] - 50*W[k]])\nprint(int(r+100*s-50*e))\n", "def g(w,m,x):\n    return max(0.3*x,(1-m/250)*x-50*w)\n\n\nm1,m2,m3,m4,m5=map(int,input().split())\nw1,w2,w3,w4,w5=map(int,input().split())\nh1,h2=map(int,input().split())\nprint(int(g(w1,m1,500)+g(w2,m2,1000)+g(w3,m3,1500)+g(w4,m4,2000)+g(w5,m5,2500)+h1*100-h2*50))", "m = list(map(int, input().split()))\nw = list(map(int, input().split()))\nq = [500, 1000, 1500, 2000, 2500]\ns = 0\nfor i in range(5):\n    s += max(0.3 * q[i], (1 - m[i] / 250) * q[i] - 50 * w[i])\nh1, h2 = list(map(int, input().split()))\ns += 100 * h1\ns -= 50 * h2\nprint(int(s))\n", "ans = 0;\ntime = list(map(int,input().split()))\ntries = list(map(int,input().split()))\nball = [500,1000,1500,2000,2500]\nz = list(map(int,input().split()))\ngv = z[0]\nbv = z[1]\nfor i in range(0,5):\n    ans += max(0.3*ball[i],(1-time[i]/250)*ball[i] - 50*tries[i])\n    \n    \nans += 100*gv\nans -= 50*bv\nprint(int(ans))\n", "max_scores = [ 500, 1000, 1500, 2000, 2500 ]\ncorects = [ int(c) for c in input().split() ]\nwrongs = [ int(w) for w in input().split() ]\nshacks, unshacks = map(int, input().split())\nfinal_score = shacks*100 - unshacks*50\n\ndef score(x, m, w):\n  return max(0.3*x, (1-(m/250))*x-50*w)\n\nfor i in range(5):\n  final_score += score(max_scores[i], corects[i], wrongs[i])\nprint(int(final_score))", "def score(m, w, x):\n    return max(0.3*x, (1.0 - m/250) * x - 50*w)\n\nms = list(map(int, input().split()))\nws = list(map(int, input().split()))\nhs, hu = list(map(int, input().split()))\n\nscore = sum(score(m, w, x) for m, w, x in zip(ms, ws, [500,1000,1500,2000,2500]))\nprint(int(score + 100 * hs - 50 * hu))\n", "def score(m,w,x):\n    return max(0.3*x,(1-m/250)*x-50*w)\nm1,m2,m3,m4,m5=(list(map(int,input().split())))\nw1,w2,w3,w4,w5=(list(map(int,input().split())))\nhs,hu=(list(map(int,input().split())))\nx1,x2,x3,x4,x5=(500,1000,1500,2000,2500)\nprint(round(score(m1,w1,x1)+score(m2,w2,x2)+score(m3,w3,x3)+score(m4,w4,x4)+score(m5,w5,x5))+100*hs-50*hu)\n", "m = list(map(int, input().split()))\nw = list(map(int, input().split()))\nn1, n2 = list(map(int, input().split()))\nans = n1 * 100 - n2 * 50\nfor i in range(5):\n    col = 500 * (i + 1)\n    ans += max(0.3 * col, (1 - m[i] / 250) * col - 50 * w[i])\nprint(int(ans))\n", "x = [500, 1000, 1500, 2000, 2500]\nm = list(map(int, input().split()))\nw = list(map(int, input().split()))\nhs, hu = map(int, input().split())\nprint(sum(max(3 * x[i] // 10, x[i] - x[i] * m[i] // 250 - 50 * w[i]) for i in range(5)) + hs * 100 - hu * 50)", "point = [500, 1000, 1500, 2000, 2500]\nminutes = list(map(int, input().split()))\nwrong = list(map(int, input().split()))\nhack = list(map(int, input().split()))\nanswer = 0\n\nfor x, m, w in zip(point, minutes, wrong):\n    answer += max(0.3 * x, (1 - m / 250) * x - 50 * w)\n\nanswer += hack[0] * 100 - hack[1] * 50\n\nprint(int(answer))\n", "import math\nfrom decimal import *\nimport sys\nfrom fractions import Fraction\n\nM=list(map(int,input().split()))\nW=list(map(int,input().split()))\nH=list(map(int,input().split()))\nX=[500,1000,1500,2000,2500]\n\nans = H[0]*100-H[1]*50\n\nfor i in range(0,5):\n   ans += int(max(0.3 * X[i] , (250 - M[i]) * (X[i]/250) - 50*W[i]))\nprint(ans)\n\n   \n\n   \n \n", "import sys\n\narr1 = [int(x) for x in sys.stdin.readline().split()]\narr2 = [int(x) for x in sys.stdin.readline().split()]\nbase = [500, 1000, 1500, 2000, 2500]\nres = 0\n\nfor i in range(5):\n    res += max([0.3 * base[i], base[i] * (1 - arr1[i] / 250) - 50 * arr2[i]])\n\na, b = [int(x) for x in sys.stdin.readline().split()]\nres += 100 * a\nres -= 50 * b\n\nprint(int(res))\n", "times = list(map(int, input().split()))\natt = list(map(int, input().split()))\nn,m = list(map(int, input().split()))\nsc = 0\nfor i in range(5):\n\tsc += max ( 150 * (i+1),  ( 1 - times[i] / 250 ) * 500 * (i+1) - 50 * att[i] )\nsc += 100 * n \nsc -= 50 * m\nprint(int(sc)) \n\n", "m = list(map(int, input().split()))\nw = list(map(int, input().split()))\nh = [500, 1000, 1500, 2000, 2500]\ns, u = list(map(int, input().split()))\nsu = 0.0\nfor i in range(5):\n    su += max(0.3*h[i], (1.0-m[i]/250.0)*h[i] - 50.0*w[i])\nsu += s*100.0\nsu -= u*50.0\nprint(int(su))\n", "res = 0\nc = [500,1000,1500,2000,2500]\na = list(map(int,input().split()))\nw = list(map(int,input().split()))\nhs,hu = map(int,input().split())\nfor i in range(5):\n    res += max(0.3*c[i],(1-a[i]/250)*c[i]-50*w[i])\nprint(int(res+hs*100-50*hu))", "def __starting_point():\n\n    x = [500,1000,1500,2000,2500]\n    m = [int(x) for x in input().split()]\n    w = [int(x) for x in input().split()]\n    hs , hu = [int(x) for x in input().split()]\n\n    res = 0\n    for i in range(5):\n        res += max( 3*x[i]//10 , x[i] - m[i]*x[i]//250 - 50*w[i] )\n    res += 100*hs\n    res -= 50*hu\n    print(res)\n__starting_point()", "def main():\n    mode=\"filee\"\n    if mode==\"file\":f=open(\"test.txt\",\"r\")\n    get = lambda :[int(x) for x in (f.readline() if mode==\"file\" else input()).split()]\n    m=get()\n    w=get()\n    h=get()\n    ans=0\n    s=500\n    for i in range(5):\n        ans+=max(0.3*s, (1- m[i]/250)*s - 50*w[i])\n        s+=500\n    ans+=(100*h[0] - 50*h[1])\n    print(int(ans))\n    \n\n\n    if mode==\"file\":f.close()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "sc=[1]*10\nmrk=input().split()\nfor i in range (0,5):\n    mrk[i]=int(mrk[i])\n    sc[i]=500*(i+1)\nwr=input().split()\nfor i in range (0,5):\n    wr[i]=int(wr[i])\ns=0\nfor i in range (0,5):\n    s+=max((0.3*sc[i]),(1-(mrk[i]/250))*sc[i]-(50*wr[i]))\nl=input().split()\ns+=100*int(l[0])-50*int(l[1])\nprint(int(s))\n\n", "problems = [ 500, 1000, 1500, 2000, 2500 ]\nsubmitted = list(map(int, input().split()))\nwrong = list(map(int, input().split()))\n\nscore = 0\nfor pos, x in enumerate(problems):\n    m = submitted[pos]\n    w = wrong[pos]\n    score += max( 3 * x // 10,  x - m * x // 250 - 50 * w )\n\ngood, bad = list(map(int, input().split()))\nscore += good * 100 - bad * 50\n\nprint(score)\n", "xs = [500, 1000, 1500, 2000, 2500]\nms = [int(x) for x in input().split()]\nws = [int(x) for x in input().split()]\nhacks = [int(x) for x in input().split()]\n\nres = 0\nfor i in range(len(xs)):\n    problem = max(0.3 * xs[i], (1 - ms[i]/250) * xs[i] - 50*ws[i])\n    res += problem\n\nres += 100*hacks[0] - 50*hacks[1]\nprint(int(res))\n", "m = list(map(int, input().split()))\nw = list(map(int, input().split()))\nhs, hu = map(int, input().split())\n\ns = [500 * (x + 1) for x in range(5)]\n\nfor i in range(5):\n    s[i] = max(0.3 * s[i], (1 - m[i]/250) * s[i] - 50 * w[i])\n\ns_t = sum(s) + 100 * hs - 50 * hu\n\nprint(int(s_t))", "m = list(map(int, input().split(\" \")))\nw = list(map(int, input().split(\" \")))\n\nhs, hu = list(map(int, input().split(\" \")))\n\ns = 0\n\ns += hs*100 - hu*50\n\nfor i in range(5):\n    s+= max(0.3*((i+1)*500), (1-m[i]/250)*((i+1)*500) - 50*w[i])\n    \nprint(int(s))\n", "__author__ = 'MoonBall'\n\nimport sys\n# sys.stdin = open('data/A.in', 'r')\nT = 1\n\ndef process():\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    z = [500, 1000, 1500, 2000, 2500]\n    total = 0\n    for _ in range(5):\n      total += max(0.3 * z[_], (1 - a[_] / 250) * z[_] - 50 * b[_])\n    total += 100 * c[0] - 50 * c[1]\n\n    print(int(total))\n\n\n\n\n\n\nfor _ in range(T):\n    process()\n"]