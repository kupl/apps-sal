["3\n\nimport sys\n\ns = sys.stdin.readline().strip()\nk = int(sys.stdin.readline())\ns += '*' * k\n\ndef is_tandem(s):\n    # print(s)\n    n = len(s) // 2\n    a, b = s[:n], s[n:]\n    for i in range(n):\n        if a[i] == '*' or b[i] == '*': continue\n        if a[i] != b[i]:\n            return False\n    return True\n\nl = 0\nfor i in range(len(s)):  # Beginning of tandem\n    for n in range(2, len(s) - i + 1, 2):  # Length of tandem\n        if is_tandem(s[i:i+n]):\n            l = max(l, n)\nprint(l)\n", "s = input()\nk = int(input())\nans = 0\n\ndef get_max_tandem_repeat(s, n):\n    while n > 0:\n        for i in range(len(s) - 2):\n            if i + 2 * n > len(s):\n                n -= 1\n                break\n            flag = True\n            for j in range(i, i + n):\n                if s[j] != s[j+n] and s[j+n] != '_':\n                    flag = False\n                    break\n            if flag:\n                return n * 2\n\nif k >= len(s):\n    ans = (k + len(s)) // 2 * 2\nelse:\n    s = s + '_' * k\n    n = len(s) // 2\n    ans = get_max_tandem_repeat(s, n)\n\nprint(ans)\n", "s = input()\nk = int(input())\nle = len(s) + k\nm = 0\nfor i in range(len(s)):\n    j = 1\n    while i+2*j <= le:\n        mi = i + j\n        la = i + 2*j\n        if mi >= len(s):\n            m = max(m, j)\n        if la <= len(s) and s[i:mi] == s[mi:la]:\n            m = max(m, j)\n        if mi < len(s):\n            xl = len(s) - mi\n            if s[i:i + xl] == s[mi:len(s)]:\n                m = max(m, j)\n        j += 1\nprint(2*m)\n", "s = input().rstrip()\nk = int(input())\nif k > len(s):\n    print((len(s) + k) - ((len(s) + k) % 2 == 1))\nelse:\n    aux = []\n    \n    for j in range(1, len(s)):\n        i = len(s) - 1\n        cnt = 0\n        while i - j >= 0 and s[i] == s[i - j]:\n            i -= 1\n            cnt += 1\n            if cnt == j:\n                break\n        diff = i - (len(s) - j - 1)\n        if diff <= k:\n            aux.append(2 * j)\n    aux.append(2 * k)\n    \n    for i in range(len(s)):\n        for j in range((len(s) - i) // 2):\n            if s[i:i + j] == s[i + j:i + 2 * j]:\n                aux.append(2 * j)\n                \n    print(max(aux))\n", "s = input()\nk = int(input())\ns = s + '?'*k\nfor i in range(len(s)//2 + 1):\n    a=[0]*len(s)\n    for j in range(len(s)-i):\n        if (s[j] == s[j+i])or (s[j+i] == '?'):\n            a[j] = 1\n    c = 0\n    mx = 0\n    for j in a:\n        if j == 1:\n            c+=1\n        else:\n            mx = max(mx,c)\n            c = 0\n    if mx >= i:\n        ans = i*2\nprint(ans)", "def readln(): return tuple(map(int, input().split()))\n\nimport sys\n\ns = input()\nk, = readln()\ns += '?' * k\n\nans = (len(s) // 2) * 2\nwhile ans:\n    for i in range(len(s) - ans + 1):\n        flag = True\n        for j in range(i, i + ans // 2):\n            #print(ans, i, j, flag)\n            flag = flag and (s[j] == s[j + ans // 2] or s[j + ans // 2] == '?')\n        if flag:\n            print(ans)\n            return\n    ans -= 2", "t, k = input(), int(input())\nn = len(t)\ns = min(k, (n + k) // 2)\nfor i in range(n - k):\n    for j in range(i + s + 1, min(n, (n + i + k) // 2 + 1)):\n        d = j - i\n        if n - j > d:\n            if t[i: j] == t[j: j + d]: s = d\n        elif t[i: n - d] == t[j: n]: s = d\nprint(2 * s)", "s=input()\nk=int(input())\n\ns+='?'*k\nn=len(s)\nbest=0\nfor i in range(n):\n    for j in range(i+1,n):\n        if((j-i+1)%2!=0):\n            continue\n        x=j-i+1\n        valid=True\n        for e in range(i,j+1):\n            if(e+x//2>j):\n                break\n            if(s[e]=='?' or s[e+x//2]=='?'  or s[e]==s[e+x//2]):\n                continue\n            valid=False\n        if(valid):\n            best=max(best,x)\nprint(best)\n", "t, k = input(), int(input())\nn = len(t)\ns = min(k, (n + k) // 2)\nfor i in range(n - k):\n    for j in range(i + s + 1, min(n, (n + i + k) // 2 + 1)):\n        d = j - i\n        if n - j > d:\n            if t[i: j] == t[j: j + d]: s = d\n        elif t[i: n - d] == t[j: n]: s = d\nprint(2 * s)", "def tandemRepeat(i,j):\n    a=s[i:i+j-1]\n    b=s[i-j:i-1]\n    for k in range(len(a)):\n        if a[k]==b[k] or a[k]=='*' or b[k]=='*':\n            continue\n        else:\n            return False\n    return True\n\ns=input()\nn=int(input())\ns=s+(\"*\"*n)\n#print(s)\nans=-1\nfor i in range(len(s)):\n    for j in range(1,len(s)):\n        if i+j-1<len(s) and i-j>=0 and tandemRepeat(i,j):\n            if ans<j : ans=j\nprint(ans*2)\n            \n", "t, k = input(), int(input())\nn = len(t)\ns = min(k, (n + k) // 2)\nfor i in range(n - k):\n    for j in range(i + s + 1, min(n, (n + i + k) // 2 + 1)):\n        d = j - i\n        if n - j > d:\n            if t[i: j] == t[j: j + d]: s = d\n        elif t[i: n - d] == t[j: n]: s = d\nprint(2 * s)", "s, r = input(), int(input())\n\n\ndef compare(a, b):\n    return a[:len(b)] == b\n\ndef f(s, n, N):\n    if not s or n < 2*N:\n        return N\n    for i in range(n//2, 0, -1):\n        #print(s, n, i, N)\n        if compare(s[:i], s[i:2 * i]):\n            return f(s[1:], n-1, max(i, N))\n    return f(s[1:], n-1, N)\nif len(s) < r:\n    print((len(s) + r) // 2 * 2)\nelse:\n    print(2*f(s, len(s) + r, 0))", "st=input()\nnum=int(input())\nmaxlen=0\nfor start in range(len(st)+num):\n  for end in range(start+1,len(st)+num,2):\n    middle=(end+start+1)//2\n    ans=True\n    for it in range(min(len(st)-middle,end-middle)):\n      if(st[start+it]!=st[middle+it]):\n        ans=False\n        break\n    if ans:\n      maxlen=max(maxlen,end-start+1)\nprint(maxlen)\n", "a=input()\nb=int(input())\nj=0\nl=0\nfor start in range(len(a)+b):\n    for end in range(start+1,len(a)+b):\n        if ((end-start)+1)%2==0:\n            middle=(start+end)//2+1\n            k=0\n            for traverse in range(start,len(a)):\n                if k+middle>=len(a) or k+middle>end:\n                    j=end-start+1\n                    if j>l:\n                        l=j\n                elif k+middle<len(a) and a[traverse]!=a[middle+k]:\n                    break\n                elif k+middle<len(a) and a[traverse]==a[middle+k]:\n                    k+=1\nprint(l)\n                        \n\n", "s = input()\nn = len(s)\nk = int(input())\nbest = 0\nif k >= n:\n    best = (k + n) // 2 * 2\nfor st in range(n):\n    for ln in range(2, n - st):\n        if s[st:st+ln//2] == s[st+ln//2:st+ln]:\n            best = max(best, ln)\n    \nfor st1 in range(n):\n    if (n + k - st1) % 2 == 0:\n        lens = (n + k - st1) // 2\n        nlen = lens - k\n        st2 = st1 + lens\n        if s[st1:(st1+nlen)] == s[st2:]:\n            best = max(best, lens*2)\nprint(best)    ", "def tandem(n, a, i):\n    for k in range(i, i + n):\n        if a[k] != a[k + n] and a[k + n] != '??':\n            return 0\n    return 1\n \ns = list(input().strip())\nk = int(input())\ns += ['??' for i in range(k)]\n\nres = 0\n\nfor i in range(len(s)):\n    for n in range(1, (len(s) - i) // 2 + 1):\n        if tandem(n, s, i):\n            res = max(res, n * 2)\nprint(res)", "def main():\n    s = input()\n    k = int(input())\n    \n    s += '?' * k\n    \n    N = len(s)\n    \n    result = 0\n    \n    for l in range(1, N):\n        count = 0\n        for i in range(N - l):\n            if s[i] == s[i + l] or s[i + l] == '?':\n                count += 1\n                if count == l:\n                    result = l\n                    break\n            else:\n                count = 0\n    \n    print(result * 2)\n                    \n\nmain()\n", "def match(str1, str2):\n    for t in range(len(str1)):\n        if str1[t]!=str2[t] and str2[t]!='_':\n            return False\n    return True\n\nstring=input()\nk=int(input())\n\nlength=len(string)\nmark = False\nif k>=length:\n    print(2*int((length+k)/2))\nelse:\n    s=string+k*'_'\n    n=int(len(s)/2)\n    for i in range(n, 0, -1):\n        for j in range(len(s)-2*i+1):\n            if match(s[j:i+j], s[i+j:i+i+j]) and mark == False:\n                print(2*i)\n                mark = True", "#input\n\ns=str(input())\nk=int(input())\n\n\n\n#variables\na=0\ndef tandem(string):\n\tif len(string)%2==1:\n\t\treturn False\n\telse:\n\t\tif string[:len(string)//2]==string[len(string)//2:]:\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\n\n#main\nif len(s)<=k:\n\ta=2*((len(s)+k)//2)\nelse:\n\ta=2*k\n\nfor i in range(0,len(s)-1):\n\tfor j in range(i+1,len(s)):\n\t\tif tandem(s[i:j+1]):\n\t\t\ta=max(a,j-i+1)\n\nfor i in range(len(s)-1):\n\tif s[i]==s[-1]:\n\t\tx=0\n\t\twhile i-x>=0:\n\t\t\tif s[i-x]==s[-1-x] and i+x<len(s):\n\t\t\t\tx+=1\n\t\t\telse:\n\t\t\t\tbreak\n\t\tif len(s)-i-x-1<=k:\n\t\t\ta=max(a,2*(len(s)-i-1))\n\nprint(a)", "import sys\n#fin=open('F:/OJ/OJ/in.txt','r')\n#sys.stdin=fin\n\nstr=input()\nk=int(input())\nans=0\nif(k>=len(str)):\n    print((k+len(str))//2*2)\n    return\nfor i in range(len(str)):\n    for j in range(0,i+1):\n        len1=len(str[j:i+1])\n        len2=len(str[i+1:])\n        minn=min(len1,len2)\n        #print( i,j)\n        #print(len1,len2)\n        if(str[j:j+minn]==str[i+1:i+1+minn]):\n            if(minn==len1):\n                ans=max(ans,len1*2)\n            elif(k+len2>=len1):\n                ans=max(ans,len1*2)\n                \nprint(ans)\n", "s=input()\nk=int(input())\nn=len(s)\n\nif k>=n:\n    print(int(2*((n+k)//2)))\n    raise SystemExit\nll=0\nfor i in range(k+1):\n  for l in range((n+i)//2,i-1,-1):\n    if s[n-(l-i):n]==s[n+i-2*l:n-l]:\n        if l>ll:\n            ll=l\n        break\n\nj=ll\nwhile 2*j<=n:\n    j=j+1\n    for i in range(n-2*j):\n        if s[i:i+j]==s[i+j:i+2*j]:\n            ll=j\n            break\nprint(int(2*ll))\n", "s = input()\nk = int(input())\nn = len(s)\nans = min(2 * k, 2 * n)\nstart = min(k + 1, n + 1)\nend = (n + k) // 2 + 1\nfor i in range(start, end):\n    flag = True\n    for j in range(n - 1, max(-1, n - (i - k) - 1), -1):\n        if s[j] != s[j - i]:\n            flag = False\n            break\n    if flag:\n        ans = 2 * i\nfor l in range(n):\n    for d in range(n - l):\n        if l + 2 * d <= n and s[l:l + d] == s[l + d:l + 2 * d]:\n            ans = max(ans, d * 2)\nprint(ans)\n", "s = input()\nk = int(input())\nm = len(s) + k\nans = 0\nif k >= len(s):\n  ans = m - m % 2\nfor x in range(len(s)//2+1, 0, -1):\n  for y in range(len(s)-2*x):\n    if s[y:y+x] == s[y+x:y+2*x]:\n      ans = max(ans, 2*x)\n      # print(s[y:y+x], s[y+x:y+2*x])\nfor l in range(m//2, 0, -1):\n  c = s[m-2*l:m-l]\n  if c[:l-k] == s[m-l:]:\n    ans = max(ans, 2*l)\n    break\nprint(ans)"]