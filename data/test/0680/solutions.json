["ax, ay = list(map(int, input().split()))\nbx, by = list(map(int, input().split()))\ncx, cy = list(map(int, input().split()))\n\n\ndef f(cx, ax, bx, cy, ay, by):\n    mxy = max(ay, by, cy)\n    mny = min(ay, by, cy)\n    print(abs(cx - bx) + mxy - mny + 1)\n    for i in range(mny, mxy + 1):\n        print(ax, i)\n    if cx <= bx:\n        for i in range(cx, ax):\n            print(i, cy)\n        for i in range(ax + 1, bx + 1):\n            print(i, by)\n    else:\n        for i in range(bx, ax):\n            print(i, by)\n        for i in range(ax + 1, cx + 1):\n            print(i, cy)\n\n\nif cx <= ax <= bx or bx <= ax <= cx:\n    f(cx, ax, bx, cy, ay, by)\nelif cx <= bx <= ax or ax <= bx <= cx:\n    f(cx, bx, ax, cy, by, ay)\nelif bx <= cx <= ax or ax <= cx <= bx:\n    f(bx, cx, ax, by, cy, ay)\n", "pos=[]\npos.append(list(map(int,input().split())))\npos.append(list(map(int,input().split())))\npos.append(list(map(int,input().split())))\n\npos.sort(key=lambda x:x[1])\n#print(pos)\nans=[]\nfor i in range(min(pos[0][0],pos[1][0],pos[2][0]),max(pos[0][0],pos[1][0],pos[2][0])+1):\n    ans.append([i,pos[1][1]])\n\nif pos[0][1]<=pos[1][1]:\n    for i in range(pos[0][1],pos[1][1]):\n        ans.append([pos[0][0],i])\nelse:\n    for i in range(pos[1][1]+1,pos[0][1]+1):\n        ans.append([pos[0][0],i])\n\n\nif pos[2][1]<=pos[1][1]:\n    for i in range(pos[2][1],pos[1][1]):\n        ans.append([pos[2][0],i])\nelse:\n    for i in range(pos[1][1]+1,pos[2][1]+1):\n        ans.append([pos[2][0],i])\n\nprint(len(ans))\nfor i in ans:\n    print(i[0],i[1])\n    \n\n", "xa, ya = list(map(int, input().split()))\nxb, yb =  list(map(int, input().split()))\nxc, yc= list(map(int, input().split()))\n\nsrx = xa+xb+xc-min(xa, xb, xc)-max(xa, xb, xc)\nsry = ya +yb+yc - min(ya, yb, yc)- max(ya, yb,yc)\n\nl = max(xa, xb, xc)-min(xa, xb, xc)+max(ya, yb, yc)-min(ya, yb, yc)+1\nprint(l)\n\nfor i in range(min(xa, xb, xc), max(xa, xb, xc)+1):\n    print(i, sry)\n\nif (ya!=sry):\n    i = ya\n    while (i!=sry):\n        print(xa, i)\n        i+=int((sry-ya)/abs(sry-ya))\nif (yb!=sry):\n    i = yb\n    while (i!=sry):\n        print(xb, i)\n        i+=int((sry-yb)/abs(sry-yb))\nif (yc!=sry):\n    i = yc\n    while (i!=sry):\n        print(xc, i)\n        i+=int((sry-yc)/abs(sry-yc))\n     \n\n\n\n", "# list(map(int, input().split()))\n# map(int, input().split())\n\nclass Coord():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef cdist(c1, c2):\n    return abs(c1.x - c2.x) + abs(c1.y - c2.y)\n\ndef dist(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n\nx1, y1 = list(map(int, input().split()))\nx2, y2 = list(map(int, input().split()))\nx3, y3 = list(map(int, input().split()))\ncs = [Coord(x1, y1), Coord(x2, y2), Coord(x3, y3)]\ns = set()\ns.add(tuple([x1, y1]))\ns.add(tuple([x2, y2]))\ns.add(tuple([x3, y3]))\nshifts = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n\nfor i in range(3):\n    cur = cs[i]\n    other = []\n    for j in range(3):\n        if j != i:\n            other.append(cs[j])\n    cur_x = cur.x\n    cur_y = cur.y\n    while True:\n        cnt = 0\n        for sh in shifts:\n            new_x, new_y = cur_x + sh[0], cur_y + sh[1]\n            flag = 0\n            for oth in other:\n                oth_x, oth_y = oth.x, oth.y\n                if dist(cur_x, cur_y, oth_x, oth_y) > dist(new_x, new_y, oth_x, oth_y):\n                    pass\n                else:\n                    flag += 1\n            if flag:\n                cnt += 1\n                continue\n            \n            s.add(tuple([new_x, new_y]))\n            cur_x, cur_y = new_x, new_y\n            break\n        \n        if cnt == 4:\n            break\n\narr = list(s)\nprint(len(arr))\nfor a in arr:\n    print(*a)\n", "def main():\n    a = tuple(map(int, input().split()))\n    b = tuple(map(int, input().split()))\n    c = tuple(map(int, input().split()))\n\n    a, b, c = sorted((a, b, c))\n    (x1, y1) = a\n    (x2, y2) = b\n    (x3, y3) = c\n\n    dy2 = y2 - y1\n    dy3 = y3 - y1\n\n    sy2 = 1 if dy2 >= 0 else -1\n    sy3 = 1 if dy3 >= 0 else -1\n\n    ay2 = abs(dy2)\n    ay3 = abs(dy3)\n\n    c = 0\n    res = []\n    if sy2 == sy3:\n        for i in range(x1, x2 + 1):\n            c += 1\n            res.append((i, y1))\n\n        for i in range(1, max(ay2, ay3) + 1):\n            c += 1\n            res.append((x2, y1 + sy2 * i))\n\n        for i in range(x2 + 1, x3 + 1):\n            c += 1\n            res.append((i, y3))\n\n    else:\n        for i in range(x1, x3 + 1):\n            c += 1\n            res.append((i, y1))\n\n        for i in range(1, ay2 + 1):\n            c += 1\n            res.append((x2, y1 + sy2 * i))\n\n        for i in range(1, ay3 + 1):\n            c += 1\n            res.append((x3, y1 + sy3 * i))\n\n    print(c)\n    for (x, y) in res:\n        print(x, y)\n\n\nmain()\n", "pts = [list(map(int, input().split())) for i in range(3)]\npts.sort()\nans = []\nfor i in range(pts[0][0], pts[1][0]):\n    ans.append([i, pts[0][1]])\nfor i in range(min(pts[0][1], min(pts[1][1], pts[2][1])), max(pts[0][1], max(pts[1][1], pts[2][1])) + 1):\n    ans.append([pts[1][0], i])\nfor i in range(pts[1][0] + 1, pts[2][0] + 1):\n    ans.append([i, pts[2][1]])\nprint(len(ans))\nfor elem in ans:\n    print(*elem)", "def medium(a, b, c):\n    return a + b + c - max(a, b, c) - min(a, b, c)\n\n\ndef wayy(x1, y1, x2, y2):\n    nx, ny = x1, y1\n    if [nx, ny] not in way:\n        way.append([nx, ny])    \n    while nx != x2 or ny != y2:\n        if x2 > nx:\n            nx += 1\n        elif x2 < nx:\n            nx -= 1\n        if y2 > ny:\n            ny += 1\n        elif y2 < ny:\n            ny -= 1\n        if [nx, ny] not in way:\n            way.append([nx, ny])\n\nax, ay = map(int, input().split())\nbx, by = map(int, input().split())\ncx, cy = map(int, input().split())\nway = []\nmx = medium(ax, bx, cx)\nmy = medium(ay, by, cy)\nwayy(ax, ay, mx, ay)\nwayy(bx, by, mx, by)\nwayy(cx, cy, mx, cy)\nwayy(mx, ay, mx, my)\nwayy(mx, by, mx, my)\nwayy(mx, cy, mx, my)\nprint(len(way))\nfor elem in way:\n    print(*elem)", "xa, ya = list(map(int, input().split()))\nxb, yb = list(map(int, input().split()))\nxc, yc = list(map(int, input().split()))\na = [(xa, ya), (xb, yb), (xc, yc)]\na.sort()\nxa = a[0][0]\nxb = a[1][0]\nxc = a[2][0]\nya = a[0][1]\nyb = a[1][1]\nyc = a[2][1]\nb = []\nz = []\nfor i in range(1050):\n    b.append([0] * 1050)\n\nb[xa][ya] = 1\nb[xb][yb] = 1\nb[xc][yc] = 1\nfor i in range(xa + 1, xb + 1):\n    if b[i][ya] == 0:\n        z.append((i, ya))\n        b[i][ya] = 1\nif yb > ya:\n    for i in range(ya + 1, yb):\n         if b[xb][i] == 0:\n             z.append((xb, i))\n             b[xb][i] = 1\nelse:\n    for i in range(yb + 1, ya):\n         if b[xb][i] == 0:\n             z.append((xb, i))\n             b[xb][i] = 1\nfor i in range(xc - 1, xb - 1, -1):\n     if b[i][yc] == 0:\n         z.append((i, yc))\n         b[i][yc] = 1\nif yc < yb:\n    for i in range(yc + 1, yb):\n         if b[xb][i] == 0:\n             z.append((xb, i))\n             b[xb][i] = 1\nelse:\n    for i in range(yb + 1, yc):\n         if b[xb][i] == 0:\n             z.append((xb, i))\n             b[xb][i] = 1\nz.append((xa, ya))\nz.append((xb, yb))\nz.append((xc, yc))\nprint(len(z))\nfor i in z:\n    print(i[0], i[1])\n", "x1, y1 = list(map(int, input().split()))\nx2, y2 = list(map(int, input().split()))\nx3, y3 = list(map(int, input().split()))\na = [[x1, y1], [x2, y2], [x3, y3]]\na.sort()\nans = []\nif a[1][1] <= a[2][1]:\n    x = a[1][0]\n    y = a[1][1]\n    while y <= a[2][1]:\n        ans += [[x, y]]\n        y += 1\n    y -= 1\n    x += 1\n    while x <= a[2][0]:\n        ans += [[x, y]]\n        x += 1\nelse:\n    x = a[1][0]\n    y = a[1][1]\n    while y >= a[2][1]:\n        ans += [[x, y]]\n        y -= 1\n    y += 1\n    x += 1\n    while x <= a[2][0]:\n        ans += [[x, y]]\n        x += 1   \nif a[1][1] <= a[0][1]:\n    x = a[1][0]\n    y = a[1][1]\n    while y <= a[0][1]:\n        if [x, y] not in ans:\n            ans += [[x, y]]\n        y += 1\n    y -= 1\n    x -= 1\n    while x >= a[0][0]:\n        if [x, y] not in ans:\n            ans += [[x, y]]\n        x -= 1\nelse:\n    x = a[1][0]\n    y = a[1][1]\n    while y >= a[0][1]:\n        if [x, y] not in ans:\n            ans += [[x, y]]\n        y -= 1\n    y += 1\n    x -= 1\n    while x >= a[0][0]:\n        if [x, y] not in ans:\n            ans += [[x, y]]\n        x -= 1  \nprint(len(ans))\nfor i in range(len(ans)):\n    print(*ans[i])", "friends = []\nfor i in range(3):\n    X, Y = map(int, input().split())\n    friends.append((X, Y))\n\nresult = []\n\nfriends = sorted(friends)\n\nfor i in range(friends[0][0], friends[1][0]):  # X increment\n    result.append((i, friends[0][1]))\nfor i in range(friends[1][0] + 1, friends[2][0] + 1):\n    result.append((i, friends[2][1]))\n    \nmean_x = friends[1][0]\nfriends = sorted(friends, key=lambda x: x[1])\nfor i in range(friends[0][1], friends[2][1] + 1): # Y increment\n    result.append((mean_x, i))\n\nprint(len(result))\nfor item in result:\n    print(item[0], item[1])", "coords1 = tuple(map(int, input().split()))\ncoords2 = tuple(map(int, input().split()))\ncoords3 = tuple(map(int, input().split()))\ncoords = [coords1, coords2, coords3]\ncoords.sort(key=(lambda x: x[0]))\n\n\ndef min_path(coords_lm, coords_rm, coords_center):\n    first_path = []\n    second_path = []\n    first_path.append(tuple(coords_lm))\n    while first_path[-1][0] != coords_center[0]:\n        new_square = (first_path[-1][0] + 1, first_path[-1][1])\n        first_path.append(new_square)\n\n    orient = 1 if first_path[-1][1] < coords_center[1] else -1\n    while first_path[-1][1] != coords_center[1]:\n        new_square = (first_path[-1][0], first_path[-1][1] + 1*orient)\n        first_path.append(new_square)\n\n    second_path.append(tuple(coords_rm))\n    while second_path[-1][0] != coords_center[0]:\n        new_square = (second_path[-1][0] - 1, second_path[-1][1])\n        second_path.append(new_square)\n\n    orient = 1 if second_path[-1][1] < coords_center[1] else -1\n    while second_path[-1][1] != coords_center[1]:\n        new_square = (second_path[-1][0], second_path[-1][1] + 1*orient)\n        second_path.append(new_square)\n\n    return set(first_path).union(set(second_path))\n\n\npath = min_path(coords[0], coords[2], coords[1])\npath = list([\" \".join((str(x[0]), str(x[1]))) for x in list(path)])\nprint(len(path))\nprint(\"\\n\".join(path))\n", "def func(m, n, key):\n    nonlocal x, y\n    x0 = m\n    y0 = n\n    if key == 1:\n        for j in range(abs(x - m)):\n            if x > m:\n                print(x0, y0)\n                x0 += 1\n            else:\n                print(x0, y0)\n                x0 -= 1\n        for j in range(abs(y - n)):\n            if abs(y - y0) > ymin:\n                if y > n:\n                    print(x0, y0)\n                    y0 += 1\n                else:\n                    print(x0, y0)\n                    y0 -= 1\n    else:\n        for j in range(abs(y - n)):\n            if y > n:\n                print(x0, y0)\n                y0 += 1\n            else:\n                print(x0, y0)\n                y0 -= 1\n        for j in range(abs(x - m)):\n            if abs(x - x0) > xmin:\n                if x > m:\n                    print(x0, y0)\n                    x0 += 1\n                else:\n                    print(x0, y0)\n                    x0 -= 1\n\nx1, y1 = list(map(int, input().split()))\nx2, y2 = list(map(int, input().split()))\nx3, y3 = list(map(int, input().split()))\nx = sorted([x1, x2, x3])[1]\ny = sorted([y1, y2, y3])[1]\nxmin = min(abs(x - x1), abs(x - x2), abs(x - x3))\nymin = min(abs(y - y1), abs(y - y2), abs(y - y3))\nprint(abs(x - x1) + abs(x - x2) + abs(x - x3) + abs(y - y1) + abs(y - y2) + abs(y - y3) + 1 - max(xmin, ymin))\nif xmin < ymin:\n    key = 1\n    for i in range(ymin):\n        print(x, y + i + 1)\n        print(x, y - i - 1)\nelse:\n    key = -1\n    for i in range(xmin):\n        print(x + xmin + 1, y)\n        print(x - xmin - 1, y)\nfunc(x1, y1, key)\nfunc(x2, y2, key)\nfunc(x3, y3, key)\nprint(x, y)\n", "koor = dict()\na = input()\nxa = int(a.split()[0])\nya = int(a.split()[1])\nb = input()\nxb = int(b.split()[0])\nyb = int(b.split()[1])\nc = input()\nxc = int(c.split()[0])\nyc = int(c.split()[1])\nkoor[ya] = xa \nkoor[yb] = xb \nkoor[yc] = xc \nprint(max(xa, xb, xc) + max(ya, yb, yc) - min(xa, xb, xc) - min(ya, yb, yc) + 1)\nfor i in range(max(xa, xb, xc) - min(xa, xb, xc) + 1):\n    print(min(xa, xb, xc) + i, ya + yb + yc - min(ya, yb, yc) - max(ya, yb, yc))\nfor i in range(max(ya, yb, yc) - (ya + yb + yc - min(ya, yb, yc) - max(ya, yb, yc))):\n    print(koor[max(ya, yb, yc)], max(ya, yb, yc) - i)\nfor i in range(-min(ya, yb, yc) + (ya + yb + yc - min(ya, yb, yc) - max(ya, yb, yc))):\n    print(koor[min(ya, yb, yc)], min(ya, yb, yc) + i)    ", "a = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\ns = [a[:], b[:], c[:]]\na, b, c = sorted([a, b, c])\n\nif c[1] < b[1]:\n    c[1], b[1] = b[1], c[1]\n\nif b[1] < a[1]:\n    b[1], a[1] = a[1], b[1]\n\nif c[1] < b[1]:\n    b[1], c[1] = c[1], b[1]\n\ndef man_dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1]) + 1\n\ndist = man_dist(a, b) + man_dist(b, c) - 1\ns.sort()\na = set()\n\nfor i in range(s[0][0], s[1][0] + 1):\n    a.add((i, s[0][1]))\n\n    \nif s[0][1] < s[1][1]:\n    for i in range(s[0][1], s[1][1] + 1):\n        a.add((s[1][0], i))\nelse:\n    for i in range(s[1][1], s[0][1] + 1):\n        a.add((s[1][0], i)) \n        \nx = man_dist(s[1], s[2])\ny = man_dist((s[1][0], s[0][1]), s[2])\nz = man_dist((s[1][0], s[2][1]), s[2])\n\nif s[2][1] in range(min(s[0][1], s[1][1]), max(s[0][1], s[1][1])):\n    int_point = (s[1][0], s[2][1])\nelif (y > x and y > z):\n    int_point = (s[1][0], s[1][1])\nelse:\n    int_point = (s[1][0], s[0][1])\n\nfor i in range(int_point[0], s[2][0] + 1):\n    a.add((i, int_point[1]))\n\nif int_point[1] < s[2][1] + 1:\n    for i in range(int_point[1], s[2][1] + 1):\n        a.add((s[2][0], i))\nelse:\n    for i in range(s[2][1], int_point[1] + 1):\n        a.add((s[2][0], i))   \n        \nprint(dist)\nfor i in a:\n    print(*i)", "def prm(a, b):\n    ld = (min(a[0], b[0]), min(a[1], b[1]))\n    ru = (max(a[0], b[0]), max(a[1], b[1]))\n    return tuple((ld, ru))\n\n\ndef peres(a, b):\n    return tuple(((max(a[0][0], b[0][0]), max(a[0][1], b[0][1])), (min(a[1][0], b[1][0]), min(a[1][1], b[1][1]))))\n\n\ndef rst(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1]) + 1\n\n\ndef printt(a):\n    nonlocal h\n    if h != a:\n        print(*a)\n    s1 = set([])\n    for i in range(min(a[0], h[0]), max(a[0], h[0]) + 1):\n        j = h[1]\n        if ((i, j) != h) and ((i, j) != a):\n            print(i, j)\n            s1.add((i, j))\n    for j in range(min(a[1], h[1]), max(a[1], h[1]) + 1):\n        i = a[0]\n        if ((i, j) != h) and ((i, j) != a) and (i, j) not in s1:\n            print(i, j)\n\n\na = tuple(map(int, input().split()))\nb = tuple(map(int, input().split()))\nc = tuple(map(int, input().split()))\nh = peres(peres(prm(a, b), prm(a, c)), prm(b, c))[0]\nprint(rst(a, h) + rst(b, h) + rst(c, h) - 2)\nprintt(a)\nprintt(b)\nprintt(c)\nprint(*h)", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\nmas = [[y1, x1], [y2, x2], [y3, x3]]\nmas.sort()\nfor i in range(3):\n    mas[i] = mas[i][::-1]\na = 0\nans = []\nfor i in range(mas[0][1], mas[1][1]):\n    a += 1\n    ans.append([mas[0][0], i])\nfor i in range(mas[2][1], mas[1][1], -1):\n    a += 1\n    ans.append([mas[2][0], i])\nyy = mas[1][1]\nmas.sort()\nfor i in range(mas[0][0], mas[2][0] + 1):\n    a += 1\n    ans.append([i, yy])\nprint(a)\nfor i in range(a):\n    print(*ans[i])", "def doWay(x, y, x1, y1, x2, y2):\n    nonlocal answer\n    while x < x1 and x < x2:\n        x += 1\n        answer.add((x, y))\n    while y < y1 and y < y2:\n        y += 1\n        answer.add((x, y))\n    while x > x1 and x > x2:\n        x -= 1\n        answer.add((x, y))\n    while y > y1 and y > y2:\n        y -= 1\n        answer.add((x, y))\n\n\nxy = list()\nxy.append(tuple(map(int, input().split())))\nxy.append(tuple(map(int, input().split())))\nxy.append(tuple(map(int, input().split())))\n\nanswer = set(xy)\ndoWay(xy[0][0], xy[0][1], xy[1][0], xy[1][1], xy[2][0], xy[2][1])\ndoWay(xy[1][0], xy[1][1], xy[0][0], xy[0][1], xy[2][0], xy[2][1])\ndoWay(xy[2][0], xy[2][1], xy[0][0], xy[0][1], xy[1][0], xy[1][1])\n\nprint(len(answer))\nfor x, y in answer:\n    print(x, y)", "points = []\nmx = 0\nfor i in range(3):\n    points.append(list(map(int, input().split())))\n\npoints = sorted(points, key=lambda x: x[0])\nk = 1\nx, y = points[0][0], points[0][1]\nx2, y2 = points[1][0], points[1][1]\ncoor = [[points[0][0], points[0][1]]]\nmx = y\nmn = y\nwhile True:\n    if x < x2:\n        x += 1\n    elif y < y2:\n        y += 1\n        mx = y\n    elif y > y2:\n        y -= 1\n        mn = y\n    else:\n        break\n    k+=1\n    coor.append([x, y])\nx3, y3 = points[2][0], points[2][1]\nif mn <= y3 <= mx:\n    y = y3\nelif y3 < mn:\n    y = mn\nelif y3 > mx:\n    y = mx\nwhile True:\n    if y < y3:\n        y += 1\n    elif y > y3:\n        y -= 1\n    elif x < x3:\n        x+=1\n    else:\n        break\n    k += 1\n    coor.append([x, y])\nprint(k)\nfor i in coor:\n    print(*i)", "def man_dist(a1, a2, b1, b2):\n    return int(abs(a1 - b1) + abs(a2, b2))\n\n\ndef print_md(ax, ay, bx, by):\n    ret = []\n    if ax > bx:\n        xz = ax\n        yz = ay\n        ax = bx\n        ay = by\n        bx = xz\n        by = yz\n    for i in range(ax + 1, bx):\n        ret.append([i, min(ay, by)])\n    if ay > by:\n        z = ax\n    else:\n        z = bx\n    for j in range(min(ay, by) + 1, max(ay, by)):\n        ret.append([z, j])\n    if ay > by:\n        ret.append([ax, by])\n    else:\n        ret.append([bx, ay])\n    return ret\n\n\nxa, ya = list(map(int, input().split()))\nxb, yb = list(map(int, input().split()))\nxc, yc = list(map(int, input().split()))\nif max(xb, xc) > xa > min(xb, xc) and max(yb, yc) > ya > max(yb, yc):\n    print(man_dist(xc, yc, xb, yb) - 2)\n    ans = []\n    for i in print_md(xb, yb, xa, ya):\n        ans.append(i)\n    for i in print_md(xa, ya, xc, yc):\n        if ans.count(i) == 0:\n            ans.append(i)\nelif max(xa, xc) > xb > min(xa, xc) and max(ya, yc) > yb > max(ya, yc):\n    print(man_dist(xa, ya, xc, yc) - 2)\n    xz = xa\n    yz = ya\n    xa = xb\n    ya = yb\n    xb = xz\n    yb = yz\n    ans = []\n    for i in print_md(xb, yb, xa, ya):\n        ans.append(i)\n    for i in print_md(xa, ya, xc, yc):\n        if ans.count(i) == 0:\n            ans.append(i)\nelif max(xa, xb) > xc > min(xa, xb) and max(ya, yb) > yc > max(ya, yb):\n    print(man_dist(xa, ya, xb, yb) - 2)\n    xz = xa\n    yz = ya\n    xa = xc\n    ya = yc\n    xc = xz\n    yc = yz\n    ans = []\n    for i in print_md(xb, yb, xa, ya):\n        ans.append(i)\n    for i in print_md(xa, ya, xc, yc):\n        if ans.count(i) == 0:\n            ans.append(i)\nelse:\n    if yb < yc and yb < ya:\n        xz = xb\n        yz = yb\n        xb = xc\n        yb = yc\n        xc = xz\n        yc = yz\n    elif ya < yc and ya < yb:\n        xz = xa\n        yz = ya\n        xa = xc\n        ya = yc\n        xc = xz\n        yc = yz\n    ans = print_md(xa, ya, xb, yb)\n    if xc < min(xa, xb):\n        for i in print_md(xc, yc, min(xa, xb), min(ya, yb)):\n            if ans.count(i) == 0:\n                ans.append(i)\n    elif xc > max(xa, xb):\n        for i in print_md(xc, yc, max(xa, xb), min(ya, yb)):\n            if ans.count(i) == 0:\n                ans.append(i)\n    else:\n        for i in print_md(xc, yc, xc, min(ya, yb)):\n            if ans.count(i) == 0:\n                ans.append(i)\nif ans.count([xa, ya]) == 0:\n    ans.append([xa, ya])\nif ans.count([xb, yb]) == 0:\n    ans.append([xb, yb])\nif ans.count([xc, yc]) == 0:\n    ans.append([xc, yc])\nprint(len(ans))\nfor i in ans:\n    print(i[0], i[1])\n", "def movetotochka(a, b, c, d):\n    x = a\n    y = b\n    if a > c:\n        while x != c:\n            print(x, y)\n            x -= 1\n    else:\n        while x != c:\n            print(x, y)\n            x += 1\n    if b > d:\n        while y != d:\n            print(x, y)\n            y -= 1\n    else:\n        while y != d:\n            print(x, y)\n            y += 1\n\n\na, b = list(map(int, input().split()))\nc, d = list(map(int, input().split()))\ne, f = list(map(int, input().split()))\ng = min(a, c, e)\nh = max(a, c, e)\nj = min(b, d, f)\nk = max(b, d, f)\nn1 = [a, c, e]\nn2 = [b, d, f]\nl = 0\nm = 0\nx = -1\ny = -1\nsumma = 10000000000\nfor i in range(3):\n    for i1 in range(3):\n        l = n1[i]\n        m = n2[i1]\n        n = abs(l - a) + abs(l - c) + abs(l - e) + abs(m - b) + abs(m - d) + abs(m -f)\n        if n < summa:\n            summa = n\n            x = l\n            y = m\nif x != -1 and y != -1:\n    print(summa + 1)\n    movetotochka(a, b, x, y)\n    movetotochka(c, d, x, y)\n    movetotochka(e, f, x, y)\n    print(x, y)\n", "x1,y1=list(map(int,input().split()))\nx2,y2=list(map(int,input().split()))\nx3,y3=list(map(int,input().split()))\nk=max(y1,y2,y3)+1-min(y1,y2,y3)+max(x1,x2,x3)-min(x1,x2,x3)\nm=[0,y1,y2,y3]\nm.sort()\nz=[0,x1,x2,x3]\nz.sort()\nprint(k)\nfor i in range(z[1],z[3]+1):\n    print(str(i)+' '+str(m[2]))\nfor i in range(m[2]+1,m[3]+1):\n    if m[3]==y3:\n          print(str(x3)+' '+str(i))\n    if m[3]==y2:\n          print(str(x2)+' '+str(i))\n    if m[3]==y1:\n          print(str(x1)+' '+str(i))\nfor i in range(m[1],m[2]):\n    if m[1]==y3:\n          print(str(x3)+' '+str(i))\n    if m[1]==y2:\n          print(str(x2)+' '+str(i))\n    if m[1]==y1:\n          print(str(x1)+' '+str(i))\n    \n        \n        \n        \n                \n        \n", "x_A, y_A = list(map(int, input().split()))\nx_B, y_B = list(map(int, input().split()))\nx_C, y_C = list(map(int, input().split()))\n\"\"\"\nWAY_X = max(x_A, x_B, x_C) - min(x_A, x_B, x_C) + 1\nWAY_y = max(y_A, y_B, y_C) - min(y_A, y_B, y_C) + 1\nif x_A == x_B == x_C or y_A == y_B == y_C:\n    cross = 0\nelif x_A == x_B or x_A == x_C or x_B == x_C:\n    cross = 1\nelif y_A == x_B or y_A == y_C or y_B == y_C:\n    cross = 1\nelse:\n    cross = 2\nprint(WAY_X, WAY_y, cross)\n\"\"\"\nif x_A >= x_B >= x_C:\n    x_A, x_B, x_C = x_C, x_B, x_A\n    y_A, y_B, y_C = y_C, y_B, y_A\nelif x_A >= x_C >= x_B:\n    x_A, x_B, x_C = x_B, x_C, x_A\n    y_A, y_B, y_C = y_B, y_C, y_A\nelif x_B >= x_A >= x_C:\n    x_A, x_B, x_C = x_C, x_A, x_B\n    y_A, y_B, y_C = y_C, y_A, y_B\nelif x_B >= x_C >= x_A:\n    x_A, x_B, x_C = x_A, x_C, x_B\n    y_A, y_B, y_C = y_A, y_C, y_B\nelif x_C >= x_A >= x_B:\n    x_A, x_B, x_C = x_B, x_A, x_C\n    y_A, y_B, y_C = y_B, y_A, y_C\npos_x, pos_y = x_A, min(y_A, y_B, y_C)\ncount = 0\nans = ''\nwhile pos_x < x_B:\n    ans += str(pos_x) + ' ' + str(y_A) + '\\n'\n    pos_x += 1\n    count += 1\nwhile pos_y <= max(y_C, y_A, y_B):\n    ans += str(x_B) + ' ' + str(pos_y) + '\\n'\n    pos_y += 1\n    count += 1\nwhile pos_x < x_C:\n    pos_x += 1\n    ans += str(pos_x) + ' ' + str(y_C) + '\\n'\n    count += 1\nprint(count)\nprint(ans[:-1])\n", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\n\n# base 1\nbase1 = {(x1, y1)}\nfor i in range(min(x2, x1), max(x2, x1) + 1):\n    base1.add((i, y1))\nfor i in range(min(x3, x1), max(x3, x1) + 1):\n    base1.add((i, y1))\n\nfor i in range(min(y2, y1), max(y2, y1) + 1):\n    base1.add((x2, i))\nfor i in range(min(y3, y1), max(y3, y1) + 1):\n    base1.add((x3, i))\n\n# base 2\nbase2 = {(x2, y2)}\nfor i in range(min(x2, x1), max(x2, x1) + 1):\n    base2.add((i, y2))\nfor i in range(min(x3, x2), max(x3, x2) + 1):\n    base2.add((i, y2))\n\nfor i in range(min(y2, y1), max(y2, y1) + 1):\n    base2.add((x1, i))\nfor i in range(min(y3, y2), max(y3, y2) + 1):\n    base2.add((x3, i))\n\n# base 3\nbase3 = {(x2, y2)}\nfor i in range(min(x3, x1), max(x3, x1) + 1):\n    base3.add((i, y3))\nfor i in range(min(x3, x2), max(x3, x2) + 1):\n    base3.add((i, y3))\n\nfor i in range(min(y3, y1), max(y3, y1) + 1):\n    base3.add((x1, i))\nfor i in range(min(y3, y2), max(y3, y2) + 1):\n    base3.add((x2, i))\n\nans = {}\nif len(base1) < len(base2):\n    ans = base1\nelse:\n    ans = base2\nif len(ans) > len(base3):\n    ans = base3\nprint(len(ans))\nfor i in ans:\n    print(*i)", "xa,ya = map(int,input().split())\nxb,yb = map(int,input().split())\nxc,yc = map(int,input().split())\nans = []\nxl = xb - xa\nxs = yb - ya\na = abs(xl)\nb = abs(xs)\nx,y = xa,ya\ndis = [[xa,ya],abs(xa-xc) + abs(ya-yc)]\nfor i in range(abs(xl) + abs(xs)):\n    if a > 0 and b > 0:\n        x1,y1 = x + xl//abs(xl),y\n        d1 = abs(x1-xc) + abs(y1 - yc)\n        x2,y2 = x, y + xs//abs(xs)\n        d2 = abs(x2-xc) + abs(y2 - yc)\n        if d1 < d2:\n            ans.append([x,y])\n            x,y = x1,y1\n            a = a - 1\n            if d1 < dis[1]:\n                dis = [[x,y],d1]\n        else:\n            ans.append([x,y])\n            b = b - 1\n            x,y = x2,y2\n            if d2 < dis[1]:\n                dis = [[x,y],d2]\n    elif a > 0:\n        x1,y1 = x + xl//abs(xl),y\n        d1 = abs(x1-xc) + abs(y1 - yc)\n        ans.append([x,y])\n        x,y = x1,y1\n        a = a - 1\n        if d1 < dis[1]:\n            dis = [[x,y],d1]\n    else:\n        x2,y2 = x, y + xs//abs(xs)\n        d2 = abs(x2-xc) + abs(y2 - yc)\n        ans.append([x,y])\n        b = b - 1\n        x,y = x2,y2\n        if d2 < dis[1]:\n            dis = [[x,y],d2]        \nans.append([x,y])\nxxl = xc - dis[0][0]\nxxs = yc - dis[0][1]\na = abs(xxl)\nb = abs(xxs)\nx,y = dis[0][0],dis[0][1]\nfor i in range(abs(xxl) + abs(xxs)):\n    if a > 0:\n        x,y = x + xxl//abs(xxl),y\n        a = a- 1\n        ans.append([x,y])\n    else:\n        x,y = x,y + xxs//abs(xxs)\n        b = b - 1\n        ans.append([x,y]) \nprint(len(ans))\nfor i in range(len(ans)):\n    print(*ans[i])", "def put(x1, y1, x2, y2):\n   mass2 = []\n   if y1 == y2:\n      for i in range(x1 + 1, x2):\n         mass2.append((i, y1))      \n   elif y2 > y1:\n      for i in range(x1 + 1, x2 + 1):\n         mass2.append((i, y1))\n      for i in range(y1 + 1, y2):\n         mass2.append((x2, i))  \n   else:\n      for i in range(x1 + 1, x2 + 1):\n         mass2.append((i, y1))\n      for i in range(y2 + 1, y1):\n         mass2.append((x2, i))      \n   return mass2\n\n\ndef best(x1, y1, x2, y2, x3, y3):\n   mass = []\n   mass += put(x1, y1, x2, y2)\n   if y2 > y1:\n      if y3 > y2:\n         mass += put(x2, y2, x3, y3)\n      elif y3 <= y2 and y3 >= y1:\n         mass += put(x2, y3, x3, y3)\n      else:\n         mass += put(x2, y1, x3, y3)\n   elif y2 == y1:\n      mass += put(x2, y2, x3, y3)\n   else:\n      if y3 > y1:\n         mass += put(x2, y1, x3, y3)\n      elif y3 <= y1 and y3 >= y2:\n         mass += put(x2, y3, x3, y3)\n      else:\n         mass += put(x2, y2, x3, y3) \n   for i in [(x1, y1), (x2, y2), (x3, y3)]:\n      if i not in mass:\n         mass.append(i)\n   print(len(mass))\n   for i in mass:\n      print(*i)\n   \n      \nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\na = [(x1, y1), (x2, y2), (x3, y3)]\na.sort()\nc = best(a[0][0], a[0][1], a[1][0], a[1][1], a[2][0], a[2][1])"]