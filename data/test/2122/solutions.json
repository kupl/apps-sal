["import sys\nimport heapq\nfrom collections import namedtuple\n\nRecord = namedtuple('Record', ['index', 'book_id'])\n\nl1 = sys.stdin.readline()\nl2 = sys.stdin.readline()\n\nn, k = list(map(int, l1.split(' ')))\nbooks = list(map(int, l2.split(' ')))\n\ncost = 0\ncache = set()\nprev = dict() # book_id -> index\nnext = [n+1] * n # index of next with the same value\ninactive_ids = set() # set of inactive object id()s\nbook_to_record = dict()\n\n\ndef serve_book(book_id, i):\n\tcache.add(book_id)\n\trecord = Record(-next[i], book_id)\n\theapq.heappush(h, record)\n\tbook_to_record[book_id] = record\n\nh = []\nfor i, book_id in enumerate(books):\n\tif book_id in prev:\n\t\tnext[prev[book_id]] = i\n\tprev[book_id] = i\n\nfor i, book_id in enumerate(books):\n\t# print(\"book_id=%s, h=%s, inactive=%s\" %(book_id, h, inactive_ids))\n\tif book_id in cache:\n\t\tprevious_record = book_to_record[book_id]\n\t\tinactive_ids.add(id(previous_record))\n\t\tserve_book(book_id, i)\n\t\t# print('--> Serve book from library ', book_id)\n\t\tcontinue\n\n\tif len(cache) < k:\n\t\tcost += 1\n\t\tserve_book(book_id, i)\n\t\t# print('--> Buy book', book_id)\n\t\tcontinue\n\n\twhile True:\n\t\titem = heapq.heappop(h)\n\t\tif id(item) in inactive_ids:\n\t\t\t# print(\"--> Ignore record\", item)\n\t\t\tinactive_ids.remove(id(item))\n\t\t\tcontinue\n\t\tcache.remove(item.book_id)\n\t\tserve_book(book_id, i)\n\t\tcost += 1\n\t\t# print('--> Throw away book', item.book_id)\n\t\t# print('--> Add book to libary', book_id)\n\t\tbreak\n\t# print(\"To evict %s\" % to_evict)\n\t\n\nprint(cost)\n\n\n\n", "# https://codeforces.com/problemset/problem/802/B\nimport heapq\n\nn, k  = map(int, input().split())\na     = list(map(int, input().split()))\nd     = {}\npos   = {}\nQ     = []\ncnt   = 0\n\nfor i, x in enumerate(a):\n    if x not in pos:\n        pos[x] = []\n    pos[x].append(i)\n    \nfor i, x in enumerate(a):\n   \n    if x not in d:\n        cnt += 1\n        \n        if len(d) == k:\n            pos_, x_ = heapq.heappop(Q)\n            del d[x_]\n        d[x] = 1\n        \n    pos[x].pop(0)\n    \n    if len(pos[x]) > 0:\n        heapq.heappush(Q, (-pos[x][0], x))\n    else:\n        heapq.heappush(Q, (-float('inf'), x))   \n        \nprint(cnt)        "]