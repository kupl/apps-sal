["n = int(input())\nA = list(map(int, input().split()))\nm = int(input())\nB = list(map(int, input().split()))\nprint(max(A), max(B))", "import getpass\nimport sys\n\nif getpass.getuser() != 'frohenk':\n    filename = 'half'\n    # sys.stdin = open('input.txt')\n    # sys.stdout = open('output.txt', 'w')\nelse:\n    sys.stdin = open('input.txt')\n    # sys.stdin.close()\n\nimport math\nimport string\nimport re\nimport random\nfrom decimal import Decimal, getcontext\nfrom collections import deque\n\nmod = 10 ** 9 + 7\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\nn=ria()[0]\na=max(ria())\nn=ria()[0]\nb=max(ria())\nprint(a,b)", "def mp():\n    return map(int, input().split())\n\nn = int(input())\na = list(mp())\nm = int(input())\nb = list(mp())\nprint(max(a), max(b))", "n = int(input())\na = list(map(int, input().split()))\nn = int(input())\nb = list(map(int, input().split()))\nprint(max(a), max(b))", "n = int(input())\na = [int(x) for x in input().split()]\nm = int(input())\nb = [int(x) for x in input().split()]\na.sort()\nb.sort()\nprint(a[-1], b[-1])", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Jul 14 12:40:58 2019\n\n@author: Hamadeh\n\"\"\"\nclass cinn:\n    def __init__(self):\n        self.x=[]\n    def cin(self,t=int):\n        if(len(self.x)==0):\n            a=input()\n            self.x=a.split()\n            self.x.reverse()\n        return self.get(t)\n    def get(self,t):\n        return t(self.x.pop())\n    def clist(self,n,t=int): #n is number of inputs, t is type to be casted\n        l=[0]*n\n        for i in range(n):\n            l[i]=self.cin(t)\n        return l\n    def clist2(self,n,t1=int,t2=int,t3=int,tn=2):\n        l=[0]*n\n        for i in range(n):\n            if(tn==2):\n                a1=self.cin(t1)\n                a2=self.cin(t2)\n                l[i]=(a1,a2)\n            elif (tn==3):\n                a1=self.cin(t1)\n                a2=self.cin(t2)\n                a3=self.cin(t3)\n                l[i]=(a1,a2,a3)\n        return l\n    def clist3(self,n,t1=int,t2=int,t3=int):\n        return self.clist2(self,n,t1,t2,t3,3)\n    def cout(self,i,ans=''):   \n        if(ans==''):\n            print(\"Case #\"+str(i+1)+\":\", end=' ')\n        else:\n            print(\"Case #\"+str(i+1)+\":\",ans)\n    def printf(self,thing):\n        print(thing,end='')\n    def countlist(self,l,s=0,e=None):\n        if(e==None):\n            e=len(l)\n        dic={}\n        for el in range(s,e):\n            if l[el] not in dic:\n                dic[l[el]]=1\n            else:\n                dic[l[el]]+=1\n        return dic\n    def talk (self,x):\n        print(x,flush=True)\n    def dp1(self,k):\n        L=[-1]*(k)\n        return L\n    def dp2(self,k,kk):\n        L=[-1]*(k)\n        for i in range(k):\n            L[i]=[-1]*kk\n        return L\n    def isprime(self,n):\n        if(n==1 or n==0):\n            return False\n        for i in range(2,int(n**0.5+1)):\n            if(n%i==0):\n                return False\n        return True\n    def factors(self,n):    \n        from functools import reduce\n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    def nthprime(self,n):\n        #usable up to 10 thousand\n        i=0\n        s=2\n        L=[]\n        while(i<n):\n            while(not self.isprime(s)):\n                s+=1\n            L.append(s)\n            s+=1\n            i+=1\n        return L\n    def matrixin(self,m,n,t=int):\n        L=[]\n        for i in range(m):\n            p=self.clist(n,t)\n            L.append(p)\n        return L\n    def seive(self,k):\n        #1000000 tops\n        n=k+1\n        L=[True]*n\n        L[1]=False\n        L[0]=False\n        for i in range(2,n):\n            if(L[i]==True):\n                for j in range(2*i,n,i):\n                    L[j]=False\n        return L\n    def seiven(self,n,L):\n        i=0\n        for j in range(len(L)):\n            if(L[j]==True):\n                i+=1\n            if(i==n):\n                return j\n    def matrixin2(self,m,t=int):\n        L=[]\n        for i in range(m):\n            iny=self.cin(str)\n            lsmall=[]\n            for el in iny:\n                lsmall.append(t(el))\n            L.append(lsmall)\n        return L\ndef rotcord(i,j,n):\n    return (j,n-i-1)\ndef rotbje(k):\n    if(k==\".\"):\n        return k\n    ar=['>','v','<','^']\n    return ar[(ar.index(k)+1)%4]\n\nc=cinn()\nn=c.cin()\na=c.clist(n)\na.sort()\ny=a[n-1]\nx=c.cin()\nb=c.clist(x)\nb.sort()\nf=b[x-1]\nprint(y,f)\n        \n    ", "import sys\ninput = lambda: sys.stdin.readline().strip()\n\nn = int(input())\nm1 = max(list(map(int, input().split())))\nn = int(input())\nm2 = max(list(map(int, input().split())))\nprint(m1, m2)\n", "#Bhargey Mehta (Junior)\n#DA-IICT, Gandhinagar\nimport sys, math, queue\n#sys.stdin = open('input.txt', 'r')\nMOD = 998244353\nsys.setrecursionlimit(1000000)\n\nn = int(input())\na = list(map(int, input().split()))\nm = int(input())\nb = list(map(int, input().split()))\nprint(max(a), max(b))", "n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nb = list(map(int, input().split()))\n\nprint(max(a), max(b))\n", "R = lambda: map(int, input().split())\nn = int(input())\nA = sorted(R())\nm = int(input())\nB = sorted(R())\nprint(A[n-1],B[m-1])", "_=input()\na=list(map(int,input().split()))\n_=input()\nb=list(map(int,input().split()))\na.sort()\nb.sort()\nprint(a[-1],b[-1])", "n = int(input())\na = sorted(list(map(int, input().split())))\nm = int(input())\nb = sorted(list(map(int, input().split())))\n\nprint(a[-1], b[-1])\n\n", "#\n# Yet I'm feeling like\n# \tThere is no better place than right by your side\n# \t\tI had a little taste\n# \t\t\tAnd I'll only spoil the party anyway\n# \t\t\t\t'Cause all the girls are looking fine\n# \t\t\t\t\tBut you're the only one on my mind\n\n\nimport sys\nimport re\n# inf = float(\"inf\")\n#sys.setrecursionlimit(1000000)\n\n# abc='abcdefghijklmnopqrstuvwxyz'\n# abd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n# mod,MOD=1000000007,998244353\n# vow=['a','e','i','o','u']\n# dx,dy=[-1,1,0,0],[0,0,1,-1]\n\n# from cmath import sqrt\nfrom collections import deque, Counter, OrderedDict,defaultdict\nfrom heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n# from math import ceil,floor,log,sqrt,factorial,pow,pi,gcd,log10,atan,tan\nfrom bisect import bisect_left,bisect_right\n# import numpy as np\n\ndef dfs(curr,parent):\n    visited[curr]=True\n    value[curr]+=value[parent]\n    for i in mydict[curr]:\n        if not visited[i]:\n            dfs(i,curr)\n\n\ndef get_array(): return list(map(int , sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\nn=int(input())\nA=get_array()\nA.sort()\nm=int(input())\nB=get_array()\nB.sort()\nprint(A[-1],B[-1])", "n=int(input())\narr1=list(map(int,input().split()))\nm=int(input())\narr2=list(map(int,input().split()))\narr1.sort()\narr2.sort()\nprint(arr1[-1],arr2[-1])\n", "n=int(input())\na=list(map(int,input().split()))\nm=int(input())\nb=list(map(int,input().split()))\nprint(max(a),max(b))\n", "n = int(input())\na = list(map(int, input().split()))\na.sort()\nm = int(input())\nb = list(map(int, input().split()))\nb.sort()\nprint(a[-1], b[-1])", "n=int(input())\na=[int(x) for x in input().split()]\nm=int(input())\nb=[int(x) for x in input().split()]\nprint(max(a),end=\" \")\nprint(max(b))", "wyn = 0\nfor i in range(2):\n\tn = int(input())\n\tl = list(map(int,input().split()))\n\tprint(max(l), end = \" \")"]