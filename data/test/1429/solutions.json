["import sys\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef main():\n    N, S = input().split()\n    N = int(N)\n    ans = 0\n\n    for i in range(N):\n        a = 0\n        c = 0\n        for j in range(i, N):\n            if S[j] == \"A\":\n                a += 1\n            elif S[j] == \"T\":\n                a -= 1\n            elif S[j] == \"C\":\n                c += 1\n            else:\n                c -= 1\n\n            if a == c == 0:\n                ans += 1\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,s = input().split()\nn = int(n)\n\ncnt = {}\nat = 0\ngc = 0\nans = 0\ncnt[(0,0)] = 1\n\nfor si in s:\n    if si == \"A\":\n        at += 1\n    elif si==\"T\":\n        at -= 1\n    elif si==\"G\":\n        gc += 1\n    else:\n        gc -= 1\n    if (at,gc) in cnt:\n        ans += cnt[(at,gc)]\n        cnt[(at,gc)] += 1\n    else:\n        cnt[(at,gc)] = 1\nprint(ans)", "import sys\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\nN,S = LS()\nans = 0\nfor i in range(int(N)):\n    S1 = S[i:]\n    a,g = 0,0\n    for s in S1:\n        if s=='A':\n            a+= 1\n        elif s=='G':\n            g += 1\n        elif s=='C':\n            g -= 1\n        elif s=='T':\n            a-=1\n        if a==g==0:\n            ans += 1\nprint(ans)\n", "import itertools\nN,S = input().split()\nN = int(N)\nAT = [0]*N\nCG = [0]*N\nfor i in  range(N):\n    if S[i]=='A':\n        AT[i]=1\n    if S[i]=='T':\n        AT[i]=-1\n    if S[i]=='C':\n        CG[i]=1\n    if S[i]=='G':\n        CG[i]=-1\nAT = [0] + AT\nCG = [0] + CG\nATC = list(itertools.accumulate(AT))\nCGC = list(itertools.accumulate(CG))\nans = 0\nfor i in range(N):\n    for j in range(i+1,N):\n        if ATC[i]==ATC[j+1] and CGC[i]==CGC[j+1]:\n            ans+=1\nprint(ans)\n", "def main():\n    n,s = input().split()\n\n    ans = 0\n\n    # \u6587\u5b57\u5217\u306e\u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\n    for i in range(int(n)):\n        at_cnt = 0\n        gc_cnt = 0\n        for si in s[i:int(n)]:\n            if si == 'A':\n                at_cnt+=1\n            elif si == 'T':\n                at_cnt-=1\n            elif si == 'C':\n                gc_cnt+=1\n            elif si == 'G':\n                gc_cnt-=1\n\n            if at_cnt == 0 and gc_cnt == 0:\n                ans += 1\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# \u5404\u533a\u753bT\u304c\u81ea\u5206\u81ea\u8eab\u3092\u4e26\u3079\u66ff\u3048\u305f\u6587\u5b57\u5217\u3068\u76f8\u88dc\u7684\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3066\u3044\u304f\u3002\n\nn,s=input().split()\nN=int(n)\nS=list(s)\nA=[0 for _ in range(N)]\nG=[0 for _ in range(N)]\nC=[0 for _ in range(N)]\nT=[0 for _ in range(N)]\n\nfor i in range(N):\n    if S[i]==\"A\":\n        A[i]=1\n    elif S[i]==\"G\":\n        G[i]=1\n    elif S[i]==\"C\":\n        C[i]=1\n    elif S[i]==\"T\":\n        T[i]=1\n\n\nans=0\nfor i in range(N):\n    Asum=0\n    Gsum=0\n    Tsum=0\n    Csum=0\n    for j in range(i,N):\n        Asum+=A[j]\n        Gsum+=G[j]\n        Csum+=C[j]\n        Tsum+=T[j]\n        if Asum==Tsum and Csum==Gsum:\n            ans+=1\n\nprint(ans)\n\n", "from collections import defaultdict\nN, S = input().split()\nN = int(N)\n\ncnt = defaultdict(int)\nanswer = 0\nfor i in range(N):\n    for s in \"AGCT\":\n        cnt[s] = 0\n    for j in range(i + 1, N, 2):\n        cnt[S[j - 1]] += 1\n        cnt[S[j]] += 1\n        if cnt[\"A\"] == cnt[\"T\"] and cnt[\"C\"] == cnt[\"G\"]: answer += 1\n        #print(cnt)\n        \nprint(answer)", "N,S=input().split()\nN=int(N)\nleft_AT_number=[0]*(N+1)\nleft_CG_number=[0]*(N+1)\nAT=0\nCG=0\nfor j in range(N):\n    if S[j]==\"A\":\n        AT+=1\n    elif S[j]==\"T\":\n        AT-=1\n    elif S[j]==\"C\":\n        CG+=1\n    else:\n        CG-=1\n    left_AT_number[j+1]=AT\n    left_CG_number[j+1]=CG\nans=0\ni_CG=0\ni_AT=0\nfor i in range(N):\n    i_CG=left_CG_number[i]\n    i_AT=left_AT_number[i]\n    for k in range(i+1,N+1):\n        if i_CG-left_CG_number[k]==0 and i_AT-left_AT_number[k]==0:\n            #print(i,k)\n            ans+=1\nprint(ans)", "n, s = input().split()\nn = int(n)\nans = 0\nAT, GC = 0, 0\ncnt = {}\ncnt[(0, 0)] = 1\nfor i in s:\n\n    if i == \"A\":\n        AT += 1\n    elif i == \"T\":\n        AT -= 1\n    elif i == \"G\":\n        GC += 1\n    elif i == \"C\":\n        GC -= 1\n    if (AT, GC) in cnt:\n        ans += cnt[(AT, GC)]\n        cnt[(AT, GC)] += 1\n    else:\n        cnt[(AT, GC)] = 1\n    #print(cnt, ans)\nprint(ans)\n", "from collections import *\nn, s = input().split()\nx = y = r = 0\nd = Counter()\nfor c in s:\n    d[x,y] += 1\n    if c == 'A':\n        x += 1\n    elif c == 'T':\n        x -= 1\n    elif c == 'C':\n        y += 1\n    elif c == 'G':\n        y -= 1\n    r += d[x,y]\nprint(r)", "# \u554f\u984c\u6587\u306e\u610f\u5473\u306f\u307e\u3063\u305f\u304f\u308f\u304b\u3089\u3093\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u90e8\u5206\u5217\u3067A\u3068T\u306e\u6570\u304a\u3088\u3073C\u3068G\u306e\u6570\u304c\u540c\u3058\u3068\u3053\u308d\u306e\u6570\u3001\u3063\u3066\u3053\u3068\uff1f\nline = input().split()\nn, s = int(line[0]), list(line[1])\nans = 0\nfor i in range(n - 1):\n    d = {\"A\": 0, \"T\": 0, \"C\": 0, \"G\": 0}\n    d[s[i]] += 1\n    for j in range(i + 1, n):\n        d[s[j]] += 1\n        if d[\"A\"] == d[\"T\"] and d[\"C\"] == d[\"G\"]:\n            ans += 1\nprint(ans)\n", "n,s = input().split()\nn = int(n)\n\nans = 0\n\nfor i in range(n):\n  d = {\"A\":0,\"T\":0,\"G\":0,\"C\":0,}\n  for j in range(i,n):\n    d[s[j]] += 1\n    \n    if d[\"A\"] == d[\"T\"] and d[\"G\"] == d[\"C\"]:\n      ans += 1\n      \nprint(ans)", "from collections import defaultdict\nN,s=input().split()\nn=int(N)\n\nans=0\nfor i in range(n):\n    dic=defaultdict(int)\n    for j in range(i,n):\n        dic[s[j]]+=1\n        if dic['A']==dic['T'] and dic['G']==dic['C']:\n            ans+=1\n\nprint(ans)", "def main():\n    n,s = input().split()\n    n = int(n)\n    ans = 0\n    for i in range(n):\n        at=gc=0\n        for si in s[i:]:\n            if si==\"A\":\n                at += 1\n            elif si==\"T\":\n                at -= 1\n            elif si==\"C\":\n                gc -= 1\n            else:\n                gc += 1\n            if at==0 and gc==0:\n                ans += 1\n    print(ans)\n\nmain()", "from itertools import combinations,permutations,combinations_with_replacement,product,accumulate\nn,s=input().split()\nn=int(n)\na=[0]*n\nt=[0]*n\ng=[0]*n\nc=[0]*n\nfor i in range(n):\n    if s[i]==\"A\":\n        a[i]+=1\n    elif s[i]==\"T\":\n        t[i]+=1\n    elif s[i]==\"G\":\n        g[i]+=1\n    else:\n        c[i]+=1\na=[0]+list(accumulate(a))\nt=[0]+list(accumulate(t))\ng=[0]+list(accumulate(g))\nc=[0]+list(accumulate(c))\nans=0\nfor i in range(1,n+1):\n    for j in range(i+1,n+1,2):\n        if (a[j]-a[i-1] == t[j]-t[i-1]) and (g[j]-g[i-1] == c[j]-c[i-1]):\n            ans+=1\nprint(ans)", "from collections import defaultdict as dd\nn,s = (i for i in input().split())\nn,ans = int(n),0\nx,d = [[0]*2 for i in range(n+1)],dd(int)\nfor i in range(n):\n    for j in range(2): x[i+1][j] = x[i][j]\n    if s[i]==\"A\": x[i+1][0] = x[i][0]+1\n    elif s[i]==\"T\": x[i+1][0] = x[i][0]-1\n    elif s[i]==\"C\": x[i+1][1] = x[i][1]+1\n    else: x[i+1][1] = x[i][1]-1\nfor i,j in x:\n    z = str(i)+\" \"+str(j)\n    d[z]+=1\nfor i in d.values(): ans+=i*(i-1)//2\nprint(ans)", "N,S=list(map(str,input().split()))\nN=int(N)\n\nans=0\nfor i in range(N):\n  A = {\"A\":0,\"T\":0,\"G\":0,\"C\":0}\n  for j in range(i,N):\n    A[S[j]]+=1\n    if A[\"A\"]==A[\"T\"] and A[\"G\"]==A[\"C\"]:\n      ans+=1\nprint(ans)\n", "N, S = input().split()\nN = int(N)\n\nAT = [0] * (N+1)\nCG = [0] * (N+1)\n\nfor n in range(N):\n    if S[n] == \"A\":\n        AT[n+1] = 1\n    if S[n] == \"T\":\n        AT[n+1] = -1\n    if S[n] == \"C\":\n        CG[n+1] = 1\n    if S[n] == \"G\":\n        CG[n+1] = -1\n\n\nfor n in range(1, N+1):\n    AT[n] += AT[n-1]\n    CG[n] += CG[n-1]\n\nans = 0\n\nfor i in range(N):\n    for j in range(i+2, N+1, 2):\n        at = AT[j] - AT[i]\n        cg = CG[j] - CG[i]\n        if at == 0 and cg == 0:\n            ans += 1\n\nprint(ans)\n", "N,s=input().split()\nn=int(N)\n\nans=0\nfor i in range(n):\n    dic={'A':0,'T':0,'G':0,'C':0}\n    for j in range(i,n):\n        dic[s[j]]+=1\n        if dic['A']==dic['T'] and dic['G']==dic['C']:\n            ans+=1\n\nprint(ans)", "N,S=input().split()\nN=int(N)\nans=0\nt={}\nt[(0,0)]=1\na,b=0,0\nfor c in S:\n  if c == 'A':\n    a+=1\n  elif c == 'T':\n    a-=1\n  elif c == 'C':\n    b+=1\n  else:\n    b-=1\n  if (a,b) in t:\n    ans+=t[(a,b)]\n    t[(a,b)]+=1\n  else:\n    t[(a,b)]=1\nprint(ans)", "#region Header\n#!/usr/bin/env python3\n# from typing import *\n\nimport sys\nimport io\nimport math\nimport collections\nimport decimal\nimport itertools\nfrom queue import PriorityQueue\nimport bisect\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\nsys.setrecursionlimit(1000000)\n#endregion\n\n# _INPUT = \"\"\"10 AAATACCGCG\n# \"\"\"\n# sys.stdin = io.StringIO(_INPUT)\n\n\n\n# def solve(N: int, S: str) -> int:\ndef solve(N, S):\n    # count_a = [0 for _ in range(N+1)]\n    # count_g = [0 for _ in range(N+1)]\n    # count_c = [0 for _ in range(N+1)]\n    # count_t = [0 for _ in range(N+1)]\n    # for i in range(1, N + 1):\n    #     count_a[i] = count_a[i-1]\n    #     count_g[i] = count_g[i-1]\n    #     count_c[i] = count_c[i-1]\n    #     count_t[i] = count_t[i-1]\n    #     if S[i-1] == 'A':\n    #         count_a[i] += 1\n    #     elif S[i-1] == 'G':\n    #         count_g[i] += 1\n    #     elif S[i-1] == 'C':\n    #         count_c[i] += 1\n    #     elif S[i-1] == 'T':\n    #         count_t[i] += 1\n\n    # i\u6587\u5b57\u76ee\u304b\u3089j\u6587\u5b57\u76ee\u307e\u3067\u306e\uff08A\u306e\u6570\uff09=\uff08T\u306e\u6570\uff09and\uff08C\u306e\u6570\uff09=\uff08G\u306e\u6570\uff09\u3068\u306a\u308b (i,j)\n    n = 0\n    for i in range(-1, N-1):\n        count_a = 0\n        count_g = 0\n        count_c = 0\n        count_t = 0\n        for j in range(i+1, N):\n            if S[j] == 'A':\n                count_a += 1\n            elif S[j] == 'G':\n                count_g += 1\n            elif S[j] == 'C':\n                count_c += 1\n            elif S[j] == 'T':\n                count_t += 1\n            if (count_a == count_t) and (count_c == count_g):\n                n += 1\n\n    return n\n\n\ndef main():\n    N, S = input().split()\n    N = int(N)\n    a = solve(N, S)\n    print(a)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,s = input().split()\nn = int(n)\nans = 0\n\nfor i in range(n):\n    AT,GC=0,0\n    for j in range(i,n):\n        if s[j]=='A':\n            AT+=1\n        if s[j]=='T':\n            AT-=1 \n        if s[j]=='G':\n            GC+=1  \n        if s[j]=='C':\n            GC-=1\n        if AT==0 and GC==0:\n            ans+=1\nprint(ans) \n", "n, s = input().split()\nn = int(n)\nans = 0\nAT, GC = 0, 0\ncnt = {}\ncnt[(0, 0)] = 1\nfor i in s:\n\n    if i == \"A\":\n        AT += 1\n    elif i == \"T\":\n        AT -= 1\n    elif i == \"G\":\n        GC += 1\n    elif i == \"C\":\n        GC -= 1\n    if (AT, GC) in cnt:\n        ans += cnt[(AT, GC)]\n        cnt[(AT, GC)] += 1\n    else:\n        cnt[(AT, GC)] = 1\n    #print(cnt, ans)\nprint(ans)\n", "from collections import Counter\nn, s = input().split()\nn = int(n)\n\nd = {'A': (0, +1), 'T': (0, -1), 'G': (+1, 0), 'C': (-1, 0)}\n\ncs = [(0, 0)] * (n + 1)\nfor i in range(n):\n    a1, b1 = cs[i]\n    a2, b2 = d[s[i]]\n    cs[i + 1] = (a1 + a2, b1 + b2)\n\ncnt = Counter(cs)\nans = sum(m * (m - 1) // 2 for m in list(cnt.values()))\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10**6)\n\ndef inp():\n    return int(input())\ndef inps():\n    return input().rstrip()\ndef inpl():\n    return list(map(int, input().split()))\ndef inpls():\n    return list(map(str, input().split()))\n\n# import decimal\n# from decimal import Decimal\n# decimal.getcontext().prec = 10\n\n# from heapq import heappush, heappop, heapify\n# import math\nfrom math import gcd, floor, ceil, factorial\nimport itertools as it\nfrom collections import deque, defaultdict\nfrom collections import Counter\n\ndef lcd(a, b):\n    return a * b // gcd(a, b)\n\ndef chmin(dp, i, x):\n    if x < dp[i]: dp[i] = x; return True\n    return False\n\ndef chmax(dp, i, x): \n    if x > dp[i]: dp[i] = x; return True\n    return False\n\n# ---------------------------------------\n\nN, S = input().split()\nN = int(N)\nS = S.rstrip()\n\nA = [0] * (N + 1)\nT = [0] * (N + 1)\nC = [0] * (N + 1)\nG = [0] * (N + 1)\nfor i in range(N):\n    s = S[i]\n    A[i+1] = A[i] + (1 if s == \"A\" else 0)  \n    T[i+1] = T[i] + (1 if s == \"T\" else 0)\n    C[i+1] = C[i] + (1 if s == \"C\" else 0)\n    G[i+1] = G[i] + (1 if s == \"G\" else 0)\n\nans = 0\nfor i in range(N):\n    j = i + 2\n    while j <= N:\n        if A[j] - A[i] == T[j] - T[i] and C[j] - C[i] == G[j] - G[i]:\n            ans += 1\n        j += 2\n            \nprint(ans)\n", "def hoge():\n  N,S = input().split()\n  N = int(N)\n  ans = 0\n  for i in range(N):\n    at,cg = 0,0\n    for j in range(i,N):\n      X = S[j]\n      if X == 'A':\n        at += 1\n      elif X == 'T':\n        at -= 1\n      elif X == 'C':\n        cg += 1\n      else:\n        cg -= 1\n      if at == 0 and cg == 0:\n        ans += 1\n  print(ans)\nhoge()", "n,s=input().split()\nn=int(n)\n\nans=0\nfor i in range(n):\n  c1,c2=0,0\n  for j in range(i,n):\n    if s[j]=='A':\n      c1+=1\n    elif s[j]=='T':\n      c1-=1\n    elif s[j]=='C':\n      c2+=1\n    elif s[j]=='G':\n      c2-=1\n    if c1==c2==0:\n      ans+=1\nprint(ans)", "from collections import Counter\n\nn, s = input().split()\nn = int(n)\n\nd = Counter()\n\nat, cg = 0, 0\nd[(at, cg)] = 1\nans = 0\n\nfor x in s:\n    if x == \"A\":\n        at += 1\n    elif x == \"T\":\n        at -= 1\n    elif x == \"C\":\n        cg += 1\n    else:\n        cg -= 1\n    ans += d[(at, cg)]\n    d[(at, cg)] += 1\nprint(ans)", "import collections\n\nn,s = map(str, input().split())\n\nans = 0\nfor i in range(int(n)):\n    cnt = {'A': 0, 'T': 0, 'G': 0, 'C': 0}\n    cnt[s[i]] += 1\n    for j in range(i+1, int(n)):\n        cnt[s[j]] += 1\n        if cnt['A'] == cnt['T'] and cnt['C'] == cnt['G']:\n            ans += 1\nprint(ans)", "# editorial\n\nn, s = input().split()\nn = int(n)\n\nans = 0\nfor start_ind in range(n):\n    a_vs_t = 0\n    g_vs_c = 0\n    for endInd in range(start_ind, n):\n        # print(start_ind, endInd)\n\n        if s[endInd] == 'A':\n            a_vs_t += 1\n        elif s[endInd] == 'T':\n            a_vs_t -= 1\n        elif s[endInd] == 'G':\n            g_vs_c += 1\n        else:\n            g_vs_c -= 1\n\n        if a_vs_t == 0 and g_vs_c == 0:\n            ans += 1\n\nprint(ans)\n", "N,S=input().split()\nN=int(N)\nresult=0\nfor i in range(N):\n  a,b=0,0\n  for c in S[i:]:\n    if c == 'A':\n      a += 1\n    elif c == 'T':\n      a -= 1\n    elif c== 'C':\n      b += 1\n    else:\n      b -= 1\n    if a==0 and b==0:\n      result += 1\nprint(result)    ", "N, S = input().split()\nN = int(N)\n\ncount = 0\nfor i in range(N):\n    num_A = num_T = num_C = num_G = 0\n    for char in S[i:N]:\n        if char == \"A\":\n            num_A += 1\n        elif char == \"T\":\n            num_T += 1\n        elif char == \"C\":\n            num_C += 1\n        else:\n            num_G += 1\n        if num_A == num_T and num_C == num_G:\n            count += 1\n\nprint(count)\n", "import collections\ng = input().split()\nN = int(g[0])\nl = g[1]\nS = [[0,0,0,0] for i in range(N+1)]\ndic = {\"A\":0,\"T\":1,\"C\":2,\"G\":3}\nX = [[0,0] for i in range(N+1)]\nX[0] = tuple(X[0])\nfor i in range(1,N+1):\n    S[i] = S[i-1].copy()\n    S[i][dic[l[i-1]]] += 1\n    X[i][0] = S[i][0]-S[i][1]\n    X[i][1] = S[i][2]-S[i][3]\n    X[i] = tuple(X[i])\n    #print(str(S[i]) + \" \" + str(X[i]))\nD = collections.Counter(X)\n#print(D)\nans = 0\nfor v in D.values():\n    ans += v*(v-1)//2\nprint(ans)", "N,S = list(map(str,input().split()))\nN = int(N)\nans = 0\n\nfor i in range(N):\n  c1 = 0\n  c2 = 0\n  for j in range(i,N):\n    if S[j] == \"A\":\n      c1+=1\n    elif S[j] == \"T\":\n      c1-=1\n    elif S[j] == \"G\":\n      c2+=1\n    else:\n      c2-=1\n    if c1 == 0 and c2 == 0:\n      ans += 1\nprint(ans)\n", "n, sl = map(str,input().split())\nsl = list(sl)\nn = int(n)\natl = [0]\ncgl = [0]\nat = 0\ncg = 0\nfor s in sl:\n    if s == \"A\":\n        at += 1\n    elif s == \"T\":\n        at -= 1\n    elif s == \"C\":\n        cg += 1\n    else:\n        cg -= 1\n    atl.append(at)\n    cgl.append(cg)\n\nans = 0\nfor i in range(n+1):\n    for j in range(i+1, n+1):\n        if atl[j] == atl[i] and cgl[j] == cgl[i]:\n            ans += 1\n\nprint(ans)", "_,S = input().split()\nN = len(S)\n\nans = 0\nfor i in range(0,N-1):\n    AT = 0\n    CG = 0\n    if S[i] == 'A':\n        AT += 1\n    elif S[i] == 'T':\n        AT -= 1\n    elif S[i] == 'C':\n        CG += 1\n    elif S[i] == 'G':\n        CG -= 1\n    # print(AT,CG)\n    for j in range(i+1,N):\n        if S[j] == 'A':\n            AT += 1\n        elif S[j] == 'T':\n            AT -= 1\n        elif S[j] == 'C':\n            CG += 1\n        elif S[j] == 'G':\n            CG -= 1\n        if AT == 0 and CG == 0:\n            ans += 1\n        # print(S[i:j+1],AT,CG,ans)\n            \nprint(ans)", "n,s=input().split()\nn=int(n)\nans=0\nfor i in range(n):\n    a,t,g,c=0,0,0,0\n    for j in range(i,n):\n        if s[j]==\"A\":\n            a+=1\n        elif s[j]==\"T\":\n            t+=1\n        elif s[j]==\"G\":\n            g+=1\n        else:\n            c+=1\n        if a==t and g==c:\n            ans+=1\nprint(ans)", "n,s = input().split()\nn = (int)(n)\nat = [0] * (n + 1)\ncg = [0] * (n + 1)\nfor i in range(n):\n    AT = 0\n    CG = 0\n    if s[i] == 'A':\n        AT = 1\n    elif s[i] == 'T':\n        AT = -1\n    elif s[i] == 'C':\n        CG = 1\n    else:\n        CG = -1\n    at[i + 1] = at[i] + AT\n    cg[i + 1] = cg[i] + CG\nans = 0\nfor i in range(n):\n    for j in range(i + 1,n + 1):\n        AT = at[j] - at[i]\n        CG = cg[j] - cg[i]\n        if AT == 0 and CG == 0:\n            ans += 1\nprint(ans)", "#def main\u3067\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3092\u6271\u3048\u3070\u65e9\u304f\u306a\u308b\u3089\u3057\u3044\n#\u30a4\u30f3\u30c7\u30f3\u30c8\u30df\u30b9\u3057\u307e\u304f\u308a\u307e\u3057\u305f\n\ndef main():\n    l = list(input().split())\n    word = list(l[1])\n    count = 0\n    for i in range(int(l[0])):\n        at_num = 0\n        cg_num = 0\n        for j in word[i:int(l[0])]:\n            if j == \"A\":\n                at_num += 1\n            elif j == \"T\":\n                at_num -= 1\n            elif j == \"G\":\n                cg_num += 1\n            elif j == \"C\":\n                cg_num -= 1\n            \n            if at_num == 0 and cg_num == 0:\n                count += 1\n    print(count)\n        \n        \n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nfrom collections import *\ninput = sys.stdin.readline\n\nn, s = input().split()\nx = y = r = 0\nd = Counter()\nfor c in s:\n    d[x,y] += 1\n    if c == 'A':\n        x += 1\n    elif c == 'T':\n        x -= 1\n    elif c == 'C':\n        y += 1\n    elif c == 'G':\n        y -= 1\n    r += d[x,y]\n    \nprint(r)\n", "N, S = input().split()\nN = int(N) + 1\nans = 0\nfor i in range(N):\n    counts = {base: 0 for base in \"ATGC\"}\n    for j in range(i + 2, N, 2):\n        counts[S[j - 2]] += 1\n        counts[S[j - 1]] += 1\n        if counts[\"A\"] == counts[\"T\"] and counts[\"G\"] == counts[\"C\"]:\n            ans += 1\nprint(ans)", "n, s = input().split()\nans = 0\nfor j in range(int(n)):\n    c1, c2 = 0, 0\n    for i in range(j, int(n)):\n        if s[i] == 'T': c1 += 1\n        elif s[i] == 'A': c1 -= 1\n        elif s[i] == 'C': c2 += 1\n        else: c2 -= 1\n        if c1 == 0 and c2 == 0: ans += 1\nprint(ans)", "N, S = map(str, input().split())\nN = int(N)\n\nans = 0\nfor i in range(N):\n    a = 0\n    t = 0\n    c = 0\n    g = 0\n    for j in range(i, N):\n        if S[j] == \"A\":\n            a += 1\n        elif S[j] == \"T\":\n            t += 1\n        elif S[j] == \"C\":\n            c += 1\n        else:\n            g += 1\n\n        if a == t and c == g:\n            ans += 1\n\nprint(ans)", "n, s = list(map(str, input().split()))\nn = int(n)\nans = 0\nfor i in range(n):\n    at, cg = 0, 0\n    for j in range(i, n):\n        if s[j] == 'A':\n            at += 1\n        elif s[j] == 'T':\n            at -= 1\n        elif s[j] == 'C':\n            cg += 1\n        else:\n            cg -= 1\n        if at == 0 and cg == 0:\n            ans += 1\nprint(ans)\n", "n, s = map(str, input().split())\nn = int(n)\nans = 0\nfor i in range(n):\n    at = 0\n    cg = 0\n    for j in range(i,n):\n        if s[j] == 'A':\n            at += 1\n        elif s[j] == 'T':\n            at -= 1\n        elif s[j] == 'C':\n            cg += 1\n        else:\n            cg -= 1\n        if at == 0 and cg == 0:\n            ans += 1\nprint(ans)", "N, S = input().split()\nN, a = int(N), 0\n\nfor i in range(N):\n    c1, c2 = 0, 0\n    for s in S[i:]:\n        if s == 'A':\n            c1 += 1\n        if s == 'T':\n            c1 -= 1\n        if s == 'C':\n            c2 += 1\n        if s == 'G':\n            c2 -= 1\n        if c1 == 0 and c2 == 0:\n            a += 1\nprint(a)\n", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product, combinations_with_replacement # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n# set\u578b\u3060\u3068\u3001 | \u3068 & \u304c\u4f7f\u3048\u308b\u3088\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n# mod = 9982443453\n# mod = 998244353\nINF = float('inf')\ndx = [0,1,0,-1]\ndy = [1,0,-1,0]\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nN, S = input().split()\nN = int(N)\nans = 0\nfor i in range(N):\n    a = 0;t = 0;c = 0;g = 0;\n    for j in range(i,N):\n        if S[j] == 'A':\n            a += 1\n        elif S[j] == 'T':\n            t += 1\n        elif S[j] == 'C':\n            c += 1\n        else:\n            g += 1\n        if a == t and c == g:\n            ans += 1\nprint(ans)\n", "n, S = map(str, input().rstrip().split(\" \"))\n\nn = int(n)\nS = list(S)\ncnt = 0\n\nac = 0\ncg = 0\n\ndef nC2(num):\n    ret = num * (num - 1) // 2\n    return ret\n\nSum = []\nfor i, s in enumerate(S):\n    if(s == \"A\"):\n        ac += 1\n    elif(s == \"T\"):\n        ac -= 1\n    elif(s == \"C\"):\n        cg += 1\n    elif(s == \"G\"):\n        cg -= 1\n    \n    Sum.append((ac, cg))\n\ncnt = 0\nTable = {}\nfor t in Sum:\n    if(t == (0, 0)):\n        cnt += 1\n        \n    if(t in Table):\n        Table[t] += 1\n    else:\n        Table[t] = 1\n\nfor table in Table:\n    tmp = Table[table]\n    tmp = nC2(tmp)\n    cnt += tmp\nprint(cnt)", "N, S = input().split()\nN = int(N)\n\ncnt_AT = [0] * (N+1)\ncnt_CG = [0] * (N+1)\n\nfor n in range(N):\n    if S[n] == \"A\":\n        cnt_AT[n+1] = cnt_AT[n] + 1\n        cnt_CG[n+1] = cnt_CG[n]\n    if S[n] == \"T\":\n        cnt_AT[n+1] = cnt_AT[n] - 1\n        cnt_CG[n+1] = cnt_CG[n]\n    if S[n] == \"C\":\n        cnt_AT[n+1] = cnt_AT[n]\n        cnt_CG[n+1] = cnt_CG[n] + 1\n    if S[n] == \"G\":\n        cnt_AT[n+1] = cnt_AT[n]\n        cnt_CG[n+1] = cnt_CG[n] - 1\n\nans = 0\n\nfor i in range(N-1):\n    for j in range(i+2, N+1, 2):\n        at = cnt_AT[j] - cnt_AT[i]\n        cg = cnt_CG[j] - cnt_CG[i]\n        if at == 0 and cg == 0:\n            ans += 1\n\nprint(ans)\n", "from collections import Counter\nN,S = input().split()\nN = int(N)\nAT,CG = 0,0\nd = Counter()\nd[AT,CG] = 1\nans = 0\nfor i in range(N):\n    if S[i] == \"A\":\n        AT += 1\n    elif S[i] == \"T\":\n        AT -= 1\n    elif S[i] == \"C\":\n        CG += 1\n    else:\n        CG -= 1\n    ans += d[AT,CG]\n    d[AT,CG] += 1\nprint(ans)", "n, s = input().split()\nn = int(n)\n\ns_l = list(s)\nc = 0\nfor i in range(n - 1):\n    d = {'A': 0, 'T': 0, 'C': 0, 'G': 0}\n    for j in range(i + 2, n + 1, 2):\n        d[s[j - 1]] += 1\n        d[s[j - 2]] += 1\n        if d['A'] == d['T'] and d['C'] == d['G']:\n            c += 1\nprint(c)\n"]