["def read_line():\n    return list(map(int, input().split()))\ndef pr(l):\n    a = 1\n    for x in l:\n        a *= x\n    return a\n\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    l = list(sorted(read_line()))\n    l2 = list(reversed(l))\n    m = None\n    for i in range(6):\n        j = 5 - i\n        a = l[:i]\n        b = l2[:j]\n        p = pr(a) * pr(b)\n        if m == None or p > m:\n            m = p\n    print(m)\n\n\n", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    k = sorted(map(int, input().strip().split()))\n    a, b = k[0] * k[1], k[2] * k[3]\n    c, d = k[-5] * k[-4], k[-3] * k[-2]\n    e = k[-1]\n\n    print(max(a*b*e, a*d*e, c*d*e))", "import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(lst):  # fix inputs here\n    console(\"----- solving ------\")\n\n    maxres = lst[0] * lst[1] * lst[2] * lst[3] * lst[4]\n\n    if 0 in lst:\n        maxres = max(maxres, 0)\n\n    positives = sorted([a for a in lst if a >= 0])[::-1]\n    negatives = sorted([a for a in lst if a < 0])\n\n    if len(positives) >= 5 and len(negatives) >= 0:\n        maxres = max(maxres, positives[0]* positives[1]* positives[2]* positives[3]* positives[4])\n\n    if len(positives) >= 3 and len(negatives) >= 2:\n        maxres = max(maxres, positives[0]* positives[1]* positives[2]* negatives[0]* negatives[1])\n\n    if len(positives) >= 1 and len(negatives) >= 4:\n        maxres = max(maxres, positives[0]* negatives[0]* negatives[1]* negatives[2]* negatives[3])\n\n    if len(negatives) >= 5:\n        maxres = max(maxres, negatives[-1]* negatives[-2]* negatives[-3]* negatives[-4]* negatives[-5])\n\n    # return a string (i.e. not a list or matrix)\n    return maxres\n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n# fast read all\n# sys.stdin.readlines()\n\nfor case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    k = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    lst = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(map(int,input().split())))\n\n    res = solve(lst)  # please change\n    \n    # Google - case number required\n    # print(\"Case #{}: {}\".format(case_num+1, res))\n\n    # Codeforces - no case number required\n    print(res)\n", "from functools import reduce\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ng, ps = [], []\n    for i in a:\n        if i < 0:\n            ng.append(-i)\n        else:\n            ps.append(i)\n    ps.sort(reverse=True)\n    ng.sort(reverse=True)\n    ans = max(\n            reduce(int.__mul__, ps[:5]) if len(ps) >= 5 else -10 ** 30,\n            reduce(int.__mul__, ps[:3] + ng[:2]) if len(ps) >= 3 and len(ng) >= 2 else -10 ** 30,\n            reduce(int.__mul__, ps[:1] + ng[:4]) if len(ps) >= 1 and len(ng) >= 4 else -10 ** 30\n    )\n    if 0 in a:\n        ans = max(ans, 0)\n    ps.sort()\n    ng.sort()\n    ans = max(\n            ans,\n            -reduce(int.__mul__, ps[:4] + ng[:1]) if len(ps) >= 4 and len(ng) >= 1 else -10 ** 30,\n            -reduce(int.__mul__, ps[:2] + ng[:3]) if len(ps) >= 2 and len(ng) >= 3 else -10 ** 30,\n            -reduce(int.__mul__, ng[:5]) if len(ng) >= 5 else -10 ** 30\n    )\n    print(ans)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    x=a[-1]*a[-2]*a[-3]*a[-4]*a[-5]\n    y=a[0]*a[1]*a[-1]*a[-2]*a[-3]\n    z=a[0]*a[1]*a[2]*a[3]*a[-1]\n    print(max(x, y, z))", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\ndef giveanswer(l):\n    \n    ans = -float('inf')\n    for i in range(6):\n        ans = max(ans ,l[i - 1] * l[i - 2] * l[i - 3] * l[i - 4] * l[i - 5])\n    return ans\n\nfor _ in range(val()):\n    n = val()\n    print(giveanswer(sorted(li())))\n", "for _ in range(int(input())):\n    n = int(input())\n    neg = []\n    pos = []\n    zero = False\n    for e in map(int, input().split()):\n        if e < 0:\n            neg.append(e)\n        elif e > 0:\n            pos.append(e)\n        else:\n            zero = True\n    neg.sort()\n    pos.sort()\n    res = -float(\"inf\")\n    if zero:\n        res = 0\n    for i in range(6): # i = number of -\n        if len(neg) < i or len(pos) < 5-i:\n            continue\n        ar = neg[-i:] + pos[:5-i]\n        if i % 2 == 0:\n            ar = neg[:i] + pos[-(5-i):]\n        #print(i, ar)\n        acc = 1\n        for e in ar:\n            acc *= e\n        res = max(res, acc)\n    print(res)\n", "for _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    ans=0\n    t1=a[0]*a[1]*a[2]*a[3]*a[-1]\n    t2=a[0]*a[1]*a[-2]*a[-3]*a[-1]\n    t3=a[-5]*a[-4]*a[-2]*a[-3]*a[-1]\n    \n    print(max(t1,t2,t3))", "import sys\n\nT = int(sys.stdin.readline().strip())\nfor t in range (0, T):\n    n = int(sys.stdin.readline().strip())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    a.sort()\n    print(max([a[0] * a[1] * a[2] * a[3] * a[-1], \n        a[0] * a[1] * a[-3] * a[-2] * a[-1], \n        a[-5] * a[-4] * a[-3] * a[-2] * a[-1]]))", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nfrom operator import mul\nfrom functools import reduce\n \nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int,input().split()))\n \n    arr.sort()\n    best = - (10**99)\n    \n    tmp = arr[-5:]\n    tmp = reduce(lambda x, y: x * y, tmp, 1)\n    best = max(best, tmp)\n    \n    tmp = arr[:2] + arr[-3:]\n    tmp = reduce(lambda x, y: x * y, tmp, 1)\n    best = max(best, tmp)\n    \n    tmp = arr[:4] + arr[-1:]\n    tmp = reduce(lambda x, y: x * y, tmp, 1)\n    best = max(best, tmp)\n    \n    print(best)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    pos,neg = 0,0\n    for i in arr:\n        if i>0:\n            pos+=1\n        elif i<0:\n            neg+=1\n    ans = -10**18\n    arr.sort()\n    i = 0\n    while i<=4 and i<=neg:\n        cur = 1\n        for j in range(i):\n            cur = cur*arr[j]\n        j = n-1\n        while j>=(n-(5-i)):\n            cur = cur*arr[j]\n            j-=1\n        ans = max(ans,cur)\n        i+=2\n    print(ans)", "# Anuneet Anand\n\nT = int(input())\n\nwhile T:\n\tn = int(input())\n\tA = list(map(int,input().split()))\n\tA.sort()\n\n\ta = A[n-1]*A[n-2]*A[n-3]*A[n-4]*A[n-5]\n\tb = A[n-1]*A[n-2]*A[n-3]*A[0]*A[1]\n\tc = A[n-1]*A[0]*A[1]*A[2]*A[3]\n\n\tprint(max(a,b,c))\n\n\tT = T - 1\n\n\n\n\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    m = []\n    p = []\n    cnt0 = 0\n    for val in a:\n        if val > 0:\n            p.append(val)\n        elif val < 0:\n            m.append(val)\n        else:\n            cnt0 += 1\n    p = sorted(p, reverse=True)\n    m = sorted(m)\n    \n    # ppppp\n    ans = -10 ** 20\n    tmp = 1\n    if len(p) >= 5:\n        for i in range(5):\n            tmp *= p[i]\n        ans = max(tmp, ans)\n    # ppppm\n    tmp = 1\n    if len(p) >= 4 and len(m) >= 1:\n        for i in range(4):\n            tmp *= p[~i]\n        for i in range(1):\n            tmp *= m[~i]\n        ans = max(tmp, ans)\n    # pppmm\n    tmp = 1\n    if len(p) >= 3 and len(m) >= 2:\n        for i in range(3):\n            tmp *= p[i]\n        for i in range(2):\n            tmp *= m[i]\n        ans = max(tmp, ans)\n    # ppmmm\n    tmp = 1\n    if len(p) >= 2 and len(m) >= 3:\n        for i in range(2):\n            tmp *= p[~i]\n        for i in range(3):\n            tmp *= m[~i]\n        ans = max(tmp, ans)\n    # pmmmm\n    tmp = 1\n    if len(p) >= 1 and len(m) >= 4:\n        for i in range(1):\n            tmp *= p[i]\n        for i in range(4):\n            tmp *= m[i]\n        ans = max(tmp, ans)\n    # mmmmm\n    tmp = 1\n    if len(m) >= 5:\n        for i in range(5):\n            tmp *= m[~i]\n        ans = max(tmp, ans)\n    if cnt0 > 0:\n        ans = max(0, ans)\n\n    print(ans)"]