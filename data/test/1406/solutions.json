["3\n\nimport sys\n\n# 1\u2009<=\u2009n,\u2009d\u2009<=\u20091000, 1\u2009<=\u2009k\u2009<=\u200910**9\nn, k, d = list(map(int, sys.stdin.readline().split()))\n\nno_sol = False\nsolution = [[1 for j in range(n)] for i in range(d)]\n\n\ndef schedule(i, j, level):\n    nonlocal no_sol\n    if level >= d:\n        no_sol = True\n        return\n    count = j - i\n    chunk = count // k\n    extra = count % k\n    r = i\n    for t in range(min(k, count)):\n        size = chunk + (1 if t < extra else 0)\n        for z in range(size):\n            solution[level][r+z] = t+1\n        if size > 1:\n            schedule(r, r + size, level + 1)\n        r += size\n\nif k == 1:\n    if n > 1:\n        no_sol = True\nelse:\n    schedule(0, n, 0)\n\nif no_sol:\n    print(-1)\nelse:\n    for l in solution:\n        print(' '.join(str(x) for x in l))\n", "n, k, d = list(map(int, input().split()))\nif k < n ** (1 / d):\n    print(-1)\nelse:\n    k1 = 1\n    for i in range(d):\n        print(\" \".join(map(str, [(j // k1 % k) + 1 for j in range(n)])))\n        k1 = k * k1\n", "n,k,d = map(int, input().split())\nif (n > k ** d):\n    print(-1)\n    return\nfor i in range(d):\n    power = k**i\n    resArray = [((j // power) % k +1) for j in range(n)]\n    #for j in range(n//(k**i)+1):\n    #    resArray.extend([(j % k) + 1] * (k ** i))\n    print(' '.join(map(str,resArray)))", "In = lambda :  list(map(int,input().split()))\nn , k ,d = In()\nif(n > k**d):\n    print(-1)\nelse :\n    k1 = 1\n    for i in range(d):\n        print(\" \".join(map(str, [(j // k1 % k) + 1 for j in range(n)])))\n        k1 = k1 * k;\n", "n,k,d = map(int, input().split())\nif (n > k ** d):\n    print(-1)\n    return\nfor i in range(d):\n    power = k**i\n    resArray = [((j // power) % k +1) for j in range(n)]\n    print(' '.join(map(str,resArray)))", "import fileinput\nimport math\n\nfor line in fileinput.input():   \n    inp = [ int(i) for i in line.split()]\n\nn = inp[0]\nk = inp[1]\nd = inp[2]\n\n\nif n > k ** d:\n    print(-1)\nelse:\n    for i in range(d):\n        pr = k**i\n        results = [(j//pr % k) + 1 for j in range(n)]\n        print(' '.join(map(str,results)))", "def f(t):\n    i = -1\n    t[i] += 1\n    while t[i] > k:\n        t[i] = 1\n        i -= 1\n        t[i] += 1\n    return list(map(str, t))\nn, k, d = map(int, input().split())\nif k ** d < n: print(-1)\nelse:\n    t = [1] * d\n    t[-1] = 0\n    s = [f(t) for i in range(n)]\n    print('\\n'.join([' '.join(t) for t in zip(*s)]))", "m=list(input().split())\nn=int(m[0])\nk=int(m[1])\nd=int(m[2])\n\nif n==1:\n    for i in range(d):\n        print(\"1\")\n    return\nif k==1:\n    print(\"-1\")\n    return\nif k>=n:\n    m=list(i for i in range(n))\n    o=\"\"\n    for j in range(1,n+1):\n        o+=\" \"+str(j)\n    o=o[1:] \n    for i in range(d):\n        print(o)\n    return\nif d==1:\n    print('-1')\n    return\nif d>=n:\n    m=list(\"1\" for i in range(n))\n    for i in range(n):\n        m[i]=\"2\"\n        #print(m)\n        o=str(m[0])\n        for j in range(1,n):\n            o+=\" \"+str(m[j])\n        print(o)\n        #m[i]=\"1\"\n    for i in range(n,d):\n        #print(m)\n        print(o)\n    return\n\nfrom math import ceil, floor\ntc=ceil(n/k) #days\ntf=floor(n/k) #len k\n\nif n>(k**d):\n    print('-1')\n    return\n\nsc=1\nfor stp in range(1,d+1):\n    o=\"\"\n    kc=0\n    \n    while kc<n:\n        for kk in range(1,k+1):\n            for i in range (sc):\n                if kc<n:\n                    o+=' '+str(kk)\n                    kc+=1\n                else:\n                    break\n    sc*=k #change from 2\n    print(o[1:])\n", "#!/usr/bin/env python3\n\nn, k, d = list(map(int, input().split()))\nif k ** d < n:\n    print(-1)\nelse:\n    for i in range(d):\n        p = k ** i\n        arr = [j // p % k + 1 for j in range(n)]\n        print(' '.join(map(str, arr)))\n", "#http://codeforces.com/problemset/problem/459/C\n\n# Input of the values\nn, k, d = list(map(int, input().split()))\n\n#Convention : \tBusses are numbered from 1 to k\n#\t\t\t\tStudents are numbered from 0 to k - 1\n# \t\t\t\tDays are numbered from 0 to k - 1\n\n# Variable for success\nsuccess = True\n\n# answer is a  2-d array that stores the bus number each student used on a particular day\n# Students are numbered from 0 to n-1\nanswer = [[] for x in range(n)]\n\n# Initialising the first students details manually\n# The first student uses the bus 1 for all of the days\nanswer[0] = [1 for x in range(d)]\n\n# we will be filling the details for each and every student and \n# would print -1 only if we cannot allot any bus number to the next student\nfor i_th_student in range(1,n):\n\t\n\t#answer for previous value\n\ti_minus_one_student = answer[i_th_student - 1]\n\n\t# Answer to the current student\n\tcurrent_student = list(i_minus_one_student)\n\n\t# Days are also numbered from 0 to d-1\n\tfor i_th_day in reversed(list(range(d))):\n\n\t\t# the condition to change the bus number \n\t\tif i_minus_one_student[i_th_day] < k :\n\n\t\t\tcurrent_student[i_th_day] += 1\n\n\t\t\t# all the numbers next to it are reset\n\t\t\tfor i in range(i_th_day + 1, d):\n\t\t\t\tcurrent_student[i] = 1\n\t\t\t\n\t\t\tbreak\n\t\n\t#Save the value\n\tanswer[i_th_student] = current_student\n\t\n\t#Failed\n\tif current_student == i_minus_one_student:\n\t\tsuccess = False\n\t\tbreak\n\n# printing the output\nif not(success):\n\tprint (\"-1\")\n\nelse:\n\t# ans_trans is used for giving the output fast\n\tanswer_trans= [[] for i in range(d)]\n\tfor y in range(n):\n\t\ti = 0\n\t\tfor x in answer[y]:\n\t\t\tanswer_trans[i].append(x)\n\t\t\ti += 1\n\tfor bla in answer_trans:\n\t\tprint(' '.join(map(str, bla)))\n", "load = [int(i) for i in input().split()]\n\nn = load[0]\nk = load[1]\nd = load[2]\n\np = 1\nfor i in range(d):\n    p *= k\n    if p >= n:\n        break\n\nif n > p:\n    print(-1)\nelse:\n    nums = [i for i in range(n)]\n    for i in range(d):\n        buff = \"\"\n        for j in range(n):\n            buff += str(nums[j] % k + 1) + ' '\n            nums[j] //= k\n        print(buff)\n\n    \n", "def f(t):\n    i = -1\n    t[i] += 1\n    while t[i] > k:\n        t[i] = 1\n        i -= 1\n        t[i] += 1\n    return list(map(str, t))\nn, k, d = map(int, input().split())\nif k ** d < n: print(-1)\nelse:\n    t = [1] * d\n    t[-1] = 0\n    s = [f(t) for i in range(n)]\n    print('\\n'.join([' '.join(t) for t in zip(*s)]))", "3\n\nimport sys\n\nn, k, d = list(map(int, sys.stdin.readline().split()))\n\nx = 1\nwhile x ** d < n:\n    x += 1\n    \nif x > k:\n    sys.stdout.write(\"-1\\n\")\n    return\n    \nans = [[1 for i in range(d)] for j in range(n)]\nfor i in range(1, n):\n    for j in range(d): \n        ans[i][j] = ans[i - 1][j]\n    ans[i][d - 1] += 1\n    memo = 0\n    for j in range(d - 1, -1, -1):\n        ans[i][j] += memo\n        memo = 0\n        if ans[i][j] > x:\n            memo = ans[i][j] - x\n            ans[i][j] = 1\n            \nfor i in range(d):\n    sys.stdout.write(' '.join([str(ans[j][i]) for j in range(n)]) + '\\n')", "3\n\nimport sys\n\nn, k, d = list(map(int, sys.stdin.readline().split()))\n\nx = 1\nwhile x ** d < n:\n    x += 1\n    \nif x > k:\n    sys.stdout.write(\"-1\\n\")\n    return\n    \nans = [[1 for i in range(n)] for j in range(d)]\nfor i in range(1, n):\n    for j in range(d): \n        ans[j][i] = ans[j][i - 1]\n    ans[d - 1][i] += 1\n    memo = 0\n    for j in range(d - 1, -1, -1):\n        ans[j][i] += memo\n        memo = 0\n        if ans[j][i] > x:\n            memo = ans[j][i] - x\n            ans[j][i] = 1\n            \nfor i in range(d):\n    sys.stdout.write(' '.join(map(str, ans[i])) + '\\n')", "n, k, d = [int(k) for k in input().split()]\nbase_rep = [[0 for _ in range(d)] for _ in range(n)]\n\n\nif k**d  < n:\n    print(-1)\nelse:\n    for j in range(n):\n        num = j\n        i=0\n        while num >= k**i:\n           i+=1\n        i-=1\n        #print(i)\n        while num:\n            base_rep[j-1][i] = num//k**i\n            num = num % k**i\n            i -=1\n    for i in range(d):\n        s =\"\"\n        for j in range(n):\n            s += str(base_rep[j][i]+1) + \" \"\n        print(s)", "def add1(array, base):\n    array[-1] += 1\n    array = [0] + array\n    k= len(array)-1\n    while array[k]>=base:\n        array[k] -= base\n        array[k-1] += 1\n        k -= 1\n    if array[0] == 0:\n        return array[1:]\n    return array\n\n\nn, k, d = list(map(int, input().split(' ')))\nif n == 1:\n    for i in range(d):\n        print(1)\n    quit()\nif n > k**d:\n    print(\"-1\")\n\n    quit()\narr = []\narray = [0]*d\nfor i in range(n):\n    arr.append(array)\n    array = add1(array[:], k)\n\nnew = [[0]*len(arr) for _ in range(len(arr[0]))]\nfor i in range(len(arr)):\n    for j in range(len(arr[0])):\n        new[j][i] = arr[i][j]+1\n\nfor i in new:\n    print(' '.join([str(x) for x in i]))\n", "n,k,d=list(map(int,input().split()))\nif n>k**d:print((-1));return\nK=1\nfor j in range(d):\n    print(\" \".join([str(i//K%k +1) for i in range(n)]))\n    K*=k\n", "a = input()\nb = a.split()\nn = int(b[0])\nk = int(b[1])\nd = int(b[2])\nif n > k**d:\n    print(-1)\n    return\ntable = [[1]*d]\nfor i in range(n - 1):\n    v = list(table[-1])\n    j = len(v)-1\n    while v[j]==k:\n        v[j]=1\n        j = j - 1\n    v[j] = v[j] + 1\n    table.append(v)\ncurrent_power = 1\nanswer = [0] * n\nfor m in range(0, d):\n    current_value = 1\n    for s in range(0, n):\n        if s % current_power == 0 and s > 0:\n            current_value = current_value % k + 1\n        answer[s] = str(current_value)\n    current_power *= k\n    print(\" \".join(answer))\n", "a = input()\nb = a.split()\nn = int(b[0])\nk = int(b[1])\nd = int(b[2])\nraw = [' ']*n\nif n > k**d:\n\tprint(-1)\n\treturn\ntable = [[1]*d]\np = 1\nfor i in range(d):\n\tcv = 1\n\tfor j in range(n):\n\t\tif j % p == 0 and j != 0:\n\t\t\tcv = cv + 1\n\t\t\tif cv == k+1:\n\t\t\t\tcv = 1\n\t\traw[j]= str(cv)\n\tprint(' '.join(raw))\n\tp = p * k", "n,k,d=map(int,input().split())\nif n>k**d:print(-1);return\nK=1\nfor j in range(d):\n    print(\" \".join([str(i//K%k +1) for i in range(n)]))\n    K*=k", "# -*- coding: utf-8 -*-\nimport sys\n\ndef main():\n    n,k,d = map(int,sys.stdin.readline().split())\n\n    blocksize = n\n\n    for i in range(d):\n        blocksize = blocksize//k + (blocksize%k != 0)\n    # print(blocksize)\n\n    if(blocksize > 1):\n        print(\"-1\")\n        return\n\n    for days in range(d):\n        i = 0\n        bus = 1\n        while i < n:\n            for j in range(blocksize):\n                sys.stdout.write(str(bus) + ' ')\n                i += 1\n                if i == n: break\n            bus += 1\n            if(bus > k): bus = 1\n        blocksize *= k\n        sys.stdout.write('\\n')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n,k,d=map(int,input().split())\nif n>k**d:print(-1);return\nK=1\nfor j in range(d):\n    print(\" \".join([str(i//K%k +1) for i in range(n)]))\n    K*=k", "import math \nn,k,d = list(map(int,input().split()))\n# if math.log(n)>d*math.log(k): chadar%\nif n>k**d:\n\tprint(-1)\nelse:\n\t# no pgh shit \n\tt = 1\n\tfor i in range(d):\n\t\tli = []\n\t\tfor j in range(n):\n\t\t\tli.append((j//t)%k+1)\n\t\tprint(*li)\n\t\tt*=k\n", "n,k,d=list(map(int,input().split()))\nif n>k**d:print((-1));return\nK=1\nfor j in range(d):\n    print(\" \".join([str(i//K%k +1) for i in range(n)]))\n    K*=k\n\n", "n,k,d=list(map(int,input().split()))\nif n>k**d:print((-1));return\nK=1\nfor j in range(d):\n    print(\" \".join([str(i//K%k +1) for i in range(n)]))\n    K*=k\n\n"]