["def solve(n, l, s, www, children):\n    ans = 0\n    dp = [{} for _ in range(n)]\n    for v in range(n - 1, -1, -1):\n        cv = children[v]\n        if not cv:\n            dp[v][1] = www[v]\n            continue\n        ans += len(cv) - 1\n        wv = www[v]\n        if wv > s:\n            return -1\n        dv = dp[v]\n        for c in cv:\n            for lc, wc in list(dp[c].items()):\n                if lc == l:\n                    continue\n                wt = wc + wv\n                if wt > s:\n                    continue\n                if lc + 1 not in dv:\n                    dv[lc + 1] = wt\n                else:\n                    dv[lc + 1] = min(dv[lc + 1], wt)\n        if not dv:\n            ans += 1\n            dv[1] = wv\n\n    return ans + 1\n\n\nn, l, s = list(map(int, input().split()))\nwww = list(map(int, input().split()))\nif n == 1:\n    print(-1 if www[0] > s else 1)\n    return\nchildren = [set() for _ in range(n)]\nfor i, p in enumerate(map(int, input().split())):\n    children[p - 1].add(i + 1)\nprint(solve(n, l, s, www, children))\n", "def solve(n, l, s, www, children):\n    ans = 0\n    dp = [{} for _ in range(n)]\n    for v in range(n - 1, -1, -1):\n        cv = children[v]\n        if not cv:\n            dp[v][1] = www[v]\n            continue\n        ans += len(cv) - 1\n        wv = www[v]\n        if wv > s:\n            return -1\n        dv = dp[v]\n        for c in cv:\n            for lc, wc in dp[c].items():\n                if lc == l:\n                    continue\n                wt = wc + wv\n                if wt > s:\n                    continue\n                if lc + 1 not in dv:\n                    dv[lc + 1] = wt\n                else:\n                    dv[lc + 1] = min(dv[lc + 1], wt)\n        if not dv:\n            ans += 1\n            dv[1] = wv\n\n    return ans + 1\n\n\nn, l, s = list(map(int, input().split()))\nwww = list(map(int, input().split()))\nif n == 1:\n    print(-1 if www[0] > s else 1)\n    return\nchildren = [set() for _ in range(n)]\nfor i, p in enumerate(map(int, input().split())):\n    children[p - 1].add(i + 1)\nprint(solve(n, l, s, www, children))", "from collections import defaultdict\n\n\ndef rec(n, l, s):\n    # dp[i] is a doctionary, where key is the chain length\n    # and value is the weight at node i\n    dp = [{} for _ in range(n)]\n    ans = 0\n    for cur in range(n - 1, -1, -1):\n        child_of_cur = children.get(cur, None)\n        if not child_of_cur:\n            dp[cur][1] = weight[cur]\n            continue\n        ans += len(child_of_cur) - 1\n        cur_weight = weight[cur]\n        for ch in child_of_cur:\n            for ln, child_weight in dp[ch].items():\n                if ln == l:\n                    continue\n                agg_weight = cur_weight + child_weight\n                if agg_weight > s:\n                    continue\n                if ln + 1 not in dp[cur]:\n                    dp[cur][ln + 1] = agg_weight\n                dp[cur][ln + 1] = min(dp[cur][ln + 1], agg_weight)\n\n        if not dp[cur]:\n            ans += 1\n            dp[cur][1] = weight[cur]\n    \n    return ans + 1\n\n\nweight = []\nchildren = defaultdict(set)\nn, l, s = map(int, input().split())\nfor w in map(int, input().split()):\n    if w > s:\n        print(-1)\n        return\n    weight.append(w)\nif n == 1:\n    print(-1 if weight[0] > s else 1)\n    return\nfor i, v in enumerate(map(int, input().split())):\n    children[v -1].add(i + 1)\nprint(rec(n,l,s))", "from collections import defaultdict\nimport sys\n\n\ndef rec(n, l, s):\n    # dp[i] is a doctionary, where key is the chain length\n    # and value is the weight at node i\n    dp = [{} for _ in range(n)]\n    ans = 0\n    for cur in range(n - 1, -1, -1):\n        child_of_cur = children.get(cur, None)\n        if not child_of_cur:\n            dp[cur][1] = weight[cur]\n            continue\n        ans += len(child_of_cur) - 1\n        cur_weight = weight[cur]\n        for ch in child_of_cur:\n            for ln, child_weight in dp[ch].items():\n                if ln == l:\n                    continue\n                agg_weight = cur_weight + child_weight\n                if agg_weight > s:\n                    continue\n                if ln + 1 not in dp[cur]:\n                    dp[cur][ln + 1] = agg_weight\n                dp[cur][ln + 1] = min(dp[cur][ln + 1], agg_weight)\n\n        if not dp[cur]:\n            ans += 1\n            dp[cur][1] = weight[cur]\n    \n    return ans + 1\n\n\nweight = []\nchildren = defaultdict(set)\nn, l, s = map(int, sys.stdin.readline().split())\nfor w in map(int, sys.stdin.readline().split()):\n    if w > s:\n        print(-1)\n        return\n    weight.append(w)\nif n == 1:\n    print(-1 if weight[0] > s else 1)\n    return\nfor i, v in enumerate(map(int, sys.stdin.readline().split())):\n    children[v -1].add(i + 1)\nprint(rec(n,l,s))"]