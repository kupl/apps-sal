["n, m = map(int, input().split())\nif m == 0:\n\tprint(n, n)\n\treturn\nif m == n * (n - 1) // 2:\n\tprint(0, 0)\n\treturn\nL = 0\nR = n + 1\nwhile R - L > 1:\n\tm1 = (L + R) // 2\n\tif m1 * (m1 - 1) // 2 < m:\n\t\tL = m1\n\telse:\n\t\tR = m1\nans_max = n - R\nans_min = max(0, n - 2 * m)\nprint(ans_min, ans_max)", "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn, m = mi()\nx = max(0, n - 2 * m)\nfor i in range(n + 1):\n    c = i * (i - 1) // 2\n    if c >= m:\n        y = n - i\n        break\nprint(x, y)\n", "n, m = map(int, input().split())\nl = 0\nr = n\nfor i in range(50):\n    md = (l + r) // 2\n    if md * (md - 1) // 2 < m:\n        l = md\n    else:\n        r = md\n   # print(l, r, md)\nprint(max(0, n - m * 2), n - r)", "n, m = map(int, input().split())\n\nmn = max(0, n - 2 * m)\n\nfor i in range(n + 1):\n    if i * (i - 1) // 2 >= m:\n        mx = n - i\n        break\n\nprint(mn, mx)", "n, m = map(int, input().split())\nif m == 0:\n\tprint(n, n)\n\treturn\nleft, right = 0, n + 1\nwhile left != right - 1:\n\tmid = (left + right) // 2\n\tif mid * (mid - 1) // 2 < m:\n\t\tleft = mid\n\telse:\n\t\tright = mid\nprint(max(0, n - 2 * m), n - right)", "n, m = map(int, input().split())\nans2 = 0\nif (n + 1) // 2 > m:\n    print(n - m * 2, end=' ')\nelse:\n    print(0, end=' ')\nfor i in range(n, -1, -1):\n    now = n - i\n    if (now * (now - 1) // 2) >= m:\n        print(i)\n        break", "n, m = list(map(int,input().split()))\nimin = max(0,n - 2 * m)\ns = 0\nk = 1\nwhile s < m:\n\ts = (k * (k - 1) // 2)\n\tk += 1\nprint(imin, n - k + 1)\n", "import sys\nimport os\n\ndef solve(n, m):\n    if m == 0:\n        return (n, n)\n    minimum = max(0, n - m * 2)\n    for i in range(1, n + 1):\n        if i * (i - 1) // 2 >= m:\n            return (minimum, n - i)\n\ndef main():\n    n, m = (int(x) for x in input().split())\n    print(' '.join(str(x) for x in solve(n, m)))\n\ndef __starting_point():\n    main()\n__starting_point()", "USE_STDIO = False\n\nif not USE_STDIO:\n    try: import mypc\n    except: pass\n\ndef main():\n    n, m = list(map(int, input().split(' ')))\n    if m == 0:\n        print(n, n)\n        return\n\n    minc = max(0, n - m * 2)\n\n    x = int((m*2)**0.5)\n    if x * (x + 1) < m * 2:\n        x += 1\n    maxc = n - (x + 1)\n\n    print(minc, maxc)\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()", "n, m = list(map(int, input().split()))\n\nmini = max(0, n - 2 * m)\nmaxi = 10 ** 10\nfor i in range(n + 1):\n    if i * (i - 1) // 2 < m:\n        continue\n    maxi = min(maxi, i)\nprint(mini, n - maxi)\n", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\nn,m = list(map(int,minp().split()))\nk = int(sqrt(m))\nwhile k*(k-1)//2 > m:\n\tk -= 1\nwhile k*(k-1)//2 < m:\n\tk += 1\n#if k*(k-1)//2 == m:\nprint(max(0,n-m*2), n-k)\n", "n,m=map(int,input().split())\nprint(max(0,n-2*m),end=' ')\nl = -1\nr= n+1;\nwhile(r-l>1):\n    s=(l+r)//2\n    if(s*(s-1)<2*m):\n        l=s\n    else:\n        r=s\nprint(max(0,n-r))\n", "(n, m) = map(int, input().split())\n\nif (n + 1) // 2 <= m:\n    print(0, end = ' ')\nelse:\n    print(n - m * 2, end = ' ')\n    \nk = 0\nwhile k < n:\n    if (k * (k - 1)) // 2 < m:\n        k += 1\n        continue\n    else:\n        break\n\nprint(n - k)\n\n\n", "n, m = list(map(int, input().split()))\n\nmin_v = max(0, n - m * 2)\n\nin_clique = 1\nwhile m > 0:\n    m -= in_clique\n    in_clique += 1\n\nmax_v = n - in_clique + (in_clique == 1)\n\n\n\nprint(min_v, max_v)\n", "import os\nimport sys\n\nn, m = [int(num) for num in sys.stdin.readline().split()]\n\n# for _ in range(t):\n#     s, a, b, c = [int(s) for s in sys.stdin.readline().split()]\n#     s = s // c\n#     res = (a + b) * (s // a) + s % a\n#     sys.stdout.write(\"{0}\\n\".format(res))\n\nres1 = max([0, n - 2 * m])\nres2 = 0\nwhile res2 * (res2 - 1) < (2 * m):\n    res2 += 1\n\nprint(res1, n - res2)\n", "n, m = list(map(int, input().split()))\nl, r = 0, n\nwhile l < r:\n    c = (l + r) // 2\n    if (c * (c - 1) // 2) < m:\n        l = c + 1\n    else:\n        r = c\nmn = 0\nif m <= n // 2:\n    mn = n - m * 2\nprint(mn, n - l)", "n,m=list(map(int,input().split()))\ni=0\nwhile (i*(i-1)/2<m) and (i<=n):\n    i+=1\nif n//2+n%2<=m:\n    print(0,n-i)\nelse:\n    print(n-2*m,n-i)\n", "import math\nx=input()\nx=x.split()\nn=int(x[0])\nm=int(x[1])\nif m>=n/2:\n    min=0\nelse:\n    min=n-2*m\nmax=n-math.ceil((2*m+(2*m)**(1/2))**(1/2))\nprint(str(min)+\" \"+str(max))", "import math\n\nn,m=list(map(int,input().split()))\n\nMINANS=max(0,n-m*2)\n\ndef combi(m):\n    return m*(m-1)//2\n\nfor i in range(int(math.sqrt(2*m)),n+1):\n    if combi(i)>=m:\n        break\n\nMAXANS=n-i\n#n*(n-1)/2=m\n#n^2-n+2m=0\n\n\nprint(MINANS,MAXANS)\n", "n,m=list(map(int,input().split()))\nmn=n-min(2*m,n)\nk=0\nwhile k*(k-1)//2<m:\n\tk+=1\nmx=n-k\nprint(str(mn)+\" \"+str(mx))\n", "import math\ndef most_edge(n):\n    return n*(n-1)//2\ndef can(n,m):\n    return most_edge(n)>=m\n\nn,m=[int(x) for x in input().split()]\nminn=n-2*m\nminn=max(0,minn)\n\nnp=max(0,int(math.sqrt(2*m))-10)\n\nfor i in range(np,np+20):\n    if not can(i,m):\n        continue\n    else:\n        maxx=i\n        break\n\nmaxx=n-maxx\n\nprint(minn,maxx)\n", "n,m = map(int, input().split())\nif n > 1 and m >= n/2:\n    ans1 = 0\nelse:\n    if n > 1:\n        ans1 = n - m*2\n    else:\n        ans1 = 1\nk = 1\nwhile k*(k-1)//2 < m:\n    k += 1\nif m > 0:\n    ans2 = n - k\nelse:\n    ans2 = n\nprint(ans1, ans2)", "3\n\nimport math\nimport sys\n\n\nDEBUG = False\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef getpf(E):\n    if E == 0:\n        return 0\n\n    e = 0\n    for k in range(2, E + 100):\n        e += k - 1\n        if e >= E:\n            return k\n\n    assert False\n\n\ndef solve(V, E):\n    mx = V - getpf(E)\n    mn = max(0, V - E * 2)\n    return mn, mx\n\n\ndef main():\n    N, M = [int(e) for e in inp().split()]\n    print(*solve(N, M))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]