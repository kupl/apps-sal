["from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\n\n\nparent = [i for i in range(N)]\nrank = [0] * N\n\n\ndef find(i):\n    if parent[i] == i:\n        return i\n    else:\n        parent[i] = find(parent[i])\n        return parent[i]\n\n\ndef same(x, y):\n    return find(x) == find(y)\n\n\ndef unite(x, y):\n    x = find(x)\n    y = find(y)\n    if x == y:\n        return\n\n    if rank[x] > rank[y]:\n        parent[y] = x\n    else:\n        parent[x] = y\n        if rank[x] == rank[y]:\n            rank[y] += 1\n\n\nP = list(map(int, input().split()))\nfor i in range(M):\n    a, b = list(map(int, input().split()))\n    a, b = a - 1, b - 1\n    unite(a, b)\n\n\nd = defaultdict(list)\ncnt = defaultdict(int)\nfor i in range(N):\n    d[find(i)].append(P[i])\n\nfor i in range(N):\n    if find(i) == i:\n        d[i] = sorted(d[i], reverse=True)\n\nans = []\nfor i in range(N):\n    k = find(i)\n    ans.append(d[k][cnt[k]])\n    cnt[k] += 1\n\nprint(' '.join(map(str, ans)))\n", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nN, M = map(int, input().split())\n \n \nparent = [i for i in range(N)]\nrank = [0] * N\n \n \ndef find(i):\n    if parent[i] == i:\n        return i\n    else:\n        parent[i] = find(parent[i])\n        return parent[i]\n \n \ndef same(x, y):\n    return find(x) == find(y)\n \n \ndef unite(x, y):\n    x = find(x)\n    y = find(y)\n    if x == y:\n        return\n \n    if rank[x] > rank[y]:\n        parent[y] = x\n    else:\n        parent[x] = y\n        if rank[x] == rank[y]:\n            rank[y] += 1\n \n \nP = list(map(int, input().split()))\nfor i in range(M):\n    a, b = map(int, input().split())\n    a, b = a - 1, b - 1\n    unite(a, b)\n \n \nd = defaultdict(list)\ncnt = defaultdict(int)\nfor i in range(N):\n    d[find(i)].append(P[i])\n \nfor i in range(N):\n    if find(i) == i:\n        d[i] = sorted(d[i], reverse=True)\n \nans = []\nfor i in range(N):\n    k = find(i)\n    ans.append(d[k][cnt[k]])\n    cnt[k] += 1\n \nprint(' '.join(map(str, ans)))", "import sys\ninput=sys.stdin.readline\n\ndef make_set(v):\n    parent[v]=v\n\ndef find_set(v):\n    if v == parent[v]:\n        return v\n    else:\n        parent[v]=find_set(parent[v])\n        return parent[v]\n\ndef union_sets(a,b):\n    a = find_set(a)\n    b = find_set(b)\n    if a != b:\n        if rank[a]<rank[b]:\n            a,b=b,a\n        parent[b] = a\n        if rank[a]==rank[b]:\n            rank[a]+=1\n\n\n\nn,m=list(map(int,input().split()))\n\narr=list(map(int,input().split()))\n\nparent=[i for i in range(n)]\nrank=[0]*(n)\n\n            \nfor i in range(m):\n    a,b=list(map(int,input().split()))\n    a=a-1\n    b=b-1\n    union_sets(a,b)\n    \nb={}\nfor i in range(n):\n    if find_set(i) not in b.keys():\n        b[find_set(i)]=[]\n    b[find_set(i)].append(i)\n\ne=[0]*n\nfor i in b:\n    b[i].sort()\n    c=[]\n    for j in range(len(b[i])):\n        c.append(arr[b[i][j]])\n    c.sort(reverse=True)\n    for j in range(len(b[i])):\n        e[b[i][j]]=c[j]\nprint(*e)"]