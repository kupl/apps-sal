["from collections import *\nc=Counter()\nans=n=int(input())\ns=input()\nk=len(set(s))\ni=j=t=0\nwhile j<n:\n    while len(c)<k and j<n: c[s[j]]+=1; j+=1\n    while len(c)==k:\n        if j-i<ans: ans=j-i\n        c[s[i]]-=1\n        if c[s[i]]==0: del c[s[i]]\n        i+=1\n    \nprint(ans)", "n = int(input())\ns = input()\ndef main(n, s):\n k = set()\n for i in range(n):\n    k.add(s[i])\n v = len(k)\n h = dict()\n for i in k:\n    h[i] = 0\n l = 0\n r = n\n while (l + 1 < r):\n    m = (l + r) // 2\n    f = False\n    for i in h:\n        h[i] = 0\n    x = 0\n    for i in range(m):\n        h[s[i]] += 1\n        if h[s[i]] == 1:\n            x += 1\n    if x == v:\n        f = True\n    else:\n        for i in range(m, n):\n            h[s[i - m]] -= 1\n            if h[s[i - m]] == 0:\n                x -= 1\n            h[s[i]] += 1\n            if h[s[i]] == 1:\n                x += 1\n            if x == v:\n                f = True\n                break\n    if f:\n        r = m\n    else:\n        l = m\n print(r)\nmain(n, s)\n            \n    \n", "n = int(input())\ns = input()\n\nexi = [0 for i in range(52)]\ndef fill(x):\n    if(x.islower()):\n        exi[ord(x)-97] = 1\n        return ord(x)-97\n    else:\n        exi[ord(x)-65+26] = 1\n        return ord(x)-65+26\narr = []\nfor c in s:\n    arr.append(fill(c))\n\nnow = [0 for i in range(52)]\ndef check():\n    for i in range(52):\n        if(exi[i]):\n            if(exi[i]>now[i]):\n                return 0\n    return 1\n\nfirst = 0\nnow[arr[first]] += 1\nif(check()):\n    print(1)\n    return\n\nmin = n\nfor i in range(1,n):\n    now[arr[i]] += 1\n    for j in range(first,i):\n        if(now[arr[j]]>1):\n            first += 1\n            now[arr[j]] -= 1\n        else:\n            break\n    if(check()):\n        leng = i - first + 1\n        if(min>leng):\n            min = leng\nprint(min)", "from sys import stdin\n\ndef main():\n        n=int(stdin.readline())\n        ville=stdin.readline()\n        minimum=n\n        maisons={}\n        nbType=0\n        for maison in ville:\n                if maison!=\"\\n\" and maison not in maisons:\n                        maisons[maison]=0\n                        nbType+=1\n        nbZeros=nbType-1\n        inf=0\n        sup=0\n        maisons[ville[0]]+=1\n        while n>sup:\n                if nbZeros==0:\n                        minimum=min(minimum,sup-inf+1)\n                        maisons[ville[inf]]-=1\n                        if maisons[ville[inf]]==0:\n                                nbZeros+=1\n                        inf+=1\n\n                else:\n                        sup+=1\n                        if n>sup:\n                                maisons[ville[sup]]+=1\n                                if maisons[ville[sup]]==1:\n                                        nbZeros-=1\n        print(minimum)\nmain()\n", "\nn = int(input())\ns = input()\n\nq = len(set(s))\n\nd = {}\ncount = 0\n\nbest = 999999999\nj = 0\nfor i in range(n):\n\tif s[i] not in d:\n\t\td[s[i]] = 0\n\t\tcount += 1\n\t\n\td[s[i]] += 1\n\tif count == q:\n\t\twhile d[s[j]] > 1:\n\t\t\td[s[j]] -= 1\n\t\t\tj += 1\n\t\tbest = min(best, i - j + 1)\n\nprint(best)", "n = int(input())\ntemp = input()\nst=[c for c in temp]\ntemp=set(st)\nnT=len(temp)\ns={}\nfor i in temp:\n\ts[i]=0\ncurrT=set()\ni=0\nj=0\nminL=10**10\nfor i in range(len(st)):\n\tcurrT.add(st[i])\n\ts[st[i]]+=1\n\twhile j<i and (s[st[j]]>1):\n\t\ts[st[j]]-=1\n\t\tj+=1\n\tif len(currT)==nT:\n\t\tminL=min(minL,i-j+1)\n\nprint(minL)", "n  = int (input())\ns = input()\nt = set()\nfor i in range(n):\n    t.add(ord(s[i]))\nl = len(t)\no = dict()\np = 0\ni = 0\nwhile p < l:\n    r = o.get(ord(s[i]), 0)\n    if r == 0:\n        o[ord(s[i])] = 1\n        p += 1\n    else:\n        o[ord(s[i])] += 1\n    i += 1\nleft = 0\nminn = i - left\nwhile True:\n    if o[ord(s[left])] > 1:\n        o[ord(s[left])] -= 1\n        left += 1\n        minn = min(minn, i - left)\n    else:\n        if i >= n:\n            break\n        o[ord(s[i])] += 1\n        i += 1\nprint(minn)\n\n", "def pro():\n    n = int(input())\n    s = input()\n    l = 0\n    r = 0\n    p = len(set(s))\n    m = 100001\n    y = len(s)\n    k = set(s[0])\n    d = dict()\n    d[s[0]] = d.get(s[0], 0) + 1\n    while r < y:\n            if len(k)<p:\n                r += 1\n                if r < y:\n                    k.add(s[r])\n                    d[s[r]] = d.get(s[r], 0) + 1\n            else:\n                m = min(m, r - l + 1)\n                if d[s[l]] == 1:\n                    d[s[l]] = 0\n                    k.remove(s[l])\n                else:\n                    d[s[l]] -= 1\n                l += 1\n\n    print(m)\npro()\n", "n = int(input())\ns = input()\ntCap = []\nshortest = n\nl = 0\nfor r in range(n):\n    if s[r] not in tCap:\n        tCap+= s[r]\n        shortest = r-l+1\n    else:\n        while s[l] in s[l+1:r+1]:\n            l+=1\n        if r-l+1 < shortest:\n            shortest = r-l+1\nprint(shortest)\n", "def createdict():\n  x={}\n  for i in range(26):\n    x[chr(ord('a')+i)]=i\n  for i in range(26,52):\n    x[chr(ord('A')+i-26)]=i\n  return x\n\nn=int(input().strip())\ns=input().strip()\nl=[[] for i in range(52)]\nts=set()\ncs=set()\nd=createdict()\n\nfor i in range(n):\n  if s[i] not in ts:\n    ts.add(s[i])\n  l[d[s[i]]].append(i)\n\nfor end in range(n):  # start = 0\n  if s[end] not in cs:\n    cs.add(s[end])\n  if ts&cs == ts:\n    break\n\nans=end+1\nflag=0\n\nfor start in range(1,n):\n  c=s[start-1]\n  while l[d[c]]:\n    if l[d[c]][0]<start:\n      del l[d[c]][0]\n      if len(l[d[c]])==0:\n        flag=1\n    elif start<=l[d[c]][0]<=end:\n      break\n    else:\n      end=l[d[c]][0]\n      break\n  if flag:\n    break\n  ans=min(ans,end-start+1)\n  \nprint(ans)", "from collections import defaultdict\n\n\ndef main():\n    n = int(input())\n    s = input()\n    count = len(set(s))\n    d = defaultdict(int)\n    res = n\n    i = 0\n    d[s[0]] += 1\n    j = 1\n    while j < n:\n        if len(d) == count:\n            res = min(res, j - i)\n            d[s[i]] -= 1\n            if d[s[i]] == 0:\n                del d[s[i]]\n            i += 1\n        else:\n            d[s[j]] += 1\n            j += 1\n    while len(d) == count:\n        res = min(res, j - i)\n        d[s[i]] -= 1\n        if d[s[i]] == 0:\n            del d[s[i]]\n        i += 1\n\n    print(res)\n\nmain()\n", "n = int(input())\nflats = input()\ntypes = set(flats)\ncounter = {}\nmenor = n\nj = 0\nfor i in range(n):\n    if counter.get(flats[i], 0) == 0:\n        counter[flats[i]] = 1\n    else:\n        counter[flats[i]] += 1\n    if len(counter) < len(types):\n        continue\n    while counter[flats[j]] > 1:\n        counter[flats[j]] -= 1\n        j += 1\n    menor = min(menor, i-j+1)\n    if menor == len(types):\n        break\nprint(menor)\n", "n = int(input())\nflats = input()\ntypes = set(flats)\ncounter = {}\nmenor = n\nj = 0\nfor i in range(n):\n    if flats[i] not in counter:\n        counter[flats[i]] = 0\n    counter[flats[i]] += 1\n    if len(counter) < len(types):\n        continue\n    while counter[flats[j]] > 1:\n        counter[flats[j]] -= 1\n        j += 1\n    menor = min(menor, i-j+1)\n    if menor == len(types):\n        break\nprint(menor)\n", "n = int(input())\ns = input()\n\np = set()\nfor c in s:\n    p.add(c)\n\npc = len(p)\n\nd = dict()\nl = 0\nr = 0\nd[s[r]] = 1\nwhile len(d) < pc:\n    r += 1\n    if s[r] in d:\n        d[s[r]] += 1\n    else:\n        d[s[r]] = 1\nm = r - l\n\nwhile l + 1 < n:\n    d[s[l]] -= 1\n    if d[s[l]] == 0:\n        del d[s[l]]\n    l += 1\n    while (r + 1 < n) and (len(d) < pc):\n        r += 1\n        if s[r] in d:\n            d[s[r]] += 1\n        else:\n            d[s[r]] = 1\n    if len(d) < pc:\n        break\n    m = min(m, r - l)\n         \nprint(m + 1)\n\n", "n = int(input())\ns = input()\ntypes = len(set(s))\nd = dict()\nc = 0\nj = 0\nans = 10**10\nfor i in range(n):\n    if s[i] not in d:\n        d[s[i]] = 0\n        c+=1\n    d[s[i]]+=1\n    if c ==types:\n        while d[s[j]] > 1:\n            d[s[j]]-=1\n            j+=1\n        ans = min(ans,i-j+1)\nprint(ans)\n", "from sys import stdin\ndef main():\n        n=int(stdin.readline())\n        ville=stdin.readline()\n        minimum=n\n        maisons={}\n        nbType=0\n        for maison in ville:\n                if maison!=\"\\n\" and maison not in maisons:\n                        maisons[maison]=0\n                        nbType+=1\n        nbZeros=nbType-1\n        inf=0\n        sup=0\n        maisons[ville[0]]+=1\n        while n>sup:\n                if nbZeros==0:\n                        minimum=min(minimum,sup-inf+1)\n                        maisons[ville[inf]]-=1\n                        if maisons[ville[inf]]==0:\n                                nbZeros+=1\n                        inf+=1\n\n                else:\n                        sup+=1\n                        if n>sup:\n                                maisons[ville[sup]]+=1\n                                if maisons[ville[sup]]==1:\n                                        nbZeros-=1\n        print(minimum)\nmain()\n", "n=int(input())\ns=input()\nk=k1=n\nq=set()\nc=0\nw=0\nt=False\nfor i in range(n):\n    if s[i] not in q:\n        q.add(s[i])\n        w=i\n        k1=k=w-c+1\nwhile True:\n    if s[c] in s[c+1:w+1]:\n        if w-c<k1:\n            k1=w-c\n            if k1<k:\n                k=k1\n        c+=1\n    else:\n        for i in range(c+1,n):\n            if s[i]==s[c]:\n                w=i\n                t=True\n                break\n        if t==False:\n            print(k)\n            break\n        t=False\n", "n = int(input())\ns = input()\n\nq = len(set(s))\n\nd = {}\ncount = 0\n\nbest = 999999999\nj = 0\nfor i in range(n):\n\tif s[i] not in d:\n\t\td[s[i]] = 0\n\t\tcount += 1\n\t\n\td[s[i]] += 1\n\tif count == q:\n\t\twhile d[s[j]] > 1:\n\t\t\td[s[j]] -= 1\n\t\t\tj += 1\n\t\tbest = min(best, i - j + 1)\n\nprint(best)", "def main():\n    input()\n    s = input()\n    d = dict.fromkeys(s, 0)\n    le, res = len(d), []\n    iti, itj = (iter(enumerate(s)) for _ in \"12\")\n    try:\n        while True:\n            while le:\n                i, c = next(iti)\n                if d[c]:\n                    d[c] += 1\n                else:\n                    d[c] = 1\n                    le -= 1\n            while True:\n                j, c = next(itj)\n                if d[c] > 1:\n                    d[c] -= 1\n                else:\n                    d[c], le = 0, 1\n                    res.append(i - j)\n                    break\n    except StopIteration:\n        print(min(res) + 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,s=int(input()),input()\ndis = len(set(s))\nmp = {}\nl,r,m,cnt=0,0,99999999,0\n\nfor c in s:\n    if c not in mp:\n        mp[c]=0\n        cnt+=1\n    mp[c]+=1\n    if cnt == dis:\n        while mp[s[l]]>1:\n            mp[s[l]]-=1\n            l+=1\n        m = min(m,r-l+1)\n    r+=1\nprint(m)\n", "n = int(input())\ns = input()\nall_types = set()\ncount = {}\nfor c in s:\n    all_types.add(c)\n    count[c] = 0\nn_all_types = len(all_types)\ndef solve():\n    ret = n\n    first = 0\n    last = 0\n    n_types = 0\n    while first <= last:\n        while n_types < n_all_types:\n            if last == n:\n                return ret\n            if count[s[last]] == 0:\n                n_types += 1\n            count[s[last]] += 1\n            last += 1\n        ret = min(ret, last - first)\n        if count[s[first]] == 1:\n            n_types -= 1\n        count[s[first]] -= 1\n        first += 1\n    return ret\nprint(solve())\n", "N = int(input())\nA = list(map(ord, list(input())))\nS = [0] * 150\nfor i in range(N):\n\tS[A[i]] += 1\nPokemon = len(S) - S.count(0)\nL = 0\nR = N\nwhile(R - L > 1):\n\tM = (R + L) // 2\n\tl = 0\n\tr = 0\n\tS = [0] * 150\n\tcount = 0\n\tis_ok = False\n\twhile r < l + M:\n\t\tif S[A[r]] == 0:\n\t\t\tcount += 1\n\t\tS[A[r]] += 1\n\t\tr += 1\n\tif count == Pokemon:\n\t\tis_ok = True\n\twhile r < N and not is_ok:\n\t\tif S[A[l]] == 1:\n\t\t\tcount -= 1\n\t\tS[A[l]] -= 1\n\t\tif S[A[r]] == 0:\n\t\t\tcount += 1\n\t\tS[A[r]] += 1\n\t\tl += 1\n\t\tr += 1\n\t\tif count == Pokemon:\n\t\t\tis_ok = True\n\tif is_ok:\n\t\tR = M\n\telse:\n\t\tL = M\nprint(R)\n", "from collections import Counter\nc=Counter()\nans=n=int(input())\ns=input()\nk=len(set(s))\ni=j=t=0\nwhile j<n:\n    while len(c)<k and j<n: c[s[j]]+=1; j+=1\n    while len(c)==k:\n        if j-i<ans: ans=j-i\n        c[s[i]]-=1\n        if c[s[i]]==0: del c[s[i]]\n        i+=1\nprint(ans)\n", "n=int(input())\nstri=input()\ndict={}\nlenght=len(set(stri))\ncount=0\nj=0\nresult=999999999\nfor i in range(n):\n    if stri[i] not in dict:\n        dict[stri[i]]=0\n        count += 1\n\n    dict[stri[i]]+=1\n    if count==lenght:\n        while dict[stri[j]]>1:\n            dict[stri[j]]-=1\n            j+=1\n        result= min(result,i-j+1)\nprint(result)", "n=int(input())\nstri=input()\ndict={}\nlenght=len(set(stri))\ncount=0\nj=0\nresult=999999999\nfor i in range(n):\n    if stri[i] not in dict:\n        dict[stri[i]]=0\n        count += 1\n\n    dict[stri[i]]+=1\n    if count==lenght:\n        while dict[stri[j]]>1:\n            dict[stri[j]]-=1\n            j+=1\n        result= min(result,i-j+1)\nprint(result)\n"]