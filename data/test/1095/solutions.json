["n,w56=map(int,input().split())\nif(n==1):\n    x=[int(input())]\nelse:\n    x=[int(i) for i in input().split()]\nk,w90=map(int,input().split())\nif(k==1):\n    y=[int(input())]\nelse:\n    y=[int(i) for i in input().split()]\nt=0\nimport collections\nfor i in range(1,35):\n    m=collections.Counter()\n    for j in range(n):\n        m[((x[j]-(2**(i-1)))%(2**i))]+=1\n    for j in range(k):\n        m[(y[j])%(2**i)]+=1\n    t=max(t,max([m[o] for o in m.keys()]))\nif(t>=2):\n    print(t)\nelse:\n    p=0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if(x[i]==y[j]):\n                print(2)\n                p=1\n                break\n        if(p==1):\n            break\n    if(p==0):\n        print(1)", "n, y1 = map(int, input().split())\na = list(map(int, input().split()))\nm, y2 = map(int, input().split())\nb = list(map(int, input().split()))\n\na_st, b_st = dict(), dict()\nosn = 2 ** 32\n\nk_a, k_b = set(), set()\nfor el in a:\n    try:\n        a_st[el % osn] += 1\n    \n    except KeyError:\n        a_st[el % osn] = 1\n    \n    finally:\n        k_a.add(el % osn)\n\nfor el in b:\n    try:\n        b_st[el % osn] += 1\n    \n    except KeyError:\n        b_st[el % osn] = 1\n    \n    finally:\n        k_b.add(el % osn)\n\nans = 2\nfor i in range(1, 33)[::-1]:\n    temp = 0\n    \n    for el in k_a:\n        try:\n            temp = max(temp, a_st[el] + b_st[(el + osn // 2) % osn])\n        \n        except KeyError:\n            temp = max(temp, a_st[el])\n    \n    for el in k_b:\n        try:\n            temp = max(temp, b_st[el] + a_st[(el + osn // 2) % osn])\n        \n        except KeyError:\n            temp = max(temp, b_st[el])\n    \n    ans = max(ans, temp)\n    osn //= 2\n    \n    k_ = set()\n    k_add = set()\n    for el in k_a:\n        if el >= osn:\n            try:\n                a_st[el - osn] += a_st[el]\n            \n            except KeyError:\n                a_st[el - osn] = a_st[el]\n            \n            finally:\n                del a_st[el]\n                k_add.add(el - osn)\n                k_.add(el)\n    \n    for el in k_:\n        k_a.remove(el)\n    \n    for el in k_add:\n        k_a.add(el)\n  \n    k_ = set()\n    k_add = set()\n    for el in k_b:\n        if el >= osn:\n            try:\n                b_st[el - osn] += b_st[el]\n            \n            except KeyError:\n                b_st[el - osn] = b_st[el]\n            \n            finally:\n                del b_st[el]\n                k_add.add(el - osn)\n                k_.add(el)\n    \n    for el in k_:\n        k_b.remove(el)\n        \n    for el in k_add:\n        k_b.add(el)\n    \nprint(ans)", "n, y1 = map(int, input().split())\na = list(map(int, input().split()))\nm, y2 = map(int, input().split())\nb = list(map(int, input().split()))\n\na_st, b_st = dict(), dict()\nosn = 2 ** 30\n\nk_a, k_b = set(), set()\nfor el in a:\n    try:\n        a_st[el % osn] += 1\n    \n    except KeyError:\n        a_st[el % osn] = 1\n    \n    finally:\n        k_a.add(el % osn)\n\nfor el in b:\n    try:\n        b_st[el % osn] += 1\n    \n    except KeyError:\n        b_st[el % osn] = 1\n    \n    finally:\n        k_b.add(el % osn)\n\nans = 2\nfor i in range(1, 31)[::-1]:\n    temp = 0\n    \n    for el in k_a:\n        try:\n            temp = max(temp, a_st[el] + b_st[(el + osn // 2) % osn])\n        \n        except KeyError:\n            temp = max(temp, a_st[el])\n    \n    for el in k_b:\n        try:\n            temp = max(temp, b_st[el] + a_st[(el + osn // 2) % osn])\n        \n        except KeyError:\n            temp = max(temp, b_st[el])\n    \n    ans = max(ans, temp)\n    osn //= 2\n    \n    k_ = set()\n    k_add = set()\n    for el in k_a:\n        if el >= osn:\n            try:\n                a_st[el - osn] += a_st[el]\n            \n            except KeyError:\n                a_st[el - osn] = a_st[el]\n            \n            finally:\n                del a_st[el]\n                k_add.add(el - osn)\n                k_.add(el)\n    \n    for el in k_:\n        k_a.remove(el)\n    \n    for el in k_add:\n        k_a.add(el)\n  \n    k_ = set()\n    k_add = set()\n    for el in k_b:\n        if el >= osn:\n            try:\n                b_st[el - osn] += b_st[el]\n            \n            except KeyError:\n                b_st[el - osn] = b_st[el]\n            \n            finally:\n                del b_st[el]\n                k_add.add(el - osn)\n                k_.add(el)\n    \n    for el in k_:\n        k_b.remove(el)\n        \n    for el in k_add:\n        k_b.add(el)\n    \nprint(ans)", "n, y1 = map(int, input().split())\na = list(map(int, input().split()))\nm, y2 = map(int, input().split())\nb = list(map(int, input().split()))\n\na_st, b_st = dict(), dict()\nosn = 2 ** 29\n\nk_a, k_b = set(), set()\nfor el in a:\n    try:\n        a_st[el % osn] += 1\n    \n    except KeyError:\n        a_st[el % osn] = 1\n    \n    finally:\n        k_a.add(el % osn)\n\nfor el in b:\n    try:\n        b_st[el % osn] += 1\n    \n    except KeyError:\n        b_st[el % osn] = 1\n    \n    finally:\n        k_b.add(el % osn)\n\nans = 2\nfor i in range(1, 30)[::-1]:\n    temp = 0\n    \n    for el in k_a:\n        try:\n            temp = max(temp, a_st[el] + b_st[(el + osn // 2) % osn])\n        \n        except KeyError:\n            temp = max(temp, a_st[el])\n    \n    for el in k_b:\n        try:\n            temp = max(temp, b_st[el] + a_st[(el + osn // 2) % osn])\n        \n        except KeyError:\n            temp = max(temp, b_st[el])\n    \n    ans = max(ans, temp)\n    osn //= 2\n    \n    k_ = set()\n    k_add = set()\n    for el in k_a:\n        if el >= osn:\n            try:\n                a_st[el - osn] += a_st[el]\n            \n            except KeyError:\n                a_st[el - osn] = a_st[el]\n            \n            finally:\n                del a_st[el]\n                k_add.add(el - osn)\n                k_.add(el)\n    \n    for el in k_:\n        k_a.remove(el)\n    \n    for el in k_add:\n        k_a.add(el)\n  \n    k_ = set()\n    k_add = set()\n    for el in k_b:\n        if el >= osn:\n            try:\n                b_st[el - osn] += b_st[el]\n            \n            except KeyError:\n                b_st[el - osn] = b_st[el]\n            \n            finally:\n                del b_st[el]\n                k_add.add(el - osn)\n                k_.add(el)\n    \n    for el in k_:\n        k_b.remove(el)\n        \n    for el in k_add:\n        k_b.add(el)\n    \nprint(ans)", "n, y1 = map(int, input().split())\na = list(map(int, input().split()))\nm, y2 = map(int, input().split())\nb = list(map(int, input().split()))\n\nans = 2\n\nfor i in range(31):\n\tstep = (2 << i)\n\thalf = (step >> 1)\n\n\tcounts = dict()\n\n\tfor x in a:\n\t\trem = x % step\n\t\tcount = counts.get(rem, 0)\n\t\tcounts[rem] = count + 1\n\t\n\tfor x in b:\n\t\trem = (x + half) % step\n\t\tcount = counts.get(rem, 0)\n\t\tcounts[rem] = count + 1\n\t\n\tres = max(counts.values())\n\tans = max(ans, res)\n\nprint(ans)", "n, y1 = map(int, input().split())\na = list(map(int, input().split()))\nm, y2 = map(int, input().split())\nb = list(map(int, input().split()))\n\nans = 2\n\nfor i in range(30):\n\tstep = (2 << i)\n\thalf = (step >> 1)\n\n\tcounts = dict()\n\n\tfor x in a:\n\t\trem = x % step\n\t\tcount = counts.get(rem, 0)\n\t\tcounts[rem] = count + 1\n\t\n\tfor x in b:\n\t\trem = (x + half) % step\n\t\tcount = counts.get(rem, 0)\n\t\tcounts[rem] = count + 1\n\t\n\tres = max(counts.values())\n\tans = max(ans, res)\n\nprint(ans)", "#coding:utf-8\n\nn, _ = map (int, input().strip ().split ())\na = list (map (int, input().strip ().split ()))\nm, _ = map (int, input().strip ().split ())\nb = list (map (int, input().strip ().split ()))\n\ndef solve (T):\n\tnonlocal a, b\n\td = dict()\n\tfor i in b:\n\t\tpos = i%T\n\t\tif pos in d:\n\t\t\td[pos] += 1\n\t\telse:\n\t\t\td[pos] = 1\n\tfor i in a:\n\t\tpos = (i+T/2)%T\n\t\tif pos in d:\n\t\t\td[pos] += 1\n\t\telse:\n\t\t\td[pos] = 1\n\treturn max (d.values())\n\nT = 2\nans = 0\nwhile True:\n\tans = max (ans, solve (T))\n\tT *= 2\n\tif T > 1e9:\n\t\tbreak\n\nif len (set (a) and set (b)) > 0:\n\tans = max (ans, 2)\nprint (ans)"]