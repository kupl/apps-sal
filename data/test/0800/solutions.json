["3\n\nimport math\n\nn = int(input())\npoints = [tuple(map(int, input().split())) for _ in range(n)]\nangles = sorted([math.atan2(x, y) for x, y in points])\nangles.append(angles[0] + 2 * math.pi)\nmax_angle = max([abs(a - b) for a, b in zip(angles[:-1], angles[1:])] + [])\nprint('%0.9f' % (180 * (2 * math.pi - max_angle) / math.pi))\n", "from math import atan2, pi\nn = int(input())\na = [map(int, input().split()) for i in range(n)]\na = sorted(atan2(y, x) for x, y in a)\nd = [a[i + 1] - a[i] for i in range(n - 1)]\nd.append(2 * pi - a[n - 1] + a[0])\nprint(360 - 180 * max(d) / pi)", "import math\ndef Q(x,y):\n    if(x==0):\n        if(y>0):\n            return math.pi/2\n        if(y<0):\n            return (math.pi/2)*3\n    #y=mx\n    m=abs(y/x)\n    theta=math.atan(m)\n    if(y>=0 and x>=0):\n        return theta\n    if(y>=0 and x<=0):\n        return math.pi-theta\n    if(y<=0 and x<=0):\n        return math.pi+theta\n    else:\n        return 2*math.pi-theta\n    \n\nn=int(input())\nP=[]\nfor i in range(n):\n    x,y=list(map(int,input().split()))\n    P.append(Q(x,y))\n\nP.sort()\nans=360\nfor i in range(1,n):\n    ans=min(ans,(math.pi*2)-(P[i]-P[i-1]))\nans=min(ans,P[n-1]-P[0])\nprint((ans*360)/(2*math.pi))\n", "t = []\nfrom math import pi\nfrom math import atan\n\ndef f(x,y):\n    if y == 0:\n        if x>0:\n            return 0\n        else:\n            return pi\n\n    if x == 0:\n        if y>0:\n            return pi/2\n        else:\n            return 3*pi/2\n\n    if x > 0 and y > 0:\n        return atan(y/x)\n\n    if x < 0 and y < 0:\n        return pi + atan(y/x)\n\n    if x > 0 and y < 0:\n        return 2*pi+atan(y/x)\n\n    if x < 0 and y > 0:\n        return pi+atan(y/x)\n\ndef g(x,y):\n    return 180*f(x,y)/pi\n\n\nfor i in range(int(input())):\n    x, y = list(map(int, input().split(' ')))\n    \n    t.append(g(x,y))\n\nt.sort()\n\nm = t[-1] - t[0]\nfor i in range(1, len(t)):\n    m = min(m, 360 - (t[i]-t[i-1]))\nprint(m)", "#!/usr/bin/env python3\n\nfrom sys import stdin\nfrom math import atan2, pi, degrees\n\ndef main():\n    num_points = int(stdin.readline())\n    angles = []\n\n    for point in range(num_points):\n        x, y = list(map(int, stdin.readline().split()))\n        angles.append(atan2_deg(y, x))\n\n    # calculate best angle\n    angles = sorted(angles)\n    best = abs(angles[-1] - angles[0])\n    for i in range(1, num_points):\n        best = min(best, 360.0 - abs(angles[i] - angles[i - 1]))\n    print(best)\n\ndef atan2_deg(y, x):\n    return degrees(atan2(y, x) + pi)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin\nimport math\n\nN = int(stdin.readline())\n\nangles = []\n\nfor n in range(N):\n    x, y = list(map(int, stdin.readline().split()))\n\n    angles.append((math.atan2(y, x) + 2 * math.pi) % (2 * math.pi))\n\nangles.sort()\nangles.append(angles[0] + 2 * math.pi)\n\nmax_gap = max(angles[i] - angles[i - 1] for i in range(1, len(angles)))\nprint(360 - 180 * max_gap / math.pi)\n", "from math import *\nn = int(input())\npts = [ list(map(float,input().split())) for _ in range(n) ]\na = sorted([ atan2(y,x) for x,y in pts])\nd = [ a[i]-a[i-1] for i in range(1,len(a)) ]\nd.append( 2*pi+a[0]-a[-1] )\nprint(degrees(2*pi-max(d)))\n\n\n#   C:\\Users\\Usuario\\HOME2\\Programacion\\ACM\n", "from math import atan2, pi\n\ndef solve():\n    n = int(input().rstrip())\n    angles = []\n    for _ in range(n):\n        a, b = list(map(int, input().rstrip().split()))\n        angles.append(atan2(b, a))\n    angles.sort()\n    maxangle = 2 * pi - (angles[n - 1] - angles[0])\n    for i in range(n - 1):\n        maxangle = max(angles[i + 1] - angles[i], maxangle)\n    return 360 - maxangle * 180 / pi\n\ndef __starting_point():\n    print(solve())\n\n__starting_point()", "import math\nfrom math import atan2 as t\na=[]\nfor i in range(int(input())):\n  x,y=map(int,input().split())\n  a.append(180*t(y,x)/math.pi)\na.sort()\nans=a[-1]-a[0]\nfor i in range(len(a)-1):\n  ans=min(ans,360-a[i+1]+a[i])\nprint(ans)", "import math\n\nN = int(input())\nangles = []\nfor _ in range(N):\n  x, y = map(int, input().split())\n  angles.append(math.atan2(y, x))\n  \nangles.sort()\n\nmax_angle = 0\n\nfor i in range(N):\n  angle = abs(angles[i] - angles[(i+1)%N])\n  if i == N-1:\n    angle = 2*math.pi - angle\n  max_angle = max(max_angle, angle)\n  \nprint(360.0 - (max_angle * 180) / math.pi)", "from math import pi, atan2\n\nnumMannequins = int(input())\n\ncoordinates = []\nfor i in range(numMannequins):\n    coordinates.append(map(int, input().split()))\n\ncoordinates = sorted(atan2(y, x) for x, y in coordinates)\n\ndistance = [(coordinates[i + 1] - coordinates[i]) for i in range(numMannequins - 1)]\ndistance.append(2 * pi - coordinates[numMannequins - 1] + coordinates[0])\n\nprint(360 - (180 * (max(distance) / pi)))", "import math\n\nout = []\n\nfor i in range(int(input())):\n    x, y = map(int,input().split())\n    out.append(180 * (math.atan2(y,x) / math.pi))\n    \nout.sort()\n\nres = out[-1] - out[0]\n\nfor i in range(len(out)-1):\n    res = min(res, 360 - out[i+1] + out[i])\n    \nprint(res)", "def main():\n    from sys import stdin, stdout\n    from math import atan2, pi\n    n = int(stdin.readline().strip())\n    angles = []\n    for i in range(n):\n        (x, y) = list(map(float, stdin.readline().strip().split(' ')))\n        angles.append((atan2(y, x) * 180 / pi) % 360)\n    angles = sorted(angles)\n    m = 0\n    for i in range(n - 1):\n        m = max(m, angles[i + 1] - angles[i])\n    m = max(m, (angles[0] - angles[-1]) % 360)\n    stdout.write('{:.15f}\\n'.format((360 - m) % 360))\nmain()\n\n", "from sys import stdin\nimport functools\nimport math\n\ndef read(): return list(map(int, stdin.readline().split()))\n\nn, = read()\na = [ ]\nfor i in range(n):\n  x,y = read()\n  a.append ( math.atan2(y,x)%(2*math.pi) )\na = sorted(a)\n\nif abs(a[0]-a[-1]) < 1e-9:\n  print( 0 )\n  return\n\nans = 0\nfor i in range(n):\n  ans = max ( ans, a[i]-a[i-1] )\nans = max ( ans, 2*math.pi - (a[-1] - a[0]) )\n\nprint(360.0 - ans/math.pi*180.0)\n", "from sys import stdin\nimport math\n\nN = int(stdin.readline())\n\na = []\n\nfor n in range(N):\n    x, y = map(int, stdin.readline().split())\n\n    a.append((math.atan2(y, x) + 2 * math.pi) % (2 * math.pi))\n\na.sort()\na.append(a[0] + 2 * math.pi)\n\nmax_gap = max(a[i] - a[i - 1] for i in range(1, len(a)))\nprint(360 - 180 * max_gap / math.pi)", "from math import atan2, degrees, pi\n\ndef main():\n\tnum_man = int(input())\n\tangles = []\n\tfor n in range(num_man):\n\t\tx, y = input().strip().split(' ')\n\t\tx, y = int(x), int(y)\n\t\tangles.append(atan2(y, x))\n\tangles.sort()\n\tmax_diff = 0\n\tfor i in range(len(angles) - 1):\n\t\tmax_diff = max(max_diff, angles[i + 1] - angles[i])\n\tdiff = angles[0] - angles[num_man - 1]\n\tif diff < 1e-7:\n\t\tdiff += 360 * pi / 180\n\tmax_diff = max(max_diff, diff)\n\tres = 360 - (max_diff * 180 / pi)\n\tprint(res)\n\nmain()", "from sys import stdin\nimport math\n\nN = int(stdin.readline())\n\na = []\n\nfor n in range(N):\n    x, y = map(int, stdin.readline().split())\n\n    a.append((math.atan2(y, x) + 2 * math.pi) % (2 * math.pi))\n\na.sort()\na.append(a[0] + 2 * math.pi)\n\nmax_gap = max(a[i] - a[i - 1] for i in range(1, len(a)))\nprint(360 - 180 * max_gap / math.pi)", "from math import atan2, pi\n\nn = int(input())\n\na = [list(map(int, input().split())) for i in range(n)]\n\na = sorted(atan2(y, x) for x, y in a)\n\nd = [a[i + 1] - a[i] for i in range(n - 1)]\n\nd.append(2 * pi - a[n - 1] + a[0])\n\nprint(360 - 180 * max(d) / pi)\n\n\n\n# Made By Mostafa_Khaled\n", "from math import atan2, pi\nn = int(input())\na = [map(int, input().split()) for i in range(n)]\na = sorted(atan2(y, x) for x, y in a)\nd = [a[i + 1] - a[i] for i in range(n - 1)]\nd.append(2 * pi - a[n - 1] + a[0])\nprint(360 - 180 * max(d) / pi)", "from sys import stdin\nimport math\n\nN = int(stdin.readline())\n\nangles = []\n\nfor n in range(N):\n    x, y = map(int, stdin.readline().split())\n\n    angles.append((math.atan2(y, x) + 2 * math.pi) % (2 * math.pi))\n\nangles.sort()\nangles.append(angles[0] + 2 * math.pi)\n\nmax_gap = max(angles[i] - angles[i - 1] for i in range(1, len(angles)))\nprint(360 - 180 * max_gap / math.pi)", "import sys, math\n\nn = int(sys.stdin.readline())\npoints = []\nfor i in range(n):\n    [a, b] = list(map(int, sys.stdin.readline().split()))\n    points.append(math.atan2(a,b))\npoints = sorted(points)\ndiffs = []\nfor i in range(n):\n    if (i == n-1):\n        diffs.append(points[0]-points[n-1] + 2 * math.pi)\n    else:\n        diffs.append(points[i+1]-points[i])\nprint(360-180*max(diffs)/math.pi)", "import math\n\nN = int(input())\nangles = []\nfor _ in range(N):\n  x, y = map(int, input().split())\n  angles.append(math.atan2(y, x))\n  \nangles.sort()\n\nmax_angle = 0\n\nfor i in range(N):\n  angle = abs(angles[i] - angles[(i+1)%N])\n  if i == N-1:\n    angle = 2*math.pi - angle\n  max_angle = max(max_angle, angle)\n  \nprint(360.0 - (max_angle * 180) / math.pi)", "import math\n\nn = int(input())\n\ncoors = [[int(item) for item in input().split(' ')] for i in range(n)]\n\n\ndef get_pos(item):\n    (x, y) = item\n\n    deg = math.degrees(math.atan(abs(math.inf if x == 0 else y / x)))\n\n    if y < 0:\n        if x >= 0:\n            return 360 - deg\n        else:\n            return 180 + deg\n    else:\n        if x >= 0:\n            return deg\n        else:\n            return 180 - deg\n\n\nangles = [get_pos(item) for item in coors]\n\nangles.sort()\n\nt = [angles[0] + 360 - angles[-1]]\n\nfor i in range(1, n):\n    t.append(angles[i] - angles[i - 1])\n\nprint(360 - max(t))\n"]