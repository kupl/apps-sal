["n = int(input())\ncnt = 0\ngems = list(map(int, input().split()))\npearls = set()\nfor i in range(n):\n    if gems[i] not in pearls:\n        pearls.add(gems[i])\n    else:\n        cnt += 1\n        pearls = set()\n    \nif cnt:\n    print(cnt)\n    first = 0\n    second = 0\n    pearls = set()\n    for i in range(n):\n        if gems[i] not in pearls:\n            pearls.add(gems[i])\n        else:\n            if second:\n                print(first + 1, second + 1)\n                first = second + 1\n            second = i\n            pearls = set()\n    print(first + 1, n)\nelse:\n    print('-1')", "n = int(input())\ndata = list(map(int, input().split()))\nanswer = []\nstart = 1\nfinish = 1\nhelp_set = set()\nfor i in range(n):\n    if data[i] in help_set:\n        answer.append([start, finish])\n        help_set = set()\n        start = finish + 1\n        finish += 1\n    else:\n        finish += 1\n        help_set.add(data[i])\nif len(answer) == 0:\n    print(-1)\nelif n == 1:\n    print(1)\n    print(1, 1)\nelse:\n    answer[-1][-1] = n\n    print(len(answer))\n    for i in range(len(answer)):\n        print(*answer[i])", "n = int(input())\ndata = list(map(int, input().split()))\nanswer = []\nstart = 1\nfinish = 1\nhelp_set = set()\nfor i in range(n):\n    if data[i] in help_set:\n        answer.append([start, finish])\n        help_set = set()\n        start = finish + 1\n        finish += 1\n    else:\n        finish += 1\n        help_set.add(data[i])\nif len(answer) == 0:\n    print(-1)\nelse:\n    answer[-1][-1] = n\n    print(len(answer))\n    for i in range(len(answer)):\n        print(*answer[i])", "n = int(input())\ndata = list(map(int, input().split()))\na = 0\nanswer = []\nstart = 1\nfinish = 1\nhelp_set = set()\nfor i in range(n):\n    if data[i] in help_set:\n        answer.append([start, finish])\n        help_set = set()\n        start = finish + 1\n        finish += 1\n    else:\n        finish += 1\n        help_set.add(data[i])\nif len(answer) == 0:\n    print(-1)\nelse:\n    answer[-1][-1] = n\n    print(len(answer))\n    for i in range(len(answer)):\n        print(*answer[i])", "n = int(input())\nlst = list(map(int, input().split()))\nans = []\nl = 0\nr = -1\ns = set()\nfor i in range(n):\n    if lst[i] in s:\n        ans.append([l + 1, i + 1])\n        s = set()\n        l = i + 1\n        r = i + 1\n    else:\n        s.add(lst[i])\n        \n    \nif r != n and r != -1:\n    ans[-1][1] = n\nif r == -1:\n    print(-1)\nelse:\n    print(len(ans))\n    for i in ans:\n        print(*i)\n", "n = int(input())\nli = list(map(int,input().split()))\ns=set()\nans=[]\nl=0\nr=-1\nfor i in range(n):\n\tif li[i] in s:\n\t\tans.append([l+1,i+1])\n\t\ts = set()\n\t\tl = i+1\n\t\tr=1\n\telse:\n\t\ts.add(li[i])\nif r==-1:\n\tprint(-1)\nelse:\n\tprint(len(ans))\n\tans[len(ans)-1][1]=n\n\tfor i in ans:\n\t\tprint(*i)", "#author=\"_rabbit\"\nn=int(input())\na=list(map(int,input().split()))\nans=[]\ns=set()\nflag=False\nl=0\nfor i in range(n):\n    if a[i] in s:\n        ans.append([l+1,i+1])\n        l=i+1\n        s=set()\n        flag=True\n    else:\n        s.add(a[i])\nif(flag==False):\n    print(-1)\nelse:\n    print(len(ans))\n    ans[len(ans)-1][1]=n\n    for i in ans:\n        print(*i)\n", "n = int(input())\nli = list(map(int,input().split()))\ns=set()\notv=[]\nl=0\nr=-1\nfor i in range(n):\n\tif li[i] in s:\n\t\totv.append([l+1,i+1])\n\t\ts = set()\n\t\tl = i+1\n\t\tr=1\n\telse:\n\t\ts.add(li[i])\nif r==-1:\n\tprint(-1)\nelse:\n\tprint(len(otv))\n\totv[len(otv)-1][1]=n\n\tfor i in otv:\n\t\tprint(*i)\n", "ans = []\ns = set()\nl = 1\nn = input()\nfor i, e in enumerate(map(int, input().split()), 1):\n    if e in s:\n        s = set()\n        ans += [(l, i)]\n        l = i + 1\n    else:\n        s.add(e)\nif ans:\n    print(len(ans))\n    ans[-1] = ans[-1][0], n\n    for a, b in ans:\n        print(a, b)\nelse:\n    print(-1)", "n = (int(input()))\nj = list(map(int,input().split()))\nb = 0\ne = 0\nans = []\nsubline = set()\nwhile e < n:\n    perl = j[e]\n    if perl in subline:\n        ans+=[[b+1,e+1]]\n        subline = set()\n        b = e+1\n        e+=1\n    else:\n        subline.add(perl)\n        e+=1;\nif len(ans) == 0:\n    print(-1)\nelse:\n\n    ans[-1][1] = n\n    print(len(ans))\n        \n    for i in range(len(ans)):\n        print(' '.join(list(map(str,ans[i]))))\n        \n    \n", "length = int(input())\ngems = input().split()\n\nresult = []\ns = 0\ndist = set()\npend_e = 0\npend_s = 0\nfor i in range(0, length):\n    cur = gems[i]\n    if cur not in dist:\n        dist.add(cur)\n    else:\n        if pend_e != 0:\n            result.append([pend_s, pend_e])\n        pend_e = i + 1\n        pend_s = s + 1\n        s = i + 1\n        dist.clear()\n\nif s != 0 and pend_e != length + 1:\n    result.append([pend_s, length])\n\nif len(result) == 0:\n    print(-1)\nelse:\n    print(len(result))\n\nfor r in result:\n    print(r[0], r[1])\n", "n = int(input())\na = list(map(int, input().split()))\nz = []; p = set()\nk1 = 1\nfor i in range(n):\n    if a[i] in p:\n        z.append((k1, i+1))\n        k1 = i+2\n        p = set()\n    else:\n        p.add(a[i])\nif len(z) > 0:\n    z[len(z)-1] = (z[len(z)-1][0], n)\n    print(len(z))\n    for k in z:\n        print(k[0], k[1])\nelse:\n    print(-1)\n", "n = int(input())\na = list(map(int, input().split()))\nsub = set()\nstarts = list()\nstarts.append(1)\nfor i in range(n):\n    if a[i] in sub:\n        sub = set()\n        starts.append(i+2)\n    else:\n        sub.add(a[i])\nl = len(starts)\nif l == 1:\n    print(-1)\nelse:\n    print(l-1)\n    for i in range(l-2):\n        print(starts[i], starts[i+1]-1)\n    print(starts[l-2], n)\n\n        \n", "n = int(input())\ns = input().split()\ninitial_pos = 0\nans = 0\nans_list = []\nl = set()\nfor i in range(n):\n\tif s[i] in l:\n\t\tans += 1\n\t\tans_list.append([initial_pos+1, i+1])\n\t\tinitial_pos = i+1\n\t\tl = set()\n\telse:\n\t\tl.add(s[i])\nif ans == 0:\n\tprint(-1)\nelse:\n\tif not ans_list[-1][1] == n:\n\t\tans_list[-1][1] = n\n\tprint(ans)\n\tfor i in ans_list:\n\t\tprint(' '.join(str(e) for e in i))", "3\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nr = []\ns = set()\nl = 0\nfor i, x in enumerate(a):\n  if x in s:\n    r.append([l + 1, i + 1])\n    l = i + 1\n    s = set()\n  else:\n    s.add(x)\nif l == 0:\n  print(-1)\nelse:\n  if s:\n    r[-1][1] = n\n  print(len(r))\n  print('\\n'.join('{0} {1}'.format(p, q) for (p, q) in r))\n\n", "'''\nCreated on Jan 25, 2016\n\n@author: KANDARP\n'''\nimport sys\nn=int(sys.stdin.readline());\narr=[int(x) for x in input().split()];\nsets=set();\nresult=[];\nans=0;\nl=0;\nr=0;\nfor i in arr:\n    if(i in sets):\n        ans=ans+1;\n        sets.clear();\n        result.append([l+1,r+1]);\n        l=r+1;\n    else:\n        sets.add(i);\n    r=r+1;\nif ans==0:\n    print((-1));\nelse:\n    result[len(result)-1]=[result[len(result)-1][0],n];\n    print(ans);    \n    print(('\\n'.join('{0} {1}'.format(p, q) for (p, q) in result)));     \n\n\n\n", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2016 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\n\ndef good(nums):\n    for num in nums:\n        if nums[num] > 1:\n            return True\n    return False\n\nn = int(input())\n\na = [int(i) for i in input().split()]\n\ns = []\n\nl, r = 0, 0\nnums = {}\n\nfor i in range(n):\n    num = a[i]\n\n    if num in nums:\n        break\n    else:\n        nums[num] = True\nelse:\n    print(-1)\n    return\n\nnums = {}\n\nwhile r < n:\n    while r < n:\n        num = a[r]\n\n        if num in nums:\n            r += 1\n            break\n        else:\n            nums[num] = True\n\n        r += 1\n\n    r -= 1\n\n    s.append([l, r])\n    r += 1\n    l = r\n\n    nums = {}\n\nlength = len(s)\n\nlast = s[length-1]\n\nfor i in range(last[0], last[1]+1):\n    num = a[i]\n    if num in nums:\n        print(length)\n        break\n    else:\n        nums[num] = True\nelse:\n    s.pop()\n\n    s[length-2][1] = n-1\n\n    print(length-1)\n\nfor st in s:\n    for c in st:\n        print(c+1, end=\" \")\n    print()\n\n", "n = int(input())\nindex = 1\nmemory = set()\ncounter = 0\nsegments = [[0, 0]]\nfor number in input().split():\n    if number not in memory:\n        memory.add(number)\n    else:\n        counter += 1\n        segments.append([segments[-1][1] + 1, index])\n        memory = set()\n    index += 1\nsegments[-1][1] = n\nif counter != 0:\n    print(counter)\n    segments.remove([0, 0])\n    print('\\n'.join('{0} {1}'.format(p, q) for (p, q) in segments))\nelse:\n    print(-1)", "n = int(input())\nd={}\ns=input()\ns=s.split()\nstart =0\nans=[]\nfor i in range(n):\n    if s[i] not in d:\n        d[s[i]]=1\n    else:\n        ans.append([start+1,i+1])\n        start=i+1\n        d={}\nif ans==[]:\n    print(-1)\nelse:\n    print(len(ans))\n    for i in range(len(ans)):\n        if i==len(ans)-1:\n            print(ans[i][0],n)\n        else:\n            print(ans[i][0],ans[i][1])\n\n    \n    \n", "import sys\nn=int(input())\na=list(map(int,input().split()))\nb=set()\nbeg=1\nam=0\naml=[]\nfor i in range(n):\n    if a[i] in b:\n        aml.append([beg,i+1])\n        am+=1\n        b=set()\n        beg=i+2\n    else:\n        b.add(a[i])\nif am==0:\n    print(-1)\n    return\nif aml[am-1][1]!=n:\n    aml[am-1][1]=n\nprint(am)\nfor i in range(am):\n    print(aml[i][0],aml[i][1])\n", "n = int(input())\nans = list()\ns = set()\nfor i,x in enumerate(map(int, input().split())):\n    if not s:\n        idx = i+1\n    elif x in s:\n        ans.append((idx, i+1))\n        s = set()\n        continue\n    s.add(x)\nif len(ans):\n    ans[-1] = (ans[-1][0], n)\n    print(len(ans))\n    print('\\n'.join('%d %d' % p for p in ans))\nelse:\n    print(-1)", "n = int(input())\nA = [int(x) for x in input().split()]\ns = {A[0]}\nleft = 1\nsegments = []\nfor i in range(1, n):\n    if A[i] in s:\n        segments.append((left, i+1))\n        left = i+2\n        s.clear()\n    else:\n        s.add(A[i])\nif len(segments) == 0:\n    print(-1)\nelse:\n    segments[-1] = (segments[-1][0], n)\n    print(len(segments))\n    for l, r in segments:\n        print(l, r)\n", "n = int(input())\na = list(map(int, input().split(' ')))\n\nans = []\n\ns = 0\nmark = set([a[0]])\nfor i in range(1, n):\n    if a[i] in mark:\n        mark = set()\n        ans.append([s+1, i+1])\n        s = i+1\n    else:\n        mark.add(a[i])\n\nif len(ans) == 0:\n    print(-1)\nelse:\n    ans[-1][1] = n\n    print(len(ans))\n    for line in ans:\n        print(line[0], line[1])\n", "pearl_count = int(input())\npearls = [int(pearl) for pearl in input().split()]\nrecorded = set()\nintervals = []\nbegin = 1\nfor i in range(pearl_count):\n    if pearls[i] in recorded:\n        intervals.append([begin, i + 1])\n        recorded = set()\n        begin = i + 2\n    else:\n        recorded.add(pearls[i])\nif intervals:\n   intervals[-1][-1] = pearl_count\n   print(len(intervals))\n   [print(' '.join(map(str, interval))) for interval in intervals]\nelse:\n    print(-1)", "def main():\n    n, res = int(input()), []\n    s, i, fmt = set(), 1, \"{:n} {:n}\".format\n    for j, a in enumerate(input().split(), 1):\n        if a in s:\n            s = set()\n            res.append(fmt(i, j))\n            i = j + 1\n        else:\n            s.add(a)\n    if res:\n        print(len(res))\n        res[-1] = res[-1].split()[0] + ' ' + str(n)\n        print('\\n'.join(res))\n    else:\n        print(-1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]