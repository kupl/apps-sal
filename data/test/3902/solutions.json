["s = input()\ns = s[5:]\n\nif len(s) < 2:\n    print(0)\nelif len(s) == 2:\n    print(1)\n    print(s)\nelif len(s) == 3:\n    print(2)\n    for suff in sorted([s, s[-2:]]):\n        print(suff)\nelse:\n    D = [[False for _ in range(2)] for _ in range(len(s))]\n\n    suffixes = { s[-2:], s[-3:] }\n\n    D[-2][0] = True\n    D[-3][1] = True\n\n    for i in range(len(s) - 4, -1, -1):\n        if (s[i:i+2] != s[i+2:i+4] and D[i+2][0]) or D[i+2][1]:\n            D[i][0] = True\n            suffixes |= { s[i:i+2] }\n        if (i <= len(s) - 6 and s[i:i+3] != s[i+3:i+6] and D[i+3][1]) or D[i+3][0]:\n            D[i][1] = True\n            suffixes |= { s[i:i+3] }\n\n    print(len(suffixes))\n    for suffix in sorted(suffixes):\n        print(suffix)\n", "__author__ = 'Utena'\ns=input()\nn=len(s)\nans=set()\nif n<=6:\n    print(0)\n    return\ndp=[[False,False]for i in range(n+1)]\nif n>7:\n    dp[3][1]=True\n    ans.add(s[-3:])\ndp[2][0]=True\nans.add(s[-2:])\n\nfor i in range(4,n-4):\n    if s[(-i):(-i+2)]!=s[(-i+2):(-i+3)]+s[-i+3]and dp[i-2][0] or dp[i-2][1]:\n        dp[i][0]=True\n        ans|={s[(-i):(-i+2)]}\n    if i>=6 and s[(-i):(-i+3)]!=s[(-i+3):(-i+5)]+s[-i+5]and dp[i-3][1] or dp[i-3][0]:\n        dp[i][1]=True\n        ans.add(s[(-i):(-i+3)])\nans=sorted(list(ans))\nprint(len(ans))\nprint('\\n'.join(ans))", "from sys import *\nsetrecursionlimit(20000)\ndp = []\nans = []\ndef fun(s, pos, r, ln):\n\tif pos <= 4+ln:\n\t\treturn 0\n\tif dp[pos][ln-2] != 0:\n\t\treturn dp[pos][ln-2]\n\tif s[pos-ln:pos] != r:\n\t\tdp[pos][ln-2] = 1 + fun(s, pos - ln, s[pos-ln:pos],2) + fun(s, pos - ln, s[pos-ln:pos],3)\n\t\tans.append(s[pos-ln:pos])\n\t'''\tif pos > 4+ln and s[pos-3:pos] != r:\n\t\tdp[pos][1] = 1 + fun(s, pos - 3, s[pos-3:pos])\n\t\tans.append(s[pos-3:pos])'''\n\treturn dp[pos][ln-2]\n\n\ns = input()\ndp = [[0, 0] for i in range(len(s) + 1)]\nfun(s, len(s), '', 2)\nfun(s, len(s), '', 3)\nans = list(set(ans))\nans.sort()\nprint(len(ans))\nfor i in ans:\n\tprint (i)\n", "from sys import *\nsetrecursionlimit(200000)\nd = {}\nt = set()\ns = input() + ' '\ndef gen(l, ll):\n    if (l, ll) in t: return\n    t.add((l, ll))\n    if l > 6:\n        d[s[l - 2 : l]] = 1\n        if s[l - 2 : l] != s[l : ll]: gen(l - 2, l)\n    if l > 7:\n        d[s[l - 3 : l]] = 1\n        if s[l - 3 : l] != s[l : ll]: gen(l - 3, l)\ngen(len(s) - 1,len(s))\nprint(len(d))\nfor k in sorted(d): print(k)\n", "def main():\n    s = input()[5:]\n    n = len(s)\n    if n < 2:\n        print(0)\n        return\n    res2, res3 = set(), set()\n    dp2 = [False] * (n + 1)\n    dp3 = [False] * (n + 1)\n    dp2[-1] = dp3[-1] = True\n    for i in range(n, 1, -1):\n        if dp3[i] or dp2[i] and s[i - 2:i] != s[i:i + 2]:\n            res2.add(s[i - 2:i])\n            dp2[i - 2] = True\n        if dp2[i] or dp3[i] and s[i - 3:i] != s[i:i + 3]:\n            res3.add(s[i - 3:i])\n            dp3[i - 3] = True\n    res3.discard(s[i - 3:i])\n    res3.update(res2)\n    print(len(res3))\n    for s in sorted(res3):\n        print(s)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\nn = len(s)\ndp2,dp3=[0 for i in range(n)],[0 for i in range(n)]\nif(n<7): print(0)\nelse:\n    if n-2>4: dp2[n-2]=1\n    if n-3>4: dp3[n-3]=1;\n    #for(i=n-4;i>5;i--)\n    i=n-4\n    while i>=5:\n        #print(\"i=%d\"% i)\n        dp2[i]=(dp3[i+2] | (dp2[i+2] & (s[i:i+2]!=s[i+2:i+4]) ) )\n        #if s[i:i+2]!=s[i+2:i+4] : t=1\n        #else: t=0\n        #print(\"%s  %s\" %(s[i:i+2],s[i+2:i+4]))\n        dp3[i]=dp2[i+3] | (dp3[i+3] & (s[i:i+3]!=s[i+3:i+6]) )\n        #print(s[i:i+3]+s[i+3:i+6])\n        i=i-1\n    a=set()\n    for i in range(n):\n        if dp2[i]:a.add(s[i:i+2])\n        if dp3[i]:a.add(s[i:i+3])\n    a=sorted(list(a))\n    print(len(a))\n    for i in a:\n        print(i)\n", "s = input()\nn = len(s)\ndp2,dp3=[0 for i in range(n)],[0 for i in range(n)]\nif(n<7): print(0)\nelse:\n    if n-2>4: dp2[n-2]=1\n    if n-3>4: dp3[n-3]=1;\n    i=n-4\n    while i>=5:\n        dp2[i]=(dp3[i+2] | (dp2[i+2] & (s[i:i+2]!=s[i+2:i+4]) ) )\n        dp3[i]=dp2[i+3] | (dp3[i+3] & (s[i:i+3]!=s[i+3:i+6]) )\n        i=i-1\n    a=set()\n    for i in range(n):\n        if dp2[i]:a.add(s[i:i+2])\n        if dp3[i]:a.add(s[i:i+3])\n    a=sorted(list(a))\n    print(len(a))\n    for i in a:\n        print(i)\n", "s = (input())\nn = len(s)\nx = set()\n\na = [[0 for i in range(2)] for j in range(n + 5)]\nb = [0 for i in range(n + 5)]\n\nb[n] = 1\na[n][0] = 1\na[n][1] = 1\n\nfor i in range(n - 1, 4, -1):\n    if b[i + 2]:\n        if a[i + 2][0] and (s[i:i + 2] != s[i + 2:i + 4]):\n            b[i] = 1\n            a[i][0] = 1\n        if a[i + 2][1]:\n            b[i] = 1\n            a[i][0] = 1\n        if b[i]:\n            x.add(s[i:i + 2])\n    if b[i + 3]:\n        if a[i + 3][1] and (s[i:i + 3] != s[i + 3:i + 6]):\n            b[i] = 1\n            a[i][1] = 1\n        if a[i + 3][0]:\n            b[i] = 1\n            a[i][1] = 1\n        if b[i]:\n            x.add(s[i:i + 3])\n\nx = sorted(list(x))\nprint(len(x))\nfor i in x:\n    print(i)\n", "s = (input())\nn = len(s)\nx = set()\n\na = [[0 for i in range(2)] for j in range(n+3)]\nb = [0 for i in range(n+3)]\n\nb[n] = 1\na[n][0] = 1\na[n][1] = 1\n\nfor i in range(n - 1, 4, -1):\n    if b[i + 2]:\n        if a[i + 2][0] and (s[i:i + 2] != s[i + 2:i + 4]):\n            b[i] = 1\n            a[i][0] = 1\n        if a[i + 2][1]:\n            b[i] = 1\n            a[i][0] = 1\n        if b[i]:\n            x.add(s[i:i + 2])\n    if b[i + 3]:\n        if a[i + 3][1] and (s[i:i + 3] != s[i + 3:i + 6]):\n            b[i] = 1\n            a[i][1] = 1\n        if a[i + 3][0]:\n            b[i] = 1\n            a[i][1] = 1\n        if b[i]:\n            x.add(s[i:i + 3])\n\nx = sorted(list(x))\nprint(len(x))\nfor i in x:\n    print(i)\n", "t = input()\ns, d = set(), set()\np = {(len(t), 2)}\n\nwhile p:\n    m, x = p.pop()\n    r = m + x\n\n    for y in [x, 5 - x]:\n        l = m - y\n        q = (l, y)\n\n        if q in d or l < 5 or t[l:m] == t[m:r]: continue\n        s.add(t[l:m])\n\n        d.add(q)\n        p.add(q)\n\nprint(len(s))\nprint('\\n'.join(sorted(s)))", "t = input()\ns, d = set(), set()\np = {(len(t), 2)}\n\nwhile p:\n    m, x = p.pop()\n    r = m + x\n\n    for y in [x, 5 - x]:\n        l = m - y\n        q = (l, y)\n\n        if q in d or l < 5 or t[l:m] == t[m:r]: continue\n        s.add(t[l:m])\n\n        d.add(q)\n        p.add(q)\n\nprint(len(s))\nprint('\\n'.join(sorted(s)))\n", "t = input()\n\ns, d = set(), set()\n\np = {(len(t), 2)}\n\n\n\nwhile p:\n\n    m, x = p.pop()\n\n    r = m + x\n\n\n\n    for y in [x, 5 - x]:\n\n        l = m - y\n\n        q = (l, y)\n\n\n\n        if q in d or l < 5 or t[l:m] == t[m:r]: continue\n\n        s.add(t[l:m])\n\n\n\n        d.add(q)\n\n        p.add(q)\n\n\n\nprint(len(s))\n\nprint('\\n'.join(sorted(s)))\n\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\nsys.setrecursionlimit(15000)\n\ns = input()\ns = s[5:] + \" \"\nres = set()\naux = set()\n\ndef getWords(x,y):\n    if (x,y) in aux:\n        return\n    aux.add((x,y))\n    if x > 1 and s[x:y] != s[x-2:x]:\n        res.add(s[x-2:x])\n        getWords(x-2,x)\n    if x > 2 and s[x:y] != s[x-3:x]:\n        res.add(s[x-3:x])\n        getWords(x-3,x)\n\ngetWords(len(s)-1,len(s))\n\nprint(len(res))\nfor word in sorted(list(res)):\n    print(word)", "# Reberland Linguistics\n\nimport sys\n\nword = input()\nsuffixes = set()\npossible = {(len(word), 2)}\nmy_set = set()\n\nwhile possible:\n    d, x = possible.pop()\n    a = d + x\n\n    for i in [x, 5 - x]:\n        l = d - i\n        q = (l, i)\n\n#        if q in my_set or (l < 5) or (word[l:d] == word[d:a]):\n#            break\n        if q in my_set or (l < 5) or (word[l:d] == word[d:a]):\n            continue\n\n        suffixes.add(word[l:d])\n        possible.add(q)\n        my_set.add(q)\n\nsuffixes_alph = sorted(suffixes)\n\nprint(len(suffixes))\nprint(*suffixes_alph, sep='\\n')\n", "import sys\n\nword = input()\n\nsuffixes = set()\npossible = set()\nmy_set = set()\nnot_poss = set()\n\npossible.add((len(word), 2))\n\nwhile possible:\n    tam, x = possible.pop()\n    a = tam + x\n\n    for i in [x, 5 - x]:\n        root = tam - i\n        new_pos = (root, i)\n\n        if root < 5 or new_pos in my_set or (word[root:tam] == word[tam:a]):\n                not_poss.add(word[root:tam])\n        else:\n            suffixes.add(word[root:tam])\n            possible.add(new_pos)\n            my_set.add(new_pos)\n\nsuffixes_alph = sorted(suffixes)\n\nprint(len(suffixes))\nprint(*suffixes_alph, sep='\\n')\n", "\ndef __starting_point():\n\n\n    word = input()\n\n    suffixes = set()\n    possible = set()\n    my_set = set()\n    not_poss = set()\n\n    possible.add((len(word), 2))\n\n    while possible:\n        tam, x = possible.pop()\n        a = tam + x\n        for i in [x, 5 - x]:\n            root = tam - i\n            new_pos = (root, i)\n\n            if root < 5 or new_pos in my_set or (word[root:tam] == word[tam:a]):\n                    not_poss.add(word[root:tam])\n            else:\n                suffixes.add(word[root:tam])\n                possible.add(new_pos)\n                my_set.add(new_pos)\n\n    suffixes_alph = sorted(suffixes)\n\n    print(len(suffixes))\n    for i in suffixes_alph:\n        print(i)\n\n__starting_point()", "def getPossibleSuffixes(s):\n    if len(s) == 5:\n        print(0)\n        return\n    possible_suffixes = s[5:len(s)]\n    suffixes = []\n    helper_hash = {}\n    suffix_starts = [0 for x in range(len(possible_suffixes))]\n    prev_2 = [\"\" for x in range(len(possible_suffixes))]\n    suffix_starts[-1] = 1\n    for i in range(len(possible_suffixes)-2, -1, -1):\n        if suffix_starts[i+1] and prev_2[i+1] != possible_suffixes[i:i+2]:\n            if not helper_hash.get(possible_suffixes[i:i+2]):\n                suffixes.append(possible_suffixes[i:i+2])\n                helper_hash[possible_suffixes[i:i+2]] = True\n            if i-1>=0:\n                prev_2[i-1] = possible_suffixes[i:i+2]\n                suffix_starts[i-1] = 1\n        if i+2 < len(possible_suffixes) and suffix_starts[i+2] and prev_2[i+2] != possible_suffixes[i:i+3]:\n            if not helper_hash.get(possible_suffixes[i:i+3]):\n                suffixes.append(possible_suffixes[i:i+3])\n                helper_hash[possible_suffixes[i:i+3]] = True\n            if i-1>=0:\n                if prev_2[i-1] != \"\":\n                    prev_2[i-1] = \"\"\n                else:\n                    prev_2[i-1] = possible_suffixes[i:i+3]\n                suffix_starts[i-1] = 1\n    print(len(suffixes))\n    suffixes.sort()\n    for suffix in suffixes:\n        print(suffix)\ns = input()\ngetPossibleSuffixes(s)", "import sys\nsys.setrecursionlimit(10000)\n\ns = input()\ns = s[5:] + \" \"\nres = set()\naux = set()\n\ndef getWords(x,y):\n    if (x,y) in aux:\n        return\n    aux.add((x,y))\n    if x > 1 and s[x:y] != s[x-2:x]:\n        res.add(s[x-2:x])\n        getWords(x-2,x)\n    if x > 2 and s[x:y] != s[x-3:x]:\n        res.add(s[x-3:x])\n        getWords(x-3,x)\n\ngetWords(len(s)-1,len(s))\n\nprint(len(res))\nfor word in sorted(list(res)):\n    print(word)", "lectura = input()\nsufix = set()\ncomb = {(len(lectura), 2)}\nsetPrueba = set()\nwhile comb:\n    x, y = comb.pop()\n    pos3 = x + y\n    for i in [y, 5 - y]:\n        posIni = x - i\n        stringActual = (posIni, i)\n        if ( stringActual in setPrueba or (posIni < 5) or (lectura[posIni:x] == lectura[x:pos3]) ):\n            #print(\"encontrado en el set\")\n            continue\n        else:\n            sufix.add(lectura[posIni:x])\n            comb.add(stringActual)\n            setPrueba.add(stringActual)\nconclusion = sorted(sufix)\nprint(len(sufix))\nfor i in range(0,len(conclusion)):\n    print(conclusion[i])", "s = input()\n\nif len(s) <= 5:\n    print(0)\nelse:\n    words = set()\n    s = s[5:]\n    r = len(s)\n\n    if r == 4:\n        words.add(s[1:])\n        words.add(s[2:])\n        words.add(s[:2])\n\n    if r == 2:\n        words.add(s)\n\n    if r == 3:\n        words.add(s)\n        words.add(s[1:])\n\n    s = s[::-1]\n\n    if r > 4:\n        dp2 = [0 for _ in range(r)]\n        dp3 = [0 for _ in range(r)]\n        dp2[1] = 1\n        dp3[2] = 1\n\n        words.add(s[:2][::-1])\n        words.add(s[:3][::-1])\n        for i in range(3, r):\n            if dp2[i - 2] and s[i - 3:i - 1] != s[i - 1:i + 1]:\n                dp2[i] = 1\n                words.add(s[i - 1:i + 1][::-1])\n\n            if dp2[i - 3] and i - 4 >= 0 and s[i - 4:i - 2] != s[i - 2:i + 1]:\n                dp3[i] = 1\n                words.add(s[i - 2:i + 1][::-1])\n\n            if dp3[i - 2] and i - 4 >= 0 and s[i - 4:i - 1] != s[i - 1:i + 1]:\n                dp2[i] = 1\n                words.add(s[i - 1:i + 1][::-1])\n\n            if dp3[i - 3] and i - 5 >= 0 and s[i - 5:i - 2] != s[i - 2:i + 1]:\n                dp3[i] = 1\n                words.add(s[i - 2:i + 1][::-1])\n\n    print(len(words))\n    for word in sorted(words):\n        print(word)", "s = input()\nn = len(s)\ns += '0000000000'\ndp = [[0] * 2 for i in range(n + 5)]\ndp[n] = [1, 1]\nres = set()\nfor i in range(n - 1, 4, -1):\n    if i + 2 <= n and ((dp[i + 2][0] and s[i: i + 2] != s[i + 2: i + 4]) or dp[i + 2][1]):\n        res.add(s[i: i + 2])\n        dp[i][0] = 1\n    if i + 3 <= n and ((dp[i + 3][1] and s[i: i + 3] != s[i + 3: i + 6]) or dp[i + 3][0]):\n        res.add(s[i: i + 3])\n        dp[i][1] = 1\nprint(len(res))\nfor ss in sorted(res):\n    print(ss)", "import sys\n\nvalue = input()\nif (len(value) < 7):\n    print(0)\n    return\n\nres = set()\npossible = {}\npossible[len(value)] = set([2])\nif (len(value) > 7):\n    possible[len(value)].add(3)\npossibleLen = [2, 3]\n\nfor i in reversed(range(7, len(value) + 1)):\n    possibleVal = possible.get(i, set())\n    for length in possibleVal:\n        nextI = i - length\n        val = value[nextI:i]\n        res.add(val)\n        for posLen in possibleLen:\n            if (nextI >= 5 + posLen and value[nextI - posLen:nextI] != val):\n                setNextI = possible.setdefault(nextI, set())\n                setNextI.add(posLen)\n\nprint(len(res))\nfor val in sorted(res):\n    print(val)", "word = input()\nlength = len(word)\n\nacceptable2 = [None] * length\nacceptable2[0] = True; acceptable2[1] = False; acceptable2[2] = True; acceptable2[3] = False\nacceptable3 = [None] * length\nacceptable3[0] = True; acceptable3[1] = False; acceptable3[2] = False; acceptable3[3] = True\nall_possible_suffixes = set()\n\n\ndef is_acceptable(suffix, rest):\n    if len(suffix) == 2:\n        if acceptable3[len(rest)]:\n            return True\n        if acceptable2[len(rest)] and not rest.startswith(suffix):\n            return True\n        return False\n\n    if len(suffix) == 3:\n        if acceptable2[len(rest)]:\n            return True\n        if acceptable3[len(rest)] and not rest.startswith(suffix):\n            return True\n        return False\n\nfor i in range(length - 1, 4, -1):\n    root = word[:i]\n    suffixes = word[i:]\n\n    if len(suffixes) < 2:\n        continue\n\n    first = suffixes[:2]\n    rest = suffixes[2:]\n    if is_acceptable(first, rest):\n        all_possible_suffixes.add(first)\n        acceptable2[len(suffixes)] = True\n    else:\n        acceptable2[len(suffixes)] = False\n\n    if len(suffixes) < 3:\n        continue\n\n    first = suffixes[:3]\n    rest = suffixes[3:]\n    if is_acceptable(first, rest):\n        all_possible_suffixes.add(first)\n        acceptable3[len(suffixes)] = True\n    else:\n        acceptable3[len(suffixes)] = False\n\n\nprint(len(all_possible_suffixes))\nfor s in sorted(list(all_possible_suffixes)):\n    print(s)\n", "s = input()\n\npossible = [[],[],[False]*10100, [False]*10100]\n\nlength = len(s)\npossible[2][length-2] = True\npossible[3][length-3] = True\n\nfor i in range(length-1, 5-1,-1):\n    if length - 4 >= i:\n        possible[2][i] = (possible[2][i+2] and s[i:i+2] != s[i+2:i+4]) or possible[3][i+2]\n    if length - 5 >= i:\n        possible[3][i] = possible[2][i+3]\n    if length - 6 >= i:\n        possible[3][i] = (possible[3][i + 3] and s[i:i+3] != s[i+3:i+6]) or possible[3][i]\n\noutput = set()\n\nfor i in range(5,10000):\n    if possible[2][i]:\n        output.add(s[i:i + 2])\n    if possible[3][i]:\n        output.add(s[i:i + 3])\n\noutput_list = sorted(list(output))\nprint(len(output_list))\nfor o in output_list:\n    print(o)\n", "import sys\n\ninput = sys.stdin.readline\n\ns = input().strip()\nn = len(s)\nposs = [[False] * 2 for _ in range(n)]\nposs[n - 2][0] = poss[n - 3][1] = True\nfor i in range(n - 4, -1, -1):\n    poss[i][0] = s[i: i + 2] != s[i + 2: i + 4] and poss[i + 2][0] or poss[i + 2][1]\n    poss[i][1] = s[i: i + 3] != s[i + 3: i + 6] and poss[i + 3][1] or poss[i + 3][0]\n\nans = set()\nfor i in range(5, n):\n    if poss[i][0]:\n        ans.add(s[i: i + 2])\n    if poss[i][1]:\n        ans.add(s[i:i + 3])\n\nprint(len(ans))\nfor x in sorted(ans):\n    print(x)\n"]