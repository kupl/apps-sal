["def f(n,k):\n    s=[]\n    row=[[0 for i in range(n)] for i in range(n)]\n    col=[[0 for i in range(n)] for i in range(n)]\n    flag=0\n    for i in range(n):\n        s.append(list(input().strip()))\n    for i in range(n):\n        for j in range(n):\n            if s[i][j]==\"X\":\n                s[i][j]=1\n            elif s[i][j]==\".\":\n                s[i][j]=0\n                flag=1\n            else:\n                s[i][j]=-1\n            row[i][j]=col[j][i]=s[i][j]\n            \n    for i in range(n):\n        temp=[]\n        for j in range(n-k+1):\n            temp=s[i][j:j+k]\n            if sum(temp)>=k-1:\n                return True\n            temp=col[i][j:j+k]\n            if sum(temp)>=k-1:\n                return True\n    d1=[0 for i in range(n)]\n    d2=[0 for i in range(n)]\n    for i in range(n):\n        d1[i]=s[i][i]\n        d2[i]=s[i][n-i-1]\n    for i in range(n-k+1):\n        if sum(d1[i:i+k])>=k-1 or sum(d2[i:i+k])>=k-1:\n            return True\n    return False\nt=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    if f(n,k):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def f(n,k):\n    s=[]\n    row=[[0 for i in range(n)] for i in range(n)]\n    col=[[0 for i in range(n)] for i in range(n)]\n    flag=0\n    for i in range(n):\n        s.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            if s[i][j]==\"X\":\n                s[i][j]=1\n            elif s[i][j]==\".\":\n                s[i][j]=0\n                flag=1\n            else:\n                s[i][j]=-1\n            row[i][j]=col[j][i]=s[i][j]\n    for i in range(n):\n        temp=[]\n        for j in range(n-k+1):\n            temp=s[i][j:j+k]\n            if sum(temp)>=k-1:\n                return True\n            temp=col[i][j:j+k]\n            if sum(temp)>=k-1:\n                return True\n    d1=[0 for i in range(n)]\n    d2=[0 for i in range(n)]\n    for i in range(n):\n        d1[i]=s[i][i]\n        d2[i]=s[i][n-i-1]\n    for i in range(n-k+1):\n        if (sum(d1[i:i+k])>=k-1) or (sum(d2[i:i+k])>=k-1):\n            return True\n    return False\nt=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    if f(n,k):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "t=int(input())\nwhile t>0:\n    ans=0\n    n,m=[int(x) for x in input().split()]\n    a=[]\n    nn=n\n    while nn>0:\n        a.append(input())\n        nn-=1\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]==\"X\":\n                c=i\n                d=j\n                r=0\n                p=0\n                q=0\n                while c<n and ((a[c][d]==\"X\" or a[c][d]==\".\") and q<2):\n                    if a[c][d]!=\"X\":\n                        if p==0:\n                            p=r\n                            \n                        q+=1    \n                    r+=1\n                    c+=1\n                if r>=m:\n                    ans=1\n                    \n                c=i\n                d=j\n                r1=0\n                p1=0\n                q=0\n                while c>=0 and ((a[c][d]==\"X\" or a[c][d]==\".\") and q<2):\n                    if a[c][d]!=\"X\":\n                        if p1==0:\n                            p1=r1\n                            \n                        q+=1    \n                    r1+=1\n                    c-=1\n                if r1>=m:\n                    ans=1\n\n\n\n                c=i\n                d=j\n                r=0\n                p=0\n                q=2\n                while d<n and ((a[c][d]==\"X\" or a[c][d]==\".\") and q<2):\n                    if a[c][d]!=\"X\":\n                        if p==0:\n                            p=r\n                        q+=1    \n                        \n                    r+=1\n                    d+=1\n                if r>=m:\n                    ans=1\n    \n                c=i\n                d=j\n                r1=0\n                p1=0\n                q=0\n                while d>=0 and ((a[c][d]==\"X\" or a[c][d]==\".\") and q<2):\n                    if a[c][d]!=\"X\":\n                        if p1==0:\n                            p1=r1\n                        q+=1    \n                    r1+=1\n                    d-=1\n                if r1>=m:\n                    ans=1\n\n\n                c=i\n                d=j\n                r=0\n                p=0\n                q=0\n                while d<n and c<n and ((a[c][d]==\"X\" or a[c][d]==\".\") and q<2):\n                    if a[c][d]!=\"X\":\n                        if p==0:\n                            p=r\n                        q+=1\n                    r+=1\n                    d+=1\n                    c+=1\n                if r>=m:\n                    ans=1\n  \n                c=i\n                d=j\n                r1=0\n                p1=0\n                q=0\n                while d>=0 and c>=0 and ((a[c][d]==\"X\" or a[c][d]==\".\") and q<2):\n                    if a[c][d]!=\"X\":\n                        if p1==0:\n                            p1=r1\n                        q+=1\n                    r1+=1\n                    d-=1\n                    c-=1\n                if r1>=m:\n                    ans=1\n\n                #if i==0 and j==0:\n                #    print(str(r1)+\" \"+str(p1)+\" \"+str(r)+\" \"+str(p))    \n\n\n                c=i\n                d=j\n                r=0\n                p=0\n                q=0\n                while d<n and c>=0 and ((a[c][d]==\"X\" or a[c][d]==\".\") and q<2):\n                    if a[c][d]!=\"X\":\n                        if p==0:\n                            p=r\n                        q+=1\n                    r+=1\n                    d+=1\n                    c-=1\n                if r>=m:\n                    ans=1\n   \n                c=i\n                d=j\n                r1=0\n                p1=0\n                q=0\n                while d>=0 and c<n and ((a[c][d]==\"X\" or a[c][d]==\".\") and q<2):\n                    if a[c][d]!=\"X\":\n                        if p1==0:\n                            p1=r1\n                        q+=1\n                    r1+=1\n                    d-=1\n                    c+=1\n                if r1>=m:\n                    ans=1\n\n    if m==1:\n        ans=1\n    if ans==1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    t-=1    \n", "'''\nCreated on 27-Feb-2016\n\n@author: venkatesh\n'''\n\n\ndef is_row_wise(a, n, k):\n    for i in range(n):\n        flag = True\n        cnt = 0\n        for j in range(n):\n            if a[i][j] == 'X':\n                cnt += 1\n            elif a[i][j] == '.' and flag:\n                cnt += 1\n                flag = False\n            else:\n                cnt = 0\n                if a[i][j] == '.':\n                    cnt = 1\n                    if a[i][j-1] == 'X':\n                        cnt = 2\n                else:\n                    flag = True\n            if cnt == k:\n                return True\n    return False\n\n\ndef is_column_wise(a, n, k):\n    for i in range(n):\n        flag = True\n        cnt = 0\n        for j in range(n):\n            if a[j][i] == 'X':\n                cnt += 1\n            elif a[j][i] == '.' and flag:\n                cnt += 1\n                flag = False\n            else:\n                cnt = 0\n                if a[j][i] == '.':\n                    cnt = 1\n                    if a[j-1][i] == 'X':\n                        cnt = 2\n                else:\n                    flag = True\n            if cnt == k:\n                return True\n    return False\n\n\ndef is_diag_wise(a, n, k):\n    cnt, flag = 0, True\n    for i in range(n):\n        if a[i][i] == 'X':\n            cnt += 1\n        elif a[i][i] == '.' and flag:\n            cnt += 1\n            flag = False\n        else:\n            cnt = 0\n            if a[i][i] == '.':\n                cnt = 1\n                if a[i-1][i-1] == 'X':\n                    cnt = 2\n            else:\n                flag = True\n        if cnt == k:\n            return True\n    cnt, flag = 0, True\n    for i in range(n):\n        if a[i][n-1-i] == 'X':\n            cnt += 1\n        elif a[i][n-1-i] == '.' and flag:\n            cnt += 1\n            flag = False\n        else:\n            cnt = 0\n            if a[i][n-1-i] == '.':\n                cnt = 1\n                if a[i-1][n-2-i] == 'X':\n                    cnt = 2\n            else:\n                flag = True\n        if cnt == k:\n            return True\n    return False\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_int_list():\n    return [int(x) for x in input().split()]\n\n\ndef is_chef_wins(game, n, k):\n    if is_row_wise(game, n, k):\n        # print \"row\"\n        return True\n    elif is_column_wise(game, n, k):\n        # print \"col\"\n        return True\n    elif is_diag_wise(game, n, k):\n        return True\n    else:\n        return False\n\n\ndef main():\n    tc = read_int()\n    for _ in range(tc):\n        n, k = read_int_list()\n        game = [input() for _ in range(n)]\n        print(\"YES\" if is_chef_wins(game, n, k) else \"NO\")\n\ndef __starting_point():\n    main()\n\n__starting_point()", "'''\nCreated on 27-Feb-2016\n\n@author: venkatesh\n'''\n\n\ndef is_row_wise(a, n, k):\n    for i in range(n):\n        flag = True\n        cnt = 0\n        for j in range(n):\n            if a[i][j] == 'X':\n                cnt += 1\n            elif a[i][j] == '.' and flag:\n                cnt += 1\n                flag = False\n            else:\n                cnt = 0\n                if a[i][j] == '.':\n                    cnt = 1\n                else:\n                    flag = True\n            if cnt == k:\n                return True\n        if cnt == k:\n                return True\n    return False\n\n\ndef is_column_wise(a, n, k):\n    for i in range(n):\n        flag = True\n        cnt = 0\n        for j in range(n):\n            if a[j][i] == 'X':\n                cnt += 1\n            elif a[j][i] == '.' and flag:\n                cnt += 1\n                flag = False\n            else:\n                cnt = 0\n                if a[j][i] == '.':\n                    cnt = 1\n                else:\n                    flag = True\n            if cnt == k:\n                return True\n        if cnt == k:\n                return True\n    return False\n\n\ndef is_diag_wise(a, n, k):\n    cnt, flag = 0, True\n    for i in range(n):\n        if a[i][i] == 'X':\n            cnt += 1\n        elif a[i][i] == '.' and flag:\n            cnt += 1\n            flag = False\n        else:\n            cnt = 0\n            if a[i][i] == '.':\n                cnt = 1\n            else:\n                flag = True\n        if cnt == k:\n            return True\n    cnt, flag = 0, True\n    for i in range(n):\n        if a[i][n-1-i] == 'X':\n            cnt += 1\n        elif a[i][n-1-i] == '.' and flag:\n            cnt += 1\n            flag = False\n        else:\n            cnt = 0\n            if a[i][i] == '.':\n                cnt = 1\n            else:\n                flag = True\n        if cnt == k:\n            return True\n    return False\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_int_list():\n    return [int(x) for x in input().split()]\n\n\ndef is_chef_wins(game, n, k):\n    if is_row_wise(game, n, k):\n        # print \"row\"\n        return True\n    elif is_column_wise(game, n, k):\n        # print \"col\"\n        return True\n    elif is_diag_wise(game, n, k):\n        return True\n    else:\n        return False\n\n\ndef main():\n    tc = read_int()\n    for _ in range(tc):\n        n, k = read_int_list()\n        game = [input() for _ in range(n)]\n        print(\"YES\" if is_chef_wins(game, n, k) else \"NO\")\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# cook your code here\n\n\ndef checkRow(A,row,N,K):\n    count = 0\n    move  = 0\n    for i in range(N):\n        if(A[row][i]=='.'):\n            move = move+1\n        if(not(A[row][i]=='O') and move<2):\n            count = count+1\n        elif(A[row][i]=='.'):\n            move  = 1\n            count = 1\n        else:\n            count = 0\n            move  = 0\n        if(count==K):\n            return 1\n    return 0\n    \ndef checkCol(A,col,N,K):\n    count = 0\n    move  = 0\n    for i in range(N):\n        if(A[i][col]=='.'):\n            move = move+1\n        if(not(A[i][col]=='O') and move<2):\n            count = count+1\n        elif(A[i][col]=='.'):\n            count = 1\n            move  = 1\n        else:\n            count = 0\n            move  = 0\n        if(count==K):\n            return 1\n    return 0  \n    \ndef checkDiag(A,row,col,N,K):\n    count = 0\n    move  = 0\n    \n    for i in range(K):\n        if(A[row+i][col+i]=='.'):\n            move = move+1\n        if(not(A[row+i][col+i]=='O') and move<2):\n            count = count+1\n        elif(A[row+i][col+i]=='.'):\n            move = 1\n            count = 1\n        else:\n            move = 0\n            count = 0\n        if(count==K):\n            return 1\n    return 0\n    \ndef chck(A,N,K):\n    flag = 0\n    \n    if(flag==0):\n        #row\n        for i in range(N):\n            flag = checkRow(A,i,N,K)\n            if(flag==1):\n                break\n\n    if(flag==0):\n        #col\n        for j in range(N):\n            flag = checkCol(A,j,N,K)\n            if(flag==1):\n                break\n\n    if(flag==0):\n        #diag\n        for i in range(N-K+1):\n            for j in range(N-K+1):\n                flag = checkDiag(A,i,j,N,K)\n                if(flag==1):\n                    break\n            if(flag==1):\n                    break\n\n    return flag\n\nfor tests in range(eval(input())):\n    [N,K] = list(map(int,input().split()))\n    A = [\"\"]*N\n    \n    for i in range(N):\n        A[i] = input()\n    \n    if(chck(A,N,K)==1):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "# cook your code here\n\n\ndef checkRow(A,row,N,K):\n    count = 0\n    move  = 0\n    for i in range(N):\n        if(A[row][i]=='.'):\n            move = move+1\n        if(not(A[row][i]=='O') and move<2):\n            count = count+1\n        elif(A[row][i]=='.'):\n            move  = 1\n            count = 1\n        else:\n            count = 0\n            move  = 0\n        if(count==K):\n            return 1\n    return 0\n    \ndef checkCol(A,col,N,K):\n    count = 0\n    move  = 0\n    for i in range(N):\n        if(A[i][col]=='.'):\n            move = move+1\n        if(not(A[i][col]=='O') and move<2):\n            count = count+1\n        elif(A[i][col]=='.'):\n            count = 1\n            move  = 1\n        else:\n            count = 0\n            move  = 0\n        if(count==K):\n            return 1\n    return 0  \n    \ndef checkDiag(A,row,col,N,K):\n    count = 0\n    move  = 0\n    \n    for i in range(K):\n        if(A[row+i][col+i]=='.'):\n            move = move+1\n        if(A[row+i][col+i]=='0' and move<=1):\n            return 0\n    \n    if(move<2):\n        return 1\n    return 0\n    \ndef chck(A,N,K):\n    flag = 0\n    \n    if(flag==0):\n        #row\n        for i in range(N):\n            flag = checkRow(A,i,N,K)\n            if(flag==1):\n                break\n    \n    if(flag==0):\n        #col\n        for j in range(N):\n            flag = checkCol(A,j,N,K)\n            if(flag==1):\n                break\n    \n    if(flag==0):\n        #diag\n        for i in range(N-K+1):\n            for j in range(N-K+1):\n                flag = checkDiag(A,i,j,N,K)\n                if(flag==1):\n                    break\n            if(flag==1):\n                    break\n            \n    return flag\n\nfor tests in range(eval(input())):\n    [N,K] = list(map(int,input().split()))\n    A = [\"\"]*N\n    \n    for i in range(N):\n        A[i] = input()\n    \n    if(chck(A,N,K)==1):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def f(n,k):\n    s=[]\n    row=[[0 for i in range(n)] for i in range(n)]\n    col=[[0 for i in range(n)] for i in range(n)]\n    flag=0\n    for i in range(n):\n        s.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            if s[i][j]==\"X\":\n                s[i][j]=1\n            elif s[i][j]==\".\":\n                s[i][j]=0\n                flag=1\n            else:\n                s[i][j]=-1\n            row[i][j]=col[j][i]=s[i][j]\n            \n    for i in range(n):\n        temp=[]\n        for j in range(n-k+1):\n            temp=s[i][j:j+k]\n            if sum(temp)>=k-1:\n                return True\n            temp=col[i][j:j+k]\n            if sum(temp)>=k-1:\n                return True\n    d1=[0 for i in range(n)]\n    d2=[0 for i in range(n)]\n    for i in range(n):\n        d1[i]=s[i][i]\n        d2[i]=s[i][n-i-1]\n    for i in range(n-k+1):\n        if sum(d1[i:i+k])>=k-1 or sum(d2[i:i+k])>=k-1:\n            return True\n    return False\nt=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    if f(n,k):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "'''\nCreated on 27-Feb-2016\n\n@author: venkatesh\n'''\n\n\ndef is_row_wise(a, n, k):\n    for i in range(n):\n        flag = True\n        cnt = 0\n        for j in range(n):\n            if a[i][j] == 'X':\n                cnt += 1\n            if a[i][j] == '.' and flag:\n                cnt += 1\n                flag = False\n            if cnt == k:\n                return True\n    return False\n\n\ndef is_column_wise(a, n, k):\n    for i in range(n):\n        flag = True\n        cnt = 0\n        for j in range(n):\n            if a[j][i] == 'X':\n                cnt += 1\n            if a[j][i] == '.' and flag:\n                cnt += 1\n                flag = False\n            if cnt == k:\n                return True\n    return False\n\n\ndef is_diag_wise(a, n, k):\n    cnt, flag = 0, True\n    for i in range(n):\n        if a[i][i] == 'X':\n            cnt += 1\n        if a[i][i] == '.' and flag:\n            cnt += 1\n            flag = False\n        if cnt == k:\n            return True\n    cnt, flag = 0, True\n    for i in range(n):\n        if a[i][n-1-i] == 'X':\n            cnt += 1\n        if a[i][n-1-i] == '.' and flag:\n            cnt += 1\n            flag = False\n        if cnt == k:\n            return True\n    return False\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_int_list():\n    return [int(x) for x in input().split()]\n\n\ndef is_chef_wins(game, n, k):\n    if is_row_wise(game, n, k):\n        # print \"row\"\n        return True\n    elif is_column_wise(game, n, k):\n        # print \"col\"\n        return True\n    elif is_diag_wise(game, n, k):\n        return True\n    else:\n        return False\n\n\ndef main():\n    tc = read_int()\n    for _ in range(tc):\n        n, k = read_int_list()\n        game = [input() for _ in range(n)]\n        print(\"YES\" if is_chef_wins(game, n, k) else \"NO\")\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=0\nk=0\nmat=[]\ndef check(i,j):\n    #print i,j,n,k\n    ver_count=1\n    hor_count=1\n    dial1_count=1\n    dial2_count=1\n    \n    ti=i-1\n    tj=j\n    #vertical up\n    while ti>=0 and mat[ti][j]=='X':\n        #print ti,ti,' is X'\n        ver_count+=1\n        ti-=1\n    #print ver_count\n    ti=i+1\n    #vertical down\n    while ti<n and mat[ti][j]=='X':\n        #print ti,ti,' is X'\n        ver_count+=1\n        ti+=1\n    #print ver_count\n    ti=i\n    tj=j-1\n    #horizontal left\n    while tj>=0 and mat[i][tj]=='X':\n        #print ti,ti,' is X'\n        hor_count+=1\n        tj-=1\n    #print hor_count\n    tj=j+1\n    #horizontal right\n    while tj<n and mat[i][tj]=='X':\n        #print ti,ti,' is X'\n        hor_count+=1\n        tj+=1\n    #print hor_count\n    ti=i-1\n    tj=j-1\n    #dialonal 1 up left\n    while ti>=0 and tj>=0 and mat[ti][tj]=='X':\n        #print ti,ti,' is X'\n        dial1_count+=1\n        ti-=1\n        tj-=1\n    ti=i+1\n    tj=j+1\n    #print dial1_count\n    #dialonal 1 down right\n    while ti<n and tj<n and mat[ti][tj]=='X':\n        #print ti,ti,' is X'\n        dial1_count+=1\n        ti+=1\n        tj+=1\n    ti=i-1\n    tj=j+1\n    #print dial1_count\n    #diagonal2 up right\n    while ti>=0 and tj<n and mat[ti][tj]=='X':\n        #print ti,ti,' is X'\n        dial2_count+=1\n        ti-=1\n        tj+=1\n    ti=i+1\n    tj=j-1\n    #print dial2_count\n    #diagonal 2 down left\n    while ti<n and tj>=0 and mat[ti][tj]=='X':\n        #print ti,ti,' is X'\n        dial2_count+=1\n        ti+=1\n        tj-=1\n    #print dial2_count\n    if ver_count>=k or hor_count>=k or dial1_count>=k or dial2_count>=k:\n        return True\n    else:\n        return False\n        \nt=eval(input())\nwhile t>0:\n    n,k=list(map(int,input().split()))\n    tn=n\n    mat=[]\n    while tn>0:\n        mat.append(input().strip())\n        tn-=1\n    canWin=False\n    i=0\n    for row in mat:\n        j=0\n        for cell in row:\n            if cell=='.' and check(i,j):\n                canWin=True\n                break\n            j+=1\n        i+=1\n    if canWin:\n        print('YES')\n    else:\n        print('NO')\n    t-=1", "# cook your code here\n\n\ndef checkRow(A,row,N,K):\n    count = 0\n    move  = 0\n    for i in range(N):\n        if(A[row][i]=='.'):\n            move = move+1\n        if(not(A[row][i]=='O') and move<2):\n            count = count+1\n        elif(A[row][i]=='.'):\n            move  = 1\n            count = 1\n        else:\n            count = 0\n            move  = 0\n        if(count==K):\n            return 1\n    return 0\n    \ndef checkCol(A,col,N,K):\n    count = 0\n    move  = 0\n    for i in range(N):\n        if(A[i][col]=='.'):\n            move = move+1\n        if(not(A[i][col]=='O') and move<2):\n            count = count+1\n        elif(A[i][col]=='.'):\n            count = 1\n            move  = 1\n        else:\n            count = 0\n            move  = 0\n        if(count==K):\n            return 1\n    return 0  \n    \ndef checkDiag(A,row,col,N,K):\n    count = 0\n    move  = 0\n    \n    for i in range(K):\n        if(A[row+i][col+i]=='.'):\n            move = move+1\n        if(A[row+i][col+i]=='0' and move<=1):\n            return 0\n    \n    if(move<2):\n        return 1\n    return 0\n    \ndef chck(A,N,K):\n    flag = 0\n    \n    if(flag==0):\n        #row\n        for i in range(N):\n            flag = checkRow(A,i,N,K)\n            if(flag==1):\n                break\n    \n    if(flag==0):\n        #col\n        for j in range(N):\n            flag = checkCol(A,j,N,K)\n            if(flag==1):\n                break\n    \n    if(flag==0):\n        #diag\n        for i in range(N-K+1):\n            for j in range(N-K+1):\n                flag = checkDiag(A,i,j,N,K)\n                if(flag==1):\n                    break\n            if(flag==1):\n                    break\n            \n    return flag\n\nfor tests in range(eval(input())):\n    [N,K] = list(map(int,input().split()))\n    A = [\"\"]*N\n    \n    for i in range(N):\n        A[i] = input()\n    \n    if(chck(A,N,K)==1):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def dg(m, i0, j0, d):\n    return [m[(i0 + i - 1)%len(m)][(j0 + d*i - 1)%len(m[0])] for i in range(len(m))]\n\ndef column(matrix, i):\n    return [row[i] for row in matrix]\n\nimport re\nfor _ in range(eval(input())):\n    n,k = list(map(int,input().split()))\n    f=0\n    st = 'X'*k\n    a=[]\n    for j in range(n):\n        l = input()\n        a.append(list(l))\n    fd = [[a[y-x][x] for x in range(n) if 0<=y-x<n] for y in range(2*n-1)]\n    s=list(reversed(list(zip(*a))))\n    bd = [[s[y-x][x] for x in range(n) if 0<=y-x<n] for y in range(2*n-1)]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]=='.' and f==0:\n                a[i][j]='X'\n                if len(re.findall(st,''.join(a[i])))!=0:\n                    f=1\n                    print(\"YES\")\n                    break\n                elif len(re.findall(st,''.join(column(a,j))))!=0:\n                    f=1\n                    print(\"YES\")\n                    break\n                a[i][j]='.'\n    if f==0:\n        for i in range(len(fd)):\n            for j in range(len(fd[i])):\n                if fd[i][j]=='.' and f==0:\n                    fd[i][j]='X'\n                    if len(re.findall(st,''.join(fd[i])))!=0:\n                        f=1\n                        print(\"YES\")\n                        break\n                    fd[i][j]='.'\n                if bd[i][j]=='.' and f==0:\n                    bd[i][j]='X'\n                    if len(re.findall(st,''.join(bd[i])))!=0:\n                        f=1\n                        print(\"YES\")\n                        break\n                    bd[i][j]='.'\n    if f==0:\n        print(\"NO\")", "# cook your code here\n\n\ndef checkRow(A,row,N,K):\n    count = 0\n    move  = 0\n    for i in range(N):\n        if(A[row][i]=='.'):\n            move = move+1\n        if(not(A[row][i]=='O') and move<2):\n            count = count+1\n        else:\n            count = 0\n        if(count==K):\n            return 1\n    return 0\n    \ndef checkCol(A,col,N,K):\n    count = 0\n    move  = 0\n    for i in range(N):\n        if(A[i][col]=='.'):\n            move = move+1\n        if(not(A[i][col]=='O') and move<2):\n            count = count+1\n        else:\n            count = 0\n        if(count==K):\n            return 1\n    return 0  \n    \ndef checkDiag(A,row,col,N,K):\n    count = 0\n    move  = 0\n    \n    for i in range(K):\n        if(A[row+i][col+i]=='.'):\n            move = move+1\n        if(A[row+i][col+i]=='0' and move<=1):\n            return 0\n    \n    if(move<2):\n        return 1\n    return 0\n    \ndef chck(A,N,K):\n    flag = 0\n    \n    if(flag==0):\n        #row\n        for i in range(N):\n            flag = checkRow(A,i,N,K)\n            if(flag==1):\n                break\n    \n    if(flag==0):\n        #col\n        for j in range(N):\n            flag = checkCol(A,j,N,K)\n            if(flag==1):\n                break\n    \n    if(flag==0):\n        #diag\n        for i in range(N-K+1):\n            for j in range(N-K+1):\n                flag = checkDiag(A,i,j,N,K)\n                if(flag==1):\n                    break\n            if(flag==1):\n                    break\n            \n    return flag\n\nfor tests in range(eval(input())):\n    [N,K] = list(map(int,input().split()))\n    A = [\"\"]*N\n    \n    for i in range(N):\n        A[i] = input()\n    \n    if(chck(A,N,K)==1):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def f(n,k):\n    s=[]\n    row=[[0 for i in range(n)] for i in range(n)]\n    col=[[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        s.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            if s[i][j]==\"X\":\n                s[i][j]=1\n            elif s[i][j]==\".\":\n                s[i][j]=0\n            else:\n                s[i][j]=-1\n            row[i][j]=col[j][i]=s[i][j]\n    for i in range(n):\n        temp=[]\n        for j in range(n-k+1):\n            temp=s[i][j:j+k]\n            if sum(temp)>=k-1:\n                return True\n            temp=col[i][j:j+k]\n            if sum(temp)>=k-1:\n                return True\n    d1=[0 for i in range(n)]\n    d2=[0 for i in range(n)]\n    for i in range(n):\n        d1[i]=s[i][i]\n        d2[i]=s[n-i-1][n-i-1]\n    for i in range(n-k+1):\n        if sum(d1[i:i+k])>=k-1 or sum(d2[i:i+k])>=k-1:\n            return True\n    return False\nt=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    if f(n,k):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def f(n,k):\n    s=[]\n    row=[[0 for i in range(n)] for i in range(n)]\n    col=[[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        s.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            if s[i][j]==\"X\":\n                s[i][j]=1\n            elif s[i][j]==\".\":\n                s[i][j]=0\n            else:\n                s[i][j]=-1\n            row[i][j]=col[j][i]=s[i][j]\n    for i in range(n):\n        temp=[]\n        for j in range(n-k+1):\n            temp=s[i][j:j+k]\n            if sum(temp)==k-1:\n                return True\n            temp=col[i][j:j+k]\n            if sum(temp)==k-1:\n                return True\n    d1=[0 for i in range(n)]\n    d2=[0 for i in range(n)]\n    for i in range(n):\n        d1[i]=s[i][i]\n        d2[i]=s[n-i-1][n-i-1]\n    for i in range(n-k+1):\n        if sum(d1[i:i+k])==k-1 or sum(d2[i:i+k])==k-1:\n            return True\n    return False\nt=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    if f(n,k):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def prt(temp):\n    for i in temp:\n        print(i)\ndef isin(x,a,b):\n    return (a<=x and x<=b)\ndef prog():\n    n,k = list(map(int,input().split()))\n    mat = []\n    dots = []\n    for i in range(n):\n        inp = input()\n        temp = []\n        for x1 in range(n):\n            x = inp[x1]\n            if(x=='X'):\n                temp += [1]\n            else:\n                temp += [0]\n            if(x=='.'):\n                dots += [(i,x1)]\n        mat+=[temp]\n    if(len(dots)==0):\n        return False\n    mat[dots[0][0]][dots[0][1]]=1\n    if(prog1(mat,n,k)):\n        return True\n    for i in range(1,len(dots)):\n        mat[dots[i-1][0]][dots[i-1][1]]=0\n        mat[dots[i][0]][dots[i][1]]=1\n        if(prog1(mat,n,k)):\n            return True\n    if(prog1(mat,n,k)):\n        return True\n    return False\ndef prog1(mat,n,k):\n    temp = []\n    temp1 = []\n    for i in mat:\n        temp+=[i[:]]\n        temp1+=[i[:]]\n    for i in range(n):\n        j = 0\n        for j in range(1,k):\n            temp[i][j]+=temp[i][j-1]\n        if(temp[i][j]==k):\n            return True\n        for j in range(k,n):\n            temp[i][j]+=temp[i][j-1]\n            if(temp[i][j]-temp[i][j-k]==k):\n                return True\n    for i in range(n):\n        for j in range(n):\n            temp[i][j]=temp1[j][i]\n    for i in range(n):\n        j = 0\n        for j in range(1,k):\n            temp[i][j]+=temp[i][j-1]\n        if(temp[i][j]==k):\n            return True\n        for j in range(k,n):\n            temp[i][j]+=temp[i][j-1]\n            if(temp[i][j]-temp[i][j-k]==k):\n                return True\n    for i in range(n):\n        for j in range(n):\n            temp[i][j]=temp1[i][j]\n    for i in range(n-1,-1,-1):\n        x = i\n        y = 0\n        cn = 1\n        while(cn!=k and isin(y+1,0,n-1) and isin(x+1,0,n-1)):\n            x+=1\n            y+=1\n            temp[x][y]+=temp[x-1][y-1]\n            cn+=1\n        if(temp[x][y]==k):\n            return True\n        while(cn>=k and isin(y+1,0,n-1) and isin(x+1,0,n-1)):\n            x+=1\n            y+=1\n            temp[x][y]+=temp[x-1][y-1]\n            if(temp[x][y]-temp[x-k][y-k]==k):\n                return True\n    for i in range(1,n):\n        x = 0\n        y = i\n        cn = 1\n        while(cn!=k and isin(y+1,0,n-1) and isin(x+1,0,n-1)):\n            x+=1\n            y+=1\n            temp[x][y]+=temp[x-1][y-1]\n            cn+=1\n        if(temp[x][y]==k):\n            return True\n        while(cn>=k and isin(y+1,0,n-1) and isin(x+1,0,n-1)):\n            x+=1\n            y+=1\n            temp[x][y]+=temp[x-1][y-1]\n            if(temp[x][y]-temp[x-k][y-k]==k):\n                return True\n    for i in range(n):\n        for j in range(n):\n            temp[i][j]=temp1[i][n-1-j]\n    for i in range(n-1,-1,-1):\n        x = i\n        y = 0\n        cn = 1\n        while(cn!=k and isin(y+1,0,n-1) and isin(x+1,0,n-1)):\n            x+=1\n            y+=1\n            temp[x][y]+=temp[x-1][y-1]\n            cn+=1\n        if(temp[x][y]==k):\n            return True\n        while(cn>=k and isin(y+1,0,n-1) and isin(x+1,0,n-1)):\n            x+=1\n            y+=1\n            temp[x][y]+=temp[x-1][y-1]\n            if(temp[x][y]-temp[x-k][y-k]==k):\n                return True\n    for i in range(1,n):\n        x = 0\n        y = i\n        cn = 1\n        while(cn!=k and isin(y+1,0,n-1) and isin(x+1,0,n-1)):\n            x+=1\n            y+=1\n            temp[x][y]+=temp[x-1][y-1]\n            cn+=1\n        if(temp[x][y]==k):\n            return True\n        while(cn>=k and  isin(y+1,0,n-1) and isin(x+1,0,n-1)):\n            x+=1\n            y+=1\n            temp[x][y]+=temp[x-1][y-1]\n            if(temp[x][y]-temp[x-k][y-k]==k):\n                return True\n    return False\nt = eval(input())\nfor _ in range(t):\n    ans = prog()\n    if(ans==True):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"]