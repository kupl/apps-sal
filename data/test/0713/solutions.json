["s=min(list(map(int,input().split())))\nprint(s+1)\nfor i in range(s+1):print(i,s-i)\n", "n, m = map(int, input().split())\nk = min(n, m)\nprint(k + 1)\nfor i in range(k + 1):\n    print(i, k - i)", "import sys\nn, m = map(int, input().split())\nif m > n:\n    print(n + 1)\n    curr = (0, 1)\n    while curr[0] <= n:\n        print(curr[0],curr[1])\n        curr = (curr[0] + 1, curr[1] + 1)\n    return\nif m == n:\n    print(n + 1)\n    curr = (0, n)\n    while curr[0] <= n:\n        print(curr[0],curr[1])\n        curr = (curr[0] + 1, curr[1] - 1)\n    return\nprint(m + 1)\ncurr = (1, 0)\nwhile curr[1] <= m:\n    print(curr[0],curr[1])\n    curr = (curr[0] + 1, curr[1] + 1)", "n, m = map(int, input().split())\nk = min(n, m) + 1\nprint(k)\nfor i in range(k):\n    print(i, k - i - 1)", "\nn,m=list(map(int,input().split()))\n\nprint(min(n,m)+1)\n\nfor i in range(min(n,m)+1):\n    if(m>n):\n        print(i,m-i)\n    else:\n        print(n-i,i)\n", "\ndef main():\n    n,m = [int(i) for i in input().split()]\n    ans = []\n    k = min(n,m)+1\n    print(k)\n    for i in range(k):\n        print(i,k-i-1)\n        \ndef __starting_point():\n    main()\n\n__starting_point()", "n,m=list(map(int,input().split()))\ns=min(m,n)+1\nprint(s)\nfor i in range(s):\n    print( i, s-i-1)\n\n", "a, b = (int(x) for x in input().split())\nprint(min(a, b) + 1)\nfor i in range(min(a, b) + 1):\n\tprint(a - i, i)\n", "n, m = [int(k) for k in input().split()]\nminimum = min(m,n)\nprint(minimum+1)\n\npoints = [(0,m)]\nx = 0\ny = m\ndone = False\nwhile  not done:\n    x+=1\n    y-=1\n    points.append((x,y))\n    if x == n or y == 0:\n        done = True\nfor i in points:\n    print(str(i[0]) + \" \" + str(i[1]))", "n, m = map(int, input().split())\ngemy = min(n, m)\ngemy+=1\nprint(gemy)\nfor i in range(gemy):\n    print(i, gemy-1 - i)", "n, m = [int(x) for x in input().split()]\nprint(min(n, m) + 1)\nfor i in range(min(n, m) + 1):\n    print(i, min(n, m)-i)\n", "n,m = map(int, input().split())\nprint(min(n, m)+1)\nfor i in range(0,min(n,m)+1):\n    print(i, abs(min(n,m)-i))", "n, m = list(map(int, input().split()))\ngemy = min(n, m)\ngemy+=1\nprint(gemy)\nfor i in range(gemy):\n    print(i, gemy-1 - i)\n", "# coding=utf-8\nn, m = list(map(int, input().split()))\n\na = min(n, m)\nprint(a + 1)\nfor i in range(a + 1):\n    print(i, a - i)\n", "n, m = list(map(int, input().split()))\nlo = min([n, m])+1\nprint(lo)\nfor i in range(lo):\n    print(i, lo-i-1)\n\n", "def main():\n    n = min(list(map(int, input().split())))\n    print(n + 1)\n    for x, y in zip(list(range(n + 1)), list(range(n, -1, -1))):\n        print(x, y)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import re, sys, string, operator, functools, fractions, collections\nsys.setrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda x=' ': list(map(int,input().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\nmod=int(1e9+7)\neps=1e-6\n#################################################\nn,m=RI()\nx,y=0,0\nprint(min(n,m)+1)\nif n<m:\n    for i in range(n+1):\n        print(i, n-i)\nelse:\n    for i in range(m+1):\n        print(i,m-i)\n\n\n\n\n\n", "import math\nimport random\n\n(n, m) = map(int, input().split())\nn_points = n+1 if n < m else m+1\nprint(n_points)\nfor a in range(n_points)[::-1]:\n\tif n > m:\n\t\tprint(n_points-1-a, a)\n\telse:\n\t\tprint(a, n_points-1-a)", "n, m = list(map(int, input().split()))\n\ns = min(n, m)\nprint(s + 1)\nfor x in range(s + 1):\n    if n < m:\n        print(x, m - x)\n    else:\n        print(n - x, x)\n", "import math\nn, m = list(map(int, input().split()))\nprint(min(n, m) + 1)\nfor x in range(min(n, m) + 1):\n\t\tprint(x, m - x)", "'''\ndef main():\n\tfrom sys import stdin,stdout\ndef __starting_point():\n\tmain()\n'''\n#Journey to moon\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\tN,I =map(int,stdin.readline().split())\n\tvisited=list(0 for x in range(N))\n\tG=collections.defaultdict(list)\n\tgroups=[0]\n\tfor _ in range(I):\n\t\ta,b=map(int,stdin.readline().split())\n\t\tG[a].append(b)\n\t\tG[b].append(a)\n\tq=collections.deque()\n\tflag=0\n\tfor i in range(N):\n\t\tif not visited[i]:\n\t\t\tq.append(i)\n\t\t\tvisited[i]=flag+1\n\t\t\tgroups[flag]+=1\n\t\t\twhile len(q):\n\t\t\t\ttop=q.popleft()\n\t\t\t\tfor j in G[top]:\n\t\t\t\t\tif visited[j]!=visited[top]:\n\t\t\t\t\t\tvisited[j]=flag+1\n\t\t\t\t\t\tgroups[flag]+=1\n\t\t\t\t\t\tq.append(j)\n\t\t\tflag+=1\n\t\t\tgroups.append(0)\n\tcounter=0\n\tfor i in range(len(groups)-1):\n\t\tfor j in range(i+1,len(groups)):\n\t\t\tcounter+=groups[i]*groups[j]\n\tstdout.write(str(counter))\ndef __starting_point():\n\tmain()\n'''\n#Djikstra's\n'''\nimport collections\nclass Graph:\n\tdef __init__(self):\n\t\tself.nodes=set()\n\t\tself.edges=collections.defaultdict(list)\n\t\tself.distances = {}\n\n\tdef add_node(self, value):\n\t\tself.nodes.add(value)\n\n\tdef add_edge(self, from_node, to_node, distance):\n\t\tself.edges[from_node].append(to_node)\n\t\tself.edges[to_node].append(from_node)\n\t\tself.distances[(from_node, to_node)] = distance\n\t\tself.distances[(to_node, from_node)] = distance\n\n\ndef dijsktra(graph, initial):\n\tvisited = {initial: 0}\n\tpath = {}\n\n\tnodes = set(graph.nodes)\n\n\twhile nodes:\n\t\tmin_node = None\n\t\tfor node in nodes:\n\t\t\tif node in visited:\n\t\t\t\tif min_node is None:\n\t\t\t\t\tmin_node = node\n\t\t\t\telif visited[node] < visited[min_node]:\n\t\t\t\t\tmin_node = node\n\n\t\tif min_node is None:\n\t\t\tbreak\n\n\t\tnodes.remove(min_node)\n\t\tcurrent_weight = visited[min_node]\n\n\t\tfor edge in graph.edges[min_node]:\n\t\t\tweight = current_weight + graph.distances[(min_node, edge)]\n\t\t\tif edge not in visited or weight < visited[edge]:\n\t\t\t\tvisited[edge] = weight\n\t\t\t\tpath[edge] = min_node\n\n\treturn visited, path\n\ndef main():\n\tfrom sys import stdin,stdout\n\tfor _ in range(int(stdin.readline())):\n\t\tn,m=map(int,stdin.readline().split())\n\t\tG=Graph()\n\t\tfor i in range(n):\n\t\t\tG.add_node(i+1)\n\t\tfor i in range(m):\n\t\t\ta,b,c=map(int,stdin.readline().split())\n\t\t\tG.add_edge(a,b,c)\n\t\tinitial=int(stdin.readline())\n\t\tv,p=dijsktra(G, initial)\n\t\t#print(v)\n\t\t#print(p)\n\t\tfor i in range(1,n+1):\n\t\t\tif i!=initial:\n\t\t\t\tk=v.get(i,-1)\n\t\t\t\tstdout.write(str(k)+' ')\n\t\tstdout.write('\\n')\ndef __starting_point():\n\tmain()\n'''\n#Larget pallindrome in String\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tstring=stdin.readline().strip()\n\tl=len(string)\n\t#Triangle logic\t\n\t\n\tarrlen=(l*(l-1))//2\n\tarr=list(0 for x in range(arrlen))\n\tf=0\n\tc=l-1\n\tfor i in range(l-1):\n\t\tfor j in range(i+1,l):\n\t\t\tif string[i]==string[j]:\n\t\t\t\tarr[f+j-i-1]=1\n\t\tf+=c\n\t\tc-=1\n\t#print(arr)\n\tif any(arr):\n\t\t\n\telse:\n\t\tif l & 1:\n\t\t\tstdout.write('First')\n\t\telse:\n\t\t\tstdout.write('Second')\n\t#2-d Array Logic\n\tarr=list(list(0 for i in range(l)) for j in range(l))\n\tfor i in range(l):\n\t\tfor j in range(l):\n\t\t\tif string[i]==string[j]:\n\t\t\t\tarr[i][j]=1\n\tmaxim=0\n\tfor i in range(0,l*(l-1)-2,l+1):\n\t\ta,b=i+1,i+2\n\t\t#print(a,b)\n\t\tacount=0\n\t\tx=a//5\n\t\ty=a%5\n\t\tacount=arr[x][y]\t\t\n\t\tx-=1\n\t\ty-=1\n\t\twhile x>=0 and y>=0:\n\t\t\tacount+=arr[x][y]\n\t\t\tx-=1\n\t\t\ty-=1\n\t\tx=b//5\n\t\ty=b%5\n\t\tbcount=arr[x][y]\t\t\n\t\tx-=1\n\t\ty-=1\n\t\twhile x>=0 and y>=0:\n\t\t\tbcount+=arr[x][y]\n\t\t\tx-=1\n\t\t\ty-=1\n\t\tmaxim=max((acount,bcount,maxim))\n\tmaxim=max(maxim,arr[l-2][l-1])\n\tmaxim=(maxim<<1)^1\n\tdelta=l-maxim\n\tif delta & 1:\n\t\tstdout.write('Second')\n\telse:\n\t\tstdout.write('First')\ndef __starting_point():\n\tmain()\n'''\n#276B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\timport collections\n\ts=stdin.readline().strip()\n\tcount=collections.Counter(s)\n\tl=list(filter(lambda x: count[x] & 1,list(x for x in count)))\n\tremoved=sum(list(count[x] for x in l))-max(list(count[x] for x in l)+[0])\n\tif removed & 1:\n\t\tstdout.write('Second')\n\telse:\n\t\tstdout.write('First')\ndef __starting_point():\n\tmain()\n'''\n#362B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,m=map(int,stdin.readline().split())\n\tif m:\n\t\tdirty=sorted(map(int,stdin.readline().split()))\n\t\tif dirty[0]==1 or dirty[-1]==n:\n\t\t\tstdout.write('NO')\n\t\telse:\n\t\t\tflag=True\n\t\t\tfor i in range(m-2):\n\t\t\t\tif dirty[i+1]==dirty[i]+1 and dirty[i+2]==dirty[i]+2:\n\t\t\t\t\tflag=False\n\t\t\t\t\tbreak\n\t\t\tif flag:\n\t\t\t\tstdout.write('YES')\n\t\t\telse:\n\t\t\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES')\ndef __starting_point():\n\tmain()\n'''\n#279B SUM OF SUB-ARRAY\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,t=map(int,stdin.readline().split())\n\tarr=list(map(int,stdin.readline().split()))\n\tmaxim=0\n\tcurr_sum=arr[0]\n\ti=0\n\tj=1\n\tif curr_sum <=t:\n\t\tcount=1\n\telse:\n\t\tcurr_sum=0\n\t\tcount=0\n\t\ti=1\n\t\tj=2\n\twhile j<n:\n\t\tif curr_sum+arr[j]<=t:\n\t\t\tcount+=1\n\t\t\tcurr_sum+=arr[j]\n\t\t\tj+=1\n\t\telse:\n\t\t\tmaxim=max(count,maxim)\n\t\t\tif curr_sum:\n\t\t\t\tcurr_sum-=arr[i]\n\t\t\t\tcount-=1\n\t\t\telse:\n\t\t\t\tj+=1\n\t\t\ti+=1\n\tmaxim=max(count,maxim)\n\tstdout.write(str(maxim))\ndef __starting_point():\n\tmain()\n'''\n#469B\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tp,q,l,r=map(int,stdin.readline().split())\n\ta=[]\n\tb=[]\n\tvisited=list(0 for x in range(r-l+1))\n\t#print(visited)\t\n\tfor i in range(p):\n\t\tx,y=map(int,stdin.readline().split())\n\t\ta.append(x)\n\t\tb.append(y)\n\tfor i in range(q):\n\t\tx,y=map(int,stdin.readline().split())\n\t\tx+=l\n\t\ty+=l\n\t\tfor j in range(p):\n\t\t\t#print('x=',x,'y=',y)\n\t\t\tlower=max(0,a[j]-y)\n\t\t\tupper=min(b[j]-x,r)+1\n\t\t\tif upper > lower:\n\t\t\t\tdelta=upper-lower\n\t\t\t\t#print('upper=',upper,'lower=',lower)\n\t\t\t\tvisited[lower:upper]=list(1 for x in range(delta))\n\t\t\t\t#print('visited:\\n',visited)\n\t#\tprint(visited)\n\tstdout.write(str(visited[:r-l+1].count(1)))\ndef __starting_point():\n\tmain()\n'''\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\t#import numpy as np\n\tn,k=map(int,stdin.readline().split())\n\ta=tuple(map(int,stdin.readline().split()))\n\tminim=min(a)\n\tmaxim=max(a)\n\tarr=list(a)\t\n\tfor i in range(n):\n\t\tarr[i]-=minim\n\tif max(arr) > k:\n\t\tstdout.write('NO')\n\telse:\n\t\tstdout.write('YES\\n')\n\t\tfor i in a:\n\t\t\tstdout.write('1 '*minim)\n\t\t\tfor j in range(i-minim):\n\t\t\t\tstdout.write(str(j%k+1)+' ')\n\t\t\tstdout.write('\\n')\ndef __starting_point():\n\tmain()\n'''\n'''\ndef main():\n\tfrom sys import stdin,stdout\n\tn,p=[],[]\n\tfor _ in range(int(stdin.readline())):\n\t\tlast=int(stdin.readline())\n\t\tif last<0:\n\t\t\tn.append(-1*last)\n\t\telse:\n\t\t\tp.append(last)\n\tif sum(p)>sum(n):\n\t\tstdout.write('first')\n\telif sum(n)>sum(p):\n\t\tstdout.write('second')\n\telse:\n\t\tmaxim=max(n,p)\n\t\t#print(maxim)\n\t\tif maxim==p:\n\t\t\tif maxim==n:\n\t\t\t\tif last<0:\n\t\t\t\t\tstdout.write('second')\n\t\t\t\telse:\n\t\t\t\t\tstdout.write('first')\n\t\t\telse:\n\t\t\t\tstdout.write('first')\n\t\telse:\n\t\t\tstdout.write('second')\n\t\t\ndef __starting_point():\n\tmain()\n'''\n#286C\ndef main():\n\tfrom sys import stdin,stdout\n\tm,n=list(map(int,stdin.readline().split()))\n\tminim=min(m,n)\n\tstdout.write(str(minim+1)+'\\n')\n\tif n==minim:\n\t\tfor i in range(minim+1):\n\t\t\tstdout.write(str(m)+' '+str(i)+'\\n')\n\t\t\tm-=1\n\telse:\n\t\tfor i in range(minim+1):\n\t\t\tstdout.write(str(i)+' '+str(n)+'\\n')\n\t\t\tn-=1\ndef __starting_point():\n\tmain()\n\n\n\n__starting_point()", "n, m = map(int, input().split())\nx = min(n, m)\nprint(x+1)\nfor i in range (x+1):\n    print(i, x - i)", "n,m=map(int,input().split())\nn=min(n,m)+1;print(n)\nfor i in range(0,n):print(i,n-i-1)", "n,m=map(int,input().split())\nx=[]\ny=[]\ncnt=0\nfor i in range(0,min(n,m)+1):\n    cnt+=1\n    x.append(i)\n    y.append(min(n,m)-i)\nprint(cnt)\nfor i in range(cnt):\n    print(x[i],y[i])"]