["import sys\n\nin1 = sys.stdin.readlines()\nN = int(in1[0])\n#N = 10 ** 18\n#N = 2\n\"\"\"\n0 + 0 = 0\n0 x 0 = 0\n\n1 + 0 = 1\n1 x 0 = 1\n\n2 + 0 = 2\n2 x 0 = 2\n1 + 1 = 2\n1 x 1 = 0\n\n3 + 0 = 3\n3 x 0 = 3\n2 + 1 = 3\n2 x 1 = 3\n\"\"\"\np = 10 ** 9 + 7\n\ndef f(n):\n    if n in d:\n        return d[n]\n    d[n] = f(n // 2) + f((n - 1) // 2) + f((n - 2) // 2)\n    return d[n]\n\nd = {0: 1, 1: 2}\nprint((f(N) % p))\n", "def solve(n: int) -> int:\n    mod = 1e9 + 7\n    n_bin = '0' + bin(n)[2:]\n\n    dp = [[0, 0, 0] for _ in range(len(n_bin))]\n    dp[-1][0] = 1\n    for i in range(len(n_bin) - 2, -1, -1):\n        for s in range(3):\n            for k in range(3):\n                s2 = min(2, 2 * s + int(n_bin[len(n_bin) - i - 1]) - k)\n                if s2 >= 0:\n                    dp[i][s2] = int((dp[i][s2] + dp[i + 1][s]) % mod)\n\n    return int(sum(dp[0]) % mod)\n\nn = int(input())\nprint(solve(n))", "MOD = 10**9+7\n\nn = int(input())\ns = bin(n)[2:]\nl = len(s)\ndp = [[0]*4 for i in range(l+1)]\ndp[0][0] = 1\n\nfor i in range(l):\n    b = 1 if s[i] == '1' else 0\n    for j in range(4):\n        for k in range(3):\n            lj = min((j<<1) + b - k, 3)\n            if 0 <= lj:\n                dp[i+1][lj] += dp[i][j]\n                dp[i+1][lj] %= MOD\n\n# print(dp)\nprint((sum(dp[l])%MOD))\n", "MOD = 10 ** 9 + 7\nN = int(input())\nM = len(bin(N)) - 2\nL = bin(N)[2:]\n\ndp = [[0] * 3 for _ in range(M + 1)]\ndp[0][0] = 1\n\nfor i in range(M):\n    if L[i] == '1':\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][0] + dp[i][1]\n        dp[i + 1][2] += 2 * dp[i][1] + 3 * dp[i][2]\n    else:\n        dp[i + 1][0] += dp[i][0] + dp[i][1]\n        dp[i + 1][1] += dp[i][1]\n        dp[i + 1][2] += dp[i][1] + 3 * dp[i][2]\n    \n    for j in range(3):\n        dp[i + 1][j] %= MOD\n\n\nprint((sum(dp[M]) % MOD))\n", "from functools import*\n@lru_cache(None)\ndef d(n):x=n//2;return n+1 if n<2 else d(x)+d(~-x)+d(n+~x)\nprint(d(int(input()))%(10**9+7))", "N=int(input())\ns=bin(N)[2:]\nK=len(s)\nmod=10**9+7\n#bp[i][j]\u306f\u4e0a\u304b\u3089i\u30d3\u30c3\u30c8\u4ee5\u4e0a\u304c\u78ba\u5b9a\u3067N>>(K-i)-v>>(K-i)=j\u3068\u306a\u308b\u901a\u308a\u6570\nbp=[[0]*(3) for i in range(K+1)]\nbp[0][0]=1\nfor i in range(1,K+1):\n    if s[i-1]==\"0\":\n        bp[i][0]=(bp[i-1][1]+bp[i-1][0])%mod\n        bp[i][1]=bp[i-1][1]\n        bp[i][2]=(bp[i-1][1]+bp[i-1][2]*3)%mod\n    else:\n        bp[i][0]=bp[i-1][0]\n        bp[i][1]=(bp[i-1][1]+bp[i-1][0])%mod\n        bp[i][2]=(bp[i-1][1]*2+bp[i-1][2]*3)%mod\nprint((sum(bp[-1])%mod))\n", "# python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# main\nN = int(input())\n\nmod = 10**9+7\n# bit\u3082\u4e0a\u304b\u3089\u898b\u3066\u3044\u304f\u306e\u3067\u9006\u9806\u306b\u3057\u3066\u6271\u3044\u3084\u3059\u304f\u3059\u308b\nbinN = format(N,\"061b\")[::-1]\n\ndp = [[0,0,0] for _ in range(61)]\ndp[60][0] = 1\n\nfor i in range(59,-1,-1):\n    # i\u6841\u76ee\u306ebit\u304c 1\n    if binN[i]==\"1\":\n        dp[i][0] = dp[i+1][0]\n        dp[i][1] = dp[i+1][0] + dp[i+1][1]\n        dp[i][2] = 2*dp[i+1][1] + 3*dp[i+1][2]\n    # i\u6841\u76ee\u306ebit\u304c 0\n    else:\n        dp[i][0] = dp[i+1][0] + dp[i+1][1]\n        dp[i][1] = dp[i+1][1]\n        dp[i][2] = dp[i+1][1] + 3*dp[i+1][2]\n\n    for j in range(3):\n        dp[i][j] %= mod\n\nprint((dp[0][0] + dp[0][1] + dp[0][2]) % mod)", "P=10**9+7\ninv2=(1+P)//2\ndef exp(a,k):\n    if k==0:\n        return 1\n    elif k%2==0:\n        return (exp(a*a,k//2))%P\n    else:\n        return (a*exp(a*a,k//2))%P\nD=dict()\ndef f(N):\n    if N in D:\n        return D[N]\n    if N<=1:\n        D[N]=N\n        return N\n    i=0\n    while(1):\n        if 2**i<=N<2**(i+1):\n            break\n        i+=1\n    if N==2**i:\n        D[N]=((1+exp(3,i))*inv2)%P\n        return D[N]\n    D[N]=(f(N-2**i)-f(2**(i+1)-N-1)+exp(3,i))%P\n    return D[N]\nprint(f(int(input())+1))", "def d_xor_sum(N):\n    from functools import lru_cache\n\n    @lru_cache()\n    def f(k):\n        # a+b<=k,a xor b <= k \u3092\u6e80\u305f\u3059\u6b63\u6574\u6570(a,b)\u306e\u7d44\u306e\u500b\u6570(\u305f\u3060\u3057a>=b)\n        # N=0\u306e\u3068\u304d(u,v)\u306e\u7d44\u306f(0,0)\u306e1\u901a\u308a\n        # N=1\u306e\u3068\u304d(0,0),(1,1)\u306e2\u901a\u308a\n        return (1, 2)[k] if k <= 1 else f(k // 2) + f((k - 1) // 2) + f((k - 2) // 2)\n\n    ans = f(N) % (10**9 + 7)\n    return ans\n\nN = int(input())\nprint(d_xor_sum(N))", "MOD=10**9+7\nN = int(input())\nK = len(bin(N)) - 2\nDP = [[0]*3 for _ in range(K+1)]\nDP[0][0] = 1\nfor k in range(K):\n    if N & (1 << K - k - 1):\n        DP[k+1][0] = DP[k][0]\n        DP[k+1][1] = (DP[k][0] + DP[k][1]) % MOD\n        DP[k+1][2] = (DP[k][1]*2 + DP[k][2]*3) % MOD\n    else:\n        DP[k+1][0] = (DP[k][0] + DP[k][1]) % MOD\n        DP[k+1][1] = DP[k][1]\n        DP[k+1][2] = (DP[k][1] + DP[k][2]*3) % MOD\nprint(sum(DP[-1]) % MOD)", "N = int(input())\na, b, c = 1, 0, 0\nfor i in range(80)[::-1]:\n    if N>>i & 1: a, b, c = a, a+b, 2*b+3*c\n    else: a, b, c = a+b, b, b+3*c\nprint((a+b+c) % (10**9+7))", "MOD = 10**9+7\nn = int(input())\ns = bin(n)[2:]\ndp = [[0, 0, 0] for _ in range(len(s) + 1)]\ndp[0][0] = 1\nfor i in range(len(s)):\n    if s[i] == '0':\n        dp[i + 1][0] = dp[i][0] + dp[i][1]\n        dp[i + 1][1] = dp[i][1]\n        dp[i + 1][2] = dp[i][1] + dp[i][2] * 3\n    else:\n        dp[i + 1][0] = dp[i][0]\n        dp[i + 1][1] = dp[i][0] + dp[i][1]\n        dp[i + 1][2] = dp[i][1] * 2 + dp[i][2] * 3\n    for j in range(3):\n        dp[i+1][j] %= MOD\nprint((sum(dp[-1])%MOD))\n", "n = int(input())\nx = n.bit_length()\ndp = [[0]*3 for i in range(x)]\ndp[-1][0] = 1\ndp[-1][1] = 1\nmod = 10**9+7\n\nfor i in range(x-2,-1,-1):\n\n    if (n >> i) & 1:\n        dp[i][0] = (dp[i+1][0])%mod\n        dp[i][1] = (dp[i+1][0]+dp[i+1][1])%mod\n        dp[i][2] = (dp[i+1][2]*3+dp[i+1][1]*2)%mod\n\n    else:\n        dp[i][0] = (dp[i+1][0]+dp[i+1][1])%mod\n        dp[i][1] = (dp[i+1][1])%mod\n        dp[i][2] = (dp[i+1][2]*3+dp[i+1][1])%mod\nprint(sum(dp[0])%mod)", "MOD=10**9+7\nN=int(input())\n\ndp=[[0 for _ in range(3)] for _ in range(64)]\ndp[63][0]=1\n\nfor d in range(62,-1,-1):\n  b=(N>>d)&1 \n  s=dp[d+1][:]\n  dp[d][0]=dp[d+1][0]+(1^b)*dp[d+1][1] % MOD\n  dp[d][1]=b*dp[d+1][0]+dp[d+1][1] % MOD\n  dp[d][2]=(1+b)*dp[d+1][1]+3*dp[d+1][2] % MOD\n\nprint(sum(dp[0][:]) % MOD)", "from functools import lru_cache\n\nmod = 10 ** 9 + 7\n\n@lru_cache(maxsize=None)\ndef f(n):\n    if n <= 1:\n        return n + 1\n    return (f(n // 2) + f((n - 1) // 2) + f((n - 2) // 2)) % mod\n\nN = int(input())\nprint(f(N))", "n = int(input())\nbn = bin(n)[2:]\ndp = [[0]*3 for i in range(len(bn) + 1)]\nmod = 10**9+7\ndp[len(bn)][0] = 1\nfor d in range(len(bn)-1, -1, -1):\n    if bn[len(bn)-1 - d] == \"1\":\n        dp[d][0] = dp[d+1][0]\n        dp[d][1] = dp[d+1][0] + dp[d+1][1]\n        dp[d][2] = 2*dp[d+1][1] + 3*dp[d+1][2]\n    else:\n        dp[d][0] = dp[d+1][0] + dp[d+1][1]\n        dp[d][1] = dp[d+1][1]\n        dp[d][2] = dp[d+1][1] + 3*dp[d+1][2]\nprint((dp[0][0] + dp[0][1] + dp[0][2]) % mod)\n", "MOD = 10**9+7\nn = int(input())\n\ndp = [1,0,0]\nfor i in range(64,-1,-1):\n    ndp = [0,0,0]\n    for d in range(3):\n        nd = d*2 + (n>>i&1)\n        ndp[min(2,nd)] += dp[d] # 0,0\n        if nd >= 1: ndp[min(2,nd-1)] += dp[d] # 0,1\n        if nd >= 2: ndp[min(2,nd-2)] += dp[d] # 1,1\n    dp = ndp\n    \nprint((sum(dp) % MOD))\n", "#!/usr/bin/env python3\nN = int(input())\n\nMOD = 1000000007\ncache = {0: 1, 1: 2}\n\n\ndef f(n):\n    if n in cache:\n        return cache[n]\n    if n % 2 == 0:\n        result = 2 * f(n // 2 - 1) + f(n // 2)\n    else:\n        result = f(n // 2 - 1) + 2 * f(n // 2)\n    result %= MOD\n    cache[n] = result\n    return result\n\n\nprint((f(N)))\n", "cache = {}\nM = 10**9+7\ndef f(i):\n    if i == 0: return 0\n    if i == 1: return 1\n    if i in cache: return cache[i]\n    k = i//2\n    if i % 2 == 0: cache[i] = 2*f(k)%M + f(k-1)%M\n    else: cache[i] = 2*f(k)%M + f(k+1)%M\n    cache[i] %= M\n    return cache[i]\nprint((f(int(input())+1)))\n", "import sys\n\np=10**9+7\ndthbit=lambda d,n: (n>>d)&1\n\ndef main(n):\n    dp=[[0 for _ in range(3)] for _ in range(64)]\n    dp[63][0]=1\n    for d in range(62,-1,-1):\n        b=dthbit(d,n)\n        s=dp[d+1][:]\n        dp[d][0]=dp[d+1][0]+(1^b)*dp[d+1][1] % p\n        dp[d][1]=b*dp[d+1][0]+dp[d+1][1] % p\n        dp[d][2]=(1+b)*dp[d+1][1]+3*dp[d+1][2] % p\n    return sum(dp[0][:]) % p\n\nn=int(input())\nprint((main(n)))\n", "# coding: utf-8\n# Your code here!\nodd={0:1}\neven={0:1,1:3}\nM=10**9+7\ndef memo(N):\n    if N ==0:\n        return 1\n    if N==1:\n        return 2\n    return (memoodd((N-1)//2)+memoeven(N//2))%M\n\ndef memoodd(N):\n    if N in odd:\n        return odd[N]\n    odd[N] = memo(N)\n    return odd[N]\n\ndef memoeven(N):\n    if N in even:\n        return even[N]\n    even[N] = (memo(N)+memo(N-1))%M\n    return even[N]\n\nn=int(input())\nprint((memo(n)))\n", "N = int(input())\nMOD = 10**9+7\ndp = [[0]*3 for _ in range(61)]\ndp[60][0] = 1\nfor d in range(59,-1,-1):\n    for s in range(3):\n        for k in range(3):\n            ns = min(2, 2*s + ((N>>d)&1) - k)\n            if ns < 0: continue\n            dp[d][ns] += dp[d+1][s]\n            dp[d][ns] %= MOD\nprint(sum(dp[0]) % MOD)", "from functools import lru_cache\n\n\n@lru_cache(None)\ndef f(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return (2 * f(n // 2 - 1) + f(n // 2)) % 1000000007\n    else:\n        return (2 * f(n // 2) + f(n // 2 - 1)) % 1000000007\n\n\nn = int(input())\nprint(f(n))", "# solution\n\ndata= int(input())\n\narray = format(data,\"b\")\n\nmod = 1000000007\n\ndynamic = [[0 for j in range(3)] for i in range(len(array)+1)]\ndynamic[0][0] = 1\n\nfor i in range(len(array)):\n  for j in range(3):\n      for x in range(2):\n        for y in range(x,2):\n          b=(data>>i)&1\n          dynamic[i+1][(x+y+j-b+1)//2] = (dynamic[i+1][(x+y+j-b+1)//2]+dynamic[i][j])%mod\nprint(dynamic[len(array)][0])", "N = int(input())\nMOD = 10**9+7\ndp = [[0]*3 for _ in range(61)]\ndp[60][0] = 1\nfor d in range(59,-1,-1):\n  for s in range(3):\n    for k in range(3):\n      ns = min(2, 2*s + ((N>>d)&1) - k)\n      if ns < 0:\n        continue\n      dp[d][ns] += dp[d+1][s]\n      dp[d][ns] %= MOD\n\nprint(sum(dp[0])%MOD)", "n= int(input())\na = format(n,\"b\")\nmod = 1000000007\ndp = [[0 for j in range(3)] for i in range(len(a)+1)]\ndp[0][0] = 1\nfor i in range(len(a)):\n  for j in range(3):\n      for x in range(2):\n        for y in range(x,2):\n          b=(n>>i)&1\n          dp[i+1][(x+y+j-b+1)//2] = (dp[i+1][(x+y+j-b+1)//2]+dp[i][j])%mod\nprint(dp[len(a)][0])", "import os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\n# \u89e3\u8aacAC\nN = int(sys.stdin.readline())\n\n# # dp[i][j]: \u53f3\u304b\u3089i\u30d3\u30c3\u30c8\u76ee\u307e\u3067\u6c7a\u307e\u3063\u3066\u3066\u3001v\u304cj\u3068\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u6570\n# dp = [[0] * (N + 1) for _ in range(N.bit_length())]\n# # \u4e21\u65b90\n# dp[0][0] += 1\n# # \u7247\u65b91\n# dp[0][1] += 1\n# # \u4e21\u65b91\n# dp[0][2] += 1\n# for i in range(1, N.bit_length()):\n#     for j in range(N + 1):\n#         # \u4e21\u65b90\n#         dp[i][j] += dp[i - 1][j]\n#         # \u7247\u65b91\n#         if j + pow(2, i) <= N:\n#             dp[i][j + pow(2, i)] += dp[i - 1][j]\n#         # \u4e21\u65b91\n#         if j + pow(2, i + 1) <= N:\n#             dp[i][j + pow(2, i + 1)] += dp[i - 1][j]\n# print(sum(dp[-1]))\n\n\n# # dp[j]: v\u304cj\u3068\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u6570\n# # \u4e0a\u304b\u3089\u6c7a\u3081\u3066\u304f\n# dp = [0] * (N + 1)\n# # \u4e21\u65b90\n# dp[0] = 1\n# # \u7247\u65b91\n# dp[1 << (N.bit_length() - 1)] = 1\n# for i in reversed(range(N.bit_length() - 1)):\n#     for j in reversed(range(N + 1)):\n#         # \u7247\u65b91\n#         if j + pow(2, i) <= N:\n#             dp[j + pow(2, i)] += dp[j]\n#         # \u4e21\u65b91\n#         if j + pow(2, i + 1) <= N:\n#             dp[j + pow(2, i + 1)] += dp[j]\n#     print(dp)\n# print(sum(dp))\n\n\n# # dp[i][j]: \u53f3\u304b\u3089i\u30d3\u30c3\u30c8\u76ee\u307e\u3067\u6c7a\u307e\u3063\u3066\u3066\u3001N-v\u304cj\u3068\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u6570\n# # \u4e0a\u304b\u3089\u6c7a\u3081\u3066\u304f\n# dp = [[0] * (N + 1) for _ in range(N.bit_length())]\n# # \u4e21\u65b90\n# dp[-1][-1] = 1\n# # \u7247\u65b91\n# dp[-1][N - (1 << (N.bit_length() - 1))] = 1\n# for i in reversed(range(N.bit_length() - 1)):\n#     for j in reversed(range(N + 1)):\n#         # \u4e21\u65b90\n#         dp[i][j] += dp[i + 1][j]\n#         # \u7247\u65b91\n#         if j - (1 << i) >= 0:\n#             dp[i][j - (1 << i)] += dp[i + 1][j]\n#         # \u4e21\u65b91\n#         if j - (1 << i + 1) >= 0:\n#             dp[i][j - (1 << i + 1)] += dp[i + 1][j]\n#     print(dp)\n# print(sum(dp[0]))\n\n# # dp[i][j]: \u53f3\u304b\u3089i\u30d3\u30c3\u30c8\u76ee\u307e\u3067\u6c7a\u307e\u3063\u3066\u3066\u3001(N>>i)-(v>>i)\u304cj\u3068\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u6570\n# # \u4e0a\u304b\u3089\u6c7a\u3081\u3066\u304f\n# dp = [[0] * (N * 3) for _ in range(N.bit_length())]\n# # \u4e21\u65b90\n# dp[-1][1] = 1\n# # \u7247\u65b91\n# dp[-1][0] = 1\n# for i in reversed(range(N.bit_length() - 1)):\n#     for j in reversed(range(N + 1)):\n#         if N >> i & 1:\n#             # \u4e21\u65b90\n#             dp[i][(j << 1) + 1] += dp[i + 1][j]\n#             # \u7247\u65b91\n#             dp[i][j << 1] += dp[i + 1][j]\n#             if j > 0:\n#                 # \u4e21\u65b91\n#                 dp[i][(j << 1) - 1] += dp[i + 1][j]\n#         else:\n#             # \u4e21\u65b90\n#             dp[i][j << 1] += dp[i + 1][j]\n#             if j > 0:\n#                 # \u7247\u65b91\n#                 dp[i][(j << 1) - 1] += dp[i + 1][j]\n#                 # \u4e21\u65b91\n#                 dp[i][(j << 1) - 2] += dp[i + 1][j]\n#     print(dp)\n# print(sum(dp[0]))\n\n# dp[i][j]: \u53f3\u304b\u3089i\u30d3\u30c3\u30c8\u76ee\u307e\u3067\u6c7a\u307e\u3063\u3066\u3066\u3001(N>>i)-(v>>i)\u304cj\u3068\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u6570\n# j >= 2 \u4ee5\u964d\u306f j <= 1 \u306b\u5165\u3063\u3066\u3053\u306a\u3044\u306e\u3067 j == 2 \u3068\u3057\u3066\u307e\u3068\u3081\u308b\n# \u4e0a\u304b\u3089\u6c7a\u3081\u3066\u304f\ndp = [[0] * 3 for _ in range(N.bit_length())]\n# \u4e21\u65b90\ndp[-1][1] = 1\n# \u7247\u65b91\ndp[-1][0] = 1\nfor i in reversed(list(range(N.bit_length() - 1))):\n    if N >> i & 1:\n        # \u4e21\u65b90\n        # dp[i][(j << 1) + 1] += dp[i + 1][j]\n        dp[i][1] += dp[i + 1][0]\n        dp[i][2] += dp[i + 1][1]\n        dp[i][2] += dp[i + 1][2]\n        # \u7247\u65b91\n        # dp[i][j << 1] += dp[i + 1][j]\n        dp[i][0] += dp[i + 1][0]\n        dp[i][2] += dp[i + 1][1]\n        dp[i][2] += dp[i + 1][2]\n        # \u4e21\u65b91\n        # dp[i][(j << 1) - 1] += dp[i + 1][j]\n        dp[i][1] += dp[i + 1][1]\n        dp[i][2] += dp[i + 1][2]\n    else:\n        # \u4e21\u65b90\n        # dp[i][j << 1] += dp[i + 1][j]\n        dp[i][0] += dp[i + 1][0]\n        dp[i][2] += dp[i + 1][1]\n        dp[i][2] += dp[i + 1][2]\n        # \u7247\u65b91\n        # dp[i][(j << 1) - 1] += dp[i + 1][j]\n        dp[i][1] += dp[i + 1][1]\n        dp[i][2] += dp[i + 1][2]\n        # \u4e21\u65b91\n        # dp[i][(j << 1) - 2] += dp[i + 1][j]\n        dp[i][0] += dp[i + 1][1]\n        dp[i][2] += dp[i + 1][2]\n    dp[i][0] %= MOD\n    dp[i][1] %= MOD\n    dp[i][2] %= MOD\nprint((sum(dp[0]) % MOD))\n", "def f(n):\n if n in d:return d[n]\n d[n]=f(n//2)+f((n-1)//2)+f((n-2)//2);return d[n]\nd={0:1,1:2};print(f(int(input()))%(10**9+7))", "# coding: utf-8\n# Your code here!\ndic_memo={0:1,1:2}\nM=10**9+7\ndef memo(N):\n    if N in dic_memo:\n        return dic_memo[N]\n    dic_memo[N]=(memo((N-1)//2)+memo(N//2)+memo(N//2-1))%M\n    return dic_memo[N]\n\nn=int(input())\nprint((memo(n)))\n", "N = int(input())\ns = bin(N)[2:]\nn = len(s)\ndp = [[0] * 4 for i in range(len(s)+1)]\ndp[0][0] = 1\nMOD = int(1e9) + 7\nfor i in range(n):\n    b = 1 if s[i] == '1' else 0\n    for j in range(4):\n        for k in range(3):\n            nj = min(((j << 1) + b - k, 3))\n            if 0 <= nj:\n                dp[i+1][nj] += dp[i][j]\n                dp[i+1][nj] %= MOD\nprint((sum(dp[n]) % MOD))\n", "def d_XorSum(N):\n    MOD = 10**9 + 7\n    memo = {0: 1, 1: 2}\n    # N=0\u306e\u3068\u304d(u,v)\u306e\u7d44\u306f(0,0)\u306e1\u901a\u308a\n    # N=1\u306e\u3068\u304d(0,0),(1,1)\u306e2\u901a\u308a\n\n    def f(k):\n        # a+b<=k,a xor b <= k \u3092\u6e80\u305f\u3059\u6b63\u6574\u6570(a,b)\u306e\u7d44\u306e\u500b\u6570(\u305f\u3060\u3057a>=b)\n        if k in memo:\n            return memo[k]\n        ret = (f(k // 2) + f((k - 1) // 2) + f((k - 2) // 2)) % MOD\n        memo[k] = ret\n        return ret\n    return f(N)\n\nN = int(input())\nprint(d_XorSum(N))", "N=int(input())\nmod=10**9+7\n\nANSLIST=[1]\nfor i in range(61):\n    ANSLIST.append((ANSLIST[-1]*3-1)%mod)\n\nANS=[1, 2, 4, 5]\nANSDICT=dict()\ndef ans(k):\n    if 0<=k<=3:\n        return ANS[k]\n    if ANSDICT.get(k)!=None:\n        return ANSDICT[k]\n    for i in range(61):\n        if k==2**i-2:\n            return ANSLIST[i]-1\n        if k==2**i-1:\n            return ANSLIST[i]\n        if 2**i-1>k:\n            break\n    x=k-(2**(i-1)-1)\n\n    ANSDICT[k]=(ans(x-1)+ANSLIST[i-1]*2-ans(2**(i-1)-x-2)-1)%mod\n    return ANSDICT[k]\n\nprint(ans(N))", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef f(x, s):\n    if min(x, s) < 0: return 0\n    if max(x, s) < 2:\n        if x and s: return 2\n        else: return 1\n    if (x, s) in memo: return memo[x, s]\n    res = f(x >> 1, s >> 1) + f(x - 1 >> 1, s - 1 >> 1) + f(x >> 1, s - 2 >> 1)\n    res = memo[x, s] = res % md\n    return res\n\nmemo = {}\nmd = 10 ** 9 + 7\n\ndef main():\n    n = II()\n    print(f(n, n))\n\nmain()\n", "mod = 10 ** 9 + 7\n\nN = int(input())\n\nmemo = {0:1, 1:2}\ndef f(n):\n    if n not in memo:\n        memo[n] = (f(n // 2) + f((n - 1) // 2) + f((n - 2) // 2)) % mod\n    return memo[n]\n\nprint(f(N))", "N = int(input())\n\nd = {0: 1, 1: 2}\n\ndef f(n):\n  if n in d:\n    return d[n]\n  d[n] = (f(n // 2) + f((n - 1) // 2) + f((n - 2) // 2)) % (10**9 + 7)\n  return d[n]\n\nprint(f(N))", "n = int(input())\n\nMOD = 10 ** 9 + 7\n\nk = len(bin(n)) - 2\n\ndp = [[0, 0, 0] for _ in range(k + 1)]\n\ndp[0][0] = 1\n\nfor i in range(k):\n    if (n >> (k - 1 - i)) & 1:\n        dp[i+1][0] = dp[i][0]\n        dp[i+1][1] = dp[i][0] + dp[i][1]\n        dp[i+1][2] = dp[i][1] * 2 + dp[i][2] * 3\n    else:\n        dp[i+1][0] = dp[i][0] + dp[i][1]\n        dp[i+1][1] = dp[i][1]\n        dp[i+1][2] = dp[i][1] + dp[i][2] * 3\n    map(lambda x:x%MOD, dp[k])\n\nprint(sum(dp[k]) % MOD)", "n=int(input())\nnstr=bin(n)[2:]\nthrpow=[1]\nnow=1\nfor k in range(len(nstr)):\n    now=(now*3)%(10**9+7)\n    thrpow.append(now)\nf=dict()\ng=dict()\nif nstr[-1]=='0':f[1]=1\nelif nstr[-1]=='1':f[1]=2\ng[1]=3\nfor k in range(2,len(nstr)+1):\n    if nstr[-k]=='0':\n        f[k]=(f[k-1])%(10**9+7)\n        g[k]=(thrpow[k-1]+f[k-1]+g[k-1])%(10**9+7)\n    if nstr[-k]=='1':\n        f[k]=(f[k-1]+g[k-1])%(10**9+7)\n        g[k]=(2*thrpow[k-1]+g[k-1])%(10**9+7)\nprint(f[len(nstr)])", "n = int(input())\nd = len(bin(n)) - 2\nmod = 10**9 + 7\ndp = [[0 for j in range(3)] for i in range(d+1)]\ndp[d][0] = 1\nfor i in range(d):\n    k = d - 1 - i\n    for j in range(3):\n        if j == 0:\n            if (n >> k) & 1:\n                dp[k][0] += dp[k+1][0]\n                dp[k][1] += dp[k+1][0]\n            else:\n                dp[k][0] += dp[k+1][0]\n        elif j == 1:\n            if (n >> k) & 1:\n                dp[k][1] += dp[k+1][1]\n                dp[k][2] += dp[k+1][1] * 2\n            else:\n                dp[k][0] += dp[k+1][1]\n                dp[k][1] += dp[k+1][1]\n                dp[k][2] += dp[k+1][1]\n        else:\n            dp[k][2] += dp[k+1][2] * 3\n        map(lambda x:x%mod, dp[k])\nprint(sum(dp[0]) % mod)", "from functools import lru_cache\n\nMOD = 10**9 + 7\n\n@lru_cache(None)\ndef F(N):\n  # (u,v) = (a^b,a+b), (a^b,a+b+1) \u3068\u3044\u3046\u7d44\u306e\u500b\u6570x,y. where v <= N\n  if N == 0:\n    return 1,1\n  x,y = 0,0\n  # (0,0) mod 2\n  x1,y1 = F(N//2)\n  x += x1\n  y += x1\n  # (0,1) mod 2\n  x2,y2 = F((N-1)//2)\n  x += x2\n  y += y2\n  # (1,1) mod 2\n  if N > 1:\n    x3,y3 = F((N-2)//2)\n    x += y3\n    y += y3\n\n  return x%MOD,y%MOD\n  \nanswer = F(int(input()))[0]\n           \nprint(answer)\n  \n  \n", "def xor_sum(N: int)->int:\n    MOD = 10**9 + 7\n\n    digits = len(bin(N)) - 2\n\n    dp = [[0] * 3 for _ in range(digits+1)]\n    dp[0][0] = 1\n\n    for i in range(digits):\n        if N >> (digits - 1 - i) & 1:\n            dp[i+1][0] = dp[i][0]\n            dp[i+1][1] = (dp[i][0] + dp[i][1]) % MOD\n            dp[i+1][2] = (dp[i][1] * 2 + dp[i][2] * 3) % MOD\n        else:\n            dp[i+1][0] = (dp[i][0] + dp[i][1]) % MOD\n            dp[i+1][1] = dp[i][1]\n            dp[i+1][2] = (dp[i][1] + dp[i][2] * 3) % MOD\n\n    return sum(dp[digits]) % MOD\n\n\ndef __starting_point():\n    N = int(input())\n    ans = xor_sum(N)\n    print(ans)\n\n__starting_point()", "# coding: utf-8\n# Your code here!\nodd={0:1}\neven={0:1,1:3}\nM=10**9+7\ndef memo(N):\n    if N ==0:\n        return 1\n    if N==1:\n        return 2\n    return (memoodd((N-1)//2)+memoeven(N//2))%M\n\n\ndef memoodd(N):\n    if N in odd:\n        return odd[N]\n#    a=memoodd((N-1)//2)\n#    b=memoeven(N//2)\n    odd[N] = memo(N)\n    return odd[N]\n\ndef memoeven(N):\n    if N in even:\n        return even[N]\n#    a=memoodd((N-1)//2)\n#    b=memoeven(N//2)\n#    c=memoodd((N-2)//2)\n#    d=memoeven((N-1)//2)\n#    return a+b+c+d\n    even[N] = (memo(N)+memo(N-1))%M\n    return even[N]\n\nn=int(input())\n\nprint((memo(n)))\n", "n=int(input())\nm=10**9+7\ns=bin(n)[2:]\nt=[[0,0,0]for i in range(len(s)+1)]\nt[0][0]=1\nfor i in range(1,len(s)+1):\n    if s[i-1]==\"0\":\n        t[i][0]=t[i-1][0]+t[i-1][1]\n        t[i][1]=t[i-1][1]\n        t[i][2]=t[i-1][1]+t[i-1][2]*3\n    else:\n        t[i][0]=t[i-1][0]\n        t[i][1]=t[i-1][0]+t[i-1][1]\n        t[i][2]=t[i-1][2]*3+t[i-1][1]*2\n    for j in range(3):\n        t[i][j]%=m\nprint(sum(t[-1])%m)", "import sys\nsys.setrecursionlimit(10**9)\n\nN=int(input())\nmod=10**9+7\nDP=dict()\nDP[(0,0)]=1#a+b,a^b\nDP[(1,0)]=1\nDP[(1,1)]=2\n\ndef ans(S,X):\n    #print(S,X)\n    if DP.get((S,X))!=None:\n        return DP[(S,X)]\n    if S==0:\n        return 1\n    #if X>S:\n    #    return ans(S,S)\n    \n\n    DP[(S,X)]=(ans(S//2,X//2)+ans((S-1)//2,(X-1)//2)+ans((S-2)//2,(X-2)//2))%mod\n    #\u4e00\u756a\u4e0b\u306e\u6841\u3092\u307f\u3066\u3001bit\u304c0,0\u306e\u5834\u5408,1,0\u306e\u5834\u5408,1,1\u306e\u5834\u5408.\n    #\u4e09\u3064\u76ee\u306e\u5834\u5408\u306f\u672c\u6765ans((S-2)//2,X//2)\u3060\u304c,\u4eca\u56de\u6271\u3046\u306e\u306fS=X\u306e\u3068\u304d\u3067,X>S\u306e\u3068\u304d\u306f0\u306b\u306a\u308b\u306e\u3067,ans((S-2)//2,(X-2)//2)\u3067\u826f\u3044\u306f\u305a.\n    return DP[(S,X)]\n\nprint((ans(N,N)))\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN = INT()\nN = format(N, '060b')[::-1]\n# N[i] := N\u306ei\u30d3\u30c3\u30c8\u76ee\u3068\u3057\u3066\u304a\u304f\nN = [0] + list(map(int, N))\n\n# dp[i][j] := i\u30d3\u30c3\u30c8\u76ee\u307e\u3067\u898b\u3066\u3001\u305d\u306e\u6841\u307e\u3067\u306e\u5024\u306b\u304a\u3044\u3066\u3001a+b \u304cN\u3088\u308a j*2^i \u5c0f\u3055\u3044\u901a\u308a\u6570(j>=2\u306fj=2\u3067\u540c\u4e00\u8996)\ndp = list2d(61, 3, 0)\ndp[60][0] = 1\nfor i in range(60, 0, -1):\n    # j\u306e\u72b6\u614b j=0,1,2\u4ee5\u4e0a \u306e3\u901a\u308a\n    for j in range(3):\n        # \u4eca\u56de\u306e\u6841\u3067\u306ea,b\u306e\u9078\u3073\u65b9 (0,0)=0,(0,1)=1,(1,1)=2 \u306e3\u901a\u308a\n        for k in range(3):\n            # 1\u6841\u4e0b\u304c\u308b\u6642\u306b\u3001\u73fe\u5728\u306ej\u306f 2^i = 2*2^(i-1) \u304b\u3089\u3001*2\u3055\u308c\u308b\n            # N\u306e\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u6841\u306a\u30891\u3092\u8db3\u3059\n            # \u4eca\u56de\u8ffd\u52a0\u3059\u308bk(0~2)\u3092\u5f15\u304f\n            nxt = min(j*2 + N[i] - k, 2)\n            # nxt\u304c\u30de\u30a4\u30ca\u30b9\u306a\u3089\u7e70\u308a\u4e0a\u304c\u308a\u3067N\u3092\u8d85\u3048\u308b\u306e\u3067\u9077\u79fb\u3055\u305b\u306a\u3044\n            if nxt >= 0:\n                dp[i-1][nxt] += dp[i][j]\n                dp[i-1][nxt] %= MOD\nprint(((dp[0][0]+dp[0][1]+dp[0][2])%MOD))\n", "from functools import*\n@lru_cache(None)\ndef d(n):x=n//2;return n+1 if n<2 else d(x)+d(~-x)+d(n+~x)\nprint(d(int(input()))%(10**9+7))", "import sys\nstdin = sys.stdin\n\ndef li(): return [int(x) for x in stdin.readline().split()]\ndef li_(): return [int(x)-1 for x in stdin.readline().split()]\ndef lf(): return [float(x) for x in stdin.readline().split()]\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(ns())\ndef nf(): return float(ns())\n\n\nMOD = 10**9+7\n\nn = ni()\nn_bit = len(bin(n)[2:])\n\ndp = [[0]*4 for _ in range(n_bit+1)]\ndp[0][0] = 1\n\nfor bit in range(n_bit):\n    digit = int(bin(n)[2+bit:2+bit+1])\n    \n    if digit:\n        dp[bit+1][0] = (dp[bit][0]) % MOD\n        dp[bit+1][1] = (dp[bit][0] + dp[bit][1]) % MOD\n        dp[bit+1][2] = (dp[bit][1]) % MOD\n        dp[bit+1][3] = (dp[bit][1] + 3*dp[bit][2] + 3*dp[bit][3]) % MOD\n        \n    else:\n        dp[bit+1][0] = (dp[bit][0] + dp[bit][1]) % MOD\n        dp[bit+1][1] = (dp[bit][1]) % MOD\n        dp[bit+1][2] = (dp[bit][1] + dp[bit][2]) % MOD\n        dp[bit+1][3] = (2*dp[bit][2] + 3*dp[bit][3]) % MOD\n        \nprint(sum(dp[n_bit]) % MOD)", "from functools import*\n@lru_cache(maxsize=None)\ndef d(n):x=n//2;return n+1 if n<2 else d(x)+d(~-x)+d(n+~x)\nprint(d(int(input()))%(10**9+7))"]