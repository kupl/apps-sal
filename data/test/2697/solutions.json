["# cook your dish here\ntry:\n    def isPrime(n): \n          \n        # Corner case \n        if n <= 1 : \n            return False\n      \n        # check from 2 to n-1 \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n      \n        return True\n      \n    # Function to print primes \n    def printPrime(n): \n        count = 0\n        for i in range(2, n + 1): \n            if isPrime(i): \n                count = count+1 \n        print(count)\n      \n    n = int(input())\n    printPrime(n)\nexcept:\n    pass", "# cook your dish here\ncount=0\ndef SieveOfEratosthenes(n): \n    nonlocal count \n    # Create a boolean array \"prime[0..n]\" and initialize \n    #  all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            count+=1;\n\nSieveOfEratosthenes(int(input()))\nprint(count)", "# cook your dish here\na=int(input())\nb=0\nfor x in range(1, a+1):\n    c=0\n    for y in range(1,x):\n        if x%y==0:\n            c=c+1\n    if c==1: b=b+1\nprint(b)        ", "l=[]\ndef isPrime(n): \n    if (n <= 1): \n        return False\n    for i in range(2, n): \n        if (n % i == 0): \n            return False\n    return True\nfor _ in range(1,int(input())+1):\n    if isPrime(_): \n            l.append(_)\n    else: \n        pass \nprint(len(l))", "from math import ceil\r\ndef is_prime(x):\r\n\tif x==2:\r\n\t\treturn True\r\n\tfor i in range(2,ceil(x**0.5)+1):\r\n\t\tif x%i==0:\r\n\t\t\treturn False\r\n\treturn True\r\ncount = 0\r\nn = int(input())\r\nfor i in range(2,n+1):\r\n    if is_prime(i):\r\n        count+=1\r\nprint(count)        ", "import math\nnumber = int(input())\n\nprimes = []\nfor i in range(2,number+1):\n    primes.append(i)\n\ni = 2\n#from 2 to sqrt(number)\nwhile(i <= int(math.sqrt(number))):\n    #if i is in list\n    #then we gotta delete its multiples\n    if i in primes:\n        #j will give multiples of i,\n        #starting from 2*i\n        for j in range(i*2, number+1, i):\n            if j in primes:\n                #deleting the multiple if found in list\n                primes.remove(j)\n    i = i+1\n\nprint(len(primes))", "N = int(input())\r\nprimes=0\r\nfor i in range(2,N+1):\r\n\tflag=1\r\n\tfor a in range(2,i//2+1):\r\n\t\tif i%a==0:\r\n\t\t\tflag=0\r\n\t\t\tbreak\r\n\tif flag:\r\n\t\tprimes+=1\r\n\r\nprint(primes)", "def count_Primes_nums(n):\r\n    ctr = 0\r\n    \r\n    for num in range(n+1):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2, num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n\r\n    return ctr\r\ntry:\r\n    n=int(input())\r\n    print(count_Primes_nums(n))\r\nexcept:\r\n    pass", " #cook your dish here\ntry:\n    def isPrime(n): \n          \n        # Corner case \n        if n <= 1 : \n            return False\n      \n        # check from 2 to n-1 \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n      \n        return True\n      \n    # Function to print primes \n    def printPrime(n): \n        count = 0\n        for i in range(2, n + 1): \n            if isPrime(i): \n                count = count+1 \n        print(count)\n      \n    n = int(input())\n     \n    printPrime(n)\nexcept:\n    pass", "# cook your dish here\ntry:\n    def isPrime(n): \n          \n        # Corner case \n        if n <= 1 : \n            return False\n      \n        # check from 2 to n-1 \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n      \n        return True\n      \n    # Function to print primes \n    def printPrime(n): \n        count = 0\n        for i in range(2, n + 1): \n            if isPrime(i): \n                count = count+1 \n        print(count)\n      \n    n = int(input())\n     \n    printPrime(n)\nexcept:\n    pass", "# cook your dish here\ntry:\n    def isPrime(n): \n          \n        # Corner case \n        if n <= 1 : \n            return False\n      \n        # check from 2 to n-1 \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n      \n        return True\n      \n    # Function to print primes \n    def printPrime(n): \n        count = 0\n        for i in range(2, n + 1): \n            if isPrime(i): \n                count = count+1 \n        print(count)\n      \n    n = int(input())\n     \n    printPrime(n)\nexcept:\n    pass", "try:\n    c=0\n    n=int(input())\n    for i in range(1,n+1):\n        cu=0\n        for j in range(1,i+1):\n            if i%j==0:\n                cu+=1\n        if cu==2:\n            c+=1\n    print(c)\nexcept:\n    pass", "count = 0\r\nfor val in range(int(input())+1): \r\n   if val > 1: \r\n       for n in range(2, val): \r\n           if (val % n) == 0: \r\n               break\r\n       else: \r\n           count+=1\r\nprint(count)", "# cook your dish here\nn=int(input())\nc=0\nfor i in range(2,n+1):\n    f=0\n    for j in range(2,int(i**0.5)+1):\n        if(i%j==0):\n            f=1\n            break\n    if(f==0):\n        c=c+1\nprint(c)\n", "n=int(input())\r\nc=0\r\nfor i in range(1,n+1):\r\n    if i>1:\r\n        for a in range(2,i):\r\n            if(i%a==0):\r\n                break\r\n        else:\r\n            c+=1\r\nprint(c)", "def prime_eratosthenes(n):\r\n    prime_list = []\r\n    z=[]\r\n    for i in range(2, n+1):\r\n        if i not in prime_list:\r\n            #print(i)\r\n            z.append(i)\r\n            for j in range(i*i, n+1, i):\r\n                prime_list.append(j)\r\n    print(len(z))\r\n    #print(prime_list)\r\nx=int(input())\r\nprime_eratosthenes(x);", "# cook your dish her\nstart = 1\nc=0\nend = int(input())\nl=[] \nfor val in range(start, end + 1): \n   if val > 1: \n       for n in range(2, val): \n           if (val % n) == 0: \n               break\n       else: \n           c+=1\n          # l.append(val)\nprint(c)", "try:\n    def isPrime(n): \n      \n    # Corner case \n        if n <= 1 : \n            return False\n  \n    # check from 2 to n-1 \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n  \n        return True\n  \n# Function to print primes \n    def printPrime(n): \n        l1=[]\n        for i in range(2, n + 1): \n            if isPrime(i): \n                l1.append(i) \n    \n        print(len(l1))\n  \n# Driver code \n    def __starting_point(): \n        n = int(input())\n    # function calling \n        printPrime(n)\nexcept:\n    pass\n__starting_point()", "# cook your dish here\nn=int(input())\ncount=0\nc=0\ndef prime(n):\n    c=0\n    for i in range(1,n+1):\n        if n%i==0:\n            c=c+1\n    if c==2:\n        return 1\n    else:\n        return 0\ncount=0\nfor i in range(1,n+1):\n    count=count+prime(i)\nprint(count)", "def SieveOfEratosthenes(n): \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    count = 0\n    for p in range(2, n+1): \n        if prime[p]: \n            count += 1\n    return count\nn = int(input())\nprint(SieveOfEratosthenes(n))\n", "# cook your dish here\nn=int(input())\nc=0\nfor i in range(1,n+1):\n    if i>1:\n        for a in range(2,i):\n           if(i%a==0):\n                break \n        else :\n            c+=1\nprint(c)", "def isPrime(n) : \r\n  \r\n    # Corner cases \r\n    if (n <= 1) : \r\n        return False\r\n    if (n <= 3) : \r\n        return True\r\n  \r\n    # This is checked so that we can skip  \r\n    # middle five numbers in below loop \r\n    if (n % 2 == 0 or n % 3 == 0) : \r\n        return False\r\n  \r\n    i = 5\r\n    while(i * i <= n) : \r\n        if (n % i == 0 or n % (i + 2) == 0) : \r\n            return False\r\n        i = i + 6\r\n  \r\n    return True\r\nn=int(input())\r\nc=0\r\nfor i in range(1,n+1):\r\n    if isPrime(i):\r\n        c=c+1\r\nprint(c)\r\n", "import math\n\nnumber = int(input())\n\nprimes = []\nfor i in range(2,number+1):\n    primes.append(i)\n\ni = 2\n#from 2 to sqrt(number)\nwhile(i <= int(math.sqrt(number))):\n    #if i is in list\n    #then we gotta delete its multiples\n    if i in primes:\n        #j will give multiples of i,\n        #starting from 2*i\n        for j in range(i*2, number+1, i):\n            if j in primes:\n                #deleting the multiple if found in list\n                primes.remove(j)\n    i = i+1\n\nprint(len(primes))", "MAX = 10000\nprefix =[0]*(MAX + 1) \ndef buildPrefix(): \n\tprime = [1]*(MAX + 1) \n\n\tp = 2\n\twhile(p * p <= MAX): \n\t\tif (prime[p] == 1): \n\t\t\ti = p * 2\n\t\t\twhile(i <= MAX): \n\t\t\t\tprime[i] = 0\n\t\t\t\ti += p \n\t\tp+=1\n\tfor p in range(2,MAX+1): \n\t\tprefix[p] = prefix[p - 1] \n\t\tif (prime[p]==1): \n\t\t\tprefix[p]+=1\ndef query(L, R): \n\treturn prefix[R]-prefix[L - 1] \nbuildPrefix()\nL = 1\nR = int(input())\nprint(query(L, R)) \n \n", "# cook your dish here\nfrom sys import stdin,stdout\ndef main():\n    cases = stdin.readline()\n    n = int(cases)\n    if n==0:\n        print(n)\n        return\n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    count = 0\n    for i in prime:\n        if i==True:\n            count+=1\n    print(count)\ndef __starting_point():\n    main()\n\n__starting_point()"]