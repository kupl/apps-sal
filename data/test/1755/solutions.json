["import sys\nfrom sys import stdin\n\nimport bisect\n\ndef LIS(lis , end):\n\n    seq = []\n\n    for c in lis:\n        ind = bisect.bisect_right(seq,c)\n\n        if ind == len(seq):\n            seq.append(c)\n        else:\n            if ind != 0:\n                seq[ind] = c\n\n    return bisect.bisect_right(seq,end)\n\ntt = 1\n\nfor loop in range(tt):\n\n    n,k = list(map(int,stdin.readline().split()))\n    a = list(map(int,stdin.readline().split()))\n    b = list(map(int,stdin.readline().split()))\n\n    a = [float(\"-inf\")] + a + [float(\"inf\")]\n    b = [0] + b + [n+1]\n    for i in range(n+2):\n        a[i] -= i\n\n    for i in range(len(b)-1):\n        if a[b[i]] > a[b[i+1]]:\n            print(-1)\n            return\n\n    ans = n+1\n    for i in range(len(b)-1):\n        now = LIS(a[ b[i]:b[i+1] ] , a[b[i+1]])\n        ans -= now\n\n    print (ans)\n", "import sys,math,itertools\nfrom collections import Counter,deque,defaultdict\nfrom bisect import bisect_left,bisect_right \nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nn,k = inpl()\na = inpl()\nif k != 0:\n    b = inpl()\npre = 0\nbad = False\nfor i in range(k-1):\n    lind = b[i]-1; rind = b[i+1]-1\n    l = a[lind]; r = a[rind]\n    if r-l < rind-lind: bad = True\nif bad: print(-1); quit()\nl = []; r = []; dv = []\nif k == 0:\n    l = [-INF]; r = [INF]; dv = [a]\nelse:\n    for _,i in enumerate(b):\n        dv.append(a[pre:i-1])\n        if pre == 0: l.append(-INF)\n        else: l.append(a[pre-1])\n        r.append(a[i-1])\n        pre = i\n    dv.append(a[pre:])\n    l.append(a[pre-1]); r.append(INF)\n# print(dv,l,r)\nres = 0\nfor i in range(k+1):\n    li = []\n    L = l[i]+1; R = r[i]-1\n    ln = len(dv[i])\n    for j,x in enumerate(dv[i]):\n        if L+j <= x <= R-ln+j+1:\n            li.append(x-j)\n    dp = [INF] * (len(li))\n    for i,x in enumerate(li):\n        ind = bisect_right(dp,x)\n        dp[ind] = x\n    ans = len(li)\n    for i,x in enumerate(dp):\n        if x == INF:\n            ans = i\n            break\n    res += ln-ans\nprint(res)", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key, lru_cache\n\n\nimport sys\ninput = sys.stdin.readline\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\n\ndef give(i, j, mi, ma):\n    # print(i, j, mi, ma)\n    l1 = []\n    for k in range(i, j + 1):\n        if mi <= l[k] <= ma:\n            ind = br(l1, l[k])\n            if ind == len(l1):l1.append(l[k])\n            else:l1[ind] = l[k]\n    # print(j - i + 1, len(l1))\n    return j - i - len(l1) + 1\n    \n    \n\nn, k = li()\nl = [0] + li()\n\n\nif k:\n    b = li()\nelse:b = []\n\nfor i in range(1, k):\n    if l[b[i]] - l[b[i - 1]] < b[i] - b[i - 1] or l[b[i]] < l[b[i - 1]]:\n        print(-1)\n        return\n        \nfor i in range(n + 1):l[i] -= i\n\nif k:\n    ans = give(1, b[0] - 1, -float('inf'), l[b[0]])\n    ans += give(b[-1] + 1, n, l[b[-1]], float('inf'))\n    \n    for i in range(1, k):\n        ans += give(b[i-1], b[i], l[b[i - 1]], l[b[i]])\n    \n    \nelse:\n    ans = give(1, n, -float('inf'), float('inf'))\n    \n\nprint(ans)", "import sys\ninput=sys.stdin.readline\nn,k = map(int,input().split())\na = list(map(int,input().split()))\nb = []\nif k:\n    b = list(map(int,input().split()))\nfor i in range(n):\n    a[i] -= i\nprev = -1\nans = 0\nfor j in range(k + 1):\n    if j < k:\n        val = b[j] - 1\n        if j and a[prev] > a[val]:\n            print(-1)\n            quit()\n    else:\n        val = n\n    if val - prev > 1:\n        path = [0] * (val - prev - 1)\n        arr = [0] * (val - prev)\n        found = 0\n        for i in range(val - prev - 1):\n            if val < n and a[i + prev + 1] > a[val]:\n                continue\n            elif prev + 1 and a[prev] > a[i + prev + 1]:\n                continue\n            l = 1\n            h = found\n            while h >= l:\n                m = (l + h + 1) // 2\n                if a[arr[m] + prev + 1] <= a[i + prev + 1]:\n                    l = m + 1\n                else:\n                    h = m - 1\n            path[i] = arr[l - 1]\n            arr[l] = i\n            if l > found:\n                found = l\n        ans += found\n    prev = val\nprint(n - k - ans)", "import sys,os,io\ninput = sys.stdin.readline\nfrom bisect import bisect_right\nN, K = map(int, input().split())\nA = [-float('inf')]+list(map(int, input().split()))+[float('inf')]\nif K:\n  B = [0]+list(map(int, input().split()))+[N+1]\nelse:\n  B = [0,N+1]\nans = N-K\nfor k in range(K+1):\n  left, right = B[k], B[k+1]\n  if A[left]-left>A[right]-right:\n    print(-1)\n    break\n  lis = []\n  for i in range(left+1,right):\n    if not A[left]-left<=A[i]-i<=A[right]-right:\n      continue\n    ind = bisect_right(lis,A[i]-i)\n    if ind == len(lis):\n      lis.append(A[i]-i)\n    else:\n      lis[ind] = A[i]-i\n  ans -= len(lis)\nelse:\n  print(ans)"]