["As = list(map(int, input().split()))\n\ndef solve(As):\n    L = As[0] + As[1] + As[2]\n    return L**2 - As[0]**2 - As[2]**2 - As[4]**2\n\nprint(max(solve(As), solve(As[1:] + [As[0]])))\n", "#!/usr/bin/env python3\nsq = lambda x: x * x\na = list(map(int,input().split()))\nprint(sq(a[0] + a[1] + a[2]) - sq(a[0]) - sq(a[2]) - sq(a[4]))\n", "import sys\n\n(a1, a2, a3, a4, a5, a6) = map(int, input().split())\n\ndef calc(h):\n\tres = 0\n\tcur = 1\n\twhile cur <= h:\n\t\tres += cur + cur - 1\n\t\tcur += 1\n\treturn res\n\nax1 = a4\nax2 = a6\nans = calc(ax1 + ax2 + a5) - calc(ax1) - calc(ax2) - calc(a2)\nprint(ans)", "a = [int(c) for c in input().split()]\n\ninc = a[0]\ntotal = 0\nwhile a[1] != 0 and a[5] != 0:\n    total += 2* inc + 1\n    a[1] -= 1\n    a[5] -= 1\n    inc += 1\n\nif a[1] == 0 and a[5] == 0:\n    inc -= 1\n    for i in range(a[2]):\n        total += 2 * inc + 1\n        inc -= 1\nelse:\n    b = max(a[1], a[5])\n    for i in range (b):\n        total += 2* inc\n    inc -= 1\n    for i in range(min(a[2], a[4])):\n        total += 2*inc + 1\n        inc -= 1\n\nprint(total)\n\n", "def main():\n    a = [int(i) for i in input().split()]\n    result = 0\n    while a.count(1) < 4:\n        for i in range(6):\n            m = i\n            l = i - 1 if i != 0 else 5\n            r = i + 1 if i != 5 else 0\n            if a[l] > 1 and a[r] > 1:\n                result += 2 * a[m] + 1\n                a[m] += 1\n                a[l] -= 1\n                a[r] -= 1\n    result += 4 * max(a) + 2\n    print(result)\n    \nmain()", "from heapq import heapify, heappush, heappop\nfrom collections import Counter, defaultdict, deque, OrderedDict\nfrom sys import setrecursionlimit, maxsize\nfrom bisect import bisect_left, bisect, insort_left, insort\nfrom math import ceil, log, factorial, hypot, pi\nfrom fractions import gcd\nfrom copy import deepcopy\nfrom functools import reduce\nfrom operator import mul\nfrom itertools import product, permutations, combinations, accumulate, cycle\nfrom string import ascii_uppercase, ascii_lowercase, ascii_letters, digits, hexdigits, octdigits\n\nprod = lambda l: reduce(mul, l)\nprodmod = lambda l, mod: reduce(lambda x, y: mul(x,y)%mod, l)\nargmax = lambda l: l.index(max(l))\nargmin = lambda l: l.index(min(l))\n\ndef read_list(t): return [t(x) for x in input().split()]\ndef read_line(t): return t(input())\ndef read_lines(t, N): return [t(input()) for _ in range(N)]\n\nH = read_list(int)\n\nn = H[3]\nans = 0\nleft, right = H[4], H[2]\nwhile left > 0 and right > 0:\n    left -= 1\n    right -= 1\n    ans += 2 * n + 1\n    n += 1\n\nif left == 0:\n    left = H[5]\n    while right > 0:\n        ans += 2 * n\n        right -= 1\n        left -= 1\n    right = H[1]\n\nelse:\n    right = H[1]\n    while left > 0:\n        ans += 2 * n\n        right -= 1\n        left -= 1\n    left = H[5]\n    \nwhile H[0] < n:\n    ans += 2 * n - 1\n    n -= 1\nprint(ans)\n    \n", "\nimport math\nimport sys\n\n\ninp=list(map(int,input().split()))\n\ns1=inp[0]\ns2=inp[1]\ns3=inp[2]\ns4=inp[3]\ns5=inp[4]\ns6=inp[5]\n\na=min(s6,s2)\nb=s1+a\nc=max(s6,s2)-a\n\nif a==s6:\n    d=s3\nelse:\n    d=s5\n\nans=0\n\nans+= 2*a*s1+a+a*a-a\n\nans+= 2*b*c\n\nans+= 2*d*s4+d+d*d-d\n\nprint(ans)\n\n    \n", "import math\ndef getarea (a):\n    return (a*a*math.sqrt(3))/8\nx =input(\"\").split(' ')\nx = [int(y) for y in x]\na1 = x[0]\na2 = x[1]\na3 = x[2]\na4 = x[3]\na5 = x[4]\na6 = x[5]\nif (a2==a5):\n    totarea = (a1/2 + a3/2 + a2) * ((a3*math.sqrt(3)/2) + (a4*math.sqrt(3)/2))\n    totarea-=getarea(a3)+getarea(a4)+getarea(a1)+getarea(a6)\n    print((int)(((4*totarea)/math.sqrt(3))+0.5))\nelif (a3==a6):\n    totarea = (a2/2 + a4/2 + a3) * ((a4*math.sqrt(3)/2) + (a5*math.sqrt(3)/2))\n    totarea-=getarea(a4)+getarea(a5)+getarea(a1)+getarea(a2)\n    print((int)(((4*totarea)/math.sqrt(3))+0.5))\nelse:\n    totarea = (a6/2 + a2/2 + a1) * ((a2*math.sqrt(3)/2) + (a3*math.sqrt(3)/2))\n    totarea-=getarea(a2)+getarea(a3)+getarea(a5)+getarea(a6)\n    print((int)(((4*totarea)/math.sqrt(3))+0.5))\n    \n", "def main():\n    d = list(map(int, input().split()))\n    res = 0\n    for i in range(min(d[0], d[2])):\n        res += (i + d[1] - 1) * 2 + 3\n    for i in range(min(d[3], d[5])):\n        res += (i + d[4] - 1) * 2 + 3\n    if d[0] != d[2]:\n        res += abs(d[0] - d[2]) * 2 * ( min(d[0], d[2]) + d[1] )\n\n    print(res)\n\n\nmain()\n", "a = list(map(int, input().split()))\nprint((a[0] + a[1] + a[2]) ** 2 - a[0] ** 2 - a[2] ** 2 - a[4] ** 2)", "l = [int(a) for a in input().split()]\nprint(((l[0] + l[1] + l[2]) ** 2) - (l[0] * l[0] + l[2] * l[2] + l[4] * l[4]))\n", "a = list(map(int, input().split()))\nprint((a[0] + a[1] + a[2])**2 - a[0]**2 - a[2]**2 - a[4]**2)", "def read_list(t): return [t(x) for x in input().split()]\ndef read_line(t): return t(input())\ndef read_lines(t, N): return [t(input()) for _ in range(N)]\n\nH = read_list(int)\n\nprint((H[0] + H[1] + H[2]) ** 2 - H[0] ** 2 - H[2] ** 2 - H[4] ** 2)\n", "s = list(map(int, input().split()))\nprint((s[0]+s[1]+s[2])**2-s[0]**2-s[2]**2-s[4]**2)\n", "a,b,c,d,e,f=map(int,input().split());print((a+b+c)**2-a**2-c**2-e**2)", "a,b,c,d,e,f = map(int,input().split())\nprint((a+b+c)**2-a*a-c*c-e*e)", "s = list(map(int, input().split()))\nprint((s[0] + s[1] + s[2])**2 - s[0]**2 - s[2]**2 - s[4]**2)", "def sqr(x:int) -> int:\n    return x*x\n\na,b,c,d,e,f = list(map(int, input().split()))\n\nif a==b==c==d==e==f:\n    print(sqr(a)*6)\nelse:\n    print(sqr(a+b+c)-sqr(a)-sqr(c)-sqr(e))\n", "def intSqrt(x):\n    a = 1\n    b = x\n    while a < b:\n        c = (a+b)//2\n        if c*c > x:\n            b = c\n        elif abs(c*c-x) < 0.1:\n            a = c\n            break\n        else:\n            a = c+1\n    return a\na = [int(x) for x in input().split()]\narea = sum([a[i]*a[i+1] for i in range(0,6,2)])\nsides = [(a[i]**2+a[i+1]**2+a[i]*a[i+1])**0.5 for i in range(0,6,2)]\nsemi = sum(sides)/2\nprint(area+int(intSqrt(16*semi*(semi-sides[0])*(semi-sides[1])*(semi-sides[2])/3)))\n", "# your code goes here\na,b,c,d,e,f = map(int,input().split());\nprint ((e+d+c)*(e+d+c)-a*a-e*e-c*c)", "def __starting_point():\n    edges = [int(e) for e in input().split(' ')]\n    big_triangle = sum(edges[2:5]) ** 2\n    small_triangle1 = edges[0] ** 2\n    small_triangle2 = edges[2] ** 2\n    small_triangle3 = edges[4] ** 2\n    print(big_triangle - small_triangle1 - small_triangle2 - small_triangle3)\n__starting_point()", "a,b,c,d,e,f=map(int,input().split())\nprint((a+b+c)**2-a**2-c**2-e**2)", "from math import radians, cos, sin, atan2, sqrt, floor, acos\n\ndef rotate(point, alpha):\n    x = point[0]\n    y = point[1]\n    return (x * cos(alpha) - y * sin(alpha), x * sin(alpha) + y * cos(alpha))\n\ndef crs(a, b):\n    return a[0] * b[1] - a[1] * b[0]\n\ndef m(end, start):\n    return (end[0] - start[0], end[1] - start[1])\n\ndef area(poly):\n    ret = 0\n    n = len(poly)\n\n    for i in range(n):\n        j = (i + 1) % n\n        ret += crs(poly[i], poly[j])\n\n    return abs(ret) / 2.0\n\ndef dist(a, b):\n    return sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef get_next_point(p0, p1, x, y):\n    r = ((p1[0] - p0[0]) / x * y, (p1[1] - p0[1]) / x * y)\n    r = rotate(r, radians(60))\n\n    return (p1[0] + r[0], p1[1] + r[1])\n\n\na = list(map(int, input().split()))\n\n\npnt = [(0, 0), (a[0], 0)]\n\nfor i in range(1, len(a)):\n    pnt.append(get_next_point(pnt[-2], pnt[-1], a[i - 1], a[i]))\n    assert((dist(pnt[-2], pnt[-1]) - a[i]) <= 1e-7)\n\n\nret = area(pnt) * 4 / sqrt(3)\nfor i in range(floor(ret), floor(ret) + 3):\n    if abs(ret - i) < 1e-7:\n        ret = i\n\nprint(ret)\n"]