["#      Codeforces Round #487 (Div. 2)import collections\nfrom functools import cmp_to_key\n#key=cmp_to_key(lambda x,y: 1 if x not in y else -1 )\n\nimport sys\ndef getIntList():\n    return list(map(int, input().split()))    \nimport bisect\n \n            \n    \nN,L,WM  = getIntList()\n\nz = {}\nz[-1] = {1:[], -1:[]}\nz[0] = {1:[], -1:[]}\nz[1] = {1:[], -1:[]}\nfor i in range(N):\n    x0,v = getIntList()\n    t = (x0,v)\n    if x0+L <=0:\n        z[-1][v].append(t)\n    elif x0>=0:\n        z[1][v].append(t)\n    else:\n        z[0][v].append(t)\nres = 0\n\nres += len(z[-1][1] ) * len(z[ 1][-1] )\nres += len(z[0][1] ) * len(z[ 1][-1] )\nres += len(z[-1][1] ) * len(z[ 0][-1] )\n\nif WM==1:\n    print(res)\n    return\n\nz[1][-1].sort()\nz[-1][1].sort()\n#print(z[-1][1])\ntn = len(z[1][-1])\nfor t in z[1][1]:\n    g = (-WM-1) * t[0] / (-WM+1) - L\n    g = max(g, t[0]+ 0.5)\n    p = bisect.bisect_right(z[1][-1], (g,2) )\n    res +=  tn-p \n    \ntn = len(z[-1][1])\nfor t in z[-1][-1]:\n    g = (WM+1) * (t[0] + L)/ (WM-1)\n    g = min(g, t[0] - 0.1)\n    \n    p = bisect.bisect_left(z[-1][1], (g,-2) )\n    res +=  p \n\nprint(res)\n", "import math\n\n\ndef bin_search(a, left, right, threshold):\n    left -= 1\n    while right - left - 1 > 0:\n        m = int((left + right) / 2)\n        if a[m] < threshold:\n            left = m\n        else:\n            right = m\n    return right\n\n\ndef divide(a, b):\n    if b == 0:\n        if a > 0:\n            return math.inf\n        else:\n            return -math.inf\n    return a / b\n\n\ndef main():\n    n, l, w = [int(x) for x in input().split()]\n\n    u, v = [], []\n    for i in range(n):\n        x, vel = [int(x) for x in input().split()]\n        if vel > 0:\n            u.append(x)\n        else:\n            v.append(x)\n    u = sorted(u)\n    v = sorted(v)\n\n    ans = 0\n\n    for x in v:\n        threshold = min(divide((x + l) * (w + 1), (w - 1)), -(x + l), x)\n        r1 = bin_search(u, 0, len(u), threshold)\n\n        threshold = min(divide((x + l) * (w - 1), (w + 1)), x)\n        r2 = bin_search(u, 0, len(u), threshold)\n        l2 = bin_search(u, 0, len(u), -(x + l))\n\n        if l2 <= r1:\n            ans += r2\n        else:\n            ans += r1\n            ans += max(0, r2 - l2)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]