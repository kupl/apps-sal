["n = int(input())\na = list(map(int, input().split()))\nmn = 360\nfor i in range(n):\n    x = 0\n    for j in range(i, n):\n        x += a[j]\n        mn = min(mn, abs(x - (360 - x)))\nprint(mn)", "n = int(input().strip())\n\nkosi = list(map(int, input().strip().split()))\n\nmini = 400\n\nfor a in range(len(kosi)):\n    for b in range(a, len(kosi)):\n        first = sum(kosi[a:b])\n        second = sum(kosi[:a]) + sum(kosi[b:])\n        if abs(first - second) < mini:\n            mini = abs(first - second)\n\nprint(mini)\n        \n\n", "import sys\nsys.setrecursionlimit(100000000)\n# def input(): return sys.stdin.readline()[:-1]\ndef iin(): return int(input())\ndef impin(): return list(map(int, input().split()))\ndef irrin(): return [int(x) for x in input().split()]\ndef imrin(n): return [int(input()) for _ in range(n)]\n\n\nn = iin()\narr = irrin()\nsa = sum(arr)\nmn = 100000000\nfor i in range(n):\n    for j in range(i, n+1):\n        s = sum(arr[i:j])\n        # print(s)\n        k = sa-s\n        mn = min(mn, abs(s-k))\nprint(mn)\n", "n = int(input())\n\nnums = list(map(int, input().split()))\n\nanswer = float('inf')\n\nfor l in range(n):\n    for s in range(n):\n        if(s + l - 1 >= n):continue\n        current = sum(nums[s:s + l])\n        answer = min(answer, abs(360 - 2 * current))\n\n\nprint(answer)\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    res = 100 ** 10\n    for l in range(n):\n        for r in range(l, n):\n            s1 = sum(a[l:r])\n            res = min(res, abs(s1 - (s - s1)))\n\n    print(res)\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import deque\n\nn = int(input())\na = deque(map(int, input().split()))\nps = [0] * n\nmindif = 2e9\nfor i in range(n):\n    for i in range(n):\n        ps[i] = ps[i - 1] if i > 0 else 0\n        ps[i] += a[i]\n    for i in range(n):\n        mindif = min(mindif, abs((ps[i - 1] if i > 0 else 0) - (ps[n - 1] - (ps[i - 1] if i > 0 else 0))))\n    a.append(a.popleft())\n\nprint(mindif)", "n = int(input())\na = [int(i) for i in input().split()]\npref = []\ns = 0\nfor i in range(n):\n    s += a[i]\n    pref.append(s)\nmins = 1000\nfor i in range(n):\n    for j in range(i, n):\n        s = abs((pref[j] - pref[i]) - (pref[i] + (pref[n-1] - pref[j])))\n        if s < mins:\n            mins = s\nprint(mins)", "n = int(input())\n\nbest = 360\n\ntab = list(map(int, input().split()))\n\npre_sum = [0]\n\nfor i in range(1, len(tab) + 1):\n    pre_sum += [tab[i - 1] + pre_sum[-1]]\n\nfor i in range(n + 1):\n    for j in range(i, n + 1):\n        best = min([best, 2 * abs(180 - (pre_sum[j] - pre_sum[i - 1]))])\n\nprint(best);\n", "n = int(input())\na = list(map(int, input().split()))\na += a\nans = 360\nfor i in range(n):\n  cur = 0\n  j = i\n  while cur < 180:\n    cur += a[j]\n    j += 1\n  ans = min(ans, 2*cur - 360)\nprint(ans)", "n = int(input())\npieces = [int(x) for x in input().split()]\nsm = 360\ncurs = 0\nans = []\nfor i in range(n):\n    for elem in pieces:\n        ans.append(abs(sm - 2 * curs))\n        curs += elem\n        if curs >= 360:\n            curs = 0\n    pieces.append(pieces.pop(0))\nprint(min(ans))", "n = int(input())\nslices = list(map(int, input().split()))\nanswer = 360\nfor i in range(n):\n    for j in range(i + 1, n):\n        cur_s = abs(sum(slices[:i]) + sum(slices[j:]) - sum(slices[i:j]))\n        answer = min(cur_s, answer)\nprint(answer)\n", "n = int(input())\na = [int(i) for i in input().split()]\na = a + a\npref_sum = [0] * (2 * n)\nfor i in range(2 * n):\n    pref_sum[i] = pref_sum[i - 1] + a[i]\ndif = int(1e9)\nfor i in range(n):\n    for j in range(n):\n        dif = min(dif, abs(pref_sum[n - 1] - 2 * (pref_sum[j + i] - pref_sum[j])))\nprint(dif)", "n = int(input())\narr = [int(num) for num in input().strip().split()]\nans = 360\nfor i in range(n):\n    l = 0\n    r = 360\n    for j in range(n):\n        ans = min(ans, abs(l - r))\n        l += arr[j]\n        r -= arr[j]\n    if ans == 0:\n        break\n    val = arr[0]\n    arr.remove(arr[0])\n    arr.append(val)\nprint(ans)", "#from math import gcd, factorial as f\n#list(map(int, input().split()))\nn = int(input())\na = list(map(int, input().split()))\nx = sum(a)\na += a\nan = 0\nann = 1000000\nfor j in range(n):\n    an = 0\n    for i in range(j, 2 * n):\n        an += a[i]\n        if an >= x // 2:\n            if abs(x - 2 * an) < abs(x - 2 * ann):\n                ann = an\n            an = 0\nprint(abs(x - 2 * ann))\n", "#python3\n#utf-8\n\npieces_nr = int(input())\npiece_idx___deg = [int(x) for x in input().split()]\nans = 360\nfor left_cl in range(pieces_nr):\n    for right_op in range(left_cl + 1, pieces_nr + 1):\n        curr_split = sum(piece_idx___deg[left_cl:right_op])\n        rest = 360 - curr_split\n        # print(curr_split, rest)\n        curr_ans = rest - curr_split\n        if curr_ans < 0:\n            curr_ans *= -1\n        ans = min(curr_ans, ans)\n        # print(curr_ans)\nprint(ans)\n", "n = int(input())\nar = [int(i) for i in input().split(' ')]\n\nsum = 0\ns_a = 1000\nfor i in range(n):\n    k = 0\n    sum = 0\n    while sum < 180:\n        sum += ar[i-k]\n        k += 1\n    if s_a > sum-(360-sum):\n        s_a = sum-(360-sum)\n\nprint(s_a)", "n = int(input())\nangles = list(map(int, input().split()))\nangles = angles+angles\n\nsum_ = 0\nfrom_ = 0\nbest = 360\nfor to in range(n):\n    sum_ += angles[to]\n    while sum_ >= 180:\n        best = min(best, abs(360-2*sum_))\n        sum_ -= angles[from_]\n        from_ += 1\n    best = min(best, abs(360-2*sum_))\nprint(best)\n", "kolichestvoKuskov = int(input())\nspisokUglov = list(map(int, input().split()))\nraznica = 180\nfor a in range(0, kolichestvoKuskov):\n    sum = 0\n    for i in range(a, kolichestvoKuskov):\n        sum += spisokUglov[i]\n        if raznica > abs(180 - sum):\n            raznica = abs(180 - sum)\nprint(raznica * 2)\n", "n = int(input())\nsectors = list(map(int, input().split()))\n\nans = 360\nfor _ in range(n):\n    for i in range(n):\n        temp = abs(sum(sectors[:i]) - sum(sectors[i:]))\n        if temp < ans:\n            ans = temp\n    sectors[:] = sectors[-1:] + sectors[:-1]\nprint(ans)\n", "n = int(input())\na = [int(i) for i in input().split()]\nans = 1e9\nfor j in range(n):\n    pref = [0]*(n+1)\n    for i in range(1, n+1):\n        pref[i] = pref[i-1] + a[i-1]\n    for i in range(n):\n        ans = min(ans, abs(pref[-1]-2*pref[i]))\n    a = [a[-1]] + a[:-1]\nprint(ans)\n", "import sys\ndata = sys.stdin.readlines()\n\nn = int(data[0])\nm = [int(x) for x in data[1].split()]\n\nres = []\n\nfor k in range(n):\n    for i in range(n):\n        a = abs(sum(m[:i]) - sum(m[i:]))\n        res.append(a)\n    m.append(m[0])\n    m = m[1:]\nprint(min(res))\n        \n", "n=int(input())\nl=[]\nl=input().split()\nfor i in range(n):\n    l[i]=int(l[i])\nl.extend(l)\n\notv=400\nfor i in range(n):\n    s=0\n    j=i\n    while s<180:\n        s+=l[j]\n        j+=1\n\n    if abs(s-180)*2<otv:\n        otv=abs(s-180)*2\nprint(otv)", "n = int(input())\na = list(map(int, input().split()))\nsumspref = [a[0]]\nfor i in range(1, n):\n    sumspref.append(sumspref[-1] + a[i])\nsums = []\nfor i in range(n):\n    for j in range(i, n):\n        sums.append(abs(180 - (sumspref[j] - sumspref[i])))\nprint(min(sums) * 2)\n    \n\n", "n = int( input() )\n\na = list( map( int, input().split() ) )\n\na = a + a\n\n#print( a )\n\nmid = n//2\n\nbest = 99999999999999999999999\n\nfor i in range( n ):\n    sub = a[i:i+n]\n    #print( sub )\n    d = sum(sub)\n    best = min( best, d )\n    s = 0\n\n    #print( d, s )\n    for j in range( n ):\n        s += sub[j]\n        d -= sub[j]\n\n        diff = abs( s - d)\n        best = min( best, diff )\n\nprint( best )\n", "def solution(sectors):\n    n = len(sectors)\n    if n == 1:\n        return sectors[0]\n    else:\n        min_diff = 360\n        for i in range(n):\n            j = i\n            sum_sector = 0\n            prev = sum_sector\n            while(sum_sector <= 180):\n                prev = sum_sector\n                sum_sector += sectors[j]\n                j += 1\n                j %= n\n            #print(prev, sum_sector)\n            if abs(360 - 2 * sum_sector) < min_diff:\n                min_diff = abs(360 - 2 * sum_sector)\n            if abs(360 - 2 * prev) < min_diff:\n                min_diff = abs(360 - 2 * prev)\n        return min_diff\n\n\nn = int(input())\nsectors = []\nsectors_str = input().split()\nfor s in sectors_str:\n    sectors.append(int(s))\n\nprint(solution(sectors))"]