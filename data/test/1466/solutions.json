["from collections import Counter, defaultdict\nimport heapq\nfrom sys import stdin, stdout\nraw_input = stdin.readline\nxrange=range\nn,m,k=list(map(int,input().split()))\nk=min(n-1,k)\np=[0]*(n+1)\nvis = [0]*(n+1)\nd=[[] for i in range(n+1)]\nans=[]\ndp={}\nfor i in range(m):\n    u,v,w=list(map(int,input().split()))\n    d[u].append((v,w))\n    d[v].append((u,w))\n    dp[(u,v)]=i+1\n    dp[(v,u)]=i+1\nq=[(0,1,1)]\nc=0\nwhile q:\n    wt,x,par=heapq.heappop(q)\n    if vis[x]:\n        continue\n    vis[x]=1\n    c+=1\n    if par!=x:\n        \n        ans.append(str(dp[(par,x)]))\n    if c>k:\n        break\n    \n    for i,w in d[x]:\n        if not vis[i]:\n            heapq.heappush(q,(wt+w,i,x))\nprint(len(ans))\nprint(' '.join(ans))\n", "import sys\ninput = sys.stdin.readline\nimport heapq\nfrom collections import defaultdict\n\nn, m, k = list(map(int, input().split()))\nedges = defaultdict(list)\ndist = [float('inf')] * (n + 1)\ndist[1] = 0\npq = []\nfor i in range(m):\n    x, y, w = list(map(int, input().split()))\n    edges[x].append((i + 1, y, w))\n    edges[y].append((i + 1, x, w))\n\npq = [(0, 1, -1)]\nres = []\nc = 0\nwhile pq:\n    v, min_e, min_i = heapq.heappop(pq)\n    if dist[min_e] == v:\n        if min_i != -1:\n            res.append(min_i)\n            c += 1\n        if c >= n - 1 or c == k:\n            break\n        for item in edges[min_e]:\n            i, adj, w = item\n            if dist[min_e] + w < dist[adj]:\n                dist[adj] = dist[min_e] + w\n                heapq.heappush(pq, (dist[adj], adj, i))\n\nprint(len(res))\nif k > 0:\n    print(' '.join(map(str, res)))", "import sys\ninput = sys.stdin.readline\nimport heapq\nfrom collections import defaultdict\n\nn, m, k = list(map(int, input().split()))\nedges = defaultdict(list)\ndist = [float('inf')] * (n + 1)\ndist[1] = 0\npq = []\nfor i in range(m):\n    x, y, w = list(map(int, input().split()))\n    edges[x].append((i + 1, y, w))\n    edges[y].append((i + 1, x, w))\n\npq = [(0, 1, -1)]\nres = []\nc = 0\nwhile pq:\n    v, min_e, min_i = heapq.heappop(pq)\n    if dist[min_e] == v:\n        if min_i != -1:\n            res.append(min_i)\n            c += 1\n        if c >= n - 1 or c == k:\n            break\n        for item in edges[min_e]:\n            i, adj, w = item\n            if dist[min_e] + w < dist[adj]:\n                dist[adj] = dist[min_e] + w\n                heapq.heappush(pq, (dist[adj], adj, i))\n\nprint(len(res))\nif k > 0:\n    print(' '.join(map(str, res)))\n"]