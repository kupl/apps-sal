["# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2018/11/10 22:33\n\n\"\"\"\n\n\nN, M, L = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\n\nans = 0\n\ni = 0\nwhile i < N:\n    j = i\n    while j < N and A[j] > L:\n        j += 1\n    if j > i:\n        ans += 1\n        i = j + 1\n    else:\n        i += 1\n\n\nfor mi in range(M):\n    line = input()\n    if len(line) == 1:\n        print(ans)\n    else:\n        t, p, d = list(map(int, line.split()))\n        prev = A[p-1]\n        A[p-1] += d\n        if prev <= L < A[p-1]:\n            if p-2 >= 0 and p < N:\n                if A[p-2] > L and A[p] > L:\n                    ans -= 1\n                elif A[p-2] <= L and A[p] <= L:\n                    ans += 1\n                else:\n                    pass\n            elif p-2 >= 0:\n                if A[p-2] > L:\n                    pass\n                else:\n                    ans += 1\n            elif p < N:\n                if A[p] > L:\n                    pass\n                else:\n                    ans += 1\n            else:\n                ans += 1\n", "n,m,l = list(map(int,input().split()))\n\n\nres = []\ntim =0\na=list(map(int,input().split()))\ni=0\n\nwhile(i<n):\n    while(i<n and a[i] <= l):\n        i +=1\n    if(i == n):\n        break\n    tim += 1\n    while(i < n and a[i] > l):\n        i+=1\n\nfor i in range(m):\n    s = input()\n    if(s=='0'):\n        res.append(str(tim))\n        continue\n    w,p,d = list(map(int,s.split()))\n    \n    p-=1\n    \n    if(a[p] > l):\n        continue\n    a[p] += d\n    if(a[p] <= l):\n        continue\n    if(p > 0 and a[p-1] > l and p < n-1 and a[p+1] > l):\n        tim -= 1\n    elif((p > 0 and a[p-1] > l) or (p < n-1 and a[p+1] > l)):\n        continue\n    else:\n        tim += 1\ns = '\\n'.join(res)\n\nprint(s)    \n", "n,m,l = list(map(int,input().split()))\na = input().split()\nb = [0]*n\nfor i in range(n):\n    b[i] = int(a[i])\ncount = 0\nfor i in range(n):\n    if b[i] > l:\n        count += 1\n        if i > 0:\n            if b[i-1] > l:\n                count -= 1\nfor i in range(m):\n    t = input().split()\n    if int(t[0]) == 0:\n        print(count)\n    else:\n        p = int(t[1])\n        d = int(t[2])\n        if b[p-1] <= l:\n            b[p-1] += d\n            if b[p-1] > l:\n                if n == 1:\n                    count += 1\n                else:\n                    if p-1 > 0 and p-1 < n-1:\n                        if b[p-2] > l and b[p] > l:\n                            count -= 1\n                        elif b[p-2] <= l and b[p] <= l:\n                            count += 1\n                    elif p-1 == n-1:\n                        if b[p-2] <= l:\n                            count += 1\n                    else:\n                        if b[p] <= l:\n                            count += 1\n", "n,m,l = [int(s) for s in input().split()]\na = [int(s) for s in input().split()]\n\nanss = []\nans = 0\non = False\nfor i in range(n):\n    if a[i] > l and not on:\n        ans += 1\n        on = True\n    elif a[i] <= l and on:\n        on = False\n\nfor i in range(m):\n    r = [int(s) for s in input().split()]\n    if r[0] == 0:\n        anss.append(ans)\n    else:\n        p,d = r[1]-1,r[2]\n        if a[p] <= l and a[p]+d > l:\n            add = 1\n            if p > 0 and a[p-1] > l:\n                add -= 1\n            if p < n-1 and a[p+1] > l:\n                add -= 1\n            ans += add\n        a[p] += d\n    # print(a)\n\nprint(*anss, sep='\\n')", "gcd = lambda a, b: gcd(b, a % b) if b else a\n\n\ndef main():\n    n, m, l = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    brr = [i > l for i in arr]\n    total = 0\n    for i in range(len(brr)):\n        if brr[i] and (not i or not brr[i - 1]):\n            total += 1\n    for i in range(m):\n        s = input()\n        if s[0] == '0':\n            print(total)\n        else:\n            _, a, b = list(map(int, s.split()))\n            a -= 1\n            arr[a] += b\n            if arr[a] > l and not brr[a]:\n                brr[a] = True\n                if (a > 0 and brr[a - 1]) and (a < len(brr) - 1 and brr[a + 1]):\n                    total -= 1\n                elif (a == 0 or (a > 0 and not brr[a - 1])) and (a == len(brr) - 1 or (a < len(brr) - 1 and not brr[a + 1])):\n                    total += 1\n\n\n\n\nmain()\n", "import sys\n\nnbmeches, nbreq, l = list(map(int, sys.stdin.readline().split()))\nmeches = list(map(int, sys.stdin.readline().split()))\ntrop_grand = [False]*nbmeches\npont = 0\nfor i in range(nbmeches):\n    if meches[i] > l:\n        trop_grand[i] = True\n        if i == 0 or (trop_grand[i-1] is False):\n            pont += 1\n\nfor i in range(nbreq):\n    req = sys.stdin.readline().split()\n    if int(req[0]) == 0:\n        print(pont)\n    else:\n        meches[int(req[1])-1] += int(req[2])\n        #print(meches)\n        if meches[int(req[1])-1] > l and not trop_grand[int(req[1])-1]:\n            trop_grand[int(req[1])-1] = True\n            if nbmeches == 1:\n                pont = 1\n            else:\n                if int(req[1])-1 == 0 and not trop_grand[int(req[1])]:\n                    pont += 1\n                elif (not int(req[1])-1 == 0) and int(req[1])-1 == nbmeches-1 and not trop_grand[int(req[1])-2]:\n                    pont += 1\n                elif (not int(req[1])-1 == 0) and (not int(req[1])-1 == nbmeches-1) and trop_grand[int(req[1])] and trop_grand[int(req[1])-2]:\n                    pont = max(0, pont-1)\n                elif (not int(req[1])-1 == 0) and (not int(req[1])-1 == nbmeches-1) and (not trop_grand[int(req[1])]) and (not trop_grand[int(req[1])-2]):\n                    pont += 1\n        #print(trop_grand)\n", "#!/usr/bin/env python3\nimport sys\n\ndef rint():\n    return list(map(int, sys.stdin.readline().split()))\n#lines = stdin.readlines()\n\nn, m, l = rint()\na = list(rint())\n\nseg_cnt = 0\nfor i in range(1,n):\n    if a[i-1] > l and a[i] <= l:\n        seg_cnt +=1\nif a[n-1] > l:\n    seg_cnt += 1\n\n\nfor i in range(m):\n    t = list(rint())\n    if t[0] == 0:\n        print(seg_cnt)\n    else:\n        p = t[1] - 1\n        d = t[2]\n        if a[p] + d > l and a[p] <= l:\n            if p == 0:\n                if a[(p+1)%n] <= l:\n                    seg_cnt += 1\n            elif p == n-1:\n                if a[p-1] <= l:\n                    seg_cnt += 1\n            else:\n                if a[p-1] > l and a[(p+1)%n] > l:\n                    seg_cnt -= 1\n                elif a[p-1] <= l and a[(p+1)%n] <= l:\n                    seg_cnt += 1\n        a[p] += d\n", "n, q, k = list(map(int, input().split(' ')))\n\na = list(map(int, input().split(' ')))\n\ncount = 0\n\ndef verify(x):\n  if(x < 0) or (x >= n):\n    return False\n\n  return (a[x] > k)\n\nfor i in range(n):\n  if verify(i):\n    count += 1\n\n    if verify(i - 1):\n      count -= 1\n\ndef cut(i):\n  if not verify(i):\n    return 0\n\n  result = 1\n\n  if verify(i - 1):\n    result -= 1\n  \n  if verify(i + 1):\n    result -= 1\n\n  return result\n\nfor i in range(q):\n  line = input()\n  if(line == '0'):\n    print(count)\n  else:\n    _, x, y = list(map(int, line.split(' ')))\n    x -= 1\n\n    if not verify(x):\n      a[x] += y\n      count += cut(x)\n    else:\n      a[x] += y\n\n", "n, m, l = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = []\nfor i in a:\n    if i>l:\n        b.append(1)\n    else:\n        b.append(0)\nans = 0\ni = 0\nwhile i < n:\n    if b[i]:\n        ans += 1\n        while i < n and b[i]:\n            i+=1\n    i+=1\nfor i in range(m):\n    s = input()\n    if s[0] == '0':\n        print(ans)\n    else:\n        t,p,d = list(map(int,s.split()))\n        if a[p-1]<=l:\n            a[p-1] += d\n            if a[p-1] > l:\n                b[p-1] = 1\n                if p-2>=0 and b[p-2] and p<=n-1 and b[p]:\n                    ans -= 1\n                elif p-2>=0 and b[p-2] or p <=n-1 and b[p]:\n                    ans += 0\n                else:\n                    ans += 1\n\n", "n, m, l = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\ncuts = 0\nprev = False\nfor i in range(n):\n    if a[i] > l:\n        if prev:\n            continue\n        else:\n            cuts += 1\n            prev = True\n    else:\n        prev = False\n\nfor _ in range(m):\n    s = input()\n    if s.startswith('0'):\n        print(cuts)\n    else:\n        p, d = list(map(int, s[1:].split()))\n        p -= 1\n        if a[p] <= l and a[p] + d > l:\n            t = (p - 1 in range(n) and a[p - 1] > l) + \\\n                (p + 1 in range(n) and a[p + 1] > l)\n            if t == 0:\n                cuts += 1\n            elif t == 1:\n                pass\n            else:\n                cuts -= 1\n        a[p] += d\n\n'''\n\n4 7 3\n4 2 3 1\n0\n1 2 3\n0\n1 1 3\n0\n1 3 1\n0\n\n\n'''\n", "3\n\n\ndef readint():\n    return int(input())\n\n\ndef readline():\n    return [int(c) for c in input().split()]\n\n\ndef compute_time(a, l):\n    cnt = 0\n    prev = -1\n    for e in a:\n        if e > l and prev <= l:\n            cnt += 1\n        prev = e\n        \n    return cnt\n\ndef main():\n    n, m, l = readline()\n    a = readline()\n\n    time = compute_time(a, l)\n\n    for i in range(m):\n        q = readline()\n        if q[0] == 0:\n            print(time)\n        else:\n            p, d = q[1], q[2]\n            is_left_short = True if p == 1 or a[p-2] <= l else False\n            is_right_short = True if p == n or a[p] <= l else False\n            if is_left_short and is_right_short and a[p-1] <= l and a[p-1] + d > l:\n                time += 1\n            elif (not is_left_short) and (not is_right_short) and a[p-1] <= l and a[p-1] + d > l:\n                time -= 1\n\n            a[p-1] += d\n\n            \n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m, l = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef time_to_cut():\n    nonlocal a\n    t = 0\n    pr = 0\n    for i in range(n):\n        if a[i] <= l:\n            pr = 0\n        elif pr == 0:\n            t += 1\n            pr = 1\n    return(t)\n\ndef update_time(p, d):\n    nonlocal a\n    nonlocal T\n    p -= 1\n    pos = (0 if a[p] <= l else 1)\n    a[p] += d\n    pns = (0 if a[p] <= l else 1)\n    sa = bool(pns - pos)\n    if not sa:\n        pass\n    elif n == 1:\n        T += 1\n    elif p == 0:\n        if a[p+1] <= l:\n            T += 1\n    elif p == n-1:\n        if a[p-1] <= l:\n            T += 1\n    elif a[p+1] <= l and a[p-1] <= l:\n        T += 1\n    elif a[p+1] > l and a[p-1] > l:\n        T -= 1\n    return\n\nT = time_to_cut()\n\nfor i in range(m):\n    r = [int(x) for x in input().split()]\n    if len(r) == 1: # time request\n        print(T)\n    else: # hair grow\n        update_time(r[1], r[2])\n", "n,m,l=list(map(int,input().split()))\na=list(map(int,input().split()))\nc=0\nif a[0]>l:\n    c+=1\n    a[0]=0\nfor i in range(1,n):\n    if a[i]>l:\n        a[i]=0\n        if a[i-1]!=0:\n            c+=1\nfor i in range(m):\n    s=input()\n    if s[0]=='0':\n        print(c)\n    else:\n        _,x,y=list(map(int,s.split()))\n        if a[x-1]<=l and a[x-1]!=0:\n            if a[x-1]+y>l:\n                if x!=1 and x!=n and a[x-2]!=0 and a[x]!=0:\n                    c+=1\n                    a[x-1]=0\n                elif x==1 and n!=1 and a[x]!=0:\n                    a[x-1]=0\n                    c+=1\n                elif x==n and n!=1 and a[x-2]!=0:\n                    a[x-1]=0\n                    c+=1\n                elif x!=1 and x!=n and a[x-2]==0 and a[x]==0:\n                    c-=1\n                    a[x-1]=0\n                elif n==1:\n                    if c==0:\n                        c=1\n                else:\n                    a[x-1]=0\n            else:\n                a[x-1]+=y\n", "n, q, l = list(map(int, input().split()))\na = [0] + list(map(int, input().split())) + [0]\nt = 0\ns = [False] * (n + 2)\nfor i in range(1, n + 1):\n    if a[i] > l:\n        if s[i - 1] == False:\n            t += 1\n        s[i] = True\n\nfor i in range(q):\n    k = input()\n    if k[0] == '0':\n        print(t)\n    else:\n        k, p, d = list(map(int, k.split()))\n        a[p] += d\n        if a[p] > l and s[p] == False:\n            if s[p - 1] and s[p + 1]:\n                t -= 1\n            else:\n                if s[p - 1] == False and s[p + 1] == False:\n                    t += 1\n                else:\n                    pass\n            s[p] = True\n   \n        \n        \n", "#!/usr/bin/env python3\nimport sys\n\n\ndef count_it():\n    return len(''.join(list([' ' if x <= l else '1' for x in h])).split())\n\n\nn, m, l = list([int(x) for x in sys.stdin.readline().split(' ')])\nh = list([int(x) for x in sys.stdin.readline().split(' ')])\nk = count_it()\nfor mi in range(m):\n    request = sys.stdin.readline().split(' ')\n    if len(request) == 1:\n        print(k)\n    else:\n        r, p, d = list([int(x) for x in request])\n        h[p - 1] += d\n        if (h[p - 1] > l) and (h[p - 1] - d <= l):\n            if n == 1:\n                k += 1\n            else:\n                if (p - 1 == 0 and h[1] <= l) or (p == len(h) and h[p - 2] <= l) or (h[p - 2] <= l and h[p] <= l):\n                    k += 1\n                elif p - 1 != 0 and p != len(h) and h[p - 2] > l and h[p] > l:\n                    k -= 1\n", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n, m, l = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = {}\n    used = set()\n    current = 0\n    for i in range(n):\n        if a[i] > l:\n            if i in used:\n                continue\n            elif (i - 1) not in used and (i + 1) not in used:\n                current += 1\n            elif (i - 1) in used and (i + 1) in used and (s[1] - 1) not in used:\n                current -= 1\n            used.add(i)\n        d[i] = a[i]\n    for i in range(m):\n        s = list(map(int, input().split()))\n        if s[0] == 0:\n            print(current)\n        elif s[0] == 1:\n            d[s[1] - 1] += s[2]\n            if d[s[1] - 1] > l:\n                if (s[1] - 1) in used:\n                    continue\n                elif (s[1] - 2) not in used and (s[1]) not in used:\n                    current += 1\n                elif (s[1] - 2) in used and (s[1]) in used and (s[1] - 1):\n                    current -= 1\n                used.add(s[1] - 1)\n                \ndef __starting_point():\n    main()\n__starting_point()", "from bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nimport sys\nMAX = sys.maxsize\nMAXN = 10**6+10\ndef isprime(n):\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2: \n        return True    \n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef mhd(a,b,x,y):\n    return abs(a-x)+abs(b-y)\n\ndef numIN():\n    return(map(int,sys.stdin.readline().strip().split()))\n\ndef charIN():\n    return(sys.stdin.readline().strip().split())\n\n\ndef ans(a,l,n):\n\tf = 0\n\tcnt = 0\n\tfor i in range(n):\n\t\tif a[i]>l:\n\t\t\tif not f:\n\t\t\t\tcnt+=1\n\t\t\t\tf = 1\n\t\telse:\n\t\t\tf = 0\n\treturn cnt\n\n\nn,m,l = numIN()\na = list(numIN())\ncnt = ans(a,l,n)\nfl = [0]*(n+1)\nfor i in range(n):\n\tif a[i]>l:\n\t\tfl[i]=1\nfor _ in range(m):\n\tx = list(numIN())\n\tif len(x)==1:\n\t\tprint(cnt)\n\telse:\n\t\tp = x[1]-1\n\t\td = x[2]\n\t\ta[p]+=d\n\t\tif a[p]>l:\n\t\t\tif not fl[p]:\n\t\t\t\tif p==0:\n\t\t\t\t\tif not fl[p+1]:\n\t\t\t\t\t\tcnt+=1\n\t\t\t\telif p==n-1:\n\t\t\t\t\tif not fl[p-1]:\n\t\t\t\t\t\tcnt+=1\n\t\t\t\telse:\n\t\t\t\t\tif fl[p+1] and fl[p-1]:\n\t\t\t\t\t\tcnt-=1\n\t\t\t\t\telif not (fl[p+1] or fl[p-1]):\n\t\t\t\t\t\tcnt+=1\n\t\t\tfl[p] = 1", "def CuttingTime(hairline_len,l,time,p,d):\n    n = len(list(hairline_len.keys()))\n    if hairline_len[p] <= l:\n        hairline_len[p] += d\n        if p == 1:\n            if n > 1: \n                if hairline_len[p+1] <= l and hairline_len[p] > l:\n                    time += 1\n            else:\n                if hairline_len[p]-d <= l:\n                    time += 1\n        elif 1 < p < n:\n            if hairline_len[p] > l:\n                if hairline_len[p-1] <= l and hairline_len[p+1] <= l:\n                    time += 1\n                elif hairline_len[p-1] > l and hairline_len[p+1] > l and time > 1:\n                    time -= 1\n        else:\n            if hairline_len[p-1] <= l and hairline_len[p] > l:\n                time += 1\n    \n    return time\n\ndef InitialTIme(hairline_len,l):\n    time = 0\n    count = 0\n\n    for i in hairline_len:\n        if hairline_len[i] > l:\n            count += 1\n        else:\n            if count > 0:\n                time += 1\n            count = 0\n    \n    if count > 0:\n        time += 1\n\n    return time\n\ndef AliceHairDresser():\n    inputs = list(map(int,input().split()))\n    n = inputs[0]\n    m = inputs[1]\n    l = inputs[2]\n\n    lengths = list(map(int,input().split()))\n    hairline_len = {}\n\n    for i in range(1,n+1):\n        hairline_len[i] = lengths[i-1]\n    \n    time = InitialTIme(hairline_len,l)\n    #print time\n\n    for i in range(m):\n        query = input()\n\n        if len(query) == 1:\n            print (time)\n        else:\n            inputs1 = list(map(int,query.split()))\n            #print inputs1\n            p = inputs1[1]\n            d = inputs1[2]\n            if hairline_len[p] <= l:\n                time = CuttingTime(hairline_len,l,time,p,d)\n        \nAliceHairDresser()\n", "def inint():\n    return int(input())\ndef inlist():\n    return list(map(int,input().split()))\n\ndef main():\n    n,m,l=inlist()\n    aa=inlist()\n    chg=0;ch=0\n    a=[[i,0] for i in aa]\n    for i in range(n):\n        if aa[i]>l :\n            if ch==0:\n                ch+=1\n                chg+=1\n                a[i][1]=chg\n            else:\n                ch+=1\n                a[i][1]=chg\n        else:\n            if ch!=0:ch=0\n    sol=list()\n    if n>1:\n        for z in range(m):\n            qu=input()\n            if qu==\"0\":sol.append(chg)\n            else:\n                #print(chg)\n                zz,p,d=list(map(int,qu.split()))\n                p-=1\n                a[p][0]+=d\n                if a[p][1]==0 and a[p][0]>l:\n                    if p>0 and p<n-1:\n                        #print('first')\n                        if a[p-1][1]==0 and a[p+1][1]==0:\n                            chg+=1\n                            a[p][1]=chg\n                        elif a[p-1][1]==0 and a[p+1][1]>0:\n                            a[p][1]=a[p+1][1]\n                        elif a[p-1][1]>0 and a[p+1][1]==0:\n                            a[p][1]=a[p-1][1]\n                        else:\n                            a[p][1]=a[p-1][1];chg-=1\n                    elif p==0:\n                        #print('second')\n                        if a[p+1][1]==0:\n                            chg+=1\n                            a[p][1]=chg\n                        else:\n                            a[p][1]=a[p+1][1]\n                    elif p==n-1:\n                        #print('third')\n                        if a[p-1][1]==0:\n                            chg+=1\n                            a[p][1]=chg\n                        else:\n                            a[p][1]=a[p-1][1]\n    else:\n        for z in range(m):\n            qu=input()\n            if qu==\"0\":sol.append(chg)\n            else:\n                #print(chg)\n                zz,p,d=list(map(int,qu.split()))\n                p-=1\n                a[p][0]+=d\n                if a[p][0]>d:chg=1\n    #print(a,chg)\n    print(*sol,sep='\\n')\n\n\n\n\n\ndef __starting_point():\n    #import profile\n    #profile.run(\"main()\")\n    main()\n__starting_point()", "n, m, l = list(map(int, input().split()))\nl += 1\nhair = [1] * (n + 1)\nother_end = [1] * (n + 1)\ni = 1\nj = 1\nbig = 1\nres = 1\nfor a in map(int, input().split()):\n\thair[i] = a\n\tif a >= l:\n\t\tif big == 1:\n\t\t\tj = i\n\t\t\tbig = 2\n\telif big == 2:\n\t\tk = i - 1\n\t\tother_end[k] = j\n\t\tother_end[j] = k\n\t\tres += 1\n\t\tbig = 1\n\ti += 1\nif big == 2:\n\tother_end[n] = j\n\tother_end[j] = n\n\tres += 1\nfor _ in range(m):\n\tt = input()\n\tif t == '0':\n\t\tif res == 1:\n\t\t\tprint('0')\n\t\telse:\n\t\t\tprint(res - 1)\n\telse:\n\t\tt1, p, d = list(map(int, t.split()))\n\t\told = hair[p]\n\t\thair[p] += d\n\t\tif hair[p] >= l > old:\n\t\t\tif p == 1 or hair[p - 1] < l:\n\t\t\t\tcase_id = 1\n\t\t\telse:\n\t\t\t\tcase_id = 2\n\t\t\tif p != n and hair[p + 1] >= l:\n\t\t\t\tcase_id += 2\n\t\t\tif case_id == 1:\n\t\t\t\tother_end[p] = p\n\t\t\t\tres += 1\n\t\t\telif case_id == 2:\n\t\t\t\tother_end[p] = other_end[p - 1]\n\t\t\t\tother_end[other_end[p]] = p\n\t\t\telif case_id == 3:\n\t\t\t\tother_end[p] = other_end[p + 1]\n\t\t\t\tother_end[other_end[p]] = p\n\t\t\telse:\n\t\t\t\tleft_end = other_end[p - 1]\n\t\t\t\tright_end = other_end[p + 1]\n\t\t\t\tother_end[left_end] = right_end\n\t\t\t\tother_end[right_end] = left_end\n\t\t\t\tres -= 1\n", "n,m,l = [int(s) for s in input().split()]\na = [int(s) for s in input().split()]\n\nanss = []\nans = 0\non = False\nfor i in range(n):\n    if a[i] > l and not on:\n        ans += 1\n        on = True\n    elif a[i] <= l and on:\n        on = False\n\nfor i in range(m):\n    r = [int(s) for s in input().split()]\n    if r[0] == 0:\n        anss.append(ans)\n    else:\n        p,d = r[1]-1,r[2]\n        if a[p] <= l and a[p]+d > l:\n            add = 1\n            if p > 0 and a[p-1] > l:\n                add -= 1\n            if p < n-1 and a[p+1] > l:\n                add -= 1\n            ans += add\n        a[p] += d\n    # print(a)\n\nprint(*anss, sep='\\n')", "(n, m, length_) = [int(s) for s in input().split(\" \")]\n\na = [int(s) for s in input().split(\" \")]\n\nresult = 0\nprev = None\nfor i in range(n):\n    if prev and prev <= (length_):\n        if a[i] > length_:\n            result+=1\n    if not prev and a[i] > length_:\n        result+=1\n\n    prev = a[i]\n\n\nfor i in range(m):\n    temp = input()\n    if temp == \"0\":\n        print(result)\n    else:\n        (_, p, d) = [int(s) for s in temp.split(\" \")]\n        num = p - 1\n        cm = d\n        old_val = a[num]\n        a[num] += cm\n        if old_val > length_:\n            continue\n        if a[num] <= length_:\n            continue\n\n        if num!=0 and num!=(n-1):\n            if a[num-1] > length_ and a[num+1] > length_:\n                result-=1\n            elif a[num-1] <= length_ and a[num+1] <= length_:\n                result += 1\n        elif num == 0 and (len(a)==1 or a[1] <= length_):\n            result+=1\n        elif num == (n-1) and a[n-2] <= length_:\n            result+=1\n\n\n\n\n# easy = True\n# for el in a:\n#     if el <= length_:\n#         easy = False\n#\n# t = [0]*4*n\n#\n# def build (a, v, tl, tr):\n#     if tl == tr:\n#         t[v] = 1 if a[tl] > length_ else 0\n#     else:\n#         tm = (tl + tr) // 2\n#         build (a, v*2, tl, tm)\n#         build (a, v*2+1, tm+1, tr)\n#         if a[tm] > length_ and a[tm + 1] > length_:\n#             t[v] = t[v * 2] + t[v * 2 + 1] -1\n#         else:\n#             t[v] = t[v * 2] + t[v * 2 + 1]\n#\n#\n#\n#\n# def update (v, tl, tr, pos):\n#     if (tl == tr):\n#         if tl == pos:\n#             # print(v, tl, pos)\n#             t[v] = 1\n#     else:\n#         tm = (tl + tr) // 2\n#         if (pos <= tm):\n#             update(v*2, tl, tm, pos)\n#         else:\n#             update(v*2+1, tm+1, tr, pos)\n#         if a[tm] > length_ and a[tm + 1] > length_:\n#             t[v] = t[v * 2] + t[v * 2 + 1] - 1\n#         else:\n#             t[v] = t[v * 2] + t[v * 2 + 1]\n#\n# if not easy:\n#     build(a,1,0,n-1)\n# # print(t)\n#\n# # def evaluate(v, tl, tr, l, r):\n# #     if (l > r):\n# #         return 0\n# #     if (l == tl and r == tr):\n# #         return 1 if t[v] > length_ else 0\n# #         tm = (tl + tr) // 2\n# #     left_result =  evaluate(v*2, tl, tm, l, min(r,tm))\n# #     right_result = evaluate(v*2+1, tm+1, tr, max(l,tm+1), r)\n# #     if t[tm] > length_ and t[tm+1] > length_:\n# #         return left_result + right_result -1\n# #     else:\n# #         return left_result + right_result\n#\n# for i in range(m):\n#     temp = input()\n#     if temp == \"0\":\n#         if easy:\n#             print(1)\n#         else:\n#             print(t[1])\n#     else:\n#         if easy:\n#             continue\n#\n#         (_, p, d) = [int(s) for s in temp.split(\" \")]\n#         # print(\"sss\", p, d)\n#         num = p - 1\n#         cm = d\n#         old_val = a[num]\n#         a[num] += cm\n#         if old_val > length_:\n#             continue\n#         if a[num] <= length_:\n#             continue\n#         update(1, 0, n - 1, num)\n", "n, m, l = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ndef time_to_cut():\n    nonlocal a\n    t = 0\n    pr = 0\n    for i in range(n):\n        if a[i] <= l:\n            pr = 0\n        elif pr == 0:\n            t += 1\n            pr = 1\n    return t\n\ndef update_time(p, d):\n    nonlocal a\n    nonlocal T\n    p -= 1\n    pos = (0 if a[p] <= l else 1)\n    a[p] += d\n    pns = (0 if a[p] <= l else 1)\n    sa = bool(pns - pos)\n    if not sa:\n        pass\n    elif n == 1:\n        T += 1\n    elif p == 0:\n        if a[p+1] <= l:\n            T += 1\n    elif p == n-1:\n        if a[p-1] <= l:\n            T += 1\n    elif a[p+1] <= l and a[p-1] <= l:\n        T += 1\n    elif a[p+1] > l and a[p-1] > l:\n        T -= 1\n    return\n\nT = time_to_cut()\n\nfor i in range(m):\n    r = [int(x) for x in input().split()]\n    if r[0] == 0: # time request\n        print(T)\n    else: # hair grow\n        update_time(r[1], r[2])\n"]