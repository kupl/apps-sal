["import sys\n\n\nMAXV = 100010\nd = [0] * MAXV\n\n\na, b, h, w, n = list(map(int,input().split()))\n\narr = input().split()\n\nfor it in range(n):\n    arr[it] = int(arr[it])\n\n# print(arr)\n# print(a, b, h, w, n)\n\ndef solve(a, b, h, w, z, product, it):\n    # print(\">\", a, b, h, w, z, product, it)\n    k = 0\n    if a % h:\n        k = a // h + 1\n    else:\n        k = a // h\n\n    if k <= z and (product // z) * w >= b:\n        print(it)\n        return\n\n\n\narr = sorted(arr)\narr = arr[::-1]\n# print(arr)\n\nd[1] = 1\nsolve(a, b, h, w, 1, 1, 0)\nsolve(a, b, w, h, 1, 1, 0)\nproduct = 1\nxxx = 0\n\nfor it in range(1, n + 1):\n    # arr[it - 1] = int(arr[it - 1])\n    product *= arr[it - 1]\n    # print(\"=\", arr[it - 1])\n\n    for j in reversed(list(range(1, MAXV))):\n        if not d[j]:\n            continue\n\n        x = j * arr[it - 1]\n        # x = min(x, MAXV - 1)\n        if x < MAXV:\n            d[x] = 1\n        else:\n            if xxx:\n                xxx = min(x, xxx)\n            else:\n                xxx = x\n    if xxx:\n        solve(a, b, h, w, xxx, product, it)\n        solve(a, b, w, h, xxx, product, it)\n\n    for j in range(MAXV):\n        if d[j]:\n            solve(a, b, h, w, j, product, it)\n            solve(a, b, w, h, j, product, it)\n\n\nprint(-1)\n", "def gen(o, gen1):\n    if o == len(my_arr):\n        fp = 1\n        sp = 1\n        \n        for i in range(len(my_arr)):\n            fp *= my_arr[i][0] ** gen1[i]\n            sp *= my_arr[i][0] ** (my_arr[i][1] - gen1[i])\n            \n        if (h * fp >= a and w * sp >= b) or (h * fp >= b and w * sp >= a):\n            return True\n        \n        return False\n    \n    for i in range(my_arr[o][1] + 1):\n        if gen(o + 1, gen1 + [i]):\n            return True\n        \n    return False\n\n\na, b, h, w, n = map(int, input().split())\n\narr = list(map(int, input().split()))\narr.sort(reverse = True)\n\narr2 = []\nfor i in range(n):\n    if (not i) or arr[i] != arr[i - 1]:\n        arr2.append([arr[i], 1])\n    else:\n        arr2[-1][1] += 1\n    \n    \nif (h >= a and w >= b) or (h >= b and w >= a):\n    print(0)\nelse:\n    my_arr = []\n    j = -1\n    ans = -1\n    for i in range(1, min(34, len(arr)) + 1):\n        if my_arr and my_arr[-1] < arr2[j]:\n            my_arr[-1][1] += 1\n        else:\n            j += 1\n            my_arr.append([arr2[j][0], 1])\n            \n        if gen(0, []):\n            ans = i\n            break\n        \n    print(ans)", "def isin(a,b,h,w):\n    return (h >= a and w >= b) or (h >= b and w >= a)\n\na,b,h,w,n = map(int, input().split())\nc = sorted(list(map(int, input().split())), key=lambda x: -x)\n\nif isin(a,b,h,w):\n    print(0)\n    return\n\nvis = {h: w}\nfor i in range(len(c)):\n    nc = c[i]\n    pairs = []\n    for l in vis.keys():\n        pair = (l,vis[l]*nc)\n        if isin(a,b,pair[0], pair[1]):\n            print(i + 1)\n            return\n        pairs.append(pair)\n        if nc*l not in vis or vis[l] > vis[nc*l]:\n            pair = (nc*l, vis[l])\n            if isin(a,b,pair[0], pair[1]):\n                print(i + 1)\n                return\n            pairs.append(pair)\n    for p in pairs:\n        vis[p[0]] = p[1]\nprint(-1)", "def mp():  return list(map(int,input().split()))\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\ndef listring(l): return ' '.join([str(x) for x in l])\ndef ptlist(l): print(' '.join([str(x) for x in l]))\nfrom copy import deepcopy\nc,b,h,w,n = mp() \nd = lt()\nd.sort(reverse = True)\nk = min(n,34)\na = d[:k] \nif (c <= h and b <= w) or (c <= w and b <= h):\n    pt(0)\nelse:\n    dict = {h:w}\n    i = 0\n    bl = True\n    while bl and i < k:\n        x = a[i]\n        dict1 = {}\n        for r in dict:\n            if r*x in dict1:\n                dict1[r*x] = max(dict1[r*x],dict[r])\n            else:\n                dict1[r*x] = dict[r]\n            if r in dict1:\n                dict1[r] = max(dict1[r],dict[r]*x)\n            else:\n                dict1[r] = dict[r]*x\n        if any((r>=c and dict1[r]>=b) or (r>=b and dict1[r]>=c) for r in dict1):\n            bl = False\n        else:\n            i += 1\n            dict = deepcopy(dict1)\n    if i == k:\n        pt(-1)\n    else:\n        pt(i+1)\n        \n    \n            \n        \n    \n", "a,b,h,w,n=list(map(int,input().strip().split(' ')))\nif a>b:\n    a,b=b,a\n    \nfactor=list(map(int,input().strip().split(' ')))\nfactor=sorted(factor)[::-1]\n#print(factor)\ndef findout(a,b,h,w,factor):\n    possible=set()\n    for i in range(len(factor)):\n        temp=set()\n        if i==0:\n            temp.add((factor[0],1))\n            temp.add((1,factor[0]))\n            possible=temp\n            for X in temp:\n                f1,f2=X\n                if f1*h>=a and f2*w>=b:\n                    return i+1\n            \n            \n        else:\n            for X in possible:\n                c1,c2=X\n                if c1*h<=a:\n                    temp.add((c1*factor[i],c2))\n                    if c1*factor[i]*h>=a and c2*w>=b:\n                        return i+1\n                    \n                    \n                    \n                if c2*w<=b:    \n                    temp.add((c1,c2*factor[i]))\n                    if c1*h>=a and c2*w*factor[i]>=b:\n                        return i+1\n            possible=temp\n    return 10**9+1\n\nif (h>=a and w>=b) or (h>=b and w>=a):\n    print(0)\nelse:\n    ans=min(findout(a,b,h,w,factor),findout(a,b,w,h,factor))\n    if ans!=10**9+1:\n        print(ans)\n    else:\n        print(-1)\n                \n                \n            \n            \n            \n            \n            \n            \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "f = lambda: list(map(int, input().split()))\na, b, h, w, n = f()\nc = sorted(list(f()), key=lambda x: -x)\nd = {(h, w), (w, h)}\nfor i, q in enumerate([1] + c):\n    for u, v in d.copy():\n        h, w = u, v * q\n        if a <= w and b <= h or a <= h and b <= w:\n            print(i)\n            return\n        d.add((h, w))\n        d.add((w, h))\nprint(-1)\n", "def gen(o, gen1):\n    if o == len(my_arr):\n        fp = 1\n        sp = 1\n        \n        for i in range(len(my_arr)):\n            fp *= my_arr[i][0] ** gen1[i]\n            sp *= my_arr[i][0] ** (my_arr[i][1] - gen1[i])\n            \n        if (h * fp >= a and w * sp >= b) or (h * fp >= b and w * sp >= a):\n            return True\n        \n        return False\n    \n    for i in range(my_arr[o][1] + 1):\n        if gen(o + 1, gen1 + [i]):\n            return True\n        \n    return False\n\n\na, b, h, w, n = map(int, input().split())\n\narr = list(map(int, input().split()))\narr.sort(reverse = True)\n\narr2 = []\nfor i in range(n):\n    if (not i) or arr[i] != arr[i - 1]:\n        arr2.append([arr[i], 1])\n    else:\n        arr2[-1][1] += 1\n    \n    \nif (h >= a and w >= b) or (h >= b and w >= a):\n    print(0)\nelse:\n    my_arr = []\n    j = -1\n    ans = -1\n    for i in range(1, min(34, len(arr)) + 1):\n        if my_arr and my_arr[-1] < arr2[j]:\n            my_arr[-1][1] += 1\n        else:\n            j += 1\n            my_arr.append([arr2[j][0], 1])\n            \n        if gen(0, []):\n            ans = i\n            break\n        \n    print(ans)"]