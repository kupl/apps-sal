["3\n\nprev = dict()\n\ndef dfs(a, b):\n    if a > b:\n        return\n    if 2 * a not in prev:\n        prev[2 * a] = a\n        dfs(2 * a, b)\n    if 10 * a + 1 not in prev:\n        prev[10 * a + 1] = a\n        dfs(10 * a + 1, b)\n\n\n\na, b = list(map(int, input().split()))\ndfs(a, b)\n\nif b not in prev:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    path = []\n    while b != a:\n        path.append(b)\n        b = prev[b]\n    path.append(a)\n    path.reverse()\n    print(len(path))\n    print(*path)\n", "a, b = list(map(int, input().split()))\nk = [b]\nf = 1\nwhile b > a:\n    if (b % 10 == 1):\n        b -= 1\n        b //= 10\n    elif (b % 2 == 0):\n        b //= 2\n    else:\n        f = 0\n        break\n    k.append(b)\nelse:\n    k.reverse()\n    if (k[0] == a):\n        print(\"YES\")\n        print(len(k))\n        print(*k)\n    else:\n        print(\"NO\")\nif f == 0:\n    print(\"NO\")\n", "# You lost the game.\na,b = map(int, input().split())\nR = [b]\nok = 1\nwhile b > a:\n    while b % 10 != 1 and b > a:\n        if b % 2 == 1:\n            ok = 0\n            break\n        else:\n            b = b//2\n            R += [b]\n    if b > a:\n        b = (b-1)//10 \n        R += [b]\nif ok == 0 or b < a:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(len(R))\n    for i in range(len(R)):\n        print(R[len(R)-1-i],end=\" \")\n", "def canoperate(n):\n    return str(n)[-1] == \"1\" and str(n) != \"1\" or n % 2 == 0\n\ndef operate(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n - 1) // 10\n\na, b = map(int, input().split())\nres = [b]\nwhile canoperate(b):\n    b = operate(b)\n    res.append(b)\n    if b == a:\n        print(\"YES\")\n        print(len(res))\n        print(*res[::-1])\n        break\nelse:\n    print(\"NO\")", "read = lambda: list(map(int, input().split()))\na, b = read()\nQ = [a]\nprev = dict()\nst = 0\nwhile st < len(Q):\n    cur = Q[st]\n    st += 1\n    if cur * 2 <= b:\n        Q.append(cur * 2)\n        prev[cur * 2] = cur\n    if cur * 10 + 1 <= b:\n        Q.append(cur * 10 + 1)\n        prev[cur * 10 + 1] = cur\nif prev.get(b) is None:\n    print('NO')\n    return\nprint('YES')\nans = []\ncur = b\nwhile cur != a:\n    ans.append(cur)\n    cur = prev[cur]\nans.append(a)\nprint(len(ans))\nprint(*ans[::-1])\n", "a, b = map(int, input().split())\nans = [b]\nwhile b > a:\n    if b % 10 == 1:\n        b //= 10\n        ans += [b]\n    elif b % 2 == 0:\n        b //= 2\n        ans += [b]\n    else:\n        break\nif b == a:\n    print('YES')\n    print(len(ans))\n    ans.reverse()\n    print(' '.join(list(map(str, ans))))\nelse:\n    print('NO')", "a, b = map(int, input().split())\nans = []\nf = True\nwhile b >= a:\n    ans.append(b)\n    if b % 10 == 1:\n        b //= 10\n    elif b % 2 == 0:\n        b //= 2\n    else:\n        if b != a:\n            f = False\n        break\nif ans[-1] != a:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(len(ans))\n    print(*ans[::-1])", "n, m = list(map(int, input().split()))\nsteps = [m]\nwhile (m > n):\n    if (m % 2 == 0):\n        m //= 2\n    elif (m % 10 == 1):\n        m //= 10\n    else:\n        break\n    steps.append(m)\nif (m != n):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    steps.reverse()\n    print(len(steps))\n    print(*steps)", "a, b = list(map(int, input().split()))\nqueue = [a]\nqstart = 0\nprev = dict()\nprev[a] = -1\nwhile qstart + 1 <= len(queue):\n    our = queue[qstart]\n    qstart += 1\n    if our * 2 <= 10 ** 9 and our * 2 not in prev:\n        queue.append(our * 2)\n        prev[our * 2] = our\n    t = our * 10 + 1\n    if t <= 10 ** 9 and t not in prev:\n        queue.append(t)\n        prev[t] = our\nif b in prev:\n    print('YES')\n    res = []\n    curr = b\n    while curr != -1:\n        res.append(curr)\n        curr = prev[curr]\n    print(len(res))\n    print(' '.join(map(str, res[::-1])))\nelse:\n    print('NO')\n", "a, b = map(int, input().split())\ndo = []\nwhile True:\n    do.append(b)\n    if b == a:\n        break\n    if b % 2 == 0:\n        b //= 2\n    elif str(b)[-1] == '1':\n        if b == 1:\n            if a == 1:\n                break\n            else:\n                print(\"NO\")\n                return                \n        else:\n            b = int(str(b)[:-1])\n    else:\n        print(\"NO\")\n        return\ndo = do[::-1]\nprint(\"YES\")\nprint(len(do))\nprint(*do)", "a, b = list(map(int, input().split()))\nans = []\nfl = False\nans.append(b)\nwhile b > a:\n    if b % 2 == 0:\n        b //= 2\n        ans.append(b)\n    else:\n        if b % 10 == 1:\n            b //= 10\n            ans.append(b)\n        else:\n            fl = True\n            print('NO')\n            break\n\nif not fl and b == a:\n    print('YES')\n    print(len(ans))\n    print(*ans[::-1])\nelif not fl:\n    print('NO')", "a, b = list(map(int, input().split()))\nans = [b]\nwhile (b % 10 == 1 or b % 2 == 0) and b > 0 and b > a:\n    if b % 2 == 0:\n        b //= 2\n        ans.append(b)\n    elif b % 10 == 1 and b != 1:\n        b = int(str(b)[:-1])\n        ans.append(b)\n    elif b == 1:\n        ans.append(1)\n        break\n    \nif a == b:\n    print('YES')\n    print(len(ans))\n    print(*(reversed(ans)))\nelse:\n    print('NO')\n", "a, b = map(int, input().split())\npred = [str(b)]\nwhile a != b and b > a:\n    if b % 10 == 1 and b != 1:\n        b = b // 10\n        pred.append(str(b))\n    elif b % 2 == 0:\n        b = b // 2\n        pred.append(str(b))\n    else:\n        break\nif a != b:\n    print('NO')\nelse:\n    print('YES')\n    print(len(pred))\n    pred.reverse()\n    print(' '.join(pred))", "a, b = list(map(int, input().split()))\narr = [str(b)]\nwhile b > a:\n    if b % 10 == 1:\n        b //= 10\n        arr.append(str(b))\n    elif b % 2 == 0:\n        b //= 2\n        arr.append(str(b))\n    else:\n        b = -1\nif b == a:\n    arr.reverse()\n    print('YES', len(arr), ' '.join(arr), sep='\\n')\nelse:\n    print('NO')\n    ", "rez = 'NO'\nms = []\ndef gen(a,b, mas):\n    nonlocal rez,ms\n    if a == b:\n        rez = 'YES'\n        ms = mas[:]\n    elif a < b:\n        gen(a*2,b,mas + [a*2])\n        gen(a*10+1,b,mas + [a*10+1])\na,b = list(map(int, input().split()))\ngen(a,b,[a])\nif rez == 'YES':\n    print(rez);\n    print(len(ms))\n    print(*ms)\nelse: print(rez)\n", "a, b = [int(x) for x in input().split()]\nans = [b]\nwhile b > a:\n    if b % 2 == 1 and str(b)[-1] != '1':\n        print(\"NO\")\n        break\n    if b % 2 == 1 and str(b)[-1] == '1':\n        b = b // 10\n        ans.append(b)\n        continue\n    if b % 2 == 0:\n        b = b // 2\n        ans.append(b)\n        continue\nelse:\n    if b != a:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(len(ans))\n        for i in range(len(ans)):\n            print(ans[len(ans) - i - 1], end = \" \")", "a, b = map(int, input().split())\nans = [b]\n\nwhile (b > a):\n    if (b % 2 == 0):\n        b //= 2\n        ans.append(b)\n    elif (b % 10 == 1):\n        b //= 10\n        ans.append(b)\n    else:\n        break\n\nif (b == a):\n    print('YES')\n    print(len(ans))\n    print(*reversed(ans))\nelse:\n    print('NO')", "a, b = map(int, input().split())\n\nflag = True\nans = []\n\nwhile b > a:\n    if b % 2 == 0:\n        ans.append(b)\n        b //= 2\n    elif b % 10 == 1:\n        ans.append(b)\n        #print(b)\n        b = (b - 1) // 10\n    else:\n        b = -1\nans.append(b)\n\nif b != a:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    print(len(ans))\n    for i in range(len(ans) - 1, -1, -1):\n        print(ans[i], end = \" \")", "q,w=map(int,input().split())\na=[]\nwhile w>q:\n\tif w%10==1:\n\t\ta.append(w)\n\t\tw//=10\n\telif w%2==1:\n\t\tw=q-1\n\telse:\n\t\ta.append(w)\n\t\tw//=2\na.append(w)\nif w==q:\n\tprint(\"YES\")\n\tprint(len(a))\n\tfor i in a[::-1]:\n\t\tprint(i,end=' ')\nelse:\n\tprint('NO')", "#!/usr/bin/env python3\n\n\ndef convert(a, b):\n    path = [b]\n    while b != a:\n        if b % 2 == 0 and b > 0:\n            b //= 2\n            path.append(b)\n        elif b % 10 == 1:\n            b //= 10\n            path.append(b)\n        else:\n            return None\n    return reversed(path)\n\n\ndef main():\n    ans = convert(*list(map(int, input().split())))\n    if ans is None:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        path = list(ans)\n        print(len(path))\n        print(*path)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def actionA(i):\n    return i // 2\n\ndef actionB(i):\n    return (i - 1) // 10\n\ndef getAction(i):\n    if not (i % 2):\n        return actionA\n    elif (i % 10) == 1:\n        return actionB\n    else:\n        return None\n\ndef fail():\n    print('NO')\n\ndef m():\n    i, j = (int(a) for a in input().split(' '))\n    l = [j]\n    while True:\n        act = getAction(j)\n        if act is None:\n            return fail()\n        j = act(j)\n        l.append(j)\n        if j < i:\n            return fail()\n        if j == i:\n            break\n    l.reverse()\n    print('YES', len(l), ' '.join(str(i) for i in l), sep='\\n')  # success!\n\ndef __starting_point():\n    m()\n\n\n__starting_point()", "from math import *\na ,b = map(int, input().split())\nans = [b]\nper = 0\nwhile b > a:\n    if str(b)[-1] == '1':\n        b = int(str(b)[:-1])\n        ans.append(b)\n    elif b % 2 == 0:\n        b = b // 2\n        ans.append(b)\n    else:\n        per = 1\n        break\nif per == 0 and b == a:\n    print('YES')\n    print(len(ans))\n    ans.reverse()\n    print(' '.join(map(str, ans)))\nelse:\n    print('NO')", "a, b = map(int, input().split())\nflag = True\norder = [b]\nwhile b > a:\n    if b % 2 == 0:\n        b //= 2\n        order.append(b)\n    elif b % 10 == 1:\n        b //= 10\n        order.append(b)\n    else:\n        break\nif b == a:\n    print(\"YES\")\n    print(len(order))\n    for i in range(len(order) - 1, -1, -1):\n        print(order[i], end=\" \")\nelse:\n    print(\"NO\")"]