["# -*- coding: utf-8 -*-\n\n\ndef solve():\n    mod = 10**9 + 7\n    n, m = map(int, input().split())\n    p = input()\n    if m == 0:\n        return powmod(n)\n    delta = len(p) - 1\n    ys = map(int, input().split())\n    answer = 1\n    tail = 0\n    for y in ys:\n        if y > tail:\n            answer *= powmod(y - tail - 1)\n            answer %= mod\n        elif not is_consistent(p, tail - y + 1):\n            return 0\n        tail = y + delta\n    answer *= powmod(n - tail)\n    return answer % mod\n\nok_set = set()\ndef is_consistent(p, margin):\n    nonlocal ok_set\n    if margin in ok_set:\n        return True\n    elif p[:margin] == p[-margin:]:\n        ok_set.add(margin)\n        return True\n    else:\n        return False\n\ndef powmod(p):\n    mod = 10**9 + 7\n    pbin = bin(p)[2:][-1::-1]\n    result = 26 if pbin[0] == '1' else 1\n    tmp = 26\n    for bit in pbin[1:]:\n        tmp *= tmp\n        tmp %= mod\n        if bit == '1':\n            result *= tmp\n            result %= mod\n    return result\n\nprint(solve())", "# -*- coding: utf-8 -*-\n\n\ndef solve():\n    n, m = list(map(int, input().split()))\n    p = input()\n    if m == 0:\n        return powmod(n)\n    delta = len(p) - 1\n    ys = list(map(int, input().split()))\n    tail = 0\n    free_chars = 0\n    for y in ys:\n        if y > tail:\n            free_chars += y - tail - 1\n        elif not is_consistent(p, tail - y + 1):\n            return 0\n        tail = y + delta\n    free_chars += n - tail\n    return powmod(free_chars)\n\nok_set = set()\ndef is_consistent(p, margin):\n    nonlocal ok_set\n    if margin in ok_set:\n        return True\n    elif p[:margin] == p[-margin:]:\n        ok_set.add(margin)\n        return True\n    else:\n        return False\n\n\ndef powmod(p):\n    mod = 10**9 + 7\n    pbin = bin(p)[2:][-1::-1]\n    result = 26 if pbin[0] == '1' else 1\n    tmp = 26\n    for bit in pbin[1:]:\n        tmp *= tmp\n        tmp %= mod\n        if bit == '1':\n            result *= tmp\n            result %= mod\n    return result\n\n\nprint(solve())\n", "import sys\n\ndef prefix(s):\n    m = len(s)\n    v = [0]*len(s)\n    for i in range(1,len(s)):\n        k = v[i-1]\n        while k > 0 and s[k] != s[i]:\n            k = v[k-1]\n        if s[k] == s[i]:\n            k = k + 1\n        v[i] = k\n    w = set()\n    i = m-1\n    while v[i] != 0:\n        w.add(m-v[i])\n        i = v[i]-1\n    \n    return w\nn,m = list(map(int, input().split()))\nif m == 0: \n    print(pow(26, n, 1000000007))\n    return\np = input()\nl = len(p)\nx = list(map(int,input().split()))\nw = prefix(p)\nbusy = l\nfor i in range(1,m):\n    if x[i]-x[i-1] < l and (x[i] - x[i-1]) not in w:\n        print(0)\n        return\n    busy += min(x[i]-x[i-1], l)\n    \nprint(pow(26,n-busy, 1000000007))\n    \n"]