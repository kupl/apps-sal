["# tested by Hightail - https://github.com/dj3500/hightail\n\n\nfrom heapq import heappop, heappush\nfrom sys import stdin, stdout\n\n\nread, read_array = stdin.readline, lambda: stdin.readline().split()\nwrite = lambda *args, **kw: stdout.write(kw.get('sep', ' ').join(str(a) for a in args) + kw.get('end', '\\n'))\nwrite_array = lambda arr, **kw: stdout.write(kw.get('sep', ' ').join(str(a) for a in arr) + kw.get('end', '\\n'))\nread_int, read_int_array = lambda: int(read()), lambda: [int(p) for p in read_array()]\nread_float, read_float_array = lambda: float(read()), lambda: [float(p) for p in read_array()]\n\n\nn, k = read_int_array()\nheap = []\nbusy = 0\ntime = 0\nfinish = [0] * n\nfor i in range(n):\n    if busy == k:\n        time = heappop(heap)\n        busy -= 1\n    else:\n        time = 0\n    start, minutes = read_int_array()\n    if start > time:\n        time = start\n    heappush(heap, time + minutes)\n    finish[i] = time + minutes\n    busy += 1\n\nwrite_array(finish, sep='\\n')", "import heapq\n\n\ndef __main__(n, k):\n    servers = [0] * k\n    times = []\n\n    for i in range(n):\n        s, m = list(map(int, input().split()))\n        time = max(servers[0], s)\n        heapq.heapreplace(servers, time + m)\n        times.append(time + m)\n\n    print('\\n'.join(str(time) for time in times))\n\ndef __starting_point():\n    n, k = list(map(int, input().split()))\n    __main__(n, k)\n__starting_point()", "import heapq\nn, k = map(int, input().split())\npq = [0] * k\nres = [None] * n\nfor i in range(n):\n    s, m = map(int, input().split())\n    time = max(pq[0], s) + m\n    heapq.heapreplace(pq, time)\n    res[i] = time\nprint(\"\\n\".join(map(str, res))) ", "\nfrom sys import  stdin, stdout\nlines = stdin.readlines()\n\n\nfrom random import random\nfrom time import time\n\"\"\"\nn = 500000 \nk = 33279\nlines = [(   str(n)+' '+str(k)  )]\nfor i in range(n):\n    x = int(random()*100000)\n    y = 1000000000 + int(random()*10000)\n    lines.append(  str(x)+' '+str(y)  )\n\"\"\"    \nt1 = time()\n\nn, k = int(lines[0].split()[0]), int(lines[0].split()[1])\na = [int(x.split()[0]) for x in lines[1:]]\nb = [int(x.split()[1]) for x in lines[1:]]\n\nimport heapq\nheap = []\n            \n#heap = PriorityQueueSet()\nfree_servers = k\nanswers = []\n#global_minimum = 0\nheap = [a[i]+b[i] for i in range(k)]\nanswers = heap[:]\nheapq.heapify(heap)\n\"\"\"\nanswers = []\nfor i in range(k):\n    will_load = int(a[i]+b[i])\n    heap.push(will_load, str(will_load))\n    answers.append(will_load)\n\"\"\"\nfor i in range(k,n):\n    \n    cur_min = int(heapq.heappop(heap))\n    will_load = int(max(cur_min, a[i])+b[i])  #11111111\n    heapq.heappush(heap, will_load)\n    #print(will_load)\n    answers.append(will_load)\n\nt2 = time()\n#print(t2-t1)\n\nstdout.write('\\n'.join([str(x) for x in answers])) ", "import heapq\nf = lambda: map(int, input().split())\nn, k = f()\np = [0] * k\nq = [0] * n\nfor i in range(n):\n    s, m = f()\n    q[i] = max(p[0], s) + m\n    heapq.heapreplace(p, q[i])\nprint('\\n'.join(map(str, q)))", "import heapq\nf = lambda: list(map(int, input().split()))\nn, k = f()\np = [0] * k\nq = [0] * n\nfor i in range(n):\n    s, m = f()\n    q[i] = max(p[0], s) + m\n    heapq.heapreplace(p, q[i])\nprint('\\n'.join(map(str, q)))\n", "import heapq\nf = lambda: list(map(int, input().split()))\nn, k = f()\np = [0] * k\nq = [0] * n\nfor i in range(n):\n    s, m = f()\n    q[i] = max(p[0], s) + m\n    heapq.heapreplace(p, q[i])\nprint('\\n'.join(map(str, q)))\n", "import heapq\nf = lambda: list(map(int, input().split()))\nn, k = f()\np = [0] * k\nq = [0] * n\nfor i in range(n):\n    s, m = f()\n    q[i] = max(p[0], s) + m\n    heapq.heapreplace(p, q[i])\nprint('\\n'.join(map(str, q)))\n", "import heapq\nf = lambda: list(map(int, input().split()))\nn, k = f()\np = [0] * k\nq = [0] * n\nfor i in range(n):\n    s, m = f()\n    q[i] = max(p[0], s) + m\n    heapq.heapreplace(p, q[i])\nprint('\\n'.join(map(str, q)))\n", "import heapq\nf = lambda: list(map(int, input().split()))\nn, k = f()\np = [0] * k\nq = [0] * n\nfor i in range(n):\n    s, m = f()\n    q[i] = max(p[0], s) + m\n    heapq.heapreplace(p, q[i])\nprint('\\n'.join(map(str, q)))\n", "import heapq\nf = lambda: list(map(int, input().split()))\nn, k = f()\np = [0] * k\nq = [0] * n\nfor i in range(n):\n    s, m = f()\n    q[i] = max(p[0], s) + m\n    heapq.heapreplace(p, q[i])\nprint('\\n'.join(map(str, q)))\n", "import heapq\nf = lambda: list(map(int, input().split()))\nn, k = f()\np = [0] * k\nq = [0] * n\nfor i in range(n):\n    s, m = f()\n    q[i] = max(p[0], s) + m\n    heapq.heapreplace(p, q[i])\nprint('\\n'.join(map(str, q)))\n"]