["for _ in range(int(input())):\n    n, x = list(map(int, input().split()))\n    A = []\n    for _1 in range(n):\n       d, h = list(map(int, input().split()))\n       A.append([d, h])\n    A.sort(reverse=True)\n    if A[0][0] >= x:\n        print(1)\n    else:\n        x -= A[0][0]\n        mz = 0\n        for d, h in A:\n            mz = max(mz, d - h)\n        if mz:\n            print((x + mz - 1) // mz + 1)\n        else:\n            print(-1)\n", "T = int(input())\nfor _ in range(T):\n    n, x = list(map(int, input().split()))\n    damage = []\n    maxi = []\n    for i in range(n):\n        d, h = list(map(int, input().split()))\n        maxi.append(d)\n        damage.append(d-h)\n    damage.sort(reverse=True)\n    maxi.sort(reverse=True)\n\n    if damage[0] <= 0 and maxi[0] < x:\n        print(-1)\n    else:\n        if maxi[0] >= x:\n            print(1)\n        else:\n            print((x-maxi[0]-1)//damage[0]+2)\n", "for _ in range(int(input())):\n    n, x = list(map(int, input().split()))\n    md = me = 0\n    for _ in range(n):\n        d, h = list(map(int, input().split()))\n        md = max(md, d)\n        me = max(me, d - h)\n    if md >= x:\n        print(1)\n    elif me:\n        print((x - md - 1) // me + 2)\n    else:\n        print('-1')\n", "import math\n\nT = int(input())\nfor t in range(T):\n    n, x = map(int, input().split())\n    gs = [tuple(map(int, input().split())) for _ in range(n)]\n    max_d = max(g[0] for g in gs)\n    max_delta = max(g[0] - g[1] for g in gs)\n    if x <= max_d:\n        c = 1\n    elif max_delta <= 0:\n        c = -1\n    else:\n        c = math.ceil((x - max_d)/max_delta) + 1\n    print(c)", "from math import ceil\nt = int(input())\nans = []\nfor _ in range(t):\n    n, x = map(int, input().split())\n\n    a = -1\n    b = 0\n\n    for i in range(n):\n        d, h = map(int, input().split())\n        a = max(a, d-h)\n        b = max(b, d)\n    if (x<=b):\n        ans.append(1)\n        continue\n    elif (a<=0):\n        ans.append(-1)\n    else:\n        x = x-b\n        ans.append(ceil(x/a)+1)\nfor el in ans:\n    print(el)", "for _ in range(int(input())):\n    n, x = list(map(int, input().split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    max1, max2 = -float('inf'), -float('inf')\n    for q in a:\n        max1 = max(q[0], max1)\n        max2 = max(max2, q[0]-q[1])\n    if max1 >= x:\n        print(1)\n    elif max2 <= 0:\n        print(-1)\n    else:\n        print((x-max1+max2-1)//max2+1)\n", "t = int(input())\nfor i in range(t):\n    n, x = (int(i) for i in input().split())\n    mr = 0\n    md = 0\n    for j in range(n):\n        d, h = (int(i) for i in input().split())\n        md = max(d, md)\n        mr = max(d - h, mr)\n    x -= md\n    if not mr and x > 0:\n        print(-1)\n    elif x <= 0:\n        print(1)\n    else:\n        f = x // mr + 1\n        if x % mr:\n            f += 1\n        print(f)\n", "t = int(input())\n\nfor _ in range(t):\n    n, x = list(map(int, input().split()))\n\n    a = b = -1100100100100\n    for i in range(n):\n        d, h = list(map(int, input().split()))\n\n        a = max(a, d - h)\n        b = max(b, d)\n\n    if x <= b:\n        print(1)\n    elif a <= 0:\n        print(-1)\n    else:\n        x -= b\n        print((x + a - 1) // a + 1)\n", "T = int(input())\nfor i in range(0, T):\n    k, x = (int(i) for i in input().split())\n    best_diff = None\n    max_strike = None\n    for j in range(k):\n        strike, heads = (int(i) for i in input().split())\n        if max_strike is None or strike > max_strike:\n            max_strike = strike\n        if strike > heads and (best_diff is None or best_diff < strike - heads):\n            best_diff = strike - heads\n    x -= max_strike\n    if x <= 0:\n        print(1)\n    elif best_diff is None:\n        print(-1)\n    else:\n        print(1 + x // best_diff + int((x % best_diff) > 0))", "T = int(input())\nfor _ in range(T):\n    N, X = list(map(int, input().split()))\n    A = -1\n    B = -1\n    for i in range(N):\n        d, h = list(map(int, input().split()))\n        A = max(A, d - h)\n        B = max(B, d)\n    \n    if B >= X:\n        print(1)\n    elif A > 0:\n        print((X - B + A - 1) // A + 1)\n    else:\n        print(-1)\n", "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nfor testcases in range(T):\n    n,x = list(map(int,input().split()))\n    B=[tuple(map(int,input().split())) for i in range(n)]\n\n    B0=max(B,key=lambda x:x[0]-x[1])\n    dam=B0[0]-B0[1]\n    BMAX=max(B)[0]\n\n\n\n    if dam<=0 and x>BMAX:\n        print(-1)\n    elif BMAX>=x:\n        print(1)\n    else:\n        print(1+max(0,-((x-BMAX)//(-dam))))\n", "t = int(input())\n\nfor _ in [0]*t:\n    n, heads = list(map(int, input().split()))\n    attacks = [list(map(int, input().split())) for _ in range(n)]\n    max_damage = max(attacks)[0]\n    turn_damage = max(x-y for x, y in attacks)\n\n    if heads > max_damage and turn_damage <= 0:\n        print(-1)\n        continue\n    if heads <= max_damage:\n        print(1)\n        continue\n\n    x = heads-max_damage\n    print((x+turn_damage-1) // turn_damage + 1)\n", "t = int(input())\nfor i in range(t):\n\ta = input().split(' ')\n\tn = int(a[1])\n\tm = 0\n\teff = 0 \n\tfor j in range(int(a[0])):\n\t\tb = input().split(' ')\n\t\tm = max(m,int(b[0]))\n\t\teff = max(eff,int(b[0])-int(b[1]))\n\tn -= m\n\tif n > 0:\n\t\tif eff>0:\n\t\t\tprint((n-1)//eff+2)\n\t\telse:\n\t\t\tprint(-1)\n\telse: \n\t\tprint(1)", "from math import ceil\nfor t in range(int(input())):\n    a = []\n    n,x = list(map(int,input().split()))\n    for i in range(n):\n        a.append(list(map(int,input().split())))\n    max_di = a[0][0]\n    max_damage = a[0][0] - a[0][1]\n    for i in a:\n        if i[0] > max_di:\n            max_di = i[0]\n        if i[0]-i[1] > max_damage:\n            max_damage = i[0]-i[1]\n    x -= max_di\n    if x > 0:\n        if max_damage <= 0:\n            print(-1)\n        else:\n            print(ceil(x/max_damage)+1)\n    else:\n        print(1)\n\n\n\n\n\n        \n", "import sys\ninput = sys.stdin.readline\n \ndef getInt(): return int(input())\ndef getVars(): return list(map(int, input().split()))\ndef getList(): return list(map(int, input().split()))\ndef getStr(): return input().strip()\n## -------------------------------\n \ndef addDictList(d, key, val):\n    if key not in d: d[key] = []\n    d[key].append(val)\n \ndef addDictInt(d, key, val):\n    if key not in d: d[key] = 0\n    d[key] = val\n    \ndef addDictCount(d, key):\n    if key not in d: d[key] = 0\n    d[key] += 1\n \ndef addDictSum(d, key, val):\n    if key not in d: d[key] = 0\n    d[key] += val\n \n## -------------------------------\n \nt = getInt()\nfor _ in range(t):\n    n, x = getVars()\n    razn = 0\n    maxD = 0\n    for i in range(n):\n        d, h = getVars()\n        razn = max(razn, d-h)\n        maxD = max(d, maxD)\n    if razn == 0:\n        if maxD < x:\n            print(-1)\n        else:\n            print(1)        \n    else:\n        x = max(x-maxD, 0)\n        if x == 0:\n            print(1)\n        else:\n            res = x // razn\n            if x == res*razn:\n                print(res+1)\n            else:\n                print(res+2)\n                \n", "from collections import defaultdict as DD\nfrom bisect import bisect_left as BL\nfrom bisect import bisect_right as BR\nfrom itertools import combinations as IC\nfrom itertools import permutations as IP\nfrom random import randint as RI\nimport sys\nMOD=pow(10,9)+7\n\ndef IN(f=0):\n    if f==0:\n        return ( [int(i) for i in sys.stdin.readline().split()] )\n    else:\n        return ( int(sys.stdin.readline()) )\n\ntc=IN(1)\nfor _ in range(tc):\n    n,x=IN()\n    a=[]\n    maxD=-1\n    for i in range(n):\n        f,y=IN()\n        maxD=max(maxD,f)\n        a.append(f-y)\n    i=0\n    a.sort(reverse=True)\n    x=x-maxD\n    if x<=0:\n        print(1)\n    else:\n        if a[0]<=0:\n            print(-1)\n        else:\n            r=x/a[0]\n            if int(r)!=r:\n                r = int(r)+1\n            print(int(r+1))\n        \n", "t=int(input())\nfor _ in range(t):\n    n,xx=list(map(int,input().split()))\n    #print(n,xx)\n    it=[]\n    for __ in range(n):\n        it.append(list(map(int,input().split())))\n    x=max(it,key=lambda a:a[0]-a[1])\n    r=x[0]-x[1]\n    \n    if r<=0:\n        if max(it)[0]>=xx:\n            print(1)\n        else:\n            print(-1)\n        continue\n    aa=max(it)[0]\n    xx=max(0,xx-aa)\n    \n    tot=(xx/r)\n    if tot%1!=0:\n        tot=int(tot)+1\n    else:\n        tot=int(tot)\n    print(tot+1)\n    \n", "def ii():\n  return int(input())\ndef ss():\n  return [x for x in input()]\ndef si():\n  return [int(x) for x in input().split()]\ndef mi():\n  return map(int, input().split())\ndef r(s):\n  return s[0] - s[1]\nt = ii()\nfor i in range(t):\n  a, b = mi()\n  s = [si() for i in range(a)]\n  maxout = max(s, key = lambda x: x[0])[0]\n  maxin = max(s, key = lambda x: x[0] - x[1])\n  maxin = maxin[0] - maxin[1]\n  if b <= maxout:\n    print(1)\n  elif maxin <= 0:\n    print(-1)\n  else:\n    print((b - maxout - 1) // maxin + 2)", "import math\nt=int(input())\nfor _ in range(t):\n    n,inithead=list(map(int,input().split()))\n    dif=[]\n    desl=[]\n    for i in range(n):\n        des,hinc=list(map(int,input().split()))\n        dif+=[des-hinc]\n        desl+=[des]\n    maxdes=max(desl)\n    maxdif=max(dif)\n    if(maxdes<inithead and maxdif<=0):\n        print(-1)\n    else:\n        count=1\n        head=inithead-maxdes\n        if(head>0):\n            count+=math.ceil(head/maxdif)\n        print(count)\n        \n    \n         \n", "import math\nt=int(input())\nf=[]\nfor i in range(t):\n    n,x=map(int,input().split())\n    max1=0\n    max2=0\n    for i in range(n):\n        a,b=map(int,input().split())\n        max1=max(max1,a)\n        max2=max(max2,a-b)\n    if max1>=x:\n        f+=[1]\n    else:\n        if max2>0:\n            f+=[1+math.ceil((x-max1)/max2)]\n        else:\n            f+=[-1]\nfor i in f:\n    print(i)", "'''input\n3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\n'''\nimport sys\nfrom collections import defaultdict as dd\nfrom itertools import  permutations as pp\nfrom itertools import combinations as cc\nfrom collections import Counter as ccd\nfrom random import randint as rd\nfrom bisect import bisect_left as bl\nfrom  heapq import heappush as hpush\nfrom heapq import heappop as hpop\nmod=10**9+7\n\ndef ri(flag=0):\n\tif flag==0:\n\t\treturn [int(i) for i in sys.stdin.readline().split()]\n\telse:\n\t\treturn int(sys.stdin.readline())\n\n\nfor _ in range(ri(1)):\n\tn, curr = ri()\n\ta = []\n\tfor i in range(n):\n\t\ta.append(ri())\n\ta.sort(key = lambda x: -x[0]+x[1])\n\n\they = a[0][0]-a[0][1]\n\ttake=-1\n\tb=[]\n\tfor i,j in a:\n\t\ttake = max(take,i)\n\t\tb.append(i-j)\n\tb.sort(reverse =True)\n\tans =0\n\tcurr = curr -take\n\tif curr<=0:\n\t\tprint(1)\n\telse:\n\t\tif b[0]<=0:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\they = curr//b[0]\n\t\t\tif curr%b[0] ==0:\n\t\t\t\tprint(hey+1)\n\t\t\telse:\n\t\t\t\tprint(hey+2)\n\n\t# if curr<= a[0][0]:\n\t# \tprint(1)\n\t# \tcontinue\n\t# if hey<=0:\n\t# \tprint(-1)\n\t# else:\n\n\n\t# \tnow = curr//hey\n\t# \tif now==0:\n\t# \t\tprint(1)\n\t# \t\tcontinue\n\t# \tnow -=1\n\t# \trem = curr - now*hey\n\t# \tans =now\n\t# \t#print(now,rem)\n\t# \twhile (rem>0):\n\t# \t\trem -= a[0][0]\n\t# \t\tans +=1\n\t# \t\tif rem<=0:\n\t# \t\t\tbreak\n\t# \t\trem += a[0][1]\n\t# \tprint(ans)\n", "T = int(input())\n\nwhile T > 0:\n    T -= 1\n    n, head = map(int, input().split())\n    \n    possible = False\n    eff = 0\n    maxDmg = 0\n    for i in range(n):\n        kill, respawn =  map(int, input().split())\n        if kill > respawn:\n            possible = True\n        \n        eff = max(eff, kill - respawn)\n        maxDmg = max(maxDmg, kill)\n    \n    if maxDmg >= head:\n        print(1)\n    elif not possible:\n        print(-1)\n    else:\n        print((head - maxDmg) // eff + (1 if (head - maxDmg) % eff else 0) + 1)", "from bisect import bisect_left as bl\nfrom collections import defaultdict as dd\n\n\nfor _ in range(int(input())):\n\tn, x = [int(i) for i in input().split()]\n\tl = []\n\tf = dd(int)\n\tfor j in range(n):\n\t\td, h = [int(i) for i in input().split()]\n\t\tl.append(d - h)\n\t\tf[d] = 1\n\t#print(n, x)\n\tl.sort(reverse = 1)\n\t#print(l)\n\tans = 1\n\tx -= max(f.keys())\n\tif x <= 0:\n\t\tprint(ans)\n\telse:\n\t\tif l[0] <= 0:\n\t\t\tans = -1\n\t\telse:\n\t\t\tans = x // l[0]\n\t\t\tif (x % l[0]) == 0:\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tans += 2\n\t\tprint(ans)", "t = int(input())\nfor _ in range(t):\n    n, x = list(map(int, input().split()))\n    b = [tuple(map(int, input().split())) for i in range(n)]\n    shot_gun = b[0]\n    uzi = b[0]\n    for blow in b:\n        if blow[0] > shot_gun[0]:\n            shot_gun = blow\n        if blow[0] - blow[1] > uzi[0] - uzi[1]:\n            uzi = blow\n    ans = None\n    if shot_gun[0] >= x:\n        ans = 1\n    elif uzi[0] <= uzi[1]:\n        ans = -1\n    else:\n        ans = 1 + (x-shot_gun[0]+uzi[0]-uzi[1]-1) // (uzi[0]-uzi[1])\n    print (ans)\n"]