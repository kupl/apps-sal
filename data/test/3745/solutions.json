["# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/17/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\ndef solve(N, M, edges):\n    if M == N*(N-1)//2:\n        return 'a' * N\n    \n    g = collections.defaultdict(list)\n    for u, v in edges:\n        g[u].append(v)\n        g[v].append(u)\n\n    s = ['', 'a', 'b', 'c']\n    for u in range(1, N+1):\n        mark = [3 for _ in range(N + 1)]\n        mark[0] = 0\n        mark[u] = 1\n        for v in g[u]:\n            mark[v] = 1\n    \n        for u in range(1, N+1):\n            if mark[u] == 3:\n                for v in g[u]:\n                    if mark[v] == 1:\n                        mark[v] = 2\n        \n        a, b, c = mark.count(1), mark.count(2), mark.count(3)\n        if a*(a-1)//2 + b*(b-1)//2 + c*(c-1)//2 + a*b + b*c != M:\n            continue\n        \n        if any([abs(mark[u] - mark[v]) > 1 for u, v in edges]):\n            continue\n            \n        return ''.join([s[mark[v]] for v in range(1, N+1)])\n    \n    return None\n    \n\nN, M = map(int, input().split())\nedges = []\nfor i in range(M):\n    u, v = map(int, input().split())\n    edges.append((u, v))\n    \ns = solve(N, M, edges)\nif s:\n    print('Yes')\n    print(s)\nelse:\n    print('No')", "n,m = list(map(int,input().split()))\nconnectionList = []\nfor _ in range(n):\n    connectionList.append([0] * n)\nfor _ in range(m):\n    p,q = list(map(int,input().split()))\n    connectionList[p-1][q-1] = 1\n    connectionList[q-1][p-1] = 1\nisDone = False\nrefList = []\nans = [\"N\"] * n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        if connectionList[i][j] == 0:\n            isDone = True\n            refList = (i,j)\n            ans[i] = \"a\"\n            ans[j] = \"c\"\n            break\n    if isDone:\n        break\nif not isDone:\n    print(\"Yes\")\n    print(\"a\" * n)\nelse:\n    isPossible = True\n    for i in range(n):\n        if i in refList:\n            continue\n        else:\n            if connectionList[i][refList[0]] == 1 and connectionList[i][refList[1]] == 1:\n                ans[i] = \"b\"\n            elif connectionList[i][refList[0]] == 0 and connectionList[i][refList[1]] == 1:\n                ans[i] = \"c\"\n            elif connectionList[i][refList[0]] == 1 and connectionList[i][refList[1]] == 0:\n                ans[i] = \"a\"\n            else:\n                isPossible = False\n                break\n    if not isPossible:\n        print(\"No\")\n    else:\n        isValid = True\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if connectionList[i][j] == 0 and ((ans[i] == \"a\" and ans[j] == \"c\") or (ans[j] == \"a\" and ans[i] == \"c\")):\n                    pass\n                elif (not connectionList[i][j] == 0) and (not ((ans[i] == \"a\" and ans[j] == \"c\") or (ans[j] == \"a\" and ans[i] == \"c\"))):\n                    pass\n                else:\n                    isValid = False\n        if isValid:\n            print(\"Yes\")\n            print(''.join(ans))\n        else:\n            print(\"No\")\n\n\n"]