["a, b, c = list(map(int, input().split()))\nx1, y1, x2, y2 = list(map(int, input().split()))\nans0 = round(abs(x1 - x2) + abs(y1 - y2), 9)\nif a * b ==0:\n    print(ans0)\n    raise SystemExit\nx11 = (-c - b * y1) / a\ny12 = (-c - a * x1) / b\nx21 = (-c - b * y2) / a\ny22 = (-c - a * x2) / b\n\nans1 = abs(x1 - x11) + abs(x21 - x2) + ((y2 - y1)**2 + (x21 - x11)**2)**0.5\nans2 = abs(y1 - y12) + abs(x21 - x2) + ((y2 - y12)**2 + (x21 - x1)**2)**0.5\nans3 = abs(y1 - y12) + abs(y2 - y22) + ((x1 - x2)**2 + (y12 - y22)**2)**0.5\nans4 = abs(x1 - x11) + abs(y22 - y2) + ((x11 - x2)**2 + (y1 - y22)**2)**0.5\n\nans0 = min(ans0, ans1, ans2, ans3, ans4)\n\nprint(round(ans0, 10))\n", "a,b,c = list(map(int, input().split()))\nx1, y1, x2, y2 = list(map(int, input().split()))\nif a == 0 or b == 0:\n    print(abs(x1 -x2) + abs(y1 - y2))\nelse:\n    a = a / (-b)\n    c = c / (-b)\n    if (x1 <= x2 and y1 <= y2) or (x1 >= x2 and y1 >= y2):\n        y1 = -y1\n        y2 = -y2\n        a = -a\n        c = -c\n        x1, x2, y1, y2 = min(x1, x2), max(x1, x2), max(y1, y2), min(y1, y2)\n    ax = a\n    bx = c\n    ay = 1 / a\n    by = - c / a\n    ans = abs(x1 -x2) + abs(y1 - y2)\n    Ax = ay * y1 + by\n    Ay = ax * x1 + bx\n    Bx = ay * y2 + by\n    By = ax * x2 + bx\n    ans = min(ans, abs(x1 - Ax) + abs(x2 - Bx) + ((Bx - Ax) ** 2 + (y1 - y2) ** 2)**0.5)\n    ans = min(ans, abs(y1 - Ay) + abs(y2 - By) + ((By - Ay) ** 2 + (x1 - x2) ** 2)**0.5)\n    ans = min(ans, abs(x1 - Ax) + abs(y2 - By) + ((x2 - Ax) ** 2 + (y1 - By) ** 2)**0.5)\n    ans = min(ans, abs(x2 - Bx) + abs(Ay - y1) + ((Bx - x1) ** 2 + (Ay - y2) ** 2)**0.5)\n    print(ans)", "def left_is_not(fet, tip):\n    s = 0\n    fet += 1\n    if tip == 0:\n        fet = tip + 10\n    return tip\n\na, b, c = list(map(int, input().split()))\nx1, y1, x2, y2 = list(map(int, input().split()))\nl = []\nl.append(abs(y1-y2) + abs(x1-x2))\n\nif a == 0 or b == 0:\n    print(abs(y1-y2) + abs(x1-x2))\nelse:\n    xA = (-b*y1 - c)/a\n    xB = (-b*y2 - c)/a\n    yA = (-a*x1 - c)/b\n    yB = (-a*x2 - c)/b\n    \n    l.append(((xA-xB)**2 + (y1-y2)**2)**0.5 + abs(x1-xA) + abs(x2-xB))\n    \n    l.append(((x1-x2)**2 + (yA-yB)**2)**0.5 + abs(y1-yA) + abs(y2-yB))\n    \n    l.append(((x1-xB)**2 + (yA-y2)**2)**0.5 + abs(yA-y1) + abs(x2-xB))\n    \n    l.append(((xA-x2)**2 + (y1-yB)**2)**0.5 + abs(x1-xA) + abs(y2-yB))\n    #print(l[-1])\n    #print(l)\n    print(min(l))\n    \n    '''\n    1 1 -3\n    0 3 3 0\n    \n    3 1 -9\n    0 3 3 -1\n    '''\n", "import math\na,b,c=list(map(int,input().split()))\nx1,y1,x2,y2=list(map(int,input().split()))\ns=abs(x1-x2)+abs(y1-y2)\nif a!=0:\n    xk1=-1*(b*y1+c)/a\n    xk2=-1*(b*y2+c)/a\nelse:\n    xk1=10**18\n    xk2=10**18\nif b!=0:\n    yk1=-1*(a*x1+c)/b\n    yk2=-1*(a*x2+c)/b\nelse:\n    yk1=10**18\n    yk2=10**18\nlx1=abs(y1-yk1)\nlx2=abs(y2-yk2)\nly1=abs(x1-xk1)\nly2=abs(x2-xk2)\ns1=math.sqrt((x1-x2)**2+(yk1-yk2)**2)\ns2=math.sqrt((x1-xk1)**2+(yk1-y1)**2)\ns3=math.sqrt((x1-xk2)**2+(yk1-y2)**2)\ns4=math.sqrt((xk1-x2)**2+(y1-yk2)**2)\ns5=math.sqrt((x2-xk2)**2+(y2-yk2)**2)\ns6=math.sqrt((xk1-xk2)**2+(y1-y2)**2)\ns=min(s,lx1+lx2+s1,lx1+s3+ly2,ly1+s4+lx2,ly1+s6+ly2)\nprint(s)\n", "a, b, c = map(int, input().split())\nx1, y1, x2, y2 = map(int, input().split())\np = []\nif b != 0:\n    p.append((x1, -(a * x1 + c) / b))\n    p.append((x2, -(a * x2 + c) / b))\nif a != 0:\n    p.append((-(b * y1 + c) / a, y1))\n    p.append((-(b * y2 + c) / a, y2))\np2 = []\nfor x, y in p:\n    if min(x1, x2) - 0.0001 < x < max(x1, x2) + 0.0001 and min(y1, y2) - 0.0001 < y < max(y1, y2) + 0.0001:\n        p2.append((x, y))\np3 = []\nfor x0, y0 in p2:\n    for x, y in p3:\n        if max(abs(x - x0), abs(y - y0)) < 0.0001:\n            break\n    else:\n        p3.append((x0, y0))\nif len(p3) < 2:\n    print(abs(x1 - x2) + abs(y1 - y2))\nelse:\n    r0 = abs(x1 - x2) + abs(y1 - y2)\n    (ax, ay), (bx, by) = p3\n    d = ((ax - bx) ** 2 + (ay - by) ** 2) ** 0.5\n    r1 = abs(x1 - ax) + abs(y1 - ay) + d + abs(bx - x2) + abs(by - y2)\n    r2 = abs(x1 - bx) + abs(y1 - by) + d + abs(ax - x2) + abs(ay - y2)\n    print(min(r0, r1, r2))", "import math\n\na,b,c = [float(i) for i in input().split()]\nxy = [float(i) for i in input().split()]\nA =[xy[0],xy[1]]\nB =[xy[2],xy[3]]\n\ndistances = []\n\ndef get_distance(K, M):\n    return math.sqrt((K[0]-M[0])*(K[0]-M[0]) + (K[1]- M[1])*(K[1] - M[1]))\n\ndef get_point_h(K):\n    x = (-b*K[1]-c) / a\n    point = (x, K[1])\n    distance = get_distance(K, point)\n    return point, distance\n    \ndef get_point_v(K):\n    y = (-a*K[0]-c) / b\n    point = (K[0], y)\n    distance = get_distance(K, point)\n    return point, distance\n\n\nmanhatten_distance = abs(A[0] - B[0]) + abs(A[1] - B[1])\n#print(manhatten_distance)\n\ndistances.append(manhatten_distance)\n\nif a != 0:\n    p1, d1 = get_point_h(A)\n    p3, d3 = get_point_h(B)\n    distances.append(get_distance(p1, p3) + d1 + d3)\n\nif b != 0:\n    p2, d2 = get_point_v(A)\n    p4, d4 = get_point_v(B)\n    distances.append(get_distance(p2, p4) + d2 + d4)\n\nif a != 0 and b != 0:\n    distances.append(get_distance(p2, p3) + d2 + d3)\n    distances.append(get_distance(p1, p4) + d1 + d4)\n\n#print(distances)\nprint(min(distances))\n", "from math import sqrt\n\ndef sqr(a):\n        return a * a\n\na, b, c = [float(i) for i in input().split()]\nx1, y1, x2, y2 = [float(i) for i in input().split()]\n\nif a == 0 or b == 0:\n        print(abs(x1 - x2) + abs(y1 - y2))\n        return\n\nc1_y = -(a * x1 + c) / b\nc2_y = -(a * x2 + c) / b\nc1_x = -(b * y1 + c) / a\nc2_x = -(b * y2 + c) / a\n\nans = abs(x1 - x2) + abs(y1 - y2)\n\nnow = abs(c1_y - y1) + sqrt(sqr(x1 - c2_x) + sqr(c1_y - y2)) + abs(c2_x - x2);\nans = min(ans, now);\n\nnow = abs(c1_y - y1) + sqrt(sqr(x1 - x2) + sqr(c1_y - c2_y)) + abs(c2_y - y2);\nans = min(ans, now);\n\nnow = abs(c1_x - x1) + sqrt(sqr(c1_x - c2_x) + sqr(y1 - y2)) + abs(c2_x - x2);\nans = min(ans, now);\n\nnow = abs(c1_x - x1) + sqrt(sqr(c1_x - x2) + sqr(y1 - c2_y)) + abs(c2_y - y2);\nans = min(ans, now);\n\nprint(\"%.30f\" % ans)\n", "import math\ns = input().split()\na = int(s[0])\nb = int(s[1])\nc = int(s[2])\ns = input().split()\nx1 = int(s[0])\ny1 = int(s[1])\nx2 = int(s[2])\ny2 = int(s[3])\n\nif (x1 == x2):\n    print(abs(y1 - y2))\nelif (y1 == y2):\n    print(abs(x1 - x2))\nelse:\n    if (a != 0 and b != 0):\n        var1 = abs(x1 - x2) + abs(y1 - y2)\n    \n        var2 = 0\n        x = x1\n        y = (a * x + c) / b * (-1)\n        var2 += abs(y1 - y)\n        x3 = x2\n        y3 = (a * x3 + c) / b * (-1)\n        var2 += math.sqrt((x - x3) ** 2 + (y - y3) ** 2)\n        var2 += abs(y3 - y2)\n    \n        var3 = 0\n        x = x1\n        y = (a * x + c) / b * (-1)\n        var3 += abs(y1 - y)\n        y3 = y2\n        x3 = (b * y3 + c) / a * (-1)\n        var3 += math.sqrt((x - x3) ** 2 + (y - y3) ** 2)\n        var3 += abs(x3 - x2)\n    \n        var4 = 0\n        y = y1\n        x = (b * y + c) / a * (-1)\n        var4 += abs(x1 - x)\n        y3 = y2\n        x3 = (b * y3 + c) / a * (-1)\n        var4 += math.sqrt((x - x3) ** 2 + (y - y3) ** 2)\n        var4 += abs(x3 - x2)\n    \n        var5 = 0\n        y = y1\n        x = (b * y + c) / a * (-1)\n        var5 += abs(x1 - x)\n        x3 = x2\n        y3 = (a * x3 + c) / b * (-1)\n        var5 += math.sqrt((x - x3) ** 2 + (y - y3) ** 2)\n        var5 += abs(y3 - y2)\n    \n        print(min(var1, var2, var3, var4, var5))\n    else:\n        print(abs(x1 - x2) + abs(y1 - y2))", "from math import *\n\n\na, b, c = list(map(int, input().split()))\nx1, y1, x2, y2 = list(map(int, input().split()))\nm = -1\nif a == 0 or b == 0:\n    print(abs(x2 - x1) + abs(y2 - y1))\nelse:\n    tr = [[[x1, ((a * x1 + c) / -b)], [((b * y1 + c) / -a), y1]],\n          [[x2, ((a * x2 + c) / -b)], [((b * y2 + c) / -a), y2]]]\n\n    for i in range(2):\n        for j in range(2):\n            sqr = sqrt((tr[0][i][0] - tr[1][j][0])*(tr[0][i][0] - tr[1][j][0]) + (tr[0][i][1] - tr[1][j][1])*(tr[0][i][1] - tr[1][j][1]))\n            if m == -1:\n                m = abs(x1 - tr[0][i][0]) + abs(y1 - tr[0][i][1]) + abs(x2 - tr[1][j][0]) + abs(y2 - tr[1][j][1]) + sqr\n            else:\n                m = min(abs(x1 - tr[0][i][0]) + abs(y1 - tr[0][i][1]) + abs(x2 - tr[1][j][0]) + abs(y2 - tr[1][j][1]) + sqr, m)\n    print(min(m, abs(x2 - x1) + abs(y2 - y1)))\n", "import math\na, b, c = [int(i) for i in input().split()]\nx1, y1, x2, y2 = [int(i) for i in input().split()]\nl1 = abs(x1-x2) + abs(y1-y2)\nif(a == 0 or b == 0):\n    print(l1)\n    return\nxa = -(b*y1+c)/a\nya = y1\nxb = x1\nyb = -(a*x1+c)/b\nxc = -(b*y2+c)/a\nyc = y2\nxd = x2\nyd = -(a*x2+c)/b\nl2 = abs(x1-xa) + math.sqrt((xa-xc)**2 + (ya-yc)**2)+abs(xc-x2)\nl3 = abs(x1-xa) + math.sqrt((xa-xd)**2 + (ya-yd)**2)+abs(yd-y2)\nl4 = abs(y1-yb) + math.sqrt((xb-xc)**2 + (yb-yc)**2) + abs(xc-x2)\nl5 = abs(y1-yb) + math.sqrt((xb-xd)**2 + (yb-yd)**2) + abs(yd-y2)\nprint(min(l1, l2, l3, l4, l5))", "import math\n\ndef lll(a, b):\n  return math.sqrt((b[0] - a[0])**2 + (b[1] - a[1])**2)\ndef III(a, b):\n  return abs(b[0] - a[0]) + abs(b[1] - a[1])\n\na, b, c = map(int, input().split())\nx1, y1, x2, y2 = map(int, input().split())\n\ng = [[]] * 8\nfor i in range(8):\n  g[i] = [float('inf')] * 8\n\np = [\n  (x1, y1),\n  (x1, y2),\n  (x2, y2),\n  (x2, y1),\n]\n\nl = []\nif a != 0 and b != 0:\n  l = [\n    (x1, (-a*x1 - c) / b),\n    ((-b*y1 - c) / a, y1),\n    (x2, (-a*x2 - c) / b),\n    ((-b*y2 - c) / a, y2),\n  ]\nelse:\n  l = [\n    (x1, y1),\n    (x1, y1),\n    (x1, y1),\n    (x1, y1),\n  ]\nfor i in range(4):\n  for j in range(4):\n    g[i][4 + j] = g[4 + j][i] = III(p[i], l[j])\n    if (i != j):\n      g[i][j] = g[j][i] = III(p[i], p[j])\n      g[4 + i][4 + j] = g[4 + j][4 + i] = lll(l[i], l[j])\n\nls = [float('inf')] * 8\nls[0] = 0\nqu = [0]\nwhile len(qu) > 0:\n  i = qu[0]\n  qu = qu[1:]\n  for j in range(8):\n    if ls[i] + g[i][j] < ls[j]:\n      ls[j] = ls[i] + g[i][j]\n      if not j in qu:\n        qu += [j]\nprint(ls[2]) ", "a,b,c=list(map(int,input().split()))\nx1,y1,x2,y2=list(map(int,input().split()))\nbRange=abs(y2-y1)+abs(x2-x1)\nif a==0 or b==0:\n    print(bRange)\nelse:\n    py1=(-b*y1-c)/a\n    py2=(-b*y2-c)/a\n    px1=(-a*x1-c)/b\n    px2=(-a*x2-c)/b\n    pRange1=((x2-py1)**2+(px2-y1)**2)**0.5+abs(y2-px2)+abs(py1-x1)\n    pRange2=((py2-py1)**2+(y2-y1)**2)**0.5+abs(py1-x1)+abs(x2-py2)\n    pRange3=((x2-x1)**2+(px2-px1)**2)**0.5+abs(px1-y1)+abs(y2-px2)\n    pRange4=((py2-x1)**2+(y2-px1)**2)**0.5+abs(px1-y1)+abs(x2-py2)\n    print(min(bRange,pRange1,pRange2,pRange3,pRange4))\n", "import math\n\ndef rst(A,B):\n    x1 = A[0]\n    y1 = A[1]\n    x2 = B[0]\n    y2 = B[1]\n    \n    return math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\na,b,c = list(map(float,input().split()))\nx1,y1,x2,y2 = list(map(float,input().split()))\n\nl = []\n\nif a == 0 or b == 0:\n    print(abs(x2-x1)+abs(y1-y2))\nelse:\n    st = (x1,y1)\n    fn = (x2,y2)\n    \n    xa = x1\n    ya = (-c - a*x1) / b\n    A = (xa,ya)\n    \n    xb = x2\n    yb = (-c - a*x2) / b\n    B = (xb,yb)\n    \n    xc = (-c - b*y1)/a\n    yc = y1\n    C = (xc,yc)\n    \n    xd = (-c - b*y2)/a\n    yd = y2\n    \n    D = (xd,yd)\n    \n    print(min(abs(x2-x1)+abs(y1-y2),rst(st,A) + rst(A,B) + rst(B,fn),rst(st,A) + rst(A,D) + rst(D,fn),rst(st,C) + rst(C,B) + rst(B,fn),rst(st,C) + rst(C,D) + rst(D,fn)))\n", "a, b, c = map(int, input().split())\nx1, y1, x2, y2 = map(int, input().split())\nif a != 0 and b != 0:\n    x1_ = ((-1) * (b * y1 + c)) / a\n    y1_ = ((-1) * (a * x1 + c)) / b\n    x2_ = ((-1) * (b * y2 + c)) / a\n    y2_ = ((-1) * (a * x2 + c)) / b\n    p1 = abs(x1 - x1_) + abs(y2 - y2_) + ((x1_ - x2) ** 2 + (y1 - y2_) ** 2) ** 0.5\n    p2 = abs(x1 - x1_) + abs(x2 - x2_) + ((x1_ - x2_) ** 2 + (y1 - y2) ** 2) ** 0.5\n    p3 = abs(y1 - y1_) + abs(y2 - y2_) + ((x1 - x2) ** 2 + (y1_ - y2_) ** 2) ** 0.5\n    p4 = abs(y1 - y1_) + abs(x2 - x2_) + ((x1 - x2_) ** 2 + (y1_ - y2) ** 2) ** 0.5\n    p5 = abs(y1 - y2) + abs(x2 - x1)\n    sp = [p1, p2, p3, p4, p5]\n    print(min(sp))\nelse:\n    print(abs(y1 - y2) + abs(x2 - x1))", "from math import sqrt\na, b, c = list(map(float, input().split()))\nx1, y1, x2, y2 = list(map(float, input().split()))\n\ndef main():\n    nonlocal a, b, c, x1, y1, x2, y2\n    if (b==0 or a==0):\n        return (abs(x1-x2)+abs(y1-y2))\n\n    AD, AC, DB, CB = False, False, False, False\n    y = lambda x0: -c/b -a/b*x0\n    x = lambda y0: -c/a -b/a*y0\n    r = lambda x1, y1, x2, y2 : sqrt((x1-x2)**2 + (y1-y2)**2)\n    yes = lambda x1, x, x2: (min(x1, x2) <= x and x <= max(x1, x2))\n\n    '''print(x(y1), x(y2), y(x1), y(x2))'''\n    if (yes(y1, y(x1), y2) and yes(y1, y(x2), y2)):\n        '''print(1)'''\n        e = abs(y(x1) - y1)\n        f = abs(y(x2) - y2)\n        g = r(x1, y(x1), x2, y(x2))\n        '''print(e, f, g)'''\n        return (e+f+g)\n    \n    if (yes(y1, y(x1), y2) and yes(x1, x(y2), x2)):\n        '''print(2)'''\n        e = abs(y(x1) - y1)\n        f = abs(x(y2) - x2)\n        g = r(x1, y(x1), x(y2), y2)\n        '''print(e, f, g)'''\n        return (e+f+g)\n        \n    if (yes(x1, x(y1), x2) and yes(x1, x(y2), x2)):\n        '''print(3)'''\n        e = abs(x(y1) - x1)\n        f = abs(x(y2) - x2)\n        g = r(x(y1), y1, x(y2), y2)\n        '''print(e, f, g)'''\n        return (e+f+g)\n\n    if (yes(x1, x(y1), x2) and yes(y1, y(x2), y2)):\n        '''print(4)'''\n        e = abs(x(y1) - x1)\n        f = abs(y(x2) - y2)\n        g = r(x(y1), y1, x2, y(x2))\n        '''print(e, f, g)'''\n        return (e+f+g)\n\n    '''print(\"none returned!\")'''\n    return (abs(x1-x2)+abs(y1-y2))\n\nans = main()\nstraight = abs(x1-x2) + abs(y1-y2)\nprint(min(ans, straight))\n", "#!/usr/bin/env python3\n\nfrom fractions import Fraction\nfrom math import sqrt\n\ndef gety(a, b, c, x):\n    return -Fraction(a * x + c, b)\n\ndef getx(a, b, c, y):\n    return -Fraction(b * y + c, a)\n\ndef ds(x1, y1, x2, y2):\n    return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\na, b, c = list(map(int, input().split()))\nx1, y1, x2, y2 = list(map(int, input().split()))\n\nsilly_dist = abs(x1 - x2) + abs(y1 - y2)\nif a == 0 or b == 0:\n    print(silly_dist)\n    return\n\ndq = silly_dist\n\nmx = x1\nmy = gety(a, b, c, mx)\nny = y1\nnx = getx(a, b, c, ny)\n\nkx = x2\nky = gety(a, b, c, kx)\nty = y2\ntx = getx(a, b, c, ty)\n\ndq1 = ds(mx, my, kx, ky) + ds(mx, my, x1, y1) + ds(kx, ky, x2, y2)\ndq2 = ds(nx, ny, kx, ky) + ds(nx, ny, x1, y1) + ds(kx, ky, x2, y2)\ndq3 = ds(mx, my, tx, ty) + ds(mx, my, x1, y1) + ds(tx, ty, x2, y2)\ndq4 = ds(nx, ny, tx, ty) + ds(nx, ny, x1, y1) + ds(tx, ty, x2, y2)\n\n#print([dq, dq1, dq2, dq3, dq4])\ndqmin = min([dq, dq1, dq2, dq3, dq4])\nprint(dqmin)\n", "def dst1(x1, x2, y1, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n\ndef dst2(x1, x2, y1, y2):\n    return ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n\ndef getx(y):\n    return (-b*y-c)/a\n\ndef gety(x):\n    return (-a*x-c)/b\n\na, b, c = map(int, input().split())\nx1, y1, x2, y2 = map(int, input().split())\n\ndef sign(a):\n    if a > 0:\n        return 1\n    elif a == 0:\n        return 0\n    else:\n        return -1\n    \nif a == 0 or b == 0:\n    print(dst1(x1, x2, y1, y2))\nelse:\n    s1 = dst1(x1, x2, y1, y2)\n    \n    \n    p1x = x1\n    p1y = gety(p1x)\n    p3y = y1\n    p3x = getx(p3y)\n    \n    p2x = x2\n    p2y = gety(p2x)\n    p4y = y2\n    p4x = getx(p4y)\n    \n    \n    \n    s = 0\n    s += dst1(x1, p1x, y1, p1y)\n    s += dst2(p1x, p2x, p1y, p2y)\n    s += dst1(p2x, x2, p2y, y2)\n    s2 = s\n    \n    s = 0\n    s += dst1(x1, p3x, y1, p3y)\n    s += dst2(p3x, p2x, p3y, p2y)\n    s += dst1(p2x, x2, p2y, y2)\n    s3 = s\n    \n    s = 0\n    s += dst1(x1, p1x, y1, p1y)\n    s += dst2(p1x, p4x, p1y, p4y)\n    s += dst1(p4x, x2, p4y, y2)\n    s4 = s\n    \n    s = 0\n    s += dst1(x1, p3x, y1, p3y)\n    s += dst2(p3x, p4x, p3y, p4y)\n    s += dst1(p4x, x2, p4y, y2)\n    s5 = s\n    \n    print(min(s1, s2, s3, s4, s5))", "from math import sqrt\n\na, b, c = list(map(int, input().split()))\nx1, y1, x2, y2 = list(map(int, input().split()))\nres1 = abs(x1 - x2) + abs(y1 - y2)\n\nres2 = 10 ** 10 + 7\nres3 = 10 ** 10 + 7\nres4 = 10 ** 10 + 7\nres5 = 10 ** 10 + 7\n\nif b != 0 and a != 0:\n    x = (-y1 * b - c) / a\n    y = (-x2 * a - c) / b\n    res2 = abs(x1 - x) + abs(y2 - y) + sqrt(abs(x - x2) ** 2 + abs(y1 - y) ** 2)\n\nif a != 0:\n    x = (-y1 * b - c) / a\n    xx = (-y2 * b - c) / a\n    res4 = abs(x1 - x) + abs(x2 - xx) + sqrt(abs(x - xx) ** 2 + abs(y1 - y2) ** 2)\n\nif b != 0:\n    y = (-x1 * a - c) / b\n    yy = (-x2 * a - c) / b\n    res5 = abs(y1 - y) + abs(y2 - yy) + sqrt(abs(y - yy) ** 2 + abs(x1 - x2) ** 2)\n\nif a != 0 and b != 0:\n    x = (-y2 * b - c) / a\n    y = (-x1 * a - c) / b\n    res3 = abs(y1 - y) + abs(x2 - x) + sqrt(abs(x1 - x) ** 2 + abs(y2 - y) ** 2)\n\nprint(min(res1, res2, res3, res4, res5))\n# print(res1, res2, res3, res4, res5)\n", "import math\na, b, c = list(map(int, input().split()))\nax, ay, bx, by = list(map(int, input().split()))\nif (a==0 or b==0):\n    print(abs(ax - bx) + abs(ay - by))\n    return\noy = -(a*ax+c)/b\nty = -(a*bx+c)/b\nox = -(b*ay+c)/a\ntx = -(b*by+c)/a\nans = abs(ax - bx) + abs(ay - by)\nans1 = abs(ay - oy) + abs(by - ty) + math.sqrt(abs(ax - bx)**2 + abs(oy - ty)**2)\nans2 = abs(ax - ox) + abs(bx - tx) + math.sqrt(abs(ay - by)**2 + abs(ox - tx)**2)\nans3 = abs(ax - ox) + abs(by - ty) + math.sqrt(abs(bx - ox)**2 + abs(ay - ty)**2)\nans4 = abs(ay - oy) + abs(bx - tx) + math.sqrt(abs(by - oy)**2 + abs(ax - tx)**2)\nprint(min(ans, ans1, ans2, ans3, ans4))\n", "from math import *\na, b, c = list(map(int, input().split()))\nx1, y1, x2, y2 = list(map(int, input().split()))\nd = abs(x1 - x2) + abs(y1 - y2)\nif a != 0 and b != 0:\n    dy1 = abs(x1 + (c + b * y1) / a)\n    dx1 = abs(y1 + (c + a * x1) / b)\n    yy1 = y1\n    xy1 = -(c + b * y1) / a\n    xx1 = x1\n    yx1 = -(c + a * x1) / b\n    dy2 = abs(x2 + (c + b * y2) / a)\n    dx2 = abs(y2 + (c + a * x2) / b)\n    yy2 = y2\n    xy2 = -(c + b * y2) / a\n    xx2 = x2\n    yx2 = -(c + a * x2) / b\n    d1 = dy1 + dy2 + sqrt((xy1 - xy2)**2 + (yy1 - yy2)**2)\n    d2 = dx1 + dx2 + sqrt((xx1 - xx2)**2 + (yx1 - yx2)**2)\n    d3 = dy1 + dx2 + sqrt((xy1 - xx2)**2 + (yy1 - yx2)**2)\n    d4 = dx1 + dy2 + sqrt((xx1 - xy2)**2 + (yx1 - yy2)**2)\n    print(min(d, d1, d2, d3, d4))\nelse:\n    print(d)\n", "from math import *\n\ndef r(x1, y1, x2, y2):\n    return (abs(x1 - x2) ** 2 + abs(y1 - y2) ** 2) ** 0.5\n\na, b, c = map(int,input().split())\nx1, y1, x2, y2 = map(int,input().split())\nr1 = abs(x1 - x2) + abs(y1 - y2)\nif (a == 0 or b == 0):\n    print(r1)\nelse:\n    k = - a / b\n    b = - c / b\n    x01 = x1\n    y01 = k * x1 + b\n    x02 = (y2 - b) / k\n    y02 = y2\n    x03 = x2\n    y03 = k * x2 + b\n    x04 = (y1 - b) / k\n    y04 = y1\n    r2 = r(x1, y1, x01, y01) + r(x01, y01, x02, y02) + r(x02, y02, x2, y2)\n    r3 = r(x1, y1, x01, y01) + r(x01, y01, x03, y03) + r(x03, y03, x2, y2)\n\n    r12 = r(x1, y1, x04, y04) + r(x04, y04, x02, y02) + r(x02, y02, x2, y2)\n    r13 = r(x1, y1, x04, y04) + r(x04, y04, x03, y03) + r(x03, y03, x2, y2)\n\n    print(min(r1, r2, r3, r12, r13))", "from math import sqrt\n\n\ndef ro(x, y):\n    return sqrt((x[0] - y[0])**2 + (x[1] - y[1])**2)\n\n\na, b, c = list(map(int, input().split()))\nA = [0, 0]\nB = [0, 0]\nA[0], A[1], B[0], B[1] = list(map(int, input().split()))\nif a == 0 or b == 0:\n    #print(1)\n    print(float(abs(A[0] - B[0]) + abs(A[1] - B[1])))\nelif ((-a*A[0] - c) / b > max(A[1], B[1]) and (-a*B[0] - c) / b > max(A[1], B[1])) or ((-a*A[0] - c) / b < min(A[1], B[1]) and (-a*B[0] - c) / b < min(A[1], B[1])):\n    #print(2)\n    print(float(abs(A[0] - B[0]) + abs(A[1] - B[1])))\nelif ((B[0] - A[0]) / (B[1] - A[1])) * (-a / b) <= 0:\n    #print(3)\n    print(float(abs(A[0] - B[0]) + abs(A[1] - B[1])))\nelse:\n    ab = False\n    bb = False\n    cb = False\n    db = False\n    C = [0, 0]\n    D = [0, 0]\n    if min(A[1], B[1]) <= (-a*min(A[0], B[0]) - c) / b <= max(A[1], B[1]):\n        ab = True\n    if min(A[1], B[1]) <= (-a*max(A[0], B[0]) - c) / b <= max(A[1], B[1]):\n        cb = True\n    if min(A[0], B[0]) < (-b*max(A[1], B[1]) - c) / a < max(A[0], B[0]):\n        bb = True\n    if min(A[0], B[0]) < (-b*min(A[1], B[1]) - c) / a < max(A[0], B[0]):\n        db = True\n    k = -a/b\n    r = abs(A[0] - B[0]) + abs(A[1] - B[1])\n    if ab and bb:\n        C[0] = min(A[0], B[0])\n        C[1] = (-a*min(A[0], B[0]) - c) / b\n        D[0] = (-b*max(A[1], B[1]) - c) / a\n        D[1] = max(A[1], B[1])\n        r = abs(C[1] - min(A[1], B[1])) + abs(max(A[0], B[0]) - D[0]) + ro(C, D)\n    if ab and cb:\n        C[0] = min(A[0], B[0])\n        C[1] = (-a*min(A[0], B[0]) - c) / b\n        D[0] = max(A[0], B[0])\n        D[1] = (-a*max(A[0], B[0]) - c) / b\n        if C[1] < D[1]:\n            r = abs(C[1] - min(A[1], B[1])) + abs(max(A[1], B[1]) - D[1]) + ro(C, D)\n        else:\n            r = abs(D[1] - min(A[1], B[1])) + abs(max(A[1], B[1]) - C[1]) + ro(C, D)\n    if ab and db:\n        C[0] = min(A[0], B[0])\n        C[1] = (-a*min(A[0], B[0]) - c) / b\n        D[0] = (-b*min(A[1], B[1]) - c) / a\n        D[1] = min(A[1], B[1])\n        r = abs(max(A[1], B[1]) - C[1]) + abs(max(A[0], B[0]) - D[0]) + ro(C, D)\n    if bb and cb:\n        C[0] = (-b * max(A[1], B[1]) - c) / a\n        C[1] = max(A[1], B[1])\n        D[0] = max(A[0], B[0])\n        D[1] = (-a * max(A[0], B[0]) - c) / b\n        r = abs(C[0] - min(A[0], B[0])) + abs(D[1] - min(A[1], B[1])) + ro(C, D)\n    if bb and db:\n        C[0] = (-b * max(A[1], B[1]) - c) / a\n        C[1] = max(A[1], B[1])\n        D[0] = (-b * min(A[1], B[1]) - c) / a\n        D[1] = min(A[1], B[1])\n        if C[0] > D[0]:\n            r = abs(D[0] - min(A[0], B[0])) + abs(max(A[0], B[0]) - C[0]) + ro(C, D)\n        else:\n            r = abs(C[0] - min(A[0], B[0])) + abs(max(A[0], B[0]) - D[0]) + ro(C, D)\n    if cb and db:\n        C[0] = max(A[0], B[0])\n        C[1] = (-a * max(A[0], B[0]) - c) / b\n        D[0] = (-b * min(A[1], B[1]) - c) / a\n        D[1] = min(A[1], B[1])\n        r = abs(D[0] - min(A[0], B[0])) + abs(max(A[1], B[1]) - C[1]) + ro(C, D)\n    print(r)\n", "from math import sqrt\n\n\ndef ro(x, y):\n    return sqrt((x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2)\n\n\ndef make_y(k):\n    return (-a * k - c) / b\n\n\ndef make_x(k):\n    return (-b * k - c) / a\n\n\na, b, c = list(map(int, input().split()))\nA = [0, 0]\nB = [0, 0]\nA[0], A[1], B[0], B[1] = list(map(int, input().split()))\nif a == 0 or b == 0:\n    print(abs(A[0] - B[0]) + abs(A[1] - B[1]))\nelse:\n    ans = [abs(A[0] - B[0]) + abs(A[1] - B[1]),\n           abs(make_y(A[0]) - A[1]) + abs(make_y(B[0]) - B[1]) + ro([A[0], make_y(A[0])], [B[0], make_y(B[0])]),\n           abs(make_x(A[1]) - A[0]) + abs(make_y(B[0]) - B[1]) + ro([make_x(A[1]), A[1]], [B[0], make_y(B[0])]),\n           abs(make_y(A[0]) - A[1]) + abs(make_x(B[1]) - B[0]) + ro([A[0], make_y(A[0])], [make_x(B[1]), B[1]]),\n           abs(make_x(A[1]) - A[0]) + abs(make_x(B[1]) - B[0]) + ro([make_x(A[1]), A[1]], [make_x(B[1]), B[1]])]\n    print(min(ans))\n"]