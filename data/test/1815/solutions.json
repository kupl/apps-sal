["counts = {}\nrcount = {}\n\ninput()\n\nm = 0\nfor i, x in enumerate(map(int, input().split())):\n\tif x in counts:\n\t\trcount[counts[x]].remove(x)\n\t\tif not rcount[counts[x]]:\n\t\t\tdel rcount[counts[x]]\n\t\tcounts[x] += 1\n\t\tif counts[x] not in rcount: rcount[counts[x]] = set()\n\t\trcount[counts[x]].add(x)\n\telse:\n\t\tcounts[x] = 1\n\t\tif 1 not in rcount: rcount[1] = set()\n\t\trcount[1].add(x)\n\tkeys = list(rcount)\n\tif len(keys) == 2 and max(keys) - min(keys) == 1 and len(rcount[max(keys)]) == 1 or len(keys) == 2 and min(keys) == 1 and len(rcount[1]) == 1 or len(keys) == 1 and (len(rcount[keys[0]]) == 1 or keys[0] == 1):\n\t\tm = max(m, i)\n\nprint(m + 1)", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\n\n\n\n\nn=nn()\n\nl=lm()\n\nd={}\n\nmnum=0\ncolors=0\nsinglecolors=0\nmaxstring=0\nmaxhit=0\nfor i, num in enumerate(l):\n\tif num in d:\n\n\t\td[num]+=1\n\n\t\tif d[num]==mnum:\n\t\t\tmaxhit+=1\n\t\telif d[num]>mnum:\n\t\t\tmnum=max(mnum,d[num])\n\t\t\tmaxhit=1\n\t\tif d[num]==2:\n\t\t\tsinglecolors-=1\n\telse:\n\t\td[num]=1\n\t\tsinglecolors+=1\n\t\tif d[num]==mnum:\n\t\t\tmaxhit+=1\n\t\telif d[num]>mnum:\n\t\t\tmnum=max(mnum,d[num])\n\t\t\tmaxhit=1\n\t\tcolors+=1\n\tif (maxhit==1 and i==(mnum-1)*colors) or (maxhit>=colors-1 and singlecolors>=1):\n\t\tmaxstring=i+1\n\nprint(maxstring)\n\t\t\n\t\n\t\n\n\n", "n = int(input())\nu = [int(u) for u in input().split()]\n\nNMAX = 100005\n\nsuma = [0 for _ in range(NMAX)]\ntotal = [0 for _ in range(NMAX)]\n\ndiferentes = 0\nsol = 0\nmaximo = 1\n\nfor i, v in enumerate(u):\n\tif total[v] == 0:\n\t\tdiferentes += 1\n\telse:\n\t\tsuma[total[v]] -= 1\n\ttotal[v] += 1\n\tsuma[total[v]] += 1\n\n\tmaximo = max(maximo, total[v])\n\n\t#print(i, v, \":\", diferentes)\n\t#print(suma)\n\t#print(total)\n\t#print(maximo, \":\", suma[maximo], suma[maximo+1], diferentes-1)\n\t#print(maximo, \":\", suma[maximo-1], suma[maximo], diferentes-1)\n\n\tif diferentes <= 1:\n\t\tsol = i\n\n\tif suma[maximo-1] == diferentes-1 and suma[maximo] == 1:\n\t\tsol = i\n\n\tif suma[maximo] == diferentes-1 and suma[1] == 1:\n\t\tsol = i\n\n\tif suma[1] == diferentes:\n\t\tsol = i\n\t\n\t#print(\"SOL\", sol)\n\nprint(sol+1)\n", "n = int(input())\nu = list(map(int, input().split()))\ncnts = [0 for _ in range(10 ** 5 + 1)]\ncntcnt = [10**5+1] + [0 for _ in range(10 ** 5)]\nb = 1\nfor i in range(n):\n\tcnts[u[i]] += 1\n\tcntcnt[cnts[u[i]] - 1] -= 1\n\tcntcnt[cnts[u[i]]] += 1\n\n\tnz = 10 ** 5 + 1 - cntcnt[0]\n\tj = i + 1\n\tif nz == 1:\n\t\tb = j\n\t\tcontinue\n\tif j % nz == 1:\n\t\tc = j // nz\n\t\tif cntcnt[c] + 1 == nz:\n\t\t\tb = j\n\t\t\tcontinue\n\n\tif cntcnt[1] and (j - 1) % (nz - 1) == 0 and cntcnt[(j - 1) // (nz - 1)] == nz - 1 + (j == nz):\n\t\tb = j\nprint(b)", "def main():\n    from sys import stdin, stdout\n\n    def read():\n        return stdin.readline().rstrip('\\n')\n\n    def read_array(sep=None, maxsplit=-1):\n        return read().split(sep, maxsplit)\n\n    def read_int():\n        return int(read())\n\n    def read_int_array(sep=None, maxsplit=-1):\n        return [int(a) for a in read_array(sep, maxsplit)]\n\n    def write(*args, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in args) + end)\n\n    def write_array(array, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in array) + end)\n\n    n = read_int()\n    nums = read_int_array()\n    counts = {}\n    import collections\n    inv_counts = collections.defaultdict(int)\n    out = 0\n    for i, x in enumerate(nums):\n        c = inv_counts[x]\n        if c:\n            counts[c].remove(x)\n            if not counts[c]:\n                counts.pop(c)\n        c += 1\n        inv_counts[x] = c\n        counts.setdefault(c, set()).add(x)\n        if len(counts) == 2 and any(len(s) == 1 and ((k-1 in counts) or k == 1) for k, s in list(counts.items())):\n            out = i + 1\n        elif len(counts) == 1:\n            k = next(iter(list(counts.keys())))\n            if k == 1 or len(counts[k]) == 1:\n                out = i + 1\n    write(out)\n\nmain()\n", "N = int(input())\nA = [int(a) for a in input().split()]\n\nC = [0] * 101010\nma = 0\nmacnt = 0\nposcnt = 0\ncntofone = 0\nans = 0\nfor i in range(N):\n    C[A[i]] += 1\n    if C[A[i]] > ma:\n        ma = C[A[i]]\n        macnt = 1\n    elif ma == C[A[i]]:\n        macnt += 1\n    if C[A[i]] == 1:\n        poscnt += 1\n        cntofone += 1\n    elif C[A[i]] == 2:\n        cntofone -= 1\n    if i <= 1 or (cntofone >= 1 and ((poscnt - 1) * ma == i)) or (macnt == 1 and (poscnt * (ma - 1) == i)):\n        ans = i + 1\n\nprint(ans)\n", "n = int(input())\na = [int(x) for x in input().split()]\narr = [0] * 100001\nfreqs = [0] * 100001\nfreqs[0] = n\nminf, maxf = 0, 0\nfor ind, i in enumerate(a):\n    arr[i] += 1\n    freqs[arr[i]] += 1\n    freqs[arr[i] - 1] -= 1\n    if not freqs[arr[i] - 1] and minf == arr[i] - 1:\n        minf += 1\n    maxf = max(maxf, arr[i])\n    if maxf == 1 or (freqs[maxf] + freqs[0] == n - 1 and freqs[1] == 1) or (freqs[maxf] == 1 and freqs[maxf - 1] + freqs[0] == n - 1):\n        best = ind + 1\nprint(best)\n", "from random import random\nfrom collections import defaultdict\nimport math\nimport re\nimport fractions\n\nN = int(input())\n# N, M = map(int, input().split(\" \"))\nA = list(map(int, input().split(\" \")))\narr = [0]*(10**5+1)\nexisting = set()\nfor a in A:\n  arr[a] += 1\n  existing.add(a)\n\naccumulate = defaultdict(int)\nfor count in arr:\n  accumulate[count] += 1\n\nfor i in range(len(A)-1, -1, -1):\n  a = A[i]\n  length = i+1\n\n  if len(existing) in [0, 1, length]:\n    break\n\n  expected_1 = (i+1-1)//(len(existing)-1)\n  if accumulate[expected_1] * expected_1 + 1 == length and accumulate[1] == 1:\n    break\n\n  expected_k_1 = (i+1-1)//len(existing)\n  if accumulate[expected_k_1] * expected_k_1 + expected_k_1 + 1 == length and accumulate[expected_k_1+1] == 1:\n    break\n\n  accumulate[arr[a]] -= 1\n  arr[a] -= 1\n  if arr[a] == 0:\n    existing.discard(a)\n  accumulate[arr[a]] += 1\n  # print(accumulate)\nprint(length)\n\n", "n = int(input())\n\na = list(map(int,input().split()))\nif(n == 1 or n == 2):\n    print(n)\n    return\nnotpar = 0\nocc = [0 for i in range(10**5 + 1)]\nbase = 1\ngotone = False\nleader = -1\nleadby = 0\nbest = 0\nocc[a[0]] += 1\ncnt = 1\nat1 = 1\n\n\n\nfor i in range(1, n):\n    occ[a[i]] +=1\n    \n    if(occ[a[i]] == 1):\n        notpar += 1\n        at1 += 1\n        cnt += 1\n    elif(occ[a[i]] == 2):\n        at1 -= 1\n    if(occ[a[i]] == base):\n        notpar -= 1\n    elif(occ[a[i]] > base):\n        if(gotone):\n            if(a[i] != leader):\n                base += 1\n                notpar = cnt - 2\n                leadby -= 1\n                if(leadby == 0):\n                    gotone = False\n                    leader = -1\n            else:\n                leadby += 1\n        else:\n            gotone = True\n            leader = a[i]\n            leadby = 1\n    if(notpar == 0 and (leadby == 1 or (leadby == 0 and base == 1)) or (notpar == 1 and leadby == 0 and at1 > 0)):\n        best = i + 1\n    if(cnt == 1):\n        best = i + 1\n    #print(i, base, leader, leadby, gotone, notpar, cnt)\nprint(best)\n                    \n                    \n", "n = int(input())\nui = list(map(int,input().split()))\nar = [0] * 100001\nar2 = [0] * 100001\nmaxi = 1\nmini = 1\nans = 1\nfor i in range(n):\n    if ar[ui[i]] == 0:\n        ar[ui[i]] = 1\n        mini = 1\n        ar2[1] += 1\n    else:\n        ar2[ar[ui[i]]] -= 1\n        if ar2[ar[ui[i]]] == 0 and mini == ar[ui[i]]:\n            mini += 1\n        ar[ui[i]] += 1\n        ar2[ar[ui[i]]] += 1\n    maxi = max(maxi,ar[ui[i]])\n    if (maxi == mini and mini == 1) or mini == i + 1:\n        ans = i + 1\n    elif maxi == mini + 1 and ar2[maxi] == 1:\n        ans = i + 1\n    elif mini == 1 and ar2[maxi] * maxi == i:\n        ans = i + 1\n    if ar2[maxi] * maxi == i+1:\n        if i != n - 1:\n            ans = i + 2\nprint(ans)\n", "n = int(input())\nA = list(map(int, input().split()))\nB = [n] + [0] * (n + 1)\nC = {}\ncalcset = set()\ngood = 0\nnext = 0\nfor i in range(n):\n    C[A[i]] = C.get(A[i], 0) + 1\n    B[C[A[i]] - 1] -= 1\n    B[C[A[i]]] += 1\n    if C[A[i]] > next:\n        next = C[A[i]]\n    calcset.add(A[i])\n    if (B[next] + B[next - 1] == len(calcset) and B[next] == 1) or (B[1] == 1 and B[next] == len(calcset) - 1) or (next == 1 and B[next] == len(calcset)):\n        good = max(good, i)\nprint(good + 1)\n", "from collections import defaultdict as dd, deque\nimport sys\n\nn = int(input())\nA = [int(x) for x in input().split()]\n\nC = dd(int)\nCC = dd(int)\n\nfor a in A:\n    C[a] += 1\n\nfor c in C:\n    CC[C[c]] += 1\n\nfor a in reversed(A):\n    if len(CC) == 2:\n        aa,bb = sorted(list(CC.items()))\n        k1,v1 = aa\n        k2,v2 = bb\n        if (k2-k1 == 1 and v2 == 1) or (k1 == 1 and v1 == 1):\n            print(n)\n            return\n    elif len(CC) == 1:\n        aa, = list(CC.items())\n        k1,v1 = aa\n        if k1 == 1 or v1 == 1:\n            print(n)\n            return\n\n    CC[C[a]] -= 1\n    if CC[C[a]] == 0:\n        del CC[C[a]]\n    C[a] -= 1\n    if C[a] == 0:\n        del C[a]\n    if C[a]:\n        CC[C[a]] += 1\n\n    n -= 1\n", "n = int(input())\nu = [int(item) for item in input().split()]\n\nd = {key: 0 for key in u}\n\nfor x in u:\n    d[x] += 1\n\nnb_occs = [0] * (n + 1)\nfor x in d:\n    nb_occs[d[x]] += 1\n\ns = set()\nfor i in range(len(nb_occs)):\n    if nb_occs[i] != 0:\n        s.add(i)\n\nx = n - 1\ncount = len(s)\nwhile 1:\n    if len(s) == 1:\n        items = list(s)\n        if nb_occs[items[0]] == 1 or items[0] == 1:\n            break\n    if len(s) == 2:\n        items = sorted(list(s))\n        # print(\"here\", s, nb_occs, items)\n        if (items[0] == 1 and nb_occs[1] == 1) or (items[1] == items[0] + 1 and nb_occs[items[1]] == 1):\n            break\n    # print(\"x : \", x, s)\n    # print(nb_occs)\n    v = u[x]\n    nb_occs[d[v]] -= 1\n    if nb_occs[d[v]] == 0:\n        s.remove(d[v])\n    d[v] -= 1\n    if d[v] != 0:\n        nb_occs[d[v]] += 1\n        s.add(d[v])\n    x -= 1\nprint(x + 1)\n", "\nfrom collections import Counter\nimport sys\n\nn = int(input())\ncolors = list(map(int, sys.stdin.readline().split()))\n\ntotal = 0\nfreqs = {colors[0] : 1}\nfreqs_of_freqs = {1:1}\nmax_length = 1\n\nfor index, color in enumerate( colors[1:] ):\n\n    if color not in freqs:\n        freqs[color] = 1\n        freqs_of_freqs[1] = freqs_of_freqs.get(1, 0) + 1\n    else:\n        freqs_of_freqs[freqs[color]] -= 1\n        if freqs_of_freqs[freqs[color]] == 0:\n            del freqs_of_freqs[freqs[color]]\n        freqs[color] += 1\n        freqs_of_freqs[freqs[color]] = freqs_of_freqs.get(freqs[color], 0) + 1\n\n    if len(freqs_of_freqs) == 2:\n        l = list(freqs_of_freqs.keys())\n        if max(l) == min(l) + 1 and freqs_of_freqs[max(l)] == 1:\n            max_length = index + 2\n        elif 1 in list(freqs_of_freqs.keys()) and freqs_of_freqs[1] == 1:\n            max_length = index + 2\n    elif len(freqs_of_freqs) == 1:\n        if 1 in list(freqs_of_freqs.keys()) or 1 in list(freqs_of_freqs.values()):\n            max_length = index + 2\n\nprint(max_length)\n\n", "n=int(input().strip())\nnumbers=tuple(map(int,input().strip().split()))\nocc=[0 for i in range(100001)]\nplaces=[]\nd={}\nfor k in range(0,len(numbers)):\n    occ[numbers[k]]+=1\n    if(occ[numbers[k]]-1 in list(d.keys())):\n        if(d[occ[numbers[k]]-1]==1):\n            d.pop(occ[numbers[k]]-1 )\n        else:\n            d[occ[numbers[k]]-1]-=1\n    if(occ[numbers[k]] in list(d.keys())):\n        d[occ[numbers[k]]]+=1\n    else:\n        d[occ[numbers[k]]]=1\n    if(len(list(d.keys()))==2 and (1 in list(d.keys())) and (2 in list(d.keys()))):\n        if(d[2]==1):\n            places.append(k)\n        if(d[1]==1):\n            places.append(k)\n    elif(len(list(d.keys()))==2 and (1 in list(d.keys()))):\n        if(d[1]==1):\n            places.append(k)\n    elif(len(list(d.keys()))==2 ):\n        lll=list(d.keys())\n        if(lll[0]-lll[1]==1):\n            if(d[lll[0]]==1):\n                places.append(k)\n        if (lll[1] - lll[0] == 1):\n            if (d[lll[1]] == 1):\n                places.append(k)\n    elif(len(list(d.keys()))==1):\n        jo=1\n        for i in list(d.keys()):\n            if(d[i]==1):\n                places.append(k)\n                jo=0\n        if(jo):\n            if(1 in list(d.keys())):\n                places.append(k)\nif(len(places)>0):\n    print(places[-1]+1)\nelse:\n    print(0)\n\n\n\n\n", "n = int(input())\na = list(map(int,input().split()))\n\nd = {}\nfor i in range(n):\n\td[a[i]] = 0\n\n\n# numOdd = 0\n# for i in range(n):\n# \td[a[i]] += 1\n\n# \tif(d[a[i]] % 2 != 0):\n# \t\tnumOdd += 1\n\n# \telse:\n# \t\tnumOdd -= 1\n\n# \tif(numOdd == 1):\n# \t\tx = i+1\n\n# print(x)\n\nx = 1\nfor i in range(1,n):\n\tif(a[i] == a[i-1]):\n\t\t# print(\"yo\")\n\t\tx = i+1\n\telse:\n\t\tbreak\n\nll = [0 for i in range(100001)]\n\nl = []\n\nfor i in range(n):\n\tif(d[a[i]] != 0):\n\t\tif(ll[d[a[i]]] == 1):\n\t\t\tfor c in range(len(l)):\n\t\t\t\tif l[c] == d[a[i]]:\n\t\t\t\t\tl.pop(c)\n\t\t\t\t\tbreak\n\t\tll[d[a[i]]] -= 1\n\n\td[a[i]] += 1\n\tif(d[a[i]] not in l):\n\t\tl.append(d[a[i]])\n\t\tl.sort()\n\tll[d[a[i]]] += 1\n\n\tif(len(l) > 0 and l[0] == 0):\n\t\tl.pop(l[0])\n\t\n\tif(len(l) == 2):\n\t\tif(abs(l[0] - l[1]) == 1 and ll[l[1]] == 1):\n\t\t\tx = max(x,i+1)\n\t\telif(l[0] == 1 and ll[1] == 1):\n\t\t\tx = max(x,i+1)\n\tif(len(l) == 1 and l[0] == 1):\n\t\tx = max(x,i+1)\n\nprint(x)", "n = int(input())\narr = [int(x) for x in input().split()]\n\ncounts = [0] * 100000\ncount_to_color = {}\n\nmx = 0\nfor i in range(n):\n    color = arr[i] - 1\n    # print(i, color, count_to_color)\n\n    if counts[color] > 0:\n        count_to_color[counts[color]].remove(color)\n        if not count_to_color[counts[color]]:\n            del count_to_color[counts[color]]\n    counts[color] += 1\n    count = counts[color]\n\n    if count not in count_to_color:\n        count_to_color[count] = set()\n    count_to_color[count].add(color)\n\n    if len(count_to_color) == 1:\n        if 1 in count_to_color:\n            mx = max(mx, i)\n        if len(list(count_to_color.values())[0]) == 1:\n            mx = max(mx, i)\n    if len(count_to_color) == 2:\n        count_keys = sorted(list(count_to_color.keys()))\n        if count_keys[0] == 1 and len(count_to_color[count_keys[0]]) == 1:\n            mx = max(mx, i)\n        if count_keys[0] + 1 == count_keys[1] and len(count_to_color[count_keys[1]]) == 1:\n            mx = max(mx, i)\n\nprint(mx + 1)\n", "n = int(input())\napr, l, f, ans = 0, [0] * 100001, [0] * 100001, 1\ni = 0\nfor x in input().split():\n    x = int(x)\n    if l[x] == 0:\n        l[x] += 1\n        apr += 1\n        f[1] += 1\n    else:\n        f[l[x]] -= 1\n        l[x] += 1\n        f[l[x]] += 1\n\n    if i % apr == 0:\n        tmp = i // apr\n        if f[tmp] == apr - 1:\n            ans = max(ans, i + 1)\n\n    if apr > 1 and i % (apr - 1) == 0:\n        tmp = i // (apr - 1)\n        if f[tmp] == apr - 1 or f[tmp] == apr:\n            ans = max(ans, i + 1)\n    i += 1\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split()))\nans = n\n\ns = set()\nx = {i: 0 for i in range(1, 100001)}\ny = {}\nfor i in range(n):\n    e = a[i]\n    c = x[e]\n    if c:\n        y[c].remove(e)\n        if len(y[c]) == 0:\n            s.remove(c)\n    x[e] += 1\n    c += 1\n    if c not in y:\n        y[c] = set({e})\n    else:\n        y[c].add(e)\n    s.add(c)\n    if len(s) == 2:\n        l = list(s)\n        p = l[0]\n        q = l[1]\n        py = len(y[p])\n        qy = len(y[q])\n        if py == 1:\n            if p == q + 1 or p == 1:\n                ans = i + 1\n        if qy == 1:\n            if q == p + 1 or q == 1:\n                ans = i + 1\n\nprint(ans)\n", "from collections import defaultdict\n\ndef isValid(n, m, freq, found):\n    f = (n - 1)//m\n    if f != (n - 1)/m:\n        return 0\n    flag = 0\n    for i in found:\n        if freq[i] != 0:\n            if flag == 0 and freq[i] == f or freq[i] == f + 1:\n                if freq[i] == f + 1:\n                    flag = 1\n            elif flag == 1 and freq[i] == f:\n                continue\n            else:\n                return 0\n    if flag == 0:\n        return 0\n    return 1\n\ndef isValid2(n, m, freq, found):\n    f = (n - 1)//(m - 1)\n    if f != (n - 1)/(m - 1):\n        return 0\n    flag = 0\n    for i in found:\n        if freq[i] != 0:\n            if flag == 0 and freq[i] == f or freq[i] == 1:\n                if freq[i] == 1:\n                    flag = 1\n            elif flag == 1 and freq[i] == f:\n                continue\n            else:\n                return 0\n    if flag == 0:\n        return 0\n    return 1\n\nn = int(input())\nfreq = {}\nfreq = defaultdict(lambda: 0, freq)\na = list(map(int, input().split()))\nm = len(set(a))\nfound = []\n#calculation of freq\nfor i in a:\n    freq[i] += 1\n    found.append(i)\n# print(freq)\nfound = list(set(found))\n# print(found)\nfor i in range(n - 1, -1, -1):\n    if isValid(i + 1, m, freq, found) == 0 and isValid2(i + 1, m, freq, found) == 0:\n        freq[a[i]] -= 1\n        if freq[a[i]] == 0:\n            m -= 1\n    else:\n        # print(isValid(i + 1, m, freq))\n        # print(isValid2(i + 1, m, freq))\n        print(i + 1)\n        break", "#Bhargey Mehta (Sophomore)\n#DA-IICT, Gandhinagar\nimport sys, math, queue\n#sys.stdin = open(\"input.txt\", \"r\")\nMOD = 10**9+7\n\nn = int(input())\nu = list(map(int, input().split()))\nf = {}\nff = {}\nans = 1\nfor i in range(n):\n    if len(ff) == 1:\n        ans = i+1\n    if u[i] in f: f[u[i]] += 1\n    else: f[u[i]] = 1\n    \n    if f[u[i]]-1 in ff:\n        if ff[f[u[i]]-1] == 1: del ff[f[u[i]]-1]\n        else: ff[f[u[i]]-1] -= 1\n\n    if f[u[i]] in ff: ff[f[u[i]]] += 1\n    else: ff[f[u[i]]] = 1\n\n    if len(ff) == 2:\n        k1, k2 = sorted(ff.keys())\n        if k2-k1 == 1:\n            if ff[k2] == 1:\n                ans = i+1\n        if k1 == 1:\n            if ff[k1] == 1:\n                ans = i+1\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\nfrom collections import Counter\nC=Counter(A)\n\nD=Counter(list(C.values()))\nMAX=max(C.values())\nMIN=min(C.values())\n\n#print(C)\n#print(D)\n\nfor i in range(n-1,-1,-1):\n    if MAX==MIN+1 and D[MAX]==1:\n        print(i+1)\n        return\n\n    if len(D)==2 and D[1]==1:\n        print(i+1)\n        return\n\n    if len(D)==1 and D[1]>0:\n        print(i+1)\n        return\n\n    if len(D)==1 and list(D.values())==[1]:\n        print(i+1)\n        return\n        \n\n    a=A[i]\n    \n    if MAX==C[a] and D[MAX]==1:\n        MAX-=1\n    if MIN==C[a]:\n        MIN-=1\n        \n    D[C[a]]-=1\n    if D[C[a]]==0:\n        del D[C[a]]\n\n    if MIN==0:\n        MIN=min(D.keys())\n\n\n    C[a]-=1\n\n    if C[a]==0:\n        del C[a]\n\n    else:\n        D[C[a]]+=1\n\n    #print(C)\n    #print(D)\n    #print(MAX,MIN)\n", "N = int(input())\narr = [int(x) for x in input().split()]\ncnt = dict()\nbrr = set()\ncrr = [0 for _ in range(100001)]\nfor i in range(1, N + 1):\n    cnt[i] = set()\nanswer = 1\nfor i in range(N):\n    u = arr[i]\n    crr[u] += 1\n    if crr[u] > 1:\n        cnt[crr[u] - 1].remove(u)\n        if len(cnt[crr[u] - 1]) == 0:\n            brr.remove(crr[u] - 1)\n    cnt[crr[u]].add(u)\n    brr.add(crr[u])\n    if len(brr) == 1:\n        drr = list(brr)\n        if drr[0] == 1 or len(cnt[drr[0]]) == 1:\n            answer = i + 1\n    elif len(brr) == 2:\n        drr = list(brr)\n        drr.sort()\n        if drr[0] == 1 and len(cnt[1]) == 1:\n            answer = i + 1\n        elif drr[1] == drr[0] + 1 and len(cnt[drr[1]]) == 1:\n            answer = i + 1\nprint(answer)\n", "n = int(input())\ncolors = list(map(int, input().split()))\ncnt = [0 for _ in range(100001)]\nvals = dict()\nind = 1\nfor i in range(n):\n    el = colors[i]\n    if cnt[el] != 0:\n        vals[cnt[el]] -= 1\n        if vals[cnt[el]] == 0:\n            del vals[cnt[el]]\n    cnt[el] += 1\n    if cnt[el] in vals:\n        vals[cnt[el]] += 1\n    else:\n        vals[cnt[el]] = 1\n    if len(vals) == 2:\n        tmp = list(vals.keys())\n        tmp.sort()\n        if tmp[0] == 1 and vals[tmp[0]] == 1 or tmp[1] - tmp[0] == 1 and vals[tmp[1]] == 1:\n            ind = i\n    elif len(vals) == 1 and list(vals.keys())[0] == 1:\n        ind = i\nif (cnt[colors[0]] == n):\n    print(n)\nelse:\n    print(ind + 1)"]