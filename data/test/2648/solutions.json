["n=int(input())\na=list(map(int,input().split()))\nnum=[0]*100001\nfor i in a:\n  num[i]+=1\nx=0\nfor i in num:\n  if i<=0:\n    continue\n  elif i%2==0:\n    n-=i\n    x+=1\n  else:\n    n-=i-1\n    \nif x%2:\n  x-=1\n  \nprint(n+x)", "N = int(input())\nA = list(map(int, input().split()))\n\nB = list(set(A))\n\nif len(B) % 2 == 0:\n    print((len(B) - 1))\nelse:\n    print((len(B)))\n\n\n        \n\n", "N = int(input())\nA = list(map(int,input().split()))\nM = len(set(A))\nfrom math import ceil\nprint(N-ceil((N-M)/2)*2)", "N = int(input())\nA = list(map(int,input().rstrip().split(\" \")))\nA.sort()\nans = N\nfor i in range(N-1):\n    if A[i] == A[i+1]:\n        ans -= 1\nif ans % 2 == 0:\n    ans -= 1\nprint(ans)", "import collections\nN = int(input())\nAN = list(map(int,input().split()))\nan = collections.Counter(AN)\na = sorted(list(an.values()),reverse=True)\nal = len(a)\n\nprint((al if al%2==1 else al-1))\n", "from collections import Counter\nn = int(input())\nc = Counter(map(int, input().split()))\nc_value = list(c.values())\noverflow = sum(c_value) - len(c_value)\nif overflow % 2 == 0:\n    print(len(c_value))\nelse:\n    print(len(c_value) - 1)", "\nurl = \"https://atcoder.jp//contests/abc057/tasks/abc057_d\"\n\nimport collections\n\ndef main():\n    n = int(input())\n    cards = list(map(int, input().split()))\n    c_cards = collections.Counter(cards)\n    credit = 0\n    r = 0\n\n    for k in c_cards:\n        surplus = c_cards[k] - 1\n        r += surplus\n        if c_cards[k] > 1:\n            n -= surplus\n            if credit > 0:\n                credit = abs(credit - surplus%2)\n            else:\n                credit += surplus%2\n            c_cards[k] -= surplus\n    if credit > 0:\n        n -= credit\n    print(n)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\n\nn = len(set(a))\nif n%2 == 0: print(n-1)\nelse: print(n)", "n = int(input())\na = list(map(int, input().split()))\nnums = [0] * 100005\nfor x in a:\n    nums[x] += 1\neven, odd = [], []\nfor p in nums:\n    if p % 2 == 1 and p > 1:odd.append(p)\n    elif p % 2 == 0 and p > 0:even.append(p)\nans = n\nfor x in odd:\n    ans -= x - 1\nif len(even) % 2 == 1:\n    ans -= 1\nfor x in even:\n    ans -= x - 1\nprint(ans)", "from collections import defaultdict\nimport heapq\nN=int(input())\nalist=list(map(int,input().split()))\n\nadic=defaultdict(int)\nfor a in alist:\n  adic[a]+=1\n  \nhq=[]\nfor k,b in adic.items():\n  heapq.heappush(hq,(-b,k))\n#print(hq)  \n\ncnt=0\nwhile True:\n  mf,n=heapq.heappop(hq)\n  if mf==-1:\n    break\n  elif mf<=-3:\n    heapq.heappush(hq,(mf+2,n))\n    cnt+=1\n  else:\n    mf2,n2=heapq.heappop(hq)\n    if mf2==-1:\n      cnt+=1\n      break\n    else:\n      heapq.heappush(hq,(mf+1,n))\n      cnt+=1\n    \nprint(N-2*cnt)", "input();k=len(set(input().split()));print(k-1+k%2)", "from collections import Counter\n\nN = int(input())\nA = sorted(list(map(int,input().split())))\n\nedible = sum(i-1 for i in Counter(A).values())\nprint(len(set(A))-edible%2)", "def main():\n\tN = int(input())\n\tA = [int(a) for a in input().split(\" \")]\n\tA.sort()\n\tcnt = []\n\tc = 0\n\ta = 0\n\tfor i in range(len(A)):\n\t\tif i == 0:\n\t\t\ta = A[i]\n\t\t\tc += 1\n\t\telse:\n\t\t\tif A[i] == a:\n\t\t\t\tc += 1\n\t\t\telif A[i] != a:\n\t\t\t\tcnt.append(c)\n\t\t\t\tc = 1\n\t\t\t\ta = A[i]\n\telse:\n\t\tcnt.append(c)\n\n\tcnt = list(map(lambda ct: (2 - (ct % 2)), cnt))\n\tevens = cnt.count(2)\n\tif evens % 2 == 0:\n\t\tprint(len(cnt))\n\telse:\n\t\tprint(len(cnt) - 1)\n\nmain()", "n = int(input())\na = list(map(int, input().split()))\nfrom collections import Counter\nc = Counter(a)\neven_cnt = sum([cnt%2==0 for i, cnt in c.items()])\nif even_cnt % 2:\n    print(len(c) - 1)\nelse:\n    print(len(c))", "from collections import Counter\n \nN = int(input())\nA = sorted(list(map(int,input().split())))\n \nedible = sum(i-1 for i in Counter(A).values())\nprint(len(set(A))-edible%2)", "from collections import defaultdict\nn = int(input())\na_list = [int(x) for x in input().split()]\nd = defaultdict(int)\nfor a in a_list:\n    d[a] += 1\nprint(len(d.keys()) - sum([1 for v in d.values() if v % 2 == 0]) % 2)", "input()\nc=len(set(input().split()))\nprint(c-1+c%2)", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    n = i_input()\n    l = i_list()\n    dic = {}\n    for i in l:\n        dic[i] = dic.get(i,0) + 1\n    t = 0\n    for i,k in list(dic.items()):\n        t += k-1\n    if t%2==0:\n        print((len(dic)))\n    else:\n        print((len(dic)-1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import collections\nn = int(input())\na = list(map(int, input().split()))\nd = set(a)\nc = collections.Counter(a)\nb = 0\nfor i in c:\n\tif c[i] >= 2:\n\t\tb += c[i]-1\nif b%2 == 1:\n\tans = len(d)-1\nelse:\n\tans = len(d)\nprint (ans)", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\nC = Counter(A)\nC = sorted(C.items())\n\ncc = []\nfor a, b in C:\n    cc.append([a, b])\nC = cc\n\nM = len(C)\n\nleft = 0\nright = M - 1\n\nwhile True:\n    if C[left][1] < 2:\n        p_left = left\n        for left in range(p_left, M):\n            if C[left][1] > 1:\n                break\n\n    if C[right][1] < 2:\n        p_right = M - right - 1\n        for right in range(M):\n            if C[M - right - 1][1] > 1:\n                break\n\n        right = M - right - 1\n\n    if C[left][1] <= 1 and C[right][1] <= 1:\n        break\n\n    if left == right:\n        if C[left][1] >= 3:\n            C[left][1] -= 2\n        else:\n            f = 0\n            C[left][1] -= 1\n            for i in range(left + 1, M):\n                if C[i][1] > 0:\n                    C[i][1] -= 1\n                    f = 1\n                    break\n\n            if f == 0:\n                for i in range(0, left):\n                    if C[i][1] > 0:\n                        C[i][1] -= 1\n\n    else:\n        C[left][1] -= 1\n        C[right][1] -= 1\n\n\nans = 0\nfor a, b in C:\n    ans += b\n\nprint(ans)\n", "n = int(input())\nimport collections\nco = collections.Counter(list(map(int,input().split())))\nr = 0\nfor cnt in list(co.values()):\n    r+=cnt-1\nif r%2==0:\n    print((n-r))\nelse:\n    print((n-r-1))  \n", "def abc053_d():\n    _ = int(input())\n    A = list(map(int, input().split()))\n    ans = 0\n    from collections import Counter\n    multi_even = 0\n    for _, v in Counter(A).items():\n        ans += 1\n        if 2 <= v and v % 2 == 0:\n            multi_even += 1\n    if 0 < multi_even and multi_even % 2 == 1:\n        ans -= 1\n    print(ans)\n\nabc053_d()", "N = int(input())\nA = list(map(int, input().split()))\n\nif (N - len(set(A))) % 2 == 0:\n    print(len(set(A)))\nelse:\n    print(len(set(A)) - 1)", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    K = len(set(A))\n    if K % 2 == 1:\n        ans = K\n    else:\n        ans = K - 1\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\n\nkind = len(set(a))\n\nif (n-kind) % 2 == 0:\n    ans = kind\nelse:\n    ans =  kind - 1\n\nprint(ans)\n\n", "N = int(input())\nA = list(sorted(map(int, input().split()), reverse=True))\n\nfrom collections import Counter\ncnt_a = Counter(A)\n\nX = [0] * 3\nfor k, v in list(cnt_a.items()):\n    while v >= 3:\n        v = (v // 3 + (v % 3))\n    X[v] += 1\n\nif X[2] % 2 == 0:\n    print((X[1] + X[2]))\nelse:\n    print((X[1] - 1 + X[2]))\n\n\n", "n = int(input())\na = list(map(int, input().split()))\n\nkind = set(a)\nnum = len(kind)\n\ndiff = n - num\ndiv = (diff - 1) // 2\n\nans = n - 2 * (div + 1)\nprint(ans)\n", "n=int(input())\na=list(map(int,input().split()))\nfrom collections import Counter\nac=Counter(a)\ncount=0\ntemp=0\nfor i in ac:\n    if ac[i]>=3:\n        if ac[i]%2==0:\n            count+=(ac[i]-2)\n            ac[i]=2\n        else:\n            count+=(ac[i]-1)\n            ac[i]=1\n\nfor j in ac:\n    if ac[j]==2:\n        temp+=1\nif temp%2==0:\n    count+=temp\nelse:\n    count+=((temp+1))\nprint((n-count))\n", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\ndef dp3(ini, i, j, k): return [[[ini]*i for _ in range(j)] for _ in range(k)]\n#import bisect #bisect.bisect_left(B, a)\nfrom collections import defaultdict #d = defaultdict(int) d[key] += 1\n#from itertools import accumulate #list(accumulate(A))\n\nN = ii()\nA = li()\n\nd = defaultdict(int)\nfor num in A:\n    d[num] += 1\n\nflag = 0\ncnt = 0\nfor key, value in d.items():\n    if value > 1:\n        flag = (flag + value - 1) % 2\n    cnt += 1\n\nprint(cnt-flag)", "# Python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN = int(input())\nA = list(map(int,input().split()))\n\nfrom collections import Counter\nL = len(Counter(A))\n\n# \u5168\u4f53\u679a\u6570\u304c\u5947\u6570\u3067, \u30ab\u30fc\u30c9\u306e\u7a2e\u985e\u304c\u5076\u6570 \n#  -> \u91cd\u8907\u30ab\u30fc\u30c9\u306f\u5947\u6570\n#  -> \u3069\u308c\u304b1\u7a2e\u985e\u306f\u5168\u3066\u6368\u3066\u306a\u3044\u3068\u91cd\u8907\u30ab\u30fc\u30c9\u306f\u51e6\u5206\u4e0d\u53ef\u80fd\nif L%2==0:\n    print(L-1)\n# \u91cd\u8907\u30ab\u30fc\u30c9\u304c\u5076\u6570, \u30da\u30a2\u3092\u4f5c\u3063\u3066\u5168\u3066\u51e6\u5206\u53ef\u80fd\nelse:\n    print(L)", "n = input()\na = set(input().split())\n\nprint(len(a) - (len(a)%2==0))", "import sys\nimport math\nN = int(input())\narray = list(map(int,input().split()))\nset_array = set(array)\n\nif not ( 3 <= N <= 10**5 and N % 2 == 1 ): return\n\nprint(len(list(set_array))) if len(list(set_array)) % 2 == 1 else print(len(list(set_array)) - 1)", "n = int(input())\na = list(map(int, input().split()))\nnum_map = dict()\nfor i in range(n):\n    if a[i] not in num_map:\n        num_map[a[i]] = 1\n    else:\n        num_map[a[i]] += 1\n\ncounter = 0\nfor key, value in list(num_map.items()):\n    if value % 2 == 0:\n        num_map[key] = 2\n        counter += 1\n    else:\n        num_map[key] = 1\n\nres = len(num_map) - counter % 2\nprint(res)\n", "n = int(input())\na = list(map(int, input().split()))\n\nd = {}\nm = 0\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n        m += 1\nprint(m - 1) if (n-m) % 2 else print(m)", "from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\n\na = Counter(A)\nl_a = len(a)\nif(l_a%2 == 0):\n     print((l_a-1))\nelse:\n    print(l_a)\n", "N = int(input())\nA = list(map(int, input().split()))\nM = len(set(A))\n \nprint(M if M % 2 else M - 1)", "from sys import stdin\nfrom collections import Counter\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n=int(readline())\n    a=list(map(int,readline().split()))\n\n    c=Counter(a)\n    ans=n\n    cnt_two=0\n    for key in c.keys():\n        if c[key]>=3:\n            if c[key]%2==1:\n                ans-=c[key]-1\n                c[key]=1\n            else:\n                ans-=c[key]-2\n                c[key]=2\n                cnt_two+=1\n        elif c[key]==2:\n            cnt_two+=1\n\n    if cnt_two%2==0:\n        ans-=cnt_two\n    else:\n        ans-=cnt_two-1\n        ans-=2\n\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import collections\nN = int(input())\nlsA = list(map(int,input().split()))\ncounterA = collections.Counter(lsA)\nlsn = list(counterA.values())\nrep = 0\neven = 0\nfor i in lsn:\n    if i % 2 ==1:\n        rep += i//2\n    else:\n        rep += (i-1)//2\n        even += 1\nrep += -(-even//2)\nans = N-rep*2\nprint(ans)", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\nC = Counter(A)\n\ncnt = 0\nfor v in C.values():\n    if v > 1:\n        cnt += v - 1\n\nif cnt % 2 == 0:\n    print(N - cnt)\nelse:\n    print(N - cnt - 1)", "from collections import Counter\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    counter = Counter(A)\n    n_odd, n_even = 0, 0\n    for c in counter.values():\n        if c % 2 == 0:\n            n_even += 1\n        else:\n            n_odd += 1\n    print(n_odd + (n_even // 2) * 2)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nA = sorted(list(map(int,input().split())))\nB = set(A)\n\nif len(B)%2==0:\n  print(len(B)-1)\nelse:\n  print(len(B))", "N = int(input())\nA = [int(x) for x in input().split()]\nfrom collections import defaultdict as dd\nSieve = dd(lambda:0)\nfor a in A:\n    Sieve[a] += 1\n\nans, extra = 0, 0 #extra:\u540c\u3058\u6570\u30923\u679a\u9078\u3093\u3067\u98df\u3079\u308b\u3068\u3044\u3046\u64cd\u4f5c\u3067\u300c\u88ab\u308a\u30ab\u30fc\u30c9\u306a\u3057\u300d\u306b\u3067\u304d\u306a\u3044\u7a2e\u985e\u6570\nfor v in list(Sieve.values()):\n    ans += 1\n    if v > 1 and (v-1)&1:\n        extra += 1\n#extra\u304b\u30892\u679a\u9078\u3093\u3067\u98df\u3079\u308c\u3070\u5168\u4f53\u306e\u7a2e\u985e\u6570\u3092\u6e1b\u3089\u3055\u305a\u306b\u6e08\u3080\nprint((ans if not extra&1 else ans-1))\n", "N = int(input())\nA = set() \ncnt = 0\n\ndef count(n, Set):\n    if not n in Set:\n        Set.add(n)\n        return 0\n    else:\n        return 1\nfor x in input().split():\n    cnt += count(x, A)\nif not cnt & 1:\n    ans = N - cnt\nelse:\n    ans = N - cnt - 1\nprint(ans)\n    \n\n", "n=int(input())\na=list(map(int,input().split()))\nd={}\nfor i in a:\n  if i in d:\n    d[i]+=1\n  else:\n    d[i]=0\ns=sum(d.values())\nif s%2==0:\n  print(n-s)\nelse:\n  print(n-s-1)", "N = int(input())\nA = list(map(int, input().split()))\nM = len(set(A))\n\nprint(M if M % 2 else M - 1)", "N = int(input())\nK = len(set(input().split()))\nprint(K+K%2-1)", "N = int(input())\nA = list(map(int, input().split()))\n\ntmp = [0 for _ in range(10 ** 5)]\nfor i in range(N):\n  tmp[A[i] - 1] += 1\n\n\nans = N\nflag = False\nfor i in range(10 ** 5):\n  if tmp[i] == 0:\n    continue\n  elif tmp[i] % 2 == 1:\n    ans -= (tmp[i] - 1)\n  else:\n    if flag:\n      ans -= (tmp[i] - 2)\n      flag = False\n    else:\n      ans -= tmp[i]\n      flag = True\n\nprint(ans)", "import collections\nn = int(input())\na = list(map(int,input().split()))\nkind = collections.Counter(a)\nif len(kind)%2 == 0:\n    print(len(kind)-1)\nelse:\n    print(len(kind))", "N = int(input())\nA = list(map(int, input().split()))\n\nA_set = set(A)\neat = len(A) - len(A_set)\nif eat % 2 == 0:\n    print(len(A_set))\nelse:\n    print(len(A_set) - 1)", "import sys\nfrom collections import Counter\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = list(map(int, read().split()))\n\n    counter = Counter(A)\n\n    odd = even = 0\n    for v in list(counter.values()):\n        if v % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    if even % 2 == 0:\n        ans = odd + even\n    else:\n        ans = odd + even - 1\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\n\nN,*A = map(int, open(0).read().split())\nac = Counter(A)\ne = [x[0] for x in ac.items() if x[1] % 2 == 0]\nif len(e) % 2 == 0:\n    print(len(ac))\nelse:\n    print(len(ac)-1)", "n = int(input())\na = list(map(int,input().split()))\na.sort()\ndup = 0\nfor i in range(0,n-1):\n    if a[i]==a[i+1]:\n        dup += 1\nif dup%2==1:\n    dup += 1\nprint(n-dup)", "from collections import Counter\n\nN = int(input())\ncards = list(map(int, input().split()))\n\ncounter = Counter(cards)\nans = len(counter)\nrest = 0\nfor num, cnt in counter.items():\n    rest += (cnt - 1)\n\nif rest % 2 == 1:\n    ans -= 1\n\nprint(ans)", "N = int(input())\nA = [int(x) for x in input().split()]\n\ndef count(n, Set):\n    if not n in Set:\n        Set.add(n)\n        return 0\n    else:\n        return 1\n\nSieve = set()\nextra = 0\nfor a in A:\n    extra += count(a, Sieve)\nprint((N-extra if not extra&1 else N-extra-1))\n", "# \u9047\u5947\n# \u540c\u3058\u30ab\u30fc\u30c9\u304c3\u679a\u4ee5\u4e0a\u3042\u308b\u3068\u304d\u306f\u305d\u306e\u30ab\u30fc\u30c9\u3060\u3051\u3092\u9078\u3073\u7d9a\u3051\u308b\u3053\u3068\u3067\u6700\u7d42\u7684\u306b1\u679a\u304b2\u679a\u306b\u3067\u304d\u308b\n# \uff08\u6700\u521d\u306b\u5947\u6570\u679a\u3042\u3063\u305f\u30891 \u5076\u6570\u679a\u306a\u30892\uff09\n# \u305d\u3046\u3057\u3066\u5727\u7e2e\u3057\u305f\u5c71\u3067\u30012\u679a\u3042\u308b\u3082\u306e\u3069\u3046\u3057\u306f\u305d\u308c\u3089\u3092\u9078\u3076\u3053\u3068\u3067\u4e21\u65b9\u3068\u30821\u679a\u306b\u3067\u304d\u308b\n# \u306a\u306e\u3067\u3001\u5727\u7e2e\u3057\u305f\u5c71\u306b\u542b\u307e\u308c\u308b2\u679a\u306e\u6570\u306e\u9047\u5947\u306b\u306a\u308b\nn = int(input())\nd = [0] * (10**5 + 1)\na = list(map(int, input().split()))\nvaries = len(set(a))\nfor v in a:\n    d[v] += 1\ntwo = 0\nfor i in range(len(d)):\n    if d[i] > 0 and d[i] % 2 == 0:\n        two += 1\nprint((varies if two % 2 == 0 else varies - 1))\n", "N = int(input())\nA = list(map(int, input().split()))\n\nfrom collections import Counter\n\ndef check(counter, A):\n    return len(counter) != len(A)\n\ndef Main(N, A):\n    counter = Counter(A)\n    lenC = len(counter)\n    remains = N-lenC\n    if remains%2 == 0:\n        return lenC\n    else:\n        return lenC-1\n    \n          \nprint(Main(N, A))", "n= int(input())\na= list(map(int,input().split()))\nadict = {}\nfor c in a:adict[c] = adict.get(c,0) + 1\ntwos=0\nmoreodd=0\nmoreeven=0\nfor num in adict.keys():\n    if adict[num]==2:twos+=1\n    elif adict[num]>2:\n        if adict[num]%2==0:moreeven+=1\n        else:moreodd +=1\nif moreeven%2==1:twos+=1\nif twos%2==0:print(len(adict))\nelse:print(len(adict)-1)", "N = int(input())\ncnt = [0] * (10 ** 5 + 1)\nA = [int(_) for _ in input().split()]\nfor i in range(N):\n    cnt[A[i]] += 1\nm = 0\nfor i in range(10 ** 5 + 1):\n    if cnt[i] > 0 and cnt[i] % 2 == 0:\n        m += 1\nprint((len(set(A)) - int(m % 2 == 1)))\n", "\ndef resolve():\n    N = int(input())\n    A = list(map(int, input().split(\" \")))\n    import collections\n    cnter = collections.Counter(A)\n    #print(cnter)\n    evens = 0\n    for i in list(cnter.values()):\n        if i%2 == 0:\n            evens += 1\n    print((len(cnter)-1 if evens%2==1 else len(cnter)))\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "n = int(input())\nL = list(map(int,input().split()))\nL.sort()\n\nfrom collections import Counter\nL = Counter(L)\n\ncnt = 0\none = 0\nfor v in L.values():\n    if v%2 ==0:\n        cnt +=1\n    else:\n        one +=1\nif cnt%2 == 0:\n    one +=cnt\nelse:\n    one +=(cnt-1)\nprint(one)", "from collections import defaultdict\nN = int(input())\nA = list(map(int,input().split()))\nd = defaultdict(int)\nfor x in A:\n    d[x] += 1\ncnt = 0\nfor x in d:\n    if d[x] >= 2 and d[x] % 2 == 0:\n        cnt += 1\nans = len(d.keys())\nif cnt % 2 == 1:\n    ans -= 1\nprint(ans)", "N=int(input())\nA=list(map(int,input().split()))\nA.sort()\nd=[]\nfor i in range(N-1):\n  if A[i]==A[i+1]:\n    d.append(A[i])\n\nprint(N-len(d) if len(d)%2==0 else N-len(d)-1)", "\nn=int(input())\na=list(map(int,input().split()))\n\n#a=[2,2,2,3,4,3,1,2,1,3,1,2,1,2,2,1,2,1]\n#n=len(a)\n\na.sort()\n\nfrom collections import Counter\na=Counter(a)\ncsum=0\nfor i,icnt in a.most_common():\n    csum+=icnt-1\nif csum%2==1:\n    csum+=1\nprint((n-csum))\n", "from collections import Counter\nn = int(input())\na = list(map(int ,input().split()))\n\ncnt = Counter(a) # \u30ab\u30fc\u30c9\u306e\u5024\u3092\u30ab\u30a6\u30f3\u30c8\nans = len(cnt) # \u5b58\u5728\u3059\u308b\u5024\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\nif ans%2 == 0: print(ans-1) # \u5b58\u5728\u3059\u308b\u5024\u306e\u6570\u304c\u5076\u6570\u3067\u3042\u308c\u30701\u56de\u53d6\u308a\u9664\u304f\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081-1\u3092\u3059\u308b\nelse: print(ans) # \u5947\u6570\u306e\u5834\u5408\u306f\u305d\u306e\u307e\u307e", "_ = input()\na = set(map(int,input().split()))\n\nif len(a)%2 == 0:\n    print(len(a)-1)\nelse:\n    print(len(a))", "import sys\nfrom collections import Counter\ninput = sys.stdin.readline\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = Counter(a)\n    \n    other = 0\n    \n    ans = n\n    for k, v in list(a.items()):\n        ans -= v - 1\n        if not v%2:\n            other += 1\n    \n    ans -= other%2\n        \n\n    print(ans)\n    \n    \n    \ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nreadline = sys.stdin.readline\nfrom collections import Counter\n\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().rstrip().split()))\n    c = Counter(A)\n    for key, val in c.items():\n        if val > 2:\n            if val % 2 == 0:\n                c[key] = 2\n            else:\n                c[key] = 1\n    \n    if len([val for key, val in c.items() if c[key] == 2]) % 2 == 0:\n        print(len(c))\n    else:\n        print(len(c) - 1)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\ncard_ls = list(map(int, input().split()))\ncard_ls.sort()\nhave_to_eat = 0\nfor i in range(1,n):\n    if card_ls[i-1] == card_ls[i]:\n        have_to_eat += 1\nif have_to_eat % 2 == 1:\n    have_to_eat += 1\nans = n - have_to_eat\nprint(ans)\n", "from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\nd = dict(Counter(A))\nkaburi = 0\nfor key in d:\n  kaburi += d[key]-1\n  \nprint(N - (kaburi%2 + kaburi))", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\nc = Counter(A)\neat = 0\nfor v in c.most_common():\n  if v[1] >= 2:\n    eat += v[1] - 1\n\nif eat % 2 != 0:\n  eat += 1\n  \nprint(N-eat)", "from collections import Counter\nN = int(input())\nA = list(map(int,input().split()))\nlen_set = len(list(set(A)))\nCA = Counter(A)\ncount = 0\nfor i,j in CA.items():\n  if j%2 == 0:\n    count += 1\n\nif count%2 == 0:\n  ans = len_set\nelse:\n  ans = len_set - 1\n\nprint(ans)", "from collections import Counter\nn = int(input())\na = [int(i) for i in input().split()]\ncnt = Counter(a)\nl = len(cnt)\neven = 0\nfor v in cnt.values():\n    if v%2 == 0: even += 1\nprint(l if even%2 == 0 else l-1)", "N = int(input())\nA = [int(a) for a in input().split()]\nz = {}\n\nfor n in A:\n  if n in z:\n    z[n] += 1\n  else:\n    z[n] = 1\n\ncnt_even = 0\nfor key, val in list(z.items()):\n  if val % 2 == 0: #even\n    cnt_even += 1\n  \ncnt_odd = len(z) - cnt_even\n\ntot = cnt_odd + cnt_even - (cnt_even % 2)\nprint(tot)\n\n", "from collections import Counter\nN = int(input())\nA = list(map(int,input().split()))\ncount = Counter(A)\nans = len(count)\nif ans % 2 == 0:\n    ans -= 1\nprint(ans)", "N=int(input())\nA=list(map(int,input().split()))\nA.sort()\ndp=[0]*(10**5+1)\nbp=[]\nfor i in range(N):\n  if dp[A[i]]!=0:\n    bp.append(A[i])\n  dp[A[i]]+=1\nbp.sort()\np=len(bp)\nq=p\no=0\nfor i in range(10**5):\n  if p<3:\n    break\n  p-=2\nif p==0:\n  N-=q\nelif p==1:\n  N=N-q-1\nelse:\n  N=N-q\nprint(N)", "from collections import Counter\nN  = int(input())\nA = list(map(int, input().split()))\nC = Counter(A)\nc = 0\nfor k, v in C.items():\n    c += v - 1\nif c % 2 == 1:\n    c += 1\nprint(N - c)", "import sys;input = lambda : sys.stdin.readline()\nimport collections\nn = int(input())\na = sorted(list(map(int, input().split())))\nd = collections.Counter(a)\nneed = {}\nfor k,v in list(d.items()):\n    if v>1:\n        need[k]=v\nif (sum(list(need.values()))-len(need))%2==0:\n    print((len(set(a))))\nelse:\n    print((len(set(a))-1))\n", "#D\nimport collections\nN = int(input())\nA = list(map(int,input().split()))\nc = collections.Counter(A)\nmost = c.most_common()\nans = len(most)\neaten = 0\nfor t in most:\n    if t[1] != 1:\n        eaten += t[1]-1\nif eaten%2 == 1:\n    print(ans-1)\nelse:\n    print(ans)", "from collections import defaultdict\nn = int(input())\na_list = [int(x) for x in input().split()]\nd = defaultdict(int)\nfor a in a_list:\n    d[a] += 1\nprint(len(d.keys()) - sum([1 - v % 2 for v in d.values()]) % 2)", "_,*l=map(int,open(0).read().split())\nc=len(set(l))\nprint(c-1+c%2)", "#!/usr/bin/env python3\nfrom collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\ncnt = Counter(A).most_common()\neven = 0\nfor k, v in cnt:\n    if v % 2 == 0:\n        even += 1\nprint(len(set(A)) - even % 2)", "from collections import defaultdict\n\nN=int(input())\nA=list(map(int, input().split()))\n\ndict=defaultdict(int)\n\nfor a in A:\n  dict[a]+=1\n  \nnum=[0]*2\nfor v in dict.values():\n  num[v%2]+=1\n  \nif num[0]%2==0:\n  print(sum(num))\nelse:\n  print(sum(num)-1)", "n, *a = map(int, open(0).read().split())\nk = len(set(a))\nprint(k - (n - k) % 2)", "N = int(input())\nA = list(map(int, input().split()))\ns = set(A)\n\nif len(s)%2 == 0:\n  ans = len(s)-1\nelse:\n  ans = len(s)\nprint(ans)", "from collections import Counter\n\nN = int(input())\na = list(map(int, input().split()))\n\nna = len(set(a))\ncnt = Counter(a)\nls = cnt.most_common()\nlst = [ 2 for i in ls if i[1]%2==0]\n\nif len(lst)%2==1:\n    print((na - 1))\nelse:print(na)\n", "import sys\nreadline = sys.stdin.readline\nfrom collections import Counter\n\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().rstrip().split()))\n    c = Counter(A)\n    cnt = 0\n    for key, val in c.items():\n        if val > 2:\n            if val % 2 == 0:\n                c[key] = 2\n                cnt += 1\n            else:\n                c[key] = 1\n        elif val == 2:\n            cnt += 1\n    \n    if cnt % 2 == 0:\n        print(len(c))\n    else:\n        print(len(c) - 1)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\n\nd = defaultdict(int)\nfor i in range(N):\n    if d[A[i]] == 0:\n        d[A[i]] = 1\n    else:\n        d[A[i]] += 1\n\n# 3\u3064\u4ee5\u4e0a\u88ab\u308a\u304c\u3042\u308b\u3068\u304d\u306f\u540c\u3058\u6570\u5b57\u3092\u3068\u3063\u3066\u3044\u304f\n# 2\u3064\u304b\u3076\u308a\u304c\u3042\u308b\u3068\u304d\u306f\u305d\u306e\u4ed6\u306b2\u3064\u4ee5\u4e0a\u88ab\u308a\u304c\u3042\u308b\u3084\u3064\u304c\u3042\u308c\u3070\u305d\u308c\u3092\u53d6\u308a\u3001\u306a\u3051\u308c\u3070\u30011\u307e\u3044\u306e\u3084\u3064\u3092\u9069\u5f53\u306b\u9078\u3076\n\nsorted_d = sorted(list(d.items()), key=lambda x: x[1], reverse=True)\nfix_d = []\nfor i in range(len(sorted_d)):\n    if sorted_d[i][1] >= 3:\n        if sorted_d[i][1] % 2 == 0:\n            # sorted_d[i][1] = 2\n            fix_d.append([sorted_d[i][0], 2])\n        else:\n            # sorted_d[i][1] = 1\n            fix_d.append([sorted_d[i][0], 1])\n    else:\n        fix_d.append([sorted_d[i][0], sorted_d[i][1]])\n\nfix_d.sort(key=lambda x: x[1], reverse=True)\n\ncount = 0\nfor i in range(len(fix_d)):\n    if fix_d[i][1] == 2:\n        count += 1\n\nif count % 2 == 0:\n    print((len(fix_d)))\nelse:\n    print((len(fix_d) - 1))\n", "# N = 15\n# ARR = [1, 3, 5, 2, 1, 3, 2, 8, 8, 6, 2, 6, 11, 1, 1]\n\n# N = 5\n# ARR = [1, 2, 1, 3, 7]\n\nN = int(input())\nARR = list(map(int,input().split()))\n\ndef calculate(n, arr):\n    dict = {}\n    for i in range(n):\n        if dict.get(arr[i]) == None:\n            dict.__setitem__(arr[i], 1)\n        else:\n            tmp = dict.get(arr[i])\n            dict.__setitem__(arr[i], tmp + 1)\n\n    k1 = len(list(dict.keys()))\n\n    if k1 % 2 == 0:\n        print((k1 - 1))\n    else:\n        print(k1)\n\n\ncalculate(N, ARR)\n", "N = int(input())\nA = list(map(int, input().split()))\n\nkind = len(set(A))\nif (N - kind) % 2 == 0:\n    print(kind)\nelse:\n    print(kind - 1)", "from collections import Counter\nimport sys\n\nN=int(input())\ncards=list(map(int,sys.stdin.readline().strip().split()))\nc=Counter(cards)\n\neven=len([x for x in iter(c) if c[x]%2==0])\nodd=len([x for x in iter(c) if c[x]%2==1])\n\nprint(even-(even%2)+odd)", "N=int(input())\nA=list(map(int,input().split()))\ncnt=[0 for _ in range(100001)]\nfor i in range(N):\n    cnt[A[i]]=1\n\nx=cnt.count(1)\ny=N-x\nif y%2==0:\n    print((N-y))\nelse:\n    print((N-y-1))\n", "n = int(input())\na = sorted(list(map(int, input().split())))\nans = 0\nfor i in range(1, len(a)):\n  if a[i] == a[i - 1]:\n    ans += 1\nprint((n - (ans + 1) // 2 * 2))\n", "n = int(input())\nA = tuple(map(int, input().split()))\n\nfrom collections import Counter\nCA = Counter(A)\ncu2 = 0\nfor k, v in list(CA.items()):\n    cu2 += v-1\n\nprint((len(A) - cu2 - cu2%2))\n", "n=int(input())\na=list(map(int,input().split()))\nd=dict()\nfor i in a:\n    if i in d:\n        d[i]+=1\n    else:\n        d[i]=1\np=0\nk=0\nfor i in list(d.values()):\n    p+=i//2\n    k-=i%2-1\nprint((n-(p-k//2)*2))\n", "n = int(input())\na = list(map(int, input().split()))\n\nb = len(set(a))\nif b % 2 == 1:\n    print(b)\nelse:\n    print((b-1))\n", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil,pi,factorial\nfrom operator import itemgetter\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ndef SI(): return input().rstrip()\ndef printns(x): print(('\\n'.join(x)))\ndef printni(x): print(('\\n'.join(list(map(str,x)))))\ninf = 10**17\nmod = 10**9 + 7\nn=I()\nlis=LI()\nc=Counter(lis)\nsm=0\nfor i in list(c.keys()):\n    sm+=c[i]-1\nif sm%2==0:\n    print((len(list(c))))\nelse:\n    print((len(list(c))-1))\n    \n    \n        \n", "def main():\n    from collections import Counter\n    n, *a = list(map(int, open(0).read().split()))\n    s = len(set(a))\n\n    if s % 2 == 1:\n        print(s)\n    else:\n        print((s - 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\ndef main():\n    n, *a = map(int, read().split())\n    r = len(set(a))\n    r -= (n - r)&1\n    print(r)\n\ndef __starting_point():\n    main()\n__starting_point()"]