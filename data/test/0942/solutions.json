["input()\nl = list(map(int, input().split()))\nd = {}\nd2 = {}\nans = []\nn = 1\nfor i in l:\n    i = len(l) - i\n    if i not in d:\n        d[i] = n\n        n += 1\n    if i not in d2:\n        d2[i] = 0\n    if d2[i] >= i:\n        d[i] = n\n        d2[i] = 0\n        n += 1\n    ans.append(d[i])\n    d2[i] += 1\nnums = {}\ntot = 0\nfor i in ans:\n    tot += 1\n    if i not in nums:\n        nums[i] = 0\n    nums[i] += 1\nfor i in range(len(ans)):\n    if tot - nums[ans[i]] != l[i]:\n        print(\"Impossible\")\n        return\nprint(\"Possible\")\nprint(\" \".join(map(str, ans)))\n\n", "import math\n\ndef __starting_point():\n\n\tn = int(input())\n\tarr = [int(x) for x  in input().split()]\n\n\n\tans  = []\n\td = {}\n\tc = {}\n\tb = [0]*n\n\tind  = 0 \n\tfor i in range(n) : \n\t\tif arr[i] in list(d.keys()) : \n\t\t\tif d[arr[i]]== 0 :\n\t\t\t\tind+=1\n\t\t\t\tc[arr[i]]=ind\n\t\t\t\tb[i]=ind\n\t\t\t\td[arr[i]]=n-arr[i]-1\n\t\t\telse :\n\t\t\t\td[arr[i]]-=1\n\t\t\t\tb[i]=c[arr[i]]\n\t\telse : \n\t\t\tind+=1\n\t\t\tc[arr[i]]=ind\n\t\t\tb[i]=ind\n\t\t\td[arr[i]]=n-arr[i]-1\n\tans = True\n\tfor i in d : \n\t\tif d[i]!=0:\n\t\t\tans =False\n\tif ans : \n\t\tprint (\"Possible\")\n\t\tprint(*b)\n\telse : \n\t\tprint(\"Impossible\")\n\n\n\n\n\n\n__starting_point()", "n = int(input())\na = [int(x) for x in input().split()]\nt = 0\nd1 = {}\nuse1 = {}\nuse = {}\nfor x in a:\n\tif x in d1:\n\t\tif use1[x] == n - x:\n\t\t\tt += (n - x)\n\t\t\tuse1[x] = 0\n\t\tuse1[x] += 1\n\telse:\n\t\td1[x] = 0\n\t\tt += (n - x)\n\t\tuse1[x] = 1\n\nif n != t:\n\tprint(\"Impossible\")\nelse:\n\tprint(\"Possible\")\n\td = {}\n\tcv = 1\n\tfor x in a:\n\t\tif x in d:\n\t\t\tif use[d[x]] == n - x:\n\t\t\t\td[x] = cv\n\t\t\t\tcv += 1\n\t\t\t\tuse[d[x]] = 0\n\t\t\tuse[d[x]] += 1\n\t\t\tprint(d[x], end = ' ')\n\t\telse:\n\t\t\td[x] = cv\n\t\t\tuse[d[x]] = 1\n\t\t\tcv += 1\n\t\t\tprint(d[x], end = ' ')\n", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef main():\n\tn = mint()\n\ta = [None]*n\n\tr = [None]*n\n\tj = 0\n\tfor i in mints():\n\t\ta[j] = (n-i, j)\n\t\tj+=1\n\ta.sort()\n\tj = 1\n\ti = 0\n\twhile i < n:\n\t\tcnt = a[i][0]\n\t\tfor k in range(i,i+cnt):\n\t\t\tif k >= n or a[k][0] != cnt:\n\t\t\t\tprint(\"Impossible\")\n\t\t\t\treturn\n\t\t\tr[a[k][1]] = j\n\t\tj+=1\n\t\ti+=cnt\n\tprint(\"Possible\")\n\tprint(*r)\n\nmain()\n", "n = int(input())\na = list(map(int, input().split()))\n\na = [n-x for x in a]\n\ngroups = {}\nfor i, x in enumerate(a):\n\tif x not in groups:\n\t\tgroups[x] = []\n\tgroups[x].append(i)\n\nhats = [0] * n\ncurrent_hat = 1\n\nfor count, ids in list(groups.items()):\n\tif len(ids)%count != 0:\n\t\tprint(\"Impossible\")\n\t\treturn\n\n\tfor g in range(len(ids)//count):\n\t\tfor _id in ids[count*g:count*(g+1)]:\n\t\t\thats[_id] = current_hat\n\t\tcurrent_hat += 1\n\nprint(\"Possible\")\nprint(*hats)\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\nLIST=[[] for i in range(n+1)]\n\nfor i in range(n):\n    LIST[n-A[i]].append(i)\n\nANSLIST=[None]*(n+1)\nh=1\nfor i in range(1,n+1):\n    if len(LIST[i])%i!=0:\n        print(\"Impossible\")\n        return\n\n    else:\n        j=0\n        while j<len(LIST[i]):\n            ANSLIST[LIST[i][j]]=h\n            j+=1\n            if j%i==0:\n                h+=1\n\nprint(\"Possible\")\nfor a in ANSLIST[:-1]:\n    print(a,end=\" \")\n\n\n", "n = int(input())\nb = list(map(int, input().split()))\na = [[b[i], i] for i in range(n)]\na.sort()\n\nans = [0] * n\n\ncur = 0\nnum = 1\nwhile cur < n:\n\tnec = a[cur][0]\n\tng = False\n\tfor i in range(n-nec):\n\t\tif cur+i >= n:\n\t\t\tng = True\n\t\t\tbreak\n\t\telif a[cur+i][0] != a[cur][0]:\n\t\t\tng = True\n\t\t\tbreak\n\t\telse:\n\t\t\tans[a[cur+i][1]] = num \n\n\tif ng:\n\t\tprint(\"Impossible\")\n\t\tbreak\n\n\tnum += 1\n\tcur += n-nec\n\nelse:\n\tprint(\"Possible\")\n\tprint(*ans)", "n=int(input())\na=list(map(int,input().split()))\ncounts=[0]*n\ndone=False\nfor i in range(n):\n    counts[a[i]]+=1\nfor i in range(n):\n    if counts[i]%(n-i)!=0:\n        print(\"Impossible\")\n        done=True\n        break\n    else:\n        counts[i]//=(n-i)\ncountsum=[counts[0]]\nfor i in range(n-1):\n    countsum.append(countsum[-1]+counts[i+1])\nb=[]\nseen=[0]*n\nfor i in range(n):\n    b.append(countsum[a[i]]-seen[a[i]]//(n-a[i]))\n    seen[a[i]]+=1\nout=\"\"\nfor i in range(n):\n    out+=str(b[i])+\" \"\nif not done:\n    print(\"Possible\")\n    print(out[:-1])", "'''input\n6\n3 3 3 3 3 3\n5\n3 3 2 2 2\n4\n0 1 2 3\n\n\n'''\nn = int(input())\na = list(map(int, input().split()))\ns = [0] * (n + 1)\nv = [0] * (n + 1)\nr = [0] * (n + 1)\nb = [0] * n\nm = 0\nfor i in range(n):\n\ta[i] = n - a[i]\n\ts[a[i]] += 1\nfor i in range(n):\n\tif r[a[i]] == 0:\n\t\tm += 1\n\t\tv[a[i]] = m\n\t\tr[a[i]] = a[i]\n\tb[i] = v[a[i]]\n\tr[a[i]] -= 1\n\t# print(b[i])\nif any(x for x in r):\n\tprint(\"Impossible\")\n\treturn\nprint(\"Possible\")\nprint(*b)\n", "from collections import Counter as C\nn = int(input())\nl = [*map(lambda x: n - int(x), input().split())]\nc = C(l)\nd = {}\n# print(c)\ntry:\n    for k, v in c.items():\n        if v % k == 0:\n            d[k] = v//k\n        else:\n            raise ValueError()\n    print('Possible')\n    d_ = {}\n    curr = 0\n    for e in l:\n        # print(d, d_)\n        if e in d_:\n            if d_[e][1] >= e:\n                curr += 1\n                d_[e] = [curr, 1]\n            else:\n                d_[e][1] += 1\n        else:\n            curr += 1\n            d_[e] = [curr, 1]\n        print(d_[e][0], end=' ')\nexcept:\n    print('Impossible')", "from collections import Counter\n\nn = int(input())\na = tuple((n - int(x) for x in input().split()))\na1 = [[] for _ in range(n + 2)]\n''' :type: list[list[int]] '''\nb = [1] * n\nfor i in range(n):\n\ta1[a[i]].append(i)\ni = 1\nm = 1\nfor k in range(1, n + 1):\n\tfor j in a1[k]:\n\t\tb[j] = i\n\t\tif m == k:\n\t\t\tm = 1\n\t\t\ti += 1\n\t\telse:\n\t\t\tm += 1\n\tif m != 1:\n\t\tprint('Impossible')\n\t\tbreak\nelse:\n\tprint('Possible')\n\tprint(*b)\n", "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n    b[i] = n - a[i]\ncnt = [[] for i in range(n + 1)]\nfor i in range(n):\n    cnt[b[i]].append(i)\nf = True\nfor i in range(1, n + 1):\n    if len(cnt[i]) % i != 0:\n        f = False\n        break\nif not f:\n    print(\"Impossible\")\nelse:\n    t = 1\n    ans = [0] * n\n    for i in range(1, n + 1):\n        x = cnt[i]\n        if len(x) != 0:\n            y = 0\n            for j in x:\n                ans[j] = t\n                y += 1\n                if y == i:\n                    t += 1\n                    y = 0\n    print(\"Possible\")\n    print(*ans)", "n = int(input())\na = [(n - int(x)) for x in input().split()]\nb = [0] * n\nfh = 1\ni = 0\nhd = dict()\nwhile i < n:\n    if a[i] == 1:\n        b[i] = fh\n        fh += 1\n    elif a[i] in hd:\n        b[i] = hd[a[i]][0]\n        hd[a[i]][1] -= 1\n        if hd[a[i]][1] == 0:\n            del hd[a[i]]\n    else:\n        b[i] = fh\n        hd[a[i]] = [fh, a[i]-1]\n        fh += 1\n    i += 1\nif len(hd) != 0:\n    print(\"Impossible\")\nelse:\n    print(\"Possible\")\n    print(*b)\n", "num = int(input())\nnums = input()\nstatement = [int(i) for i in nums.split()]\n\nlog = {}\ngroup_num = {}\nanchor = 1\ntotal = num\nstatus = 'Possible'\nans = []\nfor i, s in enumerate(statement):\n    if s not in log or group_num[s] == 0:\n        log[s] = anchor\n        anchor += 1\n        group_num[s] = num - s\n        total -= group_num[s]\n        if total < 0:\n            status = 'Impossible'\n            break\n    ans.append(log[s])\n    group_num[s] -= 1\n\nprint(status)\nif status == 'Possible':\n    for i in range(num - 1):\n        print(ans[i], end=' ')\n    print(ans[num - 1])", "n = int(input())\naa = list(map(int, input().split()))\n\n\ndef cal():\n    ncol = [0] * (n + 1)\n    ansmap = [0] * n\n    ans = [0] * n\n    colcnt = [0] * (n + 1)\n    colmap = [0] * (n + 1)\n    icol = 0\n    for i, a in enumerate(aa):\n        ncol[n - a] += 1\n        ansmap[i] = n - a\n\n    for i, col in enumerate(ncol[1:], 1):\n        if col % i:\n            return\n\n    for i, col in enumerate(ansmap):\n        if not colcnt[col] % col:\n            icol += 1\n            colmap[col] = icol\n\n        ans[i] = colmap[col]\n        colcnt[col] += 1\n\n    return ans\n\n\nans = cal()\nif ans:\n    print('Possible')\n    print(' '.join(map(str, ans)))\nelse:\n    print('Impossible')\n", "n = int(input())\na = list(map(int, input().split()))\nif 0 in a:\n    if len(set(a)) > 1:\n        print('Impossible')\n    else:\n        print('Possible')\n        print(*[1]*n)\nelif not all(q < n for q in a):\n    print('Impossible')\nelse:\n    s = {}\n    answer = [0 for q in range(n)]\n    for q in range(len(a)):\n        if a[q] in s:\n            s[a[q]].append(q)\n        else:\n            s[a[q]] = [q]\n    q2 = 0\n    for q in s:\n        if len(s[q]) % (n-q) != 0:\n            print('Impossible')\n            break\n        for q1 in range(len(s[q])):\n            if q1 % (n-q) == 0:\n                q2 += 1\n            answer[s[q][q1]] = q2\n    else:\n        print('Possible')\n        print(*answer)\n", "n = int(input())\na = [int(s) for s in input().split()]\nb = [-1 for i in range(n)]\nm = {}\nnextnum = 1\nfor i in range(n):\n    # print(m)\n    if b[i] == -1:\n        if m.get(a[i]) and m[a[i]][1] > 0:\n            b[i] = m[a[i]][0]\n            m[a[i]][1] -= 1\n            if m[a[i]][1] == 0:\n                m.pop(a[i])\n        else:\n            z = n-a[i]-1\n            b[i] = nextnum\n            if z:\n                m[a[i]] = [nextnum, z]\n            nextnum += 1\n\nif m:\n    print(\"Impossible\")\nelse:\n    print(\"Possible\")\n    print(*b)\n", "n = int(input())\n\ncl = list(map(int, input().split()))\n\npos = {}\ncolor = 0\nres = []\n\nfor x in cl:\n  if x in pos.keys():\n    if pos[x][0]!=0:\n      res.append(pos[x][1])\n      pos[x][0]-=1\n    else:\n      color+=1\n      res.append(color)\n      pos[x] = [n-x-1, color]\n  else:\n    color+=1\n    res.append(color)\n    pos.update({x:[n-x-1, color]})\n\nfor x in pos.keys():\n  if pos[x][0]!=0:\n    print(\"Impossible\")\n    return\n\nprint(\"Possible\")\nprint(*res)", "n=int(input())\narr=list(map(int,input().split()))\nansarr=[0]*n\nflag=0\ndict1={}\ndict2={}\nfor i in range(n):\n    try:\n        dict1[arr[i]].append(i)\n    except:\n        KeyError\n        dict1[arr[i]]=[i]\n        dict2[arr[i]]=0\n\ntempcount=0\nfor i in dict1.keys():\n    count=0\n    while(dict2[i]<len(dict1[i])):\n        if(dict2[i]+n-i>len(dict1[i])):\n            flag=1\n            break\n        else:\n            tempcount+=n-i\n            dict2[i]+=n-i\nif(tempcount!=n):\n    flag=1\nif(flag==1):\n    print('Impossible')\nelse:\n    count=0\n    val=1\n    for i in dict1.keys():\n        for j in range(0,len(dict1[i]),n-i):\n            for k in range(n-int(i)):\n                ansarr[dict1[i][j+k]]=val\n            val+=1\n    print('Possible')\n    print(*ansarr)", "#!/usr/bin/env python3\nimport sys\ndef __starting_point():\n    n = int(input())\n    a = {}\n    a_s = input().split()\n    for i in range(n):\n        x = n - int(a_s[i])\n        a[x] = a.get(x, 0) + 1\n        a_s[i] = x\n    for i in a:\n        if (i < 1) or (i > n):\n            print(\"Impossible\")\n            return\n        if a[i] % i != 0:\n            print(\"Impossible\")\n            return\n    print(\"Possible\")\n    used = 0\n    col = {}\n    num = {}\n    b = []\n    for x in a_s:\n        if x not in col or num[x] == x:\n            used += 1\n            col[x] = used\n            num[x] = 1\n            b.append(used)\n        else:\n            num[x] += 1\n            b.append(col[x])\n    print(\" \".join(map(str, b)))\n\n__starting_point()", "n = int(input())\na = [int(element) for element in input().split(' ')]\nb = dict()\nfor i in range(n):\n    try:\n        b[a[i]] += 1\n    except:\n        b[a[i]] = 1\nc = [(b[k] % (n-k)) == 0 for k in list(b.keys())]\nd = [b[k] for k in a]\n\nif all(c):\n    print(\"Possible\")\n    types = dict()\n    hat = 1\n    for k in list(b.keys()):\n        pergroup = n-k\n        groups = b[k] // pergroup\n        hatsgroup = list()\n        for i in range(groups):\n            for j in range(pergroup):\n                hatsgroup.append(hat)\n            hat += 1\n        types[k] = hatsgroup\n    hats = list()\n    for i in range(n):\n        hats.append(types[a[i]].pop())\n    print(' '.join(str(e) for e in hats))\n\nelse:\n    print(\"Impossible\")\n", "import math\n\n\ndef hats(n, arr):\n    processed = [False] * n\n    hats = [None] * n\n    cur_hat = 0\n    for i, diff_count in enumerate(arr):\n        if processed[i]: continue\n        cur_hat += 1\n        hats[i] = cur_hat\n        processed[i] = True\n        same_count = n - diff_count - 1\n        if not same_count: continue\n        for j in range(i+1, n):\n            if arr[j] == diff_count:\n                same_count -= 1\n                processed[j] = True\n                hats[j] = cur_hat\n            if not same_count:\n                break\n        if same_count:\n            print('Impossible')\n            return\n    print('Possible')\n    print(' '.join(list(map(str, hats))))\n\n\ndef __starting_point():\n    n = int(input())\n    answers = list(map(int, input().strip().split()))\n    hats(n, answers)\n\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\nd={}\nl=[[] for i in range(n+1)]\nfor i in range(n):\n    d[a[i]]=d.get(a[i],0)+1\n    l[n-a[i]].append(i+1)\nb=list(d.keys())\nc=[]\nfor i in b:\n    c.append([d[i]//(n-i),n-i])\nk=0\nfor i in c:\n    k+=i[0]*i[1]\nif k!=n:\n    print('Impossible')\nelse:\n    print('Possible')\n    co=1\n    ans=[0]*(n+1)\n    for i in c:\n        for j in range(i[0]):\n            for k in range(i[1]):\n                x=l[i[1]].pop()\n                ans[x]=co\n            co+=1\n    print(*ans[1:])", "n = int(input())\nL = [n-int(x) for x in input().split()]\nD = {}\nfor i in L:\n    if i in D:\n        D[i] += 1\n    else:\n        D[i] = 1\ns = 0\ncheck = True\nfor i in D.keys():\n    if D[i]%i != 0:\n        check = False\n        break\n    else:\n        s += D[i]\nif s != n:\n    print('Impossible')\n\nelse:\n    if check == False:\n        print('Impossible')\n    else:\n        print('Possible')\n        small = 1\n        D2 = {}\n        for i in D:\n            D2[i] = list(range(small,small+(D[i]//i)))*i\n            small += D[i]//i\n        for i in L:\n            print(D2[i][-1],end = ' ')\n            D2[i].pop()"]