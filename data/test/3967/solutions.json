["import itertools\n\nunfold = itertools.chain.from_iterable\n\nspeedup = 400000\n\ndef jumps(a):\n    d = speedup\n    while d < a - 1:\n        c = (a + d - 1) // d\n        d = (a + c - 2) // (c - 1)\n        yield d\n\n\ndef calc(d):\n    return sum(d - 1 - (i - 1) % d for i in a)\n\ndef ans():\n    for d, pd in zip(D, D[1:]):\n        d -= 1\n        cd = calc(d)\n        if cd <= k:\n            return d\n        if d == pd:\n            continue\n        cpd = calc(pd)\n        if d - pd >= (cd - k) * (d - pd) / (cd - cpd):\n            return d - (cd - k) * (d - pd) / (cd - cpd)\n    return 1\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nspeedup = min(speedup, 2 * int(max(a) ** 0.5))\n\nD = sorted(set(range(1, speedup + 1)).union([max(a) + k + 1]).union(set(\n    unfold(map(jumps, a)))), reverse=True)\n    \nprint('%d' % ans())", "import itertools\n\nunfold = itertools.chain.from_iterable\n\ndef jumps(a):\n    d = speedup\n    while d < a - 1:\n        c = (a + d - 1) // d\n        d = (a + c - 2) // (c - 1)\n        yield d\n\n\ndef calc(d):\n    return sum(d - 1 - (i - 1) % d for i in a)\n\ndef ans():\n    for d, pd in zip(D, D[1:]):\n        d -= 1\n        cd = calc(d)\n        if cd <= k:\n            return d\n        if d == pd:\n            continue\n        cpd = calc(pd)\n        if d - pd >= (cd - k) * (d - pd) / (cd - cpd):\n            return d - (cd - k) * (d - pd) / (cd - cpd)\n    return 1\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nspeedup = int(max(a) ** 0.5)\n\nD = sorted(set(range(1, speedup + 1)).union([max(a) + k + 1]).union(set(\n    unfold(map(jumps, a)))), reverse=True)\n    \nprint('%d' % ans())", "import itertools\nimport time\n\nunfold = itertools.chain.from_iterable\n\nt = time.time() + 1900\ndef jumps(a):\n    d = speedup\n    if time.time() > t:\n        print(anss)\n        return\n    try:\n        while True:\n            c = (a + d - 1) // d\n            d = (a + c - 2) // (c - 1)\n            yield d\n    except:\n        return\n\n#    while d < a - 1:\n#        c = (a + d - 1) // d\n#        d = (a + c - 2) // (c - 1)\n#        yield d\n\ndef calc(d):\n    return (d - 1) * len(a) - sum(i % d for i in a)\n\ndef ans1(D):\n    for d in D:\n        d -= 1\n        if calc(d) <= k:\n            return d\n    return 1\n\ndef ans():\n    for d, pd in zip(D, D[1:]):\n        if time.time() > t:\n            return anss\n        d -= 1\n        cd = calc(d)\n        if cd <= k:\n            return d\n        if d == pd:\n            continue\n        cpd = calc(pd)\n        if (d - pd) * (cd - cpd) >= ((cd - k) * (d - pd) + cd - cpd - 1):\n            return d - ((cd - k) * (d - pd) + cd - cpd - 1) // (cd - cpd)\n    return anss\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nspeedup = int(2 * max(a) ** 0.55)\n\nlb = int(max(a) ** 0.1 + 10)\n\na = [i - 1 for i in a]\nanss = ans1(sorted(range(2, lb + 1), reverse=True))\nif anss <= lb / 2:\n    print(anss)\n    return\n\na = [i + 1 for i in a]\nD = sorted(set(range(lb + 1, speedup + 1)).union(set([speedup, max(a) + k + 1]).union(set(\n    unfold(map(jumps, a))))), reverse=True)\n\na = [i - 1 for i in a]\nprint(int(ans()))"]