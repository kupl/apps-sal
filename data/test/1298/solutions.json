["n = int(input())\na = input()\nkol1 = 0\nkol0 = 0\nfor i in range(len(a)):\n    if a[i] == \"1\":\n        kol1 += 1\n    else:\n        kol0 += 1\nprint(abs(kol1 - kol0))\n", "n = int(input())\n\ns = input()\n\nz = 0\no = 0\n\nfor i in s:\n    if i == '0':\n        z += 1\n    else:\n        o += 1\n\nprint(abs(z-o))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\n# Guide:\n#   1. construct complex data types while reading (e.g. graph adj list)\n#   2. avoid any non-necessary time/memory usage\n#   3. avoid templates and write more from scratch\n#   4. switch to \"flat\" implementations\n\ndef VI(): return list(map(int,input().split()))\ndef I(): return int(input())\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\ndef ELIST(n): return [[] for i in range(n)]\ndef MI(n=None,m=None): # input matrix of integers\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = VI()\n    return arr\ndef MS(n=None,m=None): # input matrix of strings\n    if n is None: n,m = VI()\n    arr = LIST(n)\n    for i in range(n): arr[i] = input()\n    return arr\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\n    if n is None: n,m = VI()\n    a = MI(n,m)\n    arr = LIST(m,n)\n    for i,l in enumerate(a):\n        for j,x in enumerate(l):\n            arr[j][i] = x\n    return arr\n\n\ndef run(n,x,l,r):\n    s = 0\n    curr = 1\n    for i in range(n):\n        skip = (l[i]-curr) // x\n        s += r[i]-curr-skip*x+1\n        curr = r[i]+1\n    print(s)\n\n\ndef main(info=0):\n    n = I()\n    s = list(input())\n    print(n- min(s.count('0'), s.count('1'))*2)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nstr = input()\na = str.count(\"0\")\nb = str.count(\"1\")\nif a-b > 0 :\n    print(a-b)\nelse:\n    print(b-a)\n", "\n\na = input()\na = input()\n\nprint(abs(len(list([x for x in a if x == '1'])) - len(list([x for x in a if x == '0']))))\n\n\n\n", "n = int(input())\ns = input()\nstack = []\nfor c in s :\n          if stack==[] : stack.append(c)\n          elif stack[len(stack)-1]+c=='10' or stack[len(stack)-1]+c=='01' : stack.pop(len(stack)-1)\n          else : stack.append(c)\nprint(len(stack))\n", "_ = input()\ns = input()\n\nans = 0\nfor i in range(len(s)):\n\tif s[i] == '1':\n\t\tans += 1\n\n\tif s[i] == '0':\n\t\tans -= 1\n\nprint(abs(ans))", "__author__ = 'Andrey'\nn = int(input())\nnum = input()\nstack = []\nfor char in num:\n    if len(stack) == 0:\n        stack.append(char)\n    elif char != stack[-1]:\n        stack.pop()\n    else:\n        stack.append(char)\nprint(len(stack))", "R = lambda: list(map(int, input().split()))\n\ninput()\ns=input()\nn=len(s)\nn0 = s.count('0')\nn1 = s.count('1')\nprint(max(n - n0*2, n-n1*2))\n", "def main():\n    n = input()\n    s = input()\n    d = {'0':0,'1':0}\n    for c in s:\n        d[c] += 1\n    print(len(s)-min(d['0'],d['1'])*2)\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\na=input()\ncnt0=0\ncnt1=0\nfor i in range(n):\n    if a[i]=='0':\n        cnt0+=1\n    else:\n        cnt1+=1\nprint(abs(cnt1-cnt0))\n", "n = int(input())\nstr = input()\nzero = 0\none = 0\nfor char in str:\n    if char == '0':\n        zero+=1\n    else:\n        one+=1\ncount = min(zero, one)\nprint(n-(count*2))", "n = int(input())\ns = input()\nk = 0\nfor i in s:\n    if i == '0':\n        k +=1\nprint(abs(n - 2 * k))\n", "n = int(input())\ns = input()\nd = []\nfor i in s:\n    d.append(i)\n    if len(d) >= 2:\n        if d[-1] == '0' and d[-2] == '1' or d[-1] == '1' and d[-2] == '0':\n            d.pop()\n            d.pop()\nprint(len(d))\n", "\ndef main():\n    input()\n    s = input()\n    one = 0\n    zero = 0\n    for ch in s:\n        if ch == '0':\n            one += 1\n        else:\n            zero += 1\n\n    print(abs(one-zero))\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\na = list(map(int, input()))\nd = []\nfor i in range(len(a)):\n   d.append(a[i])\n   while  len(d) >= 2 and d[-1] + d[-2] == 1:\n     d.pop()\n     d.pop()\n     n -= 2\nprint(n)\n", "n = int(input())\ns = input()\ns = list(map(int, s))\nprint(abs(s.count(1) - s.count(0)))", "import string\nn = input()\ns = str(input())\nz_count = 0\no_count = 0\nfor i in s:\n   if i == '1':\n       o_count += 1\n   if i == '0':\n       z_count += 1\nans = abs(o_count - z_count)\nprint(ans)", "from sys import stdin\ninput = stdin.readline\na = input()\ns = input().rstrip(\"\\n\")\na = s.count(\"1\")\nb = s.count(\"0\")\nprint(abs(a-b))\n", "#!/usr/bin/env python3\n\nn = input()\ns = input()\n\nn_o = len(list(i for i in s if i == '1'))\nn_z = len(list(i for i in s if i == '0'))\n\nprint(max(n_o, n_z) - min(n_o, n_z))", "n = int(input())\nl = input()\nn = 0\nfor e in l:\n    n += (int(e) << 1) - 1\nprint(abs(n))\n    \n    \n", "luv=input()\ncf=input()\nonegod=0\nzerogod=0\nfor I in cf:\n    if I=='1':\n    \n        onegod += 1\n        \nzerogod = len(cf)-onegod\nprint(abs(onegod-zerogod))", "l = int(input())\ns = input()\n\nprint(abs(s.count('1') - s.count('0')))\n", "n = int(input())\ns = input()\nzeros = s.count('0')\nones = s.count('1')\nprint(n - min(zeros, ones)*2)", "import re\n\ndef __starting_point():\n    x = int(input())\n    s = input()\n    zeros, ones = 0, 0\n    for char in s:\n        if char == '0':\n            zeros += 1\n        if char == '1':\n            ones += 1    \n    print(abs(zeros-ones))\n\n__starting_point()"]