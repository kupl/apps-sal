["def main():\n    s = input().split()\n    n, m, k = int(s[0]), int(s[1]), int(s[2])\n    processor = []\n    for x in range(n):\n        for y in range(m):\n            s = input()\n            for z in s:\n                processor.append(int(z) == 1)\n        if x < n - 1:\n            emptyLine = input()\n    counter = 0\n    mk = m * k\n    nmk = n * mk\n    for i in range(nmk):\n        if not processor[i]:\n            continue\n        # back\n        if i >= mk:\n            if processor[i - mk]:\n                # front\n                if i < (nmk - mk):\n                    if processor[i + mk]:\n                        counter += 1\n                        continue\n                # right\n                if (i % k) < (k - 1):\n                    if processor[i + 1]:\n                        if not processor[i - mk + 1]:\n                            counter += 1\n                            continue\n                # down\n                if (i % mk) < (mk - k):\n                    if processor[i + k]:\n                        if not processor[i - mk + k]:\n                            counter += 1\n                            continue\n        # left\n        if (i % k) > 0:\n            if processor[i - 1]:\n                # front\n                if i < (nmk - mk):\n                    if processor[i + mk]:\n                        if not processor[i + mk - 1]:\n                            counter += 1\n                            continue\n                # right\n                if (i % k) < (k - 1):\n                    if processor[i + 1]:\n                        counter += 1\n                        continue\n                # down\n                if (i % mk) < (mk - k):\n                    if processor[i + k]:\n                        if not processor[i + k - 1]:\n                            counter += 1\n                            continue\n        # up\n        if (i % mk) >= k:\n            if processor[i - k]:\n                # front\n                if i < (nmk - mk):\n                    if processor[i + mk]:\n                        if not processor[i + mk - k]:\n                            counter += 1\n                            continue\n                # right\n                if (i % k) < (k - 1):\n                    if processor[i + 1]:\n                        if not processor[i - k + 1]:\n                            counter += 1\n                            continue\n                # down\n                if (i % mk) < (mk - k):\n                    if processor[i + k]:\n                        counter += 1\n                        continue\n    print(counter)\n\n\nmain()\n", "def func(i,j,t):\n    if i > 0:\n        if A[i-1][j][t] == '1':\n            if i < n-1:\n                if A[i+1][j][t] == '1':\n                    return True\n            if j < m-1:\n                if A[i][j+1][t] == '1' and A[i-1][j+1][t] == '0':\n                    return True\n            if t < k-1:\n                if A[i-1][j][t+1] == '0' and A[i][j][t+1] == '1':\n                    return True\n    if j > 0:\n        if A[i][j-1][t] == '1':\n            if j < m-1:\n                if A[i][j+1][t] == '1':\n                    return True\n            if i < n-1:\n                if A[i+1][j][t] == '1' and A[i+1][j-1][t] == '0':\n                    return True\n            if t < k-1:\n                if A[i][j-1][t+1] == '0' and A[i][j][t+1] == '1':\n                    return True\n    if t > 0:\n        if A[i][j][t-1] == '1':\n            if t < k-1:\n                if A[i][j][t+1] == '1':\n                    return True\n            if i < n-1:\n                if A[i+1][j][t] == '1' and A[i+1][j][t-1] == '0':\n                    return True\n            if j < m-1:\n                if A[i][j+1][t-1] == '0' and A[i][j+1][t] == '1':\n                    return True   \n    \n                \n    return False\n\nn,m,k = list(map(int, input().split()))\nA = [0] * n\nfor i in range(n):\n    A[i] = [0] * m\n    for j in range(m):\n        A[i][j] = [0] * k\nfor i in range(n):\n    for j in range(m):\n        per = input()\n        for t in range(k):\n            A[i][j][t] = per[t]\n    if i != n-1:\n        \n        per = input()\nanswer = 0\nfor i in range(n):\n    for j in range(m):\n        for t in range(k):\n            if A[i][j][t] == '1':\n                if func(i,j,t):\n                    answer+=1\n                    \nprint(answer)\n", "n,m,k=(int(z) for z in input().split())\nM=[]\nfor i in range(n):\n\tfor j in range(m):\n\t\ts=input()\n\t\tfor p in range(len(s)):\n\t\t\tM+=[int(s[p])]\n\tif i!=n-1:\n\t\ts=input()\nres=0\ncur=0\nfor i in range(n):\n\tfor j in range(m):\n\t\tfor h in range(k):\n\t\t\tif M[cur]==1:\n\t\t\t\tif 1<=i<=n-2 and M[cur-m*k]+M[cur+m*k]==2:\n\t\t\t\t\tres+=1\n\t\t\t\telif 1<=h<=k-2 and M[cur-1]+M[cur+1]==2:\n\t\t\t\t\tres+=1\n\t\t\t\telif 1<=j<=m-2 and M[cur-k]+M[cur+k]==2:\n\t\t\t\t\tres+=1\n\t\t\t\telif h<=k-2 and j>=1 and M[cur+1]+M[cur-k]==2 and M[cur-k+1]==0:\n\t\t\t\t\tres+=1\n\t\t\t\telif j<=m-2 and h>=1 and M[cur-1]+M[cur+k]==2 and M[cur+k-1]==0:\n\t\t\t\t\tres+=1\n\t\t\t\telif h<=k-2 and i>=1 and M[cur+1]+M[cur-m*k]==2 and M[cur-m*k+1]==0:\n\t\t\t\t\tres+=1\n\t\t\t\telif i<=n-2 and h>=1 and M[cur-1]+M[cur+m*k]==2 and M[cur+m*k-1]==0:\n\t\t\t\t\tres+=1 \n\t\t\t\telif i<=n-2 and j>=1 and M[cur-k]+M[cur+m*k]==2 and M[cur+m*k-k]==0:\n\t\t\t\t\tres+=1\n\t\t\t\telif j<=m-2 and i>=1 and M[cur+k]+M[cur-m*k]==2 and M[cur-m*k+k]==0:\n\t\t\t\t\tres+=1\n\t\t\tcur+=1\nprint(res)", "def put():\n    return map(int, input().split())\n\ndef safe(x,y,z):\n    return x>=0 and y>=0 and z>=0 and x<n and y<m and z<p\n\ndef check(x,y,z):\n    if mat[x][y][z]==0: \n        return 0\n    cur  = [x,y,z]\n    for i in range(3):\n        src = cur.copy()\n        src[i]-=1\n        if (not safe(src[0], src[1], src[2])) or mat[src[0]][src[1]][src[2]]==0: \n            continue\n\n        for j in range(3):\n            des = cur.copy()\n            des[j]+=1\n            alt = src.copy()\n            alt[j]+=1\n            if safe(des[0], des[1], des[2]) and mat[des[0]][des[1]][des[2]]==1:\n                if j==i:\n                    return 1\n                elif safe(alt[0], alt[1], alt[2]) and mat[alt[0]][alt[1]][alt[2]]==0:\n                    return 1\n    return 0\n\n\nn,m,p = put()\nmat   = []\nfor i in range(n):\n    tmp1 = []\n    for j in range(m):\n        s = input()\n        tmp2 = []\n        for k in range(p):\n            tmp2.append(int(s[k]))\n        tmp1.append(tmp2)\n    mat.append(tmp1)\n\n    if i!=n-1:\n        input()\n#print(mat)\nans = 0\nfor i in range(n):\n    for j in range(m):\n        for k in range(p):\n            ans += check(i,j,k)\n\nprint(ans)", "def put():\n    return map(int, input().split())\n\ndef safe(x,y,z):\n    return x>=0 and y>=0 and z>=0 and x<n and y<m and z<p\n\ndef check(x,y,z):\n    if mat[x][y][z]=='0': \n        return 0\n    cur  = [x,y,z]\n    for i in range(3):\n        src = cur.copy()\n        src[i]-=1\n        if (not safe(src[0], src[1], src[2])) or mat[src[0]][src[1]][src[2]]=='0': \n            continue\n\n        for j in range(3):\n            des = cur.copy()\n            des[j]+=1\n            alt = src.copy()\n            alt[j]+=1\n            if safe(des[0], des[1], des[2]) and mat[des[0]][des[1]][des[2]]=='1':\n                if j==i:\n                    return 1\n                elif safe(alt[0], alt[1], alt[2]) and mat[alt[0]][alt[1]][alt[2]]=='0':\n                    return 1\n    return 0\n\n\nn,m,p = put()\nmat   = []\nans   = 0\nfor i in range(n):\n    mat.append([input() for j in range(m)])\n    if i!=n-1:\n        input()\n\nfor i in range(n):\n    for j in range(m):\n        for k in range(p):\n            ans += check(i,j,k)\n\nprint(ans)", "def safe(pos):\n    return pos[0] >= 0 and pos[0] < n and pos[1] >= 0 and pos[1] < m and pos[2] >= 0 and pos[2] < p\ndef CPU_status(pos, number):\n    return safe(pos) and super_computer[pos[0]][pos[1]][pos[2]] == number\ndef critical(x,y,z):\n    if super_computer[x][y][z] != '0':\n        current = [x,y,z]\n        for i in range(3):\n            parent = current.copy()\n            parent[i]-=1\n            if CPU_status(parent, '1'):\n                for j in range(3):\n                    child, alt = current.copy(), parent.copy()\n                    child[j]+=1\n                    alt[j]+=1\n                    if CPU_status(child, '1') and (CPU_status(alt, '0') or j == i):\n                            return 1\n    return 0\nn, m, p = map(int, input().split())\nsuper_computer, crit = ([], 0)\nfor i in range(n):\n    super_computer.append([input() for _ in range(m)])\n    if i != n-1:\n        input()\nfor i in range(n):\n    for j in range(m):\n        for k in range(p):\n            crit += critical(i,j,k)\nprint(crit)"]