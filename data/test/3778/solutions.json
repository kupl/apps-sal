["import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\n\nAns = []\none = []\ntt = []\nfor i in range(N-1, -1, -1):\n    a = A[i]\n    if a == 0:\n        continue\n    if a == 1:\n        Ans.append((i, i))\n        one.append((i, i))\n        continue\n    if a == 2:\n        if not one:\n            Ans = None\n            break\n        else:\n            oi, _ = one.pop()\n            Ans.append((oi, i))\n            tt.append((oi, i))\n            continue\n    else:\n        if not tt:\n            if not one:\n                Ans = None\n                break\n            else:\n                oi, wi = one.pop()\n                Ans.append((i, wi))\n                Ans.append((i, i))\n                tt.append((i, i))\n        else:\n            oi, wi = tt.pop()\n            Ans.append((i, wi))\n            Ans.append((i, i))\n            tt.append((i, i))\n        continue\n\nif Ans is None:\n    print(-1)\nelse:\n    print(len(Ans))\n    if Ans:\n        print('\\n'.join(f'{a+1} {b+1}' for a, b in Ans))\n\n\n", "n = int(input())\na = list(map(int, input().split()))\n\nthrees = []\ntwos = []\nout = []\nfor i in range(n):\n    if a[i] == 1:\n        if twos:\n            p = twos.pop()\n            out.append((p, i))\n        elif threes:\n            p = threes.pop()\n            out.append((p,i))\n            out.append((i,i))\n        else:\n            out.append((i,i))\n    elif a[i] == 2:\n        if threes:\n            p = threes.pop()\n            out.append((p,i))\n            out.append((i,i))\n        else:\n            out.append((i,i))\n\n        twos.append(i)\n    elif a[i] == 3:\n        if threes:\n            p = threes.pop()\n            out.append((p,i))\n            out.append((i,i))\n        else:\n            out.append((i,i))\n\n        threes.append(i)\nif twos or threes:\n    print(-1)\nelse:\n    print(len(out))\n    print('\\n'.join([str(x[0] + 1) + ' ' + str(x[1] + 1) for x in out]))\n", "n = int(input())\nlst = list(map(int,input().split()))\nans = []\nnsp = 0\nedpos = []\ntwpos = []\nfor i in range(n-1,-1,-1):\n    if lst[i] == 1:\n        ans.append([i, nsp])\n        edpos.append([i, nsp])\n        nsp += 1\n    if lst[i] == 2:\n        if len(edpos):\n            k = edpos[-1]\n            edpos.pop()\n            ans.append([i, k[1]])\n            twpos.append([i, k[1]])\n        else:\n            print(-1)\n            return\n    if lst[i] == 3:\n        if len(twpos):\n            k = twpos[-1]\n            twpos.pop()\n            ans.append([i, nsp])\n            ans.append([k[0], nsp])\n            twpos.append([i, nsp])\n            nsp += 1\n        elif len(edpos):\n            k = edpos[-1]\n            edpos.pop()\n            ans.append([i, nsp])\n            ans.append([k[0], nsp])\n            twpos.append([i, nsp])\n            nsp += 1\n        else:\n            print(-1)\n            return\nprint(len(ans))\nfor i in ans:\n    print(n - i[1], i[0] + 1)", "import sys\ninput = sys.stdin.readline\nn=int(input())\na=list(map(int,input().split()))\nposs=True\ncol=[]\nrow=[]\ncl=None\nt=0\nts=[]\ni=n-1\nwhile i>=0:\n    if a[i]==1:\n        col.append(i)\n        row.append(i)\n        t+=1\n        ts.append([i+1,i+1])\n    if a[i]==2:\n        if len(col)==0:\n            poss=False\n        else:\n            t+=1\n            r=row.pop()\n            c=col.pop()\n            ts.append([r+1,i+1])\n            cl=i\n    if a[i]==3:\n        if cl!=None:\n            t+=2\n            ts.append([i+1,i+1])\n            ts.append([i+1,cl+1])\n            cl=i\n        else:\n            if len(col)==0:\n                poss=False\n            else:\n                c=col.pop()\n                r=row.pop()\n                t+=2\n                ts.append([i+1,i+1])\n                ts.append([i+1,c+1])\n                cl=i\n    i-=1\nif poss:\n    print(t)\n    for x in ts:\n        print(*x)\nelse:\n    print(-1)", "n = int(input())\na = list(map(int, input().split()))\nright_free = [] # dlya 2\nright_busy = [] # dlya 3\nans = []\nfor i in range(n-1, -1, -1):\n\tif a[i] == 1:\n\t\tright_free.append(i)\n\telif a[i] == 2:\n\t\tright_busy.append(i)\n\t\tif not right_free:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\tx = right_free.pop()\n\t\tans.append([i, i])\n\t\tans.append([i, x])\n\telif a[i] == 3:\n\t\tif not right_busy and not right_free:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\tif right_busy:\n\t\t\tx = right_busy.pop()\n\t\t\tans.append([i, i])\n\t\t\tans.append([i, x])\n\t\telse:\n\t\t\tx = right_free.pop()\n\t\t\tans.append([i, i])\n\t\t\tans.append([x, x])\n\t\t\tans.append([i, x])\n\t\tright_busy.append(i)\nwhile right_free:\n\tx = right_free.pop()\n\tans.append([x, x])\nprint(len(ans))\nfor x,y in ans:\n\tprint(x+1, y+1)\n\n", "n = int(input())\na = list(map(int, input().split()))\nif a[-1] > 1:\n    print(-1)\n    return\ns = set()\ns2 = []\ns3 = []\nr = 1\nfor i in range(n):\n    if a[i] == 1:\n        if s2:\n            x = s2.pop()\n            s.add((x, i + 1))\n        elif s3:\n            x = s3.pop()\n            s.add((x, i + 1))\n            s.add((r, i + 1))\n            r += 1\n        else:\n            s.add((r, i + 1))\n            r += 1\n    elif a[i] == 2:\n        if s3:\n            x = s3.pop()\n            s.add((x, i + 1))\n            s.add((r, i + 1))\n            s2.append(r)\n            r += 1\n        else:\n            s.add((r, i + 1))\n            s2.append(r)\n            r += 1\n    elif a[i] == 3:\n        if s3:\n            x = s3.pop()\n            s.add((x, i + 1))\n            s.add((r, i + 1))\n            s3.append(r)\n        else:\n            s.add((r, i + 1))\n            s3.append(r)\n        r += 1\n    else:\n        r += 1\nif s2 or s3:\n    print(-1)\nelse:\n    print(len(s))\n    for x in s:\n        print(x[0], x[1])\n", "n = int(input())\naa = list(map(int, input().split()))\nr = 1\npen2 = []\npen3 = []\nans = []\nfor c, a in enumerate(aa, 1):\n    if a == 0:\n        pass\n    elif a == 1:\n        if pen2:\n            b = pen2.pop()\n            ans.append((b, c))\n        elif pen3:\n            b = pen3.pop()\n            ans.append((b, c))\n            ans.append((r, c))\n            r += 1\n        else:\n            ans.append((r, c))\n            r += 1\n    elif a == 2:\n        pen2.append(r)\n        if pen3:\n            b = pen3.pop()\n            ans.append((b, c))\n            ans.append((r, c))\n            r += 1\n        else:\n            ans.append((r, c))\n            r += 1\n    else:\n        if pen3:\n            b = pen3.pop()\n            ans.append((b, c))\n            ans.append((r, c))\n            pen3.append(r)\n            r += 1\n        else:\n            ans.append((r, c))\n            pen3.append(r)\n            r += 1\n\nif r > (n + 1) or pen2 or pen3:\n    print(-1)\nelse:\n    print(len(ans))\n    print('\\n'.join(' '.join(map(str, x)) for x in ans))\n", "n = int(input())\n\na = [0] + list(map(int, input().split()))\n\nb = []\nposs = True\n\nones = []\ntwos = []\nthrees = []\n\nrow_num = n\n\n\nfor c in range(n, 0, -1):\n    if a[c] == 0:\n        continue\n\n    elif a[c] == 1:\n        ones.append((row_num, c))\n        b.append((row_num, c))\n        row_num -= 1\n\n    elif a[c] == 2:\n        if len(ones) > 0:\n            q = ones.pop()\n            b.append((q[0], c))\n\n            twos.append((q[0], c))\n            \n        else:\n            poss = False\n\n    elif a[c] == 3:\n        if len(threes) > 0:\n            q = threes.pop()\n\n            b.append((row_num, c))\n            b.append((row_num, q[1]))\n            threes.append((row_num, c))\n            \n            row_num -= 1\n            \n        elif len(twos) > 0:\n            q = twos.pop()\n\n            b.append((row_num, c))\n            b.append((row_num, q[1]))\n            threes.append((row_num, c))\n            \n            row_num -= 1\n\n\n        elif len(ones) > 0:\n            q = ones.pop()\n\n            b.append((row_num, c))\n            b.append((row_num, q[1]))\n            threes.append((row_num, c))\n            \n            row_num -= 1\n\n        else:\n            poss = False\n\nif poss:\n    print(len(b))\n    for item in b:\n        print(item[0], item[1])\nelse:\n    print(-1)\n    \n", "import sys\nn=int(input())\na=list(map(int,input().split()))\nheight=n\nans=[]\nlast3=-1\nfail=0\nused=-1\nfor i in range(n):\n    if a[i]==3:\n        if height==n:\n            ans.append((n-height+1,i+1))\n            height-=1\n        else:\n            ans.append((n+1-(height+1),i+1))\n            ans.append((n+1-height,i+1))\n            height-=1\n        last3=i\nif last3==n-1:\n    print(-1)\n    return\nif last3>-1:\n    flag=0\n    for i in range(last3,n):\n        if a[i]==2:\n            flag=1\n            ans.append((n+1-(height+1),i+1))\n            height-=1\n            break\n    if flag==0:\n        flag2=0\n        for i in range(last3,n):\n            if a[i]==1:\n                ans.append((n+1-(height+1),i+1))\n                height-=1\n                flag2=1\n                used=i\n                break\n        if flag2==0:\n            print(-1)\n            return\nones=[]\nif used==-1:\n    height-=1\nfor i in range(n-1,-1,-1):\n    if a[i]==1 and i!=used:\n        ones.append(i)\n    if a[i]==2:\n        if len(ones)==0:\n            print(-1)\n            return\n        k=ones.pop()\n        ans.append((n+1-(height+1),i+1))\n        ans.append((n+1-(height+1),k+1))\n        height-=1\nif used>-1:\n    ones.append(used)\nfor i in ones:\n    ans.append((n+1-(height+1),i+1))\n    height-=1\nprint(len(ans))\nfor x,y in ans:\n    print(x,y)", "def main():\n    import sys\n    input = sys.stdin.readline\n    \n    n = int(input())\n    ans = []\n    arr = list(map(int, input().split()))\n    amt = [2 if x else 0 for x in arr]\n    \n    bottoms = []\n    bottoms1 = []\n    others = []\n    idx = 0\n    idx1 = 0\n    \n    for i in range(n-1, -1, -1):\n        if arr[i] == 0:\n            continue\n        if arr[i] == 1:\n            bottoms.append((i + 1, i + 1))\n        if arr[i] == 2:\n            if idx == len(bottoms):\n                print(-1)\n                return\n            \n            r, c = bottoms[idx]\n            bottoms1.append((r, i + 1))\n            idx += 1\n        if arr[i] == 3:\n            if idx == len(bottoms) and idx1 == len(bottoms1):\n                print(-1)\n                return\n            elif idx1 == len(bottoms1):\n                r, c = bottoms[idx]\n                bottoms1.append((i + 1, i + 1))\n                others.append((i + 1, c))\n                idx += 1\n            else:\n                r, c = bottoms1[idx1]\n                bottoms1.append((i + 1, i + 1))\n                others.append((i + 1, c))\n                idx1 += 1\n    \n    # if arr[-1] > 1:\n    #     print(-1)\n    #     return\n    # elif arr[-1] == 1:\n    #     amt[-1] -= 1\n    #     ans.append((n, n))\n    # x = -1\n    # y = -1\n    # rindex = n - 1\n    # for i in range(n - 1, -1, -1):\n    #     if arr[i] == 0:\n    #         continue\n    #     elif arr[i] == 1:\n    #         amt[i] -= 1\n    #         ans.append((i + 1, i + 1))\n            \n    #         if y == -1:\n    #             x = i\n    #             y = i + 1\n    #     elif arr[i] == 2:\n    #         if y == -1:\n    #             print(-1)\n    #             return\n            \n    #         amt[i] -= 1\n    #         ans.append((y, i + 1))\n    #     elif arr[i] == 3:\n    #         if x == -1:\n    #             print(-1)\n    #             return\n    #         while rindex > i and (rindex == x or not arr[rindex]):\n    #             rindex -= 1\n    #         if rindex == i:\n    #             print(-1)\n    #             return\n    #         amt[i] -= 1\n    #         amt[rindex] -= 1\n    #         ans.append((i + 1, i + 1))\n    #         ans.append((i + 1, rindex + 1))\n    \n    ans = others + bottoms + bottoms1\n    print(len(ans))\n    for (x, y) in ans:\n        print(x, y)\n    return 0\n\nmain()\n", "from sys import stdin\nimport sys\n\nn = int(stdin.readline())\na = list(map(int,stdin.readline().split()))\n\none = []\nttt = []\nans = []\n\nfor i in range(n,0,-1):\n\n    now = a[i-1]\n    if now == 0:\n        continue\n    elif now == 1:\n        ans.append((i,i))\n        one.append(i)\n    elif now == 2:\n        if len(one) == 0:\n            print (-1)\n            return\n        ans.append((one[-1],i))\n        del one[-1]\n        ttt.append(i)\n    elif now == 3:\n        if len(ttt) == 0:\n            if len(one) == 0:\n                print (-1)\n                return\n            ans.append((i,i))\n            ans.append((i,one[-1]))\n            del one[-1]\n            ttt.append(i)\n        else:\n            ans.append((i,i))\n            ans.append((i,ttt[-1]))\n            del ttt[-1]\n            ttt.append(i)\n\nprint (len(ans))\nfor i in ans:\n    print (*i)", "N, = list(map(int, input().split()))\nX = list(map(int, input().split()))\nfrom collections import deque\nR = []\nA1 = []\nA2 = []\nng = 0\nfor i in range(N-1, -1, -1):\n    j = N-1-i+1\n    if X[i] == 1:\n        R.append((i+1, j))\n        A1.append((i+1, j))\n    elif X[i] == 2:\n        if not A1:\n            ng = 1\n            break\n        x, y = A1.pop()\n#        R.append((i+1, y))\n        R.append((i+1, y))\n        A2.append((i+1, y))\n    elif X[i] == 3:\n        if A2:\n            x, y = A2.pop()\n            R.append((x, j))\n            R.append((i+1, j))\n            A2.append((i+1, j))\n        elif A1:\n            x, y = A1.pop()\n            R.append((x, j))\n            R.append((i+1, j))\n            A2.append((i+1, j))\n        else:\n            ng = 1\nif ng:\n    print(-1)\nelse:\n    print(len(R))\n    for x, y in R:\n#        print(x, y)\n        print(N-y+1, x)\n", "n = int(input())\na = list(map(int, input().split()))\nans = []\n\nthree = []\ntwo = []\nfor i in range(n):\n    if a[i] == 0:\n        continue\n    if a[i] == 3:\n        if len(three) > 0:\n            x = three.pop()\n            ans.append((x, i))\n            ans.append((i, i))\n            three.append(i)\n        else:\n            ans.append((i, i))\n            three.append(i)\n            \n    elif a[i] == 2:\n        if len(three) > 0:\n            x = three.pop()\n            ans.append((x, i))\n            ans.append((i, i))\n            two.append(i)\n        else:\n            ans.append((i, i))\n            two.append(i)\n\n    else:\n        if len(three) > 0:\n            x = three.pop()\n            ans.append((x, i))\n            ans.append((i, i))\n        elif len(two) > 0:\n            x = two.pop()\n            ans.append((x, i))\n        else:\n            ans.append((i, i))\n\nif len(three) > 0 or len(two) > 0:\n    print(-1)\n\nelse:\n    print(len(ans))\n    for i, j in ans:\n        print(i+1, j+1)\n", "\nn = int(input())\n\nx = []\ny = []\n\nans = []\n\nA = list(map(int, input().split()))\n\nfor i in range(n):\n    \n    if A[i] == 1:\n        \n        if y:\n            \n            ans += [[y.pop(), i + 1]]\n        \n        elif x:\n            \n            ans += [[x.pop(), i + 1]]\n            ans += [[i + 1, i + 1]]\n            \n        else:\n            \n            ans += [[i + 1, i + 1]]\n            \n    elif A[i] == 2:\n        \n        \n        \n        if x:\n            ans += [[x.pop(), i + 1]]\n            ans += [[i + 1, i + 1]]\n            \n            \n            \n        else:\n            ans += [[i + 1, i + 1]]\n            \n        \n        y += [i + 1]\n            \n    elif A[i] == 3:\n        \n        \n        if x:\n            \n            ans += [[x.pop(), i + 1]]\n            ans += [[i + 1, i + 1]]\n            \n            \n        else:\n            ans += [[i + 1, i + 1]]\n        \n        x += [i + 1]\n        \n            \nif x or y:\n    \n    print(-1)\n    \nelse:\n    \n    print(len(ans))\n    \n    for Ans in ans:\n        \n        print(*Ans)", "n = int(input())\na = list(map(int, input().split()))\n\ntwos = []\nthrees = []\npts = []\nfor i,q in enumerate(a):\n\ti = i + 1\n\tif q == 0:\n\t\t# no targets\n\t\tpass\n\telif q == 1:\n\t\tif twos:\n\t\t\tpts += [(twos.pop(), i)]\n\t\telif threes:\n\t\t\tpts += [(threes.pop(), i), (i, i)]\n\t\telse:\n\t\t\tpts += [(i,i)]\n\telif q == 2:\n\t\tpts += [(i,i)]\n\t\tif threes:\n\t\t\tpts += [(threes.pop(), i)]\n\t\ttwos += [i]\n\telif q == 3:\n\t\tpts += [(i,i)]\n\t\tif threes:\n\t\t\tpts += [(threes.pop(), i)]\n\t\tthrees += [i]\n\nif not twos and not threes:\n\tprint(len(pts))\n\tfor x in pts:\n\t\tprint(*x)\nelse:\n\tprint(-1)\n", "n = int(input())\nA = list(map(int, input().split()))\nmax_not_used = n\nones = []\ntwos = []\ntargets = []\nfailed = False\nfor c, a in zip(list(range(n, 0, -1)), reversed(A)):\n    if a == 1:\n        r = max_not_used\n        max_not_used -= 1\n        targets.append((r, c))\n        ones.append((r, c))\n    elif a == 2:\n        if not ones:\n            failed = True\n            break\n        else:\n            r, __ = ones.pop()\n            targets.append((r, c))\n            twos.append((r, c))\n    elif a == 3:\n        if (not ones) and (not twos):\n            failed = True\n            break\n        else:\n            if twos:\n                rr, cc = twos.pop()\n            else:\n                rr, cc = ones.pop()\n            r = max_not_used\n            max_not_used -= 1\n            targets.append((r, c))\n            targets.append((r, cc))\n            twos.append((r, c))\nif failed:\n    print(-1)\nelse:\n    print(len(targets))\n    for target in targets:\n        print(*target)\n"]