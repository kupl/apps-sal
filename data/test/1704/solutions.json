["class Solution:\n    def __init__(self):\n        self.n, self.k = list(map(int, input().split()))\n        self.s = [input() for i in range(0, self.n)]\n        self.state = [\n            (119, 6),\n            (36, 2),\n            (93, 5),\n            (109, 5),\n            (46, 4),\n            (107, 5),\n            (123, 6),\n            (37, 3),\n            (127, 7),\n            (111, 6),\n        ]\n        self.p = []\n        self.dp = [[False for j in range(0, self.k + 1)] for i in range(0, self.n)]\n\n    def solve(self):\n        for a in self.s:\n            state = int(a[::-1], 2)\n            stick = a.count(\"1\")\n            v = []\n            for i, (dState, dStick) in enumerate(self.state):\n                if dState & state == state:\n                    v.append((i, dStick - stick))\n            self.p.append(v)\n\n        for i in range(self.n - 1, -1, -1):\n            for j, stick in self.p[i]:\n                if i == self.n - 1:\n                    if stick <= self.k:\n                        self.dp[i][stick] = True\n                else:\n                    for d in range(stick, self.k + 1):\n                        self.dp[i][d] |= self.dp[i + 1][d - stick]\n        if not self.dp[0][self.k]:\n            return \"-1\"\n\n        result = \"\"\n\n        for i, v in enumerate(self.p):\n            for j, stick in v[::-1]:\n                ok = (self.k == stick) if i == self.n - 1 else (self.k >= stick and self.dp[i + 1][self.k - stick])\n                if ok:\n                    self.k -= stick\n                    result += str(j)\n                    break\n        return result\n            \n\nprint(Solution().solve())\n\n", "from collections import deque\n\nnums = [0b1110111, 0b0010010, 0b1011101, 0b1011011, 0b0111010, 0b1101011, 0b1101111, 0b1010010, 0b1111111, 0b1111011]\nn, k = list(map(int, input().split()))\ninnums = []\nfor i in range(n):\n    innums.append(int(input(), 2))\n\nsdp = [[30000]*10 for i in range(1<<7)]\n\nfor i in range(1<<7):\n    for j in range(10):\n        # possible to append\n        if (i & nums[j]) == i:\n            raw = nums[j] - i\n            count = 0\n            while raw:\n                count += 1\n                raw -= raw & (-raw)\n            sdp[i][j] = count\n\ndp = [[False] * (k + 1) for i in range(n + 1)]\n\ndp[n][0] = True\nfor idx, num in reversed(list(enumerate(innums))):\n    for cost in sdp[num]:\n        for k_ in range(cost, k + 1):\n            dp[idx][k_] |= dp[idx+1][k_- cost]\nif not dp[0][k]:\n    print(-1)\nelse:\n    cur_k = k\n    ans = []\n    for idx, num in enumerate(innums):\n        for i, cost in reversed(list(enumerate(sdp[num]))):\n            if cost > cur_k:\n                continue\n\n            if dp[idx+1][cur_k - cost]:\n                cur_k -= cost\n                ans.append(i)\n                break\n    print(''.join(map(str, ans)))\n"]