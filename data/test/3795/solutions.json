["n = int(input())\nd = int(input())\ne = 5*int(input())\n\nans = n\nd, e = min([d, e]), max([d, e])\n\nfor i in range(e):\n    if (n-i*d) >= 0:\n        ans = min([ans, (n-i*d)%e])\n        \nprint(ans)", "def main():\n    import sys\n    input = sys.stdin.readline\n    \n    n = int(input())\n    d = int(input())\n    e = int(input()) * 5\n    \n    mi = n\n    i = 0\n    while i * e <= n:\n        mi = min(mi, (n - i * e) % d)\n        i += 1\n    \n    print(mi)\n    \n    return 0\n\nmain()\n", "n=int(input())\nd=int(input())\ne=int(input())*5\n\nans=10**8+1\nfor i in range(d):\n    k=n-e*i\n    if k<0:\n        break\n    ans=min(ans, k%d)\n\nprint(ans)", "import sys\ninput = sys.stdin.readline\n \ndef getInt(): return int(input())\ndef getVars(): return map(int, input().split())\ndef getList(): return list(map(int, input().split()))\ndef getStr(): return input().strip()\n## -------------------------------\n\ndef addDictList(d, key, val):\n    if key not in d: d[key] = []\n    d[key].append(val)\n\ndef addDictInt(d, key, val):\n    if key not in d: d[key] = 0\n    d[key] = val\n    \ndef addDictCount(d, key):\n    if key not in d: d[key] = 0\n    d[key] += 1\n\ndef addDictSum(d, key, val):\n    if key not in d: d[key] = 0\n    d[key] += val\n\n## -------------------------------\n\nn = getInt()\nd = getInt()\ne = getInt()\n\nm1 = max(d, e*5)\nm2 = min(d, e*5)\n\n\nres = n%m1\nfor x in range(n//m1+1):\n    res = min(res, (n-x*m1)%m2)\nprint(res)", "rubes = int(input())\nd = int(input())\ne = int(input()) * 5\n\nans = rubes \nfor i in range(rubes // e + 1):\n    ans = min(ans, (rubes - i*e) % d)\nprint(ans)", "n = int(input())    \nd = int(input())\ne = int(input())\ne *= 5\nres = n\nfor i in range((n // e) + 1):\n    res = min(res, (n - i * e) % d)\nprint(res)", "n = int(input())\nd = int(input())\ne = int(input())\n\ne = 5*e\n\ncurr = 0\nmini = n\n\nwhile curr <= n:\n    if (n-curr)%e < mini:\n        mini = (n-curr)%e\n    curr += d\n\nprint(mini)", "n = int(input())\nd = int(input())\ne = int(input())\n\ne *= 5\n\ndollar = 0\nans = n\nwhile d * dollar <= n:\n    val = n - d*dollar\n    ans = min(ans, val % e)\n    dollar += 1\n\nprint(ans)", "n=int(input())\nd=int(input())\ne=int(input())*5\nd,e=max(d,e),min(d,e)\nv=n\nfor i in range(e):\n    m=n-i*d\n    if m<0:\n        break\n    m%=e\n    v=min(v,m)\nprint(v)", "n = int(input())\nd = int(input())\ne = int(input())\n\nans = n % d\nfor i in range(100000):\n    if 5 * e * i <= n:\n        k = n - 5 * e * i\n        if ans > k % d:\n            ans = k % d\n\nprint(ans)", "def gcd(x,y):\n    if(y==0):\n        return x\n    return gcd(y,x%y)\n \n \nn = int(input())\nd = int(input())\ne = int(input())\ne*= 5\nif(n > 10*e*d):\n    print(n % gcd(e,d))\n    return\n \nans = [0]\n \nfor i in range(1, n + 1):\n    ans.append(i)\n    if(i >= d):\n        ans[i] = min(ans[i], ans[i - d])\n    if(i >= e):\n        ans[i] = min(ans[i], ans[i - e])\n# print(ans)\nprint(ans[n])", "import sys \nfrom collections import defaultdict\ninput = lambda : sys.stdin.readline().rstrip()\n\nn = int(input())\nd = int(input())\ne = int(input())\n\ndollar = d \neuro = 5 * e \n\nans = n \n\nif n % dollar == 0 or n % euro == 0:\n  print(0)\n  return\n\nfor i in range(n // dollar + 1):\n  k = n - i * dollar\n  k -= (k // euro) * euro\n\n  ans = min(ans, k)\n\nfor i in range(n // euro + 1):\n  k = n - i * euro\n  k -= (k // dollar) * dollar \n\n  ans = min(ans, k)\n\n\n\nprint(ans)\n", "# from collections import Counter\n#\n# x = \"\"\"100\n# 60\n# 70\"\"\"\n#\n# x = \"\"\"410\n# 55\n# 70\"\"\"\n#\n# x = \"\"\"600\n# 60\n# 70\"\"\"\n#\n# def f(string):\n#     def c(x =(r for r in string.splitlines())):\n#         return next(x)\n#\n#     return c\n#\n# source = f(x)\n\nsource = input\n\namount = int(source())\nprice_dollar = int(source())\nprice_euro = int(source())\n\ndef get_answer(amount, p1, p2):\n    best = amount\n    for other in range(p1):\n        a1 = amount - other * p2\n        if a1 == 0:\n            return 0\n\n        if a1 < 0:\n            break\n\n        change = a1 % p1\n        best = min(change, best)\n\n    return best\n\nprint(get_answer(amount, price_dollar, price_euro * 5))\n\n\n\n\n", "n = int(input())\nd = int(input())\ne = int(input()) * 5\n\nr = n\nfor i in range(d):\n    if i * e > n:\n        continue\n    p = (n - i * e) - (n - i * e) // d * d\n    r = min(r, p)\nprint(r)\n", "#!/usr/bin/env python3\nimport sys\n\ndef rint():\n    return list(map(int, sys.stdin.readline().split()))\n#lines = stdin.readlines()\n\n\nn = int(input())\nd = int(input())\ne = int(input())\n\nd_min = d\ne_min = 5*e\n\nmin1, min2 = sorted([d_min, e_min])\n\nans = 10**10\nfor i in range(0, min1+1):\n    tmp = n - i*min2\n    if tmp < 0:\n        break\n    tmp = tmp%min1\n    ans = min(tmp, ans)\n\nprint(ans)\n", "n=int(input())\nd=int(input())\ne=int(input())\na=e*5\nm=10000000\nfor i in range(min(100,n//a+1)):\n\tif ((n-a*i)%d)<m:\n\t\tm=(n-a*i)%d\nprint (m)", "import math\nimport sys\nimport collections\n\n# imgur.com/Pkt7iIf.png\n\ndef getdict(n):\n    d = {}\n    if type(n) is list:\n        for i in n:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n    else:\n        for i in range(n):\n            t = ii()\n            if t in d:\n                d[t] += 1\n            else:\n                d[t] = 1\n    return d\ndef cdiv(n, k): return n // k + (n % k != 0)\ndef ii(): return int(input())\ndef mi(): return list(map(int, input().split()))\ndef li(): return list(map(int, input().split()))\ndef lcm(a, b): return abs(a*b) // math.gcd(a, b)\n\nn = ii()\nd = ii()\ne = ii()\n\nr = n%d\nwhile n >= 5*e:\n    n = n - (5*e)\n    r = min(r, n%d)\nprint(r)\n\n", "import sys\ninput = sys.stdin.readline\n\n\nn = int(input())\nd = int(input())\ne = int(input())\n\nD=d*1\nE=e*5\n\nx=n%D\n\nANS=x\n\nfor i in range(x,min(n,x+D*1000)+1,D):\n    ANS=min(ANS,i%E)\n\nprint(ANS)\n", "def solvea():\n    n = int(input())\n    d = int(input())\n    e = 5 * int(input())\n    best = 0\n    for enr in range(n // e + 1):\n        curr = e * enr\n        curr += d * ((n - curr) // d)\n        if curr <= n and curr > best:\n            best = curr\n    print(n - best)\n\ndef solveb():\n    a = int(input())\n    b = int(input())\n    n = int(input())\n    ans = 0\n    for i in range(a + 1):\n        for j in range(b + 1):\n            if i + j == n:\n                ans += 1\n    print(ans)\n\n\ndef __starting_point():\n    solvea()\n\n__starting_point()", "n = int(input())\nd = int(input())\ne = int(input())\n# find nd and ne: ne = 5k, n - nd * d - ne * e min\nmax_d = n // d #max amount of dollars\nmax_e = n // e - ((n // e) % 5)\nr_min = n\nfor i in range(0, max_e + 1, 5):\n    res = n - i * e\n    cur_rub = res - (res // d) * d\n    if cur_rub < r_min:\n        r_min = cur_rub\nprint(r_min)", "#    ~####~~~#####~~~~####~~~######~~#####~~~#####~~~##~~##\n#    ##~~##~~##~~##~~##~~##~~~~~##~~~##~~##~~##~~~~~~##~##\n#    ##~~##~~#####~~~######~~~~##~~~~#####~~~####~~~~####\n#    ##~~##~~##~~##~~##~~##~~~##~~~~~##~~##~~##~~~~~~##~##\n#    ~####~~~##~~##~~##~~##~~######~~#####~~~#####~~~##~~##\nimport math\n\n\nclass Read:\n    @staticmethod\n    def int():\n        return int(input())\n\n    @staticmethod\n    def list(sep=' '):\n        return input().split(sep)\n\n    @staticmethod\n    def list_int(sep=' '):\n        return list(map(int, input().split(sep)))\n\n\ndef solve():\n    r = Read.int()\n    d = Read.int()\n    e = Read.int() * 5\n\n    m = math.inf\n    for i in range(r // e + 1):\n        t = (r - i * e) % d\n        if t < m:\n            m = t\n        if m == 0:\n            print(0)\n            return\n    print(m)\n\n\nquery_count = 1\n# query_count = Read.int()\nfor j in range(query_count):\n    solve()\n", "n = int(input())\n\nd = int(input())\ne = int(input())\n\nans = min(n % d, n%(5*e))\n\nif (d < 5*e):\n    T = int(n / (5*e))\n    c = 5 * e\n    c2 = d\nelse:\n    T = int(n / d)\n    c = d\n    c2 = 5 * e\n\nfor i in range(T + 1):\n    ans = min(ans, (n - i * c - c2 * int((n - i * c)/c2)))\n\nprint(ans)", "n = int(input())\nd = int(input())\ne = int(input())\n\n\nmn = 99999999999\nwhile n>=0:\n    res = n%d\n    if res < mn:\n        mn = res\n    n = n - 5*e\n\n\n\n\nprint(mn)\n", "n=int(input(\"\"))\nd=int(input(\"\"))\ne=int(input(\"\"))\ne*=5\nans=n\nfor i in range (0,n//d+1) :\n   a=(n-d*i)%e\n   if a<ans : ans=a\nprint (ans)"]