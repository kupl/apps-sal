["import math\nimport operator as op\n\nfrom functools import reduce\n\nfrom operator import mul    # or mul=lambda x,y:x*y\nfrom fractions import Fraction\n\ndef nCk(n,k): \n  return int( reduce(mul, (Fraction(n-i, i+1) for i in range(k)), 1) )\n\n\ndef ncr(n, r):\n    r = min(r, n-r)\n    if r == 0: return 1\n    numer = reduce(op.mul, list(range(n, n-r, -1)))\n    denom = reduce(op.mul, list(range(1, r+1)))\n    return numer//denom\n\ndef modPow(a, x, p):\n    #calculates a^x mod p in logarithmic time.\n    res = 1\n    while(x > 0):\n        if( x % 2 != 0):\n            res = (res * a) % p\n            \n        a = (a * a) % p\n        x = int(x/2)\n    return res\n\ndef modInverse(a, p):\n    #calculates the modular multiplicative of a mod m.\n    #(assuming p is prime).\n    return modPow(a, p-2, p)\n\ndef modBinomial(n, k, p):\n    #calculates C(n,k) mod p (assuming p is prime).\n\n    # n * (n-1) * ... * (n-k+1)\n    numerator = 1 \n    for i in range(k):\n        numerator = (numerator * (n-i) ) % p\n\n    denominator = 1\n    for i in range(1, k+1):\n        denominator = (denominator * i) % p\n\n    # numerator / denominator mod p.\n    return ( numerator* modInverse(denominator,p) ) % p\n\n\nn, c = input().split()\nn = int(n)\nc = int(c)\n\n#test = [0 for x in range (n+1)]\n#test[1] = c\n\n#for i in range(2, n+1):\n#    test[i] = (test[i-1] + modBinomial((i+c-1),i, 1000003))%1000003\n\n#ans = solve(n, c)\n#ans =test[n]\nans = modBinomial((c+n),c,1000003) - 1\nprint(int(ans))\n", "import math \nm = int(1e6 + 3)\na,b = input().split()\na = int(a)\nb = int(b)\nA = 1\nB = 1\nfor i in range(2,a + b + 1):\n    A=(A*i)%m\n    if i<=a:\n        B=(B*i)%m\n    if i<=b:\n        B=(B*i)%m\nprint((A*pow(B,m-2,m)-1)%m)", "n, c = list(map(int, input().split()))\nmod = 10 ** 6 +3\ninv = [0, 1]\nfor i in range(2, max(n, c) + 1):\n    inv.append(inv[mod % i] * (mod - mod // i) % mod)\nans = 1\nfor i in range(1, n + c + 1):\n    ans = ans * i % mod\nfor i in range(1, c + 1):\n    ans = ans * inv[i] % mod\nfor i in range(1, n + 1):\n    ans = ans * inv[i] % mod\nans += mod - 1\nans %= mod\nprint(ans)\n\n", "import sys\n#with open(filename, 'r') as f:\nwith sys.stdin as f:\n    n, C = f.readline().split(\" \")\n    n, C = int(n), int(C)\np = 1000003\n\ndef compute_mod_fact(n, p):\n    # n! (mod p)\n    res = 1\n    for i in range(1, n+1):\n        res = (res * i) % p\n    return res\ndef compute_mod_mult(n, a, p):\n    # n**a (mod p)\n    res = 1\n    for _ in range(a):\n        res = (res * n) % p\n    return res\nres = compute_mod_fact(n+C, p)\nres1 = compute_mod_fact(n, p)\nres1 = compute_mod_mult(res1, p-2, p)\nres2 = compute_mod_fact(C, p)\nres2 = compute_mod_mult(res2, p-2, p)\n#print(res, res1, res2)\nres = (res * res1 * res2 - 1) % p \nprint(res)"]