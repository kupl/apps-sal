["def make_divisors(n):\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return divisors\n\n\nn = int(input())\nans = len(make_divisors(n - 1))\ndivisors = []\nfor i in make_divisors(n):\n    j = n\n    if i != 1:\n        while j % i == 0:\n            j //= i\n        if (j - 1) % i == 0:\n            divisors.append(i)\nprint((ans + len(divisors) - 1))\n", "from math import sqrt, ceil\n\n\ndef divisors(n):\n    out = []\n    nn = ceil(sqrt(n))\n    for i in range(1, nn):\n        if n % i == 0:\n            out.append(i)\n            out.append(n//i)\n\n    if nn ** 2 == n:\n        out.append(nn)\n\n    out.sort()\n    return out\n\n\nn = int(input())\na = len(divisors(n-1)[1:])\n\nd = divisors(n)\nfor dd in d[1:]:\n    nn = n\n    while nn % dd == 0:\n        nn = nn // dd\n    if nn % dd == 1:\n        a += 1\n\nprint(a)\n", "n = int(input())\n\ndef yakusu(x):\n    xx = 2\n    y = []\n    while xx**2 < x:\n        if x%xx == 0:\n            y.append(xx)\n            y.append(x//xx)\n        xx += 1\n    if xx**2 == x:\n        y.append(xx)\n    y.append(x)\n    return y\n    \nif n == 2:\n    ans = 0\nelse:\n    ans = len(yakusu(n-1))\n\nfor i in yakusu(n):\n    nn = n\n    while True:\n        if nn%i == 0:\n            nn = nn//i\n        else:\n            break\n    if nn%i == 1:\n        ans += 1\n\nprint(ans)\n", "from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\n\nn=int(input())\n\ndef divisore(n):\n    divisors=[]\n    for i in range(1,int(n**0.5)+1):\n        if n%i==0:\n            divisors.append(i)\n            if i!=n//i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\n\nans_l=divisore(n-1)[1:]\n\nd=divisore(n)\nfor i in d[1:]:\n  nn=n\n  while nn%i==0:\n    nn//=i\n  if nn%i==1:\n    ans_l.append(i)\n\nprint(len(ans_l))", "n = int(input())\n\n# n % k = 1 \u306e\u6570\nm = n - 1\ni = 2\nans = 1\nwhile i * i <= m:\n    if m % i == 0:\n        num = 1\n        while m % i == 0:\n            num += 1\n            m //= i\n        ans *= num\n    i = i + 1\nif m != 1:\n    ans *= 2\nans -= 1\n\n# n % k = 0 \u306e\u5834\u5408\n# n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\nm = n\nimport numpy as np\ni = 2\nfactor = []\nwhile i * i <= n:\n    if n % i == 0:\n        l = []\n        num = 1\n        l.append(num)\n        while n % i == 0:\n            num *= i\n            l.append(num)\n            n //= i\n        factor.append(np.array(l))\n    i = i + 1\nif n > 1:\n    factor.append(np.array([1, n]))\n\n# \u76f4\u7a4d\u3092\u6c42\u3081\u308b\u3053\u3068\u3067n\u306e\u5168\u7d04\u6570\u3092\u5f97\u308b\ndivisor = factor[-1]\nfor i in range(len(factor) - 1):\n    divisor = np.outer(divisor, factor[i])\ndivisor = np.outer(np.array(1), divisor)\n\n# \u5224\u5b9a\nfor i in divisor[0]:\n    if i == 1:\n        continue\n    n = m\n    while n % i == 0:\n        n //= i\n    if n % i == 1:\n        ans += 1\n\nprint(ans)", "import copy\n\n# \u7d04\u6570\u5217\u6319\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1] + [n]\n\n# \u7d20\u56e0\u6570\u5206\u89e3\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\n\nn = int(input())\nif n == 2:\n    print(1)\n    return\n\ndiv1 = make_divisors(n-1)\ncnt = len(div1)\n\ndiv2 = make_divisors(n)\n\n\nfor i in div2:\n    x = copy.deepcopy(n)\n    while x >= i:\n        if x % i == 0:\n            x //= i\n        else:\n            break\n    if x == 1 or x % i == 1:\n        cnt += 1\n\nprint(cnt)", "N = int(input())\n\ndef divider(n):\n  dividers = []\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      dividers.append(i)\n      if i != n // i:\n        dividers.append(n // i)\n  dividers.sort()\n  dividers.remove(1)\n  return dividers\n#n\u306e\u7d04\u6570\u3092\u62bd\u51fa\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9(1\u4ee5\u5916)\n\ncnt = len(divider(N - 1))\nfor k in divider(N):\n  n = N\n  while n % k == 0:\n    n /= k\n  if n % k == 1:\n    cnt += 1\nprint(cnt)", "import sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10 ** 8)\nfrom itertools import accumulate\nfrom itertools import permutations\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom collections import Counter\nimport fractions\nimport math\nfrom collections import deque\nfrom bisect import bisect_left\nfrom bisect import insort_left\nimport itertools\nfrom heapq import heapify\nfrom heapq import heappop\nfrom heapq import heappush\nimport heapq\nfrom copy import deepcopy\nfrom decimal import Decimal\nalf = list(\"abcdefghijklmnopqrstuvwxyz\")\nALF = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n#import numpy as np\nINF = float(\"inf\")\n#d = defaultdict(int)\n#d = defaultdict(list)\n#N = int(input())\n#A = list(map(int,input().split()))\n#S = list(input())[:-1]\n#S.remove(\"\\n\")\n#N,M = map(int,input().split())\n#S,T = map(str,input().split())\n#A = [int(input()) for _ in range(N)]\n#S = [list(input())[:-1] for _ in range(N)]\n#A = [list(map(int,input().split())) for _ in range(N)]\nN = int(input())\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\nans = {N}\nli1 = make_divisors(N-1)[1:]\nfor er in li1:\n    ans.add(er)\nli0 = make_divisors(N)[1:-1]\nfor i in li0:\n    n = N\n    while n % i == 0:\n        n /= i\n    if (n-1) % i == 0:\n        ans.add(i)\nprint((len(ans)))\n\n\n\n", "def divisor(n):\n  list1 = []\n  for i in range(1, int(n ** (0.5)) + 1):\n    if n % i == 0:\n      list1.append(i)\n      list1.append(int(n / i))\n  list1 = list(set(list1))\n  return len(list1) - 1\n\ndef function(n):\n  ans = 0\n  if n >= 2:\n    ans += 1\n  for i in range(2, int(n ** (0.5)) + 1):\n    m = n\n    if m % i == 0:\n      while m % i == 0:\n        m = int(m / i)\n      if m % i == 1:\n        ans += 1\n  ans += divisor(n - 1)\n  return ans\nn = int(input())\nprint(function(n))", "# \u7d04\u6570\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    return divisors\n\nN = int(input())\ndivs = make_divisors(N)\n# print(sorted(divs))\ndivs2 = make_divisors(N-1)\nans = len(sorted(divs2))-1\nfor div in divs[1:]:\n    tmp = N\n    while tmp%div == 0:\n        tmp //= div\n    if tmp%div == 1:\n        ans += 1\nprint(ans)\n", "N = int(input())\nans = 0\nwnasi = []\nfor i in range(1, int(pow(N - 1, 0.5)) + 1):\n    if (N - 1) % i == 0:\n        wnasi.append(i)\n        if i != (N - 1) // i:\n            wnasi.append((N - 1) // i)\nans += len(wnasi) - 1\nwari = []\nfor i in range(2, int(pow(N, 0.5)) + 1):\n    if N % i == 0:\n        wari.append(i)\n        if i != N // i:\n            wari.append(N // i)\n\nfor i in wari:\n    if i == 1:\n        continue\n    tmpN = N\n    while True:\n        if tmpN % i == 0:\n            tmpN //= i\n        else:\n            if tmpN % i == 1:\n                ans += 1\n            break\n\nprint(ans + 1)", "n=int(input())\norgn=n\nm=n-1\norgm=m\nncounter=1\nmcounter=1\nfor i in range(2,int(m**0.5)+1):\n\tif m % i == 0:\n\t\ttmpc=1\n\t\tm //= i\n\t\twhile m % i ==0:\n\t\t\ttmpc += 1\n\t\t\tm //= i\n\t\tmcounter *= tmpc + 1\n\nif m == orgm and m != 1:\n\tmcounter += 1\nelif m > int(orgm**0.5):\n\tmcounter *= 2\nmcounter -= 1\n\n\nfor i in range(2,int(n**0.5)+1):\n\tif orgn % i == 0:\n\t\tn = orgn // i\n\t\twhile n % i ==0:\n\t\t\tn //= i\n\t\tif n % i == 1:\n\t\t\tncounter += 1\n\nprint((ncounter+mcounter))\n\n", "import sys\n\ndef read_str(): return sys.stdin.readline().strip()\ndef read_int(): return int(sys.stdin.readline().strip())\ndef read_ints(): return list(map(int, sys.stdin.readline().strip().split()))\ndef read_str_split(): return list(sys.stdin.readline().strip())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\n\ndef divisors(num):\n    lower = []\n    upper = []\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            lower.append(i)\n            if i * i != num:\n                lower.append(num // i)\n    return lower + upper[::-1]\n\n\ndef Main():\n    n = read_int()\n    div = divisors(n)[1:]\n    ans = len(divisors(n - 1)) - 1\n    for x in div:\n        num = n\n        while num % x == 0:\n            num //= x\n        if num % x == 1:\n            ans += 1\n    print(ans)\n\ndef __starting_point():\n    Main()\n\n__starting_point()", "# \u65b9\u91dd\u306f\u89e3\u8aac\u3068\u5168\u304f\u540c\u3058\u306a\u306e\u3067\u5272\u611b\n# \u306a\u3093\u30672\u306e\u3068\u304d\u3060\u3051\u7279\u5225\u306b\u306a\u3063\u305f?\n# get_divisors(1) \u304c[1]\u3068\u306a\u308b\u3079\u304d\u3068\u3053\u308d\u3067\u7a7a\u914d\u5217[]\u306b\u306a\u3063\u3066\u3044\u308b\u305b\u3044\u3067\u3001\n# \u6700\u7d42\u7684\u306a\u7b54\u3048\u304c1\u5c0f\u3055\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3002\n\nn = int(input())\n\nif n == 2:\n    print((1))\n    return\n\n# \u7d04\u6570\u5217\u6319\n# ABC136E\u3088\u308a\ndef get_divisors(num):\n    divisors = []\n    for d in range(1, num):\n        if d * d > num:\n            break\n        if num % d == 0: #\u7d04\u6570\n            divisors.append(d)\n            if d * d != num:  # num\u306e\u5e73\u65b9\u6839\u306e\u5834\u5408\u306f\u91cd\u8907\u3059\u308b\u306e\u3067\u8ffd\u52a0\u3057\u306a\u3044\n                divisors.append(int(num // d))\n\n    return divisors\n\n\nans = len(get_divisors(n-1)) - 1\n\nfor divisor in get_divisors(n):\n    if divisor == 1:\n        continue\n    temp = n\n    while(True):\n        if temp % divisor != 0:\n            break\n        temp = temp // divisor\n    \n    if temp % divisor == 1:\n        ans += 1\n\nprint(ans)\n", "def make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\nn = int(input())\nl = make_divisors(n - 1)\nl2 = make_divisors(n)\ndel l2[0]\nans = len(l) - 1\nfor i in l2:\n    k2 = n\n    while True:\n        if k2 % i == 1:\n            ans += 1\n        k2 /= i\n        if k2 % 1 != 0:\n            break\nprint(ans)", "N=int(input())\n\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return (lower_divisors + upper_divisors[::-1])[1:]\n\nF = make_divisors(N)\ncount = 0\nfor f in F:\n  n = N\n  while 1:\n    if n % f != 0:\n      n = n % f\n    else:\n      n = n // f\n    if n < f:\n      break\n  if n == 1: count += 1\nprint(count + len(make_divisors(N-1)))", "def divisor(n):\n    res = []\n    \n    i = 1\n    while i*i <= n:\n        if not n % i:\n            res.append(i)\n            if (i*i != n): res.append(n//i)     \n        \n        i += 1\n        \n    return res\n\nN = int(input())\nans = 0\n\nfor d in divisor(N):\n    if d == 1: continue\n    n = N\n    \n    while not n % d:\n        n //= d\n        \n    if n%d == 1: ans += 1\n    \nprint(ans + len(divisor(N-1))-1)", "\n\n\nN = int(input())\n\n\"\"\"\n\u611a\u76f4\u306b\u3084\u308b\u3068\u3001K\u30922\uff5eN\u306e\u7bc4\u56f2\u3067\u5168\u90e8\u8abf\u3079\u3066\u6570\u3048\u4e0a\u3052\u308b\u3002N <= 10**12 \u306a\u306e\u3067\u9593\u306b\u5408\u308f\u306a\u3044\u3002\n\n\n\u305f\u3068\u3048\u3070 N=100\u3060\u3068\u3001\n[2, 3, 4, 9, 10, 11, 33, 99, 100]\n\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3059\u6570\u5b57\u306b\u306a\u308b\u3002\n\n\u5272\u308a\u7b97\u3092\u884c\u308f\u306a\u3044\u3068\u304d\u3001\u660e\u3089\u304b\u306b N % K = 1 \u306b\u306a\u308b\n\u3053\u308c\u306f\u3001\u300cN\u3092K\u3067\u5272\u3063\u305f\u3089\u3001\uff11\u3042\u307e\u308b\u300d\u3067\u3042\u308b\u304b\u3089\u3001\u300cN-1\u3092K\u3067\u308f\u3063\u305f\u3089\u5272\u308a\u5207\u308c\u308b\u300d\u3068\u3082\u3044\u3048\u308b\u3002\n\u306a\u306e\u3067\u3001\u5272\u308a\u7b97\u304c\u8d77\u3053\u3089\u306a\u3044\u3082\u306e\u306f\u3001N-1\u306e\u7d04\u6570\u3002\n\n\u5272\u308a\u7b97\u304c\u8d77\u3053\u308b\u3084\u3064\u306f\u3001\u5272\u308c\u308b\u3060\u3051\u5272\u3063\u305f\u5f8c\u3001\u4f59\u308a\u3092\u8abf\u3079\u308c\u3070\u3088\u3044\u3002\n\"\"\"\n\n\n\ndef solve(n):\n    i = 1\n    ret = set()\n    while i * i <= n:\n        if n % i == 0:\n            ret.add(i)\n            ret.add(n // i)\n        i += 1\n\n    return ret\n\n\ndiv_N_sub_1 = solve(N-1)\ndiv_N = solve(N)\n\nans = len(div_N_sub_1) - 1\n\nfor i in div_N:\n    if i == 1:\n        continue\n    tmp = N\n    while tmp % i == 0:\n        tmp //= i\n    if tmp % i == 1:\n        ans += 1\n\n\nprint(ans)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\nimport time,random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\nmod2 = 998244353\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\ndef JA(a, sep): return sep.join(map(str, a))\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\n\n\nclass Prime():\n    def __init__(self, n):\n        self.M = m = int(math.sqrt(n)) + 10\n        self.A = a = [True] * m\n        a[0] = a[1] = False\n        self.T = t = [2]\n        for j in range(4, m, 2):\n            a[j] = False\n        for i in range(3, m, 2):\n            if not a[i]:\n                continue\n            t.append(i)\n            for j in range(i*i,m,i):\n                a[j] = False\n        self.ds_memo = {}\n        self.ds_memo[1] = set([1])\n\n    def is_prime(self, n):\n        return self.A[n]\n\n    def division(self, n):\n        d = collections.defaultdict(int)\n        for c in self.T:\n            while n % c == 0:\n                d[c] += 1\n                n //= c\n            if n < 2:\n                break\n        if n > 1:\n            d[n] += 1\n        return d.items()\n\n    # memo\n    def divisions(self, n):\n        if n in self.ds_memo:\n            return self.ds_memo[n]\n\n        for c in self.T:\n            if n % c == 0:\n                rs = set([c])\n                for cc in self.divisions(n // c):\n                    rs.add(cc)\n                    rs.add(cc * c)\n                self.ds_memo[n] = rs\n                return rs\n\n        rs = set([n])\n        self.ds_memo[n] = rs\n        return rs\n\n\ndef main():\n    n = I()\n\n    pr = Prime(10**12)\n    d = list(pr.division(n))\n    r = 0\n    l = len(d)\n    for i in range(1, 2**l):\n        t = [d[j] for j in range(l) if 2**j & i]\n        m = min(map(lambda x: x[1], t))\n        ok = True\n        for k,v in t:\n            if v % m > 0:\n                ok = False\n                break\n        if not ok:\n            continue\n        for j in range(1,m+1):\n            if m % j > 0:\n                continue\n            mk = m // j\n            u = 1\n            for k,v in t:\n                u *= k**((v//m)*mk)\n            nn = n\n            while nn % u == 0:\n                nn //= u\n            if nn % u == 1:\n                r += 1\n            # print(\"u\",u,j,nn,r)\n\n    d = pr.division(n-1)\n    # print(\"d\",d)\n    k = 1\n    for _,v in d:\n        k *= v + 1\n    r += k - 1\n\n    return r\n\nprint(main())\n\n\n\n", "def make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if ((n % i == 0)):\n            if(i>1):\n                divisors.append(i)\n            if i != n // i:\n                if(n//i>1):\n                    divisors.append(n//i)\n    return divisors\n\ndef test(n,ans_list):\n    ans_list.append(n)\n    ans_list = ans_list + make_divisors(n-1)\n    \n    for ans in make_divisors(n):\n        nn = n\n        while(nn%ans == 0):\n            nn = nn/ans\n        nn = nn%ans\n        if(nn == 1):\n            ans_list.append(ans)\n    return ans_list\n\nn = int(input())\n\nans_list = []\n\nanswer = list(set(test(n,ans_list)))\n#answer.sort()\n\nprint(len(answer))", "N=int(input())\nimport math\nans=0\nfor i in range(1,int(math.sqrt(N-1))+1):\n  if (N-1)%i==0:\n    ans+=2\n    i+=1\n  else:\n    i+=1\nans-=1\n\nif int(math.sqrt(N-1))==math.sqrt(N-1):\n  ans-=1\nfor i in range(2,int(math.sqrt(N))+1):\n  if N%i==0:\n    temp=N\n    while temp%i==0:\n      temp=temp/i\n    if temp%i==1:\n      ans+=1\n      i+=1\n    else:\n      i+=1\nans+=1\nprint(ans)\n", "def main():\n    N = int(input())\n    if N <= 3:\n        print(N - 1)\n        return\n    # (1) 2 <= k <= sqrt(N) \u3067\u984c\u610f\u3092\u6e80\u305f\u3059k\u306e\u500b\u6570\n    ans_1 = 0\n    k = 2\n    while k ** 2 <= N:\n        n = N\n        while n % k == 0:\n            n //= k\n        n %= k\n        if n == 1:\n            ans_1 += 1\n        k += 1\n    # (2) sqrt(N) < k <= N \u3067\u984c\u610f\u3092\u6e80\u305f\u3059k\u306e\u500b\u6570\n    # sqrt(N)\u3088\u308a\u5927\u304d\u3044N-1\u306e\u7d04\u6570\u306e\u500b\u6570 + 1 (k = N)\n    ans_2 = 1\n    n = 1\n    while n ** 2 < N:\n        if (N - 1) % n == 0 and ((N - 1) // n) ** 2 > N:\n            ans_2 += 1\n        n += 1\n    # \u7b54\u3048\n    print(ans_1 + ans_2)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def calc_factors(N):\n    \"\"\"\n    \u7d04\u6570\u3092list\u3067return\n    \u3053\u306e\u554f\u984c\u306fK>1\u306a\u306e\u3067\u3001\u7d04\u6570\u306b1\u3092\u542b\u3081\u3066\u306a\u3044\n    \"\"\"\n    i=2\n    factors={N}\n    while i*i<=N:\n        if N%i==0:\n            factors.add(i)\n            factors.add(N//i)\n        i+=1\n    return list(sorted(factors))\n\n\nN = int(input())\n\n\nif N==2:\n    print((1))\n    return\n#\u5272\u308a\u7b97\u3057\u306a\u3044\u5834\u5408\nans = len(calc_factors(N-1))\n#\u5272\u308a\u7b97\u3059\u308b\u5834\u5408\nfor fac in calc_factors(N):\n    tmp=N\n    while tmp%fac==0:\n        tmp//=fac\n    if tmp%fac==1:\n        ans+=1\nprint(ans)\n", "import queue\n\nN = int(input())\n\ndef common_divisors(n):\n    i = 1\n    res = []\n    while i*i <= n:\n        if n % i == 0:\n            res.append(i)\n            res.append(n//i)\n        if i*i == n:\n            res.pop()\n        i += 1\n    return res\n\nans = 0\nans += len(common_divisors(N-1))-1\n\nfor i in common_divisors(N):\n    if i == 1:\n        continue\n    n = N\n    while n % i == 0:\n        n /= i\n    if n % i == 1:\n        ans += 1\nprint(ans)\n\n", "N = int(input())\n\ndivs = set()\nn = 1\nwhile n*n <= N:\n    if N%n==0:\n        divs.add(n)\n        divs.add(N//n)\n    n += 1\n\ndivs2 = set()\nn = 1\nwhile n*n <= (N-1):\n    if (N-1)%n==0:\n        divs2.add(n)\n        divs2.add((N-1)//n)\n    n += 1\n\nans = len(divs2) - 1\nfor d in divs:\n    if d==1: continue\n    n = N\n    while n >= 1:\n        if n==1:\n            ans += 1\n            break\n        if n%d == 0:\n            n //= d\n        else:\n            if n%d == 1:\n                ans += 1\n            break\n\nprint(ans)", "\"\"\"\n0, K, 2K, 3K, 4K, ... = N-1 \u306e\u3068\u304d, \u7b54\u3048.\n\"\"\"\ndef makediv(n):\n\tlower_divisors , upper_divisors = [], []\n\ti = 1\n\twhile i*i <= n:\n\t\tif n % i == 0:\n\t\t\tlower_divisors.append(i)\n\t\t\tif i != n // i:\n\t\t\t\tupper_divisors.append(n//i)\n\t\ti += 1\n\treturn lower_divisors + upper_divisors[::-1]\n\nn = int(input())\nans = 0\nthemakedivlist = makediv(n-1)\nfor i in themakedivlist:\n\tif i >= 2:\n\t\tans += 1\nk = makediv(n)\nk.remove(1)\nfor i in k:\n\ttmpn = n\n\twhile True:\n\t\tif tmpn == 1:\n\t\t\tans += 1\n\t\t\tbreak\n\t\telif tmpn % i == 0:\n\t\t\ttmpn //= i\n\t\telif (tmpn-1) % i == 0:\n\t\t\tans += 1\n\t\t\tbreak\n\t\telse:\n\t\t\tbreak\nprint(ans)", "\ndef resolve():\n    def make_divisors(n):\n        divisors = []\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                # divisors.append((i, n // i)) # [(1,max), (2, max-1)]\n                divisors += [i,n // i]  # [1,2,3,5]\n        divisors.sort()\n        return divisors\n\n    N = int(input())\n    ans = 0\n\n    # K \u3067\u5272\u308a\u5207\u308c\u306a\u3044\u6642\n    div1 = set(make_divisors(N-1))\n    ans += len(div1) - 1\n\n    # K \u3067\u5272\u308a\u5207\u308c\u308b\u6642\n    div2 = set(make_divisors(N))\n    for k in div2:\n        if k == 1:\n            continue\n        n = N\n        while n % k == 0:\n            n //= k\n        if n % k == 1:\n            ans += 1\n    print(ans)\n\ndef __starting_point():\n    resolve()\n__starting_point()", "# F - Division or Subtraction\ndef pf(x):\n    plist = [1]\n    p = 2\n    while x>1:\n        t = 0\n        while x%p==0:\n            x /= p\n            t += 1\n        now = list(plist)\n        for i in range(t):\n            now = list(map(lambda y:int(y*p), now))\n            plist.extend(now)\n        if p>int(x**0.5)+1:\n            p = x\n        elif p==2:\n            p = 3\n        else:\n            p += 2\n    return plist\n        \nN = int(input())\nans = len(pf(N-1))-1\nfor x in pf(N)[1:]:\n    M = N\n    while M>1 and M%x==0:\n        M //= x\n    if M==1 or M%x==1:\n        ans += 1\nprint(ans)", "# coding: utf-8\n# hello world\u3068\u8868\u793a\u3059\u308b\n#dp\u3067\u3067\u304d\u306a\u3044\u304b\u306a\uff1f\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil,pi\nfrom operator import itemgetter\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ndef SI(): return input().rstrip()\ndef printns(x): print('\\n'.join(x))\ndef printni(x): print('\\n'.join(list(map(str,x))))\ninf = 10**17\nmod = 10**9 + 7\n\nn=I()\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    # divisors.sort()\n    return divisors\nu=len(make_divisors(n-1))-1\nlis=make_divisors(n)\nlis.remove(1)\n#print(lis)\ndef divsub(n,k):\n    flag=True\n    while flag==True:\n        n//=k\n        if n%k==1:\n            return 1\n            flag=False\n        elif n%k!=0:\n            return 0\n            flag=False\n#print(divsub(10,5))\nans=0\nfor i in range(len(lis)):\n    ans+=divsub(n,lis[i])\nprint(ans+u)", "import sys\nfrom bisect import *\nfrom heapq import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\n\nsys.setrecursionlimit(100000000)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\nN = int(input())\n\n\ndef f(x):\n    ans = set()\n    i = 1\n    while i * i <= x:\n        if x % i == 0:\n            ans.add(i)\n        i += 1\n    for i in ans.copy():\n        ans.add(x // i)\n    return ans\n\nans = set()\nfor K in f(N) | f(N - 1):\n    if K == 1:\n        continue\n    n = N\n    while n % K == 0:\n        n //= K\n    if n % K == 1:\n        ans.add(K)\n\nprint((len(ans)))\n", "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\n#mod = 998244353\nINF = 10**18\neps = 10**-7\n\nN = int(input())\n\n#n\u306e\u7d04\u6570\u5217\u6319\ndef divisor(n):\n    ass = []\n    for i in range(1,int(n**0.5)+1):\n        if n%i == 0:\n            ass.append(i)\n            if i**2 == n:\n                continue\n            ass.append(n//i)\n    return ass #sort\u3055\u308c\u3066\u3044\u306a\u3044\n\nans = len(divisor(N-1))-1\nb = divisor(N)\nfor bi in b:\n    if bi == 1:\n        continue\n    a = N\n    while a >= bi:\n        if a%bi == 0:\n            a = a//bi\n        else:\n            a = a%bi\n    if a == 1:\n        ans += 1\nprint(ans)\n", "def make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    divisors.sort()\n    return divisors\n\n\nN = int(input())\nN_div = make_divisors(N)[1:]\nN1_div = make_divisors(N-1)[1:]\n\nans = len(N1_div)\n\nfor i in N_div:\n    n = N\n    while n % i == 0:\n        n //= i\n    if n % i == 1:\n        ans += 1\nprint(ans)", "N = int(input())\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp != 1:\n        arr.append([temp, 1])\n\n    if arr == []:\n        arr.append([n, 1])\n\n    return arr\n\n\nL1 = factorization(N - 1)\ns = 1\n# print(L1)\nfor [a, b] in L1:\n    s *= (b + 1)\n# print(s)\n\n\ndef make_divisors(n):\n    lower_divisors, upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\n\nfor i in set(make_divisors(N))-{1}:\n    temp = N\n    while temp % i == 0:\n        temp //= i\n    if (temp-1) % i == 0:\n        s += 1\ns -= 1\nif N == 2:\n    print(1)\nelse:\n    print(s)", "def main():\n    n = int(input())\n    count = 2\n    sqrt = int(n ** (1/2))\n    for i in range(2,sqrt + 1):\n        if n % i == 1:\n            count += 2\n        elif n % i == 0:\n            ins = n\n            while ins % i == 0:\n                ins = ins // i\n            if ins % i == 1:\n                count += 1\n    if sqrt ** 2 == n - 1:\n        count -= 1\n\n    print(count)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nsys.setrecursionlimit(2000)\ndef joken(a,n):\n  if n==1:\n    return 0\n  elif a%n==0 and a//n>=n:\n    return joken(a//n,n)\n  elif a%n==1:\n    return 1\n  elif a%n==0 and a//n==1:\n    return 1\n  else:\n    return 0\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\nN=int(input())\nc=len(make_divisors(N-1))\nd=make_divisors(N)\na=0\nfor i in range(len(d)):\n  a+=joken(N,d[i])\nprint(a+c-1)", "import sys\ndef divisors(n,TF):\n    divisors = []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if TF == 1:\n                if i != n // i:\n                    divisors.append(n//i)\n    return divisors\nN = int(input())\nif N == 2:\n    print((1))\n    return\n\nans = len(divisors(N - 1, 1)) + 2\nA = divisors(N, 0)\nfor i in A:\n    x = N\n    while x % i == 0:\n        x //= i\n    if x % i == 1:\n        ans += 1\nprint(ans)\n", "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\nn = int(input())\nans=0\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    # divisors.sort()\n    return divisors\n\nndivs = make_divisors(n)\n\nn1divs = make_divisors(n-1)\nans += len(n1divs)-1\n\nfor i in range(1,len(ndivs)):\n    tmp = n\n    k = ndivs[i]\n    while tmp%k==0:\n        tmp //=k\n    if tmp%k==1:ans+=1\n\nprint(ans)\n", "def make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\nN = int(input())\ndivsN = make_divisors(N)\ndivsN2 = make_divisors(N-1)\ndivsN.pop(0)\n\nans = len(divsN2)-1\n\nfor div in divsN:\n    n = N\n    while True:\n        if n%div != 0 or n==1:\n            break\n        n //= div\n    if n%div == 1:\n        ans += 1\n\nprint(ans)\n", "n = int(input())\ndiv = []\ndiv2 = []\nans = 0\nfor i in range(1,10**6+1):\n    if n%i == 0:\n        div+=[i,n//i]\n    if (n-1)%i == 0:\n        div2+=[i,(n-1)//i]\ndiv = set(div)\ndiv2 = set(div2)\n# print(div)\na = [1]\nfor i in div:\n    if i > 1:    \n        t = n\n        while t:\n            if t%i == 0:\n                t = t//i\n            else:\n                if t%i == 1:\n                    ans += 1\n                    a += [i]\n                break\n# for i in div2:\n#     if i > 1:    \n#         t = n-1\n#         while t:\n#             if t == 1:\n#                 ans += 1\n#                 a += [i]\n#             t //= i\n#         # if n%(i-1) == 1:\n#         #     ans += 1\n#         #     a += [i-1]\n# print(ans)\n# print(a)\n# print(div)\n# print(div2)\nfor i in div2:\n    a+=[i]\na = set(a)\n# print(a)\nprint(len(a)-1)", "n=int(input())\n#\u7d04\u5206\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    return divisors\nimport sys\nsys.setrecursionlimit(10**7)\ndef func(N,d):\n    if d==1:\n        return False\n    while N>1:\n        if N%d==0:\n            N//=d\n        else:\n            if (N-1)%d==0:\n                N=1\n            else:\n                N=0\n    return True if N==1 else False\n\nans=len(set(make_divisors(n-1)))-1\nl=set(make_divisors(n))\nfor li in l:\n    if func(n,li):\n        ans+=1\nprint(ans)\n#print(ans)\n", "N=int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    # divisors.sort()\n    return divisors\n\n\n#print(make_divisors(3141))\n#N, N-1, 2\n#%*==1\nans=[2]\nif N not in ans:\n    ans.append(N)\nif (N%(N-1)!=0) and (N-1 not in ans):\n    ans.append(N-1)\nD=make_divisors(N)\nfor d in D:\n    now=N\n    if d==1:\n        continue\n    while now%d==0:\n        now=now//d\n    if now%d==1:\n        if d not in ans:\n            ans.append(d)\n#print(ans)\n\nans2=[]\nfor a in ans:\n    i=1\n    while a**i<=N:\n        x=a**i\n        now=N\n        while now%x==0:\n            now=now//x\n        if now%x==1:\n            if x not in ans2:\n                ans2.append(x)\n\n        i+=1\n#print(ans2)\nd2=make_divisors(N-1)\nfor d in d2:\n    if d!=1 and (d not in ans2):\n        ans2.append(d)\n#print(ans2)\nprint(len(ans2))", "n = int(input())\n\nif n == 2:\n  count = 1\nelse:\n  count = 2\ndivisor = []\n\nd = 2\nwhile d * d < n - 1:\n  if (n - 1) % d == 0:\n    count += 2\n  d += 1\nif d * d == n - 1:\n  count += 1\n\nd = 2\nwhile d * d < n:\n  if n % d == 0:\n    divisor.append(d)\n    divisor.append(n // d)\n  d += 1\nif d * d == n:\n  divisor.append(d)\n\nfor d in divisor:\n  tmp = n\n  while tmp % d == 0:\n    tmp //= d\n  if tmp % d == 1:\n    count += 1\n\nprint(count)", "N = int(input())\noriginalN = 0 +N\nif N == 2:\n  print(1)\n  return\nans = 0\n\"\"\"\nprimenum = [2]\ncount = [0 for _ in range(int(N**0.5)+2)]\nfor k in range(3, len(count), 2):\n  if count[k] == 0:\n    primenum.append(k)\n    for j in range(k, len(count), k):\n      count[j] = 1\n    \ndef factorization(n):\n  lis = []\n  k = 0\n  while primenum[k] <= n:\n    if n%primenum[k] == 0:\n      c = 0 \n      while n%primenum[k] == 0:\n        n //= primenum[k]\n        c += 1\n      lis.append([primenum[k], c])\n    else:\n      k += 1\n      if k > len(primenum)-1:\n        break\n  if n > 1:\n    lis.append([n, 1])\n  return lis\n\"\"\"\ndef factorization(n):\n  lis = []\n  if n % 2 == 0:\n    c = 0\n    while n%2 == 0:\n      n //= 2\n      c += 1\n    lis.append([2, c])\n  k = 3\n  while k*k <= n:\n    if n%k == 0:\n      c = 0 \n      while n%k == 0:\n        n //= k\n        c += 1\n      lis.append([k, c])\n    else:\n      k += 2\n  if n > 1:\n    lis.append([n, 1])\n  return lis\n\nlist1 = factorization(N-1)\n#print(factorization(N-1))\nans1 = 1\nfor k in range(len(list1)):\n  ans1*= list1[k][1]+1\nans1 -= 1\nans += ans1\n\n#print(ans1)\n\ndef operation(K):\n  N = originalN\n  while N%K == 0:\n    N //= K\n  if N%K == 1:\n    return True\n  else:\n    return False\n\nlist2 = factorization(N)\n#print(list2)\nfactorlist = [1]\n\nfor l in range(len(list2)):\n  list3 = []\n  for j in range(list2[l][1]):\n    for k in range(len(factorlist)):\n      list3.append(factorlist[k]*list2[l][0]**(j+1))\n  factorlist += list3\n\nfactorlist = factorlist[1:-1]\n#print(factorlist)\nans2 = 1\nfor item in factorlist:\n  if operation(item):\n    #print(item)\n    ans2 +=1\n\n\nans += ans2\n#print(ans2)\n\nprint(ans)", "import math\nimport copy\ndef prime_factorize(n):\n    a = [n]\n    for i in range(2, math.floor(n ** 0.5) + 1):\n        if n % i == 0:\n            a.append(i)\n            if n // i != i:\n                a.append(n // i)\n    return a\n\nN = int(input())\nprime_n = prime_factorize(N)\nprime_n_1 = prime_factorize(N - 1)\n\nans = 0\nfor i in prime_n:\n    n = copy.deepcopy(N)\n    while (n % i) == 0:\n            n = n // i\n    if (n % i) == 1:\n        ans += 1\nans += len(prime_n_1)\nif N > 2:\n    print(ans)\nelse:\n    print(1)", "\ndef check(N,K):\n    while N % K == 0:\n        N //= K\n    return (N % K == 1)\n\ndef divisor(N):\n    d = []\n    K = 1\n    while K*K <= N:\n        if N % K == 0:\n            d.append(K)\n            if K*K != N:\n                d.append(N//K)\n        K += 1\n    #ans += (N - 1)//K\n    return d\n\n\nN = int(input())\n\ndivi = divisor(N)\n\nans = 0\n\nfor x in divi:\n    if x > 1:\n        ans += int(check(N,x))\n\nans += len(divisor(N - 1)) - 1\nprint(ans)\n\n", "N = int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    # divisors.sort()\n    return divisors\n\nans = len(make_divisors(N-1))-1\nls = make_divisors(N)[1:]\n\nfor i in ls:\n    n = N\n    while n % i == 0:\n        n //= i\n    if n % i == 1:\n        ans += 1\n\nprint(ans)    \n", "N = int(input())\nans = set()\n\ndef check(N, k):\n    if k<2:\n        return False\n    N //= k\n    while N:\n        if (N-1)%k==0:\n            return True\n        if N%k:\n            return False\n        N //= k\n    return False\n\n\nfor k in range(1, int(N**0.5)+1):\n    if (N-1)%k==0:\n        k1, k2 = k, (N-1)//k\n        ans.add(k1)\n        ans.add(k2)\n    if N%k==0:\n        k1, k2 = k, N//k\n        if check(N, k1):\n            ans.add(k1)\n        if check(N, k2):\n            ans.add(k2)\n\nans.remove(1)\nprint(len(ans))", "def main():\n    N = int(input())\n\n    # K > 1\n\n    def divisor_set(x):\n        ret = set()\n        if x > 1:\n            ret.add(x)\n\n        d = 2\n        while d * d <= x:\n            if x % d == 0:\n                ret.add(d)\n                ret.add(x // d)\n            d += 1\n        return ret\n\n    # N % K == 1\n    # (N-1) % K == 0\n    # K > 1\n\n    ans = 0\n    ans += len(divisor_set(N - 1))\n\n    # N % K == 0\n    # N //= K ---> M\n    # (M-1) % K == 0\n\n    for k in divisor_set(N):\n        x = N\n        while x % k == 0:\n            x //= k\n        if x % k == 1:\n            ans += 1\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n# import sys\n#\n# sys.setrecursionlimit(10 ** 7)\n#\n# input = sys.stdin.readline\n# rstrip()\n# int(input())\n# map(int, input().split())\n\n__starting_point()", "N = int(input())\n\ndef f(N, i):\n    if i == 1:\n        return False\n    while N%i == 0:\n        N //= i\n    if N%i == 1:\n        return True\n    else:\n        return False\n        \nans = 0\ni = 1\nwhile i <= N**0.5:\n    if N%i > 0:\n        i += 1\n        continue\n    if f(N, i):\n        ans += 1\n    if i%(N//i) == 1:\n        ans += 1\n    i += 1\n\ni = 1\nwhile i <= (N-1)**0.5:\n    if (N-1)%i > 0:\n        i += 1\n        continue\n    if N%i == 1 and N//i != i:\n        ans += 1\n    if N%((N-1)//i) == 1:\n        ans += 1\n    i += 1\n\nprint(ans)", "\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n        \n\n    # divisors.sort()\n    return divisors\n\nN = int(input())\nans = len(make_divisors(N-1))-1\n\nfor i in make_divisors(N):\n  if i == 1:\n    continue\n    \n  Ni = int(N/i)\n  \n  while Ni % i == 0:\n    Ni = int(Ni/i)\n    \n  if Ni % i == 1:\n    ans+=1\n    \n\nprint(ans)", "import math\nN = int(input())\nif N == 2:\n    print((1))\n    return\nans = 0\nM = int(N**0.5) + 1\nfor k in range(2, M):\n    n = N\n    while n:\n        if n % k == 0:\n            n //= k\n        elif n % k == 1:\n            ans += n != N\n            break\n        else:\n            break\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5 // 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp != 1:\n        arr.append([temp, 1])\n\n    if arr == []:\n        arr.append([n, 1])\n\n    return arr\n\n\nans2 = 1\nfor _, i in factorization(N - 1):\n    ans2 *= (1 + i)\nans += ans2\nprint(ans)\n", "# 1\u306f\u9664\u5916\n# \u30fbN-1\u306e\u7d04\u6570\u306f\u5168\u3066\u5bfe\u8c61\n# \u30fbN\u306e\u7d04\u6570\u3067sqrt(N)\u4ee5\u4e0b\u306e\u6570\u306b\u3064\u3044\u3066\u3001N\u3067\u5272\u308c\u306a\u304f\u306a\u308b\u307e\u3067\u5272\u3063\u3066\u3001\u6700\u5f8c\u306b\u3042\u307e\u308a\u304c1\u306b\u306a\u308c\u3070OK\n# \u30fbN\u81ea\u8eab\u306f\u5fc5\u305a\u5bfe\u8c61\n# \u3053\u308c\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\n\nN = int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    return divisors\n  \n# N-1\u306e\u7d04\u6570\u306e\u500b\u6570\nans = len(make_divisors(N-1)) - 1\n\ndef check(n,x):\n  # x\u3067\u5272\u3063\u305f\u4f59\u308a\u304cx\u306e\u500d\u6570\u3067\u306a\u304f\u306a\u308b\u307e\u3067x\u3067\u5272\u308b\n  # x\u306e\u500d\u6570\u3067\u306a\u304f\u306a\u3063\u305f\u3068\u304d\u306bx\u3067\u5272\u3063\u30661\u4f59\u308c\u3070OK\n  while n % x == 0:\n    n //= x\n  return (n % x == 1)\n\n# N\u306e\u7d04\u6570\u30672\u4ee5\u4e0asqrt(N)\u4ee5\u4e0b\u306e\u6570\nfor i in range(2,int(N ** 0.5) + 1):\n  if N % i == 0:\n    if check(N,i):\n      ans += 1\n\n# N\u81ea\u8eab\u3082\u5bfe\u8c61\nans += 1\n\nprint(ans)\n", "from math import ceil\n\ndef enum_divisor(n):\n    res = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i != 0:\n            continue\n        res.append(i)\n        if i * i != n:\n            res.append(n // i)\n    return res\n\nans = 0\nn = int(input())\nfor x in enum_divisor(n):\n    if x == 1:\n        continue\n    tmp = n\n    while tmp % x == 0:\n        tmp //= x\n    if tmp % x == 1:\n        ans += 1\n\nans += len(enum_divisor(n - 1)) - 1\nprint(ans)", "n = int(input())\n\nif n == 2:\n    print(1)\n    return\nnum = n - 1\ncnt = 1\nlst = [n]\nfor i in range(2, int(n ** 0.5) + 1):\n    if num % i == 0:\n        cnt += 2\n        if num == i ** 2:\n            cnt -= 1\n    if n % i == 0:\n        lst.append(i)\n        if n != i ** 2:\n            lst.append(n // i)\nfor num in lst:\n    n2 = n\n    while n2 % num == 0:\n        n2 //= num\n    if n2 % num == 1:\n        cnt += 1\nprint(cnt)", "def make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\nN = int(input())\ndivsN = make_divisors(N)\ndivsN2 = make_divisors(N-1)\ndivsN.pop(0)\n\nans = len(divsN2)-1\n\nfor div in divsN:\n    n = N+1-1\n    while True:\n        if n%div != 0 or n==1:\n            break\n        n //= div\n    if n%div == 1:\n        ans += 1\n\nprint(ans)", "N = int(input())\noriginalN = 0 +N\nif N == 2:\n  print(1)\n  return\nans = 0\nprimenum = [2]\ncount = [0 for _ in range(int(N**0.5)+2)]\nfor k in range(3, len(count), 2):\n  if count[k] == 0:\n    primenum.append(k)\n    for j in range(k, len(count), k):\n      count[j] = 1\n    \ndef factorization(n):\n  lis = []\n  k = 0\n  while primenum[k] <= n:\n    if n%primenum[k] == 0:\n      c = 0 \n      while n%primenum[k] == 0:\n        n //= primenum[k]\n        c += 1\n      lis.append([primenum[k], c])\n    else:\n      k += 1\n      if k > len(primenum)-1:\n        break\n  if n > 1:\n    lis.append([n, 1])\n  return lis\n\nlist1 = factorization(N-1)\n#print(factorization(N-1))\nans1 = 1\nfor k in range(len(list1)):\n  ans1*= list1[k][1]+1\nans1 -= 1\nans += ans1\n\n#print(ans1)\n\ndef operation(K):\n  N = originalN\n  while N%K == 0:\n    N //= K\n  if N%K == 1:\n    return True\n  else:\n    return False\n\nlist2 = factorization(N)\n#print(list2)\nfactorlist = [1]\n\nfor l in range(len(list2)):\n  list3 = []\n  for j in range(list2[l][1]):\n    for k in range(len(factorlist)):\n      list3.append(factorlist[k]*list2[l][0]**(j+1))\n  factorlist += list3\n\nfactorlist = factorlist[1:-1]\n#print(factorlist)\nans2 = 1\nfor item in factorlist:\n  if operation(item):\n    #print(item)\n    ans2 +=1\n\n\nans += ans2\n#print(ans2)\n\nprint(ans)", "# coding: utf-8\nimport sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN = ir()\n# \u5019\u88dc\u306fN\u304bN-1\u306e\u7d04\u6570\nanswer = 0\n\ndef make_divisors(n):  # n\u306e\u7d04\u6570\u3092\u5217\u6319\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors[1:]\n\ncand = make_divisors(N) + make_divisors(N-1)\nfor x in cand:\n    M = N\n    while M % x == 0:\n        M //= x\n    r = M % x\n    if r == 1:\n        answer += 1\n\nprint(answer)\n", "# 1\u306f\u9664\u5916\n# \u30fbN-1\u306e\u7d04\u6570\u306f\u5168\u3066\u5bfe\u8c61\n# \u30fbN\u306e\u7d04\u6570\u3067\u3001sqrt(N)\u4ee5\u4e0b\u3067\u3042\u308c\u3070OK\u3000\u305f\u3060\u3057N\u81ea\u8eab\u306f\u5bfe\u8c61\n# \u3053\u308c\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\n\nN = int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    return divisors\n  \n# N-1\u306e\u7d04\u6570\u306e\u500b\u6570\nans = len(make_divisors(N-1)) - 1\n\ndef check(n,x):\n  # x\u3067\u5272\u3063\u305f\u4f59\u308a\u304cx\u306e\u500d\u6570\u3067\u306a\u304f\u306a\u308b\u307e\u3067x\u3067\u5272\u308b\n  # x\u306e\u500d\u6570\u3067\u306a\u304f\u306a\u3063\u305f\u3068\u304d\u306bx\u3067\u5272\u3063\u30661\u4f59\u308c\u3070OK\n  while n % x == 0:\n    n //= x\n  return (n % x == 1)\n\n# N\u306e\u7d04\u6570\u30672\u4ee5\u4e0asqrt(N)\u4ee5\u4e0b\u306e\u6570\nfor i in range(2,int(N ** 0.5) + 1):\n  if N % i == 0:\n    if check(N,i):\n      ans += 1\n\n# N\u81ea\u8eab\u3082\u5bfe\u8c61\nans += 1\n\nprint(ans)\n", "n = int(input())\n\n# \u4f8b\u5916\u51e6\u7406\nif n == 2:\n    print(1)\n    return\nif n == 3:\n    print(2)\n    return\n\n# n % k = 1 \u306e\u6570\nm = n - 1\ni = 2\nans = 1\nwhile i * i <= m:\n    if m % i == 0:\n        num = 1\n        while m % i == 0:\n            num += 1\n            m //= i\n        ans *= num\n    i = i + 1\nif m != 1:\n    ans *= 2\nans -= 1\n\n# n % k = 0 \u306e\u5834\u5408\n# n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\nm = n\nimport numpy as np\ni = 2\nfactor = []\nwhile i * i <= n:\n    if n % i == 0:\n        l = []\n        num = 1\n        l.append(num)\n        while n % i == 0:\n            num *= i\n            l.append(num)\n            n //= i\n        factor.append(np.array(l))\n    i = i + 1\nif n > 1:\n    factor.append(np.array([1, n]))\n\n# \u76f4\u7a4d\u3092\u6c42\u3081\u308b\u3053\u3068\u3067n\u306e\u5168\u7d04\u6570\u3092\u5f97\u308b\ndivisor = factor[-1]\nfor i in range(len(factor) - 1):\n    divisor = np.outer(divisor, factor[i])\ndivisor = np.outer(np.array(1), divisor)\n\n# \u5224\u5b9a\nfor i in divisor[0]:\n    if i == 1:\n        continue\n    n = m\n    while n % i == 0:\n        n //= i\n    if n % i == 1:\n        ans += 1\n\nprint(ans)", "import math\nn=int(input())\ndef s_bunkai(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\nnum=s_bunkai(n-1)\nans=1\nif num[0][0]!=1:\n    ans=1\n    for i in range(len(num)):\n        ans*=num[i][1]+1\nfor i in range(2,int(math.sqrt(n))+1):\n    if n%i==0:\n        cnt1=n\n        for j in range(50):\n            if cnt1%i==0:\n                cnt1//=i\n                if cnt1==1:\n                    ans+=1\n                    break\n            else:\n                if cnt1%i==1:\n                    ans+=1\n                break\nprint(ans)\n", "import copy\ndef make_divisors(n):\n  divisors = []\n  for i in range(1, int(n ** 0.5) + 1):\n    if n % i == 0:\n      divisors.append(i)\n      if i != n // i:\n        divisors.append(n // i)\n\n  # divisors.sort()\n  return divisors\n\n\nn = int(input())\n\nbox = make_divisors(n-1)\nans = len(box)-1\nboxn = make_divisors(n)\nfor i in range(1,len(boxn)):\n    k = boxn[i]\n    nn = copy.deepcopy(n)\n    while nn % k == 0 and nn >= k:\n        nn = nn // k\n\n    if nn % k == 1:\n        ans += 1\n\nprint(ans)\n", "N = int(input())\n\n\"\"\"\n\u5f15\u304d\u7b97\u306e\u307f\nN mod K == -1\nN-1 mod K == 0\nK \u306fN-1\u306e\u7d04\u6570\n\n\u5272\u308a\u7b97\u304c\u542b\u307e\u308c\u308b\nK\u306fN\u306e\u7d04\u6570\n\u5927\u3057\u305f\u500b\u6570\u306a\u3044\u306e\u3067\u3001\u78ba\u304b\u3081\u308b\u3002\n\"\"\"\n\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\nA = make_divisors(N-1)\nB = make_divisors(N)\nANS = set(A)\nfor b in B:\n  if b <= 1:\n    continue\n  wk = N\n  while wk % b == 0:\n    wk = wk // b\n  if wk % b == 1:\n    ANS.add(b)\n    \nprint(len(ANS)-1) # 1\u3092\u9664\u304f", "n = int(input())\n\nif n == 2:\n    print((1))\n    return\n\n# \u7d04\u6570\u5217\u6319\n# ABC136E\u3088\u308a\ndef get_divisors(num):\n    divisors = []\n    for d in range(1, num):\n        if d * d > num:\n            break\n        if num % d == 0: #\u7d04\u6570\n            divisors.append(d)\n            if d * d != num:  # num\u306e\u5e73\u65b9\u6839\u306e\u5834\u5408\u306f\u91cd\u8907\u3059\u308b\u306e\u3067\u8ffd\u52a0\u3057\u306a\u3044\n                divisors.append(int(num // d))\n\n    return divisors\n\n\nans = len(get_divisors(n-1)) - 1\n\nfor divisor in get_divisors(n):\n    if divisor == 1:\n        continue\n    temp = n\n    while(True):\n        if temp % divisor != 0:\n            break\n        temp = temp // divisor\n    \n    if temp % divisor == 1:\n        ans += 1\n\nprint(ans)\n", "num = int(input())\nn = num\nnum -= 1\nresult = 1\nfor i in range(2, int(pow(num, 0.5))+1):\n    c = 0\n    while num%i==0:\n        num //= i\n        c += 1\n    if c>0:\n        result *= c+1\n\nif num > 1:\n    result *= 2\nresult -= 1\n\nr = set()\nfor i in range(2, int(pow(n, 0.5))+1):\n    num = n\n    if num%i==0:\n        r.add(i)\n        r.add(n//i)\nr.add(n)\nfor i in r:\n    num = n\n    while num%i==0:\n        num //= i\n    if num%i == 1:\n        result += 1\n\nprint(result)", "n = int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    return divisors\n\na = make_divisors(n)\nb = make_divisors(n-1)\n\nans = (len(b) - 1)\nfor i in a:\n    x = n\n    if i == 1:\n        continue\n    elif i == n:\n        ans += 1\n    else:\n        while x % i == 0:\n            x /= i\n        if x % i == 1:\n            ans += 1\n\nprint(ans)\n", "# \u7d04\u6570\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    return divisors\n\nN = int(input())\ndivs = make_divisors(N)\n# print(sorted(divs))\ndivs2 = make_divisors(N-1)\nans = len(sorted(divs2))-1\nfor div in divs[1:]:\n    tmp = N\n    while tmp%div == 0:\n        tmp //= div\n    if tmp%div == 1:\n        ans += 1\nprint(ans)", "import sys\ndef input():\n    return sys.stdin.readline()[:-1]\ndef main():\n    N = int(input())\n    P = []\n    for k in range(1,1+int((N-1)**(1/2))):\n        if (N-1)%k == 0:\n            P.append((N-1)//k)\n            P.append(k)\n    P = set(P)\n    ans = len(P)\n    for k in range(2,1+int(N**(1/2))):\n        if N%k == 0:\n            t = N//k\n            while t%k == 0:\n                t //= k\n            if t%k == 1:\n                ans += 1\n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom math import gcd\n\nN = int(input())\nif N == 2:\n    print((1))\n    return\n\n\"\"\"2\u4ee5\u4e0a\u306e\u6574\u6570n => [[\u7d20\u56e0\u6570, \u6307\u6570], ...]\u306e2\u6b21\u5143\u30ea\u30b9\u30c8\"\"\"\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\n\nfactors = factorization(N)\nans = 0\n\n# K^i\ntmp = factors[0][1]\nfor k, i in factors:\n    tmp = gcd(tmp, i)\nptn = 1\nif tmp != 1:\n    for k, i in factorization(tmp):\n        ptn *= i+1\nans += ptn\n\n# ak+1\nptn = 1\nfor k, i in factorization(N-1):\n    ptn *= i+1\nptn -= 1  # k=1\u306e\u3068\u304d\u3092\u9664\u5916\nans += ptn\n\n# (ak+1)*k^i\nptn = 0\nfor f, n in factors:\n    for i in range(1, n+1):\n        k = f**i\n        tmp = N\n        while True:\n            if tmp%k!=0:\n                break\n            tmp = tmp/k\n        ptn += ((tmp-1)%k==0 and tmp!=1)\nans += ptn\n\nprint(ans)\n", "import itertools\nfrom collections import deque,defaultdict,Counter\nfrom itertools import accumulate\nimport bisect\nfrom heapq import heappop,heappush,heapify\nimport math\nfrom copy import deepcopy\nimport queue\nimport numpy as np\n# sympy as syp(\u7d20\u56e0\u6570\u5206\u89e3\u3068\u304b)\nMod = 1000000007\ndef sieve_of_eratosthenes(n):\n    if not isinstance(n,int):\n        raise TypeError(\"n is not int\")\n    if n<2:\n        raise ValueError(\"n is not effective\")\n    prime = [1]*(n+1)\n    for i in range(2,int(math.sqrt(n))+1):\n        if prime[i] == 1:\n            for j in range(2*i,n+1):\n                if j%i == 0:\n                    prime[j] = 0\n    res = []\n    for i in range(2,n+1):\n        if prime[i] == 1:\n            res.append(i)\n    return res\n\n \nclass UnionFind:\n    def __init__(self,n):\n        self.parent = [i for i in range(n+1)]\n        self.rank = [0 for i in range(n+1)]\n    \n    def findroot(self,x):\n        if x == self.parent[x]:\n            return x\n        else:\n            y = self.parent[x]\n            y = self.findroot(self.parent[x])\n            return y\n    \n    def union(self,x,y):\n        px = self.findroot(x)\n        py = self.findroot(y)\n        if px < py:\n            self.parent[y] = px\n        else:\n            self.parent[px] = py\n \n    def same_group_or_no(self,x,y):\n        return self.findroot(x) == self.findroot(y)\n\ndef main():  #startline-------------------------------------------\n    def divisor(n):\n        res = []\n        for i in range(1, int(np.sqrt(n)) + 1):\n            if n % i == 0:\n                res.append(i)\n                j = n // i\n                if j != i:res.append(j)\n        res.sort(reverse = True)\n        return res[::-1]\n    n = int(input())\n    div1 = divisor(n - 1)\n    div2 = divisor(n)\n    ans = len(div1) - 1\n    for d in div2:\n        if d == 1: continue\n        nn = n\n        while nn % d == 0:\n            nn //= d\n        if nn % d == 1:\n            ans += 1\n\n    print(ans)\n\ndef __starting_point():\n    main() #endline===============================================\n__starting_point()", "import math\n\nn = int(input())\nans=2\n\ndef go(n,k):\n\taux=1\n\twhile(n%k==0):\n\t\tn/=k\n\tif n%k==1:\n\t\treturn True\n\treturn False\n\nfor i in range(2,n):\n\tif(i*i>n): \n\t\tbreak\n\tif n%i==0:\n\t\tif(go(n,i)): \n\t\t\tans+=1\n\t\tif(i!=n/i and go(n,n/i)):\n\t\t\tans+=1\nn-=1\n\nfor i in range(2,n):\n\tif(i*i>n): \n\t\tbreak\n\tif n%i==0: \n\t\tans+=1\n\t\tif(i!=n/i):\n\t\t\tans+=1\nif n==1:\n\tprint(\"1\")\nelse:\n\tprint(ans)", "N = int(input())\n\ndef divisors(n):\n    ret1 = []\n    ret2 = []\n    i = 1\n    while i**2 <= N:\n        if n%i == 0:\n            ret1 += [i]\n            ret2 += [n//i]\n        i += 1\n    return ret1 + ret2\n\nans1 = set(divisors(N-1))\nans2_cand = set(divisors(N))\nans2 = 0\nfor k in ans2_cand:\n    if k == 1: continue\n    n = N\n    while n%k == 0:\n        n = n//k\n    if n%k == 1:\n        ans2 += 1\n\n\nprint(len(ans1) + ans2 -1)", "import sys\n# import re\nimport math\nimport collections\n# import decimal\nimport bisect\nimport itertools\nimport fractions\n# import functools\nimport copy\n# import heapq\nimport decimal\n# import statistics\nimport queue\n\n# import numpy as np\n\nsys.setrecursionlimit(10000001)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: list(map(int, sys.stdin.readline().split()))\nna = lambda: list(map(int, sys.stdin.readline().split()))\n\n\n# ===CODE===\n# \u7d04\u6570\u3092\u5217\u6319\u3000n=10^12\u307e\u3067\u3044\u3051\u308b\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n\n    # divisors.sort()\n    divisors.remove(1)\n    return divisors\n\n\ndef main():\n    n = ni()\n\n    ans = set()\n    ans.add(n)\n    for i in range(2, int(n ** (0.5)) + 1):\n        tmp = n\n        while tmp % i == 0:\n            tmp //= i\n        if (tmp - 1) % i == 0:\n            ans.add(i)\n\n    yaku = set(make_divisors(n - 1))\n\n    ans = ans | yaku\n\n    print((len(ans)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\ndef main():\n  n = int(input())\n\n  def get_divisors(num):\n    divisors = []\n    for i in range(1, int(num ** 0.5) + 1):\n      if num % i == 0:\n        divisors.extend([i, num // i])\n\n    return set(divisors)\n\n  ans = len(get_divisors(n - 1)) - 1\n\n  for k in get_divisors(n):\n    if k == 1: continue\n\n    num = n\n    while num % k == 0:\n      num = num // k\n\n    if num % k == 1:\n      ans += 1\n\n  print(ans)\n\nmain()\n", "n=int(input())\nns=int(n**0.5)\nnms=int((n-1)**0.5)\np=[n]\nfor i in range(2,ns+1):\n  if n%i==0:\n    p.append(i)\n    if i!=n//i:\n      p.append(n//i)\n\ndef chd(x,k):\n  while x%k==0:\n    x=x//k\n  return int((x%k)==1)\n\ncount=0\nfor i in p:\n  count+=chd(n,i)\nfor i in range(2,nms+1):\n  if (n-1)%i==0:\n    count+=1\n    if i!=(n-1)//i:\n      count+=1\nprint(count+1-(n==2))", "# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\n# MOD = int(1e09) + 7\nMOD = 998244353\nINF = int(1e15)\n\n\ndef divisor(N):\n    res = []\n    i = 2\n    while i * i <= N:\n        if N % i == 0:\n            res.append(i)\n            if i != N // i:\n                res.append(N // i)\n        i += 1\n    if N != 1:\n        res.append(N)\n    return res\n\n\ndef solve():\n    N = Scanner.int()\n    d0 = divisor(N - 1)\n    ans = len(d0)\n    d1 = divisor(N)\n    for d in d1:\n        X = N\n        while X % d == 0:\n            X //= d\n        if X % d == 1:\n            ans += 1\n    print(ans)\n\n\ndef main():\n    # sys.setrecursionlimit(1000000)\n    # sys.stdin = open(\"sample.txt\")\n    # T = Scanner.int()\n    # for _ in range(T):\n    #     solve()\n    # print('YNeos'[not solve()::2])\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# \u65b9\u91dd\u306f\u89e3\u8aac\u3068\u5168\u304f\u540c\u3058\u306a\u306e\u3067\u5272\u611b\n\nn = int(input())\n\n# \u7d04\u6570\u5217\u6319\n# ABC136E\u3088\u308a\ndef get_divisors(num):\n    if num == 1:\n        return [1]\n    \n    divisors = []\n    for d in range(1, num):\n        if d * d > num:\n            break\n        if num % d == 0: #\u7d04\u6570\n            divisors.append(d)\n            if d * d != num:  # num\u306e\u5e73\u65b9\u6839\u306e\u5834\u5408\u306f\u91cd\u8907\u3059\u308b\u306e\u3067\u8ffd\u52a0\u3057\u306a\u3044\n                divisors.append(int(num // d))\n\n    return divisors\n\n\nans = len(get_divisors(n-1)) - 1\n\nfor divisor in get_divisors(n):\n    if divisor == 1:\n        continue\n    temp = n\n    while(True):\n        if temp % divisor != 0:\n            break\n        temp = temp // divisor\n    \n    if temp % divisor == 1:\n        ans += 1\n\nprint(ans)\n", "\ndef solve1(n):\n    # n = k ^ a\n    res = []\n    for i in range(1, 100):\n        u = int(pow(n, 1.0 / i) + 0.1)\n        if u ** i == n:\n            res.append(u)\n    return set(res)\n\ndef solve2(n):\n    # n = a * k + 1\n    m = n - 1\n\n    i = 1\n    res = set()\n    while i * i <= m:\n        if m % i == 0:\n            res.add(i)\n            res.add(m / i)\n        i += 1\n    return res ^ set([1])\n\ndef solve3(n):\n    i = 2\n    res = set()\n    while i * i <= n:\n        if n % i == 0:\n            m = n / i\n            while m and m % i == 0:\n                m /= i\n            if m % i == 1:\n                res.add(i)\n        i += 1\n    return res\n\ndef brute_force(n):\n    res = []\n    for i in range(2, n + 1):\n        m = n\n        while m % i == 0:\n            m /= i\n        m %= i\n        if m == 1:\n            res.append(i)\n    # print res\n    return len(res)\n\ndef solve(n):\n    s1 = solve1(n)\n    s2 = solve2(n)\n    s3 = solve3(n)\n    # print sorted(s1 | s2 | s3)\n    return len(s1 | s2 | s3)\n\nassert solve(6) == 3\nassert solve(3141) == 13\nassert solve(314159265358) == 9\n\nassert solve(10 ** 12)\n\nimport random\nfor i in range(2, 100):\n    assert brute_force(i) == solve(i)\n\nn = int(input())\nprint(solve(n))\n", "def divisors(n):\n    ret = set()\n    for i in range(1, int(n**0.5)+2):\n        if n % i == 0:\n            ret.add(i)\n            ret.add(n // i)\n    ret.remove(1)\n    return ret\n\n\ndef main():\n    N = int(input())\n    s = divisors(N)\n    ans = divisors(N-1)\n\n    for x in s:\n        n = N\n        if x == 1:\n            continue\n        while(n % x == 0):\n            n = n // x\n        if n % x == 1:\n            ans.add(x)\n    print((len(ans)))\n\n\nmain()\n", "N = int(input())\nans = set()\n\ndef check(N, k):\n    if k<2:\n        return False\n    N //= k\n    while N:\n        if (N-1)%k==0:\n            return True\n        if N%k:\n            return False\n        N //= k\n\nfor k in range(1, int(N**0.5)+1):\n    if (N-1)%k==0:\n        ans.add(k)\n        ans.add((N-1)//k)\n    if N%k==0:\n        if check(N, k):\n            ans.add(k)\n        if check(N, N//k):\n            ans.add(N//k)\n\nans.remove(1)\nprint(len(ans))", "def div(n):\n    r = int(n**(1/2))\n    for i in range(1, r + 1):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                yield n // i\n\n\nn = int(input())\ncount = len(list(div(n-1)))-1\nfor i in div(n):\n    if i > 1:\n        x = n\n        while x % i == 0:\n            x //= i\n        if x % i == 1:\n            count += 1\n\nprint(count)\n", "#import sys\n#import numpy as np\nimport math\n#from fractions import Fraction\nimport itertools\nfrom collections import deque\nfrom collections import Counter\n#import heapq\n#from fractions  import gcd\n#input=sys.stdin.readline\nimport bisect\nn=int(input())\nm=int(pow(n,0.5))\ns=set()\nt=set()\nfor i in range(1,m+1):\n    if n%i==0:\n        s.add(i)\n        s.add(n//i)\n    if (n-1)%i==0:\n       t.add(i)\n       t.add((n-1)//i) \nans=len(t)-1\nfor i in s:\n    if i==1:\n      continue\n    c=n\n    while True:\n        if c%i==0:\n            c=c//i\n        else:\n            if c%i==1:\n                ans+=1\n            break\nprint(ans)", "N=int(input())\nimport math\na=0\nfor i in range(1,int(math.sqrt(N-1))+1):\n  if (N-1)%i==0:\n    a+=2\n    i+=1\n  else:\n    i+=1\na-=1\n\nif int(math.sqrt(N-1))==math.sqrt(N-1):\n  a-=1\nfor i in range(2,int(math.sqrt(N))+1):\n  if N%i==0:\n    t=N\n    while t%i==0:\n      t=t/i\n    if t%i==1:\n      a+=1\n      i+=1\n    else:\n      i+=1\na+=1\nprint(a)\n               \n", "def main():\n  n = int(input())\n  ans = 0\n  for k in divisors(n):\n    if k == 1:\n      continue\n    if check(n, k):\n      ans += 1\n  ans += len([None for k in divisors(n-1) if k != 1])\n  print(ans)\n\ndef check(original_n, k):\n  n = original_n\n  while n % k == 0:\n    n = n // k\n  n = n % k\n  return n == 1\n\ndef divisors(n):\n  result = []\n  for i in range(1, n+1):\n    if i*i > n:\n      break\n    if n%i == 0:\n      result.append(i)\n      d = n // i\n      if d != i:\n        result.append(d)\n  return result\n\n\nmain()", "N = int(input())\ndef cd(n):\n  ls = []\n  for i in range(1,int(n**(1/2))+1):\n    if n % i == 0:\n      ls += [i, n//i]\n  return ls\n\nans = len(set(cd(N-1))) - 1\nfor j in set(cd(N)):\n  a = N\n  if not j == 1:\n    while a % j == 0:\n      a //= j    \n    if a % j == 1:\n      ans += 1\nprint(ans)", "N = int(input())\n\n# \u7d04\u6570\n# O(N**0.5)\ndef yakusu(N):\n    ret = [[], []]\n    for i in range(1, int(N ** 0.5)+1):\n        if N % i == 0:\n            ret[0].append(i)\n            if i ** 2 != N:\n                ret[1].append(N//i)\n    return ret[0] + ret[1][::-1]\n\nans = 0\nfor a in yakusu(N):\n    if a == 1: continue\n    \n    if N % a == 0:\n        b = N\n        while b % a == 0:\n            b //= a\n        if (b-1) % a == 0:\n            ans += 1\nprint(ans + len(yakusu(N-1)) - 1)", "import math\ndef calc_yakusu_num(n):\n    num = 0\n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n // i:\n                num += 1\n            else:\n                num += 2\n    return num - 1\n    \ndef calc_yakusu(n):\n    yakusu = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n // i:\n                yakusu.append(i)\n            else:\n                if i != 1:\n                    yakusu.append(i)\n                yakusu.append(n // i)\n    return yakusu\n\ndef __starting_point():\n    ans = 0\n    n = int(input())\n\n    ans += calc_yakusu_num(n - 1)\n    \n    y = calc_yakusu(n)\n  \n\n    for i in y:\n        tmp = n\n        while tmp % i == 0:\n            tmp //= i\n        if tmp % i == 1:\n            ans += 1\n    print(ans)\n\n__starting_point()", "n = int(input())\nfrom numpy import sqrt\ncnt = 2\nrt = int(sqrt(n))\nfor i in range(2,rt+1):\n    if n % i == 0:\n        m = n\n        while m%i ==0:\n            m = m//i\n        if m%i == 1:\n            cnt += 1\n    elif (n-1) % i ==0:\n        cnt += 2\nif n == rt ** 2 + 1:\n    cnt -= 1\nprint(cnt)", "def make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return divisors\n                \nn = int(input())\n\na = make_divisors(n)\nb = make_divisors(n - 1)\n\nd = list(set(a + b))\n\nans = 0\n\nfor i in list(d):\n    if i == 1:\n        continue\n    x = n\n    while x % i == 0:\n        x /= i\n    \n    if x % i == 1:\n        ans += 1\n\nprint(ans)", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    N = int(input())\n    ans = {N}\n    if N > 2: ans |= {N-1}\n    for i in range(2, N): #N-1\u306e\u7d04\u6570\u306a\u3089\u3070subtract\u3057\u305f\u5f8c1\u306b\u306a\u308b\u3002\u3082\u3057\u304f\u306fpow(k, x) == N\u306e\u5834\u5408\n        if i ** 2 > N: break\n        if (N - 1) % i == 0:\n            ans |= {i}\n            if i ** 2 < N - 1:\n                ans |= {(N - 1) // i}\n        if N % i == 0:\n            k = N\n            while k % i == 0:\n                k //= i\n            if k % i == 1: ans |= {i}\n            if i ** 2 < N:\n                k = N\n                while k % i == 0:\n                    k //= i\n                if k % i == 1: ans |= {i}\n    print(len(ans))\n    #print(ans)\n\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "def check(n, i):\n    while n >= i and n % i == 0:\n        n //= i\n    return n % i == 1\n\ndef main():\n    N = int(input())\n    i = 2\n    r = set()\n    while i * i <= N:\n        if N % i == 0:\n            if check(N, i):\n                r.add(i)\n            if check(N, N // i):\n                r.add(N // i)\n        elif N % i == 1:\n            r.add(i)\n            if check(N, N // i):\n                r.add(N // i)\n        i += 1\n    if N > 2:\n        r.add(N - 1)\n    r.add(N)\n    return len(r)\n\nprint((main()))\n", "N = int(input().split()[0])\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    # divisors.sort()\n    return divisors\n\nNod = make_divisors(N-1)\ndivs = make_divisors(N)\n\nfor d in divs:\n    c = N\n    while True:\n        if d == 1:\n            break\n        if c%d == 1:\n            Nod.append(d)\n            break\n        elif c%d == 0:\n            c = c//d;\n            continue\n        else:\n            break\n\nprint(len(Nod)-1)", "init=int(input())\n\nans=[]\nfor K in range(2,int(init**0.5)+1):\n    N=init\n    while N%K==0:\n        N/=K\n    if N-(N//K)*K==1:\n        ans.append(K)\n        \ntgt=init-1\ncand=[]\nfor i in range(1,int(init**0.5)+1):\n    if tgt%i==0:\n        cand.append(i)\n        if i!=tgt//i:\n            cand.append(tgt//i)\nans=list(set(ans+cand))\nprint((len(ans)))\n\n", "N = int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    return divisors\n\na = make_divisors(N)\nb = make_divisors(N-1)\ncnt = 0\nfor i in a:\n    if i == 1:\n        continue\n    k = N\n    while k % i == 0:\n        k //= i\n    if k % i == 1:\n        cnt += 1\nans = len(b) - 1 + cnt\nprint(ans)", "n = int(input())\n\n# n % k = 1 \u306e\u6570\nm = n - 1\ni = 2\nans = 1\nwhile i * i <= m:\n    if m % i == 0:\n        num = 1\n        while m % i == 0:\n            num += 1\n            m //= i\n        ans *= num\n    i = i + 1\nif m != 1:\n    ans *= 2\nans -= 1\n\n# n % k = 0 \u306e\u5834\u5408\n# n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\nm = n\nimport numpy as np\ni = 2\nfactor = []\nwhile i * i <= n:\n    if n % i == 0:\n        l = []\n        num = 1\n        l.append(num)\n        while n % i == 0:\n            num *= i\n            l.append(num)\n            n //= i\n        factor.append(np.array(l))\n    i = i + 1\nif n > 1:\n    factor.append(np.array([1, n]))\n\n# \u76f4\u7a4d\u3092\u6c42\u3081\u308b\u3053\u3068\u3067n\u306e\u5168\u7d04\u6570\u3092\u5f97\u308b\ndivisor = factor[-1]\nfor i in range(len(factor) - 1):\n    divisor = np.outer(divisor, factor[i])\ndivisor = np.outer(np.array(1), divisor)\n\n# \u5224\u5b9a\nfor i in divisor[0]:\n    if i == 1:\n        continue\n    n = m\n    while n % i == 0:\n        n //= i\n    if n % i == 1:\n        ans += 1\n\nprint(ans)", "def make_divisors(n):\n    lower_divisors, upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\n\nn = int(input())\n\ntmp = n - 1\nret = len(make_divisors(tmp)) - 1\n\ntmplen = make_divisors(n)\n\nfor item in tmplen:\n    if item == 1:\n        continue\n    val = n\n    while True:\n        if val % item == 0:\n            val = val // item\n        else:\n            if val % item == 1:\n                ret += 1\n            break\n\nprint(ret)\n", "import numpy as np\n\ndef divisors(N):\n    return sorted(sum((list({n, N // n}) for n in range(1, int(N ** 0.5) + 1) if not N % n), []))\n\ndef prime_factorize_dict(n):\n    d = dict()\n    while not n & 1:\n        d[2] = d.get(2, 0) + 1\n        n >>= 1\n    f = 3\n    while f * f <= n:\n        if not n % f:\n            d[f] = d.get(f, 0) + 1\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        d[n] = d.get(n, 0) + 1\n    return d\n\nN = int(input())\ncount = 0\nfor n in divisors(N)[1:]:\n    M = N\n    while not M % n:\n        M //= n\n    count += M % n == 1\nfact_Nm1 = np.array(list(prime_factorize_dict(N - 1).values()), dtype=np.int32)\nprint(count + np.prod(fact_Nm1 + 1) - 1)", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    def make_divisors(n):\n        divisors = []\n        for i in range(1, int(pow(n, 0.5)) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n\n        return divisors\n    \n    N = int(input())\n\n    div_1 = make_divisors(N)\n    res = 0\n    for k in div_1:\n        if k == 1:\n            continue\n        n = N\n        while n > 1:\n            if n % k == 0:\n                n //= k\n            else:\n                if n >= k:\n                    n %= k\n                else:\n                    n -= k\n        if n == 1:\n            res += 1\n\n    div_2 = make_divisors(N - 1)\n    res += len(div_2) - 1\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()"]