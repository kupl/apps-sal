["lanes = []\n\nfor i in range(4):\n    lanes.append(list(map(int, input().split())))\n\nlanes.extend(lanes)\n\nfor i in range(4):\n    ln = lanes[i]\n    if (ln[3] and (ln[0] or ln[1] or ln[2])) or \\\n            (ln[0] and lanes[i + 3][3]) or \\\n            (ln[1] and lanes[i + 2][3]) or \\\n            (ln[2] and lanes[i + 1][3]):\n        print('YES')\n        break\nelse:\n    print('NO')", "L = [0, 4, 1, 2, 3]\nR = [0, 2, 3, 4, 1]\nS = [0, 3, 4, 1, 2]\n\nH = [0, 0, 0, 0, 0]\nP = H[:]\nfor i in range(1, 5):\n    l, s, r, p = list(map(int, input().split()))\n    P[i] = p\n    if 1 in [l, s, r]:\n        H[i] = 1\n    if l:\n        H[L[i]] = 1\n    if s:\n        H[S[i]] = 1\n    if r:\n        H[R[i]] = 1\nans = \"NO\"\nfor i in range(1, 5):\n    if P[i] and H[i]:\n        ans = \"YES\"\nprint(ans)\n\n", "def booly(s):\n    return bool(int(s))\n\na = [None]*4;\na[0] = list(map(booly, input().split()))\na[1] = list(map(booly, input().split()))\na[2] = list(map(booly, input().split()))\na[3] =list( map(booly, input().split()))\n\nacc = False\n\nfor i in range(4):\n    if (a[i][3] and (a[i][0] or a[i][1] or a[i][2])):\n        acc = True\n\n    if (a[i][3] and a[(i+1)%4][0]):\n        acc = True\n        \n    if (a[i][3] and a[(i-1)%4][2]):\n        acc = True\n\n    if (a[i][3] and a[(i+2)%4][1]):\n        acc = True\n\nif acc:\n    print(\"YES\");\nelse:\n    print(\"NO\");\n", "p = [list(map(int, input().split())) for i in range(4)]\nlog = False\nfor i in range(4):\n    if p[i][3] == 1 and (p[i - 1][2] + p[(i + 1) % 4][0] + p[(i + 2) % 4][1] + p[i][1] + p[i][0] + p[i][2] > 0):\n        log = True\nif log:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n", "a, b, c, d = [], [], [], []\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nd = list(map(int, input().split()))\nst = False\nif a[3] == 1:\n    if 1 in a[:3] or b[0] or c[1] or d[2]:\n        st = True\nif b[3] == 1:\n    if 1 in b[:3] or a[2] or c[0] or d[1]:\n        st = True\nif c[3] == 1:\n    if 1 in c[:3] or a[1] or b[2] or d[0]:\n        st = True\nif d[3] == 1:\n    if 1 in d[:3] or a[0] or b[1] or c[2]:\n        st = True\nprint('YES' if st else 'NO')\n", "arr = [list() for i in range(4)]\narrp = []\nfor i in range(4):\n    l, s, r, p = [int(i) for i in input().split()]\n    arr[i].extend([l, s, r])\n    arr[[3, i - 1][i > 0]].append(l)\n    arr[[0, i + 1][i < 3]].append(r)\n    arr[(i + 2) % 4].append(s)\n    arrp.append(p)\nfor i in range(4):\n    if arrp[i]:\n        if 1 in arr[i]:\n            print('YES')\n            break\nelse:\n    print('NO')\n", "l = []\nfor i in range(4):\n    l.append(list(map(int, input().split())))\n\ndef go():\n    for i in range(4):\n        if l[i][3] and (l[(i + 1) % 4][0] or l[(i + 3) % 4][2] or l[(i + 2) % 4][1] or l[i][0] or l[i][1] or l[i][2]):\n            return False\n    return True\n\nif go():\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "import sys\n\ninput = sys.stdin.readline\n\nroads = []\n\nfor i in range(4):\n    roads.append([int(x) for x in input().split()])\n\nclock = {}\ncclock = {}\nopp = {}\n\nclock[0] = 1\nclock[1] = 2\nclock[2] = 3\nclock[3] = 0\n\ncclock[1] = 0\ncclock[2] = 1\ncclock[3] = 2\ncclock[0] = 3\n\nopp[0] = 2\nopp[1] = 3\nopp[2] = 0\nopp[3] = 1\n\nfor i in range(4):\n    road = roads[i]\n    if road[3] == 1:\n        if road[0] == 1 or road[1] == 1 or road[2] == 1:\n            print(\"YES\")\n            break\n        left = roads[cclock[i]]\n        right = roads[clock[i]]\n        straight = roads[opp[i]]\n        if left[2] == 1 or right[0] == 1 or straight[1] == 1:\n            print(\"YES\")\n            break\nelse:\n    print(\"NO\")", "def main():\n    l1, s1, r1, p1 = map(int, input().split())\n    l2, s2, r2, p2 = map(int, input().split())\n    l3, s3, r3, p3 = map(int, input().split())\n    l4, s4, r4, p4 = map(int, input().split())\n    if p1 == 1:\n        if s1 == 1 or l1 == 1 or r1 == 1 or s3 == 1 or l2 == 1 or r4 == 1:\n            return \"YES\"\n    if p2 == 1:\n        if s2 == 1 or l2 == 1 or r2 == 1 or s4 == 1 or l3 == 1 or r1 == 1:\n            return \"YES\"\n    if p3 == 1:\n        if s3 == 1 or l3 == 1 or r3 == 1 or s1 == 1 or l4 == 1 or r2 == 1:\n            return \"YES\"\n    if p4 == 1:\n        if s4 == 1 or l4 == 1 or r4 == 1 or s2 == 1 or l1 == 1 or r3 == 1:\n            return \"YES\"\n    return \"NO\"\nprint(main())", "L = [list(map(int, input().split())) for _ in range(4)]\nfor i in range(4):\n    p = L[i][3]\n    if p == 1:\n        if i == 0:\n            if L[0][0] == 1 or L[0][1] == 1 or L[0][2] == 1 or L[1][0] == 1 or L[2][1] == 1 or L[3][2] == 1:\n                print(\"YES\")\n                return\n        elif i == 1:\n            if L[0][2] == 1 or L[1][0] == 1 or L[1][1] == 1 or L[1][2] == 1 or L[2][0] == 1 or L[3][1] == 1:\n                print(\"YES\")\n                return\n        elif i == 2:\n            if L[0][1] == 1 or L[1][2] == 1 or L[2][0] == 1 or L[2][1] == 1 or L[2][2] == 1 or L[3][0] == 1:\n                print(\"YES\")\n                return\n        else:\n            if L[0][0] == 1 or L[1][1] == 1 or L[2][2] == 1 or L[3][0] == 1 or L[3][1] == 1 or L[3][2] == 1:\n                print(\"YES\")\n                return\nprint(\"NO\")\n", "def main():\n    a = []\n    for i in range(4):\n        a.append(tuple(map(int, input().split())))\n\n    car = [0] * 4\n\n    for i, (l, s, r, p) in enumerate(a):\n\n        car[i] += l\n        car[(i - 1) % 4] += l\n\n        car[i] += r\n        car[(i + 1) % 4] += r\n\n        car[i] += s\n        car[(i + 2) % 4] += s\n\n    for i in range(4):\n        if car[i] > 0 and a[i][3] == 1:\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a = [[int(i) for i in input().split()] for j in range(4)]\n\npesh = [0] * 4\navt = [0] * 4\n\nfor i in range(len(a)):\n    if a[i][3]:\n        pesh[i] = True\n    if a[i][0]:\n        avt[(i - 1) % 4] = True\n        avt[i] = True\n    if a[i][1]:\n        avt[(i + 2) % 4] = True\n        avt[i] = True\n    if a[i][2]:\n        avt[(i + 1) % 4] = True\n        avt[i] = True\n\nfor i in range(4):\n    if avt[i] and pesh[i]:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n", "#!/usr/bin/env python3\nimport sys\n\nls = []\nss = []\nrs = []\nps = []\n\nfor __ in range(4):\n    l, s, r, p = [int(elem) == 1 for elem in sys.stdin.readline().split()]\n    ls.append(l)\n    ss.append(s)\n    rs.append(r)\n    ps.append(p)\n\ndef get(ary, indx):\n    return ary[indx % 4]\n\naccident = False\n\nfor indx in range(4):\n    accident |= (ls[indx] or rs[indx] or ss[indx]) and ps[indx]\n    accident |= ls[indx] and get(ps, indx - 1)\n    accident |= ss[indx] and get(ps, indx + 2)\n    accident |= rs[indx] and get(ps, indx + 1)\n\nif accident:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "L, S, R, P = 0, 1, 2, 3\ntr = []\n\nfor i in range(4):\n\ttr.append([int(x) for x in input().split()])\n\nacc = False\n\nfor i in range(4):\n\t# check l \n\tif tr[i][L] == 1 and (tr[i][P] == 1 or tr[(i+3)%4][P] == 1):\n\t\tacc = True\n\t\tbreak\n\tif tr[i][S] == 1 and (tr[i][P] == 1 or tr[(i+2)%4][P] == 1):\n\t\tacc = True\n\t\tbreak\n\tif tr[i][R] == 1 and (tr[i][P] == 1 or tr[(i+1)%4][P] == 1):\n\t\tacc = True\n\t\tbreak\n\nif acc: print(\"YES\")\nelse: print(\"NO\")", "# 500\n\nS=[]\nfor i in range(0,4):\n    S.append([bool(int(x)) for x in input().split()])\ndef check():\n    for i in range (0,4):\n        for x in range(0,3):\n            if S[i][x] and (S[(i+abs(x-3))%4][3] or S[i][3]):\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\ncheck()\n", "l,s,r,p = list(map(int,input().split()))\nl2,s2,r2,p2 = list(map(int,input().split()))\nl3,s3,r3,p3 = list(map(int,input().split()))\nl4,s4,r4,p4 = list(map(int,input().split()))\nif (l + s + r > 0 and p == 1) or (l2 + s2 + r2 > 0 and p2 == 1) or (l3 + s3 + r3 > 0 and p3 == 1) or (l4 + s4 + r4 > 0 and p4 == 1):\n    print(\"YES\")\nelse:\n    if(l2 + s3 + r4 > 0 and p == 1) or (l3 + s4 + r > 0 and p2 == 1) or (l4 + s + r2 > 0 and p3 == 1) or (l + s2 + r3 > 0 and p4 == 1):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "l = [0] * 4\ns = [0] * 4\nr = [0] * 4\np = [0] * 4\nfor i in range(4):\n    l[i], s[i], r[i], p[i] = map(int ,input().split())\nerror = 0\nfor i in range(4):\n    if (l[i] + s[i] + r[i] > 0) and (p[i] == 1):\n        error += 1\nfor i in range(4):\n    j = 0\n    if p[j] == 1:\n        if (r[j + 3] == 0) and (s[j + 2] == 0) and (l[j + 1] == 0):\n            error += 0\n        else:\n            error += 1\n    l.append(l[j])\n    l.pop(0)\n    s.append(s[j])\n    s.pop(0)\n    r.append(r[j])\n    r.pop(0)\n    p.append(p[j])\n    p.pop(0)\nif error > 0:\n    print('YES')\nelse:\n    print('NO')", "S = []\nres = \"NO\"\nfor i in range(4):\n    S.append(list(map(int, input().split())))\nfor i in range(4):\n    p = sum(S[i]) - S[i][3] + S[(i + 1) % 4][0] + S[(i + 2) % 4][1] + S[(i + 3) % 4][2]\n    if p > 0 and S[i][3] == 1:\n        res = \"YES\"\n        break\nprint(res)", "#A\n\na=input().split()\nb=input().split()\nc=input().split()\nd=input().split()\n\nlights=[a, b, c, d]\n\nfor i in range(0, 4):\n    if int(lights[i][3])==1:\n        if int(lights[i][0])==1 or int(lights[i][1])==1 or int(lights[i][2])==1:\n            print(\"YES\")\n            break\n        if i==0:\n            if int(lights[1][0])==1 or int(lights[2][1])==1 or int(lights[3][2])==1:\n                print(\"YES\")\n                break\n        if i==1:\n            if int(lights[2][0])==1 or int(lights[3][1])==1 or int(lights[0][2])==1:\n                print(\"YES\")\n                break\n        if i==2:\n            if int(lights[3][0])==1 or int(lights[0][1])==1 or int(lights[1][2])==1:\n                print(\"YES\")\n                break\n        if i==3:\n            if int(lights[0][0])==1 or int(lights[1][1])==1 or int(lights[2][2])==1:\n                print(\"YES\")\n                break\n    if i==3:\n        print(\"NO\")\n", "actual_vals = [0 for x in range(4)]\nrequired_vals = [1 for x in range(4)]\nl1,s1,r1,p1 = list(map(int,input().split()))\nif(l1==1):\n\trequired_vals[3] = 0\nif(s1==1):\n\trequired_vals[2] = 0\nif(r1==1):\n\trequired_vals[1] = 0\nif(l1==1 or r1==1 or s1==1):\n\trequired_vals[0] = 0\nactual_vals[0] = p1\n\nl2,s2,r2,p2 = list(map(int,input().split()))\nif(l2==1):\n\trequired_vals[0] = 0\nif(s2==1):\n\trequired_vals[3] = 0\nif(r2==1):\n\trequired_vals[2] = 0\nif(l2==1 or r2==1 or s2==1):\n\trequired_vals[1] = 0\nactual_vals[1] = p2\n\nl3,s3,r3,p3 = list(map(int,input().split()))\nif(l3==1):\n\trequired_vals[1] = 0\nif(s3==1):\n\trequired_vals[0] = 0\nif(r3==1):\n\trequired_vals[3] = 0\nif(l3==1 or r3==1 or s3==1):\n\trequired_vals[2] = 0\nactual_vals[2] = p3\n\nl4,s4,r4,p4 = list(map(int,input().split()))\nif(l4==1):\n\trequired_vals[2] = 0\nif(s4==1):\n\trequired_vals[1] = 0\nif(r4==1):\n\trequired_vals[0] = 0\nif(l4==1 or r4==1 or s4==1):\n\trequired_vals[3] = 0\nactual_vals[3] = p4\n\nfor i in range(4):\n\tif(required_vals[i]==0 and actual_vals[i]==1):\n\t\tprint('YES')\n\t\treturn\nprint('NO')\n", "a=[]\nfor i in range(4):\n    a.append([int(i) for i in input().split()])\nfor i in range(4):\n    if a[i][3]==1:\n        if any([a[i][0],a[i][1],a[i][2],a[(i+1)%4][0],a[(i+2)%4][1],a[(i+3)%4][2]]):\n            print(\"YES\")\n            break\nelse:\n    print(\"NO\")\n", "l1, s1, r1, p1 = list(map(int, input().split()))\nl2, s2, r2, p2 = list(map(int, input().split()))\nl3, s3, r3, p3 = list(map(int, input().split()))\nl4, s4, r4, p4 = list(map(int, input().split()))\n\nif (p1 and (r1 or s1 or l1 or r4 or l2 or s3)) or (p2 and (r2 or s2 or l2 or l3 or r1 or s4)) or \\\n   (p3 and (r3 or s3 or l3 or l4 or r2 or s1)) or\\\n   (p4 and (r4 or s4 or l4 or l1 or r3 or s2)):\n    print('YES')\nelse:\n    print('NO')\n", "list2=[]\nfor i in range(4):\n    list1=list(map(int,input().strip().split(' ')))\n    list2.append(list1)\nif list2[0][3]==1:\n    if list2[1][0]==1 or list2[2][1]==1 or list2[3][2]==1 or list2[0][1]==1 or list2[0][2]==1 or list2[0][0]==1:\n        print(\"YES\")\n        return\nif list2[1][3]==1:\n    if list2[0][2]==1 or list2[2][0]==1 or list2[3][1]==1 or list2[1][1]==1 or list2[1][2]==1 or list2[1][0]==1:\n        print(\"YES\")\n        return\nif list2[2][3]==1:\n    if list2[0][1]==1 or list2[1][2]==1 or list2[3][0]==1 or list2[2][1]==1 or list2[2][2]==1 or list2[2][0]==1:\n        print(\"YES\")\n        return\nif list2[3][3]==1:\n    if list2[0][0]==1 or list2[1][1]==1 or list2[2][2]==1 or list2[3][1]==1 or list2[3][2]==1 or list2[3][0]==1:\n        print(\"YES\")\n        return\nprint(\"NO\")", "# left, strait, right, pedastrian\n#   3\n#4     2\n#   1\ndef check_if_safe(curr_part, left_part, right_part, opposite_part):\n    curr_left, curr_straight, curr_right, curr_pedastrian = curr_part\n    if curr_pedastrian == 0:\n        return True\n    elif (curr_left + curr_right + curr_straight) > 0:\n        return False\n    left_left, left_straight, left_right, left_pedastrian = left_part\n    if left_right == 1:\n        return False\n    right_left, right_straight, right_right, right_pedastrian = right_part\n    if right_left == 1:\n        return False\n    opposite_left, opposite_straight, opposite_right, opposite_pedastrian = opposite_part\n    if opposite_straight == 1:\n        return False\n    return True\n\n\npart_one = [int(x) for x in input().split()]\npart_two = [int(x) for x in input().split()]\npart_three = [int(x) for x in input().split()]\npart_four = [int(x) for x in input().split()]\n\nans = ( check_if_safe(part_one, part_four, part_two, part_three)\n      + check_if_safe(part_two, part_one, part_three, part_four)\n      + check_if_safe(part_three, part_two, part_four, part_one)\n      + check_if_safe(part_four, part_three, part_one, part_two)\n      )\nif ans != 4:\n    print('YES')\nelse:\n    print('NO')\n"]