["def get_bounds(points):\n    if len(points) == 1:\n        return points[:]\n    points.sort()\n    bounds = [points[0], points[1]]\n    for xi, yi in points[2:]:\n        while len(bounds) > 1 and not is_convex(bounds, xi, yi):\n            del bounds[-1]\n        bounds.append((xi, yi))\n    return bounds\n\n\ndef is_convex(bounds, x2, y2):\n    x1, y1 = bounds[-1]\n    x0, y0 = bounds[-2]\n    return (x1 - x0) * (y2 - y1) < (y1 - y0) * (x2 - x1)\n\n\n\ndef read_data():\n    n, p, q = map(int, input().split())\n    ABs = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        ABs.append((a, b))\n    return n, p, q, ABs\n\ndef solve(n, p, q, ABs):\n    '''\n    min sum(ds)\n    s.t. sum(ds[i] * As[i]) >= p and sum(ds[i] * Bs[i]) >= q\n    '''\n    bounds = get_bounds(ABs)\n    a0, b0 = bounds[0]\n    if len(bounds) == 1:\n        return max(p/a0, q/b0)\n    record = float('Inf')\n    for a1, b1 in bounds[1:]:\n        steps = min(max(p/a0, q/b0), max(p/a1, q/b1))\n        den = a0 * b1 - b0 * a1\n        if den != 0:\n            r0 = (b1 * p - a1 * q)/den\n            r1 = - (b0 * p - a0 * q)/den\n            if r0 > 0 and r1 > 0:\n                steps = min(steps, r0 + r1)\n        a0 = a1\n        b0 = b1\n        record = min(record, steps)\n    return record\n\nn, p, q, ABs = read_data()\nprint(solve(n, p, q, ABs))", "def get_bounds(points):\n\n    if len(points) == 1:\n\n        return points[:]\n\n    points.sort()\n\n    bounds = [points[0], points[1]]\n\n    for xi, yi in points[2:]:\n\n        while len(bounds) > 1 and not is_convex(bounds, xi, yi):\n\n            del bounds[-1]\n\n        bounds.append((xi, yi))\n\n    return bounds\n\n\n\n\n\ndef is_convex(bounds, x2, y2):\n\n    x1, y1 = bounds[-1]\n\n    x0, y0 = bounds[-2]\n\n    return (x1 - x0) * (y2 - y1) < (y1 - y0) * (x2 - x1)\n\n\n\n\n\n\n\ndef read_data():\n\n    n, p, q = list(map(int, input().split()))\n\n    ABs = []\n\n    for i in range(n):\n\n        a, b = list(map(int, input().split()))\n\n        ABs.append((a, b))\n\n    return n, p, q, ABs\n\n\n\ndef solve(n, p, q, ABs):\n\n    '''\n\n    min sum(ds)\n\n    s.t. sum(ds[i] * As[i]) >= p and sum(ds[i] * Bs[i]) >= q\n\n    '''\n\n    bounds = get_bounds(ABs)\n\n    a0, b0 = bounds[0]\n\n    if len(bounds) == 1:\n\n        return max(p/a0, q/b0)\n\n    record = float('Inf')\n\n    for a1, b1 in bounds[1:]:\n\n        steps = min(max(p/a0, q/b0), max(p/a1, q/b1))\n\n        den = a0 * b1 - b0 * a1\n\n        if den != 0:\n\n            r0 = (b1 * p - a1 * q)/den\n\n            r1 = - (b0 * p - a0 * q)/den\n\n            if r0 > 0 and r1 > 0:\n\n                steps = min(steps, r0 + r1)\n\n        a0 = a1\n\n        b0 = b1\n\n        record = min(record, steps)\n\n    return record\n\n\n\nn, p, q, ABs = read_data()\n\nprint(solve(n, p, q, ABs))\n\n\n\n# Made By Mostafa_Khaled\n"]