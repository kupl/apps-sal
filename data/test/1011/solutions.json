["\"\"\"\nCodeforces Contest 281 Div 2 Problem C\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef main():\n    n, = read()\n    a = read()\n    res = [(i,0) for i in a]\n    m, = read()\n    b = read()\n    res.extend((i,1) for i in b)\n    res.sort()\n    mxa = 3*n\n    mnb = 3*m\n    cra = 3*n\n    crb = 3*m\n    for _,i in res:\n        if i:\n            crb -= 1\n            if cra-crb > mxa-mnb:\n                mxa = cra\n                mnb = crb\n        else:\n            cra -= 1\n    print(str(mxa) + \":\" + str(mnb))\n\n################################### NON-SOLUTION STUFF BELOW\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "__author__ = 'PrimuS'\n\nfrom bisect import bisect_left\n\nn = int(input())\nt1 = [int(x) for x in input().split()]\nm = int(input())\nt2 = [int(x) for x in input().split()]\n\nt1.sort()\nt2.sort()\n\nbest = [3 * n, 3 * m]\n\nfor i in range(n):\n    a = 2 * i + 3 * (n - i)\n    u = bisect_left(t2, t1[i])\n    b = u * 2 + 3 * (m - u)\n    if a - b > best[0] - best[1]:\n        best[0] = a\n        best[1] = b\n\n\nif 2 * n - 2 * m > best[0] - best[1]:\n    best = [2 * n, 2 * m]\n\nprint(best[0], \":\", best[1], sep='')\n", "n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nb = list(map(int, input().split()))\n\na = sorted(a)\nb = sorted(b)\n\nimport bisect\n\nmx = -5555555555555\naa = -5555555555555555\nbb = -5555555555555555\n\ncands = list(a + b)\ncands.append(0)\ncands.append(3000000009)\n\nfor v in cands:\n    q1 = len(a) - bisect.bisect_left(a, v)\n    q2 = len(b) - bisect.bisect_left(b, v)\n    c1 = q1 * 3 + 2 * (len(a) - q1)\n    c2 = q2 * 3 + 2 * (len(b) - q2)\n    if (c1 - c2 > mx) or (c1 - c2 == mx and c1 > aa):\n        mx = c1 - c2\n        aa = c1\n        bb = c2\n\nprint(str(aa)+':'+str(bb))\n\n        \n\n        \n", "\n\nn = int(input())\na = [int(s) for s in input().split()]\nm = int(input())\nb = [int(s) for s in input().split()]\n\nINF = 3000000000\na.sort()\nb.sort()\n\na.append(INF)\nb.append(INF)\ni = 0\nj = 0\n\nbestd = 0\nbestadv = (n-m)*3\nbesta = 3*n\nbestb = 3*m\ncura = 3*n\ncurb = 3*m\nwhile i<n or j<m:\n    d = min(a[i],b[j])\n    while i<n and a[i]<=d:\n        cura-=1\n        i+=1\n    while j<m and b[j]<=d:\n        curb-=1\n        j+=1\n    \n    if cura - curb>bestadv:\n        bestadv = cura-curb\n        besta = cura\n        bestb = curb\n##    print(d,i,j,cura,curb,bestadv)\n\nprint('{0}:{1}'.format(besta,bestb))\n\n    \n        \n        \n\n", "n, a = int(input()), list(map(int, input().split()))\nm, b = int(input()), list(map(int, input().split()))\n\na.sort()\nb.sort()\n\nA, B = len(a) * 3, len(b) * 3\ni = j = 0\ntA, tB = A, B\n\nwhile (i < len(a) and j < len(b)):\n        d = min(a[i], b[j])\n        while (i < len(a) and a[i] == d):\n            i += 1\n            tA -= 1\n        while (j < len(b) and b[j] == d):\n            j += 1\n            tB -= 1\n        if (tA - tB > A - B):\n            A, B = tA, tB\n\nif (j < len(b)):\n    tB = len(b) * 2\n    if (tA - tB > A - B):\n        A, B = tA, tB\n\nprint(A, ':', B, sep = '')\n\n    \n", "def read_pack():\n\n    c = int(input())\n    x = list(map(int, str.split(input())))\n    x.sort()\n    return c, x + [0]\n\nn, a = read_pack()\nm, b = read_pack()\n\ni = j = 0\npa = pb = None\nwhile i <= n and j <= m:\n\n    ca = (n - i) * 3 + i * 2\n    cb = (m - j) * 3 + j * 2\n\n    if pa is None or (ca - cb > pa - pb) or (ca - cb == pa - pb and ca > pa):\n\n        pa, pb = ca, cb\n\n    if j == m:\n\n        i += 1\n\n    elif i == n:\n\n        j += 1\n\n    elif a[i] < b[j]:\n\n        i += 1\n\n    elif a[i] > b[j]:\n\n        j += 1\n\n    else:\n\n        i += 1\n        j += 1\n\nprint(str.format(\"{}:{}\", pa, pb))\n", "n = int(input())\nscore = list(map(lambda x: [int(x), 0], input().split()))\nm = int(input())    \nscore += list(map(lambda x: [int(x), 1], input().split()))\nscore.sort()\nf = []\nif score[0][1] == 0:\n    f.append([1, 0])\nelse:\n    f.append([0, 1])\nfor i in range(1, n + m):\n    if score[i][1] == 0:\n        f.append([f[i-1][0] + 1, f[i-1][1]])\n    else:\n        f.append([f[i-1][0], f[i-1][1] + 1])\n\na, b = f[-1][0] * 2, f[-1][1] * 2\naa, bb = f[-1][0] * 3, f[-1][1] * 3\nif (aa - bb) > (a - b) or (aa - bb == a - b and aa > a):\n    a, b = aa, bb\nfor i in range(n + m - 1):\n    if score[i][0] != score[i+1][0]:\n        aa = f[i][0] * 2 + (f[-1][0] - f[i][0]) * 3\n        bb = f[i][1] * 2 + (f[-1][1] - f[i][1]) * 3\n        if (aa - bb) > (a - b) or (aa - bb == a - b and aa > a):\n            a, b = aa, bb\nprint(a, ':', b, sep='')            \n", "from itertools import chain\nfrom bisect import bisect_left as bisect\n\n\ndef main():\n    n = int(input().strip())\n    aa = list(map(int, input().strip().split()))\n    aa.sort()\n    m = int(input().strip())\n    bb = list(map(int, input().strip().split()))\n    bb.sort()\n    res = []\n    dd = set(chain(aa, bb))\n    for d in chain(aa, bb):\n        dd.add(d + 1)\n    la = len(aa) * 3\n    lb = len(bb) * 3\n    for d in dd:\n        a = la - bisect(aa, d)\n        b = lb - bisect(bb, d)\n        res.append((a - b, a))\n    b, a = max(res)\n    print('{:n}:{:n}'.format(a, a - b))\n\n\nmain()", "n,_a=int(input()),list(map(int,input().split()))\nm,_b=int(input()),list(map(int,input().split()))\np=[(ai,0) for ai in _a] + [(bi,1) for bi in _b]\np.sort()\ni=0\nR=[len(_a)*3,len(_b)*3]\nr=list(R)\nwhile i<len(p):\n  d = p[i][0]\n  while i<len(p) and p[i][0]==d:\n    r[p[i][1]] -= 1\n    i += 1\n  if (r[0]-r[1] > R[0]-R[1]):\n    R=list(r)\nprint(*R,sep=':')\n", "n1=int(input())\nd1=list([int(x) for x in input().split(' ')])\n\nn2=int(input())\nd2=list([int(x) for x in input().split(' ')])\n\n\ndl=list(set([0]+d1+d2))\ndl.sort()\n\ndd=dict()\nfor i in range(0,len(dl)):\n    dd[dl[i]]=i\n\nc1=[0 for i in range(0,len(dl))]\nc2=[0 for i in range(0,len(dl))]\n\ns1=[0 for i in range(0,len(dl))]\ns2=[0 for i in range(0,len(dl))]\n\nfor d in d1:\n    c1[dd[d]]+=1\n\nfor d in d2:\n    c2[dd[d]]+=1\n\nfor i in range(len(dl)-2,-1,-1):\n    s1[i]=s1[i+1]+c1[i+1]\n    s2[i]=s2[i+1]+c2[i+1]\n\nmaxsub=s1[0]-s2[0]\nmaxi=0\nmaxa=s1[0]\nfor i in range(0,len(dl)):\n    sub=s1[i]-s2[i]\n    if sub>maxsub or (sub==maxsub and s1[i]>maxa):\n        maxsub=sub\n        maxa=s1[i]\n        maxi=i\n\nprint(str(n1*2+s1[maxi])+':'+str(n2*2+s2[maxi]))\n\n", "__author__ = 'zhan'\n\nfirst = []\nsecond = []\n\nn = int(input())\nline = input().split()\nfor i in range(n):\n    first.append(int(line[i]))\nfirst.sort()\n\nm = int(input())\nline = input().split()\nfor i in range(m):\n    second.append(int(line[i]))\nsecond.sort()\n\n\na = 3 * n\nb = 3 * m\nd = a - b\npenalty = [0, 0]\ni = 0\nj = 0\n\nwhile i < n and j < m:\n    t = min(first[i], second[j])\n    while i < n and first[i] <= t:\n        i += 1\n        penalty[0] += 1\n    while j < m and second[j] <= t:\n        j += 1\n        penalty[1] += 1\n    if 3*n - penalty[0] - 3*m + penalty[1] > d:\n        a = 3 * n - penalty[0]\n        b = 3 * m - penalty[1]\n        d = 3*n - penalty[0] - 3*m + penalty[1]\n\nif 2 * n - 2 * m > d:\n    a = 2 * n\n    b = 2 * m\n\nprint(str(a)+\":\"+str(b))\n\n", "__author__ = 'zhan'\n\nn = int(input())\nfirst = sorted([int(i) for i in input().split()])\n\nm = int(input())\nsecond = sorted([int(i) for i in input().split()])\n\na = pa = 3 * n\nb = pb = 3 * m\nd = a - b\n\ni = 0\nj = 0\n\nwhile i < n and j < m:\n    t = min(first[i], second[j])\n    while i < n and first[i] <= t:\n        i += 1\n        pa -= 1\n    while j < m and second[j] <= t:\n        j += 1\n        pb -= 1\n    if pa - pb > d:\n        a = pa\n        b = pb\n        d = pa - pb\n\nif 2 * n - 2 * m > d:\n    a = 2 * n\n    b = 2 * m\n\nprint(str(a)+\":\"+str(b))\n\n", "from collections import defaultdict\n#import numpy as np\n\ndef main2(n,a,m,b):\n    mx = -999\n    a.sort()\n    b.sort()\n    ar = a.copy()\n    ar.reverse()\n    br = b.copy()\n    br.reverse()\n    a2 = 0  # last b 2p\n    b2 = 0  # last a 2p\n    a3 = n\n    b3 = m\n    #for d in set([0]+a+b):\n    for d in sorted(list(set([0]+a+b))):\n        #s1 = n*2 + sum([i>d for i in a])\n        #s2 = m*2 + sum([i>d for i in b])\n        #if a.count(d+1) > 0: a2 = a.index(d+1)\n        #if b.count(d+1) > 0: b2 = b.index(d+1)\n        #s1 = a2 * 2 + (n-a2)*3\n        #s2 = b2 * 2 + (m-b2)*3\n        if ar.count(d) > 0: a3 = ar.index(d)\n        if br.count(d) > 0: b3 = br.index(d)\n        s1 = (n-a3) * 2 + a3*3\n        s2 = (m-b3) * 2 + b3*3\n        #print(d,s1,s2, a3, b3)\n        if s1-s2 > mx:\n            mx = s1-s2\n            res = \"{}:{}\".format(s1,s2)\n    print(res)\ndef main(n,a,m,b):\n    mx = -99999999999\n    a.sort()\n    b.sort()\n    a2 = 0  # last b 2p\n    b2 = 0  # last a 2p\n    #ar = a.copy()\n    #ar.reverse()\n    #br = b.copy()\n    #br.reverse()\n    #a3 = n\n    #b3 = m\n    #for d in set([0]+a+b):\n    for d in sorted(list(set([0]+a+b))):\n        #s1 = n*2 + sum([i>d for i in a])\n        #s2 = m*2 + sum([i>d for i in b])\n        #if a.count(d+1) > 0: a2 = a.index(d+1)\n        #if b.count(d+1) > 0: b2 = b.index(d+1)\n        #s1 = a2 * 2 + (n-a2)*3\n        #s2 = b2 * 2 + (m-b2)*3\n        #if ar.count(d) > 0: a3 = ar.index(d)\n        #if br.count(d) > 0: b3 = br.index(d)\n        #s1 = (n-a3) * 2 + a3*3\n        #s2 = (m-b3) * 2 + b3*3\n        for a2 in range(a2,n+1):\n            if a2==n or a[a2] > d: break\n        for b2 in range(b2,m+1):\n            if b2==m or b[b2] > d: break\n        s1 = a2 * 2 + (n-a2)*3\n        s2 = b2 * 2 + (m-b2)*3\n#        print(d,s1,s2, a2, b2)\n        if s1-s2 > mx:\n            mx = s1-s2\n            res = \"{}:{}\".format(s1,s2)\n    print(res)\n\n\ndef main_input():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    m = int(input())\n    b = [int(i) for i in input().split()]\n\n    main(n,a,m,b)\n\ndef __starting_point():\n    main_input()\n\n__starting_point()", "n = int(input())\nline = input().split()\na = []\nfor d in line:\n    a.append(int(d))\na.sort()\n\nm = int(input())\nline = input().split()\nb = []\nfor d in line:\n    b.append(int(d))\nb.sort()\n\narr = [[0, 0, 0]]\ni = 0\nj = 0\nk = 1\nwhile i < n and j < m:\n    if a[i] <= b[j]:\n        if k > 0 and arr[k - 1][0] == a[i]:\n            arr[k - 1][1] += 1\n        elif k > 0:\n            arr.append([a[i], arr[k - 1][1] + 1, arr[k - 1][2]])\n            k += 1\n        else:\n            arr.append([a[i], 1, 0])\n            k += 1\n        i += 1\n    else:\n        if k > 0 and arr[k - 1][0] == b[j]:\n            arr[k - 1][2] += 1\n        elif k > 0:\n            arr.append([b[j], arr[k - 1][1], arr[k - 1][2] + 1])\n            k += 1\n        else:\n            arr.append([b[j], 0, 1])\n            k += 1\n        j += 1\n\nwhile i < n:\n    if arr[k - 1][0] == a[i]:\n        arr[k - 1][1] += 1\n    else:\n        arr.append([a[i], arr[k - 1][1] + 1, arr[k - 1][2]])\n        k += 1\n    i += 1\n\nwhile j < m:\n    if arr[k - 1][0] == b[j]:\n        arr[k - 1][2] += 1\n    else:\n        arr.append([b[j], arr[k - 1][1], arr[k - 1][2] + 1])\n        k += 1\n    j += 1\n\narr.append([0, n, m])\n\nans = [3 * n, 3 * m]\nfor lst in arr:\n    tans = [2 * lst[1] + 3 * (n - lst[1]), 2 * lst[2] + 3 * (m - lst[2])]\n    if tans[0] - tans[1] > ans[0] - ans[1]:\n        ans = list(tans)\n\nans = str(ans[0]) + ':' + str(ans[1])\nprint(ans)\n", "import bisect\ndef input_split(f): return list(map(f, input().split()))\n\n\ndef main():\n    n = int(input())\n    a = sorted(list(input_split(int)))\n    m = int(input())\n    b = sorted(list(input_split(int)))\n    res = -99999999999999\n    res_str = \"\"\n    res_a = -999999999999999\n\n    def sum_p(p_list, d):\n        if p_list[-1] < d:\n            sum_a = len(p_list)*2\n        else:\n            t = bisect.bisect_left(p_list, d)\n            sum_a = t * 2 + (len(p_list)-t)*3\n        return sum_a\n\n    for v in set(a+b+[99999999999999]):\n        d = v\n        sum_a = sum_p(a, d)\n        sum_b = sum_p(b, d)\n        import sys\n        dp = lambda x: sys.stderr.write(str(x)+\"\\n\")\n        dp(\"d:{}, a:{}, b:{}, res_a: {}\".format(d, sum_a, sum_b, res_a))\n\n        if res < sum_a - sum_b or (res == sum_a - sum_b and res_a < sum_a):\n            res = sum_a - sum_b\n            res_a = sum_a\n            res_str = \"{}:{}\".format(sum_a, sum_b)\n    print(res_str)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def solve(a,b):\n\tn = len(a)\n\tm = len(b)\n\n\ta = sorted(a)\n\tb = sorted(b)\n\tr1 = n * 3\n\tr2 = m * 3\n\n\tmax1 = r1\n\tmax2 = r2\n\n\tp1 = 0\n\tp2 = 0\n\twhile p1 < n or p2 < m:\n\t\tv = 0\n\t\tif p2 == m:\n\t\t\tv = a[p1]\n\t\telif p1 == n:\n\t\t\tv = b[p2]\n\t\telse:\n\t\t\tv =min(a[p1],b[p2])\n\n\t\twhile p1 < n and a[p1] == v:\n\t\t\tr1 -= 1\n\t\t\tp1 += 1\n\n\t\twhile p2 < m and b[p2] == v:\n\t\t\tr2 -= 1\n\t\t\tp2 += 1\n\n\t\tif r1 - r2 > max1 - max2 or (r1-r2 == max1-max2 and r1 > max1):\n\t\t\tmax1 = r1\n\t\t\tmax2 = r2\n\n\treturn (max1, max2)\n\nn = input()\na = list(map(int, input().split(' ')))\nn = input()\nb = list(map(int, input().split(' ')))\n\nprint('%s:%s' % solve(a,b))\n\n", "def merge(l1,l2):\n    p1 = 0\n    p2 = 0\n    l = []\n    while ((p1 < len(l1)) and (p2 < len(l2))):\n        if l1[p1] < l2[p2]:\n            l.append(l1[p1])\n            p1 += 1\n        else:\n            l.append(l2[p2])\n            p2 += 1\n    if p1 < len(l1):\n        l.extend(l1[p1:len(l1)])\n    if p2 < len(l2):\n        l.extend(l2[p2:len(l2)])\n    return l\n\ndef merge_sort(l):\n    if len(l) == 1:\n        return l\n    else:\n        l1 = merge_sort(l[0:len(l)//2])\n        l2 = merge_sort(l[len(l)//2:len(l)])\n        return merge(l1, l2)\n\n\nn = int(input())       \ndist_str = input()\nfirst_dist = list([int(s) for s in dist_str.split(' ')])\nm = int(input())\ndist_str = input()\nsecond_dist = list([int(s) for s in dist_str.split(' ')])\n\n#merge_sort(first_dist)\n#merge_sort(second_dist)\nfirst_dist.sort()\nsecond_dist.sort()\nfirst_sum = 3 * n\nsecond_sum = 3 * m\ndiff = first_sum - second_sum\n\nthr_p1 = 0\nthr_p2 = 0\n\nfirst_sum_temp = first_sum\nsecond_sum_temp = second_sum\ndiff_temp = diff\n\nwhile ((thr_p1 < n) and (thr_p2 < m)):\n    if first_dist[thr_p1] < second_dist[thr_p2]:\n        first_sum_temp -= 1\n        thr_p1 += 1\n    elif first_dist[thr_p1] > second_dist[thr_p2]:\n        second_sum_temp -= 1\n        thr_p2 += 1\n    else:\n        first_sum_temp -= 1\n        second_sum_temp -= 1\n        thr_p2 += 1\n        thr_p1 += 1\n        \n    diff_temp = first_sum_temp - second_sum_temp\n\n    if diff_temp > diff:\n        diff = diff_temp\n        first_sum = first_sum_temp\n        second_sum = second_sum_temp\n\n\nwhile thr_p1 < n:\n    first_sum_temp -= 1\n    thr_p1 += 1\n    diff_temp = first_sum_temp - second_sum_temp\n\n    if diff_temp > diff:\n        diff = diff_temp\n        first_sum = first_sum_temp\n        second_sum = second_sum_temp\n\nwhile thr_p2 < m:\n    second_sum_temp -= 1\n    thr_p2 += 1\n    diff_temp = first_sum_temp - second_sum_temp\n\n    if diff_temp > diff:\n        diff = diff_temp\n        first_sum = first_sum_temp\n        second_sum = second_sum_temp\n\nans = str(first_sum) + ':' + str(second_sum)\nprint(ans)\n\n\n", "n = int(input())\nscore = list(map(lambda x: [int(x), 0], input().split()))\nm = int(input())    \nscore += list(map(lambda x: [int(x), 1], input().split()))\nscore.sort()\nf = []\nif score[0][1] == 0:\n    f.append([1,  0])\nelse:\n    f.append([0, 1])\nfor i in range(1, n + m):\n    if score[i][1] == 0:\n        f.append([f[i-1][0] + 1, f[i-1][1]])\n    else:\n        f.append([f[i-1][0], f[i-1][1] + 1])\n\na, b = f[-1][0] * 2, f[-1][1] * 2\naa, bb = f[-1][0] * 3, f[-1][1] * 3\nif (aa - bb) > (a - b) or (aa - bb == a - b and aa > a):\n    a, b = aa, bb\nfor i in range(n + m - 1):\n    if score[i][0] != score[i+1][0]:\n        aa = f[i][0] * 2 + (f[-1][0] - f[i][0]) * 3\n        bb = f[i][1] * 2 + (f[-1][1] - f[i][1]) * 3\n        if (aa - bb) > (a - b) or (aa - bb == a - b and aa > a):\n            a, b = aa, bb\nprint(a, ':', b, sep='')   ", "import bisect\n\nn = int(input()) \na = [int(x) for x in input().split()]\na.sort()\nm = int(input()) \nb = [int(x) for x in input().split()]\nb.sort() \nmaxRes = n*3-m*3\npos = [n*3, m*3]\nfor i in range(n):\n    k = bisect.bisect_left(b, a[i])\n    res = (i*2+(n-i)*3)-(k*2+(m-k)*3)\n    #print(res)\n    if (res > maxRes) or ((res == maxRes) and (i*2+(n-i)*3 > pos[0])):\n        maxRes = res\n        pos = [i*2+(n-i)*3, k*2+(m-k)*3] \n    #print(i, k, pos) \nif (n*2-m*2 > maxRes) or ((n*2-m*2 == maxRes) and (n*2 > pos[0])) :\n    pos = [n*2, m*2]\nprint(':'.join(list(map(str, pos))))", "n=int(input())\na=sorted([int(i) for i in input().split()])\nm=int(input())\nb=sorted([int(i) for i in input().split()])\n\nma=a1=3*n; mb=b1=3*m; rast=a1-b1; i,j=0,0\nwhile i<n and j<m:\n    z=min(a[i],b[j])\n    while i<n and a[i]<=z:\n        i+=1; ma-=1\n    while j<m and b[j]<=z:\n        j+=1; mb-=1\n    if ma-mb > rast:\n        a1, b1= ma, mb\n        rast=a1-b1\nif 2*n-2*m>rast:\n    a1,b1=2*n, 2*m\nprint(\"%d:%d\"%(a1,b1))\n\n", "from sys import stdin\nfrom heapq import heapify\ninFile = stdin\ntokens = []\ntokens_next = 0\n\ndef next_str():\n    nonlocal tokens, tokens_next\n    while tokens_next >= len(tokens):\n        tokens = inFile.readline().split()\n        tokens_next = 0\n    tokens_next += 1\n    return tokens[tokens_next - 1]\n\ndef nextInt():\n    return int(next_str())\n\ndef score(a, d):\n\tlow = -1\n\thigh = len(a)\n\twhile low + 1 < high:\n\t\tmid = (low + high) // 2\n\t\tif a[mid] <= d:\n\t\t\tlow = mid\n\t\telse:\n\t\t\thigh = mid\n\treturn (low + 1) * 2 + (len(a) - (low + 1)) * 3\n\ndef diff(a, b, d):\n\treturn score(a, d) - score(b, d)\n\nn = nextInt()\na = [nextInt() for i in range(n)]\nn = nextInt()\nb = [nextInt() for i in range(n)]\n\na.sort()\nb.sort()\n\nbest_dis = 0\nbest_score = diff(a, b, best_dis)\n\nfor d in a + b:\n\tcur = diff(a, b, d)\n\tif cur > best_score:\n\t\tbest_dis = d\n\t\tbest_score = cur\n\telif cur == best_score:\n\t\tif score(a, d) > score(a, best_dis):\n\t\t\tbest_dis = d\n\t\t\tbest_score = cur\n\n# print score(a, best_dis), ':', score(b, best_dis)\nprint('%d:%d'%(score(a, best_dis), score(b, best_dis)))", "read = lambda: map(int, input().split())\nn = int(input())\na = sorted(read())[::-1]\nm = int(input())\nb = sorted(read())[::-1]\nx, y = 2 * n, 2 * m\nj = 0\nfor i in range(n):\n    while j < m and b[j] >= a[i]:\n        j += 1\n    x1 = i + 1 + 2 * n\n    y1 = j + 2 * m\n    if x1 - y1 > x - y or (x1 - y1 == x - y and x1 > x):\n        x, y = x1, y1\nprint(x, y, sep = ':')\n", "def lte(n, a, d):\n    # count the number of values in a <= d\n    if a[0] > d:\n        return 0\n    if a[-1] <= d:\n        return n\n    else:\n        lo = 0\n        hi = n - 1\n        while lo + 1 < hi:\n            mid = (lo + hi) // 2\n            if a[mid] <= d:\n                lo = mid\n            else:\n                hi = mid\n        return lo + 1\n\ndef score(n, m, a, b, d):\n    ca = lte(n, a, d)\n    cb = lte(m, b, d)\n\n    a_score = 2 * ca + 3 * (n - ca)\n    b_score = 2 * cb + 3 * (m - cb)\n\n    return a_score, b_score\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    m = int(input())\n    b = list(map(int, input().split()))\n\n    a.sort()\n    b.sort()\n\n    factor = 2 if 2 * (n - m) > 3 * (n - m) else 3\n    best_diff = factor * (n - m)\n    best_a = factor * n\n    out = str(factor * n) + ':' + str(factor * m)\n\n    mega = set(a + b)\n\n    for d in mega:\n        if d <= 0: \n            continue\n\n        a_score, b_score = score(n, m, a, b, d)\n        diff = a_score - b_score\n\n        if diff > best_diff or (diff == best_diff and a_score > best_a):\n            best_diff = diff\n            best_a = a_score\n            out = str(a_score) + ':' + str(b_score)\n\n    print(out)\n\nmain()\n", "\"\"\"\n\tAuthor\t\t: Arif Ahmad\n\tDate  \t\t: \n\tAlgo  \t\t: \n\tDifficulty\t: \n\"\"\"\n\ndef main():\n\tn = int(input())\n\tt1 = [int(_) for _ in input().split()]\n\tt1 = sorted(t1)\n\n\tm = int(input())\n\tt2 = [int(_) for _ in input().split()]\n\tt2 = sorted(t2)\n\n\ta = x = 3 * n\n\tb = y = 3 * m\n\tadvantage = a - b\n\ti = 0\n\tj = 0\n\twhile i<n or j<m:\n\t\tif i<n and j<m:\n\t\t\tif t1[i] < t2[j]:\n\t\t\t\tx -= 1\n\t\t\t\ti += 1\n\t\t\telif t2[j] < t1[i]:\n\t\t\t\ty -= 1\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tx -= 1\n\t\t\t\ty -= 1\n\t\t\t\ti += 1\n\t\t\t\tj += 1\n\t\telif i < n:\n\t\t\tx -= 1\n\t\t\ti += 1\n\t\telse:\n\t\t\ty -= 1\n\t\t\tj += 1\n\n\t\tif (x - y) > advantage:\n\t\t\ta = x\n\t\t\tb = y\n\t\t\tadvantage = a - b\n\n\tprint('%d:%d' % (a, b))\n\n\ndef __starting_point():\n    main()\n    \n\n__starting_point()", "I = lambda: list(map(int, input().split()))\nn = I()[0]\nd1 = [0]+sorted(I())\nm = I()[0]\nd2 = [0]+sorted(I())\n\nindex1, index2 = {}, {}\nindex1[0], index2[0] = n, m\ni, j = n, m\nwhile (i>=0 and j>=0):\n    maxd = max(d1[i], d2[j])\n    if not(maxd in index1):\n        index1[maxd] = n - i \n    if not(maxd in index2):\n        index2[maxd] = m - j \n    if d1[i] == maxd:\n        i -= 1\n    if d2[j] == maxd:\n        j -= 1\nwhile (i>=0):\n    if not(d1[i] in index1):\n        index1[d1[i]] = n - i\n    i -= 1\nwhile (j>=0):\n    if not(d2[j] in index2):\n        index2[d2[j]] = m - j\n    j -= 1                \n    \na, b, maxdiff = 0, 0, -1e100\nfor foo in [0] + d1 + d2:\n    i = index1[foo]\n    j = index2[foo]\n    _a, _b = i * 3 + (n - i) * 2, j * 3 + (m - j) * 2\n    diff = _a - _b\n    if (diff > maxdiff) or (diff == maxdiff and _a > a):\n        maxdiff = diff\n        a, b = _a, _b\nprint('%d:%d' % (a,b))"]