["N = int(input())\nP = [tuple(map(int, input().split())) for _ in range(N)]\n\nodd = []\nfor (x, y) in P:\n    dist = abs(x) + abs(y)\n    odd.append(dist % 2 != 0)\n\nvalid = True\neven = False\nif all(odd):\n    pass\nelif not any(odd):\n    even = True\nelse:\n    valid =False\n\nif valid:\n\n    M = 31\n    if even:\n        print((M+1))\n        print((*([1 << m for m in range(M)] + [1])))\n    else:\n        print(M)\n        print((*[1 << m for m in range(M)]))\n\n    for (x, y) in P:\n        u = x + y\n        v = x - y\n        if even:\n            u += 1\n            v += 1\n        if u >= 0 and v >= 0:\n            A = 'R'\n            B = 'U'\n            C = 'D'\n            D = 'L'\n        elif u >= 0 and v < 0:\n            v *= -1\n            A = 'U'\n            B = 'R'\n            C = 'L'\n            D = 'D'\n        elif u < 0 and v >= 0:\n            u *= -1\n            A = 'D'\n            B = 'L'\n            C = 'R'\n            D = 'U'\n        elif u < 0 and v < 0:\n            u *= -1\n            v *= -1\n            A = 'L'\n            B = 'D'\n            C = 'U'\n            D = 'R'\n\n        ans = ''\n        wa = ((1 << M) - 1 - u) // 2\n        sa = ((1 << M) - 1 - v) // 2\n        for i in range(M):\n            check = str(wa >> i & 1) + str(sa >> i & 1)\n            if check == '00':\n                ans += A\n            elif check == '01':\n                ans += B\n            elif check == '10':\n                ans += C\n            elif check == '11':\n                ans += D\n        if even:\n            ans += 'L'\n        print(ans)\nelse:\n    print((-1))\n", "def main():\n    N = int(input())\n    xy = []\n    for _ in range(N):\n        x, y = list(map(int, input().split()))\n        xy.append((x, y))\n    mod = sum(xy[0]) % 2\n    for x, y in xy:\n        if (x + y) % 2 != mod:\n            print((-1))\n            return\n    print((33 - mod))\n    D = [2 ** i for i in range(31, -1, -1)]\n    if mod == 0:\n        D.append(1)\n    print((' '.join(map(str, D))))\n\n    for x, y in xy:\n        temp = []\n        for d in D:\n            if x >= y and x + y >= 0:\n                temp.append(\"R\")\n                x -= d\n            elif x < y and x + y >= 0:\n                temp.append(\"U\")\n                y -= d\n            elif x >= y and x + y < 0:\n                temp.append(\"D\")\n                y += d\n            else:\n                temp.append(\"L\")\n                x += d\n        print((''.join(temp)))\n\n\nmain()\n", "n = int(input())\nxy = []\nflag = \"f\"\nfor i in range(0,n):\n    X,Y = map(int,input().split())\n    xy.append((X,Y))\n    if i == 0:\n        m = (X+Y)%2\n    if m != (X+Y)%2:\n        flag = \"t\"\nif flag == \"t\":\n    print(-1)\n    return\n\nd = [2**i for i in range(31,-1,-1)]\n\nif m == 0:\n    d.append(1)\n\nprint(len(d))\nfor i in range(0,len(d)):\n    print(d[i],end = \" \")\nprint()\nfor i in range(0,n):\n    x,y = xy[i]\n    w = \"\"\n    for j in range(0,len(d)):\n        if y <= x and  y >= -x:\n            w += \"R\"\n            x -= d[j]\n        elif y >= x and y >= -x:\n            w += \"U\"\n            y -= d[j]\n        elif y > x and y < -x:\n            w += \"L\"\n            x += d[j]\n        else:\n            w += \"D\"\n            y += d[j]\n    print(w)\n", "inp = [[int(x) for x in input().split()] for _ in range(int(input()))]\ninpsum = sum(map(lambda ij: abs(ij[0]+ij[1]) % 2, inp))\nif not (inpsum == len(inp) or inpsum == 0):\n    print(-1)\n    return\n\nseeds = ([] if inpsum == len(inp) else [1]) + [1 << i for i in range(0, 32)]\n# print(inp)\n\nprint(len(seeds))\nprint(' '.join(map(str, reversed(seeds))))\n\nfor x, y in inp:\n    for k in reversed(seeds):\n        res = ''\n        if abs(x) > abs(y):\n            if x > 0:\n                res = 'R'\n                x -= k\n            else:\n                res = 'L'\n                x += k\n        else:\n            if y > 0:\n                res = 'U'\n                y -= k\n            else:\n                res = 'D'\n                y += k\n        # print((x,y))\n        print(res, end='')\n    print('')\n", "import sys\n\n\n# \u4e00\u3064\u524d\u306e\u5ea7\u6a19\u3068\u3001\u65b9\u5411\u3092\u8fd4\u3059\ndef f(x, y, i):\n    d = 1 << i\n    if y > x and y > -x:\n        return x, y - d, \"U\"\n    elif y < x and y > -x:\n        return x - d, y, \"R\"\n    elif y < x and y < -x:\n        return x, y + d, \"D\"\n    else:\n        return x + d, y, \"L\"\n\n\nN = int(input())\nX = []\nY = []\nmx = 0\nfor i in range(N):\n    x, y = [int(x) for x in input().split()]\n    mx = max(abs(x) + abs(y), mx)\n    X.append(x)\n    Y.append(y)\n\ns = (X[0] + Y[0]) % 2\nfor i in range(N):\n    if s != (X[i] + Y[i]) % 2:\n        print((-1))\n        return\n\n# s == 1 \u306e\u3068\u304d\uff1aD:[1,2,4,8,...]\n# s == 0 \u306e\u3068\u304d\uff1aD:[1,1,2,4,8,...]\n\nif s == 0:\n    X = [x - 1 for x in X]\n\nD = []\nd = 1\nwhile d < mx:\n    D.append(d)\n    d = d * 2\n\nm = len(D)\nprint((m if s != 0 else m + 1))\nif s == 0:\n    D = [1] + D\nprint((\" \".join([str(d) for d in D])))\n\nfor i in range(N):\n    x, y = X[i], Y[i]\n    dirs = []\n    for j in range(m - 1, -1, -1):\n        x, y, dir = f(x, y, j)\n        dirs.append(dir)\n    if s == 0:\n        dirs.append(\"R\")\n    print((\"\".join(dirs[::-1])))\n", "N = int(input())\nXY = [list(map(int, input().split())) for _ in range(N)]\nMOD = sum(XY[0]) % 2\n\nfor x, y in XY:\n    if MOD != (x + y) % 2:\n        print((-1))\n        return\n\nm = 33 - MOD\nprint(m)\nD = [2 ** i for i in range(31, -1, -1)]\nif MOD == 0:\n    D.append(1)\n\nprint((\" \".join(map(str, D))))\nfor x, y in XY:\n    w = \"\"\n    for d in D:\n        if x + y >= 0 and x - y >= 0:\n            w += \"R\"\n            x -= d\n        elif x + y < 0 and x - y >= 0:\n            w += \"D\"\n            y += d\n        elif x + y >= 0 and x - y < 0:\n            w += \"U\"\n            y -= d\n        else:\n            w += \"L\"\n            x += d\n\n    print(w)\n", "# coding:utf-8\n\nimport sys\ninput = sys.stdin.readline\nINF = float('inf')\n\n\ndef inpl(): return list(map(int, input().split()))\n\n\ndef move_uv(x, y):\n    ut = x + y\n    vt = x - y\n    command = ''\n    u, v = 0, 0\n    for i in range(len(D)):\n        if u <= ut and v <= vt:\n            command += 'R'\n            u += D[i]\n            v += D[i]\n        elif u <= ut and v > vt:\n            command += 'U'\n            u += D[i]\n            v -= D[i]\n        elif u > ut and v <= vt:\n            command += 'D'\n            u -= D[i]\n            v += D[i]\n        else:\n            command += 'L'\n            u -= D[i]\n            v -= D[i]\n\n    return command\n\n\nN = int(input())\npoint = []\nmax_length = 0\nfor i in range(N):\n    x, y = inpl()\n    max_length = max(max_length, abs(x) + abs(y))\n    point.append([x, y])\n\nparity = sum(point[0]) % 2\njudge = True\nfor p in point:\n    if parity ^ sum(p) % 2:\n        judge = False\n        break\n\nif not judge:\n    print((-1))\nelse:\n    D = [2 ** i for i in range(len(bin(max_length)) - 1)]\n    D.reverse()\n\n    # X + Y\u304c\u5076\u6570\u306e\u6642\u306f\u9577\u30551\u306e\u8155\u3092\u8db3\u3059\n    if parity == 0:\n        D.append(1)\n    print((len(D)))\n    print((' '.join(map(str, D))))\n    for i in range(N):\n        print((move_uv(point[i][0], point[i][1])))\n", "from functools import reduce\nimport math\n\nn = int(input())\ncoord = [tuple(map(int, input().split())) for i in range(n)]\n\n# parity check and get max\nx, y = coord[0]\np = (x + y) & 1\nlimit = 0\nfor x, y in coord:\n    if p != (x + y) & 1:\n        print(-1)\n        return\n    lim = abs(x) + abs(y)\n    if lim > limit:\n        limit = lim\n\nlimit = round(math.log2(limit))\nif p == 1:\n    d = [2 ** i for i in reversed(range(limit + 1))]\nelse:\n    d = [1] + [2 ** i for i in reversed(range(limit + 1))]\n\nprint(len(d))\nprint(reduce((lambda acc, dist: str(acc) + \" \" + str(dist)), d))\n\nfor x, y in coord:\n    u = x + y\n    v = x - y\n\n    command = \"\"\n    for i in range(len(d)):\n        if u >= 0 and v >= 0:\n            command += \"R\"\n            u -= d[i]\n            v -= d[i]\n        elif u >= 0 > v:\n            command += \"U\"\n            u -= d[i]\n            v += d[i]\n        elif u < 0 <= v:\n            command += \"D\"\n            u += d[i]\n            v -= d[i]\n        elif u < 0 and v < 0:\n            command += \"L\"\n            u += d[i]\n            v += d[i]\n\n    print(command)", "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\n\n\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# a\u3068b\u306e\u6700\u5927\u516c\u7d04\u6570\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\n# a\u3068b\u306e\u6700\u5c0f\u516c\u500d\u6570\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\n\n\ndef func(X, Y, D):\n    ans = \"\"\n    x, y = 0, 0\n    for i in range(len(D)):\n        d = D[i]\n\n        best_j = 0\n        best = INF\n        for j in range(4):\n            nx, ny = x + dx4[j] * d - X, y + dy4[j] * d - Y\n            if abs(nx) + abs(ny) < best:\n                best = abs(nx) + abs(ny)\n                best_j = j\n\n        x, y = x + dx4[best_j] * d, y + dy4[best_j] * d\n        ans += \"RULD\"[best_j]\n\n    assert(x == X and y == Y)\n    return ans\n\n\ndef main():\n    N = int(input())\n    points = []\n    for i in range(N):\n        X, Y = list(map(int, input().split()))\n        points.append((X, Y))\n\n    for i in range(len(points) - 1):\n        x1, y1 = points[i]\n        x2, y2 = points[i + 1]\n        if (x1 + y1) % 2 != (x2 + y2) % 2:\n            print(\"-1\")\n            return\n\n    D = [2 ** i for i in range(33)][::-1]\n    if sum(points[0]) % 2 == 0:\n        D.append(1)\n\n    print((len(D)))\n    print((*D))\n\n    for x, y in points:\n        print((func(x, y, D)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# http://tutuz.hateblo.jp/entry/2018/12/09/220715\n\ninf = float('inf')\n\nn = int(input())\ncoordinates = [tuple(map(int, input().split())) for _ in range(n)]\n\nparity = None\ncan_make = True\nfor coordinate in coordinates:\n    if parity is None:\n        parity = sum(coordinate) % 2\n    else:\n        if parity != sum(coordinate) % 2:\n            can_make = False\n            break\n\nif not can_make:\n    print(-1)\n    return\n    # \u5230\u9054\u53ef\u80fd\u306a\u9802\u70b9\u306fxy\u5ea7\u6a19\u306e\u548c\u306e\u30d1\u30ea\u30c6\u30a3\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n\nif parity == 0:\n    d = [pow(2, i) for i in range(31 + 1)] + [1]\n    # \u5947\u6570\u306f1\u3060\u3051\u306a\u306e\u3067\u30011\u3092\u8ffd\u52a0\u3057\u3066\u3001\u5168\u3066\u306e\u8155\u306e\u5408\u8a08\u304c\u5076\u6570\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\nelse:\n    d = [pow(2, i) for i in range(31 + 1)]\n    # \u5947\u6570\u306f1\u3060\u3051\u306a\u306e\u3067\u3001\u5168\u3066\u306e\u8155\u306e\u5408\u8a08\u306f\u5947\u6570\u306b\u306a\u308b\nd.sort(reverse=True)\n\nans = []\nfor x, y in coordinates:\n    u = x + y\n    v = x - y\n    # 45\u5ea6\u56de\u8ee2\u3059\u308b\n    # u,v\u306e\u6700\u5927\u5024\u306fx,y\u306e2\u500d=2*10**9\n    # 2 ** 31 > 2 * (10 ** 9) \u306a\u306e\u3067\u30012**31\u307e\u3067\u306e\u4e8c\u51aa\u3067\u5927\u4e08\u592b\u305d\u3046\n    # [1, 2, ..., 2 ** 31]\n    # L(-d,-d)R(+d,+d)U(+d,-d)D(-d,+d)\n    # \u306a\u306e\u3067\u3001\u4e00\u3064\u306ed\u3067\u3001u\u3067\u306f\u52a0\u7b97\u3001v\u3067\u306f\u6e1b\u7b97\u306a\u3069\u3067\u304d\u3001\u4e8c\u51aa\u4e00\u30bb\u30c3\u30c8\u3067\u8db3\u308a\u308b\n    curu, curv = 0, 0\n    ops = ''\n    for dd in d:\n        dist = inf\n        op = ''\n        det_du, det_dv = 0, 0\n        for c, (du, dv) in zip('LRDU', [(-1, -1), (1, 1), (-1, 1), (1, -1)]):\n            t = abs(curu + du * dd - u) + abs(curv + dv * dd - v)\n            if dist > t:\n                op = c\n                dist = t\n                det_du = du\n                det_dv = dv\n        ops += op\n        curu += det_du * dd\n        curv += det_dv * dd\n    if (curu, curv) == (u, v):\n        ans.append(ops)\n    else:\n        print(-1)\n        # print('\u4e0d\u4e00\u81f4', curx, cury, x, y)\n\nprint(len(d))\nprint(*d)\nprint(*ans, sep='\\n')\n", "def solve(n, x, y):\n    ws = []\n    S = set()\n    for i in range(n):\n        u = x[i] + y[i]\n        v = x[i] - y[i]\n        S.add(u % 2)\n        if len(S) > 1:\n            print(-1)\n            return\n        ds = [2**k for k in range(30, -1, -1)]\n        if u % 2 == 0:\n            ds.append(1)\n        w = \"\"\n        for d in ds:\n            if (u >= 0) and (v >= 0):\n                w += \"R\"\n                u, v = u-d, v-d\n            elif (u <= 0) and (v <= 0):\n                w += \"L\"\n                u, v = u+d, v+d\n            elif (u >= 0) and (v <= 0):\n                w += \"U\"\n                u, v = u-d, v+d\n            else: # (u < 0) and (v > 0)\n                w += \"D\"\n                u, v = u+d, v-d\n        ws.append(w)\n    print(len(ds)) # m\n    print(\" \".join(map(str, ds)))\n    print(\"\\n\".join(ws))\n\nn = int(input())\nx = [0] * n\ny = [0] * n\nfor i in range(n):\n    x[i], y[i] = map(int, input().split())\nsolve(n, x, y)", "import sys\n\nN = int(input())\ncoord = [tuple(map(int, input().split())) for _ in range(N)]\nparity = (coord[0][0] + coord[0][1]) % 2\nflag = False\nfor c in coord[1:]:\n    if (c[0] + c[1]) % 2 != parity:\n        flag = True\n        break\nif flag:\n    print(-1)\n    return\nD = [2**(31-i) for i in range(32)]\nif parity == 0:\n    D.append(1)\nprint(len(D))\nprint(*D, sep=' ')\nfor c in coord:\n    w = ''\n    pos = [0, 0]\n    for d in D:\n        dif = [c[0] - pos[0], c[1] - pos[1]]\n        cands = [(abs(dif[0] - d) + abs(dif[1]), 'R'), (abs(dif[0] + d) + abs(dif[1]), 'L'), (abs(dif[0]) + abs(dif[1] - d), 'U'), (abs(dif[0]) + abs(dif[1] + d), 'D')]\n        select = min(cands)\n        w += select[1]\n        if select[1] == 'R':\n            pos[0] += d\n        elif select[1] == 'L':\n            pos[0] -= d\n        elif select[1] == 'U':\n            pos[1] += d\n        else:\n            pos[1] -= d\n    print(w)", "from sys import stdin, exit\nimport numpy as np\n\nN, *XY = map(int, stdin.read().split())\nXY = np.array(XY).reshape(N, 2)\n\nXYsum = np.abs(XY).sum(axis=1)\nif any(XYsum % 2 != XYsum[0] % 2):\n    print(-1)\n    return\n\nxymax = XYsum.max()\nd = [] if xymax % 2 == 1 else [1]\nfor i in range(41):\n    di = 2**i\n    if xymax < di:\n        break\n    d.append(di)\nd.reverse()\nprint(len(d))\nprint(' '.join(map(str, d)))\n\nfor X, Y in XY:\n    x, y = 0, 0\n    w = ''\n    for di in d:\n        if abs(X-(x-di)) + abs(Y-y) <= di:\n            w += 'L'\n            x -= di\n        elif abs(X-(x+di)) + abs(Y-y) <= di:\n            w += 'R'\n            x += di\n        elif abs(X-x) + abs(Y-(y-di)) <= di:\n            w += 'D'\n            y -= di\n        else:\n            w += 'U'\n            y += di\n    print(w)", "N = int(input())\nPi = []\nfor i in range(N):\n    d = list(map(int, input().split()))\n    Pi.append(d)\n \n# validation\nfor p in Pi[1:]:\n    if (p[0] + p[1]) % 2 != (Pi[0][0] + Pi[0][1]) % 2:\n        print((-1))\n        return\n \n# create arms\nAi = []\nif (Pi[0][0] + Pi[0][1]) % 2 == 0:\n    Ai.append(1)\nfor i in range(0, 32):\n    Ai.append(2 ** i)\n \ndef find_arm_pattern(arms, target_x, target_y):\n    result = \"\"\n    x = 0\n    y = 0\n    for a in arms:\n        dx = target_x - x\n        dy = target_y - y\n        if abs(dx) >= abs(dy):\n            if dx > 0:\n                result += \"R\"\n                x += a\n            else:\n                result += \"L\"\n                x -= a\n        else:\n            if dy > 0:\n                result += \"U\"\n                y += a\n            else:\n                result += \"D\"\n                y -= a\n    if x == target_x and y == target_y:\n        return result\n    return None\n \n \narms = list(reversed(Ai))\nresults = []\nfor p in Pi:\n    r = find_arm_pattern(arms, p[0], p[1])\n    results.append(r)\ntxt = str(arms)\nprint((len(arms)))\nprint((txt[1:-1].replace(\",\", \"\")))\nfor r in results:\n    print(r)\n", "def cal(i,j):\n    if i==1 and j==1: return \"R\"\n    elif i==1 and j==0: return \"U\"\n    elif i==0 and j==1: return \"D\"\n    elif i==0 and j==0: return \"L\"\n\n\n\nimport sys\n\nN=int(input())\n\n\na=[list(map(int,input().split())) for i in range(N)]\nmod=sum(a[0])%2\nfor i in range(N):\n    if sum(a[i])%2!=mod:\n        print(-1)\n        return\n\nif mod==0:\n    a=[[ a[i][0]-1 ,a[i][1] ] for i in range(N)]\n\nif mod==0:\n    print(32)\n    print(1,end=\" \")\n    for i in range(30): print(2**i, end=\" \")\n    print(2**30)\nelse:\n    print(31)\n    for i in range(30): print(2**i, end=\" \")\n    print(2**30)\n\nfor i in range(N):\n    [x,y]=a[i]\n    u=bin((x+y+2**31-1)//2)[2:].zfill(31)\n    v=bin((x-y+2**31-1)//2)[2:].zfill(31)\n    \n    if mod==0: s=\"R\"\n    else: s=\"\"\n\n    for i in range(30,-1,-1): s=s+cal( int(u[i]),int(v[i]) )\n    \n    print(s)", "def robot_arms(N: int, XY: list) -> tuple:\n    odd, even = 0, 0\n    max_dist = 0\n    for x, y in XY:\n        ax, ay = abs(x), abs(y)\n        if (ax + ay) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n        if max_dist < ax + ay:\n            max_dist = ax + ay\n\n    if odd == 0:\n        # \u5076\u6570\u306e\u307f\u306e\u5834\u5408\u306f\u9577\u3055 1 \u306e\u30a2\u30fc\u30e0\u304c\u4f59\u8a08\u306b\u5fc5\u8981\n        arms = [1]\n    elif even == 0:\n        # \u5947\u6570\u306e\u307f\u306e\u5834\u5408\u306f 2 \u306e\u3079\u304d\u4e57\u306e\u9577\u3055\u306e\u30a2\u30fc\u30e0\u3060\u3051\u3067 OK\n        arms = []\n    else:\n        # \u5076\u5947\u3054\u3061\u3083\u6df7\u305c\u306e\u5834\u5408\u306f\u4e0d\u6210\u7acb\n        return [], []\n\n    # \u30a2\u30fc\u30e0\u306e\u6e96\u5099\n    tmp, sum_tmp = 1, sum(arms)\n    while sum_tmp < max_dist:\n        arms.append(tmp)\n        sum_tmp += tmp\n        tmp <<= 1\n\n    # \u5404\u70b9\u3078\u8155\u3092\u4f38\u3070\u3059\u305f\u3081\u306e\u64cd\u4f5c\u65b9\u6cd5\u3092\u6c7a\u3081\u3066\u3044\u304f\n    ops = []\n    for x, y in XY:\n        op = ''\n        # \u6c7a\u5b9a\u64cd\u4f5c\n        # \u9577\u3055\u304c 2^m \u307e\u3067\u306e\u8155\u3092\u4f7f\u3063\u3066\u5c4a\u304f\u7bc4\u56f2\u306f\u7dba\u9e97\u306a\u83f1\u5f62\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n        # \u70b9(x,y)\u304b\u3089\u539f\u70b9\u306b\u5411\u304b\u3063\u3066\u8003\u3048\u308b\u3002\n        # \u8155\u306e\u9577\u3044\u7269\u304b\u3089\u4f7f\u3063\u3066\u3044\u304d\u3001\u4f7f\u3063\u3066\u3044\u306a\u3044\u8155\u3067\u5c4a\u304f\u7bc4\u56f2\u306b\u5165\u3063\u3066\u3044\u304f\u69d8\u306b\n        # \u8155\u306e\u65b9\u5411\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u304f\u3002\n        # \u305f\u3060\u3057\u3001\u9006\u9806\u306b\u6c7a\u5b9a\u3057\u3066\u3044\u304f\u306e\u3067\u3001\u6c7a\u5b9a\u904e\u7a0b\u3067\u306e\u65b9\u5411\u3068\u5b9f\u969b\u306b\u51fa\u529b\u3059\u3079\u304d\n        # \u65b9\u5411\u306f\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\n        left_len = sum(arms)\n        nx, ny = x, y\n        for arm in reversed(arms):\n            left_len -= arm\n            if abs(nx + arm) + abs(ny) <= left_len:\n                op = 'L' + op\n                nx, ny = nx + arm, ny\n            elif abs(nx - arm) + abs(ny) <= left_len:\n                op = 'R' + op\n                nx, ny = nx - arm, ny\n            elif abs(nx) + abs(ny + arm) <= left_len:\n                op = 'D' + op\n                nx, ny = nx, ny + arm\n            elif abs(nx) + abs(ny - arm) <= left_len:\n                op = 'U' + op\n                nx, ny = nx, ny - arm\n        ops.append(op)\n\n    return arms, ops\n\n\ndef __starting_point():\n    N = int(input())\n    XY = [tuple(map(int, input().split())) for _ in range(N)]\n    ans = robot_arms(N, XY)\n\n    if len(ans[0]) == 0:\n        print((-1))\n    else:\n        d, w = ans\n        print((len(d)))\n        print((' '.join(map(str, d))))\n        for ww in w:\n            print(ww)\n\n__starting_point()", "n=int(input())\nxy=[list(map(int,input().split()))for _ in range(n)]\ng=39\na=[]\nif sum(xy[0])%2==0:a.append(1)\nfor i in range(g):a.append(1<<i)\ng=len(a)\nfor x,y in xy:\n  if (x+y)%2!=sum(xy[0])%2:print(-1);return()\nprint(g)\nprint(*a)\ndef f(s):\n  t=s\n  ans=[]\n  for i in a[::-1]:\n    if abs(t-i)<abs(t+i):\n      ans.append(-i)\n      t-=i\n    else:\n      ans.append(i)\n      t+=i\n  return ans[::-1]\nfor x,y in xy:\n  xpy=f(-(x+y))\n  xmy=f(-(x-y))\n  ans=\"\"\n  for p,m in zip(xpy,xmy):\n    if 0<p and 0<m:ans+=\"R\"\n    if p<0 and m<0:ans+=\"L\"\n    if 0<p and m<0:ans+=\"U\"\n    if p<0 and 0<m:ans+=\"D\"\n  print(ans)", "N = int(input())\nX = []\nY = []\nfor _ in range(N):\n    x, y = list(map(int, input().split()))\n    X.append(x)\n    Y.append(y)\n\n# (x + y) % 2 \u304c\u5168\u90e8\u540c\u3058\u3058\u3083\u306a\u304b\u3063\u305f\u3089\u3069\u3046\u9811\u5f35\u3063\u3066\u3082\u3080\u308a\nif len(set([(x + y) % 2 for x, y in zip(X, Y)])) != 1:\n    print((-1))\n    return\n\n\ndef directions_str(fx, fy, tx, ty, arm):\n    if fx == tx and fy == ty:\n        return ''\n    if abs(fx - arm - tx) + abs(fy - ty) < arm:\n        return 'L' + directions_str(fx=fx - arm, fy=fy, tx=tx, ty=ty, arm=arm // 2)\n    if abs(fx + arm - tx) + abs(fy - ty) < arm:\n        return 'R' + directions_str(fx=fx + arm, fy=fy, tx=tx, ty=ty, arm=arm // 2)\n    if abs(fx - tx) + abs(fy - arm - ty) < arm:\n        return 'D' + directions_str(fx=fx, fy=fy - arm, tx=tx, ty=ty, arm=arm // 2)\n    if abs(fx - tx) + abs(fy + arm - ty) < arm:\n        return 'U' + directions_str(fx=fx, fy=fy + arm, tx=tx, ty=ty, arm=arm // 2)\n\n\n# \u5168\u90e8 (x + y) % 2 == 1 \u306a\u3089\u30012^n, 2^(n-1), ..., 2, 1 \u3063\u3066\u8155\u3092\u4f5c\u308c\u3070 (x+y) <= 2^(n+1)-1 \u307e\u3067\u306f\u3069\u3053\u3067\u3082\u884c\u3051\u308b\u3002\n# \u5168\u90e8 (x + y) % 2 == 0 \u306a\u3089\u3001\u4e0a\u8a18\u304b\u3089 1 \u3060\u3051\u4f38\u3070\u305b\u3070\u3069\u3053\u3067\u3082\u884c\u3051\u308b\u3002\narms = []\nfor n in range(39):\n    arms.append(2 ** n)\n    if 2 ** n > 10 ** 9:\n        break\narms.sort(reverse=True)\n\nif (X[0] + Y[0]) % 2 == 1:\n    print((len(arms)))\n    print((' '.join(map(str, arms))))\n    for x, y in zip(X, Y):\n        print((directions_str(fx=0, fy=0, tx=x, ty=y, arm=arms[0])))\nelse:\n    arms.append(1)\n    print((len(arms)))\n    print((' '.join(map(str, arms))))\n    for x, y in zip(X, Y):\n        print((directions_str(fx=0, fy=0, tx=x, ty=y + 1, arm=arms[0]) + 'D'))\n", "def solution(x,y):\n    ans = ''\n    nowx, nowy = 0,0\n    preX = [0]*31\n    preY = [0]*31\n    for i in range(31):\n        if nowx < x:\n            nowx += 2**(30-i)\n            preX[i] = 1\n        else:\n            nowx -= 2**(30-i)\n            preX[i] = -1\n        if nowy < y:\n            nowy += 2**(30-i)\n            preY[i] = 1\n        else:\n            nowy -= 2**(30-i)\n            preY[i] = -1\n    for i in range(31):\n        if preX[i] == -1 and preY[i] == -1:\n            ans += 'L'\n        elif preX[i] == 1 and preY[i] == 1:\n            ans += 'R'\n        elif preX[i] == -1 and preY[i] == 1:\n            ans += 'D'\n        else:\n            ans += 'U'\n    return ans\nN = int( input())\nX = [0]*N\nY = [0]*N\nx, y = map( int, input().split())\nX[0] = x\nY[0] = y\nevod = (x+y)%2\nFlag = True\nfor i in range(1,N):\n    x, y = map( int, input().split())\n    X[i] = x\n    Y[i] = y\n    if (x+y)%2 != evod:\n        Flag = False\n\nif Flag:\n    D = [2**i for i in range(30,-1,-1)]\n    if evod == 1:\n        print(31)\n        print(' '.join(map(str,D)))\n        for i in range(N):\n            print( solution(X[i]+Y[i],X[i]-Y[i]))\n    else:\n        print(32)\n        D.append(1)\n        print(' '.join(map(str,D)))\n        for i in range(N):\n            print( solution(X[i]+Y[i]-1,X[i]-1-Y[i]) + 'R')\nelse:\n    print(-1)", "#!/usr/bin/env python3\nimport sys\ntry:\n    from typing import List\nexcept ImportError:\n    pass\n\n\ndef solve(N: int, X: \"List[int]\", Y: \"List[int]\"):\n    parities = {(Xi + Yi) % 2 for Xi, Yi in zip(X, Y)}\n    if len(parities) > 1:\n        print((-1))\n        return\n\n    d = [1 << i for i in range(39)]\n    if next(iter(parities)) == 0:\n        d.append(1)\n\n    print((len(d)))\n    print((*d))\n\n    x0 = -sum(d)\n    for Xi, Yi in zip(X, Y):\n        u = (Xi - x0 - Yi) // 2\n        v = (Xi - x0 + Yi) // 2\n        modes = []\n        for i in range(39):\n            ui = (u & (1 << i)) != 0\n            vi = (v & (1 << i)) != 0\n            modes.append({\n                (False, False): \"L\",\n                (False, True): \"U\",\n                (True, False): \"D\",\n                (True, True): \"R\",\n            }[ui, vi])\n        if len(d) > len(modes):\n            modes.append(\"L\")\n        print((\"\".join(modes)))\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    X = [int()] * (N)  # type: \"List[int]\"\n    Y = [int()] * (N)  # type: \"List[int]\"\n    for i in range(N):\n        X[i] = int(next(tokens))\n        Y[i] = int(next(tokens))\n    solve(N, X, Y)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nx = [0 for i in range(0, n)]\ny = [0 for i in range(0, n)]\n\nfor i in range(0, n):\n    x[i], y[i] = [int(i) for i in input().split(\" \")]\n\nmod2 = (x[0] + y[0]) % 2\nimp = False\n\nfor i in range(1, n):\n    if (x[i] + y[i]) % 2 != mod2:\n        print(-1)\n        imp = True\n        break\n        \nif not imp:\n    if mod2 == 0:\n        x = [i + 1 for i in x]\n\n    u = [x[i] + y[i] for i in range(0, n)]\n    v = [x[i] - y[i] for i in range(0, n)]\n\n    mode = [\"L\", \"D\", \"U\", \"R\"]\n    m = 31\n\n    if mod2 == 0:\n        print(m + 1)\n        print(\"1 \" + \" \".join([str(2**(i - 1)) for i in range(1, m + 1)]))\n    else:\n        print(m)\n        print(\" \".join([str(2**(i - 1)) for i in range(1, m + 1)]))\n\n    for i in range(0, n):\n        w = \"\"\n        if mod2 == 0:\n            w = \"L\"\n        ui = (u[i] + 2**m - 1) // 2\n        vi = (v[i] + 2**m - 1) // 2\n        for l in range(0, m):\n            ul = ui % 2\n            ui = ui // 2\n            vl = vi % 2\n            vi = vi // 2\n            w += mode[ul * 2+ vl]\n        print(w)", "n = int(input())\nxy = [tuple(int(x) for x in input().split()) for _ in range(n)]\n\nmod = (xy[0][0] + xy[0][1]) % 2\nfor x, y in xy:\n    if (x + y) % 2 != mod:\n        print((-1))\n        return\n\nprint((33 - mod))\nD = [2 ** i for i in range(31, -1, -1)]\nif mod == 0:\n    D.append(1)\n\nprint((\" \".join(map(str, D))))\n\nfor x, y in xy:\n    temp = []\n    for d in D:\n        if x >= y and x + y >= 0:\n            temp.append(\"R\")\n            x -= d\n        elif x < y and x + y >= 0:\n            temp.append(\"U\")\n            y -= d\n        elif x >= y and x + y < 0:\n            temp.append(\"D\")\n            y += d\n        else:\n            temp.append(\"L\")\n            x += d\n    print((''.join(temp)))\n\n\n", "# Python3 (3.4.3)\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# function\n# -------------------------------------------------------------\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nN = int(input())\nXY = [list(map(int,input().split())) for _ in range(N)]\n\n# x + y \u306e\u30d1\u30ea\u30c6\u30a3\u304c\u540c\u4e00\u304b\u30c1\u30a7\u30c3\u30af, \u7570\u306a\u308b\u5ea7\u6a19\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u5b9f\u73fe\u4e0d\u53ef\u80fd\np = set()\nfor i in range(N):\n    p.add((XY[i][0] + XY[i][1]) % 2)\nif len(p) > 1:\n    print((-1))\n    return\n\n# \u8155\u306e\u9577\u3055\u30921,2,4,8... \u3067\u8003\u3048\u308b\u3068, \u30d1\u30ea\u30c6\u30a31\u3092\u5b9f\u73fe\u3067\u304d\u308b.\n# \u4e0e\u3048\u3089\u308c\u305f\u5ea7\u6a19\u306e\u30d1\u30ea\u30c6\u30a3\u304c0\u306e\u5834\u5408, X\u5ea7\u6a19\u3092-1\u3057, \u30d1\u30ea\u30c6\u30a31\u306e\u5834\u5408\u306b\u5e30\u7740\u3059\u308b(\u3042\u3068\u3067X+1\u3059\u308b)\nif 0 in p:\n    for i in range(N):\n        XY[i][0] -= 1\n\n# \u30a2\u30fc\u30e0\u3092\u6e96\u5099\nD = []\nfor i in range(35):\n    D.append(2**i)\nD.sort(reverse=True)\n\nAns = []\n# \u9806\u756a\u306b\u8a08\u7b97\nfor i in range(N):\n    x,y = XY[i][0],XY[i][1]\n    x0,y0 = 0,0\n    ans = \"\"\n    # \u539f\u70b9\u3092\u4e2d\u5fc3\u306bX\u5b57\u3067\u5206\u5272\u3055\u308c\u308b\u9818\u57df\u306e (\u4e0a\u4e0b\u5de6\u53f3) \u3069\u3061\u3089\u304b\u3092\u5224\u65ad\u3057, \u79fb\u52d5\u3055\u305b, \u90fd\u5ea6\u539f\u70b9\u3092\u8abf\u6574\n    for d in D:\n        dx,dy = x-x0,y-y0\n        # \u53f3\n        if dy < dx and dy > -dx:\n            ans += \"R\"\n            x0 += d\n        # \u4e0b\n        elif dy < dx and dy < -dx:\n            ans += \"D\"\n            y0 -= d\n        # \u5de6\n        elif dy > dx and dy < -dx:\n            ans += \"L\"\n            x0 -= d\n        # \u4e0a\n        else:\n            ans += \"U\"\n            y0 += d\n    Ans.append(ans)\n\n# \u30d1\u30ea\u30c6\u30a3\u304c 0 \u306e\u5834\u5408 : \u9577\u30551\u306e\u30a2\u30fc\u30e0\u3092\u8ffd\u52a0, X\u5ea7\u6a19\u3092 -1 \u3057\u305f\u5206\u3092 +1 \u3057\u3066\u8abf\u6574(\u3064\u307e\u308a\u6700\u5f8c\u306b \"R\" \u3092\u8ffd\u52a0\u3059\u308b)\nif 0 in p:\n    D.append(1)\n    print((len(D)))\n    print((\" \".join(map(str,D))))\n    for ans in Ans:\n        print((ans + \"R\"))\n# \u30d1\u30ea\u30c6\u30a3\u304c 1 \u306e\u5834\u5408 : \u305d\u306e\u307e\u307e\u51fa\u529b\nelse:\n    print((len(D)))\n    print((\" \".join(map(str,D))))\n    for ans in Ans:\n        print(ans)\n\n\n\n", "n = int(input())\nxys = [list(map(int, input().split())) for _ in range(n)]\n\n# \u5404\u30af\u30a8\u30ea\u306e\u30d1\u30ea\u30c6\u30a3\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\np = sum(xys[0]) % 2\nfor xy in xys:\n    x, y = xy\n    if (x + y) % 2 != p: # \u30d1\u30ea\u30c6\u30a3\u304c\u7570\u306a\u308b\u30af\u30a8\u30ea\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u9054\u6210\u3067\u304d\u306a\u3044\n        print(-1)\n        return\n\nif p == 0:\n    d = [1]\nelse:\n    d= []\n\nd += [2 ** k for k in range(30 + 1)] # 2 ** 0 \u304b\u3089 2 ** 30 \u307e\u3067\nm = len(d)\n\nws = [['' for _ in range(m)] for _ in range(n)]\nidx = 0\nfor xy in xys:\n    x, y = xy\n    for k in sorted(range(m), reverse=True):\n        R = abs(x - d[k]) + abs(y)\n        L = abs(x + d[k]) + abs(y)\n        U = abs(x) + abs(y - d[k])\n        D = abs(x) + abs(y + d[k])\n\n        min_v = min(R, L, U, D)\n\n        if min_v == R:\n            ws[idx][k] = 'R'\n            x -= d[k]\n        elif min_v == L:\n            ws[idx][k] = 'L'\n            x += d[k]\n        elif min_v == U:\n            ws[idx][k] = 'U'\n            y -= d[k]\n        else:\n            # if min_v == D:\n            ws[idx][k] = 'D'\n            y += d[k]\n    idx += 1\n\nprint(m)\nprint(*d)\nfor w in ws:\n    print(''.join(w))", "import sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn=int(input())\nX,Y=[],[]\nfor _ in range(n):\n    x,y=map(int,input().split())\n    X.append(x)\n    Y.append(y)\nmod=(X[0]+Y[0])%2\nfor i in range(1,n):\n    if (X[i]+Y[i])%2!=mod:\n        print(-1)\n        return\nif not mod:\n    X=[x+1 for x in X]\nU=[X[i]+Y[i] for i in range(n)]\nV=[X[i]-Y[i] for i in range(n)]\nMode=['L','D','U','R']\nm=31\nif mod:\n    print(m)\n    print(' '.join([str(2**i) for i in range(m)]))\nelse:\n    print(m+1)\n    print('1 '+' '.join([str(2**i) for i in range(m)]))\nfor i in range(n):\n    w=''\n    if not mod:\n        w='L'\n    ui=(U[i]+2**m-1)//2\n    vi=(V[i]+2**m-1)//2\n    for _ in range(m):\n        u_bit,v_bit=ui&1,vi&1\n        ui>>=1\n        vi>>=1\n        w+=Mode[u_bit*2+v_bit]\n    print(w)", "from math import *\n\ndef L(xi, di):\n    return xi - di\n\ndef R(xi, di):\n    return xi + di\n\ndef D(yi, di):\n    return yi - di\n\ndef U(yi, di):\n    return yi + di\n\ndef main():\n    N = int(input())\n    x_list = [list(map(int, input().split())) for i in range(N)]\n    sum_list = [x[0] + x[1] for x in x_list]\n    checker = sum_list[0] % 2\n\n    for wa in sum_list:\n        if wa % 2 != checker:\n            print(\"-1\")\n            return\n\n    arm_list = []\n    if checker == 0:\n        arm_list.append(1)\n\n    pow_i = 0\n    max_sum = max(sum_list)\n    while max_sum > sum(arm_list):\n        arm_list.insert(0, 2 ** pow_i)\n        pow_i += 1\n    print(len(arm_list))\n    print(\" \".join(map(str, arm_list)))\n\n    for c in x_list:\n        now_c = [0,0]\n        order = \"\"\n\n        for arm in arm_list:\n            dx = c[0] - now_c[0]\n            dy = c[1] - now_c[1]\n\n            if abs(dx) > abs(dy):\n                if dx > 0:\n                    order += \"R\"\n                    now_c[0] = R(now_c[0], arm)\n                else:\n                    order += \"L\"\n                    now_c[0] = L(now_c[0], arm)\n            else:\n                if dy > 0:\n                    order += \"U\"\n                    now_c[1] = U(now_c[1], arm)\n                else:\n                    order += \"D\"\n                    now_c[1] = D(now_c[1], arm)\n        print(order)\n\ndef __starting_point():\n    main()\n__starting_point()", "# \u3067\u304d\u306a\u304b\u3063\u305f\n# \u30a2\u30fc\u30e0\u306e\u9577\u3055\u304c\u6c7a\u307e\u308b\u3068(xm+ym)mod2\u306f\u4e00\u5b9a\u306b\u306a\u308b\u3001\u3053\u308c\u304c\u4e00\u5b9a\u3067\u306a\u3051\u308c\u3070\u7121\u7406\n# (xj+yj)mod2=1\u3068\u3057\u3066\u3088\u3044\u3001\u9577\u30551\u306e\u8155\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u30670\u306e\u5834\u5408\u3082\u8003\u3048\u3089\u308c\u308b\n# (u,v)=(x+y,x-y)(\u56de\u8ee2\u5ea7\u6a19)\u3068\u3059\u308b\u3068\u3001ui,vi\u3092u(i+1),v(i+1)\u304b\u3089\u72ec\u7acb\u306b\u6c7a\u5b9a\u3067\u304d\u308b(+d,-d\u3044\u3065\u308c\u304b\u306f\u3055\u308c\u308b\u3053\u3068\u304c\u78ba\u5b9a\u3057\u3066\u3044\u308b)\n# \u3088\u3063\u3066di\u3092\u6c7a\u3081\u305f\u3068\u304d\u306bui,vi\u3092\u6c7a\u3081\u308b\u554f\u984c\u3092u,v\u306b\u3064\u3044\u3066\u72ec\u7acb\u306b\u89e3\u3051\u3070\u3001\u5404\u95a2\u7bc0\u306e\u5411\u304d\u3092\u6c7a\u5b9a\u3067\u304d\u308b\n# u(i+1)=ui+di\u3068\u306a\u308bi\u2208{1,...,m}\u306e\u96c6\u5408\u3092S\u3068\u3059\u308b\u3068\u3001u(m)=-\u03a3(1\u2266i\u2266m) di +\u03a3(i\u2208S) 2di \u304c\u6210\u308a\u7acb\u3064\n# -2*10^9\u2266Uj,Vj\u22662*10^9 \u3068 1\u2266m\u226640 \u3088\u308a m=31,di=2^(i-1) \u3068\u3067\u304d\u308b\u3002\u3059\u308b\u3068\u3001Uj=-(2^31-1) +\u03a3(i\u2208S) 2di \u3068\u306a\u308b\n# \u3064\u307e\u308a\u03a3(i\u2208S) 2di =Uj+(2^31-1) \u3068\u306a\u308b\u3088\u3046\u306bS\u3092\u9078\u3076\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u89e3\u3051\u308b\n\nn=int(input())\nlistXY=[list(map(int,input().split())) for _ in range(n)]\nlistUV=[[listXY[i][0]+listXY[i][1],listXY[i][0]-listXY[i][1]]for i in range(n)]\n\nisOdd=listUV[0][0]%2\ncanReach=1\nfor i in range(1,n):\n    if isOdd!=listUV[i][0]%2:\n        canReach=0\n        break\n\nif not canReach:\n    print((-1))\nelse:\n    offset=2**31-isOdd\n    m=32-isOdd\n    d=[2**i for i in range(32)]\n    w=[]\n    for i in range(n):\n        x,y=0,0\n        u,v=listUV[i][0]+offset,listUV[i][1]+offset\n        s=''\n        if not isOdd:\n            s='L'\n            x=x-1\n        for k in range(31):\n            u //= 2\n            v //= 2\n            u1, v1 = u % 2, v % 2\n            # L(-d,-d),R(+d,+d),D(-d,+d),U(+d,-d)\n            if u1 == 0 and v1 == 1:\n                s += 'D'\n                y=y-d[k]\n            elif u1 == 0 and v1 == 0:\n                s += 'L'\n                x=x-d[k]\n            elif u1 == 1 and v1 == 1:\n                s += 'R'\n                x=x+d[k]\n            elif u1 == 1 and v1 == 0:\n                s += 'U'\n                y=y+d[k]\n        w.append(s)\n        # print(x,y,s)\n    # print(listXY)\n    # print(listUV)\n    print((32-isOdd))\n    s=''\n    if not isOdd:\n        s='1 '\n    for i in range(31):\n        s+=str(d[i])+' '\n    print(s)\n    for i in range(n):\n        print((w[i]))\n", "N=int(input())\nXY=[]\nfor i in range(N):\n  XY.append(list(map(int,input().split())))\nmr=abs(XY[0][0])+abs(XY[0][1])  \nfor i in range(1,N):\n  if abs(XY[i][0])+abs(XY[i][1])>mr:\n    mr=abs(XY[i][0])+abs(XY[i][1])\nimport math\nm=int(math.log(mr,2)//1+1)\ng=(XY[0][0]+XY[0][1])%2\ncnt=0\nfor i in range(N):\n  if (XY[i][0]+XY[i][1])%2==g:\n    cnt+=1\nif cnt!=N:\n  print(-1)\nelse:\n  if g==1:\n    W=['']*N\n    for i in range(N):\n      for j in range(m):\n        if abs(XY[i][0])>=abs(XY[i][1]) and XY[i][0]>=0:\n          W[i]+='R'\n          XY[i][0]-=2**(m-j-1)\n        elif abs(XY[i][0])>=abs(XY[i][1]) and XY[i][0]<0:\n          W[i]+='L'\n          XY[i][0]+=2**(m-j-1)\n        elif abs(XY[i][0])<abs(XY[i][1]) and XY[i][1]>=0:\n          W[i]+='U'\n          XY[i][1]-=2**(m-j-1)\n        elif abs(XY[i][0])<abs(XY[i][1]) and XY[i][1]<0:\n          W[i]+='D'\n          XY[i][1]+=2**(m-j-1)\n    print(m)\n    for i in range(m):\n       print(2**i,end=' ')\n    print()\n    for j in range(N):\n      print(W[j][::-1])\n  else:\n    for i in range(N):\n      XY[i][0]+=1\n    W=['']*N\n    for i in range(N):\n      for j in range(m):\n        if abs(XY[i][0])>=abs(XY[i][1]) and XY[i][0]>=0:\n          W[i]+='R'\n          XY[i][0]-=2**(m-j-1)\n        elif abs(XY[i][0])>=abs(XY[i][1]) and XY[i][0]<0:\n          W[i]+='L'\n          XY[i][0]+=2**(m-j-1)\n        elif abs(XY[i][0])<abs(XY[i][1]) and XY[i][1]>=0:\n          W[i]+='U'\n          XY[i][1]-=2**(m-j-1)\n        elif abs(XY[i][0])<abs(XY[i][1]) and XY[i][1]<0:\n          W[i]+='D'\n          XY[i][1]+=2**(m-j-1)\n    print(m+1)\n    print(1,end=' ')\n    for i in range(m):\n      print(2**i,end=' ')\n    print()\n    for j in range(N):\n      W[j]+='L'\n      print(W[j][::-1])", "N = int(input())\nXY = [list(map(int, input().split())) for _ in range(N)]\n\n\n#\u5408\u8a08\u304c\u5076\u6570or\u5947\u6570\u306e\u3069\u3061\u3089\u304b\u3060\u3051\u3057\u304b\u3067\u304d\u306a\u3044\nif N != 1:\n    a = abs(XY[0][0]) + abs(XY[0][1])\n    flag = (XY[0][0] + XY[0][1])%2\nfor i in range(N-1):\n    b = abs(XY[i+1][0]) + abs(XY[i+1][1])\n    a = max(a, b)\n    if flag != (XY[i+1][0] + XY[i+1][1])%2:\n        print((-1))\n        return\n\n#\u5fc5\u8981\u306a\u6841\u6570\u306e\u78ba\u8a8d\nm = 0\nwhile a > 1:\n    m += 1\n    a = a//2\n\n#\u8155\u306e\u9577\u3055\u3092\u6c42\u3081\u308b\nd = []\nfor i in range(m+3, -1, -1):\n    d += [2 ** i]\n\nif flag == 0: #\u5076\u6570\u306e\u5834\u5408\u4e00\u3064\u305a\u3089\u3059\u305f\u3081\u306e1\u3092\u52a0\u3048\u308b\n    print((len(d) + 1))\n    print((' '.join(map(str, [1] + d))))\nelse: #\u5947\u6570\u306e\u5834\u5408\u305d\u306e\u307e\u307e\u51fa\u529b\n    print((len(d)))\n    print((' '.join(map(str, d))))\n#\u3053\u3053\u307e\u3067\u3067\u3001\u8155\u306e\u9577\u3055\u304c\u6c7a\u5b9a\n#\u3053\u308c\u4ee5\u964d\u3067\u5404X, Y\u306b\u5bfe\u3059\u308b\u7b54\u3048\u3092\u898b\u3064\u3051\u308b\u3002\n\ndef string(X, Y): #\u3042\u308bXY\u306b\u5bfe\u3057\u3066\u52d5\u304b\u3057\u65b9\u3092\u8fd4\u3059\n    if (abs(X) + abs(Y))%2 == 0: #\u5076\u6570\u306e\u3068\u304d\n        ans = 'R'\n        x = X - 1\n        y = Y\n    else:\n        x, y = X, Y\n        ans = str()\n    for i in d:\n        if abs(x - i) + abs(y) < i:\n            ans += 'R'\n            x = x - i\n        elif abs(x + i) + abs(y) < i:\n            ans += 'L'\n            x = x + i\n        elif abs(x) + abs(y - i) < i:\n            ans += 'U'\n            y = y - i\n        elif abs(x) + abs(y + i) < i:\n            ans += 'D'\n            y = y + i\n    return ans\n\nfor i in XY:\n    print((string(i[0], i[1])))\n# print (string(XY[0][0], XY[0][1]))\n# print (string(XY[1][0], XY[1][1]))\n# print (string(XY[2][0], XY[2][1]))\n# print (string(XY[3][0], XY[3][1]))\n", "# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N, XY):\n    tmp = 0\n    for x, y in XY:\n        tmp += (abs(x) + abs(y)) % 2\n    if tmp % N != 0:\n        print(-1)\n        return\n    import math\n    m = math.ceil(math.log2(2 * 10 ** 9)) + 1\n    d = [2 ** (m - i) for i in range(m)] + [1]\n    d += [1] if tmp == 0 else []\n    m = len(d)\n    w = []\n    for xi, yi in XY:\n        xx = 0\n        yy = 0\n        W = ''\n        for di in d:\n            if abs(xi - xx) >= abs(yi - yy):\n                if xx <= xi:\n                    xx += di\n                    W += 'R'\n                else:\n                    xx -= di\n                    W += 'L'\n            else:\n                if yy <= yi:\n                    yy += di\n                    W += 'U'\n                else:\n                    yy -= di\n                    W += 'D'\n        w.append(W)\n    print(m)\n    print(' '.join([str(i) for i in d]))\n    [print(wi) for wi in w]\n\n\ndef __starting_point():\n    # S = input()\n    N = int(input())\n    # N, M = map(int, input().split())\n    # A = [int(i) for i in input().split()]\n    # B = [int(i) for i in input().split()]\n    XY = [[int(i) for i in input().split()] for _ in range(N)]\n    solve(N, XY)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n\n__starting_point()", "# -*- coding: utf-8 -*-\nimport math\n\n\ndef binary(n, m):\n    lst = []\n    while n != 0:\n        lst.append(n % 2)\n        n = n // 2\n    lst = lst + [0] * (m - len(lst))\n    return list(reversed(lst))\n\n\ndef calc(u, v, m):\n    result = \"\"\n    u_binary = binary(u, m)\n    v_binary = binary(v, m)\n    for i in range(m):\n        if u_binary[i] == 1 and v_binary[i] == 1:\n            result += \"R\"\n        elif u_binary[i] == 0 and v_binary[i] == 0:\n            result += \"L\"\n        elif u_binary[i] == 1 and v_binary[i] == 0:\n            result += \"U\"\n        else:\n            result += \"D\"\n    return result\n\n\nU = []\nV = []\nN = int(input())\neven, odd = 0, 0\nM = 0\nfor p in range(N):\n    x, y = list(map(int, input().split()))\n    u = x + y\n    v = x - y\n    U.append(u)\n    V.append(v)\n    M = max(M, abs(u), abs(v))\n    if (x + y) % 2 == 0:\n        even += 1\n    else:\n        odd += 1\n\nif even >= 1 and odd >= 1:\n    print((-1))\n\nelse:\n    m = math.floor(math.log2(M)) + 1 if M != 0 else 1\n    lst = [2 ** i for i in range(m-1, -1, -1)]\n    if odd == 0:\n        lst.append(1)\n    print((len(lst)))\n    print((\" \".join(map(str, lst))))\n    for u, v in zip(U, V):\n        u = (u + 2 ** m - 1) // 2\n        v = (v + 2 ** m - 1) // 2\n        print((calc(u, v, m)+\"R\" if odd == 0 else calc(u, v, m)))\n", "def main():\n    \"\"\"\n    \u30ed\u30dc\u30c3\u30c8\u30a2\u30fc\u30e0\n\n    \u8155\u3001\u95a2\u7bc0\n        arm_1, arm_2,...,arm_m\n    k_0,  k_1,   k_2,...,  k_m\n\n    k_i-1, arm_i, k_i\n    arm_i_length: d_i\n\n    mode: L, R, D, U\n\n        (x0, y0) = (0, 0)\n        L: (x_i, y_i) = (x_i-1 - d_i, y_i-1)\n        R: (x_i, y_i) = (x_i-1 + d_i, y_i-1)\n        U: (x_i, y_i) = (x_i-1,       y_i-1 - d_i)\n        D: (x_i, y_i) = (x_i-1,       y_i-1 + d_i)\n\n    input:\n            1 <= N  <= 10^3\n        -10^9 <= Xi <= 10^9\n        -10^9 <= Yi <= 10^9\n\n    output:\n        NG: -1\n        OK:\n\n        m\n        d1 d2 ... dm\n        w1\n        w2\n        ...\n        wN\n\n        1 <= m   <= 40\n        1 <= d_i <= 10^12\n        w_i: {L, R, U, D}, w_i_lenght = m\n\n    \u52d5\u304b\u3057\u65b9\u306e\u4f8b\u306f\u3001\u5165\u529b\u4f8b1\u53c2\u7167\n    \"\"\"\n    N = int(input())\n    X, Y = zip(*(\n        map(int, input().split())\n        for _ in range(N)\n    ))\n\n    # m, d, w = part_300(N, X, Y)\n    m, d, w = ref(N, X, Y)\n\n    if m == -1:\n        print(-1)\n    else:\n        print(m)\n        print(*d)\n        print(*w, sep=\"\\n\")\n\n\ndef ex1(N, X, Y):\n    m = 2\n    d = [1, 2]\n    w = [\"RL\", \"UU\", \"DR\"]\n    return m, d, w\n\n\ndef part_300(N, X, Y):\n    \"\"\"\n    1\u30641\u3064\u306e\u30af\u30a8\u30ea\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u306f\u72ec\u7acb\n    \u305f\u3060\u3057\u3001\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bfm, d \u306f\u5171\u901a\n\n    \u90e8\u5206\u70b9\u306f\u4ee5\u4e0b\u306e\u5236\u7d04\n       -10 <= i <= 10\n       -10 <= i <= 10\n\n    \u63a2\u7d22\u7bc4\u56f2\n        20 * 20\n        \u3053\u306e\u7bc4\u56f2\u306b\u304a\u3044\u3066m<=40\u3067\u5230\u9054\u3059\u308b\u305f\u3081\u306ed\n    d=1\u306e\u3068\u304d|X|+|Y|\u306e\u5076\u5947\n        \u63c3\u3063\u3066\u3044\u308b\u5834\u5408\u3001m\u306f\u6700\u5927\u306b\u5408\u308f\u305b\u308b\u3001\u4f59\u3063\u3066\u3044\u308b\u3068\u304d\u306fRL\u306e\u3088\u3046\u306b\u79fb\u52d5\u306a\u3057\u306b\u3067\u304d\u308b\n        \u63c3\u3063\u3066\u3044\u306a\u3044\u5834\u5408, d=1\u3067\u306f\u4e0d\u53ef\u80fd\uff1f\n        2\u30681\u304a\u3088\u3073LR,UD\u3092\u99c6\u4f7f\u3057\u3066-1\u3092\u518d\u73fe\u3057\u3066\u5076\u5947\u3092\u63c3\u3048\u308b?\n            \u7121\u7406\u3063\u307d\u3044: \u5947\u6570\u3057\u304b\u4f5c\u308c\u306a\u3044\n    \"\"\"\n    dists = []\n    for x, y in zip(X, Y):\n        dist = abs(x) + abs(y)\n        dists.append(dist)\n\n    m = -1\n    d = []\n    w = []\n    mod = list(map(lambda x: x % 2, dists))\n    if len(set(mod)) == 1:\n        m = max(dists)\n        d = [1] * m\n        for x, y, dist in zip(X, Y, dists):\n            x_dir = \"R\" if x > 0 else \"L\"\n            y_dir = \"U\" if y > 0 else \"D\"\n\n            _w = x_dir * abs(x) + y_dir * abs(y)\n            rest = m - len(_w)\n            if rest > 0:\n                _w += \"LR\" * (rest // 2)\n            w.append(_w)\n\n    return m, d, w\n\n\ndef editorial(N, X, Y):\n    \"\"\"\n    2\u51aa\u306e\u6570\u306e\u7d44\u5408\u305b\u306b\u3088\u308a\u3001\u3069\u306e\u70b9\u306b\u3067\u3082\u79fb\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\n        \u203b\u305f\u3060\u3057\u3001\u5947\u6570\u306e\u307f\u3002\u5076\u6570\u306b\u5bfe\u5fdc\u3055\u305b\u305f\u3044\u3068\u304d\u306f\uff11\u3067\u306e\u79fb\u52d5\u3092\u8ffd\u52a0\u3059\u308b\n\n      1,   2,   4,   8,\n    2^0, 2^1, 2^2, 2^3, ...\n\n    {1} \u3060\u3051\u3067\u306e\u79fb\u52d5\u3001\u539f\u70b9\u304b\u3089\u306e1\u306e\u8ddd\u96e2\u3002\u5f53\u305f\u308a\u524d\n    x: \u539f\u70b9\n            b\n    -------cxa------\n            d\n\n    {1, 2} \u3067\u306e\u79fb\u52d5\u3001\u539f\u70b9\u304b\u30891\u306e\u8ddd\u96e2\u304b\u30892\u79fb\u52d5\u3067\u304d\u308b\n    a-d \u3092\u57fa\u6e96\u306b\u8003\u3048\u308b\u3068\n        a-d \u3092a\u65b9\u5411\u306b2\u79fb\u52d5: a\u65b9\u5411\u306b\u83f1\u5f62\u306e\u79fb\u52d5\u7bc4\u56f2\u304c\u5897\u3048\u308b\n        a-d \u3092b\u65b9\u5411\u306b2\u79fb\u52d5: b\n        a-d \u3092c\u65b9\u5411\u306b2\u79fb\u52d5: c\n        a-d \u3092d\u65b9\u5411\u306b2\u79fb\u52d5: d\n            b\n           b b\n          c b a\n         c cxa a\n          c d a\n           d d\n            d\n\n    https://twitter.com/CuriousFairy315/status/1046073372315209728\n    https://twitter.com/schwarzahl/status/1046031849221316608\n    \u3069\u3046\u3057\u3066(u, v)=(x+y, x-y)\u7684\u306a\u5909\u63db\u3092\u65bd\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\uff1f\n        https://twitter.com/ILoveTw1tter/status/1046062363831660544\n        http://drken1215.hatenablog.com/entry/2018/09/30/002900\n             x \u5ea7\u6a19, y \u5ea7\u6a19\u4e21\u65b9\u9811\u5f35\u308d\u3046\u3068\u601d\u3046\u3068\u300160 \u500b\u304f\u3089\u3044\u6b32\u3057\u304f\u306a\u308b\u3002\u3067\u3001\u56f0\u3063\u3066\u3044\u305f\u3002\n\n         U\n         |\n    L----o----R\n         |\n         D\n\n    # TODO\n      U\uff3c        \uff0fR\n         \uff3c    \uff0f\n           \uff3c\uff0f\n           \uff0f \uff3c\n         \uff0f     \uff3c\n      L\uff0f         \uff3cD\n    \"\"\"\n    pass\n\n\ndef ref(N, X, Y):\n    dists = []\n    for x, y in zip(X, Y):\n        dist = (abs(x) + abs(y)) % 2\n        dists.append(dist)\n\n    m = -1\n    d = []\n    w = []\n    mod = set(map(lambda x: x % 2, dists))\n    if len(mod) != 1:\n        return m, d, w\n\n    for i in range(30, 0-1, -1):\n        d.append(1 << i)\n    if 0 in mod:\n        d.append(1)\n    m = len(d)\n\n    w1 = transform_xy(N, X, Y, d)\n    # w2 = no_transform_xy(N, X, Y, d)\n    # assert w1 == w2\n\n    return m, d, w1\n\n\ndef transform_xy(N, X, Y, d):\n    \"\"\"\n    http://kagamiz.hatenablog.com/entry/2014/12/21/213931\n    \"\"\"\n    # \u5909\u63db: \u03b8=45\u00b0, \u5206\u6bcd\u306f\u5171\u901a\u306e\u221a2 \u306a\u306e\u3067\u6255\u3063\u3066\u3057\u307e\u3046\u3068\u4e0b\u8a18\u306e\u5f0f\u306b\u306a\u308b\n    trans_x = []\n    trans_y = []\n    for x, y in zip(X, Y):\n        trans_x.append(x + y)\n        trans_y.append(x - y)\n\n    plot = False\n    if plot:\n        import matplotlib.pyplot as plt\n\n        plt.axhline(0, linestyle=\"--\")\n        plt.axvline(0, linestyle=\"--\")\n\n        # denominator: \u5206\u6bcd\n        deno = 2 ** 0.5\n        plt.scatter(X, Y, label=\"src\")\n        plt.scatter([x / deno for x in trans_x],\n                    [y / deno for y in trans_y],\n                    label=\"trans\")\n\n        for x, y, x_src, y_src in zip(trans_x, trans_y, X, Y):\n            plt.text(x_src, y_src, str((x_src, y_src)))\n            plt.text(x / deno, y / deno, str((x_src, y_src)))\n\n        plt.legend()\n        plt.show()\n\n    # print(*zip(X, Y))\n    # print(*zip(trans_x, trans_y))\n\n    w = []\n    dirs = {\n        # dir: x', y'\n        (-1, -1): \"L\",  # \u672c\u6765\u306e\u5ea7\u6a19(x, y): (-1,  0), \u5909\u63db\u5f8c: (-1+0, -1-0)\n        (+1, +1): \"R\",  # \u672c\u6765\u306e\u5ea7\u6a19(x, y): (+1,  0), \u5909\u63db\u5f8c: (+1+0, +1-0)\n        # \u611f\u899a\u3068\u9055\u3046\u306e\u306f\u3001\u5909\u63db\u306e\u4ed5\u65b9\n        (+1, -1): \"U\",  # \u672c\u6765\u306e\u5ea7\u6a19(x, y): ( 0, +1), \u5909\u63db\u5f8c: ( 0+1,  0-(-1))\n        (-1, +1): \"D\",  # \u672c\u6765\u306e\u5ea7\u6a19(x, y): ( 0, -1), \u5909\u63db\u5f8c: ( 0-1,  0-(+1))\n    }\n    for x, y in zip(trans_x, trans_y):\n        x_sum = 0\n        y_sum = 0\n        _w = \"\"\n        for _d in d:\n            # \u5909\u63db\u5f8c\u306e\u5ea7\u6a19\u3067x',y'\u3092\u72ec\u7acb\u306b\u6c42\u3081\u3066\u3044\u308b\n            if x_sum <= x:\n                x_dir = 1\n                x_sum += _d\n            else:\n                x_dir = -1\n                x_sum -= _d\n\n            if y_sum <= y:\n                y_dir = 1\n                y_sum += _d\n            else:\n                y_dir = -1\n                y_sum -= _d\n\n            _w += dirs[(x_dir, y_dir)]\n\n        w.append(_w)\n\n    return w\n\n\ndef no_transform_xy(N, X, Y, d):\n    w = []\n    for x, y in zip(X, Y):\n        x_sum, y_sum = 0, 0\n        _w = \"\"\n        for _d in d:\n            # \u5909\u5316\u91cf\u306e\u5927\u304d\u3044\u65b9\u3092\u512a\u5148\u3059\u308b\n            if abs(x_sum - x) >= abs(y_sum - y):\n                if x_sum >= x:\n                    x_sum -= _d\n                    _w += \"L\"\n                else:\n                    x_sum += _d\n                    _w += \"R\"\n            else:\n                if y_sum >= y:\n                    y_sum -= _d\n                    _w += \"D\"\n                else:\n                    y_sum += _d\n                    _w += \"U\"\n\n        w.append(_w)\n\n    return w\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nPoints = [list(map(int, input().split())) for i in range(N)]\n\nodd_or_even = set([(x + y) % 2 for x, y in Points])\nif len(odd_or_even) == 2:\n    print((-1))\n    return\n\n\nD = [2 ** i for i in range(39)]\nD = D[::-1]\nif 0 in odd_or_even:\n    D.append(1)\n\nprint((len(D)))\nprint((' '.join(map(str, D))))\noperation = {'R': (-1, 0), 'L': (1, 0), 'U': (0, -1), 'D': (0, 1)}  # \u53cd\u5bfe\u306b\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\nfor x, y in Points:\n    nx, ny = x, y\n    ans = ''\n    for d in D:\n        best_score = float('inf')\n        best_command = None\n        next_x, next_y = None, None\n\n        for command, move in list(operation.items()):\n            mx, my = move\n            tx, ty = nx + d * mx, ny + d * my\n            score = abs(tx) + abs(ty)\n            if score < best_score:\n                best_score = score\n                best_command = command\n                next_x, next_y = tx, ty\n\n        ans += best_command\n        nx, ny = next_x, next_y\n\n    print(ans)\n", "#!/usr/bin/env python3\n\ndef main():\n    N = int(input())\n    XY_list = []\n    for i in range(N):\n        XY_list.append(list(map(int, input().split())))\n\n    rot_list = list([[xy[0] + xy[1], -xy[0] + xy[1]] for xy in XY_list])\n\n    f = True\n    p = rot_list[0][0] % 2\n    for i in range(1, N):\n        if rot_list[i][0] % 2 != p:\n            f = False\n            break\n\n    if not f:\n        print((-1))\n    else:\n        offset = 2 ** 31 - p\n        m = 32 - p\n        d = []\n        if p == 0:\n            d.append(1)\n        for k in range(31):\n            d.append(2 ** k)\n        w = []\n        for i in range(N):\n            uv = rot_list[i]\n            u, v = uv[0] + offset, uv[1] + offset\n            s = ''\n            if p == 0:\n                s = 'D'\n            for k in range(31):\n                u //= 2\n                v //= 2\n                u1, v1 = u % 2, v % 2\n                if u1 == 0 and v1 == 0:\n                    s += 'D'\n                elif u1 == 0 and v1 == 1:\n                    s += 'L'\n                elif u1 == 1 and v1 == 0:\n                    s += 'R'\n                elif u1 == 1 and v1 == 1:\n                    s += 'U'\n            w.append(s)\n\n        print(m)\n        s = ''\n        for dv in d:\n            s += ' ' + str(dv)\n        print((s[1:]))\n        for i in range(N):\n            print((w[i]))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import sys\n\nN = int(input())\nXY = [[int(_) for _ in input().split()] for i in range(N)]\n\nmc = [0, 0]\nmaxl = 0\n\nfor x, y in XY:\n    l = abs(x) + abs(y)\n    maxl = max(maxl, l)\n    mc[l % 2] += 1\n\nif mc[0] > 0 and mc[1] > 0:\n    print((-1))\n    return\n\ndef calc(sx, sy, ex, ey, d):\n    dx, dy = ex - sx, ey - sy\n    if dx > dy:\n        if dx > -dy:\n            return \"R\", sx + d, sy\n        else:\n            return \"D\", sx, sy - d\n    else:\n        if dx > -dy:\n            return \"U\", sx, sy + d\n        else:\n            return \"L\", sx - d, sy\n\nimport math\n\nl = math.ceil(math.log(maxl + 1, 2))\n\nms = [1 << i for i in range(l)][::-1]\n\nrms = ms\n\nif mc[0] > 0:\n    rms = [1] + ms\n\nprint((len(rms)))\nprint((*rms))\n\nfor ex, ey in XY:\n    x, y = 0, 0\n    w = \"\"\n    if mc[0] > 0:\n        w = \"R\"\n        x += 1\n    for m in ms:\n        d, x, y = calc(x, y, ex, ey, m)\n        w += d\n    print(w)\n\n", "N=int(input())\nxy=[list(map(int,input().split())) for _ in range(N)]\n\ndef parity():\n  res=sum(xy[0])%2\n  for x,y in xy:\n    if (x+y)%2!=res:\n      return -1\n  return res\n \np=parity()\nif p==-1:\n  print(-1)\n  return\n\ndd=[1]\nif p==0:dd.append(1)\nlim=10**12\nwhile len(dd)<40 and dd[-1]*2<=lim:\n    dd.append(dd[-1]*2)\nprint(40)\nprint(*dd)\n \nfor x,y in xy:\n  ans=\"\"\n  for d in dd[::-1]:\n    if abs(x)>abs(y):\n      if x>0:\n        x-=d\n        ans+=\"R\"\n      else:\n        x+=d\n        ans+=\"L\"\n    else:\n      if y>0:\n        y-=d\n        ans+=\"U\"\n      else:\n        y+=d\n        ans+=\"D\"\n  print(ans[::-1])", "#19:32\nn = int(input())\nraw = []\neo = []\nh = 30\nfor _ in range(n):\n  x,y = map(int,input().split())\n  raw.append([x,y])\n  eo.append((x+y)%2)\nif sum(eo) == 0:\n  print(h+2)\n  d = [2**(h-i) for i in range(h+1)]\n  d.append(1)\n  print(' '.join(map(str,d)))\nelif sum(eo) == n:\n  print(h+1)\n  d = [2**(h-i) for i in range(h+1)]\n  print(' '.join(map(str,d)))\nelse:\n  print(-1)\n  return\nfor xy in raw:\n  x,y = xy\n  scale = 2 ** h\n  ans = ''\n  while scale != 0:\n    tmp = [[0,0,'U'],[0,1,'D'],[0,2,'R'],[0,3,'L']]\n    tmp[0][0] =   x   ** 2 + (y-1) ** 2\n    tmp[1][0] =   x   ** 2 + (y+1) ** 2\n    tmp[2][0] = (x-1) ** 2 +   y   ** 2\n    tmp[3][0] = (x+1) ** 2 +   y   ** 2\n    d,dr = min(tmp)[1],min(tmp)[2]\n    ans += dr\n    if d == 0:\n      y -= scale\n    elif d == 1:\n      y += scale\n    elif d == 2:\n      x -= scale\n    else:\n      x += scale\n    scale //= 2\n  if x+y != 0:\n    if y == 1:\n      ans += 'U'\n    elif y == -1:\n      ans += 'D'\n    elif x == 1:\n      ans += 'R'\n    else:\n      ans += 'L'\n  print(ans)", "\ndef get_check(num, place):\n    dist = abs(place[0][0]) + abs(place[0][1])\n    check_flg = dist\n\n    for i in range(num - 1):\n        dist_now = abs(place[i + 1][0]) + abs(place[i + 1][1])\n        if dist % 2 != dist_now % 2:\n            check_flg = 0\n            break\n        if check_flg < dist_now:\n            check_flg = dist_now\n    return check_flg\n\ndef start_process(num, place):\n\n    check_flg = get_check(num, place)\n    if check_flg:\n\n        seeds = [2 ** (31 - i) for i in range(32)]\n        if check_flg % 2 == 0:\n            seeds.append(1)\n        print(len(seeds))\n        print(' '.join(map(str, seeds)))\n\n        for x, y in place:\n            for k in seeds:\n                if abs(x) > abs(y):\n                    if x > 0:\n                        res = 'R'\n                        x -= k\n                    else:\n                        res = 'L'\n                        x += k\n                else:\n                    if y > 0:\n                        res = 'U'\n                        y -= k\n                    else:\n                        res = 'D'\n                        y += k\n                print(res, end='')\n            print('')\n\n\n    else:\n        print(-1)\n\n\ndef main():\n    num = int(input())\n    place = [list(map(int, input().split())) for i in range(num)]\n    start_process(num, place)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# -*- coding: utf-8 -*-\nimport math\n\n\ndef binary(n):\n    lst = []\n    while n != 0:\n        lst.append(n % 2)\n        n = n // 2\n    lst = lst + [0] * (31 - len(lst))\n    return list(reversed(lst))\n\n\ndef calc(u, v):\n    result = \"\"\n    u_binary = binary(u)\n    v_binary = binary(v)\n    for i in range(31):\n        if u_binary[i] == 1 and v_binary[i] == 1:\n            result += \"R\"\n        elif u_binary[i] == 0 and v_binary[i] == 0:\n            result += \"L\"\n        elif u_binary[i] == 1 and v_binary[i] == 0:\n            result += \"U\"\n        else:\n            result += \"D\"\n    return result\n\n\nU = []\nV = []\nN = int(input())\neven, odd = 0, 0\n\nfor p in range(N):\n    x, y = list(map(int, input().split()))\n    U.append(x+y)\n    V.append(x-y)\n    if (x + y) % 2 == 0:\n        even += 1\n    else:\n        odd += 1\n\nif even >= 1 and odd >= 1:\n    print((-1))\n\nelse:\n    lst = [2 ** i for i in range(30, -1, -1)]\n    if odd == 0:\n        lst.append(1)\n    print((len(lst)))\n    print((\" \".join(map(str, lst))))\n    for u, v in zip(U, V):\n        u = (u + 2 ** 31 - 1) // 2\n        v = (v + 2 ** 31 - 1) // 2\n        print((calc(u, v)+\"R\" if odd == 0 else calc(u, v)))\n", "n = int(input())\np,d = [],[]\nfor _ in range(n):\n\tx,y = (int(i) for i in input().split())\n\tp.append((x,y))\na = sum(p[0])%2\ndef f(i,j):\n\ts,s2,ans = bin((i+j+2**31-1)//2)[::-1][:-2],bin((i-j+2**31-1)//2)[::-1][:-2],\"\"\n\ts,s2 = s+(31-len(s))*\"0\",s2+(31-len(s2))*\"0\"\n\tfor i in range(31):\n\t\tif s[i]==s2[i]==\"0\": ans+=\"L\"\n\t\telif s[i]==s2[i]==\"1\": ans+=\"R\"\n\t\telif int(s[i]): ans+=\"U\"\n\t\telse: ans+=\"D\"\n\treturn ans\nif any(a!=sum(p[i])%2 for i in range(n)): print(-1)\nelse:\n\tif a-1: d.append(\"1\")\n\tprint(32-a)\n\tfor i in range(31): d.append(str(2**i))\n\tprint(\" \".join(d))\n\tif a:\n\t\tfor i,j in p: print(f(i,j))\n\telse:\n\t\tfor i,j in p: print(\"R\"+f(i-1,j))", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef parity():\n    res=sum(xy[0])%2\n    for x,y in xy:\n        if (x+y)%2!=res:return -1\n    return res\n\nn=II()\nxy=LLI(n)\n\np=parity()\nif p==-1:\n    print(-1)\n    return\n\ndd=[1]\nif p==0:dd.append(1)\nlim=10**12\nwhile len(dd)<40 and dd[-1]*2<=lim:\n    dd.append(dd[-1]*2)\nprint(40)\nprint(*dd)\n\nfor x,y in xy:\n    ans=\"\"\n    for d in dd[::-1]:\n        if abs(x)>abs(y):\n            if x>0:\n                x-=d\n                ans+=\"R\"\n            else:\n                x+=d\n                ans+=\"L\"\n        else:\n            if y>0:\n                y-=d\n                ans+=\"U\"\n            else:\n                y+=d\n                ans+=\"D\"\n    print(ans[::-1])\n", "N = int(input())\nS = [0] * N\nX = [0] * N\nY = [0] * N\nfor i in range(N):\n    X[i], Y[i] = map(int, input().split())\n    S[i] = X[i] + Y[i]\n    #\u5076\u5947\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\n    if (S[i] - S[0]) % 2 != 0:\n        print(-1)\n        return\n\nnums = []\nfor i in range(30, -1, -1):\n    #2\u306e\u51aa\u4e57\u3092\u751f\u6210\n    nums.append(1 << i)\n\n#\u5076\u6570\u3067\u4e00\u81f4\u3057\u3066\u3044\u308b\u6642\u30011\u3092\u52a0\u3048\u3066\u5076\u6570\u9593\u3092\u79fb\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\nif S[0] % 2 == 0:\n    nums.append(1)\n\nm = len(nums)\n\nprint(m)\nprint(*nums)\n\nfor i in range(N):\n    u = X[i] + Y[i]\n    v = X[i] - Y[i]\n    #\u8caa\u6b32\u306b\u8db3\u3057\u5f15\u304d\u3092\u3057\u3066\u3044\u304f\u3068u, v\u3078\u306e\u79fb\u52d5\u304c\u5b8c\u4e86\u3059\u308b\n    for num in nums:\n        if u >= 0:\n            if v >= 0:\n                print('R',end='')\n                u -= num\n                v -= num\n            else:\n                print('U',end='')\n                u -= num\n                v += num\n        else:\n            if v >= 0:\n                print('D',end='')\n                u += num\n                v -= num\n            else:\n                print('L',end='')\n                u += num\n                v += num\n    print()\n\nprint()\n", "from functools import reduce\nimport math\n\nn = int(input())\ncoord = [tuple(map(int, input().split())) for i in range(n)]\n\n# parity check and get max\nx, y = coord[0]\np = (x + y) & 1\nlimit = 0\nfor x, y in coord:\n    if p != (x + y) & 1:\n        print(-1)\n        return\n    lim = abs(x) + abs(y)\n    if lim > limit:\n        limit = lim\n\nlimit = round(math.log2(limit))\nif p == 1:\n    d = [2 ** i for i in reversed(range(limit + 1))]\nelse:\n    d = [1] + [2 ** i for i in reversed(range(limit + 1))]\n\nprint(len(d))\nprint(reduce((lambda acc, dist: str(acc) + \" \" + str(dist)), d))\n\nfor x, y in coord:\n    u = x + y\n    v = x - y\n\n    command = \"\"\n    for i in range(len(d)):\n        if u >= 0 and v >= 0:\n            command += \"R\"\n            u -= d[i]\n            v -= d[i]\n        elif u >= 0 > v:\n            command += \"U\"\n            u -= d[i]\n            v += d[i]\n        elif u < 0 <= v:\n            command += \"D\"\n            u += d[i]\n            v -= d[i]\n        elif u < 0 and v < 0:\n            command += \"L\"\n            u += d[i]\n            v += d[i]\n\n    print(command)", "n = int(input())\n\nP = []\nM = []\nfor _ in range(n):\n  x, y = map(int, input().split())\n  P.append((x, y))\n  M.append((x + y) % 2)\n\nif len(set(M)) == 2:\n  print(-1)\n  return\n\nD = [1 << i for i in range(31, -1, -1)]\nif M[0] == 0:\n  D.append(1)\n\nprint(len(D))\nprint(*D, sep=' ')\n\nfor x, y in P:\n  a = []\n  for d in D:\n    if abs(x) > abs(y):\n      if x < 0:\n        a.append('L')\n        x += d\n      else:\n        a.append('R')\n        x -= d\n    else:\n      if y < 0:\n        a.append('D')\n        y += d\n      else:\n        a.append('U')\n        y -= d\n  print(*a, sep='')", "def main():\n    \"\"\"\n    \u30ed\u30dc\u30c3\u30c8\u30a2\u30fc\u30e0\n\n    \u8155\u3001\u95a2\u7bc0\n        arm_1, arm_2,...,arm_m\n    k_0,  k_1,   k_2,...,  k_m\n\n    k_i-1, arm_i, k_i\n    arm_i_length: d_i\n\n    mode: L, R, D, U\n\n        (x0, y0) = (0, 0)\n        L: (x_i, y_i) = (x_i-1 - d_i, y_i-1)\n        R: (x_i, y_i) = (x_i-1 + d_i, y_i-1)\n        U: (x_i, y_i) = (x_i-1,       y_i-1 - d_i)\n        D: (x_i, y_i) = (x_i-1,       y_i-1 + d_i)\n\n    input:\n            1 <= N  <= 10^3\n        -10^9 <= Xi <= 10^9\n        -10^9 <= Yi <= 10^9\n\n    output:\n        NG: -1\n        OK:\n\n        m\n        d1 d2 ... dm\n        w1\n        w2\n        ...\n        wN\n\n        1 <= m   <= 40\n        1 <= d_i <= 10^12\n        w_i: {L, R, U, D}, w_i_lenght = m\n\n    \u52d5\u304b\u3057\u65b9\u306e\u4f8b\u306f\u3001\u5165\u529b\u4f8b1\u53c2\u7167\n    \"\"\"\n    N = int(input())\n    X, Y = zip(*(\n        map(int, input().split())\n        for _ in range(N)\n    ))\n\n    # m, d, w = part_300(N, X, Y)\n    m, d, w = ref(N, X, Y)\n\n    if m == -1:\n        print(-1)\n    else:\n        print(m)\n        print(*d)\n        print(*w, sep=\"\\n\")\n\n\ndef ex1(N, X, Y):\n    m = 2\n    d = [1, 2]\n    w = [\"RL\", \"UU\", \"DR\"]\n    return m, d, w\n\n\ndef part_300(N, X, Y):\n    \"\"\"\n    1\u30641\u3064\u306e\u30af\u30a8\u30ea\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u306f\u72ec\u7acb\n    \u305f\u3060\u3057\u3001\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bfm, d \u306f\u5171\u901a\n\n    \u90e8\u5206\u70b9\u306f\u4ee5\u4e0b\u306e\u5236\u7d04\n       -10 <= i <= 10\n       -10 <= i <= 10\n\n    \u63a2\u7d22\u7bc4\u56f2\n        20 * 20\n        \u3053\u306e\u7bc4\u56f2\u306b\u304a\u3044\u3066m<=40\u3067\u5230\u9054\u3059\u308b\u305f\u3081\u306ed\n    d=1\u306e\u3068\u304d|X|+|Y|\u306e\u5076\u5947\n        \u63c3\u3063\u3066\u3044\u308b\u5834\u5408\u3001m\u306f\u6700\u5927\u306b\u5408\u308f\u305b\u308b\u3001\u4f59\u3063\u3066\u3044\u308b\u3068\u304d\u306fRL\u306e\u3088\u3046\u306b\u79fb\u52d5\u306a\u3057\u306b\u3067\u304d\u308b\n        \u63c3\u3063\u3066\u3044\u306a\u3044\u5834\u5408, d=1\u3067\u306f\u4e0d\u53ef\u80fd\uff1f\n        2\u30681\u304a\u3088\u3073LR,UD\u3092\u99c6\u4f7f\u3057\u3066-1\u3092\u518d\u73fe\u3057\u3066\u5076\u5947\u3092\u63c3\u3048\u308b?\n            \u7121\u7406\u3063\u307d\u3044: \u5947\u6570\u3057\u304b\u4f5c\u308c\u306a\u3044\n    \"\"\"\n    dists = []\n    for x, y in zip(X, Y):\n        dist = abs(x) + abs(y)\n        dists.append(dist)\n\n    m = -1\n    d = []\n    w = []\n    mod = list(map(lambda x: x % 2, dists))\n    if len(set(mod)) == 1:\n        m = max(dists)\n        d = [1] * m\n        for x, y, dist in zip(X, Y, dists):\n            x_dir = \"R\" if x > 0 else \"L\"\n            y_dir = \"U\" if y > 0 else \"D\"\n\n            _w = x_dir * abs(x) + y_dir * abs(y)\n            rest = m - len(_w)\n            if rest > 0:\n                _w += \"LR\" * (rest // 2)\n            w.append(_w)\n\n    return m, d, w\n\n\ndef editorial(N, X, Y):\n    \"\"\"\n    2\u51aa\u306e\u6570\u306e\u7d44\u5408\u305b\u306b\u3088\u308a\u3001\u3069\u306e\u70b9\u306b\u3067\u3082\u79fb\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\n        \u203b\u305f\u3060\u3057\u3001\u5947\u6570\u306e\u307f\u3002\u5076\u6570\u306b\u5bfe\u5fdc\u3055\u305b\u305f\u3044\u3068\u304d\u306f\uff11\u3067\u306e\u79fb\u52d5\u3092\u8ffd\u52a0\u3059\u308b\n\n      1,   2,   4,   8,\n    2^0, 2^1, 2^2, 2^3, ...\n\n    {1} \u3060\u3051\u3067\u306e\u79fb\u52d5\u3001\u539f\u70b9\u304b\u3089\u306e1\u306e\u8ddd\u96e2\u3002\u5f53\u305f\u308a\u524d\n    x: \u539f\u70b9\n            b\n    -------cxa------\n            d\n\n    {1, 2} \u3067\u306e\u79fb\u52d5\u3001\u539f\u70b9\u304b\u30891\u306e\u8ddd\u96e2\u304b\u30892\u79fb\u52d5\u3067\u304d\u308b\n    a-d \u3092\u57fa\u6e96\u306b\u8003\u3048\u308b\u3068\n        a-d \u3092a\u65b9\u5411\u306b2\u79fb\u52d5: a\u65b9\u5411\u306b\u83f1\u5f62\u306e\u79fb\u52d5\u7bc4\u56f2\u304c\u5897\u3048\u308b\n        a-d \u3092b\u65b9\u5411\u306b2\u79fb\u52d5: b\n        a-d \u3092c\u65b9\u5411\u306b2\u79fb\u52d5: c\n        a-d \u3092d\u65b9\u5411\u306b2\u79fb\u52d5: d\n            b\n           b b\n          c b a\n         c cxa a\n          c d a\n           d d\n            d\n\n    https://twitter.com/CuriousFairy315/status/1046073372315209728\n    https://twitter.com/schwarzahl/status/1046031849221316608\n    \u3069\u3046\u3057\u3066(u, v)=(x+y, x-y)\u7684\u306a\u5909\u63db\u3092\u65bd\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\uff1f\n        https://twitter.com/ILoveTw1tter/status/1046062363831660544\n        http://drken1215.hatenablog.com/entry/2018/09/30/002900\n             x \u5ea7\u6a19, y \u5ea7\u6a19\u4e21\u65b9\u9811\u5f35\u308d\u3046\u3068\u601d\u3046\u3068\u300160 \u500b\u304f\u3089\u3044\u6b32\u3057\u304f\u306a\u308b\u3002\u3067\u3001\u56f0\u3063\u3066\u3044\u305f\u3002\n\n\n         U\n         |\n    L----o----R\n         |\n         D\n\n      U\uff3c        \uff0fR\n         \uff3c    \uff0f\n           \uff3c\uff0f\n           \uff0f \uff3c\n         \uff0f     \uff3c\n      L\uff0f         \uff3cD\n    \"\"\"\n    pass\n\n\ndef ref(N, X, Y):\n    dists = []\n    for x, y in zip(X, Y):\n        dist = (abs(x) + abs(y)) % 2\n        dists.append(dist)\n\n    m = -1\n    d = []\n    w = []\n    mod = set(map(lambda x: x % 2, dists))\n    if len(mod) != 1:\n        return m, d, w\n\n    for i in range(30, 0-1, -1):\n        d.append(1 << i)\n    if 0 in mod:\n        d.append(1)\n    m = len(d)\n\n    # w = transform_xy(N, X, Y, d)\n    w = no_transform_xy(N, X, Y, d)\n    # print(w)\n\n    return m, d, w\n\n\ndef transform_xy(N, X, Y, d):\n    w = []\n    dirs = {\n        # dir: x', y'\n        (-1, -1): \"L\",  # \u672c\u6765\u306e\u5ea7\u6a19(x, y): (-1,  0)\n        (+1, +1): \"R\",  # \u672c\u6765\u306e\u5ea7\u6a19(x, y): (+1,  0)\n        (+1, -1): \"U\",  # \u672c\u6765\u306e\u5ea7\u6a19(x, y): ( 0, +1)\n        (-1, +1): \"D\",  # \u672c\u6765\u306e\u5ea7\u6a19(x, y): ( 0, -1)\n    }\n    for x, y in zip(X, Y):\n        x_sum = 0\n        y_sum = 0\n        _w = \"\"\n        for _d in d:\n            # \u5909\u63db\u5f8c\u306e\u5ea7\u6a19\u3067x',y'\u3092\u72ec\u7acb\u306b\u6c42\u3081\u3066\u3044\u308b?\n            if x_sum <= x:\n                x_dir = 1\n                x_sum += _d\n            else:\n                x_dir = -1\n                x_sum -= _d\n\n            if y_sum <= y:\n                y_dir = 1\n                y_sum += _d\n            else:\n                y_dir = -1\n                y_sum -= _d\n\n            _w += dirs[(x_dir, y_dir)]\n\n        w.append(_w)\n\n    return w\n\n\ndef no_transform_xy(N, X, Y, d):\n    w = []\n    for xt, yt in zip(X, Y):\n        x, y = 0, 0\n        _w = \"\"\n        for _d in d:\n            if abs(x - xt) >= abs(y - yt):\n                if x >= xt:\n                    x -= _d\n                    _w += \"L\"\n                else:\n                    x += _d\n                    _w += \"R\"\n            else:\n                if y >= yt:\n                    y -= _d\n                    _w += \"D\"\n                else:\n                    y += _d\n                    _w += \"U\"\n\n        w.append(_w)\n\n    return w\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\nxy=[list(map(int,input().split())) for _ in range(n)]\nm=39\nans=[]\nif sum(xy[0])%2==0:ans.append(1)\nfor i in range(m):\n    ans.append(2**i)\nc=sum(xy[0])%2\nfor x,y in xy:\n    if (x+y)%2!=c:print(-1);return()\nprint(len(ans))\nprint(*ans[::-1])\ndef chk(s):\n    a=[]\n    for d in ans[::-1]:\n        if abs(s-d)<abs(s+d):\n            a.append(-1)\n            s-=d\n        else:\n            a.append(1)\n            s+=d\n    return a\nxpy,xmy=[],[]\nfor x,y in xy:\n    xpy=chk(x+y)\n    xmy=chk(x-y)\n    s=[]\n    for p,m in zip(xpy,xmy):\n        if p==1 and m==1:s.append('L')\n        if p==-1 and m==-1:s.append('R')\n        if p==1 and m==-1:s.append('D')\n        if p==-1 and m==1:s.append('U')\n    print(*s,sep='')", "import sys\n\nN = int(input())\nXY = [[int(_) for _ in input().split()] for i in range(N)]\n\nmc = [0, 0]\nmaxl = 0\n\nfor x, y in XY:\n    l = abs(x) + abs(y)\n    maxl = max(maxl, l)\n    mc[l % 2] += 1\n\nif mc[0] > 0 and mc[1] > 0:\n    print((-1))\n    return\n\n#print(maxl)\n\ndef calc(sx, sy, ex, ey, d):\n    dx, dy = ex - sx, ey - sy\n    rx, ry = dx - dy, dx + dy\n    if rx > 0:\n        if ry > 0:\n            d, x, y = \"R\", sx + d, sy\n        else:\n            d, x, y = \"D\", sx, sy - d\n    else:\n        if ry > 0:\n            d, x, y = \"U\", sx, sy + d\n        else:\n            d, x, y = \"L\", sx - d, sy\n    return d, x, y\n\nimport math\n\nl = math.ceil(math.log(maxl + 1, 2))\n\nms = [2 ** (l - i - 1) for i in range(l)]\n\nrms = ms\n\nif mc[0] > 0:\n    rms = [1] + ms\n\nprint((len(rms)))\nprint((*rms))\n\nfor ex, ey in XY:\n    x, y = 0, 0\n    w = \"\"\n    if mc[0] > 0:\n        w = \"R\"\n        x += 1\n    for m in ms:\n        d, x, y = calc(x, y, ex, ey, m)\n        w += d\n    print(w)\n\n", "###############################################################################\n\nfrom sys import stdout\nfrom bisect import bisect_left as binl\nfrom copy import copy, deepcopy\n\ndef intin():\n    input_tuple = input().split()\n    if len(input_tuple) <= 1:\n        return int(input_tuple[0])\n    return tuple(map(int, input_tuple))\n\n\ndef intina():\n    return [int(i) for i in input().split()]\n\n\ndef intinl(count):\n    return [intin() for _ in range(count)]\n\n\ndef modadd(x, y):\n    nonlocal mod\n    return (x + y) % mod\n\n\ndef modmlt(x, y):\n    nonlocal mod\n    return (x * y) % mod\n\n\ndef lcm(x, y):\n    while y != 0:\n        z = x % y\n        x = y\n        y = z\n    return x\n\n\ndef get_divisors(x):\n    retlist = []\n    for i in range(1, int(x**0.5) + 3):\n        if x % i == 0:\n            retlist.append(i)\n            retlist.append(x // i)\n    return retlist\n\n\ndef make_linklist(xylist):\n    linklist = {}\n    for a, b in xylist:\n        linklist.setdefault(a, [])\n        linklist.setdefault(b, [])\n        linklist[a].append(b)\n        linklist[b].append(a)\n    return linklist\n\n\ndef calc_longest_distance(linklist, v=1):\n    distance_list = {}\n    distance_count = 0\n    distance = 0\n    vlist_previous = []\n    vlist = [v]\n    nodecount = len(linklist)\n\n    while distance_count < nodecount:\n        vlist_next = []\n        for v in vlist:\n            distance_list[v] = distance\n            distance_count += 1\n            vlist_next.extend(linklist[v])\n        distance += 1\n        vlist_to_del = vlist_previous\n        vlist_previous = vlist\n        vlist = list(set(vlist_next) - set(vlist_to_del))\n\n    max_distance = -1\n    max_v = None\n    for v, distance in list(distance_list.items()):\n        if distance > max_distance:\n            max_distance = distance\n            max_v = v\n\n    return (max_distance, max_v)\n\n\ndef calc_tree_diameter(linklist, v=1):\n    _, u = calc_longest_distance(linklist, v)\n    distance, _ = calc_longest_distance(linklist, u)\n    return distance\n\n\n###############################################################################\n\n\ndef main():\n    n = intin()\n    xylist = intinl(n)\n\n    even_odd = None\n    uvlist = []\n\n    for x, y in xylist:\n        tmp_even_odd = (x + y) % 2\n\n        if even_odd is None:\n            even_odd = tmp_even_odd\n\n        if even_odd != tmp_even_odd:\n            print((-1))\n            return\n\n        uvlist.append((x + y, x - y))\n\n    m = 33 if even_odd else 34\n\n    print(m)\n    dlist = [str(2**i) for i in reversed(list(range(0, 33)))]\n    if not even_odd:\n        dlist.append('1')\n    print((' '.join(dlist)))\n\n    for u, v in uvlist:\n\n        if not even_odd:\n            u += 1\n            v += 1\n        line = ''\n\n        if u >= 0 and v >= 0:\n            line += 'R'\n        if u >= 0 and v < 0:\n            line += 'U'\n        if u < 0 and v >= 0:\n            line += 'D'\n        if u < 0 and v < 0:\n            line += 'L'\n\n        for i in reversed(list(range(1, 33))):\n            u_bit = (u >> i) & 1\n            v_bit = (v >> i) & 1\n            if u_bit and v_bit:\n                line += 'R'\n            if u_bit and not v_bit:\n                line += 'U'\n            if not u_bit and v_bit:\n                line += 'D'\n            if not u_bit and not v_bit:\n                line += 'L'\n\n        if not even_odd:\n            line += 'L'\n\n        print(line)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nPoint = [list(map(int, input().split())) for i in range(N)]\n\n\n# \u5404\u70b9\u306e\u539f\u70b9\u304b\u3089\u306e\u30de\u30f3\u30cf\u30c3\u30bf\u30f3\u8ddd\u96e2\u306e\u5076\u5947\u306f\u4e00\u81f4\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\nif len(set([(abs(x) + abs(y)) % 2 for x, y in Point])) == 2:\n    print((-1))\n    return\n\n\n# 2\u3079\u304d\u306e\u8155\u3092\u69cb\u6210\nArms = [2 ** i for i in reversed(list(range(39)))]\n\n# \u5076\u6570\u306b\u5408\u308f\u305b\u305f\u3044\u5834\u5408\u306f\u9577\u30551\u306e\u8155\u3092\u8ffd\u52a0\nif (abs(Point[0][0]) + abs(Point[0][1])) % 2 == 0:\n    Arms.append(1)\n\n\n# Arm\u90e8\u306e\u7b54\u3048\u3092\u51fa\u529b\nprint((len(Arms)))\nprint((' '.join(map(str, Arms))))\n\n\n# \u5404\u70b9\u306b\u5230\u9054\u3059\u308b\u305f\u3081\u306e\u8155\u306e\u6c7a\u3081\u308b\nfor x, y in Point:\n    ans = ''\n    for length in Arms:\n        min_diff, tmp_s = float('inf'), ''\n        next_x, next_y = None, None\n        for order, dx, dy in (('L', 1, 0), ('R', -1, 0), ('D', 0, 1), ('U', 0, -1)):\n            tmp_x, tmp_y = (x + length * dx), (y + length * dy)\n            diff = abs(tmp_x) + abs(tmp_y)\n\n            if diff < min_diff:\n                min_diff = diff\n                tmp_s = order\n                next_x, next_y = tmp_x, tmp_y\n\n        ans += tmp_s\n        x, y = next_x, next_y\n    print(ans)\n", "import sys\n\nn = int(sys.stdin.readline().rstrip())\nxy = list(zip(*[map(int, sys.stdin.read().split())] * 2))\n\nmask = (1 << 31) - 1\ndef solve(x, y, mode):\n    u = x + y\n    v = x - y\n    if mode == 0:\n        u -= 1\n        v -= 1\n\n    s = (u + mask) >> 1\n    t = (v + mask) >> 1\n\n    l = (~(s | t)) & mask\n    r = s & t & mask\n    d = (~s) & t & mask\n    u = s & (~t) & mask\n\n    res = ''\n    for i in range(31):\n        if l >> i & 1:\n            res += 'L'\n        elif r >> i & 1:\n            res += 'R'\n        elif d >> i & 1:\n            res += 'D'\n        elif u >> i & 1:\n            res += 'U'\n    if mode == 0:\n        res += 'R'\n    \n    return [res]\n\ndef main():\n    oe = (xy[0][0] + xy[0][1]) % 2\n    for x, y in xy:\n        if (x + y) % 2 != oe:\n            print(-1)\n            return\n\n    m = 31\n    d = [2 ** i for i in range(31)]\n    if oe == 0:\n        d += [1]\n        m += 1\n    yield [m]\n    yield d\n\n    for x, y in xy:\n        yield solve(x, y, oe)\n\ndef __starting_point():\n    ans = main()\n    for i in ans:\n        print(*i, sep=' ')\n__starting_point()", "import copy\nN = int(input())\nX = []\nX.append(list(map(int, input().split())))\n#Y = []\nT = (X[0][0] + X[0][1]) % 2\nmax = abs(X[0][0]) + abs(X[0][1])\nfor i in range(1,N):\n  X.append(list(map(int, input().split())))\n  t = abs(X[i][0]) + abs(X[i][1])\n  if t % 2 != T:\n    print(-1)\n    return\n  if max < t:\n    max = t\n    \n# \u5947\u6570: D =    1, 2, 4, 8...\n# \u5076\u6570: D = 1, 1, 2, 4, 8...\n# sum(D) > max\nD = []\nsum = 0\nif T == 0:\n  max -= 1\nt = 1\nwhile 1:\n  D.append(t)\n  sum += t\n  if sum >= max:\n    break\n  t *= 2\nif T == 0:\n  D.append(1)\nD.reverse()\n\n# m\nprint(len(D))\n# d1, d2, ... dm\ns = \"\"\nfor i in range(len(D)):\n  s += str(D[i]) + \" \"\nprint (s)\n\n# w1, w2, ... wm\nfor i in range(N):\n  U = X[i][0] + X[i][1]\n  V = X[i][0] - X[i][1]\n  s = \"\"\n  for j in range(len(D)):\n    if U >= 0:\n      if V >= 0:\n        s += \"R\"\n        U -= D[j]\n        V -= D[j]\n      else:\n        s += \"U\"\n        U -= D[j]\n        V += D[j]\n    else:\n      if V >= 0:\n        s += \"D\"\n        U += D[j]\n        V -= D[j]\n      else:\n        s += \"L\"\n        U += D[j]\n        V += D[j]\n  print(s)", "def solve(x, y, d, m):\n    ret = \"\"\n    dx = [-1, 0, 0, 1]\n    dy = [0, -1, 1, 0]\n    mode = ['R', 'U', 'D', 'L']\n    for i in range(m):\n        dir = 0\n        t = abs(x + d[i] * dx[0]) + abs(y + d[i] * dy[0])\n        for j in range(4):\n            nx = x + d[i] * dx[j]\n            ny = y + d[i] * dy[j]\n            if abs(nx) + abs(ny) < t:\n                t = abs(nx) + abs(ny)\n                dir = j\n        x = x + d[i] * dx[dir]\n        y = y + d[i] * dy[dir]\n        ret += mode[dir]\n\n    print (ret)\n\n\ndef main():\n    m = 34\n    X, Y, d = [], [], []\n\n    for i in range(32, 0, -1):\n        d += [2**i]\n    d += [1]\n\n    N = int(input())\n    even, odd = 0, 0\n\n    for i in range(N):\n        x, y = map(int, input().split())\n        X += [x]; Y += [y]\n\n        if (abs(x) + abs(y)) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    if even and odd:\n        print(-1)\n        return 0\n\n    if odd:\n        m -= 1\n    else:\n        d += [1]\n\n    print(m)\n    print(\" \".join(map(str, d)))\n\n    for i in range(N):\n        solve(X[i], Y[i], d, m)\n\nmain()", "import numpy as np\n\nN = int(input())\nXY = np.array([[int(x) for x in input().split()] for _ in range(N)],dtype=np.int64)\nX = XY[:,0]\nY = XY[:,1]\n\ncommand = np.array([''] * N,dtype=object)\n\ndef solve(k,X,Y,arms,command):  \n  # |X|+|Y| <= 2^{k+1} \u306e\u3068\u304d\u306b\u30012^k\u3092\u4f7f\u3063\u3066\n  # |X|+|Y| <= 2^k\u306b\u66f8\u304d\u76f4\u3059\n  if k == -1:\n    return solve_final(X,Y,arms,command)\n  # \u7d76\u5bfe\u5024\u304c\u5927\u304d\u3044\u65b9\u3092\u64cd\u4f5c\n  bl_X = (np.abs(X) > np.abs(Y))\n  bl_Y = ~bl_X\n  negative_X = (X < 0)\n  negative_Y = (Y < 0)\n  L = bl_X & negative_X\n  R = bl_X & (~negative_X)\n  D = bl_Y & negative_Y\n  U = bl_Y & (~negative_Y)\n  command[L] += 'L'\n  command[R] += 'R'\n  command[D] += 'D'\n  command[U] += 'U'\n  p = (1<<k)\n  arms.append(p)\n  X[L] += p\n  X[R] -= p\n  Y[D] += p\n  Y[U] -= p\n  return solve(k-1,X,Y,arms,command)\n\ndef solve_final(X,Y,arms,command):\n  s = np.abs(X) + np.abs(Y)\n  bl0 = (s == 0).all()\n  bl1 = (s == 1).all()\n  if bl0:\n    return arms,command\n  elif not bl1:\n    return None,None\n  # |X| + |Y| = 1\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\n  arms.append(1)\n  L = (X == -1)\n  R = (X == 1)\n  D = (Y == -1)\n  U = (Y == 1)\n  command[L] += 'L'\n  command[R] += 'R'\n  command[D] += 'D'\n  command[U] += 'U'\n  return arms,command\n\narms,command = solve(35,X,Y,[],command)\n\nif arms is None:\n  print(-1)\nelse:\n  print(len(arms))\n  print(' '.join([str(x) for x in arms]))\n  print('\\n'.join(command))", "N = int(input())\npoint = [tuple(map(int, input().split())) for i in range(N)]\npoint_farthest = max(point, key=lambda p: abs(p[0]) + abs(p[1]))\nmod = sum(point_farthest) % 2\nD = [1, 1] if mod == 0 else [1]\nwhile sum(D) < abs(point_farthest[0]) + abs(point_farthest[1]):\n    D.append(D[-1] * 2)\nD.reverse()\nW = []\nfor x, y in point:\n    if (x + y) % 2 != mod:\n        print(-1)\n        return\n    w = ''\n    for d in D:\n        if abs(x) >= abs(y):\n            if x > 0:\n                w += 'R'\n                x -= d\n            else:\n                w += 'L'\n                x += d\n        else:\n            if y > 0:\n                w += 'U'\n                y -= d\n            else:\n                w += 'D'\n                y += d\n    W.append(w)\nprint(len(D))\nprint(*D)\nprint(*W, sep='\\n')", "def d_robot_arms(N, Pos):\n    # \u53c2\u8003: http://drken1215.hatenablog.com/entry/2018/09/30/002900\n\n    pos = []\n    # \u3059\u3079\u3066\u306e\u5ea7\u6a19\u3067\u30d1\u30ea\u30c6\u30a3\u304c\u4e00\u81f4\u3057\u306a\u3051\u308c\u3070\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8155\u3092\u9078\u3079\u306a\u3044\n    parity = (abs(Pos[0][0]) + abs(Pos[0][1])) % 2\n    for x, y in Pos:\n        parity_current = (abs(x) + abs(y)) % 2\n        if parity != parity_current:\n            return -1\n        pos.append((x - y, x + y))\n        # u=x-y, v=x+y \u3068\u3059\u308b\u3068\u3001 \u70b9(u, v)\u306f\n        # \u539f\u70b9\u5468\u308a\u306b45\u5ea6\u56de\u8ee2\u3055\u305b\u3066\u8ddd\u96e2\u221a2\u500d\u306b\u3059\u308b\u5ea7\u6a19\u5909\u63db\u3067\u70b9(x, y)\u304b\u3089\u79fb\u3055\u308c\u308b\u70b9\n        # \u3042\u308b\u3044\u306fu\u8ef8, v\u8ef8\u306fx\u8ef8, y\u8ef8\u3092\u305d\u308c\u305e\u308c\u539f\u70b9\u5468\u308a\u306b-45\u5ea6\u56de\u8ee2\u3055\u305b\u305f\u8ef8\n\n    # log2(10**9)=29.90 \u306a\u306e\u3067\u30012**30\u4ee5\u4e0b\u306e2\u306e\u51aa\u4e57\u3092\u9069\u5f53\u306b\u9078\u3079\u3070\n    # xy\u5e73\u9762\u4e0a\u306e x+y \u304c\u5947\u6570\u3067\u3042\u308b\u4efb\u610f\u306e\u5ea7\u6a19\u306b\u5230\u9054\u3067\u304d\u308b\n    arms = [1 << k for k in range(30, -1, -1)]\n    if parity % 2 == 0:\n        arms.append(1)  # x+y\u304c\u5076\u6570\u3067\u3042\u308b\u5ea7\u6a19\u306b\u5230\u9054\u3059\u308b\u3068\u304d\u306b\u5fc5\u8981\n\n    # \u8155\u306e\u6570, \u9577\u3055\u306e\u30ea\u30b9\u30c8\u3092\u6700\u521d\u306b\u683c\u7d0d\u3059\u308b(\u4efb\u610f\u306e\u5165\u529b\u306b\u5bfe\u3057\u3066\u56fa\u5b9a)\n    ans_tmp = [str(len(arms)), ' '.join(list(map(str, arms)))]\n\n    for u_pos, v_pos in pos:\n        # u, v\u5ea7\u6a19\u306f\u305d\u308c\u305e\u308c\u72ec\u7acb\u306b\u898b\u3066\u69cb\u308f\u306a\u3044\n        u_sum, v_sum = 0, 0\n        tmp = ''\n        for arm_len in arms:\n            u_dir = 1 if u_sum <= u_pos else -1\n            u_sum += u_dir * arm_len\n\n            v_dir = 1 if v_sum <= v_pos else -1\n            v_sum += v_dir * arm_len\n\n            # uv\u5e73\u9762\u3067\u8ef8\u3068\u5e73\u884c\u306b\u3069\u3061\u3089\u5411\u304d\u306b\u79fb\u52d5\u3059\u308b\u304b\u3068\n            # xy\u5e73\u9762\u3067\u306e\u79fb\u52d5\u30e2\u30fc\u30c9(UDLR)\u3068\u306e\u5bfe\u5fdc\n            if u_dir == 1 and v_dir == 1:\n                tmp += 'R'\n            elif u_dir == 1 and v_dir == -1:\n                tmp += 'D'\n            elif u_dir == -1 and v_dir == -1:\n                tmp += 'L'\n            else:\n                tmp += 'U'\n        ans_tmp.append(''.join(tmp))\n    ans = '\\n'.join(ans_tmp)\n    return ans\n\nN = int(input())\nPos = [[int(i) for i in input().split()] for j in range(N)]\nprint(d_robot_arms(N, Pos))", "N = int(input())\nQ = [list(map(int, input().split())) for i in range(N)]\n\n# \u5168\u4f53\u306e\u5076\u5947\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\ntmp = set()\nfor X, Y in Q:\n    tmp.add((X + Y) % 2)\nif len(tmp) != 1:\n    print((-1))\n    return\n\n# 2\u3079\u304d\u306e\u8155\u3092\u7528\u610f\nD = [2 ** i for i in range(30, -1, -1)]\n\n# \u5076\u6570\u306a\u3089\u9577\u30551\u306e\u8155\u3092\u4e00\u672c\u8ffd\u52a0\u3057\u3066\u304a\u304f\nif 0 in tmp:\n    D.append(1)\n\n# \u7b54\u3048\u3092\u4f5c\u308b\nprint((len(D)))\nprint((\" \".join(map(str, D))))\n\nmove = [(1, 0, \"R\"), (-1, 0, \"L\"), (0, 1, \"U\"), (0, -1, \"D\")]\nfor X, Y in Q:\n    nx, ny = 0, 0\n    ans = \"\"\n    for d in D:\n        tmp_move_ans = \"\"\n        tmp_move = None\n        min_move_cost = float('inf')\n        for mx, my, s in move:\n            cost = abs(nx + mx * d - X) + abs(ny + my * d - Y)\n            if cost < min_move_cost:\n                tmp_move_ans = s\n                min_move_cost = cost\n                tmp_move_x = mx\n                tmp_move_y = my\n\n        ans += tmp_move_ans\n        nx, ny = nx + tmp_move_x * d, ny + tmp_move_y * d\n    print(ans)\n", "n,*t=map(int,open(0).read().split())\n*z,=zip(t[::2],t[1::2])\ns=set((a+b)%2for a,b in z)\nif len(s)>1:\n    print(-1)\n    return\ns,*_=s\nd=[2**(38-i)for i in range(39)]+[1]*(s<1)\nprint(len(d))\nprint(*d)\nfor a,b in z:\n    x=y=0\n    for i in d:\n        if abs(a-x)>abs(b-y):\n            if a-x>0:\n                print('R',end='')\n                x+=i\n            else:\n                print('L',end='')\n                x-=i\n        else:\n            if b-y>0:\n                print('U',end='')\n                y+=i\n            else:\n                print('D',end='')\n                y-=i\n    print()", "N = int(input())\nX, Y = [], []\neven, odd = 0, 0\nfor i in range(N):\n    x, y = list(map(int, input().split()))\n    X.append(x)\n    Y.append(y)\n    if (x + y) % 2 == 0:\n        even += 1\n    else:\n        odd += 1\n\n\ndef calc(x, y):\n    nowx, nowy = 0, 0\n    t = \"\"\n    for i in range(30, -1, -1):\n        if nowx < x:\n            nowx += 2 ** i\n            p = 1\n        else:\n            nowx -= 2 ** i\n            p = -1\n\n        if nowy < y:\n            nowy += 2 ** i\n            q = 1\n        else:\n            nowy -= 2 ** i\n            q = -1\n\n        if p == 1 and q == 1:\n            t += \"R\"\n        elif p == 1 and q == -1:\n            t += \"U\"\n        elif p == -1 and q == 1:\n            t += \"D\"\n        else:\n            t += \"L\"\n\n    return t\n\n\nif even >= 1 and odd >= 1:\n    print((-1))\n    return\n\nelse:\n    d = [2 ** i for i in range(30, -1, -1)]\n    if even == 0:\n        print((31))\n        print((\" \".join(map(str, d))))\n        for i in range(N):\n            print((calc(X[i] + Y[i], X[i] - Y[i])))\n\n    else:\n        print((32))\n        d.append(1)\n        print((\" \".join(map(str, d))))\n        for i in range(N):\n            print((calc(X[i] + Y[i] - 1, X[i] - Y[i] - 1) + \"R\"))\n\n\n", "import sys, math, collections, heapq, itertools\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0: a, b = b, a % b\n    return b\n  \ndef solve():\n    file = sys.stdin.readline #single: int(file()), line: map(int, file().split())\n    N = int(file())\n    point = [[int(i) for i in file().split()] for j in range(N)]\n    length = (point[0][0] + point[0][1]) % 2\n    for i in range(1, N):\n        if sum(point[i]) % 2 != length:\n            print(-1)\n            break\n    else:\n        d = [pow(2, i) for i in range(31)]\n        direction = {(\"0\", \"0\"): \"L\", (\"1\",\"1\"): \"R\", (\"0\", \"1\"): \"D\", (\"1\", \"0\"): \"U\"}\n        ans = \"\"\n        add = (0 if length == 1 else 1)\n        if add == 1: d.append(1)\n        for i in range(N):\n            U, V = point[i][0] + point[i][1] + add, point[i][0] - point[i][1] + add\n            ubit = format((U + pow(2, 31) - 1)//2, \"b\").zfill(31)\n            vbit = format((V + pow(2, 31) - 1)//2, \"b\").zfill(31)\n            arm = \"\"\n            for j in reversed(range(31)):\n                arm += direction[(ubit[j], vbit[j])]\n            if add == 1: arm += \"L\"\n            ans += arm + \"\\n\"\n        print(len(d))\n        print(\" \".join(map(str, d)))\n        print(ans)\n\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\n  \ndef __starting_point():\n    solve()\n__starting_point()", "inf = float('inf')\n\nn = int(input())\ncoordinates = [tuple(map(int, input().split())) for _ in range(n)]\n\nparity = None\ncan_make = True\nfor coordinate in coordinates:\n    if parity is None:\n        parity = sum(coordinate) % 2\n    else:\n        if parity != sum(coordinate) % 2:\n            can_make = False\n            break\n\nif not can_make:\n    print(-1)\n    return\n    # \u5230\u9054\u53ef\u80fd\u306a\u9802\u70b9\u306fxy\u5ea7\u6a19\u306e\u548c\u306e\u30d1\u30ea\u30c6\u30a3\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n\nm = 40\nif parity == 0:\n    d = [pow(2, i) for i in range(39)] + [1]\n    # \u5947\u6570\u306f1\u3060\u3051\u306a\u306e\u3067\u30011\u3092\u8ffd\u52a0\u3057\u3066\u3001\u5168\u3066\u306e\u8155\u306e\u5408\u8a08\u304c\u5076\u6570\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\nelse:\n    d = [pow(2, i) for i in range(40)]\n    # \u5947\u6570\u306f1\u3060\u3051\u306a\u306e\u3067\u3001\u5168\u3066\u306e\u8155\u306e\u5408\u8a08\u306f\u5947\u6570\u306b\u306a\u308b\nd.sort(reverse=True)\n\nans = []\nfor x, y in coordinates:\n    curx, cury = 0, 0\n    ops = ''\n    for dd in d:\n        dist = inf\n        op = ''\n        det_dx, det_dy = 0, 0\n        for c, (dx, dy) in zip('LRDU', [(-1, 0), (1, 0), (0, -1), (0, 1)]):\n            t = abs(curx + dx * dd - x) + abs(cury + dy * dd - y)\n            if dist > t:\n                op = c\n                dist = t\n                det_dx = dx\n                det_dy = dy\n        ops += op\n        curx += det_dx * dd\n        cury += det_dy * dd\n    if (curx, cury) == (x, y):\n        ans.append(ops)\n    else:\n        print(-1)\n        # print('\u4e0d\u4e00\u81f4', curx, cury, x, y)\n\nprint(m)\nprint(*d)\nprint(*ans, sep='\\n')\n", "N=int(input())\np=[[int(i) for i in input().split()] for i in range(N)]\np_copy=list(p)\np_copy.sort(key=lambda x:x[0]+x[1])\nlength=abs(p_copy[N-1][0])+abs(p_copy[N-1][1])\nif length%2==0:\n  edge=[1]\n  a=1\n  while a<length:\n    edge.append(a)\n    a=2*a\n  edge.reverse()\nelse:\n  edge=[]\n  a=1\n  while a<length:\n    edge.append(a)\n    a=2*a\n  edge.reverse()\nif len(edge)>40 or edge[len(edge)-1]>10**12:\n  print((-1))\n  return\nw=[\"\"]*N\nfor n in range(N):\n  x,y=p[n][0],p[n][1]\n  if (x+y)%2!=length%2:\n    print((-1))\n    return\n  else:\n    a,b=0,0\n    for e in edge:\n      R=abs(x-(a+e))+abs(y-(b))\n      L=abs(x-(a-e))+abs(y-(b))\n      U=abs(x-(a))+abs(y-(b+e))\n      D=abs(x-(a))+abs(y-(b-e))\n      if min([R,L,U,D])==R:\n        a+=e\n        w[n]+=\"R\"\n      elif min([R,L,U,D])==L:\n        a+=-e\n        w[n]+=\"L\"\n      elif min([R,L,U,D])==U:\n        b+=e\n        w[n]+=\"U\"\n      else:\n        b+=-e\n        w[n]+=\"D\"\n  \nprint((len(edge)))\nmap_edge=list(map(str,edge))\nprint((\" \".join(map_edge)))\nfor n in range(N):\n  print((w[n]))\n    \n", "N, *XY = map(int, open(0).read().split())\nXY = list(zip(*[iter(XY)] * 2))\n\nS = set((x + y) % 2 for x, y in XY)\nif len(S) == 2:\n    print(-1)\n    return\nmod = S.pop()\n\nD = [2 ** i for i in reversed(range(32))] + [1] * (mod == 0)\nprint(len(D))\nprint(*D)\n\nfor x, y in XY:\n    A = []\n    for d in D:\n        if 0 <= x - y and 0 <= x + y:\n            A.append(\"R\")\n            x -= d\n        elif x - y < 0 and 0 <= x + y:\n            A.append(\"U\")\n            y -= d\n        elif 0 <= x - y and x + y < 0:\n            A.append(\"D\")\n            y += d\n        else:\n            A.append(\"L\")\n            x += d\n\n    print(\"\".join(A))", "N = int(input())\nXY = []\nfor _ in range(N):\n    x, y = list(map(int, input().split()))\n    XY.append((x + y, x - y))\nif any(XY[0][0] % 2 != xy[0] % 2 for xy in XY):\n    print((-1))\n    return\nodd = XY[0][0] % 2 == 1\nif odd:\n    d = [2 ** i for i in range(30, -1, -1)]\nelse:\n    d = [2 ** i for i in range(30, -1, -1)] + [1]\nprint((len(d)))\nprint((*d))\nfor xpy, xmy in XY:\n    s = \"\"\n    p = 0\n    m = 0\n    for di in d:\n        ps = 1 if p <= xpy else -1\n        ms = 1 if m <= xmy else -1\n        p += ps * di\n        m += ms * di\n        if ps == 1:\n            s += \"R\" if ms == 1 else \"U\"\n        else:\n            s += \"D\" if ms == 1 else \"L\"\n    print(s)\n", "def d_robot_arms(N, Pos):\n    # \u53c2\u8003: http://drken1215.hatenablog.com/entry/2018/09/30/002900\n\n    pos = []\n    # \u3059\u3079\u3066\u306e\u5ea7\u6a19\u3067\u30d1\u30ea\u30c6\u30a3\u304c\u4e00\u81f4\u3057\u306a\u3051\u308c\u3070\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8155\u3092\u9078\u3079\u306a\u3044\n    parity = (abs(Pos[0][0]) + abs(Pos[0][1])) % 2\n    for x, y in Pos:\n        parity_current = (abs(x) + abs(y)) % 2\n        if parity != parity_current:\n            return -1\n        pos.append([x - y, x + y])\n        # u=x-y, v=x+y \u3068\u3059\u308b\u3068\u3001 \u70b9(u, v)\u306f\n        # \u539f\u70b9\u5468\u308a\u306b45\u5ea6\u56de\u8ee2\u3055\u305b\u308b\u5ea7\u6a19\u5909\u63db\u306b\u3088\u3063\u3066\u70b9(x, y)\u304b\u3089\u79fb\u3055\u308c\u308b\u70b9\n\n    # log2(10**9)=29.90 \u306a\u306e\u3067\u30012**30\u4ee5\u4e0b\u306e2\u306e\u51aa\u4e57\u3092\u9069\u5f53\u306b\u9078\u3079\u3070\n    # xy\u5e73\u9762\u4e0a\u306e x+y \u304c\u5947\u6570\u3067\u3042\u308b\u4efb\u610f\u306e\u5ea7\u6a19\u306b\u5230\u9054\u3067\u304d\u308b\n    arms = [1 << k for k in range(30, -1, -1)]\n    if parity % 2 == 0:\n        arms.append(1)  # x+y\u304c\u5076\u6570\u3067\u3042\u308b\u5ea7\u6a19\u306b\u5230\u9054\u3059\u308b\u3068\u304d\u306b\u5fc5\u8981\n\n    # \u8155\u306e\u6570, \u9577\u3055\u306e\u30ea\u30b9\u30c8\u3092\u6700\u521d\u306b\u683c\u7d0d\u3059\u308b(\u4efb\u610f\u306e\u5165\u529b\u306b\u5bfe\u3057\u3066\u56fa\u5b9a)\n    ans_tmp = [str(len(arms)), ' '.join(list(map(str, arms)))]\n\n    for pos_u, pos_v in pos:\n        # u, v\u5ea7\u6a19\u306f\u305d\u308c\u305e\u308c\u72ec\u7acb\u306b\u898b\u3066\u69cb\u308f\u306a\u3044\n        usum, vsum = 0, 0\n        tmp = ''\n        for arm_len in arms:\n            if usum <= pos_u:\n                udir = 'positive'\n                usum += arm_len\n            else:\n                udir = 'negative'\n                usum -= arm_len\n\n            if vsum <= pos_v:\n                vdir = 'positive'\n                vsum += arm_len\n            else:\n                vdir = 'negative'\n                vsum -= arm_len\n\n            # uv\u5e73\u9762\u3067\u8ef8\u3068\u5e73\u884c\u306b\u3069\u3061\u3089\u5411\u304d\u306b\u79fb\u52d5\u3059\u308b\u304b\u3068\n            # xy\u5e73\u9762\u3067\u306e\u79fb\u52d5\u30e2\u30fc\u30c9(UDLR)\u3068\u306e\u5bfe\u5fdc\n            if udir == 'positive' and vdir == 'positive':\n                tmp += 'R'\n            elif udir == 'positive' and vdir == 'negative':\n                tmp += 'D'\n            elif udir == 'negative' and vdir == 'negative':\n                tmp += 'L'\n            else:\n                tmp += 'U'\n        ans_tmp.append(''.join(tmp))\n    ans = '\\n'.join(ans_tmp)\n    return ans\n\nN = int(input())\nPos = [[int(i) for i in input().split()] for j in range(N)]\nprint(d_robot_arms(N, Pos))", "N=int(input())\n\npoint = []\nparity = {}\nfor _ in range(N) :\n    x, y = list(map(int, input().split()))\n    point.append((x, y))\n    parity[(x + y) % 2] = 1\n\nif len(set(parity)) == 2 :\n    print('-1')\nelse :\n    m = 38\n    parity = 1 if (1 in parity) else 0\n    print((m + 1 - parity))\n    if parity == 1 :  # \u8ddd\u96e2\u304c\u5947\u6570\n        print((*[1 << i for i in range(m)]))\n    else :\n        print((1, *[1 << i for i in range(m)]))\n\n    def arm(x, y, m) :\n        if abs(x) >= abs(y) :\n            if x >= 0 :\n                return ('R', x - (1<<m), y)\n            else :\n                return ('L', x + (1<<m), y)\n        else :\n            if y >= 0 :\n                return ('U', x, y - (1<<m))\n            else :\n                return ('D', x, y + (1<<m))\n\n    for x, y in point :\n        ans = []\n        for i in range(m-1, -1, -1) :\n            mode, x, y = arm(x, y, i)\n            ans.append(mode)\n        if parity == 0 :  # \u5076\u6570\u306e\u5834\u5408\u4e00\u3064\u8db3\u3059\n            if x == 1 :\n                ans.append('R')\n            elif x == -1 :\n                ans.append('L')\n            elif y == 1 :\n                ans.append('U')\n            elif y == -1 :\n                ans.append('D')\n        print((''.join(ans[::-1])))\n\n", "def pow2(i):\n    ret = 1\n    while i!=1:\n        i >>= 1\n        ret <<= 1\n    return ret\n\nm = int(input())\n\npoints = []\nmax2 = -1\nflag = True\nbias = -1\nfor i in range(m):\n    point = list(map(int,input().split()))\n    dis = abs(point[0])+abs(point[1])\n    if (dis > max2):\n        max2 = dis\n    if (bias!=-1 and dis%2 != bias%2):\n        flag =False\n    if (dis%2 == 0):\n        point[0] -= 1 \n    points.append(tuple(point))\n    bias = dis%2\nif flag == False:\n    print(\"-1\")\n    return        \n\nbias = max2%2\nmax2 = pow2(max2)\ndiss = []\ndirctions = [\"\"]*m\nwhile max2>0:\n    for i in range(m):\n        point = points[i]\n        \n        if (point[1]>point[0] and point[1]>(-point[0])):\n            dirctions[i] = \"U\"+dirctions[i]\n            points[i] = (point[0],point[1]-max2)\n        elif(point[1]>point[0] and point[1]<(-point[0])):\n            dirctions[i] = \"L\"+dirctions[i]\n            points[i] = (point[0]+max2,point[1])\n        elif(point[1]<point[0] and point[1]>(-point[0])):\n            dirctions[i] = \"R\"+dirctions[i]\n            points[i] = (point[0]-max2,point[1])\n        else:\n            dirctions[i] = \"D\"+dirctions[i] \n            points[i] = (point[0],point[1]+max2)\n    diss = [max2] + diss\n    max2 >>= 1\n\nif (bias == 0):\n    diss = [1] + diss\n    for i in range(m):\n        dirctions[i] = \"R\"+dirctions[i]\nprint(len(diss))\nfor d in diss:\n    print(str(d),end=\" \")\nprint(\"\")\nfor d in dirctions:\n    print(d)\n", "n = int(input())\ngrid = [list(map(int, input().split())) for i in range(n)]\n\nfor i in range(n - 1):\n    if (grid[i][0] + grid[i][1]) % 2 != (grid[i + 1][0] + grid[i + 1][1]) % 2:\n        print(-1)\n        return\nm = 31\nD = [2 ** i for i in range(m)]\nif (grid[0][0] + grid[0][1]) % 2 == 0:\n    D.insert(0, 1)\n    m += 1\nw = [[] for i in range(n)]\nfor i, g in enumerate(grid):\n    x, y = g\n    for d in D[::-1]:\n        if abs(x) >= abs(y):\n            if x > 0:\n                x -= d\n                w[i].append('R')\n            else:\n                x += d\n                w[i].append('L')\n        else:\n            if y > 0:\n                y -= d\n                w[i].append('U')\n            else:\n                y += d\n                w[i].append('D')\n\nprint(m)\nprint(*D)\nfor ans in w:\n    print(*ans[::-1], sep='')", "n,*t=map(int,open(0).read().split())\n*z,=zip(t[::2],t[1::2])\ns=set((a+b)%2for a,b in z)\nif len(s)>1:\n  print(-1)\n  return\ns,*_=s\nd=[2**(38-i)for i in range(39)]+[1]*(s<1)\nprint(len(d),*d)\nfor a,b in z:\n  x=y=0\n  o=''\n  for i in d:\n    if abs(a-x)>abs(b-y):\n      f=a-x>0\n      o+='LR'[f]\n      x+=i*f or-i\n    else:\n      f=b-y>0\n      o+='DU'[f]\n      y+=i*f or-i\n  print(o)", "N = int(input())\nXY = [tuple(map(int,input().split())) for i in range(N)]\nguuki = (XY[0][0] + XY[0][1]) % 2\nfor x,y in XY:\n    if (x+y)%2 != guuki:\n        print(-1)\n        return\n\narms = []\nn = 1\nfor i in range(39):\n    arms.append(n)\n    n *= 2\nif guuki==0:\n    arms.append(1)\narms.reverse()\n\ndirs = {'R':(1,0),'U':(0,1),'L':(-1,0),'D':(0,-1)}\n\nprint(len(arms))\nprint(*arms)\nfor x,y in XY:\n    nx = ny = 0\n    s = ''\n    if guuki==0:\n        nx += 1\n        s += 'R'\n    for a in arms[-39:]:\n        dist = float('inf')\n        dr = ''\n        for d,(dx,dy) in dirs.items():\n            tmp = abs(x - (nx+dx*a)) + abs(y - (ny+dy*a))\n            if tmp < dist:\n                dist = tmp\n                dr = d\n        dx,dy = dirs[dr]\n        nx += dx*a\n        ny += dy*a\n        s += dr\n    print(s)", "N = int(input())\nPoints = [list(map(int, input().split())) for i in range(N)]\n# X + Y \u306e\u5076\u5947\u306f\u3059\u3079\u3066\u4e00\u81f4\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\nodds_even = set([(x + y) % 2 for x, y in Points])\nif len(odds_even) != 1:\n    print((-1))\n    return\n\nD = [2 ** i for i in range(39)]  # \u30a2\u30fc\u30e0\u306e\u9577\u3055\nD = D[::-1]  # \u53cd\u8ee2\nif odds_even == {0}:  # \u9577\u30551\u306e\u30a2\u30fc\u30e0\u3092\u8ffd\u52a0\n    D.append(1)\n\nprint((len(D)))\nprint((' '.join(map(str, D))))\n# \u6700\u3082\u9577\u3044\u30a2\u30fc\u30e0\u304b\u3089\u8003\u3048\u308b\nfor tX, tY in Points:\n    nX, nY = 0, 0\n    ans = ''\n    for d in D:\n        uX, uY = nX, nY + d  # \u4e0a\n        rX, rY = nX + d, nY  # \u53f3\n        dX, dY = nX, nY - d  # \u4e0b\n        lX, lY = nX - d, nY  # \u5de6\n\n        diff_U = abs(tX - uX) + abs(tY - uY)\n        diff_R = abs(tX - rX) + abs(tY - rY)\n        diff_D = abs(tX - dX) + abs(tY - dY)\n        diff_L = abs(tX - lX) + abs(tY - lY)\n\n        Diff = [diff_U, diff_R, diff_D, diff_L]\n        Command = ['U', 'R', 'D', 'L']\n        Next = [[uX, uY], [rX, rY], [dX, dY], [lX, lY]]\n\n        min_diff_index = Diff.index(min(Diff))\n\n        ans += Command[min_diff_index]\n        nX, nY = Next[min_diff_index]\n\n    print(ans)\n", "import sys\n\nN = int(input())\nXY = [tuple(map(int, input().split())) for _ in range(N)]\n\nmod = sum(XY[0]) % 2\nif any(mod != ((x+y)%2) for x, y in XY):\n    print(-1)\n    return\n\nm = 33 - mod\nprint(m)\nD = [2 ** i for i in range(31, -1, -1)]\nif mod == 0:\n    D.append(1)\n\nprint(' '.join(map(str, D)))\nfor x, y in XY:\n    w = ''\n    for d in D:\n        if 0 <= x - y and 0 <= x + y:\n            w += 'R'\n            x -= d\n        elif 0 > x - y and 0 <= x + y:\n            w += 'U'\n            y -= d\n        elif 0 <= x - y and 0 > x + y:\n            w += 'D'\n            y += d\n        else:\n            w += 'L'\n            x += d\n    print(w)", "n = int(input())\nl = [list(map(int,input().split())) for i in range(n)]\n\nm = [0]*2\nfor i,j in l:\n    m[(i+j)%2] += 1\nif m[0]*m[1]>0:\n    print(-1)\n    return\n\nif m[1]>0:\n    arm = [2**i for i in range(32)]\nelse:\n    arm = [1]+[2**i for i in range(32)]\n\nprint(len(arm))\nprint(*arm)\nfor x,y in l:\n    ans = []\n    nx = x\n    ny = y\n    for i in arm[::-1]:\n        if abs(nx) >= abs(ny):\n            if nx >= 0:\n                ans.append(\"R\")\n                nx -= i\n            else:\n                ans.append(\"L\")\n                nx += i\n        else:\n            if ny >= 0:\n                ans.append(\"U\")\n                ny -= i\n            else:\n                ans.append(\"D\")\n                ny += i\n    \n    print(*ans[::-1],sep=\"\")", "import sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10**9)\nn=int(input())\nX,Y=[],[]\nfor _ in range(n):\n    x,y=map(int,input().split())\n    X.append(x)\n    Y.append(y)\nmod=(X[0]+Y[0])%2\nfor i in range(1,n):\n    if (X[i]+Y[i])%2!=mod:\n        print(-1)\n        return\nif not mod:\n    X=[x+1 for x in X]\nU=[X[i]+Y[i] for i in range(n)]\nV=[X[i]-Y[i] for i in range(n)]\nMode=['L','D','U','R']\nm=31\nif mod:\n    print(m)\n    print(' '.join([str(2**i) for i in range(m)]))\nelse:\n    print(m+1)\n    print('1 '+' '.join([str(2**i) for i in range(m)]))\nfor i in range(n):\n    w=''\n    if not mod:\n        w='L'\n    ui=(U[i]+2**m-1)//2\n    vi=(V[i]+2**m-1)//2\n    for _ in range(m):\n        u_bit,v_bit=ui&1,vi&1\n        ui>>=1\n        vi>>=1\n        w+=Mode[u_bit*2+v_bit]\n    print(w)", "n = int(input())\nXY = [list(map(int, input().split())) for _ in range(n)]\nmod = sum(XY[0])%2\nfor x, y in XY:\n    if mod != (x+y)%2:\n        print(-1)\n        return\nm = 33-mod\nprint(m)\nD = [2**i for i in range(31, -1, -1)]\nif mod == 0:\n    D.append(1)\nprint(\" \".join(map(str, D)))\nfor x, y in XY:\n    w = \" \"\n    for d in D:\n        if x-y >= 0 and x+y >= 0:\n            w += \"R\"\n            x -= d\n        elif x-y < 0 and x+y >= 0:\n            w += \"U\"\n            y -= d\n        elif x-y >= 0 and x+y < 0:\n            w += \"D\"\n            y += d\n        else:\n            w += \"L\"\n            x += d\n    print(w)", "ri = lambda: int(input())\nrl = lambda: list(map(int,input().split()))\nrr = lambda N: [ri() for _ in range(N)]\nYN = lambda b: print('YES') if b else print('NO')\nyn = lambda b: print('Yes') if b else print('No')\nOE = lambda x: print('Odd') if x%2 else print('Even')\nINF = 10**18\n\nN=ri()\nU=[0]*N #u = x + y\nV=[0]*N #v = x - y\nparity = 0\nfor i in range(N):\n    x,y = rl()\n    U[i],V[i] = format(x+y,'+032b'), format(x-y,'+032b')\n    parity += (x+y)%2\n\nif parity == 0 or parity == N:\n    parity //= N\n    m = 31 if parity else 32\n    print(m)\n    d = [1 for i in range(m)]\n    for i in range(1,31):\n        d[i] = d[i-1]*2\n    d.sort(reverse=True)\n    print(*d, sep=' ')\n\n    for i in range(N):\n        res = ''\n        u,v = U[i],V[i]\n\n        ub,vb = [1]+list(map(int,u[1:-1])), [1]+list(map(int,v[1:-1]))\n        if not parity:\n            ub += [0]\n            vb += [0]\n        if u[0] == '-': ub = list(map(lambda x: x^1, ub))\n        if v[0] == '-': vb = list(map(lambda x: x^1, vb))\n\n        for ub_,vb_ in zip(ub,vb):\n            if ub_==0 and vb_==0:\n                res += 'L'\n            elif ub_==1 and vb_==1:\n                res += 'R'\n            elif ub_==0 and vb_==1:\n                res += 'D'\n            else:\n                res += 'U'\n        print(res)\nelse:\n    print(-1)\n", "n=int(input())\nx=[0]*n\ny=[0]*n\nfor i in range(n):\n  x[i],y[i]=map(int,input().split())\n  if(abs(x[i])+abs(y[i]))%2!=(abs(x[0])+abs(y[0]))%2:\n    print(-1)\n    return\nD=[]\nfor i in reversed(range(33)):D.append(1<<i)\nD+=[1,1]\nif(abs(x[0])+abs(y[0]))%2==0:D.append(1)\nprint(len(D))\nprint(*D)\nfor i in range(n):\n  X,Y=x[i],y[i]\n  s=''\n  for d in D:\n    if abs(X)>abs(Y):\n      if X>0:\n        X-=d\n        s+='R'\n      else:\n        X+=d\n        s+='L'\n    else:\n      if Y>0:\n        Y-=d\n        s+='U'\n      else:\n        Y+=d\n        s+='D'\n  \n  print(s)", "n = int(input())\nplace = [tuple(map(int, input().split())) for _ in range(n)]\nm = 0\ndef bitlist(x):\n    ret = [0] * 31\n    for i in reversed(range(31)):\n        if x > 0:\n            x -= 1 << i\n            ret[i] = 1\n        else:\n            x += 1 << i\n            ret[i] = -1\n    return ret\npre = (place[0][0] + place[0][1] + 1) % 2\nfor x, y in place:\n    if (x + y + 1) % 2 != pre:\n        print(-1)\n        return\nprint(31 + pre)\nif pre:\n    print(1, end = ' ')\nfor i in reversed(range(31)):\n    print(1 << i, end = ' ')\nprint()\nfor x, y in place:\n    u = x + y\n    v = x - y\n    if pre:\n        u -= 1\n        v -= 1\n    ubit = bitlist(u)\n    vbit = bitlist(v)\n    if pre:\n        print('R', end = '')\n    for i in reversed(range(31)):\n        if ubit[i] == 1 and vbit[i] == 1:\n            print('R', end = '')\n        elif ubit[i] == 1 and vbit[i] == -1:\n            print('U', end = '')\n        elif ubit[i] == -1 and vbit[i] == -1:\n            print('L', end = '')\n        else:\n            print('D', end = '')\n    print()\n", "import sys\nstdin = sys.stdin\n\nsys.setrecursionlimit(10**5)\n\ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x)-1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nn = ni()\nxy = []\nfor _ in range(n):\n    x,y = li()\n    xy.append((x,y))\n    \nexist = True\n    \neo = (xy[0][0]+xy[0][1]) % 2\nfor x,y in xy[1:]:\n    if (x+y)%2 != eo:\n        exist = False\n    \nif not exist:\n    print(-1)\n    \nelse:\n    if eo == 1:\n        arms = [2**i for i in range(40)]\n        print(40)\n        print(*arms[::-1])\n        \n    else:\n        arms = [1] + [2**i for i in range(39)]\n        print(40)\n        print(*arms[::-1])\n        \n    for x,y in xy:\n        u,v = x-y, x+y\n        ucur, vcur = 0,0\n        ans = \"\"\n        for am in arms[::-1]:\n            if ucur >= u and vcur >= v:\n                ucur -= am\n                vcur -= am\n                ans += \"L\"\n                \n            elif ucur <= u and vcur <= v:\n                ucur += am\n                vcur += am\n                ans += \"R\"\n                \n            elif ucur >= u and vcur <= v:\n                ucur -= am\n                vcur += am\n                ans += \"U\"\n                \n            elif ucur <= u and vcur >= v:\n                ucur += am\n                vcur -= am\n                ans += \"D\"\n                \n        print(ans)", "import sys\ninput = sys.stdin.readline\n\nimport bisect\n\nN=int(input())\nXY = [list(map(int, input().split())) for _ in range(N)]\nr=(XY[0][0]+XY[0][1])%2\nfor i in range(N):\n    if r != (XY[i][0]+XY[i][1])%2:\n        print((-1))\n        return\n\nsumtwo=[]\nmul = 2\nfor i in range(31):\n    sumtwo.append(mul - 1)\n    mul*=2\n\n\nmaxtwo=0\ni_two=0\nfor i in range(N):\n    if maxtwo < abs(XY[i][0])+abs(XY[i][1]):\n        i_two = bisect.bisect_left(sumtwo, abs(XY[i][0])+abs(XY[i][1]))\n        maxtwo = sumtwo[i_two]\nans=[2**i for i in range(i_two+1)]\nif r==0:\n    ans=[1]+ans\n    i_two+=1\nprint((i_two+1))\nprint((*ans))\nans.reverse()\n\nfor i in range(N):\n    ans2 = []\n    nowx,nowy=XY[i]\n    for j in range(i_two+1):\n        if abs(nowx) < abs(nowy):\n            if nowy < 0:\n                ans2.append(\"D\")\n                nowy += ans[j]\n            else:\n                ans2.append(\"U\")\n                nowy -= ans[j]\n        else:\n            if nowx < 0:\n                ans2.append(\"L\")\n                nowx += ans[j]\n            else:\n                ans2.append(\"R\")\n                nowx -= ans[j]\n    ans2.reverse()\n    print((\"\".join(ans2)))\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN=INT()\nXY=[[None] for i in range(N)]\nx,y=MAP()\nXY[0]=(x, y)\nod_ev=(abs(x)+abs(y))%2\nfor i in range(1, N):\n    x,y=MAP()\n    # \u307e\u305a\u5927\u524d\u63d0\u3068\u3057\u3066\u5076\u5947\u304c\u5408\u3046\u304b\u3069\u3046\u304b\n    if od_ev!=(abs(y)+abs(x))%2:\n        print((-1))\n        return\n    XY[i]=(x, y)\n\n# \u30a2\u30fc\u30e0\u306e\u4f5c\u6210(2\u51aa\u3067\u69cb\u6210\u3059\u308b)\narms=[]\nfor i in range(31, -1, -1):\n    arms.append(2**i)\nif od_ev==0: arms.append(1)\nprint((len(arms)))\nprint((*arms))\n\nfor i in range(N):\n    ans=['']*len(arms)\n    x,y=XY[i]\n    # \u659c\u3081\u306b\u4ea4\u5dee\u3059\u308bu\u5ea7\u6a19\u3068v\u5ea7\u6a19\u3092\u4f7f\u3046\n    u=x+y\n    v=x-y\n    for j, arm in enumerate(arms):\n        # u\u3068v\u306e\u6b63\u8ca0\u306e\u5fdc\u3058\u3066\u3001\u52d5\u304b\u3059\u65b9\u5411\u3092\u6c7a\u3081\u308b\n        if u>=0 and v>=0:\n            ans[j]='R'\n            u-=arm\n            v-=arm\n        elif u>=0 and v<0:\n            ans[j]='U'\n            u-=arm\n            v+=arm\n        elif u<0 and v>=0:\n            ans[j]='D'\n            u+=arm\n            v-=arm\n        elif u<0 and v<0:\n            ans[j]='L'\n            u+=arm\n            v+=arm\n    print((''.join(ans)))\n", "import sys\ninput = sys.stdin.readline\n\nN=int(input())\nARM=[list(map(int,input().split())) for i in range(N)]\n\nOE=[(ARM[i][0]+ARM[i][1])%2 for i in range(N)]\n\nif len(set(OE))==2:\n    print((-1))\n    return\n\nif OE[0]==1:\n    \n    m=38\n    print(m)\n    print((*[1<<i for i in range(m)]))\n\n    def URLD(x,y,m):\n        \n        if abs(x)>=abs(y):\n            if x>=0:\n                return \"R\",(x-(1<<m),y)\n            else:\n                return \"L\",(x+(1<<m),y)\n\n        else:\n            if y>=0:\n                return \"U\",(x,y-(1<<m))\n            else:\n                return \"D\",(x,y+(1<<m))\n\n    for x,y in ARM:\n        ANS=[]\n        for i in range(m-1,-1,-1):\n            a,(x,y)=URLD(x,y,i)\n            ANS.append(a)\n\n        print((\"\".join(ANS[::-1])))\n        \nelse:\n\n    m=39\n    print(m)\n    print((1,*[1<<i for i in range(m-1)]))\n\n    def URLD(x,y,m):\n        \n        if abs(x)>=abs(y):\n            if x>=0:\n                return \"R\",(x-(1<<m),y)\n            else:\n                return \"L\",(x+(1<<m),y)\n\n        else:\n            if y>=0:\n                return \"U\",(x,y-(1<<m))\n            else:\n                return \"D\",(x,y+(1<<m))\n\n    for x,y in ARM:\n        ANS=[]\n        for i in range(m-2,-1,-1):\n            a,(x,y)=URLD(x,y,i)\n            ANS.append(a)\n\n        if x==1:\n            ANS.append(\"R\")\n        elif x==-1:\n            ANS.append(\"L\")\n        elif y==1:\n            ANS.append(\"U\")\n        else:\n            ANS.append(\"D\")\n\n        print((\"\".join(ANS[::-1])))\n    \n            \n", "import sys\nimport itertools\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\nc = ['R', 'U', 'L', 'D']\nn = int(input())\nx = []\ny = []\nfor i in range(n):\n  xi, yi = map(int, input().split())\n  x.append(xi)\n  y.append(yi)\nparity = None\nfor i in range(n):\n  if i == 0:\n    parity = (x[i] + y[i]) % 2\n  elif (x[i] + y[i]) % 2 != parity:\n    print(-1)\n    return\nprint(40)\nd = []\nfor i in range(20):\n  d.append(3**i)\n  d.append(3**i)\nd[1] += parity\nprint(*d)\nd = [1] * 40\nd[1] += parity\nfor i in range(n):\n  for m in range(20):\n    for j, k in itertools.product(range(4), range(4)):\n      xnew = x[i] - (d[2*m] * dx[j] + d[2*m+1] * dx[k])\n      ynew = y[i] - (d[2*m] * dy[j] + d[2*m+1] * dy[k])\n      if xnew % 3 == 0 and ynew % 3 == 0:\n        x[i] = xnew // 3\n        y[i] = ynew // 3\n        print(c[j] + c[k], end='')\n        break\n  print('')", "N = int(input())\nXY = [tuple(map(int, input().split())) for _ in range(N)]\nR = [abs(x-y)&1 for x, y in XY]\nif not all(R[0] == r for r in R[1:]):\n    print(-1)\n    return\nRM = max(abs(x)+abs(y) for x, y in XY)\nD = [1 << i for i in range(32, -1, -1)]\nif RM & 1 == 0:\n    D.append(1)\nW = [\"\" for _ in range(N)]\nfor d in D:\n    for i in range(N):\n        x, y = XY[i]\n        if abs(x) > abs(y):\n            if x > 0:\n                x -= d\n                W[i] += \"R\"\n            else:\n                x += d\n                W[i] += \"L\"\n        else:\n            if y > 0:\n                y -= d\n                W[i] += \"U\"\n            else:\n                y += d\n                W[i] += \"D\"\n        XY[i] = (x, y)\nprint(len(D))\nprint(*D)\nprint(*W, sep=\"\\n\")", "n = int(input())\nx = [0] * n\ny = [0] * n\nfor i in range(n):\n    x[i], y[i] = list(map(int, input().split()))\np = x[0] + y[0] & 1\nfor i in range(n):\n    if x[i] + y[i] & 1 != p:\n        print((-1))\n        return\nd = ([1] if p == 0 else []) + [2 ** i for i in range(39)]\nprint((len(d)))\nprint((*d))\n\ndx = [1,0,-1,0]\ndy = [0,1,0,-1]\nch = 'LDRU'\n\nfor i in range(n):\n    s, t = x[i], y[i]\n    ans = []\n    now = 2 ** 38\n    for _ in range(len(d)):\n        min_cur = 10 ** 18\n        for i in range(4):\n            ts, tt = s + dx[i] * now, t + dy[i] * now\n            tm = abs(ts) + abs(tt)\n            if tm < min_cur:\n                ns, nt = ts, tt\n                nc = ch[i]\n                min_cur = tm\n        s, t = ns, nt\n        ans.append(nc)\n        now = now // 2 if now > 1 else 1\n    print((''.join(reversed(ans))))\n", "from math import *\n\ndef L(xi, di):\n    return xi - di\n\ndef R(xi, di):\n    return xi + di\n\ndef D(yi, di):\n    return yi - di\n\ndef U(yi, di):\n    return yi + di\n\ndef main():\n    N = int(input())\n    x_list = [list(map(int, input().split())) for i in range(N)]\n    sum_list = [x[0] + x[1] for x in x_list]\n    checker = sum_list[0] % 2\n\n    for wa in sum_list:\n        if wa % 2 != checker:\n            print(\"-1\")\n            return\n\n    arm_list = []\n    if checker == 0:\n        arm_list.append(1)\n\n    pow_i = 0\n    max_sum = max(sum_list)\n    while max_sum > sum(arm_list):\n        arm_list.append(2 ** pow_i)\n        pow_i += 1\n    arm_list = sorted(arm_list, key=lambda x: -x)\n    print(len(arm_list))\n    print(\" \".join(map(str, arm_list)))\n\n    for c in x_list:\n        now_c = [0,0]\n        order = \"\"\n\n        for arm in arm_list:\n            dx = c[0] - now_c[0]\n            dy = c[1] - now_c[1]\n\n            if abs(dx) > abs(dy):\n                if dx > 0:\n                    order += \"R\"\n                    now_c[0] = R(now_c[0], arm)\n                else:\n                    order += \"L\"\n                    now_c[0] = L(now_c[0], arm)\n            else:\n                if dy > 0:\n                    order += \"U\"\n                    now_c[1] = U(now_c[1], arm)\n                else:\n                    order += \"D\"\n                    now_c[1] = D(now_c[1], arm)\n        print(order)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n#\u7d50\u5c40\u3088\u304f\u308f\u304b\u3089\u305a\u89e3\u6cd5\u898b\u3066\u3057\u3082\u305f\n#\u901a\u3063\u305f\u3057\u4eca\u5ea6\u306f\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3084\n\ndef \u89e3():\n    iN = int(input())\n    aP = [[int(_) for _ in sLine.rstrip(\"\\n\").split()] for sLine in sys.stdin.readlines()]\n\n    iMod = sum(aP[0]) % 2\n    for i in range(1,iN):\n        if sum(aP[i]) % 2 != iMod :\n            print(\"-1\")\n            return\n\n    i\u6700\u9060 = max([ abs(iX)+abs(iY) for iX , iY in aP])\n\n    a\u8155 = [1]\n    if iMod == 0 :\n        a\u8155 = [1,1]\n\n    for i in range(32):\n        a\u8155.append(a\u8155[-1] * 2)\n        if i\u6700\u9060 // 2 < a\u8155[-1]:\n            break\n\n    a\u8155.reverse()\n    iLen\u8155 = len(a\u8155)\n    aRet = []\n    for iX,iY in aP:\n        aCommand=[]\n        for i in range(iLen\u8155):\n            if abs(iX) > abs(iY):\n                if iX < 0 :\n                    iX += a\u8155[i]\n                    aCommand.append(\"L\")\n                else:\n                    iX -= a\u8155[i]\n                    aCommand.append(\"R\")\n            else:\n                if iY < 0 :\n                    iY += a\u8155[i]\n                    aCommand.append(\"D\")\n                else:\n                    iY -= a\u8155[i]\n                    aCommand.append(\"U\")\n        aRet.append(\"\".join(aCommand))\n\n    print(iLen\u8155)\n    print((\" \".join([str(_) for _ in a\u8155])))\n    sys.stdout.write(\"\\n\".join(aRet) + \"\\n\")\n\ndef __starting_point():\n    \u89e3()\n\n__starting_point()", "import sys\n\nN = int(input())\n\nco = []\nx, y = map(int, input().split())\nco.append((x, y))\nAmod = (x + y) % 2\nflag = True\nmax_co = abs(x) + abs(y)\nfor i in range(N - 1):\n    x, y = map(int, input().split())\n    co.append((x, y))\n\n    if(Amod != (x + y) % 2):\n        flag = False\n\n    tmp = abs(x) + abs(y)\n    max_co = max(max_co, tmp)\n\nif(flag is False):\n    print(-1)\n    return\n\nex2 = [1, 2, 4, 8, 16, 32]\nexpo = 32\n# print(maxxy)\nwhile(expo < max_co):\n    expo *= 2\n    ex2.append(expo)\n\n\nans_list = []\nfor x, y in co:\n    if Amod == 0:\n        x -= 1\n        ans = \"R\"\n    else:\n        ans = \"\"\n\n    for arm in reversed(ex2):\n        # print(\"present\", x, y)\n        if abs(x) > abs(y):\n            if x > 0:\n                x -= arm\n                ans = \"R\" + ans\n            else:\n                x += arm\n                ans = \"L\" + ans\n        else:\n            if y > 0:\n                y -= arm\n                ans = \"U\" + ans\n            else:\n                y += arm\n                ans = \"D\" + ans\n    # print(x, y)\n\n    ans_list.append(ans)\n\nif Amod == 0:\n    ex2.append(1)\n\nprint(len(ex2))\narm = \"\"\nfor a in ex2:\n    arm += \" \" + str(a)\nprint(arm[1:])\nfor a in ans_list:\n    print(a)", "import os\nimport sys\n\nimport numpy as np\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\n\nN = int(sys.stdin.buffer.readline())\nXY = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(N)]\n\n# \u30de\u30f3\u30cf\u30c3\u30bf\u30f3\u8ddd\u96e2\u306e\u5076\u5947\u306f\u5168\u90e8\u540c\u3058\u3058\u3083\u306a\u3044\u3068\u3060\u3081\nx, y = XY[0]\nodd = (abs(x) + abs(y)) % 2\nok = True\nfor x, y in XY:\n    ok &= (abs(x) + abs(y)) % 2 == odd\n\nif not ok:\n    print(-1)\n    return\n\n\ndef solve(x):\n    # a + b = 2^39 - 1\n    # a - b = x\n    # \u3068\u304a\u3044\u3066 a \u3092\u6c42\u3081\u308b\n    # 2a = 2^39 - 1 + x\n    n = int((2 ** 39 - 1 + x) // 2)\n    ret = []\n    for _ in range(39):\n        if n & 1:\n            ret.append(1)\n        else:\n            ret.append(-1)\n        n >>= 1\n    ret = np.array(ret, dtype=int)\n    return ret\n\n\nP = [complex(x, y) for x, y in XY]\nP = np.array(P)\n# \u30de\u30f3\u30cf\u30c3\u30bf\u30f3\u8ddd\u96e2\u3092\u5947\u6570\u306b\u3059\u308b\n# \u539f\u70b9\u3092 (-1, 0) \u3060\u3051\u305a\u3089\u3059\nif not odd:\n    P -= 1\n# 45\u5ea6\u56de\u8ee2\u3057\u3066\u307f\u308b\n# \u30a2\u30fc\u30e0\u306e\u9577\u3055\u304c\u6c7a\u307e\u3063\u3066\u308b\u3068\u304d\u3001x\u3068y\u306b\u3064\u3044\u3066\u72ec\u7acb\u306b\u30d7\u30e9\u30b9\u30de\u30a4\u30ca\u30b9\u3092\u6c7a\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\nP *= 1 + 1j\n\nD = (2 ** np.arange(39, dtype=int)).tolist()\nans = []\nfor p in P:\n    xd = solve(p.real)\n    yd = solve(p.imag)\n    W = np.empty_like(D, dtype='U1')\n    W[(xd > 0) & (yd > 0)] = 'R'\n    W[(xd > 0) & (yd < 0)] = 'D'\n    W[(xd < 0) & (yd > 0)] = 'U'\n    W[(xd < 0) & (yd < 0)] = 'L'\n    ans.append(''.join(W))\n\nif not odd:\n    D.append(1)\n    for i in range(len(ans)):\n        ans[i] += 'R'\nprint(len(D))\nprint(*D)\nprint(*ans, sep='\\n')\n", "import sys\n#\u7d50\u5c40\u3088\u304f\u308f\u304b\u3089\u305a\u89e3\u6cd5\u898b\u3066\u3057\u3082\u305f\n#\u3053\u308c\u3067\u901a\u308b\u304b\u306a\n\ndef \u89e3():\n    iN = int(input())\n    aP = [[int(_) for _ in sLine.rstrip(\"\\n\").split()] for sLine in sys.stdin.readlines()]\n\n    i\u6700\u9060 = max([ abs(iX)+abs(iY) for iX , iY in aP])\n\n    iMod = sum(aP[0]) % 2\n    for i in range(1,iN):\n        if sum(aP[i]) % 2 != iMod :\n            print(\"-1\")\n            return\n    a\u8155 = [1]\n    if iMod == 0 :\n        a\u8155 = [1,1]\n    for i in range(32):\n        a\u8155.append(a\u8155[-1] * 2)\n        if i\u6700\u9060 // 2 < a\u8155[-1]:\n            break\n    a\u8155.reverse()\n    iLen\u8155 = len(a\u8155)\n    print(iLen\u8155)\n    print((\" \".join([str(_) for _ in a\u8155])))\n    aRet = []\n    for aE in aP:\n        aCommand=[]\n        iX = aE[0]\n        iY = aE[1]\n        for i in range(iLen\u8155):\n            if abs(iX) > abs(iY):\n                if iX < 0 :\n                    iX += a\u8155[i]\n                    aCommand.append(\"L\")\n                else:\n                    iX -= a\u8155[i]\n                    aCommand.append(\"R\")\n            else:\n                if iY < 0 :\n                    iY += a\u8155[i]\n                    aCommand.append(\"D\")\n                else:\n                    iY -= a\u8155[i]\n                    aCommand.append(\"U\")\n        aRet.append(\"\".join(aCommand))\n    sys.stdout.write(\"\\n\".join(aRet) + \"\\n\")\n\ndef __starting_point():\n    \u89e3()\n\n__starting_point()", "import sys\nfin = sys.stdin.readline\n\nN = int(fin())\ncoords = [[int(elem) for elem in fin().split(' ')] for _ in range(N)]\nodd_or_even = abs((coords[0][0] + coords[0][1]) % 2)\nmax_sum = 0\nfor coord in coords:\n    x, y = coord\n    if (x + y) % 2 != odd_or_even:\n        print((-1))\n        return\n    else:\n        max_sum = max(max_sum, abs(x) + abs(y))\n\n# partial solution (because m must not exceed 40)\ndef partial_solution(max_sum, coords):\n    m = max_sum\n    print(m)\n    print((' '.join(['1'] * m)))\n    for coord in coords:\n        x, y = coord\n        count = 0\n        output = \"\"\n        if x > 0:\n            output += \"R\" * x\n        else:\n            output += \"L\" * abs(x)\n        count += abs(x)\n\n        if y > 0:\n            output += \"U\" * y\n        else:\n            output += \"D\" * y\n        count += abs(y)\n\n        assert (m - count) % 2 == 0\n        output += \"LR\" * ((m - count) // 2)\n        print(output)\n#partial_solution(max_sum, coords)\n\ndef padding(binary_expression):\n    len_pad = 31 - len(binary_expression[2:])\n    return \"0\" * len_pad + binary_expression[2:]\n\n\ndef full_solution(max_sum, coords, odd_or_even):\n    mode_map = {(0, 0): \"L\",\n                (1, 1): \"R\",\n                (0, 1): \"D\",\n                (1, 0): \"U\"}\n    rotated_coords = [(x + y, x - y) for x, y in coords]\n    d = []\n    for i in range(31):\n        d.append(2**i)  \n    if odd_or_even == 1:\n        m = 31\n    else:\n        m = 32\n        d.append(1)\n    print(m)\n    print((\" \".join([str(d_elem) for d_elem in d])))\n    if odd_or_even == 1:\n        for rotated_coord in rotated_coords:\n            u, v = rotated_coord\n            const_2pow31 = 2**31\n            flags_u = list(padding(bin((u + const_2pow31 - 1) // 2)))[::-1]\n            flags_v = list(padding(bin((v + const_2pow31 - 1) // 2)))[::-1]\n            flags = [(int(fu), int(fv)) for fu, fv in zip(flags_u, flags_v)]\n            output = \"\".join([mode_map[flag] for flag in flags])\n            print(output)\n    else:\n        for rotated_coord in rotated_coords:\n            u, v = rotated_coord\n            u -= 1\n            v -= 1\n            const_2pow31 = 2**31\n            flags_u = list(padding(bin((u + const_2pow31 - 1) // 2)))[::-1]\n            flags_v = list(padding(bin((v + const_2pow31 - 1) // 2)))[::-1]\n            flags = [(int(fu), int(fv)) for fu, fv in zip(flags_u, flags_v)]\n            output = \"\".join([mode_map[flag] for flag in flags]) + \"R\"\n            print(output)\n\nfull_solution(max_sum, coords, odd_or_even)\n", "N = int(input())\nXY = [list(map(int, input().split(\" \"))) for _ in range(N)]\nparity = (XY[0][0] + XY[0][1]) % 2\nmaxXY = 0\nfor x, y in XY:\n    if (x + y) % 2 != parity:\n        print(\"-1\")\n        return\n    maxXY = max(x+y, maxXY)\narm = [1, 1, ]\nif parity == 1:\n    arm[1] = 2\n\ntmp = arm[1]\nm = 2\n\nfor _ in range(40):\n    tmp *= 2\n    m += 1\n    arm.append(tmp)\n    if tmp > maxXY:\n        break\nprint(m)\nprint((\" \".join(map(str, arm))))\narmR = arm[::-1]\nfor x, y in XY:\n    nowX, nowY = [x, y]\n    ansR = \"\"\n    for l in armR:\n        if abs(nowX) >= abs(nowY):\n            if nowX >= 0:\n                nowX -= l\n                ansR += \"R\"\n            else:\n                nowX += l\n                ansR += \"L\"\n        else:\n            if nowY >= 0:\n                nowY -= l\n                ansR += \"U\"\n            else:\n                nowY += l\n                ansR += \"D\"\n    print((ansR[::-1]))\n\n", "N, *XY = map(int, open(0).read().split())\nXY = list(zip(*[iter(XY)] * 2))\n\nmod = sum(XY[0]) % 2\nif any((x + y) % 2 != mod for x, y in XY):\n    print(-1)\n    return\n\nD = [2 ** i for i in reversed(range(32))] + [1] * (mod == 0)\nprint(len(D))\nprint(*D)\n\nfor x, y in XY:\n    A = []\n    for d in D:\n        if 0 <= x - y and 0 <= x + y:\n            A.append(\"R\")\n            x -= d\n        elif x - y < 0 and 0 <= x + y:\n            A.append(\"U\")\n            y -= d\n        elif 0 <= x - y and x + y < 0:\n            A.append(\"D\")\n            y += d\n        else:\n            A.append(\"L\")\n            x += d\n\n    print(\"\".join(A))", "n=int(input())\nx=[0]*n\ny=[0]*n\nfor i in range(n):\n  x[i],y[i]=map(int,input().split())\n  if(abs(x[i])+abs(y[i]))%2!=(abs(x[0])+abs(y[0]))%2:\n    print(-1)\n    return\nD=[]\nfor i in reversed(range(33)):D.append(1<<i)\nD+=[1,1]\nif(abs(x[0])+abs(y[0]))%2==0:D.append(1)\nprint(len(D))\nprint(*D)\nfor i in range(n):\n  X,Y=x[i],y[i]\n  s=''\n  for d in D:\n    if abs(X)>abs(Y):\n      if X>0:\n        X-=d\n        s+='R'\n      else:\n        X+=d\n        s+='L'\n    else:\n      if Y>0:\n        Y-=d\n        s+='U'\n      else:\n        Y+=d\n        s+='D'\n  print(s)", "n = int(input())\nxy = [[int(item) for item in input().split()] for _ in range(n)]\n\n# If mod2 changes, there are no answer\nmod2 = (xy[0][0] + xy[0][1]) % 2\nfor x, y in xy:\n    if (x + y) % 2 != mod2:\n        print(-1)\n        return\n\nif mod2 == 1:\n    print(31)\n    print(\" \".join([str(2**item) for item in range(31)]))\nelse:\n    print(32)\n    print(\"1 \" + \" \".join([str(2**item) for item in range(31)]))\n\nfor x, y in xy:\n    if mod2 == 0:\n        x -= 1\n        print(\"R\", end=\"\")\n    u = x + y\n    v = x - y\n    bits = [[0] * 31 for _ in range(2)]\n    if u < 0:\n        bits[0] = [1] * 31\n        bits[0][30] = 0\n    else:\n        bits[0][30] = 1\n    if v < 0:\n        bits[1] = [1] * 31\n        bits[1][30] = 0\n    else:\n        bits[1][30] = 1\n    for i in range(30):\n        if u >= 0 and abs(u)//2>>i & 1:\n            bits[0][i] = 1\n        if u < 0 and abs(u)//2>>i & 1:\n            bits[0][i] = 0\n        if v >= 0 and abs(v)//2>>i & 1:\n            bits[1][i] = 1\n        if v < 0 and abs(v)//2>>i & 1:\n            bits[1][i] = 0\n    for u_b, v_b in zip(bits[0], bits[1]):\n        if u_b == 1 and v_b == 1:\n            print(\"R\", end=\"\")\n        elif u_b == 0 and v_b == 0:\n            print(\"L\", end=\"\")\n        elif u_b == 1 and v_b == 0:\n            print(\"U\", end=\"\")\n        elif u_b == 0 and v_b == 1:\n            print(\"D\", end=\"\")\n    print(\"\")\n", "def solve(x, y, d, m):\n    ret = \"\"\n    for i in range(m):\n        if x + y >= 0 and x - y >= 0:\n            ret += \"R\"\n            x -= d[i]\n        elif x + y >= 0 and x - y < 0:\n            ret += \"U\"\n            y -= d[i];\n        elif x + y < 0 and x - y >= 0:\n            ret += \"D\"\n            y += d[i];\n        else:\n            ret += \"L\"\n            x += d[i]\n    print (ret)\n\n\ndef main():\n    m = 34\n    X, Y, d = [], [], []\n\n    for i in range(32, 0, -1):\n        d += [2**i]\n    d += [1]\n\n    N = int(input())\n    even, odd = 0, 0\n\n    for i in range(N):\n        x, y = list(map(int, input().split()))\n        X += [x]; Y += [y]\n    \n        if (abs(x) + abs(y)) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    if even and odd:\n        print((-1))\n        return 0\n\n    if odd:\n        m -= 1\n    else:\n        d += [1]\n\n    print(m)\n    print((\" \".join(map(str, d))))\n\n    for i in range(N):\n        solve(X[i], Y[i], d, m)\n\nmain()\n", "import sys\n\nN = int(input())\nXY = list()\nfor i in range(N):\n    XY.append(list(map(int, input().split(\" \"))))\n\neo = sum(XY[0]) % 2\nfor xy in XY:\n    if (sum(xy) % 2 != eo):\n        print((-1))\n        return\n\nm = 40 - eo\nprint(m)\nD = [2 ** i for i in range(38, -1, -1)]\nif eo == 0:\n    D.append(1)\n\nprint((\" \".join(map(str, D))))\nfor x, y in XY:\n    w = \"\"\n    for i in range(m):\n        if 0 <= x - y and 0 <= x + y:\n            w += \"R\"\n            x -= D[i]\n        elif 0 > x - y and 0 <= x + y:\n            w += \"U\"\n            y -= D[i]\n        elif 0 <= x - y and 0 > x + y:\n            w += \"D\"\n            y += D[i]\n        else:\n            w += \"L\"\n            x += D[i]\n    print(w)\n", "import sys\n\nN = int(input())\nXY = [[int(_) for _ in input().split()] for i in range(N)]\n\nmc = [0, 0]\nmaxl = 0\n\nfor x, y in XY:\n    l = abs(x) + abs(y)\n    maxl = max(maxl, l)\n    mc[l % 2] += 1\n\nif mc[0] > 0 and mc[1] > 0:\n    print((-1))\n    return\n\ndef calc(sx, sy, ex, ey, d):\n    dx, dy = ex - sx, ey - sy\n    if dx > dy:\n        if dx > -dy:\n            return \"R\", sx + d, sy\n        else:\n            return \"D\", sx, sy - d\n    else:\n        if dx > -dy:\n            return \"U\", sx, sy + d\n        else:\n            return \"L\", sx - d, sy\n\nimport math\n\nl = math.ceil(math.log(maxl + 1, 2))\n\nms = [1 << i for i in range(l)][::-1]\n\nrms = ms\n\nif mc[0] > 0:\n    rms = [1] + ms\n\nprint((len(rms)))\nprint((*rms))\n\nfor ex, ey in XY:\n    x, y = 0, 0\n    w = \"\"\n    if mc[0] > 0:\n        w = \"R\"\n        x += 1\n    for m in ms:\n        d, x, y = calc(x, y, ex, ey, m)\n        w += d\n    print(w)\n\n", "n = int(input())\nXY = [list(map(int, input().split())) for _ in range(n)]\nmod = sum(XY[0])%2\nfor x, y in XY:\n    if mod != (x+y)%2:\n        print((-1))\n        return\n\nm = 33-mod\nprint(m)\nD = [2**i for i in range(31, -1, -1)]\nif mod == 0:\n    D.append(1)\n\nprint((\" \".join(map(str, D))))\nfor x, y in XY:\n    w = \" \"\n    for d in D:\n        if x-y >= 0 and x+y >= 0:\n            w += \"R\"\n            x -= d\n        elif x-y < 0 and x+y >= 0:\n            w += \"U\"\n            y -= d\n        elif x-y >= 0 and x+y < 0:\n            w += \"D\"\n            y += d\n        else:\n            w += \"L\"\n            x += d\n    print(w)\n\n", "# \u30c1\u30a7\u30c3\u30af\u306b\u6f0f\u308c\u304c\u3042\u308a\u3001kyasper 11/21 2:28:53\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3060\u3068\u9593\u9055\u3044\n# ----------\n# \u4f8b\uff1a\n# 3\n# -2 1\n# 1 0\n# 1 -2\n# ----------\n\nfrom math import *\n\ndef L(xi, di):\n    return xi - di\n\ndef R(xi, di):\n    return xi + di\n\ndef D(yi, di):\n    return yi - di\n\ndef U(yi, di):\n    return yi + di\n\ndef main():\n    N = int(input())\n    x_list = [list(map(int, input().split())) for i in range(N)]\n    sum_list = [abs(x[0]) + abs(x[1]) for x in x_list]\n    checker = sum_list[0] % 2\n\n    for wa in sum_list:\n        if wa % 2 != checker:\n            print(\"-1\")\n            return\n\n    arm_list = []\n    if checker == 0:\n        arm_list.append(1)\n\n    pow_i = 0\n    max_sum = max(sum_list)\n    while max_sum > sum(arm_list):\n        arm_list.append(2 ** pow_i)\n        pow_i += 1\n    arm_list = sorted(arm_list, key=lambda x: -x)\n    print(len(arm_list))\n    print(\" \".join(map(str, arm_list)))\n\n    for c in x_list:\n        now_c = [0,0]\n        order = \"\"\n\n        for arm in arm_list:\n            dx = c[0] - now_c[0]\n            dy = c[1] - now_c[1]\n\n            if abs(dx) > abs(dy):\n                if dx > 0:\n                    order += \"R\"\n                    now_c[0] = R(now_c[0], arm)\n                else:\n                    order += \"L\"\n                    now_c[0] = L(now_c[0], arm)\n            else:\n                if dy > 0:\n                    order += \"U\"\n                    now_c[1] = U(now_c[1], arm)\n                else:\n                    order += \"D\"\n                    now_c[1] = D(now_c[1], arm)\n        print(order)\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\nN = int(input())\nXY = np.array([[int(x) for x in input().split()] for _ in range(N)],dtype=np.int64)\nX = XY[:,0]\nY = XY[:,1]\ncommand  = np.array([\"\"]*N,dtype=object)\n\ndef solve(k,X,Y,arms,command):\n    if k==-1:\n        return final_solve(X,Y,arms,command)\n    else:\n        #\u5927\u304d\u3044\u65b9\u3092\u5909\u63db\n        #print(X,Y)\n        bl_X = (np.abs(X)>np.abs(Y))\n        bl_Y = ~bl_X\n        neg_X = (X<0)\n        neg_Y = (Y<0)\n        L = bl_X & neg_X\n        R = bl_X & (~neg_X)\n        U = bl_Y & (~neg_Y)\n        D = bl_Y & neg_Y\n        p = 1<<k\n        command[L] += \"L\"\n        command[R] += \"R\"\n        command[U] += \"U\"\n        command[D] += \"D\"\n        X[L] +=p\n\n        X[R] -=p\n\n        Y[U] -=p\n\n        Y[D] +=p\n\n        arms.append(p)\n        return solve(k-1,X,Y,arms,command)\ndef final_solve(X,Y,arms,command):\n    s = np.abs(X)+np.abs(Y)\n    b0 = (s==0).all()\n    b1 = (s==1).all()\n    if b0:\n        return arms,command\n    elif not b1:\n        return None,None\n\n    arms.append(1)\n    L = (X==-1)\n    R = (X==1)\n    D = (Y==-1)\n    U = (Y==1)\n    command[L] += \"L\"\n    command[R] += \"R\"\n    command[U] += \"U\"\n    command[D] += \"D\"\n    return arms,command\n\n\narms,command = solve(35,X,Y,[],command)\n\nif arms is None:\n    print(-1)\nelse:\n    print(len(arms))\n    print(\" \".join([str(i) for i in arms]))\n    print(\"\\n\".join(command))"]