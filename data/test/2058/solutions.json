["#!/usr/bin/env python3\n\na = input()\nb = input()\n\nsumi = 0\n\nfor i in range(len(b) - len(a) + 1):\n    if b[i] == '1':\n        sumi += 1\n\nlowest = 0\nhighest = len(b) - len(a) + 1\n\ntotal = 0\nfor i in range(len(a)):\n    if a[i] == '0':\n        total += sumi\n    else:\n        total += highest - lowest - sumi\n    if b[lowest] == '1':\n        sumi -= 1\n    if highest < len(b) and b[highest] == '1':\n        sumi += 1\n    lowest += 1\n    highest += 1\nprint(total)\n", "a=input()\nb=input()\n\nA=len(a)\nB=len(b)\nd=B-A+1\n\nl=[-1]*A\n\ncount=0\n\nfor i in range (d):\n    if b[i]=='1':\n        count += 1\n\nl[0]=count\nc=0\n\nfor i in range (d, B):\n    if b[i] == '1':\n        count += 1\n    if b[c] == '1':\n        count -= 1\n    c += 1\n    l[c]=count\n\nnet=0\n\nfor i in range (A):\n    if a[i] == '0':\n        net += l[i]\n    else:\n        net += d - l[i]\n\nprint(net)\n", "import math\n\n\n#n, s = tuple(map(int, input().split()))\n#floors = [0 for i in range(s + 1)]\n\n#for i in range(n):\n#    floor, time = tuple(map(int, input().split()))\n#    floors[floor] = max(floors[floor], time)\n\n#res = s\n#for i in range(s + 1):\n#    res = max(res, floors[i] + i)\n\n#print(res)\n\na = input()\nb = input()\nshift = [0]\nfor i in range(len(b) - len(a) + 1):\n    shift[0] += int(b[i])\nfor i in range(len(a) - 1):\n    shift.append(shift[i] - int(b[i]) + int(b[len(b) - len(a) + i + 1]))\n\nres = 0\nfor i in range(len(a)):\n    if a[i] == '0':\n        res += shift[i]\n    else:\n        res += len(b) - len(a) + 1 - shift[i]\nprint(res)\n\n", "a = list(map(int, input()))\nb = list(map(int, input()))\n\nps = [0] * (len(b) + 1)\nfor i in range(len(b)):\n    ps[i + 1] = ps[i] + b[i]\n\nans = 0\nfor i in range(len(a)):\n    left = i\n    right = len(b) - len(a) + i + 1\n    sub = ps[right] - ps[left]\n    if a[i] == 1:\n        sub = right - left - sub\n    ans += sub\nprint(ans)", "a = input().rstrip()\nb = input().rstrip()\nn, m = len(a), len(b)\nq = [0] * (m + 1)\nfor i in range(1, m + 1):\n    q[i] = q[i - 1] + int(b[i - 1])\nans = 0\nw = m - n + 1\nfor i in range(n):\n    if a[i] == '0':\n        ans += q[w + i] - q[i]\n    else:\n        ans += w - (q[w + i] - q[i])\nprint(ans)", "import math\nimport itertools\n\na = [int(x) for x in input().rstrip()]\nb = [int(x) for x in input().rstrip()]\nn = len(a)\nm = len(b)\nprefix_b = [0] + list(itertools.accumulate(b))\nres = 0\nfor i in range(n):\n    ones = prefix_b[-n+i] - prefix_b[i]\n    res += m-n+1 - ones if a[i] else ones\nprint(res)\n    \n\n    \n", "a, b = '0'+input(),'0'+input()\nm, n = len(a), len(b)\nc, s = [0]*(n+1), 0 \nif m <= n:    \n    for i in range(1,n):\n        c[i] = int(b[i]) + c[i-1]\n    for i in range(1,m):\n        if a[i] == '0':\n            s += c[i+n-m]-c[i-1]\n        else:\n            s += n-m+1 - (c[i+n-m]-c[i-1])\nprint(s)\n", "#!/usr/bin/env python3\n\na, b = input(), input()\nalen, blen = len(a), len(b)  # blen >= alen\n\ndiff = blen-alen\ncount = b[:diff+1].count('0')\nresult = 0\nfor i in range(0, alen):\n    #print('at i=%d, count=%d' % (i, count))\n    result += diff+1-count if a[i] == '0' else count\n    #print('compared at', i, diff+i+1)\n    if i == alen-1: break\n    count -= 1 if b[i] == '0' else 0\n    count += 1 if b[diff+1+i] == '0' else 0\nprint(result)\n", "import sys\n\na = sys.stdin.readline().rstrip()\nb = sys.stdin.readline().rstrip()\n\nla, lb = len(a), len(b)\nsum, cur = 0, 0\n\nfor i in range(lb - la + 1):\n    cur += int(b[i])\n\nfor i in range(la):\n    if a[i] == '0':\n        sum += cur\n    else:\n        sum += (lb - la + 1) - cur\n\n    if i != la - 1:\n        if b[i] == '1':\n            cur -= 1\n        if b[lb-la+i+1] == '1':\n            cur += 1\n\nprint(sum)\n\n", "__author__ = 'MoonBall'\n\nimport sys\n# sys.stdin = open('data/B.in', 'r')\nT = 1\n\ndef process():\n    a = input()\n    b = input()\n    zero = [0] * 210000\n\n    for i, c in enumerate(a):\n        zero[i + 1] = zero[i] + (1 if c == '0' else 0)\n\n    ans = 0\n    for i, c in enumerate(b):\n        s = max(1, len(a) - (len(b) - i) + 1)\n        e = min(i + 1, len(a))\n        z = (1 if c == '0' else 0)\n        o = 1 - z\n\n        ans += z * (e - s + 1 - (zero[e] - zero[s - 1]))\n        ans += o * (zero[e] - zero[s - 1])\n\n    print(ans)\n\n\n\n\n\n\n\n\nfor _ in range(T):\n    process()\n", "a = input()\nb = input()\nnum_n = [0]\nnum_one = [0]\nfor elem in a:\n    if elem == '1':\n        num_one.append(num_one[-1] + 1)\n        num_n.append(num_n[-1])\n    else:\n        num_one.append(num_one[-1])\n        num_n.append(num_n[-1] + 1)  \nres = 0\nla = len(a)\nlb = len(b)\nfor i in range(lb):\n    left = max(0, i - lb + la)\n    right = min(la - 1, i)\n    if b[i] == '1':\n        res += num_n[right + 1] - num_n[left]\n    else:\n        res += num_one[right + 1] - num_one[left]\nprint(res)", "a = list(input())\nb = list(input())\nsum = 0\nfor i in range(len(a)):\n    sum += int(a[i])\n    a[i] = sum\na.insert(0, 0)\nsum = 0\nfor i in range(len(b)):\n    l = max(0, len(a) - 1 - (len(b) - i))\n    r = min(len(a) - 2, i)\n    col1 = a[r + 1] - a[l]\n    col2 = r - l + 1 - col1\n    if b[i] == '0':\n        sum += col1\n    else:\n        sum += col2\nprint(sum)\n", "read = lambda: list(map(int, input()))\na, b = read(), read()\nn, m = len(a), len(b)\ncnt1 = [0] * (n + 1)\ncnt0 = [0] * (n + 1)\nif a[0]: cnt1[0] = 1\nelse: cnt0[0] = 1\nfor i in range(1, n):\n    cnt1[i] = cnt1[i - 1]\n    cnt0[i] = cnt0[i - 1]\n    if a[i]: cnt1[i] += 1\n    else: cnt0[i] += 1\nSum = 0\nfor i in range(m):\n    L = max(0, n + i - m)\n    R = min(n - 1, i)\n    if b[i]: cur = cnt0[R] - cnt0[L - 1]\n    else: cur = cnt1[R] - cnt1[L - 1]\n    Sum += cur\nprint(Sum)\n", "a = input()\nb = input()\nal = len(a)\nbl = len(b)\nnum = bl - al + 1\nnum2 = 0\nfor i in range(num):\n    if a[0] != b[i]:\n        num2 += 1\nnum3 = num2\nfor i in range(1,al):\n    if a[i-1] != a[i]:\n        if a[i] == b[i-1]:\n            num2 -= 1\n        num2 = num - num2 - 1\n    else:\n        if a[i] != b[i-1]:\n            num2 -= 1\n    if a[i] != b[i+num-1]:\n        num2 += 1\n    num3 += num2\nprint(num3)\n", "a=input()\nb=input()\na1=[0]\ncurr=0\nfor i in b:\n    if i=='1':\n        curr+=1\n    a1.append(curr)\na2=[0]\ncurr=0\nfor i in b:\n    if i=='0':\n        curr+=1\n    a2.append(curr)\nans=0\nfor i in range(len(a)):\n    if a[i]=='0':\n        t=a1[len(b)-len(a)+i+1]-a1[i]\n        if t>=0:\n            ans+=t\n        else:\n            break\nfor i in range(len(a)):\n    if a[i]=='1':\n        t=a2[len(b)-len(a)+i+1]-a2[i]\n        if t>=0:\n            ans+=t\n        else:\n            break\nprint(ans)\n", "a=input()\nb=input()\nt=0\nans=0\np=len(b)-len(a)+1\n\nfor i in range(len(b)-len(a)+1):\n    t+=int(b[i])\n\nfor j in range(len(a)):\n    v=int(a[j])\n    if v==1:\n        ans=ans+p-t\n    else:\n        ans=ans+t\n    if j==len(a)-1:\n        break\n    t=t+int(b[p+j])\n    t=t-int(b[j])\n\nprint(ans)\n", "s = [bool(int(i)) for i in input()]\nn = [bool(int(i)) for i in input()]\nk = 0\na = 0\nb = 0\nn1 = [0]\nfor i in n:\n\ta+=i\n\tn1.append(a)\nfor i in range(len(s)):\n\tif not s[i]:\n\t\tk+=(n1[len(n)-len(s)+i+1]-n1[i])\n\telse:\n\t\tk+=(len(n)-len(s)+i+1 - n1[len(n)-len(s)+i+1]-(i - n1[i]))\nprint(k)\n\t\n", "def main():\n    a = input()\n    b = input()\n\n    total_comparable = len(b) - len(a) + 1\n    if total_comparable < 1:\n        print(0)\n        return\n\n    cumulitive_one_b = [0] * len(b)\n\n    for i in range(len(b)):\n        if i != 0:\n            cumulitive_one_b[i] += cumulitive_one_b[i - 1]\n\n        if b[i] == '1':\n            cumulitive_one_b[i] += 1\n\n    hamming_distance = 0\n\n    for i in range(len(a)):\n        start = i\n        end = i + total_comparable - 1\n        if start == 0:\n            total_comparable_one = cumulitive_one_b[end]\n        else:\n            total_comparable_one = cumulitive_one_b[end] - cumulitive_one_b[start - 1]\n\n        if a[i] == '0':\n            hamming_distance += total_comparable_one\n        else:\n            hamming_distance += total_comparable - total_comparable_one\n\n    print(hamming_distance)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a = input()\nb = input()\nans = 0\npref = [0 for i in range(len(b) + 1)]\nfor i in range(len(b)):\n    pref[i + 1] = pref[i] + int(b[i])\nfor i in range(len(a)):\n    ans += abs(int(a[i]) * (len(b) - len(a) + 1) - pref[len(b) - len(a) + i + 1] + pref[i])\nprint(ans)", "a = input()\nb = input()\nl = len(b)\np0 = [0] * (l + 1)\ns0 = [0] * (l + 1)\np1 = [0] * (l + 1)\ns1 = [0] * (l + 1)\n\nfor i in range(l):\n    if b[i] == '0':\n        p1[i + 1] = p1[i] + 1\n        p0[i + 1] = p0[i]\n    else: \n        p0[i + 1] = p0[i] + 1\n        p1[i + 1] = p1[i]\n    \nfor i in range(l - 1, -1, -1):\n    if b[i] == '0':\n        s1[i] = s1[i + 1] + 1\n        s0[i] = s0[i + 1]\n    else:\n        s0[i] = s0[i + 1] + 1\n        s1[i] = s1[i + 1]\n    \nl1 = len(a)\nres = 0\nfor i in range(l1):\n    if a[i] == '0':\n        res += p0[l] - p0[i] - s0[l - l1 + i + 1]\n    if a[i] == '1':\n        res += p1[l] - p1[i] - s1[l - l1 + i + 1]   \nprint(res)", "def solve():\n    S = input()\n    T = input()\n\n    lens = len(S)\n    lent = len(T)\n\n    a0 = [0] * lens\n    a1 = [0] * lens\n    for i in range(lens):\n        if i > 0:\n            a0[i] = a0[i - 1]\n            a1[i] = a1[i - 1]\n        if S[i] == '0':\n            a1[i] += 1\n        else:\n            a0[i] += 1\n\n    ans = 0\n    for i in range(lens):\n        if T[i] == '0':\n            ans += a0[i]\n        else:\n            ans += a1[i]\n\n    for i in range(lens, lent):\n        if T[i] == '0':\n            ans += a0[-1]\n        else:\n            ans += a1[-1]\n\n    for i in range(lent - lens + 1, lent):\n        d = lent - i\n        if T[i] == '0':\n            ans -= a0[-d - 1]\n        else:\n            ans -= a1[-d - 1]\n\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "p = input()\ns = input()\nn = len(s)\nans = 0\ndl = len(s) - len(p)\nm = ([(0, 0), (0, 1)] if s[0] == '1' else [(0, 0), (1, 0)])\nfor i in range(1, n):\n     if s[i] == '0':\n         m.append((m[-1][0] + 1, m[-1][1]))\n     else:\n         m.append((m[-1][0], m[-1][1] + 1))\n\nfor i in range(len(p)):\n     if p[i] == '0':\n          ans += (m[dl + i + 1][1] - m[i][1])\n     else:\n          ans += (m[dl + i + 1][0] - m[i][0])\nprint(ans)\n", "import sys\nif False:\n\tinp = open('B.txt', 'r')\nelse:\n\tinp = sys.stdin\ncount = [0]\n\na = inp.readline().strip()\nb = inp.readline().strip()\nfor i in range(len(b)):\n\tcount.append(count[i] + int(b[i]))\nlengthA = len(a)\nlengthB = len(b)\nans = 0\nfor i in range(lengthA):\n\tif a[i] == '0':\n\t\tans += count[lengthB + i - lengthA + 1] - count[i]\n\telse:\n\t\tans += lengthB - lengthA + 1 - count[lengthB + i - lengthA + 1] + count[i]\nprint(ans)\n\t\t\n\n\n\n\n\n", "a = input()\nb = input()\na_ones = [0 for i in range(len(a)+2)]\na_zeros = [0 for i in range(len(a)+2)]\ncounter1 = 0\ncounter0 = 0\ntotal = 0\nones = 0\nzeros = 0\nla = len(a)\nk = len(b)-la+1\nfor i in range(la):\n    if a[i] == '1':\n        counter1 += 1\n    else:\n        counter0 += 1\n    a_ones[i] = counter1\n    a_zeros[i] = counter0\nla -= 1\nif len(a)*2 <= len(b):\n    for i in range(len(b)):\n        if i < la:\n            ones = a_ones[i]\n            zeros = a_zeros[i]\n            if b[i] == '0':\n                total += ones\n            else:\n                total += zeros\n        elif (la <= i)and(i <= len(b)-la-1):\n            ones = a_ones[la]\n            zeros = a_zeros[la]\n            if b[i] == '0':\n                \n                total += ones\n            else:\n                total += zeros\n        else:\n            ones = a_ones[la]-a_ones[-len(b)+la+i]\n            zeros = a_zeros[la]-a_zeros[-len(b)+la+i]\n            if b[i] == '0':\n                total += ones\n            else:\n                total += zeros\n    print(total)\nelse:\n    for i in range(len(b)):\n        if i < len(b)-la-1:\n            ones = a_ones[i]\n            zeros = a_zeros[i]\n            if b[i] == '0':\n                total += ones\n            else:\n                total += zeros\n        elif i > la:\n            ones = a_ones[la]-a_ones[-len(b)+la+i]\n            zeros = a_zeros[la]-a_zeros[-len(b)+la+i]\n            if b[i] == '0':\n                total += ones\n            else:\n                total += zeros\n        else:\n            ones = a_ones[i+len(b)-la-k]-a_ones[i-k]\n            zeros = a_zeros[i+len(b)-la-k]-a_zeros[i-k]\n            if b[i] == '0':\n                total += ones\n            else:\n                total += zeros\n    print(total)\n    \n    \n", "a,b,c,d,e=input(),input(),[0],0,0\nfor i in range(len(b)):d+=int(b[i]);c.append(d)\nfor i in range(len(a)):\n    nOO=c[len(b)-(len(a)-i)+1]-c[i]\n    nOZ=len(b)-len(a)+1-nOO\n    if a[i]=='0':e+=nOO\n    else:e+=nOZ\nprint(e)"]