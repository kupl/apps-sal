["import copy\nimport fractions\nimport itertools\nimport numbers\nimport string\nimport sys\n\n###\n\ndef to_basex(num, x):\n\twhile num > 0:\n\t\tyield num % x\n\t\tnum //= x\n\ndef from_basex(it, x):\n\tret = 0\n\tp = 1\n\tfor d in it:\n\t\tret += d*p\n\t\tp *= x\n\treturn ret\n\n###\n\ndef core():\n\tn = int(input())\n\ta = [int(x) for x in input().split()]\n\t\n\tm = min(a)\n\ts = sum(a)\n\tans = s\n\tfor ai in a:\n\t\tfor d in range(1, ai+1):\n\t\t\tif ai % d == 0:\n\t\t\t\tcand = s - ai - m + ai//d + m*d\n\t\t\t\tans = min(ans, cand)\n\t\n\tprint(ans)\n\n\ncore()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "n = int(input())\na = list(map(int,input().split()))\na = sorted(a)\n\nbase_sum = sum(a)\n\nsmallest = a[0]\nmin_sum = sum(a)\nif n==1:\n    print(min_sum)\n    return\n\nseen = set()\nfor x in a[1:]:\n    if x in seen:continue\n    seen.add(x)\n    without = base_sum - a[0] - x\n    for div in range(2,x+1):\n        if x%div == 0:\n            min_sum = min(min_sum,without + smallest*div + x//div)\n\nprint (min_sum)", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\n\n\n\n\nn=nn()\n\nl=lm()\n\nl.sort()\n\ns=sum(l)\n\nms=s\nfor num in l:\n\tfor j in range(1,num//2+1):\n\t\tif num%j==0:\n\t\t\tnewnum=num//j\n\t\t\tnewsum=s-num+newnum-l[0]+j*l[0]\n\n\t\t\tms=min(newsum,ms)\n\n\nprint(ms) \n", "def fac(n):\n    b=[1]\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            b.append(i)\n            if i!=n//i:\n                b.append(n//i)\n    return b\n    \nn=int(input())\na=list(map(int,input().split()))\ns=sum(a)\nm=10**9\na.sort()\nfor i in a[::-1]:\n    for j in fac(i):\n        m=min(m,s+ a[0]*j  + i//j - a[0] - i)\n        #print(m,i,j)\nprint(m)        ", "n = int(input())\narr = list(map(int, input().split()))\nd = dict()\nfor el in arr:\n    d[el] = d.get(el, 0) + 1\nmin_ans = 0\nfor el1 in d:\n    for el2 in d:\n        if el1 != el2:\n            for x in range(2, 101):\n                if el1 % x == 0:\n                    min_ans = min(min_ans, el1 // x + el2 * x - el1 - el2)\nprint(sum(arr) + min_ans)\n", "n = int(input())\narr = [int(x) for x in input().split()]\narr.sort()\np = sum(arr)\na = []\nd = {}\nfor i in range(1, 101):\n    d[i] = 0\nfor i in arr:\n    d[i] += 1\nfor i in range(1, 101):\n    for j in range(1, 101):\n        if j % i == 0:\n            for k in range(1, 101):\n                a.append((j, k, (k + j - j // i - k * i)))\nm = -100000000\nfor i in a:\n    if i[0] == i[1]:\n        if d[i[0]] >= 2:\n            m = max(m, i[2])\n    else:\n        if d[i[0]] != 0 and d[i[1]] != 0:\n            m = max(m, i[2])\nprint(p - m)", "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\nif n == 1:\n    print(s)\n    return\nans = s\nc = {}\nfor i in range(n):\n    if a[i] not in c:\n        c[a[i]] = 0\n    c[a[i]] += 1\n\nds = {}\nfor i in range(1, 102):\n    ds[i] = []\n    for j in range(1, i+1):\n        if i % j == 0:\n            ds[i].append(j)\n\nfor v1 in c.keys():\n    for v2 in c.keys():\n        if v1 == v2 and c[v1] == 1:\n            continue\n        for d in ds[v1]:\n            ch = -(v1 - v1//d) + (v2*d - v2)\n            ans = min(ans, s + ch)\n\nprint(ans)", "def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef get_divisors(num):\n    res = []\n    for i in range(2, num + 1):\n        if num % i == 0:\n            res.append(i)\n    return res\n\n\ndef solve(powers):\n    s = sum(powers)\n    smallest = min(powers)\n    cur_res = s\n    for num in set(powers):\n        for divisor in get_divisors(num):\n            candidate = s - num + num // divisor - smallest + smallest * divisor\n            cur_res = min(cur_res, candidate)\n    print(cur_res)\n\n\ndef main():\n    n, = read_nums()\n    powers = read_nums()\n    solve(powers)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "list_int_input = lambda inp: list(map(int, inp.split()))\nint_input = lambda inp: int(inp)\nstring_to_list_input = lambda inp: list(inp)\n\n\nn=int(input())\nlst=list(map(int,input().split()))\nminn=min(lst)\nsumm=sum(lst)\nsum1=summ\nval=-1\nfor i in range(50,1,-1):\n    for j in lst:\n        if j%i==0:\n            val=i\n            sum1=min(summ-minn-j+int(j/i)+(i*minn),sum1)\nprint(sum1)\n\n", "import sys\nfrom math import *\nfrom fractions import gcd\nreadints=lambda:list(map(int, input().strip('\\n').split()))\n\nn = int(input())\na = list(readints())\n\ns = sum(a)\nm = min(a)\n\nbest = s\nfor x in a:\n    for d in range(1,x+1):\n        if x%d==0:\n            dx=x/d\n            dm=m*d\n            s2 = s-x-m+dx+dm\n            best = min(best,s2)\n\nbest=int(best)\n\nprint(best)\n    \n", "\nn = int(input())\narr = list(map(int,input().strip().split()))\n\nx = sum(arr)\narr = sorted(arr)\nans = [x]\nfor i in range(n-1,-1,-1):\n    for j in range(1,arr[i]+1):\n        if arr[i]%j==0:\n            if arr[i]+arr[0] > (arr[i]//j)+arr[0]*j:\n                ans.append(x-arr[i]-arr[0]+arr[0]*j+(arr[i]//j))\n\nprint(min(ans))\n", "import math\n\ndef __starting_point():\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    \n    b = sum(a)\n    a = list(set(a))\n    n = len(a)\n    improv = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i] < a[j]:\n                found = False\n                k = 2\n                current = 0\n                while not found:\n                    if a[j]%k == 0:\n                        found = True\n                        current = max(a[i]+a[j]-a[i]*k-a[j]//k, current)\n                    if found and k < math.sqrt(a[j]/a[i]):\n                        found = False\n                    k = k+1\n                improv = max(improv, current)\n    print(b - improv)\n__starting_point()", "import math\n\nn = int(input())\na = list(map(int, input().split()))\ns = sum(a)\na.sort()\nans = s\nfor i in range(n - 1, 0, -1):\n    cur = s - a[0] - a[i]\n    for j in range(2, int(math.sqrt(a[i]) + 1)):\n        if a[i] % j == 0:\n            ans = min(ans, cur + a[0] * j + a[i] // j)\nprint(ans)\n", "n = int(input())\nl = list(map(int,input().split()))\ncnt = sum(l)\nans = []\nans.append(cnt)\nl = set(l)\nl = list(l)\nfor i in range(len(l)):\n    tmp = []\n    for k in range(1,l[i] + 1):\n        if l[i] % k == 0:\n            tmp.append(k)\n    for k in range(len(tmp)):\n        for j in range(len(l)):\n            if i == j:\n                continue\n            ans.append(cnt - l[i] - l[j] + l[i] // tmp[k] + l[j] * tmp[k])\nans.sort()\nprint(ans[0])\n", "def factors(a):\n        f=[]\n        for i in range(2,a):\n                if a%i==0:f.append(i)\n        return f\nn=int(input())\na=list(map(int,input().split()))\na.sort()\nsm=sum(a)\nans=sm\ni=n-1\nwhile i>0:\n        f=factors(a[i])\n        if f:\n                for j in f:\n                        x,y=a[i]//j,a[0]*j\n                        ans=min(ans,sm-a[i]-a[0]+x+y)\n        i-=1\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\nsu = sum(a)\na.sort()\nmi = a[0]\ni = 0\nma = 0\ns = list(set(a))\nn = len(s)\nwhile i < n:\n\tj=2\n\twhile j<s[i]:\n\t\tif s[i]%j == 0:\n\t\t\tans = (j-1)*(int(s[i]/j)-mi)\n\t\t\tma = max(ma,ans)\t\t\n\t\tj+=1\n\ti+=1\t\nprint(su-ma)\n", "n = int(input())\na = [int(t) for t in input().split(' ')]\n\nmin_number = min(a)\n\ndefaultpower = sum(a)\nminpower = defaultpower\n\nfor m in range(2, max(a)+1):\n    maxi = -1\n    for i in range(n):\n        if a[i] % m == 0 and (maxi == -1 or a[i] > a[maxi]):\n            maxi = i\n\n    if maxi == -1: continue\n\n    power = defaultpower - min_number - a[maxi] + min_number * m + a[maxi] // m\n\n    minpower = min(power, minpower)\n\nprint(minpower)\n", "from collections import deque, Counter, OrderedDict\nfrom heapq import nsmallest, nlargest\nfrom math import ceil,floor,log,log2,sqrt,gcd,factorial\ndef binNumber(n,size=1):\n    return bin(n)[2:].zfill(size)\n\ndef iar():\n    return list(map(int,input().split()))\n\ndef ini():\n    return int(input())\n\ndef isp():\n    return list(map(int,input().split()))\n\ndef sti():\n    return str(input())\n\ndef par(a):\n    return ' '.join(list(map(str,a)))\n\nclass pair:\n    def __init__(self,f,s):\n        self.fi = f\n        self.se = s\n    def __lt__(self,other):\n        return (self.fi,self.se) < (other.fi,other.se)\n\n#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\ndef __starting_point():\n    n = ini()\n    a = iar()\n    mi = min(a)\n    mis = sum(a)\n    mas = mis\n    for i in a:\n        if i == mi:\n            continue\n        j = 2\n        while j*j <= i:\n            if i%j == 0:\n                c1 = i//j\n                c2 = mi*j\n                x = mas - mi - i + c1 + c2\n                if x < mis:\n                    mis = x\n                if j != i//j:\n                    k = i//j\n                    c1 = i//k\n                    c2 = mi*k\n                    x = mas + c1 + c2 - mi - i\n                    if x < mis:\n                        mis = x\n            j += 1\n    print(mis)\n\n__starting_point()", "input()\nL=list(map(int,input().split()))\nL.sort()\na=L[0]\nk=0\nfor i in L:\n    for j in range(1,int(i**0.5+1)):\n        if i%j==0 and (a+i)-(i//j+a*j)>k:k=(a+i)-(i//j+a*j)\nprint(sum(L)-k)", "# Bismillahirahmanirahim\n# Soru 1\n#\n# nv = list(map(int, input().split()))\n#\n# n = nv[0] - 1\n# v = nv[1]\n# if v >= n:\n#     print(n)\n#     quit()\n# k = 2\n# money = v\n# while n - v > 0:\n#     n = n - 1\n#     money += k\n#     k += 1\n# print(money)\n\n#Soru2\ndef carpan(n):\n    lst = []\n    sq = n**0.5 + 1\n    for i in range(2,int(sq)+1):\n        if n%i == 0:\n            lst.append(i)\n    return lst\n\n\nn = int(input())\nlst = list(map(int, input().split()))\nlst = sorted(lst, reverse=True)\nmn = lst[-1]\ntotal = sum(lst)\nlarge = 0\nfor i in lst:\n    mx = i\n    lst1 = carpan(mx)\n    for j in lst1:\n        if mx + mn - (mx/j + mn*j) > large:\n            large = mx + mn - (mx/j + mn*j)\nprint(int(total-large))\n\n\n\n", "def inpl(): return list(map(int, input().split()))\n\nN = int(input())\nA = inpl()\nA.sort()\nma = A[0]\nans = 0\nfor b in A[1:]:\n    for x in range(1, b//2 + 1):\n        if b%x:\n            continue\n        ans = max(ans, (ma + b)-ma*x-b//x)\nprint(sum(A)-ans)\n", "n = int(input())\nA = list(map(int, input().split()))\nM = min(A)\nahaha = 0\nfl = 0\nsu = 0\nfor q in A:\n    su += q\n    if q != M:\n        for d in range(2, int(q**0.5) + 1):\n            if q % d == 0:\n                ahaha = max(ahaha, -(-M-q+M*d+q//d))\n                ahaha = max(ahaha, -(-M - q + M * (q // d) + q // (q // d)))\nprint(su - ahaha)", "n = int(input())\na = [int(item) for item in input().split()]\n\na.sort()\n\n\ns = sum(a)\nans = s\n\nfor i in range(len(a)):\n    for x in range(2, int(a[i] ** .5) + 1):\n        if a[i] % x == 0:\n            ans = min(ans, s - a[0] - a[i] + a[0] * x + a[i] // x)\n\nprint(ans)\n", "def get():\n    return list(map(int,input().split()))\ndef pf(n): \n    a=[]\n    i=1\n    while i*i<n:\n        if n%i==0:\n            a+=[i]\n            a+=[n//i]\n        i+=1\n    if i*i==n:\n        a+=[i]\n    return a\nn=int(input())\nb=get()\nc=list(set(b))\na=101*[0]\nfor i in range(1,101):\n    a[i]=pf(i)\ns=sum(b)\nc.sort()\nm=c[0]\nans=0\nfor i in c:\n    for j in a[i]:\n        ans=max(ans,(j-1)*(i//j-m))\nprint(s-ans)\n"]