["def main():\n\tN = int(input())\n\tL = [int(l) for l in input().split(\" \")]\n\tL.sort()\n\tm = len(L)\n\tcnt = 0\n\tfor i in range(m):\n\t\tk = m - 1\n\t\tfor j in range(i + 1, m):\n\t\t\twhile m + i - j < k:\n\t\t\t\tif L[m + i - j] + L[i] <= L[k]:\n\t\t\t\t\tk -= 1\n\t\t\t\telse:\n\t\t\t\t\tcnt += k - m - i + j\n\t\t\t\t\tbreak\n\tprint(cnt)\n\nmain()", "import sys\nfrom bisect import bisect_left\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N = int(input())\n    L = list(map(int, input().split()))\n\n    L.sort()\n    ans = 0\n    for a in range(N - 2):\n        for b in range(a + 1, N - 1):\n            x = bisect_left(L, L[a] + L[b], lo=b)\n            ans += (x - 1 - b)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import bisect\nN = int(input())\nL = list(map(int,input().split()))\nans = 0\nL.sort()\n\nfor i in range(N-2):\n    for j in range(i+1,N-1):\n        num = L[i] + L[j]\n        ind = bisect.bisect_right(L,num - 1)\n        if ind > j - 1:\n            ans += ind - j - 1\nprint(ans)", "n=int(input())\nl=list(map(int,input().split()))\nl.sort()\nans=0\n\nimport bisect\n\nfor i in range(n):\n  a=l[i]\n  for j in range(i+1,n):\n    b=l[j]\n    \n    ans+=bisect.bisect_left(l,a+b)-j-1\n          \nprint(ans)", "import bisect\nn=int(input())\na=list(map(int,input().split()))\na.sort()\n#print(a)\nans=0\nfor i in range(n-1,1,-1):\n    for j in range(i-1,0,-1):\n        t=bisect.bisect_right(a,a[i]-a[j])\n        #print(a[i],a[j],a[i]-a[j],t,j-t)\n        if j-t>0:\n            ans+=j-t\nprint(ans)\n", "from bisect import bisect_left\n\nN=int(input())\nL=list(map(int,input().split()))\nL=sorted(L)\nans=0\n\nfor i in range(N-2):\n  a=L[i]\n  for j in range(i+1,N-1):\n    b=L[j]\n    ans+=bisect_left(L,a+b)-(j+1)\nprint(ans)\n", "import bisect\n\nN = int(input())\nL = sorted([int(n) for n in input().split()])\n#print(L)\n\ncount = 0\nfor i in range(N-1):\n    b = L[:i]\n    c = L[i+1:]\n    for j in b:\n        count += bisect.bisect_left(c, L[i] + j)\n\nprint(count)", "import bisect\nn = int(input())\nl = list(map(int,input().split()))\nl.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        k = bisect.bisect_left(l,l[i]+l[j])\n        if k > j:\n            ans += k - j - 1\nprint(ans)", "import itertools   # accumulate, compress, permutations(nPr), combinations(nCr)\nimport bisect      # bisect_left(insert\u4f4d\u7f6e), bisect_right(slice\u7528)\n# import math        # factorical\uff08\u968e\u4e57) # hypot(\u8ddd\u96e2)\n# import heapq\n# from fractions import gcd # Python3.5\u4ee5\u524d # lcm\uff08\u6700\u5c0f\u516c\u500d\u6570\uff09 = (a*b)//gcd(a,b)\n# from fractions import Fraction\n# from math import gcd # Python3.6\u4ee5\u964d\n# --------------------------------------------------------------\n\nn  = int(input())\nbo = list(map(int,input().split()))\n \ncnt = 0\nbo.sort()\n \nfor a in range(n-1):\n    for b in range(a+1,n):\n        cnt += bisect.bisect_left(bo, bo[a]+bo[b]) - (b+1)\n\nprint(cnt)", "from bisect import bisect_left\nN = int(input())\nL_list = list(map(int, input().split()))\nL_list.sort()\n\nans = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        a, b = L_list[i], L_list[j]\n        r = bisect_left(L_list, a+b)\n        ans += max(0,r-j-1)\nprint(ans)\n", "from bisect import bisect_left\nn = int(input())\nL = sorted(list(map(int, input().split())))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        a, b = L[i], L[j]\n        #c < a+b\n        r = bisect_left(L, a+b)\n        l = j+1\n        cnt += max(0, r-l)\nprint(cnt)\n", "from bisect import*\nn, *l = map(int, open(0).read().split())\nl.sort()\nprint(sum(max(0, bisect_left(l, l[i] + l[j]) - j - 1) for i in range(n) for j in range(i+1, n)))", "import bisect\nn=int(input())\nlis=list(map(int, input().split())) \nlis.sort()\nout=0\nfor i in range(n):\n    for j in range(1+i,n):\n        out+=bisect.bisect_left(lis,lis[i]+lis[j])-j-1\nprint(out)", "from bisect import *\nN=int(input())\n*L,=tuple(sorted(map(int,input().split())))\n\nr=0\n\nfor a in range(N):\n for b in range(a+1,N):\n      x=L[a]\n      y=L[b]\n      r+=max(0,bisect_left(L,x+y)-(b+1))\nprint(r)", "from bisect import *\nN=int(input())\n*L,=sorted(map(int,input().split()))\n\nr=0\nfor a in range(N):\n r+=sum(max(0,bisect_left(L,L[a]+L[b])-(b+1)) for b in range(a+1,N))\nprint(r)", "from bisect import *\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\ncnt = 0\n\nfor i in range(n):\n    a = l[i]\n    for j in range(i+1, n):\n        b = l[j]\n        k = bisect_left(l, a+b)\n        cnt += k-(j+1)\nprint(cnt)", "import bisect\n\nN=int(input())\nL=list(map(int,input().split()))\nL.sort()\nans=0\nfor i in range(N):\n    for j in range(i+1,N):\n        ans+=bisect.bisect_left(L,L[i]+L[j])-j-1\nprint(ans)\n", "from bisect import bisect_left\n\nN = int(input())\nL = sorted(list(map(int,input().split())))\ncnt = 0\nfor i in range(N-2):\n    for j in range(i+1,N-1):\n        tmp = bisect_left(L,L[i]+L[j])\n        cnt += tmp - j - 1\n\nprint(cnt)\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(N: int, L: \"List[int]\"):\n    from itertools import combinations\n    from bisect import bisect_left as bl\n    L = sorted(L)\n    ans = 0\n    for ai, a in enumerate(L):\n        for bi, b in enumerate(L[ai+1:-1], ai+1):\n            ci = bl(L, a+b)\n            ans += ci - bi - 1\n    return ans\n\n# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    L = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    print((solve(N, L)))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\ndef __starting_point():\n    #test()\n    main()\n\n__starting_point()", "from bisect import *\nn = int(input())\nl = sorted(list(map(int, input().split())))\nres = 0\nfor i in range(n-1):\n    for j in range(i + 1, n):\n        a, b = l[i], l[j]\n        c_cnt = bisect_left(l, a + b) - j - 1\n        res += c_cnt\nprint(res)\n", "import sys\nimport bisect\n\ninput = sys.stdin.readline\nN = int(input())\nL = list(map(int, input().split()))\nL.sort()\n\nans = 0\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        l = L[i] + L[j]\n        p = bisect.bisect_left(L, l)\n        # print(p)\n        ans += p - j - 1\n\nprint(ans)", "import bisect\n\nn = int(input())\nl = list(map(int, input().split()))\n\nl.sort()\ncnt = 0\n\n\nfor i in range(n-2):\n  for j in range(i+1, n-1):\n    sum = l[i] + l[j]\n    index = bisect.bisect_left(l, sum)\n    cnt += index - j - 1\n\nprint(cnt)", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\ndef main():\n    import bisect\n    n = i_input()\n    l = sorted(i_list())\n    ans = 0\n    for a in range(n-2):\n        for b in range(a+1,n-1):\n            ans += bisect.bisect(l, l[a]+l[b]-1) -b-1\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\n\nimport bisect\n\ndef main():\n  N = int(input())\n  L = list(sorted(map(int,input().split())))\n  res = 0\n  for i in range(N-2):\n    x = L[i]\n    for j in range(i+1,N-1):\n      y = L[j]\n      res += bisect.bisect_left(L,x+y) - j - 1\n\n\n  print(res)\n  return\n\nmain()\n", "import bisect\nn=int(input())\nl=sorted(list(map(int,input().split())))\nans=0\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        ans+=bisect.bisect_left(l,l[i]+l[j])-j-1\nprint(ans)", "N=int(input())\nL=list(map(int,input().split()))\nans=0\nc=[0]*1001\nfor i in L:c[i]+=1\nfor i in range(1000):c[i+1]=c[i]+c[i+1]\nfor i in range(N-1):\n    for j in range(i+1,N):\n        l,r=abs(L[i]-L[j]),min(L[i]+L[j]-1,1000)\n        ans+=c[r]-c[l]\n        if l<L[i] and L[i]<=r:ans-=1\n        if l<L[j] and L[j]<=r:ans-=1\nprint(ans//3)", "import bisect\nn = int(input())\nl = list(map(int, input().split()))\nl = sorted(l)\n\ncnt = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        x = bisect.bisect_left(l, l[i]+l[j])\n        cnt += x-j-1\n\nprint(cnt)", "import bisect\nN = int(input())\nL = list(map(int, input().split()))\ncount = 0\n\nL.sort()\n\nfor i in range(N-2):\n    for j in range(i+1,N-1):\n        k = bisect.bisect_left(L,L[i]+L[j])\n        count += k-j-1\n\nprint(count)", "n = int(input())\na_ls = list(map(int, input().split()))\ndef isOK(a,b,c):\n    return abs(a-b) < c < a+b\na_ls.sort()\nans = 0\nfor i in range(n):\n    short = a_ls[i]\n    r = i+1\n    num = 0\n    for l in range(i+1,n-1):\n        while r+1 < n and isOK(short, a_ls[l], a_ls[r+1]):\n            r += 1\n        num += r - l\n        if l == r:\n            r += 1\n    ans += num\nprint(ans)", "import bisect\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\nans = 0\nfor i in range(n-2):\n    for j in range(i+1, n-1):\n        ans += bisect.bisect_left(l, l[i]+l[j]) - (j+1)\nprint(ans)", "import bisect\n\n\ndef main():\n    n = int(input())\n    l = sorted(list(int(i) for i in input().split()))\n\n    cnt = 0\n\n    for i in range(n - 2):\n        a = l[i]\n        for j in range(i + 1, n-1):\n            b = l[j]\n            cnt += bisect.bisect_left(l, a+b)-(j+1)\n\n    print(cnt)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import bisect\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\nans = 0\nfor a in range(1, n-1):\n    for b in range(a+1, n):\n        ans += max(0, a-bisect.bisect(l, l[b]-l[a]))                                       \nprint(ans)", "import bisect\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\n\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        l1, l2 = l[i], l[j]\n        ans += max(bisect.bisect_left(l, l1+l2)-j-1, 0)\nprint(ans)\n", "from bisect import bisect_left\n\nn = int(input())\nL = sorted(list(map(int, input().split())))\n\n# \u4e8c\u5206\u63a2\u7d22\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        a, b = L[i], L[j]\n        # c < a + b\n        r = bisect_left(L, a+b)\n        l = j+1\n        cnt += max(0, r-l)\nprint(cnt)", "import bisect\n\ndef binary_search(items, a, b, i, j):\n    def c_is_x(c):\n        is1 = c > max(a - b, b - a)\n        is2 = c < a + b\n\n        if is1 and is2:\n            return 0\n        elif is1:\n            return 1\n        else:\n            return 2\n\n    low = j+1\n    high = len(items) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        ans = items[mid]\n        c_type = c_is_x(ans)\n        if c_type == 0 and mid != i and mid != j:\n            return mid\n        elif c_type == 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return None\n\n\nN = int(input())\nL = list(map(int, input().split()))\n\nL.sort()\n# print(L)\ncount = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        # i = N - i - 1\n        # j = N - j - 1\n        a = L[i]\n        b = L[j]\n        k = bisect.bisect_left(L, a+b, lo=j) - 1\n\n        if k < N:\n            c = L[k]\n            # print(a, b, c, a+b)\n            # print(i, j, k)\n            count += max(k - j, 0)\n\n\nprint(count)\n\n\n", "import bisect\n\n\ndef main():\n    n = int(input())\n    l_lst = list(map(int, input().split()))\n    l_lst.sort()\n\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n\n            a = l_lst[i]\n            b = l_lst[j]\n            tmp = bisect.bisect_left(l_lst, a + b)\n            tmp -= j + 1\n            tmp = max(0, tmp)\n            count += tmp\n\n    print(count)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n  return int(readline())\nn = I()\nL = readInts()\nL = sorted(L)\n# 1,2\u756a\u76ee\u3092\u7279\u5b9a\u3059\u308b\nans = 0\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        a = L[i]\n        b = L[j]\n        c = bisect.bisect_left(L, a + b)\n        ans += c - (j+1)\nprint(ans)\n", "import bisect\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\n \nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        l1, l2 = l[i], l[j]\n        ans += max(bisect.bisect_left(l, l1+l2)-j-1, 0)\nprint(ans)", "from bisect import *\nN=int(input())\n*L,=sorted(map(int,input().split()))\n\nr=0\n\nfor a in range(N):\n for b in range(a+1,N):\n  x=L[a];y=L[b]\n  r+=max(0,bisect_left(L,x+y)-(b+1))\nprint(r)", "#\u305d\u308c\u3086\u3051\u306b\u3076\u305f\u3093\u307e\u3093\n#python3.8.2\u306eTLE\u306e\u58c1\u306b\u963b\u307e\u308c\u307e\u3057\u305f\u2190\u3071\u3044\u3071\u3044\u307e\u3093\u306b\u52a9\u3051\u3066\u3082\u3089\u3063\u305f\n#\u3066\u304b\u30e9\u30a4\u30d6\u30e9\u30ea\u4f7f\u3048\u3070\u3088\u304f\u306dver\nfrom bisect import bisect_left\nn = int(input())\nl = sorted(list(map(int,input().split())))\n\nans = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        k = bisect_left(l,l[i]+l[j])\n        ans += k-1 - j\n\nprint(ans)\n", "import bisect\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\nans = 0\nfor i in range(n-2):\n    for j in range(i+1, n-1):\n        ans += bisect.bisect_left(l, l[i]+l[j]) - (j+1)\n        #print(l,i,j,bisect.bisect_left(l, l[i]+l[j]))\nprint(ans)\n\n", "### ----------------\n### \u3053\u3053\u304b\u3089\n### ----------------\n\nimport sys\nfrom io import StringIO\nimport unittest\nimport bisect\n\ndef bin_search(arr,ls,c):\n    l=ls-1\n    r = len(arr)\n    while (r-l) > 1:\n        m = l + (r-l)//2\n        if arr[m] >= c:\n            r = m\n        else:\n            l = m\n    return l-ls+1\n\ndef resolve():\n    readline=sys.stdin.readline\n    n=int(readline())\n    arr=list(map(int, readline().rstrip().split()))\n    arr.sort()\n    ans=0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            c = arr[i] + arr[j]\n            ans += (bisect.bisect_left(arr,c,j+1) - j - 1)\n            #ans += bin_search(arr,j+1,c)\n    print(ans)\n    return\n\nif 'doTest' not in globals():\n    resolve()\n    return\n\n### ----------------\n### \u3053\u3053\u307e\u3067 \n### ----------------\n", "from bisect import bisect_left\nn = int(input())\nL = list(map(int, input().split()))\nL.sort()\nans = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        ans += bisect_left(L, L[i]+L[j])-j-1\nprint(ans)\n", "from bisect import bisect\n\n\nfrom bisect import bisect_left\n\nn = int(input())\nlis = list(map(int, input().split()))\n\nlis.sort()\n\ncnt = 0\nfor i in range(n-2):\n    a = lis[i]\n    for j in range(i+1, n-1):\n        b = lis[j]\n        tmp = bisect_left(lis, a+b)\n        \n        cnt += tmp - 1 -j\n    \n\nprint(cnt)", "import bisect\nfrom copy import deepcopy\nN = int(input())\nL = sorted(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    for j in range(i + 1, N - 1):\n        b = L[j] + L[i]\n        x = bisect.bisect_left(L, b) - j - 1\n        if x > 0:\n            ans += x\n\nprint(ans)\n", "import bisect\nn = int(input())\na = sorted(list(map(int, input().split())))\ncnt = 0\nfor i in range(n):\n  for j in range(i+1, n):\n    b = a[i] + a [j]\n    x = bisect.bisect_left(a, b)   \n    \n    cnt += max(0, x-j-1)\nprint(cnt)\n", "import bisect\ndef resolve():\n    n = int(input())\n    l = sorted(list(map(int,input().split())))\n    ans = 0\n    for a in range(n):\n        for b in range(a+1,n):\n            c = bisect.bisect_left(l,l[a]+l[b])\n            if c > b:\n                ans += c-b-1\n            else:\n                pass\n    print(ans)\nresolve()", "from collections import deque\nfrom bisect import bisect_left\n\nn = int(input())\nl = sorted(map(int, input().split()))\nld = deque(l)\ncnt = 0\nfor a in range(n - 2):\n    l_a = ld.popleft()\n    for b in range(a + 1, n - 1):\n        cnt += bisect_left(l, l_a + l[b]) - b - 1\nprint(cnt)", "n = int(input())\nl = sorted(list(map(int, input().split())))\nans = 0\n\nfrom bisect import bisect_left\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        ab = l[i]+l[j]\n        idx = bisect_left(l,ab)\n        ans += max(0, idx-j-1)\nprint(ans)", "#!/usr/bin/env python3\nfrom collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(500000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\n\n\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\n\n\ndef solve():\n    N = int(input())\n    L = list(sorted(list(map(int, input().split()))))\n    ans = 0\n    for i in range(N):\n        a = L[i]\n        for j in range(i + 1, N):\n            b = L[j]\n            ans += bisect_left(L, a + b) - j - 1\n\n    print(ans)\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from bisect import bisect_left\n\n\ndef can_make_tri(a, b, c):\n    return a < b + c and b < c + a and c < a + b\n\n\nN, *L = list(map(int, open(0).read().split()))\nL.sort()\nans = 0\nfor i in range(N - 2):\n    for j in range(i + 1, N - 1):\n        pos = bisect_left(L, L[i] + L[j], lo=j + 1)\n        ans += pos - (j + 1)\nprint(ans)\n", "n = int(input())\nl = sorted(list(map(int, input().split())))\nans = 0\nimport bisect\nfor i in range(n-2):\n    for j in range(i+1, n-1):\n        ab = l[i]+l[j]\n        idx = bisect.bisect_left(l, ab)\n        ans += max(0, idx-j-1)\nprint(ans)", "n=int(input())\nl=list(map(int,input().split()))\nl.sort()\nans=0\nfor i in range(n):\n  k=i\n  for j in range(i+1,n):\n    while k<n and l[k]<l[i]+l[j]:\n      k+=1\n    ans+=k-(j+1)\nprint(ans)", "from bisect import bisect_left\nn=int(input())\nl=list(map(int,input().split()))\nl.sort()\nans=0\nfor i in range(n):#\u4e00\u756a\u77ed\u3044\u68d2\n  for j in range(i+1,n):#\u4e8c\u756a\u76ee\u306b\u77ed\u3044\u68d2\n    #1+2\u756a\u76ee\u306e\u68d2\u306e\u9577\u3055\u3088\u308a\u77ed\u304f\u30012\u756a\u76ee\u306b\u77ed\u3044\u68d2\u3088\u308a\u9577\u3044\u68d2\u306e\u7bc4\u56f2\u3092\u63a2\u3059\n    ans += bisect_left(l,l[i]+l[j])-(j+1)\nprint(ans)", "import sys, bisect\n\nN = int(input())\nL = list(map(int, sys.stdin.readline().rsplit()))\nL.sort()\n\nres = 0\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        a, b = L[i], L[j]\n        c_l = bisect.bisect_left(L, a + b)\n        \n        if c_l <= j:\n            continue\n        \n        # print(i, j, c_l)\n        res += c_l - (j + 1)\n\nprint(res)\n", "\ndef findnumberofTriangles(arr): \n\tn = len(arr) \n\tarr.sort() \n\tcount = 0\n\tfor i in range(0, n-2):  \n\t\tk = i + 2 \n\t\tfor j in range(i + 1, n):  \n\t\t\twhile (k < n and arr[i] + arr[j] > arr[k]): \n\t\t\t\tk += 1\n\t\t\tif(k>j): \n\t\t\t\tcount += k - j - 1\n\n\treturn count \n\nn = int(input())\narr=[int(x) for x in input().split()]\nprint((findnumberofTriangles(arr)))\n\n", "import bisect\nn=int(input())\nl=sorted(list(map(int,input().split())))\nans=0\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        x=bisect.bisect_left(l,l[i]+l[j])-j-1\n        ans+=max(0,x)\nprint(ans)", "from bisect import bisect_left\n\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        k = l[i] + l[j]\n        pos = bisect_left(l, k)\n        ans += max(0, pos - j - 1)\nprint(ans)", "# \u5c0f\u3055\u3044\u306e\u30922\u3064\u9078\u3093\u3067\u6700\u5f8c\u306e1\u3064\u3092\u306b\u3076\u305f\u3093\n# \u306a\u305c\u304bTLE\u306a\u308b\nfrom bisect import bisect_left\nn = int(input())\nl = sorted(list(map(int, input().split())))\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        # ok, ng = j, n\n        # while (ng - ok) > 1:\n        #     mid = (ng + ok) // 2\n        #     if l[i] + l[j] > l[mid]:\n        #         ok = mid\n        #     else:\n        #         ng = mid\n        # ans += ok - j\n        # \u2191\u3068\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u540c\u3058\u306f\u305a\u306a\u3093\u3060\u3051\u3069\u306a\u305c\u304bTLE\u306a\u308b\u306e\u3067\u7d44\u307f\u8fbc\u307f\u306e\u3084\u3064\u3092\u4f7f\u3063\u3066\u307f\u308b\n        a = bisect_left(l, l[i] + l[j])\n        ans += a - 1 - j\nprint(ans)\n", "import bisect\nn = int(input())\nL = sorted(map(int, input().split()))\nm = L[-1]\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        k = L[i] + L[j]\n        ans += bisect.bisect_left(L, k) - j-1\nprint(ans)\n", "from bisect import bisect_left,bisect\n\nn=int(input())\nl=list(map(int,input().split()))\nl.sort()\n\n#n=7\n#l=[218, 233, 389, 645, 704, 728, 786]\n\n#print(l)\nicnt=0\nfor a in range(n-2):\n    for b in range(a+1,n-1):\n        nc=bisect(l,l[a]+l[b]-1)\n        if nc>b+1:\n            icnt+=nc-(b+1)\n#            print(a,b,nc,l[a],l[b],l[a]+l[b])\n        \nprint(icnt)\n", "import math\nimport collections\nimport fractions\nimport itertools\nimport functools\nimport operator\nimport bisect\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            k = bisect.bisect_left(l, l[i]+l[j])\n            res += max(k-(j+1), 0)\n    print(res)\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep  9 21:39:55 2020\n\n@author: liang\n\"\"\"\n\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep  9 20:56:06 2020\n\n@author: liang\n\"\"\"\n\nN = int(input())\nL = [int(x) for x in input().split()]\n\nfrom bisect import bisect_left\n\nL.sort()\nans = 0\n#print(L)\nfor i in range(N-2):\n    #print(\"1:\",i)\n    #p = i+2\n    #\u4ee5\u4e0bO(2N)\u3000\u5b9a\u6570\u500d\u304c\u9045\u3044\n    for j in range(i+1,N-1):\n        #print(\"2\",i,j)\n        t = L[i] + L[j]\n        #while p < N and L[p] < L[i] + L[j] :\n        #    p += 1\n        p = bisect_left(L,t)\n            #print(\"up\")\n        #print(p)\n        #ans += len(L[j+1:p])\n        ans += max(0, p - j -1)\nprint(ans)", "from bisect import *\n\nn = int(input())\nL = sorted(list(map(int, input().split())))\n\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        k = bisect_right(L, L[i] + L[j] - 1)\n        ans += k - j - 1\nprint(ans)", "import bisect\nn = int(input())\nL = list(map(int, input().split()))\nL.sort()\n\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        k = bisect.bisect_left(L, L[i]+L[j])\n        ans += k-1 - j\nprint(ans)\n", "n = int(input())\nL = list(map(int, input().split()))\nL.sort()\n\nans = 0\nfor i, a in enumerate(L[2:]):\n    k = i + 1\n    for j, b in enumerate(L[:i + 2]):\n        while j < k and a - b < L[k]:\n            k -= 1\n        ans += i - max(k, j) + 1\n\nprint(ans)\n", "import bisect\nn=int(input())\nl=list(map(int,input().split()))\nl.sort()\nans=0\nfor i in range(n-2):\n  for j in range(i+1,n-1):\n    res=l[i]+l[j]\n    mid=bisect.bisect_left(l,res)\n    ans+=mid-j-1\nprint(ans)", "n = int(input())\nL = sorted(map(int,input().split()))\nans = 0\n\nimport bisect\n#\u4e8c\u5206\u63a2\u7d22\u3092\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\n\n# c <= b <= a \u3068\u3059\u308b\n# b < c + a \u3068 c < a + b\u3000\u306f\u81ea\u52d5\u3067\u6e80\u305f\u3055\u308c\u308b\n\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        a = L[n-1-i]\n        b = L[n-1-j]\n        \n        c = a - b + 1\n        # a < b + c \u3092\u6e80\u305f\u3059\uff43\u306e\u6700\u5c0f\u5024\n        \n        if c <= b:\n            ans += (n-1-j) - bisect.bisect_left(L,c)\n        \nprint(ans)", "n = int(input())\nimport bisect\na = sorted(list(map(int, input().split(\" \"))))\nans = 0\nfor i in range(1, n-1):\n  b = a[:i]\n  c = a[i + 1:]\n  #print(b, c)\n  for j in b:\n    ans += bisect.bisect(c, a[i]+j-0.1)\n    #print(bisect.bisect(c, a[i]+j-0.1))\nprint(ans)", "import sys\nfrom bisect import bisect_left\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N = int(input())\n    L = list(map(int, input().split()))\n\n    L.sort()\n    ans = 0\n    for a in range(N - 2):\n        for b in range(a + 1, N - 1):\n            x = bisect_left(L, L[a] + L[b])\n            ans += (x - 1 - b)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nL = list(map(int,input().split()))\n\nL = sorted(L)\n\nimport bisect\n\n# \u4e8c\u672c\u3092\u6c7a\u3081\u308b\nans = 0\nfor i in range(N - 2):\n  for j in range(i + 1, N - 1):\n    # L[i] + L[j] \u3088\u308a\u77ed\u3044\u68d2\u3067\u4e14\u3064j\u3088\u308a\u5927\u304d\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6570\u3048\u308b\n    ind = bisect.bisect_left(L, L[i] + L[j])\n    num = ind - (j + 1)\n    ans += max(num, 0)\n    \nprint(ans)", "from bisect import bisect_left\nn, *l = list(map(int, open(0).read().split()))\nl.sort()\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        ng = n - bisect_left(l, l[i] + l[j]) + 1\n        ans += (n - j) - ng\nprint(ans)\n", "from bisect import *\nN=int(input())\n*L,=sorted(map(int,input().split()))\n\nr=0\nfor a in range(N):\n r+=sum(bisect_left(L,L[a]+L[b])-(b+1) for b in range(a+1,N))\nprint(r)", "import bisect\nfrom itertools import combinations\n\ndef main():\n    N = int(input())\n    L = sorted(list(map(int, input().split())))\n    ans = 0\n    for l in combinations(L, 2):\n        a = l[0]\n        b = l[1]\n        x = bisect.bisect_left(L, a + b)\n        y = bisect.bisect(L, b - a)\n        if b - a < a :\n            ans += x - y - 2\n        else:\n            ans += x - y - 1\n    print((ans // 3))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from bisect import bisect_left\n \nn = int(input())\nl = sorted(list(map(int,input().split())))\n\nans = 0\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        k = bisect_left(l,l[i]+l[j])\n        ans += k - j - 1\n\nprint(ans)", "from bisect import bisect_left\n\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\n\nans = 0\nfor small in range(n - 2):\n    for mid in range(small + 1, n - 1):\n        div = bisect_left(arr, arr[small] + arr[mid], 0, n)\n        if div > mid + 1:\n            ans += div - mid - 1\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep  9 20:56:06 2020\n\n@author: liang\n\"\"\"\n\nN = int(input())\nL = [int(x) for x in input().split()]\n\nL.sort()\nans = 0\n#print(L)\nfor i in range(N-2):\n    #print(\"1:\",i)\n    p = i+2\n    #\u4ee5\u4e0bO(2?N)\u3000\u5b9a\u6570\u500d\u304c\u9045\u3044\n    for j in range(i+1,N-1):\n        #print(\"2\",i,j)\n        while p < N and L[p] < L[i] + L[j] :\n            p += 1\n            #print(\"up\")\n        #print(p)\n        #ans += len(L[j+1:p])\n        ans += max(0, p - j - 1)\nprint(ans)", "from bisect import bisect_left\nn = int(input())\nl = list(map(int, input().split()))\nl.sort()\nans = 0\nfor i in range(n - 2):\n    for j in range(i + 1, n - 1):\n        ans += bisect_left(l, l[i] + l[j]) - j - 1\n\nprint(ans)", "import bisect\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\nN = int(input())\nL = LI()\nL.sort()\nans = 0\n\nfor i in range(N-1, 1, -1):\n    for j in range(i-1, 0, -1):\n        xl = L[i]-L[j]\n        ind = bisect.bisect_right(L, xl)\n        if j > ind:\n            ans += j-ind\nprint(ans)\n", "from bisect import bisect_left\nN = int(input())\nL = sorted(list(map(int,input().split())))\ncnt = 0\nfor i in range(N-2):\n    for j in range(i+1,N-1):\n        ind = bisect_left(L,L[i]+L[j])\n        cnt += ind-j-1\nprint(cnt)", "from bisect import *\nN = int(input())\nL = sorted(map(int,input().split()))\na = 0\n\nfor i in range(N):\n  for j in range(i+1,N):\n    a+=bisect_left(L,L[i]+L[j])-(j+1)\n    \nprint(a)", "import math\nimport collections\nimport fractions\nimport itertools\nimport functools\nimport operator\nimport bisect\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    res = 0\n    for i in range(n):\n        k = i\n        for j in range(i+1, n):\n            while(k < n and l[k] < l[i]+l[j]):\n                k += 1\n            res += k - (j+1)\n    print(res)\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "def main():\n    from collections import deque\n    from bisect import bisect_left\n\n    n = int(input())\n    l = sorted(map(int, input().split()))\n    ld = deque(l)\n    cnt = 0\n    for a in range(n - 2):\n        l_a = ld.popleft()\n        for b in range(a + 1, n - 1):\n            cnt += bisect_left(l, l_a + l[b]) - b - 1\n    print(cnt)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from bisect import bisect_left\n\n\nN, *L = list(map(int, open(0).read().split()))\nL.sort()\n\nans = 0\nfor i in range(N - 2):\n    for j in range(i + 1, N - 1):\n        a = L[i]\n        b = L[j]\n        ans += bisect_left(L, a + b, lo=j + 1) - (j + 1)\nprint(ans)\n", "from bisect import bisect_left\n\nN = int(input())\n\nL = list(map(int, input().split()))\nL.sort()\n\nans = 0\n\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        c = L[i] + L[j]\n        # a+b\u304c\u5165\u308b\u5834\u6240\u3092\u8fd4\u3059\n        idx = bisect_left(L, c)\n        ans += max(0, idx - (j + 1))\n\nprint(ans)\n", "import bisect\n\nn = int(input())\nl = list(map(int, input().split()))\n\nl.sort()\nans = 0\nfor i in range(n-1):\n    b = l[:i]\n    c = l[i+1:]\n    for j in b:\n        ans += bisect.bisect_left(c, l[i] + j)#2\u756a\u76ee\u306e\u68d2\u3088\u308a\u77ed\u304f(left), \u4e00\u5b9a\u4ee5\u4e0a\u306e\u9577\u3055\u3092\u6301\u3064([i+1:])\nprint(ans)\n", "import bisect\nN=int(input())\nL=list(map(int,input().split()))\nL=sorted(L)\nans=0\nfor i in range(N):\n    for j in range(i+1,N):\n        k=bisect.bisect_left(L,L[i]+L[j])\n        ans+=k-j-1\nprint(ans)", "from bisect import bisect_left\n\nN=int(input())\nL=list(map(int,input().split()))\nL=sorted(L)\nans=0\nfor i in range(N-2):\n  a=L[i]\n  for j in range(i+1,N-1):\n    b=L[j]\n    \"\"\"\n    lo=0\n    hi=N\n    x=a+b\n    while lo<hi:\n      mid=(lo+hi)//2\n      if L[mid]<x: lo=mid+1\n      else: hi=mid\n    ans+=lo-(j+1) \n    \"\"\"\n    ans+=bisect_left(L,a+b)-(j+1)\nprint(ans)\n", "import bisect\n\nN = int(input())\nL_list = list(map(int, input().split()))\n\nL_list_min = sorted(L_list)\nans = 0\n\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        #min = isect.bisect_left(L_list_min, L_list_min[j]+1)\n        min = j+1\n        max = bisect.bisect_left(L_list_min, L_list_min[i]+L_list_min[j])\n        #print(i, j, max, min)\n        if max - min >= 0:\n            ans += max - min\n        \nprint(ans)", "import bisect\nN=int(input())\narr=list(map(int,input().split()))\n\narr.sort()\n\nans=0\n\nfor i in range(N-2):\n    for j in range(i+1,N-1):\n        k=bisect.bisect_left(arr,arr[i]+arr[j])\n        if k>j:\n            ans+=k-j-1\n        else:\n            pass\nprint(ans)", "n = int(input())\nl_ls = list(map(int, input().split()))\nl_ls.sort()\ndef check(a,b,c):\n    return abs(a-b) < c < a+b\nans = 0\nfor i in range(n):\n    short = l_ls[i]\n    num = 0\n    r = i+1\n    for l in range(i+1,n):\n        while r+1 < n and check(short, l_ls[l], l_ls[r+1]):\n            r += 1\n        num += r - l\n        if r == l:\n            r += 1\n    ans += num\nprint(ans)\n            \n", "N = int(input())\nl = list(map(int,input().split()))\nl.sort()\nans = 0\nmax = l[N-1]\ntc = N\nst = [j+1 for j in range(N-1)]\nfor i in range(N-2):\n    if l[i]+l[i+1] > max:\n        k = N-i-1\n        ans += ((k-1)*k*(k+1))//6\n        break\n    for j in range(i+1,N-1):\n        if j == tc:\n            ans += tp\n            break\n        s = l[i]+l[j]\n        if s <= l[j+1]:\n            continue\n        if s > max:\n            tc = j \n            tp = (N-j-1) * (N-j) //2 #\u3053\u308c\u3092i\u306e\u4e2d\u3067\u3067\u304d\u306a\u3044\u304b\n            ans += tp\n            break\n        start = st[j]\n        if s <= l[start]:\n            ans += start-j-1\n            continue\n        end = N\n        while start != end:\n            center = (start + end)//2\n            if s <= l[center]:\n                end = center\n            else:\n                start = center + 1\n        st[j] = end\n        ans += end-j-1\nprint(ans)", "N=int(input())\nl=list(map(int,input().split()))\nl.sort()\nimport bisect\nans=0\nfor i in range(N):\n   for j in range(i+1,N):\n      ans+=bisect.bisect_left(l,l[i]+l[j])-j-1\nprint(ans)", "from bisect import bisect_left\nn, *l = list(map(int, open(0).read().split()))\nl.sort()\n\nprint((sum(bisect_left(l, l[i] + l[j]) - 1 - j for i in range(n)\n          for j in range(i + 1, n))))\n", "import bisect\nn = int(input())\nL = list(map(int, input().split()))\nL.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        k = bisect.bisect_left(L, L[i]+L[j])\n        ans += max(k-j-1, 0)\nprint(ans)", "import bisect\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\nN = int(input())\nL = LI()\nL.sort()\nans = 0\nfor i in range(N-1, 1, -1):\n    for j in range(i-1, 0, -1):\n        ind = bisect.bisect_right(L, L[i]-L[j])\n        if ind < j:\n            ans += j-ind\nprint(ans)\n"]