["n=int(input())\n\nL=[]\nfor i in range(n):\n    L.append(input())\nvalid=True\nx=0\ny=0\nE=[]\np=L[0][0]\nwhile(x<n and y<n):\n    if(L[x][y]!=p):\n        valid=False\n    x+=1\n    y+=1\n    \nx=0\ny=n-1\n\nwhile(x<n and y>=0):\n    if(L[x][y]!=p):\n        valid=False\n    x+=1\n    y-=1\nK={}\nfor i in range(n):\n    for j in range(n):\n        if(L[i][j] in K):\n            K[L[i][j]]+=1\n        else:\n            K[L[i][j]]=1\n\n\nif(not valid or K[p]!=2*n-1 or len(K)!=2):\n    print(\"NO\")\n\nelse:\n    print(\"YES\")\n", "#!/usr/bin/env python3\n\ndef read_ints():\n\treturn list(map(int, input().strip().split()))\n\nn, = read_ints()\n\nt = [ input() for _ in range(n) ]\n\ndef check():\n\tif t[0][0] == t[0][1]:\n\t\treturn False\n\t\n\tfor x in range(n):\n\t\tif t[x][x]!=t[0][0]:\n\t\t\treturn False\n\t\tif t[x][n-x-1]!=t[0][0]:\n\t\t\treturn False\n\n\t\tfor y in range(n):\n\t\t\tif x==y or x==n-y-1:\n\t\t\t\tcontinue\n\t\t\tif t[x][y] != t[0][1]:\n\t\t\t\treturn False\n\treturn True\n\nprint(\"YES\" if check() else \"NO\")\n\n\n\n\n", "n = int(input())\ns = input()\nans = 'YES'\ns1 = s[0]\ns2 = s[1]\nif s[n - 1] != s1 or s1 == s2:\n    ans = 'NO'\nfor i in range(1, n - 1):\n    if s[i] != s2:\n        ans = 'NO'\nfor i in range(1, n):\n    s = input()\n    p1 = i\n    p2 = n - 1 - i\n    if s[p1] != s1 or s[p2] != s1:\n        ans = 'NO'\n    for j in range(n):\n        if j != p1 and j != p2 and s[j] != s2:\n            ans = 'NO'\nprint(ans)\n", "n=int(input())\nc=[0]*26\na=[]\nfor i in range(n):\n    a.append(input().strip())\n    for k in a[-1]:\n        c[ord(k)-ord('a')]+=1\nb=True\nfor i in range(n):\n    if a[i][i]!=a[0][0] or a[0][0]!=a[i][n-i-1]:\n        b=False\n        break\nif b==False:\n    print('NO')\nelif a[0][0]==a[0][1]:\n    print('NO')\nelif c[ord(a[0][1])-ord('a')]!=n*n-2*n+1:\n    print('NO')\nelse:\n    print('YES')", "n = int(input().strip())\na = []\nfor i in range(n):\n    a.append(input().strip())\nch = a[0][0]\nfl = True\nfor i in range(n):\n    if a[i][i] != ch or a[i][n - i - 1] != ch:\n        fl = False\n        break\nch2 = a[0][1]\nif ch == ch2:\n    fl = False\nfor i in range(n):\n    for j in range(n):\n        if i != j and j != n - i - 1:\n            if a[i][j] != ch2:\n                fl = False\n                break\n            \nif fl:\n    print('YES')\nelse:\n    print('NO')", "__author__ = 'Adela'\n\n\ndef main():\n    n = int(input())\n    diag = 'A'\n    other = 'A'\n    for i in range(n):\n        for j, ch in enumerate(input()):\n            if diag == 'A':\n                diag = ch\n            elif other == 'A':\n                other = ch\n            else:\n                if i == j or i == (n-1-j):\n                    if ch != diag:\n                        print(\"NO\")\n                        return\n                else:\n                    if ch != other:\n                        print(\"NO\")\n                        return\n    if diag == other:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nx = grid[0][0]\no = grid[0][1]\nif x==o:\n    print(\"NO\")\nelse:\n    fine = True\n    for i in range(n):\n        if fine:\n            for j in range(n):\n                if j==i or j==n-1-i:\n                    if grid[i][j]!=x:\n                        print(\"NO\")\n                        fine = False\n                        break\n                elif grid[i][j]!=o:\n                    print(\"NO\")\n                    fine = False\n                    break\n    if fine: print(\"YES\")\n", "'''\nCreated on 19.03.2014\n\n@author: mboeschen\n'''\nimport sys\n\n#inp = open(\"input.txt\")\ninp=sys.stdin\n\nx=inp.readline()\nn = int(x)\nls=[]\nfor i in range(n):\n    ls.append(inp.readline())\n\na=ls[0][0]\nb=ls[0][1]\nAnswer=True\n\nif(a==b): \n    Answer=False    \n    \nfor i in range(n):\n    for j in range(n):\n        if(i==j or n-i-1==j): \n            if(ls[i][j]!=a): \n                Answer=False\n        else:\n            if(ls[i][j]!=b): Answer=False\n            \nif(Answer):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n                \n        \n\n\n", "n=int(input())\nb=[input() for i in range(n)]\nl=b[0][0]\nc=b[0][1]\nflag=True\nfor i in range(n):\n    if(i==((n//2))):\n        if((b[i][i]!=l)or(b[i].count(l)!=1)or(b[i].count(c)!=n-1)):\n            flag=False\n            break\n    else:\n        if((b[i][i]!=l) or (b[i][n-1-i]!=l) or (b[i].count(l)!=2)or(b[i].count(c)!=n-2)):\n            flag=False\n            break\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "n = int(input())\nA = [input() for _ in range(n)]\nx = A[0][0]\na = A[0][1]\nif x != a:\n    msg = \"YES\"\n    for i in range(n):\n        for j in range(n):\n            if i == j or i == n - j - 1:\n                if A[i][j] != x:\n                    msg = \"NO\"\n                    break\n            else:\n                if A[i][j] != a:\n                    msg = \"NO\"\n                    break\nelse:\n    msg = \"NO\"\nprint(msg)\n", "n = int(input())\nfield = [input().strip() for x in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if (j == i and field[i][j] != field[0][0]) or (j == n - 1 - i and field[i][j] != field[0][0]) or (n > 2) * (j not in [i, n - i - 1] and (field[i][j] != field[0][1] or field[i][j] == field[0][0])):\n            print('NO')\n            return\nprint('YES')\n", "lines = int(input())\ngrid = []\nresult = \"YES\"\n\nfor i in range(lines):\n    grid.append(input())\n\nx_char = grid[0][0]\n    \ntest = (\"\".join([i for i in grid]))\n    \nif len(\"\".join(set(test))) > 2:\n    result = \"NO\"\nelse:\n    for i in range(lines // 2 + 1):\n        if grid[i] != grid[-(i + 1)]:\n            result = \"NO\"\n            break\n        if grid[i][i] != grid[i][-(i + 1)]:\n            result = \"NO\"\n            break\n        if grid[i][i] != x_char:\n            result = \"NO\"\n            break\n        if grid[i].count(x_char) > 2:\n            result = \"NO\"\n            break\nif grid[lines // 2].count(x_char) > 1:\n    result = \"NO\"\n        \nprint(result)    ", "n = int(input())\nd = 1\nk = 0\nfor i in range(n):\n    s = input()\n    if d == 1:\n        if k == 0:\n            k = 1\n            if s[1]*(n-2) == s[1:(n-1)] and s[0] == s[n-1]:\n                c = s[1]\n                b = s[0]\n            else:\n                d = 0\n        elif c == b:\n            d = 0\n        else:\n            j = i\n            if i > n//2:\n                j = n-i-1\n            if i == n//2:\n                if s != c*j + b + c*(n-j-1):\n                    d = 0\n            elif s != c*j + b + c*(n-2*j-2) + b + c*j:\n                d = 0\n                #print(i,j,s, c*j + b + c*(n-2*j-2) + b + c*j)\nif d == 1:\n    print('YES')\nelse:\n    print('NO')", "def test(sq, n):\n  a, b = sq[0][0], sq[0][1]\n  if a == b:\n    return False\n  else:\n    for i in range(n):\n      if sq[i][i] != a or sq[i][-i-1] != a:\n        return False\n    return sum([l.count(b) for l in sq]) == n*n - 2*n + 1\n\nn = int(input())\nsq = []\nfor i in range(n):\n  sq.append(input())\n\nprint(\"YES\" if test(sq,n) else \"NO\")", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\n\nn = int(input())\n\nlines = [input() for _ in range(n)]\n\nif len(set(c for l in lines for c in l)) != 2:\n    print('NO')\n    return\n\nfor i in range(n):\n    if lines[0][0] != lines[i][i] or lines[0][0] != lines[i][-i-1]:\n        print('NO')\n        return\n    if lines[i].count(lines[0][0]) != (1 if i == n // 2 else 2):\n        print('NO')\n        return\nprint('YES')\n", "g=input\nn=int(g())\np=[g()for _ in range(n)]\nx=p[0][0]\nif len(set(c for l in p for c in l))!=2:print('NO');return\nprint('YNEOS'[any(1 for i in range(n)if x!=p[i][i]or x!=p[i][-i-1]or p[i].count(x)!=(1 if i==n//2 else 2))::2])", "n = int(input())\nflag = True\nline = input()\nif line[0] == line[-1]:\n    bgn = line[0]\nelse:\n    flag = False\navr = line[1]\n\nfor i in range(n - 3):\n    if not (line[i + 2] == avr):\n        flag = False\n        break\nif not flag or avr == bgn:\n    print (\"NO\")\n    return\n    \nelse:\n    for j in range(n - 1):\n        line = input()\n        k = j + 1\n        for t in range(n):\n            if (t == k or t == n - k - 1) and not(line[t] == bgn):\n                flag = False\n                break\n            if not (t == k or t == n - k - 1) and not (line[t] == avr):\n                flag = False\n                break\n\nif flag:\n    print (\"YES\")\nelse:\n    print (\"NO\")\n\n\n\n    \n", "n = int(input())\nres = 'YES'\ns = list(input())\nchk = s[0]\nnul = s[1]\nif s[0] != chk or s[n-1] != chk or s[0] == nul or s[n-1] == nul:\n    res = 'NO'\ns[0] = nul\ns[n-1] = nul\nif not all([x == nul for x in s]):\n    res = 'NO'\nif res == 'YES':\n    for j in range(1, n):\n        s = list(input())\n        if s[j] != chk or s[n-1-j] != chk or s[j] == nul or s[n-1-j] == nul:\n            res = 'NO'\n        s[j] = nul\n        s[n-1-j] = nul\n        if not all([x == nul for x in s]):\n            res = 'NO'\nprint(res)\n", "n = int(input())\na=[]\nf=False\nfor i in range(n):\n    a.append(input())\n    if a[i][i]!=a[i][n-1-i]:\n        f=True\n        break\nc=a[0][1]\nk=n//2\nif not(f):\n    if c==a[0][0] or (a[k][k]!=a[0][0]):\n        f=True\n    else:\n        for i in range(n):\n            for j in range(n):\n                if i!=j and j!=n-1-i:\n                    if a[i][j]!=c:\n                        f=True\n                        break\n            if f: break\nif f:\n    print('NO')\nelse:\n    print('YES')", "n=int(input())\na=[]\nflag=1\nfor i in range(0,n):\n    a.append(input())\n    for j in range(0,n):\n        if i+j==n-1 or i-j==0:\n            flag&=(a[-1][j]==a[0][0])\n        else:\n            flag&=(a[-1][j]==a[0][1]) & (a[-1][j]!=a[0][0])\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "col = int(input())\nfor i in range(col):\n    line = input()\n    if i == 0:\n        a = line[0]\n        b = line[1]\n        if a == b:\n            print(\"NO\")\n            break\n    st = 0\n    ed = col - 1\n    while st <= ed:\n        if st == i or ed == i:\n            ch = a\n        else:\n            ch = b\n        if line[st] != ch or line[ed] != ch:\n            break;\n        st += 1\n        ed -= 1\n    if st <= ed:\n        print(\"NO\")\n        break\nelse:\n    print('YES')\n    \n", "n = int(input())\nx_smb = set()\no_smb = set()\nflag_yes = True\nfor i in range(n):\n    next_str = list(str(input()))\n    x_smb = x_smb | set([next_str[i], next_str[-i-1]])\n    for j in sorted(list(set((i, n-i-1))), reverse=True):\n        next_str.pop(j)\n    o_smb = o_smb | set(next_str)\n    if len(x_smb) != 1 or len(o_smb) != 1 or len(x_smb | o_smb) == 1:\n        print('NO')\n        flag_yes = False\n        break\nif flag_yes:\n    print('YES')", "\nn = int(input())\ns = input()\ndiag = s[0]\nnotdiag = s[1]\n\nresult = 'YES'\nif s[-1] != diag:\n    result = 'NO'\nif s[1:-1] != notdiag * len(s[1:-1]):\n    result = 'NO'\nif diag == notdiag:\n    result = 'NO'\n#print(result)\n\nif result == 'YES':\n    for i in range(1, n):\n\n        s = input()\n        if s[i] != diag or s[-i-1] != diag:\n            result = 'NO'\n            break\n\n        if i*2+1 == n:\n            line = s[:i] + s[i+1:]\n        else:\n            i = min(i, n-i-1)\n            if i:\n                line = s[:i] + s[i+1:-i-1] + s[-i:]\n            else:\n                line = s[:i] + s[i+1:-i-1]\n\n        if line != notdiag * len(line):\n            result = 'NO'\n\n        #print(i, line)\n\n\n\n\nprint(result)\n\n\n\n", "def solve(arr, n):\n    symbol = arr[0][0]\n    for i in range(0,n):\n        if arr[i][i] != symbol:\n            return 'NO'\n    j=0\n    for i in range(n-1,-1,-1):\n        if arr[i][j] != symbol:\n            return 'NO'\n        j+=1\n    return 'YES'\n\n\nn = int(input())\n\nchars = []\nwhile len(chars) < n:    \n    s = input()\n    chars.append(list(s))\n\nL = sum(chars,[])\namount = set(sum(chars,[]))\n\nif len(amount) == 2 and L.count(L[0]) == n*2-1:\n    print(solve(chars, n))\nelse:\n    print('NO')", "def f():\n    n = int(input())\n    k, m = n // 2, n - 2\n    t = input()\n    a, b = t[0], t[1]\n    if a == b: return 'NO'\n    if t != a + b * m + a: return 'NO'\n    for i in range(1, k):\n        if input() != b * i + a + b * (m - 2 * i) + a + b * i: return 'NO'\n    if input() != b * k + a + b * k: return 'NO'\n    for i in range(k - 1, -1, -1):\n        if input() != b * i + a + b * (m - 2 * i) + a + b * i: return 'NO'\n    return 'YES'\nprint(f())"]