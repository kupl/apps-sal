["import heapq\n\ndata = int(input())\narray = [int(_) for _ in input().split()]\n\nX = array[0:data]\nB = array[data:2*data]\nY = [-_ for _ in array[2*data:3*data]]\n\nheapq.heapify(X)\nheapq.heapify(Y)\n\nx = [sum(X)]\ny = [sum(Y)]\n\nfor i in range(data):\n    x += [B[i] - heapq.heappushpop(X, B[i])]\n    y += [-B[-1-i] - heapq.heappushpop(Y, -B[-1-i])]\n\nfor i in range(data):\n    x[i+1] = x[i]+x[i+1]\n    y[i+1] = y[i]+y[i+1]\n\nprint(max([x[_] + y[-1 - _] for _ in range(data+1)]))", "from heapq import heappop, heappush, heapify\n\n\ndef main():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    left_sums = []\n    left = A[:n]\n    left_sum = sum(left)\n    left_sums.append(left_sum)\n    heapify(left)\n\n    for a in A[n:2*n]:\n        left_sum += a\n        heappush(left, a)\n        left_sum -= heappop(left)\n        left_sums.append(left_sum)\n\n    right_sums = []\n    right = []\n    for a in A[2*n:]:\n        right.append(-a)\n    right_sum = sum(right)\n    right_sums.append(-right_sum)\n    heapify(right)\n\n    for a in A[2*n-1:n-1:-1]:\n        right_sum += -a\n        heappush(right, -a)\n        right_sum -= heappop(right)\n        right_sums.append(-right_sum)\n\n    candidates = []\n    for sum1, sum2 in zip(left_sums, right_sums[::-1]):\n        candidates.append(sum1 - sum2)\n\n    print(max(candidates))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int,readline().split()))\n\n# (1).\u5de6\u304b\u3089N + 1\uff5e2N\u500b\u306e\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001i\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u306edictionary\n# (2).\u5de6\u304b\u30892N\u500b\u306e\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u5927\u304d\u3044\u9806\u306bN\u500b\u306e\u30c7\u30fc\u30bf\u306e\u548c\n# (3).\u5de6\u304b\u30892N\u500b\u306e\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u5c0f\u3055\u3044\u9806\u306bN\u500b\u306e\u30c7\u30fc\u30bf\u3092\u3001\u5927\u304d\u3044\u9806\u306bheapq\u306b\u5165\u308c\u305f\u3082\u306e\n# (4).\u53f3\u304b\u3089N\u500b\u306e\u30c7\u30fc\u30bf\u306e\u548c\n# (5).\u53f3\u304b\u3089N\u500b\u306e\u30c7\u30fc\u30bf\u3092\u3001\u5927\u304d\u3044\u9806\u306bheapq\u306b\u5165\u308c\u305f\u3082\u306e\n\n# \u4e0a\u8a18\u3092\u7528\u3044\u3066\u3001i\u30922N\uff5eN+1\u307e\u3067\u305a\u3089\u3057\u3001\u305d\u306e\u305f\u3073\u306b\n# A[i]\u306e\u6570\u3092(1)\u304b\u3089\u6e1b\u3089\u3059\n# \u6b21\u306e\u6570\u3092(3)\u304b\u3089\u53d6\u308a\u51fa\u3059\u3002\u305d\u306e\u6570\u304c(1)\u306b\u5b58\u5728\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u4f55\u3082\u3057\u306a\u3044\n# \u53d6\u308a\u51fa\u3057\u305f\u6570\u3092(2)\u306b\u8db3\u3059\n# (4)\u306bA[i]\u3092\u8db3\u3059\n# (5)\u304b\u3089\u4e00\u3064\u53d6\u308a\u51fa\u3057\u3001(4)\u304b\u3089\u5f15\u304f\n# (2) - (4)\u306e\u6700\u5927\u5024\u3092\u66f4\u65b0\n\nfrom collections import defaultdict\n\nsortA = sorted(A[:2 * N])\nsmallA = sortA[:N]\nsmall_dic = defaultdict(int)\nfor i in range(len(smallA)):\n  small_dic[smallA[i]] += 1\nlargeA = sortA[N:]\nlarge_dic = defaultdict(int)\nfor i in range(len(largeA)):\n  large_dic[largeA[i]] += 1\n\nleftsum = sum(sortA[N:])\n\nimport heapq as hq\nleftq = list([-x for x in smallA])\nhq.heapify(leftq)\n\nrightq = A[2 * N:]\nrightsum = sum(rightq)\nrightq = list([-x for x in rightq])\nhq.heapify(rightq)\n\nans = leftsum - rightsum\n\n#print(\"leftsum\",leftsum,\"rightsum\",rightsum,\"ans\",ans)\nfor i in range(2 * N - 1, N - 1, -1):\n  #print(\"i\",i,\"A[i]\",A[i])\n  if large_dic[A[i]] > 0: # \u9664\u5916\u5bfe\u8c61\u3067\u3042\u308b\u5834\u5408\n    large_dic[A[i]] -= 1\n    leftsum -= A[i]\n    while True:\n      move = -hq.heappop(leftq)\n      if small_dic[move] > 0:\n        small_dic[move] -= 1\n        break\n    leftsum += move\n    large_dic[move] += 1\n    #print(\"leftsum\u304b\u3089\",A[i],\"\u3092\u9664\u5916\",leftsum)\n  else:\n    small_dic[A[i]] -= 1\n    \n  hq.heappush(rightq, -A[i])\n  rem = -hq.heappop(rightq)\n  rightsum += A[i]\n  rightsum -= rem\n  \n  if ans < leftsum - rightsum:\n    ans = leftsum - rightsum\n  #print(\"leftsum\",leftsum,\"rightsum\",rightsum,\"ans\",ans)\n    \nprint(ans)\n", "from heapq import heappush, heappop, heappushpop\nN = int(input())\nA = [int(a) for a in input().split()]\n\ndef calc(L):\n    s = sum(L[:N])\n    h = []\n    X = [s]\n    for i in range(N):\n        heappush(h, L[i])\n    for i in range(N, 2*N):\n        s += L[i] - heappushpop(h, L[i])\n        X.append(s)\n    return X\n\nB = calc(A)\nC = calc([-a for a in A][::-1])[::-1]\nprint(max([B[i] + C[i] for i in range(N+1)]))", "import heapq\n\nN = int(input())\nA = list(map(int, input().split()))\n\nleftQue = []\nrightQue = []\n\nleftSum = 0\nrightSum = 0\n\nfor i in range(N):\n    heapq.heappush(leftQue, A[i])\n    leftSum += A[i]\n\n    heapq.heappush(rightQue, -A[-1 - i])\n    rightSum -= A[-1 - i]\n\nleft = [-float('inf') for _ in range(3 * N)]\nright = [-float('inf') for _ in range(3 * N)]\n\nleft[N - 1] = leftSum\n\nfor middle in range(N, 2 * N):\n    leftSum += A[middle]\n    leftSum -= heapq.heappushpop(leftQue, A[middle])\n    left[middle] = leftSum\n\nright[2 * N - 1] = rightSum\nfor middle in range(2 * N - 1, N - 1, -1):\n    rightSum -= A[middle]\n    rightSum -= heapq.heappushpop(rightQue, -A[middle])\n    right[middle - 1] = rightSum\n\nans = -float('inf')\nfor l, r in zip(left, right):\n    ans = max(ans, l + r)\n\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\n\nb = list(enumerate(a))\n\nl = sorted(b[:2*n], key=lambda x: x[1], reverse=True)\nr = sorted(b[n:], key=lambda x: x[1])\n\nbig = [0] * (3*n)\nsmall = [0] * (3*n)\n\nfor i, (pos, z) in enumerate(l):\n    big[pos] = i\nfor i, (pos, z) in enumerate(r):\n    small[pos] = i\n\nfirst = sum(a[:n])\nsecond = 0\nfor pos, z in r[:n]:\n    second += z\ni = 2 * n\nj = n-1\nans = first - second\nfor split in range(n, 2*n):\n    if big[split] < i:\n        first += a[split]\n        i -= 1\n        while l[i][0] > split:\n            i -= 1\n        first -= l[i][1]\n    if small[split] <= j:\n        second -= a[split]\n        j += 1\n        while r[j][0] < split:\n            j += 1\n        second += r[j][1]\n    ans = max(ans, first - second)\nprint(ans)", "INF = 10 ** 20\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(100000000)\ndy = (-1,0,1,0)\ndx = (0,1,0,-1)\nfrom  heapq import heappop,heapify,heappush\n\ndef main():\n    n = int(input())\n    a = list(map(int,input().split()))\n    \n    lM = [0] * (n + 1)\n    rm = [0] * (n + 1)\n\n    q = []\n    cumsum = 0\n    for i in range(n):\n        heappush(q,a[i])\n        cumsum += a[i]\n    \n    lM[0] = cumsum\n    drop = 0\n    for i in range(n,2 * n):\n        heappush(q,a[i])\n        drop += heappop(q)\n        cumsum += a[i]\n        lM[i - n + 1] = cumsum - drop\n    \n    q = []\n    cumsum = 0\n    for i in range(3 * n - 1,2 * n - 1,-1):\n        heappush(q,-a[i])\n        cumsum += a[i]\n    \n    rm[-1] = cumsum\n    drop = 0\n    for i in range(2 * n - 1,n - 1,-1):\n        heappush(q,-a[i])\n        drop -= heappop(q)\n        cumsum += a[i]\n        rm[i - n] = cumsum - drop\n    \n    ans = -INF\n    for i in range(n + 1):\n        ans = max(ans,lM[i] - rm[i])\n        \n    print(ans)\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport heapq\n\ndef main():\n    rl=sys.stdin.readline\n    n=int(rl().strip())\n    a=list(map(int,rl().strip().split()))\n    b=[-x for x in a]\n    b.reverse()\n    fl=a[:n]\n    fs=sum(fl)\n    ll=b[:n]\n    ls=sum(ll)\n    fdl=[0]*(n+1)\n    ldl=[0]*(n+1)\n    heapq.heapify(fl)\n    heapq.heapify(ll)\n    for i in range(1,n+1):\n        fmn=heapq.heappushpop(fl,a[n+i-1])\n        lmn=heapq.heappushpop(ll,b[n+i-1])\n        fdl[i]=fdl[i-1]+a[n+i-1]-fmn\n        ldl[i]=ldl[i-1]+b[n+i-1]-lmn\n    ldl.reverse()\n    dif=max([x+y for x,y in zip(fdl,ldl)])\n    print((fs+ls+dif))\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import heapq\n\nn = int(input())\nA = list(map(int,input().split()))\n\nsa = 0\nsb = 0\nhf = []\nhb = []\nla = [[0]*2 for i in range(n+1)]\nfor i in range(n):\n    sa += A[i]\n    heapq.heappush(hf,A[i])\nfor i in range(2*n,3*n):\n    sb += A[i]\n    heapq.heappush(hb,-A[i])\nla[0][0] = sa\nla[-1][-1] = sb\nfor i in range(n,2*n):\n    now = A[i]\n    now2 = A[-1-i]\n    heapq.heappush(hf,now)\n    heapq.heappush(hb,-now2)\n    h1 = heapq.heappop(hf)\n    h2 = -heapq.heappop(hb)\n    sa += now-h1\n    sb += now2 -h2\n    la[i-n+1][0] = sa\n    la[-i+n-2][1] = sb\n\nans = -float(\"INF\")\nfor i,j in la:\n    ans = max(ans,i-j)\nprint(ans)\n", "import heapq\n\nN = int(input())\nA = [int(a) for a in input().split()]\n\nL = A[:2*N]\nL.sort()\ns1 = 0\ns2 = 0\nh1 = []\nh2 = []\ndic = {}\ndic_h = {}\nfor i in range(N):\n    heapq.heappush(h1, -L[i])\n    if L[i] in dic_h:\n        dic_h[L[i]] += 1\n    else:\n        dic_h[L[i]] = 1\n    s1 += L[i+N]\n    if L[i+N] in dic:\n        dic[L[i+N]] += 1\n    else:\n        dic[L[i+N]] = 1\n    s2 += A[i+2*N]\n    heapq.heappush(h2, -A[i+2*N])\n    \nans = s1-s2\nfor i in range(2*N-1, N-1, -1):\n    if A[i]+h2[0] < 0:\n        s2 += heapq.heappop(h2)\n        heapq.heappush(h2, -A[i])\n        s2 += A[i]\n    if A[i] in dic:\n        if dic[A[i]] > 0:\n            dic[A[i]] -= 1\n            s1 -= A[i]\n            t = -heapq.heappop(h1)\n            while h1:\n                if dic_h[t] > 0:\n                    dic_h[t] -= 1\n                    break\n                else:\n                    t = -heapq.heappop(h1)\n            s1 += t\n            if t in dic:\n                dic[t] += 1\n            else:\n                dic[t] = 1\n    else:\n        dic_h[A[i]] -= 1\n    ans = max(ans, s1-s2)\n    \nprint(ans)", "import heapq\nn=int(input())\nA=list(map(int,input().split()))\nA_l=A[:n]\nheapq.heapify(A_l)\nA_l_sum=[sum(A_l)]\nA_m=A[n:2*n]\nfor i in range(n):\n    p=A_m[i]\n    heapq.heappush(A_l,p)\n    q=heapq.heappop(A_l)\n    A_l_sum.append(A_l_sum[-1]+p-q)\nA_r=A[2*n:3*n]\nfor i in range(n):\n    A_r[i]*=-1\nfor i in range(n):\n    A_m[i]*=-1\nA_m=A_m[::-1]\nheapq.heapify(A_r)\nA_r_sum=[sum(A_r)]\nfor i in range(n):\n    p=A_m[i]\n    heapq.heappush(A_r,p)\n    q=heapq.heappop(A_r)\n    A_r_sum.append(A_r_sum[-1]+p-q)\nans=-float(\"INF\")\nfor i in range(n+1):\n    ans=max(ans,A_l_sum[i]+A_r_sum[-i-1])\nprint(ans)", "import heapq\nn= int(input())\na=list(map(int,input().split()))\npres = a[:n]\nheapq.heapify(pres)\napresum = [0]*(n+1)\naps = sum(pres)\napresum[0]=aps\nposts = list([-1 * x for x in a[::-1][:n]])\nheapq.heapify(posts)\napossum = [0]*(n+1)\naqs = sum(posts)\napossum[0]=aqs\nfor i in range(1,n+1):\n    tempprea = a[n+i-1]\n    tempposta = -1 * a[2*n-i]\n    heapq.heappush(pres,tempprea)\n    tempprepop=heapq.heappop(pres)\n    aps += tempprea-tempprepop\n    apresum[i]=aps\n    heapq.heappush(posts,tempposta)\n    temppostpop=heapq.heappop(posts)\n    aqs += tempposta - temppostpop\n    apossum[i]=aqs\nprint((max([x+y for x,y in zip(apresum,apossum[::-1])])))\n", "import heapq\nn = int(input())\na = list(map(int, input().split()))\n\nl_sum = [0 for _ in range(n+1)]\nr_sum = [0 for _ in range(n+1)]\n\nque = a[:n]\nl_sum[0] = sum(que)\nheapq.heapify(que)\n\nfor i in range(n):\n    l_sum[i+1] = l_sum[i]\n\n    if que[0] < a[n+i]:\n        l_sum[i+1] += a[n+i] - que[0]\n        heapq.heappop(que)\n        heapq.heappush(que, a[n+i])\n\n\nque = [-a[i] for i in range(2*n, 3*n)]\nr_sum[0] = -sum(que)\nheapq.heapify(que)\n\nfor i in range(n):\n    r_sum[i+1] = r_sum[i]\n    \n    if -que[0] > a[2*n-1-i]:\n        r_sum[i+1] += a[2*n-1-i] + que[0]\n        heapq.heappop(que)\n        heapq.heappush(que, -a[2*n-1-i])\n\n\nans = -1e15\nfor x in range(n+1):\n    ans = max(ans, l_sum[x] - r_sum[n-x])\n\nprint(ans)", "class HeapQueue:\n    \"\"\"\n    q = HeapQueue()\n    q.append(p, v)\n    v = q.pop()\n    \"\"\"\n    from heapq import heappop, heappush, heappushpop, heapreplace\n\n    def __init__(self, reverse=False):\n        self.reverse = reverse\n        self.heap = []\n\n    def __len__(self):\n        return len(self.heap)\n\n    def append(self, p, v):\n        self.heappush(self.heap, (-p if self.reverse else p, v))\n\n    def appendpop(self, p, v):\n        return self.heappushpop(self.heap, (-p if self.reverse else p, v))[1]\n\n    def popappend(self, p, v):\n        return self.heapreplace(self.heap, (-p if self.reverse else p, v))[1]\n\n    def pop(self):\n        return self.heappop(self.heap)[1]\n\n    def front(self):\n        return self.heap[0][1]\n\n\nN = int(input())\nA = [int(s) for s in input().split()]\nS = []\nT = []\n\nS.append(sum(A[:N]))\nq = HeapQueue()\nfor a in A[:N]:\n    q.append(a, a)\nfor a in A[N:2*N]:\n    m = q.appendpop(a, a)\n    S.append(S[-1] + a - m)\n\nT.append(sum(A[-N:]))\nq = HeapQueue(reverse=True)\nfor a in A[-N:]:\n    q.append(a, a)\nfor a in A[-N-1:N-1:-1]:\n    m = q.appendpop(a, a)\n    T.append(T[-1] + a - m)\nans = max([S[i] - T[N - i] for i in range(N + 1)])\nprint(ans)\n", "import heapq\n\nn = int(input())\na = list(map(int, input().split()))\nscore = [[0, 0] for _ in range(n + 1)]\nh1 = a[0 : n]\nh2 = [-a[2 * n + i] for i in range(n)]\nmaxscore = sum(h1)\nminscore = -sum(h2)\nheapq.heapify(h1)\nheapq.heapify(h2)\nscore[0][0] = maxscore\nscore[n][1] = minscore\nfor i in range(n):\n    heapq.heappush(h1, a[n + i])\n    heapq.heappush(h2, -a[2 * n - 1 - i])\n    maxscore = maxscore + a[n + i] - heapq.heappop(h1)\n    minscore = minscore + a[2 * n - 1 - i] + heapq.heappop(h2)\n    score[i + 1][0] = maxscore\n    score[n - 1 - i][1] = minscore\nans = -pow(10, 15)\nfor i in range(n + 1):\n    ans = max(ans, score[i][0] - score[i][1])\nprint(ans)", "from heapq import *\nN = int(input())\nA = list(map(int,input().split()))\nL,C,R = A[:N],A[N:2*N],A[2*N:]\nF = [sum(L)]\nheapify(L)\n\nfor c in C:\n  F.append(F[-1]+c-heappushpop(L,c))\n\nR = [-r for r in R]\nB = [sum(R)]\nheapify(R)\n\nfor c in reversed(C):\n  B.append(B[-1]-c-heappushpop(R,-c))\n\nprint(max(f+b for f,b in zip(F,reversed(B))))", "from heapq import heappush, heappop\n\nN = int(input())\na = [int(x) for x in input().split()]\n\nleft = sorted(a[:N])\nmax_left = [sum(left)]\n\nright = sorted([-x for x in a[-N:]])\nmin_right = [sum(right) * -1]\n\nfor i in range(N, 2 * N):\n    j = 3 * N - i - 1\n\n    heappush(left, a[i])\n    v = heappop(left)\n    max_left.append(max_left[-1] - v + a[i])\n\n    heappush(right, a[j] * -1)\n    v = heappop(right) * -1\n    min_right.append(min_right[-1] - v + a[j])\n\nans = float('-inf')\nfor l, r in zip(max_left, min_right[::-1]):\n    ans = max(l - r, ans)\nprint(ans)\n", "from heapq import heappop, heappush\n\ninf = float('inf')\n\nN = int(input())\nA = list(map(int,input().split()))\n\n# sum_max[k] : [0,k)\u306e\u3046\u3061N\u500b\u307e\u3067\u306e\u7dcf\u548c\u306e\u6700\u5927\u5024\n# sum_min[k] : (3N-1-k,3N-1]\u306e\u3046\u3061N\u500b\u307e\u3067\u306e\u7dcf\u548c\u306e\u6700\u5c0f\u5024\nsum_max = [0]*(3*N+1)\nsum_min = [0]*(3*N+1)\n\ndef init_max():\n    res = 0\n    hq = []\n    for i, a in enumerate(A):\n        if len(hq) < N:\n            heappush(hq,a)\n            res += a\n        else:\n            if hq[0] < a:\n                res -= heappop(hq)\n                heappush(hq,a)\n                res += a\n        sum_max[i+1] = res\n\ndef init_min():\n    res = 0\n    hq = []\n    for i, a in enumerate(A[::-1]):\n        if len(hq) < N:\n            heappush(hq,-a)\n            res += a\n        else:\n            if -hq[0] > a:\n                res -= -heappop(hq) \n                heappush(hq,-a)\n                res += a\n        sum_min[i+1] = res\n\ninit_max()\ninit_min()\n\nans = -inf\n\nfor k in range(N,2*N+1):\n    res = sum_max[k] - sum_min[3*N-k]\n    ans = max(ans, res)\n\nprint(ans)", "from heapq import heappop, heappush\ninf = float('inf')\n\nN = int(input())\nA = list(map(int,input().split()))\n\nl = []\nres = 0\nfor i in range(N):\n    heappush(l, A[i])\n    res += A[i]\nls = []\nls.append(res)\n\nfor i in range(N, 2*N):\n    heappush(l, A[i])\n    res += A[i]\n    res -= heappop(l)\n    ls.append(res)\n\nA.reverse()\n\ns = []\nres = 0\nfor i in range(N):\n    heappush(s, -A[i])\n    res += A[i]\nss = []\nss.append(res)\n\nfor i in range(N, 2*N):\n    heappush(s, -A[i])\n    res += A[i]\n    res -= -heappop(s)\n    ss.append(res)\n\nss.reverse()\n\nans = -inf\n\nfor i in range(N+1):\n    score = ls[i] - ss[i]\n    ans = max(ans, score)\n\nprint(ans)", "n=int(input())\na=list(map(int,input().split()))\nans=-10**18\na_minus=[-x for x in a]\naf=a[:n]\nae=a_minus[2*n:]\nf_sum=[sum(af)]\ne_sum=[sum(ae)]\nfrom heapq import heapify,heappop,heappush\nheapify(af)\nfor aa in a[n:2*n]:\n  heappush(af,aa)\n  t=heappop(af)\n  f_sum.append(f_sum[-1]+aa-t)\nheapify(ae)\nfor aa in reversed(a[n:2*n]):\n  heappush(ae,-aa)\n  t=heappop(ae)\n  e_sum.append(e_sum[-1]-aa-t)\nfor f,e in zip(f_sum,reversed(e_sum)):\n  ans=max(ans,f+e)\nprint(ans)\n", "import heapq\n\nn = int(input())\nA = list(map(int,input().split()))\n\nQ0 = []\nQ1 = []\nAna = [0] * (3*n)\n\nM = [[A[n+i], n+i] for i in range(2*n)]\nM.sort() \n\nmsum = sum([M[i][0] for i in range(n)])\nans = sum(A[:n]) - msum\nans0 = ans\n#print(ans0)\n\nfor i in range(n):\n    heapq.heappush(Q0, A[i])\n    heapq.heappush(Q1, [M[n+i][0], M[n+i][1]])\n    Ana[M[n+i][1]] = 1\n\nfor i in range(n):\n    #print(\"i\",i, Q0,Q1,Ana)\n    if Ana[n+i] == 0:\n        heapq.heappush(Q0, A[n+i])\n        ans0 += A[n+i] * 2\n        ochi = heapq.heappop(Q0)\n        ans0 -= ochi\n        agari = heapq.heappop(Q1)\n        while Ana[agari[1]] == 0:\n            agari = heapq.heappop(Q1)\n        Ana[agari[1]] = 0\n        ans0 -= agari[0]\n    else:\n        Ana[n+i] = 0\n        heapq.heappush(Q0, A[n+i])\n        ans0 += A[n+i]\n        ochi = heapq.heappop(Q0)\n        ans0 -= ochi\n    #print(ans0)\n    ans = max(ans, ans0)\n\n\nsaigo = sum((sorted(A[:n*2]))[n:]) - sum(A[n*2:])\n#print(saigo)\n\nans = max(ans, saigo)\n\nprint(ans)", "import heapq\nn=int(input())\na=list(map(int,input().split()))\ns1=sum(a[:n])\nhq1=a[:n]\nheapq.heapify(hq1)\nA=[s1]\nfor i in range(n,2*n):\n  s1+=a[i]\n  heapq.heappush(hq1,a[i])\n  x=heapq.heappop(hq1)\n  s1-=x\n  A.append(s1)\na=a[::-1]\ns2=sum(a[:n])\nhq2=[-a[i] for i in range(n)]\nheapq.heapify(hq2)\nB=[s2]\nfor i in range(n,2*n):\n  s2+=a[i]\n  heapq.heappush(hq2,-a[i])\n  x=heapq.heappop(hq2)\n  s2-=-x\n  B.append(s2)\nB=B[::-1]\nans=-10**18\nfor i in range(len(A)):\n  ans=max(ans,A[i]-B[i])\nprint(ans)", "N = int(input())\nA = list(map(int,input().split()))\nS = []\nP = A[:N]\nQ = A[2*N:]\nfor i in range(N):\n    Q[i] *= -1\nR = A[N:2*N]\np = [0]*(N+1)\nq = [0]*(N+1)\nimport heapq\nheapq.heapify(P)\nheapq.heapify(Q)\nsp = sum(P)\nsq = sum(Q)\np[0] = sp\nq[0] = sq\n\nfor i in range(1,N+1):\n    heapq.heappush(P,R[i-1])\n    x = heapq.heappop(P)\n    heapq.heappush(Q,-R[-i])\n    y = heapq.heappop(Q)\n    sp = sp + R[i-1] - x\n    sq = sq - R[-i] - y\n    p[i] = sp\n    q[i] = sq\nans = -(10**100)\nfor k in range(N+1):\n    ans = max(ans,p[k] + q[N-k])\n    \nprint(ans)", "from heapq import heapify,heappop,heappush\nN=int(input())\na=list(map(int,input().split()))\nans=-10**18\na_neg=[-x for x in a]\naf=a[:N]\nae=a_neg[2*N:]\nf_sum=[sum(af)]\ne_sum=[sum(ae)]\n\nheapify(af)\nfor aa in a[N:2*N]:\n  heappush(af,aa)\n  t=heappop(af)\n  f_sum.append(f_sum[-1]+aa-t)\n\nheapify(ae)\nfor aa in reversed(a[N:2*N]):\n  heappush(ae,-aa)\n  t=heappop(ae)\n  e_sum.append(e_sum[-1]-aa-t)\n\nfor f,e in zip(f_sum,reversed(e_sum)):\n  ans=max(ans,f+e)\n\nprint(ans)", "import sys\nfrom heapq import heapify,heappushpop\n\ndef main():\n    rl=sys.stdin.readline\n    n=int(rl().strip())\n    a=list(map(int,rl().strip().split()))\n    b=[-x for x in a]\n    b.reverse()\n    fl=a[:n]\n    fs=sum(fl)\n    ll=b[:n]\n    ls=sum(ll)\n    fdl=[0]*(n+1)\n    ldl=[0]*(n+1)\n    heapify(fl)\n    heapify(ll)\n    for i in range(1,n+1):\n        fmn=heappushpop(fl,a[n+i-1])\n        lmn=heappushpop(ll,b[n+i-1])\n        fdl[i]=fdl[i-1]+a[n+i-1]-fmn\n        ldl[i]=ldl[i-1]+b[n+i-1]-lmn\n    ldl.reverse()\n    dif=max([x+y for x,y in zip(fdl,ldl)])\n    print((fs+ls+dif))\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "from heapq import heapify, heappushpop\n\ndef abc062_d():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    front = A[:n]\n    fsum = [0] * (3*n)\n    fsum[n-1] = sum(front)\n    heapify(front)\n    for i in range(n, 2*n):\n        fmin = heappushpop(front, A[i])\n        fsum[i] = fsum[i-1] + A[i] - fmin\n\n    back = [-1*a for a in A[2*n:]]\n    bsum = [0] * (3*n)\n    bsum[2*n] = -1 * sum(back)\n    heapify(back)\n    for i in range(2*n-1, n-1, -1):\n        bmax = -1 * heappushpop(back, -1*A[i])\n        bsum[i] = bsum[i+1] + A[i] - bmax\n\n    ans = -10**18\n    for i in range(n-1, 2*n):\n        ans = max(ans, fsum[i] - bsum[i+1])\n    print(ans)\n\ndef __starting_point():\n    abc062_d()\n__starting_point()", "import heapq\n\nn = int(input())\nA = list(map(int, input().split()))\nLeft_top = A[:n]\nRight_bottom = [-i for i in A[-n:]]\nL = [0]*(n+1)\nR = [0]*(n+1)\nL[0] = sum(Left_top)\nR[-1] = sum(Right_bottom)\nheapq.heapify(Left_top)\nheapq.heapify(Right_bottom)\nfor i in range(n, 2*n):\n  L[i-n+1] = L[i-n] - heapq.heappushpop(Left_top, A[i]) + A[i]\n  R[2*n-i-1] = R[2*n-i] - heapq.heappushpop(Right_bottom, -A[-(i+1)]) - A[-(i+1)]\nans = -float(\"inf\")\nfor i in range(n+1):\n  ans = max(ans, L[i] + R[i])\nprint(ans)", "import heapq as hp\nimport sys\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int, input().split()))\n\nq1 = []\nfor i in range(N):\n    hp.heappush(q1, A[i])\n\nPsum = [0]*(N+1)\nPsum[0] = sum(q1)\n\nfor i in range(N):\n    a1 = hp.heappop(q1)\n    p = max(a1, A[N+i])\n    hp.heappush(q1, p)\n    Psum[i+1] = Psum[i] + p - a1\n\nq2 = []\nfor i in range(N):\n    hp.heappush(q2, -A[i+2*N])\n\nQsum = [0]*(N+1)\nQsum[N] = sum(q2)\n\nfor i in range(N-1, -1, -1):\n    a2 = hp.heappop(q2)\n    p = max(a2, -A[N+i])\n    hp.heappush(q2, p)\n    Qsum[i] = Qsum[i+1] + p - a2\n\n\nfor i in range(N+1):\n    if i == 0:\n        ans = Psum[i]+Qsum[i]\n    ans = max(Psum[i]+Qsum[i], ans)\nprint(ans)", "import heapq\ndef solve():\n  n = int(input())\n  a = list(int(i) for i in input().split())\n  an = []\n  a2n = a[n:2*n]\n  a3n = []\n  for i in range(n):\n    heapq.heappush(an,a[i])\n    heapq.heappush(a3n,-1*a[i+2*n])\n  ta2n = a2n\n  \n  tmpsuman = sum(an)\n  tmpsuma3n = -1*sum(a3n)\n  \n  suman = [tmpsuman]\n  suma3n = [tmpsuma3n]\n  \n  for i in range(n):\n    tmp = ta2n[i]\n    tmpsuman += tmp\n    heapq.heappush(an,tmp)\n    tmpsuman -= heapq.heappop(an)\n    \n    suman.append(tmpsuman)\n  for i in range(n):\n    tmp = ta2n[n-i-1]\n    tmpsuma3n += tmp\n    heapq.heappush(a3n,-1*tmp)\n    tmpsuma3n -= -1*heapq.heappop(a3n)\n    suma3n.append(tmpsuma3n)\n\n  ans = -10000000000000000\n  for i in range(n+1):\n    tmpans = suman[i]-suma3n[n-i]\n    ans = max(ans,tmpans)\n  print(ans)\nsolve()", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    from heapq import heapify, heappushpop\n\n    # first half\n    fh = []\n    l = a[:n]\n    fh.append(sum(l))\n    heapify(l)\n    for i in a[n:2*n]:\n        if l[0] < i:\n            fh.append(fh[-1] + i - heappushpop(l, i))\n        else:\n            fh.append(fh[-1])\n\n    # latter half\n    lh = []\n    l = [-i for i in a[2*n:]]\n    lh.append(sum(l))\n    heapify(l)\n    for i in a[2*n-1:n-1:-1]:\n        if l[0] < -i:\n            lh.append(lh[-1] - i - heappushpop(l, -i))\n        else:\n            lh.append(lh[-1])\n\n    ans = fh[0] + lh[n]\n    for i in range(1, n+1):\n        if ans < fh[i] + lh[n-i]:\n            ans = fh[i] + lh[n-i]\n\n    print(ans)\n\nmain()", "import heapq\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    fl = [i for i in A[:N]]\n    f = [sum(A[:N])]\n    heapq.heapify(fl)\n    ll = [-i for i in A[2*N:]]\n    l = [sum(A[2*N:])]\n    heapq.heapify(ll)\n    for i in range(N):\n        s = f[-1]\n        if A[N+i] > fl[0]:\n            s = s - fl[0] + A[N+i]\n            heapq.heappushpop(fl, A[N+i])\n        f.append(s)\n        s = l[-1]\n        if - A[2*N-1-i] > ll[0]:\n            s = s + ll[0] + A[2*N-1-i]\n            heapq.heappushpop(ll, -A[2*N-1-i])\n        l.append(s)\n    r = f[0] - l[-1]\n    for i in range(N+1):\n        r = max(r, f[i] - l[-1-i])\n    return r\nprint((main()))\n", "from collections import deque\nfrom heapq import heapify, heappop, heappush\nN = int(input())\ntmp = list(map(int, input().split(' ')))\nformer_A = deque(tmp)\nlatter_A = deque(tmp.copy())\nformer_heap = list()\nlatter_heap = list()\nfor _ in range(N):\n    former_heap.append(former_A.popleft())\n    latter_heap.append(- latter_A.pop())\nheapify(former_heap)\nheapify(latter_heap)\n\nformer_sum = sum(former_heap)\nformer_sum_list = [former_sum]\nfor k in range(N):\n    new_a = former_A.popleft()\n    heappush(former_heap, new_a)\n    min_a = heappop(former_heap)\n    former_sum += new_a - min_a\n    former_sum_list.append(former_sum)\n\nlatter_sum = sum(latter_heap)\nlatter_sum_list = [latter_sum]\nfor k in range(N):\n    new_a = - latter_A.pop()\n    heappush(latter_heap, new_a)\n    min_a = heappop(latter_heap)\n    latter_sum += new_a - min_a\n    latter_sum_list.append(latter_sum)\nlatter_sum_list.reverse()\n\nanswer = max([former + latter for former, latter in zip(former_sum_list, latter_sum_list)])\nprint(answer)", "from heapq import heapify, heappushpop\n\nN, *A = map(int, open(0).read().split())\n\nL, C, R = A[:N], A[N:2 * N], A[2 * N:]\n\nF = [sum(L)]\nheapify(L)\nfor c in C:\n    F.append(F[-1] + c - heappushpop(L, c))\n\nR = [-r for r in R]\nB = [sum(R)]\nheapify(R)\nfor c in reversed(C):\n    B.append(B[-1] - c - heappushpop(R, -c))\n\nprint(max(f + b for f, b in zip(F, reversed(B))))", "import heapq\n\nN = int(input())\nA = list(map(int, input().split()))\n\nL = A[:N]\nheapq.heapify(L)\nLmax = [0] * (N + 1)\nLsum = sum(L)\nLmax[0] = Lsum\nfor i in range(N, 2 * N):\n    m = heapq.heappushpop(L, A[i])\n    Lsum += A[i] - m\n    Lmax[i - N + 1] = Lsum\n\nR = [-x for x in A[2 * N:]]\nheapq.heapify(R)\nRmin = [0] * (N + 1)\nRsum = -sum(R)\nRmin[N] = Rsum\nfor i in range(2 * N - 1, N - 1, -1):\n    M = -heapq.heappushpop(R, -A[i])\n    Rsum -= M - A[i]\n    Rmin[i - N] = Rsum\n\nprint((max(Lmax[i] - Rmin[i] for i in range(N + 1))))\n", "from heapq import heapify, heappushpop\nn = int(input())\na = list(map(int, input().split()))\na1 = a[:n]\nheapify(a1)\na2 = a[n:2*n]\na3 = [-i for i in a[2*n:]]\nheapify(a3)\nb1 = [sum(a1)]\nb2 = [sum(a3)]\nfor i in range(n):\n    b1.append(b1[-1]+a2[i]-heappushpop(a1, a2[i]))\n    b2.append(b2[-1]-heappushpop(a3, -a2[n-i-1])-a2[n-i-1])\nans = b1[0]+b2[n]\nfor i in range(n+1):\n    ans = max(ans, b1[i]+b2[n-i])\nprint(ans)", "import heapq\n\nn = int(input())\na = list(map(int, input().split()))\nplus = [sum(a[:n])]\nminus = [-sum(a[-n:])]\np = a[:n]\nm = [-i for i in a[-n:]]\nheapq.heapify(p)\nheapq.heapify(m)\nfor i in range(n,2*n):\n  pn = a[i]\n  mn = -a[-(i+1)]\n  if pn > p[0]:\n    plus.append(plus[-1] + pn - heapq.heappop(p))\n    heapq.heappush(p, pn)\n  else:\n    plus.append(plus[-1])\n  if mn > m[0]:\n    minus.append(minus[-1] + mn - heapq.heappop(m))\n    heapq.heappush(m, mn)\n  else:\n    minus.append(minus[-1])\nminus.reverse()\nans = []\nfor i,j in zip(plus,minus):\n  ans.append(i+j)\nprint(max(ans))", "from heapq import heappop,heappush,heapify\nn=int(input())\na=list(map(int,input().split()))\nleft=[0]*n\nlst=a[:n]\ns=sum(lst)\nheapify(lst)\nfor i in range(n):\n    heappush(lst,a[n+i])\n    x=heappop(lst)\n    if i==0:\n        left[0]=s+a[n]-x\n    else:\n        left[i]=left[i-1]+a[n+i]-x\nleft=[s]+left\nright=[0]*n\nlst=[]\nfor i in range(2*n,3*n):\n    lst.append(-a[i])\ns=-sum(lst)\nheapify(lst)\nfor i in range(n):\n    heappush(lst,-a[2*n-1-i])\n    x=-heappop(lst)\n    if i==0:\n        right[n-1]=s+a[2*n-1]-x\n    else:\n        right[n-1-i]=right[n-i]+a[2*n-1-i]-x\nright+=[s]\nans=-float(\"inf\")\nfor i in range(n+1):\n    ans=max(ans,left[i]-right[i])\nprint(ans)", "import heapq\n\nn=int(input())\narr=list(map(int,input().split()))\nq1=[]\ntmp=0\nfor val in arr[:n]:\n  heapq.heappush(q1,val)\n  tmp+=val\nsum1=[tmp]\nfor val in arr[n:2*n]:\n  tmp=heapq.heappop(q1)\n  if val>tmp:\n    heapq.heappush(q1,val)\n    sum1.append(sum1[-1]+(val-tmp))\n  else:\n    heapq.heappush(q1,tmp)\n    sum1.append(sum1[-1])\nq2=[]\ntmp=0\nfor val in arr[2*n:]:\n  heapq.heappush(q2,-val)\n  tmp+=val\nsum2=[tmp]\nfor val in arr[2*n-1:n-1:-1]:\n  tmp=-heapq.heappop(q2)\n  if val<tmp:\n    heapq.heappush(q2,-val)\n    sum2.append(sum2[-1]+(val-tmp))\n  else:\n    heapq.heappush(q2,-tmp)\n    sum2.append(sum2[-1])\nsum2=sum2[::-1]\nans=-10**18\nfor i in range(n+1):\n  tmp=sum1[i]-sum2[i]\n  ans=max(ans,tmp)\nprint(ans)", "import heapq\nN=int(input())\na=list(map(int,input().split()))\nl=[None]*(N+1)\nr=[None]*(N+1)\nh=a[:N]\ns=sum(h)\nheapq.heapify(h)\nl[0]=s\nfor i in range(N):\n    heapq.heappush(h,a[i+N])\n    s+=a[i+N]-heapq.heappop(h)\n    l[i+1]=s\nh=list(map(lambda x:-x,a[2*N:]))\nheapq.heapify(h)\ns=sum(h)\nr[-1]=s\nfor i in range(N):\n    heapq.heappush(h,-a[-N-i-1])\n    s+=-a[-N-i-1]-heapq.heappop(h)\n    r[-i-2]=s\na=l[0]+r[0]\nfor i in range(1,N+1):\n    if a<l[i]+r[i]:\n        a=l[i]+r[i]\nprint(a)", "from heapq import heappush, heappop\nN = int(input())\nA = [int(a) for a in input().split()]\ndpx = [0]*(N+1)\ndpy = [0]*(N+1)\ndpx[0] = sum(A[:N])\ndpy[-1] = sum(A[2*N:])\nX = []\nY = []\nfor i in range(N):\n  heappush(X,A[i])\n\nfor i in range(N):\n  heappush(Y,-A[3*N-1-i])\n\nfor i in range(N):\n  a = heappop(X)\n  b = A[N+i]\n  if b>a:\n    heappush(X,b)\n    dpx[i+1] = dpx[i]+b-a\n  else:\n    heappush(X,a)\n    dpx[i+1] = dpx[i]\n  \n  c = -heappop(Y)\n  d = A[2*N-1-i]\n  if d<c:\n    heappush(Y,-d)\n    dpy[N-1-i] = dpy[N-i]+d-c\n  else:\n    heappush(Y,-c)\n    dpy[N-1-i] = dpy[N-i]\n\nans = -float('inf')\nfor i in range(N+1):\n  ans = max(ans, dpx[i]-dpy[i])\nprint(ans)", "from heapq import heappush, heappushpop\n \nN = int(input())\na = list(map(int, input().split()))\n \na_list_1 = []\na_list_2 = []\nfor i in a[0:N]:\n    heappush(a_list_1, i)\nfor i in list(reversed(a))[0:N]:\n    heappush(a_list_2, -i)\n \nsum_1 = sum(a_list_1)\nsum_2 = sum(a_list_2)\nsum_arr_1 = [0] * (N + 1)\nsum_arr_1[0] = sum_1\nsum_arr_2 = [0] * (N + 1)\nsum_arr_2[-1] = sum_2\nfor k in range(N, 2 * N):\n    l = heappushpop(a_list_1, a[k])\n    sum_1 += a[k] - l\n    sum_arr_1[k - N + 1] = sum_1\n \nfor k in reversed(range(N, 2 * N)):\n    l = heappushpop(a_list_2, -a[k])\n    sum_2 += -a[k] - l\n    sum_arr_2[k - N] = sum_2\n \nmax_score = float('-inf')\nfor s1, s2 in zip(sum_arr_1, sum_arr_2):\n    score = s1 + s2\n    if score > max_score:\n        max_score = score\n \nprint(max_score)", "with open(0) as f:\n    N, *a = map(int, f.read().split())\nF = [x for x in a[:N]] #F\u306e\u8981\u7d20\u306f\u52a0\u3048\u308b\u304b\u53d6\u308a\u9664\u304f\u304b\u306e2\u629e\nC = [x for x in a[N:2*N]] \nB = [-x for x in a[2*N:]] #B\u306e\u8981\u7d20\u306f\u5f15\u304f\u304b\u53d6\u308a\u9664\u304f\u304b\u306e\u4e8c\u629e\nimport heapq as hq\n#\u30d2\u30fc\u30d7\u306b\u3057\u3066\u5e38\u306b\u6700\u5c0f\u5024\u3092\u8ffd\u8de1\nhq.heapify(F)\nhq.heapify(B)\n\n#C\u3092\u4e8c\u5206\u3057\u3001\u524d\u534a\u306fF\u3068\u3001\u5f8c\u534a\u306fB\u3068\u3067\u6f14\u7b97\u3092\u884c\u3046\n#\u6f14\u7b97\u65b9\u6cd5(c in C)\n#\u524d\u534a\uff1ac\u304cF[0]\u3088\u308a\u5927\u304d\u3051\u308c\u3070F[0]\u3092\u53d6\u308a\u9664\u304fN\u500b\u306e\u4e00\u3064\u3068\u3057\u3001c\u3092\u30b9\u30b3\u30a2\u306b\u52a0\u3048\u308b\n#\u5f8c\u534a\uff1a-c\u304cB[0]\u3088\u308a\u5927\u304d\u3051\u308c\u3070B[0]\u3092\u53d6\u308a\u9664\u304fN\u500b\u306e\u4e00\u3064\u3068\u3057\u3001c\u3092\u30b9\u30b3\u30a2\u304b\u3089\u5f15\u304f\n#\u3069\u3061\u3089\u3082\u5834\u5408\u3082\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u5834\u5408\u306f\u305d\u306e\uff43\u3092\u53d6\u308a\u9664\u304fN\u500b\u306e\u4e00\u3064\u3068\u3059\u308b\n#\u8a08\u7b97\u91cf\uff1aO(N*N*logN)\n#\u9014\u4e2d\u8a08\u7b97\u3092\u30e1\u30e2\u3057\u3066\u8a08\u7b97\u91cf\u8efd\u6e1b\nfrom copy import deepcopy\nmemoF = [0] * (N+1) #C[:i]\u3092\u524d\u534a\u3068\u3057\u305f\u3068\u304d\u306eF\u3068\u306e\u6f14\u7b97\u7d50\u679c\u306e\u8981\u7d20\u548c\nmemoF[0] = sum(F)\nmemoB = [0] * (N+1) #C[i:]\u3092\u5f8c\u534a\u3068\u3057\u305f\u3068\u304d\u306eB\u3068\u306e\u6f14\u7b97\u7d50\u679c\u306e\u8981\u7d20\u548c\nmemoB[N] = sum(B)\nfor i in range(N):\n    if C[i] > F[0]:\n        memoF[i+1] = memoF[i] + C[i] - hq.heapreplace(F, C[i])\n    else:\n        memoF[i+1] = memoF[i]\n\n    if -C[N-1-i] > B[0]:\n        memoB[N-1-i] = memoB[N-i] - C[N-1-i] - hq.heapreplace(B, -C[N-1-i])\n    else:\n        memoB[N-1-i] = memoB[N-i]\n\nScores = [memoF[i]+memoB[i] for i in range(N+1)]\nans = max(Scores)\nprint(ans)", "import heapq\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    AH = sorted([(a, i) for i, a in enumerate(A[:2 * N])], reverse=True)\n    AT = sorted(A[-N:])\n    ATT = []\n    for a in AT:\n        heapq.heappush(ATT, -a)\n    used = [False] * (2 * N)\n    for _, i in AH[:N]:\n        used[i] = True\n\n    h = sum(a for a, _ in AH[:N])\n    t = sum(AT)\n    m = h - t\n    hp = N\n    for i in reversed(list(range(N, 2 * N))):\n        t += A[i]\n        t += heapq.heappushpop(ATT, -A[i])\n        if used[i]:\n            h -= A[i]\n            while AH[hp][1] > i:\n                hp += 1\n            h += AH[hp][0]\n            used[AH[hp][1]] = True\n            hp += 1\n\n        m = max(m, h - t)\n    return m\n\nprint((main()))\n", "import heapq\n\n\nN = int(input())\n\na = list(map(int,input().split()))\n\nlq = []\nlsum = 0\nrq = []\nrsum = 0\n\nfor i in range(N):\n\n    heapq.heappush(lq,a[i])\n    lsum += a[i]\n\n    heapq.heappush(rq,-1 * a[3 * N - 1 - i])\n    rsum += a[3*N-1-i]\n\nllis = []\nrlis = []\n\nfor i in range(N+1):\n\n    llis.append(lsum)\n    rlis.append(rsum)\n\n    heapq.heappush(lq,a[N+i])\n    heapq.heappush(rq,-1 * a[2*N-1-i])\n    lsum += a[N+i]\n    rsum += a[2*N-1-i]\n\n    lpop = heapq.heappop(lq)\n    rpop = -1 * heapq.heappop(rq)\n    lsum -= lpop\n    rsum -= rpop\n\nrlis.reverse()\n\nans = -1 * float(\"inf\")\n\nfor i in range(N+1):\n\n    ans = max(ans,llis[i]-rlis[i])\n\nprint (ans)\n\n    \n", "import copy\nimport heapq\nN = int(input())\nA = list(map(int, input().split()))\n\nh1 = copy.deepcopy(A[:N])\nx = sorted(A[N:])\nh2 = x[N:]\nx = x[:N]\n\nnow_w = sum(h1) - sum(x)\nans = now_w\nused = []\nheapq.heapify(h1)\nheapq.heapify(h2)\nheapq.heapify(used)\n\nfor i in range(N):\n  now = A[N+i]\n  heapq.heappush(h1, now)\n  left = heapq.heappop(h1)\n  while True:\n    right_cand = heapq.heappop(h2)\n    if len(used) > 0:\n      x = heapq.heappop(used)\n      if x == right_cand:\n        continue\n      else:\n        heapq.heappush(used, x)\n    break\n      \n  if right_cand >= now:\n    right = right_cand\n  else:\n    right = now\n    heapq.heappush(h2, right_cand)\n    heapq.heappush(used, now)\n  now_w = now_w - left + 2*now - right\n  #print(ans, i, now_w, left, now, right)\n  ans = max(ans, now_w)\n  \nprint(ans)", "# -*- coding: utf-8 -*-\n\nimport sys\nfrom heapq import heapify, heappush, heappop\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN = INT()\nA = LIST()\n\nA1 = A[:N]\nA2 = A[N:N*2]\nA3 = [-a for a in A[N*2:]]\nheapify(A1)\nheapify(A3)\n\n# \u771f\u3093\u4e2d\u30b0\u30eb\u30fc\u30d7(A2)\u3092i\u307e\u3067\u5de6\u306b\u53d6\u308a\u8fbc\u3093\u3060\u6642\u306e\u5de6\u30b0\u30eb\u30fc\u30d7(A1)\u306e\u6700\u5927\u5024\nansa = [0] * (N+1)\nansa[0] = sum(A1)\nfor i in range(N):\n    heappush(A1, A2[i])    \n    ansa[i+1] = ansa[i] + A2[i] - heappop(A1)\n\n# \u771f\u3093\u4e2d\u30b0\u30eb\u30fc\u30d7(A2)\u3092\u5f8c\u308d\u304b\u3089i\u307e\u3067\u53f3\u306b\u53d6\u308a\u8fbc\u3093\u3060\u6642\u306e\u53f3\u30b0\u30eb\u30fc\u30d7(A1)\u306e\u6700\u5c0f\u5024\nansb = [0] * (N+1)\nansb[N] = -sum(A3)\nfor i in range(N-1, -1, -1):\n    heappush(A3, -A2[i])\n    ansb[i] = ansb[i+1] + A2[i] - (-heappop(A3))\n\n# \u5404\u4f4d\u7f6ei\u304b\u3089\u4e00\u756a\u3044\u3044\u5834\u6240\u3092\u5f97\u308b\nans = -INF\nfor i in range(N+1):\n    ans = max(ans, ansa[i]-ansb[i])\nprint(ans)\n", "from heapq import heapify, heappop, heappush\n\nN = int(input())\nA = list(map(int, input().split()))\nA = [-a for a in A]\n\nL = [[a, i] for i, a in enumerate(A[:2*N])]\nSl = 0\nheapify(L)\nused = set()\nfor i in range(N):\n  a, i = heappop(L)\n  used.add(i)\n  Sl -= a\n\nR = A[2*N:].copy()\nSr = -sum(R)\nheapify(R)\n\nans = Sl - Sr\nfor i in range(2*N-1, N-1, -1):\n  a = - A[i]\n  r =  - heappop(R)\n  if a > r:\n    heappush(R, -r)\n  else:\n    Sr += a - r\n    heappush(R, -a)\n  if i in used:\n    while L:\n      l, j = heappop(L)\n      l *= -1\n      if j < i:\n        Sl += l - a\n        used.add(j)\n        break\n  ans = max(ans, Sl - Sr)\n\nprint(ans)", "import  heapq\n\nN = int(input())\na = list(map(int, input().split()))\nc_que = list(map(lambda x:x*(-1), a[2*N:]))\na_que = a[:N]\n\na_sum = sum(a_que)\nc_sum = -sum(c_que)\n\nheapq.heapify(a_que)\nheapq.heapify(c_que)\n\nans = -(10**15)\n\nscore = [[0, 0] for _ in range(N+1)]\nscore[0][0] = a_sum\nscore[N][1] = c_sum\n\nfor i in range(N):\n    heapq.heappush(a_que, a[N+i])\n    heapq.heappush(c_que, -a[2*N-1-i])\n    \n    a_sum = a_sum + a[N+i] - heapq.heappop(a_que)\n    c_sum = c_sum + a[2*N-1-i] + heapq.heappop(c_que)\n    \n    score[i+1][0] = a_sum\n    score[N-1-i][1] = c_sum\n    \nfor i in range(N+1):\n    ans = max(ans, score[i][0]-score[i][1])\nprint(ans)", "maxi=-10**99 \nn=int(input())\nimport heapq \nl=[int(i) for i in input().split()]\nk=n\nsm=sum(l[0:n])\nz1=[0]*(n+1)\nz2=[0]*(n+1)\nh=[]\nz1[0]=sm \nj=1 \nheapq.heapify(h)\nfor i in range(n):\n    heapq.heappush(h,l[i])\nfor i in range(n,2*n):\n    p=l[i]\n    if p>h[0]: \n        sm+=p \n        sm-=h[0]\n        heapq.heappop(h)\n        heapq.heappush(h,p)\n    else:\n        pass \n    z1[j]=sm \n    j+=1 \nsm=sum(l[2*n:3*n])\nh=[]\nheapq.heapify(h)\nsm=0 \nfor i in range(2*n,3*n):\n    heapq.heappush(h,-l[i])\n    sm+=(l[i])\nj=n \nz2[j]=sm  \nj-=1 \n#print(h[0])\n#print(sm)\nfor i in range(2*n-1,n-1,-1): \n    p=-l[i]\n    if p>h[0]:\n        #print('jif')\n        sm=sm+h[0]-p\n        heapq.heappop(h)\n        heapq.heappush(h,p)\n        \n    else:\n        pass \n    z2[j]=sm \n    j-=1 \nmaxi=-(10**99)\n#print(z1)\n#print(z2)\nfor i in range(n+1):\n    maxi=max(maxi,z1[i]-z2[i])\nprint(maxi)", "import sys\nfrom heapq import heapify, heappop, heappush\n\nread = sys.stdin.read\n\nN, *a = list(map(int, read().split()))\n\na1 = a[:N]\na2 = a[N:-N]\na3 = a[-N:]\n\nleft = sum(a1)\nright = sum(a3)\n\nheapify(a1)\na3 = [-i for i in a3]\nheapify(a3)\n\nb = [0] * (N + 1)\nb[0] = left\nfor n, i in enumerate(a2, 1):\n    if a1[0] < i:\n        j = heappop(a1)\n        left = left - j + i\n        heappush(a1, i)\n    b[n] = left\n\nc = [0] * (N + 1)\nc[0] = right\nfor n, i in enumerate(a2[::-1], 1):\n    if i < -a3[0]:\n        j = -heappop(a3)\n        right = right - j + i\n        heappush(a3, -i)\n    c[n] = right\nc = c[::-1]\n\nanswer = max(i - j for i, j in zip(b, c))\nprint(answer)\n", "#!/usr/bin/env python3\nimport heapq\nimport sys\ntry:\n    from typing import List\nexcept ImportError:\n    pass\n\n\ndef solve(N: int, a: \"List[int]\"):\n    h = a[:N]\n    heapq.heapify(h)\n    l1 = [0] * (N + 1)\n    l1[0] = sum(h)\n    for i in range(N):\n        m = heapq.heappushpop(h, a[N + i])\n        l1[i + 1] = l1[i] + a[N + i] - m\n    h = [-ai for ai in a[-N:]]\n    heapq.heapify(h)\n    l2 = [0] * (N + 1)\n    l2[N] = sum(h)\n    for i in reversed(list(range(N))):\n        m = heapq.heappushpop(h, -a[N + i])\n        l2[i] = l2[i + 1] + (-a[N + i]) - m\n    print((max(l1[i] + l2[i] for i in range(N + 1))))\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    a = [int(next(tokens)) for _ in range(3 * N)]  # type: \"List[int]\"\n    solve(N, a)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport queue\n\n#+++++\n\t\t\ndef main():\n\tn = int(input())\n\tnnn = list(map(int, input().split()))\n\t\n\tppp=nnn[:n]\n\tccc=nnn[n:2*n]\n\tbbb=nnn[2*n:]\n\t\n\tpp_v=[0]*(n+1)\n\tppq=queue.PriorityQueue()\n\tfor v in ppp:\n\t\tppq.put(v)\n\t\n\tpre=sum(ppp)\n\tpp_v[0]=pre\n\tfor i,v in enumerate(ccc):\n\t\tppq.put(v)\n\t\tt=ppq.get()\n\t\tpre=pre+v-t\n\t\tpp_v[i+1]=pre\n\t\t\n\t\t\n\tbb_v=[0]*(n+1)\n\tbbq=queue.PriorityQueue()\n\tfor v in bbb:\n\t\tbbq.put(-v)\n\t\n\tpre=-1*sum(bbb)\n\tbb_v[0]=pre\n\tfor i,v in enumerate(ccc[::-1]):\n\t\tbbq.put(-v)\n\t\tt=bbq.get()\n\t\tpre=pre+(-v)-(t)\n\t\tbb_v[i+1]=pre\n\t\t\n\tdd=[p+q for p,q in zip(pp_v,bb_v[::-1])]\n\tans=max(dd)\n\t\n\tprint(ans)\n\t\n\t\n#+++++\nisTest=False\n\ndef pa(v):\n\tif isTest:\n\t\tprint(v)\n\ndef __starting_point():\n\tif sys.platform =='ios':\n\t\tsys.stdin=open('inputFile.txt')\n\t\tisTest=True\n\telse:\n\t\tpass\n\t\t#input = sys.stdin.readline\n\t\t\t\n\tret = main()\n\tif ret is not None:\n\t\tprint(ret)\n__starting_point()", "from heapq import heappop,heappush\nn=int(input())\na=list(map(int,input().split()))\np=sum(a[2*n:])\nright_min=[p]\nhq=[]\nfor i in range(2*n,2*n+n):\n\theappush(hq,-a[i])\nfor i in range(n):\n\tp+=a[-n-i-1]\n\theappush(hq,-a[-n-i-1])\n\tp+=heappop(hq)\n\tright_min.append(p)\nl=sum(a[:n])\nhq=[]\nfor i in range(n):\n\theappush(hq,a[i])\nright_min.reverse()\nans=l-right_min[0]\nfor i in range(n):\n\tl+=a[n+i]\n\theappush(hq,a[n+i])\n\tl-=heappop(hq)\n\tans=max(ans,l-right_min[i+1])\nprint(ans)", "from heapq import heappush,heappop,heapify\nn=int(input())\na=list(map(int,input().split()))\nans=-float(\"inf\")\nl=a[:n]\nheapify(l)\nt=sum(a[:n])\nls=[t]\nfor i in range(n,2*n):\n    t+=a[i]\n    heappush(l,a[i])\n    t-=heappop(l)\n    ls.append(t)\nr=[-i for i in a[2*n:]]\nheapify(r)\nt=sum(a[2*n:])\nrs=[t]\nfor i in range(2*n-1,n-1,-1):\n    t+=a[i]\n    heappush(r,-a[i])\n    t+=heappop(r)\n    rs.append(t)\nfor i in range(n+1):\n    ans=max(ans,ls[i]-rs[-i-1])\nprint(ans)", "import heapq\n\nN=int(input())\nA=list(map(int,input().split()))\n\nR=sorted(A[:N])\nSUM1=[sum(A[:N])]\nfor i in range(N,2*N):\n    heapq.heappush(R,A[i])\n    tmp=heapq.heappop(R)\n    SUM1.append(SUM1[-1]+A[i]-tmp)\n\nB=list(map(lambda x:x*(-1),A[2*N:3*N]))\nB.sort()\nSUM2=[-sum(B)]\nfor i in range(2*N-1,N-1,-1):\n    heapq.heappush(B,-A[i])\n    tmp=heapq.heappop(B)\n    SUM2.append(SUM2[-1]+A[i]+tmp)\n\nans=-float(\"inf\")\nfor i in range(N+1):\n    ans=max(ans,SUM1[i]-SUM2[-(i+1)])\nprint(ans)", "from heapq import heapify, heapreplace\nn = int(input())\na = list(map(int, input().split()))\na1 = a[:n]\nheapify(a1)\na2 = a[n:2*n]\na3 = [-i for i in a[2*n:]]\nheapify(a3)\nb1 = [sum(a1)]\nb2 = [sum(a3)]\nfor i in range(n):\n    b1.append(a2[i]-heapreplace(a1, a2[i]))\n    b2.append(-heapreplace(a3, -a2[n-i-1])-a2[n-i-1])\nfor i in range(n):\n    b1[i+1] += b1[i]\n    b2[i+1] += b2[i]\naccu = []\nmx = b1[0]\nfor i in b1:\n    mx = max(mx, i)\n    accu.append(mx)\nans = -10**16\nmx = b2[0]\nfor i in range(n+1):\n    mx = max(mx, b2[i])\n    ans = max(ans, mx+accu[n-i])\nprint(ans)", "def main():\n    from heapq import heappush, heappushpop\n\n    n = int(input())\n    *a, = list(map(int, input().split()))  # [0,n),[n,2n),[2n,3n)\n\n    to_rm = [0] * (n * 3)\n\n    h = []\n    for x in a[:n]:\n        heappush(h, x)\n\n    mid = tuple(enumerate(a[n:n * 2], n))\n\n    t = 0\n    for i, x in mid:\n        mi = heappushpop(h, x)\n        t += mi\n        to_rm[i] = -t\n\n    h = []\n    for x in a[n * 2:n * 3]:\n        heappush(h, -x)\n\n    t = 0\n    for i, x in reversed(mid):\n        ma = -heappushpop(h, -x)\n        t += ma\n        to_rm[i - 1] += t\n\n    tot = sum(a)\n    ret = -10 ** 30\n    s = sum(a[:n - 1])\n    for tail in range(n - 1, n * 2):\n        s += a[tail]\n        ret = max(ret, s - (tot - s) + to_rm[tail])  # [0,tail]=\u524d\u534a\n    print(ret)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\n\nA = list(map(int,input().split()))\nimport heapq\nL = A[:N]\nheapq.heapify(L)\nsum_L = sum(A[:N])\nL_list = []\nL_list.append(sum_L)\nfor i in range(N):\n    sum_L += A[N+i]\n    heapq.heappush(L,A[N+i])\n    sum_L -= heapq.heappop(L)\n    L_list.append(sum_L)\n\nA = list([-x for x in A[::-1]])\nR = A[:N]\nheapq.heapify(R)\nsum_R = sum(A[:N])\nR_list = []\nR_list.append(sum_R)\n\n\nfor i in range(N):\n    sum_R += A[N+i]\n    heapq.heappush(R,A[N+i])\n    sum_R -= heapq.heappop(R)\n    R_list.append(sum_R)\nmaxi = -10000000000000000000000000000\nR_list = R_list[::-1]\nfor i in range(N+1):\n    maxi = max(maxi,L_list[i] + R_list[i])\n\nprint(maxi)\n", "from heapq import heapify, heappushpop\nimport sys\nsys.stdin.readline\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = [0] * (N+1)\n    C = [0] * (N+1)\n    H = [a for a in A[:N]]\n    heapify(H)\n    B[0] = sum(A[:N])\n    for i in range(N):\n        x = heappushpop(H, A[N+i])\n        B[i+1] = B[i] + A[N+i] - x\n    H = [-a for a in A[2*N:]]\n    heapify(H)\n    C[0] = sum(A[2*N:])\n    for i in range(N):\n        x = -heappushpop(H, -A[2*N-i-1])\n        C[i+1] = C[i] + A[2*N-i-1] - x\n    print(max(b-c for b,c in zip(B, C[::-1])))\n\ndef __starting_point():\n    main()\n__starting_point()", "import heapq\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = []\n    heapq.heapify(q)\n    frnt = [None]*3*n\n    back = [None]*3*n\n    heapq.heappush(q, a[0])\n    frnt[0] = a[0]\n    for i in range(1, 2*n+1):\n        frnt[i] = a[i]\n        frnt[i] += frnt[i-1]\n        heapq.heappush(q, a[i])\n        if n <= i:\n            frnt[i] -= heapq.heappop(q)\n    q = []\n    heapq.heapify(q)\n    heapq.heappush(q, -1*a[3*n-1])\n    back[3*n-1] = a[3*n-1]\n    for i in reversed(range(n-1, 3*n-1)):\n        back[i] = a[i]\n        back[i] += back[i+1]\n        heapq.heappush(q, -1*a[i])\n        if i < 2*n:\n            back[i] += heapq.heappop(q)\n    ans = -float(\"inf\")\n    for i in range(n-1, 2*n):\n        ans = max(ans, frnt[i] - back[i+1])\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nimport sys\nimport heapq\n\ndef minus(n):\n    return -n\n\ndef solve(N: int, a: \"List[int]\"):\n    ## N+i\u307e\u3067\u306e\u30ea\u30b9\u30c8\u306e\u5927\u304d\u3044\u9806\u306eN\u30b3\u306e\u308f  \n    left_sum = [0]*(N+1)\n    heap = a[:N]\n    left_sum[0] = sum(heap)\n    heapq.heapify(heap)\n    for i in range(N,2*N):\n        heapq.heappush(heap,a[i])\n        min_value = heapq.heappop(heap)\n        left_sum[i-(N-1)]=left_sum[i-N]+a[i]-min_value\n\n    b = list(map(minus,reversed(a)))\n    right_sum= [0]*(N+1)\n    r_heap = b[:N]\n    right_sum[0] = -sum(r_heap)\n    heapq.heapify(r_heap)\n    for i in range(N,2*N):\n        heapq.heappush(r_heap,b[i])\n        min_value = heapq.heappop(r_heap)\n        right_sum[i-(N-1)]=right_sum[i-N]+(-b[i])-(-min_value)\n    \n    answer = -10**15\n    for j in range(N+1):\n        answer = max(answer,left_sum[j]-right_sum[N-j])\n    print(answer)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    a = [int(next(tokens)) for _ in range(3 * N)]  # type: \"List[int]\"\n    solve(N, a)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import heapq\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n  n = int(input())\n  a = list(int(i) for i in input().split())\n  an = []\n  a2n = a[n:2*n]\n  a3n = []\n  \n  for i in range(n):\n    heapq.heappush(an,a[i])\n    heapq.heappush(a3n,-1*a[i+2*n])\n\n  tmpsuman = sum(an)\n  tmpsuma3n = -1*sum(a3n)\n  \n  suman = [tmpsuman]\n  suma3n = [tmpsuma3n]\n  \n  for i in range(n):\n    tmp = a2n[i]\n    tmpsuman += tmp\n    heapq.heappush(an,tmp)\n    tmpsuman -= heapq.heappop(an)\n    \n    suman.append(tmpsuman)\n\n    tmp = a2n[n-i-1]\n    tmpsuma3n += tmp\n    heapq.heappush(a3n,-1*tmp)\n    tmpsuma3n -= -1*heapq.heappop(a3n)\n    suma3n.append(tmpsuma3n)\n\n  ans = -1*float(\"INF\")\n  for i in range(n+1):\n    ans = max(ans,suman[i]-suma3n[n-i])\n  print(ans)\nsolve()", "import heapq\n\ndef score(init, cand):\n    \n    score = [0] * (n+1)\n    score[0] = sum(init)\n    hp = init\n    heapq.heapify(hp)\n    \n    for i,ai in enumerate(cand):\n    \n        if hp[0] < ai:\n            min_a = heapq.heappop(hp)\n            score[i+1] = score[i] + (ai - min_a)\n            heapq.heappush(hp, ai)\n        else:\n            score[i+1] = score[i]\n    \n    return score\n    \nn = int(input())\na = list(map(int,input().split()))\nminus_a = [-x for x in a[::-1]]\n\nformer_score = score(a[:n],a[n:2*n])\nlatter_score = score(minus_a[:n],minus_a[n:2*n])[::-1]\n\nans = max(x+y for x,y in zip(former_score,latter_score))\n\nprint(ans)", "import sys\nfrom heapq import *\ninput = sys.stdin.readline\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    af = a[:n]\n    ab = [-v for v in a[2*n:]]\n    af_sum = sum(af)\n    ab_sum = -sum(ab)\n\n    heapify(af)\n    heapify(ab)\n    judge = [0]*(n+1)\n    judge[0] += af_sum\n    judge[n] -= ab_sum\n    \n    for i in range(n):\n        if a[n+i] > af[0]:\n            af_sum -= heappop(af)\n            heappush(af, a[n+i])\n            af_sum += a[n+i]\n        judge[i+1] += af_sum\n        \n        if -a[2*n-1-i] > ab[0]:\n            ab_sum += heappop(ab)\n            heappush(ab, -a[2*n-1-i])\n            ab_sum += a[2*n-1-i]\n        judge[n-1-i] -= ab_sum\n    \n\n    ans = max(judge)\n    print(ans)\n\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom heapq import *\n\nn, *a = map(int, sys.stdin.read().split())\n\ndef optimize(arr):\n    res = arr[:n]\n    heapify(res)\n    sum_arr = [sum(res)]\n    for x in arr[n:]:\n        y = heappop(res)\n        heappush(res, max(x, y))\n        sum_arr.append(sum_arr[-1] + max(0, x - y))\n    return sum_arr\n\ndef main():\n    left = a[:n*2]\n    right = [-x for x in a[n:]][::-1]\n\n    sum_left = optimize(left)\n    sum_right = optimize(right)\n\n    res = []\n    for i in range(n+1):\n        res.append(sum_left[i] + sum_right[n-i])\n        \n    ans = max(res)\n    return ans\n\ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "import heapq\nN = int(input())\nA = list(map(int,input().split()))\nleft = [sum(A[:N])]\nh1 = A[:N]\nheapq.heapify(h1)\nfor i in range(N):\n    heapq.heappush(h1, A[N+i])\n    temp = heapq.heappop(h1)\n    left.append(left[-1] + A[N+i] - temp)\nright = [sum(A[2*N:])]\nh2 = list(map(lambda x: -x, A[2*N:]))\nheapq.heapify(h2)\nfor i in range(N):\n    heapq.heappush(h2, -A[2*N-1-i])\n    temp = -1 * heapq.heappop(h2)\n    right.append(right[-1] + A[2*N-1-i] - temp)\nans = float('-inf')\nfor i in range(N+1):\n    ans = max(ans, left[i] - right[-(i+1)])\nprint(ans)", "from heapq import *\nn = int(input())\na = list(map(int, input().split()))\n\nleft = a[:n]\nright = a[2*n:]\nheapify(left)\nl = [sum(left)]\nr = [sum(right)]\nsl = sum(left)\nsr = sum(right)\nfor i in range(n):\n    k = heappop(left)\n    sl -= k\n    heappush(left, max(k, a[n+i]))\n    sl += max(k, a[n+i])\n    l.append(sl)\n\nright = [-i for i in right]\nheapify(right)\nfor i in range(n):\n    k = -heappop(right)\n    sr -= k\n    mini = min(k, a[2*n-1-i])\n    heappush(right, -mini)\n    sr += mini\n    r.append(sr)\n\nr.reverse()\nans = -10**15\nfor i in range(n+1):\n    ans = max(l[i] - r[i], ans)\n\nprint(ans)\n", "from heapq import heappush, heappop\nn = int(input())\na = list(map(int, input().split()))\n\ns1 = [0] * 3*n\npq = []\ns = 0\nfor i in range(3*n):\n    if len(pq) < n:\n        s += a[i]\n        heappush(pq, a[i])\n        if len(pq) == n:\n            s1[i] = s\n    else:\n        s += a[i]\n        heappush(pq, a[i])\n        s -= heappop(pq)\n        s1[i] = s\n\n\ns2 = [0] * 3*n\npq = []\ns = 0\nfor i in reversed(list(range(3*n))):\n    if len(pq) < n:\n        s += a[i]\n        heappush(pq, -a[i])\n        if len(pq) == n:\n            s2[i] = s\n    else:\n        s += a[i]\n        heappush(pq, -a[i])\n        s -= -heappop(pq)\n        s2[i] = s\n\nans = - 10**15\nfor i in range(n-1, 2*n):\n    ans = max(ans, s1[i] - s2[i+1])\nprint(ans)\n", "import sys\nimport heapq\n\ndef main():\n\tN = int(input())\n\ta = list(map(int, input().split()))\n\n\tleft = a[0 : N]\n\tright = a[N*2 : N*3]\n\n\tfor i in range(N):\n\t\tright[i] *= -1\n\n\tleft_sum = 0\n\tright_sum = 0\n\n\theap_left = []\n\theap_right = []\n\n\tfor i in range(N):\n\t\tleft_sum += left[i]\n\t\theapq.heappush(heap_left, left[i])\n\t\tright_sum += right[i]\n\t\theapq.heappush(heap_right, right[i])\n\n\ttemp1 = [0] * (N + 1)\n\ttemp2 = [0] * (N + 1)\n\n\ttemp1[0] = left_sum\n\ttemp2[N] = right_sum\n\n\tfor i in range(0, N):\n\t\tleft_sum += a[N+i]\n\t\theapq.heappush(heap_left, a[N+i])\n\t\tleft_sum -= heapq.heappop(heap_left)\n\t\ttemp1[i+1] = left_sum\n\n\tfor i in range(0, N):\n\t\tright_sum -= a[N*2-1-i]\n\t\theapq.heappush(heap_right, -a[N*2-1-i])\n\t\tright_sum -= heapq.heappop(heap_right)\n\t\ttemp2[N - 1 - i] = right_sum\n\n\tans = -100000000000000000000000000000000000000000\n\tfor i in range(0, N + 1):\n\t\tx = temp1[i] + temp2[i]\n\t\tif(ans < x):\n\t\t\tans = x\n\tprint(ans)\nmain()", "import heapq\nn=int(input())\na=[int(i) for i in input().split()]\n \nheap_left=[]\nleft=0\nfor i in range(n):\n    left+=a[i]\n    heapq.heappush(heap_left,a[i])\n \nlst_left=[left]\nfor i in range(n,2*n):\n    tmp=heapq.heappushpop(heap_left,a[i])\n    left=left-tmp+a[i]\n    lst_left+=[left]\n \nheap_right=[]\nright=0\nfor i in range(2*n,3*n):\n    right+=a[i]\n    heapq.heappush(heap_right,-a[i])\n \nlst_right=[right]\nfor i in range(2*n-1,n-1,-1):\n    tmp=heapq.heappushpop(heap_right,-a[i])\n    right=right-(-tmp)+a[i]\n    lst_right+=[right]\n \n\nans=-10**100\nfor i in range(n+1):\n    ans=max(ans,lst_left[i]-lst_right[-(i+1)])\n \nprint (ans)", "n = int(input())\na = list(map(int, input().split()))\n\nimport heapq\n\nlefts = a[:n]\nlefts_sums = [sum(lefts)]\nheapq.heapify(lefts)\n\nfor x in range(n, 2 * n):\n    l = heapq.heappop(lefts)\n    if l < a[x]:\n        heapq.heappush(lefts, a[x])\n        lefts_sums.append(lefts_sums[-1] - l + a[x])\n    else:\n        heapq.heappush(lefts, l)\n        lefts_sums.append(lefts_sums[-1])\n\nrights = [-_a for _a in a[2 * n:]]\nrights_sums = [sum(rights)]\nheapq.heapify(rights)\n\nfor x in reversed(list(range(n, 2 * n))):\n    r = heapq.heappop(rights)\n    if r < -a[x]:\n        heapq.heappush(rights, -a[x])\n        rights_sums.append(rights_sums[-1] - r - a[x])\n    else:\n        heapq.heappush(rights, r)\n        rights_sums.append(rights_sums[-1])\n\nrights_sums = rights_sums[::-1]\nans = -float('inf')\nfor i in range(len(lefts_sums)):\n    ans = max(ans, lefts_sums[i] + rights_sums[i])\n# print(lefts_sums, rights_sums)\nprint(ans)\n", "import heapq\n\nN = int(input())\nA = list(map(int, input().split()))\nl, r = [], []\nll = 0\nfor i in range(3*N):\n    if i < N:\n        heapq.heappush(l, (A[i], i))\n        ll += A[i]\n    else:\n        heapq.heappush(r, (A[i], i))\nused = set()\nrr = 0\nfor i in range(N):\n    a, idx = heapq.heappop(r)\n    used.add(idx)\n    rr += a\nans = ll-rr\ndone = set()\nfor i in range(N,2*N):\n    done.add(i)\n    if A[i] > l[0][0]:\n        ll -= l[0][0]\n        heapq.heappop(l)\n        heapq.heappush(l, (A[i], i))\n        ll += A[i]\n    if i in used:\n        rr -= A[i]\n        a, idx = heapq.heappop(r)\n        while idx in done:\n            a, idx = heapq.heappop(r)\n        used.add(idx)\n        rr += a\n    #print(i, ll, rr, l, r)\n    ans = max(ans, ll-rr)\nprint(ans)\n", "from heapq import heapreplace, heapify\n\n\nN = int(input())\nA = list(map(int, input().split()))\n\ndp = [0] * (N + 1)\nq = A[:N]\nheapify(q)\ndp[0] = sum(q)\nfor i in range(N, 2 * N):\n    a = A[i]\n    if a > q[0]:\n        dp[i - N + 1] += a - heapreplace(q, a)\n    dp[i - N + 1] += dp[i - N]\n\n\ndp2 = [0] * (N + 1)\nq = [-A[i] for i in range(2 * N, 3 * N)]\nheapify(q)\ndp2[N] = -sum(q)\nfor i in range(2 * N - 1, N - 1, -1):\n    a = A[i]\n    if a < -q[0]:\n        dp2[i - N] += a - (-heapreplace(q, -a))\n    dp2[i - N] += dp2[i - N + 1]\n\nans = -float('inf')\nfor i in range(N + 1):\n    ans = max(ans, dp[i] - dp2[i])\nprint(ans)\n", "import heapq\nn=int(input())\nl=list(map(int,input().split()))\nq=[]\nfor i in range(n):\n    heapq.heappush(q,l[i])\na1=[0]*(n+1)\na1[0]=sum(l[:n])\nfor i in range(n):\n    p=heapq.heappop(q)\n    a1[i+1]=a1[i]-p+max(p,l[i+n])\n    heapq.heappush(q,max(p,l[i+n]))\n#print(a1)\nq=[]\nl.reverse()\nfor i in range(n):\n    heapq.heappush(q,-l[i])\na1.reverse()\na1[0]-=sum(l[:n])\nz=sum(l[:n])\nfor i in range(n):\n    p=heapq.heappop(q)\n    z=z+p+min(-p,l[i+n])\n    a1[i+1]-=z\n    heapq.heappush(q,max(p,-l[i+n]))\nprint((max(a1)))\n", "from heapq import heappop, heappush\nn=int(input())\na=list(map(int,input().split()))\nl=[0]*(n+1)\nr=[0]*(n+1)\ns=sum(a[:n])\nt=sum(a[-n:])\nl[0]=s\nr[~0]=t\nh=[]\nH=[]\nfor i in range(n):\n    heappush(h,a[i])\n    heappush(H,-a[~i])\nfor i in range(n):\n    s+=a[n+i]\n    t+=a[~(n+i)]\n    heappush(h,a[n+i])\n    heappush(H,-a[~(n+i)])\n    s-=heappop(h)\n    t+=heappop(H)\n    l[i+1]=s\n    r[~(i+1)]=t\nprint(max(l[i]-r[i] for i in range(n+1)))", "import heapq\n\nN = int(input())\n\nA = list(map(int, input().split()))\n\nleft = A[:N]\nleft_total = [(sum(left))]\nheapq.heapify(left)\n\nfor i in range(N, 2*N):\n    l = heapq.heappop(left)\n    # \u5165\u308c\u66ff\u3048\u308b\u5834\u5408\n    if l < A[i]:\n        heapq.heappush(left,A[i])\n        left_total.append(left_total[-1] - l + A[i])\n    # A\u306e\u3042\u308b\u8981\u7d20\u3088\u308aleft\u306e\u6700\u5c0f\u8981\u7d20\u306e\u65b9\u304c\u5927\u304d\u3044\u306e\u3067\u5165\u308c\u66ff\u3048\u306a\u3044\n    else:\n        heapq.heappush(left,l)\n        left_total.append(left_total[-1])\n        \n\n#right\u3082N\u8981\u7d20\u304b\u3089\u59cb\u3081\u308b\u304c\u3001left\u3068\u306e\u5bfe\u5fdc\u306e\u305f\u3081\u306b\u6700\u5f8c\u306btotal\u3092\u3072\u3063\u304f\u308a\u8fd4\u3059\u306e\u3092\u5fd8\u308c\u306a\u3044\nright = [-i for i in A[2 * N:]]\nright_total = [sum(right)]\nheapq.heapify(right)\n\nfor i in reversed(range(N, 2*N)):\n    r = heapq.heappop(right)\n    if r < -A[i]:\n        heapq.heappush(right, -A[i])\n        right_total.append(right_total[-1] - r - A[i])\n    # r\u306e\u6700\u5c0f\u5024\u306e\u65b9\u304c\u3061\u3044\u3055\u3044\u306e\u3067\u305d\u306e\u307e\u307e\n    else:\n        heapq.heappush(right, r)\n        right_total.append(right_total[-1])\n\n\n# left_total\u3068\u306e\u5bfe\u5fdc\u306e\u305f\u3081\u306b\u9006\u306b\u3059\u308b\nright_total = right_total[::-1]\n\nans = -float(\"inf\")\nfor i in range(len(left_total)):\n    ans = max(ans, left_total[i] + right_total[i])\n\nprint(ans)", "import heapq\n\ndef main():\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    left = [0] * (3 * N)\n    right = [0] * (3 * N)\n\n    tmp = 0\n    q = []\n    for i in range(N):\n        heapq.heappush(q, a[i])\n        tmp += a[i]\n    left[N-1] = tmp\n    for i in range(N, 2*N):\n        heapq.heappush(q, a[i])\n        left[i] = left[i-1] + a[i] - heapq.heappop(q)\n    \n    tmp = 0\n    q = []\n    for i in range(N*3-1, N*2-1, -1):\n        heapq.heappush(q, -a[i])\n        tmp += a[i]\n    right[2*N] = tmp\n    for i in range(2*N-1, N-1, -1):\n        heapq.heappush(q, -a[i])\n        right[i] = right[i+1] + a[i] + heapq.heappop(q)\n    \n    ans = left[N-1] - right[N]\n    for i in range(N, 2*N):\n        ans = max(ans, left[i]-right[i+1])\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "N=int(input())\nA=list(map(int,input().split()))\nimport heapq\n\nX=A[:N]\nY=[-i for i in A[2*N:]]\nheapq.heapify(X)\nheapq.heapify(Y)\nx=sum(X)\ny=-sum(Y)\nXMA=[0]*(N+1)\nYMI=[0]*(N+1)\nXMA[0]=x\nYMI[N]=y\nfor i in range(N):\n  heapq.heappush(X,A[N+i])\n  s=heapq.heappop(X)\n  x+=A[N+i]-s\n  XMA[i+1]=x\n  \n  heapq.heappush(Y,-A[2*N-1-i])\n  t=-heapq.heappop(Y)\n  y+=A[2*N-1-i]-t\n  YMI[N-i-1]=y\n  \nANS=[0]*(N+1)\nfor i in range(N+1):\n  ANS[i]=XMA[i]-YMI[i]\nprint(max(ANS))", "n=int(input())\na=list(map(int,input().split()))\nleft=[0]*(2*n+1)\nright=[0]*(2*n+1)\nnow_a=a[:n]\nleft[n]=sum(now_a)\nnow_a.sort()\nfrom heapq import heapify,heappop,heappush\nheapify(now_a)\nfor i in range(n,2*n):\n  if a[i]>now_a[0]:\n    left[i+1]=left[i]+a[i]-now_a[0]\n    heappop(now_a)\n    heappush(now_a,a[i])\n  else:\n    left[i+1]=left[i]\nb=[-x for x in a]\nnow_b=b[-n:]\nright[n]=sum(now_b)\nnow_b.sort()\nheapify(now_b)\nfor i in range(n,2*n):\n  if b[-i-1]>now_b[0]:\n    right[i+1]=right[i]+b[-i-1]-now_b[0]\n    heappop(now_b)\n    heappush(now_b,b[-i-1])\n  else:\n    right[i+1]=right[i]\nans=-pow(10,14)\nfor i in range(n+1):\n  ans=max(ans,left[n+i]+right[2*n-i])\nprint(ans)\n", "import heapq as hq\nn = int(input())\na = list(map(int,input().split()))\nx = sum(a[:n])\ny = sum(a[2*n:])\nfsum = [x]\nlsum = [y]\nhqx = a[:n]\nhqy = [-a[2*n+i] for i in range(n)]\nhq.heapify(hqx)\nhq.heapify(hqy)\nfor i in range(n):\n    hq.heappush(hqx,a[n+i])\n    hq.heappush(hqy,-a[2*n-i-1])\n    xmin = hq.heappop(hqx)\n    ymax = -hq.heappop(hqy)\n    fsum.append(fsum[-1]+a[n+i]-xmin)\n    lsum.append(lsum[-1]+a[2*n-i-1]-ymax)\nans = -10**18\nfor i in range(n+1):\n    ans = max(ans,fsum[i]-lsum[-i-1])\nprint(ans)", "# -*- coding: utf-8 -*-\n\nimport sys\nfrom heapq import heapify, heappush, heappop\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN = INT()\nA = LIST()\n\nA1 = A[:N]\nA2 = A[N:]\nsm1 = sum(A1)\nsm2 = sum(A2)\nque1 = []\nque2 = []\nS = set()\nfor i, a in enumerate(A1):\n    que1.append((a, i))\nheapify(que1)\nA2 = [(a, i) for i, a in enumerate(A2, N)]\nA2.sort(reverse=1)\nfor a, i in A2[:N]:\n    sm2 -= a\n    S.add(i)\n    que2.append((a, i))\nheapify(que2)\n\nans = sm1 - sm2\nfor i in range(N, N*2):\n    # \u524d\u534a\n    heappush(que1, (A[i], i))\n    sm1 += A[i]\n    a, _ = heappop(que1)\n    sm1 -= a\n    # \u5f8c\u534a\n    if i not in S:\n        sm2 -= A[i]\n        while 1:\n            a, j = heappop(que2)\n            S.remove(j)\n            if j > i:\n                sm2 += a\n                break\n    ans = max(ans, sm1 - sm2)\nprint(ans)\n", "n=int(input())\na=list(map(int,input().split()))\nl=[0]*3*n\nr=[-1000000000000000]*3*n\nfrom heapq import heappop,heappush\nh=[]\ns=0\nfor i in a[:n]:\n  heappush(h,i)\n  s+=i\nl[n-1]=s\nfor i in range(n,2*n):\n  heappush(h,a[i])\n  s+=a[i]\n  s-=heappop(h)\n  l[i]=s\nh=[]\ns=0\nfor i in a[2*n:]:\n  heappush(h,-i)\n  s+=-i\nfor i in range(2*n-1,n-2,-1):\n  r[i]=s\n  heappush(h,-a[i])\n  s+=-a[i]\n  s-=heappop(h)\nprint(max(l[i]+r[i]for i in range(3*n)))", "# 3 N numbers\nimport heapq\nN = int(input())\na = list(map(int, input().split()))\nS = sum(a[:N])\nb = a[:N]\nheapq.heapify(b)\ndpmax = [S for i in range(N+1)]\n# dpmax[x] = \u524d\u534a\u3000\uff58 + N \u3053\u306e\u3046\u3061max N\u3000\u3053\u306e\u308f\u3092\u8a18\u9332\nfor i in range(N, 2*N):\n    heapq.heappush(b, a[i])\n    d = heapq.heappop(b)\n    S += a[i]-d\n    dpmax[i-N+1] = S\n\nc = a[-N:]\nfor i in range(N):\n    c[i] = -c[i]\nT = sum(c)\nheapq.heapify(c)\ndpmin = [-T for i in range(N+1)]\n\n# dpmin[x]= \u5f8c\u534a\u3000x + N \u3053\u306e\u3046\u3061\u3000min N\u3053\u306e\u308f\u3092\u8a18\u9332\u3059\u308b\nfor i in range(N, 2*N):\n    heapq.heappush(c, -a[-1-i])\n    d = heapq.heappop(c)\n    T += -a[-1-i]-d\n    dpmin[i+1-N] = -T\n\nans = -1000000000000000000000000000000\nfor i in range(N+1):\n    ans = max(ans, dpmax[i]-dpmin[N-i])\nprint(ans)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\nfrom collections import deque\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nDR = [1, -1, 0, 0]\nDC = [0, 0, 1, -1]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n     \ndef main():\n    N = I()\n    A = LI()\n    wakeme = N\n    Aleftsum = [0 for _ in range(3*N+1)]\n    leftA = [x for x in A[:N]]\n    heapq.heapify(leftA)\n    subsum = sum(leftA)\n    Aleftsum[wakeme] = subsum\n    for i in range(N):\n        heapq.heappush(leftA, A[wakeme + i])\n        subsum += A[wakeme + i]\n        subsum -= heapq.heappop(leftA)\n        Aleftsum[wakeme+i+1] = subsum\n\n    Arightsum = [0 for _ in range(3*N+1)]\n    rightA = [-x for x in A[-N:]]\n    heapq.heapify(rightA)\n    subsum = sum(rightA)\n    wakeme = 2*N\n    Arightsum[wakeme] = -subsum\n    for i in range(1, N+1):\n        heapq.heappush(rightA, -A[wakeme-i])\n        subsum -= A[wakeme - i]\n        subsum -= heapq.heappop(rightA)\n        Arightsum[wakeme - i] = -subsum\n    ans = -inf\n    for i in range(N, 2*N+1):\n        ans = max(ans, Aleftsum[i] - Arightsum[i])\n    print(ans)\nmain()\n\n", "import copy\nimport heapq\nfrom collections import deque\nn=int(input())\nleft=[]\nmiddle=deque([])\nright=[]\nA=list(map(int,input().split()))\nfor i in range(n):\n  heapq.heappush(left,A[i])\nc=sum(left)\nfor i in range(n):\n  middle.append(A[n+i])\nfor i in range(n):\n  heapq.heappush(right,A[2*n+i]*-1)\nd=sum(right)\nl=deque([0])\nm=copy.copy(middle)\nfor i in range(n):\n  a=left[0]\n  b=m[0]\n  l.append(l[-1]+max(0,b-a))\n  if b-a>0:\n    heapq.heapreplace(left,b)\n  m.popleft()\nm=copy.copy(middle)\nr=deque([0])\nfor i in range(n):\n  a=right[0]*-1\n  b=m[-1]\n  r.append(r[-1]+max(0,a-b))\n  if a-b>0:\n    heapq.heapreplace(right,b*-1)\n  m.pop()\nans=0\nfor i in range(n+1):\n  a=l[0]+r[-1]\n  if a>ans:\n    ans=a\n  l.popleft()\n  r.pop()\nprint(c+d+ans)", "# \u89e3\u8aac\u3092\u78ba\u8a8d\u3001\u3053\u306e\u3088\u3046\u306a\u3001\u6700\u5927\uff08\u6700\u5c0f\u5024\uff09\u306e\u51fa\u3057\u5165\u308c\u304c\u983b\u7e41\u306b\u3042\u308b\u30c7\u30fc\u30bf\u3067\u306f\u3001\n# \u300c\u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc\u300d\u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u7528\u3044\u308b\u3068\u5bb9\u6613\u306b\u306a\u308b\u3088\u3046\u3060\u3002\n# \u65b0\u898f\u8981\u7d20\u306e Push & Pop \u304c O(N log N) \u3067\u3067\u304d\u308b\u3068\u306e\u3053\u3068\u3002\n\nfrom heapq import heapify,heappush,heappop\n\nn=int(input())\na=list(map(int,input().split()))\n\na1=a[0:n]\na_m=a[n:2*n]\na2=[ -x for x in a[2*n:3*n] ] # nega_list\n\na1_sums=[sum(a1)]\na2_sums=[sum(a2)]\nheapify(a1)\nheapify(a2)\n\n# \u5de6\u306e\u30b7\u30de\u306b\u771f\u3093\u4e2d\u306e\u30b7\u30de\u3092\u5f90\u3005\u306b\u8ffd\u52a0\u3057\u3001\u90fd\u5ea6\u6700\u5c0f\u5024\u3092\u53d6\u308a\u51fa\u3059\nfor aa in a_m:\n  heappush(a1,aa)\n  p=heappop(a1)\n  a1_sums.append(a1_sums[-1]+aa-p)\n\n# \u53f3\u306e\u30b7\u30de\u306f\u90fd\u5ea6\u6700\u5927\u5024\u3092\u53d6\u308a\u51fa\u3059\na_m.reverse()\nfor aa in a_m:\n  heappush(a2,-aa)\n  p=heappop(a2)\n  a2_sums.append(a2_sums[-1]-aa-p)\n\nmax_val=-float(\"inf\")\nfor i in range(0,n+1):\n  max_val=max(max_val,a1_sums[i]+a2_sums[n-i])\n\nprint(max_val)\n", "n = int(input())\na = list(map(int, input().split()))\nb = a[n:2*n]\n\nimport heapq\n\nq = a[:n]\nheapq.heapify(q)\n\nres = [0]*(n+1)\nres[0] = sum(q)\nfor i, x in enumerate(b):\n    heapq.heappush(q, x)\n    y = heapq.heappop(q)\n    res[i+1] = res[i]+x-y\n\nb.reverse()\nq = [-x for x in a[2*n:]]\nheapq.heapify(q)\ns = -sum(q)\nres[-1] -= s\n\nfor i, x in enumerate(b):\n    heapq.heappush(q, -x)\n    y = heapq.heappop(q)\n    s += x+y\n    res[-2-i] -= s\n\nprint((max(res)))\n", "import heapq\n\nn=int(input())\na1=[]\nb1=[]\na2=[]\nb2=[]\ns=input().split()\nfor i in range(3*n):\n    if i<n:\n        a1.append(int(s[i]))\n    elif i>=2*n:\n        b1.append(-int(s[i]))\n    else:\n        a2.append(int(s[i]))\n        b2.append(-int(s[3*n-i-1]))\nsuma=[sum(a1)]\nsumb=[sum(b1)]\nheapq.heapify(a1)\nheapq.heapify(b1)\n\nfor i in range(0,n):\n    heapq.heappush(a1,a2[i])\n    k=heapq.heappop(a1)\n    l=suma[-1]\n    suma.append(l+a2[i]-k)\nfor i in range(0,n):\n    heapq.heappush(b1,b2[i])\n    k=heapq.heappop(b1)\n    l=sumb[-1]\n    sumb.append(l+b2[i]-k)\n\nma=-1000000000000000\nfor i in range(n+1):\n    ma=max(ma,suma[i]+sumb[-i-1])\nprint(ma)\n", "n=int(input())\na=list(map(int,input().split()))\nimport heapq as hq\nf1=[0]*(3*n)\nf1[n-1]=sum(a[:n])\nh=a[:n]\nhq.heapify(h)\nsu=f1[n-1]\nfor i in range(n,2*n):\n    cur=a[i]\n    x=hq.heappop(h)\n    if cur>x:\n        su-=x\n        su+=cur\n        hq.heappush(h,cur)\n    else:\n        hq.heappush(h,x)\n    f1[i]=su\nf2=[0]*(3*n)\nf2[2*n]=sum(a[2*n:])\nsu=f2[2*n]\nh2=[]\nfor i in a[2*n:]:\n    h2.append(-i)\nhq.heapify(h2)\nfor i in range(2*n-1,n-1,-1):\n    cur=a[i]\n    x=-1*hq.heappop(h2)\n    if cur<x:\n        su-=x\n        su+=cur\n        hq.heappush(h2,-cur)\n    else:\n        hq.heappush(h2,-x)\n    f2[i]=su\nans=-float('inf')\nfor i in range(n-1,2*n):\n    ans=max(ans,f1[i]-f2[i+1])\nprint(ans)\n\n\n\n", "from heapq import heappush, heapreplace\n\n\nN = int(input())\nA = list(map(int, input().split()))\n\ndp = [0] * (N + 1)\nq = []\ncnt = 0\nfor i in range(N):\n    a = A[i]\n    heappush(q, a)\n    cnt += a\ndp[0] = cnt\nfor i in range(N, 2 * N):\n    a = A[i]\n    if a > q[0]:\n        cnt += a - heapreplace(q, a)\n    dp[i - N + 1] = cnt\n\n\ndp2 = [0] * (N + 1)\nq = []\ncnt = 0\nfor i in range(2 * N, 3 * N):\n    a = A[i]\n    heappush(q, -a)\n    cnt += a\ndp2[N] = cnt\nfor i in range(2 * N - 1, N - 1, -1):\n    a = A[i]\n    if a < -q[0]:\n        cnt += a - (-heapreplace(q, -a))\n    dp2[i - N] = cnt\n\nans = -float('inf')\nfor i in range(N + 1):\n    ans = max(ans, dp[i] - dp2[i])\nprint(ans)\n", "import heapq\nn = int(input())\na = list(map(int, input().split()))\n\nh = a[:n]\nheapq.heapify(h)\nfirst = [0] * (n+1)\ns = sum(a[:n])\nfirst[0] = s\nfor i in range(n):\n    s += a[n+i]\n    heapq.heappush(h, a[n+i])\n    s -= heapq.heappop(h)\n    first[i+1] = s\n\nh = list(map(lambda x: -x, a[2*n:]))\nheapq.heapify(h)\nsecond = [0] * (n+1)\ns = - sum(a[2*n:])\nsecond[0] = s\nfor i in range(n):\n    s -= a[2*n - i - 1]\n    heapq.heappush(h, -a[2*n - i - 1])\n    s -= heapq.heappop(h)\n    second[i+1] = s\n\nans = - 10 ** 18\nfor i in range(n+1):\n    ans = max(ans, first[i] + second[n-i])\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\n\nimport heapq\n\nlefts = a[:n]\nlefts_sums = [sum(lefts)]\nheapq.heapify(lefts)\n\nfor x in range(n, 2 * n):\n    l = heapq.heappop(lefts)\n    if l < a[x]:\n        heapq.heappush(lefts, a[x])\n        lefts_sums.append(lefts_sums[-1] - l + a[x])\n    else:\n        heapq.heappush(lefts, l)\n        lefts_sums.append(lefts_sums[-1])\n\nrights = [-_a for _a in a[2 * n:]]\nrights_sums = [sum(rights)]\nheapq.heapify(rights)\n\nfor x in reversed(list(range(n, 2 * n))):\n    r = heapq.heappop(rights)\n    if r < -a[x]:\n        heapq.heappush(rights, -a[x])\n        rights_sums.append(rights_sums[-1] - r - a[x])\n    else:\n        heapq.heappush(rights, r)\n        rights_sums.append(rights_sums[-1])\n\nrights_sums = rights_sums[::-1]\nans = -float('inf')\nfor i in range(len(lefts_sums)):\n    ans = max(ans, lefts_sums[i] + rights_sums[i])\n# print(lefts_sums, rights_sums)\nprint(ans)\n", "import heapq\n\n# d = [8, 2, 2, 7, 4, 6, 5, 3, 8]\n\nN = int(input())\nd = list(map(int, input().split()))\nd_rev = d[::-1]\n\nd1 = d[:N]\nheapq.heapify(d1)\nd2 = [-i for i in d_rev[:N]]\nheapq.heapify(d2)\nsum_d1 = sum(d1)\nsum_d2 = sum(d2)\n\nsum_d1_arr = [sum_d1]\nsum_d2_arr = [sum_d2]\n\nfor k in range(N, 2 * N):\n    c = sum_d1_arr[-1]\n    c += d[k]\n    n = heapq.heappushpop(d1, d[k])\n    c -= n\n    sum_d1_arr.append(c)\n\n    e = sum_d2_arr[-1]\n    e += -d_rev[k]\n    n = heapq.heappushpop(d2, -1 * d_rev[k])\n    e -= n\n    sum_d2_arr.append(e)\n\nprint(max(v+w for v, w in zip(sum_d1_arr, sum_d2_arr[::-1])))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\nfrom collections import deque\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nDR = [1, -1, 0, 0]\nDC = [0, 0, 1, -1]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n     \ndef main():\n    N = I()\n    A = LI()\n    wakeme = N\n    Aleftsum = [0 for _ in range(3*N+1)]\n    Arightsum = [0 for _ in range(3*N+1)]\n\n    leftA = [x for x in A[:N]]\n    rightA = [-x for x in A[-N:]]\n\n    heapq.heapify(leftA)\n    heapq.heapify(rightA)\n\n    lsum = sum(leftA)\n    rsum = sum(rightA)\n\n    Aleftsum[wakeme] = lsum\n    Arightsum[2*N] = -rsum\n\n    # [0, N)\u304b\u3089[0, 2N)\u307e\u3067\u306e\u548c\u304c\u6b32\u3057\u3044\n    # Aleftsum(i): [0, i)\u307e\u3067\u306e\u4e0a\u4f4dN\u500b\u306e\u548c\n\n    # [2N, 3N)\u304b\u3089[N, 3N)\u307e\u3067\u306e\u548c\u304c\u6b32\u3057\u3044\n    # Arightsum(i): [i, 3N)\u307e\u3067\u306e\u4e0a\u4f4dN\u500b\u306e\u548c\n\n    for i in range(N):\n        # [0, N+1)\u304b\u3089[0, 2N)\u307e\u3067\u3084\u308b\u3002\n        # [0, wakeme + i + 1)\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b\u3002\n        # wakeme=N\u306a\u306e\u3067\u3001wakeme + i + 1 = 2N -> i = N - 1\n        newl = A[wakeme + i]\n        lsum += newl\n        lsum -= heapq.heappushpop(leftA, newl)\n        Aleftsum[wakeme+i+1] = lsum\n\n        # [2N-1, 3N)\u304b\u3089[N, 3N)\u307e\u3067\u3084\u308b\u3002\n        # r_wakeme = 2N-1\u3068\u3057\u3066\u3001\n        # r_wakeme - i = 2N - 1 -> i=0\n        # r_wakeme - i = N -> i=N-1\n        newr = A[2*N-1 - i]\n        rsum -= newr\n        rsum -= heapq.heappushpop(rightA, -newr)\n        Arightsum[2*N-1 - i] = -rsum\n\n    ans = -inf\n    for i in range(N, 2*N+1):\n        ans = max(ans, Aleftsum[i] - Arightsum[i])\n\n    print(ans)\nmain()\n\n", "from heapq import heappush, heappop\nn = int(input())\na = list(map(int, input().split()))\nmax_sum_fh = [0] * (n + 1)\nmin_sum_lh = [0] * (n + 1)\n \nhq_fh = []\nhq_lh = []\n \nfor i in range(n):\n    heappush(hq_fh, a[i])\n    heappush(hq_lh, -a[-1 - i])\n\nmax_sum_fh[0] = sum(hq_fh)\nmin_sum_lh[n] = -sum(hq_lh)\n\nfor i in range(n):\n    if a[i + n] > hq_fh[0]:\n        value_in = a[i + n]\n        value_out = heappop(hq_fh)\n        heappush(hq_fh, value_in)\n        max_sum_fh[i + 1] = max_sum_fh[i] - value_out + value_in\n    else:\n        max_sum_fh[i + 1] = max_sum_fh[i]\n    if -a[-1 - i - n] > hq_lh[0]:\n        value_in = -a[-1 - i - n]\n        value_out = heappop(hq_lh)\n        heappush(hq_lh, value_in)\n        min_sum_lh[-2 - i] = min_sum_lh[-1 - i] + value_out - value_in\n    else:\n        min_sum_lh[-2 - i] = min_sum_lh[-1 - i]\n    \nprint((max([max_sum_fh[i] - min_sum_lh[i] for i in range(n + 1)])))\n", "import heapq\n\n\ndef solve(n):\n  a = list(map(int,input().split()))\n  # \u5de6\u534a\u5206\u3092\u8a08\u7b97\u3057\u3066\u53f3\u7aef[n+idx]\u3067\u30e1\u30e2\n  # \u5de6\u534a\u5206\u306f\u6700\u5927\u5316\u3057\u305f\u3044\u306e\u3067\u6700\u5c0f\u5024\u304c\u521d\u3081\u306b\u51fa\u3066\u304f\u308b\u3088\u3046\u306b\u3059\u308b\n  leftHsum = [0 for i in range(n+1)]\n  leftH = a[0:n]\n  heapq.heapify(leftH)\n  leftHsum[0] = sum(leftH) # \n  for i in range(n):\n    if leftH[0] < a[n+i]:\n      leftHsum[i+1] = leftHsum[i] - leftH[0] + a[n+i]\n      heapq.heappop(leftH)\n      heapq.heappush(leftH, a[n+i])\n    else:\n      leftHsum[i+1] = leftHsum[i]\n  # \u53f3\u534a\u5206\u306f\u8ca0\u306e\u5024\u3067\u4fdd\u6301\u3059\u308b\n  # \u3082\u3063\u3068\u3082\u5927\u304d\u3044\u5024\u304b\u3089\u8ffd\u3044\u51fa\u3057\u3066\u3044\u304f\n  rightHsum = [0 for i in range(n+1)]\n  rightH = list([-x for x in a[2*n:3*n]])\n  heapq.heapify(rightH)\n  rightHsum[0] = - sum(rightH)\n  for i in range(n):\n    if rightH[0] < -a[2*n-i-1]:\n      rightHsum[i+1] = rightHsum[i] + rightH[0] + a[2*n-i-1]\n      heapq.heappop(rightH)\n      heapq.heappush(rightH, -a[2*n-i-1])\n    else:\n      rightHsum[i+1] = rightHsum[i]\n  result = -1000000000000000000\n  #print(leftHsum)\n  #print(rightHsum)\n  for i in range(n+1):\n    result = max(result, leftHsum[0+i]-rightHsum[n-i])\n  return result\n\n\n\n\n\nn = int(input())\nprint((solve(n)))\n", "#!/usr/bin/env python3\nimport sys\nINF = float(\"inf\")\nfrom collections import deque\n\nimport heapq\n\n\nclass MaxHeap(object):\n    def __init__(self, x):\n        self.heap = [-e for e in x]\n        heapq.heapify(self.heap)\n\n    def push(self, value):\n        heapq.heappush(self.heap, -value)\n\n    def pop(self):\n        return -heapq.heappop(self.heap)\n\n\nclass MinHeap(object):\n    def __init__(self, x):\n        self.heap = [e for e in x]\n        heapq.heapify(self.heap)\n\n    def push(self, value):\n        heapq.heappush(self.heap, value)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n\ndef solve(N: int, a: \"List[int]\"):\n\n    mae = MinHeap(a[:N])\n    mae_tot = [sum(a[:N])]\n    for curr in range(N, 2*N):\n        mae.push(a[curr])\n        mmin = mae.pop()\n        mae_tot.append(mae_tot[-1]+a[curr]-mmin)\n\n    ushiro = MaxHeap(a[2*N:])\n    ushiro_tot = [sum(a[2*N:])]\n    for curr in range(2*N-1, N-1, -1):\n        ushiro.push(a[curr])\n        umax = ushiro.pop()\n        ushiro_tot.append(ushiro_tot[-1]+a[curr]-umax)\n\n    m = -INF\n    for mt, ut in zip(mae_tot, reversed(ushiro_tot)):\n        m = max(m, mt-ut)\n    print(m)\n\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    a = [int(next(tokens)) for _ in range(3*N)]  # type: \"List[int]\"\n    solve(N, a)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]