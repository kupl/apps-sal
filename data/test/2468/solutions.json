["class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        memo ={}\n        n =len(s)\n        def dp(i):\n            if i<=0:\n                return 0\n            if i in memo:\n                return memo[i]\n            if (s[i-1],s[i])==('(',')'):\n                memo[i]=dp(i-2)+2\n            elif (s[i-1],s[i])==(')',')') and i-dp(i-1)-1>=0 and s[i-dp(i-1)-1]=='(':\n                memo[i]=dp(i-1)+2+dp(i-dp(i-1)-2)\n            else:\n                memo[i]=0\n            return memo[i]\n        ret = 0\n        for i in range(n-1,0,-1):\n            ret = max(ret, dp(i))\n        return ret\n            \n            \n            \n            \n        \n        \n        \n            \n            \n                \n        \n", "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        left = 0\n        right = 0\n        res = 0\n        \n        for c in s:\n            if c =='(':\n                left +=1\n            if c == ')':\n                right += 1\n            if left == right:\n                res = max(res, left+right)\n            if right > left:\n                left = 0\n                right = 0\n        \n        left = 0\n        right = 0\n        for i in range(len(s)-1,-1, -1):\n            c = s[i]\n            if c =='(':\n                left +=1\n            if c == ')':\n                right += 1\n            if left == right:\n                res = max(res, left+right)\n            if left > right:\n                left = 0\n                right = 0\n        \n        return res"]