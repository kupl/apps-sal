["class BIT():\n    def __init__(self,n):\n        self.BIT=[0]*(n+1)\n        self.num=n\n\n    def query(self,idx):\n        res_sum = 0\n        while idx > 0:\n            res_sum += self.BIT[idx]\n            idx -= idx&(-idx)\n        return res_sum\n\n    #Ai += x O(logN)\n    def update(self,idx,x):\n        while idx <= self.num:\n            self.BIT[idx] += x\n            idx += idx&(-idx)\n        return\n\nn,q=map(int,input().split())\na=list(map(int,input().split()))\nbit=BIT(2**n)\nfor i in range(2**n):\n    bit.update(i+1,a[i])\nb=0\n\ndef Sum(r,xor):\n    id=xor\n    res=0\n    if r==-1:\n        return res\n    for i in range(n,-1,-1):\n        if r>>i &1:\n            L=(id>>i)<<i\n            R=L+(1<<i)-1\n            res+=bit.query(R+1)-bit.query(L)\n            id^=(1<<i)\n    return res\n\n\nfor _ in range(q):\n    query=tuple(map(int,input().split()))\n    if query[0]==1:\n        g,x,k=query\n        x-=1\n        x^=b\n        bit.update(x+1,k-a[x])\n        a[x]=k\n    elif query[0]==2:\n        k=query[1]\n        b^=2**k-1\n    elif query[0]==3:\n        k=query[1]\n        if k!=n:\n            b^=2**k\n    else:\n        gl,l,r=query\n        l-=1\n        test=Sum(r,b)-Sum(l,b)\n        print(test)"]