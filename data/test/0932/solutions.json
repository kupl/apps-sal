["import sys\n\nm, n = map(int, input().split())\na = []\nfor _ in range(m):\n\ta.append(list(map(int, input().split())))\nb = [[1]*n for _ in range(m)]\nfor i in range(m):\n\tfor j in range(n):\n\t\tif(a[i][j] == 0):\n\t\t\tb[i] = [0]*n\n\t\t\tfor k in range(m):\n\t\t\t\tb[k][j] = 0\nfor i in range(m):\n\tfor j in range(n):\n\t\tif(a[i][j] == 1):\n\t\t\tgood = False\n\t\t\tif(1 in b[i]):\n\t\t\t\tgood = True\n\t\t\telse:\n\t\t\t\tfor k in range(m):\n\t\t\t\t\tif(b[k][j] == 1):\n\t\t\t\t\t\tgood = True\n\t\t\tif not good:\n\t\t\t\tprint('NO')\n\t\t\t\treturn\nprint(\"YES\")\nfor i in b:\n\tprint(' '.join([str(t) for t in i]))", "n, m = list(map(int, input().split()))\na = [[0 for x in range(0, 200)] for x in range(0, 200)]\n\nfor i in range(0, n):\n\tb = input()\n\ta[i] = b.split(' ')\n\nfor i in range(0, n):\n\tfor j in range(0, m):\n\t\ta[i][j] = int(a[i][j])\n\nans = [[1 for x in range(0, 200)] for x in range(0, 200)]\n\nfor i in range(0, n):\n\tfor j in range(0, m):\n\t\tif(a[i][j] == 0):\n\t\t\tfor i1 in range(0, n):\n\t\t\t\tans[i1][j] = 0\n\t\t\tfor j1 in range(0, m):\n\t\t\t\tans[i][j1] = 0\n\nb = [[1 for x in range(0, 200)] for x in range(0, 200)]\n\nfor i in range(0, n):\n\tfor j in range(0, m):\n\t\tb[i][j] = 0\n\t\tfor j1 in range(0, m):\n\t\t\tb[i][j] = b[i][j]|ans[i][j1]\n\t\tfor i1 in range(0, n):\n\t\t\tb[i][j] = b[i][j]|ans[i1][j]\n\t\tif(b[i][j] != a[i][j]):\n\t\t\tprint('NO')\n\t\t\treturn\n\nprint('YES')\nfor i in range(0, n):\n\tres = ''\n\tfor j in range(0, m):\n\t\tres = res + str(ans[i][j])\n\t\tres = res + ' '\n\tprint(res)\n", "from collections import defaultdict\ng = defaultdict(list)\nrow = defaultdict(int)\ncolumn = defaultdict(int)\nng = defaultdict(list)\ngg = defaultdict(list)\n\n\nn,m= (int(x) for x in input('').split())\nfor i in range(n):\n    g[i]=[int(x) for x in input('').split()]\n    ng[i]= [0] * m\n    gg[i]= [0] * m\nfor i in range(n):\n    row[i] = all(g[i])\nfor j in range(m):\n    column[j] = all(g[i][j] for i in range(n))\n\nfor i in range(n):\n    for j in range(m):\n        ng[i][j] = int(row[i] and column[j])\n\nfor i in range(n):\n    if any(ng[i]):\n        gg[i] = [1]*m\n\nfor j in range(m):\n    if any(ng[i][j] for i in range(n)):\n        for i in range(n):\n            gg[i][j] = 1\n\n\n#print(g)\n#print(row)\n#print(column)\n#print(ng)\n#print(gg)\nif gg == g:\n    print('YES')\n    for i in range(n):\n        print(' '.join(str(x) for x in ng[i]))\nelse:\n    print('NO')\n", "\n\n[M,N] = [int(s) for s in input().split()]\nB = []\nfor i in range(M):\n    row = [int(s) for s in input().split()]\n    B.append(row)\n\nA = [[1 for j in range(N)] for i in range(M)]\nfor i in range(M):\n    for j in range(N):\n        if B[i][j]==0:\n            A[i] = [0 for j in range(N)]\n            for k in range(M): A[k][j] = 0\n\nB1 = [[0 for j in range(N)] for i in range(M)]\nfor i in range(M):\n    for j in range(N):\n        if A[i][j]==1:\n            B1[i] = [1 for j in range(N)]\n            for k in range(M): B1[k][j] = 1\n\nif B!=B1:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(M):\n        print(' '.join(map(str,A[i])))\n    \n\n", "m, n = map(int, input().split())\nrow = [True] * m\ncol = [True] * n\na = [[0] * n for _ in range(m)]\nfor i in range(m):\n    s = list(map(int, input().split()))\n    for j in range(n):\n        if (s[j] == 0):\n            row[i] = False\n            col[j] = False\n        a[i][j] = s[j]\nc = 0\nr = 0\nfor i in range(n):\n    if col[i]:\n        c+=1\nfor j in range(m):\n    if row[j]:\n        r+=1\nres = []\nif (r > 0 and c > 0) or (r == 0 and c == 0):\n    for i in range(m):\n        res.append([])\n        for j in range(n):\n            if col[j] and row[i]:\n                res[i].append(1)\n            elif a[i][j] == 0 or (col[j] or row[i]):\n                res[i].append(0)\n            else:\n                print('NO')\n                return\n\n    print('YES')\n    for i in range(m):\n        s = ' '.join(list(map(str, res[i])))\n        print(s)\nelse:\n    print('NO')", "n, m = map(int,input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int,input().split())))\nb = []\nfor i in range(n):\n    b.append([0] * m)\n\ndef fill(x, y):\n    for i in range(n):\n        b[i][y] = 1\n    for i in range(m):\n        b[x][i] = 1\n\ndef getv(c, x, y):\n    res = False\n    for i in range(n):\n        res = res or c[i][y]\n    for i in range(m):\n        res = res or c[x][i]\n    return res\n\ndef getv2(c, x, y):\n    res = True\n    for i in range(n):\n        res = res and c[i][y]\n    for i in range(m):\n        res = res and c[x][i]\n    return res\n\n\n\nfor i in range(n):\n    for j in range(m):\n        if getv2(a,i,j):\n            b[i][j] = 1\n\n\ngood = True\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] != getv(b, i, j):\n            good = False\n\nif good == False:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(n):\n        for j in range(m-1):\n            print(b[i][j],end=' ')\n        print(b[i][m-1])", "def check(a, b, m, n):\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\tk = 0 \n\t\t\tfor x in range(m):\n\t\t\t\tk |= a[x][j]\n\t\t\tfor x in range(n):\n\t\t\t\tk |= a[i][x]\n\t\t\tif k != b[i][j]:\n\t\t\t\treturn False\n\treturn True\n\ninput_values = lambda: [int(x) for x in input().split()]\nm, n = input_values()\nb = []\nfor i in range(m):\n\tb.append(input_values())\na = [[1 for j in range(n)] for i in range(m)]\nfor i in range(m):\n\tfor j in range(n):\n\t\tif b[i][j] == 0:\n\t\t\tfor x in range(m):\n\t\t\t\ta[x][j] = 0\n\t\t\tfor x in range(n):\n\t\t\t\ta[i][x] = 0\nif check(a, b, m, n):\n\tprint('YES')\n\tfor i in range(m):\n\t\tprint(' '.join([str(x) for x in a[i]]))\nelse:\n\tprint('NO')\n", "'''\nCreated on 11-Nov-2014\n\n@author: akash\n'''\ndef transform(a, n, m):\n    row = [False for i in range(n)]\n    col = [False for i in range(m)]\n    mat = [[True for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == False:\n                row[i] = True\n                col[j] = True\n    for i in range(n):\n        for j in range(m):\n            if row[i] == True or col[j] == True:       \n                mat[i][j] = False\n    return mat\n\ndef isvlid(inp, mat, m, n):\n    row = [False for i in range(n)]\n    col = [False for i in range(m)]\n    newinp = [[False for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == True:\n                row[i] = True\n                col[j] = True\n    for i in range(n):\n        for j in range(m):\n            if row[i] == True or col[j] == True:       \n                newinp[i][j] = True\n    for i in range(n):\n        for j in range(m):\n            if inp[i][j] != newinp[i][j]:\n                return False\n    return True\nline = input()\nlst = line.split()\nn = int(lst[0])\nm = int(lst[1])\n'accpet input'\ninp = [[False for i in range(m)] for j in range(n)]\nfor i in range(n):\n    line = input()\n    lst = line.split()\n    for j in range(m):\n        inp[i][j] = True if int(lst[j]) == 1 else False\n\nmat = transform(inp, n, m)\nif isvlid(inp, mat, m, n): \n    print(\"YES\")\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j]:\n                print(\"1\", end=\" \")\n            else:\n                print(\"0\", end=\" \")\n        print()\nelse:\n    print(\"NO\")\n", "__author__ = '-'\n\nl1 = input().strip().split(\" \")\nm = int(l1[0])\nn = int(l1[1])\n\nB = []\nfor i in range(m):\n    line = input().strip().split(\" \")\n    row = []\n    for p in line:\n        row.append(int(p))\n    B.append(row)\n\nA = [[0 for x in range(n)] for y in range(m)]\n\ndef transferA(B,m,n):\n    A = [[0 for x in range(n)] for y in range(m)]\n\n    for i in range(m):\n        rida1 = True\n        for j in range(n):\n            if B[i][j] == 0:\n                rida1 = False\n                break\n        if rida1:\n            for j in range(n):\n                veerg1 = True\n                for r in range(m):\n                    if B[r][j] == 0:\n                        veerg1 = False\n                        break\n                if veerg1 and rida1:\n                    A[i][j] = 1\n    return A\n\nA = transferA(B,m,n)\ndef transfer(A,m,n):\n    C = [[0 for x in range(n)] for y in range(m)]\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            if A[i][j] == 1:\n                for k in range(n):\n                    C[i][k] = 1\n                for l in range(m):\n                    C[l][j] = 1\n    return C\n\n\nC = transfer(A,m,n)\n\nif C == B:\n    print(\"YES\")\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            print(A[i][j],end = \" \")\n        print()\nelse:\n    print(\"NO\")\n", "(m, n) = list(map(int, input().split(' ')))\nB = []\nfor i in range(0,m):\n\trow = [int(x) for x in input().split(' ')]\n\tB.append(row)\n\nB_ = []\nfor j in range(0,n):\n\tcol = [B[i][j] for i in range(0,m)]\n\tB_.append(col)\n\nfor row in B:\n\tif 1 in row:\n\t\tif 0 in row:\n\t\t\tfor j in range(0,n):\n\t\t\t\tcol = [B[i][j] for i in range(0,m)]\n\t\t\t\tif (row[j]==1 and 0 in col):\n\t\t\t\t\tprint(\"NO\")\n\t\t\t\t\treturn\n\nfor col in B_:\n\tif 1 in col:\n\t\tif 0 in col:\n\t\t\tfor i in range(0,m):\n\t\t\t\trow = [B[i][j] for j in range(0,n)]\n\t\t\t\tif (col[i]==1 and 0 in row):\n\t\t\t\t\tprint(\"NO\")\n\t\t\t\t\treturn\n\nonly1 = False\nonly0 = False\nfor row in B:\n\tif 1 not in row:\n\t\tonly0 = True \n\tif 0 not in row:\n\t\tonly1 = True\nif only1 and only0:\n\tprint(\"NO\")\n\treturn\n\nonly1 = False\nonly0 = False\nfor col in B_:\n\tif 1 not in col:\n\t\tonly0 = True \n\tif 0 not in col:\n\t\tonly1 = True\nif only1 and only0:\n\tprint(\"NO\")\n\treturn\n\nA = [[0 for col in range(0,n)] for row in range(0,m)]\nR = []\nfor i in range(0,m):\n\tflg = 1\n\tfor j in range(0,n):\n\t\tif B[i][j] == 0:\n\t\t\tflg = 0\n\t\t\tbreak\n\tif flg == 1:\n\t\tR.append(i)\nC = []\nfor j in range(0,n):\n\tflg = 1\n\tfor i in range(0,m):\n\t\tif B[i][j] == 0:\n\t\t\tflg = 0\n\t\t\tbreak\n\tif flg == 1:\n\t\tC.append(j)\n\nfor r in R:\n\tfor c in C:\n\t\tA[r][c] = 1\n\nprint(\"YES\")\nfor i in range(0,m):\n\ts = \"\"+str(A[i][0])\n\tfor j in range(1,n):\n\t\ts += \" \"+str(A[i][j])\n\tprint(s)\n\n", "m,n = list(map(int,input().split()))\nB = [list(map(int,input().split())) for i in range(m)]\nsr = [sum(B[i]) for i in range(m)]\nsc = [sum([B[i][j] for i in range(m)]) for j in range(n)]\nfor i in range(m):\n  if sr[i]>0 and sr[i]<n:\n    for j in range(n):\n      if B[i][j] and sc[j]>0 and sc[j]<m:\n        print('NO')\n        return\nif sum(sr) > 0 and (max(sr) < n or max(sc) < m):\n  print('NO')\nelse:\n  print('YES')\n  for i in range(m):\n    Ai = [1 if sr[i]==n and sc[j]==m else 0 for j in range(n)]\n    print(' '.join(repr(a) for a in Ai))\n", "m,n = list(map(int,input().split()))\nB = [list(map(int,input().split())) for i in range(m)]\nsr = [sum(B[i]) for i in range(m)]\nsc = [sum([B[i][j] for i in range(m)]) for j in range(n)]\nno = sum(sr) > 0 and (max(sr) < n or max(sc) < m)\n\nfor i in range(m):\n  for j in range(n):\n    if B[i][j] and sc[j]%m and sr[i]%n or no:\n      print('NO')\n      return\n\nprint('YES')\nfor i in range(m):\n  Ai = [(sr[i]//n)*(sc[j]//m) for j in range(n)]\n  print(' '.join(repr(a) for a in Ai))\n", "#fin, fout = open(\"input.txt\"), open(\"output.txt\", \"w\")\nn, m = map(int, input().split())\n#n, m = map(int, fin.readline().split())\nA = [list(map(int, input().split())) for i in range(n)]\n#A = [list(map(int, fin.readline().split())) for i in range(n)]\nI, J = [0] * n, [0] * m\nIS, JS = [0] * n, [0] * m\nCountI, CountJ = 0, 0\nfor i in range(n):\n\tIS[i] = sum(A[i])\n\tif (IS[i] == m):\n\t\tI[i] = 1\n\t\tCountI += 1\nfor j in range(m):\n\tJS[j] = sum([A[i][j] for i in range(n)])\n\tif (JS[j] == n):\n\t\tJ[j] = 1\n\t\tCountJ += 1\nflag = True\ni = 0\nwhile i < n and flag:\n\tif (IS[i] != m and IS[i] != CountJ):\n\t\tflag = False\n\ti += 1\nj = 0\nwhile j < m and flag:\n\tif (JS[j] != n and JS[j] != CountI):\n\t\tflag = False\n\tj += 1\nif (flag and not (sum(I) + sum(J) > 0 and sum(I) * sum(J) == 0)):\n\tprint(\"YES\")\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tprint(I[i] * J[j], end = \" \")\n\t\tprint()\nelse:\n\tprint(\"NO\")\n#fout.close()\n#fin.close()", "n, m = [int(i) for i in input().split()]\nsum1 = [0] * n\nsum2 = [0] * m\nres = [[0] * m for i in range(n)]\na = 0\nk = [0] * 4\nflag = False\nfor i in range(n):\n    a = [int(i2) for i2 in input().split()]\n    sum1[i] = sum(a)\n    for i2 in range(m):\n        sum2[i2] += a[i2]\nfor i in range(n):\n    if sum1[i] == m:\n        k[2] += 1\nfor i in range(m):\n    if sum2[i] == n:\n        k[3] += 1\nfor i in range(n):\n    if (sum1[i] > k[3]) and not(sum1[i] == 0 or sum1[i] == m) or ((k[2] * k[3] == 0) and k[2] != k[3]):\n        flag = True\nfor i in range(m):\n    if (sum2[i] > k[2]) and not(sum2[i] == 0 or sum2[i] == n) or ((k[2] * k[3] == 0) and k[2] != k[3]):\n        flag = True\nif flag:\n    print('NO')\nelse:\n    print('YES')\n    for i in range(n):\n        for i2 in range(m):\n            res[i][i2] = 1\n    for i in range(m):\n        if sum2[i] != n:\n            for i2 in range(n):\n                res[i2][i] = 0\n    for i in range(n):\n        if sum1[i] != m:\n            for i2 in range(m):\n                res[i][i2] = 0\n    for i in range(n):\n        for i2 in range(m):\n            print(res[i][i2],end=' ')\n        print()", "n, m = map(int, input().split())\ntab = [[int(i) for i in input().split()] for j in range(n)]\nans = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    for j in range(m):\n        z = 1\n        for k in tab[i]:\n            z = z and k\n        for k in range(n):\n            z = z and tab[k][j]\n        ans[i][j] = z\ntr = True\nfor i in range(n):\n    for j in range(m):\n        z = 0\n        for k in ans[i]:\n            z = z or k\n        for k in range(n):\n            z = z or ans[k][j]\n        if z != tab[i][j] and tr:\n            tr = False\n            print('NO')\nif tr:\n    print('YES')\n    for s in ans:\n        for x in s:\n            print(x, end = ' ')\n        print()\n", "import operator\n\ndef mx_or(mx):\n    n = len(mx)\n    m = len(mx[0])\n    result = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if mx[i][j]:\n                for k in range(n):\n                    result[k][j] = 1\n                for k in range(m):\n                    result[i][k] = 1\n    return result\n\nnone = lambda iterable: all(map(operator.not_, iterable))\n\nn, m = list(map(int, input().split()))\nmx = [[ ] for i in range(n)]\n\nfor i in range(n):\n    mx[i] = list(map(int, input().split()))\n\nresult = [[1 for j in range(m)] for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if not mx[i][j]:\n            for k in range(n):\n                result[k][j] = 0\n            for k in range(m):\n                result[i][k] = 0\n\nif mx_or(result) == mx:\n    print(\"YES\")\n    for i in range(n):\n        print(' '.join(map(str, result[i])))\nelse:\n    print(\"NO\")\n", "m, n = map(int, input().split())\nB = [list(map(int, input().split())) for x in range(m)]\nA = [[1 for x in range(n)] for x in range(m)]\n#C = [[0 for x in range(n)] for x in range(m)]\nfor i in range(m):\n    for j in range(n):\n        if B[i][j] == 0:\n            for y in range(m):\n                A[y][j] = 0\n            for z in range(n):\n                A[i][z] = 0\nfor i in range(m):\n    for j in range(n):\n        tmp = 0\n        for y in range(m):\n            tmp = tmp | A[y][j]\n        for z in range(n):\n            tmp = tmp | A[i][z]\n        if tmp != B[i][j]:\n            print(\"NO\")\n            return\nprint(\"YES\") \nfor li in A:\n    print(' '.join(map(str, li)))", "from math import *\n\nn, m = input().split()\nn, m = int(n), int(m)\n\nb = [[int(i) for i in input().split()] for i in range(n)]\na = [[1] * m for i in range(n)]\nc = [[0] * m for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if (b[i][j] == 0):\n            for k in range(m):\n                a[i][k] = 0\n                \n            for k in range(n):\n                a[k][j] = 0\n                \nfor i in range(n):\n    for j in range(m):\n        c[i][j] = 0\n        \n        for k in range(m):\n            if (a[i][k] == 1):\n                c[i][j] = 1\n                break\n                \n        if (c[i][j] == 1):\n            continue\n            \n        for k in range(n):\n            if (a[k][j] == 1):\n                c[i][j] = 1\n                break\n                \nbad = False\n                \nfor i in range(n):\n    for j in range(m):\n        if (c[i][j] != b[i][j]):\n            bad = True\n            print('NO')\n            break\n            \n    if (bad):\n        break\n\nif (not bad):\n    print('YES')\n    \n    for i in range(n):\n        for j in range(m):\n            print(a[i][j], end = ' ')\n            \n        print()", "def ok( AA , resB ):\n    realB = []\n    for i in range(0,m):\n        realBrow = []\n        for j in range(0,n):\n            res = 0\n            for k in range(0,m):\n                res += AA[k][j]\n            for k in range(0,n):\n                res += AA[i][k]\n            if res > 0:\n                res = 1\n            realBrow.append( res )\n        realB.append( realBrow )\n\n    for i in range(0,m):\n        for j in range(0,n):\n            if realB[i][j] != resB[i][j]:\n                return False\n    return True\n\n[m,n] = input().split(\" \")\nm = int(m)\nn = int(n)\n#print(\"m:%d n:%d\" % ( m , n ) )\n\nB = []\nA = []\nfor i in range(0,m):\n    brow = input().split(\" \")\n    arow = []\n    for j in range(0,n):\n        brow[j] = int(brow[j])\n        arow.append(1)\n    B.append( brow )\n    A.append( arow )\n\n#print(B)\nfor i in range(0,m):\n    for j in range(0,n):\n        if B[i][j] == 0:\n            for k in range(0,m):\n                A[k][j] = 0\n            for k in range(0,n):\n                A[i][k] = 0\n\nif ok(A,B):\n    print(\"YES\")\n    for i in range(0,m):\n        for j in range(0,n):\n            A[i][j] = str(A[i][j])\n        print(\" \".join(A[i]))\nelse:\n    print(\"NO\")\n\n\n\n", "from functools import reduce\n\ndef foldM0(mat, n, m, f):\n    ret = [x[:] for x in mat]\n    for i in range(n):\n        v = reduce(f, [mat[i][j] for j in range(m)])\n        for j in range(m):\n            ret[i][j] = v\n    for i in range(m):\n        v = reduce(f, [mat[j][i] for j in range(n)])\n        for j in range(n):\n            ret[j][i] = f(ret[j][i], v)\n    return ret\n\n    \ndef solve(mat, n, m):\n    matpo = foldM0(mat, n, m, lambda x, y: x&y)\n    if mat == foldM0(matpo, n, m, lambda x, y: x|y):\n        print(\"YES\")\n        print(\"\\n\".join(\" \".join(str(x) for x in xs) for xs in matpo))\n    else:\n        print(\"NO\")\n\nn, m = map(int, input().split())\n\nmat = []\nfor i in range(n):\n    mat.append(list(map(int, input().split())))\n    \nsolve(mat, n, m)", "a, b = list(map(int, input().split(' ')))\narray = [[1] * b for i in range(a)]\norig = [list(map(int, input().split(' '))) for i in range(a)]\nmatrix = []\nfor i in orig:\n    matrix.append(i[:])\n\nrow0 = []\ncol0 = []\nfor i in range(a):\n    for j in range(b):\n        if matrix[i][j] == 0:\n            row0.append(i)\n            col0.append(j)\n            \nrow0 = list(set(row0))\ncol0 = list(set(col0))\nfor i in row0:\n    matrix[i] = [0] * b\nfor ele in col0:\n    for i in range(a):\n        matrix[i][ele] = 0\n\nmatch = [[0] * b for i in range(a)]\nfor i in range(len(matrix)):\n    if 1 in matrix[i]:\n        match[i] = [1] * len(matrix[0])\n\njlist = []\nfor i in range(a):\n    for j in range(b):\n        if matrix[i][j] == 1:\n            jlist.append(j)\nfor i in jlist:\n    for bad in range(len(match)):\n        match[bad][i] = 1\nif match == orig:\n    print(\"YES\")\n    for i in matrix:\n        print(' '.join([str(j) for j in i]))\n\nelse:\n    print(\"NO\")\n", "n, m = [int(i) for i in input().split()]\nsum1 = [0] * n\nsum2 = [0] * m\nres = [[0] * m for i in range(n)]\na = 0\nk = [0] * 4\nflag = False\nfor i in range(n):\n    a = [int(i2) for i2 in input().split()]\n    sum1[i] = sum(a)\n    for i2 in range(m):\n        sum2[i2] += a[i2]\nfor i in range(n):\n    if sum1[i] == m:\n        k[2] += 1\nfor i in range(m):\n    if sum2[i] == n:\n        k[3] += 1\nfor i in range(n):\n    if (sum1[i] > k[3]) and not(sum1[i] == 0 or sum1[i] == m) or ((k[2] * k[3] == 0) and k[2] != k[3]):\n        flag = True\nfor i in range(m):\n    if (sum2[i] > k[2]) and not(sum2[i] == 0 or sum2[i] == n) or ((k[2] * k[3] == 0) and k[2] != k[3]):\n        flag = True\nif flag:\n    print('NO')\nelse:\n    print('YES')\n    for i in range(n):\n        for i2 in range(m):\n            res[i][i2] = 1\n    for i in range(m):\n        if sum2[i] != n:\n            for i2 in range(n):\n                res[i2][i] = 0\n    for i in range(n):\n        if sum1[i] != m:\n            for i2 in range(m):\n                res[i][i2] = 0\n    for i in range(n):\n        for i2 in range(m):\n            print(res[i][i2],end=' ')\n        print()\n", "m, n = (int(x) for x in input().split())\nb = []\nr1 = []\nfor i in range(m):\n    b.append([int(x) for x in input().split()])\n    r1.append(sum(b[i]) == n)\nc1 = [sum(b[i][j] for i in range(m)) == m for j in range(n)]\nif (sum(r1) == 0 and sum(c1)) != 0 or (sum(r1) != 0 and sum(c1) == 0):\n    print('NO')\n    return\na = []\nfor i in range(m):\n    a.append([])\n    for j in range(n):\n        if b[i][j] == 0:\n            a[i].append(0)\n        elif not r1[i] and not c1[j]:\n            print('NO')\n            return\n        else:\n            a[i].append(1 if r1[i] and c1[j] else 0)\nprint('YES')\nfor i in range(m):\n    print(' '.join(map(str, a[i])))", "n, k = [int(x) for x in input().split()]\narr = []\nans = []\nrows = [0] * n\ncols = [0] * k\nfor i in range(n):\n\tarr.append(input().split())\n\tans.append(['0'] * k)\n\trows[i] = all([a == '1' for a in arr[-1]])\nfor i in range(k):\n\tsum = 0\n\tfor j in range(n):\n\t\tsum += 1 if arr[j][i] == '1' else 0\n\tif sum == n:\n\t\tcols[i] = True\nfor i in range(n):\n\tfor j in range(k):\n\t\tif ((arr[i][j] == '1' and not rows[i] and not cols[j]) or\n                   (arr[i][j] == '0' and (rows[i] or cols[j]))):\n\t\t\tprint('NO')\n\t\t\treturn\nif any(rows) ^ any(cols):\n\tprint('NO')\n\treturn\nfor i in range(n):\n\tif not rows[i]:\n\t\tcontinue\n\tfor j in range(k):\n\t\tif cols[j]:\n\t\t\tans[i][j] = '1'\nprint('YES')\nprint('\\n'.join(' '.join(l) for l in ans))\n", "def main():\n    n, m = map(int, input().split())\n    l = tuple(tuple(map(int, input().split())) for _ in range(n))\n    res = [[1] * m for _ in range(n)]\n    for y, row in enumerate(l):\n        for x, f in enumerate(row):\n            if not f:\n                res[y] = [0] * m\n                for rr in res:\n                    rr[x] = 0\n    for y, row in enumerate(l):\n        for x, f in enumerate(row):\n            if f:\n                if not (any(res[y]) or any(rr[x] for rr in res)):\n                    print('NO')\n                    return\n    print('YES')\n    for rr in res:\n        print(*rr)\n\n\ndef __starting_point():\n    main()\n__starting_point()"]