["def met(x,y):\n  if x*y>0:return 0\n  if (x+y)%2==0:return 1\n  return 2\ndef main0(n,a0,a1):\n  ret=[0]*3\n  mat=[[0]*n for _ in range(n)]\n  for i in range(1,n):\n    mat[0][i]=a0[i]\n    mat[i][0]=a1[i-1]\n    ret[a1[i-1]]+=1\n    ret[a0[i]]+=1\n  mat[0][0]=a0[0]\n  ret[a0[0]]+=1\n  for j in range(1,n):\n    for i in range(1,n):\n      mat[i][j]=met(mat[i][j-1],mat[i-1][j])\n      ret[mat[i][j]]+=1\n  #for x in mat:print(*x)\n  return ret\n\ndef main1(n,a0,a1):\n  ret=[0]*3\n\n  a1=[a0[0]]+a1\n  for i in range(1,n):\n    ret[a1[i]]+=1\n    ret[a0[i]]+=1\n  ret[a0[0]]+=1\n\n  b0,b1=[a1[1]],[a0[1]]\n  for i in range(1,n):\n    b0.append(met(b0[-1],a0[i]))\n    b1.append(met(b1[-1],a1[i]))\n    ret[b0[-1]]+=1\n    ret[b1[-1]]+=1\n  ret[b0[1]]-=1\n\n  c0=[a1[2],b1[2]]\n  c1=[a0[2],b0[2]]\n  for i in range(2,n):\n    c0.append(met(c0[-1],b0[i]))\n    c1.append(met(c1[-1],b1[i]))\n    ret[c0[-1]]+=1\n    ret[c1[-1]]+=1\n  ret[c0[2]]-=1\n\n  d0=[a1[3],b1[3],c1[3]]\n  d1=[a0[3],b0[3],c0[3]]\n  for i in range(3,n):\n    d0.append(met(d0[-1],c0[i]))\n    d1.append(met(d1[-1],c1[i]))\n    ret[d0[-1]]+=1\n    ret[d1[-1]]+=1\n  ret[d0[3]]-=1\n\n  for i in range(4,n):\n    ret[d0[i]]+=n-i-1\n    ret[d1[i]]+=n-i-1\n  ret[d0[3]]+=n-4\n  \"\"\"\n  print(*a0)\n  print(*b0)\n  print(*c0)\n  print(*d0)\n  for i in range(4,n):\n    print(a1[i],b1[i],c1[i],d1[i])\n  \"\"\"\n  return ret\n\n\nn=int(input())\na0=list(map(int,input().split()))\na1=[int(input()) for _ in range(n-1)]\nif n<10:\n  ret=main0(n,a0,a1)\nelse:\n  ret=main1(n,a0,a1)\nprint((*ret))\n", "## coding: UTF-8\n\ndef mex(x,y):\n    if(x*y>0):\n        return 0\n    elif(x == 1 and y == 0):\n        return 2\n    elif(x == 0 and y == 1):\n        return 2\n    else:\n        return 1\n\n'''\nimport random\n\nN = 15\nmatrix = []\nfor i in range(N):\n    matrix.append([7] * N)\n\nfor i in range(N):\n    matrix[0][i] = random.randint(0,2)\nfor j in range(1, N):\n    matrix[j][0] = random.randint(0,2)\n\nfor i in range(N):\n    print(matrix[i])\n\n\n\n\n\nfor i in range(1, N):\n    for j in range(1, N):\n        matrix[i][j] = mex(matrix[i-1][j], matrix[i][j-1])\n\nprint('~~~~~~~~~~~~~~~~~~~~~~~~~~~')\nfor i in range(N):\n    print(matrix[i])\ngutyoku = [0,0,0]\nfor i in range(N):\n    for j in range(N):\n        gutyoku[matrix[i][j]] += 1\nprint(gutyoku)\n\n\n\nprint('~~~~~~~~~~~~~~~~~~~~~~~+++++++++~~~~~~~~~~~')\n'''\n\n\n\n\n\n\n\ncounter = [0,0,0]\n\n\n\nN = int(input())\n#N = 15\n\nif(N == 1):\n    counter[int(input())] += 1\n    print(('{} {} {}'.format(counter[0], counter[1], counter[2])))\n\n\n\n\nelif(N == 2):\n    A = list(map(int,input().split()))\n    B = int(input())\n    counter[A[0]] += 1\n    counter[A[1]] += 1\n    counter[B] += 1\n    counter[mex(A[1], B)] += 1\n    print(('{} {} {}'.format(counter[0], counter[1], counter[2])))\n\nelse:\n    A = list(map(int,input().split()))\n    #A = matrix[0]\n    B = []\n    for i in range(N-1):\n        B.append(int(input()))\n        #B.append(matrix[i+1][0])\n\n    matrix = []\n    #for i in range(N):\n        #matrix.append([7] * N)\n\n    #matrix[0] = A\n    matrix.append(A)\n    for j in range(1, N):\n        #matrix[j][0] = B[j-1]\n        matrix.append([B[j-1]])\n\n    \n    #for i in range(N):\n        #print(matrix[i])\n    \n    #print(-1)\n\n    \n    for i in range(1, 3):\n        for j in range(1, N):\n            #matrix[i][j] = mex(matrix[i-1][j], matrix[i][j-1])\n            matrix[i].append(mex(matrix[i-1][j], matrix[i][j-1]))\n\n    for i in range(3, N):\n        for j in range(1,3):\n            #matrix[i][j] = mex(matrix[i-1][j], matrix[i][j-1])   \n            matrix[i].append(mex(matrix[i-1][j], matrix[i][j-1]))     \n\n    #for i in range(N):\n        #print(matrix[i])\n\n    \n    counter = [0, 0, 0]\n    for i in range(3):\n        for j in range(N):\n            counter[matrix[i][j]] += 1\n\n    for i in range(3, N):\n        for j in range(3):\n            counter[matrix[i][j]] += 1\n\n    #print(counter)\n\n    #print('check')\n    #for i in range(N):\n        #print(matrix[i])\n    \n    for i in range(3, 4):\n        for j in range(3, N):\n            #matrix[i][j] = mex(matrix[i-1][j], matrix[i][j-1])\n            #counter[matrix[i][j]] += N-j\n            matrix[i].append(mex(matrix[i-1][j], matrix[i][j-1]))\n            counter[mex(matrix[i-1][j], matrix[i][j-1])] += N-j\n            #print(matrix[i][j], N-j)\n\n    for i in range(4, N):\n        for j in range(3, 4):\n            #matrix[i][j] = mex(matrix[i-1][j], matrix[i][j-1])      \n            #counter[matrix[i][j]] += N-i\n            matrix[i].append(mex(matrix[i-1][j], matrix[i][j-1]))\n            counter[mex(matrix[i-1][j], matrix[i][j-1])] += N-i\n            #print(matrix[i][j], N-i)\n\n    #for i in range(N):\n        #print(matrix[i])\n\n\n    #print(counter)\n\n    print(('{} {} {}'.format(counter[0], counter[1], counter[2])))\n", "mex = [\n    [1, 2, 1],\n    [2, 0, 0],\n    [1, 0, 0]\n]\n\nN, *I = map(int, open(0).read().split())\n\nA = [I[:N]]\nfor i, a in enumerate(I[N:], 1):\n    M = N if i < 4 else min(4, N)\n\n    Ai = [a]\n    for j in range(1, M):\n        Ai.append(mex[A[-1][j]][Ai[-1]])\n\n    A.append(Ai)\n\nans = [0, 0, 0]\nfor i, Ai in enumerate(A):\n    for j, aij in enumerate(Ai):\n        ans[aij] += N - max(i, j) if i >= 3 and j >= 3 else 1\n\nprint(*ans)", "import sys\ninput = sys.stdin.readline\ndef solve():\n    N = int(input())\n    A = list(map(int,input().split()))\n    B = [int(input()) for i in range(N-1)]\n\n    def mex(x,y):\n        if x+y==1: return 2\n        if x==0 or y==0: return 1\n        return 0\n\n    n = min(4,N)\n    arr = [[-1]*n for _ in range(n)]\n    for i,a in enumerate(A):\n        if i>=4: break\n        arr[0][i] = a\n    for i,b in enumerate(B):\n        if i+1>=4: break\n        arr[i+1][0] = b\n    for i in range(1,n):\n        for j in range(1,n):\n            arr[i][j] = mex(arr[i-1][j], arr[i][j-1])\n\n    ctr = [0,0,0]\n    for i in range(n):\n        for j in range(n):\n            ctr[arr[i][j]] += 1\n    if N <= 4:\n        print(*ctr)\n        return\n\n    arrtop = [[-1]*(N-3) for _ in range(4)]\n    for i in range(4):\n        arrtop[i][0] = arr[i][-1]\n    for j in range(4,N):\n        arrtop[0][j-3] = A[j]\n    for i in range(1,4):\n        for j in range(1,N-3):\n            arrtop[i][j] = mex(arrtop[i-1][j], arrtop[i][j-1])\n            ctr[arrtop[i][j]] += (1 if i<3 else N-3-j)\n    for a in A[4:]:\n        ctr[a] += 1\n\n    arrleft = [[-1]*4 for _ in range(N-3)]\n    for j in range(4):\n        arrleft[0][j] = arr[-1][j]\n    for i in range(4,N):\n        arrleft[i-3][0] = B[i-1]\n    for i in range(1,N-3):\n        for j in range(1,4):\n            arrleft[i][j] = mex(arrleft[i-1][j], arrleft[i][j-1])\n            ctr[arrleft[i][j]] += (1 if j<3 else N-3-i)\n    for b in B[3:]:\n        ctr[b] += 1\n\n    ctr[arr[-1][-1]] += N-4\n    print(*ctr)\n\nsolve()", "def M(x,y):return[[1,2,1],[2,0,0],[1,0,0]][x][y]\nn=int(input())\na=[list(map(int,input().split()))]\nfor i in range(n-1):\n a.append([int(input())])\n if i<3:\n  for j in range(n-1):a[i+1].append(M(a[i][j+1],a[i+1][j]))\n else:\n  for j in range(min(4,n)-1):a[i+1].append(M(a[i][j+1],a[i+1][j]))\nA=[0,0,0]\nfor i in range(n):\n for j in range(len(a[i])):\n  if i>=3and j>=3:A[a[i][j]]+=n-max(i,j)\n  else:A[a[i][j]]+=1\nprint(*A)", "import sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int,input().split()))\nB = [int(input()) for i in range(N-1)]\n\ndef mex(x,y):\n    if x+y==1: return 2\n    if x==0 or y==0: return 1\n    return 0\n\nn = min(4,N)\narr = [[-1]*n for _ in range(n)]\nfor i,a in enumerate(A):\n    if i>=4: break\n    arr[0][i] = a\nfor i,b in enumerate(B):\n    if i+1>=4: break\n    arr[i+1][0] = b\nfor i in range(1,n):\n    for j in range(1,n):\n        arr[i][j] = mex(arr[i-1][j], arr[i][j-1])\n\nfrom collections import Counter\nctr = Counter()\nfor i in range(n):\n    for j in range(n):\n        ctr[arr[i][j]] += 1\nif N <= 4:\n    print(ctr[0], ctr[1], ctr[2])\n    return\n\narrtop = [[-1]*(N-3) for _ in range(4)]\nfor i in range(4):\n    arrtop[i][0] = arr[i][-1]\nfor j in range(4,N):\n    arrtop[0][j-3] = A[j]\nfor i in range(1,4):\n    for j in range(1,N-3):\n        arrtop[i][j] = mex(arrtop[i-1][j], arrtop[i][j-1])\nfor i in range(4):\n    for j in range(1,N-3):\n        ctr[arrtop[i][j]] += (1 if i<3 else N-3-j)\n\narrleft = [[-1]*4 for _ in range(N-3)]\nfor j in range(4):\n    arrleft[0][j] = arr[-1][j]\nfor i in range(4,N):\n    arrleft[i-3][0] = B[i-1]\nfor i in range(1,N-3):\n    for j in range(1,4):\n        arrleft[i][j] = mex(arrleft[i-1][j], arrleft[i][j-1])\nfor i in range(1,N-3):\n    for j in range(4):\n        ctr[arrleft[i][j]] += (1 if j<3 else N-3-i)\n\nctr[arr[-1][-1]] += N-4\nprint(ctr[0], ctr[1], ctr[2])", "import sys\n\ninput = sys.stdin.readline\n\nmex = [[1, 2, 1], [2, 0, 0], [1, 0, 0]]\n\nN = int(input())\na = [list(map(int, input().split()))]\nfor i in range(1, N):\n    a.append([int(input())])\n    # \u6700\u521d\u306e4\u884c / 4\u5217\u306e\u307f\u3092\u611a\u76f4\u306b\u8a08\u7b97\u3059\u308b\n    if i < 4:\n        stop = N\n    else:\n        stop = min(4, N)\n    for j in range(1, stop):\n        a[i].append(mex[a[i - 1][j]][a[i][j - 1]])\n\ncount = [0, 0, 0]\nfor i, ai in enumerate(a):\n    for j, aij in enumerate(ai):\n        if i >= 3 and j >= 3:\n            count[aij] += N - max(i, j)\n        else:\n            count[aij] += 1\nprint(*count)", "n = int(input())\na = list(map(int, input().split()))\nd = [0] * 3\ndef update(u):\n    for i in u:\n        d[i] += 1\nMEX = {(0, 0): 1, (0, 1): 2, (0, 2): 1, (1, 1): 0, (1, 2): 0, (2, 2): 0}\ndef mex(u, v):\n    return MEX[(min(u, v), max(u, v))]\ndef proc(v):\n    u = [int(input())]\n    for i in range(1, len(v)):\n        u.append(mex(u[-1], v[i]))\n    return u\nupdate(a)\nfor _ in range(2, min(5, n + 1)):\n    a = proc(a)\n    update(a)\nfor j in range(4, n):\n    d[a[j - 1]] += n - j\na = a[:4]\nfor i in range(5, n + 1):\n    a = proc(a)\n    update(a)\n    d[a[3]] += n - i\nprint(*d)", "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ndef mex(i, j):\n    if i == 0:\n        return 2 if j == 1 else 1\n    if i == 1:\n        return 0 if j else 2\n    return 0 if j else 1\n\nans = [0, 0, 0]\nN = int(input())\n\nif N < 10:\n    X = [[0] * N for _ in range(N)]\n    A = [int(a) for a in input().split()]\n    for i, a in enumerate(A):\n        X[0][i] = a\n        ans[a] += 1\n    for i in range(1, N):\n        a = int(input())\n        X[i][0] = a\n        ans[a] += 1\n    for i in range(1, N):\n        for j in range(1, N):\n            a = mex(X[i][j-1], X[i-1][j])\n            X[i][j] = a\n            ans[a] += 1\n    print((*ans))\n    return\n\nK = 3\nX = [[0] * (N if i <= K else K + 1) for i in range(N)]\nA = [int(a) for a in input().split()]\nfor i, a in enumerate(A):\n    X[0][i] = a\n    ans[a] += 1\nfor i in range(1, N):\n    a = int(input())\n    X[i][0] = a\n    ans[a] += 1\n\nfor i in range(1, N):\n    Xi = X[i]\n    Xi1 = X[i-1]\n    for j in range(1, K):\n        a = mex(Xi[j-1], Xi1[j])\n        ans[a] += 1\n        X[i][j] = a\nfor i in range(1, K):\n    Xi = X[i]\n    Xi1 = X[i-1]\n    for j in range(K, N):\n        a = mex(Xi[j-1], Xi1[j])\n        ans[a] += 1\n        X[i][j] = a\n\nfor i in range(K, N):\n    j = K\n    a = mex(X[i][j-1], X[i-1][j])\n    X[i][j] = a\n    ans[a] += N - i\nfor j in range(K + 1, N):\n    i = K\n    a = mex(X[i][j-1], X[i-1][j])\n    X[i][j] = a\n    ans[a] += N - j\n\nprint((*ans))\n", "I=lambda:list(map(int,input().split()))\ndef med(a,b):\n    if a==0 and b==0 or a==0 and b==2 or a==2 and b==0:\n        return 1\n    elif a==0 and b==1 or a==1 and b==0:\n        return 2\n    else:return 0\nnagasa=4\nN,=I()\nA0=I()\nAA=[A0]\nAv=[A0[0]]+[int(input()) for _ in range(N-1)]\nif N<=nagasa:\n    for l in range(1,N):\n        Ai=[Av[l]]\n        for i in range(1,N):\n            Ai.append(med(AA[l-1][i], Ai[-1]))\n        AA+=[Ai]\n    print(*(sum(al.count(i) for al in AA) for i in range(3)))\n    return\n\nfor l in range(1,nagasa):\n    Ai=[Av[l]]\n    for i in range(1,N):\n        Ai.append(med(AA[l-1][i], Ai[-1]))\n    AA+=[Ai]\nBB=[Av]\nfor c in range(1,nagasa):\n    Bi=[A0[c]]\n    for i in range(1,N):\n        Bi.append(med(BB[c-1][i], Bi[-1]))\n    BB+=[Bi]\n*box,=(sum(al[:nagasa].count(i) for al in AA) for i in range(3))\n*ass,=(sum(al.count(i) for al in AA) for i in range(3))\n*bss,=(sum(bl.count(i) for bl in BB) for i in range(3))\nless=[ass[i]+bss[i]-box[i] for i in range(3)]\nless[AA[nagasa-1][nagasa-1]]+=N-nagasa\nfor i,a in enumerate(AA[nagasa-1]):\n    if i<nagasa:continue\n    less[a]+=N-1-i\nfor i,b in enumerate(BB[nagasa-1]):\n    if i<nagasa:continue\n    less[b]+=N-1-i\nprint(*less)", "N = int(input())\n# from random import randint\nif N<=5:\n  A = [[0]*N for _ in range(N)]\n  A[0] = list(map(int, input().split()))\n  for i in range(1,N):\n    A[i][0] = int(input())\n  for i in range(1,N):\n    for j in range(1,N):\n      lis = [0]*3\n      lis[A[i-1][j]] = 1\n      lis[A[i][j-1]] = 1\n      for k in range(3):\n        if lis[k]==0:\n          A[i][j] = k\n          break\n  lis = [0]*3\n  for i in range(N):\n    for j in range(N):\n      lis[A[i][j]] += 1\nelse:\n  A = [[0]*N for _ in range(4)]\n  A[0] = list(map(int, input().split()))\n  B = [[0]*4 for _ in range(N)]\n  for i in range(1,N):\n    B[i][0] = int(input())\n  for i in range(1,4):\n    A[i][0] = B[i][0]\n  for j in range(4):\n    B[0][j] = A[0][j]\n\n  # A[0] = [randint(0,2) for _ in range(N)]\n  # for i in range(N-1):\n    # A[i+1][0] = randint(0,2)\n  for i in range(1,4):\n    for j in range(1,N):\n      lis = [0]*3\n      lis[A[i-1][j]] = 1\n      lis[A[i][j-1]] = 1\n      for k in range(3):\n        if lis[k]==0:\n          A[i][j] = k\n          break\n  for i in range(1,N):\n    for j in range(1,4):\n      lis = [0]*3\n      lis[B[i-1][j]] = 1\n      lis[B[i][j-1]] = 1\n      for k in range(3):\n        if lis[k]==0:\n          B[i][j] = k\n          break\n  lis = [0]*3\n  for i in range(3):\n    for j in range(N):\n      lis[A[i][j]] += 1\n  for i in range(3,N):\n    for j in range(3):\n      lis[B[i][j]] += 1\n  for j in range(3,N):\n    lis[A[3][j]] += N-j\n  for i in range(4,N):\n    lis[B[i][3]] += N-i\nprint((*lis))\n\n", "import sys\ninput = sys.stdin.readline\n\nN=int(input())\nA=list(map(int,input().split()))\nB=[A[0]]+[int(input()) for i in range(N-1)]\n\nif N<=10:\n    LIST=[[-1]*N for i in range(N)]\n    LIST[0]=A\n    for i in range(N):\n        LIST[i][0]=B[i]\n\n    for i in range(1,N):\n        for j in range(1,N):\n            SET={LIST[i-1][j],LIST[i][j-1]}\n\n            if not (0 in SET):\n                LIST[i][j]=0\n            elif not (1 in SET):\n                LIST[i][j]=1\n            else:\n                LIST[i][j]=2\n\n    ZERO=0\n    ONE=0\n    TWO=0\n\n    for i in range(N):\n        ZERO+=LIST[i].count(0)\n        ONE+=LIST[i].count(1)\n        TWO+=LIST[i].count(2)\n\n    print(ZERO,ONE,TWO)\n\n    return\n\n    \n\n\nLIST1=[[-1]*N for i in range(4)]\nLIST1[0]=A\nLIST1[1][0]=B[1]\nLIST1[2][0]=B[2]\nLIST1[3][0]=B[3]\n\nfor i in range(1,4):\n    for j in range(1,N):\n        SET={LIST1[i-1][j],LIST1[i][j-1]}\n\n        if not (0 in SET):\n            LIST1[i][j]=0\n        elif not (1 in SET):\n            LIST1[i][j]=1\n        else:\n            LIST1[i][j]=2\n\nLIST2=[[-1]*N for i in range(4)]\nLIST2[0]=B\nLIST2[1][0]=A[1]\nLIST2[2][0]=A[2]\nLIST2[3][0]=A[3]\n\nfor i in range(1,4):\n    for j in range(1,N):\n        SET={LIST2[i-1][j],LIST2[i][j-1]}\n\n        if not (0 in SET):\n            LIST2[i][j]=0\n        elif not (1 in SET):\n            LIST2[i][j]=1\n        else:\n            LIST2[i][j]=2\n\nZERO=0\nONE=0\nTWO=0\nk=1\n\nfor i in range(N-1,2,-1):\n    if LIST1[3][i]==0:\n        ZERO+=k\n    elif LIST1[3][i]==1:\n        ONE+=k\n    else:\n        TWO+=k\n    k+=1\n\nk=1\nfor i in range(N-1,3,-1):\n    if LIST2[3][i]==0:\n        ZERO+=k\n    elif LIST2[3][i]==1:\n        ONE+=k\n    else:\n        TWO+=k\n    k+=1\n\nZERO+=LIST1[0].count(0)+LIST1[1].count(0)+LIST1[2].count(0)+LIST2[0][3:].count(0)+LIST2[1][3:].count(0)+LIST2[2][3:].count(0)\nONE+=LIST1[0].count(1)+LIST1[1].count(1)+LIST1[2].count(1)+LIST2[0][3:].count(1)+LIST2[1][3:].count(1)+LIST2[2][3:].count(1)\nTWO+=LIST1[0].count(2)+LIST1[1].count(2)+LIST1[2].count(2)+LIST2[0][3:].count(2)+LIST2[1][3:].count(2)+LIST2[2][3:].count(2)\n\nprint(ZERO,ONE,TWO)", "# coding: utf-8\n# Your code here!\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nsys.setrecursionlimit(10**6)\n\nn = int(readline())\nres = [0]*3\n\na = list(map(int,readline().split()))\n\nmex = [[1,2,1],[2,0,0],[1,0,0]]\n\ndef brute(a):\n    b = [0]*n\n    b[0] = int(readline())\n    for i in range(1,n):\n        b[i] = mex[a[i]][b[i-1]]\n    return b\n\nif n <= 10:\n    #print(a)\n    for i in a: res[i] += 1\n    for _ in range(n-1):\n        a = brute(a)        \n        for i in a: res[i] += 1\n        #print(a)\n    print(*res)    \n    return\n\n\nfor _ in range(4):\n    for i in a: res[i] += 1\n    a = brute(a)\n\nfor i in range(3):\n    res[a[i]] += 1\n\nres[a[3]] += n-4\nfor i in range(4,n):\n    res[a[i]] += n-i\n\nb = a[:4]\n\n\nfor i in range(5,n):\n    x = int(readline())\n    b[0] = x\n    for j in range(1,4):\n        res[x] += 1\n        x = mex[x][b[j]]\n        b[j] = x\n    \n    #print(x)\n    res[x] += n-i\n\n\nprint(*res)", "mex = ((1,2,1),(2,0,0),(1,0,0))\n\"\"\"\nimport random\na= [[random.randrange(0,3) for _ in range(10)] for _ in range(10)]\nfor i in range(3,10):\n    for j in range(3,10):\n        a[i][j] = mex[a[i-1][j]][a[i][j-1]]\"\"\"\n#n=10\nn=int(input())\n*a1,=list(map(int, input().split()))\na=[a1]\nfor _ in range(n-1):\n    a.append([int(input())])\nans=[0,0,0]\nfrom copy import deepcopy\nif n<20:\n    for i in range(1,n):\n        for j in range(1,n):\n            a[i].append(mex[a[i-1][j]][a[i][j-1]])\n    for i in range(n):\n        for j in range(n):\n            ans[a[i][j]]+=1\n    print((*ans))\n    return\n\n\nfor i in range(1,5):\n    for j in range(1,n):\n        a[i].append(mex[a[i-1][j]][a[i][j-1]])\n\nfor i in range(5,n):\n    for j in range(1,5):\n        a[i].append(mex[a[i-1][j]][a[i][j-1]])\n\nfor i in range(5):\n    for j in range(n):\n        ans[a[i][j]]+=1\n        ans[a[j][i]]+=1\n\nfor i in range(5):\n    for j in range(5):ans[a[i][j]]-=1\n\n\nfor j in range(4,n):\n    ans[a[4][j]]+=n-j-1\n    ans[a[j][4]]+=n-j-1\nans[a[4][4]]-=n-5\nprint((*ans))\n\n\n"]