["k = int(input())\n\nimport queue\n\nque = queue.Queue()\n\nfor i in range(1, 10):\n    que.put(i)\n\nfor i in range(1, k + 1):\n    ans = que.get()\n    keta1 = ans % 10\n    if keta1 == 0:\n        append_list = [ans * 10, ans * 10 + 1]\n    elif keta1 == 9:\n        append_list = [ans * 10 + 8, ans * 10 + 9]\n    else:\n        append_list = [ans * 10 + keta1 - 1, ans * 10 + keta1, ans * 10 + keta1 + 1]\n    for ite in append_list:\n        que.put(ite)\nprint(ans)", "k=int(input())\nL=[]\ndef f(d,now,L):\n  L.append(now)\n  \n  if d==10:\n    return\n  \n  for j in range(-1,2):\n    v=now%10+j\n    if 0<=v<=9:\n      f(d+1,now*10+v,L)\n\nfor l in range(1,10):\n  f(1,l,L)\nL.sort()\nprint((L[k-1]))\n\n", "k = int(input())\nmaximum = 3234566667\nlst = list(range(1, 10))\nfrom collections import deque\nque = deque()\nfor i in range(1, 10):\n    que.append(i)\n    while que:\n        now = que.pop()\n        if now >= maximum:  continue\n        for j in range(max(0, now%10-1), min(10, now%10+2)):\n            lst.append(now*10+j)\n            que.append(now*10+j)\nlst.sort()\nprint((lst[k-1]))\n", "import sys\nk = int(input())\nlst = [[0]*10 for i in range(10)]\nfor i in range(10):\n  lst[0][i] = 1\nl_sum = [9]  \n\n\nfor i in range(1,10):\n  s = 0\n  for j in range(10):\n    if j == 0:\n      lst[i][j] = lst[i-1][j] + lst[i-1][j+1]\n    elif j == 9:\n      lst[i][j] = lst[i-1][j] + lst[i-1][j-1] \n    else:\n      lst[i][j] = lst[i-1][j-1] + lst[i-1][j] + lst[i-1][j+1] \n      \n    if j !=0:\n      s += lst[i][j]\n  l_sum.append(s+l_sum[-1])\n    \n\n#\u8868\u3092\u9006\u304b\u3089\u8fbf\u3063\u3066\u3044\u304f\u3001\u3055\u3089\u306b\u624b\u76f4\u3057\ni = 0\nif k < l_sum[0]:\n  print(k)\n  return\nelse:\n  while True:\n    if k < l_sum[i]:\n      break\n    i += 1\n  k = k - l_sum[i-1]\n   \n  ans = []\n  for j in reversed(list(range(0, i+1))):\n    \n    if j == i:\n      p = 1\n      while True:\n        if k - lst[j][p] <= 0:\n          ans.append(p)\n          break\n        else:\n          k -= lst[j][p]\n          p += 1\n          \n    else:\n      if p == 0:\n        if k <= lst[j][p]:\n          ans.append(p)\n        else:\n          k -= lst[j][p]\n          p += 1\n          ans.append(p)\n          \n      elif p == 9:\n        if k <= lst[j][p-1]:\n          p = p-1\n          ans.append(p)\n        else:\n          k -= lst[j][p-1]\n          ans.append(p)\n          \n      else:\n        if k <= lst[j][p-1]:\n          p = p-1\n          ans.append(p)\n        else:\n          k -= lst[j][p-1]\n          if k <= lst[j][p]:\n            ans.append(p)\n          else:\n            k -= lst[j][p]\n            p = p+1\n            ans.append(p)\n              \nl_s = [str(q) for q in ans]\nprint((''.join(l_s)))\n", "K=int(input())\nimport queue\nq=queue.Queue()\nfor i in range(1,10):\n  q.put(i)\nfor j in range(1,K+1):\n  x=q.get(j)\n  if x%10!=0:\n    q.put(10*x+x%10-1)\n  q.put(10*x+x%10)\n  if x%10!=9:\n    q.put(10*x+x%10+1)\nprint(x)", "from collections import deque\nk = int(input())\n\nq = deque()\nfor i in range(1, 10):\n    q.append(i)\ncnt = 0\nwhile True:\n    a = q.popleft()\n    cnt += 1\n    if cnt == k:\n        print(a)\n        return\n    b = a % 10\n    for i in (-1, 0, 1):\n        if 0 <= b + i <= 9:\n            q.append(a*10 + b+i)", "#!/usr/bin/env python3\n\ndef solver(d, v, a):\n  a.append(v)\n  if d == 10:\n    return\n\n  for i in range(-1, 2):\n    add = (v % 10) + i;\n    if add < 0 or 9 < add:\n      continue\n    solver(d + 1, v * 10 + add, a)\n\ndef main():\n  k = int(input())\n\n  a = []\n  for i in range(1, 10):\n    solver(1, i, a)\n  a.sort();\n\n  print((a[k - 1]))\n\ndef __starting_point():\n  main()\n\n__starting_point()", "K = int(input())\n\ndef list2int(digits):\n    return int(\"\".join(map(str, digits)))\n\ndef int2list(n):\n    return list(map(int, str(n)))\n\ndef search(digits):\n    ret = []\n    v = digits[-1]\n    for d in [-1, 0, 1]:\n        if 0 <= v+d <= 9:\n            ret.append(list2int(digits + [v+d]))\n    return(ret)\n\nresult = list(range(1, 9+1))\n\ni = 0\nwhile len(result) < K:\n    digits = int2list(result[i])\n    result.extend(search(digits))\n    i += 1\n\nprint((result[K-1]))\n", "from sys import setrecursionlimit\nsetrecursionlimit(10 ** 5)\nk = int(input())\n\ndef dfs(d, val, alls):\n    alls.append(val)\n    if d == 10:\n        return\n\n    for i in range(-1, 2):\n        a = val % 10 + i\n        if a >= 0 and a <= 9:\n            dfs(d + 1, val * 10 + a, alls)\n\n\nalls = list()\nfor i in range(1, 10):\n    dfs(1, i, alls)\nalls.sort()\nprint((alls[k-1]))\n", "k=int(input())\nque=[i for i in range(1,10)]\n# print(que)\nfor i in range(k):\n  now=que.pop(0)\n  too=now%10\n\n  if too!=0:\n    que.append(now*10+too-1)\n\n  que.append(now*10+too)\n\n  if too!=9:\n    que.append(now*10+too+1)\n\nprint(now)", "import queue\nK = int(input())\nq = queue.Queue()\nfor i in range(1, 10):\n    q.put(i)\n\nfor _ in range(K):\n    x = q.get()\n    r = x%10\n    y = 10*x+r\n    if r != 0: q.put(y-1)\n    q.put(y)\n    if r != 9: q.put(y+1)\n\nprint(x)", "from collections import deque\nk=int(input())\nd=deque()\nfor i in range(1,10):\n    d.append(i)\nfor i in range(k-1):\n    x=d.popleft()\n    if x%10!=0:\n        d.append(10*x+(x%10)-1)\n    d.append(10*x+(x%10))\n    if x%10!=9:\n        d.append(10*x+(x%10)+1)\nprint(d.popleft())", "import collections\nK = int(input())\nls = [1,2,3,4,5,6,7,8,9]\ndeq = collections.deque(ls)\ni = 0\nwhile i != K:\n    x = deq.popleft()\n    if x % 10 != 0:\n        deq.append(10*x+(x%10)-1)\n    deq.append(10*x+(x%10))\n    if x % 10 != 9:\n        deq.append(10*x+(x%10)+1)\n    i += 1\nprint(x)", "#!/usr/bin/env python3\nfrom heapq import *\n\na = [*list(range(1, 10))]\nheapify(a)\ni = 0\nk = int(input())\nc = 0\nwhile True:\n    t = str(heappop(a))\n    i += 1\n    if i == k:\n        break\n    if t[-1] != \"0\":\n        heappush(a, int(t + str(int(t[-1]) - 1)))\n    heappush(a, int(t + t[-1]))\n    if t[-1] != \"9\":\n        heappush(a, int(t + str(int(t[-1]) + 1)))\nprint(t)\n", "from collections import deque\nk = int(input())\nD = deque()\nfor i in range(1, 10):\n    D.append(i)\n\n\ndef dfs(d, val, al):\n    al.append(val)\n    if d == 10:\n        return\n    r = val % 10\n    for i in range(-1, 2):\n        if 0 <= r + i <= 9:\n            dfs(d + 1, val * 10 + r + i, al)\n\n\nal = list()\nfor i in range(1, 10):\n    dfs(1, i, al)\n\nal.sort()\nprint((al[k - 1]))\n", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    k = i_input()\n    q = deque([1,2,3,4,5,6,7,8,9])\n    for _ in range(k):\n        ans = x = q.popleft()\n        x0 = x%10\n        if x0 >= 1:\n            q.append(x*10 + x0 - 1)\n        q.append(x*10 + x0)\n        if x0 <= 8:\n            q.append(x*10 + x0 + 1)\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import deque\n\nk=int(input())\nd=deque()\nfor i in range(1,10):\n    d.append(i)\n\nfor i in range(1,k):\n    v=d.popleft()\n    s=v%10\n    if s>0:\n        d.append(10*v+s-1)\n    d.append(10*v+s)\n    if s<9:\n        d.append(10*v+s+1)\n    \nprint(d[0])", "k = int(input())\nlun = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ni = 0\nwhile len(lun) < 10**5:\n    if lun[i] % 10 == 0:\n        lun.append(lun[i] * 10 +lun[i] % 10 - 0)\n        lun.append(lun[i] * 10 +lun[i] % 10 + 1)\n    elif lun[i] % 10 == 9:\n        lun.append(lun[i] * 10 +lun[i] % 10 - 1)\n        lun.append(lun[i] * 10 +lun[i] % 10 - 0)\n    else:\n        lun.append(lun[i] * 10 +lun[i] % 10 - 1)\n        lun.append(lun[i] * 10 +lun[i] % 10 - 0)\n        lun.append(lun[i] * 10 +lun[i] % 10 + 1)\n    i += 1\nprint(lun[k-1])", "import bisect\n\nk = int(input())\n\ndef runrun(n):\n    str_n = str(n)\n    for i in range(len(str_n)-1):\n        if abs(int(str_n[i]) - int(str_n[i+1])) > 1:\n            return False\n    return True\n\ndef build_runrun(d):\n    r = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n    ans = []\n    for i in r:\n        if i == \"0\":\n            continue\n        queue = [[i,1,i]]\n        while queue != []:\n            q = queue.pop(0)\n            if q[1] > d:\n                continue\n            if q[1] == d:\n                bisect.insort(ans,int(q[2]))\n                continue\n\n            queue.append([q[0],q[1]+1,q[2]+q[0]])\n\n            low = int(q[0])-1\n            if low >= 0:\n                queue.append([str(low),q[1]+1,q[2]+str(low)])\n            high = int(q[0])+1\n            if high < 10:\n                queue.append([str(high),q[1]+1,q[2]+str(high)])\n\n    return ans\n\nrun = []\nd = 1\nwhile len(run) < k:\n    run.extend(build_runrun(d))\n    d+=1\n\nprint((run[k-1]))\n", "N = int(input()) + 1\nAns = []\ndef dfs(depth, p):\n    if depth==0:\n        Ans.append(p)\n        if len(Ans) == N:\n            print(p)\n            return\n        return\n    if p!=0:\n        for digit in range(max(0, p%10-1), min(10, p%10+2)):\n            dfs(depth-1, p*10+digit)\n    else:\n        for digit in range(10):\n            dfs(depth-1, p*10+digit)\ndfs(10, 0)\n", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf, log10\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nk = int(input())\n\ntmp = deque(list(range(1, 10)))\nres = 0\n\nfor i in range(k - 1):\n    x = tmp.popleft()\n    if x % 10 == 0:\n        tmp.append(10 * x + x % 10)\n        tmp.append(10 * x + x % 10 + 1)\n    elif x % 10 == 9:\n        tmp.append(10 * x + x % 10 - 1)\n        tmp.append(10 * x + x % 10)\n    else:\n        tmp.append(10 * x + x % 10 - 1)\n        tmp.append(10 * x + x % 10)\n        tmp.append(10 * x + x % 10 + 1)\nres = tmp.popleft()\n\nprint(res)\n", "K = int(input())\n\nfrom collections import deque\nq = deque(list(range(1, 10)))\n\nans = 0\nnum = 0\nfor i in range(K):\n  num = q.popleft()\n  ans = num\n  if num % 10 != 0:\n    q.append(num * 10 + (num % 10 - 1))\n  q.append(num * 10 + num % 10)\n  if num % 10 != 9:\n    q.append(num * 10 + (num % 10 + 1))\n    \nprint(ans)", "from collections import deque\n\nK = int(input())\nq = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nfor i in range(K):\n    runrun = q.popleft()\n    rem = runrun % 10\n    if rem == 0:\n        q.append(runrun * 10)\n        q.append(runrun * 10 + rem + 1)\n    elif rem == 9:\n        q.append(runrun * 10 + rem - 1)\n        q.append(runrun * 10 + rem)\n    else:\n        q.append(runrun * 10 + rem - 1)\n        q.append(runrun * 10 + rem)\n        q.append(runrun * 10 + rem + 1)\n\nprint(runrun)\n", "# -*- coding: utf-8 -*-\nimport sys\nfrom collections import deque, defaultdict, namedtuple\nimport heapq\nfrom math import sqrt, factorial, gcd, ceil, atan, pi\ndef input(): return sys.stdin.readline()[:-1] # warning not \\n\n# def input(): return sys.stdin.buffer.readline()[:-1] # warning bytes\n# def input(): return sys.stdin.buffer.readline().strip() # warning bytes\n# def input(): return sys.stdin.buffer.readline().decode('utf-8').strip()\nimport string\nimport operator\nimport random\n# string.ascii_lowercase\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nMOD = int(1e9)+7\nINF = float('inf')\n\ndef print_lines(data):\n    sys.stdout.write('\\n'.join((str(x) for x in data)))\n\n\ndef solve():\n    n = int(input())\n    q = deque([x for x in range(1,10)])\n    cur = 0\n    while n:\n        cur = q.popleft()\n\n        last = cur % 10\n        if last == 0:\n            q.append(cur * 10)\n            q.append(cur * 10 + 1)\n        elif last == 9:\n            q.append(cur * 10 + last - 1)\n            q.append(cur * 10 + last)\n        else:\n            q.append(cur * 10 + last - 1)\n            q.append(cur * 10 + last)\n            q.append(cur * 10 + last + 1)\n\n        n -= 1\n    print(cur)\n\n\n    \n\nT = 1\n# T = int(input())\nfor case in range(1,T+1):\n    ans = solve()\n\n\n\"\"\"\n\ndp[num_changes][blue_placed]\n\n\nabba\n\n12123456789\n\n\n\"\"\"\n", "k = int(input())\n\nans = 1\n\ndef next(n):\n    nStr = list(map(int, list(str(n))))\n\n    r = len(nStr)-1\n    while r > 0:\n        if nStr[r] <= nStr[r-1] and not (nStr[r-1] == 9 and nStr[r] == 9):\n            break\n        r -= 1\n\n    if r == 0 and nStr[0] == 9:\n        nStr = [1] + [0] * len(nStr)\n    else:\n        extra = len(nStr)-1-r\n        nStr = nStr[:r] + [nStr[r]+1]\n\n        for _ in range(extra):\n            nStr.append(max(0, nStr[-1]-1))\n\n    return int(\"\".join(map(str, nStr)))\n\nfor i in range(k-1):\n    ans = next(ans)\n\nprint(ans)", "# import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# import heapq\n# from collections import deque\n\nK = int(input())\n# S = input()\n# n, *a = map(int, open(0))\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\n# def gcd_list(numbers):\n#     return reduce(math.gcd, numbers)\n\n# if gcd_list(A) > 1:\n#     print(\"not coprime\")\n#     return\n\n# \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\u6e96\u5099\n#MAXN = 10**6+10\n#sieve = [i for i in range(MAXN+1)]\n#p = 2\n#while p*p <= MAXN:\n#    if sieve[p] == p:\n#        for q in range(2*p, MAXN+1, p):\n#            if sieve[q] == q:\n#                sieve[q] = p\n#    p += 1\n\ncand = [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\nfor i in range(9):\n    tmp = []\n    for val in cand[-1]:\n        if str(val)[-1] != \"0\":\n            tmp.append(val * 10 + int(str(val)[-1]) - 1)\n        tmp.append(val * 10 + int(str(val)[-1]))\n        if str(val)[-1] != \"9\":\n            tmp.append(val * 10 + int(str(val)[-1]) + 1)\n    cand.append(tmp)\n        \nans = []\nfor l in cand:\n    for i in l:\n        ans.append(i)\n\nans.sort()\nprint(ans[K - 1])", "from collections import deque\n\nk = int(input())\n\n# [1, 2, 3, 4, .. 9]\nque = deque([i for i in range(1, 10, 1)])\n\nfor i in range(k):\n    # smollest elements in que\n    x = que.popleft()\n\n    # 0's next must be 1 or 0\n    if x % 10 == 0:\n        que.append(x * 10)\n        que.append(x * 10 + 1)\n    # 9's next must be 8 or 9\n    elif x % 10 == 9:\n        que.append(x * 10 + 8)\n        que.append(x * 10 + 9)\n    # others are remain or remain-1 or remain+1\n    else :\n        que.append(x * 10 + x % 10 - 1)\n        que.append(x * 10 + x % 10)\n        que.append(x * 10 + x % 10 + 1)\n\nprint(x)\n", "from collections import deque\n\nK=int(input())\nq=deque([i for i in range(1,10)])\nfor _ in range(K-1):\n  x=deque.popleft(q)\n  a=x%10\n  if a!=0 and a!=9:\n    deque.append(q,x*10+a-1)\n    deque.append(q,x*10+a)\n    deque.append(q,x*10+a+1)\n  elif a==0:\n    deque.append(q,x*10)\n    deque.append(q,x*10+1)\n  else:\n    deque.append(q,x*10+8)\n    deque.append(q,x*10+9)\nprint(deque.popleft(q))", "def main():\n    k=int(input())\n    sm=9\n    d={}\n    #d\u306ekey(d,n)\u306f\u59cb\u3081\u306e\u6570\u5b57n\u3067d\u6841\u306e\u30e9\u30f3\u30e9\u30f3\u6570(str)\u306e\u30ea\u30b9\u30c8\u3068\u914d\u5217\u9577\u3092\u4e0e\u3048\u308b\n    lunlun=[i for i in range(1,10)]\n    for i in range(10):\n        d[(1,i)]=([str(i)],1)\n    dig=2\n    while sm<k:\n        for i in range(10):\n            out=[]\n            length=0\n            for j in (-1,0,1):\n                if i+j<0 or i+j>9 : continue\n                out+=[str(i)+x for x in d[(dig-1,i+j)][0]]\n                length+=d[(dig-1,i+j)][1]\n            d[(dig,i)]=(out,length)\n            if i>=1:\n                sm+=length\n                lunlun+=out\n        dig+=1\n    print(lunlun[k-1])\n            \n        \nmain()", "import queue\ndef resolve():\n    n = int(input())\n    q = queue.Queue()\n    for i in range(1,10):\n        q.put(i)\n    for _ in range(n):\n        x = q.get()\n        if x%10!=0:\n            q.put(10*x+(x%10)-1)\n        q.put(10*x+(x%10))\n        if x%10!=9:\n            q.put(10*x+(x%10)+1)\n    print(x)\nresolve()", "from collections import deque\n\ndef main():\n    K = int(input())\n    q = deque()\n    for i in range(1,10,1):\n        q.append(i)\n    list = []\n    while (len(list) <= 100002):\n        v = q.popleft()\n        list.append(v)\n        amari = v%10\n        if amari != 0 and amari != 9:\n            q.append((v*10)+amari-1)\n            q.append((v*10)+amari)\n            q.append((v*10)+amari+1)\n        elif amari == 0:\n            q.append((v*10)+amari)\n            q.append((v*10)+amari+1)\n        else:\n            q.append((v*10)+amari-1)\n            q.append((v*10)+amari)\n\n    return list[K-1]\n\nprint((main()))\n", "def main():\n    def rec(d: int, val: int, all: list):\n        all.append(val)\n        if d == 10:\n            return\n        for j in range(-1, 2):\n            add = (val % 10) + j\n            if add >= 0 and add <= 9:\n                rec(d + 1, val*10 + add, all)\n    \n    k = int(input())\n    \n    all = []\n    for v in range(1, 10):\n        rec(1, v, all)\n    print(sorted(all)[k-1])\n\ndef __starting_point():\n    main()\n__starting_point()", "#D - Lunlun Number\nimport sys\nsys.setrecursionlimit(10**6+1)\nK = int(input())\n\nans = []\ndef dfs(A):\n    if len(A)>=2:\n        A_str = [str(i) for i in A] \n        A_str = ''.join(A_str)\n        ans.append(int(A_str))\n    if len(A) == 10:\n        return\n    if len(A) >= 1:\n        #\u524d\u306e\u5024\u304c0,9\u306e\u3068\u304d\u306f\u7bc4\u56f2\u304c\u9055\u3046   \n        if A[-1] == 9:\n            sta = 8\n            fin = 9+1\n        elif A[-1] == 0:\n            sta = 0\n            fin = 1+1\n        else:\n            sta = A[-1] - 1\n            fin = A[-1] + 1 + 1\n        for v in range(sta,fin):\n            A.append(v)\n            dfs(A)\n            A.pop()\n    else:\n        for v in range(1,9+1):\n            A.append(v)\n            dfs(A)\n            A.pop()\ndfs([])\nans = sorted(ans,reverse = False)\nif K<=9:\n    print(K)\nelse:\n    print(ans[K-10])", "k = int(input())\nlun = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ni = 0\nwhile len(lun) < k:\n    if lun[i] % 10 == 0:\n        lun.append(lun[i] * 10 + lun[i] % 10 - 0)\n        lun.append(lun[i] * 10 + lun[i] % 10 + 1)\n    elif lun[i] % 10 == 9:\n        lun.append(lun[i] * 10 + lun[i] % 10 - 1)\n        lun.append(lun[i] * 10 + lun[i] % 10 - 0)\n    else:\n        lun.append(lun[i] * 10 + lun[i] % 10 - 1)\n        lun.append(lun[i] * 10 + lun[i] % 10 - 0)\n        lun.append(lun[i] * 10 + lun[i] % 10 + 1)\n    i += 1\nprint(lun[k-1])", "from collections import deque\n\nk=int(input())\n\nlunlun=deque(i for i in range(1,10))\nfor _ in range(k-1):\n  p=lunlun.popleft()\n  if p%10!=0:\n    lunlun.append(10*p+p%10-1)\n  lunlun.append(10*p+p%10)\n  if p%10!=9:\n    lunlun.append(10*p+p%10+1)\nprint(lunlun.popleft())", "from collections import deque\nk = int(input())\nans = []\nq = deque([i for i in range(1, 10)])\nfor i in range(k):\n    x = q.popleft()\n    ans.append(x)\n    if x%10 != 0:\n        q.append(10*x + (x%10) - 1)\n    q.append(10*x + (x%10))\n    if x%10 != 9:\n        q.append(10*x + (x%10) + 1)\n \nprint((ans[k-1]))\n", "def dfs(d:int, v:int, all:list):\n    if d==11:\n        return\n    all.append(v)\n    if list(str(v))[-1]==\"0\":\n        dfs(d+1,10*v+int(list(str(v))[-1])+1,all)\n        dfs(d+1,10*v+int(list(str(v))[-1]),all)\n    elif list(str(v))[-1]==\"9\":\n        dfs(d+1,10*v+int(list(str(v))[-1])-1,all)\n        dfs(d+1,10*v+int(list(str(v))[-1]),all)\n    else:\n        dfs(d+1,10*v+int(list(str(v))[-1])+1,all)\n        dfs(d+1,10*v+int(list(str(v))[-1]),all)\n        dfs(d+1,10*v+int(list(str(v))[-1])-1,all)\nk=int(input())\nall=[]\nfor i in range(1,10):\n    dfs(1,i,all)\nall.sort()\nprint((all[k-1]))\n", "K = int(input())\nA = [1,2,3,4,5,6,7,8,9]\n\nfor i in A:\n  if K<len(A):\n    break\n  x = i%10\n  for j in range(max(x-1,0),min(x+2,10)):\n    A.append(10*i+j)\n\nprint(A[K-1])", "k = int(input())\n\nimport queue\n\nque = queue.Queue()\n\nfor i in range(1, 10):\n    que.put(i)\n\nfor i in range(1, k + 1):\n    ans = que.get()\n    keta1 = ans % 10\n    if keta1 == 0:\n        append_list = [ans * 10, ans * 10 + 1]\n    elif keta1 == 9:\n        append_list = [ans * 10 + 8, ans * 10 + 9]\n    else:\n        append_list = [ans * 10 + keta1 - 1, ans * 10 + keta1, ans * 10 + keta1 + 1]\n    for item in append_list:\n        que.put(item)\nprint(ans)", "k = int(input())\n# \u3084\u3063\u3071\u308a\u4e00\u65e6\u306fglobal\u3067\u66f8\u3053\ntotal_ls = []\ndef dfs(A):\n    if int(A) > 3234566667:\n        return\n    nonlocal total_ls\n    total_ls.append(int(A))\n    last = int(A[-1])\n    if last == 0:\n        nex = [1,0]\n    elif last == 9:\n        nex = [8,9]\n    else:\n        nex = [last-1,last,last+1]\n    for n in nex:\n        A += str(n)\n        dfs(A)\n        A = A[:-1]\n\nfor i in range(1,10):\n    dfs(str(i))\ntotal_ls.sort()\nprint((total_ls[k-1]))\n\n\n    \n", "from collections import deque\n\ndef main():\n  N=int(input())\n  for n in range(N):\n    x=ans.popleft()\n    if x%10!=0:\n      ans.append(10*x+(x%10)-1) # x equal y-1\n    ans.append(10*x+(x%10)) # x equal y\n    if x%10!=9:\n      ans.append(10*x+(x%10)+1) # x equal y+1\n  print(x)\n  \ndef __starting_point():\n  ans=deque([1,2,3,4,5,6,7,8,9])\n  main()\n\n__starting_point()", "from collections import deque\nD = deque()\nfor i in range(1, 10):\n    D.append(i)\nfor _ in range(int(input())):\n    x = D.popleft()\n    y = x % 10\n    if y != 0:\n        D.append(10 * x + y - 1)\n    D.append(10 * x + y)\n    if y != 9:\n        D.append(10 * x + y + 1)\nprint(x)\n", "from collections import deque\nk=int(input())\nque=deque(list(range(1,10)))\nfor i in range(k):\n  a=que.popleft()\n  b=a%10\n  l=10*a+b-1\n  c=l+1\n  r=c+1\n  if b!=0:\n    que.append(l)\n  que.append(c)\n  if b!=9:\n    que.append(r)\nprint(a)", "from sys import setrecursionlimit\nsetrecursionlimit(10**8)\nk = int(input())\nif k <= 10:\n    print(k)\nelse:\n    def dp(i):\n        if i == 10:\n            return 10\n        N = str(dp(i - 1))\n        ans = 0\n        l = len(N)\n        for j, n in enumerate(N[::-1]):\n\n            if j == l - 1:\n                if int(n) != 9:\n                    x = int(n) + 1\n                    ans = 0\n                    l -= 1\n                    while x != 0 and l >= 0:\n                        ans += x * 10 ** l\n                        x -= 1\n                        l -= 1\n                    return ans\n                else:\n                    return 10 ** l\n\n            if n == \"9\":\n                continue\n\n            if int(N[l - j - 2]) - int(n) >= 0:\n                ans = int(N[: l - j - 1]) * 10 ** (j + 1)\n                l = j\n                x = int(n) + 1\n                while x != 0 and l >= 0:\n                        ans += x * 10 ** l\n                        x -= 1\n                        l -= 1\n                return ans\n    print((dp(k)))\n", "import bisect\n\nk = int(input())\n\ndef runrun(n):\n    str_n = str(n)\n    for i in range(len(str_n)-1):\n        if abs(int(str_n[i]) - int(str_n[i+1])) > 1:\n            return False\n    return True\n\ndef build_runrun(d):\n    r = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n    ans = []\n    for i in r:\n        if i == \"0\":\n            continue\n        queue = [[i,1,i]]\n        while queue != []:\n            q = queue.pop(0)\n            if q[1] > d:\n                continue\n            if q[1] == d:\n                bisect.insort(ans,int(q[2]))\n                continue\n\n            queue.append([q[0],q[1]+1,q[2]+q[0]])\n\n            low = int(q[0])-1\n            if low >= 0:\n                queue.append([str(low),q[1]+1,q[2]+str(low)])\n            high = int(q[0])+1\n            if high < 10:\n                queue.append([str(high),q[1]+1,q[2]+str(high)])\n\n    return ans\n\nrun = []\nd = 1\nwhile len(run) < k:\n    run.extend(build_runrun(d))\n    d+=1\n\nprint((run[k-1]))\n", "from collections import deque\nk=int(input())\nnum=[]\n\ndef dfs(lun):\n  #print(lun)\n  num.append(lun)\n  if lun>3234566667:\n    return\n  now=lun%10\n  for i in [-1,0,1]:\n    if 0<=now+i<=9:\n      dfs(lun*10+now+i)\n\nfor i in range(1,10):\n  dfs(i)\nnum.sort()\nprint((num[k-1]))\n#print(num[0:k])\n", "from itertools import accumulate\nK=int(input())\na0,a1,a2,a3,a4,a5,a6,a7,a8,a9=1,1,1,1,1,1,1,1,1,1\nAlist=[[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9]]\nsumation=9\nsumations=[0,9]\ndigit=0\nans=[]\nwhile sumation<K:\n    an0=a0+a1\n    an1=a0+a1+a2\n    an2=a1+a2+a3\n    an3=a2+a3+a4\n    an4=a3+a4+a5\n    an5=a4+a5+a6\n    an6=a5+a6+a7\n    an7=a6+a7+a8\n    an8=a7+a8+a9\n    an9=a8+a9\n    a0,a1,a2,a3,a4,a5,a6,a7,a8,a9=an0,an1,an2,an3,an4,an5,an6,an7,an8,an9\n    sumation+=a1+a2+a3+a4+a5+a6+a7+a8+a9\n    digit+=1\n    Alist.append([a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])\n    sumations.append(sumation)\nK-=sumations[-2]\nfor num in range(9):\n    l=list(accumulate(Alist[-1]))\n    if l[num]-l[0]<K<=l[num+1]-l[0]:\n        K-=l[num]-l[0]\n        break\nans.append(str(num+1))\nfor i in range(digit):\n    for n in range(max(0,num),min(num+3,10)):\n        K-=Alist[-i-2][n]\n        if K<=0:\n            K+=Alist[-i-2][n]\n            break\n    num=n-1\n    ans.append(str(num+1))\nprint(int(''.join(ans)))", "from collections import deque\n\ndef main():\n    k = int(input())\n    l = list(range(1, 10))\n    Q = deque(l)\n    for _ in range(k):\n        q = Q.popleft()\n        # \u57fa\u6e96-1\n        if q % 10 != 0:\n            Q.append(10*q+q%10-1)\n        # \u57fa\u6e96\n        Q.append(10*q+q%10)\n        # \u57fa\u6e96 + 1\n        if q % 10 != 9:\n            Q.append(10*q+q%10+1)\n    print(q)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#ABC161\n\nk = int(input())\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nwhile(True):\n    if k <= len(a):\n        print((a[k-1]))\n        return\n    k -= len(a)\n    b = list()\n    a, b = b, a\n    for x in b:\n        for i in range(-1, 2):\n            d = x%10 + i\n            if d<0 or d>9:\n                continue\n            nx = x*10 + d\n            a.append(nx)\n", "import heapq\nK = int(input())\ndef NewLun(strX):\n    if strX[-1] != '0' and strX[-1] != '9':\n        intX0 = int(strX[-1])\n        heapq.heappush(Lun,int(strX + str(intX0+1)))\n        heapq.heappush(Lun,int(strX + str(intX0)))\n        heapq.heappush(Lun,int(strX + str(intX0-1)))\n    elif strX[-1] == '0':\n        heapq.heappush(Lun,int(strX + '0'))\n        heapq.heappush(Lun,int(strX+'1'))\n    else:\n        heapq.heappush(Lun,int(strX +'9'))\n        heapq.heappush(Lun,int(strX+'8'))\nLun = [i for i in range(1,10)]\nheapq.heapify(Lun)\nfor _ in range(K):\n    Ans = heapq.heappop(Lun)\n    NewLun(str(Ans))\nprint(Ans)", "import sys\n\nsys.setrecursionlimit(10 ** 5)\n\n\ndef dfs(v):\n    ans.append(v)\n    if v > 1_000_000_000:\n        return\n    for d in range(10):\n        if abs(d - v % 10) <= 1:\n            nv = v * 10 + d\n            dfs(nv)\n\n\nK = int(input())\nans = []\n[dfs(i) for i in range(1, 10)]\nprint((sorted(ans)[K - 1]))\n", "L=[1]+[0]*10\nfor _ in range(1,int(input())):\n for i in range(10):\n  if(L[i]-L[i+1]<1 or sum(L[i+1:])<1)and L[i]<9:\n   for j in range(i+1):L[j]=max(L[i]+1-i+j,0)\n   break\nprint(sum(l*10**i for i,l in enumerate(L)))", "K = int(input())\na = []\n\ndef DFS(n):\n    if n > 3234566667:\n        return\n    a.append(n)\n    l = n % 10\n    if l == 0:\n        DFS(10 * n)\n        DFS(10 * n + 1)\n    elif l == 9:\n        DFS(10 * n + 9)\n        DFS(10 * n + 8)\n    else:\n        DFS(10 * n + l)\n        DFS(10 * n + l + 1)\n        DFS(10 * n + l - 1)\n\nfor i in range(1, 10):\n    DFS(i)\n\na = sorted(a)\nprint(a[K-1])", "from queue import Queue as Q\nk = int(input())\nq = Q()\n[q.put(i) for i in range(1, 10)]\n\nfor i in range(k):\n    x = q.get()\n    if x % 10 != 0:\n        q.put(10*x+(x % 10)-1)\n    q.put(10*x+(x % 10))\n    if x % 10 != 9:\n        q.put(10 * x+(x % 10)+1)\n\nprint(x)\n", "import sys\ninput = sys.stdin.readline\n\n#n = int(input())\n#l = list(map(int, input().split()))\n\n'''\na=[]\nb=[]\nfor i in range():\n    A, B = map(int, input().split())\n    a.append(A)   \n    b.append(B)'''\n\nk=int(input())\n\nfrom queue import Queue\nque=Queue()\nfor i in range(1,10):\n    que.put(str(i))\ncnt=0\nwhile True:\n    a=que.get()\n    cnt+=1\n    #print(a)\n    if cnt==k:\n        print(a)\n        return\n    if a[-1]==\"0\":\n        que.put(a+\"0\")\n        que.put(a+\"1\")\n    elif a[-1]==\"9\":\n        que.put(a+\"8\")\n        que.put(a+\"9\")\n    else:\n        #ac=int(a[-1])\n        que.put(a+chr(ord(a[-1])-1))\n        que.put(a+a[-1])\n        que.put(a+chr(ord(a[-1])+1))\n", "from collections import deque\n\nN = int(input())\n\nQ = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nfor i in range(N - 1):\n    x = Q.popleft()\n    if x % 10 != 0:\n        y = 10 * x + x % 10 - 1\n        Q.append(y)\n    \n    y = 10 * x + x % 10\n    Q.append(y)\n\n    if x % 10 != 9:\n        y = 10 * x + x % 10 + 1\n        Q.append(y)\n\nans = Q.popleft()\n\nprint(ans)", "# !/usr/bin/env python3\n# from heapq import *\n#\n# a = [*range(1, 10)]\n# heapify(a)\n# i = 0\n# k = int(input())\n# c = 0\n# while True:\n#    t = str(heappop(a))\n#    i += 1\n#    if i == k:\n#        break\n#    if t[-1] != \"0\":\n#        heappush(a, int(t + str(int(t[-1]) - 1)))\n#    heappush(a, int(t + t[-1]))\n#    if t[-1] != \"9\":\n#        heappush(a, int(t + str(int(t[-1]) + 1)))\n# print(t)\n\nfrom collections import deque\n\na = deque(list(range(1, 10)))\nfor _ in range(int(input())):\n    i = a.popleft()\n    m = i % 10\n    i = 10 * i + m\n    if m > 0:\n        a.append(i - 1)\n    a.append(i)\n    if m < 9:\n        a.append(i + 1)\nprint((i // 10))\n", "from collections import deque\nK = int(input())\n\nif K <= 10:\n    print(K)\n\nelse:\n    cnt = 9\n    l = deque(list(range(1,10)))\n    while True:\n        a = l.popleft()\n        a1 = a% 10\n        if a1 != 0:\n            a2 = a*10 + a1 - 1\n            cnt += 1\n            if cnt == K:\n                print(a2)\n                break\n            l.append(a2)\n        \n        a2 = a*10 + a1\n        cnt += 1\n        if cnt == K:\n            print(a2)\n            break\n        l.append(a2)\n\n        if a1 != 9:\n            a2 = a*10 + a1 + 1\n            cnt += 1\n            if cnt == K:\n                print(a2)\n                break\n            l.append(a2)", "import queue\nk=int(input())\nq=queue.Queue()\nfor i in range(1,10):\n    q.put(i)\nlunlun=list(range(1,10))\ncnt=9\n\nwhile cnt<=k:\n    v=q.get()\n    last=v%10\n    if last!=0:\n        new=v*10+last-1\n        q.put(new)\n        lunlun.append(new)\n        cnt+=1\n    new=v*10+last\n    q.put(new)\n    lunlun.append(new)\n    cnt+=1\n    if last!=9:\n        new=v*10+last+1\n        q.put(new)\n        lunlun.append(new)\n        cnt+=1\nprint(lunlun[k-1])", "from collections import deque\nk = int(input())\nD = deque()\nfor i in range(1, 10):\n    D.append(i)\n \nfor _ in range(k):\n    d = D.popleft()\n    r = d % 10\n    if r != 0:\n        D.append(d * 10 + r - 1)\n    D.append(d * 10 + r)\n    if r != 9:\n        D.append(d * 10 + r + 1)\n \nprint(d)", "from collections import deque\nk = int(input())\nD = deque()\nfor i in range(1, 10):\n    D.append(i)\n\nfor _ in range(k):\n    d = D.popleft()\n    r = d % 10\n    if r != 0:\n        D.append(d * 10 + r - 1)\n    D.append(d * 10 + r)\n    if r != 9:\n        D.append(d * 10 + r + 1)\n\nprint(d)", "import sys\n\nsys.setrecursionlimit(10 ** 5)\n\n\ndef dfs(v):\n    if v > 3234566667:\n        return\n    ans.append(v)\n    d = v % 10\n    if d - 1 >= 0:\n        dfs(v * 10 + d - 1)\n    dfs(v * 10 + d)\n    if d + 1 < 10:\n        dfs(v * 10 + d + 1)\n\n\nK = int(input())\nans = []\n[dfs(i) for i in range(1, 10)]\nprint((sorted(ans)[K - 1]))\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Sep 12 22:49:54 2020\n\n@author: liang\n\"\"\"\n\n\"\"\" \n\u3010\u5c0f\u3055\u3044\u3082\u306e\u304b\u3089\u63a2\u7d22\u3000\u21d2\u3000\u30ad\u30e5\u30fc\u3092\u7528\u3044\u308b\u3011\n\u3010\u5e45\u512a\u5148\u63a2\u7d22\u306e\u5fdc\u7528\u3011\n     10 + 1 + 1\n1 => 10 + 1 + 0\n     10 + 1 - 1\n\n10 => 100 + 0 + 1\n      100 + 0 + 0\n      100 + 0 - 1 *\n\"\"\"\n\nfrom collections import deque\n\nK = int(input())\n\nq = deque()\nfor i in range(1,10):\n    q.append(i)\n    \ncnt = 0\nwhile cnt  != K:\n    cnt += 1\n    ans = q.popleft()\n    #print(ans)\n    if ans % 10 != 0:\n        q.append(10*ans + ans%10 - 1)\n    q.append(10*ans + ans%10 )\n    if ans % 10 != 9:\n        q.append(10*ans + ans%10 + 1)\nprint(ans)", "def is_good(mid, key):\n    S = list(map(int, str(mid)))\n    N = len(S)\n    dp = [[[0] * 11 for _ in range(2)] for _ in range(N + 1)]\n    dp[1][1][10] = 1\n    for k in range(1, S[0]):\n        dp[1][1][k] = 1\n    dp[1][0][S[0]] = 1\n    for i in range(1, N):\n        for k in range(1, 11):\n            dp[i + 1][1][k] += dp[i][0][10] + dp[i][1][10]\n        for is_less in range(2):\n            for k in range(10):\n                for l in range(k - 1, k + 2):\n                    if not 0 <= l <= 9 or (not is_less and l > S[i]):\n                        continue\n                    dp[i + 1][is_less or l < S[i]][l] += dp[i][is_less][k]\n    return sum(dp[N][0][k] + dp[N][1][k] for k in range(10)) >= key\n\n\ndef binary_search(bad, good, key):\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if is_good(mid, key):\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nK = int(input())\nprint((binary_search(0, 3234566667, K)))\n", "from collections import deque\nk=int(input())\nd=deque([1,2,3,4,5,6,7,8,9])\nnum=[1,2,3,4,5,6,7,8,9]\nwhile d:\n  now=d.popleft()\n  hitoketa=now%10\n  for i in [-1,0,1]:\n    if 0<=hitoketa+i<=9:\n      nxt=now*10+hitoketa+i\n      if nxt<=3234566667:\n        #print(nxt)\n        num.append(nxt)\n        d.append(nxt)\nnum.sort()\nprint((num[k-1]))\n", "from collections import deque\n\nK = int(input())\n\nd = deque(i for i in range(1, 10))\n\ncount = 0\n\nwhile count != K:\n    x = d.popleft()\n    a = (10 * x) + (x % 10)\n    if x % 10 != 0:\n        d.append(a - 1)\n\n    d.append(a)\n\n    if x % 10 != 9:\n        d.append(a + 1)\n\n    count += 1\n\nprint(x)\n", "k = int(input())\n\ndef make_lunlun(lunlun_lst):\n    ret_lunlun = []\n    for num in lunlun_lst:\n        num_str = str(num)\n        if num_str[-1] != \"0\":\n            num_tmp = num_str + str(int(num_str[-1]) - 1)\n            ret_lunlun.append(int(num_tmp))\n        if num_str[-1] != \"9\":\n            num_tmp = num_str + str(int(num_str[-1]) + 1)\n            ret_lunlun.append(int(num_tmp))\n        num_tmp = num_str + num_str[-1]\n        ret_lunlun.append(int(num_tmp))\n    return ret_lunlun\n\nlunlun_lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nwhile 1:\n    if len(lunlun_lst) < k:\n        k -= len(lunlun_lst)\n        lunlun_lst = make_lunlun(lunlun_lst)\n    else:\n        lunlun_lst.sort()\n        print((lunlun_lst[k - 1]))\n        break\n", "from collections import deque\nk = int(input())\na = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])\nfor i in range(k-1):\n    b = a.popleft()\n    if b%10 != 0: a.append(b*10+b%10-1)\n    a.append(b*10+b%10)\n    if b%10 != 9: a.append(b*10+b%10+1)\nprint(a[0])", "k = int(input())\n\na = [str(i) for i in range(1,10)]\n\ncnt = 9\n\nif k <= 9:\n    print(k)\n    return\nelse:\n    while True:\n        b = a.pop(0)\n        c = int(b)%10\n        d = c+1\n        e = c-1\n        if b[-1] == '0':\n            a.append(str(b)+str(c))\n            a.append(str(b)+str(d))\n            cnt += 2\n        elif b[-1] == '9':\n            a.append(str(b)+str(e))\n            a.append(str(b)+str(c))\n            cnt += 2\n        else:\n            a.append(str(b)+str(e))\n            a.append(str(b)+str(c))\n            a.append(str(b)+str(d))\n            cnt += 3\n        if cnt >= k:\n            break\nprint((a[-(cnt-k+1)]))\n#print(a)\n", "from collections import deque\n\ndef __starting_point():\n\n    k = int(input())\n\n    #\u30eb\u30f3\u30eb\u30f3\u6570\u306e\u30ea\u30b9\u30c8\u3092\u5148\u306b\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\n    d = deque()\n    ans = 0\n    for i in range(1,10):\n        d.append(i)\n    if k <= 9:\n        print(k)\n        return\n\n    cnt = 9\n    while True:\n        x = d.popleft()\n        #print(\"x=\"+str(x))\n        #-1\u3092\u5165\u308c\u308b\n        if x % 10 != 0:\n            tmp = 10*x + (x%10) - 1\n            #print(tmp)\n            d.append(tmp)\n            cnt += 1\n            if cnt >= k:\n                ans = tmp\n                break\n\n        #\u540c\u3058\u6570\u3092\u5165\u308c\u308b\n        tmp = 10*x + (x%10)\n        #print(tmp)\n        d.append(tmp)\n        cnt += 1\n        if cnt >= k:\n            ans = tmp\n            break\n\n        #+1\u3092\u5165\u308c\u308b\n        if x % 10 != 9:\n            tmp = 10*x + (x%10) + 1\n            #print(tmp)\n            d.append(tmp)\n            cnt += 1\n            if cnt >= k:\n                ans = tmp\n                break\n    print(ans)\n\n__starting_point()", "from collections import deque\n\nn = int(input())\nqueue = deque([1,2,3,4,5,6,7,8,9])\n\nfor _ in range(n):\n  ans = queue.popleft()\n  x = ans % 10\n  if x != 0 :\n    queue.append(ans * 10 + x - 1)\n  queue.append(ans * 10 + x)\n  if x != 9 :\n    queue.append(ans * 10 + x + 1)\n    \nprint(ans)", "# coding: utf-8\n# Your code here!\nfrom collections import deque\n\nK=int(input())\nd = deque()\n\nfor i in range(1,10):\n    d.append(i)\n\nfor i in range(1,K):\n    s = d.popleft()\n    v = s%10\n    if v>0:\n        d.append(10*s+v-1)\n    d.append(10*s+v)\n    if v<9:\n        d.append(10*s+v+1)\nprint((d.popleft()))    \n", "K=int(input())\nl=[1,2,3,4,5,6,7,8,9]\nfor i in l:\n  if i%10==0:l+=[i*10,i*10+1]\n  if i%10==9:l+=[i*10+8,i*10+9]\n  if 0<i%10<9:l+=[i*10+(i-1)%10,i*10+i%10,i*10+(i+1)%10]\n  if len(l)>10**5:break\nprint(l[K-1])", "from collections import deque\n\n\ndef main() -> None:\n    k = int(input())\n\n    d = deque(list(range(1, 10)))\n    for _ in range(k):\n        num = d.popleft()\n        if num % 10 != 0:\n            d.append(num*10 + (num%10-1))\n        d.append(num*10 + num%10)\n        if num % 10 != 9:\n            d.append(num*10 + (num%10+1))\n\n    print(num)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import deque\n\nK = int(input())\nqueue = deque([1,2,3,4,5,6,7,8,9])\n\nfor i in range(K):\n    ans = queue.popleft()\n    x = ans % 10\n    if x != 0:\n        queue.append(ans*10 + x - 1)\n    queue.append(ans*10 + x)\n    if x != 9:\n        queue.append(ans*10 + x + 1)\n\nprint(ans)\n\n#\u89e3\u8aac+\u30b3\u30fc\u30c9\u30ab\u30f3\u30cb\u30f3\u30b0AC\n", "k = int(input())\nnums = [1,2,3,4,5,6,7,8,9]\ncnt = 1\n\nfor num in nums:\n    if cnt == k:\n        print(num)\n        return\n    else:\n        if num%10 == 0:\n            nums.append(num*10)\n            nums.append(num*10+1)\n        elif num%10 == 9:\n            nums.append(num*10+8)\n            nums.append(num*10+9)\n        else:\n            nums.append(num*10+num%10-1)\n            nums.append(num*10+num%10)\n            nums.append(num*10+num%10+1)\n    cnt += 1\n\n", "import itertools\n\nK = int(input())\n\ndp = [[0,1,1,1,1,1,1,1,1,1]]\nlunlun_cnt = [9]\n\ni = 1\n\nwhile True:\n    dp.append([0]*10)\n    lunlun_cnt_tmp = 0\n\n    for j in range(10):\n        if j == 0:\n            dp[i][j] = dp[i-1][j] + dp[i-1][j+1]\n        elif j == 9:\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        else:\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i-1][j+1]\n        lunlun_cnt_tmp += dp[i][j]\n    \n    i += 1\n\n    if lunlun_cnt[-1] + lunlun_cnt_tmp >= K:\n        break\n    else:\n        lunlun_cnt.append(lunlun_cnt[-1] + lunlun_cnt_tmp)\n\nif K <= 9:\n    pos = K\n    digit = 0\nelse:\n    pos = K - lunlun_cnt[-1]\n    digit = len(lunlun_cnt)\n\ncnt = 0\nflag = False\n\nketa = [-1,0,1]\n\nfor i in range(9):\n    for keta_shift in itertools.product(keta, repeat=digit):\n        flag2 = False\n        r = i+1\n        for j in range(digit):\n            r += keta_shift[j]\n            if r < 0 or r > 9:\n                flag2 = True\n                break\n        \n        if flag2:\n            continue\n\n        cnt += 1\n        if cnt == pos:\n            flag = True\n            break\n    if flag:\n        break\n\nres = [i+1]\nfor i in range(digit):\n    res.append(res[-1] + keta_shift[i])\n\nprint(''.join(list(map(str,res))))", "from queue import deque\n\nk=int(input())\nque=deque()\nfor i in range(1,10):\n  que.append(i)\nfor i in range(k):\n  now=que.popleft()\n  too=now%10\n\n  if too!=0:\n    que.append(now*10+too-1)\n\n  que.append(now*10+too)\n\n  if too!=9:\n    que.append(now*10+too+1)\n\nprint(now)", "from collections import deque\nk = int(input())\nans = []\nq = deque([i for i in range(1, 10)])\nfor i in range(k):\n    x = q.popleft()\n    ans.append(x)\n    if x%10 != 0:\n        q.append(10*x + (x%10) - 1)\n    q.append(10*x + (x%10))\n    if x%10 != 9:\n        q.append(10*x + (x%10) + 1)\n\nprint(ans[k-1])", "from collections import deque\nK = int(input())\ncount = 0\ntodo = deque(range(1, 10))\nwhile todo:\n    x = todo.popleft()\n    count += 1\n    if count == K:\n        print(x)\n        break\n    i = x % 10\n    if 0 < i:\n        todo.append(x * 10 + i - 1)\n    todo.append(x * 10 + i)\n    if i < 9:\n        todo.append(x * 10 + i + 1)", "from collections import deque\n\nK = int(input())\n\nq = deque()\nfor i in range(1,10):\n    q.append(i)\nans=0\nif K>=10:\n    cnt = 9\n    while len(q)>0:\n        current = q.popleft()\n\n        dn = [-1,0,1]\n        for i in dn:\n            if current%10+i<0 or current%10+i>9 or cnt>=K:\n                continue\n            q.append(current*10+current%10+i)\n            cnt+=1\n    else:\n        ans=current\n\nelse:\n    ans = K\n    \nprint(ans)", "import sys\ninput = lambda: sys.stdin.readline().rstrip()\ninput_nums = lambda: list(map(int, input().split()))\nfrom collections import deque\n\ndef main():\n    K = int(input())\n    # cnt = 0\n    # dq = deque(['1','2','3','4','5','6','7','8','9'])\n    # while cnt < K:\n    #     cnt += 1\n    #     d = dq.popleft()\n    #     a = int(d[-1])\n    #     if a == 0:\n    #         dq.append(d+str(0))\n    #         dq.append(d+str(1))\n    #     elif a == 9:\n    #         dq.append(d+str(8))\n    #         dq.append(d+str(9))\n    #     else:\n    #         for i in range(a-1, a+2):\n    #             dq.append(d+str(i))\n    # print(d)\n\n    runrun_lst = []\n    def rec(num_of_digit, runrun_val):\n        runrun_lst.append(runrun_val)\n        if num_of_digit == 10: return\n        for i in range(-1, 2):\n            add = (runrun_val%10) + i\n            if 0 <= add <= 9: rec(num_of_digit+1, runrun_val*10+add)\n\n    for v in range(1, 10):\n        rec(1, v)\n    runrun_lst.sort()\n    print(runrun_lst[K-1])\n\ndef __starting_point():\n    main()\n__starting_point()", "lun_array=[i for i in range(1,10)]\nk=(int)(input())\n\nnum_array=9\nseed_index=0\nwhile (num_array<k):\n  if lun_array[seed_index]%10!=0:\n    lun_array.append(lun_array[seed_index]*10+lun_array[seed_index]%10-1)\n    num_array+=1\n  lun_array.append(lun_array[seed_index]*10+lun_array[seed_index]%10)\n  num_array+=1\n  if lun_array[seed_index]%10!=9:\n    lun_array.append(lun_array[seed_index]*10+lun_array[seed_index]%10+1)\n    num_array+=1\n  seed_index+=1\n\nprint((lun_array[k-1]))\n", "\nfrom collections import deque\n\nk = int(input())\nq = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nif k <= 9:\n    print(q[k-1])\n    return\n\ni = 9\nwhile 1:\n    a = q.popleft()\n    b = a % 10\n    if b == 0:\n        q.append(a * 10)\n        i += 1\n        if i == k:\n            print(q[-1])\n            return\n        q.append(a * 10 + b + 1)\n        i += 1\n        if i == k:\n            print(q[-1])\n            return\n    elif b == 9:\n        q.append(a * 10 + b - 1)\n        i += 1\n        if i == k:\n            print(q[-1])\n            return\n        q.append(a * 10 + b)\n        i += 1\n        if i == k:\n            print(q[-1])\n            return\n    else:\n        q.append(a * 10 + b - 1)\n        i += 1\n        if i == k:\n            print(q[-1])\n            return\n        q.append(a * 10 + b)\n        i += 1\n        if i == k:\n            print(q[-1])\n            return\n        q.append(a * 10 + b + 1)\n        i += 1\n        if i == k:\n            print(q[-1])\n            return", "from collections import deque\n\nK = int(input())\n\nq = deque()\nfor i in range(1,10):\n    q.append(i)\nans=0\ncnt=0\nwhile cnt<K:\n    cnt+=1\n    current = q.popleft()\n\n    dn = [-1,0,1]\n    for i in dn:\n        if current%10+i<0 or current%10+i>9:\n            continue\n        q.append(current*10+current%10+i)\nelse:\n    ans=current\n    \nprint(ans)", "def dfs(cnt, num, top):\n    if cnt == 10:\n        return\n    v.add(int(num))\n    if top == 0:\n        dfs(cnt+1, \"0\"+num, top)\n        dfs(cnt+1, \"1\"+num, top+1)\n    elif top == 9:\n        dfs(cnt+1, \"8\"+num, top-1)\n        dfs(cnt+1, \"9\"+num, top)\n    else:\n        dfs(cnt+1, str(top-1)+num, top-1)\n        dfs(cnt+1, str(top)+num, top)\n        dfs(cnt+1, str(top+1)+num, top+1)\n\n\nk = int(input())\nv = set()\nfor i in range(10):\n    dfs(0, str(i), i)\nv = list(v)\nv.sort()\nv.pop(0)\nprint((v[k-1]))\n", "from collections import deque\n\nk=int(input())\n\na=[1,2,3,4,5,6,7,8,9]\n\nb=deque(a)\n\nwhile b:\n  v=b.popleft()\n  if v%10==0:\n    f=v*10+1\n    if f<=3234566667:\n      \n      b.append(f)\n      a.append(f)\n    g=v*10\n    if g<=3234566667:\n      b.append(g)\n      a.append(g)\n    \n  elif v%10==9:\n    f=v*10+8\n    g=v*10+9\n    if f<=3234566667:\n      \n      b.append(f)\n      a.append(f)\n    if g<=3234566667:\n      b.append(g)\n      a.append(g)\n    \n  else:\n    f=v*10+(v%10)-1\n    g=v*10+(v%10)\n    h=v*10+(v%10)+1\n    if f<=3234566667:\n      b.append(f)\n      a.append(f)\n    if g<=3234566667:\n      b.append(g)\n      a.append(g)\n    if h<=3234566667:\n      b.append(h)\n      a.append(h)\n      \na.sort()\n\nprint(a[k-1])", "k = int(input())\nans = []\n\n\ndef gen_lunlun(x):\n    if x <= 3234566667:\n        d = x % 10\n        for i in [-1, 0, 1]:\n            if d + i < 0 or d + i >= 10:\n                continue\n            nex = x * 10 + d + i\n            ans.append(nex)\n            gen_lunlun(nex)\n\n\nfor i in range(1, 10):\n    ans.append(i)\n    gen_lunlun(i)\nans = sorted(ans)\n\nprint((ans[k - 1]))\n", "K = int(input())\n\n\ncnt = 0\nans = \"\"\n\n\ndef dfs(n_str, digit):\n    nonlocal cnt, ans\n    if len(n_str) >= digit:\n        cnt += 1\n        if cnt == K:\n            ans = n_str\n        return\n    last = int(n_str[-1])\n    for i in range(max(0, last - 1), min(9, last + 1) + 1):\n        dfs(n_str + str(i), digit)\n\n\ndigit = 1\nwhile ans == \"\":\n    for i in range(1, 10):\n        dfs(str(i), digit)\n    digit += 1\nprint(ans)\n", "from collections import deque\nK = int(input())\nS = [i for i in range(1,10)]\nS = deque(S)\nfor i in range(1,K+1):\n    Lun = S.popleft()\n    Lu = Lun%10\n    if Lu !=0:\n        S.append(10*Lun+Lu-1)\n    S.append(Lun*10+Lu)\n    if Lu !=9:\n        S.append(10*Lun+Lu+1)\nprint(Lun)", "from collections import deque\nK = int(input())\nq = deque([i for i in range(1, 10)])\nfor _ in range(K - 1):\n    # 13print(q)\n    num = q.popleft()\n    for i in range(-1,2):\n        if 0 <= int(str(num)[-1]) + i <= 9:\n            q.append(num * 10 + int(str(num)[-1]) + i)\nprint((q[0]))\n", "k = int(input())\nfrom collections import deque\nd = deque(range(1,10))\n\ni = 0\nwhile d:\n    l = d.popleft()\n    i += 1\n    \n    if i == k:\n        print(l)\n        return\n    \n    if l % 10 > 0:\n        d.append(l * 10 + l % 10 - 1)\n    d.append(l * 10 + l % 10)\n    if l % 10 < 9:\n        d.append(l * 10 + l % 10 + 1)", "from collections import deque\n\nK=int(input())\n\nd = deque([1,2,3,4,5,6,7,8,9])\n\nfor i in range(K):\n    x=d.popleft()\n    if x%10!=0:\n        d.append(10*x+x%10-1)\n    d.append(10*x+x%10)\n    if x%10!=9:\n        d.append(10*x+x%10+1)\n\nprint(x)\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n                \n            \n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n    \n\n        \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n        \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n\n\n    \n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n", "from collections import deque\n\nk = int(input())\nq = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nfor i in range(k):\n    a = q.popleft()\n    b = a % 10\n    if b == 0:\n        q.append(a * 10)\n        q.append(a * 10 + b + 1)\n    elif b == 9:\n        q.append(a * 10 + b - 1)\n        q.append(a * 10 + b)\n    else:\n        q.append(a * 10 + b - 1)\n        q.append(a * 10 + b)\n        q.append(a * 10 + b + 1)\n\nprint(a)", "K = int(input())\ntab = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n[0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0],\n[0, 5, 8, 9, 9, 9, 9, 9, 9, 8, 5, 0],\n[0, 13, 22, 26, 27, 27, 27, 27, 26, 22, 13, 0],\n[0, 35, 61, 75, 80, 81, 81, 80, 75, 61, 35, 0],\n[0, 96, 171, 216, 236, 242, 242, 236, 216, 171, 96, 0],\n[0, 267, 483, 623, 694, 720, 720, 694, 623, 483, 267, 0],\n[0, 750, 1373, 1800, 2037, 2134, 2134, 2037, 1800, 1373, 750, 0],\n[0, 2123, 3923, 5210, 5971, 6305, 6305, 5971, 5210, 3923, 2123, 0],\n[0, 6046, 11256, 15104, 17486, 18581, 18581, 17486, 15104, 11256, 6046, 0]]\nseq = [1, 1, 1, 1, 1, 1, 1, 1, 1,\n3, 3, 3, 3, 3, 3, 3, 3, 2,\n8, 9, 9, 9, 9, 9, 9, 8, 5,\n22, 26, 27, 27, 27, 27, 26, 22, 13,\n61, 75, 80, 81, 81, 80, 75, 61, 35,\n171, 216, 236, 242, 242, 236, 216, 171, 96,\n483, 623, 694, 720, 720, 694, 623, 483, 267,\n1373, 1800, 2037, 2134, 2134, 2037, 1800, 1373, 750,\n3923, 5210, 5971, 6305, 6305, 5971, 5210, 3923, 2123, \n11256, 15104, 17486, 18581, 18581, 17486, 15104, 11256, 6046]\ni = 1\nwhile K > seq[i-1]:\n    K -= seq[i-1]\n    i += 1\nif i%9 != 0:\n    d = i//9\n    num = i%9\nelse:\n    d = (i-1)//9\n    num = 9\nletter =[str(num)]\n#print(i)#\n#print(K, d, num)#\nwhile d >= 1:\n    if K <= tab[d-1][num]:\n        num -= 1\n    elif tab[d-1][num] < K <= tab[d-1][num] + tab[d-1][num+1]:\n        K -= tab[d-1][num]\n    else:\n        K -= (tab[d-1][num] + tab[d-1][num+1])\n        num += 1\n    d -= 1\n    #print(K, d, num)#\n    letter.append(str(num))\nprint(''.join(letter))", "from collections import deque\nK = int(input())\nqueue = deque([1,2,3,4,5,6,7,8,9])\ncount = 1\nwhile count <= K:\n  num = queue.popleft()\n  if num%10!=0:\n    queue.append(num*10+num%10-1)\n  queue.append(num*10+num%10)\n  if num%10!=9:\n    queue.append(num*10+num%10+1)\n  count+=1\n  \nprint(num)", "from collections import deque\nK=int(input())\nlunlundeque=deque()\nfor i in range(1,10):\n    lunlundeque.append(i)\nnowlunlun=0\nindex=0\nwhile(index<K):\n    index+=1\n    nowlunlun=lunlundeque.popleft()\n    if nowlunlun%10!=0:\n        lunlundeque.append(nowlunlun*10+(nowlunlun%10)-1)\n    lunlundeque.append(nowlunlun*10+nowlunlun%10)\n    if nowlunlun%10!=9:\n        lunlundeque.append(nowlunlun*10+(nowlunlun%10)+1)\nprint(nowlunlun)\n", "from collections import deque\nk = int(input())\nqueue = deque([1,2,3,4,5,6,7,8,9])\nfor _ in range(k-1):\n    x = queue.popleft()\n    if x % 10 != 0:\n        queue.append(10*x+(x%10)-1)\n    queue.append(10*x+(x%10))\n    if x % 10 != 9:\n        queue.append(10*x+(x%10)+1)\nprint(queue.popleft())", "import queue\nk = int(input())\n\nq = queue.Queue()\nfor i in range(1, 10):\n    q.put(i)\n\nfor i in range(k):\n    x = q.get()\n    if i == k-1:\n        print(x)\n        break\n    if x%10 != 0:\n        q.put(10*x+(x%10)-1)\n    q.put(10*x+x%10)\n    if x%10 != 9:\n        q.put(10*x+(x%10)+1)\n", "from collections import deque\n\nK = int(input())\n\nlunlun = deque([i for i in range(1,10)])\n\nfor i in range(K):\n    x = lunlun.popleft()\n    if x % 10 != 0:\n        lunlun.append(x * 10 + (x % 10) - 1)\n    lunlun.append(x * 10 + (x % 10))\n    if x % 10 != 9:\n        lunlun.append(x * 10 + (x % 10) + 1)\n\nprint(x)"]