["N, X = list(map(int, input().split()))\nA = [int(a) for a in input().split()]\n\ndp = [[0]*4 for _ in range(N+1)]\n\nfor i in range(1, N+1):\n    dp[i][0] = max(dp[i-1][0] + A[i-1], 0)\n    dp[i][1] = max(dp[i-1][1] + A[i-1] * X, dp[i][0])\n    dp[i][2] = max(dp[i-1][2] + A[i-1], dp[i][1])\n    dp[i][3] = max(dp[i-1][3], dp[i][2])\n\nprint(dp[N][3])\n", "n, x = list(map(int, input().split()))\ncur1 = cur2 = cur = res = 0\nfor a in map(int, input().split()):\n    cur1 = max(cur1 + a, 0)\n    cur2 = max(cur2 + a * x, cur1)\n    cur = max(cur + a, cur2)\n    res = max(res, cur)\nprint(res)\n", "n,x = map(int,input().split())\nl = list(map(int,input().split()))\nnot_used = [0 for k in range(n+1)]\ncurrent = [0 for k in range(n+1)]\nused =[0 for k in range(n+1)]\nglobalMax = 0\nfor k in range(n):\n\tnot_used[k+1]= max(not_used[k],0)+l[k]\n\tcurrent[k+1] = max(max(not_used[k],current[k]),0)+l[k]*x\n\tused[k+1] = max(max(current[k],used[k]),0)+l[k]\n\tglobalMax = max(max(globalMax,used[k+1]),max(current[k+1],not_used[k+1]))\nprint(globalMax)", "n, x = map(int, input().split())\ndp1 = [0]*n\ndp2 = [0]*n\ndp0 = [0]*n\nans = 0\nv = [int(i) for i in input().split()]\ndp0[0] = max(0, v[0])\ndp1[0] = v[0] * x\ni = 0\nans = max(ans, dp1[i], dp2[i], dp0[i])\nfor i in range(1, n):\n    dp0[i] = max(0, dp0[i - 1] + v[i])\n    dp1[i] = max(dp1[i - 1] + v[i] * x, dp0[i-1] + v[i] * x)\n    dp2[i] = max(dp1[i-1] + v[i], dp2[i - 1] + v[i])\n    ans = max(ans, dp1[i], dp2[i], dp0[i])\nprint(ans)", "n, x = map(int, input().split())\ncur1=cur2=cur=res=0\nfor a in map(int, input().split()):\n    cur1 = max(cur1 + a, 0)\n    cur2 = max(cur2 + a * x, cur1)\n    cur = max(cur + a, cur2)\n    res = max(res, cur)\nprint(res)", "N, X = list(map(int, input().split()))\na_list = list(map(int, input().split()))\n\ndp = [[0] * 5 for _ in range(303030)]\n\nfor i in range(N):\n    a = a_list[i]\n    dp[i + 1][0] = 0\n    dp[i + 1][1] = max(dp[i][1] + a, dp[i + 1][0])\n    dp[i + 1][2] = max(dp[i][2] + a * X, dp[i + 1][1])\n    dp[i + 1][3] = max(dp[i][3] + a, dp[i + 1][2])\n    dp[i + 1][4] = max(dp[i][4], dp[i + 1][3])\nprint(dp[N][4])\n", "def main():\n    n, x = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [[0] * 5 for _ in range(n)]\n    dp[0] = [arr[0], arr[0] * x, 0]\n    ans = max(dp[0])\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + arr[i], arr[i])\n        dp[i][1] = max(dp[i - 1][0] + arr[i] * x, arr[i] * x, dp[i - 1][1] + arr[i] * x)\n        dp[i][2] = max(dp[i - 1][2] + arr[i], dp[i - 1][1] + arr[i])\n        ans = max(ans, max(dp[i]))\n    print(ans)\n    return 0\n\nmain()", "n, x = list(map(int, input().split()))\narr = [int(x) for x in input().split()]\ndp = [[0 for _ in range(n)] for _ in range(3)]\ndp[0][0] = max(arr[0], 0)\ndp[1][0] = max(arr[0] * x, 0)\ndp[2][0] = max(arr[0], 0)\nanswer = max(dp[0][0], dp[1][0], dp[2][0])\nfor i in range(1, n):\n    dp[0][i] = max(dp[0][i - 1] + arr[i], arr[i], 0)\n    dp[1][i] = max(dp[0][i - 1] + arr[i] * x, dp[1][i - 1] + arr[i] * x, arr[i] * x, 0)\n    dp[2][i] = max(dp[1][i - 1] + arr[i], dp[2][i - 1] + arr[i], arr[i], 0)\n    answer = max(answer, dp[0][i], dp[1][i], dp[2][i])\nprint(answer)\n", "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\nfrom collections import Counter\nfrom math import gcd\n\ndef __starting_point():\n    n,x = map(int,input().split())\n    a = list(map(int,input().split()))\n    \n    dp = [ [-1,-1,-1] for i in range(n)]\n\n    dp[0][0] = a[0]\n    dp[0][1] = x*a[0]\n    dp[0][2] = a[0]\n    m = max(dp[0][0],dp[0][1],dp[0][2],0)\n    for i in range(1,n):\n        dp[i][0] = max(dp[i-1][0]+a[i],a[i])\n        dp[i][1] = max(dp[i-1][1] + x*a[i],x*a[i],dp[i-1][0]+x*a[i])\n        dp[i][2] = max(dp[i-1][1] + a[i],a[i],dp[i-1][2]+a[i])\n        m = max(max(dp[i]),m)\n    print(m)\n__starting_point()", "n, x = list(map(int,input().split()))\nl = list(map(int,input().split()))\nb = [0] * n\nf = [0] * n\npref = [0] * n\npref[0] = l[0]\nfor i in range(1, n):\n\tpref[i] = pref[i - 1] + l[i]\nb[0] = x * l[0]\nmini = 0\nfor i in range(1, n):\n\tmini = min(mini, pref[i - 1])\n\tb[i] = x * l[i] + max(b[i - 1], pref[i - 1] - mini)\nf[n - 1] = l[n - 1] * x\nmaksi = pref[n - 1]\nfor i in range(1, n):\n\tj = n - i - 1\n\tmaksi = max(maksi, pref[j])\n\tf[j] = x * l[j] + max(f[j + 1], maksi - pref[j])\nwyn = - 100000000000000000000000\nfor i in range(n):\n\twyn = max(wyn, f[i] + b[i] - x * l[i])\nmini = 0\nwyn1 = -100000000000000000000000\nfor i in range(n):\n\tmini = min(mini, pref[i])\n\twyn1 = max(wyn1, pref[i] - mini)\nprint(max(wyn, wyn1))", "def main():\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    dp = [[0, 0, 0] for _ in range(n)]\n    dp[0][0] = max(0, a[0])\n    dp[0][1] = max(0, x * a[0])\n    answer = max(dp[0])\n\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + a[i], a[i])\n        dp[i][1] = max(dp[i - 1][1] + x * a[i], x * a[i],\n                       dp[i - 1][0] + x * a[i])\n        dp[i][2] = max(dp[i - 1][2] + a[i], dp[i - 1][1] + a[i])\n        answer = max(answer, *dp[i])\n\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,x=list(map(int,input().split())) \na=list(map(int,input().split())) \ndp=[[0 for i in range(3)] for j in range(n+1)]\na=[0]+a\n#3 dps lagenge >:|)\nres=0\nfor i in range(1,n+1):\n    dp[i][0]= max(0,dp[i-1][0]+a[i],a[i]) #current le ya na le\n    dp[i][1]=max(0,dp[i-1][0]+a[i]*x,dp[i-1][1]+a[i]*x,a[i]*x) #check and see which gives the best ans\n    dp[i][2]= max(0,a[i],dp[i-1][0]+a[i],dp[i-1][1]+a[i],dp[i-1][2]+a[i]) #main dp\n    res=max(res,dp[i][0],dp[i][1],dp[i][2])\n    #print(dp)\nprint(res)\n\n", "n,x=map(int, input().split())\nA=list(map(int,input().split()))\nDP=[[0]*3 for _ in range(n+1)]\nans=0\nfor i in range(1,n+1):\n    DP[i][0]=max(DP[i-1][0]+A[i-1],A[i-1])\n    DP[i][1]=max(DP[i-1][0]+A[i-1]*x,DP[i-1][1]+A[i-1]*x,A[i-1]*x)\n    DP[i][2]=max(DP[i-1][1]+A[i-1],DP[i-1][2]+A[i-1],A[i-1])\n    ans=max(ans,max(DP[i]))\nprint(ans)", "d1, d2, d3, d4 = 0, 0, 0, 0\ne1, e2, e3, e4 = 0, 0, 0, 0\nn, x = map(int, input().split())\nA = list(map(int, input().split())) + [0]\nfor a in A:\n    e1 = max(a, d1 + a)\n    e2 = max(x*a, d1 + x*a, d2 + x*a)\n    e3 = max(e1, d2 + a, d3 + a)\n    e4 = max(d1, d2, d3, d4, a)\n    d1, d2, d3, d4 = e1, e2, e3, e4\nprint(d4)", "def solve():\n    N, X = map(int, input().split())\n    A = [int(k) for k in input().split()]\n    \n    ans = 0\n    cur_max1 = 0\n    cur_max2 = 0\n    cur_max3 = 0\n    \n    for a in A:\n        #max sum subarray\n        '''\n        if A[i] > cur_max + A[i]:\n            cur_max = A[i]\n        else:\n            cur_max += A[i]'''\n        \n        # normal max sum subarray\n        cur_max1 = max(a, cur_max1 + a)\n        # multiply by X\n        cur_max2 = max(a*X, a*X + cur_max2, cur_max1)\n        # max sum subarray with previous sum multiplied by X\n        cur_max3 = max(a, cur_max3 + a, cur_max2)\n            \n        ans = max(ans, cur_max1, cur_max2, cur_max3, 0)\n    \n    print (ans)\n    \ndef __starting_point():  \n    solve()\n__starting_point()", "def printarr(dp):\n    for i in dp:\n        print(*i)\n\nn,m=list(map(int,input().split()))\na=[0] + list(map(int,input().split()))\ndp=[[0 ,0 ,0] for i in range(n+1)]\nma=-1\nfor i in range(1,n+1):\n    dp[i][0]=max(dp[i-1][0] + a[i],0)\n    dp[i][1]=max(dp[i-1][1] + a[i]*m, dp[i-1][0] + a[i]*m)\n    dp[i][2]=max(dp[i-1][2] + a[i] ,a[i] + dp[i-1][1])\n    ma=max(dp[i][0],dp[i][1],dp[i][2],ma)\n# printarr(dp)    \nprint(ma)    \n", "def find(A, x):\n    maxi, c1, c2, c3 = 0, 0, 0, 0\n    for i in range(0, len(A)):\n        c1 = max([c1 + A[i], 0])\n        c2 = max([c1, c2 + A[i] * x])\n        c3 = max([c2, c3 + A[i]])\n        maxi = max([maxi, c1, c2, c3])\n    return maxi\n\ninp = lambda cast=int: list(map(cast, input().split()))\nn, x = inp()\nA = [0] + inp()\nprint(find(A, x))", "def find(A, x):\n    maxi, c1, c2, c3 = 0, 0, 0, 0\n    for i in range(0, len(A)):\n        c11 = max([c1, 0]) + A[i]\n        c22 = max([c1, c2, 0]) + A[i] * x\n        c33 = max([c2, c3, 0]) + A[i]\n        c1, c2, c3 = c11, c22, c33\n        maxi = max([maxi, c1, c2, c3])\n    return maxi\n\ninp = lambda cast=int: list(map(cast, input().split()))\nn, x = inp()\nA = [0] + inp()\nprint(find(A, x))", "def solve():\n    n, x = list(map(int, input().split()))\n    a = [0] + list(map(int, input().split()))\n    max_val = 0\n    dp1 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp1[i] = max(dp1[i-1] + a[i], a[i])\n        max_val = max(max_val, dp1[i])\n\n    dp2 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp2[i] = max(dp1[i-1] + a[i] * x, dp2[i-1] + a[i] * x, a[i] * x)\n        max_val = max(max_val, dp2[i])\n\n    dp3 = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp3[i] = max(dp2[i-1] + a[i], dp3[i-1] + a[i], a[i])\n        max_val = max(max_val, dp3[i])\n\n    print(max_val)\n\nsolve()\n", "import sys\ninput = sys.stdin.readline\n\nn,x=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nSUM=[0]\n\nfor a in A:\n    SUM.append(SUM[-1]+a)\n\nMAXLIST=[SUM[0]]\nMINLIST=[SUM[0]]\n\nfor i in range(1,n+1):\n    MAXLIST.append(max(MAXLIST[-1],SUM[i]))\n    MINLIST.append(min(MINLIST[-1],SUM[i]))\n\nMAXLIST_INV=[SUM[-1]]\nMINLIST_INV=[SUM[-1]]\n\nfor i in range(n-1,-1,-1):\n    MAXLIST_INV.append(max(MAXLIST_INV[-1],SUM[i]))\n    MINLIST_INV.append(min(MINLIST_INV[-1],SUM[i]))\n\nMAXLIST_INV=MAXLIST_INV[::-1]\nMINLIST_INV=MINLIST_INV[::-1]\n\n\nif x>0:\n    \n    ANS=0\n   \n    for i in range(n+1):\n        base=SUM[i]\n        MINUS=MINLIST[i]\n\n        ANS=max(ANS,(base-MINUS)*x)\n\n    print(ANS)\n\nelse:\n\n    ANS=0\n    MAX=0\n    MIN=0\n    MINUS=0\n    NOWMINUS=0\n   \n    for i in range(n+1):\n        base=SUM[i]\n        PLUS=MAXLIST_INV[i]#getvalues(i,n+2,0,0,seg_el)\n\n        ANS=max(ANS,NOWMINUS+PLUS-base+base*x)\n\n        MIN=min(MIN,SUM[i])\n        \n        if NOWMINUS<=SUM[i]-MIN+SUM[i]*(-x):\n            NOWMINUS=SUM[i]-MIN+SUM[i]*(-x)\n            MAX=SUM[i]\n\n\n    print(ANS)  \n", "import sys\ninput = sys.stdin.readline\n\nn,x=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nDP0=[0]*(n+1)\nDP1=[0]*(n+1)\nDP2=[0]*(n+1)\n\nfor i in range(n):\n    DP0[i]=max(DP0[i-1]+A[i],A[i],0)\n    DP1[i]=max(DP0[i-1]+A[i]*x,DP1[i-1]+A[i]*x,DP0[i])\n    DP2[i]=max(DP2[i-1]+A[i],DP1[i-1]+A[i],DP1[i])\n\nprint(max(DP2))\n", "\nn,m = list(map(int,input().split()))\na = list(map(int,input().split()))\ndef factiry(arr,mul):\n    curMax,mulMax,gloMax,cur = 0,0,0,0\n    for i in range(n):\n        curMax=max(arr[i]+curMax,0)\n        mulMax = max(mulMax+(arr[i]*mul),curMax)\n        cur = max(cur+arr[i],mulMax)\n        gloMax = max(gloMax,cur)\n    return (gloMax)\ntotal = factiry(a,m)\nprint(total)\n\n\n", "n, x = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\ndp = [[-10**18 for i in range(5)] for j in range(len(A))]\n\nfor i in range(n-1, -1, -1):\n    if 1:\n        nxt = [0, 0, 0, 0, 0]\n        if i!=n-1:\n            nxt = dp[i+1]\n        coeff = [0, 1, x, 1, 0]\n        for j in range(5):\n            for xx in range(j, len(coeff)):\n                dp[i][j] = max(dp[i][j], coeff[xx]*A[i] + nxt[xx])\n        \n        \n\nprint(max(dp[0]))\n", "# AC\nimport sys\nfrom math import gcd\n\n\nclass Main:\n    def __init__(self):\n        self.buff = None\n        self.index = 0\n\n    def __next__(self):\n        if self.buff is None or self.index == len(self.buff):\n            self.buff = sys.stdin.readline().split()\n            self.index = 0\n        val = self.buff[self.index]\n        self.index += 1\n        return val\n\n    def next_int(self):\n        return int(next(self))\n\n    def solve(self):\n        n = self.next_int()\n        k = self.next_int()\n        x = [self.next_int() for _ in range(0, n)]\n        ans = 0\n        dp = (0, 0, 0)\n        for xx in x:\n            d0 = max(0, dp[0]) + xx\n            d1 = max(0, dp[0], dp[1]) + xx * k\n            d2 = max(0, dp[0], dp[1], dp[2]) + xx\n            ans = max(ans, d0, d1, d2)\n            dp = (d0, d1, d2)\n        print(ans)\n\n\ndef __starting_point():\n    Main().solve()\n\n__starting_point()"]