["#!usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\ndef IR(n):\n    return [I() for i in range(n)]\ndef LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n    n,k,q = LI()\n    a = LI()\n    b = [[a[i],i] for i in range(n)]\n    b.sort()\n    ans = b[q-1][0]-b[0][0]\n    l = [-1,n]\n    for i in range(1,n):\n        l.append(b[i-1][1])\n        l.sort()\n        if b[i-1][0] == b[i][0]:\n            continue\n        s = [a[l[i]+1:l[i+1]] for i in range(i+1)]\n        c = []\n        for si in s:\n            si.sort()\n            for j in range(len(si)-k+1):\n                c.append(si[j])\n        if len(c) < q:\n            continue\n        c.sort()\n        m = c[q-1]-c[0]\n        if m < ans:\n            ans = m\n    print(ans)\n    return\n\n#Solve\ndef __starting_point():\n    solve()\n\n__starting_point()", "def main(n,k,q,x):\n    ret=float('inf')\n    for xi in x:\n        c=[]\n        tmp=[]\n        for y in x:\n            if y<xi:\n                if len(tmp)>=k:\n                    tmp.sort()\n                    for j in range(len(tmp)-k+1):\n                        c.append(tmp[j])\n                tmp=[]\n            else:\n                tmp.append(y)\n        if len(tmp)>=k:\n            tmp.sort()\n            for j in range(len(tmp)-k+1):\n                c.append(tmp[j])\n        if len(c)>=q:\n            c.sort()\n            ret=min(ret,c[q-1]-xi)\n    return ret\n\n#n=int(input())\n#a=list(input())\n#a=list(map(int,input().split()))\n#b=list(map(int,input().split()))\n#ab=[list(map(int,input().split())) for _ in range(n)]\nn,k,q=list(map(int,input().split()))\nx=list(map(int,input().split()))\nprint((main(n,k,q,x)))\n", "N,K,Q=map(int,input().split())\nalist=list(map(int,input().split()))\n\ndef div_by_a(border,dlist):\n  divided_list=[]\n  div=[]\n  for d in dlist:\n    if d<border:\n      if len(div)>0:\n        div.sort()\n        divided_list.append(div)\n        div=[]\n    else:\n      div.append(d)\n  else:\n    if len(div)>0:\n      div.sort()\n      divided_list.append(div)\n      \n  return divided_list\n\nanswer=10**9\nfor a in alist:\n  divlist=div_by_a(a,alist)\n  #print(divlist)\n  \n  cand_list=[]\n  for div in divlist:\n    cand_num=max(0,len(div)-K+1)\n    cand_list.extend(div[:cand_num])\n    \n  cand_list.sort()\n  #print(cand_list)\n  if len(cand_list)>=Q:\n    answer=min(answer,cand_list[Q-1]-a)   \n    \nprint(answer)", "from itertools import*\nN,K,Q,*A=map(int,open(0).read().split())\ns=sorted\nprint(min((s(sum((v[:max(0,len(v)-K+1)]for v in(k*s(v)for k,v in groupby(A,lambda a:a>=Y))),[]))[Q-1:]+[2e9])[0]-Y for Y in A))", "import sys\nINF = 1 << 60\nMOD = 10**9 + 7 # 998244353\nsys.setrecursionlimit(2147483647)\ninput = lambda:sys.stdin.readline().rstrip()\nfrom itertools import groupby\nfrom heapq import heappop, heappush, heapify\ndef resolve():\n    n, k, q = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    ans = INF\n    for m in sorted(A):\n        C = []\n        for key, it in groupby(A, key = lambda a : a >= m):\n            if key is False:\n                continue\n            D = list(it)\n            if len(D) >= k:\n                D.sort()\n                C.append(D[:len(D) - k + 1][::-1])\n\n        if sum(len(a) for a in C) < q:\n            continue\n        heap = [(C[i].pop(), i) for i in range(len(C))]\n        heapify(heap)\n        for _ in range(q):\n            M, i = heappop(heap)\n            if C[i]:\n                heappush(heap, (C[i].pop(), i))\n        ans = min(ans, M - m)\n\n    print(ans)\nresolve()", "import sys\ninput = sys.stdin.readline\nN, K, Q = list(map(int, input().split()))\na = list(map(int, input().split()))\nta = a + []\nres = pow(10, 10)\nbs = pow(10, 10)\nfor x in sorted(set(a)):\n  t = [[]]\n  for i in range(N):\n    if ta[i] == bs:\n      if t[-1] != []:\n        t.append([])\n    else: t[-1].append(a[i])\n  tt = []\n  for i in range(len(t)):\n    t[i].sort()\n    for j in range(len(t[i]) - K + 1):\n      tt.append(t[i][j])\n  #print(tt, t, x)\n  if len(tt) < Q: break\n  tt.sort()\n  res = min(res, tt[Q - 1] - tt[0])\n  #print(res, tt, t)\n  for i in range(N):\n    if a[i] == x:\n      ta[i] = bs\n  #print(ta, t)\nprint(res)\n", "N, K, Q = map(int, input().split())\nA = list(map(int, input().split()))\nans = 10**18\n\nfor Y in set(A):\n    L = []\n    l = []\n    \n    for i in range(N):\n        if A[i]<Y:\n            L.append(l)\n            l = []\n        else:\n            l.append(A[i])\n    \n    L.append(l)\n    l2 = []\n    \n    for l in L:\n        if len(l)<=K-1:\n            continue\n        \n        l.sort()\n        \n        for i in range(len(l)-K+1):\n            l2.append(l[i])\n    \n    if len(l2)<Q:\n        continue\n    \n    l2.sort()\n    X = l2[Q-1]\n    ans = min(ans, X-Y)\n\nprint(ans)", "# coding: utf-8\n# Your code here!\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdin.read\n\nn,k,Q = map(int,readline().split())\n*a, = map(int,readline().split())\n*sa, = sorted(a)\na.append(-1)\nans = 10**9\nfor i in sa:\n    q = []\n    v = []\n    for j in a:\n        if j < i:\n            if len(v) >= k:\n                v.sort()\n                q += v[:len(v)-k+1]\n            v.clear()\n        else:\n            v.append(j)\n\n    if len(q) < Q: break\n    q.sort()\n    ans = min(ans, q[Q-1] - q[0])\n\nprint(ans)", "from collections import defaultdict\nimport heapq\n\nn, k, q = map(int, input().split())\na = list(map(int, input().split()))\nok = [0] * n\nd = defaultdict(lambda : set())\nh = []\nfor i in range(k - 1):\n    heapq.heappush(h, [a[i], i])\n    d[a[i]].add(i)\nfor i in range(k - 1, n):\n    heapq.heappush(h, [a[i], i])\n    d[a[i]].add(i)\n    while h:\n        if h[0][1] >= i - k + 1:\n            break\n        heapq.heappop(h)\n    m = list(d[h[0][0]])\n    for j in m:\n        if j >= i - k + 1:\n            ok[j] = 1\n        d[h[0][0]].remove(j)\nans = 1145141919810\nfor i in range(n):\n    if ok[i]:\n        s, t = [], []\n        for j in range(n):\n            if a[i] > a[j]:\n                s.sort()\n                for l in range(max(0, len(s) - k + 1)):\n                    t.append(s[l])\n                s = []\n            else:\n                s.append(a[j])\n        s.sort()\n        for l in range(max(0, len(s) - k + 1)):\n            t.append(s[l])\n        t.sort()\n        if len(t) >= q:\n            ans = min(ans, t[q - 1] - t[0])\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n, k, q = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    b = [[v, i]for i, v in enumerate(a)]\n    b.sort()\n    index = [0]*n\n    for i in range(n):\n        index[i] = b[i][1]\n\n    judge = [[] for i in range(n)]\n    already = [-1, n]\n\n    for i in range(n):\n        \n        for j in range(len(already)-1):\n            key = a[already[j]+1:already[j+1]]\n            if len(key) >= k:\n                judge[i].append(key)\n        already.append(index[i])\n        already.sort()\n\n    ans = 1e9\n    for i in range(n):\n        if not judge[i]:\n            break\n        m = b[i][0]\n        sub = []\n        for values in judge[i]:\n            values.sort()\n            for j in range(len(values)-k+1):\n                sub.append(values[j])\n        sub.sort()\n        if len(sub) < q:\n            break\n        M = sub[q-1]\n        ans = min(ans, M-m)\n\n    print(ans)\n\n\n    \ndef __starting_point():\n    main()\n\n\n__starting_point()", "N, K, Q = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ndef sol(y):\n    B = [[]]\n    for a in A:\n        if a < y and len(B[-1]) > 0:\n            B.append([])\n        if a >= y:\n            B[-1].append(a)\n\n    C = []\n    for grp in B:\n        grp.sort()\n        C += grp[:max(0, len(grp) - K + 1)]\n    C.sort()\n\n    return C[Q - 1] - y if len(C) >= Q and C[0] == y else 10**18\n\nans = 10**18\nfor y in A:\n    ans = min(ans, sol(y))\n\nprint(ans)\n", "n,k,q = map(int, input().split())\na = list(map(int, input().split()))\n\ndef parse(b):\n    ret = []\n    tmp = []\n    for ai in a:\n        if ai >= b:\n            tmp.append(ai)\n        else:\n            if len(tmp) >= k:\n                tmp.sort(reverse=True)\n                for i in range(k-1,len(tmp)):\n                    ret.append(tmp[i])\n            tmp = []\n    else:\n        if len(tmp) >= k:\n            tmp.sort(reverse=True)\n            for i in range(k-1,len(tmp)):\n                ret.append(tmp[i])\n            tmp = []\n    return ret\n\nans = 10**10\n\nfor b in set(a):\n    lis = parse(b)\n    if len(lis) < q:\n        continue\n    lis.sort()\n    ans_tmp = lis[q-1] - lis[0]\n    ans = min(ans, ans_tmp)\n\nprint(ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\nn,k,q = list(map(int, input().split()))\na = list(map(int, input().split()))\narg = [(num,i) for i,num in enumerate(a)]\narg.sort()\ndef sub(x):\n    \"\"\"0,1,...,x-1\u756a\u76ee\u306f\u4f7f\u308f\u306a\u3044\u5834\u5408\u306b\u304a\u3044\u3066\u3001X-Y\u306e\u5024\n    \"\"\"\n    index = [item[1] for item in arg[:x]]\n    index.sort()\n    index.append(n)\n    vals = []\n    prv = 0\n    for ind in index:\n        if ind-prv>=k:\n            vals.extend(sorted(a[prv:ind])[:(ind-prv)-k+1])\n        prv = ind+1\n        if prv>=n:\n            break\n    if len(vals)<q:\n        return None\n    else:\n        vals.sort()\n        return vals[q-1] - arg[x][0]\nans = float(\"inf\")\nfor i in range(n):\n    res = sub(i)\n    if res is not None:\n        ans = min(ans, res)\nprint(ans)", "n,k,q = list(map(int, input().split()))\na = list(map(int, input().split()))\nnum_set = set(a)\n\ndef parse(b):\n    ret = []\n    tmp = []\n    for ai in a:\n        if ai >= b:\n            tmp.append(ai)\n        else:\n            if len(tmp) >= k:\n                tmp.sort(reverse=True)\n                for i in range(k-1,len(tmp)):\n                    ret.append(tmp[i])\n            tmp = []\n    else:\n        if len(tmp) >= k:\n            tmp.sort(reverse=True)\n            for i in range(k-1,len(tmp)):\n                ret.append(tmp[i])\n            tmp = []\n    return ret\n\nans = 10**10\n\nfor b in num_set:\n    lis = parse(b)\n    if len(lis) < q:\n        continue\n    ans_tmp = sorted(lis)[q-1] - min(lis)\n    ans = min(ans, ans_tmp)\n\nprint(ans)\n", "from collections import defaultdict, deque, Counter\nfrom decimal import *\nfrom heapq import heapify, heappop, heappush\nimport math\nimport random\nimport string\nfrom copy import deepcopy\nfrom itertools import combinations, permutations, product\nfrom operator import mul, itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\ndef getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\ndef rand_ints_nodup(ran1, ran2, rantime):\n  ns = []\n  while len(ns) < rantime:\n    n = random.randint(ran1, ran2)\n    if not n in ns:\n      ns.append(n)\n  return sorted(ns)\n\ndef rand_query(ran1, ran2, rantime):\n  r_query = []\n  while len(r_query) < rantime:\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n    if not n_q in r_query:\n      r_query.append(n_q)\n  return sorted(r_query)\n\n\nsys.setrecursionlimit(1000000000)\nmod = 998244353\n\n#############\n# Main Code #\n#############\n\n\"\"\"\n\u6570\u5217A\n\u9577\u3055K\u306e\u9023\u7d9a\u3059\u308b\u90e8\u5206\u5217\u30921\u3064\u9078\u3076\u3000\n\u305d\u306e\u4e2d\u306e\u6700\u5c0f\u306e\u3082\u306e\u3092\u53d6\u308a\u9664\u304f\u3000inf\u306b\u3059\u308c\u3070\uff1f\n\u53d6\u308a\u9664\u3044\u305f\u8981\u7d20\u306e\u6700\u5927\u5024 - \u6700\u5c0f\u5024\u3092\u30de\u30a4\u30ca\u30b9\u306b\u3057\u305f\u3044\u3000\u4e8c\u5206\u63a2\u7d22\u3068\u304b\u3067\u304d\u308b?\n\u6700\u7d42\u5f62\u3092\u30a4\u30e1\u30fc\u30b8\u3059\u308b\n\n\u4e00\u756a\u671b\u307e\u3057\u3044\u306e\u306f\nQ\u500b\u306b\u3064\u3044\u3066\u6700\u5c0f\u533a\u9593\u306eQ\u500b\u3092\u53d6\u308b\u3053\u3068\n\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u3092\u53d6\u3089\u305a\u306b\u90fd\u5408\u306e\u3044\u3044\u3068\u3053\u3060\u3051\u53d6\u308a\u305f\u3044\n\u5c0f\u3055\u3044\u9806\u306b\u4ed5\u5207\u308a\u3092\u7acb\u3066\u3066\u3044\u304f\n\u307e\u305a\u5c0f\u3055\u3044\u9806\u306b1 2 3 4...\u3053\u308c\u306f\u5fc5\u305a\u53d6\u308c\u308b\u3000\uff081 2 3 5...\u3068\u304b\u306f1234\u3088\u308a\u5927\u304d\u304f\u306a\u308b\uff09\n\u6b21\u306b2 3 4 5\u3092\u53d6\u308c\u308b\u304b\nN\u500b\u76ee\u306e\u6570\u3063\u3066\u96e3\u3057\u304f\u306a\u3044\uff1f\n\n5 3 2\n4 3 1 5 2 \u306e\u5834\u5408\n4 3 [1 5 2]\n4 [3 5 2]\n\nN <= 2000\u306a\u306e\u3067 1, 2, 3, 4\u3067\u533a\u5207\u3063\u3066\u3044\u304f\u306e\u306f\u3067\u304d\u305d\u3046\nQ\u306e\u4e2d\u306b1\u3092\u5165\u308c\u308b\u5834\u5408\u3001\u6c42\u3081\u308b\u5024\u306fAq - A1\n\n1 1 3 5 6 7 \u306e\u5834\u5408\n1\u756a\u76ee\u306e1\u4ee5\u964d\u3092\u4f7f\u3046\u3068 1 1 3 5\n2\u756a\u76ee\u306e1\u4ee5\u964d\u3092\u4f7f\u3046\u3068 1 3 5 6\n3\u4ee5\u964d\u3092\u4f7f\u3046\u3068       3 5 6 7\n\u306a\u306e\u30673\u4ee5\u964d\u3092\u4f7f\u3046\u65b9\u304c\u3044\u3044\nQ = 4\u306e\u6642\u3001\u5019\u88dc\u3068\u306a\u308b\u306e\u306f\n[\u5c0f\u3055\u3044\u65b9\u304b\u30891\u756a\u76ee\u30012\u756a\u76ee\u30013\u756a\u76ee...] or\n[\u5c0f\u3055\u3044\u65b9\u304b\u30892\u756a\u76ee\u30013\u756a\u76ee\u30014\u756a\u76ee...] or...\n\n\u305f\u3060\u3057\u3001[\u5c0f\u3055\u3044\u65b9\u304b\u30892\u756a\u76ee\u30013\u756a\u76ee\u30014\u756a\u76ee...]\u3092\u4f5c\u308b\u306b\u306f\u9078\u629e\u7bc4\u56f2\u306b\u5c0f\u3055\u3044\u65b9\u304b\u30891\u756a\u76ee\u3092\u542b\u3081\u306a\u3044\u3053\u3068\u304c\u5fc5\u8981\n4 3 1 5 2 \u306e\u5834\u5408\n\u3000\u3000 \u00d7     1\u306f\u969c\u5bb3\u7269\u306b\u306a\u308b\n\u30d6\u30ed\u30c3\u30af1:[4, 3]\n\u30d6\u30ed\u30c3\u30af2:[5, 2] \u306e\u4e2d\u3067\u3057\u304bK\u3092\u56de\u305b\u306a\u3044\n[\u5c0f\u3055\u3044\u65b9\u304b\u30893\u756a\u76ee\u30014\u756a\u76ee\u30015\u756a\u76ee...]\u306e\u5834\u5408\n\u30d6\u30ed\u30c3\u30af1:[4, 3]\n\u30d6\u30ed\u30c3\u30af2:[5]\n\"\"\"\n\nN, K, Q = getNM()\nA = getList()\nA = [[A[i], i] for i in range(N)]\n\nflag = [0] * N\n# \u533a\u5207\u308a0\nl = deepcopy(sorted(A))\nopt = []\nl.sort()\nfor i in range(Q):\n    opt.append(l[i][0])\nans = opt[-1] - opt[0]\n\n# \u533a\u5207\u308a1\u500b\u4ee5\u4e0a\nfor i in range(N):\n    # index\u306e\u4f4d\u7f6e\u306fl\u3092\u518d\u5229\u7528\n    flag[l[i][1]] = 1 # A[i][1]\u306findex\n    parent = []\n    child = []\n    # \u30d5\u30e9\u30b0\u306e\u7acb\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u533a\u5207\u308b\n    # \u8981\u7d20\u306e\u63a2\u7d22\u306fA\u3092\u4f7f\u3046\n    for j in range(N):\n        if flag[j] == 0:\n            child.append(A[j][0])\n        else:\n            child.sort()\n            parent.append(child)\n            child = []\n    if len(child):\n        child.sort()\n        parent.append(child)\n\n    # \u5024\u3092\u6c42\u3081\u308b\n    # \u5404child\u304b\u3089\u53d6\u308c\u308b\u3060\u3051\u53d6\u308b(\u914d\u5217\u64cd\u4f5c\u3092\u884c\u3046)\n    opt = []\n    for array in parent:\n        for j in range(len(array) - K + 1): # child\u306e\u9577\u3055 - K + 1\u3060\u3051\u5024\u3092\u53d6\u308c\u308b\n            opt.append(array[j])\n    # Q\u500b\u53d6\u308c\u305f\u306a\u3089\n    if len(opt) >= Q:\n        opt.sort()\n        ans = min(ans, opt[Q - 1] - opt[0])\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, K, Q = MAP()\nA = LIST()\n\nans = INF\n# \u4f7f\u3046\u8981\u7d20\u306e\u6700\u5c0f\u5024\u3068\u3059\u308b\u5024x\u3092\u5168\u63a2\u7d22\nfor x in A:\n    # \u6570\u5217A\u3092x\u672a\u6e80\u306e\u5024\u3067\u533a\u5207\u3063\u305f\u6570\u5217B\u3092\u4f5c\u308b\n    B = []\n    tmp = []\n    for i in range(N):\n        if A[i] >= x:\n            tmp.append(A[i])\n        else:\n            B.append(tmp)\n            tmp = []\n    B.append(tmp)\n    # \u6570\u5217B\u5185\u306e\u5404\u6570\u5217\u304b\u3089\u3001\u4f7f\u3048\u308b\u8981\u7d20\u3092\u96c6\u3081\u308b\n    C =  []\n    for li in B:\n        m = len(li)\n        if m-K+1 >= 1:\n            li.sort()\n            C += li[:m-K+1]\n    # \u96c6\u3081\u305f\u8981\u7d20\u304b\u3089Q\u500b\u3092\u30af\u30a8\u30ea\u3067\u4f7f\u3046\u306e\u3067\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089Q\u756a\u76ee\u304c\u4f7f\u3046\u8981\u7d20\u306e\u6700\u5927\u5024y\n    C.sort()\n    if len(C) < Q:\n        continue\n    y = C[Q-1]\n    ans = min(ans, y - x)\nprint(ans)\n", "from itertools import*\nN,K,Q,*A=map(int,open(0).read().split())\nl=len\ns=sorted\nprint(min(c[Q-1]-Y for c,Y in zip((s(sum((v[:l(v)-K+1]for v in(s(v)for k,v in groupby(A,lambda a:a>=Y)if k)if l(v)>=K),[]))for Y in A),A)if l(c)>=Q))", "n,k,q=map(int,input().split())\nl=list(map(int,input().split()))\nans=10**10\nfor i in range(n):\n    x=l[i]\n    tmp=[]\n    z=[]\n    for j in range(n):\n        if l[j]>=x:\n            tmp.append(l[j])\n        if l[j]<x or j==n-1:\n            tmp.sort()\n            if len(tmp)-k+1>0:\n                z+=tmp[:len(tmp)-k+1]\n            tmp=[]\n    z.sort()\n    if len(z)>=q:\n        ans=min(ans,z[q-1]-x)\nprint(ans)", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, K, Q = MAP()\nA = LIST()\n\nans = INF\n# \u4f7f\u3046\u8981\u7d20\u306e\u6700\u5c0f\u5024\u3068\u3059\u308b\u5024x\u3092\u5168\u63a2\u7d22\nfor x in A:\n    # \u6570\u5217A\u3092x\u672a\u6e80\u306e\u5024\u3067\u533a\u5207\u3063\u305f\u6570\u5217B\u3092\u4f5c\u308b\n    B = []\n    tmp = []\n    for i in range(N):\n        if A[i] >= x:\n            tmp.append(A[i])\n        else:\n            B.append(tmp)\n            tmp = []\n    B.append(tmp)\n    # \u6570\u5217B\u5185\u306e\u5404\u6570\u5217\u304b\u3089\u3001\u4f7f\u3048\u308b\u8981\u7d20\u3092\u96c6\u3081\u308b\n    C =  []\n    for li in B:\n        m = len(li)\n        li.sort()\n        C += li[:max(m-K+1, 0)]\n    # \u96c6\u3081\u305f\u8981\u7d20\u304b\u3089Q\u500b\u3092\u30af\u30a8\u30ea\u3067\u4f7f\u3046\u306e\u3067\u3001\u5c0f\u3055\u3044\u65b9\u304b\u3089Q\u756a\u76ee\u304c\u4f7f\u3046\u8981\u7d20\u306e\u6700\u5927\u5024y\n    C.sort()\n    if len(C) < Q:\n        continue\n    y = C[Q-1]\n    ans = min(ans, y - x)\nprint(ans)\n", "n,k,q=map(int,input().split())\na=list(map(int,input().split()))\nans=10**10\nfor x in a:\n  b=[[]]\n  can=0\n  for i in a:\n    if i<x:\n      if len(b[-1]):b.append([])\n    else:b[-1].append(i)\n  if len(b[-1])==0:del b[-1]\n  for i in range(len(b)):b[i].sort()\n  c=[]\n  for i in b:\n    i.sort()\n    if len(i)>=k:c+=i[:len(i)-k+1]\n  if len(c)<q:continue\n  c.sort()\n  ans=min(ans,c[q-1]-c[0])\nprint(ans)", "from itertools import*\nN,K,Q,*A=map(int,open(0).read().split())\ns=sorted\nprint(min((s(sum((v[:1-K or None]for v in(k*s(v)for k,v in groupby(A,lambda a:a>=Y))),[]))[Q-1:]+[2e9])[0]-Y for Y in A))", "import sys\ninput = sys.stdin.readline\n\nn, k, q = map(int, input().split())\nA = list(map(int, input().split())) + [-1]\nans = float(\"inf\")\nfor a in A:\n  L = []\n  K = []\n  for t in A:\n    if t >= a:\n      L.append(t)\n    else:\n      L.sort()\n      for c in range(len(L)-k+1):\n        K.append(L[c])\n      L = []\n  K.sort()\n  if len(K) < q:\n    continue\n  else:\n    y = K[q-1]\n    ans = min(ans, y-a)\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    n, k, q = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    b = [[v, i]for i, v in enumerate(a)]\n    b.sort()\n    index = [0]*n\n    for i in range(n):\n        index[i] = b[i][1]\n\n    judge = [[] for i in range(n)]\n    already = [-1, n]\n\n    for i in range(n):\n        \n        for j in range(len(already)-1):\n            key = a[already[j]+1:already[j+1]]\n            if len(key) >= k:\n                judge[i].append(key)\n        already.append(index[i])\n        already.sort()\n\n    ans = 1e9\n    for i in range(n):\n        if not judge[i]:\n            break\n        m = b[i][0]\n        sub = []\n        for values in judge[i]:\n            values.sort()\n            for j in range(len(values)-k+1):\n                sub.append(values[j])\n        sub.sort()\n        if len(sub) < q:\n            break\n        M = sub[q-1]\n        ans = min(ans, M-m)\n\n    print(ans)\n\n\n    \ndef __starting_point():\n    main()\n\n\n__starting_point()", "n,k,q = map(int, input().split())\na = list(map(int, input().split()))\n\ndef parse(b):\n    ret = []\n    tmp = []\n    for ai in a:\n        if ai >= b:\n            tmp.append(ai)\n        else:\n            if len(tmp) >= k:\n                tmp.sort(reverse=True)\n                for i in range(k-1,len(tmp)):\n                    ret.append(tmp[i])\n            tmp = []\n    else:\n        if len(tmp) >= k:\n            tmp.sort(reverse=True)\n            for i in range(k-1,len(tmp)):\n                ret.append(tmp[i])\n    return ret\n\nans = 10**10\n\nfor b in set(a):\n    lis = parse(b)\n    if len(lis) < q:\n        continue\n    lis.sort()\n    ans_tmp = lis[q-1] - lis[0]\n    ans = min(ans, ans_tmp)\n\nprint(ans)", "\n\"\"\"\nWriter: SPD_9X2\nhttps://atcoder.jp/contests/arc098/tasks/arc098_c\n\nN\u306e\u5236\u7d04\u304c\u5c0f\u3055\u3044\u2192O(N**2) ?\n\n\u5c0f\u3055\u3044\u65b9\u304b\u3089Q\u3053\u306e\u96c6\u5408\u306b\u3059\u308b\u306e\u306f\u7c21\u5358\u2192\u6700\u5c0f\u3092\u542b\u3080\u3088\u3046\u306b\u7bc4\u56f2\u3092\u9078\u3093\u3067\u3051\u3070\u826f\u3044\n\u91cd\u8981\u306a\u306e\u306f\u6700\u5c0f\u306e\u5974\u3092\u98db\u3070\u3057\u3066\u7bc4\u56f2\u304c\u3061\u3062\u3081\u3089\u308c\u308b\u3068\u304d\u3002\n\n\u2192\u6700\u5c0f\u5024\u3092\u5168\u63a2\u7d22\u3059\u308b\u306e\u304b\uff1f\n\n\u6700\u5c0f\u5024\u3092\u6c7a\u3081\u3001\u305d\u308c\u4ee5\u4e0b\u306e\u6570\u5b57\u3092\u542b\u307e\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u308b\u3060\u3051\u5c0f\u3055\u3044\u65b9\u304b\u3089\u3068\u3063\u3066\u3044\u304f\uff1f\n\nk\u4ee5\u4e0b\u306e\u6570\u5b57\u306eindex\u3067\u914d\u5217\u3092\u5207\u308b\u3002O(N)\n\u5404\u6570\u5b57\u304c\u3069\u3053\u306b\u5c5e\u3057\u3066\u3044\u308b\u304b\u3092\u4e8c\u5206\u63a2\u7d22\u3067\u5c0f\u3055\u3044\u65b9\u304b\u3089\u3068\u3063\u3066\u3044\u304f\uff1f\nO(NlogN)\n\n\u2192O(N**2logN)\u3067\u89e3\u3051\u308b(\u3061\u3087\u3063\u3068\u304d\u3064\u304f\u306a\u3044\u3067\u3059\u304b)\n\u5404\u6570\u5b57\u304c\u9818\u57df\u5dee\u3057\u3066\u304a\u304f\u304b\u524d\u51e6\u7406\u3057\u3066\u7f6e\u3051\u3070O(N**2)\u3067\u89e3\u3051\u308b\u304b\u306a\n\n\"\"\"\n\nN,K,Q = list(map(int,input().split()))\na = list(map(int,input().split()))\n\nai = []\nfor i in range(N):\n    ai.append([a[i],i])\nai.sort()\n\nans = ai[Q-1][0]-ai[0][0]\n\nfor cant in range(N-Q):\n\n    #0 ~ cant\u307e\u3067\u306eai[i]\u3092\u53d6\u3063\u3066\u306f\u3044\u3051\u306a\u3044\n\n    rannum = [-1] * (cant+2)\n    rannum[0] = 0\n    indlis = [0] * N #rannum\u306eindex\u3092\u6307\u3057\u793a\u3059\n\n    for i in range(cant+1):\n\n        na,nind = ai[i]\n        indlis[nind] += 1\n\n\n    for i in range(N):\n\n        if i != N-1:\n            indlis[i+1] += indlis[i]\n\n        rannum[indlis[i]] += 1\n\n    #print (rannum , indlis)\n\n    ncat = []\n    for i in range(cant+1,N):\n\n        na,nind = ai[i]\n\n        if rannum[indlis[nind]] >= K:\n            ncat.append(na)\n            rannum[indlis[nind]] -= 1\n\n        if len(ncat) == Q:\n            ans = min(ans , ncat[-1] - ncat[0])\n            break\n\n    #print (ncat)\n    \nprint (ans)\n\n    \n\n   \n\n    \n", "N, K, Q = list(map(int, input().split()))\nA = list(map(int, input().split()))\nans = 10 ** 10\n\nfor a in A:\n    candidates = []\n    tmp = []\n    for b in A:\n        if a <= b:\n            tmp.append(b)\n        else:\n            if K > 1:\n                for i in sorted(tmp)[:-K+1]:\n                    candidates.append(i)\n            else:\n                for i in sorted(tmp):\n                    candidates.append(i)\n            tmp = []\n    if K > 1:\n        for i in sorted(tmp)[:-K+1]:\n            candidates.append(i)\n    else:\n        for i in sorted(tmp):\n            candidates.append(i)\n    candidates.sort()\n    if len(candidates) >= Q:\n        ans = min(ans, candidates[Q-1] - a)\nprint(ans)\n", "n,k,q=map(int,input().split())\na=list(map(int,input().split()))\nans=10**10\nfor y in a:\n\tt=[[]]\n\tfor i in a:\n\t\tif i<y:\n\t\t\tif len(t[-1]):t.append([])\n\t\telse:\n\t\t\tt[-1].append(i)\n\tif len(t[-1])==0:del t[-1]\n\tm=[]\n\tfor i in t:\n\t\tif len(i)<k:continue\n\t\tm+=sorted(i)[:len(i)-k+1]\n\tif len(m)<q:continue\n\tm.sort()\n\tans=min(ans,m[q-1]-y)\nprint(ans)", "n, k, q = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = 10 ** 10\nfor i, y in enumerate(a):\n    li = []\n    l = 0\n    cnd = []\n    l_cnd = 0\n    for j, x in enumerate(a + [-1]):\n        if x < y:\n            if l - k + 1 >= 0:\n                li.sort()\n                cnd += li[:l-k+1]\n                l_cnd += l - k + 1\n            li = []\n            l = 0\n        else:\n            li.append(x)\n            l += 1\n\n    if l_cnd >= q:\n        cnd.sort()\n        sub = cnd[q-1] - y\n        ans = min(ans, sub)\n\nprint(ans)\n", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nn,k,q=MI()\naa=LI()\npp=list(sorted(set(aa)))\n\n# \u6700\u5927-\u6700\u5c0f\u3092\u8fd4\u3059\ndef diff(p):\n    can=[]\n    cur=[]\n    for a in aa+[-1]:\n        if a<p:\n            if len(cur)==n:\n                can=cur\n                break\n            if len(cur)>=k:\n                cur.sort()\n                if k==1:can+=cur\n                else:can+=cur[:-(k-1)]\n            cur=[]\n        else:\n            cur.append(a)\n    if len(can)<q:\n        return -1\n    can.sort()\n    res=can[q-1]-can[0]\n    return res\n\n#print(pp)\nans=10**16\nfor p in pp:\n    ret=diff(p)\n    if ret==-1:break\n    #print(p,ret)\n    ans=min(ans,ret)\n\nprint(ans)\n", "n,k,q = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nans = 10**18\nfor x in A:\n    B = []\n    C = []\n    for a in A:\n        if a >= x:\n            C.append(a)\n        else:\n            if len(C) >= k:\n                C.sort()\n                B += C[0:len(C)-k+1]\n            C = []\n    else:\n        if len(C) >= k:\n            C.sort()\n            B += C[0:len(C)-k+1]\n    if len(B) >= q:\n        B.sort()\n        ans = min(ans, B[q-1]-x)\nprint(ans)\n", "import sys\ndef MI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\n\n\nN,K,Q = MI()\nA = LI()\n\nans = 10**18\nfor i in range(N):  # \u53d6\u308a\u51fa\u3059\u8981\u7d20\u306e\u6700\u5c0f\u5024\u306fA[i]\n    a = A[i]\n    left,right = 0,0\n    X = []  # \u53d6\u308a\u51fa\u3059\u6570\u306e\u5019\u88dc\n    while right < N:\n        if A[right] >= a:\n            right += 1\n        else:\n            if right-left >= K:\n                Y = A[left:right]\n                Y.sort()\n                for j in range(right-left-K+1):\n                    X.append(Y[j])\n            right += 1\n            left = right\n    if right-left >= K:\n        Y = A[left:right]\n        Y.sort()\n        for j in range(right-left-K+1):\n            X.append(Y[j])\n    if len(X) < Q or min(X) != a:\n        continue\n    X.sort()\n    ans = min(ans,X[Q-1]-a)\n\nprint(ans)\n", "from itertools import*\nN,K,Q,*A=map(int,open(0).read().split())\nl=len\ns=sorted\nprint(min(c[Q-1]-Y for c,Y in zip((s(sum((v[:l(v)-K+1]for v in(s(v)for k,v in groupby(A,lambda a:a>=Y)if k)if l(v)>=K),[]))for Y in A),A)if l(c)>=Q))", "N, K, Q = list(map(int, input().split()))\nA = [int(i) for i in input().split()]\n\ndef solve() :\n    if Q == 1 : return 0\n        \n    ret = float('inf')\n    for i in range(N) :\n        l = -1\n        for j in range(i, max(-1, i - K), -1) :\n            if A[j] < A[i] :\n                l = j\n                break\n        r = N      \n        for j in range(i, min(N, i + K)) :\n            if A[j] < A[i] :\n                r = j\n                break\n                \n        if r - l - 1 < K :\n            continue\n            \n        B = A[::]\n        B.pop(i)\n        \n        C = [-1]\n        for j in range(N - 1) :\n            if B[j] < A[i] :\n                C.append(j)\n        C.append(N - 1)\n        \n        D = []\n        for j in range(len(C) - 1) :\n            if C[j+1] - C[j] >= K :\n                D += sorted(B[C[j]+1:C[j+1]])[:C[j+1] - C[j] - K]\n        \n        if len(D) >= Q - 1 :\n            D.sort()\n            ret = min(ret, D[Q-2] - A[i])\n\n    return ret\n    \nprint((solve()))\n", "N, K, Q = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ndef calc(x):\n    grp = [[]]\n    for a in A:\n        if a < x and len(grp[-1]) > 0:\n            grp.append([])\n        if a >= x:\n            grp[-1].append(a)\n    L = []\n    for g in grp:\n        g.sort()\n        L += g[:max(0, len(g) - K + 1)]\n    L.sort()\n\n    if len(L) < Q or L[0] != x:\n        return 10**18\n    return L[Q - 1] - x\n\nans = 10**18\nfor a in A:\n    ans = min(ans, calc(a))\nprint(ans)\n", "n,k,q,*a=map(int,open(0).read().split())\nans=10**18\nfor y in set(a):\n  c=[]\n  tmp=[]\n  for aa in a:\n    if aa>=y:\n      tmp.append(aa)\n    else:\n      if len(tmp)>=k:\n        c+=sorted(tmp)[:len(tmp)-k+1]\n      tmp=[]\n  if len(tmp)>=k:\n    c+=sorted(tmp)[:len(tmp)-k+1]\n  if len(c)>=q:\n    c.sort()\n    x=c[q-1]\n    ans=min(ans,x-y)\nprint(ans)", "N,K,Q,*A = map(int, open(0).read().split())\nans = 10**10\nfor i in range(N-K+1):\n  c = min(A[i:i+K])\n  ls = []\n  x = []\n  for d in A:\n    if d>=c:\n      x.append(d)\n    else:\n      ls.append(x)\n      x = []\n  ls.append(x)\n  m = []\n  for x in ls:\n    x.sort()\n    m += x[:max(len(x)-K+1,0)]\n  if len(m)<Q:\n    continue\n  m.sort()\n  y = m[Q-1]\n  ans = min(ans,y-c)\nprint(ans)", "import sys\nimport math\nfrom collections import defaultdict\nfrom bisect import bisect_left, bisect_right\n\nsys.setrecursionlimit(10**7)\ndef input():\n    return sys.stdin.readline()[:-1]\n\nmod = 10**9 + 7\n\ndef I(): return int(input())\ndef LI(): return list(map(int, input().split()))\ndef LIR(row,col):\n    if row <= 0:\n        return [[] for _ in range(col)]\n    elif col == 1:\n        return [I() for _ in range(row)]\n    else:\n        read_all = [LI() for _ in range(row)]\n        return map(list, zip(*read_all))\n\n#################\n\nN,K,Q = LI()\nA = LI()\n\n# \u6700\u5c0f\u5024\u3092\u6c7a\u3081\u6253\u3061\u3059\u308b\u3068\u533a\u9593\u3092\u5206\u5272\u3067\u304d\u308b\n\nAval = set(A)\nans = float('inf')\nfor a in Aval:\n    now = []\n    mins = []\n    num = 0\n    for i in range(N):\n        if A[i] >= a:\n            now.append(A[i])\n        else:\n            if len(now) >= K:\n                now.sort()\n                mins.extend(now[:len(now)-K+1])\n                num += len(now)-K+1\n            now = []\n    if len(now) >= K:\n        now.sort()\n        mins.extend(now[:len(now)-K+1])\n        num += len(now)-K+1\n    if num >= Q:\n        mins.sort()\n        if mins[Q-1]-a < ans:\n            ans = mins[Q-1]-a\n\nprint(ans)", "n,k,q = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nans = 10**18\nfor x in A:\n    B = []\n    C = []\n    for a in A:\n        if a >= x:\n            C.append(a)\n        else:\n            if len(C) >= k:\n                C.sort()\n                B += C[0:len(C)-k+1]\n            C = []\n    else:\n        if len(C) >= k:\n            C.sort()\n            B += C[0:len(C)-k+1]\n    if len(B) >= q:\n        B.sort()\n        ans = min(ans, B[q-1]-x)\nprint(ans)\n", "n,k,q=list(map(int,input().split()))\na=list(map(int,input().split()))\nans=10**9\nfor i in a:\n    A=[]\n    l=[]\n    ln=0\n    for j in a+[-1]:\n      if i>j:\n        if ln-k+1>=0:\n          l.sort()\n          A+=l[:ln-k+1]\n        l=[]\n        ln=0\n      else:\n        l.append(j)\n        ln+=1\n    if len(A)<q:\n      continue\n    else:\n      A.sort()\n      ans=min(ans,A[q-1]-i)\nprint(ans)", "from collections import defaultdict\nfrom bisect import bisect_left\n\nn,k,q = map(int,input().split())\na = list(map(int,input().split()))\ns = sorted(list(set(a)))\ndic = defaultdict(list)\nfor i,j in enumerate(a):\n    dic[j].append(i)\n\nans = 10**20\nuse = [-1,n]\n\nfor i in range(len(s)):\n    l = []\n    for j in range(len(use)-1):\n        x,y = use[j],use[j+1]\n        if y-x-1 >= k:\n            l2 = []\n            for t in range(x+1,y):\n                l2.append(a[t])\n            l2.sort()\n            for t in range(y-x-k):\n                l.append(l2[t])\n    if len(l) >= q:\n        l.sort()\n        ans = min(ans,l[q-1]-l[0])\n    for j in dic[s[i]]:\n        use.insert(bisect_left(use,j),j)\nprint(ans)", "n, k, q = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = 10 ** 10\nfor y in a:\n    li = []\n    l = 0\n    cnd = []\n    l_cnd = 0\n    for x in a + [-1]:\n        if x < y:\n            if l - k + 1 >= 0:\n                li.sort()\n                cnd += li[:l-k+1]\n                l_cnd += l - k + 1\n            li = []\n            l = 0\n        else:\n            li.append(x)\n            l += 1\n\n    if l_cnd >= q:\n        cnd.sort()\n        sub = cnd[q-1] - y\n        ans = min(ans, sub)\n\nprint(ans)\n", "import bisect\nn,k,q = map(int,input().split())\na = list(map(int,input().split()))\nif q == 1:\n  print(0)\n  return()\nls = [-1,n]\nb = sorted(((a[i],i) for i in range(n)))\nansls = [b[q-1][0]-b[0][0]]\nspace = [n]\nqc = q\nfor i,x in enumerate(b):\n  for j in range(i,n):\n    idx = bisect.bisect_left(ls,b[j][1])\n    if space[idx-1] < k:\n      continue\n    qc -= 1\n    space[idx-1] -= 1\n    if qc == 0:\n      ansls.append(b[j][0]-x[0])\n      break\n  ins = bisect.bisect_left(ls,x[1])\n  ls.insert(ins,x[1])\n  space = []\n  qc = q\n  for j in range(1,i+3):\n    space.append(ls[j]-ls[j-1]-1)\nprint(min(ansls))", "# \u89e3\u8aacAC\nN,K,Q = map(int, input().split())\nA = [int(i) for i in input().split()]\n\ndef main():\n    ans = float(\"inf\")\n\n    # A[i]: \u6700\u5c0f\u5024X\n    for i in range(N):\n        # \u6700\u5927\u5024Y\u306e\u5019\u88dc\n        can = []\n\n        # A[left:right]: A[i]\u4ee5\u4e0a\u306e\u9023\u7d9a\u90e8\u5206\u5217\n        left = 0\n        while left < N:\n            right = left\n            while right < N and A[i] <= A[right]:\n                right += 1\n\n            # \u9023\u7d9a\u90e8\u5206\u5217\u9577\n            L = right - left\n\n            tmp = sorted([A[j] for j in range(left, right)])\n            can += tmp[:max(0, L - K + 1)]\n\n            left = right + 1\n        \n        # Q\u756a\u76ee\u306b\u5c0f\u3055\u3044\u3082\u306e\u304cY\u306e\u6700\u5c0f\u5024\n        can.sort()\n        if len(can) >= Q:\n            ans = min(ans, can[Q - 1] - A[i])\n\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "#from collections import deque,defaultdict\nprintn = lambda x: print(x,end='')\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      map(int, input().split())\nins = lambda : input().strip()\nDBG = True  and False\nBIG = 10**18\nR = 10**9 + 7\n#R = 998244353\n\ndef ddprint(x):\n  if DBG:\n    print(x)\n\nimport heapq\nn,k,q = inm()\na = inl()\nmn = BIG\nfor i in range(n):\n    #ddprint(f\"{i=}\")\n    lo = a[i]\n    gr = []\n    bg = -1\n    for j in range(n):\n        #ddprint(f\"  {j=} {lo=} {bg=} {a[j]=}\")\n        if lo<=a[j]:\n            if bg<0:\n                bg = j\n        else:\n            if bg>=0:\n                if j>=bg+k:\n                    gr.append((bg,j))\n                bg = -1\n    if bg>=0 and n>=bg+k:\n        gr.append((bg,n))\n    ddprint(gr)\n    h = []\n    for bg,ed in gr:\n        b = a[bg:ed]\n        b.sort()\n        #ddprint(f\"{bg=} {ed=} {b=}\")\n        for j in range(len(b)-k+1):\n            heapq.heappush(h,b[j])\n    ddprint(h)\n    if len(h)<q:\n        continue\n    mn0 = BIG\n    mx = -1\n    for j in range(q):\n        v = heapq.heappop(h)\n        mx = max(mx,v)\n        mn0 = min(mn0,v)\n    mn = min(mn,mx-mn0)\nprint(mn)\n", "from collections import defaultdict\nfrom bisect import bisect_left\n\nn,k,q = map(int,input().split())\na = list(map(int,input().split()))\ns = sorted(list(set(a)))\ndic = defaultdict(list)\nfor i,j in enumerate(a):\n    dic[j].append(i)\n\nans = 10**20\nuse = [-1,n]\n\nfor i in range(len(s)):\n    l = []\n    for j in range(len(use)-1):\n        x,y = use[j],use[j+1]\n        if y-x-1 >= k:\n            l2 = []\n            for t in range(x+1,y):\n                l2.append(a[t])\n            l2.sort()\n            for t in range(y-x-k):\n                l.append(l2[t])\n    if len(l) >= q:\n        l.sort()\n        ans = min(ans,l[q-1]-l[0])\n    for j in dic[s[i]]:\n        use.insert(bisect_left(use,j),j)\nprint(ans)", "import sys\nfrom heapq import *\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nres = 0\n\n\ndef resolve():\n    n, k, q = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    res = f_inf\n    for i in range(n):\n        section = []\n        pick = []\n        for j in range(n):\n            if A[j] < A[i]:\n                l = len(section) - k + 1\n                for _ in range(l):\n                    pick.append(heappop(section))\n                section.clear()\n            else:\n                heappush(section, A[j])\n        l = len(section) - k + 1\n        for _ in range(l):\n            pick.append(heappop(section))\n\n        if len(pick) >= q:\n            pick.sort()\n            res = min(res, pick[q - 1] - pick[0])\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\nN, K, Q = map(int, input().split())\na = list(map(int, input().split()))\ntt = a[: ]\ninf = 10 ** 10\nres = inf + 0\nfor mn in sorted(set(a)):\n  t = [[]]\n  for i in range(N):\n    if tt[i] == inf:\n      if t[-1] != []: t.append([])\n    else: t[-1].append(a[i])\n  ttt = []\n  for i in range(len(t)):\n    t[i].sort()\n    for j in range(len(t[i]) - K + 1):\n      ttt.append(t[i][j])\n  if len(ttt) < Q: break\n  ttt.sort()\n  res = min(res, ttt[Q - 1] - ttt[0])\n  for i in range(N):\n    if a[i] == mn: tt[i] = inf\nprint(res)", "N, K, Q = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nAc = [(a, i) for i, a in enumerate(A)]\nAc.sort()\n#print(Ac)\nans = Ac[Q-1][0] - Ac[0][0]\nimps = [N]\nfor j in range(N):\n  a, i = Ac[j]\n  imps.append(i)\n  imps.sort()\n  kp = 0\n  possibles = []\n  for k in imps:\n    if k - kp >= K:\n      Ak = A[kp:k]\n      Ak.sort()\n      #print(Ak)\n      possibles += Ak[:len(Ak)-K+1]\n    kp = k+1\n  \n  if len(possibles) < Q: break\n  possibles.sort()\n  #print(possibles, imps, possibles[Q-1] - possibles[0])\n  ans = min(ans, possibles[Q-1] - possibles[0])\n  \nprint(ans)\n", "N, K, Q = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\ndef calc(x):\n    grp = [[]]\n    for a in A:\n        if a < x and len(grp[-1]) > 0:\n            grp.append([])\n        if a >= x:\n            grp[-1].append(a)\n    L = []\n    for g in grp:\n        g.sort()\n        L.extend(g[:max(0, len(g) - K + 1)])\n    L.sort()\n\n    if len(L) < Q or L[0] != x:\n        return 10**18\n    return L[Q - 1] - x\n\nans = 10**18\nfor a in A:\n    ans = min(ans, calc(a))\nprint(ans)\n", "N, K, Q = map(int, input().split())\nA = [int(a) for a in input().split()]\nS = set(A)\nI = sorted(list(S))\nm = len(I)\nD = {a: i for i, a in enumerate(I)}\nans = 1 << 30\nfor i in range(m):\n    l = I[i]\n    LL = []\n    L = []\n    for a in A:\n        if a < l:\n            if L:\n                if len(L) >= K:\n                    LL += sorted(L)[:len(L) - K + 1]\n                L = []\n        else:\n            L.append(a)\n    if L:\n        if len(L) >= K:\n            LL += sorted(L)[:len(L) - K + 1]\n    if len(LL) >= Q:\n        ans = min(ans, sorted(LL)[Q-1] - l)\nprint(ans)", "import sys\ndef main():\n    input = sys.stdin.readline\n    N,K,Q=map(int, input().split())\n    *A,=map(int, input().split())\n\n    ans=10**10\n    from heapq import heappop, heappush\n    A.append(-1)\n    for y in A:\n        if y==-1: break\n        c=[]\n        t=[]\n        for a in A:\n            if a >= y:\n                heappush(t, a)\n            else:\n                for _ in range(len(t)-(K-1)):\n                    heappush(c, heappop(t))\n                t=[]\n        if len(c) < Q: continue\n        x=[heappop(c) for _ in range(Q)][-1]\n        ans = min(ans, x-y)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "from itertools import*\nN,K,Q,*A=map(int,open(0).read().split())\ns=sorted\nprint(min((s(sum((v[:1-K or N]for v in(k*s(v)for k,v in groupby(A,lambda a:a>=Y))),[]))[Q-1:]+[2e9])[0]-Y for Y in A))", "def main():\n    from collections import Counter as ct\n    n, k, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = ct(a).keys()\n    a += [0]\n    ans = []\n    for i in c:\n        temp = []\n        temp2 = []\n        for j in a:\n            if j >= i:\n                temp2.append(j)\n            else:\n                if temp2:\n                    temp2.sort()\n                    if len(temp2) >= k:\n                        for l in temp2[:len(temp2)-k+1]:\n                            temp.append(l)\n                    temp2 = []\n        if len(temp) >= q:\n            temp.sort()\n            ans.append(temp[q-1]-i)\n    print(min(ans))\n\n\nmain()", "from itertools import*\nN,K,Q,*A=map(int,open(0).read().split())\ns=sorted\nprint(min((s(sum((v[:max(0,-~(len(v)-K))]for v in(k*s(v)for k,v in groupby(A,lambda a:a>=Y))),[]))[Q-1:]or[2e9])[0]-Y for Y in A))", "N, K, Q = map(int, input().split())\nA = list(map(int, input().split()))\n\ndef find_maximum(y):\n  C = [[]]\n  for a in A:\n    if a < y:\n      if len(C[-1]) > 0:\n        C.append([])\n    else:\n      C[-1].append(a)\n  cand_x = []\n  for Ci in C:\n    m = len(Ci)\n    if m >= K:\n      Ci.sort()\n      cand_x += Ci[:m-K+1]\n  if len(cand_x) >= Q:\n    cand_x.sort()\n    return cand_x[Q-1], cand_x[0]\n  else:\n    return 10**18, 0\n\nans = 10**18\nfor a in A:\n  x, y = find_maximum(a)\n  ans = min(ans, x-y)\n\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\nN, K, Q = map(int, input().split())\nA = list(map(int, input().split()))\nans = float('inf')\nfor lb in sorted(A):\n    tmp = []\n    use = []\n    for a in A + [-1]:\n        if a >= lb:\n            tmp.append(a)\n        else:\n            if len(tmp) >= K:\n                use += sorted(tmp)[:len(tmp)-K+1]\n            tmp = []\n    if len(use) < Q:\n        break\n    ans = min(ans, sorted(use)[Q-1] - lb)\nprint(ans)", "from collections import defaultdict\nimport heapq\n\nn, k, q = map(int, input().split())\na = list(map(int, input().split()))\nok = [0] * n\nd = defaultdict(lambda : set())\nh = []\nfor i in range(k - 1):\n    heapq.heappush(h, [a[i], i])\n    d[a[i]].add(i)\nfor i in range(k - 1, n):\n    heapq.heappush(h, [a[i], i])\n    d[a[i]].add(i)\n    while h:\n        if h[0][1] >= i - k + 1:\n            break\n        heapq.heappop(h)\n    m = list(d[h[0][0]])\n    for j in m:\n        if j >= i - k + 1:\n            ok[j] = 1\n        d[h[0][0]].remove(j)\nans = 1145141919810\nfor i in range(n):\n    if ok[i]:\n        s, t = [], []\n        for j in range(n):\n            if a[i] > a[j]:\n                s.sort()\n                for l in range(max(0, len(s) - k + 1)):\n                    t.append(s[l])\n                s = []\n            else:\n                s.append(a[j])\n        s.sort()\n        for l in range(max(0, len(s) - k + 1)):\n            t.append(s[l])\n        t.sort()\n        if len(t) >= q:\n            ans = min(ans, t[q - 1] - t[0])\nprint(ans)", "from collections import defaultdict, deque, Counter\nfrom decimal import *\nfrom heapq import heapify, heappop, heappush\nimport math\nimport random\nimport string\nfrom copy import deepcopy\nfrom itertools import combinations, permutations, product\nfrom operator import mul, itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\ndef getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\ndef rand_ints_nodup(ran1, ran2, rantime):\n  ns = []\n  while len(ns) < rantime:\n    n = random.randint(ran1, ran2)\n    if not n in ns:\n      ns.append(n)\n  return sorted(ns)\n\ndef rand_query(ran1, ran2, rantime):\n  r_query = []\n  while len(r_query) < rantime:\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n    if not n_q in r_query:\n      r_query.append(n_q)\n  return sorted(r_query)\n\nsys.setrecursionlimit(1000000000)\nmod = 10 ** 9 + 7\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\n\n#############\n# Main Code #\n#############\n\n\"\"\"\n\u6570\u5217A\n\u9577\u3055K\u306e\u9023\u7d9a\u3059\u308b\u90e8\u5206\u5217\u30921\u3064\u9078\u3076\u3000\n\u305d\u306e\u4e2d\u306e\u6700\u5c0f\u306e\u3082\u306e\u3092\u53d6\u308a\u9664\u304f\u3000inf\u306b\u3059\u308c\u3070\uff1f\n\u53d6\u308a\u9664\u3044\u305f\u8981\u7d20\u306e\u6700\u5927\u5024 - \u6700\u5c0f\u5024\u3092\u30de\u30a4\u30ca\u30b9\u306b\u3057\u305f\u3044\u3000\u4e8c\u5206\u63a2\u7d22\u3068\u304b\u3067\u304d\u308b?\n\u6700\u7d42\u5f62\u3092\u30a4\u30e1\u30fc\u30b8\u3059\u308b\n\n\u4e00\u756a\u671b\u307e\u3057\u3044\u306e\u306f\nQ\u500b\u306b\u3064\u3044\u3066\u6700\u5c0f\u533a\u9593\u306eQ\u500b\u3092\u53d6\u308b\u3053\u3068\n\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u3092\u53d6\u3089\u305a\u306b\u90fd\u5408\u306e\u3044\u3044\u3068\u3053\u3060\u3051\u53d6\u308a\u305f\u3044\n\u5c0f\u3055\u3044\u9806\u306b\u4ed5\u5207\u308a\u3092\u7acb\u3066\u3066\u3044\u304f\n\u307e\u305a\u5c0f\u3055\u3044\u9806\u306b1 2 3 4...\u3053\u308c\u306f\u5fc5\u305a\u53d6\u308c\u308b\u3000\uff081 2 3 5...\u3068\u304b\u306f1234\u3088\u308a\u5927\u304d\u304f\u306a\u308b\uff09\n\u6b21\u306b2 3 4 5\u3092\u53d6\u308c\u308b\u304b\nN\u500b\u76ee\u306e\u6570\u3063\u3066\u96e3\u3057\u304f\u306a\u3044\uff1f\n\n5 3 2\n4 3 1 5 2 \u306e\u5834\u5408\n4 3 [1 5 2]\n4 [3 5 2]\n\nN <= 2000\u306a\u306e\u3067 1, 2, 3, 4\u3067\u533a\u5207\u3063\u3066\u3044\u304f\u306e\u306f\u3067\u304d\u305d\u3046\nQ\u306e\u4e2d\u306b1\u3092\u5165\u308c\u308b\u5834\u5408\u3001\u6c42\u3081\u308b\u5024\u306fAq - A1\n\n1 1 3 5 6 7 \u306e\u5834\u5408\n1\u756a\u76ee\u306e1\u4ee5\u964d\u3092\u4f7f\u3046\u3068 1 1 3 5\n2\u756a\u76ee\u306e1\u4ee5\u964d\u3092\u4f7f\u3046\u3068 1 3 5 6\n3\u4ee5\u964d\u3092\u4f7f\u3046\u3068       3 5 6 7\n\u306a\u306e\u30673\u4ee5\u964d\u3092\u4f7f\u3046\u65b9\u304c\u3044\u3044\nQ = 4\u306e\u6642\u3001\u5019\u88dc\u3068\u306a\u308b\u306e\u306f\n[\u5c0f\u3055\u3044\u65b9\u304b\u30891\u756a\u76ee\u30012\u756a\u76ee\u30013\u756a\u76ee...] or\n[\u5c0f\u3055\u3044\u65b9\u304b\u30892\u756a\u76ee\u30013\u756a\u76ee\u30014\u756a\u76ee...] or...\n\n\u305f\u3060\u3057\u3001[\u5c0f\u3055\u3044\u65b9\u304b\u30892\u756a\u76ee\u30013\u756a\u76ee\u30014\u756a\u76ee...]\u3092\u4f5c\u308b\u306b\u306f\u9078\u629e\u7bc4\u56f2\u306b\u5c0f\u3055\u3044\u65b9\u304b\u30891\u756a\u76ee\u3092\u542b\u3081\u306a\u3044\u3053\u3068\u304c\u5fc5\u8981\n4 3 1 5 2 \u306e\u5834\u5408\n\u3000\u3000 \u00d7     1\u306f\u969c\u5bb3\u7269\u306b\u306a\u308b\n\u30d6\u30ed\u30c3\u30af1:[4, 3]\n\u30d6\u30ed\u30c3\u30af2:[5, 2] \u306e\u4e2d\u3067\u3057\u304bK\u3092\u56de\u305b\u306a\u3044\n[\u5c0f\u3055\u3044\u65b9\u304b\u30893\u756a\u76ee\u30014\u756a\u76ee\u30015\u756a\u76ee...]\u306e\u5834\u5408\n\u30d6\u30ed\u30c3\u30af1:[4, 3]\n\u30d6\u30ed\u30c3\u30af2:[5]\n\"\"\"\n\nN, K, Q = getNM()\nA = getList()\npoint = sorted([[A[i], i] for i in range(N)])\n\nflag = [0] * N\nans = float('inf')\n\nfor i in range(N):\n    s = []\n    opt = []\n    for j in range(N):\n        if flag[j] == 1: # \u3057\u304d\u308a\u3042\u308c\u3070\u3000\n            s = []\n        else: # \u3057\u304d\u308a\u306a\u3051\u308c\u3070\n            heappush(s, A[j])\n            if len(s) >= K:\n                opt.append(heappop(s))\n\n    opt.sort()\n    if len(opt) >= Q:\n        ans = min(ans, opt[Q - 1] - opt[0])\n    # \u4ed5\u5207\u308a\u3092\u7acb\u3066\u308b\n    flag[point[i][1]] = 1\n\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\nn, k, q = map(int, input().split())\nA = list(map(int, input().split())) + [-1]\nans = float(\"inf\")\nfor a in A:\n  L = []\n  K = []\n  for t in A:\n    if t >= a:\n      L.append(t)\n    else:\n      L.sort()\n      for c in range(len(L)-k+1):\n        K.append(L[c])\n      L = []\n  K.sort()\n  if len(K) < q:\n    continue\n  else:\n    y = K[q-1]\n    ans = min(ans, y-a)\nprint(ans)", "n, k, q = list(map(int, input().split()))\na = list(map(int, input().split()))\nans = 10000000000000\nfor m in a:\n    res = []\n    l = []\n    for x in a:\n        if x < m and l:\n            if len(l) >= k:\n                l.sort()\n                for p in l[:len(l) - k + 1]:\n                    res.append(p)\n            l = []\n        elif x >= m:\n            l.append(x)\n    if l:\n        if len(l) >= k:\n            l.sort()\n            for p in l[:len(l) - k + 1]:\n                res.append(p)\n    res.sort()\n    if len(res) >= q:\n        ans = min(ans, res[q - 1] - m)\nif ans == 10000000000000:\n    print((-1))\nelse:\n    print(ans)\n", "import sys\ninput = sys.stdin.readline\n\nimport heapq as hp\n\n\ndef main():\n    N, K, Q = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    NUM = sorted(list(set(A)))\n\n    ans = 10**10\n    for n in NUM:\n        Qs = []\n        q = []\n        for i in range(N):\n            if A[i] < n:\n                if q:\n                    Qs.append(q)\n                    q = []\n                continue\n            if not q:\n                q = [A[i]]\n            else:\n                hp.heappush(q, A[i])\n        if q:\n            Qs.append(q)\n        P = []\n        for q in Qs:\n            l = len(q)\n            if l < K: continue\n            for _ in range(min(Q, l-K+1)):\n                v = hp.heappop(q)\n                P.append(v)\n        if len(P) < Q:\n            break\n        P.sort()\n        ans = min(ans, P[Q-1]-P[0])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nN, K, Q = map(int, input().split())\nA = list(map(int, input().split()))\ncannot_use = set([-1])\nans = float('inf')\nfor i in sorted(A):\n    tmp = []\n    use = []\n    for a in A + [-1]:\n        if a not in cannot_use:\n            tmp.append(a)\n        else:\n            if len(tmp) >= K:\n                tmp.sort()\n                use += tmp[:len(tmp)-K+1]\n            tmp = []\n    use.sort()\n    if len(use) < Q:\n        break\n    ans = min(ans, use[Q-1] - i)\n    cannot_use.add(i)\nprint(ans)", "# \u89e3\u8aacAC\nN,K,Q = map(int, input().split())\nA = [int(i) for i in input().split()]\n\nans = float(\"inf\")\n\n# A[i]: \u6700\u5c0f\u5024X\nfor i in range(N):\n    # \u6700\u5927\u5024Y\u306e\u5019\u88dc\n    can = []\n\n    # A[left:right]: A[i]\u4ee5\u4e0a\u306e\u9023\u7d9a\u90e8\u5206\u5217\n    left = 0\n    while left < N:\n        right = left\n        while right < N and A[i] <= A[right]:\n            right += 1\n\n        # \u9023\u7d9a\u90e8\u5206\u5217\u9577\n        L = right - left\n\n        tmp = sorted([A[j] for j in range(left, right)])\n        can += tmp[:max(0, L - K + 1)]\n\n        left = right + 1\n    \n    # Q\u756a\u76ee\u306b\u5c0f\u3055\u3044\u3082\u306e\u304cY\u306e\u6700\u5c0f\u5024\n    can.sort()\n    if len(can) >= Q:\n        ans = min(ans, can[Q - 1] - A[i])\n\nprint(ans)", "def main():\n    N, K, Q, *A = map(int, open(0).read().split())\n\n    ans = float(\"inf\")\n    for Y in set(A):\n        C = []\n        tmp = []\n        for a in A:\n            if a >= Y:\n                tmp.append(a)\n            else:\n                if len(tmp) >= K:\n                    C += sorted(tmp)[:len(tmp) - K + 1]\n                tmp = []\n        if len(tmp) >= K:\n            C += sorted(tmp)[:len(tmp) - K + 1]\n\n        if len(C) >= Q:\n            C.sort()\n            X = C[Q - 1]\n            ans = min(ans, X - Y)\n\n    print(ans)\n\nmain()", "n,k,q = map(int, input().split())\na = list(map(int, input().split()))\n\nans=10**15\nfor i in range(n):\n    x=a[i]\n    y_cand=[]\n    lis=[]\n\n    for j in range(n):\n        if a[j] < x:\n            if len(lis)-k+1 >= 0:\n                lis.sort()\n                y_cand.extend(lis[:len(lis)-k+1])\n            lis=[]\n        else:\n            lis.append(a[j])\n\n    if len(lis)-k+1 >= 0:\n        lis.sort()\n        y_cand.extend(lis[:len(lis)-k+1])\n\n    if len(y_cand) >= q:\n        y_cand.sort()\n        y = y_cand[q-1]\n        ans = min(ans,abs(x-y))\n\nprint(ans)", "import sys\ninput = sys.stdin.readline\nimport heapq as hp\n\nN, K, Q = list(map(int, input().split()))\nA = list(map(int, input().split()))\nXs = sorted(list(set(A)))\n\nans = 10**14\nfor x in Xs:\n    Ps = []\n    tmp = []\n    for a in A:\n        if a >= x:\n            tmp.append(a)\n        else:\n            if len(tmp) >= K:\n                Ps.append(tmp)\n            tmp = []\n    if len(tmp) >= K:\n        Ps.append(tmp)\n    q = []\n    for P in Ps:\n        P.sort()\n        for i, p in enumerate(P):\n            q.append(p)\n            if len(P)-K-i == 0: break\n    if len(q) < Q:\n        break\n    q.sort()\n    ans = min(ans, q[Q-1]-x)\n\nprint(ans)\n", "N,K,Q=map(int, input().split())\n*A,=map(int, input().split())\n\nimport heapq\nans = 10**10\nA.append(-1)\nfor y in A:\n    if y==-1: break\n    p,q=[],[]\n    for a in A:\n        if a >= y:\n            heapq.heappush(p, a)\n        else:\n            for i in range(max(0,len(p)-(K-1))):\n                heapq.heappush(q, heapq.heappop(p))\n            p=[]\n    if len(q) < Q: continue\n    x = -1\n    for i in range(Q):\n        x = heapq.heappop(q)\n    ans = min(ans, x-y)\nprint(ans)", "# -*- coding: utf-8 -*-\nimport sys\nsys.setrecursionlimit(10**9)\nINF=10**18\nMOD=10**9+7\ninput=lambda: sys.stdin.readline().rstrip()\nYesNo=lambda b: bool([print('Yes')] if b else print('No'))\nYESNO=lambda b: bool([print('YES')] if b else print('NO'))\nint1=lambda x:int(x)-1\n\nN,K,Q=map(int,input().split())\nA=list(map(int,input().split()))\nif Q==1:\n    print(0)\n    return()\nans=INF\nfor i,Y in enumerate(A):\n    seqs=[]\n    tmp=[]\n    for j,x in enumerate(A):\n        if i==j:\n            continue\n        if x>=Y:\n            tmp.append(x)\n        else:\n            if tmp:\n                tmp.sort()\n                seqs.append(tmp)\n                tmp=[]\n    if tmp:\n        tmp.sort()\n        seqs.append(tmp)\n    l=[]\n    for seq in seqs:\n        if len(seq)>=K:\n            l.extend(seq[:(len(seq)-K+1)])\n    l.sort()\n    if len(l)>=Q-1:\n        X=l[Q-2]\n        ans=min(ans,X-Y)\nprint(ans)", "n,k,q=map(int, input().split())\nif q==1:\n    print(0)\n    return()\n*a,=map(int, input().split())\na+=[-1]\nans=10**10\nfor i in range(n):\n    ai=a[i]\n    tmp=[10**11]##15\u884c\u76ee\u3067tmp[:0]\u306b\u306a\u308b\u304b\u3089\n    tmp2=[ai]\n    for j in range(n+1):\n        if i==j:\n            continue\n        if a[j]<ai:\n            tmp.sort()\n            if len(tmp)>=k+1:\n                tmp2+=tmp[:-k]\n            tmp=[10**11]###\n        else:\n            tmp.append(a[j])\n            #print(\"test\",tmp)\n    tmp2.sort()\n#    print(tmp,tmp2)\n    if len(tmp2)>=q:    \n#        print(\"test2\")\n        ans=min(ans,tmp2[q-1]-ai)\nprint(ans)", "from itertools import*\nN,K,Q,*A=map(int,open(0).read().split())\ns=sorted\nprint(min((s(sum((v[:max(0,len(v)-K+1)]for v in(k*s(v)for k,v in groupby(A,lambda a:a>=Y))),[]))[Q-1:]or[2e9])[0]-Y for Y in A))", "import sys\ninput = sys.stdin.readline\n\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\n\n\n\"\"\"\n\u5404Ai\u306b\u3064\u3044\u3066\u300c\u305d\u306e\u6570\u3092\u9078\u3070\u306a\u3044\u3067\uff0c\u4f55\u56de\u306e\u884c\u52d5\u304c\u3067\u304d\u307e\u3059\u304b\u300d\u304c\u308f\u304b\u308c\u3070\u3044\u3051\u308b\u304b\u3082?\n\u3044\u3084\uff0c\u306a\u3093\u304b\u9055\u3044\u305d\u3046\uff0e\n\n\u30e1\u30e2:\u4e00\u5fdc\uff0c\u5c0f\u3055\u3044\u3082\u306e\u304c\u3044\u3044\u308f\u3051\u3067\u306f\u306a\u3044\uff0cK=1,Q=2\u30671,10,100,101\u3068\u304b\u306a\u3089\u5f8c\u308d\u4e8c\u3064\u3092\u53d6\u308a\u305f\u3044\n\n\u5f37\u5236\u7684\u306b\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308b\u3082\u306e\u304c\u3042\u308b\u5834\u5408\uff0c\u305d\u308c\u4ed8\u8fd1\u3067\u8003\u3048\u308b?\u3046\u30fc\u3093\n\u5165\u529b\u4f8b2\u3068\u304b\u3092\u898b\u308b\u3068\u300c\u5f37\u5236\u3067\u53d6\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u306e\u304c\u306a\u3044\u5834\u5408\u306f\u81ea\u7531\u306b\u53d6\u308c\u308b\u300d\u307f\u305f\u3044\u306b\u898b\u3048\u308b\u3051\u3069\uff0c\u90e8\u5206\u7684\u306b\u304a\u6b64\u308c\u3092\u64ae\u308b\u524d\u306b\u30a2\u30ec\u3092\u53d6\u3089\u306a\u304d\u3083\u307f\u305f\u3044\u306a\u524d\u63d0\u6761\u4ef6\u307f\u305f\u3044\u306a\u306e\u306f\u51fa\u3066\u304f\u308b\n\n\u9806\u756a\u304c\u3042\u308b\u306e\u3067\u6709\u5411\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\u304b\uff0e\n\u5165\u529b\u4f8b1\u3067\u306f\uff0c1\u3092\u53d6\u3089\u306a\u3044\u30682,3\u306f\u53d6\u308c\u306a\u3044\u306e\u30671\u304b\u30892,3\u306b\u8fba\u3092\u8cbc\u308b\n\u30b0\u30e9\u30d5\u304c\u3067\u304d\u3066\u3082\u3069\u3046\u3059\u308b\u3093\u3060\u3053\u308c\uff0ci\u756a\u76ee\u304b\u3089\u59cb\u3081\u305f\u5834\u5408j\u307e\u3067\u3044\u304f\u5fc5\u8981\u304c\u3042\u308b\uff0c\u307f\u305f\u3044\u306a\u306e\u3092\u6c42\u3081\u3066\u3044\u304f\u304b-,\nN<=2000\u306a\u3089\u305d\u308c\u3067\u3044\u3051\u308b?\n\u3053\u308c\uff0c\u6700\u5c0f\u8cbb\u7528\u6d41\u3067\u89e3\u3051\u308b\u304b\u3082?\ns\u2192all\u2192t\u3092\u3064\u3051\u308b\uff0e\u9802\u70b9\u9593\u306fcap1\uff0c\u30b3\u30b9\u30c8\u304c\u5dee\u306e\u5024\u3067\u8fba\u3092\uff0e\n\u3044\u3084\uff0c\u3053\u308c\u5165\u529b\u4f8b3\u307f\u305f\u3044\u306a\u30d1\u30bf\u30fc\u30f3\u306b\u5f31\u305d\u3046\uff0e\n\n\u305d\u3082\u305d\u3082\u6709\u5411\u30b0\u30e9\u30d5\u3092\u3069\u3046\u4f5c\u308b\u304b\uff0e\n\u533a\u9593DP\u307d\u304f\u3044\u3051\u308b\u304b?1\u3064\u6d88\u3057\u305f\u5f8c\u306bK\u500b\u898b\u3066\u6700\u5c0f\u3092\u63a2\u3059\uff0c\u3068\u3044\u3046\u306e\u306fK+1\u500b\u898b\u3066\u4e0b\u304b\u30892\u756a\u76ee\u3092\u63a2\u3059\u306e\u3068\u540c\u3058\u3088\u306a\n\u6ce5\u6cbc\u306a\u6c17\u304c\u3059\u308b\uff0e\u4e00\u65e6\u30ea\u30bb\u30c3\u30c8\n\ni\u756a\u76ee\u304b\u3089\u59cb\u3081\u305f\u5834\u5408\u306b\u3069\u3053\u307e\u3067\u3044\u304f\u304b\uff0c\u307f\u305f\u3044\u306a\u767a\u60f3\u306f\u826f\u3055\u305d\u3046\uff0e\nX\u3092\u6c7a\u3081\u6253\u3066\u3070Y\u3092\u6700\u5927\u5316\u3059\u308b\u554f\u984c\nY\u3092\u6c7a\u3081\u6253\u3066\u3070X\u3092\u6700\u5c0f\u5316\u3059\u308b\u554f\u984c\nY\u3092\u6c7a\u3081\u6253\u3066\u3070\uff0cY\u672a\u6e80\u306f\u9078\u3079\u306a\u304f\u306a\u308b\u306e\u3067\u3044\u3051\u305d\u3046\uff0e\n\n\u4f7f\u3048\u306a\u3044\u3068\u6570\u5b57\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\uff0c\u3044\u304f\u3064\u304b\u306e\u533a\u9593\u306b\u5206\u304b\u308c\u308b\uff0e\u9006\u306b\u305d\u306e\u533a\u9593\u306a\u3044\u306f\u5168\u3066\u4f7f\u3048\u308b\uff0e\n\u3044\u3084\uff0c\u5168\u3066\u3058\u3083\u306a\u3044\u3084\uff0e\u4e0a\u4f4d(K-1)\u500b\u4ee5\u5916\u306f\u5168\u90e8\u4f7f\u3048\u308b\uff0e\nX\u3092\u6700\u5c0f\u5316\u3057\u305f\u3044\u306e\u3067\uff0c\u4f7f\u3048\u308b\u6570\u5b57\u3092\u3057\u305f\u304b\u3089\u9078\u3093\u3067\u3044\u304f\n\n\"\"\"\ndef main():\n    mod=10**9+7\n    N,K,Q=MI()\n    A=LI()\n    inf=10**10\n    \n    if Q==1:\n        print((0))\n        return()\n    \n    def calc(Y):\n        # Y\u3092\u6c7a\u3081\u6253\u3064\n        L=[]#\u6d88\u305b\u308b\u6570\u5b57\n        temp=[]#\u4eca\u898b\u3066\u3044\u308b\u533a\u9593\n        for a in A:\n            if a>=Y:\n                temp.append(a)\n            else:\n                if len(temp)>=K:\n                    temp.sort()\n                    #\u6d88\u305b\u308b=\u4e0a\u4f4d\u52e2\u3092\u9664\u3044\u305f\u6570\u5b57\u3092\u8ffd\u52a0\n                    if K>1:\n                        L+=temp[:-(K-1)]\n                    else:\n                        L+=temp\n                    \n                    \n                temp=[]\n        \n        # \u6700\u5f8c\u306e\u65b9\u306b\u5c0f\u3055\u3044\u6570\u5b57\u304c\u306a\u3044\u5834\u5408\u306e\u51e6\u7406\n        if len(temp)>=K:\n            temp.sort()\n            # print(temp[:-(K-1)])\n            if K>1:\n                L+=temp[:-(K-1)]\n            else:\n                L+=temp\n        L.sort()\n        \n        # print(Y,L)\n        # print(\"---\")\n        if len(L)>=Q:\n            return L[Q-1]\n        else:\n            return inf\n        \n    ans=inf\n    \n    for b in A:\n        y=b\n        x=calc(y)\n        temp=x-y\n        ans=min(ans,temp)\n        \n    print(ans)\n    \n        \n            \n\nmain()\n", "from heapq import heappush,heappop\nN,K,Q=map(int,input().split())\nA=list(map(int,input().split()))\nans=float(\"inf\")\nfor x in A:\n    data=[]\n    h=[]\n    for i in range(N):\n        if A[i]>=x:\n            heappush(h,A[i])\n        else:\n            if h:\n                data.append(h)\n                h=[]\n    if h:\n        data.append(h)\n    lsls=[]\n    for h in data:\n        for j in range(max(0,len(h)-K+1)):\n            lsls.append(heappop(h))\n    lsls.sort()\n    if len(lsls)>=Q:\n        ans=min(ans,lsls[Q-1]-lsls[0])\nprint(ans)", "n, k, q = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nans = 10 ** 18\nfor x in A:\n    B = []\n    C = []\n    for a in A:\n        if a >= x:\n            C.append(a)\n        else:\n            if len(C) >= k:\n                C.sort()\n                B += C[0:len(C) - k + 1]\n            C = []\n    if len(C) >= k:\n        C.sort()\n        B += C[0:len(C) - k + 1]\n    if len(B) >= q:\n        B.sort()\n        ans = min(ans, B[q - 1] - x)\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nimport heapq as hp\n\n\ndef main():\n    N, K, Q = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    NUM = sorted(list(set(A)))\n\n    ans = 10**10\n    for n in NUM:\n        Qs = []\n        q = []\n        for i in range(N):\n            if A[i] < n:\n                if q:\n                    Qs.append(q)\n                    q = []\n                continue\n            if not q:\n                q = [A[i]]\n            else:\n                hp.heappush(q, A[i])\n        if q:\n            Qs.append(q)\n        P = []\n        for q in Qs:\n            l = len(q)\n            if l < K: continue\n            for _ in range(min(Q, l-K+1)):\n                v = hp.heappop(q)\n                P.append(v)\n        if len(P) < Q:\n            break\n        P.sort()\n        ans = min(ans, P[Q-1]-P[0])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N, K, Q = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\nr = 10**18\nfor y in X:\n    tmp = []\n    tmp2 = []\n    for x in X:\n        if x < y:\n            tmp.sort()\n            tn = len(tmp)\n            if len(tmp) > K-1:\n                tmp2 += tmp[:tn-K+1]\n            tmp = []\n            continue\n        tmp.append(x)\n    tmp.sort()\n    tn = len(tmp)\n    if tn-K+1 > 0:\n        tmp2 += tmp[:tn-K+1]\n    tmp2.sort()\n    if len(tmp2) >= Q:\n        r = min(r, tmp2[Q-1] - y)\nprint(r)\n", "from heapq import heappop,heappush\n\nn,k,q = map(int,input().split())\na = list(map(int,input().split()))\n\nif(q==1):\n    print(0)\n    return()\n\nans = max(a)\nrem = [0] * n\nwhile(True):\n    nums = [[]]\n    i = 0\n    while(i<n):\n        if(rem[i]==0):\n            heappush(nums[-1],a[i])\n        else:\n            if(nums[-1]):\n                nums.append([])\n        i += 1\n\n    mins = []\n    for hq in nums:\n        while(len(hq) >= k):\n            mins.append( heappop(hq) )\n\n    if(len(mins) < q):\n        print(ans)\n        return()\n\n    mins.sort()\n    y = mins[0]\n    x = mins[q-1]\n    ans = min(ans, x-y)\n    for i,ai in enumerate(a):\n        if(ai==y):\n            rem[i] = 1", "def search(x, K, Q, A):\n    cand = []\n    i = 0\n    while i < len(A):\n        tmp = []\n        while i < len(A):\n            if A[i] >= x:\n                tmp.append(A[i])\n                i += 1\n            else:\n                i += 1\n                break\n        if len(tmp) >= K:\n            tmp.sort()\n            L = len(tmp) - K + 1\n            cand.extend(tmp[:L])\n\n    if len(cand) < Q:\n        return - 1\n    else:\n        return sorted(cand)[Q-1]\n\n\ndef main():\n    N, K, Q = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    if Q == 1:\n        return 0\n\n    res = 10**18\n    for i, x in enumerate(A):\n        rest = A[:i] + A[i + 1:]\n        y = search(x, K, Q - 1, rest)\n        if y == -1:\n            continue\n        res = min(res, y - x)\n    return res\n\n\ndef __starting_point():\n    print(main())\n__starting_point()", "from itertools import*\nN,K,Q,*A=map(int,open(0).read().split())\ns=sorted\nprint(min((s(sum((v[:max(0,len(v)-K+1)]for v in(k*s(v)for k,v in groupby(A,lambda a:a>=Y))),[]))[Q-1:]or[1e10])[0]-Y for Y in A))", "def main():\n    def calc_x_y(mi):\n        \"\"\"\u53d6\u308a\u9664\u3044\u305f\u8981\u7d20\u306e\u6700\u5c0f\u5024\u304cmi\u3068\u306a\u308b\u3088\u3046\u306b\n        \u64cd\u4f5c\u3092Q\u56de\u884c\u3048\u308b\u304b\n        \u884c\u3048\u308b -> Q\u56de\u306e\u64cd\u4f5c\u3067\u53d6\u308a\u9664\u3044\u305f\u8981\u7d20\u306e\u6700\u5927\u5024 - mi\n        \u884c\u3048\u306a\u3044 -> -1\n        \"\"\"\n\n        cont = 0\n        removed = []\n        for i, x in enumerate(a):\n            if x < mi:\n                if cont >= K:\n                    removed += sorted(a[i - cont:i])[:cont - K + 1]\n                cont = 0\n                continue\n            cont += 1\n        else:\n            if cont >= K:\n                removed += sorted(a[-cont:])[:cont - K + 1]\n\n        if len(removed) >= Q:\n            removed.sort()\n            return removed[Q - 1] - mi\n        else:\n            return -1\n\n    N, K, Q = list(map(int, input().split()))\n    *a, = list(map(int, input().split()))\n\n    mi_cands = sorted(set(a))\n\n    ans = 10 ** 9\n    for mi in mi_cands:\n        res = calc_x_y(mi)\n        if ~res:\n            ans = min(ans, res)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n# import sys\n#\n# sys.setrecursionlimit(10 ** 7)\n#\n# input = sys.stdin.readline\n# rstrip()\n# int(input())\n# map(int, input().split())\n\n__starting_point()", "from collections import defaultdict, deque, Counter\nfrom decimal import *\nfrom heapq import heapify, heappop, heappush\nimport math\nimport random\nimport string\nfrom copy import deepcopy\nfrom itertools import combinations, permutations, product\nfrom operator import mul, itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\ndef getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\ndef rand_ints_nodup(ran1, ran2, rantime):\n  ns = []\n  while len(ns) < rantime:\n    n = random.randint(ran1, ran2)\n    if not n in ns:\n      ns.append(n)\n  return sorted(ns)\n\ndef rand_query(ran1, ran2, rantime):\n  r_query = []\n  while len(r_query) < rantime:\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n    if not n_q in r_query:\n      r_query.append(n_q)\n  return sorted(r_query)\n\nsys.setrecursionlimit(1000000000)\nmod = 998244353\n\n#############\n# Main Code #\n#############\n\n\"\"\"\n\u6570\u5217A\n\u9577\u3055K\u306e\u9023\u7d9a\u3059\u308b\u90e8\u5206\u5217\u30921\u3064\u9078\u3076\u3000\n\u305d\u306e\u4e2d\u306e\u6700\u5c0f\u306e\u3082\u306e\u3092\u53d6\u308a\u9664\u304f\u3000inf\u306b\u3059\u308c\u3070\uff1f\n\u53d6\u308a\u9664\u3044\u305f\u8981\u7d20\u306e\u6700\u5927\u5024 - \u6700\u5c0f\u5024\u3092\u30de\u30a4\u30ca\u30b9\u306b\u3057\u305f\u3044\u3000\u4e8c\u5206\u63a2\u7d22\u3068\u304b\u3067\u304d\u308b?\n\u6700\u7d42\u5f62\u3092\u30a4\u30e1\u30fc\u30b8\u3059\u308b\n\n\u4e00\u756a\u671b\u307e\u3057\u3044\u306e\u306f\nQ\u500b\u306b\u3064\u3044\u3066\u6700\u5c0f\u533a\u9593\u306eQ\u500b\u3092\u53d6\u308b\u3053\u3068\n\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u3092\u53d6\u3089\u305a\u306b\u90fd\u5408\u306e\u3044\u3044\u3068\u3053\u3060\u3051\u53d6\u308a\u305f\u3044\n\u5c0f\u3055\u3044\u9806\u306b\u4ed5\u5207\u308a\u3092\u7acb\u3066\u3066\u3044\u304f\n\u307e\u305a\u5c0f\u3055\u3044\u9806\u306b1 2 3 4...\u3053\u308c\u306f\u5fc5\u305a\u53d6\u308c\u308b\u3000\uff081 2 3 5...\u3068\u304b\u306f1234\u3088\u308a\u5927\u304d\u304f\u306a\u308b\uff09\n\u6b21\u306b2 3 4 5\u3092\u53d6\u308c\u308b\u304b\nN\u500b\u76ee\u306e\u6570\u3063\u3066\u96e3\u3057\u304f\u306a\u3044\uff1f\n\n5 3 2\n4 3 1 5 2 \u306e\u5834\u5408\n4 3 [1 5 2]\n4 [3 5 2]\n\nN <= 2000\u306a\u306e\u3067 1, 2, 3, 4\u3067\u533a\u5207\u3063\u3066\u3044\u304f\u306e\u306f\u3067\u304d\u305d\u3046\nQ\u306e\u4e2d\u306b1\u3092\u5165\u308c\u308b\u5834\u5408\u3001\u6c42\u3081\u308b\u5024\u306fAq - A1\n\n1 1 3 5 6 7 \u306e\u5834\u5408\n1\u756a\u76ee\u306e1\u4ee5\u964d\u3092\u4f7f\u3046\u3068 1 1 3 5\n2\u756a\u76ee\u306e1\u4ee5\u964d\u3092\u4f7f\u3046\u3068 1 3 5 6\n3\u4ee5\u964d\u3092\u4f7f\u3046\u3068       3 5 6 7\n\u306a\u306e\u30673\u4ee5\u964d\u3092\u4f7f\u3046\u65b9\u304c\u3044\u3044\n\"\"\"\n\nN, K, Q = getNM()\nA = getList()\nA = [[A[i], i] for i in range(N)]\n\nflag = [0] * N\n# \u533a\u5207\u308a0\nl = deepcopy(sorted(A))\nopt = []\nl.sort()\nfor i in range(Q):\n    opt.append(l[i][0])\nans = opt[-1] - opt[0]\n\n# \u533a\u5207\u308a1\u500b\u4ee5\u4e0a\nfor i in range(N):\n    # index\u306e\u4f4d\u7f6e\u306fl\u3092\u518d\u5229\u7528\n    flag[l[i][1]] = 1 # A[i][1]\u306findex\n    parent = []\n    child = []\n    # \u30d5\u30e9\u30b0\u306e\u7acb\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u533a\u5207\u308b\n    # \u8981\u7d20\u306e\u63a2\u7d22\u306fA\u3092\u4f7f\u3046\n    for j in range(N):\n        if flag[j] == 0:\n            child.append(A[j][0])\n        else:\n            child.sort()\n            parent.append(child)\n            child = []\n    if len(child):\n        child.sort()\n        parent.append(child)\n\n    # \u5024\u3092\u6c42\u3081\u308b\n    # \u5404child\u304b\u3089\u53d6\u308c\u308b\u3060\u3051\u53d6\u308b\n    opt = []\n    for array in parent:\n        for j in range(len(array) - K + 1): # child\u306e\u9577\u3055 - K + 1\u3060\u3051\u5024\u3092\u53d6\u308c\u308b\n            opt.append(array[j])\n    # Q\u500b\u53d6\u308c\u305f\u306a\u3089\n    if len(opt) >= Q:\n        opt.sort()\n        ans = min(ans, opt[Q - 1] - opt[0])\n\nprint(ans)", "n, k, q = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nif q == 1:\n    print((0))\n    return()\n\nans = 10 ** 10\nfor i, y in enumerate(a):\n    li = []\n    l = 0\n    cnd = []\n    for j, x in enumerate(a + [-1]):\n        if i == j:\n            continue\n        if x < y:\n            if l - k + 1 >= 0:\n                li.sort()\n                cnd += li[:l-k+1]\n            li = []\n            l = 0\n        else:\n            li.append(x)\n            l += 1\n\n    if len(cnd) >= q - 1:\n        cnd.sort()\n        sub = cnd[q-2] - y\n        ans = min(ans, sub)\n\nprint(ans)\n", "n,k,q=map(int,input().split())\nl=list(map(int,input().split()))\nans=10**10\nfor i in range(n):\n    x=l[i]\n    tmp=[]\n    z=[]\n    for j in range(n):\n        if l[j]>=x:\n            tmp.append(l[j])\n        if l[j]<x or j==n-1:\n            tmp.sort()\n            if len(tmp)-k+1>0:\n                z+=tmp[:len(tmp)-k+1]\n            tmp=[]\n    z.sort()\n    if len(z)>=q:\n        ans=min(ans,z[q-1]-x)\nprint(ans)", "import sys\nfrom heapq import *\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, k, q = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    res = f_inf\n    for a in A:\n        section = []\n        tmp = []\n        for b in A:\n            if b < a:\n                if len(tmp) >= k:\n                    section.append(tmp)\n                tmp = []\n            else:\n                heappush(tmp, b)\n        if len(tmp) >= k:\n            section.append(tmp)\n\n        kouho = []\n        for sec in section:\n            while len(sec) >= k:\n                kouho.append(heappop(sec))\n\n        if len(kouho) >= q:\n            kouho.sort()\n            x = kouho[q - 1]\n            y = kouho[0]\n            res = min(res, x - y)\n\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "n,k,q = map(int, input().split())\nA = list(map(int, input().split()))\n \nans = 10**18\nfor x in A:\n    B = []\n    C = []\n    for a in A:\n        if a >= x:\n            C.append(a)\n        else:\n            if len(C) >= k:\n                C.sort()\n                B += C[0:len(C)-k+1]\n            C = []\n    else:\n        if len(C) >= k:\n            C.sort()\n            B += C[0:len(C)-k+1]\n    if len(B) >= q:\n        B.sort()\n        ans = min(ans, B[q-1]-x)\nprint(ans)"]