["n, m = list(map(int, input().split()))\np = []\nans = 0\nfor i in range(n):\n    s = input()\n    ans += s.count('*')\n    p.append(s)\ndp = []\nfor i in range(n):\n    dp.append([0] * m)\nfor i in range(n):\n    col = p[i].count('*')\n    for t in range(m):\n        dp[i][t] = col\nfor i in range(m):\n    col = 0\n    for t in range(n):\n        if p[t][i] == '*':\n            col += 1\n    for t in range(n):\n        dp[t][i] += col\nf = False\nfor i in range(n):\n    for t in range(m):\n        if dp[i][t] - int(p[i][t] == '*') == ans:\n            f = True\n            print('YES')\n            print(i + 1, t + 1)\n            break\n    if f:\n        break\nif not f:\n    print('NO')\n", "n, m = list(map(int, input().split()))\na = [input() for i in range(n)]\ncntx = [0] * n\ncnty = [0] * m\ncnt = 0\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '*':\n            cntx[i] += 1\n            cnty[j] += 1\n            cnt += 1\nfor i in range(n):\n    for j in range(m):\n        cur = cntx[i] + cnty[j] - int(a[i][j] == '*')\n        if cur == cnt:\n            print('YES')\n            print(i + 1, j + 1)\n            return\nprint('NO')\n", "def main():\n    n, m = map(int, input().split())\n    d = [[0] * m for i in range(n)]\n    al = 0\n    val_x = [0] * n\n    val_y = [0] * m\n    for i in range(n):\n        s = input()\n        cnt = 0\n        for j in range(m):\n            d[i][j] = s[j]\n            cnt += (s[j] == '*')\n            al += (s[j] == '*')\n        val_x[i] = cnt\n    for i in range(m):\n        cnt = 0\n        for j in range(n):\n            cnt += (d[j][i] == '*')\n        val_y[i] = cnt\n    for i in range(n):\n        for j in range(m):\n            if val_x[i] + val_y[j] - (d[i][j] == '*') == al:\n                print(\"YES\")\n                print(i + 1, j + 1)\n                return\n    print(\"NO\")\n    \nmain()", "#!/usr/bin/env pypy3\n\nimport array\nimport itertools\n\nIMPOSSIBLE = (-1, -1)\n\n\ndef place_bomb(height, width, is_wall):\n    # zero-based\n    walls_row = array.array(\"L\", (sum(row) for row in is_wall))\n    walls_column = array.array(\"L\")\n    for column_idx in range(width):\n        walls_column.append(sum(is_wall[r][column_idx] for r in range(height)))\n    total_walls = sum(walls_row)\n    for bomb_r, bomb_c in itertools.product(list(range(height)), list(range(width))):\n        wiped_walls = walls_row[bomb_r] + walls_column[bomb_c]\n        wiped_walls -= is_wall[bomb_r][bomb_c]\n        if wiped_walls == total_walls:\n            # one-based\n            return (bomb_r + 1, bomb_c + 1)\n    else:\n        return IMPOSSIBLE\n\n\ndef main():\n    height, width = list(map(int, input().split()))\n    is_wall = [array.array(\"B\",\n               [c == \"*\" for c in input()]) for _ in range(height)]\n    ans = place_bomb(height, width, is_wall)\n    if ans != IMPOSSIBLE:\n        print(\"YES\")\n        print(*ans)\n    else:\n        print(\"NO\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "st=input()\ntmp=st.split(' ')\nm=int(tmp[0])\nn=int(tmp[1])\nmapp=[]\noc=[]\nfor i in range(m):\n    tmp=input()\n    mapp.append(tmp)\n    for j in range(n):\n        if tmp[j]!='.':\n            oc.append((i,j))\nfor x in range(m):\n    for y in range(n):\n        for i in oc:\n            if i[0]!=x and i[1]!=y:\n                break\n        else:\n            print('YES')\n            print(x+1,y+1)\n            return\nelse:\n    print('NO')\n\n            \n    \n", "R, C = [int(x) for x in input().split()]\ngrid = [list(input()) for _ in range(R)]\n\nwpr = [0] * R\nwpc = [0] * C\nn = 0\n\nfor r in range(R):\n    for c in range(C):\n        if grid[r][c] != '*':\n            continue\n        wpr[r] += 1\n        wpc[c] += 1\n        n += 1\n\nfor r in range(R):\n    for c in range(C):\n        field = 1 if grid[r][c] == '*' else 0\n\n        if wpr[r] + wpc[c] - field == n:\n            print('YES')\n            print(r+1, c+1)\n            return\n\nprint('NO')\n", "n, m = list(map(int, input().split()))\na = [input() for i in range(n)]\nx = [0] * n\ny = [0] * m\ncnt = 0\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '*':\n            x[i] += 1\n            y[j] += 1\n            cnt += 1\nfor i in range(n):\n    for j in range(m):\n        cur = x[i] + y[j] - (a[i][j] == '*')\n        if cur == cnt:\n            print('YES')\n            print(i + 1, j + 1)\n            return\nprint('NO')\n", "x, y = list(map(int, input().split(' ')))\nmap_x, map_y = {}, {}\nmax_r, max_rv = 0, 0\nmax_c, max_cv = 0, 0\nstr_l = []\n\nfor _ in range(x):\n    str = input()\n    str_l.append(str)\n    for i in range(len(str)):\n        if str[i] == '*':\n            if i not in map_y:\n                map_y[i] = {}\n            map_y[i][_] = None\n\n# transpose string arrays\nstr_t = list(zip(*str_l))\n\n# find column contains max number of walls\nfor _ in range(y):\n    walls = str_t[_].count('*')\n    if walls > max_cv:\n        max_c = _\n        max_cv = walls\n\n# find row contains max number of walls\nfor _ in range(x):\n\n    walls = str_l[_].count('*')\n\n    if walls > max_rv:\n        max_r = _\n        max_rv = walls\n\n    # if number same, then do a smart row choice\n    elif walls == max_rv:\n        if str_l[_][max_c] == '.':\n            max_r = _\n            max_rv = walls\n\n\ndef check(r, c):\n\n    sum = 1 if c in map_y else 0\n\n    # remove from column\n    for yy in range(y):\n        if yy in map_y and yy != c:\n            if len(map_y[yy]) == 1 and r in map_y[yy]:\n                sum += 1\n\n    return len(map_y) == sum\n\nfor c in range(y):\n    if check(max_r, c) is True:\n        print(\"YES\")\n        print(max_r+1, c+1)\n        return\n\nprint(\"NO\")\n", "st=input()\ntmp=st.split(' ')\nm=int(tmp[0])\nn=int(tmp[1])\nmapp=[]\noc=[]\nfor i in range(m):\n    tmp=input()\n    mapp.append(tmp)\n    for j in range(n):\n        if tmp[j]!='.':\n            oc.append((i,j))\nfor x in range(m):\n    for y in range(n):\n        for i in oc:\n            if i[0]!=x and i[1]!=y:\n                break\n        else:\n            print('YES')\n            print(x+1,y+1)\n            return\nelse:\n    print('NO')\n", "def main():\n    n, m = list(map(int, input().split()))\n    xx, yy, walls, t = [0] * n, [0] * m, set(), 0\n    for x in range(n):\n        for y, c in enumerate(input()):\n            if c == '*':\n                t += 1\n                if t == n + m:\n                    print(\"NO\")\n                    return\n                walls.add((x, y))\n                xx[x] += 1\n                yy[y] += 1\n    for x, a in enumerate(xx):\n        for y, b in enumerate(yy):\n            if a + b - ((x, y) in walls) == t:\n                print(\"YES\")\n                print(x + 1, y + 1)\n                return\n    print(\"NO\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys;input = sys.stdin.readline;print = sys.stdout.write\n\ndef main():\n    n, m = map(int, input().split())\n\n    arr, have, dpx, dpy, cnt = [0]*n, set(), [0]*n, [0]*m, 0\n    for i in range(n):\n        arr[i] = input().rstrip()\n        for j in range(m):\n            if arr[i][j] == \"*\":\n                dpx[i], dpy[j], cnt = dpx[i] + 1, dpy[j] + 1, cnt + 1\n\n    for i in range(n):\n        for j in range(m):\n            if dpx[i] + dpy[j] - (arr[i][j] == \"*\") == cnt: print(\"YES\\n{0} {1}\".format(i + 1, j + 1)), return\n\n    print(\"NO\")\n\n\nmain()\n", "t = input;p = print;r = range\nn, m = map(int, t().split())\na, x, y, c =  [], [0]*n, [0]*m, 0\nfor i in r(n):\n    a.append(t())\n    for j in r(m):\n        if a[i][j] == \"*\":\n            x[i], y[j], c = x[i] + 1, y[j] + 1, c + 1\nfor i in r(n):\n    for j in r(m):\n        if x[i] + y[j] - (a[i][j] == \"*\") == c: p(\"YES\\n{0} {1}\".format(i + 1, j + 1));return\np(\"NO\")\n", "t = input;p = print;r = range;n, m = map(int, t().split());a, x, y, c = [], [0]*n, [0]*m, 0\nfor i in r(n):\n    a.append(t())\n    for j in r(m):\n        if a[i][j]==\"*\":x[i]+=1;y[j]+=1;c+=1\nfor i in r(n):\n    for j in r(m):\n        if x[i]+y[j]-(a[i][j] == \"*\")==c:p(\"YES\\n\",i+1,\" \",j+1,sep=\"\");return\np(\"NO\")\n", "t=input;p=print;r=range;n,m=map(int, t().split());a,x,y,c=[],[0]*n,[0]*m,0\nfor i in r(n):\n    a.append(t())\n    for j in r(m):\n        if a[i][j]==\"*\":x[i]+=1;y[j]+=1;c+=1\nfor i in r(n):\n    for j in r(m):\n        if x[i]+y[j]-(a[i][j] == \"*\")==c:p(\"YES\\n\",i+1,\" \",j+1,sep=\"\");return\np(\"NO\")\n", "t=input;p=print;r=range;n,m=map(int,t().split());a,x,y,c=[],[0]*n,[0]*m,0\nfor i in r(n):\n    a.append(t())\n    for j in r(m):\n        if a[i][j]==\"*\":x[i]+=1;y[j]+=1;c+=1\nfor i in r(n):\n    for j in r(m):\n        if x[i]+y[j]-(a[i][j] == \"*\")==c:p(\"YES\\n\",i+1,\" \",j+1,sep=\"\");return\np(\"NO\")\n", "t=input;p=print;r=range;s=sum;n,m=map(int,t().split());a=[t() for i in r(n)];g=[[a[j][i] for j in r(n)] for i in r(m)];x,y=[a[i].count(\"*\") for i in r(n)],[g[i].count(\"*\") for i in r(m)];c=(s(x)+s(y))//2\nfor i in r(n):\n    for j in r(m):\n        if x[i]+y[j]-(a[i][j] == \"*\")==c:p(\"YES\\n\",i+1,\" \",j+1,sep=\"\");return\np(\"NO\")\n", "t=input;p=print;r=range;s=sum;n,m=map(int,t().split());a=[t() for i in r(n)];g=[[a[j][i] for j in r(n)] for i in r(m)];x,y=[a[i].count(\"*\") for i in r(n)],[g[i].count(\"*\") for i in r(m)];c=(s(x)+s(y))//2;[(p(\"YES\\n\",i+1,\" \",j+1,sep=\"\"),return) if x[i]+y[j]-(a[i][j]==\"*\")==c else 0 for j in r(m) for i in r(n)];p(\"NO\")\n", "def main():\n    n, m = [int(x) for x in input().split()]\n\n    board = []\n    cols = [0] * m\n    rows = [0] * n\n    total = 0\n    for i in range(0, n):\n        r = input()\n        board.append(r)\n        for j in range(0, m):\n            if r[j] == '*':\n                cols[j] += 1\n                rows[i] += 1\n                total += 1\n\n    for i in range(0, n):\n        for j in range(0, m):\n            count = rows[i] + cols[j]\n            if board[i][j] == '*':\n                count -= 1\n            if count == total:\n                print(\"YES\")\n                print(i + 1, j + 1)\n                return\n\n    print(\"NO\")\n\nmain()", "n, m = input().split()\nn, m = int(n), int(m)\ns = []\nfor i in range(n): s.append( str( input() ) )\ncnt, cntr, cntc = 0, [], []\nfor i in range(n):\n  tcnt = 0\n  for j in range(m):\n    if s[i][j] == '*':\n      tcnt += 1\n  cntr.append( tcnt )\nfor i in range(m):\n  tcnt = 0\n  for j in range(n):\n    if s[j][i] == '*':\n      tcnt += 1\n      cnt += 1\n  cntc.append( tcnt )\nai , aj = -1, -1\nfor i in range(n):\n  for j in range(m):\n    tmp = cntr[i] + cntc[j]\n    if s[i][j] == '*': tmp -= 1\n    if tmp == cnt:\n      ai, aj = i, j\nif ai == -1: print( \"NO\" )\nelse:\n  print( \"YES\" )\n  print( str( ai + 1 ) + \" \" + str( aj + 1 ) )\n", "row,col = map(int,input().split())\na = []\nfor i in range(row):\n    s = input()\n    a.append(s)\n\nx = [i.count(\"*\") for i in a]\n#print(x)\n\nao = []\nfor i in range(col):\n    new = \"\"\n    for j in range(row):\n        new +=a[j][i]\n    ao.append(new)\ny = [i.count(\"*\") for i in ao]\n#print(y)\n\ntotal = sum(x)\n\nfor i in range(row):\n    for j in range(col):\n        cnt = x[i]+y[j]\n        if a[i][j] == \"*\":\n            cnt-=1\n        if total ==cnt:\n            print(\"YES\")\n            print(i+1,j+1)\n            return\nprint(\"NO\")", "row,col = list(map(int,input().split()))\na = []\nx = [0]*row; y = [0]*col\nfor i in range(row):\n    s = input()\n    a.append(s)\ntotal = 0\nfor i in range(row):\n    for j in range(col):\n        if a[i][j] == \"*\":\n            x[i]+=1; y[j]+=1; total+=1\nfor i in range(row):\n    for j in range(col):\n        if (x[i]+y[j]-(a[i][j]==\"*\"))==total:\n            print(\"YES\")\n            print(i+1,j+1)\n            return\nprint(\"NO\")\n", "row,col = map(int,input().split())\na = []\nfor i in range(row):\n    s = input()\n    a.append(s)\n\nx = [i.count(\"*\") for i in a]\n#print(x)\n\nao = []\nfor i in range(col):\n    new = \"\"\n    for j in range(row):\n        new +=a[j][i]\n    ao.append(new)\ny = [i.count(\"*\") for i in ao]\n#print(y)\n\ntotal = sum(x)\n\nfor i in range(row):\n    for j in range(col):\n        cnt = x[i]+y[j]\n        if a[i][j] == \"*\":\n            cnt-=1\n        if total ==cnt:\n            print(\"YES\")\n            print(i+1,j+1)\n            return\nprint(\"NO\")", "def main():\n    n, m = list(map(int, input().split()))\n    xx, yy, walls, t = [0] * n, [0] * m, set(), n + m\n    for x in range(n):\n        for y, c in enumerate(input()):\n            if c == '*':\n                walls.add((x, y))\n                if len(walls) == t:\n                    print(\"NO\")\n                    return\n                xx[x] += 1\n                yy[y] += 1\n    for x, a in enumerate(xx):\n        t = len(walls) - a\n        for y, b in enumerate(yy):\n            if b - ((x, y) in walls) == t:\n                print(\"YES\")\n                print(x + 1, y + 1)\n                return\n    print(\"NO\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "t = input\np = print\nr = range\nn, m = map(int, t().split())\na, x, y, c = [], [0] * n, [0] * m, 0\nfor i in r(n):\n    a.append(t())\n    for j in r(m):\n        if a[i][j] == \"*\":\n            x[i] += 1\n            y[j] += 1\n            c += 1\nfor i in r(n):\n    for j in r(m):\n        if x[i] + y[j] - (a[i][j] == \"*\") == c:\n            p(\"YES\\n\", i + 1, \" \", j + 1, sep=\"\")\n            return\np(\"NO\")\n", "import sys, math, string, fractions, functools, collections\nsys.setrecursionlimit(10**7)\nRI=lambda x=' ': list(map(int,input().rstrip().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nmod=int(1e9+7)\neps=1e-6\nMAX=1010\n#################################################\ncol=[0]*MAX\nrow=[0]*MAX\ntot=0\nn, m = RI()\ns=[0]*MAX\nfor i in range(n):\n    s[i]=RS()[0]\n    for j in range(m):\n        if s[i][j]=='*':\n            row[i]+=1\n            col[j]+=1\n            tot+=1\nfor i in range(n):\n    for j in range(m):\n        if row[i]+col[j]- (s[i][j]=='*')==tot:\n            print(\"YES\")\n            print(i+1, j+1)\n            return\nprint(\"NO\")"]