["def solve():\r\n\tn=int(input())\r\n\tl1=list(map(int,input().split()))\r\n\tl2=list(map(int,input().split()))\r\n\tans=[]\r\n\tfor i in range (n):\r\n\t\tc=0\r\n\t\tfor j in range (i+1):\r\n\t\t\tif l1[j]<=l2[i]:\r\n\t\t\t\tc+=l1[j]\r\n\t\t\t\tl1[j]=0\r\n\t\t\telse:\r\n\t\t\t\tl1[j]-=l2[i]\r\n\t\t\t\tc+=l2[i]\r\n\t\tans.append(c)\r\n\tprint(*ans)\r\nsolve()", "# cook your dish here\nn=int(input())\nv=[int(x) for x in input().split()]\nt=[int(x) for x in input().split()]\na=[]\nfor i in range(n):\n    a.append(v[i])\n    c=0\n    for j in range(len(a)):\n        k=a[j]-t[i]\n        if k>=0:\n            c+=t[i]\n            a[j]=k\n        else: \n            c+=a[j]\n            a[j]=0\n    print(c,end=\" \")        \n    \n    ", "# cook your dish here\nx=int(input())\n\nsop=[int(i) for i in input().split()]\ntem=[int(j) for j in input().split()]\nfor i in range(x):\n    sm=0\n    for j in range(i+1):\n        if (sop[j] >= tem[i]):\n            sm+=tem[i]\n            sop[j]-=tem[i]\n        else:\n            sm+=sop[j]\n            sop[j]=0\n    print(sm,end=\" \")", "# cook your dish here\nt=int(input())\ns=list(map(int,input().split()))\ne=list(map(int,input().split()))\nif t==0 or t==1:\n    print(0)\nelse:\n    for i in range(t):\n        c=0\n        p=s[0:i+1]\n        for j in range(len(p)):\n            if p[j]>=e[i]:\n                c+=e[i]\n                s[j]-=e[i]\n            else:\n                c+=p[j]\n                s[j]=0\n        print(c,end=\" \")", "# cook your dish here\nn=int(input())\ns=[int(j) for j in input().split()]\nt=[int(j) for j in input().split()]\nl=[]\nfor i in range(n):\n  te=t[i]\n  l.append(s[i])\n  l1=[]\n  ans=0\n  for i in l:\n      if(i>te):\n          ans+=te\n          l1.append(i-te)\n      else:\n          ans+=i\n  l=l1\n  print(ans,end=\" \")  ", "n=int(input())\r\nvol = list(map(int,input().split()))\r\ntemp = list(map(int,input().split()))\r\n\r\ni=0\r\ncount=0\r\n\r\nwhile i < len(temp):\r\n    j = i\r\n    count = 0\r\n    while j>=0 and i<len(temp):\r\n        \r\n        if vol[j] < temp[i] and vol[j] != 0:\r\n            count += vol[j]\r\n            vol[j] = 0\r\n            #print(count,end= ' ')\r\n            \r\n        elif vol[j] >= temp[i] and vol[j] != 0:\r\n            vol[j] = vol[j] - temp[i]\r\n            count += temp[i]\r\n        j -= 1\r\n    print(count, end=\" \")\r\n    \r\n    i+=1\r\n\r\n\r\n\r\n", "# cook your dish here\nn=int(input())\nv=[int(x) for x in input().split()]\nt=[int(x) for x in input().split()]\na=[]\nfor i in range(n):\n    a.append(v[i])\n    c=0\n    for j in range(len(a)):\n        k=a[j]-t[i]\n        if k>=0:\n            c+=t[i]\n            a[j]=k\n        else: \n            c+=a[j]\n            a[j]=0\n    print(c,end=\" \")        \n    \n    ", "n=int(input())\nv=list(map(int,input().split()))\nt=list(map(int,input().split()))\nfor i in range(n):\n    ans=0\n    for j in range(0,i+1):\n        if v[j]<=0:\n            continue\n        if t[i]<=v[j]:\n            ans+=t[i]\n            v[j]=v[j]-t[i]\n        else:\n            ans+=v[j]\n            v[j]=0\n    print(ans,end=' ')\n    \n", "# cook your dish here\nimport sys\n\nlist_of_lists = []\n\nfor line in sys.stdin:\n    new_list = [int(elem) for elem in line.split()]\n    list_of_lists.append(new_list)\n    \n\nvolume = list_of_lists[1]\ntemperature = list_of_lists[2]\n\nafter_volume = []\ntemp_deduction = 0\ntotal_reduction = []\n\nfor i in range(list_of_lists[0][0]):\n    for x in range(len(after_volume)):\n        if (after_volume[x] - temperature[i] < 0):\n            temp_deduction += after_volume[x]\n            after_volume[x] = 0\n        else:\n            temp_deduction += temperature[i]\n            after_volume[x] = after_volume[x] - temperature[i]\n    if (volume[i] - temperature[i] < 0):\n        temp_deduction += volume[i]\n        after_volume[x] = 0\n    else:\n        # print(i)\n        temp_deduction += temperature[i]\n        after_volume.append(volume[i] - temperature[i])\n        # print(after_volume)\n       \n    total_reduction.append(temp_deduction)\n    temp_deduction = 0\n  \n    # print(after_volume)\nprint(*total_reduction)", "n=int(input())\r\nv=list(map(int,input().split()))\r\nt=list(map(int,input().split()))\r\nfor i in range(len(t)):\r\n    vap=0\r\n    for j in range(0,i+1):\r\n        if v[j]<=0:\r\n            continue\r\n        if v[j]-t[i]<=0:\r\n            vap+=v[j]\r\n            v[j]=0\r\n        else:\r\n            vap+=t[i]\r\n            v[j]-=t[i]\r\n    print(vap,end=\" \")\r\n            \r\n        \r\n        \r\n        \r\n", "# cook your dish here\nt=1\nfor t_cases in range(t):\n    n=int(input())\n    v=list(map(int,input().split()))\n    t=list(map(int,input().split()))\n    for i in range(0,n):\n        temp=0\n        for j in range(0,i+1):\n            if(v[j]>=t[i]):\n                temp+=t[i]\n            else:\n                temp+=v[j]\n            v[j]=max(0,v[j]-t[i])\n        print(temp,end=' ')", "n=int(input())\r\nB=[int(i) for i in input().split()]\r\nt=[int(i) for i in input().split()]\r\no=[]\r\nfor i in range(n):\r\n     x=t[i]\r\n     s=0\r\n     for j in range(i+1):\r\n          if(B[j]>x):\r\n               B[j]=B[j]-x\r\n               s+=x\r\n          else:\r\n               s+=B[j]\r\n               B[j]=0\r\n     o.append(s)\r\nfor i in o:\r\n     print(i,end=\" \")\r\n               \r\n          \r\n          \r\n          \r\n     \r\n\r\n", "# cook your dish here\nn=int(input())\ns=[int(j) for j in input().split()]\nt=[int(j) for j in input().split()]\nl=[]\nfor i in range(n):\n  te=t[i]\n  l.append(s[i])\n  l1=[]\n  ans=0\n  for i in l:\n      if(i>te):\n          ans+=te\n          l1.append(i-te)\n      else:\n          ans+=i\n  l=l1\n  print(ans,end=\" \")  ", "# cook your dish here\nn=int(input())\nv=list(map(int,input().split()))\nt=list(map(int,input().split()))\nm=[]\nfor i in range(n):\n    s=0\n    for j in range(i+1):\n        e=v[j]\n        v[j]=v[j]-t[i]\n        if(v[j]<0):\n            v[j]=0\n        loss=e-v[j]\n        s=s+loss\n    m.append(s)\nprint(*m)\n        \n            \n", "n=int(input())\nv=list(map(int,input().split()))\nt=list(map(int,input().split()))\nfor i in range(n):\n    ans=0\n    for j in range(0,i+1):\n        if t[i]<=v[j]:\n            ans+=t[i]\n            v[j]=v[j]-t[i]\n        else:\n            ans+=v[j]\n            v[j]=0\n    print(ans,end=' ')\n    \n", "def __starting_point():\r\n\tn = int(input())\r\n\tv = list(map(int, input().split()))\r\n\tt = list(map(int, input().split()))\r\n\tl = []\r\n\tans = []\r\n\tfor i in range (n):\r\n\t\tcancel = 0\r\n\t\tif i == 0:\r\n\t\t\tif v[i] <= t[i]:\r\n\t\t\t\tcancel+=v[i]\r\n\t\t\t\tv[i]-=v[i]\r\n\t\t\telse:\r\n\t\t\t\tcancel +=t[i]\r\n\t\t\t\tv[i]-=t[i]\r\n\t\t\tl.append(v[i])\r\n\t\t\tans.append(cancel)\r\n\t\telse:\r\n\t\t\tl.append(v[i])\r\n\t\t\tj = 0\r\n\t\t\twhile j < len(l):\r\n\t\t\t\tif l[j] == 0:\r\n\t\t\t\t\tl.pop(j)\r\n\t\t\t\t\tj-=1\r\n\t\t\t\telif l[j] <= t[i]:\r\n\t\t\t\t\tcancel += l[j]\r\n\t\t\t\t\tl[j]-=l[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tcancel+=t[i]\r\n\t\t\t\t\tl[j]-=t[i]\r\n\t\t\t\tj+=1\r\n\t\t\tans.append(cancel)\r\n\tprint(*ans)\n__starting_point()", "# cook your dish here\r\nimport sys\r\n\r\nlist_of_lists = []\r\n\r\nfor line in sys.stdin:\r\n    new_list = [int(elem) for elem in line.split()]\r\n    list_of_lists.append(new_list)\r\n    \r\n\r\nvolume = list_of_lists[1]\r\ntemperature = list_of_lists[2]\r\n\r\nafter_volume = []\r\ntemp_deduction = 0\r\ntotal_reduction = []\r\n\r\nfor i in range(list_of_lists[0][0]):\r\n    for x in range(len(after_volume)):\r\n        if (after_volume[x] - temperature[i] < 0):\r\n            temp_deduction += after_volume[x]\r\n            after_volume[x] = 0\r\n        else:\r\n            temp_deduction += temperature[i]\r\n            after_volume[x] = after_volume[x] - temperature[i]\r\n    if (volume[i] - temperature[i] < 0):\r\n        temp_deduction += volume[i]\r\n        after_volume[x] = 0\r\n    else:\r\n        # print(i)\r\n        temp_deduction += temperature[i]\r\n        after_volume.append(volume[i] - temperature[i])\r\n        # print(after_volume)\r\n       \r\n    total_reduction.append(temp_deduction)\r\n    temp_deduction = 0\r\n  \r\n    # print(after_volume)\r\nprint(*total_reduction)\r\n        \r\n    \r\n    ", "# cook your dish here\nt=int(input())\ns=list(map(int,input().split()))\ne=list(map(int,input().split()))\nif t==0 or t==1:\n    print(0)\nelse:\n    for i in range(t):\n        c=0\n        p=s[0:i+1]\n        for j in range(len(p)):\n            if p[j]>=e[i]:\n                c+=e[i]\n                s[j]-=e[i]\n            else:\n                c+=p[j]\n                s[j]=0\n        print(c,end=\" \")", "'''\r\nName: Devansh\r\nUsername: singhdevansh\r\nGithub: https://github.com/Devansh3712\r\n'''\r\n\r\nimport os\r\nimport sys\r\nimport math\r\nfrom itertools import *\r\nfrom io import BytesIO, IOBase\r\nfrom collections import *\r\n\r\n#<fast I/O>\r\nBUFSIZE = 8192\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\n#</fast I/O>\r\n\r\n#<template>\r\nmod=(10**9)+7\r\npi=3.14159265358979323846264338327950\r\n\r\ndef i1():\t#int(input())\r\n\treturn int(sys.stdin.readline())\r\n\r\ndef sf():\t#input()\r\n\treturn sys.stdin.readline()\r\n\r\ndef mi():\t#map(int(input()))\r\n\treturn map(int,sys.stdin.readline().split())\r\n\r\ndef arr():\t#list(map(int,input().split()))\r\n\treturn list(map(int,sys.stdin.readline().split()))\r\n\r\ndef pf(ans): #print(x)\r\n\treturn sys.stdout.write(str(ans)+\"\\n\")\r\n\r\ndef gcd(a,b):\r\n\tif a==0:\r\n\t\treturn b\r\n\telif b==0:\r\n\t\treturn a\r\n\tif a>b:\r\n\t\treturn gcd(a%b,b)\r\n\telse:\r\n\t\treturn gcd(a,b%a)\r\n\r\ndef lcm(a,b):\r\n\treturn (a*b)//gcd(a,b)\r\n\r\ndef LogN(a,b):\r\n\treturn math.log(a)/math.log(b)\r\n\r\ndef fpow(a,b):\r\n\tres=1\r\n\twhile (b>0):\r\n\t\tif b&1:\r\n\t\t\tres=res*a \r\n\t\ta=a*a\r\n\t\tb>>=1\r\n\treturn res\r\n\r\ndef sieve(n):\r\n    m=(n-1)//2\r\n    b=[True]*m\r\n    i,p,ps = 0,3,[2]\r\n    while p*p < n:\r\n        if b[i]:\r\n            ps.append(p)\r\n            j = 2*i*i + 6*i + 3\r\n            while j < m:\r\n                b[j] = False\r\n                j = j + 2*i + 3\r\n        i+=1; p+=2\r\n    while i < m:\r\n        if b[i]:\r\n            ps.append(p)\r\n        i+=1; p+=2\r\n    return ps\r\n#</template>\r\n\r\n#<solve>\r\ndef solve():\r\n\tn=i1()\r\n\tl1=arr()\r\n\tl2=arr()\r\n\tans=[]\r\n\tfor i in range (n):\r\n\t\tc=0\r\n\t\tfor j in range (i+1):\r\n\t\t\tif l1[j]<=l2[i]:\r\n\t\t\t\tc+=l1[j]\r\n\t\t\t\tl1[j]=0\r\n\t\t\telse:\r\n\t\t\t\tl1[j]-=l2[i]\r\n\t\t\t\tc+=l2[i]\r\n\t\tans.append(c)\r\n\tprint(*ans)\r\nsolve()\r\n#</solve>\r\n\r\n#<solution>\r\n# tc=i1()\r\n# for t in range (tc):\r\n# \tsolve()\r\n#<solution>", "t=int(input())\nlst=list(map(int,input().split()))\nlst1=list(map(int,input().split()))\nfor i in range(len(lst)):\n    q=0\n    for j in range(i+1):\n        if lst[j]<=lst1[i]:\n            q+=lst[j]\n            lst[j]=0\n        else:\n            q+=lst1[i]\n            lst[j]-=lst1[i]\n    print(q,end=\" \")", "# cook your dish here\nn=int(input())\nv=list(map(int,input().split()))\nt=list(map(int,input().split()))\nm=[]\nfor i in range(n):\n    s=0\n    for j in range(i+1):\n        e=v[j]\n        v[j]=v[j]-t[i]\n        if(v[j]<0):\n            v[j]=0\n        loss=e-v[j]\n        s=s+loss\n    m.append(s)\nprint(*m)\n        \n            \n", "# cook your dish here\nn = int(input())\nsoup = list(map(int , input().split()))\nevap = list(map(int , input().split()))\nfor i in range(n) :\n    summ= 0\n    for j in range(i+1) :\n        if(soup[j]>=evap[i]) :\n            summ+=evap[i]\n            soup[j]-=evap[i]\n        else :\n            summ +=soup[j]\n            soup[j] = 0\n    print(summ , end =\" \")", "n = int(input())\n \nimport heapq as hq\n \nheap = []\n\ntemp = 0\n \nans = [-1 for _ in range(n)]\n \nV = [int(x) for x in input().split()]\nT = [int(x) for x in input().split()]\n \n\nfor i in range(n):\n    \n \n    prevtemp = temp\n    temp += T[i]\n \n    hq.heappush(heap, V[i] + prevtemp)\n \n \n    curr = 0\n    while len(heap) and heap[0] <= temp:\n        m = hq.heappop(heap)\n        curr += m - prevtemp\n    curr += (len(heap) * T[i])\n    ans[i] = curr\n \nprint(' '.join([str(x) for x in ans]))", "# cook your dish here\nimport sys\n\nlist_of_lists = []\n\nfor line in sys.stdin:\n    new_list = [int(elem) for elem in line.split()]\n    list_of_lists.append(new_list)\n    \n\nvolume = list_of_lists[1]\ntemperature = list_of_lists[2]\n\nafter_volume = []\ntemp_deduction = 0\ntotal_reduction = []\n\nfor i in range(list_of_lists[0][0]):\n    for x in range(len(after_volume)):\n        if (after_volume[x] - temperature[i] < 0):\n            temp_deduction += after_volume[x]\n            after_volume[x] = 0\n        else:\n            temp_deduction += temperature[i]\n            after_volume[x] = after_volume[x] - temperature[i]\n    if (volume[i] - temperature[i] < 0):\n        temp_deduction += volume[i]\n        after_volume[x] = 0\n    else:\n        # print(i)\n        temp_deduction += temperature[i]\n        after_volume.append(volume[i] - temperature[i])\n        # print(after_volume)\n       \n    total_reduction.append(temp_deduction)\n    temp_deduction = 0\n  \n    # print(after_volume)\nprint(*total_reduction)\n        \n    \n    ", "n=int(input())\nv=list(map(int,input().split()))\nt=list(map(int,input().split()))\nfor i in range(n):\n    ans=0\n    for j in range(0,i+1):\n        if t[i]<=v[j]:\n            ans+=t[i]\n            v[j]=v[j]-t[i]\n        else:\n            ans+=v[j]\n            v[j]=0\n    print(ans,end=' ')\n    \n"]