["import sys\n\nR,x,y,s,t = list(map(int,input().split()))\n\nif (s-x)**2 + (t-y)**2 > R*R:\n    print(x,y,R)\n    return\n\ndx = x - s\ndy = y - t\nr = (dx**2 + dy**2)**.5\n\nif abs(r)<1e-9:\n    dx = 1\n    dy = 0\nelse:\n    dx /= r\n    dy /= r\n\na = s + dx*(R + r)/2\nb = t + dy*(R + r)/2\n\nprint(a,b,(R+r)/2)\n\n", "import sys, math\n\n#f = open('input/input_0', 'r')\nf = sys.stdin\n\nR, x1, y1, x2, y2 = list(map(int, f.readline().split()))\n\ndx = x1 - x2\ndy = y1 - y2\nif dx**2 + dy**2 >= R**2:\n  print(x1, y1, R)\nelif dx == 0 and dy == 0:\n  print(x1+R/2, y1, R/2)\nelse:\n  dl = (dx**2 + dy**2) ** 0.5\n  r = (dl + R) / 2\n  ax = x2 + dx / dl * r\n  ay = y2 + dy / dl * r\n  print(ax, ay, r)\n", "def dist2(x1,y1,x2,y2):\n    return (x1-x2)**2+(y1-y2)**2\nR,x1,y1,x2,y2 = list(map(int,input().split()))\nif dist2(x1,y1,x2,y2) >= R**2:\n    print(x1,y1,R)\nelse:\n    d2 = dist2(x1,y1,x2,y2)\n    if abs(d2)<0.0000000001:\n        x = x1+R/2\n        y = y1\n        print(x,y,R/2)\n    else:\n        dd = d2**0.5+R\n        dd /= 2\n        x = x2+dd*(x1-x2)/(d2**0.5)\n        y = y2+dd*(y1-y2)/(d2**0.5)\n        print(x,y,dd)\n", "def main():\n    R, x1, y1, x2, y2 = list(map(int, input().split()))\n\n    if (x1 - x2) ** 2 + (y1 - y2) ** 2 >= R ** 2:\n        return x1, y1, R\n\n    if x1 == x2 and y1 == y2:\n        return x1 + 0.5 * R, y1, 0.5 * R\n\n    vx = x1 - x2\n    vy = y1 - y2\n    vnorm = (vx**2 + vy**2) ** 0.5\n    r = R / vnorm\n\n    return (0.5 * (x1 + x2 + vx * r),\n            0.5 * (y1 + y2 + vy * r),\n            0.5 * (R + vnorm))\n\n\ndef __starting_point():\n    x, y, R = main()\n    print(x, y, R)\n\n__starting_point()", "import math\n\nR, x1, y1, x2, y2 = list(map(int, input().split()))\n\nv = [x1 - x2, y1 - y2]\n\nif v != [0, 0]:\n    lv = math.hypot(v[0], v[1])\n    if lv <= R:\n        sf = ((lv + R) / lv) / 2\n        vs = [v[0] * sf, v[1] * sf]\n\n        r = math.hypot(vs[0] - x2, vs[1] - y2)\n\n        print(x2 + vs[0], y2 + vs[1], (lv + R) / 2)\n    else:\n        print(x1, y1, R)\nelse:\n    print(x1 + R / 2, y1, R / 2)\n", "import math as mt\nimport itertools as it\nimport functools as ft\nimport random as rnd\n\nstdin = lambda type_ = \"int\", sep = \" \": list(map(eval(type_), input().split(sep)))\njoint = lambda sep = \" \", *args: sep.join(str(i) if type(i) != list else sep.join(map(str, i)) for i in args)\n\nR, x1, y1, x2, y2 = stdin()\n\nif x1 == x2 and y1 == y2:\n    print(\"{} {} {}\".format(x1 + (R / 2.), y1, R / 2.))\nelif (x2 - x1) ** 2 + (y2 - y1) ** 2 >= R ** 2:\n    print('{} {} {}'.format(x1, y1, R))\nelse:\n    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    tochka = [x2 + (x1 - x2) * (dist + R) / dist, y2 + (y1 - y2) * (dist + R) / dist]\n    print(\"{} {} {}\".format((tochka[0] + x2) / 2, (tochka[1] + y2) / 2, (((tochka[0] - x2) ** 2 + (tochka[1] - y2) ** 2 ) ** 0.5) / 2))\n", "import math\n\nr,x1,y1,x2,y2=input().split()\nr,x1,y1,x2,y2=float(r),float(x1),float(y1),float(x2),float(y2)\n\nd=math.sqrt((x2-x1)**2+(y2-y1)**2)\n\nif d>r:\n\tprint(x1,y1,r)\nelif d==0:\n\tprint(x1+r/2,y1,r/2)\nelse:\n\tR=(r+d)/2\n\n\tdist=(r-d)/2\n\n\tX=x1-(x2-x1)/d*dist\n\tY=y1-(y2-y1)/d*dist\n\n\tprint(X,Y,R)", "\nR,x1,y1,x2,y2=input().split()\nR=float(R)\nx1=float(x1)\ny1=float(y1)\nx2=float(x2)\ny2=float(y2)\nd=((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))**0.5\nk1=d;\nk2=(R-d)/2;\nif d==0:\n\tprint(x1+R/2,y1,R/2)\nelif d<=R:\n\tprint((x1*(k1+k2)-k2*x2)/k1,(y1*(k1+k2)-k2*y2)/k1,(R+d)/2)\nelse:\n\tprint(x1,y1,R)\n", "from math import hypot, sqrt\n\nR, x1, y1, x2, y2 = list(map(int, input().split()))\n\nif hypot(x1 - x2, y1 - y2) > R:\n    print(x1, y1, R)\n\nelif (x1, y1) == (x2, y2):\n    print(x1 + R / 2, y1, R / 2)\n\nelse:\n    A = y2 - y1\n    B = x1 - x2\n    C = -x1 * (y2 - y1) + y1 * (x2 - x1)\n\n    if A != 0:\n        A1 = A ** 2 + B ** 2\n        B1 = 2 * (B * C + A * B * x1 - A ** 2 * y1)\n        C1 = A ** 2 * (x1 ** 2 + y1 ** 2 - R ** 2) + C ** 2 + 2 * A * C * x1\n\n        D = B1 ** 2 - 4 * A1 * C1\n\n        Y1 = (-B1 + sqrt(D)) / (2 * A1)\n        Y2 = (-B1 - sqrt(D)) / (2 * A1)\n\n        X1 = (-B * Y1 - C) / A\n        X2 = (-B * Y2 - C) / A\n\n        h1 = hypot(x2 - X1, y2 - Y1)\n        h2 = hypot(x2 - X2, y2 - Y2)\n\n        if h1 > h2:\n            print((x2 + X1) / 2, (y2 + Y1) / 2, h1 / 2)\n\n        else:\n            print((x2 + X2) / 2, (y2 + Y2) / 2, h2 / 2)\n\n\n    elif B != 0:\n        A1 = A ** 2 + B ** 2\n        B1 = 2 * (A * C + A * B * y1 - B ** 2 * x1)\n        C1 = B ** 2 * (x1 ** 2 + y1 ** 2 - R ** 2) + C ** 2 + 2 * B * C * y1\n\n        D = B1 ** 2 - 4 * A1 * C1\n\n        X1 = (-B1 + sqrt(D)) / (2 * A1)\n        X2 = (-B1 - sqrt(D)) / (2 * A1)\n\n        Y1 = (-A * X1 - C) / B\n        Y2 = (-A * X2 - C) / B\n\n        h1 = hypot(x2 - X1, y2 - Y1)\n        h2 = hypot(x2 - X2, y2 - Y2)\n\n        if h1 > h2:\n            print((x2 + X1) / 2, (y2 + Y1) / 2, h1 / 2)\n\n        else:\n            print((x2 + X2) / 2, (y2 + Y2) / 2, h2 / 2)\n\n    else:\n        exit(100500)\n", "eps  = 0.00000000000001;\nR, x1, y1, x2, y2 = map(int, input().split());\nrst = ((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)) ** (1/2);\n#print(rst);\nif rst > R:\n    print(x1, y1, R- eps);\nelse:\n    of = rst;\n    #print(R, of);\n    r = (R + of) / 2;\n    dx = x1 - x2;\n    dy = y1 - y2;\n    #print(dx, dy);\n    if of != 0:\n        dx1 = (1/2 + R /(2 * of)) * dx;\n        dy1 = (1/2 + R / (2 * of)) * dy;\n    else:\n        dx1 = R / 2;\n        dy1 = 0;\n    #print(dx1, dy1);\n    x = x2 + dx1;\n    y = y2 + dy1;\n    print(x, y, r - eps);", "import math\n\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        if str(type(other)) == \"<class 'int'>\" or str(type(other)) == \"<class 'float'>\":\n            return Vector(self.x * other, self.y * other)\n        else:\n            return self.x * other.x + self.y * other.y\n\n    def __truediv__(self, other):\n        return Vector(self.x / other, self.y / other)\n\n    def __xor__(self, other):\n        return self.x * other.y - other.x * self.y\n\n    def get_length(self):\n        return math.sqrt(self.x ** 2 + self.y ** 2)\n\n    def __str__(self):\n        return str(self.x) + \" \" + str(self.y)\n\n    def get_nor(self):\n        l = self.get_length()\n        if l == 0:\n            l = 1\n        return Vector(self.x / l, self.y / l)\n\n    def rotate(self):\n        return Vector(-self.x, -self.y)\n\n\nr, x, y, x1, y1 = list(map(float, input().split()))\nif (x - x1) ** 2 + (y - y1) ** 2 < r ** 2:\n    if x1 == x and y1 == y:\n        v1 = Vector(r, 0)\n    else:\n        v1 = Vector(x1 - x, y1 - y).get_nor() * r\n    v2 = v1.rotate()\n    xp1 = x + v1.x\n    yp1 = y + v1.y\n    xp2 = x + v2.x\n    yp2 = y + v2.y\n    if (xp1 - x1) ** 2 + (yp1 - y1) ** 2 < (xp2 - x1) ** 2 + (yp2 - y1) ** 2:\n        xp1 = xp2\n        yp1 = yp2\n    v3 = Vector(xp1 - x1, yp1 - y1) / 2\n    ax = x1 + v3.x\n    ay = y1 + v3.y\n    print(ax, ay, v3.get_length())\nelse:\n    print(x, y, r)\n\n\n\n"]