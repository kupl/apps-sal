["N,K=map(int,input().split())\nA=list(map(int,input().split()))\n\nl=0\nr=0\ns=A[0]\nans=0\nwhile True:\n\n    if s>=K:\n        ans+=N-r\n        s-=A[l]\n        l+=1\n\n    else:\n        if r<N-1:\n            r+=1\n            s+=A[r]\n        else:\n            break\n    \nprint(ans)", "N, K = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n  if i == 0:\n    n = 0\n    k = 0\n  else:\n    n -= a[i-1]\n    if n >= K:\n      ans += N - k\n      continue\n    else:\n      k += 1\n  for j in range(k, N):\n    n += a[j]\n    if n >= K:\n      k = j\n      ans += N - j\n      break\n  else:\n    print(ans)\n    break\nelse:\n  print(ans)", "N, K = [int(_) for _ in input().split()]\nA = [int(_) for _ in input().split()]\n\nans = N * (N - 1) // 2\nk = 0\ns = 0\nfor i in range(N):\n    while s < K and k < N:\n        s += A[k]\n        k += 1\n    if s >= K:\n        k -= 1\n        s -= A[k]\n    ans -= k - i - 1\n    s -= A[i]\nprint(ans)\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\ns = 0\nj = 0\nans = 0\nfor i in range(n):\n    s += a[i]\n    while s >= k:\n        ans += (n - i)\n        s -= a[j]\n        j += 1\nprint(ans)", "N, K = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n  if i == 0:\n    n = 0\n    k = 0\n  else:\n    n -= a[i-1]\n    if n >= K:\n      ans += N - k\n      continue\n    else:\n      k += 1\n  for j in range(k, N):\n    n += a[j]\n    if n >= K:\n      k = j\n      ans += N - j\n      break\n  else:\n    k = j\nprint(ans)", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nL = [0]*(N+1)\nfor i in range(N):\n  L[i+1]=L[i]+A[i]\nr, cnt = 0, 0\nfor l in range(N):\n  while r<N and L[r+1]-L[l]<K:\n    r += 1\n  cnt += (N-r)\nprint(cnt)", "import bisect\nN,K=map(int,input().split())\nA=[int(x) for x in input().split()]\nleft_sum=[0]*N#\u81ea\u5206\u3068\u305d\u308c\u3088\u308a\u5de6\u5074\u306e\u8981\u7d20\u306e\u7dcf\u548c\nnow=0\nfor h in range(N):\n    now+=A[h]\n    left_sum[h]=now\nans=0\nfor i in range(N):\n    target=K+left_sum[i]-A[i]\n    ans+=N-bisect.bisect_left(left_sum,target)\nprint(ans)", "'''\n\u7814\u7a76\u5ba4PC\u3067\u306e\u89e3\u7b54\n'''\nimport math\n#import numpy as np\nimport queue\nimport bisect\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\nmod = 10**9+7 #998244353\ndir = [(-1,0),(1,0),(0,-1),(0,1)]\nalp = \"abcdefghijklmnopqrstuvwxyz\"\n\n\ndef main():\n    n,k = list(map(int,ipt().split()))\n    a = [int(i) for i in ipt().split()]\n    ans = 0\n    sm = 0\n    l = 0\n    for i in range(n):\n        sm += a[i]\n        while sm >= k:\n            sm -= a[l]\n            l += 1\n        ans += l\n\n    print(ans)\n    return None\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n\ns_a = 0\nans = 0\nidx = 0\nfor i in range(N):\n\n    while s_a < K:\n        \n        if(idx >= N):\n            break\n        \n        s_a += a[idx]\n        idx += 1\n    #print(idx, ans, s_a)\n    if(s_a >= K):    \n        ans += N-idx+1\n        s_a -= a[i]\n    else:\n        break\n    \nprint(ans)", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    n,k = i_map()\n    a = i_list()\n\n    X = [0] + list(itertools.accumulate(a))\n\n    ans = 0\n    from bisect import bisect_left\n    for x in X:\n        i = bisect_left(X, k+x)\n        if i == n+1:\n            if X[-1] - x >= k:\n                ans += 1\n        else:\n            ans += n - i + 1\n\n    print(ans)\n\n\n\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nleft = 0\nans = 0\nsum = 0\nfor right in range(n):\n  sum += A[right]\n  while sum >= k:\n    sum -= A[left]\n    left+=1\n  ans += left\nprint(ans)\n\n", "n,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\nR=[A[0]]*n\nfor i in range(n-1):\n    R[i+1]= R[i]+A[i+1]\n\ndef get(x):\n    if x==0: return 0\n    return R[x-1]\n\nleft=0 ; right=1\nimport bisect as bi\nans=0\nwhile 1:\n    # if get?\n    q=bi.bisect_left(R,get(left)+k) \n    if q==n: print(ans);return \n    ans+= n-q\n    left+=1  \n", "N, K = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()] + [0]\n\ncnt = 0\nleft = 0\nright = 0\nt = A[right]\nwhile right < N:\n    if t >= K:\n        cnt += N - right\n    if t >= K and left < right:\n        t -= A[left]\n        left += 1\n    elif t >= K and left == right:\n        left += 1\n        right += 1\n        t = A[right]\n    else:\n        right += 1\n        t += A[right]\nprint(cnt)\n", "N,K=map(int,input().split())\na=list(map(int,input().split()))\n\nL=0\nR=0\nrangeSum=a[0]\nans=0\nfor i in range(N):\n  L=i\n  while rangeSum<K:\n    R+=1\n    if R>=len(a):break\n    rangeSum+=a[R]\n  ans+=max(N-R,0)\n  rangeSum-=a[L]\nprint(ans)", "import sys\nimport math\nimport itertools\nimport collections\nfrom collections import deque\nfrom collections import defaultdict\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\nMOD2 = 998244353\nINF = float('inf')\ninput = lambda: sys.stdin.readline().strip()\n\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\ndef main():\n\n    N, K = NMI()\n    A = NLI()\n    \n    left = 0\n    right = 0\n    shakutori = 0\n    ans = 0\n    \n    for left in range(N):\n\n        while shakutori < K and right <N:\n            shakutori += A[right]\n            right+= 1\n            \n        if shakutori >= K:\n            ans += N-right+1\n            shakutori -= A[left]\n        else:\n            break\n        \n    print(ans)\n    \n\n\ndef __starting_point():\n    main()\n__starting_point()", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return list(map(int,input().split()))\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nn,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nfrom itertools import accumulate\nfrom bisect import bisect_left\na=[0]+list(accumulate(a))\n\n\n\nans=0\n#\u533a\u9593\u306e\u7aef\u3092\u6c7a\u3081\u3066\u3042\u308b\u3068\u3053\u308d\u3067k\u3092\u8d8a\u3048\u308c\u3070\u305d\u308c\u304b\u3089\u5148\u306f\u305a\u3063\u3068\u8d85\u3048\u308b\nfor i in range(n+1):\n  j=bisect_left(a,k+a[i])\n  ans=ans+n-j+1\nprint(ans)\n\n  \n\n", "N, K = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = [0] * (N + 1)\nfor i in range(1, N + 1):\n    b[i] = b[i - 1] + a[i - 1]\n\nans = 0\nj = 0\nfor i in range(1, N + 1):\n    if b[i] - b[j] < K:\n        continue\n    ans += N + 1 - i\n    while i > j:\n        j += 1\n        if b[i] - b[j] >= K:\n            ans += N + 1 - i\n        else:\n            break\nprint(ans)\n", "import bisect\nN, K = list(map(int,input().split()))\na = list(map(int,input().split()))\nS = [0]*N\nS[0] = a[0]\nfor k in range(1,N):\n    S[k] = S[k-1] + a[k]\nS = [0] + S\nans = 0\nfor k in range(N+1):\n    if S[k] >= K:\n        ans += bisect.bisect_right(S,S[k]-K)\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Sep 17 01:45:21 2020\n\n@author: liang\n\"\"\"\n\nN, K = list(map(int, input().split()))\nA = [0]+[int(x) for x in input().split()] + [0]\n\nans = 0\nj = 0\ntmp = 0\nfor i in range(1,N+1):\n    tmp -= A[i-1]\n    while tmp >= K and i < j:\n        tmp -= A[j]\n        j -= 1\n    while tmp < K and j <= N:\n        j += 1\n        tmp += A[j]\n    ans += N+1 - j\nprint(ans)\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ncnt = 0\ncur = 0\nr = -1\n\nfor l in range(n):\n    stop = True\n    if cur < k:\n        while r < n-1:\n            r += 1\n            cur += a[r]\n            if cur >= k:\n                cnt += n-r\n                stop = False\n                break\n\n    elif cur > k:\n        stop = False\n        if r == l:\n            cnt += n-r\n        else:\n            while r > l:\n                cur -= a[r]\n                r -= 1\n                if cur <= k:\n                    r += 1\n                    cur += a[r]\n                    cnt += n-r\n                    break\n\n    else:\n        cnt += n-r\n        stop = False\n\n    cur -= a[l]\n\n    if stop:\n        break\n\nprint(cnt)", "n,k = map(int,input().split())\nA = list(map(int,input().split()))\n\n# \u7d2f\u7a4d\u548c\u3068\u4e8c\u5206\u63a2\u7d22\u89e3\u6cd5\n\na = [0]\nfor i in range(n):\n  a.append(a[i]+A[i])\n\ndef is_ok(tmp,arg):\n  return a[arg]-a[tmp]>=k\n\ncnt = 0\nfor i in range(n):\n  top,bot = n+1,i\n  while top - bot > 1:\n        mid = (top + bot)//2\n        if is_ok(i,mid):\n            top = mid\n        else:\n            bot = mid\n  cnt += n-top+1\n  \nprint(cnt)", "n, k = map(int,input().split())\na = list(map(int,input().split()))\nans, s = 0, 0\nr = 0\nfor l in range(n):\n    while r < n and s < k:\n        s += a[r]\n        r += 1\n    if s >= k:\n        ans += n - r + 1\n    s -= a[l]\n\nprint(ans)", "from bisect import bisect_left,bisect_right\n\nn,k=list(map(int,input().split()))\na=[0]+list(map(int,input().split()))\ncuma=[0]\nfor i in range(1,n+1):\n  cuma.append(cuma[i-1]+a[i])\n\nif cuma[-1]<k: print((0)); return\nr=bisect_left(cuma,k)\n\nans=0\nfor i in range(r,len(cuma)):\n  l=bisect_right(cuma,cuma[i]-k)\n  ans+=l\n  \nprint(ans)\n", "from collections import deque\n\nN, K = [int(i) for i in input().split()]\nAS = [int(i) for i in input().split()]\n\nl = deque()\ns = 0\ncnt = 0\n\ns = 0\nfor i in range(N):\n  a = AS[i]\n  s += a\n  l.append(a)\n  if s >= K:\n    cnt += N - i\n    while s -l[0] >= K:\n      s -= l[0]\n      cnt += N - i\n      l.popleft()\n    s -= l[0]\n    l.popleft()\n\n\nprint(cnt)\n", "from itertools import accumulate\nN,K=map(int,input().split())\nA=list(map(int,input().split()))\nA_=[0]+list(accumulate(A))\n\nN_=N+1\nx=0\nans=0\nfor i in range(N_):\n    S=A_[i]-A_[x]\n    if S>=K:\n        while (S>=K and x!=i):\n            ans+=N_-i\n            x+=1\n            S=A_[i]-A_[x]\nprint(ans)", "import bisect\nN,K = map(int,input().split())\nA = [int(i) for i in input().split()]\nans = 0\n'''\nr = 0\nl = 0\ns = 0\nfor r in range(N) :\n    s += A[r]\n    while s >= K : \n        ans += N-r\n        s -= A[l]\n        l += 1\n        \nprint(ans)\n'''\n\ncusum = [0]\nfor i in range(N) :\n    cusum.append(cusum[i]+A[i])\n\nfor i in cusum :\n    if i < K :\n        continue\n    ans += bisect.bisect(cusum,i-K)\nprint(ans)", "import numpy as np\n \nN,K = map(int,input().split())\n \nINF = 10 ** 18\nA = [0] + [int(x) for x in input().split()] + [INF]\nA = np.array(A)\nAcum = A.cumsum()\n \nidx = np.searchsorted(Acum, Acum + K)\nanswer = ((N+1) - idx[:N]).sum()\nprint(answer)", "from bisect import *\nfrom numpy import *\nN,K,*A = map(int,open(0).read().split())\nB = [0]+list(cumsum(A))    \nprint(sum(N+1-bisect_left(B,K+B[n]) for n in range(N+1)))", "#import math\n#import itertools\n#import numpy as np\n#from collections import deque\n# sys.setrecursionlimit(10 ** 6)\n#MOD = 10 ** 9 + 7\n#INF = 10 ** 9\n#PI = 3.14159265358979323846\n\nINT = lambda: int(input())\nINTM = lambda: map(int,input().split())\nSTRM = lambda: map(str,input().split())\nSTR = lambda: str(input())\nLIST = lambda: list(map(int,input().split()))\nLISTS = lambda: list(map(str,input().split()))\n\ndef do():\n    n,k=INTM()\n    A=LIST()\n    suma=[0]*(n+1)\n    for i in range(n):\n        suma[i+1]=suma[i]+A[i]\n    ans=0\n    for i in range(0,n+1):\n        low=i-1\n        high=n+1\n        check=suma[i]+k\n        for j in range(20):\n            mid=(low+high)//2\n            if suma[mid]<check:\n                low=mid\n            else:\n                high=mid\n        #print(low)\n        ans+=n-low\n    #print(suma)\n    print(ans)\n\n\n\ndef __starting_point():\n    do()\n__starting_point()", "n, k, *a = list(map(int, open(0).read().split()))\n\nl = r = 0\ns = 0\nunko = 0\nwhile l < n:\n    while r < n and s < k:\n        s += a[r]\n        r += 1\n    if s < k:\n        break\n    unko += n - r + 1\n    s -= a[l]\n    if l == r:\n        r += 1\n    l += 1\nprint(unko)\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(N: int, K: int, a: \"List[int]\"):\n    su, left, ans = 0, 0, 0\n    for right in range(N):\n        su += a[right]\n        while (su - a[left]) >= K:\n            su -= a[left]\n            left += 1\n        ans += left + (su >= K)\n        right += 1\n    return ans\n        \n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    a = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    print((solve(N, K, a)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\n\n# \u3057\u3083\u304f\u3068\u308a\u6cd5\u306e\u57fa\u672c\u554f\u984c\nleft = 0\nright = 0\n# \u304a\u305d\u3089\u304f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u7bc4\u56f2\u306e\u53d6\u308a\u6271\u3044\u3067\u9593\u9055\u3048\u308b\ncount = 0\ntotal = 0\nwhile left < N and right < N:\n    total += A[right]\n    while total >= K:\n        count += N - right\n        total -= A[left]\n        left += 1\n    right += 1\nprint(count)\n", "import bisect\nN,K=map(int,input().split())\nA=[int(x) for x in input().split()]\nleft_sum=[0]*N#\u81ea\u5206\u3068\u305d\u308c\u3088\u308a\u5de6\u5074\u306e\u8981\u7d20\u306e\u7dcf\u548c\nnow=0\nfor h in range(N):\n    now+=A[h]\n    left_sum[h]=now\nans=0\nfor i in range(N):\n    target=K+left_sum[i]-A[i]\n    ans+=N-bisect.bisect_left(left_sum,target)\nprint(ans)", "n,k = map(int,input().split())\na = list(map(int,input().split()))\n\ns = [0]*n\ns[0] = a[0]\nfor i in range(1,n):\n    s[i] = s[i-1] + a[i]\n\nans = 0\nfor i in range(n):\n    tmp = s[i]-a[i]\n    if s[n-1]-tmp < k:\n        continue\n    if a[i] >= k:\n        ans += n-i\n        continue\n    left = i-1\n    right = n\n    while right-left > 1:\n        mid = (left+right)//2\n        if s[mid]-tmp >= k:\n            right = mid\n        else:\n            left = mid\n    #print(i,right)\n    ans += n-right\nprint(ans)", "import bisect\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nC = [0] * N\nC[0] = A[0]\nfor i in range(1, N):\n    C[i] = C[i-1] + A[i]\n\nans = 0\nfor i in range(N):\n    x = 0 if i == 0 else C[i-1]\n    ans += N - bisect.bisect_left(C, K + x)\nprint(ans)", "N, K = list(map(int, input().split()))\nA_list = list(map(int, input().split()))\nA_ruisekiwa = [0] * (N + 1)\nfor i in range(1, N + 1):\n    A_ruisekiwa[i] = A_ruisekiwa[i - 1] + A_list[i - 1]\n\nimport bisect\n\n# print(A_ruisekiwa)\nans = 0\nfor i in range(N):\n    a = K + A_ruisekiwa[i]\n    t_i = bisect.bisect_left(A_ruisekiwa, a)\n    if t_i <= N:\n        ans += N - t_i + 1\n\nprint(ans)\n", "import numpy as np\nn,k = map(int, input().split())\na = [0] + list(map(int, input().split()))\na = list(np.cumsum(a))\ncnt = 0\nx = 1\nfor i in range(n):\n    for j in range(x, n+1):\n        if a[j]-a[i] >= k:\n            cnt += (n+1) - j\n            x = j\n            break\nprint(cnt)", "# import itertools\n# import math\n# import sys\n# sys.setrecursionlimit(500*500)\nimport numpy as np\n# import heapq\n# from collections import deque\n\n# N = int(input())\n# S = input()\n# n, *a = map(int, open(0))\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\nA = np.array(A)\ncum_A = np.cumsum(A)\ncum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\ncnt = 0\nj = 1\nfor i in range(1, N + 1):\n    while(j <= N):\n        if cum_A[j] - cum_A[i - 1] >= K:\n            cnt += N - j + 1\n            break\n        j += 1\nprint(cnt)", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nfrom itertools import accumulate\nac=[0]+list(accumulate(a))\nfrom bisect import bisect_left\ncount=0\nfor i in range(1,n+1):\n    count+=(n-bisect_left(ac,k+ac[i-1])+1)\nprint(count)", "from itertools import accumulate\nfrom bisect import bisect_left\nN,K = map(int,input().split())\nA = list(map(int,input().split()))\nacc = [0]+list(accumulate(A, lambda x,y:x+y))\nans = 0\nfor i in range(N+1):\n    j = bisect_left(acc, K+acc[i], lo=i)\n    ans += N+1-j\nprint(ans)", "n, k = list(map(int, input().split()))\na_list = list(map(int, input().split()))\n\ns = 0\nt = 1\ntemp_sum = a_list[0]\nans = 0\n\nwhile t <= n:\n    if temp_sum >= k:\n        temp_sum -= a_list[s]\n        ans += n - t + 1\n        s += 1\n\n    else:\n        if t >= n:\n            break\n        temp_sum += a_list[t]\n        t += 1\n\nprint(ans)\n", "n, k = map(int, input().split())\nai = list(map(int, input().split()))\ncount = 0\n\nr = 0\nl = 0\nacc = 0\n\nwhile r < n:\n    while r < n:\n        acc += ai[r]\n        r += 1\n        if acc >= k:\n            break\n\n    while l < r:\n        if acc >= k:\n            count += n - r + 1\n            acc -= ai[l]\n            l += 1\n        else:\n            break\n\n\nprint(count)", "N,K = map(int,input().split())\nA = list(map(int,input().split()))\ncums = [0]\nfor a in A:\n    cums.append(cums[-1] + a)\n\nans = 0\nfrom bisect import bisect_left\nfor i in range(N):\n    j = bisect_left(cums, cums[i]+K)\n    ans += N+1-j\nprint(ans)", "N,K = list(map(int,input().split()))\na = list(map(int,input().split()))\nnow = 0\nans = 0\nposition = 0\nbreak_flag = 0\n\nfor i in range(N):\n  while now < K:\n    if position >= N:\n      break_flag = 1\n      break\n    now += a[position]\n    position += 1\n  if break_flag == 1:\n    break\n  ans += N - position + 1\n  now -= a[i]\nprint(ans)", "n,k = list(map(int,input().split()))\nb = list(map(int,input().split()))\nsum=0\nd=0\nans=0\nfor i in range(n):\n  sum += b[i]\n  if sum >=k:\n    while sum >= k:\n      ans += n-i\n      sum -= b[d]\n      d += 1\nprint(ans)\n      \n\n", "N, K = map(int, input().split())\na = list(map(int, input().split()))\n\nl = [0] * (N + 1)\nr = [0] * (N + 1)\n#l[0] = a[1]\n#r[-2] = a[-1]\nfor i in range(N):\n    l[i+1] = l[i] + a[i]\n    r[-i-2] = r[-i-1] + a[-i-1]\ns = l[-1]\n\nans = 0\n\nfor i in range(N):\n    if K > s - r[-i-1]:\n        break\n    else:\n        c = s - K - r[-i-1]\n        min1 = 0\n        max1 = N - i\n        while max1 - min1 > 1:\n            t = (max1 + min1) // 2\n            if l[t] > c:\n                max1 = t\n            else:\n                min1 = t\n        ans += min1 + 1\n        #print(i, min1)\n\nprint(ans)", "from bisect import bisect_right, bisect_left\nN, K = map(int,input().split())\nA = [0]+list(map(int,input().split()))\nprev = 0\nfor i in range(1,len(A)):\n  A[i] = A[i]+A[i-1]\n\nans = 0\nfor i in range(len(A)):\n  if A[i]>=K:\n    ans+=bisect_right(A,A[i]-K)\nprint(ans)", "import bisect\nN,K = map(int,input().split())\nA = list(map(int,input().split()))\nsum_A = [0]\nfor i in range(N):\n  sum_A.append(sum_A[i]+A[i])\n#print(sum_A)\nre_sum_A = [0]\nfor i in range(N):\n  re_sum_A.append(re_sum_A[i]+A[N-1-i])\ncount = 0\nmaximum = sum_A[N]\nfor i in range(N):\n  num = maximum-K-sum_A[i]\n  index = bisect.bisect(re_sum_A,num)\n  count = index+count\nprint(count)", "import bisect,collections,copy,itertools,math,string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef main():\n\n    n, k = LI()\n    a = [0] + LI()\n    ac = list(itertools.accumulate(a))\n\n    ans = 0\n    now = 0\n\n    for i in range(1,n+1):\n        for j in range(now, n+1):\n            if ac[now]-ac[i-1] >= k:\n                ans += n-now+1\n                break\n            else:\n                now += 1\n        else:\n            break\n\n    print(ans)\n    \n\n        \n\n\nmain()\n", "def main():\n    N, K = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n\n    f, b = 0, 0\n    ans = 0\n    v = A[0]\n    while(f < N):\n        if v < K:\n            b += 1\n            if b == N:\n                break\n            else:\n                v += A[b]\n        else:\n            ans += N - b\n            v -= A[f]\n            f += 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nleft = 0\ntotal = 0\ncnt = 0\nfor right in range(N):\n  total += A[right]\n  while total >= K:\n    cnt += N - right\n    total -= A[left]\n    left += 1\nprint(cnt)\n", "n, k = map(int,input().split())\na = list(map(int,input().split()))\nans, s = 0, 0\nr = 0\nfor l in range(n):\n    while r < n and s < k:\n        s += a[r]\n        r += 1\n    if s >= k:\n        ans += n - r + 1\n    s -= a[l]\n\nprint(ans)", "def solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    \n    ans, s = 0, 0\n    r = 0\n    \n    for l in range(n):\n        while r < n and s < k:\n            s += a[r]\n            r += 1\n        if s >= k:\n            ans += n - r + 1\n        s -= a[l]\n\n    return ans\n\ndef __starting_point():\n    print(solve())\n__starting_point()", "n, k = list(map(int, input().split()))\na = [int(i) for i in input().split()]\ni = 0\ns = 0\nans = 0\nfor j in range(n):\n    s += a[j]\n    while s >= k:\n        s -= a[i]\n        i += 1\n    ans += i\nprint(ans)\n", "import numpy as np\n\nN, K = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na.insert(0,0)\nAcum = np.array(a).cumsum()\n\nl, r = 0, 1\nans = 0\nwhile True:\n    if Acum[r] - Acum[l] < K:\n        if r < N:\n            r += 1\n        else:\n            l += 1\n    if Acum[r] - Acum[l] >= K:\n        ans += len(Acum[r:])\n        l += 1\n    if l == N:\n        break\n\nprint(ans)\n", "import array\n\nN,K = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\nans = 0\ntmp = A[0]\nright = 0\n\n\nfor i in range(N):\n    for j in range(right+1,N):\n        if tmp >= K:\n            break\n        tmp += A[j]\n\n        right += 1\n\n    if tmp >= K:\n        ans += N-right\n        if N-right == 0:\n            break\n\n    tmp -= A[i]\nprint(ans)\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ns = [0]\nfor i in range(N):\n    s.append(s[-1]+A[i])\n\nl = 0\nr = 1\ncnt = 0\n\nfor l in range(N):\n    while r < N and s[r] - s[l] < K:\n        r += 1\n    if s[r] - s[l] < K:\n        break\n    \n    cnt += N - r + 1\n\n    if l + 1 == r:\n        r += 1\n\nprint(cnt)", "def main():\n\tN, K = [int(x) for x in input().split(\" \")]\n\tA = [int(a) for a in input().split(\" \")] + [0]\n\ti = 0\n\tj = 0\n\tcnt = [0] * N # cnt[i] -> the number of partial sequence which begins with a[i] and sum is over K\n\ts = A[j]\n\twhile i < N:\n\t\tif s < K and j < N - 1:\n\t\t\tj += 1\n\t\t\ts += A[j]\n\t\telif s >= K:\n\t\t\tcnt[i] = N - j\n\t\t\ts -= A[i]\n\t\t\ti += 1\n\t\telif j == N - 1:\n\t\t\tcnt[i] = 0\n\t\t\ts -= A[i]\n\t\t\ti += 1\n\tprint(sum(cnt))\n\nmain()", "n,k = map(int,input().split())\na = list(map(int,input().split()))\nleft = 0\nx = 0\nans = 0\nfor right in a:\n    x += right\n    while x >= k:\n        x -= a[left]\n        left += 1\n    ans += left\nprint(ans)", "from itertools import accumulate\nimport bisect\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\n\na = [0] + list(accumulate(lis))\n\nans = 0\nfor i in a:\n    if i < k:\n        continue\n    ans += bisect.bisect_right(a, i-k)\n\nprint(ans)", "from bisect import bisect_right\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ns = [a[0]]\nfor ai in a[1:]:\n    s.append(s[-1] + ai)\n\nans = 0\nfor i in range(n):\n    if s[i] >= k:\n        d = s[i]-k\n        ans += bisect_right(s, d)+1\nprint(ans)\n", "import bisect\nN,K = list(map(int, input().split()))\nAs = list(map(int, input().split()))\n\nas_ruisekiwa = [0]\n\nfor a in As:\n    as_ruisekiwa.append(a + as_ruisekiwa[-1])\n\n#print(as_ruisekiwa)\n\nans = 0\n\nfor i in range(N+1):\n    index_check_num = K + as_ruisekiwa[i]\n    index = bisect.bisect_left(as_ruisekiwa, index_check_num)\n#    print(as_ruisekiwa, index_check_num, index)\n    ans += N - index + 1\n#    print(ans)\n\nprint(ans)", "from bisect import bisect_left\n\nN, K = [int(x) for x in input().split()]\na = [0] + [int(x) for x in input().split()]\ns = [0]*(N + 1)\nfor i in range(1, N + 1):\n    s[i] = s[i - 1] + a[i]\n\nans = 0\nfor i in range(1, N + 1):\n    j = bisect_left(s, K + s[i - 1])\n    ans = ans + N - j + 1\n\nprint(ans)", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nans=0\nif n==1:\n    if a[0]>=k:\n        print(1)\n        return\n    else:\n        print(0)\n        return\nright=0\nsum=0\nfor left in range(n):\n    while right<n and sum<k:\n        sum+=a[right]\n        right+=1\n    if sum<k:\n        break\n    ans+=(n-right+1)\n    if right==left:\n        right+=1\n    else:\n        sum-=a[left]\nprint(ans)", "import bisect\nfrom itertools import accumulate\nn, k = map(int, input().split())\na = [0]+list(accumulate(list(map(int, input().split()))))\nans = 0\nfor i in range(n):\n    ans += n+1-bisect.bisect_left(a, k+a[i]) \nprint(ans)", "import itertools\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nc = itertools.accumulate(a)\nans, s, j = 0, 0, 0\nfor i, v in enumerate(c):\n    while v-s >= k:\n        ans += n-i\n        s += a[j]\n        j += 1\nprint(ans)", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nr, total, ans = 0, 0, 0\nfor l in range(N):\n    while r < N and total < K:\n        total += A[r]\n        r += 1\n    if total < K:\n        break\n    ans += N - r + 1\n    if l == r:\n        r += 1\n    else:\n        total -= A[l]\n\nprint(ans)\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nacsum = [0]\nfor i in range(n):\n    acsum.append(acsum[i] + a[i])\n\ncnt =0\np = 0\nfor i in range(n + 1):\n    if acsum[i] >= k:\n        p = i\n        break        \n\nif acsum[n] < k:\n    pass\nelse:\n    j = 0\n    for i in range(p, n + 1):\n        while j <= i:\n            if acsum[i] - acsum[j] >= k:\n                j += 1\n                continue\n            else: # acsum[i] - acsum[j] < k\n                cnt += j\n                j = j - 1\n                break\nprint(cnt)", "n,k = map(int,input().split())\nl = list(map(int,input().split()))\nfor i in range(1,n):\n    l[i]+=l[i-1]\ni = 0\nj = 0\nans = 0\nwhile j<n:\n    if i==0:\n        if k<=l[j]:\n            ans+=n-j\n            i+=1\n        else:\n            j+=1\n    else:\n        if k<=(l[j]-l[i-1]):\n            ans+=n-j\n            i+=1\n        else:\n            j+=1\nprint(ans)", "N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nr, s, ans = 0, 0, 0\nfor l in range(N):\n    while r < N and s < K:\n        s += A[r]\n        r += 1\n    if s < K:\n        break\n    ans += N - r + 1\n    s -= A[l]\n    if l == r:\n        r += 1\n\nprint(ans)\n", "N,K = map(int,input().split())\nA = [int(i) for i in input().split()]\nans = 0\nr = 0\nl = 0\ns = 0\nfor r in range(N) :\n    s += A[r]\n    while s >= K : \n        ans += N-r\n        s -= A[l]\n        l += 1\n        \nprint(ans)", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\n\n#\u5c3a\u53d6\u308a\u6cd5\ncnt=0\nans=0\nright=-1\nfor left in range(n):\n  while right<n-1 and cnt+a[right+1]<k:\n    right=right+1\n    cnt=cnt+a[right]\n  if right==n-1:\n    if cnt>=k:\n      ans=ans+1\n  else:\n    if cnt+a[right+1]>=k:\n      ans=ans+n-right-1\n  cnt=cnt-a[left]\n  if right<left:\n    right=left-1\n \nprint(ans)", "from itertools import accumulate,chain\n\nN,K = map(int,input().split())\n\nA = tuple(map(int,input().split()))\nj = 0\ns = 0\ncnt = 0\nfor i in range(N):\n    while j < N and s < K:\n        s += A[j]\n        j += 1\n    if s < K:\n        break\n    else:\n        cnt += N-j+1\n    s -= A[i]\n\nprint(cnt)", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nfrom itertools import accumulate\nfrom bisect import bisect_left\na=[0]+list(accumulate(a))\n\n\n\nans=0\n#\u533a\u9593\u306e\u7aef\u3092\u6c7a\u3081\u3066\u3042\u308b\u3068\u3053\u308d\u3067k\u3092\u8d8a\u3048\u308c\u3070\u305d\u308c\u304b\u3089\u5148\u306f\u305a\u3063\u3068\u8d85\u3048\u308b\nfor i in range(n+1):\n  j=bisect_left(a,k+a[i])\n  ans=ans+n-j+1\nprint(ans)\n\n  \n", "import math\nn,k=map(int,input().split())\n\ntmp=0\ncumsum=[0]\nfor i in map(int,input().split()):\n    tmp+=i\n    cumsum.append(tmp)\n# print(alist,cumsum)\ntotal=0\nfor end in range(n):\n    if cumsum[end+1]-cumsum[0]>=k:\n        #2\u5206\u63a2\u7d22\n        tmpstart=0\n        tmpend=end\n        tmp=(tmpstart+tmpend)//2\n        while tmpstart!=tmpend:\n            if (cumsum[end+1]-cumsum[tmp]>=k) and (cumsum[end+1]-cumsum[tmp+1]>=k):\n                tmpstart=tmp+1\n            elif (cumsum[end+1]-cumsum[tmp]<k) and (cumsum[end+1]-cumsum[tmp+1]<k):\n                tmpend=tmp-1\n            else:\n                tmpstart=tmp\n                tmpend=tmp\n            tmp=(tmpstart+tmpend)//2\n        total+=tmp+1\n    \nprint(total)", "n,k = list(map(int,input().split()))\na = list(map(int,input().split()))\n\nright = 0\ncnt = 0\nsuma = 0\nfor left in range(n):\n    while right<n and suma+a[right]<k:\n        suma += a[right]\n        right += 1\n    cnt += n - right\n    if left==right:\n        right += 1\n    else:\n        suma -=a[left]\nprint(cnt)\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nans = 0\ntmp = 0\nj = 0\nfor i in range(N):\n  tmp += A[i]\n  while tmp >= K:\n    ans += N-i\n    tmp -= A[j]\n    j+= 1\nprint(ans)", "import bisect\n\nn, k = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\n\ncul_sum = [0] * (n + 1)\n\n\n# pre-processing\nfor i in range(1, n + 1):\n    cul_sum[i] = cul_sum[i - 1] + A[i - 1]\n\nans = 0\n\nfor i in range(n + 1):\n    target = k + cul_sum[i]\n    right = bisect.bisect_left(cul_sum, target)\n    if right == n + 1:\n        break\n    ans += n - (right - 1)\n\nprint(ans)\n", "from itertools import accumulate\nfrom bisect import bisect_left,bisect,bisect_right\n\nn,k=list(map(int,input().split()))\na=list(map(int,input().split()))\n    \naa=[0]+list(accumulate(a))\n\nicnt=0\nfor i in range(n):\n    if aa[i]+k>aa[n]:\n        continue\n    ii =bisect_left(aa,aa[i]+k)\n#    print(i,aa[i],aa[i]+k,ii,n+1-ii)\n    icnt+=max(n+1-ii,0)\n\nprint(icnt)\n", "N, K, *A = list(map(int, open(0).read().split()))\n\ntotal = 0\nright = 0\nans = 0\nfor left in range(N):\n    while right < N and total + A[right] < K:\n        total += A[right]\n        right += 1\n\n    ans += N - right\n\n    if left == right:\n        right += 1\n    else:\n        total -= A[left]\nprint(ans)\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nans = 0\nr = 1\nsu = A[0]\nfor left in range(N):\n  while su < K:\n    if r==N:\n      break\n    su += A[r]\n    r+=1\n  if su < K:\n    break\n  ans += N-r+1\n  su -= A[left]\nprint(ans)", "import sys\n\u5165\u529b = sys.stdin.readline\n\u7bc4\u56f2, \u51fa\u529b = range, print\n\u4e00\u884c\u306b\u8907\u6570\u500b\u306e\u5165\u529b = lambda:map(int, \u5165\u529b().split())\n\u6570\u5217 = list\n\u7d76\u5bfe\u5024 = abs\n\n\u9577\u3055, \u5408\u8a08\u5024\u306e\u4e0b\u9650 = \u4e00\u884c\u306b\u8907\u6570\u500b\u306e\u5165\u529b()\n\u6574\u6570\u5217 = \u6570\u5217(\u4e00\u884c\u306b\u8907\u6570\u500b\u306e\u5165\u529b())\n\u7d2f\u7a4d\u548c = [0 for _ in \u7bc4\u56f2(\u9577\u3055 + 1)]\nfor _ in \u7bc4\u56f2(\u9577\u3055):\n  \u7d2f\u7a4d\u548c[_ + 1] = \u7d2f\u7a4d\u548c[_] + \u6574\u6570\u5217[_]\n\u7b54\u3048 = 0\nfor _ in \u7bc4\u56f2(\u9577\u3055):\n  \u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u308b\u6700\u5c0f\u5024\u306e\u3042\u308b\u3068\u3053\u308d = \u9577\u3055 + 1\n  \u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u6700\u5927\u5024\u306e\u3042\u308b\u3068\u3053\u308d = _\n  while \u7d76\u5bfe\u5024(\u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u308b\u6700\u5c0f\u5024\u306e\u3042\u308b\u3068\u3053\u308d - \u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u6700\u5927\u5024\u306e\u3042\u308b\u3068\u3053\u308d) > 1:\n    \u771f\u3093\u4e2d = (\u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u308b\u6700\u5c0f\u5024\u306e\u3042\u308b\u3068\u3053\u308d + \u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u6700\u5927\u5024\u306e\u3042\u308b\u3068\u3053\u308d) // 2\n    if \u7d2f\u7a4d\u548c[\u771f\u3093\u4e2d] - \u7d2f\u7a4d\u548c[_] >= \u5408\u8a08\u5024\u306e\u4e0b\u9650:\n      \u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u308b\u6700\u5c0f\u5024\u306e\u3042\u308b\u3068\u3053\u308d = \u771f\u3093\u4e2d\n    else:\n      \u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u6700\u5927\u5024\u306e\u3042\u308b\u3068\u3053\u308d = \u771f\u3093\u4e2d\n  \u7b54\u3048 += \u9577\u3055 + 1 - \u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u308b\u6700\u5c0f\u5024\u306e\u3042\u308b\u3068\u3053\u308d\n\u51fa\u529b(\u7b54\u3048)\n    ", "n,k = map(int,input().split())\na = list(map(int,input().split()))\ncnt,temp = 0,a[0]\nhead,tail = 1,0\nwhile tail<n:\n  if head<n:\n    if temp+a[head]<k:\n      temp += a[head]\n      head += 1\n    else:\n      if temp<k:\n        cnt += head-tail\n      temp -= a[tail]\n      tail += 1\n      if tail==head:\n        temp += a[head]\n        head += 1\n  else:\n    if temp<k:\n      cnt += head-tail\n    tail += 1\nprint((n+1)*n//2-cnt)  ", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = 0\ns = 0\n\nr = 0\nfor l in range(n):\n    while s < k:\n        if r == n:\n            break\n        s += a[r]\n        r += 1\n    if s < k:\n        break\n    ans += n-r+1\n    s -= a[l]\nprint(ans)\n", "#!/usr/bin/env python3\nfrom bisect import bisect_right\n# input = stdin.readline\n\ndef solve(n,k,a):\n  def calcCumSum(a):\n    l = [0]*(len(a)+1)\n    for i in range(len(a)):\n      l[i+1] = l[i] + a[i]\n    return l\n\n  cum = calcCumSum(a)\n  \n  def calcSectionSum(cum,left,right):\n    return cum[right] - cum[left]\n\n  res = 0\n  for left in range(n):\n    ng, ok = left, n+1\n    while abs(ng-ok) > 1:\n      mid = (ng+ok) // 2\n      if calcSectionSum(cum,left,mid) >= k:\n        ok = mid\n      else:\n        ng = mid\n    res += n - ok + 1\n  return res\n\ndef main():\n  N,K = list(map(int,input().split()))\n  a = list(map(int,input().split()))\n  print((solve(N,K,a)))\n  return\n\ndef __starting_point():\n  main()\n\n__starting_point()", "n,k=map(int,input().split())\na=list(map(int,input().split()))\ncount=0\nr=0\nsumi=0\nfor i in range(0,len(a)):\n    while(sumi<k):\n        if (r==len(a)):\n            break\n        else:\n            sumi+=a[r]\n            r+=1\n    if sumi<k:\n        break;\n    count+=n-r+1\n    sumi-=a[i]\nprint(count)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\nacsum = [0]\nfor i in range(n):\n    acsum.append(acsum[i] + a[i])\n\ncnt = 0\njj = 0\nfor i in range(n):\n    for j in range(jj, n - i):\n        if acsum[i+j+1] - acsum[i] >= k:\n            cnt += n - i - j\n            jj = j - 1\n            break\nprint(cnt)", "n, k = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nsum_a = [0] * (n + 1)\nfor i in range(1, n+1):\n    sum_a[i] = sum_a[i-1] + a[i-1]\nsum_a.append(10 ** 11)\ndef is_ok(mid, now):\n    nonlocal k, n, sum_a\n    if sum_a[mid] - sum_a[now] >= k:\n        return True\n    else:\n        return False\nans = 0\nfor i in range(n):\n    top = n + 1\n    bottom = i\n    while top - bottom > 1:\n        mid = (top + bottom) // 2\n        if is_ok(mid, i):\n            top = mid\n        else:\n            bottom = mid\n    ans += n + 1 - top\nprint(ans) ", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\nref = 0\ncnt = 0\n\nfor i in range(n):\n    ref += a[i]\n    while ref >= k:\n        ref -= a[cnt]\n        cnt += 1\n    ans += cnt\n\nprint(ans)", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nans=0\ns=0\nstart=0\nfor i in range(n):\n  s+=a[i]\n  if s>=k:\n    ans += n-i\n    for j in range(start,i+1):\n      s-=a[j]\n      if s>=k:\n        ans += n-i\n      else:\n        start=j+1\n        break\nprint(ans)", "n, k = list(map(int, input().split()))\na = [int(i) for i in input().split()]\nj = 0\ns = 0\nc = 0\nfor i in range(n):\n    while j < n and s < k:\n        s += a[j]\n        j += 1\n    if s >= k:\n        c += n - j + 1\n    s -= a[i]\nprint(c)\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nleft = 0\nsum = 0\nans = 0\n\nfor right in range(n):\n    sum += a[right]\n    while sum >= k:\n        sum -= a[left]\n        left += 1\n    ans += left\n\nprint(ans)", "N,K = map(int,input().split())\nAlist = list(map(int,input().split()))\nSlist = [0]\ntale = N+1\nfor i in range(N):\n    try:\n        S += Alist[i]\n    except:\n        S = Alist[i]\n    Slist.append(S)\n    if S >= K and tale == N+1:\n        tale = i+1\nAns = N-tale+1\nif Ans != 0:\n    for head in range(1,N+1):\n        Sum = Slist[tale] - Slist[head]\n        if Sum >= K:\n            Ans += N-tale+1\n        elif tale == head and tale < N:\n            for _ in range(10**6):\n                tale += 1\n                Sum = Slist[tale] - Slist[head]\n                if Sum >= K:\n                    Ans += N-tale+1\n                    break\n                elif tale == N:\n                    break\n        elif tale != N:\n            for _ in range(10**6):\n                tale += 1\n                Sum = Slist[tale] - Slist[head]\n                if Sum >= K:\n                    Ans += N-tale+1\n                    break\n                elif tale == N:\n                    break\n        if tale > N:\n            break\nprint(Ans)", "from itertools import accumulate\nimport bisect\nN, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nAsum = [0]+list(accumulate(A))\nans = 0\nfor i in range(1, N+1):\n    ind = bisect.bisect_left(Asum, Asum[i-1]+K)\n    ans += N-ind+1\nprint(ans)\n", "n,k=map(int,input().split())\n\na=list(map(int,input().split()))\n\nu=[0]\n\nui=0\n\nfor i in range(n):\n  ui+=a[i]\n  u.append(ui)\n\n\nleft=0\nright=1\n\n\nans=0\n\nwhile right<=n:\n  s=u[right]-u[left]\n  if s<k:\n    right+=1\n  else:\n    ans+=n-right+1\n    left+=1\n    \nprint(ans)", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nS = [0]*(N+1)\nidx = -1\nfor i in range(N):\n  S[i+1] = S[i] + A[i]\n  if idx == -1 and K <= S[i+1]:\n    idx = i+1\n\nif idx == -1:\n  print(0)\nelse:\n  ans = 0\n  for i in range(idx, N+1):\n    excess = S[i] - K\n    \n    def is_ok(arg):\n      return excess < S[arg]\n    \n    def meguru_bisect(ng, ok):\n      '''\n      \u521d\u671f\u5024\u306eng,ok\u3092\u53d7\u3051\u53d6\u308a,is_ok\u3092\u6e80\u305f\u3059\u6700\u5c0f(\u6700\u5927)\u306eok\u3092\u8fd4\u3059\n      \u307e\u305ais_ok\u3092\u5b9a\u7fa9\u3059\u3079\u3057\n      ng ok \u306f  \u3068\u308a\u5f97\u308b\u6700\u5c0f\u306e\u5024-1 \u3068\u308a\u5f97\u308b\u6700\u5927\u306e\u5024+1\n      \u6700\u5927\u6700\u5c0f\u304c\u9006\u306e\u5834\u5408\u306f\u3088\u3057\u306a\u306b\u3072\u3063\u304f\u308a\u8fd4\u3059\n      '''\n      while (abs(ok - ng) > 1):\n        mid = (ok + ng) // 2\n        if is_ok(mid):\n          ok = mid\n        else:\n          ng = mid\n      return ok\n    \n    ans += meguru_bisect(-1, N+1)\n  print(ans)", "N, K = list(map(int,input().split()))\n\na = list(map(int,input().split()))\n\ntotal = 0\ncnt = 0\ni = 0\nj = 0\nwhile i < N:\n    while total<K and j < N:\n        total +=a[j]\n        j = j + 1\n\n    if total>=K:\n        cnt += N-j+1\n\n    total -= a[i]\n    i = i + 1\n\nprint(cnt)\n\n", "n,k = map(int,input().split())\na = list(map(int,input().split()))\nr,cnt,tmp = 0,0,0\nfor l in range(n):\n  while r<n and tmp+a[r]<k:\n    tmp += a[r]\n    r += 1\n  cnt += n-r\n  if l==r:\n    r += 1\n  else:\n    tmp -= a[l]\nprint(cnt)"]