["x = int(input())\n\ndef solve(x):\n    count = 0\n    lst = []\n    x6 = x * 6\n    for n in range(1, x + 1):\n        t, r = divmod(x6, n*(n+1))\n        if t < 2*n + 1:\n            break\n        if r:\n            continue\n        m, r = divmod(t + n - 1, 3)\n        if r:\n            continue\n        count += 2\n        lst.append((n, m))\n    nn, mm = lst[-1]\n    if nn == mm:\n        count -= 1\n    print(count)\n    for n, m in lst:\n        print(n, m)\n    if nn != mm:\n        print(mm, nn)\n    lst.reverse()\n    for n, m in lst[1:]:\n        print(m, n)\n\nsolve(x)\n", "n = int(input())\ni = 0\ns = 0\nt = 0\nx = 0\nf = 0\nres1 = []\nres2 = []\nwhile n >= 0:\n\ti = i + 1\n\tn = n - i * i\n\tif ( n < 0 ):\n\t\tbreak\t\n\tt = t + i\n\tm =  n  //  t \n\tif  ( m * t !=  n  ):\n\t\tcontinue\n\telse: \t\t\n\t\tres1.append(  i  )\t\n\t\tres2.append(  m + i  )\t\n\t\tx = x + 1\n\t\tif m == 0:\n\t\t\tf = 1\n\nprint( str(int(2 * x - f)) )\nfor i in range(x):\n\tprint( str(int(res1[i])) + \" \" + str(int(res2[i])))\nres1.reverse()\nres2.reverse()\nfor i in range(x):\n\tif ( res1[i] != res2[i] ):\n\t\tprint( str(int(res2[i])) + \" \" + str(int(res1[i])))\n", "#from time import time\n\ndef solve( x ):\n\n    res = [(1,x)]\n    if x != 1:\n        res.append( (x,1) )\n\n    index , a , b = 1 , 1 , 0\n    while True:\n        b += a\n        index += 1\n        a += index\n\n        if a*index-b > x:\n            break\n\n        if ( x + b ) % a == 0:\n            m = ( x + b )// a\n            res.append( ( index , m ) )\n            if index != m:\n                res.append( ( m , index ) )\n\n    res.sort()\n    print( len(res) )\n    for ares in res:\n        print( ares[0] , ares[1] )\n\ndef __starting_point():\n\n    #t1 = time()\n    x = int( input() )\n    solve( x )\n    #t2 = time()\n    #print( \"time :\" , t2-t1 , \"s\" )\n\n__starting_point()", "n = int(input())\nans = []\nfor i in range(1, 1442250 + 10):\n    t = i * (i + 1) // 2\n    j, mod = divmod(n + (i - 1) * t // 3, t)\n    if i > j:\n        break\n    if mod == 0:\n        ans.append((i, j))\n        if i != j: ans.append((j, i))\nans.sort()\nprint(len(ans))\nfor x, y in ans:\n    print(x, y)\n", "n = int(input())\nans = []\nfor i in range(1, 1442250 + 10):\n    t = i * (i + 1) // 2\n    j, mod = divmod(n + (i - 1) * t // 3, t)\n    if i > j:\n        break\n    if mod == 0:\n        ans.append((i, j))\n        if i != j: ans.append((j, i))\nans.sort()\nprint(len(ans))\nfor x, y in ans:\n    print(x, y)\n", "n = int(input())\ni,t,s = [0] * 3\nr = []\nwhile 1 > 0:\n\ti += 1\n\tn -= i * i\n\tif n < 0 : break\n\tt += i\n\tm = n  //  t \n\tif  m * t !=  n :  continue\n\tr.append((i, m + i))\n\tif m > 0:\n\t\tr.append((m+i, i))\t\n\nprint(len(r))\nr.sort()\nfor m, n in r:\n\tprint(\"%d %d\" % (m , n))\n", "n = int(input())\ni,t,s = [0] * 3\nr = []\nwhile 1 > 0:\n\ti += 1\n\tn -= i * i\n\tif n < 0 : break\n\tt += i\n\tm = n  //  t \n\tif  m * t !=  n :  continue\n\tr.append((i, m + i))\n\tif m > 0:\n\t\tr.append((m+i, i))\t\n\nprint(len(r))\nr.sort()\nfor m, n in r:\n\tprint(\"%d %d\" % (m , n))\n", "x = int(input()) * 6\nn, equ, ans = 0, False, []\nwhile True:\n\tn += 1\n\tif n * (n + 1) * (2 * n - 1) > x:\n\t\tbreak\n\tif x % n != 0:\n\t\tcontinue\n\tif x % (n + 1) != 0:\n\t\tcontinue\n\tm = x // n // (n + 1) + n - 1\n\tif m % 3 != 0:\n\t\tcontinue\n\tm = m // 3\n\tif n <= m:\n\t\tans.append([n, m])\n\t\tif n == m:\n\t\t\tequ = True\n\nprint(len(ans) * 2 - equ)\nfor p in ans:\n\tprint(\"%d %d\" % (p[0], p[1]))\nif equ:\n\tans.pop()\nans.reverse()\nfor p in ans:\n\tp.reverse();\n\tprint(\"%d %d\" % (p[0], p[1]))\n", "x = int(input()) * 6\nn, equ, ans = 0, False, []\nwhile True:\n\tn += 1\n\tif n * (n + 1) * (2 * n - 1) > x:\n\t\tbreak\n\tif x % n != 0:\n\t\tcontinue\n\tif x % (n + 1) != 0:\n\t\tcontinue\n\tm = x // n // (n + 1) + n - 1\n\tif m % 3 != 0:\n\t\tcontinue\n\tm = m // 3\n\tif n <= m:\n\t\tans.append((n, m))\n\t\tif n == m:\n\t\t\tequ = True\n\nprint(len(ans) * 2 - equ)\nfor p in ans:\n\tprint(\"%d %d\" % (p[0], p[1]))\nif equ:\n\tans.pop()\nans.reverse()\nfor p in ans:\n\tprint(\"%d %d\" % (p[1], p[0]))\n", "x = int(input()) * 6\nn, equ, ans = 0, False, []\nwhile True:\n\tn += 1\n\tif n * (n + 1) * (2 * n - 1) > x:\n\t\tbreak\n\tif x % n != 0:\n\t\tcontinue\n\tif x % (n + 1) != 0:\n\t\tcontinue\n\tm = x // n // (n + 1) + n - 1\n\tif m % 3 != 0:\n\t\tcontinue\n\tm = m // 3\n\tif n <= m:\n\t\tans.append((n, m))\n\t\tif n == m:\n\t\t\tequ = True\n\telse:\n\t\tbreak\n\nprint(len(ans) * 2 - equ)\nfor p in ans:\n\tprint(\"%d %d\" % (p[0], p[1]))\nif equ:\n\tans.pop()\nans.reverse()\nfor p in ans:\n\tprint(\"%d %d\" % (p[1], p[0]))\n", "n=int(input())\ni,t = 0,0\nr=[]\nwhile 1:\n    i+=1\n    n-=i*i\n    if n<0:break\n    t+=i\n    m=n//t \n    r+=[(m+i,i),(i, m + i)][m==0:]*(m*t ==n)    \nprint(len(r))\nfor p in sorted(r): print(\"%d %d\"%p)\n", "#!/usr/bin/env python3\n# 599D_squares.py - Codeforces.com/problemset/problem/599/D by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Squares Class (Main Program)\n###############################################################################\n\n\nclass Squares:\n    \"\"\" Squares representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n] = list(map(int, uinput().split()))\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = []\n        n = 1\n        while n*n*(n-1)//6 < self.n:\n            a = n * (n + 1) // 2\n            b = n * (n - 1) * (n + 1) // 6\n            m = self.n + b\n            k = m // a\n            if n <= k and  m % a == 0:\n                result.append((n, k))\n            n += 1\n        result2 = list(result)\n        result2 += [(b, a) for a, b in reversed(result) if a != b]\n        s = str(len(result2)) + \"\\n\"\n        s += \"\\n\".join([str(a) + \" \" + str(b) for a, b in result2])\n\n        return s\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Squares class testing \"\"\"\n\n        # Constructor test\n        test = \"26\"\n        d = Squares(test)\n        self.assertEqual(d.n, 26)\n\n        # Sample test\n        self.assertEqual(\n            Squares(test).calculate(), \"6\\n1 26\\n2 9\\n3 5\\n5 3\\n9 2\\n26 1\")\n\n        # Sample test\n        test = \"0\"\n        self.assertEqual(Squares(test).calculate(), \"0\\n\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Squares(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Squares(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Squares(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Squares().calculate())\n\n__starting_point()", "n=int(input())\ni,t = 0,0\nr=[]\nwhile 1:\n    i+=1\n    n-=i*i\n    if n<0:break\n    t+=i\n    m=n//t \n    r+=[(m+i,i),(i, m + i)][m==0:]*(m*t ==n)    \nprint(len(r))\nfor p in sorted(r): print(\"%d %d\"%p)", "\"\"\"\nCodeforces Round #332 (Div. 2)\n\nProblem 599 D. Spongebob and Squares\n\n@author yamaton\n@date 2015-11-20\n\"\"\"\n\nimport itertools as it\nimport functools\nimport operator\nimport collections\nimport math\nimport sys\n\n\ndef solve(x):\n    def find_p(n):\n        return (6 * x // (n * (n + 1)) - 2 * n - 1) // 3\n    def f(n, p):\n        return n * (n + 1) * (2 * n + 3 * p + 1) - 6 * x\n\n    result = []\n    for n in it.count(1):\n        p = find_p(n)\n        if p < 0:\n            break\n        if f(n, p) == 0:\n            result.append((n, n + p))\n            if p > 0:\n                result.append((n + p, n))\n    result.sort()\n    return result\n\n\n# def p(*args, **kwargs):\n#     return print(*args, file=sys.stderr, **kwargs)\n\n\ndef main():\n    x = int(input())\n    results = solve(x)\n    print(len(results))\n    for res in results:\n        print(*res)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,i,t,r=int(input()),0,0,[]\nwhile 1:\n\ti+=1\n\tn-=i*i\n\tif n<0:break\n\tt+=i\n\tm=n//t \n\tr+=[(m+i,i),(i,m+i)][m==0:]*(m*t==n)\nprint(len(r))\nfor p in sorted(r):print(\"%d %d\"%p)", "n,i,t,r=int(input()),0,0,[]\nwhile 1:\n\ti+=1\n\tn-=i*i\n\tif n<0:break\n\tt+=i\n\tm=n//t\n\tr+=[(m+i,i),(i,m+i)][m==0:]*(m*t==n)\nprint(len(r))\nfor p in sorted(r):print(\"%d %d\"%p)", "n,i,t,r=int(input()),0,0,[]\nwhile n>=0:\n\ti+=1\n\tn-=i*i\n\tt+=i\n\tm=n//t\n\tr+=[(m+i,i),(i,m+i)][m==0:]*(m*t==n>=0)\nfor p in[(len(r),'')]+sorted(r):print(\"%d %s\"%p)", "n,i,t,r=int(input()),0,0,[]\nwhile n>=0:\n\ti+=1\n\tn-=i*i\n\tt+=i\n\tm=n//t+i\n\tr+=[(m,i),(i,m)][m==i:]*(n%t==0<=n)\nfor p in[(len(r),'')]+sorted(r):print(\"%d %s\"%p)", "n,i,t,r=int(input()),0,0,[]\nwhile n>=0:i+=1;n-=i*i;t+=i;m=n//t+i;r+=[(m,i),(i,m)][m==i:]*(n%t==0<=n)\nfor p in[(len(r),'')]+sorted(r):print(\"%d %s\"%p)", "__author__ = 'MoonBall'\n\nimport sys\n# sys.stdin = open('data/D.in', 'r')\nT = 1\n\ndef process():\n    ans = []\n    N = int(input())\n    for i in range(1, 3000000):\n        a = N + i * (i - 1) * (i + 1) // 6\n        j, mod = divmod(a, i * (i + 1) // 2)\n        if i > j: break\n        if mod: continue\n        ans.append((i, j))\n        if i != j: ans.append((j, i))\n\n    ans.sort()\n    print(len(ans))\n    for i, j in ans: print(i, j)\n\n\n\n\n\nfor _ in range(T):\n    process()\n", "__author__ = 'MoonBall'\n\nimport sys\n# sys.stdin = open('data/D.in', 'r')\nT = 1\n\ndef process():\n    ans = []\n    N = int(input())\n    for i in range(1, N + 1):\n        a = N + i * (i - 1) * (i + 1) // 6\n        j, mod = divmod(a, i * (i + 1) // 2)\n        if i > j: break\n        if mod: continue\n        ans.append((i, j))\n        if i != j: ans.append((j, i))\n\n    ans.sort()\n    print(len(ans))\n    for i, j in ans: print(i, j)\n\n\n\n\n\nfor _ in range(T):\n    process()\n", "from itertools import chain, combinations\nfrom functools import reduce\nfrom collections import defaultdict\n\ndef res(m,n):\n    k = min(m,n)\n    return (1+k)*(k+2*k**2-3*k*(m+n)+6*m*n) // 6\n\ndef powerset(iterable):\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\ndef prod(it):\n    r = 1\n    for elem in it:\n        r *= elem\n    return r\n\ndef factorGenerator(n):\n    res = defaultdict(lambda: 0)\n    for p in range(2,10**6+1):\n        while n % p == 0:\n            res[p] += 1\n            n = n // p\n    return res\n\ndef divisorGen(n):\n    factors = list(factorGenerator(n).items())\n    nfactors = len(factors)\n    f = [0] * nfactors\n    while True:\n        yield reduce(lambda x, y: x*y, [factors[x][0]**f[x] for x in range(nfactors)], 1)\n        i = 0\n        while True:\n            f[i] += 1\n            if f[i] <= factors[i][1]:\n                break\n            f[i] = 0\n            i += 1\n            if i >= nfactors:\n                return\ndef res2(x):\n    r = []\n    x6 = 6 * x\n    divisors = set(divisorGen(x6))\n    for m in divisors:\n        a = x6 // m\n        if a % (m+1) != 0:\n            continue\n        b = a // (m+1)\n        c = b + m - 1\n        if c % 3 != 0:\n            continue\n        n = c // 3\n        if n < m:\n            continue\n        if res(m,n) != x:\n            continue\n        r.append((m,n))\n    return r\n\nx = int(input())\nr = res2(x)\nr = r + [(n,m) for m,n in r]\nr = sorted(set(r))\nprint(len(r))\nfor (m,n) in r:\n  print(\"%d %d\"%(m, n))\n", "s = int(input())\n\"\"\"\nnm + (n-1)(m-1) + ...\nnm + nm -(n+m) + 1\n6x\n= 6mn*n - 3*(n-1)n(n+m) + (n-1)*n*(2n-1)\n6x - n*(n+1)*(2n+1)+3*(n-1)n*n = (6n*n - 3*(n-1)*n)*m\n\"\"\"\na, b = [], []\nfor n in range(1,1450000):\n    u = 6*s - n*(n-1)*(n+n-1)+3*(n-1)*n*n\n    v = 6*n*n - 3*(n-1)*n\n    if u % v == 0:\n        u //= v\n        if n <= u:\n            a += [(n, u)]\n            if n < u:\n                b += [(u, n)]\n        else:\n            break\nprint(len(a)+len(b))\nfor e in a:\n    print(*e)\nfor e in reversed(b):\n    print(*e)\n", "x = int(input())\nres = []\nok = -1\nfor i in range(1, 3000001):\n    m = i\n    tmp = (m-1)*(m+1)*m//6 + x\n    if (tmp*2) % (m*(m+1)) == 0:\n        n = int((tmp*2) // (m*(m+1)))\n        if n > m:\n            res.append([i, n])\n        if n == m and ok == -1:\n            ok = len(res)\n            res.append([i, i])\nd = 0 if ok == -1 else 1\nprint(len(res) * 2 - d)\nfor i in range(len(res)):\n    print(str(res[i][0]) + \" \" + str(res[i][1]))\nfor i in range(len(res)):\n    if len(res)-i-1 != ok:\n        print(str(res[len(res)-i-1][1]) + \" \" + str(res[len(res)-i-1][0]))\n", "import itertools\nimport math\n\nx = int(input())\nkmax = math.floor((3*x) ** (1/3))\nans = []\nfor i in range(1, kmax+1):\n    if 6*x % (i*(i+1)) == 0:\n        s = 6*x // (i*(i+1)) + i - 1\n        if s % 3 == 0:\n            ans.append((i,s//3))\n\n\nres = 2*len(ans) - 1 if ans[-1][0] == ans[-1][1] else 2*len(ans)\nprint(res)\nfor pair in ans[:-1]:\n    print(pair[0], pair[1])\n\nif res%2 == 0: print(ans[-1][0], ans[-1][1])\n\nfor pair in reversed(ans):\n    print(pair[1], pair[0])\n"]