["ar=[]\nfor i in range(1,10**5):\n    if(i*i>2*10**9):break\n    ar.append(i*i)\ns=input()\nans=len(s)\nfor x in ar:\n    s2=str(x)\n    i=0\n    for x in range(len(s)):\n        if i<len(s2) and s[x]==s2[i]:\n            i+=1\n    if(i==len(s2)):\n        ans=min(ans,len(s)-i)\nif(ans==len(s)):\n    print(-1)\nelse:\n    print(ans)", "def main():\n    squares = set(str(x * x) for x in range(100000))\n    s = input()\n    n = len(s)\n    ans = float('inf')\n    for mask in range(1, (1 << n)):\n        o = ''.join([s[i] for i in range(n) if mask & (1 << i) > 0])\n        if o[0] == '0':\n            continue\n        if o in squares:\n            pc = bin(mask).count('1')\n            ans = min(ans, n - pc)\n\n    if ans == float('inf'):\n        ans = -1\n    print(ans)\n\nmain()\n", "n = input()\nl = len(n)\nres = 1000000\nfor x in range(1, 2 ** l):\n    g = x\n    s = ''\n    i = 0\n    while g:\n        if g % 2:\n            s += n[i]\n        g //= 2\n        i += 1\n    if s.startswith('0'):\n        continue\n    h = int(s)\n    sq = h ** 0.5\n    if sq == int(sq):\n        res = min(res, l - len(s))\nprint(res if res != 1000000 else -1)\n", "n = input()\nk = len(n)\nans = 100\nfor i in range(2 ** k):\n    s = bin(i)[2:]\n    s = '0' * (k - len(s)) + s\n    sq = ''\n    for j in range(k):\n        if s[j] == '1':\n            sq += n[j]\n    if sq == '' or sq[0] == '0':\n        continue\n    sq = int(sq)\n    l = 0\n    r = 1000000\n    while r - l > 1:\n        c = (r + l) // 2\n        if c * c > sq:\n            r = c\n        else:\n            l = c\n    if l * l == sq:\n        ans = min(ans, s.count('0'))\nif ans == 100:\n    print(-1)\nelse:\n    print(ans)\n", "def is_sqr(x):\n  y = 1\n  while y**2 < x:\n    y += 1\n  return y**2 == x\n\nfrom itertools import combinations\nn = input()\nans = 100\nfor r in range(1, len(n) + 1):\n  for item in combinations(n, r):\n    #print(int(''.join(item)))\n    if is_sqr(int(''.join(item))) and item[0] != '0':\n      ans = min(ans, len(n) - len(item))\nprint(ans if ans != 100 else -1)\n", "def valid_int(n):\n    return int(round(n ** 0.5)) ** 2 == n\n\ndef valid(s):\n    return valid_int(int(s))\n\ndef no_start_zero(s):\n    return s[0] != '0'\n\nn = input()\n\ndef adj(s):\n    if len(s) <= 1: return []\n    for i in range(len(s)):\n        ss = s[:i] + s[i+1:]\n        if no_start_zero(ss):\n            yield ss\n\nq = [n]\nseen = set()\n\nwhile q:\n    node = q.pop(0)\n    if valid(node):\n        print(len(n) - len(node))\n        return\n    for child in adj(node):\n        if child not in seen:\n            seen.add(child)\n            q.append(child)\nprint(-1)", "import atexit\nimport io\nimport sys\nimport math\n\n# Buffering IO\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n    \n\ndef main():\n    n = input()\n    mm = 0\n    for i in range(1, 2**len(n)):\n        x = ''\n        for c in range(len(n)):\n            if i%2:\n                x += n[c]\n            i = i//2\n         \n        if x[0] == '0':\n            continue\n        xx = int(x) \n        if int(xx ** .5) ** 2 == xx:\n            if len(x)>mm:\n                mm = len(x)\n    print(len(n) - mm if mm>0 else -1)\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "def check(t, s):\n    cur_t = 0\n    for j in range(len(s)):\n        while cur_t < len(t) and t[cur_t] != s[j]:\n            cur_t += 1\n        if cur_t == len(t):\n            return False\n        cur_t += 1\n    return True\n\n\ns1 = input()\nfor i in range(45 * 1000, 0, -1):\n    s2 = str(i * i)\n    if check(s1, s2):\n        print(len(s1) - len(s2))\n        return\nprint(-1)", "import itertools\n\n\ndef try_sqrt(n):\n    m = int(n**.5)\n    return True if abs(m*m - n) < 1e-6 else False\n\n\nN = int(input())\nif try_sqrt(N):\n    print(0)\n    quit()\n\nL = list(str(N))\nfor i in reversed(range(1, len(L))):\n    for num_l in itertools.combinations(L, i):\n        if num_l[0] == \"0\":\n            continue\n        num = int(\"\".join(num_l))\n        if try_sqrt(num):\n            print(len(L)-i)\n            quit()\n\nprint(-1)", "a = int(input())\nsa = str(a)\ni = 1\n\ndef check(sa, si):\n    cc = 0\n    for i in range(len(sa)):\n        if sa[i] == si[cc]:\n            cc += 1\n        if cc == len(si):\n            break\n    if cc == len(si):\n        return True\n    else:\n        return False\ni = int(a ** 0.5 + 1)\nwhile i > 0:\n    if i * i > a:\n        i -= 1\n        continue\n    si = str(i * i)\n    T = check(sa, si)\n    if T:\n        print(len(sa) - len(si))\n        quit()\n    i -= 1\nprint(-1)\n", "import sys\nimport math\nfrom functools import lru_cache\n \n@lru_cache(maxsize = None)\ndef solution(nstr, nint, acc):\n    msf = float('inf')\n    if (math.sqrt(nint) - int(math.sqrt(nint))) == 0.0:\n        return acc\n    for i in range(len(nstr)):\n        mstr = nstr[:i] + nstr[i+1:]\n        if mstr:\n            if mstr[0] == '0':\n                continue\n            msf = min(msf, solution(mstr,int(mstr),acc+1))\n    if msf == float('inf'):\n        return float('inf')\n    return msf\n\nn = sys.stdin.readline().strip()\n\nres = solution(n, int(n) ,0)\nif res == float('inf'):\n    print(-1)\nelse:\n    print(res)", "def lcs(X , Y):\n    # find the length of the strings\n    m = len(X)\n    n = len(Y)\n \n    # declaring the array for storing the dp values\n    L = [[None]*(n+1) for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0 :\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j] , L[i][j-1])\n \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1]\n    return L[m][n]\nx=input()\nimport math\nans=0\nfor i in range(int(math.sqrt(int(x))),0,-1):\n    if(lcs(x,str(i*i))==len(str(i*i))):\n        ans=len(str(i*i))\n        break\nif(ans):\n    print(len(x)-ans)\nelse:\n    print(-1)\n\n\n\n\n\n", "n=input()\nps=[]\nfor i in range(44722):\n    ps.append(str(i*i))\nans=20\nfor i in range(1,44722):\n    k=0\n    l=len(ps[i])\n    for j in n:\n        if j==ps[i][k]:\n            k+=1\n        if k==l:\n            break\n    if k==l:\n        ans=min(ans,len(n)-l)\nif ans==20:\n    ans=-1\nprint(ans)\n", "n = input()\na=[]\nfor i in range(1,int((2*10**9)**0.5)+1):\n    a.append(i**2)\nm = float('inf')\nl = len(n)\nfor i in range(1,2**len(n)):\n    bi = bin(i)[2:]\n    bi = '0'*(l-len(bi))+bi\n    ne = ''\n    for i in range(l):\n        if bi[i] == '1':\n            ne += n[i]\n    if ne[0] == '0':continue\n    else:\n        if int(ne) in a:\n            m = min(m,bi.count('0'))\nif m == float('inf'):print(-1)\nelse:print(m)\n", "from math import *\n\nstrN = input()\nn = int(strN)\n\ndef IsMatch(t):\n    strT = str(t)\n    if len(strN) == len(strT):\n        if n == t: return 0\n        else: return -1\n    p = 0\n    for c in strT:\n        p = strN.find(c, p)\n        if p == -1:\n            break\n        else:\n            p += 1\n    if p == -1:\n        return -1\n    else:\n        return len(strN) - len(strT)\n\nN = floor(sqrt(n))\nfor i in range(N, 0, -1):\n    t = i*i\n    d = IsMatch(t)\n    if d >= 0:\n        print(d)\n        return\nprint(-1)\n", "n=input()\nle=len(n)\nm=le\nfor i in range(1,2**le):\n    i=bin(i)[2:]\n    s=''\n    c=le\n    for j in range(len(i)):\n        if i[-1-j]=='1':\n            s=n[le-1-j]+s\n            c-=1\n    if s[0]=='0':\n        continue\n    s=int(s)\n    if int(s**(1/2))**2==s:\n        m=min(m,c)\nif m==le:\n    print(-1)\nelse:\n    print(m)\n", "import math\n\ndef read_data():\n    n = int(input().strip())\n    return n\n\ndef compare(s):\n    mpos = 0\n    spos = 0\n    count = 0\n    while spos < len(s):\n        npos = m.find(s[spos],mpos)\n        if npos == -1:\n            return -1\n        count += npos - mpos\n        mpos = npos + 1\n        spos += 1\n    count += len(m) - mpos\n    return count\n\ndef solve():\n    start = int(math.sqrt(n))\n    for i in range(start,0,-1):\n        c = compare(str(i*i))\n        if c > -1:\n            return c\n    return -1\n\nn = read_data()\nm = str(n)\nprint(solve())", "def is_perfect_square(n):\n        return round(n ** 0.5) ** 2 == n\n\n\nfrom itertools import combinations\ns = input()\nls = len(s)\nsl = [i for i in s]\nx = []\nfor i in range(1,len(s)+1):\n    comb = combinations(sl,i)\n    for j in list(comb):\n        x.append(list(j))\ny = []\nfor i in x:\n    a = ''\n    for j in i:\n        a+=j\n    y.append(int(a))\ny = list(set(y))\ny.sort(reverse=True)\n#print(y)\nf = 0\nfor i in y:\n    if(i!=0):\n        if is_perfect_square(i):\n            #print(i)\n            f = 1\n            break\nif(f):\n    print(ls-len(str(i)))\nelse:\n    print(-1)", "n = int(input())\n\ns = str(n)\nlst = []\nt = set()\ndef xxx(string):\n    if string[0] == '0':\n        return\n    x = int(string)\n    \n    \n    if x in t:\n        return\n    t.add(x)\n    \n    k1 = 0\n    k2 = 10 ** 6\n    while k2 - k1 != 1:\n        k = (k1 + k2) // 2\n        if k ** 2 <= x:\n            k1 = k\n        else:\n            k2 = k\n    if k1 ** 2 == x:\n        lst.append(len(str(x)))\n\n    if len(string) == 1:\n        return\n    for x in range(len(string)):\n        xxx(string[:x] + string[x + 1:])\n    return\n\nxxx(s)\nif len(lst) == 0:\n    print(-1)\nelse:\n    print(len(s) - max(lst))\n", "from math import sqrt, floor\n\nn = input()\n\ndef is_square(n):\n    f = floor(sqrt(n))\n    return f*f == n or (f+1)*(f+1) == n\n\n\ndef min_to_square(d, n):\n    if len(n) == 1:\n        return d if is_square(int(n)) else 100\n\n    if n[0] == '0':\n        return 100\n\n    if (n[0] != '0' and is_square(int(n))) or n == '0':\n        return d\n\n    m = min([min_to_square(d + 1, n[:i] + n[i + 1:]) for i in range(len(n))])\n\n    return m\n\ndef mts(n):\n    min_ = 100\n\n    for i in range(1, 2**(len(n))):\n        s = \"{0:b}\".format(i).zfill(len(n))\n\n        newn = ''.join([n[i] for i in range(len(n)) if s[i] == '1'])\n\n        if is_square(int(newn)) and newn[0] != '0':\n            min_ = min(min_, sum(1 for c in s if c == '0'))\n\n    return min_\n\n\nprint(mts(n) if mts(n) < 100 else -1)", "import math\n\n\ndef nop(a, b):\n    l = 0\n    for i in range(len(a)):\n        d = a[i]\n        while l < len(b) and b[l] != d:\n            l += 1\n        if l >= len(b) and b[l - 1] != d:\n            return 0\n        elif l < len(b) and b[l] != d:\n            return 0\n        l += 1\n        if i < len(a) - 1 and l >= len(b):\n            return 0\n    return 1\n\na = int(input())\nb = int(math.sqrt(a))\nc = []\nk = b\nfor i in range(k):\n    if nop(str(b ** 2), str(a)) == 1:\n        c.append(len(str(a)) - len(str(b ** 2)))\n    b -= 1\nc.sort()\nif len(c) > 0:\n    print(c[0])\nelse:\n    print(-1)", "#!/usr/bin/env python3\n\nfrom math import sqrt\n\nimport itertools\n\ndef issq(k):\n\tk = int(k)\n\treturn k == int(sqrt(k)) ** 2\n\nns = input().strip()\nl = len(ns)\n\ndef getsub(ns, it):\n\treturn ''.join(ns[i] for i in it)\n\ndef findmin(ns):\n\tfor i in range(l, 0, -1):\n\t\tfor it in itertools.combinations(list(range(l)), i):\n\t\t\tits = getsub(ns, it)\n\t\t\tif its.startswith('0'):\n\t\t\t\tcontinue\n\t\t\tif issq(its):\n\t\t\t\treturn l - i\n\treturn -1\n\nprint(findmin(ns))\n"]