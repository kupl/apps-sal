["from fractions import *\ndef solve():\n    n = int(input())\n    a = list(map(int,input().split()))\n    a.sort()\n    ans1 = 0\n    pres = a[0]\n    for i in range(1,n):\n        ans1+=i*a[i] -pres\n        pres+=a[i]\n    ans1 *= 2;\n    tmp = pres+ans1\n    tmp1 = n\n    s = Fraction(tmp,tmp1)\n    print(s.numerator,s.denominator)\n\nsolve()", "def gcd(a,b) : return a if b==0 else gcd(b,a%b)\n\nn = int(input())\nl = input().split()\nl = [int(i) for i in l]\nl.sort()\nt = sum((i+i-n+1)*l[i] for i in range(n))\nt = t+t+sum(l)\nd = gcd(t,n)\nprint(t//d,n//d)\n", "def gcd(a,b) : return a if b==0 else gcd(b,a%b)\n\nn = int(input())\nl = sorted(map(int, input().split()))\nt = sum((i+i-n+1)*l[i] for i in range(n))\nt = t+t+sum(l)\nd = gcd(t,n)\nprint(t//d,n//d)\n", "from fractions import Fraction\n\nn = int(input())\nl = [int(x) for x in input().split()]\nl.sort()\n\nf = Fraction(sum([(3-2*n+4*i)*l[i] for i in range(n)]),n)\nprint(f.numerator,f.denominator)\n\n##import itertools\n##tot2 = 0\n##for i in itertools.permutations(l):\n##    loc = 0\n##    tot = 0\n##    for e in i:\n##        tot += abs(loc-e)\n##        loc = e\n##    #print(i,tot)\n##    tot2 += tot\n##import math\n##f2 = Fraction(tot2,math.factorial(n))\n##print(f2.numerator,f2.denominator)\n##\n", "from fractions import Fraction\nwhile(1):\n    try:\n        n=int(input())\n        a=list(map(int,input().split()))\n        s=sum(a)\n        a.sort()\n        for i in range(0,n):\n            s+=2*(2*i+1-n)*a[i]\n        f=Fraction(s,n)\n        print(f.numerator,end=' ')\n        print(f.denominator)\n    except EOFError:\n        break", "from fractions import *\nn=int(input());\na=list(map(int,input().split()));\na=sorted(a);\nnow=a[0];\nans=0;\nfor i in range(1,n):\n    ans+=i*a[i]-now;\n    now=now+a[i];\nans=ans*2+now;\ns=Fraction(ans,n);\nprint(s.numerator,s.denominator);", "def gcd (n,m):\n  if n % m == 0: return m\n  return gcd (m, n%m)\n\nn = int (eval(input ()))\na = list (map (int, input().split()))\na.sort()\n\ns = a[0]\nsleft = 0\nfor i in range (1,len(a)):\n  sleft += (i*a[i] - s)\n  s += a[i]\n\ntot = s + sleft*2\nprint(tot//gcd(tot,n), n//gcd(tot,n))\n", "def gcd(m, n): return m if n == 0 else gcd(n, m%n)\n\nn = int(input())\n\na = sorted(map(int, input().split()))\n\ncur = sum(a)\nans = cur\npre = 0\n\nfor i in range(n):\n    cur += (i+i-n) * (a[i]-pre)\n    ans += cur\n    pre = a[i]\n\ng = gcd(ans, n)\n\nprint(ans//g, n//g)\n", "def gcd(a, b): return gcd(b % a, a) if a else b\nn = int(input())\na = sorted(map(int, input().split()))\np, q = 0, n\nfor i in range(1, n): p += i * (n - i) * (a[i] - a[i - 1])\np = 2 * p + sum(a)\nr = gcd(p, q)\nprint(p // r, q // r)\n", "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nn = int(input())\na = sorted(list(map(int, input().split())))\n\ntotal_dist = 0\ncur_sum = 0\ncur_points = 0\n\nfor x in a[::-1]:\n    total_dist += cur_sum - cur_points * x\n    cur_sum += x\n    cur_points += 1\n\ntotal_dist *= 2\ntotal_dist += sum(a)\n\nhigh = total_dist\nlow = n\ng = gcd(low, high)\nprint(high // g, low // g)\n", "#!/usr/bin/env python3\ndef read_string():\n    return input()\ndef read_strings(return_type = iter, split = None, skip = 0):\n    return return_type(input().split(split)[skip:])\ndef read_lines(height, return_type = iter):\n    return return_type(read_string() for i in range(height))\ndef read_number():\n    return int(input())\ndef read_numbers(return_type = iter, skip = 0):\n    return return_type(int(i) for i in input().split()[skip:])\ndef read_values(*types, array = None):\n    line = input().split()\n    result = []\n    for return_type, i in zip(types, list(range(len(types)))):\n        result.append(return_type(line[i]))\n    if array != None:\n        array_type, array_contained = array\n        result.append(array_type(array_contained(i) for i in line[len(types):]))\n    return result\ndef read_array(item_type = int, return_type = iter, skip = 0):\n    return return_type(item_type(i) for i in input().split()[skip:])\ndef read_martix(height, **args):\n    return_type = args[\"return_type\"] if \"return_type\" in args else iter\n    return_type_inner = args[\"return_type_inner\"] if \"return_type_inner\" in args else return_type\n    return_type_outer = args[\"return_type_outer\"] if \"return_type_outer\" in args else return_type\n    item_type = args[\"item_type\"] if \"item_type\" in args else int\n    return return_type_outer(read_array(item_type = item_type, return_type = return_type_inner) for i in range(height))\ndef read_martix_linear(width, skip = 0, item_type = int, skiped = None):\n    num = read_array(item_type = item_type, skip = skip)\n    height = len(num) / width\n    return [num[i * width: (i + 1) * width] for i in range(height)]\ndef gcd(n, m):\n    if m == 0:\n        return n\n    return gcd(m, n % m)\ndef main():\n    n = read_number()\n    arr = sorted(read_numbers(list))\n    sum_x = sum(arr)\n    sum_xy = 0\n    for i in range(1, n):\n        sum_xy += (arr[i] - arr[i - 1]) * i * (n - i)\n    nu = sum_x + sum_xy * 2\n    de = n\n    g = gcd(nu, de)\n    nu //= g\n    de //= g\n    print(nu, de)\ndef __starting_point():\n    main()\n\n__starting_point()", "from fractions import gcd\n\nn = int(input())\na = sorted([int(x) for x in input().split()])\n\nans = 0\nl = 0\nfor i in range(n):\n  ans += i * a[i] - l\n  l += a[i]\n\nans = sum(a) + 2 * ans\ng = gcd(ans, n)\n\nprint(ans // g, n // g)\n", "def gcd(a,b) : return a if b==0 else gcd(b,a%b)\n\n\n\nn = int(input())\n\nl = input().split()\n\nl = [int(i) for i in l]\n\nl.sort()\n\nt = sum((i+i-n+1)*l[i] for i in range(n))\n\nt = t+t+sum(l)\n\nd = gcd(t,n)\n\nprint(t//d,n//d)\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "from fractions import *\nn  =  int(input())\n\na = [int(x) for x in input().split()]\na.sort()\na1 = a[0]\nlef_sum = 0\nfor i in range(1,n):\n    lef_sum+= a[i]*i - a1 \n    a1+=a[i]\n    \nlef_sum*=2\ntotal = lef_sum+a1\ns = Fraction(total,n)\nprint(s.numerator,s.denominator)\n\n", "import fractions\nx = int(input())\na = sorted(map(int, input().split()))\nz = 2 * x + 1\nans = sum(((4 * i - z) * a[i - 1]) for i in range(1, x + 1, 1))\ns = fractions._gcd(ans, x)\nans //= s; x //= s\nss = []\nss.append(ans); ss.append(x)\nprint(*ss)", "import math\nn=int(input())\nl1=list(map(int,input().split()))\npre_sum=[0]\nl1.sort()\nfor item in l1:\n    pre_sum.append(pre_sum[-1]+item)\nnumerator=0\nfor i in range(n):\n    numerator+= (l1[i]*(i+1))-pre_sum[i] +pre_sum[n]-pre_sum[i+1]- l1[i]*(n-1-i)\ny=math.gcd(numerator,n)\nprint(numerator//y,n//y)\n\n", "'''input\n4\n1 5 77 2\n'''\nfrom sys import stdin\nimport collections\nimport math\n\n\n# main starts\nn = int(stdin.readline().strip())\narr = list(map(int, stdin.readline().split()))\narr.sort()\n\nnumerator = sum(arr)\ntemp = 0\nfor i in range(n):\n\ttemp  += i * arr[i]\nfor i in range(n - 1, -1, -1):\n\ttemp -= arr[n - 1 - i] * i\n\nnumerator += 2 * temp\ng = math.gcd(numerator, n)\nprint(numerator // g, n // g)\n", "import math\nt=int(input())\nl=list(map(int,input().split()))\nl.sort()\ns=sum(l)\na=s\nj=1\nm=0\nfor i in l:\n    s-=i\n    m+=s-(t-j)*i\n    j+=1\nx=2*m+a\ny=math.gcd(x,t)\nx//=y\nt//=y\nprint(x,t)", "from math import gcd\n \nn = int(input())\na = sorted(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tans += 2 * (i + i - n + 1) * a[i]\nans += sum(a)\ntmp = gcd(ans, n)\nprint(ans // tmp, n // tmp)\n\n", "import math\nn = int(input())\na = list(map(int, input().split()))\na.sort(reverse = True)\nk = 0\ns1 = 0\ns2 = 0\nfor i in a:\n\ts2 += s1 - k * i\n\ts1 += i\n\tk += 1\ns2 *= 2\ns2 += sum(a)\ngcd = math.gcd(s2, n)\nprint(s2 // gcd, n // gcd)\n\n", "import math\n \nn = int(input())\na = list(map(int, input().split()))\na = sorted(a)\n\nans = 0\ngg = 0\nfor i in range(n):\n  ans += i * a[i] - gg\n  gg += a[i]\n \nans = sum(a) + 2 * ans\ng = math.gcd(ans, n)\nans//=g\nn//=g\nprint(ans, n)\n\n", "def gcd(a, b):\n\tif (b == 0):\n\t\treturn a\n\treturn gcd(b, a % b)\n\n\nn = int(input())\na = sorted(list(map(int, input().split())),reverse = True)\nk = 0\ns1 = 0\ns2 = 0\nfor i in a:\n\ts2 += s1 - k * i\n\ts1 += i\n\tk += 1\ns2 *= 2\ns2 += sum(a)\ngc = gcd(s2, n)\nprint(s2 // gc, n // gc)\n\n", "import math\n\ndef main():\n    n = int(input())\n    arr = list(map(int,input().split()))\n    arr.sort()\n    right = sum(arr)\n    left = 0\n\n    arr.insert(0,0)\n    total = 0\n    for i in range(1,n+1):\n        left += arr[i]\n        total += i*arr[i]-left\n        total += right-(n-i)*arr[i]\n        right -= arr[i]\n\n    g = math.gcd(max(total,n),min(total,n))\n    total = total//g\n    n = n//g\n\n    print(total,n)\n\n\nmain()\n", "from fractions import Fraction\nn=int(input())\na=[int(i) for i in input().split()]\na=sorted(a)\ns=[]\ns.append(0)\nfor i in range(n):\n    s.append(s[-1]+a[i])\nans=0\nfor i in range(1,n+1):\n    ans+=s[n]-s[i-1]-(n-i+1)*a[i-1]\nans=ans*2+sum(a)\nans=Fraction(ans,n)\nprint(\"{0:d} {1:d}\".format(ans.numerator,ans.denominator))\n", "def gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b,a%b)\n    \nn = int(input())\na = [int(x) for x in input().split()]\nsum1 = sum(a)\nsum2 = 0\nsumbefore = 0\na.sort()\nfor i in range(n):\n    sum2 += a[i]*(i) - sumbefore\n    sumbefore += a[i]\nsumtot = sum1 + 2*sum2\nk = gcd(sumtot,n)\nprint(sumtot//k,n//k)"]