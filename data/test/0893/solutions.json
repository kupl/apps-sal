["f = lambda: map(int, input().split())\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    u -= 1\n    v -= 1\n    p[u].append(v)\n    p[v].append(u)\n\ndef g(u, x, a, b, q):\n    k = 1\n    for v in p[u]:\n        if a < t[v] <= b or t[v] == a and v > q:\n            if v != x: k += k * g(v, u, a, b, q) % m\n    return k\n\n\ns = 0\nfor q in range(n):\n    a = t[q]\n    b = a + d\n    s += g(q, -1, a, b, q)\n\nprint(s % m)", "f = lambda: map(int, input().split())\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)", "f = lambda: list(map(int, input().split()))\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)\n", "f = lambda: list(map(int, input().split()))\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)\n", "f = lambda: list(map(int, input().split()))\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)\n", "f = lambda: list(map(int, input().split()))\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)\n", "f = lambda: list(map(int, input().split()))\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)\n", "f = lambda: list(map(int, input().split()))\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)\n", "f = lambda: list(map(int, input().split()))\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)\n", "f = lambda: list(map(int, input().split()))\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)\n", "f = lambda: map(int, input().split())\nm = 1000000007\n\nd, n = f()\nt = list(f())\np = [[] for i in range(n)]\nfor j in range(n - 1):\n    u, v = f()\n    p[u - 1].append(v - 1)\n    p[v - 1].append(u - 1)\n\ndef g(u, x, y):\n    s = 1\n    for v in p[u]:\n        if 0 < t[v] - t[y] <= d or t[v] == t[y] and v > y:\n            if v != x: s += s * g(v, u, y) % m\n    return s\n\nprint(sum(g(y, -1, y) for y in range(n)) % m)", "import sys\n\n\ndef readInts(): return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef readInt(): return int(sys.stdin.readline())\n\n\ndef print(x):\n    sys.stdout.write(str(x) + '\\n')\n\n\ndef solve():\n    MOD = int(1e9 + 7)\n    d, n = readInts()\n    a = readInts()\n    adj: list = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = readInts()\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n    vis = [False for _ in range(n)]\n    f = [0 for _ in range(n)]\n\n    def dfs(cur, root):\n        vis[cur] = True\n\n        f[cur] = 1\n        for neigh in adj[cur]:\n            if vis[neigh]:\n                continue\n            if not (a[root] <= a[neigh] <= a[root] + d):\n                continue\n            if a[neigh] == a[root] and neigh < root:\n                continue\n            dfs(neigh, root)\n            f[cur] *= f[neigh] + 1\n            f[cur] %= MOD\n\n    ans = 0\n    for i in range(0, n):\n        vis = [False for _ in range(n)]\n        f = [0 for _ in range(n)]\n        dfs(i, i)\n        ans += f[i]\n        ans %= MOD\n    print(ans)\n\n\ndef main():\n    t = 1\n    # t = readInt()\n    for _ in range(t):\n        solve()\n\n\nmain()\n", "import sys\n\n\ndef readInts(): return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef readInt(): return int(sys.stdin.readline())\n\n\ndef print(x):\n    sys.stdout.write(str(x) + '\\n')\n\n\ndef solve():\n    MOD = int(1e9 + 7)\n    d, n = readInts()\n    a = readInts()\n    adj: list = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = readInts()\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n    vis = [False for _ in range(n)]\n    f = [0 for _ in range(n)]\n\n    def dfs(cur, root):\n        vis[cur] = True\n\n        f[cur] = 1\n        for neigh in adj[cur]:\n            if vis[neigh]:\n                continue\n            if not (a[root] <= a[neigh] <= a[root] + d):\n                continue\n            if a[neigh] == a[root] and neigh < root:\n                continue\n            dfs(neigh, root)\n            f[cur] *= f[neigh] + 1\n            f[cur] %= MOD\n\n    ans = 0\n    for i in range(0, n):\n        vis = [False for _ in range(n)]\n        f = [0 for _ in range(n)]\n        dfs(i, i)\n        ans += f[i]\n        ans %= MOD\n    print(ans)\n\n\ndef main():\n    t = 1\n    # t = readInt()\n    for _ in range(t):\n        solve()\n\n\nmain()\n", "import sys\n\n\ndef readInts(): return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef readInt(): return int(sys.stdin.readline())\n\n\n# def print(x):\n    # sys.stdout.write(str(x) + '\\n')\n\n\ndef solve():\n    MOD = int(1e9 + 7)\n    d, n = readInts()\n    a = readInts()\n    adj: list = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = readInts()\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n    vis = [False for _ in range(n)]\n    f = [0 for _ in range(n)]\n\n    def dfs(cur, root):\n        vis[cur] = True\n\n        f[cur] = 1\n        for neigh in adj[cur]:\n            if vis[neigh]:\n                continue\n            if not (a[root] <= a[neigh] <= a[root] + d):\n                continue\n            if a[neigh] == a[root] and neigh < root:\n                continue\n            dfs(neigh, root)\n            f[cur] *= f[neigh] + 1\n            f[cur] %= MOD\n\n    ans = 0\n    for i in range(0, n):\n        vis = [False for _ in range(n)]\n        f = [0 for _ in range(n)]\n        dfs(i, i)\n        ans += f[i]\n        ans %= MOD\n    print(ans)\n\n\ndef main():\n    t = 1\n    # t = readInt()\n    for _ in range(t):\n        solve()\n\n\nmain()\n", "import sys\n\n\ndef readInts(): return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef readInt(): return int(sys.stdin.readline())\n\n\ndef print(x):\n    sys.stdout.write(str(x) + '\\n')\n\n\ndef solve():\n    MOD = int(1e9 + 7)\n    d, n = readInts()\n    a = [0] + readInts()\n    adj: list = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = readInts()\n        adj[u].append(v)\n        adj[v].append(u)\n\n    vis = [False for _ in range(n + 1)]\n    f = [0 for _ in range(n + 1)]\n\n    def dfs(cur, root):\n        vis[cur] = True\n\n        f[cur] = 1\n        for neigh in adj[cur]:\n            if vis[neigh]:\n                continue\n            if not (a[root] <= a[neigh] <= a[root] + d):\n                continue\n            if a[neigh] == a[root] and neigh < root:\n                continue\n            dfs(neigh, root)\n            f[cur] *= f[neigh] + 1\n            f[cur] %= MOD\n\n    ans = 0\n    for i in range(1, n + 1):\n        vis = [False for _ in range(n + 1)]\n        f = [0 for _ in range(n + 1)]\n        dfs(i, i)\n        ans += f[i]\n        ans %= MOD\n    print(ans)\n\n\ndef main():\n    t = 1\n    # t = readInt()\n    for _ in range(t):\n        solve()\n\n\nmain()\n", "mod=10**9+7\nd,n=map(int,input().split())\na=[0]+list(map(int,input().split()))\ntree=[[] for _ in range(n+1)]\nfor _ in range(n-1):\n    u,v=map(int,input().split())\n    tree[u].append(v)\n    tree[v].append(u)\n\ndef dfs(u,root):\n    visited[u]=True\n    f[u]=1\n    for i in tree[u]:\n        if visited[i]==False:\n            if a[i]<a[root] or a[i]>a[root]+d:continue\n            if a[i]==a[root] and i<root: continue  \n            dfs(i,root)                           \n            f[u]=(f[u]*(f[i]+1))%(mod)\nans=0\nfor i in range(1,n+1):\n    visited = [False] * (n+1)\n    f = [0] * (n+1)\n    dfs(i,i)\n    ans=(ans+f[i])%mod\nprint(ans)", " \nd, n = list(map(int,input().split()))\na = list(map(int, input().split()))\n\nmas = [[] for _ in range(n+1)]\n\nMOD = 1000000007\nfor _ in range(n-1):\n    u, v = list(map(int,input().split()))\n    mas[u].append(v)\n    mas[v].append(u)    \n    \n# #mas = [[],[2,3,10],[1,6,7],[1],[7],[9],[2],[2,4,11],[9],[5,8,10],[1,9,12],[7],[10]]\n# mas = [[],[2,3],[1],[1,4],[3]]\n# a = [0,2,1,3,2]\n\n# d = 1\n\n# print('mas:',mas)\n# print('a:',a)\n\nk = 0\ndef dfs(nomer,mas,tyt_yge_bili,f,nach):\n    nonlocal k\n    f[nomer] = 1;\n    # print(nomer ,\"--\", nach)\n    tyt_yge_bili[nomer] = True\n    # f.append(a[nomer-1])\n    # # print(f)\n    # if max(f)-min(f)<=d:\n    #     k+=1\n    #     print(f)\n    for j in mas[nomer]:\n        if tyt_yge_bili[j]!=True:\n            if not ((a[j-1] < a[nach-1]) or (a[j-1] > a[nach-1] + d)) and not ((a[j-1] == a[nach-1]) and (j < nach)):\n                dfs(j,mas,tyt_yge_bili,f,nach)\n                # print(a[j-1],a[nach-1])\n                f[nomer] = (f[nomer] * (f[j] + 1)) % MOD\n            \nrez = 0\nfor z in range(1,n+1):\n    f = []\n    tyt_yge_bili = []\n    for _ in range(n+1):\n        f.append(0)\n        tyt_yge_bili.append(0)\n    dfs(z,mas,tyt_yge_bili,f , z)\n    rez = (rez + f[z]) % MOD\n\nprint(rez)\n\n\n\n\n\n    \n", " \nd, n = list(map(int,input().split()))\na = list(map(int, input().split()))\n\nmas = [[] for _ in range(n+1)]\n\nMOD = 1000000007\nfor _ in range(n-1):\n    u, v = list(map(int,input().split()))\n    mas[u].append(v)\n    mas[v].append(u)    \n    \n# #mas = [[],[2,3,10],[1,6,7],[1],[7],[9],[2],[2,4,11],[9],[5,8,10],[1,9,12],[7],[10]]\n# mas = [[],[2,3],[1],[1,4],[3]]\n# a = [0,2,1,3,2]\n\n# d = 1\n\n# print('mas:',mas)\n# print('a:',a)\n\nk = 0\ndef dfs(nomer,mas,tyt_yge_bili,f,nach):\n    nonlocal k\n    f[nomer] = 1;\n    # print(nomer ,\"--\", nach)\n    tyt_yge_bili[nomer] = True\n    # f.append(a[nomer-1])\n    # # print(f)\n    # if max(f)-min(f)<=d:\n    #     k+=1\n    #     print(f)\n    for j in mas[nomer]:\n        if tyt_yge_bili[j]!=True:\n            if ((a[j-1] >= a[nach-1]) and (a[j-1] <= a[nach-1] + d)) and ((a[j-1] != a[nach-1]) or (j >= nach)):\n                dfs(j,mas,tyt_yge_bili,f,nach)\n                # print(a[j-1],a[nach-1])\n                f[nomer] = (f[nomer] * (f[j] + 1)) % MOD\n            \nrez = 0\nfor z in range(1,n+1):\n    f = []\n    tyt_yge_bili = []\n    for _ in range(n+1):\n        f.append(0)\n        tyt_yge_bili.append(0)\n    dfs(z,mas,tyt_yge_bili,f , z)\n    rez = (rez + f[z]) % MOD\n\nprint(rez)\n\n\n\n\n\n    \n", " \nd, n = list(map(int,input().split()))\na = list(map(int, input().split()))\n\nmas = [[] for _ in range(n+1)]\n\nMOD = 1000000007\nfor _ in range(n-1):\n    u, v = list(map(int,input().split()))\n    mas[u].append(v)\n    mas[v].append(u) \n\n\ndef dfs(nomer,mas,tyt_yge_bili,f,nach):\n    f[nomer] = 1;\n    tyt_yge_bili[nomer] = True\n    for j in mas[nomer]:\n        if tyt_yge_bili[j]!=True:\n            if ((a[j-1] >= a[nach-1]) and (a[j-1] <= a[nach-1] + d)) and ((a[j-1] != a[nach-1]) or (j >= nach)):\n                dfs(j,mas,tyt_yge_bili,f,nach)\n                f[nomer] = (f[nomer] * (f[j] + 1)) % MOD\n                \n            \nrez = 0\nfor z in range(1,n+1):\n    f = []\n    tyt_yge_bili = []\n    for _ in range(n+1):\n        f.append(0)\n        tyt_yge_bili.append(0)\n    dfs(z,mas,tyt_yge_bili,f , z)\n    rez = (rez + f[z]) % MOD\n    \n\nprint(rez)\n\n\n\n\n\n    \n"]