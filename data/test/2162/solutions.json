["n = sum(list(map(int, input().split())))\n\nA = [0 for i in range(n)]\n\nDP = [[0 for i in range(3)] for i in range(n)]\n\nfor i in range(3):\n\tfor j in map(int, input().split()):\n\t\tA[j - 1] = i\n\nDP[0] = [A[0] != i for i in range(3)]\n\nfor i in range(1, n):\n\tDP[i][0] = DP[i - 1][0] + (A[i] != 0)\n\tDP[i][1] = min(DP[i - 1][0], DP[i - 1][1]) + (A[i] != 1)\n\tDP[i][2] = min(DP[i - 1]) + (A[i] != 2)\n\nprint(min(DP[n - 1]))", "3\n\nimport os\nimport sys\n\n\ndef main():\n    K = read_ints()\n    A = [read_ints(), read_ints(), read_ints()]\n    print(solve(K, A))\n\n\ndef solve(K, A):\n    N = sum(K)\n    INF = N + 1\n    loc = [-1] * N\n    for i in range(3):\n        for a in A[i]:\n            loc[a - 1] = i\n\n    D = [0, 0, 0]\n    for i in loc:\n        if i == 0:\n            D = [D[0],\n                 min(D[0] + 1, D[1] + 1),\n                 min(D[0] + 1, D[1] + 1, D[2] + 1)]\n        elif i == 1:\n            D = [D[0] + 1,\n                 min(D[0], D[1]),\n                 min(D[0] + 1, D[1] + 1, D[2] + 1)]\n        else:\n            D = [D[0] + 1,\n                 min(D[0] + 1, D[1] + 1),\n                 min(D[0], D[1], D[2])]\n    return min(D)\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\nK1, K2, K3 = list(map(int, input().split()))\nN = K1+K2+K3\nA1 = list(map(int, input().split()))\nA2 = list(map(int, input().split()))\nA3 = list(map(int, input().split()))\nA = [0] * N\nfor i, A_ in enumerate([A1, A2, A3], 1):\n    for a in A_:\n        A[a-1] = i\n\na_12to3 = K1+K2\nans = a_12to3\na_2to1 = 0\ncnt_1 = 0\ncnt_2 = 0\nidx_12 = 0\n\nfor a in A:\n    if a==3:\n        a_12to3 += 1\n    else:\n        a_12to3 -= 1\n        if a==1:\n            cnt_1 += 1\n            if cnt_1 >= cnt_2:\n                a_2to1 += cnt_2\n                cnt_1 = cnt_2 = 0\n        else:\n            cnt_2 += 1\n\n    an = a_12to3 + a_2to1 + cnt_1\n    ans = min(ans, an)\n\nprint(ans)\n", "k1, k2, k3 = map(int,input().split())\nl1 = list(map(int,input().split()))\nl2 = list(map(int,input().split()))\nl3 = list(map(int,input().split()))\nn = k1 + k2 + k3\nassign = [0] * n\nfor i in l1:\n\tassign[i - 1] = 1\nfor i in l2:\n\tassign[i - 1] = 2\nfor i in l3:\n\tassign[i - 1] = 3\n#ilenie2wprawo = [0] * n\nilenie3wprawo = [0] * n\nilenie1wlewo = [0] * n\nilenie1wlewo[n-1] = k2+k3\ni = n - 1\nilenie3wprawo[n-1] = (1 if assign[n - 1] != 3 else 0)\nwhile i > 0:\n\ti -= 1\n#\tilenie2wprawo[i] = ilenie2wprawo[i+1]\n\tilenie3wprawo[i] = ilenie3wprawo[i+1]\n\tilenie1wlewo[i] = ilenie1wlewo[i+1]\n#\tif assign[i] != 2:\n#\t\tilenie2wprawo[i] += 1\n\tif assign[i] != 3:\n\t\tilenie3wprawo[i] += 1\n\tif assign[i + 1] != 1:\n\t\tilenie1wlewo[i] -= 1\n#print(assign)\n#print(ilenie1wlewo, ilenie3wprawo)\nodp = [0] * (n + 1)\n# odp[i] to odp zakladajac ze dokladnie i pierwszych nalezy do pierwszego\nodp[n] = k2 + k3\ni = n \nwhile i > 1:\n\ti -= 1\n\tif assign[i] == 2:\n\t\todp[i] = odp[i+1] - 1\n\tif assign[i] == 1:\n\t\todp[i] = odp[i+1] + 1\n\tif assign[i] == 3:\n\t\todp[i] = min(odp[i+1], ilenie1wlewo[i - 1] + ilenie3wprawo[i])\nif assign[0] == 2:\n\todp[0] = odp[1] - 1\nif assign[0] == 1:\n\todp[0] = odp[1] + 1\nif assign[0] == 3:\n\todp[0] = min(odp[i+1], ilenie3wprawo[0])\n#print(odp)\nprint(min(odp))", "#!/usr/bin/env python3\nimport sys\nimport bisect\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nINF = 10**9\n\nanum, bnum, cnum = [int(item) for item in input().split()]\nk = anum + bnum + cnum\na = [int(item) for item in input().split()]\nb = [int(item) for item in input().split()]\nc = [int(item) for item in input().split()]\n\nholder = [0] * k\nfor item in a:\n    holder[item-1] = 0\nfor item in b:\n    holder[item-1] = 1\nfor item in c:\n    holder[item-1] = 2\n\n# seen ith, state(a hold, b hold, c hold)\ndp = [[INF] * (k + 1) for _ in range(3)]\ndp[0][0] = 0\ndp[1][0] = 0\ndp[2][0] = 0\n\n\nfor i in range(k):\n    if holder[i] == 0:\n        dp[0][i+1] = min(dp[0][i+1], dp[0][i])\n        dp[1][i+1] = min(dp[1][i+1], dp[1][i] + 1)\n        dp[2][i+1] = min(dp[2][i+1], dp[2][i] + 1)\n        dp[1][i+1] = min(dp[1][i+1], dp[0][i] + 1)\n        dp[2][i+1] = min(dp[2][i+1], dp[1][i] + 1)\n        dp[2][i+1] = min(dp[2][i+1], dp[0][i] + 1)\n    elif holder[i] == 1:\n        dp[0][i+1] = min(dp[0][i+1], dp[0][i] + 1)\n        dp[1][i+1] = min(dp[1][i+1], dp[1][i])\n        dp[2][i+1] = min(dp[2][i+1], dp[2][i] + 1)\n        dp[1][i+1] = min(dp[1][i+1], dp[0][i])\n        dp[2][i+1] = min(dp[2][i+1], dp[1][i] + 1)\n        dp[2][i+1] = min(dp[2][i+1], dp[0][i] + 1)\n    elif holder[i] == 2:\n        dp[0][i+1] = min(dp[0][i+1], dp[0][i] + 1)\n        dp[1][i+1] = min(dp[1][i+1], dp[1][i] + 1)\n        dp[2][i+1] = min(dp[2][i+1], dp[2][i])\n        dp[1][i+1] = min(dp[1][i+1], dp[0][i] + 1)\n        dp[2][i+1] = min(dp[2][i+1], dp[1][i])\n        dp[2][i+1] = min(dp[2][i+1], dp[0][i])\n    \nans = INF\nfor line in dp:\n    ans = min(ans, line[-1])\nprint(ans)", "# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\n# k1, k2, k3 = next(reader)\n# a = list(next(reader))\n# b = list(next(reader))\n# c = list(next(reader))\n\nk1, k2, k3 = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\ndef ceil(a, L, R, pivot): \n    while L + 1 < R: \n        m = (L + R) // 2\n        if (a[m] > pivot): \n            R = m \n        else: \n            L = m \n    return R\n   \ndef LIS(a, n):\n    \n    tails = [0 for _ in range(n + 1)] \n    empty = 0\n   \n    tails[0] = a[0] \n    empty = 1\n    for i in range(1, n): \n        if (a[i] < tails[0]): \n            tails[0] = a[i]\n        elif (a[i] >= tails[empty - 1]):\n            tails[empty] = a[i]\n            empty += 1\n        else:\n            tails[ceil(tails, -1, empty - 1, a[i])] = a[i]          \n   \n    return empty\n\nn = k1 + k2 + k3\nabc = [None] * n\nfor el in a:\n    abc[el - 1] = 1\nfor el in b:\n    abc[el - 1] = 2\nfor el in c:\n    abc[el - 1] = 3\n# print(abc)\nprint(n - LIS(abc, n))\n\n# inf.close()\n", "k1, k2, k3 = map(int, input().split())\ns = [set(map(int, input().split())) for _ in range(3)]\n\ninf = 10**9\ndp = [[inf]*3 for _ in range(k1+k2+k3+1)]\ndp[0][0] = 0\n\n\nfor i in range(1, k1+k2+k3+1):\n    for j in range(3):\n        for k in range(j, 3):\n            dp[i][k] = min(dp[i][k], dp[i-1][j] + (i not in s[k]))\n\nprint(min(dp[-1]))", "import sys\ninput = sys.stdin.readline\n\nk1,k2,k3=list(map(int,input().split()))\n\nA1=list(map(int,input().split()))\nA2=list(map(int,input().split()))\nA3=list(map(int,input().split()))\n\nA=sorted(A1)+sorted(A2)+sorted(A3)\n\nimport bisect\n\nN=k1+k2+k3\nDP=[float(\"inf\")]*N\n\nfor a in A:\n    pos=bisect.bisect_left(DP,a)\n    DP[pos]=a\n\nANS=0\nfor i in range(N):\n    if DP[i]!=float(\"inf\"):        ANS=i\n\nprint(N-(ANS+1))\n", "k1, k2, k3 = map(int, input().split())\nn = k1 + k2 + k3\n\na = [0] * n\ninput()\nfor x in map(int, input().split()):\n\ta[x-1] = 1\nfor x in map(int, input().split()):\n\ta[x-1] = 2\n\n\nprev = [0, 0, 0]\n\nfor i, x in enumerate(a):\n\tnew = [0, 0, 0]\n\n\tnew[0] = prev[0] + (x!=0)\n\tnew[1] = min(prev[0], prev[1]) + (x!=1)\n\tnew[2] = min(prev) + (x!=2)\n\tprev = new\n\nprint(min(prev))", "k = [int(i) for i in input().split(\" \")]\nn = sum(k)\na = [0] * n\nfor I in range(3):\n\tline = [int(i) for i in input().split(\" \")]\n\tfor item in line:\n\t\ta[item-1] = I\n\ndp = [1] * n\ncur = [-1, -1, -1]\nfor i in range(n):\n\tfor j in range(a[i]+1):\n\t\tif cur[j] >= 0:\n\t\t\tdp[i] = max(dp[i], 1+dp[cur[j]])\n\tcur[a[i]] = i\n# print(a)\n# print(dp)\nprint(n-max(dp))", "from sys import stdin,stdout\n\ninf=1000000000000007\n \ndef solve():\n\ta1,b1,c1=[int(i) for i in stdin.readline().split()]\n\tk=a1+b1+c1;\n\ta=[0 for i in range(k+1)]\n\tfor i in stdin.readline().split():\n\t\ta[int(i)]=0\n\tfor i in stdin.readline().split():\n\t\ta[int(i)]=1\n\tfor i in stdin.readline().split():\n\t\ta[int(i)]=2\n\tdp=[[inf for i in range(k+1)] for j in range(3)]\n\tdp[0][0],dp[1][0],dp[2][0]=0,0,0\n\tfor i in range(1,k+1):\n\t\tfor j in range(3):\n\t\t\tif(a[i]==j):\n\t\t\t\tfor l in range(0,j+1):\n\t\t\t\t\tdp[j][i]=min(dp[j][i],dp[l][i-1])\n\t\t\telse:\n\t\t\t\tfor l in range(0,j+1):\n\t\t\t\t\tdp[j][i]=min(dp[j][i],dp[l][i-1]+1)\n\tprint(min(dp[0][k],dp[1][k],dp[2][k]))\n\nsolve()", "def LIS(X):\n    N = len(X)\n    P = [0] * N\n    M = [0] * (N+1)\n    L = 0\n    for i in range(N):\n        lo = 1\n        hi = L\n        while lo <= hi:\n            mid = (lo+hi)//2\n            if (X[M[mid]] < X[i]):\n                lo = mid+1\n            else:\n                hi = mid-1\n \n        newL = lo\n        P[i] = M[newL-1]\n        M[newL] = i\n \n        if (newL > L):\n            L = newL\n \n    S = []\n    k = M[L]\n    for i in range(L-1, -1, -1):\n        S.append(X[k])\n        k = P[k]\n        \n    return len(S)#[::-1]\n\nk1, k2, k3 = list(map(int, input().split()))\na = []\nfor _ in range(3):\n    a.extend(sorted(list(map(int, input().split()))))\n    \nprint(k1+k2+k3-LIS(a))\n\n#1 5 1\n#6\n#5 1 2 4 7\n#3\n\n#2 1 3\n#5 6\n#4\n#1 2 3\n", "def main():\n    k1, k2, k3 = map(int, input().split())\n    n = k1 + k2 + k3\n    arr = [0 for _ in range(n)]\n    a = list(map(int, input().split()))\n    for i in a:\n        arr[i-1] = 1\n    a = list(map(int, input().split()))\n    for i in a:\n        arr[i-1] = 2\n    a = list(map(int, input().split()))\n    for i in a:\n        arr[i-1] = 3\n    dp = [0, 0, 0]\n    for i in arr:\n        if i == 1:\n            dp[1] += 1\n            dp[2] += 1\n        if i == 2:\n            dp[1] = min(dp[0], dp[1])\n            dp[0] += 1\n            dp[2] += 1\n        if i == 3:\n            dp[2] = min(dp[0], dp[1], dp[2])\n            dp[0] += 1\n            dp[1] += 1\n    print(min(dp))\n\ndef __starting_point():\n    main()\n__starting_point()", "k1, k2, k3 = list(map(int, input().split()))\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\na = sorted(a)\nb = sorted(b)\nc = sorted(c)\n\nn = k1 + k2 + k3\n\nl = [0] * (n + 1)\nr = [0] * (n + 1)\n\np = 0\nfor i in range(n + 1):\n\tif p < len(a) and i == a[p]:\n\t\tp += 1\n\tl[i] += len(a) - p\n\np = 0\nfor i in range(n + 1):\n\tif p < len(b) and i == b[p]:\n\t\tp += 1\n\tl[i] += p\n\np = 0\nfor i in range(n + 1):\n\tif p < len(b) and i == b[p]:\n\t\tp += 1\n\tr[i] += len(b) - p\n\np = 0\nfor i in range(n + 1):\n\tif p < len(c) and i == c[p]:\n\t\tp += 1\n\tr[i] += p\n\nr_cum_min = [None] * (n + 1)\nr_cum_min[-1] = r[n]\n\ni = n - 1\nwhile i >= 0:\n\tr_cum_min[i] = min(r[i], r_cum_min[i + 1])\n\ti -= 1\n\nanswer = 1e9\nfor i in range(n + 1):\n\tif l[i] + r_cum_min[i] < answer:\n\t\tanswer = l[i] + r_cum_min[i]\n\n# print(l)\n# print(r)\n\nprint(answer)\n", "def input_sorted_int_list():\n\treturn sorted(map(int, input().split()))\n\ndef update_moves_count_list(moves_count_list, tasks_list, from_left_to_right):\n\tp = 0\n\tfor i in range(n + 1):\n\t\tif p < len(tasks_list) and i == tasks_list[p]:\n\t\t\tp += 1\n\t\tif from_left_to_right:\n\t\t\tmoves_count_list[i] += len(tasks_list) - p\n\t\telse:\n\t\t\tmoves_count_list[i] += p\n\nk1, k2, k3 = list(map(int, input().split()))\nn = k1 + k2 + k3\n\na = input_sorted_int_list()\nb = input_sorted_int_list()\nc = input_sorted_int_list()\n\nleft_moves_count = [0] * (n + 1)\nright_moves_count = [0] * (n + 1)\n\nupdate_moves_count_list(left_moves_count, a, True)\nupdate_moves_count_list(left_moves_count, b, False)\nupdate_moves_count_list(right_moves_count, b, True)\nupdate_moves_count_list(right_moves_count, c, False)\n\nr_cum_min = [None] * (n + 1)\nr_cum_min[-1] = right_moves_count[n]\n\ni = n - 1\nwhile i >= 0:\n\tr_cum_min[i] = min(right_moves_count[i], r_cum_min[i + 1])\n\ti -= 1\n\nanswer = 1e9\nfor i in range(n + 1):\n\tif left_moves_count[i] + r_cum_min[i] < answer:\n\t\tanswer = left_moves_count[i] + r_cum_min[i]\n\nprint(answer)\n", "k = [int(i) for i in input().split(\" \")]\nn = sum(k)\na = [0] * n\nfor I in range(3):\n\tline = [int(i) for i in input().split(\" \")]\n\tfor item in line:\n\t\ta[item-1] = I\n \ndp = [1] * n\ncur = [-1, -1, -1]\nfor i in range(n):\n\tfor j in range(a[i]+1):\n\t\tif cur[j] >= 0:\n\t\t\tdp[i] = max(dp[i], 1+dp[cur[j]])\n\tcur[a[i]] = i\nprint(n-max(dp))\n", "import math\nfrom decimal import Decimal\nimport heapq\nfrom collections import deque\ndef na():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\treturn n,b\n \n \ndef nab():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\tc = [int(x) for x in input().split()]\n\treturn n,b,c\n \n \ndef dv():\n\tn, m = list(map(int, input().split()))\n\treturn n,m\n \n \ndef dva():\n\tn, m = list(map(int, input().split()))\n\ta = [int(x) for x in input().split()]\n\tb = [int(x) for x in input().split()]\n\treturn n,m,b\n \n \ndef eratosthenes(n): \n\tsieve = list(range(n + 1))\n\tfor i in sieve:\n\t\tif i > 1:\n\t\t\tfor j in range(i + i, len(sieve), i):\n\t\t\t\tsieve[j] = 0\n\treturn sorted(set(sieve))\n \n \ndef lol(lst,k):\n\tk=k%len(lst)\n\tret=[0]*len(lst)\n\tfor i in range(len(lst)):\n\t\tif i+k<len(lst) and i+k>=0:\n\t\t\tret[i]=lst[i+k]\n\t\tif i+k>=len(lst):\n\t\t\tret[i]=lst[i+k-len(lst)]\n\t\tif i+k<0:\n\t\t\tret[i]=lst[i+k+len(lst)]\n\treturn(ret)\ndef nm():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\tm = int(input())\n\tc = [int(x) for x in input().split()]\n\treturn n,b,m,c\n \n \ndef dvs():\n\tn = int(input())\n\tm = int(input())\n\treturn n, m \n \ndef fact(a, b):\n\tc = []\n\tans = 0\n\tf = int(math.sqrt(a))\n\tfor i in range(1, f + 1):\n\t\tif a % i == 0:\n\t\t\tc.append(i)\n\tl = len(c)\n\tfor i in range(l):\n\t\tc.append(a // c[i])\n\tfor i in range(len(c)):\n\t\tif c[i] <= b:\n\t\t\tans += 1\n\tif a / f == f and b >= f:\n\t\treturn ans - 1\n\treturn ans\n \n\nk1, k2, k3 = list(map(int, input().split()))\nn = k1 + k2 + k3\na = [-1] * n\nx1 = list(map(int, input().split()))\nx2 = list(map(int, input().split()))\nx3 = list(map(int, input().split()))\nfor i in x1:\n\ta[i - 1] = 0\nfor i in x2:\n\ta[i - 1] = 1\nfor i in x3:\n\ta[i - 1] = 2\nans = k1 + k2\nmx = 0\ncntl = [0] * 3\ncntr = [0] * 3\nfor i in range(n):\n\tcntr[a[i]] += 1\nfor i in range(n):\n\tcntl[a[i]] += 1\n\tcntr[a[i]] -=1 \n\tmx = max(mx, cntl[0] - cntl[1])\n\ttc = cntr[0] + cntr[1] + cntl[2] + cntl[0] - mx\n\tans = min(ans, tc)\nprint(ans)\n", "from sys import stdin\n\ninput = stdin.readline\nr = list(map(int, input().split()))\nn = sum(r)\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nmp = [0] * -~n\nfor i in a:\n    mp[i] = 0\n\nfor i in b:\n    mp[i] = 1\n\nfor i in c:\n    mp[i] = 2\ninf = float('inf')\ndp = [[inf] * -~n for _ in range(3)]\n\nfor i in range(3):\n    dp[i][0] = 0\n    for j in range(1, n + 1):\n        dp[i][j] = dp[i][j-1] + (mp[j] != i)\n        if i:\n            dp[i][j] = min(dp[i - 1][j], dp[i][j])\n\nprint(dp[2][n])", "from sys import stdin\n\ninput = stdin.readline\nr = list(map(int, input().split()))\nn = sum(r)\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nmp = [0] * -~n\nfor i in a:\n    mp[i] = 0\n\nfor i in b:\n    mp[i] = 1\n\nfor i in c:\n    mp[i] = 2\n\n\nans = sum(r[:2])\nnow = ans\nsm0 = 0\nsm2 = r[2]\nfor i in range(1, n + 1):\n    sm0 +=(mp[i] == 0)\n    sm2 -= (mp[i] == 2)\n\n    if mp[i] == 2:\n        now += 1\n    elif mp[i] == 1:\n        now -= 1\n    else:\n        now = min(now, n - sm0 - sm2)\n\n    ans = min(ans, now)\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Nov 22 20:14:03 2019\n\n@author: Tejasvi Sharma\n\"\"\"\n\nk1,k2,k3 = list(map(int,input().split(\" \")))\nn = k1+k2+k3\na = list(map(int,input().split(\" \")))\nb = list(map(int,input().split(\" \")))\nc = list(map(int,input().split(\" \")))\n\nB = list(range(k1+k2+k3))\n\nfor i in a:\n    B[i-1]=1\nfor i in b:\n    B[i-1]=2\nfor i in c:\n    B[i-1]=3\n\np1,p2,p3 = (0,0,0)\n\ninf = int(2*1e5+3)\nstateStorage = [[inf for i in range(3)] for j in range(2)]\n\nfor i in range(3):\n    stateStorage[n%2][i]=0\n    \n\ndef fillMatrix(n):\n    for i in range(n-1,-1,-1):\n        stateStorage[i%2][0] = (1-int(B[i]==1)) + min(stateStorage[(i+1)%2][0], stateStorage[(i+1)%2][1], stateStorage[(i+1)%2][2])\n        stateStorage[i%2][1] = (1-int(B[i]==2)) + min(stateStorage[(i+1)%2][2], stateStorage[(i+1)%2][1])\n        stateStorage[i%2][2] = (1-int(B[i]==3)) + stateStorage[(i+1)%2][2]\n#        print(str(i)+\"->\")\n#        print(stateStorage[i%2][0],stateStorage[i%2][1],stateStorage[i%2][2])\n    return min(stateStorage[0][0],stateStorage[0][1],stateStorage[0][2])\n        \n\n#def recF(index, state):\n#    if stateStorage[index][state-1]!=inf:\n#        return stateStorage[index][state-1]\n#    val = 0\n#    if state==1:\n#        if B[index]==1:\n#            val += recF(index+1, state)\n#        elif B[index]==2:\n#            val += min(recF(index+1,state)+1, recF(index+1,state=2))\n#        else:\n#            val += min(recF(index+1,state)+1, recF(index+1,state=3))\n#    elif state==2:\n#        if B[index]==1:\n#            val += recF(index+1, state)+1\n#        elif B[index]==2:\n#            val += recF(index+1, state)\n#        else:\n#            val += min(recF(index+1,state)+1, recF(index+1,state=3))\n#    elif state==3:\n#        if B[index]==3:\n#            val += recF(index+1, state)\n#        else:\n#            val += recF(index+1, state)+1\n#            \n#    stateStorage[index][state-1]=val\n#    return stateStorage[index][state-1]\n\n        \nans = fillMatrix(n)\nprint(ans)\n", "k = [int(i) for i in input().split(\" \")]\nn = sum(k)\na = [0] * n\nfor I in range(3):\n\tline = [int(i) for i in input().split(\" \")]\n\tfor item in line:\n\t\ta[item-1] = I\ndp = [1] * n\ncur = [-1, -1, -1]\nfor i in range(n):\n\tfor j in range(a[i]+1):\n\t\tif cur[j] >= 0:\n\t\t\tdp[i] = max(dp[i], 1+dp[cur[j]])\n\tcur[a[i]] = i\nprint(n-max(dp))\n\n", "def solve(arr):\n    dp = [0, 0, 0]\n    for i in arr:\n        if i == 1:\n            dp[1] += 1\n            dp[2] += 1\n        if i == 2:\n            dp[1] = min(dp[0:2])\n            dp[0] += 1\n            dp[2] += 1\n        if i == 3:\n            dp[2] = min(dp)\n            dp[0] += 1\n            dp[1] += 1\n\n    return min(dp)\n\n\ndef __starting_point():\n    k1, k2, k3 = map(int, input().split(\" \"))\n    n = k1 + k2 + k3\n    a = list(map(int, input().split(\" \")))\n    b = list(map(int, input().split(\" \")))\n    c = list(map(int, input().split(\" \")))\n\n    assert n == len(a) + len(b) + len(c)\n\n    arr = [0 for _ in range(n)]\n    for i in a:\n        arr[i - 1] = 1\n    for i in b:\n        arr[i - 1] = 2\n    for i in c:\n        arr[i - 1] = 3\n    dp = [0, 0, 0]\n\n    print(solve(arr))\n__starting_point()", "def solve(a, b, c):\n    n = len(a) + len(b) + len(c)\n    arr = [0] * (n + 1)\n    for i in a:\n        arr[i] = 0\n\n    for i in b:\n        arr[i] = 1\n\n    for i in c:\n        arr[i] = 2\n\n    dp = [[n + 10] * (n + 1) for _ in range(3)]\n\n    for i in range(3):\n        dp[i][0] = 0\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1] + (arr[j] != i)\n            if i:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j])\n\n    return dp[2][n]\n\n\ndef __starting_point():\n    k1, k2, k3 = map(int, input().split(\" \"))\n    n = k1 + k2 + k3\n    a = list(map(int, input().split(\" \")))\n    b = list(map(int, input().split(\" \")))\n    c = list(map(int, input().split(\" \")))\n\n    assert n == len(a) + len(b) + len(c)\n\n    arr = [0 for _ in range(n)]\n    for i in a:\n        arr[i - 1] = 1\n    for i in b:\n        arr[i - 1] = 2\n    for i in c:\n        arr[i - 1] = 3\n    dp = [0, 0, 0]\n\n    print(solve(a, b, c))\n__starting_point()", "k1,k2,k3=map(int,input().split())\ns=[set([int(o) for o in input().split()]) for i in range(3)]\nn=k1+k2+k3\ndp=[[float('inf')]*3 for i in range(n+1)]\ndp[0][0]=0\nfor i in range(1,n+1):\n    for j in range(3):\n        for k in range(j,3):\n            dp[i][k]=min(dp[i][k],dp[i-1][j]+(i not in s[k]))\n#for j in range(3):\n #   for i in range(n+1):\n  #      print(dp[i][j],end=\" \")\n   # print()\n\nprint(min(dp[n]))"]