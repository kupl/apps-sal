["n = input()\n\ns = []\n\na = 0\n\nfor i in map(int, input().split()):\n\n    while len(s) > 1 and min(s[-2], i)>=s[-1]:\n\n        a += min(i, s[-2])\n\n        del(s[-1])\n\n    s.append(i)\n\ns.sort()\n\nprint(a + sum(s[0: -2]))\n\n\n\n# Made By Mostafa_Khaled\n", "n = int(input())\ncards = list(map(int,input().split()))\n\nscore = 0\npreIndexes = []\nnextIndexes = []\nisChosen = [0]*n\nchosens = []\n\n#first card score initialize\nnextIndexes.append(1)\npreIndexes.append(-1)\n\nfor i in range(1, n-1):\n    if cards[i] <= cards[i-1] and cards[i] <= cards[i+1]:\n        chosens.append((-cards[i], i))\n        isChosen[i] = 1\n    preIndexes.append(i-1)\n    nextIndexes.append(i+1)\n\n#last card score initialize\npreIndexes.append(n-2)\nnextIndexes.append(n)\n\nwhile len(chosens) != 0:\n    chosen = chosens.pop()\n    preChosen = preIndexes[chosen[1]]\n    nextChosen = nextIndexes[chosen[1]]\n\n    #handle score\n    score += min(cards[preChosen], cards[nextChosen])\n\n    #handle deleting\n    nextIndexes[preChosen] = nextChosen\n    preIndexes[nextChosen] = preChosen\n\n    #check if preChosen can be chosen\n    if preChosen != 0 and preIndexes[preChosen] != -1 and nextIndexes[preChosen] != n:\n        if cards[preChosen] <= cards[preIndexes[preChosen]] and cards[preChosen] <= cards[nextIndexes[preChosen]]:\n            if isChosen[preChosen] == 0:\n                isChosen[preChosen] = 1\n                chosens.append((-cards[preChosen], preChosen))\n    #check if nextChosen can be chosen\n    if nextChosen != n-1 and preIndexes[nextChosen] != -1 and nextIndexes[nextChosen] != n:\n        if cards[nextChosen] <= cards[preIndexes[nextChosen]] and cards[nextChosen] <= cards[nextIndexes[nextChosen]]:\n            if isChosen[nextChosen] == 0:\n                isChosen[nextChosen] = 1\n                chosens.append((-cards[nextChosen], nextChosen))\n\ntempNode = nextIndexes[0]\nwhile tempNode != n and tempNode != n-1:\n    score += min(cards[preIndexes[tempNode]], cards[nextIndexes[tempNode]])\n    tempNode = nextIndexes[tempNode]\n\nprint(score)\n", "\nMAXN = 5 * 10**5 + 100\na = []\nans = 0\n\nn = int(input())\n\na = list( map ( int, input().split() ) )\na.append(0)\n\na = [0] + a\nn = n + 2 \narr = []\narr.append( a[0] )\narr.append( a[1] ) \n\n\ni = 2\nwhile i < n :\n\tln = a[i] \n\tl1 = arr[-1]\n\tl0 = arr[-2]\n\twhile l1 <= l0 and l1 <= ln :\n\t\tans = ans + min ( l0 , ln )\n\t\tarr.pop()\n\t\tl1 = arr[-1]\n\t\tl0 = arr[-2]\n\tarr.append(ln)\n\ti = i + 1\nfor i in range ( 1 , len(arr) - 1 ) :\n\tans += min ( arr[i - 1] , arr[i + 1] ) \n\nprint (ans)\n\n\n\n\n", "input()\nlist=[int(x) for x in input().split()]\nstack=[]\nscore=0\nstack.append(list[0])\nfor i in range(1,len(list)):\n    while(len(stack)>1 and stack[-1]<=min(list[i],stack[-2])):\n        score=score+min(list[i],stack[-2])\n        stack.pop()\n    stack.append(list[i])\nfor i in range(1,len(stack)-1):\n    score=score+min(stack[i-1],stack[i+1])\nprint(score)\n\n\n\n", "\ndef maxScore(list):\n    score=0\n    stack=[]\n    stack.append(list[0])\n    for i in range(1,len(list)):\n        while(len(stack)>1 and stack[-1]<=min(list[i],stack[-2])):\n            score=score+min(list[i],stack[-2])\n            stack.pop()\n        stack.append(list[i])\n    for i in range(1,len(stack)-1):\n        score=score+min(stack[i-1],stack[i+1])\n    return score\ninput()\nl=[int(x) for x in input().split()]\nprint(maxScore(l))\n\n\n\n\n\n\n\n"]