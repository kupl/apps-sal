["import sys\nn,m=map(int,input().split())\nred=[]\n\nfor i in range(n):\n    a,b=map(int,input().split())\n    red.append(a*b)\n\nd={}\nfor i in range(m):\n    a,b=map(int,input().split())\n    p=a*b\n    if p in d:\n        d[p]+=1\n    else:\n        d[p]=1\n\nan=0\nfor i in range(n):\n    if red[i] in d and d[red[i]]>0:\n        an+=1\n        d[red[i]]-=1\n    \nprint(an)", "# cook your dish here\nn,m=map(int,input().split())\nred=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    red.append(a*b)\n\nd={}\nfor i in range(m):\n    a,b=map(int,input().split())\n    p=a*b\n    if p  in d:\n        d[p]+=1\n    else:\n        d[p]=1\n\nan=0\nfor i in range(n):\n    if red[i] in d and d[red[i]]>0:\n        an+=1\n        d[red[i]]-=1\n        \n    \nprint(an)\n", "import sys\nn,m=map(int,input().split())\nred=[]\n\nfor i in range(n):\n    a,b=map(int,input().split())\n    red.append(a*b)\n\nd={}\nfor i in range(m):\n    a,b=map(int,input().split())\n    p=a*b\n    if p in d:\n        d[p]+=1\n    else:\n        d[p]=1\n\nan=0\nfor i in range(n):\n    if red[i] in d and d[red[i]]>0:\n        an+=1\n        d[red[i]]-=1\n    \nprint(an)\n        \n            \n            ", "# cook your dish here\nn,m = map(int,input().split())\nl = []\nc = dict()\nfor i in range(n):\n    x,u = map(int,input().split())\n    l.append(x*u) \nfor i in range(m):\n    y,v = map(int,input().split())\n    z = y*v\n    if z in c:\n        c[z]+=1\n    else:\n        c[z]=1\nco = 0\nfor i in range(n):\n    if l[i] in c and c[l[i]]>0:\n        co+=1\n        c[l[i]]-=1\nprint(co)", "# cook your dish here\n#import math\n\nt=1\nwhile(t>0):\n\tt-=1\n\t#n=int(input())\n\tn,m=map(int,input().split())\n\tX={}\n\tY={}\n\tfor i in range(n):\n\t\tx,u=map(int,input().split())\n\t\txu=x*u\n\t\tif(xu in X):\n\t\t\tX[xu]=X[xu]+1\n\t\telse:\n\t\t\tX[xu]=1\n\n\t#l=list(map(int,input().split()))\n\tfor i in range(m):\n\t\ty,v=map(int,input().split())\n\t\tyv=y*v\n\t\tif(yv in Y):\n\t\t\tY[yv]=Y[yv]+1\n\t\telse:\n\t\t\tY[yv]=1\n\tans=0\n\tfor i in X:\n\t\tif(i in Y):\n\t\t\tm=min(X[i],Y[i])\n\t\t\tans+=m\n\tprint(ans)", "# cook your dish here\nl=input().split()\nn=int(l[0])\nm=int(l[1])\nl=[]\nfor i in range(n):\n    lo=input().split()\n    l.append(int(lo[0])*int(lo[1]))\nhashi=dict()\nfor i in range(m):\n    lo=input().split()\n    z=int(lo[0])*int(lo[1])\n    if(z in hashi):\n        hashi[z]+=1\n    else:\n        hashi[z]=1\ncount=0\nfor i in range(n):\n    if(l[i] in hashi and hashi[l[i]]>0):\n        count+=1\n        hashi[l[i]]-=1\nprint(count)\n", "n,m=map(int,input().split())\r\nX={}\r\nY={}\r\nfor i in range(n):\r\n    x,u=map(int,input().split())\r\n    xu=x*u\r\n    if xu in X:\r\n        X[xu]=X[xu]+1\r\n    else:\r\n        X[xu]=1\r\n        \r\n        \r\n    \r\nfor i in range(m):\r\n    y,v=map(int,input().split())\r\n    yv=y*v\r\n    if yv in Y:\r\n        Y[yv]=Y[yv]+1\r\n    else:\r\n        Y[yv]=1\r\n\r\ncoll=0\r\n\r\nfor i in X:\r\n    if i in Y:\r\n        m=min(X[i],Y[i])\r\n        coll=coll+m\r\nprint(coll)  \r\n    ", "# cook your dish here\n\nimport collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor i in r:\n    if i in b:\n        count+= min(r[i],b[i])\nprint(count)", "# cook your dish here\nimport collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor i in r:\n    if i in b:\n        count+= min(r[i],b[i])\nprint(count)", "# cook your dish here\nimport collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor i in r:\n    if i in b:\n        count+= min(r[i],b[i])\nprint(count)", "# cook your dish here\nimport collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor i in r:\n    if i in b:\n        count+= min(r[i],b[i])\nprint(count)\n", "# cook your dish here\nimport collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor i in r:\n    if i in b:\n        count+= min(r[i],b[i])\nprint(count)\n", "# cook your dish here\nimport collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor i in r:\n    if i in b:\n        count+= min(r[i],b[i])\nprint(count)", "# cook your dish here\nimport collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor i in r:\n    if i in b:\n        count+= min(r[i],b[i])\nprint(count)", "import collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor i in r:\n    if i in b:\n        count+= min(r[i],b[i])\nprint(count)", "import collections\nn,m=map(int,input().split())\nred=[]\nblue=[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict(collections.Counter(red))\nb=dict(collections.Counter(blue))\nfor j in r:\n    if j in b:\n        count+= min(r[j],b[j])\nprint(count)", "from collections import Counter\nn,m=map(int,input().split())\nred,blue=[],[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict( Counter(red))\nb=dict(Counter(blue))\nfor j in r:\n    if j in b:\n        count+= min(r[j],b[j])\nprint(count)", "from collections import Counter\nn,m=map(int,input().split())\nred,blue=[],[]\nfor i in range(n):\n    x,u=map(int,input().split())\n    red.append(x*u)\nfor i in range(m):\n    y,v=map(int,input().split())\n    blue.append(y*v)\ncount=0\nr=dict( Counter(red))\nb=dict(Counter(blue))\nfor j in r:\n    if j in b:\n        count+= min(r[j],b[j])\nprint(count)", "n,m=map(int,input().split())\r\nX,Y={},{}\r\nfor i in range(n):\r\n\tx,u=map(int,input().split())\r\n\tp=x*u\r\n\tif p in X:\r\n\t\tX[p]+=1\r\n\telse:\r\n\t\tX[p]=1\r\nfor i in range(m):\r\n\ty,v=map(int,input().split())\r\n\tp=y*v\r\n\tif p in Y:\r\n\t\tY[p]+=1\r\n\telse:\r\n\t\tY[p]=1\r\nans=0\r\nfor i in X:\r\n\tif i in Y:\r\n\t\tans+=min(X[i],Y[i])\r\nprint(ans)\r\n", "from collections import Counter\r\nn,m=map(int,input().split())\r\np1,p2=[],[]\r\nfor i in range(n):\r\n    x,u=map(int,input().split())\r\n    p1.append(x*u)\r\nfor i in range(m):\r\n    y,v=map(int,input().split())\r\n    p2.append(y*v)\r\nd1=dict(Counter(p1))\r\nd2=dict(Counter(p2))\r\ns=0\r\nfor x in d1:\r\n    if x in d2:\r\n        s+=min(d1[x],d2[x])\r\nprint(s)", "n, m = map(int,input().split())\nx = dict()\nfor i in range(n):\n    a,b = map(int,input().split())\n    if a*b not in x:\n        x[a*b] = 1\n    else:\n        x[a*b] += 1\n\ncnt = 0\n\nfor i in range(m):\n    a,b = map(int,input().split())\n    if a*b in x and x[a*b] != 0:\n        x[a*b] -= 1\n        cnt += 1\n\nprint(cnt)", "n,m=map(int,input().split())\nx={}\ny={}\nfor i in range(n):\n    p,s=map(int,input().split())\n    if p*s in x:\n        x[p*s]+=1\n    else:\n        x[p*s]=1\nfor i in range(m):\n    p,s=map(int,input().split())\n    if p*s in y:\n        y[p*s]+=1\n    else:\n        y[p*s]=1\nc=0\nfor i in x:\n    if i in y:\n        c+=min(x[i],y[i])\nprint(c)", "n,m=map(int,input().split())\r\nxco,yco={},{}\r\nfor i in range(n):\r\n x,v=map(int,input().split())\r\n try:\r\n  xco[x*v]+=1\r\n except:\r\n  xco[x*v]=1\r\nfor i in range(m):\r\n y,v=map(int,input().split())\r\n try:\r\n  yco[y*v]+=1\r\n except:\r\n  yco[v*y]=1\r\ncolli=0\r\nfor i in xco:\r\n if(i in yco):\r\n  colli+=min(xco[i],yco[i])\r\nprint(colli)\r\n", "# cook your dish here\nimport functools\nfrom bisect import bisect_left\narr=[]\nbrr=[]\nn,m=list(map(int,input().split()))\nfor i in range(n):\n    x,u=list(map(int,input().split()))\n    arr.append((x*u,x))\narr.sort()\narr=[a[0] for a in arr]\nfor i in range(m):\n    y,v=list(map(int,input().split()))\n    brr.append((y,y*v))\nbrr.sort()\nbrr=[a[1] for a in brr]\ncount=0\n#print(arr,brr)\nfor i in range(m):\n    pos=bisect_left(arr,brr[i])\n    if pos<len(arr) and arr[pos]==brr[i]:\n        count+=1\n        arr.pop(pos)\n    \nprint(count)\n               \n\n    \n", "# cook your dish here\nn,m=list(map(int,input().split()))\narr=[]\nfor i in range(n):\n    l=list(map(int,input().split()))\n    arr.append([l[0]*l[1],0,l[0]])\nfor i in range(m):\n    l=list(map(int,input().split()))\n    arr.append([l[0]*l[1],1,l[0]])\narr.sort()\ni=0\nans=0\nwhile(i<m+n):\n    if(arr[i][1]==1):\n        i+=1 \n    else:\n        w=i\n        for j in range(i,m+n+1):\n            if(j!=m+n and arr[j][0]==arr[i][0]):\n                if(arr[j][1]==1 and w==i):\n                    w=j  \n            else:\n                break\n        ans+=min(w-i,j-w)\n        i=j \nprint(ans)\n"]